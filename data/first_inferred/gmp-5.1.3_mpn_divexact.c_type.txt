void	O
mpn_divexact	O
(	O
mp_ptr	pointer
qp	pointer
,	O
mp_srcptr	pointer
np	pointer
,	O
mp_size_t	long
nn	long
,	O
mp_srcptr	pointer
dp	pointer
,	O
mp_size_t	long
dn	long
)	O
{	O
unsigned	O
shift	long
;	O
mp_size_t	long
qn	long
;	O
mp_ptr	pointer
tp	pointer
;	O
TMP_DECL	O
;	O
ASSERT	O
(	O
dn	long
>	O
0	int
)	O
;	O
ASSERT	O
(	O
nn	long
>=	O
dn	long
)	O
;	O
ASSERT	O
(	O
dp	pointer
[	O
dn	long
-	O
1	int
]	O
>	O
0	int
)	O
;	O
while	O
(	O
dp	pointer
[	O
0	int
]	O
==	O
0	int
)	O
{	O
ASSERT	O
(	O
np	pointer
[	O
0	int
]	O
==	O
0	int
)	O
;	O
dp	pointer
++	O
;	O
np	pointer
++	O
;	O
dn	long
--	O
;	O
nn	long
--	O
;	O
}	O
if	O
(	O
dn	long
==	O
1	int
)	O
{	O
MPN_DIVREM_OR_DIVEXACT_1	O
(	O
qp	pointer
,	O
np	pointer
,	O
nn	long
,	O
dp	pointer
[	O
0	int
]	O
)	O
;	O
return	O
;	O
}	O
TMP_MARK	O
;	O
qn	long
=	O
nn	long
+	O
1	int
-	O
dn	long
;	O
count_trailing_zeros	O
(	O
shift	long
,	O
dp	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
shift	long
>	O
0	int
)	O
{	O
mp_ptr	pointer
wp	pointer
;	O
mp_size_t	long
ss	long
;	O
ss	long
=	O
(	O
dn	long
>	O
qn	long
)	O
?	O
qn	long
+	O
1	int
:	O
dn	long
;	O
tp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
ss	long
)	O
;	O
mpn_rshift	O
(	O
tp	pointer
,	O
dp	pointer
,	O
ss	long
,	O
shift	long
)	O
;	O
dp	pointer
=	O
tp	pointer
;	O
wp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
qn	long
+	O
1	int
)	O
;	O
mpn_rshift	O
(	O
wp	pointer
,	O
np	pointer
,	O
qn	long
+	O
1	int
,	O
shift	long
)	O
;	O
np	pointer
=	O
wp	pointer
;	O
}	O
if	O
(	O
dn	long
>	O
qn	long
)	O
dn	long
=	O
qn	long
;	O
tp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
mpn_bdiv_q_itch	O
(	O
qn	long
,	O
dn	long
)	O
)	O
;	O
mpn_bdiv_q	O
(	O
qp	pointer
,	O
np	pointer
,	O
qn	long
,	O
dp	pointer
,	O
dn	long
,	O
tp	pointer
)	O
;	O
TMP_FREE	O
;	O
}	O
