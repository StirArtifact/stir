enum	O
{	O
DefaultHashTableSize	int
=	O
11	int
}	O
;	O
struct	O
sharefile	struct
{	O
char	O
*	O
mode	pointer
;	O
Hash_table	struct
*	O
table	pointer
;	O
}	O
;	O
struct	O
SharefileEntry	struct
{	O
dev_t	long
device	long
;	O
ino_t	long
inode	long
;	O
char	O
*	O
name	pointer
;	O
FILE	struct
*	O
fp	pointer
;	O
}	O
;	O
static	O
bool	bool
entry_comparator	function
(	O
const	O
void	O
*	O
av	int
,	O
const	O
void	O
*	O
bv	pointer
)	O
{	O
const	O
struct	O
SharefileEntry	struct
*	O
a	pointer
=	O
av	int
,	O
*	O
b	pointer
=	O
bv	pointer
;	O
return	O
(	O
a	pointer
->	O
inode	long
==	O
b	pointer
->	O
inode	long
)	O
&&	O
(	O
a	pointer
->	O
device	long
==	O
b	pointer
->	O
device	long
)	O
;	O
}	O
static	O
void	O
entry_free	function
(	O
void	O
*	O
pv	pointer
)	O
{	O
struct	O
SharefileEntry	struct
*	O
p	pointer
=	O
pv	pointer
;	O
if	O
(	O
p	pointer
->	O
fp	pointer
)	O
{	O
if	O
(	O
0	int
!=	O
fclose	function
(	O
p	pointer
->	O
fp	pointer
)	O
)	O
fatal_nontarget_file_error	function
(	O
errno	O
,	O
p	pointer
->	O
name	pointer
)	O
;	O
}	O
free	function
(	O
p	pointer
->	O
name	pointer
)	O
;	O
free	function
(	O
p	pointer
)	O
;	O
}	O
static	O
size_t	long
entry_hashfunc	function
(	O
const	O
void	O
*	O
pv	pointer
,	O
size_t	long
buckets	long
)	O
{	O
const	O
struct	O
SharefileEntry	struct
*	O
p	pointer
=	O
pv	pointer
;	O
return	O
(	O
p	pointer
->	O
device	long
^	O
p	pointer
->	O
inode	long
)	O
%	O
buckets	long
;	O
}	O
sharefile_handle	pointer
sharefile_init	function
(	O
const	O
char	O
*	O
mode	pointer
)	O
{	O
struct	O
Hash_tuning	struct
;	O
struct	O
sharefile	struct
*	O
p	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
sharefile	struct
)	O
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
p	pointer
->	O
mode	pointer
=	O
strdup	function
(	O
mode	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
mode	pointer
)	O
{	O
p	pointer
->	O
table	pointer
=	O
hash_initialize	function
(	O
DefaultHashTableSize	int
,	O
NULL	O
,	O
entry_hashfunc	function
,	O
entry_comparator	function
,	O
entry_free	function
)	O
;	O
if	O
(	O
p	pointer
->	O
table	pointer
)	O
{	O
return	O
p	pointer
;	O
}	O
else	O
{	O
free	function
(	O
p	pointer
->	O
mode	pointer
)	O
;	O
free	function
(	O
p	pointer
)	O
;	O
}	O
}	O
else	O
{	O
free	function
(	O
p	pointer
)	O
;	O
}	O
}	O
return	O
NULL	O
;	O
}	O
void	O
sharefile_destroy	function
(	O
sharefile_handle	pointer
pv	pointer
)	O
{	O
struct	O
sharefile	struct
*	O
p	pointer
=	O
pv	pointer
;	O
free	function
(	O
p	pointer
->	O
mode	pointer
)	O
;	O
hash_free	function
(	O
p	pointer
->	O
table	pointer
)	O
;	O
}	O
FILE	struct
*	O
sharefile_fopen	function
(	O
sharefile_handle	pointer
h	pointer
,	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
struct	O
sharefile	struct
*	O
p	pointer
=	O
h	pointer
;	O
struct	O
SharefileEntry	struct
*	O
new_entry	pointer
;	O
new_entry	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
SharefileEntry	struct
)	O
)	O
;	O
if	O
(	O
!	O
new_entry	pointer
)	O
return	O
NULL	O
;	O
new_entry	pointer
->	O
name	pointer
=	O
strdup	function
(	O
filename	pointer
)	O
;	O
if	O
(	O
NULL	O
==	O
new_entry	pointer
->	O
name	pointer
)	O
{	O
free	function
(	O
new_entry	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
NULL	O
==	O
(	O
new_entry	pointer
->	O
fp	pointer
=	O
fopen_safer	function
(	O
filename	pointer
,	O
p	pointer
->	O
mode	pointer
)	O
)	O
)	O
{	O
free	function
(	O
new_entry	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
else	O
{	O
struct	O
stat	struct
st	struct
;	O
const	O
int	O
fd	int
=	O
fileno	function
(	O
new_entry	pointer
->	O
fp	pointer
)	O
;	O
assert	O
(	O
fd	int
>=	O
0	int
)	O
;	O
set_cloexec_flag	function
(	O
fd	int
,	O
true	int
)	O
;	O
if	O
(	O
fstat	function
(	O
fd	int
,	O
&	O
st	struct
)	O
<	O
0	int
)	O
{	O
entry_free	function
(	O
new_entry	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
else	O
{	O
void	O
*	O
existing	pointer
;	O
new_entry	pointer
->	O
device	long
=	O
st	struct
.	O
st_dev	long
;	O
new_entry	pointer
->	O
inode	long
=	O
st	struct
.	O
st_ino	long
;	O
existing	pointer
=	O
hash_lookup	function
(	O
p	pointer
->	O
table	pointer
,	O
new_entry	pointer
)	O
;	O
if	O
(	O
existing	pointer
)	O
{	O
entry_free	function
(	O
new_entry	pointer
)	O
;	O
return	O
(	O
(	O
const	O
struct	O
SharefileEntry	struct
*	O
)	O
existing	pointer
)	O
->	O
fp	pointer
;	O
}	O
else	O
{	O
if	O
(	O
hash_insert	function
(	O
p	pointer
->	O
table	pointer
,	O
new_entry	pointer
)	O
)	O
{	O
return	O
new_entry	pointer
->	O
fp	pointer
;	O
}	O
else	O
{	O
const	O
int	O
save_errno	int
=	O
errno	O
;	O
entry_free	function
(	O
new_entry	pointer
)	O
;	O
errno	O
=	O
save_errno	int
;	O
return	O
NULL	O
;	O
}	O
}	O
}	O
}	O
}	O
