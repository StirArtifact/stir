int	O
mu_debug_line_info	int
;	O
struct	O
debug_category	struct
{	O
char	O
*	O
name	pointer
;	O
mu_debug_level_t	int
level	int
;	O
int	O
isset	int
;	O
}	O
;	O
static	O
struct	O
debug_category	struct
default_cattab	array
[	O
]	O
=	O
{	O
{	O
"all"	pointer
}	O
,	O
}	O
;	O
static	O
struct	O
debug_category	struct
*	O
cattab	pointer
=	O
default_cattab	array
;	O
static	O
size_t	long
catcnt	long
=	O
MU_ARRAY_SIZE	O
(	O
default_cattab	array
)	O
;	O
static	O
size_t	long
catmax	long
=	O
0	int
;	O
size_t	long
mu_debug_register_category	function
(	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
debug_category	struct
*	O
newtab	pointer
;	O
size_t	long
n	int
;	O
if	O
(	O
cattab	pointer
==	O
default_cattab	array
)	O
{	O
n	int
=	O
2	int
*	O
catcnt	long
;	O
newtab	pointer
=	O
calloc	function
(	O
n	int
,	O
sizeof	O
(	O
newtab	pointer
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
newtab	pointer
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot reallocate debug category table"	pointer
)	O
)	O
;	O
return	O
(	O
size_t	long
)	O
-	O
1	int
;	O
}	O
memcpy	function
(	O
newtab	pointer
,	O
cattab	pointer
,	O
catcnt	long
*	O
sizeof	O
(	O
cattab	pointer
[	O
0	int
]	O
)	O
)	O
;	O
cattab	pointer
=	O
newtab	pointer
;	O
catmax	long
=	O
n	int
;	O
}	O
else	O
if	O
(	O
catcnt	long
==	O
catmax	long
)	O
{	O
n	int
=	O
catmax	long
+	O
MU_DEFAULT_CATMAX	O
;	O
newtab	pointer
=	O
realloc	function
(	O
cattab	pointer
,	O
n	int
*	O
sizeof	O
(	O
cattab	pointer
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
newtab	pointer
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot reallocate debug category table"	pointer
)	O
)	O
;	O
return	O
(	O
size_t	long
)	O
-	O
1	int
;	O
}	O
else	O
{	O
cattab	pointer
=	O
newtab	pointer
;	O
catmax	long
=	O
n	int
;	O
}	O
}	O
cattab	pointer
[	O
catcnt	long
]	O
.	O
name	pointer
=	O
name	pointer
;	O
cattab	pointer
[	O
catcnt	long
]	O
.	O
level	int
=	O
0	int
;	O
cattab	pointer
[	O
catcnt	long
]	O
.	O
isset	int
=	O
0	int
;	O
return	O
catcnt	long
++	O
;	O
}	O
size_t	long
mu_debug_next_handle	function
(	O
)	O
{	O
return	O
catcnt	long
?	O
catcnt	long
:	O
1	int
;	O
}	O
int	O
mu_debug_level_p	function
(	O
mu_debug_handle_t	int
catn	int
,	O
mu_debug_level_t	int
level	int
)	O
{	O
return	O
catn	int
<	O
catcnt	long
&&	O
(	O
(	O
cattab	pointer
[	O
catn	int
]	O
.	O
isset	int
?	O
cattab	pointer
[	O
catn	int
]	O
.	O
level	int
:	O
cattab	pointer
[	O
0	int
]	O
.	O
level	int
)	O
&	O
MU_DEBUG_LEVEL_MASK	O
(	O
level	int
)	O
)	O
;	O
}	O
int	O
mu_debug_category_match	function
(	O
mu_debug_handle_t	int
catn	int
,	O
mu_debug_level_t	int
mask	int
)	O
{	O
return	O
catn	int
<	O
catcnt	long
&&	O
(	O
(	O
cattab	pointer
[	O
catn	int
]	O
.	O
isset	int
?	O
cattab	pointer
[	O
catn	int
]	O
.	O
level	int
:	O
cattab	pointer
[	O
0	int
]	O
.	O
level	int
)	O
&	O
mask	int
)	O
;	O
}	O
static	O
mu_debug_handle_t	int
find_category	function
(	O
const	O
char	O
*	O
name	pointer
,	O
size_t	long
len	long
)	O
{	O
mu_debug_handle_t	int
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
catcnt	long
;	O
i	int
++	O
)	O
{	O
if	O
(	O
strlen	function
(	O
cattab	pointer
[	O
i	int
]	O
.	O
name	pointer
)	O
==	O
len	long
&&	O
memcmp	function
(	O
cattab	pointer
[	O
i	int
]	O
.	O
name	pointer
,	O
name	pointer
,	O
len	long
)	O
==	O
0	int
)	O
return	O
i	int
;	O
}	O
return	O
(	O
mu_debug_handle_t	int
)	O
-	O
1	int
;	O
}	O
void	O
mu_debug_enable_category	function
(	O
const	O
char	O
*	O
catname	pointer
,	O
size_t	long
catlen	long
,	O
mu_debug_level_t	int
level	int
)	O
{	O
mu_debug_handle_t	int
catn	int
=	O
find_category	function
(	O
catname	pointer
,	O
catlen	long
)	O
;	O
if	O
(	O
catn	int
==	O
(	O
mu_debug_handle_t	int
)	O
-	O
1	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"unknown category: %.*s"	pointer
)	O
,	O
(	O
int	O
)	O
catlen	long
,	O
catname	pointer
)	O
;	O
return	O
;	O
}	O
cattab	pointer
[	O
catn	int
]	O
.	O
level	int
=	O
level	int
;	O
cattab	pointer
[	O
catn	int
]	O
.	O
isset	int
=	O
1	int
;	O
}	O
void	O
mu_debug_disable_category	function
(	O
const	O
char	O
*	O
catname	pointer
,	O
size_t	long
catlen	long
)	O
{	O
size_t	long
catn	int
=	O
find_category	function
(	O
catname	pointer
,	O
catlen	long
)	O
;	O
if	O
(	O
catn	int
==	O
(	O
mu_debug_handle_t	int
)	O
-	O
1	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"unknown category: %.*s"	pointer
)	O
,	O
(	O
int	O
)	O
catlen	long
,	O
catname	pointer
)	O
;	O
return	O
;	O
}	O
cattab	pointer
[	O
catn	int
]	O
.	O
isset	int
=	O
0	int
;	O
}	O
int	O
mu_debug_category_level	function
(	O
const	O
char	O
*	O
catname	pointer
,	O
size_t	long
catlen	long
,	O
mu_debug_level_t	int
*	O
plev	pointer
)	O
{	O
mu_debug_handle_t	int
catn	int
;	O
if	O
(	O
catname	pointer
)	O
{	O
catn	int
=	O
find_category	function
(	O
catname	pointer
,	O
catlen	long
)	O
;	O
if	O
(	O
catn	int
==	O
(	O
mu_debug_handle_t	int
)	O
-	O
1	int
)	O
return	O
MU_ERR_NOENT	O
;	O
}	O
else	O
catn	int
=	O
0	int
;	O
*	O
plev	pointer
=	O
cattab	pointer
[	O
catn	int
]	O
.	O
level	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_debug_set_category_level	function
(	O
mu_debug_handle_t	int
catn	int
,	O
mu_debug_level_t	int
level	int
)	O
{	O
if	O
(	O
catn	int
<	O
catcnt	long
)	O
{	O
cattab	pointer
[	O
catn	int
]	O
.	O
isset	int
=	O
1	int
;	O
cattab	pointer
[	O
catn	int
]	O
.	O
level	int
=	O
level	int
;	O
return	O
0	int
;	O
}	O
return	O
MU_ERR_NOENT	O
;	O
}	O
int	O
mu_debug_get_category_level	function
(	O
mu_debug_handle_t	int
catn	int
,	O
mu_debug_level_t	int
*	O
plev	pointer
)	O
{	O
if	O
(	O
catn	int
<	O
catcnt	long
)	O
{	O
if	O
(	O
!	O
cattab	pointer
[	O
catn	int
]	O
.	O
isset	int
)	O
*	O
plev	pointer
=	O
0	int
;	O
else	O
*	O
plev	pointer
=	O
cattab	pointer
[	O
catn	int
]	O
.	O
level	int
;	O
return	O
0	int
;	O
}	O
return	O
MU_ERR_NOENT	O
;	O
}	O
static	O
char	O
*	O
mu_debug_level_str	array
[	O
]	O
=	O
{	O
"error"	pointer
,	O
"trace0"	pointer
,	O
"trace1"	pointer
,	O
"trace2"	pointer
,	O
"trace3"	pointer
,	O
"trace4"	pointer
,	O
"trace5"	pointer
,	O
"trace6"	pointer
,	O
"trace7"	pointer
,	O
"trace8"	pointer
,	O
"trace9"	pointer
,	O
"prot"	pointer
}	O
;	O
static	O
int	O
mu_debug_level_from_string	function
(	O
const	O
char	O
*	O
str	pointer
,	O
mu_debug_level_t	int
*	O
lev	pointer
,	O
char	O
*	O
*	O
endp	pointer
)	O
{	O
int	O
i	int
;	O
const	O
char	O
*	O
p	pointer
;	O
char	O
*	O
q	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
MU_ARRAY_SIZE	O
(	O
mu_debug_level_str	array
)	O
;	O
i	int
++	O
)	O
{	O
for	O
(	O
p	pointer
=	O
str	pointer
,	O
q	pointer
=	O
mu_debug_level_str	array
[	O
i	int
]	O
;	O
;	O
p	pointer
++	O
,	O
q	pointer
++	O
)	O
{	O
if	O
(	O
!	O
*	O
q	pointer
)	O
{	O
if	O
(	O
endp	pointer
)	O
*	O
endp	pointer
=	O
(	O
char	O
*	O
)	O
p	pointer
;	O
*	O
lev	pointer
=	O
i	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
*	O
q	pointer
!=	O
*	O
p	pointer
)	O
break	O
;	O
}	O
}	O
return	O
MU_ERR_NOENT	O
;	O
}	O
static	O
void	O
parse_spec	function
(	O
const	O
char	O
*	O
spec	pointer
)	O
{	O
char	O
*	O
q	pointer
;	O
mu_debug_level_t	int
level	int
;	O
if	O
(	O
mu_isdigit	O
(	O
*	O
spec	pointer
)	O
)	O
{	O
level	int
=	O
strtoul	function
(	O
spec	pointer
,	O
&	O
q	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
q	pointer
)	O
mu_error	function
(	O
_	O
(	O
"%s: wrong debug spec near %s"	pointer
)	O
,	O
spec	pointer
,	O
q	pointer
)	O
;	O
else	O
{	O
cattab	pointer
[	O
0	int
]	O
.	O
level	int
=	O
level	int
;	O
cattab	pointer
[	O
0	int
]	O
.	O
isset	int
=	O
1	int
;	O
}	O
return	O
;	O
}	O
if	O
(	O
*	O
spec	pointer
==	O
'!'	O
)	O
mu_debug_disable_category	function
(	O
spec	pointer
+	O
1	int
,	O
strlen	function
(	O
spec	pointer
+	O
1	int
)	O
)	O
;	O
else	O
{	O
char	O
*	O
p	pointer
;	O
size_t	long
len	long
;	O
p	pointer
=	O
strchr	function
(	O
spec	pointer
,	O
'.'	O
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
struct	O
mu_wordsplit	struct
ws	pointer
;	O
len	long
=	O
p	pointer
-	O
spec	pointer
;	O
ws	pointer
.	O
ws_delim	pointer
=	O
","	pointer
;	O
if	O
(	O
mu_wordsplit	struct
(	O
p	pointer
+	O
1	int
,	O
&	O
ws	pointer
,	O
MU_WRDSF_DELIM	O
|	O
MU_WRDSF_WS	O
|	O
MU_WRDSF_NOVAR	O
|	O
MU_WRDSF_NOCMD	O
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot split line `%s': %s"	pointer
)	O
,	O
p	pointer
+	O
1	int
,	O
mu_wordsplit_strerror	function
(	O
&	O
ws	pointer
)	O
)	O
;	O
return	O
;	O
}	O
else	O
{	O
size_t	long
i	int
;	O
mu_debug_level_t	int
lev	pointer
=	O
0	int
;	O
mu_debug_level_t	int
xlev	int
=	O
0	int
;	O
char	O
*	O
end	struct
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ws	pointer
.	O
ws_wordc	long
;	O
i	int
++	O
)	O
{	O
char	O
*	O
s	pointer
=	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
;	O
int	O
exact	int
=	O
0	int
;	O
mu_debug_level_t	int
n	int
;	O
mu_debug_level_t	int
*	O
tgt	pointer
=	O
&	O
lev	pointer
;	O
if	O
(	O
*	O
s	pointer
==	O
'!'	O
)	O
{	O
if	O
(	O
i	int
==	O
0	int
)	O
lev	pointer
=	O
MU_DEBUG_LEVEL_UPTO	O
(	O
MU_DEBUG_PROT	int
)	O
;	O
tgt	pointer
=	O
&	O
xlev	int
;	O
s	pointer
++	O
;	O
}	O
if	O
(	O
*	O
s	pointer
==	O
'='	O
)	O
{	O
exact	int
=	O
1	int
;	O
s	pointer
++	O
;	O
}	O
if	O
(	O
mu_debug_level_from_string	function
(	O
s	pointer
,	O
&	O
n	int
,	O
&	O
end	struct
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"unknown level `%s'"	pointer
)	O
,	O
s	pointer
)	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
*	O
end	struct
==	O
'-'	O
)	O
{	O
mu_debug_level_t	int
l	int
;	O
s	pointer
=	O
end	struct
+	O
1	int
;	O
if	O
(	O
mu_debug_level_from_string	function
(	O
s	pointer
,	O
&	O
l	int
,	O
&	O
end	struct
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"unknown level `%s'"	pointer
)	O
,	O
s	pointer
)	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
*	O
end	struct
)	O
{	O
mu_error	function
(	O
_	O
(	O
"invalid level: %s"	pointer
)	O
,	O
s	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
n	int
<	O
l	int
)	O
*	O
tgt	pointer
|=	O
MU_DEBUG_LEVEL_RANGE	O
(	O
n	int
,	O
l	int
)	O
;	O
else	O
*	O
tgt	pointer
|=	O
MU_DEBUG_LEVEL_RANGE	O
(	O
l	int
,	O
n	int
)	O
;	O
}	O
else	O
if	O
(	O
*	O
end	struct
)	O
{	O
mu_error	function
(	O
_	O
(	O
"invalid level: %s"	pointer
)	O
,	O
s	pointer
)	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
exact	int
)	O
*	O
tgt	pointer
|=	O
MU_DEBUG_LEVEL_MASK	O
(	O
n	int
)	O
;	O
else	O
*	O
tgt	pointer
|=	O
MU_DEBUG_LEVEL_UPTO	O
(	O
n	int
)	O
;	O
}	O
level	int
=	O
lev	pointer
&	O
~	O
xlev	int
;	O
}	O
}	O
else	O
{	O
len	long
=	O
strlen	function
(	O
spec	pointer
)	O
;	O
level	int
=	O
MU_DEBUG_LEVEL_UPTO	O
(	O
MU_DEBUG_PROT	int
)	O
;	O
}	O
mu_debug_enable_category	function
(	O
spec	pointer
,	O
len	long
,	O
level	int
)	O
;	O
}	O
}	O
void	O
mu_debug_parse_spec	function
(	O
const	O
char	O
*	O
spec	pointer
)	O
{	O
struct	O
mu_wordsplit	struct
ws	pointer
;	O
ws	pointer
.	O
ws_delim	pointer
=	O
";"	pointer
;	O
if	O
(	O
mu_wordsplit	struct
(	O
spec	pointer
,	O
&	O
ws	pointer
,	O
MU_WRDSF_DELIM	O
|	O
MU_WRDSF_WS	O
|	O
MU_WRDSF_NOVAR	O
|	O
MU_WRDSF_NOCMD	O
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot split line `%s': %s"	pointer
)	O
,	O
spec	pointer
,	O
mu_wordsplit_strerror	function
(	O
&	O
ws	pointer
)	O
)	O
;	O
}	O
else	O
{	O
size_t	long
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ws	pointer
.	O
ws_wordc	long
;	O
i	int
++	O
)	O
parse_spec	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
)	O
;	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
}	O
}	O
void	O
mu_debug_clear_all	function
(	O
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
catcnt	long
;	O
i	int
++	O
)	O
cattab	pointer
[	O
i	int
]	O
.	O
isset	int
=	O
0	int
;	O
}	O
static	O
int	O
name_matches	function
(	O
char	O
*	O
*	O
names	pointer
,	O
char	O
*	O
str	pointer
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
names	pointer
[	O
i	int
]	O
;	O
i	int
++	O
)	O
if	O
(	O
strcmp	function
(	O
names	pointer
[	O
i	int
]	O
,	O
str	pointer
)	O
==	O
0	int
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_debug_format_spec	function
(	O
mu_stream_t	pointer
str	pointer
,	O
const	O
char	O
*	O
names	pointer
,	O
int	O
showunset	int
)	O
{	O
int	O
i	int
;	O
size_t	long
cnt	pointer
=	O
0	int
;	O
int	O
rc	int
=	O
0	int
;	O
struct	O
mu_wordsplit	struct
ws	pointer
;	O
if	O
(	O
names	pointer
)	O
{	O
ws	pointer
.	O
ws_delim	pointer
=	O
";"	pointer
;	O
if	O
(	O
mu_wordsplit	struct
(	O
names	pointer
,	O
&	O
ws	pointer
,	O
MU_WRDSF_DELIM	O
|	O
MU_WRDSF_WS	O
|	O
MU_WRDSF_NOVAR	O
|	O
MU_WRDSF_NOCMD	O
)	O
)	O
return	O
errno	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
catcnt	long
;	O
i	int
++	O
)	O
{	O
if	O
(	O
names	pointer
&&	O
!	O
name_matches	function
(	O
ws	pointer
.	O
ws_wordv	pointer
,	O
cattab	pointer
[	O
i	int
]	O
.	O
name	pointer
)	O
)	O
continue	O
;	O
if	O
(	O
cattab	pointer
[	O
i	int
]	O
.	O
isset	int
&&	O
cattab	pointer
[	O
i	int
]	O
.	O
level	int
)	O
{	O
if	O
(	O
cnt	pointer
)	O
{	O
rc	int
=	O
mu_stream_printf	function
(	O
str	pointer
,	O
";"	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
}	O
rc	int
=	O
mu_stream_printf	function
(	O
str	pointer
,	O
"%s"	pointer
,	O
cattab	pointer
[	O
i	int
]	O
.	O
name	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
if	O
(	O
cattab	pointer
[	O
i	int
]	O
.	O
level	int
!=	O
_LEVEL_ALL	O
)	O
{	O
mu_debug_level_t	int
j	int
=	O
MU_DEBUG_ERROR	int
,	O
minl	int
,	O
maxl	int
;	O
int	O
delim	int
=	O
'.'	O
;	O
while	O
(	O
1	int
)	O
{	O
for	O
(	O
;	O
j	int
<=	O
MU_DEBUG_PROT	int
;	O
j	int
++	O
)	O
if	O
(	O
cattab	pointer
[	O
i	int
]	O
.	O
level	int
&	O
MU_DEBUG_LEVEL_MASK	O
(	O
j	int
)	O
)	O
break	O
;	O
if	O
(	O
j	int
>	O
MU_DEBUG_PROT	int
)	O
break	O
;	O
minl	int
=	O
j	int
;	O
for	O
(	O
;	O
j	int
+	O
1	int
<=	O
MU_DEBUG_PROT	int
&&	O
cattab	pointer
[	O
i	int
]	O
.	O
level	int
&	O
MU_DEBUG_LEVEL_MASK	O
(	O
j	int
+	O
1	int
)	O
;	O
j	int
++	O
)	O
;	O
maxl	int
=	O
j	int
++	O
;	O
if	O
(	O
minl	int
==	O
maxl	int
)	O
rc	int
=	O
mu_stream_printf	function
(	O
str	pointer
,	O
"%c=%s"	pointer
,	O
delim	int
,	O
mu_debug_level_str	array
[	O
minl	int
]	O
)	O
;	O
else	O
if	O
(	O
minl	int
==	O
0	int
)	O
rc	int
=	O
mu_stream_printf	function
(	O
str	pointer
,	O
"%c%s"	pointer
,	O
delim	int
,	O
mu_debug_level_str	array
[	O
maxl	int
]	O
)	O
;	O
else	O
rc	int
=	O
mu_stream_printf	function
(	O
str	pointer
,	O
"%c%s-%s"	pointer
,	O
delim	int
,	O
mu_debug_level_str	array
[	O
minl	int
]	O
,	O
mu_debug_level_str	array
[	O
maxl	int
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
delim	int
=	O
','	O
;	O
}	O
}	O
cnt	pointer
++	O
;	O
}	O
else	O
if	O
(	O
showunset	int
)	O
{	O
if	O
(	O
cnt	pointer
)	O
{	O
rc	int
=	O
mu_stream_printf	function
(	O
str	pointer
,	O
";"	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
}	O
rc	int
=	O
mu_stream_printf	function
(	O
str	pointer
,	O
"!%s"	pointer
,	O
cattab	pointer
[	O
i	int
]	O
.	O
name	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
cnt	pointer
++	O
;	O
}	O
}	O
if	O
(	O
names	pointer
)	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
mu_iterator_t	pointer
iterator_head	pointer
;	O
struct	O
debug_iterator	struct
{	O
size_t	long
pos	long
;	O
int	O
flags	int
;	O
}	O
;	O
static	O
int	O
first	pointer
(	O
void	O
*	O
owner	pointer
)	O
{	O
struct	O
debug_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
itr	pointer
->	O
flags	int
&=	O
~	O
ITR_FINISHED	int
;	O
if	O
(	O
itr	pointer
->	O
flags	int
&	O
ITR_BACKWARDS	int
)	O
itr	pointer
->	O
pos	long
=	O
catcnt	long
-	O
1	int
;	O
else	O
itr	pointer
->	O
pos	long
=	O
0	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
next	pointer
(	O
void	O
*	O
owner	pointer
)	O
{	O
struct	O
debug_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
itr	pointer
->	O
flags	int
&=	O
~	O
ITR_FINISHED	int
;	O
do	O
{	O
if	O
(	O
itr	pointer
->	O
flags	int
&	O
ITR_BACKWARDS	int
)	O
{	O
if	O
(	O
itr	pointer
->	O
pos	long
)	O
itr	pointer
->	O
pos	long
--	O
;	O
else	O
itr	pointer
->	O
flags	int
|=	O
ITR_FINISHED	int
;	O
}	O
else	O
{	O
if	O
(	O
itr	pointer
->	O
pos	long
<	O
catcnt	long
-	O
1	int
)	O
itr	pointer
->	O
pos	long
++	O
;	O
else	O
itr	pointer
->	O
flags	int
|=	O
ITR_FINISHED	int
;	O
}	O
}	O
while	O
(	O
(	O
itr	pointer
->	O
flags	int
&	O
ITR_SKIPUNSET	int
)	O
&&	O
!	O
(	O
itr	pointer
->	O
flags	int
&	O
ITR_FINISHED	int
)	O
&&	O
!	O
cattab	pointer
[	O
itr	pointer
->	O
pos	long
]	O
.	O
isset	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
getitem	pointer
(	O
void	O
*	O
owner	pointer
,	O
void	O
*	O
*	O
pret	pointer
,	O
const	O
void	O
*	O
*	O
pkey	pointer
)	O
{	O
struct	O
debug_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
*	O
(	O
mu_debug_level_t	int
*	O
)	O
pret	pointer
=	O
cattab	pointer
[	O
itr	pointer
->	O
pos	long
]	O
.	O
level	int
;	O
if	O
(	O
pkey	pointer
)	O
*	O
pkey	pointer
=	O
cattab	pointer
[	O
itr	pointer
->	O
pos	long
]	O
.	O
name	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
finished_p	pointer
(	O
void	O
*	O
owner	pointer
)	O
{	O
struct	O
debug_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
return	O
itr	pointer
->	O
flags	int
&	O
ITR_FINISHED	int
;	O
}	O
static	O
int	O
delitem	pointer
(	O
void	O
*	O
owner	pointer
,	O
void	O
*	O
item	pointer
)	O
{	O
struct	O
debug_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
return	O
mu_c_strcasecmp	function
(	O
cattab	pointer
[	O
itr	pointer
->	O
pos	long
]	O
.	O
name	pointer
,	O
(	O
char	O
*	O
)	O
item	pointer
)	O
==	O
0	int
?	O
MU_ITR_DELITEM_NEXT	int
:	O
MU_ITR_DELITEM_NOTHING	int
;	O
}	O
static	O
int	O
list_data_dup	function
(	O
void	O
*	O
*	O
ptr	pointer
,	O
void	O
*	O
owner	pointer
)	O
{	O
*	O
ptr	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
debug_iterator	struct
)	O
)	O
;	O
if	O
(	O
*	O
ptr	pointer
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
memcpy	function
(	O
*	O
ptr	pointer
,	O
owner	pointer
,	O
sizeof	O
(	O
struct	O
debug_iterator	struct
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
list_itrctl	function
(	O
void	O
*	O
owner	pointer
,	O
enum	O
mu_itrctl_req	enum
req	enum
,	O
void	O
*	O
arg	pointer
)	O
{	O
struct	O
debug_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
switch	O
(	O
req	enum
)	O
{	O
case	O
mu_itrctl_tell	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
*	O
(	O
size_t	long
*	O
)	O
arg	pointer
=	O
itr	pointer
->	O
pos	long
+	O
1	int
;	O
break	O
;	O
case	O
mu_itrctl_delete	int
:	O
case	O
mu_itrctl_delete_nd	int
:	O
cattab	pointer
[	O
itr	pointer
->	O
pos	long
]	O
.	O
level	int
=	O
0	int
;	O
cattab	pointer
[	O
itr	pointer
->	O
pos	long
]	O
.	O
isset	int
=	O
0	int
;	O
break	O
;	O
case	O
mu_itrctl_replace	int
:	O
case	O
mu_itrctl_replace_nd	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
cattab	pointer
[	O
itr	pointer
->	O
pos	long
]	O
.	O
level	int
=	O
*	O
(	O
mu_debug_level_t	int
*	O
)	O
arg	pointer
;	O
break	O
;	O
case	O
mu_itrctl_qry_direction	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
else	O
*	O
(	O
int	O
*	O
)	O
arg	pointer
=	O
itr	pointer
->	O
flags	int
&	O
ITR_BACKWARDS	int
;	O
break	O
;	O
case	O
mu_itrctl_set_direction	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
else	O
itr	pointer
->	O
flags	int
|=	O
ITR_BACKWARDS	int
;	O
break	O
;	O
case	O
mu_itrctl_count	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
*	O
(	O
size_t	long
*	O
)	O
arg	pointer
=	O
catcnt	long
;	O
break	O
;	O
default	O
:	O
return	O
ENOSYS	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_debug_get_iterator	function
(	O
mu_iterator_t	pointer
*	O
piterator	pointer
,	O
int	O
skipunset	int
)	O
{	O
int	O
status	int
;	O
mu_iterator_t	pointer
iterator	pointer
;	O
struct	O
debug_iterator	struct
*	O
itr	pointer
;	O
itr	pointer
=	O
malloc	function
(	O
sizeof	O
*	O
itr	pointer
)	O
;	O
if	O
(	O
!	O
itr	pointer
)	O
return	O
ENOMEM	int
;	O
itr	pointer
->	O
pos	long
=	O
0	int
;	O
itr	pointer
->	O
flags	int
=	O
skipunset	int
?	O
ITR_SKIPUNSET	int
:	O
0	int
;	O
status	int
=	O
mu_iterator_create	function
(	O
&	O
iterator	pointer
,	O
itr	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
free	function
(	O
itr	pointer
)	O
;	O
return	O
status	int
;	O
}	O
mu_iterator_set_first	function
(	O
iterator	pointer
,	O
first	pointer
)	O
;	O
mu_iterator_set_next	function
(	O
iterator	pointer
,	O
next	pointer
)	O
;	O
mu_iterator_set_getitem	function
(	O
iterator	pointer
,	O
getitem	pointer
)	O
;	O
mu_iterator_set_finished_p	function
(	O
iterator	pointer
,	O
finished_p	pointer
)	O
;	O
mu_iterator_set_delitem	function
(	O
iterator	pointer
,	O
delitem	pointer
)	O
;	O
mu_iterator_set_dup	function
(	O
iterator	pointer
,	O
list_data_dup	function
)	O
;	O
mu_iterator_set_itrctl	function
(	O
iterator	pointer
,	O
list_itrctl	function
)	O
;	O
mu_iterator_attach	function
(	O
&	O
iterator_head	pointer
,	O
iterator	pointer
)	O
;	O
*	O
piterator	pointer
=	O
iterator	pointer
;	O
return	O
0	int
;	O
}	O
void	O
mu_debug_log	function
(	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
char	O
*	O
buf	pointer
=	O
NULL	O
;	O
size_t	long
buflen	long
=	O
0	int
;	O
size_t	long
n	int
;	O
int	O
rc	int
;	O
mu_diag_init	function
(	O
)	O
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
rc	int
=	O
mu_vasnprintf	function
(	O
&	O
buf	pointer
,	O
&	O
buflen	long
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
size_t	long
i	int
;	O
int	O
nl	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
buf	pointer
[	O
i	int
]	O
;	O
i	int
+=	O
n	int
)	O
{	O
n	int
=	O
strcspn	function
(	O
buf	pointer
+	O
i	int
,	O
"\n"	pointer
)	O
;	O
if	O
(	O
(	O
nl	int
=	O
buf	pointer
[	O
i	int
+	O
n	int
]	O
)	O
)	O
++	O
n	int
;	O
mu_stream_printf	function
(	O
mu_strerr	pointer
,	O
"\033s<%d>"	pointer
,	O
MU_LOG_DEBUG	int
)	O
;	O
mu_stream_write	function
(	O
mu_strerr	pointer
,	O
buf	pointer
+	O
i	int
,	O
n	int
,	O
NULL	O
)	O
;	O
}	O
if	O
(	O
!	O
nl	int
)	O
mu_stream_write	function
(	O
mu_strerr	pointer
,	O
"\n"	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
}	O
}	O
void	O
mu_debug_log_begin	function
(	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
mu_diag_init	function
(	O
)	O
;	O
mu_stream_flush	function
(	O
mu_strerr	pointer
)	O
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
mu_stream_printf	function
(	O
mu_strerr	pointer
,	O
"\033s<%d>"	pointer
,	O
MU_LOG_DEBUG	int
)	O
;	O
mu_stream_vprintf	function
(	O
mu_strerr	pointer
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
void	O
mu_debug_log_cont	function
(	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
mu_stream_vprintf	function
(	O
mu_strerr	pointer
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
void	O
mu_debug_log_end	function
(	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
mu_stream_vprintf	function
(	O
mu_strerr	pointer
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
mu_stream_write	function
(	O
mu_strerr	pointer
,	O
"\n"	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
void	O
mu_debug_log_nl	function
(	O
)	O
{	O
mu_stream_write	function
(	O
mu_strerr	pointer
,	O
"\n"	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
}	O
