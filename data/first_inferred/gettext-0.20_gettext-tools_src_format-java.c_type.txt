enum	O
format_arg_type	enum
{	O
FAT_NONE	int
,	O
FAT_OBJECT	int
,	O
FAT_NUMBER	int
,	O
FAT_DATE	int
}	O
;	O
struct	O
numbered_arg	struct
{	O
unsigned	O
int	O
number	int
;	O
enum	O
format_arg_type	enum
type	enum
;	O
}	O
;	O
struct	O
spec	struct
{	O
unsigned	O
int	O
directives	int
;	O
unsigned	O
int	O
numbered_arg_count	int
;	O
unsigned	O
int	O
allocated	int
;	O
struct	O
numbered_arg	struct
*	O
numbered	pointer
;	O
}	O
;	O
static	O
bool	bool
date_format_parse	function
(	O
const	O
char	O
*	O
format	pointer
)	O
;	O
static	O
bool	bool
number_format_parse	function
(	O
const	O
char	O
*	O
format	pointer
)	O
;	O
static	O
bool	bool
choice_format_parse	function
(	O
const	O
char	O
*	O
format	pointer
,	O
struct	O
spec	struct
*	O
spec	struct
,	O
char	O
*	O
*	O
invalid_reason	pointer
)	O
;	O
static	O
bool	bool
message_format_parse	function
(	O
const	O
char	O
*	O
format	pointer
,	O
char	O
*	O
fdi	pointer
,	O
struct	O
spec	struct
*	O
spec	struct
,	O
char	O
*	O
*	O
invalid_reason	pointer
)	O
{	O
const	O
char	O
*	O
const	O
format_start	pointer
=	O
format	pointer
;	O
bool	bool
quoting	bool
=	O
false	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
HANDLE_QUOTE	O
;	O
if	O
(	O
!	O
quoting	bool
&&	O
*	O
format	pointer
==	O
'{'	O
)	O
{	O
unsigned	O
int	O
depth	int
;	O
const	O
char	O
*	O
element_start	pointer
;	O
const	O
char	O
*	O
element_end	pointer
;	O
size_t	long
n	long
;	O
char	O
*	O
element_alloced	pointer
;	O
char	O
*	O
element	pointer
;	O
unsigned	O
int	O
number	int
;	O
enum	O
format_arg_type	enum
type	enum
;	O
FDI_SET	O
(	O
format	pointer
,	O
FMTDIR_START	int
)	O
;	O
spec	struct
->	O
directives	int
++	O
;	O
element_start	pointer
=	O
++	O
format	pointer
;	O
depth	int
=	O
0	int
;	O
for	O
(	O
;	O
*	O
format	pointer
!=	O
'\0'	O
;	O
format	pointer
++	O
)	O
{	O
if	O
(	O
*	O
format	pointer
==	O
'{'	O
)	O
depth	int
++	O
;	O
else	O
if	O
(	O
*	O
format	pointer
==	O
'}'	O
)	O
{	O
if	O
(	O
depth	int
==	O
0	int
)	O
break	O
;	O
else	O
depth	int
--	O
;	O
}	O
}	O
if	O
(	O
*	O
format	pointer
==	O
'\0'	O
)	O
{	O
*	O
invalid_reason	pointer
=	O
xstrdup	function
(	O
_	O
(	O
"The string ends in the middle of a directive: found '{' without matching '}'."	pointer
)	O
)	O
;	O
FDI_SET	O
(	O
format	pointer
-	O
1	int
,	O
FMTDIR_ERROR	int
)	O
;	O
return	O
false	int
;	O
}	O
element_end	pointer
=	O
format	pointer
++	O
;	O
n	long
=	O
element_end	pointer
-	O
element_start	pointer
;	O
element	pointer
=	O
element_alloced	pointer
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
n	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
element	pointer
,	O
element_start	pointer
,	O
n	long
)	O
;	O
element	pointer
[	O
n	long
]	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
c_isdigit	function
(	O
*	O
element	pointer
)	O
)	O
{	O
*	O
invalid_reason	pointer
=	O
xasprintf	function
(	O
_	O
(	O
"In the directive number %u, '{' is not followed by an argument number."	pointer
)	O
,	O
spec	struct
->	O
directives	int
)	O
;	O
FDI_SET	O
(	O
format	pointer
-	O
1	int
,	O
FMTDIR_ERROR	int
)	O
;	O
freea	function
(	O
element_alloced	pointer
)	O
;	O
return	O
false	int
;	O
}	O
number	int
=	O
0	int
;	O
do	O
{	O
number	int
=	O
10	int
*	O
number	int
+	O
(	O
*	O
element	pointer
-	O
'0'	O
)	O
;	O
element	pointer
++	O
;	O
}	O
while	O
(	O
c_isdigit	function
(	O
*	O
element	pointer
)	O
)	O
;	O
type	enum
=	O
FAT_OBJECT	int
;	O
if	O
(	O
*	O
element	pointer
==	O
'\0'	O
)	O
;	O
else	O
if	O
(	O
strncmp	function
(	O
element	pointer
,	O
",time"	pointer
,	O
5	int
)	O
==	O
0	int
||	O
strncmp	function
(	O
element	pointer
,	O
",date"	pointer
,	O
5	int
)	O
==	O
0	int
)	O
{	O
type	enum
=	O
FAT_DATE	int
;	O
element	pointer
+=	O
5	int
;	O
if	O
(	O
*	O
element	pointer
==	O
'\0'	O
)	O
;	O
else	O
if	O
(	O
*	O
element	pointer
==	O
','	O
)	O
{	O
element	pointer
++	O
;	O
if	O
(	O
strcmp	function
(	O
element	pointer
,	O
"short"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
element	pointer
,	O
"medium"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
element	pointer
,	O
"long"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
element	pointer
,	O
"full"	pointer
)	O
==	O
0	int
||	O
date_format_parse	function
(	O
element	pointer
)	O
)	O
;	O
else	O
{	O
*	O
invalid_reason	pointer
=	O
xasprintf	function
(	O
_	O
(	O
"In the directive number %u, the substring \"%s\" is not a valid date/time style."	pointer
)	O
,	O
spec	struct
->	O
directives	int
,	O
element	pointer
)	O
;	O
FDI_SET	O
(	O
format	pointer
-	O
1	int
,	O
FMTDIR_ERROR	int
)	O
;	O
freea	function
(	O
element_alloced	pointer
)	O
;	O
return	O
false	int
;	O
}	O
}	O
else	O
{	O
*	O
element	pointer
=	O
'\0'	O
;	O
element	pointer
-=	O
4	int
;	O
*	O
invalid_reason	pointer
=	O
xasprintf	function
(	O
_	O
(	O
"In the directive number %u, \"%s\" is not followed by a comma."	pointer
)	O
,	O
spec	struct
->	O
directives	int
,	O
element	pointer
)	O
;	O
FDI_SET	O
(	O
format	pointer
-	O
1	int
,	O
FMTDIR_ERROR	int
)	O
;	O
freea	function
(	O
element_alloced	pointer
)	O
;	O
return	O
false	int
;	O
}	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
element	pointer
,	O
",number"	pointer
,	O
7	int
)	O
==	O
0	int
)	O
{	O
type	enum
=	O
FAT_NUMBER	int
;	O
element	pointer
+=	O
7	int
;	O
if	O
(	O
*	O
element	pointer
==	O
'\0'	O
)	O
;	O
else	O
if	O
(	O
*	O
element	pointer
==	O
','	O
)	O
{	O
element	pointer
++	O
;	O
if	O
(	O
strcmp	function
(	O
element	pointer
,	O
"currency"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
element	pointer
,	O
"percent"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
element	pointer
,	O
"integer"	pointer
)	O
==	O
0	int
||	O
number_format_parse	function
(	O
element	pointer
)	O
)	O
;	O
else	O
{	O
*	O
invalid_reason	pointer
=	O
xasprintf	function
(	O
_	O
(	O
"In the directive number %u, the substring \"%s\" is not a valid number style."	pointer
)	O
,	O
spec	struct
->	O
directives	int
,	O
element	pointer
)	O
;	O
FDI_SET	O
(	O
format	pointer
-	O
1	int
,	O
FMTDIR_ERROR	int
)	O
;	O
freea	function
(	O
element_alloced	pointer
)	O
;	O
return	O
false	int
;	O
}	O
}	O
else	O
{	O
*	O
element	pointer
=	O
'\0'	O
;	O
element	pointer
-=	O
6	int
;	O
*	O
invalid_reason	pointer
=	O
xasprintf	function
(	O
_	O
(	O
"In the directive number %u, \"%s\" is not followed by a comma."	pointer
)	O
,	O
spec	struct
->	O
directives	int
,	O
element	pointer
)	O
;	O
FDI_SET	O
(	O
format	pointer
-	O
1	int
,	O
FMTDIR_ERROR	int
)	O
;	O
freea	function
(	O
element_alloced	pointer
)	O
;	O
return	O
false	int
;	O
}	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
element	pointer
,	O
",choice"	pointer
,	O
7	int
)	O
==	O
0	int
)	O
{	O
type	enum
=	O
FAT_NUMBER	int
;	O
element	pointer
+=	O
7	int
;	O
if	O
(	O
*	O
element	pointer
==	O
'\0'	O
)	O
;	O
else	O
if	O
(	O
*	O
element	pointer
==	O
','	O
)	O
{	O
element	pointer
++	O
;	O
if	O
(	O
choice_format_parse	function
(	O
element	pointer
,	O
spec	struct
,	O
invalid_reason	pointer
)	O
)	O
;	O
else	O
{	O
FDI_SET	O
(	O
format	pointer
-	O
1	int
,	O
FMTDIR_ERROR	int
)	O
;	O
freea	function
(	O
element_alloced	pointer
)	O
;	O
return	O
false	int
;	O
}	O
}	O
else	O
{	O
*	O
element	pointer
=	O
'\0'	O
;	O
element	pointer
-=	O
6	int
;	O
*	O
invalid_reason	pointer
=	O
xasprintf	function
(	O
_	O
(	O
"In the directive number %u, \"%s\" is not followed by a comma."	pointer
)	O
,	O
spec	struct
->	O
directives	int
,	O
element	pointer
)	O
;	O
FDI_SET	O
(	O
format	pointer
-	O
1	int
,	O
FMTDIR_ERROR	int
)	O
;	O
freea	function
(	O
element_alloced	pointer
)	O
;	O
return	O
false	int
;	O
}	O
}	O
else	O
{	O
*	O
invalid_reason	pointer
=	O
xasprintf	function
(	O
_	O
(	O
"In the directive number %u, the argument number is not followed by a comma and one of \"%s\", \"%s\", \"%s\", \"%s\"."	pointer
)	O
,	O
spec	struct
->	O
directives	int
,	O
"time"	pointer
,	O
"date"	pointer
,	O
"number"	pointer
,	O
"choice"	pointer
)	O
;	O
FDI_SET	O
(	O
format	pointer
-	O
1	int
,	O
FMTDIR_ERROR	int
)	O
;	O
freea	function
(	O
element_alloced	pointer
)	O
;	O
return	O
false	int
;	O
}	O
freea	function
(	O
element_alloced	pointer
)	O
;	O
if	O
(	O
spec	struct
->	O
allocated	int
==	O
spec	struct
->	O
numbered_arg_count	int
)	O
{	O
spec	struct
->	O
allocated	int
=	O
2	int
*	O
spec	struct
->	O
allocated	int
+	O
1	int
;	O
spec	struct
->	O
numbered	pointer
=	O
(	O
struct	O
numbered_arg	struct
*	O
)	O
xrealloc	function
(	O
spec	struct
->	O
numbered	pointer
,	O
spec	struct
->	O
allocated	int
*	O
sizeof	O
(	O
struct	O
numbered_arg	struct
)	O
)	O
;	O
}	O
spec	struct
->	O
numbered	pointer
[	O
spec	struct
->	O
numbered_arg_count	int
]	O
.	O
number	int
=	O
number	int
;	O
spec	struct
->	O
numbered	pointer
[	O
spec	struct
->	O
numbered_arg_count	int
]	O
.	O
type	enum
=	O
type	enum
;	O
spec	struct
->	O
numbered_arg_count	int
++	O
;	O
FDI_SET	O
(	O
format	pointer
-	O
1	int
,	O
FMTDIR_END	int
)	O
;	O
}	O
else	O
if	O
(	O
!	O
quoting	bool
&&	O
*	O
format	pointer
==	O
'}'	O
)	O
{	O
FDI_SET	O
(	O
format	pointer
,	O
FMTDIR_START	int
)	O
;	O
*	O
invalid_reason	pointer
=	O
xstrdup	function
(	O
_	O
(	O
"The string starts in the middle of a directive: found '}' without matching '{'."	pointer
)	O
)	O
;	O
FDI_SET	O
(	O
format	pointer
,	O
FMTDIR_ERROR	int
)	O
;	O
return	O
false	int
;	O
}	O
else	O
if	O
(	O
*	O
format	pointer
!=	O
'\0'	O
)	O
format	pointer
++	O
;	O
else	O
break	O
;	O
}	O
return	O
true	int
;	O
}	O
static	O
bool	bool
date_format_parse	function
(	O
const	O
char	O
*	O
format	pointer
)	O
{	O
return	O
true	int
;	O
}	O
static	O
bool	bool
number_format_parse	function
(	O
const	O
char	O
*	O
format	pointer
)	O
{	O
bool	bool
quoting	bool
=	O
false	int
;	O
bool	bool
seen_semicolon	bool
=	O
false	int
;	O
HANDLE_QUOTE	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
while	O
(	O
*	O
format	pointer
!=	O
'\0'	O
&&	O
!	O
(	O
!	O
quoting	bool
&&	O
(	O
*	O
format	pointer
==	O
'0'	O
||	O
*	O
format	pointer
==	O
'#'	O
)	O
)	O
)	O
{	O
if	O
(	O
format	pointer
[	O
0	int
]	O
==	O
'\\'	O
)	O
{	O
if	O
(	O
format	pointer
[	O
1	int
]	O
==	O
'u'	O
&&	O
c_isxdigit	function
(	O
format	pointer
[	O
2	int
]	O
)	O
&&	O
c_isxdigit	function
(	O
format	pointer
[	O
3	int
]	O
)	O
&&	O
c_isxdigit	function
(	O
format	pointer
[	O
4	int
]	O
)	O
&&	O
c_isxdigit	function
(	O
format	pointer
[	O
5	int
]	O
)	O
)	O
format	pointer
+=	O
6	int
;	O
else	O
format	pointer
+=	O
2	int
;	O
}	O
else	O
format	pointer
+=	O
1	int
;	O
HANDLE_QUOTE	O
;	O
}	O
if	O
(	O
!	O
(	O
!	O
quoting	bool
&&	O
(	O
*	O
format	pointer
==	O
'0'	O
||	O
*	O
format	pointer
==	O
'#'	O
)	O
)	O
)	O
return	O
false	int
;	O
while	O
(	O
!	O
quoting	bool
&&	O
*	O
format	pointer
==	O
'#'	O
)	O
{	O
format	pointer
++	O
;	O
HANDLE_QUOTE	O
;	O
if	O
(	O
!	O
quoting	bool
&&	O
*	O
format	pointer
==	O
','	O
)	O
{	O
format	pointer
++	O
;	O
HANDLE_QUOTE	O
;	O
}	O
}	O
while	O
(	O
!	O
quoting	bool
&&	O
*	O
format	pointer
==	O
'0'	O
)	O
{	O
format	pointer
++	O
;	O
HANDLE_QUOTE	O
;	O
if	O
(	O
!	O
quoting	bool
&&	O
*	O
format	pointer
==	O
','	O
)	O
{	O
format	pointer
++	O
;	O
HANDLE_QUOTE	O
;	O
}	O
}	O
if	O
(	O
!	O
quoting	bool
&&	O
*	O
format	pointer
==	O
'.'	O
)	O
{	O
format	pointer
++	O
;	O
HANDLE_QUOTE	O
;	O
while	O
(	O
!	O
quoting	bool
&&	O
*	O
format	pointer
==	O
'0'	O
)	O
{	O
format	pointer
++	O
;	O
HANDLE_QUOTE	O
;	O
}	O
while	O
(	O
!	O
quoting	bool
&&	O
*	O
format	pointer
==	O
'#'	O
)	O
{	O
format	pointer
++	O
;	O
HANDLE_QUOTE	O
;	O
}	O
}	O
if	O
(	O
!	O
quoting	bool
&&	O
*	O
format	pointer
==	O
'E'	O
)	O
{	O
const	O
char	O
*	O
format_save	pointer
=	O
format	pointer
;	O
format	pointer
++	O
;	O
HANDLE_QUOTE	O
;	O
if	O
(	O
!	O
quoting	bool
&&	O
*	O
format	pointer
==	O
'0'	O
)	O
{	O
do	O
{	O
format	pointer
++	O
;	O
HANDLE_QUOTE	O
;	O
}	O
while	O
(	O
!	O
quoting	bool
&&	O
*	O
format	pointer
==	O
'0'	O
)	O
;	O
}	O
else	O
{	O
format	pointer
=	O
format_save	pointer
;	O
quoting	bool
=	O
false	int
;	O
}	O
}	O
while	O
(	O
*	O
format	pointer
!=	O
'\0'	O
&&	O
(	O
seen_semicolon	bool
||	O
!	O
(	O
!	O
quoting	bool
&&	O
*	O
format	pointer
==	O
';'	O
)	O
)	O
)	O
{	O
if	O
(	O
format	pointer
[	O
0	int
]	O
==	O
'\\'	O
)	O
{	O
if	O
(	O
format	pointer
[	O
1	int
]	O
==	O
'u'	O
&&	O
c_isxdigit	function
(	O
format	pointer
[	O
2	int
]	O
)	O
&&	O
c_isxdigit	function
(	O
format	pointer
[	O
3	int
]	O
)	O
&&	O
c_isxdigit	function
(	O
format	pointer
[	O
4	int
]	O
)	O
&&	O
c_isxdigit	function
(	O
format	pointer
[	O
5	int
]	O
)	O
)	O
format	pointer
+=	O
6	int
;	O
else	O
format	pointer
+=	O
2	int
;	O
}	O
else	O
format	pointer
+=	O
1	int
;	O
HANDLE_QUOTE	O
;	O
}	O
if	O
(	O
seen_semicolon	bool
||	O
!	O
(	O
!	O
quoting	bool
&&	O
*	O
format	pointer
==	O
';'	O
)	O
)	O
break	O
;	O
}	O
return	O
(	O
*	O
format	pointer
==	O
'\0'	O
)	O
;	O
}	O
static	O
bool	bool
choice_format_parse	function
(	O
const	O
char	O
*	O
format	pointer
,	O
struct	O
spec	struct
*	O
spec	struct
,	O
char	O
*	O
*	O
invalid_reason	pointer
)	O
{	O
bool	bool
quoting	bool
=	O
false	int
;	O
HANDLE_QUOTE	O
;	O
if	O
(	O
*	O
format	pointer
==	O
'\0'	O
)	O
return	O
true	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
bool	bool
number_nonempty	bool
;	O
char	O
*	O
msgformat	pointer
;	O
char	O
*	O
mp	pointer
;	O
bool	bool
msgformat_valid	bool
;	O
number_nonempty	bool
=	O
false	int
;	O
while	O
(	O
*	O
format	pointer
!=	O
'\0'	O
&&	O
!	O
(	O
!	O
quoting	bool
&&	O
(	O
*	O
format	pointer
==	O
'<'	O
||	O
*	O
format	pointer
==	O
'#'	O
||	O
strncmp	function
(	O
format	pointer
,	O
"\\u2264"	pointer
,	O
6	int
)	O
==	O
0	int
||	O
*	O
format	pointer
==	O
'|'	O
)	O
)	O
)	O
{	O
if	O
(	O
format	pointer
[	O
0	int
]	O
==	O
'\\'	O
)	O
{	O
if	O
(	O
format	pointer
[	O
1	int
]	O
==	O
'u'	O
&&	O
c_isxdigit	function
(	O
format	pointer
[	O
2	int
]	O
)	O
&&	O
c_isxdigit	function
(	O
format	pointer
[	O
3	int
]	O
)	O
&&	O
c_isxdigit	function
(	O
format	pointer
[	O
4	int
]	O
)	O
&&	O
c_isxdigit	function
(	O
format	pointer
[	O
5	int
]	O
)	O
)	O
format	pointer
+=	O
6	int
;	O
else	O
format	pointer
+=	O
2	int
;	O
}	O
else	O
format	pointer
+=	O
1	int
;	O
number_nonempty	bool
=	O
true	int
;	O
HANDLE_QUOTE	O
;	O
}	O
if	O
(	O
*	O
format	pointer
==	O
'\0'	O
)	O
break	O
;	O
if	O
(	O
!	O
number_nonempty	bool
)	O
{	O
*	O
invalid_reason	pointer
=	O
xasprintf	function
(	O
_	O
(	O
"In the directive number %u, a choice contains no number."	pointer
)	O
,	O
spec	struct
->	O
directives	int
)	O
;	O
return	O
false	int
;	O
}	O
if	O
(	O
*	O
format	pointer
==	O
'<'	O
||	O
*	O
format	pointer
==	O
'#'	O
)	O
format	pointer
+=	O
1	int
;	O
else	O
if	O
(	O
strncmp	function
(	O
format	pointer
,	O
"\\u2264"	pointer
,	O
6	int
)	O
==	O
0	int
)	O
format	pointer
+=	O
6	int
;	O
else	O
{	O
*	O
invalid_reason	pointer
=	O
xasprintf	function
(	O
_	O
(	O
"In the directive number %u, a choice contains a number that is not followed by '<', '#' or '%s'."	pointer
)	O
,	O
spec	struct
->	O
directives	int
,	O
"\\u2264"	pointer
)	O
;	O
return	O
false	int
;	O
}	O
HANDLE_QUOTE	O
;	O
msgformat	pointer
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
strlen	function
(	O
format	pointer
)	O
+	O
1	int
)	O
;	O
mp	pointer
=	O
msgformat	pointer
;	O
while	O
(	O
*	O
format	pointer
!=	O
'\0'	O
&&	O
!	O
(	O
!	O
quoting	bool
&&	O
*	O
format	pointer
==	O
'|'	O
)	O
)	O
{	O
*	O
mp	pointer
++	O
=	O
*	O
format	pointer
++	O
;	O
HANDLE_QUOTE	O
;	O
}	O
*	O
mp	pointer
=	O
'\0'	O
;	O
msgformat_valid	bool
=	O
message_format_parse	function
(	O
msgformat	pointer
,	O
NULL	O
,	O
spec	struct
,	O
invalid_reason	pointer
)	O
;	O
freea	function
(	O
msgformat	pointer
)	O
;	O
if	O
(	O
!	O
msgformat_valid	bool
)	O
return	O
false	int
;	O
if	O
(	O
*	O
format	pointer
==	O
'\0'	O
)	O
break	O
;	O
format	pointer
++	O
;	O
HANDLE_QUOTE	O
;	O
}	O
return	O
true	int
;	O
}	O
static	O
int	O
numbered_arg_compare	function
(	O
const	O
void	O
*	O
p1	pointer
,	O
const	O
void	O
*	O
p2	pointer
)	O
{	O
unsigned	O
int	O
n1	int
=	O
(	O
(	O
const	O
struct	O
numbered_arg	struct
*	O
)	O
p1	pointer
)	O
->	O
number	int
;	O
unsigned	O
int	O
n2	int
=	O
(	O
(	O
const	O
struct	O
numbered_arg	struct
*	O
)	O
p2	pointer
)	O
->	O
number	int
;	O
return	O
(	O
n1	int
>	O
n2	int
?	O
1	int
:	O
n1	int
<	O
n2	int
?	O
-	O
1	int
:	O
0	int
)	O
;	O
}	O
static	O
void	O
*	O
format_parse	function
(	O
const	O
char	O
*	O
format	pointer
,	O
bool	bool
translated	bool
,	O
char	O
*	O
fdi	pointer
,	O
char	O
*	O
*	O
invalid_reason	pointer
)	O
{	O
struct	O
spec	struct
spec	struct
;	O
struct	O
spec	struct
*	O
result	pointer
;	O
spec	struct
.	O
directives	int
=	O
0	int
;	O
spec	struct
.	O
numbered_arg_count	int
=	O
0	int
;	O
spec	struct
.	O
allocated	int
=	O
0	int
;	O
spec	struct
.	O
numbered	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
message_format_parse	function
(	O
format	pointer
,	O
fdi	pointer
,	O
&	O
spec	struct
,	O
invalid_reason	pointer
)	O
)	O
goto	O
bad_format	O
;	O
if	O
(	O
spec	struct
.	O
numbered_arg_count	int
>	O
1	int
)	O
{	O
unsigned	O
int	O
i	long
,	O
j	long
;	O
bool	bool
err	bool
;	O
qsort	function
(	O
spec	struct
.	O
numbered	pointer
,	O
spec	struct
.	O
numbered_arg_count	int
,	O
sizeof	O
(	O
struct	O
numbered_arg	struct
)	O
,	O
numbered_arg_compare	function
)	O
;	O
err	bool
=	O
false	int
;	O
for	O
(	O
i	long
=	O
j	long
=	O
0	int
;	O
i	long
<	O
spec	struct
.	O
numbered_arg_count	int
;	O
i	long
++	O
)	O
if	O
(	O
j	long
>	O
0	int
&&	O
spec	struct
.	O
numbered	pointer
[	O
i	long
]	O
.	O
number	int
==	O
spec	struct
.	O
numbered	pointer
[	O
j	long
-	O
1	int
]	O
.	O
number	int
)	O
{	O
enum	O
format_arg_type	enum
type1	enum
=	O
spec	struct
.	O
numbered	pointer
[	O
i	long
]	O
.	O
type	enum
;	O
enum	O
format_arg_type	enum
type2	enum
=	O
spec	struct
.	O
numbered	pointer
[	O
j	long
-	O
1	int
]	O
.	O
type	enum
;	O
enum	O
format_arg_type	enum
type_both	enum
;	O
if	O
(	O
type1	enum
==	O
type2	enum
||	O
type2	enum
==	O
FAT_OBJECT	int
)	O
type_both	enum
=	O
type1	enum
;	O
else	O
if	O
(	O
type1	enum
==	O
FAT_OBJECT	int
)	O
type_both	enum
=	O
type2	enum
;	O
else	O
{	O
type_both	enum
=	O
FAT_NONE	int
;	O
if	O
(	O
!	O
err	bool
)	O
*	O
invalid_reason	pointer
=	O
INVALID_INCOMPATIBLE_ARG_TYPES	O
(	O
spec	struct
.	O
numbered	pointer
[	O
i	long
]	O
.	O
number	int
)	O
;	O
err	bool
=	O
true	int
;	O
}	O
spec	struct
.	O
numbered	pointer
[	O
j	long
-	O
1	int
]	O
.	O
type	enum
=	O
type_both	enum
;	O
}	O
else	O
{	O
if	O
(	O
j	long
<	O
i	long
)	O
{	O
spec	struct
.	O
numbered	pointer
[	O
j	long
]	O
.	O
number	int
=	O
spec	struct
.	O
numbered	pointer
[	O
i	long
]	O
.	O
number	int
;	O
spec	struct
.	O
numbered	pointer
[	O
j	long
]	O
.	O
type	enum
=	O
spec	struct
.	O
numbered	pointer
[	O
i	long
]	O
.	O
type	enum
;	O
}	O
j	long
++	O
;	O
}	O
spec	struct
.	O
numbered_arg_count	int
=	O
j	long
;	O
if	O
(	O
err	bool
)	O
goto	O
bad_format	O
;	O
}	O
result	pointer
=	O
XMALLOC	O
(	O
struct	O
spec	struct
)	O
;	O
*	O
result	pointer
=	O
spec	struct
;	O
return	O
result	pointer
;	O
bad_format	O
:	O
if	O
(	O
spec	struct
.	O
numbered	pointer
!=	O
NULL	O
)	O
free	function
(	O
spec	struct
.	O
numbered	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
static	O
void	O
format_free	function
(	O
void	O
*	O
descr	pointer
)	O
{	O
struct	O
spec	struct
*	O
spec	struct
=	O
(	O
struct	O
spec	struct
*	O
)	O
descr	pointer
;	O
if	O
(	O
spec	struct
->	O
numbered	pointer
!=	O
NULL	O
)	O
free	function
(	O
spec	struct
->	O
numbered	pointer
)	O
;	O
free	function
(	O
spec	struct
)	O
;	O
}	O
static	O
int	O
format_get_number_of_directives	function
(	O
void	O
*	O
descr	pointer
)	O
{	O
struct	O
spec	struct
*	O
spec	struct
=	O
(	O
struct	O
spec	struct
*	O
)	O
descr	pointer
;	O
return	O
spec	struct
->	O
directives	int
;	O
}	O
static	O
bool	bool
format_check	function
(	O
void	O
*	O
msgid_descr	pointer
,	O
void	O
*	O
msgstr_descr	pointer
,	O
bool	bool
equality	bool
,	O
formatstring_error_logger_t	pointer
error_logger	pointer
,	O
const	O
char	O
*	O
pretty_msgid	pointer
,	O
const	O
char	O
*	O
pretty_msgstr	pointer
)	O
{	O
struct	O
spec	struct
*	O
spec1	pointer
=	O
(	O
struct	O
spec	struct
*	O
)	O
msgid_descr	pointer
;	O
struct	O
spec	struct
*	O
spec2	pointer
=	O
(	O
struct	O
spec	struct
*	O
)	O
msgstr_descr	pointer
;	O
bool	bool
err	bool
=	O
false	int
;	O
if	O
(	O
spec1	pointer
->	O
numbered_arg_count	int
+	O
spec2	pointer
->	O
numbered_arg_count	int
>	O
0	int
)	O
{	O
unsigned	O
int	O
i	long
,	O
j	long
;	O
unsigned	O
int	O
n1	int
=	O
spec1	pointer
->	O
numbered_arg_count	int
;	O
unsigned	O
int	O
n2	int
=	O
spec2	pointer
->	O
numbered_arg_count	int
;	O
for	O
(	O
i	long
=	O
0	int
,	O
j	long
=	O
0	int
;	O
i	long
<	O
n1	int
||	O
j	long
<	O
n2	int
;	O
)	O
{	O
int	O
cmp	int
=	O
(	O
i	long
>=	O
n1	int
?	O
1	int
:	O
j	long
>=	O
n2	int
?	O
-	O
1	int
:	O
spec1	pointer
->	O
numbered	pointer
[	O
i	long
]	O
.	O
number	int
>	O
spec2	pointer
->	O
numbered	pointer
[	O
j	long
]	O
.	O
number	int
?	O
1	int
:	O
spec1	pointer
->	O
numbered	pointer
[	O
i	long
]	O
.	O
number	int
<	O
spec2	pointer
->	O
numbered	pointer
[	O
j	long
]	O
.	O
number	int
?	O
-	O
1	int
:	O
0	int
)	O
;	O
if	O
(	O
cmp	int
>	O
0	int
)	O
{	O
if	O
(	O
error_logger	pointer
)	O
error_logger	pointer
(	O
_	O
(	O
"a format specification for argument {%u}, as in '%s', doesn't exist in '%s'"	pointer
)	O
,	O
spec2	pointer
->	O
numbered	pointer
[	O
j	long
]	O
.	O
number	int
,	O
pretty_msgstr	pointer
,	O
pretty_msgid	pointer
)	O
;	O
err	bool
=	O
true	int
;	O
break	O
;	O
}	O
else	O
if	O
(	O
cmp	int
<	O
0	int
)	O
{	O
if	O
(	O
equality	bool
)	O
{	O
if	O
(	O
error_logger	pointer
)	O
error_logger	pointer
(	O
_	O
(	O
"a format specification for argument {%u} doesn't exist in '%s'"	pointer
)	O
,	O
spec1	pointer
->	O
numbered	pointer
[	O
i	long
]	O
.	O
number	int
,	O
pretty_msgstr	pointer
)	O
;	O
err	bool
=	O
true	int
;	O
break	O
;	O
}	O
else	O
i	long
++	O
;	O
}	O
else	O
j	long
++	O
,	O
i	long
++	O
;	O
}	O
if	O
(	O
!	O
err	bool
)	O
for	O
(	O
i	long
=	O
0	int
,	O
j	long
=	O
0	int
;	O
j	long
<	O
n2	int
;	O
)	O
{	O
if	O
(	O
spec1	pointer
->	O
numbered	pointer
[	O
i	long
]	O
.	O
number	int
==	O
spec2	pointer
->	O
numbered	pointer
[	O
j	long
]	O
.	O
number	int
)	O
{	O
if	O
(	O
spec1	pointer
->	O
numbered	pointer
[	O
i	long
]	O
.	O
type	enum
!=	O
spec2	pointer
->	O
numbered	pointer
[	O
j	long
]	O
.	O
type	enum
)	O
{	O
if	O
(	O
error_logger	pointer
)	O
error_logger	pointer
(	O
_	O
(	O
"format specifications in '%s' and '%s' for argument {%u} are not the same"	pointer
)	O
,	O
pretty_msgid	pointer
,	O
pretty_msgstr	pointer
,	O
spec2	pointer
->	O
numbered	pointer
[	O
j	long
]	O
.	O
number	int
)	O
;	O
err	bool
=	O
true	int
;	O
break	O
;	O
}	O
j	long
++	O
,	O
i	long
++	O
;	O
}	O
else	O
i	long
++	O
;	O
}	O
}	O
return	O
err	bool
;	O
}	O
struct	O
formatstring_parser	struct
formatstring_java	struct
=	O
{	O
format_parse	function
,	O
format_free	function
,	O
format_get_number_of_directives	function
,	O
NULL	O
,	O
format_check	function
}	O
;	O
