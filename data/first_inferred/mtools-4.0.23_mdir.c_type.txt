static	O
int	O
recursive	int
;	O
static	O
int	O
wide	int
;	O
static	O
int	O
all	int
;	O
static	O
int	O
concise	int
;	O
static	O
int	O
fast	int
=	O
0	int
;	O
static	O
const	O
char	O
*	O
dirPath	pointer
;	O
static	O
char	O
*	O
dynDirPath	pointer
;	O
static	O
char	O
currentDrive	char
;	O
static	O
Stream_t	struct
*	O
currentDir	pointer
;	O
static	O
int	O
filesInDir	int
;	O
static	O
int	O
filesOnDrive	int
;	O
static	O
int	O
dirsOnDrive	int
;	O
static	O
int	O
debug	int
=	O
0	int
;	O
static	O
mt_size_t	long
bytesInDir	long
;	O
static	O
mt_size_t	long
bytesOnDrive	long
;	O
static	O
Stream_t	struct
*	O
RootDir	pointer
;	O
static	O
char	O
mdir_shortname	array
[	O
4	int
*	O
12	int
+	O
1	int
]	O
;	O
static	O
char	O
mdir_longname	array
[	O
4	int
*	O
MAX_VNAMELEN	O
+	O
1	int
]	O
;	O
static	O
__inline__	O
void	O
print_date	function
(	O
struct	O
directory	struct
*	O
dir	pointer
)	O
{	O
char	O
year	array
[	O
5	int
]	O
;	O
char	O
day	array
[	O
3	int
]	O
;	O
char	O
month	array
[	O
3	int
]	O
;	O
const	O
char	O
*	O
p	pointer
;	O
sprintf	function
(	O
year	array
,	O
"%04d"	pointer
,	O
DOS_YEAR	O
(	O
dir	pointer
)	O
)	O
;	O
sprintf	function
(	O
day	array
,	O
"%02d"	pointer
,	O
DOS_DAY	O
(	O
dir	pointer
)	O
)	O
;	O
sprintf	function
(	O
month	array
,	O
"%02d"	pointer
,	O
DOS_MONTH	O
(	O
dir	pointer
)	O
)	O
;	O
for	O
(	O
p	pointer
=	O
mtools_date_string	pointer
;	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
!	O
strncasecmp	function
(	O
p	pointer
,	O
"yyyy"	pointer
,	O
4	int
)	O
)	O
{	O
printf	function
(	O
"%04d"	pointer
,	O
DOS_YEAR	O
(	O
dir	pointer
)	O
)	O
;	O
p	pointer
+=	O
3	int
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
!	O
strncasecmp	function
(	O
p	pointer
,	O
"yy"	pointer
,	O
2	int
)	O
)	O
{	O
printf	function
(	O
"%02d"	pointer
,	O
DOS_YEAR	O
(	O
dir	pointer
)	O
%	O
100	int
)	O
;	O
p	pointer
++	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
!	O
strncasecmp	function
(	O
p	pointer
,	O
"dd"	pointer
,	O
2	int
)	O
)	O
{	O
printf	function
(	O
"%02d"	pointer
,	O
DOS_DAY	O
(	O
dir	pointer
)	O
)	O
;	O
p	pointer
++	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
!	O
strncasecmp	function
(	O
p	pointer
,	O
"mm"	pointer
,	O
2	int
)	O
)	O
{	O
printf	function
(	O
"%02d"	pointer
,	O
DOS_MONTH	O
(	O
dir	pointer
)	O
)	O
;	O
p	pointer
++	O
;	O
continue	O
;	O
}	O
putchar	function
(	O
*	O
p	pointer
)	O
;	O
}	O
}	O
static	O
__inline__	O
void	O
print_time	function
(	O
struct	O
directory	struct
*	O
dir	pointer
)	O
{	O
char	O
am_pm	char
;	O
int	O
hour	int
=	O
DOS_HOUR	O
(	O
dir	pointer
)	O
;	O
if	O
(	O
!	O
mtools_twenty_four_hour_clock	int
)	O
{	O
am_pm	char
=	O
(	O
hour	int
>=	O
12	int
)	O
?	O
'p'	O
:	O
'a'	O
;	O
if	O
(	O
hour	int
>	O
12	int
)	O
hour	int
=	O
hour	int
-	O
12	int
;	O
if	O
(	O
hour	int
==	O
0	int
)	O
hour	int
=	O
12	int
;	O
}	O
else	O
am_pm	char
=	O
' '	O
;	O
printf	function
(	O
"%2d:%02d%c"	pointer
,	O
hour	int
,	O
DOS_MINUTE	O
(	O
dir	pointer
)	O
,	O
am_pm	char
)	O
;	O
}	O
static	O
const	O
char	O
*	O
dotted_num	function
(	O
mt_size_t	long
num	int
,	O
int	O
width	int
,	O
char	O
*	O
*	O
buf	pointer
)	O
{	O
size_t	long
len	long
;	O
register	O
char	O
*	O
srcp	pointer
,	O
*	O
dstp	pointer
;	O
int	O
size	array
;	O
unsigned	O
long	O
numlo	long
;	O
unsigned	O
long	O
numhi	long
;	O
size	array
=	O
width	int
+	O
width	int
;	O
*	O
buf	pointer
=	O
malloc	function
(	O
size	array
+	O
1	int
)	O
;	O
if	O
(	O
*	O
buf	pointer
==	O
NULL	O
)	O
return	O
""	pointer
;	O
numlo	long
=	O
num	int
%	O
1000000000	int
;	O
numhi	long
=	O
num	int
/	O
1000000000	int
;	O
if	O
(	O
numhi	long
&&	O
size	array
>	O
9	int
)	O
{	O
sprintf	function
(	O
*	O
buf	pointer
,	O
"%.*lu%09lu"	pointer
,	O
size	array
-	O
9	int
,	O
numhi	long
,	O
numlo	long
)	O
;	O
}	O
else	O
{	O
sprintf	function
(	O
*	O
buf	pointer
,	O
"%.*lu"	pointer
,	O
size	array
,	O
numlo	long
)	O
;	O
}	O
for	O
(	O
srcp	pointer
=	O
*	O
buf	pointer
;	O
srcp	pointer
[	O
1	int
]	O
!=	O
'\0'	O
;	O
++	O
srcp	pointer
)	O
if	O
(	O
srcp	pointer
[	O
0	int
]	O
==	O
'0'	O
)	O
srcp	pointer
[	O
0	int
]	O
=	O
' '	O
;	O
else	O
break	O
;	O
len	long
=	O
strlen	function
(	O
*	O
buf	pointer
)	O
;	O
srcp	pointer
=	O
(	O
*	O
buf	pointer
)	O
+	O
len	long
;	O
dstp	pointer
=	O
(	O
*	O
buf	pointer
)	O
+	O
len	long
+	O
1	int
;	O
for	O
(	O
;	O
dstp	pointer
>=	O
(	O
*	O
buf	pointer
)	O
+	O
4	int
&&	O
isdigit	function
(	O
srcp	pointer
[	O
-	O
1	int
]	O
)	O
;	O
)	O
{	O
srcp	pointer
-=	O
3	int
;	O
dstp	pointer
-=	O
4	int
;	O
}	O
while	O
(	O
dstp	pointer
<	O
(	O
*	O
buf	pointer
)	O
+	O
len	long
)	O
{	O
dstp	pointer
[	O
0	int
]	O
=	O
srcp	pointer
[	O
0	int
]	O
;	O
dstp	pointer
[	O
1	int
]	O
=	O
srcp	pointer
[	O
1	int
]	O
;	O
dstp	pointer
[	O
2	int
]	O
=	O
srcp	pointer
[	O
2	int
]	O
;	O
if	O
(	O
dstp	pointer
+	O
3	int
<	O
(	O
*	O
buf	pointer
)	O
+	O
len	long
)	O
dstp	pointer
[	O
3	int
]	O
=	O
' '	O
;	O
srcp	pointer
+=	O
3	int
;	O
dstp	pointer
+=	O
4	int
;	O
}	O
return	O
(	O
*	O
buf	pointer
)	O
+	O
len	long
-	O
width	int
;	O
}	O
static	O
__inline__	O
int	O
print_volume_label	function
(	O
Stream_t	struct
*	O
Dir	pointer
,	O
char	O
drive	char
)	O
{	O
Stream_t	struct
*	O
Stream	pointer
=	O
GetFs	function
(	O
Dir	pointer
)	O
;	O
direntry_t	struct
entry	int
;	O
DeclareThis	O
(	O
FsPublic_t	struct
)	O
;	O
char	O
shortname	pointer
[	O
13	int
]	O
;	O
char	O
longname	pointer
[	O
VBUFSIZE	O
]	O
;	O
int	O
r	int
;	O
RootDir	pointer
=	O
OpenRoot	function
(	O
Stream	pointer
)	O
;	O
if	O
(	O
concise	int
)	O
return	O
0	int
;	O
initializeDirentry	function
(	O
&	O
entry	int
,	O
RootDir	pointer
)	O
;	O
if	O
(	O
(	O
r	int
=	O
vfat_lookup	function
(	O
&	O
entry	int
,	O
0	int
,	O
0	int
,	O
ACCEPT_LABEL	int
|	O
MATCH_ANY	int
,	O
shortname	pointer
,	O
sizeof	O
(	O
shortname	pointer
)	O
,	O
longname	pointer
,	O
sizeof	O
(	O
longname	pointer
)	O
)	O
)	O
)	O
{	O
if	O
(	O
r	int
==	O
-	O
2	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
printf	function
(	O
" Volume in drive %c has no label"	pointer
,	O
drive	char
)	O
;	O
}	O
else	O
if	O
(	O
*	O
longname	pointer
)	O
printf	function
(	O
" Volume in drive %c is %s (abbr=%s)"	pointer
,	O
drive	char
,	O
longname	pointer
,	O
shortname	pointer
)	O
;	O
else	O
printf	function
(	O
" Volume in drive %c is %s"	pointer
,	O
drive	char
,	O
shortname	pointer
)	O
;	O
if	O
(	O
This	pointer
->	O
serialized	int
)	O
printf	function
(	O
"\n Volume Serial Number is %04lX-%04lX"	pointer
,	O
(	O
This	pointer
->	O
serial_number	long
>>	O
16	int
)	O
&	O
0xffff	int
,	O
This	pointer
->	O
serial_number	long
&	O
0xffff	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
printSummary	function
(	O
int	O
files	int
,	O
mt_size_t	long
bytes	array
)	O
{	O
if	O
(	O
!	O
filesInDir	int
)	O
printf	function
(	O
"No files\n"	pointer
)	O
;	O
else	O
{	O
char	O
*	O
s1	pointer
=	O
NULL	O
;	O
printf	function
(	O
"      %3d file"	pointer
,	O
files	int
)	O
;	O
if	O
(	O
files	int
==	O
1	int
)	O
putchar	function
(	O
' '	O
)	O
;	O
else	O
putchar	function
(	O
's'	O
)	O
;	O
printf	function
(	O
"       %s bytes\n"	pointer
,	O
dotted_num	function
(	O
bytes	array
,	O
13	int
,	O
&	O
s1	pointer
)	O
)	O
;	O
if	O
(	O
s1	pointer
)	O
free	function
(	O
s1	pointer
)	O
;	O
}	O
}	O
static	O
void	O
leaveDirectory	function
(	O
int	O
haveError	int
)	O
;	O
static	O
void	O
leaveDrive	function
(	O
int	O
haveError	int
)	O
{	O
if	O
(	O
!	O
currentDrive	char
)	O
return	O
;	O
leaveDirectory	function
(	O
haveError	int
)	O
;	O
if	O
(	O
!	O
concise	int
&&	O
!	O
haveError	int
)	O
{	O
if	O
(	O
dirsOnDrive	int
>	O
1	int
)	O
{	O
printf	function
(	O
"\nTotal files listed:\n"	pointer
)	O
;	O
printSummary	function
(	O
filesOnDrive	int
,	O
bytesOnDrive	long
)	O
;	O
}	O
if	O
(	O
RootDir	pointer
&&	O
!	O
fast	int
)	O
{	O
char	O
*	O
s1	pointer
=	O
NULL	O
;	O
mt_off_t	long
bytes	array
=	O
getfree	function
(	O
RootDir	pointer
)	O
;	O
if	O
(	O
bytes	array
==	O
-	O
1	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Fat error\n"	pointer
)	O
;	O
goto	O
exit_1	O
;	O
}	O
printf	function
(	O
"                  %s bytes free\n\n"	pointer
,	O
dotted_num	function
(	O
bytes	array
,	O
17	int
,	O
&	O
s1	pointer
)	O
)	O
;	O
if	O
(	O
s1	pointer
)	O
free	function
(	O
s1	pointer
)	O
;	O
}	O
}	O
exit_1	O
:	O
FREE	O
(	O
&	O
RootDir	pointer
)	O
;	O
currentDrive	char
=	O
'\0'	O
;	O
}	O
static	O
int	O
enterDrive	function
(	O
Stream_t	struct
*	O
Dir	pointer
,	O
char	O
drive	char
)	O
{	O
int	O
r	int
;	O
if	O
(	O
currentDrive	char
==	O
drive	char
)	O
return	O
0	int
;	O
leaveDrive	function
(	O
0	int
)	O
;	O
currentDrive	char
=	O
drive	char
;	O
r	int
=	O
print_volume_label	function
(	O
Dir	pointer
,	O
drive	char
)	O
;	O
if	O
(	O
r	int
)	O
return	O
r	int
;	O
bytesOnDrive	long
=	O
0	int
;	O
filesOnDrive	int
=	O
0	int
;	O
dirsOnDrive	int
=	O
0	int
;	O
return	O
0	int
;	O
}	O
static	O
const	O
char	O
*	O
emptyString	pointer
=	O
"<out-of-memory>"	pointer
;	O
static	O
void	O
leaveDirectory	function
(	O
int	O
haveError	int
)	O
{	O
if	O
(	O
!	O
currentDir	pointer
)	O
return	O
;	O
if	O
(	O
!	O
haveError	int
)	O
{	O
if	O
(	O
dirPath	pointer
&&	O
dirPath	pointer
!=	O
emptyString	pointer
)	O
free	function
(	O
dynDirPath	pointer
)	O
;	O
if	O
(	O
wide	int
)	O
putchar	function
(	O
'\n'	O
)	O
;	O
if	O
(	O
!	O
concise	int
)	O
printSummary	function
(	O
filesInDir	int
,	O
bytesInDir	long
)	O
;	O
}	O
FREE	O
(	O
&	O
currentDir	pointer
)	O
;	O
}	O
static	O
int	O
enterDirectory	function
(	O
Stream_t	struct
*	O
Dir	pointer
)	O
{	O
int	O
r	int
;	O
char	O
drive	char
;	O
if	O
(	O
currentDir	pointer
==	O
Dir	pointer
)	O
return	O
0	int
;	O
leaveDirectory	function
(	O
0	int
)	O
;	O
drive	char
=	O
getDrive	function
(	O
Dir	pointer
)	O
;	O
r	int
=	O
enterDrive	function
(	O
Dir	pointer
,	O
drive	char
)	O
;	O
if	O
(	O
r	int
)	O
return	O
r	int
;	O
currentDir	pointer
=	O
COPY	O
(	O
Dir	pointer
)	O
;	O
dynDirPath	pointer
=	O
getPwd	function
(	O
getDirentry	function
(	O
Dir	pointer
)	O
)	O
;	O
if	O
(	O
!	O
dynDirPath	pointer
)	O
dirPath	pointer
=	O
emptyString	pointer
;	O
else	O
{	O
if	O
(	O
!	O
dynDirPath	pointer
[	O
3	int
]	O
&&	O
concise	int
)	O
dynDirPath	pointer
[	O
2	int
]	O
=	O
'\0'	O
;	O
dirPath	pointer
=	O
dynDirPath	pointer
;	O
}	O
if	O
(	O
!	O
concise	int
)	O
printf	function
(	O
"\nDirectory for %s\n"	pointer
,	O
dirPath	pointer
)	O
;	O
if	O
(	O
!	O
wide	int
&&	O
!	O
concise	int
)	O
printf	function
(	O
"\n"	pointer
)	O
;	O
dirsOnDrive	int
++	O
;	O
bytesInDir	long
=	O
0	int
;	O
filesInDir	int
=	O
0	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
list_file	function
(	O
direntry_t	struct
*	O
entry	int
,	O
MainParam_t	struct
*	O
mp	pointer
UNUSEDP	O
)	O
{	O
unsigned	O
long	O
size	array
;	O
int	O
i	int
;	O
int	O
Case	char
;	O
int	O
r	int
;	O
wchar_t	int
ext	array
[	O
4	int
]	O
;	O
wchar_t	int
name	pointer
[	O
9	int
]	O
;	O
doscp_t	struct
*	O
cp	pointer
;	O
if	O
(	O
!	O
all	int
&&	O
(	O
entry	int
->	O
dir	pointer
.	O
attr	char
&	O
0x6	int
)	O
)	O
return	O
0	int
;	O
if	O
(	O
concise	int
&&	O
isSpecialW	function
(	O
entry	int
->	O
name	pointer
)	O
)	O
return	O
0	int
;	O
r	int
=	O
enterDirectory	function
(	O
entry	int
->	O
Dir	pointer
)	O
;	O
if	O
(	O
r	int
)	O
return	O
ERROR_ONE	int
;	O
if	O
(	O
wide	int
)	O
{	O
if	O
(	O
filesInDir	int
%	O
5	int
)	O
putchar	function
(	O
' '	O
)	O
;	O
else	O
putchar	function
(	O
'\n'	O
)	O
;	O
}	O
if	O
(	O
IS_DIR	O
(	O
entry	int
)	O
)	O
{	O
size	array
=	O
0	int
;	O
}	O
else	O
size	array
=	O
FILE_SIZE	O
(	O
&	O
entry	int
->	O
dir	pointer
)	O
;	O
Case	char
=	O
entry	int
->	O
dir	pointer
.	O
Case	char
;	O
if	O
(	O
!	O
(	O
Case	char
&	O
(	O
BASECASE	int
|	O
EXTCASE	int
)	O
)	O
&&	O
mtools_ignore_short_case	int
)	O
Case	char
|=	O
BASECASE	int
|	O
EXTCASE	int
;	O
cp	pointer
=	O
GET_DOSCONVERT	O
(	O
entry	int
->	O
Dir	pointer
)	O
;	O
dos_to_wchar	function
(	O
cp	pointer
,	O
entry	int
->	O
dir	pointer
.	O
ext	array
,	O
ext	array
,	O
3	int
)	O
;	O
if	O
(	O
Case	char
&	O
EXTCASE	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
3	int
;	O
i	int
++	O
)	O
ext	array
[	O
i	int
]	O
=	O
ch_towlower	function
(	O
ext	array
[	O
i	int
]	O
)	O
;	O
}	O
ext	array
[	O
3	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
entry	int
->	O
dir	pointer
.	O
name	pointer
[	O
0	int
]	O
==	O
'\x05'	O
)	O
{	O
dos_to_wchar	function
(	O
cp	pointer
,	O
"\xE5"	pointer
,	O
name	pointer
,	O
1	int
)	O
;	O
dos_to_wchar	function
(	O
cp	pointer
,	O
entry	int
->	O
dir	pointer
.	O
name	pointer
+	O
1	int
,	O
name	pointer
+	O
1	int
,	O
7	int
)	O
;	O
}	O
else	O
{	O
dos_to_wchar	function
(	O
cp	pointer
,	O
entry	int
->	O
dir	pointer
.	O
name	pointer
,	O
name	pointer
,	O
8	int
)	O
;	O
}	O
if	O
(	O
Case	char
&	O
BASECASE	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
8	int
;	O
i	int
++	O
)	O
name	pointer
[	O
i	int
]	O
=	O
ch_towlower	function
(	O
name	pointer
[	O
i	int
]	O
)	O
;	O
}	O
name	pointer
[	O
8	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
wide	int
)	O
{	O
if	O
(	O
IS_DIR	O
(	O
entry	int
)	O
)	O
printf	function
(	O
"[%s]%*s"	pointer
,	O
mdir_shortname	array
,	O
(	O
int	O
)	O
(	O
15	int
-	O
2	int
-	O
strlen	function
(	O
mdir_shortname	array
)	O
)	O
,	O
""	pointer
)	O
;	O
else	O
printf	function
(	O
"%-15s"	pointer
,	O
mdir_shortname	array
)	O
;	O
}	O
else	O
if	O
(	O
!	O
concise	int
)	O
{	O
char	O
tmpBasename	array
[	O
4	int
*	O
8	int
+	O
1	int
]	O
;	O
char	O
tmpExt	array
[	O
4	int
*	O
3	int
+	O
1	int
]	O
;	O
WCHAR_TO_NATIVE	O
(	O
name	pointer
,	O
tmpBasename	array
,	O
8	int
)	O
;	O
WCHAR_TO_NATIVE	O
(	O
ext	array
,	O
tmpExt	array
,	O
3	int
)	O
;	O
if	O
(	O
name	pointer
[	O
0	int
]	O
==	O
' '	O
)	O
printf	function
(	O
"             "	pointer
)	O
;	O
else	O
if	O
(	O
mtools_dotted_dir	int
)	O
printf	function
(	O
"%-12s "	pointer
,	O
mdir_shortname	array
)	O
;	O
else	O
printf	function
(	O
"%s %s "	pointer
,	O
tmpBasename	array
,	O
tmpExt	array
)	O
;	O
if	O
(	O
IS_DIR	O
(	O
entry	int
)	O
)	O
printf	function
(	O
"<DIR>    "	pointer
)	O
;	O
else	O
printf	function
(	O
" %8ld"	pointer
,	O
(	O
long	O
)	O
size	array
)	O
;	O
printf	function
(	O
" "	pointer
)	O
;	O
print_date	function
(	O
&	O
entry	int
->	O
dir	pointer
)	O
;	O
printf	function
(	O
"  "	pointer
)	O
;	O
print_time	function
(	O
&	O
entry	int
->	O
dir	pointer
)	O
;	O
if	O
(	O
debug	int
)	O
printf	function
(	O
" %s %d "	pointer
,	O
tmpBasename	array
,	O
START	O
(	O
&	O
entry	int
->	O
dir	pointer
)	O
)	O
;	O
if	O
(	O
*	O
mdir_longname	array
)	O
printf	function
(	O
" %s"	pointer
,	O
mdir_longname	array
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
else	O
{	O
char	O
tmp	array
[	O
4	int
*	O
MAX_VNAMELEN	O
+	O
1	int
]	O
;	O
wchar_to_native	function
(	O
entry	int
->	O
name	pointer
,	O
tmp	array
,	O
MAX_VNAMELEN	O
,	O
sizeof	O
(	O
tmp	array
)	O
)	O
;	O
printf	function
(	O
"%s/%s"	pointer
,	O
dirPath	pointer
,	O
tmp	array
)	O
;	O
if	O
(	O
IS_DIR	O
(	O
entry	int
)	O
)	O
putchar	function
(	O
'/'	O
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
}	O
filesOnDrive	int
++	O
;	O
filesInDir	int
++	O
;	O
bytesOnDrive	long
+=	O
(	O
mt_size_t	long
)	O
size	array
;	O
bytesInDir	long
+=	O
(	O
mt_size_t	long
)	O
size	array
;	O
return	O
GOT_ONE	int
;	O
}	O
static	O
int	O
list_non_recurs_directory	function
(	O
direntry_t	struct
*	O
entry	int
,	O
MainParam_t	struct
*	O
mp	pointer
)	O
{	O
int	O
r	int
;	O
if	O
(	O
mp	pointer
->	O
basenameHasWildcard	int
)	O
{	O
return	O
list_file	function
(	O
entry	int
,	O
mp	pointer
)	O
;	O
}	O
else	O
{	O
MainParam_t	struct
subMp	struct
;	O
r	int
=	O
enterDirectory	function
(	O
mp	pointer
->	O
File	pointer
)	O
;	O
if	O
(	O
r	int
)	O
return	O
ERROR_ONE	int
;	O
subMp	struct
=	O
*	O
mp	pointer
;	O
subMp	struct
.	O
dirCallback	pointer
=	O
subMp	struct
.	O
callback	pointer
;	O
return	O
mp	pointer
->	O
loop	pointer
(	O
mp	pointer
->	O
File	pointer
,	O
&	O
subMp	struct
,	O
"*"	pointer
)	O
|	O
GOT_ONE	int
;	O
}	O
}	O
static	O
int	O
list_recurs_directory	function
(	O
direntry_t	struct
*	O
entry	int
UNUSEDP	O
,	O
MainParam_t	struct
*	O
mp	pointer
UNUSEDP	O
)	O
{	O
MainParam_t	struct
subMp	struct
;	O
int	O
ret	int
;	O
subMp	struct
=	O
*	O
mp	pointer
;	O
subMp	struct
.	O
lookupflags	int
=	O
ACCEPT_DIR	int
|	O
ACCEPT_PLAIN	int
;	O
subMp	struct
.	O
dirCallback	pointer
=	O
list_file	function
;	O
subMp	struct
.	O
callback	pointer
=	O
list_file	function
;	O
ret	int
=	O
mp	pointer
->	O
loop	pointer
(	O
mp	pointer
->	O
File	pointer
,	O
&	O
subMp	struct
,	O
"*"	pointer
)	O
;	O
subMp	struct
=	O
*	O
mp	pointer
;	O
subMp	struct
.	O
lookupflags	int
=	O
ACCEPT_DIR	int
|	O
NO_DOTS	int
|	O
NO_MSG	int
|	O
DO_OPEN	int
;	O
return	O
ret	int
|	O
mp	pointer
->	O
loop	pointer
(	O
mp	pointer
->	O
File	pointer
,	O
&	O
subMp	struct
,	O
"*"	pointer
)	O
;	O
}	O
static	O
void	O
usage	function
(	O
int	O
ret	int
)	O
NORETURN	O
;	O
static	O
void	O
usage	function
(	O
int	O
ret	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Mtools version %s, dated %s\n"	pointer
,	O
mversion	pointer
,	O
mdate	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Usage: %s: [-V] [-w] [-a] [-b] [-s] [-f] msdosdirectory\n"	pointer
,	O
progname	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"       %s: [-V] [-w] [-a] [-b] [-s] [-f] msdosfile [msdosfiles...]\n"	pointer
,	O
progname	pointer
)	O
;	O
exit	function
(	O
ret	int
)	O
;	O
}	O
void	O
mdir	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
type	enum
UNUSEDP	O
)	O
NORETURN	O
;	O
void	O
mdir	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
type	enum
UNUSEDP	O
)	O
{	O
int	O
ret	int
;	O
MainParam_t	struct
mp	pointer
;	O
int	O
c	char
;	O
const	O
char	O
*	O
fakedArgv	array
[	O
]	O
=	O
{	O
"."	pointer
}	O
;	O
concise	int
=	O
0	int
;	O
recursive	int
=	O
0	int
;	O
wide	int
=	O
all	int
=	O
0	int
;	O
if	O
(	O
helpFlag	function
(	O
argc	int
,	O
argv	pointer
)	O
)	O
usage	function
(	O
0	int
)	O
;	O
while	O
(	O
(	O
c	char
=	O
getopt	function
(	O
argc	int
,	O
argv	pointer
,	O
"i:waXbfds/h"	pointer
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
c	char
)	O
{	O
case	O
'i'	O
:	O
set_cmd_line_image	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'w'	O
:	O
wide	int
=	O
1	int
;	O
break	O
;	O
case	O
'a'	O
:	O
all	int
=	O
1	int
;	O
break	O
;	O
case	O
'b'	O
:	O
case	O
'X'	O
:	O
concise	int
=	O
1	int
;	O
break	O
;	O
case	O
's'	O
:	O
case	O
'/'	O
:	O
recursive	int
=	O
1	int
;	O
break	O
;	O
case	O
'f'	O
:	O
fast	int
=	O
1	int
;	O
break	O
;	O
case	O
'd'	O
:	O
debug	int
=	O
1	int
;	O
break	O
;	O
case	O
'h'	O
:	O
usage	function
(	O
0	int
)	O
;	O
default	O
:	O
usage	function
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
optind	int
==	O
argc	int
)	O
{	O
argv	pointer
=	O
(	O
char	O
*	O
*	O
)	O
fakedArgv	array
;	O
argc	int
=	O
1	int
;	O
optind	int
=	O
0	int
;	O
}	O
init_mp	function
(	O
&	O
mp	pointer
)	O
;	O
currentDrive	char
=	O
'\0'	O
;	O
currentDir	pointer
=	O
0	int
;	O
RootDir	pointer
=	O
0	int
;	O
dirPath	pointer
=	O
0	int
;	O
if	O
(	O
recursive	int
)	O
{	O
mp	pointer
.	O
lookupflags	int
=	O
ACCEPT_DIR	int
|	O
DO_OPEN_DIRS	int
|	O
NO_DOTS	int
;	O
mp	pointer
.	O
dirCallback	pointer
=	O
list_recurs_directory	function
;	O
}	O
else	O
{	O
mp	pointer
.	O
lookupflags	int
=	O
ACCEPT_DIR	int
|	O
ACCEPT_PLAIN	int
|	O
DO_OPEN_DIRS	int
;	O
mp	pointer
.	O
dirCallback	pointer
=	O
list_non_recurs_directory	function
;	O
mp	pointer
.	O
callback	pointer
=	O
list_file	function
;	O
}	O
mp	pointer
.	O
longname	pointer
.	O
data	pointer
=	O
mdir_longname	array
;	O
mp	pointer
.	O
longname	pointer
.	O
len	long
=	O
sizeof	O
(	O
mdir_longname	array
)	O
;	O
mp	pointer
.	O
shortname	pointer
.	O
data	pointer
=	O
mdir_shortname	array
;	O
mp	pointer
.	O
shortname	pointer
.	O
len	long
=	O
sizeof	O
(	O
mdir_shortname	array
)	O
;	O
ret	int
=	O
main_loop	function
(	O
&	O
mp	pointer
,	O
argv	pointer
+	O
optind	int
,	O
argc	int
-	O
optind	int
)	O
;	O
leaveDirectory	function
(	O
ret	int
)	O
;	O
leaveDrive	function
(	O
ret	int
)	O
;	O
exit	function
(	O
ret	int
)	O
;	O
}	O
