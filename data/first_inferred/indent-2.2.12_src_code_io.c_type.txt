RCSTAG_CC	O
(	O
"$Id$"	pointer
)	O
;	O
char	O
*	O
in_prog_pos	pointer
=	O
NULL	O
;	O
char	O
*	O
buf_ptr	pointer
=	O
NULL	O
;	O
char	O
*	O
buf_end	pointer
=	O
NULL	O
;	O
BOOLEAN	char
had_eof	char
=	O
false	int
;	O
char	O
*	O
cur_line	pointer
=	O
NULL	O
;	O
extern	O
char	O
*	O
skip_horiz_space	function
(	O
const	O
char	O
*	O
p	pointer
)	O
{	O
while	O
(	O
(	O
*	O
p	pointer
==	O
' '	O
)	O
||	O
(	O
*	O
p	pointer
==	O
TAB	char
)	O
)	O
{	O
p	pointer
++	O
;	O
}	O
return	O
(	O
char	O
*	O
)	O
p	pointer
;	O
}	O
extern	O
void	O
skip_buffered_space	function
(	O
void	O
)	O
{	O
while	O
(	O
(	O
*	O
buf_ptr	pointer
==	O
' '	O
)	O
||	O
(	O
*	O
buf_ptr	pointer
==	O
TAB	char
)	O
)	O
{	O
buf_ptr	pointer
++	O
;	O
if	O
(	O
buf_ptr	pointer
>=	O
buf_end	pointer
)	O
{	O
fill_buffer	function
(	O
)	O
;	O
}	O
}	O
}	O
static	O
BOOLEAN	char
is_comment_start	function
(	O
const	O
char	O
*	O
p	pointer
)	O
{	O
BOOLEAN	char
ret	char
;	O
if	O
(	O
(	O
*	O
p	pointer
==	O
'/'	O
)	O
&&	O
(	O
(	O
*	O
(	O
p	pointer
+	O
1	int
)	O
==	O
'*'	O
)	O
||	O
(	O
*	O
(	O
p	pointer
+	O
1	int
)	O
==	O
'/'	O
)	O
)	O
)	O
{	O
ret	char
=	O
true	int
;	O
}	O
else	O
{	O
ret	char
=	O
false	int
;	O
}	O
return	O
ret	char
;	O
}	O
extern	O
int	O
current_column	function
(	O
void	O
)	O
{	O
char	O
*	O
p	pointer
;	O
int	O
column	int
;	O
if	O
(	O
(	O
buf_ptr	pointer
>=	O
save_com	struct
.	O
ptr	pointer
)	O
&&	O
(	O
buf_ptr	pointer
<=	O
save_com	struct
.	O
ptr	pointer
+	O
save_com	struct
.	O
len	int
)	O
)	O
{	O
p	pointer
=	O
save_com	struct
.	O
ptr	pointer
;	O
column	int
=	O
save_com	struct
.	O
start_column	int
;	O
}	O
else	O
{	O
p	pointer
=	O
cur_line	pointer
;	O
column	int
=	O
1	int
;	O
}	O
while	O
(	O
p	pointer
<	O
buf_ptr	pointer
)	O
{	O
switch	O
(	O
*	O
p	pointer
)	O
{	O
case	O
EOL	char
:	O
case	O
014	int
:	O
column	int
=	O
1	int
;	O
break	O
;	O
case	O
TAB	char
:	O
column	int
+=	O
settings	struct
.	O
tabsize	int
-	O
(	O
column	int
-	O
1	int
)	O
%	O
settings	struct
.	O
tabsize	int
;	O
break	O
;	O
case	O
'\b'	O
:	O
column	int
--	O
;	O
break	O
;	O
default	O
:	O
column	int
++	O
;	O
break	O
;	O
}	O
p	pointer
++	O
;	O
}	O
return	O
column	int
;	O
}	O
extern	O
file_buffer_ty	struct
*	O
read_file	function
(	O
char	O
*	O
filename	pointer
,	O
struct	O
stat	struct
*	O
file_stats	pointer
)	O
{	O
static	O
file_buffer_ty	struct
fileptr	struct
=	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
}	O
;	O
ssize_t	long
size	long
=	O
0	int
;	O
size_t	long
size_to_read	long
=	O
0	int
;	O
unsigned	O
int	O
namelen	int
=	O
strlen	function
(	O
filename	pointer
)	O
;	O
int	O
fd	int
=	O
open	function
(	O
filename	pointer
,	O
O_RDONLY	int
,	O
0777	int
)	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
{	O
fatal	function
(	O
_	O
(	O
"Can't open input file %s"	pointer
)	O
,	O
filename	pointer
)	O
;	O
}	O
if	O
(	O
fstat	function
(	O
fd	int
,	O
file_stats	pointer
)	O
<	O
0	int
)	O
{	O
fatal	function
(	O
_	O
(	O
"Can't stat input file %s"	pointer
)	O
,	O
filename	pointer
)	O
;	O
}	O
if	O
(	O
file_stats	pointer
->	O
st_size	long
==	O
0	int
)	O
{	O
ERROR	O
(	O
_	O
(	O
"Zero-length file %s"	pointer
)	O
,	O
filename	pointer
,	O
0	int
)	O
;	O
}	O
if	O
(	O
sizeof	O
(	O
int	O
)	O
==	O
2	int
)	O
{	O
if	O
(	O
(	O
file_stats	pointer
->	O
st_size	long
<	O
0	int
)	O
||	O
(	O
file_stats	pointer
->	O
st_size	long
>	O
(	O
0xffff	int
-	O
1	int
)	O
)	O
)	O
{	O
fatal	function
(	O
_	O
(	O
"File %s is too big to read"	pointer
)	O
,	O
filename	pointer
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
file_stats	pointer
->	O
st_size	long
<	O
0	int
)	O
{	O
fatal	function
(	O
_	O
(	O
"System problem reading file %s"	pointer
)	O
,	O
filename	pointer
)	O
;	O
}	O
}	O
if	O
(	O
(	O
size_t	long
)	O
file_stats	pointer
->	O
st_size	long
>=	O
SSIZE_MAX	O
)	O
{	O
fatal	function
(	O
_	O
(	O
"File %s is too big to read"	pointer
)	O
,	O
filename	pointer
)	O
;	O
}	O
fileptr	struct
.	O
size	long
=	O
file_stats	pointer
->	O
st_size	long
;	O
if	O
(	O
fileptr	struct
.	O
data	pointer
!=	O
0	int
)	O
{	O
fileptr	struct
.	O
data	pointer
=	O
xrealloc	function
(	O
fileptr	struct
.	O
data	pointer
,	O
(	O
unsigned	O
)	O
file_stats	pointer
->	O
st_size	long
+	O
2	int
)	O
;	O
}	O
else	O
{	O
fileptr	struct
.	O
data	pointer
=	O
xmalloc	function
(	O
(	O
unsigned	O
)	O
file_stats	pointer
->	O
st_size	long
+	O
2	int
)	O
;	O
}	O
size_to_read	long
=	O
fileptr	struct
.	O
size	long
;	O
while	O
(	O
size_to_read	long
>	O
0	int
)	O
{	O
size	long
=	O
read	pointer
(	O
fd	int
,	O
fileptr	struct
.	O
data	pointer
+	O
fileptr	struct
.	O
size	long
-	O
size_to_read	long
,	O
size_to_read	long
)	O
;	O
if	O
(	O
size	long
==	O
-	O
1	int
)	O
{	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
{	O
continue	O
;	O
}	O
xfree	function
(	O
fileptr	struct
.	O
data	pointer
)	O
;	O
fatal	function
(	O
_	O
(	O
"Error reading input file %s"	pointer
)	O
,	O
filename	pointer
)	O
;	O
}	O
size_to_read	long
-=	O
size	long
;	O
}	O
if	O
(	O
close	pointer
(	O
fd	int
)	O
<	O
0	int
)	O
{	O
xfree	function
(	O
fileptr	struct
.	O
data	pointer
)	O
;	O
fatal	function
(	O
_	O
(	O
"Error closing input file %s"	pointer
)	O
,	O
filename	pointer
)	O
;	O
}	O
if	O
(	O
(	O
size_t	long
)	O
size	long
<	O
fileptr	struct
.	O
size	long
)	O
{	O
fileptr	struct
.	O
size	long
=	O
size	long
;	O
}	O
if	O
(	O
fileptr	struct
.	O
name	pointer
!=	O
NULL	O
)	O
{	O
fileptr	struct
.	O
name	pointer
=	O
xrealloc	function
(	O
fileptr	struct
.	O
name	pointer
,	O
(	O
unsigned	O
)	O
namelen	int
+	O
1	int
)	O
;	O
}	O
else	O
{	O
fileptr	struct
.	O
name	pointer
=	O
xmalloc	function
(	O
namelen	int
+	O
1	int
)	O
;	O
}	O
memcpy	function
(	O
fileptr	struct
.	O
name	pointer
,	O
filename	pointer
,	O
namelen	int
)	O
;	O
fileptr	struct
.	O
name	pointer
[	O
namelen	int
]	O
=	O
EOS	char
;	O
if	O
(	O
(	O
fileptr	struct
.	O
size	long
>	O
0	int
)	O
&&	O
(	O
fileptr	struct
.	O
data	pointer
[	O
fileptr	struct
.	O
size	long
-	O
1	int
]	O
!=	O
EOL	char
)	O
)	O
{	O
fileptr	struct
.	O
data	pointer
[	O
fileptr	struct
.	O
size	long
]	O
=	O
EOL	char
;	O
fileptr	struct
.	O
size	long
++	O
;	O
}	O
fileptr	struct
.	O
data	pointer
[	O
fileptr	struct
.	O
size	long
]	O
=	O
EOS	char
;	O
return	O
&	O
fileptr	struct
;	O
}	O
file_buffer_ty	struct
*	O
read_stdin	function
(	O
void	O
)	O
{	O
static	O
file_buffer_ty	struct
stdinptr	struct
=	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
}	O
;	O
unsigned	O
int	O
size	long
=	O
15	int
*	O
BUFSIZ	int
;	O
int	O
ch	int
=	O
EOF	O
;	O
char	O
*	O
p	pointer
=	O
NULL	O
;	O
if	O
(	O
stdinptr	struct
.	O
data	pointer
!=	O
0	int
)	O
{	O
free	function
(	O
stdinptr	struct
.	O
data	pointer
)	O
;	O
}	O
stdinptr	struct
.	O
data	pointer
=	O
xmalloc	function
(	O
size	long
+	O
1	int
)	O
;	O
stdinptr	struct
.	O
size	long
=	O
0	int
;	O
p	pointer
=	O
stdinptr	struct
.	O
data	pointer
;	O
do	O
{	O
while	O
(	O
stdinptr	struct
.	O
size	long
<	O
size	long
)	O
{	O
ch	int
=	O
getc	function
(	O
stdin	pointer
)	O
;	O
if	O
(	O
ch	int
==	O
EOF	O
)	O
{	O
break	O
;	O
}	O
*	O
p	pointer
++	O
=	O
ch	int
;	O
stdinptr	struct
.	O
size	long
++	O
;	O
}	O
if	O
(	O
ch	int
!=	O
EOF	O
)	O
{	O
size	long
+=	O
(	O
2	int
*	O
BUFSIZ	int
)	O
;	O
stdinptr	struct
.	O
data	pointer
=	O
xrealloc	function
(	O
stdinptr	struct
.	O
data	pointer
,	O
(	O
unsigned	O
)	O
size	long
)	O
;	O
p	pointer
=	O
stdinptr	struct
.	O
data	pointer
+	O
stdinptr	struct
.	O
size	long
;	O
}	O
}	O
while	O
(	O
ch	int
!=	O
EOF	O
)	O
;	O
stdinptr	struct
.	O
name	pointer
=	O
"Standard Input"	pointer
;	O
stdinptr	struct
.	O
data	pointer
[	O
stdinptr	struct
.	O
size	long
]	O
=	O
EOS	char
;	O
return	O
&	O
stdinptr	struct
;	O
}	O
void	O
fill_buffer	function
(	O
void	O
)	O
{	O
char	O
*	O
p	pointer
=	O
NULL	O
;	O
BOOLEAN	char
finished_a_line	char
=	O
false	int
;	O
if	O
(	O
bp_save	pointer
!=	O
0	int
)	O
{	O
buf_ptr	pointer
=	O
bp_save	pointer
;	O
buf_end	pointer
=	O
be_save	pointer
;	O
bp_save	pointer
=	O
be_save	pointer
=	O
0	int
;	O
if	O
(	O
buf_ptr	pointer
<	O
buf_end	pointer
)	O
{	O
return	O
;	O
}	O
}	O
if	O
(	O
*	O
in_prog_pos	pointer
==	O
EOS	char
)	O
{	O
buf_ptr	pointer
=	O
in_prog_pos	pointer
;	O
cur_line	pointer
=	O
buf_ptr	pointer
;	O
had_eof	char
=	O
true	int
;	O
}	O
else	O
{	O
cur_line	pointer
=	O
in_prog_pos	pointer
;	O
p	pointer
=	O
cur_line	pointer
;	O
finished_a_line	char
=	O
false	int
;	O
do	O
{	O
p	pointer
=	O
skip_horiz_space	function
(	O
p	pointer
)	O
;	O
if	O
(	O
is_comment_start	function
(	O
p	pointer
)	O
)	O
{	O
p	pointer
+=	O
2	int
;	O
p	pointer
=	O
skip_horiz_space	function
(	O
p	pointer
)	O
;	O
if	O
(	O
strncmp	function
(	O
p	pointer
,	O
"*INDENT-OFF*"	pointer
,	O
12	int
)	O
==	O
0	int
)	O
{	O
inhibit_indenting	function
(	O
true	int
)	O
;	O
}	O
}	O
while	O
(	O
(	O
*	O
p	pointer
!=	O
EOS	char
)	O
&&	O
*	O
p	pointer
!=	O
EOL	char
)	O
{	O
p	pointer
++	O
;	O
}	O
if	O
(	O
*	O
p	pointer
==	O
EOL	char
)	O
{	O
finished_a_line	char
=	O
true	int
;	O
in_prog_pos	pointer
=	O
p	pointer
+	O
1	int
;	O
}	O
else	O
if	O
(	O
(	O
unsigned	O
int	O
)	O
(	O
p	pointer
-	O
current_input	pointer
->	O
data	pointer
)	O
<	O
current_input	pointer
->	O
size	long
)	O
{	O
fatal	function
(	O
_	O
(	O
"File %s contains NULL-characters: cannot proceed\n"	pointer
)	O
,	O
current_input	pointer
->	O
name	pointer
)	O
;	O
}	O
else	O
{	O
in_prog_pos	pointer
=	O
p	pointer
;	O
finished_a_line	char
=	O
true	int
;	O
}	O
}	O
while	O
(	O
!	O
finished_a_line	char
)	O
;	O
buf_ptr	pointer
=	O
cur_line	pointer
;	O
buf_end	pointer
=	O
in_prog_pos	pointer
;	O
}	O
}	O
