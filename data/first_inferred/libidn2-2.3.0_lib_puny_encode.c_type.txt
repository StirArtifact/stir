enum	O
{	O
base	int
=	O
36	int
,	O
tmin	int
=	O
1	int
,	O
tmax	int
=	O
26	int
,	O
skew	int
=	O
38	int
,	O
damp	int
=	O
700	int
,	O
initial_bias	int
=	O
72	int
,	O
initial_n	int
=	O
0x80	int
,	O
delimiter	int
=	O
0x2D	int
}	O
;	O
static	O
char	O
encode_digit	function
(	O
punycode_uint	O
d	int
,	O
int	O
flag	int
)	O
{	O
return	O
d	int
+	O
22	int
+	O
75	int
*	O
(	O
d	int
<	O
26	int
)	O
-	O
(	O
(	O
flag	int
!=	O
0	int
)	O
<<	O
5	int
)	O
;	O
}	O
static	O
const	O
punycode_uint	O
maxint	int
=	O
-	O
1	int
;	O
static	O
punycode_uint	O
adapt	function
(	O
punycode_uint	O
delta	int
,	O
punycode_uint	O
numpoints	int
,	O
int	O
firsttime	int
)	O
_GL_ATTRIBUTE_CONST	O
;	O
static	O
punycode_uint	O
adapt	function
(	O
punycode_uint	O
delta	int
,	O
punycode_uint	O
numpoints	int
,	O
int	O
firsttime	int
)	O
{	O
punycode_uint	O
k	int
;	O
delta	int
=	O
firsttime	int
?	O
delta	int
/	O
damp	int
:	O
delta	int
>>	O
1	int
;	O
delta	int
+=	O
delta	int
/	O
numpoints	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
delta	int
>	O
(	O
(	O
base	int
-	O
tmin	int
)	O
*	O
tmax	int
)	O
/	O
2	int
;	O
k	int
+=	O
base	int
)	O
{	O
delta	int
/=	O
base	int
-	O
tmin	int
;	O
}	O
return	O
k	int
+	O
(	O
base	int
-	O
tmin	int
+	O
1	int
)	O
*	O
delta	int
/	O
(	O
delta	int
+	O
skew	int
)	O
;	O
}	O
int	O
punycode_encode	O
(	O
size_t	long
input_length_orig	long
,	O
const	O
punycode_uint	O
input	pointer
[	O
]	O
,	O
size_t	long
*	O
output_length	pointer
,	O
char	O
output	pointer
[	O
]	O
)	O
{	O
punycode_uint	O
input_length	long
,	O
n	int
,	O
delta	int
,	O
h	int
,	O
b	int
,	O
bias	int
,	O
j	int
,	O
m	int
,	O
q	int
,	O
k	int
,	O
t	int
;	O
size_t	long
out	pointer
,	O
max_out	long
;	O
if	O
(	O
input_length_orig	long
>	O
maxint	int
)	O
return	O
punycode_overflow	O
;	O
input_length	long
=	O
(	O
punycode_uint	O
)	O
input_length_orig	long
;	O
n	int
=	O
initial_n	int
;	O
delta	int
=	O
0	int
;	O
out	pointer
=	O
0	int
;	O
max_out	long
=	O
*	O
output_length	pointer
;	O
bias	int
=	O
initial_bias	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
input_length	long
;	O
++	O
j	int
)	O
{	O
if	O
(	O
basic	O
(	O
input	pointer
[	O
j	int
]	O
)	O
)	O
{	O
if	O
(	O
max_out	long
-	O
out	pointer
<	O
2	int
)	O
return	O
punycode_big_output	O
;	O
output	pointer
[	O
out	pointer
++	O
]	O
=	O
(	O
char	O
)	O
input	pointer
[	O
j	int
]	O
;	O
}	O
else	O
if	O
(	O
input	pointer
[	O
j	int
]	O
>	O
0x10FFFF	int
||	O
(	O
input	pointer
[	O
j	int
]	O
>=	O
0xD800	int
&&	O
input	pointer
[	O
j	int
]	O
<=	O
0xDBFF	int
)	O
)	O
return	O
punycode_bad_input	O
;	O
}	O
h	int
=	O
b	int
=	O
(	O
punycode_uint	O
)	O
out	pointer
;	O
if	O
(	O
b	int
>	O
0	int
)	O
output	pointer
[	O
out	pointer
++	O
]	O
=	O
delimiter	int
;	O
while	O
(	O
h	int
<	O
input_length	long
)	O
{	O
for	O
(	O
m	int
=	O
maxint	int
,	O
j	int
=	O
0	int
;	O
j	int
<	O
input_length	long
;	O
++	O
j	int
)	O
{	O
if	O
(	O
input	pointer
[	O
j	int
]	O
>=	O
n	int
&&	O
input	pointer
[	O
j	int
]	O
<	O
m	int
)	O
m	int
=	O
input	pointer
[	O
j	int
]	O
;	O
}	O
if	O
(	O
m	int
-	O
n	int
>	O
(	O
maxint	int
-	O
delta	int
)	O
/	O
(	O
h	int
+	O
1	int
)	O
)	O
return	O
punycode_overflow	O
;	O
delta	int
+=	O
(	O
m	int
-	O
n	int
)	O
*	O
(	O
h	int
+	O
1	int
)	O
;	O
n	int
=	O
m	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
input_length	long
;	O
++	O
j	int
)	O
{	O
if	O
(	O
input	pointer
[	O
j	int
]	O
<	O
n	int
)	O
{	O
if	O
(	O
++	O
delta	int
==	O
0	int
)	O
return	O
punycode_overflow	O
;	O
}	O
if	O
(	O
input	pointer
[	O
j	int
]	O
==	O
n	int
)	O
{	O
for	O
(	O
q	int
=	O
delta	int
,	O
k	int
=	O
base	int
;	O
;	O
k	int
+=	O
base	int
)	O
{	O
if	O
(	O
out	pointer
>=	O
max_out	long
)	O
return	O
punycode_big_output	O
;	O
t	int
=	O
k	int
<=	O
bias	int
?	O
tmin	int
:	O
k	int
>=	O
bias	int
+	O
tmax	int
?	O
tmax	int
:	O
k	int
-	O
bias	int
;	O
if	O
(	O
q	int
<	O
t	int
)	O
break	O
;	O
output	pointer
[	O
out	pointer
++	O
]	O
=	O
encode_digit	function
(	O
t	int
+	O
(	O
q	int
-	O
t	int
)	O
%	O
(	O
base	int
-	O
t	int
)	O
,	O
0	int
)	O
;	O
q	int
=	O
(	O
q	int
-	O
t	int
)	O
/	O
(	O
base	int
-	O
t	int
)	O
;	O
}	O
output	pointer
[	O
out	pointer
++	O
]	O
=	O
encode_digit	function
(	O
q	int
,	O
0	int
)	O
;	O
bias	int
=	O
adapt	function
(	O
delta	int
,	O
h	int
+	O
1	int
,	O
h	int
==	O
b	int
)	O
;	O
delta	int
=	O
0	int
;	O
++	O
h	int
;	O
}	O
}	O
++	O
delta	int
,	O
++	O
n	int
;	O
}	O
*	O
output_length	pointer
=	O
out	pointer
;	O
return	O
punycode_success	O
;	O
}	O
__typeof__	O
(	O
_idn2_punycode_encode_internal	function
)	O
_idn2_punycode_encode	O
__attribute__	O
(	O
(	O
visibility	O
(	O
"default"	pointer
)	O
,	O
alias	O
(	O
"_idn2_punycode_encode_internal"	pointer
)	O
)	O
)	O
;	O
__asm__	O
(	O
".symver _idn2_punycode_encode, _idn2_punycode_encode@IDN2_0.0.0"	pointer
)	O
;	O
