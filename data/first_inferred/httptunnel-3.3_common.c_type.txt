void	O
log_exit	function
(	O
int	O
status	int
)	O
{	O
log_notice	function
(	O
"exit with status = %d"	pointer
,	O
status	int
)	O
;	O
exit	function
(	O
status	int
)	O
;	O
}	O
void	O
log_notice	function
(	O
char	O
*	O
fmt0	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
fmt0	pointer
)	O
;	O
vsyslog	function
(	O
LOG_NOTICE	int
,	O
fmt0	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
void	O
log_error	function
(	O
char	O
*	O
fmt0	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
fmt0	pointer
)	O
;	O
vsyslog	function
(	O
LOG_ERROR	O
,	O
fmt0	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
int	O
server_socket	function
(	O
struct	O
in_addr	struct
addr	struct
,	O
int	O
port	int
,	O
int	O
backlog	int
)	O
{	O
struct	O
sockaddr_in	struct
address	pointer
;	O
int	O
i	int
,	O
s	int
;	O
s	int
=	O
socket	function
(	O
PF_INET	int
,	O
SOCK_STREAM	int
,	O
0	int
)	O
;	O
if	O
(	O
s	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
i	int
=	O
1	int
;	O
if	O
(	O
setsockopt	function
(	O
s	int
,	O
SOL_SOCKET	int
,	O
SO_REUSEADDR	int
,	O
(	O
void	O
*	O
)	O
&	O
i	int
,	O
sizeof	O
i	int
)	O
==	O
-	O
1	int
)	O
{	O
log_error	function
(	O
"server_socket: setsockopt SO_REUSEADDR: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
}	O
memset	function
(	O
&	O
address	pointer
,	O
'\0'	O
,	O
sizeof	O
address	pointer
)	O
;	O
address	pointer
.	O
sin_family	short
=	O
PF_INET	int
;	O
address	pointer
.	O
sin_port	short
=	O
htons	function
(	O
(	O
short	O
)	O
port	int
)	O
;	O
address	pointer
.	O
sin_addr	struct
=	O
addr	struct
;	O
if	O
(	O
bind	function
(	O
s	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
address	pointer
,	O
sizeof	O
(	O
address	pointer
)	O
)	O
==	O
-	O
1	int
)	O
{	O
close	function
(	O
s	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
listen	function
(	O
s	int
,	O
(	O
unsigned	O
)	O
backlog	int
)	O
==	O
-	O
1	int
)	O
{	O
close	function
(	O
s	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
s	int
;	O
}	O
int	O
set_address	function
(	O
struct	O
sockaddr_in	struct
*	O
address	pointer
,	O
const	O
char	O
*	O
host	pointer
,	O
int	O
port	int
)	O
{	O
memset	function
(	O
address	pointer
,	O
'\0'	O
,	O
sizeof	O
*	O
address	pointer
)	O
;	O
address	pointer
->	O
sin_family	short
=	O
PF_INET	int
;	O
address	pointer
->	O
sin_port	short
=	O
htons	function
(	O
(	O
u_short	short
)	O
port	int
)	O
;	O
address	pointer
->	O
sin_addr	struct
.	O
s_addr	int
=	O
inet_addr	function
(	O
host	pointer
)	O
;	O
if	O
(	O
address	pointer
->	O
sin_addr	struct
.	O
s_addr	int
==	O
INADDR_NONE	O
)	O
{	O
struct	O
hostent	struct
*	O
ent	pointer
;	O
unsigned	O
int	O
ip	int
;	O
log_annoying	function
(	O
"set_address: gethostbyname (\"%s\")"	pointer
,	O
host	pointer
)	O
;	O
ent	pointer
=	O
gethostbyname	function
(	O
host	pointer
)	O
;	O
log_annoying	function
(	O
"set_address: ent = %p"	pointer
,	O
ent	pointer
)	O
;	O
if	O
(	O
ent	pointer
==	O
0	int
)	O
return	O
-	O
1	int
;	O
memcpy	function
(	O
&	O
address	pointer
->	O
sin_addr	struct
.	O
s_addr	int
,	O
ent	pointer
->	O
h_addr	O
,	O
(	O
unsigned	O
)	O
ent	pointer
->	O
h_length	int
)	O
;	O
ip	int
=	O
ntohl	function
(	O
address	pointer
->	O
sin_addr	struct
.	O
s_addr	int
)	O
;	O
log_annoying	function
(	O
"set_address: host = %d.%d.%d.%d"	pointer
,	O
ntohl	function
(	O
ip	int
)	O
>>	O
24	int
,	O
(	O
ntohl	function
(	O
ip	int
)	O
>>	O
16	int
)	O
&	O
0xff	int
,	O
(	O
ntohl	function
(	O
ip	int
)	O
>>	O
8	int
)	O
&	O
0xff	int
,	O
ntohl	function
(	O
ip	int
)	O
&	O
0xff	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
open_device	function
(	O
char	O
*	O
device	pointer
)	O
{	O
struct	O
termios	struct
t	struct
;	O
int	O
fd	int
;	O
fd	int
=	O
open	function
(	O
device	pointer
,	O
O_RDWR	int
|	O
O_NONBLOCK	int
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
tcgetattr	function
(	O
fd	int
,	O
&	O
t	struct
)	O
==	O
-	O
1	int
)	O
{	O
if	O
(	O
errno	O
==	O
ENOTTY	int
||	O
errno	O
==	O
EINVAL	int
)	O
return	O
fd	int
;	O
else	O
return	O
-	O
1	int
;	O
}	O
t	struct
.	O
c_iflag	int
=	O
0	int
;	O
t	struct
.	O
c_oflag	int
=	O
0	int
;	O
t	struct
.	O
c_lflag	int
=	O
0	int
;	O
if	O
(	O
tcsetattr	function
(	O
fd	int
,	O
TCSANOW	int
,	O
&	O
t	struct
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
return	O
fd	int
;	O
}	O
int	O
handle_device_input	function
(	O
Tunnel	struct
*	O
tunnel	pointer
,	O
int	O
fd	int
,	O
int	O
events	short
)	O
{	O
unsigned	O
char	O
buf	pointer
[	O
10240	int
]	O
;	O
ssize_t	long
n	long
,	O
m	long
;	O
if	O
(	O
events	short
&	O
POLLIN	int
)	O
{	O
n	long
=	O
read	function
(	O
fd	int
,	O
buf	pointer
,	O
sizeof	O
buf	pointer
)	O
;	O
if	O
(	O
n	long
==	O
0	int
||	O
n	long
==	O
-	O
1	int
)	O
{	O
if	O
(	O
n	long
==	O
-	O
1	int
&&	O
errno	O
!=	O
EAGAIN	int
)	O
log_error	function
(	O
"handle_device_input: read() error: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
n	long
;	O
}	O
m	long
=	O
tunnel_write	function
(	O
tunnel	pointer
,	O
buf	pointer
,	O
(	O
size_t	long
)	O
n	long
)	O
;	O
log_annoying	function
(	O
"tunnel_write (%p, %p, %d) = %d"	pointer
,	O
tunnel	pointer
,	O
buf	pointer
,	O
n	long
,	O
m	long
)	O
;	O
return	O
m	long
;	O
}	O
else	O
if	O
(	O
events	short
&	O
POLLHUP	int
)	O
{	O
log_error	function
(	O
"handle_device_input: POLLHUP"	pointer
)	O
;	O
sleep	function
(	O
5	int
)	O
;	O
}	O
else	O
if	O
(	O
events	short
&	O
POLLERR	int
)	O
log_error	function
(	O
"handle_device_input: POLLERR"	pointer
)	O
;	O
else	O
if	O
(	O
events	short
&	O
POLLNVAL	int
)	O
log_error	function
(	O
"handle_device_input: POLLINVAL"	pointer
)	O
;	O
else	O
log_error	function
(	O
"handle_device_input: none of the above"	pointer
)	O
;	O
errno	O
=	O
EIO	int
;	O
return	O
-	O
1	int
;	O
}	O
int	O
handle_tunnel_input	function
(	O
Tunnel	struct
*	O
tunnel	pointer
,	O
int	O
fd	int
,	O
int	O
events	short
)	O
{	O
unsigned	O
char	O
buf	pointer
[	O
10240	int
]	O
;	O
ssize_t	long
n	long
,	O
m	long
;	O
if	O
(	O
events	short
&	O
POLLIN	int
)	O
{	O
n	long
=	O
tunnel_read	function
(	O
tunnel	pointer
,	O
buf	pointer
,	O
sizeof	O
buf	pointer
)	O
;	O
if	O
(	O
n	long
<=	O
0	int
)	O
{	O
log_annoying	function
(	O
"handle_tunnel_input: tunnel_read() = %d\n"	pointer
,	O
n	long
)	O
;	O
if	O
(	O
n	long
==	O
-	O
1	int
&&	O
errno	O
!=	O
EAGAIN	int
)	O
log_error	function
(	O
"handle_tunnel_input: tunnel_read() error: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
n	long
;	O
}	O
m	long
=	O
write_all	function
(	O
fd	int
?	O
fd	int
:	O
0	int
,	O
buf	pointer
,	O
(	O
size_t	long
)	O
n	long
)	O
;	O
log_annoying	function
(	O
"write_all (%d, %p, %d) = %d"	pointer
,	O
fd	int
?	O
fd	int
:	O
1	int
,	O
buf	pointer
,	O
n	long
,	O
m	long
)	O
;	O
return	O
m	long
;	O
}	O
else	O
if	O
(	O
events	short
&	O
POLLHUP	int
)	O
log_error	function
(	O
"handle_device_input: POLLHUP"	pointer
)	O
;	O
else	O
if	O
(	O
events	short
&	O
POLLERR	int
)	O
log_error	function
(	O
"handle_device_input: PULLERR"	pointer
)	O
;	O
else	O
if	O
(	O
events	short
&	O
POLLNVAL	int
)	O
log_error	function
(	O
"handle_device_input: PULLINVAL"	pointer
)	O
;	O
else	O
log_error	function
(	O
"handle_device_input: none of the above"	pointer
)	O
;	O
errno	O
=	O
EIO	int
;	O
return	O
-	O
1	int
;	O
}	O
void	O
name_and_port	function
(	O
const	O
char	O
*	O
nameport	pointer
,	O
char	O
*	O
*	O
name	pointer
,	O
int	O
*	O
port	int
)	O
{	O
char	O
*	O
p	pointer
;	O
*	O
name	pointer
=	O
strdup	function
(	O
nameport	pointer
)	O
;	O
if	O
(	O
*	O
name	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Out of memory\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
p	pointer
=	O
strchr	function
(	O
*	O
name	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
p	pointer
!=	O
NULL	O
)	O
{	O
*	O
port	int
=	O
atoi	function
(	O
p	pointer
+	O
1	int
)	O
;	O
*	O
p	pointer
=	O
'\0'	O
;	O
}	O
}	O
int	O
atoi_with_postfix	function
(	O
const	O
char	O
*	O
s_	pointer
)	O
{	O
char	O
*	O
s	int
=	O
strdup	function
(	O
s_	pointer
)	O
;	O
int	O
n	long
=	O
strlen	function
(	O
s	int
)	O
;	O
int	O
factor	int
=	O
1	int
;	O
int	O
x	int
;	O
if	O
(	O
s	int
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Out of memory\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
switch	O
(	O
s	int
[	O
n	long
-	O
1	int
]	O
)	O
{	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
break	O
;	O
case	O
'k'	O
:	O
case	O
'K'	O
:	O
factor	int
=	O
1024	int
;	O
break	O
;	O
case	O
'M'	O
:	O
factor	int
=	O
1024	int
*	O
1024	int
;	O
break	O
;	O
case	O
'G'	O
:	O
factor	int
=	O
1024	int
*	O
1024	int
*	O
1024	int
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"Unknown postfix: %c\n"	pointer
,	O
s	int
[	O
n	long
-	O
1	int
]	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
factor	int
!=	O
1	int
)	O
s	int
[	O
n	long
-	O
1	int
]	O
=	O
'\0'	O
;	O
x	int
=	O
factor	int
*	O
atoi	function
(	O
s	int
)	O
;	O
free	function
(	O
s	int
)	O
;	O
return	O
x	int
;	O
}	O
