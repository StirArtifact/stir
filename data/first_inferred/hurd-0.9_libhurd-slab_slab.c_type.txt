static	O
int	O
__hurd_slab_nr_pages	int
;	O
union	O
hurd_bufctl	union
{	O
union	O
hurd_bufctl	union
*	O
next	pointer
;	O
struct	O
hurd_slab	struct
*	O
slab	pointer
;	O
}	O
;	O
struct	O
hurd_slab	struct
{	O
struct	O
hurd_slab	struct
*	O
next	pointer
;	O
struct	O
hurd_slab	struct
*	O
prev	pointer
;	O
int	O
refcount	int
;	O
union	O
hurd_bufctl	union
*	O
free_list	pointer
;	O
}	O
;	O
static	O
error_t	int
allocate_buffer	pointer
(	O
struct	O
hurd_slab_space	struct
*	O
space	pointer
,	O
size_t	long
size	long
,	O
void	O
*	O
*	O
ptr	pointer
)	O
{	O
if	O
(	O
space	pointer
->	O
allocate_buffer	pointer
)	O
return	O
space	pointer
->	O
allocate_buffer	pointer
(	O
space	pointer
->	O
hook	pointer
,	O
size	long
,	O
ptr	pointer
)	O
;	O
else	O
{	O
*	O
ptr	pointer
=	O
mmap	function
(	O
NULL	O
,	O
size	long
,	O
PROT_READ	int
|	O
PROT_WRITE	int
,	O
MAP_PRIVATE	int
|	O
MAP_ANONYMOUS	int
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
*	O
ptr	pointer
==	O
MAP_FAILED	O
)	O
return	O
errno	O
;	O
else	O
return	O
0	int
;	O
}	O
}	O
static	O
error_t	int
deallocate_buffer	pointer
(	O
struct	O
hurd_slab_space	struct
*	O
space	pointer
,	O
void	O
*	O
buffer	pointer
,	O
size_t	long
size	long
)	O
{	O
if	O
(	O
space	pointer
->	O
deallocate_buffer	pointer
)	O
return	O
space	pointer
->	O
deallocate_buffer	pointer
(	O
space	pointer
->	O
hook	pointer
,	O
buffer	pointer
,	O
size	long
)	O
;	O
else	O
{	O
if	O
(	O
munmap	function
(	O
buffer	pointer
,	O
size	long
)	O
==	O
-	O
1	int
)	O
return	O
errno	O
;	O
else	O
return	O
0	int
;	O
}	O
}	O
static	O
void	O
insert_slab	function
(	O
struct	O
hurd_slab_space	struct
*	O
space	pointer
,	O
struct	O
hurd_slab	struct
*	O
slab	pointer
)	O
{	O
assert	O
(	O
slab	pointer
->	O
refcount	int
==	O
0	int
)	O
;	O
if	O
(	O
space	pointer
->	O
slab_first	pointer
==	O
0	int
)	O
space	pointer
->	O
slab_first	pointer
=	O
space	pointer
->	O
slab_last	pointer
=	O
slab	pointer
;	O
else	O
{	O
space	pointer
->	O
slab_last	pointer
->	O
next	pointer
=	O
slab	pointer
;	O
slab	pointer
->	O
prev	pointer
=	O
space	pointer
->	O
slab_last	pointer
;	O
space	pointer
->	O
slab_last	pointer
=	O
slab	pointer
;	O
}	O
}	O
static	O
void	O
remove_slab	function
(	O
struct	O
hurd_slab_space	struct
*	O
space	pointer
,	O
struct	O
hurd_slab	struct
*	O
slab	pointer
)	O
{	O
if	O
(	O
slab	pointer
!=	O
space	pointer
->	O
slab_first	pointer
&&	O
slab	pointer
!=	O
space	pointer
->	O
slab_last	pointer
)	O
{	O
slab	pointer
->	O
next	pointer
->	O
prev	pointer
=	O
slab	pointer
->	O
prev	pointer
;	O
slab	pointer
->	O
prev	pointer
->	O
next	pointer
=	O
slab	pointer
->	O
next	pointer
;	O
return	O
;	O
}	O
if	O
(	O
slab	pointer
==	O
space	pointer
->	O
slab_first	pointer
)	O
{	O
space	pointer
->	O
slab_first	pointer
=	O
slab	pointer
->	O
next	pointer
;	O
if	O
(	O
space	pointer
->	O
slab_first	pointer
)	O
space	pointer
->	O
slab_first	pointer
->	O
prev	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
slab	pointer
==	O
space	pointer
->	O
slab_last	pointer
)	O
{	O
if	O
(	O
slab	pointer
->	O
prev	pointer
)	O
slab	pointer
->	O
prev	pointer
->	O
next	pointer
=	O
NULL	O
;	O
space	pointer
->	O
slab_last	pointer
=	O
slab	pointer
->	O
prev	pointer
;	O
}	O
}	O
static	O
error_t	int
reap	function
(	O
struct	O
hurd_slab_space	struct
*	O
space	pointer
)	O
{	O
struct	O
hurd_slab	struct
*	O
s	pointer
,	O
*	O
next	pointer
,	O
*	O
new_first	pointer
;	O
error_t	int
err	int
=	O
0	int
;	O
for	O
(	O
s	pointer
=	O
space	pointer
->	O
slab_first	pointer
;	O
s	pointer
;	O
s	pointer
=	O
next	pointer
)	O
{	O
next	pointer
=	O
s	pointer
->	O
next	pointer
;	O
if	O
(	O
!	O
s	pointer
->	O
refcount	int
)	O
{	O
remove_slab	function
(	O
space	pointer
,	O
s	pointer
)	O
;	O
if	O
(	O
space	pointer
->	O
destructor	pointer
)	O
{	O
union	O
hurd_bufctl	union
*	O
bufctl	pointer
;	O
for	O
(	O
bufctl	pointer
=	O
s	pointer
->	O
free_list	pointer
;	O
bufctl	pointer
;	O
bufctl	pointer
=	O
bufctl	pointer
->	O
next	pointer
)	O
{	O
void	O
*	O
buffer	pointer
=	O
(	O
(	O
(	O
void	O
*	O
)	O
bufctl	pointer
)	O
-	O
(	O
space	pointer
->	O
size	long
-	O
sizeof	O
*	O
bufctl	pointer
)	O
)	O
;	O
(	O
*	O
space	pointer
->	O
destructor	pointer
)	O
(	O
space	pointer
->	O
hook	pointer
,	O
buffer	pointer
)	O
;	O
}	O
}	O
err	int
=	O
deallocate_buffer	pointer
(	O
space	pointer
,	O
(	O
void	O
*	O
)	O
(	O
(	O
(	O
uintptr_t	long
)	O
s	pointer
)	O
+	O
sizeof	O
(	O
struct	O
hurd_slab	struct
)	O
-	O
space	pointer
->	O
slab_size	long
)	O
,	O
space	pointer
->	O
slab_size	long
)	O
;	O
if	O
(	O
err	int
)	O
break	O
;	O
__hurd_slab_nr_pages	int
--	O
;	O
}	O
}	O
new_first	pointer
=	O
space	pointer
->	O
slab_first	pointer
;	O
while	O
(	O
new_first	pointer
)	O
{	O
if	O
(	O
new_first	pointer
->	O
refcount	int
!=	O
space	pointer
->	O
full_refcount	int
)	O
break	O
;	O
new_first	pointer
=	O
new_first	pointer
->	O
next	pointer
;	O
}	O
space	pointer
->	O
first_free	pointer
=	O
new_first	pointer
;	O
return	O
err	int
;	O
}	O
static	O
void	O
init_space	function
(	O
hurd_slab_space_t	pointer
space	pointer
)	O
{	O
size_t	long
size	long
=	O
space	pointer
->	O
requested_size	long
+	O
sizeof	O
(	O
union	O
hurd_bufctl	union
)	O
;	O
size_t	long
alignment	long
=	O
space	pointer
->	O
requested_align	long
;	O
size	long
=	O
(	O
size	long
+	O
alignment	long
-	O
1	int
)	O
&	O
~	O
(	O
alignment	long
-	O
1	int
)	O
;	O
assert	O
(	O
size	long
<=	O
(	O
space	pointer
->	O
slab_size	long
-	O
sizeof	O
(	O
struct	O
hurd_slab	struct
)	O
-	O
sizeof	O
(	O
union	O
hurd_bufctl	union
)	O
)	O
)	O
;	O
space	pointer
->	O
size	long
=	O
size	long
;	O
space	pointer
->	O
full_refcount	int
=	O
(	O
(	O
space	pointer
->	O
slab_size	long
-	O
sizeof	O
(	O
struct	O
hurd_slab	struct
)	O
)	O
/	O
size	long
)	O
;	O
space	pointer
->	O
initialized	bool
=	O
true	int
;	O
}	O
static	O
error_t	int
grow	function
(	O
struct	O
hurd_slab_space	struct
*	O
space	pointer
)	O
{	O
error_t	int
err	int
;	O
struct	O
hurd_slab	struct
*	O
new_slab	pointer
;	O
union	O
hurd_bufctl	union
*	O
bufctl	pointer
;	O
int	O
nr_objs	int
,	O
i	int
;	O
void	O
*	O
p	pointer
;	O
if	O
(	O
!	O
space	pointer
->	O
initialized	bool
)	O
init_space	function
(	O
space	pointer
)	O
;	O
err	int
=	O
allocate_buffer	pointer
(	O
space	pointer
,	O
space	pointer
->	O
slab_size	long
,	O
&	O
p	pointer
)	O
;	O
if	O
(	O
err	int
)	O
return	O
err	int
;	O
__hurd_slab_nr_pages	int
++	O
;	O
new_slab	pointer
=	O
(	O
p	pointer
+	O
space	pointer
->	O
slab_size	long
-	O
sizeof	O
(	O
struct	O
hurd_slab	struct
)	O
)	O
;	O
memset	function
(	O
new_slab	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
new_slab	pointer
)	O
)	O
;	O
nr_objs	int
=	O
(	O
(	O
space	pointer
->	O
slab_size	long
-	O
sizeof	O
(	O
struct	O
hurd_slab	struct
)	O
)	O
/	O
space	pointer
->	O
size	long
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nr_objs	int
;	O
i	int
++	O
,	O
p	pointer
+=	O
space	pointer
->	O
size	long
)	O
{	O
if	O
(	O
space	pointer
->	O
constructor	pointer
)	O
{	O
error_t	int
err	int
=	O
(	O
*	O
space	pointer
->	O
constructor	pointer
)	O
(	O
space	pointer
->	O
hook	pointer
,	O
p	pointer
)	O
;	O
if	O
(	O
err	int
)	O
{	O
for	O
(	O
bufctl	pointer
=	O
new_slab	pointer
->	O
free_list	pointer
;	O
bufctl	pointer
;	O
bufctl	pointer
=	O
bufctl	pointer
->	O
next	pointer
)	O
{	O
void	O
*	O
buffer	pointer
=	O
(	O
(	O
(	O
void	O
*	O
)	O
bufctl	pointer
)	O
-	O
(	O
space	pointer
->	O
size	long
-	O
sizeof	O
*	O
bufctl	pointer
)	O
)	O
;	O
(	O
*	O
space	pointer
->	O
destructor	pointer
)	O
(	O
space	pointer
->	O
hook	pointer
,	O
buffer	pointer
)	O
;	O
}	O
deallocate_buffer	pointer
(	O
space	pointer
,	O
p	pointer
,	O
space	pointer
->	O
slab_size	long
)	O
;	O
return	O
err	int
;	O
}	O
}	O
bufctl	pointer
=	O
(	O
p	pointer
+	O
space	pointer
->	O
size	long
-	O
sizeof	O
*	O
bufctl	pointer
)	O
;	O
bufctl	pointer
->	O
next	pointer
=	O
new_slab	pointer
->	O
free_list	pointer
;	O
new_slab	pointer
->	O
free_list	pointer
=	O
bufctl	pointer
;	O
}	O
insert_slab	function
(	O
space	pointer
,	O
new_slab	pointer
)	O
;	O
space	pointer
->	O
first_free	pointer
=	O
new_slab	pointer
;	O
return	O
0	int
;	O
}	O
error_t	int
hurd_slab_init	function
(	O
hurd_slab_space_t	pointer
space	pointer
,	O
size_t	long
size	long
,	O
size_t	long
alignment	long
,	O
hurd_slab_allocate_buffer_t	pointer
allocate_buffer	pointer
,	O
hurd_slab_deallocate_buffer_t	pointer
deallocate_buffer	pointer
,	O
hurd_slab_constructor_t	pointer
constructor	pointer
,	O
hurd_slab_destructor_t	pointer
destructor	pointer
,	O
void	O
*	O
hook	pointer
)	O
{	O
error_t	int
err	int
;	O
memset	function
(	O
space	pointer
,	O
0	int
,	O
sizeof	O
(	O
struct	O
hurd_slab_space	struct
)	O
)	O
;	O
if	O
(	O
!	O
alignment	long
)	O
alignment	long
=	O
__alignof__	O
(	O
void	O
*	O
)	O
;	O
space	pointer
->	O
requested_size	long
=	O
size	long
;	O
space	pointer
->	O
requested_align	long
=	O
alignment	long
;	O
space	pointer
->	O
slab_size	long
=	O
getpagesize	function
(	O
)	O
*	O
SLAB_PAGES	int
;	O
size	long
=	O
size	long
+	O
sizeof	O
(	O
union	O
hurd_bufctl	union
)	O
;	O
size	long
=	O
(	O
size	long
+	O
alignment	long
-	O
1	int
)	O
&	O
~	O
(	O
alignment	long
-	O
1	int
)	O
;	O
if	O
(	O
size	long
>	O
(	O
space	pointer
->	O
slab_size	long
-	O
sizeof	O
(	O
struct	O
hurd_slab	struct
)	O
-	O
sizeof	O
(	O
union	O
hurd_bufctl	union
)	O
)	O
)	O
return	O
EINVAL	int
;	O
err	int
=	O
pthread_mutex_init	function
(	O
&	O
space	pointer
->	O
lock	union
,	O
NULL	O
)	O
;	O
if	O
(	O
err	int
)	O
return	O
err	int
;	O
space	pointer
->	O
allocate_buffer	pointer
=	O
allocate_buffer	pointer
;	O
space	pointer
->	O
deallocate_buffer	pointer
=	O
deallocate_buffer	pointer
;	O
space	pointer
->	O
constructor	pointer
=	O
constructor	pointer
;	O
space	pointer
->	O
destructor	pointer
=	O
destructor	pointer
;	O
space	pointer
->	O
hook	pointer
=	O
hook	pointer
;	O
return	O
0	int
;	O
}	O
error_t	int
hurd_slab_create	function
(	O
size_t	long
size	long
,	O
size_t	long
alignment	long
,	O
hurd_slab_allocate_buffer_t	pointer
allocate_buffer	pointer
,	O
hurd_slab_deallocate_buffer_t	pointer
deallocate_buffer	pointer
,	O
hurd_slab_constructor_t	pointer
constructor	pointer
,	O
hurd_slab_destructor_t	pointer
destructor	pointer
,	O
void	O
*	O
hook	pointer
,	O
hurd_slab_space_t	pointer
*	O
r_space	pointer
)	O
{	O
hurd_slab_space_t	pointer
space	pointer
;	O
error_t	int
err	int
;	O
space	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
hurd_slab_space	struct
)	O
)	O
;	O
if	O
(	O
!	O
space	pointer
)	O
return	O
ENOMEM	int
;	O
err	int
=	O
hurd_slab_init	function
(	O
space	pointer
,	O
size	long
,	O
alignment	long
,	O
allocate_buffer	pointer
,	O
deallocate_buffer	pointer
,	O
constructor	pointer
,	O
destructor	pointer
,	O
hook	pointer
)	O
;	O
if	O
(	O
err	int
)	O
{	O
free	function
(	O
space	pointer
)	O
;	O
return	O
err	int
;	O
}	O
*	O
r_space	pointer
=	O
space	pointer
;	O
return	O
0	int
;	O
}	O
error_t	int
hurd_slab_destroy	function
(	O
hurd_slab_space_t	pointer
space	pointer
)	O
{	O
error_t	int
err	int
;	O
pthread_mutex_lock	function
(	O
&	O
space	pointer
->	O
lock	union
)	O
;	O
err	int
=	O
reap	function
(	O
space	pointer
)	O
;	O
if	O
(	O
err	int
)	O
{	O
pthread_mutex_unlock	function
(	O
&	O
space	pointer
->	O
lock	union
)	O
;	O
return	O
err	int
;	O
}	O
if	O
(	O
space	pointer
->	O
slab_first	pointer
)	O
{	O
pthread_mutex_unlock	function
(	O
&	O
space	pointer
->	O
lock	union
)	O
;	O
return	O
EBUSY	int
;	O
}	O
return	O
0	int
;	O
}	O
error_t	int
hurd_slab_free	function
(	O
hurd_slab_space_t	pointer
space	pointer
)	O
{	O
error_t	int
err	int
=	O
hurd_slab_destroy	function
(	O
space	pointer
)	O
;	O
if	O
(	O
err	int
)	O
return	O
err	int
;	O
free	function
(	O
space	pointer
)	O
;	O
return	O
0	int
;	O
}	O
error_t	int
hurd_slab_alloc	function
(	O
hurd_slab_space_t	pointer
space	pointer
,	O
void	O
*	O
*	O
buffer	pointer
)	O
{	O
error_t	int
err	int
;	O
union	O
hurd_bufctl	union
*	O
bufctl	pointer
;	O
pthread_mutex_lock	function
(	O
&	O
space	pointer
->	O
lock	union
)	O
;	O
if	O
(	O
!	O
space	pointer
->	O
first_free	pointer
)	O
{	O
err	int
=	O
grow	function
(	O
space	pointer
)	O
;	O
if	O
(	O
err	int
)	O
{	O
pthread_mutex_unlock	function
(	O
&	O
space	pointer
->	O
lock	union
)	O
;	O
return	O
err	int
;	O
}	O
}	O
bufctl	pointer
=	O
space	pointer
->	O
first_free	pointer
->	O
free_list	pointer
;	O
space	pointer
->	O
first_free	pointer
->	O
free_list	pointer
=	O
bufctl	pointer
->	O
next	pointer
;	O
space	pointer
->	O
first_free	pointer
->	O
refcount	int
++	O
;	O
bufctl	pointer
->	O
slab	pointer
=	O
space	pointer
->	O
first_free	pointer
;	O
if	O
(	O
space	pointer
->	O
first_free	pointer
->	O
refcount	int
==	O
space	pointer
->	O
full_refcount	int
)	O
{	O
struct	O
hurd_slab	struct
*	O
new_first	pointer
=	O
space	pointer
->	O
slab_first	pointer
;	O
while	O
(	O
new_first	pointer
)	O
{	O
if	O
(	O
new_first	pointer
->	O
refcount	int
!=	O
space	pointer
->	O
full_refcount	int
)	O
break	O
;	O
new_first	pointer
=	O
new_first	pointer
->	O
next	pointer
;	O
}	O
space	pointer
->	O
first_free	pointer
=	O
new_first	pointer
;	O
}	O
*	O
buffer	pointer
=	O
(	O
(	O
void	O
*	O
)	O
bufctl	pointer
)	O
-	O
(	O
space	pointer
->	O
size	long
-	O
sizeof	O
*	O
bufctl	pointer
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
space	pointer
->	O
lock	union
)	O
;	O
return	O
0	int
;	O
}	O
static	O
inline	O
void	O
put_on_slab_list	function
(	O
struct	O
hurd_slab	struct
*	O
slab	pointer
,	O
union	O
hurd_bufctl	union
*	O
bufctl	pointer
)	O
{	O
bufctl	pointer
->	O
next	pointer
=	O
slab	pointer
->	O
free_list	pointer
;	O
slab	pointer
->	O
free_list	pointer
=	O
bufctl	pointer
;	O
slab	pointer
->	O
refcount	int
--	O
;	O
assert	O
(	O
slab	pointer
->	O
refcount	int
>=	O
0	int
)	O
;	O
}	O
void	O
hurd_slab_dealloc	function
(	O
hurd_slab_space_t	pointer
space	pointer
,	O
void	O
*	O
buffer	pointer
)	O
{	O
struct	O
hurd_slab	struct
*	O
slab	pointer
;	O
union	O
hurd_bufctl	union
*	O
bufctl	pointer
;	O
assert	O
(	O
space	pointer
->	O
initialized	bool
)	O
;	O
pthread_mutex_lock	function
(	O
&	O
space	pointer
->	O
lock	union
)	O
;	O
bufctl	pointer
=	O
(	O
buffer	pointer
+	O
(	O
space	pointer
->	O
size	long
-	O
sizeof	O
*	O
bufctl	pointer
)	O
)	O
;	O
put_on_slab_list	function
(	O
slab	pointer
=	O
bufctl	pointer
->	O
slab	pointer
,	O
bufctl	pointer
)	O
;	O
if	O
(	O
!	O
space	pointer
->	O
first_free	pointer
||	O
slab	pointer
->	O
refcount	int
<	O
space	pointer
->	O
first_free	pointer
->	O
refcount	int
)	O
space	pointer
->	O
first_free	pointer
=	O
slab	pointer
;	O
pthread_mutex_unlock	function
(	O
&	O
space	pointer
->	O
lock	union
)	O
;	O
}	O
