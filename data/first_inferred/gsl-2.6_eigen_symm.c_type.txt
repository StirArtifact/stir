gsl_eigen_symm_workspace	struct
*	O
gsl_eigen_symm_alloc	function
(	O
const	O
size_t	long
n	int
)	O
{	O
gsl_eigen_symm_workspace	struct
*	O
w	pointer
;	O
if	O
(	O
n	int
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"matrix dimension must be positive integer"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
w	pointer
=	O
(	O
(	O
gsl_eigen_symm_workspace	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
gsl_eigen_symm_workspace	struct
)	O
)	O
)	O
;	O
if	O
(	O
w	pointer
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workspace"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
w	pointer
->	O
d	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
n	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
w	pointer
->	O
d	pointer
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for diagonal"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
w	pointer
->	O
sd	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
n	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
w	pointer
->	O
sd	pointer
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for subdiagonal"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
w	pointer
->	O
size	long
=	O
n	int
;	O
return	O
w	pointer
;	O
}	O
void	O
gsl_eigen_symm_free	function
(	O
gsl_eigen_symm_workspace	struct
*	O
w	pointer
)	O
{	O
RETURN_IF_NULL	O
(	O
w	pointer
)	O
;	O
free	function
(	O
w	pointer
->	O
sd	pointer
)	O
;	O
free	function
(	O
w	pointer
->	O
d	pointer
)	O
;	O
free	function
(	O
w	pointer
)	O
;	O
}	O
int	O
gsl_eigen_symm	function
(	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_vector	struct
*	O
eval	pointer
,	O
gsl_eigen_symm_workspace	struct
*	O
w	pointer
)	O
{	O
if	O
(	O
A	pointer
->	O
size1	long
!=	O
A	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square to compute eigenvalues"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
eval	pointer
->	O
size	long
!=	O
A	pointer
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"eigenvalue vector must match matrix size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
A	pointer
->	O
size1	long
!=	O
w	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix does not match workspace"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size1	long
;	O
double	O
*	O
const	O
d	pointer
=	O
w	pointer
->	O
d	pointer
;	O
double	O
*	O
const	O
sd	pointer
=	O
w	pointer
->	O
sd	pointer
;	O
size_t	long
a	double
,	O
b	double
;	O
if	O
(	O
N	int
==	O
1	int
)	O
{	O
double	O
A00	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
0	int
,	O
0	int
)	O
;	O
gsl_vector_set	function
(	O
eval	pointer
,	O
0	int
,	O
A00	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
{	O
gsl_vector_view	struct
d_vec	struct
=	O
gsl_vector_view_array	function
(	O
d	pointer
,	O
N	int
)	O
;	O
gsl_vector_view	struct
sd_vec	struct
=	O
gsl_vector_view_array	function
(	O
sd	pointer
,	O
N	int
-	O
1	int
)	O
;	O
gsl_vector_view	struct
tau	double
=	O
gsl_vector_view_array	function
(	O
sd	pointer
,	O
N	int
-	O
1	int
)	O
;	O
gsl_linalg_symmtd_decomp	function
(	O
A	pointer
,	O
&	O
tau	double
.	O
vector	struct
)	O
;	O
gsl_linalg_symmtd_unpack_T	function
(	O
A	pointer
,	O
&	O
d_vec	struct
.	O
vector	struct
,	O
&	O
sd_vec	struct
.	O
vector	struct
)	O
;	O
}	O
chop_small_elements	function
(	O
N	int
,	O
d	pointer
,	O
sd	pointer
)	O
;	O
b	double
=	O
N	int
-	O
1	int
;	O
while	O
(	O
b	double
>	O
0	int
)	O
{	O
if	O
(	O
sd	pointer
[	O
b	double
-	O
1	int
]	O
==	O
0.0	int
||	O
isnan	function
(	O
sd	pointer
[	O
b	double
-	O
1	int
]	O
)	O
)	O
{	O
b	double
--	O
;	O
continue	O
;	O
}	O
a	double
=	O
b	double
-	O
1	int
;	O
while	O
(	O
a	double
>	O
0	int
)	O
{	O
if	O
(	O
sd	pointer
[	O
a	double
-	O
1	int
]	O
==	O
0.0	int
)	O
{	O
break	O
;	O
}	O
a	double
--	O
;	O
}	O
{	O
const	O
size_t	long
n_block	long
=	O
b	double
-	O
a	double
+	O
1	int
;	O
double	O
*	O
d_block	pointer
=	O
d	pointer
+	O
a	double
;	O
double	O
*	O
sd_block	pointer
=	O
sd	pointer
+	O
a	double
;	O
qrstep	function
(	O
n_block	long
,	O
d_block	pointer
,	O
sd_block	pointer
,	O
NULL	O
,	O
NULL	O
)	O
;	O
chop_small_elements	function
(	O
n_block	long
,	O
d_block	pointer
,	O
sd_block	pointer
)	O
;	O
}	O
}	O
{	O
gsl_vector_view	struct
d_vec	struct
=	O
gsl_vector_view_array	function
(	O
d	pointer
,	O
N	int
)	O
;	O
gsl_vector_memcpy	function
(	O
eval	pointer
,	O
&	O
d_vec	struct
.	O
vector	struct
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
