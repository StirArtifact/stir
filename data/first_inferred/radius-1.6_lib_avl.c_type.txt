grad_avp_t	struct
*	O
grad_avp_alloc	function
(	O
)	O
{	O
return	O
grad_emalloc	function
(	O
sizeof	O
(	O
grad_avp_t	struct
)	O
)	O
;	O
}	O
void	O
grad_avp_free	function
(	O
grad_avp_t	struct
*	O
p	pointer
)	O
{	O
if	O
(	O
!	O
p	pointer
)	O
return	O
;	O
if	O
(	O
p	pointer
->	O
type	enum
==	O
GRAD_TYPE_STRING	int
||	O
p	pointer
->	O
eval_type	enum
!=	O
grad_eval_const	int
)	O
grad_free	function
(	O
p	pointer
->	O
avp_strvalue	O
)	O
;	O
grad_free	function
(	O
p	pointer
)	O
;	O
}	O
grad_avp_t	struct
*	O
grad_avp_dup	function
(	O
grad_avp_t	struct
*	O
vp	pointer
)	O
{	O
grad_avp_t	struct
*	O
ret	pointer
=	O
grad_avp_alloc	function
(	O
)	O
;	O
memcpy	function
(	O
ret	pointer
,	O
vp	pointer
,	O
sizeof	O
(	O
grad_avp_t	struct
)	O
)	O
;	O
ret	pointer
->	O
next	pointer
=	O
NULL	O
;	O
if	O
(	O
ret	pointer
->	O
type	enum
==	O
GRAD_TYPE_STRING	int
||	O
ret	pointer
->	O
eval_type	enum
!=	O
grad_eval_const	int
)	O
{	O
ret	pointer
->	O
avp_strlength	O
=	O
vp	pointer
->	O
avp_strlength	O
;	O
ret	pointer
->	O
avp_strvalue	O
=	O
grad_emalloc	function
(	O
ret	pointer
->	O
avp_strlength	O
+	O
1	int
)	O
;	O
memcpy	function
(	O
ret	pointer
->	O
avp_strvalue	O
,	O
vp	pointer
->	O
avp_strvalue	O
,	O
ret	pointer
->	O
avp_strlength	O
)	O
;	O
ret	pointer
->	O
avp_strvalue	O
[	O
ret	pointer
->	O
avp_strlength	O
]	O
=	O
0	int
;	O
}	O
return	O
ret	pointer
;	O
}	O
grad_avp_t	struct
*	O
grad_avp_create	function
(	O
int	O
attr	pointer
)	O
{	O
grad_avp_t	struct
*	O
pair	pointer
;	O
grad_dict_attr_t	struct
*	O
dict	pointer
;	O
dict	pointer
=	O
grad_attr_number_to_dict	function
(	O
attr	pointer
)	O
;	O
if	O
(	O
!	O
dict	pointer
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"make_pair(): attribute %d not found in dictionary"	pointer
)	O
,	O
attr	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
pair	pointer
=	O
grad_avp_alloc	function
(	O
)	O
;	O
pair	pointer
->	O
name	pointer
=	O
dict	pointer
->	O
name	pointer
;	O
pair	pointer
->	O
attribute	int
=	O
attr	pointer
;	O
pair	pointer
->	O
type	enum
=	O
dict	pointer
->	O
type	enum
;	O
pair	pointer
->	O
prop	int
=	O
dict	pointer
->	O
prop	int
;	O
return	O
pair	pointer
;	O
}	O
grad_avp_t	struct
*	O
grad_avp_create_integer	function
(	O
int	O
attr	pointer
,	O
grad_uint32_t	int
value	pointer
)	O
{	O
grad_avp_t	struct
*	O
pair	pointer
=	O
grad_avp_create	function
(	O
attr	pointer
)	O
;	O
if	O
(	O
pair	pointer
)	O
pair	pointer
->	O
avp_lvalue	O
=	O
value	pointer
;	O
return	O
pair	pointer
;	O
}	O
grad_avp_t	struct
*	O
grad_avp_create_string	function
(	O
int	O
attr	pointer
,	O
char	O
*	O
value	pointer
)	O
{	O
grad_avp_t	struct
*	O
pair	pointer
=	O
grad_avp_create	function
(	O
attr	pointer
)	O
;	O
if	O
(	O
pair	pointer
)	O
{	O
pair	pointer
->	O
avp_strvalue	O
=	O
grad_estrdup	function
(	O
value	pointer
)	O
;	O
pair	pointer
->	O
avp_strlength	O
=	O
strlen	function
(	O
value	pointer
)	O
;	O
}	O
return	O
pair	pointer
;	O
}	O
grad_avp_t	struct
*	O
grad_avp_create_binary	function
(	O
int	O
attr	pointer
,	O
int	O
length	short
,	O
u_char	char
*	O
value	pointer
)	O
{	O
grad_avp_t	struct
*	O
pair	pointer
=	O
grad_avp_create	function
(	O
attr	pointer
)	O
;	O
if	O
(	O
pair	pointer
)	O
{	O
pair	pointer
->	O
avp_strlength	O
=	O
length	short
;	O
pair	pointer
->	O
avp_strvalue	O
=	O
grad_emalloc	function
(	O
length	short
+	O
1	int
)	O
;	O
memcpy	function
(	O
pair	pointer
->	O
avp_strvalue	O
,	O
value	pointer
,	O
length	short
)	O
;	O
pair	pointer
->	O
avp_strvalue	O
[	O
length	short
]	O
=	O
0	int
;	O
}	O
return	O
pair	pointer
;	O
}	O
grad_avp_t	struct
*	O
grad_avp_move	function
(	O
grad_avp_t	struct
*	O
*	O
first	pointer
,	O
grad_avp_t	struct
*	O
new	pointer
)	O
{	O
grad_avp_t	struct
*	O
pair	pointer
,	O
*	O
prev	pointer
=	O
NULL	O
;	O
if	O
(	O
*	O
first	pointer
==	O
NULL	O
)	O
{	O
new	pointer
->	O
next	pointer
=	O
NULL	O
;	O
*	O
first	pointer
=	O
new	pointer
;	O
return	O
0	int
;	O
}	O
switch	O
(	O
GRAD_GET_ADDITIVITY	O
(	O
new	pointer
->	O
prop	int
)	O
)	O
{	O
case	O
GRAD_AP_ADD_NONE	int
:	O
for	O
(	O
pair	pointer
=	O
*	O
first	pointer
;	O
pair	pointer
;	O
prev	pointer
=	O
pair	pointer
,	O
pair	pointer
=	O
pair	pointer
->	O
next	pointer
)	O
if	O
(	O
pair	pointer
->	O
attribute	int
==	O
new	pointer
->	O
attribute	int
)	O
return	O
new	pointer
;	O
prev	pointer
->	O
next	pointer
=	O
new	pointer
;	O
new	pointer
->	O
next	pointer
=	O
NULL	O
;	O
return	O
NULL	O
;	O
case	O
GRAD_AP_ADD_REPLACE	int
:	O
if	O
(	O
(	O
*	O
first	pointer
)	O
->	O
attribute	int
==	O
new	pointer
->	O
attribute	int
)	O
{	O
prev	pointer
=	O
*	O
first	pointer
;	O
new	pointer
->	O
next	pointer
=	O
prev	pointer
->	O
next	pointer
;	O
*	O
first	pointer
=	O
new	pointer
;	O
grad_avp_free	function
(	O
prev	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
for	O
(	O
pair	pointer
=	O
*	O
first	pointer
;	O
pair	pointer
;	O
prev	pointer
=	O
pair	pointer
,	O
pair	pointer
=	O
pair	pointer
->	O
next	pointer
)	O
if	O
(	O
pair	pointer
->	O
attribute	int
==	O
new	pointer
->	O
attribute	int
)	O
{	O
new	pointer
->	O
next	pointer
=	O
pair	pointer
->	O
next	pointer
;	O
prev	pointer
->	O
next	pointer
=	O
new	pointer
;	O
grad_avp_free	function
(	O
pair	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
new	pointer
->	O
next	pointer
=	O
NULL	O
;	O
prev	pointer
->	O
next	pointer
=	O
new	pointer
;	O
return	O
NULL	O
;	O
case	O
GRAD_AP_ADD_APPEND	int
:	O
for	O
(	O
pair	pointer
=	O
*	O
first	pointer
;	O
pair	pointer
->	O
next	pointer
;	O
pair	pointer
=	O
pair	pointer
->	O
next	pointer
)	O
;	O
new	pointer
->	O
next	pointer
=	O
NULL	O
;	O
pair	pointer
->	O
next	pointer
=	O
new	pointer
;	O
return	O
NULL	O
;	O
}	O
return	O
new	pointer
;	O
}	O
int	O
grad_avp_cmp	function
(	O
grad_avp_t	struct
*	O
a	pointer
,	O
grad_avp_t	struct
*	O
b	pointer
)	O
{	O
int	O
rc	int
=	O
1	int
;	O
if	O
(	O
a	pointer
->	O
attribute	int
!=	O
b	pointer
->	O
attribute	int
||	O
a	pointer
->	O
type	enum
!=	O
b	pointer
->	O
type	enum
)	O
return	O
1	int
;	O
switch	O
(	O
a	pointer
->	O
type	enum
)	O
{	O
case	O
GRAD_TYPE_STRING	int
:	O
if	O
(	O
a	pointer
->	O
avp_strlength	O
!=	O
b	pointer
->	O
avp_strlength	O
)	O
rc	int
=	O
1	int
;	O
else	O
rc	int
=	O
memcmp	function
(	O
a	pointer
->	O
avp_strvalue	O
,	O
b	pointer
->	O
avp_strvalue	O
,	O
a	pointer
->	O
avp_strlength	O
)	O
;	O
break	O
;	O
case	O
GRAD_TYPE_INTEGER	int
:	O
case	O
GRAD_TYPE_IPADDR	int
:	O
rc	int
=	O
a	pointer
->	O
avp_lvalue	O
!=	O
b	pointer
->	O
avp_lvalue	O
;	O
break	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
grad_avp_null_string_p	function
(	O
grad_avp_t	struct
*	O
pair	pointer
)	O
{	O
if	O
(	O
!	O
pair	pointer
)	O
return	O
1	int
;	O
if	O
(	O
pair	pointer
->	O
type	enum
!=	O
GRAD_TYPE_STRING	int
)	O
return	O
1	int
;	O
return	O
strlen	function
(	O
pair	pointer
->	O
avp_strvalue	O
)	O
==	O
0	int
;	O
}	O
void	O
grad_avl_free	function
(	O
grad_avp_t	struct
*	O
pair	pointer
)	O
{	O
grad_avp_t	struct
*	O
next	pointer
;	O
while	O
(	O
pair	pointer
!=	O
NULL	O
)	O
{	O
next	pointer
=	O
pair	pointer
->	O
next	pointer
;	O
grad_avp_free	function
(	O
pair	pointer
)	O
;	O
pair	pointer
=	O
next	pointer
;	O
}	O
}	O
grad_avp_t	struct
*	O
grad_avl_find	function
(	O
grad_avp_t	struct
*	O
first	pointer
,	O
int	O
attr	pointer
)	O
{	O
while	O
(	O
first	pointer
&&	O
first	pointer
->	O
attribute	int
!=	O
attr	pointer
)	O
first	pointer
=	O
first	pointer
->	O
next	pointer
;	O
return	O
first	pointer
;	O
}	O
grad_avp_t	struct
*	O
grad_avl_find_n	function
(	O
grad_avp_t	struct
*	O
first	pointer
,	O
int	O
attr	pointer
,	O
int	O
n	long
)	O
{	O
for	O
(	O
;	O
first	pointer
;	O
first	pointer
=	O
first	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
first	pointer
->	O
attribute	int
==	O
attr	pointer
&&	O
n	long
--	O
==	O
0	int
)	O
break	O
;	O
}	O
return	O
first	pointer
;	O
}	O
void	O
grad_avl_delete	function
(	O
grad_avp_t	struct
*	O
*	O
first	pointer
,	O
int	O
attr	pointer
)	O
{	O
grad_avp_t	struct
*	O
pair	pointer
,	O
*	O
next	pointer
,	O
*	O
last	pointer
=	O
NULL	O
;	O
for	O
(	O
pair	pointer
=	O
*	O
first	pointer
;	O
pair	pointer
;	O
pair	pointer
=	O
next	pointer
)	O
{	O
next	pointer
=	O
pair	pointer
->	O
next	pointer
;	O
if	O
(	O
pair	pointer
->	O
attribute	int
==	O
attr	pointer
)	O
{	O
if	O
(	O
last	pointer
)	O
last	pointer
->	O
next	pointer
=	O
next	pointer
;	O
else	O
*	O
first	pointer
=	O
next	pointer
;	O
grad_avp_free	function
(	O
pair	pointer
)	O
;	O
}	O
else	O
last	pointer
=	O
pair	pointer
;	O
}	O
}	O
void	O
grad_avl_delete_n	function
(	O
grad_avp_t	struct
*	O
*	O
first	pointer
,	O
int	O
attr	pointer
,	O
int	O
n	long
)	O
{	O
grad_avp_t	struct
*	O
pair	pointer
,	O
*	O
next	pointer
,	O
*	O
last	pointer
=	O
NULL	O
;	O
for	O
(	O
pair	pointer
=	O
*	O
first	pointer
;	O
pair	pointer
;	O
pair	pointer
=	O
next	pointer
)	O
{	O
next	pointer
=	O
pair	pointer
->	O
next	pointer
;	O
if	O
(	O
pair	pointer
->	O
attribute	int
==	O
attr	pointer
&&	O
n	long
--	O
==	O
0	int
)	O
{	O
if	O
(	O
last	pointer
)	O
last	pointer
->	O
next	pointer
=	O
next	pointer
;	O
else	O
*	O
first	pointer
=	O
next	pointer
;	O
grad_avp_free	function
(	O
pair	pointer
)	O
;	O
break	O
;	O
}	O
else	O
last	pointer
=	O
pair	pointer
;	O
}	O
}	O
void	O
grad_avl_move_pairs	function
(	O
grad_avp_t	struct
*	O
*	O
to	pointer
,	O
grad_avp_t	struct
*	O
*	O
from	pointer
,	O
int	O
(	O
*	O
fun	pointer
)	O
(	O
void	O
*	O
,	O
grad_avp_t	struct
*	O
)	O
,	O
void	O
*	O
closure	pointer
)	O
{	O
grad_avp_t	struct
*	O
to_tail	pointer
,	O
*	O
i	pointer
,	O
*	O
next	pointer
;	O
grad_avp_t	struct
*	O
iprev	pointer
=	O
NULL	O
;	O
if	O
(	O
*	O
to	pointer
!=	O
NULL	O
)	O
{	O
to_tail	pointer
=	O
*	O
to	pointer
;	O
for	O
(	O
i	pointer
=	O
*	O
to	pointer
;	O
i	pointer
;	O
i	pointer
=	O
i	pointer
->	O
next	pointer
)	O
to_tail	pointer
=	O
i	pointer
;	O
}	O
else	O
to_tail	pointer
=	O
NULL	O
;	O
for	O
(	O
i	pointer
=	O
*	O
from	pointer
;	O
i	pointer
;	O
i	pointer
=	O
next	pointer
)	O
{	O
next	pointer
=	O
i	pointer
->	O
next	pointer
;	O
if	O
(	O
(	O
*	O
fun	pointer
)	O
(	O
closure	pointer
,	O
i	pointer
)	O
==	O
0	int
)	O
{	O
iprev	pointer
=	O
i	pointer
;	O
continue	O
;	O
}	O
if	O
(	O
iprev	pointer
)	O
iprev	pointer
->	O
next	pointer
=	O
next	pointer
;	O
else	O
*	O
from	pointer
=	O
next	pointer
;	O
if	O
(	O
to_tail	pointer
)	O
to_tail	pointer
->	O
next	pointer
=	O
i	pointer
;	O
else	O
*	O
to	pointer
=	O
i	pointer
;	O
to_tail	pointer
=	O
i	pointer
;	O
i	pointer
->	O
next	pointer
=	O
NULL	O
;	O
}	O
}	O
static	O
int	O
cmp_attr	function
(	O
void	O
*	O
data	pointer
,	O
grad_avp_t	struct
*	O
pair	pointer
)	O
{	O
int	O
*	O
valp	pointer
=	O
data	pointer
;	O
return	O
*	O
valp	pointer
==	O
pair	pointer
->	O
attribute	int
;	O
}	O
void	O
grad_avl_move_attr	function
(	O
grad_avp_t	struct
*	O
*	O
to	pointer
,	O
grad_avp_t	struct
*	O
*	O
from	pointer
,	O
int	O
attr	pointer
)	O
{	O
grad_avl_move_pairs	function
(	O
to	pointer
,	O
from	pointer
,	O
cmp_attr	function
,	O
&	O
attr	pointer
)	O
;	O
}	O
void	O
grad_avl_merge	function
(	O
grad_avp_t	struct
*	O
*	O
dst_ptr	pointer
,	O
grad_avp_t	struct
*	O
*	O
src_ptr	pointer
)	O
{	O
grad_avp_t	struct
*	O
src	pointer
,	O
*	O
next	pointer
,	O
*	O
src_head	pointer
,	O
*	O
src_tail	pointer
;	O
if	O
(	O
*	O
dst_ptr	pointer
==	O
NULL	O
)	O
{	O
*	O
dst_ptr	pointer
=	O
*	O
src_ptr	pointer
;	O
*	O
src_ptr	pointer
=	O
NULL	O
;	O
return	O
;	O
}	O
src_head	pointer
=	O
src_tail	pointer
=	O
NULL	O
;	O
src	pointer
=	O
*	O
src_ptr	pointer
;	O
while	O
(	O
src	pointer
)	O
{	O
next	pointer
=	O
src	pointer
->	O
next	pointer
;	O
src	pointer
=	O
grad_avp_move	function
(	O
dst_ptr	pointer
,	O
src	pointer
)	O
;	O
if	O
(	O
src	pointer
)	O
{	O
if	O
(	O
src_tail	pointer
)	O
src_tail	pointer
->	O
next	pointer
=	O
src	pointer
;	O
else	O
src_head	pointer
=	O
src	pointer
;	O
src_tail	pointer
=	O
src	pointer
;	O
}	O
src	pointer
=	O
next	pointer
;	O
}	O
*	O
src_ptr	pointer
=	O
src_head	pointer
;	O
}	O
void	O
grad_avl_add_list	function
(	O
grad_avp_t	struct
*	O
*	O
first	pointer
,	O
grad_avp_t	struct
*	O
new	pointer
)	O
{	O
grad_avp_t	struct
*	O
pair	pointer
;	O
if	O
(	O
*	O
first	pointer
==	O
NULL	O
)	O
{	O
*	O
first	pointer
=	O
new	pointer
;	O
return	O
;	O
}	O
for	O
(	O
pair	pointer
=	O
*	O
first	pointer
;	O
pair	pointer
->	O
next	pointer
;	O
pair	pointer
=	O
pair	pointer
->	O
next	pointer
)	O
;	O
pair	pointer
->	O
next	pointer
=	O
new	pointer
;	O
}	O
void	O
grad_avl_add_pair	function
(	O
grad_avp_t	struct
*	O
*	O
first	pointer
,	O
grad_avp_t	struct
*	O
new	pointer
)	O
{	O
if	O
(	O
!	O
new	pointer
)	O
return	O
;	O
new	pointer
->	O
next	pointer
=	O
NULL	O
;	O
grad_avl_add_list	function
(	O
first	pointer
,	O
new	pointer
)	O
;	O
}	O
grad_avp_t	struct
*	O
grad_avl_dup	function
(	O
grad_avp_t	struct
*	O
from	pointer
)	O
{	O
grad_avp_t	struct
*	O
first	pointer
=	O
NULL	O
;	O
grad_avp_t	struct
*	O
last	pointer
=	O
NULL	O
;	O
grad_avp_t	struct
*	O
temp	pointer
;	O
for	O
(	O
;	O
from	pointer
;	O
from	pointer
=	O
from	pointer
->	O
next	pointer
)	O
{	O
temp	pointer
=	O
grad_avp_alloc	function
(	O
)	O
;	O
memcpy	function
(	O
temp	pointer
,	O
from	pointer
,	O
sizeof	O
(	O
grad_avp_t	struct
)	O
)	O
;	O
if	O
(	O
temp	pointer
->	O
type	enum
==	O
GRAD_TYPE_STRING	int
||	O
temp	pointer
->	O
eval_type	enum
!=	O
grad_eval_const	int
)	O
{	O
char	O
*	O
p	pointer
=	O
grad_emalloc	function
(	O
temp	pointer
->	O
avp_strlength	O
+	O
1	int
)	O
;	O
memcpy	function
(	O
p	pointer
,	O
temp	pointer
->	O
avp_strvalue	O
,	O
temp	pointer
->	O
avp_strlength	O
)	O
;	O
p	pointer
[	O
temp	pointer
->	O
avp_strlength	O
]	O
=	O
0	int
;	O
temp	pointer
->	O
avp_strvalue	O
=	O
p	pointer
;	O
}	O
temp	pointer
->	O
next	pointer
=	O
NULL	O
;	O
if	O
(	O
last	pointer
)	O
last	pointer
->	O
next	pointer
=	O
temp	pointer
;	O
else	O
first	pointer
=	O
temp	pointer
;	O
last	pointer
=	O
temp	pointer
;	O
}	O
return	O
first	pointer
;	O
}	O
void	O
grad_avl_fprint	function
(	O
FILE	struct
*	O
fp	pointer
,	O
char	O
*	O
prefix	pointer
,	O
int	O
typeflag	int
,	O
grad_avp_t	struct
*	O
avl	pointer
)	O
{	O
char	O
*	O
save	pointer
;	O
if	O
(	O
!	O
prefix	pointer
)	O
prefix	pointer
=	O
""	pointer
;	O
for	O
(	O
;	O
avl	pointer
;	O
avl	pointer
=	O
avl	pointer
->	O
next	pointer
)	O
{	O
fprintf	function
(	O
fp	pointer
,	O
"%s%s\n"	pointer
,	O
prefix	pointer
,	O
grad_format_pair	function
(	O
avl	pointer
,	O
typeflag	int
,	O
&	O
save	pointer
)	O
)	O
;	O
free	function
(	O
save	pointer
)	O
;	O
}	O
}	O
int	O
grad_avl_cmp	function
(	O
grad_avp_t	struct
*	O
a	pointer
,	O
grad_avp_t	struct
*	O
b	pointer
,	O
int	O
prop	int
)	O
{	O
int	O
cmp_count	int
=	O
0	int
;	O
for	O
(	O
;	O
a	pointer
;	O
a	pointer
=	O
a	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
a	pointer
->	O
prop	int
&	O
prop	int
)	O
{	O
grad_avp_t	struct
*	O
p	pointer
=	O
grad_avl_find	function
(	O
b	pointer
,	O
a	pointer
->	O
attribute	int
)	O
;	O
if	O
(	O
!	O
p	pointer
||	O
grad_avp_cmp	function
(	O
a	pointer
,	O
p	pointer
)	O
)	O
return	O
1	int
;	O
cmp_count	int
++	O
;	O
}	O
}	O
return	O
cmp_count	int
==	O
0	int
;	O
}	O
