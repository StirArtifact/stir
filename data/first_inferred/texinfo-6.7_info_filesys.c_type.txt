static	O
char	O
*	O
info_file_in_path	function
(	O
char	O
*	O
filename	pointer
,	O
struct	O
stat	struct
*	O
finfo	pointer
)	O
;	O
char	O
*	O
info_add_extension	function
(	O
char	O
*	O
dirname	pointer
,	O
char	O
*	O
fname	pointer
,	O
struct	O
stat	struct
*	O
finfo	pointer
)	O
;	O
static	O
char	O
*	O
filesys_read_compressed	function
(	O
char	O
*	O
pathname	pointer
,	O
size_t	long
*	O
filesize	pointer
)	O
;	O
static	O
char	O
*	O
filesys_decompressor_for_file	function
(	O
char	O
*	O
filename	pointer
)	O
;	O
static	O
int	O
compressed_filename_p	function
(	O
char	O
*	O
filename	pointer
)	O
;	O
typedef	O
struct	O
{	O
char	O
*	O
suffix	pointer
;	O
char	O
*	O
decompressor	pointer
;	O
}	O
COMPRESSION_ALIST	struct
;	O
static	O
char	O
*	O
info_suffixes	array
[	O
]	O
=	O
{	O
".info"	pointer
,	O
"-info"	pointer
,	O
"/index"	pointer
,	O
".inf"	pointer
,	O
""	pointer
,	O
NULL	O
}	O
;	O
static	O
COMPRESSION_ALIST	struct
compress_suffixes	array
[	O
]	O
=	O
{	O
{	O
".gz"	pointer
,	O
"gzip -d"	pointer
}	O
,	O
{	O
".lz"	pointer
,	O
"lzip -d"	pointer
}	O
,	O
{	O
".xz"	pointer
,	O
"unxz"	pointer
}	O
,	O
{	O
".bz2"	pointer
,	O
"bunzip2"	pointer
}	O
,	O
{	O
".z"	pointer
,	O
"gunzip"	pointer
}	O
,	O
{	O
".lzma"	pointer
,	O
"unlzma"	pointer
}	O
,	O
{	O
".Z"	pointer
,	O
"uncompress"	pointer
}	O
,	O
{	O
".Y"	pointer
,	O
"unyabba"	pointer
}	O
,	O
{	O
NULL	O
,	O
NULL	O
}	O
}	O
;	O
char	O
*	O
info_find_fullpath	function
(	O
char	O
*	O
partial	pointer
,	O
struct	O
stat	struct
*	O
finfo	pointer
)	O
{	O
char	O
*	O
fullpath	pointer
=	O
0	int
;	O
struct	O
stat	struct
dummy	struct
;	O
debug	O
(	O
1	int
,	O
(	O
_	O
(	O
"looking for file \"%s\""	pointer
)	O
,	O
partial	pointer
)	O
)	O
;	O
if	O
(	O
!	O
finfo	pointer
)	O
finfo	pointer
=	O
&	O
dummy	struct
;	O
filesys_error_number	int
=	O
0	int
;	O
if	O
(	O
!	O
partial	pointer
||	O
!	O
*	O
partial	pointer
)	O
return	O
0	int
;	O
if	O
(	O
IS_ABSOLUTE	O
(	O
partial	pointer
)	O
||	O
partial	pointer
[	O
0	int
]	O
==	O
'.'	O
&&	O
IS_SLASH	O
(	O
partial	pointer
[	O
1	int
]	O
)	O
)	O
{	O
fullpath	pointer
=	O
info_add_extension	function
(	O
0	int
,	O
partial	pointer
,	O
finfo	pointer
)	O
;	O
}	O
else	O
if	O
(	O
partial	pointer
[	O
0	int
]	O
==	O
'~'	O
)	O
{	O
partial	pointer
=	O
tilde_expand_word	function
(	O
partial	pointer
)	O
;	O
fullpath	pointer
=	O
info_add_extension	function
(	O
0	int
,	O
partial	pointer
,	O
finfo	pointer
)	O
;	O
}	O
else	O
fullpath	pointer
=	O
info_file_in_path	function
(	O
partial	pointer
,	O
finfo	pointer
)	O
;	O
if	O
(	O
!	O
fullpath	pointer
)	O
filesys_error_number	int
=	O
ENOENT	int
;	O
return	O
fullpath	pointer
;	O
}	O
char	O
*	O
info_file_find_next_in_path	function
(	O
char	O
*	O
filename	pointer
,	O
int	O
*	O
path_index	pointer
,	O
struct	O
stat	struct
*	O
finfo	pointer
)	O
{	O
struct	O
stat	struct
dummy	struct
;	O
if	O
(	O
!	O
finfo	pointer
)	O
finfo	pointer
=	O
&	O
dummy	struct
;	O
if	O
(	O
!	O
*	O
filename	pointer
||	O
STREQ	O
(	O
filename	pointer
,	O
"."	pointer
)	O
||	O
STREQ	O
(	O
filename	pointer
,	O
".."	pointer
)	O
)	O
return	O
NULL	O
;	O
while	O
(	O
1	int
)	O
{	O
char	O
*	O
dirname	pointer
,	O
*	O
with_extension	pointer
=	O
0	int
;	O
dirname	pointer
=	O
infopath_next	function
(	O
path_index	pointer
)	O
;	O
if	O
(	O
!	O
dirname	pointer
)	O
break	O
;	O
debug	O
(	O
1	int
,	O
(	O
_	O
(	O
"looking for file %s in %s"	pointer
)	O
,	O
filename	pointer
,	O
dirname	pointer
)	O
)	O
;	O
if	O
(	O
*	O
dirname	pointer
==	O
'~'	O
)	O
{	O
char	O
*	O
expanded_dirname	pointer
=	O
tilde_expand_word	function
(	O
dirname	pointer
)	O
;	O
free	function
(	O
dirname	pointer
)	O
;	O
dirname	pointer
=	O
expanded_dirname	pointer
;	O
}	O
with_extension	pointer
=	O
info_add_extension	function
(	O
dirname	pointer
,	O
filename	pointer
,	O
finfo	pointer
)	O
;	O
if	O
(	O
with_extension	pointer
)	O
{	O
if	O
(	O
!	O
IS_ABSOLUTE	O
(	O
with_extension	pointer
)	O
)	O
{	O
char	O
*	O
s	pointer
;	O
asprintf	function
(	O
&	O
s	pointer
,	O
"%s%s"	pointer
,	O
"./"	pointer
,	O
with_extension	pointer
)	O
;	O
free	function
(	O
with_extension	pointer
)	O
;	O
return	O
s	pointer
;	O
}	O
else	O
return	O
with_extension	pointer
;	O
}	O
}	O
return	O
NULL	O
;	O
}	O
static	O
char	O
*	O
info_file_in_path	function
(	O
char	O
*	O
filename	pointer
,	O
struct	O
stat	struct
*	O
finfo	pointer
)	O
{	O
int	O
i	int
=	O
0	int
;	O
return	O
info_file_find_next_in_path	function
(	O
filename	pointer
,	O
&	O
i	int
,	O
finfo	pointer
)	O
;	O
}	O
char	O
*	O
info_add_extension	function
(	O
char	O
*	O
dirname	pointer
,	O
char	O
*	O
filename	pointer
,	O
struct	O
stat	struct
*	O
finfo	pointer
)	O
{	O
char	O
*	O
try_filename	pointer
;	O
register	O
int	O
i	int
,	O
pre_suffix_length	int
=	O
0	int
;	O
struct	O
stat	struct
dummy	struct
;	O
if	O
(	O
!	O
finfo	pointer
)	O
finfo	pointer
=	O
&	O
dummy	struct
;	O
if	O
(	O
dirname	pointer
)	O
pre_suffix_length	int
+=	O
strlen	function
(	O
dirname	pointer
)	O
;	O
pre_suffix_length	int
+=	O
strlen	function
(	O
filename	pointer
)	O
;	O
try_filename	pointer
=	O
xmalloc	function
(	O
pre_suffix_length	int
+	O
30	int
)	O
;	O
try_filename	pointer
[	O
0	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
dirname	pointer
)	O
{	O
strcpy	function
(	O
try_filename	pointer
,	O
dirname	pointer
)	O
;	O
if	O
(	O
!	O
IS_SLASH	O
(	O
try_filename	pointer
[	O
(	O
strlen	function
(	O
try_filename	pointer
)	O
)	O
-	O
1	int
]	O
)	O
)	O
{	O
strcat	function
(	O
try_filename	pointer
,	O
"/"	pointer
)	O
;	O
pre_suffix_length	int
++	O
;	O
}	O
}	O
strcat	function
(	O
try_filename	pointer
,	O
filename	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
info_suffixes	array
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
int	O
statable	int
;	O
strcpy	function
(	O
try_filename	pointer
+	O
pre_suffix_length	int
,	O
info_suffixes	array
[	O
i	int
]	O
)	O
;	O
statable	int
=	O
(	O
stat	struct
(	O
try_filename	pointer
,	O
finfo	pointer
)	O
==	O
0	int
)	O
;	O
if	O
(	O
statable	int
)	O
{	O
if	O
(	O
S_ISREG	O
(	O
finfo	pointer
->	O
st_mode	int
)	O
)	O
{	O
debug	O
(	O
1	int
,	O
(	O
_	O
(	O
"found file %s"	pointer
)	O
,	O
try_filename	pointer
)	O
)	O
;	O
return	O
try_filename	pointer
;	O
}	O
else	O
if	O
(	O
S_ISDIR	O
(	O
finfo	pointer
->	O
st_mode	int
)	O
)	O
{	O
char	O
*	O
newpath	pointer
,	O
*	O
new_filename	pointer
;	O
newpath	pointer
=	O
xstrdup	function
(	O
try_filename	pointer
)	O
;	O
new_filename	pointer
=	O
info_add_extension	function
(	O
newpath	pointer
,	O
filename	pointer
,	O
finfo	pointer
)	O
;	O
free	function
(	O
newpath	pointer
)	O
;	O
if	O
(	O
new_filename	pointer
)	O
{	O
free	function
(	O
try_filename	pointer
)	O
;	O
debug	O
(	O
1	int
,	O
(	O
_	O
(	O
"found file %s"	pointer
)	O
,	O
new_filename	pointer
)	O
)	O
;	O
return	O
new_filename	pointer
;	O
}	O
}	O
}	O
else	O
{	O
register	O
int	O
j	int
,	O
pre_compress_suffix_length	int
;	O
pre_compress_suffix_length	int
=	O
strlen	function
(	O
try_filename	pointer
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
compress_suffixes	array
[	O
j	int
]	O
.	O
suffix	pointer
;	O
j	int
++	O
)	O
{	O
strcpy	function
(	O
try_filename	pointer
+	O
pre_compress_suffix_length	int
,	O
compress_suffixes	array
[	O
j	int
]	O
.	O
suffix	pointer
)	O
;	O
statable	int
=	O
(	O
stat	struct
(	O
try_filename	pointer
,	O
finfo	pointer
)	O
==	O
0	int
)	O
;	O
if	O
(	O
statable	int
&&	O
(	O
S_ISREG	O
(	O
finfo	pointer
->	O
st_mode	int
)	O
)	O
)	O
{	O
debug	O
(	O
1	int
,	O
(	O
_	O
(	O
"found file %s"	pointer
)	O
,	O
try_filename	pointer
)	O
)	O
;	O
return	O
try_filename	pointer
;	O
}	O
}	O
}	O
}	O
free	function
(	O
try_filename	pointer
)	O
;	O
return	O
0	int
;	O
}	O
char	O
*	O
filesys_read_info_file	function
(	O
char	O
*	O
pathname	pointer
,	O
size_t	long
*	O
filesize	pointer
,	O
struct	O
stat	struct
*	O
finfo	pointer
,	O
int	O
*	O
is_compressed	pointer
)	O
{	O
size_t	long
fsize	long
;	O
char	O
*	O
contents	pointer
;	O
fsize	long
=	O
filesys_error_number	int
=	O
0	int
;	O
stat	struct
(	O
pathname	pointer
,	O
finfo	pointer
)	O
;	O
fsize	long
=	O
(	O
long	O
)	O
finfo	pointer
->	O
st_size	long
;	O
if	O
(	O
compressed_filename_p	function
(	O
pathname	pointer
)	O
)	O
{	O
*	O
is_compressed	pointer
=	O
1	int
;	O
contents	pointer
=	O
filesys_read_compressed	function
(	O
pathname	pointer
,	O
&	O
fsize	long
)	O
;	O
}	O
else	O
{	O
int	O
descriptor	int
;	O
*	O
is_compressed	pointer
=	O
0	int
;	O
descriptor	int
=	O
open	function
(	O
pathname	pointer
,	O
O_RDONLY	int
|	O
O_BINARY	int
,	O
0666	int
)	O
;	O
if	O
(	O
descriptor	int
<	O
0	int
)	O
{	O
filesys_error_number	int
=	O
errno	O
;	O
return	O
NULL	O
;	O
}	O
contents	pointer
=	O
xmalloc	function
(	O
1	int
+	O
fsize	long
)	O
;	O
if	O
(	O
(	O
read	pointer
(	O
descriptor	int
,	O
contents	pointer
,	O
fsize	long
)	O
)	O
!=	O
fsize	long
)	O
{	O
filesys_error_number	int
=	O
errno	O
;	O
close	pointer
(	O
descriptor	int
)	O
;	O
free	function
(	O
contents	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
contents	pointer
[	O
fsize	long
]	O
=	O
0	int
;	O
close	pointer
(	O
descriptor	int
)	O
;	O
}	O
*	O
filesize	pointer
=	O
fsize	long
;	O
return	O
contents	pointer
;	O
}	O
static	O
char	O
*	O
filesys_read_compressed	function
(	O
char	O
*	O
pathname	pointer
,	O
size_t	long
*	O
filesize	pointer
)	O
{	O
FILE	struct
*	O
stream	pointer
;	O
char	O
*	O
command	pointer
,	O
*	O
decompressor	pointer
;	O
char	O
*	O
contents	pointer
=	O
NULL	O
;	O
*	O
filesize	pointer
=	O
filesys_error_number	int
=	O
0	int
;	O
decompressor	pointer
=	O
filesys_decompressor_for_file	function
(	O
pathname	pointer
)	O
;	O
if	O
(	O
!	O
decompressor	pointer
)	O
return	O
NULL	O
;	O
command	pointer
=	O
xmalloc	function
(	O
15	int
+	O
strlen	function
(	O
pathname	pointer
)	O
+	O
strlen	function
(	O
decompressor	pointer
)	O
)	O
;	O
sprintf	function
(	O
command	pointer
,	O
"%s%s < %s"	pointer
,	O
decompressor	pointer
,	O
STRIP_DOT_EXE	int
?	O
".exe"	pointer
:	O
""	pointer
,	O
pathname	pointer
)	O
;	O
if	O
(	O
info_windows_initialized_p	int
)	O
{	O
char	O
*	O
temp	pointer
;	O
temp	pointer
=	O
xmalloc	function
(	O
5	int
+	O
strlen	function
(	O
command	pointer
)	O
)	O
;	O
sprintf	function
(	O
temp	pointer
,	O
"%s..."	pointer
,	O
command	pointer
)	O
;	O
message_in_echo_area	function
(	O
"%s"	pointer
,	O
temp	pointer
)	O
;	O
free	function
(	O
temp	pointer
)	O
;	O
}	O
stream	pointer
=	O
popen	function
(	O
command	pointer
,	O
FOPEN_RBIN	pointer
)	O
;	O
free	function
(	O
command	pointer
)	O
;	O
if	O
(	O
stream	pointer
)	O
{	O
size_t	long
offset	long
,	O
size	long
;	O
char	O
*	O
chunk	pointer
;	O
offset	long
=	O
size	long
=	O
0	int
;	O
chunk	pointer
=	O
xmalloc	function
(	O
FILESYS_PIPE_BUFFER_SIZE	O
)	O
;	O
while	O
(	O
1	int
)	O
{	O
size_t	long
bytes_read	long
;	O
bytes_read	long
=	O
fread	function
(	O
chunk	pointer
,	O
1	int
,	O
FILESYS_PIPE_BUFFER_SIZE	O
,	O
stream	pointer
)	O
;	O
if	O
(	O
bytes_read	long
+	O
offset	long
>=	O
size	long
)	O
contents	pointer
=	O
xrealloc	function
(	O
contents	pointer
,	O
size	long
+=	O
(	O
2	int
*	O
FILESYS_PIPE_BUFFER_SIZE	O
)	O
)	O
;	O
memcpy	function
(	O
contents	pointer
+	O
offset	long
,	O
chunk	pointer
,	O
bytes_read	long
)	O
;	O
offset	long
+=	O
bytes_read	long
;	O
if	O
(	O
bytes_read	long
!=	O
FILESYS_PIPE_BUFFER_SIZE	O
)	O
break	O
;	O
}	O
free	function
(	O
chunk	pointer
)	O
;	O
if	O
(	O
pclose	function
(	O
stream	pointer
)	O
==	O
-	O
1	int
)	O
{	O
if	O
(	O
contents	pointer
)	O
free	function
(	O
contents	pointer
)	O
;	O
contents	pointer
=	O
NULL	O
;	O
filesys_error_number	int
=	O
errno	O
;	O
}	O
else	O
{	O
contents	pointer
=	O
xrealloc	function
(	O
contents	pointer
,	O
1	int
+	O
offset	long
)	O
;	O
contents	pointer
[	O
offset	long
]	O
=	O
'\0'	O
;	O
*	O
filesize	pointer
=	O
offset	long
;	O
}	O
}	O
else	O
{	O
filesys_error_number	int
=	O
errno	O
;	O
}	O
if	O
(	O
info_windows_initialized_p	int
)	O
unmessage_in_echo_area	function
(	O
)	O
;	O
return	O
contents	pointer
;	O
}	O
static	O
int	O
compressed_filename_p	function
(	O
char	O
*	O
filename	pointer
)	O
{	O
char	O
*	O
decompressor	pointer
;	O
decompressor	pointer
=	O
filesys_decompressor_for_file	function
(	O
filename	pointer
)	O
;	O
if	O
(	O
decompressor	pointer
)	O
return	O
1	int
;	O
else	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
filesys_decompressor_for_file	function
(	O
char	O
*	O
filename	pointer
)	O
{	O
register	O
int	O
i	int
;	O
char	O
*	O
extension	pointer
=	O
NULL	O
;	O
for	O
(	O
i	int
=	O
strlen	function
(	O
filename	pointer
)	O
-	O
1	int
;	O
i	int
>	O
0	int
;	O
i	int
--	O
)	O
if	O
(	O
filename	pointer
[	O
i	int
]	O
==	O
'.'	O
)	O
{	O
extension	pointer
=	O
filename	pointer
+	O
i	int
;	O
break	O
;	O
}	O
if	O
(	O
!	O
extension	pointer
)	O
return	O
NULL	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
compress_suffixes	array
[	O
i	int
]	O
.	O
suffix	pointer
;	O
i	int
++	O
)	O
if	O
(	O
FILENAME_CMP	O
(	O
extension	pointer
,	O
compress_suffixes	array
[	O
i	int
]	O
.	O
suffix	pointer
)	O
==	O
0	int
)	O
return	O
compress_suffixes	array
[	O
i	int
]	O
.	O
decompressor	pointer
;	O
return	O
NULL	O
;	O
}	O
int	O
filesys_error_number	int
=	O
0	int
;	O
static	O
char	O
*	O
errmsg_buf	pointer
=	O
NULL	O
;	O
static	O
int	O
errmsg_buf_size	int
=	O
0	int
;	O
char	O
*	O
filesys_error_string	function
(	O
char	O
*	O
filename	pointer
,	O
int	O
error_num	int
)	O
{	O
int	O
len	long
;	O
char	O
*	O
result	pointer
;	O
if	O
(	O
error_num	int
==	O
0	int
)	O
return	O
NULL	O
;	O
result	pointer
=	O
strerror	function
(	O
error_num	int
)	O
;	O
len	long
=	O
4	int
+	O
strlen	function
(	O
filename	pointer
)	O
+	O
strlen	function
(	O
result	pointer
)	O
;	O
if	O
(	O
len	long
>=	O
errmsg_buf_size	int
)	O
errmsg_buf	pointer
=	O
xrealloc	function
(	O
errmsg_buf	pointer
,	O
(	O
errmsg_buf_size	int
=	O
2	int
+	O
len	long
)	O
)	O
;	O
sprintf	function
(	O
errmsg_buf	pointer
,	O
"%s: %s"	pointer
,	O
filename	pointer
,	O
result	pointer
)	O
;	O
return	O
errmsg_buf	pointer
;	O
}	O
int	O
is_dir_name	function
(	O
char	O
*	O
filename	pointer
)	O
{	O
unsigned	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
info_suffixes	array
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
unsigned	O
c	int
;	O
char	O
trydir	array
[	O
50	int
]	O
;	O
strcpy	function
(	O
trydir	array
,	O
"dir"	pointer
)	O
;	O
strcat	function
(	O
trydir	array
,	O
info_suffixes	array
[	O
i	int
]	O
)	O
;	O
if	O
(	O
mbscasecmp	function
(	O
filename	pointer
,	O
trydir	array
)	O
==	O
0	int
)	O
return	O
1	int
;	O
for	O
(	O
c	int
=	O
0	int
;	O
compress_suffixes	array
[	O
c	int
]	O
.	O
suffix	pointer
;	O
c	int
++	O
)	O
{	O
char	O
dir_compressed	array
[	O
50	int
]	O
;	O
strcpy	function
(	O
dir_compressed	array
,	O
trydir	array
)	O
;	O
strcat	function
(	O
dir_compressed	array
,	O
compress_suffixes	array
[	O
c	int
]	O
.	O
suffix	pointer
)	O
;	O
if	O
(	O
mbscasecmp	function
(	O
filename	pointer
,	O
dir_compressed	array
)	O
==	O
0	int
)	O
return	O
1	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
