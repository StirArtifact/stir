static	O
double	O
k0_poly	array
[	O
8	int
]	O
=	O
{	O
1.1593151565841244842077226e-01	int
,	O
2.7898287891460317300886539e-01	int
,	O
2.5248929932161220559969776e-02	int
,	O
8.4603509072136578707676406e-04	int
,	O
1.4914719243067801775856150e-05	int
,	O
1.6271068931224552553548933e-07	int
,	O
1.2082660336282566759313543e-09	int
,	O
6.6117104672254184399933971e-12	int
}	O
;	O
static	O
double	O
i0_poly	array
[	O
7	int
]	O
=	O
{	O
1.0000000000000000044974165e+00	int
,	O
2.4999999999999822316775454e-01	int
,	O
2.7777777777892149148858521e-02	int
,	O
1.7361111083544590676709592e-03	int
,	O
6.9444476047072424198677755e-05	int
,	O
1.9288265756466775034067979e-06	int
,	O
3.9908220583262192851839992e-08	int
}	O
;	O
static	O
double	O
ak0_data	array
[	O
24	int
]	O
=	O
{	O
-	O
3.28737867094650101e-02	int
,	O
-	O
4.49369057710236880e-02	int
,	O
+	O
2.98149992004308095e-03	int
,	O
-	O
3.03693649396187920e-04	int
,	O
+	O
3.91085569307646836e-05	int
,	O
-	O
5.86872422399215952e-06	int
,	O
+	O
9.82873709937322009e-07	int
,	O
-	O
1.78978645055651171e-07	int
,	O
+	O
3.48332306845240957e-08	int
,	O
-	O
7.15909210462546599e-09	int
,	O
+	O
1.54019930048919494e-09	int
,	O
-	O
3.44555485579194210e-10	int
,	O
+	O
7.97356101783753023e-11	int
,	O
-	O
1.90090968913069735e-11	int
,	O
+	O
4.65295609304114621e-12	int
,	O
-	O
1.16614287433470780e-12	int
,	O
+	O
2.98554375218596891e-13	int
,	O
-	O
7.79276979512292169e-14	int
,	O
+	O
2.07027467168948402e-14	int
,	O
-	O
5.58987860393825313e-15	int
,	O
+	O
1.53202965950646914e-15	int
,	O
-	O
4.25737536712188186e-16	int
,	O
+	O
1.19840238501357389e-16	int
,	O
-	O
3.41407346762502397e-17	int
}	O
;	O
static	O
cheb_series	struct
ak0_cs	struct
=	O
{	O
ak0_data	array
,	O
23	int
,	O
-	O
1	int
,	O
1	int
,	O
10	int
}	O
;	O
static	O
double	O
ak02_data	array
[	O
14	int
]	O
=	O
{	O
-	O
.1201869826307592240E-1	int
,	O
-	O
.9174852691025695311E-2	int
,	O
+	O
.1444550931775005821E-3	int
,	O
-	O
.4013614175435709729E-5	int
,	O
+	O
.1567831810852310673E-6	int
,	O
-	O
.7770110438521737710E-8	int
,	O
+	O
.4611182576179717883E-9	int
,	O
-	O
.3158592997860565771E-10	int
,	O
+	O
.2435018039365041128E-11	int
,	O
-	O
.2074331387398347898E-12	int
,	O
+	O
.1925787280589917085E-13	int
,	O
-	O
.1927554805838956104E-14	int
,	O
+	O
.2062198029197818278E-15	int
,	O
-	O
.2341685117579242403E-16	int
}	O
;	O
static	O
cheb_series	struct
ak02_cs	struct
=	O
{	O
ak02_data	array
,	O
13	int
,	O
-	O
1	int
,	O
1	int
,	O
8	int
}	O
;	O
int	O
gsl_sf_bessel_K0_scaled_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
<=	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
1.0	int
)	O
{	O
const	O
double	O
lx	double
=	O
log	function
(	O
x	double
)	O
;	O
const	O
double	O
ex	double
=	O
exp	function
(	O
x	double
)	O
;	O
const	O
double	O
x2	double
=	O
x	double
*	O
x	double
;	O
result	pointer
->	O
val	double
=	O
ex	double
*	O
(	O
gsl_poly_eval	function
(	O
k0_poly	array
,	O
8	int
,	O
x2	double
)	O
-	O
lx	double
*	O
(	O
1.0	int
+	O
0.25	int
*	O
x2	double
*	O
gsl_poly_eval	function
(	O
i0_poly	array
,	O
7	int
,	O
0.25	int
*	O
x2	double
)	O
)	O
)	O
;	O
result	pointer
->	O
err	double
=	O
ex	double
*	O
(	O
1.6	int
+	O
fabs	function
(	O
lx	double
)	O
*	O
0.6	int
)	O
*	O
GSL_DBL_EPSILON	int
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<=	O
8.0	int
)	O
{	O
const	O
double	O
sx	double
=	O
sqrt	function
(	O
x	double
)	O
;	O
gsl_sf_result	struct
c	array
;	O
cheb_eval_e	function
(	O
&	O
ak0_cs	struct
,	O
(	O
16.0	int
/	O
x	double
-	O
9.0	int
)	O
/	O
7.0	int
,	O
&	O
c	array
)	O
;	O
result	pointer
->	O
val	double
=	O
(	O
1.203125	int
+	O
c	array
.	O
val	double
)	O
/	O
sx	double
;	O
result	pointer
->	O
err	double
=	O
c	array
.	O
err	double
/	O
sx	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
const	O
double	O
sx	double
=	O
sqrt	function
(	O
x	double
)	O
;	O
gsl_sf_result	struct
c	array
;	O
cheb_eval_e	function
(	O
&	O
ak02_cs	struct
,	O
16.0	int
/	O
x	double
-	O
1.0	int
,	O
&	O
c	array
)	O
;	O
result	pointer
->	O
val	double
=	O
(	O
1.25	int
+	O
c	array
.	O
val	double
)	O
/	O
sx	double
;	O
result	pointer
->	O
err	double
=	O
(	O
c	array
.	O
err	double
+	O
GSL_DBL_EPSILON	int
)	O
/	O
sx	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_bessel_K0_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
<=	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
1.0	int
)	O
{	O
const	O
double	O
lx	double
=	O
log	function
(	O
x	double
)	O
;	O
const	O
double	O
x2	double
=	O
x	double
*	O
x	double
;	O
result	pointer
->	O
val	double
=	O
gsl_poly_eval	function
(	O
k0_poly	array
,	O
8	int
,	O
x2	double
)	O
-	O
lx	double
*	O
(	O
1.0	int
+	O
0.25	int
*	O
x2	double
*	O
gsl_poly_eval	function
(	O
i0_poly	array
,	O
7	int
,	O
0.25	int
*	O
x2	double
)	O
)	O
;	O
result	pointer
->	O
err	double
=	O
(	O
1.6	int
+	O
fabs	function
(	O
lx	double
)	O
*	O
0.6	int
)	O
*	O
GSL_DBL_EPSILON	int
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct
K0_scaled	struct
;	O
int	O
stat_K0	int
=	O
gsl_sf_bessel_K0_scaled_e	function
(	O
x	double
,	O
&	O
K0_scaled	struct
)	O
;	O
int	O
stat_e	int
=	O
gsl_sf_exp_mult_err_e	function
(	O
-	O
x	double
,	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
x	double
)	O
,	O
K0_scaled	struct
.	O
val	double
,	O
K0_scaled	struct
.	O
err	double
,	O
result	pointer
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_e	int
,	O
stat_K0	int
)	O
;	O
}	O
}	O
double	O
gsl_sf_bessel_K0_scaled	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_K0_scaled_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_bessel_K0	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_K0_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
