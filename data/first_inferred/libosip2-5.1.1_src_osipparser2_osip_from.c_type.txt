int	O
osip_message_set_from	function
(	O
osip_message_t	struct
*	O
sip	pointer
,	O
const	O
char	O
*	O
hvalue	pointer
)	O
{	O
int	O
i	int
;	O
if	O
(	O
hvalue	pointer
==	O
NULL	O
||	O
hvalue	pointer
[	O
0	int
]	O
==	O
'\0'	O
)	O
return	O
OSIP_SUCCESS	int
;	O
if	O
(	O
sip	pointer
->	O
from	pointer
!=	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
i	int
=	O
osip_from_init	function
(	O
&	O
(	O
sip	pointer
->	O
from	pointer
)	O
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
sip	pointer
->	O
message_property	int
=	O
2	int
;	O
i	int
=	O
osip_from_parse	function
(	O
sip	pointer
->	O
from	pointer
,	O
hvalue	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_from_free	function
(	O
sip	pointer
->	O
from	pointer
)	O
;	O
sip	pointer
->	O
from	pointer
=	O
NULL	O
;	O
return	O
i	int
;	O
}	O
return	O
OSIP_SUCCESS	int
;	O
}	O
osip_from_t	struct
*	O
osip_message_get_from	function
(	O
const	O
osip_message_t	struct
*	O
sip	pointer
)	O
{	O
return	O
sip	pointer
->	O
from	pointer
;	O
}	O
int	O
osip_from_init	function
(	O
osip_from_t	struct
*	O
*	O
from	pointer
)	O
{	O
*	O
from	pointer
=	O
(	O
osip_from_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
osip_from_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
from	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
(	O
*	O
from	pointer
)	O
->	O
displayname	pointer
=	O
NULL	O
;	O
(	O
*	O
from	pointer
)	O
->	O
url	pointer
=	O
NULL	O
;	O
osip_list_init	function
(	O
&	O
(	O
*	O
from	pointer
)	O
->	O
gen_params	struct
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
osip_from_free	function
(	O
osip_from_t	struct
*	O
from	pointer
)	O
{	O
if	O
(	O
from	pointer
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
from	pointer
->	O
url	pointer
!=	O
NULL	O
)	O
{	O
osip_uri_free	function
(	O
from	pointer
->	O
url	pointer
)	O
;	O
}	O
osip_free	O
(	O
from	pointer
->	O
displayname	pointer
)	O
;	O
osip_generic_param_freelist	O
(	O
&	O
from	pointer
->	O
gen_params	struct
)	O
;	O
osip_free	O
(	O
from	pointer
)	O
;	O
}	O
int	O
osip_from_parse	function
(	O
osip_from_t	struct
*	O
from	pointer
,	O
const	O
char	O
*	O
hvalue	pointer
)	O
{	O
const	O
char	O
*	O
displayname	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
url	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
url_end	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
gen_params	struct
;	O
const	O
char	O
*	O
ptr	pointer
;	O
int	O
i	int
;	O
if	O
(	O
from	pointer
==	O
NULL	O
||	O
hvalue	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
ptr	pointer
=	O
hvalue	pointer
;	O
while	O
(	O
ptr	pointer
[	O
0	int
]	O
!=	O
'\0'	O
)	O
{	O
if	O
(	O
ptr	pointer
[	O
0	int
]	O
==	O
' '	O
)	O
{	O
ptr	pointer
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
ptr	pointer
[	O
0	int
]	O
==	O
'"'	O
)	O
{	O
displayname	pointer
=	O
ptr	pointer
;	O
break	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
ptr	pointer
[	O
0	int
]	O
==	O
'\0'	O
)	O
return	O
OSIP_SUCCESS	int
;	O
if	O
(	O
displayname	pointer
!=	O
NULL	O
)	O
{	O
const	O
char	O
*	O
second	pointer
=	O
NULL	O
;	O
second	pointer
=	O
__osip_quote_find	function
(	O
displayname	pointer
+	O
1	int
)	O
;	O
if	O
(	O
second	pointer
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
if	O
(	O
second	pointer
-	O
displayname	pointer
+	O
2	int
>=	O
2	int
)	O
{	O
from	pointer
->	O
displayname	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
second	pointer
-	O
displayname	pointer
+	O
2	int
)	O
;	O
if	O
(	O
from	pointer
->	O
displayname	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	function
(	O
from	pointer
->	O
displayname	pointer
,	O
displayname	pointer
,	O
second	pointer
-	O
displayname	pointer
+	O
1	int
)	O
;	O
}	O
ptr	pointer
=	O
second	pointer
+	O
1	int
;	O
while	O
(	O
ptr	pointer
[	O
0	int
]	O
!=	O
'\0'	O
)	O
{	O
if	O
(	O
ptr	pointer
[	O
0	int
]	O
==	O
' '	O
)	O
{	O
ptr	pointer
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
ptr	pointer
[	O
0	int
]	O
==	O
'<'	O
)	O
{	O
url	pointer
=	O
ptr	pointer
;	O
break	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
url	pointer
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
if	O
(	O
ptr	pointer
[	O
1	int
]	O
==	O
'\0'	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
else	O
{	O
const	O
char	O
*	O
beg	pointer
=	O
ptr	pointer
;	O
while	O
(	O
ptr	pointer
[	O
0	int
]	O
!=	O
'\0'	O
)	O
{	O
if	O
(	O
ptr	pointer
[	O
0	int
]	O
==	O
' '	O
)	O
{	O
ptr	pointer
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
ptr	pointer
[	O
0	int
]	O
>=	O
'a'	O
&&	O
ptr	pointer
[	O
0	int
]	O
<=	O
'z'	O
)	O
{	O
ptr	pointer
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
ptr	pointer
[	O
0	int
]	O
>=	O
'A'	O
&&	O
ptr	pointer
[	O
0	int
]	O
<=	O
'Z'	O
)	O
{	O
ptr	pointer
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
ptr	pointer
[	O
0	int
]	O
>=	O
'0'	O
&&	O
ptr	pointer
[	O
0	int
]	O
<=	O
'9'	O
)	O
{	O
ptr	pointer
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
ptr	pointer
[	O
0	int
]	O
==	O
'-'	O
||	O
ptr	pointer
[	O
0	int
]	O
==	O
'.'	O
||	O
ptr	pointer
[	O
0	int
]	O
==	O
'!'	O
||	O
ptr	pointer
[	O
0	int
]	O
==	O
'%'	O
||	O
ptr	pointer
[	O
0	int
]	O
==	O
'*'	O
||	O
ptr	pointer
[	O
0	int
]	O
==	O
'_'	O
||	O
ptr	pointer
[	O
0	int
]	O
==	O
'+'	O
||	O
ptr	pointer
[	O
0	int
]	O
==	O
'`'	O
||	O
ptr	pointer
[	O
0	int
]	O
==	O
'\''	O
||	O
ptr	pointer
[	O
0	int
]	O
==	O
'~'	O
)	O
{	O
ptr	pointer
++	O
;	O
continue	O
;	O
}	O
url	pointer
=	O
ptr	pointer
;	O
break	O
;	O
}	O
if	O
(	O
ptr	pointer
[	O
0	int
]	O
==	O
'\0'	O
||	O
url	pointer
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
if	O
(	O
ptr	pointer
[	O
0	int
]	O
==	O
'<'	O
)	O
{	O
if	O
(	O
ptr	pointer
[	O
1	int
]	O
==	O
'\0'	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
if	O
(	O
url	pointer
-	O
beg	pointer
>	O
0	int
)	O
{	O
from	pointer
->	O
displayname	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
url	pointer
-	O
beg	pointer
+	O
1	int
)	O
;	O
if	O
(	O
from	pointer
->	O
displayname	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_clrncpy	function
(	O
from	pointer
->	O
displayname	pointer
,	O
hvalue	pointer
,	O
url	pointer
-	O
beg	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
ptr	pointer
[	O
0	int
]	O
==	O
':'	O
)	O
{	O
url	pointer
=	O
beg	pointer
;	O
}	O
else	O
{	O
url	pointer
=	O
beg	pointer
;	O
}	O
}	O
if	O
(	O
url	pointer
[	O
0	int
]	O
==	O
'<'	O
)	O
{	O
url	pointer
++	O
;	O
ptr	pointer
=	O
url	pointer
;	O
url_end	pointer
=	O
strchr	function
(	O
ptr	pointer
,	O
'>'	O
)	O
;	O
if	O
(	O
url_end	pointer
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
url_end	pointer
--	O
;	O
gen_params	struct
=	O
strchr	function
(	O
url_end	pointer
,	O
';'	O
)	O
;	O
}	O
if	O
(	O
url_end	pointer
==	O
NULL	O
)	O
{	O
gen_params	struct
=	O
strchr	function
(	O
url	pointer
,	O
';'	O
)	O
;	O
if	O
(	O
gen_params	struct
!=	O
NULL	O
)	O
url_end	pointer
=	O
gen_params	struct
-	O
1	int
;	O
else	O
url_end	pointer
=	O
url	pointer
+	O
strlen	function
(	O
url	pointer
)	O
;	O
}	O
if	O
(	O
gen_params	struct
!=	O
NULL	O
)	O
{	O
i	int
=	O
__osip_generic_param_parseall	function
(	O
&	O
from	pointer
->	O
gen_params	struct
,	O
gen_params	struct
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
return	O
i	int
;	O
}	O
}	O
{	O
char	O
*	O
tmp	pointer
;	O
if	O
(	O
url_end	pointer
-	O
url	pointer
+	O
2	int
<	O
7	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
i	int
=	O
osip_uri_init	function
(	O
&	O
(	O
from	pointer
->	O
url	pointer
)	O
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
tmp	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
url_end	pointer
-	O
url	pointer
+	O
2	int
)	O
;	O
if	O
(	O
tmp	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	function
(	O
tmp	pointer
,	O
url	pointer
,	O
url_end	pointer
-	O
url	pointer
+	O
1	int
)	O
;	O
i	int
=	O
osip_uri_parse	function
(	O
from	pointer
->	O
url	pointer
,	O
tmp	pointer
)	O
;	O
osip_free	O
(	O
tmp	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
}	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_from_to_str	function
(	O
const	O
osip_from_t	struct
*	O
from	pointer
,	O
char	O
*	O
*	O
dest	pointer
)	O
{	O
char	O
*	O
url	pointer
;	O
char	O
*	O
buf	pointer
;	O
int	O
i	int
;	O
size_t	long
len	long
;	O
*	O
dest	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
from	pointer
==	O
NULL	O
)	O
||	O
(	O
from	pointer
->	O
url	pointer
==	O
NULL	O
)	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_uri_to_str	function
(	O
from	pointer
->	O
url	pointer
,	O
&	O
url	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
if	O
(	O
from	pointer
->	O
displayname	pointer
==	O
NULL	O
)	O
len	long
=	O
strlen	function
(	O
url	pointer
)	O
+	O
5	int
;	O
else	O
len	long
=	O
strlen	function
(	O
url	pointer
)	O
+	O
strlen	function
(	O
from	pointer
->	O
displayname	pointer
)	O
+	O
5	int
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
len	long
)	O
;	O
if	O
(	O
buf	pointer
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
url	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
if	O
(	O
from	pointer
->	O
displayname	pointer
!=	O
NULL	O
)	O
sprintf	function
(	O
buf	pointer
,	O
"%s <%s>"	pointer
,	O
from	pointer
->	O
displayname	pointer
,	O
url	pointer
)	O
;	O
else	O
sprintf	function
(	O
buf	pointer
,	O
"<%s>"	pointer
,	O
url	pointer
)	O
;	O
osip_free	O
(	O
url	pointer
)	O
;	O
{	O
size_t	long
plen	long
;	O
char	O
*	O
tmp	pointer
;	O
osip_list_iterator_t	struct
it	pointer
;	O
osip_generic_param_t	struct
*	O
u_param	pointer
=	O
(	O
osip_generic_param_t	struct
*	O
)	O
osip_list_get_first	function
(	O
&	O
from	pointer
->	O
gen_params	struct
,	O
&	O
it	pointer
)	O
;	O
while	O
(	O
u_param	pointer
!=	O
OSIP_SUCCESS	int
)	O
{	O
if	O
(	O
u_param	pointer
->	O
gvalue	pointer
==	O
NULL	O
)	O
plen	long
=	O
strlen	function
(	O
u_param	pointer
->	O
gname	pointer
)	O
+	O
2	int
;	O
else	O
plen	long
=	O
strlen	function
(	O
u_param	pointer
->	O
gname	pointer
)	O
+	O
strlen	function
(	O
u_param	pointer
->	O
gvalue	pointer
)	O
+	O
3	int
;	O
len	long
=	O
len	long
+	O
plen	long
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
osip_realloc	O
(	O
buf	pointer
,	O
len	long
)	O
;	O
tmp	pointer
=	O
buf	pointer
;	O
tmp	pointer
=	O
tmp	pointer
+	O
strlen	function
(	O
tmp	pointer
)	O
;	O
if	O
(	O
u_param	pointer
->	O
gvalue	pointer
==	O
NULL	O
)	O
snprintf	function
(	O
tmp	pointer
,	O
len	long
-	O
(	O
tmp	pointer
-	O
buf	pointer
)	O
,	O
";%s"	pointer
,	O
u_param	pointer
->	O
gname	pointer
)	O
;	O
else	O
snprintf	function
(	O
tmp	pointer
,	O
len	long
-	O
(	O
tmp	pointer
-	O
buf	pointer
)	O
,	O
";%s=%s"	pointer
,	O
u_param	pointer
->	O
gname	pointer
,	O
u_param	pointer
->	O
gvalue	pointer
)	O
;	O
u_param	pointer
=	O
(	O
osip_generic_param_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
it	pointer
)	O
;	O
}	O
}	O
*	O
dest	pointer
=	O
buf	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
char	O
*	O
osip_from_get_displayname	function
(	O
osip_from_t	struct
*	O
from	pointer
)	O
{	O
if	O
(	O
from	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
from	pointer
->	O
displayname	pointer
;	O
}	O
void	O
osip_from_set_displayname	function
(	O
osip_from_t	struct
*	O
from	pointer
,	O
char	O
*	O
displayname	pointer
)	O
{	O
from	pointer
->	O
displayname	pointer
=	O
displayname	pointer
;	O
}	O
osip_uri_t	struct
*	O
osip_from_get_url	function
(	O
osip_from_t	struct
*	O
from	pointer
)	O
{	O
if	O
(	O
from	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
from	pointer
->	O
url	pointer
;	O
}	O
void	O
osip_from_set_url	function
(	O
osip_from_t	struct
*	O
from	pointer
,	O
osip_uri_t	struct
*	O
url	pointer
)	O
{	O
from	pointer
->	O
url	pointer
=	O
url	pointer
;	O
}	O
int	O
osip_from_param_get	function
(	O
osip_from_t	struct
*	O
from	pointer
,	O
int	O
pos	int
,	O
osip_generic_param_t	struct
*	O
*	O
fparam	pointer
)	O
{	O
*	O
fparam	pointer
=	O
NULL	O
;	O
if	O
(	O
from	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
osip_list_size	function
(	O
&	O
from	pointer
->	O
gen_params	struct
)	O
<=	O
pos	int
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
*	O
fparam	pointer
=	O
(	O
osip_generic_param_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
from	pointer
->	O
gen_params	struct
,	O
pos	int
)	O
;	O
return	O
pos	int
;	O
}	O
int	O
osip_from_clone	function
(	O
const	O
osip_from_t	struct
*	O
from	pointer
,	O
osip_from_t	struct
*	O
*	O
dest	pointer
)	O
{	O
int	O
i	int
;	O
osip_from_t	struct
*	O
fr	pointer
;	O
*	O
dest	pointer
=	O
NULL	O
;	O
if	O
(	O
from	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_from_init	function
(	O
&	O
fr	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
if	O
(	O
from	pointer
->	O
displayname	pointer
!=	O
NULL	O
)	O
{	O
fr	pointer
->	O
displayname	pointer
=	O
osip_strdup	function
(	O
from	pointer
->	O
displayname	pointer
)	O
;	O
if	O
(	O
fr	pointer
->	O
displayname	pointer
==	O
NULL	O
)	O
{	O
osip_from_free	function
(	O
fr	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
}	O
if	O
(	O
from	pointer
->	O
url	pointer
!=	O
NULL	O
)	O
{	O
i	int
=	O
osip_uri_clone	function
(	O
from	pointer
->	O
url	pointer
,	O
&	O
(	O
fr	pointer
->	O
url	pointer
)	O
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_from_free	function
(	O
fr	pointer
)	O
;	O
return	O
i	int
;	O
}	O
}	O
i	int
=	O
osip_list_clone	function
(	O
&	O
from	pointer
->	O
gen_params	struct
,	O
&	O
fr	pointer
->	O
gen_params	struct
,	O
(	O
int	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
*	O
)	O
)	O
&	O
osip_generic_param_clone	O
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_from_free	function
(	O
fr	pointer
)	O
;	O
return	O
i	int
;	O
}	O
*	O
dest	pointer
=	O
fr	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_from_compare	function
(	O
osip_from_t	struct
*	O
from1	pointer
,	O
osip_from_t	struct
*	O
from2	pointer
)	O
{	O
char	O
*	O
tag1	pointer
;	O
char	O
*	O
tag2	pointer
;	O
if	O
(	O
from1	pointer
==	O
NULL	O
||	O
from2	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
from1	pointer
->	O
url	pointer
==	O
NULL	O
||	O
from2	pointer
->	O
url	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
from1	pointer
->	O
url	pointer
->	O
host	pointer
==	O
NULL	O
&&	O
from2	pointer
->	O
url	pointer
->	O
host	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
from1	pointer
->	O
url	pointer
->	O
string	pointer
==	O
NULL	O
||	O
from2	pointer
->	O
url	pointer
->	O
string	pointer
==	O
NULL	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
if	O
(	O
0	int
==	O
strcmp	function
(	O
from1	pointer
->	O
url	pointer
->	O
string	pointer
,	O
from2	pointer
->	O
url	pointer
->	O
string	pointer
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
}	O
if	O
(	O
from1	pointer
->	O
url	pointer
->	O
host	pointer
==	O
NULL	O
||	O
from2	pointer
->	O
url	pointer
->	O
host	pointer
==	O
NULL	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
if	O
(	O
0	int
!=	O
strcmp	function
(	O
from1	pointer
->	O
url	pointer
->	O
host	pointer
,	O
from2	pointer
->	O
url	pointer
->	O
host	pointer
)	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
if	O
(	O
from1	pointer
->	O
url	pointer
->	O
username	pointer
!=	O
NULL	O
&&	O
from2	pointer
->	O
url	pointer
->	O
username	pointer
!=	O
NULL	O
)	O
if	O
(	O
0	int
!=	O
strcmp	function
(	O
from1	pointer
->	O
url	pointer
->	O
username	pointer
,	O
from2	pointer
->	O
url	pointer
->	O
username	pointer
)	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
tag1	pointer
=	O
NULL	O
;	O
tag2	pointer
=	O
NULL	O
;	O
{	O
osip_list_iterator_t	struct
it	pointer
;	O
osip_generic_param_t	struct
*	O
u_param	pointer
=	O
(	O
osip_generic_param_t	struct
*	O
)	O
osip_list_get_first	function
(	O
&	O
from1	pointer
->	O
gen_params	struct
,	O
&	O
it	pointer
)	O
;	O
while	O
(	O
u_param	pointer
!=	O
OSIP_SUCCESS	int
)	O
{	O
if	O
(	O
0	int
==	O
strncmp	function
(	O
u_param	pointer
->	O
gname	pointer
,	O
"tag"	pointer
,	O
3	int
)	O
)	O
{	O
tag1	pointer
=	O
u_param	pointer
->	O
gvalue	pointer
;	O
break	O
;	O
}	O
u_param	pointer
=	O
(	O
osip_generic_param_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
it	pointer
)	O
;	O
}	O
}	O
{	O
osip_list_iterator_t	struct
it	pointer
;	O
osip_generic_param_t	struct
*	O
u_param	pointer
=	O
(	O
osip_generic_param_t	struct
*	O
)	O
osip_list_get_first	function
(	O
&	O
from2	pointer
->	O
gen_params	struct
,	O
&	O
it	pointer
)	O
;	O
while	O
(	O
u_param	pointer
!=	O
OSIP_SUCCESS	int
)	O
{	O
if	O
(	O
0	int
==	O
strncmp	function
(	O
u_param	pointer
->	O
gname	pointer
,	O
"tag"	pointer
,	O
3	int
)	O
)	O
{	O
tag2	pointer
=	O
u_param	pointer
->	O
gvalue	pointer
;	O
break	O
;	O
}	O
u_param	pointer
=	O
(	O
osip_generic_param_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
it	pointer
)	O
;	O
}	O
}	O
if	O
(	O
tag1	pointer
!=	O
NULL	O
&&	O
tag2	pointer
!=	O
NULL	O
)	O
if	O
(	O
0	int
!=	O
strcmp	function
(	O
tag1	pointer
,	O
tag2	pointer
)	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
__osip_generic_param_parseall	function
(	O
osip_list_t	struct
*	O
gen_params	struct
,	O
const	O
char	O
*	O
params	pointer
)	O
{	O
int	O
i	int
;	O
char	O
*	O
pname	pointer
;	O
char	O
*	O
pvalue	pointer
;	O
const	O
char	O
*	O
comma	pointer
;	O
const	O
char	O
*	O
equal	pointer
;	O
const	O
char	O
*	O
startquote	pointer
;	O
const	O
char	O
*	O
endquote	pointer
;	O
equal	pointer
=	O
next_separator	function
(	O
params	pointer
+	O
1	int
,	O
'='	O
,	O
';'	O
)	O
;	O
comma	pointer
=	O
strchr	function
(	O
params	pointer
+	O
1	int
,	O
';'	O
)	O
;	O
if	O
(	O
equal	pointer
!=	O
NULL	O
)	O
{	O
const	O
char	O
*	O
tmp	pointer
;	O
startquote	pointer
=	O
NULL	O
;	O
for	O
(	O
tmp	pointer
=	O
equal	pointer
+	O
1	int
;	O
tmp	pointer
[	O
0	int
]	O
==	O
' '	O
;	O
tmp	pointer
++	O
)	O
{	O
}	O
if	O
(	O
tmp	pointer
[	O
0	int
]	O
==	O
'"'	O
)	O
startquote	pointer
=	O
tmp	pointer
;	O
if	O
(	O
startquote	pointer
!=	O
NULL	O
&&	O
comma	pointer
>	O
startquote	pointer
)	O
{	O
comma	pointer
=	O
NULL	O
;	O
endquote	pointer
=	O
__osip_quote_find	function
(	O
startquote	pointer
+	O
1	int
)	O
;	O
if	O
(	O
endquote	pointer
)	O
comma	pointer
=	O
strchr	function
(	O
endquote	pointer
,	O
';'	O
)	O
;	O
}	O
}	O
while	O
(	O
comma	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
equal	pointer
==	O
NULL	O
)	O
{	O
equal	pointer
=	O
comma	pointer
;	O
pvalue	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
const	O
char	O
*	O
tmp	pointer
;	O
tmp	pointer
=	O
equal	pointer
+	O
1	int
;	O
tmp	pointer
+=	O
strspn	function
(	O
tmp	pointer
,	O
"\t "	pointer
)	O
;	O
pvalue	pointer
=	O
NULL	O
;	O
if	O
(	O
*	O
tmp	pointer
!=	O
','	O
&&	O
*	O
tmp	pointer
!=	O
'\0'	O
)	O
{	O
if	O
(	O
comma	pointer
-	O
equal	pointer
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
pvalue	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
comma	pointer
-	O
equal	pointer
)	O
;	O
if	O
(	O
pvalue	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	function
(	O
pvalue	pointer
,	O
equal	pointer
+	O
1	int
,	O
comma	pointer
-	O
equal	pointer
-	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
equal	pointer
-	O
params	pointer
<	O
2	int
)	O
{	O
osip_free	O
(	O
pvalue	pointer
)	O
;	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
pname	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
equal	pointer
-	O
params	pointer
)	O
;	O
if	O
(	O
pname	pointer
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
pvalue	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
osip_strncpy	function
(	O
pname	pointer
,	O
params	pointer
+	O
1	int
,	O
equal	pointer
-	O
params	pointer
-	O
1	int
)	O
;	O
i	int
=	O
osip_generic_param_add	O
(	O
gen_params	struct
,	O
pname	pointer
,	O
pvalue	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
OSIP_SUCCESS	int
)	O
{	O
osip_free	O
(	O
pname	pointer
)	O
;	O
osip_free	O
(	O
pvalue	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
params	pointer
=	O
comma	pointer
;	O
equal	pointer
=	O
next_separator	function
(	O
params	pointer
+	O
1	int
,	O
'='	O
,	O
';'	O
)	O
;	O
comma	pointer
=	O
strchr	function
(	O
params	pointer
+	O
1	int
,	O
';'	O
)	O
;	O
if	O
(	O
equal	pointer
!=	O
NULL	O
)	O
{	O
const	O
char	O
*	O
tmp	pointer
;	O
startquote	pointer
=	O
NULL	O
;	O
for	O
(	O
tmp	pointer
=	O
equal	pointer
+	O
1	int
;	O
tmp	pointer
[	O
0	int
]	O
==	O
' '	O
;	O
tmp	pointer
++	O
)	O
{	O
}	O
if	O
(	O
tmp	pointer
[	O
0	int
]	O
==	O
'"'	O
)	O
startquote	pointer
=	O
tmp	pointer
;	O
if	O
(	O
startquote	pointer
!=	O
NULL	O
&&	O
comma	pointer
>	O
startquote	pointer
)	O
{	O
comma	pointer
=	O
NULL	O
;	O
endquote	pointer
=	O
__osip_quote_find	function
(	O
startquote	pointer
+	O
1	int
)	O
;	O
if	O
(	O
endquote	pointer
)	O
comma	pointer
=	O
strchr	function
(	O
endquote	pointer
,	O
';'	O
)	O
;	O
}	O
}	O
}	O
comma	pointer
=	O
params	pointer
+	O
strlen	function
(	O
params	pointer
)	O
;	O
if	O
(	O
equal	pointer
==	O
NULL	O
)	O
{	O
equal	pointer
=	O
comma	pointer
;	O
pvalue	pointer
=	O
NULL	O
;	O
if	O
(	O
equal	pointer
-	O
params	pointer
<	O
2	int
)	O
{	O
osip_free	O
(	O
pvalue	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
}	O
else	O
{	O
const	O
char	O
*	O
tmp	pointer
;	O
tmp	pointer
=	O
equal	pointer
+	O
1	int
;	O
tmp	pointer
+=	O
strspn	function
(	O
tmp	pointer
,	O
"\t "	pointer
)	O
;	O
pvalue	pointer
=	O
NULL	O
;	O
if	O
(	O
*	O
tmp	pointer
!=	O
','	O
&&	O
*	O
tmp	pointer
!=	O
'\0'	O
)	O
{	O
if	O
(	O
comma	pointer
-	O
equal	pointer
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
pvalue	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
comma	pointer
-	O
equal	pointer
)	O
;	O
if	O
(	O
pvalue	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	function
(	O
pvalue	pointer
,	O
equal	pointer
+	O
1	int
,	O
comma	pointer
-	O
equal	pointer
-	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
equal	pointer
-	O
params	pointer
<	O
2	int
)	O
{	O
osip_free	O
(	O
pvalue	pointer
)	O
;	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
pname	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
equal	pointer
-	O
params	pointer
)	O
;	O
if	O
(	O
pname	pointer
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
pvalue	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
osip_strncpy	function
(	O
pname	pointer
,	O
params	pointer
+	O
1	int
,	O
equal	pointer
-	O
params	pointer
-	O
1	int
)	O
;	O
i	int
=	O
osip_generic_param_add	O
(	O
gen_params	struct
,	O
pname	pointer
,	O
pvalue	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
OSIP_SUCCESS	int
)	O
{	O
osip_free	O
(	O
pname	pointer
)	O
;	O
osip_free	O
(	O
pvalue	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
osip_generic_param_set_value	function
(	O
osip_generic_param_t	struct
*	O
fparam	pointer
,	O
char	O
*	O
value	pointer
)	O
{	O
fparam	pointer
->	O
gvalue	pointer
=	O
value	pointer
;	O
}	O
char	O
*	O
osip_generic_param_get_name	function
(	O
const	O
osip_generic_param_t	struct
*	O
fparam	pointer
)	O
{	O
if	O
(	O
fparam	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
fparam	pointer
->	O
gname	pointer
;	O
}	O
void	O
osip_generic_param_set_name	function
(	O
osip_generic_param_t	struct
*	O
fparam	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
fparam	pointer
->	O
gname	pointer
=	O
name	pointer
;	O
}	O
char	O
*	O
osip_generic_param_get_value	function
(	O
const	O
osip_generic_param_t	struct
*	O
fparam	pointer
)	O
{	O
if	O
(	O
fparam	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
fparam	pointer
->	O
gname	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
fparam	pointer
->	O
gvalue	pointer
;	O
}	O
int	O
osip_from_tag_match	function
(	O
osip_from_t	struct
*	O
from1	pointer
,	O
osip_from_t	struct
*	O
from2	pointer
)	O
{	O
osip_generic_param_t	struct
*	O
tag_from1	pointer
;	O
osip_generic_param_t	struct
*	O
tag_from2	pointer
;	O
if	O
(	O
from1	pointer
==	O
NULL	O
||	O
from2	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
osip_from_param_get_byname	O
(	O
from1	pointer
,	O
"tag"	pointer
,	O
&	O
tag_from1	pointer
)	O
;	O
osip_from_param_get_byname	O
(	O
from2	pointer
,	O
"tag"	pointer
,	O
&	O
tag_from2	pointer
)	O
;	O
if	O
(	O
tag_from1	pointer
==	O
NULL	O
&&	O
tag_from2	pointer
==	O
NULL	O
)	O
return	O
OSIP_SUCCESS	int
;	O
if	O
(	O
(	O
tag_from1	pointer
!=	O
NULL	O
&&	O
tag_from2	pointer
==	O
NULL	O
)	O
||	O
(	O
tag_from1	pointer
==	O
NULL	O
&&	O
tag_from2	pointer
!=	O
NULL	O
)	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
if	O
(	O
tag_from1	pointer
->	O
gvalue	pointer
==	O
NULL	O
||	O
tag_from2	pointer
->	O
gvalue	pointer
==	O
NULL	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
if	O
(	O
0	int
!=	O
strcmp	function
(	O
tag_from1	pointer
->	O
gvalue	pointer
,	O
tag_from2	pointer
->	O
gvalue	pointer
)	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
