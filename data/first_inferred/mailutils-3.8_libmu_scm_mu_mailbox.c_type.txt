static	O
scm_t_bits	O
mailbox_tag	int
;	O
struct	O
mu_mailbox	struct
{	O
mu_mailbox_t	pointer
mbox	pointer
;	O
mu_iterator_t	pointer
itr	pointer
;	O
int	O
noclose	int
;	O
}	O
;	O
static	O
size_t	long
mu_scm_mailbox_free	function
(	O
SCM	function
mailbox_smob	int
)	O
{	O
struct	O
mu_mailbox	struct
*	O
mum	pointer
=	O
(	O
struct	O
mu_mailbox	struct
*	O
)	O
SCM_CDR	function
(	O
mailbox_smob	int
)	O
;	O
mu_iterator_destroy	function
(	O
&	O
mum	pointer
->	O
itr	pointer
)	O
;	O
if	O
(	O
!	O
mum	pointer
->	O
noclose	int
)	O
{	O
mu_mailbox_close	function
(	O
mum	pointer
->	O
mbox	pointer
)	O
;	O
mu_mailbox_destroy	function
(	O
&	O
mum	pointer
->	O
mbox	pointer
)	O
;	O
}	O
return	O
sizeof	O
0	int
;	O
}	O
static	O
int	O
mu_scm_mailbox_print	function
(	O
SCM	function
mailbox_smob	int
,	O
SCM	function
port	int
,	O
scm_print_state	O
*	O
pstate	pointer
)	O
{	O
struct	O
mu_mailbox	struct
*	O
mum	pointer
=	O
(	O
struct	O
mu_mailbox	struct
*	O
)	O
SCM_CDR	function
(	O
mailbox_smob	int
)	O
;	O
size_t	long
count	pointer
=	O
0	int
;	O
mu_url_t	pointer
url	pointer
=	O
NULL	O
;	O
mu_mailbox_get_url	function
(	O
mum	pointer
->	O
mbox	pointer
,	O
&	O
url	pointer
)	O
;	O
scm_puts	function
(	O
"#<mailbox "	pointer
,	O
port	int
)	O
;	O
if	O
(	O
mailbox_smob	int
==	O
SCM_BOOL_F	O
)	O
{	O
scm_puts	function
(	O
"#f"	pointer
,	O
port	int
)	O
;	O
}	O
else	O
{	O
const	O
char	O
*	O
p	pointer
=	O
mu_url_to_string	function
(	O
url	pointer
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
mu_mailbox_messages_count	function
(	O
mum	pointer
->	O
mbox	pointer
,	O
&	O
count	pointer
)	O
;	O
scm_puts	function
(	O
p	pointer
,	O
port	int
)	O
;	O
scm_puts	function
(	O
" ("	pointer
,	O
port	int
)	O
;	O
scm_intprint	function
(	O
count	pointer
,	O
10	int
,	O
port	int
)	O
;	O
scm_putc	function
(	O
')'	O
,	O
port	int
)	O
;	O
}	O
else	O
scm_puts	function
(	O
"uninitialized"	pointer
,	O
port	int
)	O
;	O
}	O
scm_puts	function
(	O
">"	pointer
,	O
port	int
)	O
;	O
return	O
1	int
;	O
}	O
SCM	function
mu_scm_mailbox_create0	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
int	O
noclose	int
)	O
{	O
struct	O
mu_mailbox	struct
*	O
mum	pointer
;	O
mum	pointer
=	O
scm_gc_malloc	function
(	O
sizeof	O
(	O
struct	O
mu_mailbox	struct
)	O
,	O
"mailbox"	pointer
)	O
;	O
mum	pointer
->	O
mbox	pointer
=	O
mbox	pointer
;	O
mum	pointer
->	O
itr	pointer
=	O
NULL	O
;	O
mum	pointer
->	O
noclose	int
=	O
noclose	int
;	O
SCM_RETURN_NEWSMOB	function
(	O
mailbox_tag	int
,	O
mum	pointer
)	O
;	O
}	O
SCM	function
mu_scm_mailbox_create	function
(	O
mu_mailbox_t	pointer
mbox	pointer
)	O
{	O
return	O
mu_scm_mailbox_create0	function
(	O
mbox	pointer
,	O
0	int
)	O
;	O
}	O
int	O
mu_scm_is_mailbox	function
(	O
SCM	function
scm	int
)	O
{	O
return	O
SCM_NIMP	function
(	O
scm	int
)	O
&&	O
(	O
long	O
)	O
SCM_CAR	function
(	O
scm	int
)	O
==	O
mailbox_tag	int
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_mailbox_p	O
,	O
"mu-mailbox?"	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
scm	int
)	O
,	O
"Return @code{true} if @var{scm} is a Mailutils mailbox.\n"	pointer
)	O
{	O
return	O
scm_from_bool	function
(	O
mu_scm_is_mailbox	function
(	O
scm	int
)	O
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_user_mailbox_url	O
,	O
"mu-user-mailbox-url"	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
user	pointer
)	O
,	O
"Return URL of the default mailbox for user @var{user}."	pointer
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
p	pointer
,	O
*	O
str	pointer
;	O
SCM	function
ret	pointer
;	O
SCM_ASSERT	function
(	O
scm_is_string	function
(	O
user	pointer
)	O
,	O
user	pointer
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
str	pointer
=	O
scm_to_locale_string	function
(	O
user	pointer
)	O
;	O
rc	int
=	O
mu_construct_user_mailbox_url	function
(	O
&	O
p	pointer
,	O
str	pointer
)	O
;	O
free	function
(	O
str	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
rc	int
,	O
"Cannot construct mailbox URL for ~A"	pointer
,	O
scm_list_1	function
(	O
user	pointer
)	O
)	O
;	O
ret	pointer
=	O
scm_from_locale_string	function
(	O
p	pointer
)	O
;	O
free	function
(	O
p	pointer
)	O
;	O
return	O
ret	pointer
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_folder_directory	O
,	O
"mu-folder-directory"	pointer
,	O
0	int
,	O
1	int
,	O
0	int
,	O
(	O
SCM	function
url	pointer
)	O
,	O
"If @var{url} is given, sets it as a name of the user's folder directory.\n"	pointer
"Returns the current value of the folder directory."	pointer
)	O
{	O
if	O
(	O
!	O
SCM_UNBNDP	function
(	O
url	pointer
)	O
)	O
{	O
char	O
*	O
s	pointer
;	O
SCM_ASSERT	function
(	O
scm_is_string	function
(	O
url	pointer
)	O
,	O
url	pointer
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
s	pointer
=	O
scm_to_locale_string	function
(	O
url	pointer
)	O
;	O
mu_set_folder_directory	function
(	O
s	pointer
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
}	O
return	O
scm_from_locale_string	function
(	O
mu_folder_directory	function
(	O
)	O
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_mailbox_open	O
,	O
"mu-mailbox-open"	pointer
,	O
2	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
url	pointer
,	O
SCM	function
mode	int
)	O
,	O
"Opens the mailbox specified by @var{url}. The @var{mode} argument defines\n"	pointer
"access mode for the mailbox. It is a string, consisting of one or more of the\n"	pointer
"following characters:\n"	pointer
"\n"	pointer
"@multitable @columnfractions 0.20 0.70\n"	pointer
"@headitem @var{mode} @tab Meaning\n"	pointer
"@item r @tab Open for reading.\n"	pointer
"@item w @tab Open for writing.\n"	pointer
"@item a @tab Open for appending to the end of the mailbox.\n"	pointer
"@item c @tab Create the mailbox if it does not exist.\n"	pointer
"@end multitable\n"	pointer
)	O
{	O
mu_mailbox_t	pointer
mbox	pointer
=	O
NULL	O
;	O
char	O
*	O
mode_str	pointer
;	O
int	O
mode_bits	int
=	O
0	int
;	O
int	O
status	int
;	O
SCM	function
ret	pointer
;	O
SCM_ASSERT	function
(	O
scm_is_bool	function
(	O
url	pointer
)	O
||	O
scm_is_string	function
(	O
url	pointer
)	O
,	O
url	pointer
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
SCM_ASSERT	function
(	O
scm_is_string	function
(	O
mode	int
)	O
,	O
mode	int
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
scm_dynwind_begin	function
(	O
0	int
)	O
;	O
mode_str	pointer
=	O
scm_to_locale_string	function
(	O
mode	int
)	O
;	O
scm_dynwind_free	function
(	O
mode_str	pointer
)	O
;	O
for	O
(	O
;	O
*	O
mode_str	pointer
;	O
mode_str	pointer
++	O
)	O
switch	O
(	O
*	O
mode_str	pointer
)	O
{	O
case	O
'r'	O
:	O
mode_bits	int
|=	O
MU_STREAM_READ	int
;	O
break	O
;	O
case	O
'w'	O
:	O
mode_bits	int
|=	O
MU_STREAM_WRITE	int
;	O
break	O
;	O
case	O
'a'	O
:	O
mode_bits	int
|=	O
MU_STREAM_APPEND	int
;	O
break	O
;	O
case	O
'c'	O
:	O
mode_bits	int
|=	O
MU_STREAM_CREAT	int
;	O
break	O
;	O
}	O
if	O
(	O
mode_bits	int
&	O
MU_STREAM_READ	int
&&	O
mode_bits	int
&	O
MU_STREAM_WRITE	int
)	O
mode_bits	int
=	O
(	O
mode_bits	int
&	O
~	O
(	O
MU_STREAM_READ	int
|	O
MU_STREAM_WRITE	int
)	O
)	O
|	O
MU_STREAM_RDWR	O
;	O
if	O
(	O
scm_is_bool	function
(	O
url	pointer
)	O
)	O
{	O
if	O
(	O
url	pointer
==	O
SCM_BOOL_F	O
)	O
mode_str	pointer
=	O
NULL	O
;	O
else	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
EINVAL	int
,	O
"value #t for URL is reserved for future use"	pointer
,	O
scm_list_1	function
(	O
url	pointer
)	O
)	O
;	O
}	O
else	O
{	O
mode_str	pointer
=	O
scm_to_locale_string	function
(	O
url	pointer
)	O
;	O
scm_dynwind_free	function
(	O
mode_str	pointer
)	O
;	O
}	O
status	int
=	O
mu_mailbox_create_default	function
(	O
&	O
mbox	pointer
,	O
mode_str	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot create default mailbox ~A"	pointer
,	O
scm_list_1	function
(	O
url	pointer
)	O
)	O
;	O
status	int
=	O
mu_mailbox_open	function
(	O
mbox	pointer
,	O
mode_bits	int
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_mailbox_destroy	function
(	O
&	O
mbox	pointer
)	O
;	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot open default mailbox ~A"	pointer
,	O
scm_list_1	function
(	O
url	pointer
)	O
)	O
;	O
}	O
ret	pointer
=	O
mu_scm_mailbox_create	function
(	O
mbox	pointer
)	O
;	O
scm_dynwind_end	function
(	O
)	O
;	O
return	O
ret	pointer
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_mailbox_close	O
,	O
"mu-mailbox-close"	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
mbox	pointer
)	O
,	O
"Closes mailbox @var{mbox}."	pointer
)	O
{	O
struct	O
mu_mailbox	struct
*	O
mum	pointer
;	O
SCM_ASSERT	function
(	O
mu_scm_is_mailbox	function
(	O
mbox	pointer
)	O
,	O
mbox	pointer
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
mum	pointer
=	O
(	O
struct	O
mu_mailbox	struct
*	O
)	O
SCM_CDR	function
(	O
mbox	pointer
)	O
;	O
mu_mailbox_close	function
(	O
mum	pointer
->	O
mbox	pointer
)	O
;	O
mu_mailbox_destroy	function
(	O
&	O
mum	pointer
->	O
mbox	pointer
)	O
;	O
return	O
SCM_UNSPECIFIED	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_mailbox_get_url	O
,	O
"mu-mailbox-get-url"	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
mbox	pointer
)	O
,	O
"Returns URL of the mailbox @var{MBOX}."	pointer
)	O
{	O
struct	O
mu_mailbox	struct
*	O
mum	pointer
;	O
mu_url_t	pointer
url	pointer
;	O
int	O
status	int
;	O
SCM_ASSERT	function
(	O
mu_scm_is_mailbox	function
(	O
mbox	pointer
)	O
,	O
mbox	pointer
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
mum	pointer
=	O
(	O
struct	O
mu_mailbox	struct
*	O
)	O
SCM_CDR	function
(	O
mbox	pointer
)	O
;	O
status	int
=	O
mu_mailbox_get_url	function
(	O
mum	pointer
->	O
mbox	pointer
,	O
&	O
url	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get mailbox url"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
return	O
scm_from_locale_string	function
(	O
mu_url_to_string	function
(	O
url	pointer
)	O
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_mailbox_get_message	O
,	O
"mu-mailbox-get-message"	pointer
,	O
2	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
mbox	pointer
,	O
SCM	function
msgno	long
)	O
,	O
"Retrieve from message #@var{msgno} from the mailbox @var{mbox}."	pointer
)	O
{	O
size_t	long
n	int
;	O
struct	O
mu_mailbox	struct
*	O
mum	pointer
;	O
mu_message_t	pointer
msg	pointer
;	O
int	O
status	int
;	O
SCM_ASSERT	function
(	O
mu_scm_is_mailbox	function
(	O
mbox	pointer
)	O
,	O
mbox	pointer
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
SCM_ASSERT	function
(	O
scm_is_integer	function
(	O
msgno	long
)	O
,	O
msgno	long
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
mum	pointer
=	O
(	O
struct	O
mu_mailbox	struct
*	O
)	O
SCM_CDR	function
(	O
mbox	pointer
)	O
;	O
n	int
=	O
scm_to_size_t	function
(	O
msgno	long
)	O
;	O
status	int
=	O
mu_mailbox_get_message	function
(	O
mum	pointer
->	O
mbox	pointer
,	O
n	int
,	O
&	O
msg	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message ~A from mailbox ~A"	pointer
,	O
scm_list_2	function
(	O
msgno	long
,	O
mbox	pointer
)	O
)	O
;	O
return	O
mu_scm_message_create	function
(	O
mbox	pointer
,	O
msg	pointer
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_mailbox_messages_count	O
,	O
"mu-mailbox-messages-count"	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
mbox	pointer
)	O
,	O
"Returns number of messages in the mailbox @var{mbox}."	pointer
)	O
{	O
struct	O
mu_mailbox	struct
*	O
mum	pointer
;	O
size_t	long
nmesg	long
;	O
int	O
status	int
;	O
SCM_ASSERT	function
(	O
mu_scm_is_mailbox	function
(	O
mbox	pointer
)	O
,	O
mbox	pointer
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
mum	pointer
=	O
(	O
struct	O
mu_mailbox	struct
*	O
)	O
SCM_CDR	function
(	O
mbox	pointer
)	O
;	O
status	int
=	O
mu_mailbox_messages_count	function
(	O
mum	pointer
->	O
mbox	pointer
,	O
&	O
nmesg	long
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot count messages in mailbox ~A"	pointer
,	O
scm_list_1	function
(	O
mbox	pointer
)	O
)	O
;	O
return	O
scm_from_size_t	function
(	O
nmesg	long
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_mailbox_expunge	O
,	O
"mu-mailbox-expunge"	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
mbox	pointer
)	O
,	O
"Expunges deleted messages from the mailbox @var{mbox}."	pointer
)	O
{	O
struct	O
mu_mailbox	struct
*	O
mum	pointer
;	O
int	O
status	int
;	O
SCM_ASSERT	function
(	O
mu_scm_is_mailbox	function
(	O
mbox	pointer
)	O
,	O
mbox	pointer
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
mum	pointer
=	O
(	O
struct	O
mu_mailbox	struct
*	O
)	O
SCM_CDR	function
(	O
mbox	pointer
)	O
;	O
status	int
=	O
mu_mailbox_expunge	function
(	O
mum	pointer
->	O
mbox	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot expunge messages in mailbox ~A"	pointer
,	O
scm_list_1	function
(	O
mbox	pointer
)	O
)	O
;	O
return	O
SCM_BOOL_T	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_mailbox_sync	O
,	O
"mu-mailbox-sync"	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
mbox	pointer
)	O
,	O
"Synchronize changes to @var{mbox} with its storage."	pointer
)	O
{	O
struct	O
mu_mailbox	struct
*	O
mum	pointer
;	O
int	O
status	int
;	O
SCM_ASSERT	function
(	O
mu_scm_is_mailbox	function
(	O
mbox	pointer
)	O
,	O
mbox	pointer
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
mum	pointer
=	O
(	O
struct	O
mu_mailbox	struct
*	O
)	O
SCM_CDR	function
(	O
mbox	pointer
)	O
;	O
status	int
=	O
mu_mailbox_sync	function
(	O
mum	pointer
->	O
mbox	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Sync failed for mailbox ~A"	pointer
,	O
scm_list_1	function
(	O
mbox	pointer
)	O
)	O
;	O
return	O
SCM_BOOL_T	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_mailbox_flush	O
,	O
"mu-mailbox-flush"	pointer
,	O
1	int
,	O
1	int
,	O
0	int
,	O
(	O
SCM	function
mbox	pointer
,	O
SCM	function
expunge	int
)	O
,	O
"Mark all messages in @var{mbox} as seen and synchronize all changes with "	pointer
"its storage.  If @var{expunge} is @samp{#t}, expunge deleted messages "	pointer
"as well."	pointer
)	O
{	O
struct	O
mu_mailbox	struct
*	O
mum	pointer
;	O
int	O
status	int
,	O
do_expunge	int
=	O
0	int
;	O
SCM_ASSERT	function
(	O
mu_scm_is_mailbox	function
(	O
mbox	pointer
)	O
,	O
mbox	pointer
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
mum	pointer
=	O
(	O
struct	O
mu_mailbox	struct
*	O
)	O
SCM_CDR	function
(	O
mbox	pointer
)	O
;	O
if	O
(	O
!	O
SCM_UNBNDP	function
(	O
expunge	int
)	O
)	O
{	O
SCM_ASSERT	function
(	O
scm_is_bool	function
(	O
expunge	int
)	O
,	O
expunge	int
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
do_expunge	int
=	O
expunge	int
==	O
SCM_BOOL_T	O
;	O
}	O
status	int
=	O
mu_mailbox_flush	function
(	O
mum	pointer
->	O
mbox	pointer
,	O
do_expunge	int
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Flush failed for mailbox ~A"	pointer
,	O
scm_list_1	function
(	O
mbox	pointer
)	O
)	O
;	O
return	O
SCM_BOOL_T	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_mailbox_append_message	O
,	O
"mu-mailbox-append-message"	pointer
,	O
2	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
mbox	pointer
,	O
SCM	function
mesg	int
)	O
,	O
"Appends message @var{mesg} to the mailbox @var{mbox}."	pointer
)	O
{	O
struct	O
mu_mailbox	struct
*	O
mum	pointer
;	O
mu_message_t	pointer
msg	pointer
;	O
int	O
status	int
;	O
SCM_ASSERT	function
(	O
mu_scm_is_mailbox	function
(	O
mbox	pointer
)	O
,	O
mbox	pointer
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
SCM_ASSERT	function
(	O
mu_scm_is_message	function
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
mum	pointer
=	O
(	O
struct	O
mu_mailbox	struct
*	O
)	O
SCM_CDR	function
(	O
mbox	pointer
)	O
;	O
msg	pointer
=	O
mu_scm_message_get	function
(	O
mesg	int
)	O
;	O
status	int
=	O
mu_mailbox_append_message	function
(	O
mum	pointer
->	O
mbox	pointer
,	O
msg	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot append message ~A to mailbox ~A"	pointer
,	O
scm_list_2	function
(	O
mesg	int
,	O
mbox	pointer
)	O
)	O
;	O
return	O
SCM_BOOL_T	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_mailbox_first_message	O
,	O
"mu-mailbox-first-message"	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
mbox	pointer
)	O
,	O
"Returns first message from the mailbox @var{mbox}."	pointer
)	O
{	O
struct	O
mu_mailbox	struct
*	O
mum	pointer
;	O
int	O
status	int
;	O
mu_message_t	pointer
msg	pointer
;	O
SCM_ASSERT	function
(	O
mu_scm_is_mailbox	function
(	O
mbox	pointer
)	O
,	O
mbox	pointer
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
mum	pointer
=	O
(	O
struct	O
mu_mailbox	struct
*	O
)	O
SCM_CDR	function
(	O
mbox	pointer
)	O
;	O
if	O
(	O
!	O
mum	pointer
->	O
itr	pointer
)	O
{	O
status	int
=	O
mu_mailbox_get_iterator	function
(	O
mum	pointer
->	O
mbox	pointer
,	O
&	O
mum	pointer
->	O
itr	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"~A: cannot create iterator: ~A"	pointer
,	O
scm_list_2	function
(	O
mbox	pointer
,	O
scm_from_locale_string	function
(	O
mu_strerror	function
(	O
status	int
)	O
)	O
)	O
)	O
;	O
}	O
ITROP	O
(	O
mu_iterator_first	function
(	O
mum	pointer
->	O
itr	pointer
)	O
,	O
"moving to the first message"	pointer
)	O
;	O
ITROP	O
(	O
mu_iterator_current	function
(	O
mum	pointer
->	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
msg	pointer
)	O
,	O
"getting current message"	pointer
)	O
;	O
return	O
mu_scm_message_create	function
(	O
mbox	pointer
,	O
msg	pointer
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_mailbox_next_message	O
,	O
"mu-mailbox-next-message"	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
mbox	pointer
)	O
,	O
"Returns next message from the mailbox @var{mbox}."	pointer
)	O
{	O
struct	O
mu_mailbox	struct
*	O
mum	pointer
;	O
int	O
status	int
;	O
mu_message_t	pointer
msg	pointer
;	O
SCM_ASSERT	function
(	O
mu_scm_is_mailbox	function
(	O
mbox	pointer
)	O
,	O
mbox	pointer
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
mum	pointer
=	O
(	O
struct	O
mu_mailbox	struct
*	O
)	O
SCM_CDR	function
(	O
mbox	pointer
)	O
;	O
if	O
(	O
!	O
mum	pointer
->	O
itr	pointer
)	O
{	O
status	int
=	O
mu_mailbox_get_iterator	function
(	O
mum	pointer
->	O
mbox	pointer
,	O
&	O
mum	pointer
->	O
itr	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"~A: cannot create iterator: ~A"	pointer
,	O
scm_list_2	function
(	O
mbox	pointer
,	O
scm_from_locale_string	function
(	O
mu_strerror	function
(	O
status	int
)	O
)	O
)	O
)	O
;	O
ITROP	O
(	O
mu_iterator_first	function
(	O
mum	pointer
->	O
itr	pointer
)	O
,	O
"moving to the first message"	pointer
)	O
;	O
}	O
else	O
ITROP	O
(	O
mu_iterator_next	function
(	O
mum	pointer
->	O
itr	pointer
)	O
,	O
"advancing iterator"	pointer
)	O
;	O
ITROP	O
(	O
mu_iterator_current	function
(	O
mum	pointer
->	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
msg	pointer
)	O
,	O
"getting current message"	pointer
)	O
;	O
return	O
mu_scm_message_create	function
(	O
mbox	pointer
,	O
msg	pointer
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_mailbox_more_messages_p	O
,	O
"mu-mailbox-more-messages?"	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
mbox	pointer
)	O
,	O
"Returns @samp{#t} if there are more messages in the mailbox @var{mbox}\n"	pointer
"ahead of current iterator position.  Usually this function is used after\n"	pointer
"a call to @samp{mu-mailbox-first-message} or @samp{mu-mailbox-next-message}.\n"	pointer
"If not, it initializes the iterator and points it to the first message in"	pointer
"the mailbox."	pointer
)	O
{	O
struct	O
mu_mailbox	struct
*	O
mum	pointer
;	O
int	O
status	int
;	O
SCM_ASSERT	function
(	O
mu_scm_is_mailbox	function
(	O
mbox	pointer
)	O
,	O
mbox	pointer
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
mum	pointer
=	O
(	O
struct	O
mu_mailbox	struct
*	O
)	O
SCM_CDR	function
(	O
mbox	pointer
)	O
;	O
if	O
(	O
!	O
mum	pointer
->	O
itr	pointer
)	O
{	O
status	int
=	O
mu_mailbox_get_iterator	function
(	O
mum	pointer
->	O
mbox	pointer
,	O
&	O
mum	pointer
->	O
itr	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"~A: cannot create iterator: ~A"	pointer
,	O
scm_list_2	function
(	O
mbox	pointer
,	O
scm_from_locale_string	function
(	O
mu_strerror	function
(	O
status	int
)	O
)	O
)	O
)	O
;	O
status	int
=	O
mu_iterator_first	function
(	O
mum	pointer
->	O
itr	pointer
)	O
;	O
if	O
(	O
status	int
==	O
MU_ERR_NOENT	O
)	O
return	O
SCM_BOOL_F	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"~A: cannot set iterator to the first message: ~A"	pointer
,	O
scm_list_2	function
(	O
mbox	pointer
,	O
scm_from_locale_string	function
(	O
mu_strerror	function
(	O
status	int
)	O
)	O
)	O
)	O
;	O
}	O
return	O
scm_from_bool	function
(	O
!	O
mu_iterator_is_done	function
(	O
mum	pointer
->	O
itr	pointer
)	O
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_mailbox_get_size	O
,	O
"mu-mailbox-get-size"	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
mbox	pointer
)	O
,	O
"Return size of the mailbox @var{mbox}."	pointer
)	O
{	O
struct	O
mu_mailbox	struct
*	O
mum	pointer
;	O
int	O
status	int
;	O
mu_off_t	long
size	pointer
;	O
SCM_ASSERT	function
(	O
mu_scm_is_mailbox	function
(	O
mbox	pointer
)	O
,	O
mbox	pointer
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
mum	pointer
=	O
(	O
struct	O
mu_mailbox	struct
*	O
)	O
SCM_CDR	function
(	O
mbox	pointer
)	O
;	O
status	int
=	O
mu_mailbox_get_size	function
(	O
mum	pointer
->	O
mbox	pointer
,	O
&	O
size	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"~A: cannot determine mailbox size: ~A"	pointer
,	O
scm_list_2	function
(	O
mbox	pointer
,	O
scm_from_locale_string	function
(	O
mu_strerror	function
(	O
status	int
)	O
)	O
)	O
)	O
;	O
return	O
scm_from_uintmax	function
(	O
size	pointer
)	O
;	O
}	O
void	O
mu_scm_mailbox_init	function
(	O
)	O
{	O
mailbox_tag	int
=	O
scm_make_smob_type	function
(	O
"mailbox"	pointer
,	O
sizeof	O
(	O
struct	O
mu_mailbox	struct
)	O
)	O
;	O
scm_set_smob_free	function
(	O
mailbox_tag	int
,	O
mu_scm_mailbox_free	function
)	O
;	O
scm_set_smob_print	function
(	O
mailbox_tag	int
,	O
mu_scm_mailbox_print	function
)	O
;	O
}	O
