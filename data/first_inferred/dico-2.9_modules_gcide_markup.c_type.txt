typedef	O
int8_t	char
flex_int8_t	char
;	O
typedef	O
uint8_t	char
flex_uint8_t	char
;	O
typedef	O
int16_t	short
flex_int16_t	short
;	O
typedef	O
uint16_t	short
flex_uint16_t	short
;	O
typedef	O
int32_t	int
flex_int32_t	int
;	O
typedef	O
uint32_t	int
flex_uint32_t	int
;	O
typedef	O
struct	O
yy_buffer_state	struct
*	O
YY_BUFFER_STATE	pointer
;	O
typedef	O
size_t	long
yy_size_t	long
;	O
extern	O
yy_size_t	long
yyleng	O
;	O
extern	O
FILE	struct
*	O
yyin	O
,	O
*	O
yyout	O
;	O
struct	O
yy_buffer_state	struct
{	O
FILE	struct
*	O
yy_input_file	pointer
;	O
char	O
*	O
yy_ch_buf	pointer
;	O
char	O
*	O
yy_buf_pos	pointer
;	O
yy_size_t	long
yy_buf_size	long
;	O
yy_size_t	long
yy_n_chars	long
;	O
int	O
yy_is_our_buffer	int
;	O
int	O
yy_is_interactive	int
;	O
int	O
yy_at_bol	int
;	O
int	O
yy_bs_lineno	int
;	O
int	O
yy_bs_column	int
;	O
int	O
yy_fill_buffer	int
;	O
int	O
yy_buffer_status	int
;	O
}	O
;	O
static	O
size_t	long
yy_buffer_stack_top	long
=	O
0	int
;	O
static	O
size_t	long
yy_buffer_stack_max	long
=	O
0	int
;	O
static	O
YY_BUFFER_STATE	pointer
*	O
yy_buffer_stack	pointer
=	O
0	int
;	O
static	O
char	O
yy_hold_char	char
;	O
static	O
yy_size_t	long
yy_n_chars	long
;	O
yy_size_t	long
yyleng	O
;	O
static	O
char	O
*	O
yy_c_buf_p	pointer
=	O
(	O
char	O
*	O
)	O
0	int
;	O
static	O
int	O
yy_init	int
=	O
0	int
;	O
static	O
int	O
yy_start	int
=	O
0	int
;	O
static	O
int	O
yy_did_buffer_switch_on_eof	int
;	O
void	O
yyrestart	O
(	O
FILE	struct
*	O
input_file	pointer
)	O
;	O
void	O
yy_switch_to_buffer	O
(	O
YY_BUFFER_STATE	pointer
new_buffer	pointer
)	O
;	O
YY_BUFFER_STATE	pointer
yy_create_buffer	O
(	O
FILE	struct
*	O
file	pointer
,	O
int	O
size	long
)	O
;	O
void	O
yy_delete_buffer	O
(	O
YY_BUFFER_STATE	pointer
b	pointer
)	O
;	O
void	O
yy_flush_buffer	O
(	O
YY_BUFFER_STATE	pointer
b	pointer
)	O
;	O
void	O
yypush_buffer_state	function
(	O
YY_BUFFER_STATE	pointer
new_buffer	pointer
)	O
;	O
void	O
yypop_buffer_state	function
(	O
void	O
)	O
;	O
static	O
void	O
yyensure_buffer_stack	function
(	O
void	O
)	O
;	O
static	O
void	O
yy_load_buffer_state	O
(	O
void	O
)	O
;	O
static	O
void	O
yy_init_buffer	O
(	O
YY_BUFFER_STATE	pointer
b	pointer
,	O
FILE	struct
*	O
file	pointer
)	O
;	O
YY_BUFFER_STATE	pointer
yy_scan_buffer	function
(	O
char	O
*	O
base	pointer
,	O
yy_size_t	long
size	long
)	O
;	O
YY_BUFFER_STATE	pointer
yy_scan_string	function
(	O
yyconst	O
char	O
*	O
yy_str	pointer
)	O
;	O
YY_BUFFER_STATE	pointer
yy_scan_bytes	function
(	O
yyconst	O
char	O
*	O
bytes	pointer
,	O
yy_size_t	long
len	int
)	O
;	O
void	O
*	O
yyalloc	O
(	O
yy_size_t	long
)	O
;	O
void	O
*	O
yyrealloc	O
(	O
void	O
*	O
,	O
yy_size_t	long
)	O
;	O
void	O
yyfree	O
(	O
void	O
*	O
)	O
;	O
typedef	O
unsigned	O
char	O
YY_CHAR	char
;	O
FILE	struct
*	O
yyin	O
=	O
(	O
FILE	struct
*	O
)	O
0	int
,	O
*	O
yyout	O
=	O
(	O
FILE	struct
*	O
)	O
0	int
;	O
typedef	O
int	O
yy_state_type	int
;	O
extern	O
int	O
yylineno	O
;	O
int	O
yylineno	O
=	O
1	int
;	O
extern	O
char	O
*	O
yytext	O
;	O
static	O
yy_state_type	int
yy_get_previous_state	function
(	O
void	O
)	O
;	O
static	O
yy_state_type	int
yy_try_NUL_trans	function
(	O
yy_state_type	int
current_state	int
)	O
;	O
static	O
int	O
yy_get_next_buffer	function
(	O
void	O
)	O
;	O
static	O
void	O
yy_fatal_error	function
(	O
yyconst	O
char	O
msg	array
[	O
]	O
)	O
;	O
struct	O
yy_trans_info	struct
{	O
flex_int32_t	int
yy_verify	int
;	O
flex_int32_t	int
yy_nxt	int
;	O
}	O
;	O
static	O
yyconst	O
flex_int16_t	short
yy_accept	array
[	O
39	int
]	O
=	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
16	int
,	O
10	int
,	O
11	int
,	O
9	int
,	O
7	int
,	O
10	int
,	O
10	int
,	O
13	int
,	O
13	int
,	O
14	int
,	O
2	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
12	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
6	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
4	int
,	O
3	int
,	O
0	int
,	O
0	int
,	O
5	int
,	O
3	int
,	O
8	int
,	O
0	int
}	O
;	O
static	O
yyconst	O
flex_int32_t	int
yy_ec	array
[	O
256	int
]	O
=	O
{	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
2	int
,	O
3	int
,	O
1	int
,	O
1	int
,	O
4	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
2	int
,	O
5	int
,	O
6	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
7	int
,	O
1	int
,	O
1	int
,	O
6	int
,	O
1	int
,	O
1	int
,	O
8	int
,	O
1	int
,	O
9	int
,	O
10	int
,	O
10	int
,	O
10	int
,	O
10	int
,	O
10	int
,	O
10	int
,	O
10	int
,	O
10	int
,	O
10	int
,	O
10	int
,	O
1	int
,	O
1	int
,	O
11	int
,	O
1	int
,	O
12	int
,	O
13	int
,	O
1	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
1	int
,	O
15	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
6	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
17	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
14	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
}	O
;	O
static	O
yyconst	O
flex_int32_t	int
yy_meta	array
[	O
18	int
]	O
=	O
{	O
0	int
,	O
1	int
,	O
2	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
3	int
,	O
3	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
4	int
,	O
1	int
,	O
4	int
,	O
4	int
}	O
;	O
static	O
yyconst	O
flex_int16_t	short
yy_base	array
[	O
46	int
]	O
=	O
{	O
0	int
,	O
0	int
,	O
13	int
,	O
27	int
,	O
37	int
,	O
37	int
,	O
102	int
,	O
102	int
,	O
102	int
,	O
102	int
,	O
44	int
,	O
29	int
,	O
23	int
,	O
102	int
,	O
22	int
,	O
102	int
,	O
25	int
,	O
15	int
,	O
22	int
,	O
53	int
,	O
62	int
,	O
2	int
,	O
15	int
,	O
102	int
,	O
102	int
,	O
14	int
,	O
13	int
,	O
102	int
,	O
14	int
,	O
1	int
,	O
10	int
,	O
102	int
,	O
102	int
,	O
4	int
,	O
9	int
,	O
102	int
,	O
102	int
,	O
102	int
,	O
102	int
,	O
79	int
,	O
83	int
,	O
87	int
,	O
1	int
,	O
89	int
,	O
93	int
,	O
97	int
}	O
;	O
static	O
yyconst	O
flex_int16_t	short
yy_def	array
[	O
46	int
]	O
=	O
{	O
0	int
,	O
39	int
,	O
39	int
,	O
40	int
,	O
40	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
41	int
,	O
38	int
,	O
41	int
,	O
38	int
,	O
38	int
,	O
42	int
,	O
43	int
,	O
44	int
,	O
44	int
,	O
38	int
,	O
41	int
,	O
38	int
,	O
38	int
,	O
45	int
,	O
45	int
,	O
38	int
,	O
43	int
,	O
44	int
,	O
20	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
45	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
0	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
}	O
;	O
static	O
yyconst	O
flex_int16_t	short
yy_nxt	int
[	O
120	int
]	O
=	O
{	O
0	int
,	O
38	int
,	O
38	int
,	O
7	int
,	O
8	int
,	O
25	int
,	O
9	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
10	int
,	O
33	int
,	O
31	int
,	O
37	int
,	O
11	int
,	O
7	int
,	O
8	int
,	O
33	int
,	O
9	int
,	O
37	int
,	O
35	int
,	O
31	int
,	O
27	int
,	O
10	int
,	O
36	int
,	O
35	int
,	O
23	int
,	O
11	int
,	O
13	int
,	O
14	int
,	O
27	int
,	O
26	int
,	O
24	int
,	O
23	int
,	O
23	int
,	O
21	int
,	O
38	int
,	O
13	int
,	O
13	int
,	O
14	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
13	int
,	O
15	int
,	O
38	int
,	O
38	int
,	O
16	int
,	O
17	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
18	int
,	O
19	int
,	O
38	int
,	O
19	int
,	O
20	int
,	O
27	int
,	O
30	int
,	O
38	int
,	O
31	int
,	O
38	int
,	O
30	int
,	O
38	int
,	O
30	int
,	O
30	int
,	O
27	int
,	O
30	int
,	O
38	int
,	O
32	int
,	O
38	int
,	O
30	int
,	O
38	int
,	O
30	int
,	O
30	int
,	O
6	int
,	O
6	int
,	O
6	int
,	O
6	int
,	O
12	int
,	O
12	int
,	O
12	int
,	O
12	int
,	O
22	int
,	O
38	int
,	O
22	int
,	O
22	int
,	O
28	int
,	O
28	int
,	O
29	int
,	O
29	int
,	O
29	int
,	O
29	int
,	O
34	int
,	O
34	int
,	O
34	int
,	O
34	int
,	O
5	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
}	O
;	O
static	O
yyconst	O
flex_int16_t	short
yy_chk	array
[	O
120	int
]	O
=	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
42	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
29	int
,	O
1	int
,	O
21	int
,	O
29	int
,	O
33	int
,	O
1	int
,	O
2	int
,	O
2	int
,	O
21	int
,	O
2	int
,	O
33	int
,	O
34	int
,	O
30	int
,	O
28	int
,	O
2	int
,	O
26	int
,	O
25	int
,	O
22	int
,	O
2	int
,	O
3	int
,	O
3	int
,	O
18	int
,	O
17	int
,	O
16	int
,	O
14	int
,	O
12	int
,	O
11	int
,	O
5	int
,	O
3	int
,	O
4	int
,	O
4	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
4	int
,	O
10	int
,	O
0	int
,	O
0	int
,	O
10	int
,	O
10	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
10	int
,	O
10	int
,	O
0	int
,	O
10	int
,	O
10	int
,	O
19	int
,	O
19	int
,	O
0	int
,	O
19	int
,	O
0	int
,	O
19	int
,	O
0	int
,	O
19	int
,	O
19	int
,	O
20	int
,	O
20	int
,	O
0	int
,	O
20	int
,	O
0	int
,	O
20	int
,	O
0	int
,	O
20	int
,	O
20	int
,	O
39	int
,	O
39	int
,	O
39	int
,	O
39	int
,	O
40	int
,	O
40	int
,	O
40	int
,	O
40	int
,	O
41	int
,	O
0	int
,	O
41	int
,	O
41	int
,	O
43	int
,	O
43	int
,	O
44	int
,	O
44	int
,	O
44	int
,	O
44	int
,	O
45	int
,	O
45	int
,	O
45	int
,	O
45	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
,	O
38	int
}	O
;	O
static	O
yy_state_type	int
yy_last_accepting_state	int
;	O
static	O
char	O
*	O
yy_last_accepting_cpos	pointer
;	O
extern	O
int	O
yy_flex_debug	O
;	O
int	O
yy_flex_debug	O
=	O
1	int
;	O
static	O
yyconst	O
flex_int16_t	short
yy_rule_linenum	array
[	O
15	int
]	O
=	O
{	O
0	int
,	O
267	int
,	O
268	int
,	O
269	int
,	O
270	int
,	O
284	int
,	O
295	int
,	O
303	int
,	O
304	int
,	O
316	int
,	O
317	int
,	O
318	int
,	O
321	int
,	O
325	int
,	O
326	int
}	O
;	O
char	O
*	O
yytext	O
;	O
static	O
char	O
const	O
*	O
input_buf	pointer
;	O
static	O
size_t	long
input_len	long
;	O
static	O
unsigned	O
token_beg	int
;	O
static	O
unsigned	O
token_end	int
;	O
static	O
char	O
*	O
textspace	pointer
;	O
static	O
size_t	long
textsize	long
;	O
static	O
size_t	long
textpos	long
;	O
static	O
size_t	long
textstart	long
;	O
static	O
dico_list_t	pointer
tagstk	pointer
;	O
static	O
struct	O
gcide_tag	struct
*	O
current_tag	pointer
;	O
static	O
jmp_buf	array
errbuf	array
;	O
static	O
void	O
memerr	function
(	O
const	O
char	O
*	O
text	pointer
)	O
{	O
dico_log	function
(	O
L_ERR	int
,	O
ENOMEM	int
,	O
"%s"	pointer
,	O
text	pointer
)	O
;	O
longjmp	function
(	O
errbuf	array
,	O
1	int
)	O
;	O
}	O
static	O
int	O
retstate	int
;	O
static	O
char	O
*	O
endtag	pointer
;	O
static	O
void	O
text_add_str	function
(	O
char	O
const	O
*	O
s	pointer
,	O
size_t	long
l	long
)	O
{	O
size_t	long
rest	long
=	O
textsize	long
-	O
textpos	long
;	O
if	O
(	O
rest	long
<	O
l	long
)	O
{	O
size_t	long
nsize	long
=	O
2	int
*	O
textsize	long
;	O
char	O
*	O
newp	pointer
=	O
realloc	function
(	O
textspace	pointer
,	O
nsize	long
)	O
;	O
if	O
(	O
!	O
newp	pointer
)	O
memerr	function
(	O
"text_add"	pointer
)	O
;	O
textspace	pointer
=	O
newp	pointer
;	O
textsize	long
=	O
nsize	long
;	O
}	O
memcpy	function
(	O
textspace	pointer
+	O
textpos	long
,	O
s	pointer
,	O
l	long
)	O
;	O
textpos	long
+=	O
l	long
;	O
}	O
static	O
void	O
text_add_chr	function
(	O
int	O
ch	int
)	O
{	O
char	O
c	int
=	O
ch	int
;	O
text_add_str	function
(	O
&	O
c	int
,	O
1	int
)	O
;	O
}	O
static	O
size_t	long
text_segment_finish	function
(	O
)	O
{	O
size_t	long
ret	pointer
=	O
textstart	long
;	O
text_add_chr	function
(	O
0	int
)	O
;	O
textstart	long
=	O
textpos	long
;	O
return	O
ret	pointer
;	O
}	O
static	O
struct	O
gcide_tag	struct
*	O
alloc_tag	function
(	O
const	O
char	O
*	O
text	pointer
,	O
size_t	long
len	int
)	O
{	O
struct	O
gcide_tag	struct
*	O
tag	pointer
;	O
struct	O
wordsplit	struct
ws	pointer
;	O
if	O
(	O
wordsplit_len	function
(	O
text	pointer
,	O
len	int
,	O
&	O
ws	pointer
,	O
WRDSF_DEFFLAGS	O
&	O
~	O
WRDSF_CESCAPES	int
)	O
)	O
{	O
dico_log	function
(	O
L_ERR	int
,	O
0	int
,	O
_	O
(	O
"cannot parse line %.*s: %s"	pointer
)	O
,	O
(	O
int	O
)	O
len	int
,	O
text	pointer
,	O
wordsplit_strerror	function
(	O
&	O
ws	pointer
)	O
)	O
;	O
longjmp	function
(	O
errbuf	array
,	O
1	int
)	O
;	O
}	O
tag	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
tag	pointer
)	O
)	O
;	O
if	O
(	O
tag	pointer
)	O
{	O
tag	pointer
->	O
tag_parmc	long
=	O
ws	pointer
.	O
ws_wordc	long
;	O
tag	pointer
->	O
tag_parmv	pointer
=	O
ws	pointer
.	O
ws_wordv	pointer
;	O
ws	pointer
.	O
ws_wordc	long
=	O
0	int
;	O
ws	pointer
.	O
ws_wordv	pointer
=	O
NULL	O
;	O
}	O
else	O
memerr	function
(	O
"gcide alloc_tag"	pointer
)	O
;	O
wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
return	O
tag	pointer
;	O
}	O
static	O
int	O
free_tag	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
gcide_tag	struct
*	O
tag	pointer
=	O
item	pointer
;	O
if	O
(	O
!	O
tag	pointer
)	O
return	O
0	int
;	O
switch	O
(	O
tag	pointer
->	O
tag_type	enum
)	O
{	O
case	O
gcide_content_unspecified	int
:	O
case	O
gcide_content_text	int
:	O
break	O
;	O
case	O
gcide_content_taglist	int
:	O
dico_list_destroy	function
(	O
&	O
tag	pointer
->	O
tag_v	union
.	O
taglist	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
append_tag	function
(	O
struct	O
gcide_tag	struct
*	O
tag	pointer
)	O
{	O
dico_list_t	pointer
list	array
;	O
switch	O
(	O
current_tag	pointer
->	O
tag_type	enum
)	O
{	O
case	O
gcide_content_unspecified	int
:	O
list	array
=	O
dico_list_create	function
(	O
)	O
;	O
if	O
(	O
!	O
list	array
)	O
{	O
free	function
(	O
tag	pointer
)	O
;	O
memerr	function
(	O
"append_tag"	pointer
)	O
;	O
}	O
dico_list_set_free_item	function
(	O
list	array
,	O
free_tag	function
,	O
NULL	O
)	O
;	O
current_tag	pointer
->	O
tag_type	enum
=	O
gcide_content_taglist	int
;	O
current_tag	pointer
->	O
tag_v	union
.	O
taglist	pointer
=	O
list	array
;	O
break	O
;	O
case	O
gcide_content_text	int
:	O
{	O
struct	O
gcide_tag	struct
*	O
subtag	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
tag	pointer
)	O
)	O
;	O
if	O
(	O
!	O
subtag	pointer
)	O
memerr	function
(	O
"append_tag"	pointer
)	O
;	O
subtag	pointer
->	O
tag_type	enum
=	O
gcide_content_text	int
;	O
subtag	pointer
->	O
tag_v	union
.	O
textpos	long
=	O
current_tag	pointer
->	O
tag_v	union
.	O
textpos	long
;	O
list	array
=	O
dico_list_create	function
(	O
)	O
;	O
if	O
(	O
!	O
list	array
)	O
{	O
free	function
(	O
subtag	pointer
)	O
;	O
free	function
(	O
tag	pointer
)	O
;	O
memerr	function
(	O
"append_tag"	pointer
)	O
;	O
}	O
dico_list_set_free_item	function
(	O
list	array
,	O
free_tag	function
,	O
NULL	O
)	O
;	O
dico_list_append	function
(	O
list	array
,	O
subtag	pointer
)	O
;	O
current_tag	pointer
->	O
tag_type	enum
=	O
gcide_content_taglist	int
;	O
current_tag	pointer
->	O
tag_v	union
.	O
taglist	pointer
=	O
list	array
;	O
break	O
;	O
}	O
case	O
gcide_content_taglist	int
:	O
break	O
;	O
}	O
dico_list_append	function
(	O
current_tag	pointer
->	O
tag_v	union
.	O
taglist	pointer
,	O
tag	pointer
)	O
;	O
}	O
static	O
int	O
in_grk	int
;	O
static	O
void	O
push_tag	function
(	O
struct	O
gcide_tag	struct
*	O
tag	pointer
)	O
{	O
append_tag	function
(	O
tag	pointer
)	O
;	O
dico_list_push	O
(	O
tagstk	pointer
,	O
current_tag	pointer
)	O
;	O
current_tag	pointer
=	O
tag	pointer
;	O
in_grk	int
=	O
current_tag	pointer
->	O
tag_parmc	long
&&	O
strcmp	function
(	O
current_tag	pointer
->	O
tag_name	O
,	O
"grk"	pointer
)	O
==	O
0	int
;	O
}	O
static	O
void	O
pop_tag	function
(	O
const	O
char	O
*	O
tagstr	pointer
,	O
size_t	long
taglen	long
)	O
{	O
size_t	long
len	int
;	O
for	O
(	O
len	int
=	O
0	int
;	O
len	int
<	O
taglen	long
;	O
len	int
++	O
)	O
if	O
(	O
tagstr	pointer
[	O
len	int
]	O
==	O
' '	O
||	O
tagstr	pointer
[	O
len	int
]	O
==	O
'\t'	O
)	O
break	O
;	O
if	O
(	O
len	int
==	O
3	int
&&	O
memcmp	function
(	O
tagstr	pointer
,	O
"grk"	pointer
,	O
3	int
)	O
==	O
0	int
)	O
in_grk	int
=	O
0	int
;	O
if	O
(	O
TAG_HAS_NAME	O
(	O
current_tag	pointer
)	O
&&	O
strlen	function
(	O
current_tag	pointer
->	O
tag_name	O
)	O
==	O
len	int
&&	O
memcmp	function
(	O
current_tag	pointer
->	O
tag_name	O
,	O
tagstr	pointer
,	O
len	int
)	O
==	O
0	int
)	O
current_tag	pointer
=	O
dico_list_pop	function
(	O
tagstk	pointer
)	O
;	O
else	O
dico_log	function
(	O
L_WARN	int
,	O
0	int
,	O
"%u: unexpected close tag"	pointer
,	O
token_beg	int
)	O
;	O
}	O
static	O
int	O
yy_init_globals	function
(	O
void	O
)	O
;	O
int	O
yylex_destroy	O
(	O
void	O
)	O
;	O
int	O
yyget_debug	O
(	O
void	O
)	O
;	O
void	O
yyset_debug	O
(	O
int	O
debug_flag	int
)	O
;	O
YY_EXTRA_TYPE	O
yyget_extra	O
(	O
void	O
)	O
;	O
void	O
yyset_extra	O
(	O
YY_EXTRA_TYPE	O
user_defined	pointer
)	O
;	O
FILE	struct
*	O
yyget_in	O
(	O
void	O
)	O
;	O
void	O
yyset_in	O
(	O
FILE	struct
*	O
in_str	pointer
)	O
;	O
FILE	struct
*	O
yyget_out	O
(	O
void	O
)	O
;	O
void	O
yyset_out	O
(	O
FILE	struct
*	O
out_str	pointer
)	O
;	O
yy_size_t	long
yyget_leng	O
(	O
void	O
)	O
;	O
char	O
*	O
yyget_text	O
(	O
void	O
)	O
;	O
int	O
yyget_lineno	O
(	O
void	O
)	O
;	O
void	O
yyset_lineno	O
(	O
int	O
line_number	int
)	O
;	O
extern	O
int	O
yywrap	O
(	O
void	O
)	O
;	O
extern	O
int	O
yylex	O
(	O
void	O
)	O
;	O
YY_DECL	O
{	O
register	O
yy_state_type	int
yy_current_state	int
;	O
register	O
char	O
*	O
yy_cp	pointer
,	O
*	O
yy_bp	pointer
;	O
register	O
int	O
yy_act	int
;	O
if	O
(	O
!	O
(	O
yy_init	int
)	O
)	O
{	O
(	O
yy_init	int
)	O
=	O
1	int
;	O
if	O
(	O
!	O
(	O
yy_start	int
)	O
)	O
(	O
yy_start	int
)	O
=	O
1	int
;	O
if	O
(	O
!	O
yyin	O
)	O
yyin	O
=	O
stdin	pointer
;	O
if	O
(	O
!	O
yyout	O
)	O
yyout	O
=	O
stdout	pointer
;	O
if	O
(	O
!	O
YY_CURRENT_BUFFER	O
)	O
{	O
yyensure_buffer_stack	function
(	O
)	O
;	O
YY_CURRENT_BUFFER_LVALUE	O
=	O
yy_create_buffer	O
(	O
yyin	O
,	O
YY_BUF_SIZE	int
)	O
;	O
}	O
yy_load_buffer_state	O
(	O
)	O
;	O
}	O
while	O
(	O
1	int
)	O
{	O
yy_cp	pointer
=	O
(	O
yy_c_buf_p	pointer
)	O
;	O
*	O
yy_cp	pointer
=	O
(	O
yy_hold_char	char
)	O
;	O
yy_bp	pointer
=	O
yy_cp	pointer
;	O
yy_current_state	int
=	O
(	O
yy_start	int
)	O
;	O
yy_match	O
:	O
do	O
{	O
register	O
YY_CHAR	char
yy_c	char
=	O
yy_ec	array
[	O
YY_SC_TO_UI	O
(	O
*	O
yy_cp	pointer
)	O
]	O
;	O
if	O
(	O
yy_accept	array
[	O
yy_current_state	int
]	O
)	O
{	O
(	O
yy_last_accepting_state	int
)	O
=	O
yy_current_state	int
;	O
(	O
yy_last_accepting_cpos	pointer
)	O
=	O
yy_cp	pointer
;	O
}	O
while	O
(	O
yy_chk	array
[	O
yy_base	array
[	O
yy_current_state	int
]	O
+	O
yy_c	char
]	O
!=	O
yy_current_state	int
)	O
{	O
yy_current_state	int
=	O
(	O
int	O
)	O
yy_def	array
[	O
yy_current_state	int
]	O
;	O
if	O
(	O
yy_current_state	int
>=	O
39	int
)	O
yy_c	char
=	O
yy_meta	array
[	O
(	O
unsigned	O
int	O
)	O
yy_c	char
]	O
;	O
}	O
yy_current_state	int
=	O
yy_nxt	int
[	O
yy_base	array
[	O
yy_current_state	int
]	O
+	O
(	O
unsigned	O
int	O
)	O
yy_c	char
]	O
;	O
++	O
yy_cp	pointer
;	O
}	O
while	O
(	O
yy_base	array
[	O
yy_current_state	int
]	O
!=	O
102	int
)	O
;	O
yy_find_action	O
:	O
yy_act	int
=	O
yy_accept	array
[	O
yy_current_state	int
]	O
;	O
if	O
(	O
yy_act	int
==	O
0	int
)	O
{	O
yy_cp	pointer
=	O
(	O
yy_last_accepting_cpos	pointer
)	O
;	O
yy_current_state	int
=	O
(	O
yy_last_accepting_state	int
)	O
;	O
yy_act	int
=	O
yy_accept	array
[	O
yy_current_state	int
]	O
;	O
}	O
YY_DO_BEFORE_ACTION	O
;	O
do_action	O
:	O
if	O
(	O
yy_flex_debug	O
)	O
{	O
if	O
(	O
yy_act	int
==	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"--scanner backing up\n"	pointer
)	O
;	O
else	O
if	O
(	O
yy_act	int
<	O
15	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"--accepting rule at line %ld (\"%s\")\n"	pointer
,	O
(	O
long	O
)	O
yy_rule_linenum	array
[	O
yy_act	int
]	O
,	O
yytext	O
)	O
;	O
else	O
if	O
(	O
yy_act	int
==	O
15	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"--accepting default rule (\"%s\")\n"	pointer
,	O
yytext	O
)	O
;	O
else	O
if	O
(	O
yy_act	int
==	O
16	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"--(end of buffer or a NUL)\n"	pointer
)	O
;	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
"--EOF (start condition %d)\n"	pointer
,	O
YY_START	O
)	O
;	O
}	O
switch	O
(	O
yy_act	int
)	O
{	O
case	O
0	int
:	O
*	O
yy_cp	pointer
=	O
(	O
yy_hold_char	char
)	O
;	O
yy_cp	pointer
=	O
(	O
yy_last_accepting_cpos	pointer
)	O
;	O
yy_current_state	int
=	O
(	O
yy_last_accepting_state	int
)	O
;	O
goto	O
yy_find_action	O
;	O
case	O
1	int
:	O
YY_RULE_SETUP	O
BEGIN_COMMENT	O
(	O
"-->"	pointer
)	O
;	O
YY_BREAK	O
case	O
2	int
:	O
YY_RULE_SETUP	O
BEGIN_COMMENT	O
(	O
"!>"	pointer
)	O
;	O
YY_BREAK	O
case	O
3	int
:	O
YY_RULE_SETUP	O
;	O
YY_BREAK	O
case	O
4	int
:	O
YY_RULE_SETUP	O
{	O
struct	O
gcide_tag	struct
*	O
tag	pointer
;	O
if	O
(	O
text_segment_length	O
(	O
)	O
)	O
{	O
tag	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
tag	pointer
)	O
)	O
;	O
if	O
(	O
!	O
tag	pointer
)	O
memerr	function
(	O
"gcide lexer"	pointer
)	O
;	O
tag	pointer
->	O
tag_type	enum
=	O
gcide_content_text	int
;	O
tag	pointer
->	O
tag_v	union
.	O
textpos	long
=	O
text_segment_finish	function
(	O
)	O
;	O
append_tag	function
(	O
tag	pointer
)	O
;	O
}	O
push_tag	function
(	O
alloc_tag	function
(	O
yytext	O
+	O
1	int
,	O
yyleng	O
-	O
2	int
)	O
)	O
;	O
}	O
YY_BREAK	O
case	O
5	int
:	O
YY_RULE_SETUP	O
{	O
if	O
(	O
text_segment_length	O
(	O
)	O
)	O
{	O
struct	O
gcide_tag	struct
*	O
tag	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
tag	pointer
)	O
)	O
;	O
if	O
(	O
!	O
tag	pointer
)	O
memerr	function
(	O
"gcide lexer"	pointer
)	O
;	O
tag	pointer
->	O
tag_type	enum
=	O
gcide_content_text	int
;	O
tag	pointer
->	O
tag_v	union
.	O
textpos	long
=	O
text_segment_finish	function
(	O
)	O
;	O
append_tag	function
(	O
tag	pointer
)	O
;	O
}	O
pop_tag	function
(	O
yytext	O
+	O
2	int
,	O
yyleng	O
-	O
3	int
)	O
;	O
}	O
YY_BREAK	O
case	O
6	int
:	O
YY_RULE_SETUP	O
{	O
char	O
const	O
*	O
s	pointer
=	O
gcide_entity_to_utf8	function
(	O
yytext	O
)	O
;	O
if	O
(	O
s	pointer
)	O
text_add_str	function
(	O
s	pointer
,	O
strlen	function
(	O
s	pointer
)	O
)	O
;	O
else	O
dico_log	function
(	O
L_WARN	int
,	O
0	int
,	O
_	O
(	O
"%u: unrecognized entity: %s"	pointer
)	O
,	O
token_beg	int
,	O
yytext	O
)	O
;	O
}	O
YY_BREAK	O
case	O
7	int
:	O
YY_RULE_SETUP	O
{	O
if	O
(	O
in_grk	int
)	O
text_add_chr	function
(	O
yytext	O
[	O
0	int
]	O
)	O
;	O
}	O
YY_BREAK	O
case	O
8	int
:	O
YY_RULE_SETUP	O
{	O
char	O
const	O
*	O
s	pointer
=	O
gcide_escape_to_utf8	function
(	O
yytext	O
+	O
2	int
)	O
;	O
if	O
(	O
s	pointer
)	O
text_add_str	function
(	O
s	pointer
,	O
strlen	function
(	O
s	pointer
)	O
)	O
;	O
else	O
{	O
text_add_str	function
(	O
yytext	O
,	O
yyleng	O
)	O
;	O
dico_log	function
(	O
L_WARN	int
,	O
0	int
,	O
_	O
(	O
"%u: unknown character sequence %s"	pointer
)	O
,	O
token_beg	int
,	O
yytext	O
)	O
;	O
}	O
}	O
YY_BREAK	O
case	O
9	int
:	O
YY_RULE_SETUP	O
;	O
YY_BREAK	O
case	O
10	int
:	O
YY_RULE_SETUP	O
text_add_str	function
(	O
yytext	O
,	O
yyleng	O
)	O
;	O
YY_BREAK	O
case	O
11	int
:	O
YY_RULE_SETUP	O
text_add_str	function
(	O
yytext	O
,	O
yyleng	O
)	O
;	O
YY_BREAK	O
case	O
12	int
:	O
YY_RULE_SETUP	O
{	O
if	O
(	O
strcmp	function
(	O
yytext	O
,	O
endtag	pointer
)	O
==	O
0	int
)	O
BEGIN	O
(	O
retstate	int
)	O
;	O
}	O
YY_BREAK	O
case	O
13	int
:	O
YY_RULE_SETUP	O
;	O
YY_BREAK	O
case	O
14	int
:	O
YY_RULE_SETUP	O
;	O
YY_BREAK	O
case	O
15	int
:	O
YY_RULE_SETUP	O
ECHO	O
;	O
YY_BREAK	O
case	O
YY_STATE_EOF	O
(	O
INITIAL	int
)	O
:	O
case	O
YY_STATE_EOF	O
(	O
COMMENT	int
)	O
:	O
yyterminate	O
(	O
)	O
;	O
case	O
YY_END_OF_BUFFER	int
:	O
{	O
int	O
yy_amount_of_matched_text	int
=	O
(	O
int	O
)	O
(	O
yy_cp	pointer
-	O
(	O
yytext_ptr	O
)	O
)	O
-	O
1	int
;	O
*	O
yy_cp	pointer
=	O
(	O
yy_hold_char	char
)	O
;	O
YY_RESTORE_YY_MORE_OFFSET	O
if	O
(	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_buffer_status	int
==	O
YY_BUFFER_NEW	int
)	O
{	O
(	O
yy_n_chars	long
)	O
=	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_n_chars	long
;	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_input_file	pointer
=	O
yyin	O
;	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_buffer_status	int
=	O
YY_BUFFER_NORMAL	int
;	O
}	O
if	O
(	O
(	O
yy_c_buf_p	pointer
)	O
<=	O
&	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_ch_buf	pointer
[	O
(	O
yy_n_chars	long
)	O
]	O
)	O
{	O
yy_state_type	int
yy_next_state	int
;	O
(	O
yy_c_buf_p	pointer
)	O
=	O
(	O
yytext_ptr	O
)	O
+	O
yy_amount_of_matched_text	int
;	O
yy_current_state	int
=	O
yy_get_previous_state	function
(	O
)	O
;	O
yy_next_state	int
=	O
yy_try_NUL_trans	function
(	O
yy_current_state	int
)	O
;	O
yy_bp	pointer
=	O
(	O
yytext_ptr	O
)	O
+	O
YY_MORE_ADJ	int
;	O
if	O
(	O
yy_next_state	int
)	O
{	O
yy_cp	pointer
=	O
++	O
(	O
yy_c_buf_p	pointer
)	O
;	O
yy_current_state	int
=	O
yy_next_state	int
;	O
goto	O
yy_match	O
;	O
}	O
else	O
{	O
yy_cp	pointer
=	O
(	O
yy_c_buf_p	pointer
)	O
;	O
goto	O
yy_find_action	O
;	O
}	O
}	O
else	O
switch	O
(	O
yy_get_next_buffer	function
(	O
)	O
)	O
{	O
case	O
EOB_ACT_END_OF_FILE	int
:	O
{	O
(	O
yy_did_buffer_switch_on_eof	int
)	O
=	O
0	int
;	O
if	O
(	O
yywrap	O
(	O
)	O
)	O
{	O
(	O
yy_c_buf_p	pointer
)	O
=	O
(	O
yytext_ptr	O
)	O
+	O
YY_MORE_ADJ	int
;	O
yy_act	int
=	O
YY_STATE_EOF	O
(	O
YY_START	O
)	O
;	O
goto	O
do_action	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
(	O
yy_did_buffer_switch_on_eof	int
)	O
)	O
YY_NEW_FILE	O
;	O
}	O
break	O
;	O
}	O
case	O
EOB_ACT_CONTINUE_SCAN	int
:	O
(	O
yy_c_buf_p	pointer
)	O
=	O
(	O
yytext_ptr	O
)	O
+	O
yy_amount_of_matched_text	int
;	O
yy_current_state	int
=	O
yy_get_previous_state	function
(	O
)	O
;	O
yy_cp	pointer
=	O
(	O
yy_c_buf_p	pointer
)	O
;	O
yy_bp	pointer
=	O
(	O
yytext_ptr	O
)	O
+	O
YY_MORE_ADJ	int
;	O
goto	O
yy_match	O
;	O
case	O
EOB_ACT_LAST_MATCH	int
:	O
(	O
yy_c_buf_p	pointer
)	O
=	O
&	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_ch_buf	pointer
[	O
(	O
yy_n_chars	long
)	O
]	O
;	O
yy_current_state	int
=	O
yy_get_previous_state	function
(	O
)	O
;	O
yy_cp	pointer
=	O
(	O
yy_c_buf_p	pointer
)	O
;	O
yy_bp	pointer
=	O
(	O
yytext_ptr	O
)	O
+	O
YY_MORE_ADJ	int
;	O
goto	O
yy_find_action	O
;	O
}	O
break	O
;	O
}	O
default	O
:	O
YY_FATAL_ERROR	O
(	O
"fatal flex scanner internal error--no action found"	pointer
)	O
;	O
}	O
}	O
}	O
static	O
int	O
yy_get_next_buffer	function
(	O
void	O
)	O
{	O
register	O
char	O
*	O
dest	pointer
=	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_ch_buf	pointer
;	O
register	O
char	O
*	O
source	pointer
=	O
(	O
yytext_ptr	O
)	O
;	O
register	O
int	O
number_to_move	int
,	O
i	int
;	O
int	O
ret_val	int
;	O
if	O
(	O
(	O
yy_c_buf_p	pointer
)	O
>	O
&	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_ch_buf	pointer
[	O
(	O
yy_n_chars	long
)	O
+	O
1	int
]	O
)	O
YY_FATAL_ERROR	O
(	O
"fatal flex scanner internal error--end of buffer missed"	pointer
)	O
;	O
if	O
(	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_fill_buffer	int
==	O
0	int
)	O
{	O
if	O
(	O
(	O
yy_c_buf_p	pointer
)	O
-	O
(	O
yytext_ptr	O
)	O
-	O
YY_MORE_ADJ	int
==	O
1	int
)	O
{	O
return	O
EOB_ACT_END_OF_FILE	int
;	O
}	O
else	O
{	O
return	O
EOB_ACT_LAST_MATCH	int
;	O
}	O
}	O
number_to_move	int
=	O
(	O
int	O
)	O
(	O
(	O
yy_c_buf_p	pointer
)	O
-	O
(	O
yytext_ptr	O
)	O
)	O
-	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
number_to_move	int
;	O
++	O
i	int
)	O
*	O
(	O
dest	pointer
++	O
)	O
=	O
*	O
(	O
source	pointer
++	O
)	O
;	O
if	O
(	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_buffer_status	int
==	O
YY_BUFFER_EOF_PENDING	int
)	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_n_chars	long
=	O
(	O
yy_n_chars	long
)	O
=	O
0	int
;	O
else	O
{	O
yy_size_t	long
num_to_read	long
=	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_buf_size	long
-	O
number_to_move	int
-	O
1	int
;	O
while	O
(	O
num_to_read	long
<=	O
0	int
)	O
{	O
YY_BUFFER_STATE	pointer
b	pointer
=	O
YY_CURRENT_BUFFER_LVALUE	O
;	O
int	O
yy_c_buf_p_offset	int
=	O
(	O
int	O
)	O
(	O
(	O
yy_c_buf_p	pointer
)	O
-	O
b	pointer
->	O
yy_ch_buf	pointer
)	O
;	O
if	O
(	O
b	pointer
->	O
yy_is_our_buffer	int
)	O
{	O
yy_size_t	long
new_size	long
=	O
b	pointer
->	O
yy_buf_size	long
*	O
2	int
;	O
if	O
(	O
new_size	long
<=	O
0	int
)	O
b	pointer
->	O
yy_buf_size	long
+=	O
b	pointer
->	O
yy_buf_size	long
/	O
8	int
;	O
else	O
b	pointer
->	O
yy_buf_size	long
*=	O
2	int
;	O
b	pointer
->	O
yy_ch_buf	pointer
=	O
(	O
char	O
*	O
)	O
yyrealloc	O
(	O
(	O
void	O
*	O
)	O
b	pointer
->	O
yy_ch_buf	pointer
,	O
b	pointer
->	O
yy_buf_size	long
+	O
2	int
)	O
;	O
}	O
else	O
b	pointer
->	O
yy_ch_buf	pointer
=	O
0	int
;	O
if	O
(	O
!	O
b	pointer
->	O
yy_ch_buf	pointer
)	O
YY_FATAL_ERROR	O
(	O
"fatal error - scanner input buffer overflow"	pointer
)	O
;	O
(	O
yy_c_buf_p	pointer
)	O
=	O
&	O
b	pointer
->	O
yy_ch_buf	pointer
[	O
yy_c_buf_p_offset	int
]	O
;	O
num_to_read	long
=	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_buf_size	long
-	O
number_to_move	int
-	O
1	int
;	O
}	O
if	O
(	O
num_to_read	long
>	O
YY_READ_BUF_SIZE	int
)	O
num_to_read	long
=	O
YY_READ_BUF_SIZE	int
;	O
YY_INPUT	O
(	O
(	O
&	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_ch_buf	pointer
[	O
number_to_move	int
]	O
)	O
,	O
(	O
yy_n_chars	long
)	O
,	O
num_to_read	long
)	O
;	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_n_chars	long
=	O
(	O
yy_n_chars	long
)	O
;	O
}	O
if	O
(	O
(	O
yy_n_chars	long
)	O
==	O
0	int
)	O
{	O
if	O
(	O
number_to_move	int
==	O
YY_MORE_ADJ	int
)	O
{	O
ret_val	int
=	O
EOB_ACT_END_OF_FILE	int
;	O
yyrestart	O
(	O
yyin	O
)	O
;	O
}	O
else	O
{	O
ret_val	int
=	O
EOB_ACT_LAST_MATCH	int
;	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_buffer_status	int
=	O
YY_BUFFER_EOF_PENDING	int
;	O
}	O
}	O
else	O
ret_val	int
=	O
EOB_ACT_CONTINUE_SCAN	int
;	O
if	O
(	O
(	O
yy_size_t	long
)	O
(	O
(	O
yy_n_chars	long
)	O
+	O
number_to_move	int
)	O
>	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_buf_size	long
)	O
{	O
yy_size_t	long
new_size	long
=	O
(	O
yy_n_chars	long
)	O
+	O
number_to_move	int
+	O
(	O
(	O
yy_n_chars	long
)	O
>>	O
1	int
)	O
;	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_ch_buf	pointer
=	O
(	O
char	O
*	O
)	O
yyrealloc	O
(	O
(	O
void	O
*	O
)	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_ch_buf	pointer
,	O
new_size	long
)	O
;	O
if	O
(	O
!	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_ch_buf	pointer
)	O
YY_FATAL_ERROR	O
(	O
"out of dynamic memory in yy_get_next_buffer()"	pointer
)	O
;	O
}	O
(	O
yy_n_chars	long
)	O
+=	O
number_to_move	int
;	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_ch_buf	pointer
[	O
(	O
yy_n_chars	long
)	O
]	O
=	O
YY_END_OF_BUFFER_CHAR	int
;	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_ch_buf	pointer
[	O
(	O
yy_n_chars	long
)	O
+	O
1	int
]	O
=	O
YY_END_OF_BUFFER_CHAR	int
;	O
(	O
yytext_ptr	O
)	O
=	O
&	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_ch_buf	pointer
[	O
0	int
]	O
;	O
return	O
ret_val	int
;	O
}	O
static	O
yy_state_type	int
yy_get_previous_state	function
(	O
void	O
)	O
{	O
register	O
yy_state_type	int
yy_current_state	int
;	O
register	O
char	O
*	O
yy_cp	pointer
;	O
yy_current_state	int
=	O
(	O
yy_start	int
)	O
;	O
for	O
(	O
yy_cp	pointer
=	O
(	O
yytext_ptr	O
)	O
+	O
YY_MORE_ADJ	int
;	O
yy_cp	pointer
<	O
(	O
yy_c_buf_p	pointer
)	O
;	O
++	O
yy_cp	pointer
)	O
{	O
register	O
YY_CHAR	char
yy_c	char
=	O
(	O
*	O
yy_cp	pointer
?	O
yy_ec	array
[	O
YY_SC_TO_UI	O
(	O
*	O
yy_cp	pointer
)	O
]	O
:	O
1	int
)	O
;	O
if	O
(	O
yy_accept	array
[	O
yy_current_state	int
]	O
)	O
{	O
(	O
yy_last_accepting_state	int
)	O
=	O
yy_current_state	int
;	O
(	O
yy_last_accepting_cpos	pointer
)	O
=	O
yy_cp	pointer
;	O
}	O
while	O
(	O
yy_chk	array
[	O
yy_base	array
[	O
yy_current_state	int
]	O
+	O
yy_c	char
]	O
!=	O
yy_current_state	int
)	O
{	O
yy_current_state	int
=	O
(	O
int	O
)	O
yy_def	array
[	O
yy_current_state	int
]	O
;	O
if	O
(	O
yy_current_state	int
>=	O
39	int
)	O
yy_c	char
=	O
yy_meta	array
[	O
(	O
unsigned	O
int	O
)	O
yy_c	char
]	O
;	O
}	O
yy_current_state	int
=	O
yy_nxt	int
[	O
yy_base	array
[	O
yy_current_state	int
]	O
+	O
(	O
unsigned	O
int	O
)	O
yy_c	char
]	O
;	O
}	O
return	O
yy_current_state	int
;	O
}	O
static	O
yy_state_type	int
yy_try_NUL_trans	function
(	O
yy_state_type	int
yy_current_state	int
)	O
{	O
register	O
int	O
yy_is_jam	int
;	O
register	O
char	O
*	O
yy_cp	pointer
=	O
(	O
yy_c_buf_p	pointer
)	O
;	O
register	O
YY_CHAR	char
yy_c	char
=	O
1	int
;	O
if	O
(	O
yy_accept	array
[	O
yy_current_state	int
]	O
)	O
{	O
(	O
yy_last_accepting_state	int
)	O
=	O
yy_current_state	int
;	O
(	O
yy_last_accepting_cpos	pointer
)	O
=	O
yy_cp	pointer
;	O
}	O
while	O
(	O
yy_chk	array
[	O
yy_base	array
[	O
yy_current_state	int
]	O
+	O
yy_c	char
]	O
!=	O
yy_current_state	int
)	O
{	O
yy_current_state	int
=	O
(	O
int	O
)	O
yy_def	array
[	O
yy_current_state	int
]	O
;	O
if	O
(	O
yy_current_state	int
>=	O
39	int
)	O
yy_c	char
=	O
yy_meta	array
[	O
(	O
unsigned	O
int	O
)	O
yy_c	char
]	O
;	O
}	O
yy_current_state	int
=	O
yy_nxt	int
[	O
yy_base	array
[	O
yy_current_state	int
]	O
+	O
(	O
unsigned	O
int	O
)	O
yy_c	char
]	O
;	O
yy_is_jam	int
=	O
(	O
yy_current_state	int
==	O
38	int
)	O
;	O
return	O
yy_is_jam	int
?	O
0	int
:	O
yy_current_state	int
;	O
}	O
void	O
yyrestart	O
(	O
FILE	struct
*	O
input_file	pointer
)	O
{	O
if	O
(	O
!	O
YY_CURRENT_BUFFER	O
)	O
{	O
yyensure_buffer_stack	function
(	O
)	O
;	O
YY_CURRENT_BUFFER_LVALUE	O
=	O
yy_create_buffer	O
(	O
yyin	O
,	O
YY_BUF_SIZE	int
)	O
;	O
}	O
yy_init_buffer	O
(	O
YY_CURRENT_BUFFER	O
,	O
input_file	pointer
)	O
;	O
yy_load_buffer_state	O
(	O
)	O
;	O
}	O
void	O
yy_switch_to_buffer	O
(	O
YY_BUFFER_STATE	pointer
new_buffer	pointer
)	O
{	O
yyensure_buffer_stack	function
(	O
)	O
;	O
if	O
(	O
YY_CURRENT_BUFFER	O
==	O
new_buffer	pointer
)	O
return	O
;	O
if	O
(	O
YY_CURRENT_BUFFER	O
)	O
{	O
*	O
(	O
yy_c_buf_p	pointer
)	O
=	O
(	O
yy_hold_char	char
)	O
;	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_buf_pos	pointer
=	O
(	O
yy_c_buf_p	pointer
)	O
;	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_n_chars	long
=	O
(	O
yy_n_chars	long
)	O
;	O
}	O
YY_CURRENT_BUFFER_LVALUE	O
=	O
new_buffer	pointer
;	O
yy_load_buffer_state	O
(	O
)	O
;	O
(	O
yy_did_buffer_switch_on_eof	int
)	O
=	O
1	int
;	O
}	O
static	O
void	O
yy_load_buffer_state	O
(	O
void	O
)	O
{	O
(	O
yy_n_chars	long
)	O
=	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_n_chars	long
;	O
(	O
yytext_ptr	O
)	O
=	O
(	O
yy_c_buf_p	pointer
)	O
=	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_buf_pos	pointer
;	O
yyin	O
=	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_input_file	pointer
;	O
(	O
yy_hold_char	char
)	O
=	O
*	O
(	O
yy_c_buf_p	pointer
)	O
;	O
}	O
YY_BUFFER_STATE	pointer
yy_create_buffer	O
(	O
FILE	struct
*	O
file	pointer
,	O
int	O
size	long
)	O
{	O
YY_BUFFER_STATE	pointer
b	pointer
;	O
b	pointer
=	O
(	O
YY_BUFFER_STATE	pointer
)	O
yyalloc	O
(	O
sizeof	O
(	O
struct	O
yy_buffer_state	struct
)	O
)	O
;	O
if	O
(	O
!	O
b	pointer
)	O
YY_FATAL_ERROR	O
(	O
"out of dynamic memory in yy_create_buffer()"	pointer
)	O
;	O
b	pointer
->	O
yy_buf_size	long
=	O
size	long
;	O
b	pointer
->	O
yy_ch_buf	pointer
=	O
(	O
char	O
*	O
)	O
yyalloc	O
(	O
b	pointer
->	O
yy_buf_size	long
+	O
2	int
)	O
;	O
if	O
(	O
!	O
b	pointer
->	O
yy_ch_buf	pointer
)	O
YY_FATAL_ERROR	O
(	O
"out of dynamic memory in yy_create_buffer()"	pointer
)	O
;	O
b	pointer
->	O
yy_is_our_buffer	int
=	O
1	int
;	O
yy_init_buffer	O
(	O
b	pointer
,	O
file	pointer
)	O
;	O
return	O
b	pointer
;	O
}	O
void	O
yy_delete_buffer	O
(	O
YY_BUFFER_STATE	pointer
b	pointer
)	O
{	O
if	O
(	O
!	O
b	pointer
)	O
return	O
;	O
if	O
(	O
b	pointer
==	O
YY_CURRENT_BUFFER	O
)	O
YY_CURRENT_BUFFER_LVALUE	O
=	O
(	O
YY_BUFFER_STATE	pointer
)	O
0	int
;	O
if	O
(	O
b	pointer
->	O
yy_is_our_buffer	int
)	O
yyfree	O
(	O
(	O
void	O
*	O
)	O
b	pointer
->	O
yy_ch_buf	pointer
)	O
;	O
yyfree	O
(	O
(	O
void	O
*	O
)	O
b	pointer
)	O
;	O
}	O
static	O
void	O
yy_init_buffer	O
(	O
YY_BUFFER_STATE	pointer
b	pointer
,	O
FILE	struct
*	O
file	pointer
)	O
{	O
int	O
oerrno	int
=	O
errno	O
;	O
yy_flush_buffer	O
(	O
b	pointer
)	O
;	O
b	pointer
->	O
yy_input_file	pointer
=	O
file	pointer
;	O
b	pointer
->	O
yy_fill_buffer	int
=	O
1	int
;	O
if	O
(	O
b	pointer
!=	O
YY_CURRENT_BUFFER	O
)	O
{	O
b	pointer
->	O
yy_bs_lineno	int
=	O
1	int
;	O
b	pointer
->	O
yy_bs_column	int
=	O
0	int
;	O
}	O
b	pointer
->	O
yy_is_interactive	int
=	O
file	pointer
?	O
(	O
isatty	function
(	O
fileno	function
(	O
file	pointer
)	O
)	O
>	O
0	int
)	O
:	O
0	int
;	O
errno	O
=	O
oerrno	int
;	O
}	O
void	O
yy_flush_buffer	O
(	O
YY_BUFFER_STATE	pointer
b	pointer
)	O
{	O
if	O
(	O
!	O
b	pointer
)	O
return	O
;	O
b	pointer
->	O
yy_n_chars	long
=	O
0	int
;	O
b	pointer
->	O
yy_ch_buf	pointer
[	O
0	int
]	O
=	O
YY_END_OF_BUFFER_CHAR	int
;	O
b	pointer
->	O
yy_ch_buf	pointer
[	O
1	int
]	O
=	O
YY_END_OF_BUFFER_CHAR	int
;	O
b	pointer
->	O
yy_buf_pos	pointer
=	O
&	O
b	pointer
->	O
yy_ch_buf	pointer
[	O
0	int
]	O
;	O
b	pointer
->	O
yy_at_bol	int
=	O
1	int
;	O
b	pointer
->	O
yy_buffer_status	int
=	O
YY_BUFFER_NEW	int
;	O
if	O
(	O
b	pointer
==	O
YY_CURRENT_BUFFER	O
)	O
yy_load_buffer_state	O
(	O
)	O
;	O
}	O
void	O
yypush_buffer_state	function
(	O
YY_BUFFER_STATE	pointer
new_buffer	pointer
)	O
{	O
if	O
(	O
new_buffer	pointer
==	O
NULL	O
)	O
return	O
;	O
yyensure_buffer_stack	function
(	O
)	O
;	O
if	O
(	O
YY_CURRENT_BUFFER	O
)	O
{	O
*	O
(	O
yy_c_buf_p	pointer
)	O
=	O
(	O
yy_hold_char	char
)	O
;	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_buf_pos	pointer
=	O
(	O
yy_c_buf_p	pointer
)	O
;	O
YY_CURRENT_BUFFER_LVALUE	O
->	O
yy_n_chars	long
=	O
(	O
yy_n_chars	long
)	O
;	O
}	O
if	O
(	O
YY_CURRENT_BUFFER	O
)	O
(	O
yy_buffer_stack_top	long
)	O
++	O
;	O
YY_CURRENT_BUFFER_LVALUE	O
=	O
new_buffer	pointer
;	O
yy_load_buffer_state	O
(	O
)	O
;	O
(	O
yy_did_buffer_switch_on_eof	int
)	O
=	O
1	int
;	O
}	O
void	O
yypop_buffer_state	function
(	O
void	O
)	O
{	O
if	O
(	O
!	O
YY_CURRENT_BUFFER	O
)	O
return	O
;	O
yy_delete_buffer	O
(	O
YY_CURRENT_BUFFER	O
)	O
;	O
YY_CURRENT_BUFFER_LVALUE	O
=	O
NULL	O
;	O
if	O
(	O
(	O
yy_buffer_stack_top	long
)	O
>	O
0	int
)	O
--	O
(	O
yy_buffer_stack_top	long
)	O
;	O
if	O
(	O
YY_CURRENT_BUFFER	O
)	O
{	O
yy_load_buffer_state	O
(	O
)	O
;	O
(	O
yy_did_buffer_switch_on_eof	int
)	O
=	O
1	int
;	O
}	O
}	O
static	O
void	O
yyensure_buffer_stack	function
(	O
void	O
)	O
{	O
yy_size_t	long
num_to_alloc	long
;	O
if	O
(	O
!	O
(	O
yy_buffer_stack	pointer
)	O
)	O
{	O
num_to_alloc	long
=	O
1	int
;	O
(	O
yy_buffer_stack	pointer
)	O
=	O
(	O
struct	O
yy_buffer_state	struct
*	O
*	O
)	O
yyalloc	O
(	O
num_to_alloc	long
*	O
sizeof	O
(	O
struct	O
yy_buffer_state	struct
*	O
)	O
)	O
;	O
if	O
(	O
!	O
(	O
yy_buffer_stack	pointer
)	O
)	O
YY_FATAL_ERROR	O
(	O
"out of dynamic memory in yyensure_buffer_stack()"	pointer
)	O
;	O
memset	function
(	O
(	O
yy_buffer_stack	pointer
)	O
,	O
0	int
,	O
num_to_alloc	long
*	O
sizeof	O
(	O
struct	O
yy_buffer_state	struct
*	O
)	O
)	O
;	O
(	O
yy_buffer_stack_max	long
)	O
=	O
num_to_alloc	long
;	O
(	O
yy_buffer_stack_top	long
)	O
=	O
0	int
;	O
return	O
;	O
}	O
if	O
(	O
(	O
yy_buffer_stack_top	long
)	O
>=	O
(	O
(	O
yy_buffer_stack_max	long
)	O
)	O
-	O
1	int
)	O
{	O
int	O
grow_size	int
=	O
8	int
;	O
num_to_alloc	long
=	O
(	O
yy_buffer_stack_max	long
)	O
+	O
grow_size	int
;	O
(	O
yy_buffer_stack	pointer
)	O
=	O
(	O
struct	O
yy_buffer_state	struct
*	O
*	O
)	O
yyrealloc	O
(	O
(	O
yy_buffer_stack	pointer
)	O
,	O
num_to_alloc	long
*	O
sizeof	O
(	O
struct	O
yy_buffer_state	struct
*	O
)	O
)	O
;	O
if	O
(	O
!	O
(	O
yy_buffer_stack	pointer
)	O
)	O
YY_FATAL_ERROR	O
(	O
"out of dynamic memory in yyensure_buffer_stack()"	pointer
)	O
;	O
memset	function
(	O
(	O
yy_buffer_stack	pointer
)	O
+	O
(	O
yy_buffer_stack_max	long
)	O
,	O
0	int
,	O
grow_size	int
*	O
sizeof	O
(	O
struct	O
yy_buffer_state	struct
*	O
)	O
)	O
;	O
(	O
yy_buffer_stack_max	long
)	O
=	O
num_to_alloc	long
;	O
}	O
}	O
YY_BUFFER_STATE	pointer
yy_scan_buffer	function
(	O
char	O
*	O
base	pointer
,	O
yy_size_t	long
size	long
)	O
{	O
YY_BUFFER_STATE	pointer
b	pointer
;	O
if	O
(	O
size	long
<	O
2	int
||	O
base	pointer
[	O
size	long
-	O
2	int
]	O
!=	O
YY_END_OF_BUFFER_CHAR	int
||	O
base	pointer
[	O
size	long
-	O
1	int
]	O
!=	O
YY_END_OF_BUFFER_CHAR	int
)	O
return	O
0	int
;	O
b	pointer
=	O
(	O
YY_BUFFER_STATE	pointer
)	O
yyalloc	O
(	O
sizeof	O
(	O
struct	O
yy_buffer_state	struct
)	O
)	O
;	O
if	O
(	O
!	O
b	pointer
)	O
YY_FATAL_ERROR	O
(	O
"out of dynamic memory in yy_scan_buffer()"	pointer
)	O
;	O
b	pointer
->	O
yy_buf_size	long
=	O
size	long
-	O
2	int
;	O
b	pointer
->	O
yy_buf_pos	pointer
=	O
b	pointer
->	O
yy_ch_buf	pointer
=	O
base	pointer
;	O
b	pointer
->	O
yy_is_our_buffer	int
=	O
0	int
;	O
b	pointer
->	O
yy_input_file	pointer
=	O
0	int
;	O
b	pointer
->	O
yy_n_chars	long
=	O
b	pointer
->	O
yy_buf_size	long
;	O
b	pointer
->	O
yy_is_interactive	int
=	O
0	int
;	O
b	pointer
->	O
yy_at_bol	int
=	O
1	int
;	O
b	pointer
->	O
yy_fill_buffer	int
=	O
0	int
;	O
b	pointer
->	O
yy_buffer_status	int
=	O
YY_BUFFER_NEW	int
;	O
yy_switch_to_buffer	O
(	O
b	pointer
)	O
;	O
return	O
b	pointer
;	O
}	O
YY_BUFFER_STATE	pointer
yy_scan_string	function
(	O
yyconst	O
char	O
*	O
yystr	pointer
)	O
{	O
return	O
yy_scan_bytes	function
(	O
yystr	pointer
,	O
strlen	function
(	O
yystr	pointer
)	O
)	O
;	O
}	O
YY_BUFFER_STATE	pointer
yy_scan_bytes	function
(	O
yyconst	O
char	O
*	O
yybytes	pointer
,	O
yy_size_t	long
_yybytes_len	long
)	O
{	O
YY_BUFFER_STATE	pointer
b	pointer
;	O
char	O
*	O
buf	pointer
;	O
yy_size_t	long
n	long
;	O
int	O
i	int
;	O
n	long
=	O
_yybytes_len	long
+	O
2	int
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
yyalloc	O
(	O
n	long
)	O
;	O
if	O
(	O
!	O
buf	pointer
)	O
YY_FATAL_ERROR	O
(	O
"out of dynamic memory in yy_scan_bytes()"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
_yybytes_len	long
;	O
++	O
i	int
)	O
buf	pointer
[	O
i	int
]	O
=	O
yybytes	pointer
[	O
i	int
]	O
;	O
buf	pointer
[	O
_yybytes_len	long
]	O
=	O
buf	pointer
[	O
_yybytes_len	long
+	O
1	int
]	O
=	O
YY_END_OF_BUFFER_CHAR	int
;	O
b	pointer
=	O
yy_scan_buffer	function
(	O
buf	pointer
,	O
n	long
)	O
;	O
if	O
(	O
!	O
b	pointer
)	O
YY_FATAL_ERROR	O
(	O
"bad buffer in yy_scan_bytes()"	pointer
)	O
;	O
b	pointer
->	O
yy_is_our_buffer	int
=	O
1	int
;	O
return	O
b	pointer
;	O
}	O
static	O
void	O
yy_fatal_error	function
(	O
yyconst	O
char	O
*	O
msg	array
)	O
{	O
(	O
void	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s\n"	pointer
,	O
msg	array
)	O
;	O
exit	function
(	O
YY_EXIT_FAILURE	int
)	O
;	O
}	O
int	O
yyget_lineno	O
(	O
void	O
)	O
{	O
return	O
yylineno	O
;	O
}	O
FILE	struct
*	O
yyget_in	O
(	O
void	O
)	O
{	O
return	O
yyin	O
;	O
}	O
FILE	struct
*	O
yyget_out	O
(	O
void	O
)	O
{	O
return	O
yyout	O
;	O
}	O
yy_size_t	long
yyget_leng	O
(	O
void	O
)	O
{	O
return	O
yyleng	O
;	O
}	O
char	O
*	O
yyget_text	O
(	O
void	O
)	O
{	O
return	O
yytext	O
;	O
}	O
void	O
yyset_lineno	O
(	O
int	O
line_number	int
)	O
{	O
yylineno	O
=	O
line_number	int
;	O
}	O
void	O
yyset_in	O
(	O
FILE	struct
*	O
in_str	pointer
)	O
{	O
yyin	O
=	O
in_str	pointer
;	O
}	O
void	O
yyset_out	O
(	O
FILE	struct
*	O
out_str	pointer
)	O
{	O
yyout	O
=	O
out_str	pointer
;	O
}	O
int	O
yyget_debug	O
(	O
void	O
)	O
{	O
return	O
yy_flex_debug	O
;	O
}	O
void	O
yyset_debug	O
(	O
int	O
bdebug	int
)	O
{	O
yy_flex_debug	O
=	O
bdebug	int
;	O
}	O
static	O
int	O
yy_init_globals	function
(	O
void	O
)	O
{	O
(	O
yy_buffer_stack	pointer
)	O
=	O
0	int
;	O
(	O
yy_buffer_stack_top	long
)	O
=	O
0	int
;	O
(	O
yy_buffer_stack_max	long
)	O
=	O
0	int
;	O
(	O
yy_c_buf_p	pointer
)	O
=	O
(	O
char	O
*	O
)	O
0	int
;	O
(	O
yy_init	int
)	O
=	O
0	int
;	O
(	O
yy_start	int
)	O
=	O
0	int
;	O
yyin	O
=	O
(	O
FILE	struct
*	O
)	O
0	int
;	O
yyout	O
=	O
(	O
FILE	struct
*	O
)	O
0	int
;	O
return	O
0	int
;	O
}	O
int	O
yylex_destroy	O
(	O
void	O
)	O
{	O
while	O
(	O
YY_CURRENT_BUFFER	O
)	O
{	O
yy_delete_buffer	O
(	O
YY_CURRENT_BUFFER	O
)	O
;	O
YY_CURRENT_BUFFER_LVALUE	O
=	O
NULL	O
;	O
yypop_buffer_state	function
(	O
)	O
;	O
}	O
yyfree	O
(	O
(	O
yy_buffer_stack	pointer
)	O
)	O
;	O
(	O
yy_buffer_stack	pointer
)	O
=	O
NULL	O
;	O
yy_init_globals	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
void	O
*	O
yyalloc	O
(	O
yy_size_t	long
size	long
)	O
{	O
return	O
(	O
void	O
*	O
)	O
malloc	function
(	O
size	long
)	O
;	O
}	O
void	O
*	O
yyrealloc	O
(	O
void	O
*	O
ptr	pointer
,	O
yy_size_t	long
size	long
)	O
{	O
return	O
(	O
void	O
*	O
)	O
realloc	function
(	O
(	O
char	O
*	O
)	O
ptr	pointer
,	O
size	long
)	O
;	O
}	O
void	O
yyfree	O
(	O
void	O
*	O
ptr	pointer
)	O
{	O
free	function
(	O
(	O
char	O
*	O
)	O
ptr	pointer
)	O
;	O
}	O
int	O
yywrap	O
(	O
)	O
{	O
return	O
1	int
;	O
}	O
struct	O
walk_closure	struct
{	O
int	O
(	O
*	O
fun	pointer
)	O
(	O
int	O
,	O
struct	O
gcide_tag	struct
*	O
,	O
void	O
*	O
)	O
;	O
void	O
*	O
data	pointer
;	O
}	O
;	O
static	O
int	O
inorder_helper	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
gcide_tag	struct
*	O
tag	pointer
=	O
item	pointer
;	O
struct	O
walk_closure	struct
*	O
cp	pointer
=	O
data	pointer
;	O
if	O
(	O
cp	pointer
->	O
fun	pointer
(	O
0	int
,	O
tag	pointer
,	O
cp	pointer
->	O
data	pointer
)	O
)	O
return	O
1	int
;	O
if	O
(	O
tag	pointer
->	O
tag_type	enum
==	O
gcide_content_taglist	int
)	O
{	O
dico_list_iterate	function
(	O
tag	pointer
->	O
tag_v	union
.	O
taglist	pointer
,	O
inorder_helper	function
,	O
data	pointer
)	O
;	O
if	O
(	O
cp	pointer
->	O
fun	pointer
(	O
1	int
,	O
tag	pointer
,	O
cp	pointer
->	O
data	pointer
)	O
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
gcide_parse_tree_inorder	function
(	O
struct	O
gcide_parse_tree	struct
*	O
tp	pointer
,	O
int	O
(	O
*	O
fun	pointer
)	O
(	O
int	O
,	O
struct	O
gcide_tag	struct
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
walk_closure	struct
clos	pointer
;	O
clos	pointer
.	O
fun	pointer
=	O
fun	pointer
;	O
clos	pointer
.	O
data	pointer
=	O
data	pointer
;	O
return	O
inorder_helper	function
(	O
tp	pointer
->	O
root	pointer
,	O
&	O
clos	pointer
)	O
;	O
}	O
static	O
int	O
tag_fixup	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
gcide_tag	struct
*	O
tag	pointer
=	O
item	pointer
;	O
char	O
*	O
textspace	pointer
=	O
data	pointer
;	O
switch	O
(	O
tag	pointer
->	O
tag_type	enum
)	O
{	O
case	O
gcide_content_unspecified	int
:	O
break	O
;	O
case	O
gcide_content_text	int
:	O
tag	pointer
->	O
tag_v	union
.	O
text	pointer
=	O
textspace	pointer
+	O
tag	pointer
->	O
tag_v	union
.	O
textpos	long
;	O
break	O
;	O
case	O
gcide_content_taglist	int
:	O
dico_list_iterate	function
(	O
tag	pointer
->	O
tag_v	union
.	O
taglist	pointer
,	O
tag_fixup	function
,	O
textspace	pointer
)	O
;	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
size_t	long
greek_translit	function
(	O
size_t	long
n	long
)	O
{	O
while	O
(	O
textspace	pointer
[	O
n	long
]	O
)	O
{	O
size_t	long
rd	long
;	O
const	O
char	O
*	O
greek	pointer
=	O
gcide_grk_to_utf8	function
(	O
textspace	pointer
+	O
n	long
,	O
&	O
rd	long
)	O
;	O
if	O
(	O
greek	pointer
)	O
{	O
text_add_str	function
(	O
greek	pointer
,	O
strlen	function
(	O
greek	pointer
)	O
)	O
;	O
n	long
+=	O
rd	long
;	O
}	O
else	O
{	O
text_add_chr	function
(	O
textspace	pointer
[	O
n	long
]	O
)	O
;	O
n	long
++	O
;	O
}	O
}	O
return	O
text_segment_finish	function
(	O
)	O
;	O
}	O
static	O
int	O
early_fixup	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
gcide_tag	struct
*	O
tag	pointer
=	O
item	pointer
;	O
int	O
translate	int
=	O
data	pointer
?	O
*	O
(	O
int	O
*	O
)	O
data	pointer
:	O
0	int
;	O
switch	O
(	O
tag	pointer
->	O
tag_type	enum
)	O
{	O
case	O
gcide_content_unspecified	int
:	O
break	O
;	O
case	O
gcide_content_text	int
:	O
if	O
(	O
translate	int
)	O
tag	pointer
->	O
tag_v	union
.	O
textpos	long
=	O
greek_translit	function
(	O
tag	pointer
->	O
tag_v	union
.	O
textpos	long
)	O
;	O
break	O
;	O
case	O
gcide_content_taglist	int
:	O
translate	int
=	O
(	O
tag	pointer
->	O
tag_parmc	long
&&	O
strcmp	function
(	O
tag	pointer
->	O
tag_name	O
,	O
"grk"	pointer
)	O
==	O
0	int
)	O
;	O
dico_list_iterate	function
(	O
tag	pointer
->	O
tag_v	union
.	O
taglist	pointer
,	O
early_fixup	function
,	O
&	O
translate	int
)	O
;	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
struct	O
gcide_parse_tree	struct
*	O
gcide_markup_parse	function
(	O
char	O
const	O
*	O
text	pointer
,	O
size_t	long
len	int
,	O
int	O
dbg	int
)	O
{	O
struct	O
gcide_parse_tree	struct
*	O
tp	pointer
;	O
struct	O
gcide_tag	struct
*	O
p	pointer
;	O
input_buf	pointer
=	O
text	pointer
;	O
input_len	long
=	O
len	int
;	O
token_beg	int
=	O
token_end	int
=	O
0	int
;	O
if	O
(	O
setjmp	function
(	O
errbuf	array
)	O
)	O
{	O
free	function
(	O
textspace	pointer
)	O
;	O
dico_list_destroy	function
(	O
&	O
tagstk	pointer
)	O
;	O
free_tag	function
(	O
current_tag	pointer
,	O
NULL	O
)	O
;	O
}	O
textsize	long
=	O
2	int
*	O
len	int
;	O
textspace	pointer
=	O
malloc	function
(	O
textsize	long
)	O
;	O
if	O
(	O
!	O
textspace	pointer
)	O
memerr	function
(	O
"gcide_markup_parse"	pointer
)	O
;	O
textpos	long
=	O
textstart	long
=	O
0	int
;	O
tagstk	pointer
=	O
dico_list_create	function
(	O
)	O
;	O
if	O
(	O
!	O
tagstk	pointer
)	O
memerr	function
(	O
"gcide_markup_parse"	pointer
)	O
;	O
dico_list_set_free_item	function
(	O
tagstk	pointer
,	O
free_tag	function
,	O
NULL	O
)	O
;	O
current_tag	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
current_tag	pointer
)	O
)	O
;	O
if	O
(	O
!	O
current_tag	pointer
)	O
memerr	function
(	O
"gcide_markup_parse"	pointer
)	O
;	O
yy_flex_debug	O
=	O
dbg	int
;	O
BEGIN	O
(	O
INITIAL	int
)	O
;	O
while	O
(	O
yylex	O
(	O
)	O
)	O
;	O
if	O
(	O
text_segment_length	O
(	O
)	O
)	O
{	O
struct	O
gcide_tag	struct
*	O
tag	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
tag	pointer
)	O
)	O
;	O
if	O
(	O
!	O
tag	pointer
)	O
memerr	function
(	O
"gcide lexer"	pointer
)	O
;	O
tag	pointer
->	O
tag_type	enum
=	O
gcide_content_text	int
;	O
tag	pointer
->	O
tag_v	union
.	O
textpos	long
=	O
text_segment_finish	function
(	O
)	O
;	O
append_tag	function
(	O
tag	pointer
)	O
;	O
}	O
while	O
(	O
(	O
p	pointer
=	O
dico_list_pop	function
(	O
tagstk	pointer
)	O
)	O
)	O
current_tag	pointer
=	O
p	pointer
;	O
dico_list_destroy	function
(	O
&	O
tagstk	pointer
)	O
;	O
if	O
(	O
!	O
current_tag	pointer
)	O
{	O
free	function
(	O
textspace	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
early_fixup	function
(	O
current_tag	pointer
,	O
NULL	O
)	O
;	O
tp	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
tp	pointer
)	O
)	O
;	O
if	O
(	O
!	O
tp	pointer
)	O
memerr	function
(	O
"gcide_markup_parse"	pointer
)	O
;	O
tp	pointer
->	O
textspace	pointer
=	O
textspace	pointer
;	O
tp	pointer
->	O
textsize	long
=	O
textsize	long
;	O
tp	pointer
->	O
root	pointer
=	O
current_tag	pointer
;	O
tag_fixup	function
(	O
tp	pointer
->	O
root	pointer
,	O
textspace	pointer
)	O
;	O
return	O
tp	pointer
;	O
}	O
void	O
gcide_parse_tree_free	function
(	O
struct	O
gcide_parse_tree	struct
*	O
tp	pointer
)	O
{	O
free	function
(	O
tp	pointer
->	O
textspace	pointer
)	O
;	O
free_tag	function
(	O
tp	pointer
->	O
root	pointer
,	O
NULL	O
)	O
;	O
free	function
(	O
tp	pointer
)	O
;	O
}	O
