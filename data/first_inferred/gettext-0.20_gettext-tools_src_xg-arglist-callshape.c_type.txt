void	O
split_keywordspec	function
(	O
const	O
char	O
*	O
spec	pointer
,	O
const	O
char	O
*	O
*	O
endp	pointer
,	O
struct	O
callshape	struct
*	O
shapep	pointer
)	O
{	O
const	O
char	O
*	O
p	pointer
;	O
int	O
argnum1	int
=	O
0	int
;	O
int	O
argnum2	int
=	O
0	int
;	O
int	O
argnumc	int
=	O
0	int
;	O
bool	bool
argnum1_glib_context	bool
=	O
false	int
;	O
bool	bool
argnum2_glib_context	bool
=	O
false	int
;	O
int	O
argtotal	int
=	O
0	int
;	O
string_list_ty	struct
xcomments	struct
;	O
string_list_init	function
(	O
&	O
xcomments	struct
)	O
;	O
p	pointer
=	O
spec	pointer
+	O
strlen	function
(	O
spec	pointer
)	O
;	O
while	O
(	O
p	pointer
>	O
spec	pointer
)	O
{	O
if	O
(	O
isdigit	function
(	O
(	O
unsigned	O
char	O
)	O
p	pointer
[	O
-	O
1	int
]	O
)	O
||	O
(	O
(	O
p	pointer
[	O
-	O
1	int
]	O
==	O
'c'	O
||	O
p	pointer
[	O
-	O
1	int
]	O
==	O
'g'	O
||	O
p	pointer
[	O
-	O
1	int
]	O
==	O
't'	O
)	O
&&	O
p	pointer
-	O
1	int
>	O
spec	pointer
&&	O
isdigit	function
(	O
(	O
unsigned	O
char	O
)	O
p	pointer
[	O
-	O
2	int
]	O
)	O
)	O
)	O
{	O
bool	bool
contextp	bool
=	O
(	O
p	pointer
[	O
-	O
1	int
]	O
==	O
'c'	O
)	O
;	O
bool	bool
glibp	bool
=	O
(	O
p	pointer
[	O
-	O
1	int
]	O
==	O
'g'	O
)	O
;	O
bool	bool
totalp	bool
=	O
(	O
p	pointer
[	O
-	O
1	int
]	O
==	O
't'	O
)	O
;	O
do	O
p	pointer
--	O
;	O
while	O
(	O
p	pointer
>	O
spec	pointer
&&	O
isdigit	function
(	O
(	O
unsigned	O
char	O
)	O
p	pointer
[	O
-	O
1	int
]	O
)	O
)	O
;	O
if	O
(	O
p	pointer
>	O
spec	pointer
&&	O
(	O
p	pointer
[	O
-	O
1	int
]	O
==	O
','	O
||	O
p	pointer
[	O
-	O
1	int
]	O
==	O
':'	O
)	O
)	O
{	O
char	O
*	O
dummy	pointer
;	O
int	O
arg	int
=	O
strtol	function
(	O
p	pointer
,	O
&	O
dummy	pointer
,	O
10	int
)	O
;	O
if	O
(	O
contextp	bool
)	O
{	O
if	O
(	O
argnumc	int
!=	O
0	int
)	O
break	O
;	O
argnumc	int
=	O
arg	int
;	O
}	O
else	O
if	O
(	O
totalp	bool
)	O
{	O
if	O
(	O
argtotal	int
!=	O
0	int
)	O
break	O
;	O
argtotal	int
=	O
arg	int
;	O
}	O
else	O
{	O
if	O
(	O
argnum2	int
!=	O
0	int
)	O
break	O
;	O
argnum2	int
=	O
argnum1	int
;	O
argnum2_glib_context	bool
=	O
argnum1_glib_context	bool
;	O
argnum1	int
=	O
arg	int
;	O
argnum1_glib_context	bool
=	O
glibp	bool
;	O
}	O
}	O
else	O
break	O
;	O
}	O
else	O
if	O
(	O
p	pointer
[	O
-	O
1	int
]	O
==	O
'"'	O
)	O
{	O
const	O
char	O
*	O
xcomment_end	pointer
;	O
p	pointer
--	O
;	O
xcomment_end	pointer
=	O
p	pointer
;	O
while	O
(	O
p	pointer
>	O
spec	pointer
&&	O
p	pointer
[	O
-	O
1	int
]	O
!=	O
'"'	O
)	O
p	pointer
--	O
;	O
if	O
(	O
p	pointer
>	O
spec	pointer
)	O
{	O
const	O
char	O
*	O
xcomment_start	pointer
;	O
xcomment_start	pointer
=	O
p	pointer
;	O
p	pointer
--	O
;	O
if	O
(	O
p	pointer
>	O
spec	pointer
&&	O
(	O
p	pointer
[	O
-	O
1	int
]	O
==	O
','	O
||	O
p	pointer
[	O
-	O
1	int
]	O
==	O
':'	O
)	O
)	O
{	O
size_t	long
xcomment_len	long
=	O
xcomment_end	pointer
-	O
xcomment_start	pointer
;	O
char	O
*	O
xcomment	pointer
=	O
XNMALLOC	O
(	O
xcomment_len	long
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	function
(	O
xcomment	pointer
,	O
xcomment_start	pointer
,	O
xcomment_len	long
)	O
;	O
xcomment	pointer
[	O
xcomment_len	long
]	O
=	O
'\0'	O
;	O
string_list_append	function
(	O
&	O
xcomments	struct
,	O
xcomment	pointer
)	O
;	O
}	O
else	O
break	O
;	O
}	O
else	O
break	O
;	O
}	O
else	O
break	O
;	O
if	O
(	O
!	O
(	O
p	pointer
>	O
spec	pointer
&&	O
(	O
p	pointer
[	O
-	O
1	int
]	O
==	O
','	O
||	O
p	pointer
[	O
-	O
1	int
]	O
==	O
':'	O
)	O
)	O
)	O
abort	function
(	O
)	O
;	O
p	pointer
--	O
;	O
if	O
(	O
*	O
p	pointer
==	O
':'	O
)	O
{	O
size_t	long
i	long
;	O
if	O
(	O
argnum1	int
==	O
0	int
&&	O
argnum2	int
==	O
0	int
)	O
break	O
;	O
if	O
(	O
argnumc	int
!=	O
0	int
&&	O
(	O
argnum1_glib_context	bool
||	O
argnum2_glib_context	bool
)	O
)	O
break	O
;	O
*	O
endp	pointer
=	O
p	pointer
;	O
shapep	pointer
->	O
argnum1	int
=	O
(	O
argnum1	int
>	O
0	int
?	O
argnum1	int
:	O
1	int
)	O
;	O
shapep	pointer
->	O
argnum2	int
=	O
argnum2	int
;	O
shapep	pointer
->	O
argnumc	int
=	O
argnumc	int
;	O
shapep	pointer
->	O
argnum1_glib_context	bool
=	O
argnum1_glib_context	bool
;	O
shapep	pointer
->	O
argnum2_glib_context	bool
=	O
argnum2_glib_context	bool
;	O
shapep	pointer
->	O
argtotal	int
=	O
argtotal	int
;	O
string_list_init	function
(	O
&	O
shapep	pointer
->	O
xcomments	struct
)	O
;	O
for	O
(	O
i	long
=	O
xcomments	struct
.	O
nitems	long
;	O
i	long
>	O
0	int
;	O
)	O
string_list_append	function
(	O
&	O
shapep	pointer
->	O
xcomments	struct
,	O
xcomments	struct
.	O
item	pointer
[	O
--	O
i	long
]	O
)	O
;	O
string_list_destroy	function
(	O
&	O
xcomments	struct
)	O
;	O
return	O
;	O
}	O
}	O
*	O
endp	pointer
=	O
spec	pointer
+	O
strlen	function
(	O
spec	pointer
)	O
;	O
shapep	pointer
->	O
argnum1	int
=	O
1	int
;	O
shapep	pointer
->	O
argnum2	int
=	O
0	int
;	O
shapep	pointer
->	O
argnumc	int
=	O
0	int
;	O
shapep	pointer
->	O
argnum1_glib_context	bool
=	O
false	int
;	O
shapep	pointer
->	O
argnum2_glib_context	bool
=	O
false	int
;	O
shapep	pointer
->	O
argtotal	int
=	O
0	int
;	O
string_list_init	function
(	O
&	O
shapep	pointer
->	O
xcomments	struct
)	O
;	O
string_list_destroy	function
(	O
&	O
xcomments	struct
)	O
;	O
}	O
void	O
insert_keyword_callshape	function
(	O
hash_table	struct
*	O
table	pointer
,	O
const	O
char	O
*	O
keyword	pointer
,	O
size_t	long
keyword_len	long
,	O
const	O
struct	O
callshape	struct
*	O
shape	pointer
)	O
{	O
void	O
*	O
old_value	pointer
;	O
if	O
(	O
hash_find_entry	function
(	O
table	pointer
,	O
keyword	pointer
,	O
keyword_len	long
,	O
&	O
old_value	pointer
)	O
)	O
{	O
struct	O
callshapes	struct
*	O
shapes	array
=	O
XMALLOC	O
(	O
struct	O
callshapes	struct
)	O
;	O
shapes	array
->	O
nshapes	long
=	O
1	int
;	O
shapes	array
->	O
shapes	array
[	O
0	int
]	O
=	O
*	O
shape	pointer
;	O
keyword	pointer
=	O
(	O
const	O
char	O
*	O
)	O
hash_insert_entry	function
(	O
table	pointer
,	O
keyword	pointer
,	O
keyword_len	long
,	O
shapes	array
)	O
;	O
if	O
(	O
keyword	pointer
==	O
NULL	O
)	O
abort	function
(	O
)	O
;	O
shapes	array
->	O
keyword	pointer
=	O
keyword	pointer
;	O
shapes	array
->	O
keyword_len	long
=	O
keyword_len	long
;	O
}	O
else	O
{	O
struct	O
callshapes	struct
*	O
old_shapes	pointer
=	O
(	O
struct	O
callshapes	struct
*	O
)	O
old_value	pointer
;	O
bool	bool
found	bool
;	O
size_t	long
i	long
;	O
found	bool
=	O
false	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
old_shapes	pointer
->	O
nshapes	long
;	O
i	long
++	O
)	O
if	O
(	O
old_shapes	pointer
->	O
shapes	array
[	O
i	long
]	O
.	O
argnum1	int
==	O
shape	pointer
->	O
argnum1	int
&&	O
old_shapes	pointer
->	O
shapes	array
[	O
i	long
]	O
.	O
argnum2	int
==	O
shape	pointer
->	O
argnum2	int
&&	O
old_shapes	pointer
->	O
shapes	array
[	O
i	long
]	O
.	O
argnumc	int
==	O
shape	pointer
->	O
argnumc	int
&&	O
old_shapes	pointer
->	O
shapes	array
[	O
i	long
]	O
.	O
argnum1_glib_context	bool
==	O
shape	pointer
->	O
argnum1_glib_context	bool
&&	O
old_shapes	pointer
->	O
shapes	array
[	O
i	long
]	O
.	O
argnum2_glib_context	bool
==	O
shape	pointer
->	O
argnum2_glib_context	bool
&&	O
old_shapes	pointer
->	O
shapes	array
[	O
i	long
]	O
.	O
argtotal	int
==	O
shape	pointer
->	O
argtotal	int
)	O
{	O
old_shapes	pointer
->	O
shapes	array
[	O
i	long
]	O
.	O
xcomments	struct
=	O
shape	pointer
->	O
xcomments	struct
;	O
found	bool
=	O
true	int
;	O
break	O
;	O
}	O
if	O
(	O
!	O
found	bool
)	O
{	O
struct	O
callshapes	struct
*	O
shapes	array
=	O
(	O
struct	O
callshapes	struct
*	O
)	O
xmalloc	function
(	O
xsum	function
(	O
sizeof	O
(	O
struct	O
callshapes	struct
)	O
,	O
xtimes	O
(	O
old_shapes	pointer
->	O
nshapes	long
,	O
sizeof	O
(	O
struct	O
callshape	struct
)	O
)	O
)	O
)	O
;	O
shapes	array
->	O
keyword	pointer
=	O
old_shapes	pointer
->	O
keyword	pointer
;	O
shapes	array
->	O
keyword_len	long
=	O
old_shapes	pointer
->	O
keyword_len	long
;	O
shapes	array
->	O
nshapes	long
=	O
old_shapes	pointer
->	O
nshapes	long
+	O
1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
old_shapes	pointer
->	O
nshapes	long
;	O
i	long
++	O
)	O
shapes	array
->	O
shapes	array
[	O
i	long
]	O
=	O
old_shapes	pointer
->	O
shapes	array
[	O
i	long
]	O
;	O
shapes	array
->	O
shapes	array
[	O
i	long
]	O
=	O
*	O
shape	pointer
;	O
if	O
(	O
hash_set_value	function
(	O
table	pointer
,	O
keyword	pointer
,	O
keyword_len	long
,	O
shapes	array
)	O
)	O
abort	function
(	O
)	O
;	O
free	function
(	O
old_shapes	pointer
)	O
;	O
}	O
}	O
}	O
