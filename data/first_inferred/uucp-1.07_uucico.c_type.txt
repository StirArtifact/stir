const	O
char	O
uucico_rcsid	array
[	O
]	O
=	O
"$Id: uucico.c,v 1.204 2003/05/29 06:00:49 ian Rel $"	pointer
;	O
static	O
const	O
struct	O
sprotocol	struct
asProtocols	array
[	O
]	O
=	O
{	O
{	O
't'	O
,	O
TCP_PROTO	O
,	O
1	int
,	O
TRUE	O
,	O
asTproto_params	array
,	O
ftstart	function
,	O
ftshutdown	function
,	O
ftsendcmd	function
,	O
ztgetspace	function
,	O
ftsenddata	function
,	O
ftwait	function
,	O
ftfile	function
}	O
,	O
{	O
'e'	O
,	O
TCP_PROTO	O
,	O
1	int
,	O
TRUE	O
,	O
asEproto_params	array
,	O
festart	function
,	O
feshutdown	function
,	O
fesendcmd	function
,	O
zegetspace	function
,	O
fesenddata	function
,	O
fewait	function
,	O
fefile	function
}	O
,	O
{	O
'i'	O
,	O
UUCONF_RELIABLE_EIGHT	O
,	O
7	int
,	O
TRUE	O
,	O
asIproto_params	array
,	O
fistart	function
,	O
fishutdown	function
,	O
fisendcmd	function
,	O
zigetspace	function
,	O
fisenddata	function
,	O
fiwait	function
,	O
NULL	O
}	O
,	O
{	O
'a'	O
,	O
UUCONF_RELIABLE_EIGHT	O
,	O
1	int
,	O
TRUE	O
,	O
asZproto_params	array
,	O
fzstart	function
,	O
fzshutdown	function
,	O
fzsendcmd	function
,	O
zzgetspace	function
,	O
fzsenddata	function
,	O
fzwait	function
,	O
fzfile	function
}	O
,	O
{	O
'g'	O
,	O
UUCONF_RELIABLE_EIGHT	O
,	O
1	int
,	O
TRUE	O
,	O
asGproto_params	array
,	O
fgstart	function
,	O
fgshutdown	function
,	O
fgsendcmd	function
,	O
zggetspace	function
,	O
fgsenddata	function
,	O
fgwait	function
,	O
NULL	O
}	O
,	O
{	O
'G'	O
,	O
UUCONF_RELIABLE_EIGHT	O
,	O
1	int
,	O
TRUE	O
,	O
asGproto_params	array
,	O
fbiggstart	function
,	O
fgshutdown	function
,	O
fgsendcmd	function
,	O
zggetspace	function
,	O
fgsenddata	function
,	O
fgwait	function
,	O
NULL	O
}	O
,	O
{	O
'j'	O
,	O
UUCONF_RELIABLE_EIGHT	O
,	O
7	int
,	O
TRUE	O
,	O
asIproto_params	array
,	O
fjstart	function
,	O
fjshutdown	function
,	O
fisendcmd	function
,	O
zigetspace	function
,	O
fisenddata	function
,	O
fiwait	function
,	O
NULL	O
}	O
,	O
{	O
'f'	O
,	O
UUCONF_RELIABLE_RELIABLE	O
,	O
1	int
,	O
FALSE	O
,	O
asFproto_params	array
,	O
ffstart	function
,	O
ffshutdown	function
,	O
ffsendcmd	function
,	O
zfgetspace	function
,	O
ffsenddata	function
,	O
ffwait	function
,	O
fffile	function
}	O
,	O
{	O
'v'	O
,	O
UUCONF_RELIABLE_EIGHT	O
,	O
1	int
,	O
TRUE	O
,	O
asGproto_params	array
,	O
fvstart	function
,	O
fgshutdown	function
,	O
fgsendcmd	function
,	O
zggetspace	function
,	O
fgsenddata	function
,	O
fgwait	function
,	O
NULL	O
}	O
,	O
{	O
'y'	O
,	O
UUCONF_RELIABLE_RELIABLE	O
|	O
UUCONF_RELIABLE_EIGHT	O
,	O
1	int
,	O
TRUE	O
,	O
asYproto_params	array
,	O
fystart	function
,	O
fyshutdown	function
,	O
fysendcmd	function
,	O
zygetspace	function
,	O
fysenddata	function
,	O
fywait	function
,	O
fyfile	function
}	O
}	O
;	O
static	O
boolean	int
fLocked_system	int
;	O
static	O
struct	O
uuconf_system	struct
sLocked_system	struct
;	O
static	O
struct	O
sdaemon	struct
sDaemon	struct
;	O
static	O
struct	O
sconnection	struct
*	O
qConn	pointer
;	O
static	O
pointer	pointer
pUuconf	pointer
;	O
struct	O
spass	struct
{	O
boolean	int
fmatched	int
;	O
boolean	int
flocked	int
;	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
}	O
;	O
static	O
void	O
uusage	function
P	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
void	O
uhelp	function
P	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
void	O
uabort	function
P	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
boolean	int
fcall	function
P	O
(	O
(	O
pointer	pointer
puuconf	pointer
,	O
const	O
char	O
*	O
zconfig	pointer
,	O
boolean	int
fuuxqt	int
,	O
const	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
,	O
struct	O
uuconf_port	struct
*	O
qport	pointer
,	O
boolean	int
fifwork	int
,	O
boolean	int
fforce	int
,	O
boolean	int
fdetach	int
,	O
boolean	int
fquiet	int
,	O
boolean	int
ftrynext	int
)	O
)	O
;	O
static	O
boolean	int
fconn_call	function
P	O
(	O
(	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
,	O
struct	O
uuconf_port	struct
*	O
qport	pointer
,	O
struct	O
sstatus	struct
*	O
qstat	pointer
,	O
int	O
cretry	int
,	O
boolean	int
*	O
pfcalled	pointer
)	O
)	O
;	O
static	O
boolean	int
fdo_call	function
P	O
(	O
(	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
,	O
struct	O
sstatus	struct
*	O
qstat	pointer
,	O
const	O
struct	O
uuconf_dialer	struct
*	O
qdialer	pointer
,	O
boolean	int
*	O
pfcalled	pointer
,	O
enum	O
tstatus_type	enum
*	O
pterr	pointer
)	O
)	O
;	O
static	O
int	O
iuport_lock	function
P	O
(	O
(	O
struct	O
uuconf_port	struct
*	O
qport	pointer
,	O
pointer	pointer
pinfo	pointer
)	O
)	O
;	O
static	O
boolean	int
flogin_prompt	function
P	O
(	O
(	O
pointer	pointer
puuconf	pointer
,	O
const	O
char	O
*	O
zconfig	pointer
,	O
boolean	int
fuuxqt	int
,	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
const	O
char	O
*	O
zlogin	pointer
,	O
const	O
char	O
*	O
*	O
pzsystem	pointer
)	O
)	O
;	O
static	O
int	O
icallin_cmp	function
P	O
(	O
(	O
int	O
iwhich	int
,	O
pointer	pointer
pinfo	pointer
,	O
const	O
char	O
*	O
zfile	pointer
)	O
)	O
;	O
static	O
boolean	int
faccept_call	function
P	O
(	O
(	O
pointer	pointer
puuconf	pointer
,	O
const	O
char	O
*	O
zconfig	pointer
,	O
boolean	int
fuuxqt	int
,	O
const	O
char	O
*	O
zlogin	pointer
,	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
const	O
char	O
*	O
*	O
pzsystem	pointer
)	O
)	O
;	O
static	O
void	O
uaccept_call_cleanup	function
P	O
(	O
(	O
pointer	pointer
puuconf	pointer
,	O
struct	O
uuconf_system	struct
*	O
qfreesys	pointer
,	O
struct	O
uuconf_port	struct
*	O
qport	pointer
,	O
struct	O
uuconf_port	struct
*	O
qfreeport	pointer
,	O
char	O
*	O
zloc	pointer
)	O
)	O
;	O
static	O
void	O
uapply_proto_params	function
P	O
(	O
(	O
pointer	pointer
puuconf	pointer
,	O
int	O
bproto	int
,	O
struct	O
uuconf_cmdtab	struct
*	O
qcmds	pointer
,	O
struct	O
uuconf_proto_param	struct
*	O
pas	pointer
)	O
)	O
;	O
static	O
boolean	int
fsend_uucp_cmd	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
const	O
char	O
*	O
z	pointer
)	O
)	O
;	O
static	O
char	O
*	O
zget_uucp_cmd	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
boolean	int
frequired	int
,	O
boolean	int
fstrip	int
)	O
)	O
;	O
static	O
char	O
*	O
zget_typed_line	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
boolean	int
fstrip	int
)	O
)	O
;	O
static	O
const	O
struct	O
option	struct
asLongopts	array
[	O
]	O
=	O
{	O
{	O
"quiet"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
2	int
}	O
,	O
{	O
"ifwork"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'C'	O
}	O
,	O
{	O
"nodetach"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'D'	O
}	O
,	O
{	O
"loop"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'e'	O
}	O
,	O
{	O
"force"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'f'	O
}	O
,	O
{	O
"stdin"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'i'	O
}	O
,	O
{	O
"prompt"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'l'	O
}	O
,	O
{	O
"port"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'p'	O
}	O
,	O
{	O
"nouuxqt"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'q'	O
}	O
,	O
{	O
"master"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
3	int
}	O
,	O
{	O
"slave"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
4	int
}	O
,	O
{	O
"system"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
's'	O
}	O
,	O
{	O
"login"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'u'	O
}	O
,	O
{	O
"wait"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'w'	O
}	O
,	O
{	O
"try-next"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'z'	O
}	O
,	O
{	O
"config"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'I'	O
}	O
,	O
{	O
"debug"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'x'	O
}	O
,	O
{	O
"version"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'v'	O
}	O
,	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
1	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
int	O
main	function
(	O
argc	int
,	O
argv	pointer
)	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
{	O
boolean	int
fquiet	int
=	O
FALSE	O
;	O
boolean	int
fifwork	int
=	O
FALSE	O
;	O
boolean	int
fdetach	int
=	O
TRUE	O
;	O
boolean	int
fendless	int
=	O
FALSE	O
;	O
boolean	int
fforce	int
=	O
FALSE	O
;	O
enum	O
uuconf_porttype	enum
tstdintype	enum
=	O
UUCONF_PORTTYPE_STDIN	int
;	O
const	O
char	O
*	O
zconfig	pointer
=	O
NULL	O
;	O
boolean	int
flogin	int
=	O
FALSE	O
;	O
const	O
char	O
*	O
zport	pointer
=	O
NULL	O
;	O
boolean	int
fuuxqt	int
=	O
TRUE	O
;	O
boolean	int
fmaster	int
=	O
FALSE	O
;	O
const	O
char	O
*	O
zsystem	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
zlogin	pointer
=	O
NULL	O
;	O
boolean	int
fwait	int
=	O
FALSE	O
;	O
boolean	int
ftrynext	int
=	O
FALSE	O
;	O
const	O
char	O
*	O
zopts	pointer
;	O
int	O
iopt	int
;	O
struct	O
uuconf_port	struct
*	O
qport	pointer
;	O
struct	O
uuconf_port	struct
sport	struct
;	O
boolean	int
fret	int
=	O
TRUE	O
;	O
pointer	pointer
puuconf	pointer
;	O
int	O
iuuconf	int
;	O
int	O
iholddebug	int
;	O
zProgram	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
if	O
(	O
*	O
zProgram	pointer
==	O
'-'	O
)	O
++	O
zProgram	pointer
;	O
zopts	pointer
=	O
"cCDefi:I:lp:qr:s:S:u:x:X:vwz"	pointer
;	O
while	O
(	O
(	O
iopt	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
zopts	pointer
,	O
asLongopts	array
,	O
(	O
int	O
*	O
)	O
NULL	O
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
iopt	int
)	O
{	O
case	O
2	int
:	O
case	O
'c'	O
:	O
fquiet	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'C'	O
:	O
fifwork	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'D'	O
:	O
fdetach	int
=	O
FALSE	O
;	O
break	O
;	O
case	O
'e'	O
:	O
fendless	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'f'	O
:	O
fforce	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'i'	O
:	O
if	O
(	O
strcasecmp	function
(	O
optarg	O
,	O
"tli"	pointer
)	O
!=	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: unsupported port type \"%s\"\n"	pointer
,	O
zProgram	pointer
,	O
optarg	O
)	O
;	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: not compiled with TLI support\n"	pointer
,	O
zProgram	pointer
)	O
;	O
}	O
break	O
;	O
case	O
'l'	O
:	O
flogin	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'p'	O
:	O
zport	pointer
=	O
optarg	O
;	O
break	O
;	O
case	O
'q'	O
:	O
fuuxqt	int
=	O
FALSE	O
;	O
break	O
;	O
case	O
'r'	O
:	O
if	O
(	O
strcmp	function
(	O
optarg	O
,	O
"1"	pointer
)	O
==	O
0	int
)	O
fmaster	int
=	O
TRUE	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
optarg	O
,	O
"0"	pointer
)	O
==	O
0	int
)	O
fmaster	int
=	O
FALSE	O
;	O
else	O
uusage	function
(	O
)	O
;	O
break	O
;	O
case	O
's'	O
:	O
zsystem	pointer
=	O
optarg	O
;	O
fmaster	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'S'	O
:	O
zsystem	pointer
=	O
optarg	O
;	O
fforce	int
=	O
TRUE	O
;	O
fmaster	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'u'	O
:	O
if	O
(	O
fsysdep_privileged	function
(	O
)	O
)	O
zlogin	pointer
=	O
optarg	O
;	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: ignoring command line login name: not a privileged user\n"	pointer
,	O
zProgram	pointer
)	O
;	O
break	O
;	O
case	O
'w'	O
:	O
fwait	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'z'	O
:	O
ftrynext	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'I'	O
:	O
if	O
(	O
fsysdep_other_config	function
(	O
optarg	O
)	O
)	O
zconfig	pointer
=	O
optarg	O
;	O
break	O
;	O
case	O
'x'	O
:	O
case	O
'X'	O
:	O
iDebug	int
|=	O
idebug_parse	function
(	O
optarg	O
)	O
;	O
break	O
;	O
case	O
'v'	O
:	O
printf	function
(	O
"uucico (Taylor UUCP) %s\n"	pointer
,	O
VERSION	pointer
)	O
;	O
printf	function
(	O
"Copyright (C) 1991, 92, 93, 94, 1995, 2002, 2003 Ian Lance Taylor\n"	pointer
)	O
;	O
printf	function
(	O
"This program is free software; you may redistribute it under the terms of\n"	pointer
)	O
;	O
printf	function
(	O
"the GNU General Public LIcense.  This program has ABSOLUTELY NO WARRANTY.\n"	pointer
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
case	O
4	int
:	O
fmaster	int
=	O
FALSE	O
;	O
break	O
;	O
case	O
3	int
:	O
fmaster	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
1	int
:	O
uhelp	function
(	O
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
case	O
0	int
:	O
break	O
;	O
default	O
:	O
uusage	function
(	O
)	O
;	O
}	O
}	O
if	O
(	O
optind	O
!=	O
argc	int
)	O
uusage	function
(	O
)	O
;	O
if	O
(	O
fwait	int
&&	O
zport	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: -w requires -p"	pointer
,	O
zProgram	pointer
)	O
;	O
uusage	function
(	O
)	O
;	O
}	O
iuuconf	int
=	O
uuconf_init	function
(	O
&	O
puuconf	pointer
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
,	O
zconfig	pointer
)	O
;	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
ulog_uuconf	function
(	O
LOG_FATAL	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
pUuconf	pointer
=	O
puuconf	pointer
;	O
{	O
const	O
char	O
*	O
zdebug	pointer
;	O
iuuconf	int
=	O
uuconf_debuglevel	function
(	O
puuconf	pointer
,	O
&	O
zdebug	pointer
)	O
;	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
ulog_uuconf	function
(	O
LOG_FATAL	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
if	O
(	O
zdebug	pointer
!=	O
NULL	O
)	O
iDebug	int
|=	O
idebug_parse	function
(	O
zdebug	pointer
)	O
;	O
}	O
if	O
(	O
zport	pointer
==	O
NULL	O
)	O
qport	pointer
=	O
NULL	O
;	O
else	O
{	O
iuuconf	int
=	O
uuconf_find_port	function
(	O
puuconf	pointer
,	O
zport	pointer
,	O
(	O
long	O
)	O
0	int
,	O
(	O
long	O
)	O
0	int
,	O
(	O
int	O
(	O
*	O
)	O
P	O
(	O
(	O
struct	O
uuconf_port	struct
*	O
,	O
pointer	pointer
)	O
)	O
)	O
NULL	O
,	O
(	O
pointer	pointer
)	O
NULL	O
,	O
&	O
sport	struct
)	O
;	O
if	O
(	O
iuuconf	int
==	O
UUCONF_NOT_FOUND	O
)	O
ulog	function
(	O
LOG_FATAL	int
,	O
"%s: port not found"	pointer
,	O
zport	pointer
)	O
;	O
else	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
ulog_uuconf	function
(	O
LOG_FATAL	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
qport	pointer
=	O
&	O
sport	struct
;	O
}	O
usysdep_signal	function
(	O
SIGINT	int
)	O
;	O
usysdep_signal	function
(	O
SIGHUP	int
)	O
;	O
usysdep_signal	function
(	O
SIGQUIT	int
)	O
;	O
usysdep_signal	function
(	O
SIGTERM	int
)	O
;	O
usysdep_signal	function
(	O
SIGPIPE	int
)	O
;	O
usysdep_initialize	function
(	O
puuconf	pointer
,	O
INIT_SUID	O
)	O
;	O
ulog_to_file	function
(	O
puuconf	pointer
,	O
TRUE	O
)	O
;	O
ulog_fatal_fn	function
(	O
uabort	function
)	O
;	O
if	O
(	O
fmaster	int
)	O
{	O
if	O
(	O
zsystem	pointer
!=	O
NULL	O
)	O
{	O
iuuconf	int
=	O
uuconf_system_info	function
(	O
puuconf	pointer
,	O
zsystem	pointer
,	O
&	O
sLocked_system	struct
)	O
;	O
if	O
(	O
iuuconf	int
==	O
UUCONF_NOT_FOUND	O
)	O
ulog	function
(	O
LOG_FATAL	int
,	O
"%s: System not found"	pointer
,	O
zsystem	pointer
)	O
;	O
else	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
ulog_uuconf	function
(	O
LOG_FATAL	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
if	O
(	O
fdetach	int
&&	O
(	O
qport	pointer
==	O
NULL	O
||	O
qport	pointer
->	O
uuconf_ttype	enum
!=	O
UUCONF_PORTTYPE_STDIN	int
)	O
)	O
usysdep_detach	function
(	O
)	O
;	O
ulog_system	function
(	O
sLocked_system	struct
.	O
uuconf_zname	pointer
)	O
;	O
iholddebug	int
=	O
iDebug	int
;	O
if	O
(	O
sLocked_system	struct
.	O
uuconf_zdebug	pointer
!=	O
NULL	O
)	O
iDebug	int
|=	O
idebug_parse	function
(	O
sLocked_system	struct
.	O
uuconf_zdebug	pointer
)	O
;	O
if	O
(	O
!	O
fsysdep_lock_system	function
(	O
&	O
sLocked_system	struct
)	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"System already locked"	pointer
)	O
;	O
fret	int
=	O
FALSE	O
;	O
}	O
else	O
{	O
fLocked_system	int
=	O
TRUE	O
;	O
fret	int
=	O
fcall	function
(	O
puuconf	pointer
,	O
zconfig	pointer
,	O
fuuxqt	int
,	O
&	O
sLocked_system	struct
,	O
qport	pointer
,	O
fifwork	int
,	O
fforce	int
,	O
fdetach	int
,	O
fquiet	int
,	O
ftrynext	int
)	O
;	O
if	O
(	O
fLocked_system	int
)	O
{	O
(	O
void	O
)	O
fsysdep_unlock_system	function
(	O
&	O
sLocked_system	struct
)	O
;	O
fLocked_system	int
=	O
FALSE	O
;	O
}	O
}	O
iDebug	int
=	O
iholddebug	int
;	O
ulog_system	function
(	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
(	O
void	O
)	O
uuconf_system_free	function
(	O
puuconf	pointer
,	O
&	O
sLocked_system	struct
)	O
;	O
}	O
else	O
{	O
char	O
*	O
*	O
pznames	pointer
,	O
*	O
*	O
pz	pointer
;	O
int	O
c	long
,	O
i	int
;	O
boolean	int
fdidone	int
;	O
fret	int
=	O
TRUE	O
;	O
fdidone	int
=	O
FALSE	O
;	O
iuuconf	int
=	O
uuconf_system_names	function
(	O
puuconf	pointer
,	O
&	O
pznames	pointer
,	O
0	int
)	O
;	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
ulog_uuconf	function
(	O
LOG_FATAL	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
c	long
=	O
0	int
;	O
for	O
(	O
pz	pointer
=	O
pznames	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
c	long
++	O
;	O
srand	function
(	O
(	O
unsigned	O
int	O
)	O
ixsysdep_time	function
(	O
(	O
long	O
*	O
)	O
NULL	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
c	long
-	O
1	int
;	O
i	int
>	O
0	int
;	O
i	int
--	O
)	O
{	O
int	O
iuse	int
;	O
char	O
*	O
zhold	pointer
;	O
iuse	int
=	O
rand	function
(	O
)	O
%	O
(	O
i	int
+	O
1	int
)	O
;	O
zhold	pointer
=	O
pznames	pointer
[	O
i	int
]	O
;	O
pznames	pointer
[	O
i	int
]	O
=	O
pznames	pointer
[	O
iuse	int
]	O
;	O
pznames	pointer
[	O
iuse	int
]	O
=	O
zhold	pointer
;	O
}	O
for	O
(	O
pz	pointer
=	O
pznames	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
&&	O
!	O
FGOT_SIGNAL	O
(	O
)	O
;	O
pz	pointer
++	O
)	O
{	O
iuuconf	int
=	O
uuconf_system_info	function
(	O
puuconf	pointer
,	O
*	O
pz	pointer
,	O
&	O
sLocked_system	struct
)	O
;	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
{	O
ulog_uuconf	function
(	O
LOG_ERROR	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
xfree	function
(	O
(	O
pointer	pointer
)	O
*	O
pz	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
fsysdep_has_work	function
(	O
&	O
sLocked_system	struct
)	O
)	O
{	O
fdidone	int
=	O
TRUE	O
;	O
if	O
(	O
fdetach	int
&&	O
(	O
qport	pointer
==	O
NULL	O
||	O
qport	pointer
->	O
uuconf_ttype	enum
!=	O
UUCONF_PORTTYPE_STDIN	int
)	O
)	O
usysdep_detach	function
(	O
)	O
;	O
ulog_system	function
(	O
sLocked_system	struct
.	O
uuconf_zname	pointer
)	O
;	O
iholddebug	int
=	O
iDebug	int
;	O
if	O
(	O
sLocked_system	struct
.	O
uuconf_zdebug	pointer
!=	O
NULL	O
)	O
iDebug	int
|=	O
idebug_parse	function
(	O
sLocked_system	struct
.	O
uuconf_zdebug	pointer
)	O
;	O
if	O
(	O
!	O
fsysdep_lock_system	function
(	O
&	O
sLocked_system	struct
)	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"System already locked"	pointer
)	O
;	O
fret	int
=	O
FALSE	O
;	O
}	O
else	O
{	O
fLocked_system	int
=	O
TRUE	O
;	O
if	O
(	O
!	O
fcall	function
(	O
puuconf	pointer
,	O
zconfig	pointer
,	O
fuuxqt	int
,	O
&	O
sLocked_system	struct
,	O
qport	pointer
,	O
TRUE	O
,	O
fforce	int
,	O
fdetach	int
,	O
fquiet	int
,	O
ftrynext	int
)	O
)	O
fret	int
=	O
FALSE	O
;	O
afSignal	array
[	O
INDEXSIG_SIGHUP	O
]	O
=	O
FALSE	O
;	O
if	O
(	O
fLocked_system	int
)	O
{	O
(	O
void	O
)	O
fsysdep_unlock_system	function
(	O
&	O
sLocked_system	struct
)	O
;	O
fLocked_system	int
=	O
FALSE	O
;	O
}	O
}	O
iDebug	int
=	O
iholddebug	int
;	O
ulog_system	function
(	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
(	O
void	O
)	O
uuconf_system_free	function
(	O
puuconf	pointer
,	O
&	O
sLocked_system	struct
)	O
;	O
xfree	function
(	O
(	O
pointer	pointer
)	O
*	O
pz	pointer
)	O
;	O
}	O
xfree	function
(	O
(	O
pointer	pointer
)	O
pznames	pointer
)	O
;	O
if	O
(	O
!	O
fdidone	int
&&	O
!	O
fquiet	int
)	O
ulog	function
(	O
LOG_NORMAL	int
,	O
"No work"	pointer
)	O
;	O
}	O
if	O
(	O
fwait	int
)	O
{	O
fendless	int
=	O
TRUE	O
;	O
fmaster	int
=	O
FALSE	O
;	O
}	O
}	O
if	O
(	O
!	O
fmaster	int
)	O
{	O
struct	O
sconnection	struct
sconn	struct
;	O
boolean	int
flocked	int
;	O
fret	int
=	O
TRUE	O
;	O
zsystem	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
fconn_init	function
(	O
qport	pointer
,	O
&	O
sconn	struct
,	O
tstdintype	enum
)	O
)	O
fret	int
=	O
FALSE	O
;	O
if	O
(	O
qport	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
fdetach	int
&&	O
qport	pointer
->	O
uuconf_ttype	enum
!=	O
UUCONF_PORTTYPE_STDIN	int
)	O
usysdep_detach	function
(	O
)	O
;	O
}	O
if	O
(	O
fconn_lock	function
(	O
&	O
sconn	struct
,	O
TRUE	O
,	O
FALSE	O
)	O
)	O
flocked	int
=	O
TRUE	O
;	O
else	O
{	O
flocked	int
=	O
FALSE	O
;	O
ulog	function
(	O
LOG_ERROR	int
,	O
"%s: Port already locked"	pointer
,	O
qport	pointer
->	O
uuconf_zname	pointer
)	O
;	O
fret	int
=	O
FALSE	O
;	O
}	O
if	O
(	O
fret	int
)	O
{	O
if	O
(	O
!	O
fconn_open	function
(	O
&	O
sconn	struct
,	O
(	O
long	O
)	O
0	int
,	O
(	O
long	O
)	O
0	int
,	O
TRUE	O
,	O
FALSE	O
)	O
)	O
fret	int
=	O
FALSE	O
;	O
qConn	pointer
=	O
&	O
sconn	struct
;	O
}	O
if	O
(	O
fret	int
)	O
{	O
if	O
(	O
fendless	int
)	O
{	O
while	O
(	O
!	O
FGOT_SIGNAL	O
(	O
)	O
&&	O
flogin_prompt	function
(	O
puuconf	pointer
,	O
zconfig	pointer
,	O
fuuxqt	int
,	O
&	O
sconn	struct
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
,	O
(	O
const	O
char	O
*	O
*	O
)	O
NULL	O
)	O
)	O
{	O
if	O
(	O
!	O
fconn_close	function
(	O
&	O
sconn	struct
,	O
puuconf	pointer
,	O
(	O
struct	O
uuconf_dialer	struct
*	O
)	O
NULL	O
,	O
TRUE	O
)	O
||	O
!	O
fconn_open	function
(	O
&	O
sconn	struct
,	O
(	O
long	O
)	O
0	int
,	O
(	O
long	O
)	O
0	int
,	O
TRUE	O
,	O
FALSE	O
)	O
)	O
break	O
;	O
}	O
fret	int
=	O
FALSE	O
;	O
}	O
else	O
{	O
if	O
(	O
flogin	int
)	O
fret	int
=	O
flogin_prompt	function
(	O
puuconf	pointer
,	O
zconfig	pointer
,	O
fuuxqt	int
,	O
&	O
sconn	struct
,	O
zlogin	pointer
,	O
&	O
zsystem	pointer
)	O
;	O
else	O
{	O
iholddebug	int
=	O
iDebug	int
;	O
if	O
(	O
zlogin	pointer
==	O
NULL	O
)	O
zlogin	pointer
=	O
zsysdep_login_name	function
(	O
)	O
;	O
fret	int
=	O
faccept_call	function
(	O
puuconf	pointer
,	O
zconfig	pointer
,	O
fuuxqt	int
,	O
zlogin	pointer
,	O
&	O
sconn	struct
,	O
&	O
zsystem	pointer
)	O
;	O
iDebug	int
=	O
iholddebug	int
;	O
}	O
}	O
}	O
if	O
(	O
qConn	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
fconn_close	function
(	O
&	O
sconn	struct
,	O
puuconf	pointer
,	O
(	O
struct	O
uuconf_dialer	struct
*	O
)	O
NULL	O
,	O
fret	int
)	O
)	O
fret	int
=	O
FALSE	O
;	O
qConn	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
flocked	int
)	O
(	O
void	O
)	O
fconn_unlock	function
(	O
&	O
sconn	struct
)	O
;	O
uconn_free	function
(	O
&	O
sconn	struct
)	O
;	O
}	O
ulog_close	function
(	O
)	O
;	O
ustats_close	function
(	O
)	O
;	O
if	O
(	O
afSignal	array
[	O
INDEXSIG_SIGTERM	O
]	O
)	O
fuuxqt	int
=	O
FALSE	O
;	O
if	O
(	O
fuuxqt	int
)	O
{	O
int	O
irunuuxqt	int
;	O
iuuconf	int
=	O
uuconf_runuuxqt	function
(	O
puuconf	pointer
,	O
&	O
irunuuxqt	int
)	O
;	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
ulog_uuconf	function
(	O
LOG_ERROR	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
else	O
if	O
(	O
irunuuxqt	int
==	O
UUCONF_RUNUUXQT_ONCE	O
)	O
{	O
if	O
(	O
fdetach	int
)	O
usysdep_detach	function
(	O
)	O
;	O
if	O
(	O
!	O
fspawn_uuxqt	function
(	O
FALSE	O
,	O
zsystem	pointer
,	O
zconfig	pointer
)	O
)	O
fret	int
=	O
FALSE	O
;	O
}	O
}	O
usysdep_exit	function
(	O
fret	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
uusage	function
(	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Usage: %s [options]\n"	pointer
,	O
zProgram	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Use %s --help for help\n"	pointer
,	O
zProgram	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
static	O
void	O
uhelp	function
(	O
)	O
{	O
printf	function
(	O
"Taylor UUCP %s, copyright (C) 1991, 92, 93, 94, 1995, 2002 Ian Lance Taylor\n"	pointer
,	O
VERSION	pointer
)	O
;	O
printf	function
(	O
"Usage: %s [options]\n"	pointer
,	O
zProgram	pointer
)	O
;	O
printf	function
(	O
" -s,-S,--system system: Call system (-S implies -f)\n"	pointer
)	O
;	O
printf	function
(	O
" -f,--force: Force call despite system status\n"	pointer
)	O
;	O
printf	function
(	O
" -r state: 1 for master, 0 for slave (default)\n"	pointer
)	O
;	O
printf	function
(	O
" --master: Act as master\n"	pointer
)	O
;	O
printf	function
(	O
" --slave: Act as slave (default)\n"	pointer
)	O
;	O
printf	function
(	O
" -p,--port port: Specify port\n"	pointer
)	O
;	O
printf	function
(	O
" -l,--prompt: Prompt for login name and password\n"	pointer
)	O
;	O
printf	function
(	O
" -e,--loop: Endless loop of login prompts and daemon execution\n"	pointer
)	O
;	O
printf	function
(	O
" -w,--wait: After calling out, wait for incoming calls\n"	pointer
)	O
;	O
printf	function
(	O
" -q,--nouuxqt: Don't start uuxqt when done\n"	pointer
)	O
;	O
printf	function
(	O
" -c,--quiet: Don't log bad time or no work warnings\n"	pointer
)	O
;	O
printf	function
(	O
" -C,--ifwork: Only call named system if there is work\n"	pointer
)	O
;	O
printf	function
(	O
" -D,--nodetach: Don't detach from controlling terminal\n"	pointer
)	O
;	O
printf	function
(	O
" -u,--login: Set login name (privileged users only)\n"	pointer
)	O
;	O
printf	function
(	O
" -i,--stdin type: Type of standard input (only TLI supported)\n"	pointer
)	O
;	O
printf	function
(	O
" -z,--try-next: If a call fails, try the next alternate\n"	pointer
)	O
;	O
printf	function
(	O
" -x,-X,--debug debug: Set debugging level\n"	pointer
)	O
;	O
printf	function
(	O
" -I,--config file: Set configuration file to use\n"	pointer
)	O
;	O
printf	function
(	O
" -v,--version: Print version and exit\n"	pointer
)	O
;	O
printf	function
(	O
" --help: Print help and exit\n"	pointer
)	O
;	O
printf	function
(	O
"Report bugs to taylor-uucp@gnu.org\n"	pointer
)	O
;	O
}	O
static	O
void	O
uabort	function
(	O
)	O
{	O
if	O
(	O
fLocked_system	int
)	O
ufailed	function
(	O
&	O
sDaemon	struct
)	O
;	O
ulog_user	function
(	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
qConn	pointer
!=	O
NULL	O
)	O
{	O
(	O
void	O
)	O
fconn_close	function
(	O
qConn	pointer
,	O
pUuconf	pointer
,	O
(	O
struct	O
uuconf_dialer	struct
*	O
)	O
NULL	O
,	O
FALSE	O
)	O
;	O
(	O
void	O
)	O
fconn_unlock	function
(	O
qConn	pointer
)	O
;	O
uconn_free	function
(	O
qConn	pointer
)	O
;	O
}	O
if	O
(	O
fLocked_system	int
)	O
{	O
(	O
void	O
)	O
fsysdep_unlock_system	function
(	O
&	O
sLocked_system	struct
)	O
;	O
fLocked_system	int
=	O
FALSE	O
;	O
}	O
ulog_system	function
(	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
ulog_close	function
(	O
)	O
;	O
ustats_close	function
(	O
)	O
;	O
usysdep_exit	function
(	O
FALSE	O
)	O
;	O
}	O
static	O
boolean	int
fcall	function
(	O
puuconf	pointer
,	O
zconfig	pointer
,	O
fuuxqt	int
,	O
qorigsys	pointer
,	O
qport	pointer
,	O
fifwork	int
,	O
fforce	int
,	O
fdetach	int
,	O
fquiet	int
,	O
ftrynext	int
)	O
pointer	pointer
puuconf	pointer
;	O
const	O
char	O
*	O
zconfig	pointer
;	O
boolean	int
fuuxqt	int
;	O
const	O
struct	O
uuconf_system	struct
*	O
qorigsys	pointer
;	O
struct	O
uuconf_port	struct
*	O
qport	pointer
;	O
boolean	int
fifwork	int
;	O
boolean	int
fforce	int
;	O
boolean	int
fdetach	int
;	O
boolean	int
fquiet	int
;	O
boolean	int
ftrynext	int
;	O
{	O
struct	O
sstatus	struct
sstat	struct
;	O
long	O
inow	long
;	O
boolean	int
fbadtime	int
,	O
fnevertime	int
,	O
ffoundwork	int
;	O
const	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
;	O
if	O
(	O
!	O
fsysdep_get_status	function
(	O
qorigsys	pointer
,	O
&	O
sstat	struct
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
)	O
return	O
FALSE	O
;	O
ubuffree	function
(	O
sstat	struct
.	O
zstring	pointer
)	O
;	O
inow	long
=	O
ixsysdep_time	function
(	O
(	O
long	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
!	O
fforce	int
)	O
{	O
if	O
(	O
qorigsys	pointer
->	O
uuconf_cmax_retries	int
>	O
0	int
&&	O
sstat	struct
.	O
cretries	int
>=	O
qorigsys	pointer
->	O
uuconf_cmax_retries	int
&&	O
sstat	struct
.	O
ilast	long
<=	O
inow	long
&&	O
sstat	struct
.	O
ilast	long
+	O
SECS_PER_DAY	O
>	O
inow	long
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Too many retries"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
(	O
sstat	struct
.	O
ttype	enum
==	O
STATUS_COMPLETE	int
?	O
sstat	struct
.	O
ilast	long
+	O
qorigsys	pointer
->	O
uuconf_csuccess_wait	int
>	O
inow	long
:	O
sstat	struct
.	O
ilast	long
+	O
sstat	struct
.	O
cwait	int
>	O
inow	long
)	O
&&	O
sstat	struct
.	O
ilast	long
<=	O
inow	long
)	O
{	O
ulog	function
(	O
LOG_NORMAL	int
,	O
"Retry time not reached"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
sDaemon	struct
.	O
puuconf	pointer
=	O
puuconf	pointer
;	O
sDaemon	struct
.	O
zconfig	pointer
=	O
zconfig	pointer
;	O
if	O
(	O
!	O
fuuxqt	int
)	O
sDaemon	struct
.	O
irunuuxqt	int
=	O
UUCONF_RUNUUXQT_NEVER	O
;	O
else	O
{	O
int	O
iuuconf	int
;	O
iuuconf	int
=	O
uuconf_runuuxqt	function
(	O
puuconf	pointer
,	O
&	O
sDaemon	struct
.	O
irunuuxqt	int
)	O
;	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
ulog_uuconf	function
(	O
LOG_ERROR	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
}	O
fbadtime	int
=	O
TRUE	O
;	O
fnevertime	int
=	O
TRUE	O
;	O
ffoundwork	int
=	O
FALSE	O
;	O
for	O
(	O
qsys	pointer
=	O
qorigsys	pointer
;	O
qsys	pointer
!=	O
NULL	O
;	O
qsys	pointer
=	O
qsys	pointer
->	O
uuconf_qalternate	pointer
)	O
{	O
int	O
cretry	int
;	O
boolean	int
fany	int
,	O
fret	int
,	O
fcalled	int
;	O
if	O
(	O
FGOT_SIGNAL	O
(	O
)	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
!	O
qsys	pointer
->	O
uuconf_fcall	int
||	O
qsys	pointer
->	O
uuconf_qtimegrade	pointer
==	O
NULL	O
)	O
continue	O
;	O
if	O
(	O
qport	pointer
!=	O
NULL	O
&&	O
(	O
qsys	pointer
->	O
uuconf_qport	pointer
!=	O
NULL	O
||	O
(	O
qsys	pointer
->	O
uuconf_zport	pointer
!=	O
NULL	O
&&	O
strcmp	function
(	O
qport	pointer
->	O
uuconf_zname	pointer
,	O
qsys	pointer
->	O
uuconf_zport	pointer
)	O
!=	O
0	int
)	O
)	O
)	O
{	O
const	O
struct	O
uuconf_system	struct
*	O
ql	pointer
;	O
for	O
(	O
ql	pointer
=	O
qsys	pointer
->	O
uuconf_qalternate	pointer
;	O
ql	pointer
!=	O
NULL	O
;	O
ql	pointer
=	O
ql	pointer
->	O
uuconf_qalternate	pointer
)	O
{	O
if	O
(	O
ql	pointer
->	O
uuconf_qport	pointer
==	O
NULL	O
&&	O
ql	pointer
->	O
uuconf_zport	pointer
!=	O
NULL	O
&&	O
strcmp	function
(	O
ql	pointer
->	O
uuconf_zport	pointer
,	O
qport	pointer
->	O
uuconf_zname	pointer
)	O
==	O
0	int
)	O
break	O
;	O
}	O
if	O
(	O
ql	pointer
!=	O
NULL	O
)	O
continue	O
;	O
}	O
fnevertime	int
=	O
FALSE	O
;	O
if	O
(	O
!	O
ftimespan_match	function
(	O
qsys	pointer
->	O
uuconf_qtimegrade	pointer
,	O
(	O
long	O
*	O
)	O
NULL	O
,	O
&	O
cretry	int
)	O
)	O
continue	O
;	O
fbadtime	int
=	O
FALSE	O
;	O
sDaemon	struct
.	O
qsys	pointer
=	O
qsys	pointer
;	O
sDaemon	struct
.	O
zlocalname	pointer
=	O
NULL	O
;	O
sDaemon	struct
.	O
qconn	pointer
=	O
NULL	O
;	O
sDaemon	struct
.	O
qproto	pointer
=	O
NULL	O
;	O
sDaemon	struct
.	O
cchans	int
=	O
1	int
;	O
sDaemon	struct
.	O
clocal_size	long
=	O
-	O
1	int
;	O
sDaemon	struct
.	O
cremote_size	long
=	O
-	O
1	int
;	O
sDaemon	struct
.	O
cmax_ever	long
=	O
-	O
2	int
;	O
sDaemon	struct
.	O
cmax_receive	long
=	O
-	O
1	int
;	O
sDaemon	struct
.	O
csent	long
=	O
0	int
;	O
sDaemon	struct
.	O
creceived	long
=	O
0	int
;	O
sDaemon	struct
.	O
cxfiles_received	long
=	O
0	int
;	O
sDaemon	struct
.	O
ifeatures	int
=	O
0	int
;	O
sDaemon	struct
.	O
frequest_hangup	int
=	O
FALSE	O
;	O
sDaemon	struct
.	O
fhangup_requested	int
=	O
FALSE	O
;	O
sDaemon	struct
.	O
fhangup	int
=	O
FALSE	O
;	O
sDaemon	struct
.	O
fmaster	int
=	O
TRUE	O
;	O
sDaemon	struct
.	O
fcaller	int
=	O
TRUE	O
;	O
sDaemon	struct
.	O
ireliable	int
=	O
0	int
;	O
sDaemon	struct
.	O
bgrade	char
=	O
'\0'	O
;	O
if	O
(	O
!	O
fqueue	function
(	O
&	O
sDaemon	struct
,	O
&	O
fany	int
)	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
fifwork	int
&&	O
!	O
fany	int
)	O
{	O
uclear_queue	function
(	O
&	O
sDaemon	struct
)	O
;	O
continue	O
;	O
}	O
ffoundwork	int
=	O
TRUE	O
;	O
fret	int
=	O
fconn_call	function
(	O
&	O
sDaemon	struct
,	O
qport	pointer
,	O
&	O
sstat	struct
,	O
cretry	int
,	O
&	O
fcalled	int
)	O
;	O
uclear_queue	function
(	O
&	O
sDaemon	struct
)	O
;	O
if	O
(	O
fret	int
)	O
return	O
TRUE	O
;	O
if	O
(	O
fcalled	int
&&	O
!	O
ftrynext	int
)	O
return	O
FALSE	O
;	O
if	O
(	O
fdetach	int
)	O
{	O
(	O
void	O
)	O
fsysdep_unlock_system	function
(	O
&	O
sLocked_system	struct
)	O
;	O
fLocked_system	int
=	O
FALSE	O
;	O
usysdep_detach	function
(	O
)	O
;	O
if	O
(	O
!	O
fsysdep_lock_system	function
(	O
&	O
sLocked_system	struct
)	O
)	O
return	O
FALSE	O
;	O
fLocked_system	int
=	O
TRUE	O
;	O
}	O
}	O
if	O
(	O
fbadtime	int
)	O
{	O
if	O
(	O
!	O
fquiet	int
)	O
ulog	function
(	O
LOG_NORMAL	int
,	O
"Wrong time to call"	pointer
)	O
;	O
if	O
(	O
!	O
fnevertime	int
)	O
{	O
sstat	struct
.	O
ttype	enum
=	O
STATUS_WRONG_TIME	int
;	O
sstat	struct
.	O
ilast	long
=	O
inow	long
;	O
sstat	struct
.	O
cwait	int
=	O
0	int
;	O
(	O
void	O
)	O
fsysdep_set_status	function
(	O
qorigsys	pointer
,	O
&	O
sstat	struct
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
ffoundwork	int
)	O
{	O
if	O
(	O
!	O
fquiet	int
)	O
ulog	function
(	O
LOG_NORMAL	int
,	O
"No work"	pointer
)	O
;	O
return	O
TRUE	O
;	O
}	O
return	O
FALSE	O
;	O
}	O
static	O
boolean	int
fconn_call	function
(	O
qdaemon	pointer
,	O
qport	pointer
,	O
qstat	pointer
,	O
cretry	int
,	O
pfcalled	pointer
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
struct	O
uuconf_port	struct
*	O
qport	pointer
;	O
struct	O
sstatus	struct
*	O
qstat	pointer
;	O
int	O
cretry	int
;	O
boolean	int
*	O
pfcalled	pointer
;	O
{	O
pointer	pointer
puuconf	pointer
;	O
const	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
;	O
struct	O
uuconf_port	struct
sport	struct
;	O
struct	O
sconnection	struct
sconn	struct
;	O
enum	O
tstatus_type	enum
terr	enum
;	O
boolean	int
fret	int
;	O
puuconf	pointer
=	O
qdaemon	pointer
->	O
puuconf	pointer
;	O
qsys	pointer
=	O
qdaemon	pointer
->	O
qsys	pointer
;	O
*	O
pfcalled	pointer
=	O
FALSE	O
;	O
afSignal	array
[	O
INDEXSIG_SIGHUP	O
]	O
=	O
FALSE	O
;	O
if	O
(	O
qport	pointer
==	O
NULL	O
)	O
qport	pointer
=	O
qsys	pointer
->	O
uuconf_qport	pointer
;	O
if	O
(	O
qport	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
fconn_init	function
(	O
qport	pointer
,	O
&	O
sconn	struct
,	O
UUCONF_PORTTYPE_UNKNOWN	int
)	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
!	O
fconn_lock	function
(	O
&	O
sconn	struct
,	O
FALSE	O
,	O
FALSE	O
)	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"%s: Port already locked"	pointer
,	O
qport	pointer
->	O
uuconf_zname	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
else	O
{	O
struct	O
spass	struct
s	struct
;	O
int	O
iuuconf	int
;	O
s	struct
.	O
fmatched	int
=	O
FALSE	O
;	O
s	struct
.	O
flocked	int
=	O
FALSE	O
;	O
s	struct
.	O
qconn	pointer
=	O
&	O
sconn	struct
;	O
iuuconf	int
=	O
uuconf_find_port	function
(	O
puuconf	pointer
,	O
qsys	pointer
->	O
uuconf_zport	pointer
,	O
qsys	pointer
->	O
uuconf_ibaud	long
,	O
qsys	pointer
->	O
uuconf_ihighbaud	long
,	O
iuport_lock	function
,	O
(	O
pointer	pointer
)	O
&	O
s	struct
,	O
&	O
sport	struct
)	O
;	O
if	O
(	O
iuuconf	int
==	O
UUCONF_NOT_FOUND	O
)	O
{	O
if	O
(	O
!	O
s	struct
.	O
fmatched	int
)	O
ulog	function
(	O
LOG_ERROR	int
,	O
"No matching ports"	pointer
)	O
;	O
else	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"All matching ports in use"	pointer
)	O
;	O
qstat	pointer
->	O
ttype	enum
=	O
STATUS_PORT_FAILED	int
;	O
qstat	pointer
->	O
ilast	long
=	O
ixsysdep_time	function
(	O
(	O
long	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
cretry	int
==	O
0	int
)	O
qstat	pointer
->	O
cwait	int
=	O
CRETRY_WAIT	O
(	O
qstat	pointer
->	O
cretries	int
)	O
;	O
else	O
qstat	pointer
->	O
cwait	int
=	O
cretry	int
*	O
60	int
;	O
(	O
void	O
)	O
fsysdep_set_status	function
(	O
qsys	pointer
,	O
qstat	pointer
)	O
;	O
}	O
return	O
FALSE	O
;	O
}	O
else	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
{	O
ulog_uuconf	function
(	O
LOG_ERROR	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
if	O
(	O
s	struct
.	O
flocked	int
)	O
{	O
(	O
void	O
)	O
fconn_unlock	function
(	O
&	O
sconn	struct
)	O
;	O
uconn_free	function
(	O
&	O
sconn	struct
)	O
;	O
}	O
return	O
FALSE	O
;	O
}	O
}	O
if	O
(	O
!	O
fconn_open	function
(	O
&	O
sconn	struct
,	O
qsys	pointer
->	O
uuconf_ibaud	long
,	O
qsys	pointer
->	O
uuconf_ihighbaud	long
,	O
FALSE	O
,	O
FALSE	O
)	O
)	O
{	O
terr	enum
=	O
STATUS_PORT_FAILED	int
;	O
fret	int
=	O
FALSE	O
;	O
}	O
else	O
{	O
struct	O
uuconf_dialer	struct
*	O
qdialer	pointer
;	O
struct	O
uuconf_dialer	struct
sdialer	struct
;	O
enum	O
tdialerfound	enum
tdialer	enum
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_zalternate	pointer
==	O
NULL	O
)	O
ulog	function
(	O
LOG_NORMAL	int
,	O
"Calling system %s (port %s)"	pointer
,	O
qsys	pointer
->	O
uuconf_zname	pointer
,	O
zLdevice	pointer
==	O
NULL	O
?	O
(	O
char	O
*	O
)	O
"unknown"	pointer
:	O
zLdevice	pointer
)	O
;	O
else	O
ulog	function
(	O
LOG_NORMAL	int
,	O
"Calling system %s (alternate %s, port %s)"	pointer
,	O
qsys	pointer
->	O
uuconf_zname	pointer
,	O
qsys	pointer
->	O
uuconf_zalternate	pointer
,	O
zLdevice	pointer
==	O
NULL	O
?	O
(	O
char	O
*	O
)	O
"unknown"	pointer
:	O
zLdevice	pointer
)	O
;	O
qdialer	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
fconn_dial	function
(	O
&	O
sconn	struct
,	O
puuconf	pointer
,	O
qsys	pointer
,	O
qsys	pointer
->	O
uuconf_zphone	pointer
,	O
&	O
sdialer	struct
,	O
&	O
tdialer	enum
)	O
)	O
{	O
tdialer	enum
=	O
DIALERFOUND_FALSE	int
;	O
terr	enum
=	O
STATUS_DIAL_FAILED	int
;	O
fret	int
=	O
FALSE	O
;	O
}	O
else	O
{	O
qdaemon	pointer
->	O
qconn	pointer
=	O
&	O
sconn	struct
;	O
if	O
(	O
tdialer	enum
==	O
DIALERFOUND_FALSE	int
)	O
qdialer	pointer
=	O
NULL	O
;	O
else	O
qdialer	pointer
=	O
&	O
sdialer	struct
;	O
fret	int
=	O
fdo_call	function
(	O
qdaemon	pointer
,	O
qstat	pointer
,	O
qdialer	pointer
,	O
pfcalled	pointer
,	O
&	O
terr	enum
)	O
;	O
}	O
(	O
void	O
)	O
fconn_close	function
(	O
&	O
sconn	struct
,	O
puuconf	pointer
,	O
qdialer	pointer
,	O
fret	int
)	O
;	O
if	O
(	O
tdialer	enum
==	O
DIALERFOUND_FREE	int
)	O
(	O
void	O
)	O
uuconf_dialer_free	function
(	O
puuconf	pointer
,	O
&	O
sdialer	struct
)	O
;	O
}	O
if	O
(	O
!	O
fret	int
)	O
{	O
DEBUG_MESSAGE2	O
(	O
DEBUG_HANDSHAKE	O
,	O
"Call failed: %d (%s)"	pointer
,	O
(	O
int	O
)	O
terr	enum
,	O
azStatus	array
[	O
(	O
int	O
)	O
terr	enum
]	O
)	O
;	O
qstat	pointer
->	O
ttype	enum
=	O
terr	enum
;	O
qstat	pointer
->	O
cretries	int
++	O
;	O
qstat	pointer
->	O
ilast	long
=	O
ixsysdep_time	function
(	O
(	O
long	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
cretry	int
==	O
0	int
)	O
qstat	pointer
->	O
cwait	int
=	O
CRETRY_WAIT	O
(	O
qstat	pointer
->	O
cretries	int
)	O
;	O
else	O
qstat	pointer
->	O
cwait	int
=	O
cretry	int
*	O
60	int
;	O
(	O
void	O
)	O
fsysdep_set_status	function
(	O
qsys	pointer
,	O
qstat	pointer
)	O
;	O
}	O
(	O
void	O
)	O
fconn_unlock	function
(	O
&	O
sconn	struct
)	O
;	O
uconn_free	function
(	O
&	O
sconn	struct
)	O
;	O
if	O
(	O
qport	pointer
==	O
NULL	O
)	O
(	O
void	O
)	O
uuconf_port_free	function
(	O
puuconf	pointer
,	O
&	O
sport	struct
)	O
;	O
return	O
fret	int
;	O
}	O
static	O
boolean	int
fdo_call	function
(	O
qdaemon	pointer
,	O
qstat	pointer
,	O
qdialer	pointer
,	O
pfcalled	pointer
,	O
pterr	pointer
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
struct	O
sstatus	struct
*	O
qstat	pointer
;	O
const	O
struct	O
uuconf_dialer	struct
*	O
qdialer	pointer
;	O
boolean	int
*	O
pfcalled	pointer
;	O
enum	O
tstatus_type	enum
*	O
pterr	pointer
;	O
{	O
pointer	pointer
puuconf	pointer
;	O
const	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
;	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
int	O
iuuconf	int
;	O
int	O
istrip	int
;	O
boolean	int
fstrip	int
;	O
const	O
char	O
*	O
zport	pointer
;	O
char	O
*	O
zstr	pointer
;	O
long	O
istart_time	long
;	O
char	O
*	O
zlog	pointer
;	O
puuconf	pointer
=	O
qdaemon	pointer
->	O
puuconf	pointer
;	O
qsys	pointer
=	O
qdaemon	pointer
->	O
qsys	pointer
;	O
qconn	pointer
=	O
qdaemon	pointer
->	O
qconn	pointer
;	O
iuuconf	int
=	O
uuconf_strip	function
(	O
puuconf	pointer
,	O
&	O
istrip	int
)	O
;	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
{	O
ulog_uuconf	function
(	O
LOG_ERROR	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
return	O
FALSE	O
;	O
}	O
fstrip	int
=	O
(	O
istrip	int
&	O
UUCONF_STRIP_PROTO	O
)	O
!=	O
0	int
;	O
*	O
pterr	pointer
=	O
STATUS_LOGIN_FAILED	int
;	O
if	O
(	O
qconn	pointer
->	O
qport	pointer
==	O
NULL	O
)	O
zport	pointer
=	O
"unknown"	pointer
;	O
else	O
zport	pointer
=	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_zname	pointer
;	O
if	O
(	O
!	O
fchat	function
(	O
qconn	pointer
,	O
puuconf	pointer
,	O
&	O
qsys	pointer
->	O
uuconf_schat	struct
,	O
qsys	pointer
,	O
(	O
const	O
struct	O
uuconf_dialer	struct
*	O
)	O
NULL	O
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
,	O
FALSE	O
,	O
zport	pointer
,	O
iconn_baud	function
(	O
qconn	pointer
)	O
)	O
)	O
return	O
FALSE	O
;	O
*	O
pfcalled	pointer
=	O
TRUE	O
;	O
istart_time	long
=	O
ixsysdep_time	function
(	O
(	O
long	O
*	O
)	O
NULL	O
)	O
;	O
*	O
pterr	pointer
=	O
STATUS_HANDSHAKE_FAILED	int
;	O
zstr	pointer
=	O
zget_uucp_cmd	function
(	O
qconn	pointer
,	O
TRUE	O
,	O
fstrip	int
)	O
;	O
if	O
(	O
zstr	pointer
==	O
NULL	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
strncmp	function
(	O
zstr	pointer
,	O
"Shere"	pointer
,	O
5	int
)	O
!=	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Bad startup string (expected \"Shere\" got \"%s\")"	pointer
,	O
zstr	pointer
)	O
;	O
ubuffree	function
(	O
zstr	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
ulog	function
(	O
LOG_NORMAL	int
,	O
"Login successful"	pointer
)	O
;	O
qstat	pointer
->	O
ttype	enum
=	O
STATUS_TALKING	int
;	O
qstat	pointer
->	O
ilast	long
=	O
ixsysdep_time	function
(	O
(	O
long	O
*	O
)	O
NULL	O
)	O
;	O
qstat	pointer
->	O
cretries	int
=	O
0	int
;	O
qstat	pointer
->	O
cwait	int
=	O
0	int
;	O
if	O
(	O
!	O
fsysdep_set_status	function
(	O
qsys	pointer
,	O
qstat	pointer
)	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
zstr	pointer
[	O
5	int
]	O
==	O
'='	O
)	O
{	O
const	O
char	O
*	O
zheresys	pointer
;	O
size_t	long
clen	long
;	O
int	O
icmp	int
;	O
zheresys	pointer
=	O
zstr	pointer
+	O
6	int
;	O
clen	long
=	O
strlen	function
(	O
zheresys	pointer
)	O
;	O
if	O
(	O
clen	long
==	O
7	int
||	O
clen	long
==	O
14	int
)	O
icmp	int
=	O
strncmp	function
(	O
zheresys	pointer
,	O
qsys	pointer
->	O
uuconf_zname	pointer
,	O
clen	long
)	O
;	O
else	O
icmp	int
=	O
strcmp	function
(	O
zheresys	pointer
,	O
qsys	pointer
->	O
uuconf_zname	pointer
)	O
;	O
if	O
(	O
icmp	int
!=	O
0	int
)	O
{	O
if	O
(	O
qsys	pointer
->	O
uuconf_pzalias	pointer
!=	O
NULL	O
)	O
{	O
char	O
*	O
*	O
pz	pointer
;	O
for	O
(	O
pz	pointer
=	O
qsys	pointer
->	O
uuconf_pzalias	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
{	O
if	O
(	O
clen	long
==	O
7	int
||	O
clen	long
==	O
14	int
)	O
icmp	int
=	O
strncmp	function
(	O
zheresys	pointer
,	O
*	O
pz	pointer
,	O
clen	long
)	O
;	O
else	O
icmp	int
=	O
strcmp	function
(	O
zheresys	pointer
,	O
*	O
pz	pointer
)	O
;	O
if	O
(	O
icmp	int
==	O
0	int
)	O
break	O
;	O
}	O
}	O
if	O
(	O
icmp	int
!=	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Called wrong system (%s)"	pointer
,	O
zheresys	pointer
)	O
;	O
ubuffree	function
(	O
zstr	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
zstr	pointer
[	O
5	int
]	O
!=	O
'\0'	O
)	O
DEBUG_MESSAGE1	O
(	O
DEBUG_HANDSHAKE	O
,	O
"fdo_call: Strange Shere: %s"	pointer
,	O
zstr	pointer
)	O
;	O
ubuffree	function
(	O
zstr	pointer
)	O
;	O
{	O
long	O
ival	long
;	O
char	O
bgrade	char
;	O
char	O
*	O
zsend	pointer
;	O
boolean	int
fret	int
;	O
if	O
(	O
!	O
ftimespan_match	function
(	O
qsys	pointer
->	O
uuconf_qcalltimegrade	pointer
,	O
&	O
ival	long
,	O
(	O
int	O
*	O
)	O
NULL	O
)	O
)	O
bgrade	char
=	O
'\0'	O
;	O
else	O
bgrade	char
=	O
(	O
char	O
)	O
ival	long
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_zlocalname	pointer
!=	O
NULL	O
)	O
qdaemon	pointer
->	O
zlocalname	pointer
=	O
qsys	pointer
->	O
uuconf_zlocalname	pointer
;	O
else	O
{	O
iuuconf	int
=	O
uuconf_localname	function
(	O
puuconf	pointer
,	O
&	O
qdaemon	pointer
->	O
zlocalname	pointer
)	O
;	O
if	O
(	O
iuuconf	int
==	O
UUCONF_NOT_FOUND	O
)	O
{	O
qdaemon	pointer
->	O
zlocalname	pointer
=	O
zsysdep_localname	function
(	O
)	O
;	O
if	O
(	O
qdaemon	pointer
->	O
zlocalname	pointer
==	O
NULL	O
)	O
return	O
FALSE	O
;	O
}	O
else	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
{	O
ulog_uuconf	function
(	O
LOG_ERROR	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
zsend	pointer
=	O
zbufalc	function
(	O
strlen	function
(	O
qdaemon	pointer
->	O
zlocalname	pointer
)	O
+	O
70	int
)	O
;	O
if	O
(	O
!	O
qsys	pointer
->	O
uuconf_fsequence	int
)	O
{	O
if	O
(	O
bgrade	char
==	O
'\0'	O
)	O
sprintf	function
(	O
zsend	pointer
,	O
"S%s -R -N0%o"	pointer
,	O
qdaemon	pointer
->	O
zlocalname	pointer
,	O
(	O
unsigned	O
int	O
)	O
(	O
FEATURE_SIZES	O
|	O
FEATURE_EXEC	O
|	O
FEATURE_RESTART	O
|	O
FEATURE_QUOTES	O
)	O
)	O
;	O
else	O
sprintf	function
(	O
zsend	pointer
,	O
"S%s -p%c -vgrade=%c -R -N0%o"	pointer
,	O
qdaemon	pointer
->	O
zlocalname	pointer
,	O
bgrade	char
,	O
bgrade	char
,	O
(	O
unsigned	O
int	O
)	O
(	O
FEATURE_SIZES	O
|	O
FEATURE_EXEC	O
|	O
FEATURE_RESTART	O
|	O
FEATURE_QUOTES	O
)	O
)	O
;	O
}	O
else	O
{	O
long	O
iseq	int
;	O
iseq	int
=	O
ixsysdep_get_sequence	function
(	O
qsys	pointer
)	O
;	O
if	O
(	O
iseq	int
<	O
0	int
)	O
return	O
FALSE	O
;	O
if	O
(	O
bgrade	char
==	O
'\0'	O
)	O
sprintf	function
(	O
zsend	pointer
,	O
"S%s -Q%ld -R -N0%o"	pointer
,	O
qdaemon	pointer
->	O
zlocalname	pointer
,	O
iseq	int
,	O
(	O
unsigned	O
int	O
)	O
(	O
FEATURE_SIZES	O
|	O
FEATURE_EXEC	O
|	O
FEATURE_RESTART	O
|	O
FEATURE_QUOTES	O
)	O
)	O
;	O
else	O
sprintf	function
(	O
zsend	pointer
,	O
"S%s -Q%ld -p%c -vgrade=%c -R -N0%o"	pointer
,	O
qdaemon	pointer
->	O
zlocalname	pointer
,	O
iseq	int
,	O
bgrade	char
,	O
bgrade	char
,	O
(	O
unsigned	O
int	O
)	O
(	O
FEATURE_SIZES	O
|	O
FEATURE_EXEC	O
|	O
FEATURE_RESTART	O
|	O
FEATURE_QUOTES	O
)	O
)	O
;	O
}	O
fret	int
=	O
fsend_uucp_cmd	function
(	O
qconn	pointer
,	O
zsend	pointer
)	O
;	O
ubuffree	function
(	O
zsend	pointer
)	O
;	O
if	O
(	O
!	O
fret	int
)	O
return	O
FALSE	O
;	O
}	O
zstr	pointer
=	O
zget_uucp_cmd	function
(	O
qconn	pointer
,	O
TRUE	O
,	O
fstrip	int
)	O
;	O
if	O
(	O
zstr	pointer
==	O
NULL	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
zstr	pointer
[	O
0	int
]	O
!=	O
'R'	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Bad response to handshake string (%s)"	pointer
,	O
zstr	pointer
)	O
;	O
ubuffree	function
(	O
zstr	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
strncmp	function
(	O
zstr	pointer
+	O
1	int
,	O
"OKN"	pointer
,	O
sizeof	O
"OKN"	pointer
-	O
1	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
zstr	pointer
[	O
sizeof	O
"ROKN"	pointer
-	O
1	int
]	O
==	O
'\0'	O
)	O
qdaemon	pointer
->	O
ifeatures	int
|=	O
FEATURE_SIZES	O
|	O
FEATURE_V103	O
;	O
else	O
qdaemon	pointer
->	O
ifeatures	int
|=	O
(	O
int	O
)	O
strtol	function
(	O
zstr	pointer
+	O
sizeof	O
"ROKN"	pointer
-	O
1	int
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
zstr	pointer
+	O
1	int
,	O
"OK"	pointer
,	O
sizeof	O
"OK"	pointer
-	O
1	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
zstr	pointer
[	O
sizeof	O
"ROK"	pointer
-	O
1	int
]	O
!=	O
'\0'	O
)	O
{	O
char	O
*	O
zopt	pointer
;	O
zopt	pointer
=	O
zstr	pointer
+	O
sizeof	O
"ROK"	pointer
-	O
1	int
;	O
while	O
(	O
*	O
zopt	pointer
!=	O
'\0'	O
)	O
{	O
char	O
b	char
;	O
long	O
c	long
;	O
char	O
*	O
zend	pointer
;	O
b	char
=	O
*	O
zopt	pointer
++	O
;	O
if	O
(	O
isspace	function
(	O
b	char
)	O
||	O
b	char
!=	O
'-'	O
)	O
continue	O
;	O
switch	O
(	O
*	O
zopt	pointer
)	O
{	O
case	O
'R'	O
:	O
qdaemon	pointer
->	O
ifeatures	int
|=	O
(	O
FEATURE_RESTART	O
|	O
FEATURE_SVR4	O
|	O
FEATURE_SIZES	O
)	O
;	O
break	O
;	O
case	O
'U'	O
:	O
c	long
=	O
strtol	function
(	O
zopt	pointer
,	O
&	O
zend	pointer
,	O
0	int
)	O
;	O
if	O
(	O
c	long
>	O
0	int
&&	O
c	long
<=	O
LONG_MAX	O
/	O
(	O
long	O
)	O
512	int
)	O
qdaemon	pointer
->	O
cmax_receive	long
=	O
c	long
*	O
(	O
long	O
)	O
512	int
;	O
zopt	pointer
=	O
zend	pointer
;	O
break	O
;	O
}	O
while	O
(	O
*	O
zopt	pointer
!=	O
'\0'	O
&&	O
!	O
isspace	function
(	O
*	O
zopt	pointer
)	O
)	O
++	O
zopt	pointer
;	O
}	O
}	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
zstr	pointer
+	O
1	int
,	O
"CB"	pointer
)	O
==	O
0	int
)	O
{	O
ulog	function
(	O
LOG_NORMAL	int
,	O
"Remote system will call back"	pointer
)	O
;	O
qstat	pointer
->	O
ttype	enum
=	O
STATUS_COMPLETE	int
;	O
(	O
void	O
)	O
fsysdep_set_status	function
(	O
qsys	pointer
,	O
qstat	pointer
)	O
;	O
ubuffree	function
(	O
zstr	pointer
)	O
;	O
return	O
TRUE	O
;	O
}	O
else	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Handshake failed (%s)"	pointer
,	O
zstr	pointer
+	O
1	int
)	O
;	O
ubuffree	function
(	O
zstr	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
ubuffree	function
(	O
zstr	pointer
)	O
;	O
zstr	pointer
=	O
zget_uucp_cmd	function
(	O
qconn	pointer
,	O
TRUE	O
,	O
fstrip	int
)	O
;	O
if	O
(	O
zstr	pointer
==	O
NULL	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
zstr	pointer
[	O
0	int
]	O
!=	O
'P'	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Bad protocol handshake (%s)"	pointer
,	O
zstr	pointer
)	O
;	O
ubuffree	function
(	O
zstr	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
qconn	pointer
->	O
qport	pointer
!=	O
NULL	O
&&	O
(	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_ireliable	int
&	O
UUCONF_RELIABLE_SPECIFIED	O
)	O
!=	O
0	int
)	O
qdaemon	pointer
->	O
ireliable	int
=	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_ireliable	int
;	O
if	O
(	O
qdialer	pointer
!=	O
NULL	O
&&	O
(	O
qdialer	pointer
->	O
uuconf_ireliable	int
&	O
UUCONF_RELIABLE_SPECIFIED	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
qdaemon	pointer
->	O
ireliable	int
!=	O
0	int
)	O
qdaemon	pointer
->	O
ireliable	int
&=	O
qdialer	pointer
->	O
uuconf_ireliable	int
;	O
else	O
qdaemon	pointer
->	O
ireliable	int
=	O
qdialer	pointer
->	O
uuconf_ireliable	int
;	O
}	O
if	O
(	O
qdaemon	pointer
->	O
ireliable	int
==	O
0	int
)	O
qdaemon	pointer
->	O
ireliable	int
=	O
(	O
UUCONF_RELIABLE_RELIABLE	O
|	O
UUCONF_RELIABLE_EIGHT	O
|	O
UUCONF_RELIABLE_FULLDUPLEX	O
|	O
UUCONF_RELIABLE_SPECIFIED	O
)	O
;	O
{	O
size_t	long
i	int
;	O
char	O
ab	array
[	O
5	int
]	O
;	O
i	int
=	O
CPROTOCOLS	O
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_zprotocols	pointer
!=	O
NULL	O
||	O
(	O
qconn	pointer
->	O
qport	pointer
!=	O
NULL	O
&&	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_zprotocols	pointer
!=	O
NULL	O
)	O
)	O
{	O
const	O
char	O
*	O
zproto	pointer
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_zprotocols	pointer
!=	O
NULL	O
)	O
zproto	pointer
=	O
qsys	pointer
->	O
uuconf_zprotocols	pointer
;	O
else	O
zproto	pointer
=	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_zprotocols	pointer
;	O
for	O
(	O
;	O
*	O
zproto	pointer
!=	O
'\0'	O
;	O
zproto	pointer
++	O
)	O
{	O
if	O
(	O
strchr	function
(	O
zstr	pointer
+	O
1	int
,	O
*	O
zproto	pointer
)	O
!=	O
NULL	O
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
CPROTOCOLS	O
;	O
i	int
++	O
)	O
if	O
(	O
asProtocols	array
[	O
i	int
]	O
.	O
bname	char
==	O
*	O
zproto	pointer
)	O
break	O
;	O
if	O
(	O
i	int
<	O
CPROTOCOLS	O
)	O
break	O
;	O
}	O
}	O
}	O
else	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
CPROTOCOLS	O
;	O
i	int
++	O
)	O
{	O
int	O
ipr	int
;	O
ipr	int
=	O
asProtocols	array
[	O
i	int
]	O
.	O
ireliable	int
;	O
if	O
(	O
(	O
ipr	int
&	O
qdaemon	pointer
->	O
ireliable	int
)	O
!=	O
ipr	int
)	O
continue	O
;	O
if	O
(	O
strchr	function
(	O
zstr	pointer
+	O
1	int
,	O
asProtocols	array
[	O
i	int
]	O
.	O
bname	char
)	O
!=	O
NULL	O
)	O
break	O
;	O
}	O
}	O
ubuffree	function
(	O
zstr	pointer
)	O
;	O
if	O
(	O
i	int
>=	O
CPROTOCOLS	O
)	O
{	O
(	O
void	O
)	O
fsend_uucp_cmd	function
(	O
qconn	pointer
,	O
"UN"	pointer
)	O
;	O
ulog	function
(	O
LOG_ERROR	int
,	O
"No mutually supported protocols"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
qdaemon	pointer
->	O
qproto	pointer
=	O
&	O
asProtocols	array
[	O
i	int
]	O
;	O
if	O
(	O
(	O
qdaemon	pointer
->	O
ireliable	int
&	O
UUCONF_RELIABLE_FULLDUPLEX	O
)	O
==	O
0	int
)	O
qdaemon	pointer
->	O
cchans	int
=	O
1	int
;	O
else	O
qdaemon	pointer
->	O
cchans	int
=	O
asProtocols	array
[	O
i	int
]	O
.	O
cchans	int
;	O
sprintf	function
(	O
ab	array
,	O
"U%c"	pointer
,	O
qdaemon	pointer
->	O
qproto	pointer
->	O
bname	char
)	O
;	O
if	O
(	O
!	O
fsend_uucp_cmd	function
(	O
qconn	pointer
,	O
ab	array
)	O
)	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
qdaemon	pointer
->	O
qproto	pointer
->	O
qcmds	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
qsys	pointer
->	O
uuconf_qproto_params	pointer
!=	O
NULL	O
)	O
uapply_proto_params	function
(	O
puuconf	pointer
,	O
qdaemon	pointer
->	O
qproto	pointer
->	O
bname	char
,	O
qdaemon	pointer
->	O
qproto	pointer
->	O
qcmds	pointer
,	O
qsys	pointer
->	O
uuconf_qproto_params	pointer
)	O
;	O
if	O
(	O
qconn	pointer
->	O
qport	pointer
!=	O
NULL	O
&&	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_qproto_params	pointer
!=	O
NULL	O
)	O
uapply_proto_params	function
(	O
puuconf	pointer
,	O
qdaemon	pointer
->	O
qproto	pointer
->	O
bname	char
,	O
qdaemon	pointer
->	O
qproto	pointer
->	O
qcmds	pointer
,	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_qproto_params	pointer
)	O
;	O
if	O
(	O
qdialer	pointer
!=	O
NULL	O
&&	O
qdialer	pointer
->	O
uuconf_qproto_params	pointer
!=	O
NULL	O
)	O
uapply_proto_params	function
(	O
puuconf	pointer
,	O
qdaemon	pointer
->	O
qproto	pointer
->	O
bname	char
,	O
qdaemon	pointer
->	O
qproto	pointer
->	O
qcmds	pointer
,	O
qdialer	pointer
->	O
uuconf_qproto_params	pointer
)	O
;	O
}	O
if	O
(	O
!	O
(	O
*	O
qdaemon	pointer
->	O
qproto	pointer
->	O
pfstart	pointer
)	O
(	O
qdaemon	pointer
,	O
&	O
zlog	pointer
)	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
zlog	pointer
==	O
NULL	O
)	O
{	O
zlog	pointer
=	O
zbufalc	function
(	O
sizeof	O
"protocol ''"	pointer
+	O
1	int
)	O
;	O
sprintf	function
(	O
zlog	pointer
,	O
"protocol '%c'"	pointer
,	O
qdaemon	pointer
->	O
qproto	pointer
->	O
bname	char
)	O
;	O
}	O
ulog	function
(	O
LOG_NORMAL	int
,	O
"Handshake successful (%s)"	pointer
,	O
zlog	pointer
)	O
;	O
ubuffree	function
(	O
zlog	pointer
)	O
;	O
*	O
pterr	pointer
=	O
STATUS_FAILED	int
;	O
{	O
boolean	int
fret	int
;	O
long	O
iend_time	long
;	O
fret	int
=	O
floop	function
(	O
qdaemon	pointer
)	O
;	O
if	O
(	O
fsend_uucp_cmd	function
(	O
qconn	pointer
,	O
"OOOOOO"	pointer
)	O
&&	O
fsend_uucp_cmd	function
(	O
qconn	pointer
,	O
"OOOOOO"	pointer
)	O
)	O
{	O
int	O
i	int
,	O
fdone	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
25	int
;	O
i	int
++	O
)	O
{	O
zstr	pointer
=	O
zget_uucp_cmd	function
(	O
qconn	pointer
,	O
FALSE	O
,	O
fstrip	int
)	O
;	O
if	O
(	O
zstr	pointer
==	O
NULL	O
)	O
break	O
;	O
fdone	int
=	O
strstr	function
(	O
zstr	pointer
,	O
"OOOOOO"	pointer
)	O
!=	O
NULL	O
;	O
ubuffree	function
(	O
zstr	pointer
)	O
;	O
if	O
(	O
fdone	int
)	O
break	O
;	O
}	O
}	O
iend_time	long
=	O
ixsysdep_time	function
(	O
(	O
long	O
*	O
)	O
NULL	O
)	O
;	O
ulog	function
(	O
LOG_NORMAL	int
,	O
"Call complete (%ld seconds %ld bytes %ld bps)"	pointer
,	O
iend_time	long
-	O
istart_time	long
,	O
qdaemon	pointer
->	O
csent	long
+	O
qdaemon	pointer
->	O
creceived	long
,	O
(	O
iend_time	long
!=	O
istart_time	long
?	O
(	O
qdaemon	pointer
->	O
csent	long
+	O
qdaemon	pointer
->	O
creceived	long
)	O
/	O
(	O
iend_time	long
-	O
istart_time	long
)	O
:	O
0	int
)	O
)	O
;	O
if	O
(	O
fret	int
)	O
{	O
qstat	pointer
->	O
ttype	enum
=	O
STATUS_COMPLETE	int
;	O
qstat	pointer
->	O
ilast	long
=	O
iend_time	long
;	O
(	O
void	O
)	O
fsysdep_set_status	function
(	O
qsys	pointer
,	O
qstat	pointer
)	O
;	O
}	O
if	O
(	O
qdaemon	pointer
->	O
irunuuxqt	int
==	O
UUCONF_RUNUUXQT_PERCALL	O
||	O
(	O
qdaemon	pointer
->	O
irunuuxqt	int
>	O
0	int
&&	O
qdaemon	pointer
->	O
cxfiles_received	long
>	O
0	int
)	O
)	O
(	O
void	O
)	O
fspawn_uuxqt	function
(	O
TRUE	O
,	O
qdaemon	pointer
->	O
qsys	pointer
->	O
uuconf_zname	pointer
,	O
qdaemon	pointer
->	O
zconfig	pointer
)	O
;	O
return	O
fret	int
;	O
}	O
}	O
static	O
int	O
iuport_lock	function
(	O
qport	pointer
,	O
pinfo	pointer
)	O
struct	O
uuconf_port	struct
*	O
qport	pointer
;	O
pointer	pointer
pinfo	pointer
;	O
{	O
struct	O
spass	struct
*	O
q	pointer
=	O
(	O
struct	O
spass	struct
*	O
)	O
pinfo	pointer
;	O
q	pointer
->	O
fmatched	int
=	O
TRUE	O
;	O
if	O
(	O
!	O
fconn_init	function
(	O
qport	pointer
,	O
q	pointer
->	O
qconn	pointer
,	O
UUCONF_PORTTYPE_UNKNOWN	int
)	O
)	O
return	O
UUCONF_NOT_FOUND	O
;	O
else	O
if	O
(	O
!	O
fconn_lock	function
(	O
q	pointer
->	O
qconn	pointer
,	O
FALSE	O
,	O
FALSE	O
)	O
)	O
{	O
uconn_free	function
(	O
q	pointer
->	O
qconn	pointer
)	O
;	O
return	O
UUCONF_NOT_FOUND	O
;	O
}	O
else	O
{	O
q	pointer
->	O
flocked	int
=	O
TRUE	O
;	O
return	O
UUCONF_SUCCESS	O
;	O
}	O
}	O
struct	O
scallin_info	struct
{	O
const	O
char	O
*	O
zuser	pointer
;	O
const	O
char	O
*	O
zpass	pointer
;	O
}	O
;	O
static	O
boolean	int
flogin_prompt	function
(	O
puuconf	pointer
,	O
zconfig	pointer
,	O
fuuxqt	int
,	O
qconn	pointer
,	O
zlogin	pointer
,	O
pzsystem	pointer
)	O
pointer	pointer
puuconf	pointer
;	O
const	O
char	O
*	O
zconfig	pointer
;	O
boolean	int
fuuxqt	int
;	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
const	O
char	O
*	O
zlogin	pointer
;	O
const	O
char	O
*	O
*	O
pzsystem	pointer
;	O
{	O
int	O
iuuconf	int
;	O
int	O
istrip	int
;	O
boolean	int
fstrip	int
;	O
char	O
*	O
zuser	pointer
,	O
*	O
zpass	pointer
;	O
boolean	int
fret	int
;	O
struct	O
scallin_info	struct
s	struct
;	O
if	O
(	O
pzsystem	pointer
!=	O
NULL	O
)	O
*	O
pzsystem	pointer
=	O
NULL	O
;	O
DEBUG_MESSAGE0	O
(	O
DEBUG_HANDSHAKE	O
,	O
"flogin_prompt: Waiting for login"	pointer
)	O
;	O
iuuconf	int
=	O
uuconf_strip	function
(	O
puuconf	pointer
,	O
&	O
istrip	int
)	O
;	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
{	O
ulog_uuconf	function
(	O
LOG_ERROR	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
return	O
FALSE	O
;	O
}	O
fstrip	int
=	O
(	O
istrip	int
&	O
UUCONF_STRIP_LOGIN	O
)	O
!=	O
0	int
;	O
zuser	pointer
=	O
NULL	O
;	O
if	O
(	O
zlogin	pointer
==	O
NULL	O
)	O
{	O
do	O
{	O
ubuffree	function
(	O
zuser	pointer
)	O
;	O
if	O
(	O
!	O
fconn_write	function
(	O
qconn	pointer
,	O
"login: "	pointer
,	O
sizeof	O
"login: "	pointer
-	O
1	int
)	O
)	O
return	O
FALSE	O
;	O
zuser	pointer
=	O
zget_typed_line	function
(	O
qconn	pointer
,	O
fstrip	int
)	O
;	O
}	O
while	O
(	O
zuser	pointer
!=	O
NULL	O
&&	O
*	O
zuser	pointer
==	O
'\0'	O
)	O
;	O
if	O
(	O
zuser	pointer
==	O
NULL	O
)	O
return	O
TRUE	O
;	O
zlogin	pointer
=	O
zuser	pointer
;	O
}	O
if	O
(	O
!	O
fconn_write	function
(	O
qconn	pointer
,	O
"Password:"	pointer
,	O
sizeof	O
"Password:"	pointer
-	O
1	int
)	O
)	O
{	O
ubuffree	function
(	O
zuser	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
zpass	pointer
=	O
zget_typed_line	function
(	O
qconn	pointer
,	O
fstrip	int
)	O
;	O
if	O
(	O
zpass	pointer
==	O
NULL	O
)	O
{	O
ubuffree	function
(	O
zuser	pointer
)	O
;	O
return	O
TRUE	O
;	O
}	O
fret	int
=	O
TRUE	O
;	O
s	struct
.	O
zuser	pointer
=	O
zlogin	pointer
;	O
s	struct
.	O
zpass	pointer
=	O
zpass	pointer
;	O
iuuconf	int
=	O
uuconf_callin	function
(	O
puuconf	pointer
,	O
icallin_cmp	function
,	O
&	O
s	struct
)	O
;	O
ubuffree	function
(	O
zpass	pointer
)	O
;	O
if	O
(	O
iuuconf	int
==	O
UUCONF_NOT_FOUND	O
)	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Bad login"	pointer
)	O
;	O
else	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
{	O
ulog_uuconf	function
(	O
LOG_ERROR	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
fret	int
=	O
FALSE	O
;	O
}	O
else	O
{	O
int	O
iholddebug	int
;	O
iholddebug	int
=	O
iDebug	int
;	O
(	O
void	O
)	O
faccept_call	function
(	O
puuconf	pointer
,	O
zconfig	pointer
,	O
fuuxqt	int
,	O
zlogin	pointer
,	O
qconn	pointer
,	O
pzsystem	pointer
)	O
;	O
iDebug	int
=	O
iholddebug	int
;	O
}	O
ubuffree	function
(	O
zuser	pointer
)	O
;	O
return	O
fret	int
;	O
}	O
static	O
int	O
icallin_cmp	function
(	O
iwhich	int
,	O
pinfo	pointer
,	O
zfile	pointer
)	O
int	O
iwhich	int
;	O
pointer	pointer
pinfo	pointer
;	O
const	O
char	O
*	O
zfile	pointer
;	O
{	O
struct	O
scallin_info	struct
*	O
qinfo	pointer
=	O
(	O
struct	O
scallin_info	struct
*	O
)	O
pinfo	pointer
;	O
char	O
*	O
zcopy	pointer
;	O
int	O
icmp	int
;	O
zcopy	pointer
=	O
zbufcpy	function
(	O
zfile	pointer
)	O
;	O
(	O
void	O
)	O
cescape	function
(	O
zcopy	pointer
)	O
;	O
if	O
(	O
iwhich	int
==	O
0	int
)	O
icmp	int
=	O
strcmp	function
(	O
qinfo	pointer
->	O
zuser	pointer
,	O
zcopy	pointer
)	O
;	O
else	O
icmp	int
=	O
strcmp	function
(	O
qinfo	pointer
->	O
zpass	pointer
,	O
zcopy	pointer
)	O
;	O
ubuffree	function
(	O
zcopy	pointer
)	O
;	O
return	O
icmp	int
==	O
0	int
;	O
}	O
static	O
boolean	int
faccept_call	function
(	O
puuconf	pointer
,	O
zconfig	pointer
,	O
fuuxqt	int
,	O
zlogin	pointer
,	O
qconn	pointer
,	O
pzsystem	pointer
)	O
pointer	pointer
puuconf	pointer
;	O
const	O
char	O
*	O
zconfig	pointer
;	O
boolean	int
fuuxqt	int
;	O
const	O
char	O
*	O
zlogin	pointer
;	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
const	O
char	O
*	O
*	O
pzsystem	pointer
;	O
{	O
long	O
istart_time	long
;	O
int	O
iuuconf	int
;	O
int	O
istrip	int
;	O
boolean	int
fstrip	int
;	O
const	O
char	O
*	O
zport	pointer
;	O
struct	O
uuconf_port	struct
*	O
qport	pointer
;	O
struct	O
uuconf_port	struct
sport	struct
;	O
struct	O
uuconf_dialer	struct
*	O
qdialer	pointer
;	O
struct	O
uuconf_dialer	struct
sdialer	struct
;	O
boolean	int
ftcp_port	int
;	O
char	O
*	O
zsend	pointer
,	O
*	O
zspace	pointer
;	O
boolean	int
fret	int
;	O
char	O
*	O
zstr	pointer
;	O
struct	O
uuconf_system	struct
ssys	struct
;	O
const	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
;	O
const	O
struct	O
uuconf_system	struct
*	O
qany	pointer
;	O
char	O
*	O
zloc	pointer
;	O
struct	O
sstatus	struct
sstat	struct
;	O
boolean	int
fgotseq	int
,	O
fgotn	int
;	O
size_t	long
i	int
;	O
char	O
*	O
zlog	pointer
;	O
char	O
*	O
zgrade	pointer
;	O
if	O
(	O
pzsystem	pointer
!=	O
NULL	O
)	O
*	O
pzsystem	pointer
=	O
NULL	O
;	O
ulog	function
(	O
LOG_NORMAL	int
,	O
"Incoming call (login %s port %s)"	pointer
,	O
zlogin	pointer
,	O
zLdevice	pointer
==	O
NULL	O
?	O
(	O
char	O
*	O
)	O
"unknown"	pointer
:	O
zLdevice	pointer
)	O
;	O
istart_time	long
=	O
ixsysdep_time	function
(	O
(	O
long	O
*	O
)	O
NULL	O
)	O
;	O
iuuconf	int
=	O
uuconf_strip	function
(	O
puuconf	pointer
,	O
&	O
istrip	int
)	O
;	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
{	O
ulog_uuconf	function
(	O
LOG_ERROR	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
uaccept_call_cleanup	function
(	O
puuconf	pointer
,	O
(	O
struct	O
uuconf_system	struct
*	O
)	O
NULL	O
,	O
(	O
struct	O
uuconf_port	struct
*	O
)	O
NULL	O
,	O
&	O
sport	struct
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
fstrip	int
=	O
(	O
istrip	int
&	O
UUCONF_STRIP_PROTO	O
)	O
!=	O
0	int
;	O
if	O
(	O
qconn	pointer
->	O
qport	pointer
!=	O
NULL	O
)	O
{	O
qport	pointer
=	O
qconn	pointer
->	O
qport	pointer
;	O
zport	pointer
=	O
qport	pointer
->	O
uuconf_zname	pointer
;	O
ftcp_port	int
=	O
FALSE	O
;	O
}	O
else	O
{	O
zport	pointer
=	O
zsysdep_port_name	function
(	O
&	O
ftcp_port	int
)	O
;	O
if	O
(	O
zport	pointer
==	O
NULL	O
)	O
{	O
qport	pointer
=	O
NULL	O
;	O
zport	pointer
=	O
"unknown"	pointer
;	O
}	O
else	O
{	O
iuuconf	int
=	O
uuconf_find_port	function
(	O
puuconf	pointer
,	O
zport	pointer
,	O
(	O
long	O
)	O
0	int
,	O
(	O
long	O
)	O
0	int
,	O
(	O
int	O
(	O
*	O
)	O
P	O
(	O
(	O
struct	O
uuconf_port	struct
*	O
,	O
pointer	pointer
pinfo	pointer
)	O
)	O
)	O
NULL	O
,	O
(	O
pointer	pointer
)	O
NULL	O
,	O
&	O
sport	struct
)	O
;	O
if	O
(	O
iuuconf	int
==	O
UUCONF_NOT_FOUND	O
)	O
qport	pointer
=	O
NULL	O
;	O
else	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
{	O
ulog_uuconf	function
(	O
LOG_ERROR	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
uaccept_call_cleanup	function
(	O
puuconf	pointer
,	O
(	O
struct	O
uuconf_system	struct
*	O
)	O
NULL	O
,	O
(	O
struct	O
uuconf_port	struct
*	O
)	O
NULL	O
,	O
&	O
sport	struct
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
else	O
qport	pointer
=	O
&	O
sport	struct
;	O
}	O
}	O
qdialer	pointer
=	O
NULL	O
;	O
if	O
(	O
qport	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
qport	pointer
->	O
uuconf_ttype	enum
==	O
UUCONF_PORTTYPE_MODEM	int
)	O
{	O
if	O
(	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_pzdialer	pointer
!=	O
NULL	O
)	O
{	O
const	O
char	O
*	O
zdialer	pointer
;	O
zdialer	pointer
=	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_pzdialer	pointer
[	O
0	int
]	O
;	O
iuuconf	int
=	O
uuconf_dialer_info	function
(	O
puuconf	pointer
,	O
zdialer	pointer
,	O
&	O
sdialer	struct
)	O
;	O
if	O
(	O
iuuconf	int
==	O
UUCONF_SUCCESS	O
)	O
qdialer	pointer
=	O
&	O
sdialer	struct
;	O
}	O
else	O
qdialer	pointer
=	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_qdialer	pointer
;	O
}	O
else	O
if	O
(	O
qport	pointer
->	O
uuconf_ttype	enum
==	O
UUCONF_PORTTYPE_TCP	int
||	O
(	O
qport	pointer
->	O
uuconf_ttype	enum
==	O
UUCONF_PORTTYPE_TLI	int
&&	O
(	O
qport	pointer
->	O
uuconf_ireliable	int
&	O
UUCONF_RELIABLE_SPECIFIED	O
)	O
==	O
0	int
)	O
)	O
ftcp_port	int
=	O
TRUE	O
;	O
}	O
sDaemon	struct
.	O
puuconf	pointer
=	O
puuconf	pointer
;	O
sDaemon	struct
.	O
zconfig	pointer
=	O
zconfig	pointer
;	O
if	O
(	O
!	O
fuuxqt	int
)	O
sDaemon	struct
.	O
irunuuxqt	int
=	O
UUCONF_RUNUUXQT_NEVER	O
;	O
else	O
{	O
iuuconf	int
=	O
uuconf_runuuxqt	function
(	O
puuconf	pointer
,	O
&	O
sDaemon	struct
.	O
irunuuxqt	int
)	O
;	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
ulog_uuconf	function
(	O
LOG_ERROR	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
}	O
sDaemon	struct
.	O
qsys	pointer
=	O
NULL	O
;	O
sDaemon	struct
.	O
zlocalname	pointer
=	O
NULL	O
;	O
sDaemon	struct
.	O
qconn	pointer
=	O
qconn	pointer
;	O
sDaemon	struct
.	O
qproto	pointer
=	O
NULL	O
;	O
sDaemon	struct
.	O
cchans	int
=	O
1	int
;	O
sDaemon	struct
.	O
clocal_size	long
=	O
-	O
1	int
;	O
sDaemon	struct
.	O
cremote_size	long
=	O
-	O
1	int
;	O
sDaemon	struct
.	O
cmax_ever	long
=	O
-	O
2	int
;	O
sDaemon	struct
.	O
cmax_receive	long
=	O
-	O
1	int
;	O
sDaemon	struct
.	O
csent	long
=	O
0	int
;	O
sDaemon	struct
.	O
creceived	long
=	O
0	int
;	O
sDaemon	struct
.	O
cxfiles_received	long
=	O
0	int
;	O
sDaemon	struct
.	O
ifeatures	int
=	O
0	int
;	O
sDaemon	struct
.	O
frequest_hangup	int
=	O
FALSE	O
;	O
sDaemon	struct
.	O
fhangup_requested	int
=	O
FALSE	O
;	O
sDaemon	struct
.	O
fhangup	int
=	O
FALSE	O
;	O
sDaemon	struct
.	O
fmaster	int
=	O
FALSE	O
;	O
sDaemon	struct
.	O
fcaller	int
=	O
FALSE	O
;	O
sDaemon	struct
.	O
ireliable	int
=	O
0	int
;	O
sDaemon	struct
.	O
bgrade	char
=	O
UUCONF_GRADE_LOW	O
;	O
iuuconf	int
=	O
uuconf_login_localname	function
(	O
puuconf	pointer
,	O
zlogin	pointer
,	O
&	O
zloc	pointer
)	O
;	O
if	O
(	O
iuuconf	int
==	O
UUCONF_SUCCESS	O
)	O
sDaemon	struct
.	O
zlocalname	pointer
=	O
zloc	pointer
;	O
else	O
if	O
(	O
iuuconf	int
==	O
UUCONF_NOT_FOUND	O
)	O
{	O
sDaemon	struct
.	O
zlocalname	pointer
=	O
zsysdep_localname	function
(	O
)	O
;	O
if	O
(	O
sDaemon	struct
.	O
zlocalname	pointer
==	O
NULL	O
)	O
{	O
uaccept_call_cleanup	function
(	O
puuconf	pointer
,	O
(	O
struct	O
uuconf_system	struct
*	O
)	O
NULL	O
,	O
qport	pointer
,	O
&	O
sport	struct
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
else	O
{	O
ulog_uuconf	function
(	O
LOG_ERROR	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
uaccept_call_cleanup	function
(	O
puuconf	pointer
,	O
(	O
struct	O
uuconf_system	struct
*	O
)	O
NULL	O
,	O
qport	pointer
,	O
&	O
sport	struct
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
zsend	pointer
=	O
zbufalc	function
(	O
strlen	function
(	O
sDaemon	struct
.	O
zlocalname	pointer
)	O
+	O
sizeof	O
"Shere="	pointer
)	O
;	O
sprintf	function
(	O
zsend	pointer
,	O
"Shere=%s"	pointer
,	O
sDaemon	struct
.	O
zlocalname	pointer
)	O
;	O
fret	int
=	O
fsend_uucp_cmd	function
(	O
qconn	pointer
,	O
zsend	pointer
)	O
;	O
ubuffree	function
(	O
zsend	pointer
)	O
;	O
if	O
(	O
!	O
fret	int
)	O
{	O
uaccept_call_cleanup	function
(	O
puuconf	pointer
,	O
(	O
struct	O
uuconf_system	struct
*	O
)	O
NULL	O
,	O
qport	pointer
,	O
&	O
sport	struct
,	O
zloc	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
zstr	pointer
=	O
zget_uucp_cmd	function
(	O
qconn	pointer
,	O
TRUE	O
,	O
fstrip	int
)	O
;	O
if	O
(	O
zstr	pointer
==	O
NULL	O
)	O
{	O
uaccept_call_cleanup	function
(	O
puuconf	pointer
,	O
(	O
struct	O
uuconf_system	struct
*	O
)	O
NULL	O
,	O
qport	pointer
,	O
&	O
sport	struct
,	O
zloc	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
zstr	pointer
[	O
0	int
]	O
!=	O
'S'	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Bad introduction string"	pointer
)	O
;	O
ubuffree	function
(	O
zstr	pointer
)	O
;	O
uaccept_call_cleanup	function
(	O
puuconf	pointer
,	O
(	O
struct	O
uuconf_system	struct
*	O
)	O
NULL	O
,	O
qport	pointer
,	O
&	O
sport	struct
,	O
zloc	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
zspace	pointer
=	O
strchr	function
(	O
zstr	pointer
,	O
' '	O
)	O
;	O
if	O
(	O
zspace	pointer
!=	O
NULL	O
)	O
*	O
zspace	pointer
=	O
'\0'	O
;	O
iuuconf	int
=	O
uuconf_system_info	function
(	O
puuconf	pointer
,	O
zstr	pointer
+	O
1	int
,	O
&	O
ssys	struct
)	O
;	O
if	O
(	O
iuuconf	int
==	O
UUCONF_NOT_FOUND	O
)	O
{	O
char	O
*	O
zscript	pointer
;	O
iuuconf	int
=	O
uuconf_remote_unknown	function
(	O
puuconf	pointer
,	O
&	O
zscript	pointer
)	O
;	O
if	O
(	O
iuuconf	int
==	O
UUCONF_SUCCESS	O
)	O
{	O
if	O
(	O
!	O
fsysdep_unknown_caller	function
(	O
zscript	pointer
,	O
zstr	pointer
+	O
1	int
)	O
)	O
{	O
xfree	function
(	O
(	O
pointer	pointer
)	O
zscript	pointer
)	O
;	O
(	O
void	O
)	O
fsend_uucp_cmd	function
(	O
qconn	pointer
,	O
"RYou are unknown to me"	pointer
)	O
;	O
ubuffree	function
(	O
zstr	pointer
)	O
;	O
uaccept_call_cleanup	function
(	O
puuconf	pointer
,	O
(	O
struct	O
uuconf_system	struct
*	O
)	O
NULL	O
,	O
qport	pointer
,	O
&	O
sport	struct
,	O
zloc	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
xfree	function
(	O
(	O
pointer	pointer
)	O
zscript	pointer
)	O
;	O
}	O
else	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_NOT_FOUND	O
)	O
{	O
ulog_uuconf	function
(	O
LOG_ERROR	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
ubuffree	function
(	O
zstr	pointer
)	O
;	O
uaccept_call_cleanup	function
(	O
puuconf	pointer
,	O
(	O
struct	O
uuconf_system	struct
*	O
)	O
NULL	O
,	O
qport	pointer
,	O
&	O
sport	struct
,	O
zloc	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
!	O
funknown_system	function
(	O
puuconf	pointer
,	O
zstr	pointer
+	O
1	int
,	O
&	O
ssys	struct
)	O
)	O
{	O
(	O
void	O
)	O
fsend_uucp_cmd	function
(	O
qconn	pointer
,	O
"RYou are unknown to me"	pointer
)	O
;	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Call from unknown system %s"	pointer
,	O
zstr	pointer
+	O
1	int
)	O
;	O
ubuffree	function
(	O
zstr	pointer
)	O
;	O
uaccept_call_cleanup	function
(	O
puuconf	pointer
,	O
(	O
struct	O
uuconf_system	struct
*	O
)	O
NULL	O
,	O
qport	pointer
,	O
&	O
sport	struct
,	O
zloc	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
else	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
{	O
ulog_uuconf	function
(	O
LOG_ERROR	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
ubuffree	function
(	O
zstr	pointer
)	O
;	O
uaccept_call_cleanup	function
(	O
puuconf	pointer
,	O
(	O
struct	O
uuconf_system	struct
*	O
)	O
NULL	O
,	O
qport	pointer
,	O
&	O
sport	struct
,	O
zloc	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
qany	pointer
=	O
NULL	O
;	O
for	O
(	O
qsys	pointer
=	O
&	O
ssys	struct
;	O
qsys	pointer
!=	O
NULL	O
;	O
qsys	pointer
=	O
qsys	pointer
->	O
uuconf_qalternate	pointer
)	O
{	O
if	O
(	O
!	O
qsys	pointer
->	O
uuconf_fcalled	int
)	O
continue	O
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_zcalled_login	pointer
==	O
NULL	O
||	O
strcmp	function
(	O
qsys	pointer
->	O
uuconf_zcalled_login	pointer
,	O
"ANY"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
qany	pointer
==	O
NULL	O
)	O
qany	pointer
=	O
qsys	pointer
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
qsys	pointer
->	O
uuconf_zcalled_login	pointer
,	O
zlogin	pointer
)	O
==	O
0	int
)	O
break	O
;	O
}	O
if	O
(	O
qsys	pointer
==	O
NULL	O
&&	O
qany	pointer
!=	O
NULL	O
)	O
{	O
iuuconf	int
=	O
uuconf_validate	function
(	O
puuconf	pointer
,	O
qany	pointer
,	O
zlogin	pointer
)	O
;	O
if	O
(	O
iuuconf	int
==	O
UUCONF_SUCCESS	O
)	O
qsys	pointer
=	O
qany	pointer
;	O
else	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_NOT_FOUND	O
)	O
{	O
ulog_uuconf	function
(	O
LOG_ERROR	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
ubuffree	function
(	O
zstr	pointer
)	O
;	O
uaccept_call_cleanup	function
(	O
puuconf	pointer
,	O
&	O
ssys	struct
,	O
qport	pointer
,	O
&	O
sport	struct
,	O
zloc	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
if	O
(	O
qsys	pointer
==	O
NULL	O
)	O
{	O
(	O
void	O
)	O
fsend_uucp_cmd	function
(	O
qconn	pointer
,	O
"RLOGIN"	pointer
)	O
;	O
ulog	function
(	O
LOG_ERROR	int
,	O
"System %s used wrong login name %s"	pointer
,	O
zstr	pointer
+	O
1	int
,	O
zlogin	pointer
)	O
;	O
ubuffree	function
(	O
zstr	pointer
)	O
;	O
uaccept_call_cleanup	function
(	O
puuconf	pointer
,	O
&	O
ssys	struct
,	O
qport	pointer
,	O
&	O
sport	struct
,	O
zloc	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
sDaemon	struct
.	O
qsys	pointer
=	O
qsys	pointer
;	O
if	O
(	O
pzsystem	pointer
!=	O
NULL	O
)	O
*	O
pzsystem	pointer
=	O
zbufcpy	function
(	O
qsys	pointer
->	O
uuconf_zname	pointer
)	O
;	O
ulog_system	function
(	O
qsys	pointer
->	O
uuconf_zname	pointer
)	O
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_zdebug	pointer
!=	O
NULL	O
)	O
iDebug	int
|=	O
idebug_parse	function
(	O
qsys	pointer
->	O
uuconf_zdebug	pointer
)	O
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_fcallback	int
)	O
{	O
(	O
void	O
)	O
fsend_uucp_cmd	function
(	O
qconn	pointer
,	O
"RCB"	pointer
)	O
;	O
ulog	function
(	O
LOG_NORMAL	int
,	O
"Will call back"	pointer
)	O
;	O
sstat	struct
.	O
ttype	enum
=	O
STATUS_COMPLETE	int
;	O
sstat	struct
.	O
cretries	int
=	O
0	int
;	O
sstat	struct
.	O
ilast	long
=	O
ixsysdep_time	function
(	O
(	O
long	O
*	O
)	O
NULL	O
)	O
;	O
sstat	struct
.	O
cwait	int
=	O
0	int
;	O
(	O
void	O
)	O
fsysdep_set_status	function
(	O
qsys	pointer
,	O
&	O
sstat	struct
)	O
;	O
ubuffree	function
(	O
zsysdep_spool_commands	function
(	O
qsys	pointer
,	O
UUCONF_GRADE_HIGH	O
,	O
0	int
,	O
(	O
const	O
struct	O
scmd	struct
*	O
)	O
NULL	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
)	O
;	O
ubuffree	function
(	O
zstr	pointer
)	O
;	O
uaccept_call_cleanup	function
(	O
puuconf	pointer
,	O
&	O
ssys	struct
,	O
qport	pointer
,	O
&	O
sport	struct
,	O
zloc	pointer
)	O
;	O
return	O
TRUE	O
;	O
}	O
if	O
(	O
!	O
fsysdep_lock_system	function
(	O
qsys	pointer
)	O
)	O
{	O
if	O
(	O
qsys	pointer
->	O
uuconf_fsequence	int
)	O
{	O
(	O
void	O
)	O
ixsysdep_get_sequence	function
(	O
qsys	pointer
)	O
;	O
}	O
(	O
void	O
)	O
fsend_uucp_cmd	function
(	O
qconn	pointer
,	O
"RLCK"	pointer
)	O
;	O
ulog	function
(	O
LOG_ERROR	int
,	O
"System already locked"	pointer
)	O
;	O
ubuffree	function
(	O
zstr	pointer
)	O
;	O
uaccept_call_cleanup	function
(	O
puuconf	pointer
,	O
&	O
ssys	struct
,	O
qport	pointer
,	O
&	O
sport	struct
,	O
zloc	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
sLocked_system	struct
=	O
*	O
qsys	pointer
;	O
fLocked_system	int
=	O
TRUE	O
;	O
sstat	struct
.	O
ttype	enum
=	O
STATUS_TALKING	int
;	O
sstat	struct
.	O
cretries	int
=	O
0	int
;	O
sstat	struct
.	O
ilast	long
=	O
ixsysdep_time	function
(	O
(	O
long	O
*	O
)	O
NULL	O
)	O
;	O
sstat	struct
.	O
cwait	int
=	O
0	int
;	O
(	O
void	O
)	O
fsysdep_set_status	function
(	O
qsys	pointer
,	O
&	O
sstat	struct
)	O
;	O
fgotseq	int
=	O
FALSE	O
;	O
fgotn	int
=	O
FALSE	O
;	O
if	O
(	O
zspace	pointer
!=	O
NULL	O
)	O
{	O
char	O
*	O
*	O
paz	pointer
;	O
char	O
*	O
*	O
pzset	pointer
;	O
++	O
zspace	pointer
;	O
paz	pointer
=	O
(	O
char	O
*	O
*	O
)	O
xmalloc	function
(	O
(	O
strlen	function
(	O
zspace	pointer
)	O
/	O
2	int
+	O
2	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
pzset	pointer
=	O
paz	pointer
;	O
*	O
pzset	pointer
++	O
=	O
NULL	O
;	O
while	O
(	O
TRUE	O
)	O
{	O
while	O
(	O
*	O
zspace	pointer
!=	O
'\0'	O
&&	O
isspace	function
(	O
BUCHAR	O
(	O
*	O
zspace	pointer
)	O
)	O
)	O
++	O
zspace	pointer
;	O
if	O
(	O
*	O
zspace	pointer
==	O
'\0'	O
)	O
break	O
;	O
*	O
pzset	pointer
++	O
=	O
zspace	pointer
;	O
++	O
zspace	pointer
;	O
while	O
(	O
*	O
zspace	pointer
!=	O
'\0'	O
&&	O
!	O
isspace	function
(	O
BUCHAR	O
(	O
*	O
zspace	pointer
)	O
)	O
)	O
++	O
zspace	pointer
;	O
if	O
(	O
*	O
zspace	pointer
==	O
'\0'	O
)	O
break	O
;	O
*	O
zspace	pointer
++	O
=	O
'\0'	O
;	O
}	O
if	O
(	O
pzset	pointer
!=	O
paz	pointer
+	O
1	int
)	O
{	O
int	O
iopt	int
;	O
*	O
pzset	pointer
=	O
NULL	O
;	O
optind	O
=	O
0	int
;	O
opterr	O
=	O
0	int
;	O
while	O
(	O
(	O
iopt	int
=	O
getopt	O
(	O
pzset	pointer
-	O
paz	pointer
,	O
paz	pointer
,	O
"N::p:Q:RU:v:x:"	pointer
)	O
)	O
!=	O
EOF	O
)	O
{	O
long	O
iseq	int
;	O
long	O
c	long
;	O
char	O
b	char
;	O
int	O
iwant	int
;	O
switch	O
(	O
iopt	int
)	O
{	O
case	O
'N'	O
:	O
fgotn	int
=	O
TRUE	O
;	O
if	O
(	O
optarg	O
==	O
NULL	O
)	O
sDaemon	struct
.	O
ifeatures	int
|=	O
FEATURE_SIZES	O
|	O
FEATURE_V103	O
;	O
else	O
sDaemon	struct
.	O
ifeatures	int
|=	O
(	O
int	O
)	O
strtol	function
(	O
optarg	O
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
0	int
)	O
;	O
break	O
;	O
case	O
'p'	O
:	O
if	O
(	O
UUCONF_GRADE_LEGAL	O
(	O
optarg	O
[	O
0	int
]	O
)	O
)	O
sDaemon	struct
.	O
bgrade	char
=	O
optarg	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
'Q'	O
:	O
iseq	int
=	O
strtol	function
(	O
optarg	O
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_fsequence	int
&&	O
iseq	int
!=	O
ixsysdep_get_sequence	function
(	O
qsys	pointer
)	O
)	O
{	O
(	O
void	O
)	O
fsend_uucp_cmd	function
(	O
qconn	pointer
,	O
"RBADSEQ"	pointer
)	O
;	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Out of sequence call rejected"	pointer
)	O
;	O
sstat	struct
.	O
ttype	enum
=	O
STATUS_FAILED	int
;	O
(	O
void	O
)	O
fsysdep_set_status	function
(	O
qsys	pointer
,	O
&	O
sstat	struct
)	O
;	O
xfree	function
(	O
(	O
pointer	pointer
)	O
paz	pointer
)	O
;	O
ubuffree	function
(	O
zstr	pointer
)	O
;	O
uaccept_call_cleanup	function
(	O
puuconf	pointer
,	O
&	O
ssys	struct
,	O
qport	pointer
,	O
&	O
sport	struct
,	O
zloc	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
fgotseq	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'R'	O
:	O
sDaemon	struct
.	O
ifeatures	int
|=	O
FEATURE_RESTART	O
;	O
break	O
;	O
case	O
'U'	O
:	O
c	long
=	O
strtol	function
(	O
optarg	O
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
c	long
>	O
0	int
&&	O
c	long
<	O
LONG_MAX	O
/	O
(	O
long	O
)	O
512	int
)	O
sDaemon	struct
.	O
cmax_receive	long
=	O
c	long
*	O
(	O
long	O
)	O
512	int
;	O
break	O
;	O
case	O
'v'	O
:	O
if	O
(	O
strncmp	function
(	O
optarg	O
,	O
"grade="	pointer
,	O
sizeof	O
"grade="	pointer
-	O
1	int
)	O
==	O
0	int
)	O
{	O
b	char
=	O
optarg	O
[	O
sizeof	O
"grade="	pointer
-	O
1	int
]	O
;	O
if	O
(	O
UUCONF_GRADE_LEGAL	O
(	O
b	char
)	O
)	O
sDaemon	struct
.	O
bgrade	char
=	O
b	char
;	O
}	O
break	O
;	O
case	O
'x'	O
:	O
iwant	int
=	O
(	O
int	O
)	O
strtol	function
(	O
optarg	O
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
iwant	int
<=	O
9	int
)	O
iwant	int
=	O
(	O
1	int
<<	O
iwant	int
)	O
-	O
1	int
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_zmax_remote_debug	pointer
!=	O
NULL	O
)	O
iwant	int
&=	O
idebug_parse	function
(	O
qsys	pointer
->	O
uuconf_zmax_remote_debug	pointer
)	O
;	O
else	O
iwant	int
&=	O
DEBUG_ABNORMAL	O
|	O
DEBUG_CHAT	O
|	O
DEBUG_HANDSHAKE	O
;	O
if	O
(	O
(	O
iDebug	int
|	O
iwant	int
)	O
!=	O
iDebug	int
)	O
{	O
iDebug	int
|=	O
iwant	int
;	O
ulog	function
(	O
LOG_NORMAL	int
,	O
"Setting debugging mode to 0%o"	pointer
,	O
iDebug	int
)	O
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
}	O
xfree	function
(	O
(	O
pointer	pointer
)	O
paz	pointer
)	O
;	O
}	O
ubuffree	function
(	O
zstr	pointer
)	O
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_fsequence	int
&&	O
!	O
fgotseq	int
)	O
{	O
(	O
void	O
)	O
fsend_uucp_cmd	function
(	O
qconn	pointer
,	O
"RBADSEQ"	pointer
)	O
;	O
ulog	function
(	O
LOG_ERROR	int
,	O
"No sequence number (call rejected)"	pointer
)	O
;	O
sstat	struct
.	O
ttype	enum
=	O
STATUS_FAILED	int
;	O
(	O
void	O
)	O
fsysdep_set_status	function
(	O
qsys	pointer
,	O
&	O
sstat	struct
)	O
;	O
uaccept_call_cleanup	function
(	O
puuconf	pointer
,	O
&	O
ssys	struct
,	O
qport	pointer
,	O
&	O
sport	struct
,	O
zloc	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
{	O
char	O
ab	array
[	O
20	int
]	O
;	O
const	O
char	O
*	O
zreply	pointer
;	O
if	O
(	O
!	O
fgotn	int
)	O
{	O
if	O
(	O
(	O
sDaemon	struct
.	O
ifeatures	int
&	O
FEATURE_RESTART	O
)	O
==	O
0	int
)	O
zreply	pointer
=	O
"ROK"	pointer
;	O
else	O
{	O
sDaemon	struct
.	O
ifeatures	int
|=	O
FEATURE_SVR4	O
|	O
FEATURE_SIZES	O
;	O
zreply	pointer
=	O
"ROK -R"	pointer
;	O
}	O
}	O
else	O
if	O
(	O
(	O
sDaemon	struct
.	O
ifeatures	int
&	O
FEATURE_V103	O
)	O
!=	O
0	int
)	O
zreply	pointer
=	O
"ROKN"	pointer
;	O
else	O
{	O
sprintf	function
(	O
ab	array
,	O
"ROKN0%o"	pointer
,	O
(	O
unsigned	O
int	O
)	O
(	O
FEATURE_SIZES	O
|	O
FEATURE_EXEC	O
|	O
FEATURE_RESTART	O
|	O
FEATURE_QUOTES	O
)	O
)	O
;	O
zreply	pointer
=	O
ab	array
;	O
}	O
if	O
(	O
!	O
fsend_uucp_cmd	function
(	O
qconn	pointer
,	O
zreply	pointer
)	O
)	O
{	O
sstat	struct
.	O
ttype	enum
=	O
STATUS_FAILED	int
;	O
(	O
void	O
)	O
fsysdep_set_status	function
(	O
qsys	pointer
,	O
&	O
sstat	struct
)	O
;	O
uaccept_call_cleanup	function
(	O
puuconf	pointer
,	O
&	O
ssys	struct
,	O
qport	pointer
,	O
&	O
sport	struct
,	O
zloc	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
if	O
(	O
ftcp_port	int
)	O
sDaemon	struct
.	O
ireliable	int
=	O
(	O
UUCONF_RELIABLE_SPECIFIED	O
|	O
UUCONF_RELIABLE_ENDTOEND	O
|	O
UUCONF_RELIABLE_RELIABLE	O
|	O
UUCONF_RELIABLE_EIGHT	O
|	O
UUCONF_RELIABLE_FULLDUPLEX	O
)	O
;	O
else	O
{	O
if	O
(	O
qport	pointer
!=	O
NULL	O
&&	O
(	O
qport	pointer
->	O
uuconf_ireliable	int
&	O
UUCONF_RELIABLE_SPECIFIED	O
)	O
!=	O
0	int
)	O
sDaemon	struct
.	O
ireliable	int
=	O
qport	pointer
->	O
uuconf_ireliable	int
;	O
if	O
(	O
qdialer	pointer
!=	O
NULL	O
&&	O
(	O
qdialer	pointer
->	O
uuconf_ireliable	int
&	O
UUCONF_RELIABLE_SPECIFIED	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
sDaemon	struct
.	O
ireliable	int
!=	O
0	int
)	O
sDaemon	struct
.	O
ireliable	int
&=	O
qdialer	pointer
->	O
uuconf_ireliable	int
;	O
else	O
sDaemon	struct
.	O
ireliable	int
=	O
qdialer	pointer
->	O
uuconf_ireliable	int
;	O
}	O
if	O
(	O
sDaemon	struct
.	O
ireliable	int
==	O
0	int
)	O
sDaemon	struct
.	O
ireliable	int
=	O
(	O
UUCONF_RELIABLE_RELIABLE	O
|	O
UUCONF_RELIABLE_EIGHT	O
|	O
UUCONF_RELIABLE_FULLDUPLEX	O
|	O
UUCONF_RELIABLE_SPECIFIED	O
)	O
;	O
}	O
if	O
(	O
qsys	pointer
->	O
uuconf_zprotocols	pointer
!=	O
NULL	O
||	O
(	O
qport	pointer
!=	O
NULL	O
&&	O
qport	pointer
->	O
uuconf_zprotocols	pointer
!=	O
NULL	O
)	O
)	O
{	O
const	O
char	O
*	O
zprotos	pointer
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_zprotocols	pointer
!=	O
NULL	O
)	O
zprotos	pointer
=	O
qsys	pointer
->	O
uuconf_zprotocols	pointer
;	O
else	O
zprotos	pointer
=	O
qport	pointer
->	O
uuconf_zprotocols	pointer
;	O
zsend	pointer
=	O
zbufalc	function
(	O
strlen	function
(	O
zprotos	pointer
)	O
+	O
2	int
)	O
;	O
sprintf	function
(	O
zsend	pointer
,	O
"P%s"	pointer
,	O
zprotos	pointer
)	O
;	O
}	O
else	O
{	O
char	O
*	O
zset	pointer
;	O
zsend	pointer
=	O
zbufalc	function
(	O
CPROTOCOLS	O
+	O
2	int
)	O
;	O
zset	pointer
=	O
zsend	pointer
;	O
*	O
zset	pointer
++	O
=	O
'P'	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
CPROTOCOLS	O
;	O
i	int
++	O
)	O
{	O
int	O
ipr	int
;	O
ipr	int
=	O
asProtocols	array
[	O
i	int
]	O
.	O
ireliable	int
;	O
if	O
(	O
(	O
ipr	int
&	O
sDaemon	struct
.	O
ireliable	int
)	O
!=	O
ipr	int
)	O
continue	O
;	O
*	O
zset	pointer
++	O
=	O
asProtocols	array
[	O
i	int
]	O
.	O
bname	char
;	O
}	O
*	O
zset	pointer
=	O
'\0'	O
;	O
}	O
fret	int
=	O
fsend_uucp_cmd	function
(	O
qconn	pointer
,	O
zsend	pointer
)	O
;	O
ubuffree	function
(	O
zsend	pointer
)	O
;	O
if	O
(	O
!	O
fret	int
)	O
{	O
sstat	struct
.	O
ttype	enum
=	O
STATUS_FAILED	int
;	O
(	O
void	O
)	O
fsysdep_set_status	function
(	O
qsys	pointer
,	O
&	O
sstat	struct
)	O
;	O
uaccept_call_cleanup	function
(	O
puuconf	pointer
,	O
&	O
ssys	struct
,	O
qport	pointer
,	O
&	O
sport	struct
,	O
zloc	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
zstr	pointer
=	O
zget_uucp_cmd	function
(	O
qconn	pointer
,	O
TRUE	O
,	O
fstrip	int
)	O
;	O
if	O
(	O
zstr	pointer
==	O
NULL	O
)	O
{	O
sstat	struct
.	O
ttype	enum
=	O
STATUS_FAILED	int
;	O
(	O
void	O
)	O
fsysdep_set_status	function
(	O
qsys	pointer
,	O
&	O
sstat	struct
)	O
;	O
uaccept_call_cleanup	function
(	O
puuconf	pointer
,	O
&	O
ssys	struct
,	O
qport	pointer
,	O
&	O
sport	struct
,	O
zloc	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
zstr	pointer
[	O
0	int
]	O
!=	O
'U'	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Bad protocol response string"	pointer
)	O
;	O
sstat	struct
.	O
ttype	enum
=	O
STATUS_FAILED	int
;	O
(	O
void	O
)	O
fsysdep_set_status	function
(	O
qsys	pointer
,	O
&	O
sstat	struct
)	O
;	O
ubuffree	function
(	O
zstr	pointer
)	O
;	O
uaccept_call_cleanup	function
(	O
puuconf	pointer
,	O
&	O
ssys	struct
,	O
qport	pointer
,	O
&	O
sport	struct
,	O
zloc	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
zstr	pointer
[	O
1	int
]	O
==	O
'N'	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"No supported protocol"	pointer
)	O
;	O
sstat	struct
.	O
ttype	enum
=	O
STATUS_FAILED	int
;	O
(	O
void	O
)	O
fsysdep_set_status	function
(	O
qsys	pointer
,	O
&	O
sstat	struct
)	O
;	O
ubuffree	function
(	O
zstr	pointer
)	O
;	O
uaccept_call_cleanup	function
(	O
puuconf	pointer
,	O
&	O
ssys	struct
,	O
qport	pointer
,	O
&	O
sport	struct
,	O
zloc	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
CPROTOCOLS	O
;	O
i	int
++	O
)	O
if	O
(	O
asProtocols	array
[	O
i	int
]	O
.	O
bname	char
==	O
zstr	pointer
[	O
1	int
]	O
)	O
break	O
;	O
ubuffree	function
(	O
zstr	pointer
)	O
;	O
if	O
(	O
i	int
>=	O
CPROTOCOLS	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"No supported protocol"	pointer
)	O
;	O
sstat	struct
.	O
ttype	enum
=	O
STATUS_FAILED	int
;	O
(	O
void	O
)	O
fsysdep_set_status	function
(	O
qsys	pointer
,	O
&	O
sstat	struct
)	O
;	O
uaccept_call_cleanup	function
(	O
puuconf	pointer
,	O
&	O
ssys	struct
,	O
qport	pointer
,	O
&	O
sport	struct
,	O
zloc	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
sDaemon	struct
.	O
qproto	pointer
=	O
&	O
asProtocols	array
[	O
i	int
]	O
;	O
if	O
(	O
(	O
sDaemon	struct
.	O
ireliable	int
&	O
UUCONF_RELIABLE_FULLDUPLEX	O
)	O
==	O
0	int
)	O
sDaemon	struct
.	O
cchans	int
=	O
1	int
;	O
else	O
sDaemon	struct
.	O
cchans	int
=	O
asProtocols	array
[	O
i	int
]	O
.	O
cchans	int
;	O
if	O
(	O
!	O
fchat	function
(	O
qconn	pointer
,	O
puuconf	pointer
,	O
&	O
qsys	pointer
->	O
uuconf_scalled_chat	struct
,	O
qsys	pointer
,	O
(	O
const	O
struct	O
uuconf_dialer	struct
*	O
)	O
NULL	O
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
,	O
FALSE	O
,	O
zport	pointer
,	O
iconn_baud	function
(	O
qconn	pointer
)	O
)	O
)	O
{	O
sstat	struct
.	O
ttype	enum
=	O
STATUS_FAILED	int
;	O
sstat	struct
.	O
ilast	long
=	O
ixsysdep_time	function
(	O
(	O
long	O
*	O
)	O
NULL	O
)	O
;	O
(	O
void	O
)	O
fsysdep_set_status	function
(	O
qsys	pointer
,	O
&	O
sstat	struct
)	O
;	O
uaccept_call_cleanup	function
(	O
puuconf	pointer
,	O
&	O
ssys	struct
,	O
qport	pointer
,	O
&	O
sport	struct
,	O
zloc	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
sDaemon	struct
.	O
qproto	pointer
->	O
qcmds	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
qsys	pointer
->	O
uuconf_qproto_params	pointer
!=	O
NULL	O
)	O
uapply_proto_params	function
(	O
puuconf	pointer
,	O
sDaemon	struct
.	O
qproto	pointer
->	O
bname	char
,	O
sDaemon	struct
.	O
qproto	pointer
->	O
qcmds	pointer
,	O
qsys	pointer
->	O
uuconf_qproto_params	pointer
)	O
;	O
if	O
(	O
qport	pointer
!=	O
NULL	O
&&	O
qport	pointer
->	O
uuconf_qproto_params	pointer
!=	O
NULL	O
)	O
uapply_proto_params	function
(	O
puuconf	pointer
,	O
sDaemon	struct
.	O
qproto	pointer
->	O
bname	char
,	O
sDaemon	struct
.	O
qproto	pointer
->	O
qcmds	pointer
,	O
qport	pointer
->	O
uuconf_qproto_params	pointer
)	O
;	O
if	O
(	O
qdialer	pointer
!=	O
NULL	O
&&	O
qdialer	pointer
->	O
uuconf_qproto_params	pointer
!=	O
NULL	O
)	O
uapply_proto_params	function
(	O
puuconf	pointer
,	O
sDaemon	struct
.	O
qproto	pointer
->	O
bname	char
,	O
sDaemon	struct
.	O
qproto	pointer
->	O
qcmds	pointer
,	O
qdialer	pointer
->	O
uuconf_qproto_params	pointer
)	O
;	O
}	O
if	O
(	O
qdialer	pointer
==	O
&	O
sdialer	struct
)	O
(	O
void	O
)	O
uuconf_dialer_free	function
(	O
puuconf	pointer
,	O
&	O
sdialer	struct
)	O
;	O
if	O
(	O
!	O
(	O
*	O
sDaemon	struct
.	O
qproto	pointer
->	O
pfstart	pointer
)	O
(	O
&	O
sDaemon	struct
,	O
&	O
zlog	pointer
)	O
||	O
!	O
fqueue	function
(	O
&	O
sDaemon	struct
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
)	O
{	O
uclear_queue	function
(	O
&	O
sDaemon	struct
)	O
;	O
sstat	struct
.	O
ttype	enum
=	O
STATUS_FAILED	int
;	O
sstat	struct
.	O
ilast	long
=	O
ixsysdep_time	function
(	O
(	O
long	O
*	O
)	O
NULL	O
)	O
;	O
(	O
void	O
)	O
fsysdep_set_status	function
(	O
qsys	pointer
,	O
&	O
sstat	struct
)	O
;	O
uaccept_call_cleanup	function
(	O
puuconf	pointer
,	O
&	O
ssys	struct
,	O
qport	pointer
,	O
&	O
sport	struct
,	O
zloc	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
zlog	pointer
==	O
NULL	O
)	O
{	O
zlog	pointer
=	O
zbufalc	function
(	O
sizeof	O
"protocol ''"	pointer
+	O
1	int
)	O
;	O
sprintf	function
(	O
zlog	pointer
,	O
"protocol '%c'"	pointer
,	O
sDaemon	struct
.	O
qproto	pointer
->	O
bname	char
)	O
;	O
}	O
zgrade	pointer
=	O
zbufalc	function
(	O
sizeof	O
"grade  "	pointer
+	O
1	int
)	O
;	O
if	O
(	O
sDaemon	struct
.	O
bgrade	char
==	O
UUCONF_GRADE_LOW	O
)	O
*	O
zgrade	pointer
=	O
'\0'	O
;	O
else	O
sprintf	function
(	O
zgrade	pointer
,	O
"grade %c "	pointer
,	O
sDaemon	struct
.	O
bgrade	char
)	O
;	O
ulog	function
(	O
LOG_NORMAL	int
,	O
"Handshake successful (%s%s)"	pointer
,	O
zgrade	pointer
,	O
zlog	pointer
)	O
;	O
ubuffree	function
(	O
zlog	pointer
)	O
;	O
ubuffree	function
(	O
zgrade	pointer
)	O
;	O
{	O
long	O
iend_time	long
;	O
fret	int
=	O
floop	function
(	O
&	O
sDaemon	struct
)	O
;	O
if	O
(	O
fsend_uucp_cmd	function
(	O
qconn	pointer
,	O
"OOOOOOO"	pointer
)	O
&&	O
fsend_uucp_cmd	function
(	O
qconn	pointer
,	O
"OOOOOOO"	pointer
)	O
)	O
{	O
int	O
fdone	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
25	int
;	O
i	int
++	O
)	O
{	O
zstr	pointer
=	O
zget_uucp_cmd	function
(	O
qconn	pointer
,	O
FALSE	O
,	O
fstrip	int
)	O
;	O
if	O
(	O
zstr	pointer
==	O
NULL	O
)	O
break	O
;	O
fdone	int
=	O
strstr	function
(	O
zstr	pointer
,	O
"OOOOOO"	pointer
)	O
!=	O
NULL	O
;	O
ubuffree	function
(	O
zstr	pointer
)	O
;	O
if	O
(	O
fdone	int
)	O
break	O
;	O
}	O
}	O
iend_time	long
=	O
ixsysdep_time	function
(	O
(	O
long	O
*	O
)	O
NULL	O
)	O
;	O
ulog	function
(	O
LOG_NORMAL	int
,	O
"Call complete (%ld seconds %ld bytes %ld bps)"	pointer
,	O
iend_time	long
-	O
istart_time	long
,	O
sDaemon	struct
.	O
csent	long
+	O
sDaemon	struct
.	O
creceived	long
,	O
(	O
iend_time	long
!=	O
istart_time	long
?	O
(	O
sDaemon	struct
.	O
csent	long
+	O
sDaemon	struct
.	O
creceived	long
)	O
/	O
(	O
iend_time	long
-	O
istart_time	long
)	O
:	O
0	int
)	O
)	O
;	O
uclear_queue	function
(	O
&	O
sDaemon	struct
)	O
;	O
if	O
(	O
fret	int
)	O
sstat	struct
.	O
ttype	enum
=	O
STATUS_COMPLETE	int
;	O
else	O
sstat	struct
.	O
ttype	enum
=	O
STATUS_FAILED	int
;	O
sstat	struct
.	O
ilast	long
=	O
iend_time	long
;	O
(	O
void	O
)	O
fsysdep_set_status	function
(	O
qsys	pointer
,	O
&	O
sstat	struct
)	O
;	O
if	O
(	O
sDaemon	struct
.	O
irunuuxqt	int
==	O
UUCONF_RUNUUXQT_PERCALL	O
||	O
(	O
sDaemon	struct
.	O
irunuuxqt	int
>	O
0	int
&&	O
sDaemon	struct
.	O
cxfiles_received	long
>	O
0	int
)	O
)	O
(	O
void	O
)	O
fspawn_uuxqt	function
(	O
TRUE	O
,	O
qsys	pointer
->	O
uuconf_zname	pointer
,	O
zconfig	pointer
)	O
;	O
uaccept_call_cleanup	function
(	O
puuconf	pointer
,	O
&	O
ssys	struct
,	O
qport	pointer
,	O
&	O
sport	struct
,	O
zloc	pointer
)	O
;	O
return	O
fret	int
;	O
}	O
}	O
static	O
void	O
uaccept_call_cleanup	function
(	O
puuconf	pointer
,	O
qfreesys	pointer
,	O
qport	pointer
,	O
qfreeport	pointer
,	O
zloc	pointer
)	O
pointer	pointer
puuconf	pointer
ATTRIBUTE_UNUSED	O
;	O
struct	O
uuconf_system	struct
*	O
qfreesys	pointer
;	O
struct	O
uuconf_port	struct
*	O
qport	pointer
;	O
struct	O
uuconf_port	struct
*	O
qfreeport	pointer
;	O
char	O
*	O
zloc	pointer
;	O
{	O
if	O
(	O
fLocked_system	int
)	O
{	O
(	O
void	O
)	O
fsysdep_unlock_system	function
(	O
&	O
sLocked_system	struct
)	O
;	O
fLocked_system	int
=	O
FALSE	O
;	O
}	O
if	O
(	O
qfreesys	pointer
!=	O
NULL	O
)	O
(	O
void	O
)	O
uuconf_system_free	function
(	O
puuconf	pointer
,	O
qfreesys	pointer
)	O
;	O
if	O
(	O
qport	pointer
==	O
qfreeport	pointer
)	O
(	O
void	O
)	O
uuconf_port_free	function
(	O
puuconf	pointer
,	O
qfreeport	pointer
)	O
;	O
xfree	function
(	O
(	O
pointer	pointer
)	O
zloc	pointer
)	O
;	O
ulog_system	function
(	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
static	O
void	O
uapply_proto_params	function
(	O
puuconf	pointer
,	O
bproto	int
,	O
qcmds	pointer
,	O
pas	pointer
)	O
pointer	pointer
puuconf	pointer
;	O
int	O
bproto	int
;	O
struct	O
uuconf_cmdtab	struct
*	O
qcmds	pointer
;	O
struct	O
uuconf_proto_param	struct
*	O
pas	pointer
;	O
{	O
struct	O
uuconf_proto_param	struct
*	O
qp	pointer
;	O
for	O
(	O
qp	pointer
=	O
pas	pointer
;	O
qp	pointer
->	O
uuconf_bproto	int
!=	O
'\0'	O
;	O
qp	pointer
++	O
)	O
{	O
if	O
(	O
qp	pointer
->	O
uuconf_bproto	int
==	O
bproto	int
)	O
{	O
struct	O
uuconf_proto_param_entry	struct
*	O
qe	pointer
;	O
for	O
(	O
qe	pointer
=	O
qp	pointer
->	O
uuconf_qentries	pointer
;	O
qe	pointer
->	O
uuconf_cargs	int
>	O
0	int
;	O
qe	pointer
++	O
)	O
{	O
int	O
iuuconf	int
;	O
iuuconf	int
=	O
uuconf_cmd_args	function
(	O
puuconf	pointer
,	O
qe	pointer
->	O
uuconf_cargs	int
,	O
qe	pointer
->	O
uuconf_pzargs	pointer
,	O
qcmds	pointer
,	O
(	O
pointer	pointer
)	O
NULL	O
,	O
(	O
uuconf_cmdtabfn	pointer
)	O
NULL	O
,	O
0	int
,	O
(	O
pointer	pointer
)	O
NULL	O
)	O
;	O
if	O
(	O
UUCONF_ERROR_VALUE	O
(	O
iuuconf	int
)	O
!=	O
UUCONF_SUCCESS	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Error in %c protocol parameters"	pointer
,	O
bproto	int
)	O
;	O
ulog_uuconf	function
(	O
LOG_ERROR	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
}	O
}	O
break	O
;	O
}	O
}	O
}	O
static	O
boolean	int
fsend_uucp_cmd	function
(	O
qconn	pointer
,	O
z	pointer
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
const	O
char	O
*	O
z	pointer
;	O
{	O
size_t	long
cwrite	long
;	O
char	O
*	O
zalc	pointer
;	O
boolean	int
fret	int
;	O
DEBUG_MESSAGE1	O
(	O
DEBUG_HANDSHAKE	O
,	O
"fsend_uucp_cmd: Sending \"%s\""	pointer
,	O
z	pointer
)	O
;	O
cwrite	long
=	O
strlen	function
(	O
z	pointer
)	O
+	O
2	int
;	O
zalc	pointer
=	O
zbufalc	function
(	O
cwrite	long
)	O
;	O
zalc	pointer
[	O
0	int
]	O
=	O
'\020'	O
;	O
memcpy	function
(	O
zalc	pointer
+	O
1	int
,	O
z	pointer
,	O
cwrite	long
-	O
1	int
)	O
;	O
fret	int
=	O
fconn_write	function
(	O
qconn	pointer
,	O
zalc	pointer
,	O
cwrite	long
)	O
;	O
ubuffree	function
(	O
zalc	pointer
)	O
;	O
return	O
fret	int
;	O
}	O
static	O
char	O
*	O
zget_uucp_cmd	function
(	O
qconn	pointer
,	O
frequired	int
,	O
fstrip	int
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
boolean	int
frequired	int
;	O
boolean	int
fstrip	int
;	O
{	O
char	O
*	O
zalc	pointer
;	O
size_t	long
calc	long
;	O
size_t	long
cgot	long
;	O
boolean	int
fintro	int
;	O
long	O
iendtime	long
;	O
int	O
ctimeout	int
;	O
int	O
cchars	int
;	O
int	O
iolddebug	int
;	O
iendtime	long
=	O
ixsysdep_time	function
(	O
(	O
long	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
frequired	int
)	O
iendtime	long
+=	O
CTIMEOUT	O
;	O
else	O
iendtime	long
+=	O
CSHORTTIMEOUT	O
;	O
cchars	int
=	O
0	int
;	O
iolddebug	int
=	O
iDebug	int
;	O
if	O
(	O
FDEBUGGING	O
(	O
DEBUG_HANDSHAKE	O
)	O
)	O
{	O
ulog	function
(	O
LOG_DEBUG_START	int
,	O
"zget_uucp_cmd: Got \""	pointer
)	O
;	O
iDebug	int
&=	O
~	O
(	O
DEBUG_INCOMING	O
|	O
DEBUG_PORT	O
)	O
;	O
}	O
zalc	pointer
=	O
NULL	O
;	O
calc	long
=	O
0	int
;	O
cgot	long
=	O
0	int
;	O
fintro	int
=	O
FALSE	O
;	O
while	O
(	O
(	O
ctimeout	int
=	O
(	O
int	O
)	O
(	O
iendtime	long
-	O
ixsysdep_time	function
(	O
(	O
long	O
*	O
)	O
NULL	O
)	O
)	O
)	O
>	O
0	int
)	O
{	O
int	O
b	char
;	O
b	char
=	O
breceive_char	function
(	O
qconn	pointer
,	O
ctimeout	int
,	O
frequired	int
)	O
;	O
if	O
(	O
b	char
<	O
0	int
)	O
{	O
if	O
(	O
FDEBUGGING	O
(	O
DEBUG_HANDSHAKE	O
)	O
)	O
{	O
ulog	function
(	O
LOG_DEBUG_END	int
,	O
"\" (%s)"	pointer
,	O
b	char
==	O
-	O
1	int
?	O
"timeout"	pointer
:	O
"error"	pointer
)	O
;	O
iDebug	int
=	O
iolddebug	int
;	O
}	O
if	O
(	O
b	char
==	O
-	O
1	int
&&	O
frequired	int
)	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Timeout"	pointer
)	O
;	O
ubuffree	function
(	O
zalc	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
fstrip	int
)	O
b	char
&=	O
0x7f	int
;	O
if	O
(	O
FDEBUGGING	O
(	O
DEBUG_HANDSHAKE	O
)	O
)	O
{	O
char	O
ab	array
[	O
5	int
]	O
;	O
++	O
cchars	int
;	O
if	O
(	O
cchars	int
>	O
60	int
)	O
{	O
ulog	function
(	O
LOG_DEBUG_END	int
,	O
"\""	pointer
)	O
;	O
ulog	function
(	O
LOG_DEBUG_START	int
,	O
"zget_uucp_cmd: Got \""	pointer
)	O
;	O
cchars	int
=	O
0	int
;	O
}	O
(	O
void	O
)	O
cdebug_char	function
(	O
ab	array
,	O
b	char
)	O
;	O
ulog	function
(	O
LOG_DEBUG_CONTINUE	int
,	O
"%s"	pointer
,	O
ab	array
)	O
;	O
}	O
if	O
(	O
!	O
fintro	int
)	O
{	O
if	O
(	O
b	char
==	O
'\020'	O
)	O
fintro	int
=	O
TRUE	O
;	O
continue	O
;	O
}	O
if	O
(	O
b	char
==	O
'\020'	O
)	O
{	O
cgot	long
=	O
0	int
;	O
continue	O
;	O
}	O
if	O
(	O
b	char
==	O
'\r'	O
||	O
b	char
==	O
'\n'	O
)	O
b	char
=	O
'\0'	O
;	O
if	O
(	O
cgot	long
>=	O
calc	long
)	O
{	O
char	O
*	O
znew	pointer
;	O
calc	long
+=	O
CINCREMENT	O
;	O
znew	pointer
=	O
zbufalc	function
(	O
calc	long
)	O
;	O
if	O
(	O
cgot	long
>	O
0	int
)	O
memcpy	function
(	O
znew	pointer
,	O
zalc	pointer
,	O
cgot	long
)	O
;	O
ubuffree	function
(	O
zalc	pointer
)	O
;	O
zalc	pointer
=	O
znew	pointer
;	O
}	O
zalc	pointer
[	O
cgot	long
]	O
=	O
(	O
char	O
)	O
b	char
;	O
++	O
cgot	long
;	O
if	O
(	O
b	char
==	O
'\0'	O
)	O
{	O
if	O
(	O
FDEBUGGING	O
(	O
DEBUG_HANDSHAKE	O
)	O
)	O
{	O
ulog	function
(	O
LOG_DEBUG_END	int
,	O
"\""	pointer
)	O
;	O
iDebug	int
=	O
iolddebug	int
;	O
}	O
return	O
zalc	pointer
;	O
}	O
}	O
if	O
(	O
FDEBUGGING	O
(	O
DEBUG_HANDSHAKE	O
)	O
)	O
{	O
ulog	function
(	O
LOG_DEBUG_END	int
,	O
"\" (timeout)"	pointer
)	O
;	O
iDebug	int
=	O
iolddebug	int
;	O
}	O
ubuffree	function
(	O
zalc	pointer
)	O
;	O
if	O
(	O
frequired	int
)	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Timeout"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
static	O
char	O
*	O
zget_typed_line	function
(	O
qconn	pointer
,	O
fstrip	int
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
boolean	int
fstrip	int
;	O
{	O
static	O
boolean	int
flastcr	int
;	O
char	O
*	O
zalc	pointer
;	O
size_t	long
calc	long
;	O
size_t	long
cgot	long
;	O
int	O
cchars	int
;	O
int	O
iolddebug	int
;	O
cchars	int
=	O
0	int
;	O
iolddebug	int
=	O
iDebug	int
;	O
if	O
(	O
FDEBUGGING	O
(	O
DEBUG_CHAT	O
)	O
)	O
{	O
ulog	function
(	O
LOG_DEBUG_START	int
,	O
"zget_typed_line: Got \""	pointer
)	O
;	O
iDebug	int
&=	O
~	O
(	O
DEBUG_INCOMING	O
|	O
DEBUG_PORT	O
)	O
;	O
}	O
zalc	pointer
=	O
NULL	O
;	O
calc	long
=	O
0	int
;	O
cgot	long
=	O
0	int
;	O
while	O
(	O
TRUE	O
)	O
{	O
int	O
b	char
;	O
b	char
=	O
breceive_char	function
(	O
qconn	pointer
,	O
CTIMEOUT	O
,	O
FALSE	O
)	O
;	O
if	O
(	O
b	char
==	O
-	O
2	int
||	O
FGOT_SIGNAL	O
(	O
)	O
)	O
{	O
if	O
(	O
FDEBUGGING	O
(	O
DEBUG_CHAT	O
)	O
)	O
{	O
ulog	function
(	O
LOG_DEBUG_END	int
,	O
"\" (error)"	pointer
)	O
;	O
iDebug	int
=	O
iolddebug	int
;	O
}	O
ubuffree	function
(	O
zalc	pointer
)	O
;	O
flastcr	int
=	O
FALSE	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
b	char
==	O
-	O
1	int
)	O
{	O
flastcr	int
=	O
FALSE	O
;	O
continue	O
;	O
}	O
if	O
(	O
fstrip	int
)	O
b	char
&=	O
0x7f	int
;	O
if	O
(	O
FDEBUGGING	O
(	O
DEBUG_CHAT	O
)	O
)	O
{	O
char	O
ab	array
[	O
5	int
]	O
;	O
++	O
cchars	int
;	O
if	O
(	O
cchars	int
>	O
60	int
)	O
{	O
ulog	function
(	O
LOG_DEBUG_END	int
,	O
"\""	pointer
)	O
;	O
ulog	function
(	O
LOG_DEBUG_START	int
,	O
"zget_typed_line: Got \""	pointer
)	O
;	O
cchars	int
=	O
0	int
;	O
}	O
(	O
void	O
)	O
cdebug_char	function
(	O
ab	array
,	O
b	char
)	O
;	O
ulog	function
(	O
LOG_DEBUG_CONTINUE	int
,	O
"%s"	pointer
,	O
ab	array
)	O
;	O
}	O
if	O
(	O
b	char
==	O
'\n'	O
&&	O
cgot	long
==	O
0	int
&&	O
flastcr	int
)	O
{	O
flastcr	int
=	O
FALSE	O
;	O
continue	O
;	O
}	O
flastcr	int
=	O
FALSE	O
;	O
if	O
(	O
cgot	long
>=	O
calc	long
)	O
{	O
char	O
*	O
znew	pointer
;	O
calc	long
+=	O
CINCREMENT	O
;	O
znew	pointer
=	O
zbufalc	function
(	O
calc	long
)	O
;	O
if	O
(	O
cgot	long
>	O
0	int
)	O
memcpy	function
(	O
znew	pointer
,	O
zalc	pointer
,	O
cgot	long
)	O
;	O
ubuffree	function
(	O
zalc	pointer
)	O
;	O
zalc	pointer
=	O
znew	pointer
;	O
}	O
if	O
(	O
b	char
==	O
'\n'	O
)	O
b	char
=	O
'\0'	O
;	O
else	O
if	O
(	O
b	char
==	O
'\r'	O
)	O
{	O
flastcr	int
=	O
TRUE	O
;	O
b	char
=	O
'\0'	O
;	O
}	O
zalc	pointer
[	O
cgot	long
]	O
=	O
(	O
char	O
)	O
b	char
;	O
++	O
cgot	long
;	O
if	O
(	O
b	char
==	O
'\0'	O
)	O
{	O
if	O
(	O
FDEBUGGING	O
(	O
DEBUG_CHAT	O
)	O
)	O
{	O
ulog	function
(	O
LOG_DEBUG_END	int
,	O
"\""	pointer
)	O
;	O
iDebug	int
=	O
iolddebug	int
;	O
}	O
return	O
zalc	pointer
;	O
}	O
}	O
}	O
boolean	int
fspawn_uuxqt	function
(	O
ffork	int
,	O
zsys	pointer
,	O
zconfig	pointer
)	O
boolean	int
ffork	int
;	O
const	O
char	O
*	O
zsys	pointer
ATTRIBUTE_UNUSED	O
;	O
const	O
char	O
*	O
zconfig	pointer
;	O
{	O
char	O
*	O
zconfigarg	pointer
;	O
boolean	int
fret	int
;	O
if	O
(	O
zconfig	pointer
==	O
NULL	O
)	O
zconfigarg	pointer
=	O
NULL	O
;	O
else	O
{	O
zconfigarg	pointer
=	O
zbufalc	function
(	O
sizeof	O
"-I"	pointer
+	O
strlen	function
(	O
zconfig	pointer
)	O
)	O
;	O
sprintf	function
(	O
zconfigarg	pointer
,	O
"-I%s"	pointer
,	O
zconfig	pointer
)	O
;	O
}	O
fret	int
=	O
fsysdep_run	function
(	O
ffork	int
,	O
"uuxqt"	pointer
,	O
zconfigarg	pointer
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
ubuffree	function
(	O
zconfigarg	pointer
)	O
;	O
return	O
fret	int
;	O
}	O
