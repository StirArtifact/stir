int	O
_API_openpl	O
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
bool	enum
retval	enum
;	O
if	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
)	O
{	O
_plotter	pointer
->	O
error	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"openpl: invalid operation"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
switch	O
(	O
(	O
int	O
)	O
_plotter	pointer
->	O
data	pointer
->	O
output_model	enum
)	O
{	O
case	O
(	O
int	O
)	O
PL_OUTPUT_NONE	int
:	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
=	O
_new_outbuf	function
(	O
)	O
;	O
break	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
PL_OUTPUT_ONE_PAGE	int
:	O
case	O
(	O
int	O
)	O
PL_OUTPUT_ONE_PAGE_AT_A_TIME	int
:	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
=	O
_new_outbuf	function
(	O
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
PL_OUTPUT_PAGES_ALL_AT_ONCE	int
:	O
{	O
plOutbuf	struct
*	O
new_page	pointer
=	O
_new_outbuf	function
(	O
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
opened	enum
==	O
false	int
)	O
{	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
=	O
new_page	pointer
;	O
_plotter	pointer
->	O
data	pointer
->	O
first_page	pointer
=	O
new_page	pointer
;	O
}	O
else	O
{	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
next	pointer
=	O
new_page	pointer
;	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
=	O
new_page	pointer
;	O
}	O
}	O
break	O
;	O
case	O
(	O
int	O
)	O
PL_OUTPUT_VIA_CUSTOM_ROUTINES	int
:	O
case	O
(	O
int	O
)	O
PL_OUTPUT_VIA_CUSTOM_ROUTINES_IN_REAL_TIME	int
:	O
case	O
(	O
int	O
)	O
PL_OUTPUT_VIA_CUSTOM_ROUTINES_TO_NON_STREAM	int
:	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
=	O
(	O
plOutbuf	struct
*	O
)	O
NULL	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
=	O
true	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
opened	enum
=	O
true	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
page_number	int
++	O
;	O
_plotter	pointer
->	O
data	pointer
->	O
fontsize_invoked	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
linewidth_invoked	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
frame_number	int
=	O
0	int
;	O
_pl_g_create_first_drawing_state	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
{	O
const	O
char	O
*	O
bg_color_name_s	pointer
;	O
bg_color_name_s	pointer
=	O
(	O
const	O
char	O
*	O
)	O
_get_plot_param	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
"BG_COLOR"	pointer
)	O
;	O
if	O
(	O
bg_color_name_s	pointer
)	O
_API_bgcolorname	O
(	O
R___	O
(	O
_plotter	pointer
)	O
bg_color_name_s	pointer
)	O
;	O
}	O
retval	enum
=	O
_plotter	pointer
->	O
begin_page	pointer
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_API_fsetmatrix	O
(	O
R___	O
(	O
_plotter	pointer
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
m_user_to_ndc	array
[	O
0	int
]	O
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
m_user_to_ndc	array
[	O
1	int
]	O
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
m_user_to_ndc	array
[	O
2	int
]	O
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
m_user_to_ndc	array
[	O
3	int
]	O
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
m_user_to_ndc	array
[	O
4	int
]	O
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
m_user_to_ndc	array
[	O
5	int
]	O
)	O
;	O
return	O
(	O
retval	enum
==	O
true	int
?	O
0	int
:	O
-	O
1	int
)	O
;	O
}	O
bool	enum
_pl_g_begin_page	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
return	O
true	int
;	O
}	O
void	O
_pl_g_create_first_drawing_state	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
plDrawState	struct
*	O
drawstate	pointer
;	O
const	O
plDrawState	struct
*	O
copyfrom	pointer
;	O
char	O
*	O
fill_rule	pointer
,	O
*	O
line_mode	pointer
,	O
*	O
join_mode	pointer
,	O
*	O
cap_mode	pointer
;	O
drawstate	pointer
=	O
(	O
plDrawState	struct
*	O
)	O
_pl_xmalloc	function
(	O
sizeof	O
(	O
plDrawState	struct
)	O
)	O
;	O
copyfrom	pointer
=	O
&	O
_default_drawstate	struct
;	O
memcpy	function
(	O
drawstate	pointer
,	O
copyfrom	pointer
,	O
sizeof	O
(	O
plDrawState	struct
)	O
)	O
;	O
fill_rule	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
strlen	function
(	O
copyfrom	pointer
->	O
fill_rule	pointer
)	O
+	O
1	int
)	O
;	O
line_mode	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
strlen	function
(	O
copyfrom	pointer
->	O
line_mode	pointer
)	O
+	O
1	int
)	O
;	O
join_mode	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
strlen	function
(	O
copyfrom	pointer
->	O
join_mode	pointer
)	O
+	O
1	int
)	O
;	O
cap_mode	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
strlen	function
(	O
copyfrom	pointer
->	O
cap_mode	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
fill_rule	pointer
,	O
copyfrom	pointer
->	O
fill_rule	pointer
)	O
;	O
strcpy	function
(	O
line_mode	pointer
,	O
copyfrom	pointer
->	O
line_mode	pointer
)	O
;	O
strcpy	function
(	O
join_mode	pointer
,	O
copyfrom	pointer
->	O
join_mode	pointer
)	O
;	O
strcpy	function
(	O
cap_mode	pointer
,	O
copyfrom	pointer
->	O
cap_mode	pointer
)	O
;	O
drawstate	pointer
->	O
fill_rule	pointer
=	O
fill_rule	pointer
;	O
drawstate	pointer
->	O
line_mode	pointer
=	O
line_mode	pointer
;	O
drawstate	pointer
->	O
join_mode	pointer
=	O
join_mode	pointer
;	O
drawstate	pointer
->	O
cap_mode	pointer
=	O
cap_mode	pointer
;	O
if	O
(	O
copyfrom	pointer
->	O
dash_array_len	int
>	O
0	int
)	O
{	O
int	O
i	int
;	O
double	O
*	O
dash_array	pointer
;	O
dash_array	pointer
=	O
(	O
double	O
*	O
)	O
_pl_xmalloc	function
(	O
copyfrom	pointer
->	O
dash_array_len	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
copyfrom	pointer
->	O
dash_array_len	int
;	O
i	int
++	O
)	O
dash_array	pointer
[	O
i	int
]	O
=	O
copyfrom	pointer
->	O
dash_array	pointer
[	O
i	int
]	O
;	O
drawstate	pointer
->	O
dash_array	pointer
=	O
dash_array	pointer
;	O
}	O
{	O
const	O
char	O
*	O
font_name_init	pointer
;	O
char	O
*	O
font_name	pointer
,	O
*	O
true_font_name	pointer
;	O
int	O
typeface_index	int
,	O
font_index	int
;	O
switch	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
default_font_type	int
)	O
{	O
case	O
PL_F_HERSHEY	int
:	O
default	O
:	O
font_name_init	pointer
=	O
PL_DEFAULT_HERSHEY_FONT	pointer
;	O
typeface_index	int
=	O
PL_DEFAULT_HERSHEY_TYPEFACE_INDEX	int
;	O
font_index	int
=	O
PL_DEFAULT_HERSHEY_FONT_INDEX	int
;	O
break	O
;	O
case	O
PL_F_POSTSCRIPT	int
:	O
font_name_init	pointer
=	O
PL_DEFAULT_POSTSCRIPT_FONT	pointer
;	O
typeface_index	int
=	O
PL_DEFAULT_POSTSCRIPT_TYPEFACE_INDEX	int
;	O
font_index	int
=	O
PL_DEFAULT_POSTSCRIPT_FONT_INDEX	int
;	O
break	O
;	O
case	O
PL_F_PCL	int
:	O
font_name_init	pointer
=	O
PL_DEFAULT_PCL_FONT	pointer
;	O
typeface_index	int
=	O
PL_DEFAULT_PCL_TYPEFACE_INDEX	int
;	O
font_index	int
=	O
PL_DEFAULT_PCL_FONT_INDEX	int
;	O
break	O
;	O
case	O
PL_F_STICK	int
:	O
font_name_init	pointer
=	O
PL_DEFAULT_STICK_FONT	pointer
;	O
typeface_index	int
=	O
PL_DEFAULT_STICK_TYPEFACE_INDEX	int
;	O
font_index	int
=	O
PL_DEFAULT_STICK_FONT_INDEX	int
;	O
break	O
;	O
}	O
font_name	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
strlen	function
(	O
font_name_init	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
font_name	pointer
,	O
font_name_init	pointer
)	O
;	O
drawstate	pointer
->	O
font_name	pointer
=	O
font_name	pointer
;	O
true_font_name	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
strlen	function
(	O
font_name_init	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
true_font_name	pointer
,	O
font_name_init	pointer
)	O
;	O
drawstate	pointer
->	O
true_font_name	pointer
=	O
true_font_name	pointer
;	O
drawstate	pointer
->	O
font_type	int
=	O
_plotter	pointer
->	O
data	pointer
->	O
default_font_type	int
;	O
drawstate	pointer
->	O
typeface_index	int
=	O
typeface_index	int
;	O
drawstate	pointer
->	O
font_index	int
=	O
font_index	int
;	O
if	O
(	O
drawstate	pointer
->	O
fill_rule_type	int
==	O
PL_FILL_ODD_WINDING	int
&&	O
_plotter	pointer
->	O
data	pointer
->	O
have_odd_winding_fill	int
==	O
0	int
)	O
drawstate	pointer
->	O
fill_rule_type	int
=	O
PL_FILL_NONZERO_WINDING	int
;	O
else	O
if	O
(	O
drawstate	pointer
->	O
fill_rule_type	int
==	O
PL_FILL_NONZERO_WINDING	int
&&	O
_plotter	pointer
->	O
data	pointer
->	O
have_nonzero_winding_fill	int
==	O
0	int
)	O
drawstate	pointer
->	O
fill_rule_type	int
=	O
PL_FILL_ODD_WINDING	int
;	O
}	O
drawstate	pointer
->	O
path	pointer
=	O
(	O
plPath	struct
*	O
)	O
NULL	O
;	O
drawstate	pointer
->	O
paths	pointer
=	O
(	O
plPath	struct
*	O
*	O
)	O
NULL	O
;	O
drawstate	pointer
->	O
num_paths	int
=	O
0	int
;	O
drawstate	pointer
->	O
previous	pointer
=	O
NULL	O
;	O
_plotter	pointer
->	O
drawstate	pointer
=	O
drawstate	pointer
;	O
}	O
