static	O
void	O
sb_check	function
(	O
sb	pointer
*	O
,	O
size_t	long
)	O
;	O
void	O
sb_build	function
(	O
sb	pointer
*	O
ptr	pointer
,	O
size_t	long
size	int
)	O
{	O
ptr	pointer
->	O
ptr	pointer
=	O
XNEWVEC	O
(	O
char	O
,	O
size	int
+	O
1	int
)	O
;	O
ptr	pointer
->	O
max	int
=	O
size	int
;	O
ptr	pointer
->	O
len	long
=	O
0	int
;	O
}	O
void	O
sb_new	function
(	O
sb	pointer
*	O
ptr	pointer
)	O
{	O
sb_build	function
(	O
ptr	pointer
,	O
INIT_ALLOC	O
)	O
;	O
}	O
void	O
sb_kill	function
(	O
sb	pointer
*	O
ptr	pointer
)	O
{	O
free	function
(	O
ptr	pointer
->	O
ptr	pointer
)	O
;	O
}	O
void	O
sb_add_sb	function
(	O
sb	pointer
*	O
ptr	pointer
,	O
sb	pointer
*	O
s	pointer
)	O
{	O
sb_check	function
(	O
ptr	pointer
,	O
s	pointer
->	O
len	long
)	O
;	O
memcpy	function
(	O
ptr	pointer
->	O
ptr	pointer
+	O
ptr	pointer
->	O
len	long
,	O
s	pointer
->	O
ptr	pointer
,	O
s	pointer
->	O
len	long
)	O
;	O
ptr	pointer
->	O
len	long
+=	O
s	pointer
->	O
len	long
;	O
}	O
static	O
sb	pointer
*	O
sb_to_scrub	pointer
;	O
static	O
char	O
*	O
scrub_position	pointer
;	O
static	O
size_t	long
scrub_from_sb	function
(	O
char	O
*	O
buf	pointer
,	O
size_t	long
buflen	long
)	O
{	O
size_t	long
copy	int
;	O
copy	int
=	O
sb_to_scrub	pointer
->	O
len	long
-	O
(	O
scrub_position	pointer
-	O
sb_to_scrub	pointer
->	O
ptr	pointer
)	O
;	O
if	O
(	O
copy	int
>	O
buflen	long
)	O
copy	int
=	O
buflen	long
;	O
memcpy	function
(	O
buf	pointer
,	O
scrub_position	pointer
,	O
copy	int
)	O
;	O
scrub_position	pointer
+=	O
copy	int
;	O
return	O
copy	int
;	O
}	O
void	O
sb_scrub_and_add_sb	function
(	O
sb	pointer
*	O
ptr	pointer
,	O
sb	pointer
*	O
s	pointer
)	O
{	O
sb_to_scrub	pointer
=	O
s	pointer
;	O
scrub_position	pointer
=	O
s	pointer
->	O
ptr	pointer
;	O
sb_check	function
(	O
ptr	pointer
,	O
s	pointer
->	O
len	long
)	O
;	O
ptr	pointer
->	O
len	long
+=	O
do_scrub_chars	function
(	O
scrub_from_sb	function
,	O
ptr	pointer
->	O
ptr	pointer
+	O
ptr	pointer
->	O
len	long
,	O
s	pointer
->	O
len	long
)	O
;	O
sb_to_scrub	pointer
=	O
0	int
;	O
scrub_position	pointer
=	O
0	int
;	O
}	O
static	O
void	O
sb_check	function
(	O
sb	pointer
*	O
ptr	pointer
,	O
size_t	long
len	long
)	O
{	O
size_t	long
want	long
=	O
ptr	pointer
->	O
len	long
+	O
len	long
;	O
if	O
(	O
want	long
>	O
ptr	pointer
->	O
max	int
)	O
{	O
size_t	long
max	int
;	O
want	long
+=	O
MALLOC_OVERHEAD	O
+	O
1	int
;	O
if	O
(	O
(	O
ssize_t	long
)	O
want	long
<	O
0	int
)	O
as_fatal	function
(	O
"string buffer overflow"	pointer
)	O
;	O
max	int
=	O
(	O
size_t	long
)	O
1	int
<<	O
(	O
CHAR_BIT	O
*	O
sizeof	O
(	O
want	long
)	O
-	O
(	O
sizeof	O
(	O
want	long
)	O
<=	O
sizeof	O
(	O
long	O
)	O
?	O
__builtin_clzl	O
(	O
(	O
long	O
)	O
want	long
)	O
:	O
__builtin_clzll	O
(	O
(	O
long	O
long	O
)	O
want	long
)	O
)	O
)	O
;	O
max	int
-=	O
MALLOC_OVERHEAD	O
+	O
1	int
;	O
ptr	pointer
->	O
max	int
=	O
max	int
;	O
ptr	pointer
->	O
ptr	pointer
=	O
XRESIZEVEC	O
(	O
char	O
,	O
ptr	pointer
->	O
ptr	pointer
,	O
max	int
+	O
1	int
)	O
;	O
}	O
}	O
void	O
sb_reset	function
(	O
sb	pointer
*	O
ptr	pointer
)	O
{	O
ptr	pointer
->	O
len	long
=	O
0	int
;	O
}	O
void	O
sb_add_char	function
(	O
sb	pointer
*	O
ptr	pointer
,	O
size_t	long
c	struct
)	O
{	O
sb_check	function
(	O
ptr	pointer
,	O
1	int
)	O
;	O
ptr	pointer
->	O
ptr	pointer
[	O
ptr	pointer
->	O
len	long
++	O
]	O
=	O
c	struct
;	O
}	O
void	O
sb_add_string	function
(	O
sb	pointer
*	O
ptr	pointer
,	O
const	O
char	O
*	O
s	pointer
)	O
{	O
size_t	long
len	long
=	O
strlen	function
(	O
s	pointer
)	O
;	O
sb_check	function
(	O
ptr	pointer
,	O
len	long
)	O
;	O
memcpy	function
(	O
ptr	pointer
->	O
ptr	pointer
+	O
ptr	pointer
->	O
len	long
,	O
s	pointer
,	O
len	long
)	O
;	O
ptr	pointer
->	O
len	long
+=	O
len	long
;	O
}	O
void	O
sb_add_buffer	function
(	O
sb	pointer
*	O
ptr	pointer
,	O
const	O
char	O
*	O
s	pointer
,	O
size_t	long
len	long
)	O
{	O
sb_check	function
(	O
ptr	pointer
,	O
len	long
)	O
;	O
memcpy	function
(	O
ptr	pointer
->	O
ptr	pointer
+	O
ptr	pointer
->	O
len	long
,	O
s	pointer
,	O
len	long
)	O
;	O
ptr	pointer
->	O
len	long
+=	O
len	long
;	O
}	O
char	O
*	O
sb_terminate	function
(	O
sb	pointer
*	O
in	pointer
)	O
{	O
in	pointer
->	O
ptr	pointer
[	O
in	pointer
->	O
len	long
]	O
=	O
0	int
;	O
return	O
in	pointer
->	O
ptr	pointer
;	O
}	O
size_t	long
sb_skip_white	function
(	O
size_t	long
idx	int
,	O
sb	pointer
*	O
ptr	pointer
)	O
{	O
while	O
(	O
idx	int
<	O
ptr	pointer
->	O
len	long
&&	O
(	O
ptr	pointer
->	O
ptr	pointer
[	O
idx	int
]	O
==	O
' '	O
||	O
ptr	pointer
->	O
ptr	pointer
[	O
idx	int
]	O
==	O
'\t'	O
)	O
)	O
idx	int
++	O
;	O
return	O
idx	int
;	O
}	O
size_t	long
sb_skip_comma	function
(	O
size_t	long
idx	int
,	O
sb	pointer
*	O
ptr	pointer
)	O
{	O
while	O
(	O
idx	int
<	O
ptr	pointer
->	O
len	long
&&	O
(	O
ptr	pointer
->	O
ptr	pointer
[	O
idx	int
]	O
==	O
' '	O
||	O
ptr	pointer
->	O
ptr	pointer
[	O
idx	int
]	O
==	O
'\t'	O
)	O
)	O
idx	int
++	O
;	O
if	O
(	O
idx	int
<	O
ptr	pointer
->	O
len	long
&&	O
ptr	pointer
->	O
ptr	pointer
[	O
idx	int
]	O
==	O
','	O
)	O
idx	int
++	O
;	O
while	O
(	O
idx	int
<	O
ptr	pointer
->	O
len	long
&&	O
(	O
ptr	pointer
->	O
ptr	pointer
[	O
idx	int
]	O
==	O
' '	O
||	O
ptr	pointer
->	O
ptr	pointer
[	O
idx	int
]	O
==	O
'\t'	O
)	O
)	O
idx	int
++	O
;	O
return	O
idx	int
;	O
}	O
