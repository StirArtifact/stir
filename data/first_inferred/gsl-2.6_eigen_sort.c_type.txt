static	O
int	O
complex_less	function
(	O
gsl_complex	struct
a	double
,	O
gsl_complex	struct
b	double
)	O
{	O
return	O
gsl_fcmp	function
(	O
GSL_REAL	O
(	O
a	double
)	O
,	O
GSL_REAL	O
(	O
b	double
)	O
,	O
GSL_DBL_EPSILON	int
)	O
==	O
0	int
?	O
GSL_IMAG	O
(	O
a	double
)	O
<	O
GSL_IMAG	O
(	O
b	double
)	O
:	O
GSL_REAL	O
(	O
a	double
)	O
<	O
GSL_REAL	O
(	O
b	double
)	O
;	O
}	O
int	O
gsl_eigen_symmv_sort	function
(	O
gsl_vector	struct
*	O
eval	pointer
,	O
gsl_matrix	struct
*	O
evec	pointer
,	O
gsl_eigen_sort_t	enum
sort_type	enum
)	O
{	O
if	O
(	O
evec	pointer
->	O
size1	long
!=	O
evec	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"eigenvector matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
eval	pointer
->	O
size	long
!=	O
evec	pointer
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"eigenvalues must match eigenvector matrix"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
const	O
size_t	long
N	int
=	O
eval	pointer
->	O
size	long
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
-	O
1	int
;	O
i	long
++	O
)	O
{	O
size_t	long
j	long
;	O
size_t	long
k	long
=	O
i	long
;	O
double	O
ek	double
=	O
gsl_vector_get	function
(	O
eval	pointer
,	O
i	long
)	O
;	O
for	O
(	O
j	long
=	O
i	long
+	O
1	int
;	O
j	long
<	O
N	int
;	O
j	long
++	O
)	O
{	O
int	O
test	int
;	O
const	O
double	O
ej	double
=	O
gsl_vector_get	function
(	O
eval	pointer
,	O
j	long
)	O
;	O
switch	O
(	O
sort_type	enum
)	O
{	O
case	O
GSL_EIGEN_SORT_VAL_ASC	int
:	O
test	int
=	O
(	O
ej	double
<	O
ek	double
)	O
;	O
break	O
;	O
case	O
GSL_EIGEN_SORT_VAL_DESC	int
:	O
test	int
=	O
(	O
ej	double
>	O
ek	double
)	O
;	O
break	O
;	O
case	O
GSL_EIGEN_SORT_ABS_ASC	int
:	O
test	int
=	O
(	O
fabs	function
(	O
ej	double
)	O
<	O
fabs	function
(	O
ek	double
)	O
)	O
;	O
break	O
;	O
case	O
GSL_EIGEN_SORT_ABS_DESC	int
:	O
test	int
=	O
(	O
fabs	function
(	O
ej	double
)	O
>	O
fabs	function
(	O
ek	double
)	O
)	O
;	O
break	O
;	O
default	O
:	O
GSL_ERROR	O
(	O
"unrecognized sort type"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
test	int
)	O
{	O
k	long
=	O
j	long
;	O
ek	double
=	O
ej	double
;	O
}	O
}	O
if	O
(	O
k	long
!=	O
i	long
)	O
{	O
gsl_vector_swap_elements	function
(	O
eval	pointer
,	O
i	long
,	O
k	long
)	O
;	O
gsl_matrix_swap_columns	function
(	O
evec	pointer
,	O
i	long
,	O
k	long
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_eigen_hermv_sort	function
(	O
gsl_vector	struct
*	O
eval	pointer
,	O
gsl_matrix_complex	struct
*	O
evec	pointer
,	O
gsl_eigen_sort_t	enum
sort_type	enum
)	O
{	O
if	O
(	O
evec	pointer
->	O
size1	long
!=	O
evec	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"eigenvector matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
eval	pointer
->	O
size	long
!=	O
evec	pointer
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"eigenvalues must match eigenvector matrix"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
const	O
size_t	long
N	int
=	O
eval	pointer
->	O
size	long
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
-	O
1	int
;	O
i	long
++	O
)	O
{	O
size_t	long
j	long
;	O
size_t	long
k	long
=	O
i	long
;	O
double	O
ek	double
=	O
gsl_vector_get	function
(	O
eval	pointer
,	O
i	long
)	O
;	O
for	O
(	O
j	long
=	O
i	long
+	O
1	int
;	O
j	long
<	O
N	int
;	O
j	long
++	O
)	O
{	O
int	O
test	int
;	O
const	O
double	O
ej	double
=	O
gsl_vector_get	function
(	O
eval	pointer
,	O
j	long
)	O
;	O
switch	O
(	O
sort_type	enum
)	O
{	O
case	O
GSL_EIGEN_SORT_VAL_ASC	int
:	O
test	int
=	O
(	O
ej	double
<	O
ek	double
)	O
;	O
break	O
;	O
case	O
GSL_EIGEN_SORT_VAL_DESC	int
:	O
test	int
=	O
(	O
ej	double
>	O
ek	double
)	O
;	O
break	O
;	O
case	O
GSL_EIGEN_SORT_ABS_ASC	int
:	O
test	int
=	O
(	O
fabs	function
(	O
ej	double
)	O
<	O
fabs	function
(	O
ek	double
)	O
)	O
;	O
break	O
;	O
case	O
GSL_EIGEN_SORT_ABS_DESC	int
:	O
test	int
=	O
(	O
fabs	function
(	O
ej	double
)	O
>	O
fabs	function
(	O
ek	double
)	O
)	O
;	O
break	O
;	O
default	O
:	O
GSL_ERROR	O
(	O
"unrecognized sort type"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
test	int
)	O
{	O
k	long
=	O
j	long
;	O
ek	double
=	O
ej	double
;	O
}	O
}	O
if	O
(	O
k	long
!=	O
i	long
)	O
{	O
gsl_vector_swap_elements	function
(	O
eval	pointer
,	O
i	long
,	O
k	long
)	O
;	O
gsl_matrix_complex_swap_columns	function
(	O
evec	pointer
,	O
i	long
,	O
k	long
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_eigen_nonsymmv_sort	function
(	O
gsl_vector_complex	struct
*	O
eval	pointer
,	O
gsl_matrix_complex	struct
*	O
evec	pointer
,	O
gsl_eigen_sort_t	enum
sort_type	enum
)	O
{	O
if	O
(	O
evec	pointer
&&	O
(	O
evec	pointer
->	O
size1	long
!=	O
evec	pointer
->	O
size2	long
)	O
)	O
{	O
GSL_ERROR	O
(	O
"eigenvector matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
evec	pointer
&&	O
(	O
eval	pointer
->	O
size	long
!=	O
evec	pointer
->	O
size1	long
)	O
)	O
{	O
GSL_ERROR	O
(	O
"eigenvalues must match eigenvector matrix"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
const	O
size_t	long
N	int
=	O
eval	pointer
->	O
size	long
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
-	O
1	int
;	O
i	long
++	O
)	O
{	O
size_t	long
j	long
;	O
size_t	long
k	long
=	O
i	long
;	O
gsl_complex	struct
ek	double
=	O
gsl_vector_complex_get	function
(	O
eval	pointer
,	O
i	long
)	O
;	O
for	O
(	O
j	long
=	O
i	long
+	O
1	int
;	O
j	long
<	O
N	int
;	O
j	long
++	O
)	O
{	O
int	O
test	int
;	O
const	O
gsl_complex	struct
ej	double
=	O
gsl_vector_complex_get	function
(	O
eval	pointer
,	O
j	long
)	O
;	O
switch	O
(	O
sort_type	enum
)	O
{	O
case	O
GSL_EIGEN_SORT_ABS_ASC	int
:	O
test	int
=	O
(	O
gsl_complex_abs	function
(	O
ej	double
)	O
<	O
gsl_complex_abs	function
(	O
ek	double
)	O
)	O
;	O
break	O
;	O
case	O
GSL_EIGEN_SORT_ABS_DESC	int
:	O
test	int
=	O
(	O
gsl_complex_abs	function
(	O
ej	double
)	O
>	O
gsl_complex_abs	function
(	O
ek	double
)	O
)	O
;	O
break	O
;	O
case	O
GSL_EIGEN_SORT_VAL_ASC	int
:	O
test	int
=	O
complex_less	function
(	O
ej	double
,	O
ek	double
)	O
;	O
break	O
;	O
case	O
GSL_EIGEN_SORT_VAL_DESC	int
:	O
test	int
=	O
complex_less	function
(	O
ek	double
,	O
ej	double
)	O
;	O
break	O
;	O
default	O
:	O
GSL_ERROR	O
(	O
"invalid sort type"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
test	int
)	O
{	O
k	long
=	O
j	long
;	O
ek	double
=	O
ej	double
;	O
}	O
}	O
if	O
(	O
k	long
!=	O
i	long
)	O
{	O
gsl_vector_complex_swap_elements	function
(	O
eval	pointer
,	O
i	long
,	O
k	long
)	O
;	O
if	O
(	O
evec	pointer
)	O
gsl_matrix_complex_swap_columns	function
(	O
evec	pointer
,	O
i	long
,	O
k	long
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_eigen_gensymmv_sort	function
(	O
gsl_vector	struct
*	O
eval	pointer
,	O
gsl_matrix	struct
*	O
evec	pointer
,	O
gsl_eigen_sort_t	enum
sort_type	enum
)	O
{	O
int	O
s	pointer
;	O
s	pointer
=	O
gsl_eigen_symmv_sort	function
(	O
eval	pointer
,	O
evec	pointer
,	O
sort_type	enum
)	O
;	O
return	O
s	pointer
;	O
}	O
int	O
gsl_eigen_genhermv_sort	function
(	O
gsl_vector	struct
*	O
eval	pointer
,	O
gsl_matrix_complex	struct
*	O
evec	pointer
,	O
gsl_eigen_sort_t	enum
sort_type	enum
)	O
{	O
int	O
s	pointer
;	O
s	pointer
=	O
gsl_eigen_hermv_sort	function
(	O
eval	pointer
,	O
evec	pointer
,	O
sort_type	enum
)	O
;	O
return	O
s	pointer
;	O
}	O
int	O
gsl_eigen_genv_sort	function
(	O
gsl_vector_complex	struct
*	O
alpha	long double
,	O
gsl_vector	struct
*	O
beta	long double
,	O
gsl_matrix_complex	struct
*	O
evec	pointer
,	O
gsl_eigen_sort_t	enum
sort_type	enum
)	O
{	O
if	O
(	O
evec	pointer
->	O
size1	long
!=	O
evec	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"eigenvector matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
alpha	long double
->	O
size	long
!=	O
evec	pointer
->	O
size1	long
||	O
beta	long double
->	O
size	long
!=	O
evec	pointer
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"eigenvalues must match eigenvector matrix"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
const	O
size_t	long
N	int
=	O
alpha	long double
->	O
size	long
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
-	O
1	int
;	O
i	long
++	O
)	O
{	O
size_t	long
j	long
;	O
size_t	long
k	long
=	O
i	long
;	O
gsl_complex	struct
ak	struct
=	O
gsl_vector_complex_get	function
(	O
alpha	long double
,	O
i	long
)	O
;	O
double	O
bk	double
=	O
gsl_vector_get	function
(	O
beta	long double
,	O
i	long
)	O
;	O
gsl_complex	struct
ek	double
;	O
if	O
(	O
bk	double
<	O
GSL_DBL_EPSILON	int
)	O
{	O
GSL_SET_COMPLEX	O
(	O
&	O
ek	double
,	O
GSL_SIGN	O
(	O
GSL_REAL	O
(	O
ak	struct
)	O
)	O
?	O
GSL_POSINF	O
:	O
GSL_NEGINF	O
,	O
GSL_SIGN	O
(	O
GSL_IMAG	O
(	O
ak	struct
)	O
)	O
?	O
GSL_POSINF	O
:	O
GSL_NEGINF	O
)	O
;	O
}	O
else	O
ek	double
=	O
gsl_complex_div_real	function
(	O
ak	struct
,	O
bk	double
)	O
;	O
for	O
(	O
j	long
=	O
i	long
+	O
1	int
;	O
j	long
<	O
N	int
;	O
j	long
++	O
)	O
{	O
int	O
test	int
;	O
const	O
gsl_complex	struct
aj	struct
=	O
gsl_vector_complex_get	function
(	O
alpha	long double
,	O
j	long
)	O
;	O
double	O
bj	double
=	O
gsl_vector_get	function
(	O
beta	long double
,	O
j	long
)	O
;	O
gsl_complex	struct
ej	double
;	O
if	O
(	O
bj	double
<	O
GSL_DBL_EPSILON	int
)	O
{	O
GSL_SET_COMPLEX	O
(	O
&	O
ej	double
,	O
GSL_SIGN	O
(	O
GSL_REAL	O
(	O
aj	struct
)	O
)	O
?	O
GSL_POSINF	O
:	O
GSL_NEGINF	O
,	O
GSL_SIGN	O
(	O
GSL_IMAG	O
(	O
aj	struct
)	O
)	O
?	O
GSL_POSINF	O
:	O
GSL_NEGINF	O
)	O
;	O
}	O
else	O
ej	double
=	O
gsl_complex_div_real	function
(	O
aj	struct
,	O
bj	double
)	O
;	O
switch	O
(	O
sort_type	enum
)	O
{	O
case	O
GSL_EIGEN_SORT_ABS_ASC	int
:	O
test	int
=	O
(	O
gsl_complex_abs	function
(	O
ej	double
)	O
<	O
gsl_complex_abs	function
(	O
ek	double
)	O
)	O
;	O
break	O
;	O
case	O
GSL_EIGEN_SORT_ABS_DESC	int
:	O
test	int
=	O
(	O
gsl_complex_abs	function
(	O
ej	double
)	O
>	O
gsl_complex_abs	function
(	O
ek	double
)	O
)	O
;	O
break	O
;	O
case	O
GSL_EIGEN_SORT_VAL_ASC	int
:	O
case	O
GSL_EIGEN_SORT_VAL_DESC	int
:	O
default	O
:	O
GSL_ERROR	O
(	O
"invalid sort type"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
test	int
)	O
{	O
k	long
=	O
j	long
;	O
ek	double
=	O
ej	double
;	O
}	O
}	O
if	O
(	O
k	long
!=	O
i	long
)	O
{	O
gsl_vector_complex_swap_elements	function
(	O
alpha	long double
,	O
i	long
,	O
k	long
)	O
;	O
gsl_vector_swap_elements	function
(	O
beta	long double
,	O
i	long
,	O
k	long
)	O
;	O
gsl_matrix_complex_swap_columns	function
(	O
evec	pointer
,	O
i	long
,	O
k	long
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
