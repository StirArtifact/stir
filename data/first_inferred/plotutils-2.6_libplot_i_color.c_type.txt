static	O
int	O
bit_depth	function
(	O
int	O
colors	int
)	O
;	O
void	O
_pl_i_set_pen_color	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
int	O
red_long	int
,	O
green_long	int
,	O
blue_long	int
;	O
int	O
red	int
,	O
green	int
,	O
blue	int
;	O
red_long	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
.	O
red	int
;	O
green_long	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
.	O
green	int
;	O
blue_long	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
.	O
blue	int
;	O
red	int
=	O
(	O
(	O
(	O
unsigned	O
int	O
)	O
red_long	int
)	O
>>	O
8	int
)	O
&	O
0xff	int
;	O
green	int
=	O
(	O
(	O
(	O
unsigned	O
int	O
)	O
green_long	int
)	O
>>	O
8	int
)	O
&	O
0xff	int
;	O
blue	int
=	O
(	O
(	O
(	O
unsigned	O
int	O
)	O
blue_long	int
)	O
>>	O
8	int
)	O
&	O
0xff	int
;	O
if	O
(	O
!	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_pen_color_status	enum
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_pen_color	struct
.	O
red	int
==	O
red	int
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_pen_color	struct
.	O
green	int
==	O
green	int
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_pen_color	struct
.	O
blue	int
==	O
blue	int
)	O
)	O
{	O
unsigned	O
char	O
index	function
;	O
index	function
=	O
_pl_i_new_color_index	function
(	O
R___	O
(	O
_plotter	pointer
)	O
red	int
,	O
green	int
,	O
blue	int
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_pen_color	struct
.	O
red	int
=	O
red	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_pen_color	struct
.	O
green	int
=	O
green	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_pen_color	struct
.	O
blue	int
=	O
blue	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_pen_color_index	char
=	O
index	function
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_pen_color_status	enum
=	O
true	int
;	O
}	O
}	O
void	O
_pl_i_set_fill_color	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
int	O
red_long	int
,	O
green_long	int
,	O
blue_long	int
;	O
int	O
red	int
,	O
green	int
,	O
blue	int
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_type	int
==	O
0	int
)	O
return	O
;	O
red_long	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fillcolor	struct
.	O
red	int
;	O
green_long	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fillcolor	struct
.	O
green	int
;	O
blue_long	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fillcolor	struct
.	O
blue	int
;	O
red	int
=	O
(	O
(	O
(	O
unsigned	O
int	O
)	O
red_long	int
)	O
>>	O
8	int
)	O
&	O
0xff	int
;	O
green	int
=	O
(	O
(	O
(	O
unsigned	O
int	O
)	O
green_long	int
)	O
>>	O
8	int
)	O
&	O
0xff	int
;	O
blue	int
=	O
(	O
(	O
(	O
unsigned	O
int	O
)	O
blue_long	int
)	O
>>	O
8	int
)	O
&	O
0xff	int
;	O
if	O
(	O
!	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_fill_color_status	enum
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_fill_color	struct
.	O
red	int
==	O
red	int
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_fill_color	struct
.	O
green	int
==	O
green	int
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_fill_color	struct
.	O
blue	int
==	O
blue	int
)	O
)	O
{	O
unsigned	O
char	O
index	function
;	O
index	function
=	O
_pl_i_new_color_index	function
(	O
R___	O
(	O
_plotter	pointer
)	O
red	int
,	O
green	int
,	O
blue	int
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_fill_color	struct
.	O
red	int
=	O
red	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_fill_color	struct
.	O
green	int
=	O
green	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_fill_color	struct
.	O
blue	int
=	O
blue	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_fill_color_index	char
=	O
index	function
;	O
}	O
}	O
void	O
_pl_i_set_bg_color	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
int	O
red_long	int
,	O
green_long	int
,	O
blue_long	int
;	O
int	O
red	int
,	O
green	int
,	O
blue	int
;	O
red_long	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
bgcolor	struct
.	O
red	int
;	O
green_long	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
bgcolor	struct
.	O
green	int
;	O
blue_long	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
bgcolor	struct
.	O
blue	int
;	O
red	int
=	O
(	O
(	O
(	O
unsigned	O
int	O
)	O
red_long	int
)	O
>>	O
8	int
)	O
&	O
0xff	int
;	O
green	int
=	O
(	O
(	O
(	O
unsigned	O
int	O
)	O
green_long	int
)	O
>>	O
8	int
)	O
&	O
0xff	int
;	O
blue	int
=	O
(	O
(	O
(	O
unsigned	O
int	O
)	O
blue_long	int
)	O
>>	O
8	int
)	O
&	O
0xff	int
;	O
if	O
(	O
!	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_bg_color_status	enum
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_bg_color	struct
.	O
red	int
==	O
red	int
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_bg_color	struct
.	O
green	int
==	O
green	int
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_bg_color	struct
.	O
blue	int
==	O
blue	int
)	O
)	O
{	O
unsigned	O
char	O
index	function
;	O
index	function
=	O
_pl_i_new_color_index	function
(	O
R___	O
(	O
_plotter	pointer
)	O
red	int
,	O
green	int
,	O
blue	int
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_bg_color	struct
.	O
red	int
=	O
red	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_bg_color	struct
.	O
green	int
=	O
green	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_bg_color	struct
.	O
blue	int
=	O
blue	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_bg_color_index	char
=	O
index	function
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_bg_color_status	enum
=	O
true	int
;	O
}	O
}	O
unsigned	O
char	O
_pl_i_new_color_index	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
int	O
red	int
,	O
int	O
green	int
,	O
int	O
blue	int
)	O
{	O
int	O
i	int
,	O
j	int
;	O
int	O
sqdist	int
;	O
bool	enum
found	enum
=	O
false	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
_plotter	pointer
->	O
i_num_color_indices	int
;	O
i	int
++	O
)	O
if	O
(	O
_plotter	pointer
->	O
i_colormap	array
[	O
i	int
]	O
.	O
red	int
==	O
red	int
&&	O
_plotter	pointer
->	O
i_colormap	array
[	O
i	int
]	O
.	O
green	int
==	O
green	int
&&	O
_plotter	pointer
->	O
i_colormap	array
[	O
i	int
]	O
.	O
blue	int
==	O
blue	int
)	O
{	O
found	enum
=	O
true	int
;	O
break	O
;	O
}	O
if	O
(	O
found	enum
)	O
return	O
(	O
unsigned	O
char	O
)	O
i	int
;	O
i	int
=	O
_plotter	pointer
->	O
i_num_color_indices	int
;	O
if	O
(	O
i	int
<	O
256	int
)	O
{	O
_plotter	pointer
->	O
i_colormap	array
[	O
i	int
]	O
.	O
red	int
=	O
red	int
;	O
_plotter	pointer
->	O
i_colormap	array
[	O
i	int
]	O
.	O
green	int
=	O
green	int
;	O
_plotter	pointer
->	O
i_colormap	array
[	O
i	int
]	O
.	O
blue	int
=	O
blue	int
;	O
_plotter	pointer
->	O
i_num_color_indices	int
=	O
i	int
+	O
1	int
;	O
_plotter	pointer
->	O
i_bit_depth	int
=	O
bit_depth	function
(	O
i	int
+	O
1	int
)	O
;	O
return	O
(	O
unsigned	O
char	O
)	O
i	int
;	O
}	O
sqdist	int
=	O
INT_MAX	O
;	O
i	int
=	O
0	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
256	int
;	O
j	int
++	O
)	O
{	O
int	O
new_sqdist	int
;	O
int	O
a_red	int
,	O
a_green	int
,	O
a_blue	int
;	O
a_red	int
=	O
_plotter	pointer
->	O
i_colormap	array
[	O
j	int
]	O
.	O
red	int
;	O
a_green	int
=	O
_plotter	pointer
->	O
i_colormap	array
[	O
j	int
]	O
.	O
green	int
;	O
a_blue	int
=	O
_plotter	pointer
->	O
i_colormap	array
[	O
j	int
]	O
.	O
blue	int
;	O
new_sqdist	int
=	O
(	O
(	O
a_red	int
-	O
red	int
)	O
*	O
(	O
a_red	int
-	O
red	int
)	O
+	O
(	O
a_green	int
-	O
green	int
)	O
*	O
(	O
a_green	int
-	O
green	int
)	O
+	O
(	O
a_blue	int
-	O
blue	int
)	O
*	O
(	O
a_blue	int
-	O
blue	int
)	O
)	O
;	O
if	O
(	O
new_sqdist	int
<=	O
sqdist	int
)	O
{	O
sqdist	int
=	O
new_sqdist	int
;	O
i	int
=	O
j	int
;	O
}	O
}	O
return	O
(	O
unsigned	O
char	O
)	O
i	int
;	O
}	O
static	O
int	O
bit_depth	function
(	O
int	O
colors	int
)	O
{	O
int	O
size	double
;	O
unsigned	O
int	O
ucolors	int
;	O
size	double
=	O
0	int
;	O
for	O
(	O
ucolors	int
=	O
colors	int
-	O
1	int
;	O
ucolors	int
;	O
ucolors	int
=	O
ucolors	int
>>	O
1	int
)	O
size	double
++	O
;	O
return	O
size	double
;	O
}	O
