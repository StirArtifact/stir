struct	O
arglist_parser	struct
*	O
arglist_parser_alloc	function
(	O
message_list_ty	struct
*	O
mlp	pointer
,	O
const	O
struct	O
callshapes	struct
*	O
shapes	array
)	O
{	O
if	O
(	O
shapes	array
==	O
NULL	O
||	O
shapes	array
->	O
nshapes	long
==	O
0	int
)	O
{	O
struct	O
arglist_parser	struct
*	O
ap	pointer
=	O
(	O
struct	O
arglist_parser	struct
*	O
)	O
xmalloc	function
(	O
offsetof	O
(	O
struct	O
arglist_parser	struct
,	O
alternative	pointer
[	O
0	int
]	O
)	O
)	O
;	O
ap	pointer
->	O
mlp	pointer
=	O
mlp	pointer
;	O
ap	pointer
->	O
keyword	pointer
=	O
NULL	O
;	O
ap	pointer
->	O
keyword_len	long
=	O
0	int
;	O
ap	pointer
->	O
next_is_msgctxt	bool
=	O
false	int
;	O
ap	pointer
->	O
nalternatives	long
=	O
0	int
;	O
return	O
ap	pointer
;	O
}	O
else	O
{	O
struct	O
arglist_parser	struct
*	O
ap	pointer
=	O
(	O
struct	O
arglist_parser	struct
*	O
)	O
xmalloc	function
(	O
xsum	function
(	O
sizeof	O
(	O
struct	O
arglist_parser	struct
)	O
,	O
xtimes	O
(	O
shapes	array
->	O
nshapes	long
-	O
1	int
,	O
sizeof	O
(	O
struct	O
partial_call	struct
)	O
)	O
)	O
)	O
;	O
size_t	long
i	long
;	O
ap	pointer
->	O
mlp	pointer
=	O
mlp	pointer
;	O
ap	pointer
->	O
keyword	pointer
=	O
shapes	array
->	O
keyword	pointer
;	O
ap	pointer
->	O
keyword_len	long
=	O
shapes	array
->	O
keyword_len	long
;	O
ap	pointer
->	O
next_is_msgctxt	bool
=	O
false	int
;	O
ap	pointer
->	O
nalternatives	long
=	O
shapes	array
->	O
nshapes	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
shapes	array
->	O
nshapes	long
;	O
i	long
++	O
)	O
{	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
argnumc	int
=	O
shapes	array
->	O
shapes	array
[	O
i	long
]	O
.	O
argnumc	int
;	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
argnum1	int
=	O
shapes	array
->	O
shapes	array
[	O
i	long
]	O
.	O
argnum1	int
;	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
argnum2	int
=	O
shapes	array
->	O
shapes	array
[	O
i	long
]	O
.	O
argnum2	int
;	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
argnum1_glib_context	bool
=	O
shapes	array
->	O
shapes	array
[	O
i	long
]	O
.	O
argnum1_glib_context	bool
;	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
argnum2_glib_context	bool
=	O
shapes	array
->	O
shapes	array
[	O
i	long
]	O
.	O
argnum2_glib_context	bool
;	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
argtotal	int
=	O
shapes	array
->	O
shapes	array
[	O
i	long
]	O
.	O
argtotal	int
;	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
xcomments	struct
=	O
shapes	array
->	O
shapes	array
[	O
i	long
]	O
.	O
xcomments	struct
;	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgctxt	pointer
=	O
NULL	O
;	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgctxt_pos	struct
.	O
file_name	pointer
=	O
NULL	O
;	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgctxt_pos	struct
.	O
line_number	long
=	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
;	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgid	pointer
=	O
NULL	O
;	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgid_context	struct
=	O
null_context	struct
;	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgid_pos	struct
.	O
file_name	pointer
=	O
NULL	O
;	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgid_pos	struct
.	O
line_number	long
=	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
;	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgid_comment	pointer
=	O
NULL	O
;	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgid_comment_is_utf8	bool
=	O
false	int
;	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgid_plural	pointer
=	O
NULL	O
;	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgid_plural_context	struct
=	O
null_context	struct
;	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgid_plural_pos	struct
.	O
file_name	pointer
=	O
NULL	O
;	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgid_plural_pos	struct
.	O
line_number	long
=	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
;	O
}	O
return	O
ap	pointer
;	O
}	O
}	O
struct	O
arglist_parser	struct
*	O
arglist_parser_clone	function
(	O
struct	O
arglist_parser	struct
*	O
ap	pointer
)	O
{	O
struct	O
arglist_parser	struct
*	O
copy	pointer
=	O
(	O
struct	O
arglist_parser	struct
*	O
)	O
xmalloc	function
(	O
xsum	function
(	O
sizeof	O
(	O
struct	O
arglist_parser	struct
)	O
-	O
sizeof	O
(	O
struct	O
partial_call	struct
)	O
,	O
xtimes	O
(	O
ap	pointer
->	O
nalternatives	long
,	O
sizeof	O
(	O
struct	O
partial_call	struct
)	O
)	O
)	O
)	O
;	O
size_t	long
i	long
;	O
copy	pointer
->	O
mlp	pointer
=	O
ap	pointer
->	O
mlp	pointer
;	O
copy	pointer
->	O
keyword	pointer
=	O
ap	pointer
->	O
keyword	pointer
;	O
copy	pointer
->	O
keyword_len	long
=	O
ap	pointer
->	O
keyword_len	long
;	O
copy	pointer
->	O
next_is_msgctxt	bool
=	O
ap	pointer
->	O
next_is_msgctxt	bool
;	O
copy	pointer
->	O
nalternatives	long
=	O
ap	pointer
->	O
nalternatives	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ap	pointer
->	O
nalternatives	long
;	O
i	long
++	O
)	O
{	O
const	O
struct	O
partial_call	struct
*	O
cp	pointer
=	O
&	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
;	O
struct	O
partial_call	struct
*	O
ccp	pointer
=	O
&	O
copy	pointer
->	O
alternative	pointer
[	O
i	long
]	O
;	O
ccp	pointer
->	O
argnumc	int
=	O
cp	pointer
->	O
argnumc	int
;	O
ccp	pointer
->	O
argnum1	int
=	O
cp	pointer
->	O
argnum1	int
;	O
ccp	pointer
->	O
argnum2	int
=	O
cp	pointer
->	O
argnum2	int
;	O
ccp	pointer
->	O
argnum1_glib_context	bool
=	O
cp	pointer
->	O
argnum1_glib_context	bool
;	O
ccp	pointer
->	O
argnum2_glib_context	bool
=	O
cp	pointer
->	O
argnum2_glib_context	bool
;	O
ccp	pointer
->	O
argtotal	int
=	O
cp	pointer
->	O
argtotal	int
;	O
ccp	pointer
->	O
xcomments	struct
=	O
cp	pointer
->	O
xcomments	struct
;	O
ccp	pointer
->	O
msgctxt	pointer
=	O
(	O
cp	pointer
->	O
msgctxt	pointer
!=	O
NULL	O
?	O
mixed_string_clone	function
(	O
cp	pointer
->	O
msgctxt	pointer
)	O
:	O
NULL	O
)	O
;	O
ccp	pointer
->	O
msgctxt_pos	struct
=	O
cp	pointer
->	O
msgctxt_pos	struct
;	O
ccp	pointer
->	O
msgid	pointer
=	O
(	O
cp	pointer
->	O
msgid	pointer
!=	O
NULL	O
?	O
mixed_string_clone	function
(	O
cp	pointer
->	O
msgid	pointer
)	O
:	O
NULL	O
)	O
;	O
ccp	pointer
->	O
msgid_context	struct
=	O
cp	pointer
->	O
msgid_context	struct
;	O
ccp	pointer
->	O
msgid_pos	struct
=	O
cp	pointer
->	O
msgctxt_pos	struct
;	O
ccp	pointer
->	O
msgid_comment	pointer
=	O
add_reference	function
(	O
cp	pointer
->	O
msgid_comment	pointer
)	O
;	O
ccp	pointer
->	O
msgid_comment_is_utf8	bool
=	O
cp	pointer
->	O
msgid_comment_is_utf8	bool
;	O
ccp	pointer
->	O
msgid_plural	pointer
=	O
(	O
cp	pointer
->	O
msgid_plural	pointer
!=	O
NULL	O
?	O
mixed_string_clone	function
(	O
cp	pointer
->	O
msgid_plural	pointer
)	O
:	O
NULL	O
)	O
;	O
ccp	pointer
->	O
msgid_plural_context	struct
=	O
cp	pointer
->	O
msgid_plural_context	struct
;	O
ccp	pointer
->	O
msgid_plural_pos	struct
=	O
cp	pointer
->	O
msgid_plural_pos	struct
;	O
}	O
return	O
copy	pointer
;	O
}	O
void	O
arglist_parser_remember	function
(	O
struct	O
arglist_parser	struct
*	O
ap	pointer
,	O
int	O
argnum	int
,	O
mixed_string_ty	struct
*	O
string	pointer
,	O
flag_context_ty	struct
context	struct
,	O
char	O
*	O
file_name	pointer
,	O
size_t	long
line_number	long
,	O
refcounted_string_list_ty	struct
*	O
comment	pointer
,	O
bool	bool
comment_is_utf8	bool
)	O
{	O
bool	bool
stored_string	bool
=	O
false	int
;	O
size_t	long
nalternatives	long
=	O
ap	pointer
->	O
nalternatives	long
;	O
size_t	long
i	long
;	O
if	O
(	O
!	O
(	O
argnum	int
>	O
0	int
)	O
)	O
abort	function
(	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nalternatives	long
;	O
i	long
++	O
)	O
{	O
struct	O
partial_call	struct
*	O
cp	pointer
=	O
&	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
;	O
if	O
(	O
argnum	int
==	O
cp	pointer
->	O
argnumc	int
)	O
{	O
cp	pointer
->	O
msgctxt	pointer
=	O
string	pointer
;	O
cp	pointer
->	O
msgctxt_pos	struct
.	O
file_name	pointer
=	O
file_name	pointer
;	O
cp	pointer
->	O
msgctxt_pos	struct
.	O
line_number	long
=	O
line_number	long
;	O
stored_string	bool
=	O
true	int
;	O
cp	pointer
->	O
argnumc	int
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
argnum	int
==	O
cp	pointer
->	O
argnum1	int
)	O
{	O
cp	pointer
->	O
msgid	pointer
=	O
string	pointer
;	O
cp	pointer
->	O
msgid_context	struct
=	O
context	struct
;	O
cp	pointer
->	O
msgid_pos	struct
.	O
file_name	pointer
=	O
file_name	pointer
;	O
cp	pointer
->	O
msgid_pos	struct
.	O
line_number	long
=	O
line_number	long
;	O
cp	pointer
->	O
msgid_comment	pointer
=	O
add_reference	function
(	O
comment	pointer
)	O
;	O
cp	pointer
->	O
msgid_comment_is_utf8	bool
=	O
comment_is_utf8	bool
;	O
stored_string	bool
=	O
true	int
;	O
cp	pointer
->	O
argnum1	int
=	O
0	int
;	O
}	O
if	O
(	O
argnum	int
==	O
cp	pointer
->	O
argnum2	int
)	O
{	O
cp	pointer
->	O
msgid_plural	pointer
=	O
string	pointer
;	O
cp	pointer
->	O
msgid_plural_context	struct
=	O
context	struct
;	O
cp	pointer
->	O
msgid_plural_pos	struct
.	O
file_name	pointer
=	O
file_name	pointer
;	O
cp	pointer
->	O
msgid_plural_pos	struct
.	O
line_number	long
=	O
line_number	long
;	O
stored_string	bool
=	O
true	int
;	O
cp	pointer
->	O
argnum2	int
=	O
0	int
;	O
}	O
}	O
}	O
if	O
(	O
!	O
stored_string	bool
)	O
mixed_string_free	function
(	O
string	pointer
)	O
;	O
}	O
void	O
arglist_parser_remember_msgctxt	function
(	O
struct	O
arglist_parser	struct
*	O
ap	pointer
,	O
mixed_string_ty	struct
*	O
string	pointer
,	O
flag_context_ty	struct
context	struct
,	O
char	O
*	O
file_name	pointer
,	O
size_t	long
line_number	long
)	O
{	O
bool	bool
stored_string	bool
=	O
false	int
;	O
size_t	long
nalternatives	long
=	O
ap	pointer
->	O
nalternatives	long
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nalternatives	long
;	O
i	long
++	O
)	O
{	O
struct	O
partial_call	struct
*	O
cp	pointer
=	O
&	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
;	O
cp	pointer
->	O
msgctxt	pointer
=	O
string	pointer
;	O
cp	pointer
->	O
msgctxt_pos	struct
.	O
file_name	pointer
=	O
file_name	pointer
;	O
cp	pointer
->	O
msgctxt_pos	struct
.	O
line_number	long
=	O
line_number	long
;	O
stored_string	bool
=	O
true	int
;	O
cp	pointer
->	O
argnumc	int
=	O
0	int
;	O
}	O
if	O
(	O
!	O
stored_string	bool
)	O
mixed_string_free	function
(	O
string	pointer
)	O
;	O
}	O
bool	bool
arglist_parser_decidedp	function
(	O
struct	O
arglist_parser	struct
*	O
ap	pointer
,	O
int	O
argnum	int
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ap	pointer
->	O
nalternatives	long
;	O
i	long
++	O
)	O
{	O
struct	O
partial_call	struct
*	O
cp	pointer
=	O
&	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
;	O
if	O
(	O
!	O
(	O
(	O
cp	pointer
->	O
argnumc	int
<=	O
argnum	int
&&	O
cp	pointer
->	O
argnum1	int
<=	O
argnum	int
&&	O
cp	pointer
->	O
argnum2	int
<=	O
argnum	int
)	O
||	O
(	O
cp	pointer
->	O
argtotal	int
>	O
0	int
&&	O
cp	pointer
->	O
argtotal	int
<	O
argnum	int
)	O
)	O
)	O
return	O
false	int
;	O
}	O
return	O
true	int
;	O
}	O
void	O
arglist_parser_done	function
(	O
struct	O
arglist_parser	struct
*	O
ap	pointer
,	O
int	O
argnum	int
)	O
{	O
size_t	long
ncomplete	long
;	O
size_t	long
i	long
;	O
ncomplete	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ap	pointer
->	O
nalternatives	long
;	O
i	long
++	O
)	O
{	O
struct	O
partial_call	struct
*	O
cp	pointer
=	O
&	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
;	O
if	O
(	O
cp	pointer
->	O
argnumc	int
==	O
0	int
&&	O
cp	pointer
->	O
argnum1	int
==	O
0	int
&&	O
cp	pointer
->	O
argnum2	int
==	O
0	int
&&	O
(	O
cp	pointer
->	O
argtotal	int
==	O
0	int
||	O
cp	pointer
->	O
argtotal	int
==	O
argnum	int
)	O
)	O
ncomplete	long
++	O
;	O
}	O
if	O
(	O
ncomplete	long
>	O
0	int
)	O
{	O
struct	O
partial_call	struct
*	O
best_cp	pointer
=	O
NULL	O
;	O
bool	bool
ambiguous	bool
=	O
false	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ap	pointer
->	O
nalternatives	long
;	O
i	long
++	O
)	O
{	O
struct	O
partial_call	struct
*	O
cp	pointer
=	O
&	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
;	O
if	O
(	O
cp	pointer
->	O
argnumc	int
==	O
0	int
&&	O
cp	pointer
->	O
argnum1	int
==	O
0	int
&&	O
cp	pointer
->	O
argnum2	int
==	O
0	int
&&	O
(	O
cp	pointer
->	O
argtotal	int
==	O
0	int
||	O
cp	pointer
->	O
argtotal	int
==	O
argnum	int
)	O
&&	O
cp	pointer
->	O
msgctxt	pointer
!=	O
NULL	O
&&	O
cp	pointer
->	O
msgid	pointer
!=	O
NULL	O
&&	O
cp	pointer
->	O
msgid_plural	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
best_cp	pointer
!=	O
NULL	O
)	O
{	O
ambiguous	bool
=	O
true	int
;	O
break	O
;	O
}	O
best_cp	pointer
=	O
cp	pointer
;	O
}	O
}	O
if	O
(	O
best_cp	pointer
==	O
NULL	O
)	O
{	O
struct	O
partial_call	struct
*	O
best_cp1	pointer
=	O
NULL	O
;	O
struct	O
partial_call	struct
*	O
best_cp2	pointer
=	O
NULL	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ap	pointer
->	O
nalternatives	long
;	O
i	long
++	O
)	O
{	O
struct	O
partial_call	struct
*	O
cp	pointer
=	O
&	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
;	O
if	O
(	O
cp	pointer
->	O
argnumc	int
==	O
0	int
&&	O
cp	pointer
->	O
argnum1	int
==	O
0	int
&&	O
cp	pointer
->	O
argnum2	int
==	O
0	int
&&	O
(	O
cp	pointer
->	O
argtotal	int
==	O
0	int
||	O
cp	pointer
->	O
argtotal	int
==	O
argnum	int
)	O
&&	O
cp	pointer
->	O
msgctxt	pointer
!=	O
NULL	O
&&	O
cp	pointer
->	O
msgid	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
best_cp1	pointer
!=	O
NULL	O
)	O
{	O
ambiguous	bool
=	O
true	int
;	O
break	O
;	O
}	O
best_cp1	pointer
=	O
cp	pointer
;	O
}	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ap	pointer
->	O
nalternatives	long
;	O
i	long
++	O
)	O
{	O
struct	O
partial_call	struct
*	O
cp	pointer
=	O
&	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
;	O
if	O
(	O
cp	pointer
->	O
argnumc	int
==	O
0	int
&&	O
cp	pointer
->	O
argnum1	int
==	O
0	int
&&	O
cp	pointer
->	O
argnum2	int
==	O
0	int
&&	O
(	O
cp	pointer
->	O
argtotal	int
==	O
0	int
||	O
cp	pointer
->	O
argtotal	int
==	O
argnum	int
)	O
&&	O
cp	pointer
->	O
msgid	pointer
!=	O
NULL	O
&&	O
cp	pointer
->	O
msgid_plural	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
best_cp2	pointer
!=	O
NULL	O
)	O
{	O
ambiguous	bool
=	O
true	int
;	O
break	O
;	O
}	O
best_cp2	pointer
=	O
cp	pointer
;	O
}	O
}	O
if	O
(	O
best_cp1	pointer
!=	O
NULL	O
)	O
best_cp	pointer
=	O
best_cp1	pointer
;	O
if	O
(	O
best_cp2	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
best_cp	pointer
!=	O
NULL	O
)	O
ambiguous	bool
=	O
true	int
;	O
else	O
best_cp	pointer
=	O
best_cp2	pointer
;	O
}	O
}	O
if	O
(	O
best_cp	pointer
==	O
NULL	O
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ap	pointer
->	O
nalternatives	long
;	O
i	long
++	O
)	O
{	O
struct	O
partial_call	struct
*	O
cp	pointer
=	O
&	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
;	O
if	O
(	O
cp	pointer
->	O
argnumc	int
==	O
0	int
&&	O
cp	pointer
->	O
argnum1	int
==	O
0	int
&&	O
cp	pointer
->	O
argnum2	int
==	O
0	int
&&	O
(	O
cp	pointer
->	O
argtotal	int
==	O
0	int
||	O
cp	pointer
->	O
argtotal	int
==	O
argnum	int
)	O
&&	O
cp	pointer
->	O
msgid	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
best_cp	pointer
!=	O
NULL	O
)	O
{	O
ambiguous	bool
=	O
true	int
;	O
break	O
;	O
}	O
best_cp	pointer
=	O
cp	pointer
;	O
}	O
}	O
}	O
if	O
(	O
ambiguous	bool
)	O
{	O
error_with_progname	bool
=	O
false	int
;	O
error_at_line	function
(	O
0	int
,	O
0	int
,	O
best_cp	pointer
->	O
msgid_pos	struct
.	O
file_name	pointer
,	O
best_cp	pointer
->	O
msgid_pos	struct
.	O
line_number	long
,	O
_	O
(	O
"ambiguous argument specification for keyword '%.*s'"	pointer
)	O
,	O
(	O
int	O
)	O
ap	pointer
->	O
keyword_len	long
,	O
ap	pointer
->	O
keyword	pointer
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
}	O
if	O
(	O
best_cp	pointer
!=	O
NULL	O
)	O
{	O
flag_context_ty	struct
msgid_context	struct
;	O
flag_context_ty	struct
msgid_plural_context	struct
;	O
char	O
*	O
best_msgctxt	pointer
;	O
char	O
*	O
best_msgid	pointer
;	O
char	O
*	O
best_msgid_plural	pointer
;	O
message_ty	struct
*	O
mp	pointer
;	O
msgid_context	struct
=	O
best_cp	pointer
->	O
msgid_context	struct
;	O
msgid_plural_context	struct
=	O
best_cp	pointer
->	O
msgid_plural_context	struct
;	O
if	O
(	O
recognize_qt_formatstrings	function
(	O
)	O
&&	O
best_cp	pointer
->	O
msgid_plural	pointer
==	O
best_cp	pointer
->	O
msgid	pointer
)	O
{	O
msgid_context	struct
.	O
is_format3	int
=	O
yes_according_to_context	int
;	O
msgid_plural_context	struct
.	O
is_format3	int
=	O
yes_according_to_context	int
;	O
}	O
best_msgctxt	pointer
=	O
(	O
best_cp	pointer
->	O
msgctxt	pointer
!=	O
NULL	O
?	O
mixed_string_contents_free1	function
(	O
best_cp	pointer
->	O
msgctxt	pointer
)	O
:	O
NULL	O
)	O
;	O
best_msgid	pointer
=	O
(	O
best_cp	pointer
->	O
msgid	pointer
!=	O
NULL	O
?	O
mixed_string_contents_free1	function
(	O
best_cp	pointer
->	O
msgid	pointer
)	O
:	O
NULL	O
)	O
;	O
best_msgid_plural	pointer
=	O
(	O
best_cp	pointer
->	O
msgid_plural	pointer
!=	O
NULL	O
?	O
(	O
best_cp	pointer
->	O
msgid_plural	pointer
==	O
best_cp	pointer
->	O
msgid	pointer
?	O
xstrdup	function
(	O
best_msgid	pointer
)	O
:	O
mixed_string_contents_free1	function
(	O
best_cp	pointer
->	O
msgid_plural	pointer
)	O
)	O
:	O
NULL	O
)	O
;	O
if	O
(	O
best_cp	pointer
->	O
argnum1_glib_context	bool
||	O
best_cp	pointer
->	O
argnum2_glib_context	bool
)	O
if	O
(	O
best_msgctxt	pointer
!=	O
NULL	O
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
best_cp	pointer
->	O
argnum1_glib_context	bool
)	O
{	O
const	O
char	O
*	O
separator	pointer
=	O
strchr	function
(	O
best_msgid	pointer
,	O
'|'	O
)	O
;	O
if	O
(	O
separator	pointer
==	O
NULL	O
)	O
{	O
error_with_progname	bool
=	O
false	int
;	O
error_at_line	function
(	O
0	int
,	O
0	int
,	O
best_cp	pointer
->	O
msgid_pos	struct
.	O
file_name	pointer
,	O
best_cp	pointer
->	O
msgid_pos	struct
.	O
line_number	long
,	O
_	O
(	O
"warning: missing context for keyword '%.*s'"	pointer
)	O
,	O
(	O
int	O
)	O
ap	pointer
->	O
keyword_len	long
,	O
ap	pointer
->	O
keyword	pointer
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
}	O
else	O
{	O
size_t	long
ctxt_len	long
=	O
separator	pointer
-	O
best_msgid	pointer
;	O
char	O
*	O
ctxt	pointer
=	O
XNMALLOC	O
(	O
ctxt_len	long
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	function
(	O
ctxt	pointer
,	O
best_msgid	pointer
,	O
ctxt_len	long
)	O
;	O
ctxt	pointer
[	O
ctxt_len	long
]	O
=	O
'\0'	O
;	O
best_msgctxt	pointer
=	O
ctxt	pointer
;	O
best_msgid	pointer
=	O
xstrdup	function
(	O
separator	pointer
+	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
best_msgid_plural	pointer
!=	O
NULL	O
&&	O
best_cp	pointer
->	O
argnum2_glib_context	bool
)	O
{	O
const	O
char	O
*	O
separator	pointer
=	O
strchr	function
(	O
best_msgid_plural	pointer
,	O
'|'	O
)	O
;	O
if	O
(	O
separator	pointer
==	O
NULL	O
)	O
{	O
error_with_progname	bool
=	O
false	int
;	O
error_at_line	function
(	O
0	int
,	O
0	int
,	O
best_cp	pointer
->	O
msgid_plural_pos	struct
.	O
file_name	pointer
,	O
best_cp	pointer
->	O
msgid_plural_pos	struct
.	O
line_number	long
,	O
_	O
(	O
"warning: missing context for plural argument of keyword '%.*s'"	pointer
)	O
,	O
(	O
int	O
)	O
ap	pointer
->	O
keyword_len	long
,	O
ap	pointer
->	O
keyword	pointer
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
}	O
else	O
{	O
size_t	long
ctxt_len	long
=	O
separator	pointer
-	O
best_msgid_plural	pointer
;	O
char	O
*	O
ctxt	pointer
=	O
XNMALLOC	O
(	O
ctxt_len	long
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	function
(	O
ctxt	pointer
,	O
best_msgid_plural	pointer
,	O
ctxt_len	long
)	O
;	O
ctxt	pointer
[	O
ctxt_len	long
]	O
=	O
'\0'	O
;	O
if	O
(	O
best_msgctxt	pointer
==	O
NULL	O
)	O
best_msgctxt	pointer
=	O
ctxt	pointer
;	O
else	O
{	O
if	O
(	O
strcmp	function
(	O
ctxt	pointer
,	O
best_msgctxt	pointer
)	O
!=	O
0	int
)	O
{	O
error_with_progname	bool
=	O
false	int
;	O
error_at_line	function
(	O
0	int
,	O
0	int
,	O
best_cp	pointer
->	O
msgid_plural_pos	struct
.	O
file_name	pointer
,	O
best_cp	pointer
->	O
msgid_plural_pos	struct
.	O
line_number	long
,	O
_	O
(	O
"context mismatch between singular and plural form"	pointer
)	O
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
}	O
free	function
(	O
ctxt	pointer
)	O
;	O
}	O
best_msgid_plural	pointer
=	O
xstrdup	function
(	O
separator	pointer
+	O
1	int
)	O
;	O
}	O
}	O
mp	pointer
=	O
remember_a_message	function
(	O
ap	pointer
->	O
mlp	pointer
,	O
best_msgctxt	pointer
,	O
best_msgid	pointer
,	O
true	int
,	O
msgid_context	struct
,	O
&	O
best_cp	pointer
->	O
msgid_pos	struct
,	O
NULL	O
,	O
best_cp	pointer
->	O
msgid_comment	pointer
,	O
best_cp	pointer
->	O
msgid_comment_is_utf8	bool
)	O
;	O
if	O
(	O
mp	pointer
!=	O
NULL	O
&&	O
best_msgid_plural	pointer
!=	O
NULL	O
)	O
remember_a_message_plural	function
(	O
mp	pointer
,	O
best_msgid_plural	pointer
,	O
true	int
,	O
msgid_plural_context	struct
,	O
&	O
best_cp	pointer
->	O
msgid_plural_pos	struct
,	O
NULL	O
,	O
false	int
)	O
;	O
if	O
(	O
best_cp	pointer
->	O
xcomments	struct
.	O
nitems	long
>	O
0	int
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
best_cp	pointer
->	O
xcomments	struct
.	O
nitems	long
;	O
i	long
++	O
)	O
{	O
const	O
char	O
*	O
xcomment	pointer
=	O
best_cp	pointer
->	O
xcomments	struct
.	O
item	pointer
[	O
i	long
]	O
;	O
bool	bool
found	bool
=	O
false	int
;	O
if	O
(	O
mp	pointer
!=	O
NULL	O
&&	O
mp	pointer
->	O
comment_dot	pointer
!=	O
NULL	O
)	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mp	pointer
->	O
comment_dot	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
if	O
(	O
strcmp	function
(	O
xcomment	pointer
,	O
mp	pointer
->	O
comment_dot	pointer
->	O
item	pointer
[	O
j	long
]	O
)	O
==	O
0	int
)	O
{	O
found	bool
=	O
true	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
!	O
found	bool
)	O
message_comment_dot_append	function
(	O
mp	pointer
,	O
xcomment	pointer
)	O
;	O
}	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
ap	pointer
->	O
nalternatives	long
==	O
1	int
)	O
{	O
if	O
(	O
ap	pointer
->	O
alternative	pointer
[	O
0	int
]	O
.	O
msgctxt	pointer
!=	O
NULL	O
)	O
free	function
(	O
ap	pointer
->	O
alternative	pointer
[	O
0	int
]	O
.	O
msgctxt	pointer
)	O
;	O
if	O
(	O
ap	pointer
->	O
alternative	pointer
[	O
0	int
]	O
.	O
msgid	pointer
!=	O
NULL	O
)	O
free	function
(	O
ap	pointer
->	O
alternative	pointer
[	O
0	int
]	O
.	O
msgid	pointer
)	O
;	O
if	O
(	O
ap	pointer
->	O
alternative	pointer
[	O
0	int
]	O
.	O
msgid_plural	pointer
!=	O
NULL	O
)	O
free	function
(	O
ap	pointer
->	O
alternative	pointer
[	O
0	int
]	O
.	O
msgid_plural	pointer
)	O
;	O
}	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ap	pointer
->	O
nalternatives	long
;	O
i	long
++	O
)	O
drop_reference	function
(	O
ap	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgid_comment	pointer
)	O
;	O
free	function
(	O
ap	pointer
)	O
;	O
}	O
