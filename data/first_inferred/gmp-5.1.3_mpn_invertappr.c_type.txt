static	O
mp_limb_t	long
mpn_bc_invertappr	function
(	O
mp_ptr	pointer
ip	pointer
,	O
mp_srcptr	pointer
dp	pointer
,	O
mp_size_t	long
n	long
,	O
mp_ptr	pointer
tp	pointer
)	O
{	O
mp_ptr	pointer
xp	pointer
;	O
ASSERT	O
(	O
n	long
>	O
0	int
)	O
;	O
ASSERT	O
(	O
dp	pointer
[	O
n	long
-	O
1	int
]	O
&	O
GMP_NUMB_HIGHBIT	O
)	O
;	O
ASSERT	O
(	O
!	O
MPN_OVERLAP_P	O
(	O
ip	pointer
,	O
n	long
,	O
dp	pointer
,	O
n	long
)	O
)	O
;	O
ASSERT	O
(	O
!	O
MPN_OVERLAP_P	O
(	O
ip	pointer
,	O
n	long
,	O
tp	pointer
,	O
mpn_invertappr_itch	O
(	O
n	long
)	O
)	O
)	O
;	O
ASSERT	O
(	O
!	O
MPN_OVERLAP_P	O
(	O
dp	pointer
,	O
n	long
,	O
tp	pointer
,	O
mpn_invertappr_itch	O
(	O
n	long
)	O
)	O
)	O
;	O
if	O
(	O
n	long
==	O
1	int
)	O
invert_limb	O
(	O
*	O
ip	pointer
,	O
*	O
dp	pointer
)	O
;	O
else	O
{	O
mp_size_t	long
i	long
;	O
xp	pointer
=	O
tp	pointer
+	O
n	long
+	O
2	int
;	O
for	O
(	O
i	long
=	O
n	long
-	O
1	int
;	O
i	long
>=	O
0	int
;	O
i	long
--	O
)	O
xp	pointer
[	O
i	long
]	O
=	O
GMP_NUMB_MAX	O
;	O
mpn_com	O
(	O
xp	pointer
+	O
n	long
,	O
dp	pointer
,	O
n	long
)	O
;	O
if	O
(	O
n	long
==	O
2	int
)	O
{	O
mpn_divrem_2	O
(	O
ip	pointer
,	O
0	int
,	O
xp	pointer
,	O
4	int
,	O
dp	pointer
)	O
;	O
}	O
else	O
{	O
gmp_pi1_t	struct
inv	struct
;	O
invert_pi1	O
(	O
inv	struct
,	O
dp	pointer
[	O
n	long
-	O
1	int
]	O
,	O
dp	pointer
[	O
n	long
-	O
2	int
]	O
)	O
;	O
if	O
(	O
!	O
MAYBE_dcpi1_divappr	O
||	O
BELOW_THRESHOLD	O
(	O
n	long
,	O
DC_DIVAPPR_Q_THRESHOLD	int
)	O
)	O
mpn_sbpi1_divappr_q	O
(	O
ip	pointer
,	O
xp	pointer
,	O
2	int
*	O
n	long
,	O
dp	pointer
,	O
n	long
,	O
inv	struct
.	O
inv32	long
)	O
;	O
else	O
mpn_dcpi1_divappr_q	O
(	O
ip	pointer
,	O
xp	pointer
,	O
2	int
*	O
n	long
,	O
dp	pointer
,	O
n	long
,	O
&	O
inv	struct
)	O
;	O
MPN_DECR_U	O
(	O
ip	pointer
,	O
n	long
,	O
1	int
)	O
;	O
return	O
1	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
mp_limb_t	long
mpn_ni_invertappr	O
(	O
mp_ptr	pointer
ip	pointer
,	O
mp_srcptr	pointer
dp	pointer
,	O
mp_size_t	long
n	long
,	O
mp_ptr	pointer
scratch	pointer
)	O
{	O
mp_limb_t	long
cy	long
;	O
mp_ptr	pointer
xp	pointer
;	O
mp_size_t	long
rn	long
,	O
mn	long
;	O
mp_size_t	long
sizes	array
[	O
NPOWS	O
]	O
,	O
*	O
sizp	pointer
;	O
mp_ptr	pointer
tp	pointer
;	O
TMP_DECL	O
;	O
ASSERT	O
(	O
n	long
>	O
2	int
)	O
;	O
ASSERT	O
(	O
dp	pointer
[	O
n	long
-	O
1	int
]	O
&	O
GMP_NUMB_HIGHBIT	O
)	O
;	O
ASSERT	O
(	O
!	O
MPN_OVERLAP_P	O
(	O
ip	pointer
,	O
n	long
,	O
dp	pointer
,	O
n	long
)	O
)	O
;	O
ASSERT	O
(	O
!	O
MPN_OVERLAP_P	O
(	O
ip	pointer
,	O
n	long
,	O
scratch	pointer
,	O
mpn_invertappr_itch	O
(	O
n	long
)	O
)	O
)	O
;	O
ASSERT	O
(	O
!	O
MPN_OVERLAP_P	O
(	O
dp	pointer
,	O
n	long
,	O
scratch	pointer
,	O
mpn_invertappr_itch	O
(	O
n	long
)	O
)	O
)	O
;	O
sizp	pointer
=	O
sizes	array
;	O
rn	long
=	O
n	long
;	O
do	O
{	O
*	O
sizp	pointer
=	O
rn	long
;	O
rn	long
=	O
(	O
(	O
rn	long
)	O
>>	O
1	int
)	O
+	O
1	int
;	O
sizp	pointer
++	O
;	O
}	O
while	O
(	O
ABOVE_THRESHOLD	O
(	O
rn	long
,	O
INV_NEWTON_THRESHOLD	int
)	O
)	O
;	O
dp	pointer
+=	O
n	long
;	O
ip	pointer
+=	O
n	long
;	O
mpn_bc_invertappr	function
(	O
ip	pointer
-	O
rn	long
,	O
dp	pointer
-	O
rn	long
,	O
rn	long
,	O
scratch	pointer
)	O
;	O
TMP_MARK	O
;	O
if	O
(	O
ABOVE_THRESHOLD	O
(	O
n	long
,	O
INV_MULMOD_BNM1_THRESHOLD	int
)	O
)	O
{	O
mn	long
=	O
mpn_mulmod_bnm1_next_size	O
(	O
n	long
+	O
1	int
)	O
;	O
tp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
mpn_mulmod_bnm1_itch	function
(	O
mn	long
,	O
n	long
,	O
(	O
n	long
>>	O
1	int
)	O
+	O
1	int
)	O
)	O
;	O
}	O
xp	pointer
=	O
scratch	pointer
+	O
n	long
+	O
3	int
;	O
while	O
(	O
1	int
)	O
{	O
mp_limb_t	long
method	long
;	O
n	long
=	O
*	O
--	O
sizp	pointer
;	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
n	long
,	O
INV_MULMOD_BNM1_THRESHOLD	int
)	O
||	O
(	O
(	O
mn	long
=	O
mpn_mulmod_bnm1_next_size	O
(	O
n	long
+	O
1	int
)	O
)	O
>	O
(	O
n	long
+	O
rn	long
)	O
)	O
)	O
{	O
mpn_mul	O
(	O
xp	pointer
,	O
dp	pointer
-	O
n	long
,	O
n	long
,	O
ip	pointer
-	O
rn	long
,	O
rn	long
)	O
;	O
mpn_add_n	O
(	O
xp	pointer
+	O
rn	long
,	O
xp	pointer
+	O
rn	long
,	O
dp	pointer
-	O
n	long
,	O
n	long
-	O
rn	long
+	O
1	int
)	O
;	O
method	long
=	O
1	int
;	O
}	O
else	O
{	O
mpn_mulmod_bnm1	O
(	O
xp	pointer
,	O
mn	long
,	O
dp	pointer
-	O
n	long
,	O
n	long
,	O
ip	pointer
-	O
rn	long
,	O
rn	long
,	O
tp	pointer
)	O
;	O
ASSERT	O
(	O
n	long
>=	O
mn	long
-	O
rn	long
)	O
;	O
xp	pointer
[	O
mn	long
]	O
=	O
1	int
+	O
mpn_add_n	O
(	O
xp	pointer
+	O
rn	long
,	O
xp	pointer
+	O
rn	long
,	O
dp	pointer
-	O
n	long
,	O
mn	long
-	O
rn	long
)	O
;	O
cy	long
=	O
mpn_add_n	O
(	O
xp	pointer
,	O
xp	pointer
,	O
dp	pointer
-	O
(	O
n	long
-	O
(	O
mn	long
-	O
rn	long
)	O
)	O
,	O
n	long
-	O
(	O
mn	long
-	O
rn	long
)	O
)	O
;	O
MPN_INCR_U	O
(	O
xp	pointer
+	O
n	long
-	O
(	O
mn	long
-	O
rn	long
)	O
,	O
mn	long
+	O
1	int
-	O
n	long
+	O
(	O
mn	long
-	O
rn	long
)	O
,	O
cy	long
)	O
;	O
ASSERT	O
(	O
n	long
+	O
rn	long
>=	O
mn	long
)	O
;	O
MPN_DECR_U	O
(	O
xp	pointer
+	O
rn	long
+	O
n	long
-	O
mn	long
,	O
2	int
*	O
mn	long
+	O
1	int
-	O
rn	long
-	O
n	long
,	O
1	int
)	O
;	O
if	O
(	O
xp	pointer
[	O
mn	long
]	O
)	O
MPN_INCR_U	O
(	O
xp	pointer
,	O
mn	long
,	O
xp	pointer
[	O
mn	long
]	O
-	O
1	int
)	O
;	O
else	O
MPN_DECR_U	O
(	O
xp	pointer
,	O
mn	long
,	O
1	int
)	O
;	O
method	long
=	O
0	int
;	O
}	O
if	O
(	O
xp	pointer
[	O
n	long
]	O
<	O
2	int
)	O
{	O
cy	long
=	O
1	int
;	O
while	O
(	O
xp	pointer
[	O
n	long
]	O
||	O
mpn_cmp	O
(	O
xp	pointer
,	O
dp	pointer
-	O
n	long
,	O
n	long
)	O
>	O
0	int
)	O
{	O
xp	pointer
[	O
n	long
]	O
-=	O
mpn_sub_n	O
(	O
xp	pointer
,	O
xp	pointer
,	O
dp	pointer
-	O
n	long
,	O
n	long
)	O
;	O
cy	long
++	O
;	O
}	O
MPN_DECR_U	O
(	O
ip	pointer
-	O
rn	long
,	O
rn	long
,	O
cy	long
)	O
;	O
ASSERT	O
(	O
cy	long
<=	O
4	int
)	O
;	O
ASSERT_NOCARRY	O
(	O
mpn_sub_n	O
(	O
xp	pointer
,	O
dp	pointer
-	O
n	long
,	O
xp	pointer
,	O
n	long
)	O
)	O
;	O
ASSERT	O
(	O
xp	pointer
[	O
n	long
]	O
==	O
0	int
)	O
;	O
}	O
else	O
{	O
mpn_com	O
(	O
xp	pointer
,	O
xp	pointer
,	O
n	long
+	O
1	int
)	O
;	O
MPN_INCR_U	O
(	O
xp	pointer
,	O
n	long
+	O
1	int
,	O
method	long
)	O
;	O
ASSERT	O
(	O
xp	pointer
[	O
n	long
]	O
<=	O
1	int
)	O
;	O
if	O
(	O
xp	pointer
[	O
n	long
]	O
)	O
{	O
MPN_INCR_U	O
(	O
ip	pointer
-	O
rn	long
,	O
rn	long
,	O
1	int
)	O
;	O
ASSERT_CARRY	O
(	O
mpn_sub_n	O
(	O
xp	pointer
,	O
xp	pointer
,	O
dp	pointer
-	O
n	long
,	O
n	long
)	O
)	O
;	O
}	O
}	O
mpn_mul_n	O
(	O
rp	O
,	O
xp	pointer
+	O
n	long
-	O
rn	long
,	O
ip	pointer
-	O
rn	long
,	O
rn	long
)	O
;	O
cy	long
=	O
mpn_add_n	O
(	O
rp	O
+	O
rn	long
,	O
rp	O
+	O
rn	long
,	O
xp	pointer
+	O
n	long
-	O
rn	long
,	O
2	int
*	O
rn	long
-	O
n	long
)	O
;	O
cy	long
=	O
mpn_add_nc	O
(	O
ip	pointer
-	O
n	long
,	O
rp	O
+	O
3	int
*	O
rn	long
-	O
n	long
,	O
xp	pointer
+	O
rn	long
,	O
n	long
-	O
rn	long
,	O
cy	long
)	O
;	O
MPN_INCR_U	O
(	O
ip	pointer
-	O
rn	long
,	O
rn	long
,	O
cy	long
+	O
(	O
1	int
-	O
USE_MUL_N	int
)	O
*	O
(	O
rp	O
[	O
2	int
*	O
rn	long
]	O
+	O
xp	pointer
[	O
n	long
]	O
)	O
)	O
;	O
if	O
(	O
sizp	pointer
==	O
sizes	array
)	O
{	O
cy	long
=	O
rp	O
[	O
3	int
*	O
rn	long
-	O
n	long
-	O
1	int
]	O
>	O
GMP_NUMB_MAX	O
-	O
7	int
;	O
break	O
;	O
}	O
rn	long
=	O
n	long
;	O
}	O
TMP_FREE	O
;	O
return	O
cy	long
;	O
}	O
mp_limb_t	long
mpn_invertappr	O
(	O
mp_ptr	pointer
ip	pointer
,	O
mp_srcptr	pointer
dp	pointer
,	O
mp_size_t	long
n	long
,	O
mp_ptr	pointer
scratch	pointer
)	O
{	O
mp_limb_t	long
res	long
;	O
TMP_DECL	O
;	O
TMP_MARK	O
;	O
if	O
(	O
scratch	pointer
==	O
NULL	O
)	O
scratch	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
mpn_invertappr_itch	O
(	O
n	long
)	O
)	O
;	O
ASSERT	O
(	O
n	long
>	O
0	int
)	O
;	O
ASSERT	O
(	O
dp	pointer
[	O
n	long
-	O
1	int
]	O
&	O
GMP_NUMB_HIGHBIT	O
)	O
;	O
ASSERT	O
(	O
!	O
MPN_OVERLAP_P	O
(	O
ip	pointer
,	O
n	long
,	O
dp	pointer
,	O
n	long
)	O
)	O
;	O
ASSERT	O
(	O
!	O
MPN_OVERLAP_P	O
(	O
ip	pointer
,	O
n	long
,	O
scratch	pointer
,	O
mpn_invertappr_itch	O
(	O
n	long
)	O
)	O
)	O
;	O
ASSERT	O
(	O
!	O
MPN_OVERLAP_P	O
(	O
dp	pointer
,	O
n	long
,	O
scratch	pointer
,	O
mpn_invertappr_itch	O
(	O
n	long
)	O
)	O
)	O
;	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
n	long
,	O
INV_NEWTON_THRESHOLD	int
)	O
)	O
res	long
=	O
mpn_bc_invertappr	function
(	O
ip	pointer
,	O
dp	pointer
,	O
n	long
,	O
scratch	pointer
)	O
;	O
else	O
res	long
=	O
mpn_ni_invertappr	O
(	O
ip	pointer
,	O
dp	pointer
,	O
n	long
,	O
scratch	pointer
)	O
;	O
TMP_FREE	O
;	O
return	O
res	long
;	O
}	O
