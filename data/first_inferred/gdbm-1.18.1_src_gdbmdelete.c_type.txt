int	O
gdbm_delete	function
(	O
GDBM_FILE	pointer
dbf	pointer
,	O
datum	struct
key	struct
)	O
{	O
int	O
elem_loc	int
;	O
int	O
last_loc	int
;	O
int	O
home	int
;	O
bucket_element	struct
elem	struct
;	O
off_t	long
free_adr	long
;	O
int	O
free_size	int
;	O
GDBM_ASSERT_CONSISTENCY	O
(	O
dbf	pointer
,	O
-	O
1	int
)	O
;	O
if	O
(	O
dbf	pointer
->	O
read_write	int
==	O
GDBM_READER	int
)	O
{	O
GDBM_SET_ERRNO	O
(	O
dbf	pointer
,	O
GDBM_READER_CANT_DELETE	int
,	O
FALSE	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
gdbm_set_errno	function
(	O
dbf	pointer
,	O
GDBM_NO_ERROR	int
,	O
FALSE	int
)	O
;	O
elem_loc	int
=	O
_gdbm_findkey	function
(	O
dbf	pointer
,	O
key	struct
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
elem_loc	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
elem	struct
=	O
dbf	pointer
->	O
bucket	pointer
->	O
h_table	array
[	O
elem_loc	int
]	O
;	O
dbf	pointer
->	O
bucket	pointer
->	O
h_table	array
[	O
elem_loc	int
]	O
.	O
hash_value	int
=	O
-	O
1	int
;	O
dbf	pointer
->	O
bucket	pointer
->	O
count	int
--	O
;	O
last_loc	int
=	O
elem_loc	int
;	O
elem_loc	int
=	O
(	O
elem_loc	int
+	O
1	int
)	O
%	O
dbf	pointer
->	O
header	pointer
->	O
bucket_elems	int
;	O
while	O
(	O
elem_loc	int
!=	O
last_loc	int
&&	O
dbf	pointer
->	O
bucket	pointer
->	O
h_table	array
[	O
elem_loc	int
]	O
.	O
hash_value	int
!=	O
-	O
1	int
)	O
{	O
home	int
=	O
dbf	pointer
->	O
bucket	pointer
->	O
h_table	array
[	O
elem_loc	int
]	O
.	O
hash_value	int
%	O
dbf	pointer
->	O
header	pointer
->	O
bucket_elems	int
;	O
if	O
(	O
(	O
last_loc	int
<	O
elem_loc	int
&&	O
(	O
home	int
<=	O
last_loc	int
||	O
home	int
>	O
elem_loc	int
)	O
)	O
||	O
(	O
last_loc	int
>	O
elem_loc	int
&&	O
home	int
<=	O
last_loc	int
&&	O
home	int
>	O
elem_loc	int
)	O
)	O
{	O
dbf	pointer
->	O
bucket	pointer
->	O
h_table	array
[	O
last_loc	int
]	O
=	O
dbf	pointer
->	O
bucket	pointer
->	O
h_table	array
[	O
elem_loc	int
]	O
;	O
dbf	pointer
->	O
bucket	pointer
->	O
h_table	array
[	O
elem_loc	int
]	O
.	O
hash_value	int
=	O
-	O
1	int
;	O
last_loc	int
=	O
elem_loc	int
;	O
}	O
elem_loc	int
=	O
(	O
elem_loc	int
+	O
1	int
)	O
%	O
dbf	pointer
->	O
header	pointer
->	O
bucket_elems	int
;	O
}	O
free_adr	long
=	O
elem	struct
.	O
data_pointer	long
;	O
free_size	int
=	O
elem	struct
.	O
key_size	int
+	O
elem	struct
.	O
data_size	int
;	O
if	O
(	O
_gdbm_free	function
(	O
dbf	pointer
,	O
free_adr	long
,	O
free_size	int
)	O
)	O
return	O
-	O
1	int
;	O
dbf	pointer
->	O
bucket_changed	int
=	O
TRUE	int
;	O
dbf	pointer
->	O
cache_entry	pointer
->	O
ca_data	struct
.	O
hash_val	int
=	O
-	O
1	int
;	O
dbf	pointer
->	O
cache_entry	pointer
->	O
ca_data	struct
.	O
key_size	int
=	O
0	int
;	O
dbf	pointer
->	O
cache_entry	pointer
->	O
ca_data	struct
.	O
elem_loc	int
=	O
-	O
1	int
;	O
return	O
_gdbm_end_update	function
(	O
dbf	pointer
)	O
;	O
}	O
