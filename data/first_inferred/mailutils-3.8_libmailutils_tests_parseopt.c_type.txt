char	O
*	O
file_name	pointer
;	O
char	O
*	O
opt_value	pointer
=	O
"initial"	pointer
;	O
char	O
*	O
find_value	pointer
;	O
int	O
jobs	int
=	O
0	int
;	O
int	O
x_option	int
;	O
int	O
a_option	int
;	O
int	O
headers_option	int
=	O
1	int
;	O
int	O
d_option	int
;	O
int	O
debug_level_value	int
;	O
char	O
*	O
debug_info_value	pointer
;	O
struct	O
mu_option	struct
group_a	array
[	O
]	O
=	O
{	O
MU_OPTION_GROUP	O
(	O
"Group A"	pointer
)	O
,	O
{	O
"file"	pointer
,	O
'f'	O
,	O
"FILE"	pointer
,	O
MU_OPTION_DEFAULT	int
,	O
"set file name"	pointer
,	O
mu_c_string	int
,	O
&	O
file_name	pointer
}	O
,	O
{	O
"optional"	pointer
,	O
'o'	O
,	O
"FILE"	pointer
,	O
MU_OPTION_ARG_OPTIONAL	int
,	O
"optional argument"	pointer
,	O
mu_c_string	int
,	O
&	O
opt_value	pointer
}	O
,	O
{	O
NULL	O
,	O
'x'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
"short-only option"	pointer
,	O
mu_c_incr	int
,	O
&	O
x_option	int
}	O
,	O
{	O
"all"	pointer
,	O
'a'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
"no arguments to this one"	pointer
,	O
mu_c_bool	int
,	O
&	O
a_option	int
}	O
,	O
{	O
"debug-all"	pointer
,	O
0	int
,	O
NULL	O
,	O
MU_OPTION_ALIAS	int
}	O
,	O
{	O
"headers"	pointer
,	O
0	int
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
"show headers"	pointer
,	O
mu_c_bool	int
,	O
&	O
headers_option	int
}	O
,	O
MU_OPTION_END	O
}	O
;	O
struct	O
mu_option	struct
group_b	array
[	O
]	O
=	O
{	O
MU_OPTION_GROUP	O
(	O
"Group B"	pointer
)	O
,	O
{	O
"debug"	pointer
,	O
'd'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
"another option"	pointer
,	O
mu_c_incr	int
,	O
&	O
d_option	int
}	O
,	O
{	O
"verbose"	pointer
,	O
'v'	O
,	O
NULL	O
,	O
MU_OPTION_ALIAS	int
}	O
,	O
{	O
"find"	pointer
,	O
'F'	O
,	O
"VALUE"	pointer
,	O
MU_OPTION_DEFAULT	int
,	O
"find VALUE"	pointer
,	O
mu_c_string	int
,	O
&	O
find_value	pointer
}	O
,	O
{	O
"jobs"	pointer
,	O
'j'	O
,	O
"N"	pointer
,	O
MU_OPTION_DEFAULT	int
,	O
"sets numeric value"	pointer
,	O
mu_c_int	int
,	O
&	O
jobs	int
}	O
,	O
MU_OPTION_END	O
}	O
;	O
struct	O
mu_option	struct
group_c	array
[	O
]	O
=	O
{	O
MU_OPTION_GROUP	O
(	O
"Group C"	pointer
)	O
,	O
{	O
"debug-level"	pointer
,	O
0	int
,	O
"NUM"	pointer
,	O
MU_OPTION_DEFAULT	int
,	O
"debug level option"	pointer
,	O
mu_c_int	int
,	O
&	O
debug_level_value	int
}	O
,	O
{	O
"debug-info"	pointer
,	O
0	int
,	O
"S"	pointer
,	O
MU_OPTION_DEFAULT	int
,	O
"debug information"	pointer
,	O
mu_c_string	int
,	O
&	O
debug_info_value	pointer
}	O
,	O
MU_OPTION_END	O
}	O
;	O
struct	O
mu_option	struct
*	O
optv	pointer
[	O
]	O
=	O
{	O
group_a	array
,	O
group_b	array
,	O
group_c	array
,	O
NULL	O
}	O
;	O
static	O
void	O
version_hook	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
mu_stream_t	pointer
str	pointer
)	O
{	O
mu_stream_printf	function
(	O
str	pointer
,	O
"version hook called\n"	pointer
)	O
;	O
}	O
struct	O
parseopt_param	struct
{	O
char	O
*	O
name	pointer
;	O
int	O
flag	int
;	O
mu_c_type_t	enum
type	int
;	O
size_t	long
off	long
;	O
void	O
(	O
*	O
setfn	pointer
)	O
(	O
struct	O
parseopt_param	struct
*	O
param	pointer
,	O
char	O
const	O
*	O
val	pointer
,	O
void	O
*	O
target	pointer
)	O
;	O
}	O
;	O
static	O
void	O
set_prog_args	function
(	O
struct	O
parseopt_param	struct
*	O
param	pointer
,	O
char	O
const	O
*	O
str	pointer
,	O
void	O
*	O
target	pointer
)	O
{	O
char	O
*	O
*	O
*	O
args_ptr	pointer
=	O
target	pointer
;	O
char	O
*	O
*	O
args	pointer
;	O
char	O
*	O
p	pointer
;	O
size_t	long
size	long
,	O
i	long
;	O
size	long
=	O
1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
str	pointer
[	O
i	long
]	O
;	O
i	long
++	O
)	O
if	O
(	O
str	pointer
[	O
i	long
]	O
==	O
'|'	O
)	O
size	long
++	O
;	O
args	pointer
=	O
mu_calloc	function
(	O
size	long
+	O
1	int
,	O
sizeof	O
(	O
args	pointer
[	O
0	int
]	O
)	O
)	O
;	O
i	long
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
size_t	long
len	long
=	O
strcspn	function
(	O
str	pointer
,	O
"|"	pointer
)	O
;	O
p	pointer
=	O
mu_alloc	function
(	O
len	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
p	pointer
,	O
str	pointer
,	O
len	long
)	O
;	O
p	pointer
[	O
len	long
]	O
=	O
0	int
;	O
args	pointer
[	O
i	long
++	O
]	O
=	O
p	pointer
;	O
str	pointer
+=	O
len	long
;	O
if	O
(	O
str	pointer
[	O
0	int
]	O
)	O
++	O
str	pointer
;	O
else	O
break	O
;	O
}	O
args	pointer
[	O
i	long
]	O
=	O
NULL	O
;	O
*	O
args_ptr	pointer
=	O
args	pointer
;	O
}	O
static	O
struct	O
parseopt_param	struct
parseopt_param	struct
[	O
]	O
=	O
{	O
{	O
"MU_PARSEOPT_ARGV0"	pointer
,	O
MU_PARSEOPT_ARGV0	int
,	O
mu_c_void	int
}	O
,	O
{	O
"MU_PARSEOPT_IGNORE_ERRORS"	pointer
,	O
MU_PARSEOPT_IGNORE_ERRORS	int
,	O
mu_c_void	int
}	O
,	O
{	O
"MU_PARSEOPT_IN_ORDER"	pointer
,	O
MU_PARSEOPT_IN_ORDER	int
,	O
mu_c_void	int
}	O
,	O
{	O
"MU_PARSEOPT_NO_STDOPT"	pointer
,	O
MU_PARSEOPT_NO_STDOPT	int
,	O
mu_c_void	int
}	O
,	O
{	O
"MU_PARSEOPT_NO_ERREXIT"	pointer
,	O
MU_PARSEOPT_NO_ERREXIT	int
,	O
mu_c_void	int
}	O
,	O
{	O
"MU_PARSEOPT_IMMEDIATE"	pointer
,	O
MU_PARSEOPT_IMMEDIATE	int
,	O
mu_c_void	int
}	O
,	O
{	O
"MU_PARSEOPT_NO_SORT"	pointer
,	O
MU_PARSEOPT_NO_SORT	int
,	O
mu_c_void	int
}	O
,	O
{	O
"MU_PARSEOPT_PROG_NAME"	pointer
,	O
MU_PARSEOPT_PROG_NAME	int
,	O
mu_c_string	int
,	O
mu_offsetof	O
(	O
struct	O
mu_parseopt	struct
,	O
po_prog_name	pointer
)	O
}	O
,	O
{	O
"MU_PARSEOPT_PROG_DOC"	pointer
,	O
MU_PARSEOPT_PROG_DOC	int
,	O
mu_c_string	int
,	O
mu_offsetof	O
(	O
struct	O
mu_parseopt	struct
,	O
po_prog_doc	pointer
)	O
}	O
,	O
{	O
"MU_PARSEOPT_PROG_ARGS"	pointer
,	O
MU_PARSEOPT_PROG_ARGS	int
,	O
mu_c_string	int
,	O
mu_offsetof	O
(	O
struct	O
mu_parseopt	struct
,	O
po_prog_args	pointer
)	O
,	O
set_prog_args	function
}	O
,	O
{	O
"MU_PARSEOPT_BUG_ADDRESS"	pointer
,	O
MU_PARSEOPT_BUG_ADDRESS	int
,	O
mu_c_string	int
,	O
mu_offsetof	O
(	O
struct	O
mu_parseopt	struct
,	O
po_bug_address	pointer
)	O
}	O
,	O
{	O
"MU_PARSEOPT_PACKAGE_NAME"	pointer
,	O
MU_PARSEOPT_PACKAGE_NAME	int
,	O
mu_c_string	int
,	O
mu_offsetof	O
(	O
struct	O
mu_parseopt	struct
,	O
po_package_name	pointer
)	O
}	O
,	O
{	O
"MU_PARSEOPT_PACKAGE_URL"	pointer
,	O
MU_PARSEOPT_PACKAGE_URL	int
,	O
mu_c_string	int
,	O
mu_offsetof	O
(	O
struct	O
mu_parseopt	struct
,	O
po_package_url	pointer
)	O
}	O
,	O
{	O
"MU_PARSEOPT_EXTRA_INFO"	pointer
,	O
MU_PARSEOPT_EXTRA_INFO	int
,	O
mu_c_string	int
,	O
mu_offsetof	O
(	O
struct	O
mu_parseopt	struct
,	O
po_extra_info	pointer
)	O
}	O
,	O
{	O
"MU_PARSEOPT_EXIT_ERROR"	pointer
,	O
MU_PARSEOPT_EXIT_ERROR	int
,	O
mu_c_int	int
,	O
mu_offsetof	O
(	O
struct	O
mu_parseopt	struct
,	O
po_exit_error	int
)	O
}	O
,	O
{	O
"MU_PARSEOPT_VERSION_HOOK"	pointer
,	O
MU_PARSEOPT_VERSION_HOOK	int
,	O
mu_c_void	int
}	O
,	O
{	O
"MU_PARSEOPT_SINGLE_DASH"	pointer
,	O
MU_PARSEOPT_SINGLE_DASH	int
,	O
mu_c_void	int
}	O
,	O
{	O
"MU_PARSEOPT_NEGATION"	pointer
,	O
MU_PARSEOPT_NEGATION	int
,	O
mu_c_string	int
,	O
mu_offsetof	O
(	O
struct	O
mu_parseopt	struct
,	O
po_negation	pointer
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
int	O
main	function
(	O
int	O
argc	long
,	O
char	O
*	O
argv	pointer
[	O
]	O
)	O
{	O
struct	O
mu_parseopt	struct
po	pointer
;	O
int	O
rc	int
;	O
int	O
i	long
;	O
int	O
flags	int
=	O
MU_PARSEOPT_DEFAULT	int
;	O
mu_stdstream_setup	function
(	O
MU_STDSTREAM_RESET_NONE	int
)	O
;	O
if	O
(	O
getenv	function
(	O
"MU_PARSEOPT_DEFAULT"	pointer
)	O
)	O
flags	int
=	O
MU_PARSEOPT_DEFAULT	int
;	O
else	O
{	O
struct	O
parseopt_param	struct
*	O
param	pointer
;	O
for	O
(	O
param	pointer
=	O
parseopt_param	struct
;	O
param	pointer
->	O
name	pointer
;	O
param	pointer
++	O
)	O
{	O
char	O
*	O
val	pointer
=	O
getenv	function
(	O
param	pointer
->	O
name	pointer
)	O
;	O
if	O
(	O
val	pointer
)	O
{	O
flags	int
|=	O
param	pointer
->	O
flag	int
;	O
if	O
(	O
param	pointer
->	O
setfn	pointer
)	O
{	O
param	pointer
->	O
setfn	pointer
(	O
param	pointer
,	O
val	pointer
,	O
(	O
(	O
char	O
*	O
)	O
&	O
po	pointer
+	O
param	pointer
->	O
off	long
)	O
)	O
;	O
}	O
else	O
if	O
(	O
param	pointer
->	O
type	int
!=	O
mu_c_void	int
)	O
{	O
char	O
*	O
errmsg	pointer
;	O
int	O
rc	int
=	O
mu_str_to_c	function
(	O
val	pointer
,	O
param	pointer
->	O
type	int
,	O
(	O
(	O
char	O
*	O
)	O
&	O
po	pointer
+	O
param	pointer
->	O
off	long
)	O
,	O
&	O
errmsg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"envvar %s: %s\n"	pointer
,	O
param	pointer
->	O
name	pointer
,	O
errmsg	pointer
?	O
errmsg	pointer
:	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
flags	int
&	O
MU_PARSEOPT_VERSION_HOOK	int
)	O
po	pointer
.	O
po_version_hook	pointer
=	O
version_hook	function
;	O
}	O
rc	int
=	O
mu_parseopt	struct
(	O
&	O
po	pointer
,	O
argc	long
,	O
argv	pointer
,	O
optv	pointer
,	O
flags	int
)	O
;	O
printf	function
(	O
"rc=%d\n"	pointer
,	O
rc	int
)	O
;	O
mu_parseopt_apply	function
(	O
&	O
po	pointer
)	O
;	O
argc	long
-=	O
po	pointer
.	O
po_arg_start	int
;	O
argv	pointer
+=	O
po	pointer
.	O
po_arg_start	int
;	O
mu_parseopt_free	function
(	O
&	O
po	pointer
)	O
;	O
printf	function
(	O
"file_name=%s\n"	pointer
,	O
S	O
(	O
file_name	pointer
)	O
)	O
;	O
printf	function
(	O
"opt_value=%s\n"	pointer
,	O
S	O
(	O
opt_value	pointer
)	O
)	O
;	O
printf	function
(	O
"x_option=%d\n"	pointer
,	O
x_option	int
)	O
;	O
printf	function
(	O
"a_option=%d\n"	pointer
,	O
a_option	int
)	O
;	O
printf	function
(	O
"headers_option=%d\n"	pointer
,	O
headers_option	int
)	O
;	O
printf	function
(	O
"find_value=%s\n"	pointer
,	O
S	O
(	O
find_value	pointer
)	O
)	O
;	O
printf	function
(	O
"d_option=%d\n"	pointer
,	O
d_option	int
)	O
;	O
printf	function
(	O
"jobs=%d\n"	pointer
,	O
jobs	int
)	O
;	O
printf	function
(	O
"debug_level_value=%d\n"	pointer
,	O
debug_level_value	int
)	O
;	O
printf	function
(	O
"debug_info_value=%s\n"	pointer
,	O
S	O
(	O
debug_info_value	pointer
)	O
)	O
;	O
printf	function
(	O
"argv:\n"	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
printf	function
(	O
"%d: %s\n"	pointer
,	O
i	long
,	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
