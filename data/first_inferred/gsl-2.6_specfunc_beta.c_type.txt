static	O
double	O
isnegint	function
(	O
const	O
double	O
x	double
)	O
{	O
return	O
(	O
x	double
<	O
0	int
)	O
&&	O
(	O
x	double
==	O
floor	function
(	O
x	double
)	O
)	O
;	O
}	O
int	O
gsl_sf_lnbeta_e	function
(	O
const	O
double	O
x	double
,	O
const	O
double	O
y	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
double	O
sgn	pointer
;	O
int	O
status	int
=	O
gsl_sf_lnbeta_sgn_e	function
(	O
x	double
,	O
y	double
,	O
result	pointer
,	O
&	O
sgn	pointer
)	O
;	O
if	O
(	O
sgn	pointer
==	O
-	O
1	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
return	O
status	int
;	O
}	O
int	O
gsl_sf_lnbeta_sgn_e	function
(	O
const	O
double	O
x	double
,	O
const	O
double	O
y	double
,	O
gsl_sf_result	struct
*	O
result	pointer
,	O
double	O
*	O
sgn	pointer
)	O
{	O
if	O
(	O
x	double
==	O
0.0	int
||	O
y	double
==	O
0.0	int
)	O
{	O
*	O
sgn	pointer
=	O
0.0	int
;	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
isnegint	function
(	O
x	double
)	O
||	O
isnegint	function
(	O
y	double
)	O
)	O
{	O
*	O
sgn	pointer
=	O
0.0	int
;	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
if	O
(	O
x	double
>	O
0	int
&&	O
y	double
>	O
0	int
)	O
{	O
const	O
double	O
max	double
=	O
GSL_MAX	O
(	O
x	double
,	O
y	double
)	O
;	O
const	O
double	O
min	double
=	O
GSL_MIN	O
(	O
x	double
,	O
y	double
)	O
;	O
const	O
double	O
rat	double
=	O
min	double
/	O
max	double
;	O
if	O
(	O
rat	double
<	O
0.2	int
)	O
{	O
double	O
lnpre_val	double
;	O
double	O
lnpre_err	double
;	O
double	O
lnpow_val	double
;	O
double	O
lnpow_err	double
;	O
double	O
t1	double
,	O
t2	double
,	O
t3	double
;	O
gsl_sf_result	struct
lnopr	struct
;	O
gsl_sf_result	struct
gsx	struct
,	O
gsy	struct
,	O
gsxy	struct
;	O
gsl_sf_gammastar_e	function
(	O
x	double
,	O
&	O
gsx	struct
)	O
;	O
gsl_sf_gammastar_e	function
(	O
y	double
,	O
&	O
gsy	struct
)	O
;	O
gsl_sf_gammastar_e	function
(	O
x	double
+	O
y	double
,	O
&	O
gsxy	struct
)	O
;	O
gsl_sf_log_1plusx_e	function
(	O
rat	double
,	O
&	O
lnopr	struct
)	O
;	O
lnpre_val	double
=	O
log	function
(	O
gsx	struct
.	O
val	double
*	O
gsy	struct
.	O
val	double
/	O
gsxy	struct
.	O
val	double
*	O
M_SQRT2	int
*	O
M_SQRTPI	int
)	O
;	O
lnpre_err	double
=	O
gsx	struct
.	O
err	double
/	O
gsx	struct
.	O
val	double
+	O
gsy	struct
.	O
err	double
/	O
gsy	struct
.	O
val	double
+	O
gsxy	struct
.	O
err	double
/	O
gsxy	struct
.	O
val	double
;	O
t1	double
=	O
min	double
*	O
log	function
(	O
rat	double
)	O
;	O
t2	double
=	O
0.5	int
*	O
log	function
(	O
min	double
)	O
;	O
t3	double
=	O
(	O
x	double
+	O
y	double
-	O
0.5	int
)	O
*	O
lnopr	struct
.	O
val	double
;	O
lnpow_val	double
=	O
t1	double
-	O
t2	double
-	O
t3	double
;	O
lnpow_err	double
=	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
t1	double
)	O
+	O
fabs	function
(	O
t2	double
)	O
+	O
fabs	function
(	O
t3	double
)	O
)	O
;	O
lnpow_err	double
+=	O
fabs	function
(	O
x	double
+	O
y	double
-	O
0.5	int
)	O
*	O
lnopr	struct
.	O
err	double
;	O
result	pointer
->	O
val	double
=	O
lnpre_val	double
+	O
lnpow_val	double
;	O
result	pointer
->	O
err	double
=	O
lnpre_err	double
+	O
lnpow_err	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
*	O
sgn	pointer
=	O
1.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
{	O
gsl_sf_result	struct
lgx	struct
,	O
lgy	struct
,	O
lgxy	struct
;	O
double	O
sgx	double
,	O
sgy	double
,	O
sgxy	double
,	O
xy	double
=	O
x	double
+	O
y	double
;	O
int	O
stat_gx	int
=	O
gsl_sf_lngamma_sgn_e	function
(	O
x	double
,	O
&	O
lgx	struct
,	O
&	O
sgx	double
)	O
;	O
int	O
stat_gy	int
=	O
gsl_sf_lngamma_sgn_e	function
(	O
y	double
,	O
&	O
lgy	struct
,	O
&	O
sgy	double
)	O
;	O
int	O
stat_gxy	int
=	O
gsl_sf_lngamma_sgn_e	function
(	O
xy	double
,	O
&	O
lgxy	struct
,	O
&	O
sgxy	double
)	O
;	O
*	O
sgn	pointer
=	O
sgx	double
*	O
sgy	double
*	O
sgxy	double
;	O
result	pointer
->	O
val	double
=	O
lgx	struct
.	O
val	double
+	O
lgy	struct
.	O
val	double
-	O
lgxy	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
lgx	struct
.	O
err	double
+	O
lgy	struct
.	O
err	double
+	O
lgxy	struct
.	O
err	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
lgx	struct
.	O
val	double
)	O
+	O
fabs	function
(	O
lgy	struct
.	O
val	double
)	O
+	O
fabs	function
(	O
lgxy	struct
.	O
val	double
)	O
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_3	O
(	O
stat_gx	int
,	O
stat_gy	int
,	O
stat_gxy	int
)	O
;	O
}	O
}	O
int	O
gsl_sf_beta_e	function
(	O
const	O
double	O
x	double
,	O
const	O
double	O
y	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
(	O
x	double
>	O
0	int
&&	O
y	double
>	O
0	int
)	O
&&	O
x	double
<	O
50.0	int
&&	O
y	double
<	O
50.0	int
)	O
{	O
gsl_sf_result	struct
gx	struct
,	O
gy	struct
,	O
gxy	struct
;	O
gsl_sf_gamma_e	function
(	O
x	double
,	O
&	O
gx	struct
)	O
;	O
gsl_sf_gamma_e	function
(	O
y	double
,	O
&	O
gy	struct
)	O
;	O
gsl_sf_gamma_e	function
(	O
x	double
+	O
y	double
,	O
&	O
gxy	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
(	O
gx	struct
.	O
val	double
*	O
gy	struct
.	O
val	double
)	O
/	O
gxy	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
gx	struct
.	O
err	double
*	O
fabs	function
(	O
gy	struct
.	O
val	double
/	O
gxy	struct
.	O
val	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
gy	struct
.	O
err	double
*	O
fabs	function
(	O
gx	struct
.	O
val	double
/	O
gxy	struct
.	O
val	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
fabs	function
(	O
(	O
gx	struct
.	O
val	double
*	O
gy	struct
.	O
val	double
)	O
/	O
(	O
gxy	struct
.	O
val	double
*	O
gxy	struct
.	O
val	double
)	O
)	O
*	O
gxy	struct
.	O
err	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
isnegint	function
(	O
x	double
)	O
||	O
isnegint	function
(	O
y	double
)	O
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
isnegint	function
(	O
x	double
+	O
y	double
)	O
)	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct
lb	struct
;	O
double	O
sgn	pointer
;	O
int	O
stat_lb	int
=	O
gsl_sf_lnbeta_sgn_e	function
(	O
x	double
,	O
y	double
,	O
&	O
lb	struct
,	O
&	O
sgn	pointer
)	O
;	O
if	O
(	O
stat_lb	int
==	O
GSL_SUCCESS	int
)	O
{	O
int	O
status	int
=	O
gsl_sf_exp_err_e	function
(	O
lb	struct
.	O
val	double
,	O
lb	struct
.	O
err	double
,	O
result	pointer
)	O
;	O
result	pointer
->	O
val	double
*=	O
sgn	pointer
;	O
return	O
status	int
;	O
}	O
else	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
stat_lb	int
;	O
}	O
}	O
}	O
double	O
gsl_sf_lnbeta	function
(	O
const	O
double	O
x	double
,	O
const	O
double	O
y	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_lnbeta_e	function
(	O
x	double
,	O
y	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_beta	function
(	O
const	O
double	O
x	double
,	O
const	O
double	O
y	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_beta_e	function
(	O
x	double
,	O
y	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
