int	O
gsl_integration_qawo	function
(	O
gsl_function	struct
*	O
f	pointer
,	O
const	O
double	O
a	double
,	O
const	O
double	O
epsabs	double
,	O
const	O
double	O
epsrel	double
,	O
const	O
size_t	long
limit	long
,	O
gsl_integration_workspace	struct
*	O
workspace	pointer
,	O
gsl_integration_qawo_table	struct
*	O
wf	pointer
,	O
double	O
*	O
result	pointer
,	O
double	O
*	O
abserr	pointer
)	O
{	O
double	O
area	double
,	O
errsum	double
;	O
double	O
res_ext	double
,	O
err_ext	double
;	O
double	O
result0	double
,	O
abserr0	double
,	O
resabs0	double
,	O
resasc0	double
;	O
double	O
tolerance	double
;	O
double	O
ertest	double
=	O
0	int
;	O
double	O
error_over_large_intervals	double
=	O
0	int
;	O
double	O
reseps	double
=	O
0	int
,	O
abseps	double
=	O
0	int
,	O
correc	double
=	O
0	int
;	O
size_t	long
ktmin	long
=	O
0	int
;	O
int	O
roundoff_type1	int
=	O
0	int
,	O
roundoff_type2	int
=	O
0	int
,	O
roundoff_type3	int
=	O
0	int
;	O
int	O
error_type	int
=	O
0	int
,	O
error_type2	int
=	O
0	int
;	O
size_t	long
iteration	long
=	O
0	int
;	O
int	O
positive_integrand	int
=	O
0	int
;	O
int	O
extrapolate	int
=	O
0	int
;	O
int	O
extall	int
=	O
0	int
;	O
int	O
disallow_extrapolation	int
=	O
0	int
;	O
struct	O
extrapolation_table	struct
table	pointer
;	O
double	O
b	double
=	O
a	double
+	O
wf	pointer
->	O
L	double
;	O
double	O
abs_omega	double
=	O
fabs	function
(	O
wf	pointer
->	O
omega	double
)	O
;	O
initialise	function
(	O
workspace	pointer
,	O
a	double
,	O
b	double
)	O
;	O
*	O
result	pointer
=	O
0	int
;	O
*	O
abserr	pointer
=	O
0	int
;	O
if	O
(	O
limit	long
>	O
workspace	pointer
->	O
limit	long
)	O
{	O
GSL_ERROR	O
(	O
"iteration limit exceeds available workspace"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
epsabs	double
<=	O
0	int
&&	O
(	O
epsrel	double
<	O
50	int
*	O
GSL_DBL_EPSILON	int
||	O
epsrel	double
<	O
0.5e-28	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"tolerance cannot be achieved with given epsabs and epsrel"	pointer
,	O
GSL_EBADTOL	int
)	O
;	O
}	O
qc25f	function
(	O
f	pointer
,	O
a	double
,	O
b	double
,	O
wf	pointer
,	O
0	int
,	O
&	O
result0	double
,	O
&	O
abserr0	double
,	O
&	O
resabs0	double
,	O
&	O
resasc0	double
)	O
;	O
set_initial_result	function
(	O
workspace	pointer
,	O
result0	double
,	O
abserr0	double
)	O
;	O
tolerance	double
=	O
GSL_MAX_DBL	function
(	O
epsabs	double
,	O
epsrel	double
*	O
fabs	function
(	O
result0	double
)	O
)	O
;	O
if	O
(	O
abserr0	double
<=	O
100	int
*	O
GSL_DBL_EPSILON	int
*	O
resabs0	double
&&	O
abserr0	double
>	O
tolerance	double
)	O
{	O
*	O
result	pointer
=	O
result0	double
;	O
*	O
abserr	pointer
=	O
abserr0	double
;	O
GSL_ERROR	O
(	O
"cannot reach tolerance because of roundoff error "	pointer
"on first attempt"	pointer
,	O
GSL_EROUND	int
)	O
;	O
}	O
else	O
if	O
(	O
(	O
abserr0	double
<=	O
tolerance	double
&&	O
abserr0	double
!=	O
resasc0	double
)	O
||	O
abserr0	double
==	O
0.0	int
)	O
{	O
*	O
result	pointer
=	O
result0	double
;	O
*	O
abserr	pointer
=	O
abserr0	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
limit	long
==	O
1	int
)	O
{	O
*	O
result	pointer
=	O
result0	double
;	O
*	O
abserr	pointer
=	O
abserr0	double
;	O
GSL_ERROR	O
(	O
"a maximum of one iteration was insufficient"	pointer
,	O
GSL_EMAXITER	int
)	O
;	O
}	O
initialise_table	function
(	O
&	O
table	pointer
)	O
;	O
if	O
(	O
0.5	int
*	O
abs_omega	double
*	O
fabs	function
(	O
b	double
-	O
a	double
)	O
<=	O
2	int
)	O
{	O
append_table	function
(	O
&	O
table	pointer
,	O
result0	double
)	O
;	O
extall	int
=	O
1	int
;	O
}	O
area	double
=	O
result0	double
;	O
errsum	double
=	O
abserr0	double
;	O
res_ext	double
=	O
result0	double
;	O
err_ext	double
=	O
GSL_DBL_MAX	int
;	O
positive_integrand	int
=	O
test_positivity	function
(	O
result0	double
,	O
resabs0	double
)	O
;	O
iteration	long
=	O
1	int
;	O
do	O
{	O
size_t	long
current_level	long
;	O
double	O
a1	double
,	O
b1	double
,	O
a2	double
,	O
b2	double
;	O
double	O
a_i	double
,	O
b_i	double
,	O
r_i	double
,	O
e_i	double
;	O
double	O
area1	double
=	O
0	int
,	O
area2	double
=	O
0	int
,	O
area12	double
=	O
0	int
;	O
double	O
error1	double
=	O
0	int
,	O
error2	double
=	O
0	int
,	O
error12	double
=	O
0	int
;	O
double	O
resasc1	double
,	O
resasc2	double
;	O
double	O
resabs1	double
,	O
resabs2	double
;	O
double	O
last_e_i	double
;	O
retrieve	function
(	O
workspace	pointer
,	O
&	O
a_i	double
,	O
&	O
b_i	double
,	O
&	O
r_i	double
,	O
&	O
e_i	double
)	O
;	O
current_level	long
=	O
workspace	pointer
->	O
level	pointer
[	O
workspace	pointer
->	O
i	long
]	O
+	O
1	int
;	O
if	O
(	O
current_level	long
>=	O
wf	pointer
->	O
n	int
)	O
{	O
error_type	int
=	O
-	O
1	int
;	O
break	O
;	O
}	O
a1	double
=	O
a_i	double
;	O
b1	double
=	O
0.5	int
*	O
(	O
a_i	double
+	O
b_i	double
)	O
;	O
a2	double
=	O
b1	double
;	O
b2	double
=	O
b_i	double
;	O
iteration	long
++	O
;	O
qc25f	function
(	O
f	pointer
,	O
a1	double
,	O
b1	double
,	O
wf	pointer
,	O
current_level	long
,	O
&	O
area1	double
,	O
&	O
error1	double
,	O
&	O
resabs1	double
,	O
&	O
resasc1	double
)	O
;	O
qc25f	function
(	O
f	pointer
,	O
a2	double
,	O
b2	double
,	O
wf	pointer
,	O
current_level	long
,	O
&	O
area2	double
,	O
&	O
error2	double
,	O
&	O
resabs2	double
,	O
&	O
resasc2	double
)	O
;	O
area12	double
=	O
area1	double
+	O
area2	double
;	O
error12	double
=	O
error1	double
+	O
error2	double
;	O
last_e_i	double
=	O
e_i	double
;	O
errsum	double
=	O
errsum	double
+	O
error12	double
-	O
e_i	double
;	O
area	double
=	O
area	double
+	O
area12	double
-	O
r_i	double
;	O
tolerance	double
=	O
GSL_MAX_DBL	function
(	O
epsabs	double
,	O
epsrel	double
*	O
fabs	function
(	O
area	double
)	O
)	O
;	O
if	O
(	O
resasc1	double
!=	O
error1	double
&&	O
resasc2	double
!=	O
error2	double
)	O
{	O
double	O
delta	double
=	O
r_i	double
-	O
area12	double
;	O
if	O
(	O
fabs	function
(	O
delta	double
)	O
<=	O
1.0e-5	int
*	O
fabs	function
(	O
area12	double
)	O
&&	O
error12	double
>=	O
0.99	int
*	O
e_i	double
)	O
{	O
if	O
(	O
!	O
extrapolate	int
)	O
{	O
roundoff_type1	int
++	O
;	O
}	O
else	O
{	O
roundoff_type2	int
++	O
;	O
}	O
}	O
if	O
(	O
iteration	long
>	O
10	int
&&	O
error12	double
>	O
e_i	double
)	O
{	O
roundoff_type3	int
++	O
;	O
}	O
}	O
if	O
(	O
roundoff_type1	int
+	O
roundoff_type2	int
>=	O
10	int
||	O
roundoff_type3	int
>=	O
20	int
)	O
{	O
error_type	int
=	O
2	int
;	O
}	O
if	O
(	O
roundoff_type2	int
>=	O
5	int
)	O
{	O
error_type2	int
=	O
1	int
;	O
}	O
if	O
(	O
subinterval_too_small	function
(	O
a1	double
,	O
a2	double
,	O
b2	double
)	O
)	O
{	O
error_type	int
=	O
4	int
;	O
}	O
update	function
(	O
workspace	pointer
,	O
a1	double
,	O
b1	double
,	O
area1	double
,	O
error1	double
,	O
a2	double
,	O
b2	double
,	O
area2	double
,	O
error2	double
)	O
;	O
if	O
(	O
errsum	double
<=	O
tolerance	double
)	O
{	O
goto	O
compute_result	O
;	O
}	O
if	O
(	O
error_type	int
)	O
{	O
break	O
;	O
}	O
if	O
(	O
iteration	long
>=	O
limit	long
-	O
1	int
)	O
{	O
error_type	int
=	O
1	int
;	O
break	O
;	O
}	O
if	O
(	O
iteration	long
==	O
2	int
&&	O
extall	int
)	O
{	O
error_over_large_intervals	double
=	O
errsum	double
;	O
ertest	double
=	O
tolerance	double
;	O
append_table	function
(	O
&	O
table	pointer
,	O
area	double
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
disallow_extrapolation	int
)	O
{	O
continue	O
;	O
}	O
if	O
(	O
extall	int
)	O
{	O
error_over_large_intervals	double
+=	O
-	O
last_e_i	double
;	O
if	O
(	O
current_level	long
<	O
workspace	pointer
->	O
maximum_level	long
)	O
{	O
error_over_large_intervals	double
+=	O
error12	double
;	O
}	O
if	O
(	O
extrapolate	int
)	O
goto	O
label70	O
;	O
}	O
if	O
(	O
large_interval	function
(	O
workspace	pointer
)	O
)	O
{	O
continue	O
;	O
}	O
if	O
(	O
extall	int
)	O
{	O
extrapolate	int
=	O
1	int
;	O
workspace	pointer
->	O
nrmax	long
=	O
1	int
;	O
}	O
else	O
{	O
size_t	long
i	long
=	O
workspace	pointer
->	O
i	long
;	O
double	O
width	double
=	O
workspace	pointer
->	O
blist	pointer
[	O
i	long
]	O
-	O
workspace	pointer
->	O
alist	pointer
[	O
i	long
]	O
;	O
if	O
(	O
0.25	int
*	O
fabs	function
(	O
width	double
)	O
*	O
abs_omega	double
>	O
2	int
)	O
continue	O
;	O
extall	int
=	O
1	int
;	O
error_over_large_intervals	double
=	O
errsum	double
;	O
ertest	double
=	O
tolerance	double
;	O
continue	O
;	O
}	O
label70	O
:	O
if	O
(	O
!	O
error_type2	int
&&	O
error_over_large_intervals	double
>	O
ertest	double
)	O
{	O
if	O
(	O
increase_nrmax	function
(	O
workspace	pointer
)	O
)	O
continue	O
;	O
}	O
append_table	function
(	O
&	O
table	pointer
,	O
area	double
)	O
;	O
if	O
(	O
table	pointer
.	O
n	int
<	O
3	int
)	O
{	O
reset_nrmax	function
(	O
workspace	pointer
)	O
;	O
extrapolate	int
=	O
0	int
;	O
error_over_large_intervals	double
=	O
errsum	double
;	O
continue	O
;	O
}	O
qelg	function
(	O
&	O
table	pointer
,	O
&	O
reseps	double
,	O
&	O
abseps	double
)	O
;	O
ktmin	long
++	O
;	O
if	O
(	O
ktmin	long
>	O
5	int
&&	O
err_ext	double
<	O
0.001	int
*	O
errsum	double
)	O
{	O
error_type	int
=	O
5	int
;	O
}	O
if	O
(	O
abseps	double
<	O
err_ext	double
)	O
{	O
ktmin	long
=	O
0	int
;	O
err_ext	double
=	O
abseps	double
;	O
res_ext	double
=	O
reseps	double
;	O
correc	double
=	O
error_over_large_intervals	double
;	O
ertest	double
=	O
GSL_MAX_DBL	function
(	O
epsabs	double
,	O
epsrel	double
*	O
fabs	function
(	O
reseps	double
)	O
)	O
;	O
if	O
(	O
err_ext	double
<=	O
ertest	double
)	O
break	O
;	O
}	O
if	O
(	O
table	pointer
.	O
n	int
==	O
1	int
)	O
{	O
disallow_extrapolation	int
=	O
1	int
;	O
}	O
if	O
(	O
error_type	int
==	O
5	int
)	O
{	O
break	O
;	O
}	O
reset_nrmax	function
(	O
workspace	pointer
)	O
;	O
extrapolate	int
=	O
0	int
;	O
error_over_large_intervals	double
=	O
errsum	double
;	O
}	O
while	O
(	O
iteration	long
<	O
limit	long
)	O
;	O
*	O
result	pointer
=	O
res_ext	double
;	O
*	O
abserr	pointer
=	O
err_ext	double
;	O
if	O
(	O
err_ext	double
==	O
GSL_DBL_MAX	int
)	O
goto	O
compute_result	O
;	O
if	O
(	O
error_type	int
||	O
error_type2	int
)	O
{	O
if	O
(	O
error_type2	int
)	O
{	O
err_ext	double
+=	O
correc	double
;	O
}	O
if	O
(	O
error_type	int
==	O
0	int
)	O
error_type	int
=	O
3	int
;	O
if	O
(	O
result	pointer
!=	O
0	int
&&	O
area	double
!=	O
0	int
)	O
{	O
if	O
(	O
err_ext	double
/	O
fabs	function
(	O
res_ext	double
)	O
>	O
errsum	double
/	O
fabs	function
(	O
area	double
)	O
)	O
goto	O
compute_result	O
;	O
}	O
else	O
if	O
(	O
err_ext	double
>	O
errsum	double
)	O
{	O
goto	O
compute_result	O
;	O
}	O
else	O
if	O
(	O
area	double
==	O
0.0	int
)	O
{	O
goto	O
return_error	O
;	O
}	O
}	O
{	O
double	O
max_area	double
=	O
GSL_MAX_DBL	function
(	O
fabs	function
(	O
res_ext	double
)	O
,	O
fabs	function
(	O
area	double
)	O
)	O
;	O
if	O
(	O
!	O
positive_integrand	int
&&	O
max_area	double
<	O
0.01	int
*	O
resabs0	double
)	O
goto	O
return_error	O
;	O
}	O
{	O
double	O
ratio	double
=	O
res_ext	double
/	O
area	double
;	O
if	O
(	O
ratio	double
<	O
0.01	int
||	O
ratio	double
>	O
100	int
||	O
errsum	double
>	O
fabs	function
(	O
area	double
)	O
)	O
error_type	int
=	O
6	int
;	O
}	O
goto	O
return_error	O
;	O
compute_result	O
:	O
*	O
result	pointer
=	O
sum_results	function
(	O
workspace	pointer
)	O
;	O
*	O
abserr	pointer
=	O
errsum	double
;	O
return_error	O
:	O
if	O
(	O
error_type	int
>	O
2	int
)	O
error_type	int
--	O
;	O
if	O
(	O
error_type	int
==	O
0	int
)	O
{	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
error_type	int
==	O
1	int
)	O
{	O
GSL_ERROR	O
(	O
"number of iterations was insufficient"	pointer
,	O
GSL_EMAXITER	int
)	O
;	O
}	O
else	O
if	O
(	O
error_type	int
==	O
2	int
)	O
{	O
GSL_ERROR	O
(	O
"cannot reach tolerance because of roundoff error"	pointer
,	O
GSL_EROUND	int
)	O
;	O
}	O
else	O
if	O
(	O
error_type	int
==	O
3	int
)	O
{	O
GSL_ERROR	O
(	O
"bad integrand behavior found in the integration interval"	pointer
,	O
GSL_ESING	int
)	O
;	O
}	O
else	O
if	O
(	O
error_type	int
==	O
4	int
)	O
{	O
GSL_ERROR	O
(	O
"roundoff error detected in extrapolation table"	pointer
,	O
GSL_EROUND	int
)	O
;	O
}	O
else	O
if	O
(	O
error_type	int
==	O
5	int
)	O
{	O
GSL_ERROR	O
(	O
"integral is divergent, or slowly convergent"	pointer
,	O
GSL_EDIVERGE	int
)	O
;	O
}	O
else	O
if	O
(	O
error_type	int
==	O
-	O
1	int
)	O
{	O
GSL_ERROR	O
(	O
"exceeded limit of trigonometric table"	pointer
,	O
GSL_ETABLE	int
)	O
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"could not integrate function"	pointer
,	O
GSL_EFAILED	int
)	O
;	O
}	O
}	O
