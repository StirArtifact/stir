static	O
int	O
current_addr_	int
=	O
0	int
;	O
static	O
int	O
last_addr_	int
=	O
0	int
;	O
static	O
char	O
isbinary_	char
=	O
0	int
;	O
static	O
char	O
modified_	char
=	O
0	int
;	O
static	O
char	O
newline_added_	char
=	O
0	int
;	O
static	O
int	O
seek_write	int
=	O
0	int
;	O
static	O
FILE	struct
*	O
sfp	pointer
=	O
0	int
;	O
static	O
long	O
sfpos	long
=	O
0	int
;	O
static	O
line_t	struct
buffer_head	struct
;	O
static	O
line_t	struct
yank_buffer_head	struct
;	O
int	O
current_addr	function
(	O
void	O
)	O
{	O
return	O
current_addr_	int
;	O
}	O
int	O
inc_current_addr	function
(	O
void	O
)	O
{	O
if	O
(	O
++	O
current_addr_	int
>	O
last_addr_	int
)	O
current_addr_	int
=	O
last_addr_	int
;	O
return	O
current_addr_	int
;	O
}	O
void	O
set_current_addr	function
(	O
const	O
int	O
addr	int
)	O
{	O
current_addr_	int
=	O
addr	int
;	O
}	O
int	O
last_addr	function
(	O
void	O
)	O
{	O
return	O
last_addr_	int
;	O
}	O
char	O
isbinary	function
(	O
void	O
)	O
{	O
return	O
isbinary_	char
;	O
}	O
void	O
set_binary	function
(	O
void	O
)	O
{	O
isbinary_	char
=	O
1	int
;	O
}	O
char	O
modified	function
(	O
void	O
)	O
{	O
return	O
modified_	char
;	O
}	O
void	O
set_modified	function
(	O
const	O
char	O
m	char
)	O
{	O
modified_	char
=	O
m	char
;	O
}	O
char	O
newline_added	function
(	O
void	O
)	O
{	O
return	O
newline_added_	char
;	O
}	O
void	O
set_newline_added	function
(	O
void	O
)	O
{	O
newline_added_	char
=	O
1	int
;	O
}	O
int	O
inc_addr	function
(	O
int	O
addr	int
)	O
{	O
if	O
(	O
++	O
addr	int
>	O
last_addr_	int
)	O
addr	int
=	O
0	int
;	O
return	O
addr	int
;	O
}	O
int	O
dec_addr	function
(	O
int	O
addr	int
)	O
{	O
if	O
(	O
--	O
addr	int
<	O
0	int
)	O
addr	int
=	O
last_addr_	int
;	O
return	O
addr	int
;	O
}	O
static	O
void	O
link_nodes	function
(	O
line_t	struct
*	O
prev	pointer
,	O
line_t	struct
*	O
next	pointer
)	O
{	O
prev	pointer
->	O
q_forw	pointer
=	O
next	pointer
;	O
next	pointer
->	O
q_back	pointer
=	O
prev	pointer
;	O
}	O
static	O
void	O
insert_node	function
(	O
line_t	struct
*	O
node	pointer
,	O
line_t	struct
*	O
prev	pointer
)	O
{	O
link_nodes	function
(	O
node	pointer
,	O
prev	pointer
->	O
q_forw	pointer
)	O
;	O
link_nodes	function
(	O
prev	pointer
,	O
node	pointer
)	O
;	O
}	O
static	O
void	O
add_line_node	function
(	O
line_t	struct
*	O
lp	pointer
,	O
const	O
int	O
addr	int
)	O
{	O
line_t	struct
*	O
p	pointer
=	O
search_line_node	function
(	O
addr	int
)	O
;	O
insert_node	function
(	O
lp	pointer
,	O
p	pointer
)	O
;	O
++	O
last_addr_	int
;	O
}	O
static	O
line_t	struct
*	O
dup_line_node	function
(	O
line_t	struct
*	O
lp	pointer
)	O
{	O
line_t	struct
*	O
p	pointer
=	O
(	O
line_t	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
line_t	struct
)	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
show_strerror	function
(	O
0	int
,	O
errno	O
)	O
;	O
set_error_msg	function
(	O
"Memory exhausted"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
lp	pointer
)	O
{	O
p	pointer
->	O
pos	long
=	O
lp	pointer
->	O
pos	long
;	O
p	pointer
->	O
len	int
=	O
lp	pointer
->	O
len	int
;	O
}	O
return	O
p	pointer
;	O
}	O
char	O
append_lines	function
(	O
const	O
char	O
*	O
ibufp	pointer
,	O
const	O
int	O
addr	int
,	O
const	O
char	O
isglobal	char
)	O
{	O
int	O
len	int
;	O
undo_t	struct
*	O
up	pointer
=	O
0	int
;	O
current_addr_	int
=	O
addr	int
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
!	O
isglobal	char
)	O
{	O
ibufp	pointer
=	O
get_tty_line	function
(	O
&	O
len	int
)	O
;	O
if	O
(	O
!	O
ibufp	pointer
)	O
return	O
0	int
;	O
if	O
(	O
!	O
len	int
||	O
ibufp	pointer
[	O
len	int
-	O
1	int
]	O
!=	O
'\n'	O
)	O
{	O
clearerr	function
(	O
stdin	pointer
)	O
;	O
return	O
!	O
len	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
!	O
*	O
ibufp	pointer
)	O
return	O
1	int
;	O
for	O
(	O
len	int
=	O
0	int
;	O
ibufp	pointer
[	O
len	int
++	O
]	O
!=	O
'\n'	O
;	O
)	O
;	O
}	O
if	O
(	O
len	int
==	O
2	int
&&	O
ibufp	pointer
[	O
0	int
]	O
==	O
'.'	O
)	O
return	O
1	int
;	O
disable_interrupts	function
(	O
)	O
;	O
if	O
(	O
!	O
put_sbuf_line	function
(	O
ibufp	pointer
,	O
current_addr_	int
)	O
)	O
{	O
enable_interrupts	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
up	pointer
)	O
up	pointer
->	O
tail	pointer
=	O
search_line_node	function
(	O
current_addr_	int
)	O
;	O
else	O
if	O
(	O
!	O
(	O
up	pointer
=	O
push_undo_atom	function
(	O
UADD	int
,	O
-	O
1	int
,	O
-	O
1	int
)	O
)	O
)	O
{	O
enable_interrupts	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
ibufp	pointer
+=	O
len	int
;	O
modified_	char
=	O
1	int
;	O
enable_interrupts	function
(	O
)	O
;	O
}	O
}	O
static	O
void	O
clear_yank_buffer	function
(	O
void	O
)	O
{	O
line_t	struct
*	O
lp	pointer
=	O
yank_buffer_head	struct
.	O
q_forw	pointer
;	O
disable_interrupts	function
(	O
)	O
;	O
while	O
(	O
lp	pointer
!=	O
&	O
yank_buffer_head	struct
)	O
{	O
line_t	struct
*	O
cp	pointer
=	O
lp	pointer
->	O
q_forw	pointer
;	O
link_nodes	function
(	O
lp	pointer
->	O
q_back	pointer
,	O
lp	pointer
->	O
q_forw	pointer
)	O
;	O
free	function
(	O
lp	pointer
)	O
;	O
lp	pointer
=	O
cp	pointer
;	O
}	O
enable_interrupts	function
(	O
)	O
;	O
}	O
char	O
close_sbuf	function
(	O
void	O
)	O
{	O
clear_yank_buffer	function
(	O
)	O
;	O
clear_undo_stack	function
(	O
)	O
;	O
if	O
(	O
sfp	pointer
)	O
{	O
if	O
(	O
fclose	function
(	O
sfp	pointer
)	O
<	O
0	int
)	O
{	O
show_strerror	function
(	O
0	int
,	O
errno	O
)	O
;	O
set_error_msg	function
(	O
"Cannot close temp file"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
sfp	pointer
=	O
0	int
;	O
}	O
sfpos	long
=	O
0	int
;	O
seek_write	int
=	O
0	int
;	O
return	O
1	int
;	O
}	O
char	O
copy_lines	function
(	O
const	O
int	O
first_addr	int
,	O
const	O
int	O
second_addr	int
,	O
const	O
int	O
addr	int
)	O
{	O
line_t	struct
*	O
lp	pointer
,	O
*	O
np	pointer
=	O
search_line_node	function
(	O
first_addr	int
)	O
;	O
undo_t	struct
*	O
up	pointer
=	O
0	int
;	O
int	O
n	int
=	O
second_addr	int
-	O
first_addr	int
+	O
1	int
;	O
int	O
m	char
=	O
0	int
;	O
current_addr_	int
=	O
addr	int
;	O
if	O
(	O
addr	int
>=	O
first_addr	int
&&	O
addr	int
<	O
second_addr	int
)	O
{	O
n	int
=	O
addr	int
-	O
first_addr	int
+	O
1	int
;	O
m	char
=	O
second_addr	int
-	O
addr	int
;	O
}	O
for	O
(	O
;	O
n	int
>	O
0	int
;	O
n	int
=	O
m	char
,	O
m	char
=	O
0	int
,	O
np	pointer
=	O
search_line_node	function
(	O
current_addr_	int
+	O
1	int
)	O
)	O
for	O
(	O
;	O
n	int
--	O
>	O
0	int
;	O
np	pointer
=	O
np	pointer
->	O
q_forw	pointer
)	O
{	O
disable_interrupts	function
(	O
)	O
;	O
lp	pointer
=	O
dup_line_node	function
(	O
np	pointer
)	O
;	O
if	O
(	O
!	O
lp	pointer
)	O
{	O
enable_interrupts	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
add_line_node	function
(	O
lp	pointer
,	O
current_addr_	int
++	O
)	O
;	O
if	O
(	O
up	pointer
)	O
up	pointer
->	O
tail	pointer
=	O
lp	pointer
;	O
else	O
if	O
(	O
!	O
(	O
up	pointer
=	O
push_undo_atom	function
(	O
UADD	int
,	O
-	O
1	int
,	O
-	O
1	int
)	O
)	O
)	O
{	O
enable_interrupts	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
modified_	char
=	O
1	int
;	O
enable_interrupts	function
(	O
)	O
;	O
}	O
return	O
1	int
;	O
}	O
char	O
delete_lines	function
(	O
const	O
int	O
from	int
,	O
const	O
int	O
to	int
,	O
const	O
char	O
isglobal	char
)	O
{	O
line_t	struct
*	O
n	int
,	O
*	O
p	pointer
;	O
if	O
(	O
!	O
yank_lines	function
(	O
from	int
,	O
to	int
)	O
)	O
return	O
0	int
;	O
disable_interrupts	function
(	O
)	O
;	O
if	O
(	O
!	O
push_undo_atom	function
(	O
UDEL	int
,	O
from	int
,	O
to	int
)	O
)	O
{	O
enable_interrupts	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
n	int
=	O
search_line_node	function
(	O
inc_addr	function
(	O
to	int
)	O
)	O
;	O
p	pointer
=	O
search_line_node	function
(	O
from	int
-	O
1	int
)	O
;	O
if	O
(	O
isglobal	char
)	O
unset_active_nodes	function
(	O
p	pointer
->	O
q_forw	pointer
,	O
n	int
)	O
;	O
link_nodes	function
(	O
p	pointer
,	O
n	int
)	O
;	O
last_addr_	int
-=	O
to	int
-	O
from	int
+	O
1	int
;	O
current_addr_	int
=	O
from	int
-	O
1	int
;	O
modified_	char
=	O
1	int
;	O
enable_interrupts	function
(	O
)	O
;	O
return	O
1	int
;	O
}	O
int	O
get_line_node_addr	function
(	O
const	O
line_t	struct
*	O
lp	pointer
)	O
{	O
const	O
line_t	struct
*	O
cp	pointer
=	O
&	O
buffer_head	struct
;	O
int	O
addr	int
=	O
0	int
;	O
while	O
(	O
cp	pointer
!=	O
lp	pointer
&&	O
(	O
cp	pointer
=	O
cp	pointer
->	O
q_forw	pointer
)	O
!=	O
&	O
buffer_head	struct
)	O
++	O
addr	int
;	O
if	O
(	O
addr	int
&&	O
cp	pointer
==	O
&	O
buffer_head	struct
)	O
{	O
set_error_msg	function
(	O
"Invalid address"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
addr	int
;	O
}	O
char	O
*	O
get_sbuf_line	function
(	O
const	O
line_t	struct
*	O
lp	pointer
)	O
{	O
static	O
char	O
*	O
buf	pointer
=	O
0	int
;	O
static	O
int	O
bufsz	int
=	O
0	int
;	O
int	O
len	int
,	O
ct	int
;	O
if	O
(	O
lp	pointer
==	O
&	O
buffer_head	struct
)	O
return	O
0	int
;	O
seek_write	int
=	O
1	int
;	O
if	O
(	O
sfpos	long
!=	O
lp	pointer
->	O
pos	long
)	O
{	O
sfpos	long
=	O
lp	pointer
->	O
pos	long
;	O
if	O
(	O
fseek	function
(	O
sfp	pointer
,	O
sfpos	long
,	O
SEEK_SET	int
)	O
<	O
0	int
)	O
{	O
show_strerror	function
(	O
0	int
,	O
errno	O
)	O
;	O
set_error_msg	function
(	O
"Cannot seek temp file"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
len	int
=	O
lp	pointer
->	O
len	int
;	O
if	O
(	O
!	O
resize_buffer	function
(	O
&	O
buf	pointer
,	O
&	O
bufsz	int
,	O
len	int
+	O
1	int
)	O
)	O
return	O
0	int
;	O
ct	int
=	O
fread	function
(	O
buf	pointer
,	O
1	int
,	O
len	int
,	O
sfp	pointer
)	O
;	O
if	O
(	O
ct	int
<	O
0	int
||	O
ct	int
!=	O
len	int
)	O
{	O
show_strerror	function
(	O
0	int
,	O
errno	O
)	O
;	O
set_error_msg	function
(	O
"Cannot read temp file"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
sfpos	long
+=	O
len	int
;	O
buf	pointer
[	O
len	int
]	O
=	O
0	int
;	O
return	O
buf	pointer
;	O
}	O
char	O
init_buffers	function
(	O
void	O
)	O
{	O
setvbuf	function
(	O
stdin	pointer
,	O
0	int
,	O
_IONBF	int
,	O
0	int
)	O
;	O
if	O
(	O
!	O
open_sbuf	function
(	O
)	O
)	O
return	O
0	int
;	O
link_nodes	function
(	O
&	O
buffer_head	struct
,	O
&	O
buffer_head	struct
)	O
;	O
link_nodes	function
(	O
&	O
yank_buffer_head	struct
,	O
&	O
yank_buffer_head	struct
)	O
;	O
return	O
1	int
;	O
}	O
char	O
join_lines	function
(	O
const	O
int	O
from	int
,	O
const	O
int	O
to	int
,	O
const	O
char	O
isglobal	char
)	O
{	O
static	O
char	O
*	O
buf	pointer
=	O
0	int
;	O
static	O
int	O
bufsz	int
=	O
0	int
;	O
int	O
size	pointer
=	O
0	int
;	O
line_t	struct
*	O
ep	pointer
=	O
search_line_node	function
(	O
inc_addr	function
(	O
to	int
)	O
)	O
;	O
line_t	struct
*	O
bp	pointer
=	O
search_line_node	function
(	O
from	int
)	O
;	O
while	O
(	O
bp	pointer
!=	O
ep	pointer
)	O
{	O
char	O
*	O
s	pointer
=	O
get_sbuf_line	function
(	O
bp	pointer
)	O
;	O
if	O
(	O
!	O
s	pointer
||	O
!	O
resize_buffer	function
(	O
&	O
buf	pointer
,	O
&	O
bufsz	int
,	O
size	pointer
+	O
bp	pointer
->	O
len	int
)	O
)	O
return	O
0	int
;	O
memcpy	function
(	O
buf	pointer
+	O
size	pointer
,	O
s	pointer
,	O
bp	pointer
->	O
len	int
)	O
;	O
size	pointer
+=	O
bp	pointer
->	O
len	int
;	O
bp	pointer
=	O
bp	pointer
->	O
q_forw	pointer
;	O
}	O
if	O
(	O
!	O
resize_buffer	function
(	O
&	O
buf	pointer
,	O
&	O
bufsz	int
,	O
size	pointer
+	O
2	int
)	O
)	O
return	O
0	int
;	O
memcpy	function
(	O
buf	pointer
+	O
size	pointer
,	O
"\n"	pointer
,	O
2	int
)	O
;	O
if	O
(	O
!	O
delete_lines	function
(	O
from	int
,	O
to	int
,	O
isglobal	char
)	O
)	O
return	O
0	int
;	O
current_addr_	int
=	O
from	int
-	O
1	int
;	O
disable_interrupts	function
(	O
)	O
;	O
if	O
(	O
!	O
put_sbuf_line	function
(	O
buf	pointer
,	O
current_addr_	int
)	O
||	O
!	O
push_undo_atom	function
(	O
UADD	int
,	O
-	O
1	int
,	O
-	O
1	int
)	O
)	O
{	O
enable_interrupts	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
modified_	char
=	O
1	int
;	O
enable_interrupts	function
(	O
)	O
;	O
return	O
1	int
;	O
}	O
char	O
move_lines	function
(	O
const	O
int	O
first_addr	int
,	O
const	O
int	O
second_addr	int
,	O
const	O
int	O
addr	int
,	O
const	O
char	O
isglobal	char
)	O
{	O
line_t	struct
*	O
b1	pointer
,	O
*	O
a1	pointer
,	O
*	O
b2	pointer
,	O
*	O
a2	pointer
;	O
int	O
n	int
=	O
inc_addr	function
(	O
second_addr	int
)	O
;	O
int	O
p	pointer
=	O
first_addr	int
-	O
1	int
;	O
disable_interrupts	function
(	O
)	O
;	O
if	O
(	O
addr	int
==	O
first_addr	int
-	O
1	int
||	O
addr	int
==	O
second_addr	int
)	O
{	O
a2	pointer
=	O
search_line_node	function
(	O
n	int
)	O
;	O
b2	pointer
=	O
search_line_node	function
(	O
p	pointer
)	O
;	O
current_addr_	int
=	O
second_addr	int
;	O
}	O
else	O
if	O
(	O
!	O
push_undo_atom	function
(	O
UMOV	int
,	O
p	pointer
,	O
n	int
)	O
||	O
!	O
push_undo_atom	function
(	O
UMOV	int
,	O
addr	int
,	O
inc_addr	function
(	O
addr	int
)	O
)	O
)	O
{	O
enable_interrupts	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
else	O
{	O
a1	pointer
=	O
search_line_node	function
(	O
n	int
)	O
;	O
if	O
(	O
addr	int
<	O
first_addr	int
)	O
{	O
b1	pointer
=	O
search_line_node	function
(	O
p	pointer
)	O
;	O
b2	pointer
=	O
search_line_node	function
(	O
addr	int
)	O
;	O
}	O
else	O
{	O
b2	pointer
=	O
search_line_node	function
(	O
addr	int
)	O
;	O
b1	pointer
=	O
search_line_node	function
(	O
p	pointer
)	O
;	O
}	O
a2	pointer
=	O
b2	pointer
->	O
q_forw	pointer
;	O
link_nodes	function
(	O
b2	pointer
,	O
b1	pointer
->	O
q_forw	pointer
)	O
;	O
link_nodes	function
(	O
a1	pointer
->	O
q_back	pointer
,	O
a2	pointer
)	O
;	O
link_nodes	function
(	O
b1	pointer
,	O
a1	pointer
)	O
;	O
current_addr_	int
=	O
addr	int
+	O
(	O
(	O
addr	int
<	O
first_addr	int
)	O
?	O
second_addr	int
-	O
first_addr	int
+	O
1	int
:	O
0	int
)	O
;	O
}	O
if	O
(	O
isglobal	char
)	O
unset_active_nodes	function
(	O
b2	pointer
->	O
q_forw	pointer
,	O
a2	pointer
)	O
;	O
modified_	char
=	O
1	int
;	O
enable_interrupts	function
(	O
)	O
;	O
return	O
1	int
;	O
}	O
char	O
open_sbuf	function
(	O
void	O
)	O
{	O
isbinary_	char
=	O
newline_added_	char
=	O
0	int
;	O
sfp	pointer
=	O
tmpfile	function
(	O
)	O
;	O
if	O
(	O
!	O
sfp	pointer
)	O
{	O
show_strerror	function
(	O
0	int
,	O
errno	O
)	O
;	O
set_error_msg	function
(	O
"Cannot open temp file"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
int	O
path_max	function
(	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
long	O
result	long
;	O
if	O
(	O
!	O
filename	pointer
)	O
filename	pointer
=	O
"/"	pointer
;	O
errno	O
=	O
0	int
;	O
result	long
=	O
pathconf	function
(	O
filename	pointer
,	O
_PC_PATH_MAX	int
)	O
;	O
if	O
(	O
result	long
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
)	O
result	long
=	O
256	int
;	O
else	O
result	long
=	O
1024	int
;	O
}	O
else	O
if	O
(	O
result	long
<	O
256	int
)	O
result	long
=	O
256	int
;	O
return	O
result	long
;	O
}	O
char	O
put_lines	function
(	O
const	O
int	O
addr	int
)	O
{	O
undo_t	struct
*	O
up	pointer
=	O
0	int
;	O
line_t	struct
*	O
lp	pointer
=	O
yank_buffer_head	struct
.	O
q_forw	pointer
,	O
*	O
cp	pointer
;	O
if	O
(	O
lp	pointer
==	O
&	O
yank_buffer_head	struct
)	O
{	O
set_error_msg	function
(	O
"Nothing to put"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
current_addr_	int
=	O
addr	int
;	O
while	O
(	O
lp	pointer
!=	O
&	O
yank_buffer_head	struct
)	O
{	O
disable_interrupts	function
(	O
)	O
;	O
if	O
(	O
!	O
(	O
cp	pointer
=	O
dup_line_node	function
(	O
lp	pointer
)	O
)	O
)	O
{	O
enable_interrupts	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
add_line_node	function
(	O
cp	pointer
,	O
current_addr_	int
++	O
)	O
;	O
if	O
(	O
up	pointer
)	O
up	pointer
->	O
tail	pointer
=	O
cp	pointer
;	O
else	O
if	O
(	O
!	O
(	O
up	pointer
=	O
push_undo_atom	function
(	O
UADD	int
,	O
-	O
1	int
,	O
-	O
1	int
)	O
)	O
)	O
{	O
enable_interrupts	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
modified_	char
=	O
1	int
;	O
lp	pointer
=	O
lp	pointer
->	O
q_forw	pointer
;	O
enable_interrupts	function
(	O
)	O
;	O
}	O
return	O
1	int
;	O
}	O
const	O
char	O
*	O
put_sbuf_line	function
(	O
const	O
char	O
*	O
cs	pointer
,	O
const	O
int	O
addr	int
)	O
{	O
line_t	struct
*	O
lp	pointer
=	O
dup_line_node	function
(	O
0	int
)	O
;	O
int	O
len	int
,	O
ct	int
;	O
const	O
char	O
*	O
s	pointer
=	O
cs	pointer
;	O
if	O
(	O
!	O
lp	pointer
)	O
return	O
0	int
;	O
while	O
(	O
*	O
s	pointer
!=	O
'\n'	O
)	O
++	O
s	pointer
;	O
if	O
(	O
s	pointer
-	O
cs	pointer
>=	O
INT_MAX	O
)	O
{	O
set_error_msg	function
(	O
"Line too long"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
len	int
=	O
s	pointer
-	O
cs	pointer
;	O
if	O
(	O
seek_write	int
)	O
{	O
if	O
(	O
fseek	function
(	O
sfp	pointer
,	O
0L	int
,	O
SEEK_END	int
)	O
<	O
0	int
)	O
{	O
show_strerror	function
(	O
0	int
,	O
errno	O
)	O
;	O
set_error_msg	function
(	O
"Cannot seek temp file"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
sfpos	long
=	O
ftell	function
(	O
sfp	pointer
)	O
;	O
seek_write	int
=	O
0	int
;	O
}	O
ct	int
=	O
fwrite	function
(	O
cs	pointer
,	O
1	int
,	O
len	int
,	O
sfp	pointer
)	O
;	O
if	O
(	O
ct	int
<	O
0	int
||	O
ct	int
!=	O
len	int
)	O
{	O
sfpos	long
=	O
-	O
1	int
;	O
show_strerror	function
(	O
0	int
,	O
errno	O
)	O
;	O
set_error_msg	function
(	O
"Cannot write temp file"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
lp	pointer
->	O
len	int
=	O
len	int
;	O
lp	pointer
->	O
pos	long
=	O
sfpos	long
;	O
add_line_node	function
(	O
lp	pointer
,	O
addr	int
)	O
;	O
++	O
current_addr_	int
;	O
sfpos	long
+=	O
len	int
;	O
return	O
++	O
s	pointer
;	O
}	O
line_t	struct
*	O
search_line_node	function
(	O
const	O
int	O
addr	int
)	O
{	O
static	O
line_t	struct
*	O
lp	pointer
=	O
&	O
buffer_head	struct
;	O
static	O
int	O
o_addr	int
=	O
0	int
;	O
disable_interrupts	function
(	O
)	O
;	O
if	O
(	O
o_addr	int
<	O
addr	int
)	O
{	O
if	O
(	O
o_addr	int
+	O
last_addr_	int
>=	O
2	int
*	O
addr	int
)	O
while	O
(	O
o_addr	int
<	O
addr	int
)	O
{	O
++	O
o_addr	int
;	O
lp	pointer
=	O
lp	pointer
->	O
q_forw	pointer
;	O
}	O
else	O
{	O
lp	pointer
=	O
buffer_head	struct
.	O
q_back	pointer
;	O
o_addr	int
=	O
last_addr_	int
;	O
while	O
(	O
o_addr	int
>	O
addr	int
)	O
{	O
--	O
o_addr	int
;	O
lp	pointer
=	O
lp	pointer
->	O
q_back	pointer
;	O
}	O
}	O
}	O
else	O
if	O
(	O
o_addr	int
<=	O
2	int
*	O
addr	int
)	O
while	O
(	O
o_addr	int
>	O
addr	int
)	O
{	O
--	O
o_addr	int
;	O
lp	pointer
=	O
lp	pointer
->	O
q_back	pointer
;	O
}	O
else	O
{	O
lp	pointer
=	O
&	O
buffer_head	struct
;	O
o_addr	int
=	O
0	int
;	O
while	O
(	O
o_addr	int
<	O
addr	int
)	O
{	O
++	O
o_addr	int
;	O
lp	pointer
=	O
lp	pointer
->	O
q_forw	pointer
;	O
}	O
}	O
enable_interrupts	function
(	O
)	O
;	O
return	O
lp	pointer
;	O
}	O
char	O
yank_lines	function
(	O
const	O
int	O
from	int
,	O
const	O
int	O
to	int
)	O
{	O
line_t	struct
*	O
ep	pointer
=	O
search_line_node	function
(	O
inc_addr	function
(	O
to	int
)	O
)	O
;	O
line_t	struct
*	O
bp	pointer
=	O
search_line_node	function
(	O
from	int
)	O
;	O
line_t	struct
*	O
lp	pointer
=	O
&	O
yank_buffer_head	struct
;	O
line_t	struct
*	O
cp	pointer
;	O
clear_yank_buffer	function
(	O
)	O
;	O
while	O
(	O
bp	pointer
!=	O
ep	pointer
)	O
{	O
disable_interrupts	function
(	O
)	O
;	O
cp	pointer
=	O
dup_line_node	function
(	O
bp	pointer
)	O
;	O
if	O
(	O
!	O
cp	pointer
)	O
{	O
enable_interrupts	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
insert_node	function
(	O
cp	pointer
,	O
lp	pointer
)	O
;	O
bp	pointer
=	O
bp	pointer
->	O
q_forw	pointer
;	O
lp	pointer
=	O
cp	pointer
;	O
enable_interrupts	function
(	O
)	O
;	O
}	O
return	O
1	int
;	O
}	O
static	O
undo_t	struct
*	O
ustack	pointer
=	O
0	int
;	O
static	O
int	O
usize	int
=	O
0	int
;	O
static	O
int	O
u_ptr	int
=	O
0	int
;	O
static	O
int	O
u_current_addr	int
=	O
-	O
1	int
;	O
static	O
int	O
u_addr_last	int
=	O
-	O
1	int
;	O
static	O
char	O
u_modified	char
=	O
0	int
;	O
void	O
clear_undo_stack	function
(	O
void	O
)	O
{	O
while	O
(	O
u_ptr	int
--	O
)	O
if	O
(	O
ustack	pointer
[	O
u_ptr	int
]	O
.	O
type	enum
==	O
UDEL	int
)	O
{	O
line_t	struct
*	O
ep	pointer
=	O
ustack	pointer
[	O
u_ptr	int
]	O
.	O
tail	pointer
->	O
q_forw	pointer
;	O
line_t	struct
*	O
lp	pointer
=	O
ustack	pointer
[	O
u_ptr	int
]	O
.	O
head	pointer
;	O
while	O
(	O
lp	pointer
!=	O
ep	pointer
)	O
{	O
line_t	struct
*	O
tl	pointer
=	O
lp	pointer
->	O
q_forw	pointer
;	O
unmark_line_node	function
(	O
lp	pointer
)	O
;	O
free	function
(	O
lp	pointer
)	O
;	O
lp	pointer
=	O
tl	pointer
;	O
}	O
}	O
u_ptr	int
=	O
0	int
;	O
u_current_addr	int
=	O
current_addr_	int
;	O
u_addr_last	int
=	O
last_addr_	int
;	O
u_modified	char
=	O
modified_	char
;	O
}	O
void	O
reset_undo_state	function
(	O
void	O
)	O
{	O
clear_undo_stack	function
(	O
)	O
;	O
u_current_addr	int
=	O
u_addr_last	int
=	O
-	O
1	int
;	O
u_modified	char
=	O
0	int
;	O
}	O
undo_t	struct
*	O
push_undo_atom	function
(	O
const	O
int	O
type	enum
,	O
const	O
int	O
from	int
,	O
const	O
int	O
to	int
)	O
{	O
disable_interrupts	function
(	O
)	O
;	O
if	O
(	O
!	O
resize_undo_buffer	function
(	O
&	O
ustack	pointer
,	O
&	O
usize	int
,	O
(	O
u_ptr	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
undo_t	struct
)	O
)	O
)	O
{	O
show_strerror	function
(	O
0	int
,	O
errno	O
)	O
;	O
set_error_msg	function
(	O
"Memory exhausted"	pointer
)	O
;	O
if	O
(	O
ustack	pointer
)	O
{	O
clear_undo_stack	function
(	O
)	O
;	O
free	function
(	O
ustack	pointer
)	O
;	O
ustack	pointer
=	O
0	int
;	O
usize	int
=	O
u_ptr	int
=	O
0	int
;	O
u_current_addr	int
=	O
u_addr_last	int
=	O
-	O
1	int
;	O
}	O
enable_interrupts	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
enable_interrupts	function
(	O
)	O
;	O
ustack	pointer
[	O
u_ptr	int
]	O
.	O
type	enum
=	O
type	enum
;	O
ustack	pointer
[	O
u_ptr	int
]	O
.	O
tail	pointer
=	O
search_line_node	function
(	O
(	O
to	int
>=	O
0	int
)	O
?	O
to	int
:	O
current_addr_	int
)	O
;	O
ustack	pointer
[	O
u_ptr	int
]	O
.	O
head	pointer
=	O
search_line_node	function
(	O
(	O
from	int
>=	O
0	int
)	O
?	O
from	int
:	O
current_addr_	int
)	O
;	O
return	O
ustack	pointer
+	O
u_ptr	int
++	O
;	O
}	O
char	O
undo	function
(	O
const	O
char	O
isglobal	char
)	O
{	O
int	O
n	int
;	O
const	O
int	O
o_current_addr	int
=	O
current_addr_	int
;	O
const	O
int	O
o_addr_last	int
=	O
last_addr_	int
;	O
const	O
char	O
o_modified	char
=	O
modified_	char
;	O
if	O
(	O
u_ptr	int
<=	O
0	int
||	O
u_current_addr	int
<	O
0	int
||	O
u_addr_last	int
<	O
0	int
)	O
{	O
set_error_msg	function
(	O
"Nothing to undo"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
search_line_node	function
(	O
0	int
)	O
;	O
disable_interrupts	function
(	O
)	O
;	O
for	O
(	O
n	int
=	O
u_ptr	int
-	O
1	int
;	O
n	int
>=	O
0	int
;	O
--	O
n	int
)	O
{	O
switch	O
(	O
ustack	pointer
[	O
n	int
]	O
.	O
type	enum
)	O
{	O
case	O
UADD	int
:	O
link_nodes	function
(	O
ustack	pointer
[	O
n	int
]	O
.	O
head	pointer
->	O
q_back	pointer
,	O
ustack	pointer
[	O
n	int
]	O
.	O
tail	pointer
->	O
q_forw	pointer
)	O
;	O
break	O
;	O
case	O
UDEL	int
:	O
link_nodes	function
(	O
ustack	pointer
[	O
n	int
]	O
.	O
head	pointer
->	O
q_back	pointer
,	O
ustack	pointer
[	O
n	int
]	O
.	O
head	pointer
)	O
;	O
link_nodes	function
(	O
ustack	pointer
[	O
n	int
]	O
.	O
tail	pointer
,	O
ustack	pointer
[	O
n	int
]	O
.	O
tail	pointer
->	O
q_forw	pointer
)	O
;	O
break	O
;	O
case	O
UMOV	int
:	O
case	O
VMOV	int
:	O
link_nodes	function
(	O
ustack	pointer
[	O
n	int
-	O
1	int
]	O
.	O
head	pointer
,	O
ustack	pointer
[	O
n	int
]	O
.	O
head	pointer
->	O
q_forw	pointer
)	O
;	O
link_nodes	function
(	O
ustack	pointer
[	O
n	int
]	O
.	O
tail	pointer
->	O
q_back	pointer
,	O
ustack	pointer
[	O
n	int
-	O
1	int
]	O
.	O
tail	pointer
)	O
;	O
link_nodes	function
(	O
ustack	pointer
[	O
n	int
]	O
.	O
head	pointer
,	O
ustack	pointer
[	O
n	int
]	O
.	O
tail	pointer
)	O
;	O
--	O
n	int
;	O
break	O
;	O
}	O
ustack	pointer
[	O
n	int
]	O
.	O
type	enum
^=	O
1	int
;	O
}	O
for	O
(	O
n	int
=	O
0	int
;	O
2	int
*	O
n	int
<	O
u_ptr	int
-	O
1	int
;	O
++	O
n	int
)	O
{	O
undo_t	struct
tmp	struct
=	O
ustack	pointer
[	O
n	int
]	O
;	O
ustack	pointer
[	O
n	int
]	O
=	O
ustack	pointer
[	O
u_ptr	int
-	O
1	int
-	O
n	int
]	O
;	O
ustack	pointer
[	O
u_ptr	int
-	O
1	int
-	O
n	int
]	O
=	O
tmp	struct
;	O
}	O
if	O
(	O
isglobal	char
)	O
clear_active_list	function
(	O
)	O
;	O
current_addr_	int
=	O
u_current_addr	int
;	O
u_current_addr	int
=	O
o_current_addr	int
;	O
last_addr_	int
=	O
u_addr_last	int
;	O
u_addr_last	int
=	O
o_addr_last	int
;	O
modified_	char
=	O
u_modified	char
;	O
u_modified	char
=	O
o_modified	char
;	O
enable_interrupts	function
(	O
)	O
;	O
return	O
1	int
;	O
}	O
