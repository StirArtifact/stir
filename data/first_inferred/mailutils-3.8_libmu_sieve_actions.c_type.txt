static	O
int	O
sieve_mark_deleted	function
(	O
mu_message_t	pointer
msg	pointer
,	O
int	O
deleted	int
)	O
{	O
mu_attribute_t	pointer
attr	pointer
=	O
0	int
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_message_get_attribute	function
(	O
msg	pointer
,	O
&	O
attr	pointer
)	O
;	O
if	O
(	O
!	O
rc	int
)	O
{	O
if	O
(	O
deleted	int
)	O
rc	int
=	O
mu_attribute_set_deleted	function
(	O
attr	pointer
)	O
;	O
else	O
rc	int
=	O
mu_attribute_unset_deleted	function
(	O
attr	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
sieve_action_stop	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
mu_sieve_log_action	function
(	O
mach	pointer
,	O
"STOP"	pointer
,	O
NULL	O
)	O
;	O
mach	pointer
->	O
pc	long
=	O
0	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
sieve_action_keep	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
mu_sieve_log_action	function
(	O
mach	pointer
,	O
"KEEP"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
mu_sieve_is_dry_run	function
(	O
mach	pointer
)	O
)	O
return	O
0	int
;	O
sieve_mark_deleted	function
(	O
mach	pointer
->	O
msg	pointer
,	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
sieve_action_discard	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
mu_sieve_log_action	function
(	O
mach	pointer
,	O
"DISCARD"	pointer
,	O
_	O
(	O
"marking as deleted"	pointer
)	O
)	O
;	O
if	O
(	O
mu_sieve_is_dry_run	function
(	O
mach	pointer
)	O
)	O
return	O
0	int
;	O
sieve_mark_deleted	function
(	O
mach	pointer
->	O
msg	pointer
,	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
sieve_action_fileinto	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
int	O
rc	int
;	O
int	O
mbflags	int
=	O
0	int
;	O
char	O
*	O
filename	pointer
;	O
char	O
*	O
perms	int
;	O
mu_sieve_get_arg	function
(	O
mach	pointer
,	O
0	int
,	O
SVT_STRING	int
,	O
&	O
filename	pointer
)	O
;	O
if	O
(	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"permissions"	pointer
,	O
SVT_STRING	int
,	O
&	O
perms	int
)	O
)	O
{	O
const	O
char	O
*	O
p	pointer
;	O
if	O
(	O
mu_parse_stream_perm_string	function
(	O
&	O
mbflags	int
,	O
perms	int
,	O
&	O
p	pointer
)	O
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"invalid permissions (near %s)"	pointer
)	O
,	O
p	pointer
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
}	O
mu_sieve_log_action	function
(	O
mach	pointer
,	O
"FILEINTO"	pointer
,	O
_	O
(	O
"delivering into %s"	pointer
)	O
,	O
filename	pointer
)	O
;	O
if	O
(	O
mu_sieve_is_dry_run	function
(	O
mach	pointer
)	O
)	O
return	O
0	int
;	O
rc	int
=	O
mu_message_save_to_mailbox	function
(	O
mach	pointer
->	O
msg	pointer
,	O
filename	pointer
,	O
mbflags	int
)	O
;	O
if	O
(	O
rc	int
)	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"cannot save to mailbox: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
else	O
sieve_mark_deleted	function
(	O
mach	pointer
->	O
msg	pointer
,	O
1	int
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_sieve_get_message_sender	function
(	O
mu_message_t	pointer
msg	pointer
,	O
char	O
*	O
*	O
ptext	pointer
)	O
{	O
int	O
rc	int
;	O
mu_envelope_t	pointer
envelope	pointer
;	O
rc	int
=	O
mu_message_get_envelope	function
(	O
msg	pointer
,	O
&	O
envelope	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_envelope_aget_sender	function
(	O
envelope	pointer
,	O
ptext	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_header_t	pointer
hdr	pointer
=	O
NULL	O
;	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
if	O
(	O
(	O
rc	int
=	O
mu_header_aget_value	O
(	O
hdr	pointer
,	O
MU_HEADER_SENDER	pointer
,	O
ptext	pointer
)	O
)	O
)	O
rc	int
=	O
mu_header_aget_value	O
(	O
hdr	pointer
,	O
MU_HEADER_FROM	pointer
,	O
ptext	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
void	O
mime_create_reason	function
(	O
mu_mime_t	pointer
mime	pointer
,	O
mu_message_t	pointer
msg	pointer
,	O
const	O
char	O
*	O
text	pointer
)	O
{	O
mu_message_t	pointer
newmsg	pointer
;	O
mu_stream_t	pointer
stream	pointer
;	O
time_t	long
t	long
;	O
struct	O
tm	struct
*	O
tm	struct
;	O
char	O
*	O
sender	pointer
;	O
mu_body_t	pointer
body	pointer
;	O
mu_header_t	pointer
hdr	pointer
;	O
static	O
char	O
*	O
content_header	pointer
=	O
"Content-Type: text/plain;charset="	pointer
MU_SIEVE_CHARSET	pointer
"\n"	pointer
"Content-Transfer-Encoding: 8bit\n"	pointer
;	O
mu_message_create	function
(	O
&	O
newmsg	pointer
,	O
NULL	O
)	O
;	O
mu_message_get_body	function
(	O
newmsg	pointer
,	O
&	O
body	pointer
)	O
;	O
mu_body_get_streamref	function
(	O
body	pointer
,	O
&	O
stream	pointer
)	O
;	O
time	struct
(	O
&	O
t	long
)	O
;	O
tm	struct
=	O
localtime	function
(	O
&	O
t	long
)	O
;	O
mu_sieve_get_message_sender	function
(	O
msg	pointer
,	O
&	O
sender	pointer
)	O
;	O
mu_c_streamftime	function
(	O
stream	pointer
,	O
"The original message was received at "	pointer
"%a, %b %d %H:%M:%S %Y %Z"	pointer
,	O
tm	struct
,	O
NULL	O
)	O
;	O
mu_stream_printf	function
(	O
stream	pointer
,	O
" from %s.\n"	pointer
,	O
sender	pointer
)	O
;	O
free	function
(	O
sender	pointer
)	O
;	O
mu_stream_printf	function
(	O
stream	pointer
,	O
"Message was refused by recipient's mail filtering program.\n"	pointer
)	O
;	O
mu_stream_printf	function
(	O
stream	pointer
,	O
"Reason given was as follows:\n\n"	pointer
)	O
;	O
mu_stream_printf	function
(	O
stream	pointer
,	O
"%s"	pointer
,	O
text	pointer
)	O
;	O
mu_stream_close	function
(	O
stream	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
stream	pointer
)	O
;	O
mu_header_create	function
(	O
&	O
hdr	pointer
,	O
content_header	pointer
,	O
strlen	function
(	O
content_header	pointer
)	O
)	O
;	O
mu_message_set_header	function
(	O
newmsg	pointer
,	O
hdr	pointer
,	O
NULL	O
)	O
;	O
mu_mime_add_part	function
(	O
mime	pointer
,	O
newmsg	pointer
)	O
;	O
mu_message_unref	function
(	O
newmsg	pointer
)	O
;	O
}	O
static	O
void	O
mime_create_ds	function
(	O
mu_mime_t	pointer
mime	pointer
,	O
mu_message_t	pointer
orig	pointer
)	O
{	O
mu_message_t	pointer
newmsg	pointer
;	O
mu_stream_t	pointer
stream	pointer
;	O
mu_header_t	pointer
hdr	pointer
;	O
mu_body_t	pointer
body	pointer
;	O
char	O
*	O
email	pointer
;	O
struct	O
tm	struct
tm	struct
,	O
*	O
tmp	pointer
;	O
struct	O
mu_timezone	struct
tz	pointer
;	O
mu_envelope_t	pointer
env	pointer
;	O
const	O
char	O
*	O
p	pointer
;	O
time_t	long
t	long
=	O
time	struct
(	O
NULL	O
)	O
;	O
mu_message_create	function
(	O
&	O
newmsg	pointer
,	O
NULL	O
)	O
;	O
mu_message_get_header	function
(	O
newmsg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
mu_header_set_value	function
(	O
hdr	pointer
,	O
"Content-Type"	pointer
,	O
"message/delivery-status"	pointer
,	O
1	int
)	O
;	O
mu_message_get_body	function
(	O
newmsg	pointer
,	O
&	O
body	pointer
)	O
;	O
mu_body_get_streamref	function
(	O
body	pointer
,	O
&	O
stream	pointer
)	O
;	O
mu_stream_printf	function
(	O
stream	pointer
,	O
"Reporting-UA: sieve; %s\n"	pointer
,	O
PACKAGE_STRING	pointer
)	O
;	O
mu_message_get_envelope	function
(	O
orig	pointer
,	O
&	O
env	pointer
)	O
;	O
if	O
(	O
mu_envelope_sget_date	function
(	O
env	pointer
,	O
&	O
p	pointer
)	O
==	O
0	int
&&	O
mu_scan_datetime	function
(	O
p	pointer
,	O
MU_DATETIME_FROM	pointer
,	O
&	O
tm	struct
,	O
&	O
tz	pointer
,	O
NULL	O
)	O
==	O
0	int
)	O
{	O
tmp	pointer
=	O
&	O
tm	struct
;	O
}	O
else	O
{	O
tmp	pointer
=	O
localtime	function
(	O
&	O
t	long
)	O
;	O
mu_datetime_tz_local	function
(	O
&	O
tz	pointer
)	O
;	O
}	O
mu_c_streamftime	function
(	O
stream	pointer
,	O
"Arrival-Date: %a, %b %d %H:%M:%S %Y %Z%n"	pointer
,	O
tmp	pointer
,	O
&	O
tz	pointer
)	O
;	O
email	pointer
=	O
mu_get_user_email	function
(	O
NULL	O
)	O
;	O
mu_stream_printf	function
(	O
stream	pointer
,	O
"Final-Recipient: RFC822; %s\n"	pointer
,	O
email	pointer
?	O
email	pointer
:	O
"unknown"	pointer
)	O
;	O
free	function
(	O
email	pointer
)	O
;	O
mu_stream_printf	function
(	O
stream	pointer
,	O
"Action: deleted\n"	pointer
)	O
;	O
mu_stream_printf	function
(	O
stream	pointer
,	O
"Disposition: automatic-action/MDN-sent-automatically;deleted\n"	pointer
)	O
;	O
tmp	pointer
=	O
localtime	function
(	O
&	O
t	long
)	O
;	O
mu_datetime_tz_local	function
(	O
&	O
tz	pointer
)	O
;	O
mu_c_streamftime	function
(	O
stream	pointer
,	O
"Last-Attempt-Date: %a, %b %d %H:%M:%S %Y %Z%n"	pointer
,	O
tmp	pointer
,	O
&	O
tz	pointer
)	O
;	O
mu_stream_close	function
(	O
stream	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
stream	pointer
)	O
;	O
mu_mime_add_part	function
(	O
mime	pointer
,	O
newmsg	pointer
)	O
;	O
mu_message_unref	function
(	O
newmsg	pointer
)	O
;	O
}	O
static	O
int	O
mime_create_quote	function
(	O
mu_mime_t	pointer
mime	pointer
,	O
mu_message_t	pointer
msg	pointer
)	O
{	O
mu_message_t	pointer
newmsg	pointer
;	O
mu_stream_t	pointer
istream	pointer
,	O
ostream	pointer
;	O
mu_header_t	pointer
hdr	pointer
;	O
int	O
rc	int
;	O
mu_body_t	pointer
body	pointer
;	O
mu_message_create	function
(	O
&	O
newmsg	pointer
,	O
NULL	O
)	O
;	O
mu_message_get_header	function
(	O
newmsg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
mu_header_set_value	function
(	O
hdr	pointer
,	O
"Content-Type"	pointer
,	O
"message/rfc822"	pointer
,	O
1	int
)	O
;	O
mu_message_get_body	function
(	O
newmsg	pointer
,	O
&	O
body	pointer
)	O
;	O
mu_body_get_streamref	function
(	O
body	pointer
,	O
&	O
ostream	pointer
)	O
;	O
mu_message_get_streamref	function
(	O
msg	pointer
,	O
&	O
istream	pointer
)	O
;	O
rc	int
=	O
mu_stream_copy	function
(	O
ostream	pointer
,	O
istream	pointer
,	O
0	int
,	O
NULL	O
)	O
;	O
mu_stream_destroy	function
(	O
&	O
istream	pointer
)	O
;	O
mu_stream_close	function
(	O
ostream	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
ostream	pointer
)	O
;	O
mu_mime_add_part	function
(	O
mime	pointer
,	O
newmsg	pointer
)	O
;	O
mu_message_unref	function
(	O
newmsg	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
build_mime	function
(	O
mu_mime_t	pointer
*	O
pmime	pointer
,	O
mu_message_t	pointer
msg	pointer
,	O
const	O
char	O
*	O
text	pointer
)	O
{	O
mu_mime_t	pointer
mime	pointer
=	O
NULL	O
;	O
int	O
status	int
;	O
mu_mime_create	function
(	O
&	O
mime	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
mime_create_reason	function
(	O
mime	pointer
,	O
msg	pointer
,	O
text	pointer
)	O
;	O
mime_create_ds	function
(	O
mime	pointer
,	O
msg	pointer
)	O
;	O
status	int
=	O
mime_create_quote	function
(	O
mime	pointer
,	O
msg	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_mime_destroy	function
(	O
&	O
mime	pointer
)	O
;	O
return	O
status	int
;	O
}	O
*	O
pmime	pointer
=	O
mime	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
sieve_action_reject	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
mu_mime_t	pointer
mime	pointer
=	O
NULL	O
;	O
mu_mailer_t	pointer
mailer	pointer
=	O
mu_sieve_get_mailer	function
(	O
mach	pointer
)	O
;	O
int	O
rc	int
;	O
mu_message_t	pointer
newmsg	pointer
;	O
char	O
*	O
addrtext	pointer
;	O
mu_address_t	pointer
from	pointer
,	O
to	pointer
;	O
mu_header_t	pointer
hdr	pointer
;	O
char	O
*	O
text	pointer
;	O
mu_sieve_get_arg	function
(	O
mach	pointer
,	O
0	int
,	O
SVT_STRING	int
,	O
&	O
text	pointer
)	O
;	O
mu_sieve_log_action	function
(	O
mach	pointer
,	O
"REJECT"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
mu_sieve_is_dry_run	function
(	O
mach	pointer
)	O
)	O
return	O
0	int
;	O
rc	int
=	O
build_mime	function
(	O
&	O
mime	pointer
,	O
mach	pointer
->	O
msg	pointer
,	O
text	pointer
)	O
;	O
mu_mime_get_message	function
(	O
mime	pointer
,	O
&	O
newmsg	pointer
)	O
;	O
mu_message_unref	function
(	O
newmsg	pointer
)	O
;	O
mu_sieve_get_message_sender	function
(	O
mach	pointer
->	O
msg	pointer
,	O
&	O
addrtext	pointer
)	O
;	O
mu_message_get_header	function
(	O
newmsg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
mu_header_prepend	function
(	O
hdr	pointer
,	O
MU_HEADER_TO	pointer
,	O
addrtext	pointer
)	O
;	O
rc	int
=	O
mu_address_create	function
(	O
&	O
to	pointer
,	O
addrtext	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"%lu: cannot create recipient address <%s>: %s"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
addrtext	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
free	function
(	O
addrtext	pointer
)	O
;	O
goto	O
end	struct
;	O
}	O
free	function
(	O
addrtext	pointer
)	O
;	O
rc	int
=	O
mu_address_create	function
(	O
&	O
from	pointer
,	O
mu_sieve_get_daemon_email	function
(	O
mach	pointer
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"%lu: cannot create sender address <%s>: %s"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
mu_sieve_get_daemon_email	function
(	O
mach	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
goto	O
end	struct
;	O
}	O
rc	int
=	O
mu_mailer_open	function
(	O
mailer	pointer
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_url_t	pointer
url	pointer
=	O
NULL	O
;	O
mu_mailer_get_url	function
(	O
mailer	pointer
,	O
&	O
url	pointer
)	O
;	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"%lu: cannot open mailer %s: %s"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
mu_url_to_string	function
(	O
url	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
goto	O
end	struct
;	O
}	O
rc	int
=	O
mu_mailer_send_message	function
(	O
mailer	pointer
,	O
newmsg	pointer
,	O
from	pointer
,	O
to	pointer
)	O
;	O
mu_mailer_close	function
(	O
mailer	pointer
)	O
;	O
end	struct
:	O
sieve_mark_deleted	function
(	O
mach	pointer
->	O
msg	pointer
,	O
rc	int
==	O
0	int
)	O
;	O
mu_mime_destroy	function
(	O
&	O
mime	pointer
)	O
;	O
mu_address_destroy	function
(	O
&	O
from	pointer
)	O
;	O
mu_address_destroy	function
(	O
&	O
to	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
check_redirect_loop	function
(	O
mu_message_t	pointer
msg	pointer
)	O
{	O
mu_header_t	pointer
hdr	pointer
=	O
NULL	O
;	O
size_t	long
i	long
,	O
num	long
=	O
0	int
;	O
char	O
buf	pointer
[	O
512	int
]	O
;	O
int	O
loop	int
=	O
0	int
;	O
char	O
*	O
email	pointer
=	O
mu_get_user_email	function
(	O
NULL	O
)	O
;	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
mu_header_get_field_count	function
(	O
hdr	pointer
,	O
&	O
num	long
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
!	O
loop	int
&&	O
i	long
<=	O
num	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
mu_header_get_field_name	function
(	O
hdr	pointer
,	O
i	long
,	O
buf	pointer
,	O
sizeof	O
buf	pointer
,	O
NULL	O
)	O
)	O
continue	O
;	O
if	O
(	O
mu_c_strcasecmp	function
(	O
buf	pointer
,	O
"X-Loop-Prevention"	pointer
)	O
==	O
0	int
)	O
{	O
size_t	long
j	long
,	O
cnt	pointer
=	O
0	int
;	O
mu_address_t	pointer
addr	int
;	O
if	O
(	O
mu_header_get_field_value	function
(	O
hdr	pointer
,	O
i	long
,	O
buf	pointer
,	O
sizeof	O
buf	pointer
,	O
NULL	O
)	O
)	O
continue	O
;	O
if	O
(	O
mu_address_create	function
(	O
&	O
addr	int
,	O
buf	pointer
)	O
)	O
continue	O
;	O
if	O
(	O
mu_address_get_count	function
(	O
addr	int
,	O
&	O
cnt	pointer
)	O
==	O
0	int
)	O
{	O
for	O
(	O
j	long
=	O
1	int
;	O
!	O
loop	int
&&	O
j	long
<=	O
cnt	pointer
;	O
j	long
++	O
)	O
{	O
if	O
(	O
mu_address_get_email	function
(	O
addr	int
,	O
j	long
,	O
buf	pointer
,	O
sizeof	O
buf	pointer
,	O
NULL	O
)	O
==	O
0	int
&&	O
mu_c_strcasecmp	function
(	O
buf	pointer
,	O
email	pointer
)	O
==	O
0	int
)	O
loop	int
=	O
1	int
;	O
}	O
}	O
mu_address_destroy	function
(	O
&	O
addr	int
)	O
;	O
}	O
}	O
free	function
(	O
email	pointer
)	O
;	O
return	O
loop	int
;	O
}	O
static	O
int	O
sieve_action_redirect	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
,	O
newmsg	pointer
=	O
NULL	O
;	O
mu_address_t	pointer
addr	int
=	O
NULL	O
,	O
from	pointer
=	O
NULL	O
;	O
mu_header_t	pointer
hdr	pointer
=	O
NULL	O
;	O
int	O
rc	int
;	O
char	O
*	O
fromaddr	pointer
,	O
*	O
p	pointer
;	O
mu_mailer_t	pointer
mailer	pointer
=	O
mu_sieve_get_mailer	function
(	O
mach	pointer
)	O
;	O
char	O
*	O
addrstr	pointer
;	O
mu_sieve_get_arg	function
(	O
mach	pointer
,	O
0	int
,	O
SVT_STRING	int
,	O
&	O
addrstr	pointer
)	O
;	O
rc	int
=	O
mu_address_create	function
(	O
&	O
addr	int
,	O
addrstr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"%lu: parsing recipient address `%s' failed: %s"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
addrstr	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
mu_sieve_log_action	function
(	O
mach	pointer
,	O
"REDIRECT"	pointer
,	O
_	O
(	O
"to %s"	pointer
)	O
,	O
addrstr	pointer
)	O
;	O
if	O
(	O
mu_sieve_is_dry_run	function
(	O
mach	pointer
)	O
)	O
return	O
0	int
;	O
msg	pointer
=	O
mu_sieve_get_message	function
(	O
mach	pointer
)	O
;	O
if	O
(	O
check_redirect_loop	function
(	O
msg	pointer
)	O
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"%lu: redirection loop detected"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
)	O
;	O
goto	O
end	struct
;	O
}	O
rc	int
=	O
mu_sieve_get_message_sender	function
(	O
msg	pointer
,	O
&	O
fromaddr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"%lu: cannot get envelope sender: %s"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
goto	O
end	struct
;	O
}	O
rc	int
=	O
mu_address_create	function
(	O
&	O
from	pointer
,	O
fromaddr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"%lu: cannot create sender address <%s>: %s"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
fromaddr	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
free	function
(	O
fromaddr	pointer
)	O
;	O
goto	O
end	struct
;	O
}	O
free	function
(	O
fromaddr	pointer
)	O
;	O
rc	int
=	O
mu_message_create_copy	function
(	O
&	O
newmsg	pointer
,	O
msg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"%lu: cannot copy message: %s"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
goto	O
end	struct
;	O
}	O
mu_message_get_header	function
(	O
newmsg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
p	pointer
=	O
mu_get_user_email	function
(	O
NULL	O
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
mu_header_set_value	function
(	O
hdr	pointer
,	O
"X-Loop-Prevention"	pointer
,	O
p	pointer
,	O
0	int
)	O
;	O
free	function
(	O
p	pointer
)	O
;	O
}	O
else	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"%lu: cannot get my email address"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
)	O
;	O
goto	O
end	struct
;	O
}	O
rc	int
=	O
mu_mailer_open	function
(	O
mailer	pointer
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_url_t	pointer
url	pointer
=	O
NULL	O
;	O
mu_mailer_get_url	function
(	O
mailer	pointer
,	O
&	O
url	pointer
)	O
;	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"%lu: cannot open mailer %s: %s"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
mu_url_to_string	function
(	O
url	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
goto	O
end	struct
;	O
}	O
rc	int
=	O
mu_mailer_send_message	function
(	O
mailer	pointer
,	O
newmsg	pointer
,	O
from	pointer
,	O
addr	int
)	O
;	O
mu_mailer_close	function
(	O
mailer	pointer
)	O
;	O
end	struct
:	O
sieve_mark_deleted	function
(	O
mach	pointer
->	O
msg	pointer
,	O
rc	int
==	O
0	int
)	O
;	O
mu_message_destroy	function
(	O
&	O
newmsg	pointer
,	O
NULL	O
)	O
;	O
mu_address_destroy	function
(	O
&	O
from	pointer
)	O
;	O
mu_address_destroy	function
(	O
&	O
addr	int
)	O
;	O
return	O
rc	int
;	O
}	O
mu_sieve_data_type	enum
fileinto_args	array
[	O
]	O
=	O
{	O
SVT_STRING	int
,	O
SVT_VOID	int
}	O
;	O
static	O
int	O
perms_tag_checker	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
size_t	long
i	long
;	O
int	O
err	int
=	O
0	int
;	O
if	O
(	O
mach	pointer
->	O
tagcount	long
==	O
0	int
)	O
return	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mach	pointer
->	O
tagcount	long
;	O
i	long
++	O
)	O
{	O
int	O
flag	int
;	O
const	O
char	O
*	O
p	pointer
;	O
mu_sieve_value_t	struct
*	O
t	long
=	O
mu_sieve_get_tag_n	function
(	O
mach	pointer
,	O
i	long
)	O
;	O
if	O
(	O
strcmp	function
(	O
t	long
->	O
tag	pointer
,	O
"permissions"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
mu_parse_stream_perm_string	function
(	O
&	O
flag	int
,	O
t	long
->	O
v	array
.	O
string	pointer
,	O
&	O
p	pointer
)	O
)	O
{	O
mu_diag_at_locus_range	function
(	O
MU_LOG_ERROR	int
,	O
&	O
t	long
->	O
locus	struct
,	O
_	O
(	O
"invalid permissions (near %s)"	pointer
)	O
,	O
p	pointer
)	O
;	O
mu_i_sv_error	function
(	O
mach	pointer
)	O
;	O
err	int
=	O
1	int
;	O
}	O
}	O
}	O
return	O
err	int
;	O
}	O
static	O
mu_sieve_tag_def_t	struct
perms_tags	array
[	O
]	O
=	O
{	O
{	O
"permissions"	pointer
,	O
SVT_STRING	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_tag_group_t	struct
fileinto_tag_groups	array
[	O
]	O
=	O
{	O
{	O
perms_tags	array
,	O
perms_tag_checker	function
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
void	O
mu_i_sv_register_standard_actions	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
mu_sieve_register_action	function
(	O
mach	pointer
,	O
"stop"	pointer
,	O
sieve_action_stop	function
,	O
NULL	O
,	O
NULL	O
,	O
1	int
)	O
;	O
mu_sieve_register_action	function
(	O
mach	pointer
,	O
"keep"	pointer
,	O
sieve_action_keep	function
,	O
NULL	O
,	O
NULL	O
,	O
1	int
)	O
;	O
mu_sieve_register_action	function
(	O
mach	pointer
,	O
"discard"	pointer
,	O
sieve_action_discard	function
,	O
NULL	O
,	O
NULL	O
,	O
1	int
)	O
;	O
mu_sieve_register_action	function
(	O
mach	pointer
,	O
"fileinto"	pointer
,	O
sieve_action_fileinto	function
,	O
fileinto_args	array
,	O
fileinto_tag_groups	array
,	O
0	int
)	O
;	O
mu_sieve_register_action	function
(	O
mach	pointer
,	O
"reject"	pointer
,	O
sieve_action_reject	function
,	O
fileinto_args	array
,	O
NULL	O
,	O
0	int
)	O
;	O
mu_sieve_register_action	function
(	O
mach	pointer
,	O
"redirect"	pointer
,	O
sieve_action_redirect	function
,	O
fileinto_args	array
,	O
NULL	O
,	O
0	int
)	O
;	O
}	O
