extern	O
struct	O
layer	struct
*	O
flayer	pointer
;	O
extern	O
int	O
eff_uid	int
,	O
real_uid	int
;	O
extern	O
int	O
eff_gid	int
,	O
real_gid	int
;	O
extern	O
struct	O
mline	struct
mline_old	struct
;	O
extern	O
struct	O
mchar	struct
mchar_blank	struct
;	O
extern	O
unsigned	O
char	O
*	O
null	pointer
,	O
*	O
blank	pointer
;	O
char	O
*	O
SaveStr	function
(	O
str	pointer
)	O
register	O
const	O
char	O
*	O
str	pointer
;	O
{	O
register	O
char	O
*	O
cp	pointer
;	O
if	O
(	O
(	O
cp	pointer
=	O
malloc	function
(	O
strlen	function
(	O
str	pointer
)	O
+	O
1	int
)	O
)	O
==	O
NULL	O
)	O
Panic	function
(	O
0	int
,	O
"%s"	pointer
,	O
strnomem	array
)	O
;	O
else	O
strcpy	function
(	O
cp	pointer
,	O
str	pointer
)	O
;	O
return	O
cp	pointer
;	O
}	O
char	O
*	O
SaveStrn	function
(	O
str	pointer
,	O
n	int
)	O
register	O
const	O
char	O
*	O
str	pointer
;	O
int	O
n	int
;	O
{	O
register	O
char	O
*	O
cp	pointer
;	O
if	O
(	O
(	O
cp	pointer
=	O
malloc	function
(	O
n	int
+	O
1	int
)	O
)	O
==	O
NULL	O
)	O
Panic	function
(	O
0	int
,	O
"%s"	pointer
,	O
strnomem	array
)	O
;	O
else	O
{	O
bcopy	function
(	O
(	O
char	O
*	O
)	O
str	pointer
,	O
cp	pointer
,	O
n	int
)	O
;	O
cp	pointer
[	O
n	int
]	O
=	O
0	int
;	O
}	O
return	O
cp	pointer
;	O
}	O
char	O
*	O
InStr	function
(	O
str	pointer
,	O
pat	pointer
)	O
char	O
*	O
str	pointer
;	O
const	O
char	O
*	O
pat	pointer
;	O
{	O
int	O
npat	int
=	O
strlen	function
(	O
pat	pointer
)	O
;	O
for	O
(	O
;	O
*	O
str	pointer
;	O
str	pointer
++	O
)	O
if	O
(	O
!	O
strncmp	function
(	O
str	pointer
,	O
pat	pointer
,	O
npat	int
)	O
)	O
return	O
str	pointer
;	O
return	O
0	int
;	O
}	O
void	O
centerline	function
(	O
str	pointer
,	O
y	int
)	O
char	O
*	O
str	pointer
;	O
int	O
y	int
;	O
{	O
int	O
l	int
,	O
n	int
;	O
ASSERT	O
(	O
flayer	pointer
)	O
;	O
n	int
=	O
strlen	function
(	O
str	pointer
)	O
;	O
if	O
(	O
n	int
>	O
flayer	pointer
->	O
l_width	int
-	O
1	int
)	O
n	int
=	O
flayer	pointer
->	O
l_width	int
-	O
1	int
;	O
l	int
=	O
(	O
flayer	pointer
->	O
l_width	int
-	O
1	int
-	O
n	int
)	O
/	O
2	int
;	O
LPutStr	function
(	O
flayer	pointer
,	O
str	pointer
,	O
n	int
,	O
&	O
mchar_blank	struct
,	O
l	int
,	O
y	int
)	O
;	O
}	O
void	O
leftline	function
(	O
str	pointer
,	O
y	int
,	O
rend	pointer
)	O
char	O
*	O
str	pointer
;	O
int	O
y	int
;	O
struct	O
mchar	struct
*	O
rend	pointer
;	O
{	O
int	O
l	int
,	O
n	int
;	O
struct	O
mchar	struct
mchar_dol	struct
;	O
mchar_dol	struct
=	O
mchar_blank	struct
;	O
mchar_dol	struct
.	O
image	char
=	O
'$'	O
;	O
ASSERT	O
(	O
flayer	pointer
)	O
;	O
l	int
=	O
n	int
=	O
strlen	function
(	O
str	pointer
)	O
;	O
if	O
(	O
n	int
>	O
flayer	pointer
->	O
l_width	int
-	O
1	int
)	O
n	int
=	O
flayer	pointer
->	O
l_width	int
-	O
1	int
;	O
LPutStr	function
(	O
flayer	pointer
,	O
str	pointer
,	O
n	int
,	O
rend	pointer
?	O
rend	pointer
:	O
&	O
mchar_blank	struct
,	O
0	int
,	O
y	int
)	O
;	O
if	O
(	O
n	int
!=	O
l	int
)	O
LPutChar	function
(	O
flayer	pointer
,	O
&	O
mchar_dol	struct
,	O
n	int
,	O
y	int
)	O
;	O
}	O
char	O
*	O
Filename	function
(	O
s	pointer
)	O
char	O
*	O
s	pointer
;	O
{	O
register	O
char	O
*	O
p	pointer
=	O
s	pointer
;	O
if	O
(	O
p	pointer
)	O
while	O
(	O
*	O
p	pointer
)	O
if	O
(	O
*	O
p	pointer
++	O
==	O
'/'	O
)	O
s	pointer
=	O
p	pointer
;	O
return	O
s	pointer
;	O
}	O
char	O
*	O
stripdev	function
(	O
nam	pointer
)	O
char	O
*	O
nam	pointer
;	O
{	O
if	O
(	O
nam	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
strncmp	function
(	O
nam	pointer
,	O
"/dev/"	pointer
,	O
5	int
)	O
==	O
0	int
)	O
return	O
nam	pointer
+	O
5	int
;	O
return	O
nam	pointer
;	O
}	O
sigret_t	void
(	O
*	O
xsignal	function
(	O
sig	int
,	O
func	pointer
)	O
)	O
__P	O
(	O
SIGPROTOARG	O
)	O
int	O
sig	int
;	O
sigret_t	void
(	O
*	O
func	pointer
)	O
__P	O
(	O
SIGPROTOARG	O
)	O
;	O
{	O
struct	O
sigaction	struct
osa	struct
,	O
sa	struct
;	O
sa	struct
.	O
sa_handler	pointer
=	O
func	pointer
;	O
(	O
void	O
)	O
sigemptyset	function
(	O
&	O
sa	struct
.	O
sa_mask	struct
)	O
;	O
sa	struct
.	O
sa_flags	int
=	O
(	O
sig	int
==	O
SIGCHLD	int
?	O
SA_RESTART	int
:	O
0	int
)	O
;	O
if	O
(	O
sigaction	struct
(	O
sig	int
,	O
&	O
sa	struct
,	O
&	O
osa	struct
)	O
)	O
return	O
(	O
sigret_t	void
(	O
*	O
)	O
__P	O
(	O
SIGPROTOARG	O
)	O
)	O
-	O
1	int
;	O
return	O
osa	struct
.	O
sa_handler	pointer
;	O
}	O
void	O
xseteuid	function
(	O
euid	int
)	O
int	O
euid	int
;	O
{	O
int	O
oeuid	int
;	O
oeuid	int
=	O
geteuid	function
(	O
)	O
;	O
if	O
(	O
oeuid	int
==	O
euid	int
)	O
return	O
;	O
if	O
(	O
(	O
int	O
)	O
getuid	function
(	O
)	O
!=	O
euid	int
)	O
oeuid	int
=	O
getuid	function
(	O
)	O
;	O
if	O
(	O
setreuid	function
(	O
oeuid	int
,	O
euid	int
)	O
)	O
Panic	function
(	O
errno	O
,	O
"setreuid"	pointer
)	O
;	O
}	O
void	O
xsetegid	function
(	O
egid	int
)	O
int	O
egid	int
;	O
{	O
int	O
oegid	int
;	O
oegid	int
=	O
getegid	function
(	O
)	O
;	O
if	O
(	O
oegid	int
==	O
egid	int
)	O
return	O
;	O
if	O
(	O
(	O
int	O
)	O
getgid	function
(	O
)	O
!=	O
egid	int
)	O
oegid	int
=	O
getgid	function
(	O
)	O
;	O
if	O
(	O
setregid	function
(	O
oegid	int
,	O
egid	int
)	O
)	O
Panic	function
(	O
errno	O
,	O
"setregid"	pointer
)	O
;	O
}	O
void	O
bclear	function
(	O
p	pointer
,	O
n	int
)	O
char	O
*	O
p	pointer
;	O
int	O
n	int
;	O
{	O
bcopy	function
(	O
(	O
char	O
*	O
)	O
blank	pointer
,	O
p	pointer
,	O
n	int
)	O
;	O
}	O
void	O
Kill	function
(	O
pid	int
,	O
sig	int
)	O
int	O
pid	int
,	O
sig	int
;	O
{	O
if	O
(	O
pid	int
<	O
2	int
)	O
return	O
;	O
(	O
void	O
)	O
kill	function
(	O
pid	int
,	O
sig	int
)	O
;	O
}	O
void	O
closeallfiles	function
(	O
except	int
)	O
int	O
except	int
;	O
{	O
int	O
f	int
;	O
{	O
struct	O
pollfd	struct
pfd	array
[	O
1024	int
]	O
;	O
int	O
maxfd	int
,	O
i	int
,	O
ret	int
,	O
z	int
;	O
i	int
=	O
3	int
;	O
maxfd	int
=	O
getdtablesize	function
(	O
)	O
;	O
while	O
(	O
i	int
<	O
maxfd	int
)	O
{	O
memset	function
(	O
pfd	array
,	O
0	int
,	O
sizeof	O
(	O
pfd	array
)	O
)	O
;	O
z	int
=	O
0	int
;	O
for	O
(	O
f	int
=	O
i	int
;	O
f	int
<	O
maxfd	int
&&	O
f	int
<	O
i	int
+	O
1024	int
;	O
f	int
++	O
)	O
pfd	array
[	O
z	int
++	O
]	O
.	O
fd	int
=	O
f	int
;	O
ret	int
=	O
poll	function
(	O
pfd	array
,	O
f	int
-	O
i	int
,	O
0	int
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
Panic	function
(	O
errno	O
,	O
"poll"	pointer
)	O
;	O
z	int
=	O
0	int
;	O
for	O
(	O
f	int
=	O
i	int
;	O
f	int
<	O
maxfd	int
&&	O
f	int
<	O
i	int
+	O
1024	int
;	O
f	int
++	O
)	O
if	O
(	O
!	O
(	O
pfd	array
[	O
z	int
++	O
]	O
.	O
revents	short
&	O
POLLNVAL	int
)	O
&&	O
f	int
!=	O
except	int
)	O
close	pointer
(	O
f	int
)	O
;	O
i	int
=	O
f	int
;	O
}	O
}	O
}	O
static	O
int	O
UserSTAT	int
;	O
int	O
UserContext	function
(	O
)	O
{	O
xseteuid	function
(	O
real_uid	int
)	O
;	O
xsetegid	function
(	O
real_gid	int
)	O
;	O
return	O
1	int
;	O
}	O
void	O
UserReturn	function
(	O
val	array
)	O
int	O
val	array
;	O
{	O
xseteuid	function
(	O
eff_uid	int
)	O
;	O
xsetegid	function
(	O
eff_gid	int
)	O
;	O
UserSTAT	int
=	O
val	array
;	O
}	O
int	O
UserStatus	function
(	O
)	O
{	O
return	O
UserSTAT	int
;	O
}	O
int	O
AddXChar	function
(	O
buf	pointer
,	O
ch	int
)	O
char	O
*	O
buf	pointer
;	O
int	O
ch	int
;	O
{	O
char	O
*	O
p	pointer
=	O
buf	pointer
;	O
if	O
(	O
ch	int
<	O
' '	O
||	O
ch	int
==	O
0x7f	int
)	O
{	O
*	O
p	pointer
++	O
=	O
'^'	O
;	O
*	O
p	pointer
++	O
=	O
ch	int
^	O
0x40	int
;	O
}	O
else	O
if	O
(	O
ch	int
>=	O
0x80	int
)	O
{	O
*	O
p	pointer
++	O
=	O
'\\'	O
;	O
*	O
p	pointer
++	O
=	O
(	O
ch	int
>>	O
6	int
&	O
7	int
)	O
+	O
'0'	O
;	O
*	O
p	pointer
++	O
=	O
(	O
ch	int
>>	O
3	int
&	O
7	int
)	O
+	O
'0'	O
;	O
*	O
p	pointer
++	O
=	O
(	O
ch	int
>>	O
0	int
&	O
7	int
)	O
+	O
'0'	O
;	O
}	O
else	O
*	O
p	pointer
++	O
=	O
ch	int
;	O
return	O
p	pointer
-	O
buf	pointer
;	O
}	O
int	O
AddXChars	function
(	O
buf	pointer
,	O
len	int
,	O
str	pointer
)	O
char	O
*	O
buf	pointer
,	O
*	O
str	pointer
;	O
int	O
len	int
;	O
{	O
char	O
*	O
p	pointer
;	O
if	O
(	O
str	pointer
==	O
0	int
)	O
{	O
*	O
buf	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
len	int
-=	O
4	int
;	O
for	O
(	O
p	pointer
=	O
buf	pointer
;	O
p	pointer
<	O
buf	pointer
+	O
len	int
&&	O
*	O
str	pointer
;	O
str	pointer
++	O
)	O
{	O
if	O
(	O
*	O
str	pointer
==	O
' '	O
)	O
*	O
p	pointer
++	O
=	O
*	O
str	pointer
;	O
else	O
p	pointer
+=	O
AddXChar	function
(	O
p	pointer
,	O
*	O
str	pointer
)	O
;	O
}	O
*	O
p	pointer
=	O
0	int
;	O
return	O
p	pointer
-	O
buf	pointer
;	O
}	O
void	O
sleep1000	function
(	O
msec	int
)	O
int	O
msec	int
;	O
{	O
struct	O
timeval	struct
t	struct
;	O
t	struct
.	O
tv_sec	long
=	O
(	O
long	O
)	O
(	O
msec	int
/	O
1000	int
)	O
;	O
t	struct
.	O
tv_usec	long
=	O
(	O
long	O
)	O
(	O
(	O
msec	int
%	O
1000	int
)	O
*	O
1000	int
)	O
;	O
select	function
(	O
0	int
,	O
(	O
fd_set	struct
*	O
)	O
0	int
,	O
(	O
fd_set	struct
*	O
)	O
0	int
,	O
(	O
fd_set	struct
*	O
)	O
0	int
,	O
&	O
t	struct
)	O
;	O
}	O
void	O
xsetenv	function
(	O
var	pointer
,	O
value	pointer
)	O
char	O
*	O
var	pointer
;	O
char	O
*	O
value	pointer
;	O
{	O
setenv	function
(	O
var	pointer
,	O
value	pointer
,	O
1	int
)	O
;	O
}	O
int	O
_delay	function
(	O
delay	int
,	O
outc	pointer
)	O
register	O
int	O
delay	int
;	O
int	O
(	O
*	O
outc	pointer
)	O
__P	O
(	O
(	O
int	O
)	O
)	O
;	O
{	O
int	O
pad	int
;	O
extern	O
short	O
ospeed	short
;	O
static	O
short	O
osp2pad	array
[	O
]	O
=	O
{	O
0	int
,	O
2000	int
,	O
1333	int
,	O
909	int
,	O
743	int
,	O
666	int
,	O
500	int
,	O
333	int
,	O
166	int
,	O
83	int
,	O
55	int
,	O
41	int
,	O
20	int
,	O
10	int
,	O
5	int
,	O
2	int
,	O
1	int
,	O
1	int
}	O
;	O
if	O
(	O
ospeed	short
<=	O
0	int
||	O
ospeed	short
>=	O
(	O
int	O
)	O
(	O
sizeof	O
(	O
osp2pad	array
)	O
/	O
sizeof	O
(	O
*	O
osp2pad	array
)	O
)	O
)	O
return	O
0	int
;	O
pad	int
=	O
osp2pad	array
[	O
ospeed	short
]	O
;	O
delay	int
=	O
(	O
delay	int
+	O
pad	int
/	O
2	int
)	O
/	O
pad	int
;	O
while	O
(	O
delay	int
--	O
>	O
0	int
)	O
(	O
*	O
outc	pointer
)	O
(	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
