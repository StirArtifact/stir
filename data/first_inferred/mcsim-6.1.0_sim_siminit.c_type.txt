void	O
GetModelInfo	function
(	O
PMODELINFO	pointer
pmi	pointer
)	O
{	O
pmi	pointer
->	O
nModelVars	long
=	O
(	O
long	O
)	O
GetNModelVars	function
(	O
)	O
;	O
pmi	pointer
->	O
pdModelVars	pointer
=	O
GetModelVector	function
(	O
)	O
;	O
if	O
(	O
(	O
pmi	pointer
->	O
nStates	long
=	O
(	O
long	O
)	O
GetNStates	function
(	O
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
!	O
(	O
pmi	pointer
->	O
pStateHvar	pointer
=	O
(	O
HVAR	long
*	O
)	O
malloc	function
(	O
pmi	pointer
->	O
nStates	long
*	O
sizeof	O
(	O
HVAR	long
)	O
)	O
)	O
)	O
ReportError	function
(	O
NULL	O
,	O
RE_OUTOFMEM	int
|	O
RE_FATAL	int
,	O
"GetModelInfo"	pointer
,	O
NULL	O
)	O
;	O
GetStateHandles	function
(	O
pmi	pointer
->	O
pStateHvar	pointer
)	O
;	O
}	O
else	O
{	O
pmi	pointer
->	O
pStateHvar	pointer
=	O
NULL	O
;	O
}	O
}	O
void	O
InitIntegratorSpec	function
(	O
PINTSPEC	pointer
pis	pointer
)	O
{	O
pis	pointer
->	O
iAlgo	int
=	O
IAL_DEFAULT	O
;	O
pis	pointer
->	O
iopt	long
=	O
IOPT_DEFAULT	O
;	O
pis	pointer
->	O
itask	long
=	O
ITASK_DEFAULT	O
;	O
pis	pointer
->	O
itol	long
=	O
ITOL_DEFAULT	O
;	O
pis	pointer
->	O
dRtol	double
=	O
RTOL_DEFAULT	O
;	O
pis	pointer
->	O
dAtol	double
=	O
ATOL_DEFAULT	O
;	O
pis	pointer
->	O
iMf	long
=	O
IMF_DEFAULT	O
;	O
pis	pointer
->	O
liw	long
=	O
LSODES_IWORKSIZE	int
;	O
pis	pointer
->	O
lrw	long
=	O
LSODES_RWORKSIZE	int
;	O
if	O
(	O
!	O
(	O
pis	pointer
->	O
iwork	pointer
=	O
InitlVector	function
(	O
pis	pointer
->	O
liw	long
)	O
)	O
||	O
!	O
(	O
pis	pointer
->	O
rwork	pointer
=	O
InitdVector	function
(	O
pis	pointer
->	O
lrw	long
)	O
)	O
)	O
ReportError	function
(	O
NULL	O
,	O
RE_OUTOFMEM	int
|	O
RE_FATAL	int
,	O
"InitIntegratorSpec()"	pointer
,	O
NULL	O
)	O
;	O
pis	pointer
->	O
dTStep	double
=	O
TSTEP_DEFAULT	O
;	O
}	O
void	O
InitOutputSpec	function
(	O
POUTSPEC	pointer
pos	pointer
)	O
{	O
pos	pointer
->	O
nOutputs	int
=	O
0	int
;	O
pos	pointer
->	O
pszOutputNames	pointer
=	O
NULL	O
;	O
pos	pointer
->	O
phvar_out	pointer
=	O
NULL	O
;	O
pos	pointer
->	O
nData	int
=	O
0	int
;	O
pos	pointer
->	O
pszDataNames	pointer
=	O
NULL	O
;	O
pos	pointer
->	O
phvar_dat	pointer
=	O
NULL	O
;	O
pos	pointer
->	O
plistPrintRecs	pointer
=	O
NULL	O
;	O
pos	pointer
->	O
plistDataRecs	pointer
=	O
NULL	O
;	O
pos	pointer
->	O
pcOutputTimes	pointer
=	O
NULL	O
;	O
pos	pointer
->	O
piCurrentOut	pointer
=	O
NULL	O
;	O
pos	pointer
->	O
prgdOutputTimes	pointer
=	O
NULL	O
;	O
pos	pointer
->	O
prgdOutputVals	pointer
=	O
NULL	O
;	O
pos	pointer
->	O
pcData	pointer
=	O
NULL	O
;	O
pos	pointer
->	O
prgdDataVals	pointer
=	O
NULL	O
;	O
pos	pointer
->	O
cDistinctTimes	int
=	O
0	int
;	O
pos	pointer
->	O
rgdDistinctTimes	pointer
=	O
NULL	O
;	O
}	O
void	O
InitExperiment	function
(	O
PEXPERIMENT	pointer
pexp	pointer
,	O
PMODELINFO	pointer
pmodelinfo	pointer
)	O
{	O
pexp	pointer
->	O
iExp	int
=	O
0	int
;	O
pexp	pointer
->	O
dT0	double
=	O
T0_DEFAULT	int
;	O
pexp	pointer
->	O
dTfinal	double
=	O
TFINAL_DEFAULT	int
;	O
pexp	pointer
->	O
dTime	double
=	O
0.0	int
;	O
pexp	pointer
->	O
pmodelinfo	pointer
=	O
pmodelinfo	pointer
;	O
pexp	pointer
->	O
plistParmMods	pointer
=	O
InitList	function
(	O
)	O
;	O
InitIntegratorSpec	function
(	O
&	O
pexp	pointer
->	O
is	struct
)	O
;	O
InitOutputSpec	function
(	O
&	O
pexp	pointer
->	O
os	struct
)	O
;	O
}	O
void	O
InitMonteCarlo	function
(	O
PMONTECARLO	pointer
pmc	pointer
)	O
{	O
pmc	pointer
->	O
nRuns	long
=	O
NSIMULATIONS_DEFAULT	int
;	O
pmc	pointer
->	O
szMCOutfilename	pointer
=	O
NULL	O
;	O
pmc	pointer
->	O
pfileMCOut	pointer
=	O
NULL	O
;	O
pmc	pointer
->	O
szSetPointsFilename	pointer
=	O
NULL	O
;	O
pmc	pointer
->	O
pfileSetPoints	pointer
=	O
NULL	O
;	O
pmc	pointer
->	O
plistMCVars	pointer
=	O
NULL	O
;	O
pmc	pointer
->	O
rgdParms	pointer
=	O
NULL	O
;	O
pmc	pointer
->	O
rghvar	pointer
=	O
NULL	O
;	O
pmc	pointer
->	O
rgpMCVar	pointer
=	O
NULL	O
;	O
}	O
void	O
InitGibbs	function
(	O
PGIBBSDATA	pointer
pgd	pointer
)	O
{	O
pgd	pointer
->	O
nMaxIter	long
=	O
NSIMULATIONS_DEFAULT	int
;	O
pgd	pointer
->	O
nSimTypeFlag	long
=	O
0	int
;	O
pgd	pointer
->	O
nPrintIter	long
=	O
NSIMULATIONS_DEFAULT	int
;	O
pgd	pointer
->	O
nPrintFreq	long
=	O
1	int
;	O
pgd	pointer
->	O
nMaxPerkSetIter	long
=	O
300000	int
;	O
pgd	pointer
->	O
szGout	pointer
=	O
NULL	O
;	O
pgd	pointer
->	O
pfileOut	pointer
=	O
NULL	O
;	O
pgd	pointer
->	O
szGrestart	pointer
=	O
NULL	O
;	O
pgd	pointer
->	O
pfileRestart	pointer
=	O
NULL	O
;	O
pgd	pointer
->	O
szGdata	pointer
=	O
NULL	O
;	O
pgd	pointer
->	O
nPerks	int
=	O
0	int
;	O
pgd	pointer
->	O
indexT	int
=	O
0	int
;	O
pgd	pointer
->	O
dCZero	double
=	O
100	int
;	O
pgd	pointer
->	O
dNZero	double
=	O
100	int
;	O
pgd	pointer
->	O
startT	int
=	O
0	int
;	O
pgd	pointer
->	O
endT	int
=	O
0	int
;	O
pgd	pointer
->	O
rglTransAttempts	pointer
=	O
NULL	O
;	O
pgd	pointer
->	O
rglTransAccepts	pointer
=	O
NULL	O
;	O
}	O
void	O
InitAnalysis	function
(	O
PANALYSIS	pointer
panal	pointer
)	O
{	O
int	O
i	int
;	O
if	O
(	O
!	O
panal	pointer
)	O
return	O
;	O
panal	pointer
->	O
bDependents	int
=	O
FALSE	int
;	O
panal	pointer
->	O
bOutputIter	int
=	O
FALSE	int
;	O
panal	pointer
->	O
nOutputFreq	int
=	O
0	int
;	O
panal	pointer
->	O
bPrintConvergence	int
=	O
FALSE	int
;	O
panal	pointer
->	O
iType	int
=	O
AT_DEFAULTSIM	int
;	O
panal	pointer
->	O
dSeed	double
=	O
SEED_DEFAULT	int
;	O
panal	pointer
->	O
wContext	int
=	O
CN_GLOBAL	int
;	O
panal	pointer
->	O
pexpCurrent	pointer
=	O
&	O
panal	pointer
->	O
expGlobal	struct
;	O
GetModelInfo	function
(	O
&	O
panal	pointer
->	O
modelinfo	struct
)	O
;	O
InitExperiment	function
(	O
&	O
panal	pointer
->	O
expGlobal	struct
,	O
&	O
panal	pointer
->	O
modelinfo	struct
)	O
;	O
panal	pointer
->	O
szOutfilename	pointer
=	O
NULL	O
;	O
panal	pointer
->	O
pfileOut	pointer
=	O
NULL	O
;	O
panal	pointer
->	O
bCommandLineSpec	int
=	O
FALSE	int
;	O
panal	pointer
->	O
bAllocatedFileName	int
=	O
FALSE	int
;	O
panal	pointer
->	O
iExpts	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
MAX_INSTANCES	int
;	O
i	int
++	O
)	O
panal	pointer
->	O
rgpExps	array
[	O
i	int
]	O
=	O
NULL	O
;	O
InitMonteCarlo	function
(	O
&	O
panal	pointer
->	O
mc	struct
)	O
;	O
InitGibbs	function
(	O
&	O
panal	pointer
->	O
gd	struct
)	O
;	O
}	O
BOOL	int
InitOutputs	function
(	O
PEXPERIMENT	pointer
pexp	pointer
,	O
PINT	pointer
piOut	pointer
,	O
PDOUBLE	pointer
pdTout	pointer
)	O
{	O
int	O
j	int
;	O
BOOL	int
bReturn	int
=	O
FALSE	int
;	O
if	O
(	O
!	O
pexp	pointer
->	O
os	struct
.	O
nOutputs	int
)	O
ReportError	function
(	O
NULL	O
,	O
RE_NOOUTPUTS	int
,	O
(	O
PSTR	pointer
)	O
&	O
pexp	pointer
->	O
iExp	int
,	O
NULL	O
)	O
;	O
else	O
{	O
*	O
piOut	pointer
=	O
0	int
;	O
*	O
pdTout	pointer
=	O
pexp	pointer
->	O
os	struct
.	O
rgdDistinctTimes	pointer
[	O
0	int
]	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
pexp	pointer
->	O
os	struct
.	O
nOutputs	int
;	O
j	int
++	O
)	O
pexp	pointer
->	O
os	struct
.	O
piCurrentOut	pointer
[	O
j	int
]	O
=	O
0	int
;	O
bReturn	int
=	O
TRUE	int
;	O
}	O
return	O
(	O
bReturn	int
)	O
;	O
}	O
int	O
InitOneOutVar	function
(	O
PVOID	pointer
pData	pointer
,	O
PVOID	pointer
pInfo	pointer
)	O
{	O
PPRINTREC	pointer
ppr	pointer
=	O
(	O
PPRINTREC	pointer
)	O
pData	pointer
;	O
POUTSPEC	pointer
pos	pointer
=	O
(	O
POUTSPEC	pointer
)	O
pInfo	pointer
;	O
int	O
i	int
=	O
pos	pointer
->	O
nOutputs	int
++	O
;	O
pos	pointer
->	O
pszOutputNames	pointer
[	O
i	int
]	O
=	O
ppr	pointer
->	O
szOutputName	pointer
;	O
pos	pointer
->	O
phvar_out	pointer
[	O
i	int
]	O
=	O
ppr	pointer
->	O
hvar	long
;	O
pos	pointer
->	O
pcOutputTimes	pointer
[	O
i	int
]	O
=	O
ppr	pointer
->	O
cTimes	long
;	O
pos	pointer
->	O
piCurrentOut	pointer
[	O
i	int
]	O
=	O
0	int
;	O
pos	pointer
->	O
prgdOutputTimes	pointer
[	O
i	int
]	O
=	O
ppr	pointer
->	O
pdTimes	pointer
;	O
pos	pointer
->	O
prgdOutputVals	pointer
[	O
i	int
]	O
=	O
InitdVector	function
(	O
ppr	pointer
->	O
cTimes	long
)	O
;	O
if	O
(	O
pos	pointer
->	O
prgdOutputTimes	pointer
[	O
i	int
]	O
==	O
NULL	O
||	O
pos	pointer
->	O
prgdOutputVals	pointer
[	O
i	int
]	O
==	O
NULL	O
)	O
ReportError	function
(	O
NULL	O
,	O
RE_OUTOFMEM	int
|	O
RE_FATAL	int
,	O
"InitOneOutVar()"	pointer
,	O
NULL	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
InitOneDataVar	function
(	O
PVOID	pointer
pData	pointer
,	O
PVOID	pointer
pInfo	pointer
)	O
{	O
PDATAREC	pointer
pda	pointer
=	O
(	O
PDATAREC	pointer
)	O
pData	pointer
;	O
POUTSPEC	pointer
pos	pointer
=	O
(	O
POUTSPEC	pointer
)	O
pInfo	pointer
;	O
int	O
i	int
=	O
pos	pointer
->	O
nData	int
++	O
;	O
pos	pointer
->	O
prgdDataVals	pointer
[	O
i	int
]	O
=	O
pda	pointer
->	O
pdData	pointer
;	O
pos	pointer
->	O
pcData	pointer
[	O
i	int
]	O
=	O
pda	pointer
->	O
cData	long
;	O
pos	pointer
->	O
phvar_dat	pointer
[	O
i	int
]	O
=	O
pda	pointer
->	O
hvar	long
;	O
pos	pointer
->	O
pszDataNames	pointer
[	O
i	int
]	O
=	O
pda	pointer
->	O
szDataName	pointer
;	O
return	O
0	int
;	O
}	O
BOOL	int
FindNewPoint	function
(	O
POUTSPEC	pointer
pos	pointer
,	O
PINT	pointer
piPoint	pointer
)	O
{	O
for	O
(	O
*	O
piPoint	pointer
=	O
0	int
;	O
*	O
piPoint	pointer
<	O
pos	pointer
->	O
nOutputs	int
;	O
(	O
*	O
piPoint	pointer
)	O
++	O
)	O
if	O
(	O
pos	pointer
->	O
piCurrentOut	pointer
[	O
*	O
piPoint	pointer
]	O
<	O
pos	pointer
->	O
pcOutputTimes	pointer
[	O
*	O
piPoint	pointer
]	O
)	O
break	O
;	O
return	O
(	O
*	O
piPoint	pointer
<	O
pos	pointer
->	O
nOutputs	int
?	O
TRUE	int
:	O
FALSE	int
)	O
;	O
}	O
void	O
CreateOutputSchedule	function
(	O
POUTSPEC	pointer
pos	pointer
)	O
{	O
int	O
i	int
,	O
cTimes	long
=	O
0	int
,	O
iPoint	int
;	O
BOOL	int
bCont	int
=	O
TRUE	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
pos	pointer
->	O
nOutputs	int
;	O
i	int
++	O
)	O
cTimes	long
+=	O
pos	pointer
->	O
pcOutputTimes	pointer
[	O
i	int
]	O
;	O
if	O
(	O
!	O
(	O
pos	pointer
->	O
rgdDistinctTimes	pointer
=	O
InitdVector	function
(	O
cTimes	long
)	O
)	O
)	O
ReportError	function
(	O
NULL	O
,	O
RE_OUTOFMEM	int
|	O
RE_FATAL	int
,	O
"CreateOutputSchedule()"	pointer
,	O
NULL	O
)	O
;	O
cTimes	long
=	O
0	int
;	O
FindNewPoint	function
(	O
pos	pointer
,	O
&	O
iPoint	int
)	O
;	O
while	O
(	O
bCont	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
pos	pointer
->	O
nOutputs	int
;	O
i	int
++	O
)	O
if	O
(	O
i	int
!=	O
iPoint	int
&&	O
pos	pointer
->	O
piCurrentOut	pointer
[	O
i	int
]	O
<	O
pos	pointer
->	O
pcOutputTimes	pointer
[	O
i	int
]	O
)	O
{	O
if	O
(	O
pos	pointer
->	O
prgdOutputTimes	pointer
[	O
i	int
]	O
[	O
pos	pointer
->	O
piCurrentOut	pointer
[	O
i	int
]	O
]	O
<	O
pos	pointer
->	O
prgdOutputTimes	pointer
[	O
iPoint	int
]	O
[	O
pos	pointer
->	O
piCurrentOut	pointer
[	O
iPoint	int
]	O
]	O
)	O
iPoint	int
=	O
i	int
;	O
else	O
if	O
(	O
pos	pointer
->	O
prgdOutputTimes	pointer
[	O
i	int
]	O
[	O
pos	pointer
->	O
piCurrentOut	pointer
[	O
i	int
]	O
]	O
==	O
pos	pointer
->	O
prgdOutputTimes	pointer
[	O
iPoint	int
]	O
[	O
pos	pointer
->	O
piCurrentOut	pointer
[	O
iPoint	int
]	O
]	O
)	O
pos	pointer
->	O
piCurrentOut	pointer
[	O
i	int
]	O
++	O
;	O
}	O
pos	pointer
->	O
rgdDistinctTimes	pointer
[	O
cTimes	long
++	O
]	O
=	O
pos	pointer
->	O
prgdOutputTimes	pointer
[	O
iPoint	int
]	O
[	O
pos	pointer
->	O
piCurrentOut	pointer
[	O
iPoint	int
]	O
]	O
;	O
if	O
(	O
++	O
pos	pointer
->	O
piCurrentOut	pointer
[	O
iPoint	int
]	O
>=	O
pos	pointer
->	O
pcOutputTimes	pointer
[	O
iPoint	int
]	O
)	O
bCont	int
=	O
FindNewPoint	function
(	O
pos	pointer
,	O
&	O
iPoint	int
)	O
;	O
}	O
pos	pointer
->	O
cDistinctTimes	int
=	O
cTimes	long
;	O
}	O
BOOL	int
PrepareOutSpec	function
(	O
PEXPERIMENT	pointer
pexp	pointer
)	O
{	O
POUTSPEC	pointer
pos	pointer
=	O
&	O
pexp	pointer
->	O
os	struct
;	O
BOOL	int
bReturn	int
=	O
FALSE	int
;	O
int	O
cDat	int
=	O
ListLength	O
(	O
pos	pointer
->	O
plistDataRecs	pointer
)	O
;	O
int	O
cOut	int
=	O
ListLength	O
(	O
pos	pointer
->	O
plistPrintRecs	pointer
)	O
;	O
if	O
(	O
!	O
cOut	int
)	O
ReportError	function
(	O
NULL	O
,	O
RE_NOOUTPUTS	int
,	O
(	O
PSTR	pointer
)	O
&	O
pexp	pointer
->	O
iExp	int
,	O
NULL	O
)	O
;	O
else	O
{	O
pos	pointer
->	O
pszOutputNames	pointer
=	O
(	O
PSTR	pointer
*	O
)	O
malloc	function
(	O
cOut	int
*	O
sizeof	O
(	O
PSTR	pointer
)	O
)	O
;	O
pos	pointer
->	O
phvar_out	pointer
=	O
(	O
HVAR	long
*	O
)	O
malloc	function
(	O
cOut	int
*	O
sizeof	O
(	O
HVAR	long
)	O
)	O
;	O
pos	pointer
->	O
pcOutputTimes	pointer
=	O
InitiVector	function
(	O
cOut	int
)	O
;	O
pos	pointer
->	O
piCurrentOut	pointer
=	O
InitiVector	function
(	O
cOut	int
)	O
;	O
pos	pointer
->	O
prgdOutputTimes	pointer
=	O
InitpdVector	function
(	O
cOut	int
)	O
;	O
pos	pointer
->	O
prgdOutputVals	pointer
=	O
InitpdVector	function
(	O
cOut	int
)	O
;	O
if	O
(	O
pos	pointer
->	O
pszOutputNames	pointer
==	O
NULL	O
||	O
pos	pointer
->	O
phvar_out	pointer
==	O
NULL	O
||	O
pos	pointer
->	O
pcOutputTimes	pointer
==	O
NULL	O
||	O
pos	pointer
->	O
piCurrentOut	pointer
==	O
NULL	O
||	O
pos	pointer
->	O
prgdOutputTimes	pointer
==	O
NULL	O
||	O
pos	pointer
->	O
prgdOutputVals	pointer
==	O
NULL	O
)	O
ReportError	function
(	O
NULL	O
,	O
RE_OUTOFMEM	int
|	O
RE_FATAL	int
,	O
"PrepareOutSpec()"	pointer
,	O
NULL	O
)	O
;	O
else	O
{	O
pos	pointer
->	O
nOutputs	int
=	O
0	int
;	O
ForAllList	function
(	O
pos	pointer
->	O
plistPrintRecs	pointer
,	O
InitOneOutVar	function
,	O
(	O
PVOID	pointer
)	O
&	O
pexp	pointer
->	O
os	struct
)	O
;	O
pos	pointer
->	O
nOutputs	int
=	O
cOut	int
;	O
CreateOutputSchedule	function
(	O
pos	pointer
)	O
;	O
pexp	pointer
->	O
dTfinal	double
=	O
pos	pointer
->	O
rgdDistinctTimes	pointer
[	O
pos	pointer
->	O
cDistinctTimes	int
-	O
1	int
]	O
;	O
if	O
(	O
pexp	pointer
->	O
dTfinal	double
==	O
pexp	pointer
->	O
dT0	double
)	O
{	O
printf	function
(	O
"\nError: starting and final times are equal in Simulation %d "	pointer
"- Exiting.\n\n"	pointer
,	O
pexp	pointer
->	O
iExp	int
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
bReturn	int
=	O
TRUE	int
;	O
}	O
}	O
if	O
(	O
!	O
cDat	int
)	O
;	O
else	O
{	O
pos	pointer
->	O
prgdDataVals	pointer
=	O
InitpdVector	function
(	O
cDat	int
)	O
;	O
pos	pointer
->	O
pcData	pointer
=	O
InitiVector	function
(	O
cDat	int
)	O
;	O
pos	pointer
->	O
pszDataNames	pointer
=	O
(	O
PSTR	pointer
*	O
)	O
malloc	function
(	O
cDat	int
*	O
sizeof	O
(	O
PSTR	pointer
)	O
)	O
;	O
pos	pointer
->	O
phvar_dat	pointer
=	O
(	O
HVAR	long
*	O
)	O
malloc	function
(	O
cDat	int
*	O
sizeof	O
(	O
HVAR	long
)	O
)	O
;	O
if	O
(	O
pos	pointer
->	O
prgdDataVals	pointer
==	O
NULL	O
||	O
pos	pointer
->	O
phvar_dat	pointer
==	O
NULL	O
||	O
pos	pointer
->	O
pszDataNames	pointer
==	O
NULL	O
||	O
pos	pointer
->	O
pcData	pointer
==	O
NULL	O
)	O
ReportError	function
(	O
NULL	O
,	O
RE_OUTOFMEM	int
|	O
RE_FATAL	int
,	O
"PrepareOutSpec()"	pointer
,	O
NULL	O
)	O
;	O
else	O
{	O
pos	pointer
->	O
nData	int
=	O
0	int
;	O
ForAllList	function
(	O
pos	pointer
->	O
plistDataRecs	pointer
,	O
InitOneDataVar	function
,	O
(	O
PVOID	pointer
)	O
&	O
pexp	pointer
->	O
os	struct
)	O
;	O
pos	pointer
->	O
nData	int
=	O
cDat	int
;	O
FreeList	function
(	O
&	O
pos	pointer
->	O
plistDataRecs	pointer
,	O
NULL	O
,	O
FALSE	int
)	O
;	O
}	O
}	O
return	O
(	O
bReturn	int
)	O
;	O
}	O
BOOL	int
PrintOutSpec	function
(	O
PEXPERIMENT	pointer
pexp	pointer
)	O
{	O
POUTSPEC	pointer
pos	pointer
=	O
&	O
pexp	pointer
->	O
os	struct
;	O
int	O
j	int
,	O
i	int
,	O
cOut	int
=	O
pos	pointer
->	O
nOutputs	int
;	O
printf	function
(	O
"%d Outputs:\n"	pointer
,	O
cOut	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
cOut	int
;	O
i	int
++	O
)	O
{	O
printf	function
(	O
"  %#0lx  %s: "	pointer
,	O
pos	pointer
->	O
phvar_out	pointer
[	O
i	int
]	O
,	O
pos	pointer
->	O
pszOutputNames	pointer
[	O
i	int
]	O
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
pos	pointer
->	O
pcOutputTimes	pointer
[	O
i	int
]	O
;	O
j	int
++	O
)	O
printf	function
(	O
"%g "	pointer
,	O
pos	pointer
->	O
prgdOutputTimes	pointer
[	O
i	int
]	O
[	O
j	int
]	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
