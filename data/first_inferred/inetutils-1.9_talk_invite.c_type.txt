static	O
char	O
*	O
answers	array
[	O
]	O
=	O
{	O
"answer #0"	pointer
,	O
"Your party is not logged on"	pointer
,	O
"Target machine is too confused to talk to us"	pointer
,	O
"Target machine does not recognize us"	pointer
,	O
"Your party is refusing messages"	pointer
,	O
"Target machine cannot handle remote talk"	pointer
,	O
"Target machine indicates protocol mismatch"	pointer
,	O
"Target machine indicates protocol botch (addr)"	pointer
,	O
"Target machine indicates protocol botch (ctl_addr)"	pointer
,	O
}	O
;	O
int	O
local_id	int
,	O
remote_id	int
;	O
jmp_buf	array
invitebuf	array
;	O
int	O
announce_invite	function
(	O
void	O
)	O
{	O
CTL_RESPONSE	struct
response	struct
;	O
current_state	pointer
=	O
"Trying to connect to your party's talk daemon"	pointer
;	O
ctl_transact	function
(	O
his_machine_addr	struct
,	O
msg	struct
,	O
ANNOUNCE	int
,	O
&	O
response	struct
)	O
;	O
remote_id	int
=	O
response	struct
.	O
id_num	int
;	O
if	O
(	O
response	struct
.	O
answer	char
!=	O
SUCCESS	int
)	O
{	O
if	O
(	O
response	struct
.	O
answer	char
<	O
NANSWERS	O
)	O
message	function
(	O
answers	array
[	O
response	struct
.	O
answer	char
]	O
)	O
;	O
quit	function
(	O
)	O
;	O
}	O
ctl_transact	function
(	O
my_machine_addr	struct
,	O
msg	struct
,	O
LEAVE_INVITE	int
,	O
&	O
response	struct
)	O
;	O
local_id	int
=	O
response	struct
.	O
id_num	int
;	O
return	O
0	int
;	O
}	O
void	O
re_invite	function
(	O
int	O
sig	int
)	O
{	O
message	function
(	O
"Ringing your party again"	pointer
)	O
;	O
current_line	int
++	O
;	O
msg	struct
.	O
id_num	int
=	O
htonl	function
(	O
remote_id	int
+	O
1	int
)	O
;	O
announce_invite	function
(	O
)	O
;	O
longjmp	function
(	O
invitebuf	array
,	O
1	int
)	O
;	O
}	O
int	O
invite_remote	function
(	O
void	O
)	O
{	O
int	O
new_sockt	int
;	O
struct	O
itimerval	struct
itimer	struct
;	O
CTL_RESPONSE	struct
response	struct
;	O
itimer	struct
.	O
it_value	struct
.	O
tv_sec	long
=	O
RING_WAIT	int
;	O
itimer	struct
.	O
it_value	struct
.	O
tv_usec	long
=	O
0	int
;	O
itimer	struct
.	O
it_interval	struct
=	O
itimer	struct
.	O
it_value	struct
;	O
if	O
(	O
listen	function
(	O
sockt	int
,	O
5	int
)	O
!=	O
0	int
)	O
p_error	function
(	O
"Error on attempt to listen for caller"	pointer
)	O
;	O
msg	struct
.	O
addr	struct
.	O
sa_family	short
=	O
htons	function
(	O
my_addr	struct
.	O
sin_family	short
)	O
;	O
memcpy	function
(	O
msg	struct
.	O
addr	struct
.	O
sa_data	array
,	O
(	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
my_addr	struct
)	O
->	O
sa_data	array
,	O
sizeof	O
(	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
my_addr	struct
)	O
->	O
sa_data	array
)	O
;	O
msg	struct
.	O
id_num	int
=	O
htonl	function
(	O
-	O
1	int
)	O
;	O
invitation_waiting	int
=	O
1	int
;	O
announce_invite	function
(	O
)	O
;	O
end_msgs	function
(	O
)	O
;	O
setitimer	function
(	O
ITIMER_REAL	int
,	O
&	O
itimer	struct
,	O
(	O
struct	O
itimerval	struct
*	O
)	O
0	int
)	O
;	O
message	function
(	O
"Waiting for your party to respond"	pointer
)	O
;	O
signal	function
(	O
SIGALRM	int
,	O
re_invite	function
)	O
;	O
setjmp	function
(	O
invitebuf	array
)	O
;	O
while	O
(	O
(	O
new_sockt	int
=	O
accept	function
(	O
sockt	int
,	O
0	int
,	O
0	int
)	O
)	O
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
continue	O
;	O
p_error	function
(	O
"Unable to connect with your party"	pointer
)	O
;	O
}	O
close	function
(	O
sockt	int
)	O
;	O
sockt	int
=	O
new_sockt	int
;	O
current_state	pointer
=	O
"Waiting for your party to respond"	pointer
;	O
start_msgs	function
(	O
)	O
;	O
msg	struct
.	O
id_num	int
=	O
htonl	function
(	O
local_id	int
)	O
;	O
ctl_transact	function
(	O
my_machine_addr	struct
,	O
msg	struct
,	O
DELETE	int
,	O
&	O
response	struct
)	O
;	O
msg	struct
.	O
id_num	int
=	O
htonl	function
(	O
remote_id	int
)	O
;	O
ctl_transact	function
(	O
his_machine_addr	struct
,	O
msg	struct
,	O
DELETE	int
,	O
&	O
response	struct
)	O
;	O
invitation_waiting	int
=	O
0	int
;	O
return	O
0	int
;	O
}	O
int	O
send_delete	function
(	O
void	O
)	O
{	O
msg	struct
.	O
type	char
=	O
DELETE	int
;	O
msg	struct
.	O
id_num	int
=	O
htonl	function
(	O
remote_id	int
)	O
;	O
daemon_addr	struct
.	O
sin_addr	struct
=	O
his_machine_addr	struct
;	O
if	O
(	O
sendto	function
(	O
ctl_sockt	int
,	O
(	O
const	O
char	O
*	O
)	O
&	O
msg	struct
,	O
sizeof	O
(	O
msg	struct
)	O
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
daemon_addr	struct
,	O
sizeof	O
(	O
daemon_addr	struct
)	O
)	O
!=	O
sizeof	O
(	O
msg	struct
)	O
)	O
perror	function
(	O
"send_delete (remote)"	pointer
)	O
;	O
msg	struct
.	O
id_num	int
=	O
htonl	function
(	O
local_id	int
)	O
;	O
daemon_addr	struct
.	O
sin_addr	struct
=	O
my_machine_addr	struct
;	O
if	O
(	O
sendto	function
(	O
ctl_sockt	int
,	O
(	O
const	O
char	O
*	O
)	O
&	O
msg	struct
,	O
sizeof	O
(	O
msg	struct
)	O
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
daemon_addr	struct
,	O
sizeof	O
(	O
daemon_addr	struct
)	O
)	O
!=	O
sizeof	O
(	O
msg	struct
)	O
)	O
perror	function
(	O
"send_delete (local)"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
