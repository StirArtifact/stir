void	O
_pl_h_set_font	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
bool	enum
font_changed	enum
=	O
false	int
;	O
bool	enum
oblique	enum
;	O
double	O
cos_slant	double
=	O
1.0	int
,	O
sin_slant	double
=	O
0.0	int
;	O
double	O
new_relative_label_run	double
,	O
new_relative_label_rise	double
;	O
double	O
theta	double
,	O
sintheta	double
,	O
costheta	double
;	O
plVector	struct
base	pointer
,	O
up	struct
,	O
base_native	struct
,	O
up_native	struct
;	O
double	O
base_native_len	double
,	O
up_native_len	double
,	O
tan_slant	double
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
==	O
PL_F_HERSHEY	int
)	O
return	O
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
==	O
PL_F_STICK	int
)	O
{	O
int	O
master_font_index	int
;	O
master_font_index	int
=	O
(	O
_pl_g_stick_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
)	O
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_index	int
]	O
;	O
oblique	enum
=	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
obliquing	enum
;	O
}	O
else	O
oblique	enum
=	O
false	int
;	O
theta	double
=	O
M_PI	int
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
text_rotation	double
/	O
180.0	int
;	O
costheta	double
=	O
cos	function
(	O
theta	double
)	O
;	O
sintheta	double
=	O
sin	function
(	O
theta	double
)	O
;	O
base	pointer
.	O
x	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
*	O
XDV	O
(	O
costheta	double
,	O
sintheta	double
)	O
;	O
base	pointer
.	O
y	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
*	O
YDV	O
(	O
costheta	double
,	O
sintheta	double
)	O
;	O
new_relative_label_run	double
=	O
100	int
*	O
base	pointer
.	O
x	double
/	O
(	O
HPGL_SCALED_DEVICE_RIGHT	int
-	O
HPGL_SCALED_DEVICE_LEFT	int
)	O
;	O
new_relative_label_rise	double
=	O
100	int
*	O
base	pointer
.	O
y	double
/	O
(	O
HPGL_SCALED_DEVICE_TOP	int
-	O
HPGL_SCALED_DEVICE_BOTTOM	int
)	O
;	O
if	O
(	O
new_relative_label_run	double
!=	O
0.0	int
||	O
new_relative_label_rise	double
!=	O
0.0	int
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
hpgl_rel_label_run	double
!=	O
new_relative_label_run	double
||	O
_plotter	pointer
->	O
hpgl_rel_label_rise	double
!=	O
new_relative_label_rise	double
)	O
{	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"DR%.3f,%.3f;"	pointer
,	O
new_relative_label_run	double
,	O
new_relative_label_rise	double
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
_plotter	pointer
->	O
hpgl_rel_label_run	double
=	O
new_relative_label_run	double
;	O
_plotter	pointer
->	O
hpgl_rel_label_rise	double
=	O
new_relative_label_rise	double
;	O
}	O
}	O
if	O
(	O
_plotter	pointer
->	O
hpgl_version	int
==	O
2	int
)	O
font_changed	enum
=	O
_pl_h_hpgl2_maybe_update_font	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
else	O
font_changed	enum
=	O
_pl_h_hpgl_maybe_update_font	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
up	struct
.	O
x	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
*	O
XDV	O
(	O
-	O
sintheta	double
,	O
costheta	double
)	O
;	O
up	struct
.	O
y	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
*	O
YDV	O
(	O
-	O
sintheta	double
,	O
costheta	double
)	O
;	O
up	struct
.	O
x	double
+=	O
(	O
oblique	enum
?	O
SHEAR	O
:	O
0.0	int
)	O
*	O
base	pointer
.	O
x	double
;	O
up	struct
.	O
y	double
+=	O
(	O
oblique	enum
?	O
SHEAR	O
:	O
0.0	int
)	O
*	O
base	pointer
.	O
y	double
;	O
base_native	struct
.	O
x	double
=	O
base	pointer
.	O
x	double
*	O
(	O
_plotter	pointer
->	O
hpgl_p2	struct
.	O
x	double
-	O
_plotter	pointer
->	O
hpgl_p1	struct
.	O
x	double
)	O
/	O
(	O
HPGL_SCALED_DEVICE_RIGHT	int
-	O
HPGL_SCALED_DEVICE_LEFT	int
)	O
;	O
base_native	struct
.	O
y	double
=	O
base	pointer
.	O
y	double
*	O
(	O
_plotter	pointer
->	O
hpgl_p2	struct
.	O
y	double
-	O
_plotter	pointer
->	O
hpgl_p1	struct
.	O
y	double
)	O
/	O
(	O
HPGL_SCALED_DEVICE_TOP	int
-	O
HPGL_SCALED_DEVICE_BOTTOM	int
)	O
;	O
up_native	struct
.	O
x	double
=	O
up	struct
.	O
x	double
*	O
(	O
_plotter	pointer
->	O
hpgl_p2	struct
.	O
x	double
-	O
_plotter	pointer
->	O
hpgl_p1	struct
.	O
x	double
)	O
/	O
(	O
HPGL_SCALED_DEVICE_RIGHT	int
-	O
HPGL_SCALED_DEVICE_LEFT	int
)	O
;	O
up_native	struct
.	O
y	double
=	O
up	struct
.	O
y	double
*	O
(	O
_plotter	pointer
->	O
hpgl_p2	struct
.	O
y	double
-	O
_plotter	pointer
->	O
hpgl_p1	struct
.	O
y	double
)	O
/	O
(	O
HPGL_SCALED_DEVICE_TOP	int
-	O
HPGL_SCALED_DEVICE_BOTTOM	int
)	O
;	O
base_native_len	double
=	O
sqrt	function
(	O
base_native	struct
.	O
x	double
*	O
base_native	struct
.	O
x	double
+	O
base_native	struct
.	O
y	double
*	O
base_native	struct
.	O
y	double
)	O
;	O
up_native_len	double
=	O
sqrt	function
(	O
up_native	struct
.	O
x	double
*	O
up_native	struct
.	O
x	double
+	O
up_native	struct
.	O
y	double
*	O
up_native	struct
.	O
y	double
)	O
;	O
if	O
(	O
base_native_len	double
==	O
0.0	int
||	O
up_native_len	double
==	O
0.0	int
)	O
tan_slant	double
=	O
0.0	int
;	O
else	O
{	O
sin_slant	double
=	O
(	O
(	O
base_native	struct
.	O
x	double
*	O
up_native	struct
.	O
x	double
+	O
base_native	struct
.	O
y	double
*	O
up_native	struct
.	O
y	double
)	O
/	O
(	O
base_native_len	double
*	O
up_native_len	double
)	O
)	O
;	O
cos_slant	double
=	O
sqrt	function
(	O
1	int
-	O
sin_slant	double
*	O
sin_slant	double
)	O
;	O
tan_slant	double
=	O
sin_slant	double
/	O
cos_slant	double
;	O
}	O
{	O
double	O
fractional_char_width	double
=	O
0.5	int
;	O
double	O
fractional_char_height	double
=	O
1.4	int
*	O
0.5	int
;	O
double	O
new_relative_char_width	double
,	O
new_relative_char_height	double
;	O
int	O
orientation	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
nonreflection	enum
?	O
1	int
:	O
-	O
1	int
;	O
if	O
(	O
(	O
_plotter	pointer
->	O
hpgl_p2	struct
.	O
x	double
-	O
_plotter	pointer
->	O
hpgl_p1	struct
.	O
x	double
)	O
/	O
(	O
HPGL_SCALED_DEVICE_RIGHT	int
-	O
HPGL_SCALED_DEVICE_LEFT	int
)	O
<	O
0.0	int
)	O
orientation	int
*=	O
-	O
1	int
;	O
if	O
(	O
(	O
_plotter	pointer
->	O
hpgl_p2	struct
.	O
y	double
-	O
_plotter	pointer
->	O
hpgl_p1	struct
.	O
y	double
)	O
/	O
(	O
HPGL_SCALED_DEVICE_TOP	int
-	O
HPGL_SCALED_DEVICE_BOTTOM	int
)	O
<	O
0.0	int
)	O
orientation	int
*=	O
-	O
1	int
;	O
new_relative_char_width	double
=	O
fractional_char_width	double
*	O
100	int
*	O
base_native_len	double
/	O
(	O
_plotter	pointer
->	O
hpgl_p2	struct
.	O
x	double
-	O
_plotter	pointer
->	O
hpgl_p1	struct
.	O
x	double
)	O
;	O
new_relative_char_height	double
=	O
fractional_char_height	double
*	O
100	int
*	O
orientation	int
*	O
cos_slant	double
*	O
up_native_len	double
/	O
(	O
_plotter	pointer
->	O
hpgl_p2	struct
.	O
y	double
-	O
_plotter	pointer
->	O
hpgl_p1	struct
.	O
y	double
)	O
;	O
if	O
(	O
font_changed	enum
||	O
(	O
new_relative_char_width	double
!=	O
_plotter	pointer
->	O
hpgl_rel_char_width	double
||	O
new_relative_char_height	double
!=	O
_plotter	pointer
->	O
hpgl_rel_char_height	double
)	O
)	O
{	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"SR%.3f,%.3f;"	pointer
,	O
new_relative_char_width	double
,	O
new_relative_char_height	double
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
_plotter	pointer
->	O
hpgl_rel_char_width	double
=	O
new_relative_char_width	double
;	O
_plotter	pointer
->	O
hpgl_rel_char_height	double
=	O
new_relative_char_height	double
;	O
}	O
}	O
if	O
(	O
tan_slant	double
!=	O
_plotter	pointer
->	O
hpgl_tan_char_slant	double
)	O
{	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"SL%.3f;"	pointer
,	O
tan_slant	double
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
_plotter	pointer
->	O
hpgl_tan_char_slant	double
=	O
tan_slant	double
;	O
}	O
}	O
bool	enum
_pl_h_hpgl2_maybe_update_font	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
bool	enum
font_change	enum
=	O
false	int
;	O
bool	enum
font_is_iso_latin_1	enum
;	O
int	O
master_font_index	int
;	O
int	O
symbol_set	int
,	O
spacing	pointer
,	O
posture	int
,	O
stroke_weight	int
,	O
typeface	int
;	O
switch	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
)	O
{	O
case	O
PL_F_PCL	int
:	O
default	O
:	O
master_font_index	int
=	O
(	O
_pl_g_pcl_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
)	O
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_index	int
]	O
;	O
symbol_set	int
=	O
_pl_g_pcl_font_info	array
[	O
master_font_index	int
]	O
.	O
hpgl_symbol_set	int
;	O
spacing	pointer
=	O
_pl_g_pcl_font_info	array
[	O
master_font_index	int
]	O
.	O
hpgl_spacing	int
;	O
posture	int
=	O
_pl_g_pcl_font_info	array
[	O
master_font_index	int
]	O
.	O
hpgl_posture	int
;	O
stroke_weight	int
=	O
_pl_g_pcl_font_info	array
[	O
master_font_index	int
]	O
.	O
hpgl_stroke_weight	int
;	O
typeface	int
=	O
_pl_g_pcl_font_info	array
[	O
master_font_index	int
]	O
.	O
pcl_typeface	int
;	O
font_is_iso_latin_1	enum
=	O
_pl_g_pcl_font_info	array
[	O
master_font_index	int
]	O
.	O
iso8859_1	enum
;	O
break	O
;	O
case	O
PL_F_POSTSCRIPT	int
:	O
master_font_index	int
=	O
(	O
_pl_g_ps_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
)	O
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_index	int
]	O
;	O
symbol_set	int
=	O
_pl_g_ps_font_info	array
[	O
master_font_index	int
]	O
.	O
hpgl_symbol_set	int
;	O
spacing	pointer
=	O
_pl_g_ps_font_info	array
[	O
master_font_index	int
]	O
.	O
hpgl_spacing	int
;	O
posture	int
=	O
_pl_g_ps_font_info	array
[	O
master_font_index	int
]	O
.	O
hpgl_posture	int
;	O
stroke_weight	int
=	O
_pl_g_ps_font_info	array
[	O
master_font_index	int
]	O
.	O
hpgl_stroke_weight	int
;	O
typeface	int
=	O
_pl_g_ps_font_info	array
[	O
master_font_index	int
]	O
.	O
pcl_typeface	int
;	O
font_is_iso_latin_1	enum
=	O
_pl_g_ps_font_info	array
[	O
master_font_index	int
]	O
.	O
iso8859_1	enum
;	O
break	O
;	O
case	O
PL_F_STICK	int
:	O
master_font_index	int
=	O
(	O
_pl_g_stick_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
)	O
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_index	int
]	O
;	O
symbol_set	int
=	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
hpgl_symbol_set	int
;	O
spacing	pointer
=	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
hpgl_spacing	int
;	O
posture	int
=	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
hpgl_posture	int
;	O
stroke_weight	int
=	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
hpgl_stroke_weight	int
;	O
typeface	int
=	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
pcl_typeface	int
;	O
font_is_iso_latin_1	enum
=	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
iso8859_1	enum
;	O
break	O
;	O
}	O
if	O
(	O
symbol_set	int
!=	O
_plotter	pointer
->	O
hpgl_symbol_set	int
||	O
spacing	pointer
!=	O
_plotter	pointer
->	O
hpgl_spacing	int
||	O
posture	int
!=	O
_plotter	pointer
->	O
hpgl_posture	int
||	O
stroke_weight	int
!=	O
_plotter	pointer
->	O
hpgl_stroke_weight	int
||	O
typeface	int
!=	O
_plotter	pointer
->	O
hpgl_pcl_typeface	int
)	O
font_change	enum
=	O
true	int
;	O
if	O
(	O
font_change	enum
)	O
{	O
if	O
(	O
spacing	pointer
==	O
HPGL2_FIXED_SPACING	int
)	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"SD1,%d,2,%d,3,%.3f,4,%.3f,5,%d,6,%d,7,%d;"	pointer
,	O
symbol_set	int
,	O
spacing	pointer
,	O
(	O
double	O
)	O
HPGL2_NOMINAL_CHARS_PER_INCH	int
,	O
(	O
double	O
)	O
HPGL2_NOMINAL_POINT_SIZE	int
,	O
posture	int
,	O
stroke_weight	int
,	O
typeface	int
)	O
;	O
else	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"SD1,%d,2,%d,3,%.3f,4,%.3f,5,%d,6,%d,7,%d;"	pointer
,	O
symbol_set	int
,	O
spacing	pointer
,	O
(	O
double	O
)	O
HPGL2_NOMINAL_CHARS_PER_INCH	int
,	O
(	O
double	O
)	O
HPGL2_NOMINAL_POINT_SIZE	int
,	O
posture	int
,	O
stroke_weight	int
,	O
typeface	int
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
==	O
PL_F_PCL	int
&&	O
font_is_iso_latin_1	enum
&&	O
symbol_set	int
==	O
PCL_ROMAN_8	int
)	O
{	O
if	O
(	O
spacing	pointer
==	O
HPGL2_FIXED_SPACING	int
)	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"AD1,%d,2,%d,3,%.3f,4,%.3f,5,%d,6,%d,7,%d;"	pointer
,	O
PCL_ISO_8859_1	int
,	O
spacing	pointer
,	O
(	O
double	O
)	O
HPGL2_NOMINAL_CHARS_PER_INCH	int
,	O
(	O
double	O
)	O
HPGL2_NOMINAL_POINT_SIZE	int
,	O
posture	int
,	O
stroke_weight	int
,	O
typeface	int
)	O
;	O
else	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"AD1,%d,2,%d,3,%.3f,4,%.3f,5,%d,6,%d,7,%d;"	pointer
,	O
PCL_ISO_8859_1	int
,	O
spacing	pointer
,	O
(	O
double	O
)	O
HPGL2_NOMINAL_CHARS_PER_INCH	int
,	O
(	O
double	O
)	O
HPGL2_NOMINAL_POINT_SIZE	int
,	O
posture	int
,	O
stroke_weight	int
,	O
typeface	int
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
}	O
_plotter	pointer
->	O
hpgl_symbol_set	int
=	O
symbol_set	int
;	O
_plotter	pointer
->	O
hpgl_spacing	int
=	O
spacing	pointer
;	O
_plotter	pointer
->	O
hpgl_posture	int
=	O
posture	int
;	O
_plotter	pointer
->	O
hpgl_stroke_weight	int
=	O
stroke_weight	int
;	O
_plotter	pointer
->	O
hpgl_pcl_typeface	int
=	O
typeface	int
;	O
}	O
return	O
font_change	enum
;	O
}	O
bool	enum
_pl_h_hpgl_maybe_update_font	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
bool	enum
font_change	enum
=	O
false	int
;	O
int	O
new_hpgl_charset_lower	int
,	O
new_hpgl_charset_upper	int
,	O
master_font_index	int
;	O
master_font_index	int
=	O
(	O
_pl_g_stick_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
)	O
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_index	int
]	O
;	O
new_hpgl_charset_lower	int
=	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
hpgl_charset_lower	int
;	O
new_hpgl_charset_upper	int
=	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
hpgl_charset_upper	int
;	O
if	O
(	O
new_hpgl_charset_lower	int
!=	O
_plotter	pointer
->	O
hpgl_charset_lower	int
)	O
{	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"CS%d;"	pointer
,	O
new_hpgl_charset_lower	int
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
_plotter	pointer
->	O
hpgl_charset_lower	int
=	O
new_hpgl_charset_lower	int
;	O
font_change	enum
=	O
true	int
;	O
}	O
if	O
(	O
new_hpgl_charset_upper	int
>=	O
0	int
&&	O
new_hpgl_charset_upper	int
!=	O
_plotter	pointer
->	O
hpgl_charset_upper	int
)	O
{	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"CA%d;"	pointer
,	O
new_hpgl_charset_upper	int
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
_plotter	pointer
->	O
hpgl_charset_upper	int
=	O
new_hpgl_charset_upper	int
;	O
font_change	enum
=	O
true	int
;	O
}	O
return	O
font_change	enum
;	O
}	O
