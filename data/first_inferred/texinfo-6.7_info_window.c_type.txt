WINDOW	struct
*	O
the_screen	pointer
=	O
NULL	O
;	O
WINDOW	struct
*	O
the_echo_area	pointer
=	O
NULL	O
;	O
WINDOW	struct
*	O
windows	pointer
=	O
NULL	O
;	O
WINDOW	struct
*	O
active_window	pointer
=	O
NULL	O
;	O
int	O
show_malformed_multibyte_p	int
=	O
0	int
;	O
void	O
window_initialize_windows	function
(	O
int	O
width	long
,	O
int	O
height	long
)	O
{	O
the_screen	pointer
=	O
xzalloc	function
(	O
sizeof	O
(	O
WINDOW	struct
)	O
)	O
;	O
the_echo_area	pointer
=	O
xzalloc	function
(	O
sizeof	O
(	O
WINDOW	struct
)	O
)	O
;	O
windows	pointer
=	O
xzalloc	function
(	O
sizeof	O
(	O
WINDOW	struct
)	O
)	O
;	O
active_window	pointer
=	O
windows	pointer
;	O
active_window	pointer
->	O
flags	int
=	O
W_WindowVisible	int
;	O
the_echo_area	pointer
->	O
flags	int
=	O
W_WindowIsPerm	int
|	O
W_InhibitMode	int
|	O
W_WindowVisible	int
;	O
the_screen	pointer
->	O
flags	int
=	O
W_WindowIsPerm	int
;	O
the_echo_area	pointer
->	O
height	long
=	O
ECHO_AREA_HEIGHT	int
;	O
active_window	pointer
->	O
height	long
=	O
the_screen	pointer
->	O
height	long
-	O
1	int
-	O
the_echo_area	pointer
->	O
height	long
;	O
window_new_screen_size	function
(	O
width	long
,	O
height	long
)	O
;	O
}	O
void	O
window_new_screen_size	function
(	O
int	O
width	long
,	O
int	O
height	long
)	O
{	O
register	O
WINDOW	struct
*	O
win	pointer
,	O
*	O
first_win	pointer
;	O
int	O
delta_height	int
,	O
delta_each	int
,	O
delta_leftover	int
;	O
int	O
numwins	int
;	O
if	O
(	O
width	long
==	O
the_screen	pointer
->	O
width	long
&&	O
height	long
==	O
the_screen	pointer
->	O
height	long
)	O
return	O
;	O
delta_height	int
=	O
height	long
-	O
the_screen	pointer
->	O
height	long
;	O
the_screen	pointer
->	O
height	long
=	O
height	long
;	O
the_screen	pointer
->	O
width	long
=	O
width	long
;	O
the_echo_area	pointer
->	O
first_row	long
=	O
height	long
-	O
the_echo_area	pointer
->	O
height	long
;	O
the_echo_area	pointer
->	O
width	long
=	O
width	long
;	O
numwins	int
=	O
0	int
;	O
for	O
(	O
win	pointer
=	O
windows	pointer
;	O
win	pointer
;	O
win	pointer
=	O
win	pointer
->	O
next	pointer
)	O
numwins	int
++	O
;	O
if	O
(	O
numwins	int
==	O
0	int
)	O
return	O
;	O
delta_each	int
=	O
delta_height	int
/	O
numwins	int
;	O
delta_leftover	int
=	O
delta_height	int
-	O
(	O
delta_each	int
*	O
numwins	int
)	O
;	O
while	O
(	O
height	long
-	O
1	int
<=	O
WINDOW_MIN_SIZE	O
*	O
numwins	int
)	O
{	O
if	O
(	O
!	O
windows	pointer
->	O
next	pointer
)	O
{	O
windows	pointer
->	O
height	long
=	O
height	long
-	O
2	int
;	O
windows	pointer
->	O
width	long
=	O
width	long
;	O
free	function
(	O
windows	pointer
->	O
modeline	pointer
)	O
;	O
windows	pointer
->	O
modeline	pointer
=	O
xmalloc	function
(	O
1	int
+	O
width	long
)	O
;	O
return	O
;	O
}	O
for	O
(	O
win	pointer
=	O
windows	pointer
;	O
win	pointer
;	O
win	pointer
=	O
win	pointer
->	O
next	pointer
)	O
if	O
(	O
win	pointer
->	O
flags	int
&	O
W_TempWindow	int
)	O
break	O
;	O
if	O
(	O
!	O
win	pointer
)	O
win	pointer
=	O
windows	pointer
;	O
forget_window_and_nodes	function
(	O
win	pointer
)	O
;	O
window_delete_window	function
(	O
win	pointer
)	O
;	O
numwins	int
--	O
;	O
}	O
{	O
int	O
first_win_num	int
=	O
the_screen	pointer
->	O
height	long
%	O
numwins	int
;	O
int	O
i	int
;	O
first_win	pointer
=	O
windows	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
first_win_num	int
;	O
i	int
++	O
)	O
first_win	pointer
=	O
first_win	pointer
->	O
next	pointer
;	O
}	O
win	pointer
=	O
first_win	pointer
;	O
do	O
{	O
if	O
(	O
(	O
win	pointer
->	O
width	long
!=	O
width	long
)	O
&&	O
(	O
(	O
win	pointer
->	O
flags	int
&	O
W_InhibitMode	int
)	O
==	O
0	int
)	O
)	O
{	O
win	pointer
->	O
width	long
=	O
width	long
;	O
free	function
(	O
win	pointer
->	O
modeline	pointer
)	O
;	O
win	pointer
->	O
modeline	pointer
=	O
xmalloc	function
(	O
1	int
+	O
width	long
)	O
;	O
}	O
if	O
(	O
win	pointer
->	O
height	long
+	O
delta_each	int
>=	O
1	int
)	O
win	pointer
->	O
height	long
+=	O
delta_each	int
;	O
else	O
delta_leftover	int
+=	O
delta_each	int
;	O
if	O
(	O
delta_leftover	int
!=	O
0	int
&&	O
win	pointer
->	O
height	long
+	O
delta_leftover	int
>=	O
1	int
)	O
{	O
win	pointer
->	O
height	long
+=	O
delta_leftover	int
;	O
delta_leftover	int
=	O
0	int
;	O
}	O
win	pointer
=	O
win	pointer
->	O
next	pointer
;	O
if	O
(	O
!	O
win	pointer
)	O
win	pointer
=	O
windows	pointer
;	O
}	O
while	O
(	O
win	pointer
!=	O
first_win	pointer
)	O
;	O
for	O
(	O
win	pointer
=	O
windows	pointer
;	O
win	pointer
;	O
win	pointer
=	O
win	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
win	pointer
->	O
prev	pointer
)	O
win	pointer
->	O
first_row	long
=	O
(	O
win	pointer
->	O
prev	pointer
->	O
first_row	long
+	O
win	pointer
->	O
prev	pointer
->	O
height	long
)	O
+	O
1	int
;	O
if	O
(	O
win	pointer
->	O
node	pointer
)	O
{	O
free	function
(	O
win	pointer
->	O
line_starts	pointer
)	O
;	O
free	function
(	O
win	pointer
->	O
log_line_no	pointer
)	O
;	O
calculate_line_starts	function
(	O
win	pointer
)	O
;	O
}	O
win	pointer
->	O
flags	int
|=	O
W_UpdateWindow	int
;	O
}	O
if	O
(	O
(	O
delta_each	int
<	O
0	int
)	O
&&	O
(	O
(	O
windows	pointer
->	O
height	long
!=	O
0	int
)	O
&&	O
windows	pointer
->	O
next	pointer
)	O
)	O
{	O
int	O
avail	int
;	O
avail	int
=	O
the_screen	pointer
->	O
height	long
-	O
(	O
numwins	int
+	O
the_echo_area	pointer
->	O
height	long
)	O
;	O
win	pointer
=	O
windows	pointer
;	O
while	O
(	O
win	pointer
)	O
{	O
if	O
(	O
(	O
win	pointer
->	O
height	long
<	O
WINDOW_MIN_HEIGHT	int
)	O
||	O
(	O
win	pointer
->	O
height	long
>	O
avail	int
)	O
)	O
{	O
WINDOW	struct
*	O
lastwin	pointer
=	O
NULL	O
;	O
delta_each	int
=	O
avail	int
/	O
numwins	int
;	O
delta_leftover	int
=	O
avail	int
-	O
(	O
delta_each	int
*	O
numwins	int
)	O
;	O
for	O
(	O
win	pointer
=	O
windows	pointer
;	O
win	pointer
;	O
win	pointer
=	O
win	pointer
->	O
next	pointer
)	O
{	O
lastwin	pointer
=	O
win	pointer
;	O
if	O
(	O
win	pointer
->	O
prev	pointer
)	O
win	pointer
->	O
first_row	long
=	O
(	O
win	pointer
->	O
prev	pointer
->	O
first_row	long
+	O
win	pointer
->	O
prev	pointer
->	O
height	long
)	O
+	O
1	int
;	O
win	pointer
->	O
height	long
=	O
delta_each	int
;	O
}	O
lastwin	pointer
->	O
height	long
+=	O
delta_leftover	int
;	O
break	O
;	O
}	O
else	O
win	pointer
=	O
win	pointer
->	O
next	pointer
;	O
}	O
}	O
window_adjust_pagetop	function
(	O
active_window	pointer
)	O
;	O
for	O
(	O
win	pointer
=	O
windows	pointer
;	O
win	pointer
;	O
win	pointer
=	O
win	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
win	pointer
->	O
height	long
<	O
0	int
)	O
win	pointer
->	O
height	long
=	O
0	int
;	O
if	O
(	O
win	pointer
->	O
width	long
<	O
0	int
)	O
win	pointer
->	O
width	long
=	O
0	int
;	O
}	O
}	O
WINDOW	struct
*	O
window_make_window	function
(	O
void	O
)	O
{	O
WINDOW	struct
*	O
window	pointer
;	O
if	O
(	O
(	O
active_window	pointer
->	O
height	long
/	O
2	int
)	O
<	O
WINDOW_MIN_SIZE	O
)	O
return	O
NULL	O
;	O
window	pointer
=	O
xzalloc	function
(	O
sizeof	O
(	O
WINDOW	struct
)	O
)	O
;	O
window	pointer
->	O
width	long
=	O
the_screen	pointer
->	O
width	long
;	O
window	pointer
->	O
height	long
=	O
(	O
active_window	pointer
->	O
height	long
/	O
2	int
)	O
-	O
1	int
;	O
window	pointer
->	O
first_row	long
=	O
active_window	pointer
->	O
first_row	long
+	O
(	O
active_window	pointer
->	O
height	long
-	O
window	pointer
->	O
height	long
)	O
;	O
window	pointer
->	O
goal_column	long
=	O
-	O
1	int
;	O
memset	function
(	O
&	O
window	pointer
->	O
line_map	struct
,	O
0	int
,	O
sizeof	O
(	O
window	pointer
->	O
line_map	struct
)	O
)	O
;	O
window	pointer
->	O
modeline	pointer
=	O
xmalloc	function
(	O
1	int
+	O
window	pointer
->	O
width	long
)	O
;	O
window	pointer
->	O
line_starts	pointer
=	O
NULL	O
;	O
window	pointer
->	O
flags	int
=	O
W_UpdateWindow	int
|	O
W_WindowVisible	int
;	O
active_window	pointer
->	O
height	long
-=	O
(	O
window	pointer
->	O
height	long
+	O
1	int
)	O
;	O
active_window	pointer
->	O
flags	int
|=	O
W_UpdateWindow	int
;	O
window_make_modeline	function
(	O
active_window	pointer
)	O
;	O
window	pointer
->	O
prev	pointer
=	O
active_window	pointer
;	O
window	pointer
->	O
next	pointer
=	O
active_window	pointer
->	O
next	pointer
;	O
active_window	pointer
->	O
next	pointer
=	O
window	pointer
;	O
if	O
(	O
window	pointer
->	O
next	pointer
)	O
window	pointer
->	O
next	pointer
->	O
prev	pointer
=	O
window	pointer
;	O
return	O
window	pointer
;	O
}	O
void	O
window_change_window_height	function
(	O
WINDOW	struct
*	O
window	pointer
,	O
int	O
amount	int
)	O
{	O
register	O
WINDOW	struct
*	O
win	pointer
,	O
*	O
prev	pointer
,	O
*	O
next	pointer
;	O
if	O
(	O
!	O
windows	pointer
->	O
next	pointer
||	O
amount	int
==	O
0	int
)	O
return	O
;	O
for	O
(	O
win	pointer
=	O
windows	pointer
;	O
win	pointer
;	O
win	pointer
=	O
win	pointer
->	O
next	pointer
)	O
if	O
(	O
win	pointer
==	O
window	pointer
)	O
break	O
;	O
if	O
(	O
!	O
win	pointer
)	O
return	O
;	O
prev	pointer
=	O
window	pointer
->	O
prev	pointer
;	O
next	pointer
=	O
window	pointer
->	O
next	pointer
;	O
if	O
(	O
amount	int
<	O
0	int
)	O
{	O
int	O
abs_amount	int
=	O
-	O
amount	int
;	O
if	O
(	O
(	O
window	pointer
->	O
height	long
-	O
abs_amount	int
)	O
<	O
WINDOW_MIN_HEIGHT	int
)	O
return	O
;	O
if	O
(	O
next	pointer
&&	O
prev	pointer
)	O
{	O
if	O
(	O
prev	pointer
->	O
height	long
<	O
next	pointer
->	O
height	long
)	O
shrink_me_growing_prev	O
(	O
window	pointer
,	O
prev	pointer
,	O
abs_amount	int
)	O
;	O
else	O
shrink_me_growing_next	O
(	O
window	pointer
,	O
next	pointer
,	O
abs_amount	int
)	O
;	O
}	O
else	O
if	O
(	O
next	pointer
)	O
shrink_me_growing_next	O
(	O
window	pointer
,	O
next	pointer
,	O
abs_amount	int
)	O
;	O
else	O
shrink_me_growing_prev	O
(	O
window	pointer
,	O
prev	pointer
,	O
abs_amount	int
)	O
;	O
}	O
if	O
(	O
amount	int
>	O
0	int
)	O
{	O
int	O
total_avail	int
,	O
next_avail	int
=	O
0	int
,	O
prev_avail	int
=	O
0	int
;	O
if	O
(	O
next	pointer
)	O
next_avail	int
=	O
next	pointer
->	O
height	long
-	O
WINDOW_MIN_SIZE	O
;	O
if	O
(	O
prev	pointer
)	O
prev_avail	int
=	O
prev	pointer
->	O
height	long
-	O
WINDOW_MIN_SIZE	O
;	O
total_avail	int
=	O
next_avail	int
+	O
prev_avail	int
;	O
if	O
(	O
amount	int
>	O
total_avail	int
)	O
return	O
;	O
if	O
(	O
next_avail	int
-	O
amount	int
>=	O
prev_avail	int
)	O
grow_me_shrinking_next	O
(	O
window	pointer
,	O
next	pointer
,	O
amount	int
)	O
;	O
else	O
if	O
(	O
prev_avail	int
-	O
amount	int
>=	O
next_avail	int
)	O
grow_me_shrinking_prev	O
(	O
window	pointer
,	O
prev	pointer
,	O
amount	int
)	O
;	O
else	O
{	O
int	O
change	int
;	O
if	O
(	O
prev_avail	int
>	O
next_avail	int
)	O
{	O
change	int
=	O
prev_avail	int
-	O
next_avail	int
;	O
grow_me_shrinking_prev	O
(	O
window	pointer
,	O
prev	pointer
,	O
change	int
)	O
;	O
amount	int
-=	O
change	int
;	O
}	O
else	O
{	O
change	int
=	O
next_avail	int
-	O
prev_avail	int
;	O
grow_me_shrinking_next	O
(	O
window	pointer
,	O
next	pointer
,	O
change	int
)	O
;	O
amount	int
-=	O
change	int
;	O
}	O
while	O
(	O
amount	int
)	O
{	O
window	pointer
->	O
height	long
++	O
;	O
amount	int
--	O
;	O
if	O
(	O
amount	int
&	O
1	int
)	O
{	O
prev	pointer
->	O
height	long
--	O
;	O
window	pointer
->	O
first_row	long
--	O
;	O
}	O
else	O
{	O
next	pointer
->	O
height	long
--	O
;	O
next	pointer
->	O
first_row	long
++	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
prev	pointer
)	O
prev	pointer
->	O
flags	int
|=	O
W_UpdateWindow	int
;	O
if	O
(	O
next	pointer
)	O
next	pointer
->	O
flags	int
|=	O
W_UpdateWindow	int
;	O
window	pointer
->	O
flags	int
|=	O
W_UpdateWindow	int
;	O
}	O
void	O
window_tile_windows	function
(	O
int	O
style	int
)	O
{	O
WINDOW	struct
*	O
win	pointer
,	O
*	O
last_adjusted	pointer
;	O
int	O
numwins	int
,	O
avail	int
,	O
per_win_height	int
,	O
leftover	int
;	O
int	O
do_internals	int
;	O
numwins	int
=	O
avail	int
=	O
0	int
;	O
do_internals	int
=	O
(	O
style	int
==	O
TILE_INTERNALS	int
)	O
;	O
for	O
(	O
win	pointer
=	O
windows	pointer
;	O
win	pointer
;	O
win	pointer
=	O
win	pointer
->	O
next	pointer
)	O
if	O
(	O
do_internals	int
||	O
!	O
win	pointer
->	O
node	pointer
||	O
(	O
win	pointer
->	O
node	pointer
->	O
flags	int
&	O
N_IsInternal	int
)	O
==	O
0	int
)	O
{	O
avail	int
+=	O
win	pointer
->	O
height	long
;	O
numwins	int
++	O
;	O
}	O
if	O
(	O
numwins	int
<=	O
1	int
||	O
!	O
the_screen	pointer
->	O
height	long
)	O
return	O
;	O
per_win_height	int
=	O
avail	int
/	O
numwins	int
;	O
leftover	int
=	O
avail	int
-	O
(	O
per_win_height	int
*	O
numwins	int
)	O
;	O
last_adjusted	pointer
=	O
NULL	O
;	O
for	O
(	O
win	pointer
=	O
windows	pointer
;	O
win	pointer
;	O
win	pointer
=	O
win	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
do_internals	int
||	O
!	O
win	pointer
->	O
node	pointer
||	O
(	O
win	pointer
->	O
node	pointer
->	O
flags	int
&	O
N_IsInternal	int
)	O
==	O
0	int
)	O
{	O
last_adjusted	pointer
=	O
win	pointer
;	O
win	pointer
->	O
height	long
=	O
per_win_height	int
;	O
}	O
}	O
if	O
(	O
last_adjusted	pointer
)	O
last_adjusted	pointer
->	O
height	long
+=	O
leftover	int
;	O
for	O
(	O
win	pointer
=	O
windows	pointer
;	O
win	pointer
;	O
win	pointer
=	O
win	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
win	pointer
->	O
prev	pointer
)	O
win	pointer
->	O
first_row	long
=	O
win	pointer
->	O
prev	pointer
->	O
first_row	long
+	O
win	pointer
->	O
prev	pointer
->	O
height	long
+	O
1	int
;	O
window_adjust_pagetop	function
(	O
win	pointer
)	O
;	O
win	pointer
->	O
flags	int
|=	O
W_UpdateWindow	int
;	O
}	O
}	O
void	O
window_toggle_wrap	function
(	O
WINDOW	struct
*	O
window	pointer
)	O
{	O
if	O
(	O
window	pointer
->	O
flags	int
&	O
W_NoWrap	int
)	O
window	pointer
->	O
flags	int
&=	O
~	O
W_NoWrap	int
;	O
else	O
window	pointer
->	O
flags	int
|=	O
W_NoWrap	int
;	O
if	O
(	O
window	pointer
!=	O
the_echo_area	pointer
)	O
{	O
long	O
*	O
old_starts	pointer
;	O
long	O
*	O
old_xlat	pointer
;	O
int	O
old_lines	int
,	O
old_pagetop	int
;	O
old_starts	pointer
=	O
window	pointer
->	O
line_starts	pointer
;	O
old_xlat	pointer
=	O
window	pointer
->	O
log_line_no	pointer
;	O
old_lines	int
=	O
window	pointer
->	O
line_count	long
;	O
old_pagetop	int
=	O
window	pointer
->	O
pagetop	long
;	O
calculate_line_starts	function
(	O
window	pointer
)	O
;	O
window_adjust_pagetop	function
(	O
window	pointer
)	O
;	O
if	O
(	O
old_pagetop	int
==	O
window	pointer
->	O
pagetop	long
)	O
display_scroll_line_starts	function
(	O
window	pointer
,	O
old_pagetop	int
,	O
old_starts	pointer
,	O
old_lines	int
)	O
;	O
free	function
(	O
old_starts	pointer
)	O
;	O
free	function
(	O
old_xlat	pointer
)	O
;	O
}	O
window	pointer
->	O
flags	int
|=	O
W_UpdateWindow	int
;	O
}	O
void	O
window_set_node_of_window	function
(	O
WINDOW	struct
*	O
window	pointer
,	O
NODE	struct
*	O
node	pointer
)	O
{	O
window	pointer
->	O
node	pointer
=	O
node	pointer
;	O
window	pointer
->	O
pagetop	long
=	O
0	int
;	O
window	pointer
->	O
point	long
=	O
0	int
;	O
free	function
(	O
window	pointer
->	O
line_starts	pointer
)	O
;	O
free	function
(	O
window	pointer
->	O
log_line_no	pointer
)	O
;	O
calculate_line_starts	function
(	O
window	pointer
)	O
;	O
window_compute_line_map	function
(	O
window	pointer
)	O
;	O
free_matches	function
(	O
&	O
window	pointer
->	O
matches	pointer
)	O
;	O
window	pointer
->	O
flags	int
|=	O
W_UpdateWindow	int
;	O
if	O
(	O
node	pointer
)	O
{	O
window	pointer
->	O
point	long
=	O
node	pointer
?	O
node	pointer
->	O
display_pos	long
:	O
0	int
;	O
window_adjust_pagetop	function
(	O
window	pointer
)	O
;	O
}	O
window_make_modeline	function
(	O
window	pointer
)	O
;	O
}	O
void	O
window_delete_window	function
(	O
WINDOW	struct
*	O
window	pointer
)	O
{	O
WINDOW	struct
*	O
next	pointer
,	O
*	O
prev	pointer
,	O
*	O
window_to_fix	pointer
;	O
next	pointer
=	O
window	pointer
->	O
next	pointer
;	O
prev	pointer
=	O
window	pointer
->	O
prev	pointer
;	O
if	O
(	O
(	O
!	O
next	pointer
&&	O
!	O
prev	pointer
)	O
||	O
(	O
window	pointer
->	O
flags	int
&	O
W_WindowIsPerm	int
)	O
)	O
return	O
;	O
if	O
(	O
next	pointer
)	O
next	pointer
->	O
prev	pointer
=	O
prev	pointer
;	O
if	O
(	O
!	O
prev	pointer
)	O
windows	pointer
=	O
next	pointer
;	O
else	O
prev	pointer
->	O
next	pointer
=	O
next	pointer
;	O
free	function
(	O
window	pointer
->	O
line_starts	pointer
)	O
;	O
free	function
(	O
window	pointer
->	O
log_line_no	pointer
)	O
;	O
free	function
(	O
window	pointer
->	O
line_map	struct
.	O
map	pointer
)	O
;	O
free	function
(	O
window	pointer
->	O
modeline	pointer
)	O
;	O
free_matches	function
(	O
&	O
window	pointer
->	O
matches	pointer
)	O
;	O
free	function
(	O
window	pointer
->	O
search_string	pointer
)	O
;	O
if	O
(	O
window	pointer
==	O
active_window	pointer
)	O
{	O
WINDOW	struct
*	O
new_active	pointer
=	O
0	int
;	O
if	O
(	O
next	pointer
)	O
{	O
new_active	pointer
=	O
next	pointer
;	O
while	O
(	O
(	O
new_active	pointer
->	O
flags	int
&	O
W_TempWindow	int
)	O
&&	O
new_active	pointer
->	O
next	pointer
)	O
new_active	pointer
=	O
new_active	pointer
->	O
next	pointer
;	O
}	O
if	O
(	O
(	O
!	O
new_active	pointer
||	O
new_active	pointer
->	O
flags	int
&	O
W_TempWindow	int
)	O
&&	O
prev	pointer
)	O
{	O
new_active	pointer
=	O
prev	pointer
;	O
while	O
(	O
(	O
new_active	pointer
->	O
flags	int
&	O
W_TempWindow	int
)	O
&&	O
new_active	pointer
->	O
prev	pointer
)	O
new_active	pointer
=	O
new_active	pointer
->	O
prev	pointer
;	O
}	O
active_window	pointer
=	O
new_active	pointer
;	O
}	O
if	O
(	O
next	pointer
&&	O
active_window	pointer
==	O
next	pointer
)	O
window_to_fix	pointer
=	O
next	pointer
;	O
else	O
if	O
(	O
prev	pointer
&&	O
active_window	pointer
==	O
prev	pointer
)	O
window_to_fix	pointer
=	O
prev	pointer
;	O
else	O
if	O
(	O
next	pointer
)	O
window_to_fix	pointer
=	O
next	pointer
;	O
else	O
if	O
(	O
prev	pointer
)	O
window_to_fix	pointer
=	O
prev	pointer
;	O
else	O
window_to_fix	pointer
=	O
windows	pointer
;	O
if	O
(	O
window_to_fix	pointer
->	O
first_row	long
>	O
window	pointer
->	O
first_row	long
)	O
{	O
int	O
diff	int
;	O
diff	int
=	O
window_to_fix	pointer
->	O
first_row	long
-	O
window	pointer
->	O
first_row	long
;	O
window_to_fix	pointer
->	O
first_row	long
=	O
window	pointer
->	O
first_row	long
;	O
window_to_fix	pointer
->	O
pagetop	long
-=	O
diff	int
;	O
if	O
(	O
window_to_fix	pointer
->	O
pagetop	long
<	O
0	int
)	O
window_to_fix	pointer
->	O
pagetop	long
=	O
0	int
;	O
}	O
window_to_fix	pointer
->	O
height	long
+=	O
window	pointer
->	O
height	long
+	O
1	int
;	O
window_to_fix	pointer
->	O
flags	int
|=	O
W_UpdateWindow	int
;	O
free	function
(	O
window	pointer
)	O
;	O
}	O
void	O
window_mark_chain	function
(	O
WINDOW	struct
*	O
chain	pointer
,	O
int	O
flag	pointer
)	O
{	O
register	O
WINDOW	struct
*	O
win	pointer
;	O
for	O
(	O
win	pointer
=	O
chain	pointer
;	O
win	pointer
;	O
win	pointer
=	O
win	pointer
->	O
next	pointer
)	O
win	pointer
->	O
flags	int
|=	O
flag	pointer
;	O
}	O
void	O
window_unmark_chain	function
(	O
WINDOW	struct
*	O
chain	pointer
,	O
int	O
flag	pointer
)	O
{	O
register	O
WINDOW	struct
*	O
win	pointer
;	O
for	O
(	O
win	pointer
=	O
chain	pointer
;	O
win	pointer
;	O
win	pointer
=	O
win	pointer
->	O
next	pointer
)	O
win	pointer
->	O
flags	int
&=	O
~	O
flag	pointer
;	O
}	O
long	O
window_log_to_phys_line	function
(	O
WINDOW	struct
*	O
window	pointer
,	O
long	O
ln	long
)	O
{	O
size_t	long
i	int
;	O
if	O
(	O
ln	long
>	O
window	pointer
->	O
line_count	long
)	O
return	O
0	int
;	O
for	O
(	O
i	int
=	O
ln	long
;	O
i	int
<	O
window	pointer
->	O
line_count	long
&&	O
window	pointer
->	O
log_line_no	pointer
[	O
i	int
]	O
<	O
ln	long
;	O
i	int
++	O
)	O
;	O
return	O
i	int
;	O
}	O
void	O
set_window_pagetop	function
(	O
WINDOW	struct
*	O
window	pointer
,	O
int	O
desired_top	int
)	O
{	O
int	O
point_line	int
,	O
old_pagetop	int
;	O
if	O
(	O
desired_top	int
<	O
0	int
)	O
desired_top	int
=	O
0	int
;	O
else	O
if	O
(	O
desired_top	int
>	O
window	pointer
->	O
line_count	long
)	O
desired_top	int
=	O
window	pointer
->	O
line_count	long
-	O
1	int
;	O
if	O
(	O
window	pointer
->	O
pagetop	long
==	O
desired_top	int
)	O
return	O
;	O
old_pagetop	int
=	O
window	pointer
->	O
pagetop	long
;	O
window	pointer
->	O
pagetop	long
=	O
desired_top	int
;	O
point_line	int
=	O
window_line_of_point	function
(	O
window	pointer
)	O
;	O
if	O
(	O
point_line	int
<	O
window	pointer
->	O
pagetop	long
)	O
{	O
window	pointer
->	O
point	long
=	O
window	pointer
->	O
line_starts	pointer
[	O
window	pointer
->	O
pagetop	long
]	O
;	O
window	pointer
->	O
goal_column	long
=	O
0	int
;	O
}	O
else	O
if	O
(	O
point_line	int
>=	O
window	pointer
->	O
pagetop	long
+	O
window	pointer
->	O
height	long
)	O
{	O
long	O
bottom	long
=	O
window	pointer
->	O
pagetop	long
+	O
window	pointer
->	O
height	long
-	O
1	int
;	O
window	pointer
->	O
point	long
=	O
window	pointer
->	O
line_starts	pointer
[	O
bottom	long
]	O
;	O
window	pointer
->	O
goal_column	long
=	O
0	int
;	O
}	O
window	pointer
->	O
flags	int
|=	O
W_UpdateWindow	int
;	O
if	O
(	O
old_pagetop	int
<	O
desired_top	int
)	O
{	O
int	O
start	int
,	O
end	int
,	O
amount	int
;	O
amount	int
=	O
desired_top	int
-	O
old_pagetop	int
;	O
if	O
(	O
amount	int
==	O
1	int
||	O
(	O
amount	int
>=	O
window	pointer
->	O
height	long
)	O
||	O
(	O
(	O
(	O
window	pointer
->	O
height	long
-	O
amount	int
)	O
*	O
10	int
)	O
<	O
window	pointer
->	O
height	long
)	O
)	O
return	O
;	O
start	int
=	O
window	pointer
->	O
first_row	long
;	O
end	int
=	O
window	pointer
->	O
height	long
+	O
window	pointer
->	O
first_row	long
;	O
display_scroll_display	function
(	O
start	int
,	O
end	int
,	O
-	O
amount	int
)	O
;	O
}	O
else	O
{	O
int	O
start	int
,	O
end	int
,	O
amount	int
;	O
amount	int
=	O
old_pagetop	int
-	O
desired_top	int
;	O
if	O
(	O
amount	int
==	O
1	int
||	O
(	O
amount	int
>=	O
window	pointer
->	O
height	long
)	O
||	O
(	O
(	O
(	O
window	pointer
->	O
height	long
-	O
amount	int
)	O
*	O
10	int
)	O
<	O
window	pointer
->	O
height	long
)	O
)	O
return	O
;	O
start	int
=	O
window	pointer
->	O
first_row	long
;	O
end	int
=	O
window	pointer
->	O
first_row	long
+	O
window	pointer
->	O
height	long
;	O
display_scroll_display	function
(	O
start	int
,	O
end	int
,	O
amount	int
)	O
;	O
}	O
}	O
void	O
window_adjust_pagetop	function
(	O
WINDOW	struct
*	O
window	pointer
)	O
{	O
register	O
int	O
line	pointer
;	O
if	O
(	O
!	O
window	pointer
->	O
node	pointer
)	O
return	O
;	O
line	pointer
=	O
window_line_of_point	function
(	O
window	pointer
)	O
;	O
if	O
(	O
line	pointer
<	O
window	pointer
->	O
pagetop	long
||	O
line	pointer
-	O
window	pointer
->	O
pagetop	long
>	O
window	pointer
->	O
height	long
-	O
1	int
)	O
{	O
int	O
new_pagetop	int
=	O
line	pointer
-	O
(	O
(	O
window	pointer
->	O
height	long
-	O
1	int
)	O
/	O
2	int
)	O
;	O
if	O
(	O
new_pagetop	int
<	O
0	int
)	O
new_pagetop	int
=	O
0	int
;	O
set_window_pagetop	function
(	O
window	pointer
,	O
new_pagetop	int
)	O
;	O
}	O
}	O
int	O
window_line_of_point	function
(	O
WINDOW	struct
*	O
window	pointer
)	O
{	O
register	O
int	O
i	int
,	O
start	int
=	O
0	int
;	O
if	O
(	O
!	O
window	pointer
->	O
line_starts	pointer
)	O
calculate_line_starts	function
(	O
window	pointer
)	O
;	O
if	O
(	O
window	pointer
->	O
pagetop	long
>	O
-	O
1	int
&&	O
window	pointer
->	O
pagetop	long
<	O
window	pointer
->	O
line_count	long
&&	O
window	pointer
->	O
line_starts	pointer
[	O
window	pointer
->	O
pagetop	long
]	O
<=	O
window	pointer
->	O
point	long
)	O
start	int
=	O
window	pointer
->	O
pagetop	long
;	O
for	O
(	O
i	int
=	O
start	int
;	O
i	int
<	O
window	pointer
->	O
line_count	long
;	O
i	int
++	O
)	O
{	O
if	O
(	O
window	pointer
->	O
line_starts	pointer
[	O
i	int
]	O
>	O
window	pointer
->	O
point	long
)	O
break	O
;	O
}	O
if	O
(	O
i	int
>	O
0	int
)	O
return	O
i	int
-	O
1	int
;	O
else	O
return	O
0	int
;	O
}	O
int	O
window_get_cursor_column	function
(	O
WINDOW	struct
*	O
window	pointer
)	O
{	O
return	O
window_point_to_column	function
(	O
window	pointer
,	O
window	pointer
->	O
point	long
,	O
&	O
window	pointer
->	O
point	long
)	O
;	O
}	O
void	O
window_make_modeline	function
(	O
WINDOW	struct
*	O
window	pointer
)	O
{	O
register	O
int	O
i	int
;	O
char	O
*	O
modeline	pointer
;	O
char	O
location_indicator	array
[	O
4	int
]	O
;	O
int	O
lines_remaining	int
;	O
if	O
(	O
window	pointer
->	O
flags	int
&	O
W_InhibitMode	int
)	O
return	O
;	O
lines_remaining	int
=	O
window	pointer
->	O
line_count	long
-	O
window	pointer
->	O
pagetop	long
;	O
if	O
(	O
window	pointer
->	O
pagetop	long
==	O
0	int
)	O
{	O
if	O
(	O
lines_remaining	int
<=	O
window	pointer
->	O
height	long
)	O
strcpy	function
(	O
location_indicator	array
,	O
"All"	pointer
)	O
;	O
else	O
strcpy	function
(	O
location_indicator	array
,	O
"Top"	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
lines_remaining	int
<=	O
window	pointer
->	O
height	long
)	O
strcpy	function
(	O
location_indicator	array
,	O
"Bot"	pointer
)	O
;	O
else	O
{	O
float	O
pt	float
,	O
lc	float
;	O
int	O
percentage	int
;	O
pt	float
=	O
(	O
float	O
)	O
window	pointer
->	O
pagetop	long
;	O
lc	float
=	O
(	O
float	O
)	O
(	O
window	pointer
->	O
line_count	long
-	O
window	pointer
->	O
height	long
)	O
;	O
percentage	int
=	O
100	int
*	O
(	O
pt	float
/	O
lc	float
)	O
;	O
sprintf	function
(	O
location_indicator	array
,	O
"%2d%%"	pointer
,	O
percentage	int
)	O
;	O
}	O
}	O
{	O
int	O
modeline_len	int
=	O
0	int
;	O
char	O
*	O
nodename	pointer
=	O
"*no node*"	pointer
;	O
NODE	struct
*	O
node	pointer
=	O
window	pointer
->	O
node	pointer
;	O
char	O
*	O
name	pointer
;	O
int	O
dot	int
;	O
if	O
(	O
node	pointer
&&	O
node	pointer
->	O
nodename	pointer
)	O
nodename	pointer
=	O
node	pointer
->	O
nodename	pointer
;	O
name	pointer
=	O
filename_non_directory	function
(	O
node	pointer
->	O
fullpath	pointer
)	O
;	O
modeline_len	int
+=	O
10	int
+	O
strlen	function
(	O
_	O
(	O
"-----Info: (), lines ----, "	pointer
)	O
)	O
;	O
modeline_len	int
+=	O
3	int
;	O
modeline_len	int
+=	O
strlen	function
(	O
name	pointer
)	O
;	O
if	O
(	O
nodename	pointer
)	O
modeline_len	int
+=	O
strlen	function
(	O
nodename	pointer
)	O
;	O
if	O
(	O
modeline_len	int
<	O
window	pointer
->	O
width	long
)	O
modeline_len	int
=	O
window	pointer
->	O
width	long
;	O
modeline	pointer
=	O
xcalloc	function
(	O
1	int
,	O
1	int
+	O
modeline_len	int
)	O
;	O
sprintf	function
(	O
modeline	pointer
+	O
strlen	function
(	O
modeline	pointer
)	O
,	O
"-----Info: "	pointer
)	O
;	O
dot	int
=	O
strcspn	function
(	O
name	pointer
,	O
"."	pointer
)	O
;	O
if	O
(	O
name	pointer
&&	O
strcmp	function
(	O
""	pointer
,	O
name	pointer
)	O
)	O
{	O
sprintf	function
(	O
modeline	pointer
+	O
strlen	function
(	O
modeline	pointer
)	O
,	O
"("	pointer
)	O
;	O
strncpy	function
(	O
modeline	pointer
+	O
strlen	function
(	O
modeline	pointer
)	O
,	O
name	pointer
,	O
dot	int
)	O
;	O
sprintf	function
(	O
modeline	pointer
+	O
strlen	function
(	O
modeline	pointer
)	O
,	O
")"	pointer
)	O
;	O
}	O
sprintf	function
(	O
modeline	pointer
+	O
strlen	function
(	O
modeline	pointer
)	O
,	O
"%s, %ld lines --%s"	pointer
,	O
nodename	pointer
,	O
window	pointer
->	O
line_count	long
,	O
location_indicator	array
)	O
;	O
i	int
=	O
strlen	function
(	O
modeline	pointer
)	O
;	O
if	O
(	O
i	int
>=	O
window	pointer
->	O
width	long
)	O
modeline	pointer
[	O
window	pointer
->	O
width	long
]	O
=	O
'\0'	O
;	O
else	O
{	O
while	O
(	O
i	int
<	O
window	pointer
->	O
width	long
)	O
modeline	pointer
[	O
i	int
++	O
]	O
=	O
'-'	O
;	O
modeline	pointer
[	O
i	int
]	O
=	O
'\0'	O
;	O
}	O
strcpy	function
(	O
window	pointer
->	O
modeline	pointer
,	O
modeline	pointer
)	O
;	O
free	function
(	O
modeline	pointer
)	O
;	O
}	O
}	O
void	O
window_goto_percentage	function
(	O
WINDOW	struct
*	O
window	pointer
,	O
int	O
percent	int
)	O
{	O
int	O
desired_line	int
;	O
if	O
(	O
!	O
percent	int
)	O
desired_line	int
=	O
0	int
;	O
else	O
desired_line	int
=	O
(	O
int	O
)	O
(	O
(	O
float	O
)	O
window	pointer
->	O
line_count	long
*	O
(	O
(	O
float	O
)	O
percent	int
/	O
100.0	int
)	O
)	O
;	O
window	pointer
->	O
pagetop	long
=	O
desired_line	int
;	O
window	pointer
->	O
point	long
=	O
window	pointer
->	O
line_starts	pointer
[	O
window	pointer
->	O
pagetop	long
]	O
;	O
window	pointer
->	O
flags	int
|=	O
W_UpdateWindow	int
;	O
window_make_modeline	function
(	O
window	pointer
)	O
;	O
}	O
static	O
NODE	struct
*	O
echo_area_node	pointer
=	O
NULL	O
;	O
void	O
free_echo_area	function
(	O
void	O
)	O
{	O
if	O
(	O
echo_area_node	pointer
)	O
{	O
free	function
(	O
echo_area_node	pointer
->	O
contents	pointer
)	O
;	O
free	function
(	O
echo_area_node	pointer
)	O
;	O
}	O
echo_area_node	pointer
=	O
NULL	O
;	O
window_set_node_of_window	function
(	O
the_echo_area	pointer
,	O
echo_area_node	pointer
)	O
;	O
}	O
void	O
window_clear_echo_area	function
(	O
void	O
)	O
{	O
free_echo_area	function
(	O
)	O
;	O
display_update_one_window	function
(	O
the_echo_area	pointer
)	O
;	O
}	O
void	O
vwindow_message_in_echo_area	function
(	O
const	O
char	O
*	O
format	pointer
,	O
va_list	array
ap	array
)	O
{	O
free_echo_area	function
(	O
)	O
;	O
echo_area_node	pointer
=	O
build_message_node	function
(	O
format	pointer
,	O
ap	array
)	O
;	O
window_set_node_of_window	function
(	O
the_echo_area	pointer
,	O
echo_area_node	pointer
)	O
;	O
display_update_one_window	function
(	O
the_echo_area	pointer
)	O
;	O
}	O
void	O
window_message_in_echo_area	function
(	O
const	O
char	O
*	O
format	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
format	pointer
)	O
;	O
vwindow_message_in_echo_area	function
(	O
format	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
static	O
NODE	struct
*	O
*	O
old_echo_area_nodes	pointer
=	O
NULL	O
;	O
static	O
size_t	long
old_echo_area_nodes_index	long
=	O
0	int
;	O
static	O
size_t	long
old_echo_area_nodes_slots	long
=	O
0	int
;	O
void	O
message_in_echo_area	function
(	O
const	O
char	O
*	O
format	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
if	O
(	O
echo_area_node	pointer
)	O
{	O
add_pointer_to_array	O
(	O
echo_area_node	pointer
,	O
old_echo_area_nodes_index	long
,	O
old_echo_area_nodes	pointer
,	O
old_echo_area_nodes_slots	long
,	O
4	int
)	O
;	O
}	O
echo_area_node	pointer
=	O
NULL	O
;	O
va_start	O
(	O
ap	array
,	O
format	pointer
)	O
;	O
vwindow_message_in_echo_area	function
(	O
format	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
void	O
unmessage_in_echo_area	function
(	O
void	O
)	O
{	O
free_echo_area	function
(	O
)	O
;	O
if	O
(	O
old_echo_area_nodes_index	long
)	O
echo_area_node	pointer
=	O
old_echo_area_nodes	pointer
[	O
--	O
old_echo_area_nodes_index	long
]	O
;	O
window_set_node_of_window	function
(	O
the_echo_area	pointer
,	O
echo_area_node	pointer
)	O
;	O
display_update_one_window	function
(	O
the_echo_area	pointer
)	O
;	O
}	O
NODE	struct
*	O
build_message_node	function
(	O
const	O
char	O
*	O
format	pointer
,	O
va_list	array
ap	array
)	O
{	O
struct	O
text_buffer	struct
msg	struct
;	O
text_buffer_init	function
(	O
&	O
msg	struct
)	O
;	O
text_buffer_vprintf	function
(	O
&	O
msg	struct
,	O
format	pointer
,	O
ap	array
)	O
;	O
return	O
text_buffer_to_node	function
(	O
&	O
msg	struct
)	O
;	O
}	O
NODE	struct
*	O
format_message_node	function
(	O
const	O
char	O
*	O
format	pointer
,	O
...	O
)	O
{	O
NODE	struct
*	O
node	pointer
;	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
format	pointer
)	O
;	O
node	pointer
=	O
build_message_node	function
(	O
format	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
return	O
node	pointer
;	O
}	O
NODE	struct
*	O
text_buffer_to_node	function
(	O
struct	O
text_buffer	struct
*	O
tb	pointer
)	O
{	O
NODE	struct
*	O
node	pointer
;	O
node	pointer
=	O
info_create_node	function
(	O
)	O
;	O
text_buffer_add_char	function
(	O
tb	pointer
,	O
'\n'	O
)	O
;	O
node	pointer
->	O
nodelen	long
=	O
text_buffer_off	O
(	O
tb	pointer
)	O
;	O
text_buffer_add_char	function
(	O
tb	pointer
,	O
'\0'	O
)	O
;	O
node	pointer
->	O
contents	pointer
=	O
text_buffer_base	O
(	O
tb	pointer
)	O
;	O
node	pointer
->	O
flags	int
|=	O
N_IsInternal	int
;	O
return	O
node	pointer
;	O
}	O
static	O
void	O
collect_line_starts	function
(	O
WINDOW	struct
*	O
win	pointer
,	O
long	O
ll_num	long
,	O
long	O
pl_start	long
)	O
{	O
add_element_to_array	O
(	O
pl_start	long
,	O
win	pointer
->	O
line_count	long
,	O
win	pointer
->	O
line_starts	pointer
,	O
win	pointer
->	O
line_slots	long
,	O
2	int
)	O
;	O
win	pointer
->	O
log_line_no	pointer
=	O
xrealloc	function
(	O
win	pointer
->	O
log_line_no	pointer
,	O
win	pointer
->	O
line_slots	long
*	O
sizeof	O
(	O
long	O
)	O
)	O
;	O
win	pointer
->	O
log_line_no	pointer
[	O
win	pointer
->	O
line_count	long
-	O
1	int
]	O
=	O
ll_num	long
;	O
}	O
int	O
nodeline_print	int
=	O
2	int
;	O
void	O
calculate_line_starts	function
(	O
WINDOW	struct
*	O
win	pointer
)	O
{	O
long	O
pl_chars	long
=	O
0	int
;	O
long	O
pl_start	long
;	O
long	O
ll_num	long
=	O
0	int
;	O
mbi_iterator_t	struct
iter	pointer
;	O
size_t	long
carried_over_chars	long
=	O
0	int
;	O
win	pointer
->	O
line_starts	pointer
=	O
NULL	O
;	O
win	pointer
->	O
log_line_no	pointer
=	O
NULL	O
;	O
win	pointer
->	O
line_count	long
=	O
0	int
;	O
win	pointer
->	O
line_slots	long
=	O
0	int
;	O
if	O
(	O
!	O
win	pointer
->	O
node	pointer
)	O
return	O
;	O
pl_start	long
=	O
0	int
;	O
if	O
(	O
nodeline_print	int
!=	O
PRINT_NODELINE	int
&&	O
!	O
memcmp	function
(	O
win	pointer
->	O
node	pointer
->	O
contents	pointer
,	O
"File:"	pointer
,	O
strlen	function
(	O
"File:"	pointer
)	O
)	O
)	O
{	O
char	O
*	O
s	pointer
=	O
strchr	function
(	O
win	pointer
->	O
node	pointer
->	O
contents	pointer
,	O
'\n'	O
)	O
;	O
if	O
(	O
s	pointer
&&	O
nodeline_print	int
==	O
NO_NODELINE	int
)	O
{	O
pl_start	long
=	O
s	pointer
-	O
win	pointer
->	O
node	pointer
->	O
contents	pointer
+	O
1	int
;	O
}	O
else	O
if	O
(	O
s	pointer
&&	O
nodeline_print	int
==	O
NODELINE_POINTERS_ONLY	int
)	O
{	O
char	O
*	O
s2	pointer
;	O
char	O
saved	char
=	O
*	O
s	pointer
;	O
*	O
s	pointer
=	O
'\0'	O
;	O
s2	pointer
=	O
strstr	function
(	O
win	pointer
->	O
node	pointer
->	O
contents	pointer
,	O
"Next: "	pointer
)	O
;	O
if	O
(	O
!	O
s2	pointer
)	O
s2	pointer
=	O
strstr	function
(	O
win	pointer
->	O
node	pointer
->	O
contents	pointer
,	O
"Prev: "	pointer
)	O
;	O
if	O
(	O
!	O
s2	pointer
)	O
s2	pointer
=	O
strstr	function
(	O
win	pointer
->	O
node	pointer
->	O
contents	pointer
,	O
"Up: "	pointer
)	O
;	O
if	O
(	O
s2	pointer
)	O
pl_start	long
=	O
s2	pointer
-	O
win	pointer
->	O
node	pointer
->	O
contents	pointer
;	O
*	O
s	pointer
=	O
saved	char
;	O
}	O
}	O
for	O
(	O
mbi_init	O
(	O
iter	pointer
,	O
win	pointer
->	O
node	pointer
->	O
contents	pointer
+	O
pl_start	long
,	O
win	pointer
->	O
node	pointer
->	O
nodelen	long
-	O
pl_start	long
)	O
;	O
mbi_avail	O
(	O
iter	pointer
)	O
;	O
mbi_advance	O
(	O
iter	pointer
)	O
)	O
{	O
size_t	long
pchars	pointer
=	O
0	int
;	O
size_t	long
pbytes	pointer
=	O
0	int
;	O
int	O
delim	pointer
=	O
0	int
;	O
(	O
void	O
)	O
printed_representation	function
(	O
&	O
iter	pointer
,	O
&	O
delim	pointer
,	O
pl_chars	long
,	O
&	O
pchars	pointer
,	O
&	O
pbytes	pointer
)	O
;	O
if	O
(	O
!	O
delim	pointer
&&	O
pl_chars	long
+	O
pchars	pointer
<	O
win	pointer
->	O
width	long
)	O
{	O
pl_chars	long
+=	O
pchars	pointer
;	O
continue	O
;	O
}	O
carried_over_chars	long
=	O
delim	pointer
?	O
0	int
:	O
pchars	pointer
;	O
collect_line_starts	function
(	O
win	pointer
,	O
ll_num	long
,	O
pl_start	long
)	O
;	O
if	O
(	O
delim	pointer
==	O
'\r'	O
||	O
delim	pointer
==	O
'\n'	O
)	O
++	O
ll_num	long
;	O
pl_start	long
=	O
mbi_cur_ptr	O
(	O
iter	pointer
)	O
-	O
win	pointer
->	O
node	pointer
->	O
contents	pointer
;	O
if	O
(	O
carried_over_chars	long
==	O
0	int
)	O
pl_start	long
+=	O
mb_len	O
(	O
mbi_cur	O
(	O
iter	pointer
)	O
)	O
;	O
pl_chars	long
=	O
0	int
;	O
if	O
(	O
carried_over_chars	long
!=	O
0	int
)	O
{	O
pl_chars	long
=	O
carried_over_chars	long
;	O
if	O
(	O
win	pointer
->	O
flags	int
&	O
W_NoWrap	int
)	O
{	O
for	O
(	O
;	O
mbi_avail	O
(	O
iter	pointer
)	O
;	O
mbi_advance	O
(	O
iter	pointer
)	O
)	O
if	O
(	O
mb_len	O
(	O
mbi_cur	O
(	O
iter	pointer
)	O
)	O
==	O
1	int
&&	O
*	O
mbi_cur_ptr	O
(	O
iter	pointer
)	O
==	O
'\n'	O
)	O
break	O
;	O
pl_chars	long
=	O
0	int
;	O
pl_start	long
=	O
mbi_cur_ptr	O
(	O
iter	pointer
)	O
+	O
mb_len	O
(	O
mbi_cur	O
(	O
iter	pointer
)	O
)	O
-	O
win	pointer
->	O
node	pointer
->	O
contents	pointer
;	O
}	O
}	O
}	O
if	O
(	O
pl_chars	long
)	O
collect_line_starts	function
(	O
win	pointer
,	O
ll_num	long
++	O
,	O
pl_start	long
)	O
;	O
collect_line_starts	function
(	O
win	pointer
,	O
ll_num	long
,	O
mbi_cur_ptr	O
(	O
iter	pointer
)	O
-	O
win	pointer
->	O
node	pointer
->	O
contents	pointer
)	O
;	O
win	pointer
->	O
line_count	long
--	O
;	O
window_line_map_init	function
(	O
win	pointer
)	O
;	O
}	O
static	O
void	O
line_map_init	function
(	O
LINE_MAP	struct
*	O
map	pointer
,	O
NODE	struct
*	O
node	pointer
,	O
int	O
line	pointer
)	O
{	O
map	pointer
->	O
node	pointer
=	O
node	pointer
;	O
map	pointer
->	O
nline	long
=	O
line	pointer
;	O
map	pointer
->	O
used	long
=	O
0	int
;	O
}	O
static	O
void	O
line_map_add	function
(	O
LINE_MAP	struct
*	O
map	pointer
,	O
long	O
pos	long
)	O
{	O
if	O
(	O
map	pointer
->	O
used	long
==	O
map	pointer
->	O
size	long
)	O
{	O
if	O
(	O
map	pointer
->	O
size	long
==	O
0	int
)	O
map	pointer
->	O
size	long
=	O
80	int
;	O
map	pointer
->	O
map	pointer
=	O
x2nrealloc	function
(	O
map	pointer
->	O
map	pointer
,	O
&	O
map	pointer
->	O
size	long
,	O
sizeof	O
(	O
map	pointer
->	O
map	pointer
[	O
0	int
]	O
)	O
)	O
;	O
}	O
map	pointer
->	O
map	pointer
[	O
map	pointer
->	O
used	long
++	O
]	O
=	O
pos	long
;	O
}	O
void	O
window_line_map_init	function
(	O
WINDOW	struct
*	O
win	pointer
)	O
{	O
win	pointer
->	O
line_map	struct
.	O
used	long
=	O
0	int
;	O
}	O
void	O
window_compute_line_map	function
(	O
WINDOW	struct
*	O
win	pointer
)	O
{	O
int	O
line	pointer
=	O
window_line_of_point	function
(	O
win	pointer
)	O
;	O
mbi_iterator_t	struct
iter	pointer
;	O
int	O
delim	pointer
=	O
0	int
;	O
char	O
*	O
endp	pointer
;	O
const	O
char	O
*	O
cur_ptr	pointer
;	O
if	O
(	O
win	pointer
->	O
line_map	struct
.	O
node	pointer
==	O
win	pointer
->	O
node	pointer
&&	O
win	pointer
->	O
line_map	struct
.	O
nline	long
==	O
line	pointer
&&	O
win	pointer
->	O
line_map	struct
.	O
used	long
)	O
return	O
;	O
line_map_init	function
(	O
&	O
win	pointer
->	O
line_map	struct
,	O
win	pointer
->	O
node	pointer
,	O
line	pointer
)	O
;	O
if	O
(	O
!	O
win	pointer
->	O
node	pointer
)	O
return	O
;	O
if	O
(	O
line	pointer
+	O
1	int
<	O
win	pointer
->	O
line_count	long
)	O
endp	pointer
=	O
win	pointer
->	O
node	pointer
->	O
contents	pointer
+	O
win	pointer
->	O
line_starts	pointer
[	O
line	pointer
+	O
1	int
]	O
;	O
else	O
endp	pointer
=	O
win	pointer
->	O
node	pointer
->	O
contents	pointer
+	O
win	pointer
->	O
node	pointer
->	O
nodelen	long
;	O
for	O
(	O
mbi_init	O
(	O
iter	pointer
,	O
win	pointer
->	O
node	pointer
->	O
contents	pointer
+	O
win	pointer
->	O
line_starts	pointer
[	O
line	pointer
]	O
,	O
win	pointer
->	O
node	pointer
->	O
nodelen	long
-	O
win	pointer
->	O
line_starts	pointer
[	O
line	pointer
]	O
)	O
;	O
!	O
delim	pointer
&&	O
mbi_avail	O
(	O
iter	pointer
)	O
;	O
mbi_advance	O
(	O
iter	pointer
)	O
)	O
{	O
size_t	long
pchars	pointer
,	O
pbytes	pointer
;	O
cur_ptr	pointer
=	O
mbi_cur_ptr	O
(	O
iter	pointer
)	O
;	O
if	O
(	O
cur_ptr	pointer
>=	O
endp	pointer
)	O
break	O
;	O
(	O
void	O
)	O
printed_representation	function
(	O
&	O
iter	pointer
,	O
&	O
delim	pointer
,	O
win	pointer
->	O
line_map	struct
.	O
used	long
,	O
&	O
pchars	pointer
,	O
&	O
pbytes	pointer
)	O
;	O
while	O
(	O
pchars	pointer
--	O
)	O
line_map_add	function
(	O
&	O
win	pointer
->	O
line_map	struct
,	O
cur_ptr	pointer
-	O
win	pointer
->	O
node	pointer
->	O
contents	pointer
)	O
;	O
}	O
}	O
int	O
window_point_to_column	function
(	O
WINDOW	struct
*	O
win	pointer
,	O
long	O
point	long
,	O
long	O
*	O
np	pointer
)	O
{	O
int	O
i	int
;	O
window_compute_line_map	function
(	O
win	pointer
)	O
;	O
if	O
(	O
!	O
win	pointer
->	O
line_map	struct
.	O
map	pointer
||	O
point	long
<	O
win	pointer
->	O
line_map	struct
.	O
map	pointer
[	O
0	int
]	O
)	O
return	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
win	pointer
->	O
line_map	struct
.	O
used	long
;	O
i	int
++	O
)	O
if	O
(	O
win	pointer
->	O
line_map	struct
.	O
map	pointer
[	O
i	int
]	O
>=	O
point	long
)	O
break	O
;	O
if	O
(	O
np	pointer
)	O
*	O
np	pointer
=	O
win	pointer
->	O
line_map	struct
.	O
map	pointer
[	O
i	int
]	O
;	O
return	O
i	int
;	O
}	O
