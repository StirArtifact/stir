struct	O
sec_merge_sec_info	struct
;	O
struct	O
sec_merge_hash_entry	struct
{	O
struct	O
bfd_hash_entry	struct
root	struct
;	O
unsigned	O
int	O
len	long
;	O
unsigned	O
int	O
alignment	int
;	O
union	O
{	O
bfd_size_type	long
index	function
;	O
struct	O
sec_merge_hash_entry	struct
*	O
suffix	pointer
;	O
}	O
u	union
;	O
struct	O
sec_merge_sec_info	struct
*	O
secinfo	pointer
;	O
struct	O
sec_merge_hash_entry	struct
*	O
next	pointer
;	O
}	O
;	O
struct	O
sec_merge_hash	struct
{	O
struct	O
bfd_hash_table	struct
table	pointer
;	O
bfd_size_type	long
size	long
;	O
struct	O
sec_merge_hash_entry	struct
*	O
first	pointer
;	O
struct	O
sec_merge_hash_entry	struct
*	O
last	pointer
;	O
unsigned	O
int	O
entsize	int
;	O
bfd_boolean	int
strings	pointer
;	O
}	O
;	O
struct	O
sec_merge_info	struct
{	O
struct	O
sec_merge_info	struct
*	O
next	pointer
;	O
struct	O
sec_merge_sec_info	struct
*	O
chain	pointer
;	O
struct	O
sec_merge_hash	struct
*	O
htab	struct
;	O
}	O
;	O
struct	O
sec_merge_sec_info	struct
{	O
struct	O
sec_merge_sec_info	struct
*	O
next	pointer
;	O
asection	struct
*	O
sec	pointer
;	O
void	O
*	O
*	O
psecinfo	pointer
;	O
struct	O
sec_merge_hash	struct
*	O
htab	struct
;	O
struct	O
sec_merge_hash_entry	struct
*	O
first_str	pointer
;	O
unsigned	O
char	O
contents	pointer
[	O
1	int
]	O
;	O
}	O
;	O
static	O
struct	O
bfd_hash_entry	struct
*	O
sec_merge_hash_newfunc	function
(	O
struct	O
bfd_hash_entry	struct
*	O
entry	pointer
,	O
struct	O
bfd_hash_table	struct
*	O
table	pointer
,	O
const	O
char	O
*	O
string	pointer
)	O
{	O
if	O
(	O
entry	pointer
==	O
NULL	O
)	O
entry	pointer
=	O
(	O
struct	O
bfd_hash_entry	struct
*	O
)	O
bfd_hash_allocate	function
(	O
table	pointer
,	O
sizeof	O
(	O
struct	O
sec_merge_hash_entry	struct
)	O
)	O
;	O
if	O
(	O
entry	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
entry	pointer
=	O
bfd_hash_newfunc	function
(	O
entry	pointer
,	O
table	pointer
,	O
string	pointer
)	O
;	O
if	O
(	O
entry	pointer
!=	O
NULL	O
)	O
{	O
struct	O
sec_merge_hash_entry	struct
*	O
ret	pointer
=	O
(	O
struct	O
sec_merge_hash_entry	struct
*	O
)	O
entry	pointer
;	O
ret	pointer
->	O
u	union
.	O
suffix	pointer
=	O
NULL	O
;	O
ret	pointer
->	O
alignment	int
=	O
0	int
;	O
ret	pointer
->	O
secinfo	pointer
=	O
NULL	O
;	O
ret	pointer
->	O
next	pointer
=	O
NULL	O
;	O
}	O
return	O
entry	pointer
;	O
}	O
static	O
struct	O
sec_merge_hash_entry	struct
*	O
sec_merge_hash_lookup	function
(	O
struct	O
sec_merge_hash	struct
*	O
table	pointer
,	O
const	O
char	O
*	O
string	pointer
,	O
unsigned	O
int	O
alignment	int
,	O
bfd_boolean	int
create	int
)	O
{	O
const	O
unsigned	O
char	O
*	O
s	pointer
;	O
unsigned	O
long	O
hash	long
;	O
unsigned	O
int	O
c	struct
;	O
struct	O
sec_merge_hash_entry	struct
*	O
hashp	pointer
;	O
unsigned	O
int	O
len	long
,	O
i	pointer
;	O
unsigned	O
int	O
_index	int
;	O
hash	long
=	O
0	int
;	O
len	long
=	O
0	int
;	O
s	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
string	pointer
;	O
if	O
(	O
table	pointer
->	O
strings	pointer
)	O
{	O
if	O
(	O
table	pointer
->	O
entsize	int
==	O
1	int
)	O
{	O
while	O
(	O
(	O
c	struct
=	O
*	O
s	pointer
++	O
)	O
!=	O
'\0'	O
)	O
{	O
hash	long
+=	O
c	struct
+	O
(	O
c	struct
<<	O
17	int
)	O
;	O
hash	long
^=	O
hash	long
>>	O
2	int
;	O
++	O
len	long
;	O
}	O
hash	long
+=	O
len	long
+	O
(	O
len	long
<<	O
17	int
)	O
;	O
}	O
else	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
table	pointer
->	O
entsize	int
;	O
++	O
i	pointer
)	O
if	O
(	O
s	pointer
[	O
i	pointer
]	O
!=	O
'\0'	O
)	O
break	O
;	O
if	O
(	O
i	pointer
==	O
table	pointer
->	O
entsize	int
)	O
break	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
table	pointer
->	O
entsize	int
;	O
++	O
i	pointer
)	O
{	O
c	struct
=	O
*	O
s	pointer
++	O
;	O
hash	long
+=	O
c	struct
+	O
(	O
c	struct
<<	O
17	int
)	O
;	O
hash	long
^=	O
hash	long
>>	O
2	int
;	O
}	O
++	O
len	long
;	O
}	O
hash	long
+=	O
len	long
+	O
(	O
len	long
<<	O
17	int
)	O
;	O
len	long
*=	O
table	pointer
->	O
entsize	int
;	O
}	O
hash	long
^=	O
hash	long
>>	O
2	int
;	O
len	long
+=	O
table	pointer
->	O
entsize	int
;	O
}	O
else	O
{	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
table	pointer
->	O
entsize	int
;	O
++	O
i	pointer
)	O
{	O
c	struct
=	O
*	O
s	pointer
++	O
;	O
hash	long
+=	O
c	struct
+	O
(	O
c	struct
<<	O
17	int
)	O
;	O
hash	long
^=	O
hash	long
>>	O
2	int
;	O
}	O
len	long
=	O
table	pointer
->	O
entsize	int
;	O
}	O
_index	int
=	O
hash	long
%	O
table	pointer
->	O
table	pointer
.	O
size	long
;	O
for	O
(	O
hashp	pointer
=	O
(	O
struct	O
sec_merge_hash_entry	struct
*	O
)	O
table	pointer
->	O
table	pointer
.	O
table	pointer
[	O
_index	int
]	O
;	O
hashp	pointer
!=	O
NULL	O
;	O
hashp	pointer
=	O
(	O
struct	O
sec_merge_hash_entry	struct
*	O
)	O
hashp	pointer
->	O
root	struct
.	O
next	pointer
)	O
{	O
if	O
(	O
hashp	pointer
->	O
root	struct
.	O
hash	long
==	O
hash	long
&&	O
len	long
==	O
hashp	pointer
->	O
len	long
&&	O
memcmp	function
(	O
hashp	pointer
->	O
root	struct
.	O
string	pointer
,	O
string	pointer
,	O
len	long
)	O
==	O
0	int
)	O
{	O
if	O
(	O
hashp	pointer
->	O
alignment	int
<	O
alignment	int
)	O
{	O
if	O
(	O
create	int
)	O
{	O
hashp	pointer
->	O
len	long
=	O
0	int
;	O
hashp	pointer
->	O
alignment	int
=	O
0	int
;	O
}	O
break	O
;	O
}	O
return	O
hashp	pointer
;	O
}	O
}	O
if	O
(	O
!	O
create	int
)	O
return	O
NULL	O
;	O
hashp	pointer
=	O
(	O
(	O
struct	O
sec_merge_hash_entry	struct
*	O
)	O
bfd_hash_insert	function
(	O
&	O
table	pointer
->	O
table	pointer
,	O
string	pointer
,	O
hash	long
)	O
)	O
;	O
if	O
(	O
hashp	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
hashp	pointer
->	O
len	long
=	O
len	long
;	O
hashp	pointer
->	O
alignment	int
=	O
alignment	int
;	O
return	O
hashp	pointer
;	O
}	O
static	O
struct	O
sec_merge_hash	struct
*	O
sec_merge_init	function
(	O
unsigned	O
int	O
entsize	int
,	O
bfd_boolean	int
strings	pointer
)	O
{	O
struct	O
sec_merge_hash	struct
*	O
table	pointer
;	O
table	pointer
=	O
(	O
struct	O
sec_merge_hash	struct
*	O
)	O
bfd_malloc	function
(	O
sizeof	O
(	O
struct	O
sec_merge_hash	struct
)	O
)	O
;	O
if	O
(	O
table	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
bfd_hash_table_init_n	function
(	O
&	O
table	pointer
->	O
table	pointer
,	O
sec_merge_hash_newfunc	function
,	O
sizeof	O
(	O
struct	O
sec_merge_hash_entry	struct
)	O
,	O
16699	int
)	O
)	O
{	O
free	function
(	O
table	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
table	pointer
->	O
size	long
=	O
0	int
;	O
table	pointer
->	O
first	pointer
=	O
NULL	O
;	O
table	pointer
->	O
last	pointer
=	O
NULL	O
;	O
table	pointer
->	O
entsize	int
=	O
entsize	int
;	O
table	pointer
->	O
strings	pointer
=	O
strings	pointer
;	O
return	O
table	pointer
;	O
}	O
static	O
struct	O
sec_merge_hash_entry	struct
*	O
sec_merge_add	function
(	O
struct	O
sec_merge_hash	struct
*	O
tab	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
unsigned	O
int	O
alignment	int
,	O
struct	O
sec_merge_sec_info	struct
*	O
secinfo	pointer
)	O
{	O
struct	O
sec_merge_hash_entry	struct
*	O
entry	pointer
;	O
entry	pointer
=	O
sec_merge_hash_lookup	function
(	O
tab	pointer
,	O
str	pointer
,	O
alignment	int
,	O
TRUE	int
)	O
;	O
if	O
(	O
entry	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
entry	pointer
->	O
secinfo	pointer
==	O
NULL	O
)	O
{	O
tab	pointer
->	O
size	long
++	O
;	O
entry	pointer
->	O
secinfo	pointer
=	O
secinfo	pointer
;	O
if	O
(	O
tab	pointer
->	O
first	pointer
==	O
NULL	O
)	O
tab	pointer
->	O
first	pointer
=	O
entry	pointer
;	O
else	O
tab	pointer
->	O
last	pointer
->	O
next	pointer
=	O
entry	pointer
;	O
tab	pointer
->	O
last	pointer
=	O
entry	pointer
;	O
}	O
return	O
entry	pointer
;	O
}	O
static	O
bfd_boolean	int
sec_merge_emit	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
struct	O
sec_merge_hash_entry	struct
*	O
entry	pointer
,	O
unsigned	O
char	O
*	O
contents	pointer
,	O
file_ptr	long
offset	long
)	O
{	O
struct	O
sec_merge_sec_info	struct
*	O
secinfo	pointer
=	O
entry	pointer
->	O
secinfo	pointer
;	O
asection	struct
*	O
sec	pointer
=	O
secinfo	pointer
->	O
sec	pointer
;	O
char	O
*	O
pad	pointer
=	O
NULL	O
;	O
bfd_size_type	long
off	long
=	O
0	int
;	O
int	O
alignment_power	int
=	O
sec	pointer
->	O
output_section	pointer
->	O
alignment_power	int
;	O
bfd_size_type	long
pad_len	long
;	O
pad_len	long
=	O
alignment_power	int
?	O
(	O
(	O
bfd_size_type	long
)	O
1	int
<<	O
alignment_power	int
)	O
:	O
16	int
;	O
pad	pointer
=	O
(	O
char	O
*	O
)	O
bfd_zmalloc	function
(	O
pad_len	long
)	O
;	O
if	O
(	O
pad	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
for	O
(	O
;	O
entry	pointer
!=	O
NULL	O
&&	O
entry	pointer
->	O
secinfo	pointer
==	O
secinfo	pointer
;	O
entry	pointer
=	O
entry	pointer
->	O
next	pointer
)	O
{	O
const	O
char	O
*	O
str	pointer
;	O
bfd_size_type	long
len	long
;	O
len	long
=	O
-	O
off	long
&	O
(	O
entry	pointer
->	O
alignment	int
-	O
1	int
)	O
;	O
if	O
(	O
len	long
!=	O
0	int
)	O
{	O
BFD_ASSERT	O
(	O
len	long
<=	O
pad_len	long
)	O
;	O
if	O
(	O
contents	pointer
)	O
{	O
memcpy	function
(	O
contents	pointer
+	O
offset	long
,	O
pad	pointer
,	O
len	long
)	O
;	O
offset	long
+=	O
len	long
;	O
}	O
else	O
if	O
(	O
bfd_bwrite	function
(	O
pad	pointer
,	O
len	long
,	O
abfd	pointer
)	O
!=	O
len	long
)	O
goto	O
err	pointer
;	O
off	long
+=	O
len	long
;	O
}	O
str	pointer
=	O
entry	pointer
->	O
root	struct
.	O
string	pointer
;	O
len	long
=	O
entry	pointer
->	O
len	long
;	O
if	O
(	O
contents	pointer
)	O
{	O
memcpy	function
(	O
contents	pointer
+	O
offset	long
,	O
str	pointer
,	O
len	long
)	O
;	O
offset	long
+=	O
len	long
;	O
}	O
else	O
if	O
(	O
bfd_bwrite	function
(	O
str	pointer
,	O
len	long
,	O
abfd	pointer
)	O
!=	O
len	long
)	O
goto	O
err	pointer
;	O
off	long
+=	O
len	long
;	O
}	O
off	long
=	O
sec	pointer
->	O
size	long
-	O
off	long
;	O
if	O
(	O
off	long
!=	O
0	int
)	O
{	O
BFD_ASSERT	O
(	O
off	long
<=	O
pad_len	long
)	O
;	O
if	O
(	O
contents	pointer
)	O
memcpy	function
(	O
contents	pointer
+	O
offset	long
,	O
pad	pointer
,	O
off	long
)	O
;	O
else	O
if	O
(	O
bfd_bwrite	function
(	O
pad	pointer
,	O
off	long
,	O
abfd	pointer
)	O
!=	O
off	long
)	O
goto	O
err	pointer
;	O
}	O
free	function
(	O
pad	pointer
)	O
;	O
return	O
TRUE	int
;	O
err	pointer
:	O
free	function
(	O
pad	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
bfd_boolean	int
_bfd_add_merge_section	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
void	O
*	O
*	O
psinfo	pointer
,	O
asection	struct
*	O
sec	pointer
,	O
void	O
*	O
*	O
psecinfo	pointer
)	O
{	O
struct	O
sec_merge_info	struct
*	O
sinfo	pointer
;	O
struct	O
sec_merge_sec_info	struct
*	O
secinfo	pointer
;	O
unsigned	O
int	O
align	int
;	O
bfd_size_type	long
amt	long
;	O
bfd_byte	char
*	O
contents	pointer
;	O
if	O
(	O
(	O
abfd	pointer
->	O
flags	int
&	O
DYNAMIC	int
)	O
!=	O
0	int
||	O
(	O
sec	pointer
->	O
flags	int
&	O
SEC_MERGE	int
)	O
==	O
0	int
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
sec	pointer
->	O
size	long
==	O
0	int
||	O
(	O
sec	pointer
->	O
flags	int
&	O
SEC_EXCLUDE	int
)	O
!=	O
0	int
||	O
sec	pointer
->	O
entsize	int
==	O
0	int
)	O
return	O
TRUE	int
;	O
if	O
(	O
sec	pointer
->	O
size	long
%	O
sec	pointer
->	O
entsize	int
!=	O
0	int
)	O
return	O
TRUE	int
;	O
if	O
(	O
(	O
sec	pointer
->	O
flags	int
&	O
SEC_RELOC	int
)	O
!=	O
0	int
)	O
{	O
return	O
TRUE	int
;	O
}	O
if	O
(	O
sec	pointer
->	O
alignment_power	int
>=	O
sizeof	O
(	O
align	int
)	O
*	O
CHAR_BIT	O
)	O
return	O
TRUE	int
;	O
align	int
=	O
1u	int
<<	O
sec	pointer
->	O
alignment_power	int
;	O
if	O
(	O
(	O
sec	pointer
->	O
entsize	int
<	O
align	int
&&	O
(	O
(	O
sec	pointer
->	O
entsize	int
&	O
(	O
sec	pointer
->	O
entsize	int
-	O
1	int
)	O
)	O
||	O
!	O
(	O
sec	pointer
->	O
flags	int
&	O
SEC_STRINGS	int
)	O
)	O
)	O
||	O
(	O
sec	pointer
->	O
entsize	int
>	O
align	int
&&	O
(	O
sec	pointer
->	O
entsize	int
&	O
(	O
align	int
-	O
1	int
)	O
)	O
)	O
)	O
{	O
return	O
TRUE	int
;	O
}	O
for	O
(	O
sinfo	pointer
=	O
(	O
struct	O
sec_merge_info	struct
*	O
)	O
*	O
psinfo	pointer
;	O
sinfo	pointer
;	O
sinfo	pointer
=	O
sinfo	pointer
->	O
next	pointer
)	O
if	O
(	O
(	O
secinfo	pointer
=	O
sinfo	pointer
->	O
chain	pointer
)	O
&&	O
!	O
(	O
(	O
secinfo	pointer
->	O
sec	pointer
->	O
flags	int
^	O
sec	pointer
->	O
flags	int
)	O
&	O
(	O
SEC_MERGE	int
|	O
SEC_STRINGS	int
)	O
)	O
&&	O
secinfo	pointer
->	O
sec	pointer
->	O
entsize	int
==	O
sec	pointer
->	O
entsize	int
&&	O
secinfo	pointer
->	O
sec	pointer
->	O
alignment_power	int
==	O
sec	pointer
->	O
alignment_power	int
&&	O
secinfo	pointer
->	O
sec	pointer
->	O
output_section	pointer
==	O
sec	pointer
->	O
output_section	pointer
)	O
break	O
;	O
if	O
(	O
sinfo	pointer
==	O
NULL	O
)	O
{	O
sinfo	pointer
=	O
(	O
struct	O
sec_merge_info	struct
*	O
)	O
bfd_alloc	function
(	O
abfd	pointer
,	O
sizeof	O
(	O
struct	O
sec_merge_info	struct
)	O
)	O
;	O
if	O
(	O
sinfo	pointer
==	O
NULL	O
)	O
goto	O
error_return	O
;	O
sinfo	pointer
->	O
next	pointer
=	O
(	O
struct	O
sec_merge_info	struct
*	O
)	O
*	O
psinfo	pointer
;	O
sinfo	pointer
->	O
chain	pointer
=	O
NULL	O
;	O
*	O
psinfo	pointer
=	O
sinfo	pointer
;	O
sinfo	pointer
->	O
htab	struct
=	O
sec_merge_init	function
(	O
sec	pointer
->	O
entsize	int
,	O
(	O
sec	pointer
->	O
flags	int
&	O
SEC_STRINGS	int
)	O
)	O
;	O
if	O
(	O
sinfo	pointer
->	O
htab	struct
==	O
NULL	O
)	O
goto	O
error_return	O
;	O
}	O
amt	long
=	O
sizeof	O
(	O
struct	O
sec_merge_sec_info	struct
)	O
-	O
1	int
+	O
sec	pointer
->	O
size	long
;	O
if	O
(	O
sec	pointer
->	O
flags	int
&	O
SEC_STRINGS	int
)	O
amt	long
+=	O
sec	pointer
->	O
entsize	int
;	O
*	O
psecinfo	pointer
=	O
bfd_alloc	function
(	O
abfd	pointer
,	O
amt	long
)	O
;	O
if	O
(	O
*	O
psecinfo	pointer
==	O
NULL	O
)	O
goto	O
error_return	O
;	O
secinfo	pointer
=	O
(	O
struct	O
sec_merge_sec_info	struct
*	O
)	O
*	O
psecinfo	pointer
;	O
if	O
(	O
sinfo	pointer
->	O
chain	pointer
)	O
{	O
secinfo	pointer
->	O
next	pointer
=	O
sinfo	pointer
->	O
chain	pointer
->	O
next	pointer
;	O
sinfo	pointer
->	O
chain	pointer
->	O
next	pointer
=	O
secinfo	pointer
;	O
}	O
else	O
secinfo	pointer
->	O
next	pointer
=	O
secinfo	pointer
;	O
sinfo	pointer
->	O
chain	pointer
=	O
secinfo	pointer
;	O
secinfo	pointer
->	O
sec	pointer
=	O
sec	pointer
;	O
secinfo	pointer
->	O
psecinfo	pointer
=	O
psecinfo	pointer
;	O
secinfo	pointer
->	O
htab	struct
=	O
sinfo	pointer
->	O
htab	struct
;	O
secinfo	pointer
->	O
first_str	pointer
=	O
NULL	O
;	O
sec	pointer
->	O
rawsize	long
=	O
sec	pointer
->	O
size	long
;	O
if	O
(	O
sec	pointer
->	O
flags	int
&	O
SEC_STRINGS	int
)	O
memset	function
(	O
secinfo	pointer
->	O
contents	pointer
+	O
sec	pointer
->	O
size	long
,	O
0	int
,	O
sec	pointer
->	O
entsize	int
)	O
;	O
contents	pointer
=	O
secinfo	pointer
->	O
contents	pointer
;	O
if	O
(	O
!	O
bfd_get_full_section_contents	function
(	O
sec	pointer
->	O
owner	pointer
,	O
sec	pointer
,	O
&	O
contents	pointer
)	O
)	O
goto	O
error_return	O
;	O
return	O
TRUE	int
;	O
error_return	O
:	O
*	O
psecinfo	pointer
=	O
NULL	O
;	O
return	O
FALSE	int
;	O
}	O
static	O
bfd_boolean	int
record_section	function
(	O
struct	O
sec_merge_info	struct
*	O
sinfo	pointer
,	O
struct	O
sec_merge_sec_info	struct
*	O
secinfo	pointer
)	O
{	O
asection	struct
*	O
sec	pointer
=	O
secinfo	pointer
->	O
sec	pointer
;	O
struct	O
sec_merge_hash_entry	struct
*	O
entry	pointer
;	O
bfd_boolean	int
nul	int
;	O
unsigned	O
char	O
*	O
p	pointer
,	O
*	O
end	pointer
;	O
bfd_vma	long
mask	int
,	O
eltalign	long
;	O
unsigned	O
int	O
align	int
,	O
i	pointer
;	O
align	int
=	O
sec	pointer
->	O
alignment_power	int
;	O
end	pointer
=	O
secinfo	pointer
->	O
contents	pointer
+	O
sec	pointer
->	O
size	long
;	O
nul	int
=	O
FALSE	int
;	O
mask	int
=	O
(	O
(	O
bfd_vma	long
)	O
1	int
<<	O
align	int
)	O
-	O
1	int
;	O
if	O
(	O
sec	pointer
->	O
flags	int
&	O
SEC_STRINGS	int
)	O
{	O
for	O
(	O
p	pointer
=	O
secinfo	pointer
->	O
contents	pointer
;	O
p	pointer
<	O
end	pointer
;	O
)	O
{	O
eltalign	long
=	O
p	pointer
-	O
secinfo	pointer
->	O
contents	pointer
;	O
eltalign	long
=	O
(	O
(	O
eltalign	long
^	O
(	O
eltalign	long
-	O
1	int
)	O
)	O
+	O
1	int
)	O
>>	O
1	int
;	O
if	O
(	O
!	O
eltalign	long
||	O
eltalign	long
>	O
mask	int
)	O
eltalign	long
=	O
mask	int
+	O
1	int
;	O
entry	pointer
=	O
sec_merge_add	function
(	O
sinfo	pointer
->	O
htab	struct
,	O
(	O
char	O
*	O
)	O
p	pointer
,	O
(	O
unsigned	O
)	O
eltalign	long
,	O
secinfo	pointer
)	O
;	O
if	O
(	O
!	O
entry	pointer
)	O
goto	O
error_return	O
;	O
p	pointer
+=	O
entry	pointer
->	O
len	long
;	O
if	O
(	O
sec	pointer
->	O
entsize	int
==	O
1	int
)	O
{	O
while	O
(	O
p	pointer
<	O
end	pointer
&&	O
*	O
p	pointer
==	O
0	int
)	O
{	O
if	O
(	O
!	O
nul	int
&&	O
!	O
(	O
(	O
p	pointer
-	O
secinfo	pointer
->	O
contents	pointer
)	O
&	O
mask	int
)	O
)	O
{	O
nul	int
=	O
TRUE	int
;	O
entry	pointer
=	O
sec_merge_add	function
(	O
sinfo	pointer
->	O
htab	struct
,	O
""	pointer
,	O
(	O
unsigned	O
)	O
mask	int
+	O
1	int
,	O
secinfo	pointer
)	O
;	O
if	O
(	O
!	O
entry	pointer
)	O
goto	O
error_return	O
;	O
}	O
p	pointer
++	O
;	O
}	O
}	O
else	O
{	O
while	O
(	O
p	pointer
<	O
end	pointer
)	O
{	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
sec	pointer
->	O
entsize	int
;	O
i	pointer
++	O
)	O
if	O
(	O
p	pointer
[	O
i	pointer
]	O
!=	O
'\0'	O
)	O
break	O
;	O
if	O
(	O
i	pointer
!=	O
sec	pointer
->	O
entsize	int
)	O
break	O
;	O
if	O
(	O
!	O
nul	int
&&	O
!	O
(	O
(	O
p	pointer
-	O
secinfo	pointer
->	O
contents	pointer
)	O
&	O
mask	int
)	O
)	O
{	O
nul	int
=	O
TRUE	int
;	O
entry	pointer
=	O
sec_merge_add	function
(	O
sinfo	pointer
->	O
htab	struct
,	O
(	O
char	O
*	O
)	O
p	pointer
,	O
(	O
unsigned	O
)	O
mask	int
+	O
1	int
,	O
secinfo	pointer
)	O
;	O
if	O
(	O
!	O
entry	pointer
)	O
goto	O
error_return	O
;	O
}	O
p	pointer
+=	O
sec	pointer
->	O
entsize	int
;	O
}	O
}	O
}	O
}	O
else	O
{	O
for	O
(	O
p	pointer
=	O
secinfo	pointer
->	O
contents	pointer
;	O
p	pointer
<	O
end	pointer
;	O
p	pointer
+=	O
sec	pointer
->	O
entsize	int
)	O
{	O
entry	pointer
=	O
sec_merge_add	function
(	O
sinfo	pointer
->	O
htab	struct
,	O
(	O
char	O
*	O
)	O
p	pointer
,	O
1	int
,	O
secinfo	pointer
)	O
;	O
if	O
(	O
!	O
entry	pointer
)	O
goto	O
error_return	O
;	O
}	O
}	O
return	O
TRUE	int
;	O
error_return	O
:	O
for	O
(	O
secinfo	pointer
=	O
sinfo	pointer
->	O
chain	pointer
;	O
secinfo	pointer
;	O
secinfo	pointer
=	O
secinfo	pointer
->	O
next	pointer
)	O
*	O
secinfo	pointer
->	O
psecinfo	pointer
=	O
NULL	O
;	O
return	O
FALSE	int
;	O
}	O
static	O
int	O
strrevcmp	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
struct	O
sec_merge_hash_entry	struct
*	O
A	pointer
=	O
*	O
(	O
struct	O
sec_merge_hash_entry	struct
*	O
*	O
)	O
a	pointer
;	O
struct	O
sec_merge_hash_entry	struct
*	O
B	pointer
=	O
*	O
(	O
struct	O
sec_merge_hash_entry	struct
*	O
*	O
)	O
b	pointer
;	O
unsigned	O
int	O
lenA	int
=	O
A	pointer
->	O
len	long
;	O
unsigned	O
int	O
lenB	int
=	O
B	pointer
->	O
len	long
;	O
const	O
unsigned	O
char	O
*	O
s	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
A	pointer
->	O
root	struct
.	O
string	pointer
+	O
lenA	int
-	O
1	int
;	O
const	O
unsigned	O
char	O
*	O
t	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
B	pointer
->	O
root	struct
.	O
string	pointer
+	O
lenB	int
-	O
1	int
;	O
int	O
l	int
=	O
lenA	int
<	O
lenB	int
?	O
lenA	int
:	O
lenB	int
;	O
while	O
(	O
l	int
)	O
{	O
if	O
(	O
*	O
s	pointer
!=	O
*	O
t	pointer
)	O
return	O
(	O
int	O
)	O
*	O
s	pointer
-	O
(	O
int	O
)	O
*	O
t	pointer
;	O
s	pointer
--	O
;	O
t	pointer
--	O
;	O
l	int
--	O
;	O
}	O
return	O
lenA	int
-	O
lenB	int
;	O
}	O
static	O
int	O
strrevcmp_align	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
struct	O
sec_merge_hash_entry	struct
*	O
A	pointer
=	O
*	O
(	O
struct	O
sec_merge_hash_entry	struct
*	O
*	O
)	O
a	pointer
;	O
struct	O
sec_merge_hash_entry	struct
*	O
B	pointer
=	O
*	O
(	O
struct	O
sec_merge_hash_entry	struct
*	O
*	O
)	O
b	pointer
;	O
unsigned	O
int	O
lenA	int
=	O
A	pointer
->	O
len	long
;	O
unsigned	O
int	O
lenB	int
=	O
B	pointer
->	O
len	long
;	O
const	O
unsigned	O
char	O
*	O
s	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
A	pointer
->	O
root	struct
.	O
string	pointer
+	O
lenA	int
-	O
1	int
;	O
const	O
unsigned	O
char	O
*	O
t	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
B	pointer
->	O
root	struct
.	O
string	pointer
+	O
lenB	int
-	O
1	int
;	O
int	O
l	int
=	O
lenA	int
<	O
lenB	int
?	O
lenA	int
:	O
lenB	int
;	O
int	O
tail_align	int
=	O
(	O
lenA	int
&	O
(	O
A	pointer
->	O
alignment	int
-	O
1	int
)	O
)	O
-	O
(	O
lenB	int
&	O
(	O
A	pointer
->	O
alignment	int
-	O
1	int
)	O
)	O
;	O
if	O
(	O
tail_align	int
!=	O
0	int
)	O
return	O
tail_align	int
;	O
while	O
(	O
l	int
)	O
{	O
if	O
(	O
*	O
s	pointer
!=	O
*	O
t	pointer
)	O
return	O
(	O
int	O
)	O
*	O
s	pointer
-	O
(	O
int	O
)	O
*	O
t	pointer
;	O
s	pointer
--	O
;	O
t	pointer
--	O
;	O
l	int
--	O
;	O
}	O
return	O
lenA	int
-	O
lenB	int
;	O
}	O
static	O
inline	O
int	O
is_suffix	function
(	O
const	O
struct	O
sec_merge_hash_entry	struct
*	O
A	pointer
,	O
const	O
struct	O
sec_merge_hash_entry	struct
*	O
B	pointer
)	O
{	O
if	O
(	O
A	pointer
->	O
len	long
<=	O
B	pointer
->	O
len	long
)	O
return	O
0	int
;	O
return	O
memcmp	function
(	O
A	pointer
->	O
root	struct
.	O
string	pointer
+	O
(	O
A	pointer
->	O
len	long
-	O
B	pointer
->	O
len	long
)	O
,	O
B	pointer
->	O
root	struct
.	O
string	pointer
,	O
B	pointer
->	O
len	long
)	O
==	O
0	int
;	O
}	O
static	O
struct	O
sec_merge_sec_info	struct
*	O
merge_strings	function
(	O
struct	O
sec_merge_info	struct
*	O
sinfo	pointer
)	O
{	O
struct	O
sec_merge_hash_entry	struct
*	O
*	O
array	pointer
,	O
*	O
*	O
a	pointer
,	O
*	O
e	pointer
;	O
struct	O
sec_merge_sec_info	struct
*	O
secinfo	pointer
;	O
bfd_size_type	long
size	long
,	O
amt	long
;	O
unsigned	O
int	O
alignment	int
=	O
0	int
;	O
amt	long
=	O
sinfo	pointer
->	O
htab	struct
->	O
size	long
*	O
sizeof	O
(	O
struct	O
sec_merge_hash_entry	struct
*	O
)	O
;	O
array	pointer
=	O
(	O
struct	O
sec_merge_hash_entry	struct
*	O
*	O
)	O
bfd_malloc	function
(	O
amt	long
)	O
;	O
if	O
(	O
array	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
for	O
(	O
e	pointer
=	O
sinfo	pointer
->	O
htab	struct
->	O
first	pointer
,	O
a	pointer
=	O
array	pointer
;	O
e	pointer
;	O
e	pointer
=	O
e	pointer
->	O
next	pointer
)	O
if	O
(	O
e	pointer
->	O
alignment	int
)	O
{	O
*	O
a	pointer
++	O
=	O
e	pointer
;	O
e	pointer
->	O
len	long
-=	O
sinfo	pointer
->	O
htab	struct
->	O
entsize	int
;	O
if	O
(	O
alignment	int
!=	O
e	pointer
->	O
alignment	int
)	O
{	O
if	O
(	O
alignment	int
==	O
0	int
)	O
alignment	int
=	O
e	pointer
->	O
alignment	int
;	O
else	O
alignment	int
=	O
(	O
unsigned	O
)	O
-	O
1	int
;	O
}	O
}	O
sinfo	pointer
->	O
htab	struct
->	O
size	long
=	O
a	pointer
-	O
array	pointer
;	O
if	O
(	O
sinfo	pointer
->	O
htab	struct
->	O
size	long
!=	O
0	int
)	O
{	O
qsort	function
(	O
array	pointer
,	O
(	O
size_t	long
)	O
sinfo	pointer
->	O
htab	struct
->	O
size	long
,	O
sizeof	O
(	O
struct	O
sec_merge_hash_entry	struct
*	O
)	O
,	O
(	O
alignment	int
!=	O
(	O
unsigned	O
)	O
-	O
1	int
&&	O
alignment	int
>	O
sinfo	pointer
->	O
htab	struct
->	O
entsize	int
?	O
strrevcmp_align	function
:	O
strrevcmp	function
)	O
)	O
;	O
e	pointer
=	O
*	O
--	O
a	pointer
;	O
e	pointer
->	O
len	long
+=	O
sinfo	pointer
->	O
htab	struct
->	O
entsize	int
;	O
while	O
(	O
--	O
a	pointer
>=	O
array	pointer
)	O
{	O
struct	O
sec_merge_hash_entry	struct
*	O
cmp	pointer
=	O
*	O
a	pointer
;	O
cmp	pointer
->	O
len	long
+=	O
sinfo	pointer
->	O
htab	struct
->	O
entsize	int
;	O
if	O
(	O
e	pointer
->	O
alignment	int
>=	O
cmp	pointer
->	O
alignment	int
&&	O
!	O
(	O
(	O
e	pointer
->	O
len	long
-	O
cmp	pointer
->	O
len	long
)	O
&	O
(	O
cmp	pointer
->	O
alignment	int
-	O
1	int
)	O
)	O
&&	O
is_suffix	function
(	O
e	pointer
,	O
cmp	pointer
)	O
)	O
{	O
cmp	pointer
->	O
u	union
.	O
suffix	pointer
=	O
e	pointer
;	O
cmp	pointer
->	O
alignment	int
=	O
0	int
;	O
}	O
else	O
e	pointer
=	O
cmp	pointer
;	O
}	O
}	O
free	function
(	O
array	pointer
)	O
;	O
size	long
=	O
0	int
;	O
secinfo	pointer
=	O
sinfo	pointer
->	O
htab	struct
->	O
first	pointer
->	O
secinfo	pointer
;	O
for	O
(	O
e	pointer
=	O
sinfo	pointer
->	O
htab	struct
->	O
first	pointer
;	O
e	pointer
;	O
e	pointer
=	O
e	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
e	pointer
->	O
secinfo	pointer
!=	O
secinfo	pointer
)	O
{	O
secinfo	pointer
->	O
sec	pointer
->	O
size	long
=	O
size	long
;	O
secinfo	pointer
=	O
e	pointer
->	O
secinfo	pointer
;	O
}	O
if	O
(	O
e	pointer
->	O
alignment	int
)	O
{	O
if	O
(	O
e	pointer
->	O
secinfo	pointer
->	O
first_str	pointer
==	O
NULL	O
)	O
{	O
e	pointer
->	O
secinfo	pointer
->	O
first_str	pointer
=	O
e	pointer
;	O
size	long
=	O
0	int
;	O
}	O
size	long
=	O
(	O
size	long
+	O
e	pointer
->	O
alignment	int
-	O
1	int
)	O
&	O
~	O
(	O
(	O
bfd_vma	long
)	O
e	pointer
->	O
alignment	int
-	O
1	int
)	O
;	O
e	pointer
->	O
u	union
.	O
index	function
=	O
size	long
;	O
size	long
+=	O
e	pointer
->	O
len	long
;	O
}	O
}	O
secinfo	pointer
->	O
sec	pointer
->	O
size	long
=	O
size	long
;	O
for	O
(	O
a	pointer
=	O
&	O
sinfo	pointer
->	O
htab	struct
->	O
first	pointer
,	O
e	pointer
=	O
*	O
a	pointer
;	O
e	pointer
;	O
e	pointer
=	O
e	pointer
->	O
next	pointer
)	O
if	O
(	O
e	pointer
->	O
alignment	int
)	O
a	pointer
=	O
&	O
e	pointer
->	O
next	pointer
;	O
else	O
{	O
*	O
a	pointer
=	O
e	pointer
->	O
next	pointer
;	O
if	O
(	O
e	pointer
->	O
len	long
)	O
{	O
e	pointer
->	O
secinfo	pointer
=	O
e	pointer
->	O
u	union
.	O
suffix	pointer
->	O
secinfo	pointer
;	O
e	pointer
->	O
alignment	int
=	O
e	pointer
->	O
u	union
.	O
suffix	pointer
->	O
alignment	int
;	O
e	pointer
->	O
u	union
.	O
index	function
=	O
e	pointer
->	O
u	union
.	O
suffix	pointer
->	O
u	union
.	O
index	function
+	O
(	O
e	pointer
->	O
u	union
.	O
suffix	pointer
->	O
len	long
-	O
e	pointer
->	O
len	long
)	O
;	O
}	O
}	O
return	O
secinfo	pointer
;	O
}	O
bfd_boolean	int
_bfd_merge_sections	pointer
(	O
bfd	struct
*	O
abfd	pointer
,	O
struct	O
bfd_link_info	struct
*	O
info	pointer
ATTRIBUTE_UNUSED	O
,	O
void	O
*	O
xsinfo	pointer
,	O
void	O
(	O
*	O
remove_hook	pointer
)	O
(	O
bfd	struct
*	O
,	O
asection	struct
*	O
)	O
)	O
{	O
struct	O
sec_merge_info	struct
*	O
sinfo	pointer
;	O
for	O
(	O
sinfo	pointer
=	O
(	O
struct	O
sec_merge_info	struct
*	O
)	O
xsinfo	pointer
;	O
sinfo	pointer
;	O
sinfo	pointer
=	O
sinfo	pointer
->	O
next	pointer
)	O
{	O
struct	O
sec_merge_sec_info	struct
*	O
secinfo	pointer
;	O
bfd_size_type	long
align	int
;	O
if	O
(	O
!	O
sinfo	pointer
->	O
chain	pointer
)	O
continue	O
;	O
secinfo	pointer
=	O
sinfo	pointer
->	O
chain	pointer
;	O
sinfo	pointer
->	O
chain	pointer
=	O
secinfo	pointer
->	O
next	pointer
;	O
secinfo	pointer
->	O
next	pointer
=	O
NULL	O
;	O
align	int
=	O
1	int
;	O
for	O
(	O
secinfo	pointer
=	O
sinfo	pointer
->	O
chain	pointer
;	O
secinfo	pointer
;	O
secinfo	pointer
=	O
secinfo	pointer
->	O
next	pointer
)	O
if	O
(	O
secinfo	pointer
->	O
sec	pointer
->	O
flags	int
&	O
SEC_EXCLUDE	int
)	O
{	O
*	O
secinfo	pointer
->	O
psecinfo	pointer
=	O
NULL	O
;	O
if	O
(	O
remove_hook	pointer
)	O
(	O
*	O
remove_hook	pointer
)	O
(	O
abfd	pointer
,	O
secinfo	pointer
->	O
sec	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
record_section	function
(	O
sinfo	pointer
,	O
secinfo	pointer
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
align	int
)	O
{	O
align	int
=	O
(	O
bfd_size_type	long
)	O
1	int
<<	O
secinfo	pointer
->	O
sec	pointer
->	O
alignment_power	int
;	O
if	O
(	O
(	O
secinfo	pointer
->	O
sec	pointer
->	O
size	long
&	O
(	O
align	int
-	O
1	int
)	O
)	O
!=	O
0	int
)	O
align	int
=	O
0	int
;	O
}	O
}	O
if	O
(	O
sinfo	pointer
->	O
htab	struct
->	O
first	pointer
==	O
NULL	O
)	O
continue	O
;	O
if	O
(	O
sinfo	pointer
->	O
htab	struct
->	O
strings	pointer
)	O
{	O
secinfo	pointer
=	O
merge_strings	function
(	O
sinfo	pointer
)	O
;	O
if	O
(	O
!	O
secinfo	pointer
)	O
return	O
FALSE	int
;	O
}	O
else	O
{	O
struct	O
sec_merge_hash_entry	struct
*	O
e	pointer
;	O
bfd_size_type	long
size	long
=	O
0	int
;	O
secinfo	pointer
=	O
NULL	O
;	O
for	O
(	O
e	pointer
=	O
sinfo	pointer
->	O
htab	struct
->	O
first	pointer
;	O
e	pointer
;	O
e	pointer
=	O
e	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
e	pointer
->	O
secinfo	pointer
->	O
first_str	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
secinfo	pointer
)	O
secinfo	pointer
->	O
sec	pointer
->	O
size	long
=	O
size	long
;	O
e	pointer
->	O
secinfo	pointer
->	O
first_str	pointer
=	O
e	pointer
;	O
size	long
=	O
0	int
;	O
}	O
size	long
=	O
(	O
size	long
+	O
e	pointer
->	O
alignment	int
-	O
1	int
)	O
&	O
~	O
(	O
(	O
bfd_vma	long
)	O
e	pointer
->	O
alignment	int
-	O
1	int
)	O
;	O
e	pointer
->	O
u	union
.	O
index	function
=	O
size	long
;	O
size	long
+=	O
e	pointer
->	O
len	long
;	O
secinfo	pointer
=	O
e	pointer
->	O
secinfo	pointer
;	O
}	O
secinfo	pointer
->	O
sec	pointer
->	O
size	long
=	O
size	long
;	O
}	O
if	O
(	O
align	int
)	O
secinfo	pointer
->	O
sec	pointer
->	O
size	long
=	O
(	O
secinfo	pointer
->	O
sec	pointer
->	O
size	long
+	O
align	int
-	O
1	int
)	O
&	O
-	O
align	int
;	O
for	O
(	O
secinfo	pointer
=	O
sinfo	pointer
->	O
chain	pointer
;	O
secinfo	pointer
;	O
secinfo	pointer
=	O
secinfo	pointer
->	O
next	pointer
)	O
if	O
(	O
secinfo	pointer
->	O
first_str	pointer
==	O
NULL	O
)	O
secinfo	pointer
->	O
sec	pointer
->	O
flags	int
|=	O
SEC_EXCLUDE	int
|	O
SEC_KEEP	int
;	O
}	O
return	O
TRUE	int
;	O
}	O
bfd_boolean	int
_bfd_write_merged_section	function
(	O
bfd	struct
*	O
output_bfd	pointer
,	O
asection	struct
*	O
sec	pointer
,	O
void	O
*	O
psecinfo	pointer
)	O
{	O
struct	O
sec_merge_sec_info	struct
*	O
secinfo	pointer
;	O
file_ptr	long
pos	long
;	O
unsigned	O
char	O
*	O
contents	pointer
;	O
Elf_Internal_Shdr	struct
*	O
hdr	pointer
;	O
secinfo	pointer
=	O
(	O
struct	O
sec_merge_sec_info	struct
*	O
)	O
psecinfo	pointer
;	O
if	O
(	O
!	O
secinfo	pointer
)	O
return	O
FALSE	int
;	O
if	O
(	O
secinfo	pointer
->	O
first_str	pointer
==	O
NULL	O
)	O
return	O
TRUE	int
;	O
hdr	pointer
=	O
&	O
elf_section_data	O
(	O
sec	pointer
->	O
output_section	pointer
)	O
->	O
this_hdr	struct
;	O
if	O
(	O
hdr	pointer
->	O
sh_offset	array
==	O
(	O
file_ptr	long
)	O
-	O
1	int
)	O
{	O
contents	pointer
=	O
hdr	pointer
->	O
contents	pointer
;	O
if	O
(	O
(	O
sec	pointer
->	O
output_section	pointer
->	O
flags	int
&	O
SEC_ELF_COMPRESS	int
)	O
==	O
0	int
||	O
contents	pointer
==	O
NULL	O
)	O
abort	function
(	O
)	O
;	O
}	O
else	O
{	O
contents	pointer
=	O
NULL	O
;	O
pos	long
=	O
sec	pointer
->	O
output_section	pointer
->	O
filepos	long
+	O
sec	pointer
->	O
output_offset	long
;	O
if	O
(	O
bfd_seek	function
(	O
output_bfd	pointer
,	O
pos	long
,	O
SEEK_SET	int
)	O
!=	O
0	int
)	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
!	O
sec_merge_emit	function
(	O
output_bfd	pointer
,	O
secinfo	pointer
->	O
first_str	pointer
,	O
contents	pointer
,	O
sec	pointer
->	O
output_offset	long
)	O
)	O
return	O
FALSE	int
;	O
return	O
TRUE	int
;	O
}	O
bfd_vma	long
_bfd_merged_section_offset	function
(	O
bfd	struct
*	O
output_bfd	pointer
ATTRIBUTE_UNUSED	O
,	O
asection	struct
*	O
*	O
psec	pointer
,	O
void	O
*	O
psecinfo	pointer
,	O
bfd_vma	long
offset	long
)	O
{	O
struct	O
sec_merge_sec_info	struct
*	O
secinfo	pointer
;	O
struct	O
sec_merge_hash_entry	struct
*	O
entry	pointer
;	O
unsigned	O
char	O
*	O
p	pointer
;	O
asection	struct
*	O
sec	pointer
=	O
*	O
psec	pointer
;	O
secinfo	pointer
=	O
(	O
struct	O
sec_merge_sec_info	struct
*	O
)	O
psecinfo	pointer
;	O
if	O
(	O
!	O
secinfo	pointer
)	O
return	O
offset	long
;	O
if	O
(	O
offset	long
>=	O
sec	pointer
->	O
rawsize	long
)	O
{	O
if	O
(	O
offset	long
>	O
sec	pointer
->	O
rawsize	long
)	O
_bfd_error_handler	function
(	O
_	O
(	O
"%pB: access beyond end of merged section (%"	pointer
PRId64	O
")"	pointer
)	O
,	O
sec	pointer
->	O
owner	pointer
,	O
(	O
int64_t	long
)	O
offset	long
)	O
;	O
return	O
secinfo	pointer
->	O
first_str	pointer
?	O
sec	pointer
->	O
size	long
:	O
0	int
;	O
}	O
if	O
(	O
secinfo	pointer
->	O
htab	struct
->	O
strings	pointer
)	O
{	O
if	O
(	O
sec	pointer
->	O
entsize	int
==	O
1	int
)	O
{	O
p	pointer
=	O
secinfo	pointer
->	O
contents	pointer
+	O
offset	long
-	O
1	int
;	O
while	O
(	O
p	pointer
>=	O
secinfo	pointer
->	O
contents	pointer
&&	O
*	O
p	pointer
)	O
--	O
p	pointer
;	O
++	O
p	pointer
;	O
}	O
else	O
{	O
p	pointer
=	O
secinfo	pointer
->	O
contents	pointer
+	O
(	O
offset	long
/	O
sec	pointer
->	O
entsize	int
)	O
*	O
sec	pointer
->	O
entsize	int
;	O
p	pointer
-=	O
sec	pointer
->	O
entsize	int
;	O
while	O
(	O
p	pointer
>=	O
secinfo	pointer
->	O
contents	pointer
)	O
{	O
unsigned	O
int	O
i	pointer
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
sec	pointer
->	O
entsize	int
;	O
++	O
i	pointer
)	O
if	O
(	O
p	pointer
[	O
i	pointer
]	O
!=	O
'\0'	O
)	O
break	O
;	O
if	O
(	O
i	pointer
==	O
sec	pointer
->	O
entsize	int
)	O
break	O
;	O
p	pointer
-=	O
sec	pointer
->	O
entsize	int
;	O
}	O
p	pointer
+=	O
sec	pointer
->	O
entsize	int
;	O
}	O
}	O
else	O
{	O
p	pointer
=	O
secinfo	pointer
->	O
contents	pointer
+	O
(	O
offset	long
/	O
sec	pointer
->	O
entsize	int
)	O
*	O
sec	pointer
->	O
entsize	int
;	O
}	O
entry	pointer
=	O
sec_merge_hash_lookup	function
(	O
secinfo	pointer
->	O
htab	struct
,	O
(	O
char	O
*	O
)	O
p	pointer
,	O
0	int
,	O
FALSE	int
)	O
;	O
if	O
(	O
!	O
entry	pointer
)	O
{	O
if	O
(	O
!	O
secinfo	pointer
->	O
htab	struct
->	O
strings	pointer
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
!	O
secinfo	pointer
->	O
htab	struct
->	O
first	pointer
)	O
abort	function
(	O
)	O
;	O
entry	pointer
=	O
secinfo	pointer
->	O
htab	struct
->	O
first	pointer
;	O
p	pointer
=	O
(	O
secinfo	pointer
->	O
contents	pointer
+	O
(	O
offset	long
/	O
sec	pointer
->	O
entsize	int
+	O
1	int
)	O
*	O
sec	pointer
->	O
entsize	int
-	O
entry	pointer
->	O
len	long
)	O
;	O
}	O
*	O
psec	pointer
=	O
entry	pointer
->	O
secinfo	pointer
->	O
sec	pointer
;	O
return	O
entry	pointer
->	O
u	union
.	O
index	function
+	O
(	O
secinfo	pointer
->	O
contents	pointer
+	O
offset	long
-	O
p	pointer
)	O
;	O
}	O
void	O
_bfd_merge_sections_free	function
(	O
void	O
*	O
xsinfo	pointer
)	O
{	O
struct	O
sec_merge_info	struct
*	O
sinfo	pointer
;	O
for	O
(	O
sinfo	pointer
=	O
(	O
struct	O
sec_merge_info	struct
*	O
)	O
xsinfo	pointer
;	O
sinfo	pointer
;	O
sinfo	pointer
=	O
sinfo	pointer
->	O
next	pointer
)	O
{	O
bfd_hash_table_free	function
(	O
&	O
sinfo	pointer
->	O
htab	struct
->	O
table	pointer
)	O
;	O
free	function
(	O
sinfo	pointer
->	O
htab	struct
)	O
;	O
}	O
}	O
