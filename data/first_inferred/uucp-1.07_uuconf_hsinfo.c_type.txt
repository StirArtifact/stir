const	O
char	O
_uuconf_hsinfo_rcsid	array
[	O
]	O
=	O
"$Id: hsinfo.c,v 1.17 2002/03/05 19:10:42 ian Rel $"	pointer
;	O
static	O
int	O
ihadd_machine_perm	function
P	O
(	O
(	O
struct	O
sglobal	struct
*	O
qglobal	pointer
,	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
,	O
struct	O
shpermissions	struct
*	O
qperm	pointer
)	O
)	O
;	O
static	O
int	O
ihadd_logname_perm	function
P	O
(	O
(	O
struct	O
sglobal	struct
*	O
qglobal	pointer
,	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
,	O
struct	O
shpermissions	struct
*	O
qperm	pointer
)	O
)	O
;	O
int	O
_uuconf_ihdb_system_internal	function
(	O
qglobal	pointer
,	O
zsystem	pointer
,	O
qsys	pointer
)	O
struct	O
sglobal	struct
*	O
qglobal	pointer
;	O
const	O
char	O
*	O
zsystem	pointer
;	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
;	O
{	O
int	O
iret	int
;	O
struct	O
shpermissions	struct
*	O
qperm	pointer
;	O
char	O
*	O
zline	pointer
;	O
size_t	long
cline	long
;	O
char	O
*	O
*	O
pzsplit	pointer
;	O
size_t	long
csplit	pointer
;	O
char	O
*	O
*	O
pzcomma	pointer
;	O
size_t	long
ccomma	long
;	O
pointer	pointer
pblock	pointer
;	O
char	O
*	O
*	O
pz	pointer
;	O
boolean	int
ffound_machine	int
,	O
ffound_login	int
;	O
struct	O
shpermissions	struct
*	O
qother_machine	pointer
;	O
struct	O
uuconf_system	struct
*	O
qalt	pointer
;	O
if	O
(	O
!	O
qglobal	pointer
->	O
qprocess	pointer
->	O
fhdb_read_permissions	int
)	O
{	O
iret	int
=	O
_uuconf_ihread_permissions	function
(	O
qglobal	pointer
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
return	O
iret	int
;	O
}	O
for	O
(	O
qperm	pointer
=	O
qglobal	pointer
->	O
qprocess	pointer
->	O
qhdb_permissions	pointer
;	O
qperm	pointer
!=	O
NULL	O
;	O
qperm	pointer
=	O
qperm	pointer
->	O
qnext	pointer
)	O
{	O
if	O
(	O
qperm	pointer
->	O
pzalias	pointer
==	O
NULL	O
||	O
qperm	pointer
->	O
pzmachine	pointer
==	O
NULL	O
||	O
qperm	pointer
->	O
pzalias	pointer
==	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
||	O
qperm	pointer
->	O
pzmachine	pointer
==	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
)	O
continue	O
;	O
for	O
(	O
pz	pointer
=	O
qperm	pointer
->	O
pzalias	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
*	O
pz	pointer
,	O
zsystem	pointer
)	O
==	O
0	int
)	O
{	O
zsystem	pointer
=	O
qperm	pointer
->	O
pzmachine	pointer
[	O
0	int
]	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
*	O
pz	pointer
!=	O
NULL	O
)	O
break	O
;	O
}	O
zline	pointer
=	O
NULL	O
;	O
cline	long
=	O
0	int
;	O
pzsplit	pointer
=	O
NULL	O
;	O
csplit	pointer
=	O
0	int
;	O
pzcomma	pointer
=	O
NULL	O
;	O
ccomma	long
=	O
0	int
;	O
pblock	pointer
=	O
NULL	O
;	O
iret	int
=	O
UUCONF_SUCCESS	O
;	O
for	O
(	O
pz	pointer
=	O
qglobal	pointer
->	O
qprocess	pointer
->	O
pzhdb_systems	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
{	O
FILE	struct
*	O
e	pointer
;	O
int	O
cchars	int
;	O
qglobal	pointer
->	O
ilineno	int
=	O
0	int
;	O
e	pointer
=	O
fopen	function
(	O
*	O
pz	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
e	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
FNO_SUCH_FILE	O
(	O
)	O
)	O
continue	O
;	O
qglobal	pointer
->	O
ierrno	int
=	O
errno	O
;	O
iret	int
=	O
UUCONF_FOPEN_FAILED	O
|	O
UUCONF_ERROR_ERRNO	O
;	O
break	O
;	O
}	O
while	O
(	O
(	O
cchars	int
=	O
_uuconf_getline	function
(	O
qglobal	pointer
,	O
&	O
zline	pointer
,	O
&	O
cline	long
,	O
e	pointer
)	O
)	O
>	O
0	int
)	O
{	O
int	O
ctoks	int
,	O
ctimes	int
,	O
i	int
;	O
struct	O
uuconf_system	struct
*	O
qset	pointer
;	O
char	O
*	O
z	pointer
,	O
*	O
zretry	pointer
;	O
int	O
cretry	int
;	O
++	O
qglobal	pointer
->	O
ilineno	int
;	O
--	O
cchars	int
;	O
if	O
(	O
zline	pointer
[	O
cchars	int
]	O
==	O
'\n'	O
)	O
zline	pointer
[	O
cchars	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
isspace	function
(	O
BUCHAR	O
(	O
zline	pointer
[	O
0	int
]	O
)	O
)	O
||	O
zline	pointer
[	O
0	int
]	O
==	O
'#'	O
)	O
continue	O
;	O
ctoks	int
=	O
_uuconf_istrsplit	function
(	O
zline	pointer
,	O
'\0'	O
,	O
&	O
pzsplit	pointer
,	O
&	O
csplit	pointer
)	O
;	O
if	O
(	O
ctoks	int
<	O
0	int
)	O
{	O
qglobal	pointer
->	O
ierrno	int
=	O
errno	O
;	O
iret	int
=	O
UUCONF_MALLOC_FAILED	O
|	O
UUCONF_ERROR_ERRNO	O
;	O
break	O
;	O
}	O
if	O
(	O
ctoks	int
<	O
1	int
||	O
strcmp	function
(	O
zsystem	pointer
,	O
pzsplit	pointer
[	O
0	int
]	O
)	O
!=	O
0	int
)	O
continue	O
;	O
if	O
(	O
pblock	pointer
==	O
NULL	O
)	O
{	O
pblock	pointer
=	O
uuconf_malloc_block	function
(	O
)	O
;	O
if	O
(	O
pblock	pointer
==	O
NULL	O
)	O
{	O
qglobal	pointer
->	O
ierrno	int
=	O
errno	O
;	O
iret	int
=	O
UUCONF_MALLOC_FAILED	O
|	O
UUCONF_ERROR_ERRNO	O
;	O
break	O
;	O
}	O
_uuconf_uclear_system	function
(	O
qsys	pointer
)	O
;	O
qsys	pointer
->	O
uuconf_palloc	pointer
=	O
pblock	pointer
;	O
qset	pointer
=	O
qsys	pointer
;	O
}	O
else	O
{	O
struct	O
uuconf_system	struct
*	O
*	O
pq	pointer
;	O
qset	pointer
=	O
(	O
(	O
struct	O
uuconf_system	struct
*	O
)	O
uuconf_malloc	function
(	O
pblock	pointer
,	O
sizeof	O
(	O
struct	O
uuconf_system	struct
)	O
)	O
)	O
;	O
if	O
(	O
qset	pointer
==	O
NULL	O
)	O
{	O
qglobal	pointer
->	O
ierrno	int
=	O
errno	O
;	O
iret	int
=	O
UUCONF_MALLOC_FAILED	O
|	O
UUCONF_ERROR_ERRNO	O
;	O
break	O
;	O
}	O
_uuconf_uclear_system	function
(	O
qset	pointer
)	O
;	O
for	O
(	O
pq	pointer
=	O
&	O
qsys	pointer
->	O
uuconf_qalternate	pointer
;	O
*	O
pq	pointer
!=	O
NULL	O
;	O
pq	pointer
=	O
&	O
(	O
*	O
pq	pointer
)	O
->	O
uuconf_qalternate	pointer
)	O
;	O
*	O
pq	pointer
=	O
qset	pointer
;	O
}	O
if	O
(	O
uuconf_add_block	function
(	O
pblock	pointer
,	O
zline	pointer
)	O
!=	O
0	int
)	O
{	O
qglobal	pointer
->	O
ierrno	int
=	O
errno	O
;	O
iret	int
=	O
UUCONF_MALLOC_FAILED	O
|	O
UUCONF_ERROR_ERRNO	O
;	O
break	O
;	O
}	O
zline	pointer
=	O
NULL	O
;	O
cline	long
=	O
0	int
;	O
qset	pointer
->	O
uuconf_zname	pointer
=	O
pzsplit	pointer
[	O
0	int
]	O
;	O
qset	pointer
->	O
uuconf_fcall	int
=	O
TRUE	O
;	O
qset	pointer
->	O
uuconf_fcalled	int
=	O
FALSE	O
;	O
if	O
(	O
ctoks	int
<	O
2	int
)	O
continue	O
;	O
zretry	pointer
=	O
strchr	function
(	O
pzsplit	pointer
[	O
1	int
]	O
,	O
';'	O
)	O
;	O
if	O
(	O
zretry	pointer
==	O
NULL	O
)	O
cretry	int
=	O
0	int
;	O
else	O
{	O
*	O
zretry	pointer
=	O
'\0'	O
;	O
cretry	int
=	O
(	O
int	O
)	O
strtol	function
(	O
zretry	pointer
+	O
1	int
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
10	int
)	O
;	O
}	O
ctimes	int
=	O
_uuconf_istrsplit	function
(	O
pzsplit	pointer
[	O
1	int
]	O
,	O
','	O
,	O
&	O
pzcomma	pointer
,	O
&	O
ccomma	long
)	O
;	O
if	O
(	O
ctimes	int
<	O
0	int
)	O
{	O
qglobal	pointer
->	O
ierrno	int
=	O
errno	O
;	O
iret	int
=	O
UUCONF_MALLOC_FAILED	O
|	O
UUCONF_ERROR_ERRNO	O
;	O
break	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ctimes	int
;	O
i	int
++	O
)	O
{	O
char	O
*	O
zslash	pointer
;	O
char	O
bgrade	char
;	O
z	pointer
=	O
pzcomma	pointer
[	O
i	int
]	O
;	O
zslash	pointer
=	O
strchr	function
(	O
z	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
zslash	pointer
==	O
NULL	O
)	O
bgrade	char
=	O
UUCONF_GRADE_LOW	O
;	O
else	O
{	O
*	O
zslash	pointer
=	O
'\0'	O
;	O
bgrade	char
=	O
zslash	pointer
[	O
1	int
]	O
;	O
if	O
(	O
!	O
UUCONF_GRADE_LEGAL	O
(	O
bgrade	char
)	O
)	O
bgrade	char
=	O
UUCONF_GRADE_LOW	O
;	O
}	O
iret	int
=	O
_uuconf_itime_parse	function
(	O
qglobal	pointer
,	O
z	pointer
,	O
(	O
long	O
)	O
bgrade	char
,	O
cretry	int
,	O
_uuconf_itime_grade_cmp	function
,	O
&	O
qset	pointer
->	O
uuconf_qtimegrade	pointer
,	O
pblock	pointer
)	O
;	O
if	O
(	O
iret	int
==	O
UUCONF_SYNTAX_ERROR	O
)	O
iret	int
=	O
UUCONF_SUCCESS	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
break	O
;	O
if	O
(	O
bgrade	char
!=	O
UUCONF_GRADE_LOW	O
)	O
qset	pointer
->	O
uuconf_qcalltimegrade	pointer
=	O
qset	pointer
->	O
uuconf_qtimegrade	pointer
;	O
}	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
break	O
;	O
if	O
(	O
ctoks	int
<	O
3	int
)	O
continue	O
;	O
qset	pointer
->	O
uuconf_zport	pointer
=	O
pzsplit	pointer
[	O
2	int
]	O
;	O
z	pointer
=	O
strchr	function
(	O
pzsplit	pointer
[	O
2	int
]	O
,	O
','	O
)	O
;	O
if	O
(	O
z	pointer
!=	O
NULL	O
)	O
{	O
qset	pointer
->	O
uuconf_zprotocols	pointer
=	O
z	pointer
+	O
1	int
;	O
*	O
z	pointer
=	O
'\0'	O
;	O
}	O
if	O
(	O
ctoks	int
<	O
4	int
)	O
continue	O
;	O
z	pointer
=	O
pzsplit	pointer
[	O
3	int
]	O
;	O
if	O
(	O
strcasecmp	function
(	O
z	pointer
,	O
"Any"	pointer
)	O
!=	O
0	int
&&	O
strcmp	function
(	O
z	pointer
,	O
"-"	pointer
)	O
!=	O
0	int
)	O
{	O
char	O
*	O
zend	pointer
;	O
while	O
(	O
*	O
z	pointer
!=	O
'\0'	O
&&	O
!	O
isdigit	function
(	O
BUCHAR	O
(	O
*	O
z	pointer
)	O
)	O
)	O
++	O
z	pointer
;	O
qset	pointer
->	O
uuconf_ibaud	long
=	O
strtol	function
(	O
z	pointer
,	O
&	O
zend	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
zend	pointer
==	O
'-'	O
)	O
qset	pointer
->	O
uuconf_ihighbaud	long
=	O
strtol	function
(	O
zend	pointer
+	O
1	int
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
z	pointer
!=	O
pzsplit	pointer
[	O
3	int
]	O
)	O
{	O
size_t	long
cport	long
,	O
cclass	long
;	O
cport	long
=	O
strlen	function
(	O
pzsplit	pointer
[	O
2	int
]	O
)	O
;	O
cclass	long
=	O
z	pointer
-	O
pzsplit	pointer
[	O
3	int
]	O
;	O
qset	pointer
->	O
uuconf_zport	pointer
=	O
uuconf_malloc	function
(	O
pblock	pointer
,	O
cport	long
+	O
cclass	long
+	O
1	int
)	O
;	O
if	O
(	O
qset	pointer
->	O
uuconf_zport	pointer
==	O
NULL	O
)	O
{	O
qglobal	pointer
->	O
ierrno	int
=	O
errno	O
;	O
iret	int
=	O
UUCONF_MALLOC_FAILED	O
|	O
UUCONF_ERROR_ERRNO	O
;	O
break	O
;	O
}	O
memcpy	function
(	O
(	O
pointer	pointer
)	O
qset	pointer
->	O
uuconf_zport	pointer
,	O
(	O
pointer	pointer
)	O
pzsplit	pointer
[	O
2	int
]	O
,	O
cport	long
)	O
;	O
memcpy	function
(	O
(	O
pointer	pointer
)	O
(	O
qset	pointer
->	O
uuconf_zport	pointer
+	O
cport	long
)	O
,	O
(	O
pointer	pointer
)	O
pzsplit	pointer
[	O
3	int
]	O
,	O
cclass	long
)	O
;	O
qset	pointer
->	O
uuconf_zport	pointer
[	O
cport	long
+	O
cclass	long
]	O
=	O
'\0'	O
;	O
}	O
}	O
if	O
(	O
ctoks	int
<	O
5	int
)	O
continue	O
;	O
qset	pointer
->	O
uuconf_zphone	pointer
=	O
pzsplit	pointer
[	O
4	int
]	O
;	O
if	O
(	O
ctoks	int
<	O
6	int
)	O
continue	O
;	O
pzsplit	pointer
[	O
4	int
]	O
=	O
(	O
char	O
*	O
)	O
"chat"	pointer
;	O
iret	int
=	O
_uuconf_ichat_cmd	function
(	O
qglobal	pointer
,	O
ctoks	int
-	O
4	int
,	O
pzsplit	pointer
+	O
4	int
,	O
&	O
qset	pointer
->	O
uuconf_schat	struct
,	O
pblock	pointer
)	O
;	O
iret	int
&=	O
~	O
UUCONF_CMDTABRET_KEEP	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
break	O
;	O
}	O
(	O
void	O
)	O
fclose	function
(	O
e	pointer
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
break	O
;	O
}	O
if	O
(	O
zline	pointer
!=	O
NULL	O
)	O
free	function
(	O
(	O
pointer	pointer
)	O
zline	pointer
)	O
;	O
if	O
(	O
pzsplit	pointer
!=	O
NULL	O
)	O
free	function
(	O
(	O
pointer	pointer
)	O
pzsplit	pointer
)	O
;	O
if	O
(	O
pzcomma	pointer
!=	O
NULL	O
)	O
free	function
(	O
(	O
pointer	pointer
)	O
pzcomma	pointer
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
{	O
qglobal	pointer
->	O
zfilename	pointer
=	O
*	O
pz	pointer
;	O
return	O
iret	int
|	O
UUCONF_ERROR_FILENAME	O
|	O
UUCONF_ERROR_LINENO	O
;	O
}	O
if	O
(	O
pblock	pointer
==	O
NULL	O
)	O
return	O
UUCONF_NOT_FOUND	O
;	O
ffound_machine	int
=	O
FALSE	O
;	O
ffound_login	int
=	O
FALSE	O
;	O
qother_machine	pointer
=	O
NULL	O
;	O
for	O
(	O
qperm	pointer
=	O
qglobal	pointer
->	O
qprocess	pointer
->	O
qhdb_permissions	pointer
;	O
qperm	pointer
!=	O
NULL	O
;	O
qperm	pointer
=	O
qperm	pointer
->	O
qnext	pointer
)	O
{	O
boolean	int
fmachine	int
;	O
if	O
(	O
qother_machine	pointer
==	O
NULL	O
&&	O
qperm	pointer
->	O
pzmachine	pointer
!=	O
NULL	O
&&	O
qperm	pointer
->	O
pzmachine	pointer
!=	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
&&	O
qperm	pointer
->	O
pzmachine	pointer
[	O
0	int
]	O
[	O
0	int
]	O
==	O
'O'	O
&&	O
strcmp	function
(	O
qperm	pointer
->	O
pzmachine	pointer
[	O
0	int
]	O
,	O
"OTHER"	pointer
)	O
==	O
0	int
)	O
qother_machine	pointer
=	O
qperm	pointer
;	O
fmachine	int
=	O
FALSE	O
;	O
if	O
(	O
!	O
ffound_machine	int
&&	O
qperm	pointer
->	O
pzmachine	pointer
!=	O
NULL	O
&&	O
qperm	pointer
->	O
pzmachine	pointer
!=	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
)	O
{	O
for	O
(	O
pz	pointer
=	O
qperm	pointer
->	O
pzmachine	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
{	O
if	O
(	O
(	O
*	O
pz	pointer
)	O
[	O
0	int
]	O
==	O
zsystem	pointer
[	O
0	int
]	O
&&	O
strcmp	function
(	O
*	O
pz	pointer
,	O
zsystem	pointer
)	O
==	O
0	int
)	O
{	O
for	O
(	O
qalt	pointer
=	O
qsys	pointer
;	O
qalt	pointer
!=	O
NULL	O
;	O
qalt	pointer
=	O
qalt	pointer
->	O
uuconf_qalternate	pointer
)	O
{	O
if	O
(	O
qalt	pointer
->	O
uuconf_fcall	int
)	O
{	O
iret	int
=	O
ihadd_machine_perm	function
(	O
qglobal	pointer
,	O
qalt	pointer
,	O
qperm	pointer
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
return	O
iret	int
;	O
}	O
}	O
fmachine	int
=	O
TRUE	O
;	O
ffound_machine	int
=	O
TRUE	O
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
qperm	pointer
->	O
pzlogname	pointer
!=	O
NULL	O
&&	O
qperm	pointer
->	O
pzlogname	pointer
!=	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
&&	O
qperm	pointer
->	O
pzvalidate	pointer
!=	O
NULL	O
&&	O
qperm	pointer
->	O
pzvalidate	pointer
!=	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
)	O
{	O
for	O
(	O
pz	pointer
=	O
qperm	pointer
->	O
pzvalidate	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
++	O
pz	pointer
)	O
if	O
(	O
(	O
*	O
pz	pointer
)	O
[	O
0	int
]	O
==	O
zsystem	pointer
[	O
0	int
]	O
&&	O
strcmp	function
(	O
*	O
pz	pointer
,	O
zsystem	pointer
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
*	O
pz	pointer
!=	O
NULL	O
)	O
{	O
for	O
(	O
pz	pointer
=	O
qperm	pointer
->	O
pzlogname	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
++	O
pz	pointer
)	O
{	O
if	O
(	O
fmachine	int
&&	O
(	O
qsys	pointer
->	O
uuconf_zcalled_login	pointer
==	O
NULL	O
||	O
(	O
qsys	pointer
->	O
uuconf_zcalled_login	pointer
==	O
(	O
char	O
*	O
)	O
&	O
_uuconf_unset	pointer
)	O
)	O
)	O
{	O
qsys	pointer
->	O
uuconf_zcalled_login	pointer
=	O
*	O
pz	pointer
;	O
iret	int
=	O
ihadd_logname_perm	function
(	O
qglobal	pointer
,	O
qsys	pointer
,	O
qperm	pointer
)	O
;	O
}	O
else	O
{	O
struct	O
uuconf_system	struct
*	O
qnew	pointer
;	O
struct	O
uuconf_system	struct
*	O
*	O
pq	pointer
;	O
qnew	pointer
=	O
(	O
(	O
struct	O
uuconf_system	struct
*	O
)	O
uuconf_malloc	function
(	O
pblock	pointer
,	O
sizeof	O
(	O
struct	O
uuconf_system	struct
)	O
)	O
)	O
;	O
if	O
(	O
qnew	pointer
==	O
NULL	O
)	O
{	O
qglobal	pointer
->	O
ierrno	int
=	O
errno	O
;	O
return	O
UUCONF_MALLOC_FAILED	O
|	O
UUCONF_ERROR_ERRNO	O
;	O
}	O
*	O
qnew	pointer
=	O
*	O
qsys	pointer
;	O
qnew	pointer
->	O
uuconf_qalternate	pointer
=	O
NULL	O
;	O
for	O
(	O
pq	pointer
=	O
&	O
qsys	pointer
->	O
uuconf_qalternate	pointer
;	O
*	O
pq	pointer
!=	O
NULL	O
;	O
pq	pointer
=	O
&	O
(	O
*	O
pq	pointer
)	O
->	O
uuconf_qalternate	pointer
)	O
;	O
*	O
pq	pointer
=	O
qnew	pointer
;	O
qnew	pointer
->	O
uuconf_zcalled_login	pointer
=	O
*	O
pz	pointer
;	O
qnew	pointer
->	O
uuconf_fcall	int
=	O
FALSE	O
;	O
iret	int
=	O
ihadd_logname_perm	function
(	O
qglobal	pointer
,	O
qnew	pointer
,	O
qperm	pointer
)	O
;	O
}	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
return	O
iret	int
;	O
}	O
ffound_login	int
=	O
TRUE	O
;	O
}	O
}	O
}	O
if	O
(	O
!	O
ffound_machine	int
&&	O
qother_machine	pointer
!=	O
NULL	O
)	O
{	O
for	O
(	O
qalt	pointer
=	O
qsys	pointer
;	O
qalt	pointer
!=	O
NULL	O
;	O
qalt	pointer
=	O
qalt	pointer
->	O
uuconf_qalternate	pointer
)	O
{	O
if	O
(	O
qalt	pointer
->	O
uuconf_fcall	int
)	O
{	O
iret	int
=	O
ihadd_machine_perm	function
(	O
qglobal	pointer
,	O
qalt	pointer
,	O
qother_machine	pointer
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
return	O
iret	int
;	O
}	O
}	O
}	O
if	O
(	O
!	O
ffound_login	int
)	O
{	O
for	O
(	O
qperm	pointer
=	O
qglobal	pointer
->	O
qprocess	pointer
->	O
qhdb_permissions	pointer
;	O
qperm	pointer
!=	O
NULL	O
;	O
qperm	pointer
=	O
qperm	pointer
->	O
qnext	pointer
)	O
{	O
if	O
(	O
qperm	pointer
->	O
pzlogname	pointer
==	O
NULL	O
||	O
qperm	pointer
->	O
pzlogname	pointer
==	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
)	O
continue	O
;	O
for	O
(	O
pz	pointer
=	O
qperm	pointer
->	O
pzlogname	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
{	O
struct	O
uuconf_system	struct
*	O
qnew	pointer
;	O
struct	O
uuconf_system	struct
*	O
*	O
pq	pointer
;	O
qnew	pointer
=	O
(	O
(	O
struct	O
uuconf_system	struct
*	O
)	O
uuconf_malloc	function
(	O
pblock	pointer
,	O
sizeof	O
(	O
struct	O
uuconf_system	struct
)	O
)	O
)	O
;	O
if	O
(	O
qnew	pointer
==	O
NULL	O
)	O
{	O
qglobal	pointer
->	O
ierrno	int
=	O
errno	O
;	O
return	O
UUCONF_MALLOC_FAILED	O
|	O
UUCONF_ERROR_ERRNO	O
;	O
}	O
*	O
qnew	pointer
=	O
*	O
qsys	pointer
;	O
qnew	pointer
->	O
uuconf_qalternate	pointer
=	O
NULL	O
;	O
for	O
(	O
pq	pointer
=	O
&	O
qsys	pointer
->	O
uuconf_qalternate	pointer
;	O
*	O
pq	pointer
!=	O
NULL	O
;	O
pq	pointer
=	O
&	O
(	O
*	O
pq	pointer
)	O
->	O
uuconf_qalternate	pointer
)	O
;	O
*	O
pq	pointer
=	O
qnew	pointer
;	O
if	O
(	O
strcmp	function
(	O
*	O
pz	pointer
,	O
"OTHER"	pointer
)	O
==	O
0	int
)	O
qnew	pointer
->	O
uuconf_zcalled_login	pointer
=	O
(	O
char	O
*	O
)	O
"ANY"	pointer
;	O
else	O
qnew	pointer
->	O
uuconf_zcalled_login	pointer
=	O
*	O
pz	pointer
;	O
qnew	pointer
->	O
uuconf_fcall	int
=	O
FALSE	O
;	O
iret	int
=	O
ihadd_logname_perm	function
(	O
qglobal	pointer
,	O
qnew	pointer
,	O
qperm	pointer
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
return	O
iret	int
;	O
}	O
}	O
}	O
for	O
(	O
qalt	pointer
=	O
qsys	pointer
;	O
qalt	pointer
!=	O
NULL	O
;	O
qalt	pointer
=	O
qalt	pointer
->	O
uuconf_qalternate	pointer
)	O
{	O
iret	int
=	O
_uuconf_iadd_string	function
(	O
qglobal	pointer
,	O
(	O
char	O
*	O
)	O
ZROOTDIR	pointer
,	O
FALSE	O
,	O
FALSE	O
,	O
&	O
qalt	pointer
->	O
uuconf_pzlocal_receive	pointer
,	O
pblock	pointer
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
return	O
iret	int
;	O
}	O
if	O
(	O
qsys	pointer
->	O
uuconf_qtimegrade	pointer
!=	O
NULL	O
&&	O
qsys	pointer
->	O
uuconf_qtimegrade	pointer
!=	O
(	O
struct	O
uuconf_timespan	struct
*	O
)	O
&	O
_uuconf_unset	pointer
&&	O
qsys	pointer
->	O
uuconf_qtimegrade	pointer
->	O
uuconf_cretry	int
>	O
0	int
)	O
qsys	pointer
->	O
uuconf_cmax_retries	int
=	O
0	int
;	O
return	O
UUCONF_SUCCESS	O
;	O
}	O
static	O
int	O
ihadd_machine_perm	function
(	O
qglobal	pointer
,	O
qsys	pointer
,	O
qperm	pointer
)	O
struct	O
sglobal	struct
*	O
qglobal	pointer
ATTRIBUTE_UNUSED	O
;	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
;	O
struct	O
shpermissions	struct
*	O
qperm	pointer
;	O
{	O
if	O
(	O
qperm	pointer
->	O
frequest	int
>=	O
0	int
)	O
qsys	pointer
->	O
uuconf_fsend_request	int
=	O
qperm	pointer
->	O
frequest	int
;	O
else	O
qsys	pointer
->	O
uuconf_fsend_request	int
=	O
FALSE	O
;	O
qsys	pointer
->	O
uuconf_pzremote_send	pointer
=	O
qperm	pointer
->	O
pzread	pointer
;	O
qsys	pointer
->	O
uuconf_pzremote_receive	pointer
=	O
qperm	pointer
->	O
pzwrite	pointer
;	O
qsys	pointer
->	O
uuconf_pzcmds	pointer
=	O
qperm	pointer
->	O
pzcommands	pointer
;	O
qsys	pointer
->	O
uuconf_zlocalname	pointer
=	O
qperm	pointer
->	O
zmyname	pointer
;	O
qsys	pointer
->	O
uuconf_zpubdir	pointer
=	O
qperm	pointer
->	O
zpubdir	pointer
;	O
qsys	pointer
->	O
uuconf_pzalias	pointer
=	O
qperm	pointer
->	O
pzalias	pointer
;	O
return	O
UUCONF_SUCCESS	O
;	O
}	O
static	O
int	O
ihadd_logname_perm	function
(	O
qglobal	pointer
,	O
qsys	pointer
,	O
qperm	pointer
)	O
struct	O
sglobal	struct
*	O
qglobal	pointer
ATTRIBUTE_UNUSED	O
;	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
;	O
struct	O
shpermissions	struct
*	O
qperm	pointer
;	O
{	O
qsys	pointer
->	O
uuconf_fcalled	int
=	O
TRUE	O
;	O
if	O
(	O
qperm	pointer
->	O
frequest	int
>=	O
0	int
)	O
qsys	pointer
->	O
uuconf_fsend_request	int
=	O
qperm	pointer
->	O
frequest	int
;	O
else	O
qsys	pointer
->	O
uuconf_fsend_request	int
=	O
FALSE	O
;	O
qsys	pointer
->	O
uuconf_fcalled_transfer	int
=	O
qperm	pointer
->	O
fsendfiles	int
;	O
qsys	pointer
->	O
uuconf_pzremote_send	pointer
=	O
qperm	pointer
->	O
pzread	pointer
;	O
qsys	pointer
->	O
uuconf_pzremote_receive	pointer
=	O
qperm	pointer
->	O
pzwrite	pointer
;	O
qsys	pointer
->	O
uuconf_fcallback	int
=	O
qperm	pointer
->	O
fcallback	int
;	O
qsys	pointer
->	O
uuconf_zlocalname	pointer
=	O
qperm	pointer
->	O
zmyname	pointer
;	O
qsys	pointer
->	O
uuconf_zpubdir	pointer
=	O
qperm	pointer
->	O
zpubdir	pointer
;	O
return	O
UUCONF_SUCCESS	O
;	O
}	O
