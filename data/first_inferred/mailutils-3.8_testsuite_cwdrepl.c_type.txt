struct	O
dirtrans	struct
{	O
char	O
*	O
dir	pointer
;	O
size_t	long
dirlen	long
;	O
char	O
const	O
*	O
trans	pointer
;	O
ssize_t	long
translen	long
;	O
}	O
;	O
mu_list_t	pointer
translist	pointer
;	O
static	O
int	O
transcmp	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
struct	O
dirtrans	struct
const	O
*	O
trans1	pointer
=	O
a	pointer
;	O
struct	O
dirtrans	struct
const	O
*	O
trans2	pointer
=	O
b	pointer
;	O
return	O
strcmp	function
(	O
trans1	pointer
->	O
dir	pointer
,	O
trans2	pointer
->	O
dir	pointer
)	O
;	O
}	O
static	O
void	O
newdir	function
(	O
char	O
const	O
*	O
dir	pointer
,	O
char	O
const	O
*	O
trans	pointer
)	O
{	O
if	O
(	O
dir	pointer
)	O
{	O
size_t	long
dirlen	long
=	O
strlen	function
(	O
dir	pointer
)	O
;	O
size_t	long
translen	long
=	O
strlen	function
(	O
trans	pointer
)	O
;	O
struct	O
dirtrans	struct
*	O
dt	pointer
=	O
mu_alloc	function
(	O
sizeof	O
*	O
dt	pointer
)	O
;	O
while	O
(	O
dirlen	long
>	O
0	int
&&	O
dir	pointer
[	O
dirlen	long
-	O
1	int
]	O
==	O
'/'	O
)	O
dirlen	long
--	O
;	O
dt	pointer
->	O
dir	pointer
=	O
mu_alloc	function
(	O
dirlen	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
dt	pointer
->	O
dir	pointer
,	O
dir	pointer
,	O
dirlen	long
)	O
;	O
dt	pointer
->	O
dir	pointer
[	O
dirlen	long
]	O
=	O
0	int
;	O
dt	pointer
->	O
dirlen	long
=	O
dirlen	long
;	O
dt	pointer
->	O
trans	pointer
=	O
trans	pointer
;	O
dt	pointer
->	O
translen	long
=	O
translen	long
;	O
if	O
(	O
!	O
translist	pointer
)	O
{	O
MU_ASSERT	O
(	O
mu_list_create	function
(	O
&	O
translist	pointer
)	O
)	O
;	O
mu_list_set_comparator	function
(	O
translist	pointer
,	O
transcmp	function
)	O
;	O
}	O
else	O
if	O
(	O
mu_list_locate	function
(	O
translist	pointer
,	O
dt	pointer
,	O
NULL	O
)	O
==	O
0	int
)	O
{	O
free	function
(	O
dt	pointer
->	O
dir	pointer
)	O
;	O
free	function
(	O
dt	pointer
)	O
;	O
return	O
;	O
}	O
MU_ASSERT	O
(	O
mu_list_append	function
(	O
translist	pointer
,	O
dt	pointer
)	O
)	O
;	O
}	O
}	O
static	O
inline	O
int	O
isbnd	function
(	O
int	O
c	char
)	O
{	O
return	O
mu_c_is_class	O
(	O
c	char
,	O
MU_CTYPE_CNTRL	int
|	O
MU_CTYPE_PUNCT	int
|	O
MU_CTYPE_SPACE	int
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
i	long
;	O
int	O
rc	int
;	O
char	O
*	O
buf	pointer
=	O
NULL	O
;	O
size_t	long
size	long
,	O
n	pointer
;	O
mu_iterator_t	pointer
itr	pointer
;	O
mu_set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
mu_stdstream_setup	function
(	O
MU_STDSTREAM_RESET_NONE	int
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	long
;	O
i	long
+=	O
2	int
)	O
newdir	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
(	O
i	long
+	O
1	int
<	O
argc	long
)	O
?	O
argv	pointer
[	O
i	long
+	O
1	int
]	O
:	O
""	pointer
)	O
;	O
newdir	function
(	O
getenv	function
(	O
"PWD"	pointer
)	O
,	O
"."	pointer
)	O
;	O
newdir	function
(	O
mu_getcwd	function
(	O
)	O
,	O
"."	pointer
)	O
;	O
MU_ASSERT	O
(	O
mu_list_get_iterator	function
(	O
translist	pointer
,	O
&	O
itr	pointer
)	O
)	O
;	O
while	O
(	O
(	O
rc	int
=	O
mu_stream_getline	function
(	O
mu_strin	pointer
,	O
&	O
buf	pointer
,	O
&	O
size	long
,	O
&	O
n	pointer
)	O
)	O
==	O
0	int
&&	O
n	pointer
>	O
0	int
)	O
{	O
n	pointer
=	O
mu_rtrim_class	function
(	O
buf	pointer
,	O
MU_CTYPE_SPACE	int
)	O
;	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
struct	O
dirtrans	struct
*	O
dt	pointer
;	O
size_t	long
start	pointer
=	O
0	int
;	O
char	O
*	O
p	pointer
;	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
dt	pointer
)	O
;	O
while	O
(	O
(	O
p	pointer
=	O
strstr	function
(	O
buf	pointer
+	O
start	pointer
,	O
dt	pointer
->	O
dir	pointer
)	O
)	O
)	O
{	O
if	O
(	O
isbnd	function
(	O
p	pointer
[	O
dt	pointer
->	O
dirlen	long
]	O
)	O
)	O
{	O
size_t	long
off	long
=	O
p	pointer
-	O
buf	pointer
;	O
size_t	long
rest	long
=	O
n	pointer
-	O
start	pointer
;	O
ssize_t	long
d	long
=	O
(	O
ssize_t	long
)	O
dt	pointer
->	O
translen	long
-	O
dt	pointer
->	O
dirlen	long
;	O
if	O
(	O
d	long
>	O
0	int
)	O
{	O
if	O
(	O
n	pointer
+	O
d	long
+	O
1	int
>	O
size	long
)	O
{	O
size	long
=	O
n	pointer
+	O
d	long
+	O
1	int
;	O
buf	pointer
=	O
mu_realloc	function
(	O
buf	pointer
,	O
size	long
)	O
;	O
p	pointer
=	O
buf	pointer
+	O
off	long
;	O
}	O
}	O
memmove	function
(	O
p	pointer
+	O
dt	pointer
->	O
translen	long
,	O
p	pointer
+	O
dt	pointer
->	O
dirlen	long
,	O
rest	long
-	O
dt	pointer
->	O
dirlen	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
p	pointer
,	O
dt	pointer
->	O
trans	pointer
,	O
dt	pointer
->	O
translen	long
)	O
;	O
n	pointer
+=	O
d	long
;	O
start	pointer
=	O
off	long
+	O
dt	pointer
->	O
translen	long
;	O
}	O
else	O
start	pointer
++	O
;	O
}	O
}	O
mu_stream_write	function
(	O
mu_strout	pointer
,	O
buf	pointer
,	O
n	pointer
,	O
NULL	O
)	O
;	O
mu_stream_write	function
(	O
mu_strout	pointer
,	O
"\n"	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
