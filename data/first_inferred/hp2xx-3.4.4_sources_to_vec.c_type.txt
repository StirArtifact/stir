int	O
to_mftex	function
(	O
const	O
GEN_PAR	struct
*	O
pg	pointer
,	O
const	O
OUT_PAR	struct
*	O
po	pointer
,	O
int	O
mode	enum
)	O
{	O
PlotCmd	enum
cmd	enum
;	O
HPGL_Pt	struct
pt1	struct
;	O
float	O
xcoord2mm	float
,	O
ycoord2mm	float
;	O
FILE	struct
*	O
md	pointer
=	O
NULL	O
;	O
PEN_W	float
pensize	float
;	O
int	O
pencolor	int
,	O
pen_no	int
,	O
chars_out	int
=	O
0	int
,	O
max_chars_out	int
=	O
210	int
;	O
int	O
mapped_pen_no	int
;	O
PEN_W	float
mapped_pen_size	float
;	O
int	O
toolz	int
=	O
0	int
;	O
int	O
np	int
=	O
1	int
,	O
err	int
=	O
0	int
;	O
char	O
*	O
ftype	pointer
=	O
""	pointer
,	O
*	O
scale_cmd	pointer
=	O
""	pointer
,	O
*	O
pen_cmd	pointer
=	O
""	pointer
,	O
*	O
poly_start	pointer
=	O
""	pointer
,	O
*	O
poly_next	pointer
=	O
""	pointer
,	O
*	O
poly_last	pointer
=	O
""	pointer
,	O
*	O
poly_end	pointer
=	O
""	pointer
,	O
*	O
draw_dot	pointer
=	O
""	pointer
,	O
*	O
exit_cmd	pointer
=	O
""	pointer
;	O
switch	O
(	O
mode	enum
)	O
{	O
case	O
0	int
:	O
ftype	pointer
=	O
"METAFONT"	pointer
;	O
scale_cmd	pointer
=	O
"mode_setup;\nbeginchar(\"Z\",%4.3fmm#,%4.3fmm#,0);\n"	pointer
;	O
pen_cmd	pointer
=	O
"pickup pencircle scaled %2.1fmm;\n"	pointer
;	O
poly_start	pointer
=	O
"draw(%4.3fmm,%4.3fmm)"	pointer
;	O
poly_next	pointer
=	O
"--(%4.3fmm,%4.3fmm)"	pointer
;	O
poly_last	pointer
=	O
"--(%4.3fmm,%4.3fmm);\n"	pointer
;	O
poly_end	pointer
=	O
";\n"	pointer
;	O
draw_dot	pointer
=	O
"drawdot(%4.3fmm,%4.3fmm);\n"	pointer
;	O
exit_cmd	pointer
=	O
"endchar;\nend;\n"	pointer
;	O
break	O
;	O
case	O
1	int
:	O
ftype	pointer
=	O
"emTeX-specials"	pointer
;	O
scale_cmd	pointer
=	O
"\\unitlength1mm\n\\begin{picture}(%4.3f,%4.3f)\n"	pointer
;	O
pen_cmd	pointer
=	O
"\\special{em:linewidth %2.1fmm}\n"	pointer
;	O
poly_start	pointer
=	O
"\\put(%4.3f,%4.3f){\\special{em:moveto}}\n"	pointer
;	O
poly_next	pointer
=	O
"\\put(%4.3f,%4.3f){\\special{em:lineto}}\n"	pointer
;	O
poly_last	pointer
=	O
poly_next	pointer
;	O
poly_end	pointer
=	O
""	pointer
;	O
draw_dot	pointer
=	O
"\\put(%4.3f,%4.3f){\\makebox(0,0)[cc]{.}}\n"	pointer
;	O
exit_cmd	pointer
=	O
"\\end{picture}\n"	pointer
;	O
break	O
;	O
case	O
2	int
:	O
ftype	pointer
=	O
"TeX (epic)"	pointer
;	O
scale_cmd	pointer
=	O
"\\unitlength1mm\n\\begin{picture}(%4.3f,%4.3f)\n"	pointer
;	O
pen_cmd	pointer
=	O
"\\linethickness{%2.1fmm}\n"	pointer
;	O
poly_start	pointer
=	O
"\\drawline(%4.3f,%4.3f)"	pointer
;	O
poly_next	pointer
=	O
"(%4.3f,%4.3f)"	pointer
;	O
poly_last	pointer
=	O
"(%4.3f,%4.3f)\n"	pointer
;	O
poly_end	pointer
=	O
"\n"	pointer
;	O
draw_dot	pointer
=	O
"\\put(%4.3f,%4.3f){\\picsquare}\n"	pointer
;	O
exit_cmd	pointer
=	O
"\\end{picture}\n"	pointer
;	O
break	O
;	O
case	O
3	int
:	O
ftype	pointer
=	O
"TeXcad compatible"	pointer
;	O
scale_cmd	pointer
=	O
"\\unitlength=1mm\n\\begin{picture}(%4.3f,%4.3f)\n"	pointer
;	O
pen_cmd	pointer
=	O
"\\special{em:linewidth %2.1fmm}\n\\linethickness{ %2.1fmm}\n"	pointer
;	O
poly_start	pointer
=	O
"\\emline{%4.3f}{%4.3f}{%d}"	pointer
;	O
poly_next	pointer
=	O
"{%4.3f}{%4.3f}{%d}%%\n"	pointer
;	O
poly_last	pointer
=	O
poly_next	pointer
;	O
poly_end	pointer
=	O
""	pointer
;	O
draw_dot	pointer
=	O
"\\put(%4.3f,%4.3f){\\makebox(0,0)[cc]{.}}\n"	pointer
;	O
exit_cmd	pointer
=	O
"\\end{picture}\n"	pointer
;	O
break	O
;	O
case	O
5	int
:	O
ftype	pointer
=	O
"Simple HP-GL"	pointer
;	O
scale_cmd	pointer
=	O
""	pointer
;	O
pen_cmd	pointer
=	O
"SP%1d;"	pointer
;	O
poly_start	pointer
=	O
"PA;PU%f,%f;"	pointer
;	O
poly_next	pointer
=	O
"PD%f,%f;"	pointer
;	O
poly_last	pointer
=	O
poly_next	pointer
;	O
poly_end	pointer
=	O
""	pointer
;	O
draw_dot	pointer
=	O
"PU%f,%f;PD%f,%f;PU;"	pointer
;	O
exit_cmd	pointer
=	O
""	pointer
;	O
break	O
;	O
case	O
6	int
:	O
ftype	pointer
=	O
"gnuplot ASCII"	pointer
;	O
scale_cmd	pointer
=	O
""	pointer
;	O
pen_cmd	pointer
=	O
"#SP1\n"	pointer
;	O
poly_start	pointer
=	O
"#PA\n\n#PU\n%g  %g\n"	pointer
;	O
poly_next	pointer
=	O
"#PD\n%g  %g\n"	pointer
;	O
poly_last	pointer
=	O
poly_next	pointer
;	O
poly_end	pointer
=	O
""	pointer
;	O
draw_dot	pointer
=	O
"\n#PU\n%g  %g\n#PD\n%g  %g\n\n#PU\n\n"	pointer
;	O
exit_cmd	pointer
=	O
""	pointer
;	O
break	O
;	O
case	O
7	int
:	O
ftype	pointer
=	O
"DXF"	pointer
;	O
scale_cmd	pointer
=	O
"  0\nSECTION\n  2\nHEADER\n 999\nGenerated by hp2xx\n 9\n$ACADVER\n  1\nAC1009\n 9\n$EXTMIN\n 10\n%g\n 20 \n%g\n 9\n$EXTMAX\n 10\n%g\n 20\n%g\n 0\nENDSEC\n  0\nSECTION\n  2\nBLOCKS\n  0\nENDSEC\n  0\nSECTION\n  2\nENTITIES\n  0\n"	pointer
;	O
pen_cmd	pointer
=	O
""	pointer
;	O
poly_start	pointer
=	O
"LINE\n  8\n0\n 62\n%d\n 39\n%g\n 10\n%g\n 20\n%g\n 30\n0.0\n"	pointer
;	O
poly_next	pointer
=	O
" 11\n%g\n 21\n%g\n 31\n0.0\n  0\n"	pointer
;	O
poly_last	pointer
=	O
poly_next	pointer
;	O
poly_end	pointer
=	O
""	pointer
;	O
draw_dot	pointer
=	O
""	pointer
;	O
exit_cmd	pointer
=	O
"ENDSEC\n  0\nEOF\n"	pointer
;	O
break	O
;	O
case	O
8	int
:	O
ftype	pointer
=	O
"SVG"	pointer
;	O
scale_cmd	pointer
=	O
"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n<svg width=\"100%%\" height=\"100%%\" viewBox=\"0 0 %4.3f %4.3f\" xmlns=\"http://www.w3.org/2000/svg\"><g>\n"	pointer
;	O
pen_cmd	pointer
=	O
"</g><g style=\"stroke:rgb(%d,%d,%d); fill:none; stroke-width:%4.3fmm\" >\n"	pointer
;	O
poly_start	pointer
=	O
"<path d=\"M %4.3f, %4.3f \n"	pointer
;	O
poly_next	pointer
=	O
"	L %4.3f, %4.3f \n"	pointer
;	O
poly_last	pointer
=	O
"	L %4.3f, %4.3f \n\" />\n"	pointer
;	O
poly_end	pointer
=	O
"\" />\n"	pointer
;	O
draw_dot	pointer
=	O
"<path d=\"M %4.3f,%4.3f L %4.3f %4.3f\" />\n"	pointer
;	O
exit_cmd	pointer
=	O
"</g>\n</svg>\n"	pointer
;	O
break	O
;	O
case	O
9	int
:	O
ftype	pointer
=	O
"Test G-Code"	pointer
;	O
scale_cmd	pointer
=	O
""	pointer
;	O
pen_cmd	pointer
=	O
"M06 T%2d\n"	pointer
;	O
poly_start	pointer
=	O
"; Tool Up\nG01 Z%g\nG00 X %g Y %g\n"	pointer
;	O
poly_next	pointer
=	O
"G01 X %g Y %g\n"	pointer
;	O
poly_last	pointer
=	O
poly_next	pointer
;	O
poly_end	pointer
=	O
";\n"	pointer
;	O
draw_dot	pointer
=	O
"\nG81 X%g Y%G Z%g R%g  ; Drill Hole\nG81\n"	pointer
;	O
exit_cmd	pointer
=	O
"\nM02\n"	pointer
;	O
break	O
;	O
}	O
if	O
(	O
*	O
po	pointer
->	O
outfile	pointer
!=	O
'-'	O
)	O
{	O
if	O
(	O
(	O
md	pointer
=	O
fopen	function
(	O
po	pointer
->	O
outfile	pointer
,	O
"w"	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
PError	function
(	O
"hp2xx (mf/tex)"	pointer
)	O
;	O
err	int
=	O
ERROR	O
;	O
goto	O
MF_exit	O
;	O
}	O
}	O
else	O
{	O
md	pointer
=	O
stdout	pointer
;	O
}	O
if	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
{	O
Eprintf	function
(	O
"\n\n- Writing %s code to \"%s\"\n"	pointer
,	O
ftype	pointer
,	O
*	O
po	pointer
->	O
outfile	pointer
==	O
'-'	O
?	O
"stdout"	pointer
:	O
po	pointer
->	O
outfile	pointer
)	O
;	O
if	O
(	O
mode	enum
==	O
9	int
)	O
Eprintf	function
(	O
"  using engage depth %f, retract depth %f\n"	pointer
,	O
po	pointer
->	O
zengage	double
,	O
po	pointer
->	O
zretract	double
)	O
;	O
}	O
if	O
(	O
pg	pointer
->	O
is_color	int
&&	O
mode	enum
<	O
5	int
)	O
Eprintf	function
(	O
"\nWARNING: MF/TeX modes ignore colors!\n"	pointer
)	O
;	O
if	O
(	O
mode	enum
<	O
5	int
)	O
{	O
fprintf	function
(	O
md	pointer
,	O
"%% %s code in %s, created by hp2xx\n"	pointer
,	O
ftype	pointer
,	O
po	pointer
->	O
outfile	pointer
)	O
;	O
fprintf	function
(	O
md	pointer
,	O
scale_cmd	pointer
,	O
po	pointer
->	O
width	array
,	O
po	pointer
->	O
height	double
)	O
;	O
}	O
if	O
(	O
mode	enum
==	O
7	int
)	O
fprintf	function
(	O
md	pointer
,	O
scale_cmd	pointer
,	O
po	pointer
->	O
xoff	double
,	O
po	pointer
->	O
yoff	double
,	O
po	pointer
->	O
width	array
+	O
po	pointer
->	O
xoff	double
,	O
po	pointer
->	O
height	double
+	O
po	pointer
->	O
yoff	double
)	O
;	O
if	O
(	O
mode	enum
==	O
8	int
)	O
fprintf	function
(	O
md	pointer
,	O
scale_cmd	pointer
,	O
po	pointer
->	O
width	array
*	O
2.834646	int
,	O
po	pointer
->	O
height	double
*	O
2.834646	int
)	O
;	O
pen_no	int
=	O
DEFAULT_PEN_NO	int
;	O
pensize	float
=	O
pt	struct
.	O
width	array
[	O
pen_no	int
]	O
;	O
if	O
(	O
pensize	float
!=	O
0	int
)	O
switch	O
(	O
mode	enum
)	O
{	O
case	O
3	int
:	O
fprintf	function
(	O
md	pointer
,	O
pen_cmd	pointer
,	O
pensize	float
,	O
pensize	float
)	O
;	O
break	O
;	O
case	O
5	int
:	O
fprintf	function
(	O
md	pointer
,	O
pen_cmd	pointer
,	O
pen_no	int
)	O
;	O
break	O
;	O
case	O
7	int
:	O
break	O
;	O
case	O
8	int
:	O
fprintf	function
(	O
md	pointer
,	O
pen_cmd	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
10	int
*	O
pensize	float
)	O
;	O
break	O
;	O
case	O
9	int
:	O
Eprintf	function
(	O
"\nWARNING: Pensize Ignored!\n"	pointer
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
md	pointer
,	O
pen_cmd	pointer
,	O
pensize	float
)	O
;	O
break	O
;	O
}	O
if	O
(	O
mode	enum
==	O
5	int
)	O
{	O
xcoord2mm	float
=	O
po	pointer
->	O
width	array
/	O
(	O
po	pointer
->	O
xmax	double
-	O
po	pointer
->	O
xmin	double
)	O
*	O
40.	int
;	O
ycoord2mm	float
=	O
po	pointer
->	O
height	double
/	O
(	O
po	pointer
->	O
ymax	double
-	O
po	pointer
->	O
ymin	double
)	O
*	O
40.	int
;	O
}	O
else	O
{	O
xcoord2mm	float
=	O
po	pointer
->	O
width	array
/	O
(	O
po	pointer
->	O
xmax	double
-	O
po	pointer
->	O
xmin	double
)	O
;	O
ycoord2mm	float
=	O
po	pointer
->	O
height	double
/	O
(	O
po	pointer
->	O
ymax	double
-	O
po	pointer
->	O
ymin	double
)	O
;	O
}	O
if	O
(	O
mode	enum
==	O
8	int
)	O
{	O
xcoord2mm	float
*=	O
2.834646	int
;	O
ycoord2mm	float
*=	O
2.834646	int
;	O
}	O
while	O
(	O
(	O
cmd	enum
=	O
PlotCmd_from_tmpfile	function
(	O
)	O
)	O
!=	O
CMD_EOF	int
)	O
switch	O
(	O
cmd	enum
)	O
{	O
case	O
NOP	int
:	O
break	O
;	O
case	O
SET_PEN	int
:	O
if	O
(	O
(	O
pen_no	int
=	O
fgetc	function
(	O
pg	pointer
->	O
td	pointer
)	O
)	O
==	O
EOF	O
)	O
{	O
PError	function
(	O
"Unexpected end of temp. file: "	pointer
)	O
;	O
err	int
=	O
ERROR	O
;	O
goto	O
MF_exit	O
;	O
}	O
pensize	float
=	O
pt	struct
.	O
width	array
[	O
pen_no	int
]	O
;	O
if	O
(	O
pensize	float
!=	O
0.	int
)	O
{	O
if	O
(	O
chars_out	int
)	O
{	O
fprintf	function
(	O
md	pointer
,	O
poly_end	pointer
)	O
;	O
chars_out	int
=	O
0	int
;	O
}	O
switch	O
(	O
mode	enum
)	O
{	O
case	O
3	int
:	O
fprintf	function
(	O
md	pointer
,	O
pen_cmd	pointer
,	O
pensize	float
,	O
pensize	float
)	O
;	O
break	O
;	O
case	O
5	int
:	O
fprintf	function
(	O
md	pointer
,	O
pen_cmd	pointer
,	O
pen_no	int
)	O
;	O
break	O
;	O
case	O
8	int
:	O
pencolor	int
=	O
(	O
int	O
)	O
pt	struct
.	O
color	array
[	O
pen_no	int
]	O
;	O
fprintf	function
(	O
md	pointer
,	O
pen_cmd	pointer
,	O
pt	struct
.	O
clut	array
[	O
pencolor	int
]	O
[	O
0	int
]	O
,	O
pt	struct
.	O
clut	array
[	O
pencolor	int
]	O
[	O
1	int
]	O
,	O
pt	struct
.	O
clut	array
[	O
pencolor	int
]	O
[	O
2	int
]	O
,	O
pensize	float
)	O
;	O
break	O
;	O
case	O
9	int
:	O
fprintf	function
(	O
md	pointer
,	O
pen_cmd	pointer
,	O
pen_no	int
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
md	pointer
,	O
pen_cmd	pointer
,	O
pensize	float
)	O
;	O
break	O
;	O
}	O
}	O
break	O
;	O
case	O
DEF_PW	int
:	O
if	O
(	O
load_pen_width_table	function
(	O
pg	pointer
->	O
td	pointer
)	O
<	O
0	int
)	O
{	O
PError	function
(	O
"Unexpected end of temp. file"	pointer
)	O
;	O
err	int
=	O
ERROR	O
;	O
goto	O
MF_exit	O
;	O
}	O
pensize	float
=	O
pt	struct
.	O
width	array
[	O
pen_no	int
]	O
;	O
if	O
(	O
pensize	float
!=	O
0	int
)	O
switch	O
(	O
mode	enum
)	O
{	O
case	O
3	int
:	O
fprintf	function
(	O
md	pointer
,	O
pen_cmd	pointer
,	O
pensize	float
,	O
pensize	float
)	O
;	O
break	O
;	O
case	O
5	int
:	O
fprintf	function
(	O
md	pointer
,	O
pen_cmd	pointer
,	O
pen_no	int
)	O
;	O
break	O
;	O
case	O
8	int
:	O
break	O
;	O
case	O
9	int
:	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
md	pointer
,	O
pen_cmd	pointer
,	O
pensize	float
)	O
;	O
break	O
;	O
}	O
break	O
;	O
case	O
MOVE_TO	int
:	O
HPGL_Pt_from_tmpfile	function
(	O
&	O
pt1	struct
)	O
;	O
if	O
(	O
pensize	float
==	O
0	int
||	O
mode	enum
==	O
3	int
||	O
mode	enum
==	O
4	int
||	O
mode	enum
==	O
7	int
)	O
break	O
;	O
if	O
(	O
chars_out	int
)	O
fprintf	function
(	O
md	pointer
,	O
poly_end	pointer
)	O
;	O
if	O
(	O
mode	enum
==	O
8	int
)	O
pt1	struct
.	O
y	int
=	O
po	pointer
->	O
ymax	double
-	O
pt1	struct
.	O
y	int
;	O
if	O
(	O
mode	enum
==	O
9	int
)	O
{	O
chars_out	int
=	O
fprintf	function
(	O
md	pointer
,	O
poly_start	pointer
,	O
po	pointer
->	O
zretract	double
,	O
(	O
pt1	struct
.	O
x	int
-	O
po	pointer
->	O
xmin	double
)	O
*	O
xcoord2mm	float
,	O
(	O
pt1	struct
.	O
y	int
-	O
po	pointer
->	O
ymin	double
)	O
*	O
ycoord2mm	float
)	O
;	O
toolz	int
=	O
0	int
;	O
break	O
;	O
}	O
chars_out	int
=	O
fprintf	function
(	O
md	pointer
,	O
poly_start	pointer
,	O
(	O
pt1	struct
.	O
x	int
-	O
po	pointer
->	O
xmin	double
)	O
*	O
xcoord2mm	float
,	O
(	O
pt1	struct
.	O
y	int
-	O
po	pointer
->	O
ymin	double
)	O
*	O
ycoord2mm	float
)	O
;	O
break	O
;	O
case	O
DRAW_TO	int
:	O
if	O
(	O
mode	enum
==	O
3	int
)	O
{	O
chars_out	int
=	O
fprintf	function
(	O
md	pointer
,	O
poly_start	pointer
,	O
(	O
pt1	struct
.	O
x	int
-	O
po	pointer
->	O
xmin	double
)	O
*	O
xcoord2mm	float
,	O
(	O
pt1	struct
.	O
y	int
-	O
po	pointer
->	O
ymin	double
)	O
*	O
ycoord2mm	float
,	O
np	int
++	O
)	O
;	O
HPGL_Pt_from_tmpfile	function
(	O
&	O
pt1	struct
)	O
;	O
chars_out	int
+=	O
fprintf	function
(	O
md	pointer
,	O
poly_next	pointer
,	O
(	O
pt1	struct
.	O
x	int
-	O
po	pointer
->	O
xmin	double
)	O
*	O
xcoord2mm	float
,	O
(	O
pt1	struct
.	O
y	int
-	O
po	pointer
->	O
ymin	double
)	O
*	O
ycoord2mm	float
,	O
np	int
++	O
)	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
mode	enum
==	O
7	int
)	O
{	O
switch	O
(	O
po	pointer
->	O
specials	int
)	O
{	O
case	O
1	int
:	O
mapped_pen_no	int
=	O
pen_no	int
;	O
mapped_pen_size	float
=	O
pensize	float
;	O
break	O
;	O
case	O
2	int
:	O
mapped_pen_no	int
=	O
(	O
int	O
)	O
floor	function
(	O
pensize	float
*	O
10.	int
)	O
;	O
mapped_pen_size	float
=	O
pensize	float
;	O
if	O
(	O
mapped_pen_no	int
<	O
1	int
)	O
mapped_pen_no	int
=	O
1	int
;	O
break	O
;	O
case	O
3	int
:	O
mapped_pen_no	int
=	O
(	O
int	O
)	O
floor	function
(	O
pensize	float
*	O
10.	int
)	O
;	O
if	O
(	O
mapped_pen_no	int
<	O
1	int
)	O
mapped_pen_no	int
=	O
1	int
;	O
if	O
(	O
mapped_pen_no	int
>	O
1	int
)	O
mapped_pen_no	int
=	O
4	int
;	O
mapped_pen_size	float
=	O
pensize	float
;	O
break	O
;	O
default	O
:	O
mapped_pen_no	int
=	O
1	int
;	O
mapped_pen_size	float
=	O
.1	int
;	O
}	O
chars_out	int
=	O
fprintf	function
(	O
md	pointer
,	O
poly_start	pointer
,	O
mapped_pen_no	int
,	O
mapped_pen_size	float
,	O
(	O
pt1	struct
.	O
x	int
-	O
po	pointer
->	O
xmin	double
)	O
*	O
xcoord2mm	float
,	O
(	O
pt1	struct
.	O
y	int
-	O
po	pointer
->	O
ymin	double
)	O
*	O
ycoord2mm	float
,	O
np	int
++	O
)	O
;	O
HPGL_Pt_from_tmpfile	function
(	O
&	O
pt1	struct
)	O
;	O
chars_out	int
+=	O
fprintf	function
(	O
md	pointer
,	O
poly_next	pointer
,	O
(	O
pt1	struct
.	O
x	int
-	O
po	pointer
->	O
xmin	double
)	O
*	O
xcoord2mm	float
,	O
(	O
pt1	struct
.	O
y	int
-	O
po	pointer
->	O
ymin	double
)	O
*	O
ycoord2mm	float
,	O
np	int
++	O
)	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
mode	enum
==	O
9	int
&&	O
toolz	int
==	O
0	int
)	O
{	O
chars_out	int
=	O
fprintf	function
(	O
md	pointer
,	O
"; Tool Down\nG01 Z%g\nG01 X %g Y %g\n"	pointer
,	O
po	pointer
->	O
zengage	double
,	O
(	O
pt1	struct
.	O
x	int
-	O
po	pointer
->	O
xmin	double
)	O
*	O
xcoord2mm	float
,	O
(	O
pt1	struct
.	O
y	int
-	O
po	pointer
->	O
ymin	double
)	O
*	O
ycoord2mm	float
)	O
;	O
np	int
++	O
;	O
HPGL_Pt_from_tmpfile	function
(	O
&	O
pt1	struct
)	O
;	O
chars_out	int
+=	O
fprintf	function
(	O
md	pointer
,	O
poly_next	pointer
,	O
(	O
pt1	struct
.	O
x	int
-	O
po	pointer
->	O
xmin	double
)	O
*	O
xcoord2mm	float
,	O
(	O
pt1	struct
.	O
y	int
-	O
po	pointer
->	O
ymin	double
)	O
*	O
ycoord2mm	float
,	O
np	int
++	O
)	O
;	O
toolz	int
=	O
1	int
;	O
break	O
;	O
}	O
else	O
if	O
(	O
mode	enum
==	O
9	int
&&	O
toolz	int
==	O
1	int
)	O
{	O
HPGL_Pt_from_tmpfile	function
(	O
&	O
pt1	struct
)	O
;	O
chars_out	int
=	O
fprintf	function
(	O
md	pointer
,	O
poly_next	pointer
,	O
(	O
pt1	struct
.	O
x	int
-	O
po	pointer
->	O
xmin	double
)	O
*	O
xcoord2mm	float
,	O
(	O
pt1	struct
.	O
y	int
-	O
po	pointer
->	O
ymin	double
)	O
*	O
ycoord2mm	float
,	O
np	int
++	O
)	O
;	O
break	O
;	O
}	O
HPGL_Pt_from_tmpfile	function
(	O
&	O
pt1	struct
)	O
;	O
if	O
(	O
mode	enum
==	O
8	int
)	O
pt1	struct
.	O
y	int
=	O
po	pointer
->	O
ymax	double
-	O
pt1	struct
.	O
y	int
;	O
if	O
(	O
pensize	float
==	O
0.	int
)	O
break	O
;	O
if	O
(	O
chars_out	int
>	O
max_chars_out	int
)	O
{	O
fprintf	function
(	O
md	pointer
,	O
poly_last	pointer
,	O
(	O
pt1	struct
.	O
x	int
-	O
po	pointer
->	O
xmin	double
)	O
*	O
xcoord2mm	float
,	O
(	O
pt1	struct
.	O
y	int
-	O
po	pointer
->	O
ymin	double
)	O
*	O
ycoord2mm	float
)	O
;	O
chars_out	int
=	O
fprintf	function
(	O
md	pointer
,	O
poly_start	pointer
,	O
(	O
pt1	struct
.	O
x	int
-	O
po	pointer
->	O
xmin	double
)	O
*	O
xcoord2mm	float
,	O
(	O
pt1	struct
.	O
y	int
-	O
po	pointer
->	O
ymin	double
)	O
*	O
ycoord2mm	float
)	O
;	O
}	O
else	O
chars_out	int
+=	O
fprintf	function
(	O
md	pointer
,	O
poly_next	pointer
,	O
(	O
pt1	struct
.	O
x	int
-	O
po	pointer
->	O
xmin	double
)	O
*	O
xcoord2mm	float
,	O
(	O
pt1	struct
.	O
y	int
-	O
po	pointer
->	O
ymin	double
)	O
*	O
ycoord2mm	float
)	O
;	O
break	O
;	O
case	O
PLOT_AT	int
:	O
HPGL_Pt_from_tmpfile	function
(	O
&	O
pt1	struct
)	O
;	O
if	O
(	O
chars_out	int
)	O
{	O
fprintf	function
(	O
md	pointer
,	O
poly_end	pointer
)	O
;	O
chars_out	int
=	O
0	int
;	O
}	O
if	O
(	O
pensize	float
==	O
0	int
)	O
break	O
;	O
if	O
(	O
mode	enum
==	O
5	int
||	O
mode	enum
==	O
8	int
)	O
fprintf	function
(	O
md	pointer
,	O
draw_dot	pointer
,	O
(	O
pt1	struct
.	O
x	int
-	O
po	pointer
->	O
xmin	double
)	O
*	O
xcoord2mm	float
,	O
(	O
pt1	struct
.	O
y	int
-	O
po	pointer
->	O
ymin	double
)	O
*	O
ycoord2mm	float
,	O
(	O
pt1	struct
.	O
x	int
+	O
1.0	int
-	O
po	pointer
->	O
xmin	double
)	O
*	O
xcoord2mm	float
,	O
(	O
pt1	struct
.	O
y	int
-	O
po	pointer
->	O
ymin	double
)	O
*	O
ycoord2mm	float
)	O
;	O
else	O
fprintf	function
(	O
md	pointer
,	O
draw_dot	pointer
,	O
(	O
pt1	struct
.	O
x	int
-	O
po	pointer
->	O
xmin	double
)	O
*	O
xcoord2mm	float
,	O
(	O
pt1	struct
.	O
y	int
-	O
po	pointer
->	O
ymin	double
)	O
*	O
ycoord2mm	float
)	O
;	O
break	O
;	O
case	O
DEF_PC	int
:	O
if	O
(	O
load_pen_color_table	function
(	O
pg	pointer
->	O
td	pointer
)	O
<	O
0	int
)	O
{	O
PError	function
(	O
"Unexpected end of temp. file"	pointer
)	O
;	O
err	int
=	O
ERROR	O
;	O
goto	O
MF_exit	O
;	O
}	O
Eprintf	function
(	O
"Warning, no PC support in vector modes!"	pointer
)	O
;	O
break	O
;	O
case	O
DEF_LA	int
:	O
if	O
(	O
load_line_attr	function
(	O
pg	pointer
->	O
td	pointer
)	O
<	O
0	int
)	O
{	O
PError	function
(	O
"Unexpected end of temp. file"	pointer
)	O
;	O
err	int
=	O
ERROR	O
;	O
goto	O
MF_exit	O
;	O
}	O
break	O
;	O
default	O
:	O
Eprintf	function
(	O
"Illegal cmd in temp. file!"	pointer
)	O
;	O
err	int
=	O
ERROR	O
;	O
goto	O
MF_exit	O
;	O
}	O
if	O
(	O
chars_out	int
)	O
{	O
fprintf	function
(	O
md	pointer
,	O
poly_end	pointer
)	O
;	O
chars_out	int
=	O
0	int
;	O
}	O
fprintf	function
(	O
md	pointer
,	O
exit_cmd	pointer
)	O
;	O
MF_exit	O
:	O
if	O
(	O
md	pointer
!=	O
stdout	pointer
&&	O
md	pointer
!=	O
NULL	O
)	O
fclose	function
(	O
md	pointer
)	O
;	O
if	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
Eprintf	function
(	O
"\n"	pointer
)	O
;	O
return	O
err	int
;	O
}	O
