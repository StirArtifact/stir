struct	O
wget_tls_session_db_st	struct
{	O
wget_hashmap	struct
*	O
entries	pointer
;	O
wget_thread_mutex	pointer
mutex	pointer
;	O
int64_t	long
load_time	long
;	O
bool	bool
changed	bool
:	O
1	int
;	O
}	O
;	O
struct	O
wget_tls_session_st	struct
{	O
const	O
char	O
*	O
host	pointer
;	O
int64_t	long
expires	long
;	O
int64_t	long
created	long
;	O
int64_t	long
maxage	long
;	O
size_t	long
data_size	long
;	O
const	O
char	O
*	O
data	pointer
;	O
}	O
;	O
__attribute__	O
(	O
(	O
no_sanitize	O
(	O
"integer"	pointer
)	O
)	O
)	O
WGET_GCC_PURE	O
static	O
unsigned	O
int	O
hash_tls_session	function
(	O
const	O
wget_tls_session	struct
*	O
tls_session	pointer
)	O
{	O
unsigned	O
int	O
hash	pointer
=	O
0	int
;	O
const	O
unsigned	O
char	O
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
tls_session	pointer
->	O
host	pointer
;	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
hash	pointer
=	O
hash	pointer
*	O
101	int
+	O
*	O
p	pointer
;	O
return	O
hash	pointer
;	O
}	O
WGET_GCC_NONNULL_ALL	O
WGET_GCC_PURE	O
static	O
int	O
compare_tls_session	function
(	O
const	O
wget_tls_session	struct
*	O
s1	pointer
,	O
const	O
wget_tls_session	struct
*	O
s2	pointer
)	O
{	O
int	O
n	long
;	O
if	O
(	O
(	O
n	long
=	O
strcmp	function
(	O
s1	pointer
->	O
host	pointer
,	O
s2	pointer
->	O
host	pointer
)	O
)	O
)	O
return	O
n	long
;	O
return	O
0	int
;	O
}	O
wget_tls_session	struct
*	O
wget_tls_session_init	function
(	O
wget_tls_session	struct
*	O
tls_session	pointer
)	O
{	O
if	O
(	O
!	O
tls_session	pointer
)	O
{	O
if	O
(	O
!	O
(	O
tls_session	pointer
=	O
wget_calloc	function
(	O
1	int
,	O
sizeof	O
(	O
wget_tls_session	struct
)	O
)	O
)	O
)	O
return	O
NULL	O
;	O
}	O
else	O
memset	function
(	O
tls_session	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
tls_session	pointer
)	O
)	O
;	O
tls_session	pointer
->	O
created	long
=	O
time	struct
(	O
NULL	O
)	O
;	O
return	O
tls_session	pointer
;	O
}	O
void	O
wget_tls_session_deinit	function
(	O
wget_tls_session	struct
*	O
tls_session	pointer
)	O
{	O
if	O
(	O
tls_session	pointer
)	O
{	O
xfree	O
(	O
tls_session	pointer
->	O
host	pointer
)	O
;	O
xfree	O
(	O
tls_session	pointer
->	O
data	pointer
)	O
;	O
}	O
}	O
void	O
wget_tls_session_free	function
(	O
wget_tls_session	struct
*	O
tls_session	pointer
)	O
{	O
if	O
(	O
tls_session	pointer
)	O
{	O
wget_tls_session_deinit	function
(	O
tls_session	pointer
)	O
;	O
xfree	O
(	O
tls_session	pointer
)	O
;	O
}	O
}	O
wget_tls_session	struct
*	O
wget_tls_session_new	function
(	O
const	O
char	O
*	O
host	pointer
,	O
time_t	long
maxage	long
,	O
const	O
void	O
*	O
data	pointer
,	O
size_t	long
data_size	long
)	O
{	O
wget_tls_session	struct
*	O
tls_session	pointer
=	O
wget_tls_session_init	function
(	O
NULL	O
)	O
;	O
if	O
(	O
tls_session	pointer
)	O
{	O
tls_session	pointer
->	O
host	pointer
=	O
wget_strdup	function
(	O
host	pointer
)	O
;	O
tls_session	pointer
->	O
data	pointer
=	O
wget_memdup	function
(	O
data	pointer
,	O
data_size	long
)	O
;	O
tls_session	pointer
->	O
data_size	long
=	O
data_size	long
;	O
if	O
(	O
maxage	long
<=	O
0	int
||	O
maxage	long
>=	O
INT64_MAX	O
/	O
2	int
||	O
tls_session	pointer
->	O
created	long
<	O
0	int
||	O
tls_session	pointer
->	O
created	long
>=	O
INT64_MAX	O
/	O
2	int
)	O
{	O
tls_session	pointer
->	O
maxage	long
=	O
0	int
;	O
tls_session	pointer
->	O
expires	long
=	O
0	int
;	O
}	O
else	O
{	O
tls_session	pointer
->	O
maxage	long
=	O
maxage	long
;	O
tls_session	pointer
->	O
expires	long
=	O
tls_session	pointer
->	O
created	long
+	O
maxage	long
;	O
}	O
}	O
return	O
tls_session	pointer
;	O
}	O
int	O
wget_tls_session_get	function
(	O
const	O
wget_tls_session_db	struct
*	O
tls_session_db	pointer
,	O
const	O
char	O
*	O
host	pointer
,	O
void	O
*	O
*	O
data	pointer
,	O
size_t	long
*	O
size	pointer
)	O
{	O
if	O
(	O
tls_session_db	pointer
)	O
{	O
wget_tls_session	struct
tls_session	pointer
,	O
*	O
tls_sessionp	pointer
;	O
int64_t	long
now	long
=	O
time	struct
(	O
NULL	O
)	O
;	O
tls_session	pointer
.	O
host	pointer
=	O
host	pointer
;	O
if	O
(	O
wget_hashmap_get	function
(	O
tls_session_db	pointer
->	O
entries	pointer
,	O
&	O
tls_session	pointer
,	O
&	O
tls_sessionp	pointer
)	O
&&	O
tls_sessionp	pointer
->	O
expires	long
>=	O
now	long
)	O
{	O
if	O
(	O
data	pointer
)	O
*	O
data	pointer
=	O
wget_memdup	function
(	O
tls_sessionp	pointer
->	O
data	pointer
,	O
tls_sessionp	pointer
->	O
data_size	long
)	O
;	O
if	O
(	O
size	pointer
)	O
*	O
size	pointer
=	O
tls_sessionp	pointer
->	O
data_size	long
;	O
return	O
0	int
;	O
}	O
}	O
return	O
1	int
;	O
}	O
wget_tls_session_db	struct
*	O
wget_tls_session_db_init	function
(	O
wget_tls_session_db	struct
*	O
tls_session_db	pointer
)	O
{	O
wget_hashmap	struct
*	O
entries	pointer
=	O
wget_hashmap_create	function
(	O
16	int
,	O
(	O
wget_hashmap_hash_fn	function
*	O
)	O
hash_tls_session	function
,	O
(	O
wget_hashmap_compare_fn	function
*	O
)	O
compare_tls_session	function
)	O
;	O
if	O
(	O
!	O
entries	pointer
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
tls_session_db	pointer
)	O
{	O
if	O
(	O
!	O
(	O
tls_session_db	pointer
=	O
wget_calloc	function
(	O
1	int
,	O
sizeof	O
(	O
wget_tls_session_db	struct
)	O
)	O
)	O
)	O
{	O
wget_hashmap_free	function
(	O
&	O
entries	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
else	O
memset	function
(	O
tls_session_db	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
tls_session_db	pointer
)	O
)	O
;	O
wget_hashmap_set_key_destructor	function
(	O
entries	pointer
,	O
(	O
wget_hashmap_key_destructor	function
*	O
)	O
wget_tls_session_free	function
)	O
;	O
wget_hashmap_set_value_destructor	function
(	O
entries	pointer
,	O
(	O
wget_hashmap_value_destructor	function
*	O
)	O
wget_tls_session_free	function
)	O
;	O
tls_session_db	pointer
->	O
entries	pointer
=	O
entries	pointer
;	O
wget_thread_mutex_init	function
(	O
&	O
tls_session_db	pointer
->	O
mutex	pointer
)	O
;	O
return	O
tls_session_db	pointer
;	O
}	O
void	O
wget_tls_session_db_deinit	function
(	O
wget_tls_session_db	struct
*	O
tls_session_db	pointer
)	O
{	O
if	O
(	O
tls_session_db	pointer
)	O
{	O
wget_thread_mutex_lock	function
(	O
tls_session_db	pointer
->	O
mutex	pointer
)	O
;	O
wget_hashmap_free	function
(	O
&	O
tls_session_db	pointer
->	O
entries	pointer
)	O
;	O
wget_thread_mutex_unlock	function
(	O
tls_session_db	pointer
->	O
mutex	pointer
)	O
;	O
wget_thread_mutex_destroy	function
(	O
&	O
tls_session_db	pointer
->	O
mutex	pointer
)	O
;	O
}	O
}	O
void	O
wget_tls_session_db_free	function
(	O
wget_tls_session_db	struct
*	O
*	O
tls_session_db	pointer
)	O
{	O
if	O
(	O
tls_session_db	pointer
)	O
{	O
wget_tls_session_db_deinit	function
(	O
*	O
tls_session_db	pointer
)	O
;	O
xfree	O
(	O
*	O
tls_session_db	pointer
)	O
;	O
}	O
}	O
void	O
wget_tls_session_db_add	function
(	O
wget_tls_session_db	struct
*	O
tls_session_db	pointer
,	O
wget_tls_session	struct
*	O
tls_session	pointer
)	O
{	O
if	O
(	O
!	O
tls_session_db	pointer
||	O
!	O
tls_session	pointer
)	O
return	O
;	O
wget_thread_mutex_lock	function
(	O
tls_session_db	pointer
->	O
mutex	pointer
)	O
;	O
if	O
(	O
tls_session	pointer
->	O
maxage	long
==	O
0	int
)	O
{	O
if	O
(	O
wget_hashmap_remove	function
(	O
tls_session_db	pointer
->	O
entries	pointer
,	O
tls_session	pointer
)	O
)	O
{	O
tls_session_db	pointer
->	O
changed	bool
=	O
1	int
;	O
debug_printf	O
(	O
"removed TLS session data for %s\n"	pointer
,	O
tls_session	pointer
->	O
host	pointer
)	O
;	O
}	O
wget_tls_session_free	function
(	O
tls_session	pointer
)	O
;	O
tls_session	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
wget_tls_session	struct
*	O
old	pointer
;	O
if	O
(	O
wget_hashmap_get	function
(	O
tls_session_db	pointer
->	O
entries	pointer
,	O
tls_session	pointer
,	O
&	O
old	pointer
)	O
)	O
{	O
debug_printf	O
(	O
"found TLS session data for %s\n"	pointer
,	O
old	pointer
->	O
host	pointer
)	O
;	O
if	O
(	O
wget_hashmap_remove	function
(	O
tls_session_db	pointer
->	O
entries	pointer
,	O
old	pointer
)	O
)	O
debug_printf	O
(	O
"removed TLS session data for %s\n"	pointer
,	O
tls_session	pointer
->	O
host	pointer
)	O
;	O
}	O
debug_printf	O
(	O
"add TLS session data for %s (maxage=%lld, size=%zu)\n"	pointer
,	O
tls_session	pointer
->	O
host	pointer
,	O
(	O
long	O
long	O
)	O
tls_session	pointer
->	O
maxage	long
,	O
tls_session	pointer
->	O
data_size	long
)	O
;	O
wget_hashmap_put	function
(	O
tls_session_db	pointer
->	O
entries	pointer
,	O
tls_session	pointer
,	O
tls_session	pointer
)	O
;	O
tls_session_db	pointer
->	O
changed	bool
=	O
1	int
;	O
}	O
wget_thread_mutex_unlock	function
(	O
tls_session_db	pointer
->	O
mutex	pointer
)	O
;	O
}	O
static	O
int	O
tls_session_db_load	function
(	O
wget_tls_session_db	struct
*	O
tls_session_db	pointer
,	O
FILE	struct
*	O
fp	pointer
)	O
{	O
wget_tls_session	struct
tls_session	pointer
;	O
struct	O
stat	struct
st	struct
;	O
char	O
*	O
buf	pointer
=	O
NULL	O
,	O
*	O
linep	pointer
,	O
*	O
p	pointer
;	O
size_t	long
bufsize	long
=	O
0	int
;	O
ssize_t	long
buflen	long
;	O
int64_t	long
now	long
=	O
time	struct
(	O
NULL	O
)	O
;	O
bool	bool
ok	bool
;	O
if	O
(	O
fstat	function
(	O
fileno	function
(	O
fp	pointer
)	O
,	O
&	O
st	struct
)	O
==	O
0	int
)	O
{	O
if	O
(	O
st	struct
.	O
st_mtime	O
!=	O
tls_session_db	pointer
->	O
load_time	long
)	O
tls_session_db	pointer
->	O
load_time	long
=	O
st	struct
.	O
st_mtime	O
;	O
else	O
return	O
0	int
;	O
}	O
while	O
(	O
(	O
buflen	long
=	O
wget_getline	function
(	O
&	O
buf	pointer
,	O
&	O
bufsize	long
,	O
fp	pointer
)	O
)	O
>=	O
0	int
)	O
{	O
linep	pointer
=	O
buf	pointer
;	O
while	O
(	O
isspace	function
(	O
*	O
linep	pointer
)	O
)	O
linep	pointer
++	O
;	O
if	O
(	O
!	O
*	O
linep	pointer
)	O
continue	O
;	O
if	O
(	O
*	O
linep	pointer
==	O
'#'	O
)	O
continue	O
;	O
while	O
(	O
buflen	long
>	O
0	int
&&	O
(	O
buf	pointer
[	O
buflen	long
]	O
==	O
'\n'	O
||	O
buf	pointer
[	O
buflen	long
]	O
==	O
'\r'	O
)	O
)	O
buf	pointer
[	O
--	O
buflen	long
]	O
=	O
0	int
;	O
wget_tls_session_init	function
(	O
&	O
tls_session	pointer
)	O
;	O
ok	bool
=	O
false	int
;	O
if	O
(	O
*	O
linep	pointer
)	O
{	O
for	O
(	O
p	pointer
=	O
linep	pointer
;	O
*	O
linep	pointer
&&	O
!	O
isspace	function
(	O
*	O
linep	pointer
)	O
;	O
)	O
linep	pointer
++	O
;	O
tls_session	pointer
.	O
host	pointer
=	O
wget_strmemdup	function
(	O
p	pointer
,	O
linep	pointer
-	O
p	pointer
)	O
;	O
}	O
if	O
(	O
*	O
linep	pointer
)	O
{	O
for	O
(	O
p	pointer
=	O
++	O
linep	pointer
;	O
*	O
linep	pointer
&&	O
!	O
isspace	function
(	O
*	O
linep	pointer
)	O
;	O
)	O
linep	pointer
++	O
;	O
tls_session	pointer
.	O
created	long
=	O
(	O
int64_t	long
)	O
atoll	function
(	O
p	pointer
)	O
;	O
if	O
(	O
tls_session	pointer
.	O
created	long
<	O
0	int
||	O
tls_session	pointer
.	O
created	long
>=	O
INT64_MAX	O
/	O
2	int
)	O
tls_session	pointer
.	O
created	long
=	O
0	int
;	O
}	O
if	O
(	O
*	O
linep	pointer
)	O
{	O
for	O
(	O
p	pointer
=	O
++	O
linep	pointer
;	O
*	O
linep	pointer
&&	O
!	O
isspace	function
(	O
*	O
linep	pointer
)	O
;	O
)	O
linep	pointer
++	O
;	O
tls_session	pointer
.	O
maxage	long
=	O
(	O
int64_t	long
)	O
atoll	function
(	O
p	pointer
)	O
;	O
if	O
(	O
tls_session	pointer
.	O
maxage	long
<	O
0	int
||	O
tls_session	pointer
.	O
maxage	long
>=	O
INT64_MAX	O
/	O
2	int
)	O
tls_session	pointer
.	O
maxage	long
=	O
0	int
;	O
tls_session	pointer
.	O
expires	long
=	O
tls_session	pointer
.	O
maxage	long
?	O
tls_session	pointer
.	O
created	long
+	O
tls_session	pointer
.	O
maxage	long
:	O
0	int
;	O
if	O
(	O
tls_session	pointer
.	O
expires	long
<	O
now	long
)	O
{	O
wget_tls_session_deinit	function
(	O
&	O
tls_session	pointer
)	O
;	O
continue	O
;	O
}	O
}	O
if	O
(	O
*	O
linep	pointer
)	O
{	O
for	O
(	O
p	pointer
=	O
++	O
linep	pointer
;	O
*	O
linep	pointer
&&	O
!	O
isspace	function
(	O
*	O
linep	pointer
)	O
;	O
)	O
linep	pointer
++	O
;	O
size_t	long
len	long
=	O
linep	pointer
-	O
p	pointer
;	O
char	O
*	O
data	pointer
=	O
wget_malloc	function
(	O
wget_base64_get_decoded_length	function
(	O
len	long
)	O
)	O
;	O
if	O
(	O
data	pointer
)	O
{	O
tls_session	pointer
.	O
data_size	long
=	O
wget_base64_decode	function
(	O
data	pointer
,	O
p	pointer
,	O
len	long
)	O
;	O
tls_session	pointer
.	O
data	pointer
=	O
data	pointer
;	O
ok	bool
=	O
true	int
;	O
}	O
}	O
if	O
(	O
ok	bool
)	O
{	O
bool	bool
no_change	bool
=	O
wget_hashmap_size	function
(	O
tls_session_db	pointer
->	O
entries	pointer
)	O
==	O
0	int
;	O
wget_tls_session_db_add	function
(	O
tls_session_db	pointer
,	O
wget_memdup	function
(	O
&	O
tls_session	pointer
,	O
sizeof	O
(	O
tls_session	pointer
)	O
)	O
)	O
;	O
if	O
(	O
no_change	bool
)	O
tls_session_db	pointer
->	O
changed	bool
=	O
0	int
;	O
}	O
else	O
{	O
wget_tls_session_deinit	function
(	O
&	O
tls_session	pointer
)	O
;	O
error_printf	O
(	O
_	O
(	O
"Failed to parse HSTS line: '%s'\n"	pointer
)	O
,	O
buf	pointer
)	O
;	O
}	O
}	O
xfree	O
(	O
buf	pointer
)	O
;	O
if	O
(	O
ferror	function
(	O
fp	pointer
)	O
)	O
{	O
tls_session_db	pointer
->	O
load_time	long
=	O
0	int
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
wget_tls_session_db_load	function
(	O
wget_tls_session_db	struct
*	O
tls_session_db	pointer
,	O
const	O
char	O
*	O
fname	pointer
)	O
{	O
if	O
(	O
!	O
tls_session_db	pointer
||	O
!	O
fname	pointer
||	O
!	O
*	O
fname	pointer
)	O
return	O
0	int
;	O
if	O
(	O
wget_update_file	function
(	O
fname	pointer
,	O
(	O
wget_update_load_fn	function
*	O
)	O
tls_session_db_load	function
,	O
NULL	O
,	O
tls_session_db	pointer
)	O
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to read TLS session data\n"	pointer
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
debug_printf	O
(	O
"Fetched TLS session data from '%s'\n"	pointer
,	O
fname	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
WGET_GCC_NONNULL_ALL	O
static	O
int	O
tls_session_save	function
(	O
FILE	struct
*	O
fp	pointer
,	O
const	O
wget_tls_session	struct
*	O
tls_session	pointer
)	O
{	O
char	O
session_b64	O
[	O
wget_base64_get_encoded_length	function
(	O
tls_session	pointer
->	O
data_size	long
)	O
]	O
;	O
wget_base64_encode	function
(	O
session_b64	O
,	O
(	O
const	O
char	O
*	O
)	O
tls_session	pointer
->	O
data	pointer
,	O
tls_session	pointer
->	O
data_size	long
)	O
;	O
wget_fprintf	function
(	O
fp	pointer
,	O
"%s %lld %lld %s\n"	pointer
,	O
tls_session	pointer
->	O
host	pointer
,	O
(	O
long	O
long	O
)	O
tls_session	pointer
->	O
created	long
,	O
(	O
long	O
long	O
)	O
tls_session	pointer
->	O
maxage	long
,	O
session_b64	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
tls_session_db_save	function
(	O
void	O
*	O
tls_session_db	pointer
,	O
FILE	struct
*	O
fp	pointer
)	O
{	O
wget_hashmap	struct
*	O
entries	pointer
=	O
(	O
(	O
wget_tls_session_db	struct
*	O
)	O
tls_session_db	pointer
)	O
->	O
entries	pointer
;	O
if	O
(	O
wget_hashmap_size	function
(	O
entries	pointer
)	O
>	O
0	int
)	O
{	O
fputs	function
(	O
"#TLSSession 1.0 file\n"	pointer
,	O
fp	pointer
)	O
;	O
fputs	function
(	O
"#Generated by Wget2 "	pointer
PACKAGE_VERSION	pointer
". Edit at your own risk.\n"	pointer
,	O
fp	pointer
)	O
;	O
fputs	function
(	O
"#<hostname>  <created> <max-age> <session data>\n\n"	pointer
,	O
fp	pointer
)	O
;	O
wget_hashmap_browse	function
(	O
entries	pointer
,	O
(	O
wget_hashmap_browse_fn	function
*	O
)	O
tls_session_save	function
,	O
fp	pointer
)	O
;	O
if	O
(	O
ferror	function
(	O
fp	pointer
)	O
)	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
wget_tls_session_db_save	function
(	O
wget_tls_session_db	struct
*	O
tls_session_db	pointer
,	O
const	O
char	O
*	O
fname	pointer
)	O
{	O
int	O
size	pointer
;	O
if	O
(	O
!	O
tls_session_db	pointer
||	O
!	O
fname	pointer
||	O
!	O
*	O
fname	pointer
)	O
return	O
-	O
1	int
;	O
if	O
(	O
wget_update_file	function
(	O
fname	pointer
,	O
(	O
wget_update_load_fn	function
*	O
)	O
tls_session_db_load	function
,	O
tls_session_db_save	function
,	O
tls_session_db	pointer
)	O
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to write TLS session file '%s'\n"	pointer
)	O
,	O
fname	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
size	pointer
=	O
wget_hashmap_size	function
(	O
tls_session_db	pointer
->	O
entries	pointer
)	O
)	O
)	O
debug_printf	O
(	O
"Saved %d TLS session entr%s into '%s'\n"	pointer
,	O
size	pointer
,	O
size	pointer
!=	O
1	int
?	O
"ies"	pointer
:	O
"y"	pointer
,	O
fname	pointer
)	O
;	O
else	O
debug_printf	O
(	O
"No TLS session entries to save. Table is empty.\n"	pointer
)	O
;	O
tls_session_db	pointer
->	O
changed	bool
=	O
0	int
;	O
return	O
0	int
;	O
}	O
int	O
wget_tls_session_db_changed	function
(	O
wget_tls_session_db	struct
*	O
tls_session_db	pointer
)	O
{	O
return	O
tls_session_db	pointer
?	O
tls_session_db	pointer
->	O
changed	bool
:	O
0	int
;	O
}	O
