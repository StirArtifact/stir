static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: db_am.c,v 1.5 2000/06/30 08:35:12 loic Exp $"	pointer
;	O
int	O
CDB___db_cursor	function
(	O
dbp	pointer
,	O
txn	pointer
,	O
dbcp	pointer
,	O
flags	int
)	O
DB	struct
*	O
dbp	pointer
;	O
DB_TXN	struct
*	O
txn	pointer
;	O
DBC	struct
*	O
*	O
dbcp	pointer
;	O
u_int32_t	int
flags	int
;	O
{	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
db_lockmode_t	enum
mode	enum
;	O
u_int32_t	int
op	enum
;	O
int	O
ret	int
;	O
dbenv	pointer
=	O
dbp	pointer
->	O
dbenv	pointer
;	O
PANIC_CHECK	O
(	O
dbenv	pointer
)	O
;	O
DB_ILLEGAL_BEFORE_OPEN	O
(	O
dbp	pointer
,	O
"DB->cursor"	pointer
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_cursorchk	function
(	O
dbp	pointer
,	O
flags	int
,	O
F_ISSET	O
(	O
dbp	pointer
,	O
DB_AM_RDONLY	int
)	O
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_icursor	function
(	O
dbp	pointer
,	O
txn	pointer
,	O
dbp	pointer
->	O
type	enum
,	O
PGNO_INVALID	int
,	O
0	int
,	O
dbcp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
dbc	pointer
=	O
*	O
dbcp	pointer
;	O
if	O
(	O
LOCKING	O
(	O
dbenv	pointer
)	O
)	O
{	O
op	enum
=	O
LF_ISSET	O
(	O
DB_OPFLAGS_MASK	int
)	O
;	O
mode	enum
=	O
(	O
op	enum
==	O
DB_WRITELOCK	int
)	O
?	O
DB_LOCK_WRITE	int
:	O
(	O
(	O
op	enum
==	O
DB_WRITECURSOR	int
)	O
?	O
DB_LOCK_IWRITE	int
:	O
DB_LOCK_READ	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_lock_get	function
(	O
dbenv	pointer
,	O
dbc	pointer
->	O
locker	int
,	O
0	int
,	O
&	O
dbc	pointer
->	O
lock_dbt	struct
,	O
mode	enum
,	O
&	O
dbc	pointer
->	O
mylock	struct
)	O
)	O
!=	O
0	int
)	O
{	O
(	O
void	O
)	O
CDB___db_c_close	function
(	O
dbc	pointer
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
if	O
(	O
op	enum
==	O
DB_WRITECURSOR	int
)	O
F_SET	O
(	O
dbc	pointer
,	O
DBC_WRITECURSOR	int
)	O
;	O
if	O
(	O
op	enum
==	O
DB_WRITELOCK	int
)	O
F_SET	O
(	O
dbc	pointer
,	O
DBC_WRITER	int
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_icursor	function
(	O
dbp	pointer
,	O
txn	pointer
,	O
dbtype	enum
,	O
root	int
,	O
is_opd	int
,	O
dbcp	pointer
)	O
DB	struct
*	O
dbp	pointer
;	O
DB_TXN	struct
*	O
txn	pointer
;	O
DBTYPE	enum
dbtype	enum
;	O
db_pgno_t	int
root	int
;	O
int	O
is_opd	int
;	O
DBC	struct
*	O
*	O
dbcp	pointer
;	O
{	O
DBC	struct
*	O
dbc	pointer
,	O
*	O
adbc	pointer
;	O
DBC_INTERNAL	struct
*	O
cp	pointer
;	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
int	O
allocated	int
,	O
ret	int
;	O
dbenv	pointer
=	O
dbp	pointer
->	O
dbenv	pointer
;	O
allocated	int
=	O
0	int
;	O
MUTEX_THREAD_LOCK	O
(	O
dbp	pointer
->	O
mutexp	pointer
)	O
;	O
for	O
(	O
dbc	pointer
=	O
TAILQ_FIRST	O
(	O
&	O
dbp	pointer
->	O
free_queue	struct
)	O
;	O
dbc	pointer
!=	O
NULL	O
;	O
dbc	pointer
=	O
TAILQ_NEXT	O
(	O
dbc	pointer
,	O
links	struct
)	O
)	O
if	O
(	O
dbtype	enum
==	O
dbc	pointer
->	O
dbtype	enum
)	O
{	O
TAILQ_REMOVE	O
(	O
&	O
dbp	pointer
->	O
free_queue	struct
,	O
dbc	pointer
,	O
links	struct
)	O
;	O
dbc	pointer
->	O
flags	int
=	O
0	int
;	O
break	O
;	O
}	O
MUTEX_THREAD_UNLOCK	O
(	O
dbp	pointer
->	O
mutexp	pointer
)	O
;	O
if	O
(	O
dbc	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_calloc	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
1	int
,	O
sizeof	O
(	O
DBC	struct
)	O
,	O
&	O
dbc	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
allocated	int
=	O
1	int
;	O
dbc	pointer
->	O
flags	int
=	O
0	int
;	O
dbc	pointer
->	O
dbp	pointer
=	O
dbp	pointer
;	O
if	O
(	O
LOCKING_ON	O
(	O
dbenv	pointer
)	O
)	O
{	O
if	O
(	O
!	O
DB_IS_THREADED	O
(	O
dbp	pointer
)	O
&&	O
(	O
adbc	pointer
=	O
TAILQ_FIRST	O
(	O
&	O
dbp	pointer
->	O
active_queue	struct
)	O
)	O
!=	O
NULL	O
)	O
dbc	pointer
->	O
lid	int
=	O
adbc	pointer
->	O
lid	int
;	O
else	O
if	O
(	O
(	O
ret	int
=	O
CDB_lock_id	function
(	O
dbenv	pointer
,	O
&	O
dbc	pointer
->	O
lid	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
memcpy	function
(	O
dbc	pointer
->	O
lock	struct
.	O
fileid	array
,	O
dbp	pointer
->	O
fileid	array
,	O
DB_FILE_ID_LEN	int
)	O
;	O
if	O
(	O
LOCKING	O
(	O
dbenv	pointer
)	O
)	O
{	O
dbc	pointer
->	O
lock_dbt	struct
.	O
size	int
=	O
DB_FILE_ID_LEN	int
;	O
dbc	pointer
->	O
lock_dbt	struct
.	O
data	pointer
=	O
dbc	pointer
->	O
lock	struct
.	O
fileid	array
;	O
}	O
else	O
{	O
dbc	pointer
->	O
lock	struct
.	O
type	enum
=	O
DB_PAGE_LOCK	int
;	O
dbc	pointer
->	O
lock_dbt	struct
.	O
size	int
=	O
sizeof	O
(	O
dbc	pointer
->	O
lock	struct
)	O
;	O
dbc	pointer
->	O
lock_dbt	struct
.	O
data	pointer
=	O
&	O
dbc	pointer
->	O
lock	struct
;	O
}	O
}	O
switch	O
(	O
dbtype	enum
)	O
{	O
case	O
DB_BTREE	int
:	O
case	O
DB_RECNO	int
:	O
if	O
(	O
(	O
ret	int
=	O
CDB___bam_c_init	function
(	O
dbc	pointer
,	O
dbtype	enum
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
break	O
;	O
case	O
DB_HASH	int
:	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_c_init	function
(	O
dbc	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
break	O
;	O
case	O
DB_QUEUE	int
:	O
if	O
(	O
(	O
ret	int
=	O
CDB___qam_c_init	function
(	O
dbc	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
break	O
;	O
default	O
:	O
ret	int
=	O
CDB___db_unknown_type	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
"CDB___db_icursor"	pointer
,	O
dbtype	enum
)	O
;	O
goto	O
err	pointer
;	O
}	O
cp	pointer
=	O
dbc	pointer
->	O
internal	pointer
;	O
}	O
dbc	pointer
->	O
dbtype	enum
=	O
dbtype	enum
;	O
if	O
(	O
(	O
dbc	pointer
->	O
txn	pointer
=	O
txn	pointer
)	O
==	O
NULL	O
)	O
dbc	pointer
->	O
locker	int
=	O
dbc	pointer
->	O
lid	int
;	O
else	O
dbc	pointer
->	O
locker	int
=	O
txn	pointer
->	O
txnid	int
;	O
if	O
(	O
is_opd	int
)	O
F_SET	O
(	O
dbc	pointer
,	O
DBC_OPD	int
)	O
;	O
if	O
(	O
F_ISSET	O
(	O
dbp	pointer
,	O
DB_AM_RECOVER	int
)	O
)	O
F_SET	O
(	O
dbc	pointer
,	O
DBC_RECOVER	int
)	O
;	O
cp	pointer
=	O
dbc	pointer
->	O
internal	pointer
;	O
cp	pointer
->	O
opd	pointer
=	O
NULL	O
;	O
cp	pointer
->	O
indx	short
=	O
0	int
;	O
cp	pointer
->	O
page	pointer
=	O
NULL	O
;	O
cp	pointer
->	O
pgno	int
=	O
PGNO_INVALID	int
;	O
cp	pointer
->	O
root	int
=	O
root	int
;	O
switch	O
(	O
dbtype	enum
)	O
{	O
case	O
DB_BTREE	int
:	O
case	O
DB_RECNO	int
:	O
if	O
(	O
(	O
ret	int
=	O
CDB___bam_c_refresh	function
(	O
dbc	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
break	O
;	O
case	O
DB_HASH	int
:	O
case	O
DB_QUEUE	int
:	O
break	O
;	O
default	O
:	O
ret	int
=	O
CDB___db_unknown_type	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
"CDB___db_icursor"	pointer
,	O
dbp	pointer
->	O
type	enum
)	O
;	O
goto	O
err	pointer
;	O
}	O
MUTEX_THREAD_LOCK	O
(	O
dbp	pointer
->	O
mutexp	pointer
)	O
;	O
TAILQ_INSERT_TAIL	O
(	O
&	O
dbp	pointer
->	O
active_queue	struct
,	O
dbc	pointer
,	O
links	struct
)	O
;	O
F_SET	O
(	O
dbc	pointer
,	O
DBC_ACTIVE	int
)	O
;	O
MUTEX_THREAD_UNLOCK	O
(	O
dbp	pointer
->	O
mutexp	pointer
)	O
;	O
*	O
dbcp	pointer
=	O
dbc	pointer
;	O
return	O
(	O
0	int
)	O
;	O
err	pointer
:	O
if	O
(	O
allocated	int
)	O
CDB___os_free	function
(	O
dbc	pointer
,	O
sizeof	O
(	O
*	O
dbc	pointer
)	O
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___db_fd	function
(	O
dbp	pointer
,	O
fdp	pointer
)	O
DB	struct
*	O
dbp	pointer
;	O
int	O
*	O
fdp	pointer
;	O
{	O
DB_FH	struct
*	O
fhp	pointer
;	O
int	O
ret	int
;	O
PANIC_CHECK	O
(	O
dbp	pointer
->	O
dbenv	pointer
)	O
;	O
DB_ILLEGAL_BEFORE_OPEN	O
(	O
dbp	pointer
,	O
"DB->fd"	pointer
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___mp_xxx_fh	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
&	O
fhp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
F_ISSET	O
(	O
fhp	pointer
,	O
DB_FH_VALID	int
)	O
)	O
{	O
*	O
fdp	pointer
=	O
fhp	pointer
->	O
fd	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
else	O
{	O
*	O
fdp	pointer
=	O
-	O
1	int
;	O
CDB___db_err	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
"DB does not have a valid file handle."	pointer
)	O
;	O
return	O
(	O
ENOENT	int
)	O
;	O
}	O
}	O
int	O
CDB___db_get	function
(	O
dbp	pointer
,	O
txn	pointer
,	O
key	struct
,	O
data	pointer
,	O
flags	int
)	O
DB	struct
*	O
dbp	pointer
;	O
DB_TXN	struct
*	O
txn	pointer
;	O
DBT	struct
*	O
key	struct
,	O
*	O
data	pointer
;	O
u_int32_t	int
flags	int
;	O
{	O
DBC	struct
*	O
dbc	pointer
;	O
int	O
ret	int
,	O
t_ret	int
;	O
PANIC_CHECK	O
(	O
dbp	pointer
->	O
dbenv	pointer
)	O
;	O
DB_ILLEGAL_BEFORE_OPEN	O
(	O
dbp	pointer
,	O
"DB->get"	pointer
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_getchk	function
(	O
dbp	pointer
,	O
key	struct
,	O
data	pointer
,	O
flags	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
dbp	pointer
->	O
cursor	pointer
(	O
dbp	pointer
,	O
txn	pointer
,	O
&	O
dbc	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
DEBUG_LREAD	O
(	O
dbc	pointer
,	O
txn	pointer
,	O
"CDB___db_get"	pointer
,	O
key	struct
,	O
NULL	O
,	O
flags	int
)	O
;	O
ret	int
=	O
dbc	pointer
->	O
c_get	pointer
(	O
dbc	pointer
,	O
key	struct
,	O
data	pointer
,	O
flags	int
==	O
0	int
||	O
flags	int
==	O
DB_RMW	int
?	O
flags	int
|	O
DB_SET	int
:	O
flags	int
)	O
;	O
if	O
(	O
(	O
t_ret	int
=	O
CDB___db_c_close	function
(	O
dbc	pointer
)	O
)	O
!=	O
0	int
&&	O
ret	int
==	O
0	int
)	O
ret	int
=	O
t_ret	int
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___db_put	function
(	O
dbp	pointer
,	O
txn	pointer
,	O
key	struct
,	O
data	pointer
,	O
flags	int
)	O
DB	struct
*	O
dbp	pointer
;	O
DB_TXN	struct
*	O
txn	pointer
;	O
DBT	struct
*	O
key	struct
,	O
*	O
data	pointer
;	O
u_int32_t	int
flags	int
;	O
{	O
DBC	struct
*	O
dbc	pointer
;	O
DBT	struct
tdata	struct
;	O
int	O
ret	int
,	O
t_ret	int
;	O
PANIC_CHECK	O
(	O
dbp	pointer
->	O
dbenv	pointer
)	O
;	O
DB_ILLEGAL_BEFORE_OPEN	O
(	O
dbp	pointer
,	O
"DB->put"	pointer
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_putchk	function
(	O
dbp	pointer
,	O
key	struct
,	O
data	pointer
,	O
flags	int
,	O
F_ISSET	O
(	O
dbp	pointer
,	O
DB_AM_RDONLY	int
)	O
,	O
F_ISSET	O
(	O
dbp	pointer
,	O
DB_AM_DUP	int
)	O
||	O
F_ISSET	O
(	O
key	struct
,	O
DB_DBT_DUPOK	int
)	O
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
dbp	pointer
->	O
cursor	pointer
(	O
dbp	pointer
,	O
txn	pointer
,	O
&	O
dbc	pointer
,	O
DB_WRITELOCK	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
DEBUG_LWRITE	O
(	O
dbc	pointer
,	O
txn	pointer
,	O
"CDB___db_put"	pointer
,	O
key	struct
,	O
data	pointer
,	O
flags	int
)	O
;	O
if	O
(	O
flags	int
==	O
DB_NOOVERWRITE	int
)	O
{	O
flags	int
=	O
0	int
;	O
memset	function
(	O
&	O
tdata	struct
,	O
0	int
,	O
sizeof	O
(	O
tdata	struct
)	O
)	O
;	O
F_SET	O
(	O
&	O
tdata	struct
,	O
DB_DBT_USERMEM	int
|	O
DB_DBT_PARTIAL	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
dbc	pointer
->	O
c_get	pointer
(	O
dbc	pointer
,	O
key	struct
,	O
&	O
tdata	struct
,	O
DB_SET	int
|	O
(	O
STD_LOCKING	O
(	O
dbc	pointer
)	O
?	O
DB_RMW	int
:	O
0	int
)	O
)	O
)	O
==	O
0	int
)	O
ret	int
=	O
DB_KEYEXIST	O
;	O
else	O
if	O
(	O
ret	int
==	O
DB_NOTFOUND	O
)	O
ret	int
=	O
0	int
;	O
}	O
if	O
(	O
ret	int
==	O
0	int
)	O
ret	int
=	O
dbc	pointer
->	O
c_put	pointer
(	O
dbc	pointer
,	O
key	struct
,	O
data	pointer
,	O
flags	int
==	O
0	int
?	O
DB_KEYLAST	int
:	O
flags	int
)	O
;	O
if	O
(	O
(	O
t_ret	int
=	O
CDB___db_c_close	function
(	O
dbc	pointer
)	O
)	O
!=	O
0	int
&&	O
ret	int
==	O
0	int
)	O
ret	int
=	O
t_ret	int
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___db_sync	function
(	O
dbp	pointer
,	O
flags	int
)	O
DB	struct
*	O
dbp	pointer
;	O
u_int32_t	int
flags	int
;	O
{	O
int	O
ret	int
,	O
t_ret	int
;	O
PANIC_CHECK	O
(	O
dbp	pointer
->	O
dbenv	pointer
)	O
;	O
DB_ILLEGAL_BEFORE_OPEN	O
(	O
dbp	pointer
,	O
"DB->sync"	pointer
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_syncchk	function
(	O
dbp	pointer
,	O
flags	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
F_ISSET	O
(	O
dbp	pointer
,	O
DB_AM_RDONLY	int
)	O
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
dbp	pointer
->	O
type	enum
==	O
DB_RECNO	int
)	O
ret	int
=	O
CDB___ram_writeback	function
(	O
dbp	pointer
)	O
;	O
if	O
(	O
F_ISSET	O
(	O
dbp	pointer
,	O
DB_AM_INMEM	int
)	O
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
(	O
t_ret	int
=	O
CDB_memp_fsync	function
(	O
dbp	pointer
->	O
mpf	pointer
)	O
)	O
!=	O
0	int
&&	O
ret	int
==	O
0	int
)	O
ret	int
=	O
t_ret	int
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
