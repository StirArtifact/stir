error_t	function
store_std_leaf_allocate_encoding	function
(	O
const	O
struct	O
store	struct
*	O
store	struct
,	O
struct	O
store_enc	struct
*	O
enc	pointer
)	O
{	O
enc	pointer
->	O
num_ports	int
++	O
;	O
enc	pointer
->	O
num_ints	int
+=	O
6	int
;	O
enc	pointer
->	O
num_offsets	int
+=	O
store	struct
->	O
num_runs	long
*	O
2	int
;	O
if	O
(	O
store	struct
->	O
name	pointer
)	O
enc	pointer
->	O
data_len	int
+=	O
strlen	function
(	O
store	struct
->	O
name	pointer
)	O
+	O
1	int
;	O
enc	pointer
->	O
data_len	int
+=	O
store	struct
->	O
misc_len	long
;	O
return	O
0	int
;	O
}	O
static	O
inline	O
int	O
too_big	function
(	O
store_offset_t	long
ofs	long
)	O
{	O
off_t	long
o	long
=	O
(	O
off_t	long
)	O
ofs	long
;	O
return	O
o	long
<	O
0	int
||	O
(	O
(	O
store_offset_t	long
)	O
o	long
!=	O
ofs	long
)	O
;	O
}	O
error_t	function
store_std_leaf_encode	function
(	O
const	O
struct	O
store	struct
*	O
store	struct
,	O
struct	O
store_enc	struct
*	O
enc	pointer
)	O
{	O
int	O
i	int
;	O
size_t	long
name_len	long
=	O
(	O
store	struct
->	O
name	pointer
?	O
strlen	function
(	O
store	struct
->	O
name	pointer
)	O
+	O
1	int
:	O
0	int
)	O
;	O
enc	pointer
->	O
ports	pointer
[	O
enc	pointer
->	O
cur_port	long
++	O
]	O
=	O
store	struct
->	O
port	int
;	O
enc	pointer
->	O
ints	pointer
[	O
enc	pointer
->	O
cur_int	long
++	O
]	O
=	O
store	struct
->	O
class	pointer
->	O
id	enum
;	O
enc	pointer
->	O
ints	pointer
[	O
enc	pointer
->	O
cur_int	long
++	O
]	O
=	O
store	struct
->	O
flags	int
;	O
enc	pointer
->	O
ints	pointer
[	O
enc	pointer
->	O
cur_int	long
++	O
]	O
=	O
store	struct
->	O
block_size	long
;	O
enc	pointer
->	O
ints	pointer
[	O
enc	pointer
->	O
cur_int	long
++	O
]	O
=	O
store	struct
->	O
num_runs	long
;	O
enc	pointer
->	O
ints	pointer
[	O
enc	pointer
->	O
cur_int	long
++	O
]	O
=	O
name_len	long
;	O
enc	pointer
->	O
ints	pointer
[	O
enc	pointer
->	O
cur_int	long
++	O
]	O
=	O
store	struct
->	O
misc_len	long
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
store	struct
->	O
num_runs	long
;	O
i	int
++	O
)	O
{	O
if	O
(	O
sizeof	O
(	O
*	O
enc	pointer
->	O
offsets	pointer
)	O
!=	O
sizeof	O
(	O
store	struct
->	O
runs	pointer
[	O
i	int
]	O
.	O
start	long
)	O
&&	O
(	O
too_big	function
(	O
store	struct
->	O
runs	pointer
[	O
i	int
]	O
.	O
start	long
)	O
||	O
too_big	function
(	O
store	struct
->	O
runs	pointer
[	O
i	int
]	O
.	O
start	long
+	O
store	struct
->	O
runs	pointer
[	O
i	int
]	O
.	O
length	long
)	O
)	O
)	O
return	O
EOVERFLOW	O
;	O
enc	pointer
->	O
offsets	pointer
[	O
enc	pointer
->	O
cur_offset	long
++	O
]	O
=	O
store	struct
->	O
runs	pointer
[	O
i	int
]	O
.	O
start	long
;	O
enc	pointer
->	O
offsets	pointer
[	O
enc	pointer
->	O
cur_offset	long
++	O
]	O
=	O
store	struct
->	O
runs	pointer
[	O
i	int
]	O
.	O
length	long
;	O
}	O
if	O
(	O
store	struct
->	O
name	pointer
)	O
{	O
bcopy	function
(	O
store	struct
->	O
name	pointer
,	O
enc	pointer
->	O
data	pointer
+	O
enc	pointer
->	O
cur_data	long
,	O
name_len	long
)	O
;	O
enc	pointer
->	O
cur_data	long
+=	O
name_len	long
;	O
}	O
if	O
(	O
store	struct
->	O
misc_len	long
)	O
{	O
bcopy	function
(	O
store	struct
->	O
misc	pointer
,	O
enc	pointer
->	O
data	pointer
+	O
enc	pointer
->	O
cur_data	long
,	O
store	struct
->	O
misc_len	long
)	O
;	O
enc	pointer
->	O
cur_data	long
+=	O
store	struct
->	O
misc_len	long
;	O
}	O
return	O
0	int
;	O
}	O
error_t	function
store_encode	function
(	O
const	O
struct	O
store	struct
*	O
store	struct
,	O
struct	O
store_enc	struct
*	O
enc	pointer
)	O
{	O
void	O
*	O
buf	pointer
;	O
error_t	function
err	function
;	O
const	O
struct	O
store_class	struct
*	O
class	pointer
=	O
store	struct
->	O
class	pointer
;	O
mach_msg_type_number_t	O
init_num_ports	O
=	O
enc	pointer
->	O
num_ports	int
;	O
mach_msg_type_number_t	O
init_num_ints	O
=	O
enc	pointer
->	O
num_ints	int
;	O
mach_msg_type_number_t	O
init_num_offsets	O
=	O
enc	pointer
->	O
num_offsets	int
;	O
mach_msg_type_number_t	O
init_data_len	O
=	O
enc	pointer
->	O
data_len	int
;	O
if	O
(	O
!	O
class	pointer
->	O
allocate_encoding	pointer
||	O
!	O
class	pointer
->	O
encode	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
enc	pointer
->	O
num_ports	int
=	O
0	int
;	O
enc	pointer
->	O
num_ints	int
=	O
0	int
;	O
enc	pointer
->	O
num_offsets	int
=	O
0	int
;	O
enc	pointer
->	O
data_len	int
=	O
0	int
;	O
err	function
=	O
(	O
*	O
class	pointer
->	O
allocate_encoding	pointer
)	O
(	O
store	struct
,	O
enc	pointer
)	O
;	O
if	O
(	O
err	function
)	O
return	O
err	function
;	O
errno	O
=	O
0	int
;	O
if	O
(	O
enc	pointer
->	O
num_ports	int
>	O
init_num_ports	O
)	O
{	O
buf	pointer
=	O
mmap	function
(	O
0	int
,	O
enc	pointer
->	O
num_ports	int
*	O
sizeof	O
*	O
enc	pointer
->	O
ports	pointer
,	O
PROT_READ	int
|	O
PROT_WRITE	int
,	O
MAP_ANON	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
buf	pointer
!=	O
(	O
void	O
*	O
)	O
-	O
1	int
)	O
enc	pointer
->	O
ports	pointer
=	O
buf	pointer
;	O
}	O
if	O
(	O
!	O
errno	O
&&	O
enc	pointer
->	O
num_ints	int
>	O
init_num_ints	O
)	O
{	O
buf	pointer
=	O
mmap	function
(	O
0	int
,	O
enc	pointer
->	O
num_ints	int
*	O
sizeof	O
*	O
enc	pointer
->	O
ints	pointer
,	O
PROT_READ	int
|	O
PROT_WRITE	int
,	O
MAP_ANON	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
buf	pointer
!=	O
(	O
void	O
*	O
)	O
-	O
1	int
)	O
enc	pointer
->	O
ints	pointer
=	O
buf	pointer
;	O
}	O
if	O
(	O
!	O
errno	O
&&	O
enc	pointer
->	O
num_offsets	int
>	O
init_num_offsets	O
)	O
{	O
buf	pointer
=	O
mmap	function
(	O
0	int
,	O
enc	pointer
->	O
num_offsets	int
*	O
sizeof	O
*	O
enc	pointer
->	O
offsets	pointer
,	O
PROT_READ	int
|	O
PROT_WRITE	int
,	O
MAP_ANON	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
buf	pointer
!=	O
(	O
void	O
*	O
)	O
-	O
1	int
)	O
enc	pointer
->	O
offsets	pointer
=	O
buf	pointer
;	O
}	O
if	O
(	O
!	O
errno	O
&&	O
enc	pointer
->	O
data_len	int
>	O
init_data_len	O
)	O
{	O
buf	pointer
=	O
mmap	function
(	O
0	int
,	O
enc	pointer
->	O
data_len	int
,	O
PROT_READ	int
|	O
PROT_WRITE	int
,	O
MAP_ANON	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
buf	pointer
!=	O
(	O
void	O
*	O
)	O
-	O
1	int
)	O
enc	pointer
->	O
data	pointer
=	O
buf	pointer
;	O
}	O
err	function
=	O
errno	O
;	O
if	O
(	O
!	O
err	function
)	O
err	function
=	O
(	O
*	O
class	pointer
->	O
encode	pointer
)	O
(	O
store	struct
,	O
enc	pointer
)	O
;	O
enc	pointer
->	O
cur_port	long
=	O
enc	pointer
->	O
cur_int	long
=	O
enc	pointer
->	O
cur_offset	long
=	O
enc	pointer
->	O
cur_data	long
=	O
0	int
;	O
if	O
(	O
err	function
)	O
store_enc_dealloc	function
(	O
enc	pointer
)	O
;	O
return	O
err	function
;	O
}	O
error_t	function
store_return	function
(	O
const	O
struct	O
store	struct
*	O
store	struct
,	O
mach_port_t	O
*	O
*	O
ports	pointer
,	O
mach_msg_type_number_t	O
*	O
num_ports	int
,	O
int	O
*	O
*	O
ints	pointer
,	O
mach_msg_type_number_t	O
*	O
num_ints	int
,	O
off_t	long
*	O
*	O
offsets	pointer
,	O
mach_msg_type_number_t	O
*	O
num_offsets	int
,	O
char	O
*	O
*	O
data	pointer
,	O
mach_msg_type_number_t	O
*	O
data_len	int
)	O
{	O
error_t	function
err	function
;	O
struct	O
store_enc	struct
enc	pointer
;	O
store_enc_init	function
(	O
&	O
enc	pointer
,	O
*	O
ports	pointer
,	O
*	O
num_ports	int
,	O
*	O
ints	pointer
,	O
*	O
num_ints	int
,	O
*	O
offsets	pointer
,	O
*	O
num_offsets	int
,	O
*	O
data	pointer
,	O
*	O
data_len	int
)	O
;	O
err	function
=	O
store_encode	function
(	O
store	struct
,	O
&	O
enc	pointer
)	O
;	O
if	O
(	O
err	function
)	O
store_enc_dealloc	function
(	O
&	O
enc	pointer
)	O
;	O
else	O
store_enc_return	function
(	O
&	O
enc	pointer
,	O
ports	pointer
,	O
num_ports	int
,	O
ints	pointer
,	O
num_ints	int
,	O
offsets	pointer
,	O
num_offsets	int
,	O
data	pointer
,	O
data_len	int
)	O
;	O
return	O
err	function
;	O
}	O
