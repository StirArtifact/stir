ENTRY	struct
*	O
chain_prev_find	function
(	O
ENTRY	struct
*	O
ent	pointer
,	O
int	O
accmode	int
,	O
unsigned	O
char	O
*	O
key_str	pointer
,	O
int	O
k_len	int
,	O
int	O
*	O
pkt	pointer
,	O
ENTRY	struct
*	O
prev_ent	pointer
,	O
int	O
prev_pos	int
)	O
{	O
L_chain_prev_find	O
:	O
{	O
unsigned	O
char	O
*	O
blk	pointer
=	O
ent_blk	O
(	O
ent	pointer
)	O
;	O
blk_find_pos	function
(	O
blk	pointer
,	O
key_str	pointer
,	O
k_len	int
,	O
pkt	pointer
)	O
;	O
if	O
(	O
(	O
(	O
pkt_match_type	O
(	O
pkt	pointer
)	O
)	O
==	O
(	O
pastend	O
)	O
)	O
&&	O
(	O
!	O
(	O
end_of_chain_P	O
(	O
blk	pointer
)	O
)	O
)	O
)	O
{	O
long	O
nxt_num	long
=	O
blk_nxt_id	O
(	O
blk	pointer
)	O
;	O
SEGD	struct
*	O
seg	pointer
=	O
ent_seg	O
(	O
ent	pointer
)	O
;	O
ENTRY	struct
*	O
nent	pointer
=	O
0	int
;	O
int	O
empty_blk_P	int
=	O
(	O
pkt_match_pos	O
(	O
pkt	pointer
)	O
)	O
==	O
(	O
blk_data_start	int
)	O
;	O
int	O
ppos	int
=	O
empty_blk_P	int
?	O
prev_pos	int
:	O
pkt_prev_match_pos	O
(	O
pkt	pointer
)	O
;	O
if	O
(	O
empty_blk_P	int
)	O
{	O
release_ent	function
(	O
ent	pointer
,	O
accmode	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
prev_ent	pointer
)	O
release_ent	function
(	O
prev_ent	pointer
,	O
accnone	O
)	O
;	O
ents_ent_update_access_P	function
(	O
ent	pointer
,	O
accmode	int
,	O
accnone	O
)	O
;	O
prev_ent	pointer
=	O
ent	pointer
;	O
}	O
nent	pointer
=	O
get_ent	function
(	O
seg	pointer
,	O
nxt_num	long
,	O
accmode	int
)	O
;	O
{	O
ent	pointer
=	O
nent	pointer
;	O
prev_pos	int
=	O
ppos	int
;	O
goto	O
L_chain_prev_find	O
;	O
}	O
}	O
else	O
if	O
(	O
(	O
pkt_match_pos	O
(	O
pkt	pointer
)	O
)	O
==	O
(	O
blk_data_start	int
)	O
)	O
if	O
(	O
prev_ent	pointer
)	O
{	O
release_ent	function
(	O
ent	pointer
,	O
accmode	int
)	O
;	O
ents_ent_update_access_P	function
(	O
prev_ent	pointer
,	O
accnone	O
,	O
accmode	int
)	O
;	O
pkt_set_match_type	O
(	O
pkt	pointer
,	O
match	O
)	O
;	O
pkt_set_match_pos	O
(	O
pkt	pointer
,	O
prev_pos	int
)	O
;	O
return	O
prev_ent	pointer
;	O
}	O
else	O
{	O
pkt_set_match_type	O
(	O
pkt	pointer
,	O
pastend	O
)	O
;	O
pkt_set_match_pos	O
(	O
pkt	pointer
,	O
0	int
)	O
;	O
return	O
ent	pointer
;	O
}	O
else	O
{	O
if	O
(	O
prev_ent	pointer
)	O
release_ent	function
(	O
prev_ent	pointer
,	O
accnone	O
)	O
;	O
pkt_set_match_type	O
(	O
pkt	pointer
,	O
match	O
)	O
;	O
pkt_set_match_pos	O
(	O
pkt	pointer
,	O
pkt_prev_match_pos	O
(	O
pkt	pointer
)	O
)	O
;	O
return	O
ent	pointer
;	O
}	O
}	O
}	O
int	O
str_gtr_P	function
(	O
unsigned	O
char	O
*	O
a_str	pointer
,	O
int	O
a_pos	int
,	O
int	O
a_len	int
,	O
unsigned	O
char	O
*	O
b_str	pointer
,	O
int	O
b_pos	int
,	O
int	O
b_len	int
)	O
{	O
{	O
int	O
i	int
=	O
0	int
;	O
int	O
ap	int
=	O
a_pos	int
;	O
int	O
bp	int
=	O
b_pos	int
;	O
L_loop	O
:	O
if	O
(	O
(	O
i	int
)	O
>=	O
(	O
a_len	int
)	O
)	O
return	O
0	int
;	O
else	O
if	O
(	O
(	O
i	int
)	O
>=	O
(	O
b_len	int
)	O
)	O
return	O
!	O
0	int
;	O
else	O
if	O
(	O
(	O
(	O
(	O
(	O
unsigned	O
char	O
*	O
)	O
(	O
a_str	pointer
)	O
)	O
[	O
ap	int
]	O
)	O
)	O
<	O
(	O
(	O
(	O
(	O
unsigned	O
char	O
*	O
)	O
(	O
b_str	pointer
)	O
)	O
[	O
bp	int
]	O
)	O
)	O
)	O
return	O
0	int
;	O
else	O
if	O
(	O
(	O
(	O
(	O
(	O
unsigned	O
char	O
*	O
)	O
(	O
b_str	pointer
)	O
)	O
[	O
bp	int
]	O
)	O
)	O
<	O
(	O
(	O
(	O
(	O
unsigned	O
char	O
*	O
)	O
(	O
a_str	pointer
)	O
)	O
[	O
ap	int
]	O
)	O
)	O
)	O
return	O
!	O
0	int
;	O
else	O
{	O
i	int
=	O
(	O
i	int
)	O
+	O
1	int
;	O
ap	int
=	O
(	O
ap	int
)	O
+	O
1	int
;	O
bp	int
=	O
(	O
bp	int
)	O
+	O
1	int
;	O
goto	O
L_loop	O
;	O
}	O
}	O
}	O
ENTRY	struct
*	O
prev_prev_k_ent	function
(	O
ENTRY	struct
*	O
ent	pointer
,	O
unsigned	O
char	O
*	O
key_str	pointer
,	O
int	O
k_len	int
,	O
int	O
level	int
,	O
int	O
*	O
pkt	pointer
)	O
{	O
if	O
(	O
ent	pointer
)	O
{	O
ENTRY	struct
*	O
pent	pointer
=	O
get_ent	function
(	O
ent_seg	O
(	O
ent	pointer
)	O
,	O
ent_id	O
(	O
ent	pointer
)	O
,	O
accnone	O
)	O
;	O
ent	pointer
=	O
chain_prev_find	function
(	O
ent	pointer
,	O
accread	O
,	O
key_str	pointer
,	O
k_len	int
,	O
pkt	pointer
,	O
0	int
,	O
0	int
)	O
;	O
{	O
ENTRY	struct
*	O
res_ent	pointer
=	O
ent	pointer
;	O
if	O
(	O
(	O
pkt_match_type	O
(	O
pkt	pointer
)	O
)	O
!=	O
(	O
match	O
)	O
)	O
{	O
release_ent	function
(	O
ent	pointer
,	O
accread	O
)	O
;	O
res_ent	pointer
=	O
prev_prev_k_ent	function
(	O
prev_blk_ent	function
(	O
pent	pointer
,	O
level	int
)	O
,	O
key_str	pointer
,	O
k_len	int
,	O
level	int
,	O
pkt	pointer
)	O
;	O
}	O
release_ent	function
(	O
pent	pointer
,	O
accnone	O
)	O
;	O
return	O
res_ent	pointer
;	O
}	O
}	O
else	O
return	O
0	int
;	O
}	O
ENTRY	struct
*	O
prev_key_ent	function
(	O
ENTRY	struct
*	O
ent	pointer
,	O
unsigned	O
char	O
*	O
key_str	pointer
,	O
int	O
k_len	int
,	O
int	O
level	int
,	O
int	O
*	O
pkt	pointer
)	O
{	O
if	O
(	O
ent	pointer
)	O
return	O
prev_prev_k_ent	function
(	O
prev_find_prev_ent	function
(	O
ent	pointer
,	O
level	int
,	O
-	O
1	int
,	O
key_str	pointer
,	O
k_len	int
)	O
,	O
key_str	pointer
,	O
k_len	int
,	O
level	int
,	O
pkt	pointer
)	O
;	O
else	O
return	O
0	int
;	O
}	O
ENTRY	struct
*	O
chain_to_prev_ent	function
(	O
ENTRY	struct
*	O
from_ent	pointer
,	O
long	O
goal_blk_num	long
,	O
unsigned	O
char	O
*	O
goal_key_str	pointer
,	O
int	O
key_len	int
)	O
{	O
L_chain_to_prev_ent	O
:	O
{	O
unsigned	O
char	O
*	O
from_blk	pointer
=	O
ent_blk	O
(	O
from_ent	pointer
)	O
;	O
if	O
(	O
(	O
blk_nxt_id	O
(	O
from_blk	pointer
)	O
)	O
==	O
(	O
goal_blk_num	long
)	O
)	O
return	O
from_ent	pointer
;	O
else	O
if	O
(	O
end_of_chain_P	O
(	O
from_blk	pointer
)	O
)	O
{	O
dprintf	function
(	O
(	O
diagout	pointer
,	O
">>>>ERROR<<<< %s: hit end of %ld:%ld lev=%d %.*s\n"	pointer
,	O
"chain_to_prev_ent"	pointer
,	O
ent_id	O
(	O
from_ent	pointer
)	O
,	O
goal_blk_num	long
,	O
blk_level	O
(	O
from_blk	pointer
)	O
,	O
key_len	int
,	O
goal_key_str	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
else	O
{	O
int	O
b_pos	int
=	O
blk_data_start	int
;	O
if	O
(	O
str_gtr_P	function
(	O
from_blk	pointer
,	O
(	O
b_pos	int
)	O
+	O
2	int
,	O
field_len	O
(	O
from_blk	pointer
,	O
(	O
b_pos	int
)	O
+	O
1	int
)	O
,	O
goal_key_str	pointer
,	O
0	int
,	O
key_len	int
)	O
)	O
{	O
dprintf	function
(	O
(	O
diagout	pointer
,	O
">>>>ERROR<<<< %s: missed blk %ld:%ld lev=%d %.*s\n"	pointer
,	O
"chain_to_prev_ent"	pointer
,	O
ent_id	O
(	O
from_ent	pointer
)	O
,	O
goal_blk_num	long
,	O
blk_level	O
(	O
from_blk	pointer
)	O
,	O
key_len	int
,	O
goal_key_str	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
else	O
{	O
from_ent	pointer
=	O
switch_ent	function
(	O
from_ent	pointer
,	O
accread	O
,	O
blk_nxt_id	O
(	O
from_blk	pointer
)	O
,	O
accread	O
)	O
;	O
goto	O
L_chain_to_prev_ent	O
;	O
}	O
}	O
}	O
}	O
int	O
at_root_level_P	function
(	O
SEGD	struct
*	O
seg	pointer
,	O
unsigned	O
char	O
*	O
blk	pointer
)	O
{	O
if	O
(	O
root_P	O
(	O
blk	pointer
)	O
)	O
return	O
!	O
0	int
;	O
else	O
{	O
ENTRY	struct
*	O
rent	pointer
=	O
get_ent	function
(	O
seg	pointer
,	O
blk_top_id	O
(	O
blk	pointer
)	O
,	O
accread	O
)	O
;	O
unsigned	O
char	O
*	O
rblk	pointer
=	O
ent_blk	O
(	O
rent	pointer
)	O
;	O
int	O
rlevel	int
=	O
blk_level	O
(	O
rblk	pointer
)	O
;	O
int	O
res_P	int
=	O
(	O
blk_level	O
(	O
blk	pointer
)	O
)	O
==	O
(	O
rlevel	int
)	O
;	O
release_ent	function
(	O
rent	pointer
,	O
accread	O
)	O
;	O
return	O
res_P	int
;	O
}	O
}	O
ENTRY	struct
*	O
prev_blk_ent	function
(	O
ENTRY	struct
*	O
ent	pointer
,	O
int	O
level	int
)	O
{	O
ents_ent_update_access_P	function
(	O
ent	pointer
,	O
accnone	O
,	O
accread	O
)	O
;	O
{	O
unsigned	O
char	O
*	O
blk	pointer
=	O
ent_blk	O
(	O
ent	pointer
)	O
;	O
ents_ent_update_access_P	function
(	O
ent	pointer
,	O
accread	O
,	O
accnone	O
)	O
;	O
if	O
(	O
root_P	O
(	O
blk	pointer
)	O
)	O
return	O
0	int
;	O
else	O
{	O
int	O
skey_pos	int
=	O
split_key_pos	function
(	O
blk	pointer
)	O
;	O
if	O
(	O
0	int
<	O
(	O
skey_pos	int
)	O
)	O
{	O
long	O
top_num	long
=	O
blk_top_id	O
(	O
blk	pointer
)	O
;	O
SEGD	struct
*	O
seg	pointer
=	O
ent_seg	O
(	O
ent	pointer
)	O
;	O
long	O
goal_blk_num	long
=	O
ent_id	O
(	O
ent	pointer
)	O
;	O
unsigned	O
char	O
new_str	array
[	O
0x100	int
]	O
;	O
int	O
k_len	int
=	O
recon_this_key	function
(	O
blk	pointer
,	O
skey_pos	int
,	O
new_str	array
,	O
0	int
,	O
0x100	int
)	O
;	O
if	O
(	O
at_root_level_P	function
(	O
seg	pointer
,	O
blk	pointer
)	O
)	O
{	O
dprintf	function
(	O
(	O
diagout	pointer
,	O
"%s code which has never been run!!\n"	pointer
,	O
"prev_blk_ent"	pointer
)	O
)	O
;	O
return	O
chain_to_prev_ent	function
(	O
get_ent	function
(	O
seg	pointer
,	O
top_num	long
,	O
accread	O
)	O
,	O
goal_blk_num	long
,	O
new_str	array
,	O
k_len	int
)	O
;	O
}	O
else	O
{	O
int	O
pkt	pointer
[	O
pkt_size	int
]	O
;	O
ent	pointer
=	O
prev_key_ent	function
(	O
get_ent	function
(	O
seg	pointer
,	O
top_num	long
,	O
accnone	O
)	O
,	O
new_str	array
,	O
k_len	int
,	O
(	O
level	int
)	O
+	O
1	int
,	O
pkt	pointer
)	O
;	O
if	O
(	O
(	O
ent	pointer
)	O
==	O
0	int
)	O
return	O
0	int
;	O
else	O
{	O
int	O
nxt_pos	int
=	O
next_field	O
(	O
ent_blk	O
(	O
ent	pointer
)	O
,	O
1	int
+	O
(	O
pkt_match_pos	O
(	O
pkt	pointer
)	O
)	O
)	O
;	O
long	O
num	long
=	O
0x0L	int
;	O
if	O
(	O
(	O
nxt_pos	int
)	O
==	O
(	O
blk_end	O
(	O
ent_blk	O
(	O
ent	pointer
)	O
)	O
)	O
)	O
{	O
dprintf	function
(	O
(	O
diagout	pointer
,	O
"%s: I'm confused: at split key of blk %ld:%ld"	pointer
,	O
"prev_blk_ent"	pointer
,	O
seg_id	O
(	O
ent_seg	O
(	O
ent	pointer
)	O
)	O
,	O
ent_id	O
(	O
ent	pointer
)	O
)	O
)	O
;	O
num	long
=	O
(	O
pkt_match_pos	O
(	O
pkt	pointer
)	O
)	O
-	O
0x4L	int
;	O
}	O
else	O
num	long
=	O
0x1L	int
+	O
(	O
nxt_pos	int
)	O
;	O
return	O
chain_to_prev_ent	function
(	O
switch_ent	function
(	O
ent	pointer
,	O
accread	O
,	O
str2long	function
(	O
ent_blk	O
(	O
ent	pointer
)	O
,	O
num	long
)	O
,	O
accread	O
)	O
,	O
goal_blk_num	long
,	O
new_str	array
,	O
k_len	int
)	O
;	O
}	O
}	O
}	O
else	O
return	O
0	int
;	O
}	O
}	O
}	O
ENTRY	struct
*	O
prev_find_prev_ent	function
(	O
ENTRY	struct
*	O
ent	pointer
,	O
int	O
desired_level	int
,	O
int	O
last_level	int
,	O
unsigned	O
char	O
*	O
key_str	pointer
,	O
int	O
k_len	int
)	O
{	O
L_prev_find_prev_ent	O
:	O
if	O
(	O
ent	pointer
)	O
if	O
(	O
ents_ent_update_access_P	function
(	O
ent	pointer
,	O
accnone	O
,	O
accread	O
)	O
)	O
{	O
unsigned	O
char	O
*	O
blk	pointer
=	O
ent_blk	O
(	O
ent	pointer
)	O
;	O
if	O
(	O
(	O
blk_level	O
(	O
blk	pointer
)	O
)	O
==	O
(	O
desired_level	int
)	O
)	O
return	O
ent	pointer
;	O
else	O
if	O
(	O
(	O
blk_level	O
(	O
blk	pointer
)	O
)	O
<	O
(	O
desired_level	int
)	O
)	O
{	O
dprintf	function
(	O
(	O
diagout	pointer
,	O
">>>>ERROR<<<< %s: bad blk level\n"	pointer
,	O
"find_prev_ent"	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
(	O
(	O
last_level	int
)	O
>=	O
0	int
)	O
&&	O
(	O
(	O
blk_level	O
(	O
blk	pointer
)	O
)	O
!=	O
(	O
(	O
last_level	int
)	O
-	O
1	int
)	O
)	O
)	O
{	O
dprintf	function
(	O
(	O
diagout	pointer
,	O
">>>>ERROR<<<< %s: bad blk level %d last=%d in %ld:%ld\n"	pointer
,	O
"find_prev_ent"	pointer
,	O
blk_level	O
(	O
blk	pointer
)	O
,	O
last_level	int
,	O
seg_id	O
(	O
ent_seg	O
(	O
ent	pointer
)	O
)	O
,	O
ent_id	O
(	O
ent	pointer
)	O
)	O
)	O
;	O
return	O
0	int
;	O
}	O
else	O
{	O
int	O
pkt	pointer
[	O
pkt_size	int
]	O
;	O
ent	pointer
=	O
chain_find	function
(	O
ent	pointer
,	O
accread	O
,	O
key_str	pointer
,	O
k_len	int
,	O
pkt	pointer
)	O
;	O
if	O
(	O
ent	pointer
)	O
{	O
int	O
nxt_pos	int
=	O
next_field	O
(	O
ent_blk	O
(	O
ent	pointer
)	O
,	O
1	int
+	O
(	O
pkt_match_pos	O
(	O
pkt	pointer
)	O
)	O
)	O
;	O
int	O
ptr_pos	int
=	O
(	O
nxt_pos	int
)	O
==	O
(	O
blk_end	O
(	O
ent_blk	O
(	O
ent	pointer
)	O
)	O
)	O
?	O
(	O
pkt_match_pos	O
(	O
pkt	pointer
)	O
)	O
-	O
4	int
:	O
1	int
+	O
(	O
nxt_pos	int
)	O
;	O
{	O
ENTRY	struct
*	O
T_ent	pointer
=	O
switch_ent	function
(	O
ent	pointer
,	O
accread	O
,	O
str2long	function
(	O
ent_blk	O
(	O
ent	pointer
)	O
,	O
ptr_pos	int
)	O
,	O
accnone	O
)	O
;	O
last_level	int
=	O
blk_level	O
(	O
ent_blk	O
(	O
ent	pointer
)	O
)	O
;	O
ent	pointer
=	O
T_ent	pointer
;	O
goto	O
L_prev_find_prev_ent	O
;	O
}	O
}	O
else	O
return	O
0	int
;	O
}	O
}	O
else	O
return	O
0	int
;	O
else	O
return	O
0	int
;	O
}	O
