mp_limb_t	long
mpn_dcpi1_divappr_q_n	O
(	O
mp_ptr	pointer
qp	pointer
,	O
mp_ptr	pointer
np	pointer
,	O
mp_srcptr	pointer
dp	pointer
,	O
mp_size_t	long
n	long
,	O
gmp_pi1_t	struct
*	O
dinv	pointer
,	O
mp_ptr	pointer
tp	pointer
)	O
{	O
mp_size_t	long
lo	long
,	O
hi	long
;	O
mp_limb_t	long
cy	long
,	O
qh	long
,	O
ql	long
;	O
lo	long
=	O
n	long
>>	O
1	int
;	O
hi	long
=	O
n	long
-	O
lo	long
;	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
hi	long
,	O
DC_DIV_QR_THRESHOLD	int
)	O
)	O
qh	long
=	O
mpn_sbpi1_div_qr	O
(	O
qp	pointer
+	O
lo	long
,	O
np	pointer
+	O
2	int
*	O
lo	long
,	O
2	int
*	O
hi	long
,	O
dp	pointer
+	O
lo	long
,	O
hi	long
,	O
dinv	pointer
->	O
inv32	long
)	O
;	O
else	O
qh	long
=	O
mpn_dcpi1_div_qr_n	O
(	O
qp	pointer
+	O
lo	long
,	O
np	pointer
+	O
2	int
*	O
lo	long
,	O
dp	pointer
+	O
lo	long
,	O
hi	long
,	O
dinv	pointer
,	O
tp	pointer
)	O
;	O
mpn_mul	O
(	O
tp	pointer
,	O
qp	pointer
+	O
lo	long
,	O
hi	long
,	O
dp	pointer
,	O
lo	long
)	O
;	O
cy	long
=	O
mpn_sub_n	O
(	O
np	pointer
+	O
lo	long
,	O
np	pointer
+	O
lo	long
,	O
tp	pointer
,	O
n	long
)	O
;	O
if	O
(	O
qh	long
!=	O
0	int
)	O
cy	long
+=	O
mpn_sub_n	O
(	O
np	pointer
+	O
n	long
,	O
np	pointer
+	O
n	long
,	O
dp	pointer
,	O
lo	long
)	O
;	O
while	O
(	O
cy	long
!=	O
0	int
)	O
{	O
qh	long
-=	O
mpn_sub_1	O
(	O
qp	pointer
+	O
lo	long
,	O
qp	pointer
+	O
lo	long
,	O
hi	long
,	O
1	int
)	O
;	O
cy	long
-=	O
mpn_add_n	O
(	O
np	pointer
+	O
lo	long
,	O
np	pointer
+	O
lo	long
,	O
dp	pointer
,	O
n	long
)	O
;	O
}	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
lo	long
,	O
DC_DIVAPPR_Q_THRESHOLD	int
)	O
)	O
ql	long
=	O
mpn_sbpi1_divappr_q	O
(	O
qp	pointer
,	O
np	pointer
+	O
hi	long
,	O
2	int
*	O
lo	long
,	O
dp	pointer
+	O
hi	long
,	O
lo	long
,	O
dinv	pointer
->	O
inv32	long
)	O
;	O
else	O
ql	long
=	O
mpn_dcpi1_divappr_q_n	O
(	O
qp	pointer
,	O
np	pointer
+	O
hi	long
,	O
dp	pointer
+	O
hi	long
,	O
lo	long
,	O
dinv	pointer
,	O
tp	pointer
)	O
;	O
if	O
(	O
UNLIKELY	O
(	O
ql	long
!=	O
0	int
)	O
)	O
{	O
mp_size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
lo	long
;	O
i	long
++	O
)	O
qp	pointer
[	O
i	long
]	O
=	O
GMP_NUMB_MASK	O
;	O
}	O
return	O
qh	long
;	O
}	O
mp_limb_t	long
mpn_dcpi1_divappr_q	O
(	O
mp_ptr	pointer
qp	pointer
,	O
mp_ptr	pointer
np	pointer
,	O
mp_size_t	long
nn	long
,	O
mp_srcptr	pointer
dp	pointer
,	O
mp_size_t	long
dn	long
,	O
gmp_pi1_t	struct
*	O
dinv	pointer
)	O
{	O
mp_size_t	long
qn	long
;	O
mp_limb_t	long
qh	long
,	O
cy	long
,	O
qsave	long
;	O
mp_ptr	pointer
tp	pointer
;	O
TMP_DECL	O
;	O
TMP_MARK	O
;	O
ASSERT	O
(	O
dn	long
>=	O
6	int
)	O
;	O
ASSERT	O
(	O
nn	long
>	O
dn	long
)	O
;	O
ASSERT	O
(	O
dp	pointer
[	O
dn	long
-	O
1	int
]	O
&	O
GMP_NUMB_HIGHBIT	O
)	O
;	O
qn	long
=	O
nn	long
-	O
dn	long
;	O
qp	pointer
+=	O
qn	long
;	O
np	pointer
+=	O
nn	long
;	O
dp	pointer
+=	O
dn	long
;	O
if	O
(	O
qn	long
>=	O
dn	long
)	O
{	O
qn	long
++	O
;	O
do	O
qn	long
-=	O
dn	long
;	O
while	O
(	O
qn	long
>	O
dn	long
)	O
;	O
qp	pointer
-=	O
qn	long
;	O
np	pointer
-=	O
qn	long
;	O
tp	pointer
=	O
TMP_SALLOC_LIMBS	O
(	O
dn	long
)	O
;	O
if	O
(	O
qn	long
==	O
1	int
)	O
{	O
mp_limb_t	long
q	int
,	O
n2	long
,	O
n1	long
,	O
n0	long
,	O
d1	long
,	O
d0	long
;	O
qh	long
=	O
mpn_cmp	O
(	O
np	pointer
-	O
dn	long
+	O
1	int
,	O
dp	pointer
-	O
dn	long
,	O
dn	long
)	O
>=	O
0	int
;	O
if	O
(	O
qh	long
)	O
ASSERT_NOCARRY	O
(	O
mpn_sub_n	O
(	O
np	pointer
-	O
dn	long
+	O
1	int
,	O
np	pointer
-	O
dn	long
+	O
1	int
,	O
dp	pointer
-	O
dn	long
,	O
dn	long
)	O
)	O
;	O
n2	long
=	O
np	pointer
[	O
0	int
]	O
;	O
n1	long
=	O
np	pointer
[	O
-	O
1	int
]	O
;	O
n0	long
=	O
np	pointer
[	O
-	O
2	int
]	O
;	O
d1	long
=	O
dp	pointer
[	O
-	O
1	int
]	O
;	O
d0	long
=	O
dp	pointer
[	O
-	O
2	int
]	O
;	O
ASSERT	O
(	O
n2	long
<	O
d1	long
||	O
(	O
n2	long
==	O
d1	long
&&	O
n1	long
<=	O
d0	long
)	O
)	O
;	O
if	O
(	O
UNLIKELY	O
(	O
n2	long
==	O
d1	long
)	O
&&	O
n1	long
==	O
d0	long
)	O
{	O
q	int
=	O
GMP_NUMB_MASK	O
;	O
cy	long
=	O
mpn_submul_1	O
(	O
np	pointer
-	O
dn	long
,	O
dp	pointer
-	O
dn	long
,	O
dn	long
,	O
q	int
)	O
;	O
ASSERT	O
(	O
cy	long
==	O
n2	long
)	O
;	O
}	O
else	O
{	O
udiv_qr_3by2	O
(	O
q	int
,	O
n1	long
,	O
n0	long
,	O
n2	long
,	O
n1	long
,	O
n0	long
,	O
d1	long
,	O
d0	long
,	O
dinv	pointer
->	O
inv32	long
)	O
;	O
if	O
(	O
dn	long
>	O
2	int
)	O
{	O
mp_limb_t	long
cy	long
,	O
cy1	long
;	O
cy	long
=	O
mpn_submul_1	O
(	O
np	pointer
-	O
dn	long
,	O
dp	pointer
-	O
dn	long
,	O
dn	long
-	O
2	int
,	O
q	int
)	O
;	O
cy1	long
=	O
n0	long
<	O
cy	long
;	O
n0	long
=	O
(	O
n0	long
-	O
cy	long
)	O
&	O
GMP_NUMB_MASK	O
;	O
cy	long
=	O
n1	long
<	O
cy1	long
;	O
n1	long
=	O
(	O
n1	long
-	O
cy1	long
)	O
&	O
GMP_NUMB_MASK	O
;	O
np	pointer
[	O
-	O
2	int
]	O
=	O
n0	long
;	O
if	O
(	O
UNLIKELY	O
(	O
cy	long
!=	O
0	int
)	O
)	O
{	O
n1	long
+=	O
d1	long
+	O
mpn_add_n	O
(	O
np	pointer
-	O
dn	long
,	O
np	pointer
-	O
dn	long
,	O
dp	pointer
-	O
dn	long
,	O
dn	long
-	O
1	int
)	O
;	O
qh	long
-=	O
(	O
q	int
==	O
0	int
)	O
;	O
q	int
=	O
(	O
q	int
-	O
1	int
)	O
&	O
GMP_NUMB_MASK	O
;	O
}	O
}	O
else	O
np	pointer
[	O
-	O
2	int
]	O
=	O
n0	long
;	O
np	pointer
[	O
-	O
1	int
]	O
=	O
n1	long
;	O
}	O
qp	pointer
[	O
0	int
]	O
=	O
q	int
;	O
}	O
else	O
{	O
if	O
(	O
qn	long
==	O
2	int
)	O
qh	long
=	O
mpn_divrem_2	O
(	O
qp	pointer
,	O
0L	int
,	O
np	pointer
-	O
2	int
,	O
4	int
,	O
dp	pointer
-	O
2	int
)	O
;	O
else	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
qn	long
,	O
DC_DIV_QR_THRESHOLD	int
)	O
)	O
qh	long
=	O
mpn_sbpi1_div_qr	O
(	O
qp	pointer
,	O
np	pointer
-	O
qn	long
,	O
2	int
*	O
qn	long
,	O
dp	pointer
-	O
qn	long
,	O
qn	long
,	O
dinv	pointer
->	O
inv32	long
)	O
;	O
else	O
qh	long
=	O
mpn_dcpi1_div_qr_n	O
(	O
qp	pointer
,	O
np	pointer
-	O
qn	long
,	O
dp	pointer
-	O
qn	long
,	O
qn	long
,	O
dinv	pointer
,	O
tp	pointer
)	O
;	O
if	O
(	O
qn	long
!=	O
dn	long
)	O
{	O
if	O
(	O
qn	long
>	O
dn	long
-	O
qn	long
)	O
mpn_mul	O
(	O
tp	pointer
,	O
qp	pointer
,	O
qn	long
,	O
dp	pointer
-	O
dn	long
,	O
dn	long
-	O
qn	long
)	O
;	O
else	O
mpn_mul	O
(	O
tp	pointer
,	O
dp	pointer
-	O
dn	long
,	O
dn	long
-	O
qn	long
,	O
qp	pointer
,	O
qn	long
)	O
;	O
cy	long
=	O
mpn_sub_n	O
(	O
np	pointer
-	O
dn	long
,	O
np	pointer
-	O
dn	long
,	O
tp	pointer
,	O
dn	long
)	O
;	O
if	O
(	O
qh	long
!=	O
0	int
)	O
cy	long
+=	O
mpn_sub_n	O
(	O
np	pointer
-	O
dn	long
+	O
qn	long
,	O
np	pointer
-	O
dn	long
+	O
qn	long
,	O
dp	pointer
-	O
dn	long
,	O
dn	long
-	O
qn	long
)	O
;	O
while	O
(	O
cy	long
!=	O
0	int
)	O
{	O
qh	long
-=	O
mpn_sub_1	O
(	O
qp	pointer
,	O
qp	pointer
,	O
qn	long
,	O
1	int
)	O
;	O
cy	long
-=	O
mpn_add_n	O
(	O
np	pointer
-	O
dn	long
,	O
np	pointer
-	O
dn	long
,	O
dp	pointer
-	O
dn	long
,	O
dn	long
)	O
;	O
}	O
}	O
}	O
qn	long
=	O
nn	long
-	O
dn	long
-	O
qn	long
+	O
1	int
;	O
while	O
(	O
qn	long
>	O
dn	long
)	O
{	O
qp	pointer
-=	O
dn	long
;	O
np	pointer
-=	O
dn	long
;	O
mpn_dcpi1_div_qr_n	O
(	O
qp	pointer
,	O
np	pointer
-	O
dn	long
,	O
dp	pointer
-	O
dn	long
,	O
dn	long
,	O
dinv	pointer
,	O
tp	pointer
)	O
;	O
qn	long
-=	O
dn	long
;	O
}	O
qn	long
--	O
;	O
qp	pointer
-=	O
qn	long
;	O
np	pointer
-=	O
dn	long
;	O
qsave	long
=	O
qp	pointer
[	O
qn	long
]	O
;	O
mpn_dcpi1_divappr_q_n	O
(	O
qp	pointer
,	O
np	pointer
-	O
dn	long
,	O
dp	pointer
-	O
dn	long
,	O
dn	long
,	O
dinv	pointer
,	O
tp	pointer
)	O
;	O
MPN_COPY_INCR	O
(	O
qp	pointer
,	O
qp	pointer
+	O
1	int
,	O
qn	long
)	O
;	O
qp	pointer
[	O
qn	long
]	O
=	O
qsave	long
;	O
}	O
else	O
{	O
mp_ptr	pointer
q2p	pointer
;	O
qp	pointer
-=	O
qn	long
;	O
np	pointer
-=	O
qn	long
;	O
q2p	pointer
=	O
TMP_SALLOC_LIMBS	O
(	O
qn	long
+	O
1	int
)	O
;	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
qn	long
,	O
DC_DIVAPPR_Q_THRESHOLD	int
)	O
)	O
{	O
qh	long
=	O
mpn_sbpi1_divappr_q	O
(	O
q2p	pointer
,	O
np	pointer
-	O
qn	long
-	O
2	int
,	O
2	int
*	O
(	O
qn	long
+	O
1	int
)	O
,	O
dp	pointer
-	O
(	O
qn	long
+	O
1	int
)	O
,	O
qn	long
+	O
1	int
,	O
dinv	pointer
->	O
inv32	long
)	O
;	O
}	O
else	O
{	O
tp	pointer
=	O
TMP_SALLOC_LIMBS	O
(	O
qn	long
+	O
1	int
)	O
;	O
qh	long
=	O
mpn_dcpi1_divappr_q_n	O
(	O
q2p	pointer
,	O
np	pointer
-	O
qn	long
-	O
2	int
,	O
dp	pointer
-	O
(	O
qn	long
+	O
1	int
)	O
,	O
qn	long
+	O
1	int
,	O
dinv	pointer
,	O
tp	pointer
)	O
;	O
}	O
MPN_COPY	O
(	O
qp	pointer
,	O
q2p	pointer
+	O
1	int
,	O
qn	long
)	O
;	O
}	O
TMP_FREE	O
;	O
return	O
qh	long
;	O
}	O
