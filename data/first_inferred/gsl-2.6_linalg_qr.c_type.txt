int	O
gsl_linalg_QR_decomp	function
(	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_vector	struct
*	O
tau	double
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
tau	double
->	O
size	long
!=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"size of tau must be MIN(M,N)"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
;	O
i	long
++	O
)	O
{	O
gsl_vector_view	struct
c	pointer
=	O
gsl_matrix_subcolumn	function
(	O
A	pointer
,	O
i	long
,	O
i	long
,	O
M	int
-	O
i	long
)	O
;	O
double	O
tau_i	double
=	O
gsl_linalg_householder_transform	function
(	O
&	O
(	O
c	pointer
.	O
vector	struct
)	O
)	O
;	O
gsl_vector_set	function
(	O
tau	double
,	O
i	long
,	O
tau_i	double
)	O
;	O
if	O
(	O
i	long
+	O
1	int
<	O
N	int
)	O
{	O
gsl_matrix_view	struct
m	pointer
=	O
gsl_matrix_submatrix	function
(	O
A	pointer
,	O
i	long
,	O
i	long
+	O
1	int
,	O
M	int
-	O
i	long
,	O
N	int
-	O
(	O
i	long
+	O
1	int
)	O
)	O
;	O
gsl_linalg_householder_hm	function
(	O
tau_i	double
,	O
&	O
(	O
c	pointer
.	O
vector	struct
)	O
,	O
&	O
(	O
m	pointer
.	O
matrix	struct
)	O
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_QR_solve	function
(	O
const	O
gsl_matrix	struct
*	O
QR	pointer
,	O
const	O
gsl_vector	struct
*	O
tau	double
,	O
const	O
gsl_vector	struct
*	O
b	pointer
,	O
gsl_vector	struct
*	O
x	long double
)	O
{	O
if	O
(	O
QR	pointer
->	O
size1	long
!=	O
QR	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"QR matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
QR	pointer
->	O
size1	long
!=	O
b	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match b size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
QR	pointer
->	O
size2	long
!=	O
x	long double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_vector_memcpy	function
(	O
x	long double
,	O
b	pointer
)	O
;	O
gsl_linalg_QR_svx	function
(	O
QR	pointer
,	O
tau	double
,	O
x	long double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_QR_svx	function
(	O
const	O
gsl_matrix	struct
*	O
QR	pointer
,	O
const	O
gsl_vector	struct
*	O
tau	double
,	O
gsl_vector	struct
*	O
x	long double
)	O
{	O
if	O
(	O
QR	pointer
->	O
size1	long
!=	O
QR	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"QR matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
QR	pointer
->	O
size1	long
!=	O
x	long double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match x/rhs size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_linalg_QR_QTvec	function
(	O
QR	pointer
,	O
tau	double
,	O
x	long double
)	O
;	O
gsl_blas_dtrsv	function
(	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
QR	pointer
,	O
x	long double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_QR_lssolve	function
(	O
const	O
gsl_matrix	struct
*	O
QR	pointer
,	O
const	O
gsl_vector	struct
*	O
tau	double
,	O
const	O
gsl_vector	struct
*	O
b	pointer
,	O
gsl_vector	struct
*	O
x	long double
,	O
gsl_vector	struct
*	O
residual	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
QR	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
QR	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
<	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"QR matrix must have M>=N"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
M	int
!=	O
b	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match b size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
x	long double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
M	int
!=	O
residual	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match residual size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_matrix_const_view	struct
R	pointer
=	O
gsl_matrix_const_submatrix	function
(	O
QR	pointer
,	O
0	int
,	O
0	int
,	O
N	int
,	O
N	int
)	O
;	O
gsl_vector_view	struct
c	pointer
=	O
gsl_vector_subvector	function
(	O
residual	pointer
,	O
0	int
,	O
N	int
)	O
;	O
gsl_vector_memcpy	function
(	O
residual	pointer
,	O
b	pointer
)	O
;	O
gsl_linalg_QR_QTvec	function
(	O
QR	pointer
,	O
tau	double
,	O
residual	pointer
)	O
;	O
gsl_vector_memcpy	function
(	O
x	long double
,	O
&	O
(	O
c	pointer
.	O
vector	struct
)	O
)	O
;	O
gsl_blas_dtrsv	function
(	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
&	O
(	O
R	pointer
.	O
matrix	struct
)	O
,	O
x	long double
)	O
;	O
gsl_vector_set_zero	function
(	O
&	O
(	O
c	pointer
.	O
vector	struct
)	O
)	O
;	O
gsl_linalg_QR_Qvec	function
(	O
QR	pointer
,	O
tau	double
,	O
residual	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_QR_Rsolve	function
(	O
const	O
gsl_matrix	struct
*	O
QR	pointer
,	O
const	O
gsl_vector	struct
*	O
b	pointer
,	O
gsl_vector	struct
*	O
x	long double
)	O
{	O
if	O
(	O
QR	pointer
->	O
size1	long
!=	O
QR	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"QR matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
QR	pointer
->	O
size1	long
!=	O
b	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match b size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
QR	pointer
->	O
size2	long
!=	O
x	long double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match x size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_vector_memcpy	function
(	O
x	long double
,	O
b	pointer
)	O
;	O
gsl_blas_dtrsv	function
(	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
QR	pointer
,	O
x	long double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_QR_Rsvx	function
(	O
const	O
gsl_matrix	struct
*	O
QR	pointer
,	O
gsl_vector	struct
*	O
x	long double
)	O
{	O
if	O
(	O
QR	pointer
->	O
size1	long
!=	O
QR	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"QR matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
QR	pointer
->	O
size1	long
!=	O
x	long double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match rhs size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_blas_dtrsv	function
(	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
QR	pointer
,	O
x	long double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_R_solve	function
(	O
const	O
gsl_matrix	struct
*	O
R	pointer
,	O
const	O
gsl_vector	struct
*	O
b	pointer
,	O
gsl_vector	struct
*	O
x	long double
)	O
{	O
if	O
(	O
R	pointer
->	O
size1	long
!=	O
R	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"R matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
R	pointer
->	O
size1	long
!=	O
b	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match b size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
R	pointer
->	O
size2	long
!=	O
x	long double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_vector_memcpy	function
(	O
x	long double
,	O
b	pointer
)	O
;	O
gsl_blas_dtrsv	function
(	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
R	pointer
,	O
x	long double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_R_svx	function
(	O
const	O
gsl_matrix	struct
*	O
R	pointer
,	O
gsl_vector	struct
*	O
x	long double
)	O
{	O
if	O
(	O
R	pointer
->	O
size1	long
!=	O
R	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"R matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
R	pointer
->	O
size2	long
!=	O
x	long double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_blas_dtrsv	function
(	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
R	pointer
,	O
x	long double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_QR_QTvec	function
(	O
const	O
gsl_matrix	struct
*	O
QR	pointer
,	O
const	O
gsl_vector	struct
*	O
tau	double
,	O
gsl_vector	struct
*	O
v	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
QR	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
QR	pointer
->	O
size2	long
;	O
if	O
(	O
tau	double
->	O
size	long
!=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"size of tau must be MIN(M,N)"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
v	pointer
->	O
size	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"vector size must be M"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
;	O
i	long
++	O
)	O
{	O
gsl_vector_const_view	struct
c	pointer
=	O
gsl_matrix_const_column	function
(	O
QR	pointer
,	O
i	long
)	O
;	O
gsl_vector_const_view	struct
h	pointer
=	O
gsl_vector_const_subvector	function
(	O
&	O
(	O
c	pointer
.	O
vector	struct
)	O
,	O
i	long
,	O
M	int
-	O
i	long
)	O
;	O
gsl_vector_view	struct
w	pointer
=	O
gsl_vector_subvector	function
(	O
v	pointer
,	O
i	long
,	O
M	int
-	O
i	long
)	O
;	O
double	O
ti	double
=	O
gsl_vector_get	function
(	O
tau	double
,	O
i	long
)	O
;	O
gsl_linalg_householder_hv	function
(	O
ti	double
,	O
&	O
(	O
h	pointer
.	O
vector	struct
)	O
,	O
&	O
(	O
w	pointer
.	O
vector	struct
)	O
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_QR_Qvec	function
(	O
const	O
gsl_matrix	struct
*	O
QR	pointer
,	O
const	O
gsl_vector	struct
*	O
tau	double
,	O
gsl_vector	struct
*	O
v	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
QR	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
QR	pointer
->	O
size2	long
;	O
if	O
(	O
tau	double
->	O
size	long
!=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"size of tau must be MIN(M,N)"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
v	pointer
->	O
size	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"vector size must be M"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
;	O
i	long
--	O
>	O
0	int
;	O
)	O
{	O
gsl_vector_const_view	struct
c	pointer
=	O
gsl_matrix_const_column	function
(	O
QR	pointer
,	O
i	long
)	O
;	O
gsl_vector_const_view	struct
h	pointer
=	O
gsl_vector_const_subvector	function
(	O
&	O
(	O
c	pointer
.	O
vector	struct
)	O
,	O
i	long
,	O
M	int
-	O
i	long
)	O
;	O
gsl_vector_view	struct
w	pointer
=	O
gsl_vector_subvector	function
(	O
v	pointer
,	O
i	long
,	O
M	int
-	O
i	long
)	O
;	O
double	O
ti	double
=	O
gsl_vector_get	function
(	O
tau	double
,	O
i	long
)	O
;	O
gsl_linalg_householder_hv	function
(	O
ti	double
,	O
&	O
h	pointer
.	O
vector	struct
,	O
&	O
w	pointer
.	O
vector	struct
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_QR_QTmat	function
(	O
const	O
gsl_matrix	struct
*	O
QR	pointer
,	O
const	O
gsl_vector	struct
*	O
tau	double
,	O
gsl_matrix	struct
*	O
A	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
QR	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
QR	pointer
->	O
size2	long
;	O
if	O
(	O
tau	double
->	O
size	long
!=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"size of tau must be MIN(M,N)"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
A	pointer
->	O
size1	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must have M rows"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
;	O
i	long
++	O
)	O
{	O
gsl_vector_const_view	struct
c	pointer
=	O
gsl_matrix_const_column	function
(	O
QR	pointer
,	O
i	long
)	O
;	O
gsl_vector_const_view	struct
h	pointer
=	O
gsl_vector_const_subvector	function
(	O
&	O
(	O
c	pointer
.	O
vector	struct
)	O
,	O
i	long
,	O
M	int
-	O
i	long
)	O
;	O
gsl_matrix_view	struct
m	pointer
=	O
gsl_matrix_submatrix	function
(	O
A	pointer
,	O
i	long
,	O
0	int
,	O
M	int
-	O
i	long
,	O
A	pointer
->	O
size2	long
)	O
;	O
double	O
ti	double
=	O
gsl_vector_get	function
(	O
tau	double
,	O
i	long
)	O
;	O
gsl_linalg_householder_hm	function
(	O
ti	double
,	O
&	O
(	O
h	pointer
.	O
vector	struct
)	O
,	O
&	O
(	O
m	pointer
.	O
matrix	struct
)	O
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_QR_matQ	function
(	O
const	O
gsl_matrix	struct
*	O
QR	pointer
,	O
const	O
gsl_vector	struct
*	O
tau	double
,	O
gsl_matrix	struct
*	O
A	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
QR	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
QR	pointer
->	O
size2	long
;	O
if	O
(	O
tau	double
->	O
size	long
!=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"size of tau must be MIN(M,N)"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
A	pointer
->	O
size2	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must have M columns"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
;	O
i	long
++	O
)	O
{	O
gsl_vector_const_view	struct
c	pointer
=	O
gsl_matrix_const_column	function
(	O
QR	pointer
,	O
i	long
)	O
;	O
gsl_vector_const_view	struct
h	pointer
=	O
gsl_vector_const_subvector	function
(	O
&	O
(	O
c	pointer
.	O
vector	struct
)	O
,	O
i	long
,	O
M	int
-	O
i	long
)	O
;	O
gsl_matrix_view	struct
m	pointer
=	O
gsl_matrix_submatrix	function
(	O
A	pointer
,	O
0	int
,	O
i	long
,	O
A	pointer
->	O
size1	long
,	O
M	int
-	O
i	long
)	O
;	O
double	O
ti	double
=	O
gsl_vector_get	function
(	O
tau	double
,	O
i	long
)	O
;	O
gsl_linalg_householder_mh	function
(	O
ti	double
,	O
&	O
(	O
h	pointer
.	O
vector	struct
)	O
,	O
&	O
(	O
m	pointer
.	O
matrix	struct
)	O
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_QR_unpack	function
(	O
const	O
gsl_matrix	struct
*	O
QR	pointer
,	O
const	O
gsl_vector	struct
*	O
tau	double
,	O
gsl_matrix	struct
*	O
Q	pointer
,	O
gsl_matrix	struct
*	O
R	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
QR	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
QR	pointer
->	O
size2	long
;	O
if	O
(	O
Q	pointer
->	O
size1	long
!=	O
M	int
||	O
Q	pointer
->	O
size2	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"Q matrix must be M x M"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
R	pointer
->	O
size1	long
!=	O
M	int
||	O
R	pointer
->	O
size2	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"R matrix must be M x N"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
tau	double
->	O
size	long
!=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"size of tau must be MIN(M,N)"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
,	O
j	long
;	O
gsl_matrix_set_identity	function
(	O
Q	pointer
)	O
;	O
for	O
(	O
i	long
=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
;	O
i	long
--	O
>	O
0	int
;	O
)	O
{	O
gsl_vector_const_view	struct
h	pointer
=	O
gsl_matrix_const_subcolumn	function
(	O
QR	pointer
,	O
i	long
,	O
i	long
,	O
M	int
-	O
i	long
)	O
;	O
gsl_matrix_view	struct
m	pointer
=	O
gsl_matrix_submatrix	function
(	O
Q	pointer
,	O
i	long
,	O
i	long
,	O
M	int
-	O
i	long
,	O
M	int
-	O
i	long
)	O
;	O
double	O
ti	double
=	O
gsl_vector_get	function
(	O
tau	double
,	O
i	long
)	O
;	O
gsl_linalg_householder_hm	function
(	O
ti	double
,	O
&	O
h	pointer
.	O
vector	struct
,	O
&	O
m	pointer
.	O
matrix	struct
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
M	int
;	O
i	long
++	O
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
i	long
&&	O
j	long
<	O
N	int
;	O
j	long
++	O
)	O
gsl_matrix_set	function
(	O
R	pointer
,	O
i	long
,	O
j	long
,	O
0.0	int
)	O
;	O
for	O
(	O
j	long
=	O
i	long
;	O
j	long
<	O
N	int
;	O
j	long
++	O
)	O
gsl_matrix_set	function
(	O
R	pointer
,	O
i	long
,	O
j	long
,	O
gsl_matrix_get	function
(	O
QR	pointer
,	O
i	long
,	O
j	long
)	O
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_QR_update	function
(	O
gsl_matrix	struct
*	O
Q	pointer
,	O
gsl_matrix	struct
*	O
R	pointer
,	O
gsl_vector	struct
*	O
w	pointer
,	O
const	O
gsl_vector	struct
*	O
v	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
R	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
R	pointer
->	O
size2	long
;	O
if	O
(	O
Q	pointer
->	O
size1	long
!=	O
M	int
||	O
Q	pointer
->	O
size2	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"Q matrix must be M x M if R is M x N"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
w	pointer
->	O
size	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"w must be length M if R is M x N"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
v	pointer
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"v must be length N if R is M x N"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
j	long
,	O
k	long
;	O
double	O
w0	double
;	O
for	O
(	O
k	long
=	O
M	int
-	O
1	int
;	O
k	long
>	O
0	int
;	O
k	long
--	O
)	O
{	O
double	O
c	pointer
,	O
s	pointer
;	O
double	O
wk	double
=	O
gsl_vector_get	function
(	O
w	pointer
,	O
k	long
)	O
;	O
double	O
wkm1	double
=	O
gsl_vector_get	function
(	O
w	pointer
,	O
k	long
-	O
1	int
)	O
;	O
gsl_linalg_givens	function
(	O
wkm1	double
,	O
wk	double
,	O
&	O
c	pointer
,	O
&	O
s	pointer
)	O
;	O
gsl_linalg_givens_gv	function
(	O
w	pointer
,	O
k	long
-	O
1	int
,	O
k	long
,	O
c	pointer
,	O
s	pointer
)	O
;	O
apply_givens_qr	function
(	O
M	int
,	O
N	int
,	O
Q	pointer
,	O
R	pointer
,	O
k	long
-	O
1	int
,	O
k	long
,	O
c	pointer
,	O
s	pointer
)	O
;	O
}	O
w0	double
=	O
gsl_vector_get	function
(	O
w	pointer
,	O
0	int
)	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
N	int
;	O
j	long
++	O
)	O
{	O
double	O
r0j	double
=	O
gsl_matrix_get	function
(	O
R	pointer
,	O
0	int
,	O
j	long
)	O
;	O
double	O
vj	double
=	O
gsl_vector_get	function
(	O
v	pointer
,	O
j	long
)	O
;	O
gsl_matrix_set	function
(	O
R	pointer
,	O
0	int
,	O
j	long
,	O
r0j	double
+	O
w0	double
*	O
vj	double
)	O
;	O
}	O
for	O
(	O
k	long
=	O
1	int
;	O
k	long
<	O
GSL_MIN	O
(	O
M	int
,	O
N	int
+	O
1	int
)	O
;	O
k	long
++	O
)	O
{	O
double	O
c	pointer
,	O
s	pointer
;	O
double	O
diag	pointer
=	O
gsl_matrix_get	function
(	O
R	pointer
,	O
k	long
-	O
1	int
,	O
k	long
-	O
1	int
)	O
;	O
double	O
offdiag	pointer
=	O
gsl_matrix_get	function
(	O
R	pointer
,	O
k	long
,	O
k	long
-	O
1	int
)	O
;	O
gsl_linalg_givens	function
(	O
diag	pointer
,	O
offdiag	pointer
,	O
&	O
c	pointer
,	O
&	O
s	pointer
)	O
;	O
apply_givens_qr	function
(	O
M	int
,	O
N	int
,	O
Q	pointer
,	O
R	pointer
,	O
k	long
-	O
1	int
,	O
k	long
,	O
c	pointer
,	O
s	pointer
)	O
;	O
gsl_matrix_set	function
(	O
R	pointer
,	O
k	long
,	O
k	long
-	O
1	int
,	O
0.0	int
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_QR_QRsolve	function
(	O
gsl_matrix	struct
*	O
Q	pointer
,	O
gsl_matrix	struct
*	O
R	pointer
,	O
const	O
gsl_vector	struct
*	O
b	pointer
,	O
gsl_vector	struct
*	O
x	long double
)	O
{	O
const	O
size_t	long
M	int
=	O
R	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
R	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
return	O
GSL_ENOTSQR	int
;	O
}	O
else	O
if	O
(	O
Q	pointer
->	O
size1	long
!=	O
M	int
||	O
b	pointer
->	O
size	long
!=	O
M	int
||	O
x	long double
->	O
size	long
!=	O
M	int
)	O
{	O
return	O
GSL_EBADLEN	int
;	O
}	O
else	O
{	O
gsl_blas_dgemv	function
(	O
CblasTrans	int
,	O
1.0	int
,	O
Q	pointer
,	O
b	pointer
,	O
0.0	int
,	O
x	long double
)	O
;	O
gsl_blas_dtrsv	function
(	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
R	pointer
,	O
x	long double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_QR_rcond	function
(	O
const	O
gsl_matrix	struct
*	O
QR	pointer
,	O
double	O
*	O
rcond	pointer
,	O
gsl_vector	struct
*	O
work	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
QR	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
QR	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
<	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"M must be >= N"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
work	pointer
->	O
size	long
!=	O
3	int
*	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"work vector must have length 3*N"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_matrix_const_view	struct
R	pointer
=	O
gsl_matrix_const_submatrix	function
(	O
QR	pointer
,	O
0	int
,	O
0	int
,	O
N	int
,	O
N	int
)	O
;	O
int	O
status	int
;	O
status	int
=	O
gsl_linalg_tri_rcond	function
(	O
CblasUpper	int
,	O
&	O
R	pointer
.	O
matrix	struct
,	O
rcond	pointer
,	O
work	pointer
)	O
;	O
return	O
status	int
;	O
}	O
}	O
