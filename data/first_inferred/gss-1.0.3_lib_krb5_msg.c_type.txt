OM_uint32	int
gss_krb5_get_mic	function
(	O
OM_uint32	int
*	O
minor_status	pointer
,	O
const	O
gss_ctx_id_t	pointer
context_handle	pointer
,	O
gss_qop_t	int
qop_req	int
,	O
const	O
gss_buffer_t	pointer
message_buffer	pointer
,	O
gss_buffer_t	pointer
message_token	pointer
)	O
{	O
return	O
GSS_S_UNAVAILABLE	O
;	O
}	O
OM_uint32	int
gss_krb5_verify_mic	function
(	O
OM_uint32	int
*	O
minor_status	pointer
,	O
const	O
gss_ctx_id_t	pointer
context_handle	pointer
,	O
const	O
gss_buffer_t	pointer
message_buffer	pointer
,	O
const	O
gss_buffer_t	pointer
token_buffer	pointer
,	O
gss_qop_t	int
*	O
qop_state	pointer
)	O
{	O
return	O
GSS_S_UNAVAILABLE	O
;	O
}	O
OM_uint32	int
gss_krb5_wrap	function
(	O
OM_uint32	int
*	O
minor_status	pointer
,	O
const	O
gss_ctx_id_t	pointer
context_handle	pointer
,	O
int	O
conf_req_flag	int
,	O
gss_qop_t	int
qop_req	int
,	O
const	O
gss_buffer_t	pointer
input_message_buffer	pointer
,	O
int	O
*	O
conf_state	pointer
,	O
gss_buffer_t	pointer
output_message_buffer	pointer
)	O
{	O
_gss_krb5_ctx_t	pointer
k5	pointer
=	O
context_handle	pointer
->	O
krb5	O
;	O
size_t	long
padlength	long
;	O
gss_buffer_desc	struct
data	struct
;	O
char	O
*	O
p	pointer
;	O
size_t	long
tmplen	long
;	O
int	O
rc	int
;	O
switch	O
(	O
shishi_key_type	function
(	O
k5	pointer
->	O
key	pointer
)	O
)	O
{	O
case	O
SHISHI_DES_CBC_MD5	O
:	O
{	O
char	O
header	array
[	O
8	int
]	O
;	O
char	O
seqno	array
[	O
8	int
]	O
;	O
char	O
*	O
eseqno	pointer
;	O
char	O
*	O
cksum	pointer
;	O
char	O
confounder	array
[	O
8	int
]	O
;	O
padlength	long
=	O
8	int
-	O
input_message_buffer	pointer
->	O
length	int
%	O
8	int
;	O
data	struct
.	O
length	int
=	O
4	int
*	O
8	int
+	O
input_message_buffer	pointer
->	O
length	int
+	O
padlength	long
;	O
p	pointer
=	O
malloc	function
(	O
data	struct
.	O
length	int
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
memcpy	function
(	O
header	array
,	O
TOK_WRAP	pointer
,	O
2	int
)	O
;	O
memcpy	function
(	O
header	array
+	O
2	int
,	O
"\x00\x00"	pointer
,	O
2	int
)	O
;	O
memcpy	function
(	O
header	array
+	O
4	int
,	O
"\xFF\xFF"	pointer
,	O
2	int
)	O
;	O
memcpy	function
(	O
header	array
+	O
6	int
,	O
"\xFF\xFF"	pointer
,	O
2	int
)	O
;	O
rc	int
=	O
shishi_randomize	function
(	O
k5	pointer
->	O
sh	pointer
,	O
0	int
,	O
confounder	array
,	O
8	int
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
return	O
GSS_S_FAILURE	O
;	O
memcpy	function
(	O
p	pointer
,	O
header	array
,	O
8	int
)	O
;	O
memcpy	function
(	O
p	pointer
+	O
8	int
,	O
confounder	array
,	O
8	int
)	O
;	O
memcpy	function
(	O
p	pointer
+	O
16	int
,	O
input_message_buffer	pointer
->	O
value	pointer
,	O
input_message_buffer	pointer
->	O
length	int
)	O
;	O
memset	function
(	O
p	pointer
+	O
16	int
+	O
input_message_buffer	pointer
->	O
length	int
,	O
(	O
int	O
)	O
padlength	long
,	O
padlength	long
)	O
;	O
rc	int
=	O
shishi_checksum	function
(	O
k5	pointer
->	O
sh	pointer
,	O
k5	pointer
->	O
key	pointer
,	O
0	int
,	O
SHISHI_RSA_MD5_DES_GSS	O
,	O
p	pointer
,	O
16	int
+	O
input_message_buffer	pointer
->	O
length	int
+	O
padlength	long
,	O
&	O
cksum	pointer
,	O
&	O
tmplen	long
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
||	O
tmplen	long
!=	O
8	int
)	O
return	O
GSS_S_FAILURE	O
;	O
if	O
(	O
k5	pointer
->	O
acceptor	int
)	O
{	O
seqno	array
[	O
0	int
]	O
=	O
k5	pointer
->	O
acceptseqnr	int
&	O
0xFF	int
;	O
seqno	array
[	O
1	int
]	O
=	O
k5	pointer
->	O
acceptseqnr	int
>>	O
8	int
&	O
0xFF	int
;	O
seqno	array
[	O
2	int
]	O
=	O
k5	pointer
->	O
acceptseqnr	int
>>	O
16	int
&	O
0xFF	int
;	O
seqno	array
[	O
3	int
]	O
=	O
k5	pointer
->	O
acceptseqnr	int
>>	O
24	int
&	O
0xFF	int
;	O
memset	function
(	O
seqno	array
+	O
4	int
,	O
0xFF	int
,	O
4	int
)	O
;	O
}	O
else	O
{	O
seqno	array
[	O
0	int
]	O
=	O
k5	pointer
->	O
initseqnr	int
&	O
0xFF	int
;	O
seqno	array
[	O
1	int
]	O
=	O
k5	pointer
->	O
initseqnr	int
>>	O
8	int
&	O
0xFF	int
;	O
seqno	array
[	O
2	int
]	O
=	O
k5	pointer
->	O
initseqnr	int
>>	O
16	int
&	O
0xFF	int
;	O
seqno	array
[	O
3	int
]	O
=	O
k5	pointer
->	O
initseqnr	int
>>	O
24	int
&	O
0xFF	int
;	O
memset	function
(	O
seqno	array
+	O
4	int
,	O
0	int
,	O
4	int
)	O
;	O
}	O
rc	int
=	O
shishi_encrypt_iv_etype	function
(	O
k5	pointer
->	O
sh	pointer
,	O
k5	pointer
->	O
key	pointer
,	O
0	int
,	O
SHISHI_DES_CBC_NONE	O
,	O
cksum	pointer
,	O
8	int
,	O
seqno	array
,	O
8	int
,	O
&	O
eseqno	pointer
,	O
&	O
tmplen	long
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
||	O
tmplen	long
!=	O
8	int
)	O
return	O
GSS_S_FAILURE	O
;	O
memcpy	function
(	O
p	pointer
,	O
header	array
,	O
8	int
)	O
;	O
memcpy	function
(	O
p	pointer
+	O
8	int
,	O
eseqno	pointer
,	O
8	int
)	O
;	O
free	function
(	O
eseqno	pointer
)	O
;	O
memcpy	function
(	O
p	pointer
+	O
16	int
,	O
cksum	pointer
,	O
8	int
)	O
;	O
free	function
(	O
cksum	pointer
)	O
;	O
memcpy	function
(	O
p	pointer
+	O
24	int
,	O
confounder	array
,	O
8	int
)	O
;	O
memcpy	function
(	O
p	pointer
+	O
32	int
,	O
input_message_buffer	pointer
->	O
value	pointer
,	O
input_message_buffer	pointer
->	O
length	int
)	O
;	O
memset	function
(	O
p	pointer
+	O
32	int
+	O
input_message_buffer	pointer
->	O
length	int
,	O
(	O
int	O
)	O
padlength	long
,	O
padlength	long
)	O
;	O
data	struct
.	O
value	pointer
=	O
p	pointer
;	O
rc	int
=	O
gss_encapsulate_token	function
(	O
&	O
data	struct
,	O
GSS_KRB5	O
,	O
output_message_buffer	pointer
)	O
;	O
if	O
(	O
rc	int
!=	O
GSS_S_COMPLETE	int
)	O
return	O
GSS_S_FAILURE	O
;	O
if	O
(	O
k5	pointer
->	O
acceptor	int
)	O
k5	pointer
->	O
acceptseqnr	int
++	O
;	O
else	O
k5	pointer
->	O
initseqnr	int
++	O
;	O
}	O
break	O
;	O
case	O
SHISHI_DES3_CBC_HMAC_SHA1_KD	O
:	O
{	O
char	O
*	O
tmp	pointer
;	O
padlength	long
=	O
8	int
-	O
input_message_buffer	pointer
->	O
length	int
%	O
8	int
;	O
data	struct
.	O
length	int
=	O
8	int
+	O
8	int
+	O
20	int
+	O
8	int
+	O
input_message_buffer	pointer
->	O
length	int
+	O
padlength	long
;	O
p	pointer
=	O
malloc	function
(	O
data	struct
.	O
length	int
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
memcpy	function
(	O
p	pointer
,	O
TOK_WRAP	pointer
,	O
2	int
)	O
;	O
memcpy	function
(	O
p	pointer
+	O
2	int
,	O
"\x04\x00"	pointer
,	O
2	int
)	O
;	O
memcpy	function
(	O
p	pointer
+	O
4	int
,	O
"\xFF\xFF"	pointer
,	O
2	int
)	O
;	O
memcpy	function
(	O
p	pointer
+	O
6	int
,	O
"\xFF\xFF"	pointer
,	O
2	int
)	O
;	O
rc	int
=	O
shishi_randomize	function
(	O
k5	pointer
->	O
sh	pointer
,	O
0	int
,	O
p	pointer
+	O
8	int
,	O
8	int
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
return	O
GSS_S_FAILURE	O
;	O
memcpy	function
(	O
p	pointer
+	O
16	int
,	O
input_message_buffer	pointer
->	O
value	pointer
,	O
input_message_buffer	pointer
->	O
length	int
)	O
;	O
memset	function
(	O
p	pointer
+	O
16	int
+	O
input_message_buffer	pointer
->	O
length	int
,	O
(	O
int	O
)	O
padlength	long
,	O
padlength	long
)	O
;	O
rc	int
=	O
shishi_checksum	function
(	O
k5	pointer
->	O
sh	pointer
,	O
k5	pointer
->	O
key	pointer
,	O
SHISHI_KEYUSAGE_GSS_R2	O
,	O
SHISHI_HMAC_SHA1_DES3_KD	O
,	O
p	pointer
,	O
16	int
+	O
input_message_buffer	pointer
->	O
length	int
+	O
padlength	long
,	O
&	O
tmp	pointer
,	O
&	O
tmplen	long
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
||	O
tmplen	long
!=	O
20	int
)	O
return	O
GSS_S_FAILURE	O
;	O
memcpy	function
(	O
p	pointer
+	O
16	int
,	O
tmp	pointer
,	O
tmplen	long
)	O
;	O
memcpy	function
(	O
p	pointer
+	O
36	int
,	O
p	pointer
+	O
8	int
,	O
8	int
)	O
;	O
if	O
(	O
k5	pointer
->	O
acceptor	int
)	O
{	O
(	O
p	pointer
+	O
8	int
)	O
[	O
0	int
]	O
=	O
k5	pointer
->	O
acceptseqnr	int
&	O
0xFF	int
;	O
(	O
p	pointer
+	O
8	int
)	O
[	O
1	int
]	O
=	O
k5	pointer
->	O
acceptseqnr	int
>>	O
8	int
&	O
0xFF	int
;	O
(	O
p	pointer
+	O
8	int
)	O
[	O
2	int
]	O
=	O
k5	pointer
->	O
acceptseqnr	int
>>	O
16	int
&	O
0xFF	int
;	O
(	O
p	pointer
+	O
8	int
)	O
[	O
3	int
]	O
=	O
k5	pointer
->	O
acceptseqnr	int
>>	O
24	int
&	O
0xFF	int
;	O
memset	function
(	O
p	pointer
+	O
8	int
+	O
4	int
,	O
0xFF	int
,	O
4	int
)	O
;	O
}	O
else	O
{	O
(	O
p	pointer
+	O
8	int
)	O
[	O
0	int
]	O
=	O
k5	pointer
->	O
initseqnr	int
&	O
0xFF	int
;	O
(	O
p	pointer
+	O
8	int
)	O
[	O
1	int
]	O
=	O
k5	pointer
->	O
initseqnr	int
>>	O
8	int
&	O
0xFF	int
;	O
(	O
p	pointer
+	O
8	int
)	O
[	O
2	int
]	O
=	O
k5	pointer
->	O
initseqnr	int
>>	O
16	int
&	O
0xFF	int
;	O
(	O
p	pointer
+	O
8	int
)	O
[	O
3	int
]	O
=	O
k5	pointer
->	O
initseqnr	int
>>	O
24	int
&	O
0xFF	int
;	O
memset	function
(	O
p	pointer
+	O
8	int
+	O
4	int
,	O
0	int
,	O
4	int
)	O
;	O
}	O
rc	int
=	O
shishi_encrypt_iv_etype	function
(	O
k5	pointer
->	O
sh	pointer
,	O
k5	pointer
->	O
key	pointer
,	O
0	int
,	O
SHISHI_DES3_CBC_NONE	O
,	O
p	pointer
+	O
16	int
,	O
8	int
,	O
p	pointer
+	O
8	int
,	O
8	int
,	O
&	O
tmp	pointer
,	O
&	O
tmplen	long
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
||	O
tmplen	long
!=	O
8	int
)	O
return	O
GSS_S_FAILURE	O
;	O
memcpy	function
(	O
p	pointer
+	O
8	int
,	O
tmp	pointer
,	O
tmplen	long
)	O
;	O
free	function
(	O
tmp	pointer
)	O
;	O
memcpy	function
(	O
p	pointer
+	O
8	int
+	O
8	int
+	O
20	int
+	O
8	int
,	O
input_message_buffer	pointer
->	O
value	pointer
,	O
input_message_buffer	pointer
->	O
length	int
)	O
;	O
memset	function
(	O
p	pointer
+	O
8	int
+	O
8	int
+	O
20	int
+	O
8	int
+	O
input_message_buffer	pointer
->	O
length	int
,	O
(	O
int	O
)	O
padlength	long
,	O
padlength	long
)	O
;	O
data	struct
.	O
value	pointer
=	O
p	pointer
;	O
rc	int
=	O
gss_encapsulate_token	function
(	O
&	O
data	struct
,	O
GSS_KRB5	O
,	O
output_message_buffer	pointer
)	O
;	O
if	O
(	O
rc	int
!=	O
GSS_S_COMPLETE	int
)	O
return	O
GSS_S_FAILURE	O
;	O
if	O
(	O
k5	pointer
->	O
acceptor	int
)	O
k5	pointer
->	O
acceptseqnr	int
++	O
;	O
else	O
k5	pointer
->	O
initseqnr	int
++	O
;	O
break	O
;	O
}	O
default	O
:	O
return	O
GSS_S_FAILURE	O
;	O
}	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
OM_uint32	int
gss_krb5_unwrap	function
(	O
OM_uint32	int
*	O
minor_status	pointer
,	O
const	O
gss_ctx_id_t	pointer
context_handle	pointer
,	O
const	O
gss_buffer_t	pointer
input_message_buffer	pointer
,	O
gss_buffer_t	pointer
output_message_buffer	pointer
,	O
int	O
*	O
conf_state	pointer
,	O
gss_qop_t	int
*	O
qop_state	pointer
)	O
{	O
_gss_krb5_ctx_t	pointer
k5	pointer
=	O
context_handle	pointer
->	O
krb5	O
;	O
gss_buffer_desc	struct
tok	struct
;	O
char	O
*	O
data	struct
;	O
OM_uint32	int
sgn_alg	int
,	O
seal_alg	int
;	O
size_t	long
tmplen	long
;	O
int	O
rc	int
;	O
rc	int
=	O
gss_decapsulate_token	function
(	O
input_message_buffer	pointer
,	O
GSS_KRB5	O
,	O
&	O
tok	struct
)	O
;	O
if	O
(	O
rc	int
!=	O
GSS_S_COMPLETE	int
)	O
return	O
GSS_S_BAD_MIC	O
;	O
if	O
(	O
tok	struct
.	O
length	int
<	O
8	int
)	O
return	O
GSS_S_BAD_MIC	O
;	O
if	O
(	O
memcmp	function
(	O
tok	struct
.	O
value	pointer
,	O
TOK_WRAP	pointer
,	O
TOK_LEN	int
)	O
!=	O
0	int
)	O
return	O
GSS_S_BAD_MIC	O
;	O
data	struct
=	O
tok	struct
.	O
value	pointer
;	O
sgn_alg	int
=	O
data	struct
[	O
2	int
]	O
&	O
0xFF	int
;	O
sgn_alg	int
|=	O
data	struct
[	O
3	int
]	O
<<	O
8	int
&	O
0xFF00	int
;	O
seal_alg	int
=	O
data	struct
[	O
4	int
]	O
&	O
0xFF	int
;	O
seal_alg	int
|=	O
data	struct
[	O
5	int
]	O
<<	O
8	int
&	O
0xFF00	int
;	O
if	O
(	O
conf_state	pointer
!=	O
NULL	O
)	O
*	O
conf_state	pointer
=	O
seal_alg	int
==	O
0xFFFF	int
;	O
if	O
(	O
memcmp	function
(	O
data	struct
+	O
6	int
,	O
"\xFF\xFF"	pointer
,	O
2	int
)	O
!=	O
0	int
)	O
return	O
GSS_S_BAD_MIC	O
;	O
switch	O
(	O
sgn_alg	int
)	O
{	O
case	O
0	int
:	O
{	O
size_t	long
padlen	long
;	O
char	O
*	O
pt	pointer
;	O
char	O
header	array
[	O
8	int
]	O
;	O
char	O
encseqno	array
[	O
8	int
]	O
;	O
char	O
seqno	array
[	O
8	int
]	O
;	O
char	O
cksum	pointer
[	O
8	int
]	O
;	O
char	O
confounder	array
[	O
8	int
]	O
;	O
char	O
*	O
tmp	pointer
;	O
uint32_t	O
seqnr	O
;	O
size_t	long
outlen	pointer
,	O
i	long
;	O
if	O
(	O
tok	struct
.	O
length	int
<	O
5	int
*	O
8	int
)	O
return	O
GSS_S_BAD_MIC	O
;	O
memcpy	function
(	O
header	array
,	O
data	struct
,	O
8	int
)	O
;	O
memcpy	function
(	O
encseqno	array
,	O
data	struct
+	O
8	int
,	O
8	int
)	O
;	O
memcpy	function
(	O
cksum	pointer
,	O
data	struct
+	O
16	int
,	O
8	int
)	O
;	O
memcpy	function
(	O
confounder	array
,	O
data	struct
+	O
24	int
,	O
8	int
)	O
;	O
pt	pointer
=	O
data	struct
+	O
32	int
;	O
rc	int
=	O
shishi_decrypt_iv_etype	function
(	O
k5	pointer
->	O
sh	pointer
,	O
k5	pointer
->	O
key	pointer
,	O
0	int
,	O
SHISHI_DES_CBC_NONE	O
,	O
cksum	pointer
,	O
8	int
,	O
encseqno	array
,	O
8	int
,	O
&	O
tmp	pointer
,	O
&	O
outlen	pointer
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
return	O
GSS_S_FAILURE	O
;	O
if	O
(	O
outlen	pointer
!=	O
8	int
)	O
return	O
GSS_S_BAD_MIC	O
;	O
memcpy	function
(	O
seqno	array
,	O
tmp	pointer
,	O
8	int
)	O
;	O
free	function
(	O
tmp	pointer
)	O
;	O
if	O
(	O
memcmp	function
(	O
seqno	array
+	O
4	int
,	O
k5	pointer
->	O
acceptor	int
?	O
"\x00\x00\x00\x00"	pointer
:	O
"\xFF\xFF\xFF\xFF"	pointer
,	O
4	int
)	O
!=	O
0	int
)	O
return	O
GSS_S_BAD_MIC	O
;	O
seqnr	O
=	O
C2I	O
(	O
seqno	array
)	O
;	O
if	O
(	O
seqnr	O
!=	O
(	O
k5	pointer
->	O
acceptor	int
?	O
k5	pointer
->	O
initseqnr	int
:	O
k5	pointer
->	O
acceptseqnr	int
)	O
)	O
return	O
GSS_S_BAD_MIC	O
;	O
if	O
(	O
k5	pointer
->	O
acceptor	int
)	O
k5	pointer
->	O
initseqnr	int
++	O
;	O
else	O
k5	pointer
->	O
acceptseqnr	int
++	O
;	O
padlen	long
=	O
data	struct
[	O
tok	struct
.	O
length	int
-	O
1	int
]	O
;	O
if	O
(	O
padlen	long
>	O
8	int
)	O
return	O
GSS_S_BAD_MIC	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
padlen	long
;	O
i	long
++	O
)	O
if	O
(	O
data	struct
[	O
tok	struct
.	O
length	int
-	O
i	long
]	O
!=	O
(	O
int	O
)	O
padlen	long
)	O
return	O
GSS_S_BAD_MIC	O
;	O
memcpy	function
(	O
data	struct
+	O
16	int
,	O
header	array
,	O
8	int
)	O
;	O
memcpy	function
(	O
data	struct
+	O
24	int
,	O
confounder	array
,	O
8	int
)	O
;	O
rc	int
=	O
shishi_checksum	function
(	O
k5	pointer
->	O
sh	pointer
,	O
k5	pointer
->	O
key	pointer
,	O
0	int
,	O
SHISHI_RSA_MD5_DES_GSS	O
,	O
data	struct
+	O
16	int
,	O
tok	struct
.	O
length	int
-	O
16	int
,	O
&	O
tmp	pointer
,	O
&	O
tmplen	long
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
||	O
tmplen	long
!=	O
8	int
)	O
return	O
GSS_S_FAILURE	O
;	O
memcpy	function
(	O
data	struct
+	O
8	int
,	O
tmp	pointer
,	O
tmplen	long
)	O
;	O
if	O
(	O
tmplen	long
!=	O
8	int
||	O
memcmp	function
(	O
cksum	pointer
,	O
data	struct
+	O
8	int
,	O
8	int
)	O
!=	O
0	int
)	O
return	O
GSS_S_BAD_MIC	O
;	O
output_message_buffer	pointer
->	O
length	int
=	O
tok	struct
.	O
length	int
-	O
8	int
-	O
8	int
-	O
8	int
-	O
8	int
-	O
padlen	long
;	O
output_message_buffer	pointer
->	O
value	pointer
=	O
malloc	function
(	O
output_message_buffer	pointer
->	O
length	int
)	O
;	O
if	O
(	O
!	O
output_message_buffer	pointer
->	O
value	pointer
)	O
{	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
memcpy	function
(	O
output_message_buffer	pointer
->	O
value	pointer
,	O
pt	pointer
,	O
tok	struct
.	O
length	int
-	O
4	int
*	O
8	int
-	O
padlen	long
)	O
;	O
}	O
break	O
;	O
case	O
4	int
:	O
{	O
size_t	long
padlen	long
;	O
char	O
*	O
p	pointer
;	O
char	O
*	O
t	pointer
;	O
char	O
cksum	pointer
[	O
20	int
]	O
;	O
size_t	long
outlen	pointer
,	O
i	long
;	O
uint32_t	O
seqnr	O
;	O
if	O
(	O
tok	struct
.	O
length	int
<	O
8	int
+	O
8	int
+	O
20	int
+	O
8	int
+	O
8	int
)	O
return	O
GSS_S_BAD_MIC	O
;	O
memcpy	function
(	O
cksum	pointer
,	O
data	struct
+	O
8	int
+	O
8	int
,	O
20	int
)	O
;	O
p	pointer
=	O
data	struct
+	O
8	int
;	O
rc	int
=	O
shishi_decrypt_iv_etype	function
(	O
k5	pointer
->	O
sh	pointer
,	O
k5	pointer
->	O
key	pointer
,	O
0	int
,	O
SHISHI_DES3_CBC_NONE	O
,	O
cksum	pointer
,	O
8	int
,	O
p	pointer
,	O
8	int
,	O
&	O
t	pointer
,	O
&	O
outlen	pointer
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
||	O
outlen	pointer
!=	O
8	int
)	O
return	O
GSS_S_FAILURE	O
;	O
memcpy	function
(	O
p	pointer
,	O
t	pointer
,	O
8	int
)	O
;	O
free	function
(	O
t	pointer
)	O
;	O
if	O
(	O
memcmp	function
(	O
p	pointer
+	O
4	int
,	O
k5	pointer
->	O
acceptor	int
?	O
"\x00\x00\x00\x00"	pointer
:	O
"\xFF\xFF\xFF\xFF"	pointer
,	O
4	int
)	O
!=	O
0	int
)	O
return	O
GSS_S_BAD_MIC	O
;	O
seqnr	O
=	O
C2I	O
(	O
p	pointer
)	O
;	O
if	O
(	O
seqnr	O
!=	O
(	O
k5	pointer
->	O
acceptor	int
?	O
k5	pointer
->	O
initseqnr	int
:	O
k5	pointer
->	O
acceptseqnr	int
)	O
)	O
return	O
GSS_S_BAD_MIC	O
;	O
if	O
(	O
k5	pointer
->	O
acceptor	int
)	O
k5	pointer
->	O
initseqnr	int
++	O
;	O
else	O
k5	pointer
->	O
acceptseqnr	int
++	O
;	O
padlen	long
=	O
data	struct
[	O
tok	struct
.	O
length	int
-	O
1	int
]	O
;	O
if	O
(	O
padlen	long
>	O
8	int
)	O
return	O
GSS_S_BAD_MIC	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
padlen	long
;	O
i	long
++	O
)	O
if	O
(	O
data	struct
[	O
tok	struct
.	O
length	int
-	O
i	long
]	O
!=	O
(	O
int	O
)	O
padlen	long
)	O
return	O
GSS_S_BAD_MIC	O
;	O
memcpy	function
(	O
data	struct
+	O
8	int
+	O
20	int
,	O
data	struct
,	O
8	int
)	O
;	O
rc	int
=	O
shishi_checksum	function
(	O
k5	pointer
->	O
sh	pointer
,	O
k5	pointer
->	O
key	pointer
,	O
SHISHI_KEYUSAGE_GSS_R2	O
,	O
SHISHI_HMAC_SHA1_DES3_KD	O
,	O
data	struct
+	O
20	int
+	O
8	int
,	O
tok	struct
.	O
length	int
-	O
20	int
-	O
8	int
,	O
&	O
t	pointer
,	O
&	O
tmplen	long
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
||	O
tmplen	long
!=	O
20	int
)	O
return	O
GSS_S_FAILURE	O
;	O
memcpy	function
(	O
data	struct
+	O
8	int
+	O
8	int
,	O
t	pointer
,	O
tmplen	long
)	O
;	O
free	function
(	O
t	pointer
)	O
;	O
if	O
(	O
tmplen	long
!=	O
20	int
||	O
memcmp	function
(	O
cksum	pointer
,	O
data	struct
+	O
8	int
+	O
8	int
,	O
20	int
)	O
!=	O
0	int
)	O
return	O
GSS_S_BAD_MIC	O
;	O
output_message_buffer	pointer
->	O
length	int
=	O
tok	struct
.	O
length	int
-	O
8	int
-	O
20	int
-	O
8	int
-	O
8	int
-	O
padlen	long
;	O
output_message_buffer	pointer
->	O
value	pointer
=	O
malloc	function
(	O
output_message_buffer	pointer
->	O
length	int
)	O
;	O
if	O
(	O
!	O
output_message_buffer	pointer
->	O
value	pointer
)	O
{	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
memcpy	function
(	O
output_message_buffer	pointer
->	O
value	pointer
,	O
data	struct
+	O
20	int
+	O
8	int
+	O
8	int
+	O
8	int
,	O
tok	struct
.	O
length	int
-	O
20	int
-	O
8	int
-	O
8	int
-	O
8	int
-	O
padlen	long
)	O
;	O
}	O
break	O
;	O
default	O
:	O
return	O
GSS_S_FAILURE	O
;	O
}	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
