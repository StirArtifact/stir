void	O
zero_divisor	function
(	O
void	O
)	O
;	O
object	O
fixnum_add	function
(	O
fixnum	O
i	int
,	O
fixnum	O
j	int
)	O
{	O
if	O
(	O
i	int
>=	O
0	int
)	O
{	O
if	O
(	O
j	int
<=	O
(	O
MOST_POSITIVE_FIX	O
-	O
i	int
)	O
)	O
{	O
return	O
make_fixnum	function
(	O
i	int
+	O
j	int
)	O
;	O
}	O
MPOP	function
(	O
return	O
,	O
addss	O
,	O
i	int
,	O
j	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
(	O
MOST_NEGATIVE_FIX	O
-	O
i	int
)	O
<=	O
j	int
)	O
{	O
return	O
make_fixnum	function
(	O
i	int
+	O
j	int
)	O
;	O
}	O
MPOP	function
(	O
return	O
,	O
addss	O
,	O
i	int
,	O
j	int
)	O
;	O
}	O
}	O
object	O
fixnum_sub	function
(	O
fixnum	O
i	int
,	O
fixnum	O
j	int
)	O
{	O
if	O
(	O
i	int
>=	O
0	int
)	O
{	O
if	O
(	O
j	int
>=	O
(	O
i	int
-	O
MOST_POSITIVE_FIX	O
)	O
)	O
{	O
return	O
make_fixnum	function
(	O
i	int
-	O
j	int
)	O
;	O
}	O
MPOP	function
(	O
return	O
,	O
subss	O
,	O
i	int
,	O
j	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
(	O
MOST_NEGATIVE_FIX	O
-	O
i	int
)	O
<=	O
-	O
j	int
)	O
{	O
return	O
make_fixnum	function
(	O
i	int
-	O
j	int
)	O
;	O
}	O
MPOP	function
(	O
return	O
,	O
subss	O
,	O
i	int
,	O
j	int
)	O
;	O
}	O
}	O
inline	O
object	O
fixnum_times	function
(	O
fixnum	O
i	int
,	O
fixnum	O
j	int
)	O
{	O
if	O
(	O
i	int
>=	O
0	int
?	O
(	O
j	int
>=	O
0	int
?	O
(	O
!	O
i	int
||	O
j	int
<=	O
(	O
MOST_POSITIVE_FIX	O
/	O
i	int
)	O
)	O
:	O
(	O
j	int
==	O
-	O
1	int
||	O
i	int
<=	O
(	O
MOST_NEGATIVE_FIX	O
/	O
j	int
)	O
)	O
)	O
:	O
(	O
j	int
>=	O
0	int
?	O
(	O
i	int
==	O
-	O
1	int
||	O
j	int
<=	O
(	O
MOST_NEGATIVE_FIX	O
/	O
i	int
)	O
)	O
:	O
(	O
i	int
>	O
MOST_NEGATIVE_FIX	O
&&	O
-	O
i	int
<=	O
(	O
MOST_POSITIVE_FIX	O
/	O
-	O
j	int
)	O
)	O
)	O
)	O
return	O
make_fixnum	function
(	O
i	int
*	O
j	int
)	O
;	O
else	O
MPOP	function
(	O
return	O
,	O
mulss	O
,	O
i	int
,	O
j	int
)	O
;	O
}	O
static	O
object	O
number_to_complex	function
(	O
object	O
x	int
)	O
{	O
object	O
z	O
;	O
switch	O
(	O
type_of	function
(	O
x	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
case	O
t_bignum	O
:	O
case	O
t_ratio	O
:	O
case	O
t_shortfloat	O
:	O
case	O
t_longfloat	O
:	O
z	O
=	O
alloc_object	function
(	O
t_complex	O
)	O
;	O
z	O
->	O
cmp	O
.	O
cmp_real	O
=	O
x	int
;	O
z	O
->	O
cmp	O
.	O
cmp_imag	O
=	O
small_fixnum	function
(	O
0	int
)	O
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_complex	O
:	O
return	O
(	O
x	int
)	O
;	O
default	O
:	O
FEwrong_type_argument	function
(	O
sLnumber	O
,	O
x	int
)	O
;	O
return	O
(	O
Cnil	O
)	O
;	O
}	O
}	O
object	O
number_plus	function
(	O
object	O
x	int
,	O
object	O
y	int
)	O
{	O
double	O
dx	double
,	O
dy	double
;	O
object	O
z	O
;	O
switch	O
(	O
type_of	function
(	O
x	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
switch	O
(	O
type_of	function
(	O
y	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
return	O
fixnum_add	function
(	O
fix	function
(	O
x	int
)	O
,	O
fix	function
(	O
y	int
)	O
)	O
;	O
case	O
t_bignum	O
:	O
MPOP	function
(	O
return	O
,	O
addsi	O
,	O
fix	function
(	O
x	int
)	O
,	O
MP	function
(	O
y	int
)	O
)	O
;	O
case	O
t_ratio	O
:	O
z	O
=	O
number_plus	function
(	O
number_times	function
(	O
x	int
,	O
y	int
->	O
rat	O
.	O
rat_den	O
)	O
,	O
y	int
->	O
rat	O
.	O
rat_num	O
)	O
;	O
return	O
make_ratio	function
(	O
z	O
,	O
y	int
->	O
rat	O
.	O
rat_den	O
)	O
;	O
case	O
t_shortfloat	O
:	O
dx	double
=	O
(	O
double	O
)	O
(	O
fix	function
(	O
x	int
)	O
)	O
;	O
dy	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
y	int
)	O
)	O
;	O
goto	O
SHORTFLOAT	O
;	O
case	O
t_longfloat	O
:	O
dx	double
=	O
(	O
double	O
)	O
(	O
fix	function
(	O
x	int
)	O
)	O
;	O
dy	double
=	O
lf	function
(	O
y	int
)	O
;	O
goto	O
LONGFLOAT	O
;	O
case	O
t_complex	O
:	O
goto	O
COMPLEX	O
;	O
default	O
:	O
FEwrong_type_argument	function
(	O
sLnumber	O
,	O
y	int
)	O
;	O
}	O
case	O
t_bignum	O
:	O
switch	O
(	O
type_of	function
(	O
y	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
MPOP	function
(	O
return	O
,	O
addsi	O
,	O
fix	function
(	O
y	int
)	O
,	O
MP	function
(	O
x	int
)	O
)	O
;	O
case	O
t_bignum	O
:	O
MPOP	function
(	O
return	O
,	O
addii	O
,	O
MP	function
(	O
y	int
)	O
,	O
MP	function
(	O
x	int
)	O
)	O
;	O
case	O
t_ratio	O
:	O
z	O
=	O
number_plus	function
(	O
number_times	function
(	O
x	int
,	O
y	int
->	O
rat	O
.	O
rat_den	O
)	O
,	O
y	int
->	O
rat	O
.	O
rat_num	O
)	O
;	O
return	O
make_ratio	function
(	O
z	O
,	O
y	int
->	O
rat	O
.	O
rat_den	O
)	O
;	O
case	O
t_shortfloat	O
:	O
dx	double
=	O
number_to_double	function
(	O
x	int
)	O
;	O
dy	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
y	int
)	O
)	O
;	O
goto	O
SHORTFLOAT	O
;	O
case	O
t_longfloat	O
:	O
dx	double
=	O
number_to_double	function
(	O
x	int
)	O
;	O
dy	double
=	O
lf	function
(	O
y	int
)	O
;	O
goto	O
LONGFLOAT	O
;	O
case	O
t_complex	O
:	O
goto	O
COMPLEX	O
;	O
default	O
:	O
FEwrong_type_argument	function
(	O
sLnumber	O
,	O
y	int
)	O
;	O
}	O
case	O
t_ratio	O
:	O
switch	O
(	O
type_of	function
(	O
y	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
case	O
t_bignum	O
:	O
z	O
=	O
number_plus	function
(	O
x	int
->	O
rat	O
.	O
rat_num	O
,	O
number_times	function
(	O
x	int
->	O
rat	O
.	O
rat_den	O
,	O
y	int
)	O
)	O
;	O
z	O
=	O
make_ratio	function
(	O
z	O
,	O
x	int
->	O
rat	O
.	O
rat_den	O
)	O
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_ratio	O
:	O
z	O
=	O
number_plus	function
(	O
number_times	function
(	O
x	int
->	O
rat	O
.	O
rat_num	O
,	O
y	int
->	O
rat	O
.	O
rat_den	O
)	O
,	O
number_times	function
(	O
x	int
->	O
rat	O
.	O
rat_den	O
,	O
y	int
->	O
rat	O
.	O
rat_num	O
)	O
)	O
;	O
z	O
=	O
make_ratio	function
(	O
z	O
,	O
number_times	function
(	O
x	int
->	O
rat	O
.	O
rat_den	O
,	O
y	int
->	O
rat	O
.	O
rat_den	O
)	O
)	O
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_shortfloat	O
:	O
dx	double
=	O
number_to_double	function
(	O
x	int
)	O
;	O
dy	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
y	int
)	O
)	O
;	O
goto	O
SHORTFLOAT	O
;	O
case	O
t_longfloat	O
:	O
dx	double
=	O
number_to_double	function
(	O
x	int
)	O
;	O
dy	double
=	O
lf	function
(	O
y	int
)	O
;	O
goto	O
LONGFLOAT	O
;	O
case	O
t_complex	O
:	O
goto	O
COMPLEX	O
;	O
default	O
:	O
FEwrong_type_argument	function
(	O
sLnumber	O
,	O
y	int
)	O
;	O
}	O
case	O
t_shortfloat	O
:	O
switch	O
(	O
type_of	function
(	O
y	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
dx	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
x	int
)	O
)	O
;	O
dy	double
=	O
(	O
double	O
)	O
(	O
fix	function
(	O
y	int
)	O
)	O
;	O
goto	O
SHORTFLOAT	O
;	O
case	O
t_shortfloat	O
:	O
dx	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
x	int
)	O
)	O
;	O
dy	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
y	int
)	O
)	O
;	O
goto	O
SHORTFLOAT	O
;	O
case	O
t_longfloat	O
:	O
dx	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
x	int
)	O
)	O
;	O
dy	double
=	O
lf	function
(	O
y	int
)	O
;	O
goto	O
LONGFLOAT	O
;	O
case	O
t_complex	O
:	O
goto	O
COMPLEX	O
;	O
default	O
:	O
dx	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
x	int
)	O
)	O
;	O
dy	double
=	O
number_to_double	function
(	O
y	int
)	O
;	O
goto	O
SHORTFLOAT	O
;	O
}	O
SHORTFLOAT	O
:	O
z	O
=	O
alloc_object	function
(	O
t_shortfloat	O
)	O
;	O
sf	function
(	O
z	O
)	O
=	O
(	O
shortfloat	O
)	O
(	O
dx	double
+	O
dy	double
)	O
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_longfloat	O
:	O
dx	double
=	O
lf	function
(	O
x	int
)	O
;	O
switch	O
(	O
type_of	function
(	O
y	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
dy	double
=	O
(	O
double	O
)	O
(	O
fix	function
(	O
y	int
)	O
)	O
;	O
goto	O
LONGFLOAT	O
;	O
case	O
t_shortfloat	O
:	O
dy	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
y	int
)	O
)	O
;	O
goto	O
LONGFLOAT	O
;	O
case	O
t_longfloat	O
:	O
dy	double
=	O
lf	function
(	O
y	int
)	O
;	O
goto	O
LONGFLOAT	O
;	O
case	O
t_complex	O
:	O
goto	O
COMPLEX	O
;	O
default	O
:	O
dy	double
=	O
number_to_double	function
(	O
y	int
)	O
;	O
goto	O
LONGFLOAT	O
;	O
}	O
LONGFLOAT	O
:	O
z	O
=	O
alloc_object	function
(	O
t_longfloat	O
)	O
;	O
lf	function
(	O
z	O
)	O
=	O
dx	double
+	O
dy	double
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_complex	O
:	O
COMPLEX	O
:	O
x	int
=	O
number_to_complex	function
(	O
x	int
)	O
;	O
y	int
=	O
number_to_complex	function
(	O
y	int
)	O
;	O
z	O
=	O
make_complex	function
(	O
number_plus	function
(	O
x	int
->	O
cmp	O
.	O
cmp_real	O
,	O
y	int
->	O
cmp	O
.	O
cmp_real	O
)	O
,	O
number_plus	function
(	O
x	int
->	O
cmp	O
.	O
cmp_imag	O
,	O
y	int
->	O
cmp	O
.	O
cmp_imag	O
)	O
)	O
;	O
return	O
(	O
z	O
)	O
;	O
default	O
:	O
FEwrong_type_argument	function
(	O
sLnumber	O
,	O
x	int
)	O
;	O
return	O
(	O
Cnil	O
)	O
;	O
}	O
}	O
object	O
one_plus	function
(	O
object	O
x	int
)	O
{	O
double	O
dx	double
;	O
object	O
z	O
;	O
switch	O
(	O
type_of	function
(	O
x	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
return	O
fixnum_add	function
(	O
fix	function
(	O
x	int
)	O
,	O
1	int
)	O
;	O
case	O
t_bignum	O
:	O
MPOP	function
(	O
return	O
,	O
addsi	O
,	O
1	int
,	O
MP	function
(	O
x	int
)	O
)	O
;	O
case	O
t_ratio	O
:	O
z	O
=	O
number_plus	function
(	O
x	int
->	O
rat	O
.	O
rat_num	O
,	O
x	int
->	O
rat	O
.	O
rat_den	O
)	O
;	O
z	O
=	O
make_ratio	function
(	O
z	O
,	O
x	int
->	O
rat	O
.	O
rat_den	O
)	O
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_shortfloat	O
:	O
dx	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
x	int
)	O
)	O
;	O
z	O
=	O
alloc_object	function
(	O
t_shortfloat	O
)	O
;	O
sf	function
(	O
z	O
)	O
=	O
(	O
shortfloat	O
)	O
(	O
dx	double
+	O
1.0	int
)	O
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_longfloat	O
:	O
dx	double
=	O
lf	function
(	O
x	int
)	O
;	O
z	O
=	O
alloc_object	function
(	O
t_longfloat	O
)	O
;	O
lf	function
(	O
z	O
)	O
=	O
dx	double
+	O
1.0	int
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_complex	O
:	O
z	O
=	O
make_complex	function
(	O
one_plus	function
(	O
x	int
->	O
cmp	O
.	O
cmp_real	O
)	O
,	O
x	int
->	O
cmp	O
.	O
cmp_imag	O
)	O
;	O
return	O
(	O
z	O
)	O
;	O
default	O
:	O
FEwrong_type_argument	function
(	O
sLnumber	O
,	O
x	int
)	O
;	O
return	O
(	O
Cnil	O
)	O
;	O
}	O
}	O
object	O
number_minus	function
(	O
object	O
x	int
,	O
object	O
y	int
)	O
{	O
double	O
dx	double
,	O
dy	double
;	O
object	O
z	O
;	O
switch	O
(	O
type_of	function
(	O
x	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
switch	O
(	O
type_of	function
(	O
y	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
return	O
fixnum_sub	function
(	O
fix	function
(	O
x	int
)	O
,	O
fix	function
(	O
y	int
)	O
)	O
;	O
case	O
t_bignum	O
:	O
MPOP	function
(	O
return	O
,	O
subsi	O
,	O
fix	function
(	O
x	int
)	O
,	O
MP	function
(	O
y	int
)	O
)	O
;	O
case	O
t_ratio	O
:	O
z	O
=	O
number_minus	function
(	O
number_times	function
(	O
x	int
,	O
y	int
->	O
rat	O
.	O
rat_den	O
)	O
,	O
y	int
->	O
rat	O
.	O
rat_num	O
)	O
;	O
z	O
=	O
make_ratio	function
(	O
z	O
,	O
y	int
->	O
rat	O
.	O
rat_den	O
)	O
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_shortfloat	O
:	O
dx	double
=	O
(	O
double	O
)	O
(	O
fix	function
(	O
x	int
)	O
)	O
;	O
dy	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
y	int
)	O
)	O
;	O
goto	O
SHORTFLOAT	O
;	O
case	O
t_longfloat	O
:	O
dx	double
=	O
(	O
double	O
)	O
(	O
fix	function
(	O
x	int
)	O
)	O
;	O
dy	double
=	O
lf	function
(	O
y	int
)	O
;	O
goto	O
LONGFLOAT	O
;	O
case	O
t_complex	O
:	O
goto	O
COMPLEX	O
;	O
default	O
:	O
FEwrong_type_argument	function
(	O
sLnumber	O
,	O
y	int
)	O
;	O
}	O
case	O
t_bignum	O
:	O
switch	O
(	O
type_of	function
(	O
y	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
MPOP	function
(	O
return	O
,	O
subis	O
,	O
MP	function
(	O
x	int
)	O
,	O
fix	function
(	O
y	int
)	O
)	O
;	O
case	O
t_bignum	O
:	O
MPOP	function
(	O
return	O
,	O
subii	O
,	O
MP	function
(	O
x	int
)	O
,	O
MP	function
(	O
y	int
)	O
)	O
;	O
case	O
t_ratio	O
:	O
z	O
=	O
number_minus	function
(	O
number_times	function
(	O
x	int
,	O
y	int
->	O
rat	O
.	O
rat_den	O
)	O
,	O
y	int
->	O
rat	O
.	O
rat_num	O
)	O
;	O
z	O
=	O
make_ratio	function
(	O
z	O
,	O
y	int
->	O
rat	O
.	O
rat_den	O
)	O
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_shortfloat	O
:	O
dx	double
=	O
number_to_double	function
(	O
x	int
)	O
;	O
dy	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
y	int
)	O
)	O
;	O
goto	O
SHORTFLOAT	O
;	O
case	O
t_longfloat	O
:	O
dx	double
=	O
number_to_double	function
(	O
x	int
)	O
;	O
dy	double
=	O
lf	function
(	O
y	int
)	O
;	O
goto	O
LONGFLOAT	O
;	O
case	O
t_complex	O
:	O
goto	O
COMPLEX	O
;	O
default	O
:	O
FEwrong_type_argument	function
(	O
sLnumber	O
,	O
y	int
)	O
;	O
}	O
case	O
t_ratio	O
:	O
switch	O
(	O
type_of	function
(	O
y	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
case	O
t_bignum	O
:	O
z	O
=	O
number_minus	function
(	O
x	int
->	O
rat	O
.	O
rat_num	O
,	O
number_times	function
(	O
x	int
->	O
rat	O
.	O
rat_den	O
,	O
y	int
)	O
)	O
;	O
z	O
=	O
make_ratio	function
(	O
z	O
,	O
x	int
->	O
rat	O
.	O
rat_den	O
)	O
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_ratio	O
:	O
z	O
=	O
number_minus	function
(	O
number_times	function
(	O
x	int
->	O
rat	O
.	O
rat_num	O
,	O
y	int
->	O
rat	O
.	O
rat_den	O
)	O
,	O
(	O
number_times	function
(	O
x	int
->	O
rat	O
.	O
rat_den	O
,	O
y	int
->	O
rat	O
.	O
rat_num	O
)	O
)	O
)	O
;	O
z	O
=	O
make_ratio	function
(	O
z	O
,	O
number_times	function
(	O
x	int
->	O
rat	O
.	O
rat_den	O
,	O
y	int
->	O
rat	O
.	O
rat_den	O
)	O
)	O
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_shortfloat	O
:	O
dx	double
=	O
number_to_double	function
(	O
x	int
)	O
;	O
dy	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
y	int
)	O
)	O
;	O
goto	O
SHORTFLOAT	O
;	O
case	O
t_longfloat	O
:	O
dx	double
=	O
number_to_double	function
(	O
x	int
)	O
;	O
dy	double
=	O
lf	function
(	O
y	int
)	O
;	O
goto	O
LONGFLOAT	O
;	O
case	O
t_complex	O
:	O
goto	O
COMPLEX	O
;	O
default	O
:	O
FEwrong_type_argument	function
(	O
sLnumber	O
,	O
y	int
)	O
;	O
}	O
case	O
t_shortfloat	O
:	O
switch	O
(	O
type_of	function
(	O
y	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
dx	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
x	int
)	O
)	O
;	O
dy	double
=	O
(	O
double	O
)	O
(	O
fix	function
(	O
y	int
)	O
)	O
;	O
goto	O
SHORTFLOAT	O
;	O
case	O
t_shortfloat	O
:	O
dx	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
x	int
)	O
)	O
;	O
dy	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
y	int
)	O
)	O
;	O
goto	O
SHORTFLOAT	O
;	O
case	O
t_longfloat	O
:	O
dx	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
x	int
)	O
)	O
;	O
dy	double
=	O
lf	function
(	O
y	int
)	O
;	O
goto	O
LONGFLOAT	O
;	O
case	O
t_complex	O
:	O
goto	O
COMPLEX	O
;	O
default	O
:	O
dx	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
x	int
)	O
)	O
;	O
dy	double
=	O
number_to_double	function
(	O
y	int
)	O
;	O
goto	O
SHORTFLOAT	O
;	O
}	O
SHORTFLOAT	O
:	O
z	O
=	O
alloc_object	function
(	O
t_shortfloat	O
)	O
;	O
sf	function
(	O
z	O
)	O
=	O
(	O
shortfloat	O
)	O
(	O
dx	double
-	O
dy	double
)	O
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_longfloat	O
:	O
dx	double
=	O
lf	function
(	O
x	int
)	O
;	O
switch	O
(	O
type_of	function
(	O
y	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
dy	double
=	O
(	O
double	O
)	O
(	O
fix	function
(	O
y	int
)	O
)	O
;	O
goto	O
LONGFLOAT	O
;	O
case	O
t_shortfloat	O
:	O
dy	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
y	int
)	O
)	O
;	O
goto	O
LONGFLOAT	O
;	O
case	O
t_longfloat	O
:	O
dy	double
=	O
lf	function
(	O
y	int
)	O
;	O
goto	O
LONGFLOAT	O
;	O
case	O
t_complex	O
:	O
goto	O
COMPLEX	O
;	O
default	O
:	O
dy	double
=	O
number_to_double	function
(	O
y	int
)	O
;	O
}	O
LONGFLOAT	O
:	O
z	O
=	O
alloc_object	function
(	O
t_longfloat	O
)	O
;	O
lf	function
(	O
z	O
)	O
=	O
dx	double
-	O
dy	double
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_complex	O
:	O
COMPLEX	O
:	O
x	int
=	O
number_to_complex	function
(	O
x	int
)	O
;	O
y	int
=	O
number_to_complex	function
(	O
y	int
)	O
;	O
z	O
=	O
make_complex	function
(	O
number_minus	function
(	O
x	int
->	O
cmp	O
.	O
cmp_real	O
,	O
y	int
->	O
cmp	O
.	O
cmp_real	O
)	O
,	O
number_minus	function
(	O
x	int
->	O
cmp	O
.	O
cmp_imag	O
,	O
y	int
->	O
cmp	O
.	O
cmp_imag	O
)	O
)	O
;	O
return	O
(	O
z	O
)	O
;	O
default	O
:	O
FEwrong_type_argument	function
(	O
sLnumber	O
,	O
x	int
)	O
;	O
return	O
(	O
Cnil	O
)	O
;	O
}	O
}	O
object	O
one_minus	function
(	O
object	O
x	int
)	O
{	O
double	O
dx	double
;	O
object	O
z	O
;	O
switch	O
(	O
type_of	function
(	O
x	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
return	O
fixnum_sub	function
(	O
fix	function
(	O
x	int
)	O
,	O
1	int
)	O
;	O
case	O
t_bignum	O
:	O
MPOP	function
(	O
return	O
,	O
addsi	O
,	O
-	O
1	int
,	O
MP	function
(	O
x	int
)	O
)	O
;	O
case	O
t_ratio	O
:	O
z	O
=	O
number_minus	function
(	O
x	int
->	O
rat	O
.	O
rat_num	O
,	O
x	int
->	O
rat	O
.	O
rat_den	O
)	O
;	O
z	O
=	O
make_ratio	function
(	O
z	O
,	O
x	int
->	O
rat	O
.	O
rat_den	O
)	O
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_shortfloat	O
:	O
dx	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
x	int
)	O
)	O
;	O
z	O
=	O
alloc_object	function
(	O
t_shortfloat	O
)	O
;	O
sf	function
(	O
z	O
)	O
=	O
(	O
shortfloat	O
)	O
(	O
dx	double
-	O
1.0	int
)	O
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_longfloat	O
:	O
dx	double
=	O
lf	function
(	O
x	int
)	O
;	O
z	O
=	O
alloc_object	function
(	O
t_longfloat	O
)	O
;	O
lf	function
(	O
z	O
)	O
=	O
dx	double
-	O
1.0	int
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_complex	O
:	O
z	O
=	O
make_complex	function
(	O
one_minus	function
(	O
x	int
->	O
cmp	O
.	O
cmp_real	O
)	O
,	O
x	int
->	O
cmp	O
.	O
cmp_imag	O
)	O
;	O
return	O
(	O
z	O
)	O
;	O
default	O
:	O
FEwrong_type_argument	function
(	O
sLnumber	O
,	O
x	int
)	O
;	O
return	O
(	O
Cnil	O
)	O
;	O
}	O
}	O
object	O
number_negate	function
(	O
object	O
x	int
)	O
{	O
object	O
z	O
,	O
z1	O
;	O
switch	O
(	O
type_of	function
(	O
x	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
if	O
(	O
fix	function
(	O
x	int
)	O
==	O
MOST_NEGATIVE_FIX	O
)	O
return	O
fixnum_add	function
(	O
1	int
,	O
MOST_POSITIVE_FIX	O
)	O
;	O
else	O
return	O
(	O
make_fixnum	function
(	O
-	O
fix	function
(	O
x	int
)	O
)	O
)	O
;	O
case	O
t_bignum	O
:	O
return	O
big_minus	function
(	O
x	int
)	O
;	O
case	O
t_ratio	O
:	O
z1	O
=	O
number_negate	function
(	O
x	int
->	O
rat	O
.	O
rat_num	O
)	O
;	O
z	O
=	O
alloc_object	function
(	O
t_ratio	O
)	O
;	O
z	O
->	O
rat	O
.	O
rat_num	O
=	O
z1	O
;	O
z	O
->	O
rat	O
.	O
rat_den	O
=	O
x	int
->	O
rat	O
.	O
rat_den	O
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_shortfloat	O
:	O
z	O
=	O
alloc_object	function
(	O
t_shortfloat	O
)	O
;	O
sf	function
(	O
z	O
)	O
=	O
-	O
sf	function
(	O
x	int
)	O
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_longfloat	O
:	O
z	O
=	O
alloc_object	function
(	O
t_longfloat	O
)	O
;	O
lf	function
(	O
z	O
)	O
=	O
-	O
lf	function
(	O
x	int
)	O
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_complex	O
:	O
z	O
=	O
make_complex	function
(	O
number_negate	function
(	O
x	int
->	O
cmp	O
.	O
cmp_real	O
)	O
,	O
number_negate	function
(	O
x	int
->	O
cmp	O
.	O
cmp_imag	O
)	O
)	O
;	O
return	O
(	O
z	O
)	O
;	O
default	O
:	O
FEwrong_type_argument	function
(	O
sLnumber	O
,	O
x	int
)	O
;	O
return	O
(	O
Cnil	O
)	O
;	O
}	O
}	O
object	O
number_times	function
(	O
object	O
x	int
,	O
object	O
y	int
)	O
{	O
object	O
z	O
;	O
double	O
dx	double
,	O
dy	double
;	O
switch	O
(	O
type_of	function
(	O
x	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
switch	O
(	O
type_of	function
(	O
y	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
return	O
fixnum_times	function
(	O
fix	function
(	O
x	int
)	O
,	O
fix	function
(	O
y	int
)	O
)	O
;	O
case	O
t_bignum	O
:	O
MPOP	function
(	O
return	O
,	O
mulsi	O
,	O
fix	function
(	O
x	int
)	O
,	O
MP	function
(	O
y	int
)	O
)	O
;	O
case	O
t_ratio	O
:	O
z	O
=	O
make_ratio	function
(	O
number_times	function
(	O
x	int
,	O
y	int
->	O
rat	O
.	O
rat_num	O
)	O
,	O
y	int
->	O
rat	O
.	O
rat_den	O
)	O
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_shortfloat	O
:	O
dx	double
=	O
(	O
double	O
)	O
(	O
fix	function
(	O
x	int
)	O
)	O
;	O
dy	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
y	int
)	O
)	O
;	O
goto	O
SHORTFLOAT	O
;	O
case	O
t_longfloat	O
:	O
dx	double
=	O
(	O
double	O
)	O
(	O
fix	function
(	O
x	int
)	O
)	O
;	O
dy	double
=	O
lf	function
(	O
y	int
)	O
;	O
goto	O
LONGFLOAT	O
;	O
case	O
t_complex	O
:	O
goto	O
COMPLEX	O
;	O
default	O
:	O
FEwrong_type_argument	function
(	O
sLnumber	O
,	O
y	int
)	O
;	O
}	O
case	O
t_bignum	O
:	O
switch	O
(	O
type_of	function
(	O
y	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
MPOP	function
(	O
return	O
,	O
mulsi	O
,	O
fix	function
(	O
y	int
)	O
,	O
MP	function
(	O
x	int
)	O
)	O
;	O
case	O
t_bignum	O
:	O
MPOP	function
(	O
return	O
,	O
mulii	O
,	O
MP	function
(	O
y	int
)	O
,	O
MP	function
(	O
x	int
)	O
)	O
;	O
case	O
t_ratio	O
:	O
z	O
=	O
make_ratio	function
(	O
number_times	function
(	O
x	int
,	O
y	int
->	O
rat	O
.	O
rat_num	O
)	O
,	O
y	int
->	O
rat	O
.	O
rat_den	O
)	O
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_shortfloat	O
:	O
dx	double
=	O
number_to_double	function
(	O
x	int
)	O
;	O
dy	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
y	int
)	O
)	O
;	O
goto	O
SHORTFLOAT	O
;	O
case	O
t_longfloat	O
:	O
dx	double
=	O
number_to_double	function
(	O
x	int
)	O
;	O
dy	double
=	O
lf	function
(	O
y	int
)	O
;	O
goto	O
LONGFLOAT	O
;	O
case	O
t_complex	O
:	O
goto	O
COMPLEX	O
;	O
default	O
:	O
FEwrong_type_argument	function
(	O
sLnumber	O
,	O
y	int
)	O
;	O
}	O
case	O
t_ratio	O
:	O
switch	O
(	O
type_of	function
(	O
y	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
case	O
t_bignum	O
:	O
z	O
=	O
make_ratio	function
(	O
number_times	function
(	O
x	int
->	O
rat	O
.	O
rat_num	O
,	O
y	int
)	O
,	O
x	int
->	O
rat	O
.	O
rat_den	O
)	O
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_ratio	O
:	O
z	O
=	O
make_ratio	function
(	O
number_times	function
(	O
x	int
->	O
rat	O
.	O
rat_num	O
,	O
y	int
->	O
rat	O
.	O
rat_num	O
)	O
,	O
number_times	function
(	O
x	int
->	O
rat	O
.	O
rat_den	O
,	O
y	int
->	O
rat	O
.	O
rat_den	O
)	O
)	O
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_shortfloat	O
:	O
dx	double
=	O
number_to_double	function
(	O
x	int
)	O
;	O
dy	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
y	int
)	O
)	O
;	O
goto	O
SHORTFLOAT	O
;	O
case	O
t_longfloat	O
:	O
dx	double
=	O
number_to_double	function
(	O
x	int
)	O
;	O
dy	double
=	O
lf	function
(	O
y	int
)	O
;	O
goto	O
LONGFLOAT	O
;	O
case	O
t_complex	O
:	O
goto	O
COMPLEX	O
;	O
default	O
:	O
FEwrong_type_argument	function
(	O
sLnumber	O
,	O
y	int
)	O
;	O
}	O
case	O
t_shortfloat	O
:	O
switch	O
(	O
type_of	function
(	O
y	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
dx	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
x	int
)	O
)	O
;	O
dy	double
=	O
(	O
double	O
)	O
(	O
fix	function
(	O
y	int
)	O
)	O
;	O
goto	O
SHORTFLOAT	O
;	O
case	O
t_shortfloat	O
:	O
dx	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
x	int
)	O
)	O
;	O
dy	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
y	int
)	O
)	O
;	O
goto	O
SHORTFLOAT	O
;	O
case	O
t_longfloat	O
:	O
dx	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
x	int
)	O
)	O
;	O
dy	double
=	O
lf	function
(	O
y	int
)	O
;	O
goto	O
LONGFLOAT	O
;	O
case	O
t_complex	O
:	O
goto	O
COMPLEX	O
;	O
default	O
:	O
dx	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
x	int
)	O
)	O
;	O
dy	double
=	O
number_to_double	function
(	O
y	int
)	O
;	O
break	O
;	O
}	O
SHORTFLOAT	O
:	O
z	O
=	O
alloc_object	function
(	O
t_shortfloat	O
)	O
;	O
sf	function
(	O
z	O
)	O
=	O
(	O
shortfloat	O
)	O
(	O
dx	double
*	O
dy	double
)	O
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_longfloat	O
:	O
dx	double
=	O
lf	function
(	O
x	int
)	O
;	O
switch	O
(	O
type_of	function
(	O
y	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
dy	double
=	O
(	O
double	O
)	O
(	O
fix	function
(	O
y	int
)	O
)	O
;	O
goto	O
LONGFLOAT	O
;	O
case	O
t_shortfloat	O
:	O
dy	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
y	int
)	O
)	O
;	O
goto	O
LONGFLOAT	O
;	O
case	O
t_longfloat	O
:	O
dy	double
=	O
lf	function
(	O
y	int
)	O
;	O
goto	O
LONGFLOAT	O
;	O
case	O
t_complex	O
:	O
goto	O
COMPLEX	O
;	O
default	O
:	O
dy	double
=	O
number_to_double	function
(	O
y	int
)	O
;	O
}	O
LONGFLOAT	O
:	O
z	O
=	O
alloc_object	function
(	O
t_longfloat	O
)	O
;	O
lf	function
(	O
z	O
)	O
=	O
dx	double
*	O
dy	double
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_complex	O
:	O
COMPLEX	O
:	O
{	O
object	O
z1	O
,	O
z2	O
,	O
z11	O
,	O
z12	O
,	O
z21	O
,	O
z22	O
;	O
x	int
=	O
number_to_complex	function
(	O
x	int
)	O
;	O
y	int
=	O
number_to_complex	function
(	O
y	int
)	O
;	O
z11	O
=	O
number_times	function
(	O
x	int
->	O
cmp	O
.	O
cmp_real	O
,	O
y	int
->	O
cmp	O
.	O
cmp_real	O
)	O
;	O
z12	O
=	O
number_times	function
(	O
x	int
->	O
cmp	O
.	O
cmp_imag	O
,	O
y	int
->	O
cmp	O
.	O
cmp_imag	O
)	O
;	O
z21	O
=	O
number_times	function
(	O
x	int
->	O
cmp	O
.	O
cmp_imag	O
,	O
y	int
->	O
cmp	O
.	O
cmp_real	O
)	O
;	O
z22	O
=	O
number_times	function
(	O
x	int
->	O
cmp	O
.	O
cmp_real	O
,	O
y	int
->	O
cmp	O
.	O
cmp_imag	O
)	O
;	O
z1	O
=	O
number_minus	function
(	O
z11	O
,	O
z12	O
)	O
;	O
z2	O
=	O
number_plus	function
(	O
z21	O
,	O
z22	O
)	O
;	O
z	O
=	O
make_complex	function
(	O
z1	O
,	O
z2	O
)	O
;	O
return	O
(	O
z	O
)	O
;	O
}	O
default	O
:	O
FEwrong_type_argument	function
(	O
sLnumber	O
,	O
x	int
)	O
;	O
return	O
(	O
Cnil	O
)	O
;	O
}	O
}	O
object	O
number_divide	function
(	O
object	O
x	int
,	O
object	O
y	int
)	O
{	O
object	O
z	O
;	O
double	O
dx	double
,	O
dy	double
;	O
switch	O
(	O
type_of	function
(	O
x	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
case	O
t_bignum	O
:	O
switch	O
(	O
type_of	function
(	O
y	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
case	O
t_bignum	O
:	O
if	O
(	O
number_zerop	function
(	O
y	int
)	O
==	O
TRUE	O
)	O
zero_divisor	function
(	O
)	O
;	O
if	O
(	O
number_minusp	function
(	O
y	int
)	O
==	O
TRUE	O
)	O
{	O
x	int
=	O
number_negate	function
(	O
x	int
)	O
;	O
y	int
=	O
number_negate	function
(	O
y	int
)	O
;	O
}	O
z	O
=	O
make_ratio	function
(	O
x	int
,	O
y	int
)	O
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_ratio	O
:	O
if	O
(	O
number_zerop	function
(	O
y	int
->	O
rat	O
.	O
rat_num	O
)	O
)	O
zero_divisor	function
(	O
)	O
;	O
z	O
=	O
make_ratio	function
(	O
number_times	function
(	O
x	int
,	O
y	int
->	O
rat	O
.	O
rat_den	O
)	O
,	O
y	int
->	O
rat	O
.	O
rat_num	O
)	O
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_shortfloat	O
:	O
dx	double
=	O
number_to_double	function
(	O
x	int
)	O
;	O
dy	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
y	int
)	O
)	O
;	O
goto	O
SHORTFLOAT	O
;	O
case	O
t_longfloat	O
:	O
dx	double
=	O
number_to_double	function
(	O
x	int
)	O
;	O
dy	double
=	O
lf	function
(	O
y	int
)	O
;	O
goto	O
LONGFLOAT	O
;	O
case	O
t_complex	O
:	O
goto	O
COMPLEX	O
;	O
default	O
:	O
FEwrong_type_argument	function
(	O
sLnumber	O
,	O
y	int
)	O
;	O
}	O
case	O
t_ratio	O
:	O
switch	O
(	O
type_of	function
(	O
y	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
case	O
t_bignum	O
:	O
if	O
(	O
number_zerop	function
(	O
y	int
)	O
)	O
zero_divisor	function
(	O
)	O
;	O
z	O
=	O
make_ratio	function
(	O
x	int
->	O
rat	O
.	O
rat_num	O
,	O
number_times	function
(	O
x	int
->	O
rat	O
.	O
rat_den	O
,	O
y	int
)	O
)	O
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_ratio	O
:	O
z	O
=	O
make_ratio	function
(	O
number_times	function
(	O
x	int
->	O
rat	O
.	O
rat_num	O
,	O
y	int
->	O
rat	O
.	O
rat_den	O
)	O
,	O
number_times	function
(	O
x	int
->	O
rat	O
.	O
rat_den	O
,	O
y	int
->	O
rat	O
.	O
rat_num	O
)	O
)	O
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_shortfloat	O
:	O
dx	double
=	O
number_to_double	function
(	O
x	int
)	O
;	O
dy	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
y	int
)	O
)	O
;	O
goto	O
SHORTFLOAT	O
;	O
case	O
t_longfloat	O
:	O
dx	double
=	O
number_to_double	function
(	O
x	int
)	O
;	O
dy	double
=	O
lf	function
(	O
y	int
)	O
;	O
goto	O
LONGFLOAT	O
;	O
case	O
t_complex	O
:	O
goto	O
COMPLEX	O
;	O
default	O
:	O
FEwrong_type_argument	function
(	O
sLnumber	O
,	O
y	int
)	O
;	O
}	O
case	O
t_shortfloat	O
:	O
switch	O
(	O
type_of	function
(	O
y	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
dx	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
x	int
)	O
)	O
;	O
dy	double
=	O
(	O
double	O
)	O
(	O
fix	function
(	O
y	int
)	O
)	O
;	O
goto	O
SHORTFLOAT	O
;	O
case	O
t_shortfloat	O
:	O
dx	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
x	int
)	O
)	O
;	O
dy	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
y	int
)	O
)	O
;	O
goto	O
SHORTFLOAT	O
;	O
case	O
t_longfloat	O
:	O
dx	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
x	int
)	O
)	O
;	O
dy	double
=	O
lf	function
(	O
y	int
)	O
;	O
goto	O
LONGFLOAT	O
;	O
case	O
t_complex	O
:	O
goto	O
COMPLEX	O
;	O
default	O
:	O
dx	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
x	int
)	O
)	O
;	O
dy	double
=	O
number_to_double	function
(	O
y	int
)	O
;	O
goto	O
LONGFLOAT	O
;	O
}	O
SHORTFLOAT	O
:	O
z	O
=	O
alloc_object	function
(	O
t_shortfloat	O
)	O
;	O
if	O
(	O
dy	double
==	O
0.0	int
)	O
zero_divisor	function
(	O
)	O
;	O
sf	function
(	O
z	O
)	O
=	O
(	O
shortfloat	O
)	O
(	O
dx	double
/	O
dy	double
)	O
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_longfloat	O
:	O
dx	double
=	O
lf	function
(	O
x	int
)	O
;	O
switch	O
(	O
type_of	function
(	O
y	int
)	O
)	O
{	O
case	O
t_fixnum	O
:	O
dy	double
=	O
(	O
double	O
)	O
(	O
fix	function
(	O
y	int
)	O
)	O
;	O
goto	O
LONGFLOAT	O
;	O
case	O
t_shortfloat	O
:	O
dy	double
=	O
(	O
double	O
)	O
(	O
sf	function
(	O
y	int
)	O
)	O
;	O
goto	O
LONGFLOAT	O
;	O
case	O
t_longfloat	O
:	O
dy	double
=	O
lf	function
(	O
y	int
)	O
;	O
goto	O
LONGFLOAT	O
;	O
case	O
t_complex	O
:	O
goto	O
COMPLEX	O
;	O
default	O
:	O
dy	double
=	O
number_to_double	function
(	O
y	int
)	O
;	O
}	O
LONGFLOAT	O
:	O
z	O
=	O
alloc_object	function
(	O
t_longfloat	O
)	O
;	O
if	O
(	O
dy	double
==	O
0.0	int
)	O
zero_divisor	function
(	O
)	O
;	O
lf	function
(	O
z	O
)	O
=	O
dx	double
/	O
dy	double
;	O
return	O
(	O
z	O
)	O
;	O
case	O
t_complex	O
:	O
COMPLEX	O
:	O
{	O
object	O
z1	O
,	O
z2	O
,	O
z3	O
;	O
x	int
=	O
number_to_complex	function
(	O
x	int
)	O
;	O
y	int
=	O
number_to_complex	function
(	O
y	int
)	O
;	O
z1	O
=	O
number_times	function
(	O
y	int
->	O
cmp	O
.	O
cmp_real	O
,	O
y	int
->	O
cmp	O
.	O
cmp_real	O
)	O
;	O
z2	O
=	O
number_times	function
(	O
y	int
->	O
cmp	O
.	O
cmp_imag	O
,	O
y	int
->	O
cmp	O
.	O
cmp_imag	O
)	O
;	O
if	O
(	O
number_zerop	function
(	O
z3	O
=	O
number_plus	function
(	O
z1	O
,	O
z2	O
)	O
)	O
)	O
zero_divisor	function
(	O
)	O
;	O
z1	O
=	O
number_times	function
(	O
x	int
->	O
cmp	O
.	O
cmp_real	O
,	O
y	int
->	O
cmp	O
.	O
cmp_real	O
)	O
;	O
z2	O
=	O
number_times	function
(	O
x	int
->	O
cmp	O
.	O
cmp_imag	O
,	O
y	int
->	O
cmp	O
.	O
cmp_imag	O
)	O
;	O
z1	O
=	O
number_plus	function
(	O
z1	O
,	O
z2	O
)	O
;	O
z	O
=	O
number_times	function
(	O
x	int
->	O
cmp	O
.	O
cmp_imag	O
,	O
y	int
->	O
cmp	O
.	O
cmp_real	O
)	O
;	O
z2	O
=	O
number_times	function
(	O
x	int
->	O
cmp	O
.	O
cmp_real	O
,	O
y	int
->	O
cmp	O
.	O
cmp_imag	O
)	O
;	O
z2	O
=	O
number_minus	function
(	O
z	O
,	O
z2	O
)	O
;	O
z1	O
=	O
number_divide	function
(	O
z1	O
,	O
z3	O
)	O
;	O
z2	O
=	O
number_divide	function
(	O
z2	O
,	O
z3	O
)	O
;	O
z	O
=	O
make_complex	function
(	O
z1	O
,	O
z2	O
)	O
;	O
return	O
(	O
z	O
)	O
;	O
}	O
default	O
:	O
FEwrong_type_argument	function
(	O
sLnumber	O
,	O
x	int
)	O
;	O
return	O
(	O
Cnil	O
)	O
;	O
}	O
}	O
object	O
integer_divide1	function
(	O
object	O
x	int
,	O
object	O
y	int
,	O
fixnum	O
d	int
)	O
{	O
object	O
q	O
;	O
integer_quotient_remainder_1	function
(	O
x	int
,	O
y	int
,	O
&	O
q	O
,	O
NULL	O
,	O
d	int
)	O
;	O
return	O
(	O
q	O
)	O
;	O
}	O
object	O
integer_divide2	function
(	O
object	O
x	int
,	O
object	O
y	int
,	O
fixnum	O
d	int
,	O
object	O
*	O
r	pointer
)	O
{	O
object	O
q	O
;	O
integer_quotient_remainder_1	function
(	O
x	int
,	O
y	int
,	O
&	O
q	O
,	O
r	pointer
,	O
d	int
)	O
;	O
return	O
(	O
q	O
)	O
;	O
}	O
object	O
get_gcd_abs	function
(	O
object	O
x	int
,	O
object	O
y	int
)	O
{	O
object	O
r	pointer
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
type_of	function
(	O
x	int
)	O
==	O
t_fixnum	O
&&	O
type_of	function
(	O
y	int
)	O
==	O
t_fixnum	O
)	O
return	O
make_fixnum	function
(	O
fixnum_gcd	function
(	O
fix	function
(	O
x	int
)	O
,	O
fix	function
(	O
y	int
)	O
)	O
)	O
;	O
if	O
(	O
number_compare	function
(	O
x	int
,	O
y	int
)	O
<	O
0	int
)	O
{	O
r	pointer
=	O
x	int
;	O
x	int
=	O
y	int
;	O
y	int
=	O
r	pointer
;	O
}	O
if	O
(	O
type_of	function
(	O
y	int
)	O
==	O
t_fixnum	O
&&	O
fix	function
(	O
y	int
)	O
==	O
0	int
)	O
return	O
(	O
x	int
)	O
;	O
integer_quotient_remainder_1	function
(	O
x	int
,	O
y	int
,	O
NULL	O
,	O
&	O
r	pointer
,	O
0	int
)	O
;	O
x	int
=	O
y	int
;	O
y	int
=	O
r	pointer
;	O
}	O
}	O
object	O
get_gcd	function
(	O
object	O
x	int
,	O
object	O
y	int
)	O
{	O
return	O
get_gcd_abs	function
(	O
number_abs	function
(	O
x	int
)	O
,	O
number_abs	function
(	O
y	int
)	O
)	O
;	O
}	O
LFD	function
(	O
Lplus	int
)	O
(	O
void	O
)	O
{	O
fixnum	O
i	int
,	O
j	int
;	O
j	int
=	O
vs_top	O
-	O
vs_base	O
;	O
if	O
(	O
j	int
==	O
0	int
)	O
{	O
vs_push	function
(	O
small_fixnum	function
(	O
0	int
)	O
)	O
;	O
return	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
j	int
;	O
i	int
++	O
)	O
check_type_number	function
(	O
&	O
vs_base	O
[	O
i	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
j	int
;	O
i	int
++	O
)	O
vs_base	O
[	O
0	int
]	O
=	O
number_plus	function
(	O
vs_base	O
[	O
0	int
]	O
,	O
vs_base	O
[	O
i	int
]	O
)	O
;	O
vs_top	O
=	O
vs_base	O
+	O
1	int
;	O
}	O
LFD	function
(	O
Lminus	int
)	O
(	O
void	O
)	O
{	O
fixnum	O
i	int
,	O
j	int
;	O
j	int
=	O
vs_top	O
-	O
vs_base	O
;	O
if	O
(	O
j	int
==	O
0	int
)	O
too_few_arguments	function
(	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
j	int
;	O
i	int
++	O
)	O
check_type_number	function
(	O
&	O
vs_base	O
[	O
i	int
]	O
)	O
;	O
if	O
(	O
j	int
==	O
1	int
)	O
{	O
vs_base	O
[	O
0	int
]	O
=	O
number_negate	function
(	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
return	O
;	O
}	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
j	int
;	O
i	int
++	O
)	O
vs_base	O
[	O
0	int
]	O
=	O
number_minus	function
(	O
vs_base	O
[	O
0	int
]	O
,	O
vs_base	O
[	O
i	int
]	O
)	O
;	O
vs_top	O
=	O
vs_base	O
+	O
1	int
;	O
}	O
LFD	function
(	O
Ltimes	int
)	O
(	O
void	O
)	O
{	O
fixnum	O
i	int
,	O
j	int
;	O
j	int
=	O
vs_top	O
-	O
vs_base	O
;	O
if	O
(	O
j	int
==	O
0	int
)	O
{	O
vs_push	function
(	O
small_fixnum	function
(	O
1	int
)	O
)	O
;	O
return	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
j	int
;	O
i	int
++	O
)	O
check_type_number	function
(	O
&	O
vs_base	O
[	O
i	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
j	int
;	O
i	int
++	O
)	O
vs_base	O
[	O
0	int
]	O
=	O
number_times	function
(	O
vs_base	O
[	O
0	int
]	O
,	O
vs_base	O
[	O
i	int
]	O
)	O
;	O
vs_top	O
=	O
vs_base	O
+	O
1	int
;	O
}	O
LFD	function
(	O
Ldivide	int
)	O
(	O
void	O
)	O
{	O
fixnum	O
i	int
,	O
j	int
;	O
j	int
=	O
vs_top	O
-	O
vs_base	O
;	O
if	O
(	O
j	int
==	O
0	int
)	O
too_few_arguments	function
(	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
j	int
;	O
i	int
++	O
)	O
check_type_number	function
(	O
&	O
vs_base	O
[	O
i	int
]	O
)	O
;	O
if	O
(	O
j	int
==	O
1	int
)	O
{	O
vs_base	O
[	O
0	int
]	O
=	O
number_divide	function
(	O
small_fixnum	function
(	O
1	int
)	O
,	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
return	O
;	O
}	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
j	int
;	O
i	int
++	O
)	O
vs_base	O
[	O
0	int
]	O
=	O
number_divide	function
(	O
vs_base	O
[	O
0	int
]	O
,	O
vs_base	O
[	O
i	int
]	O
)	O
;	O
vs_top	O
=	O
vs_base	O
+	O
1	int
;	O
}	O
LFD	function
(	O
Lone_plus	int
)	O
(	O
void	O
)	O
{	O
check_arg	function
(	O
1	int
)	O
;	O
check_type_number	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
vs_base	O
[	O
0	int
]	O
=	O
one_plus	function
(	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
}	O
LFD	function
(	O
Lone_minus	int
)	O
(	O
void	O
)	O
{	O
check_arg	function
(	O
1	int
)	O
;	O
check_type_number	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
vs_base	O
[	O
0	int
]	O
=	O
one_minus	function
(	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
}	O
LFD	function
(	O
Lconjugate	int
)	O
(	O
void	O
)	O
{	O
object	O
c	O
,	O
i	int
;	O
check_arg	function
(	O
1	int
)	O
;	O
check_type_number	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
c	O
=	O
vs_base	O
[	O
0	int
]	O
;	O
if	O
(	O
type_of	function
(	O
c	O
)	O
==	O
t_complex	O
)	O
{	O
i	int
=	O
number_negate	function
(	O
c	O
->	O
cmp	O
.	O
cmp_imag	O
)	O
;	O
vs_push	function
(	O
i	int
)	O
;	O
vs_base	O
[	O
0	int
]	O
=	O
make_complex	function
(	O
c	O
->	O
cmp	O
.	O
cmp_real	O
,	O
i	int
)	O
;	O
vs_popp	O
;	O
}	O
}	O
LFD	function
(	O
Lgcd	int
)	O
(	O
void	O
)	O
{	O
fixnum	O
i	int
,	O
narg	O
=	O
vs_top	O
-	O
vs_base	O
;	O
if	O
(	O
narg	O
==	O
0	int
)	O
{	O
vs_push	function
(	O
small_fixnum	function
(	O
0	int
)	O
)	O
;	O
return	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
narg	O
;	O
i	int
++	O
)	O
check_type_integer	function
(	O
&	O
vs_base	O
[	O
i	int
]	O
)	O
;	O
vs_top	O
=	O
vs_base	O
;	O
vs_push	function
(	O
number_abs	function
(	O
vs_base	O
[	O
0	int
]	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
narg	O
;	O
i	int
++	O
)	O
vs_base	O
[	O
0	int
]	O
=	O
get_gcd_abs	function
(	O
vs_base	O
[	O
0	int
]	O
,	O
number_abs	function
(	O
vs_base	O
[	O
i	int
]	O
)	O
)	O
;	O
}	O
object	O
get_lcm_abs	function
(	O
object	O
x	int
,	O
object	O
y	int
)	O
{	O
object	O
g	O
=	O
get_gcd_abs	function
(	O
x	int
,	O
y	int
)	O
;	O
return	O
number_zerop	function
(	O
g	O
)	O
?	O
g	O
:	O
number_times	function
(	O
x	int
,	O
integer_divide1	function
(	O
y	int
,	O
g	O
,	O
0	int
)	O
)	O
;	O
}	O
object	O
get_lcm	function
(	O
object	O
x	int
,	O
object	O
y	int
)	O
{	O
return	O
get_lcm_abs	function
(	O
number_abs	function
(	O
x	int
)	O
,	O
number_abs	function
(	O
y	int
)	O
)	O
;	O
}	O
LFD	function
(	O
Llcm	int
)	O
(	O
void	O
)	O
{	O
fixnum	O
i	int
,	O
narg	O
;	O
narg	O
=	O
vs_top	O
-	O
vs_base	O
;	O
if	O
(	O
narg	O
==	O
0	int
)	O
too_few_arguments	function
(	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
narg	O
;	O
i	int
++	O
)	O
check_type_integer	function
(	O
&	O
vs_base	O
[	O
i	int
]	O
)	O
;	O
vs_top	O
=	O
vs_base	O
;	O
vs_push	function
(	O
number_abs	function
(	O
vs_base	O
[	O
0	int
]	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
narg	O
&&	O
!	O
number_zerop	function
(	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
i	int
++	O
)	O
vs_base	O
[	O
0	int
]	O
=	O
get_lcm_abs	function
(	O
vs_base	O
[	O
0	int
]	O
,	O
number_abs	function
(	O
vs_base	O
[	O
i	int
]	O
)	O
)	O
;	O
}	O
void	O
zero_divisor	function
(	O
void	O
)	O
{	O
FEerror	function
(	O
"Zero divisor."	pointer
,	O
0	int
)	O
;	O
}	O
void	O
gcl_init_num_arith	function
(	O
void	O
)	O
{	O
make_function	function
(	O
"+"	pointer
,	O
Lplus	int
)	O
;	O
make_function	function
(	O
"-"	pointer
,	O
Lminus	int
)	O
;	O
make_function	function
(	O
"*"	pointer
,	O
Ltimes	int
)	O
;	O
make_function	function
(	O
"/"	pointer
,	O
Ldivide	int
)	O
;	O
make_function	function
(	O
"1+"	pointer
,	O
Lone_plus	int
)	O
;	O
make_function	function
(	O
"1-"	pointer
,	O
Lone_minus	int
)	O
;	O
make_function	function
(	O
"CONJUGATE"	pointer
,	O
Lconjugate	int
)	O
;	O
make_function	function
(	O
"GCD"	pointer
,	O
Lgcd	int
)	O
;	O
make_function	function
(	O
"LCM"	pointer
,	O
Llcm	int
)	O
;	O
}	O
