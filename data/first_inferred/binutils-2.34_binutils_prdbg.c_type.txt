struct	O
pr_handle	struct
{	O
FILE	struct
*	O
f	pointer
;	O
unsigned	O
int	O
indent	int
;	O
struct	O
pr_stack	struct
*	O
stack	pointer
;	O
int	O
parameter	int
;	O
char	O
*	O
filename	pointer
;	O
bfd	struct
*	O
abfd	pointer
;	O
asymbol	struct
*	O
*	O
syms	pointer
;	O
char	O
*	O
(	O
*	O
demangler	pointer
)	O
(	O
bfd	struct
*	O
,	O
const	O
char	O
*	O
,	O
int	O
)	O
;	O
}	O
;	O
struct	O
pr_stack	struct
{	O
struct	O
pr_stack	struct
*	O
next	pointer
;	O
char	O
*	O
type	enum
;	O
enum	O
debug_visibility	enum
visibility	enum
;	O
const	O
char	O
*	O
method	pointer
;	O
const	O
char	O
*	O
flavor	pointer
;	O
char	O
*	O
parents	pointer
;	O
int	O
num_parents	int
;	O
}	O
;	O
static	O
void	O
indent	int
(	O
struct	O
pr_handle	struct
*	O
)	O
;	O
static	O
bfd_boolean	int
push_type	function
(	O
struct	O
pr_handle	struct
*	O
,	O
const	O
char	O
*	O
)	O
;	O
static	O
bfd_boolean	int
prepend_type	function
(	O
struct	O
pr_handle	struct
*	O
,	O
const	O
char	O
*	O
)	O
;	O
static	O
bfd_boolean	int
append_type	function
(	O
struct	O
pr_handle	struct
*	O
,	O
const	O
char	O
*	O
)	O
;	O
static	O
bfd_boolean	int
substitute_type	function
(	O
struct	O
pr_handle	struct
*	O
,	O
const	O
char	O
*	O
)	O
;	O
static	O
bfd_boolean	int
indent_type	function
(	O
struct	O
pr_handle	struct
*	O
)	O
;	O
static	O
char	O
*	O
pop_type	function
(	O
struct	O
pr_handle	struct
*	O
)	O
;	O
static	O
void	O
print_vma	function
(	O
bfd_vma	long
,	O
char	O
*	O
,	O
bfd_boolean	int
,	O
bfd_boolean	int
)	O
;	O
static	O
bfd_boolean	int
pr_fix_visibility	function
(	O
struct	O
pr_handle	struct
*	O
,	O
enum	O
debug_visibility	enum
)	O
;	O
static	O
bfd_boolean	int
pr_start_compilation_unit	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
)	O
;	O
static	O
bfd_boolean	int
pr_start_source	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
)	O
;	O
static	O
bfd_boolean	int
pr_empty_type	function
(	O
void	O
*	O
)	O
;	O
static	O
bfd_boolean	int
pr_void_type	function
(	O
void	O
*	O
)	O
;	O
static	O
bfd_boolean	int
pr_int_type	function
(	O
void	O
*	O
,	O
unsigned	O
int	O
,	O
bfd_boolean	int
)	O
;	O
static	O
bfd_boolean	int
pr_float_type	function
(	O
void	O
*	O
,	O
unsigned	O
int	O
)	O
;	O
static	O
bfd_boolean	int
pr_complex_type	function
(	O
void	O
*	O
,	O
unsigned	O
int	O
)	O
;	O
static	O
bfd_boolean	int
pr_bool_type	function
(	O
void	O
*	O
,	O
unsigned	O
int	O
)	O
;	O
static	O
bfd_boolean	int
pr_enum_type	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
const	O
char	O
*	O
*	O
,	O
bfd_signed_vma	long
*	O
)	O
;	O
static	O
bfd_boolean	int
pr_pointer_type	function
(	O
void	O
*	O
)	O
;	O
static	O
bfd_boolean	int
pr_function_type	function
(	O
void	O
*	O
,	O
int	O
,	O
bfd_boolean	int
)	O
;	O
static	O
bfd_boolean	int
pr_reference_type	function
(	O
void	O
*	O
)	O
;	O
static	O
bfd_boolean	int
pr_range_type	function
(	O
void	O
*	O
,	O
bfd_signed_vma	long
,	O
bfd_signed_vma	long
)	O
;	O
static	O
bfd_boolean	int
pr_array_type	function
(	O
void	O
*	O
,	O
bfd_signed_vma	long
,	O
bfd_signed_vma	long
,	O
bfd_boolean	int
)	O
;	O
static	O
bfd_boolean	int
pr_set_type	function
(	O
void	O
*	O
,	O
bfd_boolean	int
)	O
;	O
static	O
bfd_boolean	int
pr_offset_type	function
(	O
void	O
*	O
)	O
;	O
static	O
bfd_boolean	int
pr_method_type	function
(	O
void	O
*	O
,	O
bfd_boolean	int
,	O
int	O
,	O
bfd_boolean	int
)	O
;	O
static	O
bfd_boolean	int
pr_const_type	function
(	O
void	O
*	O
)	O
;	O
static	O
bfd_boolean	int
pr_volatile_type	function
(	O
void	O
*	O
)	O
;	O
static	O
bfd_boolean	int
pr_start_struct_type	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
unsigned	O
int	O
,	O
bfd_boolean	int
,	O
unsigned	O
int	O
)	O
;	O
static	O
bfd_boolean	int
pr_struct_field	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
bfd_vma	long
,	O
bfd_vma	long
,	O
enum	O
debug_visibility	enum
)	O
;	O
static	O
bfd_boolean	int
pr_end_struct_type	function
(	O
void	O
*	O
)	O
;	O
static	O
bfd_boolean	int
pr_start_class_type	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
unsigned	O
int	O
,	O
bfd_boolean	int
,	O
unsigned	O
int	O
,	O
bfd_boolean	int
,	O
bfd_boolean	int
)	O
;	O
static	O
bfd_boolean	int
pr_class_static_member	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
const	O
char	O
*	O
,	O
enum	O
debug_visibility	enum
)	O
;	O
static	O
bfd_boolean	int
pr_class_baseclass	function
(	O
void	O
*	O
,	O
bfd_vma	long
,	O
bfd_boolean	int
,	O
enum	O
debug_visibility	enum
)	O
;	O
static	O
bfd_boolean	int
pr_class_start_method	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
)	O
;	O
static	O
bfd_boolean	int
pr_class_method_variant	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
enum	O
debug_visibility	enum
,	O
bfd_boolean	int
,	O
bfd_boolean	int
,	O
bfd_vma	long
,	O
bfd_boolean	int
)	O
;	O
static	O
bfd_boolean	int
pr_class_static_method_variant	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
enum	O
debug_visibility	enum
,	O
bfd_boolean	int
,	O
bfd_boolean	int
)	O
;	O
static	O
bfd_boolean	int
pr_class_end_method	function
(	O
void	O
*	O
)	O
;	O
static	O
bfd_boolean	int
pr_end_class_type	function
(	O
void	O
*	O
)	O
;	O
static	O
bfd_boolean	int
pr_typedef_type	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
)	O
;	O
static	O
bfd_boolean	int
pr_tag_type	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
unsigned	O
int	O
,	O
enum	O
debug_type_kind	enum
)	O
;	O
static	O
bfd_boolean	int
pr_typdef	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
)	O
;	O
static	O
bfd_boolean	int
pr_tag	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
)	O
;	O
static	O
bfd_boolean	int
pr_int_constant	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
bfd_vma	long
)	O
;	O
static	O
bfd_boolean	int
pr_float_constant	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
double	O
)	O
;	O
static	O
bfd_boolean	int
pr_typed_constant	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
bfd_vma	long
)	O
;	O
static	O
bfd_boolean	int
pr_variable	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
enum	O
debug_var_kind	enum
,	O
bfd_vma	long
)	O
;	O
static	O
bfd_boolean	int
pr_start_function	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
bfd_boolean	int
)	O
;	O
static	O
bfd_boolean	int
pr_function_parameter	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
enum	O
debug_parm_kind	enum
,	O
bfd_vma	long
)	O
;	O
static	O
bfd_boolean	int
pr_start_block	function
(	O
void	O
*	O
,	O
bfd_vma	long
)	O
;	O
static	O
bfd_boolean	int
pr_end_block	function
(	O
void	O
*	O
,	O
bfd_vma	long
)	O
;	O
static	O
bfd_boolean	int
pr_end_function	function
(	O
void	O
*	O
)	O
;	O
static	O
bfd_boolean	int
pr_lineno	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
unsigned	O
long	O
,	O
bfd_vma	long
)	O
;	O
static	O
bfd_boolean	int
append_parent	function
(	O
struct	O
pr_handle	struct
*	O
,	O
const	O
char	O
*	O
)	O
;	O
static	O
bfd_boolean	int
tg_fix_visibility	function
(	O
struct	O
pr_handle	struct
*	O
,	O
enum	O
debug_visibility	enum
)	O
;	O
static	O
void	O
find_address_in_section	function
(	O
bfd	struct
*	O
,	O
asection	struct
*	O
,	O
void	O
*	O
)	O
;	O
static	O
void	O
translate_addresses	function
(	O
bfd	struct
*	O
,	O
char	O
*	O
,	O
FILE	struct
*	O
,	O
asymbol	struct
*	O
*	O
)	O
;	O
static	O
const	O
char	O
*	O
visibility_name	function
(	O
enum	O
debug_visibility	enum
)	O
;	O
static	O
bfd_boolean	int
tg_start_compilation_unit	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
)	O
;	O
static	O
bfd_boolean	int
tg_start_source	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
)	O
;	O
static	O
bfd_boolean	int
tg_enum_type	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
const	O
char	O
*	O
*	O
,	O
bfd_signed_vma	long
*	O
)	O
;	O
static	O
bfd_boolean	int
tg_start_struct_type	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
unsigned	O
int	O
,	O
bfd_boolean	int
,	O
unsigned	O
int	O
)	O
;	O
static	O
bfd_boolean	int
pr_struct_field	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
bfd_vma	long
,	O
bfd_vma	long
,	O
enum	O
debug_visibility	enum
)	O
;	O
static	O
bfd_boolean	int
tg_struct_field	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
bfd_vma	long
,	O
bfd_vma	long
,	O
enum	O
debug_visibility	enum
)	O
;	O
static	O
bfd_boolean	int
tg_struct_field	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
bfd_vma	long
,	O
bfd_vma	long
,	O
enum	O
debug_visibility	enum
)	O
;	O
static	O
bfd_boolean	int
tg_end_struct_type	function
(	O
void	O
*	O
)	O
;	O
static	O
bfd_boolean	int
tg_start_class_type	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
unsigned	O
int	O
,	O
bfd_boolean	int
,	O
unsigned	O
int	O
,	O
bfd_boolean	int
,	O
bfd_boolean	int
)	O
;	O
static	O
bfd_boolean	int
tg_class_static_member	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
const	O
char	O
*	O
,	O
enum	O
debug_visibility	enum
)	O
;	O
static	O
bfd_boolean	int
tg_class_baseclass	function
(	O
void	O
*	O
,	O
bfd_vma	long
,	O
bfd_boolean	int
,	O
enum	O
debug_visibility	enum
)	O
;	O
static	O
bfd_boolean	int
tg_class_method_variant	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
enum	O
debug_visibility	enum
,	O
bfd_boolean	int
,	O
bfd_boolean	int
,	O
bfd_vma	long
,	O
bfd_boolean	int
)	O
;	O
static	O
bfd_boolean	int
tg_class_static_method_variant	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
enum	O
debug_visibility	enum
,	O
bfd_boolean	int
,	O
bfd_boolean	int
)	O
;	O
static	O
bfd_boolean	int
tg_end_class_type	function
(	O
void	O
*	O
)	O
;	O
static	O
bfd_boolean	int
tg_tag_type	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
unsigned	O
int	O
,	O
enum	O
debug_type_kind	enum
)	O
;	O
static	O
bfd_boolean	int
tg_typdef	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
)	O
;	O
static	O
bfd_boolean	int
tg_tag	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
)	O
;	O
static	O
bfd_boolean	int
tg_int_constant	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
bfd_vma	long
)	O
;	O
static	O
bfd_boolean	int
tg_float_constant	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
double	O
)	O
;	O
static	O
bfd_boolean	int
tg_typed_constant	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
bfd_vma	long
)	O
;	O
static	O
bfd_boolean	int
tg_variable	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
enum	O
debug_var_kind	enum
,	O
bfd_vma	long
)	O
;	O
static	O
bfd_boolean	int
tg_start_function	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
bfd_boolean	int
)	O
;	O
static	O
bfd_boolean	int
tg_function_parameter	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
enum	O
debug_parm_kind	enum
,	O
bfd_vma	long
)	O
;	O
static	O
bfd_boolean	int
tg_start_block	function
(	O
void	O
*	O
,	O
bfd_vma	long
)	O
;	O
static	O
bfd_boolean	int
tg_end_block	function
(	O
void	O
*	O
,	O
bfd_vma	long
)	O
;	O
static	O
bfd_boolean	int
tg_lineno	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
unsigned	O
long	O
,	O
bfd_vma	long
)	O
;	O
static	O
const	O
struct	O
debug_write_fns	struct
pr_fns	struct
=	O
{	O
pr_start_compilation_unit	function
,	O
pr_start_source	function
,	O
pr_empty_type	function
,	O
pr_void_type	function
,	O
pr_int_type	function
,	O
pr_float_type	function
,	O
pr_complex_type	function
,	O
pr_bool_type	function
,	O
pr_enum_type	function
,	O
pr_pointer_type	function
,	O
pr_function_type	function
,	O
pr_reference_type	function
,	O
pr_range_type	function
,	O
pr_array_type	function
,	O
pr_set_type	function
,	O
pr_offset_type	function
,	O
pr_method_type	function
,	O
pr_const_type	function
,	O
pr_volatile_type	function
,	O
pr_start_struct_type	function
,	O
pr_struct_field	function
,	O
pr_end_struct_type	function
,	O
pr_start_class_type	function
,	O
pr_class_static_member	function
,	O
pr_class_baseclass	function
,	O
pr_class_start_method	function
,	O
pr_class_method_variant	function
,	O
pr_class_static_method_variant	function
,	O
pr_class_end_method	function
,	O
pr_end_class_type	function
,	O
pr_typedef_type	function
,	O
pr_tag_type	function
,	O
pr_typdef	function
,	O
pr_tag	function
,	O
pr_int_constant	function
,	O
pr_float_constant	function
,	O
pr_typed_constant	function
,	O
pr_variable	function
,	O
pr_start_function	function
,	O
pr_function_parameter	function
,	O
pr_start_block	function
,	O
pr_end_block	function
,	O
pr_end_function	function
,	O
pr_lineno	function
}	O
;	O
static	O
const	O
struct	O
debug_write_fns	struct
tg_fns	struct
=	O
{	O
tg_start_compilation_unit	function
,	O
tg_start_source	function
,	O
pr_empty_type	function
,	O
pr_void_type	function
,	O
pr_int_type	function
,	O
pr_float_type	function
,	O
pr_complex_type	function
,	O
pr_bool_type	function
,	O
tg_enum_type	function
,	O
pr_pointer_type	function
,	O
pr_function_type	function
,	O
pr_reference_type	function
,	O
pr_range_type	function
,	O
pr_array_type	function
,	O
pr_set_type	function
,	O
pr_offset_type	function
,	O
pr_method_type	function
,	O
pr_const_type	function
,	O
pr_volatile_type	function
,	O
tg_start_struct_type	function
,	O
tg_struct_field	function
,	O
tg_end_struct_type	function
,	O
tg_start_class_type	function
,	O
tg_class_static_member	function
,	O
tg_class_baseclass	function
,	O
pr_class_start_method	function
,	O
tg_class_method_variant	function
,	O
tg_class_static_method_variant	function
,	O
pr_class_end_method	function
,	O
tg_end_class_type	function
,	O
pr_typedef_type	function
,	O
tg_tag_type	function
,	O
tg_typdef	function
,	O
tg_tag	function
,	O
tg_int_constant	function
,	O
tg_float_constant	function
,	O
tg_typed_constant	function
,	O
tg_variable	function
,	O
tg_start_function	function
,	O
tg_function_parameter	function
,	O
tg_start_block	function
,	O
tg_end_block	function
,	O
pr_end_function	function
,	O
tg_lineno	function
}	O
;	O
static	O
int	O
demangle_flags	int
=	O
DMGL_ANSI	O
|	O
DMGL_PARAMS	O
;	O
bfd_boolean	int
print_debugging_info	function
(	O
FILE	struct
*	O
f	pointer
,	O
void	O
*	O
dhandle	pointer
,	O
bfd	struct
*	O
abfd	pointer
,	O
asymbol	struct
*	O
*	O
syms	pointer
,	O
char	O
*	O
(	O
*	O
demangler	pointer
)	O
(	O
struct	O
bfd	struct
*	O
,	O
const	O
char	O
*	O
,	O
int	O
)	O
,	O
bfd_boolean	int
as_tags	int
)	O
{	O
struct	O
pr_handle	struct
info	pointer
;	O
info	pointer
.	O
f	pointer
=	O
f	pointer
;	O
info	pointer
.	O
indent	int
=	O
0	int
;	O
info	pointer
.	O
stack	pointer
=	O
NULL	O
;	O
info	pointer
.	O
parameter	int
=	O
0	int
;	O
info	pointer
.	O
filename	pointer
=	O
NULL	O
;	O
info	pointer
.	O
abfd	pointer
=	O
abfd	pointer
;	O
info	pointer
.	O
syms	pointer
=	O
syms	pointer
;	O
info	pointer
.	O
demangler	pointer
=	O
demangler	pointer
;	O
if	O
(	O
as_tags	int
)	O
{	O
fputs	function
(	O
"!_TAG_FILE_FORMAT\t2\t/extended format/\n"	pointer
,	O
f	pointer
)	O
;	O
fputs	function
(	O
"!_TAG_FILE_SORTED\t0\t/0=unsorted, 1=sorted/\n"	pointer
,	O
f	pointer
)	O
;	O
fputs	function
(	O
"!_TAG_PROGRAM_AUTHOR\tIan Lance Taylor, Salvador E. Tropea and others\t//\n"	pointer
,	O
f	pointer
)	O
;	O
fputs	function
(	O
"!_TAG_PROGRAM_NAME\tobjdump\t/From GNU binutils/\n"	pointer
,	O
f	pointer
)	O
;	O
}	O
return	O
as_tags	int
?	O
debug_write	function
(	O
dhandle	pointer
,	O
&	O
tg_fns	struct
,	O
(	O
void	O
*	O
)	O
&	O
info	pointer
)	O
:	O
debug_write	function
(	O
dhandle	pointer
,	O
&	O
pr_fns	struct
,	O
(	O
void	O
*	O
)	O
&	O
info	pointer
)	O
;	O
}	O
static	O
void	O
indent	int
(	O
struct	O
pr_handle	struct
*	O
info	pointer
)	O
{	O
unsigned	O
int	O
i	pointer
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
info	pointer
->	O
indent	int
;	O
i	pointer
++	O
)	O
putc	function
(	O
' '	O
,	O
info	pointer
->	O
f	pointer
)	O
;	O
}	O
static	O
bfd_boolean	int
push_type	function
(	O
struct	O
pr_handle	struct
*	O
info	pointer
,	O
const	O
char	O
*	O
type	enum
)	O
{	O
struct	O
pr_stack	struct
*	O
n	pointer
;	O
if	O
(	O
type	enum
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
n	pointer
=	O
(	O
struct	O
pr_stack	struct
*	O
)	O
xmalloc	function
(	O
sizeof	O
*	O
n	pointer
)	O
;	O
memset	function
(	O
n	pointer
,	O
0	int
,	O
sizeof	O
*	O
n	pointer
)	O
;	O
n	pointer
->	O
type	enum
=	O
xstrdup	function
(	O
type	enum
)	O
;	O
n	pointer
->	O
visibility	enum
=	O
DEBUG_VISIBILITY_IGNORE	int
;	O
n	pointer
->	O
method	pointer
=	O
NULL	O
;	O
n	pointer
->	O
next	pointer
=	O
info	pointer
->	O
stack	pointer
;	O
info	pointer
->	O
stack	pointer
=	O
n	pointer
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
prepend_type	function
(	O
struct	O
pr_handle	struct
*	O
info	pointer
,	O
const	O
char	O
*	O
s	pointer
)	O
{	O
char	O
*	O
n	pointer
;	O
assert	O
(	O
info	pointer
->	O
stack	pointer
!=	O
NULL	O
)	O
;	O
n	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
s	pointer
)	O
+	O
strlen	function
(	O
info	pointer
->	O
stack	pointer
->	O
type	enum
)	O
+	O
1	int
)	O
;	O
sprintf	function
(	O
n	pointer
,	O
"%s%s"	pointer
,	O
s	pointer
,	O
info	pointer
->	O
stack	pointer
->	O
type	enum
)	O
;	O
free	function
(	O
info	pointer
->	O
stack	pointer
->	O
type	enum
)	O
;	O
info	pointer
->	O
stack	pointer
->	O
type	enum
=	O
n	pointer
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
append_type	function
(	O
struct	O
pr_handle	struct
*	O
info	pointer
,	O
const	O
char	O
*	O
s	pointer
)	O
{	O
unsigned	O
int	O
len	long
;	O
if	O
(	O
s	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
assert	O
(	O
info	pointer
->	O
stack	pointer
!=	O
NULL	O
)	O
;	O
len	long
=	O
strlen	function
(	O
info	pointer
->	O
stack	pointer
->	O
type	enum
)	O
;	O
info	pointer
->	O
stack	pointer
->	O
type	enum
=	O
(	O
char	O
*	O
)	O
xrealloc	function
(	O
info	pointer
->	O
stack	pointer
->	O
type	enum
,	O
len	long
+	O
strlen	function
(	O
s	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
info	pointer
->	O
stack	pointer
->	O
type	enum
+	O
len	long
,	O
s	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
append_parent	function
(	O
struct	O
pr_handle	struct
*	O
info	pointer
,	O
const	O
char	O
*	O
s	pointer
)	O
{	O
unsigned	O
int	O
len	long
;	O
if	O
(	O
s	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
assert	O
(	O
info	pointer
->	O
stack	pointer
!=	O
NULL	O
)	O
;	O
len	long
=	O
info	pointer
->	O
stack	pointer
->	O
parents	pointer
?	O
strlen	function
(	O
info	pointer
->	O
stack	pointer
->	O
parents	pointer
)	O
:	O
0	int
;	O
info	pointer
->	O
stack	pointer
->	O
parents	pointer
=	O
(	O
char	O
*	O
)	O
xrealloc	function
(	O
info	pointer
->	O
stack	pointer
->	O
parents	pointer
,	O
len	long
+	O
strlen	function
(	O
s	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
info	pointer
->	O
stack	pointer
->	O
parents	pointer
+	O
len	long
,	O
s	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
substitute_type	function
(	O
struct	O
pr_handle	struct
*	O
info	pointer
,	O
const	O
char	O
*	O
s	pointer
)	O
{	O
char	O
*	O
u	union
;	O
assert	O
(	O
info	pointer
->	O
stack	pointer
!=	O
NULL	O
)	O
;	O
u	union
=	O
strchr	function
(	O
info	pointer
->	O
stack	pointer
->	O
type	enum
,	O
'|'	O
)	O
;	O
if	O
(	O
u	union
!=	O
NULL	O
)	O
{	O
char	O
*	O
n	pointer
;	O
n	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
info	pointer
->	O
stack	pointer
->	O
type	enum
)	O
+	O
strlen	function
(	O
s	pointer
)	O
)	O
;	O
memcpy	function
(	O
n	pointer
,	O
info	pointer
->	O
stack	pointer
->	O
type	enum
,	O
u	union
-	O
info	pointer
->	O
stack	pointer
->	O
type	enum
)	O
;	O
strcpy	function
(	O
n	pointer
+	O
(	O
u	union
-	O
info	pointer
->	O
stack	pointer
->	O
type	enum
)	O
,	O
s	pointer
)	O
;	O
strcat	function
(	O
n	pointer
,	O
u	union
+	O
1	int
)	O
;	O
free	function
(	O
info	pointer
->	O
stack	pointer
->	O
type	enum
)	O
;	O
info	pointer
->	O
stack	pointer
->	O
type	enum
=	O
n	pointer
;	O
return	O
TRUE	int
;	O
}	O
if	O
(	O
strchr	function
(	O
s	pointer
,	O
'|'	O
)	O
!=	O
NULL	O
&&	O
(	O
strchr	function
(	O
info	pointer
->	O
stack	pointer
->	O
type	enum
,	O
'{'	O
)	O
!=	O
NULL	O
||	O
strchr	function
(	O
info	pointer
->	O
stack	pointer
->	O
type	enum
,	O
'('	O
)	O
!=	O
NULL	O
)	O
)	O
{	O
if	O
(	O
!	O
prepend_type	function
(	O
info	pointer
,	O
"("	pointer
)	O
||	O
!	O
append_type	function
(	O
info	pointer
,	O
")"	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
*	O
s	pointer
==	O
'\0'	O
)	O
return	O
TRUE	int
;	O
return	O
(	O
append_type	function
(	O
info	pointer
,	O
" "	pointer
)	O
&&	O
append_type	function
(	O
info	pointer
,	O
s	pointer
)	O
)	O
;	O
}	O
static	O
bfd_boolean	int
indent_type	function
(	O
struct	O
pr_handle	struct
*	O
info	pointer
)	O
{	O
unsigned	O
int	O
i	pointer
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
info	pointer
->	O
indent	int
;	O
i	pointer
++	O
)	O
{	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
" "	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
return	O
TRUE	int
;	O
}	O
static	O
char	O
*	O
pop_type	function
(	O
struct	O
pr_handle	struct
*	O
info	pointer
)	O
{	O
struct	O
pr_stack	struct
*	O
o	pointer
;	O
char	O
*	O
ret	pointer
;	O
assert	O
(	O
info	pointer
->	O
stack	pointer
!=	O
NULL	O
)	O
;	O
o	pointer
=	O
info	pointer
->	O
stack	pointer
;	O
info	pointer
->	O
stack	pointer
=	O
o	pointer
->	O
next	pointer
;	O
ret	pointer
=	O
o	pointer
->	O
type	enum
;	O
free	function
(	O
o	pointer
)	O
;	O
return	O
ret	pointer
;	O
}	O
static	O
void	O
print_vma	function
(	O
bfd_vma	long
vma	long
,	O
char	O
*	O
buf	pointer
,	O
bfd_boolean	int
unsignedp	int
,	O
bfd_boolean	int
hexp	int
)	O
{	O
if	O
(	O
sizeof	O
(	O
vma	long
)	O
<=	O
sizeof	O
(	O
unsigned	O
long	O
)	O
)	O
{	O
if	O
(	O
hexp	int
)	O
sprintf	function
(	O
buf	pointer
,	O
"0x%lx"	pointer
,	O
(	O
unsigned	O
long	O
)	O
vma	long
)	O
;	O
else	O
if	O
(	O
unsignedp	int
)	O
sprintf	function
(	O
buf	pointer
,	O
"%lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
vma	long
)	O
;	O
else	O
sprintf	function
(	O
buf	pointer
,	O
"%ld"	pointer
,	O
(	O
long	O
)	O
vma	long
)	O
;	O
}	O
else	O
{	O
buf	pointer
[	O
0	int
]	O
=	O
'0'	O
;	O
buf	pointer
[	O
1	int
]	O
=	O
'x'	O
;	O
sprintf_vma	O
(	O
buf	pointer
+	O
2	int
,	O
vma	long
)	O
;	O
}	O
}	O
static	O
bfd_boolean	int
pr_start_compilation_unit	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
assert	O
(	O
info	pointer
->	O
indent	int
==	O
0	int
)	O
;	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"%s:\n"	pointer
,	O
filename	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
pr_start_source	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
assert	O
(	O
info	pointer
->	O
indent	int
==	O
0	int
)	O
;	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
" %s:\n"	pointer
,	O
filename	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
pr_empty_type	function
(	O
void	O
*	O
p	pointer
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
return	O
push_type	function
(	O
info	pointer
,	O
"<undefined>"	pointer
)	O
;	O
}	O
static	O
bfd_boolean	int
pr_void_type	function
(	O
void	O
*	O
p	pointer
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
return	O
push_type	function
(	O
info	pointer
,	O
"void"	pointer
)	O
;	O
}	O
static	O
bfd_boolean	int
pr_int_type	function
(	O
void	O
*	O
p	pointer
,	O
unsigned	O
int	O
size	int
,	O
bfd_boolean	int
unsignedp	int
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
ab	array
[	O
40	int
]	O
;	O
sprintf	function
(	O
ab	array
,	O
"%sint%d"	pointer
,	O
unsignedp	int
?	O
"u"	pointer
:	O
""	pointer
,	O
size	int
*	O
8	int
)	O
;	O
return	O
push_type	function
(	O
info	pointer
,	O
ab	array
)	O
;	O
}	O
static	O
bfd_boolean	int
pr_float_type	function
(	O
void	O
*	O
p	pointer
,	O
unsigned	O
int	O
size	int
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
ab	array
[	O
40	int
]	O
;	O
if	O
(	O
size	int
==	O
4	int
)	O
return	O
push_type	function
(	O
info	pointer
,	O
"float"	pointer
)	O
;	O
else	O
if	O
(	O
size	int
==	O
8	int
)	O
return	O
push_type	function
(	O
info	pointer
,	O
"double"	pointer
)	O
;	O
sprintf	function
(	O
ab	array
,	O
"float%d"	pointer
,	O
size	int
*	O
8	int
)	O
;	O
return	O
push_type	function
(	O
info	pointer
,	O
ab	array
)	O
;	O
}	O
static	O
bfd_boolean	int
pr_complex_type	function
(	O
void	O
*	O
p	pointer
,	O
unsigned	O
int	O
size	int
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
if	O
(	O
!	O
pr_float_type	function
(	O
p	pointer
,	O
size	int
)	O
)	O
return	O
FALSE	int
;	O
return	O
prepend_type	function
(	O
info	pointer
,	O
"complex "	pointer
)	O
;	O
}	O
static	O
bfd_boolean	int
pr_bool_type	function
(	O
void	O
*	O
p	pointer
,	O
unsigned	O
int	O
size	int
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
ab	array
[	O
40	int
]	O
;	O
sprintf	function
(	O
ab	array
,	O
"bool%d"	pointer
,	O
size	int
*	O
8	int
)	O
;	O
return	O
push_type	function
(	O
info	pointer
,	O
ab	array
)	O
;	O
}	O
static	O
bfd_boolean	int
pr_enum_type	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
tag	pointer
,	O
const	O
char	O
*	O
*	O
names	pointer
,	O
bfd_signed_vma	long
*	O
values	pointer
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
unsigned	O
int	O
i	pointer
;	O
bfd_signed_vma	long
val	array
;	O
if	O
(	O
!	O
push_type	function
(	O
info	pointer
,	O
"enum "	pointer
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
tag	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
tag	pointer
)	O
||	O
!	O
append_type	function
(	O
info	pointer
,	O
" "	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
"{ "	pointer
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
names	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
"/* undefined */"	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
else	O
{	O
val	array
=	O
0	int
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
names	pointer
[	O
i	pointer
]	O
!=	O
NULL	O
;	O
i	pointer
++	O
)	O
{	O
if	O
(	O
i	pointer
>	O
0	int
)	O
{	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
", "	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
names	pointer
[	O
i	pointer
]	O
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
values	pointer
[	O
i	pointer
]	O
!=	O
val	array
)	O
{	O
char	O
ab	array
[	O
22	int
]	O
;	O
print_vma	function
(	O
values	pointer
[	O
i	pointer
]	O
,	O
ab	array
,	O
FALSE	int
,	O
FALSE	int
)	O
;	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
" = "	pointer
)	O
||	O
!	O
append_type	function
(	O
info	pointer
,	O
ab	array
)	O
)	O
return	O
FALSE	int
;	O
val	array
=	O
values	pointer
[	O
i	pointer
]	O
;	O
}	O
++	O
val	array
;	O
}	O
}	O
return	O
append_type	function
(	O
info	pointer
,	O
" }"	pointer
)	O
;	O
}	O
static	O
bfd_boolean	int
pr_pointer_type	function
(	O
void	O
*	O
p	pointer
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
s	pointer
;	O
assert	O
(	O
info	pointer
->	O
stack	pointer
!=	O
NULL	O
)	O
;	O
s	pointer
=	O
strchr	function
(	O
info	pointer
->	O
stack	pointer
->	O
type	enum
,	O
'|'	O
)	O
;	O
if	O
(	O
s	pointer
!=	O
NULL	O
&&	O
s	pointer
[	O
1	int
]	O
==	O
'['	O
)	O
return	O
substitute_type	function
(	O
info	pointer
,	O
"(*|)"	pointer
)	O
;	O
return	O
substitute_type	function
(	O
info	pointer
,	O
"*|"	pointer
)	O
;	O
}	O
static	O
bfd_boolean	int
pr_function_type	function
(	O
void	O
*	O
p	pointer
,	O
int	O
argcount	int
,	O
bfd_boolean	int
varargs	int
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
*	O
arg_types	pointer
;	O
unsigned	O
int	O
len	long
;	O
char	O
*	O
s	pointer
;	O
assert	O
(	O
info	pointer
->	O
stack	pointer
!=	O
NULL	O
)	O
;	O
len	long
=	O
10	int
;	O
if	O
(	O
argcount	int
<=	O
0	int
)	O
{	O
arg_types	pointer
=	O
NULL	O
;	O
len	long
+=	O
15	int
;	O
}	O
else	O
{	O
int	O
i	pointer
;	O
arg_types	pointer
=	O
(	O
char	O
*	O
*	O
)	O
xmalloc	function
(	O
argcount	int
*	O
sizeof	O
*	O
arg_types	pointer
)	O
;	O
for	O
(	O
i	pointer
=	O
argcount	int
-	O
1	int
;	O
i	pointer
>=	O
0	int
;	O
i	pointer
--	O
)	O
{	O
if	O
(	O
!	O
substitute_type	function
(	O
info	pointer
,	O
""	pointer
)	O
)	O
{	O
free	function
(	O
arg_types	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
arg_types	pointer
[	O
i	pointer
]	O
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
arg_types	pointer
[	O
i	pointer
]	O
==	O
NULL	O
)	O
{	O
free	function
(	O
arg_types	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
len	long
+=	O
strlen	function
(	O
arg_types	pointer
[	O
i	pointer
]	O
)	O
+	O
2	int
;	O
}	O
if	O
(	O
varargs	int
)	O
len	long
+=	O
5	int
;	O
}	O
s	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
len	long
)	O
;	O
LITSTRCPY	O
(	O
s	pointer
,	O
"(|) ("	pointer
)	O
;	O
if	O
(	O
argcount	int
<	O
0	int
)	O
strcat	function
(	O
s	pointer
,	O
"/* unknown */"	pointer
)	O
;	O
else	O
{	O
int	O
i	pointer
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
argcount	int
;	O
i	pointer
++	O
)	O
{	O
if	O
(	O
i	pointer
>	O
0	int
)	O
strcat	function
(	O
s	pointer
,	O
", "	pointer
)	O
;	O
strcat	function
(	O
s	pointer
,	O
arg_types	pointer
[	O
i	pointer
]	O
)	O
;	O
}	O
if	O
(	O
varargs	int
)	O
{	O
if	O
(	O
i	pointer
>	O
0	int
)	O
strcat	function
(	O
s	pointer
,	O
", "	pointer
)	O
;	O
strcat	function
(	O
s	pointer
,	O
"..."	pointer
)	O
;	O
}	O
if	O
(	O
argcount	int
>	O
0	int
)	O
free	function
(	O
arg_types	pointer
)	O
;	O
}	O
strcat	function
(	O
s	pointer
,	O
")"	pointer
)	O
;	O
if	O
(	O
!	O
substitute_type	function
(	O
info	pointer
,	O
s	pointer
)	O
)	O
return	O
FALSE	int
;	O
free	function
(	O
s	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
pr_reference_type	function
(	O
void	O
*	O
p	pointer
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
assert	O
(	O
info	pointer
->	O
stack	pointer
!=	O
NULL	O
)	O
;	O
return	O
substitute_type	function
(	O
info	pointer
,	O
"&|"	pointer
)	O
;	O
}	O
static	O
bfd_boolean	int
pr_range_type	function
(	O
void	O
*	O
p	pointer
,	O
bfd_signed_vma	long
lower	long
,	O
bfd_signed_vma	long
upper	long
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
abl	array
[	O
22	int
]	O
,	O
abu	array
[	O
22	int
]	O
;	O
assert	O
(	O
info	pointer
->	O
stack	pointer
!=	O
NULL	O
)	O
;	O
if	O
(	O
!	O
substitute_type	function
(	O
info	pointer
,	O
""	pointer
)	O
)	O
return	O
FALSE	int
;	O
print_vma	function
(	O
lower	long
,	O
abl	array
,	O
FALSE	int
,	O
FALSE	int
)	O
;	O
print_vma	function
(	O
upper	long
,	O
abu	array
,	O
FALSE	int
,	O
FALSE	int
)	O
;	O
return	O
(	O
prepend_type	function
(	O
info	pointer
,	O
"range ("	pointer
)	O
&&	O
append_type	function
(	O
info	pointer
,	O
"):"	pointer
)	O
&&	O
append_type	function
(	O
info	pointer
,	O
abl	array
)	O
&&	O
append_type	function
(	O
info	pointer
,	O
":"	pointer
)	O
&&	O
append_type	function
(	O
info	pointer
,	O
abu	array
)	O
)	O
;	O
}	O
static	O
bfd_boolean	int
pr_array_type	function
(	O
void	O
*	O
p	pointer
,	O
bfd_signed_vma	long
lower	long
,	O
bfd_signed_vma	long
upper	long
,	O
bfd_boolean	int
stringp	int
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
range_type	pointer
;	O
char	O
abl	array
[	O
22	int
]	O
,	O
abu	array
[	O
22	int
]	O
,	O
ab	array
[	O
50	int
]	O
;	O
range_type	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
range_type	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
lower	long
==	O
0	int
)	O
{	O
if	O
(	O
upper	long
==	O
-	O
1	int
)	O
sprintf	function
(	O
ab	array
,	O
"|[]"	pointer
)	O
;	O
else	O
{	O
print_vma	function
(	O
upper	long
+	O
1	int
,	O
abu	array
,	O
FALSE	int
,	O
FALSE	int
)	O
;	O
sprintf	function
(	O
ab	array
,	O
"|[%s]"	pointer
,	O
abu	array
)	O
;	O
}	O
}	O
else	O
{	O
print_vma	function
(	O
lower	long
,	O
abl	array
,	O
FALSE	int
,	O
FALSE	int
)	O
;	O
print_vma	function
(	O
upper	long
,	O
abu	array
,	O
FALSE	int
,	O
FALSE	int
)	O
;	O
sprintf	function
(	O
ab	array
,	O
"|[%s:%s]"	pointer
,	O
abl	array
,	O
abu	array
)	O
;	O
}	O
if	O
(	O
!	O
substitute_type	function
(	O
info	pointer
,	O
ab	array
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
strcmp	function
(	O
range_type	pointer
,	O
"int"	pointer
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
":"	pointer
)	O
||	O
!	O
append_type	function
(	O
info	pointer
,	O
range_type	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
stringp	int
)	O
{	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
" /* string */"	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
pr_set_type	function
(	O
void	O
*	O
p	pointer
,	O
bfd_boolean	int
bitstringp	int
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
if	O
(	O
!	O
substitute_type	function
(	O
info	pointer
,	O
""	pointer
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
!	O
prepend_type	function
(	O
info	pointer
,	O
"set { "	pointer
)	O
||	O
!	O
append_type	function
(	O
info	pointer
,	O
" }"	pointer
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
bitstringp	int
)	O
{	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
"/* bitstring */"	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
pr_offset_type	function
(	O
void	O
*	O
p	pointer
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
t	pointer
;	O
if	O
(	O
!	O
substitute_type	function
(	O
info	pointer
,	O
""	pointer
)	O
)	O
return	O
FALSE	int
;	O
t	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
t	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
return	O
(	O
substitute_type	function
(	O
info	pointer
,	O
""	pointer
)	O
&&	O
prepend_type	function
(	O
info	pointer
,	O
" "	pointer
)	O
&&	O
prepend_type	function
(	O
info	pointer
,	O
t	pointer
)	O
&&	O
append_type	function
(	O
info	pointer
,	O
"::|"	pointer
)	O
)	O
;	O
}	O
static	O
bfd_boolean	int
pr_method_type	function
(	O
void	O
*	O
p	pointer
,	O
bfd_boolean	int
domain	int
,	O
int	O
argcount	int
,	O
bfd_boolean	int
varargs	int
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
unsigned	O
int	O
len	long
;	O
char	O
*	O
domain_type	pointer
;	O
char	O
*	O
*	O
arg_types	pointer
;	O
char	O
*	O
s	pointer
;	O
len	long
=	O
10	int
;	O
if	O
(	O
!	O
domain	int
)	O
domain_type	pointer
=	O
NULL	O
;	O
else	O
{	O
if	O
(	O
!	O
substitute_type	function
(	O
info	pointer
,	O
""	pointer
)	O
)	O
return	O
FALSE	int
;	O
domain_type	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
domain_type	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
CONST_STRNEQ	O
(	O
domain_type	pointer
,	O
"class "	pointer
)	O
&&	O
strchr	function
(	O
domain_type	pointer
+	O
sizeof	O
"class "	pointer
-	O
1	int
,	O
' '	O
)	O
==	O
NULL	O
)	O
domain_type	pointer
+=	O
sizeof	O
"class "	pointer
-	O
1	int
;	O
else	O
if	O
(	O
CONST_STRNEQ	O
(	O
domain_type	pointer
,	O
"union class "	pointer
)	O
&&	O
(	O
strchr	function
(	O
domain_type	pointer
+	O
sizeof	O
"union class "	pointer
-	O
1	int
,	O
' '	O
)	O
==	O
NULL	O
)	O
)	O
domain_type	pointer
+=	O
sizeof	O
"union class "	pointer
-	O
1	int
;	O
len	long
+=	O
strlen	function
(	O
domain_type	pointer
)	O
;	O
}	O
if	O
(	O
argcount	int
<=	O
0	int
)	O
{	O
arg_types	pointer
=	O
NULL	O
;	O
len	long
+=	O
15	int
;	O
}	O
else	O
{	O
int	O
i	pointer
;	O
arg_types	pointer
=	O
(	O
char	O
*	O
*	O
)	O
xmalloc	function
(	O
argcount	int
*	O
sizeof	O
*	O
arg_types	pointer
)	O
;	O
for	O
(	O
i	pointer
=	O
argcount	int
-	O
1	int
;	O
i	pointer
>=	O
0	int
;	O
i	pointer
--	O
)	O
{	O
if	O
(	O
!	O
substitute_type	function
(	O
info	pointer
,	O
""	pointer
)	O
)	O
{	O
free	function
(	O
arg_types	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
arg_types	pointer
[	O
i	pointer
]	O
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
arg_types	pointer
[	O
i	pointer
]	O
==	O
NULL	O
)	O
{	O
free	function
(	O
arg_types	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
len	long
+=	O
strlen	function
(	O
arg_types	pointer
[	O
i	pointer
]	O
)	O
+	O
2	int
;	O
}	O
if	O
(	O
varargs	int
)	O
len	long
+=	O
5	int
;	O
}	O
s	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
len	long
)	O
;	O
if	O
(	O
!	O
domain	int
)	O
*	O
s	pointer
=	O
'\0'	O
;	O
else	O
strcpy	function
(	O
s	pointer
,	O
domain_type	pointer
)	O
;	O
strcat	function
(	O
s	pointer
,	O
"::| ("	pointer
)	O
;	O
if	O
(	O
argcount	int
<	O
0	int
)	O
strcat	function
(	O
s	pointer
,	O
"/* unknown */"	pointer
)	O
;	O
else	O
{	O
int	O
i	pointer
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
argcount	int
;	O
i	pointer
++	O
)	O
{	O
if	O
(	O
i	pointer
>	O
0	int
)	O
strcat	function
(	O
s	pointer
,	O
", "	pointer
)	O
;	O
strcat	function
(	O
s	pointer
,	O
arg_types	pointer
[	O
i	pointer
]	O
)	O
;	O
}	O
if	O
(	O
varargs	int
)	O
{	O
if	O
(	O
i	pointer
>	O
0	int
)	O
strcat	function
(	O
s	pointer
,	O
", "	pointer
)	O
;	O
strcat	function
(	O
s	pointer
,	O
"..."	pointer
)	O
;	O
}	O
if	O
(	O
argcount	int
>	O
0	int
)	O
free	function
(	O
arg_types	pointer
)	O
;	O
}	O
strcat	function
(	O
s	pointer
,	O
")"	pointer
)	O
;	O
if	O
(	O
!	O
substitute_type	function
(	O
info	pointer
,	O
s	pointer
)	O
)	O
return	O
FALSE	int
;	O
free	function
(	O
s	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
pr_const_type	function
(	O
void	O
*	O
p	pointer
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
return	O
substitute_type	function
(	O
info	pointer
,	O
"const |"	pointer
)	O
;	O
}	O
static	O
bfd_boolean	int
pr_volatile_type	function
(	O
void	O
*	O
p	pointer
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
return	O
substitute_type	function
(	O
info	pointer
,	O
"volatile |"	pointer
)	O
;	O
}	O
static	O
bfd_boolean	int
pr_start_struct_type	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
tag	pointer
,	O
unsigned	O
int	O
id	int
,	O
bfd_boolean	int
structp	int
,	O
unsigned	O
int	O
size	int
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
info	pointer
->	O
indent	int
+=	O
2	int
;	O
if	O
(	O
!	O
push_type	function
(	O
info	pointer
,	O
structp	int
?	O
"struct "	pointer
:	O
"union "	pointer
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
tag	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
tag	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
else	O
{	O
char	O
idbuf	array
[	O
20	int
]	O
;	O
sprintf	function
(	O
idbuf	array
,	O
"%%anon%u"	pointer
,	O
id	int
)	O
;	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
idbuf	array
)	O
)	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
" {"	pointer
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
size	int
!=	O
0	int
||	O
tag	pointer
!=	O
NULL	O
)	O
{	O
char	O
ab	array
[	O
30	int
]	O
;	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
" /*"	pointer
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
size	int
!=	O
0	int
)	O
{	O
sprintf	function
(	O
ab	array
,	O
" size %u"	pointer
,	O
size	int
)	O
;	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
ab	array
)	O
)	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
tag	pointer
!=	O
NULL	O
)	O
{	O
sprintf	function
(	O
ab	array
,	O
" id %u"	pointer
,	O
id	int
)	O
;	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
ab	array
)	O
)	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
" */"	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
"\n"	pointer
)	O
)	O
return	O
FALSE	int
;	O
info	pointer
->	O
stack	pointer
->	O
visibility	enum
=	O
DEBUG_VISIBILITY_PUBLIC	int
;	O
return	O
indent_type	function
(	O
info	pointer
)	O
;	O
}	O
static	O
bfd_boolean	int
pr_fix_visibility	function
(	O
struct	O
pr_handle	struct
*	O
info	pointer
,	O
enum	O
debug_visibility	enum
visibility	enum
)	O
{	O
const	O
char	O
*	O
s	pointer
=	O
NULL	O
;	O
char	O
*	O
t	pointer
;	O
unsigned	O
int	O
len	long
;	O
assert	O
(	O
info	pointer
->	O
stack	pointer
!=	O
NULL	O
)	O
;	O
if	O
(	O
info	pointer
->	O
stack	pointer
->	O
visibility	enum
==	O
visibility	enum
)	O
return	O
TRUE	int
;	O
switch	O
(	O
visibility	enum
)	O
{	O
case	O
DEBUG_VISIBILITY_PUBLIC	int
:	O
s	pointer
=	O
"public"	pointer
;	O
break	O
;	O
case	O
DEBUG_VISIBILITY_PRIVATE	int
:	O
s	pointer
=	O
"private"	pointer
;	O
break	O
;	O
case	O
DEBUG_VISIBILITY_PROTECTED	int
:	O
s	pointer
=	O
"protected"	pointer
;	O
break	O
;	O
case	O
DEBUG_VISIBILITY_IGNORE	int
:	O
s	pointer
=	O
"/* ignore */"	pointer
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
return	O
FALSE	int
;	O
}	O
t	pointer
=	O
info	pointer
->	O
stack	pointer
->	O
type	enum
;	O
len	long
=	O
strlen	function
(	O
t	pointer
)	O
;	O
assert	O
(	O
t	pointer
[	O
len	long
-	O
1	int
]	O
==	O
' '	O
)	O
;	O
t	pointer
[	O
len	long
-	O
1	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
s	pointer
)	O
||	O
!	O
append_type	function
(	O
info	pointer
,	O
":\n"	pointer
)	O
||	O
!	O
indent_type	function
(	O
info	pointer
)	O
)	O
return	O
FALSE	int
;	O
info	pointer
->	O
stack	pointer
->	O
visibility	enum
=	O
visibility	enum
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
pr_struct_field	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
bfd_vma	long
bitpos	int
,	O
bfd_vma	long
bitsize	int
,	O
enum	O
debug_visibility	enum
visibility	enum
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
ab	array
[	O
22	int
]	O
;	O
char	O
*	O
t	pointer
;	O
if	O
(	O
!	O
substitute_type	function
(	O
info	pointer
,	O
name	pointer
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
"; /* "	pointer
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
bitsize	int
!=	O
0	int
)	O
{	O
print_vma	function
(	O
bitsize	int
,	O
ab	array
,	O
TRUE	int
,	O
FALSE	int
)	O
;	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
"bitsize "	pointer
)	O
||	O
!	O
append_type	function
(	O
info	pointer
,	O
ab	array
)	O
||	O
!	O
append_type	function
(	O
info	pointer
,	O
", "	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
print_vma	function
(	O
bitpos	int
,	O
ab	array
,	O
TRUE	int
,	O
FALSE	int
)	O
;	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
"bitpos "	pointer
)	O
||	O
!	O
append_type	function
(	O
info	pointer
,	O
ab	array
)	O
||	O
!	O
append_type	function
(	O
info	pointer
,	O
" */\n"	pointer
)	O
||	O
!	O
indent_type	function
(	O
info	pointer
)	O
)	O
return	O
FALSE	int
;	O
t	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
t	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
!	O
pr_fix_visibility	function
(	O
info	pointer
,	O
visibility	enum
)	O
)	O
return	O
FALSE	int
;	O
return	O
append_type	function
(	O
info	pointer
,	O
t	pointer
)	O
;	O
}	O
static	O
bfd_boolean	int
pr_end_struct_type	function
(	O
void	O
*	O
p	pointer
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
s	pointer
;	O
assert	O
(	O
info	pointer
->	O
stack	pointer
!=	O
NULL	O
)	O
;	O
assert	O
(	O
info	pointer
->	O
indent	int
>=	O
2	int
)	O
;	O
info	pointer
->	O
indent	int
-=	O
2	int
;	O
s	pointer
=	O
info	pointer
->	O
stack	pointer
->	O
type	enum
+	O
strlen	function
(	O
info	pointer
->	O
stack	pointer
->	O
type	enum
)	O
-	O
2	int
;	O
assert	O
(	O
s	pointer
[	O
0	int
]	O
==	O
' '	O
&&	O
s	pointer
[	O
1	int
]	O
==	O
' '	O
&&	O
s	pointer
[	O
2	int
]	O
==	O
'\0'	O
)	O
;	O
*	O
s	pointer
++	O
=	O
'}'	O
;	O
*	O
s	pointer
=	O
'\0'	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
pr_start_class_type	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
tag	pointer
,	O
unsigned	O
int	O
id	int
,	O
bfd_boolean	int
structp	int
,	O
unsigned	O
int	O
size	int
,	O
bfd_boolean	int
vptr	int
,	O
bfd_boolean	int
ownvptr	int
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
tv	pointer
=	O
NULL	O
;	O
info	pointer
->	O
indent	int
+=	O
2	int
;	O
if	O
(	O
vptr	int
&&	O
!	O
ownvptr	int
)	O
{	O
tv	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
tv	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
!	O
push_type	function
(	O
info	pointer
,	O
structp	int
?	O
"class "	pointer
:	O
"union class "	pointer
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
tag	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
tag	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
else	O
{	O
char	O
idbuf	array
[	O
20	int
]	O
;	O
sprintf	function
(	O
idbuf	array
,	O
"%%anon%u"	pointer
,	O
id	int
)	O
;	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
idbuf	array
)	O
)	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
" {"	pointer
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
size	int
!=	O
0	int
||	O
vptr	int
||	O
ownvptr	int
||	O
tag	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
" /*"	pointer
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
size	int
!=	O
0	int
)	O
{	O
char	O
ab	array
[	O
20	int
]	O
;	O
sprintf	function
(	O
ab	array
,	O
"%u"	pointer
,	O
size	int
)	O
;	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
" size "	pointer
)	O
||	O
!	O
append_type	function
(	O
info	pointer
,	O
ab	array
)	O
)	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
vptr	int
)	O
{	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
" vtable "	pointer
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
ownvptr	int
)	O
{	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
"self "	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
else	O
{	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
tv	pointer
)	O
||	O
!	O
append_type	function
(	O
info	pointer
,	O
" "	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
}	O
if	O
(	O
tag	pointer
!=	O
NULL	O
)	O
{	O
char	O
ab	array
[	O
30	int
]	O
;	O
sprintf	function
(	O
ab	array
,	O
" id %u"	pointer
,	O
id	int
)	O
;	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
ab	array
)	O
)	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
" */"	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
info	pointer
->	O
stack	pointer
->	O
visibility	enum
=	O
DEBUG_VISIBILITY_PRIVATE	int
;	O
return	O
(	O
append_type	function
(	O
info	pointer
,	O
"\n"	pointer
)	O
&&	O
indent_type	function
(	O
info	pointer
)	O
)	O
;	O
}	O
static	O
bfd_boolean	int
pr_class_static_member	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
const	O
char	O
*	O
physname	pointer
,	O
enum	O
debug_visibility	enum
visibility	enum
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
t	pointer
;	O
if	O
(	O
!	O
substitute_type	function
(	O
info	pointer
,	O
name	pointer
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
!	O
prepend_type	function
(	O
info	pointer
,	O
"static "	pointer
)	O
||	O
!	O
append_type	function
(	O
info	pointer
,	O
"; /* "	pointer
)	O
||	O
!	O
append_type	function
(	O
info	pointer
,	O
physname	pointer
)	O
||	O
!	O
append_type	function
(	O
info	pointer
,	O
" */\n"	pointer
)	O
||	O
!	O
indent_type	function
(	O
info	pointer
)	O
)	O
return	O
FALSE	int
;	O
t	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
t	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
!	O
pr_fix_visibility	function
(	O
info	pointer
,	O
visibility	enum
)	O
)	O
return	O
FALSE	int
;	O
return	O
append_type	function
(	O
info	pointer
,	O
t	pointer
)	O
;	O
}	O
static	O
bfd_boolean	int
pr_class_baseclass	function
(	O
void	O
*	O
p	pointer
,	O
bfd_vma	long
bitpos	int
,	O
bfd_boolean	int
is_virtual	int
,	O
enum	O
debug_visibility	enum
visibility	enum
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
t	pointer
;	O
const	O
char	O
*	O
prefix	pointer
;	O
char	O
ab	array
[	O
22	int
]	O
;	O
char	O
*	O
s	pointer
,	O
*	O
l	pointer
,	O
*	O
n	pointer
;	O
assert	O
(	O
info	pointer
->	O
stack	pointer
!=	O
NULL	O
&&	O
info	pointer
->	O
stack	pointer
->	O
next	pointer
!=	O
NULL	O
)	O
;	O
if	O
(	O
!	O
substitute_type	function
(	O
info	pointer
,	O
""	pointer
)	O
)	O
return	O
FALSE	int
;	O
t	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
t	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
CONST_STRNEQ	O
(	O
t	pointer
,	O
"class "	pointer
)	O
)	O
t	pointer
+=	O
sizeof	O
"class "	pointer
-	O
1	int
;	O
if	O
(	O
!	O
push_type	function
(	O
info	pointer
,	O
t	pointer
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
is_virtual	int
)	O
{	O
if	O
(	O
!	O
prepend_type	function
(	O
info	pointer
,	O
"virtual "	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
switch	O
(	O
visibility	enum
)	O
{	O
case	O
DEBUG_VISIBILITY_PUBLIC	int
:	O
prefix	pointer
=	O
"public "	pointer
;	O
break	O
;	O
case	O
DEBUG_VISIBILITY_PROTECTED	int
:	O
prefix	pointer
=	O
"protected "	pointer
;	O
break	O
;	O
case	O
DEBUG_VISIBILITY_PRIVATE	int
:	O
prefix	pointer
=	O
"private "	pointer
;	O
break	O
;	O
default	O
:	O
prefix	pointer
=	O
"/* unknown visibility */ "	pointer
;	O
break	O
;	O
}	O
if	O
(	O
!	O
prepend_type	function
(	O
info	pointer
,	O
prefix	pointer
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
bitpos	int
!=	O
0	int
)	O
{	O
print_vma	function
(	O
bitpos	int
,	O
ab	array
,	O
TRUE	int
,	O
FALSE	int
)	O
;	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
" /* bitpos "	pointer
)	O
||	O
!	O
append_type	function
(	O
info	pointer
,	O
ab	array
)	O
||	O
!	O
append_type	function
(	O
info	pointer
,	O
" */"	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
s	pointer
=	O
strchr	function
(	O
info	pointer
->	O
stack	pointer
->	O
next	pointer
->	O
type	enum
,	O
'{'	O
)	O
;	O
assert	O
(	O
s	pointer
!=	O
NULL	O
)	O
;	O
--	O
s	pointer
;	O
for	O
(	O
l	pointer
=	O
info	pointer
->	O
stack	pointer
->	O
next	pointer
->	O
type	enum
;	O
l	pointer
!=	O
s	pointer
;	O
l	pointer
++	O
)	O
if	O
(	O
*	O
l	pointer
==	O
':'	O
)	O
break	O
;	O
if	O
(	O
!	O
prepend_type	function
(	O
info	pointer
,	O
l	pointer
==	O
s	pointer
?	O
" : "	pointer
:	O
", "	pointer
)	O
)	O
return	O
FALSE	int
;	O
t	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
t	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
n	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
info	pointer
->	O
stack	pointer
->	O
type	enum
)	O
+	O
strlen	function
(	O
t	pointer
)	O
+	O
1	int
)	O
;	O
memcpy	function
(	O
n	pointer
,	O
info	pointer
->	O
stack	pointer
->	O
type	enum
,	O
s	pointer
-	O
info	pointer
->	O
stack	pointer
->	O
type	enum
)	O
;	O
strcpy	function
(	O
n	pointer
+	O
(	O
s	pointer
-	O
info	pointer
->	O
stack	pointer
->	O
type	enum
)	O
,	O
t	pointer
)	O
;	O
strcat	function
(	O
n	pointer
,	O
s	pointer
)	O
;	O
free	function
(	O
info	pointer
->	O
stack	pointer
->	O
type	enum
)	O
;	O
info	pointer
->	O
stack	pointer
->	O
type	enum
=	O
n	pointer
;	O
free	function
(	O
t	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
pr_class_start_method	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
assert	O
(	O
info	pointer
->	O
stack	pointer
!=	O
NULL	O
)	O
;	O
info	pointer
->	O
stack	pointer
->	O
method	pointer
=	O
name	pointer
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
pr_class_method_variant	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
physname	pointer
,	O
enum	O
debug_visibility	enum
visibility	enum
,	O
bfd_boolean	int
constp	int
,	O
bfd_boolean	int
volatilep	int
,	O
bfd_vma	long
voffset	long
,	O
bfd_boolean	int
context	int
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
method_type	pointer
;	O
char	O
*	O
context_type	pointer
;	O
assert	O
(	O
info	pointer
->	O
stack	pointer
!=	O
NULL	O
)	O
;	O
assert	O
(	O
info	pointer
->	O
stack	pointer
->	O
next	pointer
!=	O
NULL	O
)	O
;	O
if	O
(	O
volatilep	int
)	O
{	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
" volatile"	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
constp	int
)	O
{	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
" const"	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
!	O
substitute_type	function
(	O
info	pointer
,	O
(	O
context	int
?	O
info	pointer
->	O
stack	pointer
->	O
next	pointer
->	O
next	pointer
->	O
method	pointer
:	O
info	pointer
->	O
stack	pointer
->	O
next	pointer
->	O
method	pointer
)	O
)	O
)	O
return	O
FALSE	int
;	O
method_type	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
method_type	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
!	O
context	int
)	O
context_type	pointer
=	O
NULL	O
;	O
else	O
{	O
context_type	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
context_type	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
!	O
pr_fix_visibility	function
(	O
info	pointer
,	O
visibility	enum
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
method_type	pointer
)	O
||	O
!	O
append_type	function
(	O
info	pointer
,	O
" /* "	pointer
)	O
||	O
!	O
append_type	function
(	O
info	pointer
,	O
physname	pointer
)	O
||	O
!	O
append_type	function
(	O
info	pointer
,	O
" "	pointer
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
context	int
||	O
voffset	long
!=	O
0	int
)	O
{	O
char	O
ab	array
[	O
22	int
]	O
;	O
if	O
(	O
context	int
)	O
{	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
"context "	pointer
)	O
||	O
!	O
append_type	function
(	O
info	pointer
,	O
context_type	pointer
)	O
||	O
!	O
append_type	function
(	O
info	pointer
,	O
" "	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
print_vma	function
(	O
voffset	long
,	O
ab	array
,	O
TRUE	int
,	O
FALSE	int
)	O
;	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
"voffset "	pointer
)	O
||	O
!	O
append_type	function
(	O
info	pointer
,	O
ab	array
)	O
)	O
return	O
FALSE	int
;	O
}	O
return	O
(	O
append_type	function
(	O
info	pointer
,	O
" */;\n"	pointer
)	O
&&	O
indent_type	function
(	O
info	pointer
)	O
)	O
;	O
}	O
static	O
bfd_boolean	int
pr_class_static_method_variant	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
physname	pointer
,	O
enum	O
debug_visibility	enum
visibility	enum
,	O
bfd_boolean	int
constp	int
,	O
bfd_boolean	int
volatilep	int
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
method_type	pointer
;	O
assert	O
(	O
info	pointer
->	O
stack	pointer
!=	O
NULL	O
)	O
;	O
assert	O
(	O
info	pointer
->	O
stack	pointer
->	O
next	pointer
!=	O
NULL	O
)	O
;	O
assert	O
(	O
info	pointer
->	O
stack	pointer
->	O
next	pointer
->	O
method	pointer
!=	O
NULL	O
)	O
;	O
if	O
(	O
volatilep	int
)	O
{	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
" volatile"	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
constp	int
)	O
{	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
" const"	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
!	O
prepend_type	function
(	O
info	pointer
,	O
"static "	pointer
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
!	O
substitute_type	function
(	O
info	pointer
,	O
info	pointer
->	O
stack	pointer
->	O
next	pointer
->	O
method	pointer
)	O
)	O
return	O
FALSE	int
;	O
method_type	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
method_type	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
!	O
pr_fix_visibility	function
(	O
info	pointer
,	O
visibility	enum
)	O
)	O
return	O
FALSE	int
;	O
return	O
(	O
append_type	function
(	O
info	pointer
,	O
method_type	pointer
)	O
&&	O
append_type	function
(	O
info	pointer
,	O
" /* "	pointer
)	O
&&	O
append_type	function
(	O
info	pointer
,	O
physname	pointer
)	O
&&	O
append_type	function
(	O
info	pointer
,	O
" */;\n"	pointer
)	O
&&	O
indent_type	function
(	O
info	pointer
)	O
)	O
;	O
}	O
static	O
bfd_boolean	int
pr_class_end_method	function
(	O
void	O
*	O
p	pointer
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
info	pointer
->	O
stack	pointer
->	O
method	pointer
=	O
NULL	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
pr_end_class_type	function
(	O
void	O
*	O
p	pointer
)	O
{	O
return	O
pr_end_struct_type	function
(	O
p	pointer
)	O
;	O
}	O
static	O
bfd_boolean	int
pr_typedef_type	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
return	O
push_type	function
(	O
info	pointer
,	O
name	pointer
)	O
;	O
}	O
static	O
bfd_boolean	int
pr_tag_type	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
unsigned	O
int	O
id	int
,	O
enum	O
debug_type_kind	enum
kind	enum
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
const	O
char	O
*	O
t	pointer
,	O
*	O
tag	pointer
;	O
char	O
idbuf	array
[	O
22	int
]	O
;	O
switch	O
(	O
kind	enum
)	O
{	O
case	O
DEBUG_KIND_STRUCT	int
:	O
t	pointer
=	O
"struct "	pointer
;	O
break	O
;	O
case	O
DEBUG_KIND_UNION	int
:	O
t	pointer
=	O
"union "	pointer
;	O
break	O
;	O
case	O
DEBUG_KIND_ENUM	int
:	O
t	pointer
=	O
"enum "	pointer
;	O
break	O
;	O
case	O
DEBUG_KIND_CLASS	int
:	O
t	pointer
=	O
"class "	pointer
;	O
break	O
;	O
case	O
DEBUG_KIND_UNION_CLASS	int
:	O
t	pointer
=	O
"union class "	pointer
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
!	O
push_type	function
(	O
info	pointer
,	O
t	pointer
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
name	pointer
!=	O
NULL	O
)	O
tag	pointer
=	O
name	pointer
;	O
else	O
{	O
sprintf	function
(	O
idbuf	array
,	O
"%%anon%u"	pointer
,	O
id	int
)	O
;	O
tag	pointer
=	O
idbuf	array
;	O
}	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
tag	pointer
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
name	pointer
!=	O
NULL	O
&&	O
kind	enum
!=	O
DEBUG_KIND_ENUM	int
)	O
{	O
sprintf	function
(	O
idbuf	array
,	O
" /* id %u */"	pointer
,	O
id	int
)	O
;	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
idbuf	array
)	O
)	O
return	O
FALSE	int
;	O
}	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
pr_typdef	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
s	pointer
;	O
if	O
(	O
!	O
substitute_type	function
(	O
info	pointer
,	O
name	pointer
)	O
)	O
return	O
FALSE	int
;	O
s	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
s	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
indent	int
(	O
info	pointer
)	O
;	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"typedef %s;\n"	pointer
,	O
s	pointer
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
pr_tag	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
t	pointer
;	O
t	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
t	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
indent	int
(	O
info	pointer
)	O
;	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"%s;\n"	pointer
,	O
t	pointer
)	O
;	O
free	function
(	O
t	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
pr_int_constant	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
bfd_vma	long
val	array
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
ab	array
[	O
22	int
]	O
;	O
indent	int
(	O
info	pointer
)	O
;	O
print_vma	function
(	O
val	array
,	O
ab	array
,	O
FALSE	int
,	O
FALSE	int
)	O
;	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"const int %s = %s;\n"	pointer
,	O
name	pointer
,	O
ab	array
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
pr_float_constant	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
double	O
val	array
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
indent	int
(	O
info	pointer
)	O
;	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"const double %s = %g;\n"	pointer
,	O
name	pointer
,	O
val	array
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
pr_typed_constant	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
bfd_vma	long
val	array
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
t	pointer
;	O
char	O
ab	array
[	O
22	int
]	O
;	O
t	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
t	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
indent	int
(	O
info	pointer
)	O
;	O
print_vma	function
(	O
val	array
,	O
ab	array
,	O
FALSE	int
,	O
FALSE	int
)	O
;	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"const %s %s = %s;\n"	pointer
,	O
t	pointer
,	O
name	pointer
,	O
ab	array
)	O
;	O
free	function
(	O
t	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
pr_variable	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
enum	O
debug_var_kind	enum
kind	enum
,	O
bfd_vma	long
val	array
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
t	pointer
;	O
char	O
ab	array
[	O
22	int
]	O
;	O
if	O
(	O
!	O
substitute_type	function
(	O
info	pointer
,	O
name	pointer
)	O
)	O
return	O
FALSE	int
;	O
t	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
t	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
indent	int
(	O
info	pointer
)	O
;	O
switch	O
(	O
kind	enum
)	O
{	O
case	O
DEBUG_STATIC	int
:	O
case	O
DEBUG_LOCAL_STATIC	int
:	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"static "	pointer
)	O
;	O
break	O
;	O
case	O
DEBUG_REGISTER	int
:	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"register "	pointer
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
print_vma	function
(	O
val	array
,	O
ab	array
,	O
TRUE	int
,	O
TRUE	int
)	O
;	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"%s /* %s */;\n"	pointer
,	O
t	pointer
,	O
ab	array
)	O
;	O
free	function
(	O
t	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
pr_start_function	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
bfd_boolean	int
global	int
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
t	pointer
;	O
if	O
(	O
!	O
substitute_type	function
(	O
info	pointer
,	O
name	pointer
)	O
)	O
return	O
FALSE	int
;	O
t	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
t	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
indent	int
(	O
info	pointer
)	O
;	O
if	O
(	O
!	O
global	int
)	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"static "	pointer
)	O
;	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"%s ("	pointer
,	O
t	pointer
)	O
;	O
info	pointer
->	O
parameter	int
=	O
1	int
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
pr_function_parameter	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
enum	O
debug_parm_kind	enum
kind	enum
,	O
bfd_vma	long
val	array
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
t	pointer
;	O
char	O
ab	array
[	O
22	int
]	O
;	O
if	O
(	O
kind	enum
==	O
DEBUG_PARM_REFERENCE	int
||	O
kind	enum
==	O
DEBUG_PARM_REF_REG	int
)	O
{	O
if	O
(	O
!	O
pr_reference_type	function
(	O
p	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
!	O
substitute_type	function
(	O
info	pointer
,	O
name	pointer
)	O
)	O
return	O
FALSE	int
;	O
t	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
t	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
info	pointer
->	O
parameter	int
!=	O
1	int
)	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
", "	pointer
)	O
;	O
if	O
(	O
kind	enum
==	O
DEBUG_PARM_REG	int
||	O
kind	enum
==	O
DEBUG_PARM_REF_REG	int
)	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"register "	pointer
)	O
;	O
print_vma	function
(	O
val	array
,	O
ab	array
,	O
TRUE	int
,	O
TRUE	int
)	O
;	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"%s /* %s */"	pointer
,	O
t	pointer
,	O
ab	array
)	O
;	O
free	function
(	O
t	pointer
)	O
;	O
++	O
info	pointer
->	O
parameter	int
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
pr_start_block	function
(	O
void	O
*	O
p	pointer
,	O
bfd_vma	long
addr	pointer
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
ab	array
[	O
22	int
]	O
;	O
if	O
(	O
info	pointer
->	O
parameter	int
>	O
0	int
)	O
{	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
")\n"	pointer
)	O
;	O
info	pointer
->	O
parameter	int
=	O
0	int
;	O
}	O
indent	int
(	O
info	pointer
)	O
;	O
print_vma	function
(	O
addr	pointer
,	O
ab	array
,	O
TRUE	int
,	O
TRUE	int
)	O
;	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"{ /* %s */\n"	pointer
,	O
ab	array
)	O
;	O
info	pointer
->	O
indent	int
+=	O
2	int
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
pr_lineno	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
filename	pointer
,	O
unsigned	O
long	O
lineno	pointer
,	O
bfd_vma	long
addr	pointer
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
ab	array
[	O
22	int
]	O
;	O
indent	int
(	O
info	pointer
)	O
;	O
print_vma	function
(	O
addr	pointer
,	O
ab	array
,	O
TRUE	int
,	O
TRUE	int
)	O
;	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"/* file %s line %lu addr %s */\n"	pointer
,	O
filename	pointer
,	O
lineno	pointer
,	O
ab	array
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
pr_end_block	function
(	O
void	O
*	O
p	pointer
,	O
bfd_vma	long
addr	pointer
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
ab	array
[	O
22	int
]	O
;	O
info	pointer
->	O
indent	int
-=	O
2	int
;	O
indent	int
(	O
info	pointer
)	O
;	O
print_vma	function
(	O
addr	pointer
,	O
ab	array
,	O
TRUE	int
,	O
TRUE	int
)	O
;	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"} /* %s */\n"	pointer
,	O
ab	array
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
pr_end_function	function
(	O
void	O
*	O
p	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_vma	long
pc	long
;	O
static	O
const	O
char	O
*	O
filename	pointer
;	O
static	O
const	O
char	O
*	O
functionname	pointer
;	O
static	O
unsigned	O
int	O
line	int
;	O
static	O
bfd_boolean	int
found	int
;	O
static	O
void	O
find_address_in_section	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
asection	struct
*	O
section	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
bfd_vma	long
vma	long
;	O
bfd_size_type	long
size	int
;	O
asymbol	struct
*	O
*	O
syms	pointer
=	O
(	O
asymbol	struct
*	O
*	O
)	O
data	pointer
;	O
if	O
(	O
found	int
)	O
return	O
;	O
if	O
(	O
(	O
bfd_section_flags	function
(	O
section	pointer
)	O
&	O
SEC_ALLOC	int
)	O
==	O
0	int
)	O
return	O
;	O
vma	long
=	O
bfd_section_vma	function
(	O
section	pointer
)	O
;	O
if	O
(	O
pc	long
<	O
vma	long
)	O
return	O
;	O
size	int
=	O
bfd_section_size	function
(	O
section	pointer
)	O
;	O
if	O
(	O
pc	long
>=	O
vma	long
+	O
size	int
)	O
return	O
;	O
found	int
=	O
bfd_find_nearest_line	O
(	O
abfd	pointer
,	O
section	pointer
,	O
syms	pointer
,	O
pc	long
-	O
vma	long
,	O
&	O
filename	pointer
,	O
&	O
functionname	pointer
,	O
&	O
line	int
)	O
;	O
}	O
static	O
void	O
translate_addresses	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
char	O
*	O
addr_hex	pointer
,	O
FILE	struct
*	O
f	pointer
,	O
asymbol	struct
*	O
*	O
syms	pointer
)	O
{	O
pc	long
=	O
bfd_scan_vma	function
(	O
addr_hex	pointer
,	O
NULL	O
,	O
16	int
)	O
;	O
found	int
=	O
FALSE	int
;	O
bfd_map_over_sections	function
(	O
abfd	pointer
,	O
find_address_in_section	function
,	O
syms	pointer
)	O
;	O
if	O
(	O
!	O
found	int
)	O
fprintf	function
(	O
f	pointer
,	O
"??"	pointer
)	O
;	O
else	O
fprintf	function
(	O
f	pointer
,	O
"%u"	pointer
,	O
line	int
)	O
;	O
}	O
static	O
bfd_boolean	int
tg_start_compilation_unit	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
fname	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
free	function
(	O
info	pointer
->	O
filename	pointer
)	O
;	O
info	pointer
->	O
filename	pointer
=	O
strdup	function
(	O
fname	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
tg_start_source	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
fname	pointer
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
free	function
(	O
info	pointer
->	O
filename	pointer
)	O
;	O
info	pointer
->	O
filename	pointer
=	O
strdup	function
(	O
fname	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
tg_enum_type	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
tag	pointer
,	O
const	O
char	O
*	O
*	O
names	pointer
,	O
bfd_signed_vma	long
*	O
values	pointer
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
unsigned	O
int	O
i	pointer
;	O
const	O
char	O
*	O
name	pointer
;	O
char	O
ab	array
[	O
22	int
]	O
;	O
if	O
(	O
!	O
pr_enum_type	function
(	O
p	pointer
,	O
tag	pointer
,	O
names	pointer
,	O
values	pointer
)	O
)	O
return	O
FALSE	int
;	O
name	pointer
=	O
tag	pointer
?	O
tag	pointer
:	O
"unknown"	pointer
;	O
if	O
(	O
tag	pointer
)	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"%s\t%s\t0;\"\tkind:e\ttype:%s\n"	pointer
,	O
tag	pointer
,	O
info	pointer
->	O
filename	pointer
,	O
info	pointer
->	O
stack	pointer
->	O
type	enum
)	O
;	O
if	O
(	O
names	pointer
!=	O
NULL	O
)	O
{	O
for	O
(	O
i	pointer
=	O
0	int
;	O
names	pointer
[	O
i	pointer
]	O
!=	O
NULL	O
;	O
i	pointer
++	O
)	O
{	O
print_vma	function
(	O
values	pointer
[	O
i	pointer
]	O
,	O
ab	array
,	O
FALSE	int
,	O
FALSE	int
)	O
;	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"%s\t%s\t0;\"\tkind:g\tenum:%s\tvalue:%s\n"	pointer
,	O
names	pointer
[	O
i	pointer
]	O
,	O
info	pointer
->	O
filename	pointer
,	O
name	pointer
,	O
ab	array
)	O
;	O
}	O
}	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
tg_start_struct_type	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
tag	pointer
,	O
unsigned	O
int	O
id	int
,	O
bfd_boolean	int
structp	int
,	O
unsigned	O
int	O
size	int
ATTRIBUTE_UNUSED	O
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
const	O
char	O
*	O
name	pointer
;	O
char	O
idbuf	array
[	O
20	int
]	O
;	O
if	O
(	O
tag	pointer
!=	O
NULL	O
)	O
name	pointer
=	O
tag	pointer
;	O
else	O
{	O
name	pointer
=	O
idbuf	array
;	O
sprintf	function
(	O
idbuf	array
,	O
"%%anon%u"	pointer
,	O
id	int
)	O
;	O
}	O
if	O
(	O
!	O
push_type	function
(	O
info	pointer
,	O
name	pointer
)	O
)	O
return	O
FALSE	int
;	O
info	pointer
->	O
stack	pointer
->	O
flavor	pointer
=	O
structp	int
?	O
"struct"	pointer
:	O
"union"	pointer
;	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"%s\t%s\t0;\"\tkind:%c\n"	pointer
,	O
name	pointer
,	O
info	pointer
->	O
filename	pointer
,	O
info	pointer
->	O
stack	pointer
->	O
flavor	pointer
[	O
0	int
]	O
)	O
;	O
info	pointer
->	O
stack	pointer
->	O
visibility	enum
=	O
DEBUG_VISIBILITY_PUBLIC	int
;	O
return	O
indent_type	function
(	O
info	pointer
)	O
;	O
}	O
static	O
bfd_boolean	int
tg_fix_visibility	function
(	O
struct	O
pr_handle	struct
*	O
info	pointer
,	O
enum	O
debug_visibility	enum
visibility	enum
)	O
{	O
assert	O
(	O
info	pointer
->	O
stack	pointer
!=	O
NULL	O
)	O
;	O
if	O
(	O
info	pointer
->	O
stack	pointer
->	O
visibility	enum
==	O
visibility	enum
)	O
return	O
TRUE	int
;	O
assert	O
(	O
info	pointer
->	O
stack	pointer
->	O
visibility	enum
!=	O
DEBUG_VISIBILITY_IGNORE	int
)	O
;	O
info	pointer
->	O
stack	pointer
->	O
visibility	enum
=	O
visibility	enum
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
tg_struct_field	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
bfd_vma	long
bitpos	int
ATTRIBUTE_UNUSED	O
,	O
bfd_vma	long
bitsize	int
ATTRIBUTE_UNUSED	O
,	O
enum	O
debug_visibility	enum
visibility	enum
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
t	pointer
;	O
t	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
t	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
!	O
tg_fix_visibility	function
(	O
info	pointer
,	O
visibility	enum
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
!	O
name	pointer
[	O
0	int
]	O
)	O
return	O
TRUE	int
;	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"%s\t%s\t0;\"\tkind:m\ttype:%s\t%s:%s\taccess:%s\n"	pointer
,	O
name	pointer
,	O
info	pointer
->	O
filename	pointer
,	O
t	pointer
,	O
info	pointer
->	O
stack	pointer
->	O
flavor	pointer
,	O
info	pointer
->	O
stack	pointer
->	O
type	enum
,	O
visibility_name	function
(	O
visibility	enum
)	O
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
tg_end_struct_type	function
(	O
void	O
*	O
p	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
assert	O
(	O
(	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
)	O
->	O
stack	pointer
!=	O
NULL	O
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
tg_start_class_type	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
tag	pointer
,	O
unsigned	O
int	O
id	int
,	O
bfd_boolean	int
structp	int
,	O
unsigned	O
int	O
size	int
,	O
bfd_boolean	int
vptr	int
,	O
bfd_boolean	int
ownvptr	int
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
tv	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
name	pointer
;	O
char	O
idbuf	array
[	O
20	int
]	O
;	O
info	pointer
->	O
indent	int
+=	O
2	int
;	O
if	O
(	O
vptr	int
&&	O
!	O
ownvptr	int
)	O
{	O
tv	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
tv	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
tag	pointer
!=	O
NULL	O
)	O
name	pointer
=	O
tag	pointer
;	O
else	O
{	O
sprintf	function
(	O
idbuf	array
,	O
"%%anon%u"	pointer
,	O
id	int
)	O
;	O
name	pointer
=	O
idbuf	array
;	O
}	O
if	O
(	O
!	O
push_type	function
(	O
info	pointer
,	O
name	pointer
)	O
)	O
return	O
FALSE	int
;	O
info	pointer
->	O
stack	pointer
->	O
flavor	pointer
=	O
structp	int
?	O
"class"	pointer
:	O
"union class"	pointer
;	O
info	pointer
->	O
stack	pointer
->	O
parents	pointer
=	O
NULL	O
;	O
info	pointer
->	O
stack	pointer
->	O
num_parents	int
=	O
0	int
;	O
if	O
(	O
size	int
!=	O
0	int
||	O
vptr	int
||	O
ownvptr	int
||	O
tag	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
vptr	int
)	O
{	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
" vtable "	pointer
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
ownvptr	int
)	O
{	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
"self "	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
else	O
{	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
tv	pointer
)	O
||	O
!	O
append_type	function
(	O
info	pointer
,	O
" "	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
}	O
}	O
info	pointer
->	O
stack	pointer
->	O
visibility	enum
=	O
DEBUG_VISIBILITY_PRIVATE	int
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
tg_class_static_member	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
const	O
char	O
*	O
physname	pointer
ATTRIBUTE_UNUSED	O
,	O
enum	O
debug_visibility	enum
visibility	enum
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
t	pointer
;	O
int	O
len_var	int
,	O
len_class	int
;	O
char	O
*	O
full_name	pointer
;	O
len_var	int
=	O
strlen	function
(	O
name	pointer
)	O
;	O
len_class	int
=	O
strlen	function
(	O
info	pointer
->	O
stack	pointer
->	O
next	pointer
->	O
type	enum
)	O
;	O
full_name	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
len_var	int
+	O
len_class	int
+	O
3	int
)	O
;	O
if	O
(	O
!	O
full_name	pointer
)	O
return	O
FALSE	int
;	O
sprintf	function
(	O
full_name	pointer
,	O
"%s::%s"	pointer
,	O
info	pointer
->	O
stack	pointer
->	O
next	pointer
->	O
type	enum
,	O
name	pointer
)	O
;	O
if	O
(	O
!	O
substitute_type	function
(	O
info	pointer
,	O
full_name	pointer
)	O
)	O
{	O
free	function
(	O
full_name	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
!	O
prepend_type	function
(	O
info	pointer
,	O
"static "	pointer
)	O
)	O
{	O
free	function
(	O
full_name	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
t	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
t	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
full_name	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
!	O
tg_fix_visibility	function
(	O
info	pointer
,	O
visibility	enum
)	O
)	O
{	O
free	function
(	O
t	pointer
)	O
;	O
free	function
(	O
full_name	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"%s\t%s\t0;\"\tkind:x\ttype:%s\tclass:%s\taccess:%s\n"	pointer
,	O
name	pointer
,	O
info	pointer
->	O
filename	pointer
,	O
t	pointer
,	O
info	pointer
->	O
stack	pointer
->	O
type	enum
,	O
visibility_name	function
(	O
visibility	enum
)	O
)	O
;	O
free	function
(	O
t	pointer
)	O
;	O
free	function
(	O
full_name	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
tg_class_baseclass	function
(	O
void	O
*	O
p	pointer
,	O
bfd_vma	long
bitpos	int
ATTRIBUTE_UNUSED	O
,	O
bfd_boolean	int
is_virtual	int
,	O
enum	O
debug_visibility	enum
visibility	enum
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
t	pointer
;	O
const	O
char	O
*	O
prefix	pointer
;	O
assert	O
(	O
info	pointer
->	O
stack	pointer
!=	O
NULL	O
&&	O
info	pointer
->	O
stack	pointer
->	O
next	pointer
!=	O
NULL	O
)	O
;	O
t	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
t	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
CONST_STRNEQ	O
(	O
t	pointer
,	O
"class "	pointer
)	O
)	O
t	pointer
+=	O
sizeof	O
"class "	pointer
-	O
1	int
;	O
if	O
(	O
!	O
push_type	function
(	O
info	pointer
,	O
t	pointer
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
is_virtual	int
)	O
{	O
if	O
(	O
!	O
prepend_type	function
(	O
info	pointer
,	O
"virtual "	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
switch	O
(	O
visibility	enum
)	O
{	O
case	O
DEBUG_VISIBILITY_PUBLIC	int
:	O
prefix	pointer
=	O
"public "	pointer
;	O
break	O
;	O
case	O
DEBUG_VISIBILITY_PROTECTED	int
:	O
prefix	pointer
=	O
"protected "	pointer
;	O
break	O
;	O
case	O
DEBUG_VISIBILITY_PRIVATE	int
:	O
prefix	pointer
=	O
"private "	pointer
;	O
break	O
;	O
default	O
:	O
prefix	pointer
=	O
"/* unknown visibility */ "	pointer
;	O
break	O
;	O
}	O
if	O
(	O
!	O
prepend_type	function
(	O
info	pointer
,	O
prefix	pointer
)	O
)	O
return	O
FALSE	int
;	O
t	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
t	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
info	pointer
->	O
stack	pointer
->	O
num_parents	int
&&	O
!	O
append_parent	function
(	O
info	pointer
,	O
", "	pointer
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
!	O
append_parent	function
(	O
info	pointer
,	O
t	pointer
)	O
)	O
return	O
FALSE	int
;	O
info	pointer
->	O
stack	pointer
->	O
num_parents	int
++	O
;	O
free	function
(	O
t	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
tg_class_method_variant	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
physname	pointer
ATTRIBUTE_UNUSED	O
,	O
enum	O
debug_visibility	enum
visibility	enum
,	O
bfd_boolean	int
constp	int
,	O
bfd_boolean	int
volatilep	int
,	O
bfd_vma	long
voffset	long
ATTRIBUTE_UNUSED	O
,	O
bfd_boolean	int
context	int
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
method_type	pointer
;	O
char	O
*	O
context_type	pointer
;	O
char	O
*	O
method_name	pointer
;	O
assert	O
(	O
info	pointer
->	O
stack	pointer
!=	O
NULL	O
)	O
;	O
assert	O
(	O
info	pointer
->	O
stack	pointer
->	O
next	pointer
!=	O
NULL	O
)	O
;	O
if	O
(	O
volatilep	int
)	O
{	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
" volatile"	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
constp	int
)	O
{	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
" const"	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
method_name	pointer
=	O
strdup	function
(	O
context	int
?	O
info	pointer
->	O
stack	pointer
->	O
next	pointer
->	O
next	pointer
->	O
method	pointer
:	O
info	pointer
->	O
stack	pointer
->	O
next	pointer
->	O
method	pointer
)	O
;	O
if	O
(	O
!	O
substitute_type	function
(	O
info	pointer
,	O
method_name	pointer
)	O
)	O
{	O
free	function
(	O
method_name	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
method_type	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
method_type	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
method_name	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
!	O
context	int
)	O
context_type	pointer
=	O
NULL	O
;	O
else	O
{	O
context_type	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
context_type	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
method_type	pointer
)	O
;	O
free	function
(	O
method_name	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
}	O
if	O
(	O
!	O
tg_fix_visibility	function
(	O
info	pointer
,	O
visibility	enum
)	O
)	O
{	O
free	function
(	O
method_type	pointer
)	O
;	O
free	function
(	O
method_name	pointer
)	O
;	O
free	function
(	O
context_type	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"%s\t%s\t0;\"\tkind:p\ttype:%s\tclass:%s\n"	pointer
,	O
method_name	pointer
,	O
info	pointer
->	O
filename	pointer
,	O
method_type	pointer
,	O
info	pointer
->	O
stack	pointer
->	O
type	enum
)	O
;	O
free	function
(	O
method_type	pointer
)	O
;	O
free	function
(	O
method_name	pointer
)	O
;	O
free	function
(	O
context_type	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
tg_class_static_method_variant	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
physname	pointer
ATTRIBUTE_UNUSED	O
,	O
enum	O
debug_visibility	enum
visibility	enum
,	O
bfd_boolean	int
constp	int
,	O
bfd_boolean	int
volatilep	int
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
method_type	pointer
;	O
char	O
*	O
method_name	pointer
;	O
assert	O
(	O
info	pointer
->	O
stack	pointer
!=	O
NULL	O
)	O
;	O
assert	O
(	O
info	pointer
->	O
stack	pointer
->	O
next	pointer
!=	O
NULL	O
)	O
;	O
assert	O
(	O
info	pointer
->	O
stack	pointer
->	O
next	pointer
->	O
method	pointer
!=	O
NULL	O
)	O
;	O
if	O
(	O
volatilep	int
)	O
{	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
" volatile"	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
constp	int
)	O
{	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
" const"	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
!	O
prepend_type	function
(	O
info	pointer
,	O
"static "	pointer
)	O
)	O
return	O
FALSE	int
;	O
method_name	pointer
=	O
strdup	function
(	O
info	pointer
->	O
stack	pointer
->	O
next	pointer
->	O
method	pointer
)	O
;	O
if	O
(	O
!	O
substitute_type	function
(	O
info	pointer
,	O
info	pointer
->	O
stack	pointer
->	O
next	pointer
->	O
method	pointer
)	O
)	O
{	O
free	function
(	O
method_name	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
method_type	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
method_type	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
method_name	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
!	O
tg_fix_visibility	function
(	O
info	pointer
,	O
visibility	enum
)	O
)	O
{	O
free	function
(	O
method_type	pointer
)	O
;	O
free	function
(	O
method_name	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"%s\t%s\t0;\"\tkind:p\ttype:%s\tclass:%s\taccess:%s\n"	pointer
,	O
method_name	pointer
,	O
info	pointer
->	O
filename	pointer
,	O
method_type	pointer
,	O
info	pointer
->	O
stack	pointer
->	O
type	enum
,	O
visibility_name	function
(	O
visibility	enum
)	O
)	O
;	O
free	function
(	O
method_type	pointer
)	O
;	O
free	function
(	O
method_name	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
tg_end_class_type	function
(	O
void	O
*	O
p	pointer
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"%s\t%s\t0;\"\tkind:c\ttype:%s"	pointer
,	O
info	pointer
->	O
stack	pointer
->	O
type	enum
,	O
info	pointer
->	O
filename	pointer
,	O
info	pointer
->	O
stack	pointer
->	O
flavor	pointer
)	O
;	O
if	O
(	O
info	pointer
->	O
stack	pointer
->	O
num_parents	int
)	O
{	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"\tinherits:%s"	pointer
,	O
info	pointer
->	O
stack	pointer
->	O
parents	pointer
)	O
;	O
free	function
(	O
info	pointer
->	O
stack	pointer
->	O
parents	pointer
)	O
;	O
}	O
fputc	function
(	O
'\n'	O
,	O
info	pointer
->	O
f	pointer
)	O
;	O
return	O
tg_end_struct_type	function
(	O
p	pointer
)	O
;	O
}	O
static	O
bfd_boolean	int
tg_tag_type	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
unsigned	O
int	O
id	int
,	O
enum	O
debug_type_kind	enum
kind	enum
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
const	O
char	O
*	O
t	pointer
,	O
*	O
tag	pointer
;	O
char	O
idbuf	array
[	O
20	int
]	O
;	O
switch	O
(	O
kind	enum
)	O
{	O
case	O
DEBUG_KIND_STRUCT	int
:	O
t	pointer
=	O
"struct "	pointer
;	O
break	O
;	O
case	O
DEBUG_KIND_UNION	int
:	O
t	pointer
=	O
"union "	pointer
;	O
break	O
;	O
case	O
DEBUG_KIND_ENUM	int
:	O
t	pointer
=	O
"enum "	pointer
;	O
break	O
;	O
case	O
DEBUG_KIND_CLASS	int
:	O
t	pointer
=	O
"class "	pointer
;	O
break	O
;	O
case	O
DEBUG_KIND_UNION_CLASS	int
:	O
t	pointer
=	O
"union class "	pointer
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
!	O
push_type	function
(	O
info	pointer
,	O
t	pointer
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
name	pointer
!=	O
NULL	O
)	O
tag	pointer
=	O
name	pointer
;	O
else	O
{	O
sprintf	function
(	O
idbuf	array
,	O
"%%anon%u"	pointer
,	O
id	int
)	O
;	O
tag	pointer
=	O
idbuf	array
;	O
}	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
tag	pointer
)	O
)	O
return	O
FALSE	int
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
tg_typdef	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
s	pointer
;	O
s	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
s	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"%s\t%s\t0;\"\tkind:t\ttype:%s\n"	pointer
,	O
name	pointer
,	O
info	pointer
->	O
filename	pointer
,	O
s	pointer
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
tg_tag	function
(	O
void	O
*	O
p	pointer
ATTRIBUTE_UNUSED	O
,	O
const	O
char	O
*	O
name	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
t	pointer
;	O
t	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
t	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
free	function
(	O
t	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
tg_int_constant	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
bfd_vma	long
val	array
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
ab	array
[	O
22	int
]	O
;	O
indent	int
(	O
info	pointer
)	O
;	O
print_vma	function
(	O
val	array
,	O
ab	array
,	O
FALSE	int
,	O
FALSE	int
)	O
;	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"%s\t%s\t0;\"\tkind:v\ttype:const int\tvalue:%s\n"	pointer
,	O
name	pointer
,	O
info	pointer
->	O
filename	pointer
,	O
ab	array
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
tg_float_constant	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
double	O
val	array
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
indent	int
(	O
info	pointer
)	O
;	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"%s\t%s\t0;\"\tkind:v\ttype:const double\tvalue:%g\n"	pointer
,	O
name	pointer
,	O
info	pointer
->	O
filename	pointer
,	O
val	array
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
tg_typed_constant	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
bfd_vma	long
val	array
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
t	pointer
;	O
char	O
ab	array
[	O
22	int
]	O
;	O
t	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
t	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
indent	int
(	O
info	pointer
)	O
;	O
print_vma	function
(	O
val	array
,	O
ab	array
,	O
FALSE	int
,	O
FALSE	int
)	O
;	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"%s\t%s\t0;\"\tkind:v\ttype:const %s\tvalue:%s\n"	pointer
,	O
name	pointer
,	O
info	pointer
->	O
filename	pointer
,	O
t	pointer
,	O
ab	array
)	O
;	O
free	function
(	O
t	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
tg_variable	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
enum	O
debug_var_kind	enum
kind	enum
,	O
bfd_vma	long
val	array
ATTRIBUTE_UNUSED	O
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
t	pointer
,	O
*	O
dname	pointer
,	O
*	O
from_class	pointer
;	O
t	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
t	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
dname	pointer
=	O
NULL	O
;	O
if	O
(	O
info	pointer
->	O
demangler	pointer
)	O
dname	pointer
=	O
info	pointer
->	O
demangler	pointer
(	O
info	pointer
->	O
abfd	pointer
,	O
name	pointer
,	O
demangle_flags	int
)	O
;	O
from_class	pointer
=	O
NULL	O
;	O
if	O
(	O
dname	pointer
!=	O
NULL	O
)	O
{	O
char	O
*	O
sep	pointer
;	O
sep	pointer
=	O
strstr	function
(	O
dname	pointer
,	O
"::"	pointer
)	O
;	O
if	O
(	O
sep	pointer
)	O
{	O
*	O
sep	pointer
=	O
0	int
;	O
name	pointer
=	O
sep	pointer
+	O
2	int
;	O
from_class	pointer
=	O
dname	pointer
;	O
}	O
else	O
name	pointer
=	O
dname	pointer
;	O
}	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"%s\t%s\t0;\"\tkind:v\ttype:%s"	pointer
,	O
name	pointer
,	O
info	pointer
->	O
filename	pointer
,	O
t	pointer
)	O
;	O
switch	O
(	O
kind	enum
)	O
{	O
case	O
DEBUG_STATIC	int
:	O
case	O
DEBUG_LOCAL_STATIC	int
:	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"\tfile:"	pointer
)	O
;	O
break	O
;	O
case	O
DEBUG_REGISTER	int
:	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"\tregister:"	pointer
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
if	O
(	O
from_class	pointer
)	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"\tclass:%s"	pointer
,	O
from_class	pointer
)	O
;	O
if	O
(	O
dname	pointer
)	O
free	function
(	O
dname	pointer
)	O
;	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"\n"	pointer
)	O
;	O
free	function
(	O
t	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
tg_start_function	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
bfd_boolean	int
global	int
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
dname	pointer
;	O
if	O
(	O
!	O
global	int
)	O
info	pointer
->	O
stack	pointer
->	O
flavor	pointer
=	O
"static"	pointer
;	O
else	O
info	pointer
->	O
stack	pointer
->	O
flavor	pointer
=	O
NULL	O
;	O
dname	pointer
=	O
NULL	O
;	O
if	O
(	O
info	pointer
->	O
demangler	pointer
)	O
dname	pointer
=	O
info	pointer
->	O
demangler	pointer
(	O
info	pointer
->	O
abfd	pointer
,	O
name	pointer
,	O
demangle_flags	int
)	O
;	O
if	O
(	O
!	O
substitute_type	function
(	O
info	pointer
,	O
dname	pointer
?	O
dname	pointer
:	O
name	pointer
)	O
)	O
return	O
FALSE	int
;	O
info	pointer
->	O
stack	pointer
->	O
method	pointer
=	O
NULL	O
;	O
if	O
(	O
dname	pointer
!=	O
NULL	O
)	O
{	O
char	O
*	O
sep	pointer
;	O
sep	pointer
=	O
strstr	function
(	O
dname	pointer
,	O
"::"	pointer
)	O
;	O
if	O
(	O
sep	pointer
)	O
{	O
info	pointer
->	O
stack	pointer
->	O
method	pointer
=	O
dname	pointer
;	O
*	O
sep	pointer
=	O
0	int
;	O
name	pointer
=	O
sep	pointer
+	O
2	int
;	O
}	O
else	O
{	O
info	pointer
->	O
stack	pointer
->	O
method	pointer
=	O
""	pointer
;	O
name	pointer
=	O
dname	pointer
;	O
}	O
sep	pointer
=	O
strchr	function
(	O
name	pointer
,	O
'('	O
)	O
;	O
if	O
(	O
sep	pointer
)	O
*	O
sep	pointer
=	O
0	int
;	O
}	O
info	pointer
->	O
stack	pointer
->	O
parents	pointer
=	O
strdup	function
(	O
name	pointer
)	O
;	O
if	O
(	O
!	O
info	pointer
->	O
stack	pointer
->	O
method	pointer
&&	O
!	O
append_type	function
(	O
info	pointer
,	O
"("	pointer
)	O
)	O
return	O
FALSE	int
;	O
info	pointer
->	O
parameter	int
=	O
1	int
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
tg_function_parameter	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
enum	O
debug_parm_kind	enum
kind	enum
,	O
bfd_vma	long
val	array
ATTRIBUTE_UNUSED	O
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
t	pointer
;	O
if	O
(	O
kind	enum
==	O
DEBUG_PARM_REFERENCE	int
||	O
kind	enum
==	O
DEBUG_PARM_REF_REG	int
)	O
{	O
if	O
(	O
!	O
pr_reference_type	function
(	O
p	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
!	O
substitute_type	function
(	O
info	pointer
,	O
name	pointer
)	O
)	O
return	O
FALSE	int
;	O
t	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
t	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
!	O
info	pointer
->	O
stack	pointer
->	O
method	pointer
)	O
{	O
if	O
(	O
info	pointer
->	O
parameter	int
!=	O
1	int
&&	O
!	O
append_type	function
(	O
info	pointer
,	O
", "	pointer
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
kind	enum
==	O
DEBUG_PARM_REG	int
||	O
kind	enum
==	O
DEBUG_PARM_REF_REG	int
)	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
"register "	pointer
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
!	O
append_type	function
(	O
info	pointer
,	O
t	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
free	function
(	O
t	pointer
)	O
;	O
++	O
info	pointer
->	O
parameter	int
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
tg_start_block	function
(	O
void	O
*	O
p	pointer
,	O
bfd_vma	long
addr	pointer
)	O
{	O
struct	O
pr_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
pr_handle	struct
*	O
)	O
p	pointer
;	O
char	O
ab	array
[	O
22	int
]	O
,	O
kind	enum
,	O
*	O
partof	pointer
;	O
char	O
*	O
t	pointer
;	O
bfd_boolean	int
local	int
;	O
if	O
(	O
info	pointer
->	O
parameter	int
>	O
0	int
)	O
{	O
info	pointer
->	O
parameter	int
=	O
0	int
;	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"%s\t%s\t"	pointer
,	O
info	pointer
->	O
stack	pointer
->	O
parents	pointer
,	O
info	pointer
->	O
filename	pointer
)	O
;	O
free	function
(	O
info	pointer
->	O
stack	pointer
->	O
parents	pointer
)	O
;	O
print_vma	function
(	O
addr	pointer
,	O
ab	array
,	O
TRUE	int
,	O
TRUE	int
)	O
;	O
translate_addresses	function
(	O
info	pointer
->	O
abfd	pointer
,	O
ab	array
,	O
info	pointer
->	O
f	pointer
,	O
info	pointer
->	O
syms	pointer
)	O
;	O
local	int
=	O
info	pointer
->	O
stack	pointer
->	O
flavor	pointer
!=	O
NULL	O
;	O
if	O
(	O
info	pointer
->	O
stack	pointer
->	O
method	pointer
&&	O
*	O
info	pointer
->	O
stack	pointer
->	O
method	pointer
)	O
{	O
kind	enum
=	O
'm'	O
;	O
partof	pointer
=	O
(	O
char	O
*	O
)	O
info	pointer
->	O
stack	pointer
->	O
method	pointer
;	O
}	O
else	O
{	O
kind	enum
=	O
'f'	O
;	O
partof	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
info	pointer
->	O
stack	pointer
->	O
method	pointer
&&	O
!	O
append_type	function
(	O
info	pointer
,	O
")"	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
t	pointer
=	O
pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
t	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
";\"\tkind:%c\ttype:%s"	pointer
,	O
kind	enum
,	O
t	pointer
)	O
;	O
if	O
(	O
local	int
)	O
fputs	function
(	O
"\tfile:"	pointer
,	O
info	pointer
->	O
f	pointer
)	O
;	O
if	O
(	O
partof	pointer
)	O
{	O
fprintf	function
(	O
info	pointer
->	O
f	pointer
,	O
"\tclass:%s"	pointer
,	O
partof	pointer
)	O
;	O
free	function
(	O
partof	pointer
)	O
;	O
}	O
fputc	function
(	O
'\n'	O
,	O
info	pointer
->	O
f	pointer
)	O
;	O
}	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
tg_lineno	function
(	O
void	O
*	O
p	pointer
ATTRIBUTE_UNUSED	O
,	O
const	O
char	O
*	O
fname	pointer
ATTRIBUTE_UNUSED	O
,	O
unsigned	O
long	O
lineno	pointer
ATTRIBUTE_UNUSED	O
,	O
bfd_vma	long
addr	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
tg_end_block	function
(	O
void	O
*	O
p	pointer
ATTRIBUTE_UNUSED	O
,	O
bfd_vma	long
addr	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
TRUE	int
;	O
}	O
static	O
const	O
char	O
*	O
visibility_name	function
(	O
enum	O
debug_visibility	enum
visibility	enum
)	O
{	O
const	O
char	O
*	O
s	pointer
;	O
switch	O
(	O
visibility	enum
)	O
{	O
case	O
DEBUG_VISIBILITY_PUBLIC	int
:	O
s	pointer
=	O
"public"	pointer
;	O
break	O
;	O
case	O
DEBUG_VISIBILITY_PRIVATE	int
:	O
s	pointer
=	O
"private"	pointer
;	O
break	O
;	O
case	O
DEBUG_VISIBILITY_PROTECTED	int
:	O
s	pointer
=	O
"protected"	pointer
;	O
break	O
;	O
case	O
DEBUG_VISIBILITY_IGNORE	int
:	O
s	pointer
=	O
"/* ignore */"	pointer
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
return	O
FALSE	int
;	O
}	O
return	O
s	pointer
;	O
}	O
