int	O
mpz_congruent_2exp_p	O
(	O
mpz_srcptr	pointer
a	int
,	O
mpz_srcptr	pointer
c	pointer
,	O
mp_bitcnt_t	long
d	long
)	O
__GMP_NOTHROW	O
{	O
mp_size_t	long
i	long
,	O
dlimbs	long
;	O
unsigned	O
dbits	int
;	O
mp_ptr	pointer
ap	pointer
,	O
cp	pointer
;	O
mp_limb_t	long
dmask	long
,	O
alimb	long
,	O
climb	long
,	O
sum	long
;	O
mp_size_t	long
asize_signed	long
,	O
csize_signed	long
,	O
asize	long
,	O
csize	long
;	O
if	O
(	O
ABSIZ	O
(	O
a	int
)	O
<	O
ABSIZ	O
(	O
c	pointer
)	O
)	O
MPZ_SRCPTR_SWAP	O
(	O
a	int
,	O
c	pointer
)	O
;	O
dlimbs	long
=	O
d	long
/	O
GMP_NUMB_BITS	O
;	O
dbits	int
=	O
d	long
%	O
GMP_NUMB_BITS	O
;	O
dmask	long
=	O
(	O
CNST_LIMB	O
(	O
1	int
)	O
<<	O
dbits	int
)	O
-	O
1	int
;	O
ap	pointer
=	O
PTR	O
(	O
a	int
)	O
;	O
cp	pointer
=	O
PTR	O
(	O
c	pointer
)	O
;	O
asize_signed	long
=	O
SIZ	O
(	O
a	int
)	O
;	O
asize	long
=	O
ABS	O
(	O
asize_signed	long
)	O
;	O
csize_signed	long
=	O
SIZ	O
(	O
c	pointer
)	O
;	O
csize	long
=	O
ABS	O
(	O
csize_signed	long
)	O
;	O
if	O
(	O
csize_signed	long
==	O
0	int
)	O
goto	O
a_zeros	O
;	O
if	O
(	O
(	O
asize_signed	long
^	O
csize_signed	long
)	O
>=	O
0	int
)	O
{	O
if	O
(	O
mpn_cmp	O
(	O
ap	pointer
,	O
cp	pointer
,	O
MIN	O
(	O
csize	long
,	O
dlimbs	long
)	O
)	O
!=	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
csize	long
>	O
dlimbs	long
)	O
return	O
(	O
(	O
ap	pointer
[	O
dlimbs	long
]	O
-	O
cp	pointer
[	O
dlimbs	long
]	O
)	O
&	O
dmask	long
)	O
==	O
0	int
;	O
a_zeros	O
:	O
if	O
(	O
asize	long
<=	O
dlimbs	long
)	O
return	O
asize	long
==	O
csize	long
;	O
for	O
(	O
i	long
=	O
csize	long
;	O
i	long
<	O
dlimbs	long
;	O
i	long
++	O
)	O
if	O
(	O
ap	pointer
[	O
i	long
]	O
!=	O
0	int
)	O
return	O
0	int
;	O
return	O
(	O
ap	pointer
[	O
dlimbs	long
]	O
&	O
dmask	long
)	O
==	O
0	int
;	O
}	O
else	O
{	O
i	long
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
ASSERT	O
(	O
i	long
<	O
csize	long
)	O
;	O
alimb	long
=	O
ap	pointer
[	O
i	long
]	O
;	O
climb	long
=	O
cp	pointer
[	O
i	long
]	O
;	O
sum	long
=	O
(	O
alimb	long
+	O
climb	long
)	O
&	O
GMP_NUMB_MASK	O
;	O
if	O
(	O
i	long
>=	O
dlimbs	long
)	O
return	O
(	O
sum	long
&	O
dmask	long
)	O
==	O
0	int
;	O
i	long
++	O
;	O
if	O
(	O
sum	long
!=	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
alimb	long
!=	O
0	int
)	O
break	O
;	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
i	long
>=	O
csize	long
)	O
break	O
;	O
alimb	long
=	O
ap	pointer
[	O
i	long
]	O
;	O
climb	long
=	O
cp	pointer
[	O
i	long
]	O
;	O
sum	long
=	O
(	O
alimb	long
+	O
climb	long
+	O
1	int
)	O
&	O
GMP_NUMB_MASK	O
;	O
if	O
(	O
i	long
>=	O
dlimbs	long
)	O
return	O
(	O
sum	long
&	O
dmask	long
)	O
==	O
0	int
;	O
if	O
(	O
sum	long
!=	O
0	int
)	O
return	O
0	int
;	O
i	long
++	O
;	O
}	O
if	O
(	O
asize	long
<	O
dlimbs	long
)	O
return	O
0	int
;	O
for	O
(	O
;	O
i	long
<	O
dlimbs	long
;	O
i	long
++	O
)	O
if	O
(	O
ap	pointer
[	O
i	long
]	O
!=	O
GMP_NUMB_MAX	O
)	O
return	O
0	int
;	O
if	O
(	O
dbits	int
==	O
0	int
)	O
return	O
1	int
;	O
if	O
(	O
asize	long
==	O
dlimbs	long
)	O
return	O
0	int
;	O
return	O
(	O
(	O
ap	pointer
[	O
dlimbs	long
]	O
+	O
1	int
)	O
&	O
dmask	long
)	O
==	O
0	int
;	O
}	O
}	O
