static	O
volatile	O
int	O
_interrupted	int
;	O
static	O
RETSIGTYPE	void
sig_handler	function
(	O
int	O
signo	int
)	O
{	O
switch	O
(	O
signo	int
)	O
{	O
case	O
SIGINT	int
:	O
if	O
(	O
mailvar_is_true	function
(	O
mailvar_name_quit	pointer
)	O
)	O
exit	function
(	O
0	int
)	O
;	O
_interrupted	int
++	O
;	O
break	O
;	O
case	O
SIGWINCH	int
:	O
util_do_command	function
(	O
"set screen=%d"	pointer
,	O
util_getlines	function
(	O
)	O
)	O
;	O
util_do_command	function
(	O
"set columns=%d"	pointer
,	O
util_getcols	function
(	O
)	O
)	O
;	O
page_invalidate	function
(	O
1	int
)	O
;	O
break	O
;	O
}	O
}	O
void	O
ml_clear_interrupt	function
(	O
void	O
)	O
{	O
_interrupted	int
=	O
0	int
;	O
}	O
int	O
ml_got_interrupt	function
(	O
void	O
)	O
{	O
int	O
rc	int
=	O
_interrupted	int
;	O
_interrupted	int
=	O
0	int
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
ml_getc	function
(	O
FILE	struct
*	O
stream	pointer
)	O
{	O
unsigned	O
char	O
c	char
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
read	pointer
(	O
fileno	function
(	O
stream	pointer
)	O
,	O
&	O
c	char
,	O
1	int
)	O
==	O
1	int
)	O
return	O
c	char
;	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
{	O
if	O
(	O
_interrupted	int
)	O
break	O
;	O
}	O
else	O
break	O
;	O
}	O
return	O
EOF	O
;	O
}	O
void	O
ml_readline_init	function
(	O
void	O
)	O
{	O
if	O
(	O
!	O
interactive	int
)	O
return	O
;	O
{	O
struct	O
sigaction	struct
act	struct
;	O
act	struct
.	O
sa_handler	pointer
=	O
sig_handler	function
;	O
sigemptyset	function
(	O
&	O
act	struct
.	O
sa_mask	struct
)	O
;	O
act	struct
.	O
sa_flags	int
=	O
0	int
;	O
sigaction	struct
(	O
SIGINT	int
,	O
&	O
act	struct
,	O
NULL	O
)	O
;	O
sigaction	struct
(	O
SIGWINCH	int
,	O
&	O
act	struct
,	O
NULL	O
)	O
;	O
}	O
}	O
char	O
*	O
ml_readline_internal	function
(	O
void	O
)	O
{	O
char	O
*	O
buf	pointer
=	O
NULL	O
;	O
size_t	long
size	long
=	O
0	int
,	O
n	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_stream_getline	function
(	O
mu_strin	pointer
,	O
&	O
buf	pointer
,	O
&	O
size	long
,	O
&	O
n	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_stream_getline"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
_interrupted	int
)	O
{	O
free	function
(	O
buf	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
n	pointer
==	O
0	int
)	O
return	O
NULL	O
;	O
mu_rtrim_cset	function
(	O
buf	pointer
,	O
"\n"	pointer
)	O
;	O
return	O
buf	pointer
;	O
}	O
char	O
*	O
ml_readline	function
(	O
const	O
char	O
*	O
prompt	pointer
)	O
{	O
if	O
(	O
interactive	int
)	O
return	O
readline	function
(	O
prompt	pointer
)	O
;	O
return	O
ml_readline_internal	function
(	O
)	O
;	O
}	O
char	O
*	O
ml_readline_with_intr	function
(	O
const	O
char	O
*	O
prompt	pointer
)	O
{	O
char	O
*	O
str	pointer
=	O
ml_readline	function
(	O
prompt	pointer
)	O
;	O
if	O
(	O
_interrupted	int
)	O
mu_printf	function
(	O
"\n"	pointer
)	O
;	O
return	O
str	pointer
;	O
}	O
int	O
ml_reread	function
(	O
const	O
char	O
*	O
prompt	pointer
,	O
char	O
*	O
*	O
text	pointer
)	O
{	O
int	O
ch	int
;	O
char	O
*	O
line	pointer
;	O
int	O
line_size	int
;	O
int	O
pos	int
;	O
char	O
*	O
p	pointer
;	O
if	O
(	O
*	O
text	pointer
)	O
{	O
line	pointer
=	O
strdup	function
(	O
*	O
text	pointer
)	O
;	O
if	O
(	O
line	pointer
)	O
{	O
pos	int
=	O
strlen	function
(	O
line	pointer
)	O
;	O
line_size	int
=	O
pos	int
+	O
1	int
;	O
}	O
}	O
else	O
{	O
line_size	int
=	O
LINE_INC	int
;	O
line	pointer
=	O
malloc	function
(	O
line_size	int
)	O
;	O
pos	int
=	O
0	int
;	O
}	O
if	O
(	O
!	O
line	pointer
)	O
{	O
mu_error	function
(	O
_	O
(	O
"Not enough memory to edit the line"	pointer
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
line	pointer
[	O
pos	int
]	O
=	O
0	int
;	O
if	O
(	O
prompt	pointer
)	O
{	O
fputs	function
(	O
prompt	pointer
,	O
stdout	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
}	O
for	O
(	O
p	pointer
=	O
line	pointer
;	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
{	O
ioctl	function
(	O
0	int
,	O
TIOCSTI	int
,	O
p	pointer
)	O
;	O
}	O
pos	int
=	O
0	int
;	O
while	O
(	O
(	O
ch	int
=	O
ml_getc	function
(	O
stdin	pointer
)	O
)	O
!=	O
EOF	O
&&	O
ch	int
!=	O
'\n'	O
)	O
{	O
if	O
(	O
pos	int
>=	O
line_size	int
)	O
{	O
if	O
(	O
(	O
p	pointer
=	O
realloc	function
(	O
line	pointer
,	O
line_size	int
+	O
LINE_INC	int
)	O
)	O
==	O
NULL	O
)	O
{	O
fputs	function
(	O
"\n"	pointer
,	O
stdout	pointer
)	O
;	O
mu_error	function
(	O
_	O
(	O
"Not enough memory to edit the line"	pointer
)	O
)	O
;	O
break	O
;	O
}	O
else	O
{	O
line_size	int
+=	O
LINE_INC	int
;	O
line	pointer
=	O
p	pointer
;	O
}	O
}	O
line	pointer
[	O
pos	int
++	O
]	O
=	O
ch	int
;	O
}	O
line	pointer
[	O
pos	int
]	O
=	O
0	int
;	O
if	O
(	O
ml_got_interrupt	function
(	O
)	O
)	O
free	function
(	O
line	pointer
)	O
;	O
else	O
{	O
if	O
(	O
*	O
text	pointer
)	O
free	function
(	O
*	O
text	pointer
)	O
;	O
*	O
text	pointer
=	O
line	pointer
;	O
}	O
return	O
0	int
;	O
}	O
char	O
*	O
readline	function
(	O
char	O
*	O
prompt	pointer
)	O
{	O
if	O
(	O
prompt	pointer
)	O
{	O
mu_printf	function
(	O
"%s"	pointer
,	O
prompt	pointer
)	O
;	O
mu_stream_flush	function
(	O
mu_strout	pointer
)	O
;	O
}	O
return	O
ml_readline_internal	function
(	O
)	O
;	O
}	O
void	O
ml_set_completion_append_character	function
(	O
int	O
c	char
MU_ARG_UNUSED	O
)	O
{	O
}	O
void	O
ml_attempted_completion_over	function
(	O
void	O
)	O
{	O
}	O
