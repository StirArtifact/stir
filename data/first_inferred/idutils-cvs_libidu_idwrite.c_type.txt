int	O
file_link_qsort_compare	function
(	O
void	O
const	O
*	O
x	pointer
,	O
void	O
const	O
*	O
y	pointer
)	O
;	O
void	O
serialize_file_links	function
(	O
struct	O
idhead	struct
*	O
idhp	pointer
)	O
{	O
struct	O
file_link	struct
*	O
*	O
flinks_0	pointer
;	O
struct	O
file_link	struct
*	O
*	O
flinks	pointer
;	O
struct	O
file_link	struct
*	O
*	O
end	pointer
;	O
struct	O
file_link	struct
*	O
*	O
parents_0	pointer
;	O
struct	O
file_link	struct
*	O
*	O
parents	pointer
;	O
unsigned	O
long	O
parent_index	long
=	O
0	int
;	O
int	O
max_link	int
=	O
0	int
;	O
flinks_0	pointer
=	O
(	O
struct	O
file_link	struct
*	O
*	O
)	O
hash_dump	function
(	O
&	O
idhp	pointer
->	O
idh_file_link_table	struct
,	O
0	int
,	O
file_link_qsort_compare	function
)	O
;	O
end	pointer
=	O
&	O
flinks_0	pointer
[	O
idhp	pointer
->	O
idh_file_link_table	struct
.	O
ht_fill	long
]	O
;	O
parents	pointer
=	O
parents_0	pointer
=	O
xmalloc	function
(	O
sizeof	O
(	O
struct	O
file_link	struct
*	O
)	O
*	O
idhp	pointer
->	O
idh_file_link_table	struct
.	O
ht_fill	long
)	O
;	O
for	O
(	O
flinks	pointer
=	O
flinks_0	pointer
;	O
flinks	pointer
<	O
end	pointer
;	O
flinks	pointer
++	O
)	O
{	O
struct	O
file_link	struct
*	O
flink	pointer
=	O
*	O
flinks	pointer
;	O
int	O
name_length	int
;	O
if	O
(	O
!	O
(	O
flink	pointer
->	O
fl_flags	char
&	O
FL_USED	O
)	O
)	O
break	O
;	O
name_length	int
=	O
strlen	function
(	O
flink	pointer
->	O
fl_name	array
)	O
;	O
if	O
(	O
name_length	int
>	O
max_link	int
)	O
max_link	int
=	O
name_length	int
;	O
io_write	function
(	O
idhp	pointer
->	O
idh_FILE	pointer
,	O
flink	pointer
->	O
fl_name	array
,	O
0	int
,	O
IO_TYPE_STR	int
)	O
;	O
io_write	function
(	O
idhp	pointer
->	O
idh_FILE	pointer
,	O
&	O
flink	pointer
->	O
fl_flags	char
,	O
sizeof	O
(	O
flink	pointer
->	O
fl_flags	char
)	O
,	O
IO_TYPE_INT	int
)	O
;	O
io_write	function
(	O
idhp	pointer
->	O
idh_FILE	pointer
,	O
(	O
IS_ROOT_FILE_LINK	O
(	O
flink	pointer
)	O
?	O
&	O
parent_index	long
:	O
&	O
flink	pointer
->	O
fl_parent	O
->	O
fl_index	O
)	O
,	O
FL_PARENT_INDEX_BYTES	int
,	O
IO_TYPE_INT	int
)	O
;	O
*	O
parents	pointer
++	O
=	O
flink	pointer
->	O
fl_parent	O
;	O
flink	pointer
->	O
fl_index	O
=	O
parent_index	long
++	O
;	O
}	O
for	O
(	O
(	O
flinks	pointer
=	O
flinks_0	pointer
)	O
,	O
(	O
parents	pointer
=	O
parents_0	pointer
)	O
;	O
flinks	pointer
<	O
end	pointer
;	O
flinks	pointer
++	O
)	O
{	O
struct	O
file_link	struct
*	O
flink	pointer
=	O
*	O
flinks	pointer
;	O
if	O
(	O
!	O
(	O
flink	pointer
->	O
fl_flags	char
&	O
FL_USED	O
)	O
)	O
break	O
;	O
flink	pointer
->	O
fl_parent	O
=	O
*	O
parents	pointer
++	O
;	O
}	O
free	function
(	O
parents_0	pointer
)	O
;	O
free	function
(	O
flinks_0	pointer
)	O
;	O
idhp	pointer
->	O
idh_max_link	short
=	O
max_link	int
+	O
1	int
;	O
idhp	pointer
->	O
idh_file_links	long
=	O
parent_index	long
;	O
idhp	pointer
->	O
idh_files	long
=	O
idhp	pointer
->	O
idh_member_file_table	struct
.	O
ht_fill	long
;	O
}	O
int	O
file_link_qsort_compare	function
(	O
void	O
const	O
*	O
x	pointer
,	O
void	O
const	O
*	O
y	pointer
)	O
{	O
struct	O
file_link	struct
const	O
*	O
flx	pointer
=	O
*	O
(	O
struct	O
file_link	struct
const	O
*	O
const	O
*	O
)	O
x	pointer
;	O
struct	O
file_link	struct
const	O
*	O
fly	pointer
=	O
*	O
(	O
struct	O
file_link	struct
const	O
*	O
const	O
*	O
)	O
y	pointer
;	O
unsigned	O
int	O
x_flags	int
=	O
flx	pointer
->	O
fl_flags	char
;	O
unsigned	O
int	O
y_flags	int
=	O
fly	pointer
->	O
fl_flags	char
;	O
int	O
result	int
;	O
result	int
=	O
(	O
y_flags	int
&	O
FL_USED	O
)	O
-	O
(	O
x_flags	int
&	O
FL_USED	O
)	O
;	O
if	O
(	O
result	int
)	O
return	O
result	int
;	O
if	O
(	O
!	O
(	O
x_flags	int
&	O
FL_USED	O
)	O
)	O
return	O
0	int
;	O
result	int
=	O
(	O
y_flags	int
&	O
FL_TYPE_DIR	O
)	O
-	O
(	O
x_flags	int
&	O
FL_TYPE_DIR	O
)	O
;	O
if	O
(	O
result	int
)	O
return	O
result	int
;	O
result	int
=	O
(	O
y_flags	int
&	O
FL_TYPE_MASK	O
)	O
-	O
(	O
x_flags	int
&	O
FL_TYPE_MASK	O
)	O
;	O
if	O
(	O
result	int
)	O
return	O
result	int
;	O
if	O
(	O
FL_IS_FILE	O
(	O
x_flags	int
)	O
)	O
{	O
struct	O
member_file	struct
*	O
x_member	pointer
=	O
find_member_file	function
(	O
flx	pointer
)	O
;	O
struct	O
member_file	struct
*	O
y_member	pointer
=	O
find_member_file	function
(	O
fly	pointer
)	O
;	O
return	O
x_member	pointer
->	O
mf_index	long
-	O
y_member	pointer
->	O
mf_index	long
;	O
}	O
else	O
{	O
int	O
x_depth	int
=	O
links_depth	function
(	O
flx	pointer
)	O
;	O
int	O
y_depth	int
=	O
links_depth	function
(	O
fly	pointer
)	O
;	O
return	O
(	O
x_depth	int
-	O
y_depth	int
)	O
;	O
}	O
}	O
int	O
write_idhead	function
(	O
struct	O
idhead	struct
*	O
idhp	pointer
)	O
{	O
return	O
io_idhead	function
(	O
idhp	pointer
->	O
idh_FILE	pointer
,	O
io_write	function
,	O
idhp	pointer
)	O
;	O
}	O
int	O
io_write	function
(	O
FILE	struct
*	O
output_FILE	pointer
,	O
void	O
*	O
addr	pointer
,	O
unsigned	O
int	O
size	long
,	O
int	O
io_type	int
)	O
{	O
if	O
(	O
io_type	int
==	O
IO_TYPE_INT	int
||	O
size	long
==	O
1	int
)	O
{	O
switch	O
(	O
size	long
)	O
{	O
case	O
4	int
:	O
putc	function
(	O
*	O
(	O
unsigned	O
long	O
*	O
)	O
addr	pointer
,	O
output_FILE	pointer
)	O
;	O
putc	function
(	O
*	O
(	O
unsigned	O
long	O
*	O
)	O
addr	pointer
>>	O
010	int
,	O
output_FILE	pointer
)	O
;	O
putc	function
(	O
*	O
(	O
unsigned	O
long	O
*	O
)	O
addr	pointer
>>	O
020	int
,	O
output_FILE	pointer
)	O
;	O
putc	function
(	O
*	O
(	O
unsigned	O
long	O
*	O
)	O
addr	pointer
>>	O
030	int
,	O
output_FILE	pointer
)	O
;	O
break	O
;	O
case	O
3	int
:	O
putc	function
(	O
*	O
(	O
unsigned	O
long	O
*	O
)	O
addr	pointer
,	O
output_FILE	pointer
)	O
;	O
putc	function
(	O
*	O
(	O
unsigned	O
long	O
*	O
)	O
addr	pointer
>>	O
010	int
,	O
output_FILE	pointer
)	O
;	O
putc	function
(	O
*	O
(	O
unsigned	O
long	O
*	O
)	O
addr	pointer
>>	O
020	int
,	O
output_FILE	pointer
)	O
;	O
break	O
;	O
case	O
2	int
:	O
putc	function
(	O
*	O
(	O
unsigned	O
short	O
*	O
)	O
addr	pointer
,	O
output_FILE	pointer
)	O
;	O
putc	function
(	O
*	O
(	O
unsigned	O
short	O
*	O
)	O
addr	pointer
>>	O
010	int
,	O
output_FILE	pointer
)	O
;	O
break	O
;	O
case	O
1	int
:	O
putc	function
(	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
addr	pointer
,	O
output_FILE	pointer
)	O
;	O
break	O
;	O
default	O
:	O
error	function
(	O
1	int
,	O
0	int
,	O
_	O
(	O
"unsupported size in io_write (): %d"	pointer
)	O
,	O
size	long
)	O
;	O
}	O
}	O
else	O
if	O
(	O
io_type	int
==	O
IO_TYPE_STR	int
)	O
{	O
fputs	function
(	O
addr	pointer
,	O
output_FILE	pointer
)	O
;	O
putc	function
(	O
'\0'	O
,	O
output_FILE	pointer
)	O
;	O
}	O
else	O
if	O
(	O
io_type	int
==	O
IO_TYPE_FIX	int
)	O
fwrite	function
(	O
addr	pointer
,	O
size	long
,	O
1	int
,	O
output_FILE	pointer
)	O
;	O
else	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"unknown I/O type: %d"	pointer
)	O
,	O
io_type	int
)	O
;	O
return	O
size	long
;	O
}	O
