KM	struct
vrgkmKeywordMap	array
[	O
]	O
=	O
{	O
{	O
"States"	pointer
,	O
KM_STATES	int
,	O
CN_GLOBAL	int
}	O
,	O
{	O
"Inputs"	pointer
,	O
KM_INPUTS	int
,	O
CN_GLOBAL	int
}	O
,	O
{	O
"Forcings"	pointer
,	O
KM_INPUTS	int
,	O
CN_GLOBAL	int
}	O
,	O
{	O
"Outputs"	pointer
,	O
KM_OUTPUTS	int
,	O
CN_GLOBAL	int
}	O
,	O
{	O
"Compartments"	pointer
,	O
KM_COMPARTMENTS	int
,	O
CN_GLOBAL	int
}	O
,	O
{	O
"Dynamics"	pointer
,	O
KM_DYNAMICS	int
,	O
CN_GLOBAL	int
}	O
,	O
{	O
"Initialize"	pointer
,	O
KM_SCALE	int
,	O
CN_GLOBAL	int
}	O
,	O
{	O
"Scale"	pointer
,	O
KM_SCALE	int
,	O
CN_GLOBAL	int
}	O
,	O
{	O
"Jacobian"	pointer
,	O
KM_JACOB	int
,	O
CN_GLOBAL	int
}	O
,	O
{	O
"Jacob"	pointer
,	O
KM_JACOB	int
,	O
CN_GLOBAL	int
}	O
,	O
{	O
"Events"	pointer
,	O
KM_EVENTS	int
,	O
CN_GLOBAL	int
}	O
,	O
{	O
"Roots"	pointer
,	O
KM_ROOTS	int
,	O
CN_GLOBAL	int
}	O
,	O
{	O
"CalcOutputs"	pointer
,	O
KM_CALCOUTPUTS	int
,	O
CN_GLOBAL	int
}	O
,	O
{	O
"dt"	pointer
,	O
KM_DXDT	int
,	O
CN_DYNAMICS	int
|	O
CN_INPUTDEF	int
}	O
,	O
{	O
"Inline"	pointer
,	O
KM_INLINE	int
,	O
CN_ALL	int
}	O
,	O
{	O
"SBMLModels"	pointer
,	O
KM_SBMLMODELS	int
,	O
CN_GLOBAL	int
|	O
CN_TEMPLATE_DEFINED	int
}	O
,	O
{	O
"PKTemplate"	pointer
,	O
KM_PKTEMPLATE	int
,	O
CN_GLOBAL	int
}	O
,	O
{	O
"End"	pointer
,	O
KM_END	int
,	O
CN_GLOBAL	int
|	O
CN_TEMPLATE_DEFINED	int
}	O
,	O
{	O
""	pointer
,	O
0	int
,	O
CN_ALL	int
}	O
}	O
;	O
PSTR	pointer
GetKeyword	function
(	O
int	O
iCode	int
)	O
{	O
PKM	pointer
pkm	pointer
=	O
&	O
vrgkmKeywordMap	array
[	O
0	int
]	O
;	O
while	O
(	O
*	O
pkm	pointer
->	O
szKeyword	pointer
&&	O
pkm	pointer
->	O
iKWCode	int
!=	O
iCode	int
)	O
pkm	pointer
++	O
;	O
return	O
(	O
pkm	pointer
->	O
szKeyword	pointer
)	O
;	O
}	O
int	O
GetKeywordCode	function
(	O
PSTR	pointer
szKeyword	pointer
,	O
PINT	pointer
pfContext	pointer
)	O
{	O
PKM	pointer
pkm	pointer
=	O
&	O
vrgkmKeywordMap	array
[	O
0	int
]	O
;	O
while	O
(	O
*	O
pkm	pointer
->	O
szKeyword	pointer
&&	O
strcmp	function
(	O
szKeyword	pointer
,	O
pkm	pointer
->	O
szKeyword	pointer
)	O
)	O
pkm	pointer
++	O
;	O
if	O
(	O
pfContext	pointer
)	O
*	O
pfContext	pointer
=	O
pkm	pointer
->	O
fContext	int
;	O
return	O
(	O
pkm	pointer
->	O
iKWCode	int
)	O
;	O
}	O
void	O
GetVarList	function
(	O
PINPUTBUF	pointer
pibIn	pointer
,	O
PSTR	pointer
szLex	pointer
,	O
int	O
iKWCode	int
)	O
{	O
int	O
iLexType	int
,	O
iErr	int
=	O
0	int
;	O
long	O
i	long
,	O
iLB	long
,	O
iUB	long
;	O
PSTRLEX	array
szPunct	array
,	O
szTmp	array
;	O
do	O
{	O
NextLex	function
(	O
pibIn	pointer
,	O
szLex	pointer
,	O
&	O
iLexType	int
)	O
;	O
if	O
(	O
iLexType	int
&	O
LX_IDENTIFIER	int
)	O
{	O
if	O
(	O
GetPunct	function
(	O
pibIn	pointer
,	O
szPunct	array
,	O
'['	O
)	O
)	O
{	O
GetArrayBounds	function
(	O
pibIn	pointer
,	O
&	O
iLB	long
,	O
&	O
iUB	long
)	O
;	O
for	O
(	O
i	long
=	O
iLB	long
;	O
i	long
<	O
iUB	long
;	O
i	long
++	O
)	O
{	O
sprintf	function
(	O
szTmp	array
,	O
"%s_%ld"	pointer
,	O
szLex	pointer
,	O
i	long
)	O
;	O
DeclareModelVar	function
(	O
pibIn	pointer
,	O
szTmp	array
,	O
iKWCode	int
)	O
;	O
}	O
}	O
else	O
{	O
*	O
pibIn	pointer
->	O
pbufCur	pointer
--	O
;	O
DeclareModelVar	function
(	O
pibIn	pointer
,	O
szLex	pointer
,	O
iKWCode	int
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
(	O
szLex	pointer
[	O
0	int
]	O
!=	O
','	O
)	O
&&	O
(	O
szLex	pointer
[	O
0	int
]	O
!=	O
CH_RBRACE	O
)	O
)	O
{	O
iErr	int
=	O
szPunct	array
[	O
1	int
]	O
=	O
CH_RBRACE	O
;	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_EXPECTED	int
|	O
RE_FATAL	int
,	O
szPunct	array
,	O
"* List must be comma-delimited and end with }."	pointer
)	O
;	O
}	O
}	O
}	O
while	O
(	O
(	O
szLex	pointer
[	O
0	int
]	O
!=	O
CH_RBRACE	O
)	O
&&	O
(	O
!	O
iErr	int
)	O
)	O
;	O
}	O
void	O
ProcessDTStatement	function
(	O
PINPUTBUF	pointer
pibIn	pointer
,	O
PSTR	pointer
szLex	pointer
,	O
PSTR	pointer
szEqn	pointer
,	O
int	O
iKWCode	int
)	O
{	O
PSTRLEX	array
szPunct	array
,	O
szTmp	array
;	O
PSTREQN	array
szEqnU	pointer
;	O
PINPUTINFO	pointer
pinfo	pointer
;	O
int	O
iArgType	int
=	O
LX_IDENTIFIER	int
;	O
long	O
i	long
,	O
iLB	long
,	O
iUB	long
;	O
pinfo	pointer
=	O
(	O
PINPUTINFO	pointer
)	O
pibIn	pointer
->	O
pInfo	pointer
;	O
if	O
(	O
!	O
GetFuncArgs	function
(	O
pibIn	pointer
,	O
1	int
,	O
&	O
iArgType	int
,	O
szLex	pointer
,	O
&	O
iLB	long
,	O
&	O
iUB	long
)	O
)	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_BADSTATE	O
|	O
RE_FATAL	int
,	O
szLex	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
GetPunct	function
(	O
pibIn	pointer
,	O
szPunct	array
,	O
'='	O
)	O
)	O
{	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_LEXEXPECTED	int
,	O
"="	pointer
,	O
NULL	O
)	O
;	O
}	O
if	O
(	O
iUB	long
==	O
-	O
1	int
)	O
{	O
if	O
(	O
GetVarType	function
(	O
pinfo	pointer
->	O
pvmGloVars	pointer
,	O
szLex	pointer
)	O
!=	O
ID_STATE	int
)	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_BADSTATE	O
|	O
RE_FATAL	int
,	O
szLex	pointer
,	O
NULL	O
)	O
;	O
GetStatement	function
(	O
pibIn	pointer
,	O
szEqn	pointer
,	O
iKWCode	int
)	O
;	O
UnrollEquation	function
(	O
pibIn	pointer
,	O
0	int
,	O
szEqn	pointer
,	O
szEqnU	pointer
)	O
;	O
DefineVariable	function
(	O
pibIn	pointer
,	O
szLex	pointer
,	O
szEqnU	pointer
,	O
iKWCode	int
)	O
;	O
}	O
else	O
{	O
GetStatement	function
(	O
pibIn	pointer
,	O
szEqn	pointer
,	O
iKWCode	int
)	O
;	O
for	O
(	O
i	long
=	O
iLB	long
;	O
i	long
<	O
iUB	long
;	O
i	long
++	O
)	O
{	O
sprintf	function
(	O
szTmp	array
,	O
"%s_%ld"	pointer
,	O
szLex	pointer
,	O
i	long
)	O
;	O
if	O
(	O
GetVarType	function
(	O
pinfo	pointer
->	O
pvmGloVars	pointer
,	O
szTmp	array
)	O
!=	O
ID_STATE	int
)	O
{	O
sprintf	function
(	O
szTmp	array
,	O
"%s[%ld]"	pointer
,	O
szLex	pointer
,	O
i	long
)	O
;	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_BADSTATE	O
|	O
RE_FATAL	int
,	O
szTmp	array
,	O
NULL	O
)	O
;	O
}	O
UnrollEquation	function
(	O
pibIn	pointer
,	O
i	long
,	O
szEqn	pointer
,	O
szEqnU	pointer
)	O
;	O
DefineVariable	function
(	O
pibIn	pointer
,	O
szTmp	array
,	O
szEqnU	pointer
,	O
iKWCode	int
)	O
;	O
}	O
}	O
if	O
(	O
!	O
GetPunct	function
(	O
pibIn	pointer
,	O
szLex	pointer
,	O
CH_STMTTERM	O
)	O
)	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_EXPECTED	int
|	O
RE_FATAL	int
,	O
";"	pointer
,	O
NULL	O
)	O
;	O
}	O
void	O
ProcessIdentifier	function
(	O
PINPUTBUF	pointer
pibIn	pointer
,	O
PSTR	pointer
szLex	pointer
,	O
PSTR	pointer
szEqn	pointer
,	O
int	O
iKWCode	int
)	O
{	O
PSTRLEX	array
szPunct	array
,	O
szTmp	array
;	O
PSTREQN	array
szEqnU	pointer
;	O
PINPUTINFO	pointer
pinfo	pointer
;	O
long	O
i	long
,	O
iLB	long
,	O
iUB	long
;	O
pinfo	pointer
=	O
(	O
PINPUTINFO	pointer
)	O
pibIn	pointer
->	O
pInfo	pointer
;	O
if	O
(	O
(	O
i	long
=	O
strlen	function
(	O
szLex	pointer
)	O
)	O
>	O
MAX_NAME	int
)	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_NAMETOOLONG	O
|	O
RE_FATAL	int
,	O
szLex	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
GetPunct	function
(	O
pibIn	pointer
,	O
szPunct	array
,	O
'['	O
)	O
)	O
{	O
if	O
(	O
szPunct	array
[	O
0	int
]	O
==	O
'='	O
)	O
{	O
GetStatement	function
(	O
pibIn	pointer
,	O
szEqn	pointer
,	O
iKWCode	int
)	O
;	O
UnrollEquation	function
(	O
pibIn	pointer
,	O
0	int
,	O
szEqn	pointer
,	O
szEqnU	pointer
)	O
;	O
DefineVariable	function
(	O
pibIn	pointer
,	O
szLex	pointer
,	O
szEqnU	pointer
,	O
iKWCode	int
)	O
;	O
if	O
(	O
!	O
GetPunct	function
(	O
pibIn	pointer
,	O
szLex	pointer
,	O
CH_STMTTERM	O
)	O
)	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_EXPECTED	int
|	O
RE_FATAL	int
,	O
";"	pointer
,	O
NULL	O
)	O
;	O
}	O
else	O
if	O
(	O
szPunct	array
[	O
0	int
]	O
==	O
CH_STMTTERM	O
)	O
{	O
if	O
(	O
pinfo	pointer
->	O
wContext	int
==	O
CN_GLOBAL	int
)	O
{	O
DefineVariable	function
(	O
pibIn	pointer
,	O
szLex	pointer
,	O
"0\0"	pointer
,	O
iKWCode	int
)	O
;	O
}	O
else	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_LEXEXPECTED	int
|	O
RE_FATAL	int
,	O
"= or ["	pointer
,	O
NULL	O
)	O
;	O
}	O
else	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_LEXEXPECTED	int
|	O
RE_FATAL	int
,	O
"=, [ or ;"	pointer
,	O
NULL	O
)	O
;	O
}	O
else	O
{	O
GetArrayBounds	function
(	O
pibIn	pointer
,	O
&	O
iLB	long
,	O
&	O
iUB	long
)	O
;	O
if	O
(	O
GetPunct	function
(	O
pibIn	pointer
,	O
szPunct	array
,	O
'='	O
)	O
)	O
{	O
GetStatement	function
(	O
pibIn	pointer
,	O
szEqn	pointer
,	O
iKWCode	int
)	O
;	O
for	O
(	O
i	long
=	O
iLB	long
;	O
i	long
<	O
iUB	long
;	O
i	long
++	O
)	O
{	O
sprintf	function
(	O
szTmp	array
,	O
"%s_%ld"	pointer
,	O
szLex	pointer
,	O
i	long
)	O
;	O
UnrollEquation	function
(	O
pibIn	pointer
,	O
i	long
,	O
szEqn	pointer
,	O
szEqnU	pointer
)	O
;	O
DefineVariable	function
(	O
pibIn	pointer
,	O
szTmp	array
,	O
szEqnU	pointer
,	O
iKWCode	int
)	O
;	O
}	O
if	O
(	O
!	O
GetPunct	function
(	O
pibIn	pointer
,	O
szLex	pointer
,	O
CH_STMTTERM	O
)	O
)	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_EXPECTED	int
|	O
RE_FATAL	int
,	O
";"	pointer
,	O
NULL	O
)	O
;	O
}	O
else	O
if	O
(	O
szPunct	array
[	O
0	int
]	O
==	O
CH_STMTTERM	O
)	O
{	O
if	O
(	O
pinfo	pointer
->	O
wContext	int
==	O
CN_GLOBAL	int
)	O
{	O
for	O
(	O
i	long
=	O
iLB	long
;	O
i	long
<	O
iUB	long
;	O
i	long
++	O
)	O
{	O
sprintf	function
(	O
szTmp	array
,	O
"%s_%ld"	pointer
,	O
szLex	pointer
,	O
i	long
)	O
;	O
DefineVariable	function
(	O
pibIn	pointer
,	O
szTmp	array
,	O
"0\0"	pointer
,	O
iKWCode	int
)	O
;	O
}	O
}	O
else	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_LEXEXPECTED	int
|	O
RE_FATAL	int
,	O
"= or ["	pointer
,	O
NULL	O
)	O
;	O
}	O
else	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_LEXEXPECTED	int
|	O
RE_FATAL	int
,	O
"= or ;"	pointer
,	O
NULL	O
)	O
;	O
}	O
}	O
void	O
ProcessInlineStatement	function
(	O
PINPUTBUF	pointer
pibIn	pointer
,	O
PSTR	pointer
szLex	pointer
,	O
PSTR	pointer
szEqn	pointer
,	O
int	O
iKWCode	int
)	O
{	O
GetStatement	function
(	O
pibIn	pointer
,	O
szEqn	pointer
,	O
iKWCode	int
)	O
;	O
szEqn	pointer
=	O
szEqn	pointer
+	O
1	int
;	O
szEqn	pointer
[	O
strlen	function
(	O
szEqn	pointer
)	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
DefineVariable	function
(	O
pibIn	pointer
,	O
szLex	pointer
,	O
szEqn	pointer
,	O
iKWCode	int
)	O
;	O
if	O
(	O
!	O
GetPunct	function
(	O
pibIn	pointer
,	O
szLex	pointer
,	O
CH_STMTTERM	O
)	O
)	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_EXPECTED	int
|	O
RE_FATAL	int
,	O
";"	pointer
,	O
NULL	O
)	O
;	O
}	O
void	O
ProcessWord	function
(	O
PINPUTBUF	pointer
pibIn	pointer
,	O
PSTR	pointer
szLex	pointer
,	O
PSTR	pointer
szEqn	pointer
)	O
{	O
int	O
iErr	int
=	O
0	int
;	O
int	O
iKWCode	int
,	O
fContext	int
;	O
PSTRLEX	array
szPunct	array
;	O
PINPUTINFO	pointer
pinfo	pointer
;	O
static	O
BOOL	int
bCalcOutputsDefined	int
=	O
FALSE	int
;	O
static	O
BOOL	int
bDynamicsDefined	int
=	O
FALSE	int
;	O
static	O
BOOL	int
bInitializeDefined	int
=	O
FALSE	int
;	O
static	O
BOOL	int
bJacobianDefined	int
=	O
FALSE	int
;	O
if	O
(	O
!	O
pibIn	pointer
||	O
!	O
szLex	pointer
||	O
!	O
szLex	pointer
[	O
0	int
]	O
||	O
!	O
szEqn	pointer
)	O
return	O
;	O
pinfo	pointer
=	O
(	O
PINPUTINFO	pointer
)	O
pibIn	pointer
->	O
pInfo	pointer
;	O
iKWCode	int
=	O
GetKeywordCode	function
(	O
szLex	pointer
,	O
&	O
fContext	int
)	O
;	O
assert	O
(	O
pinfo	pointer
->	O
wContext	int
!=	O
CN_END	int
)	O
;	O
if	O
(	O
(	O
pinfo	pointer
->	O
wContext	int
==	O
CN_END	int
)	O
||	O
(	O
iKWCode	int
&&	O
!	O
(	O
fContext	int
&	O
pinfo	pointer
->	O
wContext	int
)	O
)	O
)	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_BADCONTEXT	O
|	O
RE_FATAL	int
,	O
szLex	pointer
,	O
NULL	O
)	O
;	O
else	O
{	O
switch	O
(	O
iKWCode	int
)	O
{	O
case	O
KM_END	int
:	O
pinfo	pointer
->	O
wContext	int
=	O
CN_END	int
;	O
break	O
;	O
case	O
KM_STATES	int
:	O
case	O
KM_INPUTS	int
:	O
case	O
KM_OUTPUTS	int
:	O
case	O
KM_COMPARTMENTS	int
:	O
if	O
(	O
GetPunct	function
(	O
pibIn	pointer
,	O
szPunct	array
,	O
'='	O
)	O
)	O
{	O
if	O
(	O
GetPunct	function
(	O
pibIn	pointer
,	O
szPunct	array
,	O
CH_LBRACE	O
)	O
)	O
GetVarList	function
(	O
pibIn	pointer
,	O
szLex	pointer
,	O
iKWCode	int
)	O
;	O
else	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_EXPECTED	int
|	O
RE_FATAL	int
,	O
"{"	pointer
,	O
NULL	O
)	O
;	O
}	O
else	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_EXPECTED	int
|	O
RE_FATAL	int
,	O
"="	pointer
,	O
NULL	O
)	O
;	O
break	O
;	O
case	O
KM_CALCOUTPUTS	int
:	O
if	O
(	O
bCalcOutputsDefined	int
)	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_DUPSECT	O
|	O
RE_FATAL	int
,	O
"CalcOutputs"	pointer
,	O
NULL	O
)	O
;	O
bCalcOutputsDefined	int
=	O
TRUE	int
;	O
if	O
(	O
!	O
GetPunct	function
(	O
pibIn	pointer
,	O
szPunct	array
,	O
CH_LBRACE	O
)	O
)	O
{	O
szPunct	array
[	O
1	int
]	O
=	O
CH_LBRACE	O
;	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_EXPECTED	int
|	O
RE_FATAL	int
,	O
szPunct	array
,	O
"* Section must be delimited by curly braces."	pointer
)	O
;	O
}	O
else	O
pinfo	pointer
->	O
wContext	int
=	O
KM_TO_CN	O
(	O
iKWCode	int
)	O
;	O
break	O
;	O
case	O
KM_JACOB	int
:	O
if	O
(	O
bJacobianDefined	int
)	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_DUPSECT	O
|	O
RE_FATAL	int
,	O
"Jacobian"	pointer
,	O
NULL	O
)	O
;	O
bJacobianDefined	int
=	O
TRUE	int
;	O
if	O
(	O
!	O
GetPunct	function
(	O
pibIn	pointer
,	O
szPunct	array
,	O
CH_LBRACE	O
)	O
)	O
{	O
szPunct	array
[	O
1	int
]	O
=	O
CH_LBRACE	O
;	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_EXPECTED	int
|	O
RE_FATAL	int
,	O
szPunct	array
,	O
"* Section must be delimited by curly braces."	pointer
)	O
;	O
}	O
else	O
pinfo	pointer
->	O
wContext	int
=	O
KM_TO_CN	O
(	O
iKWCode	int
)	O
;	O
break	O
;	O
case	O
KM_SCALE	int
:	O
if	O
(	O
bInitializeDefined	int
)	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_DUPSECT	O
|	O
RE_FATAL	int
,	O
"Initialize"	pointer
,	O
NULL	O
)	O
;	O
bInitializeDefined	int
=	O
TRUE	int
;	O
if	O
(	O
!	O
GetPunct	function
(	O
pibIn	pointer
,	O
szPunct	array
,	O
CH_LBRACE	O
)	O
)	O
{	O
szPunct	array
[	O
1	int
]	O
=	O
CH_LBRACE	O
;	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_EXPECTED	int
|	O
RE_FATAL	int
,	O
szPunct	array
,	O
"* Section must be delimited by curly braces."	pointer
)	O
;	O
}	O
else	O
pinfo	pointer
->	O
wContext	int
=	O
KM_TO_CN	O
(	O
iKWCode	int
)	O
;	O
break	O
;	O
case	O
KM_EVENTS	int
:	O
case	O
KM_ROOTS	int
:	O
if	O
(	O
!	O
GetPunct	function
(	O
pibIn	pointer
,	O
szPunct	array
,	O
CH_LBRACE	O
)	O
)	O
{	O
szPunct	array
[	O
1	int
]	O
=	O
CH_LBRACE	O
;	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_EXPECTED	int
|	O
RE_FATAL	int
,	O
szPunct	array
,	O
"* Section must be delimited by curly braces."	pointer
)	O
;	O
}	O
else	O
pinfo	pointer
->	O
wContext	int
=	O
KM_TO_CN	O
(	O
iKWCode	int
)	O
;	O
break	O
;	O
case	O
KM_DYNAMICS	int
:	O
if	O
(	O
bDynamicsDefined	int
)	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_DUPSECT	O
|	O
RE_FATAL	int
,	O
"Dynamics"	pointer
,	O
NULL	O
)	O
;	O
bDynamicsDefined	int
=	O
TRUE	int
;	O
if	O
(	O
!	O
GetPunct	function
(	O
pibIn	pointer
,	O
szPunct	array
,	O
CH_LBRACE	O
)	O
)	O
{	O
szPunct	array
[	O
1	int
]	O
=	O
CH_LBRACE	O
;	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_EXPECTED	int
|	O
RE_FATAL	int
,	O
szPunct	array
,	O
"* Section must be delimited by curly braces."	pointer
)	O
;	O
}	O
else	O
pinfo	pointer
->	O
wContext	int
=	O
KM_TO_CN	O
(	O
iKWCode	int
)	O
;	O
break	O
;	O
case	O
KM_DXDT	int
:	O
ProcessDTStatement	function
(	O
pibIn	pointer
,	O
szLex	pointer
,	O
szEqn	pointer
,	O
iKWCode	int
)	O
;	O
break	O
;	O
case	O
KM_INLINE	int
:	O
ProcessInlineStatement	function
(	O
pibIn	pointer
,	O
szLex	pointer
,	O
szEqn	pointer
,	O
iKWCode	int
)	O
;	O
break	O
;	O
case	O
KM_SBMLMODELS	int
:	O
if	O
(	O
GetPunct	function
(	O
pibIn	pointer
,	O
szPunct	array
,	O
'='	O
)	O
)	O
{	O
if	O
(	O
GetPunct	function
(	O
pibIn	pointer
,	O
szPunct	array
,	O
CH_LBRACE	O
)	O
)	O
{	O
ReadSBMLModels	function
(	O
pibIn	pointer
)	O
;	O
}	O
else	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_EXPECTED	int
|	O
RE_FATAL	int
,	O
"{"	pointer
,	O
NULL	O
)	O
;	O
}	O
else	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_EXPECTED	int
|	O
RE_FATAL	int
,	O
"="	pointer
,	O
NULL	O
)	O
;	O
break	O
;	O
case	O
KM_PKTEMPLATE	int
:	O
if	O
(	O
GetPunct	function
(	O
pibIn	pointer
,	O
szPunct	array
,	O
'='	O
)	O
)	O
{	O
if	O
(	O
GetPunct	function
(	O
pibIn	pointer
,	O
szPunct	array
,	O
CH_LBRACE	O
)	O
)	O
{	O
printf	function
(	O
"\nreading pharmacokinetic template "	pointer
)	O
;	O
ReadPKTemplate	function
(	O
pibIn	pointer
)	O
;	O
}	O
else	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_EXPECTED	int
|	O
RE_FATAL	int
,	O
"{"	pointer
,	O
NULL	O
)	O
;	O
}	O
else	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_EXPECTED	int
|	O
RE_FATAL	int
,	O
"="	pointer
,	O
NULL	O
)	O
;	O
break	O
;	O
default	O
:	O
ProcessIdentifier	function
(	O
pibIn	pointer
,	O
szLex	pointer
,	O
szEqn	pointer
,	O
iKWCode	int
)	O
;	O
break	O
;	O
}	O
if	O
(	O
iErr	int
)	O
EatStatement	function
(	O
pibIn	pointer
)	O
;	O
}	O
}	O
int	O
FindEnd	function
(	O
PBUF	pointer
pBuf	pointer
,	O
long	O
N	long
)	O
{	O
char	O
*	O
c	pointer
,	O
*	O
end	pointer
;	O
c	pointer
=	O
pBuf	pointer
;	O
end	pointer
=	O
pBuf	pointer
+	O
N	long
;	O
while	O
(	O
c	pointer
<	O
end	pointer
)	O
{	O
if	O
(	O
*	O
c	pointer
==	O
CH_EOLN	O
)	O
{	O
c	pointer
++	O
;	O
while	O
(	O
(	O
c	pointer
<	O
end	pointer
)	O
&&	O
(	O
isspace	function
(	O
*	O
c	pointer
)	O
)	O
)	O
c	pointer
++	O
;	O
if	O
(	O
c	pointer
<	O
end	pointer
)	O
{	O
if	O
(	O
(	O
(	O
c	pointer
+	O
2	int
)	O
<	O
end	pointer
)	O
&&	O
(	O
*	O
c	pointer
==	O
'E'	O
)	O
&&	O
(	O
*	O
(	O
c	pointer
+	O
1	int
)	O
==	O
'n'	O
)	O
&&	O
(	O
*	O
(	O
c	pointer
+	O
2	int
)	O
==	O
'd'	O
)	O
)	O
return	O
(	O
1	int
)	O
;	O
}	O
}	O
c	pointer
++	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
void	O
ReadModel	function
(	O
PINPUTINFO	pointer
pinfo	pointer
,	O
PINPUTINFO	pointer
ptempinfo	pointer
,	O
PSTR	pointer
szFileIn	pointer
)	O
{	O
INPUTBUF	struct
ibIn	struct
;	O
PSTRLEX	array
szLex	pointer
;	O
PSTREQN	array
szEqn	pointer
;	O
int	O
iLexType	int
;	O
if	O
(	O
!	O
InitBuffer	function
(	O
&	O
ibIn	struct
,	O
-	O
1	int
,	O
szFileIn	pointer
)	O
)	O
ReportError	function
(	O
&	O
ibIn	struct
,	O
RE_INIT	int
|	O
RE_FATAL	int
,	O
"ReadModel"	pointer
,	O
NULL	O
)	O
;	O
ibIn	struct
.	O
pInfo	pointer
=	O
(	O
PVOID	pointer
)	O
pinfo	pointer
;	O
ibIn	struct
.	O
pTempInfo	pointer
=	O
(	O
PVOID	pointer
)	O
ptempinfo	pointer
;	O
if	O
(	O
FindEnd	function
(	O
ibIn	struct
.	O
pbufOrg	pointer
,	O
ibIn	struct
.	O
lBufSize	long
)	O
==	O
0	int
)	O
ReportError	function
(	O
NULL	O
,	O
RE_NOEND	O
|	O
RE_FATAL	int
,	O
szFileIn	pointer
,	O
NULL	O
)	O
;	O
do	O
{	O
NextLex	function
(	O
&	O
ibIn	struct
,	O
szLex	pointer
,	O
&	O
iLexType	int
)	O
;	O
switch	O
(	O
iLexType	int
)	O
{	O
case	O
LX_NULL	int
:	O
pinfo	pointer
->	O
wContext	int
=	O
CN_END	int
;	O
break	O
;	O
case	O
LX_IDENTIFIER	int
:	O
ProcessWord	function
(	O
&	O
ibIn	struct
,	O
szLex	pointer
,	O
szEqn	pointer
)	O
;	O
break	O
;	O
case	O
LX_PUNCT	int
:	O
case	O
LX_EQNPUNCT	int
:	O
if	O
(	O
szLex	pointer
[	O
0	int
]	O
==	O
CH_STMTTERM	O
)	O
{	O
break	O
;	O
}	O
else	O
{	O
if	O
(	O
szLex	pointer
[	O
0	int
]	O
==	O
CH_RBRACE	O
&&	O
(	O
pinfo	pointer
->	O
wContext	int
&	O
(	O
CN_DYNAMICS	int
|	O
CN_JACOB	int
|	O
CN_SCALE	int
)	O
)	O
)	O
{	O
pinfo	pointer
->	O
wContext	int
=	O
CN_GLOBAL	int
;	O
break	O
;	O
}	O
else	O
{	O
if	O
(	O
szLex	pointer
[	O
0	int
]	O
==	O
CH_COMMENT	O
)	O
{	O
SkipComment	function
(	O
&	O
ibIn	struct
)	O
;	O
break	O
;	O
}	O
}	O
}	O
default	O
:	O
ReportError	function
(	O
&	O
ibIn	struct
,	O
RE_UNEXPECTED	int
,	O
szLex	pointer
,	O
"* Ignoring"	pointer
)	O
;	O
break	O
;	O
case	O
LX_INTEGER	int
:	O
case	O
LX_FLOAT	int
:	O
ReportError	function
(	O
&	O
ibIn	struct
,	O
RE_UNEXPNUMBER	int
,	O
szLex	pointer
,	O
"* Ignoring"	pointer
)	O
;	O
break	O
;	O
}	O
}	O
while	O
(	O
pinfo	pointer
->	O
wContext	int
!=	O
CN_END	int
)	O
;	O
pinfo	pointer
->	O
wContext	int
=	O
CN_END	int
;	O
if	O
(	O
ibIn	struct
.	O
pbufOrg	pointer
)	O
free	function
(	O
ibIn	struct
.	O
pbufOrg	pointer
)	O
;	O
}	O
