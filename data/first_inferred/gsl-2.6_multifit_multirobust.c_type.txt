static	O
int	O
robust_test_convergence	function
(	O
const	O
gsl_vector	struct
*	O
c_prev	pointer
,	O
const	O
gsl_vector	struct
*	O
c	pointer
,	O
const	O
double	O
tol	double
)	O
;	O
static	O
double	O
robust_madsigma	function
(	O
const	O
gsl_vector	struct
*	O
r	pointer
,	O
const	O
size_t	long
p	int
,	O
gsl_vector	struct
*	O
workn	pointer
)	O
;	O
static	O
double	O
robust_robsigma	function
(	O
const	O
gsl_vector	struct
*	O
r	pointer
,	O
const	O
double	O
s	pointer
,	O
const	O
double	O
tune	double
,	O
gsl_multifit_robust_workspace	struct
*	O
w	pointer
)	O
;	O
static	O
double	O
robust_sigma	function
(	O
const	O
double	O
s_ols	double
,	O
const	O
double	O
s_rob	double
,	O
gsl_multifit_robust_workspace	struct
*	O
w	pointer
)	O
;	O
static	O
int	O
robust_covariance	function
(	O
const	O
double	O
sigma	double
,	O
gsl_matrix	struct
*	O
cov	pointer
,	O
gsl_multifit_robust_workspace	struct
*	O
w	pointer
)	O
;	O
gsl_multifit_robust_workspace	struct
*	O
gsl_multifit_robust_alloc	function
(	O
const	O
gsl_multifit_robust_type	struct
*	O
T	pointer
,	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
p	int
)	O
{	O
gsl_multifit_robust_workspace	struct
*	O
w	pointer
;	O
if	O
(	O
n	int
<	O
p	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"observations n must be >= p"	pointer
,	O
GSL_EINVAL	int
,	O
0	int
)	O
;	O
}	O
w	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
gsl_multifit_robust_workspace	struct
)	O
)	O
;	O
if	O
(	O
w	pointer
==	O
0	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for multifit_robust struct"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	pointer
->	O
n	int
=	O
n	int
;	O
w	pointer
->	O
p	int
=	O
p	int
;	O
w	pointer
->	O
type	pointer
=	O
T	pointer
;	O
w	pointer
->	O
maxiter	long
=	O
100	int
;	O
w	pointer
->	O
tune	double
=	O
w	pointer
->	O
type	pointer
->	O
tuning_default	double
;	O
w	pointer
->	O
multifit_p	pointer
=	O
gsl_multifit_linear_alloc	function
(	O
n	int
,	O
p	int
)	O
;	O
if	O
(	O
w	pointer
->	O
multifit_p	pointer
==	O
0	int
)	O
{	O
gsl_multifit_robust_free	function
(	O
w	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for multifit_linear struct"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	pointer
->	O
r	pointer
=	O
gsl_vector_alloc	function
(	O
n	int
)	O
;	O
if	O
(	O
w	pointer
->	O
r	pointer
==	O
0	int
)	O
{	O
gsl_multifit_robust_free	function
(	O
w	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for residuals"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	pointer
->	O
weights	pointer
=	O
gsl_vector_alloc	function
(	O
n	int
)	O
;	O
if	O
(	O
w	pointer
->	O
weights	pointer
==	O
0	int
)	O
{	O
gsl_multifit_robust_free	function
(	O
w	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for weights"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	pointer
->	O
c_prev	pointer
=	O
gsl_vector_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
w	pointer
->	O
c_prev	pointer
==	O
0	int
)	O
{	O
gsl_multifit_robust_free	function
(	O
w	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for c_prev"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	pointer
->	O
resfac	pointer
=	O
gsl_vector_alloc	function
(	O
n	int
)	O
;	O
if	O
(	O
w	pointer
->	O
resfac	pointer
==	O
0	int
)	O
{	O
gsl_multifit_robust_free	function
(	O
w	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for residual factors"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	pointer
->	O
psi	pointer
=	O
gsl_vector_alloc	function
(	O
n	int
)	O
;	O
if	O
(	O
w	pointer
->	O
psi	pointer
==	O
0	int
)	O
{	O
gsl_multifit_robust_free	function
(	O
w	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for psi"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	pointer
->	O
dpsi	pointer
=	O
gsl_vector_alloc	function
(	O
n	int
)	O
;	O
if	O
(	O
w	pointer
->	O
dpsi	pointer
==	O
0	int
)	O
{	O
gsl_multifit_robust_free	function
(	O
w	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for dpsi"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	pointer
->	O
QSI	pointer
=	O
gsl_matrix_alloc	function
(	O
p	int
,	O
p	int
)	O
;	O
if	O
(	O
w	pointer
->	O
QSI	pointer
==	O
0	int
)	O
{	O
gsl_multifit_robust_free	function
(	O
w	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for QSI"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	pointer
->	O
D	pointer
=	O
gsl_vector_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
w	pointer
->	O
D	pointer
==	O
0	int
)	O
{	O
gsl_multifit_robust_free	function
(	O
w	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for D"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	pointer
->	O
workn	pointer
=	O
gsl_vector_alloc	function
(	O
n	int
)	O
;	O
if	O
(	O
w	pointer
->	O
workn	pointer
==	O
0	int
)	O
{	O
gsl_multifit_robust_free	function
(	O
w	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for workn"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	pointer
->	O
stats	struct
.	O
sigma_ols	double
=	O
0.0	int
;	O
w	pointer
->	O
stats	struct
.	O
sigma_mad	double
=	O
0.0	int
;	O
w	pointer
->	O
stats	struct
.	O
sigma_rob	double
=	O
0.0	int
;	O
w	pointer
->	O
stats	struct
.	O
sigma	double
=	O
0.0	int
;	O
w	pointer
->	O
stats	struct
.	O
Rsq	double
=	O
0.0	int
;	O
w	pointer
->	O
stats	struct
.	O
adj_Rsq	double
=	O
0.0	int
;	O
w	pointer
->	O
stats	struct
.	O
rmse	double
=	O
0.0	int
;	O
w	pointer
->	O
stats	struct
.	O
sse	double
=	O
0.0	int
;	O
w	pointer
->	O
stats	struct
.	O
dof	long
=	O
n	int
-	O
p	int
;	O
w	pointer
->	O
stats	struct
.	O
weights	pointer
=	O
w	pointer
->	O
weights	pointer
;	O
w	pointer
->	O
stats	struct
.	O
r	pointer
=	O
w	pointer
->	O
r	pointer
;	O
return	O
w	pointer
;	O
}	O
void	O
gsl_multifit_robust_free	function
(	O
gsl_multifit_robust_workspace	struct
*	O
w	pointer
)	O
{	O
if	O
(	O
w	pointer
->	O
multifit_p	pointer
)	O
gsl_multifit_linear_free	function
(	O
w	pointer
->	O
multifit_p	pointer
)	O
;	O
if	O
(	O
w	pointer
->	O
r	pointer
)	O
gsl_vector_free	function
(	O
w	pointer
->	O
r	pointer
)	O
;	O
if	O
(	O
w	pointer
->	O
weights	pointer
)	O
gsl_vector_free	function
(	O
w	pointer
->	O
weights	pointer
)	O
;	O
if	O
(	O
w	pointer
->	O
c_prev	pointer
)	O
gsl_vector_free	function
(	O
w	pointer
->	O
c_prev	pointer
)	O
;	O
if	O
(	O
w	pointer
->	O
resfac	pointer
)	O
gsl_vector_free	function
(	O
w	pointer
->	O
resfac	pointer
)	O
;	O
if	O
(	O
w	pointer
->	O
psi	pointer
)	O
gsl_vector_free	function
(	O
w	pointer
->	O
psi	pointer
)	O
;	O
if	O
(	O
w	pointer
->	O
dpsi	pointer
)	O
gsl_vector_free	function
(	O
w	pointer
->	O
dpsi	pointer
)	O
;	O
if	O
(	O
w	pointer
->	O
QSI	pointer
)	O
gsl_matrix_free	function
(	O
w	pointer
->	O
QSI	pointer
)	O
;	O
if	O
(	O
w	pointer
->	O
D	pointer
)	O
gsl_vector_free	function
(	O
w	pointer
->	O
D	pointer
)	O
;	O
if	O
(	O
w	pointer
->	O
workn	pointer
)	O
gsl_vector_free	function
(	O
w	pointer
->	O
workn	pointer
)	O
;	O
free	function
(	O
w	pointer
)	O
;	O
}	O
int	O
gsl_multifit_robust_tune	function
(	O
const	O
double	O
tune	double
,	O
gsl_multifit_robust_workspace	struct
*	O
w	pointer
)	O
{	O
w	pointer
->	O
tune	double
=	O
tune	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_multifit_robust_maxiter	function
(	O
const	O
size_t	long
maxiter	long
,	O
gsl_multifit_robust_workspace	struct
*	O
w	pointer
)	O
{	O
if	O
(	O
w	pointer
->	O
maxiter	long
==	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"maxiter must be greater than 0"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
else	O
{	O
w	pointer
->	O
maxiter	long
=	O
maxiter	long
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
const	O
char	O
*	O
gsl_multifit_robust_name	function
(	O
const	O
gsl_multifit_robust_workspace	struct
*	O
w	pointer
)	O
{	O
return	O
w	pointer
->	O
type	pointer
->	O
name	pointer
;	O
}	O
gsl_multifit_robust_stats	struct
gsl_multifit_robust_statistics	function
(	O
const	O
gsl_multifit_robust_workspace	struct
*	O
w	pointer
)	O
{	O
return	O
w	pointer
->	O
stats	struct
;	O
}	O
int	O
gsl_multifit_robust_weights	function
(	O
const	O
gsl_vector	struct
*	O
r	pointer
,	O
gsl_vector	struct
*	O
wts	pointer
,	O
gsl_multifit_robust_workspace	struct
*	O
w	pointer
)	O
{	O
if	O
(	O
r	pointer
->	O
size	long
!=	O
wts	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"residual vector does not match weight vector size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
s	pointer
;	O
double	O
sigma	double
;	O
sigma	double
=	O
robust_madsigma	function
(	O
r	pointer
,	O
w	pointer
->	O
p	int
,	O
wts	pointer
)	O
;	O
gsl_vector_memcpy	function
(	O
wts	pointer
,	O
r	pointer
)	O
;	O
if	O
(	O
sigma	double
>	O
0.0	int
)	O
gsl_vector_scale	function
(	O
wts	pointer
,	O
1.0	int
/	O
(	O
sigma	double
*	O
w	pointer
->	O
tune	double
)	O
)	O
;	O
s	pointer
=	O
w	pointer
->	O
type	pointer
->	O
wfun	pointer
(	O
wts	pointer
,	O
wts	pointer
)	O
;	O
return	O
s	pointer
;	O
}	O
}	O
int	O
gsl_multifit_robust	function
(	O
const	O
gsl_matrix	struct
*	O
X	pointer
,	O
const	O
gsl_vector	struct
*	O
y	double
,	O
gsl_vector	struct
*	O
c	pointer
,	O
gsl_matrix	struct
*	O
cov	pointer
,	O
gsl_multifit_robust_workspace	struct
*	O
w	pointer
)	O
{	O
if	O
(	O
X	pointer
->	O
size1	long
!=	O
y	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"number of observations in y does not match rows of matrix X"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
X	pointer
->	O
size2	long
!=	O
c	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"number of parameters c does not match columns of matrix X"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
cov	pointer
->	O
size1	long
!=	O
cov	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"covariance matrix is not square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
c	pointer
->	O
size	long
!=	O
cov	pointer
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"number of parameters does not match size of covariance matrix"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
X	pointer
->	O
size1	long
!=	O
w	pointer
->	O
n	int
||	O
X	pointer
->	O
size2	long
!=	O
w	pointer
->	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"size of workspace does not match size of observation matrix"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
s	pointer
;	O
double	O
chisq	pointer
;	O
const	O
double	O
tol	double
=	O
GSL_SQRT_DBL_EPSILON	int
;	O
int	O
converged	int
=	O
0	int
;	O
size_t	long
numit	long
=	O
0	int
;	O
const	O
size_t	long
n	int
=	O
y	double
->	O
size	long
;	O
double	O
sigy	double
=	O
gsl_stats_sd	function
(	O
y	double
->	O
data	pointer
,	O
y	double
->	O
stride	long
,	O
n	int
)	O
;	O
double	O
sig_lower	double
;	O
size_t	long
i	long
;	O
sig_lower	double
=	O
1.0e-6	int
*	O
sigy	double
;	O
if	O
(	O
sig_lower	double
==	O
0.0	int
)	O
sig_lower	double
=	O
1.0	int
;	O
s	pointer
=	O
gsl_multifit_linear	function
(	O
X	pointer
,	O
y	double
,	O
c	pointer
,	O
cov	pointer
,	O
&	O
chisq	pointer
,	O
w	pointer
->	O
multifit_p	pointer
)	O
;	O
if	O
(	O
s	pointer
)	O
return	O
s	pointer
;	O
gsl_matrix_memcpy	function
(	O
w	pointer
->	O
QSI	pointer
,	O
w	pointer
->	O
multifit_p	pointer
->	O
QSI	pointer
)	O
;	O
gsl_vector_memcpy	function
(	O
w	pointer
->	O
D	pointer
,	O
w	pointer
->	O
multifit_p	pointer
->	O
D	pointer
)	O
;	O
s	pointer
=	O
gsl_linalg_SV_leverage	function
(	O
w	pointer
->	O
multifit_p	pointer
->	O
A	pointer
,	O
w	pointer
->	O
resfac	pointer
)	O
;	O
if	O
(	O
s	pointer
)	O
return	O
s	pointer
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
double	O
h	pointer
=	O
gsl_vector_get	function
(	O
w	pointer
->	O
resfac	pointer
,	O
i	long
)	O
;	O
if	O
(	O
h	pointer
>	O
0.9999	int
)	O
h	pointer
=	O
0.9999	int
;	O
gsl_vector_set	function
(	O
w	pointer
->	O
resfac	pointer
,	O
i	long
,	O
1.0	int
/	O
sqrt	function
(	O
1.0	int
-	O
h	pointer
)	O
)	O
;	O
}	O
s	pointer
=	O
gsl_multifit_linear_residuals	function
(	O
X	pointer
,	O
y	double
,	O
c	pointer
,	O
w	pointer
->	O
r	pointer
)	O
;	O
if	O
(	O
s	pointer
)	O
return	O
s	pointer
;	O
w	pointer
->	O
stats	struct
.	O
sigma_ols	double
=	O
gsl_blas_dnrm2	function
(	O
w	pointer
->	O
r	pointer
)	O
/	O
sqrt	function
(	O
(	O
double	O
)	O
w	pointer
->	O
stats	struct
.	O
dof	long
)	O
;	O
while	O
(	O
!	O
converged	int
&&	O
++	O
numit	long
<=	O
w	pointer
->	O
maxiter	long
)	O
{	O
double	O
sig	double
;	O
s	pointer
=	O
gsl_vector_mul	function
(	O
w	pointer
->	O
r	pointer
,	O
w	pointer
->	O
resfac	pointer
)	O
;	O
if	O
(	O
s	pointer
)	O
return	O
s	pointer
;	O
sig	double
=	O
robust_madsigma	function
(	O
w	pointer
->	O
r	pointer
,	O
w	pointer
->	O
p	int
,	O
w	pointer
->	O
workn	pointer
)	O
;	O
gsl_vector_scale	function
(	O
w	pointer
->	O
r	pointer
,	O
1.0	int
/	O
(	O
GSL_MAX	O
(	O
sig	double
,	O
sig_lower	double
)	O
*	O
w	pointer
->	O
tune	double
)	O
)	O
;	O
s	pointer
=	O
w	pointer
->	O
type	pointer
->	O
wfun	pointer
(	O
w	pointer
->	O
r	pointer
,	O
w	pointer
->	O
weights	pointer
)	O
;	O
if	O
(	O
s	pointer
)	O
return	O
s	pointer
;	O
gsl_vector_memcpy	function
(	O
w	pointer
->	O
c_prev	pointer
,	O
c	pointer
)	O
;	O
s	pointer
=	O
gsl_multifit_wlinear	function
(	O
X	pointer
,	O
w	pointer
->	O
weights	pointer
,	O
y	double
,	O
c	pointer
,	O
cov	pointer
,	O
&	O
chisq	pointer
,	O
w	pointer
->	O
multifit_p	pointer
)	O
;	O
if	O
(	O
s	pointer
)	O
return	O
s	pointer
;	O
s	pointer
=	O
gsl_multifit_linear_residuals	function
(	O
X	pointer
,	O
y	double
,	O
c	pointer
,	O
w	pointer
->	O
r	pointer
)	O
;	O
if	O
(	O
s	pointer
)	O
return	O
s	pointer
;	O
converged	int
=	O
robust_test_convergence	function
(	O
w	pointer
->	O
c_prev	pointer
,	O
c	pointer
,	O
tol	double
)	O
;	O
}	O
w	pointer
->	O
stats	struct
.	O
sigma_mad	double
=	O
robust_madsigma	function
(	O
w	pointer
->	O
r	pointer
,	O
w	pointer
->	O
p	int
,	O
w	pointer
->	O
workn	pointer
)	O
;	O
w	pointer
->	O
stats	struct
.	O
sigma_rob	double
=	O
robust_robsigma	function
(	O
w	pointer
->	O
r	pointer
,	O
w	pointer
->	O
stats	struct
.	O
sigma_mad	double
,	O
w	pointer
->	O
tune	double
,	O
w	pointer
)	O
;	O
w	pointer
->	O
stats	struct
.	O
sigma	double
=	O
robust_sigma	function
(	O
w	pointer
->	O
stats	struct
.	O
sigma_ols	double
,	O
w	pointer
->	O
stats	struct
.	O
sigma_rob	double
,	O
w	pointer
)	O
;	O
w	pointer
->	O
stats	struct
.	O
numit	long
=	O
numit	long
;	O
{	O
double	O
dof	long
=	O
(	O
double	O
)	O
w	pointer
->	O
stats	struct
.	O
dof	long
;	O
double	O
rnorm	pointer
=	O
w	pointer
->	O
stats	struct
.	O
sigma	double
*	O
sqrt	function
(	O
dof	long
)	O
;	O
double	O
ss_err	double
=	O
rnorm	pointer
*	O
rnorm	pointer
;	O
double	O
ss_tot	double
=	O
gsl_stats_tss	function
(	O
y	double
->	O
data	pointer
,	O
y	double
->	O
stride	long
,	O
n	int
)	O
;	O
w	pointer
->	O
stats	struct
.	O
Rsq	double
=	O
1.0	int
-	O
ss_err	double
/	O
ss_tot	double
;	O
w	pointer
->	O
stats	struct
.	O
adj_Rsq	double
=	O
1.0	int
-	O
(	O
1.0	int
-	O
w	pointer
->	O
stats	struct
.	O
Rsq	double
)	O
*	O
(	O
(	O
double	O
)	O
n	int
-	O
1.0	int
)	O
/	O
dof	long
;	O
w	pointer
->	O
stats	struct
.	O
rmse	double
=	O
sqrt	function
(	O
ss_err	double
/	O
dof	long
)	O
;	O
w	pointer
->	O
stats	struct
.	O
sse	double
=	O
ss_err	double
;	O
}	O
s	pointer
=	O
robust_covariance	function
(	O
w	pointer
->	O
stats	struct
.	O
sigma	double
,	O
cov	pointer
,	O
w	pointer
)	O
;	O
if	O
(	O
s	pointer
)	O
return	O
s	pointer
;	O
if	O
(	O
numit	long
>	O
w	pointer
->	O
maxiter	long
)	O
{	O
GSL_ERROR	O
(	O
"maximum iterations exceeded"	pointer
,	O
GSL_EMAXITER	int
)	O
;	O
}	O
return	O
s	pointer
;	O
}	O
}	O
int	O
gsl_multifit_robust_est	function
(	O
const	O
gsl_vector	struct
*	O
x	double
,	O
const	O
gsl_vector	struct
*	O
c	pointer
,	O
const	O
gsl_matrix	struct
*	O
cov	pointer
,	O
double	O
*	O
y	double
,	O
double	O
*	O
y_err	pointer
)	O
{	O
int	O
s	pointer
=	O
gsl_multifit_linear_est	function
(	O
x	double
,	O
c	pointer
,	O
cov	pointer
,	O
y	double
,	O
y_err	pointer
)	O
;	O
return	O
s	pointer
;	O
}	O
int	O
gsl_multifit_robust_residuals	function
(	O
const	O
gsl_matrix	struct
*	O
X	pointer
,	O
const	O
gsl_vector	struct
*	O
y	double
,	O
const	O
gsl_vector	struct
*	O
c	pointer
,	O
gsl_vector	struct
*	O
r	pointer
,	O
gsl_multifit_robust_workspace	struct
*	O
w	pointer
)	O
{	O
if	O
(	O
X	pointer
->	O
size1	long
!=	O
y	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"number of observations in y does not match rows of matrix X"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
X	pointer
->	O
size2	long
!=	O
c	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"number of parameters c does not match columns of matrix X"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
y	double
->	O
size	long
!=	O
r	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"number of observations in y does not match number of residuals"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
const	O
double	O
sigma	double
=	O
w	pointer
->	O
stats	struct
.	O
sigma	double
;	O
int	O
s	pointer
;	O
size_t	long
i	long
;	O
s	pointer
=	O
gsl_multifit_linear_residuals	function
(	O
X	pointer
,	O
y	double
,	O
c	pointer
,	O
r	pointer
)	O
;	O
if	O
(	O
s	pointer
)	O
return	O
s	pointer
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
r	pointer
->	O
size	long
;	O
++	O
i	long
)	O
{	O
double	O
hfac	double
=	O
gsl_vector_get	function
(	O
w	pointer
->	O
resfac	pointer
,	O
i	long
)	O
;	O
double	O
*	O
ri	pointer
=	O
gsl_vector_ptr	function
(	O
r	pointer
,	O
i	long
)	O
;	O
*	O
ri	pointer
*=	O
hfac	double
/	O
sigma	double
;	O
}	O
return	O
s	pointer
;	O
}	O
}	O
static	O
int	O
robust_test_convergence	function
(	O
const	O
gsl_vector	struct
*	O
c_prev	pointer
,	O
const	O
gsl_vector	struct
*	O
c	pointer
,	O
const	O
double	O
tol	double
)	O
{	O
size_t	long
p	int
=	O
c	pointer
->	O
size	long
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
p	int
;	O
++	O
i	long
)	O
{	O
double	O
ai	double
=	O
gsl_vector_get	function
(	O
c_prev	pointer
,	O
i	long
)	O
;	O
double	O
bi	double
=	O
gsl_vector_get	function
(	O
c	pointer
,	O
i	long
)	O
;	O
if	O
(	O
fabs	function
(	O
bi	double
-	O
ai	double
)	O
>	O
tol	double
*	O
GSL_MAX	O
(	O
fabs	function
(	O
ai	double
)	O
,	O
fabs	function
(	O
bi	double
)	O
)	O
)	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
static	O
double	O
robust_madsigma	function
(	O
const	O
gsl_vector	struct
*	O
r	pointer
,	O
const	O
size_t	long
p	int
,	O
gsl_vector	struct
*	O
workn	pointer
)	O
{	O
size_t	long
n	int
=	O
r	pointer
->	O
size	long
;	O
double	O
sigma	double
;	O
size_t	long
i	long
;	O
gsl_vector_view	struct
v1	pointer
=	O
gsl_vector_subvector	function
(	O
workn	pointer
,	O
0	int
,	O
n	int
)	O
;	O
gsl_vector_view	struct
v2	pointer
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
gsl_vector_set	function
(	O
&	O
v1	pointer
.	O
vector	struct
,	O
i	long
,	O
fabs	function
(	O
gsl_vector_get	function
(	O
r	pointer
,	O
i	long
)	O
)	O
)	O
;	O
}	O
gsl_sort_vector	function
(	O
&	O
v1	pointer
.	O
vector	struct
)	O
;	O
v2	pointer
=	O
gsl_vector_subvector	function
(	O
&	O
v1	pointer
.	O
vector	struct
,	O
p	int
-	O
1	int
,	O
n	int
-	O
p	int
+	O
1	int
)	O
;	O
sigma	double
=	O
gsl_stats_median_from_sorted_data	function
(	O
v2	pointer
.	O
vector	struct
.	O
data	pointer
,	O
v2	pointer
.	O
vector	struct
.	O
stride	long
,	O
v2	pointer
.	O
vector	struct
.	O
size	long
)	O
/	O
0.6745	int
;	O
return	O
sigma	double
;	O
}	O
static	O
double	O
robust_robsigma	function
(	O
const	O
gsl_vector	struct
*	O
r	pointer
,	O
const	O
double	O
s	pointer
,	O
const	O
double	O
tune	double
,	O
gsl_multifit_robust_workspace	struct
*	O
w	pointer
)	O
{	O
double	O
sigma	double
;	O
size_t	long
i	long
;	O
const	O
size_t	long
n	int
=	O
w	pointer
->	O
n	int
;	O
const	O
size_t	long
p	int
=	O
w	pointer
->	O
p	int
;	O
const	O
double	O
st	double
=	O
s	pointer
*	O
tune	double
;	O
double	O
a	double
,	O
b	double
,	O
lambda	double
;	O
gsl_vector_memcpy	function
(	O
w	pointer
->	O
workn	pointer
,	O
r	pointer
)	O
;	O
gsl_vector_mul	function
(	O
w	pointer
->	O
workn	pointer
,	O
w	pointer
->	O
resfac	pointer
)	O
;	O
gsl_vector_scale	function
(	O
w	pointer
->	O
workn	pointer
,	O
1.0	int
/	O
st	double
)	O
;	O
w	pointer
->	O
type	pointer
->	O
wfun	pointer
(	O
w	pointer
->	O
workn	pointer
,	O
w	pointer
->	O
psi	pointer
)	O
;	O
w	pointer
->	O
type	pointer
->	O
psi_deriv	pointer
(	O
w	pointer
->	O
workn	pointer
,	O
w	pointer
->	O
dpsi	pointer
)	O
;	O
gsl_vector_mul	function
(	O
w	pointer
->	O
psi	pointer
,	O
w	pointer
->	O
workn	pointer
)	O
;	O
a	double
=	O
gsl_stats_mean	function
(	O
w	pointer
->	O
dpsi	pointer
->	O
data	pointer
,	O
w	pointer
->	O
dpsi	pointer
->	O
stride	long
,	O
n	int
)	O
;	O
b	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
double	O
psi_i	double
=	O
gsl_vector_get	function
(	O
w	pointer
->	O
psi	pointer
,	O
i	long
)	O
;	O
double	O
resfac	pointer
=	O
gsl_vector_get	function
(	O
w	pointer
->	O
resfac	pointer
,	O
i	long
)	O
;	O
double	O
fac	double
=	O
1.0	int
/	O
(	O
resfac	pointer
*	O
resfac	pointer
)	O
;	O
b	double
+=	O
fac	double
*	O
psi_i	double
*	O
psi_i	double
;	O
}	O
b	double
/=	O
(	O
double	O
)	O
(	O
n	int
-	O
p	int
)	O
;	O
lambda	double
=	O
1.0	int
+	O
(	O
(	O
double	O
)	O
p	int
)	O
/	O
(	O
(	O
double	O
)	O
n	int
)	O
*	O
(	O
1.0	int
-	O
a	double
)	O
/	O
a	double
;	O
sigma	double
=	O
lambda	double
*	O
sqrt	function
(	O
b	double
)	O
*	O
st	double
/	O
a	double
;	O
return	O
sigma	double
;	O
}	O
static	O
double	O
robust_sigma	function
(	O
const	O
double	O
s_ols	double
,	O
const	O
double	O
s_rob	double
,	O
gsl_multifit_robust_workspace	struct
*	O
w	pointer
)	O
{	O
double	O
sigma	double
;	O
const	O
double	O
p	int
=	O
(	O
double	O
)	O
w	pointer
->	O
p	int
;	O
const	O
double	O
n	int
=	O
(	O
double	O
)	O
w	pointer
->	O
n	int
;	O
sigma	double
=	O
GSL_MAX	O
(	O
s_rob	double
,	O
sqrt	function
(	O
(	O
s_ols	double
*	O
s_ols	double
*	O
p	int
*	O
p	int
+	O
s_rob	double
*	O
s_rob	double
*	O
n	int
)	O
/	O
(	O
p	int
*	O
p	int
+	O
n	int
)	O
)	O
)	O
;	O
return	O
sigma	double
;	O
}	O
static	O
int	O
robust_covariance	function
(	O
const	O
double	O
sigma	double
,	O
gsl_matrix	struct
*	O
cov	pointer
,	O
gsl_multifit_robust_workspace	struct
*	O
w	pointer
)	O
{	O
int	O
status	int
=	O
0	int
;	O
const	O
size_t	long
p	int
=	O
w	pointer
->	O
p	int
;	O
const	O
double	O
s2	double
=	O
sigma	double
*	O
sigma	double
;	O
size_t	long
i	long
,	O
j	long
;	O
gsl_matrix	struct
*	O
QSI	pointer
=	O
w	pointer
->	O
QSI	pointer
;	O
gsl_vector	struct
*	O
D	pointer
=	O
w	pointer
->	O
D	pointer
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
p	int
;	O
i	long
++	O
)	O
{	O
gsl_vector_view	struct
row_i	struct
=	O
gsl_matrix_row	function
(	O
QSI	pointer
,	O
i	long
)	O
;	O
double	O
d_i	double
=	O
gsl_vector_get	function
(	O
D	pointer
,	O
i	long
)	O
;	O
for	O
(	O
j	long
=	O
i	long
;	O
j	long
<	O
p	int
;	O
j	long
++	O
)	O
{	O
gsl_vector_view	struct
row_j	struct
=	O
gsl_matrix_row	function
(	O
QSI	pointer
,	O
j	long
)	O
;	O
double	O
d_j	double
=	O
gsl_vector_get	function
(	O
D	pointer
,	O
j	long
)	O
;	O
double	O
s	pointer
;	O
gsl_blas_ddot	function
(	O
&	O
row_i	struct
.	O
vector	struct
,	O
&	O
row_j	struct
.	O
vector	struct
,	O
&	O
s	pointer
)	O
;	O
gsl_matrix_set	function
(	O
cov	pointer
,	O
i	long
,	O
j	long
,	O
s	pointer
*	O
s2	double
/	O
(	O
d_i	double
*	O
d_j	double
)	O
)	O
;	O
gsl_matrix_set	function
(	O
cov	pointer
,	O
j	long
,	O
i	long
,	O
s	pointer
*	O
s2	double
/	O
(	O
d_i	double
*	O
d_j	double
)	O
)	O
;	O
}	O
}	O
return	O
status	int
;	O
}	O
