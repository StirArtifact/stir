static	O
char	O
xchar	array
[	O
]	O
=	O
"0123456789ABCDEF"	pointer
;	O
static	O
enum	O
mu_filter_result	enum
percent_encoder	function
(	O
void	O
*	O
xd	pointer
,	O
enum	O
mu_filter_command	enum
cmd	enum
,	O
struct	O
mu_filter_io	struct
*	O
iobuf	pointer
)	O
{	O
size_t	long
i	long
,	O
j	long
;	O
const	O
unsigned	O
char	O
*	O
iptr	pointer
;	O
size_t	long
isize	long
;	O
char	O
*	O
optr	pointer
;	O
size_t	long
osize	long
;	O
char	O
*	O
escape_chars	pointer
=	O
xd	pointer
;	O
switch	O
(	O
cmd	enum
)	O
{	O
case	O
mu_filter_init	int
:	O
case	O
mu_filter_done	int
:	O
return	O
mu_filter_ok	int
;	O
default	O
:	O
break	O
;	O
}	O
iptr	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
iobuf	pointer
->	O
input	pointer
;	O
isize	long
=	O
iobuf	pointer
->	O
isize	long
;	O
optr	pointer
=	O
iobuf	pointer
->	O
output	pointer
;	O
osize	long
=	O
iobuf	pointer
->	O
osize	long
;	O
for	O
(	O
i	long
=	O
j	long
=	O
0	int
;	O
i	long
<	O
isize	long
&&	O
j	long
<	O
osize	long
;	O
i	long
++	O
)	O
{	O
unsigned	O
char	O
c	char
=	O
iptr	pointer
[	O
i	long
]	O
;	O
if	O
(	O
c	char
==	O
0	int
||	O
strchr	function
(	O
escape_chars	pointer
,	O
c	char
)	O
)	O
{	O
if	O
(	O
j	long
+	O
3	int
>=	O
osize	long
)	O
{	O
if	O
(	O
i	long
==	O
0	int
)	O
{	O
iobuf	pointer
->	O
osize	long
=	O
3	int
;	O
return	O
mu_filter_moreoutput	int
;	O
}	O
break	O
;	O
}	O
optr	pointer
[	O
j	long
++	O
]	O
=	O
'%'	O
;	O
optr	pointer
[	O
j	long
++	O
]	O
=	O
xchar	array
[	O
(	O
(	O
c	char
>>	O
4	int
)	O
&	O
0xf	int
)	O
]	O
;	O
optr	pointer
[	O
j	long
++	O
]	O
=	O
xchar	array
[	O
c	char
&	O
0xf	int
]	O
;	O
}	O
else	O
optr	pointer
[	O
j	long
++	O
]	O
=	O
c	char
;	O
}	O
iobuf	pointer
->	O
isize	long
=	O
i	long
;	O
iobuf	pointer
->	O
osize	long
=	O
j	long
;	O
return	O
mu_filter_ok	int
;	O
}	O
static	O
enum	O
mu_filter_result	enum
percent_decoder	function
(	O
void	O
*	O
xd	pointer
MU_ARG_UNUSED	O
,	O
enum	O
mu_filter_command	enum
cmd	enum
,	O
struct	O
mu_filter_io	struct
*	O
iobuf	pointer
)	O
{	O
size_t	long
i	long
,	O
j	long
;	O
const	O
unsigned	O
char	O
*	O
iptr	pointer
;	O
size_t	long
isize	long
;	O
char	O
*	O
optr	pointer
;	O
size_t	long
osize	long
;	O
switch	O
(	O
cmd	enum
)	O
{	O
case	O
mu_filter_init	int
:	O
case	O
mu_filter_done	int
:	O
return	O
mu_filter_ok	int
;	O
default	O
:	O
break	O
;	O
}	O
iptr	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
iobuf	pointer
->	O
input	pointer
;	O
isize	long
=	O
iobuf	pointer
->	O
isize	long
;	O
optr	pointer
=	O
iobuf	pointer
->	O
output	pointer
;	O
osize	long
=	O
iobuf	pointer
->	O
osize	long
;	O
for	O
(	O
i	long
=	O
j	long
=	O
0	int
;	O
i	long
<	O
isize	long
&&	O
j	long
<	O
osize	long
;	O
j	long
++	O
)	O
{	O
unsigned	O
char	O
c	char
=	O
iptr	pointer
[	O
i	long
++	O
]	O
;	O
if	O
(	O
c	char
==	O
'%'	O
)	O
{	O
char	O
*	O
phi	pointer
,	O
*	O
plo	pointer
;	O
if	O
(	O
i	long
+	O
2	int
>=	O
isize	long
)	O
break	O
;	O
phi	pointer
=	O
strchr	function
(	O
xchar	array
,	O
mu_toupper	O
(	O
iptr	pointer
[	O
i	long
]	O
)	O
)	O
;	O
plo	pointer
=	O
strchr	function
(	O
xchar	array
,	O
mu_toupper	O
(	O
iptr	pointer
[	O
i	long
+	O
1	int
]	O
)	O
)	O
;	O
if	O
(	O
phi	pointer
&&	O
plo	pointer
)	O
{	O
optr	pointer
[	O
j	long
]	O
=	O
(	O
(	O
phi	pointer
-	O
xchar	array
)	O
<<	O
4	int
)	O
+	O
(	O
plo	pointer
-	O
xchar	array
)	O
;	O
i	long
+=	O
2	int
;	O
}	O
else	O
optr	pointer
[	O
j	long
]	O
=	O
c	char
;	O
}	O
else	O
optr	pointer
[	O
j	long
]	O
=	O
c	char
;	O
}	O
iobuf	pointer
->	O
isize	long
=	O
i	long
;	O
iobuf	pointer
->	O
osize	long
=	O
j	long
;	O
return	O
mu_filter_ok	int
;	O
}	O
static	O
int	O
percent_alloc	function
(	O
void	O
*	O
*	O
pret	pointer
,	O
int	O
mode	int
,	O
int	O
argc	int
,	O
const	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
if	O
(	O
mode	int
==	O
MU_FILTER_ENCODE	int
)	O
{	O
char	O
*	O
s	pointer
;	O
if	O
(	O
argc	int
>	O
1	int
)	O
{	O
int	O
i	long
;	O
size_t	long
len	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	int
;	O
i	long
++	O
)	O
len	long
+=	O
strlen	function
(	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
s	pointer
=	O
malloc	function
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
return	O
ENOMEM	int
;	O
*	O
pret	pointer
=	O
s	pointer
;	O
*	O
s	pointer
=	O
0	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	int
;	O
i	long
++	O
)	O
strcat	function
(	O
s	pointer
,	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
}	O
else	O
{	O
int	O
i	long
;	O
s	pointer
=	O
malloc	function
(	O
UCHAR_MAX	O
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
return	O
ENOMEM	int
;	O
*	O
pret	pointer
=	O
s	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
UCHAR_MAX	O
;	O
i	long
++	O
)	O
{	O
if	O
(	O
i	long
==	O
'%'	O
||	O
i	long
==	O
'"'	O
||	O
!	O
mu_isgraph	O
(	O
i	long
)	O
)	O
*	O
s	pointer
++	O
=	O
i	long
;	O
}	O
*	O
s	pointer
=	O
0	int
;	O
}	O
}	O
else	O
*	O
pret	pointer
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
_mu_filter_record	struct
_percent_filter	struct
=	O
{	O
"percent"	pointer
,	O
percent_alloc	function
,	O
percent_encoder	function
,	O
percent_decoder	function
}	O
;	O
mu_filter_record_t	pointer
mu_percent_filter	pointer
=	O
&	O
_percent_filter	struct
;	O
