typedef	O
long	O
long	O
my_quad_t	long long
;	O
int	O
DIS_NPSNET_COMPAT	int
=	O
0	int
;	O
int	O
DISGetRealTime	function
(	O
dis_time	struct
*	O
result	char
)	O
{	O
struct	O
timeval	struct
t	struct
;	O
struct	O
timezone	struct
tz	struct
;	O
my_quad_t	long long
i	long long
;	O
if	O
(	O
gettimeofday	function
(	O
&	O
t	struct
,	O
&	O
tz	struct
)	O
!=	O
0	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
result	char
->	O
hour	long
=	O
t	struct
.	O
tv_sec	long
/	O
3600	int
;	O
i	long long
=	O
(	O
t	struct
.	O
tv_sec	long
%	O
3600	int
)	O
*	O
MILLION	int
+	O
t	struct
.	O
tv_usec	long
;	O
i	long long
=	O
(	O
i	long long
*	O
dis_timestamp_const	int
/	O
3600	int
)	O
/	O
MILLION	int
;	O
result	char
->	O
rel	struct
.	O
time	int
=	O
(	O
unsigned	O
int	O
)	O
i	long long
;	O
result	char
->	O
rel	struct
.	O
type	int
=	O
0	int
;	O
return	O
0	int
;	O
}	O
int	O
DISGetTimestamp	function
(	O
dis_timestamp	struct
*	O
result	char
)	O
{	O
struct	O
timeval	struct
t	struct
;	O
struct	O
timezone	struct
tz	struct
;	O
my_quad_t	long long
i	long long
;	O
if	O
(	O
gettimeofday	function
(	O
&	O
t	struct
,	O
&	O
tz	struct
)	O
!=	O
0	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
i	long long
=	O
(	O
t	struct
.	O
tv_sec	long
%	O
3600	int
)	O
*	O
MILLION	int
+	O
t	struct
.	O
tv_usec	long
;	O
i	long long
=	O
(	O
i	long long
*	O
dis_timestamp_const	int
/	O
3600	int
)	O
/	O
MILLION	int
;	O
result	char
->	O
time	int
=	O
(	O
unsigned	O
int	O
)	O
i	long long
;	O
result	char
->	O
type	int
=	O
0	int
;	O
return	O
0	int
;	O
}	O
void	O
DISTimestampToTimeval	function
(	O
dis_timestamp	struct
*	O
in	pointer
,	O
struct	O
timeval	struct
*	O
out	pointer
)	O
{	O
my_quad_t	long long
i	long long
;	O
i	long long
=	O
(	O
my_quad_t	long long
)	O
in	pointer
->	O
time	int
*	O
MILLION	int
*	O
3600	int
/	O
dis_timestamp_const	int
;	O
out	pointer
->	O
tv_sec	long
=	O
(	O
long	O
)	O
(	O
i	long long
/	O
MILLION	int
)	O
;	O
out	pointer
->	O
tv_usec	long
=	O
(	O
long	O
)	O
(	O
i	long long
%	O
MILLION	int
)	O
;	O
}	O
void	O
DISTimeToTimeval	function
(	O
dis_time	struct
*	O
in	pointer
,	O
struct	O
timeval	struct
*	O
out	pointer
)	O
{	O
my_quad_t	long long
i	long long
;	O
i	long long
=	O
(	O
my_quad_t	long long
)	O
in	pointer
->	O
rel	struct
.	O
time	int
*	O
MILLION	int
/	O
dis_timestamp_const	int
;	O
out	pointer
->	O
tv_sec	long
=	O
(	O
long	O
)	O
(	O
in	pointer
->	O
hour	long
*	O
3600	int
+	O
i	long long
/	O
MILLION	int
)	O
;	O
out	pointer
->	O
tv_usec	long
=	O
(	O
long	O
)	O
(	O
i	long long
%	O
MILLION	int
)	O
;	O
}	O
DISResult	enum
DISAddArticulationParm	function
(	O
dis_pdu	union
*	O
p	pointer
,	O
dis_articulation_parm	struct
*	O
parm	pointer
,	O
int	O
*	O
parmID	pointer
)	O
{	O
dis_entity_state_pdu	struct
*	O
esp	pointer
=	O
(	O
dis_entity_state_pdu	struct
*	O
)	O
p	pointer
;	O
int	O
n	int
=	O
esp	pointer
->	O
art_parm_count	char
+	O
1	int
;	O
if	O
(	O
esp	pointer
->	O
art_parm_count	char
==	O
0	int
)	O
{	O
esp	pointer
->	O
art_parm	pointer
=	O
(	O
dis_articulation_parm	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
dis_articulation_parm	struct
)	O
)	O
;	O
}	O
else	O
{	O
esp	pointer
->	O
art_parm	pointer
=	O
(	O
dis_articulation_parm	struct
*	O
)	O
realloc	function
(	O
esp	pointer
->	O
art_parm	pointer
,	O
sizeof	O
(	O
dis_articulation_parm	struct
)	O
*	O
n	int
)	O
;	O
}	O
if	O
(	O
esp	pointer
->	O
art_parm	pointer
==	O
(	O
dis_articulation_parm	struct
*	O
)	O
NULL	O
)	O
{	O
esp	pointer
->	O
art_parm_count	char
=	O
0	int
;	O
return	O
DISResultNoMemory	int
;	O
}	O
esp	pointer
->	O
art_parm	pointer
[	O
esp	pointer
->	O
art_parm_count	char
]	O
=	O
*	O
parm	pointer
;	O
esp	pointer
->	O
art_parm_count	char
=	O
n	int
;	O
*	O
parmID	pointer
=	O
n	int
;	O
return	O
DISResultOK	int
;	O
}	O
