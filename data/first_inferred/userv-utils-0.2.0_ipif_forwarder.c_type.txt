static	O
size_t	long
buffer_size	long
;	O
static	O
struct	O
utsname	struct
uname_result	struct
;	O
static	O
const	O
char	O
*	O
opt_chars	pointer
;	O
static	O
int	O
public_local_fd	int
,	O
private_in_fd	int
,	O
private_out_fd	int
;	O
static	O
int	O
mtu2	int
,	O
keepalive	int
,	O
timeout	int
,	O
reannounce	int
;	O
static	O
int	O
public_remote_specd	int
;	O
static	O
struct	O
sockaddr_in	struct
public_remote	struct
;	O
static	O
int	O
encdec_keys_fd	int
,	O
encdec_keys_write	int
,	O
crypto_debug	int
;	O
static	O
int	O
n_mechs	int
;	O
static	O
const	O
struct	O
mechanism	struct
*	O
mechs	array
[	O
MAXMECHS	int
]	O
;	O
static	O
struct	O
mechdata	O
*	O
md_in	array
[	O
MAXMECHS	int
]	O
,	O
*	O
md_out	array
[	O
MAXMECHS	int
]	O
;	O
static	O
size_t	long
maxprefix	long
,	O
maxsuffix	long
;	O
static	O
struct	O
buffer	struct
buf_in	struct
,	O
buf_out	struct
;	O
static	O
unsigned	O
char	O
*	O
accum_buf	pointer
;	O
static	O
size_t	long
accum_used	long
,	O
accum_avail	long
;	O
static	O
time_t	long
nextsendka	long
;	O
static	O
void	O
cdebug	function
(	O
int	O
mechno	int
,	O
const	O
char	O
*	O
msg	pointer
)	O
{	O
if	O
(	O
!	O
crypto_debug	int
)	O
return	O
;	O
printf	function
(	O
"%-8.8s: CRYPTO: %-20s %s\n"	pointer
,	O
uname_result	struct
.	O
nodename	array
,	O
mechno	int
>=	O
0	int
?	O
mechs	array
[	O
mechno	int
]	O
->	O
name	pointer
:	O
""	pointer
,	O
msg	pointer
)	O
;	O
}	O
static	O
void	O
cdebughex	function
(	O
int	O
mechno	int
,	O
const	O
char	O
*	O
msg	pointer
,	O
const	O
void	O
*	O
ptr	pointer
,	O
size_t	long
sz	long
,	O
size_t	long
skipbefore	long
,	O
int	O
spc_offset	int
,	O
int	O
dot_offset	int
)	O
{	O
const	O
unsigned	O
char	O
*	O
p	pointer
;	O
size_t	long
i	long
;	O
unsigned	O
j	int
=	O
dot_offset	int
;	O
if	O
(	O
!	O
crypto_debug	int
)	O
return	O
;	O
printf	function
(	O
"%-8.8s: CRYPTO: %-20s %-10s"	pointer
,	O
uname_result	struct
.	O
nodename	array
,	O
mechno	int
>=	O
0	int
?	O
mechs	array
[	O
mechno	int
]	O
->	O
name	pointer
:	O
""	pointer
,	O
msg	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
spc_offset	int
;	O
i	long
++	O
,	O
j	int
++	O
)	O
fputs	function
(	O
j	int
&	O
3	int
?	O
"  "	pointer
:	O
"   "	pointer
,	O
stdout	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
skipbefore	long
;	O
i	long
++	O
,	O
j	int
++	O
)	O
fputs	function
(	O
j	int
&	O
3	int
?	O
".."	pointer
:	O
" .."	pointer
,	O
stdout	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
,	O
p	pointer
=	O
ptr	pointer
;	O
i	long
<	O
sz	long
;	O
i	long
++	O
,	O
j	int
++	O
,	O
p	pointer
++	O
)	O
printf	function
(	O
j	int
&	O
3	int
?	O
"%02x"	pointer
:	O
" %02x"	pointer
,	O
*	O
p	pointer
)	O
;	O
fputc	function
(	O
'\n'	O
,	O
stdout	pointer
)	O
;	O
}	O
static	O
void	O
cdebugbuf	function
(	O
int	O
mechno	int
,	O
const	O
char	O
*	O
msg	pointer
,	O
const	O
struct	O
buffer	struct
*	O
buf	pointer
,	O
int	O
spc_offset	int
,	O
int	O
dot_offset	int
)	O
{	O
cdebughex	function
(	O
mechno	int
,	O
msg	pointer
,	O
buf	pointer
->	O
start	pointer
,	O
buf	pointer
->	O
size	long
,	O
buf	pointer
->	O
start	pointer
-	O
buf	pointer
->	O
base	pointer
,	O
spc_offset	int
,	O
dot_offset	int
)	O
;	O
}	O
void	O
get_random	function
(	O
void	O
*	O
ptr	pointer
,	O
size_t	long
sz	long
)	O
{	O
static	O
FILE	struct
*	O
randfile	pointer
;	O
size_t	long
r	long
;	O
if	O
(	O
!	O
randfile	pointer
)	O
{	O
randfile	pointer
=	O
fopen	function
(	O
"/dev/urandom"	pointer
,	O
"rb"	pointer
)	O
;	O
if	O
(	O
!	O
randfile	pointer
&&	O
errno	O
==	O
ENOENT	int
)	O
randfile	pointer
=	O
fopen	function
(	O
"/dev/random"	pointer
,	O
"rb"	pointer
)	O
;	O
if	O
(	O
!	O
randfile	pointer
)	O
sysfail	function
(	O
"open random number generator"	pointer
)	O
;	O
}	O
r	long
=	O
fread	function
(	O
ptr	pointer
,	O
1	int
,	O
sz	long
,	O
randfile	pointer
)	O
;	O
if	O
(	O
r	long
!=	O
sz	long
)	O
(	O
ferror	function
(	O
randfile	pointer
)	O
?	O
sysfail	function
:	O
fail	function
)	O
(	O
"cannot read random number generator"	pointer
)	O
;	O
cdebughex	function
(	O
-	O
1	int
,	O
"get_random"	pointer
,	O
ptr	pointer
,	O
sz	long
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
}	O
void	O
random_key	function
(	O
void	O
*	O
ptr	pointer
,	O
size_t	long
sz	long
)	O
{	O
if	O
(	O
encdec_keys_write	int
)	O
{	O
get_random	function
(	O
ptr	pointer
,	O
sz	long
)	O
;	O
write_must	function
(	O
encdec_keys_fd	int
,	O
ptr	pointer
,	O
sz	long
,	O
"write keys datastream"	pointer
)	O
;	O
}	O
else	O
{	O
read_must	function
(	O
encdec_keys_fd	int
,	O
ptr	pointer
,	O
sz	long
,	O
"read keys datastream"	pointer
)	O
;	O
cdebughex	function
(	O
-	O
1	int
,	O
"random_key"	pointer
,	O
ptr	pointer
,	O
sz	long
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
}	O
}	O
static	O
void	O
setnonblock	function
(	O
int	O
fd	int
,	O
int	O
nonblock	int
)	O
{	O
int	O
r	long
;	O
r	long
=	O
fcntl	function
(	O
fd	int
,	O
F_GETFL	int
)	O
;	O
if	O
(	O
r	long
==	O
-	O
1	int
)	O
sysfail	function
(	O
"fcntl F_GETFL"	pointer
)	O
;	O
r	long
=	O
fcntl	function
(	O
fd	int
,	O
F_SETFL	int
,	O
nonblock	int
?	O
r	long
|	O
O_NONBLOCK	int
:	O
r	long
&	O
~	O
O_NONBLOCK	int
)	O
;	O
if	O
(	O
r	long
==	O
-	O
1	int
)	O
sysfail	function
(	O
"fcntl F_SETFL"	pointer
)	O
;	O
}	O
static	O
const	O
struct	O
mechanism	struct
*	O
find_mech	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
const	O
struct	O
mechanism	struct
*	O
mech	pointer
,	O
*	O
const	O
*	O
mechlist	pointer
;	O
for	O
(	O
mechlist	pointer
=	O
mechanismlists	array
;	O
*	O
mechlist	pointer
;	O
mechlist	pointer
++	O
)	O
for	O
(	O
mech	pointer
=	O
*	O
mechlist	pointer
;	O
mech	pointer
->	O
name	pointer
;	O
mech	pointer
++	O
)	O
if	O
(	O
!	O
strcmp	function
(	O
mech	pointer
->	O
name	pointer
,	O
name	pointer
)	O
)	O
return	O
mech	pointer
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: unknown mechanism: %s\n"	pointer
,	O
programid	array
,	O
name	pointer
)	O
;	O
exit	function
(	O
4	int
)	O
;	O
}	O
static	O
void	O
inbound	function
(	O
void	O
)	O
{	O
static	O
int	O
any_recvd	int
;	O
static	O
time_t	long
nextreann	long
;	O
static	O
unsigned	O
long	O
npackets	long
,	O
nbytes	long
;	O
struct	O
sockaddr_in	struct
this_saddr	struct
;	O
int	O
r	long
,	O
i	long
,	O
different	int
,	O
this_saddrlen	int
;	O
const	O
char	O
*	O
emsg	pointer
;	O
buf_in	struct
.	O
start	pointer
=	O
buf_in	struct
.	O
base	pointer
+	O
1	int
;	O
buf_in	struct
.	O
size	long
=	O
buffer_size	long
-	O
2	int
;	O
setnonblock	function
(	O
public_local_fd	int
,	O
1	int
)	O
;	O
this_saddrlen	int
=	O
sizeof	O
(	O
this_saddr	struct
)	O
;	O
r	long
=	O
recvfrom	function
(	O
public_local_fd	int
,	O
buf_in	struct
.	O
start	pointer
,	O
buf_in	struct
.	O
size	long
,	O
0	int
,	O
&	O
this_saddr	struct
,	O
&	O
this_saddrlen	int
)	O
;	O
if	O
(	O
!	O
r	long
)	O
{	O
diag	function
(	O
"empty ciphertext"	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
r	long
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
!=	O
EAGAIN	int
&&	O
errno	O
!=	O
EINTR	int
)	O
{	O
sysdiag	function
(	O
"receive"	pointer
)	O
;	O
sleep	function
(	O
1	int
)	O
;	O
}	O
return	O
;	O
}	O
if	O
(	O
this_saddr	struct
.	O
sin_family	short
!=	O
AF_INET	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: received unknown AF %lu\n"	pointer
,	O
programid	array
,	O
(	O
unsigned	O
long	O
)	O
this_saddr	struct
.	O
sin_family	short
)	O
;	O
return	O
;	O
}	O
assert	O
(	O
this_saddrlen	int
==	O
sizeof	O
(	O
this_saddr	struct
)	O
)	O
;	O
assert	O
(	O
r	long
<=	O
buf_in	struct
.	O
size	long
)	O
;	O
buf_in	struct
.	O
size	long
=	O
r	long
;	O
cdebugbuf	function
(	O
-	O
1	int
,	O
"decode"	pointer
,	O
&	O
buf_in	struct
,	O
3	int
,	O
0	int
)	O
;	O
for	O
(	O
i	long
=	O
n_mechs	int
-	O
1	int
;	O
i	long
>=	O
0	int
;	O
i	long
--	O
)	O
{	O
emsg	pointer
=	O
mechs	array
[	O
i	long
]	O
->	O
decode	pointer
(	O
md_in	array
[	O
i	long
]	O
,	O
&	O
buf_in	struct
)	O
;	O
if	O
(	O
emsg	pointer
)	O
{	O
if	O
(	O
*	O
emsg	pointer
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: bad packet: %s: %s\n"	pointer
,	O
programid	array
,	O
mechs	array
[	O
i	long
]	O
->	O
name	pointer
,	O
emsg	pointer
)	O
;	O
else	O
cdebug	function
(	O
i	long
,	O
"silently discarded"	pointer
)	O
;	O
return	O
;	O
}	O
cdebugbuf	function
(	O
i	long
,	O
"decode"	pointer
,	O
&	O
buf_in	struct
,	O
3	int
,	O
0	int
)	O
;	O
}	O
npackets	long
++	O
;	O
nbytes	long
+=	O
buf_in	struct
.	O
size	long
;	O
alarm	function
(	O
timeout	int
)	O
;	O
different	int
=	O
(	O
!	O
public_remote_specd	int
||	O
public_remote	struct
.	O
sin_addr	struct
.	O
s_addr	int
!=	O
this_saddr	struct
.	O
sin_addr	struct
.	O
s_addr	int
||	O
public_remote	struct
.	O
sin_port	short
!=	O
this_saddr	struct
.	O
sin_port	short
)	O
;	O
if	O
(	O
different	int
)	O
{	O
if	O
(	O
public_remote_specd	int
==	O
2	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: packet from unexpected sender %s:%lu\n"	pointer
,	O
programid	array
,	O
inet_ntoa	function
(	O
this_saddr	struct
.	O
sin_addr	struct
)	O
,	O
(	O
unsigned	O
long	O
)	O
ntohs	function
(	O
this_saddr	struct
.	O
sin_port	short
)	O
)	O
;	O
return	O
;	O
}	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: tunnel open with peer %s:%lu\n"	pointer
,	O
programid	array
,	O
inet_ntoa	function
(	O
this_saddr	struct
.	O
sin_addr	struct
)	O
,	O
(	O
unsigned	O
long	O
)	O
ntohs	function
(	O
this_saddr	struct
.	O
sin_port	short
)	O
)	O
;	O
nextsendka	long
=	O
now	function
(	O
)	O
;	O
public_remote_specd	int
=	O
1	int
;	O
memcpy	function
(	O
&	O
public_remote	struct
,	O
&	O
this_saddr	struct
,	O
sizeof	O
(	O
public_remote	struct
)	O
)	O
;	O
}	O
else	O
if	O
(	O
!	O
any_recvd	int
)	O
{	O
diag	function
(	O
"tunnel open"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
reannounce	int
&&	O
now	function
(	O
)	O
>=	O
nextreann	long
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: tunnel still open: received %lu packets, %lu bytes\n"	pointer
,	O
programid	array
,	O
npackets	long
,	O
nbytes	long
)	O
;	O
}	O
else	O
{	O
goto	O
no_set_reann	O
;	O
}	O
if	O
(	O
reannounce	int
)	O
nextreann	long
=	O
now	function
(	O
)	O
+	O
reannounce	int
;	O
no_set_reann	O
:	O
any_recvd	int
=	O
1	int
;	O
if	O
(	O
!	O
buf_in	struct
.	O
size	long
||	O
*	O
buf_in	struct
.	O
start	pointer
!=	O
0300	int
)	O
{	O
*	O
--	O
buf_in	struct
.	O
start	pointer
=	O
0300	int
;	O
buf_in	struct
.	O
size	long
++	O
;	O
}	O
if	O
(	O
buf_in	struct
.	O
start	pointer
[	O
buf_in	struct
.	O
size	long
-	O
1	int
]	O
!=	O
0300	int
)	O
{	O
buf_in	struct
.	O
start	pointer
[	O
buf_in	struct
.	O
size	long
++	O
]	O
=	O
0300	int
;	O
}	O
setnonblock	function
(	O
private_in_fd	int
,	O
0	int
)	O
;	O
write_must	function
(	O
private_in_fd	int
,	O
buf_in	struct
.	O
start	pointer
,	O
buf_in	struct
.	O
size	long
,	O
"write down"	pointer
)	O
;	O
}	O
static	O
void	O
sendpacket	function
(	O
const	O
unsigned	O
char	O
*	O
message	pointer
,	O
size_t	long
size	long
)	O
{	O
int	O
i	long
,	O
r	long
;	O
buf_out	struct
.	O
start	pointer
=	O
buf_out	struct
.	O
base	pointer
+	O
maxprefix	long
;	O
buf_out	struct
.	O
size	long
=	O
size	long
;	O
memcpy	function
(	O
buf_out	struct
.	O
start	pointer
,	O
message	pointer
,	O
size	long
)	O
;	O
nextsendka	long
=	O
now	function
(	O
)	O
+	O
keepalive	int
;	O
cdebugbuf	function
(	O
-	O
1	int
,	O
"encode"	pointer
,	O
&	O
buf_out	struct
,	O
4	int
,	O
0	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n_mechs	int
;	O
i	long
++	O
)	O
{	O
mechs	array
[	O
i	long
]	O
->	O
encode	pointer
(	O
md_out	array
[	O
i	long
]	O
,	O
&	O
buf_out	struct
)	O
;	O
cdebugbuf	function
(	O
i	long
,	O
"encode"	pointer
,	O
&	O
buf_out	struct
,	O
4	int
,	O
0	int
)	O
;	O
}	O
assert	O
(	O
public_remote_specd	int
)	O
;	O
setnonblock	function
(	O
public_local_fd	int
,	O
1	int
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
r	long
=	O
sendto	function
(	O
public_local_fd	int
,	O
buf_out	struct
.	O
start	pointer
,	O
buf_out	struct
.	O
size	long
,	O
0	int
,	O
&	O
public_remote	struct
,	O
sizeof	O
(	O
public_remote	struct
)	O
)	O
;	O
if	O
(	O
r	long
==	O
buf_out	struct
.	O
size	long
)	O
break	O
;	O
if	O
(	O
r	long
>=	O
0	int
)	O
{	O
diag	function
(	O
"unexpected short send"	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
errno	O
!=	O
EINTR	int
)	O
{	O
sysdiag	function
(	O
"send"	pointer
)	O
;	O
return	O
;	O
}	O
}	O
}	O
static	O
void	O
outbound	function
(	O
void	O
)	O
{	O
int	O
r	long
;	O
unsigned	O
char	O
*	O
after_eaten	pointer
,	O
*	O
delim	pointer
;	O
size_t	long
this_packet	long
;	O
setnonblock	function
(	O
private_out_fd	int
,	O
1	int
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
r	long
=	O
read	function
(	O
private_out_fd	int
,	O
accum_buf	pointer
+	O
accum_used	long
,	O
accum_avail	long
-	O
accum_used	long
)	O
;	O
if	O
(	O
!	O
r	long
)	O
{	O
diag	function
(	O
"outbound datastream closed, quitting"	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
if	O
(	O
r	long
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
EAGAIN	int
)	O
return	O
;	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
continue	O
;	O
}	O
accum_used	long
+=	O
r	long
;	O
assert	O
(	O
accum_used	long
<=	O
accum_avail	long
)	O
;	O
after_eaten	pointer
=	O
accum_buf	pointer
;	O
while	O
(	O
(	O
delim	pointer
=	O
memchr	function
(	O
after_eaten	pointer
,	O
0300	int
,	O
accum_used	long
)	O
)	O
)	O
{	O
this_packet	long
=	O
delim	pointer
-	O
after_eaten	pointer
;	O
if	O
(	O
this_packet	long
)	O
sendpacket	function
(	O
after_eaten	pointer
,	O
this_packet	long
)	O
;	O
accum_used	long
-=	O
this_packet	long
+	O
1	int
;	O
after_eaten	pointer
=	O
delim	pointer
+	O
1	int
;	O
}	O
memmove	function
(	O
accum_buf	pointer
,	O
after_eaten	pointer
,	O
accum_used	long
)	O
;	O
if	O
(	O
accum_used	long
==	O
accum_avail	long
)	O
{	O
diag	function
(	O
"missing interpacket delimiter in output datastream"	pointer
)	O
;	O
accum_used	long
=	O
0	int
;	O
}	O
}	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
const	O
char	O
*	O
const	O
*	O
const	O
argv_in	pointer
)	O
{	O
const	O
char	O
*	O
arg	pointer
;	O
const	O
char	O
*	O
const	O
*	O
argv_save	pointer
;	O
const	O
char	O
*	O
const	O
*	O
argv_done	pointer
;	O
struct	O
pollfd	struct
pollfds	array
[	O
2	int
]	O
;	O
int	O
i	long
,	O
polltimeout	int
,	O
r	long
;	O
time_t	long
tnow	long
;	O
argv	pointer
=	O
argv_in	pointer
;	O
if	O
(	O
uname	function
(	O
&	O
uname_result	struct
)	O
)	O
{	O
perror	function
(	O
PROGRAM	pointer
": uname failed"	pointer
)	O
;	O
exit	function
(	O
16	int
)	O
;	O
}	O
sprintf	function
(	O
programid	array
,	O
PROGRAM	pointer
": %.*s"	pointer
,	O
SYS_NMLN	O
,	O
uname_result	struct
.	O
nodename	array
)	O
;	O
opt_chars	pointer
=	O
getarg_string	function
(	O
)	O
;	O
encdec_keys_write	int
=	O
!	O
!	O
strchr	function
(	O
opt_chars	pointer
,	O
'w'	O
)	O
;	O
crypto_debug	int
=	O
!	O
!	O
strchr	function
(	O
opt_chars	pointer
,	O
'K'	O
)	O
;	O
public_local_fd	int
=	O
getarg_ulong	function
(	O
)	O
;	O
private_in_fd	int
=	O
getarg_ulong	function
(	O
)	O
;	O
private_out_fd	int
=	O
getarg_ulong	function
(	O
)	O
;	O
encdec_keys_fd	int
=	O
getarg_ulong	function
(	O
)	O
;	O
mtu2	int
=	O
getarg_ulong	function
(	O
)	O
*	O
2	int
;	O
keepalive	int
=	O
getarg_ulong	function
(	O
)	O
;	O
timeout	int
=	O
getarg_ulong	function
(	O
)	O
;	O
reannounce	int
=	O
getarg_ulong	function
(	O
)	O
;	O
arg	pointer
=	O
getarg_string	function
(	O
)	O
;	O
if	O
(	O
*	O
arg	pointer
)	O
{	O
public_remote_specd	int
=	O
1	int
;	O
public_remote	struct
.	O
sin_family	short
=	O
AF_INET	O
;	O
arg_assert	O
(	O
inet_aton	function
(	O
arg	pointer
,	O
&	O
public_remote	struct
.	O
sin_addr	struct
)	O
)	O
;	O
public_remote	struct
.	O
sin_port	short
=	O
htons	function
(	O
getarg_ulong	function
(	O
)	O
)	O
;	O
}	O
if	O
(	O
crypto_debug	int
)	O
{	O
diag	function
(	O
"crypto debugging enabled!"	pointer
)	O
;	O
setvbuf	function
(	O
stdout	pointer
,	O
0	int
,	O
_IOLBF	int
,	O
0	int
)	O
;	O
}	O
maxprefix	long
=	O
0	int
;	O
i	long
=	O
0	int
;	O
while	O
(	O
(	O
arg	pointer
=	O
*	O
++	O
argv	pointer
)	O
)	O
{	O
arg_assert	O
(	O
*	O
arg	pointer
++	O
==	O
'|'	O
)	O
;	O
arg_assert	O
(	O
i	long
<=	O
MAXMECHS	int
)	O
;	O
mechs	array
[	O
i	long
]	O
=	O
find_mech	function
(	O
arg	pointer
)	O
;	O
cdebug	function
(	O
i	long
,	O
"writer->reader setup"	pointer
)	O
;	O
argv_save	pointer
=	O
argv	pointer
;	O
if	O
(	O
encdec_keys_write	int
)	O
mechs	array
[	O
i	long
]	O
->	O
encsetup	pointer
(	O
&	O
md_out	array
[	O
i	long
]	O
,	O
&	O
maxprefix	long
,	O
&	O
maxsuffix	long
)	O
;	O
else	O
mechs	array
[	O
i	long
]	O
->	O
decsetup	pointer
(	O
&	O
md_in	array
[	O
i	long
]	O
)	O
;	O
argv_done	pointer
=	O
argv	pointer
;	O
argv	pointer
=	O
argv_save	pointer
;	O
cdebug	function
(	O
i	long
,	O
"reader->writer setup"	pointer
)	O
;	O
if	O
(	O
encdec_keys_write	int
)	O
mechs	array
[	O
i	long
]	O
->	O
decsetup	pointer
(	O
&	O
md_in	array
[	O
i	long
]	O
)	O
;	O
else	O
mechs	array
[	O
i	long
]	O
->	O
encsetup	pointer
(	O
&	O
md_out	array
[	O
i	long
]	O
,	O
&	O
maxprefix	long
,	O
&	O
maxsuffix	long
)	O
;	O
assert	O
(	O
argv	pointer
==	O
argv_done	pointer
)	O
;	O
i	long
++	O
;	O
}	O
n_mechs	int
=	O
i	long
;	O
if	O
(	O
maxprefix	long
<	O
1	int
)	O
maxprefix	long
=	O
1	int
;	O
if	O
(	O
maxsuffix	long
<	O
1	int
)	O
maxsuffix	long
=	O
1	int
;	O
buffer_size	long
=	O
mtu2	int
+	O
maxprefix	long
+	O
maxsuffix	long
;	O
buf_in	struct
.	O
base	pointer
=	O
xmalloc	function
(	O
buffer_size	long
)	O
;	O
buf_out	struct
.	O
base	pointer
=	O
xmalloc	function
(	O
buffer_size	long
)	O
;	O
accum_avail	long
=	O
mtu2	int
+	O
1	int
;	O
accum_buf	pointer
=	O
xmalloc	function
(	O
accum_avail	long
)	O
;	O
alarm	function
(	O
timeout	int
)	O
;	O
pollfds	array
[	O
0	int
]	O
.	O
fd	int
=	O
public_local_fd	int
;	O
pollfds	array
[	O
0	int
]	O
.	O
events	short
=	O
POLLIN	int
;	O
pollfds	array
[	O
1	int
]	O
.	O
fd	int
=	O
private_out_fd	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
pollfds	array
[	O
1	int
]	O
.	O
events	short
=	O
public_remote_specd	int
?	O
POLLIN	int
:	O
0	int
;	O
pollfds	array
[	O
0	int
]	O
.	O
revents	short
=	O
0	int
;	O
pollfds	array
[	O
1	int
]	O
.	O
revents	short
=	O
0	int
;	O
if	O
(	O
keepalive	int
)	O
{	O
tnow	long
=	O
now	function
(	O
)	O
;	O
if	O
(	O
tnow	long
>=	O
nextsendka	long
&&	O
public_remote_specd	int
)	O
sendpacket	function
(	O
"\300"	pointer
,	O
1	int
)	O
;	O
polltimeout	int
=	O
(	O
nextsendka	long
-	O
tnow	long
)	O
*	O
1000	int
;	O
}	O
else	O
{	O
polltimeout	int
=	O
-	O
1	int
;	O
}	O
r	long
=	O
poll	function
(	O
pollfds	array
,	O
2	int
,	O
polltimeout	int
)	O
;	O
if	O
(	O
!	O
r	long
)	O
continue	O
;	O
if	O
(	O
r	long
==	O
-	O
1	int
&&	O
errno	O
==	O
EINTR	int
)	O
continue	O
;	O
if	O
(	O
r	long
==	O
-	O
1	int
)	O
sysfail	function
(	O
"poll"	pointer
)	O
;	O
if	O
(	O
pollfds	array
[	O
0	int
]	O
.	O
revents	short
&	O
(	O
POLLIN	int
|	O
POLLERR	int
)	O
)	O
inbound	function
(	O
)	O
;	O
if	O
(	O
pollfds	array
[	O
1	int
]	O
.	O
revents	short
&	O
(	O
POLLIN	int
|	O
POLLERR	int
)	O
)	O
outbound	function
(	O
)	O
;	O
}	O
}	O
