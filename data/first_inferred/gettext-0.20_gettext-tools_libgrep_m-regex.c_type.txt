struct	O
patterns	struct
{	O
struct	O
re_pattern_buffer	struct
regexbuf	struct
;	O
struct	O
re_registers	struct
regs	struct
;	O
}	O
;	O
struct	O
compiled_regex	struct
{	O
bool	bool
match_words	bool
;	O
bool	bool
match_lines	bool
;	O
char	O
eolbyte	char
;	O
struct	O
patterns	struct
*	O
patterns	struct
;	O
size_t	long
pcount	long
;	O
}	O
;	O
static	O
void	O
*	O
compile	pointer
(	O
const	O
char	O
*	O
pattern	pointer
,	O
size_t	long
pattern_size	long
,	O
bool	bool
match_icase	bool
,	O
bool	bool
match_words	bool
,	O
bool	bool
match_lines	bool
,	O
char	O
eolbyte	char
,	O
reg_syntax_t	long
syntax	long
)	O
{	O
struct	O
compiled_regex	struct
*	O
cregex	pointer
;	O
cregex	pointer
=	O
XMALLOC	O
(	O
struct	O
compiled_regex	struct
)	O
;	O
memset	function
(	O
cregex	pointer
,	O
'\0'	O
,	O
sizeof	O
(	O
struct	O
compiled_regex	struct
)	O
)	O
;	O
cregex	pointer
->	O
match_words	bool
=	O
match_words	bool
;	O
cregex	pointer
->	O
match_lines	bool
=	O
match_lines	bool
;	O
cregex	pointer
->	O
eolbyte	char
=	O
eolbyte	char
;	O
cregex	pointer
->	O
patterns	struct
=	O
NULL	O
;	O
cregex	pointer
->	O
pcount	long
=	O
0	int
;	O
re_set_syntax	O
(	O
syntax	long
)	O
;	O
{	O
const	O
char	O
*	O
sep	pointer
;	O
size_t	long
total	long
=	O
pattern_size	long
;	O
const	O
char	O
*	O
motif	pointer
=	O
pattern	pointer
;	O
do	O
{	O
size_t	long
len	long
;	O
const	O
char	O
*	O
err	pointer
;	O
sep	pointer
=	O
(	O
const	O
char	O
*	O
)	O
memchr	function
(	O
motif	pointer
,	O
'\n'	O
,	O
total	long
)	O
;	O
if	O
(	O
sep	pointer
)	O
{	O
len	long
=	O
sep	pointer
-	O
motif	pointer
;	O
sep	pointer
++	O
;	O
total	long
-=	O
(	O
len	long
+	O
1	int
)	O
;	O
}	O
else	O
{	O
len	long
=	O
total	long
;	O
total	long
=	O
0	int
;	O
}	O
cregex	pointer
->	O
patterns	struct
=	O
xrealloc	function
(	O
cregex	pointer
->	O
patterns	struct
,	O
(	O
cregex	pointer
->	O
pcount	long
+	O
1	int
)	O
*	O
sizeof	O
(	O
struct	O
patterns	struct
)	O
)	O
;	O
memset	function
(	O
&	O
cregex	pointer
->	O
patterns	struct
[	O
cregex	pointer
->	O
pcount	long
]	O
,	O
'\0'	O
,	O
sizeof	O
(	O
struct	O
patterns	struct
)	O
)	O
;	O
if	O
(	O
(	O
err	pointer
=	O
re_compile_pattern	O
(	O
motif	pointer
,	O
len	long
,	O
&	O
cregex	pointer
->	O
patterns	struct
[	O
cregex	pointer
->	O
pcount	long
]	O
.	O
regexbuf	struct
)	O
)	O
!=	O
NULL	O
)	O
error	function
(	O
exit_failure	int
,	O
0	int
,	O
"%s"	pointer
,	O
err	pointer
)	O
;	O
cregex	pointer
->	O
pcount	long
++	O
;	O
motif	pointer
=	O
sep	pointer
;	O
}	O
while	O
(	O
sep	pointer
&&	O
total	long
!=	O
0	int
)	O
;	O
}	O
return	O
cregex	pointer
;	O
}	O
static	O
void	O
*	O
Gcompile	function
(	O
const	O
char	O
*	O
pattern	pointer
,	O
size_t	long
pattern_size	long
,	O
bool	bool
match_icase	bool
,	O
bool	bool
match_words	bool
,	O
bool	bool
match_lines	bool
,	O
char	O
eolbyte	char
)	O
{	O
return	O
compile	pointer
(	O
pattern	pointer
,	O
pattern_size	long
,	O
match_icase	bool
,	O
match_words	bool
,	O
match_lines	bool
,	O
eolbyte	char
,	O
RE_SYNTAX_GREP	O
|	O
RE_HAT_LISTS_NOT_NEWLINE	O
)	O
;	O
}	O
static	O
void	O
*	O
Ecompile	function
(	O
const	O
char	O
*	O
pattern	pointer
,	O
size_t	long
pattern_size	long
,	O
bool	bool
match_icase	bool
,	O
bool	bool
match_words	bool
,	O
bool	bool
match_lines	bool
,	O
char	O
eolbyte	char
)	O
{	O
return	O
compile	pointer
(	O
pattern	pointer
,	O
pattern_size	long
,	O
match_icase	bool
,	O
match_words	bool
,	O
match_lines	bool
,	O
eolbyte	char
,	O
RE_SYNTAX_POSIX_EGREP	O
)	O
;	O
}	O
static	O
void	O
*	O
AWKcompile	function
(	O
const	O
char	O
*	O
pattern	pointer
,	O
size_t	long
pattern_size	long
,	O
bool	bool
match_icase	bool
,	O
bool	bool
match_words	bool
,	O
bool	bool
match_lines	bool
,	O
char	O
eolbyte	char
)	O
{	O
return	O
compile	pointer
(	O
pattern	pointer
,	O
pattern_size	long
,	O
match_icase	bool
,	O
match_words	bool
,	O
match_lines	bool
,	O
eolbyte	char
,	O
RE_SYNTAX_AWK	O
)	O
;	O
}	O
static	O
size_t	long
EGexecute	function
(	O
const	O
void	O
*	O
compiled_pattern	pointer
,	O
const	O
char	O
*	O
buf	pointer
,	O
size_t	long
buf_size	long
,	O
size_t	long
*	O
match_size	pointer
,	O
bool	bool
exact	bool
)	O
{	O
struct	O
compiled_regex	struct
*	O
cregex	pointer
=	O
(	O
struct	O
compiled_regex	struct
*	O
)	O
compiled_pattern	pointer
;	O
char	O
eol	char
=	O
cregex	pointer
->	O
eolbyte	char
;	O
register	O
const	O
char	O
*	O
buflim	pointer
=	O
buf	pointer
+	O
buf_size	long
;	O
register	O
const	O
char	O
*	O
beg	pointer
;	O
register	O
const	O
char	O
*	O
end	pointer
;	O
for	O
(	O
beg	pointer
=	O
buf	pointer
;	O
beg	pointer
<	O
buflim	pointer
;	O
beg	pointer
=	O
end	pointer
)	O
{	O
size_t	long
i	long
;	O
end	pointer
=	O
(	O
const	O
char	O
*	O
)	O
memchr	function
(	O
beg	pointer
,	O
eol	char
,	O
buflim	pointer
-	O
beg	pointer
)	O
;	O
if	O
(	O
end	pointer
==	O
NULL	O
)	O
end	pointer
=	O
buflim	pointer
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
cregex	pointer
->	O
pcount	long
;	O
i	long
++	O
)	O
{	O
int	O
start	pointer
,	O
len	long
;	O
cregex	pointer
->	O
patterns	struct
[	O
i	long
]	O
.	O
regexbuf	struct
.	O
not_eol	int
=	O
0	int
;	O
if	O
(	O
0	int
<=	O
(	O
start	pointer
=	O
re_search	O
(	O
&	O
cregex	pointer
->	O
patterns	struct
[	O
i	long
]	O
.	O
regexbuf	struct
,	O
beg	pointer
,	O
end	pointer
-	O
beg	pointer
,	O
0	int
,	O
end	pointer
-	O
beg	pointer
,	O
&	O
cregex	pointer
->	O
patterns	struct
[	O
i	long
]	O
.	O
regs	struct
)	O
)	O
)	O
{	O
len	long
=	O
cregex	pointer
->	O
patterns	struct
[	O
i	long
]	O
.	O
regs	struct
.	O
end	pointer
[	O
0	int
]	O
-	O
start	pointer
;	O
if	O
(	O
exact	bool
)	O
{	O
*	O
match_size	pointer
=	O
len	long
;	O
return	O
start	pointer
;	O
}	O
if	O
(	O
cregex	pointer
->	O
match_lines	bool
)	O
{	O
if	O
(	O
len	long
==	O
end	pointer
-	O
beg	pointer
)	O
goto	O
success	O
;	O
}	O
else	O
if	O
(	O
cregex	pointer
->	O
match_words	bool
)	O
{	O
while	O
(	O
start	pointer
>=	O
0	int
)	O
{	O
if	O
(	O
(	O
start	pointer
==	O
0	int
||	O
!	O
IS_WORD_CONSTITUENT	O
(	O
(	O
unsigned	O
char	O
)	O
beg	pointer
[	O
start	pointer
-	O
1	int
]	O
)	O
)	O
&&	O
(	O
start	pointer
+	O
len	long
==	O
end	pointer
-	O
beg	pointer
||	O
!	O
IS_WORD_CONSTITUENT	O
(	O
(	O
unsigned	O
char	O
)	O
beg	pointer
[	O
start	pointer
+	O
len	long
]	O
)	O
)	O
)	O
goto	O
success	O
;	O
if	O
(	O
len	long
>	O
0	int
)	O
{	O
--	O
len	long
;	O
cregex	pointer
->	O
patterns	struct
[	O
i	long
]	O
.	O
regexbuf	struct
.	O
not_eol	int
=	O
1	int
;	O
len	long
=	O
re_match	O
(	O
&	O
cregex	pointer
->	O
patterns	struct
[	O
i	long
]	O
.	O
regexbuf	struct
,	O
beg	pointer
,	O
start	pointer
+	O
len	long
,	O
start	pointer
,	O
&	O
cregex	pointer
->	O
patterns	struct
[	O
i	long
]	O
.	O
regs	struct
)	O
;	O
}	O
if	O
(	O
len	long
<=	O
0	int
)	O
{	O
if	O
(	O
start	pointer
==	O
end	pointer
-	O
beg	pointer
)	O
break	O
;	O
++	O
start	pointer
;	O
cregex	pointer
->	O
patterns	struct
[	O
i	long
]	O
.	O
regexbuf	struct
.	O
not_eol	int
=	O
0	int
;	O
start	pointer
=	O
re_search	O
(	O
&	O
cregex	pointer
->	O
patterns	struct
[	O
i	long
]	O
.	O
regexbuf	struct
,	O
beg	pointer
,	O
end	pointer
-	O
beg	pointer
,	O
start	pointer
,	O
end	pointer
-	O
beg	pointer
-	O
start	pointer
,	O
&	O
cregex	pointer
->	O
patterns	struct
[	O
i	long
]	O
.	O
regs	struct
)	O
;	O
len	long
=	O
cregex	pointer
->	O
patterns	struct
[	O
i	long
]	O
.	O
regs	struct
.	O
end	pointer
[	O
0	int
]	O
-	O
start	pointer
;	O
}	O
}	O
}	O
else	O
goto	O
success	O
;	O
}	O
}	O
if	O
(	O
end	pointer
<	O
buflim	pointer
)	O
end	pointer
++	O
;	O
}	O
return	O
(	O
size_t	long
)	O
-	O
1	int
;	O
success	O
:	O
*	O
match_size	pointer
=	O
end	pointer
-	O
beg	pointer
;	O
return	O
beg	pointer
-	O
buf	pointer
;	O
}	O
static	O
void	O
EGfree	function
(	O
void	O
*	O
compiled_pattern	pointer
)	O
{	O
struct	O
compiled_regex	struct
*	O
cregex	pointer
=	O
(	O
struct	O
compiled_regex	struct
*	O
)	O
compiled_pattern	pointer
;	O
free	pointer
(	O
cregex	pointer
->	O
patterns	struct
)	O
;	O
free	pointer
(	O
cregex	pointer
)	O
;	O
}	O
matcher_t	struct
matcher_grep	struct
=	O
{	O
Gcompile	function
,	O
EGexecute	function
,	O
EGfree	function
}	O
;	O
matcher_t	struct
matcher_egrep	struct
=	O
{	O
Ecompile	function
,	O
EGexecute	function
,	O
EGfree	function
}	O
;	O
matcher_t	struct
matcher_awk	struct
=	O
{	O
AWKcompile	function
,	O
EGexecute	function
,	O
EGfree	function
}	O
;	O
