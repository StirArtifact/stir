struct	O
opt_slot	struct
{	O
struct	O
mu_option	struct
*	O
*	O
opt	pointer
;	O
int	O
count	int
;	O
}	O
;	O
static	O
int	O
optcmp	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
struct	O
mu_option	struct
const	O
*	O
ap	pointer
=	O
*	O
(	O
struct	O
mu_option	struct
const	O
*	O
*	O
)	O
a	pointer
;	O
struct	O
mu_option	struct
const	O
*	O
bp	pointer
=	O
*	O
(	O
struct	O
mu_option	struct
const	O
*	O
*	O
)	O
b	pointer
;	O
if	O
(	O
!	O
MU_OPTION_IS_VALID_SHORT_OPTION	O
(	O
ap	pointer
)	O
&&	O
MU_OPTION_IS_VALID_LONG_OPTION	O
(	O
ap	pointer
)	O
&&	O
!	O
MU_OPTION_IS_VALID_SHORT_OPTION	O
(	O
bp	pointer
)	O
&&	O
MU_OPTION_IS_VALID_LONG_OPTION	O
(	O
bp	pointer
)	O
)	O
return	O
strcasecmp	function
(	O
ap	pointer
->	O
opt_long	pointer
,	O
bp	pointer
->	O
opt_long	pointer
)	O
;	O
else	O
{	O
char	O
afirst	char
,	O
bfirst	char
;	O
int	O
res	pointer
;	O
afirst	char
=	O
ap	pointer
->	O
opt_short	int
?	O
ap	pointer
->	O
opt_short	int
:	O
ap	pointer
->	O
opt_long	pointer
?	O
*	O
ap	pointer
->	O
opt_long	pointer
:	O
0	int
;	O
bfirst	char
=	O
bp	pointer
->	O
opt_short	int
?	O
bp	pointer
->	O
opt_short	int
:	O
bp	pointer
->	O
opt_long	pointer
?	O
*	O
bp	pointer
->	O
opt_long	pointer
:	O
0	int
;	O
res	pointer
=	O
mu_tolower	O
(	O
afirst	char
)	O
-	O
mu_tolower	O
(	O
bfirst	char
)	O
;	O
return	O
res	pointer
?	O
res	pointer
:	O
afirst	char
-	O
bfirst	char
;	O
}	O
}	O
static	O
int	O
slotcmp	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
struct	O
opt_slot	struct
const	O
*	O
ap	pointer
=	O
(	O
struct	O
opt_slot	struct
const	O
*	O
)	O
a	pointer
;	O
struct	O
opt_slot	struct
const	O
*	O
bp	pointer
=	O
(	O
struct	O
opt_slot	struct
const	O
*	O
)	O
b	pointer
;	O
return	O
optcmp	function
(	O
ap	pointer
->	O
opt	pointer
,	O
bp	pointer
->	O
opt	pointer
)	O
;	O
}	O
static	O
size_t	long
sort_group	function
(	O
struct	O
mu_option	struct
*	O
*	O
optbuf	pointer
,	O
size_t	long
start	long
)	O
{	O
size_t	long
i	long
,	O
count	int
=	O
0	int
;	O
optbuf	pointer
[	O
start	long
]	O
->	O
opt_flags	int
&=	O
~	O
MU_OPTION_ALIAS	int
;	O
for	O
(	O
i	long
=	O
start	long
;	O
optbuf	pointer
[	O
i	long
]	O
&&	O
!	O
MU_OPTION_IS_GROUP_HEADER	O
(	O
optbuf	pointer
[	O
i	long
]	O
)	O
;	O
i	long
++	O
)	O
{	O
if	O
(	O
!	O
(	O
optbuf	pointer
[	O
i	long
]	O
->	O
opt_flags	int
&	O
MU_OPTION_ALIAS	int
)	O
)	O
count	int
++	O
;	O
}	O
if	O
(	O
count	int
==	O
i	long
-	O
start	long
)	O
qsort	function
(	O
&	O
optbuf	pointer
[	O
start	long
]	O
,	O
count	int
,	O
sizeof	O
(	O
optbuf	pointer
[	O
0	int
]	O
)	O
,	O
optcmp	function
)	O
;	O
else	O
{	O
struct	O
mu_option	struct
*	O
*	O
tmp	pointer
;	O
struct	O
opt_slot	struct
*	O
slots	pointer
;	O
size_t	long
j	long
,	O
k	long
,	O
l	long
;	O
slots	pointer
=	O
mu_calloc	function
(	O
count	int
,	O
sizeof	O
(	O
slots	pointer
[	O
0	int
]	O
)	O
)	O
;	O
j	long
=	O
0	int
;	O
slots	pointer
[	O
0	int
]	O
.	O
opt	pointer
=	O
optbuf	pointer
+	O
start	long
;	O
slots	pointer
[	O
0	int
]	O
.	O
count	int
=	O
1	int
;	O
for	O
(	O
k	long
=	O
start	long
+	O
1	int
;	O
k	long
<	O
i	long
;	O
k	long
++	O
)	O
{	O
if	O
(	O
optbuf	pointer
[	O
k	long
]	O
->	O
opt_flags	int
&	O
MU_OPTION_ALIAS	int
)	O
slots	pointer
[	O
j	long
]	O
.	O
count	int
++	O
;	O
else	O
{	O
j	long
++	O
;	O
slots	pointer
[	O
j	long
]	O
.	O
opt	pointer
=	O
optbuf	pointer
+	O
k	long
;	O
slots	pointer
[	O
j	long
]	O
.	O
count	int
=	O
1	int
;	O
}	O
}	O
qsort	function
(	O
slots	pointer
,	O
count	int
,	O
sizeof	O
(	O
slots	pointer
[	O
0	int
]	O
)	O
,	O
slotcmp	function
)	O
;	O
tmp	pointer
=	O
mu_calloc	function
(	O
i	long
-	O
start	long
,	O
sizeof	O
(	O
tmp	pointer
[	O
0	int
]	O
)	O
)	O
;	O
for	O
(	O
k	long
=	O
l	long
=	O
0	int
;	O
k	long
<	O
count	int
;	O
k	long
++	O
)	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
slots	pointer
[	O
k	long
]	O
.	O
count	int
;	O
j	long
++	O
)	O
tmp	pointer
[	O
l	long
++	O
]	O
=	O
slots	pointer
[	O
k	long
]	O
.	O
opt	pointer
[	O
j	long
]	O
;	O
memcpy	function
(	O
optbuf	pointer
+	O
start	long
,	O
tmp	pointer
,	O
(	O
i	long
-	O
start	long
)	O
*	O
sizeof	O
tmp	pointer
[	O
0	int
]	O
)	O
;	O
free	function
(	O
tmp	pointer
)	O
;	O
free	function
(	O
slots	pointer
)	O
;	O
}	O
return	O
i	long
;	O
}	O
static	O
void	O
fn_help	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
unused	pointer
)	O
{	O
mu_program_help	function
(	O
po	pointer
,	O
mu_strout	pointer
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
static	O
void	O
fn_usage	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
unused	pointer
)	O
{	O
mu_program_usage	function
(	O
po	pointer
,	O
1	int
,	O
mu_strout	pointer
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
static	O
void	O
fn_version	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
unused	pointer
)	O
{	O
mu_program_version	function
(	O
po	pointer
,	O
mu_strout	pointer
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
struct	O
mu_option	struct
mu_default_options	array
[	O
]	O
=	O
{	O
MU_OPTION_GROUP	O
(	O
""	pointer
)	O
,	O
{	O
"help"	pointer
,	O
'?'	O
,	O
NULL	O
,	O
MU_OPTION_IMMEDIATE	int
,	O
N_	O
(	O
"give this help list"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
fn_help	function
}	O
,	O
{	O
"usage"	pointer
,	O
0	int
,	O
NULL	O
,	O
MU_OPTION_IMMEDIATE	int
,	O
N_	O
(	O
"give a short usage message"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
fn_usage	function
}	O
,	O
MU_OPTION_END	O
}	O
;	O
struct	O
mu_option	struct
mu_version_options	array
[	O
]	O
=	O
{	O
{	O
"version"	pointer
,	O
'V'	O
,	O
NULL	O
,	O
MU_OPTION_IMMEDIATE	int
,	O
N_	O
(	O
"print program version"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
fn_version	function
}	O
,	O
MU_OPTION_END	O
}	O
;	O
void	O
mu_parseopt_error	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
char	O
const	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	pointer
;	O
if	O
(	O
po	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_IGNORE_ERRORS	int
)	O
return	O
;	O
if	O
(	O
po	pointer
->	O
po_prog_name	pointer
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: "	pointer
,	O
po	pointer
->	O
po_prog_name	pointer
)	O
;	O
va_start	O
(	O
ap	pointer
,	O
fmt	pointer
)	O
;	O
vfprintf	function
(	O
stderr	pointer
,	O
fmt	pointer
,	O
ap	pointer
)	O
;	O
va_end	O
(	O
ap	pointer
)	O
;	O
fputc	function
(	O
'\n'	O
,	O
stderr	pointer
)	O
;	O
}	O
static	O
void	O
mu_option_cache_destroy	function
(	O
void	O
*	O
ptr	pointer
)	O
{	O
struct	O
mu_option_cache	struct
*	O
cache	pointer
=	O
ptr	pointer
;	O
free	function
(	O
cache	pointer
)	O
;	O
}	O
static	O
int	O
parseopt_apply	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
;	O
void	O
add_option_cache	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
struct	O
mu_option_cache	struct
*	O
cache	pointer
=	O
mu_alloc	function
(	O
sizeof	O
(	O
*	O
cache	pointer
)	O
)	O
;	O
cache	pointer
->	O
cache_opt	pointer
=	O
opt	pointer
;	O
if	O
(	O
arg	pointer
==	O
NULL	O
&&	O
opt	pointer
->	O
opt_default	pointer
)	O
arg	pointer
=	O
opt	pointer
->	O
opt_default	pointer
;	O
cache	pointer
->	O
cache_arg	pointer
=	O
arg	pointer
;	O
if	O
(	O
(	O
po	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_IMMEDIATE	int
)	O
||	O
(	O
opt	pointer
->	O
opt_flags	int
&	O
MU_OPTION_IMMEDIATE	int
)	O
)	O
{	O
parseopt_apply	function
(	O
cache	pointer
,	O
po	pointer
)	O
;	O
mu_option_cache_destroy	function
(	O
cache	pointer
)	O
;	O
}	O
else	O
{	O
mu_list_append	function
(	O
po	pointer
->	O
po_optlist	pointer
,	O
cache	pointer
)	O
;	O
}	O
}	O
struct	O
mu_option	struct
*	O
option_unalias	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
int	O
i	long
)	O
{	O
while	O
(	O
i	long
>	O
0	int
&&	O
po	pointer
->	O
po_optv	pointer
[	O
i	long
]	O
->	O
opt_flags	int
&	O
MU_OPTION_ALIAS	int
)	O
--	O
i	long
;	O
return	O
po	pointer
->	O
po_optv	pointer
[	O
i	long
]	O
;	O
}	O
struct	O
mu_option	struct
*	O
find_short_option	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
int	O
chr	int
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
po	pointer
->	O
po_optc	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
MU_OPTION_IS_VALID_SHORT_OPTION	O
(	O
po	pointer
->	O
po_optv	pointer
[	O
i	long
]	O
)	O
&&	O
po	pointer
->	O
po_optv	pointer
[	O
i	long
]	O
->	O
opt_short	int
==	O
chr	int
)	O
return	O
option_unalias	function
(	O
po	pointer
,	O
i	long
)	O
;	O
}	O
mu_parseopt_error	function
(	O
po	pointer
,	O
_	O
(	O
"unrecognized option '-%c'"	pointer
)	O
,	O
chr	int
)	O
;	O
return	O
NULL	O
;	O
}	O
enum	O
neg_match	enum
{	O
neg_nomatch	int
,	O
neg_match_inexact	int
,	O
neg_match_exact	int
}	O
;	O
static	O
enum	O
neg_match	enum
negmatch	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
size_t	long
i	long
,	O
char	O
const	O
*	O
optstr	pointer
,	O
size_t	long
optlen	long
)	O
{	O
if	O
(	O
mu_option_possible_negation	function
(	O
po	pointer
,	O
po	pointer
->	O
po_optv	pointer
[	O
i	long
]	O
)	O
)	O
{	O
size_t	long
neglen	long
=	O
strlen	function
(	O
po	pointer
->	O
po_negation	pointer
)	O
;	O
size_t	long
len	int
=	O
strlen	function
(	O
po	pointer
->	O
po_optv	pointer
[	O
i	long
]	O
->	O
opt_long	pointer
)	O
;	O
if	O
(	O
optlen	long
<=	O
neglen	long
+	O
len	int
&&	O
memcmp	function
(	O
optstr	pointer
,	O
po	pointer
->	O
po_negation	pointer
,	O
neglen	long
)	O
==	O
0	int
&&	O
memcmp	function
(	O
optstr	pointer
+	O
neglen	long
,	O
po	pointer
->	O
po_optv	pointer
[	O
i	long
]	O
->	O
opt_long	pointer
,	O
optlen	long
-	O
neglen	long
)	O
==	O
0	int
)	O
{	O
return	O
(	O
optlen	long
==	O
neglen	long
+	O
len	int
)	O
?	O
neg_match_exact	int
:	O
neg_match_inexact	int
;	O
}	O
}	O
return	O
neg_nomatch	int
;	O
}	O
struct	O
mu_option	struct
*	O
find_long_option	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
char	O
const	O
*	O
optstr	pointer
,	O
struct	O
mu_option	struct
*	O
*	O
used_opt_ptr	pointer
,	O
char	O
*	O
*	O
used_value	pointer
,	O
char	O
*	O
*	O
value	pointer
)	O
{	O
size_t	long
i	long
;	O
size_t	long
optlen	long
;	O
int	O
found	int
=	O
0	int
;	O
int	O
negated	int
;	O
struct	O
mu_option	struct
*	O
ret_opt	pointer
=	O
NULL	O
;	O
struct	O
mu_option	struct
*	O
used_opt	pointer
;	O
optlen	long
=	O
strcspn	function
(	O
optstr	pointer
,	O
"="	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
po	pointer
->	O
po_longcnt	long
;	O
i	long
++	O
)	O
{	O
size_t	long
j	long
=	O
po	pointer
->	O
po_longidx	pointer
[	O
i	long
]	O
;	O
size_t	long
len	int
=	O
strlen	function
(	O
po	pointer
->	O
po_optv	pointer
[	O
j	long
]	O
->	O
opt_long	pointer
)	O
;	O
struct	O
mu_option	struct
*	O
opt	pointer
=	O
option_unalias	function
(	O
po	pointer
,	O
j	long
)	O
;	O
enum	O
neg_match	enum
neg	enum
=	O
neg_nomatch	int
;	O
if	O
(	O
(	O
optlen	long
<=	O
len	int
&&	O
memcmp	function
(	O
po	pointer
->	O
po_optv	pointer
[	O
j	long
]	O
->	O
opt_long	pointer
,	O
optstr	pointer
,	O
optlen	long
)	O
==	O
0	int
)	O
||	O
(	O
neg	enum
=	O
negmatch	function
(	O
po	pointer
,	O
j	long
,	O
optstr	pointer
,	O
optlen	long
)	O
)	O
)	O
{	O
switch	O
(	O
found	int
)	O
{	O
case	O
0	int
:	O
used_opt	pointer
=	O
po	pointer
->	O
po_optv	pointer
[	O
j	long
]	O
;	O
ret_opt	pointer
=	O
opt	pointer
;	O
found	int
++	O
;	O
negated	int
=	O
neg	enum
!=	O
neg_nomatch	int
;	O
if	O
(	O
optlen	long
==	O
len	int
||	O
neg	enum
==	O
neg_match_exact	int
)	O
i	long
=	O
po	pointer
->	O
po_longcnt	long
-	O
1	int
;	O
break	O
;	O
case	O
1	int
:	O
if	O
(	O
opt	pointer
==	O
ret_opt	pointer
)	O
continue	O
;	O
if	O
(	O
po	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_IGNORE_ERRORS	int
)	O
return	O
NULL	O
;	O
mu_parseopt_error	function
(	O
po	pointer
,	O
_	O
(	O
"option '%s%*.*s' is ambiguous; possibilities:"	pointer
)	O
,	O
po	pointer
->	O
po_long_opt_start	pointer
,	O
optlen	long
,	O
optlen	long
,	O
optstr	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s%s%s\n"	pointer
,	O
po	pointer
->	O
po_long_opt_start	pointer
,	O
neg	enum
?	O
po	pointer
->	O
po_negation	pointer
:	O
""	pointer
,	O
used_opt	pointer
->	O
opt_long	pointer
)	O
;	O
if	O
(	O
neg	enum
==	O
neg_nomatch	int
&&	O
negmatch	function
(	O
po	pointer
,	O
j	long
,	O
optstr	pointer
,	O
optlen	long
)	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s%s%s\n"	pointer
,	O
po	pointer
->	O
po_long_opt_start	pointer
,	O
po	pointer
->	O
po_negation	pointer
,	O
po	pointer
->	O
po_optv	pointer
[	O
j	long
]	O
->	O
opt_long	pointer
)	O
;	O
found	int
++	O
;	O
case	O
2	int
:	O
fprintf	function
(	O
stderr	pointer
,	O
"%s%s%s\n"	pointer
,	O
po	pointer
->	O
po_long_opt_start	pointer
,	O
neg	enum
?	O
po	pointer
->	O
po_negation	pointer
:	O
""	pointer
,	O
po	pointer
->	O
po_optv	pointer
[	O
j	long
]	O
->	O
opt_long	pointer
)	O
;	O
if	O
(	O
neg	enum
==	O
neg_nomatch	int
&&	O
negmatch	function
(	O
po	pointer
,	O
j	long
,	O
optstr	pointer
,	O
optlen	long
)	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s%s%s\n"	pointer
,	O
po	pointer
->	O
po_long_opt_start	pointer
,	O
po	pointer
->	O
po_negation	pointer
,	O
po	pointer
->	O
po_optv	pointer
[	O
j	long
]	O
->	O
opt_long	pointer
)	O
;	O
}	O
}	O
}	O
switch	O
(	O
found	int
)	O
{	O
case	O
0	int
:	O
mu_parseopt_error	function
(	O
po	pointer
,	O
_	O
(	O
"unrecognized option '%s%s'"	pointer
)	O
,	O
po	pointer
->	O
po_long_opt_start	pointer
,	O
optstr	pointer
)	O
;	O
break	O
;	O
case	O
1	int
:	O
*	O
used_opt_ptr	pointer
=	O
used_opt	pointer
;	O
if	O
(	O
optstr	pointer
[	O
optlen	long
]	O
)	O
++	O
optlen	long
;	O
*	O
used_value	pointer
=	O
(	O
char	O
*	O
)	O
(	O
optstr	pointer
+	O
optlen	long
)	O
;	O
if	O
(	O
ret_opt	pointer
->	O
opt_type	enum
==	O
mu_c_bool	int
)	O
*	O
value	pointer
=	O
negated	int
?	O
"0"	pointer
:	O
"1"	pointer
;	O
else	O
*	O
value	pointer
=	O
NULL	O
;	O
return	O
ret_opt	pointer
;	O
case	O
2	int
:	O
break	O
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
void	O
permute	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
)	O
{	O
if	O
(	O
!	O
(	O
po	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_IN_ORDER	int
)	O
&&	O
po	pointer
->	O
po_arg_count	int
)	O
{	O
char	O
*	O
save	array
[	O
2	int
]	O
;	O
int	O
n	long
=	O
po	pointer
->	O
po_ind	int
-	O
(	O
po	pointer
->	O
po_arg_start	int
+	O
po	pointer
->	O
po_arg_count	int
)	O
;	O
if	O
(	O
n	long
>	O
2	int
)	O
abort	function
(	O
)	O
;	O
save	array
[	O
0	int
]	O
=	O
po	pointer
->	O
po_argv	pointer
[	O
po	pointer
->	O
po_arg_start	int
+	O
po	pointer
->	O
po_arg_count	int
]	O
;	O
if	O
(	O
n	long
==	O
2	int
)	O
save	array
[	O
1	int
]	O
=	O
po	pointer
->	O
po_argv	pointer
[	O
po	pointer
->	O
po_arg_start	int
+	O
po	pointer
->	O
po_arg_count	int
+	O
1	int
]	O
;	O
memmove	function
(	O
po	pointer
->	O
po_argv	pointer
+	O
po	pointer
->	O
po_arg_start	int
+	O
n	long
,	O
po	pointer
->	O
po_argv	pointer
+	O
po	pointer
->	O
po_arg_start	int
,	O
po	pointer
->	O
po_arg_count	int
*	O
sizeof	O
(	O
po	pointer
->	O
po_argv	pointer
[	O
0	int
]	O
)	O
)	O
;	O
po	pointer
->	O
po_argv	pointer
[	O
po	pointer
->	O
po_arg_start	int
]	O
=	O
save	array
[	O
0	int
]	O
;	O
if	O
(	O
n	long
==	O
2	int
)	O
po	pointer
->	O
po_argv	pointer
[	O
po	pointer
->	O
po_arg_start	int
+	O
1	int
]	O
=	O
save	array
[	O
1	int
]	O
;	O
po	pointer
->	O
po_arg_start	int
+=	O
n	long
;	O
po	pointer
->	O
po_permuted	int
=	O
1	int
;	O
}	O
}	O
static	O
int	O
next_opt	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
)	O
{	O
if	O
(	O
!	O
*	O
po	pointer
->	O
po_cur	pointer
)	O
{	O
permute	function
(	O
po	pointer
)	O
;	O
while	O
(	O
1	int
)	O
{	O
po	pointer
->	O
po_cur	pointer
=	O
po	pointer
->	O
po_argv	pointer
[	O
po	pointer
->	O
po_ind	int
++	O
]	O
;	O
if	O
(	O
!	O
po	pointer
->	O
po_cur	pointer
)	O
return	O
1	int
;	O
if	O
(	O
po	pointer
->	O
po_cur	pointer
[	O
0	int
]	O
==	O
'-'	O
&&	O
po	pointer
->	O
po_cur	pointer
[	O
1	int
]	O
)	O
{	O
if	O
(	O
*	O
++	O
po	pointer
->	O
po_cur	pointer
==	O
'-'	O
)	O
{	O
if	O
(	O
*	O
++	O
po	pointer
->	O
po_cur	pointer
==	O
0	int
)	O
{	O
permute	function
(	O
po	pointer
)	O
;	O
++	O
po	pointer
->	O
po_ind	int
;	O
return	O
1	int
;	O
}	O
if	O
(	O
po	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_SINGLE_DASH	int
)	O
;	O
else	O
{	O
po	pointer
->	O
po_chr	int
=	O
0	int
;	O
return	O
0	int
;	O
}	O
}	O
else	O
if	O
(	O
po	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_SINGLE_DASH	int
)	O
{	O
po	pointer
->	O
po_chr	int
=	O
0	int
;	O
return	O
0	int
;	O
}	O
else	O
break	O
;	O
}	O
if	O
(	O
!	O
(	O
po	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_IN_ORDER	int
)	O
)	O
{	O
if	O
(	O
!	O
po	pointer
->	O
po_permuted	int
&&	O
po	pointer
->	O
po_arg_count	int
==	O
0	int
)	O
po	pointer
->	O
po_arg_start	int
=	O
po	pointer
->	O
po_ind	int
-	O
1	int
;	O
po	pointer
->	O
po_arg_count	int
++	O
;	O
continue	O
;	O
}	O
else	O
return	O
1	int
;	O
}	O
}	O
po	pointer
->	O
po_chr	int
=	O
*	O
po	pointer
->	O
po_cur	pointer
++	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
parse	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
)	O
{	O
int	O
rc	int
;	O
rc	int
=	O
mu_list_create	function
(	O
&	O
po	pointer
->	O
po_optlist	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_list_set_destroy_item	function
(	O
po	pointer
->	O
po_optlist	pointer
,	O
mu_option_cache_destroy	function
)	O
;	O
po	pointer
->	O
po_ind	int
=	O
0	int
;	O
if	O
(	O
!	O
(	O
po	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_ARGV0	int
)	O
)	O
{	O
po	pointer
->	O
po_ind	int
++	O
;	O
if	O
(	O
!	O
(	O
po	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_PROG_NAME	int
)	O
)	O
{	O
char	O
*	O
p	pointer
=	O
strrchr	function
(	O
po	pointer
->	O
po_argv	pointer
[	O
0	int
]	O
,	O
'/'	O
)	O
;	O
if	O
(	O
p	pointer
)	O
p	pointer
++	O
;	O
else	O
p	pointer
=	O
(	O
char	O
*	O
)	O
po	pointer
->	O
po_argv	pointer
[	O
0	int
]	O
;	O
if	O
(	O
strlen	function
(	O
p	pointer
)	O
>	O
3	int
&&	O
memcmp	function
(	O
p	pointer
,	O
"lt-"	pointer
,	O
3	int
)	O
==	O
0	int
)	O
p	pointer
+=	O
3	int
;	O
po	pointer
->	O
po_prog_name	pointer
=	O
p	pointer
;	O
}	O
}	O
else	O
if	O
(	O
!	O
(	O
po	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_PROG_NAME	int
)	O
)	O
po	pointer
->	O
po_prog_name	pointer
=	O
NULL	O
;	O
po	pointer
->	O
po_arg_start	int
=	O
po	pointer
->	O
po_ind	int
;	O
po	pointer
->	O
po_arg_count	int
=	O
0	int
;	O
po	pointer
->	O
po_permuted	int
=	O
0	int
;	O
po	pointer
->	O
po_cur	pointer
=	O
""	pointer
;	O
po	pointer
->	O
po_opterr	int
=	O
-	O
1	int
;	O
while	O
(	O
next_opt	function
(	O
po	pointer
)	O
==	O
0	int
)	O
{	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
*	O
uopt	pointer
;	O
char	O
*	O
value	pointer
;	O
if	O
(	O
po	pointer
->	O
po_chr	int
)	O
{	O
opt	pointer
=	O
find_short_option	function
(	O
po	pointer
,	O
po	pointer
->	O
po_chr	int
)	O
;	O
uopt	pointer
=	O
NULL	O
;	O
value	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
opt	pointer
=	O
find_long_option	function
(	O
po	pointer
,	O
po	pointer
->	O
po_cur	pointer
,	O
&	O
uopt	pointer
,	O
&	O
po	pointer
->	O
po_cur	pointer
,	O
&	O
value	pointer
)	O
;	O
}	O
if	O
(	O
opt	pointer
)	O
{	O
char	O
*	O
arg	pointer
=	O
NULL	O
;	O
if	O
(	O
opt	pointer
->	O
opt_arg	pointer
)	O
{	O
if	O
(	O
po	pointer
->	O
po_cur	pointer
[	O
0	int
]	O
)	O
{	O
arg	pointer
=	O
po	pointer
->	O
po_cur	pointer
;	O
po	pointer
->	O
po_cur	pointer
=	O
""	pointer
;	O
}	O
else	O
if	O
(	O
opt	pointer
->	O
opt_flags	int
&	O
MU_OPTION_ARG_OPTIONAL	int
)	O
;	O
else	O
if	O
(	O
po	pointer
->	O
po_ind	int
<	O
po	pointer
->	O
po_argc	int
)	O
arg	pointer
=	O
po	pointer
->	O
po_argv	pointer
[	O
po	pointer
->	O
po_ind	int
++	O
]	O
;	O
else	O
{	O
if	O
(	O
uopt	pointer
)	O
mu_parseopt_error	function
(	O
po	pointer
,	O
_	O
(	O
"option '%s%s' requires an argument"	pointer
)	O
,	O
po	pointer
->	O
po_long_opt_start	pointer
,	O
uopt	pointer
->	O
opt_long	pointer
)	O
;	O
else	O
mu_parseopt_error	function
(	O
po	pointer
,	O
_	O
(	O
"option '-%c' requires an argument"	pointer
)	O
,	O
po	pointer
->	O
po_chr	int
)	O
;	O
po	pointer
->	O
po_opterr	int
=	O
po	pointer
->	O
po_ind	int
;	O
if	O
(	O
po	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_NO_ERREXIT	int
)	O
{	O
if	O
(	O
!	O
(	O
po	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_IN_ORDER	int
)	O
)	O
po	pointer
->	O
po_arg_count	int
++	O
;	O
continue	O
;	O
}	O
exit	function
(	O
po	pointer
->	O
po_exit_error	int
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
uopt	pointer
&&	O
po	pointer
->	O
po_cur	pointer
[	O
0	int
]	O
&&	O
!	O
(	O
po	pointer
->	O
po_flags	int
&	O
MU_OPTION_ARG_OPTIONAL	int
)	O
)	O
{	O
mu_parseopt_error	function
(	O
po	pointer
,	O
_	O
(	O
"option '%s%s' doesn't allow an argument"	pointer
)	O
,	O
po	pointer
->	O
po_long_opt_start	pointer
,	O
uopt	pointer
->	O
opt_long	pointer
)	O
;	O
po	pointer
->	O
po_opterr	int
=	O
po	pointer
->	O
po_ind	int
;	O
if	O
(	O
po	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_NO_ERREXIT	int
)	O
{	O
if	O
(	O
!	O
(	O
po	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_IN_ORDER	int
)	O
)	O
po	pointer
->	O
po_arg_count	int
++	O
;	O
continue	O
;	O
}	O
exit	function
(	O
po	pointer
->	O
po_exit_error	int
)	O
;	O
}	O
arg	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
!	O
arg	pointer
&&	O
value	pointer
)	O
arg	pointer
=	O
value	pointer
;	O
add_option_cache	function
(	O
po	pointer
,	O
opt	pointer
,	O
arg	pointer
)	O
;	O
}	O
else	O
{	O
po	pointer
->	O
po_opterr	int
=	O
po	pointer
->	O
po_ind	int
;	O
if	O
(	O
po	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_NO_ERREXIT	int
)	O
{	O
if	O
(	O
!	O
(	O
po	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_IN_ORDER	int
)	O
)	O
po	pointer
->	O
po_arg_count	int
++	O
;	O
continue	O
;	O
}	O
exit	function
(	O
po	pointer
->	O
po_exit_error	int
)	O
;	O
}	O
}	O
if	O
(	O
!	O
po	pointer
->	O
po_permuted	int
)	O
po	pointer
->	O
po_arg_start	int
=	O
po	pointer
->	O
po_ind	int
-	O
1	int
-	O
po	pointer
->	O
po_arg_count	int
;	O
return	O
0	int
;	O
}	O
static	O
void	O
sort_longidx	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
)	O
{	O
size_t	long
i	long
,	O
j	long
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
po	pointer
->	O
po_longcnt	long
;	O
i	long
++	O
)	O
{	O
for	O
(	O
j	long
=	O
i	long
;	O
j	long
>	O
0	int
&&	O
strcmp	function
(	O
LONGOPT	O
(	O
po	pointer
,	O
j	long
-	O
1	int
)	O
,	O
LONGOPT	O
(	O
po	pointer
,	O
j	long
)	O
)	O
>	O
0	int
;	O
j	long
--	O
)	O
{	O
size_t	long
tmp	pointer
=	O
po	pointer
->	O
po_longidx	pointer
[	O
j	long
]	O
;	O
po	pointer
->	O
po_longidx	pointer
[	O
j	long
]	O
=	O
po	pointer
->	O
po_longidx	pointer
[	O
j	long
-	O
1	int
]	O
;	O
po	pointer
->	O
po_longidx	pointer
[	O
j	long
-	O
1	int
]	O
=	O
tmp	pointer
;	O
}	O
}	O
}	O
static	O
int	O
parseopt_init	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
*	O
options	pointer
,	O
int	O
flags	int
)	O
{	O
struct	O
mu_option	struct
*	O
opt	pointer
;	O
size_t	long
i	long
,	O
j	long
;	O
po	pointer
->	O
po_argc	int
=	O
0	int
;	O
po	pointer
->	O
po_argv	pointer
=	O
NULL	O
;	O
po	pointer
->	O
po_optc	long
=	O
0	int
;	O
po	pointer
->	O
po_flags	int
=	O
flags	int
;	O
if	O
(	O
flags	int
&	O
MU_PARSEOPT_IGNORE_ERRORS	int
)	O
flags	int
|=	O
MU_PARSEOPT_NO_ERREXIT	int
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
MU_PARSEOPT_PROG_DOC	int
)	O
)	O
po	pointer
->	O
po_prog_doc	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
MU_PARSEOPT_PROG_ARGS	int
)	O
)	O
po	pointer
->	O
po_prog_args	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
MU_PARSEOPT_SPECIAL_ARGS	int
)	O
)	O
po	pointer
->	O
po_special_args	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
MU_PARSEOPT_BUG_ADDRESS	int
)	O
)	O
po	pointer
->	O
po_bug_address	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
MU_PARSEOPT_PACKAGE_NAME	int
)	O
)	O
po	pointer
->	O
po_package_name	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
MU_PARSEOPT_PACKAGE_URL	int
)	O
)	O
po	pointer
->	O
po_package_url	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
MU_PARSEOPT_PACKAGE_URL	int
)	O
)	O
po	pointer
->	O
po_data	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
MU_PARSEOPT_EXTRA_INFO	int
)	O
)	O
po	pointer
->	O
po_extra_info	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
MU_PARSEOPT_HELP_HOOK	int
)	O
)	O
po	pointer
->	O
po_help_hook	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
MU_PARSEOPT_EXIT_ERROR	int
)	O
)	O
po	pointer
->	O
po_exit_error	int
=	O
EXIT_ERROR	int
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
MU_PARSEOPT_VERSION_HOOK	int
)	O
)	O
po	pointer
->	O
po_version_hook	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
MU_PARSEOPT_PROG_DOC_HOOK	int
)	O
)	O
po	pointer
->	O
po_prog_doc_hook	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
MU_PARSEOPT_NEGATION	int
)	O
)	O
po	pointer
->	O
po_negation	pointer
=	O
NULL	O
;	O
if	O
(	O
flags	int
&	O
MU_PARSEOPT_SINGLE_DASH	int
)	O
po	pointer
->	O
po_long_opt_start	pointer
=	O
"-"	pointer
;	O
else	O
po	pointer
->	O
po_long_opt_start	pointer
=	O
"--"	pointer
;	O
po	pointer
->	O
po_optc	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
options	pointer
[	O
i	long
]	O
;	O
i	long
++	O
)	O
for	O
(	O
opt	pointer
=	O
options	pointer
[	O
i	long
]	O
;	O
!	O
MU_OPTION_IS_END	O
(	O
opt	pointer
)	O
;	O
opt	pointer
++	O
)	O
++	O
po	pointer
->	O
po_optc	long
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
MU_PARSEOPT_NO_STDOPT	int
)	O
)	O
for	O
(	O
i	long
=	O
0	int
;	O
!	O
MU_OPTION_IS_END	O
(	O
&	O
mu_default_options	array
[	O
i	long
]	O
)	O
;	O
i	long
++	O
)	O
++	O
po	pointer
->	O
po_optc	long
;	O
if	O
(	O
flags	int
&	O
MU_PARSEOPT_VERSION_HOOK	int
)	O
for	O
(	O
i	long
=	O
0	int
;	O
!	O
MU_OPTION_IS_END	O
(	O
&	O
mu_version_options	array
[	O
i	long
]	O
)	O
;	O
i	long
++	O
)	O
++	O
po	pointer
->	O
po_optc	long
;	O
po	pointer
->	O
po_optv	pointer
=	O
mu_calloc	function
(	O
po	pointer
->	O
po_optc	long
+	O
1	int
,	O
sizeof	O
(	O
*	O
po	pointer
->	O
po_optv	pointer
)	O
)	O
;	O
if	O
(	O
!	O
po	pointer
->	O
po_optv	pointer
)	O
return	O
-	O
1	int
;	O
j	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
options	pointer
[	O
i	long
]	O
;	O
i	long
++	O
)	O
for	O
(	O
opt	pointer
=	O
options	pointer
[	O
i	long
]	O
;	O
!	O
MU_OPTION_IS_END	O
(	O
opt	pointer
)	O
;	O
opt	pointer
++	O
,	O
j	long
++	O
)	O
{	O
if	O
(	O
!	O
opt	pointer
->	O
opt_set	pointer
)	O
opt	pointer
->	O
opt_set	pointer
=	O
mu_option_set_value	function
;	O
po	pointer
->	O
po_optv	pointer
[	O
j	long
]	O
=	O
opt	pointer
;	O
}	O
if	O
(	O
!	O
(	O
flags	int
&	O
MU_PARSEOPT_NO_STDOPT	int
)	O
)	O
for	O
(	O
i	long
=	O
0	int
;	O
!	O
MU_OPTION_IS_END	O
(	O
&	O
mu_default_options	array
[	O
i	long
]	O
)	O
;	O
i	long
++	O
,	O
j	long
++	O
)	O
po	pointer
->	O
po_optv	pointer
[	O
j	long
]	O
=	O
&	O
mu_default_options	array
[	O
i	long
]	O
;	O
if	O
(	O
flags	int
&	O
MU_PARSEOPT_VERSION_HOOK	int
)	O
for	O
(	O
i	long
=	O
0	int
;	O
!	O
MU_OPTION_IS_END	O
(	O
&	O
mu_version_options	array
[	O
i	long
]	O
)	O
;	O
i	long
++	O
,	O
j	long
++	O
)	O
po	pointer
->	O
po_optv	pointer
[	O
j	long
]	O
=	O
&	O
mu_version_options	array
[	O
i	long
]	O
;	O
po	pointer
->	O
po_optv	pointer
[	O
j	long
]	O
=	O
NULL	O
;	O
po	pointer
->	O
po_optv	pointer
[	O
0	int
]	O
->	O
opt_flags	int
&=	O
~	O
MU_OPTION_ALIAS	int
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
MU_PARSEOPT_NO_SORT	int
)	O
)	O
{	O
size_t	long
start	long
;	O
for	O
(	O
start	long
=	O
0	int
;	O
start	long
<	O
po	pointer
->	O
po_optc	long
;	O
)	O
{	O
if	O
(	O
MU_OPTION_IS_GROUP_HEADER	O
(	O
po	pointer
->	O
po_optv	pointer
[	O
start	long
]	O
)	O
)	O
start	long
=	O
sort_group	function
(	O
po	pointer
->	O
po_optv	pointer
,	O
start	long
+	O
1	int
)	O
;	O
else	O
start	long
=	O
sort_group	function
(	O
po	pointer
->	O
po_optv	pointer
,	O
start	long
)	O
;	O
}	O
}	O
j	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
po	pointer
->	O
po_optc	long
;	O
i	long
++	O
)	O
if	O
(	O
MU_OPTION_IS_VALID_LONG_OPTION	O
(	O
po	pointer
->	O
po_optv	pointer
[	O
i	long
]	O
)	O
)	O
j	long
++	O
;	O
po	pointer
->	O
po_longcnt	long
=	O
j	long
;	O
po	pointer
->	O
po_longidx	pointer
=	O
mu_calloc	function
(	O
j	long
+	O
1	int
,	O
sizeof	O
(	O
po	pointer
->	O
po_longidx	pointer
[	O
0	int
]	O
)	O
)	O
;	O
j	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
po	pointer
->	O
po_optc	long
;	O
i	long
++	O
)	O
if	O
(	O
MU_OPTION_IS_VALID_LONG_OPTION	O
(	O
po	pointer
->	O
po_optv	pointer
[	O
i	long
]	O
)	O
)	O
po	pointer
->	O
po_longidx	pointer
[	O
j	long
++	O
]	O
=	O
i	long
;	O
sort_longidx	function
(	O
po	pointer
)	O
;	O
po	pointer
->	O
po_ind	int
=	O
0	int
;	O
po	pointer
->	O
po_opterr	int
=	O
0	int
;	O
po	pointer
->	O
po_optlist	pointer
=	O
NULL	O
;	O
po	pointer
->	O
po_cur	pointer
=	O
NULL	O
;	O
po	pointer
->	O
po_chr	int
=	O
0	int
;	O
po	pointer
->	O
po_arg_start	int
=	O
0	int
;	O
po	pointer
->	O
po_arg_count	int
=	O
0	int
;	O
po	pointer
->	O
po_permuted	int
=	O
0	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_parseopt	struct
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
struct	O
mu_option	struct
*	O
*	O
options	pointer
,	O
int	O
flags	int
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
flags	int
&	O
MU_PARSEOPT_REUSE	int
)	O
{	O
mu_list_clear	function
(	O
po	pointer
->	O
po_optlist	pointer
)	O
;	O
po	pointer
->	O
po_flags	int
=	O
(	O
po	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_IMMUTABLE_MASK	int
)	O
|	O
(	O
flags	int
&	O
~	O
MU_PARSEOPT_IMMUTABLE_MASK	int
)	O
;	O
}	O
else	O
{	O
rc	int
=	O
parseopt_init	function
(	O
po	pointer
,	O
options	pointer
,	O
flags	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
po	pointer
->	O
po_argc	int
=	O
argc	int
;	O
po	pointer
->	O
po_argv	pointer
=	O
argv	pointer
;	O
rc	int
=	O
parse	function
(	O
po	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
po	pointer
->	O
po_opterr	int
>=	O
0	int
)	O
rc	int
=	O
-	O
1	int
;	O
else	O
{	O
if	O
(	O
po	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_IMMEDIATE	int
)	O
rc	int
=	O
mu_parseopt_apply	function
(	O
po	pointer
)	O
;	O
}	O
}	O
return	O
rc	int
;	O
}	O
void	O
mu_parseopt_free	function
(	O
struct	O
mu_parseopt	struct
*	O
popt	pointer
)	O
{	O
free	function
(	O
popt	pointer
->	O
po_optv	pointer
)	O
;	O
free	function
(	O
popt	pointer
->	O
po_longidx	pointer
)	O
;	O
mu_list_destroy	function
(	O
&	O
popt	pointer
->	O
po_optlist	pointer
)	O
;	O
}	O
static	O
int	O
parseopt_apply	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
mu_option_cache	struct
*	O
cp	pointer
=	O
item	pointer
;	O
struct	O
mu_parseopt	struct
*	O
popt	pointer
=	O
data	pointer
;	O
cp	pointer
->	O
cache_opt	pointer
->	O
opt_set	pointer
(	O
popt	pointer
,	O
cp	pointer
->	O
cache_opt	pointer
,	O
cp	pointer
->	O
cache_arg	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_parseopt_apply	function
(	O
struct	O
mu_parseopt	struct
*	O
popt	pointer
)	O
{	O
return	O
mu_list_foreach	function
(	O
popt	pointer
->	O
po_optlist	pointer
,	O
parseopt_apply	function
,	O
popt	pointer
)	O
;	O
}	O
void	O
mu_option_set_value	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
if	O
(	O
opt	pointer
->	O
opt_ptr	pointer
)	O
{	O
char	O
*	O
errmsg	pointer
;	O
int	O
rc	int
;	O
if	O
(	O
arg	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
opt	pointer
->	O
opt_default	pointer
)	O
arg	pointer
=	O
opt	pointer
->	O
opt_default	pointer
;	O
else	O
if	O
(	O
opt	pointer
->	O
opt_arg	pointer
==	O
NULL	O
)	O
arg	pointer
=	O
"1"	pointer
;	O
else	O
{	O
*	O
(	O
void	O
*	O
*	O
)	O
opt	pointer
->	O
opt_ptr	pointer
=	O
NULL	O
;	O
return	O
;	O
}	O
}	O
rc	int
=	O
mu_str_to_c	function
(	O
arg	pointer
,	O
opt	pointer
->	O
opt_type	enum
,	O
opt	pointer
->	O
opt_ptr	pointer
,	O
&	O
errmsg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
char	O
const	O
*	O
errtext	pointer
;	O
if	O
(	O
errmsg	pointer
)	O
errtext	pointer
=	O
errmsg	pointer
;	O
else	O
errtext	pointer
=	O
mu_strerror	function
(	O
rc	int
)	O
;	O
if	O
(	O
opt	pointer
->	O
opt_long	pointer
)	O
mu_parseopt_error	function
(	O
po	pointer
,	O
"%s%s: %s"	pointer
,	O
po	pointer
->	O
po_long_opt_start	pointer
,	O
opt	pointer
->	O
opt_long	pointer
,	O
errtext	pointer
)	O
;	O
else	O
mu_parseopt_error	function
(	O
po	pointer
,	O
"-%c: %s"	pointer
,	O
opt	pointer
->	O
opt_short	int
,	O
errtext	pointer
)	O
;	O
free	function
(	O
errmsg	pointer
)	O
;	O
if	O
(	O
!	O
(	O
po	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_NO_ERREXIT	int
)	O
)	O
exit	function
(	O
po	pointer
->	O
po_exit_error	int
)	O
;	O
}	O
}	O
}	O
int	O
mu_option_possible_negation	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
)	O
{	O
return	O
po	pointer
->	O
po_negation	pointer
&&	O
opt	pointer
->	O
opt_type	enum
==	O
mu_c_bool	int
&&	O
!	O
opt	pointer
->	O
opt_arg	pointer
;	O
}	O
