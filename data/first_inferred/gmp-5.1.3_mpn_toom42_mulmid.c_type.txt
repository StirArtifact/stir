void	O
mpn_toom42_mulmid	O
(	O
mp_ptr	pointer
rp	pointer
,	O
mp_srcptr	pointer
ap	pointer
,	O
mp_srcptr	pointer
bp	pointer
,	O
mp_size_t	long
n	long
,	O
mp_ptr	pointer
scratch	pointer
)	O
{	O
mp_limb_t	long
cy	long
,	O
e	array
[	O
12	int
]	O
,	O
zh	long
,	O
zl	long
;	O
mp_size_t	long
m	long
;	O
int	O
neg	int
;	O
ASSERT	O
(	O
n	long
>=	O
4	int
)	O
;	O
ASSERT	O
(	O
!	O
MPN_OVERLAP_P	O
(	O
rp	pointer
,	O
n	long
+	O
2	int
,	O
ap	pointer
,	O
2	int
*	O
n	long
-	O
1	int
)	O
)	O
;	O
ASSERT	O
(	O
!	O
MPN_OVERLAP_P	O
(	O
rp	pointer
,	O
n	long
+	O
2	int
,	O
bp	pointer
,	O
n	long
)	O
)	O
;	O
ap	pointer
+=	O
n	long
&	O
1	int
;	O
m	long
=	O
n	long
/	O
2	int
;	O
cy	long
=	O
mpn_add_err1_n	O
(	O
s	array
,	O
ap	pointer
,	O
ap	pointer
+	O
m	long
,	O
&	O
e0l	O
,	O
bp	pointer
+	O
m	long
,	O
m	long
-	O
1	int
,	O
0	int
)	O
;	O
cy	long
=	O
mpn_add_err2_n	O
(	O
s	array
+	O
m	long
-	O
1	int
,	O
ap	pointer
+	O
m	long
-	O
1	int
,	O
ap	pointer
+	O
2	int
*	O
m	long
-	O
1	int
,	O
&	O
e1l	O
,	O
bp	pointer
+	O
m	long
,	O
bp	pointer
,	O
m	long
,	O
cy	long
)	O
;	O
mpn_add_err1_n	O
(	O
s	array
+	O
2	int
*	O
m	long
-	O
1	int
,	O
ap	pointer
+	O
2	int
*	O
m	long
-	O
1	int
,	O
ap	pointer
+	O
3	int
*	O
m	long
-	O
1	int
,	O
&	O
e3l	O
,	O
bp	pointer
,	O
m	long
,	O
cy	long
)	O
;	O
if	O
(	O
mpn_cmp	O
(	O
bp	pointer
+	O
m	long
,	O
bp	pointer
,	O
m	long
)	O
<	O
0	int
)	O
{	O
ASSERT_NOCARRY	O
(	O
mpn_sub_err2_n	O
(	O
t	O
,	O
bp	pointer
,	O
bp	pointer
+	O
m	long
,	O
&	O
e4l	O
,	O
ap	pointer
+	O
m	long
-	O
1	int
,	O
ap	pointer
+	O
2	int
*	O
m	long
-	O
1	int
,	O
m	long
,	O
0	int
)	O
)	O
;	O
neg	int
=	O
1	int
;	O
}	O
else	O
{	O
ASSERT_NOCARRY	O
(	O
mpn_sub_err2_n	O
(	O
t	O
,	O
bp	pointer
+	O
m	long
,	O
bp	pointer
,	O
&	O
e4l	O
,	O
ap	pointer
+	O
m	long
-	O
1	int
,	O
ap	pointer
+	O
2	int
*	O
m	long
-	O
1	int
,	O
m	long
,	O
0	int
)	O
)	O
;	O
neg	int
=	O
0	int
;	O
}	O
if	O
(	O
m	long
<	O
MULMID_TOOM42_THRESHOLD	int
)	O
{	O
mpn_mulmid_basecase	O
(	O
p0	O
,	O
s	array
,	O
2	int
*	O
m	long
-	O
1	int
,	O
bp	pointer
+	O
m	long
,	O
m	long
)	O
;	O
ADDC_LIMB	O
(	O
cy	long
,	O
e1l	O
,	O
e1l	O
,	O
p0	O
[	O
m	long
]	O
)	O
;	O
e1h	O
+=	O
p0	O
[	O
m	long
+	O
1	int
]	O
+	O
cy	long
;	O
mpn_mulmid_basecase	O
(	O
p1	O
,	O
ap	pointer
+	O
m	long
,	O
2	int
*	O
m	long
-	O
1	int
,	O
t	O
,	O
m	long
)	O
;	O
mpn_mulmid_basecase	O
(	O
p2	O
,	O
s	array
+	O
m	long
,	O
2	int
*	O
m	long
-	O
1	int
,	O
bp	pointer
,	O
m	long
)	O
;	O
}	O
else	O
{	O
mpn_toom42_mulmid	O
(	O
p0	O
,	O
s	array
,	O
bp	pointer
+	O
m	long
,	O
m	long
,	O
next_scratch	O
)	O
;	O
ADDC_LIMB	O
(	O
cy	long
,	O
e1l	O
,	O
e1l	O
,	O
p0	O
[	O
m	long
]	O
)	O
;	O
e1h	O
+=	O
p0	O
[	O
m	long
+	O
1	int
]	O
+	O
cy	long
;	O
mpn_toom42_mulmid	O
(	O
p1	O
,	O
ap	pointer
+	O
m	long
,	O
t	O
,	O
m	long
,	O
next_scratch	O
)	O
;	O
mpn_toom42_mulmid	O
(	O
p2	O
,	O
s	array
+	O
m	long
,	O
bp	pointer
,	O
m	long
,	O
next_scratch	O
)	O
;	O
}	O
SUBC_LIMB	O
(	O
cy	long
,	O
rp	pointer
[	O
0	int
]	O
,	O
rp	pointer
[	O
0	int
]	O
,	O
e0l	O
)	O
;	O
SUBC_LIMB	O
(	O
cy	long
,	O
rp	pointer
[	O
1	int
]	O
,	O
rp	pointer
[	O
1	int
]	O
,	O
e0h	O
+	O
cy	long
)	O
;	O
if	O
(	O
UNLIKELY	O
(	O
cy	long
)	O
)	O
{	O
cy	long
=	O
(	O
m	long
>	O
2	int
)	O
?	O
mpn_sub_1	O
(	O
rp	pointer
+	O
2	int
,	O
rp	pointer
+	O
2	int
,	O
m	long
-	O
2	int
,	O
1	int
)	O
:	O
1	int
;	O
SUBC_LIMB	O
(	O
cy	long
,	O
e1l	O
,	O
e1l	O
,	O
cy	long
)	O
;	O
e1h	O
-=	O
cy	long
;	O
}	O
SUBC_LIMB	O
(	O
cy	long
,	O
zl	long
,	O
e1l	O
,	O
e2l	O
)	O
;	O
zh	long
=	O
e1h	O
-	O
e2h	O
-	O
cy	long
;	O
ADDC_LIMB	O
(	O
cy	long
,	O
rp	pointer
[	O
m	long
]	O
,	O
rp	pointer
[	O
m	long
]	O
,	O
zl	long
)	O
;	O
zh	long
=	O
(	O
zh	long
+	O
cy	long
)	O
&	O
GMP_NUMB_MASK	O
;	O
ADDC_LIMB	O
(	O
cy	long
,	O
rp	pointer
[	O
m	long
+	O
1	int
]	O
,	O
rp	pointer
[	O
m	long
+	O
1	int
]	O
,	O
zh	long
)	O
;	O
cy	long
-=	O
(	O
zh	long
>>	O
(	O
GMP_NUMB_BITS	O
-	O
1	int
)	O
)	O
;	O
if	O
(	O
UNLIKELY	O
(	O
cy	long
)	O
)	O
{	O
if	O
(	O
cy	long
==	O
1	int
)	O
mpn_add_1	O
(	O
rp	pointer
+	O
m	long
+	O
2	int
,	O
rp	pointer
+	O
m	long
+	O
2	int
,	O
m	long
,	O
1	int
)	O
;	O
else	O
mpn_sub_1	O
(	O
rp	pointer
+	O
m	long
+	O
2	int
,	O
rp	pointer
+	O
m	long
+	O
2	int
,	O
m	long
,	O
1	int
)	O
;	O
}	O
ADDC_LIMB	O
(	O
cy	long
,	O
rp	pointer
[	O
2	int
*	O
m	long
]	O
,	O
rp	pointer
[	O
2	int
*	O
m	long
]	O
,	O
e3l	O
)	O
;	O
rp	pointer
[	O
2	int
*	O
m	long
+	O
1	int
]	O
=	O
(	O
rp	pointer
[	O
2	int
*	O
m	long
+	O
1	int
]	O
+	O
e3h	O
+	O
cy	long
)	O
&	O
GMP_NUMB_MASK	O
;	O
ADDC_LIMB	O
(	O
cy	long
,	O
p1	O
[	O
0	int
]	O
,	O
p1	O
[	O
0	int
]	O
,	O
e4l	O
)	O
;	O
ADDC_LIMB	O
(	O
cy	long
,	O
p1	O
[	O
1	int
]	O
,	O
p1	O
[	O
1	int
]	O
,	O
e4h	O
+	O
cy	long
)	O
;	O
if	O
(	O
UNLIKELY	O
(	O
cy	long
)	O
)	O
mpn_add_1	O
(	O
p1	O
+	O
2	int
,	O
p1	O
+	O
2	int
,	O
m	long
,	O
1	int
)	O
;	O
SUBC_LIMB	O
(	O
cy	long
,	O
p1	O
[	O
m	long
]	O
,	O
p1	O
[	O
m	long
]	O
,	O
e5l	O
)	O
;	O
p1	O
[	O
m	long
+	O
1	int
]	O
=	O
(	O
p1	O
[	O
m	long
+	O
1	int
]	O
-	O
e5h	O
-	O
cy	long
)	O
&	O
GMP_NUMB_MASK	O
;	O
cy	long
=	O
(	O
p1	O
[	O
m	long
+	O
1	int
]	O
>>	O
(	O
GMP_NUMB_BITS	O
-	O
1	int
)	O
)	O
;	O
if	O
(	O
neg	int
)	O
{	O
mpn_sub_1	O
(	O
rp	pointer
+	O
m	long
+	O
2	int
,	O
rp	pointer
+	O
m	long
+	O
2	int
,	O
m	long
,	O
cy	long
)	O
;	O
mpn_add	O
(	O
rp	pointer
,	O
rp	pointer
,	O
2	int
*	O
m	long
+	O
2	int
,	O
p1	O
,	O
m	long
+	O
2	int
)	O
;	O
mpn_sub_n	O
(	O
rp	pointer
+	O
m	long
,	O
rp	pointer
+	O
m	long
,	O
p1	O
,	O
m	long
+	O
2	int
)	O
;	O
}	O
else	O
{	O
mpn_add_1	O
(	O
rp	pointer
+	O
m	long
+	O
2	int
,	O
rp	pointer
+	O
m	long
+	O
2	int
,	O
m	long
,	O
cy	long
)	O
;	O
mpn_sub	O
(	O
rp	pointer
,	O
rp	pointer
,	O
2	int
*	O
m	long
+	O
2	int
,	O
p1	O
,	O
m	long
+	O
2	int
)	O
;	O
mpn_add_n	O
(	O
rp	pointer
+	O
m	long
,	O
rp	pointer
+	O
m	long
,	O
p1	O
,	O
m	long
+	O
2	int
)	O
;	O
}	O
if	O
(	O
n	long
&	O
1	int
)	O
{	O
cy	long
=	O
mpn_addmul_1	O
(	O
rp	pointer
,	O
ap	pointer
-	O
1	int
,	O
n	long
,	O
bp	pointer
[	O
n	long
-	O
1	int
]	O
)	O
;	O
ADDC_LIMB	O
(	O
rp	pointer
[	O
n	long
+	O
1	int
]	O
,	O
rp	pointer
[	O
n	long
]	O
,	O
rp	pointer
[	O
n	long
]	O
,	O
cy	long
)	O
;	O
mpn_mulmid_basecase	O
(	O
e	array
,	O
ap	pointer
+	O
n	long
-	O
1	int
,	O
n	long
-	O
1	int
,	O
bp	pointer
,	O
n	long
-	O
1	int
)	O
;	O
mpn_add_n	O
(	O
rp	pointer
+	O
n	long
-	O
1	int
,	O
rp	pointer
+	O
n	long
-	O
1	int
,	O
e	array
,	O
3	int
)	O
;	O
}	O
}	O
