static	O
struct	O
new_cpio_header	struct
*	O
file_hdr_copy	function
(	O
struct	O
new_cpio_header	struct
*	O
dst	pointer
,	O
struct	O
new_cpio_header	struct
*	O
src	pointer
)	O
;	O
static	O
void	O
delete_trio	function
(	O
struct	O
new_cpio_header	struct
*	O
f1	pointer
,	O
struct	O
new_cpio_header	struct
*	O
f2	pointer
,	O
struct	O
new_cpio_header	struct
*	O
f3	pointer
)	O
{	O
ahsStaticDeleteFilehdr	function
(	O
f1	pointer
)	O
;	O
ahsStaticDeleteFilehdr	function
(	O
f2	pointer
)	O
;	O
ahsStaticDeleteFilehdr	function
(	O
f3	pointer
)	O
;	O
}	O
int	O
taru_process_copy_in	function
(	O
TARU	struct
*	O
fp_taru	pointer
,	O
int	O
i_fd	int
,	O
int	O
output_fd	int
)	O
{	O
char	O
done	char
=	O
FALSE	int
;	O
char	O
magbuf	array
[	O
10	int
]	O
;	O
char	O
done_links	char
=	O
FALSE	int
;	O
struct	O
utimbuf	struct
times	struct
;	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
=	O
ahsStaticCreateFilehdr	function
(	O
)	O
;	O
struct	O
new_cpio_header	struct
*	O
file_hdr_links	pointer
=	O
ahsStaticCreateFilehdr	function
(	O
)	O
;	O
struct	O
new_cpio_header	struct
*	O
file_hdr_links_last	pointer
=	O
ahsStaticCreateFilehdr	function
(	O
)	O
;	O
int	O
input_fd	int
;	O
int	O
found_data	int
;	O
char	O
skip_file	char
;	O
int	O
existing_dir	int
;	O
char	O
*	O
link_name	pointer
=	O
NULL	O
;	O
UINFORMAT	struct
*	O
uinfile	pointer
;	O
int	O
convert_flags	int
=	O
0	int
;	O
char	O
zeros_512	array
[	O
512	int
]	O
;	O
enum	O
archive_format	enum
archive_format_in	enum
=	O
arf_unknown	int
;	O
HLLIST	struct
*	O
link_record	pointer
=	O
NULL	O
;	O
int	O
orig_offset	int
,	O
nfound	pointer
,	O
nmore	int
,	O
count	int
,	O
data_offset	int
,	O
data_size	int
=	O
-	O
1	int
;	O
dev_t	long
devno	long
;	O
hllist_entry	struct
*	O
link_record_buf	pointer
=	O
NULL	O
;	O
int	O
end_of_archive	int
=	O
0	int
;	O
TARU	struct
*	O
taru	pointer
;	O
if	O
(	O
fp_taru	pointer
==	O
NULL	O
)	O
{	O
taru	pointer
=	O
taru_create	function
(	O
)	O
;	O
}	O
else	O
{	O
taru	pointer
=	O
fp_taru	pointer
;	O
}	O
ahsStaticSetTarFilename	function
(	O
file_hdr	pointer
,	O
NULL	O
)	O
;	O
ahsStaticSetTarFilename	function
(	O
file_hdr_links	pointer
,	O
NULL	O
)	O
;	O
ahsStaticSetTarFilename	function
(	O
file_hdr_links_last	pointer
,	O
NULL	O
)	O
;	O
ahsStaticSetPaxLinkname	function
(	O
file_hdr	pointer
,	O
NULL	O
)	O
;	O
ahsStaticSetPaxLinkname	function
(	O
file_hdr_links	pointer
,	O
NULL	O
)	O
;	O
ahsStaticSetPaxLinkname	function
(	O
file_hdr_links_last	pointer
,	O
NULL	O
)	O
;	O
E_DEBUG2	O
(	O
"taru->taru_tarheaderflagsM=%d"	pointer
,	O
taru	pointer
->	O
taru_tarheaderflagsM	int
)	O
;	O
convert_flags	int
|=	O
UINFILE_DETECT_FORCEUNIXFD	O
;	O
convert_flags	int
|=	O
UINFILE_DETECT_NATIVE	O
;	O
memset	function
(	O
zeros_512	array
,	O
0x00	int
,	O
512	int
)	O
;	O
memset	function
(	O
&	O
times	struct
,	O
0x00	int
,	O
sizeof	O
(	O
struct	O
utimbuf	struct
)	O
)	O
;	O
if	O
(	O
(	O
input_fd	int
=	O
uinfile_opendup	function
(	O
i_fd	int
,	O
(	O
mode_t	int
)	O
(	O
0	int
)	O
,	O
&	O
uinfile	pointer
,	O
convert_flags	int
)	O
)	O
<	O
0	int
)	O
{	O
delete_trio	function
(	O
file_hdr	pointer
,	O
file_hdr_links	pointer
,	O
file_hdr_links_last	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
uxfio_fcntl	function
(	O
input_fd	int
,	O
UXFIO_F_SET_BUFACTIVE	O
,	O
0	int
)	O
;	O
switch	O
(	O
uinfile	pointer
->	O
typeM	int
)	O
{	O
case	O
CPIO_CRC_FILEFORMAT	int
:	O
archive_format_in	enum
=	O
arf_crcascii	int
;	O
break	O
;	O
case	O
CPIO_NEWC_FILEFORMAT	int
:	O
archive_format_in	enum
=	O
arf_newascii	int
;	O
break	O
;	O
case	O
CPIO_POSIX_FILEFORMAT	int
:	O
archive_format_in	enum
=	O
arf_oldascii	int
;	O
break	O
;	O
case	O
USTAR_FILEFORMAT	int
:	O
archive_format_in	enum
=	O
arf_ustar	int
;	O
break	O
;	O
default	O
:	O
ahsStaticDeleteFilehdr	function
(	O
file_hdr	pointer
)	O
;	O
ahsStaticDeleteFilehdr	function
(	O
file_hdr_links	pointer
)	O
;	O
ahsStaticDeleteFilehdr	function
(	O
file_hdr_links_last	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
archive_format_in	enum
!=	O
arf_ustar	int
)	O
{	O
link_record	pointer
=	O
hllist_open	function
(	O
)	O
;	O
}	O
while	O
(	O
!	O
done	char
)	O
{	O
ahsStaticSetTarFilename	function
(	O
file_hdr	pointer
,	O
NULL	O
)	O
;	O
link_name	pointer
=	O
NULL	O
;	O
if	O
(	O
taru_read_in_header	function
(	O
taru	pointer
,	O
file_hdr	pointer
,	O
input_fd	int
,	O
archive_format_in	enum
,	O
&	O
end_of_archive	int
,	O
0	int
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"error returned by taru_read_in_header\n"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
E_DEBUG2	O
(	O
"processing PATH [%s]"	pointer
,	O
ahsStaticGetTarFilename	function
(	O
file_hdr	pointer
)	O
)	O
;	O
E_DEBUG2	O
(	O
"processing with LINKPATH [%s]"	pointer
,	O
ahsStaticGetTarLinkname	function
(	O
file_hdr	pointer
)	O
)	O
;	O
if	O
(	O
strcmp	function
(	O
"TRAILER!!!"	pointer
,	O
ahsStaticGetTarFilename	function
(	O
file_hdr	pointer
)	O
)	O
==	O
0	int
)	O
{	O
done	char
=	O
TRUE	int
;	O
break	O
;	O
}	O
skip_file	char
=	O
FALSE	int
;	O
if	O
(	O
skip_file	char
)	O
{	O
exit	function
(	O
4	int
)	O
;	O
}	O
else	O
{	O
enum	O
archive_format	enum
archive_format_tar	enum
=	O
arf_ustar	int
;	O
existing_dir	int
=	O
FALSE	int
;	O
if	O
(	O
archive_format_in	enum
!=	O
arf_ustar	int
&&	O
archive_format_in	enum
!=	O
arf_tar	int
)	O
{	O
if	O
(	O
file_hdr	pointer
->	O
c_nlink	short
>	O
1	int
&&	O
(	O
(	O
(	O
file_hdr	pointer
->	O
c_mode	short
&	O
CP_IFMT	int
)	O
==	O
CP_IFREG	int
)	O
||	O
(	O
(	O
file_hdr	pointer
->	O
c_mode	short
&	O
CP_IFMT	int
)	O
==	O
CP_IFBLK	int
)	O
||	O
(	O
(	O
file_hdr	pointer
->	O
c_mode	short
&	O
CP_IFMT	int
)	O
==	O
CP_IFCHR	int
)	O
||	O
(	O
(	O
file_hdr	pointer
->	O
c_mode	short
&	O
CP_IFMT	int
)	O
==	O
CP_IFSOCK	int
)	O
)	O
)	O
{	O
hllist_add_record	function
(	O
link_record	pointer
,	O
ahsStaticGetTarFilename	function
(	O
file_hdr	pointer
)	O
,	O
devno	long
=	O
(	O
dev_t	long
)	O
makedev	O
(	O
file_hdr	pointer
->	O
c_dev_maj	long
,	O
file_hdr	pointer
->	O
c_dev_min	long
)	O
,	O
file_hdr	pointer
->	O
c_ino	short
)	O
;	O
if	O
(	O
input_fd	int
<	O
UXFIO_FD_MIN	int
)	O
{	O
if	O
(	O
(	O
input_fd	int
=	O
uxfio_opendup	function
(	O
input_fd	int
,	O
UXFIO_BUFTYPE_DYNAMIC_MEM	int
)	O
)	O
<	O
0	int
)	O
{	O
delete_trio	function
(	O
file_hdr	pointer
,	O
file_hdr_links	pointer
,	O
file_hdr_links_last	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
uxfio_fcntl	function
(	O
input_fd	int
,	O
UXFIO_F_ARM_AUTO_DISABLE	O
,	O
0	int
)	O
;	O
uxfio_fcntl	function
(	O
input_fd	int
,	O
UXFIO_F_SET_BUFACTIVE	O
,	O
1	int
)	O
;	O
uxfio_fcntl	function
(	O
input_fd	int
,	O
UXFIO_F_SET_BUFTYPE	O
,	O
UXFIO_BUFTYPE_DYNAMIC_MEM	int
)	O
;	O
orig_offset	int
=	O
uxfio_lseek	function
(	O
input_fd	int
,	O
0	int
,	O
SEEK_CUR	int
)	O
;	O
nfound	pointer
=	O
0	int
;	O
link_record_buf	pointer
=	O
hllist_find_file_entry	function
(	O
link_record	pointer
,	O
devno	long
,	O
file_hdr	pointer
->	O
c_ino	short
,	O
-	O
1	int
,	O
&	O
nfound	pointer
)	O
;	O
if	O
(	O
nfound	pointer
==	O
1	int
&&	O
(	O
(	O
(	O
file_hdr	pointer
->	O
c_mode	short
&	O
CP_IFMT	int
)	O
==	O
CP_IFREG	int
)	O
||	O
(	O
(	O
file_hdr	pointer
->	O
c_mode	short
&	O
CP_IFMT	int
)	O
==	O
CP_IFBLK	int
)	O
||	O
(	O
(	O
file_hdr	pointer
->	O
c_mode	short
&	O
CP_IFMT	int
)	O
==	O
CP_IFCHR	int
)	O
||	O
(	O
(	O
file_hdr	pointer
->	O
c_mode	short
&	O
CP_IFMT	int
)	O
==	O
CP_IFSOCK	int
)	O
)	O
)	O
{	O
nmore	int
=	O
file_hdr	pointer
->	O
c_nlink	short
-	O
1	int
;	O
data_offset	int
=	O
orig_offset	int
;	O
data_size	int
=	O
(	O
int	O
)	O
(	O
file_hdr	pointer
->	O
c_filesize	long
)	O
;	O
count	int
=	O
0	int
;	O
found_data	int
=	O
0	int
;	O
done_links	char
=	O
FALSE	int
;	O
if	O
(	O
data_size	int
)	O
{	O
done_links	char
=	O
TRUE	int
;	O
found_data	int
=	O
1	int
;	O
}	O
while	O
(	O
!	O
done_links	char
)	O
{	O
taru_read_header	function
(	O
taru	pointer
,	O
file_hdr_links	pointer
,	O
input_fd	int
,	O
archive_format_in	enum
,	O
&	O
end_of_archive	int
,	O
0	int
)	O
;	O
if	O
(	O
strcmp	function
(	O
"TRAILER!!!"	pointer
,	O
ahsStaticGetTarFilename	function
(	O
file_hdr_links	pointer
)	O
)	O
==	O
0	int
)	O
{	O
done_links	char
=	O
TRUE	int
;	O
break	O
;	O
}	O
if	O
(	O
file_hdr_links	pointer
->	O
c_ino	short
==	O
file_hdr	pointer
->	O
c_ino	short
&&	O
devno	long
==	O
(	O
dev_t	long
)	O
makedev	O
(	O
file_hdr_links	pointer
->	O
c_dev_maj	long
,	O
file_hdr_links	pointer
->	O
c_dev_min	long
)	O
)	O
{	O
count	int
++	O
;	O
file_hdr_copy	function
(	O
file_hdr_links_last	pointer
,	O
file_hdr_links	pointer
)	O
;	O
data_offset	int
=	O
uxfio_lseek	function
(	O
input_fd	int
,	O
0	int
,	O
SEEK_CUR	int
)	O
;	O
data_size	int
=	O
file_hdr_links	pointer
->	O
c_filesize	long
;	O
if	O
(	O
(	O
file_hdr_links	pointer
->	O
c_filesize	long
>	O
0	int
)	O
||	O
count	int
==	O
nmore	int
)	O
{	O
found_data	int
=	O
1	int
;	O
done_links	char
=	O
TRUE	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
(	O
(	O
file_hdr_links	pointer
->	O
c_mode	short
&	O
CP_IFMT	int
)	O
==	O
CP_IFREG	int
)	O
&&	O
file_hdr_links	pointer
->	O
c_filesize	long
)	O
{	O
if	O
(	O
uxfio_lseek	function
(	O
input_fd	int
,	O
file_hdr_links	pointer
->	O
c_filesize	long
,	O
SEEK_CUR	int
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"error from uxfio_lseek 100a.1.\n"	pointer
)	O
;	O
delete_trio	function
(	O
file_hdr	pointer
,	O
file_hdr_links	pointer
,	O
file_hdr_links_last	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
taru_tape_skip_padding	function
(	O
input_fd	int
,	O
file_hdr_links	pointer
->	O
c_filesize	long
,	O
archive_format_in	enum
)	O
;	O
}	O
}	O
if	O
(	O
!	O
found_data	int
&&	O
count	int
)	O
{	O
file_hdr_copy	function
(	O
file_hdr_links	pointer
,	O
file_hdr_links_last	pointer
)	O
;	O
if	O
(	O
uxfio_lseek	function
(	O
input_fd	int
,	O
data_offset	int
,	O
SEEK_SET	int
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"taru_process_copy_in, read ahead failed, lseek\n"	pointer
)	O
;	O
delete_trio	function
(	O
file_hdr	pointer
,	O
file_hdr_links	pointer
,	O
file_hdr_links_last	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
!	O
found_data	int
&&	O
!	O
count	int
)	O
{	O
file_hdr_copy	function
(	O
file_hdr_links	pointer
,	O
file_hdr_links_last	pointer
)	O
;	O
if	O
(	O
uxfio_lseek	function
(	O
input_fd	int
,	O
orig_offset	int
,	O
SEEK_SET	int
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"taru_process_copy_in, read ahead failed, lseek\n"	pointer
)	O
;	O
delete_trio	function
(	O
file_hdr	pointer
,	O
file_hdr_links	pointer
,	O
file_hdr_links_last	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
found_data	int
)	O
{	O
file_hdr_copy	function
(	O
file_hdr_links	pointer
,	O
file_hdr	pointer
)	O
;	O
}	O
file_hdr	pointer
->	O
c_filesize	long
=	O
data_size	int
;	O
taru_write_archive_member_header	function
(	O
taru	pointer
,	O
NULL	O
,	O
file_hdr	pointer
,	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
output_fd	int
,	O
arf_ustar	int
,	O
NULL	O
,	O
taru	pointer
->	O
taru_tarheaderflagsM	int
)	O
;	O
taru_pump_amount2	function
(	O
output_fd	int
,	O
input_fd	int
,	O
data_size	int
,	O
-	O
1	int
)	O
;	O
taru_tape_skip_padding	function
(	O
input_fd	int
,	O
data_size	int
,	O
archive_format_in	enum
)	O
;	O
taru_tape_pad_output	function
(	O
output_fd	int
,	O
data_size	int
,	O
archive_format_tar	enum
)	O
;	O
}	O
else	O
{	O
nfound	pointer
=	O
0	int
;	O
link_record_buf	pointer
=	O
hllist_find_file_entry	function
(	O
link_record	pointer
,	O
devno	long
,	O
file_hdr	pointer
->	O
c_ino	short
,	O
1	int
,	O
&	O
nfound	pointer
)	O
;	O
ahsStaticSetPaxLinkname	function
(	O
file_hdr	pointer
,	O
link_record_buf	pointer
->	O
path_	pointer
)	O
;	O
taru_write_archive_member_header	function
(	O
taru	pointer
,	O
NULL	O
,	O
file_hdr	pointer
,	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
output_fd	int
,	O
arf_ustar	int
,	O
NULL	O
,	O
taru	pointer
->	O
taru_tarheaderflagsM	int
)	O
;	O
}	O
if	O
(	O
uxfio_lseek	function
(	O
input_fd	int
,	O
orig_offset	int
,	O
SEEK_SET	int
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"taru_process_copy_in, read ahead failed, lseek\n"	pointer
)	O
;	O
delete_trio	function
(	O
file_hdr	pointer
,	O
file_hdr_links	pointer
,	O
file_hdr_links_last	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
taru_tape_buffered_read	function
(	O
input_fd	int
,	O
magbuf	array
,	O
6	int
)	O
!=	O
6	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"taru_tape_buffered_read error in taru_process copy out\n"	pointer
)	O
;	O
delete_trio	function
(	O
file_hdr	pointer
,	O
file_hdr_links	pointer
,	O
file_hdr_links_last	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
uxfio_lseek	function
(	O
input_fd	int
,	O
orig_offset	int
,	O
SEEK_SET	int
)	O
;	O
if	O
(	O
(	O
!	O
strncmp	function
(	O
magbuf	array
,	O
"070701"	pointer
,	O
6	int
)	O
)	O
||	O
(	O
!	O
strncmp	function
(	O
magbuf	array
,	O
"070702"	pointer
,	O
6	int
)	O
)	O
||	O
(	O
!	O
strncmp	function
(	O
magbuf	array
,	O
"070707"	pointer
,	O
6	int
)	O
)	O
)	O
{	O
if	O
(	O
taru_read_in_header	function
(	O
taru	pointer
,	O
file_hdr_links	pointer
,	O
input_fd	int
,	O
archive_format_in	enum
,	O
&	O
end_of_archive	int
,	O
0	int
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"cpio header magic probably match accidentally, attempting to recover.\n"	pointer
)	O
;	O
if	O
(	O
uxfio_lseek	function
(	O
input_fd	int
,	O
orig_offset	int
,	O
SEEK_SET	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"lseek failed\n"	pointer
)	O
;	O
delete_trio	function
(	O
file_hdr	pointer
,	O
file_hdr_links	pointer
,	O
file_hdr_links_last	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
taru_read_amount	function
(	O
input_fd	int
,	O
file_hdr	pointer
->	O
c_filesize	long
)	O
;	O
taru_tape_skip_padding	function
(	O
input_fd	int
,	O
file_hdr	pointer
->	O
c_filesize	long
,	O
archive_format_in	enum
)	O
;	O
taru_tape_buffered_read	function
(	O
input_fd	int
,	O
magbuf	array
,	O
6	int
)	O
;	O
if	O
(	O
(	O
!	O
strncmp	function
(	O
magbuf	array
,	O
"070701"	pointer
,	O
6	int
)	O
)	O
||	O
(	O
!	O
strncmp	function
(	O
magbuf	array
,	O
"070702"	pointer
,	O
6	int
)	O
)	O
)	O
{	O
uxfio_lseek	function
(	O
input_fd	int
,	O
-	O
6	int
,	O
SEEK_CUR	int
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
uxfio_lseek	function
(	O
input_fd	int
,	O
orig_offset	int
,	O
SEEK_SET	int
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"taru_process_copy_in, read ahead failed, lseek\n"	pointer
)	O
;	O
delete_trio	function
(	O
file_hdr	pointer
,	O
file_hdr_links	pointer
,	O
file_hdr_links_last	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
else	O
{	O
taru_read_amount	function
(	O
input_fd	int
,	O
file_hdr	pointer
->	O
c_filesize	long
)	O
;	O
taru_tape_skip_padding	function
(	O
input_fd	int
,	O
file_hdr	pointer
->	O
c_filesize	long
,	O
archive_format_in	enum
)	O
;	O
}	O
uxfio_fcntl	function
(	O
input_fd	int
,	O
UXFIO_F_ARM_AUTO_DISABLE	O
,	O
1	int
)	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
file_hdr	pointer
->	O
c_nlink	short
>	O
1	int
&&	O
(	O
file_hdr	pointer
->	O
c_mode	short
&	O
CP_IFMT	int
)	O
==	O
CP_IFLNK	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"linked soft link, HEEEE exiting..\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
file_hdr	pointer
->	O
c_nlink	short
>	O
1	int
&&	O
(	O
file_hdr	pointer
->	O
c_mode	short
&	O
CP_IFMT	int
)	O
!=	O
CP_IFDIR	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"something else linked. EEEEE exiting..\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
switch	O
(	O
file_hdr	pointer
->	O
c_mode	short
&	O
CP_IFMT	int
)	O
{	O
case	O
CP_IFREG	int
:	O
taru_write_archive_member_header	function
(	O
taru	pointer
,	O
NULL	O
,	O
file_hdr	pointer
,	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
output_fd	int
,	O
arf_ustar	int
,	O
NULL	O
,	O
taru	pointer
->	O
taru_tarheaderflagsM	int
)	O
;	O
taru_pump_amount2	function
(	O
output_fd	int
,	O
input_fd	int
,	O
(	O
intmax_t	long
)	O
(	O
file_hdr	pointer
->	O
c_filesize	long
)	O
,	O
-	O
1	int
)	O
;	O
taru_tape_skip_padding	function
(	O
input_fd	int
,	O
file_hdr	pointer
->	O
c_filesize	long
,	O
archive_format_in	enum
)	O
;	O
taru_tape_pad_output	function
(	O
output_fd	int
,	O
file_hdr	pointer
->	O
c_filesize	long
,	O
archive_format_tar	enum
)	O
;	O
break	O
;	O
case	O
CP_IFLNK	int
:	O
link_name	pointer
=	O
NULL	O
;	O
if	O
(	O
archive_format_in	enum
!=	O
arf_tar	int
&&	O
archive_format_in	enum
!=	O
arf_ustar	int
)	O
{	O
link_name	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
(	O
unsigned	O
int	O
)	O
file_hdr	pointer
->	O
c_filesize	long
+	O
1	int
)	O
;	O
link_name	pointer
[	O
file_hdr	pointer
->	O
c_filesize	long
]	O
=	O
'\0'	O
;	O
taru_tape_buffered_read	function
(	O
input_fd	int
,	O
link_name	pointer
,	O
file_hdr	pointer
->	O
c_filesize	long
)	O
;	O
taru_tape_skip_padding	function
(	O
input_fd	int
,	O
file_hdr	pointer
->	O
c_filesize	long
,	O
archive_format_in	enum
)	O
;	O
ahsStaticSetPaxLinkname	function
(	O
file_hdr	pointer
,	O
link_name	pointer
)	O
;	O
}	O
taru_write_archive_member_header	function
(	O
taru	pointer
,	O
NULL	O
,	O
file_hdr	pointer
,	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
output_fd	int
,	O
arf_ustar	int
,	O
NULL	O
,	O
taru	pointer
->	O
taru_tarheaderflagsM	int
)	O
;	O
if	O
(	O
link_name	pointer
)	O
{	O
swbis_free	O
(	O
link_name	pointer
)	O
;	O
link_name	pointer
=	O
NULL	O
;	O
}	O
break	O
;	O
case	O
CP_IFDIR	int
:	O
case	O
CP_IFCHR	int
:	O
case	O
CP_IFBLK	int
:	O
case	O
CP_IFSOCK	int
:	O
case	O
CP_IFIFO	int
:	O
taru_write_archive_member_header	function
(	O
taru	pointer
,	O
NULL	O
,	O
file_hdr	pointer
,	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
output_fd	int
,	O
arf_ustar	int
,	O
NULL	O
,	O
taru	pointer
->	O
taru_tarheaderflagsM	int
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: unknown file type"	pointer
,	O
ahsStaticGetTarFilename	function
(	O
file_hdr	pointer
)	O
)	O
;	O
taru_read_amount	function
(	O
input_fd	int
,	O
file_hdr	pointer
->	O
c_filesize	long
)	O
;	O
taru_tape_skip_padding	function
(	O
input_fd	int
,	O
file_hdr	pointer
->	O
c_filesize	long
,	O
archive_format_in	enum
)	O
;	O
}	O
}	O
}	O
uxfio_unix_safe_write	function
(	O
output_fd	int
,	O
zeros_512	array
,	O
512	int
)	O
;	O
uxfio_unix_safe_write	function
(	O
output_fd	int
,	O
zeros_512	array
,	O
512	int
)	O
;	O
if	O
(	O
archive_format_in	enum
!=	O
arf_ustar	int
)	O
{	O
hllist_close	function
(	O
link_record	pointer
)	O
;	O
}	O
uxfio_close	function
(	O
input_fd	int
)	O
;	O
delete_trio	function
(	O
file_hdr	pointer
,	O
file_hdr_links	pointer
,	O
file_hdr_links_last	pointer
)	O
;	O
if	O
(	O
fp_taru	pointer
==	O
NULL	O
)	O
taru_delete	function
(	O
taru	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
new_cpio_header	struct
*	O
file_hdr_copy	function
(	O
struct	O
new_cpio_header	struct
*	O
dst	pointer
,	O
struct	O
new_cpio_header	struct
*	O
src	pointer
)	O
{	O
dst	pointer
->	O
c_magic	short
=	O
src	pointer
->	O
c_magic	short
;	O
dst	pointer
->	O
c_ino	short
=	O
src	pointer
->	O
c_ino	short
;	O
dst	pointer
->	O
c_mode	short
=	O
src	pointer
->	O
c_mode	short
;	O
dst	pointer
->	O
c_uid	short
=	O
src	pointer
->	O
c_uid	short
;	O
dst	pointer
->	O
c_gid	short
=	O
src	pointer
->	O
c_gid	short
;	O
dst	pointer
->	O
c_nlink	short
=	O
src	pointer
->	O
c_nlink	short
;	O
dst	pointer
->	O
c_mtime	long
=	O
src	pointer
->	O
c_mtime	long
;	O
dst	pointer
->	O
c_filesize	long
=	O
src	pointer
->	O
c_filesize	long
;	O
dst	pointer
->	O
c_dev_maj	long
=	O
src	pointer
->	O
c_dev_maj	long
;	O
dst	pointer
->	O
c_dev_min	long
=	O
src	pointer
->	O
c_dev_min	long
;	O
dst	pointer
->	O
c_rdev_maj	long
=	O
src	pointer
->	O
c_rdev_maj	long
;	O
dst	pointer
->	O
c_rdev_min	long
=	O
src	pointer
->	O
c_rdev_min	long
;	O
dst	pointer
->	O
c_namesize	short
=	O
src	pointer
->	O
c_namesize	short
;	O
dst	pointer
->	O
c_chksum	long
=	O
src	pointer
->	O
c_chksum	long
;	O
ahsStaticSetTarFilename	function
(	O
dst	pointer
,	O
ahsStaticGetTarFilename	function
(	O
src	pointer
)	O
)	O
;	O
ahsStaticSetPaxLinkname	function
(	O
dst	pointer
,	O
ahsStaticGetTarLinkname	function
(	O
src	pointer
)	O
)	O
;	O
return	O
dst	pointer
;	O
}	O
