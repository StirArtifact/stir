static	O
int	O
orientation	int
=	O
HORIZONTAL	int
;	O
static	O
int	O
pixel_spacing	int
=	O
0	int
;	O
static	O
gdImagePtr	pointer
*	O
input_images	pointer
=	O
(	O
gdImagePtr	pointer
*	O
)	O
NULL	O
;	O
static	O
int	O
input_images_index	int
=	O
0	int
;	O
static	O
int	O
input_images_slots	int
=	O
0	int
;	O
static	O
char	O
*	O
rotated	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
static	O
char	O
*	O
separator_rgb	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
static	O
void	O
parse_rgb	function
(	O
char	O
*	O
string	pointer
,	O
int	O
*	O
rp	pointer
,	O
int	O
*	O
gp	pointer
,	O
int	O
*	O
bp	pointer
)	O
;	O
static	O
void	O
cleanup	function
(	O
char	O
*	O
string	pointer
)	O
;	O
static	O
int	O
parse_hex_pair	function
(	O
char	O
*	O
pair_start	pointer
)	O
;	O
static	O
void	O
memory_error_and_abort	function
(	O
char	O
*	O
fname	pointer
)	O
;	O
static	O
void	O
decode_args	function
(	O
char	O
*	O
string	pointer
,	O
int	O
*	O
argcp	pointer
,	O
char	O
*	O
*	O
*	O
argvp	pointer
)	O
;	O
static	O
char	O
*	O
progname	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
static	O
int	O
called_from_web_server	int
=	O
0	int
;	O
static	O
void	O
*	O
xmalloc	function
(	O
unsigned	O
int	O
bytes	int
)	O
{	O
void	O
*	O
temp	pointer
=	O
(	O
void	O
*	O
)	O
malloc	function
(	O
bytes	int
)	O
;	O
if	O
(	O
!	O
temp	pointer
)	O
memory_error_and_abort	function
(	O
"xmalloc"	pointer
)	O
;	O
return	O
(	O
temp	pointer
)	O
;	O
}	O
static	O
void	O
*	O
xrealloc	function
(	O
void	O
*	O
pointer	pointer
,	O
unsigned	O
int	O
bytes	int
)	O
{	O
void	O
*	O
temp	pointer
;	O
if	O
(	O
!	O
pointer	pointer
)	O
temp	pointer
=	O
(	O
void	O
*	O
)	O
malloc	function
(	O
bytes	int
)	O
;	O
else	O
temp	pointer
=	O
(	O
void	O
*	O
)	O
realloc	function
(	O
pointer	pointer
,	O
bytes	int
)	O
;	O
if	O
(	O
!	O
temp	pointer
)	O
memory_error_and_abort	function
(	O
"xrealloc"	pointer
)	O
;	O
return	O
(	O
temp	pointer
)	O
;	O
}	O
static	O
void	O
memory_error_and_abort	function
(	O
char	O
*	O
fname	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: Out of virtual memory!\n"	pointer
,	O
fname	pointer
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
static	O
void	O
usage	function
(	O
int	O
status	int
)	O
{	O
register	O
int	O
i	int
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Usage: %s [--vertical --horizontal --spacing] gif-file...\n"	pointer
,	O
progname	pointer
)	O
;	O
if	O
(	O
status	int
)	O
exit	function
(	O
status	int
)	O
;	O
}	O
static	O
void	O
file_error	function
(	O
char	O
*	O
filename	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s: %s\n"	pointer
,	O
progname	pointer
,	O
filename	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
static	O
void	O
parse_program_arguments	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
register	O
int	O
arg_index	int
=	O
1	int
;	O
char	O
*	O
webargs	pointer
=	O
getenv	function
(	O
"PATH_INFO"	pointer
)	O
;	O
progname	pointer
=	O
argv	array
[	O
0	int
]	O
;	O
if	O
(	O
!	O
webargs	pointer
||	O
!	O
*	O
webargs	pointer
)	O
webargs	pointer
=	O
getenv	function
(	O
"QUERY_STRING"	pointer
)	O
;	O
if	O
(	O
webargs	pointer
&&	O
*	O
webargs	pointer
)	O
{	O
called_from_web_server	int
=	O
1	int
;	O
decode_args	function
(	O
webargs	pointer
,	O
&	O
argc	int
,	O
&	O
argv	array
)	O
;	O
}	O
while	O
(	O
arg_index	int
<	O
argc	int
)	O
{	O
char	O
*	O
arg	pointer
=	O
argv	array
[	O
arg_index	int
++	O
]	O
;	O
char	O
*	O
next	pointer
=	O
(	O
arg_index	int
<	O
argc	int
)	O
?	O
(	O
argv	array
[	O
arg_index	int
]	O
)	O
:	O
(	O
char	O
*	O
)	O
NULL	O
;	O
if	O
(	O
strcasecmp	function
(	O
arg	pointer
,	O
"--help"	pointer
)	O
==	O
0	int
)	O
{	O
usage	function
(	O
0	int
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"-v"	pointer
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"--vertical"	pointer
)	O
==	O
0	int
)	O
)	O
{	O
orientation	int
=	O
VERTICAL	int
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"-h"	pointer
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"--horizontal"	pointer
)	O
==	O
0	int
)	O
)	O
{	O
orientation	int
=	O
HORIZONTAL	int
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"-r"	pointer
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"--rotate"	pointer
)	O
==	O
0	int
)	O
)	O
{	O
rotated	pointer
=	O
argv	array
[	O
arg_index	int
++	O
]	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"-s"	pointer
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"--spacing"	pointer
)	O
==	O
0	int
)	O
)	O
{	O
pixel_spacing	int
=	O
atoi	function
(	O
argv	array
[	O
arg_index	int
++	O
]	O
)	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"-srgb"	pointer
)	O
==	O
0	int
)	O
{	O
char	O
*	O
temp	pointer
=	O
argv	array
[	O
arg_index	int
++	O
]	O
;	O
if	O
(	O
*	O
temp	pointer
==	O
'#'	O
)	O
temp	pointer
++	O
;	O
separator_rgb	pointer
=	O
strdup	function
(	O
temp	pointer
)	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
arg	pointer
,	O
"--"	pointer
,	O
2	int
)	O
!=	O
0	int
)	O
{	O
FILE	struct
*	O
stream	pointer
=	O
fopen	function
(	O
arg	pointer
,	O
"rb"	pointer
)	O
;	O
if	O
(	O
stream	pointer
!=	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
{	O
gdImagePtr	pointer
image	pointer
=	O
gdImageCreateFromGif	function
(	O
stream	pointer
)	O
;	O
if	O
(	O
image	pointer
!=	O
(	O
gdImagePtr	pointer
)	O
NULL	O
)	O
{	O
if	O
(	O
input_images_index	int
+	O
2	int
>	O
input_images_slots	int
)	O
input_images	pointer
=	O
(	O
gdImagePtr	pointer
*	O
)	O
xrealloc	function
(	O
input_images	pointer
,	O
(	O
input_images_slots	int
+=	O
20	int
)	O
*	O
sizeof	O
(	O
gdImagePtr	pointer
)	O
)	O
;	O
input_images	pointer
[	O
input_images_index	int
++	O
]	O
=	O
image	pointer
;	O
}	O
else	O
{	O
fclose	function
(	O
stream	pointer
)	O
;	O
file_error	function
(	O
arg	pointer
)	O
;	O
}	O
}	O
else	O
file_error	function
(	O
arg	pointer
)	O
;	O
}	O
else	O
usage	function
(	O
1	int
)	O
;	O
}	O
}	O
static	O
void	O
gif_return	function
(	O
gdImagePtr	pointer
gif	pointer
)	O
{	O
FILE	struct
*	O
out	pointer
=	O
stdout	pointer
;	O
if	O
(	O
called_from_web_server	int
)	O
{	O
fprintf	function
(	O
out	pointer
,	O
"Expires: Monday, 05-Feb-96 15:04:14 GMT\n"	pointer
)	O
;	O
fprintf	function
(	O
out	pointer
,	O
"Content-Type: image/gif\n"	pointer
)	O
;	O
}	O
gdImageGif	function
(	O
gif	pointer
,	O
out	pointer
)	O
;	O
}	O
static	O
void	O
cleanup	function
(	O
char	O
*	O
string	pointer
)	O
{	O
register	O
int	O
i	int
,	O
j	int
,	O
len	int
;	O
char	O
*	O
dest	pointer
;	O
len	int
=	O
strlen	function
(	O
string	pointer
)	O
;	O
dest	pointer
=	O
(	O
char	O
*	O
)	O
alloca	function
(	O
1	int
+	O
len	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
,	O
j	int
=	O
0	int
;	O
i	int
<	O
len	int
;	O
i	int
++	O
)	O
{	O
switch	O
(	O
string	pointer
[	O
i	int
]	O
)	O
{	O
case	O
'%'	O
:	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
parse_hex_pair	function
(	O
string	pointer
+	O
i	int
+	O
1	int
)	O
;	O
i	int
+=	O
2	int
;	O
break	O
;	O
case	O
'+'	O
:	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
' '	O
;	O
break	O
;	O
default	O
:	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
string	pointer
[	O
i	int
]	O
;	O
}	O
}	O
dest	pointer
[	O
j	int
]	O
=	O
'\0'	O
;	O
strcpy	function
(	O
string	pointer
,	O
dest	pointer
)	O
;	O
}	O
static	O
int	O
parse_hex_pair	function
(	O
char	O
*	O
pair_start	pointer
)	O
{	O
int	O
value	int
=	O
0	int
;	O
int	O
char1	int
,	O
char2	int
;	O
char1	int
=	O
char2	int
=	O
0	int
;	O
char1	int
=	O
*	O
pair_start	pointer
;	O
if	O
(	O
char1	int
)	O
char2	int
=	O
(	O
pair_start	pointer
[	O
1	int
]	O
)	O
;	O
if	O
(	O
isupper	function
(	O
char1	int
)	O
)	O
char1	int
=	O
tolower	function
(	O
char1	int
)	O
;	O
if	O
(	O
isupper	function
(	O
char2	int
)	O
)	O
char2	int
=	O
tolower	function
(	O
char2	int
)	O
;	O
if	O
(	O
isdigit	function
(	O
char1	int
)	O
)	O
value	int
=	O
char1	int
-	O
'0'	O
;	O
else	O
if	O
(	O
(	O
char1	int
<=	O
'f'	O
)	O
&&	O
(	O
char1	int
>=	O
'a'	O
)	O
)	O
value	int
=	O
10	int
+	O
(	O
char1	int
-	O
'a'	O
)	O
;	O
if	O
(	O
isdigit	function
(	O
char2	int
)	O
)	O
value	int
=	O
(	O
value	int
*	O
16	int
)	O
+	O
(	O
char2	int
-	O
'0'	O
)	O
;	O
else	O
if	O
(	O
(	O
char2	int
<=	O
'f'	O
)	O
&&	O
(	O
char2	int
>=	O
'a'	O
)	O
)	O
value	int
=	O
(	O
value	int
*	O
16	int
)	O
+	O
(	O
10	int
+	O
(	O
char2	int
-	O
'a'	O
)	O
)	O
;	O
return	O
(	O
value	int
)	O
;	O
}	O
static	O
void	O
decode_args	function
(	O
char	O
*	O
string	pointer
,	O
int	O
*	O
argcp	pointer
,	O
char	O
*	O
*	O
*	O
argvp	pointer
)	O
{	O
char	O
*	O
temp	pointer
;	O
temp	pointer
=	O
strchr	function
(	O
string	pointer
,	O
'='	O
)	O
;	O
if	O
(	O
temp	pointer
)	O
{	O
register	O
int	O
i	int
;	O
int	O
argc	int
=	O
*	O
argcp	pointer
;	O
int	O
slots	int
=	O
argc	int
+	O
10	int
;	O
char	O
*	O
*	O
argv	array
=	O
(	O
char	O
*	O
*	O
)	O
xmalloc	function
(	O
slots	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
temp	pointer
++	O
;	O
temp	pointer
=	O
strdup	function
(	O
temp	pointer
)	O
;	O
cleanup	function
(	O
temp	pointer
)	O
;	O
i	int
=	O
0	int
;	O
while	O
(	O
temp	pointer
[	O
i	int
]	O
)	O
{	O
int	O
start	int
=	O
i	int
;	O
char	O
*	O
arg	pointer
;	O
while	O
(	O
temp	pointer
[	O
i	int
]	O
!=	O
'\0'	O
&&	O
!	O
whitespace	O
(	O
temp	pointer
[	O
i	int
]	O
)	O
)	O
i	int
++	O
;	O
arg	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
1	int
+	O
(	O
i	int
-	O
start	int
)	O
)	O
;	O
strncpy	function
(	O
arg	pointer
,	O
temp	pointer
+	O
start	int
,	O
(	O
i	int
-	O
start	int
)	O
)	O
;	O
arg	pointer
[	O
i	int
-	O
start	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
argc	int
+	O
2	int
>	O
slots	int
)	O
argv	array
=	O
(	O
char	O
*	O
*	O
)	O
xrealloc	function
(	O
argv	array
,	O
(	O
(	O
slots	int
+=	O
10	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
)	O
;	O
argv	array
[	O
argc	int
++	O
]	O
=	O
arg	pointer
;	O
argv	array
[	O
argc	int
]	O
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
while	O
(	O
whitespace	O
(	O
temp	pointer
[	O
i	int
]	O
)	O
)	O
i	int
++	O
;	O
}	O
*	O
argcp	pointer
=	O
argc	int
;	O
*	O
argvp	pointer
=	O
argv	array
;	O
}	O
}	O
static	O
int	O
hex_value	function
(	O
int	O
c	int
)	O
{	O
if	O
(	O
islower	function
(	O
c	int
)	O
)	O
c	int
=	O
toupper	function
(	O
c	int
)	O
;	O
c	int
=	O
c	int
-	O
'0'	O
;	O
if	O
(	O
c	int
>	O
9	int
)	O
c	int
=	O
10	int
+	O
(	O
(	O
c	int
+	O
'0'	O
)	O
-	O
'A'	O
)	O
;	O
return	O
(	O
c	int
)	O
;	O
}	O
static	O
void	O
parse_rgb	function
(	O
char	O
*	O
string	pointer
,	O
int	O
*	O
rp	pointer
,	O
int	O
*	O
gp	pointer
,	O
int	O
*	O
bp	pointer
)	O
{	O
register	O
int	O
i	int
;	O
*	O
rp	pointer
=	O
*	O
gp	pointer
=	O
*	O
bp	pointer
=	O
0	int
;	O
if	O
(	O
strchr	function
(	O
string	pointer
,	O
','	O
)	O
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
sscanf	function
(	O
string	pointer
,	O
"%d,%d,%d"	pointer
,	O
rp	pointer
,	O
gp	pointer
,	O
bp	pointer
)	O
;	O
}	O
else	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
6	int
&&	O
string	pointer
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
switch	O
(	O
i	int
)	O
{	O
case	O
0	int
:	O
*	O
rp	pointer
=	O
16	int
*	O
hex_value	function
(	O
string	pointer
[	O
i	int
]	O
)	O
;	O
break	O
;	O
case	O
1	int
:	O
*	O
rp	pointer
|=	O
hex_value	function
(	O
string	pointer
[	O
i	int
]	O
)	O
;	O
break	O
;	O
case	O
2	int
:	O
*	O
gp	pointer
=	O
16	int
*	O
hex_value	function
(	O
string	pointer
[	O
i	int
]	O
)	O
;	O
break	O
;	O
case	O
3	int
:	O
*	O
gp	pointer
|=	O
hex_value	function
(	O
string	pointer
[	O
i	int
]	O
)	O
;	O
break	O
;	O
case	O
4	int
:	O
*	O
bp	pointer
=	O
16	int
*	O
hex_value	function
(	O
string	pointer
[	O
i	int
]	O
)	O
;	O
break	O
;	O
case	O
5	int
:	O
*	O
bp	pointer
|=	O
hex_value	function
(	O
string	pointer
[	O
i	int
]	O
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
}	O
}	O
static	O
gdImagePtr	pointer
rotate_image	function
(	O
gdImagePtr	pointer
image	pointer
,	O
int	O
degrees	int
)	O
{	O
register	O
int	O
x	int
,	O
y	int
;	O
int	O
width	int
=	O
gdImageSX	O
(	O
image	pointer
)	O
;	O
int	O
height	int
=	O
gdImageSY	O
(	O
image	pointer
)	O
;	O
if	O
(	O
degrees	int
==	O
-	O
90	int
)	O
degrees	int
=	O
270	int
;	O
if	O
(	O
degrees	int
==	O
-	O
270	int
)	O
degrees	int
=	O
90	int
;	O
if	O
(	O
degrees	int
==	O
-	O
180	int
)	O
degrees	int
=	O
180	int
;	O
if	O
(	O
degrees	int
<	O
90	int
)	O
return	O
(	O
image	pointer
)	O
;	O
else	O
if	O
(	O
degrees	int
==	O
180	int
)	O
{	O
gdImagePtr	pointer
rotated	pointer
=	O
gdImageCreate	function
(	O
width	int
,	O
height	int
)	O
;	O
for	O
(	O
x	int
=	O
0	int
;	O
x	int
<	O
width	int
;	O
x	int
++	O
)	O
for	O
(	O
y	int
=	O
0	int
;	O
y	int
<	O
height	int
;	O
y	int
++	O
)	O
{	O
int	O
pixel	int
=	O
gdImageGetPixel	function
(	O
image	pointer
,	O
x	int
,	O
y	int
)	O
;	O
int	O
r	int
=	O
gdImageRed	O
(	O
image	pointer
,	O
pixel	int
)	O
;	O
int	O
g	int
=	O
gdImageGreen	O
(	O
image	pointer
,	O
pixel	int
)	O
;	O
int	O
b	int
=	O
gdImageBlue	O
(	O
image	pointer
,	O
pixel	int
)	O
;	O
int	O
newcol	int
;	O
newcol	int
=	O
gdImageColorExact	function
(	O
rotated	pointer
,	O
r	int
,	O
g	int
,	O
b	int
)	O
;	O
if	O
(	O
newcol	int
<	O
0	int
)	O
newcol	int
=	O
gdImageColorAllocate	function
(	O
rotated	pointer
,	O
r	int
,	O
g	int
,	O
b	int
)	O
;	O
gdImageSetPixel	function
(	O
rotated	pointer
,	O
width	int
-	O
x	int
,	O
height	int
-	O
y	int
,	O
newcol	int
)	O
;	O
}	O
return	O
(	O
rotated	pointer
)	O
;	O
}	O
else	O
{	O
gdImagePtr	pointer
rotated	pointer
=	O
gdImageCreate	function
(	O
height	int
,	O
width	int
)	O
;	O
for	O
(	O
x	int
=	O
0	int
;	O
x	int
<	O
width	int
;	O
x	int
++	O
)	O
for	O
(	O
y	int
=	O
0	int
;	O
y	int
<	O
height	int
;	O
y	int
++	O
)	O
{	O
int	O
pixel	int
=	O
gdImageGetPixel	function
(	O
image	pointer
,	O
x	int
,	O
y	int
)	O
;	O
int	O
r	int
=	O
gdImageRed	O
(	O
image	pointer
,	O
pixel	int
)	O
;	O
int	O
g	int
=	O
gdImageGreen	O
(	O
image	pointer
,	O
pixel	int
)	O
;	O
int	O
b	int
=	O
gdImageBlue	O
(	O
image	pointer
,	O
pixel	int
)	O
;	O
int	O
newcol	int
;	O
newcol	int
=	O
gdImageColorExact	function
(	O
rotated	pointer
,	O
r	int
,	O
g	int
,	O
b	int
)	O
;	O
if	O
(	O
newcol	int
<	O
0	int
)	O
newcol	int
=	O
gdImageColorAllocate	function
(	O
rotated	pointer
,	O
r	int
,	O
g	int
,	O
b	int
)	O
;	O
if	O
(	O
degrees	int
==	O
90	int
)	O
gdImageSetPixel	function
(	O
rotated	pointer
,	O
height	int
-	O
y	int
,	O
x	int
,	O
newcol	int
)	O
;	O
else	O
gdImageSetPixel	function
(	O
rotated	pointer
,	O
y	int
,	O
width	int
-	O
x	int
,	O
newcol	int
)	O
;	O
}	O
return	O
(	O
rotated	pointer
)	O
;	O
}	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
parse_program_arguments	function
(	O
argc	int
,	O
argv	array
)	O
;	O
if	O
(	O
input_images_index	int
==	O
0	int
)	O
usage	function
(	O
1	int
)	O
;	O
else	O
{	O
register	O
int	O
i	int
;	O
gdImagePtr	pointer
base_image	pointer
;	O
int	O
max_width	int
=	O
0	int
,	O
max_height	int
=	O
0	int
;	O
int	O
last_offset	int
=	O
0	int
;	O
int	O
r	int
,	O
g	int
,	O
b	int
,	O
trans	int
;	O
int	O
sr	int
,	O
sg	int
,	O
sb	int
;	O
int	O
separator	int
=	O
-	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
input_images_index	int
;	O
i	int
++	O
)	O
{	O
switch	O
(	O
orientation	int
)	O
{	O
case	O
HORIZONTAL	int
:	O
max_width	int
+=	O
gdImageSX	O
(	O
input_images	pointer
[	O
i	int
]	O
)	O
;	O
if	O
(	O
i	int
)	O
max_width	int
+=	O
pixel_spacing	int
;	O
if	O
(	O
gdImageSY	O
(	O
input_images	pointer
[	O
i	int
]	O
)	O
>	O
max_height	int
)	O
max_height	int
=	O
gdImageSY	O
(	O
input_images	pointer
[	O
i	int
]	O
)	O
;	O
break	O
;	O
case	O
VERTICAL	int
:	O
if	O
(	O
gdImageSX	O
(	O
input_images	pointer
[	O
i	int
]	O
)	O
>	O
max_width	int
)	O
max_width	int
=	O
gdImageSX	O
(	O
input_images	pointer
[	O
i	int
]	O
)	O
;	O
max_height	int
+=	O
gdImageSY	O
(	O
input_images	pointer
[	O
i	int
]	O
)	O
;	O
if	O
(	O
i	int
)	O
max_height	int
+=	O
pixel_spacing	int
;	O
break	O
;	O
}	O
}	O
base_image	pointer
=	O
gdImageCreate	function
(	O
max_width	int
,	O
max_height	int
)	O
;	O
r	int
=	O
254	int
,	O
g	int
=	O
254	int
,	O
b	int
=	O
254	int
;	O
trans	int
=	O
gdImageColorAllocate	function
(	O
base_image	pointer
,	O
r	int
,	O
g	int
,	O
b	int
)	O
;	O
gdImageFilledRectangle	function
(	O
base_image	pointer
,	O
0	int
,	O
0	int
,	O
max_width	int
,	O
max_height	int
,	O
trans	int
)	O
;	O
gdImageColorTransparent	function
(	O
base_image	pointer
,	O
trans	int
)	O
;	O
if	O
(	O
separator_rgb	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
parse_rgb	function
(	O
separator_rgb	pointer
,	O
&	O
sr	int
,	O
&	O
sg	int
,	O
&	O
sb	int
)	O
;	O
separator	int
=	O
gdImageColorAllocate	function
(	O
base_image	pointer
,	O
sr	int
,	O
sg	int
,	O
sb	int
)	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
input_images_index	int
;	O
i	int
++	O
)	O
{	O
gdImagePtr	pointer
image	pointer
=	O
input_images	pointer
[	O
i	int
]	O
;	O
register	O
int	O
start_x	int
,	O
start_y	int
;	O
register	O
int	O
x	int
,	O
y	int
;	O
int	O
xlimit	int
=	O
gdImageSX	O
(	O
image	pointer
)	O
;	O
int	O
ylimit	int
=	O
gdImageSY	O
(	O
image	pointer
)	O
;	O
switch	O
(	O
orientation	int
)	O
{	O
case	O
HORIZONTAL	int
:	O
start_y	int
=	O
(	O
max_height	int
-	O
gdImageSY	O
(	O
image	pointer
)	O
)	O
/	O
2	int
;	O
start_x	int
=	O
last_offset	int
;	O
last_offset	int
+=	O
gdImageSX	O
(	O
image	pointer
)	O
+	O
pixel_spacing	int
;	O
if	O
(	O
i	int
!=	O
0	int
&&	O
separator	int
!=	O
-	O
1	int
)	O
gdImageFilledRectangle	function
(	O
base_image	pointer
,	O
(	O
start_x	int
-	O
(	O
(	O
pixel_spacing	int
/	O
2	int
)	O
+	O
1	int
)	O
)	O
,	O
0	int
,	O
(	O
start_x	int
-	O
(	O
(	O
pixel_spacing	int
/	O
2	int
)	O
-	O
1	int
)	O
)	O
,	O
max_height	int
,	O
separator	int
)	O
;	O
break	O
;	O
case	O
VERTICAL	int
:	O
start_x	int
=	O
(	O
max_width	int
-	O
gdImageSX	O
(	O
image	pointer
)	O
)	O
/	O
2	int
;	O
start_y	int
=	O
last_offset	int
;	O
last_offset	int
+=	O
gdImageSY	O
(	O
image	pointer
)	O
+	O
pixel_spacing	int
;	O
if	O
(	O
i	int
!=	O
0	int
&&	O
separator	int
!=	O
-	O
1	int
)	O
gdImageFilledRectangle	function
(	O
base_image	pointer
,	O
0	int
,	O
(	O
start_y	int
-	O
(	O
(	O
pixel_spacing	int
/	O
2	int
)	O
+	O
1	int
)	O
)	O
,	O
max_width	int
,	O
(	O
start_y	int
-	O
(	O
(	O
pixel_spacing	int
/	O
2	int
)	O
-	O
1	int
)	O
)	O
,	O
separator	int
)	O
;	O
break	O
;	O
}	O
for	O
(	O
y	int
=	O
0	int
;	O
y	int
<	O
ylimit	int
;	O
y	int
++	O
)	O
for	O
(	O
x	int
=	O
0	int
;	O
x	int
<	O
xlimit	int
;	O
x	int
++	O
)	O
{	O
int	O
pixel_color	int
=	O
gdImageGetPixel	function
(	O
image	pointer
,	O
x	int
,	O
y	int
)	O
;	O
int	O
base_color	int
=	O
gdImageColorExact	function
(	O
base_image	pointer
,	O
gdImageRed	O
(	O
image	pointer
,	O
pixel_color	int
)	O
,	O
gdImageGreen	O
(	O
image	pointer
,	O
pixel_color	int
)	O
,	O
gdImageBlue	O
(	O
image	pointer
,	O
pixel_color	int
)	O
)	O
;	O
if	O
(	O
base_color	int
==	O
-	O
1	int
)	O
base_color	int
=	O
gdImageColorAllocate	function
(	O
base_image	pointer
,	O
gdImageRed	O
(	O
image	pointer
,	O
pixel_color	int
)	O
,	O
gdImageGreen	O
(	O
image	pointer
,	O
pixel_color	int
)	O
,	O
gdImageBlue	O
(	O
image	pointer
,	O
pixel_color	int
)	O
)	O
;	O
if	O
(	O
base_color	int
!=	O
trans	int
)	O
gdImageSetPixel	function
(	O
base_image	pointer
,	O
start_x	int
+	O
x	int
,	O
start_y	int
+	O
y	int
,	O
base_color	int
)	O
;	O
}	O
}	O
if	O
(	O
rotated	pointer
)	O
base_image	pointer
=	O
rotate_image	function
(	O
base_image	pointer
,	O
atoi	function
(	O
rotated	pointer
)	O
)	O
;	O
gif_return	function
(	O
base_image	pointer
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
