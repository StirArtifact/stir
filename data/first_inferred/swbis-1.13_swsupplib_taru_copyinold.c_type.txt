int	O
taru_read_in_old_ascii2	function
(	O
TARU	struct
*	O
taru	pointer
,	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
,	O
int	O
in_des	int
,	O
char	O
*	O
buf	pointer
)	O
{	O
char	O
ascii_header	array
[	O
78	int
]	O
;	O
unsigned	O
long	O
dev	long
;	O
unsigned	O
long	O
rdev	long
;	O
int	O
bytesread	int
=	O
0	int
;	O
int	O
ret	int
;	O
unsigned	O
long	O
xxsize	long
;	O
if	O
(	O
buf	pointer
)	O
{	O
memcpy	function
(	O
ascii_header	array
,	O
buf	pointer
,	O
70	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
taru_tape_buffered_read	function
(	O
in_des	int
,	O
ascii_header	array
,	O
70L	int
)	O
!=	O
70	int
)	O
return	O
-	O
1	int
;	O
}	O
bytesread	int
=	O
70	int
;	O
ascii_header	array
[	O
70	int
]	O
=	O
'\0'	O
;	O
sscanf	function
(	O
ascii_header	array
,	O
"%6lo%6lo%6lo%6lo%6lo%6lo%6lo%11lo%6lo%11lo"	pointer
,	O
&	O
dev	long
,	O
&	O
file_hdr	pointer
->	O
c_ino	short
,	O
&	O
file_hdr	pointer
->	O
c_mode	short
,	O
&	O
file_hdr	pointer
->	O
c_uid	short
,	O
&	O
file_hdr	pointer
->	O
c_gid	short
,	O
&	O
file_hdr	pointer
->	O
c_nlink	short
,	O
&	O
rdev	long
,	O
&	O
file_hdr	pointer
->	O
c_mtime	long
,	O
&	O
file_hdr	pointer
->	O
c_namesize	short
,	O
&	O
xxsize	long
)	O
;	O
file_hdr	pointer
->	O
c_filesize	long
=	O
xxsize	long
;	O
file_hdr	pointer
->	O
c_dev_maj	long
=	O
major	O
(	O
dev	long
)	O
;	O
file_hdr	pointer
->	O
c_dev_min	long
=	O
minor	O
(	O
dev	long
)	O
;	O
file_hdr	pointer
->	O
c_rdev_maj	long
=	O
major	O
(	O
rdev	long
)	O
;	O
file_hdr	pointer
->	O
c_rdev_min	long
=	O
minor	O
(	O
rdev	long
)	O
;	O
ahsStaticSetTarFilenameLength	function
(	O
file_hdr	pointer
,	O
file_hdr	pointer
->	O
c_namesize	short
+	O
1	int
)	O
;	O
if	O
(	O
!	O
buf	pointer
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
taru_tape_buffered_read	function
(	O
in_des	int
,	O
(	O
void	O
*	O
)	O
(	O
ahsStaticGetTarFilename	function
(	O
file_hdr	pointer
)	O
)	O
,	O
(	O
size_t	long
)	O
file_hdr	pointer
->	O
c_namesize	short
)	O
)	O
!=	O
(	O
int	O
)	O
(	O
file_hdr	pointer
->	O
c_namesize	short
)	O
)	O
{	O
return	O
-	O
bytesread	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
file_hdr	pointer
->	O
c_namesize	short
>	O
442	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"taru_read_in_oldascii2 name too long for this implementation.\n"	pointer
)	O
;	O
exit	function
(	O
33	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
memcpy	function
(	O
ahsStaticGetTarFilename	function
(	O
file_hdr	pointer
)	O
,	O
buf	pointer
+	O
70	int
,	O
file_hdr	pointer
->	O
c_namesize	short
)	O
;	O
}	O
bytesread	int
+=	O
file_hdr	pointer
->	O
c_namesize	short
;	O
switch	O
(	O
file_hdr	pointer
->	O
c_mode	short
&	O
CP_IFMT	int
)	O
{	O
case	O
CP_IFCHR	int
:	O
case	O
CP_IFBLK	int
:	O
case	O
CP_IFSOCK	int
:	O
case	O
CP_IFIFO	int
:	O
if	O
(	O
file_hdr	pointer
->	O
c_filesize	long
!=	O
0	int
&&	O
file_hdr	pointer
->	O
c_rdev_maj	long
==	O
0	int
&&	O
file_hdr	pointer
->	O
c_rdev_min	long
==	O
1	int
)	O
{	O
file_hdr	pointer
->	O
c_rdev_maj	long
=	O
major	O
(	O
file_hdr	pointer
->	O
c_filesize	long
)	O
;	O
file_hdr	pointer
->	O
c_rdev_min	long
=	O
minor	O
(	O
file_hdr	pointer
->	O
c_filesize	long
)	O
;	O
file_hdr	pointer
->	O
c_filesize	long
=	O
0	int
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
return	O
bytesread	int
;	O
}	O
