static	O
int	O
force_po	int
;	O
static	O
const	O
struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
"add-location"	pointer
,	O
optional_argument	int
,	O
NULL	O
,	O
'n'	O
}	O
,	O
{	O
"color"	pointer
,	O
optional_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
5	int
}	O
,	O
{	O
"directory"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'D'	O
}	O
,	O
{	O
"escape"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'E'	O
}	O
,	O
{	O
"force-po"	pointer
,	O
no_argument	int
,	O
&	O
force_po	int
,	O
1	int
}	O
,	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'h'	O
}	O
,	O
{	O
"indent"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'i'	O
}	O
,	O
{	O
"lang"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
4	int
}	O
,	O
{	O
"no-escape"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'e'	O
}	O
,	O
{	O
"no-location"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
7	int
}	O
,	O
{	O
"no-wrap"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
1	int
}	O
,	O
{	O
"output-file"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'o'	O
}	O
,	O
{	O
"properties-input"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'P'	O
}	O
,	O
{	O
"properties-output"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'p'	O
}	O
,	O
{	O
"sort-by-file"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'F'	O
}	O
,	O
{	O
"sort-output"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
's'	O
}	O
,	O
{	O
"strict"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'S'	O
}	O
,	O
{	O
"stringtable-input"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
2	int
}	O
,	O
{	O
"stringtable-output"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
3	int
}	O
,	O
{	O
"style"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
6	int
}	O
,	O
{	O
"version"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'V'	O
}	O
,	O
{	O
"width"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'w'	O
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
static	O
void	O
usage	function
(	O
int	O
status	int
)	O
__attribute__	O
(	O
(	O
noreturn	O
)	O
)	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
opt	int
;	O
bool	bool
do_help	bool
;	O
bool	bool
do_version	bool
;	O
char	O
*	O
output_file	pointer
;	O
msgdomain_list_ty	struct
*	O
result	pointer
;	O
catalog_input_format_ty	pointer
input_syntax	pointer
=	O
&	O
input_format_po	struct
;	O
catalog_output_format_ty	pointer
output_syntax	pointer
=	O
&	O
output_format_po	struct
;	O
bool	bool
sort_by_filepos	bool
=	O
false	int
;	O
bool	bool
sort_by_msgid	bool
=	O
false	int
;	O
const	O
char	O
*	O
catalogname	pointer
=	O
NULL	O
;	O
set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
error_print_progname	pointer
=	O
maybe_print_progname	function
;	O
setlocale	function
(	O
LC_ALL	O
,	O
""	pointer
)	O
;	O
bindtextdomain	function
(	O
PACKAGE	pointer
,	O
relocate	O
(	O
LOCALEDIR	O
)	O
)	O
;	O
bindtextdomain	function
(	O
"bison-runtime"	pointer
,	O
relocate	O
(	O
BISON_LOCALEDIR	O
)	O
)	O
;	O
textdomain	function
(	O
PACKAGE	pointer
)	O
;	O
atexit	function
(	O
close_stdout	function
)	O
;	O
do_help	bool
=	O
false	int
;	O
do_version	bool
=	O
false	int
;	O
output_file	pointer
=	O
NULL	O
;	O
while	O
(	O
(	O
opt	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"D:eEFhin:o:pPsVw:"	pointer
,	O
long_options	array
,	O
NULL	O
)	O
)	O
!=	O
EOF	O
)	O
switch	O
(	O
opt	int
)	O
{	O
case	O
'\0'	O
:	O
break	O
;	O
case	O
'D'	O
:	O
dir_list_append	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'e'	O
:	O
message_print_style_escape	function
(	O
false	int
)	O
;	O
break	O
;	O
case	O
'E'	O
:	O
message_print_style_escape	function
(	O
true	int
)	O
;	O
break	O
;	O
case	O
'F'	O
:	O
sort_by_filepos	bool
=	O
true	int
;	O
break	O
;	O
case	O
'h'	O
:	O
do_help	bool
=	O
true	int
;	O
break	O
;	O
case	O
'i'	O
:	O
message_print_style_indent	function
(	O
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
if	O
(	O
handle_filepos_comment_option	function
(	O
optarg	pointer
)	O
)	O
usage	function
(	O
EXIT_FAILURE	int
)	O
;	O
break	O
;	O
case	O
'o'	O
:	O
output_file	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
'p'	O
:	O
output_syntax	pointer
=	O
&	O
output_format_properties	struct
;	O
break	O
;	O
case	O
'P'	O
:	O
input_syntax	pointer
=	O
&	O
input_format_properties	struct
;	O
break	O
;	O
case	O
's'	O
:	O
sort_by_msgid	bool
=	O
true	int
;	O
break	O
;	O
case	O
'S'	O
:	O
message_print_style_uniforum	function
(	O
)	O
;	O
break	O
;	O
case	O
'V'	O
:	O
do_version	bool
=	O
true	int
;	O
break	O
;	O
case	O
'w'	O
:	O
{	O
int	O
value	pointer
;	O
char	O
*	O
endp	pointer
;	O
value	pointer
=	O
strtol	function
(	O
optarg	pointer
,	O
&	O
endp	pointer
,	O
10	int
)	O
;	O
if	O
(	O
endp	pointer
!=	O
optarg	pointer
)	O
message_page_width_set	function
(	O
value	pointer
)	O
;	O
}	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
1	int
:	O
message_page_width_ignore	function
(	O
)	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
2	int
:	O
input_syntax	pointer
=	O
&	O
input_format_stringtable	struct
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
3	int
:	O
output_syntax	pointer
=	O
&	O
output_format_stringtable	struct
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
4	int
:	O
catalogname	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
5	int
:	O
if	O
(	O
handle_color_option	function
(	O
optarg	pointer
)	O
||	O
color_test_mode	bool
)	O
usage	function
(	O
EXIT_FAILURE	int
)	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
6	int
:	O
handle_style_option	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
7	int
:	O
message_print_style_filepos	function
(	O
filepos_comment_none	int
)	O
;	O
break	O
;	O
default	O
:	O
usage	function
(	O
EXIT_FAILURE	int
)	O
;	O
break	O
;	O
}	O
if	O
(	O
do_version	bool
)	O
{	O
printf	function
(	O
"%s (GNU %s) %s\n"	pointer
,	O
basename	function
(	O
program_name	pointer
)	O
,	O
PACKAGE	pointer
,	O
VERSION	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Copyright (C) %s Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n"	pointer
)	O
,	O
"2001-2019"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Written by %s.\n"	pointer
)	O
,	O
proper_name	function
(	O
"Bruno Haible"	pointer
)	O
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
if	O
(	O
do_help	bool
)	O
usage	function
(	O
EXIT_SUCCESS	int
)	O
;	O
if	O
(	O
optind	int
>=	O
argc	int
)	O
{	O
error	function
(	O
EXIT_SUCCESS	int
,	O
0	int
,	O
_	O
(	O
"no input file given"	pointer
)	O
)	O
;	O
usage	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
optind	int
+	O
1	int
!=	O
argc	int
)	O
{	O
error	function
(	O
EXIT_SUCCESS	int
,	O
0	int
,	O
_	O
(	O
"exactly one input file required"	pointer
)	O
)	O
;	O
usage	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
sort_by_msgid	bool
&&	O
sort_by_filepos	bool
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"%s and %s are mutually exclusive"	pointer
)	O
,	O
"--sort-output"	pointer
,	O
"--sort-by-file"	pointer
)	O
;	O
result	pointer
=	O
read_catalog_file	function
(	O
argv	pointer
[	O
optind	int
]	O
,	O
input_syntax	pointer
)	O
;	O
result	pointer
=	O
msgdomain_list_english	function
(	O
result	pointer
)	O
;	O
if	O
(	O
sort_by_filepos	bool
)	O
msgdomain_list_sort_by_filepos	function
(	O
result	pointer
)	O
;	O
else	O
if	O
(	O
sort_by_msgid	bool
)	O
msgdomain_list_sort_by_msgid	function
(	O
result	pointer
)	O
;	O
if	O
(	O
catalogname	pointer
!=	O
NULL	O
)	O
msgdomain_list_set_header_field	function
(	O
result	pointer
,	O
"Language:"	pointer
,	O
catalogname	pointer
)	O
;	O
msgdomain_list_print	function
(	O
result	pointer
,	O
output_file	pointer
,	O
output_syntax	pointer
,	O
force_po	int
,	O
false	int
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
static	O
void	O
usage	function
(	O
int	O
status	int
)	O
{	O
if	O
(	O
status	int
!=	O
EXIT_SUCCESS	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"Try '%s --help' for more information.\n"	pointer
)	O
,	O
program_name	pointer
)	O
;	O
else	O
{	O
printf	function
(	O
_	O
(	O
"Usage: %s [OPTION] INPUTFILE\n"	pointer
)	O
,	O
program_name	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Creates an English translation catalog.  The input file is the last\ncreated English PO file, or a PO Template file (generally created by\nxgettext).  Untranslated entries are assigned a translation that is\nidentical to the msgid.\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Mandatory arguments to long options are mandatory for short options too.\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Input file location:\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  INPUTFILE                   input PO or POT file\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -D, --directory=DIRECTORY   add DIRECTORY to list for input files search\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"If input file is -, standard input is read.\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Output file location:\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -o, --output-file=FILE      write output to specified file\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"The results are written to standard output if no output file is specified\nor if it is -.\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Input file syntax:\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -P, --properties-input      input file is in Java .properties syntax\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"      --stringtable-input     input file is in NeXTstep/GNUstep .strings syntax\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Output details:\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"      --lang=CATALOGNAME      set 'Language' field in the header entry\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"      --color                 use colors and other text attributes always\n      --color=WHEN            use colors and other text attributes if WHEN.\n                              WHEN may be 'always', 'never', 'auto', or 'html'.\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"      --style=STYLEFILE       specify CSS style rule file for --color\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -e, --no-escape             do not use C escapes in output (default)\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -E, --escape                use C escapes in output, no extended chars\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"      --force-po              write PO file even if empty\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -i, --indent                indented output style\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"      --no-location           suppress '#: filename:line' lines\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -n, --add-location          preserve '#: filename:line' lines (default)\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"      --strict                strict Uniforum output style\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -p, --properties-output     write out a Java .properties file\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"      --stringtable-output    write out a NeXTstep/GNUstep .strings file\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -w, --width=NUMBER          set output page width\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"      --no-wrap               do not break long message lines, longer than\n                              the output page width, into several lines\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -s, --sort-output           generate sorted output\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -F, --sort-by-file          sort output by file location\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Informative output:\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -h, --help                  display this help and exit\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -V, --version               output version information and exit\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"Report bugs to <bug-gnu-gettext@gnu.org>.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
}	O
exit	function
(	O
status	int
)	O
;	O
}	O
