struct	O
trivfs_control	O
*	O
fsys	pointer
;	O
int	O
read_blocked	int
;	O
pthread_cond_t	O
wait	int
;	O
pthread_cond_t	O
select_alert	int
;	O
static	O
int	O
level	int
=	O
DEFAULT_LEVEL	int
;	O
static	O
char	O
*	O
seed_file	pointer
;	O
char	O
gatherbuf	char
[	O
GATHERBUFSIZE	O
]	O
;	O
int	O
gatherrpos	int
;	O
int	O
gatherwpos	int
;	O
int	O
gather_random	function
(	O
void	O
(	O
*	O
add	pointer
)	O
(	O
const	O
void	O
*	O
,	O
size_t	int
,	O
int	O
)	O
,	O
int	O
requester	int
,	O
size_t	int
length	int
,	O
int	O
level	int
)	O
{	O
int	O
avail	int
=	O
(	O
gatherwpos	int
-	O
gatherrpos	int
+	O
GATHERBUFSIZE	O
)	O
%	O
GATHERBUFSIZE	O
;	O
int	O
first	int
=	O
GATHERBUFSIZE	O
-	O
gatherrpos	int
;	O
int	O
second	int
=	O
length	int
-	O
first	int
;	O
if	O
(	O
!	O
level	int
)	O
return	O
0	int
;	O
if	O
(	O
level	int
==	O
2	int
)	O
assert	function
(	O
avail	int
)	O
;	O
if	O
(	O
length	int
>	O
avail	int
)	O
length	int
=	O
avail	int
;	O
if	O
(	O
first	int
>	O
length	int
)	O
first	int
=	O
length	int
;	O
(	O
*	O
add	pointer
)	O
(	O
&	O
gatherbuf	char
[	O
gatherrpos	int
]	O
,	O
first	int
,	O
requester	int
)	O
;	O
gatherrpos	int
=	O
(	O
gatherrpos	int
+	O
first	int
)	O
%	O
GATHERBUFSIZE	O
;	O
if	O
(	O
second	int
>	O
0	int
)	O
{	O
(	O
*	O
add	pointer
)	O
(	O
&	O
gatherbuf	char
[	O
gatherrpos	int
]	O
,	O
second	int
,	O
requester	int
)	O
;	O
gatherrpos	int
+=	O
second	int
;	O
}	O
return	O
length	int
;	O
}	O
const	O
char	O
*	O
argp_program_version	pointer
=	O
STANDARD_HURD_VERSION	function
(	O
random	O
)	O
;	O
static	O
pthread_mutex_t	O
global_lock	int
;	O
int	O
trivfs_fstype	int
=	O
FSTYPE_MISC	O
;	O
int	O
trivfs_fsid	int
=	O
0	int
;	O
int	O
trivfs_allow_open	int
=	O
O_READ	O
|	O
O_WRITE	O
;	O
int	O
trivfs_support_read	int
=	O
1	int
;	O
int	O
trivfs_support_write	int
=	O
1	int
;	O
int	O
trivfs_support_exec	int
=	O
0	int
;	O
void	O
trivfs_modify_stat	function
(	O
struct	O
trivfs_protid	O
*	O
cred	pointer
,	O
struct	O
stat	O
*	O
st	pointer
)	O
{	O
st	pointer
->	O
st_mode	O
&=	O
~	O
S_IFMT	O
;	O
st	pointer
->	O
st_mode	O
|=	O
(	O
S_IFCHR	O
)	O
;	O
st	pointer
->	O
st_size	O
=	O
0	int
;	O
}	O
error_t	O
trivfs_goaway	function
(	O
struct	O
trivfs_control	O
*	O
cntl	pointer
,	O
int	O
flags	int
)	O
{	O
update_random_seed_file	function
(	O
)	O
;	O
exit	O
(	O
0	int
)	O
;	O
}	O
error_t	O
trivfs_S_io_read	function
(	O
struct	O
trivfs_protid	O
*	O
cred	pointer
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
data_t	O
*	O
data	pointer
,	O
mach_msg_type_number_t	O
*	O
data_len	pointer
,	O
loff_t	O
offs	int
,	O
mach_msg_type_number_t	O
amount	int
)	O
{	O
error_t	O
err	O
;	O
mach_msg_type_number_t	O
read_amount	O
=	O
0	int
;	O
void	O
*	O
buf	pointer
=	O
NULL	O
;	O
size_t	int
length	int
;	O
if	O
(	O
!	O
cred	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
else	O
if	O
(	O
!	O
(	O
cred	pointer
->	O
po	O
->	O
openmodes	O
&	O
O_READ	O
)	O
)	O
return	O
EBADF	O
;	O
pthread_mutex_lock	function
(	O
&	O
global_lock	int
)	O
;	O
while	O
(	O
amount	int
>	O
0	int
)	O
{	O
mach_msg_type_number_t	O
new_amount	O
;	O
while	O
(	O
readable_pool	function
(	O
amount	int
,	O
level	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
cred	pointer
->	O
po	O
->	O
openmodes	O
&	O
O_NONBLOCK	O
)	O
{	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	int
)	O
;	O
err	O
=	O
EWOULDBLOCK	O
;	O
goto	O
errout	O
;	O
}	O
read_blocked	int
=	O
1	int
;	O
if	O
(	O
pthread_hurd_cond_wait_np	function
(	O
&	O
wait	int
,	O
&	O
global_lock	int
)	O
)	O
{	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	int
)	O
;	O
err	O
=	O
EINTR	O
;	O
goto	O
errout	O
;	O
}	O
}	O
if	O
(	O
*	O
data_len	pointer
<	O
amount	int
)	O
{	O
*	O
data	pointer
=	O
mmap	function
(	O
0	int
,	O
amount	int
,	O
PROT_READ	O
|	O
PROT_WRITE	O
,	O
MAP_ANON	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
*	O
data	pointer
==	O
MAP_FAILED	O
)	O
{	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	int
)	O
;	O
return	O
errno	O
;	O
}	O
buf	pointer
=	O
*	O
data	pointer
,	O
length	int
=	O
amount	int
;	O
*	O
data_len	pointer
=	O
amount	int
;	O
}	O
new_amount	O
=	O
read_pool	function
(	O
(	O
(	O
byte	O
*	O
)	O
*	O
data	pointer
)	O
+	O
read_amount	O
,	O
amount	int
,	O
level	int
)	O
;	O
read_amount	O
+=	O
new_amount	O
;	O
amount	int
-=	O
new_amount	O
;	O
}	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	int
)	O
;	O
*	O
data_len	pointer
=	O
read_amount	O
;	O
return	O
0	int
;	O
errout	O
:	O
if	O
(	O
buf	pointer
)	O
munmap	function
(	O
buf	pointer
,	O
length	int
)	O
;	O
return	O
err	O
;	O
}	O
error_t	O
trivfs_S_io_write	function
(	O
struct	O
trivfs_protid	O
*	O
cred	pointer
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
replytype	int
,	O
data_t	O
data	pointer
,	O
mach_msg_type_number_t	O
datalen	int
,	O
loff_t	O
offset	int
,	O
mach_msg_type_number_t	O
*	O
amount	int
)	O
{	O
int	O
i	int
=	O
0	int
;	O
if	O
(	O
!	O
cred	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
else	O
if	O
(	O
!	O
(	O
cred	pointer
->	O
po	O
->	O
openmodes	O
&	O
O_WRITE	O
)	O
)	O
return	O
EBADF	O
;	O
pthread_mutex_lock	function
(	O
&	O
global_lock	int
)	O
;	O
while	O
(	O
i	int
<	O
datalen	int
)	O
{	O
gatherbuf	char
[	O
gatherwpos	int
]	O
=	O
data	pointer
[	O
i	int
++	O
]	O
;	O
gatherwpos	int
=	O
(	O
gatherwpos	int
+	O
1	int
)	O
%	O
GATHERBUFSIZE	O
;	O
if	O
(	O
gatherrpos	int
==	O
gatherwpos	int
)	O
gatherrpos	int
=	O
(	O
gatherrpos	int
+	O
1	int
)	O
%	O
GATHERBUFSIZE	O
;	O
}	O
*	O
amount	int
=	O
datalen	int
;	O
if	O
(	O
datalen	int
>	O
0	int
&&	O
read_blocked	int
)	O
{	O
read_blocked	int
=	O
0	int
;	O
pthread_cond_broadcast	function
(	O
&	O
wait	int
)	O
;	O
pthread_cond_broadcast	function
(	O
&	O
select_alert	int
)	O
;	O
}	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	int
)	O
;	O
return	O
0	int
;	O
}	O
kern_return_t	O
trivfs_S_io_readable	function
(	O
struct	O
trivfs_protid	O
*	O
cred	pointer
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
replytype	int
,	O
mach_msg_type_number_t	O
*	O
amount	int
)	O
{	O
if	O
(	O
!	O
cred	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
else	O
if	O
(	O
!	O
(	O
cred	pointer
->	O
po	O
->	O
openmodes	O
&	O
O_READ	O
)	O
)	O
return	O
EBADF	O
;	O
pthread_mutex_lock	function
(	O
&	O
global_lock	int
)	O
;	O
*	O
amount	int
=	O
readable_pool	function
(	O
POOLSIZE	int
/	O
2	int
,	O
level	int
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	int
)	O
;	O
return	O
0	int
;	O
}	O
error_t	O
trivfs_S_io_select	function
(	O
struct	O
trivfs_protid	O
*	O
cred	pointer
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
int	O
*	O
type	pointer
)	O
{	O
if	O
(	O
!	O
cred	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
if	O
(	O
*	O
type	pointer
&	O
~	O
(	O
SELECT_READ	O
|	O
SELECT_WRITE	O
)	O
)	O
return	O
EINVAL	O
;	O
if	O
(	O
*	O
type	pointer
==	O
0	int
)	O
return	O
0	int
;	O
pthread_mutex_lock	function
(	O
&	O
global_lock	int
)	O
;	O
while	O
(	O
1	int
)	O
{	O
int	O
avail	int
=	O
readable_pool	function
(	O
POOLSIZE	int
/	O
2	int
,	O
level	int
)	O
;	O
if	O
(	O
avail	int
!=	O
0	int
||	O
*	O
type	pointer
&	O
SELECT_WRITE	O
)	O
{	O
*	O
type	pointer
=	O
(	O
avail	int
?	O
SELECT_READ	O
:	O
0	int
)	O
|	O
(	O
*	O
type	pointer
&	O
SELECT_WRITE	O
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	int
)	O
;	O
return	O
0	int
;	O
}	O
ports_interrupt_self_on_port_death	function
(	O
cred	pointer
,	O
reply	int
)	O
;	O
read_blocked	int
=	O
1	int
;	O
if	O
(	O
pthread_hurd_cond_wait_np	function
(	O
&	O
select_alert	int
,	O
&	O
global_lock	int
)	O
)	O
{	O
*	O
type	pointer
=	O
0	int
;	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	int
)	O
;	O
return	O
EINTR	O
;	O
}	O
}	O
}	O
error_t	O
trivfs_S_io_seek	function
(	O
struct	O
trivfs_protid	O
*	O
cred	pointer
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
loff_t	O
offs	int
,	O
int	O
whence	int
,	O
loff_t	O
*	O
new_offs	pointer
)	O
{	O
if	O
(	O
!	O
cred	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
return	O
ESPIPE	O
;	O
}	O
error_t	O
trivfs_S_file_set_size	function
(	O
struct	O
trivfs_protid	O
*	O
cred	pointer
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
loff_t	O
size	int
)	O
{	O
if	O
(	O
!	O
cred	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
return	O
size	int
==	O
0	int
?	O
0	int
:	O
EINVAL	O
;	O
}	O
error_t	O
trivfs_S_io_set_all_openmodes	function
(	O
struct	O
trivfs_protid	O
*	O
cred	pointer
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
int	O
mode	int
)	O
{	O
if	O
(	O
!	O
cred	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
return	O
0	int
;	O
}	O
error_t	O
trivfs_S_io_set_some_openmodes	function
(	O
struct	O
trivfs_protid	O
*	O
cred	pointer
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
int	O
bits	int
)	O
{	O
if	O
(	O
!	O
cred	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
return	O
0	int
;	O
}	O
error_t	O
trivfs_S_io_get_owner	function
(	O
struct	O
trivfs_protid	O
*	O
cred	pointer
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
pid_t	O
*	O
owner	pointer
)	O
{	O
if	O
(	O
!	O
cred	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
*	O
owner	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
error_t	O
trivfs_S_io_mod_owner	function
(	O
struct	O
trivfs_protid	O
*	O
cred	pointer
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
pid_t	O
owner	pointer
)	O
{	O
if	O
(	O
!	O
cred	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
return	O
EINVAL	O
;	O
}	O
error_t	O
trivfs_S_io_map	function
(	O
struct	O
trivfs_protid	O
*	O
cred	pointer
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
mach_port_t	O
*	O
rdobj	pointer
,	O
mach_msg_type_name_t	O
*	O
rdtype	pointer
,	O
mach_port_t	O
*	O
wrobj	pointer
,	O
mach_msg_type_name_t	O
*	O
wrtype	pointer
)	O
{	O
if	O
(	O
!	O
cred	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
return	O
EINVAL	O
;	O
}	O
int	O
random_demuxer	function
(	O
mach_msg_header_t	O
*	O
inp	pointer
,	O
mach_msg_header_t	O
*	O
outp	pointer
)	O
{	O
extern	O
int	O
startup_notify_server	function
(	O
mach_msg_header_t	O
*	O
,	O
mach_msg_header_t	O
*	O
)	O
;	O
return	O
(	O
trivfs_demuxer	function
(	O
inp	pointer
,	O
outp	pointer
)	O
||	O
startup_notify_server	function
(	O
inp	pointer
,	O
outp	pointer
)	O
)	O
;	O
}	O
static	O
const	O
struct	O
argp_option	O
options	int
[	O
]	O
=	O
{	O
{	O
"weak"	pointer
,	O
'w'	O
,	O
0	int
,	O
0	int
,	O
"Output weak pseudo random data"	pointer
}	O
,	O
{	O
"fast"	pointer
,	O
'f'	O
,	O
0	int
,	O
0	int
,	O
"Output cheap random data fast"	pointer
}	O
,	O
{	O
"secure"	pointer
,	O
's'	O
,	O
0	int
,	O
0	int
,	O
"Output cryptographically secure random"	pointer
}	O
,	O
{	O
"seed-file"	pointer
,	O
'S'	O
,	O
"FILE"	pointer
,	O
0	int
,	O
"Use FILE to remember the seed"	pointer
}	O
,	O
{	O
0	int
}	O
}	O
;	O
static	O
error_t	O
parse_opt	function
(	O
int	O
opt	int
,	O
char	O
*	O
arg	pointer
,	O
struct	O
argp_state	O
*	O
state	pointer
)	O
{	O
switch	O
(	O
opt	int
)	O
{	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
case	O
ARGP_KEY_INIT	O
:	O
case	O
ARGP_KEY_SUCCESS	O
:	O
case	O
ARGP_KEY_ERROR	O
:	O
break	O
;	O
case	O
'w'	O
:	O
{	O
level	int
=	O
0	int
;	O
break	O
;	O
}	O
case	O
'f'	O
:	O
{	O
level	int
=	O
1	int
;	O
break	O
;	O
}	O
case	O
's'	O
:	O
{	O
level	int
=	O
2	int
;	O
break	O
;	O
}	O
case	O
'S'	O
:	O
{	O
seed_file	pointer
=	O
strdup	O
(	O
arg	pointer
)	O
;	O
set_random_seed_file	function
(	O
arg	pointer
)	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
error_t	O
trivfs_append_args	function
(	O
struct	O
trivfs_control	O
*	O
fsys	pointer
,	O
char	O
*	O
*	O
argz	pointer
,	O
size_t	int
*	O
argz_len	pointer
)	O
{	O
error_t	O
err	O
=	O
0	int
;	O
char	O
*	O
opt	int
;	O
pthread_mutex_lock	function
(	O
&	O
global_lock	int
)	O
;	O
switch	O
(	O
level	int
)	O
{	O
case	O
0	int
:	O
opt	int
=	O
"--weak"	pointer
;	O
break	O
;	O
case	O
1	int
:	O
opt	int
=	O
"--fast"	pointer
;	O
break	O
;	O
default	O
:	O
opt	int
=	O
"--secure"	pointer
;	O
}	O
if	O
(	O
level	int
!=	O
DEFAULT_LEVEL	int
)	O
err	O
=	O
argz_add	function
(	O
argz	pointer
,	O
argz_len	pointer
,	O
opt	int
)	O
;	O
if	O
(	O
!	O
err	O
&&	O
seed_file	pointer
)	O
{	O
if	O
(	O
asprintf	function
(	O
&	O
opt	int
,	O
"--seed-file=%s"	pointer
,	O
seed_file	pointer
)	O
<	O
0	int
)	O
err	O
=	O
ENOMEM	O
;	O
else	O
{	O
err	O
=	O
argz_add	function
(	O
argz	pointer
,	O
argz_len	pointer
,	O
opt	int
)	O
;	O
free	function
(	O
opt	int
)	O
;	O
}	O
}	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	int
)	O
;	O
return	O
err	O
;	O
}	O
static	O
struct	O
argp	O
random_argp	struct
=	O
{	O
options	int
,	O
parse_opt	function
,	O
0	int
,	O
"A translator providing random output."	pointer
}	O
;	O
struct	O
argp	O
*	O
trivfs_runtime_argp	pointer
=	O
&	O
random_argp	struct
;	O
struct	O
port_class	O
*	O
shutdown_notify_class	pointer
;	O
error_t	O
S_startup_dosync	function
(	O
mach_port_t	O
handle	int
)	O
{	O
struct	O
port_info	O
*	O
inpi	pointer
=	O
ports_lookup_port	function
(	O
fsys	pointer
->	O
pi	pointer
.	O
bucket	O
,	O
handle	int
,	O
shutdown_notify_class	pointer
)	O
;	O
if	O
(	O
!	O
inpi	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
update_random_seed_file	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
void	O
sigterm_handler	function
(	O
int	O
signo	int
)	O
{	O
update_random_seed_file	function
(	O
)	O
;	O
signal	function
(	O
SIGTERM	O
,	O
SIG_DFL	O
)	O
;	O
raise	function
(	O
SIGTERM	O
)	O
;	O
}	O
static	O
error_t	O
arrange_shutdown_notification	function
(	O
)	O
{	O
error_t	O
err	O
;	O
mach_port_t	O
initport	O
,	O
notify	O
;	O
struct	O
port_info	O
*	O
pi	pointer
;	O
shutdown_notify_class	pointer
=	O
ports_create_class	function
(	O
0	int
,	O
0	int
)	O
;	O
signal	function
(	O
SIGTERM	O
,	O
sigterm_handler	function
)	O
;	O
err	O
=	O
ports_create_port	function
(	O
shutdown_notify_class	pointer
,	O
fsys	pointer
->	O
pi	pointer
.	O
bucket	O
,	O
sizeof	O
(	O
struct	O
port_info	O
)	O
,	O
&	O
pi	pointer
)	O
;	O
if	O
(	O
err	O
)	O
return	O
err	O
;	O
initport	O
=	O
file_name_lookup	function
(	O
_SERVERS_STARTUP	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
!	O
MACH_PORT_VALID	function
(	O
initport	O
)	O
)	O
return	O
errno	O
;	O
notify	O
=	O
ports_get_send_right	function
(	O
pi	pointer
)	O
;	O
ports_port_deref	function
(	O
pi	pointer
)	O
;	O
err	O
=	O
startup_request_notification	function
(	O
initport	O
,	O
notify	O
,	O
MACH_MSG_TYPE_MAKE_SEND	O
,	O
program_invocation_short_name	O
)	O
;	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
notify	O
)	O
;	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
initport	O
)	O
;	O
return	O
err	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
error_t	O
err	O
;	O
mach_port_t	O
bootstrap	O
;	O
pthread_mutex_init	function
(	O
&	O
global_lock	int
,	O
NULL	O
)	O
;	O
pthread_cond_init	function
(	O
&	O
wait	int
,	O
NULL	O
)	O
;	O
pthread_cond_init	function
(	O
&	O
select_alert	int
,	O
NULL	O
)	O
;	O
argp_parse	function
(	O
&	O
random_argp	struct
,	O
argc	int
,	O
argv	pointer
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
task_get_bootstrap_port	function
(	O
mach_task_self	function
(	O
)	O
,	O
&	O
bootstrap	O
)	O
;	O
if	O
(	O
bootstrap	O
==	O
MACH_PORT_NULL	O
)	O
error	function
(	O
1	int
,	O
0	int
,	O
"Must be started as a translator"	pointer
)	O
;	O
err	O
=	O
trivfs_startup	function
(	O
bootstrap	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
&	O
fsys	pointer
)	O
;	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
bootstrap	O
)	O
;	O
if	O
(	O
err	O
)	O
error	function
(	O
3	int
,	O
err	O
,	O
"trivfs_startup"	pointer
)	O
;	O
err	O
=	O
arrange_shutdown_notification	function
(	O
)	O
;	O
if	O
(	O
err	O
)	O
error	function
(	O
0	int
,	O
err	O
,	O
"Warning: cannot request shutdown notification"	pointer
)	O
;	O
ports_manage_port_operations_multithread	function
(	O
fsys	pointer
->	O
pi	pointer
.	O
bucket	O
,	O
random_demuxer	function
,	O
10	int
*	O
1000	int
,	O
10	int
*	O
60	int
*	O
1000	int
,	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
