int	O
silent	int
;	O
char	O
*	O
rcurdir	pointer
;	O
char	O
*	O
curdir	pointer
;	O
static	O
void	O
vmsg	function
(	O
const	O
char	O
*	O
,	O
int	O
,	O
va_list	array
)	O
;	O
void	O
quit	function
(	O
int	O
code	int
,	O
int	O
err_num	int
,	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
args	array
;	O
va_start	O
(	O
args	array
,	O
fmt	pointer
)	O
;	O
vmsg	function
(	O
fmt	pointer
,	O
err_num	int
,	O
args	array
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
exit	function
(	O
code	int
)	O
;	O
}	O
static	O
void	O
vmsg	function
(	O
const	O
char	O
*	O
fmt	pointer
,	O
int	O
errnum	int
,	O
va_list	array
ap	array
)	O
{	O
assert	O
(	O
fmt	pointer
&&	O
fmt	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
curdir	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s:\n"	pointer
,	O
curdir	pointer
)	O
;	O
curdir	pointer
=	O
0	int
;	O
}	O
vfprintf	function
(	O
stderr	pointer
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
if	O
(	O
errnum	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
": %s"	pointer
,	O
strerror	function
(	O
errnum	int
)	O
)	O
;	O
}	O
putc	function
(	O
'\n'	O
,	O
stderr	pointer
)	O
;	O
}	O
void	O
mperror	function
(	O
int	O
err_num	int
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
args	array
;	O
va_start	O
(	O
args	array
,	O
fmt	pointer
)	O
;	O
vmsg	function
(	O
fmt	pointer
,	O
err_num	int
,	O
args	array
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
}	O
int	O
equivalent	function
(	O
char	O
*	O
lname	pointer
,	O
const	O
char	O
*	O
rname	pointer
)	O
{	O
char	O
*	O
s	pointer
;	O
if	O
(	O
!	O
strcmp	function
(	O
lname	pointer
,	O
rname	pointer
)	O
)	O
return	O
1	int
;	O
for	O
(	O
s	pointer
=	O
lname	pointer
;	O
*	O
s	pointer
&&	O
(	O
s	pointer
=	O
strchr	function
(	O
s	pointer
,	O
'/'	O
)	O
)	O
;	O
s	pointer
++	O
)	O
{	O
while	O
(	O
s	pointer
[	O
1	int
]	O
==	O
'/'	O
)	O
strcpy	function
(	O
s	pointer
+	O
1	int
,	O
s	pointer
+	O
2	int
)	O
;	O
}	O
return	O
!	O
strcmp	function
(	O
lname	pointer
,	O
rname	pointer
)	O
;	O
}	O
static	O
int	O
is_dir	function
(	O
const	O
struct	O
stat	struct
*	O
p	pointer
)	O
{	O
return	O
S_ISDIR	O
(	O
p	pointer
->	O
st_mode	int
)	O
;	O
}	O
static	O
int	O
ignored	function
(	O
const	O
char	O
*	O
n	pointer
)	O
{	O
const	O
char	O
*	O
histdirs	array
[	O
]	O
=	O
{	O
"SCCS"	pointer
,	O
"RCS"	pointer
,	O
"CVS.adm"	pointer
,	O
"CVS"	pointer
,	O
(	O
const	O
char	O
*	O
)	O
0	int
}	O
;	O
const	O
char	O
*	O
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
histdirs	array
;	O
*	O
p	pointer
;	O
++	O
p	pointer
)	O
{	O
if	O
(	O
0	int
==	O
strcmp	function
(	O
*	O
p	pointer
,	O
n	pointer
)	O
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
is_dot_or_dotdot	function
(	O
const	O
char	O
*	O
p	pointer
)	O
{	O
if	O
(	O
p	pointer
[	O
0	int
]	O
==	O
'.'	O
)	O
{	O
if	O
(	O
p	pointer
[	O
1	int
]	O
==	O
0	int
)	O
{	O
return	O
1	int
;	O
}	O
else	O
if	O
(	O
p	pointer
[	O
1	int
]	O
==	O
'.'	O
&&	O
p	pointer
[	O
2	int
]	O
==	O
0	int
)	O
{	O
return	O
1	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
dodir	function
(	O
const	O
char	O
*	O
fn	pointer
,	O
const	O
struct	O
stat	struct
*	O
fs	short
,	O
const	O
struct	O
stat	struct
*	O
ts	pointer
,	O
int	O
rel	int
)	O
{	O
DIR	struct
*	O
df	pointer
;	O
struct	O
dirent	struct
*	O
dp	pointer
;	O
char	O
buf	array
[	O
MAXPATHLEN	O
+	O
1	int
]	O
,	O
*	O
p	pointer
;	O
char	O
symbuf	array
[	O
MAXPATHLEN	O
+	O
1	int
]	O
;	O
struct	O
stat	struct
sb	struct
,	O
sc	struct
;	O
int	O
symlen	int
;	O
char	O
*	O
ocurdir	pointer
;	O
if	O
(	O
(	O
fs	short
->	O
st_dev	long
==	O
ts	pointer
->	O
st_dev	long
)	O
&&	O
(	O
fs	short
->	O
st_ino	long
==	O
ts	pointer
->	O
st_ino	long
)	O
)	O
{	O
mperror	function
(	O
errno	O
,	O
"%s: From and to directories are identical, "	pointer
"hence no work to do!"	pointer
,	O
fn	pointer
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
rel	int
)	O
strcpy	function
(	O
buf	array
,	O
"../"	pointer
)	O
;	O
else	O
buf	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
strcat	function
(	O
buf	array
,	O
fn	pointer
)	O
;	O
if	O
(	O
!	O
(	O
df	pointer
=	O
opendir	function
(	O
buf	array
)	O
)	O
)	O
{	O
mperror	function
(	O
errno	O
,	O
"%s: Cannot opendir"	pointer
,	O
buf	array
)	O
;	O
return	O
1	int
;	O
}	O
p	pointer
=	O
buf	array
+	O
strlen	function
(	O
buf	array
)	O
;	O
*	O
p	pointer
++	O
=	O
'/'	O
;	O
while	O
(	O
(	O
struct	O
dirent	struct
*	O
)	O
0	int
!=	O
(	O
dp	pointer
=	O
readdir	function
(	O
df	pointer
)	O
)	O
)	O
{	O
const	O
size_t	long
namlen	long
=	O
strlen	function
(	O
dp	pointer
->	O
d_name	array
)	O
;	O
if	O
(	O
namlen	long
)	O
{	O
if	O
(	O
dp	pointer
->	O
d_name	array
[	O
namlen	long
-	O
1	int
]	O
==	O
'~'	O
)	O
continue	O
;	O
}	O
if	O
(	O
is_dot_or_dotdot	function
(	O
dp	pointer
->	O
d_name	array
)	O
)	O
{	O
continue	O
;	O
}	O
strcpy	function
(	O
p	pointer
,	O
dp	pointer
->	O
d_name	array
)	O
;	O
if	O
(	O
1	int
)	O
{	O
if	O
(	O
stat	struct
(	O
buf	array
,	O
&	O
sb	struct
)	O
<	O
0	int
)	O
{	O
mperror	function
(	O
errno	O
,	O
"failed to stat %s"	pointer
,	O
buf	array
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
is_dir	function
(	O
&	O
sb	struct
)	O
)	O
{	O
if	O
(	O
is_dot_or_dotdot	function
(	O
dp	pointer
->	O
d_name	array
)	O
||	O
ignored	function
(	O
dp	pointer
->	O
d_name	array
)	O
)	O
continue	O
;	O
ocurdir	pointer
=	O
rcurdir	pointer
;	O
rcurdir	pointer
=	O
buf	array
;	O
curdir	pointer
=	O
silent	int
?	O
buf	array
:	O
(	O
char	O
*	O
)	O
0	int
;	O
if	O
(	O
!	O
silent	int
)	O
printf	function
(	O
"making links in %s:\n"	pointer
,	O
buf	array
)	O
;	O
if	O
(	O
(	O
stat	struct
(	O
dp	pointer
->	O
d_name	array
,	O
&	O
sc	struct
)	O
<	O
0	int
)	O
&&	O
(	O
errno	O
==	O
ENOENT	int
)	O
)	O
{	O
if	O
(	O
mkdir	function
(	O
dp	pointer
->	O
d_name	array
,	O
0777	int
)	O
<	O
0	int
||	O
stat	struct
(	O
dp	pointer
->	O
d_name	array
,	O
&	O
sc	struct
)	O
<	O
0	int
)	O
{	O
mperror	function
(	O
errno	O
,	O
"failed to stat %s"	pointer
,	O
dp	pointer
->	O
d_name	array
)	O
;	O
curdir	pointer
=	O
rcurdir	pointer
=	O
ocurdir	pointer
;	O
continue	O
;	O
}	O
}	O
if	O
(	O
readlink	function
(	O
dp	pointer
->	O
d_name	array
,	O
symbuf	array
,	O
sizeof	O
(	O
symbuf	array
)	O
-	O
1	int
)	O
>=	O
0	int
)	O
{	O
mperror	function
(	O
0	int
,	O
"%s: is a link instead of a directory"	pointer
,	O
dp	pointer
->	O
d_name	array
)	O
;	O
curdir	pointer
=	O
rcurdir	pointer
=	O
ocurdir	pointer
;	O
continue	O
;	O
}	O
if	O
(	O
chdir	function
(	O
dp	pointer
->	O
d_name	array
)	O
<	O
0	int
)	O
{	O
mperror	function
(	O
errno	O
,	O
"failed to change directory into %s"	pointer
,	O
dp	pointer
->	O
d_name	array
)	O
;	O
curdir	pointer
=	O
rcurdir	pointer
=	O
ocurdir	pointer
;	O
continue	O
;	O
}	O
dodir	function
(	O
buf	array
,	O
&	O
sb	struct
,	O
&	O
sc	struct
,	O
(	O
buf	array
[	O
0	int
]	O
!=	O
'/'	O
)	O
)	O
;	O
if	O
(	O
chdir	function
(	O
".."	pointer
)	O
<	O
0	int
)	O
quit	function
(	O
1	int
,	O
errno	O
,	O
".."	pointer
)	O
;	O
curdir	pointer
=	O
rcurdir	pointer
=	O
ocurdir	pointer
;	O
continue	O
;	O
}	O
}	O
symlen	int
=	O
readlink	function
(	O
dp	pointer
->	O
d_name	array
,	O
symbuf	array
,	O
sizeof	O
(	O
symbuf	array
)	O
-	O
1	int
)	O
;	O
if	O
(	O
symlen	int
>=	O
0	int
)	O
{	O
symbuf	array
[	O
symlen	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
equivalent	function
(	O
symbuf	array
,	O
buf	array
)	O
)	O
mperror	function
(	O
0	int
,	O
"%s: %s"	pointer
,	O
dp	pointer
->	O
d_name	array
,	O
symbuf	array
)	O
;	O
}	O
else	O
if	O
(	O
symlink	function
(	O
buf	array
,	O
dp	pointer
->	O
d_name	array
)	O
<	O
0	int
)	O
mperror	function
(	O
errno	O
,	O
"failed to create a symbolic link %s pointing to %s"	pointer
,	O
dp	pointer
->	O
d_name	array
,	O
buf	array
)	O
;	O
}	O
closedir	function
(	O
df	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
main	function
(	O
int	O
ac	int
,	O
char	O
*	O
av	array
[	O
]	O
)	O
{	O
char	O
*	O
fn	pointer
,	O
*	O
tn	pointer
;	O
struct	O
stat	struct
fs	short
,	O
ts	pointer
;	O
silent	int
=	O
0	int
;	O
if	O
(	O
ac	int
>	O
1	int
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
av	array
[	O
1	int
]	O
,	O
"--silent"	pointer
)	O
)	O
silent	int
=	O
1	int
;	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
av	array
[	O
1	int
]	O
,	O
"-silent"	pointer
)	O
)	O
silent	int
=	O
1	int
;	O
}	O
if	O
(	O
ac	int
<	O
silent	int
+	O
2	int
||	O
ac	int
>	O
silent	int
+	O
3	int
)	O
quit	function
(	O
1	int
,	O
0	int
,	O
"usage: %s [-silent] fromdir [todir]"	pointer
,	O
av	array
[	O
0	int
]	O
)	O
;	O
fn	pointer
=	O
av	array
[	O
silent	int
+	O
1	int
]	O
;	O
if	O
(	O
ac	int
==	O
silent	int
+	O
3	int
)	O
tn	pointer
=	O
av	array
[	O
silent	int
+	O
2	int
]	O
;	O
else	O
tn	pointer
=	O
"."	pointer
;	O
if	O
(	O
stat	struct
(	O
tn	pointer
,	O
&	O
ts	pointer
)	O
<	O
0	int
)	O
quit	function
(	O
1	int
,	O
errno	O
,	O
"%s"	pointer
,	O
tn	pointer
)	O
;	O
if	O
(	O
!	O
is_dir	function
(	O
&	O
ts	pointer
)	O
)	O
quit	function
(	O
2	int
,	O
0	int
,	O
"%s: Not a directory"	pointer
,	O
tn	pointer
)	O
;	O
if	O
(	O
chdir	function
(	O
tn	pointer
)	O
<	O
0	int
)	O
quit	function
(	O
1	int
,	O
errno	O
,	O
"%s"	pointer
,	O
tn	pointer
)	O
;	O
if	O
(	O
stat	struct
(	O
fn	pointer
,	O
&	O
fs	short
)	O
<	O
0	int
)	O
quit	function
(	O
1	int
,	O
errno	O
,	O
"%s"	pointer
,	O
fn	pointer
)	O
;	O
if	O
(	O
!	O
is_dir	function
(	O
&	O
fs	short
)	O
)	O
quit	function
(	O
2	int
,	O
0	int
,	O
"%s: Not a directory"	pointer
,	O
fn	pointer
)	O
;	O
return	O
dodir	function
(	O
fn	pointer
,	O
&	O
fs	short
,	O
&	O
ts	pointer
,	O
0	int
)	O
;	O
}	O
