static	O
char	O
*	O
extract_rules	function
(	O
FILE	struct
*	O
fp	pointer
,	O
const	O
char	O
*	O
real_filename	pointer
,	O
const	O
char	O
*	O
logical_filename	pointer
,	O
const	O
char	O
*	O
locale	pointer
)	O
{	O
xmlDocPtr	pointer
doc	pointer
;	O
xmlNodePtr	pointer
node	pointer
,	O
n	long
;	O
size_t	long
locale_length	long
;	O
char	O
*	O
buffer	pointer
=	O
NULL	O
,	O
*	O
p	pointer
;	O
size_t	long
bufmax	long
=	O
0	int
;	O
size_t	long
buflen	long
=	O
0	int
;	O
doc	pointer
=	O
xmlReadFd	function
(	O
fileno	function
(	O
fp	pointer
)	O
,	O
logical_filename	pointer
,	O
NULL	O
,	O
XML_PARSE_NONET	int
|	O
XML_PARSE_NOWARNING	int
|	O
XML_PARSE_NOBLANKS	int
)	O
;	O
if	O
(	O
doc	pointer
==	O
NULL	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"Could not parse file %s as XML"	pointer
)	O
,	O
logical_filename	pointer
)	O
;	O
node	pointer
=	O
xmlDocGetRootElement	function
(	O
doc	pointer
)	O
;	O
if	O
(	O
!	O
node	pointer
||	O
!	O
xmlStrEqual	function
(	O
node	pointer
->	O
name	pointer
,	O
BAD_CAST	O
"supplementalData"	pointer
)	O
)	O
{	O
error_at_line	function
(	O
0	int
,	O
0	int
,	O
logical_filename	pointer
,	O
xmlGetLineNo	function
(	O
node	pointer
)	O
,	O
_	O
(	O
"The root element must be <%s>"	pointer
)	O
,	O
"supplementalData"	pointer
)	O
;	O
goto	O
out	pointer
;	O
}	O
for	O
(	O
n	long
=	O
node	pointer
->	O
children	pointer
;	O
n	long
;	O
n	long
=	O
n	long
->	O
next	pointer
)	O
{	O
if	O
(	O
n	long
->	O
type	enum
==	O
XML_ELEMENT_NODE	int
&&	O
xmlStrEqual	function
(	O
n	long
->	O
name	pointer
,	O
BAD_CAST	O
"plurals"	pointer
)	O
)	O
break	O
;	O
}	O
if	O
(	O
!	O
n	long
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"The element <%s> does not contain a <%s> element"	pointer
)	O
,	O
"supplementalData"	pointer
,	O
"plurals"	pointer
)	O
;	O
goto	O
out	pointer
;	O
}	O
locale_length	long
=	O
strlen	function
(	O
locale	pointer
)	O
;	O
for	O
(	O
n	long
=	O
n	long
->	O
children	pointer
;	O
n	long
;	O
n	long
=	O
n	long
->	O
next	pointer
)	O
{	O
xmlChar	char
*	O
locales	pointer
;	O
xmlChar	char
*	O
cp	pointer
;	O
xmlNodePtr	pointer
n2	pointer
;	O
bool	bool
found	bool
=	O
false	int
;	O
if	O
(	O
n	long
->	O
type	enum
!=	O
XML_ELEMENT_NODE	int
||	O
!	O
xmlStrEqual	function
(	O
n	long
->	O
name	pointer
,	O
BAD_CAST	O
"pluralRules"	pointer
)	O
)	O
continue	O
;	O
if	O
(	O
!	O
xmlHasProp	function
(	O
n	long
,	O
BAD_CAST	O
"locales"	pointer
)	O
)	O
{	O
error_at_line	function
(	O
0	int
,	O
0	int
,	O
logical_filename	pointer
,	O
xmlGetLineNo	function
(	O
n	long
)	O
,	O
_	O
(	O
"The element <%s> does not have attribute <%s>"	pointer
)	O
,	O
"pluralRules"	pointer
,	O
"locales"	pointer
)	O
;	O
continue	O
;	O
}	O
cp	pointer
=	O
locales	pointer
=	O
xmlGetProp	function
(	O
n	long
,	O
BAD_CAST	O
"locales"	pointer
)	O
;	O
while	O
(	O
*	O
cp	pointer
!=	O
'\0'	O
)	O
{	O
while	O
(	O
c_isspace	function
(	O
*	O
cp	pointer
)	O
)	O
cp	pointer
++	O
;	O
if	O
(	O
xmlStrncmp	function
(	O
cp	pointer
,	O
BAD_CAST	O
locale	pointer
,	O
locale_length	long
)	O
==	O
0	int
&&	O
(	O
*	O
(	O
cp	pointer
+	O
locale_length	long
)	O
==	O
'\0'	O
||	O
c_isspace	function
(	O
*	O
(	O
cp	pointer
+	O
locale_length	long
)	O
)	O
)	O
)	O
{	O
found	bool
=	O
true	int
;	O
break	O
;	O
}	O
while	O
(	O
*	O
cp	pointer
&&	O
!	O
c_isspace	function
(	O
*	O
cp	pointer
)	O
)	O
cp	pointer
++	O
;	O
}	O
xmlFree	pointer
(	O
locales	pointer
)	O
;	O
if	O
(	O
!	O
found	bool
)	O
continue	O
;	O
for	O
(	O
n2	pointer
=	O
n	long
->	O
children	pointer
;	O
n2	pointer
;	O
n2	pointer
=	O
n2	pointer
->	O
next	pointer
)	O
{	O
xmlChar	char
*	O
count	int
;	O
xmlChar	char
*	O
content	pointer
;	O
size_t	long
length	int
;	O
if	O
(	O
n2	pointer
->	O
type	enum
!=	O
XML_ELEMENT_NODE	int
||	O
!	O
xmlStrEqual	function
(	O
n2	pointer
->	O
name	pointer
,	O
BAD_CAST	O
"pluralRule"	pointer
)	O
)	O
continue	O
;	O
if	O
(	O
!	O
xmlHasProp	function
(	O
n2	pointer
,	O
BAD_CAST	O
"count"	pointer
)	O
)	O
{	O
error_at_line	function
(	O
0	int
,	O
0	int
,	O
logical_filename	pointer
,	O
xmlGetLineNo	function
(	O
n2	pointer
)	O
,	O
_	O
(	O
"The element <%s> does not have attribute <%s>"	pointer
)	O
,	O
"pluralRule"	pointer
,	O
"count"	pointer
)	O
;	O
break	O
;	O
}	O
count	int
=	O
xmlGetProp	function
(	O
n2	pointer
,	O
BAD_CAST	O
"count"	pointer
)	O
;	O
content	pointer
=	O
xmlNodeGetContent	function
(	O
n2	pointer
)	O
;	O
length	int
=	O
xmlStrlen	function
(	O
count	int
)	O
+	O
strlen	function
(	O
": "	pointer
)	O
+	O
xmlStrlen	function
(	O
content	pointer
)	O
+	O
strlen	function
(	O
"; "	pointer
)	O
;	O
if	O
(	O
buflen	long
+	O
length	int
+	O
1	int
>	O
bufmax	long
)	O
{	O
bufmax	long
*=	O
2	int
;	O
if	O
(	O
bufmax	long
<	O
buflen	long
+	O
length	int
+	O
1	int
)	O
bufmax	long
=	O
buflen	long
+	O
length	int
+	O
1	int
;	O
buffer	pointer
=	O
(	O
char	O
*	O
)	O
xrealloc	function
(	O
buffer	pointer
,	O
bufmax	long
)	O
;	O
}	O
sprintf	function
(	O
buffer	pointer
+	O
buflen	long
,	O
"%s: %s; "	pointer
,	O
count	int
,	O
content	pointer
)	O
;	O
xmlFree	pointer
(	O
count	int
)	O
;	O
xmlFree	pointer
(	O
content	pointer
)	O
;	O
buflen	long
+=	O
length	int
;	O
}	O
}	O
if	O
(	O
buffer	pointer
)	O
{	O
p	pointer
=	O
strrchr	function
(	O
buffer	pointer
,	O
';'	O
)	O
;	O
if	O
(	O
p	pointer
)	O
*	O
p	pointer
=	O
'\0'	O
;	O
}	O
out	pointer
:	O
xmlFreeDoc	function
(	O
doc	pointer
)	O
;	O
return	O
buffer	pointer
;	O
}	O
static	O
void	O
usage	function
(	O
int	O
status	pointer
)	O
{	O
if	O
(	O
status	pointer
!=	O
EXIT_SUCCESS	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"Try '%s --help' for more information.\n"	pointer
)	O
,	O
program_name	pointer
)	O
;	O
else	O
{	O
printf	function
(	O
_	O
(	O
"Usage: %s [OPTION...] [LOCALE RULES]...\n"	pointer
)	O
,	O
program_name	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Extract or convert Unicode CLDR plural rules.\n\nIf both LOCALE and RULES are specified, it reads CLDR plural rules for\nLOCALE from RULES and print them in a form suitable for gettext use.\nIf no argument is given, it reads CLDR plural rules from the standard input.\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Mandatory arguments to long options are mandatory for short options too.\nSimilarly for optional arguments.\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"  -c, --cldr                  print plural rules in the CLDR format\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -h, --help                  display this help and exit\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -V, --version               output version information and exit\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"Report bugs to <bug-gnu-gettext@gnu.org>.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
}	O
exit	function
(	O
status	pointer
)	O
;	O
}	O
static	O
const	O
struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
"cldr"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'c'	O
}	O
,	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'h'	O
}	O
,	O
{	O
"version"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'V'	O
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
bool	bool
opt_cldr_format	bool
=	O
false	int
;	O
bool	bool
do_help	bool
=	O
false	int
;	O
bool	bool
do_version	bool
=	O
false	int
;	O
int	O
optchar	int
;	O
set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
setlocale	function
(	O
LC_ALL	O
,	O
""	pointer
)	O
;	O
bindtextdomain	function
(	O
PACKAGE	pointer
,	O
relocate	O
(	O
LOCALEDIR	O
)	O
)	O
;	O
bindtextdomain	function
(	O
"bison-runtime"	pointer
,	O
relocate	O
(	O
BISON_LOCALEDIR	O
)	O
)	O
;	O
textdomain	function
(	O
PACKAGE	pointer
)	O
;	O
atexit	function
(	O
close_stdout	function
)	O
;	O
while	O
(	O
(	O
optchar	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"chV"	pointer
,	O
long_options	array
,	O
NULL	O
)	O
)	O
!=	O
EOF	O
)	O
switch	O
(	O
optchar	int
)	O
{	O
case	O
'\0'	O
:	O
break	O
;	O
case	O
'c'	O
:	O
opt_cldr_format	bool
=	O
true	int
;	O
break	O
;	O
case	O
'h'	O
:	O
do_help	bool
=	O
true	int
;	O
break	O
;	O
case	O
'V'	O
:	O
do_version	bool
=	O
true	int
;	O
break	O
;	O
default	O
:	O
usage	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
do_version	bool
)	O
{	O
printf	function
(	O
"%s (GNU %s) %s\n"	pointer
,	O
basename	function
(	O
program_name	pointer
)	O
,	O
PACKAGE	pointer
,	O
VERSION	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Copyright (C) %s Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n"	pointer
)	O
,	O
"2015-2019"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Written by %s.\n"	pointer
)	O
,	O
proper_name	function
(	O
"Daiki Ueno"	pointer
)	O
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
if	O
(	O
do_help	bool
)	O
usage	function
(	O
EXIT_SUCCESS	int
)	O
;	O
if	O
(	O
argc	int
==	O
optind	int
+	O
2	int
)	O
{	O
const	O
char	O
*	O
locale	pointer
=	O
argv	pointer
[	O
optind	int
]	O
;	O
const	O
char	O
*	O
logical_filename	pointer
=	O
argv	pointer
[	O
optind	int
+	O
1	int
]	O
;	O
char	O
*	O
extracted_rules	pointer
;	O
FILE	struct
*	O
fp	pointer
;	O
LIBXML_TEST_VERSION	O
fp	pointer
=	O
fopen	function
(	O
logical_filename	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
fp	pointer
==	O
NULL	O
)	O
error	function
(	O
1	int
,	O
0	int
,	O
_	O
(	O
"%s cannot be read"	pointer
)	O
,	O
logical_filename	pointer
)	O
;	O
extracted_rules	pointer
=	O
extract_rules	function
(	O
fp	pointer
,	O
logical_filename	pointer
,	O
logical_filename	pointer
,	O
locale	pointer
)	O
;	O
fclose	function
(	O
fp	pointer
)	O
;	O
if	O
(	O
extracted_rules	pointer
==	O
NULL	O
)	O
error	function
(	O
1	int
,	O
0	int
,	O
_	O
(	O
"cannot extract rules for %s"	pointer
)	O
,	O
locale	pointer
)	O
;	O
if	O
(	O
opt_cldr_format	bool
)	O
printf	function
(	O
"%s\n"	pointer
,	O
extracted_rules	pointer
)	O
;	O
else	O
{	O
struct	O
cldr_plural_rule_list_ty	struct
*	O
result	pointer
;	O
result	pointer
=	O
cldr_plural_parse	function
(	O
extracted_rules	pointer
)	O
;	O
if	O
(	O
result	pointer
==	O
NULL	O
)	O
error	function
(	O
1	int
,	O
0	int
,	O
_	O
(	O
"cannot parse CLDR rule"	pointer
)	O
)	O
;	O
cldr_plural_rule_list_print	function
(	O
result	pointer
,	O
stdout	pointer
)	O
;	O
cldr_plural_rule_list_free	function
(	O
result	pointer
)	O
;	O
}	O
free	pointer
(	O
extracted_rules	pointer
)	O
;	O
}	O
else	O
if	O
(	O
argc	int
==	O
optind	int
)	O
{	O
char	O
*	O
line	short
=	O
NULL	O
;	O
size_t	long
line_size	long
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
line_len	int
;	O
struct	O
cldr_plural_rule_list_ty	struct
*	O
result	pointer
;	O
line_len	int
=	O
getline	function
(	O
&	O
line	short
,	O
&	O
line_size	long
,	O
stdin	pointer
)	O
;	O
if	O
(	O
line_len	int
<	O
0	int
)	O
break	O
;	O
if	O
(	O
line_len	int
>	O
0	int
&&	O
line	short
[	O
line_len	int
-	O
1	int
]	O
==	O
'\n'	O
)	O
line	short
[	O
--	O
line_len	int
]	O
=	O
'\0'	O
;	O
result	pointer
=	O
cldr_plural_parse	function
(	O
line	short
)	O
;	O
if	O
(	O
result	pointer
)	O
{	O
cldr_plural_rule_list_print	function
(	O
result	pointer
,	O
stdout	pointer
)	O
;	O
cldr_plural_rule_list_free	function
(	O
result	pointer
)	O
;	O
}	O
}	O
free	pointer
(	O
line	short
)	O
;	O
}	O
else	O
{	O
error	function
(	O
1	int
,	O
0	int
,	O
_	O
(	O
"extra operand %s"	pointer
)	O
,	O
argv	pointer
[	O
optind	int
]	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
