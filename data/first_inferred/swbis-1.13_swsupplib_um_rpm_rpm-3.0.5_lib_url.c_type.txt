int	O
url_iobuf_size	int
=	O
URL_IOBUF_SIZE	int
;	O
int	O
_url_debug	int
=	O
0	int
;	O
static	O
urlinfo	struct
*	O
uCache	pointer
=	O
NULL	O
;	O
static	O
int	O
uCount	int
=	O
0	int
;	O
urlinfo	struct
XurlLink	function
(	O
urlinfo	struct
u	union
,	O
const	O
char	O
*	O
msg	pointer
,	O
const	O
char	O
*	O
file	pointer
,	O
unsigned	O
line	int
)	O
{	O
URLSANE	O
(	O
u	union
)	O
;	O
u	union
->	O
nrefs	int
++	O
;	O
DBGREFS	O
(	O
0	int
,	O
(	O
stderr	pointer
,	O
"--> url %p ++ %d %s at %s:%u\n"	pointer
,	O
u	union
,	O
u	union
->	O
nrefs	int
,	O
msg	pointer
,	O
file	pointer
,	O
line	int
)	O
)	O
;	O
return	O
u	union
;	O
}	O
urlinfo	struct
XurlNew	function
(	O
const	O
char	O
*	O
msg	pointer
,	O
const	O
char	O
*	O
file	pointer
,	O
unsigned	O
line	int
)	O
{	O
urlinfo	struct
u	union
;	O
if	O
(	O
(	O
u	union
=	O
xmalloc	function
(	O
sizeof	O
(	O
*	O
u	union
)	O
)	O
)	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
memset	function
(	O
u	union
,	O
0	int
,	O
sizeof	O
(	O
*	O
u	union
)	O
)	O
;	O
u	union
->	O
proxyp	int
=	O
-	O
1	int
;	O
u	union
->	O
port	int
=	O
-	O
1	int
;	O
u	union
->	O
urltype	enum
=	O
URL_IS_UNKNOWN	int
;	O
u	union
->	O
ctrl	pointer
=	O
NULL	O
;	O
u	union
->	O
data	pointer
=	O
NULL	O
;	O
u	union
->	O
bufAlloced	int
=	O
0	int
;	O
u	union
->	O
buf	pointer
=	O
NULL	O
;	O
u	union
->	O
httpHasRange	int
=	O
1	int
;	O
u	union
->	O
httpVersion	int
=	O
0	int
;	O
u	union
->	O
nrefs	int
=	O
0	int
;	O
u	union
->	O
magic	array
=	O
URLMAGIC	int
;	O
return	O
XurlLink	function
(	O
u	union
,	O
msg	pointer
,	O
file	pointer
,	O
line	int
)	O
;	O
}	O
urlinfo	struct
XurlFree	function
(	O
urlinfo	struct
u	union
,	O
const	O
char	O
*	O
msg	pointer
,	O
const	O
char	O
*	O
file	pointer
,	O
unsigned	O
line	int
)	O
{	O
URLSANE	O
(	O
u	union
)	O
;	O
DBGREFS	O
(	O
0	int
,	O
(	O
stderr	pointer
,	O
"--> url %p -- %d %s at %s:%u\n"	pointer
,	O
u	union
,	O
u	union
->	O
nrefs	int
,	O
msg	pointer
,	O
file	pointer
,	O
line	int
)	O
)	O
;	O
if	O
(	O
--	O
u	union
->	O
nrefs	int
>	O
0	int
)	O
return	O
u	union
;	O
if	O
(	O
u	union
->	O
ctrl	pointer
)	O
{	O
void	O
*	O
fp	pointer
=	O
fdGetFp	function
(	O
u	union
->	O
ctrl	pointer
)	O
;	O
if	O
(	O
fp	pointer
)	O
{	O
fdPush	function
(	O
u	union
->	O
ctrl	pointer
,	O
fpio	pointer
,	O
fp	pointer
,	O
-	O
1	int
)	O
;	O
Fclose	function
(	O
u	union
->	O
ctrl	pointer
)	O
;	O
}	O
else	O
if	O
(	O
fdio	pointer
->	O
_fileno	int
(	O
u	union
->	O
ctrl	pointer
)	O
>=	O
0	int
)	O
fdio	pointer
->	O
close	pointer
(	O
u	union
->	O
ctrl	pointer
)	O
;	O
u	union
->	O
ctrl	pointer
=	O
fdio	pointer
->	O
_fdderef	pointer
(	O
u	union
->	O
ctrl	pointer
,	O
"persist ctrl (urlFree)"	pointer
,	O
file	pointer
,	O
line	int
)	O
;	O
if	O
(	O
u	union
->	O
ctrl	pointer
)	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"warning: u %p ctrl %p nrefs != 0 (%s %s)\n"	pointer
)	O
,	O
u	union
,	O
u	union
->	O
ctrl	pointer
,	O
u	union
->	O
host	pointer
,	O
u	union
->	O
service	pointer
)	O
;	O
}	O
if	O
(	O
u	union
->	O
data	pointer
)	O
{	O
void	O
*	O
fp	pointer
=	O
fdGetFp	function
(	O
u	union
->	O
data	pointer
)	O
;	O
if	O
(	O
fp	pointer
)	O
{	O
fdPush	function
(	O
u	union
->	O
data	pointer
,	O
fpio	pointer
,	O
fp	pointer
,	O
-	O
1	int
)	O
;	O
Fclose	function
(	O
u	union
->	O
data	pointer
)	O
;	O
}	O
else	O
if	O
(	O
fdio	pointer
->	O
_fileno	int
(	O
u	union
->	O
data	pointer
)	O
>=	O
0	int
)	O
fdio	pointer
->	O
close	pointer
(	O
u	union
->	O
data	pointer
)	O
;	O
u	union
->	O
data	pointer
=	O
fdio	pointer
->	O
_fdderef	pointer
(	O
u	union
->	O
data	pointer
,	O
"persist data (urlFree)"	pointer
,	O
file	pointer
,	O
line	int
)	O
;	O
if	O
(	O
u	union
->	O
data	pointer
)	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"warning: u %p data %p nrefs != 0 (%s %s)\n"	pointer
)	O
,	O
u	union
,	O
u	union
->	O
data	pointer
,	O
u	union
->	O
host	pointer
,	O
u	union
->	O
service	pointer
)	O
;	O
}	O
if	O
(	O
u	union
->	O
buf	pointer
)	O
{	O
free	function
(	O
u	union
->	O
buf	pointer
)	O
;	O
u	union
->	O
buf	pointer
=	O
NULL	O
;	O
}	O
FREE	O
(	O
u	union
->	O
url	pointer
)	O
;	O
FREE	O
(	O
u	union
->	O
service	pointer
)	O
;	O
FREE	O
(	O
u	union
->	O
user	pointer
)	O
;	O
FREE	O
(	O
u	union
->	O
password	pointer
)	O
;	O
FREE	O
(	O
u	union
->	O
host	pointer
)	O
;	O
FREE	O
(	O
u	union
->	O
portstr	pointer
)	O
;	O
FREE	O
(	O
u	union
->	O
proxyu	pointer
)	O
;	O
FREE	O
(	O
u	union
->	O
proxyh	pointer
)	O
;	O
FREE	O
(	O
u	union
)	O
;	O
return	O
NULL	O
;	O
}	O
void	O
urlFreeCache	function
(	O
void	O
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
uCount	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
uCache	pointer
[	O
i	int
]	O
==	O
NULL	O
)	O
continue	O
;	O
uCache	pointer
[	O
i	int
]	O
=	O
urlFree	function
(	O
uCache	pointer
[	O
i	int
]	O
,	O
"uCache"	pointer
)	O
;	O
if	O
(	O
uCache	pointer
[	O
i	int
]	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"warning: uCache[%d] %p nrefs(%d) != 1 (%s %s)\n"	pointer
)	O
,	O
i	int
,	O
uCache	pointer
[	O
i	int
]	O
,	O
uCache	pointer
[	O
i	int
]	O
->	O
nrefs	int
,	O
uCache	pointer
[	O
i	int
]	O
->	O
host	pointer
,	O
uCache	pointer
[	O
i	int
]	O
->	O
service	pointer
)	O
;	O
}	O
if	O
(	O
uCache	pointer
)	O
free	function
(	O
uCache	pointer
)	O
;	O
uCache	pointer
=	O
NULL	O
;	O
uCount	int
=	O
0	int
;	O
}	O
static	O
int	O
urlStrcmp	function
(	O
const	O
char	O
*	O
str1	pointer
,	O
const	O
char	O
*	O
str2	pointer
)	O
{	O
if	O
(	O
str1	pointer
&&	O
str2	pointer
)	O
return	O
(	O
strcmp	function
(	O
str1	pointer
,	O
str2	pointer
)	O
)	O
;	O
if	O
(	O
str1	pointer
!=	O
str2	pointer
)	O
return	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
void	O
urlFind	function
(	O
urlinfo	struct
*	O
uret	pointer
,	O
int	O
mustAsk	int
)	O
{	O
urlinfo	struct
u	union
;	O
int	O
ucx	int
;	O
int	O
i	int
;	O
if	O
(	O
uret	pointer
==	O
NULL	O
)	O
return	O
;	O
u	union
=	O
*	O
uret	pointer
;	O
URLSANE	O
(	O
u	union
)	O
;	O
ucx	int
=	O
-	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
uCount	int
;	O
i	int
++	O
)	O
{	O
urlinfo	struct
ou	pointer
;	O
if	O
(	O
(	O
ou	pointer
=	O
uCache	pointer
[	O
i	int
]	O
)	O
==	O
NULL	O
)	O
{	O
if	O
(	O
ucx	int
<	O
0	int
)	O
ucx	int
=	O
i	int
;	O
continue	O
;	O
}	O
if	O
(	O
urlStrcmp	function
(	O
u	union
->	O
service	pointer
,	O
ou	pointer
->	O
service	pointer
)	O
)	O
continue	O
;	O
if	O
(	O
urlStrcmp	function
(	O
u	union
->	O
host	pointer
,	O
ou	pointer
->	O
host	pointer
)	O
)	O
continue	O
;	O
if	O
(	O
urlStrcmp	function
(	O
u	union
->	O
user	pointer
,	O
ou	pointer
->	O
user	pointer
)	O
)	O
continue	O
;	O
if	O
(	O
urlStrcmp	function
(	O
u	union
->	O
portstr	pointer
,	O
ou	pointer
->	O
portstr	pointer
)	O
)	O
continue	O
;	O
break	O
;	O
}	O
if	O
(	O
i	int
==	O
uCount	int
)	O
{	O
if	O
(	O
ucx	int
<	O
0	int
)	O
{	O
ucx	int
=	O
uCount	int
++	O
;	O
if	O
(	O
uCache	pointer
)	O
uCache	pointer
=	O
xrealloc	function
(	O
uCache	pointer
,	O
sizeof	O
(	O
*	O
uCache	pointer
)	O
*	O
uCount	int
)	O
;	O
else	O
uCache	pointer
=	O
xmalloc	function
(	O
sizeof	O
(	O
*	O
uCache	pointer
)	O
)	O
;	O
}	O
uCache	pointer
[	O
ucx	int
]	O
=	O
urlLink	function
(	O
u	union
,	O
"uCache (miss)"	pointer
)	O
;	O
u	union
=	O
urlFree	function
(	O
u	union
,	O
"urlSplit (urlFind miss)"	pointer
)	O
;	O
}	O
else	O
{	O
ucx	int
=	O
i	int
;	O
u	union
=	O
urlFree	function
(	O
u	union
,	O
"urlSplit (urlFind hit)"	pointer
)	O
;	O
}	O
u	union
=	O
urlLink	function
(	O
uCache	pointer
[	O
ucx	int
]	O
,	O
"uCache"	pointer
)	O
;	O
*	O
uret	pointer
=	O
u	union
;	O
u	union
=	O
urlFree	function
(	O
u	union
,	O
"uCache (urlFind)"	pointer
)	O
;	O
u	union
->	O
proxyp	int
=	O
-	O
1	int
;	O
FREE	O
(	O
u	union
->	O
proxyh	pointer
)	O
;	O
if	O
(	O
u	union
->	O
urltype	enum
==	O
URL_IS_FTP	int
)	O
{	O
if	O
(	O
mustAsk	int
||	O
(	O
u	union
->	O
user	pointer
!=	O
NULL	O
&&	O
u	union
->	O
password	pointer
==	O
NULL	O
)	O
)	O
{	O
char	O
*	O
prompt	pointer
;	O
prompt	pointer
=	O
alloca	function
(	O
strlen	function
(	O
u	union
->	O
host	pointer
)	O
+	O
strlen	function
(	O
u	union
->	O
user	pointer
)	O
+	O
256	int
)	O
;	O
sprintf	function
(	O
prompt	pointer
,	O
_	O
(	O
"Password for %s@%s: "	pointer
)	O
,	O
u	union
->	O
user	pointer
,	O
u	union
->	O
host	pointer
)	O
;	O
FREE	O
(	O
u	union
->	O
password	pointer
)	O
;	O
u	union
->	O
password	pointer
=	O
xstrdup	function
(	O
getpass	function
(	O
prompt	pointer
)	O
)	O
;	O
}	O
if	O
(	O
u	union
->	O
proxyh	pointer
==	O
NULL	O
)	O
{	O
const	O
char	O
*	O
proxy	pointer
=	O
rpmExpand	function
(	O
"%{_ftpproxy}"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
proxy	pointer
&&	O
*	O
proxy	pointer
!=	O
'%'	O
)	O
{	O
const	O
char	O
*	O
uu	pointer
=	O
(	O
u	union
->	O
user	pointer
?	O
u	union
->	O
user	pointer
:	O
"anonymous"	pointer
)	O
;	O
char	O
*	O
nu	pointer
=	O
xmalloc	function
(	O
strlen	function
(	O
uu	pointer
)	O
+	O
sizeof	O
(	O
"@"	pointer
)	O
+	O
strlen	function
(	O
u	union
->	O
host	pointer
)	O
)	O
;	O
strcpy	function
(	O
nu	pointer
,	O
uu	pointer
)	O
;	O
strcat	function
(	O
nu	pointer
,	O
"@"	pointer
)	O
;	O
strcat	function
(	O
nu	pointer
,	O
u	union
->	O
host	pointer
)	O
;	O
u	union
->	O
proxyu	pointer
=	O
nu	pointer
;	O
u	union
->	O
proxyh	pointer
=	O
xstrdup	function
(	O
proxy	pointer
)	O
;	O
}	O
xfree	O
(	O
proxy	pointer
)	O
;	O
}	O
if	O
(	O
u	union
->	O
proxyp	int
<	O
0	int
)	O
{	O
const	O
char	O
*	O
proxy	pointer
=	O
rpmExpand	function
(	O
"%{_ftpport}"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
proxy	pointer
&&	O
*	O
proxy	pointer
!=	O
'%'	O
)	O
{	O
char	O
*	O
end	pointer
;	O
int	O
port	int
=	O
strtol	function
(	O
proxy	pointer
,	O
&	O
end	pointer
,	O
0	int
)	O
;	O
if	O
(	O
!	O
(	O
end	pointer
&&	O
*	O
end	pointer
==	O
'\0'	O
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"error: %sport must be a number\n"	pointer
)	O
,	O
u	union
->	O
service	pointer
)	O
;	O
return	O
;	O
}	O
u	union
->	O
proxyp	int
=	O
port	int
;	O
}	O
xfree	O
(	O
proxy	pointer
)	O
;	O
}	O
}	O
if	O
(	O
u	union
->	O
urltype	enum
==	O
URL_IS_HTTP	int
)	O
{	O
if	O
(	O
u	union
->	O
proxyh	pointer
==	O
NULL	O
)	O
{	O
const	O
char	O
*	O
proxy	pointer
=	O
rpmExpand	function
(	O
"%{_httpproxy}"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
proxy	pointer
&&	O
*	O
proxy	pointer
!=	O
'%'	O
)	O
u	union
->	O
proxyh	pointer
=	O
xstrdup	function
(	O
proxy	pointer
)	O
;	O
xfree	O
(	O
proxy	pointer
)	O
;	O
}	O
if	O
(	O
u	union
->	O
proxyp	int
<	O
0	int
)	O
{	O
const	O
char	O
*	O
proxy	pointer
=	O
rpmExpand	function
(	O
"%{_httpport}"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
proxy	pointer
&&	O
*	O
proxy	pointer
!=	O
'%'	O
)	O
{	O
char	O
*	O
end	pointer
;	O
int	O
port	int
=	O
strtol	function
(	O
proxy	pointer
,	O
&	O
end	pointer
,	O
0	int
)	O
;	O
if	O
(	O
!	O
(	O
end	pointer
&&	O
*	O
end	pointer
==	O
'\0'	O
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"error: %sport must be a number\n"	pointer
)	O
,	O
u	union
->	O
service	pointer
)	O
;	O
return	O
;	O
}	O
u	union
->	O
proxyp	int
=	O
port	int
;	O
}	O
xfree	O
(	O
proxy	pointer
)	O
;	O
}	O
}	O
return	O
;	O
}	O
static	O
struct	O
urlstring	struct
{	O
const	O
char	O
*	O
leadin	pointer
;	O
urltype	enum
ret	enum
;	O
}	O
urlstrings	array
[	O
]	O
=	O
{	O
{	O
"file://"	pointer
,	O
URL_IS_PATH	int
}	O
,	O
{	O
"ftp://"	pointer
,	O
URL_IS_FTP	int
}	O
,	O
{	O
"http://"	pointer
,	O
URL_IS_HTTP	int
}	O
,	O
{	O
"-"	pointer
,	O
URL_IS_DASH	int
}	O
,	O
{	O
NULL	O
,	O
URL_IS_UNKNOWN	int
}	O
}	O
;	O
urltype	enum
urlIsURL	function
(	O
const	O
char	O
*	O
url	pointer
)	O
{	O
struct	O
urlstring	struct
*	O
us	pointer
;	O
if	O
(	O
url	pointer
&&	O
*	O
url	pointer
)	O
{	O
for	O
(	O
us	pointer
=	O
urlstrings	array
;	O
us	pointer
->	O
leadin	pointer
!=	O
NULL	O
;	O
us	pointer
++	O
)	O
{	O
if	O
(	O
strncmp	function
(	O
url	pointer
,	O
us	pointer
->	O
leadin	pointer
,	O
strlen	function
(	O
us	pointer
->	O
leadin	pointer
)	O
)	O
)	O
continue	O
;	O
return	O
us	pointer
->	O
ret	enum
;	O
}	O
}	O
return	O
URL_IS_UNKNOWN	int
;	O
}	O
int	O
urlPath	function
(	O
const	O
char	O
*	O
url	pointer
,	O
const	O
char	O
*	O
*	O
pathp	pointer
)	O
{	O
const	O
char	O
*	O
path	pointer
;	O
int	O
urltype	enum
;	O
path	pointer
=	O
url	pointer
;	O
urltype	enum
=	O
urlIsURL	function
(	O
url	pointer
)	O
;	O
switch	O
(	O
urltype	enum
)	O
{	O
case	O
URL_IS_FTP	int
:	O
url	pointer
+=	O
sizeof	O
(	O
"ftp://"	pointer
)	O
-	O
1	int
;	O
path	pointer
=	O
strchr	function
(	O
url	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
path	pointer
==	O
NULL	O
)	O
path	pointer
=	O
url	pointer
+	O
strlen	function
(	O
url	pointer
)	O
;	O
break	O
;	O
case	O
URL_IS_HTTP	int
:	O
case	O
URL_IS_PATH	int
:	O
url	pointer
+=	O
sizeof	O
(	O
"file://"	pointer
)	O
-	O
1	int
;	O
path	pointer
=	O
strchr	function
(	O
url	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
path	pointer
==	O
NULL	O
)	O
path	pointer
=	O
url	pointer
+	O
strlen	function
(	O
url	pointer
)	O
;	O
break	O
;	O
case	O
URL_IS_UNKNOWN	int
:	O
if	O
(	O
path	pointer
==	O
NULL	O
)	O
path	pointer
=	O
""	pointer
;	O
break	O
;	O
case	O
URL_IS_DASH	int
:	O
path	pointer
=	O
""	pointer
;	O
break	O
;	O
}	O
if	O
(	O
pathp	pointer
)	O
*	O
pathp	pointer
=	O
path	pointer
;	O
return	O
urltype	enum
;	O
}	O
int	O
urlSplit	function
(	O
const	O
char	O
*	O
url	pointer
,	O
urlinfo	struct
*	O
uret	pointer
)	O
{	O
urlinfo	struct
u	union
;	O
char	O
*	O
myurl	pointer
;	O
char	O
*	O
s	pointer
,	O
*	O
se	pointer
,	O
*	O
f	pointer
,	O
*	O
fe	pointer
;	O
if	O
(	O
uret	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
u	union
=	O
urlNew	function
(	O
"urlSplit"	pointer
)	O
)	O
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
se	pointer
=	O
s	pointer
=	O
myurl	pointer
=	O
xstrdup	function
(	O
url	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
u	union
=	O
urlFree	function
(	O
u	union
,	O
"urlSplit (error #1)"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
u	union
->	O
url	pointer
=	O
xstrdup	function
(	O
url	pointer
)	O
;	O
u	union
->	O
urltype	enum
=	O
urlIsURL	function
(	O
url	pointer
)	O
;	O
while	O
(	O
1	int
)	O
{	O
while	O
(	O
*	O
se	pointer
&&	O
*	O
se	pointer
!=	O
'/'	O
)	O
se	pointer
++	O
;	O
if	O
(	O
*	O
se	pointer
&&	O
(	O
se	pointer
!=	O
s	pointer
)	O
&&	O
se	pointer
[	O
-	O
1	int
]	O
==	O
':'	O
&&	O
se	pointer
[	O
0	int
]	O
==	O
'/'	O
&&	O
se	pointer
[	O
1	int
]	O
==	O
'/'	O
)	O
{	O
se	pointer
[	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
u	union
->	O
service	pointer
=	O
xstrdup	function
(	O
s	pointer
)	O
;	O
se	pointer
+=	O
2	int
;	O
s	pointer
=	O
se	pointer
++	O
;	O
continue	O
;	O
}	O
*	O
se	pointer
=	O
'\0'	O
;	O
break	O
;	O
}	O
fe	pointer
=	O
f	pointer
=	O
s	pointer
;	O
while	O
(	O
*	O
fe	pointer
&&	O
*	O
fe	pointer
!=	O
'@'	O
)	O
fe	pointer
++	O
;	O
if	O
(	O
*	O
fe	pointer
==	O
'@'	O
)	O
{	O
s	pointer
=	O
fe	pointer
+	O
1	int
;	O
*	O
fe	pointer
=	O
'\0'	O
;	O
while	O
(	O
fe	pointer
>	O
f	pointer
&&	O
*	O
fe	pointer
!=	O
':'	O
)	O
fe	pointer
--	O
;	O
if	O
(	O
*	O
fe	pointer
==	O
':'	O
)	O
{	O
*	O
fe	pointer
++	O
=	O
'\0'	O
;	O
u	union
->	O
password	pointer
=	O
xstrdup	function
(	O
fe	pointer
)	O
;	O
}	O
u	union
->	O
user	pointer
=	O
xstrdup	function
(	O
f	pointer
)	O
;	O
}	O
fe	pointer
=	O
f	pointer
=	O
s	pointer
;	O
while	O
(	O
*	O
fe	pointer
&&	O
*	O
fe	pointer
!=	O
':'	O
)	O
fe	pointer
++	O
;	O
if	O
(	O
*	O
fe	pointer
==	O
':'	O
)	O
{	O
*	O
fe	pointer
++	O
=	O
'\0'	O
;	O
u	union
->	O
portstr	pointer
=	O
xstrdup	function
(	O
fe	pointer
)	O
;	O
if	O
(	O
u	union
->	O
portstr	pointer
!=	O
NULL	O
&&	O
u	union
->	O
portstr	pointer
[	O
0	int
]	O
!=	O
'\0'	O
)	O
{	O
char	O
*	O
end	pointer
;	O
u	union
->	O
port	int
=	O
strtol	function
(	O
u	union
->	O
portstr	pointer
,	O
&	O
end	pointer
,	O
0	int
)	O
;	O
if	O
(	O
!	O
(	O
end	pointer
&&	O
*	O
end	pointer
==	O
'\0'	O
)	O
)	O
{	O
rpmMessage	function
(	O
RPMMESS_ERROR	int
,	O
_	O
(	O
"url port must be a number\n"	pointer
)	O
)	O
;	O
if	O
(	O
myurl	pointer
)	O
free	function
(	O
myurl	pointer
)	O
;	O
u	union
=	O
urlFree	function
(	O
u	union
,	O
"urlSplit (error #3)"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
u	union
->	O
host	pointer
=	O
xstrdup	function
(	O
f	pointer
)	O
;	O
if	O
(	O
u	union
->	O
port	int
<	O
0	int
&&	O
u	union
->	O
service	pointer
!=	O
NULL	O
)	O
{	O
struct	O
servent	struct
*	O
serv	pointer
;	O
serv	pointer
=	O
getservbyname	function
(	O
u	union
->	O
service	pointer
,	O
"tcp"	pointer
)	O
;	O
if	O
(	O
serv	pointer
!=	O
NULL	O
)	O
u	union
->	O
port	int
=	O
ntohs	function
(	O
serv	pointer
->	O
s_port	int
)	O
;	O
else	O
if	O
(	O
u	union
->	O
urltype	enum
==	O
URL_IS_FTP	int
)	O
u	union
->	O
port	int
=	O
IPPORT_FTP	int
;	O
else	O
if	O
(	O
u	union
->	O
urltype	enum
==	O
URL_IS_HTTP	int
)	O
u	union
->	O
port	int
=	O
IPPORT_HTTP	int
;	O
}	O
if	O
(	O
myurl	pointer
)	O
free	function
(	O
myurl	pointer
)	O
;	O
if	O
(	O
uret	pointer
)	O
{	O
*	O
uret	pointer
=	O
u	union
;	O
urlFind	function
(	O
uret	pointer
,	O
0	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
urlGetFile	function
(	O
const	O
char	O
*	O
url	pointer
,	O
const	O
char	O
*	O
dest	pointer
)	O
{	O
int	O
rc	int
;	O
FD_t	pointer
sfd	pointer
=	O
NULL	O
;	O
FD_t	pointer
tfd	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
sfuPath	pointer
=	O
NULL	O
;	O
int	O
urlType	int
=	O
urlPath	function
(	O
url	pointer
,	O
&	O
sfuPath	pointer
)	O
;	O
if	O
(	O
*	O
sfuPath	pointer
==	O
'\0'	O
)	O
return	O
FTPERR_UNKNOWN	O
;	O
sfd	pointer
=	O
Fopen	function
(	O
url	pointer
,	O
"r.ufdio"	pointer
)	O
;	O
if	O
(	O
sfd	pointer
==	O
NULL	O
||	O
Ferror	function
(	O
sfd	pointer
)	O
)	O
{	O
rpmMessage	function
(	O
RPMMESS_DEBUG	int
,	O
_	O
(	O
"failed to open %s: %s\n"	pointer
)	O
,	O
url	pointer
,	O
Fstrerror	function
(	O
sfd	pointer
)	O
)	O
;	O
rc	int
=	O
FTPERR_UNKNOWN	O
;	O
goto	O
exit	function
;	O
}	O
if	O
(	O
dest	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
(	O
dest	pointer
=	O
strrchr	function
(	O
sfuPath	pointer
,	O
'/'	O
)	O
)	O
!=	O
NULL	O
)	O
dest	pointer
++	O
;	O
else	O
dest	pointer
=	O
sfuPath	pointer
;	O
}	O
tfd	pointer
=	O
Fopen	function
(	O
dest	pointer
,	O
"w.ufdio"	pointer
)	O
;	O
if	O
(	O
_url_debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"*** urlGetFile sfd %p %s tfd %p %s\n"	pointer
,	O
sfd	pointer
,	O
url	pointer
,	O
tfd	pointer
,	O
dest	pointer
)	O
;	O
if	O
(	O
tfd	pointer
==	O
NULL	O
||	O
Ferror	function
(	O
tfd	pointer
)	O
)	O
{	O
rpmMessage	function
(	O
RPMMESS_DEBUG	int
,	O
_	O
(	O
"failed to create %s: %s\n"	pointer
)	O
,	O
dest	pointer
,	O
Fstrerror	function
(	O
tfd	pointer
)	O
)	O
;	O
rc	int
=	O
FTPERR_UNKNOWN	O
;	O
goto	O
exit	function
;	O
}	O
switch	O
(	O
urlType	int
)	O
{	O
case	O
URL_IS_FTP	int
:	O
case	O
URL_IS_HTTP	int
:	O
case	O
URL_IS_PATH	int
:	O
case	O
URL_IS_DASH	int
:	O
case	O
URL_IS_UNKNOWN	int
:	O
if	O
(	O
(	O
rc	int
=	O
ufdGetFile	function
(	O
sfd	pointer
,	O
tfd	pointer
)	O
)	O
)	O
{	O
Unlink	function
(	O
dest	pointer
)	O
;	O
Fclose	function
(	O
sfd	pointer
)	O
;	O
}	O
sfd	pointer
=	O
NULL	O
;	O
break	O
;	O
default	O
:	O
rc	int
=	O
FTPERR_UNKNOWN	O
;	O
break	O
;	O
}	O
exit	function
:	O
if	O
(	O
tfd	pointer
)	O
Fclose	function
(	O
tfd	pointer
)	O
;	O
if	O
(	O
sfd	pointer
)	O
Fclose	function
(	O
sfd	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
