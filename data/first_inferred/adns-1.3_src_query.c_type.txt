static	O
adns_query	pointer
query_alloc	function
(	O
adns_state	pointer
ads	pointer
,	O
const	O
typeinfo	struct
*	O
typei	pointer
,	O
adns_rrtype	enum
type	enum
,	O
adns_queryflags	enum
flags	enum
,	O
struct	O
timeval	struct
now	pointer
)	O
{	O
adns_query	pointer
qu	pointer
;	O
qu	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
qu	pointer
)	O
)	O
;	O
if	O
(	O
!	O
qu	pointer
)	O
return	O
0	int
;	O
qu	pointer
->	O
answer	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
qu	pointer
->	O
answer	pointer
)	O
)	O
;	O
if	O
(	O
!	O
qu	pointer
->	O
answer	pointer
)	O
{	O
free	function
(	O
qu	pointer
)	O
;	O
return	O
0	int
;	O
}	O
qu	pointer
->	O
ads	pointer
=	O
ads	pointer
;	O
qu	pointer
->	O
state	pointer
=	O
query_tosend	int
;	O
qu	pointer
->	O
back	pointer
=	O
qu	pointer
->	O
next	pointer
=	O
qu	pointer
->	O
parent	pointer
=	O
0	int
;	O
LIST_INIT	O
(	O
qu	pointer
->	O
children	struct
)	O
;	O
LINK_INIT	O
(	O
qu	pointer
->	O
siblings	struct
)	O
;	O
LIST_INIT	O
(	O
qu	pointer
->	O
allocations	struct
)	O
;	O
qu	pointer
->	O
interim_allocd	int
=	O
0	int
;	O
qu	pointer
->	O
preserved_allocd	int
=	O
0	int
;	O
qu	pointer
->	O
final_allocspace	pointer
=	O
0	int
;	O
qu	pointer
->	O
typei	pointer
=	O
typei	pointer
;	O
qu	pointer
->	O
query_dgram	pointer
=	O
0	int
;	O
qu	pointer
->	O
query_dglen	int
=	O
0	int
;	O
adns__vbuf_init	function
(	O
&	O
qu	pointer
->	O
vb	pointer
)	O
;	O
qu	pointer
->	O
cname_dgram	pointer
=	O
0	int
;	O
qu	pointer
->	O
cname_dglen	int
=	O
qu	pointer
->	O
cname_begin	int
=	O
0	int
;	O
adns__vbuf_init	function
(	O
&	O
qu	pointer
->	O
search_vb	struct
)	O
;	O
qu	pointer
->	O
search_origlen	int
=	O
qu	pointer
->	O
search_pos	int
=	O
qu	pointer
->	O
search_doneabs	int
=	O
0	int
;	O
qu	pointer
->	O
id	int
=	O
-	O
2	int
;	O
qu	pointer
->	O
flags	enum
=	O
flags	enum
;	O
qu	pointer
->	O
retries	int
=	O
0	int
;	O
qu	pointer
->	O
udpnextserver	int
=	O
0	int
;	O
qu	pointer
->	O
udpsent	long
=	O
0	int
;	O
timerclear	O
(	O
&	O
qu	pointer
->	O
timeout	struct
)	O
;	O
qu	pointer
->	O
expires	long
=	O
now	pointer
.	O
tv_sec	long
+	O
MAXTTLBELIEVE	O
;	O
memset	function
(	O
&	O
qu	pointer
->	O
ctx	struct
,	O
0	int
,	O
sizeof	O
(	O
qu	pointer
->	O
ctx	struct
)	O
)	O
;	O
qu	pointer
->	O
answer	pointer
->	O
status	enum
=	O
adns_s_ok	int
;	O
qu	pointer
->	O
answer	pointer
->	O
cname	pointer
=	O
qu	pointer
->	O
answer	pointer
->	O
owner	pointer
=	O
0	int
;	O
qu	pointer
->	O
answer	pointer
->	O
type	enum
=	O
type	enum
;	O
qu	pointer
->	O
answer	pointer
->	O
expires	long
=	O
-	O
1	int
;	O
qu	pointer
->	O
answer	pointer
->	O
nrrs	int
=	O
0	int
;	O
qu	pointer
->	O
answer	pointer
->	O
rrs	union
.	O
untyped	pointer
=	O
0	int
;	O
qu	pointer
->	O
answer	pointer
->	O
rrsz	int
=	O
typei	pointer
->	O
rrsz	int
;	O
return	O
qu	pointer
;	O
}	O
static	O
void	O
query_submit	function
(	O
adns_state	pointer
ads	pointer
,	O
adns_query	pointer
qu	pointer
,	O
const	O
typeinfo	struct
*	O
typei	pointer
,	O
vbuf	struct
*	O
qumsg_vb	pointer
,	O
int	O
id	int
,	O
adns_queryflags	enum
flags	enum
,	O
struct	O
timeval	struct
now	pointer
)	O
{	O
qu	pointer
->	O
vb	pointer
=	O
*	O
qumsg_vb	pointer
;	O
adns__vbuf_init	function
(	O
qumsg_vb	pointer
)	O
;	O
qu	pointer
->	O
query_dgram	pointer
=	O
malloc	function
(	O
qu	pointer
->	O
vb	pointer
.	O
used	int
)	O
;	O
if	O
(	O
!	O
qu	pointer
->	O
query_dgram	pointer
)	O
{	O
adns__query_fail	function
(	O
qu	pointer
,	O
adns_s_nomemory	int
)	O
;	O
return	O
;	O
}	O
qu	pointer
->	O
id	int
=	O
id	int
;	O
qu	pointer
->	O
query_dglen	int
=	O
qu	pointer
->	O
vb	pointer
.	O
used	int
;	O
memcpy	function
(	O
qu	pointer
->	O
query_dgram	pointer
,	O
qu	pointer
->	O
vb	pointer
.	O
buf	pointer
,	O
qu	pointer
->	O
vb	pointer
.	O
used	int
)	O
;	O
adns__query_send	function
(	O
qu	pointer
,	O
now	pointer
)	O
;	O
}	O
adns_status	enum
adns__internal_submit	function
(	O
adns_state	pointer
ads	pointer
,	O
adns_query	pointer
*	O
query_r	pointer
,	O
const	O
typeinfo	struct
*	O
typei	pointer
,	O
vbuf	struct
*	O
qumsg_vb	pointer
,	O
int	O
id	int
,	O
adns_queryflags	enum
flags	enum
,	O
struct	O
timeval	struct
now	pointer
,	O
const	O
qcontext	struct
*	O
ctx	struct
)	O
{	O
adns_query	pointer
qu	pointer
;	O
qu	pointer
=	O
query_alloc	function
(	O
ads	pointer
,	O
typei	pointer
,	O
typei	pointer
->	O
typekey	enum
,	O
flags	enum
,	O
now	pointer
)	O
;	O
if	O
(	O
!	O
qu	pointer
)	O
{	O
adns__vbuf_free	function
(	O
qumsg_vb	pointer
)	O
;	O
return	O
adns_s_nomemory	int
;	O
}	O
*	O
query_r	pointer
=	O
qu	pointer
;	O
memcpy	function
(	O
&	O
qu	pointer
->	O
ctx	struct
,	O
ctx	struct
,	O
sizeof	O
(	O
qu	pointer
->	O
ctx	struct
)	O
)	O
;	O
query_submit	function
(	O
ads	pointer
,	O
qu	pointer
,	O
typei	pointer
,	O
qumsg_vb	pointer
,	O
id	int
,	O
flags	enum
,	O
now	pointer
)	O
;	O
return	O
adns_s_ok	int
;	O
}	O
static	O
void	O
query_simple	function
(	O
adns_state	pointer
ads	pointer
,	O
adns_query	pointer
qu	pointer
,	O
const	O
char	O
*	O
owner	pointer
,	O
int	O
ol	int
,	O
const	O
typeinfo	struct
*	O
typei	pointer
,	O
adns_queryflags	enum
flags	enum
,	O
struct	O
timeval	struct
now	pointer
)	O
{	O
vbuf	struct
vb_new	struct
;	O
int	O
id	int
;	O
adns_status	enum
stat	enum
;	O
stat	enum
=	O
adns__mkquery	function
(	O
ads	pointer
,	O
&	O
qu	pointer
->	O
vb	pointer
,	O
&	O
id	int
,	O
owner	pointer
,	O
ol	int
,	O
typei	pointer
,	O
qu	pointer
->	O
answer	pointer
->	O
type	enum
,	O
flags	enum
)	O
;	O
if	O
(	O
stat	enum
)	O
{	O
if	O
(	O
stat	enum
==	O
adns_s_querydomaintoolong	int
&&	O
(	O
flags	enum
&	O
adns_qf_search	int
)	O
)	O
{	O
adns__search_next	function
(	O
ads	pointer
,	O
qu	pointer
,	O
now	pointer
)	O
;	O
return	O
;	O
}	O
else	O
{	O
adns__query_fail	function
(	O
qu	pointer
,	O
stat	enum
)	O
;	O
return	O
;	O
}	O
}	O
vb_new	struct
=	O
qu	pointer
->	O
vb	pointer
;	O
adns__vbuf_init	function
(	O
&	O
qu	pointer
->	O
vb	pointer
)	O
;	O
query_submit	function
(	O
ads	pointer
,	O
qu	pointer
,	O
typei	pointer
,	O
&	O
vb_new	struct
,	O
id	int
,	O
flags	enum
,	O
now	pointer
)	O
;	O
}	O
void	O
adns__search_next	function
(	O
adns_state	pointer
ads	pointer
,	O
adns_query	pointer
qu	pointer
,	O
struct	O
timeval	struct
now	pointer
)	O
{	O
const	O
char	O
*	O
nextentry	pointer
;	O
adns_status	enum
stat	enum
;	O
if	O
(	O
qu	pointer
->	O
search_doneabs	int
<	O
0	int
)	O
{	O
nextentry	pointer
=	O
0	int
;	O
qu	pointer
->	O
search_doneabs	int
=	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
qu	pointer
->	O
search_pos	int
>=	O
ads	pointer
->	O
nsearchlist	int
)	O
{	O
if	O
(	O
qu	pointer
->	O
search_doneabs	int
)	O
{	O
qu	pointer
->	O
search_vb	struct
.	O
used	int
=	O
qu	pointer
->	O
search_origlen	int
;	O
stat	enum
=	O
adns_s_nxdomain	int
;	O
goto	O
x_fail	O
;	O
}	O
else	O
{	O
nextentry	pointer
=	O
0	int
;	O
qu	pointer
->	O
search_doneabs	int
=	O
1	int
;	O
}	O
}	O
else	O
{	O
nextentry	pointer
=	O
ads	pointer
->	O
searchlist	pointer
[	O
qu	pointer
->	O
search_pos	int
++	O
]	O
;	O
}	O
}	O
qu	pointer
->	O
search_vb	struct
.	O
used	int
=	O
qu	pointer
->	O
search_origlen	int
;	O
if	O
(	O
nextentry	pointer
)	O
{	O
if	O
(	O
!	O
adns__vbuf_append	function
(	O
&	O
qu	pointer
->	O
search_vb	struct
,	O
"."	pointer
,	O
1	int
)	O
||	O
!	O
adns__vbuf_appendstr	function
(	O
&	O
qu	pointer
->	O
search_vb	struct
,	O
nextentry	pointer
)	O
)	O
goto	O
x_nomemory	O
;	O
}	O
free	function
(	O
qu	pointer
->	O
query_dgram	pointer
)	O
;	O
qu	pointer
->	O
query_dgram	pointer
=	O
0	int
;	O
qu	pointer
->	O
query_dglen	int
=	O
0	int
;	O
query_simple	function
(	O
ads	pointer
,	O
qu	pointer
,	O
qu	pointer
->	O
search_vb	struct
.	O
buf	pointer
,	O
qu	pointer
->	O
search_vb	struct
.	O
used	int
,	O
qu	pointer
->	O
typei	pointer
,	O
qu	pointer
->	O
flags	enum
,	O
now	pointer
)	O
;	O
return	O
;	O
x_nomemory	O
:	O
stat	enum
=	O
adns_s_nomemory	int
;	O
x_fail	O
:	O
adns__query_fail	function
(	O
qu	pointer
,	O
stat	enum
)	O
;	O
}	O
static	O
int	O
save_owner	function
(	O
adns_query	pointer
qu	pointer
,	O
const	O
char	O
*	O
owner	pointer
,	O
int	O
ol	int
)	O
{	O
adns_answer	struct
*	O
ans	pointer
;	O
if	O
(	O
!	O
(	O
qu	pointer
->	O
flags	enum
&	O
adns_qf_owner	int
)	O
)	O
return	O
1	int
;	O
ans	pointer
=	O
qu	pointer
->	O
answer	pointer
;	O
assert	O
(	O
!	O
ans	pointer
->	O
owner	pointer
)	O
;	O
ans	pointer
->	O
owner	pointer
=	O
adns__alloc_preserved	function
(	O
qu	pointer
,	O
ol	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
ans	pointer
->	O
owner	pointer
)	O
return	O
0	int
;	O
memcpy	function
(	O
ans	pointer
->	O
owner	pointer
,	O
owner	pointer
,	O
ol	int
)	O
;	O
ans	pointer
->	O
owner	pointer
[	O
ol	int
]	O
=	O
0	int
;	O
return	O
1	int
;	O
}	O
int	O
adns_submit	function
(	O
adns_state	pointer
ads	pointer
,	O
const	O
char	O
*	O
owner	pointer
,	O
adns_rrtype	enum
type	enum
,	O
adns_queryflags	enum
flags	enum
,	O
void	O
*	O
context	pointer
,	O
adns_query	pointer
*	O
query_r	pointer
)	O
{	O
int	O
r	int
,	O
ol	int
,	O
ndots	int
;	O
adns_status	enum
stat	enum
;	O
const	O
typeinfo	struct
*	O
typei	pointer
;	O
struct	O
timeval	struct
now	pointer
;	O
adns_query	pointer
qu	pointer
;	O
const	O
char	O
*	O
p	pointer
;	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
typei	pointer
=	O
adns__findtype	function
(	O
type	enum
)	O
;	O
if	O
(	O
!	O
typei	pointer
)	O
return	O
ENOSYS	int
;	O
r	int
=	O
gettimeofday	function
(	O
&	O
now	pointer
,	O
0	int
)	O
;	O
if	O
(	O
r	int
)	O
goto	O
x_errno	O
;	O
qu	pointer
=	O
query_alloc	function
(	O
ads	pointer
,	O
typei	pointer
,	O
type	enum
,	O
flags	enum
,	O
now	pointer
)	O
;	O
if	O
(	O
!	O
qu	pointer
)	O
goto	O
x_errno	O
;	O
qu	pointer
->	O
ctx	struct
.	O
ext	pointer
=	O
context	pointer
;	O
qu	pointer
->	O
ctx	struct
.	O
callback	pointer
=	O
0	int
;	O
memset	function
(	O
&	O
qu	pointer
->	O
ctx	struct
.	O
info	union
,	O
0	int
,	O
sizeof	O
(	O
qu	pointer
->	O
ctx	struct
.	O
info	union
)	O
)	O
;	O
*	O
query_r	pointer
=	O
qu	pointer
;	O
ol	int
=	O
strlen	function
(	O
owner	pointer
)	O
;	O
if	O
(	O
!	O
ol	int
)	O
{	O
stat	enum
=	O
adns_s_querydomaininvalid	int
;	O
goto	O
x_adnsfail	O
;	O
}	O
if	O
(	O
ol	int
>	O
DNS_MAXDOMAIN	int
+	O
1	int
)	O
{	O
stat	enum
=	O
adns_s_querydomaintoolong	int
;	O
goto	O
x_adnsfail	O
;	O
}	O
if	O
(	O
ol	int
>=	O
1	int
&&	O
owner	pointer
[	O
ol	int
-	O
1	int
]	O
==	O
'.'	O
&&	O
(	O
ol	int
<	O
2	int
||	O
owner	pointer
[	O
ol	int
-	O
2	int
]	O
!=	O
'\\'	O
)	O
)	O
{	O
flags	enum
&=	O
~	O
adns_qf_search	int
;	O
qu	pointer
->	O
flags	enum
=	O
flags	enum
;	O
ol	int
--	O
;	O
}	O
if	O
(	O
flags	enum
&	O
adns_qf_search	int
)	O
{	O
r	int
=	O
adns__vbuf_append	function
(	O
&	O
qu	pointer
->	O
search_vb	struct
,	O
owner	pointer
,	O
ol	int
)	O
;	O
if	O
(	O
!	O
r	int
)	O
{	O
stat	enum
=	O
adns_s_nomemory	int
;	O
goto	O
x_adnsfail	O
;	O
}	O
for	O
(	O
ndots	int
=	O
0	int
,	O
p	pointer
=	O
owner	pointer
;	O
(	O
p	pointer
=	O
strchr	function
(	O
p	pointer
,	O
'.'	O
)	O
)	O
;	O
p	pointer
++	O
,	O
ndots	int
++	O
)	O
;	O
qu	pointer
->	O
search_doneabs	int
=	O
(	O
ndots	int
>=	O
ads	pointer
->	O
searchndots	int
)	O
?	O
-	O
1	int
:	O
0	int
;	O
qu	pointer
->	O
search_origlen	int
=	O
ol	int
;	O
adns__search_next	function
(	O
ads	pointer
,	O
qu	pointer
,	O
now	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
flags	enum
&	O
adns_qf_owner	int
)	O
{	O
if	O
(	O
!	O
save_owner	function
(	O
qu	pointer
,	O
owner	pointer
,	O
ol	int
)	O
)	O
{	O
stat	enum
=	O
adns_s_nomemory	int
;	O
goto	O
x_adnsfail	O
;	O
}	O
}	O
query_simple	function
(	O
ads	pointer
,	O
qu	pointer
,	O
owner	pointer
,	O
ol	int
,	O
typei	pointer
,	O
flags	enum
,	O
now	pointer
)	O
;	O
}	O
adns__autosys	function
(	O
ads	pointer
,	O
now	pointer
)	O
;	O
adns__consistency	function
(	O
ads	pointer
,	O
qu	pointer
,	O
cc_entex	int
)	O
;	O
return	O
0	int
;	O
x_adnsfail	O
:	O
adns__query_fail	function
(	O
qu	pointer
,	O
stat	enum
)	O
;	O
adns__consistency	function
(	O
ads	pointer
,	O
qu	pointer
,	O
cc_entex	int
)	O
;	O
return	O
0	int
;	O
x_errno	O
:	O
r	int
=	O
errno	O
;	O
assert	O
(	O
r	int
)	O
;	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
return	O
r	int
;	O
}	O
int	O
adns_submit_reverse_any	function
(	O
adns_state	pointer
ads	pointer
,	O
const	O
struct	O
sockaddr	struct
*	O
addr	union
,	O
const	O
char	O
*	O
zone	pointer
,	O
adns_rrtype	enum
type	enum
,	O
adns_queryflags	enum
flags	enum
,	O
void	O
*	O
context	pointer
,	O
adns_query	pointer
*	O
query_r	pointer
)	O
{	O
const	O
unsigned	O
char	O
*	O
iaddr	pointer
;	O
char	O
*	O
buf	pointer
,	O
*	O
buf_free	pointer
;	O
char	O
shortbuf	array
[	O
100	int
]	O
;	O
int	O
r	int
,	O
lreq	int
;	O
flags	enum
&=	O
~	O
adns_qf_search	int
;	O
if	O
(	O
addr	union
->	O
sa_family	short
!=	O
AF_INET	O
)	O
return	O
ENOSYS	int
;	O
iaddr	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
&	O
(	O
(	O
(	O
const	O
struct	O
sockaddr_in	struct
*	O
)	O
addr	union
)	O
->	O
sin_addr	struct
)	O
;	O
lreq	int
=	O
strlen	function
(	O
zone	pointer
)	O
+	O
4	int
*	O
4	int
+	O
1	int
;	O
if	O
(	O
lreq	int
>	O
sizeof	O
(	O
shortbuf	array
)	O
)	O
{	O
buf	pointer
=	O
malloc	function
(	O
strlen	function
(	O
zone	pointer
)	O
+	O
4	int
*	O
4	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
buf	pointer
)	O
return	O
errno	O
;	O
buf_free	pointer
=	O
buf	pointer
;	O
}	O
else	O
{	O
buf	pointer
=	O
shortbuf	array
;	O
buf_free	pointer
=	O
0	int
;	O
}	O
sprintf	function
(	O
buf	pointer
,	O
"%d.%d.%d.%d.%s"	pointer
,	O
iaddr	pointer
[	O
3	int
]	O
,	O
iaddr	pointer
[	O
2	int
]	O
,	O
iaddr	pointer
[	O
1	int
]	O
,	O
iaddr	pointer
[	O
0	int
]	O
,	O
zone	pointer
)	O
;	O
r	int
=	O
adns_submit	function
(	O
ads	pointer
,	O
buf	pointer
,	O
type	enum
,	O
flags	enum
,	O
context	pointer
,	O
query_r	pointer
)	O
;	O
free	function
(	O
buf_free	pointer
)	O
;	O
return	O
r	int
;	O
}	O
int	O
adns_submit_reverse	function
(	O
adns_state	pointer
ads	pointer
,	O
const	O
struct	O
sockaddr	struct
*	O
addr	union
,	O
adns_rrtype	enum
type	enum
,	O
adns_queryflags	enum
flags	enum
,	O
void	O
*	O
context	pointer
,	O
adns_query	pointer
*	O
query_r	pointer
)	O
{	O
if	O
(	O
type	enum
!=	O
adns_r_ptr	int
&&	O
type	enum
!=	O
adns_r_ptr_raw	int
)	O
return	O
EINVAL	int
;	O
return	O
adns_submit_reverse_any	function
(	O
ads	pointer
,	O
addr	union
,	O
"in-addr.arpa"	pointer
,	O
type	enum
,	O
flags	enum
,	O
context	pointer
,	O
query_r	pointer
)	O
;	O
}	O
int	O
adns_synchronous	function
(	O
adns_state	pointer
ads	pointer
,	O
const	O
char	O
*	O
owner	pointer
,	O
adns_rrtype	enum
type	enum
,	O
adns_queryflags	enum
flags	enum
,	O
adns_answer	struct
*	O
*	O
answer_r	pointer
)	O
{	O
adns_query	pointer
qu	pointer
;	O
int	O
r	int
;	O
r	int
=	O
adns_submit	function
(	O
ads	pointer
,	O
owner	pointer
,	O
type	enum
,	O
flags	enum
,	O
0	int
,	O
&	O
qu	pointer
)	O
;	O
if	O
(	O
r	int
)	O
return	O
r	int
;	O
r	int
=	O
adns_wait	function
(	O
ads	pointer
,	O
&	O
qu	pointer
,	O
answer_r	pointer
,	O
0	int
)	O
;	O
if	O
(	O
r	int
)	O
adns_cancel	function
(	O
qu	pointer
)	O
;	O
return	O
r	int
;	O
}	O
static	O
void	O
*	O
alloc_common	function
(	O
adns_query	pointer
qu	pointer
,	O
size_t	long
sz	int
)	O
{	O
allocnode	struct
*	O
an	pointer
;	O
if	O
(	O
!	O
sz	int
)	O
return	O
qu	pointer
;	O
assert	O
(	O
!	O
qu	pointer
->	O
final_allocspace	pointer
)	O
;	O
an	pointer
=	O
malloc	function
(	O
MEM_ROUND	O
(	O
MEM_ROUND	O
(	O
sizeof	O
(	O
*	O
an	pointer
)	O
)	O
+	O
sz	int
)	O
)	O
;	O
if	O
(	O
!	O
an	pointer
)	O
return	O
0	int
;	O
LIST_LINK_TAIL	O
(	O
qu	pointer
->	O
allocations	struct
,	O
an	pointer
)	O
;	O
return	O
(	O
byte	char
*	O
)	O
an	pointer
+	O
MEM_ROUND	O
(	O
sizeof	O
(	O
*	O
an	pointer
)	O
)	O
;	O
}	O
void	O
*	O
adns__alloc_interim	function
(	O
adns_query	pointer
qu	pointer
,	O
size_t	long
sz	int
)	O
{	O
void	O
*	O
rv	pointer
;	O
sz	int
=	O
MEM_ROUND	O
(	O
sz	int
)	O
;	O
rv	pointer
=	O
alloc_common	function
(	O
qu	pointer
,	O
sz	int
)	O
;	O
if	O
(	O
!	O
rv	pointer
)	O
return	O
0	int
;	O
qu	pointer
->	O
interim_allocd	int
+=	O
sz	int
;	O
return	O
rv	pointer
;	O
}	O
void	O
*	O
adns__alloc_preserved	function
(	O
adns_query	pointer
qu	pointer
,	O
size_t	long
sz	int
)	O
{	O
void	O
*	O
rv	pointer
;	O
sz	int
=	O
MEM_ROUND	O
(	O
sz	int
)	O
;	O
rv	pointer
=	O
adns__alloc_interim	function
(	O
qu	pointer
,	O
sz	int
)	O
;	O
if	O
(	O
!	O
rv	pointer
)	O
return	O
0	int
;	O
qu	pointer
->	O
preserved_allocd	int
+=	O
sz	int
;	O
return	O
rv	pointer
;	O
}	O
void	O
*	O
adns__alloc_mine	function
(	O
adns_query	pointer
qu	pointer
,	O
size_t	long
sz	int
)	O
{	O
return	O
alloc_common	function
(	O
qu	pointer
,	O
MEM_ROUND	O
(	O
sz	int
)	O
)	O
;	O
}	O
void	O
adns__transfer_interim	function
(	O
adns_query	pointer
from	pointer
,	O
adns_query	pointer
to	pointer
,	O
void	O
*	O
block	pointer
,	O
size_t	long
sz	int
)	O
{	O
allocnode	struct
*	O
an	pointer
;	O
if	O
(	O
!	O
block	pointer
)	O
return	O
;	O
an	pointer
=	O
(	O
void	O
*	O
)	O
(	O
(	O
byte	char
*	O
)	O
block	pointer
-	O
MEM_ROUND	O
(	O
sizeof	O
(	O
*	O
an	pointer
)	O
)	O
)	O
;	O
assert	O
(	O
!	O
to	pointer
->	O
final_allocspace	pointer
)	O
;	O
assert	O
(	O
!	O
from	pointer
->	O
final_allocspace	pointer
)	O
;	O
LIST_UNLINK	O
(	O
from	pointer
->	O
allocations	struct
,	O
an	pointer
)	O
;	O
LIST_LINK_TAIL	O
(	O
to	pointer
->	O
allocations	struct
,	O
an	pointer
)	O
;	O
sz	int
=	O
MEM_ROUND	O
(	O
sz	int
)	O
;	O
from	pointer
->	O
interim_allocd	int
-=	O
sz	int
;	O
to	pointer
->	O
interim_allocd	int
+=	O
sz	int
;	O
if	O
(	O
to	pointer
->	O
expires	long
>	O
from	pointer
->	O
expires	long
)	O
to	pointer
->	O
expires	long
=	O
from	pointer
->	O
expires	long
;	O
}	O
void	O
*	O
adns__alloc_final	function
(	O
adns_query	pointer
qu	pointer
,	O
size_t	long
sz	int
)	O
{	O
void	O
*	O
rp	pointer
;	O
sz	int
=	O
MEM_ROUND	O
(	O
sz	int
)	O
;	O
rp	pointer
=	O
qu	pointer
->	O
final_allocspace	pointer
;	O
assert	O
(	O
rp	pointer
)	O
;	O
qu	pointer
->	O
interim_allocd	int
-=	O
sz	int
;	O
assert	O
(	O
qu	pointer
->	O
interim_allocd	int
>=	O
0	int
)	O
;	O
qu	pointer
->	O
final_allocspace	pointer
=	O
(	O
byte	char
*	O
)	O
rp	pointer
+	O
sz	int
;	O
return	O
rp	pointer
;	O
}	O
static	O
void	O
cancel_children	function
(	O
adns_query	pointer
qu	pointer
)	O
{	O
adns_query	pointer
cqu	pointer
,	O
ncqu	pointer
;	O
for	O
(	O
cqu	pointer
=	O
qu	pointer
->	O
children	struct
.	O
head	pointer
;	O
cqu	pointer
;	O
cqu	pointer
=	O
ncqu	pointer
)	O
{	O
ncqu	pointer
=	O
cqu	pointer
->	O
siblings	struct
.	O
next	pointer
;	O
adns_cancel	function
(	O
cqu	pointer
)	O
;	O
}	O
}	O
void	O
adns__reset_preserved	function
(	O
adns_query	pointer
qu	pointer
)	O
{	O
assert	O
(	O
!	O
qu	pointer
->	O
final_allocspace	pointer
)	O
;	O
cancel_children	function
(	O
qu	pointer
)	O
;	O
qu	pointer
->	O
answer	pointer
->	O
nrrs	int
=	O
0	int
;	O
qu	pointer
->	O
answer	pointer
->	O
rrs	union
.	O
untyped	pointer
=	O
0	int
;	O
qu	pointer
->	O
interim_allocd	int
=	O
qu	pointer
->	O
preserved_allocd	int
;	O
}	O
static	O
void	O
free_query_allocs	function
(	O
adns_query	pointer
qu	pointer
)	O
{	O
allocnode	struct
*	O
an	pointer
,	O
*	O
ann	pointer
;	O
cancel_children	function
(	O
qu	pointer
)	O
;	O
for	O
(	O
an	pointer
=	O
qu	pointer
->	O
allocations	struct
.	O
head	pointer
;	O
an	pointer
;	O
an	pointer
=	O
ann	pointer
)	O
{	O
ann	pointer
=	O
an	pointer
->	O
next	pointer
;	O
free	function
(	O
an	pointer
)	O
;	O
}	O
LIST_INIT	O
(	O
qu	pointer
->	O
allocations	struct
)	O
;	O
adns__vbuf_free	function
(	O
&	O
qu	pointer
->	O
vb	pointer
)	O
;	O
adns__vbuf_free	function
(	O
&	O
qu	pointer
->	O
search_vb	struct
)	O
;	O
free	function
(	O
qu	pointer
->	O
query_dgram	pointer
)	O
;	O
qu	pointer
->	O
query_dgram	pointer
=	O
0	int
;	O
}	O
void	O
adns_cancel	function
(	O
adns_query	pointer
qu	pointer
)	O
{	O
adns_state	pointer
ads	pointer
;	O
ads	pointer
=	O
qu	pointer
->	O
ads	pointer
;	O
adns__consistency	function
(	O
ads	pointer
,	O
qu	pointer
,	O
cc_entex	int
)	O
;	O
if	O
(	O
qu	pointer
->	O
parent	pointer
)	O
LIST_UNLINK_PART	O
(	O
qu	pointer
->	O
parent	pointer
->	O
children	struct
,	O
qu	pointer
,	O
siblings	struct
.	O
)	O
;	O
switch	O
(	O
qu	pointer
->	O
state	pointer
)	O
{	O
case	O
query_tosend	int
:	O
LIST_UNLINK	O
(	O
ads	pointer
->	O
udpw	struct
,	O
qu	pointer
)	O
;	O
break	O
;	O
case	O
query_tcpw	int
:	O
LIST_UNLINK	O
(	O
ads	pointer
->	O
tcpw	struct
,	O
qu	pointer
)	O
;	O
break	O
;	O
case	O
query_childw	int
:	O
LIST_UNLINK	O
(	O
ads	pointer
->	O
childw	struct
,	O
qu	pointer
)	O
;	O
break	O
;	O
case	O
query_done	int
:	O
LIST_UNLINK	O
(	O
ads	pointer
->	O
output	struct
,	O
qu	pointer
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
free_query_allocs	function
(	O
qu	pointer
)	O
;	O
free	function
(	O
qu	pointer
->	O
answer	pointer
)	O
;	O
free	function
(	O
qu	pointer
)	O
;	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
}	O
void	O
adns__update_expires	function
(	O
adns_query	pointer
qu	pointer
,	O
unsigned	O
long	O
ttl	long
,	O
struct	O
timeval	struct
now	pointer
)	O
{	O
time_t	long
max	int
;	O
assert	O
(	O
ttl	long
<=	O
MAXTTLBELIEVE	O
)	O
;	O
max	int
=	O
now	pointer
.	O
tv_sec	long
+	O
ttl	long
;	O
if	O
(	O
qu	pointer
->	O
expires	long
<	O
max	int
)	O
return	O
;	O
qu	pointer
->	O
expires	long
=	O
max	int
;	O
}	O
static	O
void	O
makefinal_query	function
(	O
adns_query	pointer
qu	pointer
)	O
{	O
adns_answer	struct
*	O
ans	pointer
;	O
int	O
rrn	int
;	O
ans	pointer
=	O
qu	pointer
->	O
answer	pointer
;	O
if	O
(	O
qu	pointer
->	O
interim_allocd	int
)	O
{	O
ans	pointer
=	O
realloc	function
(	O
qu	pointer
->	O
answer	pointer
,	O
MEM_ROUND	O
(	O
MEM_ROUND	O
(	O
sizeof	O
(	O
*	O
ans	pointer
)	O
)	O
+	O
qu	pointer
->	O
interim_allocd	int
)	O
)	O
;	O
if	O
(	O
!	O
ans	pointer
)	O
goto	O
x_nomem	O
;	O
qu	pointer
->	O
answer	pointer
=	O
ans	pointer
;	O
}	O
qu	pointer
->	O
final_allocspace	pointer
=	O
(	O
byte	char
*	O
)	O
ans	pointer
+	O
MEM_ROUND	O
(	O
sizeof	O
(	O
*	O
ans	pointer
)	O
)	O
;	O
adns__makefinal_str	function
(	O
qu	pointer
,	O
&	O
ans	pointer
->	O
cname	pointer
)	O
;	O
adns__makefinal_str	function
(	O
qu	pointer
,	O
&	O
ans	pointer
->	O
owner	pointer
)	O
;	O
if	O
(	O
ans	pointer
->	O
nrrs	int
)	O
{	O
adns__makefinal_block	function
(	O
qu	pointer
,	O
&	O
ans	pointer
->	O
rrs	union
.	O
untyped	pointer
,	O
ans	pointer
->	O
nrrs	int
*	O
ans	pointer
->	O
rrsz	int
)	O
;	O
for	O
(	O
rrn	int
=	O
0	int
;	O
rrn	int
<	O
ans	pointer
->	O
nrrs	int
;	O
rrn	int
++	O
)	O
qu	pointer
->	O
typei	pointer
->	O
makefinal	pointer
(	O
qu	pointer
,	O
ans	pointer
->	O
rrs	union
.	O
bytes	pointer
+	O
rrn	int
*	O
ans	pointer
->	O
rrsz	int
)	O
;	O
}	O
free_query_allocs	function
(	O
qu	pointer
)	O
;	O
return	O
;	O
x_nomem	O
:	O
qu	pointer
->	O
preserved_allocd	int
=	O
0	int
;	O
qu	pointer
->	O
answer	pointer
->	O
cname	pointer
=	O
0	int
;	O
qu	pointer
->	O
answer	pointer
->	O
owner	pointer
=	O
0	int
;	O
adns__reset_preserved	function
(	O
qu	pointer
)	O
;	O
qu	pointer
->	O
answer	pointer
->	O
status	enum
=	O
adns_s_nomemory	int
;	O
free_query_allocs	function
(	O
qu	pointer
)	O
;	O
}	O
void	O
adns__query_done	function
(	O
adns_query	pointer
qu	pointer
)	O
{	O
adns_answer	struct
*	O
ans	pointer
;	O
adns_query	pointer
parent	pointer
;	O
cancel_children	function
(	O
qu	pointer
)	O
;	O
qu	pointer
->	O
id	int
=	O
-	O
1	int
;	O
ans	pointer
=	O
qu	pointer
->	O
answer	pointer
;	O
if	O
(	O
qu	pointer
->	O
flags	enum
&	O
adns_qf_search	int
&&	O
ans	pointer
->	O
status	enum
!=	O
adns_s_nomemory	int
)	O
{	O
if	O
(	O
!	O
save_owner	function
(	O
qu	pointer
,	O
qu	pointer
->	O
search_vb	struct
.	O
buf	pointer
,	O
qu	pointer
->	O
search_vb	struct
.	O
used	int
)	O
)	O
{	O
adns__query_fail	function
(	O
qu	pointer
,	O
adns_s_nomemory	int
)	O
;	O
return	O
;	O
}	O
}	O
if	O
(	O
ans	pointer
->	O
nrrs	int
&&	O
qu	pointer
->	O
typei	pointer
->	O
diff_needswap	pointer
)	O
{	O
if	O
(	O
!	O
adns__vbuf_ensure	function
(	O
&	O
qu	pointer
->	O
vb	pointer
,	O
qu	pointer
->	O
typei	pointer
->	O
rrsz	int
)	O
)	O
{	O
adns__query_fail	function
(	O
qu	pointer
,	O
adns_s_nomemory	int
)	O
;	O
return	O
;	O
}	O
adns__isort	function
(	O
ans	pointer
->	O
rrs	union
.	O
bytes	pointer
,	O
ans	pointer
->	O
nrrs	int
,	O
ans	pointer
->	O
rrsz	int
,	O
qu	pointer
->	O
vb	pointer
.	O
buf	pointer
,	O
(	O
int	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
)	O
)	O
qu	pointer
->	O
typei	pointer
->	O
diff_needswap	pointer
,	O
qu	pointer
->	O
ads	pointer
)	O
;	O
}	O
if	O
(	O
ans	pointer
->	O
nrrs	int
&&	O
qu	pointer
->	O
typei	pointer
->	O
postsort	pointer
)	O
{	O
qu	pointer
->	O
typei	pointer
->	O
postsort	pointer
(	O
qu	pointer
->	O
ads	pointer
,	O
ans	pointer
->	O
rrs	union
.	O
bytes	pointer
,	O
ans	pointer
->	O
nrrs	int
,	O
qu	pointer
->	O
typei	pointer
)	O
;	O
}	O
ans	pointer
->	O
expires	long
=	O
qu	pointer
->	O
expires	long
;	O
parent	pointer
=	O
qu	pointer
->	O
parent	pointer
;	O
if	O
(	O
parent	pointer
)	O
{	O
LIST_UNLINK_PART	O
(	O
parent	pointer
->	O
children	struct
,	O
qu	pointer
,	O
siblings	struct
.	O
)	O
;	O
LIST_UNLINK	O
(	O
qu	pointer
->	O
ads	pointer
->	O
childw	struct
,	O
parent	pointer
)	O
;	O
qu	pointer
->	O
ctx	struct
.	O
callback	pointer
(	O
parent	pointer
,	O
qu	pointer
)	O
;	O
free_query_allocs	function
(	O
qu	pointer
)	O
;	O
free	function
(	O
qu	pointer
->	O
answer	pointer
)	O
;	O
free	function
(	O
qu	pointer
)	O
;	O
}	O
else	O
{	O
makefinal_query	function
(	O
qu	pointer
)	O
;	O
LIST_LINK_TAIL	O
(	O
qu	pointer
->	O
ads	pointer
->	O
output	struct
,	O
qu	pointer
)	O
;	O
qu	pointer
->	O
state	pointer
=	O
query_done	int
;	O
}	O
}	O
void	O
adns__query_fail	function
(	O
adns_query	pointer
qu	pointer
,	O
adns_status	enum
stat	enum
)	O
{	O
adns__reset_preserved	function
(	O
qu	pointer
)	O
;	O
qu	pointer
->	O
answer	pointer
->	O
status	enum
=	O
stat	enum
;	O
adns__query_done	function
(	O
qu	pointer
)	O
;	O
}	O
void	O
adns__makefinal_str	function
(	O
adns_query	pointer
qu	pointer
,	O
char	O
*	O
*	O
strp	pointer
)	O
{	O
int	O
l	long
;	O
char	O
*	O
before	pointer
,	O
*	O
after	pointer
;	O
before	pointer
=	O
*	O
strp	pointer
;	O
if	O
(	O
!	O
before	pointer
)	O
return	O
;	O
l	long
=	O
strlen	function
(	O
before	pointer
)	O
+	O
1	int
;	O
after	pointer
=	O
adns__alloc_final	function
(	O
qu	pointer
,	O
l	long
)	O
;	O
memcpy	function
(	O
after	pointer
,	O
before	pointer
,	O
l	long
)	O
;	O
*	O
strp	pointer
=	O
after	pointer
;	O
}	O
void	O
adns__makefinal_block	function
(	O
adns_query	pointer
qu	pointer
,	O
void	O
*	O
*	O
blpp	pointer
,	O
size_t	long
sz	int
)	O
{	O
void	O
*	O
before	pointer
,	O
*	O
after	pointer
;	O
before	pointer
=	O
*	O
blpp	pointer
;	O
if	O
(	O
!	O
before	pointer
)	O
return	O
;	O
after	pointer
=	O
adns__alloc_final	function
(	O
qu	pointer
,	O
sz	int
)	O
;	O
memcpy	function
(	O
after	pointer
,	O
before	pointer
,	O
sz	int
)	O
;	O
*	O
blpp	pointer
=	O
after	pointer
;	O
}	O
