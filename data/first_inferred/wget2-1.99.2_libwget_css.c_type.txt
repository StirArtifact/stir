typedef	O
void	O
*	O
yyscan_t	pointer
;	O
int	O
yyget_leng	function
(	O
yyscan_t	pointer
yyscanner	pointer
)	O
;	O
char	O
*	O
yyget_text	function
(	O
yyscan_t	pointer
yyscanner	pointer
)	O
;	O
typedef	O
struct	O
yy_buffer_state	O
*	O
YY_BUFFER_STATE	pointer
;	O
int	O
yylex_init	function
(	O
yyscan_t	pointer
*	O
scanner	pointer
)	O
;	O
YY_BUFFER_STATE	pointer
yy_scan_string	function
(	O
const	O
char	O
*	O
yystr	pointer
,	O
yyscan_t	pointer
yyscanner	pointer
)	O
;	O
YY_BUFFER_STATE	pointer
yy_scan_bytes	function
(	O
const	O
char	O
*	O
yystr	pointer
,	O
int	O
len	long
,	O
yyscan_t	pointer
yyscanner	pointer
)	O
;	O
int	O
yylex	function
(	O
yyscan_t	pointer
yyscanner	pointer
)	O
;	O
int	O
yylex_destroy	function
(	O
yyscan_t	pointer
yyscanner	pointer
)	O
;	O
void	O
*	O
yyalloc	function
(	O
size_t	long
size	pointer
)	O
;	O
void	O
*	O
yyrealloc	function
(	O
void	O
*	O
p	pointer
,	O
size_t	long
size	pointer
)	O
;	O
void	O
*	O
yyalloc	function
(	O
size_t	long
size	pointer
)	O
{	O
return	O
wget_malloc	function
(	O
size	pointer
)	O
;	O
}	O
void	O
*	O
yyrealloc	function
(	O
void	O
*	O
p	pointer
,	O
size_t	long
size	pointer
)	O
{	O
return	O
wget_realloc	function
(	O
p	pointer
,	O
size	pointer
)	O
;	O
}	O
void	O
wget_css_parse_buffer	function
(	O
const	O
char	O
*	O
buf	pointer
,	O
size_t	long
len	long
,	O
wget_css_parse_uri_callback	function
*	O
callback_uri	pointer
,	O
wget_css_parse_encoding_callback	function
*	O
callback_encoding	pointer
,	O
void	O
*	O
user_ctx	pointer
)	O
{	O
int	O
token	pointer
;	O
size_t	long
length	long
,	O
pos	int
=	O
0	int
;	O
char	O
*	O
text	pointer
;	O
yyscan_t	pointer
scanner	pointer
;	O
yylex_init	function
(	O
&	O
scanner	pointer
)	O
;	O
yy_scan_bytes	function
(	O
buf	pointer
,	O
(	O
int	O
)	O
len	long
,	O
scanner	pointer
)	O
;	O
while	O
(	O
(	O
token	pointer
=	O
yylex	function
(	O
scanner	pointer
)	O
)	O
!=	O
CSSEOF	int
)	O
{	O
if	O
(	O
token	pointer
==	O
IMPORT_SYM	int
)	O
{	O
pos	int
+=	O
yyget_leng	function
(	O
scanner	pointer
)	O
;	O
while	O
(	O
(	O
token	pointer
=	O
yylex	function
(	O
scanner	pointer
)	O
)	O
==	O
S	int
)	O
pos	int
+=	O
yyget_leng	function
(	O
scanner	pointer
)	O
;	O
if	O
(	O
token	pointer
==	O
STRING	int
)	O
token	pointer
=	O
URI	int
;	O
}	O
if	O
(	O
token	pointer
==	O
URI	int
&&	O
callback_uri	pointer
)	O
{	O
text	pointer
=	O
yyget_text	function
(	O
scanner	pointer
)	O
;	O
length	long
=	O
yyget_leng	function
(	O
scanner	pointer
)	O
;	O
if	O
(	O
*	O
text	pointer
==	O
'\''	O
||	O
*	O
text	pointer
==	O
'\"'	O
)	O
{	O
callback_uri	pointer
(	O
user_ctx	pointer
,	O
text	pointer
+	O
1	int
,	O
length	long
-	O
2	int
,	O
pos	int
+	O
1	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
wget_strncasecmp_ascii	function
(	O
text	pointer
,	O
"url("	pointer
,	O
4	int
)	O
)	O
{	O
char	O
*	O
otext	pointer
=	O
text	pointer
;	O
for	O
(	O
length	long
--	O
;	O
c_isspace	function
(	O
text	pointer
[	O
length	long
-	O
1	int
]	O
)	O
;	O
length	long
--	O
)	O
;	O
for	O
(	O
length	long
-=	O
4	int
,	O
text	pointer
+=	O
4	int
;	O
length	long
&&	O
c_isspace	function
(	O
*	O
text	pointer
)	O
;	O
text	pointer
++	O
,	O
length	long
--	O
)	O
;	O
if	O
(	O
length	long
&&	O
(	O
*	O
text	pointer
==	O
'\''	O
||	O
*	O
text	pointer
==	O
'\"'	O
)	O
)	O
{	O
text	pointer
++	O
;	O
length	long
--	O
;	O
}	O
if	O
(	O
length	long
&&	O
(	O
text	pointer
[	O
length	long
-	O
1	int
]	O
==	O
'\''	O
||	O
text	pointer
[	O
length	long
-	O
1	int
]	O
==	O
'\"'	O
)	O
)	O
length	long
--	O
;	O
callback_uri	pointer
(	O
user_ctx	pointer
,	O
text	pointer
,	O
length	long
,	O
pos	int
+	O
(	O
text	pointer
-	O
otext	pointer
)	O
)	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
token	pointer
==	O
CHARSET_SYM	int
&&	O
callback_encoding	pointer
)	O
{	O
pos	int
+=	O
yyget_leng	function
(	O
scanner	pointer
)	O
;	O
while	O
(	O
(	O
token	pointer
=	O
yylex	function
(	O
scanner	pointer
)	O
)	O
==	O
S	int
)	O
pos	int
+=	O
yyget_leng	function
(	O
scanner	pointer
)	O
;	O
if	O
(	O
token	pointer
==	O
STRING	int
)	O
{	O
text	pointer
=	O
yyget_text	function
(	O
scanner	pointer
)	O
;	O
length	long
=	O
yyget_leng	function
(	O
scanner	pointer
)	O
;	O
if	O
(	O
*	O
text	pointer
==	O
'\''	O
||	O
*	O
text	pointer
==	O
'\"'	O
)	O
{	O
callback_encoding	pointer
(	O
user_ctx	pointer
,	O
text	pointer
+	O
1	int
,	O
length	long
-	O
2	int
)	O
;	O
}	O
else	O
{	O
callback_encoding	pointer
(	O
user_ctx	pointer
,	O
text	pointer
,	O
length	long
)	O
;	O
}	O
}	O
else	O
{	O
error_printf	O
(	O
_	O
(	O
"Unknown token after @charset: %d\n"	pointer
)	O
,	O
token	pointer
)	O
;	O
}	O
}	O
pos	int
+=	O
yyget_leng	function
(	O
scanner	pointer
)	O
;	O
}	O
yylex_destroy	function
(	O
scanner	pointer
)	O
;	O
}	O
void	O
wget_css_parse_file	function
(	O
const	O
char	O
*	O
fname	pointer
,	O
wget_css_parse_uri_callback	function
*	O
callback_uri	pointer
,	O
wget_css_parse_encoding_callback	function
*	O
callback_encoding	pointer
,	O
void	O
*	O
user_ctx	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
fname	pointer
,	O
"-"	pointer
)	O
)	O
{	O
int	O
fd	array
;	O
if	O
(	O
(	O
fd	array
=	O
open	function
(	O
fname	pointer
,	O
O_RDONLY	int
|	O
O_BINARY	int
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
struct	O
stat	struct
st	struct
;	O
if	O
(	O
fstat	function
(	O
fd	array
,	O
&	O
st	struct
)	O
==	O
0	int
)	O
{	O
size_t	long
nread	long
=	O
st	struct
.	O
st_size	long
;	O
char	O
*	O
buf	pointer
=	O
mmap	function
(	O
NULL	O
,	O
nread	long
+	O
1	int
,	O
PROT_READ	int
|	O
PROT_WRITE	int
,	O
MAP_PRIVATE	int
,	O
fd	array
,	O
0	int
)	O
;	O
if	O
(	O
nread	long
>	O
0	int
)	O
{	O
buf	pointer
[	O
nread	long
]	O
=	O
0	int
;	O
wget_css_parse_buffer	function
(	O
buf	pointer
,	O
st	struct
.	O
st_size	long
,	O
callback_uri	pointer
,	O
callback_encoding	pointer
,	O
user_ctx	pointer
)	O
;	O
}	O
munmap	function
(	O
buf	pointer
,	O
nread	long
)	O
;	O
}	O
close	function
(	O
fd	array
)	O
;	O
}	O
else	O
error_printf	O
(	O
_	O
(	O
"Failed to open %s\n"	pointer
)	O
,	O
fname	pointer
)	O
;	O
}	O
else	O
{	O
char	O
tmp	array
[	O
4096	int
]	O
;	O
ssize_t	long
nbytes	long
;	O
wget_buffer	struct
buf	pointer
;	O
wget_buffer_init	function
(	O
&	O
buf	pointer
,	O
NULL	O
,	O
4096	int
)	O
;	O
while	O
(	O
(	O
nbytes	long
=	O
read	function
(	O
STDIN_FILENO	int
,	O
tmp	array
,	O
sizeof	O
(	O
tmp	array
)	O
)	O
)	O
>	O
0	int
)	O
{	O
wget_buffer_memcat	function
(	O
&	O
buf	pointer
,	O
tmp	array
,	O
nbytes	long
)	O
;	O
}	O
if	O
(	O
buf	pointer
.	O
length	long
)	O
wget_css_parse_buffer	function
(	O
buf	pointer
.	O
data	pointer
,	O
buf	pointer
.	O
length	long
,	O
callback_uri	pointer
,	O
callback_encoding	pointer
,	O
user_ctx	pointer
)	O
;	O
wget_buffer_deinit	function
(	O
&	O
buf	pointer
)	O
;	O
}	O
}	O
