const	O
char	O
usage_str	array
[	O
]	O
=	O
"usage: \"user name\" or \"user group\"\n"	pointer
;	O
static	O
int	O
duplicate_group	function
(	O
gid_t	int
g	int
,	O
const	O
gid_t	int
*	O
vec	pointer
,	O
int	O
len	int
)	O
{	O
while	O
(	O
len	int
--	O
)	O
{	O
if	O
(	O
*	O
vec	pointer
==	O
g	int
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
gid_t	int
*	O
get_group_list	function
(	O
int	O
*	O
ngroups	pointer
)	O
{	O
int	O
len	int
;	O
gid_t	int
*	O
grouplist	pointer
;	O
len	int
=	O
getgroups	function
(	O
0	int
,	O
NULL	O
)	O
;	O
if	O
(	O
len	int
<	O
0	int
)	O
{	O
perror	function
(	O
"getgroups"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
else	O
{	O
grouplist	pointer
=	O
malloc	function
(	O
(	O
1	int
+	O
len	int
)	O
*	O
sizeof	O
(	O
*	O
grouplist	pointer
)	O
)	O
;	O
if	O
(	O
grouplist	pointer
)	O
{	O
gid_t	int
egid	int
=	O
getegid	function
(	O
)	O
;	O
if	O
(	O
getgroups	function
(	O
len	int
,	O
&	O
grouplist	pointer
[	O
1	int
]	O
)	O
)	O
{	O
if	O
(	O
duplicate_group	function
(	O
egid	int
,	O
grouplist	pointer
+	O
1	int
,	O
len	int
)	O
)	O
{	O
*	O
ngroups	pointer
=	O
len	int
;	O
return	O
&	O
grouplist	pointer
[	O
1	int
]	O
;	O
}	O
else	O
{	O
grouplist	pointer
[	O
0	int
]	O
=	O
egid	int
;	O
*	O
ngroups	pointer
=	O
len	int
+	O
1	int
;	O
return	O
&	O
grouplist	pointer
[	O
0	int
]	O
;	O
}	O
}	O
else	O
{	O
perror	function
(	O
"getgroups"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
else	O
{	O
perror	function
(	O
"malloc"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
}	O
static	O
void	O
do_groups	function
(	O
)	O
{	O
int	O
ngroups	pointer
;	O
const	O
gid_t	int
*	O
list	pointer
=	O
get_group_list	function
(	O
&	O
ngroups	pointer
)	O
;	O
if	O
(	O
list	pointer
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ngroups	pointer
;	O
++	O
i	int
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"%ld\n"	pointer
,	O
(	O
long	O
)	O
list	pointer
[	O
i	int
]	O
)	O
;	O
}	O
}	O
else	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"%ld\n"	pointer
,	O
(	O
long	O
)	O
getegid	function
(	O
)	O
)	O
;	O
}	O
}	O
static	O
int	O
compare_groups	function
(	O
const	O
void	O
*	O
pv1	pointer
,	O
const	O
void	O
*	O
pv2	pointer
)	O
{	O
const	O
gid_t	int
*	O
p1	pointer
=	O
(	O
const	O
gid_t	int
*	O
)	O
pv1	pointer
;	O
const	O
gid_t	int
*	O
p2	pointer
=	O
(	O
const	O
gid_t	int
*	O
)	O
pv2	pointer
;	O
if	O
(	O
*	O
p1	pointer
<	O
*	O
p2	pointer
)	O
return	O
-	O
1	int
;	O
else	O
if	O
(	O
*	O
p1	pointer
>	O
*	O
p2	pointer
)	O
return	O
1	int
;	O
else	O
return	O
0	int
;	O
}	O
static	O
gid_t	int
foreign_group	function
(	O
void	O
)	O
{	O
int	O
ngroups	pointer
,	O
i	int
;	O
gid_t	int
*	O
list	pointer
=	O
get_group_list	function
(	O
&	O
ngroups	pointer
)	O
;	O
qsort	function
(	O
list	pointer
,	O
ngroups	pointer
,	O
sizeof	O
(	O
*	O
list	pointer
)	O
,	O
compare_groups	function
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
ngroups	pointer
;	O
++	O
i	int
)	O
{	O
const	O
gid_t	int
nextval	int
=	O
1	int
+	O
list	pointer
[	O
i	int
-	O
1	int
]	O
;	O
if	O
(	O
nextval	int
<	O
list	pointer
[	O
i	int
]	O
)	O
{	O
return	O
nextval	int
;	O
}	O
}	O
if	O
(	O
ngroups	pointer
)	O
{	O
if	O
(	O
list	pointer
[	O
0	int
]	O
>	O
0	int
)	O
return	O
0	int
;	O
else	O
return	O
1	int
+	O
list	pointer
[	O
ngroups	pointer
-	O
1	int
]	O
;	O
}	O
else	O
{	O
gid_t	int
last_resort	int
=	O
getegid	function
(	O
)	O
;	O
if	O
(	O
last_resort	int
>	O
0	int
)	O
return	O
0	int
;	O
else	O
return	O
1	int
+	O
last_resort	int
;	O
}	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
if	O
(	O
2	int
==	O
argc	int
)	O
{	O
if	O
(	O
0	int
==	O
strcmp	function
(	O
argv	array
[	O
1	int
]	O
,	O
"name"	pointer
)	O
)	O
{	O
struct	O
passwd	struct
*	O
p	pointer
;	O
const	O
char	O
*	O
pn	pointer
=	O
"unknown"	pointer
;	O
p	pointer
=	O
getpwuid	function
(	O
getuid	function
(	O
)	O
)	O
;	O
if	O
(	O
p	pointer
)	O
pn	pointer
=	O
p	pointer
->	O
pw_name	pointer
;	O
fprintf	function
(	O
stdout	pointer
,	O
"%s\n"	pointer
,	O
pn	pointer
)	O
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
0	int
==	O
strcmp	function
(	O
argv	array
[	O
1	int
]	O
,	O
"groups"	pointer
)	O
)	O
{	O
do_groups	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
0	int
==	O
strcmp	function
(	O
argv	array
[	O
1	int
]	O
,	O
"foreigngroup"	pointer
)	O
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"%ld\n"	pointer
,	O
(	O
long	O
)	O
foreign_group	function
(	O
)	O
)	O
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
0	int
==	O
strcmp	function
(	O
argv	array
[	O
1	int
]	O
,	O
"group"	pointer
)	O
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"%ld\n"	pointer
,	O
(	O
long	O
)	O
getgid	function
(	O
)	O
)	O
;	O
return	O
0	int
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s"	pointer
,	O
usage_str	array
)	O
;	O
return	O
1	int
;	O
}	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s"	pointer
,	O
usage_str	array
)	O
;	O
return	O
1	int
;	O
}	O
}	O
