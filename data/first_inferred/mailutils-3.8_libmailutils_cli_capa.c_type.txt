static	O
mu_list_t	pointer
capa_list	pointer
;	O
static	O
void	O
capa_free	function
(	O
void	O
*	O
ptr	pointer
)	O
{	O
struct	O
mu_cli_capa	struct
*	O
cp	pointer
=	O
ptr	pointer
;	O
free	function
(	O
cp	pointer
->	O
name	pointer
)	O
;	O
free	function
(	O
cp	pointer
)	O
;	O
}	O
void	O
mu_cli_capa_register	function
(	O
struct	O
mu_cli_capa	struct
*	O
capa	pointer
)	O
{	O
struct	O
mu_cli_capa	struct
*	O
cp	pointer
=	O
mu_alloc	function
(	O
sizeof	O
(	O
*	O
cp	pointer
)	O
)	O
;	O
cp	pointer
->	O
name	pointer
=	O
mu_strdup	function
(	O
capa	pointer
->	O
name	pointer
)	O
;	O
cp	pointer
->	O
opt	pointer
=	O
capa	pointer
->	O
opt	pointer
;	O
cp	pointer
->	O
cfg	pointer
=	O
capa	pointer
->	O
cfg	pointer
;	O
cp	pointer
->	O
parser	pointer
=	O
capa	pointer
->	O
parser	pointer
;	O
cp	pointer
->	O
commit	pointer
=	O
capa	pointer
->	O
commit	pointer
;	O
if	O
(	O
!	O
capa_list	pointer
)	O
{	O
mu_list_create	function
(	O
&	O
capa_list	pointer
)	O
;	O
mu_list_set_destroy_item	function
(	O
capa_list	pointer
,	O
capa_free	function
)	O
;	O
}	O
mu_list_append	function
(	O
capa_list	pointer
,	O
cp	pointer
)	O
;	O
}	O
struct	O
capa_apply	struct
{	O
char	O
const	O
*	O
name	pointer
;	O
mu_list_t	pointer
opts	pointer
;	O
mu_list_t	pointer
commits	pointer
;	O
int	O
found	int
;	O
}	O
;	O
static	O
int	O
capa_extend	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
mu_cli_capa	struct
*	O
cp	pointer
=	O
item	pointer
;	O
struct	O
capa_apply	struct
*	O
ap	array
=	O
data	pointer
;	O
if	O
(	O
strcmp	function
(	O
cp	pointer
->	O
name	pointer
,	O
ap	array
->	O
name	pointer
)	O
==	O
0	int
)	O
{	O
ap	array
->	O
found	int
=	O
1	int
;	O
if	O
(	O
cp	pointer
->	O
opt	pointer
)	O
mu_list_append	function
(	O
ap	array
->	O
opts	pointer
,	O
cp	pointer
->	O
opt	pointer
)	O
;	O
if	O
(	O
cp	pointer
->	O
commit	pointer
)	O
mu_list_append	function
(	O
ap	array
->	O
commits	pointer
,	O
cp	pointer
->	O
commit	pointer
)	O
;	O
if	O
(	O
cp	pointer
->	O
parser	pointer
||	O
cp	pointer
->	O
cfg	pointer
)	O
mu_config_root_register_section	function
(	O
NULL	O
,	O
cp	pointer
->	O
name	pointer
,	O
NULL	O
,	O
cp	pointer
->	O
parser	pointer
,	O
cp	pointer
->	O
cfg	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
mu_cli_capa_extend_settings	function
(	O
char	O
const	O
*	O
name	pointer
,	O
mu_list_t	pointer
opts	pointer
,	O
mu_list_t	pointer
commits	pointer
)	O
{	O
struct	O
capa_apply	struct
app	struct
;	O
app	struct
.	O
name	pointer
=	O
name	pointer
;	O
app	struct
.	O
opts	pointer
=	O
opts	pointer
;	O
app	struct
.	O
commits	pointer
=	O
commits	pointer
;	O
app	struct
.	O
found	int
=	O
0	int
;	O
mu_list_foreach	function
(	O
capa_list	pointer
,	O
capa_extend	function
,	O
&	O
app	struct
)	O
;	O
if	O
(	O
!	O
app	struct
.	O
found	int
)	O
mu_error	function
(	O
_	O
(	O
"INTERNAL ERROR at %s:%d: unknown standard capability `%s'"	pointer
)	O
,	O
__FILE__	O
,	O
__LINE__	O
,	O
name	pointer
)	O
;	O
}	O
