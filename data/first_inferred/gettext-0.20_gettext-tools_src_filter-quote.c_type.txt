struct	O
result	struct
{	O
char	O
*	O
output	pointer
;	O
char	O
*	O
offset	pointer
;	O
bool	bool
bold	bool
;	O
}	O
;	O
static	O
void	O
convert_quote_callback	function
(	O
char	O
quote	char
,	O
const	O
char	O
*	O
quoted	pointer
,	O
size_t	long
quoted_length	long
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
result	struct
*	O
result	struct
=	O
data	pointer
;	O
switch	O
(	O
quote	char
)	O
{	O
case	O
'\0'	O
:	O
memcpy	function
(	O
result	struct
->	O
offset	pointer
,	O
quoted	pointer
,	O
quoted_length	long
)	O
;	O
result	struct
->	O
offset	pointer
+=	O
quoted_length	long
;	O
break	O
;	O
case	O
'"'	O
:	O
memcpy	function
(	O
result	struct
->	O
offset	pointer
,	O
"\xe2\x80\x9c"	pointer
,	O
3	int
)	O
;	O
result	struct
->	O
offset	pointer
+=	O
3	int
;	O
if	O
(	O
result	struct
->	O
bold	bool
)	O
{	O
memcpy	function
(	O
result	struct
->	O
offset	pointer
,	O
BOLD_START	pointer
,	O
4	int
)	O
;	O
result	struct
->	O
offset	pointer
+=	O
4	int
;	O
}	O
memcpy	function
(	O
result	struct
->	O
offset	pointer
,	O
quoted	pointer
,	O
quoted_length	long
)	O
;	O
result	struct
->	O
offset	pointer
+=	O
quoted_length	long
;	O
if	O
(	O
result	struct
->	O
bold	bool
)	O
{	O
memcpy	function
(	O
result	struct
->	O
offset	pointer
,	O
BOLD_END	pointer
,	O
4	int
)	O
;	O
result	struct
->	O
offset	pointer
+=	O
4	int
;	O
}	O
memcpy	function
(	O
result	struct
->	O
offset	pointer
,	O
"\xe2\x80\x9d"	pointer
,	O
3	int
)	O
;	O
result	struct
->	O
offset	pointer
+=	O
3	int
;	O
break	O
;	O
case	O
'\''	O
:	O
memcpy	function
(	O
result	struct
->	O
offset	pointer
,	O
"\xe2\x80\x98"	pointer
,	O
3	int
)	O
;	O
result	struct
->	O
offset	pointer
+=	O
3	int
;	O
if	O
(	O
result	struct
->	O
bold	bool
)	O
{	O
memcpy	function
(	O
result	struct
->	O
offset	pointer
,	O
BOLD_START	pointer
,	O
4	int
)	O
;	O
result	struct
->	O
offset	pointer
+=	O
4	int
;	O
}	O
memcpy	function
(	O
result	struct
->	O
offset	pointer
,	O
quoted	pointer
,	O
quoted_length	long
)	O
;	O
result	struct
->	O
offset	pointer
+=	O
quoted_length	long
;	O
if	O
(	O
result	struct
->	O
bold	bool
)	O
{	O
memcpy	function
(	O
result	struct
->	O
offset	pointer
,	O
BOLD_END	pointer
,	O
4	int
)	O
;	O
result	struct
->	O
offset	pointer
+=	O
4	int
;	O
}	O
memcpy	function
(	O
result	struct
->	O
offset	pointer
,	O
"\xe2\x80\x99"	pointer
,	O
3	int
)	O
;	O
result	struct
->	O
offset	pointer
+=	O
3	int
;	O
break	O
;	O
}	O
}	O
static	O
void	O
convert_ascii_quote_to_unicode	function
(	O
const	O
char	O
*	O
input	pointer
,	O
size_t	long
input_len	long
,	O
char	O
*	O
*	O
output_p	pointer
,	O
size_t	long
*	O
output_len_p	pointer
,	O
bool	bool
bold	bool
)	O
{	O
const	O
char	O
*	O
p	pointer
;	O
size_t	long
quote_count	long
;	O
struct	O
result	struct
result	struct
;	O
quote_count	long
=	O
0	int
;	O
for	O
(	O
p	pointer
=	O
input	pointer
;	O
p	pointer
<	O
input	pointer
+	O
input_len	long
;	O
p	pointer
++	O
)	O
{	O
size_t	long
len	long
;	O
p	pointer
=	O
strpbrk	function
(	O
p	pointer
,	O
"`'\""	pointer
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
break	O
;	O
len	long
=	O
strspn	function
(	O
p	pointer
,	O
"`'\""	pointer
)	O
;	O
quote_count	long
+=	O
len	long
;	O
p	pointer
+=	O
len	long
;	O
}	O
result	struct
.	O
output	pointer
=	O
XNMALLOC	O
(	O
input_len	long
-	O
quote_count	long
+	O
(	O
bold	bool
?	O
7	int
:	O
3	int
)	O
*	O
quote_count	long
+	O
1	int
,	O
char	O
)	O
;	O
result	struct
.	O
offset	pointer
=	O
result	struct
.	O
output	pointer
;	O
result	struct
.	O
bold	bool
=	O
bold	bool
;	O
scan_quoted	function
(	O
input	pointer
,	O
input_len	long
,	O
convert_quote_callback	function
,	O
&	O
result	struct
)	O
;	O
*	O
output_p	pointer
=	O
result	struct
.	O
output	pointer
;	O
*	O
output_len_p	pointer
=	O
result	struct
.	O
offset	pointer
-	O
result	struct
.	O
output	pointer
;	O
}	O
void	O
ascii_quote_to_unicode	function
(	O
const	O
char	O
*	O
input	pointer
,	O
size_t	long
input_len	long
,	O
char	O
*	O
*	O
output_p	pointer
,	O
size_t	long
*	O
output_len_p	pointer
)	O
{	O
convert_ascii_quote_to_unicode	function
(	O
input	pointer
,	O
input_len	long
,	O
output_p	pointer
,	O
output_len_p	pointer
,	O
false	int
)	O
;	O
}	O
void	O
ascii_quote_to_unicode_bold	function
(	O
const	O
char	O
*	O
input	pointer
,	O
size_t	long
input_len	long
,	O
char	O
*	O
*	O
output_p	pointer
,	O
size_t	long
*	O
output_len_p	pointer
)	O
{	O
convert_ascii_quote_to_unicode	function
(	O
input	pointer
,	O
input_len	long
,	O
output_p	pointer
,	O
output_len_p	pointer
,	O
true	int
)	O
;	O
}	O
