void	O
VGetEyeSpace	function
(	O
Viewport	struct
*	O
v	struct
,	O
VPoint	struct
EyePt	struct
,	O
VPoint	struct
CntrInt	struct
,	O
VPoint	struct
up	struct
)	O
{	O
VMatrix	struct
Mtx	pointer
,	O
es	struct
;	O
VPoint	struct
C1	struct
,	O
C2	struct
;	O
double	O
Hypotenuse	double
,	O
h1	double
,	O
CosA	double
,	O
SinA	double
;	O
VIdentMatrix	function
(	O
&	O
(	O
v	struct
->	O
eyeSpace	struct
)	O
)	O
;	O
v	struct
->	O
eyeSpace	struct
.	O
m	array
[	O
0	int
]	O
[	O
3	int
]	O
=	O
-	O
EyePt	struct
.	O
x	double
;	O
v	struct
->	O
eyeSpace	struct
.	O
m	array
[	O
1	int
]	O
[	O
3	int
]	O
=	O
-	O
EyePt	struct
.	O
y	double
;	O
v	struct
->	O
eyeSpace	struct
.	O
m	array
[	O
2	int
]	O
[	O
3	int
]	O
=	O
-	O
EyePt	struct
.	O
z	double
;	O
VTransform	function
(	O
&	O
CntrInt	struct
,	O
&	O
(	O
v	struct
->	O
eyeSpace	struct
)	O
,	O
&	O
C1	struct
)	O
;	O
VIdentMatrix	function
(	O
&	O
Mtx	pointer
)	O
;	O
Hypotenuse	double
=	O
sqrt	function
(	O
C1	struct
.	O
x	double
*	O
C1	struct
.	O
x	double
+	O
C1	struct
.	O
y	double
*	O
C1	struct
.	O
y	double
)	O
;	O
if	O
(	O
Hypotenuse	double
>	O
0.0	int
)	O
{	O
CosA	double
=	O
C1	struct
.	O
y	double
/	O
Hypotenuse	double
;	O
SinA	double
=	O
C1	struct
.	O
x	double
/	O
Hypotenuse	double
;	O
Mtx	pointer
.	O
m	array
[	O
0	int
]	O
[	O
0	int
]	O
=	O
Mtx	pointer
.	O
m	array
[	O
1	int
]	O
[	O
1	int
]	O
=	O
CosA	double
;	O
Mtx	pointer
.	O
m	array
[	O
1	int
]	O
[	O
0	int
]	O
=	O
SinA	double
;	O
Mtx	pointer
.	O
m	array
[	O
0	int
]	O
[	O
1	int
]	O
=	O
-	O
SinA	double
;	O
es	struct
=	O
v	struct
->	O
eyeSpace	struct
;	O
VMatrixMult	function
(	O
&	O
es	struct
,	O
&	O
Mtx	pointer
,	O
&	O
(	O
v	struct
->	O
eyeSpace	struct
)	O
)	O
;	O
}	O
VTransform	function
(	O
&	O
CntrInt	struct
,	O
&	O
(	O
v	struct
->	O
eyeSpace	struct
)	O
,	O
&	O
C2	struct
)	O
;	O
VIdentMatrix	function
(	O
&	O
Mtx	pointer
)	O
;	O
Hypotenuse	double
=	O
sqrt	function
(	O
C2	struct
.	O
y	double
*	O
C2	struct
.	O
y	double
+	O
C2	struct
.	O
z	double
*	O
C2	struct
.	O
z	double
)	O
;	O
if	O
(	O
Hypotenuse	double
>	O
0.0	int
)	O
{	O
CosA	double
=	O
C2	struct
.	O
y	double
/	O
Hypotenuse	double
;	O
SinA	double
=	O
-	O
C2	struct
.	O
z	double
/	O
Hypotenuse	double
;	O
Mtx	pointer
.	O
m	array
[	O
1	int
]	O
[	O
1	int
]	O
=	O
Mtx	pointer
.	O
m	array
[	O
2	int
]	O
[	O
2	int
]	O
=	O
CosA	double
;	O
Mtx	pointer
.	O
m	array
[	O
2	int
]	O
[	O
1	int
]	O
=	O
SinA	double
;	O
Mtx	pointer
.	O
m	array
[	O
1	int
]	O
[	O
2	int
]	O
=	O
-	O
SinA	double
;	O
es	struct
=	O
v	struct
->	O
eyeSpace	struct
;	O
VMatrixMult	function
(	O
&	O
es	struct
,	O
&	O
Mtx	pointer
,	O
&	O
(	O
v	struct
->	O
eyeSpace	struct
)	O
)	O
;	O
}	O
VTransform	function
(	O
&	O
up	struct
,	O
&	O
(	O
v	struct
->	O
eyeSpace	struct
)	O
,	O
&	O
C2	struct
)	O
;	O
VIdentMatrix	function
(	O
&	O
Mtx	pointer
)	O
;	O
h1	double
=	O
sqrt	function
(	O
C2	struct
.	O
y	double
*	O
C2	struct
.	O
y	double
+	O
C2	struct
.	O
z	double
*	O
C2	struct
.	O
z	double
)	O
;	O
Hypotenuse	double
=	O
sqrt	function
(	O
C2	struct
.	O
x	double
*	O
C2	struct
.	O
x	double
+	O
h1	double
*	O
h1	double
)	O
;	O
if	O
(	O
Hypotenuse	double
>	O
0.0	int
)	O
{	O
CosA	double
=	O
h1	double
/	O
Hypotenuse	double
;	O
SinA	double
=	O
C2	struct
.	O
x	double
/	O
Hypotenuse	double
;	O
if	O
(	O
C2	struct
.	O
z	double
<	O
0.0	int
)	O
{	O
CosA	double
=	O
-	O
CosA	double
;	O
}	O
Mtx	pointer
.	O
m	array
[	O
0	int
]	O
[	O
0	int
]	O
=	O
Mtx	pointer
.	O
m	array
[	O
2	int
]	O
[	O
2	int
]	O
=	O
CosA	double
;	O
Mtx	pointer
.	O
m	array
[	O
2	int
]	O
[	O
0	int
]	O
=	O
SinA	double
;	O
Mtx	pointer
.	O
m	array
[	O
0	int
]	O
[	O
2	int
]	O
=	O
-	O
SinA	double
;	O
es	struct
=	O
v	struct
->	O
eyeSpace	struct
;	O
VMatrixMult	function
(	O
&	O
es	struct
,	O
&	O
Mtx	pointer
,	O
&	O
(	O
v	struct
->	O
eyeSpace	struct
)	O
)	O
;	O
}	O
VIdentMatrix	function
(	O
&	O
Mtx	pointer
)	O
;	O
Mtx	pointer
.	O
m	array
[	O
1	int
]	O
[	O
1	int
]	O
=	O
Mtx	pointer
.	O
m	array
[	O
2	int
]	O
[	O
2	int
]	O
=	O
0.0	int
;	O
Mtx	pointer
.	O
m	array
[	O
2	int
]	O
[	O
1	int
]	O
=	O
Mtx	pointer
.	O
m	array
[	O
1	int
]	O
[	O
2	int
]	O
=	O
1.0	int
;	O
es	struct
=	O
v	struct
->	O
eyeSpace	struct
;	O
VMatrixMult	function
(	O
&	O
es	struct
,	O
&	O
Mtx	pointer
,	O
&	O
(	O
v	struct
->	O
eyeSpace	struct
)	O
)	O
;	O
}	O
