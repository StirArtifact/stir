void	O
setup_utmp	function
(	O
char	O
*	O
line	array
)	O
{	O
char	O
*	O
ut_id	pointer
=	O
utmp_ptsid	function
(	O
line	array
,	O
"tn"	pointer
)	O
;	O
utmp_init	function
(	O
line	array
+	O
sizeof	O
(	O
"/dev/"	pointer
)	O
-	O
1	int
,	O
".telnet"	pointer
,	O
ut_id	pointer
)	O
;	O
}	O
int	O
startslave	function
(	O
char	O
*	O
host	pointer
,	O
int	O
autologin	int
,	O
char	O
*	O
autoname	pointer
)	O
{	O
pid_t	int
pid	int
;	O
int	O
master	int
;	O
pid	int
=	O
forkpty	function
(	O
&	O
master	int
,	O
line	array
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
pid	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	int
)	O
{	O
syslog	function
(	O
LOG_ERR	int
,	O
"Out of ptys"	pointer
)	O
;	O
fatal	function
(	O
net	int
,	O
"Out of ptys"	pointer
)	O
;	O
}	O
else	O
{	O
syslog	function
(	O
LOG_ERR	int
,	O
"forkpty: %m"	pointer
)	O
;	O
fatal	function
(	O
net	int
,	O
"Forkpty"	pointer
)	O
;	O
}	O
}	O
if	O
(	O
pid	int
==	O
0	int
)	O
{	O
if	O
(	O
net	int
>	O
2	int
)	O
close	pointer
(	O
net	int
)	O
;	O
start_login	function
(	O
host	pointer
,	O
autologin	int
,	O
line	array
)	O
;	O
}	O
return	O
master	int
;	O
}	O
extern	O
char	O
*	O
*	O
environ	pointer
;	O
static	O
void	O
scrub_env	function
(	O
void	O
)	O
{	O
register	O
char	O
*	O
*	O
cpp	pointer
,	O
*	O
*	O
cpp2	pointer
;	O
for	O
(	O
cpp2	pointer
=	O
cpp	pointer
=	O
environ	pointer
;	O
*	O
cpp	pointer
;	O
cpp	pointer
++	O
)	O
{	O
if	O
(	O
strncmp	function
(	O
*	O
cpp	pointer
,	O
"LD_"	pointer
,	O
3	int
)	O
&&	O
strncmp	function
(	O
*	O
cpp	pointer
,	O
"_RLD_"	pointer
,	O
5	int
)	O
&&	O
strncmp	function
(	O
*	O
cpp	pointer
,	O
"LIBPATH="	pointer
,	O
8	int
)	O
&&	O
strncmp	function
(	O
*	O
cpp	pointer
,	O
"IFS="	pointer
,	O
4	int
)	O
)	O
*	O
cpp2	pointer
++	O
=	O
*	O
cpp	pointer
;	O
}	O
*	O
cpp2	pointer
=	O
0	int
;	O
}	O
void	O
start_login	function
(	O
char	O
*	O
host	pointer
,	O
int	O
autologin	int
,	O
char	O
*	O
name	pointer
)	O
{	O
char	O
*	O
cmd	pointer
;	O
int	O
argc	pointer
;	O
char	O
*	O
*	O
argv	pointer
;	O
scrub_env	function
(	O
)	O
;	O
if	O
(	O
lmodetype	int
==	O
REAL_LINEMODE	int
)	O
setenv	function
(	O
"LINEMODE"	pointer
,	O
"real"	pointer
,	O
1	int
)	O
;	O
else	O
if	O
(	O
lmodetype	int
==	O
KLUDGE_LINEMODE	int
||	O
lmodetype	int
==	O
KLUDGE_OK	int
)	O
setenv	function
(	O
"LINEMODE"	pointer
,	O
"kludge"	pointer
,	O
1	int
)	O
;	O
cmd	pointer
=	O
expand_line	function
(	O
login_invocation	pointer
)	O
;	O
if	O
(	O
!	O
cmd	pointer
)	O
fatal	function
(	O
net	int
,	O
"can't expand login command line"	pointer
)	O
;	O
argcv_get	function
(	O
cmd	pointer
,	O
""	pointer
,	O
&	O
argc	pointer
,	O
&	O
argv	pointer
)	O
;	O
execv	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
argv	pointer
)	O
;	O
syslog	function
(	O
LOG_ERR	int
,	O
"%s: %m\n"	pointer
,	O
cmd	pointer
)	O
;	O
fatalperror	function
(	O
net	int
,	O
cmd	pointer
)	O
;	O
}	O
void	O
cleanup	pointer
(	O
int	O
sig	int
)	O
{	O
char	O
*	O
p	pointer
;	O
if	O
(	O
sig	int
)	O
{	O
int	O
status	int
;	O
pid_t	int
pid	int
=	O
waitpid	function
(	O
(	O
pid_t	int
)	O
-	O
1	int
,	O
&	O
status	int
,	O
WNOHANG	int
)	O
;	O
syslog	function
(	O
LOG_INFO	int
,	O
"child process %ld exited: %d"	pointer
,	O
(	O
long	O
)	O
pid	int
,	O
WEXITSTATUS	O
(	O
status	int
)	O
)	O
;	O
}	O
p	pointer
=	O
line	array
+	O
sizeof	O
(	O
PATH_DEV	O
)	O
-	O
1	int
;	O
utmp_logout	function
(	O
p	pointer
)	O
;	O
chmod	function
(	O
line	array
,	O
0644	int
)	O
;	O
chown	function
(	O
line	array
,	O
0	int
,	O
0	int
)	O
;	O
shutdown	function
(	O
net	int
,	O
2	int
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
