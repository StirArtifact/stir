static	O
void	O
displayArgs	function
(	O
poptContext	pointer
con	pointer
,	O
enum	O
poptCallbackReason	enum
foo	enum
,	O
struct	O
poptOption	struct
*	O
key	pointer
,	O
const	O
char	O
*	O
arg	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
(	O
void	O
)	O
foo	enum
;	O
(	O
void	O
)	O
arg	pointer
;	O
(	O
void	O
)	O
data	pointer
;	O
if	O
(	O
key	pointer
->	O
shortName	char
==	O
'?'	O
)	O
poptPrintHelp	function
(	O
con	pointer
,	O
stdout	pointer
,	O
0	int
)	O
;	O
else	O
poptPrintUsage	function
(	O
con	pointer
,	O
stdout	pointer
,	O
0	int
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
struct	O
poptOption	struct
const	O
poptHelpOptions	array
[	O
]	O
=	O
{	O
{	O
NULL	O
,	O
'\0'	O
,	O
POPT_ARG_CALLBACK	int
,	O
(	O
void	O
*	O
)	O
&	O
displayArgs	function
,	O
'\0'	O
,	O
NULL	O
,	O
NULL	O
}	O
,	O
{	O
"help"	pointer
,	O
'?'	O
,	O
0	int
,	O
NULL	O
,	O
'?'	O
,	O
N_	O
(	O
"Show this help message"	pointer
)	O
,	O
NULL	O
}	O
,	O
{	O
"usage"	pointer
,	O
'\0'	O
,	O
0	int
,	O
NULL	O
,	O
'u'	O
,	O
N_	O
(	O
"Display brief usage message"	pointer
)	O
,	O
NULL	O
}	O
,	O
{	O
NULL	O
,	O
'\0'	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
NULL	O
}	O
}	O
;	O
static	O
const	O
char	O
*	O
getTableTranslationDomain	function
(	O
const	O
struct	O
poptOption	struct
*	O
table	pointer
)	O
{	O
const	O
struct	O
poptOption	struct
*	O
opt	pointer
;	O
for	O
(	O
opt	pointer
=	O
table	pointer
;	O
opt	pointer
->	O
longName	pointer
||	O
opt	pointer
->	O
shortName	char
||	O
opt	pointer
->	O
arg	pointer
;	O
opt	pointer
++	O
)	O
{	O
if	O
(	O
opt	pointer
->	O
argInfo	int
==	O
POPT_ARG_INTL_DOMAIN	int
)	O
return	O
opt	pointer
->	O
arg	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
const	O
char	O
*	O
getArgDescrip	function
(	O
const	O
struct	O
poptOption	struct
*	O
opt	pointer
,	O
const	O
char	O
*	O
translation_domain	pointer
)	O
{	O
(	O
void	O
)	O
translation_domain	pointer
;	O
if	O
(	O
!	O
(	O
opt	pointer
->	O
argInfo	int
&	O
POPT_ARG_MASK	int
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
opt	pointer
==	O
(	O
poptHelpOptions	array
+	O
1	int
)	O
||	O
opt	pointer
==	O
(	O
poptHelpOptions	array
+	O
2	int
)	O
)	O
if	O
(	O
opt	pointer
->	O
argDescrip	pointer
)	O
return	O
POPT_	O
(	O
opt	pointer
->	O
argDescrip	pointer
)	O
;	O
if	O
(	O
opt	pointer
->	O
argDescrip	pointer
)	O
return	O
D_	O
(	O
translation_domain	pointer
,	O
opt	pointer
->	O
argDescrip	pointer
)	O
;	O
return	O
_	O
(	O
"ARG"	pointer
)	O
;	O
}	O
static	O
void	O
singleOptionHelp	function
(	O
FILE	struct
*	O
f	pointer
,	O
int	O
maxLeftCol	int
,	O
const	O
struct	O
poptOption	struct
*	O
opt	pointer
,	O
const	O
char	O
*	O
translation_domain	pointer
)	O
{	O
int	O
indentLength	int
=	O
maxLeftCol	int
+	O
5	int
;	O
int	O
lineLength	int
=	O
79	int
-	O
indentLength	int
;	O
const	O
char	O
*	O
help	pointer
=	O
D_	O
(	O
translation_domain	pointer
,	O
opt	pointer
->	O
descrip	pointer
)	O
;	O
int	O
helpLength	int
;	O
const	O
char	O
*	O
ch	int
;	O
char	O
*	O
left	pointer
;	O
const	O
char	O
*	O
argDescrip	pointer
=	O
getArgDescrip	function
(	O
opt	pointer
,	O
translation_domain	pointer
)	O
;	O
left	pointer
=	O
malloc	function
(	O
maxLeftCol	int
+	O
1	int
)	O
;	O
*	O
left	pointer
=	O
'\0'	O
;	O
if	O
(	O
opt	pointer
->	O
longName	pointer
&&	O
opt	pointer
->	O
shortName	char
)	O
sprintf	function
(	O
left	pointer
,	O
"-%c, --%s"	pointer
,	O
opt	pointer
->	O
shortName	char
,	O
opt	pointer
->	O
longName	pointer
)	O
;	O
else	O
if	O
(	O
opt	pointer
->	O
shortName	char
)	O
sprintf	function
(	O
left	pointer
,	O
"-%c"	pointer
,	O
opt	pointer
->	O
shortName	char
)	O
;	O
else	O
if	O
(	O
opt	pointer
->	O
longName	pointer
)	O
sprintf	function
(	O
left	pointer
,	O
"--%s"	pointer
,	O
opt	pointer
->	O
longName	pointer
)	O
;	O
if	O
(	O
!	O
*	O
left	pointer
)	O
return	O
;	O
if	O
(	O
argDescrip	pointer
)	O
{	O
strcat	function
(	O
left	pointer
,	O
"="	pointer
)	O
;	O
strcat	function
(	O
left	pointer
,	O
argDescrip	pointer
)	O
;	O
}	O
if	O
(	O
help	pointer
)	O
fprintf	function
(	O
f	pointer
,	O
"  %-*s   "	pointer
,	O
maxLeftCol	int
,	O
left	pointer
)	O
;	O
else	O
{	O
fprintf	function
(	O
f	pointer
,	O
"  %s\n"	pointer
,	O
left	pointer
)	O
;	O
goto	O
out	pointer
;	O
}	O
helpLength	int
=	O
strlen	function
(	O
help	pointer
)	O
;	O
while	O
(	O
helpLength	int
>	O
lineLength	int
)	O
{	O
ch	int
=	O
help	pointer
+	O
lineLength	int
-	O
1	int
;	O
while	O
(	O
ch	int
>	O
help	pointer
&&	O
!	O
isspace	function
(	O
(	O
unsigned	O
char	O
)	O
*	O
ch	int
)	O
)	O
ch	int
--	O
;	O
if	O
(	O
ch	int
==	O
help	pointer
)	O
break	O
;	O
while	O
(	O
ch	int
>	O
(	O
help	pointer
+	O
1	int
)	O
&&	O
isspace	function
(	O
(	O
unsigned	O
char	O
)	O
*	O
ch	int
)	O
)	O
ch	int
--	O
;	O
ch	int
++	O
;	O
fprintf	function
(	O
f	pointer
,	O
"%.*s\n%*s"	pointer
,	O
(	O
int	O
)	O
(	O
ch	int
-	O
help	pointer
)	O
,	O
help	pointer
,	O
indentLength	int
,	O
" "	pointer
)	O
;	O
help	pointer
=	O
ch	int
;	O
while	O
(	O
isspace	function
(	O
(	O
unsigned	O
char	O
)	O
*	O
help	pointer
)	O
&&	O
*	O
help	pointer
)	O
help	pointer
++	O
;	O
helpLength	int
=	O
strlen	function
(	O
help	pointer
)	O
;	O
}	O
if	O
(	O
helpLength	int
)	O
fprintf	function
(	O
f	pointer
,	O
"%s\n"	pointer
,	O
help	pointer
)	O
;	O
out	pointer
:	O
free	function
(	O
left	pointer
)	O
;	O
}	O
static	O
int	O
maxArgWidth	function
(	O
const	O
struct	O
poptOption	struct
*	O
opt	pointer
,	O
const	O
char	O
*	O
translation_domain	pointer
)	O
{	O
int	O
max	long
=	O
0	int
;	O
int	O
this	int
;	O
const	O
char	O
*	O
s	pointer
;	O
while	O
(	O
opt	pointer
->	O
longName	pointer
||	O
opt	pointer
->	O
shortName	char
||	O
opt	pointer
->	O
arg	pointer
)	O
{	O
if	O
(	O
(	O
opt	pointer
->	O
argInfo	int
&	O
POPT_ARG_MASK	int
)	O
==	O
POPT_ARG_INCLUDE_TABLE	int
)	O
{	O
this	int
=	O
maxArgWidth	function
(	O
opt	pointer
->	O
arg	pointer
,	O
translation_domain	pointer
)	O
;	O
if	O
(	O
this	int
>	O
max	long
)	O
max	long
=	O
this	int
;	O
}	O
else	O
if	O
(	O
!	O
(	O
opt	pointer
->	O
argInfo	int
&	O
POPT_ARGFLAG_DOC_HIDDEN	int
)	O
)	O
{	O
this	int
=	O
opt	pointer
->	O
shortName	char
?	O
2	int
:	O
0	int
;	O
if	O
(	O
opt	pointer
->	O
longName	pointer
)	O
{	O
if	O
(	O
this	int
)	O
this	int
+=	O
2	int
;	O
this	int
+=	O
strlen	function
(	O
opt	pointer
->	O
longName	pointer
)	O
+	O
2	int
;	O
}	O
s	pointer
=	O
getArgDescrip	function
(	O
opt	pointer
,	O
translation_domain	pointer
)	O
;	O
if	O
(	O
s	pointer
)	O
this	int
+=	O
strlen	function
(	O
s	pointer
)	O
+	O
1	int
;	O
if	O
(	O
this	int
>	O
max	long
)	O
max	long
=	O
this	int
;	O
}	O
opt	pointer
++	O
;	O
}	O
return	O
max	long
;	O
}	O
static	O
void	O
singleTableHelp	function
(	O
FILE	struct
*	O
f	pointer
,	O
const	O
struct	O
poptOption	struct
*	O
table	pointer
,	O
int	O
left	pointer
,	O
const	O
char	O
*	O
translation_domain	pointer
)	O
{	O
const	O
struct	O
poptOption	struct
*	O
opt	pointer
;	O
const	O
char	O
*	O
sub_transdom	pointer
;	O
opt	pointer
=	O
table	pointer
;	O
while	O
(	O
opt	pointer
->	O
longName	pointer
||	O
opt	pointer
->	O
shortName	char
||	O
opt	pointer
->	O
arg	pointer
)	O
{	O
if	O
(	O
(	O
opt	pointer
->	O
longName	pointer
||	O
opt	pointer
->	O
shortName	char
)	O
&&	O
!	O
(	O
opt	pointer
->	O
argInfo	int
&	O
POPT_ARGFLAG_DOC_HIDDEN	int
)	O
)	O
singleOptionHelp	function
(	O
f	pointer
,	O
left	pointer
,	O
opt	pointer
,	O
translation_domain	pointer
)	O
;	O
opt	pointer
++	O
;	O
}	O
opt	pointer
=	O
table	pointer
;	O
while	O
(	O
opt	pointer
->	O
longName	pointer
||	O
opt	pointer
->	O
shortName	char
||	O
opt	pointer
->	O
arg	pointer
)	O
{	O
if	O
(	O
(	O
opt	pointer
->	O
argInfo	int
&	O
POPT_ARG_MASK	int
)	O
==	O
POPT_ARG_INCLUDE_TABLE	int
)	O
{	O
sub_transdom	pointer
=	O
getTableTranslationDomain	function
(	O
opt	pointer
->	O
arg	pointer
)	O
;	O
if	O
(	O
!	O
sub_transdom	pointer
)	O
sub_transdom	pointer
=	O
translation_domain	pointer
;	O
if	O
(	O
opt	pointer
->	O
descrip	pointer
)	O
fprintf	function
(	O
f	pointer
,	O
"\n%s\n"	pointer
,	O
D_	O
(	O
sub_transdom	pointer
,	O
opt	pointer
->	O
descrip	pointer
)	O
)	O
;	O
singleTableHelp	function
(	O
f	pointer
,	O
opt	pointer
->	O
arg	pointer
,	O
left	pointer
,	O
sub_transdom	pointer
)	O
;	O
}	O
opt	pointer
++	O
;	O
}	O
}	O
static	O
int	O
showHelpIntro	function
(	O
poptContext	pointer
con	pointer
,	O
FILE	struct
*	O
f	pointer
)	O
{	O
int	O
len	int
=	O
6	int
;	O
const	O
char	O
*	O
fn	pointer
;	O
fprintf	function
(	O
f	pointer
,	O
_	O
(	O
"Usage:"	pointer
)	O
)	O
;	O
if	O
(	O
!	O
(	O
con	pointer
->	O
flags	enum
&	O
POPT_CONTEXT_KEEP_FIRST	O
)	O
)	O
{	O
fn	pointer
=	O
con	pointer
->	O
optionStack	array
->	O
argv	pointer
[	O
0	int
]	O
;	O
if	O
(	O
strrchr	function
(	O
fn	pointer
,	O
'/'	O
)	O
)	O
fn	pointer
=	O
strrchr	function
(	O
fn	pointer
,	O
'/'	O
)	O
+	O
1	int
;	O
fprintf	function
(	O
f	pointer
,	O
" %s"	pointer
,	O
fn	pointer
)	O
;	O
len	int
+=	O
strlen	function
(	O
fn	pointer
)	O
+	O
1	int
;	O
}	O
return	O
len	int
;	O
}	O
int	O
poptPrintHelp	function
(	O
poptContext	pointer
con	pointer
,	O
FILE	struct
*	O
f	pointer
,	O
int	O
flags	enum
)	O
{	O
int	O
leftColWidth	int
;	O
(	O
void	O
)	O
flags	enum
;	O
showHelpIntro	function
(	O
con	pointer
,	O
f	pointer
)	O
;	O
if	O
(	O
con	pointer
->	O
otherHelp	pointer
)	O
fprintf	function
(	O
f	pointer
,	O
" %s\n"	pointer
,	O
con	pointer
->	O
otherHelp	pointer
)	O
;	O
else	O
fprintf	function
(	O
f	pointer
,	O
" %s\n"	pointer
,	O
POPT_	O
(	O
"[OPTION...]"	pointer
)	O
)	O
;	O
leftColWidth	int
=	O
maxArgWidth	function
(	O
con	pointer
->	O
options	pointer
,	O
NULL	O
)	O
;	O
singleTableHelp	function
(	O
f	pointer
,	O
con	pointer
->	O
options	pointer
,	O
leftColWidth	int
,	O
NULL	O
)	O
;	O
return	O
leftColWidth	int
;	O
}	O
static	O
int	O
singleOptionUsage	function
(	O
FILE	struct
*	O
f	pointer
,	O
int	O
cursor	int
,	O
const	O
struct	O
poptOption	struct
*	O
opt	pointer
,	O
const	O
char	O
*	O
translation_domain	pointer
)	O
{	O
int	O
len	int
=	O
3	int
;	O
char	O
shortStr	array
[	O
2	int
]	O
;	O
const	O
char	O
*	O
item	pointer
=	O
shortStr	array
;	O
const	O
char	O
*	O
argDescrip	pointer
=	O
getArgDescrip	function
(	O
opt	pointer
,	O
translation_domain	pointer
)	O
;	O
if	O
(	O
opt	pointer
->	O
shortName	char
)	O
{	O
if	O
(	O
!	O
(	O
opt	pointer
->	O
argInfo	int
&	O
POPT_ARG_MASK	int
)	O
)	O
return	O
cursor	int
;	O
len	int
++	O
;	O
*	O
shortStr	array
=	O
opt	pointer
->	O
shortName	char
;	O
shortStr	array
[	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
else	O
if	O
(	O
opt	pointer
->	O
longName	pointer
)	O
{	O
len	int
+=	O
1	int
+	O
strlen	function
(	O
opt	pointer
->	O
longName	pointer
)	O
;	O
item	pointer
=	O
opt	pointer
->	O
longName	pointer
;	O
}	O
if	O
(	O
len	int
==	O
3	int
)	O
return	O
cursor	int
;	O
if	O
(	O
argDescrip	pointer
)	O
len	int
+=	O
strlen	function
(	O
argDescrip	pointer
)	O
+	O
1	int
;	O
if	O
(	O
(	O
cursor	int
+	O
len	int
)	O
>	O
79	int
)	O
{	O
fprintf	function
(	O
f	pointer
,	O
"\n       "	pointer
)	O
;	O
cursor	int
=	O
7	int
;	O
}	O
fprintf	function
(	O
f	pointer
,	O
" [-%s%s%s%s]"	pointer
,	O
opt	pointer
->	O
shortName	char
?	O
""	pointer
:	O
"-"	pointer
,	O
item	pointer
,	O
argDescrip	pointer
?	O
(	O
opt	pointer
->	O
shortName	char
?	O
" "	pointer
:	O
"="	pointer
)	O
:	O
""	pointer
,	O
argDescrip	pointer
?	O
argDescrip	pointer
:	O
""	pointer
)	O
;	O
return	O
cursor	int
+	O
len	int
+	O
1	int
;	O
}	O
static	O
int	O
singleTableUsage	function
(	O
FILE	struct
*	O
f	pointer
,	O
int	O
cursor	int
,	O
const	O
struct	O
poptOption	struct
*	O
table	pointer
,	O
const	O
char	O
*	O
translation_domain	pointer
)	O
{	O
const	O
struct	O
poptOption	struct
*	O
opt	pointer
;	O
opt	pointer
=	O
table	pointer
;	O
while	O
(	O
opt	pointer
->	O
longName	pointer
||	O
opt	pointer
->	O
shortName	char
||	O
opt	pointer
->	O
arg	pointer
)	O
{	O
if	O
(	O
(	O
opt	pointer
->	O
argInfo	int
&	O
POPT_ARG_MASK	int
)	O
==	O
POPT_ARG_INTL_DOMAIN	int
)	O
translation_domain	pointer
=	O
(	O
const	O
char	O
*	O
)	O
opt	pointer
->	O
arg	pointer
;	O
else	O
if	O
(	O
(	O
opt	pointer
->	O
argInfo	int
&	O
POPT_ARG_MASK	int
)	O
==	O
POPT_ARG_INCLUDE_TABLE	int
)	O
cursor	int
=	O
singleTableUsage	function
(	O
f	pointer
,	O
cursor	int
,	O
opt	pointer
->	O
arg	pointer
,	O
translation_domain	pointer
)	O
;	O
else	O
if	O
(	O
(	O
opt	pointer
->	O
longName	pointer
||	O
opt	pointer
->	O
shortName	char
)	O
&&	O
!	O
(	O
opt	pointer
->	O
argInfo	int
&	O
POPT_ARGFLAG_DOC_HIDDEN	int
)	O
)	O
cursor	int
=	O
singleOptionUsage	function
(	O
f	pointer
,	O
cursor	int
,	O
opt	pointer
,	O
translation_domain	pointer
)	O
;	O
opt	pointer
++	O
;	O
}	O
return	O
cursor	int
;	O
}	O
static	O
int	O
showShortOptions	function
(	O
const	O
struct	O
poptOption	struct
*	O
opt	pointer
,	O
FILE	struct
*	O
f	pointer
,	O
char	O
*	O
str	pointer
)	O
{	O
char	O
s	pointer
[	O
300	int
]	O
;	O
if	O
(	O
!	O
str	pointer
)	O
{	O
str	pointer
=	O
s	pointer
;	O
memset	function
(	O
str	pointer
,	O
0	int
,	O
sizeof	O
(	O
s	pointer
)	O
)	O
;	O
}	O
while	O
(	O
opt	pointer
->	O
longName	pointer
||	O
opt	pointer
->	O
shortName	char
||	O
opt	pointer
->	O
arg	pointer
)	O
{	O
if	O
(	O
opt	pointer
->	O
shortName	char
&&	O
!	O
(	O
opt	pointer
->	O
argInfo	int
&	O
POPT_ARG_MASK	int
)	O
)	O
str	pointer
[	O
strlen	function
(	O
str	pointer
)	O
]	O
=	O
opt	pointer
->	O
shortName	char
;	O
else	O
if	O
(	O
(	O
opt	pointer
->	O
argInfo	int
&	O
POPT_ARG_MASK	int
)	O
==	O
POPT_ARG_INCLUDE_TABLE	int
)	O
showShortOptions	function
(	O
opt	pointer
->	O
arg	pointer
,	O
f	pointer
,	O
str	pointer
)	O
;	O
opt	pointer
++	O
;	O
}	O
if	O
(	O
s	pointer
!=	O
str	pointer
||	O
!	O
*	O
s	pointer
)	O
return	O
0	int
;	O
fprintf	function
(	O
f	pointer
,	O
" [-%s]"	pointer
,	O
s	pointer
)	O
;	O
return	O
strlen	function
(	O
s	pointer
)	O
+	O
4	int
;	O
}	O
void	O
poptPrintUsage	function
(	O
poptContext	pointer
con	pointer
,	O
FILE	struct
*	O
f	pointer
,	O
int	O
flags	enum
)	O
{	O
int	O
cursor	int
;	O
(	O
void	O
)	O
flags	enum
;	O
cursor	int
=	O
showHelpIntro	function
(	O
con	pointer
,	O
f	pointer
)	O
;	O
cursor	int
+=	O
showShortOptions	function
(	O
con	pointer
->	O
options	pointer
,	O
f	pointer
,	O
NULL	O
)	O
;	O
singleTableUsage	function
(	O
f	pointer
,	O
cursor	int
,	O
con	pointer
->	O
options	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
con	pointer
->	O
otherHelp	pointer
)	O
{	O
cursor	int
+=	O
strlen	function
(	O
con	pointer
->	O
otherHelp	pointer
)	O
+	O
1	int
;	O
if	O
(	O
cursor	int
>	O
79	int
)	O
fprintf	function
(	O
f	pointer
,	O
"\n       "	pointer
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
" %s"	pointer
,	O
con	pointer
->	O
otherHelp	pointer
)	O
;	O
}	O
fprintf	function
(	O
f	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
void	O
poptSetOtherOptionHelp	function
(	O
poptContext	pointer
con	pointer
,	O
const	O
char	O
*	O
text	pointer
)	O
{	O
if	O
(	O
con	pointer
->	O
otherHelp	pointer
)	O
free	function
(	O
con	pointer
->	O
otherHelp	pointer
)	O
;	O
con	pointer
->	O
otherHelp	pointer
=	O
strdup	function
(	O
text	pointer
)	O
;	O
}	O
