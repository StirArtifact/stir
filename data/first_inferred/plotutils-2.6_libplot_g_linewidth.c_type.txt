int	O
_API_flinewidth	O
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
double	O
new_line_width	double
)	O
{	O
double	O
device_line_width	double
,	O
min_sing_val	pointer
,	O
max_sing_val	pointer
;	O
int	O
quantized_device_line_width	int
;	O
if	O
(	O
!	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
)	O
{	O
_plotter	pointer
->	O
error	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"flinewidth: invalid operation"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
_API_endpath	O
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
if	O
(	O
new_line_width	double
<	O
0.0	int
)	O
{	O
new_line_width	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
default_line_width	double
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_width_is_default	enum
=	O
true	int
;	O
}	O
else	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_width_is_default	enum
=	O
false	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_width	double
=	O
new_line_width	double
;	O
_matrix_sing_vals	function
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
m	array
,	O
&	O
min_sing_val	pointer
,	O
&	O
max_sing_val	pointer
)	O
;	O
device_line_width	double
=	O
min_sing_val	pointer
*	O
new_line_width	double
;	O
quantized_device_line_width	int
=	O
IROUND	O
(	O
device_line_width	double
)	O
;	O
if	O
(	O
quantized_device_line_width	int
==	O
0	int
&&	O
device_line_width	double
>	O
0.0	int
)	O
quantized_device_line_width	int
=	O
1	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
device_line_width	double
=	O
device_line_width	double
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
quantized_device_line_width	int
=	O
quantized_device_line_width	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
linewidth_invoked	enum
=	O
true	int
;	O
return	O
0	int
;	O
}	O
