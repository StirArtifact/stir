void	O
flipgeneric	function
(	O
struct	O
image	struct
*	O
img	pointer
)	O
{	O
pixel_t	char
*	O
*	O
line	pointer
;	O
assert	O
(	O
img	pointer
->	O
nimages	int
==	O
2	int
)	O
;	O
img	pointer
->	O
currimage	int
^=	O
1	int
;	O
line	pointer
=	O
img	pointer
->	O
currlines	pointer
;	O
img	pointer
->	O
currlines	pointer
=	O
img	pointer
->	O
oldlines	pointer
;	O
img	pointer
->	O
oldlines	pointer
=	O
line	pointer
;	O
}	O
int	O
bytesperpixel	int
(	O
int	O
type	int
)	O
{	O
switch	O
(	O
type	int
)	O
{	O
case	O
MBITMAP	int
:	O
case	O
LBITMAP	int
:	O
case	O
LIBITMAP	int
:	O
case	O
MIBITMAP	int
:	O
return	O
0	int
;	O
case	O
SMALLITER	O
:	O
case	O
FIXEDCOLOR	int
:	O
case	O
GRAYSCALE	int
:	O
case	O
C256	int
:	O
return	O
1	int
;	O
case	O
LARGEITER	int
:	O
case	O
REALCOLOR	int
:	O
case	O
HICOLOR	int
:	O
return	O
2	int
;	O
case	O
TRUECOLOR	int
:	O
case	O
TRUECOLORMI	int
:	O
return	O
4	int
;	O
default	O
:	O
assert	O
(	O
0	int
)	O
;	O
case	O
TRUECOLOR24	int
:	O
return	O
3	int
;	O
}	O
}	O
struct	O
image	struct
*	O
create_image_lines	function
(	O
int	O
width	int
,	O
int	O
height	int
,	O
int	O
nimages	int
,	O
pixel_t	char
*	O
*	O
lines1	pointer
,	O
pixel_t	char
*	O
*	O
lines2	pointer
,	O
struct	O
palette	struct
*	O
palette	struct
,	O
void	O
(	O
*	O
flip	pointer
)	O
(	O
struct	O
image	struct
*	O
img	pointer
)	O
,	O
int	O
flags	int
,	O
float	O
pixelwidth	float
,	O
float	O
pixelheight	float
)	O
{	O
int	O
i	pointer
;	O
static	O
int	O
version	int
=	O
1	int
;	O
struct	O
image	struct
*	O
img	pointer
=	O
calloc	function
(	O
sizeof	O
(	O
*	O
img	pointer
)	O
,	O
1	int
)	O
;	O
if	O
(	O
img	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
flip	pointer
==	O
NULL	O
)	O
flip	pointer
=	O
flipgeneric	function
;	O
img	pointer
->	O
width	int
=	O
width	int
;	O
img	pointer
->	O
height	int
=	O
height	int
;	O
img	pointer
->	O
nimages	int
=	O
nimages	int
;	O
img	pointer
->	O
bytesperpixel	int
=	O
bytesperpixel	int
(	O
palette	struct
->	O
type	int
)	O
;	O
img	pointer
->	O
palette	struct
=	O
palette	struct
;	O
img	pointer
->	O
currimage	int
=	O
0	int
;	O
img	pointer
->	O
flip	pointer
=	O
flip	pointer
;	O
img	pointer
->	O
flags	int
=	O
flags	int
;	O
img	pointer
->	O
version	int
=	O
version	int
;	O
version	int
+=	O
65535	int
;	O
img	pointer
->	O
currlines	pointer
=	O
lines1	pointer
;	O
img	pointer
->	O
oldlines	pointer
=	O
lines2	pointer
;	O
img	pointer
->	O
pixelwidth	float
=	O
pixelwidth	float
;	O
img	pointer
->	O
pixelheight	float
=	O
pixelheight	float
;	O
if	O
(	O
lines1	pointer
!=	O
NULL	O
&&	O
(	O
nimages	int
!=	O
2	int
||	O
lines2	pointer
!=	O
NULL	O
)	O
)	O
{	O
img	pointer
->	O
scanline	int
=	O
lines1	pointer
[	O
1	int
]	O
-	O
lines1	pointer
[	O
0	int
]	O
;	O
if	O
(	O
img	pointer
->	O
scanline	int
<	O
0	int
)	O
img	pointer
->	O
scanline	int
=	O
-	O
1	int
;	O
else	O
{	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
height	int
;	O
i	pointer
++	O
)	O
{	O
if	O
(	O
lines1	pointer
[	O
0	int
]	O
-	O
lines1	pointer
[	O
i	pointer
]	O
!=	O
img	pointer
->	O
scanline	int
*	O
i	pointer
)	O
{	O
img	pointer
->	O
scanline	int
=	O
-	O
1	int
;	O
break	O
;	O
}	O
if	O
(	O
nimages	int
==	O
2	int
&&	O
lines2	pointer
[	O
0	int
]	O
-	O
lines2	pointer
[	O
i	pointer
]	O
!=	O
img	pointer
->	O
scanline	int
*	O
i	pointer
)	O
{	O
img	pointer
->	O
scanline	int
=	O
-	O
1	int
;	O
break	O
;	O
}	O
}	O
}	O
}	O
else	O
img	pointer
->	O
scanline	int
=	O
-	O
1	int
;	O
return	O
(	O
img	pointer
)	O
;	O
}	O
struct	O
image	struct
*	O
create_image_cont	function
(	O
int	O
width	int
,	O
int	O
height	int
,	O
int	O
scanlinesize	int
,	O
int	O
nimages	int
,	O
pixel_t	char
*	O
buf1	pointer
,	O
pixel_t	char
*	O
buf2	pointer
,	O
struct	O
palette	struct
*	O
palette	struct
,	O
void	O
(	O
*	O
flip	pointer
)	O
(	O
struct	O
image	struct
*	O
img	pointer
)	O
,	O
int	O
flags	int
,	O
float	O
pixelwidth	float
,	O
float	O
pixelheight	float
)	O
{	O
struct	O
image	struct
*	O
img	pointer
=	O
create_image_lines	function
(	O
width	int
,	O
height	int
,	O
nimages	int
,	O
NULL	O
,	O
NULL	O
,	O
palette	struct
,	O
flip	pointer
,	O
flags	int
,	O
pixelwidth	float
,	O
pixelheight	float
)	O
;	O
int	O
i	pointer
;	O
if	O
(	O
img	pointer
==	O
NULL	O
)	O
{	O
return	O
NULL	O
;	O
}	O
if	O
(	O
(	O
img	pointer
->	O
currlines	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
img	pointer
->	O
currlines	pointer
)	O
*	O
height	int
)	O
)	O
==	O
NULL	O
)	O
{	O
free	function
(	O
img	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
nimages	int
==	O
2	int
)	O
{	O
if	O
(	O
(	O
img	pointer
->	O
oldlines	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
img	pointer
->	O
oldlines	pointer
)	O
*	O
height	int
)	O
)	O
==	O
NULL	O
)	O
{	O
free	function
(	O
img	pointer
->	O
currlines	pointer
)	O
;	O
free	function
(	O
img	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
img	pointer
->	O
height	int
;	O
i	pointer
++	O
)	O
{	O
img	pointer
->	O
currlines	pointer
[	O
i	pointer
]	O
=	O
buf1	pointer
;	O
buf1	pointer
+=	O
scanlinesize	int
;	O
}	O
if	O
(	O
nimages	int
==	O
2	int
)	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
img	pointer
->	O
height	int
;	O
i	pointer
++	O
)	O
{	O
img	pointer
->	O
oldlines	pointer
[	O
i	pointer
]	O
=	O
buf2	pointer
;	O
buf2	pointer
+=	O
scanlinesize	int
;	O
}	O
img	pointer
->	O
flags	int
|=	O
FREELINES	int
;	O
img	pointer
->	O
scanline	int
=	O
scanlinesize	int
;	O
return	O
(	O
img	pointer
)	O
;	O
}	O
struct	O
image	struct
*	O
create_image_mem	function
(	O
int	O
width	int
,	O
int	O
height	int
,	O
int	O
nimages	int
,	O
struct	O
palette	struct
*	O
palette	struct
,	O
float	O
pixelwidth	float
,	O
float	O
pixelheight	float
)	O
{	O
unsigned	O
char	O
*	O
data	pointer
=	O
calloc	function
(	O
(	O
(	O
width	int
+	O
3	int
)	O
&	O
~	O
3	int
)	O
*	O
height	int
,	O
bytesperpixel	int
(	O
palette	struct
->	O
type	int
)	O
)	O
;	O
unsigned	O
char	O
*	O
data1	pointer
=	O
(	O
nimages	int
==	O
2	int
?	O
calloc	function
(	O
(	O
(	O
width	int
+	O
3	int
)	O
&	O
~	O
3	int
)	O
*	O
height	int
,	O
bytesperpixel	int
(	O
palette	struct
->	O
type	int
)	O
)	O
:	O
NULL	O
)	O
;	O
struct	O
image	struct
*	O
img	pointer
;	O
if	O
(	O
data	pointer
==	O
NULL	O
)	O
return	O
(	O
NULL	O
)	O
;	O
if	O
(	O
nimages	int
==	O
2	int
&&	O
data1	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
data	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
img	pointer
=	O
create_image_cont	function
(	O
width	int
,	O
height	int
,	O
(	O
(	O
width	int
+	O
3	int
)	O
&	O
~	O
3	int
)	O
*	O
bytesperpixel	int
(	O
palette	struct
->	O
type	int
)	O
,	O
nimages	int
,	O
data	pointer
,	O
data1	pointer
,	O
palette	struct
,	O
NULL	O
,	O
0	int
,	O
pixelwidth	float
,	O
pixelheight	float
)	O
;	O
if	O
(	O
img	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
data	pointer
)	O
;	O
if	O
(	O
data1	pointer
!=	O
NULL	O
)	O
free	function
(	O
data1	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
img	pointer
->	O
flags	int
|=	O
FREEDATA	int
;	O
return	O
(	O
img	pointer
)	O
;	O
}	O
struct	O
image	struct
*	O
create_subimage	function
(	O
struct	O
image	struct
*	O
simg	pointer
,	O
int	O
width	int
,	O
int	O
height	int
,	O
int	O
nimages	int
,	O
struct	O
palette	struct
*	O
palette	struct
,	O
float	O
pixelwidth	float
,	O
float	O
pixelheight	float
)	O
{	O
int	O
size	int
=	O
height	int
*	O
bytesperpixel	int
(	O
palette	struct
->	O
type	int
)	O
;	O
int	O
i	pointer
;	O
int	O
shift1	int
=	O
0	int
,	O
shift2	int
=	O
0	int
;	O
struct	O
image	struct
*	O
img	pointer
;	O
if	O
(	O
size	int
>	O
simg	pointer
->	O
height	int
*	O
simg	pointer
->	O
bytesperpixel	int
||	O
height	int
>	O
simg	pointer
->	O
height	int
||	O
(	O
nimages	int
==	O
2	int
&&	O
simg	pointer
->	O
nimages	int
==	O
1	int
)	O
)	O
return	O
(	O
create_image_mem	function
(	O
width	int
,	O
height	int
,	O
nimages	int
,	O
palette	struct
,	O
pixelwidth	float
,	O
pixelheight	float
)	O
)	O
;	O
nimages	int
=	O
simg	pointer
->	O
nimages	int
;	O
img	pointer
=	O
create_image_lines	function
(	O
width	int
,	O
height	int
,	O
nimages	int
,	O
NULL	O
,	O
NULL	O
,	O
palette	struct
,	O
NULL	O
,	O
0	int
,	O
pixelwidth	float
,	O
pixelheight	float
)	O
;	O
if	O
(	O
img	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
(	O
img	pointer
->	O
currlines	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
img	pointer
->	O
currlines	pointer
)	O
*	O
height	int
)	O
)	O
==	O
NULL	O
)	O
{	O
free	function
(	O
img	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
nimages	int
==	O
2	int
)	O
{	O
if	O
(	O
(	O
img	pointer
->	O
oldlines	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
img	pointer
->	O
oldlines	pointer
)	O
*	O
height	int
)	O
)	O
==	O
NULL	O
)	O
{	O
free	function
(	O
img	pointer
->	O
currlines	pointer
)	O
;	O
free	function
(	O
img	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
shift1	int
=	O
simg	pointer
->	O
height	int
-	O
img	pointer
->	O
height	int
;	O
shift2	int
=	O
simg	pointer
->	O
width	int
*	O
simg	pointer
->	O
bytesperpixel	int
-	O
img	pointer
->	O
width	int
*	O
img	pointer
->	O
bytesperpixel	int
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
img	pointer
->	O
height	int
;	O
i	pointer
++	O
)	O
{	O
img	pointer
->	O
currlines	pointer
[	O
i	pointer
]	O
=	O
simg	pointer
->	O
currlines	pointer
[	O
i	pointer
+	O
shift1	int
]	O
+	O
shift2	int
;	O
}	O
if	O
(	O
nimages	int
==	O
2	int
)	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
img	pointer
->	O
height	int
;	O
i	pointer
++	O
)	O
{	O
img	pointer
->	O
oldlines	pointer
[	O
i	pointer
]	O
=	O
simg	pointer
->	O
oldlines	pointer
[	O
i	pointer
+	O
shift1	int
]	O
+	O
shift2	int
;	O
}	O
img	pointer
->	O
flags	int
|=	O
FREELINES	int
;	O
img	pointer
->	O
currimage	int
=	O
simg	pointer
->	O
currimage	int
;	O
return	O
(	O
img	pointer
)	O
;	O
}	O
void	O
destroy_image	function
(	O
struct	O
image	struct
*	O
img	pointer
)	O
{	O
if	O
(	O
img	pointer
->	O
flags	int
&	O
FREEDATA	int
)	O
{	O
free	function
(	O
*	O
img	pointer
->	O
currlines	pointer
)	O
;	O
if	O
(	O
img	pointer
->	O
nimages	int
==	O
2	int
)	O
free	function
(	O
*	O
img	pointer
->	O
oldlines	pointer
)	O
;	O
}	O
if	O
(	O
img	pointer
->	O
flags	int
&	O
FREELINES	int
)	O
{	O
free	function
(	O
img	pointer
->	O
currlines	pointer
)	O
;	O
if	O
(	O
img	pointer
->	O
nimages	int
==	O
2	int
)	O
free	function
(	O
img	pointer
->	O
oldlines	pointer
)	O
;	O
}	O
free	function
(	O
img	pointer
)	O
;	O
}	O
void	O
clear_image	function
(	O
struct	O
image	struct
*	O
img	pointer
)	O
{	O
int	O
i	pointer
;	O
int	O
width	int
=	O
img	pointer
->	O
width	int
*	O
img	pointer
->	O
bytesperpixel	int
;	O
if	O
(	O
!	O
width	int
)	O
width	int
=	O
(	O
img	pointer
->	O
width	int
+	O
7	int
)	O
/	O
8	int
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
img	pointer
->	O
height	int
;	O
i	pointer
++	O
)	O
memset	function
(	O
img	pointer
->	O
currlines	pointer
[	O
i	pointer
]	O
,	O
img	pointer
->	O
palette	struct
->	O
pixels	pointer
[	O
0	int
]	O
,	O
width	int
)	O
;	O
}	O
