int	O
mu_auth_data_alloc	function
(	O
struct	O
mu_auth_data	struct
*	O
*	O
ptr	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
const	O
char	O
*	O
passwd	struct
,	O
uid_t	int
uid	int
,	O
gid_t	int
gid	int
,	O
const	O
char	O
*	O
gecos	pointer
,	O
const	O
char	O
*	O
dir	pointer
,	O
const	O
char	O
*	O
shell	pointer
,	O
const	O
char	O
*	O
mailbox	pointer
,	O
int	O
change_uid	int
)	O
{	O
size_t	long
size	pointer
;	O
char	O
*	O
p	pointer
;	O
char	O
*	O
tmp_mailbox_name	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
name	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
passwd	struct
)	O
passwd	struct
=	O
"x"	pointer
;	O
if	O
(	O
!	O
gecos	pointer
)	O
gecos	pointer
=	O
""	pointer
;	O
if	O
(	O
!	O
dir	pointer
)	O
dir	pointer
=	O
"/nonexisting"	pointer
;	O
if	O
(	O
!	O
shell	pointer
)	O
shell	pointer
=	O
"/dev/null"	pointer
;	O
if	O
(	O
!	O
mailbox	pointer
)	O
{	O
int	O
rc	int
=	O
mu_construct_user_mailbox_url	function
(	O
&	O
tmp_mailbox_name	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mailbox	pointer
=	O
tmp_mailbox_name	pointer
;	O
}	O
size	pointer
=	O
sizeof	O
(	O
*	O
*	O
ptr	pointer
)	O
+	O
strlen	function
(	O
name	pointer
)	O
+	O
1	int
+	O
strlen	function
(	O
passwd	struct
)	O
+	O
1	int
+	O
strlen	function
(	O
gecos	pointer
)	O
+	O
1	int
+	O
strlen	function
(	O
dir	pointer
)	O
+	O
1	int
+	O
strlen	function
(	O
shell	pointer
)	O
+	O
1	int
+	O
strlen	function
(	O
mailbox	pointer
)	O
+	O
1	int
;	O
*	O
ptr	pointer
=	O
calloc	function
(	O
1	int
,	O
size	pointer
)	O
;	O
if	O
(	O
!	O
*	O
ptr	pointer
)	O
return	O
ENOMEM	int
;	O
p	pointer
=	O
(	O
char	O
*	O
)	O
(	O
*	O
ptr	pointer
+	O
1	int
)	O
;	O
COPY	O
(	O
name	pointer
)	O
;	O
COPY	O
(	O
passwd	struct
)	O
;	O
COPY	O
(	O
gecos	pointer
)	O
;	O
COPY	O
(	O
dir	pointer
)	O
;	O
COPY	O
(	O
shell	pointer
)	O
;	O
COPY	O
(	O
mailbox	pointer
)	O
;	O
(	O
*	O
ptr	pointer
)	O
->	O
uid	int
=	O
uid	int
;	O
(	O
*	O
ptr	pointer
)	O
->	O
gid	int
=	O
gid	int
;	O
(	O
*	O
ptr	pointer
)	O
->	O
change_uid	int
=	O
change_uid	int
;	O
free	function
(	O
tmp_mailbox_name	pointer
)	O
;	O
return	O
0	int
;	O
}	O
void	O
mu_auth_data_set_quota	function
(	O
struct	O
mu_auth_data	struct
*	O
ptr	pointer
,	O
mu_off_t	long
q	pointer
)	O
{	O
ptr	pointer
->	O
flags	int
|=	O
MU_AF_QUOTA	int
;	O
ptr	pointer
->	O
quota	long
=	O
q	pointer
;	O
}	O
void	O
mu_auth_data_free	function
(	O
struct	O
mu_auth_data	struct
*	O
ptr	pointer
)	O
{	O
free	function
(	O
ptr	pointer
)	O
;	O
}	O
void	O
mu_auth_data_destroy	function
(	O
struct	O
mu_auth_data	struct
*	O
*	O
pptr	pointer
)	O
{	O
if	O
(	O
pptr	pointer
)	O
{	O
mu_auth_data_free	function
(	O
*	O
pptr	pointer
)	O
;	O
*	O
pptr	pointer
=	O
NULL	O
;	O
}	O
}	O
static	O
void	O
append_auth_module	function
(	O
mu_list_t	pointer
*	O
pflist	pointer
,	O
struct	O
mu_auth_module	struct
*	O
mod	pointer
)	O
{	O
if	O
(	O
!	O
*	O
pflist	pointer
&&	O
mu_list_create	function
(	O
pflist	pointer
)	O
)	O
return	O
;	O
mu_list_append	function
(	O
*	O
pflist	pointer
,	O
mod	pointer
)	O
;	O
}	O
int	O
mu_auth_runlist	function
(	O
mu_list_t	pointer
flist	pointer
,	O
enum	O
mu_auth_mode	enum
mode	int
,	O
const	O
void	O
*	O
key	pointer
,	O
void	O
*	O
data	pointer
,	O
struct	O
mu_auth_data	struct
*	O
*	O
return_data	pointer
)	O
{	O
int	O
status	int
=	O
MU_ERR_AUTH_FAILURE	O
;	O
int	O
rc	int
;	O
mu_iterator_t	pointer
itr	pointer
;	O
if	O
(	O
mu_list_get_iterator	function
(	O
flist	pointer
,	O
&	O
itr	pointer
)	O
==	O
0	int
)	O
{	O
struct	O
mu_auth_module	struct
*	O
ep	pointer
;	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
ep	pointer
)	O
;	O
if	O
(	O
!	O
ep	pointer
->	O
handler	array
[	O
mode	int
]	O
)	O
continue	O
;	O
mu_debug	O
(	O
MU_DEBCAT_AUTH	int
,	O
MU_DEBUG_TRACE2	int
,	O
(	O
"Trying %s..."	pointer
,	O
ep	pointer
->	O
name	pointer
)	O
)	O
;	O
rc	int
=	O
ep	pointer
->	O
handler	array
[	O
mode	int
]	O
(	O
return_data	pointer
,	O
key	pointer
,	O
ep	pointer
->	O
data	pointer
[	O
mode	int
]	O
,	O
data	pointer
)	O
;	O
mu_debug	O
(	O
MU_DEBCAT_AUTH	int
,	O
MU_DEBUG_TRACE2	int
,	O
(	O
"%s yields %d=%s"	pointer
,	O
ep	pointer
->	O
name	pointer
,	O
rc	int
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
return_data	pointer
)	O
{	O
struct	O
mu_auth_data	struct
*	O
auth	pointer
=	O
*	O
return_data	pointer
;	O
if	O
(	O
auth	pointer
->	O
source	pointer
==	O
NULL	O
)	O
auth	pointer
->	O
source	pointer
=	O
ep	pointer
->	O
name	pointer
;	O
DEBUG_AUTH	O
(	O
auth	pointer
)	O
;	O
}	O
status	int
=	O
rc	int
;	O
break	O
;	O
}	O
else	O
if	O
(	O
rc	int
==	O
ENOSYS	int
&&	O
status	int
!=	O
0	int
)	O
;	O
else	O
if	O
(	O
status	int
!=	O
EAGAIN	int
)	O
status	int
=	O
rc	int
;	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
}	O
return	O
status	int
;	O
}	O
int	O
mu_auth_nosupport	function
(	O
struct	O
mu_auth_data	struct
*	O
*	O
return_data	pointer
MU_ARG_UNUSED	O
,	O
const	O
void	O
*	O
key	pointer
MU_ARG_UNUSED	O
,	O
void	O
*	O
func_data	pointer
MU_ARG_UNUSED	O
,	O
void	O
*	O
call_data	pointer
MU_ARG_UNUSED	O
)	O
{	O
return	O
ENOSYS	int
;	O
}	O
static	O
mu_list_t	pointer
mu_getpw_modules	pointer
,	O
selected_getpw_modules	pointer
;	O
int	O
mu_get_auth	function
(	O
struct	O
mu_auth_data	struct
*	O
*	O
auth	pointer
,	O
enum	O
mu_auth_key_type	enum
type	pointer
,	O
const	O
void	O
*	O
key	pointer
)	O
{	O
enum	O
mu_auth_mode	enum
mode	int
;	O
if	O
(	O
!	O
mu_getpw_modules	pointer
)	O
mu_auth_begin_setup	function
(	O
)	O
;	O
switch	O
(	O
type	pointer
)	O
{	O
case	O
mu_auth_key_name	int
:	O
mode	int
=	O
mu_auth_getpwnam	int
;	O
mu_debug	O
(	O
MU_DEBCAT_AUTH	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
"Getting auth info for user %s"	pointer
,	O
(	O
char	O
*	O
)	O
key	pointer
)	O
)	O
;	O
break	O
;	O
case	O
mu_auth_key_uid	int
:	O
mode	int
=	O
mu_auth_getpwuid	int
;	O
mu_debug	O
(	O
MU_DEBCAT_AUTH	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
"Getting auth info for UID %lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
*	O
(	O
uid_t	int
*	O
)	O
key	pointer
)	O
)	O
;	O
break	O
;	O
default	O
:	O
mu_debug	O
(	O
MU_DEBCAT_AUTH	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"Unknown mu_auth_key_type: %d"	pointer
,	O
type	pointer
)	O
)	O
;	O
return	O
EINVAL	int
;	O
}	O
return	O
mu_auth_runlist	function
(	O
mu_getpw_modules	pointer
,	O
mode	int
,	O
key	pointer
,	O
NULL	O
,	O
auth	pointer
)	O
;	O
}	O
struct	O
mu_auth_data	struct
*	O
mu_get_auth_by_name	function
(	O
const	O
char	O
*	O
username	pointer
)	O
{	O
struct	O
mu_auth_data	struct
*	O
auth	pointer
=	O
NULL	O
;	O
mu_get_auth	function
(	O
&	O
auth	pointer
,	O
mu_auth_key_name	int
,	O
username	pointer
)	O
;	O
return	O
auth	pointer
;	O
}	O
struct	O
mu_auth_data	struct
*	O
mu_get_auth_by_uid	function
(	O
uid_t	int
uid	int
)	O
{	O
struct	O
mu_auth_data	struct
*	O
auth	pointer
=	O
NULL	O
;	O
mu_get_auth	function
(	O
&	O
auth	pointer
,	O
mu_auth_key_uid	int
,	O
&	O
uid	int
)	O
;	O
return	O
auth	pointer
;	O
}	O
static	O
mu_list_t	pointer
mu_auth_modules	pointer
,	O
selected_auth_modules	pointer
;	O
int	O
mu_authenticate	function
(	O
struct	O
mu_auth_data	struct
*	O
auth_data	pointer
,	O
const	O
char	O
*	O
pass	pointer
)	O
{	O
if	O
(	O
!	O
auth_data	pointer
)	O
return	O
EINVAL	int
;	O
mu_debug	O
(	O
MU_DEBCAT_AUTH	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
"mu_authenticate, user %s, source %s"	pointer
,	O
auth_data	pointer
->	O
name	pointer
,	O
auth_data	pointer
->	O
source	pointer
)	O
)	O
;	O
if	O
(	O
!	O
mu_auth_modules	pointer
)	O
mu_auth_begin_setup	function
(	O
)	O
;	O
return	O
mu_auth_runlist	function
(	O
mu_auth_modules	pointer
,	O
mu_auth_authenticate	int
,	O
auth_data	pointer
,	O
(	O
void	O
*	O
)	O
pass	pointer
,	O
NULL	O
)	O
;	O
}	O
static	O
mu_list_t	pointer
module_list	pointer
;	O
static	O
void	O
module_list_init	function
(	O
void	O
)	O
{	O
if	O
(	O
!	O
module_list	pointer
)	O
{	O
if	O
(	O
mu_list_create	function
(	O
&	O
module_list	pointer
)	O
)	O
abort	function
(	O
)	O
;	O
mu_list_append	function
(	O
module_list	pointer
,	O
&	O
mu_auth_generic_module	struct
)	O
;	O
mu_list_append	function
(	O
module_list	pointer
,	O
&	O
mu_auth_system_module	struct
)	O
;	O
}	O
}	O
void	O
mu_auth_register_module	function
(	O
struct	O
mu_auth_module	struct
*	O
mod	pointer
)	O
{	O
module_list_init	function
(	O
)	O
;	O
mu_list_append	function
(	O
module_list	pointer
,	O
mod	pointer
)	O
;	O
}	O
static	O
struct	O
mu_auth_module	struct
*	O
_locate	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
mu_auth_module	struct
*	O
rp	pointer
=	O
NULL	O
;	O
mu_iterator_t	pointer
itr	pointer
;	O
if	O
(	O
mu_list_get_iterator	function
(	O
module_list	pointer
,	O
&	O
itr	pointer
)	O
==	O
0	int
)	O
{	O
struct	O
mu_auth_module	struct
*	O
p	pointer
;	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
rp	pointer
&&	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
p	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
p	pointer
->	O
name	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
rp	pointer
=	O
p	pointer
;	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
}	O
return	O
rp	pointer
;	O
}	O
static	O
void	O
_add_module_list	function
(	O
const	O
char	O
*	O
modlist	pointer
,	O
int	O
(	O
*	O
fun	pointer
)	O
(	O
const	O
char	O
*	O
name	pointer
)	O
)	O
{	O
struct	O
mu_wordsplit	struct
ws	pointer
;	O
int	O
i	int
;	O
ws	pointer
.	O
ws_delim	pointer
=	O
":"	pointer
;	O
if	O
(	O
mu_wordsplit	struct
(	O
modlist	pointer
,	O
&	O
ws	pointer
,	O
MU_WRDSF_DEFFLAGS	O
|	O
MU_WRDSF_DELIM	O
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot split line `%s': %s"	pointer
)	O
,	O
modlist	pointer
,	O
mu_wordsplit_strerror	function
(	O
&	O
ws	pointer
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ws	pointer
.	O
ws_wordc	long
;	O
i	int
++	O
)	O
{	O
if	O
(	O
fun	pointer
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
)	O
)	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	int
||	O
errno	O
==	O
MU_ERR_NOENT	O
)	O
mu_error	function
(	O
_	O
(	O
"no such module: %s"	pointer
)	O
,	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
)	O
;	O
else	O
mu_error	function
(	O
_	O
(	O
"failed to add module %s: %s"	pointer
)	O
,	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
}	O
int	O
mu_authorization_add_module	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
mu_auth_module	struct
*	O
mod	pointer
=	O
_locate	function
(	O
name	pointer
)	O
;	O
if	O
(	O
!	O
mod	pointer
)	O
{	O
errno	O
=	O
MU_ERR_NOENT	O
;	O
return	O
1	int
;	O
}	O
append_auth_module	function
(	O
&	O
selected_getpw_modules	pointer
,	O
mod	pointer
)	O
;	O
return	O
0	int
;	O
}	O
void	O
mu_authorization_add_module_list	function
(	O
const	O
char	O
*	O
modlist	pointer
)	O
{	O
_add_module_list	function
(	O
modlist	pointer
,	O
mu_authorization_add_module	function
)	O
;	O
}	O
void	O
mu_authorization_clear_list	function
(	O
)	O
{	O
mu_list_destroy	function
(	O
&	O
selected_getpw_modules	pointer
)	O
;	O
}	O
int	O
mu_authentication_add_module	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
mu_auth_module	struct
*	O
mod	pointer
=	O
_locate	function
(	O
name	pointer
)	O
;	O
if	O
(	O
!	O
mod	pointer
)	O
{	O
errno	O
=	O
MU_ERR_NOENT	O
;	O
return	O
1	int
;	O
}	O
append_auth_module	function
(	O
&	O
selected_auth_modules	pointer
,	O
mod	pointer
)	O
;	O
return	O
0	int
;	O
}	O
void	O
mu_authentication_add_module_list	function
(	O
const	O
char	O
*	O
modlist	pointer
)	O
{	O
_add_module_list	function
(	O
modlist	pointer
,	O
mu_authentication_add_module	function
)	O
;	O
}	O
void	O
mu_authentication_clear_list	function
(	O
)	O
{	O
mu_list_destroy	function
(	O
&	O
selected_auth_modules	pointer
)	O
;	O
}	O
void	O
mu_auth_begin_setup	function
(	O
void	O
)	O
{	O
mu_iterator_t	pointer
itr	pointer
;	O
module_list_init	function
(	O
)	O
;	O
if	O
(	O
!	O
mu_auth_modules	pointer
)	O
{	O
if	O
(	O
mu_list_get_iterator	function
(	O
module_list	pointer
,	O
&	O
itr	pointer
)	O
==	O
0	int
)	O
{	O
struct	O
mu_auth_module	struct
*	O
mod	pointer
;	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
mod	pointer
)	O
;	O
append_auth_module	function
(	O
&	O
mu_auth_modules	pointer
,	O
mod	pointer
)	O
;	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
}	O
}	O
if	O
(	O
!	O
mu_getpw_modules	pointer
)	O
{	O
if	O
(	O
mu_list_get_iterator	function
(	O
module_list	pointer
,	O
&	O
itr	pointer
)	O
==	O
0	int
)	O
{	O
struct	O
mu_auth_module	struct
*	O
mod	pointer
;	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
mod	pointer
)	O
;	O
append_auth_module	function
(	O
&	O
mu_getpw_modules	pointer
,	O
mod	pointer
)	O
;	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
}	O
}	O
}	O
void	O
mu_auth_finish_setup	function
(	O
void	O
)	O
{	O
mu_list_destroy	function
(	O
&	O
mu_auth_modules	pointer
)	O
;	O
mu_auth_modules	pointer
=	O
selected_auth_modules	pointer
;	O
selected_auth_modules	pointer
=	O
NULL	O
;	O
mu_list_destroy	function
(	O
&	O
mu_getpw_modules	pointer
)	O
;	O
mu_getpw_modules	pointer
=	O
selected_getpw_modules	pointer
;	O
selected_getpw_modules	pointer
=	O
NULL	O
;	O
mu_auth_begin_setup	function
(	O
)	O
;	O
}	O
struct	O
settings	struct
{	O
mu_list_t	pointer
opts	pointer
;	O
mu_list_t	pointer
commits	pointer
;	O
}	O
;	O
static	O
int	O
do_extend	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
mu_auth_module	struct
*	O
mod	pointer
=	O
item	pointer
;	O
struct	O
settings	struct
*	O
set	pointer
=	O
data	pointer
;	O
if	O
(	O
mod	pointer
->	O
opt	pointer
)	O
mu_list_append	function
(	O
set	pointer
->	O
opts	pointer
,	O
mod	pointer
->	O
opt	pointer
)	O
;	O
if	O
(	O
mod	pointer
->	O
commit	pointer
)	O
mu_list_append	function
(	O
set	pointer
->	O
commits	pointer
,	O
mod	pointer
->	O
commit	pointer
)	O
;	O
if	O
(	O
mod	pointer
->	O
parser	pointer
||	O
mod	pointer
->	O
cfg	pointer
)	O
mu_config_root_register_section	function
(	O
NULL	O
,	O
mod	pointer
->	O
name	pointer
,	O
NULL	O
,	O
mod	pointer
->	O
parser	pointer
,	O
mod	pointer
->	O
cfg	pointer
)	O
;	O
return	O
0	int
;	O
}	O
void	O
mu_auth_extend_settings	function
(	O
mu_list_t	pointer
opts	pointer
,	O
mu_list_t	pointer
commits	pointer
)	O
{	O
struct	O
settings	struct
s	pointer
;	O
s	pointer
.	O
opts	pointer
=	O
opts	pointer
;	O
s	pointer
.	O
commits	pointer
=	O
commits	pointer
;	O
mu_list_foreach	function
(	O
module_list	pointer
,	O
do_extend	function
,	O
&	O
s	pointer
)	O
;	O
}	O
