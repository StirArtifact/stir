char	O
*	O
mutool_shell_prompt	pointer
;	O
static	O
mu_assoc_t	pointer
mutool_prompt_assoc	pointer
;	O
int	O
mutool_shell_interactive	int
;	O
static	O
int	O
got_signal	int
=	O
0	int
;	O
static	O
void	O
_shell_sig	function
(	O
int	O
sig	int
)	O
{	O
got_signal	int
=	O
sig	int
;	O
}	O
static	O
void	O
report_signals	function
(	O
)	O
{	O
switch	O
(	O
got_signal	int
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
SIGINT	int
:	O
mu_stream_printf	function
(	O
mu_strerr	pointer
,	O
_	O
(	O
"Interrupt\n"	pointer
)	O
)	O
;	O
mu_stream_flush	function
(	O
mu_strerr	pointer
)	O
;	O
default	O
:	O
got_signal	int
=	O
0	int
;	O
}	O
}	O
static	O
int	O
shell_exit	function
(	O
int	O
,	O
char	O
*	O
*	O
)	O
;	O
static	O
int	O
shell_help	function
(	O
int	O
,	O
char	O
*	O
*	O
)	O
;	O
static	O
int	O
shell_prompt	function
(	O
int	O
,	O
char	O
*	O
*	O
)	O
;	O
struct	O
mutool_command	struct
default_comtab	array
[	O
]	O
=	O
{	O
{	O
"prompt"	pointer
,	O
1	int
,	O
2	int
,	O
0	int
,	O
shell_prompt	function
,	O
N_	O
(	O
"STRING"	pointer
)	O
,	O
N_	O
(	O
"set command prompt"	pointer
)	O
}	O
,	O
{	O
"exit"	pointer
,	O
1	int
,	O
1	int
,	O
0	int
,	O
shell_exit	function
,	O
NULL	O
,	O
N_	O
(	O
"exit program"	pointer
)	O
}	O
,	O
{	O
"help"	pointer
,	O
1	int
,	O
2	int
,	O
0	int
,	O
shell_help	function
,	O
N_	O
(	O
"[COMMAND]"	pointer
)	O
,	O
N_	O
(	O
"display this text"	pointer
)	O
}	O
,	O
{	O
"?"	pointer
,	O
1	int
,	O
1	int
,	O
0	int
,	O
shell_help	function
,	O
N_	O
(	O
"[COMMAND]"	pointer
)	O
,	O
N_	O
(	O
"synonym for `help'"	pointer
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
void	O
print_comtab	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
struct	O
mutool_command	struct
*	O
tab	pointer
)	O
{	O
size_t	long
size	long
=	O
0	int
;	O
const	O
char	O
*	O
text	pointer
;	O
if	O
(	O
tab	pointer
->	O
docstring	pointer
==	O
NULL	O
)	O
return	O
;	O
mu_stream_printf	function
(	O
stream	pointer
,	O
"%s "	pointer
,	O
tab	pointer
->	O
name	pointer
)	O
;	O
size	long
+=	O
strlen	function
(	O
tab	pointer
->	O
name	pointer
)	O
+	O
1	int
;	O
if	O
(	O
tab	pointer
->	O
argdoc	pointer
)	O
{	O
text	pointer
=	O
gettext	function
(	O
tab	pointer
->	O
argdoc	pointer
)	O
;	O
mu_stream_printf	function
(	O
stream	pointer
,	O
"%s"	pointer
,	O
text	pointer
)	O
;	O
size	long
+=	O
strlen	function
(	O
text	pointer
)	O
;	O
}	O
if	O
(	O
size	long
>=	O
DESCRCOL	int
)	O
mu_stream_printf	function
(	O
stream	pointer
,	O
"\n%-*s"	pointer
,	O
DESCRCOL	int
,	O
""	pointer
)	O
;	O
else	O
mu_stream_printf	function
(	O
stream	pointer
,	O
"%-*s"	pointer
,	O
(	O
int	O
)	O
(	O
DESCRCOL	int
-	O
size	long
)	O
,	O
""	pointer
)	O
;	O
text	pointer
=	O
gettext	function
(	O
tab	pointer
->	O
docstring	pointer
)	O
;	O
size	long
=	O
strlen	function
(	O
text	pointer
)	O
;	O
while	O
(	O
*	O
text	pointer
)	O
{	O
size_t	long
len	long
=	O
size	long
;	O
if	O
(	O
len	long
>	O
DESCRWIDTH	O
)	O
{	O
size_t	long
n	pointer
=	O
0	int
;	O
while	O
(	O
n	pointer
<	O
len	long
)	O
{	O
size_t	long
delta	long
;	O
char	O
*	O
p	pointer
;	O
p	pointer
=	O
mu_str_skip_cset_comp	function
(	O
text	pointer
+	O
n	pointer
,	O
" \t"	pointer
)	O
;	O
delta	long
=	O
p	pointer
-	O
(	O
text	pointer
+	O
n	pointer
)	O
;	O
if	O
(	O
n	pointer
+	O
delta	long
>	O
DESCRWIDTH	O
)	O
break	O
;	O
n	pointer
+=	O
delta	long
;	O
p	pointer
=	O
mu_str_skip_cset	function
(	O
text	pointer
+	O
n	pointer
,	O
" \t"	pointer
)	O
;	O
delta	long
=	O
p	pointer
-	O
(	O
text	pointer
+	O
n	pointer
)	O
;	O
if	O
(	O
n	pointer
+	O
delta	long
>	O
DESCRWIDTH	O
)	O
break	O
;	O
n	pointer
+=	O
delta	long
;	O
}	O
len	long
=	O
n	pointer
;	O
}	O
mu_stream_write	function
(	O
stream	pointer
,	O
text	pointer
,	O
len	long
,	O
NULL	O
)	O
;	O
text	pointer
+=	O
len	long
;	O
size	long
-=	O
len	long
;	O
mu_stream_write	function
(	O
stream	pointer
,	O
"\n"	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
size	long
)	O
mu_stream_printf	function
(	O
stream	pointer
,	O
"%-*s"	pointer
,	O
DESCRCOL	int
,	O
""	pointer
)	O
;	O
}	O
}	O
int	O
print_help	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
struct	O
mutool_command	struct
*	O
tab	pointer
,	O
size_t	long
n	pointer
)	O
{	O
if	O
(	O
n	pointer
)	O
{	O
for	O
(	O
;	O
n	pointer
>	O
0	int
&&	O
tab	pointer
->	O
name	pointer
;	O
tab	pointer
++	O
,	O
n	pointer
--	O
)	O
print_comtab	function
(	O
stream	pointer
,	O
tab	pointer
)	O
;	O
}	O
else	O
{	O
for	O
(	O
;	O
tab	pointer
->	O
name	pointer
;	O
tab	pointer
++	O
)	O
print_comtab	function
(	O
stream	pointer
,	O
tab	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
list_commands	function
(	O
struct	O
mutool_command	struct
*	O
tab	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
size_t	long
namelen	long
=	O
strlen	function
(	O
name	pointer
)	O
;	O
int	O
printed	int
=	O
0	int
;	O
for	O
(	O
;	O
tab	pointer
->	O
name	pointer
;	O
tab	pointer
++	O
)	O
{	O
if	O
(	O
printed	int
==	O
6	int
)	O
{	O
printed	int
=	O
0	int
;	O
mu_printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
if	O
(	O
mu_c_strncasecmp	function
(	O
tab	pointer
->	O
name	pointer
,	O
name	pointer
,	O
namelen	long
)	O
==	O
0	int
)	O
{	O
mu_printf	function
(	O
"%s\t"	pointer
,	O
tab	pointer
->	O
name	pointer
)	O
;	O
printed	int
++	O
;	O
}	O
}	O
if	O
(	O
printed	int
&&	O
printed	int
<	O
6	int
)	O
mu_printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
static	O
struct	O
mutool_command	struct
*	O
simple_find_command	function
(	O
struct	O
mutool_command	struct
*	O
cp	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
for	O
(	O
;	O
cp	pointer
->	O
name	pointer
;	O
cp	pointer
++	O
)	O
if	O
(	O
strcmp	function
(	O
cp	pointer
->	O
name	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
return	O
cp	pointer
;	O
return	O
NULL	O
;	O
}	O
static	O
struct	O
mutool_command	struct
*	O
shell_comtab	pointer
;	O
static	O
size_t	long
user_command_count	long
;	O
static	O
struct	O
mutool_command	struct
*	O
find_command	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
return	O
simple_find_command	function
(	O
shell_comtab	pointer
,	O
name	pointer
)	O
;	O
}	O
int	O
shell_help	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
char	O
*	O
name	pointer
=	O
argv	pointer
[	O
1	int
]	O
;	O
if	O
(	O
name	pointer
)	O
{	O
struct	O
mutool_command	struct
*	O
com	pointer
=	O
find_command	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
if	O
(	O
com	pointer
)	O
print_comtab	function
(	O
mu_strout	pointer
,	O
com	pointer
)	O
;	O
else	O
{	O
mu_printf	function
(	O
"No commands match `%s'.  Possibilities are:\n"	pointer
,	O
name	pointer
)	O
;	O
list_commands	function
(	O
shell_comtab	pointer
,	O
name	pointer
)	O
;	O
}	O
}	O
else	O
{	O
mu_stream_t	pointer
str	pointer
=	O
mutool_open_pager	function
(	O
)	O
;	O
print_help	function
(	O
str	pointer
,	O
shell_comtab	pointer
,	O
user_command_count	long
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"\n"	pointer
)	O
;	O
print_help	function
(	O
str	pointer
,	O
shell_comtab	pointer
+	O
user_command_count	long
,	O
0	int
)	O
;	O
mu_stream_destroy	function
(	O
&	O
str	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
shell_prompt	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
free	function
(	O
mutool_shell_prompt	pointer
)	O
;	O
mutool_shell_prompt	pointer
=	O
mu_strdup	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
return	O
0	int
;	O
}	O
mu_stream_t	pointer
mutool_open_pager	function
(	O
)	O
{	O
char	O
*	O
pager	pointer
;	O
if	O
(	O
mutool_shell_interactive	int
&&	O
(	O
pager	pointer
=	O
getenv	function
(	O
"PAGER"	pointer
)	O
)	O
!=	O
NULL	O
)	O
{	O
mu_stream_t	pointer
stream	pointer
;	O
int	O
rc	int
=	O
mu_command_stream_create	function
(	O
&	O
stream	pointer
,	O
pager	pointer
,	O
MU_STREAM_WRITE	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
return	O
stream	pointer
;	O
mu_error	function
(	O
_	O
(	O
"cannot start pager: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
}	O
mu_stream_ref	function
(	O
mu_strout	pointer
)	O
;	O
return	O
mu_strout	pointer
;	O
}	O
char	O
*	O
readline	function
(	O
char	O
*	O
prompt	pointer
)	O
{	O
static	O
size_t	long
size	long
=	O
0	int
;	O
static	O
char	O
*	O
buf	pointer
=	O
NULL	O
;	O
size_t	long
n	pointer
;	O
if	O
(	O
prompt	pointer
)	O
{	O
mu_printf	function
(	O
"%s"	pointer
,	O
prompt	pointer
)	O
;	O
mu_stream_flush	function
(	O
mu_strout	pointer
)	O
;	O
}	O
if	O
(	O
mu_stream_getline	function
(	O
mu_strin	pointer
,	O
&	O
buf	pointer
,	O
&	O
size	long
,	O
&	O
n	pointer
)	O
||	O
n	pointer
==	O
0	int
)	O
{	O
free	function
(	O
buf	pointer
)	O
;	O
buf	pointer
=	O
NULL	O
;	O
size	long
=	O
0	int
;	O
return	O
NULL	O
;	O
}	O
return	O
buf	pointer
;	O
}	O
void	O
add_history	function
(	O
const	O
char	O
*	O
s	pointer
MU_ARG_UNUSED	O
)	O
{	O
}	O
static	O
int	O
next_arg	function
(	O
struct	O
mu_wordsplit	struct
*	O
ws	pointer
)	O
{	O
int	O
rc	int
=	O
mu_wordsplit	struct
(	O
NULL	O
,	O
ws	pointer
,	O
MU_WRDSF_INCREMENTAL	O
)	O
;	O
if	O
(	O
rc	int
==	O
MU_WRDSE_NOINPUT	O
)	O
{	O
mu_error	function
(	O
"%s: too few arguments"	pointer
,	O
ws	pointer
->	O
ws_wordv	pointer
[	O
0	int
]	O
)	O
;	O
mu_wordsplit_free	function
(	O
ws	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
"cannot parse input line: %s"	pointer
,	O
mu_wordsplit_strerror	function
(	O
ws	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
execute_line	function
(	O
char	O
*	O
line	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_wordsplit	struct
ws	pointer
;	O
struct	O
mutool_command	struct
*	O
cmd	enum
;	O
int	O
status	int
=	O
0	int
;	O
ws	pointer
.	O
ws_comment	pointer
=	O
"#"	pointer
;	O
ws	pointer
.	O
ws_escape	array
[	O
0	int
]	O
=	O
ws	pointer
.	O
ws_escape	array
[	O
1	int
]	O
=	O
"\\\\\"\""	pointer
;	O
rc	int
=	O
mu_wordsplit	struct
(	O
line	pointer
,	O
&	O
ws	pointer
,	O
MU_WRDSF_DEFFLAGS	O
|	O
MU_WRDSF_COMMENT	O
|	O
MU_WRDSF_ESCAPE	O
|	O
MU_WRDSF_INCREMENTAL	O
|	O
MU_WRDSF_APPEND	O
)	O
;	O
if	O
(	O
rc	int
==	O
MU_WRDSE_NOINPUT	O
)	O
{	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
"cannot parse input line: %s"	pointer
,	O
mu_wordsplit_strerror	function
(	O
&	O
ws	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
ws	pointer
.	O
ws_wordc	long
)	O
{	O
int	O
argmin	int
;	O
cmd	enum
=	O
find_command	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
!	O
cmd	enum
)	O
{	O
mu_error	function
(	O
"%s: no such command."	pointer
,	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
)	O
;	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
return	O
0	int
;	O
}	O
argmin	int
=	O
cmd	enum
->	O
argmin	int
;	O
if	O
(	O
cmd	enum
->	O
flags	int
&	O
CMD_COALESCE_EXTRA_ARGS	int
)	O
--	O
argmin	int
;	O
while	O
(	O
ws	pointer
.	O
ws_wordc	long
<	O
argmin	int
)	O
{	O
if	O
(	O
next_arg	function
(	O
&	O
ws	pointer
)	O
)	O
return	O
0	int
;	O
}	O
if	O
(	O
cmd	enum
->	O
flags	int
&	O
CMD_COALESCE_EXTRA_ARGS	int
)	O
{	O
ws	pointer
.	O
ws_flags	int
|=	O
MU_WRDSF_NOSPLIT	O
;	O
if	O
(	O
next_arg	function
(	O
&	O
ws	pointer
)	O
)	O
return	O
0	int
;	O
}	O
else	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
cmd	enum
->	O
argmax	int
>	O
0	int
&&	O
ws	pointer
.	O
ws_wordc	long
>	O
cmd	enum
->	O
argmax	int
)	O
{	O
mu_error	function
(	O
"%s: too many arguments"	pointer
,	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
)	O
;	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
return	O
0	int
;	O
}	O
rc	int
=	O
mu_wordsplit	struct
(	O
NULL	O
,	O
&	O
ws	pointer
,	O
MU_WRDSF_INCREMENTAL	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
continue	O
;	O
else	O
if	O
(	O
rc	int
==	O
MU_WRDSE_NOINPUT	O
)	O
break	O
;	O
else	O
{	O
mu_error	function
(	O
"cannot parse input line: %s"	pointer
,	O
mu_wordsplit_strerror	function
(	O
&	O
ws	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
}	O
}	O
status	int
=	O
cmd	enum
->	O
func	pointer
(	O
ws	pointer
.	O
ws_wordc	long
,	O
ws	pointer
.	O
ws_wordv	pointer
)	O
;	O
}	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
return	O
status	int
;	O
}	O
static	O
char	O
*	O
input_line_interactive	function
(	O
)	O
{	O
char	O
*	O
line	pointer
,	O
*	O
prompt	pointer
;	O
int	O
rc	int
;	O
report_signals	function
(	O
)	O
;	O
rc	int
=	O
mu_str_expand	function
(	O
&	O
prompt	pointer
,	O
mutool_shell_prompt	pointer
,	O
mutool_prompt_assoc	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
rc	int
==	O
MU_ERR_FAILURE	O
)	O
mu_error	function
(	O
_	O
(	O
"cannot expand prompt: %s"	pointer
)	O
,	O
prompt	pointer
)	O
;	O
else	O
mu_error	function
(	O
_	O
(	O
"cannot expand prompt: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
line	pointer
=	O
readline	function
(	O
prompt	pointer
)	O
;	O
free	function
(	O
prompt	pointer
)	O
;	O
return	O
line	pointer
;	O
}	O
static	O
char	O
*	O
input_line_script	function
(	O
)	O
{	O
size_t	long
size	long
=	O
0	int
,	O
n	pointer
;	O
char	O
*	O
buf	pointer
=	O
NULL	O
;	O
report_signals	function
(	O
)	O
;	O
if	O
(	O
mu_stream_getline	function
(	O
mu_strin	pointer
,	O
&	O
buf	pointer
,	O
&	O
size	long
,	O
&	O
n	pointer
)	O
||	O
n	pointer
==	O
0	int
)	O
return	O
NULL	O
;	O
return	O
buf	pointer
;	O
}	O
static	O
int	O
done	int
;	O
static	O
int	O
shell_exit	function
(	O
int	O
argc	long
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
argv	pointer
MU_ARG_UNUSED	O
)	O
{	O
done	int
=	O
1	int
;	O
return	O
0	int
;	O
}	O
mu_assoc_t	pointer
mutool_shell_prompt_assoc	function
(	O
void	O
)	O
{	O
if	O
(	O
mutool_prompt_assoc	pointer
)	O
mu_assoc_clear	function
(	O
mutool_prompt_assoc	pointer
)	O
;	O
else	O
{	O
int	O
rc	int
=	O
mu_assoc_create	function
(	O
&	O
mutool_prompt_assoc	pointer
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_assoc_create"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
mu_assoc_install	function
(	O
mutool_prompt_assoc	pointer
,	O
"program-name"	pointer
,	O
mu_program_name	pointer
)	O
;	O
mu_assoc_install	function
(	O
mutool_prompt_assoc	pointer
,	O
"canonical-program-name"	pointer
,	O
"mailutils"	pointer
)	O
;	O
mu_assoc_install	function
(	O
mutool_prompt_assoc	pointer
,	O
"package"	pointer
,	O
PACKAGE	pointer
)	O
;	O
mu_assoc_install	function
(	O
mutool_prompt_assoc	pointer
,	O
"version"	pointer
,	O
PACKAGE_VERSION	pointer
)	O
;	O
return	O
mutool_prompt_assoc	pointer
;	O
}	O
int	O
mutool_shell	function
(	O
const	O
char	O
*	O
name	pointer
,	O
struct	O
mutool_command	struct
*	O
cmd	enum
)	O
{	O
size_t	long
n	pointer
;	O
char	O
*	O
(	O
*	O
input_line	pointer
)	O
(	O
)	O
;	O
static	O
int	O
sigv	pointer
[	O
]	O
=	O
{	O
SIGPIPE	int
,	O
SIGINT	int
}	O
;	O
mutool_shell_interactive	int
=	O
isatty	function
(	O
0	int
)	O
;	O
input_line	pointer
=	O
mutool_shell_interactive	int
?	O
input_line_interactive	function
:	O
input_line_script	function
;	O
for	O
(	O
n	pointer
=	O
0	int
;	O
cmd	enum
[	O
n	pointer
]	O
.	O
name	pointer
;	O
n	pointer
++	O
)	O
;	O
user_command_count	long
=	O
n	pointer
;	O
shell_comtab	pointer
=	O
mu_calloc	function
(	O
n	pointer
+	O
MU_ARRAY_SIZE	O
(	O
default_comtab	array
)	O
,	O
sizeof	O
(	O
shell_comtab	pointer
[	O
0	int
]	O
)	O
)	O
;	O
memcpy	function
(	O
shell_comtab	pointer
,	O
cmd	enum
,	O
n	pointer
*	O
sizeof	O
(	O
shell_comtab	pointer
[	O
0	int
]	O
)	O
)	O
;	O
memcpy	function
(	O
shell_comtab	pointer
+	O
n	pointer
,	O
default_comtab	array
,	O
sizeof	O
(	O
default_comtab	array
)	O
)	O
;	O
mutool_initialize_readline	O
(	O
name	pointer
)	O
;	O
mu_set_signals	function
(	O
_shell_sig	function
,	O
sigv	pointer
,	O
MU_ARRAY_SIZE	O
(	O
sigv	pointer
)	O
)	O
;	O
while	O
(	O
!	O
done	int
)	O
{	O
char	O
*	O
s	pointer
,	O
*	O
line	pointer
=	O
input_line	pointer
(	O
)	O
;	O
if	O
(	O
!	O
line	pointer
)	O
{	O
if	O
(	O
shell_interrupted	O
(	O
)	O
)	O
{	O
report_signals	function
(	O
)	O
;	O
continue	O
;	O
}	O
else	O
{	O
mu_printf	function
(	O
"\n"	pointer
)	O
;	O
break	O
;	O
}	O
}	O
s	pointer
=	O
mu_str_stripws	function
(	O
line	pointer
)	O
;	O
if	O
(	O
*	O
s	pointer
)	O
{	O
int	O
status	int
;	O
status	int
=	O
execute_line	function
(	O
s	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
mu_error	function
(	O
"Error: %s"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
}	O
free	function
(	O
line	pointer
)	O
;	O
}	O
if	O
(	O
mutool_shell_interactive	int
)	O
finish_readline	O
(	O
)	O
;	O
mu_stream_destroy	function
(	O
&	O
mu_strin	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
mu_strout	pointer
)	O
;	O
return	O
0	int
;	O
}	O
