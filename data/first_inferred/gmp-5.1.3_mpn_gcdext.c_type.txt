static	O
size_t	long
hgcd_mul_matrix_vector	function
(	O
struct	O
hgcd_matrix	struct
*	O
M	pointer
,	O
mp_ptr	pointer
rp	pointer
,	O
mp_srcptr	pointer
ap	pointer
,	O
mp_ptr	pointer
bp	pointer
,	O
mp_size_t	long
n	long
,	O
mp_ptr	pointer
tp	pointer
)	O
{	O
mp_limb_t	long
ah	long
,	O
bh	long
;	O
if	O
(	O
M	pointer
->	O
n	long
>=	O
n	long
)	O
{	O
mpn_mul	O
(	O
tp	pointer
,	O
M	pointer
->	O
p	pointer
[	O
0	int
]	O
[	O
0	int
]	O
,	O
M	pointer
->	O
n	long
,	O
ap	pointer
,	O
n	long
)	O
;	O
mpn_mul	O
(	O
rp	pointer
,	O
M	pointer
->	O
p	pointer
[	O
1	int
]	O
[	O
0	int
]	O
,	O
M	pointer
->	O
n	long
,	O
bp	pointer
,	O
n	long
)	O
;	O
}	O
else	O
{	O
mpn_mul	O
(	O
tp	pointer
,	O
ap	pointer
,	O
n	long
,	O
M	pointer
->	O
p	pointer
[	O
0	int
]	O
[	O
0	int
]	O
,	O
M	pointer
->	O
n	long
)	O
;	O
mpn_mul	O
(	O
rp	pointer
,	O
bp	pointer
,	O
n	long
,	O
M	pointer
->	O
p	pointer
[	O
1	int
]	O
[	O
0	int
]	O
,	O
M	pointer
->	O
n	long
)	O
;	O
}	O
ah	long
=	O
mpn_add_n	O
(	O
rp	pointer
,	O
rp	pointer
,	O
tp	pointer
,	O
n	long
+	O
M	pointer
->	O
n	long
)	O
;	O
if	O
(	O
M	pointer
->	O
n	long
>=	O
n	long
)	O
{	O
mpn_mul	O
(	O
tp	pointer
,	O
M	pointer
->	O
p	pointer
[	O
1	int
]	O
[	O
1	int
]	O
,	O
M	pointer
->	O
n	long
,	O
bp	pointer
,	O
n	long
)	O
;	O
mpn_mul	O
(	O
bp	pointer
,	O
M	pointer
->	O
p	pointer
[	O
0	int
]	O
[	O
1	int
]	O
,	O
M	pointer
->	O
n	long
,	O
ap	pointer
,	O
n	long
)	O
;	O
}	O
else	O
{	O
mpn_mul	O
(	O
tp	pointer
,	O
bp	pointer
,	O
n	long
,	O
M	pointer
->	O
p	pointer
[	O
1	int
]	O
[	O
1	int
]	O
,	O
M	pointer
->	O
n	long
)	O
;	O
mpn_mul	O
(	O
bp	pointer
,	O
ap	pointer
,	O
n	long
,	O
M	pointer
->	O
p	pointer
[	O
0	int
]	O
[	O
1	int
]	O
,	O
M	pointer
->	O
n	long
)	O
;	O
}	O
bh	long
=	O
mpn_add_n	O
(	O
bp	pointer
,	O
bp	pointer
,	O
tp	pointer
,	O
n	long
+	O
M	pointer
->	O
n	long
)	O
;	O
n	long
+=	O
M	pointer
->	O
n	long
;	O
if	O
(	O
(	O
ah	long
|	O
bh	long
)	O
>	O
0	int
)	O
{	O
rp	pointer
[	O
n	long
]	O
=	O
ah	long
;	O
bp	pointer
[	O
n	long
]	O
=	O
bh	long
;	O
n	long
++	O
;	O
}	O
else	O
{	O
while	O
(	O
(	O
rp	pointer
[	O
n	long
-	O
1	int
]	O
|	O
bp	pointer
[	O
n	long
-	O
1	int
]	O
)	O
==	O
0	int
)	O
n	long
--	O
;	O
}	O
return	O
n	long
;	O
}	O
static	O
mp_size_t	long
compute_v	function
(	O
mp_ptr	pointer
vp	pointer
,	O
mp_srcptr	pointer
ap	pointer
,	O
mp_srcptr	pointer
bp	pointer
,	O
mp_size_t	long
n	long
,	O
mp_srcptr	pointer
gp	pointer
,	O
mp_size_t	long
gn	long
,	O
mp_srcptr	pointer
up	pointer
,	O
mp_size_t	long
usize	pointer
,	O
mp_ptr	pointer
tp	pointer
)	O
{	O
mp_size_t	long
size	long
;	O
mp_size_t	long
an	long
;	O
mp_size_t	long
bn	long
;	O
mp_size_t	long
vn	long
;	O
ASSERT	O
(	O
n	long
>	O
0	int
)	O
;	O
ASSERT	O
(	O
gn	long
>	O
0	int
)	O
;	O
ASSERT	O
(	O
usize	pointer
!=	O
0	int
)	O
;	O
size	long
=	O
ABS	O
(	O
usize	pointer
)	O
;	O
ASSERT	O
(	O
size	long
<=	O
n	long
)	O
;	O
ASSERT	O
(	O
up	pointer
[	O
size	long
-	O
1	int
]	O
>	O
0	int
)	O
;	O
an	long
=	O
n	long
;	O
MPN_NORMALIZE	O
(	O
ap	pointer
,	O
an	long
)	O
;	O
ASSERT	O
(	O
gn	long
<=	O
an	long
)	O
;	O
if	O
(	O
an	long
>=	O
size	long
)	O
mpn_mul	O
(	O
tp	pointer
,	O
ap	pointer
,	O
an	long
,	O
up	pointer
,	O
size	long
)	O
;	O
else	O
mpn_mul	O
(	O
tp	pointer
,	O
up	pointer
,	O
size	long
,	O
ap	pointer
,	O
an	long
)	O
;	O
size	long
+=	O
an	long
;	O
if	O
(	O
usize	pointer
>	O
0	int
)	O
{	O
ASSERT_NOCARRY	O
(	O
mpn_sub	O
(	O
tp	pointer
,	O
tp	pointer
,	O
size	long
,	O
gp	pointer
,	O
gn	long
)	O
)	O
;	O
MPN_NORMALIZE	O
(	O
tp	pointer
,	O
size	long
)	O
;	O
if	O
(	O
size	long
==	O
0	int
)	O
return	O
0	int
;	O
}	O
else	O
{	O
ASSERT_NOCARRY	O
(	O
mpn_add	O
(	O
tp	pointer
,	O
tp	pointer
,	O
size	long
,	O
gp	pointer
,	O
gn	long
)	O
)	O
;	O
size	long
-=	O
(	O
tp	pointer
[	O
size	long
-	O
1	int
]	O
==	O
0	int
)	O
;	O
}	O
bn	long
=	O
n	long
;	O
MPN_NORMALIZE	O
(	O
bp	pointer
,	O
bn	long
)	O
;	O
ASSERT	O
(	O
size	long
>=	O
bn	long
)	O
;	O
vn	long
=	O
size	long
+	O
1	int
-	O
bn	long
;	O
ASSERT	O
(	O
vn	long
<=	O
n	long
+	O
1	int
)	O
;	O
mpn_divexact	O
(	O
vp	pointer
,	O
tp	pointer
,	O
size	long
,	O
bp	pointer
,	O
bn	long
)	O
;	O
vn	long
-=	O
(	O
vp	pointer
[	O
vn	long
-	O
1	int
]	O
==	O
0	int
)	O
;	O
return	O
vn	long
;	O
}	O
mp_size_t	long
mpn_gcdext	O
(	O
mp_ptr	pointer
gp	pointer
,	O
mp_ptr	pointer
up	pointer
,	O
mp_size_t	long
*	O
usizep	pointer
,	O
mp_ptr	pointer
ap	pointer
,	O
mp_size_t	long
an	long
,	O
mp_ptr	pointer
bp	pointer
,	O
mp_size_t	long
n	long
)	O
{	O
mp_size_t	long
talloc	long
;	O
mp_size_t	long
scratch	long
;	O
mp_size_t	long
matrix_scratch	long
;	O
mp_size_t	long
ualloc	long
=	O
n	long
+	O
1	int
;	O
struct	O
gcdext_ctx	struct
ctx	struct
;	O
mp_size_t	long
un	long
;	O
mp_ptr	pointer
u0	pointer
;	O
mp_ptr	pointer
u1	pointer
;	O
mp_ptr	pointer
tp	pointer
;	O
TMP_DECL	O
;	O
ASSERT	O
(	O
an	long
>=	O
n	long
)	O
;	O
ASSERT	O
(	O
n	long
>	O
0	int
)	O
;	O
ASSERT	O
(	O
bp	pointer
[	O
n	long
-	O
1	int
]	O
>	O
0	int
)	O
;	O
TMP_MARK	O
;	O
talloc	long
=	O
MPN_GCDEXT_LEHMER_N_ITCH	O
(	O
n	long
)	O
;	O
scratch	long
=	O
an	long
-	O
n	long
+	O
1	int
;	O
if	O
(	O
scratch	long
>	O
talloc	long
)	O
talloc	long
=	O
scratch	long
;	O
if	O
(	O
ABOVE_THRESHOLD	O
(	O
n	long
,	O
GCDEXT_DC_THRESHOLD	int
)	O
)	O
{	O
mp_size_t	long
hgcd_scratch	long
;	O
mp_size_t	long
update_scratch	long
;	O
mp_size_t	long
p1	long
=	O
CHOOSE_P_1	O
(	O
n	long
)	O
;	O
mp_size_t	long
p2	long
=	O
CHOOSE_P_2	O
(	O
n	long
)	O
;	O
mp_size_t	long
min_p	long
=	O
MIN	O
(	O
p1	long
,	O
p2	long
)	O
;	O
mp_size_t	long
max_p	long
=	O
MAX	O
(	O
p1	long
,	O
p2	long
)	O
;	O
matrix_scratch	long
=	O
MPN_HGCD_MATRIX_INIT_ITCH	O
(	O
n	long
-	O
min_p	long
)	O
;	O
hgcd_scratch	long
=	O
mpn_hgcd_itch	O
(	O
n	long
-	O
min_p	long
)	O
;	O
update_scratch	long
=	O
max_p	long
+	O
n	long
-	O
1	int
;	O
scratch	long
=	O
matrix_scratch	long
+	O
MAX	O
(	O
hgcd_scratch	long
,	O
update_scratch	long
)	O
;	O
if	O
(	O
scratch	long
>	O
talloc	long
)	O
talloc	long
=	O
scratch	long
;	O
scratch	long
=	O
MPN_GCDEXT_LEHMER_N_ITCH	O
(	O
GCDEXT_DC_THRESHOLD	int
)	O
+	O
3	int
*	O
GCDEXT_DC_THRESHOLD	int
;	O
if	O
(	O
scratch	long
>	O
talloc	long
)	O
talloc	long
=	O
scratch	long
;	O
talloc	long
+=	O
2	int
*	O
(	O
n	long
+	O
1	int
)	O
;	O
}	O
tp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
talloc	long
)	O
;	O
if	O
(	O
an	long
>	O
n	long
)	O
{	O
mpn_tdiv_qr	O
(	O
tp	pointer
,	O
ap	pointer
,	O
0	int
,	O
ap	pointer
,	O
an	long
,	O
bp	pointer
,	O
n	long
)	O
;	O
if	O
(	O
mpn_zero_p	function
(	O
ap	pointer
,	O
n	long
)	O
)	O
{	O
MPN_COPY	O
(	O
gp	pointer
,	O
bp	pointer
,	O
n	long
)	O
;	O
*	O
usizep	pointer
=	O
0	int
;	O
TMP_FREE	O
;	O
return	O
n	long
;	O
}	O
}	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
n	long
,	O
GCDEXT_DC_THRESHOLD	int
)	O
)	O
{	O
mp_size_t	long
gn	long
=	O
mpn_gcdext_lehmer_n	O
(	O
gp	pointer
,	O
up	pointer
,	O
usizep	pointer
,	O
ap	pointer
,	O
bp	pointer
,	O
n	long
,	O
tp	pointer
)	O
;	O
TMP_FREE	O
;	O
return	O
gn	long
;	O
}	O
MPN_ZERO	O
(	O
tp	pointer
,	O
2	int
*	O
ualloc	long
)	O
;	O
u0	pointer
=	O
tp	pointer
;	O
tp	pointer
+=	O
ualloc	long
;	O
u1	pointer
=	O
tp	pointer
;	O
tp	pointer
+=	O
ualloc	long
;	O
ctx	struct
.	O
gp	pointer
=	O
gp	pointer
;	O
ctx	struct
.	O
up	pointer
=	O
up	pointer
;	O
ctx	struct
.	O
usize	pointer
=	O
usizep	pointer
;	O
{	O
struct	O
hgcd_matrix	struct
M	pointer
;	O
mp_size_t	long
p	pointer
=	O
CHOOSE_P_1	O
(	O
n	long
)	O
;	O
mp_size_t	long
nn	long
;	O
mpn_hgcd_matrix_init	O
(	O
&	O
M	pointer
,	O
n	long
-	O
p	pointer
,	O
tp	pointer
)	O
;	O
nn	long
=	O
mpn_hgcd	O
(	O
ap	pointer
+	O
p	pointer
,	O
bp	pointer
+	O
p	pointer
,	O
n	long
-	O
p	pointer
,	O
&	O
M	pointer
,	O
tp	pointer
+	O
matrix_scratch	long
)	O
;	O
if	O
(	O
nn	long
>	O
0	int
)	O
{	O
ASSERT	O
(	O
M	pointer
.	O
n	long
<=	O
(	O
n	long
-	O
p	pointer
-	O
1	int
)	O
/	O
2	int
)	O
;	O
ASSERT	O
(	O
M	pointer
.	O
n	long
+	O
p	pointer
<=	O
(	O
p	pointer
+	O
n	long
-	O
1	int
)	O
/	O
2	int
)	O
;	O
n	long
=	O
mpn_hgcd_matrix_adjust	O
(	O
&	O
M	pointer
,	O
p	pointer
+	O
nn	long
,	O
ap	pointer
,	O
bp	pointer
,	O
p	pointer
,	O
tp	pointer
+	O
matrix_scratch	long
)	O
;	O
MPN_COPY	O
(	O
u0	pointer
,	O
M	pointer
.	O
p	pointer
[	O
1	int
]	O
[	O
0	int
]	O
,	O
M	pointer
.	O
n	long
)	O
;	O
MPN_COPY	O
(	O
u1	pointer
,	O
M	pointer
.	O
p	pointer
[	O
1	int
]	O
[	O
1	int
]	O
,	O
M	pointer
.	O
n	long
)	O
;	O
un	long
=	O
M	pointer
.	O
n	long
;	O
while	O
(	O
(	O
u0	pointer
[	O
un	long
-	O
1	int
]	O
|	O
u1	pointer
[	O
un	long
-	O
1	int
]	O
)	O
==	O
0	int
)	O
un	long
--	O
;	O
}	O
else	O
{	O
u1	pointer
[	O
0	int
]	O
=	O
1	int
;	O
ctx	struct
.	O
u0	pointer
=	O
u0	pointer
;	O
ctx	struct
.	O
u1	pointer
=	O
u1	pointer
;	O
ctx	struct
.	O
tp	pointer
=	O
tp	pointer
+	O
n	long
;	O
ctx	struct
.	O
un	long
=	O
1	int
;	O
n	long
=	O
mpn_gcd_subdiv_step	O
(	O
ap	pointer
,	O
bp	pointer
,	O
n	long
,	O
0	int
,	O
mpn_gcdext_hook	O
,	O
&	O
ctx	struct
,	O
tp	pointer
)	O
;	O
if	O
(	O
n	long
==	O
0	int
)	O
{	O
TMP_FREE	O
;	O
return	O
ctx	struct
.	O
gn	long
;	O
}	O
un	long
=	O
ctx	struct
.	O
un	long
;	O
ASSERT	O
(	O
un	long
<	O
ualloc	long
)	O
;	O
}	O
}	O
while	O
(	O
ABOVE_THRESHOLD	O
(	O
n	long
,	O
GCDEXT_DC_THRESHOLD	int
)	O
)	O
{	O
struct	O
hgcd_matrix	struct
M	pointer
;	O
mp_size_t	long
p	pointer
=	O
CHOOSE_P_2	O
(	O
n	long
)	O
;	O
mp_size_t	long
nn	long
;	O
mpn_hgcd_matrix_init	O
(	O
&	O
M	pointer
,	O
n	long
-	O
p	pointer
,	O
tp	pointer
)	O
;	O
nn	long
=	O
mpn_hgcd	O
(	O
ap	pointer
+	O
p	pointer
,	O
bp	pointer
+	O
p	pointer
,	O
n	long
-	O
p	pointer
,	O
&	O
M	pointer
,	O
tp	pointer
+	O
matrix_scratch	long
)	O
;	O
if	O
(	O
nn	long
>	O
0	int
)	O
{	O
mp_ptr	pointer
t0	pointer
;	O
t0	pointer
=	O
tp	pointer
+	O
matrix_scratch	long
;	O
ASSERT	O
(	O
M	pointer
.	O
n	long
<=	O
(	O
n	long
-	O
p	pointer
-	O
1	int
)	O
/	O
2	int
)	O
;	O
ASSERT	O
(	O
M	pointer
.	O
n	long
+	O
p	pointer
<=	O
(	O
p	pointer
+	O
n	long
-	O
1	int
)	O
/	O
2	int
)	O
;	O
n	long
=	O
mpn_hgcd_matrix_adjust	O
(	O
&	O
M	pointer
,	O
p	pointer
+	O
nn	long
,	O
ap	pointer
,	O
bp	pointer
,	O
p	pointer
,	O
t0	pointer
)	O
;	O
ASSERT	O
(	O
M	pointer
.	O
n	long
+	O
un	long
<=	O
ualloc	long
)	O
;	O
MPN_COPY	O
(	O
t0	pointer
,	O
u0	pointer
,	O
un	long
)	O
;	O
un	long
=	O
hgcd_mul_matrix_vector	function
(	O
&	O
M	pointer
,	O
u0	pointer
,	O
t0	pointer
,	O
u1	pointer
,	O
un	long
,	O
t0	pointer
+	O
un	long
)	O
;	O
ASSERT	O
(	O
un	long
<	O
ualloc	long
)	O
;	O
ASSERT	O
(	O
(	O
u0	pointer
[	O
un	long
-	O
1	int
]	O
|	O
u1	pointer
[	O
un	long
-	O
1	int
]	O
)	O
>	O
0	int
)	O
;	O
}	O
else	O
{	O
ctx	struct
.	O
u0	pointer
=	O
u0	pointer
;	O
ctx	struct
.	O
u1	pointer
=	O
u1	pointer
;	O
ctx	struct
.	O
tp	pointer
=	O
tp	pointer
+	O
n	long
;	O
ctx	struct
.	O
un	long
=	O
un	long
;	O
n	long
=	O
mpn_gcd_subdiv_step	O
(	O
ap	pointer
,	O
bp	pointer
,	O
n	long
,	O
0	int
,	O
mpn_gcdext_hook	O
,	O
&	O
ctx	struct
,	O
tp	pointer
)	O
;	O
if	O
(	O
n	long
==	O
0	int
)	O
{	O
TMP_FREE	O
;	O
return	O
ctx	struct
.	O
gn	long
;	O
}	O
un	long
=	O
ctx	struct
.	O
un	long
;	O
ASSERT	O
(	O
un	long
<	O
ualloc	long
)	O
;	O
}	O
}	O
ASSERT	O
(	O
(	O
ap	pointer
[	O
n	long
-	O
1	int
]	O
|	O
bp	pointer
[	O
n	long
-	O
1	int
]	O
)	O
>	O
0	int
)	O
;	O
if	O
(	O
UNLIKELY	O
(	O
mpn_cmp	O
(	O
ap	pointer
,	O
bp	pointer
,	O
n	long
)	O
==	O
0	int
)	O
)	O
{	O
int	O
c	int
;	O
MPN_COPY	O
(	O
gp	pointer
,	O
ap	pointer
,	O
n	long
)	O
;	O
MPN_CMP	O
(	O
c	int
,	O
u0	pointer
,	O
u1	pointer
,	O
un	long
)	O
;	O
ASSERT	O
(	O
c	int
!=	O
0	int
||	O
(	O
un	long
==	O
1	int
&&	O
u0	pointer
[	O
0	int
]	O
==	O
1	int
&&	O
u1	pointer
[	O
0	int
]	O
==	O
1	int
)	O
)	O
;	O
if	O
(	O
c	int
<	O
0	int
)	O
{	O
MPN_NORMALIZE	O
(	O
u0	pointer
,	O
un	long
)	O
;	O
MPN_COPY	O
(	O
up	pointer
,	O
u0	pointer
,	O
un	long
)	O
;	O
*	O
usizep	pointer
=	O
-	O
un	long
;	O
}	O
else	O
{	O
MPN_NORMALIZE_NOT_ZERO	O
(	O
u1	pointer
,	O
un	long
)	O
;	O
MPN_COPY	O
(	O
up	pointer
,	O
u1	pointer
,	O
un	long
)	O
;	O
*	O
usizep	pointer
=	O
un	long
;	O
}	O
TMP_FREE	O
;	O
return	O
n	long
;	O
}	O
else	O
if	O
(	O
UNLIKELY	O
(	O
u0	pointer
[	O
0	int
]	O
==	O
0	int
)	O
&&	O
un	long
==	O
1	int
)	O
{	O
mp_size_t	long
gn	long
;	O
ASSERT	O
(	O
u1	pointer
[	O
0	int
]	O
==	O
1	int
)	O
;	O
gn	long
=	O
mpn_gcdext_lehmer_n	O
(	O
gp	pointer
,	O
up	pointer
,	O
usizep	pointer
,	O
ap	pointer
,	O
bp	pointer
,	O
n	long
,	O
tp	pointer
)	O
;	O
TMP_FREE	O
;	O
return	O
gn	long
;	O
}	O
else	O
{	O
mp_size_t	long
u0n	long
;	O
mp_size_t	long
u1n	long
;	O
mp_size_t	long
lehmer_un	long
;	O
mp_size_t	long
lehmer_vn	long
;	O
mp_size_t	long
gn	long
;	O
mp_ptr	pointer
lehmer_up	pointer
;	O
mp_ptr	pointer
lehmer_vp	pointer
;	O
int	O
negate	int
;	O
lehmer_up	pointer
=	O
tp	pointer
;	O
tp	pointer
+=	O
n	long
;	O
MPN_COPY	O
(	O
tp	pointer
,	O
ap	pointer
,	O
n	long
)	O
;	O
MPN_COPY	O
(	O
tp	pointer
+	O
n	long
,	O
bp	pointer
,	O
n	long
)	O
;	O
gn	long
=	O
mpn_gcdext_lehmer_n	O
(	O
gp	pointer
,	O
lehmer_up	pointer
,	O
&	O
lehmer_un	long
,	O
tp	pointer
,	O
tp	pointer
+	O
n	long
,	O
n	long
,	O
tp	pointer
+	O
2	int
*	O
n	long
)	O
;	O
u0n	long
=	O
un	long
;	O
MPN_NORMALIZE	O
(	O
u0	pointer
,	O
u0n	long
)	O
;	O
ASSERT	O
(	O
u0n	long
>	O
0	int
)	O
;	O
if	O
(	O
lehmer_un	long
==	O
0	int
)	O
{	O
MPN_COPY	O
(	O
up	pointer
,	O
u0	pointer
,	O
u0n	long
)	O
;	O
*	O
usizep	pointer
=	O
-	O
u0n	long
;	O
TMP_FREE	O
;	O
return	O
gn	long
;	O
}	O
lehmer_vp	pointer
=	O
tp	pointer
;	O
lehmer_vn	long
=	O
compute_v	function
(	O
lehmer_vp	pointer
,	O
ap	pointer
,	O
bp	pointer
,	O
n	long
,	O
gp	pointer
,	O
gn	long
,	O
lehmer_up	pointer
,	O
lehmer_un	long
,	O
tp	pointer
+	O
n	long
+	O
1	int
)	O
;	O
if	O
(	O
lehmer_un	long
>	O
0	int
)	O
negate	int
=	O
0	int
;	O
else	O
{	O
lehmer_un	long
=	O
-	O
lehmer_un	long
;	O
negate	int
=	O
1	int
;	O
}	O
u1n	long
=	O
un	long
;	O
MPN_NORMALIZE	O
(	O
u1	pointer
,	O
u1n	long
)	O
;	O
ASSERT	O
(	O
u1n	long
>	O
0	int
)	O
;	O
ASSERT	O
(	O
lehmer_un	long
+	O
u1n	long
<=	O
ualloc	long
)	O
;	O
ASSERT	O
(	O
lehmer_vn	long
+	O
u0n	long
<=	O
ualloc	long
)	O
;	O
if	O
(	O
lehmer_un	long
<=	O
u1n	long
)	O
mpn_mul	O
(	O
up	pointer
,	O
u1	pointer
,	O
u1n	long
,	O
lehmer_up	pointer
,	O
lehmer_un	long
)	O
;	O
else	O
mpn_mul	O
(	O
up	pointer
,	O
lehmer_up	pointer
,	O
lehmer_un	long
,	O
u1	pointer
,	O
u1n	long
)	O
;	O
un	long
=	O
u1n	long
+	O
lehmer_un	long
;	O
un	long
-=	O
(	O
up	pointer
[	O
un	long
-	O
1	int
]	O
==	O
0	int
)	O
;	O
if	O
(	O
lehmer_vn	long
>	O
0	int
)	O
{	O
mp_limb_t	long
cy	long
;	O
if	O
(	O
lehmer_vn	long
<=	O
u0n	long
)	O
mpn_mul	O
(	O
u1	pointer
,	O
u0	pointer
,	O
u0n	long
,	O
lehmer_vp	pointer
,	O
lehmer_vn	long
)	O
;	O
else	O
mpn_mul	O
(	O
u1	pointer
,	O
lehmer_vp	pointer
,	O
lehmer_vn	long
,	O
u0	pointer
,	O
u0n	long
)	O
;	O
u1n	long
=	O
u0n	long
+	O
lehmer_vn	long
;	O
u1n	long
-=	O
(	O
u1	pointer
[	O
u1n	long
-	O
1	int
]	O
==	O
0	int
)	O
;	O
if	O
(	O
u1n	long
<=	O
un	long
)	O
{	O
cy	long
=	O
mpn_add	O
(	O
up	pointer
,	O
up	pointer
,	O
un	long
,	O
u1	pointer
,	O
u1n	long
)	O
;	O
}	O
else	O
{	O
cy	long
=	O
mpn_add	O
(	O
up	pointer
,	O
u1	pointer
,	O
u1n	long
,	O
up	pointer
,	O
un	long
)	O
;	O
un	long
=	O
u1n	long
;	O
}	O
up	pointer
[	O
un	long
]	O
=	O
cy	long
;	O
un	long
+=	O
(	O
cy	long
!=	O
0	int
)	O
;	O
ASSERT	O
(	O
un	long
<	O
ualloc	long
)	O
;	O
}	O
*	O
usizep	pointer
=	O
negate	int
?	O
-	O
un	long
:	O
un	long
;	O
TMP_FREE	O
;	O
return	O
gn	long
;	O
}	O
}	O
