void	O
AlibDrawSegments	function
(	O
Viewport	struct
*	O
v	struct
,	O
Segment	struct
*	O
seg	pointer
,	O
int	O
nseg	int
,	O
Color	short
color	pointer
)	O
{	O
ZInfo	struct
*	O
z	double
;	O
if	O
(	O
v	struct
->	O
ztop	long
==	O
v	struct
->	O
zsize	long
)	O
{	O
printf	function
(	O
"Z-information pool overflow\n"	pointer
)	O
;	O
return	O
;	O
}	O
z	double
=	O
&	O
(	O
v	struct
->	O
zpool	pointer
[	O
(	O
v	struct
->	O
ztop	long
)	O
++	O
]	O
)	O
;	O
z	double
->	O
depth	int
=	O
--	O
v	struct
->	O
depth	int
;	O
z	double
->	O
color	pointer
=	O
color	pointer
;	O
for	O
(	O
;	O
nseg	int
>	O
0	int
;	O
--	O
nseg	int
)	O
{	O
DrawLine	function
(	O
v	struct
->	O
w	pointer
,	O
seg	pointer
->	O
x1	short
,	O
seg	pointer
->	O
y1	function
,	O
seg	pointer
->	O
x2	short
,	O
seg	pointer
->	O
y2	short
,	O
z	double
)	O
;	O
++	O
seg	pointer
;	O
}	O
}	O
void	O
AlibDrawLine	function
(	O
Viewport	struct
*	O
v	struct
,	O
int	O
x1	short
,	O
int	O
y1	function
,	O
int	O
x2	short
,	O
int	O
y2	short
,	O
Color	short
color	pointer
)	O
{	O
ZInfo	struct
*	O
z	double
;	O
if	O
(	O
v	struct
->	O
ztop	long
==	O
v	struct
->	O
zsize	long
)	O
{	O
printf	function
(	O
"Z-information pool overflow\n"	pointer
)	O
;	O
return	O
;	O
}	O
z	double
=	O
&	O
(	O
v	struct
->	O
zpool	pointer
[	O
(	O
v	struct
->	O
ztop	long
)	O
++	O
]	O
)	O
;	O
z	double
->	O
depth	int
=	O
--	O
v	struct
->	O
depth	int
;	O
z	double
->	O
color	pointer
=	O
color	pointer
;	O
DrawLine	function
(	O
v	struct
->	O
w	pointer
,	O
x1	short
,	O
y1	function
,	O
x2	short
,	O
y2	short
,	O
z	double
)	O
;	O
}	O
void	O
AlibFillRectangle	function
(	O
Viewport	struct
*	O
v	struct
,	O
int	O
x	double
,	O
int	O
y	double
,	O
int	O
w	pointer
,	O
int	O
h	int
,	O
Color	short
color	pointer
)	O
{	O
ZInfo	struct
*	O
z	double
;	O
if	O
(	O
v	struct
->	O
ztop	long
==	O
v	struct
->	O
zsize	long
)	O
{	O
printf	function
(	O
"Z-information pool overflow\n"	pointer
)	O
;	O
return	O
;	O
}	O
z	double
=	O
&	O
(	O
v	struct
->	O
zpool	pointer
[	O
(	O
v	struct
->	O
ztop	long
)	O
++	O
]	O
)	O
;	O
z	double
->	O
depth	int
=	O
--	O
v	struct
->	O
depth	int
;	O
z	double
->	O
color	pointer
=	O
color	pointer
;	O
FillRectangle	function
(	O
v	struct
->	O
w	pointer
,	O
x	double
,	O
y	double
,	O
w	pointer
,	O
h	int
,	O
z	double
)	O
;	O
}	O
void	O
AlibSetClipRect	function
(	O
Viewport	struct
*	O
v	struct
,	O
int	O
x1	short
,	O
int	O
y1	function
,	O
int	O
x2	short
,	O
int	O
y2	short
)	O
{	O
if	O
(	O
x2	short
==	O
-	O
1	int
&&	O
y2	short
==	O
-	O
1	int
)	O
{	O
v	struct
->	O
w	pointer
->	O
clip	struct
.	O
x1	short
=	O
0	int
;	O
v	struct
->	O
w	pointer
->	O
clip	struct
.	O
y1	function
=	O
0	int
;	O
v	struct
->	O
w	pointer
->	O
clip	struct
.	O
x2	short
=	O
v	struct
->	O
w	pointer
->	O
width	int
-	O
1	int
;	O
v	struct
->	O
w	pointer
->	O
clip	struct
.	O
y2	short
=	O
v	struct
->	O
w	pointer
->	O
height	int
-	O
1	int
;	O
}	O
else	O
{	O
v	struct
->	O
w	pointer
->	O
clip	struct
.	O
x1	short
=	O
x1	short
;	O
v	struct
->	O
w	pointer
->	O
clip	struct
.	O
y1	function
=	O
y1	function
;	O
v	struct
->	O
w	pointer
->	O
clip	struct
.	O
x2	short
=	O
x2	short
;	O
v	struct
->	O
w	pointer
->	O
clip	struct
.	O
y2	short
=	O
y2	short
;	O
}	O
}	O
void	O
AlibFillPolygon	function
(	O
Viewport	struct
*	O
v	struct
,	O
Window	long
win	long
,	O
GC	pointer
gc	pointer
,	O
VPolygon	struct
*	O
poly	pointer
)	O
{	O
VPoint	struct
*	O
p	pointer
;	O
XPoint	struct
xpt	array
[	O
VmaxVP	int
]	O
,	O
*	O
lastpt	pointer
;	O
register	O
int	O
i	int
,	O
k	int
;	O
Drawable	long
d	long
;	O
ZInfo	struct
*	O
z	double
;	O
if	O
(	O
v	struct
->	O
ztop	long
==	O
v	struct
->	O
zsize	long
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Z-information pool overflow\n"	pointer
)	O
;	O
return	O
;	O
}	O
z	double
=	O
&	O
(	O
v	struct
->	O
zpool	pointer
[	O
(	O
v	struct
->	O
ztop	long
)	O
++	O
]	O
)	O
;	O
d	long
=	O
(	O
v	struct
->	O
flags	short
&	O
VPPixmap	int
)	O
?	O
(	O
Drawable	long
)	O
v	struct
->	O
monoPixmap	long
:	O
(	O
Drawable	long
)	O
win	long
;	O
if	O
(	O
poly	pointer
==	O
(	O
VPolygon	struct
*	O
)	O
NULL	O
)	O
return	O
;	O
k	int
=	O
0	int
;	O
lastpt	pointer
=	O
&	O
xpt	array
[	O
0	int
]	O
;	O
z	double
->	O
depth	int
=	O
--	O
v	struct
->	O
depth	int
;	O
z	double
->	O
color	pointer
=	O
VComputePolygonColor	function
(	O
v	struct
,	O
poly	pointer
)	O
;	O
for	O
(	O
(	O
i	int
=	O
0	int
,	O
p	pointer
=	O
poly	pointer
->	O
vertex	pointer
)	O
;	O
i	int
<	O
poly	pointer
->	O
numVtces	short
;	O
(	O
++	O
i	int
,	O
++	O
p	pointer
)	O
)	O
{	O
if	O
(	O
v	struct
->	O
flags	short
&	O
VPPerspective	int
&&	O
p	pointer
->	O
z	double
!=	O
0.0	int
)	O
{	O
xpt	array
[	O
k	int
]	O
.	O
x	double
=	O
(	O
v	struct
->	O
Middl	struct
.	O
x	double
+	O
(	O
int	O
)	O
(	O
v	struct
->	O
Scale	struct
.	O
x	double
*	O
p	pointer
->	O
x	double
/	O
p	pointer
->	O
z	double
)	O
)	O
>>	O
2	int
;	O
xpt	array
[	O
k	int
]	O
.	O
y	double
=	O
(	O
v	struct
->	O
Middl	struct
.	O
y	double
-	O
(	O
int	O
)	O
(	O
v	struct
->	O
Scale	struct
.	O
y	double
*	O
p	pointer
->	O
y	double
/	O
p	pointer
->	O
z	double
)	O
)	O
>>	O
2	int
;	O
}	O
else	O
{	O
xpt	array
[	O
k	int
]	O
.	O
x	double
=	O
(	O
v	struct
->	O
Middl	struct
.	O
x	double
+	O
(	O
int	O
)	O
(	O
v	struct
->	O
Scale	struct
.	O
x	double
*	O
p	pointer
->	O
x	double
)	O
)	O
>>	O
2	int
;	O
xpt	array
[	O
k	int
]	O
.	O
y	double
=	O
(	O
v	struct
->	O
Middl	struct
.	O
y	double
-	O
(	O
int	O
)	O
(	O
v	struct
->	O
Scale	struct
.	O
y	double
*	O
p	pointer
->	O
y	double
)	O
)	O
>>	O
2	int
;	O
}	O
if	O
(	O
xpt	array
[	O
k	int
]	O
.	O
x	double
>=	O
v	struct
->	O
width	int
)	O
xpt	array
[	O
k	int
]	O
.	O
x	double
=	O
v	struct
->	O
width	int
-	O
1	int
;	O
if	O
(	O
xpt	array
[	O
k	int
]	O
.	O
y	double
>=	O
v	struct
->	O
height	int
)	O
xpt	array
[	O
k	int
]	O
.	O
y	double
=	O
v	struct
->	O
height	int
-	O
1	int
;	O
++	O
k	int
;	O
}	O
if	O
(	O
k	int
>	O
0	int
)	O
{	O
FillPolygon	function
(	O
v	struct
->	O
w	pointer
,	O
xpt	array
,	O
k	int
,	O
z	double
)	O
;	O
}	O
}	O
void	O
AlibExposeBuffer	function
(	O
Viewport	struct
*	O
v	struct
,	O
GC	pointer
gc	pointer
)	O
{	O
if	O
(	O
v	struct
->	O
flags	short
&	O
VPFastAnimation	int
)	O
{	O
v	struct
->	O
ztop	long
=	O
0	int
;	O
v	struct
->	O
depth	int
=	O
MaxDepth	int
;	O
FrameComplete	function
(	O
v	struct
->	O
w	pointer
)	O
;	O
XFlush	function
(	O
v	struct
->	O
dpy	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
v	struct
->	O
flags	short
&	O
VPMono	int
)	O
{	O
XCopyArea	function
(	O
v	struct
->	O
dpy	pointer
,	O
v	struct
->	O
monoPixmap	long
,	O
v	struct
->	O
win	long
,	O
gc	pointer
,	O
0	int
,	O
0	int
,	O
v	struct
->	O
width	int
,	O
v	struct
->	O
height	int
,	O
0	int
,	O
0	int
)	O
;	O
XSetForeground	function
(	O
v	struct
->	O
dpy	pointer
,	O
gc	pointer
,	O
WhitePixel	O
(	O
v	struct
->	O
dpy	pointer
,	O
v	struct
->	O
screen	pointer
)	O
)	O
;	O
XFillRectangle	function
(	O
v	struct
->	O
dpy	pointer
,	O
v	struct
->	O
monoPixmap	long
,	O
gc	pointer
,	O
0	int
,	O
0	int
,	O
v	struct
->	O
width	int
,	O
v	struct
->	O
height	int
)	O
;	O
XSetForeground	function
(	O
v	struct
->	O
dpy	pointer
,	O
gc	pointer
,	O
BlackPixel	O
(	O
v	struct
->	O
dpy	pointer
,	O
v	struct
->	O
screen	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
v	struct
->	O
flags	short
&	O
VPPixmap	int
)	O
{	O
XCopyArea	function
(	O
v	struct
->	O
dpy	pointer
,	O
v	struct
->	O
monoPixmap	long
,	O
v	struct
->	O
win	long
,	O
gc	pointer
,	O
0	int
,	O
0	int
,	O
v	struct
->	O
width	int
,	O
v	struct
->	O
height	int
,	O
0	int
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
v	struct
->	O
set	int
==	O
0	int
)	O
{	O
v	struct
->	O
set	int
=	O
1	int
;	O
XStoreColors	function
(	O
v	struct
->	O
dpy	pointer
,	O
v	struct
->	O
cmap	long
,	O
v	struct
->	O
aColor	array
,	O
v	struct
->	O
colors	int
*	O
v	struct
->	O
colors	int
)	O
;	O
v	struct
->	O
pixel	long
=	O
&	O
(	O
v	struct
->	O
bPixel	array
[	O
0	int
]	O
)	O
;	O
XSetPlaneMask	function
(	O
v	struct
->	O
dpy	pointer
,	O
gc	pointer
,	O
v	struct
->	O
bMask	long
)	O
;	O
v	struct
->	O
mask	long
=	O
v	struct
->	O
bMask	long
;	O
}	O
else	O
{	O
v	struct
->	O
set	int
=	O
0	int
;	O
XStoreColors	function
(	O
v	struct
->	O
dpy	pointer
,	O
v	struct
->	O
cmap	long
,	O
v	struct
->	O
bColor	array
,	O
v	struct
->	O
colors	int
*	O
v	struct
->	O
colors	int
)	O
;	O
v	struct
->	O
pixel	long
=	O
&	O
(	O
v	struct
->	O
aPixel	pointer
[	O
0	int
]	O
)	O
;	O
XSetPlaneMask	function
(	O
v	struct
->	O
dpy	pointer
,	O
gc	pointer
,	O
v	struct
->	O
aMask	long
)	O
;	O
v	struct
->	O
mask	long
=	O
v	struct
->	O
aMask	long
;	O
}	O
XFlush	function
(	O
v	struct
->	O
dpy	pointer
)	O
;	O
}	O
void	O
AlibClose	function
(	O
Viewport	struct
*	O
v	struct
)	O
{	O
CloseAWindow	function
(	O
v	struct
->	O
w	pointer
)	O
;	O
}	O
Status	int
AlibAllocColor	function
(	O
Viewport	struct
*	O
v	struct
,	O
Colormap	long
colormap	long
,	O
XColor	struct
*	O
c	pointer
)	O
{	O
return	O
AAllocColor	function
(	O
v	struct
->	O
w	pointer
,	O
v	struct
->	O
dpy	pointer
,	O
colormap	long
,	O
c	pointer
)	O
;	O
}	O
