extern	O
unsigned	O
char	O
*	O
null	pointer
;	O
extern	O
struct	O
display	struct
*	O
display	struct
,	O
*	O
displays	pointer
;	O
extern	O
struct	O
layer	struct
*	O
flayer	pointer
;	O
extern	O
char	O
*	O
screenencodings	pointer
;	O
extern	O
int	O
cjkwidth	int
;	O
static	O
int	O
encmatch	function
__P	O
(	O
(	O
char	O
*	O
,	O
char	O
*	O
)	O
)	O
;	O
static	O
int	O
recode_char	function
__P	O
(	O
(	O
int	O
,	O
int	O
,	O
int	O
)	O
)	O
;	O
static	O
int	O
recode_char_to_encoding	function
__P	O
(	O
(	O
int	O
,	O
int	O
)	O
)	O
;	O
static	O
void	O
comb_tofront	function
__P	O
(	O
(	O
int	O
,	O
int	O
)	O
)	O
;	O
static	O
int	O
recode_char_dw	function
__P	O
(	O
(	O
int	O
,	O
int	O
*	O
,	O
int	O
,	O
int	O
)	O
)	O
;	O
static	O
int	O
recode_char_dw_to_encoding	function
__P	O
(	O
(	O
int	O
,	O
int	O
*	O
,	O
int	O
)	O
)	O
;	O
struct	O
encoding	int
{	O
char	O
*	O
name	pointer
;	O
char	O
*	O
charsets	pointer
;	O
int	O
deffont	int
;	O
int	O
usegr	int
;	O
int	O
noc1	int
;	O
char	O
*	O
fontlist	pointer
;	O
}	O
;	O
struct	O
encoding	int
encodings	array
[	O
]	O
=	O
{	O
{	O
"C"	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"eucJP"	pointer
,	O
"B\002I\00401"	pointer
,	O
0	int
,	O
1	int
,	O
0	int
,	O
"\002\004I"	pointer
}	O
,	O
{	O
"SJIS"	pointer
,	O
"BIBB01"	pointer
,	O
0	int
,	O
1	int
,	O
1	int
,	O
"\002I"	pointer
}	O
,	O
{	O
"eucKR"	pointer
,	O
"B\003BB01"	pointer
,	O
0	int
,	O
1	int
,	O
0	int
,	O
"\003"	pointer
}	O
,	O
{	O
"eucCN"	pointer
,	O
"B\001BB01"	pointer
,	O
0	int
,	O
1	int
,	O
0	int
,	O
"\001"	pointer
}	O
,	O
{	O
"Big5"	pointer
,	O
"B\030BB01"	pointer
,	O
0	int
,	O
1	int
,	O
0	int
,	O
"\030"	pointer
}	O
,	O
{	O
"KOI8-R"	pointer
,	O
0	int
,	O
0x80	int
|	O
'!'	O
,	O
0	int
,	O
1	int
,	O
0	int
}	O
,	O
{	O
"CP1251"	pointer
,	O
0	int
,	O
0x80	int
|	O
'?'	O
,	O
0	int
,	O
1	int
,	O
0	int
}	O
,	O
{	O
"UTF-8"	pointer
,	O
0	int
,	O
-	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"ISO8859-2"	pointer
,	O
0	int
,	O
0x80	int
|	O
'B'	O
,	O
0	int
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"ISO8859-3"	pointer
,	O
0	int
,	O
0x80	int
|	O
'C'	O
,	O
0	int
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"ISO8859-4"	pointer
,	O
0	int
,	O
0x80	int
|	O
'D'	O
,	O
0	int
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"ISO8859-5"	pointer
,	O
0	int
,	O
0x80	int
|	O
'L'	O
,	O
0	int
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"ISO8859-6"	pointer
,	O
0	int
,	O
0x80	int
|	O
'G'	O
,	O
0	int
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"ISO8859-7"	pointer
,	O
0	int
,	O
0x80	int
|	O
'F'	O
,	O
0	int
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"ISO8859-8"	pointer
,	O
0	int
,	O
0x80	int
|	O
'H'	O
,	O
0	int
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"ISO8859-9"	pointer
,	O
0	int
,	O
0x80	int
|	O
'M'	O
,	O
0	int
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"ISO8859-10"	pointer
,	O
0	int
,	O
0x80	int
|	O
'V'	O
,	O
0	int
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"ISO8859-15"	pointer
,	O
0	int
,	O
0x80	int
|	O
'b'	O
,	O
0	int
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"jis"	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
"\002\004I"	pointer
}	O
,	O
{	O
"GBK"	pointer
,	O
"B\031BB01"	pointer
,	O
0x80	int
|	O
'b'	O
,	O
1	int
,	O
1	int
,	O
"\031"	pointer
}	O
}	O
;	O
static	O
unsigned	O
short	O
builtin_tabs	array
[	O
]	O
[	O
2	int
]	O
=	O
{	O
{	O
0x30	int
,	O
0	int
}	O
,	O
{	O
0x005f	int
,	O
0x25AE	int
}	O
,	O
{	O
0x0060	int
,	O
0x25C6	int
}	O
,	O
{	O
0x0061	int
,	O
0x2592	int
}	O
,	O
{	O
0x0062	int
,	O
0x2409	int
}	O
,	O
{	O
0x0063	int
,	O
0x240C	int
}	O
,	O
{	O
0x0064	int
,	O
0x240D	int
}	O
,	O
{	O
0x0065	int
,	O
0x240A	int
}	O
,	O
{	O
0x0066	int
,	O
0x00B0	int
}	O
,	O
{	O
0x0067	int
,	O
0x00B1	int
}	O
,	O
{	O
0x0068	int
,	O
0x2424	int
}	O
,	O
{	O
0x0069	int
,	O
0x240B	int
}	O
,	O
{	O
0x006a	int
,	O
0x2518	int
}	O
,	O
{	O
0x006b	int
,	O
0x2510	int
}	O
,	O
{	O
0x006c	int
,	O
0x250C	int
}	O
,	O
{	O
0x006d	int
,	O
0x2514	int
}	O
,	O
{	O
0x006e	int
,	O
0x253C	int
}	O
,	O
{	O
0x006f	int
,	O
0x23BA	int
}	O
,	O
{	O
0x0070	int
,	O
0x23BB	int
}	O
,	O
{	O
0x0071	int
,	O
0x2500	int
}	O
,	O
{	O
0x0072	int
,	O
0x23BC	int
}	O
,	O
{	O
0x0073	int
,	O
0x23BD	int
}	O
,	O
{	O
0x0074	int
,	O
0x251C	int
}	O
,	O
{	O
0x0075	int
,	O
0x2524	int
}	O
,	O
{	O
0x0076	int
,	O
0x2534	int
}	O
,	O
{	O
0x0077	int
,	O
0x252C	int
}	O
,	O
{	O
0x0078	int
,	O
0x2502	int
}	O
,	O
{	O
0x0079	int
,	O
0x2264	int
}	O
,	O
{	O
0x007a	int
,	O
0x2265	int
}	O
,	O
{	O
0x007b	int
,	O
0x03C0	int
}	O
,	O
{	O
0x007c	int
,	O
0x2260	int
}	O
,	O
{	O
0x007d	int
,	O
0x00A3	int
}	O
,	O
{	O
0x007e	int
,	O
0x00B7	int
}	O
,	O
{	O
0	int
,	O
0	int
}	O
,	O
{	O
0x34	int
,	O
0	int
}	O
,	O
{	O
0x0023	int
,	O
0x00a3	int
}	O
,	O
{	O
0x0040	int
,	O
0x00be	int
}	O
,	O
{	O
0x005b	int
,	O
0x00ff	int
}	O
,	O
{	O
0x005c	int
,	O
0x00bd	int
}	O
,	O
{	O
0x005d	int
,	O
0x007c	int
}	O
,	O
{	O
0x007b	int
,	O
0x00a8	int
}	O
,	O
{	O
0x007c	int
,	O
0x0066	int
}	O
,	O
{	O
0x007d	int
,	O
0x00bc	int
}	O
,	O
{	O
0x007e	int
,	O
0x00b4	int
}	O
,	O
{	O
0	int
,	O
0	int
}	O
,	O
{	O
0x35	int
,	O
0	int
}	O
,	O
{	O
0x005b	int
,	O
0x00c4	int
}	O
,	O
{	O
0x005c	int
,	O
0x00d6	int
}	O
,	O
{	O
0x005d	int
,	O
0x00c5	int
}	O
,	O
{	O
0x005e	int
,	O
0x00dc	int
}	O
,	O
{	O
0x0060	int
,	O
0x00e9	int
}	O
,	O
{	O
0x007b	int
,	O
0x00e4	int
}	O
,	O
{	O
0x007c	int
,	O
0x00f6	int
}	O
,	O
{	O
0x007d	int
,	O
0x00e5	int
}	O
,	O
{	O
0x007e	int
,	O
0x00fc	int
}	O
,	O
{	O
0	int
,	O
0	int
}	O
,	O
{	O
0x36	int
,	O
0	int
}	O
,	O
{	O
0x0040	int
,	O
0x00c4	int
}	O
,	O
{	O
0x005b	int
,	O
0x00c6	int
}	O
,	O
{	O
0x005c	int
,	O
0x00d8	int
}	O
,	O
{	O
0x005d	int
,	O
0x00c5	int
}	O
,	O
{	O
0x005e	int
,	O
0x00dc	int
}	O
,	O
{	O
0x0060	int
,	O
0x00e4	int
}	O
,	O
{	O
0x007b	int
,	O
0x00e6	int
}	O
,	O
{	O
0x007c	int
,	O
0x00f8	int
}	O
,	O
{	O
0x007d	int
,	O
0x00e5	int
}	O
,	O
{	O
0x007e	int
,	O
0x00fc	int
}	O
,	O
{	O
0	int
,	O
0	int
}	O
,	O
{	O
0x37	int
,	O
0	int
}	O
,	O
{	O
0x0040	int
,	O
0x00c9	int
}	O
,	O
{	O
0x005b	int
,	O
0x00c4	int
}	O
,	O
{	O
0x005c	int
,	O
0x00d6	int
}	O
,	O
{	O
0x005d	int
,	O
0x00c5	int
}	O
,	O
{	O
0x005e	int
,	O
0x00dc	int
}	O
,	O
{	O
0x0060	int
,	O
0x00e9	int
}	O
,	O
{	O
0x007b	int
,	O
0x00e4	int
}	O
,	O
{	O
0x007c	int
,	O
0x00f6	int
}	O
,	O
{	O
0x007d	int
,	O
0x00e5	int
}	O
,	O
{	O
0x007e	int
,	O
0x00fc	int
}	O
,	O
{	O
0	int
,	O
0	int
}	O
,	O
{	O
0x3d	int
,	O
0	int
}	O
,	O
{	O
0x0023	int
,	O
0x00f9	int
}	O
,	O
{	O
0x0040	int
,	O
0x00e0	int
}	O
,	O
{	O
0x005b	int
,	O
0x00e9	int
}	O
,	O
{	O
0x005c	int
,	O
0x00e7	int
}	O
,	O
{	O
0x005d	int
,	O
0x00ea	int
}	O
,	O
{	O
0x005e	int
,	O
0x00ee	int
}	O
,	O
{	O
0x005f	int
,	O
0x00e8	int
}	O
,	O
{	O
0x0060	int
,	O
0x00f4	int
}	O
,	O
{	O
0x007b	int
,	O
0x00e4	int
}	O
,	O
{	O
0x007c	int
,	O
0x00f6	int
}	O
,	O
{	O
0x007d	int
,	O
0x00fc	int
}	O
,	O
{	O
0x007e	int
,	O
0x00fb	int
}	O
,	O
{	O
0	int
,	O
0	int
}	O
,	O
{	O
0x41	int
,	O
0	int
}	O
,	O
{	O
0x0023	int
,	O
0x00a3	int
}	O
,	O
{	O
0	int
,	O
0	int
}	O
,	O
{	O
0x4b	int
,	O
0	int
}	O
,	O
{	O
0x0040	int
,	O
0x00a7	int
}	O
,	O
{	O
0x005b	int
,	O
0x00c4	int
}	O
,	O
{	O
0x005c	int
,	O
0x00d6	int
}	O
,	O
{	O
0x005d	int
,	O
0x00dc	int
}	O
,	O
{	O
0x007b	int
,	O
0x00e4	int
}	O
,	O
{	O
0x007c	int
,	O
0x00f6	int
}	O
,	O
{	O
0x007d	int
,	O
0x00fc	int
}	O
,	O
{	O
0x007e	int
,	O
0x00df	int
}	O
,	O
{	O
0	int
,	O
0	int
}	O
,	O
{	O
0x51	int
,	O
0	int
}	O
,	O
{	O
0x0040	int
,	O
0x00e0	int
}	O
,	O
{	O
0x005b	int
,	O
0x00e2	int
}	O
,	O
{	O
0x005c	int
,	O
0x00e7	int
}	O
,	O
{	O
0x005d	int
,	O
0x00ea	int
}	O
,	O
{	O
0x005e	int
,	O
0x00ee	int
}	O
,	O
{	O
0x0060	int
,	O
0x00f4	int
}	O
,	O
{	O
0x007b	int
,	O
0x00e9	int
}	O
,	O
{	O
0x007c	int
,	O
0x00f9	int
}	O
,	O
{	O
0x007d	int
,	O
0x00e8	int
}	O
,	O
{	O
0x007e	int
,	O
0x00fb	int
}	O
,	O
{	O
0	int
,	O
0	int
}	O
,	O
{	O
0x52	int
,	O
0	int
}	O
,	O
{	O
0x0023	int
,	O
0x00a3	int
}	O
,	O
{	O
0x0040	int
,	O
0x00e0	int
}	O
,	O
{	O
0x005b	int
,	O
0x00b0	int
}	O
,	O
{	O
0x005c	int
,	O
0x00e7	int
}	O
,	O
{	O
0x005d	int
,	O
0x00a7	int
}	O
,	O
{	O
0x007b	int
,	O
0x00e9	int
}	O
,	O
{	O
0x007c	int
,	O
0x00f9	int
}	O
,	O
{	O
0x007d	int
,	O
0x00e8	int
}	O
,	O
{	O
0x007e	int
,	O
0x00a8	int
}	O
,	O
{	O
0	int
,	O
0	int
}	O
,	O
{	O
0x59	int
,	O
0	int
}	O
,	O
{	O
0x0023	int
,	O
0x00a3	int
}	O
,	O
{	O
0x0040	int
,	O
0x00a7	int
}	O
,	O
{	O
0x005b	int
,	O
0x00b0	int
}	O
,	O
{	O
0x005c	int
,	O
0x00e7	int
}	O
,	O
{	O
0x005d	int
,	O
0x00e9	int
}	O
,	O
{	O
0x0060	int
,	O
0x00f9	int
}	O
,	O
{	O
0x007b	int
,	O
0x00e0	int
}	O
,	O
{	O
0x007c	int
,	O
0x00f2	int
}	O
,	O
{	O
0x007d	int
,	O
0x00e8	int
}	O
,	O
{	O
0x007e	int
,	O
0x00ec	int
}	O
,	O
{	O
0	int
,	O
0	int
}	O
,	O
{	O
0x5a	int
,	O
0	int
}	O
,	O
{	O
0x0023	int
,	O
0x00a3	int
}	O
,	O
{	O
0x0040	int
,	O
0x00a7	int
}	O
,	O
{	O
0x005b	int
,	O
0x00a1	int
}	O
,	O
{	O
0x005c	int
,	O
0x00d1	int
}	O
,	O
{	O
0x005d	int
,	O
0x00bf	int
}	O
,	O
{	O
0x007b	int
,	O
0x00b0	int
}	O
,	O
{	O
0x007c	int
,	O
0x00f1	int
}	O
,	O
{	O
0x007d	int
,	O
0x00e7	int
}	O
,	O
{	O
0	int
,	O
0	int
}	O
,	O
{	O
0xe2	int
,	O
0	int
}	O
,	O
{	O
0x00a4	int
,	O
0x20ac	int
}	O
,	O
{	O
0x00a6	int
,	O
0x0160	int
}	O
,	O
{	O
0x00a8	int
,	O
0x0161	int
}	O
,	O
{	O
0x00b4	int
,	O
0x017D	int
}	O
,	O
{	O
0x00b8	int
,	O
0x017E	int
}	O
,	O
{	O
0x00bc	int
,	O
0x0152	int
}	O
,	O
{	O
0x00bd	int
,	O
0x0153	int
}	O
,	O
{	O
0x00be	int
,	O
0x0178	int
}	O
,	O
{	O
0	int
,	O
0	int
}	O
,	O
{	O
0x4a	int
,	O
0	int
}	O
,	O
{	O
0x005c	int
,	O
0x00a5	int
}	O
,	O
{	O
0x007e	int
,	O
0x203e	int
}	O
,	O
{	O
0	int
,	O
0	int
}	O
,	O
{	O
0x49	int
,	O
0	int
}	O
,	O
{	O
0x0021	int
,	O
0xff61	int
}	O
,	O
{	O
0x005f	int
|	O
0x8000	int
,	O
0xff9f	int
}	O
,	O
{	O
0	int
,	O
0	int
}	O
,	O
{	O
0	int
,	O
0	int
}	O
}	O
;	O
struct	O
recodetab	struct
{	O
unsigned	O
short	O
(	O
*	O
tab	pointer
)	O
[	O
2	int
]	O
;	O
int	O
flags	int
;	O
}	O
;	O
static	O
struct	O
recodetab	struct
recodetabs	array
[	O
256	int
]	O
;	O
void	O
InitBuiltinTabs	function
(	O
)	O
{	O
unsigned	O
short	O
(	O
*	O
p	pointer
)	O
[	O
2	int
]	O
;	O
for	O
(	O
p	pointer
=	O
builtin_tabs	array
;	O
(	O
*	O
p	pointer
)	O
[	O
0	int
]	O
;	O
p	pointer
++	O
)	O
{	O
recodetabs	array
[	O
(	O
*	O
p	pointer
)	O
[	O
0	int
]	O
]	O
.	O
flags	int
=	O
RECODETAB_BUILTIN	int
;	O
recodetabs	array
[	O
(	O
*	O
p	pointer
)	O
[	O
0	int
]	O
]	O
.	O
tab	pointer
=	O
p	pointer
+	O
1	int
;	O
p	pointer
++	O
;	O
while	O
(	O
(	O
*	O
p	pointer
)	O
[	O
0	int
]	O
)	O
p	pointer
++	O
;	O
}	O
}	O
static	O
int	O
recode_char	function
(	O
c	int
,	O
to_utf	int
,	O
font	char
)	O
int	O
c	int
,	O
to_utf	int
,	O
font	char
;	O
{	O
int	O
f	int
;	O
unsigned	O
short	O
(	O
*	O
p	pointer
)	O
[	O
2	int
]	O
;	O
if	O
(	O
to_utf	int
)	O
{	O
if	O
(	O
c	int
<	O
256	int
)	O
return	O
c	int
;	O
f	int
=	O
(	O
c	int
>>	O
8	int
)	O
&	O
0xff	int
;	O
c	int
&=	O
0xff	int
;	O
switch	O
(	O
f	int
)	O
{	O
case	O
'C'	O
:	O
f	int
^=	O
(	O
'C'	O
^	O
'5'	O
)	O
;	O
break	O
;	O
case	O
'E'	O
:	O
f	int
^=	O
(	O
'E'	O
^	O
'6'	O
)	O
;	O
break	O
;	O
case	O
'H'	O
:	O
f	int
^=	O
(	O
'H'	O
^	O
'7'	O
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
p	pointer
=	O
recodetabs	array
[	O
f	int
]	O
.	O
tab	pointer
;	O
if	O
(	O
p	pointer
==	O
0	int
&&	O
recodetabs	array
[	O
f	int
]	O
.	O
flags	int
==	O
0	int
)	O
{	O
LoadFontTranslation	function
(	O
f	int
,	O
0	int
)	O
;	O
p	pointer
=	O
recodetabs	array
[	O
f	int
]	O
.	O
tab	pointer
;	O
}	O
if	O
(	O
p	pointer
)	O
for	O
(	O
;	O
(	O
*	O
p	pointer
)	O
[	O
0	int
]	O
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
(	O
p	pointer
[	O
0	int
]	O
[	O
0	int
]	O
&	O
0x8000	int
)	O
&&	O
(	O
c	int
<=	O
(	O
p	pointer
[	O
0	int
]	O
[	O
0	int
]	O
&	O
0x7fff	int
)	O
)	O
&&	O
c	int
>=	O
p	pointer
[	O
-	O
1	int
]	O
[	O
0	int
]	O
)	O
return	O
c	int
-	O
p	pointer
[	O
-	O
1	int
]	O
[	O
0	int
]	O
+	O
p	pointer
[	O
-	O
1	int
]	O
[	O
1	int
]	O
;	O
if	O
(	O
(	O
*	O
p	pointer
)	O
[	O
0	int
]	O
==	O
c	int
)	O
return	O
(	O
*	O
p	pointer
)	O
[	O
1	int
]	O
;	O
}	O
return	O
c	int
&	O
0xff	int
;	O
}	O
if	O
(	O
font	char
==	O
-	O
1	int
)	O
{	O
if	O
(	O
c	int
<	O
256	int
)	O
return	O
c	int
;	O
for	O
(	O
font	char
=	O
32	int
;	O
font	char
<	O
128	int
;	O
font	char
++	O
)	O
{	O
p	pointer
=	O
recodetabs	array
[	O
font	char
]	O
.	O
tab	pointer
;	O
if	O
(	O
p	pointer
)	O
for	O
(	O
;	O
(	O
*	O
p	pointer
)	O
[	O
1	int
]	O
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
(	O
p	pointer
[	O
0	int
]	O
[	O
0	int
]	O
&	O
0x8000	int
)	O
&&	O
c	int
<=	O
p	pointer
[	O
0	int
]	O
[	O
1	int
]	O
&&	O
c	int
>=	O
p	pointer
[	O
-	O
1	int
]	O
[	O
1	int
]	O
)	O
return	O
(	O
c	int
-	O
p	pointer
[	O
-	O
1	int
]	O
[	O
1	int
]	O
+	O
p	pointer
[	O
-	O
1	int
]	O
[	O
0	int
]	O
)	O
|	O
(	O
font	char
<<	O
8	int
)	O
;	O
if	O
(	O
(	O
*	O
p	pointer
)	O
[	O
1	int
]	O
==	O
c	int
)	O
return	O
(	O
*	O
p	pointer
)	O
[	O
0	int
]	O
|	O
(	O
font	char
<<	O
8	int
)	O
;	O
}	O
}	O
return	O
'?'	O
;	O
}	O
if	O
(	O
c	int
<	O
128	int
&&	O
(	O
font	char
&	O
128	int
)	O
!=	O
0	int
)	O
return	O
c	int
;	O
if	O
(	O
font	char
>=	O
32	int
)	O
{	O
p	pointer
=	O
recodetabs	array
[	O
font	char
]	O
.	O
tab	pointer
;	O
if	O
(	O
p	pointer
==	O
0	int
&&	O
recodetabs	array
[	O
font	char
]	O
.	O
flags	int
==	O
0	int
)	O
{	O
LoadFontTranslation	function
(	O
font	char
,	O
0	int
)	O
;	O
p	pointer
=	O
recodetabs	array
[	O
font	char
]	O
.	O
tab	pointer
;	O
}	O
if	O
(	O
p	pointer
)	O
for	O
(	O
;	O
(	O
*	O
p	pointer
)	O
[	O
1	int
]	O
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
(	O
p	pointer
[	O
0	int
]	O
[	O
0	int
]	O
&	O
0x8000	int
)	O
&&	O
c	int
<=	O
p	pointer
[	O
0	int
]	O
[	O
1	int
]	O
&&	O
c	int
>=	O
p	pointer
[	O
-	O
1	int
]	O
[	O
1	int
]	O
)	O
return	O
(	O
c	int
-	O
p	pointer
[	O
-	O
1	int
]	O
[	O
1	int
]	O
+	O
p	pointer
[	O
-	O
1	int
]	O
[	O
0	int
]	O
)	O
|	O
(	O
font	char
&	O
128	int
?	O
0	int
:	O
font	char
<<	O
8	int
)	O
;	O
if	O
(	O
(	O
*	O
p	pointer
)	O
[	O
1	int
]	O
==	O
c	int
)	O
return	O
(	O
*	O
p	pointer
)	O
[	O
0	int
]	O
|	O
(	O
font	char
&	O
128	int
?	O
0	int
:	O
font	char
<<	O
8	int
)	O
;	O
}	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
recode_char_dw	function
(	O
c	int
,	O
c2p	pointer
,	O
to_utf	int
,	O
font	char
)	O
int	O
c	int
,	O
*	O
c2p	pointer
,	O
to_utf	int
,	O
font	char
;	O
{	O
int	O
f	int
;	O
unsigned	O
short	O
(	O
*	O
p	pointer
)	O
[	O
2	int
]	O
;	O
if	O
(	O
to_utf	int
)	O
{	O
f	int
=	O
(	O
c	int
>>	O
8	int
)	O
&	O
0xff	int
;	O
c	int
=	O
(	O
c	int
&	O
255	int
)	O
<<	O
8	int
|	O
(	O
*	O
c2p	pointer
&	O
255	int
)	O
;	O
*	O
c2p	pointer
=	O
0xffff	int
;	O
p	pointer
=	O
recodetabs	array
[	O
f	int
]	O
.	O
tab	pointer
;	O
if	O
(	O
p	pointer
==	O
0	int
&&	O
recodetabs	array
[	O
f	int
]	O
.	O
flags	int
==	O
0	int
)	O
{	O
LoadFontTranslation	function
(	O
f	int
,	O
0	int
)	O
;	O
p	pointer
=	O
recodetabs	array
[	O
f	int
]	O
.	O
tab	pointer
;	O
}	O
if	O
(	O
p	pointer
)	O
for	O
(	O
;	O
(	O
*	O
p	pointer
)	O
[	O
0	int
]	O
;	O
p	pointer
++	O
)	O
if	O
(	O
(	O
*	O
p	pointer
)	O
[	O
0	int
]	O
==	O
c	int
)	O
{	O
if	O
(	O
!	O
utf8_isdouble	function
(	O
(	O
*	O
p	pointer
)	O
[	O
1	int
]	O
)	O
)	O
*	O
c2p	pointer
=	O
' '	O
;	O
return	O
(	O
*	O
p	pointer
)	O
[	O
1	int
]	O
;	O
}	O
return	O
UCS_REPL_DW	int
;	O
}	O
if	O
(	O
font	char
==	O
-	O
1	int
)	O
{	O
for	O
(	O
font	char
=	O
0	int
;	O
font	char
<	O
030	int
;	O
font	char
++	O
)	O
{	O
p	pointer
=	O
recodetabs	array
[	O
font	char
]	O
.	O
tab	pointer
;	O
if	O
(	O
p	pointer
)	O
for	O
(	O
;	O
(	O
*	O
p	pointer
)	O
[	O
1	int
]	O
;	O
p	pointer
++	O
)	O
if	O
(	O
(	O
*	O
p	pointer
)	O
[	O
1	int
]	O
==	O
c	int
)	O
{	O
*	O
c2p	pointer
=	O
(	O
(	O
*	O
p	pointer
)	O
[	O
0	int
]	O
&	O
255	int
)	O
|	O
font	char
<<	O
8	int
|	O
0x8000	int
;	O
return	O
(	O
(	O
*	O
p	pointer
)	O
[	O
0	int
]	O
>>	O
8	int
)	O
|	O
font	char
<<	O
8	int
;	O
}	O
}	O
*	O
c2p	pointer
=	O
'?'	O
;	O
return	O
'?'	O
;	O
}	O
if	O
(	O
font	char
<	O
32	int
)	O
{	O
p	pointer
=	O
recodetabs	array
[	O
font	char
]	O
.	O
tab	pointer
;	O
if	O
(	O
p	pointer
==	O
0	int
&&	O
recodetabs	array
[	O
font	char
]	O
.	O
flags	int
==	O
0	int
)	O
{	O
LoadFontTranslation	function
(	O
font	char
,	O
0	int
)	O
;	O
p	pointer
=	O
recodetabs	array
[	O
font	char
]	O
.	O
tab	pointer
;	O
}	O
if	O
(	O
p	pointer
)	O
for	O
(	O
;	O
(	O
*	O
p	pointer
)	O
[	O
1	int
]	O
;	O
p	pointer
++	O
)	O
if	O
(	O
(	O
*	O
p	pointer
)	O
[	O
1	int
]	O
==	O
c	int
)	O
{	O
*	O
c2p	pointer
=	O
(	O
(	O
*	O
p	pointer
)	O
[	O
0	int
]	O
&	O
255	int
)	O
|	O
font	char
<<	O
8	int
|	O
0x8000	int
;	O
return	O
(	O
(	O
*	O
p	pointer
)	O
[	O
0	int
]	O
>>	O
8	int
)	O
|	O
font	char
<<	O
8	int
;	O
}	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
recode_char_to_encoding	function
(	O
c	int
,	O
encoding	int
)	O
int	O
c	int
,	O
encoding	int
;	O
{	O
char	O
*	O
fp	pointer
;	O
int	O
x	int
;	O
if	O
(	O
encoding	int
==	O
UTF8	int
)	O
return	O
recode_char	function
(	O
c	int
,	O
1	int
,	O
-	O
1	int
)	O
;	O
if	O
(	O
(	O
fp	pointer
=	O
encodings	array
[	O
encoding	int
]	O
.	O
fontlist	pointer
)	O
!=	O
0	int
)	O
while	O
(	O
*	O
fp	pointer
)	O
if	O
(	O
(	O
x	int
=	O
recode_char	function
(	O
c	int
,	O
0	int
,	O
(	O
unsigned	O
char	O
)	O
*	O
fp	pointer
++	O
)	O
)	O
!=	O
-	O
1	int
)	O
return	O
x	int
;	O
if	O
(	O
encodings	array
[	O
encoding	int
]	O
.	O
deffont	int
)	O
if	O
(	O
(	O
x	int
=	O
recode_char	function
(	O
c	int
,	O
0	int
,	O
encodings	array
[	O
encoding	int
]	O
.	O
deffont	int
)	O
)	O
!=	O
-	O
1	int
)	O
return	O
x	int
;	O
return	O
recode_char	function
(	O
c	int
,	O
0	int
,	O
-	O
1	int
)	O
;	O
}	O
static	O
int	O
recode_char_dw_to_encoding	function
(	O
c	int
,	O
c2p	pointer
,	O
encoding	int
)	O
int	O
c	int
,	O
*	O
c2p	pointer
,	O
encoding	int
;	O
{	O
char	O
*	O
fp	pointer
;	O
int	O
x	int
;	O
if	O
(	O
encoding	int
==	O
UTF8	int
)	O
return	O
recode_char_dw	function
(	O
c	int
,	O
c2p	pointer
,	O
1	int
,	O
-	O
1	int
)	O
;	O
if	O
(	O
(	O
fp	pointer
=	O
encodings	array
[	O
encoding	int
]	O
.	O
fontlist	pointer
)	O
!=	O
0	int
)	O
while	O
(	O
*	O
fp	pointer
)	O
if	O
(	O
(	O
x	int
=	O
recode_char_dw	function
(	O
c	int
,	O
c2p	pointer
,	O
0	int
,	O
(	O
unsigned	O
char	O
)	O
*	O
fp	pointer
++	O
)	O
)	O
!=	O
-	O
1	int
)	O
return	O
x	int
;	O
if	O
(	O
encodings	array
[	O
encoding	int
]	O
.	O
deffont	int
)	O
if	O
(	O
(	O
x	int
=	O
recode_char_dw	function
(	O
c	int
,	O
c2p	pointer
,	O
0	int
,	O
encodings	array
[	O
encoding	int
]	O
.	O
deffont	int
)	O
)	O
!=	O
-	O
1	int
)	O
return	O
x	int
;	O
return	O
recode_char_dw	function
(	O
c	int
,	O
c2p	pointer
,	O
0	int
,	O
-	O
1	int
)	O
;	O
}	O
struct	O
mchar	struct
*	O
recode_mchar	function
(	O
mc	pointer
,	O
from	int
,	O
to	int
)	O
struct	O
mchar	struct
*	O
mc	pointer
;	O
int	O
from	int
,	O
to	int
;	O
{	O
static	O
struct	O
mchar	struct
rmc	struct
;	O
int	O
c	int
;	O
debug3	O
(	O
"recode_mchar %02x from %d to %d\n"	pointer
,	O
mc	pointer
->	O
image	char
,	O
from	int
,	O
to	int
)	O
;	O
if	O
(	O
from	int
==	O
to	int
||	O
(	O
from	int
!=	O
UTF8	int
&&	O
to	int
!=	O
UTF8	int
)	O
)	O
return	O
mc	pointer
;	O
rmc	struct
=	O
*	O
mc	pointer
;	O
if	O
(	O
rmc	struct
.	O
font	char
==	O
0	int
&&	O
from	int
!=	O
UTF8	int
)	O
rmc	struct
.	O
font	char
=	O
encodings	array
[	O
from	int
]	O
.	O
deffont	int
;	O
if	O
(	O
rmc	struct
.	O
font	char
==	O
0	int
)	O
return	O
mc	pointer
;	O
c	int
=	O
rmc	struct
.	O
image	char
|	O
(	O
rmc	struct
.	O
font	char
<<	O
8	int
)	O
;	O
if	O
(	O
from	int
==	O
UTF8	int
)	O
c	int
|=	O
rmc	struct
.	O
fontx	char
<<	O
16	int
;	O
if	O
(	O
rmc	struct
.	O
mbcs	char
)	O
{	O
int	O
c2	int
=	O
rmc	struct
.	O
mbcs	char
;	O
c	int
=	O
recode_char_dw_to_encoding	function
(	O
c	int
,	O
&	O
c2	int
,	O
to	int
)	O
;	O
rmc	struct
.	O
mbcs	char
=	O
c2	int
;	O
}	O
else	O
c	int
=	O
recode_char_to_encoding	function
(	O
c	int
,	O
to	int
)	O
;	O
rmc	struct
.	O
image	char
=	O
c	int
&	O
255	int
;	O
rmc	struct
.	O
font	char
=	O
c	int
>>	O
8	int
&	O
255	int
;	O
if	O
(	O
to	int
==	O
UTF8	int
)	O
rmc	struct
.	O
fontx	char
=	O
c	int
>>	O
16	int
&	O
255	int
;	O
return	O
&	O
rmc	struct
;	O
}	O
struct	O
mline	struct
*	O
recode_mline	function
(	O
ml	pointer
,	O
w	int
,	O
from	int
,	O
to	int
)	O
struct	O
mline	struct
*	O
ml	pointer
;	O
int	O
w	int
;	O
int	O
from	int
,	O
to	int
;	O
{	O
static	O
int	O
maxlen	int
;	O
static	O
int	O
last	int
;	O
static	O
struct	O
mline	struct
rml	array
[	O
2	int
]	O
,	O
*	O
rl	pointer
;	O
int	O
i	int
,	O
c	int
;	O
if	O
(	O
from	int
==	O
to	int
||	O
(	O
from	int
!=	O
UTF8	int
&&	O
to	int
!=	O
UTF8	int
)	O
||	O
w	int
==	O
0	int
)	O
return	O
ml	pointer
;	O
if	O
(	O
ml	pointer
->	O
font	char
==	O
null	pointer
&&	O
ml	pointer
->	O
fontx	char
==	O
null	pointer
&&	O
encodings	array
[	O
from	int
]	O
.	O
deffont	int
==	O
0	int
)	O
return	O
ml	pointer
;	O
if	O
(	O
w	int
>	O
maxlen	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
2	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
rml	array
[	O
i	int
]	O
.	O
image	char
==	O
0	int
)	O
rml	array
[	O
i	int
]	O
.	O
image	char
=	O
malloc	function
(	O
w	int
)	O
;	O
else	O
rml	array
[	O
i	int
]	O
.	O
image	char
=	O
realloc	function
(	O
rml	array
[	O
i	int
]	O
.	O
image	char
,	O
w	int
)	O
;	O
if	O
(	O
rml	array
[	O
i	int
]	O
.	O
font	char
==	O
0	int
)	O
rml	array
[	O
i	int
]	O
.	O
font	char
=	O
malloc	function
(	O
w	int
)	O
;	O
else	O
rml	array
[	O
i	int
]	O
.	O
font	char
=	O
realloc	function
(	O
rml	array
[	O
i	int
]	O
.	O
font	char
,	O
w	int
)	O
;	O
if	O
(	O
rml	array
[	O
i	int
]	O
.	O
fontx	char
==	O
0	int
)	O
rml	array
[	O
i	int
]	O
.	O
fontx	char
=	O
malloc	function
(	O
w	int
)	O
;	O
else	O
rml	array
[	O
i	int
]	O
.	O
fontx	char
=	O
realloc	function
(	O
rml	array
[	O
i	int
]	O
.	O
fontx	char
,	O
w	int
)	O
;	O
if	O
(	O
rml	array
[	O
i	int
]	O
.	O
image	char
==	O
0	int
||	O
rml	array
[	O
i	int
]	O
.	O
font	char
==	O
0	int
||	O
rml	array
[	O
i	int
]	O
.	O
fontx	char
==	O
0	int
)	O
{	O
maxlen	int
=	O
0	int
;	O
return	O
ml	pointer
;	O
}	O
}	O
maxlen	int
=	O
w	int
;	O
}	O
debug	O
(	O
"recode_mline: from\n"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
w	int
;	O
i	int
++	O
)	O
debug1	O
(	O
"%c"	pointer
,	O
"0123456789abcdef"	pointer
[	O
(	O
ml	pointer
->	O
image	char
[	O
i	int
]	O
>>	O
4	int
)	O
&	O
15	int
]	O
)	O
;	O
debug	O
(	O
"\n"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
w	int
;	O
i	int
++	O
)	O
debug1	O
(	O
"%c"	pointer
,	O
"0123456789abcdef"	pointer
[	O
(	O
ml	pointer
->	O
image	char
[	O
i	int
]	O
)	O
&	O
15	int
]	O
)	O
;	O
debug	O
(	O
"\n"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
w	int
;	O
i	int
++	O
)	O
debug1	O
(	O
"%c"	pointer
,	O
"0123456789abcdef"	pointer
[	O
(	O
ml	pointer
->	O
font	char
[	O
i	int
]	O
>>	O
4	int
)	O
&	O
15	int
]	O
)	O
;	O
debug	O
(	O
"\n"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
w	int
;	O
i	int
++	O
)	O
debug1	O
(	O
"%c"	pointer
,	O
"0123456789abcdef"	pointer
[	O
(	O
ml	pointer
->	O
font	char
[	O
i	int
]	O
)	O
&	O
15	int
]	O
)	O
;	O
debug	O
(	O
"\n"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
w	int
;	O
i	int
++	O
)	O
debug1	O
(	O
"%c"	pointer
,	O
"0123456789abcdef"	pointer
[	O
(	O
ml	pointer
->	O
fontx	char
[	O
i	int
]	O
>>	O
4	int
)	O
&	O
15	int
]	O
)	O
;	O
debug	O
(	O
"\n"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
w	int
;	O
i	int
++	O
)	O
debug1	O
(	O
"%c"	pointer
,	O
"0123456789abcdef"	pointer
[	O
(	O
ml	pointer
->	O
fontx	char
[	O
i	int
]	O
)	O
&	O
15	int
]	O
)	O
;	O
debug	O
(	O
"\n"	pointer
)	O
;	O
rl	pointer
=	O
rml	array
+	O
last	int
;	O
rl	pointer
->	O
attr	char
=	O
ml	pointer
->	O
attr	char
;	O
rl	pointer
->	O
color	char
=	O
ml	pointer
->	O
color	char
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
w	int
;	O
i	int
++	O
)	O
{	O
c	int
=	O
ml	pointer
->	O
image	char
[	O
i	int
]	O
|	O
(	O
ml	pointer
->	O
font	char
[	O
i	int
]	O
<<	O
8	int
)	O
;	O
if	O
(	O
from	int
==	O
UTF8	int
)	O
c	int
|=	O
ml	pointer
->	O
fontx	char
[	O
i	int
]	O
<<	O
16	int
;	O
if	O
(	O
from	int
!=	O
UTF8	int
&&	O
c	int
<	O
256	int
)	O
c	int
|=	O
encodings	array
[	O
from	int
]	O
.	O
deffont	int
<<	O
8	int
;	O
if	O
(	O
(	O
from	int
!=	O
UTF8	int
&&	O
(	O
c	int
&	O
0x1f00	int
)	O
!=	O
0	int
&&	O
(	O
c	int
&	O
0xe000	int
)	O
==	O
0	int
)	O
||	O
(	O
from	int
==	O
UTF8	int
&&	O
utf8_isdouble	function
(	O
c	int
)	O
)	O
)	O
{	O
if	O
(	O
i	int
+	O
1	int
==	O
w	int
)	O
c	int
=	O
'?'	O
;	O
else	O
{	O
int	O
c2	int
;	O
i	int
++	O
;	O
c2	int
=	O
ml	pointer
->	O
image	char
[	O
i	int
]	O
|	O
(	O
ml	pointer
->	O
font	char
[	O
i	int
]	O
<<	O
8	int
)	O
;	O
c	int
=	O
recode_char_dw_to_encoding	function
(	O
c	int
,	O
&	O
c2	int
,	O
to	int
)	O
;	O
if	O
(	O
to	int
==	O
UTF8	int
)	O
rl	pointer
->	O
fontx	char
[	O
i	int
-	O
1	int
]	O
=	O
c	int
>>	O
16	int
&	O
255	int
;	O
rl	pointer
->	O
font	char
[	O
i	int
-	O
1	int
]	O
=	O
c	int
>>	O
8	int
&	O
255	int
;	O
rl	pointer
->	O
image	char
[	O
i	int
-	O
1	int
]	O
=	O
c	int
&	O
255	int
;	O
c	int
=	O
c2	int
;	O
}	O
}	O
else	O
c	int
=	O
recode_char_to_encoding	function
(	O
c	int
,	O
to	int
)	O
;	O
rl	pointer
->	O
image	char
[	O
i	int
]	O
=	O
c	int
&	O
255	int
;	O
rl	pointer
->	O
font	char
[	O
i	int
]	O
=	O
c	int
>>	O
8	int
&	O
255	int
;	O
if	O
(	O
to	int
==	O
UTF8	int
)	O
rl	pointer
->	O
fontx	char
[	O
i	int
]	O
=	O
c	int
>>	O
16	int
&	O
255	int
;	O
}	O
last	int
^=	O
1	int
;	O
debug	O
(	O
"recode_mline: to\n"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
w	int
;	O
i	int
++	O
)	O
debug1	O
(	O
"%c"	pointer
,	O
"0123456789abcdef"	pointer
[	O
(	O
rl	pointer
->	O
image	char
[	O
i	int
]	O
>>	O
4	int
)	O
&	O
15	int
]	O
)	O
;	O
debug	O
(	O
"\n"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
w	int
;	O
i	int
++	O
)	O
debug1	O
(	O
"%c"	pointer
,	O
"0123456789abcdef"	pointer
[	O
(	O
rl	pointer
->	O
image	char
[	O
i	int
]	O
)	O
&	O
15	int
]	O
)	O
;	O
debug	O
(	O
"\n"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
w	int
;	O
i	int
++	O
)	O
debug1	O
(	O
"%c"	pointer
,	O
"0123456789abcdef"	pointer
[	O
(	O
rl	pointer
->	O
font	char
[	O
i	int
]	O
>>	O
4	int
)	O
&	O
15	int
]	O
)	O
;	O
debug	O
(	O
"\n"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
w	int
;	O
i	int
++	O
)	O
debug1	O
(	O
"%c"	pointer
,	O
"0123456789abcdef"	pointer
[	O
(	O
rl	pointer
->	O
font	char
[	O
i	int
]	O
)	O
&	O
15	int
]	O
)	O
;	O
debug	O
(	O
"\n"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
w	int
;	O
i	int
++	O
)	O
debug1	O
(	O
"%c"	pointer
,	O
"0123456789abcdef"	pointer
[	O
(	O
rl	pointer
->	O
fontx	char
[	O
i	int
]	O
>>	O
4	int
)	O
&	O
15	int
]	O
)	O
;	O
debug	O
(	O
"\n"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
w	int
;	O
i	int
++	O
)	O
debug1	O
(	O
"%c"	pointer
,	O
"0123456789abcdef"	pointer
[	O
(	O
rl	pointer
->	O
fontx	char
[	O
i	int
]	O
)	O
&	O
15	int
]	O
)	O
;	O
debug	O
(	O
"\n"	pointer
)	O
;	O
return	O
rl	pointer
;	O
}	O
struct	O
combchar	struct
{	O
unsigned	O
int	O
c1	int
;	O
unsigned	O
int	O
c2	int
;	O
unsigned	O
int	O
next	pointer
;	O
unsigned	O
int	O
prev	int
;	O
}	O
;	O
struct	O
combchar	struct
*	O
*	O
combchars	pointer
;	O
void	O
AddUtf8	function
(	O
c	int
)	O
int	O
c	int
;	O
{	O
ASSERT	O
(	O
D_encoding	O
==	O
UTF8	int
)	O
;	O
if	O
(	O
c	int
>=	O
0xd800	int
&&	O
c	int
<	O
0xe000	int
&&	O
combchars	pointer
&&	O
combchars	pointer
[	O
c	int
-	O
0xd800	int
]	O
)	O
{	O
AddUtf8	function
(	O
combchars	pointer
[	O
c	int
-	O
0xd800	int
]	O
->	O
c1	int
)	O
;	O
c	int
=	O
combchars	pointer
[	O
c	int
-	O
0xd800	int
]	O
->	O
c2	int
;	O
}	O
if	O
(	O
c	int
>=	O
0x10000	int
)	O
{	O
if	O
(	O
c	int
>=	O
0x200000	int
)	O
{	O
AddChar	O
(	O
(	O
c	int
&	O
0x3000000	int
)	O
>>	O
12	int
^	O
0xf8	int
)	O
;	O
c	int
=	O
(	O
c	int
&	O
0xffffff	int
)	O
^	O
(	O
(	O
0xf0	int
^	O
0x80	int
)	O
<<	O
18	int
)	O
;	O
}	O
AddChar	O
(	O
(	O
c	int
&	O
0x1fc0000	int
)	O
>>	O
18	int
^	O
0xf0	int
)	O
;	O
c	int
=	O
(	O
c	int
&	O
0x3ffff	int
)	O
^	O
(	O
(	O
0xe0	int
^	O
0x80	int
)	O
<<	O
12	int
)	O
;	O
}	O
if	O
(	O
c	int
>=	O
0x800	int
)	O
{	O
AddChar	O
(	O
(	O
c	int
&	O
0x7f000	int
)	O
>>	O
12	int
^	O
0xe0	int
)	O
;	O
c	int
=	O
(	O
c	int
&	O
0x0fff	int
)	O
^	O
(	O
(	O
0xc0	int
^	O
0x80	int
)	O
<<	O
6	int
)	O
;	O
}	O
if	O
(	O
c	int
>=	O
0x80	int
)	O
{	O
AddChar	O
(	O
(	O
c	int
&	O
0x1fc0	int
)	O
>>	O
6	int
^	O
0xc0	int
)	O
;	O
c	int
=	O
(	O
c	int
&	O
0x3f	int
)	O
|	O
0x80	int
;	O
}	O
AddChar	O
(	O
c	int
)	O
;	O
}	O
int	O
ToUtf8_comb	function
(	O
p	pointer
,	O
c	int
)	O
char	O
*	O
p	pointer
;	O
int	O
c	int
;	O
{	O
int	O
l	int
;	O
if	O
(	O
c	int
>=	O
0xd800	int
&&	O
c	int
<	O
0xe000	int
&&	O
combchars	pointer
&&	O
combchars	pointer
[	O
c	int
-	O
0xd800	int
]	O
)	O
{	O
l	int
=	O
ToUtf8_comb	function
(	O
p	pointer
,	O
combchars	pointer
[	O
c	int
-	O
0xd800	int
]	O
->	O
c1	int
)	O
;	O
return	O
l	int
+	O
ToUtf8	function
(	O
p	pointer
?	O
p	pointer
+	O
l	int
:	O
0	int
,	O
combchars	pointer
[	O
c	int
-	O
0xd800	int
]	O
->	O
c2	int
)	O
;	O
}	O
return	O
ToUtf8	function
(	O
p	pointer
,	O
c	int
)	O
;	O
}	O
int	O
ToUtf8	function
(	O
p	pointer
,	O
c	int
)	O
char	O
*	O
p	pointer
;	O
int	O
c	int
;	O
{	O
int	O
l	int
=	O
1	int
;	O
if	O
(	O
c	int
>=	O
0x10000	int
)	O
{	O
if	O
(	O
c	int
>=	O
0x200000	int
)	O
{	O
if	O
(	O
p	pointer
)	O
*	O
p	pointer
++	O
=	O
(	O
c	int
&	O
0x3000000	int
)	O
>>	O
12	int
^	O
0xf8	int
;	O
l	int
++	O
;	O
c	int
=	O
(	O
c	int
&	O
0xffffff	int
)	O
^	O
(	O
(	O
0xf0	int
^	O
0x80	int
)	O
<<	O
18	int
)	O
;	O
}	O
if	O
(	O
p	pointer
)	O
*	O
p	pointer
++	O
=	O
(	O
c	int
&	O
0x1fc0000	int
)	O
>>	O
18	int
^	O
0xf0	int
;	O
l	int
++	O
;	O
c	int
=	O
(	O
c	int
&	O
0x3ffff	int
)	O
^	O
(	O
(	O
0xe0	int
^	O
0x80	int
)	O
<<	O
12	int
)	O
;	O
}	O
if	O
(	O
c	int
>=	O
0x800	int
)	O
{	O
if	O
(	O
p	pointer
)	O
*	O
p	pointer
++	O
=	O
(	O
c	int
&	O
0x7f000	int
)	O
>>	O
12	int
^	O
0xe0	int
;	O
l	int
++	O
;	O
c	int
=	O
(	O
c	int
&	O
0x0fff	int
)	O
|	O
0x1000	int
;	O
}	O
if	O
(	O
c	int
>=	O
0x80	int
)	O
{	O
if	O
(	O
p	pointer
)	O
*	O
p	pointer
++	O
=	O
(	O
c	int
&	O
0x1fc0	int
)	O
>>	O
6	int
^	O
0xc0	int
;	O
l	int
++	O
;	O
c	int
=	O
(	O
c	int
&	O
0x3f	int
)	O
|	O
0x80	int
;	O
}	O
if	O
(	O
p	pointer
)	O
*	O
p	pointer
++	O
=	O
c	int
;	O
return	O
l	int
;	O
}	O
int	O
FromUtf8	function
(	O
c	int
,	O
utf8charp	pointer
)	O
int	O
c	int
,	O
*	O
utf8charp	pointer
;	O
{	O
int	O
utf8char	int
=	O
*	O
utf8charp	pointer
;	O
if	O
(	O
utf8char	int
)	O
{	O
if	O
(	O
(	O
c	int
&	O
0xc0	int
)	O
!=	O
0x80	int
)	O
{	O
*	O
utf8charp	pointer
=	O
0	int
;	O
return	O
-	O
2	int
;	O
}	O
else	O
c	int
=	O
(	O
c	int
&	O
0x3f	int
)	O
|	O
(	O
utf8char	int
<<	O
6	int
)	O
;	O
if	O
(	O
!	O
(	O
utf8char	int
&	O
0x40000000	int
)	O
)	O
{	O
if	O
(	O
(	O
c	int
&	O
0x820823e0	int
)	O
==	O
0x80000000	int
)	O
c	int
=	O
0xfdffffff	int
;	O
else	O
if	O
(	O
(	O
c	int
&	O
0x020821f0	int
)	O
==	O
0x02000000	int
)	O
c	int
=	O
0xfff7ffff	int
;	O
else	O
if	O
(	O
(	O
c	int
&	O
0x000820f8	int
)	O
==	O
0x00080000	int
)	O
c	int
=	O
0xffffd000	int
;	O
else	O
if	O
(	O
(	O
c	int
&	O
0x0000207c	int
)	O
==	O
0x00002000	int
)	O
c	int
=	O
0xffffff70	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
c	int
>=	O
0xfe	int
)	O
c	int
=	O
UCS_REPL	int
;	O
else	O
if	O
(	O
c	int
>=	O
0xfc	int
)	O
c	int
=	O
(	O
c	int
&	O
0x01	int
)	O
|	O
0xbffffffc	int
;	O
else	O
if	O
(	O
c	int
>=	O
0xf8	int
)	O
c	int
=	O
(	O
c	int
&	O
0x03	int
)	O
|	O
0xbfffff00	int
;	O
else	O
if	O
(	O
c	int
>=	O
0xf0	int
)	O
c	int
=	O
(	O
c	int
&	O
0x07	int
)	O
|	O
0xbfffc000	int
;	O
else	O
if	O
(	O
c	int
>=	O
0xe0	int
)	O
c	int
=	O
(	O
c	int
&	O
0x0f	int
)	O
|	O
0xbff00000	int
;	O
else	O
if	O
(	O
c	int
>=	O
0xc2	int
)	O
c	int
=	O
(	O
c	int
&	O
0x1f	int
)	O
|	O
0xfc000000	int
;	O
else	O
if	O
(	O
c	int
>=	O
0xc0	int
)	O
c	int
=	O
0xfdffffff	int
;	O
else	O
if	O
(	O
c	int
>=	O
0x80	int
)	O
c	int
=	O
UCS_REPL	int
;	O
}	O
*	O
utf8charp	pointer
=	O
utf8char	int
=	O
(	O
c	int
&	O
0x80000000	int
)	O
?	O
c	int
:	O
0	int
;	O
if	O
(	O
utf8char	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
c	int
&	O
0xff800000	int
)	O
c	int
=	O
UCS_REPL	int
;	O
if	O
(	O
c	int
>=	O
0xd800	int
&&	O
(	O
c	int
<=	O
0xdfff	int
||	O
c	int
==	O
0xfffe	int
||	O
c	int
==	O
0xffff	int
)	O
)	O
c	int
=	O
UCS_REPL	int
;	O
return	O
c	int
;	O
}	O
void	O
WinSwitchEncoding	function
(	O
p	pointer
,	O
encoding	int
)	O
struct	O
win	struct
*	O
p	pointer
;	O
int	O
encoding	int
;	O
{	O
int	O
i	int
,	O
j	int
,	O
c	int
;	O
struct	O
mline	struct
*	O
ml	pointer
;	O
struct	O
display	struct
*	O
d	int
;	O
struct	O
canvas	struct
*	O
cv	pointer
;	O
struct	O
layer	struct
*	O
oldflayer	pointer
;	O
if	O
(	O
(	O
p	pointer
->	O
w_encoding	O
==	O
UTF8	int
)	O
==	O
(	O
encoding	int
==	O
UTF8	int
)	O
)	O
{	O
p	pointer
->	O
w_encoding	O
=	O
encoding	int
;	O
return	O
;	O
}	O
oldflayer	pointer
=	O
flayer	pointer
;	O
for	O
(	O
d	int
=	O
displays	pointer
;	O
d	int
;	O
d	int
=	O
d	int
->	O
d_next	pointer
)	O
for	O
(	O
cv	pointer
=	O
d	int
->	O
d_cvlist	pointer
;	O
cv	pointer
;	O
cv	pointer
=	O
cv	pointer
->	O
c_next	pointer
)	O
if	O
(	O
p	pointer
==	O
Layer2Window	O
(	O
cv	pointer
->	O
c_layer	pointer
)	O
)	O
{	O
flayer	pointer
=	O
cv	pointer
->	O
c_layer	pointer
;	O
while	O
(	O
flayer	pointer
->	O
l_next	pointer
)	O
{	O
if	O
(	O
oldflayer	pointer
==	O
flayer	pointer
)	O
oldflayer	pointer
=	O
flayer	pointer
->	O
l_next	pointer
;	O
ExitOverlayPage	function
(	O
)	O
;	O
}	O
}	O
flayer	pointer
=	O
oldflayer	pointer
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
p	pointer
->	O
w_height	O
+	O
p	pointer
->	O
w_histheight	int
;	O
j	int
++	O
)	O
{	O
ml	pointer
=	O
j	int
<	O
p	pointer
->	O
w_height	O
?	O
&	O
p	pointer
->	O
w_mlines	pointer
[	O
j	int
]	O
:	O
&	O
p	pointer
->	O
w_hlines	pointer
[	O
j	int
-	O
p	pointer
->	O
w_height	O
]	O
;	O
if	O
(	O
ml	pointer
->	O
font	char
==	O
null	pointer
&&	O
ml	pointer
->	O
fontx	char
==	O
0	int
&&	O
encodings	array
[	O
p	pointer
->	O
w_encoding	O
]	O
.	O
deffont	int
==	O
0	int
)	O
continue	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
p	pointer
->	O
w_width	O
;	O
i	int
++	O
)	O
{	O
c	int
=	O
ml	pointer
->	O
image	char
[	O
i	int
]	O
|	O
(	O
ml	pointer
->	O
font	char
[	O
i	int
]	O
<<	O
8	int
)	O
;	O
if	O
(	O
p	pointer
->	O
w_encoding	O
==	O
UTF8	int
)	O
c	int
|=	O
ml	pointer
->	O
fontx	char
[	O
i	int
]	O
<<	O
16	int
;	O
if	O
(	O
p	pointer
->	O
w_encoding	O
!=	O
UTF8	int
&&	O
c	int
<	O
256	int
)	O
c	int
|=	O
encodings	array
[	O
p	pointer
->	O
w_encoding	O
]	O
.	O
deffont	int
<<	O
8	int
;	O
if	O
(	O
c	int
<	O
256	int
)	O
continue	O
;	O
if	O
(	O
ml	pointer
->	O
font	char
==	O
null	pointer
)	O
{	O
if	O
(	O
(	O
ml	pointer
->	O
font	char
=	O
(	O
unsigned	O
char	O
*	O
)	O
calloc	function
(	O
p	pointer
->	O
w_width	O
+	O
1	int
,	O
1	int
)	O
)	O
==	O
0	int
)	O
{	O
ml	pointer
->	O
font	char
=	O
null	pointer
;	O
break	O
;	O
}	O
}	O
if	O
(	O
(	O
p	pointer
->	O
w_encoding	O
!=	O
UTF8	int
&&	O
(	O
c	int
&	O
0x1f00	int
)	O
!=	O
0	int
&&	O
(	O
c	int
&	O
0xe000	int
)	O
==	O
0	int
)	O
||	O
(	O
p	pointer
->	O
w_encoding	O
==	O
UTF8	int
&&	O
utf8_isdouble	function
(	O
c	int
)	O
)	O
)	O
{	O
if	O
(	O
i	int
+	O
1	int
==	O
p	pointer
->	O
w_width	O
)	O
c	int
=	O
'?'	O
;	O
else	O
{	O
int	O
c2	int
;	O
i	int
++	O
;	O
c2	int
=	O
ml	pointer
->	O
image	char
[	O
i	int
]	O
|	O
(	O
ml	pointer
->	O
font	char
[	O
i	int
]	O
<<	O
8	int
)	O
|	O
(	O
ml	pointer
->	O
fontx	char
[	O
i	int
]	O
<<	O
16	int
)	O
;	O
c	int
=	O
recode_char_dw_to_encoding	function
(	O
c	int
,	O
&	O
c2	int
,	O
encoding	int
)	O
;	O
if	O
(	O
encoding	int
==	O
UTF8	int
)	O
{	O
if	O
(	O
c	int
>	O
0x10000	int
&&	O
ml	pointer
->	O
fontx	char
==	O
null	pointer
)	O
{	O
if	O
(	O
(	O
ml	pointer
->	O
fontx	char
=	O
(	O
unsigned	O
char	O
*	O
)	O
calloc	function
(	O
p	pointer
->	O
w_width	O
+	O
1	int
,	O
1	int
)	O
)	O
==	O
0	int
)	O
{	O
ml	pointer
->	O
fontx	char
=	O
null	pointer
;	O
break	O
;	O
}	O
}	O
ml	pointer
->	O
fontx	char
[	O
i	int
-	O
1	int
]	O
=	O
c	int
>>	O
16	int
&	O
255	int
;	O
}	O
else	O
ml	pointer
->	O
fontx	char
=	O
null	pointer
;	O
ml	pointer
->	O
font	char
[	O
i	int
-	O
1	int
]	O
=	O
c	int
>>	O
8	int
&	O
255	int
;	O
ml	pointer
->	O
image	char
[	O
i	int
-	O
1	int
]	O
=	O
c	int
&	O
255	int
;	O
c	int
=	O
c2	int
;	O
}	O
}	O
else	O
c	int
=	O
recode_char_to_encoding	function
(	O
c	int
,	O
encoding	int
)	O
;	O
ml	pointer
->	O
image	char
[	O
i	int
]	O
=	O
c	int
&	O
255	int
;	O
ml	pointer
->	O
font	char
[	O
i	int
]	O
=	O
c	int
>>	O
8	int
&	O
255	int
;	O
if	O
(	O
encoding	int
==	O
UTF8	int
)	O
{	O
if	O
(	O
c	int
>	O
0x10000	int
&&	O
ml	pointer
->	O
fontx	char
==	O
null	pointer
)	O
{	O
if	O
(	O
(	O
ml	pointer
->	O
fontx	char
=	O
(	O
unsigned	O
char	O
*	O
)	O
calloc	function
(	O
p	pointer
->	O
w_width	O
+	O
1	int
,	O
1	int
)	O
)	O
==	O
0	int
)	O
{	O
ml	pointer
->	O
fontx	char
=	O
null	pointer
;	O
break	O
;	O
}	O
}	O
ml	pointer
->	O
fontx	char
[	O
i	int
]	O
=	O
c	int
>>	O
16	int
&	O
255	int
;	O
}	O
else	O
ml	pointer
->	O
fontx	char
=	O
null	pointer
;	O
}	O
}	O
p	pointer
->	O
w_encoding	O
=	O
encoding	int
;	O
return	O
;	O
}	O
struct	O
interval	struct
{	O
int	O
first	int
;	O
int	O
last	int
;	O
}	O
;	O
static	O
int	O
bisearch	function
(	O
int	O
ucs	int
,	O
const	O
struct	O
interval	struct
*	O
table	pointer
,	O
int	O
max	int
)	O
{	O
int	O
min	int
=	O
0	int
;	O
int	O
mid	int
;	O
if	O
(	O
ucs	int
<	O
table	pointer
[	O
0	int
]	O
.	O
first	int
||	O
ucs	int
>	O
table	pointer
[	O
max	int
]	O
.	O
last	int
)	O
return	O
0	int
;	O
while	O
(	O
max	int
>=	O
min	int
)	O
{	O
mid	int
=	O
(	O
min	int
+	O
max	int
)	O
/	O
2	int
;	O
if	O
(	O
ucs	int
>	O
table	pointer
[	O
mid	int
]	O
.	O
last	int
)	O
min	int
=	O
mid	int
+	O
1	int
;	O
else	O
if	O
(	O
ucs	int
<	O
table	pointer
[	O
mid	int
]	O
.	O
first	int
)	O
max	int
=	O
mid	int
-	O
1	int
;	O
else	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
utf8_isdouble	function
(	O
c	int
)	O
int	O
c	int
;	O
{	O
static	O
const	O
struct	O
interval	struct
ambiguous	array
[	O
]	O
=	O
{	O
{	O
0x00A1	int
,	O
0x00A1	int
}	O
,	O
{	O
0x00A4	int
,	O
0x00A4	int
}	O
,	O
{	O
0x00A7	int
,	O
0x00A8	int
}	O
,	O
{	O
0x00AA	int
,	O
0x00AA	int
}	O
,	O
{	O
0x00AD	int
,	O
0x00AE	int
}	O
,	O
{	O
0x00B0	int
,	O
0x00B4	int
}	O
,	O
{	O
0x00B6	int
,	O
0x00BA	int
}	O
,	O
{	O
0x00BC	int
,	O
0x00BF	int
}	O
,	O
{	O
0x00C6	int
,	O
0x00C6	int
}	O
,	O
{	O
0x00D0	int
,	O
0x00D0	int
}	O
,	O
{	O
0x00D7	int
,	O
0x00D8	int
}	O
,	O
{	O
0x00DE	int
,	O
0x00E1	int
}	O
,	O
{	O
0x00E6	int
,	O
0x00E6	int
}	O
,	O
{	O
0x00E8	int
,	O
0x00EA	int
}	O
,	O
{	O
0x00EC	int
,	O
0x00ED	int
}	O
,	O
{	O
0x00F0	int
,	O
0x00F0	int
}	O
,	O
{	O
0x00F2	int
,	O
0x00F3	int
}	O
,	O
{	O
0x00F7	int
,	O
0x00FA	int
}	O
,	O
{	O
0x00FC	int
,	O
0x00FC	int
}	O
,	O
{	O
0x00FE	int
,	O
0x00FE	int
}	O
,	O
{	O
0x0101	int
,	O
0x0101	int
}	O
,	O
{	O
0x0111	int
,	O
0x0111	int
}	O
,	O
{	O
0x0113	int
,	O
0x0113	int
}	O
,	O
{	O
0x011B	int
,	O
0x011B	int
}	O
,	O
{	O
0x0126	int
,	O
0x0127	int
}	O
,	O
{	O
0x012B	int
,	O
0x012B	int
}	O
,	O
{	O
0x0131	int
,	O
0x0133	int
}	O
,	O
{	O
0x0138	int
,	O
0x0138	int
}	O
,	O
{	O
0x013F	int
,	O
0x0142	int
}	O
,	O
{	O
0x0144	int
,	O
0x0144	int
}	O
,	O
{	O
0x0148	int
,	O
0x014B	int
}	O
,	O
{	O
0x014D	int
,	O
0x014D	int
}	O
,	O
{	O
0x0152	int
,	O
0x0153	int
}	O
,	O
{	O
0x0166	int
,	O
0x0167	int
}	O
,	O
{	O
0x016B	int
,	O
0x016B	int
}	O
,	O
{	O
0x01CE	int
,	O
0x01CE	int
}	O
,	O
{	O
0x01D0	int
,	O
0x01D0	int
}	O
,	O
{	O
0x01D2	int
,	O
0x01D2	int
}	O
,	O
{	O
0x01D4	int
,	O
0x01D4	int
}	O
,	O
{	O
0x01D6	int
,	O
0x01D6	int
}	O
,	O
{	O
0x01D8	int
,	O
0x01D8	int
}	O
,	O
{	O
0x01DA	int
,	O
0x01DA	int
}	O
,	O
{	O
0x01DC	int
,	O
0x01DC	int
}	O
,	O
{	O
0x0251	int
,	O
0x0251	int
}	O
,	O
{	O
0x0261	int
,	O
0x0261	int
}	O
,	O
{	O
0x02C4	int
,	O
0x02C4	int
}	O
,	O
{	O
0x02C7	int
,	O
0x02C7	int
}	O
,	O
{	O
0x02C9	int
,	O
0x02CB	int
}	O
,	O
{	O
0x02CD	int
,	O
0x02CD	int
}	O
,	O
{	O
0x02D0	int
,	O
0x02D0	int
}	O
,	O
{	O
0x02D8	int
,	O
0x02DB	int
}	O
,	O
{	O
0x02DD	int
,	O
0x02DD	int
}	O
,	O
{	O
0x02DF	int
,	O
0x02DF	int
}	O
,	O
{	O
0x0300	int
,	O
0x036F	int
}	O
,	O
{	O
0x0391	int
,	O
0x03A1	int
}	O
,	O
{	O
0x03A3	int
,	O
0x03A9	int
}	O
,	O
{	O
0x03B1	int
,	O
0x03C1	int
}	O
,	O
{	O
0x03C3	int
,	O
0x03C9	int
}	O
,	O
{	O
0x0401	int
,	O
0x0401	int
}	O
,	O
{	O
0x0410	int
,	O
0x044F	int
}	O
,	O
{	O
0x0451	int
,	O
0x0451	int
}	O
,	O
{	O
0x2010	int
,	O
0x2010	int
}	O
,	O
{	O
0x2013	int
,	O
0x2016	int
}	O
,	O
{	O
0x2018	int
,	O
0x2019	int
}	O
,	O
{	O
0x201C	int
,	O
0x201D	int
}	O
,	O
{	O
0x2020	int
,	O
0x2022	int
}	O
,	O
{	O
0x2024	int
,	O
0x2027	int
}	O
,	O
{	O
0x2030	int
,	O
0x2030	int
}	O
,	O
{	O
0x2032	int
,	O
0x2033	int
}	O
,	O
{	O
0x2035	int
,	O
0x2035	int
}	O
,	O
{	O
0x203B	int
,	O
0x203B	int
}	O
,	O
{	O
0x203E	int
,	O
0x203E	int
}	O
,	O
{	O
0x2074	int
,	O
0x2074	int
}	O
,	O
{	O
0x207F	int
,	O
0x207F	int
}	O
,	O
{	O
0x2081	int
,	O
0x2084	int
}	O
,	O
{	O
0x20AC	int
,	O
0x20AC	int
}	O
,	O
{	O
0x2103	int
,	O
0x2103	int
}	O
,	O
{	O
0x2105	int
,	O
0x2105	int
}	O
,	O
{	O
0x2109	int
,	O
0x2109	int
}	O
,	O
{	O
0x2113	int
,	O
0x2113	int
}	O
,	O
{	O
0x2116	int
,	O
0x2116	int
}	O
,	O
{	O
0x2121	int
,	O
0x2122	int
}	O
,	O
{	O
0x2126	int
,	O
0x2126	int
}	O
,	O
{	O
0x212B	int
,	O
0x212B	int
}	O
,	O
{	O
0x2153	int
,	O
0x2154	int
}	O
,	O
{	O
0x215B	int
,	O
0x215E	int
}	O
,	O
{	O
0x2160	int
,	O
0x216B	int
}	O
,	O
{	O
0x2170	int
,	O
0x2179	int
}	O
,	O
{	O
0x2189	int
,	O
0x2189	int
}	O
,	O
{	O
0x2190	int
,	O
0x2199	int
}	O
,	O
{	O
0x21B8	int
,	O
0x21B9	int
}	O
,	O
{	O
0x21D2	int
,	O
0x21D2	int
}	O
,	O
{	O
0x21D4	int
,	O
0x21D4	int
}	O
,	O
{	O
0x21E7	int
,	O
0x21E7	int
}	O
,	O
{	O
0x2200	int
,	O
0x2200	int
}	O
,	O
{	O
0x2202	int
,	O
0x2203	int
}	O
,	O
{	O
0x2207	int
,	O
0x2208	int
}	O
,	O
{	O
0x220B	int
,	O
0x220B	int
}	O
,	O
{	O
0x220F	int
,	O
0x220F	int
}	O
,	O
{	O
0x2211	int
,	O
0x2211	int
}	O
,	O
{	O
0x2215	int
,	O
0x2215	int
}	O
,	O
{	O
0x221A	int
,	O
0x221A	int
}	O
,	O
{	O
0x221D	int
,	O
0x2220	int
}	O
,	O
{	O
0x2223	int
,	O
0x2223	int
}	O
,	O
{	O
0x2225	int
,	O
0x2225	int
}	O
,	O
{	O
0x2227	int
,	O
0x222C	int
}	O
,	O
{	O
0x222E	int
,	O
0x222E	int
}	O
,	O
{	O
0x2234	int
,	O
0x2237	int
}	O
,	O
{	O
0x223C	int
,	O
0x223D	int
}	O
,	O
{	O
0x2248	int
,	O
0x2248	int
}	O
,	O
{	O
0x224C	int
,	O
0x224C	int
}	O
,	O
{	O
0x2252	int
,	O
0x2252	int
}	O
,	O
{	O
0x2260	int
,	O
0x2261	int
}	O
,	O
{	O
0x2264	int
,	O
0x2267	int
}	O
,	O
{	O
0x226A	int
,	O
0x226B	int
}	O
,	O
{	O
0x226E	int
,	O
0x226F	int
}	O
,	O
{	O
0x2282	int
,	O
0x2283	int
}	O
,	O
{	O
0x2286	int
,	O
0x2287	int
}	O
,	O
{	O
0x2295	int
,	O
0x2295	int
}	O
,	O
{	O
0x2299	int
,	O
0x2299	int
}	O
,	O
{	O
0x22A5	int
,	O
0x22A5	int
}	O
,	O
{	O
0x22BF	int
,	O
0x22BF	int
}	O
,	O
{	O
0x2312	int
,	O
0x2312	int
}	O
,	O
{	O
0x2460	int
,	O
0x24E9	int
}	O
,	O
{	O
0x24EB	int
,	O
0x254B	int
}	O
,	O
{	O
0x2550	int
,	O
0x2573	int
}	O
,	O
{	O
0x2580	int
,	O
0x258F	int
}	O
,	O
{	O
0x2592	int
,	O
0x2595	int
}	O
,	O
{	O
0x25A0	int
,	O
0x25A1	int
}	O
,	O
{	O
0x25A3	int
,	O
0x25A9	int
}	O
,	O
{	O
0x25B2	int
,	O
0x25B3	int
}	O
,	O
{	O
0x25B6	int
,	O
0x25B7	int
}	O
,	O
{	O
0x25BC	int
,	O
0x25BD	int
}	O
,	O
{	O
0x25C0	int
,	O
0x25C1	int
}	O
,	O
{	O
0x25C6	int
,	O
0x25C8	int
}	O
,	O
{	O
0x25CB	int
,	O
0x25CB	int
}	O
,	O
{	O
0x25CE	int
,	O
0x25D1	int
}	O
,	O
{	O
0x25E2	int
,	O
0x25E5	int
}	O
,	O
{	O
0x25EF	int
,	O
0x25EF	int
}	O
,	O
{	O
0x2605	int
,	O
0x2606	int
}	O
,	O
{	O
0x2609	int
,	O
0x2609	int
}	O
,	O
{	O
0x260E	int
,	O
0x260F	int
}	O
,	O
{	O
0x261C	int
,	O
0x261C	int
}	O
,	O
{	O
0x261E	int
,	O
0x261E	int
}	O
,	O
{	O
0x2640	int
,	O
0x2640	int
}	O
,	O
{	O
0x2642	int
,	O
0x2642	int
}	O
,	O
{	O
0x2660	int
,	O
0x2661	int
}	O
,	O
{	O
0x2663	int
,	O
0x2665	int
}	O
,	O
{	O
0x2667	int
,	O
0x266A	int
}	O
,	O
{	O
0x266C	int
,	O
0x266D	int
}	O
,	O
{	O
0x266F	int
,	O
0x266F	int
}	O
,	O
{	O
0x269E	int
,	O
0x269F	int
}	O
,	O
{	O
0x26BF	int
,	O
0x26BF	int
}	O
,	O
{	O
0x26C6	int
,	O
0x26CD	int
}	O
,	O
{	O
0x26CF	int
,	O
0x26D3	int
}	O
,	O
{	O
0x26D5	int
,	O
0x26E1	int
}	O
,	O
{	O
0x26E3	int
,	O
0x26E3	int
}	O
,	O
{	O
0x26E8	int
,	O
0x26E9	int
}	O
,	O
{	O
0x26EB	int
,	O
0x26F1	int
}	O
,	O
{	O
0x26F4	int
,	O
0x26F4	int
}	O
,	O
{	O
0x26F6	int
,	O
0x26F9	int
}	O
,	O
{	O
0x26FB	int
,	O
0x26FC	int
}	O
,	O
{	O
0x26FE	int
,	O
0x26FF	int
}	O
,	O
{	O
0x273D	int
,	O
0x273D	int
}	O
,	O
{	O
0x2776	int
,	O
0x277F	int
}	O
,	O
{	O
0x2B56	int
,	O
0x2B59	int
}	O
,	O
{	O
0x3248	int
,	O
0x324F	int
}	O
,	O
{	O
0xE000	int
,	O
0xF8FF	int
}	O
,	O
{	O
0xFE00	int
,	O
0xFE0F	int
}	O
,	O
{	O
0xFFFD	int
,	O
0xFFFD	int
}	O
,	O
{	O
0x1F100	int
,	O
0x1F10A	int
}	O
,	O
{	O
0x1F110	int
,	O
0x1F12D	int
}	O
,	O
{	O
0x1F130	int
,	O
0x1F169	int
}	O
,	O
{	O
0x1F170	int
,	O
0x1F18D	int
}	O
,	O
{	O
0x1F18F	int
,	O
0x1F190	int
}	O
,	O
{	O
0x1F19B	int
,	O
0x1F1AC	int
}	O
,	O
{	O
0xE0100	int
,	O
0xE01EF	int
}	O
,	O
{	O
0xF0000	int
,	O
0xFFFFD	int
}	O
,	O
{	O
0x100000	int
,	O
0x10FFFD	int
}	O
,	O
}	O
;	O
static	O
const	O
struct	O
interval	struct
wide	array
[	O
]	O
=	O
{	O
{	O
0x1100	int
,	O
0x115F	int
}	O
,	O
{	O
0x231A	int
,	O
0x231B	int
}	O
,	O
{	O
0x2329	int
,	O
0x232A	int
}	O
,	O
{	O
0x23E9	int
,	O
0x23EC	int
}	O
,	O
{	O
0x23F0	int
,	O
0x23F0	int
}	O
,	O
{	O
0x23F3	int
,	O
0x23F3	int
}	O
,	O
{	O
0x25FD	int
,	O
0x25FE	int
}	O
,	O
{	O
0x2614	int
,	O
0x2615	int
}	O
,	O
{	O
0x2648	int
,	O
0x2653	int
}	O
,	O
{	O
0x267F	int
,	O
0x267F	int
}	O
,	O
{	O
0x2693	int
,	O
0x2693	int
}	O
,	O
{	O
0x26A1	int
,	O
0x26A1	int
}	O
,	O
{	O
0x26AA	int
,	O
0x26AB	int
}	O
,	O
{	O
0x26BD	int
,	O
0x26BE	int
}	O
,	O
{	O
0x26C4	int
,	O
0x26C5	int
}	O
,	O
{	O
0x26CE	int
,	O
0x26CE	int
}	O
,	O
{	O
0x26D4	int
,	O
0x26D4	int
}	O
,	O
{	O
0x26EA	int
,	O
0x26EA	int
}	O
,	O
{	O
0x26F2	int
,	O
0x26F3	int
}	O
,	O
{	O
0x26F5	int
,	O
0x26F5	int
}	O
,	O
{	O
0x26FA	int
,	O
0x26FA	int
}	O
,	O
{	O
0x26FD	int
,	O
0x26FD	int
}	O
,	O
{	O
0x2705	int
,	O
0x2705	int
}	O
,	O
{	O
0x270A	int
,	O
0x270B	int
}	O
,	O
{	O
0x2728	int
,	O
0x2728	int
}	O
,	O
{	O
0x274C	int
,	O
0x274C	int
}	O
,	O
{	O
0x274E	int
,	O
0x274E	int
}	O
,	O
{	O
0x2753	int
,	O
0x2755	int
}	O
,	O
{	O
0x2757	int
,	O
0x2757	int
}	O
,	O
{	O
0x2795	int
,	O
0x2797	int
}	O
,	O
{	O
0x27B0	int
,	O
0x27B0	int
}	O
,	O
{	O
0x27BF	int
,	O
0x27BF	int
}	O
,	O
{	O
0x2B1B	int
,	O
0x2B1C	int
}	O
,	O
{	O
0x2B50	int
,	O
0x2B50	int
}	O
,	O
{	O
0x2B55	int
,	O
0x2B55	int
}	O
,	O
{	O
0x2E80	int
,	O
0x2E99	int
}	O
,	O
{	O
0x2E9B	int
,	O
0x2EF3	int
}	O
,	O
{	O
0x2F00	int
,	O
0x2FD5	int
}	O
,	O
{	O
0x2FF0	int
,	O
0x2FFB	int
}	O
,	O
{	O
0x3000	int
,	O
0x303E	int
}	O
,	O
{	O
0x3041	int
,	O
0x3096	int
}	O
,	O
{	O
0x3099	int
,	O
0x30FF	int
}	O
,	O
{	O
0x3105	int
,	O
0x312F	int
}	O
,	O
{	O
0x3131	int
,	O
0x318E	int
}	O
,	O
{	O
0x3190	int
,	O
0x31BA	int
}	O
,	O
{	O
0x31C0	int
,	O
0x31E3	int
}	O
,	O
{	O
0x31F0	int
,	O
0x321E	int
}	O
,	O
{	O
0x3220	int
,	O
0x3247	int
}	O
,	O
{	O
0x3250	int
,	O
0x4DBF	int
}	O
,	O
{	O
0x4E00	int
,	O
0xA48C	int
}	O
,	O
{	O
0xA490	int
,	O
0xA4C6	int
}	O
,	O
{	O
0xA960	int
,	O
0xA97C	int
}	O
,	O
{	O
0xAC00	int
,	O
0xD7A3	int
}	O
,	O
{	O
0xF900	int
,	O
0xFAFF	int
}	O
,	O
{	O
0xFE10	int
,	O
0xFE19	int
}	O
,	O
{	O
0xFE30	int
,	O
0xFE52	int
}	O
,	O
{	O
0xFE54	int
,	O
0xFE66	int
}	O
,	O
{	O
0xFE68	int
,	O
0xFE6B	int
}	O
,	O
{	O
0xFF01	int
,	O
0xFF60	int
}	O
,	O
{	O
0xFFE0	int
,	O
0xFFE6	int
}	O
,	O
{	O
0x16FE0	int
,	O
0x16FE3	int
}	O
,	O
{	O
0x17000	int
,	O
0x187F7	int
}	O
,	O
{	O
0x18800	int
,	O
0x18AF2	int
}	O
,	O
{	O
0x1B000	int
,	O
0x1B11E	int
}	O
,	O
{	O
0x1B150	int
,	O
0x1B152	int
}	O
,	O
{	O
0x1B164	int
,	O
0x1B167	int
}	O
,	O
{	O
0x1B170	int
,	O
0x1B2FB	int
}	O
,	O
{	O
0x1F004	int
,	O
0x1F004	int
}	O
,	O
{	O
0x1F0CF	int
,	O
0x1F0CF	int
}	O
,	O
{	O
0x1F18E	int
,	O
0x1F18E	int
}	O
,	O
{	O
0x1F191	int
,	O
0x1F19A	int
}	O
,	O
{	O
0x1F200	int
,	O
0x1F202	int
}	O
,	O
{	O
0x1F210	int
,	O
0x1F23B	int
}	O
,	O
{	O
0x1F240	int
,	O
0x1F248	int
}	O
,	O
{	O
0x1F250	int
,	O
0x1F251	int
}	O
,	O
{	O
0x1F260	int
,	O
0x1F265	int
}	O
,	O
{	O
0x1F300	int
,	O
0x1F320	int
}	O
,	O
{	O
0x1F32D	int
,	O
0x1F335	int
}	O
,	O
{	O
0x1F337	int
,	O
0x1F37C	int
}	O
,	O
{	O
0x1F37E	int
,	O
0x1F393	int
}	O
,	O
{	O
0x1F3A0	int
,	O
0x1F3CA	int
}	O
,	O
{	O
0x1F3CF	int
,	O
0x1F3D3	int
}	O
,	O
{	O
0x1F3E0	int
,	O
0x1F3F0	int
}	O
,	O
{	O
0x1F3F4	int
,	O
0x1F3F4	int
}	O
,	O
{	O
0x1F3F8	int
,	O
0x1F43E	int
}	O
,	O
{	O
0x1F440	int
,	O
0x1F440	int
}	O
,	O
{	O
0x1F442	int
,	O
0x1F4FC	int
}	O
,	O
{	O
0x1F4FF	int
,	O
0x1F53D	int
}	O
,	O
{	O
0x1F54B	int
,	O
0x1F54E	int
}	O
,	O
{	O
0x1F550	int
,	O
0x1F567	int
}	O
,	O
{	O
0x1F57A	int
,	O
0x1F57A	int
}	O
,	O
{	O
0x1F595	int
,	O
0x1F596	int
}	O
,	O
{	O
0x1F5A4	int
,	O
0x1F5A4	int
}	O
,	O
{	O
0x1F5FB	int
,	O
0x1F64F	int
}	O
,	O
{	O
0x1F680	int
,	O
0x1F6C5	int
}	O
,	O
{	O
0x1F6CC	int
,	O
0x1F6CC	int
}	O
,	O
{	O
0x1F6D0	int
,	O
0x1F6D2	int
}	O
,	O
{	O
0x1F6D5	int
,	O
0x1F6D5	int
}	O
,	O
{	O
0x1F6EB	int
,	O
0x1F6EC	int
}	O
,	O
{	O
0x1F6F4	int
,	O
0x1F6FA	int
}	O
,	O
{	O
0x1F7E0	int
,	O
0x1F7EB	int
}	O
,	O
{	O
0x1F90D	int
,	O
0x1F971	int
}	O
,	O
{	O
0x1F973	int
,	O
0x1F976	int
}	O
,	O
{	O
0x1F97A	int
,	O
0x1F9A2	int
}	O
,	O
{	O
0x1F9A5	int
,	O
0x1F9AA	int
}	O
,	O
{	O
0x1F9AE	int
,	O
0x1F9CA	int
}	O
,	O
{	O
0x1F9CD	int
,	O
0x1F9FF	int
}	O
,	O
{	O
0x1FA70	int
,	O
0x1FA73	int
}	O
,	O
{	O
0x1FA78	int
,	O
0x1FA7A	int
}	O
,	O
{	O
0x1FA80	int
,	O
0x1FA82	int
}	O
,	O
{	O
0x1FA90	int
,	O
0x1FA95	int
}	O
,	O
{	O
0x20000	int
,	O
0x2FFFD	int
}	O
,	O
{	O
0x30000	int
,	O
0x3FFFD	int
}	O
,	O
}	O
;	O
return	O
(	O
(	O
bisearch	function
(	O
c	int
,	O
wide	array
,	O
sizeof	O
(	O
wide	array
)	O
/	O
sizeof	O
(	O
struct	O
interval	struct
)	O
-	O
1	int
)	O
)	O
||	O
(	O
cjkwidth	int
&&	O
bisearch	function
(	O
c	int
,	O
ambiguous	array
,	O
sizeof	O
(	O
ambiguous	array
)	O
/	O
sizeof	O
(	O
struct	O
interval	struct
)	O
-	O
1	int
)	O
)	O
)	O
;	O
}	O
int	O
utf8_iscomb	function
(	O
c	int
)	O
int	O
c	int
;	O
{	O
static	O
const	O
struct	O
interval	struct
combining	array
[	O
]	O
=	O
{	O
{	O
0x0300	int
,	O
0x036F	int
}	O
,	O
{	O
0x0483	int
,	O
0x0486	int
}	O
,	O
{	O
0x0488	int
,	O
0x0489	int
}	O
,	O
{	O
0x0591	int
,	O
0x05BD	int
}	O
,	O
{	O
0x05BF	int
,	O
0x05BF	int
}	O
,	O
{	O
0x05C1	int
,	O
0x05C2	int
}	O
,	O
{	O
0x05C4	int
,	O
0x05C5	int
}	O
,	O
{	O
0x05C7	int
,	O
0x05C7	int
}	O
,	O
{	O
0x0600	int
,	O
0x0603	int
}	O
,	O
{	O
0x0610	int
,	O
0x0615	int
}	O
,	O
{	O
0x064B	int
,	O
0x065E	int
}	O
,	O
{	O
0x0670	int
,	O
0x0670	int
}	O
,	O
{	O
0x06D6	int
,	O
0x06E4	int
}	O
,	O
{	O
0x06E7	int
,	O
0x06E8	int
}	O
,	O
{	O
0x06EA	int
,	O
0x06ED	int
}	O
,	O
{	O
0x070F	int
,	O
0x070F	int
}	O
,	O
{	O
0x0711	int
,	O
0x0711	int
}	O
,	O
{	O
0x0730	int
,	O
0x074A	int
}	O
,	O
{	O
0x07A6	int
,	O
0x07B0	int
}	O
,	O
{	O
0x07EB	int
,	O
0x07F3	int
}	O
,	O
{	O
0x0901	int
,	O
0x0902	int
}	O
,	O
{	O
0x093C	int
,	O
0x093C	int
}	O
,	O
{	O
0x0941	int
,	O
0x0948	int
}	O
,	O
{	O
0x094D	int
,	O
0x094D	int
}	O
,	O
{	O
0x0951	int
,	O
0x0954	int
}	O
,	O
{	O
0x0962	int
,	O
0x0963	int
}	O
,	O
{	O
0x0981	int
,	O
0x0981	int
}	O
,	O
{	O
0x09BC	int
,	O
0x09BC	int
}	O
,	O
{	O
0x09C1	int
,	O
0x09C4	int
}	O
,	O
{	O
0x09CD	int
,	O
0x09CD	int
}	O
,	O
{	O
0x09E2	int
,	O
0x09E3	int
}	O
,	O
{	O
0x0A01	int
,	O
0x0A02	int
}	O
,	O
{	O
0x0A3C	int
,	O
0x0A3C	int
}	O
,	O
{	O
0x0A41	int
,	O
0x0A42	int
}	O
,	O
{	O
0x0A47	int
,	O
0x0A48	int
}	O
,	O
{	O
0x0A4B	int
,	O
0x0A4D	int
}	O
,	O
{	O
0x0A70	int
,	O
0x0A71	int
}	O
,	O
{	O
0x0A81	int
,	O
0x0A82	int
}	O
,	O
{	O
0x0ABC	int
,	O
0x0ABC	int
}	O
,	O
{	O
0x0AC1	int
,	O
0x0AC5	int
}	O
,	O
{	O
0x0AC7	int
,	O
0x0AC8	int
}	O
,	O
{	O
0x0ACD	int
,	O
0x0ACD	int
}	O
,	O
{	O
0x0AE2	int
,	O
0x0AE3	int
}	O
,	O
{	O
0x0B01	int
,	O
0x0B01	int
}	O
,	O
{	O
0x0B3C	int
,	O
0x0B3C	int
}	O
,	O
{	O
0x0B3F	int
,	O
0x0B3F	int
}	O
,	O
{	O
0x0B41	int
,	O
0x0B43	int
}	O
,	O
{	O
0x0B4D	int
,	O
0x0B4D	int
}	O
,	O
{	O
0x0B56	int
,	O
0x0B56	int
}	O
,	O
{	O
0x0B82	int
,	O
0x0B82	int
}	O
,	O
{	O
0x0BC0	int
,	O
0x0BC0	int
}	O
,	O
{	O
0x0BCD	int
,	O
0x0BCD	int
}	O
,	O
{	O
0x0C3E	int
,	O
0x0C40	int
}	O
,	O
{	O
0x0C46	int
,	O
0x0C48	int
}	O
,	O
{	O
0x0C4A	int
,	O
0x0C4D	int
}	O
,	O
{	O
0x0C55	int
,	O
0x0C56	int
}	O
,	O
{	O
0x0CBC	int
,	O
0x0CBC	int
}	O
,	O
{	O
0x0CBF	int
,	O
0x0CBF	int
}	O
,	O
{	O
0x0CC6	int
,	O
0x0CC6	int
}	O
,	O
{	O
0x0CCC	int
,	O
0x0CCD	int
}	O
,	O
{	O
0x0CE2	int
,	O
0x0CE3	int
}	O
,	O
{	O
0x0D41	int
,	O
0x0D43	int
}	O
,	O
{	O
0x0D4D	int
,	O
0x0D4D	int
}	O
,	O
{	O
0x0DCA	int
,	O
0x0DCA	int
}	O
,	O
{	O
0x0DD2	int
,	O
0x0DD4	int
}	O
,	O
{	O
0x0DD6	int
,	O
0x0DD6	int
}	O
,	O
{	O
0x0E31	int
,	O
0x0E31	int
}	O
,	O
{	O
0x0E34	int
,	O
0x0E3A	int
}	O
,	O
{	O
0x0E47	int
,	O
0x0E4E	int
}	O
,	O
{	O
0x0EB1	int
,	O
0x0EB1	int
}	O
,	O
{	O
0x0EB4	int
,	O
0x0EB9	int
}	O
,	O
{	O
0x0EBB	int
,	O
0x0EBC	int
}	O
,	O
{	O
0x0EC8	int
,	O
0x0ECD	int
}	O
,	O
{	O
0x0F18	int
,	O
0x0F19	int
}	O
,	O
{	O
0x0F35	int
,	O
0x0F35	int
}	O
,	O
{	O
0x0F37	int
,	O
0x0F37	int
}	O
,	O
{	O
0x0F39	int
,	O
0x0F39	int
}	O
,	O
{	O
0x0F71	int
,	O
0x0F7E	int
}	O
,	O
{	O
0x0F80	int
,	O
0x0F84	int
}	O
,	O
{	O
0x0F86	int
,	O
0x0F87	int
}	O
,	O
{	O
0x0F90	int
,	O
0x0F97	int
}	O
,	O
{	O
0x0F99	int
,	O
0x0FBC	int
}	O
,	O
{	O
0x0FC6	int
,	O
0x0FC6	int
}	O
,	O
{	O
0x102D	int
,	O
0x1030	int
}	O
,	O
{	O
0x1032	int
,	O
0x1032	int
}	O
,	O
{	O
0x1036	int
,	O
0x1037	int
}	O
,	O
{	O
0x1039	int
,	O
0x1039	int
}	O
,	O
{	O
0x1058	int
,	O
0x1059	int
}	O
,	O
{	O
0x1160	int
,	O
0x11FF	int
}	O
,	O
{	O
0x135F	int
,	O
0x135F	int
}	O
,	O
{	O
0x1712	int
,	O
0x1714	int
}	O
,	O
{	O
0x1732	int
,	O
0x1734	int
}	O
,	O
{	O
0x1752	int
,	O
0x1753	int
}	O
,	O
{	O
0x1772	int
,	O
0x1773	int
}	O
,	O
{	O
0x17B4	int
,	O
0x17B5	int
}	O
,	O
{	O
0x17B7	int
,	O
0x17BD	int
}	O
,	O
{	O
0x17C6	int
,	O
0x17C6	int
}	O
,	O
{	O
0x17C9	int
,	O
0x17D3	int
}	O
,	O
{	O
0x17DD	int
,	O
0x17DD	int
}	O
,	O
{	O
0x180B	int
,	O
0x180D	int
}	O
,	O
{	O
0x18A9	int
,	O
0x18A9	int
}	O
,	O
{	O
0x1920	int
,	O
0x1922	int
}	O
,	O
{	O
0x1927	int
,	O
0x1928	int
}	O
,	O
{	O
0x1932	int
,	O
0x1932	int
}	O
,	O
{	O
0x1939	int
,	O
0x193B	int
}	O
,	O
{	O
0x1A17	int
,	O
0x1A18	int
}	O
,	O
{	O
0x1B00	int
,	O
0x1B03	int
}	O
,	O
{	O
0x1B34	int
,	O
0x1B34	int
}	O
,	O
{	O
0x1B36	int
,	O
0x1B3A	int
}	O
,	O
{	O
0x1B3C	int
,	O
0x1B3C	int
}	O
,	O
{	O
0x1B42	int
,	O
0x1B42	int
}	O
,	O
{	O
0x1B6B	int
,	O
0x1B73	int
}	O
,	O
{	O
0x1DC0	int
,	O
0x1DCA	int
}	O
,	O
{	O
0x1DFE	int
,	O
0x1DFF	int
}	O
,	O
{	O
0x200B	int
,	O
0x200F	int
}	O
,	O
{	O
0x202A	int
,	O
0x202E	int
}	O
,	O
{	O
0x2060	int
,	O
0x2063	int
}	O
,	O
{	O
0x206A	int
,	O
0x206F	int
}	O
,	O
{	O
0x20D0	int
,	O
0x20EF	int
}	O
,	O
{	O
0x302A	int
,	O
0x302F	int
}	O
,	O
{	O
0x3099	int
,	O
0x309A	int
}	O
,	O
{	O
0xA806	int
,	O
0xA806	int
}	O
,	O
{	O
0xA80B	int
,	O
0xA80B	int
}	O
,	O
{	O
0xA825	int
,	O
0xA826	int
}	O
,	O
{	O
0xFB1E	int
,	O
0xFB1E	int
}	O
,	O
{	O
0xFE00	int
,	O
0xFE0F	int
}	O
,	O
{	O
0xFE20	int
,	O
0xFE23	int
}	O
,	O
{	O
0xFEFF	int
,	O
0xFEFF	int
}	O
,	O
{	O
0xFFF9	int
,	O
0xFFFB	int
}	O
,	O
{	O
0x10A01	int
,	O
0x10A03	int
}	O
,	O
{	O
0x10A05	int
,	O
0x10A06	int
}	O
,	O
{	O
0x10A0C	int
,	O
0x10A0F	int
}	O
,	O
{	O
0x10A38	int
,	O
0x10A3A	int
}	O
,	O
{	O
0x10A3F	int
,	O
0x10A3F	int
}	O
,	O
{	O
0x1D167	int
,	O
0x1D169	int
}	O
,	O
{	O
0x1D173	int
,	O
0x1D182	int
}	O
,	O
{	O
0x1D185	int
,	O
0x1D18B	int
}	O
,	O
{	O
0x1D1AA	int
,	O
0x1D1AD	int
}	O
,	O
{	O
0x1D242	int
,	O
0x1D244	int
}	O
,	O
{	O
0xE0001	int
,	O
0xE0001	int
}	O
,	O
{	O
0xE0020	int
,	O
0xE007F	int
}	O
,	O
{	O
0xE0100	int
,	O
0xE01EF	int
}	O
}	O
;	O
return	O
bisearch	function
(	O
c	int
,	O
combining	array
,	O
sizeof	O
(	O
combining	array
)	O
/	O
sizeof	O
(	O
struct	O
interval	struct
)	O
-	O
1	int
)	O
;	O
}	O
static	O
void	O
comb_tofront	function
(	O
root	int
,	O
i	int
)	O
int	O
root	int
,	O
i	int
;	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
debug1	O
(	O
"bring to front: %x\n"	pointer
,	O
i	int
)	O
;	O
combchars	pointer
[	O
combchars	pointer
[	O
i	int
]	O
->	O
prev	int
]	O
->	O
next	pointer
=	O
combchars	pointer
[	O
i	int
]	O
->	O
next	pointer
;	O
combchars	pointer
[	O
combchars	pointer
[	O
i	int
]	O
->	O
next	pointer
]	O
->	O
prev	int
=	O
combchars	pointer
[	O
i	int
]	O
->	O
prev	int
;	O
combchars	pointer
[	O
i	int
]	O
->	O
next	pointer
=	O
combchars	pointer
[	O
root	int
]	O
->	O
next	pointer
;	O
combchars	pointer
[	O
i	int
]	O
->	O
prev	int
=	O
root	int
;	O
combchars	pointer
[	O
combchars	pointer
[	O
root	int
]	O
->	O
next	pointer
]	O
->	O
prev	int
=	O
i	int
;	O
combchars	pointer
[	O
root	int
]	O
->	O
next	pointer
=	O
i	int
;	O
i	int
=	O
combchars	pointer
[	O
i	int
]	O
->	O
c1	int
;	O
if	O
(	O
i	int
<	O
0xd800	int
||	O
i	int
>=	O
0xe000	int
)	O
return	O
;	O
i	int
-=	O
0xd800	int
;	O
}	O
}	O
void	O
utf8_handle_comb	function
(	O
c	int
,	O
mc	pointer
)	O
int	O
c	int
;	O
struct	O
mchar	struct
*	O
mc	pointer
;	O
{	O
int	O
root	int
,	O
i	int
,	O
c1	int
;	O
int	O
isdouble	int
;	O
c1	int
=	O
mc	pointer
->	O
image	char
|	O
(	O
mc	pointer
->	O
font	char
<<	O
8	int
)	O
|	O
mc	pointer
->	O
fontx	char
<<	O
16	int
;	O
isdouble	int
=	O
c1	int
>=	O
0x1100	int
&&	O
utf8_isdouble	function
(	O
c1	int
)	O
;	O
if	O
(	O
!	O
combchars	pointer
)	O
{	O
combchars	pointer
=	O
(	O
struct	O
combchar	struct
*	O
*	O
)	O
calloc	function
(	O
0x802	int
,	O
sizeof	O
(	O
struct	O
combchar	struct
*	O
)	O
)	O
;	O
if	O
(	O
!	O
combchars	pointer
)	O
return	O
;	O
combchars	pointer
[	O
0x800	int
]	O
=	O
(	O
struct	O
combchar	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
struct	O
combchar	struct
)	O
)	O
;	O
combchars	pointer
[	O
0x801	int
]	O
=	O
(	O
struct	O
combchar	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
struct	O
combchar	struct
)	O
)	O
;	O
if	O
(	O
!	O
combchars	pointer
[	O
0x800	int
]	O
||	O
!	O
combchars	pointer
[	O
0x801	int
]	O
)	O
{	O
if	O
(	O
combchars	pointer
[	O
0x800	int
]	O
)	O
free	function
(	O
combchars	pointer
[	O
0x800	int
]	O
)	O
;	O
if	O
(	O
combchars	pointer
[	O
0x801	int
]	O
)	O
free	function
(	O
combchars	pointer
[	O
0x801	int
]	O
)	O
;	O
free	function
(	O
combchars	pointer
)	O
;	O
return	O
;	O
}	O
combchars	pointer
[	O
0x800	int
]	O
->	O
c1	int
=	O
0x000	int
;	O
combchars	pointer
[	O
0x800	int
]	O
->	O
c2	int
=	O
0x700	int
;	O
combchars	pointer
[	O
0x800	int
]	O
->	O
next	pointer
=	O
0x800	int
;	O
combchars	pointer
[	O
0x800	int
]	O
->	O
prev	int
=	O
0x800	int
;	O
combchars	pointer
[	O
0x801	int
]	O
->	O
c1	int
=	O
0x700	int
;	O
combchars	pointer
[	O
0x801	int
]	O
->	O
c2	int
=	O
0x800	int
;	O
combchars	pointer
[	O
0x801	int
]	O
->	O
next	pointer
=	O
0x801	int
;	O
combchars	pointer
[	O
0x801	int
]	O
->	O
prev	int
=	O
0x801	int
;	O
}	O
root	int
=	O
isdouble	int
?	O
0x801	int
:	O
0x800	int
;	O
for	O
(	O
i	int
=	O
combchars	pointer
[	O
root	int
]	O
->	O
c1	int
;	O
i	int
<	O
combchars	pointer
[	O
root	int
]	O
->	O
c2	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
!	O
combchars	pointer
[	O
i	int
]	O
)	O
break	O
;	O
if	O
(	O
combchars	pointer
[	O
i	int
]	O
->	O
c1	int
==	O
c1	int
&&	O
combchars	pointer
[	O
i	int
]	O
->	O
c2	int
==	O
c	int
)	O
break	O
;	O
}	O
if	O
(	O
i	int
==	O
combchars	pointer
[	O
root	int
]	O
->	O
c2	int
)	O
{	O
if	O
(	O
c1	int
>=	O
0xd800	int
&&	O
c1	int
<	O
0xe000	int
)	O
comb_tofront	function
(	O
root	int
,	O
c1	int
-	O
0xd800	int
)	O
;	O
i	int
=	O
combchars	pointer
[	O
root	int
]	O
->	O
prev	int
;	O
if	O
(	O
c1	int
==	O
i	int
+	O
0xd800	int
)	O
{	O
debug	O
(	O
"utf8_handle_comp: completely full!\n"	pointer
)	O
;	O
mc	pointer
->	O
image	char
=	O
'?'	O
;	O
mc	pointer
->	O
font	char
=	O
0	int
;	O
return	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
combchars	pointer
[	O
i	int
]	O
)	O
{	O
combchars	pointer
[	O
i	int
]	O
=	O
(	O
struct	O
combchar	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
struct	O
combchar	struct
)	O
)	O
;	O
if	O
(	O
!	O
combchars	pointer
[	O
i	int
]	O
)	O
return	O
;	O
combchars	pointer
[	O
i	int
]	O
->	O
prev	int
=	O
i	int
;	O
combchars	pointer
[	O
i	int
]	O
->	O
next	pointer
=	O
i	int
;	O
}	O
combchars	pointer
[	O
i	int
]	O
->	O
c1	int
=	O
c1	int
;	O
combchars	pointer
[	O
i	int
]	O
->	O
c2	int
=	O
c	int
;	O
mc	pointer
->	O
image	char
=	O
i	int
&	O
0xff	int
;	O
mc	pointer
->	O
font	char
=	O
(	O
i	int
>>	O
8	int
)	O
+	O
0xd8	int
;	O
mc	pointer
->	O
fontx	char
=	O
0	int
;	O
debug3	O
(	O
"combinig char %x %x -> %x\n"	pointer
,	O
c1	int
,	O
c	int
,	O
i	int
+	O
0xd800	int
)	O
;	O
comb_tofront	function
(	O
root	int
,	O
i	int
)	O
;	O
}	O
static	O
int	O
encmatch	function
(	O
s1	pointer
,	O
s2	pointer
)	O
char	O
*	O
s1	pointer
;	O
char	O
*	O
s2	pointer
;	O
{	O
int	O
c1	int
,	O
c2	int
;	O
do	O
{	O
c1	int
=	O
(	O
unsigned	O
char	O
)	O
*	O
s1	pointer
;	O
if	O
(	O
c1	int
>=	O
'A'	O
&&	O
c1	int
<=	O
'Z'	O
)	O
c1	int
+=	O
'a'	O
-	O
'A'	O
;	O
if	O
(	O
!	O
(	O
c1	int
>=	O
'a'	O
&&	O
c1	int
<=	O
'z'	O
)	O
&&	O
!	O
(	O
c1	int
>=	O
'0'	O
&&	O
c1	int
<=	O
'9'	O
)	O
)	O
{	O
s1	pointer
++	O
;	O
continue	O
;	O
}	O
c2	int
=	O
(	O
unsigned	O
char	O
)	O
*	O
s2	pointer
;	O
if	O
(	O
c2	int
>=	O
'A'	O
&&	O
c2	int
<=	O
'Z'	O
)	O
c2	int
+=	O
'a'	O
-	O
'A'	O
;	O
if	O
(	O
!	O
(	O
c2	int
>=	O
'a'	O
&&	O
c2	int
<=	O
'z'	O
)	O
&&	O
!	O
(	O
c2	int
>=	O
'0'	O
&&	O
c2	int
<=	O
'9'	O
)	O
)	O
{	O
s2	pointer
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
c1	int
!=	O
c2	int
)	O
return	O
0	int
;	O
s1	pointer
++	O
;	O
s2	pointer
++	O
;	O
}	O
while	O
(	O
c1	int
)	O
;	O
return	O
1	int
;	O
}	O
int	O
FindEncoding	function
(	O
name	pointer
)	O
char	O
*	O
name	pointer
;	O
{	O
int	O
encoding	int
;	O
debug1	O
(	O
"FindEncoding %s\n"	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
name	pointer
==	O
0	int
||	O
*	O
name	pointer
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
encmatch	function
(	O
name	pointer
,	O
"euc"	pointer
)	O
)	O
name	pointer
=	O
"eucJP"	pointer
;	O
if	O
(	O
encmatch	function
(	O
name	pointer
,	O
"off"	pointer
)	O
||	O
encmatch	function
(	O
name	pointer
,	O
"iso8859-1"	pointer
)	O
)	O
return	O
0	int
;	O
for	O
(	O
encoding	int
=	O
0	int
;	O
encoding	int
<	O
(	O
int	O
)	O
(	O
sizeof	O
(	O
encodings	array
)	O
/	O
sizeof	O
(	O
*	O
encodings	array
)	O
)	O
;	O
encoding	int
++	O
)	O
if	O
(	O
encmatch	function
(	O
name	pointer
,	O
encodings	array
[	O
encoding	int
]	O
.	O
name	pointer
)	O
)	O
{	O
LoadFontTranslationsForEncoding	function
(	O
encoding	int
)	O
;	O
return	O
encoding	int
;	O
}	O
return	O
-	O
1	int
;	O
}	O
char	O
*	O
EncodingName	function
(	O
encoding	int
)	O
int	O
encoding	int
;	O
{	O
if	O
(	O
encoding	int
>=	O
(	O
int	O
)	O
(	O
sizeof	O
(	O
encodings	array
)	O
/	O
sizeof	O
(	O
*	O
encodings	array
)	O
)	O
)	O
return	O
0	int
;	O
return	O
encodings	array
[	O
encoding	int
]	O
.	O
name	pointer
;	O
}	O
int	O
EncodingDefFont	function
(	O
encoding	int
)	O
int	O
encoding	int
;	O
{	O
return	O
encodings	array
[	O
encoding	int
]	O
.	O
deffont	int
;	O
}	O
void	O
ResetEncoding	function
(	O
p	pointer
)	O
struct	O
win	struct
*	O
p	pointer
;	O
{	O
char	O
*	O
c	int
;	O
int	O
encoding	int
=	O
p	pointer
->	O
w_encoding	O
;	O
c	int
=	O
encodings	array
[	O
encoding	int
]	O
.	O
charsets	pointer
;	O
if	O
(	O
c	int
)	O
SetCharsets	function
(	O
p	pointer
,	O
c	int
)	O
;	O
LoadFontTranslationsForEncoding	function
(	O
encoding	int
)	O
;	O
if	O
(	O
encodings	array
[	O
encoding	int
]	O
.	O
usegr	int
)	O
{	O
p	pointer
->	O
w_gr	int
=	O
2	int
;	O
p	pointer
->	O
w_FontE	char
=	O
encodings	array
[	O
encoding	int
]	O
.	O
charsets	pointer
[	O
1	int
]	O
;	O
}	O
else	O
p	pointer
->	O
w_FontE	char
=	O
0	int
;	O
if	O
(	O
encodings	array
[	O
encoding	int
]	O
.	O
noc1	int
)	O
p	pointer
->	O
w_c1	int
=	O
0	int
;	O
}	O
int	O
DecodeChar	function
(	O
c	int
,	O
encoding	int
,	O
statep	pointer
)	O
int	O
c	int
;	O
int	O
encoding	int
;	O
int	O
*	O
statep	pointer
;	O
{	O
int	O
t	int
;	O
debug2	O
(	O
"Decoding char %02x for encoding %d\n"	pointer
,	O
c	int
,	O
encoding	int
)	O
;	O
if	O
(	O
encoding	int
==	O
UTF8	int
)	O
{	O
c	int
=	O
FromUtf8	function
(	O
c	int
,	O
statep	pointer
)	O
;	O
if	O
(	O
c	int
>=	O
0x10000	int
)	O
c	int
=	O
(	O
c	int
&	O
0x7f0000	int
)	O
<<	O
8	int
|	O
(	O
c	int
&	O
0xffff	int
)	O
;	O
return	O
c	int
;	O
}	O
if	O
(	O
encoding	int
==	O
SJIS	int
)	O
{	O
if	O
(	O
!	O
*	O
statep	pointer
)	O
{	O
if	O
(	O
(	O
0x81	int
<=	O
c	int
&&	O
c	int
<=	O
0x9f	int
)	O
||	O
(	O
0xe0	int
<=	O
c	int
&&	O
c	int
<=	O
0xef	int
)	O
)	O
{	O
*	O
statep	pointer
=	O
c	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
c	int
<	O
0x80	int
)	O
return	O
c	int
;	O
return	O
c	int
|	O
(	O
KANA	char
<<	O
16	int
)	O
;	O
}	O
t	int
=	O
c	int
;	O
c	int
=	O
*	O
statep	pointer
;	O
*	O
statep	pointer
=	O
0	int
;	O
if	O
(	O
0x40	int
<=	O
t	int
&&	O
t	int
<=	O
0xfc	int
&&	O
t	int
!=	O
0x7f	int
)	O
{	O
if	O
(	O
c	int
<=	O
0x9f	int
)	O
c	int
=	O
(	O
c	int
-	O
0x81	int
)	O
*	O
2	int
+	O
0x21	int
;	O
else	O
c	int
=	O
(	O
c	int
-	O
0xc1	int
)	O
*	O
2	int
+	O
0x21	int
;	O
if	O
(	O
t	int
<=	O
0x7e	int
)	O
t	int
-=	O
0x1f	int
;	O
else	O
if	O
(	O
t	int
<=	O
0x9e	int
)	O
t	int
-=	O
0x20	int
;	O
else	O
t	int
-=	O
0x7e	int
,	O
c	int
++	O
;	O
return	O
(	O
c	int
<<	O
8	int
)	O
|	O
t	int
|	O
(	O
KANJI	O
<<	O
16	int
)	O
;	O
}	O
return	O
t	int
;	O
}	O
if	O
(	O
encoding	int
==	O
EUC_JP	int
||	O
encoding	int
==	O
EUC_KR	int
||	O
encoding	int
==	O
EUC_CN	int
)	O
{	O
if	O
(	O
!	O
*	O
statep	pointer
)	O
{	O
if	O
(	O
c	int
&	O
0x80	int
)	O
{	O
*	O
statep	pointer
=	O
c	int
;	O
return	O
-	O
1	int
;	O
}	O
return	O
c	int
;	O
}	O
t	int
=	O
c	int
;	O
c	int
=	O
*	O
statep	pointer
;	O
*	O
statep	pointer
=	O
0	int
;	O
if	O
(	O
encoding	int
==	O
EUC_JP	int
)	O
{	O
if	O
(	O
c	int
==	O
0x8e	int
)	O
return	O
t	int
|	O
(	O
KANA	char
<<	O
16	int
)	O
;	O
if	O
(	O
c	int
==	O
0x8f	int
)	O
{	O
*	O
statep	pointer
=	O
t	int
|	O
(	O
KANJI0212	O
<<	O
8	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
c	int
&=	O
0xff7f	int
;	O
t	int
&=	O
0x7f	int
;	O
c	int
=	O
c	int
<<	O
8	int
|	O
t	int
;	O
if	O
(	O
encoding	int
==	O
EUC_KR	int
)	O
return	O
c	int
|	O
(	O
3	int
<<	O
16	int
)	O
;	O
if	O
(	O
encoding	int
==	O
EUC_CN	int
)	O
return	O
c	int
|	O
(	O
1	int
<<	O
16	int
)	O
;	O
if	O
(	O
c	int
&	O
(	O
KANJI0212	O
<<	O
16	int
)	O
)	O
return	O
c	int
;	O
else	O
return	O
c	int
|	O
(	O
KANJI	O
<<	O
16	int
)	O
;	O
}	O
if	O
(	O
encoding	int
==	O
BIG5	int
||	O
encoding	int
==	O
GBK	int
)	O
{	O
if	O
(	O
!	O
*	O
statep	pointer
)	O
{	O
if	O
(	O
c	int
&	O
0x80	int
)	O
{	O
if	O
(	O
encoding	int
==	O
GBK	int
&&	O
c	int
==	O
0x80	int
)	O
return	O
0xa4	int
|	O
(	O
(	O
'b'	O
|	O
0x80	int
)	O
<<	O
16	int
)	O
;	O
*	O
statep	pointer
=	O
c	int
;	O
return	O
-	O
1	int
;	O
}	O
return	O
c	int
;	O
}	O
t	int
=	O
c	int
;	O
c	int
=	O
*	O
statep	pointer
;	O
*	O
statep	pointer
=	O
0	int
;	O
c	int
&=	O
0x7f	int
;	O
return	O
c	int
<<	O
8	int
|	O
t	int
|	O
(	O
encoding	int
==	O
BIG5	int
?	O
030	int
<<	O
16	int
:	O
031	int
<<	O
16	int
)	O
;	O
}	O
return	O
c	int
|	O
(	O
encodings	array
[	O
encoding	int
]	O
.	O
deffont	int
<<	O
16	int
)	O
;	O
}	O
int	O
EncodeChar	function
(	O
bp	pointer
,	O
c	int
,	O
encoding	int
,	O
fontp	pointer
)	O
char	O
*	O
bp	pointer
;	O
int	O
c	int
;	O
int	O
encoding	int
;	O
int	O
*	O
fontp	pointer
;	O
{	O
int	O
t	int
,	O
f	int
,	O
l	int
;	O
debug2	O
(	O
"Encoding char %02x for encoding %d\n"	pointer
,	O
c	int
,	O
encoding	int
)	O
;	O
if	O
(	O
c	int
==	O
-	O
1	int
&&	O
fontp	pointer
)	O
{	O
if	O
(	O
*	O
fontp	pointer
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
bp	pointer
)	O
{	O
*	O
bp	pointer
++	O
=	O
033	int
;	O
*	O
bp	pointer
++	O
=	O
'('	O
;	O
*	O
bp	pointer
++	O
=	O
'B'	O
;	O
}	O
return	O
3	int
;	O
}	O
f	int
=	O
(	O
c	int
>>	O
16	int
)	O
&	O
0xff	int
;	O
if	O
(	O
encoding	int
==	O
UTF8	int
)	O
{	O
if	O
(	O
f	int
)	O
{	O
if	O
(	O
is_dw_font	O
(	O
f	int
)	O
)	O
{	O
int	O
c2	int
=	O
c	int
&	O
0xff	int
;	O
c	int
=	O
(	O
c	int
>>	O
8	int
&	O
0xff	int
)	O
|	O
(	O
f	int
<<	O
8	int
)	O
;	O
c	int
=	O
recode_char_dw_to_encoding	function
(	O
c	int
,	O
&	O
c2	int
,	O
encoding	int
)	O
;	O
}	O
else	O
{	O
c	int
=	O
(	O
c	int
&	O
0xff	int
)	O
|	O
(	O
f	int
<<	O
8	int
)	O
;	O
c	int
=	O
recode_char_to_encoding	function
(	O
c	int
,	O
encoding	int
)	O
;	O
}	O
}	O
return	O
ToUtf8	function
(	O
bp	pointer
,	O
c	int
)	O
;	O
}	O
if	O
(	O
f	int
==	O
0	int
&&	O
(	O
c	int
&	O
0x7f00ff00	int
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
c	int
>=	O
0x10000	int
)	O
c	int
=	O
(	O
c	int
&	O
0x7f0000	int
)	O
>>	O
8	int
|	O
(	O
c	int
&	O
0xffff	int
)	O
;	O
if	O
(	O
utf8_isdouble	function
(	O
c	int
)	O
)	O
{	O
int	O
c2	int
=	O
0xffff	int
;	O
c	int
=	O
recode_char_dw_to_encoding	function
(	O
c	int
,	O
&	O
c2	int
,	O
encoding	int
)	O
;	O
c	int
=	O
(	O
c	int
<<	O
8	int
)	O
|	O
(	O
c2	int
&	O
0xff	int
)	O
;	O
}	O
else	O
{	O
c	int
=	O
recode_char_to_encoding	function
(	O
c	int
,	O
encoding	int
)	O
;	O
c	int
=	O
(	O
(	O
c	int
&	O
0xff00	int
)	O
<<	O
8	int
)	O
|	O
(	O
c	int
&	O
0xff	int
)	O
;	O
}	O
debug1	O
(	O
"Encode: char mapped from utf8 to %x\n"	pointer
,	O
c	int
)	O
;	O
f	int
=	O
c	int
>>	O
16	int
;	O
}	O
if	O
(	O
f	int
&	O
0x80	int
)	O
f	int
=	O
0	int
;	O
if	O
(	O
encoding	int
==	O
SJIS	int
)	O
{	O
if	O
(	O
f	int
==	O
KANA	char
)	O
c	int
=	O
(	O
c	int
&	O
0xff	int
)	O
|	O
0x80	int
;	O
else	O
if	O
(	O
f	int
==	O
KANJI	O
)	O
{	O
if	O
(	O
!	O
bp	pointer
)	O
return	O
2	int
;	O
t	int
=	O
c	int
&	O
0xff	int
;	O
c	int
=	O
(	O
c	int
>>	O
8	int
)	O
&	O
0xff	int
;	O
t	int
+=	O
(	O
c	int
&	O
1	int
)	O
?	O
(	O
(	O
t	int
<=	O
0x5f	int
)	O
?	O
0x1f	int
:	O
0x20	int
)	O
:	O
0x7e	int
;	O
c	int
=	O
(	O
c	int
-	O
0x21	int
)	O
/	O
2	int
+	O
(	O
(	O
c	int
<	O
0x5f	int
)	O
?	O
0x81	int
:	O
0xc1	int
)	O
;	O
*	O
bp	pointer
++	O
=	O
c	int
;	O
*	O
bp	pointer
++	O
=	O
t	int
;	O
return	O
2	int
;	O
}	O
}	O
if	O
(	O
encoding	int
==	O
EUC	O
)	O
{	O
if	O
(	O
f	int
==	O
KANA	char
)	O
{	O
if	O
(	O
bp	pointer
)	O
{	O
*	O
bp	pointer
++	O
=	O
0x8e	int
;	O
*	O
bp	pointer
++	O
=	O
c	int
;	O
}	O
return	O
2	int
;	O
}	O
if	O
(	O
f	int
==	O
KANJI	O
)	O
{	O
if	O
(	O
bp	pointer
)	O
{	O
*	O
bp	pointer
++	O
=	O
(	O
c	int
>>	O
8	int
)	O
|	O
0x80	int
;	O
*	O
bp	pointer
++	O
=	O
c	int
|	O
0x80	int
;	O
}	O
return	O
2	int
;	O
}	O
if	O
(	O
f	int
==	O
KANJI0212	O
)	O
{	O
if	O
(	O
bp	pointer
)	O
{	O
*	O
bp	pointer
++	O
=	O
0x8f	int
;	O
*	O
bp	pointer
++	O
=	O
c	int
>>	O
8	int
;	O
*	O
bp	pointer
++	O
=	O
c	int
;	O
}	O
return	O
3	int
;	O
}	O
}	O
if	O
(	O
(	O
encoding	int
==	O
EUC_KR	int
&&	O
f	int
==	O
3	int
)	O
||	O
(	O
encoding	int
==	O
EUC_CN	int
&&	O
f	int
==	O
1	int
)	O
)	O
{	O
if	O
(	O
bp	pointer
)	O
{	O
*	O
bp	pointer
++	O
=	O
(	O
c	int
>>	O
8	int
)	O
|	O
0x80	int
;	O
*	O
bp	pointer
++	O
=	O
c	int
|	O
0x80	int
;	O
}	O
return	O
2	int
;	O
}	O
if	O
(	O
(	O
encoding	int
==	O
BIG5	int
&&	O
f	int
==	O
030	int
)	O
||	O
(	O
encoding	int
==	O
GBK	int
&&	O
f	int
==	O
031	int
)	O
)	O
{	O
if	O
(	O
bp	pointer
)	O
{	O
*	O
bp	pointer
++	O
=	O
(	O
c	int
>>	O
8	int
)	O
|	O
0x80	int
;	O
*	O
bp	pointer
++	O
=	O
c	int
;	O
}	O
return	O
2	int
;	O
}	O
if	O
(	O
encoding	int
==	O
GBK	int
&&	O
f	int
==	O
0	int
&&	O
c	int
==	O
0xa4	int
)	O
c	int
=	O
0x80	int
;	O
l	int
=	O
0	int
;	O
if	O
(	O
fontp	pointer
&&	O
f	int
!=	O
*	O
fontp	pointer
)	O
{	O
*	O
fontp	pointer
=	O
f	int
;	O
if	O
(	O
f	int
&&	O
f	int
<	O
' '	O
)	O
{	O
if	O
(	O
bp	pointer
)	O
{	O
*	O
bp	pointer
++	O
=	O
033	int
;	O
*	O
bp	pointer
++	O
=	O
'$'	O
;	O
if	O
(	O
f	int
>	O
2	int
)	O
*	O
bp	pointer
++	O
=	O
'('	O
;	O
*	O
bp	pointer
++	O
=	O
'@'	O
+	O
f	int
;	O
}	O
l	int
+=	O
f	int
>	O
2	int
?	O
4	int
:	O
3	int
;	O
}	O
else	O
if	O
(	O
f	int
<	O
128	int
)	O
{	O
if	O
(	O
f	int
==	O
0	int
)	O
f	int
=	O
'B'	O
;	O
if	O
(	O
bp	pointer
)	O
{	O
*	O
bp	pointer
++	O
=	O
033	int
;	O
*	O
bp	pointer
++	O
=	O
'('	O
;	O
*	O
bp	pointer
++	O
=	O
f	int
;	O
}	O
l	int
+=	O
3	int
;	O
}	O
}	O
if	O
(	O
c	int
&	O
0xff00	int
)	O
{	O
if	O
(	O
bp	pointer
)	O
*	O
bp	pointer
++	O
=	O
c	int
>>	O
8	int
;	O
l	int
++	O
;	O
}	O
if	O
(	O
bp	pointer
)	O
*	O
bp	pointer
++	O
=	O
c	int
;	O
return	O
l	int
+	O
1	int
;	O
}	O
int	O
CanEncodeFont	function
(	O
encoding	int
,	O
f	int
)	O
int	O
encoding	int
,	O
f	int
;	O
{	O
switch	O
(	O
encoding	int
)	O
{	O
case	O
UTF8	int
:	O
return	O
1	int
;	O
case	O
SJIS	int
:	O
return	O
f	int
==	O
KANJI	O
||	O
f	int
==	O
KANA	char
;	O
case	O
EUC	O
:	O
return	O
f	int
==	O
KANJI	O
||	O
f	int
==	O
KANA	char
||	O
f	int
==	O
KANJI0212	O
;	O
case	O
EUC_KR	int
:	O
return	O
f	int
==	O
3	int
;	O
case	O
EUC_CN	int
:	O
return	O
f	int
==	O
1	int
;	O
case	O
BIG5	int
:	O
return	O
f	int
==	O
030	int
;	O
case	O
GBK	int
:	O
return	O
f	int
==	O
031	int
;	O
default	O
:	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
PrepareEncodedChar	function
(	O
c	int
)	O
int	O
c	int
;	O
{	O
int	O
encoding	int
;	O
int	O
t	int
=	O
0	int
;	O
int	O
f	int
;	O
encoding	int
=	O
D_encoding	O
;	O
f	int
=	O
D_rend	O
.	O
font	char
;	O
t	int
=	O
D_mbcs	O
;	O
if	O
(	O
encoding	int
==	O
SJIS	int
)	O
{	O
if	O
(	O
f	int
==	O
KANA	char
)	O
return	O
c	int
|	O
0x80	int
;	O
else	O
if	O
(	O
f	int
==	O
KANJI	O
)	O
{	O
t	int
+=	O
(	O
c	int
&	O
1	int
)	O
?	O
(	O
(	O
t	int
<=	O
0x5f	int
)	O
?	O
0x1f	int
:	O
0x20	int
)	O
:	O
0x7e	int
;	O
c	int
=	O
(	O
c	int
-	O
0x21	int
)	O
/	O
2	int
+	O
(	O
(	O
c	int
<	O
0x5f	int
)	O
?	O
0x81	int
:	O
0xc1	int
)	O
;	O
D_mbcs	O
=	O
t	int
;	O
}	O
return	O
c	int
;	O
}	O
if	O
(	O
encoding	int
==	O
EUC	O
)	O
{	O
if	O
(	O
f	int
==	O
KANA	char
)	O
{	O
AddChar	O
(	O
0x8e	int
)	O
;	O
return	O
c	int
|	O
0x80	int
;	O
}	O
if	O
(	O
f	int
==	O
KANJI	O
)	O
{	O
D_mbcs	O
=	O
t	int
|	O
0x80	int
;	O
return	O
c	int
|	O
0x80	int
;	O
}	O
if	O
(	O
f	int
==	O
KANJI0212	O
)	O
{	O
AddChar	O
(	O
0x8f	int
)	O
;	O
D_mbcs	O
=	O
t	int
|	O
0x80	int
;	O
return	O
c	int
|	O
0x80	int
;	O
}	O
}	O
if	O
(	O
(	O
encoding	int
==	O
EUC_KR	int
&&	O
f	int
==	O
3	int
)	O
||	O
(	O
encoding	int
==	O
EUC_CN	int
&&	O
f	int
==	O
1	int
)	O
)	O
{	O
D_mbcs	O
=	O
t	int
|	O
0x80	int
;	O
return	O
c	int
|	O
0x80	int
;	O
}	O
if	O
(	O
(	O
encoding	int
==	O
BIG5	int
&&	O
f	int
==	O
030	int
)	O
||	O
(	O
encoding	int
==	O
GBK	int
&&	O
f	int
==	O
031	int
)	O
)	O
return	O
c	int
|	O
0x80	int
;	O
return	O
c	int
;	O
}	O
int	O
RecodeBuf	function
(	O
fbuf	pointer
,	O
flen	int
,	O
fenc	int
,	O
tenc	int
,	O
tbuf	pointer
)	O
unsigned	O
char	O
*	O
fbuf	pointer
;	O
int	O
flen	int
;	O
int	O
fenc	int
,	O
tenc	int
;	O
unsigned	O
char	O
*	O
tbuf	pointer
;	O
{	O
int	O
c	int
,	O
i	int
,	O
j	int
;	O
int	O
decstate	int
=	O
0	int
,	O
font	char
=	O
0	int
;	O
for	O
(	O
i	int
=	O
j	int
=	O
0	int
;	O
i	int
<	O
flen	int
;	O
i	int
++	O
)	O
{	O
c	int
=	O
fbuf	pointer
[	O
i	int
]	O
;	O
c	int
=	O
DecodeChar	function
(	O
c	int
,	O
fenc	int
,	O
&	O
decstate	int
)	O
;	O
if	O
(	O
c	int
==	O
-	O
2	int
)	O
i	int
--	O
;	O
if	O
(	O
c	int
<	O
0	int
)	O
continue	O
;	O
j	int
+=	O
EncodeChar	function
(	O
tbuf	pointer
?	O
(	O
char	O
*	O
)	O
tbuf	pointer
+	O
j	int
:	O
0	int
,	O
c	int
,	O
tenc	int
,	O
&	O
font	char
)	O
;	O
}	O
j	int
+=	O
EncodeChar	function
(	O
tbuf	pointer
?	O
(	O
char	O
*	O
)	O
tbuf	pointer
+	O
j	int
:	O
0	int
,	O
-	O
1	int
,	O
tenc	int
,	O
&	O
font	char
)	O
;	O
return	O
j	int
;	O
}	O
int	O
ContainsSpecialDeffont	function
(	O
ml	pointer
,	O
xs	int
,	O
xe	int
,	O
encoding	int
)	O
struct	O
mline	struct
*	O
ml	pointer
;	O
int	O
xs	int
,	O
xe	int
;	O
int	O
encoding	int
;	O
{	O
unsigned	O
char	O
*	O
f	int
,	O
*	O
i	int
;	O
int	O
c	int
,	O
x	int
,	O
dx	int
;	O
if	O
(	O
encoding	int
==	O
UTF8	int
||	O
encodings	array
[	O
encoding	int
]	O
.	O
deffont	int
==	O
0	int
)	O
return	O
0	int
;	O
i	int
=	O
ml	pointer
->	O
image	char
+	O
xs	int
;	O
f	int
=	O
ml	pointer
->	O
font	char
+	O
xs	int
;	O
dx	int
=	O
xe	int
-	O
xs	int
+	O
1	int
;	O
while	O
(	O
dx	int
--	O
>	O
0	int
)	O
{	O
if	O
(	O
*	O
f	int
++	O
)	O
continue	O
;	O
c	int
=	O
*	O
i	int
++	O
;	O
x	int
=	O
recode_char_to_encoding	function
(	O
c	int
|	O
(	O
encodings	array
[	O
encoding	int
]	O
.	O
deffont	int
<<	O
8	int
)	O
,	O
UTF8	int
)	O
;	O
if	O
(	O
c	int
!=	O
x	int
)	O
{	O
debug2	O
(	O
"ContainsSpecialDeffont: yes %02x != %02x\n"	pointer
,	O
c	int
,	O
x	int
)	O
;	O
return	O
1	int
;	O
}	O
}	O
debug	O
(	O
"ContainsSpecialDeffont: no\n"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
LoadFontTranslation	function
(	O
font	char
,	O
file	pointer
)	O
int	O
font	char
;	O
char	O
*	O
file	pointer
;	O
{	O
char	O
buf	pointer
[	O
1024	int
]	O
,	O
*	O
myfile	pointer
;	O
FILE	struct
*	O
f	int
;	O
int	O
i	int
;	O
int	O
fo	int
;	O
int	O
x	int
,	O
u	pointer
,	O
c	int
,	O
ok	int
;	O
unsigned	O
short	O
(	O
*	O
p	pointer
)	O
[	O
2	int
]	O
,	O
(	O
*	O
tab	pointer
)	O
[	O
2	int
]	O
;	O
myfile	pointer
=	O
file	pointer
;	O
if	O
(	O
myfile	pointer
==	O
0	int
)	O
{	O
if	O
(	O
font	char
==	O
0	int
||	O
screenencodings	pointer
==	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
strlen	function
(	O
screenencodings	pointer
)	O
>	O
sizeof	O
(	O
buf	pointer
)	O
-	O
10	int
)	O
return	O
-	O
1	int
;	O
sprintf	function
(	O
buf	pointer
,	O
"%s/%02x"	pointer
,	O
screenencodings	pointer
,	O
font	char
&	O
0xff	int
)	O
;	O
myfile	pointer
=	O
buf	pointer
;	O
}	O
debug1	O
(	O
"LoadFontTranslation: trying %s\n"	pointer
,	O
myfile	pointer
)	O
;	O
if	O
(	O
(	O
f	int
=	O
secfopen	function
(	O
myfile	pointer
,	O
"r"	pointer
)	O
)	O
==	O
0	int
)	O
return	O
-	O
1	int
;	O
i	int
=	O
ok	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
for	O
(	O
;	O
i	int
<	O
12	int
;	O
i	int
++	O
)	O
if	O
(	O
getc	function
(	O
f	int
)	O
!=	O
"ScreenI2UTF8"	pointer
[	O
i	int
]	O
)	O
break	O
;	O
if	O
(	O
getc	function
(	O
f	int
)	O
!=	O
0	int
)	O
break	O
;	O
fo	int
=	O
getc	function
(	O
f	int
)	O
;	O
if	O
(	O
fo	int
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
font	char
!=	O
-	O
1	int
&&	O
font	char
!=	O
fo	int
)	O
break	O
;	O
i	int
=	O
getc	function
(	O
f	int
)	O
;	O
x	int
=	O
getc	function
(	O
f	int
)	O
;	O
if	O
(	O
x	int
==	O
EOF	O
)	O
break	O
;	O
i	int
=	O
i	int
<<	O
8	int
|	O
x	int
;	O
getc	function
(	O
f	int
)	O
;	O
while	O
(	O
(	O
x	int
=	O
getc	function
(	O
f	int
)	O
)	O
&&	O
x	int
!=	O
EOF	O
)	O
getc	function
(	O
f	int
)	O
;	O
if	O
(	O
(	O
p	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
p	pointer
)	O
*	O
(	O
i	int
+	O
1	int
)	O
)	O
)	O
==	O
0	int
)	O
break	O
;	O
tab	pointer
=	O
p	pointer
;	O
while	O
(	O
i	int
>	O
0	int
)	O
{	O
x	int
=	O
getc	function
(	O
f	int
)	O
;	O
x	int
=	O
x	int
<<	O
8	int
|	O
getc	function
(	O
f	int
)	O
;	O
u	pointer
=	O
getc	function
(	O
f	int
)	O
;	O
c	int
=	O
getc	function
(	O
f	int
)	O
;	O
u	pointer
=	O
u	pointer
<<	O
8	int
|	O
c	int
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
(	O
*	O
p	pointer
)	O
[	O
0	int
]	O
=	O
x	int
;	O
(	O
*	O
p	pointer
)	O
[	O
1	int
]	O
=	O
u	pointer
;	O
p	pointer
++	O
;	O
i	int
--	O
;	O
}	O
(	O
*	O
p	pointer
)	O
[	O
0	int
]	O
=	O
0	int
;	O
(	O
*	O
p	pointer
)	O
[	O
1	int
]	O
=	O
0	int
;	O
if	O
(	O
i	int
||	O
(	O
tab	pointer
[	O
0	int
]	O
[	O
0	int
]	O
&	O
0x8000	int
)	O
)	O
{	O
free	function
(	O
tab	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
recodetabs	array
[	O
fo	int
]	O
.	O
tab	pointer
&&	O
(	O
recodetabs	array
[	O
fo	int
]	O
.	O
flags	int
&	O
RECODETAB_ALLOCED	int
)	O
!=	O
0	int
)	O
free	function
(	O
recodetabs	array
[	O
fo	int
]	O
.	O
tab	pointer
)	O
;	O
recodetabs	array
[	O
fo	int
]	O
.	O
tab	pointer
=	O
tab	pointer
;	O
recodetabs	array
[	O
fo	int
]	O
.	O
flags	int
=	O
RECODETAB_ALLOCED	int
;	O
debug1	O
(	O
"Successful load of recodetab %02x\n"	pointer
,	O
fo	int
)	O
;	O
c	int
=	O
getc	function
(	O
f	int
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
ok	int
=	O
1	int
;	O
break	O
;	O
}	O
if	O
(	O
c	int
!=	O
'S'	O
)	O
break	O
;	O
i	int
=	O
1	int
;	O
}	O
fclose	function
(	O
f	int
)	O
;	O
if	O
(	O
font	char
!=	O
-	O
1	int
&&	O
file	pointer
==	O
0	int
&&	O
recodetabs	array
[	O
font	char
]	O
.	O
flags	int
==	O
0	int
)	O
recodetabs	array
[	O
font	char
]	O
.	O
flags	int
=	O
RECODETAB_TRIED	int
;	O
return	O
ok	int
?	O
0	int
:	O
-	O
1	int
;	O
}	O
void	O
LoadFontTranslationsForEncoding	function
(	O
encoding	int
)	O
int	O
encoding	int
;	O
{	O
char	O
*	O
c	int
;	O
int	O
f	int
;	O
debug1	O
(	O
"LoadFontTranslationsForEncoding: encoding %d\n"	pointer
,	O
encoding	int
)	O
;	O
if	O
(	O
(	O
c	int
=	O
encodings	array
[	O
encoding	int
]	O
.	O
fontlist	pointer
)	O
!=	O
0	int
)	O
while	O
(	O
(	O
f	int
=	O
(	O
unsigned	O
char	O
)	O
*	O
c	int
++	O
)	O
!=	O
0	int
)	O
if	O
(	O
recodetabs	array
[	O
f	int
]	O
.	O
flags	int
==	O
0	int
)	O
LoadFontTranslation	function
(	O
f	int
,	O
0	int
)	O
;	O
f	int
=	O
encodings	array
[	O
encoding	int
]	O
.	O
deffont	int
;	O
if	O
(	O
f	int
>	O
0	int
&&	O
recodetabs	array
[	O
f	int
]	O
.	O
flags	int
==	O
0	int
)	O
LoadFontTranslation	function
(	O
f	int
,	O
0	int
)	O
;	O
}	O
