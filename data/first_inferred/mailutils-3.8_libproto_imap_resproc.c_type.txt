struct	O
mu_kwd	struct
mu_imap_response_codes	array
[	O
]	O
=	O
{	O
{	O
"ALERT"	pointer
,	O
MU_IMAP_RESPONSE_ALERT	int
}	O
,	O
{	O
"BADCHARSET"	pointer
,	O
MU_IMAP_RESPONSE_BADCHARSET	int
}	O
,	O
{	O
"CAPABILITY"	pointer
,	O
MU_IMAP_RESPONSE_CAPABILITY	int
}	O
,	O
{	O
"PARSE"	pointer
,	O
MU_IMAP_RESPONSE_PARSE	int
}	O
,	O
{	O
"PERMANENTFLAGS"	pointer
,	O
MU_IMAP_RESPONSE_PERMANENTFLAGS	int
}	O
,	O
{	O
"READ-ONLY"	pointer
,	O
MU_IMAP_RESPONSE_READ_ONLY	int
}	O
,	O
{	O
"READ-WRITE"	pointer
,	O
MU_IMAP_RESPONSE_READ_WRITE	int
}	O
,	O
{	O
"TRYCREATE"	pointer
,	O
MU_IMAP_RESPONSE_TRYCREATE	int
}	O
,	O
{	O
"UIDNEXT"	pointer
,	O
MU_IMAP_RESPONSE_UIDNEXT	int
}	O
,	O
{	O
"UIDVALIDITY"	pointer
,	O
MU_IMAP_RESPONSE_UIDVALIDITY	int
}	O
,	O
{	O
"UNSEEN"	pointer
,	O
MU_IMAP_RESPONSE_UNSEEN	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
int	O
parse_response_code	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
mu_list_t	pointer
resp	pointer
)	O
{	O
struct	O
imap_list_element	struct
*	O
arg	pointer
;	O
int	O
rcode	int
=	O
-	O
1	int
;	O
arg	pointer
=	O
_mu_imap_list_at	function
(	O
resp	pointer
,	O
1	int
)	O
;	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
-	O
1	int
;	O
if	O
(	O
_mu_imap_list_element_is_string	function
(	O
arg	pointer
,	O
"["	pointer
)	O
)	O
{	O
arg	pointer
=	O
_mu_imap_list_at	function
(	O
resp	pointer
,	O
2	int
)	O
;	O
if	O
(	O
!	O
arg	pointer
||	O
arg	pointer
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
mu_kwd_xlat_name	function
(	O
mu_imap_response_codes	array
,	O
arg	pointer
->	O
v	union
.	O
string	pointer
,	O
&	O
rcode	int
)	O
)	O
return	O
-	O
1	int
;	O
arg	pointer
=	O
_mu_imap_list_at	function
(	O
resp	pointer
,	O
4	int
)	O
;	O
if	O
(	O
!	O
arg	pointer
||	O
!	O
_mu_imap_list_element_is_string	function
(	O
arg	pointer
,	O
"]"	pointer
)	O
)	O
return	O
-	O
1	int
;	O
}	O
return	O
rcode	int
;	O
}	O
static	O
void	O
ok_response	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
mu_list_t	pointer
resp	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
imap_list_element	struct
*	O
arg	pointer
;	O
int	O
rcode	int
;	O
size_t	long
n	long
=	O
0	int
;	O
char	O
*	O
p	pointer
;	O
rcode	int
=	O
parse_response_code	function
(	O
imap	pointer
,	O
resp	pointer
)	O
;	O
switch	O
(	O
rcode	int
)	O
{	O
case	O
MU_IMAP_RESPONSE_PERMANENTFLAGS	int
:	O
arg	pointer
=	O
_mu_imap_list_at	function
(	O
resp	pointer
,	O
3	int
)	O
;	O
if	O
(	O
!	O
arg	pointer
||	O
_mu_imap_collect_flags	function
(	O
arg	pointer
,	O
&	O
imap	pointer
->	O
mbox_stat	struct
.	O
permanent_flags	int
)	O
)	O
break	O
;	O
imap	pointer
->	O
mbox_stat	struct
.	O
flags	int
|=	O
MU_IMAP_STAT_PERMANENT_FLAGS	int
;	O
mu_imap_callback	function
(	O
imap	pointer
,	O
MU_IMAP_CB_PERMANENT_FLAGS	int
,	O
0	int
,	O
&	O
imap	pointer
->	O
mbox_stat	struct
)	O
;	O
return	O
;	O
case	O
MU_IMAP_RESPONSE_UIDNEXT	int
:	O
arg	pointer
=	O
_mu_imap_list_at	function
(	O
resp	pointer
,	O
3	int
)	O
;	O
if	O
(	O
!	O
arg	pointer
||	O
arg	pointer
->	O
type	int
!=	O
imap_eltype_string	int
)	O
break	O
;	O
n	long
=	O
strtoul	function
(	O
arg	pointer
->	O
v	union
.	O
string	pointer
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	pointer
==	O
0	int
)	O
{	O
imap	pointer
->	O
mbox_stat	struct
.	O
uidnext	long
=	O
n	long
;	O
imap	pointer
->	O
mbox_stat	struct
.	O
flags	int
|=	O
MU_IMAP_STAT_UIDNEXT	int
;	O
mu_imap_callback	function
(	O
imap	pointer
,	O
MU_IMAP_CB_UIDNEXT	int
,	O
0	int
,	O
&	O
imap	pointer
->	O
mbox_stat	struct
)	O
;	O
}	O
return	O
;	O
case	O
MU_IMAP_RESPONSE_UIDVALIDITY	int
:	O
arg	pointer
=	O
_mu_imap_list_at	function
(	O
resp	pointer
,	O
3	int
)	O
;	O
if	O
(	O
!	O
arg	pointer
||	O
arg	pointer
->	O
type	int
!=	O
imap_eltype_string	int
)	O
break	O
;	O
n	long
=	O
strtoul	function
(	O
arg	pointer
->	O
v	union
.	O
string	pointer
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	pointer
==	O
0	int
)	O
{	O
imap	pointer
->	O
mbox_stat	struct
.	O
uidvalidity	long
=	O
n	long
;	O
imap	pointer
->	O
mbox_stat	struct
.	O
flags	int
|=	O
MU_IMAP_STAT_UIDVALIDITY	int
;	O
mu_imap_callback	function
(	O
imap	pointer
,	O
MU_IMAP_CB_UIDVALIDITY	int
,	O
0	int
,	O
&	O
imap	pointer
->	O
mbox_stat	struct
)	O
;	O
}	O
return	O
;	O
case	O
MU_IMAP_RESPONSE_UNSEEN	int
:	O
arg	pointer
=	O
_mu_imap_list_at	function
(	O
resp	pointer
,	O
3	int
)	O
;	O
if	O
(	O
!	O
arg	pointer
||	O
arg	pointer
->	O
type	int
!=	O
imap_eltype_string	int
)	O
break	O
;	O
n	long
=	O
strtoul	function
(	O
arg	pointer
->	O
v	union
.	O
string	pointer
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	pointer
==	O
0	int
)	O
{	O
imap	pointer
->	O
mbox_stat	struct
.	O
first_unseen	long
=	O
n	long
;	O
imap	pointer
->	O
mbox_stat	struct
.	O
flags	int
|=	O
MU_IMAP_STAT_FIRST_UNSEEN	int
;	O
mu_imap_callback	function
(	O
imap	pointer
,	O
MU_IMAP_CB_FIRST_UNSEEN	int
,	O
0	int
,	O
&	O
imap	pointer
->	O
mbox_stat	struct
)	O
;	O
}	O
return	O
;	O
}	O
if	O
(	O
mu_list_tail	function
(	O
resp	pointer
,	O
(	O
void	O
*	O
)	O
&	O
arg	pointer
)	O
||	O
arg	pointer
->	O
type	int
!=	O
imap_eltype_string	int
)	O
arg	pointer
=	O
NULL	O
;	O
mu_imap_callback	function
(	O
imap	pointer
,	O
MU_IMAP_CB_OK	int
,	O
rcode	int
,	O
arg	pointer
?	O
arg	pointer
->	O
v	union
.	O
string	pointer
:	O
NULL	O
)	O
;	O
if	O
(	O
imap	pointer
->	O
client_state	enum
==	O
MU_IMAP_CLIENT_GREETINGS	int
)	O
{	O
imap	pointer
->	O
client_state	enum
=	O
MU_IMAP_CLIENT_READY	int
;	O
imap	pointer
->	O
session_state	enum
=	O
MU_IMAP_SESSION_NONAUTH	int
;	O
}	O
}	O
static	O
void	O
default_response	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
int	O
code	int
,	O
mu_list_t	pointer
resp	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
imap_list_element	struct
*	O
arg	pointer
;	O
if	O
(	O
mu_list_tail	function
(	O
resp	pointer
,	O
(	O
void	O
*	O
)	O
&	O
arg	pointer
)	O
||	O
arg	pointer
->	O
type	int
!=	O
imap_eltype_string	int
)	O
arg	pointer
=	O
NULL	O
;	O
mu_imap_callback	function
(	O
imap	pointer
,	O
code	int
,	O
parse_response_code	function
(	O
imap	pointer
,	O
resp	pointer
)	O
,	O
arg	pointer
?	O
arg	pointer
->	O
v	union
.	O
string	pointer
:	O
NULL	O
)	O
;	O
}	O
static	O
void	O
no_response	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
mu_list_t	pointer
resp	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
default_response	function
(	O
imap	pointer
,	O
MU_IMAP_CB_NO	int
,	O
resp	pointer
,	O
data	pointer
)	O
;	O
if	O
(	O
imap	pointer
->	O
client_state	enum
==	O
MU_IMAP_CLIENT_GREETINGS	int
)	O
imap	pointer
->	O
client_state	enum
=	O
MU_IMAP_CLIENT_ERROR	int
;	O
}	O
static	O
void	O
bad_response	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
mu_list_t	pointer
resp	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
default_response	function
(	O
imap	pointer
,	O
MU_IMAP_CB_BAD	int
,	O
resp	pointer
,	O
data	pointer
)	O
;	O
if	O
(	O
imap	pointer
->	O
client_state	enum
==	O
MU_IMAP_CLIENT_GREETINGS	int
)	O
imap	pointer
->	O
client_state	enum
=	O
MU_IMAP_CLIENT_ERROR	int
;	O
}	O
static	O
void	O
bye_response	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
mu_list_t	pointer
resp	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
default_response	function
(	O
imap	pointer
,	O
MU_IMAP_CB_BYE	int
,	O
resp	pointer
,	O
data	pointer
)	O
;	O
imap	pointer
->	O
client_state	enum
=	O
MU_IMAP_CLIENT_CLOSING	int
;	O
}	O
static	O
void	O
preauth_response	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
mu_list_t	pointer
resp	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
if	O
(	O
imap	pointer
->	O
client_state	enum
==	O
MU_IMAP_CLIENT_GREETINGS	int
)	O
{	O
struct	O
imap_list_element	struct
*	O
arg	pointer
;	O
if	O
(	O
mu_list_tail	function
(	O
resp	pointer
,	O
(	O
void	O
*	O
)	O
&	O
arg	pointer
)	O
||	O
arg	pointer
->	O
type	int
!=	O
imap_eltype_string	int
)	O
arg	pointer
=	O
NULL	O
;	O
mu_imap_callback	function
(	O
imap	pointer
,	O
MU_IMAP_CB_PREAUTH	int
,	O
parse_response_code	function
(	O
imap	pointer
,	O
resp	pointer
)	O
,	O
arg	pointer
?	O
arg	pointer
->	O
v	union
.	O
string	pointer
:	O
NULL	O
)	O
;	O
imap	pointer
->	O
client_state	enum
=	O
MU_IMAP_CLIENT_READY	int
;	O
imap	pointer
->	O
session_state	enum
=	O
MU_IMAP_SESSION_AUTH	int
;	O
}	O
else	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"ignoring unexpected PREAUTH response"	pointer
)	O
)	O
;	O
}	O
struct	O
response_closure	struct
{	O
mu_imap_t	pointer
imap	pointer
;	O
mu_imap_response_action_t	pointer
fun	pointer
;	O
void	O
*	O
data	pointer
;	O
}	O
;	O
struct	O
resptab	struct
{	O
char	O
*	O
name	pointer
;	O
mu_imap_response_action_t	pointer
action	pointer
;	O
int	O
code	int
;	O
}	O
;	O
static	O
struct	O
resptab	struct
resptab	struct
[	O
]	O
=	O
{	O
{	O
"OK"	pointer
,	O
ok_response	function
}	O
,	O
{	O
"NO"	pointer
,	O
no_response	function
}	O
,	O
{	O
"BAD"	pointer
,	O
bad_response	function
}	O
,	O
{	O
"PREAUTH"	pointer
,	O
preauth_response	function
}	O
,	O
{	O
"BYE"	pointer
,	O
bye_response	function
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
int	O
_std_unsolicited_response	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
size_t	long
count	long
,	O
mu_list_t	pointer
resp	pointer
)	O
{	O
struct	O
resptab	struct
*	O
rp	pointer
;	O
struct	O
imap_list_element	struct
*	O
arg	pointer
=	O
_mu_imap_list_at	function
(	O
resp	pointer
,	O
0	int
)	O
;	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
1	int
;	O
if	O
(	O
arg	pointer
->	O
type	int
==	O
imap_eltype_string	int
)	O
for	O
(	O
rp	pointer
=	O
resptab	struct
;	O
rp	pointer
->	O
name	pointer
;	O
rp	pointer
++	O
)	O
{	O
if	O
(	O
mu_c_strcasecmp	function
(	O
rp	pointer
->	O
name	pointer
,	O
arg	pointer
->	O
v	union
.	O
string	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
!	O
rp	pointer
->	O
action	pointer
)	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE9	int
,	O
(	O
"%s:%d: ignoring %s response"	pointer
,	O
__FILE__	O
,	O
__LINE__	O
,	O
rp	pointer
->	O
name	pointer
)	O
)	O
;	O
else	O
rp	pointer
->	O
action	pointer
(	O
imap	pointer
,	O
resp	pointer
,	O
NULL	O
)	O
;	O
return	O
0	int
;	O
}	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
_process_unsolicited_response	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
mu_list_t	pointer
resp	pointer
)	O
{	O
size_t	long
count	long
;	O
struct	O
imap_list_element	struct
*	O
arg	pointer
;	O
if	O
(	O
mu_list_count	function
(	O
resp	pointer
,	O
&	O
count	long
)	O
)	O
return	O
1	int
;	O
if	O
(	O
_std_unsolicited_response	function
(	O
imap	pointer
,	O
count	long
,	O
resp	pointer
)	O
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
count	long
==	O
2	int
)	O
{	O
size_t	long
n	long
;	O
char	O
*	O
p	pointer
;	O
arg	pointer
=	O
_mu_imap_list_at	function
(	O
resp	pointer
,	O
1	int
)	O
;	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
1	int
;	O
if	O
(	O
_mu_imap_list_element_is_string	function
(	O
arg	pointer
,	O
"EXISTS"	pointer
)	O
)	O
{	O
arg	pointer
=	O
_mu_imap_list_at	function
(	O
resp	pointer
,	O
0	int
)	O
;	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
1	int
;	O
n	long
=	O
strtoul	function
(	O
arg	pointer
->	O
v	union
.	O
string	pointer
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
return	O
1	int
;	O
imap	pointer
->	O
mbox_stat	struct
.	O
message_count	long
=	O
n	long
;	O
imap	pointer
->	O
mbox_stat	struct
.	O
flags	int
|=	O
MU_IMAP_STAT_MESSAGE_COUNT	int
;	O
mu_imap_callback	function
(	O
imap	pointer
,	O
MU_IMAP_CB_MESSAGE_COUNT	int
,	O
0	int
,	O
&	O
imap	pointer
->	O
mbox_stat	struct
)	O
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
_mu_imap_list_element_is_string	function
(	O
arg	pointer
,	O
"RECENT"	pointer
)	O
)	O
{	O
arg	pointer
=	O
_mu_imap_list_at	function
(	O
resp	pointer
,	O
0	int
)	O
;	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
1	int
;	O
n	long
=	O
strtoul	function
(	O
arg	pointer
->	O
v	union
.	O
string	pointer
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
return	O
1	int
;	O
imap	pointer
->	O
mbox_stat	struct
.	O
recent_count	long
=	O
n	long
;	O
imap	pointer
->	O
mbox_stat	struct
.	O
flags	int
|=	O
MU_IMAP_STAT_RECENT_COUNT	int
;	O
mu_imap_callback	function
(	O
imap	pointer
,	O
MU_IMAP_CB_RECENT_COUNT	int
,	O
0	int
,	O
&	O
imap	pointer
->	O
mbox_stat	struct
)	O
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
_mu_imap_list_element_is_string	function
(	O
arg	pointer
,	O
"EXPUNGE"	pointer
)	O
)	O
{	O
arg	pointer
=	O
_mu_imap_list_at	function
(	O
resp	pointer
,	O
0	int
)	O
;	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
1	int
;	O
n	long
=	O
strtoul	function
(	O
arg	pointer
->	O
v	union
.	O
string	pointer
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
return	O
1	int
;	O
if	O
(	O
(	O
imap	pointer
->	O
mbox_stat	struct
.	O
flags	int
&	O
MU_IMAP_STAT_MESSAGE_COUNT	int
)	O
&&	O
imap	pointer
->	O
mbox_stat	struct
.	O
message_count	long
>	O
0	int
)	O
imap	pointer
->	O
mbox_stat	struct
.	O
message_count	long
--	O
;	O
imap	pointer
->	O
mbox_stat	struct
.	O
flags	int
&=	O
~	O
MU_IMAP_STAT_RECENT_COUNT	int
;	O
mu_imap_callback	function
(	O
imap	pointer
,	O
MU_IMAP_CB_EXPUNGE	int
,	O
n	long
,	O
&	O
imap	pointer
->	O
mbox_stat	struct
)	O
;	O
return	O
0	int
;	O
}	O
}	O
else	O
if	O
(	O
count	long
==	O
3	int
&&	O
_mu_imap_list_nth_element_is_string	function
(	O
resp	pointer
,	O
1	int
,	O
"FETCH"	pointer
)	O
)	O
{	O
size_t	long
msgno	long
;	O
arg	pointer
=	O
_mu_imap_list_at	function
(	O
resp	pointer
,	O
0	int
)	O
;	O
if	O
(	O
arg	pointer
&&	O
arg	pointer
->	O
type	int
==	O
imap_eltype_string	int
)	O
{	O
char	O
*	O
p	pointer
;	O
msgno	long
=	O
strtoul	function
(	O
arg	pointer
->	O
v	union
.	O
string	pointer
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
return	O
1	int
;	O
arg	pointer
=	O
_mu_imap_list_at	function
(	O
resp	pointer
,	O
2	int
)	O
;	O
if	O
(	O
arg	pointer
->	O
type	int
==	O
imap_eltype_list	int
)	O
{	O
mu_list_t	pointer
list	pointer
;	O
if	O
(	O
_mu_imap_parse_fetch_response	function
(	O
arg	pointer
->	O
v	union
.	O
list	pointer
,	O
&	O
list	pointer
)	O
==	O
0	int
)	O
{	O
mu_imap_callback	function
(	O
imap	pointer
,	O
MU_IMAP_CB_FETCH	int
,	O
msgno	long
,	O
list	pointer
)	O
;	O
mu_list_destroy	function
(	O
&	O
list	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
}	O
}	O
return	O
1	int
;	O
}	O
int	O
_mu_imap_process_untagged_response	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
mu_list_t	pointer
list	pointer
,	O
mu_imap_response_action_t	pointer
fun	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
if	O
(	O
_process_unsolicited_response	function
(	O
imap	pointer
,	O
list	pointer
)	O
)	O
{	O
if	O
(	O
fun	pointer
)	O
fun	pointer
(	O
imap	pointer
,	O
list	pointer
,	O
data	pointer
)	O
;	O
else	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE9	int
,	O
(	O
"ignoring unrecognized response"	pointer
)	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
default_tagged_response	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
int	O
code	int
,	O
mu_list_t	pointer
resp	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
imap_list_element	struct
*	O
arg	pointer
;	O
if	O
(	O
mu_list_tail	function
(	O
resp	pointer
,	O
(	O
void	O
*	O
)	O
&	O
arg	pointer
)	O
==	O
0	int
&&	O
arg	pointer
->	O
type	int
==	O
imap_eltype_string	int
)	O
_mu_imap_seterrstrz	function
(	O
imap	pointer
,	O
arg	pointer
->	O
v	union
.	O
string	pointer
)	O
;	O
imap	pointer
->	O
response_code	int
=	O
parse_response_code	function
(	O
imap	pointer
,	O
resp	pointer
)	O
;	O
mu_imap_callback	function
(	O
imap	pointer
,	O
code	int
,	O
imap	pointer
->	O
response_code	int
,	O
arg	pointer
?	O
arg	pointer
->	O
v	union
.	O
string	pointer
:	O
NULL	O
)	O
;	O
}	O
static	O
void	O
ok_tagged_response	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
mu_list_t	pointer
resp	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
default_tagged_response	function
(	O
imap	pointer
,	O
MU_IMAP_CB_TAGGED_OK	int
,	O
resp	pointer
,	O
data	pointer
)	O
;	O
}	O
static	O
void	O
no_tagged_response	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
mu_list_t	pointer
resp	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
default_tagged_response	function
(	O
imap	pointer
,	O
MU_IMAP_CB_TAGGED_NO	int
,	O
resp	pointer
,	O
data	pointer
)	O
;	O
}	O
static	O
void	O
bad_tagged_response	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
mu_list_t	pointer
resp	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
default_tagged_response	function
(	O
imap	pointer
,	O
MU_IMAP_CB_TAGGED_BAD	int
,	O
resp	pointer
,	O
data	pointer
)	O
;	O
}	O
static	O
struct	O
resptab	struct
tagged_resptab	array
[	O
]	O
=	O
{	O
{	O
"OK"	pointer
,	O
ok_tagged_response	function
,	O
MU_IMAP_OK	int
}	O
,	O
{	O
"NO"	pointer
,	O
no_tagged_response	function
,	O
MU_IMAP_NO	int
}	O
,	O
{	O
"BAD"	pointer
,	O
bad_tagged_response	function
,	O
MU_IMAP_BAD	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
int	O
_std_tagged_response	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
size_t	long
count	long
,	O
mu_list_t	pointer
resp	pointer
)	O
{	O
struct	O
resptab	struct
*	O
rp	pointer
;	O
struct	O
imap_list_element	struct
*	O
arg	pointer
=	O
_mu_imap_list_at	function
(	O
resp	pointer
,	O
0	int
)	O
;	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
1	int
;	O
if	O
(	O
arg	pointer
->	O
type	int
==	O
imap_eltype_string	int
)	O
for	O
(	O
rp	pointer
=	O
tagged_resptab	array
;	O
rp	pointer
->	O
name	pointer
;	O
rp	pointer
++	O
)	O
{	O
if	O
(	O
mu_c_strcasecmp	function
(	O
rp	pointer
->	O
name	pointer
,	O
arg	pointer
->	O
v	union
.	O
string	pointer
)	O
==	O
0	int
)	O
{	O
imap	pointer
->	O
response	enum
=	O
rp	pointer
->	O
code	int
;	O
rp	pointer
->	O
action	pointer
(	O
imap	pointer
,	O
resp	pointer
,	O
NULL	O
)	O
;	O
return	O
0	int
;	O
}	O
}	O
return	O
1	int
;	O
}	O
int	O
_mu_imap_process_tagged_response	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
mu_list_t	pointer
resp	pointer
)	O
{	O
size_t	long
count	long
;	O
if	O
(	O
mu_list_count	function
(	O
resp	pointer
,	O
&	O
count	long
)	O
)	O
return	O
1	int
;	O
return	O
_std_tagged_response	function
(	O
imap	pointer
,	O
count	long
,	O
resp	pointer
)	O
;	O
}	O
