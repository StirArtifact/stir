struct	O
onexit_closure	struct
{	O
mu_onexit_t	pointer
function	pointer
;	O
void	O
*	O
data	pointer
;	O
}	O
;	O
static	O
mu_list_t	pointer
onexit_list	pointer
;	O
void	O
_mu_onexit_run	function
(	O
void	O
)	O
{	O
mu_iterator_t	pointer
itr	pointer
;	O
int	O
rc	int
,	O
status	int
=	O
0	int
;	O
if	O
(	O
!	O
onexit_list	pointer
)	O
return	O
;	O
rc	int
=	O
mu_list_get_iterator	function
(	O
onexit_list	pointer
,	O
&	O
itr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot create iterator, onexit aborted: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_stream_destroy	function
(	O
&	O
mu_strerr	pointer
)	O
;	O
_exit	function
(	O
127	int
)	O
;	O
}	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
struct	O
onexit_closure	struct
*	O
cp	pointer
;	O
int	O
rc	int
=	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
cp	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
status	int
=	O
127	int
;	O
mu_error	function
(	O
_	O
(	O
"cannot obtain current item while traversing the"	pointer
" onexit action list: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
}	O
else	O
cp	pointer
->	O
function	pointer
(	O
cp	pointer
->	O
data	pointer
)	O
;	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_delete	int
,	O
NULL	O
)	O
;	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
mu_list_destroy	function
(	O
&	O
onexit_list	pointer
)	O
;	O
if	O
(	O
status	int
)	O
_exit	function
(	O
status	int
)	O
;	O
}	O
int	O
mu_onexit	function
(	O
mu_onexit_t	pointer
func	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
onexit_closure	struct
*	O
clos	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
clos	pointer
)	O
)	O
;	O
if	O
(	O
!	O
clos	pointer
)	O
return	O
ENOMEM	int
;	O
clos	pointer
->	O
function	pointer
=	O
func	pointer
;	O
clos	pointer
->	O
data	pointer
=	O
data	pointer
;	O
if	O
(	O
!	O
onexit_list	pointer
)	O
{	O
int	O
rc	int
=	O
mu_list_create	function
(	O
&	O
onexit_list	pointer
)	O
;	O
mu_list_set_destroy_item	function
(	O
onexit_list	pointer
,	O
mu_list_free_item	function
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
atexit	function
(	O
_mu_onexit_run	function
)	O
;	O
}	O
return	O
mu_list_append	function
(	O
onexit_list	pointer
,	O
clos	pointer
)	O
;	O
}	O
void	O
mu_onexit_reset	function
(	O
void	O
)	O
{	O
mu_list_clear	function
(	O
onexit_list	pointer
)	O
;	O
}	O
void	O
mu_onexit_run	function
(	O
void	O
)	O
{	O
_mu_onexit_run	function
(	O
)	O
;	O
}	O
