static	O
const	O
uint32_t	int
sbox1	array
[	O
64	int
]	O
=	O
{	O
0x01010400	int
,	O
0x00000000	int
,	O
0x00010000	int
,	O
0x01010404	int
,	O
0x01010004	int
,	O
0x00010404	int
,	O
0x00000004	int
,	O
0x00010000	int
,	O
0x00000400	int
,	O
0x01010400	int
,	O
0x01010404	int
,	O
0x00000400	int
,	O
0x01000404	int
,	O
0x01010004	int
,	O
0x01000000	int
,	O
0x00000004	int
,	O
0x00000404	int
,	O
0x01000400	int
,	O
0x01000400	int
,	O
0x00010400	int
,	O
0x00010400	int
,	O
0x01010000	int
,	O
0x01010000	int
,	O
0x01000404	int
,	O
0x00010004	int
,	O
0x01000004	int
,	O
0x01000004	int
,	O
0x00010004	int
,	O
0x00000000	int
,	O
0x00000404	int
,	O
0x00010404	int
,	O
0x01000000	int
,	O
0x00010000	int
,	O
0x01010404	int
,	O
0x00000004	int
,	O
0x01010000	int
,	O
0x01010400	int
,	O
0x01000000	int
,	O
0x01000000	int
,	O
0x00000400	int
,	O
0x01010004	int
,	O
0x00010000	int
,	O
0x00010400	int
,	O
0x01000004	int
,	O
0x00000400	int
,	O
0x00000004	int
,	O
0x01000404	int
,	O
0x00010404	int
,	O
0x01010404	int
,	O
0x00010004	int
,	O
0x01010000	int
,	O
0x01000404	int
,	O
0x01000004	int
,	O
0x00000404	int
,	O
0x00010404	int
,	O
0x01010400	int
,	O
0x00000404	int
,	O
0x01000400	int
,	O
0x01000400	int
,	O
0x00000000	int
,	O
0x00010004	int
,	O
0x00010400	int
,	O
0x00000000	int
,	O
0x01010004	int
}	O
;	O
static	O
const	O
uint32_t	int
sbox2	array
[	O
64	int
]	O
=	O
{	O
0x80108020	int
,	O
0x80008000	int
,	O
0x00008000	int
,	O
0x00108020	int
,	O
0x00100000	int
,	O
0x00000020	int
,	O
0x80100020	int
,	O
0x80008020	int
,	O
0x80000020	int
,	O
0x80108020	int
,	O
0x80108000	int
,	O
0x80000000	int
,	O
0x80008000	int
,	O
0x00100000	int
,	O
0x00000020	int
,	O
0x80100020	int
,	O
0x00108000	int
,	O
0x00100020	int
,	O
0x80008020	int
,	O
0x00000000	int
,	O
0x80000000	int
,	O
0x00008000	int
,	O
0x00108020	int
,	O
0x80100000	int
,	O
0x00100020	int
,	O
0x80000020	int
,	O
0x00000000	int
,	O
0x00108000	int
,	O
0x00008020	int
,	O
0x80108000	int
,	O
0x80100000	int
,	O
0x00008020	int
,	O
0x00000000	int
,	O
0x00108020	int
,	O
0x80100020	int
,	O
0x00100000	int
,	O
0x80008020	int
,	O
0x80100000	int
,	O
0x80108000	int
,	O
0x00008000	int
,	O
0x80100000	int
,	O
0x80008000	int
,	O
0x00000020	int
,	O
0x80108020	int
,	O
0x00108020	int
,	O
0x00000020	int
,	O
0x00008000	int
,	O
0x80000000	int
,	O
0x00008020	int
,	O
0x80108000	int
,	O
0x00100000	int
,	O
0x80000020	int
,	O
0x00100020	int
,	O
0x80008020	int
,	O
0x80000020	int
,	O
0x00100020	int
,	O
0x00108000	int
,	O
0x00000000	int
,	O
0x80008000	int
,	O
0x00008020	int
,	O
0x80000000	int
,	O
0x80100020	int
,	O
0x80108020	int
,	O
0x00108000	int
}	O
;	O
static	O
const	O
uint32_t	int
sbox3	array
[	O
64	int
]	O
=	O
{	O
0x00000208	int
,	O
0x08020200	int
,	O
0x00000000	int
,	O
0x08020008	int
,	O
0x08000200	int
,	O
0x00000000	int
,	O
0x00020208	int
,	O
0x08000200	int
,	O
0x00020008	int
,	O
0x08000008	int
,	O
0x08000008	int
,	O
0x00020000	int
,	O
0x08020208	int
,	O
0x00020008	int
,	O
0x08020000	int
,	O
0x00000208	int
,	O
0x08000000	int
,	O
0x00000008	int
,	O
0x08020200	int
,	O
0x00000200	int
,	O
0x00020200	int
,	O
0x08020000	int
,	O
0x08020008	int
,	O
0x00020208	int
,	O
0x08000208	int
,	O
0x00020200	int
,	O
0x00020000	int
,	O
0x08000208	int
,	O
0x00000008	int
,	O
0x08020208	int
,	O
0x00000200	int
,	O
0x08000000	int
,	O
0x08020200	int
,	O
0x08000000	int
,	O
0x00020008	int
,	O
0x00000208	int
,	O
0x00020000	int
,	O
0x08020200	int
,	O
0x08000200	int
,	O
0x00000000	int
,	O
0x00000200	int
,	O
0x00020008	int
,	O
0x08020208	int
,	O
0x08000200	int
,	O
0x08000008	int
,	O
0x00000200	int
,	O
0x00000000	int
,	O
0x08020008	int
,	O
0x08000208	int
,	O
0x00020000	int
,	O
0x08000000	int
,	O
0x08020208	int
,	O
0x00000008	int
,	O
0x00020208	int
,	O
0x00020200	int
,	O
0x08000008	int
,	O
0x08020000	int
,	O
0x08000208	int
,	O
0x00000208	int
,	O
0x08020000	int
,	O
0x00020208	int
,	O
0x00000008	int
,	O
0x08020008	int
,	O
0x00020200	int
}	O
;	O
static	O
const	O
uint32_t	int
sbox4	array
[	O
64	int
]	O
=	O
{	O
0x00802001	int
,	O
0x00002081	int
,	O
0x00002081	int
,	O
0x00000080	int
,	O
0x00802080	int
,	O
0x00800081	int
,	O
0x00800001	int
,	O
0x00002001	int
,	O
0x00000000	int
,	O
0x00802000	int
,	O
0x00802000	int
,	O
0x00802081	int
,	O
0x00000081	int
,	O
0x00000000	int
,	O
0x00800080	int
,	O
0x00800001	int
,	O
0x00000001	int
,	O
0x00002000	int
,	O
0x00800000	int
,	O
0x00802001	int
,	O
0x00000080	int
,	O
0x00800000	int
,	O
0x00002001	int
,	O
0x00002080	int
,	O
0x00800081	int
,	O
0x00000001	int
,	O
0x00002080	int
,	O
0x00800080	int
,	O
0x00002000	int
,	O
0x00802080	int
,	O
0x00802081	int
,	O
0x00000081	int
,	O
0x00800080	int
,	O
0x00800001	int
,	O
0x00802000	int
,	O
0x00802081	int
,	O
0x00000081	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00802000	int
,	O
0x00002080	int
,	O
0x00800080	int
,	O
0x00800081	int
,	O
0x00000001	int
,	O
0x00802001	int
,	O
0x00002081	int
,	O
0x00002081	int
,	O
0x00000080	int
,	O
0x00802081	int
,	O
0x00000081	int
,	O
0x00000001	int
,	O
0x00002000	int
,	O
0x00800001	int
,	O
0x00002001	int
,	O
0x00802080	int
,	O
0x00800081	int
,	O
0x00002001	int
,	O
0x00002080	int
,	O
0x00800000	int
,	O
0x00802001	int
,	O
0x00000080	int
,	O
0x00800000	int
,	O
0x00002000	int
,	O
0x00802080	int
}	O
;	O
static	O
const	O
uint32_t	int
sbox5	array
[	O
64	int
]	O
=	O
{	O
0x00000100	int
,	O
0x02080100	int
,	O
0x02080000	int
,	O
0x42000100	int
,	O
0x00080000	int
,	O
0x00000100	int
,	O
0x40000000	int
,	O
0x02080000	int
,	O
0x40080100	int
,	O
0x00080000	int
,	O
0x02000100	int
,	O
0x40080100	int
,	O
0x42000100	int
,	O
0x42080000	int
,	O
0x00080100	int
,	O
0x40000000	int
,	O
0x02000000	int
,	O
0x40080000	int
,	O
0x40080000	int
,	O
0x00000000	int
,	O
0x40000100	int
,	O
0x42080100	int
,	O
0x42080100	int
,	O
0x02000100	int
,	O
0x42080000	int
,	O
0x40000100	int
,	O
0x00000000	int
,	O
0x42000000	int
,	O
0x02080100	int
,	O
0x02000000	int
,	O
0x42000000	int
,	O
0x00080100	int
,	O
0x00080000	int
,	O
0x42000100	int
,	O
0x00000100	int
,	O
0x02000000	int
,	O
0x40000000	int
,	O
0x02080000	int
,	O
0x42000100	int
,	O
0x40080100	int
,	O
0x02000100	int
,	O
0x40000000	int
,	O
0x42080000	int
,	O
0x02080100	int
,	O
0x40080100	int
,	O
0x00000100	int
,	O
0x02000000	int
,	O
0x42080000	int
,	O
0x42080100	int
,	O
0x00080100	int
,	O
0x42000000	int
,	O
0x42080100	int
,	O
0x02080000	int
,	O
0x00000000	int
,	O
0x40080000	int
,	O
0x42000000	int
,	O
0x00080100	int
,	O
0x02000100	int
,	O
0x40000100	int
,	O
0x00080000	int
,	O
0x00000000	int
,	O
0x40080000	int
,	O
0x02080100	int
,	O
0x40000100	int
}	O
;	O
static	O
const	O
uint32_t	int
sbox6	array
[	O
64	int
]	O
=	O
{	O
0x20000010	int
,	O
0x20400000	int
,	O
0x00004000	int
,	O
0x20404010	int
,	O
0x20400000	int
,	O
0x00000010	int
,	O
0x20404010	int
,	O
0x00400000	int
,	O
0x20004000	int
,	O
0x00404010	int
,	O
0x00400000	int
,	O
0x20000010	int
,	O
0x00400010	int
,	O
0x20004000	int
,	O
0x20000000	int
,	O
0x00004010	int
,	O
0x00000000	int
,	O
0x00400010	int
,	O
0x20004010	int
,	O
0x00004000	int
,	O
0x00404000	int
,	O
0x20004010	int
,	O
0x00000010	int
,	O
0x20400010	int
,	O
0x20400010	int
,	O
0x00000000	int
,	O
0x00404010	int
,	O
0x20404000	int
,	O
0x00004010	int
,	O
0x00404000	int
,	O
0x20404000	int
,	O
0x20000000	int
,	O
0x20004000	int
,	O
0x00000010	int
,	O
0x20400010	int
,	O
0x00404000	int
,	O
0x20404010	int
,	O
0x00400000	int
,	O
0x00004010	int
,	O
0x20000010	int
,	O
0x00400000	int
,	O
0x20004000	int
,	O
0x20000000	int
,	O
0x00004010	int
,	O
0x20000010	int
,	O
0x20404010	int
,	O
0x00404000	int
,	O
0x20400000	int
,	O
0x00404010	int
,	O
0x20404000	int
,	O
0x00000000	int
,	O
0x20400010	int
,	O
0x00000010	int
,	O
0x00004000	int
,	O
0x20400000	int
,	O
0x00404010	int
,	O
0x00004000	int
,	O
0x00400010	int
,	O
0x20004010	int
,	O
0x00000000	int
,	O
0x20404000	int
,	O
0x20000000	int
,	O
0x00400010	int
,	O
0x20004010	int
}	O
;	O
static	O
const	O
uint32_t	int
sbox7	array
[	O
64	int
]	O
=	O
{	O
0x00200000	int
,	O
0x04200002	int
,	O
0x04000802	int
,	O
0x00000000	int
,	O
0x00000800	int
,	O
0x04000802	int
,	O
0x00200802	int
,	O
0x04200800	int
,	O
0x04200802	int
,	O
0x00200000	int
,	O
0x00000000	int
,	O
0x04000002	int
,	O
0x00000002	int
,	O
0x04000000	int
,	O
0x04200002	int
,	O
0x00000802	int
,	O
0x04000800	int
,	O
0x00200802	int
,	O
0x00200002	int
,	O
0x04000800	int
,	O
0x04000002	int
,	O
0x04200000	int
,	O
0x04200800	int
,	O
0x00200002	int
,	O
0x04200000	int
,	O
0x00000800	int
,	O
0x00000802	int
,	O
0x04200802	int
,	O
0x00200800	int
,	O
0x00000002	int
,	O
0x04000000	int
,	O
0x00200800	int
,	O
0x04000000	int
,	O
0x00200800	int
,	O
0x00200000	int
,	O
0x04000802	int
,	O
0x04000802	int
,	O
0x04200002	int
,	O
0x04200002	int
,	O
0x00000002	int
,	O
0x00200002	int
,	O
0x04000000	int
,	O
0x04000800	int
,	O
0x00200000	int
,	O
0x04200800	int
,	O
0x00000802	int
,	O
0x00200802	int
,	O
0x04200800	int
,	O
0x00000802	int
,	O
0x04000002	int
,	O
0x04200802	int
,	O
0x04200000	int
,	O
0x00200800	int
,	O
0x00000000	int
,	O
0x00000002	int
,	O
0x04200802	int
,	O
0x00000000	int
,	O
0x00200802	int
,	O
0x04200000	int
,	O
0x00000800	int
,	O
0x04000002	int
,	O
0x04000800	int
,	O
0x00000800	int
,	O
0x00200002	int
}	O
;	O
static	O
const	O
uint32_t	int
sbox8	array
[	O
64	int
]	O
=	O
{	O
0x10001040	int
,	O
0x00001000	int
,	O
0x00040000	int
,	O
0x10041040	int
,	O
0x10000000	int
,	O
0x10001040	int
,	O
0x00000040	int
,	O
0x10000000	int
,	O
0x00040040	int
,	O
0x10040000	int
,	O
0x10041040	int
,	O
0x00041000	int
,	O
0x10041000	int
,	O
0x00041040	int
,	O
0x00001000	int
,	O
0x00000040	int
,	O
0x10040000	int
,	O
0x10000040	int
,	O
0x10001000	int
,	O
0x00001040	int
,	O
0x00041000	int
,	O
0x00040040	int
,	O
0x10040040	int
,	O
0x10041000	int
,	O
0x00001040	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x10040040	int
,	O
0x10000040	int
,	O
0x10001000	int
,	O
0x00041040	int
,	O
0x00040000	int
,	O
0x00041040	int
,	O
0x00040000	int
,	O
0x10041000	int
,	O
0x00001000	int
,	O
0x00000040	int
,	O
0x10040040	int
,	O
0x00001000	int
,	O
0x00041040	int
,	O
0x10001000	int
,	O
0x00000040	int
,	O
0x10000040	int
,	O
0x10040000	int
,	O
0x10040040	int
,	O
0x10000000	int
,	O
0x00040000	int
,	O
0x10001040	int
,	O
0x00000000	int
,	O
0x10041040	int
,	O
0x00040040	int
,	O
0x10000040	int
,	O
0x10040000	int
,	O
0x10001000	int
,	O
0x10001040	int
,	O
0x00000000	int
,	O
0x10041040	int
,	O
0x00041000	int
,	O
0x00041000	int
,	O
0x00001040	int
,	O
0x00001040	int
,	O
0x00040040	int
,	O
0x10000000	int
,	O
0x10041000	int
}	O
;	O
static	O
const	O
uint32_t	int
leftkey_swap	array
[	O
16	int
]	O
=	O
{	O
0x00000000	int
,	O
0x00000001	int
,	O
0x00000100	int
,	O
0x00000101	int
,	O
0x00010000	int
,	O
0x00010001	int
,	O
0x00010100	int
,	O
0x00010101	int
,	O
0x01000000	int
,	O
0x01000001	int
,	O
0x01000100	int
,	O
0x01000101	int
,	O
0x01010000	int
,	O
0x01010001	int
,	O
0x01010100	int
,	O
0x01010101	int
}	O
;	O
static	O
const	O
uint32_t	int
rightkey_swap	array
[	O
16	int
]	O
=	O
{	O
0x00000000	int
,	O
0x01000000	int
,	O
0x00010000	int
,	O
0x01010000	int
,	O
0x00000100	int
,	O
0x01000100	int
,	O
0x00010100	int
,	O
0x01010100	int
,	O
0x00000001	int
,	O
0x01000001	int
,	O
0x00010001	int
,	O
0x01010001	int
,	O
0x00000101	int
,	O
0x01000101	int
,	O
0x00010101	int
,	O
0x01010101	int
,	O
}	O
;	O
static	O
const	O
unsigned	O
char	O
encrypt_rotate_tab	array
[	O
16	int
]	O
=	O
{	O
1	int
,	O
1	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
1	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
1	int
}	O
;	O
static	O
const	O
unsigned	O
char	O
weak_keys	array
[	O
64	int
]	O
[	O
8	int
]	O
=	O
{	O
{	O
0x00	int
,	O
0x00	int
,	O
0x00	int
,	O
0x00	int
,	O
0x00	int
,	O
0x00	int
,	O
0x00	int
,	O
0x00	int
}	O
,	O
{	O
0x00	int
,	O
0x00	int
,	O
0x1e	int
,	O
0x1e	int
,	O
0x00	int
,	O
0x00	int
,	O
0x0e	int
,	O
0x0e	int
}	O
,	O
{	O
0x00	int
,	O
0x00	int
,	O
0xe0	int
,	O
0xe0	int
,	O
0x00	int
,	O
0x00	int
,	O
0xf0	int
,	O
0xf0	int
}	O
,	O
{	O
0x00	int
,	O
0x00	int
,	O
0xfe	int
,	O
0xfe	int
,	O
0x00	int
,	O
0x00	int
,	O
0xfe	int
,	O
0xfe	int
}	O
,	O
{	O
0x00	int
,	O
0x1e	int
,	O
0x00	int
,	O
0x1e	int
,	O
0x00	int
,	O
0x0e	int
,	O
0x00	int
,	O
0x0e	int
}	O
,	O
{	O
0x00	int
,	O
0x1e	int
,	O
0x1e	int
,	O
0x00	int
,	O
0x00	int
,	O
0x0e	int
,	O
0x0e	int
,	O
0x00	int
}	O
,	O
{	O
0x00	int
,	O
0x1e	int
,	O
0xe0	int
,	O
0xfe	int
,	O
0x00	int
,	O
0x0e	int
,	O
0xf0	int
,	O
0xfe	int
}	O
,	O
{	O
0x00	int
,	O
0x1e	int
,	O
0xfe	int
,	O
0xe0	int
,	O
0x00	int
,	O
0x0e	int
,	O
0xfe	int
,	O
0xf0	int
}	O
,	O
{	O
0x00	int
,	O
0xe0	int
,	O
0x00	int
,	O
0xe0	int
,	O
0x00	int
,	O
0xf0	int
,	O
0x00	int
,	O
0xf0	int
}	O
,	O
{	O
0x00	int
,	O
0xe0	int
,	O
0x1e	int
,	O
0xfe	int
,	O
0x00	int
,	O
0xf0	int
,	O
0x0e	int
,	O
0xfe	int
}	O
,	O
{	O
0x00	int
,	O
0xe0	int
,	O
0xe0	int
,	O
0x00	int
,	O
0x00	int
,	O
0xf0	int
,	O
0xf0	int
,	O
0x00	int
}	O
,	O
{	O
0x00	int
,	O
0xe0	int
,	O
0xfe	int
,	O
0x1e	int
,	O
0x00	int
,	O
0xf0	int
,	O
0xfe	int
,	O
0x0e	int
}	O
,	O
{	O
0x00	int
,	O
0xfe	int
,	O
0x00	int
,	O
0xfe	int
,	O
0x00	int
,	O
0xfe	int
,	O
0x00	int
,	O
0xfe	int
}	O
,	O
{	O
0x00	int
,	O
0xfe	int
,	O
0x1e	int
,	O
0xe0	int
,	O
0x00	int
,	O
0xfe	int
,	O
0x0e	int
,	O
0xf0	int
}	O
,	O
{	O
0x00	int
,	O
0xfe	int
,	O
0xe0	int
,	O
0x1e	int
,	O
0x00	int
,	O
0xfe	int
,	O
0xf0	int
,	O
0x0e	int
}	O
,	O
{	O
0x00	int
,	O
0xfe	int
,	O
0xfe	int
,	O
0x00	int
,	O
0x00	int
,	O
0xfe	int
,	O
0xfe	int
,	O
0x00	int
}	O
,	O
{	O
0x1e	int
,	O
0x00	int
,	O
0x00	int
,	O
0x1e	int
,	O
0x0e	int
,	O
0x00	int
,	O
0x00	int
,	O
0x0e	int
}	O
,	O
{	O
0x1e	int
,	O
0x00	int
,	O
0x1e	int
,	O
0x00	int
,	O
0x0e	int
,	O
0x00	int
,	O
0x0e	int
,	O
0x00	int
}	O
,	O
{	O
0x1e	int
,	O
0x00	int
,	O
0xe0	int
,	O
0xfe	int
,	O
0x0e	int
,	O
0x00	int
,	O
0xf0	int
,	O
0xfe	int
}	O
,	O
{	O
0x1e	int
,	O
0x00	int
,	O
0xfe	int
,	O
0xe0	int
,	O
0x0e	int
,	O
0x00	int
,	O
0xfe	int
,	O
0xf0	int
}	O
,	O
{	O
0x1e	int
,	O
0x1e	int
,	O
0x00	int
,	O
0x00	int
,	O
0x0e	int
,	O
0x0e	int
,	O
0x00	int
,	O
0x00	int
}	O
,	O
{	O
0x1e	int
,	O
0x1e	int
,	O
0x1e	int
,	O
0x1e	int
,	O
0x0e	int
,	O
0x0e	int
,	O
0x0e	int
,	O
0x0e	int
}	O
,	O
{	O
0x1e	int
,	O
0x1e	int
,	O
0xe0	int
,	O
0xe0	int
,	O
0x0e	int
,	O
0x0e	int
,	O
0xf0	int
,	O
0xf0	int
}	O
,	O
{	O
0x1e	int
,	O
0x1e	int
,	O
0xfe	int
,	O
0xfe	int
,	O
0x0e	int
,	O
0x0e	int
,	O
0xfe	int
,	O
0xfe	int
}	O
,	O
{	O
0x1e	int
,	O
0xe0	int
,	O
0x00	int
,	O
0xfe	int
,	O
0x0e	int
,	O
0xf0	int
,	O
0x00	int
,	O
0xfe	int
}	O
,	O
{	O
0x1e	int
,	O
0xe0	int
,	O
0x1e	int
,	O
0xe0	int
,	O
0x0e	int
,	O
0xf0	int
,	O
0x0e	int
,	O
0xf0	int
}	O
,	O
{	O
0x1e	int
,	O
0xe0	int
,	O
0xe0	int
,	O
0x1e	int
,	O
0x0e	int
,	O
0xf0	int
,	O
0xf0	int
,	O
0x0e	int
}	O
,	O
{	O
0x1e	int
,	O
0xe0	int
,	O
0xfe	int
,	O
0x00	int
,	O
0x0e	int
,	O
0xf0	int
,	O
0xfe	int
,	O
0x00	int
}	O
,	O
{	O
0x1e	int
,	O
0xfe	int
,	O
0x00	int
,	O
0xe0	int
,	O
0x0e	int
,	O
0xfe	int
,	O
0x00	int
,	O
0xf0	int
}	O
,	O
{	O
0x1e	int
,	O
0xfe	int
,	O
0x1e	int
,	O
0xfe	int
,	O
0x0e	int
,	O
0xfe	int
,	O
0x0e	int
,	O
0xfe	int
}	O
,	O
{	O
0x1e	int
,	O
0xfe	int
,	O
0xe0	int
,	O
0x00	int
,	O
0x0e	int
,	O
0xfe	int
,	O
0xf0	int
,	O
0x00	int
}	O
,	O
{	O
0x1e	int
,	O
0xfe	int
,	O
0xfe	int
,	O
0x1e	int
,	O
0x0e	int
,	O
0xfe	int
,	O
0xfe	int
,	O
0x0e	int
}	O
,	O
{	O
0xe0	int
,	O
0x00	int
,	O
0x00	int
,	O
0xe0	int
,	O
0xf0	int
,	O
0x00	int
,	O
0x00	int
,	O
0xf0	int
}	O
,	O
{	O
0xe0	int
,	O
0x00	int
,	O
0x1e	int
,	O
0xfe	int
,	O
0xf0	int
,	O
0x00	int
,	O
0x0e	int
,	O
0xfe	int
}	O
,	O
{	O
0xe0	int
,	O
0x00	int
,	O
0xe0	int
,	O
0x00	int
,	O
0xf0	int
,	O
0x00	int
,	O
0xf0	int
,	O
0x00	int
}	O
,	O
{	O
0xe0	int
,	O
0x00	int
,	O
0xfe	int
,	O
0x1e	int
,	O
0xf0	int
,	O
0x00	int
,	O
0xfe	int
,	O
0x0e	int
}	O
,	O
{	O
0xe0	int
,	O
0x1e	int
,	O
0x00	int
,	O
0xfe	int
,	O
0xf0	int
,	O
0x0e	int
,	O
0x00	int
,	O
0xfe	int
}	O
,	O
{	O
0xe0	int
,	O
0x1e	int
,	O
0x1e	int
,	O
0xe0	int
,	O
0xf0	int
,	O
0x0e	int
,	O
0x0e	int
,	O
0xf0	int
}	O
,	O
{	O
0xe0	int
,	O
0x1e	int
,	O
0xe0	int
,	O
0x1e	int
,	O
0xf0	int
,	O
0x0e	int
,	O
0xf0	int
,	O
0x0e	int
}	O
,	O
{	O
0xe0	int
,	O
0x1e	int
,	O
0xfe	int
,	O
0x00	int
,	O
0xf0	int
,	O
0x0e	int
,	O
0xfe	int
,	O
0x00	int
}	O
,	O
{	O
0xe0	int
,	O
0xe0	int
,	O
0x00	int
,	O
0x00	int
,	O
0xf0	int
,	O
0xf0	int
,	O
0x00	int
,	O
0x00	int
}	O
,	O
{	O
0xe0	int
,	O
0xe0	int
,	O
0x1e	int
,	O
0x1e	int
,	O
0xf0	int
,	O
0xf0	int
,	O
0x0e	int
,	O
0x0e	int
}	O
,	O
{	O
0xe0	int
,	O
0xe0	int
,	O
0xe0	int
,	O
0xe0	int
,	O
0xf0	int
,	O
0xf0	int
,	O
0xf0	int
,	O
0xf0	int
}	O
,	O
{	O
0xe0	int
,	O
0xe0	int
,	O
0xfe	int
,	O
0xfe	int
,	O
0xf0	int
,	O
0xf0	int
,	O
0xfe	int
,	O
0xfe	int
}	O
,	O
{	O
0xe0	int
,	O
0xfe	int
,	O
0x00	int
,	O
0x1e	int
,	O
0xf0	int
,	O
0xfe	int
,	O
0x00	int
,	O
0x0e	int
}	O
,	O
{	O
0xe0	int
,	O
0xfe	int
,	O
0x1e	int
,	O
0x00	int
,	O
0xf0	int
,	O
0xfe	int
,	O
0x0e	int
,	O
0x00	int
}	O
,	O
{	O
0xe0	int
,	O
0xfe	int
,	O
0xe0	int
,	O
0xfe	int
,	O
0xf0	int
,	O
0xfe	int
,	O
0xf0	int
,	O
0xfe	int
}	O
,	O
{	O
0xe0	int
,	O
0xfe	int
,	O
0xfe	int
,	O
0xe0	int
,	O
0xf0	int
,	O
0xfe	int
,	O
0xfe	int
,	O
0xf0	int
}	O
,	O
{	O
0xfe	int
,	O
0x00	int
,	O
0x00	int
,	O
0xfe	int
,	O
0xfe	int
,	O
0x00	int
,	O
0x00	int
,	O
0xfe	int
}	O
,	O
{	O
0xfe	int
,	O
0x00	int
,	O
0x1e	int
,	O
0xe0	int
,	O
0xfe	int
,	O
0x00	int
,	O
0x0e	int
,	O
0xf0	int
}	O
,	O
{	O
0xfe	int
,	O
0x00	int
,	O
0xe0	int
,	O
0x1e	int
,	O
0xfe	int
,	O
0x00	int
,	O
0xf0	int
,	O
0x0e	int
}	O
,	O
{	O
0xfe	int
,	O
0x00	int
,	O
0xfe	int
,	O
0x00	int
,	O
0xfe	int
,	O
0x00	int
,	O
0xfe	int
,	O
0x00	int
}	O
,	O
{	O
0xfe	int
,	O
0x1e	int
,	O
0x00	int
,	O
0xe0	int
,	O
0xfe	int
,	O
0x0e	int
,	O
0x00	int
,	O
0xf0	int
}	O
,	O
{	O
0xfe	int
,	O
0x1e	int
,	O
0x1e	int
,	O
0xfe	int
,	O
0xfe	int
,	O
0x0e	int
,	O
0x0e	int
,	O
0xfe	int
}	O
,	O
{	O
0xfe	int
,	O
0x1e	int
,	O
0xe0	int
,	O
0x00	int
,	O
0xfe	int
,	O
0x0e	int
,	O
0xf0	int
,	O
0x00	int
}	O
,	O
{	O
0xfe	int
,	O
0x1e	int
,	O
0xfe	int
,	O
0x1e	int
,	O
0xfe	int
,	O
0x0e	int
,	O
0xfe	int
,	O
0x0e	int
}	O
,	O
{	O
0xfe	int
,	O
0xe0	int
,	O
0x00	int
,	O
0x1e	int
,	O
0xfe	int
,	O
0xf0	int
,	O
0x00	int
,	O
0x0e	int
}	O
,	O
{	O
0xfe	int
,	O
0xe0	int
,	O
0x1e	int
,	O
0x00	int
,	O
0xfe	int
,	O
0xf0	int
,	O
0x0e	int
,	O
0x00	int
}	O
,	O
{	O
0xfe	int
,	O
0xe0	int
,	O
0xe0	int
,	O
0xfe	int
,	O
0xfe	int
,	O
0xf0	int
,	O
0xf0	int
,	O
0xfe	int
}	O
,	O
{	O
0xfe	int
,	O
0xe0	int
,	O
0xfe	int
,	O
0xe0	int
,	O
0xfe	int
,	O
0xf0	int
,	O
0xfe	int
,	O
0xf0	int
}	O
,	O
{	O
0xfe	int
,	O
0xfe	int
,	O
0x00	int
,	O
0x00	int
,	O
0xfe	int
,	O
0xfe	int
,	O
0x00	int
,	O
0x00	int
}	O
,	O
{	O
0xfe	int
,	O
0xfe	int
,	O
0x1e	int
,	O
0x1e	int
,	O
0xfe	int
,	O
0xfe	int
,	O
0x0e	int
,	O
0x0e	int
}	O
,	O
{	O
0xfe	int
,	O
0xfe	int
,	O
0xe0	int
,	O
0xe0	int
,	O
0xfe	int
,	O
0xfe	int
,	O
0xf0	int
,	O
0xf0	int
}	O
,	O
{	O
0xfe	int
,	O
0xfe	int
,	O
0xfe	int
,	O
0xfe	int
,	O
0xfe	int
,	O
0xfe	int
,	O
0xfe	int
,	O
0xfe	int
}	O
}	O
;	O
bool	bool
gl_des_is_weak_key	function
(	O
const	O
char	O
*	O
key	pointer
)	O
{	O
char	O
work	array
[	O
8	int
]	O
;	O
int	O
i	int
,	O
left	int
,	O
right	int
,	O
middle	int
,	O
cmp_result	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
8	int
;	O
++	O
i	int
)	O
work	array
[	O
i	int
]	O
=	O
(	O
(	O
unsigned	O
char	O
)	O
key	pointer
[	O
i	int
]	O
)	O
&	O
0xfe	int
;	O
left	int
=	O
0	int
;	O
right	int
=	O
63	int
;	O
while	O
(	O
left	int
<=	O
right	int
)	O
{	O
middle	int
=	O
(	O
left	int
+	O
right	int
)	O
/	O
2	int
;	O
if	O
(	O
!	O
(	O
cmp_result	int
=	O
memcmp	function
(	O
work	array
,	O
weak_keys	array
[	O
middle	int
]	O
,	O
8	int
)	O
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
cmp_result	int
>	O
0	int
)	O
left	int
=	O
middle	int
+	O
1	int
;	O
else	O
right	int
=	O
middle	int
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
des_key_schedule	function
(	O
const	O
char	O
*	O
_rawkey	pointer
,	O
uint32_t	int
*	O
subkey	pointer
)	O
{	O
const	O
unsigned	O
char	O
*	O
rawkey	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
_rawkey	pointer
;	O
uint32_t	int
left	int
,	O
right	int
,	O
work	array
;	O
int	O
round	int
;	O
READ_64BIT_DATA	O
(	O
rawkey	pointer
,	O
left	int
,	O
right	int
)	O
DO_PERMUTATION	O
(	O
right	int
,	O
work	array
,	O
left	int
,	O
4	int
,	O
0x0f0f0f0f	int
)	O
DO_PERMUTATION	O
(	O
right	int
,	O
work	array
,	O
left	int
,	O
0	int
,	O
0x10101010	int
)	O
left	int
=	O
(	O
(	O
leftkey_swap	array
[	O
(	O
left	int
>>	O
0	int
)	O
&	O
0xf	int
]	O
<<	O
3	int
)	O
|	O
(	O
leftkey_swap	array
[	O
(	O
left	int
>>	O
8	int
)	O
&	O
0xf	int
]	O
<<	O
2	int
)	O
|	O
(	O
leftkey_swap	array
[	O
(	O
left	int
>>	O
16	int
)	O
&	O
0xf	int
]	O
<<	O
1	int
)	O
|	O
(	O
leftkey_swap	array
[	O
(	O
left	int
>>	O
24	int
)	O
&	O
0xf	int
]	O
)	O
|	O
(	O
leftkey_swap	array
[	O
(	O
left	int
>>	O
5	int
)	O
&	O
0xf	int
]	O
<<	O
7	int
)	O
|	O
(	O
leftkey_swap	array
[	O
(	O
left	int
>>	O
13	int
)	O
&	O
0xf	int
]	O
<<	O
6	int
)	O
|	O
(	O
leftkey_swap	array
[	O
(	O
left	int
>>	O
21	int
)	O
&	O
0xf	int
]	O
<<	O
5	int
)	O
|	O
(	O
leftkey_swap	array
[	O
(	O
left	int
>>	O
29	int
)	O
&	O
0xf	int
]	O
<<	O
4	int
)	O
)	O
;	O
left	int
&=	O
0x0fffffff	int
;	O
right	int
=	O
(	O
(	O
rightkey_swap	array
[	O
(	O
right	int
>>	O
1	int
)	O
&	O
0xf	int
]	O
<<	O
3	int
)	O
|	O
(	O
rightkey_swap	array
[	O
(	O
right	int
>>	O
9	int
)	O
&	O
0xf	int
]	O
<<	O
2	int
)	O
|	O
(	O
rightkey_swap	array
[	O
(	O
right	int
>>	O
17	int
)	O
&	O
0xf	int
]	O
<<	O
1	int
)	O
|	O
(	O
rightkey_swap	array
[	O
(	O
right	int
>>	O
25	int
)	O
&	O
0xf	int
]	O
)	O
|	O
(	O
rightkey_swap	array
[	O
(	O
right	int
>>	O
4	int
)	O
&	O
0xf	int
]	O
<<	O
7	int
)	O
|	O
(	O
rightkey_swap	array
[	O
(	O
right	int
>>	O
12	int
)	O
&	O
0xf	int
]	O
<<	O
6	int
)	O
|	O
(	O
rightkey_swap	array
[	O
(	O
right	int
>>	O
20	int
)	O
&	O
0xf	int
]	O
<<	O
5	int
)	O
|	O
(	O
rightkey_swap	array
[	O
(	O
right	int
>>	O
28	int
)	O
&	O
0xf	int
]	O
<<	O
4	int
)	O
)	O
;	O
right	int
&=	O
0x0fffffff	int
;	O
for	O
(	O
round	int
=	O
0	int
;	O
round	int
<	O
16	int
;	O
++	O
round	int
)	O
{	O
left	int
=	O
(	O
(	O
left	int
<<	O
encrypt_rotate_tab	array
[	O
round	int
]	O
)	O
|	O
(	O
left	int
>>	O
(	O
28	int
-	O
encrypt_rotate_tab	array
[	O
round	int
]	O
)	O
)	O
)	O
&	O
0x0fffffff	int
;	O
right	int
=	O
(	O
(	O
right	int
<<	O
encrypt_rotate_tab	array
[	O
round	int
]	O
)	O
|	O
(	O
right	int
>>	O
(	O
28	int
-	O
encrypt_rotate_tab	array
[	O
round	int
]	O
)	O
)	O
)	O
&	O
0x0fffffff	int
;	O
*	O
subkey	pointer
++	O
=	O
(	O
(	O
(	O
left	int
<<	O
4	int
)	O
&	O
0x24000000	int
)	O
|	O
(	O
(	O
left	int
<<	O
28	int
)	O
&	O
0x10000000	int
)	O
|	O
(	O
(	O
left	int
<<	O
14	int
)	O
&	O
0x08000000	int
)	O
|	O
(	O
(	O
left	int
<<	O
18	int
)	O
&	O
0x02080000	int
)	O
|	O
(	O
(	O
left	int
<<	O
6	int
)	O
&	O
0x01000000	int
)	O
|	O
(	O
(	O
left	int
<<	O
9	int
)	O
&	O
0x00200000	int
)	O
|	O
(	O
(	O
left	int
>>	O
1	int
)	O
&	O
0x00100000	int
)	O
|	O
(	O
(	O
left	int
<<	O
10	int
)	O
&	O
0x00040000	int
)	O
|	O
(	O
(	O
left	int
<<	O
2	int
)	O
&	O
0x00020000	int
)	O
|	O
(	O
(	O
left	int
>>	O
10	int
)	O
&	O
0x00010000	int
)	O
|	O
(	O
(	O
right	int
>>	O
13	int
)	O
&	O
0x00002000	int
)	O
|	O
(	O
(	O
right	int
>>	O
4	int
)	O
&	O
0x00001000	int
)	O
|	O
(	O
(	O
right	int
<<	O
6	int
)	O
&	O
0x00000800	int
)	O
|	O
(	O
(	O
right	int
>>	O
1	int
)	O
&	O
0x00000400	int
)	O
|	O
(	O
(	O
right	int
>>	O
14	int
)	O
&	O
0x00000200	int
)	O
|	O
(	O
right	int
&	O
0x00000100	int
)	O
|	O
(	O
(	O
right	int
>>	O
5	int
)	O
&	O
0x00000020	int
)	O
|	O
(	O
(	O
right	int
>>	O
10	int
)	O
&	O
0x00000010	int
)	O
|	O
(	O
(	O
right	int
>>	O
3	int
)	O
&	O
0x00000008	int
)	O
|	O
(	O
(	O
right	int
>>	O
18	int
)	O
&	O
0x00000004	int
)	O
|	O
(	O
(	O
right	int
>>	O
26	int
)	O
&	O
0x00000002	int
)	O
|	O
(	O
(	O
right	int
>>	O
24	int
)	O
&	O
0x00000001	int
)	O
)	O
;	O
*	O
subkey	pointer
++	O
=	O
(	O
(	O
(	O
left	int
<<	O
15	int
)	O
&	O
0x20000000	int
)	O
|	O
(	O
(	O
left	int
<<	O
17	int
)	O
&	O
0x10000000	int
)	O
|	O
(	O
(	O
left	int
<<	O
10	int
)	O
&	O
0x08000000	int
)	O
|	O
(	O
(	O
left	int
<<	O
22	int
)	O
&	O
0x04000000	int
)	O
|	O
(	O
(	O
left	int
>>	O
2	int
)	O
&	O
0x02000000	int
)	O
|	O
(	O
(	O
left	int
<<	O
1	int
)	O
&	O
0x01000000	int
)	O
|	O
(	O
(	O
left	int
<<	O
16	int
)	O
&	O
0x00200000	int
)	O
|	O
(	O
(	O
left	int
<<	O
11	int
)	O
&	O
0x00100000	int
)	O
|	O
(	O
(	O
left	int
<<	O
3	int
)	O
&	O
0x00080000	int
)	O
|	O
(	O
(	O
left	int
>>	O
6	int
)	O
&	O
0x00040000	int
)	O
|	O
(	O
(	O
left	int
<<	O
15	int
)	O
&	O
0x00020000	int
)	O
|	O
(	O
(	O
left	int
>>	O
4	int
)	O
&	O
0x00010000	int
)	O
|	O
(	O
(	O
right	int
>>	O
2	int
)	O
&	O
0x00002000	int
)	O
|	O
(	O
(	O
right	int
<<	O
8	int
)	O
&	O
0x00001000	int
)	O
|	O
(	O
(	O
right	int
>>	O
14	int
)	O
&	O
0x00000808	int
)	O
|	O
(	O
(	O
right	int
>>	O
9	int
)	O
&	O
0x00000400	int
)	O
|	O
(	O
(	O
right	int
)	O
&	O
0x00000200	int
)	O
|	O
(	O
(	O
right	int
<<	O
7	int
)	O
&	O
0x00000100	int
)	O
|	O
(	O
(	O
right	int
>>	O
7	int
)	O
&	O
0x00000020	int
)	O
|	O
(	O
(	O
right	int
>>	O
3	int
)	O
&	O
0x00000011	int
)	O
|	O
(	O
(	O
right	int
<<	O
2	int
)	O
&	O
0x00000004	int
)	O
|	O
(	O
(	O
right	int
>>	O
21	int
)	O
&	O
0x00000002	int
)	O
)	O
;	O
}	O
}	O
void	O
gl_des_setkey	function
(	O
gl_des_ctx	struct
*	O
ctx	pointer
,	O
const	O
char	O
*	O
key	pointer
)	O
{	O
int	O
i	int
;	O
des_key_schedule	function
(	O
key	pointer
,	O
ctx	pointer
->	O
encrypt_subkeys	array
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
32	int
;	O
i	int
+=	O
2	int
)	O
{	O
ctx	pointer
->	O
decrypt_subkeys	array
[	O
i	int
]	O
=	O
ctx	pointer
->	O
encrypt_subkeys	array
[	O
30	int
-	O
i	int
]	O
;	O
ctx	pointer
->	O
decrypt_subkeys	array
[	O
i	int
+	O
1	int
]	O
=	O
ctx	pointer
->	O
encrypt_subkeys	array
[	O
31	int
-	O
i	int
]	O
;	O
}	O
}	O
bool	bool
gl_des_makekey	function
(	O
gl_des_ctx	struct
*	O
ctx	pointer
,	O
const	O
char	O
*	O
key	pointer
,	O
size_t	long
keylen	long
)	O
{	O
if	O
(	O
keylen	long
!=	O
8	int
)	O
return	O
false	int
;	O
gl_des_setkey	function
(	O
ctx	pointer
,	O
key	pointer
)	O
;	O
return	O
!	O
gl_des_is_weak_key	function
(	O
key	pointer
)	O
;	O
}	O
void	O
gl_des_ecb_crypt	function
(	O
gl_des_ctx	struct
*	O
ctx	pointer
,	O
const	O
char	O
*	O
_from	pointer
,	O
char	O
*	O
_to	pointer
,	O
int	O
mode	int
)	O
{	O
const	O
unsigned	O
char	O
*	O
from	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
_from	pointer
;	O
unsigned	O
char	O
*	O
to	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
_to	pointer
;	O
uint32_t	int
left	int
,	O
right	int
,	O
work	array
;	O
uint32_t	int
*	O
keys	pointer
;	O
keys	pointer
=	O
mode	int
?	O
ctx	pointer
->	O
decrypt_subkeys	array
:	O
ctx	pointer
->	O
encrypt_subkeys	array
;	O
READ_64BIT_DATA	O
(	O
from	pointer
,	O
left	int
,	O
right	int
)	O
INITIAL_PERMUTATION	O
(	O
left	int
,	O
work	array
,	O
right	int
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
FINAL_PERMUTATION	O
(	O
right	int
,	O
work	array
,	O
left	int
)	O
WRITE_64BIT_DATA	O
(	O
to	pointer
,	O
right	int
,	O
left	int
)	O
}	O
void	O
gl_3des_set2keys	function
(	O
gl_3des_ctx	struct
*	O
ctx	pointer
,	O
const	O
char	O
*	O
key1	pointer
,	O
const	O
char	O
*	O
key2	pointer
)	O
{	O
int	O
i	int
;	O
des_key_schedule	function
(	O
key1	pointer
,	O
ctx	pointer
->	O
encrypt_subkeys	array
)	O
;	O
des_key_schedule	function
(	O
key2	pointer
,	O
&	O
(	O
ctx	pointer
->	O
decrypt_subkeys	array
[	O
32	int
]	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
32	int
;	O
i	int
+=	O
2	int
)	O
{	O
ctx	pointer
->	O
decrypt_subkeys	array
[	O
i	int
]	O
=	O
ctx	pointer
->	O
encrypt_subkeys	array
[	O
30	int
-	O
i	int
]	O
;	O
ctx	pointer
->	O
decrypt_subkeys	array
[	O
i	int
+	O
1	int
]	O
=	O
ctx	pointer
->	O
encrypt_subkeys	array
[	O
31	int
-	O
i	int
]	O
;	O
ctx	pointer
->	O
encrypt_subkeys	array
[	O
i	int
+	O
32	int
]	O
=	O
ctx	pointer
->	O
decrypt_subkeys	array
[	O
62	int
-	O
i	int
]	O
;	O
ctx	pointer
->	O
encrypt_subkeys	array
[	O
i	int
+	O
33	int
]	O
=	O
ctx	pointer
->	O
decrypt_subkeys	array
[	O
63	int
-	O
i	int
]	O
;	O
ctx	pointer
->	O
encrypt_subkeys	array
[	O
i	int
+	O
64	int
]	O
=	O
ctx	pointer
->	O
encrypt_subkeys	array
[	O
i	int
]	O
;	O
ctx	pointer
->	O
encrypt_subkeys	array
[	O
i	int
+	O
65	int
]	O
=	O
ctx	pointer
->	O
encrypt_subkeys	array
[	O
i	int
+	O
1	int
]	O
;	O
ctx	pointer
->	O
decrypt_subkeys	array
[	O
i	int
+	O
64	int
]	O
=	O
ctx	pointer
->	O
decrypt_subkeys	array
[	O
i	int
]	O
;	O
ctx	pointer
->	O
decrypt_subkeys	array
[	O
i	int
+	O
65	int
]	O
=	O
ctx	pointer
->	O
decrypt_subkeys	array
[	O
i	int
+	O
1	int
]	O
;	O
}	O
}	O
void	O
gl_3des_set3keys	function
(	O
gl_3des_ctx	struct
*	O
ctx	pointer
,	O
const	O
char	O
*	O
key1	pointer
,	O
const	O
char	O
*	O
key2	pointer
,	O
const	O
char	O
*	O
key3	pointer
)	O
{	O
int	O
i	int
;	O
des_key_schedule	function
(	O
key1	pointer
,	O
ctx	pointer
->	O
encrypt_subkeys	array
)	O
;	O
des_key_schedule	function
(	O
key2	pointer
,	O
&	O
(	O
ctx	pointer
->	O
decrypt_subkeys	array
[	O
32	int
]	O
)	O
)	O
;	O
des_key_schedule	function
(	O
key3	pointer
,	O
&	O
(	O
ctx	pointer
->	O
encrypt_subkeys	array
[	O
64	int
]	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
32	int
;	O
i	int
+=	O
2	int
)	O
{	O
ctx	pointer
->	O
decrypt_subkeys	array
[	O
i	int
]	O
=	O
ctx	pointer
->	O
encrypt_subkeys	array
[	O
94	int
-	O
i	int
]	O
;	O
ctx	pointer
->	O
decrypt_subkeys	array
[	O
i	int
+	O
1	int
]	O
=	O
ctx	pointer
->	O
encrypt_subkeys	array
[	O
95	int
-	O
i	int
]	O
;	O
ctx	pointer
->	O
encrypt_subkeys	array
[	O
i	int
+	O
32	int
]	O
=	O
ctx	pointer
->	O
decrypt_subkeys	array
[	O
62	int
-	O
i	int
]	O
;	O
ctx	pointer
->	O
encrypt_subkeys	array
[	O
i	int
+	O
33	int
]	O
=	O
ctx	pointer
->	O
decrypt_subkeys	array
[	O
63	int
-	O
i	int
]	O
;	O
ctx	pointer
->	O
decrypt_subkeys	array
[	O
i	int
+	O
64	int
]	O
=	O
ctx	pointer
->	O
encrypt_subkeys	array
[	O
30	int
-	O
i	int
]	O
;	O
ctx	pointer
->	O
decrypt_subkeys	array
[	O
i	int
+	O
65	int
]	O
=	O
ctx	pointer
->	O
encrypt_subkeys	array
[	O
31	int
-	O
i	int
]	O
;	O
}	O
}	O
void	O
gl_3des_ecb_crypt	function
(	O
gl_3des_ctx	struct
*	O
ctx	pointer
,	O
const	O
char	O
*	O
_from	pointer
,	O
char	O
*	O
_to	pointer
,	O
int	O
mode	int
)	O
{	O
const	O
unsigned	O
char	O
*	O
from	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
_from	pointer
;	O
unsigned	O
char	O
*	O
to	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
_to	pointer
;	O
uint32_t	int
left	int
,	O
right	int
,	O
work	array
;	O
uint32_t	int
*	O
keys	pointer
;	O
keys	pointer
=	O
mode	int
?	O
ctx	pointer
->	O
decrypt_subkeys	array
:	O
ctx	pointer
->	O
encrypt_subkeys	array
;	O
READ_64BIT_DATA	O
(	O
from	pointer
,	O
left	int
,	O
right	int
)	O
INITIAL_PERMUTATION	O
(	O
left	int
,	O
work	array
,	O
right	int
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
right	int
,	O
left	int
,	O
work	array
,	O
keys	pointer
)	O
DES_ROUND	O
(	O
left	int
,	O
right	int
,	O
work	array
,	O
keys	pointer
)	O
FINAL_PERMUTATION	O
(	O
right	int
,	O
work	array
,	O
left	int
)	O
WRITE_64BIT_DATA	O
(	O
to	pointer
,	O
right	int
,	O
left	int
)	O
}	O
bool	bool
gl_3des_makekey	function
(	O
gl_3des_ctx	struct
*	O
ctx	pointer
,	O
const	O
char	O
*	O
key	pointer
,	O
size_t	long
keylen	long
)	O
{	O
if	O
(	O
keylen	long
!=	O
24	int
)	O
return	O
false	int
;	O
gl_3des_set3keys	function
(	O
ctx	pointer
,	O
key	pointer
,	O
key	pointer
+	O
8	int
,	O
key	pointer
+	O
16	int
)	O
;	O
return	O
!	O
(	O
gl_des_is_weak_key	function
(	O
key	pointer
)	O
||	O
gl_des_is_weak_key	function
(	O
key	pointer
+	O
8	int
)	O
||	O
gl_des_is_weak_key	function
(	O
key	pointer
+	O
16	int
)	O
)	O
;	O
}	O
