struct	O
group	struct
{	O
struct	O
file_data	struct
const	O
*	O
file	array
;	O
lin	long
from	long
,	O
upto	long
;	O
}	O
;	O
static	O
char	O
const	O
*	O
format_group	function
(	O
FILE	struct
*	O
,	O
char	O
const	O
*	O
,	O
char	O
,	O
struct	O
group	struct
const	O
*	O
)	O
;	O
static	O
char	O
const	O
*	O
do_printf_spec	function
(	O
FILE	struct
*	O
,	O
char	O
const	O
*	O
,	O
struct	O
file_data	struct
const	O
*	O
,	O
lin	long
,	O
struct	O
group	struct
const	O
*	O
)	O
;	O
static	O
char	O
const	O
*	O
scan_char_literal	function
(	O
char	O
const	O
*	O
,	O
char	O
*	O
)	O
;	O
static	O
lin	long
groups_letter_value	function
(	O
struct	O
group	struct
const	O
*	O
,	O
char	O
)	O
;	O
static	O
void	O
format_ifdef	function
(	O
char	O
const	O
*	O
,	O
lin	long
,	O
lin	long
,	O
lin	long
,	O
lin	long
)	O
;	O
static	O
void	O
print_ifdef_hunk	function
(	O
struct	O
change	struct
*	O
)	O
;	O
static	O
void	O
print_ifdef_lines	function
(	O
FILE	struct
*	O
,	O
char	O
const	O
*	O
,	O
struct	O
group	struct
const	O
*	O
)	O
;	O
static	O
lin	long
next_line0	long
;	O
static	O
lin	long
next_line1	long
;	O
void	O
print_ifdef_script	function
(	O
struct	O
change	struct
*	O
script	pointer
)	O
{	O
next_line0	long
=	O
next_line1	long
=	O
-	O
files	array
[	O
0	int
]	O
.	O
prefix_lines	long
;	O
print_script	function
(	O
script	pointer
,	O
find_change	function
,	O
print_ifdef_hunk	function
)	O
;	O
if	O
(	O
next_line0	long
<	O
files	array
[	O
0	int
]	O
.	O
valid_lines	long
||	O
next_line1	long
<	O
files	array
[	O
1	int
]	O
.	O
valid_lines	long
)	O
{	O
begin_output	function
(	O
)	O
;	O
format_ifdef	function
(	O
group_format	array
[	O
UNCHANGED	int
]	O
,	O
next_line0	long
,	O
files	array
[	O
0	int
]	O
.	O
valid_lines	long
,	O
next_line1	long
,	O
files	array
[	O
1	int
]	O
.	O
valid_lines	long
)	O
;	O
}	O
}	O
static	O
void	O
print_ifdef_hunk	function
(	O
struct	O
change	struct
*	O
hunk	pointer
)	O
{	O
lin	long
first0	long
,	O
last0	long
,	O
first1	long
,	O
last1	long
;	O
enum	O
changes	enum
changes	enum
=	O
analyze_hunk	function
(	O
hunk	pointer
,	O
&	O
first0	long
,	O
&	O
last0	long
,	O
&	O
first1	long
,	O
&	O
last1	long
)	O
;	O
if	O
(	O
!	O
changes	enum
)	O
return	O
;	O
begin_output	function
(	O
)	O
;	O
if	O
(	O
next_line0	long
<	O
first0	long
||	O
next_line1	long
<	O
first1	long
)	O
format_ifdef	function
(	O
group_format	array
[	O
UNCHANGED	int
]	O
,	O
next_line0	long
,	O
first0	long
,	O
next_line1	long
,	O
first1	long
)	O
;	O
next_line0	long
=	O
last0	long
+	O
1	int
;	O
next_line1	long
=	O
last1	long
+	O
1	int
;	O
format_ifdef	function
(	O
group_format	array
[	O
changes	enum
]	O
,	O
first0	long
,	O
next_line0	long
,	O
first1	long
,	O
next_line1	long
)	O
;	O
}	O
static	O
void	O
format_ifdef	function
(	O
char	O
const	O
*	O
format	pointer
,	O
lin	long
beg0	long
,	O
lin	long
end0	long
,	O
lin	long
beg1	long
,	O
lin	long
end1	long
)	O
{	O
struct	O
group	struct
groups	array
[	O
2	int
]	O
;	O
groups	array
[	O
0	int
]	O
.	O
file	array
=	O
&	O
files	array
[	O
0	int
]	O
;	O
groups	array
[	O
0	int
]	O
.	O
from	long
=	O
beg0	long
;	O
groups	array
[	O
0	int
]	O
.	O
upto	long
=	O
end0	long
;	O
groups	array
[	O
1	int
]	O
.	O
file	array
=	O
&	O
files	array
[	O
1	int
]	O
;	O
groups	array
[	O
1	int
]	O
.	O
from	long
=	O
beg1	long
;	O
groups	array
[	O
1	int
]	O
.	O
upto	long
=	O
end1	long
;	O
format_group	function
(	O
outfile	pointer
,	O
format	pointer
,	O
0	int
,	O
groups	array
)	O
;	O
}	O
static	O
char	O
const	O
*	O
format_group	function
(	O
register	O
FILE	struct
*	O
out	pointer
,	O
char	O
const	O
*	O
format	pointer
,	O
char	O
endchar	char
,	O
struct	O
group	struct
const	O
*	O
groups	array
)	O
{	O
register	O
char	O
c	char
;	O
register	O
char	O
const	O
*	O
f	pointer
=	O
format	pointer
;	O
while	O
(	O
(	O
c	char
=	O
*	O
f	pointer
)	O
!=	O
endchar	char
&&	O
c	char
!=	O
0	int
)	O
{	O
char	O
const	O
*	O
f1	pointer
=	O
++	O
f	pointer
;	O
if	O
(	O
c	char
==	O
'%'	O
)	O
switch	O
(	O
(	O
c	char
=	O
*	O
f	pointer
++	O
)	O
)	O
{	O
case	O
'%'	O
:	O
break	O
;	O
case	O
'('	O
:	O
{	O
int	O
i	int
;	O
uintmax_t	long
value	array
[	O
2	int
]	O
;	O
FILE	struct
*	O
thenout	pointer
,	O
*	O
elseout	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
2	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
ISDIGIT	O
(	O
*	O
f	pointer
)	O
)	O
{	O
char	O
*	O
fend	pointer
;	O
errno	O
=	O
0	int
;	O
value	array
[	O
i	int
]	O
=	O
strtoumax	function
(	O
f	pointer
,	O
&	O
fend	pointer
,	O
10	int
)	O
;	O
if	O
(	O
errno	O
)	O
goto	O
bad_format	O
;	O
f	pointer
=	O
fend	pointer
;	O
}	O
else	O
{	O
value	array
[	O
i	int
]	O
=	O
groups_letter_value	function
(	O
groups	array
,	O
*	O
f	pointer
)	O
;	O
if	O
(	O
value	array
[	O
i	int
]	O
==	O
-	O
1	int
)	O
goto	O
bad_format	O
;	O
f	pointer
++	O
;	O
}	O
if	O
(	O
*	O
f	pointer
++	O
!=	O
"=?"	pointer
[	O
i	int
]	O
)	O
goto	O
bad_format	O
;	O
}	O
if	O
(	O
value	array
[	O
0	int
]	O
==	O
value	array
[	O
1	int
]	O
)	O
thenout	pointer
=	O
out	pointer
,	O
elseout	pointer
=	O
0	int
;	O
else	O
thenout	pointer
=	O
0	int
,	O
elseout	pointer
=	O
out	pointer
;	O
f	pointer
=	O
format_group	function
(	O
thenout	pointer
,	O
f	pointer
,	O
':'	O
,	O
groups	array
)	O
;	O
if	O
(	O
*	O
f	pointer
)	O
{	O
f	pointer
=	O
format_group	function
(	O
elseout	pointer
,	O
f	pointer
+	O
1	int
,	O
')'	O
,	O
groups	array
)	O
;	O
if	O
(	O
*	O
f	pointer
)	O
f	pointer
++	O
;	O
}	O
}	O
continue	O
;	O
case	O
'<'	O
:	O
print_ifdef_lines	function
(	O
out	pointer
,	O
line_format	array
[	O
OLD	int
]	O
,	O
&	O
groups	array
[	O
0	int
]	O
)	O
;	O
continue	O
;	O
case	O
'='	O
:	O
print_ifdef_lines	function
(	O
out	pointer
,	O
line_format	array
[	O
UNCHANGED	int
]	O
,	O
&	O
groups	array
[	O
0	int
]	O
)	O
;	O
continue	O
;	O
case	O
'>'	O
:	O
print_ifdef_lines	function
(	O
out	pointer
,	O
line_format	array
[	O
NEW	int
]	O
,	O
&	O
groups	array
[	O
1	int
]	O
)	O
;	O
continue	O
;	O
default	O
:	O
f	pointer
=	O
do_printf_spec	function
(	O
out	pointer
,	O
f	pointer
-	O
2	int
,	O
0	int
,	O
0	int
,	O
groups	array
)	O
;	O
if	O
(	O
f	pointer
)	O
continue	O
;	O
bad_format	O
:	O
c	char
=	O
'%'	O
;	O
f	pointer
=	O
f1	pointer
;	O
break	O
;	O
}	O
if	O
(	O
out	pointer
)	O
putc	function
(	O
c	char
,	O
out	pointer
)	O
;	O
}	O
return	O
f	pointer
;	O
}	O
static	O
lin	long
groups_letter_value	function
(	O
struct	O
group	struct
const	O
*	O
g	pointer
,	O
char	O
letter	char
)	O
{	O
switch	O
(	O
letter	char
)	O
{	O
case	O
'E'	O
:	O
letter	char
=	O
'e'	O
;	O
g	pointer
++	O
;	O
break	O
;	O
case	O
'F'	O
:	O
letter	char
=	O
'f'	O
;	O
g	pointer
++	O
;	O
break	O
;	O
case	O
'L'	O
:	O
letter	char
=	O
'l'	O
;	O
g	pointer
++	O
;	O
break	O
;	O
case	O
'M'	O
:	O
letter	char
=	O
'm'	O
;	O
g	pointer
++	O
;	O
break	O
;	O
case	O
'N'	O
:	O
letter	char
=	O
'n'	O
;	O
g	pointer
++	O
;	O
break	O
;	O
}	O
switch	O
(	O
letter	char
)	O
{	O
case	O
'e'	O
:	O
return	O
translate_line_number	function
(	O
g	pointer
->	O
file	array
,	O
g	pointer
->	O
from	long
)	O
-	O
1	int
;	O
case	O
'f'	O
:	O
return	O
translate_line_number	function
(	O
g	pointer
->	O
file	array
,	O
g	pointer
->	O
from	long
)	O
;	O
case	O
'l'	O
:	O
return	O
translate_line_number	function
(	O
g	pointer
->	O
file	array
,	O
g	pointer
->	O
upto	long
)	O
-	O
1	int
;	O
case	O
'm'	O
:	O
return	O
translate_line_number	function
(	O
g	pointer
->	O
file	array
,	O
g	pointer
->	O
upto	long
)	O
;	O
case	O
'n'	O
:	O
return	O
g	pointer
->	O
upto	long
-	O
g	pointer
->	O
from	long
;	O
default	O
:	O
return	O
-	O
1	int
;	O
}	O
}	O
static	O
void	O
print_ifdef_lines	function
(	O
register	O
FILE	struct
*	O
out	pointer
,	O
char	O
const	O
*	O
format	pointer
,	O
struct	O
group	struct
const	O
*	O
group	struct
)	O
{	O
struct	O
file_data	struct
const	O
*	O
file	array
=	O
group	struct
->	O
file	array
;	O
char	O
const	O
*	O
const	O
*	O
linbuf	pointer
=	O
file	array
->	O
linbuf	pointer
;	O
lin	long
from	long
=	O
group	struct
->	O
from	long
,	O
upto	long
=	O
group	struct
->	O
upto	long
;	O
if	O
(	O
!	O
out	pointer
)	O
return	O
;	O
if	O
(	O
!	O
expand_tabs	bool
&&	O
format	pointer
[	O
0	int
]	O
==	O
'%'	O
)	O
{	O
if	O
(	O
format	pointer
[	O
1	int
]	O
==	O
'l'	O
&&	O
format	pointer
[	O
2	int
]	O
==	O
'\n'	O
&&	O
!	O
format	pointer
[	O
3	int
]	O
&&	O
from	long
<	O
upto	long
)	O
{	O
fwrite	function
(	O
linbuf	pointer
[	O
from	long
]	O
,	O
sizeof	O
(	O
char	O
)	O
,	O
linbuf	pointer
[	O
upto	long
]	O
+	O
(	O
linbuf	pointer
[	O
upto	long
]	O
[	O
-	O
1	int
]	O
!=	O
'\n'	O
)	O
-	O
linbuf	pointer
[	O
from	long
]	O
,	O
out	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
format	pointer
[	O
1	int
]	O
==	O
'L'	O
&&	O
!	O
format	pointer
[	O
2	int
]	O
)	O
{	O
fwrite	function
(	O
linbuf	pointer
[	O
from	long
]	O
,	O
sizeof	O
(	O
char	O
)	O
,	O
linbuf	pointer
[	O
upto	long
]	O
-	O
linbuf	pointer
[	O
from	long
]	O
,	O
out	pointer
)	O
;	O
return	O
;	O
}	O
}	O
for	O
(	O
;	O
from	long
<	O
upto	long
;	O
from	long
++	O
)	O
{	O
register	O
char	O
c	char
;	O
register	O
char	O
const	O
*	O
f	pointer
=	O
format	pointer
;	O
while	O
(	O
(	O
c	char
=	O
*	O
f	pointer
++	O
)	O
!=	O
0	int
)	O
{	O
char	O
const	O
*	O
f1	pointer
=	O
f	pointer
;	O
if	O
(	O
c	char
==	O
'%'	O
)	O
switch	O
(	O
(	O
c	char
=	O
*	O
f	pointer
++	O
)	O
)	O
{	O
case	O
'%'	O
:	O
break	O
;	O
case	O
'l'	O
:	O
output_1_line	function
(	O
linbuf	pointer
[	O
from	long
]	O
,	O
(	O
linbuf	pointer
[	O
from	long
+	O
1	int
]	O
-	O
(	O
linbuf	pointer
[	O
from	long
+	O
1	int
]	O
[	O
-	O
1	int
]	O
==	O
'\n'	O
)	O
)	O
,	O
0	int
,	O
0	int
)	O
;	O
continue	O
;	O
case	O
'L'	O
:	O
output_1_line	function
(	O
linbuf	pointer
[	O
from	long
]	O
,	O
linbuf	pointer
[	O
from	long
+	O
1	int
]	O
,	O
0	int
,	O
0	int
)	O
;	O
continue	O
;	O
default	O
:	O
f	pointer
=	O
do_printf_spec	function
(	O
out	pointer
,	O
f	pointer
-	O
2	int
,	O
file	array
,	O
from	long
,	O
0	int
)	O
;	O
if	O
(	O
f	pointer
)	O
continue	O
;	O
c	char
=	O
'%'	O
;	O
f	pointer
=	O
f1	pointer
;	O
break	O
;	O
}	O
putc	function
(	O
c	char
,	O
out	pointer
)	O
;	O
}	O
}	O
}	O
static	O
char	O
const	O
*	O
do_printf_spec	function
(	O
FILE	struct
*	O
out	pointer
,	O
char	O
const	O
*	O
spec	pointer
,	O
struct	O
file_data	struct
const	O
*	O
file	array
,	O
lin	long
n	long
,	O
struct	O
group	struct
const	O
*	O
groups	array
)	O
{	O
char	O
const	O
*	O
f	pointer
=	O
spec	pointer
;	O
char	O
c	char
;	O
char	O
c1	char
;	O
f	pointer
++	O
;	O
while	O
(	O
(	O
c	char
=	O
*	O
f	pointer
++	O
)	O
==	O
'-'	O
||	O
c	char
==	O
'\''	O
||	O
c	char
==	O
'0'	O
)	O
continue	O
;	O
while	O
(	O
ISDIGIT	O
(	O
c	char
)	O
)	O
c	char
=	O
*	O
f	pointer
++	O
;	O
if	O
(	O
c	char
==	O
'.'	O
)	O
while	O
(	O
ISDIGIT	O
(	O
c	char
=	O
*	O
f	pointer
++	O
)	O
)	O
continue	O
;	O
c1	char
=	O
*	O
f	pointer
++	O
;	O
switch	O
(	O
c	char
)	O
{	O
case	O
'c'	O
:	O
if	O
(	O
c1	char
!=	O
'\''	O
)	O
return	O
0	int
;	O
else	O
{	O
char	O
value	array
IF_LINT	O
(	O
=	O
0	int
)	O
;	O
f	pointer
=	O
scan_char_literal	function
(	O
f	pointer
,	O
&	O
value	array
)	O
;	O
if	O
(	O
!	O
f	pointer
)	O
return	O
0	int
;	O
if	O
(	O
out	pointer
)	O
putc	function
(	O
value	array
,	O
out	pointer
)	O
;	O
}	O
break	O
;	O
case	O
'd'	O
:	O
case	O
'o'	O
:	O
case	O
'x'	O
:	O
case	O
'X'	O
:	O
{	O
lin	long
value	array
;	O
if	O
(	O
file	array
)	O
{	O
if	O
(	O
c1	char
!=	O
'n'	O
)	O
return	O
0	int
;	O
value	array
=	O
translate_line_number	function
(	O
file	array
,	O
n	long
)	O
;	O
}	O
else	O
{	O
value	array
=	O
groups_letter_value	function
(	O
groups	array
,	O
c1	char
)	O
;	O
if	O
(	O
value	array
<	O
0	int
)	O
return	O
0	int
;	O
}	O
if	O
(	O
out	pointer
)	O
{	O
long	O
int	O
long_value	long
=	O
value	array
;	O
size_t	long
spec_prefix_len	long
=	O
f	pointer
-	O
spec	pointer
-	O
2	int
;	O
char	O
format	pointer
[	O
spec_prefix_len	long
+	O
3	int
]	O
;	O
char	O
*	O
p	pointer
=	O
format	pointer
+	O
spec_prefix_len	long
;	O
memcpy	function
(	O
format	pointer
,	O
spec	pointer
,	O
spec_prefix_len	long
)	O
;	O
*	O
p	pointer
++	O
=	O
'l'	O
;	O
*	O
p	pointer
++	O
=	O
c	char
;	O
*	O
p	pointer
=	O
'\0'	O
;	O
fprintf	function
(	O
out	pointer
,	O
format	pointer
,	O
long_value	long
)	O
;	O
}	O
}	O
break	O
;	O
default	O
:	O
return	O
0	int
;	O
}	O
return	O
f	pointer
;	O
}	O
static	O
char	O
const	O
*	O
scan_char_literal	function
(	O
char	O
const	O
*	O
lit	pointer
,	O
char	O
*	O
valptr	pointer
)	O
{	O
register	O
char	O
const	O
*	O
p	pointer
=	O
lit	pointer
;	O
char	O
value	array
;	O
ptrdiff_t	long
digits	long
;	O
char	O
c	char
=	O
*	O
p	pointer
++	O
;	O
switch	O
(	O
c	char
)	O
{	O
case	O
0	int
:	O
case	O
'\''	O
:	O
return	O
NULL	O
;	O
case	O
'\\'	O
:	O
value	array
=	O
0	int
;	O
while	O
(	O
(	O
c	char
=	O
*	O
p	pointer
++	O
)	O
!=	O
'\''	O
)	O
{	O
unsigned	O
int	O
digit	int
=	O
c	char
-	O
'0'	O
;	O
if	O
(	O
8	int
<=	O
digit	int
)	O
return	O
NULL	O
;	O
value	array
=	O
8	int
*	O
value	array
+	O
digit	int
;	O
}	O
digits	long
=	O
p	pointer
-	O
lit	pointer
-	O
2	int
;	O
if	O
(	O
!	O
(	O
1	int
<=	O
digits	long
&&	O
digits	long
<=	O
3	int
)	O
)	O
return	O
NULL	O
;	O
break	O
;	O
default	O
:	O
value	array
=	O
c	char
;	O
if	O
(	O
*	O
p	pointer
++	O
!=	O
'\''	O
)	O
return	O
NULL	O
;	O
break	O
;	O
}	O
*	O
valptr	pointer
=	O
value	array
;	O
return	O
p	pointer
;	O
}	O
