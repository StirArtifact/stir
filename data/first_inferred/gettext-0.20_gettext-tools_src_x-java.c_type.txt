static	O
bool	bool
extract_all	bool
=	O
false	int
;	O
static	O
hash_table	struct
keywords	struct
;	O
static	O
bool	bool
default_keywords	bool
=	O
true	int
;	O
void	O
x_java_extract_all	function
(	O
)	O
{	O
extract_all	bool
=	O
true	int
;	O
}	O
void	O
x_java_keyword	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
if	O
(	O
name	pointer
==	O
NULL	O
)	O
default_keywords	bool
=	O
false	int
;	O
else	O
{	O
const	O
char	O
*	O
end	pointer
;	O
struct	O
callshape	struct
shape	pointer
;	O
const	O
char	O
*	O
colon	pointer
;	O
if	O
(	O
keywords	struct
.	O
table	pointer
==	O
NULL	O
)	O
hash_init	function
(	O
&	O
keywords	struct
,	O
100	int
)	O
;	O
split_keywordspec	function
(	O
name	pointer
,	O
&	O
end	pointer
,	O
&	O
shape	pointer
)	O
;	O
colon	pointer
=	O
strchr	function
(	O
name	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
colon	pointer
==	O
NULL	O
||	O
colon	pointer
>=	O
end	pointer
)	O
insert_keyword_callshape	function
(	O
&	O
keywords	struct
,	O
name	pointer
,	O
end	pointer
-	O
name	pointer
,	O
&	O
shape	pointer
)	O
;	O
}	O
}	O
static	O
void	O
init_keywords	function
(	O
)	O
{	O
if	O
(	O
default_keywords	bool
)	O
{	O
x_java_keyword	function
(	O
"GettextResource.gettext:2"	pointer
)	O
;	O
x_java_keyword	function
(	O
"GettextResource.ngettext:2,3"	pointer
)	O
;	O
x_java_keyword	function
(	O
"GettextResource.pgettext:2c,3"	pointer
)	O
;	O
x_java_keyword	function
(	O
"GettextResource.npgettext:2c,3,4"	pointer
)	O
;	O
x_java_keyword	function
(	O
"gettext"	pointer
)	O
;	O
x_java_keyword	function
(	O
"ngettext:1,2"	pointer
)	O
;	O
x_java_keyword	function
(	O
"pgettext:1c,2"	pointer
)	O
;	O
x_java_keyword	function
(	O
"npgettext:1c,2,3"	pointer
)	O
;	O
x_java_keyword	function
(	O
"getString"	pointer
)	O
;	O
default_keywords	bool
=	O
false	int
;	O
}	O
}	O
void	O
init_flag_table_java	function
(	O
)	O
{	O
xgettext_record_flag	function
(	O
"GettextResource.gettext:2:pass-java-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"GettextResource.ngettext:2:pass-java-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"GettextResource.ngettext:3:pass-java-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"GettextResource.pgettext:3:pass-java-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"GettextResource.npgettext:3:pass-java-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"GettextResource.npgettext:4:pass-java-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"gettext:1:pass-java-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"ngettext:1:pass-java-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"ngettext:2:pass-java-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"pgettext:2:pass-java-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"npgettext:2:pass-java-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"npgettext:3:pass-java-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"getString:1:pass-java-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"MessageFormat:1:java-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"MessageFormat.format:1:java-format"	pointer
)	O
;	O
}	O
static	O
FILE	struct
*	O
fp	pointer
;	O
static	O
int	O
phase1_pushback	array
[	O
5	int
]	O
;	O
static	O
unsigned	O
int	O
phase1_pushback_length	int
;	O
static	O
int	O
phase1_getc	function
(	O
)	O
{	O
int	O
c	int
;	O
if	O
(	O
phase1_pushback_length	int
)	O
{	O
c	int
=	O
phase1_pushback	array
[	O
--	O
phase1_pushback_length	int
]	O
;	O
if	O
(	O
c	int
>=	O
MULTIPLE_U	O
(	O
0	int
)	O
)	O
{	O
if	O
(	O
c	int
>	O
MULTIPLE_U	O
(	O
1	int
)	O
)	O
phase1_pushback	array
[	O
phase1_pushback_length	int
++	O
]	O
=	O
c	int
-	O
1	int
;	O
return	O
'u'	O
;	O
}	O
else	O
return	O
c	int
;	O
}	O
c	int
=	O
getc	function
(	O
fp	pointer
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
if	O
(	O
ferror	function
(	O
fp	pointer
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error while reading \"%s\""	pointer
)	O
,	O
real_file_name	pointer
)	O
;	O
}	O
return	O
c	int
;	O
}	O
static	O
void	O
phase1_ungetc	function
(	O
int	O
c	int
)	O
{	O
if	O
(	O
c	int
!=	O
EOF	O
)	O
{	O
if	O
(	O
c	int
==	O
'u'	O
)	O
{	O
if	O
(	O
phase1_pushback_length	int
>	O
0	int
&&	O
phase1_pushback	array
[	O
phase1_pushback_length	int
-	O
1	int
]	O
>=	O
MULTIPLE_U	O
(	O
0	int
)	O
)	O
phase1_pushback	array
[	O
phase1_pushback_length	int
-	O
1	int
]	O
++	O
;	O
else	O
{	O
if	O
(	O
phase1_pushback_length	int
==	O
SIZEOF	O
(	O
phase1_pushback	array
)	O
)	O
abort	function
(	O
)	O
;	O
phase1_pushback	array
[	O
phase1_pushback_length	int
++	O
]	O
=	O
MULTIPLE_U	O
(	O
1	int
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
phase1_pushback_length	int
==	O
SIZEOF	O
(	O
phase1_pushback	array
)	O
)	O
abort	function
(	O
)	O
;	O
phase1_pushback	array
[	O
phase1_pushback_length	int
++	O
]	O
=	O
c	int
;	O
}	O
}	O
}	O
static	O
int	O
phase2_pushback	array
[	O
1	int
]	O
;	O
static	O
int	O
phase2_pushback_length	int
;	O
static	O
int	O
phase2_getc	function
(	O
)	O
{	O
int	O
c	int
;	O
if	O
(	O
phase2_pushback_length	int
)	O
return	O
phase2_pushback	array
[	O
--	O
phase2_pushback_length	int
]	O
;	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
return	O
P2_EOF	int
;	O
if	O
(	O
c	int
==	O
'\\'	O
)	O
{	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'u'	O
)	O
{	O
unsigned	O
int	O
u_count	int
=	O
1	int
;	O
unsigned	O
char	O
buf	array
[	O
4	int
]	O
;	O
unsigned	O
int	O
n	long
;	O
int	O
i	long
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
'u'	O
)	O
break	O
;	O
u_count	int
++	O
;	O
}	O
phase1_ungetc	function
(	O
c	int
)	O
;	O
n	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
4	int
;	O
i	long
++	O
)	O
{	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c	int
-	O
'0'	O
)	O
;	O
else	O
if	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'F'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c	int
-	O
'A'	O
+	O
10	int
)	O
;	O
else	O
if	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'f'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c	int
-	O
'a'	O
+	O
10	int
)	O
;	O
else	O
{	O
phase1_ungetc	function
(	O
c	int
)	O
;	O
while	O
(	O
--	O
i	long
>=	O
0	int
)	O
phase1_ungetc	function
(	O
buf	array
[	O
i	long
]	O
)	O
;	O
for	O
(	O
;	O
u_count	int
>	O
0	int
;	O
u_count	int
--	O
)	O
phase1_ungetc	function
(	O
'u'	O
)	O
;	O
return	O
'\\'	O
;	O
}	O
buf	array
[	O
i	long
]	O
=	O
c	int
;	O
}	O
return	O
UNICODE	O
(	O
n	long
)	O
;	O
}	O
phase1_ungetc	function
(	O
c	int
)	O
;	O
return	O
'\\'	O
;	O
}	O
return	O
c	int
;	O
}	O
static	O
void	O
phase2_ungetc	function
(	O
int	O
c	int
)	O
{	O
if	O
(	O
c	int
!=	O
P2_EOF	int
)	O
{	O
if	O
(	O
phase2_pushback_length	int
==	O
SIZEOF	O
(	O
phase2_pushback	array
)	O
)	O
abort	function
(	O
)	O
;	O
phase2_pushback	array
[	O
phase2_pushback_length	int
++	O
]	O
=	O
c	int
;	O
}	O
}	O
static	O
int	O
phase3_pushback	array
[	O
2	int
]	O
;	O
static	O
int	O
phase3_pushback_length	int
;	O
static	O
int	O
phase3_getc	function
(	O
)	O
{	O
int	O
c	int
;	O
if	O
(	O
phase3_pushback_length	int
)	O
{	O
c	int
=	O
phase3_pushback	array
[	O
--	O
phase3_pushback_length	int
]	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
++	O
line_number	long
;	O
return	O
c	int
;	O
}	O
c	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
RED	O
(	O
c	int
)	O
==	O
'\r'	O
)	O
{	O
int	O
c1	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
RED	O
(	O
c1	int
)	O
!=	O
'\n'	O
)	O
phase2_ungetc	function
(	O
c1	int
)	O
;	O
if	O
(	O
c	int
==	O
'\r'	O
||	O
c1	int
==	O
'\n'	O
)	O
{	O
++	O
line_number	long
;	O
return	O
'\n'	O
;	O
}	O
else	O
return	O
UNICODE	O
(	O
'\n'	O
)	O
;	O
}	O
else	O
if	O
(	O
RED	O
(	O
c	int
)	O
==	O
'\n'	O
)	O
{	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
{	O
++	O
line_number	long
;	O
return	O
'\n'	O
;	O
}	O
else	O
return	O
UNICODE	O
(	O
'\n'	O
)	O
;	O
}	O
return	O
c	int
;	O
}	O
static	O
void	O
phase3_ungetc	function
(	O
int	O
c	int
)	O
{	O
if	O
(	O
c	int
!=	O
P2_EOF	int
)	O
{	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
--	O
line_number	long
;	O
if	O
(	O
phase3_pushback_length	int
==	O
SIZEOF	O
(	O
phase3_pushback	array
)	O
)	O
abort	function
(	O
)	O
;	O
phase3_pushback	array
[	O
phase3_pushback_length	int
++	O
]	O
=	O
c	int
;	O
}	O
}	O
static	O
void	O
mixed_string_buffer_append	function
(	O
struct	O
mixed_string_buffer	struct
*	O
bp	pointer
,	O
int	O
c	int
)	O
{	O
if	O
(	O
IS_UNICODE	O
(	O
c	int
)	O
)	O
{	O
mixed_string_buffer_append_unicode	function
(	O
bp	pointer
,	O
UTF16_VALUE	O
(	O
c	int
)	O
)	O
;	O
}	O
else	O
{	O
mixed_string_buffer_append_char	function
(	O
bp	pointer
,	O
(	O
unsigned	O
char	O
)	O
c	int
)	O
;	O
}	O
}	O
static	O
struct	O
mixed_string_buffer	struct
comment_buffer	struct
;	O
static	O
inline	O
void	O
comment_start	function
(	O
)	O
{	O
mixed_string_buffer_init	function
(	O
&	O
comment_buffer	struct
,	O
lc_comment	int
,	O
logical_file_name	pointer
,	O
line_number	long
)	O
;	O
}	O
static	O
inline	O
bool	bool
comment_at_start	function
(	O
)	O
{	O
return	O
mixed_string_buffer_is_empty	function
(	O
&	O
comment_buffer	struct
)	O
;	O
}	O
static	O
inline	O
void	O
comment_add	function
(	O
int	O
c	int
)	O
{	O
mixed_string_buffer_append	function
(	O
&	O
comment_buffer	struct
,	O
c	int
)	O
;	O
}	O
static	O
inline	O
void	O
comment_line_end	function
(	O
size_t	long
chars_to_remove	long
)	O
{	O
char	O
*	O
buffer	pointer
=	O
mixed_string_contents_free1	function
(	O
mixed_string_buffer_result	function
(	O
&	O
comment_buffer	struct
)	O
)	O
;	O
size_t	long
buflen	long
=	O
strlen	function
(	O
buffer	pointer
)	O
;	O
buflen	long
-=	O
chars_to_remove	long
;	O
while	O
(	O
buflen	long
>=	O
1	int
&&	O
(	O
buffer	pointer
[	O
buflen	long
-	O
1	int
]	O
==	O
' '	O
||	O
buffer	pointer
[	O
buflen	long
-	O
1	int
]	O
==	O
'\t'	O
)	O
)	O
--	O
buflen	long
;	O
buffer	pointer
[	O
buflen	long
]	O
=	O
'\0'	O
;	O
savable_comment_add	function
(	O
buffer	pointer
)	O
;	O
}	O
static	O
int	O
last_comment_line	int
;	O
static	O
int	O
last_non_comment_line	int
;	O
static	O
int	O
phase4_getc	function
(	O
)	O
{	O
int	O
c0	int
;	O
int	O
c	int
;	O
bool	bool
last_was_star	bool
;	O
c0	int
=	O
phase3_getc	function
(	O
)	O
;	O
if	O
(	O
RED	O
(	O
c0	int
)	O
!=	O
'/'	O
)	O
return	O
c0	int
;	O
c	int
=	O
phase3_getc	function
(	O
)	O
;	O
switch	O
(	O
RED	O
(	O
c	int
)	O
)	O
{	O
default	O
:	O
phase3_ungetc	function
(	O
c	int
)	O
;	O
return	O
c0	int
;	O
case	O
'*'	O
:	O
comment_start	function
(	O
)	O
;	O
last_was_star	bool
=	O
false	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase3_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
P2_EOF	int
)	O
break	O
;	O
if	O
(	O
!	O
(	O
comment_at_start	function
(	O
)	O
&&	O
(	O
RED	O
(	O
c	int
)	O
==	O
' '	O
||	O
RED	O
(	O
c	int
)	O
==	O
'\t'	O
)	O
)	O
)	O
comment_add	function
(	O
c	int
)	O
;	O
switch	O
(	O
RED	O
(	O
c	int
)	O
)	O
{	O
case	O
'\n'	O
:	O
comment_line_end	function
(	O
1	int
)	O
;	O
comment_start	function
(	O
)	O
;	O
last_was_star	bool
=	O
false	int
;	O
continue	O
;	O
case	O
'*'	O
:	O
last_was_star	bool
=	O
true	int
;	O
continue	O
;	O
case	O
'/'	O
:	O
if	O
(	O
last_was_star	bool
)	O
{	O
comment_line_end	function
(	O
2	int
)	O
;	O
break	O
;	O
}	O
default	O
:	O
last_was_star	bool
=	O
false	int
;	O
continue	O
;	O
}	O
break	O
;	O
}	O
last_comment_line	int
=	O
line_number	long
;	O
return	O
' '	O
;	O
case	O
'/'	O
:	O
last_comment_line	int
=	O
line_number	long
;	O
comment_start	function
(	O
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase3_getc	function
(	O
)	O
;	O
if	O
(	O
RED	O
(	O
c	int
)	O
==	O
'\n'	O
||	O
c	int
==	O
P2_EOF	int
)	O
break	O
;	O
if	O
(	O
!	O
(	O
comment_at_start	function
(	O
)	O
&&	O
(	O
RED	O
(	O
c	int
)	O
==	O
' '	O
||	O
RED	O
(	O
c	int
)	O
==	O
'\t'	O
)	O
)	O
)	O
comment_add	function
(	O
c	int
)	O
;	O
}	O
phase3_ungetc	function
(	O
c	int
)	O
;	O
comment_line_end	function
(	O
0	int
)	O
;	O
phase3_getc	function
(	O
)	O
;	O
return	O
'\n'	O
;	O
}	O
}	O
static	O
void	O
phase4_ungetc	function
(	O
int	O
c	int
)	O
{	O
phase3_ungetc	function
(	O
c	int
)	O
;	O
}	O
enum	O
token_type_ty	enum
{	O
token_type_eof	int
,	O
token_type_lparen	int
,	O
token_type_rparen	int
,	O
token_type_lbrace	int
,	O
token_type_rbrace	int
,	O
token_type_comma	int
,	O
token_type_dot	int
,	O
token_type_string_literal	int
,	O
token_type_number	int
,	O
token_type_symbol	int
,	O
token_type_plus	int
,	O
token_type_other	int
}	O
;	O
typedef	O
enum	O
token_type_ty	enum
token_type_ty	enum
;	O
typedef	O
struct	O
token_ty	struct
token_ty	struct
;	O
struct	O
token_ty	struct
{	O
token_type_ty	enum
type	char
;	O
char	O
*	O
string	pointer
;	O
mixed_string_ty	struct
*	O
mixed_string	struct
;	O
refcounted_string_list_ty	struct
*	O
comment	pointer
;	O
int	O
line_number	long
;	O
}	O
;	O
static	O
inline	O
void	O
free_token	function
(	O
token_ty	struct
*	O
tp	pointer
)	O
{	O
if	O
(	O
tp	pointer
->	O
type	char
==	O
token_type_symbol	int
)	O
free	function
(	O
tp	pointer
->	O
string	pointer
)	O
;	O
if	O
(	O
tp	pointer
->	O
type	char
==	O
token_type_string_literal	int
)	O
{	O
free	function
(	O
tp	pointer
->	O
mixed_string	struct
)	O
;	O
drop_reference	function
(	O
tp	pointer
->	O
comment	pointer
)	O
;	O
}	O
}	O
static	O
inline	O
int	O
do_getc_escaped	function
(	O
)	O
{	O
int	O
c	int
;	O
c	int
=	O
phase3_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
P2_EOF	int
)	O
return	O
UNICODE	O
(	O
'\\'	O
)	O
;	O
switch	O
(	O
RED	O
(	O
c	int
)	O
)	O
{	O
case	O
'b'	O
:	O
return	O
UNICODE	O
(	O
0x08	int
)	O
;	O
case	O
't'	O
:	O
return	O
UNICODE	O
(	O
0x09	int
)	O
;	O
case	O
'n'	O
:	O
return	O
UNICODE	O
(	O
0x0a	int
)	O
;	O
case	O
'f'	O
:	O
return	O
UNICODE	O
(	O
0x0c	int
)	O
;	O
case	O
'r'	O
:	O
return	O
UNICODE	O
(	O
0x0d	int
)	O
;	O
case	O
'"'	O
:	O
return	O
UNICODE	O
(	O
'"'	O
)	O
;	O
case	O
'\''	O
:	O
return	O
UNICODE	O
(	O
'\''	O
)	O
;	O
case	O
'\\'	O
:	O
return	O
UNICODE	O
(	O
'\\'	O
)	O
;	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
{	O
int	O
n	long
=	O
RED	O
(	O
c	int
)	O
-	O
'0'	O
;	O
bool	bool
maybe3digits	bool
=	O
(	O
n	long
<	O
4	int
)	O
;	O
c	int
=	O
phase3_getc	function
(	O
)	O
;	O
if	O
(	O
RED	O
(	O
c	int
)	O
>=	O
'0'	O
&&	O
RED	O
(	O
c	int
)	O
<=	O
'7'	O
)	O
{	O
n	long
=	O
(	O
n	long
<<	O
3	int
)	O
+	O
(	O
RED	O
(	O
c	int
)	O
-	O
'0'	O
)	O
;	O
if	O
(	O
maybe3digits	bool
)	O
{	O
c	int
=	O
phase3_getc	function
(	O
)	O
;	O
if	O
(	O
RED	O
(	O
c	int
)	O
>=	O
'0'	O
&&	O
RED	O
(	O
c	int
)	O
<=	O
'7'	O
)	O
n	long
=	O
(	O
n	long
<<	O
3	int
)	O
+	O
(	O
RED	O
(	O
c	int
)	O
-	O
'0'	O
)	O
;	O
else	O
phase3_ungetc	function
(	O
c	int
)	O
;	O
}	O
}	O
else	O
phase3_ungetc	function
(	O
c	int
)	O
;	O
return	O
UNICODE	O
(	O
n	long
)	O
;	O
}	O
default	O
:	O
phase3_ungetc	function
(	O
c	int
)	O
;	O
return	O
UNICODE	O
(	O
'\\'	O
)	O
;	O
}	O
}	O
static	O
void	O
accumulate_escaped	function
(	O
struct	O
mixed_string_buffer	struct
*	O
literal	pointer
,	O
int	O
delimiter	int
)	O
{	O
int	O
c	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase3_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
P2_EOF	int
||	O
RED	O
(	O
c	int
)	O
==	O
delimiter	int
)	O
break	O
;	O
if	O
(	O
RED	O
(	O
c	int
)	O
==	O
'\n'	O
)	O
{	O
phase3_ungetc	function
(	O
c	int
)	O
;	O
error_with_progname	bool
=	O
false	int
;	O
if	O
(	O
delimiter	int
==	O
'\''	O
)	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s:%d: warning: unterminated character constant"	pointer
)	O
,	O
logical_file_name	pointer
,	O
line_number	long
)	O
;	O
else	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s:%d: warning: unterminated string constant"	pointer
)	O
,	O
logical_file_name	pointer
,	O
line_number	long
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
break	O
;	O
}	O
if	O
(	O
RED	O
(	O
c	int
)	O
==	O
'\\'	O
)	O
c	int
=	O
do_getc_escaped	function
(	O
)	O
;	O
mixed_string_buffer_append	function
(	O
literal	pointer
,	O
c	int
)	O
;	O
}	O
}	O
static	O
token_ty	struct
phase5_pushback	array
[	O
3	int
]	O
;	O
static	O
int	O
phase5_pushback_length	int
;	O
static	O
void	O
phase5_get	function
(	O
token_ty	struct
*	O
tp	pointer
)	O
{	O
int	O
c	int
;	O
if	O
(	O
phase5_pushback_length	int
)	O
{	O
*	O
tp	pointer
=	O
phase5_pushback	array
[	O
--	O
phase5_pushback_length	int
]	O
;	O
return	O
;	O
}	O
tp	pointer
->	O
string	pointer
=	O
NULL	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
tp	pointer
->	O
line_number	long
=	O
line_number	long
;	O
c	int
=	O
phase4_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
P2_EOF	int
)	O
{	O
tp	pointer
->	O
type	char
=	O
token_type_eof	int
;	O
return	O
;	O
}	O
switch	O
(	O
RED	O
(	O
c	int
)	O
)	O
{	O
case	O
'\n'	O
:	O
if	O
(	O
last_non_comment_line	int
>	O
last_comment_line	int
)	O
savable_comment_reset	function
(	O
)	O
;	O
case	O
' '	O
:	O
case	O
'\t'	O
:	O
case	O
'\f'	O
:	O
continue	O
;	O
}	O
last_non_comment_line	int
=	O
tp	pointer
->	O
line_number	long
;	O
switch	O
(	O
RED	O
(	O
c	int
)	O
)	O
{	O
case	O
'('	O
:	O
tp	pointer
->	O
type	char
=	O
token_type_lparen	int
;	O
return	O
;	O
case	O
')'	O
:	O
tp	pointer
->	O
type	char
=	O
token_type_rparen	int
;	O
return	O
;	O
case	O
'{'	O
:	O
tp	pointer
->	O
type	char
=	O
token_type_lbrace	int
;	O
return	O
;	O
case	O
'}'	O
:	O
tp	pointer
->	O
type	char
=	O
token_type_rbrace	int
;	O
return	O
;	O
case	O
','	O
:	O
tp	pointer
->	O
type	char
=	O
token_type_comma	int
;	O
return	O
;	O
case	O
'.'	O
:	O
c	int
=	O
phase4_getc	function
(	O
)	O
;	O
if	O
(	O
!	O
(	O
RED	O
(	O
c	int
)	O
>=	O
'0'	O
&&	O
RED	O
(	O
c	int
)	O
<=	O
'9'	O
)	O
)	O
{	O
phase4_ungetc	function
(	O
c	int
)	O
;	O
tp	pointer
->	O
type	char
=	O
token_type_dot	int
;	O
return	O
;	O
}	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
{	O
bool	bool
hexadecimal	bool
=	O
false	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase4_getc	function
(	O
)	O
;	O
if	O
(	O
RED	O
(	O
c	int
)	O
>=	O
'0'	O
&&	O
RED	O
(	O
c	int
)	O
<=	O
'9'	O
)	O
continue	O
;	O
if	O
(	O
(	O
RED	O
(	O
c	int
)	O
>=	O
'A'	O
&&	O
RED	O
(	O
c	int
)	O
<=	O
'Z'	O
)	O
||	O
(	O
RED	O
(	O
c	int
)	O
>=	O
'a'	O
&&	O
RED	O
(	O
c	int
)	O
<=	O
'z'	O
)	O
)	O
{	O
if	O
(	O
RED	O
(	O
c	int
)	O
==	O
'X'	O
||	O
RED	O
(	O
c	int
)	O
==	O
'x'	O
)	O
hexadecimal	bool
=	O
true	int
;	O
if	O
(	O
(	O
RED	O
(	O
c	int
)	O
==	O
'E'	O
||	O
RED	O
(	O
c	int
)	O
==	O
'e'	O
)	O
&&	O
!	O
hexadecimal	bool
)	O
{	O
c	int
=	O
phase4_getc	function
(	O
)	O
;	O
if	O
(	O
!	O
(	O
RED	O
(	O
c	int
)	O
==	O
'+'	O
||	O
RED	O
(	O
c	int
)	O
==	O
'-'	O
)	O
)	O
phase4_ungetc	function
(	O
c	int
)	O
;	O
}	O
continue	O
;	O
}	O
if	O
(	O
RED	O
(	O
c	int
)	O
==	O
'.'	O
)	O
continue	O
;	O
break	O
;	O
}	O
phase4_ungetc	function
(	O
c	int
)	O
;	O
tp	pointer
->	O
type	char
=	O
token_type_number	int
;	O
return	O
;	O
}	O
case	O
'A'	O
:	O
case	O
'B'	O
:	O
case	O
'C'	O
:	O
case	O
'D'	O
:	O
case	O
'E'	O
:	O
case	O
'F'	O
:	O
case	O
'G'	O
:	O
case	O
'H'	O
:	O
case	O
'I'	O
:	O
case	O
'J'	O
:	O
case	O
'K'	O
:	O
case	O
'L'	O
:	O
case	O
'M'	O
:	O
case	O
'N'	O
:	O
case	O
'O'	O
:	O
case	O
'P'	O
:	O
case	O
'Q'	O
:	O
case	O
'R'	O
:	O
case	O
'S'	O
:	O
case	O
'T'	O
:	O
case	O
'U'	O
:	O
case	O
'V'	O
:	O
case	O
'W'	O
:	O
case	O
'X'	O
:	O
case	O
'Y'	O
:	O
case	O
'Z'	O
:	O
case	O
'_'	O
:	O
case	O
'a'	O
:	O
case	O
'b'	O
:	O
case	O
'c'	O
:	O
case	O
'd'	O
:	O
case	O
'e'	O
:	O
case	O
'f'	O
:	O
case	O
'g'	O
:	O
case	O
'h'	O
:	O
case	O
'i'	O
:	O
case	O
'j'	O
:	O
case	O
'k'	O
:	O
case	O
'l'	O
:	O
case	O
'm'	O
:	O
case	O
'n'	O
:	O
case	O
'o'	O
:	O
case	O
'p'	O
:	O
case	O
'q'	O
:	O
case	O
'r'	O
:	O
case	O
's'	O
:	O
case	O
't'	O
:	O
case	O
'u'	O
:	O
case	O
'v'	O
:	O
case	O
'w'	O
:	O
case	O
'x'	O
:	O
case	O
'y'	O
:	O
case	O
'z'	O
:	O
{	O
static	O
char	O
*	O
buffer	pointer
;	O
static	O
int	O
bufmax	int
;	O
int	O
bufpos	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
bufpos	int
>=	O
bufmax	int
)	O
{	O
bufmax	int
=	O
2	int
*	O
bufmax	int
+	O
10	int
;	O
buffer	pointer
=	O
xrealloc	function
(	O
buffer	pointer
,	O
bufmax	int
)	O
;	O
}	O
buffer	pointer
[	O
bufpos	int
++	O
]	O
=	O
RED	O
(	O
c	int
)	O
;	O
c	int
=	O
phase4_getc	function
(	O
)	O
;	O
if	O
(	O
!	O
(	O
(	O
RED	O
(	O
c	int
)	O
>=	O
'A'	O
&&	O
RED	O
(	O
c	int
)	O
<=	O
'Z'	O
)	O
||	O
(	O
RED	O
(	O
c	int
)	O
>=	O
'a'	O
&&	O
RED	O
(	O
c	int
)	O
<=	O
'z'	O
)	O
||	O
(	O
RED	O
(	O
c	int
)	O
>=	O
'0'	O
&&	O
RED	O
(	O
c	int
)	O
<=	O
'9'	O
)	O
||	O
RED	O
(	O
c	int
)	O
==	O
'_'	O
)	O
)	O
break	O
;	O
}	O
phase4_ungetc	function
(	O
c	int
)	O
;	O
if	O
(	O
bufpos	int
>=	O
bufmax	int
)	O
{	O
bufmax	int
=	O
2	int
*	O
bufmax	int
+	O
10	int
;	O
buffer	pointer
=	O
xrealloc	function
(	O
buffer	pointer
,	O
bufmax	int
)	O
;	O
}	O
buffer	pointer
[	O
bufpos	int
]	O
=	O
'\0'	O
;	O
tp	pointer
->	O
string	pointer
=	O
xstrdup	function
(	O
buffer	pointer
)	O
;	O
tp	pointer
->	O
type	char
=	O
token_type_symbol	int
;	O
return	O
;	O
}	O
case	O
'"'	O
:	O
{	O
struct	O
mixed_string_buffer	struct
literal	pointer
;	O
mixed_string_buffer_init	function
(	O
&	O
literal	pointer
,	O
lc_string	int
,	O
logical_file_name	pointer
,	O
line_number	long
)	O
;	O
accumulate_escaped	function
(	O
&	O
literal	pointer
,	O
'"'	O
)	O
;	O
tp	pointer
->	O
mixed_string	struct
=	O
mixed_string_buffer_result	function
(	O
&	O
literal	pointer
)	O
;	O
tp	pointer
->	O
comment	pointer
=	O
add_reference	function
(	O
savable_comment	pointer
)	O
;	O
tp	pointer
->	O
type	char
=	O
token_type_string_literal	int
;	O
return	O
;	O
}	O
case	O
'\''	O
:	O
{	O
struct	O
mixed_string_buffer	struct
literal	pointer
;	O
mixed_string_buffer_init	function
(	O
&	O
literal	pointer
,	O
lc_outside	int
,	O
logical_file_name	pointer
,	O
line_number	long
)	O
;	O
accumulate_escaped	function
(	O
&	O
literal	pointer
,	O
'\''	O
)	O
;	O
mixed_string_buffer_destroy	function
(	O
&	O
literal	pointer
)	O
;	O
tp	pointer
->	O
type	char
=	O
token_type_other	int
;	O
return	O
;	O
}	O
case	O
'+'	O
:	O
c	int
=	O
phase4_getc	function
(	O
)	O
;	O
if	O
(	O
RED	O
(	O
c	int
)	O
==	O
'+'	O
)	O
tp	pointer
->	O
type	char
=	O
token_type_other	int
;	O
else	O
if	O
(	O
RED	O
(	O
c	int
)	O
==	O
'='	O
)	O
tp	pointer
->	O
type	char
=	O
token_type_other	int
;	O
else	O
{	O
phase4_ungetc	function
(	O
c	int
)	O
;	O
tp	pointer
->	O
type	char
=	O
token_type_plus	int
;	O
}	O
return	O
;	O
default	O
:	O
tp	pointer
->	O
type	char
=	O
token_type_other	int
;	O
return	O
;	O
}	O
}	O
}	O
static	O
void	O
phase5_unget	function
(	O
token_ty	struct
*	O
tp	pointer
)	O
{	O
if	O
(	O
tp	pointer
->	O
type	char
!=	O
token_type_eof	int
)	O
{	O
if	O
(	O
phase5_pushback_length	int
==	O
SIZEOF	O
(	O
phase5_pushback	array
)	O
)	O
abort	function
(	O
)	O
;	O
phase5_pushback	array
[	O
phase5_pushback_length	int
++	O
]	O
=	O
*	O
tp	pointer
;	O
}	O
}	O
static	O
token_ty	struct
phase6_pushback	array
[	O
2	int
]	O
;	O
static	O
int	O
phase6_pushback_length	int
;	O
static	O
token_type_ty	enum
phase6_last	enum
;	O
static	O
void	O
phase6_get	function
(	O
token_ty	struct
*	O
tp	pointer
)	O
{	O
if	O
(	O
phase6_pushback_length	int
)	O
{	O
*	O
tp	pointer
=	O
phase6_pushback	array
[	O
--	O
phase6_pushback_length	int
]	O
;	O
return	O
;	O
}	O
phase5_get	function
(	O
tp	pointer
)	O
;	O
if	O
(	O
tp	pointer
->	O
type	char
==	O
token_type_string_literal	int
&&	O
phase6_last	enum
!=	O
token_type_rparen	int
)	O
{	O
mixed_string_ty	struct
*	O
sum	pointer
=	O
tp	pointer
->	O
mixed_string	struct
;	O
for	O
(	O
;	O
;	O
)	O
{	O
token_ty	struct
token2	struct
;	O
phase5_get	function
(	O
&	O
token2	struct
)	O
;	O
if	O
(	O
token2	struct
.	O
type	char
==	O
token_type_plus	int
)	O
{	O
token_ty	struct
token3	struct
;	O
phase5_get	function
(	O
&	O
token3	struct
)	O
;	O
if	O
(	O
token3	struct
.	O
type	char
==	O
token_type_string_literal	int
)	O
{	O
token_ty	struct
token_after	struct
;	O
phase5_get	function
(	O
&	O
token_after	struct
)	O
;	O
if	O
(	O
token_after	struct
.	O
type	char
!=	O
token_type_dot	int
)	O
{	O
sum	pointer
=	O
mixed_string_concat_free1	function
(	O
sum	pointer
,	O
token3	struct
.	O
mixed_string	struct
)	O
;	O
phase5_unget	function
(	O
&	O
token_after	struct
)	O
;	O
free_token	function
(	O
&	O
token3	struct
)	O
;	O
free_token	function
(	O
&	O
token2	struct
)	O
;	O
continue	O
;	O
}	O
phase5_unget	function
(	O
&	O
token_after	struct
)	O
;	O
}	O
phase5_unget	function
(	O
&	O
token3	struct
)	O
;	O
}	O
phase5_unget	function
(	O
&	O
token2	struct
)	O
;	O
break	O
;	O
}	O
tp	pointer
->	O
mixed_string	struct
=	O
sum	pointer
;	O
}	O
phase6_last	enum
=	O
tp	pointer
->	O
type	char
;	O
}	O
static	O
void	O
phase6_unget	function
(	O
token_ty	struct
*	O
tp	pointer
)	O
{	O
if	O
(	O
tp	pointer
->	O
type	char
!=	O
token_type_eof	int
)	O
{	O
if	O
(	O
phase6_pushback_length	int
==	O
SIZEOF	O
(	O
phase6_pushback	array
)	O
)	O
abort	function
(	O
)	O
;	O
phase6_pushback	array
[	O
phase6_pushback_length	int
++	O
]	O
=	O
*	O
tp	pointer
;	O
}	O
}	O
static	O
void	O
x_java_lex	function
(	O
token_ty	struct
*	O
tp	pointer
)	O
{	O
phase6_get	function
(	O
tp	pointer
)	O
;	O
}	O
static	O
void	O
x_java_unlex	function
(	O
token_ty	struct
*	O
tp	pointer
)	O
{	O
phase6_unget	function
(	O
tp	pointer
)	O
;	O
}	O
static	O
flag_context_list_table_ty	struct
*	O
flag_context_list_table	pointer
;	O
static	O
bool	bool
extract_parenthesized	function
(	O
message_list_ty	struct
*	O
mlp	pointer
,	O
token_type_ty	enum
terminator	char
,	O
flag_context_ty	struct
outer_context	struct
,	O
flag_context_list_iterator_ty	struct
context_iter	struct
,	O
struct	O
arglist_parser	struct
*	O
argparser	pointer
)	O
{	O
int	O
arg	int
=	O
1	int
;	O
int	O
state	pointer
;	O
const	O
struct	O
callshapes	struct
*	O
next_shapes	pointer
=	O
NULL	O
;	O
flag_context_list_iterator_ty	struct
next_context_iter	struct
=	O
passthrough_context_list_iterator	struct
;	O
flag_context_ty	struct
inner_context	struct
=	O
inherited_context	function
(	O
outer_context	struct
,	O
flag_context_list_iterator_advance	function
(	O
&	O
context_iter	struct
)	O
)	O
;	O
state	pointer
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
token_ty	struct
token	struct
;	O
x_java_lex	function
(	O
&	O
token	struct
)	O
;	O
switch	O
(	O
token	struct
.	O
type	char
)	O
{	O
case	O
token_type_symbol	int
:	O
{	O
char	O
*	O
sum	pointer
=	O
token	struct
.	O
string	pointer
;	O
size_t	long
sum_len	long
=	O
strlen	function
(	O
sum	pointer
)	O
;	O
const	O
char	O
*	O
dottedname	pointer
;	O
flag_context_list_ty	struct
*	O
context_list	pointer
;	O
for	O
(	O
;	O
;	O
)	O
{	O
token_ty	struct
token2	struct
;	O
x_java_lex	function
(	O
&	O
token2	struct
)	O
;	O
if	O
(	O
token2	struct
.	O
type	char
==	O
token_type_dot	int
)	O
{	O
token_ty	struct
token3	struct
;	O
x_java_lex	function
(	O
&	O
token3	struct
)	O
;	O
if	O
(	O
token3	struct
.	O
type	char
==	O
token_type_symbol	int
)	O
{	O
char	O
*	O
addend	pointer
=	O
token3	struct
.	O
string	pointer
;	O
size_t	long
addend_len	long
=	O
strlen	function
(	O
addend	pointer
)	O
;	O
sum	pointer
=	O
(	O
char	O
*	O
)	O
xrealloc	function
(	O
sum	pointer
,	O
sum_len	long
+	O
1	int
+	O
addend_len	long
+	O
1	int
)	O
;	O
sum	pointer
[	O
sum_len	long
]	O
=	O
'.'	O
;	O
memcpy	function
(	O
sum	pointer
+	O
sum_len	long
+	O
1	int
,	O
addend	pointer
,	O
addend_len	long
+	O
1	int
)	O
;	O
sum_len	long
+=	O
1	int
+	O
addend_len	long
;	O
free_token	function
(	O
&	O
token3	struct
)	O
;	O
free_token	function
(	O
&	O
token2	struct
)	O
;	O
continue	O
;	O
}	O
x_java_unlex	function
(	O
&	O
token3	struct
)	O
;	O
}	O
x_java_unlex	function
(	O
&	O
token2	struct
)	O
;	O
break	O
;	O
}	O
for	O
(	O
dottedname	pointer
=	O
sum	pointer
;	O
;	O
)	O
{	O
void	O
*	O
keyword_value	pointer
;	O
if	O
(	O
hash_find_entry	function
(	O
&	O
keywords	struct
,	O
dottedname	pointer
,	O
strlen	function
(	O
dottedname	pointer
)	O
,	O
&	O
keyword_value	pointer
)	O
==	O
0	int
)	O
{	O
next_shapes	pointer
=	O
(	O
const	O
struct	O
callshapes	struct
*	O
)	O
keyword_value	pointer
;	O
state	pointer
=	O
1	int
;	O
break	O
;	O
}	O
dottedname	pointer
=	O
strchr	function
(	O
dottedname	pointer
,	O
'.'	O
)	O
;	O
if	O
(	O
dottedname	pointer
==	O
NULL	O
)	O
{	O
state	pointer
=	O
0	int
;	O
break	O
;	O
}	O
dottedname	pointer
++	O
;	O
}	O
for	O
(	O
dottedname	pointer
=	O
sum	pointer
;	O
;	O
)	O
{	O
context_list	pointer
=	O
flag_context_list_table_lookup	function
(	O
flag_context_list_table	pointer
,	O
dottedname	pointer
,	O
strlen	function
(	O
dottedname	pointer
)	O
)	O
;	O
if	O
(	O
context_list	pointer
!=	O
NULL	O
)	O
break	O
;	O
dottedname	pointer
=	O
strchr	function
(	O
dottedname	pointer
,	O
'.'	O
)	O
;	O
if	O
(	O
dottedname	pointer
==	O
NULL	O
)	O
break	O
;	O
dottedname	pointer
++	O
;	O
}	O
next_context_iter	struct
=	O
flag_context_list_iterator	function
(	O
context_list	pointer
)	O
;	O
free	function
(	O
sum	pointer
)	O
;	O
continue	O
;	O
}	O
case	O
token_type_lparen	int
:	O
if	O
(	O
extract_parenthesized	function
(	O
mlp	pointer
,	O
token_type_rparen	int
,	O
inner_context	struct
,	O
next_context_iter	struct
,	O
arglist_parser_alloc	function
(	O
mlp	pointer
,	O
state	pointer
?	O
next_shapes	pointer
:	O
NULL	O
)	O
)	O
)	O
{	O
arglist_parser_done	function
(	O
argparser	pointer
,	O
arg	int
)	O
;	O
return	O
true	int
;	O
}	O
next_context_iter	struct
=	O
null_context_list_iterator	struct
;	O
state	pointer
=	O
0	int
;	O
continue	O
;	O
case	O
token_type_rparen	int
:	O
if	O
(	O
terminator	char
==	O
token_type_rparen	int
)	O
{	O
arglist_parser_done	function
(	O
argparser	pointer
,	O
arg	int
)	O
;	O
return	O
false	int
;	O
}	O
if	O
(	O
terminator	char
==	O
token_type_rbrace	int
)	O
{	O
error_with_progname	bool
=	O
false	int
;	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s:%d: warning: ')' found where '}' was expected"	pointer
)	O
,	O
logical_file_name	pointer
,	O
token	struct
.	O
line_number	long
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
}	O
next_context_iter	struct
=	O
null_context_list_iterator	struct
;	O
state	pointer
=	O
0	int
;	O
continue	O
;	O
case	O
token_type_lbrace	int
:	O
if	O
(	O
extract_parenthesized	function
(	O
mlp	pointer
,	O
token_type_rbrace	int
,	O
null_context	struct
,	O
null_context_list_iterator	struct
,	O
arglist_parser_alloc	function
(	O
mlp	pointer
,	O
NULL	O
)	O
)	O
)	O
{	O
arglist_parser_done	function
(	O
argparser	pointer
,	O
arg	int
)	O
;	O
return	O
true	int
;	O
}	O
next_context_iter	struct
=	O
null_context_list_iterator	struct
;	O
state	pointer
=	O
0	int
;	O
continue	O
;	O
case	O
token_type_rbrace	int
:	O
if	O
(	O
terminator	char
==	O
token_type_rbrace	int
)	O
{	O
arglist_parser_done	function
(	O
argparser	pointer
,	O
arg	int
)	O
;	O
return	O
false	int
;	O
}	O
if	O
(	O
terminator	char
==	O
token_type_rparen	int
)	O
{	O
error_with_progname	bool
=	O
false	int
;	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s:%d: warning: '}' found where ')' was expected"	pointer
)	O
,	O
logical_file_name	pointer
,	O
token	struct
.	O
line_number	long
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
}	O
next_context_iter	struct
=	O
null_context_list_iterator	struct
;	O
state	pointer
=	O
0	int
;	O
continue	O
;	O
case	O
token_type_comma	int
:	O
arg	int
++	O
;	O
inner_context	struct
=	O
inherited_context	function
(	O
outer_context	struct
,	O
flag_context_list_iterator_advance	function
(	O
&	O
context_iter	struct
)	O
)	O
;	O
next_context_iter	struct
=	O
passthrough_context_list_iterator	struct
;	O
state	pointer
=	O
0	int
;	O
continue	O
;	O
case	O
token_type_string_literal	int
:	O
{	O
lex_pos_ty	struct
pos	struct
;	O
pos	struct
.	O
file_name	pointer
=	O
logical_file_name	pointer
;	O
pos	struct
.	O
line_number	long
=	O
token	struct
.	O
line_number	long
;	O
if	O
(	O
extract_all	bool
)	O
{	O
char	O
*	O
string	pointer
=	O
mixed_string_contents	function
(	O
token	struct
.	O
mixed_string	struct
)	O
;	O
mixed_string_free	function
(	O
token	struct
.	O
mixed_string	struct
)	O
;	O
remember_a_message	function
(	O
mlp	pointer
,	O
NULL	O
,	O
string	pointer
,	O
true	int
,	O
inner_context	struct
,	O
&	O
pos	struct
,	O
NULL	O
,	O
token	struct
.	O
comment	pointer
,	O
true	int
)	O
;	O
}	O
else	O
arglist_parser_remember	function
(	O
argparser	pointer
,	O
arg	int
,	O
token	struct
.	O
mixed_string	struct
,	O
inner_context	struct
,	O
pos	struct
.	O
file_name	pointer
,	O
pos	struct
.	O
line_number	long
,	O
token	struct
.	O
comment	pointer
,	O
true	int
)	O
;	O
}	O
drop_reference	function
(	O
token	struct
.	O
comment	pointer
)	O
;	O
next_context_iter	struct
=	O
null_context_list_iterator	struct
;	O
state	pointer
=	O
0	int
;	O
continue	O
;	O
case	O
token_type_eof	int
:	O
arglist_parser_done	function
(	O
argparser	pointer
,	O
arg	int
)	O
;	O
return	O
true	int
;	O
case	O
token_type_dot	int
:	O
case	O
token_type_number	int
:	O
case	O
token_type_plus	int
:	O
case	O
token_type_other	int
:	O
next_context_iter	struct
=	O
null_context_list_iterator	struct
;	O
state	pointer
=	O
0	int
;	O
continue	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
}	O
void	O
extract_java	function
(	O
FILE	struct
*	O
f	pointer
,	O
const	O
char	O
*	O
real_filename	pointer
,	O
const	O
char	O
*	O
logical_filename	pointer
,	O
flag_context_list_table_ty	struct
*	O
flag_table	pointer
,	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
)	O
{	O
message_list_ty	struct
*	O
mlp	pointer
=	O
mdlp	pointer
->	O
item	pointer
[	O
0	int
]	O
->	O
messages	pointer
;	O
fp	pointer
=	O
f	pointer
;	O
real_file_name	pointer
=	O
real_filename	pointer
;	O
logical_file_name	pointer
=	O
xstrdup	function
(	O
logical_filename	pointer
)	O
;	O
line_number	long
=	O
1	int
;	O
last_comment_line	int
=	O
-	O
1	int
;	O
last_non_comment_line	int
=	O
-	O
1	int
;	O
phase6_last	enum
=	O
token_type_eof	int
;	O
flag_context_list_table	pointer
=	O
flag_table	pointer
;	O
init_keywords	function
(	O
)	O
;	O
while	O
(	O
!	O
extract_parenthesized	function
(	O
mlp	pointer
,	O
token_type_eof	int
,	O
null_context	struct
,	O
null_context_list_iterator	struct
,	O
arglist_parser_alloc	function
(	O
mlp	pointer
,	O
NULL	O
)	O
)	O
)	O
;	O
fp	pointer
=	O
NULL	O
;	O
real_file_name	pointer
=	O
NULL	O
;	O
logical_file_name	pointer
=	O
NULL	O
;	O
line_number	long
=	O
0	int
;	O
}	O
