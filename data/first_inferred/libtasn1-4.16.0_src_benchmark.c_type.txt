int	O
benchmark_must_finish	int
=	O
0	int
;	O
static	O
void	O
alarm_handler	function
(	O
int	O
signo	int
)	O
{	O
benchmark_must_finish	int
=	O
1	int
;	O
}	O
static	O
void	O
value2human	function
(	O
unsigned	O
long	O
bytes	long
,	O
double	O
secs	double
,	O
double	O
*	O
data	pointer
,	O
double	O
*	O
speed	pointer
,	O
char	O
*	O
metric	pointer
)	O
{	O
if	O
(	O
bytes	long
>	O
1000	int
&&	O
bytes	long
<	O
1000	int
*	O
1000	int
)	O
{	O
*	O
data	pointer
=	O
(	O
(	O
double	O
)	O
bytes	long
)	O
/	O
1000	int
;	O
*	O
speed	pointer
=	O
*	O
data	pointer
/	O
secs	double
;	O
strcpy	function
(	O
metric	pointer
,	O
"KB"	pointer
)	O
;	O
return	O
;	O
}	O
else	O
if	O
(	O
bytes	long
>=	O
1000	int
*	O
1000	int
&&	O
bytes	long
<	O
1000	int
*	O
1000	int
*	O
1000	int
)	O
{	O
*	O
data	pointer
=	O
(	O
(	O
double	O
)	O
bytes	long
)	O
/	O
(	O
1000	int
*	O
1000	int
)	O
;	O
*	O
speed	pointer
=	O
*	O
data	pointer
/	O
secs	double
;	O
strcpy	function
(	O
metric	pointer
,	O
"MB"	pointer
)	O
;	O
return	O
;	O
}	O
else	O
if	O
(	O
bytes	long
>=	O
1000	int
*	O
1000	int
*	O
1000	int
)	O
{	O
*	O
data	pointer
=	O
(	O
(	O
double	O
)	O
bytes	long
)	O
/	O
(	O
1000	int
*	O
1000	int
*	O
1000	int
)	O
;	O
*	O
speed	pointer
=	O
*	O
data	pointer
/	O
secs	double
;	O
strcpy	function
(	O
metric	pointer
,	O
"GB"	pointer
)	O
;	O
return	O
;	O
}	O
else	O
{	O
*	O
data	pointer
=	O
(	O
double	O
)	O
bytes	long
;	O
*	O
speed	pointer
=	O
*	O
data	pointer
/	O
secs	double
;	O
strcpy	function
(	O
metric	pointer
,	O
"bytes"	pointer
)	O
;	O
return	O
;	O
}	O
}	O
void	O
start_benchmark	function
(	O
struct	O
benchmark_st	struct
*	O
st	pointer
)	O
{	O
memset	function
(	O
st	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
st	pointer
)	O
)	O
;	O
st	pointer
->	O
old_handler	pointer
=	O
signal	function
(	O
SIGALRM	int
,	O
alarm_handler	function
)	O
;	O
clock_gettime	function
(	O
CLOCK_MONOTONIC	int
,	O
&	O
st	pointer
->	O
start	struct
)	O
;	O
benchmark_must_finish	int
=	O
0	int
;	O
alarm	function
(	O
5	int
)	O
;	O
}	O
double	O
stop_benchmark	function
(	O
struct	O
benchmark_st	struct
*	O
st	pointer
,	O
const	O
char	O
*	O
metric	pointer
)	O
{	O
double	O
secs	double
;	O
unsigned	O
long	O
lsecs	long
;	O
struct	O
timespec	struct
stop	struct
;	O
double	O
dspeed	double
,	O
ddata	double
;	O
char	O
imetric	array
[	O
16	int
]	O
;	O
signal	function
(	O
SIGALRM	int
,	O
st	pointer
->	O
old_handler	pointer
)	O
;	O
clock_gettime	function
(	O
CLOCK_MONOTONIC	int
,	O
&	O
stop	struct
)	O
;	O
lsecs	long
=	O
(	O
stop	struct
.	O
tv_sec	long
*	O
1000	int
+	O
stop	struct
.	O
tv_nsec	long
/	O
(	O
1000	int
*	O
1000	int
)	O
-	O
(	O
st	pointer
->	O
start	struct
.	O
tv_sec	long
*	O
1000	int
+	O
st	pointer
->	O
start	struct
.	O
tv_nsec	long
/	O
(	O
1000	int
*	O
1000	int
)	O
)	O
)	O
;	O
secs	double
=	O
lsecs	long
;	O
secs	double
/=	O
1000	int
;	O
if	O
(	O
metric	pointer
==	O
NULL	O
)	O
{	O
value2human	function
(	O
st	pointer
->	O
size	long
,	O
secs	double
,	O
&	O
ddata	double
,	O
&	O
dspeed	double
,	O
imetric	array
)	O
;	O
printf	function
(	O
"  Processed %.2f %s in %.2f secs: "	pointer
,	O
ddata	double
,	O
imetric	array
,	O
secs	double
)	O
;	O
printf	function
(	O
"%.2f %s/sec\n"	pointer
,	O
dspeed	double
,	O
imetric	array
)	O
;	O
}	O
else	O
{	O
ddata	double
=	O
(	O
double	O
)	O
st	pointer
->	O
size	long
;	O
dspeed	double
=	O
ddata	double
/	O
secs	double
;	O
printf	function
(	O
"  Processed %.2f %s in %.2f secs: "	pointer
,	O
ddata	double
,	O
metric	pointer
,	O
secs	double
)	O
;	O
printf	function
(	O
"%.2f %s/sec\n"	pointer
,	O
dspeed	double
,	O
metric	pointer
)	O
;	O
}	O
return	O
secs	double
;	O
}	O
