static	O
int	O
alloc_string_len	function
(	O
char	O
*	O
*	O
sptr	pointer
,	O
const	O
char	O
*	O
start	pointer
,	O
size_t	long
len	int
)	O
{	O
*	O
sptr	pointer
=	O
malloc	function
(	O
len	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
*	O
sptr	pointer
)	O
return	O
1	int
;	O
memcpy	function
(	O
*	O
sptr	pointer
,	O
start	pointer
,	O
len	int
)	O
;	O
(	O
*	O
sptr	pointer
)	O
[	O
len	int
]	O
=	O
0	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
alloc_string	function
(	O
char	O
*	O
*	O
sptr	pointer
,	O
const	O
char	O
*	O
start	pointer
,	O
const	O
char	O
*	O
end	int
)	O
{	O
size_t	long
len	int
=	O
end	int
?	O
end	int
-	O
start	pointer
:	O
strlen	function
(	O
start	pointer
)	O
;	O
return	O
alloc_string_len	function
(	O
sptr	pointer
,	O
start	pointer
,	O
len	int
)	O
;	O
}	O
static	O
int	O
alloc_string_def	function
(	O
char	O
*	O
*	O
sptr	pointer
,	O
const	O
char	O
*	O
start	pointer
,	O
const	O
char	O
*	O
end	int
,	O
const	O
char	O
*	O
def	pointer
)	O
{	O
if	O
(	O
end	int
==	O
start	pointer
)	O
return	O
alloc_string	function
(	O
sptr	pointer
,	O
def	pointer
,	O
NULL	O
)	O
;	O
else	O
return	O
alloc_string	function
(	O
sptr	pointer
,	O
start	pointer
,	O
end	int
)	O
;	O
}	O
static	O
int	O
url_parse_arg	function
(	O
dico_url_t	pointer
url	pointer
,	O
char	O
*	O
p	pointer
,	O
char	O
*	O
q	pointer
)	O
{	O
char	O
*	O
s	pointer
;	O
char	O
*	O
key	pointer
,	O
*	O
value	pointer
=	O
NULL	O
;	O
for	O
(	O
s	pointer
=	O
p	pointer
;	O
s	pointer
<	O
q	pointer
&&	O
*	O
s	pointer
!=	O
'='	O
;	O
s	pointer
++	O
)	O
;	O
if	O
(	O
alloc_string	function
(	O
&	O
key	pointer
,	O
p	pointer
,	O
s	pointer
)	O
)	O
return	O
1	int
;	O
if	O
(	O
s	pointer
!=	O
q	pointer
)	O
{	O
if	O
(	O
alloc_string	function
(	O
&	O
value	pointer
,	O
s	pointer
+	O
1	int
,	O
q	pointer
)	O
)	O
return	O
1	int
;	O
}	O
dico_assoc_append	function
(	O
url	pointer
->	O
args	pointer
,	O
key	pointer
,	O
value	pointer
)	O
;	O
free	function
(	O
key	pointer
)	O
;	O
free	function
(	O
value	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
url_get_args	function
(	O
dico_url_t	pointer
url	pointer
,	O
char	O
*	O
*	O
str	pointer
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
p	pointer
;	O
if	O
(	O
!	O
*	O
*	O
str	pointer
)	O
return	O
0	int
;	O
url	pointer
->	O
args	pointer
=	O
dico_assoc_create	function
(	O
DICO_ASSOC_MULT	int
)	O
;	O
if	O
(	O
!	O
url	pointer
->	O
args	pointer
)	O
return	O
1	int
;	O
for	O
(	O
p	pointer
=	O
*	O
str	pointer
,	O
rc	int
=	O
0	int
;	O
!	O
rc	int
;	O
)	O
{	O
char	O
*	O
q	pointer
=	O
strchr	function
(	O
p	pointer
,	O
';'	O
)	O
;	O
if	O
(	O
q	pointer
)	O
{	O
rc	int
=	O
url_parse_arg	function
(	O
url	pointer
,	O
p	pointer
,	O
q	pointer
)	O
;	O
p	pointer
=	O
q	pointer
+	O
1	int
;	O
}	O
else	O
{	O
rc	int
=	O
url_parse_arg	function
(	O
url	pointer
,	O
p	pointer
,	O
p	pointer
+	O
strlen	function
(	O
p	pointer
)	O
)	O
;	O
break	O
;	O
}	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
url_get_path	function
(	O
dico_url_t	pointer
url	pointer
,	O
char	O
*	O
*	O
str	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
p	pointer
=	O
strchr	function
(	O
*	O
str	pointer
,	O
';'	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
p	pointer
=	O
*	O
str	pointer
+	O
strlen	function
(	O
*	O
str	pointer
)	O
;	O
if	O
(	O
alloc_string	function
(	O
&	O
url	pointer
->	O
path	pointer
,	O
*	O
str	pointer
,	O
p	pointer
)	O
)	O
return	O
1	int
;	O
*	O
str	pointer
=	O
p	pointer
;	O
if	O
(	O
*	O
p	pointer
)	O
++	O
*	O
str	pointer
;	O
return	O
url_get_args	function
(	O
url	pointer
,	O
str	pointer
)	O
;	O
}	O
static	O
int	O
url_get_host	function
(	O
dico_url_t	pointer
url	pointer
,	O
char	O
*	O
*	O
str	pointer
)	O
{	O
char	O
*	O
s	pointer
=	O
*	O
str	pointer
;	O
size_t	long
len	int
=	O
strcspn	function
(	O
s	pointer
,	O
"/:"	pointer
)	O
;	O
if	O
(	O
s	pointer
[	O
len	int
]	O
==	O
':'	O
)	O
{	O
char	O
*	O
q	pointer
=	O
s	pointer
+	O
len	int
+	O
1	int
;	O
size_t	long
qlen	long
=	O
strcspn	function
(	O
q	pointer
,	O
"/;:"	pointer
)	O
;	O
alloc_string_len	function
(	O
&	O
url	pointer
->	O
port	pointer
,	O
q	pointer
,	O
qlen	long
)	O
;	O
*	O
str	pointer
=	O
q	pointer
+	O
strcspn	function
(	O
q	pointer
,	O
"/"	pointer
)	O
;	O
}	O
else	O
*	O
str	pointer
=	O
s	pointer
+	O
len	int
;	O
if	O
(	O
alloc_string_len	function
(	O
&	O
url	pointer
->	O
host	pointer
,	O
s	pointer
,	O
len	int
)	O
)	O
return	O
1	int
;	O
if	O
(	O
*	O
*	O
str	pointer
)	O
{	O
++	O
*	O
str	pointer
;	O
return	O
url_get_path	function
(	O
url	pointer
,	O
str	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
url_get_user	function
(	O
dico_url_t	pointer
url	pointer
,	O
char	O
*	O
*	O
str	pointer
)	O
{	O
size_t	long
len	int
=	O
strcspn	function
(	O
*	O
str	pointer
,	O
":;@/"	pointer
)	O
;	O
char	O
*	O
p	pointer
=	O
*	O
str	pointer
+	O
len	int
;	O
switch	O
(	O
*	O
p	pointer
)	O
{	O
case	O
';'	O
:	O
if	O
(	O
strcmp	function
(	O
url	pointer
->	O
proto	pointer
,	O
"dict"	pointer
)	O
)	O
break	O
;	O
case	O
':'	O
:	O
len	int
=	O
strcspn	function
(	O
p	pointer
+	O
1	int
,	O
"@/:"	pointer
)	O
;	O
if	O
(	O
p	pointer
[	O
len	int
+	O
1	int
]	O
==	O
'@'	O
)	O
{	O
if	O
(	O
alloc_string_len	function
(	O
&	O
url	pointer
->	O
passwd	pointer
,	O
p	pointer
+	O
1	int
,	O
len	int
)	O
)	O
return	O
1	int
;	O
if	O
(	O
alloc_string	function
(	O
&	O
url	pointer
->	O
user	pointer
,	O
*	O
str	pointer
,	O
p	pointer
)	O
)	O
return	O
1	int
;	O
*	O
str	pointer
=	O
p	pointer
+	O
len	int
+	O
2	int
;	O
}	O
break	O
;	O
case	O
'@'	O
:	O
if	O
(	O
alloc_string	function
(	O
&	O
url	pointer
->	O
user	pointer
,	O
*	O
str	pointer
,	O
p	pointer
)	O
)	O
return	O
1	int
;	O
url	pointer
->	O
passwd	pointer
=	O
NULL	O
;	O
*	O
str	pointer
=	O
p	pointer
+	O
1	int
;	O
}	O
return	O
url_get_host	function
(	O
url	pointer
,	O
str	pointer
)	O
;	O
}	O
static	O
int	O
url_get_proto	function
(	O
dico_url_t	pointer
url	pointer
,	O
const	O
char	O
*	O
str	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
if	O
(	O
!	O
str	pointer
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
1	int
;	O
}	O
p	pointer
=	O
strchr	function
(	O
str	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
1	int
;	O
}	O
alloc_string	function
(	O
&	O
url	pointer
->	O
proto	pointer
,	O
str	pointer
,	O
p	pointer
)	O
;	O
for	O
(	O
p	pointer
++	O
;	O
*	O
p	pointer
==	O
'/'	O
;	O
p	pointer
++	O
)	O
;	O
return	O
url_get_user	function
(	O
url	pointer
,	O
&	O
p	pointer
)	O
;	O
}	O
static	O
int	O
url_parse_dico_request	function
(	O
dico_url_t	pointer
url	pointer
)	O
{	O
char	O
*	O
p	pointer
,	O
*	O
q	pointer
;	O
if	O
(	O
!	O
url	pointer
->	O
path	pointer
)	O
return	O
0	int
;	O
p	pointer
=	O
url	pointer
->	O
path	pointer
;	O
if	O
(	O
p	pointer
[	O
1	int
]	O
!=	O
':'	O
)	O
return	O
1	int
;	O
switch	O
(	O
*	O
p	pointer
)	O
{	O
case	O
'm'	O
:	O
url	pointer
->	O
req	struct
.	O
type	enum
=	O
DICO_REQUEST_MATCH	int
;	O
break	O
;	O
case	O
'd'	O
:	O
url	pointer
->	O
req	struct
.	O
type	enum
=	O
DICO_REQUEST_DEFINE	int
;	O
break	O
;	O
default	O
:	O
return	O
1	int
;	O
}	O
p	pointer
+=	O
2	int
;	O
q	pointer
=	O
strchr	function
(	O
p	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
alloc_string	function
(	O
&	O
url	pointer
->	O
req	struct
.	O
word	pointer
,	O
p	pointer
,	O
q	pointer
)	O
)	O
return	O
1	int
;	O
if	O
(	O
!	O
q	pointer
)	O
return	O
alloc_string_len	function
(	O
&	O
url	pointer
->	O
req	struct
.	O
database	pointer
,	O
"!"	pointer
,	O
1	int
)	O
||	O
alloc_string_len	function
(	O
&	O
url	pointer
->	O
req	struct
.	O
strategy	pointer
,	O
"."	pointer
,	O
1	int
)	O
;	O
p	pointer
=	O
q	pointer
+	O
1	int
;	O
q	pointer
=	O
strchr	function
(	O
p	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
alloc_string_def	function
(	O
&	O
url	pointer
->	O
req	struct
.	O
database	pointer
,	O
p	pointer
,	O
q	pointer
,	O
"*"	pointer
)	O
)	O
return	O
1	int
;	O
if	O
(	O
url	pointer
->	O
req	struct
.	O
type	enum
==	O
DICO_REQUEST_MATCH	int
)	O
{	O
if	O
(	O
!	O
q	pointer
)	O
return	O
alloc_string_len	function
(	O
&	O
url	pointer
->	O
req	struct
.	O
strategy	pointer
,	O
"."	pointer
,	O
1	int
)	O
;	O
p	pointer
=	O
q	pointer
+	O
1	int
;	O
q	pointer
=	O
strchr	function
(	O
p	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
alloc_string_def	function
(	O
&	O
url	pointer
->	O
req	struct
.	O
strategy	pointer
,	O
p	pointer
,	O
q	pointer
,	O
"."	pointer
)	O
)	O
return	O
1	int
;	O
}	O
if	O
(	O
q	pointer
)	O
{	O
p	pointer
=	O
q	pointer
+	O
1	int
;	O
url	pointer
->	O
req	struct
.	O
n	long
=	O
strtoul	function
(	O
p	pointer
,	O
&	O
q	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
q	pointer
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
void	O
dico_url_destroy	function
(	O
dico_url_t	pointer
*	O
purl	pointer
)	O
{	O
dico_url_t	pointer
url	pointer
=	O
*	O
purl	pointer
;	O
free	function
(	O
url	pointer
->	O
string	pointer
)	O
;	O
free	function
(	O
url	pointer
->	O
proto	pointer
)	O
;	O
free	function
(	O
url	pointer
->	O
host	pointer
)	O
;	O
free	function
(	O
url	pointer
->	O
port	pointer
)	O
;	O
free	function
(	O
url	pointer
->	O
path	pointer
)	O
;	O
free	function
(	O
url	pointer
->	O
user	pointer
)	O
;	O
free	function
(	O
url	pointer
->	O
passwd	pointer
)	O
;	O
dico_assoc_destroy	function
(	O
&	O
url	pointer
->	O
args	pointer
)	O
;	O
free	function
(	O
url	pointer
->	O
req	struct
.	O
word	pointer
)	O
;	O
free	function
(	O
url	pointer
->	O
req	struct
.	O
database	pointer
)	O
;	O
free	function
(	O
url	pointer
->	O
req	struct
.	O
strategy	pointer
)	O
;	O
free	function
(	O
url	pointer
)	O
;	O
*	O
purl	pointer
=	O
NULL	O
;	O
}	O
int	O
dico_url_parse	function
(	O
dico_url_t	pointer
*	O
purl	pointer
,	O
const	O
char	O
*	O
str	pointer
)	O
{	O
int	O
rc	int
;	O
dico_url_t	pointer
url	pointer
;	O
url	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
url	pointer
)	O
)	O
;	O
if	O
(	O
!	O
url	pointer
)	O
return	O
1	int
;	O
memset	function
(	O
url	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
url	pointer
)	O
)	O
;	O
rc	int
=	O
url_get_proto	function
(	O
url	pointer
,	O
str	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
dico_url_destroy	function
(	O
&	O
url	pointer
)	O
;	O
else	O
{	O
url	pointer
->	O
string	pointer
=	O
strdup	function
(	O
str	pointer
)	O
;	O
if	O
(	O
memcmp	function
(	O
url	pointer
->	O
proto	pointer
,	O
"dict"	pointer
,	O
4	int
)	O
==	O
0	int
&&	O
url_parse_dico_request	function
(	O
url	pointer
)	O
)	O
{	O
dico_url_destroy	function
(	O
&	O
url	pointer
)	O
;	O
return	O
1	int
;	O
}	O
*	O
purl	pointer
=	O
url	pointer
;	O
}	O
return	O
rc	int
;	O
}	O
char	O
*	O
dico_url_full_path	function
(	O
dico_url_t	pointer
url	pointer
)	O
{	O
char	O
*	O
path	pointer
;	O
size_t	long
size	long
=	O
1	int
;	O
if	O
(	O
url	pointer
->	O
host	pointer
)	O
size	long
+=	O
strlen	function
(	O
url	pointer
->	O
host	pointer
)	O
;	O
if	O
(	O
url	pointer
->	O
path	pointer
)	O
size	long
+=	O
strlen	function
(	O
url	pointer
->	O
path	pointer
)	O
+	O
1	int
;	O
path	pointer
=	O
malloc	function
(	O
size	long
+	O
1	int
)	O
;	O
if	O
(	O
path	pointer
)	O
{	O
if	O
(	O
url	pointer
->	O
host	pointer
)	O
{	O
strcpy	function
(	O
path	pointer
,	O
"/"	pointer
)	O
;	O
strcat	function
(	O
path	pointer
,	O
url	pointer
->	O
host	pointer
)	O
;	O
}	O
if	O
(	O
url	pointer
->	O
path	pointer
)	O
{	O
if	O
(	O
path	pointer
[	O
0	int
]	O
)	O
strcat	function
(	O
path	pointer
,	O
"/"	pointer
)	O
;	O
strcat	function
(	O
path	pointer
,	O
url	pointer
->	O
path	pointer
)	O
;	O
}	O
}	O
return	O
path	pointer
;	O
}	O
const	O
char	O
*	O
dico_url_get_arg	function
(	O
dico_url_t	pointer
url	pointer
,	O
const	O
char	O
*	O
argname	pointer
)	O
{	O
return	O
dico_assoc_find	function
(	O
url	pointer
->	O
args	pointer
,	O
argname	pointer
)	O
;	O
}	O
