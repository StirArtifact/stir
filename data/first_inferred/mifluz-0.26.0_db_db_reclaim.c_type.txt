static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: db_reclaim.c,v 1.4 2014/04/17 20:27:28 sebdiaz Exp $"	pointer
;	O
int	O
CDB___db_traverse_dup	function
(	O
dbp	pointer
,	O
pgno	int
,	O
callback	pointer
,	O
cookie	pointer
)	O
DB	struct
*	O
dbp	pointer
;	O
db_pgno_t	int
pgno	int
;	O
int	O
(	O
*	O
callback	pointer
)	O
__P	O
(	O
(	O
DB	struct
*	O
,	O
PAGE	struct
*	O
,	O
void	O
*	O
,	O
int	O
*	O
)	O
)	O
;	O
void	O
*	O
cookie	pointer
;	O
{	O
PAGE	struct
*	O
p	pointer
;	O
int	O
did_put	int
,	O
i	int
,	O
opgno	int
,	O
ret	int
;	O
do	O
{	O
did_put	int
=	O
0	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
&	O
pgno	int
,	O
0	int
,	O
&	O
p	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
pgno	int
=	O
NEXT_PGNO	O
(	O
p	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NUM_ENT	O
(	O
p	pointer
)	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
B_TYPE	O
(	O
GET_BKEYDATA	O
(	O
p	pointer
,	O
i	int
)	O
->	O
type	enum
)	O
==	O
B_OVERFLOW	int
)	O
{	O
opgno	int
=	O
GET_BOVERFLOW	O
(	O
p	pointer
,	O
i	int
)	O
->	O
pgno	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_traverse_big	function
(	O
dbp	pointer
,	O
opgno	int
,	O
callback	pointer
,	O
cookie	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
}	O
}	O
if	O
(	O
(	O
ret	int
=	O
callback	pointer
(	O
dbp	pointer
,	O
p	pointer
,	O
cookie	pointer
,	O
&	O
did_put	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
!	O
did_put	int
)	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
p	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
}	O
while	O
(	O
pgno	int
!=	O
PGNO_INVALID	int
)	O
;	O
if	O
(	O
0	int
)	O
{	O
err	pointer
:	O
if	O
(	O
did_put	int
==	O
0	int
)	O
(	O
void	O
)	O
CDB_memp_fput	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
p	pointer
,	O
0	int
)	O
;	O
}	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___db_traverse_big	function
(	O
dbp	pointer
,	O
pgno	int
,	O
callback	pointer
,	O
cookie	pointer
)	O
DB	struct
*	O
dbp	pointer
;	O
db_pgno_t	int
pgno	int
;	O
int	O
(	O
*	O
callback	pointer
)	O
__P	O
(	O
(	O
DB	struct
*	O
,	O
PAGE	struct
*	O
,	O
void	O
*	O
,	O
int	O
*	O
)	O
)	O
;	O
void	O
*	O
cookie	pointer
;	O
{	O
PAGE	struct
*	O
p	pointer
;	O
int	O
did_put	int
,	O
ret	int
;	O
do	O
{	O
did_put	int
=	O
0	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
&	O
pgno	int
,	O
0	int
,	O
&	O
p	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
pgno	int
=	O
NEXT_PGNO	O
(	O
p	pointer
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
callback	pointer
(	O
dbp	pointer
,	O
p	pointer
,	O
cookie	pointer
,	O
&	O
did_put	int
)	O
)	O
==	O
0	int
&&	O
!	O
did_put	int
)	O
ret	int
=	O
CDB_memp_fput	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
p	pointer
,	O
0	int
)	O
;	O
}	O
while	O
(	O
ret	int
==	O
0	int
&&	O
pgno	int
!=	O
PGNO_INVALID	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___db_reclaim_callback	function
(	O
dbp	pointer
,	O
p	pointer
,	O
cookie	pointer
,	O
putp	pointer
)	O
DB	struct
*	O
dbp	pointer
;	O
PAGE	struct
*	O
p	pointer
;	O
void	O
*	O
cookie	pointer
;	O
int	O
*	O
putp	pointer
;	O
{	O
if	O
(	O
dbp	pointer
)	O
{	O
}	O
int	O
ret	int
;	O
COMPQUIET	O
(	O
dbp	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_free	function
(	O
cookie	pointer
,	O
p	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
*	O
putp	pointer
=	O
1	int
;	O
return	O
(	O
0	int
)	O
;	O
}	O
