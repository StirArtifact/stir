int	O
mu_iterator_create	function
(	O
mu_iterator_t	pointer
*	O
piterator	pointer
,	O
void	O
*	O
owner	pointer
)	O
{	O
mu_iterator_t	pointer
iterator	pointer
;	O
if	O
(	O
piterator	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
owner	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
iterator	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
iterator	pointer
)	O
)	O
;	O
if	O
(	O
iterator	pointer
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
iterator	pointer
->	O
owner	pointer
=	O
owner	pointer
;	O
*	O
piterator	pointer
=	O
iterator	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_iterator_set_first	function
(	O
mu_iterator_t	pointer
itr	pointer
,	O
int	O
(	O
*	O
first	pointer
)	O
(	O
void	O
*	O
)	O
)	O
{	O
if	O
(	O
!	O
itr	pointer
)	O
return	O
EINVAL	int
;	O
itr	pointer
->	O
first	pointer
=	O
first	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_iterator_set_next	function
(	O
mu_iterator_t	pointer
itr	pointer
,	O
int	O
(	O
*	O
next	pointer
)	O
(	O
void	O
*	O
)	O
)	O
{	O
if	O
(	O
!	O
itr	pointer
)	O
return	O
EINVAL	int
;	O
itr	pointer
->	O
next	pointer
=	O
next	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_iterator_set_getitem	function
(	O
mu_iterator_t	pointer
itr	pointer
,	O
int	O
(	O
*	O
getitem	pointer
)	O
(	O
void	O
*	O
,	O
void	O
*	O
*	O
,	O
const	O
void	O
*	O
*	O
)	O
)	O
{	O
if	O
(	O
!	O
itr	pointer
)	O
return	O
EINVAL	int
;	O
itr	pointer
->	O
getitem	pointer
=	O
getitem	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_iterator_set_finished_p	function
(	O
mu_iterator_t	pointer
itr	pointer
,	O
int	O
(	O
*	O
finished_p	pointer
)	O
(	O
void	O
*	O
)	O
)	O
{	O
if	O
(	O
!	O
itr	pointer
)	O
return	O
EINVAL	int
;	O
itr	pointer
->	O
finished_p	pointer
=	O
finished_p	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_iterator_set_delitem	function
(	O
mu_iterator_t	pointer
itr	pointer
,	O
int	O
(	O
*	O
delitem	pointer
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
{	O
if	O
(	O
!	O
itr	pointer
)	O
return	O
EINVAL	int
;	O
itr	pointer
->	O
delitem	pointer
=	O
delitem	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_iterator_set_itrctl	function
(	O
mu_iterator_t	pointer
itr	pointer
,	O
int	O
(	O
*	O
itrctl	pointer
)	O
(	O
void	O
*	O
,	O
enum	O
mu_itrctl_req	enum
,	O
void	O
*	O
)	O
)	O
{	O
if	O
(	O
!	O
itr	pointer
)	O
return	O
EINVAL	int
;	O
itr	pointer
->	O
itrctl	pointer
=	O
itrctl	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_iterator_set_dataptr	function
(	O
mu_iterator_t	pointer
itr	pointer
,	O
void	O
*	O
(	O
*	O
dataptr	pointer
)	O
(	O
void	O
*	O
)	O
)	O
{	O
if	O
(	O
!	O
itr	pointer
)	O
return	O
EINVAL	int
;	O
itr	pointer
->	O
dataptr	pointer
=	O
dataptr	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_iterator_set_destroy	function
(	O
mu_iterator_t	pointer
itr	pointer
,	O
int	O
(	O
*	O
destroy	pointer
)	O
(	O
mu_iterator_t	pointer
,	O
void	O
*	O
)	O
)	O
{	O
if	O
(	O
!	O
itr	pointer
)	O
return	O
EINVAL	int
;	O
itr	pointer
->	O
destroy	pointer
=	O
destroy	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_iterator_set_dup	function
(	O
mu_iterator_t	pointer
itr	pointer
,	O
int	O
(	O
*	O
dup	pointer
)	O
(	O
void	O
*	O
*	O
ptr	pointer
,	O
void	O
*	O
data	pointer
)	O
)	O
{	O
if	O
(	O
!	O
itr	pointer
)	O
return	O
EINVAL	int
;	O
itr	pointer
->	O
dup	pointer
=	O
dup	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_iterator_dup	function
(	O
mu_iterator_t	pointer
*	O
piterator	pointer
,	O
mu_iterator_t	pointer
orig	pointer
)	O
{	O
mu_iterator_t	pointer
iterator	pointer
;	O
int	O
status	int
;	O
if	O
(	O
piterator	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
orig	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
status	int
=	O
mu_iterator_create	function
(	O
&	O
iterator	pointer
,	O
orig	pointer
->	O
owner	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
orig	pointer
->	O
dup	pointer
(	O
&	O
iterator	pointer
->	O
owner	pointer
,	O
orig	pointer
->	O
owner	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
free	function
(	O
iterator	pointer
)	O
;	O
return	O
status	int
;	O
}	O
iterator	pointer
->	O
is_advanced	int
=	O
orig	pointer
->	O
is_advanced	int
;	O
iterator	pointer
->	O
dup	pointer
=	O
orig	pointer
->	O
dup	pointer
;	O
iterator	pointer
->	O
destroy	pointer
=	O
orig	pointer
->	O
destroy	pointer
;	O
iterator	pointer
->	O
first	pointer
=	O
orig	pointer
->	O
first	pointer
;	O
iterator	pointer
->	O
next	pointer
=	O
orig	pointer
->	O
next	pointer
;	O
iterator	pointer
->	O
getitem	pointer
=	O
orig	pointer
->	O
getitem	pointer
;	O
iterator	pointer
->	O
delitem	pointer
=	O
orig	pointer
->	O
delitem	pointer
;	O
iterator	pointer
->	O
finished_p	pointer
=	O
orig	pointer
->	O
finished_p	pointer
;	O
iterator	pointer
->	O
itrctl	pointer
=	O
orig	pointer
->	O
itrctl	pointer
;	O
*	O
piterator	pointer
=	O
iterator	pointer
;	O
return	O
0	int
;	O
}	O
void	O
mu_iterator_destroy	function
(	O
mu_iterator_t	pointer
*	O
piterator	pointer
)	O
{	O
if	O
(	O
!	O
piterator	pointer
||	O
!	O
*	O
piterator	pointer
)	O
return	O
;	O
if	O
(	O
(	O
*	O
piterator	pointer
)	O
->	O
destroy	pointer
)	O
(	O
*	O
piterator	pointer
)	O
->	O
destroy	pointer
(	O
*	O
piterator	pointer
,	O
(	O
*	O
piterator	pointer
)	O
->	O
owner	pointer
)	O
;	O
free	function
(	O
*	O
piterator	pointer
)	O
;	O
*	O
piterator	pointer
=	O
NULL	O
;	O
}	O
int	O
mu_iterator_first	function
(	O
mu_iterator_t	pointer
iterator	pointer
)	O
{	O
iterator	pointer
->	O
is_advanced	int
=	O
0	int
;	O
return	O
iterator	pointer
->	O
first	pointer
(	O
iterator	pointer
->	O
owner	pointer
)	O
;	O
}	O
int	O
mu_iterator_next	function
(	O
mu_iterator_t	pointer
iterator	pointer
)	O
{	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
!	O
iterator	pointer
->	O
is_advanced	int
)	O
status	int
=	O
iterator	pointer
->	O
next	pointer
(	O
iterator	pointer
->	O
owner	pointer
)	O
;	O
iterator	pointer
->	O
is_advanced	int
=	O
0	int
;	O
return	O
status	int
;	O
}	O
int	O
mu_iterator_skip	function
(	O
mu_iterator_t	pointer
iterator	pointer
,	O
ssize_t	long
count	long
)	O
{	O
int	O
status	int
;	O
if	O
(	O
count	long
<	O
0	int
)	O
return	O
ENOSYS	int
;	O
while	O
(	O
count	long
--	O
)	O
if	O
(	O
(	O
status	int
=	O
mu_iterator_next	function
(	O
iterator	pointer
)	O
)	O
)	O
break	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_iterator_skip_while	function
(	O
mu_iterator_t	pointer
iterator	pointer
,	O
int	O
(	O
*	O
pred	pointer
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
data	pointer
)	O
{	O
int	O
status	int
;	O
if	O
(	O
!	O
iterator	pointer
||	O
!	O
pred	pointer
)	O
return	O
EINVAL	int
;	O
do	O
{	O
if	O
(	O
(	O
status	int
=	O
mu_iterator_next	function
(	O
iterator	pointer
)	O
)	O
==	O
0	int
)	O
{	O
void	O
*	O
item	pointer
;	O
if	O
(	O
(	O
status	int
=	O
mu_iterator_current	function
(	O
iterator	pointer
,	O
&	O
item	pointer
)	O
)	O
==	O
0	int
)	O
if	O
(	O
!	O
pred	pointer
(	O
item	pointer
,	O
data	pointer
)	O
)	O
break	O
;	O
}	O
}	O
while	O
(	O
status	int
==	O
0	int
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_iterator_skip_until	function
(	O
mu_iterator_t	pointer
iterator	pointer
,	O
int	O
(	O
*	O
pred	pointer
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
data	pointer
)	O
{	O
int	O
status	int
;	O
if	O
(	O
!	O
iterator	pointer
||	O
!	O
pred	pointer
)	O
return	O
EINVAL	int
;	O
do	O
{	O
if	O
(	O
(	O
status	int
=	O
mu_iterator_next	function
(	O
iterator	pointer
)	O
)	O
==	O
0	int
)	O
{	O
void	O
*	O
item	pointer
;	O
if	O
(	O
(	O
status	int
=	O
mu_iterator_current	function
(	O
iterator	pointer
,	O
&	O
item	pointer
)	O
)	O
==	O
0	int
)	O
if	O
(	O
pred	pointer
(	O
item	pointer
,	O
data	pointer
)	O
)	O
break	O
;	O
}	O
}	O
while	O
(	O
status	int
==	O
0	int
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_iterator_current	function
(	O
mu_iterator_t	pointer
iterator	pointer
,	O
void	O
*	O
*	O
pitem	pointer
)	O
{	O
return	O
mu_iterator_current_kv	function
(	O
iterator	pointer
,	O
NULL	O
,	O
pitem	pointer
)	O
;	O
}	O
int	O
mu_iterator_current_kv	function
(	O
mu_iterator_t	pointer
iterator	pointer
,	O
const	O
void	O
*	O
*	O
pkey	pointer
,	O
void	O
*	O
*	O
pitem	pointer
)	O
{	O
void	O
*	O
ptr	pointer
;	O
int	O
rc	int
=	O
iterator	pointer
->	O
getitem	pointer
(	O
iterator	pointer
->	O
owner	pointer
,	O
&	O
ptr	pointer
,	O
pkey	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
iterator	pointer
->	O
dataptr	pointer
)	O
*	O
pitem	pointer
=	O
iterator	pointer
->	O
dataptr	pointer
(	O
ptr	pointer
)	O
;	O
else	O
*	O
pitem	pointer
=	O
ptr	pointer
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_iterator_is_done	function
(	O
mu_iterator_t	pointer
iterator	pointer
)	O
{	O
if	O
(	O
iterator	pointer
==	O
NULL	O
)	O
return	O
1	int
;	O
return	O
iterator	pointer
->	O
finished_p	pointer
(	O
iterator	pointer
->	O
owner	pointer
)	O
;	O
}	O
int	O
iterator_get_owner	function
(	O
mu_iterator_t	pointer
iterator	pointer
,	O
void	O
*	O
*	O
powner	pointer
)	O
{	O
if	O
(	O
!	O
iterator	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
powner	pointer
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
*	O
powner	pointer
=	O
iterator	pointer
->	O
owner	pointer
;	O
return	O
0	int
;	O
}	O
void	O
mu_iterator_delitem	function
(	O
mu_iterator_t	pointer
iterator	pointer
,	O
void	O
*	O
itm	pointer
)	O
{	O
for	O
(	O
;	O
iterator	pointer
;	O
iterator	pointer
=	O
iterator	pointer
->	O
next_itr	pointer
)	O
{	O
if	O
(	O
iterator	pointer
->	O
delitem	pointer
)	O
{	O
switch	O
(	O
iterator	pointer
->	O
delitem	pointer
(	O
iterator	pointer
->	O
owner	pointer
,	O
itm	pointer
)	O
)	O
{	O
case	O
MU_ITR_DELITEM_NEXT	int
:	O
iterator	pointer
->	O
next	pointer
(	O
iterator	pointer
->	O
owner	pointer
)	O
;	O
case	O
MU_ITR_DELITEM_ADVANCE	int
:	O
iterator	pointer
->	O
is_advanced	int
++	O
;	O
}	O
}	O
}	O
}	O
int	O
mu_iterator_attach	function
(	O
mu_iterator_t	pointer
*	O
root	pointer
,	O
mu_iterator_t	pointer
iterator	pointer
)	O
{	O
iterator	pointer
->	O
next_itr	pointer
=	O
*	O
root	pointer
;	O
*	O
root	pointer
=	O
iterator	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_iterator_detach	function
(	O
mu_iterator_t	pointer
*	O
root	pointer
,	O
mu_iterator_t	pointer
iterator	pointer
)	O
{	O
mu_iterator_t	pointer
itr	pointer
,	O
prev	pointer
;	O
for	O
(	O
itr	pointer
=	O
*	O
root	pointer
,	O
prev	pointer
=	O
NULL	O
;	O
itr	pointer
;	O
prev	pointer
=	O
itr	pointer
,	O
itr	pointer
=	O
itr	pointer
->	O
next_itr	pointer
)	O
if	O
(	O
iterator	pointer
==	O
itr	pointer
)	O
break	O
;	O
if	O
(	O
itr	pointer
)	O
{	O
if	O
(	O
prev	pointer
)	O
prev	pointer
->	O
next_itr	pointer
=	O
itr	pointer
->	O
next_itr	pointer
;	O
else	O
*	O
root	pointer
=	O
itr	pointer
->	O
next_itr	pointer
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_iterator_ctl	function
(	O
mu_iterator_t	pointer
iterator	pointer
,	O
enum	O
mu_itrctl_req	enum
req	enum
,	O
void	O
*	O
arg	pointer
)	O
{	O
if	O
(	O
!	O
iterator	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
iterator	pointer
->	O
itrctl	pointer
)	O
return	O
ENOSYS	int
;	O
return	O
iterator	pointer
->	O
itrctl	pointer
(	O
iterator	pointer
->	O
owner	pointer
,	O
req	enum
,	O
arg	pointer
)	O
;	O
}	O
