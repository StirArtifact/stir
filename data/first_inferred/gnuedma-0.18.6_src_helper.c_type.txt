ESint32	long
EDMAINLINE	O
edma_check_obj_id	function
(	O
OBJID	long
id	long
,	O
EPChar	pointer
msg	pointer
)	O
{	O
if	O
(	O
last_checked_versions	long
<	O
GVar	pointer
->	O
time_last_version_update	long
)	O
_edma_class_update_all_versions	function
(	O
)	O
;	O
if	O
(	O
(	O
id	long
<	O
0	int
)	O
||	O
(	O
id	long
>	O
nMaxObj	long
)	O
)	O
return	O
_edma_system_exception	function
(	O
"[%s] Invalid Object Identifier: %d"	pointer
,	O
msg	pointer
,	O
id	long
)	O
;	O
if	O
(	O
gObj	O
[	O
id	long
]	O
==	O
NULL	O
)	O
return	O
_edma_system_exception	function
(	O
"[%s] Object %d doesn't exist"	pointer
,	O
msg	pointer
,	O
id	long
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAINLINE	O
edma_check_obj_id1	function
(	O
OBJID	long
id	long
,	O
EPChar	pointer
msg	pointer
,	O
EPChar	pointer
str	pointer
)	O
{	O
if	O
(	O
(	O
id	long
<	O
0	int
)	O
||	O
(	O
id	long
>	O
nMaxObj	long
)	O
)	O
return	O
_edma_system_exception	function
(	O
"[%s] Invalid Object Identifier: "	pointer
"%d (Id=%s)"	pointer
,	O
msg	pointer
,	O
id	long
,	O
str	pointer
)	O
;	O
if	O
(	O
gObj	O
[	O
id	long
]	O
==	O
NULL	O
)	O
return	O
_edma_system_exception	function
(	O
"[%s] Object %d doesn't exist; (Id=%s)"	pointer
,	O
msg	pointer
,	O
id	long
,	O
str	pointer
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAINLINE	O
edma_check_class_id	function
(	O
CLASSID	long
cid	long
,	O
EPChar	pointer
msg	pointer
)	O
{	O
if	O
(	O
(	O
cid	long
<	O
0	int
)	O
||	O
(	O
cid	long
>	O
(	O
GVar	pointer
->	O
nMaxClases	long
+	O
nMaxLocalClasses	long
)	O
)	O
)	O
return	O
_edma_system_exception	function
(	O
"[%s] Invalid Class Identifier: %d"	pointer
,	O
msg	pointer
,	O
cid	long
)	O
;	O
if	O
(	O
gClass	O
[	O
cid	long
]	O
==	O
0	int
)	O
if	O
(	O
(	O
ProcMapTable	pointer
[	O
cid	long
]	O
==	O
CLASS_FREE	int
)	O
||	O
(	O
cid	long
<	O
GVar	pointer
->	O
nMaxClases	long
)	O
)	O
return	O
_edma_system_exception	function
(	O
"[%s] Class %d not defined"	pointer
,	O
msg	pointer
,	O
cid	long
)	O
;	O
if	O
(	O
last_checked_versions	long
<	O
GVar	pointer
->	O
time_last_version_update	long
)	O
_edma_class_update_all_versions	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAINLINE	O
_edma_parse_class_name	function
(	O
EPChar	pointer
class_name	pointer
,	O
CLASSID	long
*	O
cid	long
,	O
CLASSID	long
*	O
siu_cid	pointer
,	O
ESint32	long
vmajor	long
,	O
ESint32	long
vminor	long
)	O
{	O
EPChar	pointer
aux	pointer
;	O
EPChar	pointer
proxy	pointer
;	O
if	O
(	O
class_name	pointer
==	O
NULL	O
)	O
return	O
_edma_system_exception	function
(	O
"[edma_parse_class_name] %s"	pointer
,	O
"Invalid "	pointer
"ClassName string"	pointer
)	O
;	O
*	O
siu_cid	pointer
=	O
-	O
1	int
;	O
if	O
(	O
(	O
aux	pointer
=	O
strchr	function
(	O
class_name	pointer
,	O
':'	O
)	O
)	O
!=	O
NULL	O
)	O
{	O
proxy	pointer
=	O
(	O
EPChar	pointer
)	O
strndup	function
(	O
class_name	pointer
,	O
aux	pointer
-	O
class_name	pointer
)	O
;	O
*	O
cid	long
=	O
*	O
siu_cid	pointer
=	O
edma_siu_get_proxy_class	function
(	O
edma_siu_get_proxy	function
(	O
proxy	pointer
)	O
)	O
;	O
if	O
(	O
*	O
siu_cid	pointer
==	O
-	O
1	int
)	O
{	O
edma_printf_err	function
(	O
"[edma_parse_class_name] SIU Proxy '%s' not found"	pointer
,	O
proxy	pointer
)	O
;	O
free	function
(	O
proxy	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
free	function
(	O
proxy	pointer
)	O
;	O
return	O
aux	pointer
-	O
class_name	pointer
+	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
vmajor	long
==	O
-	O
1	int
)	O
*	O
cid	long
=	O
edma_get_class_id	function
(	O
class_name	pointer
)	O
;	O
else	O
*	O
cid	long
=	O
edma_get_class_id_with_version	function
(	O
class_name	pointer
,	O
vmajor	long
,	O
vminor	long
)	O
;	O
if	O
(	O
*	O
cid	long
==	O
-	O
1	int
)	O
{	O
if	O
(	O
vmajor	long
==	O
-	O
1	int
)	O
return	O
_edma_system_exception	function
(	O
"[edma_parse_class_name] "	pointer
"Class '%s' not found"	pointer
,	O
class_name	pointer
)	O
;	O
else	O
return	O
_edma_system_exception	function
(	O
"[edma_parse_class_name] "	pointer
"Class '%s' version %ld.%ld "	pointer
"not found"	pointer
,	O
class_name	pointer
,	O
vmajor	long
,	O
vminor	long
)	O
;	O
}	O
if	O
(	O
gClass	O
[	O
*	O
cid	long
]	O
->	O
SIUProxy	long
!=	O
-	O
1	int
)	O
{	O
*	O
siu_cid	pointer
=	O
*	O
cid	long
;	O
*	O
cid	long
=	O
edma_siu_get_proxy_class	function
(	O
gClass	O
[	O
*	O
cid	long
]	O
->	O
SIUProxy	long
)	O
;	O
}	O
return	O
0	int
;	O
}	O
edma_printf	function
(	O
"[edma_parse_class_name] %s"	pointer
,	O
"Unreacheable!!!!!"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
