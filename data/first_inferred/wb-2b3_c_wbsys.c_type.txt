LCK	struct
*	O
last_lck	pointer
=	O
0	int
;	O
LCK	struct
*	O
make_lck	function
(	O
int	O
name	int
)	O
{	O
LCK	struct
*	O
l	pointer
=	O
(	O
LCK	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
LCK	struct
)	O
)	O
;	O
if	O
(	O
!	O
l	pointer
)	O
{	O
dprintf	function
(	O
(	O
diagout	pointer
,	O
">>>>ERROR<<<< could not allocate lck\n"	pointer
)	O
)	O
;	O
exit	function
(	O
errno	O
)	O
;	O
}	O
l	pointer
->	O
NEXT	pointer
=	O
last_lck	pointer
;	O
pthread_mutex_init	function
(	O
&	O
l	pointer
->	O
FLG	union
,	O
NULL	O
)	O
;	O
l	pointer
->	O
NAME	int
=	O
name	int
;	O
last_lck	pointer
=	O
l	pointer
;	O
return	O
l	pointer
;	O
}	O
int	O
try_lck_P	function
(	O
LCK	struct
*	O
lk	pointer
)	O
{	O
return	O
!	O
pthread_mutex_trylock	function
(	O
&	O
lk	pointer
->	O
FLG	union
)	O
;	O
}	O
void	O
lck	function
(	O
LCK	struct
*	O
lk	pointer
)	O
{	O
pthread_mutex_lock	function
(	O
&	O
lk	pointer
->	O
FLG	union
)	O
;	O
}	O
void	O
unlck	function
(	O
LCK	struct
*	O
lk	pointer
)	O
{	O
pthread_mutex_unlock	function
(	O
&	O
lk	pointer
->	O
FLG	union
)	O
;	O
}	O
void	O
check_lcks	function
(	O
void	O
)	O
{	O
LCK	struct
*	O
ll	pointer
=	O
last_lck	pointer
;	O
while	O
(	O
ll	pointer
)	O
{	O
if	O
(	O
!	O
try_lck_P	function
(	O
ll	pointer
)	O
)	O
{	O
if	O
(	O
ll	pointer
->	O
NAME	int
<	O
0	int
)	O
switch	O
(	O
ll	pointer
->	O
NAME	int
)	O
{	O
case	O
-	O
1	int
:	O
dprintf	function
(	O
(	O
diagout	pointer
,	O
">>>>ERROR<<<< free-ent-lck left lcked\n"	pointer
)	O
)	O
;	O
case	O
-	O
2	int
:	O
dprintf	function
(	O
(	O
diagout	pointer
,	O
">>>>ERROR<<<< flush-buk-lck left lcked\n"	pointer
)	O
)	O
;	O
case	O
-	O
3	int
:	O
dprintf	function
(	O
(	O
diagout	pointer
,	O
">>>>ERROR<<<< seg-chain-lck left lcked\n"	pointer
)	O
)	O
;	O
default	O
:	O
dprintf	function
(	O
(	O
diagout	pointer
,	O
">>>>ERROR<<<< unknown lck left lcked\n"	pointer
)	O
)	O
;	O
}	O
else	O
dprintf	function
(	O
(	O
diagout	pointer
,	O
">>>>ERROR<<<< lck %d left lcked\n"	pointer
,	O
ll	pointer
->	O
NAME	int
)	O
)	O
;	O
}	O
unlck	function
(	O
ll	pointer
)	O
;	O
ll	pointer
=	O
ll	pointer
->	O
NEXT	pointer
;	O
}	O
}	O
SEGD	struct
*	O
new_segd	function
(	O
int	O
idx	int
)	O
{	O
SEGD	struct
*	O
seg	pointer
=	O
(	O
SEGD	struct
*	O
)	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
SEGD	struct
)	O
)	O
;	O
seg	pointer
->	O
RT_HAN	pointer
=	O
make_hand	function
(	O
)	O
;	O
seg	pointer
->	O
FL_HAN	pointer
=	O
make_hand	function
(	O
)	O
;	O
seg	pointer
->	O
FLCK	pointer
=	O
make_lck	function
(	O
0	int
-	O
(	O
idx	int
)	O
)	O
;	O
seg	pointer
->	O
FFCK	pointer
=	O
make_lck	function
(	O
-	O
1	int
-	O
(	O
idx	int
)	O
)	O
;	O
seg	pointer
->	O
ID	long
=	O
idx	int
;	O
return	O
seg	pointer
;	O
}	O
ENTRY	struct
*	O
ent_make_ent	function
(	O
int	O
tag	int
)	O
{	O
ENTRY	struct
*	O
ent	pointer
=	O
(	O
ENTRY	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
ENTRY	struct
)	O
)	O
;	O
if	O
(	O
!	O
ent	pointer
)	O
{	O
dprintf	function
(	O
(	O
diagout	pointer
,	O
"WARNING: could not allocate entry\n"	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
ent	pointer
->	O
TAG	int
=	O
tag	int
;	O
ent	pointer
->	O
NEXT	pointer
=	O
0	int
;	O
ent	pointer
->	O
SEG	pointer
=	O
0	int
;	O
ent	pointer
->	O
ID	long
=	O
-	O
1	int
;	O
ent	pointer
->	O
BLK	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
malloc	function
(	O
blk_size	int
)	O
;	O
if	O
(	O
!	O
ent	pointer
->	O
BLK	pointer
)	O
{	O
dprintf	function
(	O
(	O
diagout	pointer
,	O
"WARNING: could not allocate blk for entry\n"	pointer
)	O
)	O
;	O
free	function
(	O
ent	pointer
)	O
;	O
return	O
0	int
;	O
}	O
ent	pointer
->	O
AGE	int
=	O
0	int
;	O
ent	pointer
->	O
DTY	int
=	O
0	int
;	O
ent	pointer
->	O
PUS	int
=	O
0	int
;	O
ent	pointer
->	O
ACC	int
=	O
accnone	O
;	O
ent	pointer
->	O
REF	int
=	O
0	int
;	O
return	O
ent	pointer
;	O
}	O
HAND	struct
*	O
make_hand	function
(	O
void	O
)	O
{	O
HAND	struct
*	O
han	pointer
;	O
han	pointer
=	O
(	O
HAND	struct
*	O
)	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
HAND	struct
)	O
)	O
;	O
if	O
(	O
!	O
han	pointer
)	O
{	O
dprintf	function
(	O
(	O
diagout	pointer
,	O
">>>>ERROR<<<< could not allocate handle\n"	pointer
)	O
)	O
;	O
exit	function
(	O
errno	O
)	O
;	O
}	O
return	O
han	pointer
;	O
}	O
