struct	O
request_data	struct
{	O
int	O
type	int
;	O
radiusd_request_t	struct
*	O
req	pointer
;	O
}	O
;	O
static	O
int	O
forward_fd	int
=	O
-	O
1	int
;	O
static	O
grad_list_t	struct
*	O
forward_list	pointer
;	O
static	O
void	O
add_forward	function
(	O
int	O
type	int
,	O
grad_uint32_t	int
ip	pointer
,	O
int	O
port	array
)	O
{	O
grad_server_t	struct
*	O
srv	pointer
;	O
if	O
(	O
!	O
forward_list	pointer
)	O
{	O
forward_list	pointer
=	O
grad_list_create	function
(	O
)	O
;	O
if	O
(	O
!	O
forward_list	pointer
)	O
return	O
;	O
}	O
srv	pointer
=	O
grad_emalloc	function
(	O
sizeof	O
(	O
*	O
srv	pointer
)	O
)	O
;	O
srv	pointer
->	O
name	pointer
=	O
NULL	O
;	O
srv	pointer
->	O
addr	int
=	O
ip	pointer
;	O
srv	pointer
->	O
port	array
[	O
type	int
]	O
=	O
port	array
;	O
grad_list_append	function
(	O
forward_list	pointer
,	O
srv	pointer
)	O
;	O
}	O
static	O
int	O
rad_cfg_forward	function
(	O
int	O
argc	int
,	O
cfg_value_t	struct
*	O
argv	pointer
,	O
int	O
type	int
,	O
int	O
defport	int
)	O
{	O
int	O
i	int
,	O
errcnt	long
=	O
0	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
if	O
(	O
argv	pointer
[	O
i	int
]	O
.	O
type	int
!=	O
CFG_HOST	int
)	O
{	O
cfg_type_error	function
(	O
CFG_HOST	int
)	O
;	O
errcnt	long
++	O
;	O
}	O
if	O
(	O
errcnt	long
==	O
0	int
&&	O
radius_mode	int
==	O
MODE_DAEMON	int
)	O
{	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
add_forward	function
(	O
type	int
,	O
argv	pointer
[	O
i	int
]	O
.	O
v	union
.	O
host	int
.	O
ipaddr	int
,	O
argv	pointer
[	O
i	int
]	O
.	O
v	union
.	O
host	int
.	O
port	array
>	O
0	int
?	O
argv	pointer
[	O
i	int
]	O
.	O
v	union
.	O
host	int
.	O
port	array
:	O
defport	int
)	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
rad_cfg_forward_auth	function
(	O
int	O
argc	int
,	O
cfg_value_t	struct
*	O
argv	pointer
,	O
void	O
*	O
block_data	pointer
,	O
void	O
*	O
handler_data	pointer
)	O
{	O
return	O
rad_cfg_forward	function
(	O
argc	int
,	O
argv	pointer
,	O
R_AUTH	int
,	O
auth_port	int
)	O
;	O
}	O
int	O
rad_cfg_forward_acct	function
(	O
int	O
argc	int
,	O
cfg_value_t	struct
*	O
argv	pointer
,	O
void	O
*	O
block_data	pointer
,	O
void	O
*	O
handler_data	pointer
)	O
{	O
return	O
rad_cfg_forward	function
(	O
argc	int
,	O
argv	pointer
,	O
R_ACCT	int
,	O
acct_port	int
)	O
;	O
}	O
static	O
void	O
forward_data	function
(	O
grad_server_t	struct
*	O
srv	pointer
,	O
int	O
type	int
,	O
void	O
*	O
data	pointer
,	O
size_t	long
size	int
)	O
{	O
int	O
rc	int
;	O
struct	O
sockaddr_in	struct
addr	int
;	O
addr	int
.	O
sin_family	short
=	O
AF_INET	O
;	O
addr	int
.	O
sin_addr	struct
.	O
s_addr	int
=	O
htonl	function
(	O
srv	pointer
->	O
addr	int
)	O
;	O
addr	int
.	O
sin_port	short
=	O
htons	function
(	O
srv	pointer
->	O
port	array
[	O
type	int
]	O
)	O
;	O
rc	int
=	O
sendto	function
(	O
forward_fd	int
,	O
data	pointer
,	O
size	int
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
addr	int
,	O
sizeof	O
(	O
addr	int
)	O
)	O
;	O
if	O
(	O
rc	int
<	O
0	int
)	O
{	O
char	O
buffer	pointer
[	O
GRAD_IPV4_STRING_LENGTH	int
]	O
;	O
grad_log	function
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"Can't forward to %s:%d"	pointer
)	O
,	O
grad_ip_iptostr	function
(	O
srv	pointer
->	O
addr	int
,	O
buffer	pointer
)	O
,	O
srv	pointer
->	O
port	array
[	O
type	int
]	O
)	O
;	O
}	O
}	O
static	O
int	O
forwarder	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
grad_server_t	struct
*	O
srv	pointer
=	O
item	pointer
;	O
struct	O
request_data	struct
*	O
r	pointer
=	O
data	pointer
;	O
int	O
rc	int
;	O
if	O
(	O
srv	pointer
->	O
port	array
[	O
r	pointer
->	O
type	int
]	O
!=	O
0	int
)	O
{	O
grad_avp_t	struct
*	O
vp	pointer
=	O
NULL	O
,	O
*	O
plist	pointer
;	O
void	O
*	O
pdu	pointer
;	O
size_t	long
size	int
;	O
int	O
id	char
;	O
u_char	char
*	O
secret	pointer
;	O
if	O
(	O
srv	pointer
->	O
secret	pointer
)	O
{	O
secret	pointer
=	O
srv	pointer
->	O
secret	pointer
;	O
vp	pointer
=	O
proxy_request_recode	function
(	O
r	pointer
->	O
req	pointer
,	O
grad_avl_dup	function
(	O
r	pointer
->	O
req	pointer
->	O
request	pointer
->	O
avlist	pointer
)	O
,	O
secret	pointer
,	O
r	pointer
->	O
req	pointer
->	O
request	pointer
->	O
authenticator	array
)	O
;	O
plist	pointer
=	O
vp	pointer
;	O
id	char
=	O
grad_client_message_id	function
(	O
srv	pointer
)	O
;	O
}	O
else	O
{	O
secret	pointer
=	O
r	pointer
->	O
req	pointer
->	O
request	pointer
->	O
secret	pointer
;	O
plist	pointer
=	O
r	pointer
->	O
req	pointer
->	O
request	pointer
->	O
avlist	pointer
;	O
id	char
=	O
r	pointer
->	O
req	pointer
->	O
request	pointer
->	O
id	char
;	O
}	O
size	int
=	O
grad_create_pdu	function
(	O
&	O
pdu	pointer
,	O
r	pointer
->	O
req	pointer
->	O
request	pointer
->	O
code	char
,	O
id	char
,	O
r	pointer
->	O
req	pointer
->	O
request	pointer
->	O
authenticator	array
,	O
secret	pointer
,	O
plist	pointer
,	O
NULL	O
)	O
;	O
grad_avl_free	function
(	O
vp	pointer
)	O
;	O
forward_data	function
(	O
srv	pointer
,	O
r	pointer
->	O
type	int
,	O
pdu	pointer
,	O
size	int
)	O
;	O
grad_free	function
(	O
pdu	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
free_mem	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
ARG_UNUSED	O
)	O
{	O
grad_free	function
(	O
item	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
forward_before_config_hook	function
(	O
void	O
*	O
a	pointer
ARG_UNUSED	O
,	O
void	O
*	O
b	pointer
ARG_UNUSED	O
)	O
{	O
close	pointer
(	O
forward_fd	int
)	O
;	O
forward_fd	int
=	O
-	O
1	int
;	O
grad_list_destroy	function
(	O
&	O
forward_list	pointer
,	O
free_mem	function
,	O
NULL	O
)	O
;	O
}	O
static	O
int	O
fixup_forward_server	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
grad_server_t	struct
*	O
srv	pointer
=	O
item	pointer
;	O
CLIENT	struct
*	O
cl	pointer
=	O
client_lookup_ip	function
(	O
srv	pointer
->	O
addr	int
)	O
;	O
if	O
(	O
!	O
cl	pointer
)	O
{	O
char	O
buffer	pointer
[	O
GRAD_IPV4_STRING_LENGTH	int
]	O
;	O
grad_log	function
(	O
GRAD_LOG_NOTICE	int
,	O
_	O
(	O
"Forwarding host %s not listed in clients"	pointer
)	O
,	O
grad_ip_iptostr	function
(	O
srv	pointer
->	O
addr	int
,	O
buffer	pointer
)	O
)	O
;	O
}	O
else	O
srv	pointer
->	O
secret	pointer
=	O
cl	pointer
->	O
secret	pointer
;	O
return	O
0	int
;	O
}	O
static	O
void	O
forward_after_config_hook	function
(	O
void	O
*	O
a	pointer
ARG_UNUSED	O
,	O
void	O
*	O
b	pointer
ARG_UNUSED	O
)	O
{	O
struct	O
sockaddr_in	struct
s	pointer
;	O
if	O
(	O
grad_list_count	function
(	O
forward_list	pointer
)	O
==	O
0	int
)	O
return	O
;	O
forward_fd	int
=	O
socket	function
(	O
PF_INET	int
,	O
SOCK_DGRAM	int
,	O
0	int
)	O
;	O
if	O
(	O
forward_fd	int
==	O
-	O
1	int
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"Can't open forwarding socket"	pointer
)	O
)	O
;	O
return	O
;	O
}	O
memset	function
(	O
&	O
s	pointer
,	O
0	int
,	O
sizeof	O
(	O
s	pointer
)	O
)	O
;	O
s	pointer
.	O
sin_family	short
=	O
AF_INET	O
;	O
s	pointer
.	O
sin_addr	struct
.	O
s_addr	int
=	O
htonl	function
(	O
ref_ip	int
)	O
;	O
s	pointer
.	O
sin_port	short
=	O
0	int
;	O
if	O
(	O
bind	function
(	O
forward_fd	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
s	pointer
,	O
sizeof	O
(	O
s	pointer
)	O
)	O
<	O
0	int
)	O
grad_log	function
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"Can't bind forwarding socket"	pointer
)	O
)	O
;	O
grad_list_iterate	function
(	O
forward_list	pointer
,	O
fixup_forward_server	function
,	O
NULL	O
)	O
;	O
}	O
void	O
forward_init	function
(	O
)	O
{	O
radiusd_set_preconfig_hook	function
(	O
forward_before_config_hook	function
,	O
NULL	O
,	O
0	int
)	O
;	O
radiusd_set_postconfig_hook	function
(	O
forward_after_config_hook	function
,	O
NULL	O
,	O
0	int
)	O
;	O
}	O
void	O
forward_request	function
(	O
int	O
type	int
,	O
radiusd_request_t	struct
*	O
req	pointer
)	O
{	O
struct	O
request_data	struct
rd	struct
;	O
if	O
(	O
!	O
forward_list	pointer
||	O
forward_fd	int
==	O
-	O
1	int
)	O
return	O
;	O
switch	O
(	O
type	int
)	O
{	O
case	O
R_AUTH	int
:	O
case	O
R_ACCT	int
:	O
break	O
;	O
default	O
:	O
return	O
;	O
}	O
rd	struct
.	O
type	int
=	O
type	int
;	O
rd	struct
.	O
req	pointer
=	O
req	pointer
;	O
grad_list_iterate	function
(	O
forward_list	pointer
,	O
forwarder	function
,	O
&	O
rd	struct
)	O
;	O
}	O
