typedef	O
struct	O
{	O
gzFile	pointer
handler	pointer
;	O
EDMAT_BUFFER	struct
buffer	struct
;	O
}	O
DtGZFILE	struct
;	O
ESint32	int
EDMAPROC	O
GZFILEopenZZrS32	function
(	O
OBJID	int
IdObj	int
,	O
EPChar	pointer
name	pointer
,	O
EPChar	pointer
mode	pointer
)	O
{	O
DtGZFILE	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtGZFILE	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
if	O
(	O
(	O
m	pointer
->	O
handler	pointer
=	O
gzopen	function
(	O
name	pointer
,	O
mode	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Can't open file %s:"	pointer
,	O
name	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
GZFILEcloserS32	function
(	O
OBJID	int
IdObj	int
)	O
{	O
DtGZFILE	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtGZFILE	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
return	O
gzclose	function
(	O
m	pointer
->	O
handler	pointer
)	O
;	O
}	O
ESint32	int
EDMAPROC	O
GZFILEreadsAsS32rS32	function
(	O
OBJID	int
IdObj	int
,	O
EDMAT_BUFFER	struct
*	O
buf	pointer
,	O
EPSint32	pointer
len	int
)	O
{	O
DtGZFILE	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtGZFILE	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
if	O
(	O
buf	pointer
)	O
if	O
(	O
buf	pointer
->	O
Size	long
<	O
*	O
len	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"%s"	pointer
,	O
"Not enough allocated space to read data."	pointer
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Using Buffer size: %ld"	pointer
,	O
buf	pointer
->	O
Size	long
)	O
;	O
*	O
len	int
=	O
buf	pointer
->	O
Size	long
;	O
}	O
*	O
len	int
=	O
gzread	function
(	O
m	pointer
->	O
handler	pointer
,	O
buf	pointer
->	O
dat	pointer
,	O
*	O
len	int
)	O
;	O
return	O
*	O
len	int
;	O
}	O
ESint32	int
EDMAPROC	O
GZFILEwriteAsS32rS32	function
(	O
OBJID	int
IdObj	int
,	O
EDMAT_BUFFER	struct
buf	pointer
,	O
EPSint32	pointer
len	int
)	O
{	O
DtGZFILE	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtGZFILE	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
*	O
len	int
=	O
gzwrite	function
(	O
m	pointer
->	O
handler	pointer
,	O
buf	pointer
.	O
dat	pointer
,	O
*	O
len	int
)	O
;	O
return	O
*	O
len	int
;	O
}	O
ESint32	int
EDMAPROC	O
GZFILEputsZS32rS32	function
(	O
OBJID	int
IdObj	int
,	O
EPChar	pointer
s	pointer
,	O
ESint32	int
len	int
)	O
{	O
DtGZFILE	struct
*	O
m	pointer
;	O
EPChar	pointer
s1	pointer
;	O
ESint32	int
l	long
;	O
m	pointer
=	O
(	O
DtGZFILE	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
s1	pointer
=	O
strdup	function
(	O
s	pointer
)	O
;	O
l	long
=	O
len	int
;	O
if	O
(	O
l	long
>	O
strlen	function
(	O
s1	pointer
)	O
)	O
l	long
=	O
strlen	function
(	O
s1	pointer
)	O
;	O
else	O
s1	pointer
[	O
l	long
]	O
=	O
0	int
;	O
gzputs	function
(	O
m	pointer
->	O
handler	pointer
,	O
s1	pointer
)	O
;	O
free	function
(	O
s1	pointer
)	O
;	O
return	O
l	long
;	O
}	O
ESint32	int
EDMAPROC	O
GZFILEputcCS32rS32	function
(	O
OBJID	int
IdObj	int
,	O
EChar	char
c	int
)	O
{	O
DtGZFILE	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtGZFILE	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
return	O
gzputc	function
(	O
m	pointer
->	O
handler	pointer
,	O
c	int
)	O
;	O
}	O
EPChar	pointer
EDMAPROC	O
GZFILEgetssZsS32rS32	function
(	O
OBJID	int
IdObj	int
,	O
EPChar	pointer
s	pointer
,	O
EPSint32	pointer
len	int
)	O
{	O
DtGZFILE	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtGZFILE	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
return	O
gzgets	function
(	O
m	pointer
->	O
handler	pointer
,	O
s	pointer
,	O
*	O
len	int
)	O
;	O
}	O
ESint32	int
EDMAPROC	O
GZFILEgetcsCrS32	function
(	O
OBJID	int
IdObj	int
,	O
EPChar	pointer
c	int
)	O
{	O
DtGZFILE	struct
*	O
m	pointer
;	O
int	O
r	int
;	O
m	pointer
=	O
(	O
DtGZFILE	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
r	int
=	O
gzgetc	function
(	O
m	pointer
->	O
handler	pointer
)	O
;	O
*	O
c	int
=	O
(	O
char	O
)	O
r	int
;	O
return	O
r	int
;	O
}	O
ESint32	int
EDMAPROC	O
GZFILEflushrS32	function
(	O
OBJID	int
IdObj	int
)	O
{	O
DtGZFILE	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtGZFILE	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
return	O
gzflush	function
(	O
m	pointer
->	O
handler	pointer
,	O
Z_SYNC_FLUSH	int
)	O
;	O
}	O
ESint32	int
EDMAPROC	O
GZFILEseekS32ZrS32	function
(	O
OBJID	int
IdObj	int
,	O
ESint32	int
off	int
,	O
EPChar	pointer
where	pointer
)	O
{	O
DtGZFILE	struct
*	O
m	pointer
;	O
int	O
w	int
;	O
m	pointer
=	O
(	O
DtGZFILE	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
if	O
(	O
strncmp	function
(	O
where	pointer
,	O
"SEEK_SET"	pointer
,	O
8	int
)	O
==	O
0	int
)	O
w	int
=	O
SEEK_SET	int
;	O
else	O
{	O
if	O
(	O
strncmp	function
(	O
where	pointer
,	O
"SEEK_END"	pointer
,	O
8	int
)	O
==	O
0	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"%s"	pointer
,	O
"SEEK_END nor supported by zlib"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
w	int
=	O
SEEK_CUR	int
;	O
}	O
return	O
gzseek	function
(	O
m	pointer
->	O
handler	pointer
,	O
off	int
,	O
w	int
)	O
;	O
}	O
ESint32	int
EDMAPROC	O
GZFILEtellsS32rS32	function
(	O
OBJID	int
IdObj	int
,	O
EPSint32	pointer
off	int
)	O
{	O
DtGZFILE	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtGZFILE	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
*	O
off	int
=	O
gztell	function
(	O
m	pointer
->	O
handler	pointer
)	O
;	O
return	O
*	O
off	int
;	O
}	O
ESint32	int
EDMAPROC	O
GZFILErewindrS32	function
(	O
OBJID	int
IdObj	int
)	O
{	O
DtGZFILE	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtGZFILE	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
gztell	function
(	O
m	pointer
->	O
handler	pointer
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
GZFILEeofrS32	function
(	O
OBJID	int
IdObj	int
)	O
{	O
DtGZFILE	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtGZFILE	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
return	O
gzeof	function
(	O
m	pointer
->	O
handler	pointer
)	O
;	O
}	O
ESint32	int
EDMAPROC	O
GZFILEerrorrS32	function
(	O
OBJID	int
IdObj	int
)	O
{	O
DtGZFILE	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtGZFILE	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"%s"	pointer
,	O
"Method still not implemented"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
GZFILELoadZsArS32	function
(	O
OBJID	int
IdObj	int
,	O
EPChar	pointer
Name	pointer
,	O
EDMAT_BUFFER	struct
*	O
buf	pointer
)	O
{	O
DtGZFILE	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtGZFILE	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"%s"	pointer
,	O
"Method still not implemented"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
GZFILESaveZArS32	function
(	O
OBJID	int
IdObj	int
,	O
EPChar	pointer
name	pointer
,	O
EDMAT_BUFFER	struct
buf	pointer
)	O
{	O
DtGZFILE	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtGZFILE	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"%s"	pointer
,	O
"Method still not implemented"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
