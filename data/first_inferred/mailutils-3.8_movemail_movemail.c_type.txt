static	O
int	O
reverse_order	int
;	O
static	O
int	O
preserve_mail	int
;	O
static	O
int	O
emacs_mode	int
;	O
static	O
int	O
uidl_option	int
;	O
static	O
int	O
verbose_option	int
;	O
static	O
int	O
ignore_errors	int
;	O
static	O
char	O
*	O
program_id_option	pointer
;	O
static	O
size_t	long
max_messages_option	long
;	O
static	O
int	O
notify	int
;	O
static	O
int	O
progress_meter_option	int
;	O
static	O
int	O
onerror_flags	int
;	O
size_t	long
msg_count	long
=	O
0	int
;	O
size_t	long
get_err_count	long
=	O
0	int
;	O
size_t	long
app_err_count	long
=	O
0	int
;	O
enum	O
set_ownership_mode	enum
{	O
copy_owner_id	int
,	O
copy_owner_name	int
,	O
set_owner_id	int
,	O
set_owner_name	int
}	O
;	O
struct	O
user_id	struct
{	O
uid_t	int
uid	int
;	O
gid_t	int
gid	int
;	O
}	O
;	O
struct	O
set_ownership_method	struct
{	O
enum	O
set_ownership_mode	enum
mode	int
;	O
union	O
{	O
char	O
*	O
name	pointer
;	O
struct	O
user_id	struct
id	struct
;	O
}	O
owner	pointer
;	O
}	O
;	O
static	O
struct	O
set_ownership_method	struct
so_methods	array
[	O
SET_OWNERSHIP_MAX	int
]	O
;	O
static	O
int	O
so_method_num	int
;	O
struct	O
set_ownership_method	struct
*	O
get_next_so_method	function
(	O
)	O
{	O
if	O
(	O
so_method_num	int
==	O
MU_ARRAY_SIZE	O
(	O
so_methods	array
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"ownership method table overflow"	pointer
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
return	O
so_methods	array
+	O
so_method_num	int
++	O
;	O
}	O
mu_kwd_t	struct
method_kwd	array
[	O
]	O
=	O
{	O
{	O
"copy-id"	pointer
,	O
copy_owner_id	int
}	O
,	O
{	O
"copy-name"	pointer
,	O
copy_owner_name	int
}	O
,	O
{	O
"set-name"	pointer
,	O
set_owner_name	int
}	O
,	O
{	O
"user"	pointer
,	O
set_owner_name	int
}	O
,	O
{	O
"set-id"	pointer
,	O
set_owner_id	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
int	O
set_mailbox_ownership	function
(	O
const	O
char	O
*	O
str	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
str	pointer
,	O
"clear"	pointer
)	O
==	O
0	int
)	O
so_method_num	int
=	O
0	int
;	O
else	O
{	O
int	O
code	int
;	O
char	O
*	O
p	pointer
;	O
size_t	long
len	long
=	O
strcspn	function
(	O
str	pointer
,	O
"="	pointer
)	O
;	O
struct	O
set_ownership_method	struct
*	O
meth	pointer
;	O
if	O
(	O
mu_kwd_xlat_name_len	function
(	O
method_kwd	array
,	O
str	pointer
,	O
len	long
,	O
&	O
code	int
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"invalid ownership method: %s"	pointer
)	O
,	O
str	pointer
)	O
;	O
return	O
1	int
;	O
}	O
meth	pointer
=	O
get_next_so_method	function
(	O
)	O
;	O
meth	pointer
->	O
mode	int
=	O
code	int
;	O
switch	O
(	O
meth	pointer
->	O
mode	int
)	O
{	O
case	O
copy_owner_id	int
:	O
case	O
copy_owner_name	int
:	O
break	O
;	O
case	O
set_owner_id	int
:	O
if	O
(	O
!	O
str	pointer
[	O
len	long
]	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"ownership method %s requires value"	pointer
)	O
,	O
str	pointer
)	O
;	O
return	O
1	int
;	O
}	O
str	pointer
+=	O
len	long
+	O
1	int
;	O
meth	pointer
->	O
owner	pointer
.	O
id	struct
.	O
uid	int
=	O
strtoul	function
(	O
str	pointer
,	O
&	O
p	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
':'	O
)	O
{	O
str	pointer
=	O
p	pointer
+	O
1	int
;	O
meth	pointer
->	O
owner	pointer
.	O
id	struct
.	O
gid	int
=	O
strtoul	function
(	O
str	pointer
,	O
&	O
p	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
{	O
mu_error	function
(	O
_	O
(	O
"expected gid number, but found %s"	pointer
)	O
,	O
str	pointer
)	O
;	O
return	O
1	int
;	O
}	O
}	O
else	O
{	O
mu_error	function
(	O
_	O
(	O
"expected uid number, but found %s"	pointer
)	O
,	O
str	pointer
)	O
;	O
return	O
1	int
;	O
}	O
}	O
else	O
meth	pointer
->	O
owner	pointer
.	O
id	struct
.	O
gid	int
=	O
(	O
gid_t	int
)	O
-	O
1	int
;	O
break	O
;	O
case	O
set_owner_name	int
:	O
if	O
(	O
!	O
str	pointer
[	O
len	long
]	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"ownership method %s requires value"	pointer
)	O
,	O
str	pointer
)	O
;	O
return	O
1	int
;	O
}	O
meth	pointer
->	O
owner	pointer
.	O
name	pointer
=	O
mu_strdup	function
(	O
str	pointer
+	O
len	long
+	O
1	int
)	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
set_mailbox_ownership_list	function
(	O
char	O
const	O
*	O
str	pointer
)	O
{	O
if	O
(	O
!	O
strchr	function
(	O
str	pointer
,	O
','	O
)	O
)	O
return	O
set_mailbox_ownership	function
(	O
str	pointer
)	O
;	O
else	O
{	O
struct	O
mu_wordsplit	struct
ws	pointer
;	O
size_t	long
i	long
;	O
ws	pointer
.	O
ws_delim	pointer
=	O
","	pointer
;	O
if	O
(	O
mu_wordsplit	struct
(	O
str	pointer
,	O
&	O
ws	pointer
,	O
MU_WRDSF_DEFFLAGS	O
|	O
MU_WRDSF_DELIM	O
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot parse %s: %s"	pointer
)	O
,	O
str	pointer
,	O
mu_wordsplit_strerror	function
(	O
&	O
ws	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ws	pointer
.	O
ws_wordc	long
;	O
i	long
++	O
)	O
if	O
(	O
set_mailbox_ownership	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	long
]	O
)	O
)	O
return	O
1	int
;	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
static	O
int	O
set_onerror_action	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
char	O
*	O
str	pointer
=	O
item	pointer
;	O
if	O
(	O
strcmp	function
(	O
str	pointer
,	O
"abort"	pointer
)	O
==	O
0	int
)	O
onerror_flags	int
=	O
0	int
;	O
else	O
{	O
static	O
struct	O
mu_kwd	struct
onerror_kw	array
[	O
]	O
=	O
{	O
{	O
"skip"	pointer
,	O
ONERROR_SKIP	int
}	O
,	O
{	O
"delete"	pointer
,	O
ONERROR_DELETE	int
}	O
,	O
{	O
"count"	pointer
,	O
ONERROR_COUNT	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
int	O
flag	int
,	O
clr	int
=	O
0	int
;	O
if	O
(	O
strncmp	function
(	O
str	pointer
,	O
"no"	pointer
,	O
2	int
)	O
==	O
0	int
)	O
{	O
clr	int
=	O
1	int
;	O
str	pointer
+=	O
2	int
;	O
}	O
if	O
(	O
mu_kwd_xlat_name	function
(	O
onerror_kw	array
,	O
str	pointer
,	O
&	O
flag	int
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"unknown keyword: %s"	pointer
)	O
,	O
str	pointer
)	O
;	O
return	O
MU_ERR_FAILURE	O
;	O
}	O
if	O
(	O
clr	int
)	O
onerror_flags	int
&=	O
~	O
flag	int
;	O
else	O
onerror_flags	int
|=	O
flag	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
set_onerror_actions	function
(	O
char	O
const	O
*	O
str	pointer
)	O
{	O
mu_list_t	pointer
list	pointer
;	O
int	O
rc	int
;	O
mu_list_create	function
(	O
&	O
list	pointer
)	O
;	O
mu_list_set_destroy_item	function
(	O
list	pointer
,	O
mu_list_free_item	function
)	O
;	O
mu_string_split	function
(	O
str	pointer
,	O
","	pointer
,	O
list	pointer
)	O
;	O
rc	int
=	O
mu_list_foreach	function
(	O
list	pointer
,	O
set_onerror_action	function
,	O
NULL	O
)	O
;	O
mu_list_destroy	function
(	O
&	O
list	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
void	O
cli_mailbox_ownership	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
if	O
(	O
set_mailbox_ownership_list	function
(	O
arg	pointer
)	O
)	O
exit	function
(	O
po	pointer
->	O
po_exit_error	int
)	O
;	O
}	O
static	O
void	O
cli_onerror	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
if	O
(	O
set_onerror_actions	function
(	O
arg	pointer
)	O
)	O
exit	function
(	O
po	pointer
->	O
po_exit_error	int
)	O
;	O
}	O
static	O
struct	O
mu_option	struct
movemail_options	array
[	O
]	O
=	O
{	O
{	O
"preserve"	pointer
,	O
'p'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"preserve the source mailbox"	pointer
)	O
,	O
mu_c_bool	int
,	O
&	O
preserve_mail	int
}	O
,	O
{	O
"keep-messages"	pointer
,	O
0	int
,	O
NULL	O
,	O
MU_OPTION_ALIAS	int
}	O
,	O
{	O
"reverse"	pointer
,	O
'r'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"reverse the sorting order"	pointer
)	O
,	O
mu_c_bool	int
,	O
&	O
reverse_order	int
}	O
,	O
{	O
"emacs"	pointer
,	O
0	int
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"output information used by Emacs rmail interface"	pointer
)	O
,	O
mu_c_bool	int
,	O
&	O
emacs_mode	int
}	O
,	O
{	O
"uidl"	pointer
,	O
'u'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"use UIDLs to avoid downloading the same message twice"	pointer
)	O
,	O
mu_c_bool	int
,	O
&	O
uidl_option	int
}	O
,	O
{	O
"verbose"	pointer
,	O
'v'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"increase verbosity level"	pointer
)	O
,	O
mu_c_incr	int
,	O
&	O
verbose_option	int
}	O
,	O
{	O
"owner"	pointer
,	O
'P'	O
,	O
N_	O
(	O
"MODELIST"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"control mailbox ownership"	pointer
)	O
,	O
mu_c_string	int
,	O
cli_mailbox_ownership	function
}	O
,	O
{	O
"ignore-errors"	pointer
,	O
0	int
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"try to continue after errors"	pointer
)	O
,	O
mu_c_bool	int
,	O
&	O
ignore_errors	int
}	O
,	O
{	O
"onerror"	pointer
,	O
0	int
,	O
N_	O
(	O
"KW[,KW...]"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"what to do on errors"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
cli_onerror	function
}	O
,	O
{	O
"program-id"	pointer
,	O
0	int
,	O
N_	O
(	O
"FMT"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"set program identifier for diagnostics (default: program name)"	pointer
)	O
,	O
mu_c_string	int
,	O
&	O
program_id_option	pointer
}	O
,	O
{	O
"max-messages"	pointer
,	O
0	int
,	O
N_	O
(	O
"NUMBER"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"process at most NUMBER messages"	pointer
)	O
,	O
mu_c_size	int
,	O
&	O
max_messages_option	long
}	O
,	O
{	O
"notify"	pointer
,	O
0	int
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"enable biff notification"	pointer
)	O
,	O
mu_c_bool	int
,	O
&	O
notify	int
}	O
,	O
{	O
"progress-meter"	pointer
,	O
'm'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"enable progress meter"	pointer
)	O
,	O
mu_c_bool	int
,	O
&	O
progress_meter_option	int
}	O
,	O
MU_OPTION_END	O
}	O
,	O
*	O
options	array
[	O
]	O
=	O
{	O
movemail_options	array
,	O
NULL	O
}	O
;	O
static	O
int	O
cb_mailbox_ownership	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	array
)	O
{	O
int	O
i	long
;	O
if	O
(	O
val	array
->	O
type	int
==	O
MU_CFG_STRING	int
)	O
set_mailbox_ownership_list	function
(	O
val	array
->	O
v	array
.	O
string	pointer
)	O
;	O
if	O
(	O
mu_cfg_assert_value_type	function
(	O
val	array
,	O
MU_CFG_LIST	int
)	O
)	O
return	O
1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
val	array
->	O
v	array
.	O
arg	pointer
.	O
c	char
;	O
i	long
++	O
)	O
{	O
if	O
(	O
mu_cfg_assert_value_type	function
(	O
&	O
val	array
->	O
v	array
.	O
arg	pointer
.	O
v	array
[	O
i	long
]	O
,	O
MU_CFG_STRING	int
)	O
)	O
return	O
1	int
;	O
if	O
(	O
set_mailbox_ownership	function
(	O
val	array
->	O
v	array
.	O
arg	pointer
.	O
v	array
[	O
i	long
]	O
.	O
v	array
.	O
string	pointer
)	O
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
cb_onerror	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	array
)	O
{	O
switch	O
(	O
val	array
->	O
type	int
)	O
{	O
case	O
MU_CFG_LIST	int
:	O
mu_list_foreach	function
(	O
val	array
->	O
v	array
.	O
list	pointer
,	O
set_onerror_action	function
,	O
NULL	O
)	O
;	O
break	O
;	O
case	O
MU_CFG_STRING	int
:	O
set_onerror_actions	function
(	O
val	array
->	O
v	array
.	O
string	pointer
)	O
;	O
break	O
;	O
default	O
:	O
mu_error	function
(	O
"%s"	pointer
,	O
_	O
(	O
"too many arguments"	pointer
)	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
struct	O
mu_cfg_param	struct
movemail_cfg_param	array
[	O
]	O
=	O
{	O
{	O
"preserve"	pointer
,	O
mu_c_bool	int
,	O
&	O
preserve_mail	int
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Do not remove messages from the source mailbox."	pointer
)	O
}	O
,	O
{	O
"reverse"	pointer
,	O
mu_c_bool	int
,	O
&	O
reverse_order	int
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Reverse message sorting order."	pointer
)	O
}	O
,	O
{	O
"emacs"	pointer
,	O
mu_c_bool	int
,	O
&	O
emacs_mode	int
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Output information used by Emacs rmail interface."	pointer
)	O
}	O
,	O
{	O
"uidl"	pointer
,	O
mu_c_bool	int
,	O
&	O
uidl_option	int
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Use UIDLs to avoid downloading the same message twice."	pointer
)	O
}	O
,	O
{	O
"verbose"	pointer
,	O
mu_c_int	int
,	O
&	O
verbose_option	int
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Set verbosity level."	pointer
)	O
}	O
,	O
{	O
"program-id"	pointer
,	O
mu_c_string	int
,	O
&	O
program_id_option	pointer
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Set program identifier string (default: program name)"	pointer
)	O
}	O
,	O
{	O
"mailbox-ownership"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_mailbox_ownership	function
,	O
N_	O
(	O
"Define a list of methods for setting mailbox ownership. Valid "	pointer
"methods are:\n"	pointer
" copy-id          get owner UID and GID from the source mailbox\n"	pointer
" copy-name        get owner name from the source mailbox URL\n"	pointer
" set-id=UID[:GID] set supplied UID and GID\n"	pointer
" set-name=USER    make destination mailbox owned by USER"	pointer
)	O
,	O
N_	O
(	O
"methods: list"	pointer
)	O
}	O
,	O
{	O
"max-messages"	pointer
,	O
mu_c_size	int
,	O
&	O
max_messages_option	long
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Copy at most <count> messages."	pointer
)	O
,	O
N_	O
(	O
"count"	pointer
)	O
}	O
,	O
{	O
"ignore-errors"	pointer
,	O
mu_c_bool	int
,	O
&	O
ignore_errors	int
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Continue after an error."	pointer
)	O
}	O
,	O
{	O
"onerror"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_onerror	function
,	O
N_	O
(	O
"What to do after an error. Argument is a list of:\n"	pointer
" abort  -  terminate the program (the default)\n"	pointer
" skip   -  skip to the next message\n"	pointer
" delete -  delete this one and to the next message\n"	pointer
" count  -  count this message as processed\n"	pointer
"Each keyword can be prefixed with \"no\" to reverse its meaning."	pointer
)	O
,	O
N_	O
(	O
"arg: list"	pointer
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
struct	O
mu_cli_setup	struct
cli	struct
=	O
{	O
options	array
,	O
movemail_cfg_param	array
,	O
N_	O
(	O
"GNU movemail -- move messages across mailboxes."	pointer
)	O
,	O
N_	O
(	O
"inbox-url destfile [POP-password]"	pointer
)	O
}	O
;	O
static	O
char	O
*	O
movemail_capa	array
[	O
]	O
=	O
{	O
"debug"	pointer
,	O
"locking"	pointer
,	O
"mailbox"	pointer
,	O
"auth"	pointer
,	O
NULL	O
}	O
;	O
void	O
die	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
const	O
char	O
*	O
msg	pointer
,	O
int	O
status	int
)	O
{	O
mu_url_t	pointer
url	pointer
=	O
NULL	O
;	O
mu_mailbox_get_url	function
(	O
mbox	pointer
,	O
&	O
url	pointer
)	O
;	O
if	O
(	O
emacs_mode	int
)	O
mu_error	function
(	O
_	O
(	O
"%s:mailbox `%s': %s: %s"	pointer
)	O
,	O
mu_errname	function
(	O
status	int
)	O
,	O
mu_url_to_string	function
(	O
url	pointer
)	O
,	O
msg	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
else	O
mu_error	function
(	O
_	O
(	O
"mailbox `%s': %s: %s"	pointer
)	O
,	O
mu_url_to_string	function
(	O
url	pointer
)	O
,	O
msg	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
void	O
lock_mailbox	function
(	O
mu_mailbox_t	pointer
mbox	pointer
)	O
{	O
mu_locker_t	pointer
lock	pointer
;	O
int	O
status	int
;	O
status	int
=	O
mu_mailbox_get_locker	function
(	O
mbox	pointer
,	O
&	O
lock	pointer
)	O
;	O
if	O
(	O
status	int
)	O
die	function
(	O
mbox	pointer
,	O
_	O
(	O
"cannot retrieve locker"	pointer
)	O
,	O
status	int
)	O
;	O
if	O
(	O
!	O
lock	pointer
)	O
return	O
;	O
status	int
=	O
mu_locker_lock	function
(	O
lock	pointer
)	O
;	O
if	O
(	O
status	int
)	O
die	function
(	O
mbox	pointer
,	O
_	O
(	O
"cannot lock"	pointer
)	O
,	O
status	int
)	O
;	O
}	O
void	O
attach_passwd_ticket	function
(	O
mu_mailbox_t	pointer
mbx	pointer
,	O
char	O
*	O
passwd	struct
)	O
{	O
mu_folder_t	pointer
folder	pointer
=	O
NULL	O
;	O
mu_authority_t	pointer
auth	pointer
=	O
NULL	O
;	O
mu_secret_t	pointer
secret	pointer
;	O
mu_ticket_t	pointer
t	long
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_secret_create	function
(	O
&	O
secret	pointer
,	O
passwd	struct
,	O
strlen	function
(	O
passwd	struct
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
"mu_secret_create: %s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
mu_ticket_create	function
(	O
&	O
t	long
,	O
NULL	O
)	O
;	O
mu_ticket_set_secret	function
(	O
t	long
,	O
secret	pointer
)	O
;	O
if	O
(	O
(	O
rc	int
=	O
mu_mailbox_get_folder	function
(	O
mbx	pointer
,	O
&	O
folder	pointer
)	O
)	O
)	O
die	function
(	O
mbx	pointer
,	O
_	O
(	O
"mu_mailbox_get_folder failed"	pointer
)	O
,	O
rc	int
)	O
;	O
if	O
(	O
(	O
rc	int
=	O
mu_folder_get_authority	function
(	O
folder	pointer
,	O
&	O
auth	pointer
)	O
)	O
)	O
die	function
(	O
mbx	pointer
,	O
_	O
(	O
"mu_folder_get_authority failed"	pointer
)	O
,	O
rc	int
)	O
;	O
if	O
(	O
auth	pointer
&&	O
(	O
rc	int
=	O
mu_authority_set_ticket	function
(	O
auth	pointer
,	O
t	long
)	O
)	O
)	O
die	function
(	O
mbx	pointer
,	O
_	O
(	O
"mu_authority_set_ticket failed"	pointer
)	O
,	O
rc	int
)	O
;	O
}	O
void	O
open_mailbox	function
(	O
mu_mailbox_t	pointer
*	O
mbx	pointer
,	O
char	O
*	O
name	pointer
,	O
int	O
flags	int
,	O
char	O
*	O
passwd	struct
)	O
{	O
int	O
status	int
=	O
mu_mailbox_create_default	function
(	O
mbx	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
if	O
(	O
name	pointer
)	O
mu_error	function
(	O
_	O
(	O
"could not create mailbox `%s': %s"	pointer
)	O
,	O
name	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
else	O
mu_error	function
(	O
_	O
(	O
"could not create default mailbox: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
passwd	struct
)	O
attach_passwd_ticket	function
(	O
*	O
mbx	pointer
,	O
passwd	struct
)	O
;	O
status	int
=	O
mu_mailbox_open	function
(	O
*	O
mbx	pointer
,	O
flags	int
)	O
;	O
if	O
(	O
status	int
)	O
die	function
(	O
*	O
mbx	pointer
,	O
_	O
(	O
"cannot open"	pointer
)	O
,	O
status	int
)	O
;	O
lock_mailbox	function
(	O
*	O
mbx	pointer
)	O
;	O
}	O
int	O
move_message	function
(	O
mu_mailbox_t	pointer
dst	pointer
,	O
mu_message_t	pointer
msg	pointer
,	O
size_t	long
msgno	long
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
(	O
rc	int
=	O
mu_mailbox_append_message	function
(	O
dst	pointer
,	O
msg	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot append message %lu: %s"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
msgno	long
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
if	O
(	O
!	O
(	O
onerror_flags	int
&	O
ONERROR_DELETE	int
)	O
)	O
return	O
rc	int
;	O
}	O
if	O
(	O
!	O
preserve_mail	int
)	O
{	O
mu_attribute_t	pointer
attr	pointer
;	O
mu_message_get_attribute	function
(	O
msg	pointer
,	O
&	O
attr	pointer
)	O
;	O
mu_attribute_set_deleted	function
(	O
attr	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
movemail	function
(	O
mu_mailbox_t	pointer
dst	pointer
,	O
mu_message_t	pointer
msg	pointer
,	O
size_t	long
msgno	long
)	O
{	O
int	O
rc	int
=	O
move_message	function
(	O
dst	pointer
,	O
msg	pointer
,	O
msgno	long
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
++	O
msg_count	long
;	O
else	O
{	O
app_err_count	long
++	O
;	O
if	O
(	O
onerror_flags	int
)	O
{	O
if	O
(	O
onerror_flags	int
&	O
ONERROR_COUNT	int
)	O
++	O
msg_count	long
;	O
}	O
else	O
return	O
1	int
;	O
}	O
return	O
max_messages_option	long
&&	O
msg_count	long
>=	O
max_messages_option	long
;	O
}	O
void	O
compatibility_mode	function
(	O
mu_mailbox_t	pointer
*	O
mbx	pointer
,	O
char	O
*	O
source_name	pointer
,	O
char	O
*	O
password	pointer
,	O
int	O
flags	int
)	O
{	O
char	O
*	O
tmp	pointer
;	O
char	O
*	O
user_name	pointer
=	O
strtok	function
(	O
source_name	pointer
+	O
3	int
,	O
":"	pointer
)	O
;	O
char	O
*	O
host	pointer
=	O
strtok	function
(	O
NULL	O
,	O
":"	pointer
)	O
;	O
if	O
(	O
!	O
host	pointer
)	O
host	pointer
=	O
getenv	function
(	O
"MAILHOST"	pointer
)	O
;	O
if	O
(	O
!	O
host	pointer
)	O
{	O
mu_error	function
(	O
_	O
(	O
"hostname of the POP3 server is unknown"	pointer
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
mu_asprintf	function
(	O
&	O
tmp	pointer
,	O
"pop://%s@%s"	pointer
,	O
user_name	pointer
,	O
host	pointer
)	O
;	O
open_mailbox	function
(	O
mbx	pointer
,	O
tmp	pointer
,	O
flags	int
,	O
password	pointer
)	O
;	O
free	function
(	O
tmp	pointer
)	O
;	O
}	O
static	O
mu_mailbox_t	pointer
source	pointer
,	O
dest	pointer
;	O
static	O
void	O
close_mailboxes	function
(	O
void	O
)	O
{	O
mu_mailbox_close	function
(	O
dest	pointer
)	O
;	O
mu_mailbox_close	function
(	O
source	pointer
)	O
;	O
}	O
static	O
int	O
get_mbox_owner_id	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
mu_url_t	pointer
url	pointer
,	O
struct	O
user_id	struct
*	O
id	struct
)	O
{	O
const	O
char	O
*	O
s	pointer
;	O
int	O
rc	int
=	O
mu_url_sget_scheme	function
(	O
url	pointer
,	O
&	O
s	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
die	function
(	O
mbox	pointer
,	O
_	O
(	O
"cannot get scheme"	pointer
)	O
,	O
rc	int
)	O
;	O
if	O
(	O
(	O
strcmp	function
(	O
s	pointer
,	O
"/"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
s	pointer
,	O
"mbox"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
s	pointer
,	O
"mh"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
s	pointer
,	O
"maildir"	pointer
)	O
==	O
0	int
)	O
)	O
{	O
struct	O
stat	struct
st	pointer
;	O
rc	int
=	O
mu_url_sget_path	function
(	O
url	pointer
,	O
&	O
s	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
die	function
(	O
mbox	pointer
,	O
_	O
(	O
"cannot get path"	pointer
)	O
,	O
rc	int
)	O
;	O
if	O
(	O
stat	struct
(	O
s	pointer
,	O
&	O
st	pointer
)	O
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"stat"	pointer
,	O
s	pointer
,	O
errno	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
id	struct
->	O
uid	int
=	O
st	pointer
.	O
st_uid	int
;	O
id	struct
->	O
gid	int
=	O
st	pointer
.	O
st_gid	int
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
verbose_option	int
)	O
mu_diag_output	function
(	O
MU_DIAG_WARNING	O
,	O
_	O
(	O
"ignoring copy-name: not a local mailbox"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
static	O
int	O
get_user_id	function
(	O
const	O
char	O
*	O
name	pointer
,	O
struct	O
user_id	struct
*	O
id	struct
)	O
{	O
struct	O
mu_auth_data	struct
*	O
auth	pointer
=	O
mu_get_auth_by_name	function
(	O
name	pointer
)	O
;	O
if	O
(	O
!	O
auth	pointer
)	O
{	O
if	O
(	O
verbose_option	int
)	O
mu_diag_output	function
(	O
MU_DIAG_WARNING	O
,	O
_	O
(	O
"no such user: %s"	pointer
)	O
,	O
name	pointer
)	O
;	O
return	O
1	int
;	O
}	O
id	struct
->	O
uid	int
=	O
auth	pointer
->	O
uid	int
;	O
id	struct
->	O
gid	int
=	O
auth	pointer
->	O
gid	int
;	O
mu_auth_data_free	function
(	O
auth	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
get_mbox_owner_name	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
mu_url_t	pointer
url	pointer
,	O
struct	O
user_id	struct
*	O
id	struct
)	O
{	O
const	O
char	O
*	O
s	pointer
;	O
int	O
rc	int
=	O
mu_url_sget_user	function
(	O
url	pointer
,	O
&	O
s	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
die	function
(	O
mbox	pointer
,	O
_	O
(	O
"cannot get mailbox owner name"	pointer
)	O
,	O
rc	int
)	O
;	O
return	O
get_user_id	function
(	O
s	pointer
,	O
id	struct
)	O
;	O
}	O
static	O
int	O
guess_mbox_owner	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
struct	O
user_id	struct
*	O
id	struct
)	O
{	O
mu_url_t	pointer
url	pointer
=	O
NULL	O
;	O
int	O
rc	int
;	O
struct	O
set_ownership_method	struct
*	O
meth	pointer
;	O
rc	int
=	O
mu_mailbox_get_url	function
(	O
mbox	pointer
,	O
&	O
url	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_mailbox_get_url"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
rc	int
=	O
1	int
;	O
for	O
(	O
meth	pointer
=	O
so_methods	array
;	O
rc	int
==	O
1	int
&&	O
meth	pointer
<	O
so_methods	array
+	O
so_method_num	int
;	O
meth	pointer
++	O
)	O
{	O
switch	O
(	O
meth	pointer
->	O
mode	int
)	O
{	O
case	O
copy_owner_id	int
:	O
rc	int
=	O
get_mbox_owner_id	function
(	O
mbox	pointer
,	O
url	pointer
,	O
id	struct
)	O
;	O
break	O
;	O
case	O
copy_owner_name	int
:	O
rc	int
=	O
get_mbox_owner_name	function
(	O
mbox	pointer
,	O
url	pointer
,	O
id	struct
)	O
;	O
break	O
;	O
case	O
set_owner_id	int
:	O
id	struct
->	O
uid	int
=	O
meth	pointer
->	O
owner	pointer
.	O
id	struct
.	O
uid	int
;	O
rc	int
=	O
0	int
;	O
if	O
(	O
meth	pointer
->	O
owner	pointer
.	O
id	struct
.	O
gid	int
==	O
(	O
gid_t	int
)	O
-	O
1	int
)	O
{	O
struct	O
passwd	struct
*	O
pw	pointer
=	O
getpwuid	function
(	O
id	struct
->	O
uid	int
)	O
;	O
if	O
(	O
pw	pointer
)	O
id	struct
->	O
gid	int
=	O
pw	pointer
->	O
pw_gid	int
;	O
else	O
{	O
if	O
(	O
verbose_option	int
)	O
mu_diag_output	function
(	O
MU_DIAG_WARNING	O
,	O
_	O
(	O
"no user with uid %lu found"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
id	struct
->	O
uid	int
)	O
;	O
rc	int
=	O
1	int
;	O
}	O
}	O
else	O
id	struct
->	O
gid	int
=	O
meth	pointer
->	O
owner	pointer
.	O
id	struct
.	O
gid	int
;	O
break	O
;	O
case	O
set_owner_name	int
:	O
rc	int
=	O
get_user_id	function
(	O
meth	pointer
->	O
owner	pointer
.	O
name	pointer
,	O
id	struct
)	O
;	O
break	O
;	O
}	O
}	O
return	O
rc	int
;	O
}	O
static	O
void	O
switch_owner	function
(	O
mu_mailbox_t	pointer
mbox	pointer
)	O
{	O
struct	O
user_id	struct
user_id	struct
;	O
if	O
(	O
so_method_num	int
==	O
0	int
)	O
return	O
;	O
if	O
(	O
getuid	function
(	O
)	O
)	O
{	O
if	O
(	O
verbose_option	int
)	O
mu_diag_output	function
(	O
MU_DIAG_WARNING	O
,	O
_	O
(	O
"ignoring mailbox-ownership statement"	pointer
)	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
guess_mbox_owner	function
(	O
mbox	pointer
,	O
&	O
user_id	struct
)	O
==	O
0	int
)	O
{	O
if	O
(	O
mu_switch_to_privs	function
(	O
user_id	struct
.	O
uid	int
,	O
user_id	struct
.	O
gid	int
,	O
NULL	O
)	O
)	O
exit	function
(	O
1	int
)	O
;	O
}	O
else	O
{	O
mu_error	function
(	O
_	O
(	O
"no suitable method for setting mailbox ownership"	pointer
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
static	O
int	O
_compare_uidls	function
(	O
const	O
void	O
*	O
item	pointer
,	O
const	O
void	O
*	O
value	pointer
)	O
{	O
const	O
struct	O
mu_uidl	struct
*	O
a	pointer
=	O
item	pointer
;	O
const	O
struct	O
mu_uidl	struct
*	O
b	pointer
=	O
value	pointer
;	O
return	O
strcmp	function
(	O
a	pointer
->	O
uidl	array
,	O
b	pointer
->	O
uidl	array
)	O
;	O
}	O
struct	O
movemail_getvar_closure	struct
{	O
const	O
char	O
*	O
source_name	pointer
;	O
const	O
char	O
*	O
dest_name	pointer
;	O
mu_url_t	pointer
source_url	pointer
;	O
mu_url_t	pointer
dest_url	pointer
;	O
}	O
;	O
static	O
int	O
get_url_part	function
(	O
mu_url_t	pointer
url	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
size_t	long
nlen	long
,	O
char	O
*	O
*	O
ret	pointer
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
!	O
url	pointer
)	O
return	O
MU_WRDSE_UNDEF	O
;	O
if	O
(	O
SEQ	O
(	O
"user"	pointer
,	O
name	pointer
,	O
nlen	long
)	O
)	O
rc	int
=	O
mu_url_aget_user	function
(	O
url	pointer
,	O
ret	pointer
)	O
;	O
else	O
if	O
(	O
SEQ	O
(	O
"host"	pointer
,	O
name	pointer
,	O
nlen	long
)	O
)	O
rc	int
=	O
mu_url_aget_host	function
(	O
url	pointer
,	O
ret	pointer
)	O
;	O
else	O
if	O
(	O
SEQ	O
(	O
"port"	pointer
,	O
name	pointer
,	O
nlen	long
)	O
)	O
rc	int
=	O
mu_url_aget_portstr	function
(	O
url	pointer
,	O
ret	pointer
)	O
;	O
else	O
if	O
(	O
SEQ	O
(	O
"path"	pointer
,	O
name	pointer
,	O
nlen	long
)	O
)	O
rc	int
=	O
mu_url_aget_path	function
(	O
url	pointer
,	O
ret	pointer
)	O
;	O
else	O
return	O
MU_WRDSE_UNDEF	O
;	O
switch	O
(	O
rc	int
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
MU_ERR_NOENT	O
:	O
return	O
MU_WRDSE_UNDEF	O
;	O
default	O
:	O
if	O
(	O
mu_asprintf	function
(	O
ret	pointer
,	O
"%s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
return	O
MU_WRDSE_NOSPACE	O
;	O
return	O
MU_WRDSE_USERERR	O
;	O
}	O
return	O
MU_WRDSE_OK	O
;	O
}	O
static	O
int	O
movemail_getvar	function
(	O
char	O
*	O
*	O
ret	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
size_t	long
nlen	long
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
movemail_getvar_closure	struct
*	O
pc	long
=	O
data	pointer
;	O
const	O
char	O
*	O
s	pointer
;	O
if	O
(	O
nlen	long
>	O
7	int
&&	O
memcmp	function
(	O
"source_"	pointer
,	O
name	pointer
,	O
7	int
)	O
==	O
0	int
)	O
return	O
get_url_part	function
(	O
pc	long
->	O
source_url	pointer
,	O
name	pointer
+	O
7	int
,	O
nlen	long
-	O
7	int
,	O
ret	pointer
)	O
;	O
if	O
(	O
nlen	long
>	O
5	int
&&	O
memcmp	function
(	O
"dest_"	pointer
,	O
name	pointer
,	O
5	int
)	O
==	O
0	int
)	O
return	O
get_url_part	function
(	O
pc	long
->	O
dest_url	pointer
,	O
name	pointer
+	O
5	int
,	O
nlen	long
-	O
5	int
,	O
ret	pointer
)	O
;	O
if	O
(	O
SEQ	O
(	O
"progname"	pointer
,	O
name	pointer
,	O
nlen	long
)	O
)	O
s	pointer
=	O
mu_program_name	pointer
;	O
else	O
if	O
(	O
SEQ	O
(	O
"source"	pointer
,	O
name	pointer
,	O
nlen	long
)	O
)	O
s	pointer
=	O
pc	long
->	O
source_name	pointer
;	O
else	O
if	O
(	O
SEQ	O
(	O
"dest"	pointer
,	O
name	pointer
,	O
nlen	long
)	O
)	O
s	pointer
=	O
pc	long
->	O
dest_name	pointer
;	O
else	O
return	O
MU_WRDSE_UNDEF	O
;	O
*	O
ret	pointer
=	O
strdup	function
(	O
s	pointer
)	O
;	O
if	O
(	O
!	O
*	O
ret	pointer
)	O
return	O
MU_WRDSE_NOSPACE	O
;	O
return	O
MU_WRDSE_OK	O
;	O
}	O
static	O
void	O
set_program_id	function
(	O
const	O
char	O
*	O
source_name	pointer
,	O
const	O
char	O
*	O
dest_name	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_wordsplit	struct
ws	pointer
;	O
struct	O
movemail_getvar_closure	struct
clos	pointer
;	O
clos	pointer
.	O
source_name	pointer
=	O
source_name	pointer
;	O
clos	pointer
.	O
dest_name	pointer
=	O
dest_name	pointer
;	O
rc	int
=	O
mu_mailbox_get_url	function
(	O
source	pointer
,	O
&	O
clos	pointer
.	O
source_url	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_output	function
(	O
MU_DIAG_INFO	O
,	O
_	O
(	O
"cannot obtain source mailbox URL: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
rc	int
=	O
mu_mailbox_get_url	function
(	O
dest	pointer
,	O
&	O
clos	pointer
.	O
dest_url	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_output	function
(	O
MU_DIAG_INFO	O
,	O
_	O
(	O
"cannot obtain destination mailbox URL: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
ws	pointer
.	O
ws_getvar	pointer
=	O
movemail_getvar	function
;	O
ws	pointer
.	O
ws_closure	pointer
=	O
&	O
clos	pointer
;	O
if	O
(	O
mu_wordsplit	struct
(	O
program_id_option	pointer
,	O
&	O
ws	pointer
,	O
MU_WRDSF_NOSPLIT	O
|	O
MU_WRDSF_NOCMD	O
|	O
MU_WRDSF_GETVAR	O
|	O
MU_WRDSF_CLOSURE	O
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot expand line `%s': %s"	pointer
)	O
,	O
program_id_option	pointer
,	O
mu_wordsplit_strerror	function
(	O
&	O
ws	pointer
)	O
)	O
;	O
return	O
;	O
}	O
mu_program_name	pointer
=	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
;	O
ws	pointer
.	O
ws_wordc	long
=	O
0	int
;	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
mu_stdstream_strerr_setup	function
(	O
MU_STRERR_STDERR	int
)	O
;	O
}	O
static	O
int	O
screen_width	function
(	O
void	O
)	O
{	O
struct	O
winsize	struct
ws	pointer
;	O
ws	pointer
.	O
ws_col	short
=	O
0	int
;	O
if	O
(	O
ioctl	function
(	O
1	int
,	O
TIOCGWINSZ	int
,	O
(	O
char	O
*	O
)	O
&	O
ws	pointer
)	O
<	O
0	int
)	O
{	O
char	O
*	O
p	pointer
=	O
getenv	function
(	O
"COLUMNS"	pointer
)	O
;	O
if	O
(	O
p	pointer
)	O
ws	pointer
.	O
ws_col	short
=	O
atol	function
(	O
p	pointer
)	O
;	O
}	O
if	O
(	O
ws	pointer
.	O
ws_col	short
==	O
0	int
)	O
return	O
80	int
;	O
return	O
ws	pointer
.	O
ws_col	short
;	O
}	O
static	O
void	O
progress_format	function
(	O
size_t	long
pos	long
,	O
size_t	long
count	long
)	O
{	O
int	O
n	pointer
;	O
fputc	function
(	O
'\r'	O
,	O
stdout	pointer
)	O
;	O
n	pointer
=	O
printf	function
(	O
"message %zu/%zu"	pointer
,	O
pos	long
,	O
count	long
)	O
;	O
n	pointer
=	O
screen_width	function
(	O
)	O
-	O
n	pointer
;	O
while	O
(	O
n	pointer
--	O
)	O
fputc	function
(	O
' '	O
,	O
stdout	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
}	O
void	O
progress_start	function
(	O
mu_iterator_t	pointer
itr	pointer
)	O
{	O
size_t	long
count	long
;	O
if	O
(	O
!	O
progress_meter_option	int
)	O
return	O
;	O
if	O
(	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_count	int
,	O
&	O
count	long
)	O
)	O
{	O
progress_meter_option	int
=	O
0	int
;	O
return	O
;	O
}	O
progress_format	function
(	O
0	int
,	O
count	long
)	O
;	O
}	O
void	O
progress_mark	function
(	O
mu_iterator_t	pointer
itr	pointer
)	O
{	O
size_t	long
count	long
,	O
pos	long
;	O
if	O
(	O
!	O
progress_meter_option	int
)	O
return	O
;	O
if	O
(	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_count	int
,	O
&	O
count	long
)	O
||	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_tell	int
,	O
&	O
pos	long
)	O
)	O
{	O
progress_meter_option	int
=	O
0	int
;	O
return	O
;	O
}	O
if	O
(	O
reverse_order	int
)	O
pos	long
=	O
count	long
-	O
pos	long
+	O
1	int
;	O
progress_format	function
(	O
pos	long
,	O
count	long
)	O
;	O
}	O
void	O
progress_stop	function
(	O
void	O
)	O
{	O
if	O
(	O
progress_meter_option	int
)	O
fputc	function
(	O
'\n'	O
,	O
stdout	pointer
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
size_t	long
total	long
;	O
int	O
rc	int
=	O
0	int
;	O
char	O
*	O
source_name	pointer
,	O
*	O
dest_name	pointer
;	O
int	O
flags	int
;	O
mu_list_t	pointer
src_uidl_list	pointer
=	O
NULL	O
;	O
mu_iterator_t	pointer
itr	pointer
;	O
MU_APP_INIT_NLS	O
(	O
)	O
;	O
MU_AUTH_REGISTER_ALL_MODULES	O
(	O
)	O
;	O
mu_register_all_formats	O
(	O
)	O
;	O
mu_auth_register_module	function
(	O
&	O
mu_auth_tls_module	struct
)	O
;	O
mu_cli	function
(	O
argc	long
,	O
argv	pointer
,	O
&	O
cli	struct
,	O
movemail_capa	array
,	O
NULL	O
,	O
&	O
argc	long
,	O
&	O
argv	pointer
)	O
;	O
if	O
(	O
argc	long
<	O
2	int
||	O
argc	long
>	O
3	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"wrong number of arguments"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
ignore_errors	int
)	O
onerror_flags	int
|=	O
ONERROR_SKIP	int
|	O
ONERROR_COUNT	int
;	O
if	O
(	O
!	O
isatty	function
(	O
1	int
)	O
)	O
progress_meter_option	int
=	O
0	int
;	O
if	O
(	O
emacs_mode	int
)	O
{	O
mu_registrar_set_default_record	function
(	O
mu_mbox_record	pointer
)	O
;	O
mu_stdstream_strerr_setup	function
(	O
MU_STRERR_STDERR	int
)	O
;	O
}	O
atexit	function
(	O
close_mailboxes	function
)	O
;	O
source_name	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
dest_name	pointer
=	O
argv	pointer
[	O
1	int
]	O
;	O
flags	int
=	O
preserve_mail	int
?	O
MU_STREAM_READ	int
:	O
MU_STREAM_RDWR	O
;	O
if	O
(	O
strncmp	function
(	O
source_name	pointer
,	O
"po:"	pointer
,	O
3	int
)	O
==	O
0	int
)	O
compatibility_mode	function
(	O
&	O
source	pointer
,	O
source_name	pointer
,	O
argv	pointer
[	O
2	int
]	O
,	O
flags	int
)	O
;	O
else	O
open_mailbox	function
(	O
&	O
source	pointer
,	O
source_name	pointer
,	O
flags	int
,	O
argv	pointer
[	O
2	int
]	O
)	O
;	O
switch_owner	function
(	O
source	pointer
)	O
;	O
open_mailbox	function
(	O
&	O
dest	pointer
,	O
dest_name	pointer
,	O
MU_STREAM_APPEND	int
|	O
MU_STREAM_READ	int
|	O
MU_STREAM_CREAT	int
,	O
NULL	O
)	O
;	O
if	O
(	O
program_id_option	pointer
)	O
set_program_id	function
(	O
source_name	pointer
,	O
dest_name	pointer
)	O
;	O
if	O
(	O
notify	int
)	O
{	O
rc	int
=	O
mu_mailbox_set_notify	function
(	O
dest	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	function
(	O
_	O
(	O
"failed to set up notification: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
}	O
rc	int
=	O
mu_mailbox_messages_count	function
(	O
source	pointer
,	O
&	O
total	long
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot count messages: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
verbose_option	int
)	O
{	O
mu_diag_output	function
(	O
MU_DIAG_INFO	O
,	O
_	O
(	O
"number of messages in source mailbox: %lu"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
total	long
)	O
;	O
if	O
(	O
max_messages_option	long
)	O
mu_diag_output	function
(	O
MU_DIAG_INFO	O
,	O
reverse_order	int
?	O
ngettext	function
(	O
"will process last %lu message"	pointer
,	O
"will process last %lu messages"	pointer
,	O
max_messages_option	long
)	O
:	O
ngettext	function
(	O
"will process first %lu message"	pointer
,	O
"will process first %lu messages"	pointer
,	O
max_messages_option	long
)	O
,	O
(	O
unsigned	O
long	O
)	O
max_messages_option	long
)	O
;	O
}	O
if	O
(	O
uidl_option	int
)	O
{	O
mu_list_t	pointer
dst_uidl_list	pointer
=	O
NULL	O
;	O
rc	int
=	O
mu_mailbox_get_uidls	function
(	O
source	pointer
,	O
&	O
src_uidl_list	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
die	function
(	O
source	pointer
,	O
_	O
(	O
"cannot get UIDLs"	pointer
)	O
,	O
rc	int
)	O
;	O
rc	int
=	O
mu_mailbox_get_uidls	function
(	O
dest	pointer
,	O
&	O
dst_uidl_list	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
die	function
(	O
dest	pointer
,	O
_	O
(	O
"cannot get UIDLs"	pointer
)	O
,	O
rc	int
)	O
;	O
mu_list_set_comparator	function
(	O
dst_uidl_list	pointer
,	O
_compare_uidls	function
)	O
;	O
mu_list_get_iterator	function
(	O
src_uidl_list	pointer
,	O
&	O
itr	pointer
)	O
;	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
struct	O
mu_uidl	struct
*	O
uidl	array
;	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
uidl	array
)	O
;	O
if	O
(	O
mu_list_locate	function
(	O
dst_uidl_list	pointer
,	O
uidl	array
,	O
NULL	O
)	O
==	O
0	int
)	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_delete	int
,	O
NULL	O
)	O
;	O
}	O
mu_list_destroy	function
(	O
&	O
dst_uidl_list	pointer
)	O
;	O
mu_list_set_comparator	function
(	O
src_uidl_list	pointer
,	O
NULL	O
)	O
;	O
rc	int
=	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_set_direction	int
,	O
&	O
reverse_order	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot set iteration direction: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
progress_start	function
(	O
itr	pointer
)	O
;	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
struct	O
mu_uidl	struct
*	O
uidl	array
;	O
mu_message_t	pointer
msg	pointer
;	O
mu_header_t	pointer
hdr	pointer
;	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
uidl	array
)	O
;	O
if	O
(	O
(	O
rc	int
=	O
mu_mailbox_get_message	function
(	O
source	pointer
,	O
uidl	array
->	O
msgno	long
,	O
&	O
msg	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot read message %lu: %s"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
uidl	array
->	O
msgno	long
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
get_err_count	long
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
(	O
rc	int
=	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"%lu: cannot get header: %s"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
uidl	array
->	O
msgno	long
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
}	O
else	O
{	O
char	O
const	O
*	O
suidl	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
rc	int
=	O
mu_header_sget_value	O
(	O
hdr	pointer
,	O
MU_HEADER_X_UIDL	pointer
,	O
&	O
suidl	pointer
)	O
)	O
)	O
{	O
if	O
(	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
mu_error	function
(	O
_	O
(	O
"%lu: cannot get %s: %s"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
uidl	array
->	O
msgno	long
,	O
MU_HEADER_X_UIDL	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
suidl	pointer
,	O
uidl	array
->	O
uidl	array
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"%lu: stored and reported UIDL differ; fixing"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
uidl	array
->	O
msgno	long
)	O
;	O
suidl	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
(	O
rc	int
=	O
mu_header_set_value	function
(	O
hdr	pointer
,	O
MU_HEADER_X_UIDL	pointer
,	O
uidl	array
->	O
uidl	array
,	O
1	int
)	O
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"%lu: cannot set header: %s"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
uidl	array
->	O
msgno	long
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
}	O
}	O
progress_mark	function
(	O
itr	pointer
)	O
;	O
if	O
(	O
movemail	function
(	O
dest	pointer
,	O
msg	pointer
,	O
uidl	array
->	O
msgno	long
)	O
)	O
break	O
;	O
}	O
}	O
else	O
{	O
rc	int
=	O
mu_mailbox_get_iterator	function
(	O
source	pointer
,	O
&	O
itr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot obtain mailbox iterator: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
rc	int
=	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_set_direction	int
,	O
&	O
reverse_order	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot set iteration direction: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
progress_start	function
(	O
itr	pointer
)	O
;	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
mu_message_t	pointer
msg	pointer
;	O
size_t	long
msgno	long
;	O
rc	int
=	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_tell	int
,	O
&	O
msgno	long
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot get iterator position: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
rc	int
=	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
msg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot read message %lu: %s"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
msgno	long
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
get_err_count	long
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
movemail	function
(	O
dest	pointer
,	O
msg	pointer
,	O
msgno	long
)	O
)	O
break	O
;	O
progress_mark	function
(	O
itr	pointer
)	O
;	O
}	O
}	O
progress_stop	function
(	O
)	O
;	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
if	O
(	O
verbose_option	int
)	O
{	O
mu_diag_output	function
(	O
MU_DIAG_INFO	O
,	O
_	O
(	O
"number of processed messages: %lu"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
msg_count	long
)	O
;	O
mu_diag_output	function
(	O
MU_DIAG_INFO	O
,	O
_	O
(	O
"number of errors: %lu / %lu"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
get_err_count	long
,	O
(	O
unsigned	O
long	O
)	O
app_err_count	long
)	O
;	O
}	O
if	O
(	O
app_err_count	long
&&	O
!	O
(	O
onerror_flags	int
&	O
(	O
ONERROR_DELETE	int
|	O
ONERROR_COUNT	int
)	O
)	O
)	O
preserve_mail	int
=	O
1	int
;	O
if	O
(	O
onerror_flags	int
&	O
ONERROR_COUNT	int
)	O
app_err_count	long
=	O
0	int
;	O
mu_mailbox_sync	function
(	O
dest	pointer
)	O
;	O
rc	int
=	O
mu_mailbox_close	function
(	O
dest	pointer
)	O
;	O
mu_mailbox_destroy	function
(	O
&	O
dest	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	function
(	O
_	O
(	O
"cannot close destination mailbox: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
else	O
if	O
(	O
!	O
preserve_mail	int
)	O
mu_mailbox_expunge	function
(	O
source	pointer
)	O
;	O
mu_mailbox_close	function
(	O
source	pointer
)	O
;	O
mu_mailbox_destroy	function
(	O
&	O
source	pointer
)	O
;	O
return	O
!	O
(	O
rc	int
==	O
0	int
&&	O
(	O
app_err_count	long
+	O
get_err_count	long
)	O
==	O
0	int
)	O
;	O
}	O
