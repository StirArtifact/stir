struct	O
gss_status_codes	struct
{	O
gss_uint32	int
err	int
;	O
const	O
char	O
*	O
name	pointer
;	O
const	O
char	O
*	O
text	pointer
;	O
}	O
;	O
static	O
struct	O
gss_status_codes	struct
gss_calling_errors	array
[	O
]	O
=	O
{	O
{	O
GSS_S_CALL_INACCESSIBLE_READ	O
,	O
"GSS_S_CALL_INACCESSIBLE_READ"	pointer
,	O
N_	O
(	O
"A required input parameter could not be read"	pointer
)	O
}	O
,	O
{	O
GSS_S_CALL_INACCESSIBLE_WRITE	O
,	O
"GSS_S_CALL_INACCESSIBLE_WRITE"	pointer
,	O
N_	O
(	O
"A required output parameter could not be written"	pointer
)	O
}	O
,	O
{	O
GSS_S_CALL_BAD_STRUCTURE	O
,	O
"GSS_S_CALL_BAD_STRUCTURE"	pointer
,	O
N_	O
(	O
"A parameter was malformed"	pointer
)	O
}	O
}	O
;	O
static	O
struct	O
gss_status_codes	struct
gss_routine_errors	array
[	O
]	O
=	O
{	O
{	O
GSS_S_BAD_MECH	O
,	O
"GSS_S_BAD_MECH"	pointer
,	O
N_	O
(	O
"An unsupported mechanism was requested"	pointer
)	O
}	O
,	O
{	O
GSS_S_BAD_NAME	O
,	O
"GSS_S_BAD_NAME"	pointer
,	O
N_	O
(	O
"An invalid name was supplied"	pointer
)	O
}	O
,	O
{	O
GSS_S_BAD_NAMETYPE	O
,	O
"GSS_S_BAD_NAMETYPE"	pointer
,	O
N_	O
(	O
"A supplied name was of an unsupported type"	pointer
)	O
}	O
,	O
{	O
GSS_S_BAD_BINDINGS	O
,	O
"GSS_S_BAD_BINDINGS"	pointer
,	O
N_	O
(	O
"Incorrect channel bindings were supplied"	pointer
)	O
}	O
,	O
{	O
GSS_S_BAD_STATUS	O
,	O
"GSS_S_BAD_STATUS"	pointer
,	O
N_	O
(	O
"An invalid status code was supplied"	pointer
)	O
}	O
,	O
{	O
GSS_S_BAD_SIG	O
,	O
"GSS_S_BAD_SIG"	pointer
,	O
N_	O
(	O
"A token had an invalid MIC"	pointer
)	O
}	O
,	O
{	O
GSS_S_NO_CRED	O
,	O
"GSS_S_NO_CRED"	pointer
,	O
N_	O
(	O
"No credentials were supplied, or the credentials were unavailable "	pointer
"or inaccessible"	pointer
)	O
}	O
,	O
{	O
GSS_S_NO_CONTEXT	O
,	O
"GSS_S_NO_CONTEXT"	pointer
,	O
N_	O
(	O
"No context has been established"	pointer
)	O
}	O
,	O
{	O
GSS_S_DEFECTIVE_TOKEN	O
,	O
"GSS_S_DEFECTIVE_TOKEN"	pointer
,	O
N_	O
(	O
"A token was invalid"	pointer
)	O
}	O
,	O
{	O
GSS_S_DEFECTIVE_CREDENTIAL	O
,	O
"GSS_S_DEFECTIVE_CREDENTIAL"	pointer
,	O
N_	O
(	O
"A credential was invalid"	pointer
)	O
}	O
,	O
{	O
GSS_S_CREDENTIALS_EXPIRED	O
,	O
"GSS_S_CREDENTIALS_EXPIRED"	pointer
,	O
N_	O
(	O
"The referenced credentials have expired"	pointer
)	O
}	O
,	O
{	O
GSS_S_CONTEXT_EXPIRED	O
,	O
"GSS_S_CONTEXT_EXPIRED"	pointer
,	O
N_	O
(	O
"The context has expired"	pointer
)	O
}	O
,	O
{	O
GSS_S_FAILURE	O
,	O
"GSS_S_FAILURE"	pointer
,	O
N_	O
(	O
"Unspecified error in underlying mechanism"	pointer
)	O
}	O
,	O
{	O
GSS_S_BAD_QOP	O
,	O
"GSS_S_BAD_QOP"	pointer
,	O
N_	O
(	O
"The quality-of-protection requested could not be provided"	pointer
)	O
}	O
,	O
{	O
GSS_S_UNAUTHORIZED	O
,	O
"GSS_S_UNAUTHORIZED"	pointer
,	O
N_	O
(	O
"The operation is forbidden by local security policy"	pointer
)	O
}	O
,	O
{	O
GSS_S_UNAVAILABLE	O
,	O
"GSS_S_UNAVAILABLE"	pointer
,	O
N_	O
(	O
"The operation or option is unavailable"	pointer
)	O
}	O
,	O
{	O
GSS_S_DUPLICATE_ELEMENT	O
,	O
"GSS_S_DUPLICATE_ELEMENT"	pointer
,	O
N_	O
(	O
"The requested credential element already exists"	pointer
)	O
}	O
,	O
{	O
GSS_S_NAME_NOT_MN	O
,	O
"GSS_S_NAME_NOT_MN"	pointer
,	O
N_	O
(	O
"The provided name was not a mechanism name"	pointer
)	O
}	O
}	O
;	O
static	O
struct	O
gss_status_codes	struct
gss_supplementary_errors	array
[	O
]	O
=	O
{	O
{	O
GSS_S_CONTINUE_NEEDED	O
,	O
"GSS_S_CONTINUE_NEEDED"	pointer
,	O
N_	O
(	O
"The gss_init_sec_context() or gss_accept_sec_context() function "	pointer
"must be called again to complete its function"	pointer
)	O
}	O
,	O
{	O
GSS_S_DUPLICATE_TOKEN	O
,	O
"GSS_S_DUPLICATE_TOKEN"	pointer
,	O
N_	O
(	O
"The token was a duplicate of an earlier token"	pointer
)	O
}	O
,	O
{	O
GSS_S_OLD_TOKEN	O
,	O
"GSS_S_OLD_TOKEN"	pointer
,	O
N_	O
(	O
"The token's validity period has expired"	pointer
)	O
}	O
,	O
{	O
GSS_S_UNSEQ_TOKEN	O
,	O
"GSS_S_UNSEQ_TOKEN"	pointer
,	O
N_	O
(	O
"A later token has already been processed"	pointer
)	O
}	O
,	O
{	O
GSS_S_GAP_TOKEN	O
,	O
"GSS_S_GAP_TOKEN"	pointer
,	O
N_	O
(	O
"An expected per-message token was not received"	pointer
)	O
}	O
}	O
;	O
OM_uint32	int
gss_display_status	function
(	O
OM_uint32	int
*	O
minor_status	pointer
,	O
OM_uint32	int
status_value	int
,	O
int	O
status_type	int
,	O
const	O
gss_OID	pointer
mech_type	pointer
,	O
OM_uint32	int
*	O
message_context	pointer
,	O
gss_buffer_t	pointer
status_string	pointer
)	O
{	O
size_t	long
i	long
;	O
bindtextdomain	function
(	O
PACKAGE	pointer
PO_SUFFIX	pointer
,	O
LOCALEDIR	O
)	O
;	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
0	int
;	O
if	O
(	O
message_context	pointer
)	O
status_value	int
&=	O
~	O
*	O
message_context	pointer
;	O
switch	O
(	O
status_type	int
)	O
{	O
case	O
GSS_C_GSS_CODE	int
:	O
if	O
(	O
message_context	pointer
)	O
{	O
*	O
message_context	pointer
|=	O
GSS_C_ROUTINE_ERROR_MASK	int
<<	O
GSS_C_ROUTINE_ERROR_OFFSET	int
;	O
if	O
(	O
(	O
status_value	int
&	O
~	O
*	O
message_context	pointer
)	O
==	O
0	int
)	O
*	O
message_context	pointer
=	O
0	int
;	O
}	O
switch	O
(	O
GSS_ROUTINE_ERROR	O
(	O
status_value	int
)	O
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
GSS_S_BAD_MECH	O
:	O
case	O
GSS_S_BAD_NAME	O
:	O
case	O
GSS_S_BAD_NAMETYPE	O
:	O
case	O
GSS_S_BAD_BINDINGS	O
:	O
case	O
GSS_S_BAD_STATUS	O
:	O
case	O
GSS_S_BAD_SIG	O
:	O
case	O
GSS_S_NO_CRED	O
:	O
case	O
GSS_S_NO_CONTEXT	O
:	O
case	O
GSS_S_DEFECTIVE_TOKEN	O
:	O
case	O
GSS_S_DEFECTIVE_CREDENTIAL	O
:	O
case	O
GSS_S_CREDENTIALS_EXPIRED	O
:	O
case	O
GSS_S_CONTEXT_EXPIRED	O
:	O
case	O
GSS_S_FAILURE	O
:	O
case	O
GSS_S_BAD_QOP	O
:	O
case	O
GSS_S_UNAUTHORIZED	O
:	O
case	O
GSS_S_UNAVAILABLE	O
:	O
case	O
GSS_S_DUPLICATE_ELEMENT	O
:	O
case	O
GSS_S_NAME_NOT_MN	O
:	O
status_string	pointer
->	O
value	pointer
=	O
strdup	function
(	O
_	O
(	O
gss_routine_errors	array
[	O
(	O
GSS_ROUTINE_ERROR	O
(	O
status_value	int
)	O
>>	O
GSS_C_ROUTINE_ERROR_OFFSET	int
)	O
-	O
1	int
]	O
.	O
text	pointer
)	O
)	O
;	O
if	O
(	O
!	O
status_string	pointer
->	O
value	pointer
)	O
{	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
status_string	pointer
->	O
length	int
=	O
strlen	function
(	O
status_string	pointer
->	O
value	pointer
)	O
;	O
return	O
GSS_S_COMPLETE	int
;	O
break	O
;	O
default	O
:	O
return	O
GSS_S_BAD_STATUS	O
;	O
break	O
;	O
}	O
if	O
(	O
message_context	pointer
)	O
{	O
*	O
message_context	pointer
|=	O
GSS_C_CALLING_ERROR_MASK	int
<<	O
GSS_C_CALLING_ERROR_OFFSET	int
;	O
if	O
(	O
(	O
status_value	int
&	O
~	O
*	O
message_context	pointer
)	O
==	O
0	int
)	O
*	O
message_context	pointer
=	O
0	int
;	O
}	O
switch	O
(	O
GSS_CALLING_ERROR	O
(	O
status_value	int
)	O
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
GSS_S_CALL_INACCESSIBLE_READ	O
:	O
case	O
GSS_S_CALL_INACCESSIBLE_WRITE	O
:	O
case	O
GSS_S_CALL_BAD_STRUCTURE	O
:	O
status_string	pointer
->	O
value	pointer
=	O
strdup	function
(	O
_	O
(	O
gss_calling_errors	array
[	O
(	O
GSS_CALLING_ERROR	O
(	O
status_value	int
)	O
>>	O
GSS_C_CALLING_ERROR_OFFSET	int
)	O
-	O
1	int
]	O
.	O
text	pointer
)	O
)	O
;	O
if	O
(	O
!	O
status_string	pointer
->	O
value	pointer
)	O
{	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
status_string	pointer
->	O
length	int
=	O
strlen	function
(	O
status_string	pointer
->	O
value	pointer
)	O
;	O
return	O
GSS_S_COMPLETE	int
;	O
break	O
;	O
default	O
:	O
return	O
GSS_S_BAD_STATUS	O
;	O
break	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
sizeof	O
(	O
gss_supplementary_errors	array
)	O
/	O
sizeof	O
(	O
gss_supplementary_errors	array
[	O
0	int
]	O
)	O
;	O
i	long
++	O
)	O
if	O
(	O
gss_supplementary_errors	array
[	O
i	long
]	O
.	O
err	int
&	O
GSS_SUPPLEMENTARY_INFO	O
(	O
status_value	int
)	O
)	O
{	O
status_string	pointer
->	O
value	pointer
=	O
strdup	function
(	O
_	O
(	O
gss_supplementary_errors	array
[	O
i	long
]	O
.	O
text	pointer
)	O
)	O
;	O
if	O
(	O
!	O
status_string	pointer
->	O
value	pointer
)	O
{	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
status_string	pointer
->	O
length	int
=	O
strlen	function
(	O
status_string	pointer
->	O
value	pointer
)	O
;	O
*	O
message_context	pointer
|=	O
gss_supplementary_errors	array
[	O
i	long
]	O
.	O
err	int
;	O
if	O
(	O
(	O
status_value	int
&	O
~	O
*	O
message_context	pointer
)	O
==	O
0	int
)	O
*	O
message_context	pointer
=	O
0	int
;	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
if	O
(	O
GSS_SUPPLEMENTARY_INFO	O
(	O
status_value	int
)	O
)	O
return	O
GSS_S_BAD_STATUS	O
;	O
if	O
(	O
message_context	pointer
)	O
*	O
message_context	pointer
=	O
0	int
;	O
status_string	pointer
->	O
value	pointer
=	O
strdup	function
(	O
_	O
(	O
"No error"	pointer
)	O
)	O
;	O
if	O
(	O
!	O
status_string	pointer
->	O
value	pointer
)	O
{	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
status_string	pointer
->	O
length	int
=	O
strlen	function
(	O
status_string	pointer
->	O
value	pointer
)	O
;	O
break	O
;	O
case	O
GSS_C_MECH_CODE	int
:	O
{	O
_gss_mech_api_t	pointer
mech	pointer
;	O
mech	pointer
=	O
_gss_find_mech	function
(	O
mech_type	pointer
)	O
;	O
return	O
mech	pointer
->	O
display_status	pointer
(	O
minor_status	pointer
,	O
status_value	int
,	O
status_type	int
,	O
mech_type	pointer
,	O
message_context	pointer
,	O
status_string	pointer
)	O
;	O
}	O
break	O
;	O
default	O
:	O
return	O
GSS_S_BAD_STATUS	O
;	O
}	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
