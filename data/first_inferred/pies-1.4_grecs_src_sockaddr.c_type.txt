struct	O
grecs_sockaddr	struct
*	O
grecs_sockaddr_new	function
(	O
size_t	long
s	pointer
)	O
{	O
struct	O
grecs_sockaddr	struct
*	O
sp	pointer
=	O
grecs_malloc	function
(	O
sizeof	O
(	O
*	O
sp	pointer
)	O
)	O
;	O
sp	pointer
->	O
next	pointer
=	O
NULL	O
;	O
sp	pointer
->	O
str	pointer
=	O
NULL	O
;	O
sp	pointer
->	O
sa	pointer
=	O
grecs_zalloc	function
(	O
s	pointer
)	O
;	O
sp	pointer
->	O
len	long
=	O
s	pointer
;	O
return	O
sp	pointer
;	O
}	O
void	O
grecs_sockaddr_free	function
(	O
struct	O
grecs_sockaddr	struct
*	O
p	pointer
)	O
{	O
while	O
(	O
p	pointer
)	O
{	O
struct	O
grecs_sockaddr	struct
*	O
next	pointer
=	O
p	pointer
->	O
next	pointer
;	O
free	function
(	O
p	pointer
->	O
sa	pointer
)	O
;	O
free	function
(	O
p	pointer
->	O
str	pointer
)	O
;	O
free	function
(	O
p	pointer
)	O
;	O
p	pointer
=	O
next	pointer
;	O
}	O
}	O
static	O
int	O
parse_unix	function
(	O
struct	O
grecs_sockaddr	struct
*	O
*	O
ret	pointer
,	O
const	O
char	O
*	O
arg	struct
,	O
const	O
char	O
*	O
addrstr	pointer
,	O
struct	O
grecs_sockaddr_hints	struct
*	O
gh	pointer
,	O
grecs_locus_t	struct
const	O
*	O
locus	struct
)	O
{	O
struct	O
sockaddr_un	struct
*	O
s_un	pointer
;	O
size_t	long
slen	long
=	O
strlen	function
(	O
addrstr	pointer
)	O
;	O
struct	O
grecs_sockaddr	struct
*	O
sp	pointer
;	O
if	O
(	O
slen	long
>=	O
sizeof	O
s_un	pointer
->	O
sun_path	array
)	O
{	O
grecs_error	function
(	O
locus	struct
,	O
0	int
,	O
_	O
(	O
"socket path name too long: %s"	pointer
)	O
,	O
arg	struct
)	O
;	O
return	O
-	O
1	int
;	O
}	O
sp	pointer
=	O
grecs_sockaddr_new	function
(	O
sizeof	O
(	O
s_un	pointer
[	O
0	int
]	O
)	O
)	O
;	O
s_un	pointer
=	O
(	O
struct	O
sockaddr_un	struct
*	O
)	O
sp	pointer
->	O
sa	pointer
;	O
s_un	pointer
->	O
sun_family	short
=	O
AF_UNIX	O
;	O
strcpy	function
(	O
s_un	pointer
->	O
sun_path	array
,	O
addrstr	pointer
)	O
;	O
*	O
ret	pointer
=	O
sp	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_inet	function
(	O
struct	O
grecs_sockaddr	struct
*	O
*	O
ret	pointer
,	O
int	O
family	int
,	O
const	O
char	O
*	O
arg	struct
,	O
const	O
char	O
*	O
addrstr	pointer
,	O
struct	O
grecs_sockaddr_hints	struct
*	O
gh	pointer
,	O
grecs_locus_t	struct
const	O
*	O
locus	struct
)	O
{	O
int	O
rc	int
;	O
struct	O
addrinfo	struct
hints	struct
;	O
struct	O
addrinfo	struct
*	O
res	pointer
,	O
*	O
ap	array
;	O
const	O
char	O
*	O
node	pointer
=	O
NULL	O
;	O
char	O
*	O
nodebuf	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
service	pointer
=	O
NULL	O
;	O
struct	O
grecs_sockaddr	struct
*	O
head	pointer
=	O
NULL	O
,	O
*	O
tail	pointer
=	O
NULL	O
;	O
char	O
portbuf	array
[	O
64	int
]	O
;	O
memset	function
(	O
&	O
hints	struct
,	O
0	int
,	O
sizeof	O
(	O
hints	struct
)	O
)	O
;	O
hints	struct
.	O
ai_family	int
=	O
family	int
;	O
hints	struct
.	O
ai_socktype	int
=	O
SOCK_STREAM	int
;	O
if	O
(	O
(	O
family	int
==	O
AF_INET6	O
||	O
family	int
==	O
AF_UNSPEC	O
)	O
&&	O
addrstr	pointer
[	O
0	int
]	O
==	O
'['	O
)	O
{	O
char	O
*	O
p	pointer
=	O
strchr	function
(	O
addrstr	pointer
+	O
1	int
,	O
']'	O
)	O
;	O
if	O
(	O
p	pointer
&&	O
p	pointer
>	O
addrstr	pointer
+	O
1	int
)	O
{	O
size_t	long
len	long
;	O
addrstr	pointer
++	O
;	O
len	long
=	O
p	pointer
-	O
addrstr	pointer
;	O
nodebuf	pointer
=	O
grecs_malloc	function
(	O
len	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
nodebuf	pointer
,	O
addrstr	pointer
,	O
len	long
)	O
;	O
nodebuf	pointer
[	O
len	long
]	O
=	O
0	int
;	O
node	pointer
=	O
nodebuf	pointer
;	O
service	pointer
=	O
p	pointer
+	O
1	int
;	O
family	int
=	O
AF_INET6	O
;	O
}	O
else	O
service	pointer
=	O
strchr	function
(	O
addrstr	pointer
,	O
':'	O
)	O
;	O
}	O
else	O
service	pointer
=	O
strrchr	function
(	O
addrstr	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
service	pointer
&&	O
*	O
service	pointer
)	O
{	O
if	O
(	O
*	O
service	pointer
!=	O
':'	O
)	O
{	O
grecs_error	function
(	O
locus	struct
,	O
0	int
,	O
_	O
(	O
"%s: garbage near %s"	pointer
)	O
,	O
arg	struct
,	O
service	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
service	pointer
++	O
;	O
}	O
if	O
(	O
!	O
node	pointer
)	O
{	O
if	O
(	O
service	pointer
)	O
{	O
size_t	long
len	long
=	O
service	pointer
-	O
addrstr	pointer
-	O
1	int
;	O
if	O
(	O
len	long
==	O
0	int
)	O
node	pointer
=	O
NULL	O
;	O
else	O
{	O
nodebuf	pointer
=	O
grecs_malloc	function
(	O
len	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
nodebuf	pointer
,	O
addrstr	pointer
,	O
len	long
)	O
;	O
nodebuf	pointer
[	O
len	long
]	O
=	O
0	int
;	O
node	pointer
=	O
nodebuf	pointer
;	O
}	O
}	O
else	O
{	O
if	O
(	O
grecs_str_is_ipaddr	function
(	O
addrstr	pointer
)	O
)	O
node	pointer
=	O
addrstr	pointer
;	O
else	O
if	O
(	O
grecs_str_is_num	function
(	O
addrstr	pointer
)	O
)	O
{	O
service	pointer
=	O
addrstr	pointer
;	O
hints	struct
.	O
ai_flags	int
|=	O
AI_NUMERICSERV	int
;	O
}	O
}	O
}	O
if	O
(	O
!	O
service	pointer
||	O
!	O
*	O
service	pointer
)	O
{	O
if	O
(	O
!	O
node	pointer
&&	O
addrstr	pointer
[	O
0	int
]	O
)	O
node	pointer
=	O
addrstr	pointer
;	O
if	O
(	O
gh	pointer
->	O
flags	int
&	O
GRECS_HINT_SERVICE	int
)	O
{	O
service	pointer
=	O
gh	pointer
->	O
service	pointer
;	O
}	O
else	O
if	O
(	O
gh	pointer
->	O
flags	int
&	O
GRECS_HINT_PORT	int
)	O
{	O
snprintf	function
(	O
portbuf	array
,	O
sizeof	O
portbuf	array
,	O
"%hu"	pointer
,	O
gh	pointer
->	O
port	short
)	O
;	O
service	pointer
=	O
portbuf	array
;	O
hints	struct
.	O
ai_flags	int
|=	O
AI_NUMERICSERV	int
;	O
}	O
else	O
if	O
(	O
!	O
(	O
gh	pointer
->	O
flags	int
&	O
GRECS_AH_PASSIVE	int
)	O
)	O
{	O
grecs_error	function
(	O
locus	struct
,	O
0	int
,	O
_	O
(	O
"service not specified: %s"	pointer
)	O
,	O
arg	struct
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
if	O
(	O
!	O
node	pointer
)	O
{	O
if	O
(	O
gh	pointer
->	O
flags	int
&	O
GRECS_AH_PASSIVE	int
)	O
hints	struct
.	O
ai_flags	int
|=	O
AI_PASSIVE	int
;	O
}	O
rc	int
=	O
getaddrinfo	function
(	O
node	pointer
,	O
service	pointer
,	O
&	O
hints	struct
,	O
&	O
res	pointer
)	O
;	O
free	function
(	O
nodebuf	pointer
)	O
;	O
switch	O
(	O
rc	int
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
EAI_SYSTEM	O
:	O
grecs_error	function
(	O
locus	struct
,	O
0	int
,	O
_	O
(	O
"%s: cannot parse address: %s"	pointer
)	O
,	O
arg	struct
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
break	O
;	O
case	O
EAI_BADFLAGS	O
:	O
case	O
EAI_SOCKTYPE	O
:	O
grecs_error	function
(	O
locus	struct
,	O
0	int
,	O
"%s:%d: internal error converting %s"	pointer
,	O
__FILE__	O
,	O
__LINE__	O
,	O
arg	struct
)	O
;	O
break	O
;	O
case	O
EAI_MEMORY	O
:	O
grecs_alloc_die	function
(	O
)	O
;	O
default	O
:	O
grecs_error	function
(	O
locus	struct
,	O
0	int
,	O
"%s: %s"	pointer
,	O
arg	struct
,	O
gai_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
for	O
(	O
ap	array
=	O
res	pointer
;	O
ap	array
;	O
ap	array
=	O
ap	array
->	O
ai_next	pointer
)	O
{	O
if	O
(	O
family	int
==	O
AF_UNSPEC	O
||	O
ap	array
->	O
ai_addr	pointer
->	O
sa_family	short
==	O
family	int
)	O
{	O
struct	O
grecs_sockaddr	struct
*	O
sp	pointer
=	O
grecs_sockaddr_new	function
(	O
ap	array
->	O
ai_addrlen	int
)	O
;	O
memcpy	function
(	O
sp	pointer
->	O
sa	pointer
,	O
ap	array
->	O
ai_addr	pointer
,	O
ap	array
->	O
ai_addrlen	int
)	O
;	O
sp	pointer
->	O
len	long
=	O
ap	array
->	O
ai_addrlen	int
;	O
if	O
(	O
!	O
head	pointer
)	O
head	pointer
=	O
sp	pointer
;	O
else	O
tail	pointer
->	O
next	pointer
=	O
sp	pointer
;	O
tail	pointer
=	O
sp	pointer
;	O
}	O
}	O
freeaddrinfo	function
(	O
res	pointer
)	O
;	O
*	O
ret	pointer
=	O
head	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_inet4	function
(	O
struct	O
grecs_sockaddr	struct
*	O
*	O
ret	pointer
,	O
const	O
char	O
*	O
arg	struct
,	O
const	O
char	O
*	O
addrstr	pointer
,	O
struct	O
grecs_sockaddr_hints	struct
*	O
gh	pointer
,	O
grecs_locus_t	struct
const	O
*	O
locus	struct
)	O
{	O
return	O
parse_inet	function
(	O
ret	pointer
,	O
AF_INET	O
,	O
arg	struct
,	O
addrstr	pointer
,	O
gh	pointer
,	O
locus	struct
)	O
;	O
}	O
static	O
int	O
parse_inet6	function
(	O
struct	O
grecs_sockaddr	struct
*	O
*	O
ret	pointer
,	O
const	O
char	O
*	O
arg	struct
,	O
const	O
char	O
*	O
addrstr	pointer
,	O
struct	O
grecs_sockaddr_hints	struct
*	O
gh	pointer
,	O
grecs_locus_t	struct
const	O
*	O
locus	struct
)	O
{	O
return	O
parse_inet	function
(	O
ret	pointer
,	O
AF_INET6	O
,	O
arg	struct
,	O
addrstr	pointer
,	O
gh	pointer
,	O
locus	struct
)	O
;	O
}	O
struct	O
schemetab	struct
{	O
const	O
char	O
*	O
scheme	pointer
;	O
size_t	long
len	long
;	O
int	O
(	O
*	O
parser	pointer
)	O
(	O
struct	O
grecs_sockaddr	struct
*	O
*	O
ret	pointer
,	O
const	O
char	O
*	O
arg	struct
,	O
const	O
char	O
*	O
addr	pointer
,	O
struct	O
grecs_sockaddr_hints	struct
*	O
gh	pointer
,	O
grecs_locus_t	struct
const	O
*	O
locus	struct
)	O
;	O
}	O
;	O
struct	O
schemetab	struct
schemetab	struct
[	O
]	O
=	O
{	O
{	O
"inet"	pointer
,	O
4	int
,	O
parse_inet4	function
}	O
,	O
{	O
"inet4"	pointer
,	O
5	int
,	O
parse_inet4	function
}	O
,	O
{	O
"inet6"	pointer
,	O
5	int
,	O
parse_inet6	function
}	O
,	O
{	O
"unix"	pointer
,	O
4	int
,	O
parse_unix	function
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
int	O
grecs_str_to_sockaddr	function
(	O
struct	O
grecs_sockaddr	struct
*	O
*	O
sap	pointer
,	O
const	O
char	O
*	O
arg	struct
,	O
struct	O
grecs_sockaddr_hints	struct
*	O
gh	pointer
,	O
grecs_locus_t	struct
const	O
*	O
locus	struct
)	O
{	O
char	O
*	O
p	pointer
;	O
struct	O
grecs_sockaddr_hints	struct
ghints	struct
;	O
if	O
(	O
!	O
gh	pointer
)	O
{	O
memset	function
(	O
&	O
ghints	struct
,	O
0	int
,	O
sizeof	O
(	O
ghints	struct
)	O
)	O
;	O
if	O
(	O
grecs_default_port	int
)	O
{	O
ghints	struct
.	O
flags	int
=	O
GRECS_HINT_PORT	int
;	O
ghints	struct
.	O
port	short
=	O
ntohs	function
(	O
grecs_default_port	int
)	O
;	O
}	O
gh	pointer
=	O
&	O
ghints	struct
;	O
}	O
p	pointer
=	O
strchr	function
(	O
arg	struct
,	O
':'	O
)	O
;	O
if	O
(	O
p	pointer
&&	O
p	pointer
>	O
arg	struct
&&	O
p	pointer
[	O
1	int
]	O
==	O
'/'	O
&&	O
p	pointer
[	O
2	int
]	O
==	O
'/'	O
)	O
{	O
size_t	long
len	long
=	O
p	pointer
-	O
arg	struct
;	O
struct	O
schemetab	struct
*	O
sp	pointer
;	O
for	O
(	O
sp	pointer
=	O
schemetab	struct
;	O
sp	pointer
->	O
scheme	pointer
;	O
sp	pointer
++	O
)	O
if	O
(	O
len	long
==	O
sp	pointer
->	O
len	long
&&	O
memcmp	function
(	O
arg	struct
,	O
sp	pointer
->	O
scheme	pointer
,	O
len	long
)	O
==	O
0	int
)	O
return	O
sp	pointer
->	O
parser	pointer
(	O
sap	pointer
,	O
arg	struct
,	O
p	pointer
+	O
3	int
,	O
gh	pointer
,	O
locus	struct
)	O
;	O
grecs_error	function
(	O
locus	struct
,	O
0	int
,	O
_	O
(	O
"unknown or unsupported scheme: %s"	pointer
)	O
,	O
arg	struct
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
arg	struct
[	O
0	int
]	O
==	O
'/'	O
)	O
return	O
parse_unix	function
(	O
sap	pointer
,	O
arg	struct
,	O
arg	struct
,	O
gh	pointer
,	O
locus	struct
)	O
;	O
else	O
if	O
(	O
strlen	function
(	O
arg	struct
)	O
>	O
5	int
&&	O
memcmp	function
(	O
arg	struct
,	O
"unix:"	pointer
,	O
5	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
arg	struct
[	O
5	int
]	O
!=	O
'/'	O
)	O
grecs_error	function
(	O
locus	struct
,	O
0	int
,	O
_	O
(	O
"%s: UNIX socket must be an absolute file name"	pointer
)	O
,	O
arg	struct
)	O
;	O
return	O
parse_unix	function
(	O
sap	pointer
,	O
arg	struct
,	O
arg	struct
+	O
5	int
,	O
gh	pointer
,	O
locus	struct
)	O
;	O
}	O
return	O
parse_inet	function
(	O
sap	pointer
,	O
AF_UNSPEC	O
,	O
arg	struct
,	O
arg	struct
,	O
gh	pointer
,	O
locus	struct
)	O
;	O
}	O
static	O
int	O
sockaddr_str	function
(	O
struct	O
sockaddr	struct
*	O
sa	pointer
,	O
socklen_t	int
salen	int
,	O
char	O
*	O
*	O
pbuf	pointer
,	O
size_t	long
*	O
psz	pointer
)	O
{	O
int	O
rc	int
;	O
switch	O
(	O
sa	pointer
->	O
sa_family	short
)	O
{	O
case	O
AF_INET	O
:	O
case	O
AF_INET6	O
:	O
{	O
char	O
host	array
[	O
NI_MAXHOST	int
]	O
;	O
char	O
srv	array
[	O
NI_MAXSERV	int
]	O
;	O
if	O
(	O
getnameinfo	function
(	O
sa	pointer
,	O
salen	int
,	O
host	array
,	O
sizeof	O
(	O
host	array
)	O
,	O
srv	array
,	O
sizeof	O
(	O
srv	array
)	O
,	O
NI_NUMERICHOST	int
|	O
NI_NUMERICSERV	int
)	O
==	O
0	int
)	O
rc	int
=	O
grecs_asprintf	function
(	O
pbuf	pointer
,	O
psz	pointer
,	O
"%s://%s:%s"	pointer
,	O
sa	pointer
->	O
sa_family	short
==	O
AF_INET	O
?	O
"inet"	pointer
:	O
"inet6"	pointer
,	O
host	array
,	O
srv	array
)	O
;	O
else	O
rc	int
=	O
grecs_asprintf	function
(	O
pbuf	pointer
,	O
psz	pointer
,	O
"%s://[getnameinfo failed]"	pointer
,	O
sa	pointer
->	O
sa_family	short
==	O
AF_INET	O
?	O
"inet"	pointer
:	O
"inet6"	pointer
)	O
;	O
break	O
;	O
}	O
case	O
AF_UNIX	O
:	O
{	O
struct	O
sockaddr_un	struct
*	O
s_un	pointer
=	O
(	O
struct	O
sockaddr_un	struct
*	O
)	O
sa	pointer
;	O
if	O
(	O
S_UN_NAME	O
(	O
s_un	pointer
,	O
salen	int
)	O
[	O
0	int
]	O
==	O
0	int
)	O
rc	int
=	O
grecs_asprintf	function
(	O
pbuf	pointer
,	O
psz	pointer
,	O
"unix://[anonymous socket]"	pointer
)	O
;	O
else	O
rc	int
=	O
grecs_asprintf	function
(	O
pbuf	pointer
,	O
psz	pointer
,	O
"unix://%s"	pointer
,	O
s_un	pointer
->	O
sun_path	array
)	O
;	O
break	O
;	O
}	O
default	O
:	O
rc	int
=	O
grecs_asprintf	function
(	O
pbuf	pointer
,	O
psz	pointer
,	O
"family:%d"	pointer
,	O
sa	pointer
->	O
sa_family	short
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
char	O
const	O
*	O
grecs_sockaddr_str	function
(	O
struct	O
grecs_sockaddr	struct
*	O
sa	pointer
)	O
{	O
if	O
(	O
!	O
sa	pointer
->	O
str	pointer
)	O
{	O
size_t	long
sz	long
=	O
0	int
;	O
if	O
(	O
sockaddr_str	function
(	O
sa	pointer
->	O
sa	pointer
,	O
sa	pointer
->	O
len	long
,	O
&	O
sa	pointer
->	O
str	pointer
,	O
&	O
sz	long
)	O
)	O
{	O
abort	function
(	O
)	O
;	O
}	O
}	O
return	O
sa	pointer
->	O
str	pointer
;	O
}	O
