static	O
void	O
write_tcl_string	function
(	O
FILE	struct
*	O
stream	pointer
,	O
const	O
char	O
*	O
str	pointer
)	O
{	O
static	O
const	O
char	O
hexdigit	array
[	O
]	O
=	O
"0123456789abcdef"	pointer
;	O
const	O
char	O
*	O
str_limit	pointer
=	O
str	pointer
+	O
strlen	function
(	O
str	pointer
)	O
;	O
fprintf	function
(	O
stream	pointer
,	O
"\""	pointer
)	O
;	O
while	O
(	O
str	pointer
<	O
str_limit	pointer
)	O
{	O
ucs4_t	int
uc	int
;	O
unsigned	O
int	O
count	int
;	O
count	int
=	O
u8_mbtouc	function
(	O
&	O
uc	int
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
str	pointer
,	O
str_limit	pointer
-	O
str	pointer
)	O
;	O
if	O
(	O
uc	int
<	O
0x10000	int
)	O
{	O
if	O
(	O
uc	int
==	O
0x000a	int
)	O
fprintf	function
(	O
stream	pointer
,	O
"\\n"	pointer
)	O
;	O
else	O
if	O
(	O
uc	int
==	O
0x000d	int
)	O
fprintf	function
(	O
stream	pointer
,	O
"\\r"	pointer
)	O
;	O
else	O
if	O
(	O
uc	int
==	O
0x0022	int
)	O
fprintf	function
(	O
stream	pointer
,	O
"\\\""	pointer
)	O
;	O
else	O
if	O
(	O
uc	int
==	O
0x0024	int
)	O
fprintf	function
(	O
stream	pointer
,	O
"\\$"	pointer
)	O
;	O
else	O
if	O
(	O
uc	int
==	O
0x005b	int
)	O
fprintf	function
(	O
stream	pointer
,	O
"\\["	pointer
)	O
;	O
else	O
if	O
(	O
uc	int
==	O
0x005c	int
)	O
fprintf	function
(	O
stream	pointer
,	O
"\\\\"	pointer
)	O
;	O
else	O
if	O
(	O
uc	int
==	O
0x005d	int
)	O
fprintf	function
(	O
stream	pointer
,	O
"\\]"	pointer
)	O
;	O
else	O
if	O
(	O
uc	int
>=	O
0x0020	int
&&	O
uc	int
<	O
0x007f	int
)	O
fprintf	function
(	O
stream	pointer
,	O
"%c"	pointer
,	O
(	O
int	O
)	O
uc	int
)	O
;	O
else	O
fprintf	function
(	O
stream	pointer
,	O
"\\u%c%c%c%c"	pointer
,	O
hexdigit	array
[	O
(	O
uc	int
>>	O
12	int
)	O
&	O
0x0f	int
]	O
,	O
hexdigit	array
[	O
(	O
uc	int
>>	O
8	int
)	O
&	O
0x0f	int
]	O
,	O
hexdigit	array
[	O
(	O
uc	int
>>	O
4	int
)	O
&	O
0x0f	int
]	O
,	O
hexdigit	array
[	O
uc	int
&	O
0x0f	int
]	O
)	O
;	O
}	O
else	O
fwrite	function
(	O
str	pointer
,	O
1	int
,	O
count	int
,	O
stream	pointer
)	O
;	O
str	pointer
+=	O
count	int
;	O
}	O
fprintf	function
(	O
stream	pointer
,	O
"\""	pointer
)	O
;	O
}	O
static	O
void	O
write_msg	function
(	O
FILE	struct
*	O
output_file	pointer
,	O
message_list_ty	struct
*	O
mlp	pointer
,	O
const	O
char	O
*	O
locale_name	pointer
)	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mlp	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
{	O
message_ty	struct
*	O
mp	pointer
=	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
;	O
if	O
(	O
is_header	O
(	O
mp	pointer
)	O
)	O
fprintf	function
(	O
output_file	pointer
,	O
"set ::msgcat::header "	pointer
)	O
;	O
else	O
{	O
fprintf	function
(	O
output_file	pointer
,	O
"::msgcat::mcset %s "	pointer
,	O
locale_name	pointer
)	O
;	O
write_tcl_string	function
(	O
output_file	pointer
,	O
mp	pointer
->	O
msgid	pointer
)	O
;	O
fprintf	function
(	O
output_file	pointer
,	O
" "	pointer
)	O
;	O
}	O
write_tcl_string	function
(	O
output_file	pointer
,	O
mp	pointer
->	O
msgstr	pointer
)	O
;	O
fprintf	function
(	O
output_file	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
}	O
int	O
msgdomain_write_tcl	function
(	O
message_list_ty	struct
*	O
mlp	pointer
,	O
const	O
char	O
*	O
canon_encoding	pointer
,	O
const	O
char	O
*	O
locale_name	pointer
,	O
const	O
char	O
*	O
directory	pointer
)	O
{	O
if	O
(	O
mlp	pointer
->	O
nitems	long
==	O
0	int
)	O
return	O
0	int
;	O
{	O
bool	bool
has_context	bool
;	O
size_t	long
j	long
;	O
has_context	bool
=	O
false	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mlp	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
if	O
(	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
->	O
msgctxt	pointer
!=	O
NULL	O
)	O
has_context	bool
=	O
true	int
;	O
if	O
(	O
has_context	bool
)	O
{	O
multiline_error	function
(	O
xstrdup	function
(	O
""	pointer
)	O
,	O
xstrdup	function
(	O
_	O
(	O
"message catalog has context dependent translations\nbut the Tcl message catalog format doesn't support contexts\n"	pointer
)	O
)	O
)	O
;	O
return	O
1	int
;	O
}	O
}	O
{	O
bool	bool
has_plural	bool
;	O
size_t	long
j	long
;	O
has_plural	bool
=	O
false	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mlp	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
if	O
(	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
->	O
msgid_plural	pointer
!=	O
NULL	O
)	O
has_plural	bool
=	O
true	int
;	O
if	O
(	O
has_plural	bool
)	O
{	O
multiline_error	function
(	O
xstrdup	function
(	O
""	pointer
)	O
,	O
xstrdup	function
(	O
_	O
(	O
"message catalog has plural form translations\nbut the Tcl message catalog format doesn't support plural handling\n"	pointer
)	O
)	O
)	O
;	O
return	O
1	int
;	O
}	O
}	O
iconv_message_list	function
(	O
mlp	pointer
,	O
canon_encoding	pointer
,	O
po_charset_utf8	pointer
,	O
NULL	O
)	O
;	O
message_list_delete_header_field	function
(	O
mlp	pointer
,	O
"POT-Creation-Date:"	pointer
)	O
;	O
{	O
size_t	long
len	long
;	O
char	O
*	O
frobbed_locale_name	pointer
;	O
char	O
*	O
p	pointer
;	O
char	O
*	O
file_name	pointer
;	O
FILE	struct
*	O
output_file	pointer
;	O
len	long
=	O
strlen	function
(	O
locale_name	pointer
)	O
;	O
frobbed_locale_name	pointer
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
len	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
frobbed_locale_name	pointer
,	O
locale_name	pointer
,	O
len	long
+	O
1	int
)	O
;	O
for	O
(	O
p	pointer
=	O
frobbed_locale_name	pointer
;	O
*	O
p	pointer
!=	O
'\0'	O
;	O
p	pointer
++	O
)	O
if	O
(	O
*	O
p	pointer
>=	O
'A'	O
&&	O
*	O
p	pointer
<=	O
'Z'	O
)	O
*	O
p	pointer
=	O
*	O
p	pointer
-	O
'A'	O
+	O
'a'	O
;	O
else	O
if	O
(	O
*	O
p	pointer
==	O
'.'	O
)	O
{	O
*	O
p	pointer
=	O
'\0'	O
;	O
break	O
;	O
}	O
file_name	pointer
=	O
xconcatenated_filename	function
(	O
directory	pointer
,	O
frobbed_locale_name	pointer
,	O
".msg"	pointer
)	O
;	O
output_file	pointer
=	O
fopen	function
(	O
file_name	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
output_file	pointer
==	O
NULL	O
)	O
{	O
error	function
(	O
0	int
,	O
errno	O
,	O
_	O
(	O
"error while opening \"%s\" for writing"	pointer
)	O
,	O
file_name	pointer
)	O
;	O
freea	function
(	O
frobbed_locale_name	pointer
)	O
;	O
return	O
1	int
;	O
}	O
write_msg	function
(	O
output_file	pointer
,	O
mlp	pointer
,	O
frobbed_locale_name	pointer
)	O
;	O
if	O
(	O
fwriteerror	function
(	O
output_file	pointer
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error while writing \"%s\" file"	pointer
)	O
,	O
file_name	pointer
)	O
;	O
freea	function
(	O
frobbed_locale_name	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
