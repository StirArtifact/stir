static	O
char	O
*	O
pidfile	pointer
;	O
static	O
pid_t	int
current_pid	int
;	O
static	O
int	O
ewraccess	function
(	O
const	O
char	O
*	O
dir	pointer
)	O
{	O
struct	O
stat	struct
st	pointer
;	O
if	O
(	O
stat	struct
(	O
dir	pointer
,	O
&	O
st	pointer
)	O
)	O
return	O
errno	O
;	O
if	O
(	O
(	O
st	pointer
.	O
st_mode	int
&	O
S_IWOTH	O
)	O
||	O
(	O
st	pointer
.	O
st_gid	int
==	O
getegid	function
(	O
)	O
&&	O
(	O
st	pointer
.	O
st_mode	int
&	O
S_IWGRP	O
)	O
)	O
||	O
(	O
st	pointer
.	O
st_uid	int
==	O
geteuid	function
(	O
)	O
&&	O
(	O
st	pointer
.	O
st_mode	int
&	O
S_IWUSR	O
)	O
)	O
)	O
return	O
0	int
;	O
else	O
return	O
EACCES	int
;	O
}	O
static	O
int	O
access_dir	function
(	O
const	O
char	O
*	O
dir	pointer
,	O
uid_t	int
*	O
puid	pointer
)	O
{	O
int	O
ec	int
=	O
ewraccess	function
(	O
dir	pointer
)	O
;	O
if	O
(	O
ec	int
)	O
{	O
if	O
(	O
ec	int
==	O
EACCES	int
&&	O
access	function
(	O
dir	pointer
,	O
W_OK	int
)	O
==	O
0	int
)	O
{	O
uid_t	int
uid	int
=	O
geteuid	function
(	O
)	O
;	O
if	O
(	O
uid	int
&&	O
getuid	function
(	O
)	O
==	O
0	int
&&	O
seteuid	function
(	O
0	int
)	O
==	O
0	int
)	O
{	O
*	O
puid	pointer
=	O
uid	int
;	O
return	O
0	int
;	O
}	O
}	O
}	O
return	O
ec	int
;	O
}	O
int	O
mu_daemon_create_pidfile	function
(	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
int	O
fd	int
;	O
uid_t	int
uid	int
=	O
0	int
;	O
int	O
rc	int
;	O
if	O
(	O
filename	pointer
[	O
0	int
]	O
!=	O
'/'	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pidfile	pointer
)	O
free	function
(	O
pidfile	pointer
)	O
;	O
pidfile	pointer
=	O
strdup	function
(	O
filename	pointer
)	O
;	O
if	O
(	O
!	O
pidfile	pointer
)	O
return	O
ENOMEM	int
;	O
p	pointer
=	O
strrchr	function
(	O
pidfile	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
pidfile	pointer
==	O
p	pointer
)	O
{	O
free	function
(	O
pidfile	pointer
)	O
;	O
pidfile	pointer
=	O
NULL	O
;	O
return	O
EINVAL	int
;	O
}	O
*	O
p	pointer
=	O
0	int
;	O
rc	int
=	O
access_dir	function
(	O
pidfile	pointer
,	O
&	O
uid	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	function
(	O
pidfile	pointer
)	O
;	O
pidfile	pointer
=	O
NULL	O
;	O
return	O
rc	int
;	O
}	O
*	O
p	pointer
=	O
'/'	O
;	O
unlink	function
(	O
pidfile	pointer
)	O
;	O
current_pid	int
=	O
getpid	function
(	O
)	O
;	O
if	O
(	O
(	O
fd	int
=	O
open	function
(	O
pidfile	pointer
,	O
O_WRONLY	int
|	O
O_CREAT	int
|	O
O_TRUNC	int
|	O
O_EXCL	int
,	O
0644	int
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
FILE	struct
*	O
fp	pointer
=	O
fdopen	function
(	O
fd	int
,	O
"w"	pointer
)	O
;	O
if	O
(	O
!	O
fp	pointer
)	O
{	O
rc	int
=	O
errno	O
;	O
free	function
(	O
pidfile	pointer
)	O
;	O
close	pointer
(	O
fd	int
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
fp	pointer
,	O
"%lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
current_pid	int
)	O
;	O
fclose	function
(	O
fp	pointer
)	O
;	O
atexit	function
(	O
mu_daemon_remove_pidfile	function
)	O
;	O
}	O
}	O
else	O
{	O
rc	int
=	O
errno	O
;	O
free	function
(	O
pidfile	pointer
)	O
;	O
pidfile	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
uid	int
)	O
seteuid	function
(	O
uid	int
)	O
;	O
return	O
rc	int
;	O
}	O
void	O
mu_daemon_remove_pidfile	function
(	O
void	O
)	O
{	O
if	O
(	O
getpid	function
(	O
)	O
==	O
current_pid	int
)	O
{	O
int	O
rc	int
;	O
uid_t	int
uid	int
=	O
0	int
;	O
char	O
*	O
p	pointer
=	O
strrchr	function
(	O
pidfile	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
pidfile	pointer
==	O
p	pointer
)	O
{	O
abort	function
(	O
)	O
;	O
}	O
*	O
p	pointer
=	O
0	int
;	O
rc	int
=	O
access_dir	function
(	O
pidfile	pointer
,	O
&	O
uid	int
)	O
;	O
*	O
p	pointer
=	O
'/'	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
unlink	function
(	O
pidfile	pointer
)	O
&&	O
errno	O
!=	O
ENOENT	int
)	O
rc	int
=	O
errno	O
;	O
else	O
rc	int
=	O
0	int
;	O
}	O
if	O
(	O
rc	int
)	O
mu_error	function
(	O
_	O
(	O
"cannot remove pidfile %s: %s"	pointer
)	O
,	O
pidfile	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
free	function
(	O
pidfile	pointer
)	O
;	O
pidfile	pointer
=	O
NULL	O
;	O
}	O
}	O
