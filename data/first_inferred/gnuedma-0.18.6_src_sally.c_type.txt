typedef	O
struct	O
client_t	struct
{	O
int	O
s	int
;	O
char	O
*	O
buffer	pointer
;	O
int	O
off	int
;	O
int	O
len	int
;	O
}	O
CLIENT	struct
;	O
static	O
CLIENT	struct
*	O
c	pointer
=	O
NULL	O
;	O
static	O
int	O
n_clients	int
=	O
0	int
;	O
static	O
int	O
*	O
shm_id	pointer
=	O
NULL	O
;	O
static	O
int	O
n_shm	int
=	O
0	int
;	O
static	O
int	O
c_shm	int
=	O
0	int
;	O
static	O
int	O
_daemon	int
=	O
0	int
;	O
int	O
eprintf	function
(	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
int	O
res	int
=	O
0	int
;	O
va_list	pointer
p	pointer
;	O
va_start	O
(	O
p	pointer
,	O
fmt	pointer
)	O
;	O
if	O
(	O
_daemon	int
)	O
vsyslog	function
(	O
LOG_INFO	int
,	O
fmt	pointer
,	O
p	pointer
)	O
;	O
else	O
{	O
res	int
=	O
vprintf	function
(	O
fmt	pointer
,	O
p	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
va_end	O
(	O
p	pointer
)	O
;	O
return	O
res	int
;	O
}	O
int	O
eprintf_err	function
(	O
char	O
*	O
id	pointer
,	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
int	O
res	int
=	O
0	int
;	O
va_list	pointer
p	pointer
;	O
va_start	O
(	O
p	pointer
,	O
fmt	pointer
)	O
;	O
if	O
(	O
_daemon	int
)	O
{	O
vsyslog	function
(	O
LOG_ERR	int
,	O
fmt	pointer
,	O
p	pointer
)	O
;	O
syslog	function
(	O
LOG_ERR	int
,	O
"%s: %m"	pointer
,	O
id	pointer
)	O
;	O
}	O
else	O
{	O
res	int
=	O
vfprintf	function
(	O
stderr	pointer
,	O
fmt	pointer
,	O
p	pointer
)	O
;	O
perror	function
(	O
id	pointer
)	O
;	O
}	O
va_end	O
(	O
p	pointer
)	O
;	O
return	O
res	int
;	O
}	O
int	O
daemon_one_instance	function
(	O
)	O
{	O
int	O
fd	int
,	O
len	int
;	O
char	O
pid_str	array
[	O
32	int
]	O
;	O
if	O
(	O
(	O
fd	int
=	O
open	function
(	O
LOCK_FILE	pointer
,	O
O_RDWR	int
|	O
O_CREAT	int
,	O
LOCKMODE	O
)	O
)	O
<	O
0	int
)	O
{	O
eprintf_err	function
(	O
"open:"	pointer
,	O
"Fatal: Cannot create lock file (%s)"	pointer
,	O
LOCK_FILE	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
(	O
flock	struct
(	O
fd	int
,	O
LOCK_EX	int
|	O
LOCK_NB	int
)	O
)	O
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
EWOULDBLOCK	O
)	O
{	O
eprintf	function
(	O
"Sally already running..."	pointer
)	O
;	O
close	pointer
(	O
fd	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
eprintf_err	function
(	O
"flock:"	pointer
,	O
"Fatal: Cannot lock file."	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
ftruncate	function
(	O
fd	int
,	O
0	int
)	O
;	O
len	int
=	O
snprintf	function
(	O
pid_str	array
,	O
32	int
,	O
"%ld"	pointer
,	O
(	O
long	O
)	O
getpid	function
(	O
)	O
)	O
;	O
write	pointer
(	O
fd	int
,	O
pid_str	array
,	O
len	int
)	O
;	O
eprintf	function
(	O
"Run, Sally run!"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
void	O
daemon_closeall	function
(	O
int	O
fd	int
)	O
{	O
int	O
fdlimit	int
=	O
sysconf	function
(	O
_SC_OPEN_MAX	int
)	O
;	O
while	O
(	O
fd	int
<	O
fdlimit	int
)	O
close	pointer
(	O
fd	int
++	O
)	O
;	O
}	O
int	O
daemon_go	function
(	O
)	O
{	O
umask	function
(	O
0	int
)	O
;	O
switch	O
(	O
fork	function
(	O
)	O
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
-	O
1	int
:	O
{	O
perror	function
(	O
"fork:"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
default	O
:	O
_exit	function
(	O
0	int
)	O
;	O
}	O
setsid	function
(	O
)	O
;	O
switch	O
(	O
fork	function
(	O
)	O
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
-	O
1	int
:	O
{	O
perror	function
(	O
"fork:"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
default	O
:	O
_exit	function
(	O
0	int
)	O
;	O
}	O
chdir	function
(	O
"/"	pointer
)	O
;	O
daemon_closeall	function
(	O
0	int
)	O
;	O
open	function
(	O
"/dev/null"	pointer
,	O
O_RDWR	int
)	O
;	O
dup	function
(	O
0	int
)	O
;	O
dup	function
(	O
0	int
)	O
;	O
openlog	function
(	O
"sally"	pointer
,	O
LOG_CONS	int
,	O
LOG_DAEMON	O
)	O
;	O
syslog	function
(	O
LOG_INFO	int
,	O
"sally runing around."	pointer
)	O
;	O
_daemon	int
=	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
find_id	function
(	O
int	O
id	pointer
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n_shm	int
;	O
i	int
++	O
)	O
if	O
(	O
shm_id	pointer
[	O
i	int
]	O
==	O
id	pointer
)	O
return	O
i	int
;	O
return	O
-	O
1	int
;	O
}	O
int	O
find_shm_hole	function
(	O
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
c_shm	int
;	O
i	int
++	O
)	O
if	O
(	O
shm_id	pointer
[	O
i	int
]	O
==	O
-	O
1	int
)	O
return	O
i	int
;	O
return	O
-	O
1	int
;	O
}	O
int	O
find_hole	function
(	O
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n_clients	int
;	O
i	int
++	O
)	O
if	O
(	O
c	pointer
[	O
i	int
]	O
.	O
s	int
==	O
-	O
1	int
)	O
return	O
i	int
;	O
return	O
-	O
1	int
;	O
}	O
int	O
add_client	function
(	O
int	O
s	int
)	O
{	O
int	O
indx	int
;	O
if	O
(	O
(	O
indx	int
=	O
find_hole	function
(	O
)	O
)	O
<	O
0	int
)	O
{	O
if	O
(	O
(	O
c	pointer
=	O
realloc	function
(	O
c	pointer
,	O
sizeof	O
(	O
CLIENT	struct
)	O
*	O
(	O
n_clients	int
+	O
1	int
)	O
)	O
)	O
==	O
NULL	O
)	O
{	O
eprintf_err	function
(	O
"realloc:"	pointer
,	O
"Cannot allocate memory for new client..."	pointer
)	O
;	O
close	pointer
(	O
s	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
indx	int
=	O
n_clients	int
;	O
if	O
(	O
(	O
c	pointer
[	O
indx	int
]	O
.	O
buffer	pointer
=	O
malloc	function
(	O
BUF_INC	int
)	O
)	O
==	O
NULL	O
)	O
{	O
eprintf_err	function
(	O
"malloc:"	pointer
,	O
"Cannot allocate memory for client buffer"	pointer
)	O
;	O
c	pointer
[	O
indx	int
]	O
.	O
s	int
=	O
-	O
1	int
;	O
return	O
-	O
1	int
;	O
}	O
n_clients	int
++	O
;	O
}	O
c	pointer
[	O
indx	int
]	O
.	O
s	int
=	O
s	int
;	O
c	pointer
[	O
indx	int
]	O
.	O
len	int
=	O
BUF_INC	int
;	O
memset	function
(	O
c	pointer
[	O
indx	int
]	O
.	O
buffer	pointer
,	O
0	int
,	O
c	pointer
[	O
indx	int
]	O
.	O
len	int
)	O
;	O
c	pointer
[	O
indx	int
]	O
.	O
off	int
=	O
0	int
;	O
return	O
indx	int
;	O
}	O
key_t	int
salloc	function
(	O
int	O
size	int
,	O
char	O
*	O
n	pointer
)	O
{	O
int	O
a	int
,	O
shmflg	int
,	O
f	int
,	O
indx	int
;	O
char	O
name	array
[	O
1024	int
]	O
;	O
key_t	int
k	int
;	O
struct	O
stat	struct
buf	struct
;	O
snprintf	function
(	O
name	array
,	O
1024	int
,	O
"%s/%s"	pointer
,	O
TMPDIR	pointer
,	O
n	pointer
)	O
;	O
if	O
(	O
stat	struct
(	O
name	array
,	O
&	O
buf	struct
)	O
<	O
0	int
)	O
{	O
f	int
=	O
open	function
(	O
name	array
,	O
O_WRONLY	int
|	O
O_CREAT	int
|	O
O_TRUNC	int
)	O
;	O
if	O
(	O
f	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
errno	O
!=	O
EEXIST	int
)	O
{	O
perror	function
(	O
"Create File"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
chmod	function
(	O
name	array
,	O
S_IRWXU	O
|	O
S_IRWXG	O
|	O
S_IRWXO	O
)	O
;	O
}	O
else	O
f	int
=	O
-	O
1	int
;	O
if	O
(	O
(	O
k	int
=	O
ftok	function
(	O
name	array
,	O
0	int
)	O
)	O
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"[edma_salloc] (ftok)"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
shmflg	int
=	O
0	int
;	O
a	int
=	O
shmget	function
(	O
k	int
,	O
size	int
,	O
IPC_CREAT	int
|	O
0777	int
)	O
;	O
eprintf	function
(	O
"Getting shared memory with key: %d "	pointer
"(id: %d str: '%s' size:%d)\n"	pointer
,	O
k	int
,	O
a	int
,	O
n	pointer
,	O
size	int
)	O
;	O
if	O
(	O
(	O
a	int
==	O
-	O
1	int
)	O
&&	O
(	O
errno	O
!=	O
EEXIST	int
)	O
)	O
{	O
eprintf_err	function
(	O
"shmget:"	pointer
,	O
"[salloc] ERROR in shared block : %s "	pointer
"(key:%d|size:%d)"	pointer
,	O
name	array
,	O
k	int
,	O
size	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
f	int
>=	O
0	int
)	O
close	pointer
(	O
f	int
)	O
;	O
if	O
(	O
(	O
indx	int
=	O
find_id	function
(	O
a	int
)	O
)	O
<	O
0	int
)	O
{	O
if	O
(	O
(	O
indx	int
=	O
find_shm_hole	function
(	O
)	O
)	O
<	O
0	int
)	O
{	O
if	O
(	O
(	O
shm_id	pointer
=	O
realloc	function
(	O
shm_id	pointer
,	O
sizeof	O
(	O
int	O
)	O
*	O
(	O
c_shm	int
+	O
1	int
)	O
)	O
)	O
==	O
NULL	O
)	O
{	O
eprintf_err	function
(	O
"realloc:"	pointer
,	O
"Cannot allocate memory for shared ids"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
indx	int
=	O
c_shm	int
;	O
c_shm	int
++	O
;	O
}	O
n_shm	int
++	O
;	O
}	O
shm_id	pointer
[	O
indx	int
]	O
=	O
a	int
;	O
return	O
k	int
;	O
}	O
void	O
_process_cmd	function
(	O
int	O
i	int
,	O
char	O
*	O
aux	pointer
)	O
{	O
int	O
size	int
,	O
len	int
;	O
char	O
key	array
[	O
1024	int
]	O
,	O
buffer	pointer
[	O
1024	int
]	O
;	O
key_t	int
_the_key	int
;	O
if	O
(	O
strncasecmp	function
(	O
aux	pointer
,	O
"SALLOC"	pointer
,	O
6	int
)	O
==	O
0	int
)	O
{	O
sscanf	function
(	O
aux	pointer
,	O
"SALLOC %d %s"	pointer
,	O
&	O
size	int
,	O
key	array
)	O
;	O
_the_key	int
=	O
salloc	function
(	O
size	int
,	O
key	array
)	O
;	O
len	int
=	O
snprintf	function
(	O
buffer	pointer
,	O
1024	int
,	O
"+SALLOC %d\n"	pointer
,	O
_the_key	int
)	O
;	O
}	O
if	O
(	O
(	O
write	pointer
(	O
c	pointer
[	O
i	int
]	O
.	O
s	int
,	O
buffer	pointer
,	O
len	int
)	O
)	O
<	O
0	int
)	O
{	O
eprintf	function
(	O
"Removing client %d from list"	pointer
,	O
i	int
)	O
;	O
close	pointer
(	O
c	pointer
[	O
i	int
]	O
.	O
s	int
)	O
;	O
c	pointer
[	O
i	int
]	O
.	O
s	int
=	O
-	O
1	int
;	O
c	pointer
[	O
i	int
]	O
.	O
off	int
=	O
0	int
;	O
c	pointer
[	O
i	int
]	O
.	O
len	int
=	O
0	int
;	O
n_clients	int
--	O
;	O
}	O
return	O
;	O
}	O
int	O
process_client	function
(	O
int	O
i	int
)	O
{	O
int	O
r	int
;	O
int	O
process	int
=	O
1	int
;	O
char	O
*	O
aux	pointer
,	O
*	O
aux1	pointer
;	O
if	O
(	O
(	O
i	int
<	O
0	int
)	O
||	O
(	O
i	int
>	O
n_clients	int
)	O
)	O
{	O
eprintf_err	function
(	O
"internal:"	pointer
,	O
"Invalid index %d. "	pointer
"Client processing aborted\n"	pointer
,	O
i	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
r	int
=	O
read	pointer
(	O
c	pointer
[	O
i	int
]	O
.	O
s	int
,	O
c	pointer
[	O
i	int
]	O
.	O
buffer	pointer
+	O
c	pointer
[	O
i	int
]	O
.	O
off	int
,	O
c	pointer
[	O
i	int
]	O
.	O
len	int
-	O
c	pointer
[	O
i	int
]	O
.	O
off	int
)	O
)	O
<=	O
0	int
)	O
{	O
eprintf_err	function
(	O
"read:"	pointer
,	O
"Closing connection for client %d\n"	pointer
,	O
i	int
)	O
;	O
close	pointer
(	O
c	pointer
[	O
i	int
]	O
.	O
s	int
)	O
;	O
c	pointer
[	O
i	int
]	O
.	O
s	int
=	O
-	O
1	int
;	O
c	pointer
[	O
i	int
]	O
.	O
off	int
=	O
0	int
;	O
c	pointer
[	O
i	int
]	O
.	O
len	int
=	O
0	int
;	O
n_clients	int
--	O
;	O
return	O
-	O
1	int
;	O
}	O
c	pointer
[	O
i	int
]	O
.	O
off	int
+=	O
r	int
;	O
aux1	pointer
=	O
c	pointer
[	O
i	int
]	O
.	O
buffer	pointer
;	O
while	O
(	O
process	int
)	O
{	O
if	O
(	O
(	O
aux	pointer
=	O
strchr	function
(	O
aux1	pointer
,	O
'\n'	O
)	O
)	O
==	O
NULL	O
)	O
{	O
process	int
=	O
0	int
;	O
continue	O
;	O
}	O
*	O
aux	pointer
=	O
0	int
;	O
_process_cmd	function
(	O
i	int
,	O
aux1	pointer
)	O
;	O
c	pointer
[	O
i	int
]	O
.	O
len	int
-=	O
(	O
strlen	function
(	O
aux1	pointer
)	O
)	O
;	O
aux1	pointer
=	O
aux	pointer
+	O
1	int
;	O
}	O
memmove	function
(	O
c	pointer
[	O
i	int
]	O
.	O
buffer	pointer
,	O
aux1	pointer
,	O
c	pointer
[	O
i	int
]	O
.	O
len	int
)	O
;	O
c	pointer
[	O
i	int
]	O
.	O
off	int
=	O
0	int
;	O
fflush	function
(	O
NULL	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
gc_cnt	int
=	O
0	int
;	O
int	O
sally_gc	function
(	O
)	O
{	O
struct	O
shmid_ds	struct
ds	short
;	O
int	O
i	int
,	O
did_something	int
;	O
did_something	int
=	O
0	int
;	O
if	O
(	O
n_shm	int
==	O
0	int
)	O
return	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
GC_LOOP	int
;	O
i	int
++	O
)	O
{	O
gc_cnt	int
++	O
;	O
if	O
(	O
gc_cnt	int
>=	O
c_shm	int
)	O
gc_cnt	int
=	O
0	int
;	O
if	O
(	O
shm_id	pointer
[	O
gc_cnt	int
]	O
<	O
0	int
)	O
continue	O
;	O
if	O
(	O
(	O
shmctl	function
(	O
shm_id	pointer
[	O
gc_cnt	int
]	O
,	O
IPC_STAT	int
,	O
&	O
ds	short
)	O
)	O
<	O
0	int
)	O
{	O
eprintf_err	function
(	O
"shmctl:"	pointer
,	O
"Error accessing is %d. "	pointer
"Removing from list.\n"	pointer
,	O
shm_id	pointer
[	O
gc_cnt	int
]	O
)	O
;	O
shm_id	pointer
[	O
gc_cnt	int
]	O
=	O
-	O
1	int
;	O
n_shm	int
--	O
;	O
continue	O
;	O
}	O
if	O
(	O
ds	short
.	O
shm_nattch	long
==	O
0	int
)	O
{	O
eprintf	function
(	O
"Garbage Collector: Deleting id %d\n"	pointer
,	O
shm_id	pointer
[	O
gc_cnt	int
]	O
)	O
;	O
if	O
(	O
(	O
shmctl	function
(	O
shm_id	pointer
[	O
gc_cnt	int
]	O
,	O
IPC_RMID	int
,	O
&	O
ds	short
)	O
)	O
<	O
0	int
)	O
{	O
eprintf_err	function
(	O
"shmctl:"	pointer
,	O
"Cannot delete id %d"	pointer
,	O
shm_id	pointer
[	O
gc_cnt	int
]	O
)	O
;	O
continue	O
;	O
}	O
shm_id	pointer
[	O
gc_cnt	int
]	O
=	O
-	O
1	int
;	O
n_shm	int
--	O
;	O
did_something	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
did_something	int
)	O
{	O
eprintf	function
(	O
"STATS: %d clients and %d shared segments "	pointer
"(cap: %d. gc_cnt: %d)\n"	pointer
,	O
n_clients	int
,	O
n_shm	int
,	O
c_shm	int
,	O
gc_cnt	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
handler	function
(	O
int	O
s	int
)	O
{	O
unlink	function
(	O
SOCK_PATH	pointer
)	O
;	O
unlink	function
(	O
LOCK_FILE	pointer
)	O
;	O
eprintf	function
(	O
"Sally stopping"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
fd_set	struct
rfds	struct
;	O
struct	O
timeval	struct
tv	struct
;	O
int	O
i	int
,	O
max	int
,	O
n_res	int
,	O
len	int
,	O
j	int
;	O
int	O
loop4ever	int
=	O
1	int
;	O
struct	O
sockaddr_in	struct
client	struct
;	O
socklen_t	int
sa_len	int
=	O
sizeof	O
(	O
struct	O
sockaddr_in	struct
)	O
;	O
int	O
s	int
,	O
s2	int
;	O
struct	O
sockaddr_un	struct
local	struct
;	O
if	O
(	O
argc	int
>	O
1	int
&&	O
!	O
strcasecmp	function
(	O
argv	array
[	O
1	int
]	O
,	O
"--daemon"	pointer
)	O
)	O
{	O
if	O
(	O
daemon_go	function
(	O
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Cannot start in daemon mode...\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
daemon_one_instance	function
(	O
)	O
;	O
signal	function
(	O
SIGQUIT	int
,	O
handler	function
)	O
;	O
signal	function
(	O
SIGKILL	int
,	O
handler	function
)	O
;	O
signal	function
(	O
SIGINT	int
,	O
handler	function
)	O
;	O
signal	function
(	O
SIGTERM	int
,	O
handler	function
)	O
;	O
signal	function
(	O
SIGSEGV	int
,	O
handler	function
)	O
;	O
if	O
(	O
(	O
s	int
=	O
socket	function
(	O
AF_UNIX	O
,	O
SOCK_STREAM	int
,	O
0	int
)	O
)	O
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"socket"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
local	struct
.	O
sun_family	short
=	O
AF_UNIX	O
;	O
strcpy	function
(	O
local	struct
.	O
sun_path	array
,	O
SOCK_PATH	pointer
)	O
;	O
unlink	function
(	O
local	struct
.	O
sun_path	array
)	O
;	O
len	int
=	O
strlen	function
(	O
local	struct
.	O
sun_path	array
)	O
+	O
sizeof	O
(	O
local	struct
.	O
sun_family	short
)	O
;	O
if	O
(	O
bind	function
(	O
s	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
local	struct
,	O
len	int
)	O
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"bind"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
listen	function
(	O
s	int
,	O
5	int
)	O
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"listen"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
chmod	function
(	O
SOCK_PATH	pointer
,	O
0777	int
)	O
;	O
loop4ever	int
=	O
1	int
;	O
while	O
(	O
loop4ever	int
)	O
{	O
FD_ZERO	O
(	O
&	O
rfds	struct
)	O
;	O
max	int
=	O
s	int
+	O
1	int
;	O
FD_SET	O
(	O
s	int
,	O
&	O
rfds	struct
)	O
;	O
j	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
j	int
<	O
n_clients	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
c	pointer
[	O
i	int
]	O
.	O
s	int
<	O
0	int
)	O
continue	O
;	O
FD_SET	O
(	O
c	pointer
[	O
i	int
]	O
.	O
s	int
,	O
&	O
rfds	struct
)	O
;	O
if	O
(	O
c	pointer
[	O
i	int
]	O
.	O
s	int
>=	O
max	int
)	O
max	int
=	O
c	pointer
[	O
i	int
]	O
.	O
s	int
+	O
1	int
;	O
j	int
++	O
;	O
}	O
tv	struct
.	O
tv_sec	long
=	O
4	int
;	O
tv	struct
.	O
tv_usec	long
=	O
0	int
;	O
if	O
(	O
(	O
n_res	int
=	O
select	function
(	O
max	int
,	O
&	O
rfds	struct
,	O
NULL	O
,	O
NULL	O
,	O
&	O
tv	struct
)	O
)	O
<	O
0	int
)	O
{	O
eprintf_err	function
(	O
"select:"	pointer
,	O
"Error on select"	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
n_res	int
)	O
{	O
if	O
(	O
FD_ISSET	O
(	O
s	int
,	O
&	O
rfds	struct
)	O
)	O
{	O
if	O
(	O
(	O
s2	int
=	O
accept	function
(	O
s	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
client	struct
,	O
&	O
sa_len	int
)	O
)	O
<	O
0	int
)	O
{	O
eprintf_err	function
(	O
"accept:"	pointer
,	O
"Error accepting connection"	pointer
)	O
;	O
break	O
;	O
}	O
add_client	function
(	O
s2	int
)	O
;	O
eprintf	function
(	O
"New client connected (%d clients)"	pointer
,	O
n_clients	int
)	O
;	O
}	O
j	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
j	int
<	O
n_clients	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
c	pointer
[	O
i	int
]	O
.	O
s	int
==	O
-	O
1	int
)	O
continue	O
;	O
j	int
++	O
;	O
if	O
(	O
FD_ISSET	O
(	O
c	pointer
[	O
i	int
]	O
.	O
s	int
,	O
&	O
rfds	struct
)	O
)	O
{	O
process_client	function
(	O
i	int
)	O
;	O
}	O
}	O
}	O
else	O
{	O
sally_gc	function
(	O
)	O
;	O
}	O
}	O
}	O
return	O
0	int
;	O
}	O
