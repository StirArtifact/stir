static	O
void	O
_imap_list_free	function
(	O
void	O
*	O
ptr	pointer
)	O
{	O
struct	O
imap_list_element	struct
*	O
elt	pointer
=	O
ptr	pointer
;	O
switch	O
(	O
elt	pointer
->	O
type	int
)	O
{	O
case	O
imap_eltype_string	int
:	O
free	function
(	O
elt	pointer
->	O
v	union
.	O
string	pointer
)	O
;	O
break	O
;	O
case	O
imap_eltype_list	int
:	O
mu_list_destroy	function
(	O
&	O
elt	pointer
->	O
v	union
.	O
list	pointer
)	O
;	O
}	O
free	function
(	O
ptr	pointer
)	O
;	O
}	O
static	O
int	O
_mu_imap_response_list_create	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
mu_list_t	pointer
*	O
plist	pointer
)	O
{	O
mu_list_t	pointer
list	pointer
;	O
int	O
status	int
=	O
mu_list_create	function
(	O
&	O
list	pointer
)	O
;	O
MU_IMAP_CHECK_ERROR	O
(	O
imap	pointer
,	O
status	int
)	O
;	O
mu_list_set_destroy_item	function
(	O
list	pointer
,	O
_imap_list_free	function
)	O
;	O
*	O
plist	pointer
=	O
list	pointer
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
imap_list_element	struct
*	O
_new_imap_list_element	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
enum	O
imap_eltype	enum
type	int
)	O
{	O
struct	O
imap_list_element	struct
*	O
elt	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
elt	pointer
)	O
)	O
;	O
if	O
(	O
!	O
elt	pointer
)	O
{	O
imap	pointer
->	O
client_state	enum
=	O
MU_IMAP_CLIENT_ERROR	int
;	O
}	O
else	O
elt	pointer
->	O
type	int
=	O
type	int
;	O
return	O
elt	pointer
;	O
}	O
struct	O
parsebuf	struct
{	O
mu_imap_t	pointer
pb_imap	pointer
;	O
size_t	long
pb_count	long
;	O
char	O
*	O
*	O
pb_arr	pointer
;	O
int	O
pb_err	int
;	O
int	O
pb_inlist	int
;	O
}	O
;	O
static	O
void	O
parsebuf_init	function
(	O
struct	O
parsebuf	struct
*	O
pb	pointer
,	O
mu_imap_t	pointer
imap	pointer
)	O
{	O
memset	function
(	O
pb	pointer
,	O
0	int
,	O
sizeof	O
*	O
pb	pointer
)	O
;	O
pb	pointer
->	O
pb_imap	pointer
=	O
imap	pointer
;	O
}	O
static	O
int	O
parsebuf_advance	function
(	O
struct	O
parsebuf	struct
*	O
pb	pointer
)	O
{	O
if	O
(	O
pb	pointer
->	O
pb_count	long
==	O
0	int
)	O
return	O
MU_ERR_NOENT	O
;	O
pb	pointer
->	O
pb_count	long
--	O
;	O
pb	pointer
->	O
pb_arr	pointer
++	O
;	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
parsebuf_gettok	function
(	O
struct	O
parsebuf	struct
*	O
pb	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
if	O
(	O
pb	pointer
->	O
pb_count	long
==	O
0	int
)	O
return	O
NULL	O
;	O
p	pointer
=	O
*	O
pb	pointer
->	O
pb_arr	pointer
;	O
parsebuf_advance	function
(	O
pb	pointer
)	O
;	O
return	O
p	pointer
;	O
}	O
static	O
char	O
*	O
parsebuf_peek	function
(	O
struct	O
parsebuf	struct
*	O
pb	pointer
)	O
{	O
if	O
(	O
pb	pointer
->	O
pb_count	long
==	O
0	int
)	O
return	O
NULL	O
;	O
return	O
*	O
pb	pointer
->	O
pb_arr	pointer
;	O
}	O
static	O
void	O
parsebuf_seterr	function
(	O
struct	O
parsebuf	struct
*	O
pb	pointer
,	O
int	O
err	int
)	O
{	O
pb	pointer
->	O
pb_err	int
=	O
err	int
;	O
}	O
static	O
struct	O
imap_list_element	struct
*	O
_parse_element	function
(	O
struct	O
parsebuf	struct
*	O
pb	pointer
)	O
;	O
static	O
struct	O
imap_list_element	struct
*	O
_parse_list	function
(	O
struct	O
parsebuf	struct
*	O
pb	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
imap_list_element	struct
*	O
elt	pointer
,	O
*	O
list_elt	pointer
;	O
elt	pointer
=	O
_new_imap_list_element	function
(	O
pb	pointer
->	O
pb_imap	pointer
,	O
imap_eltype_list	int
)	O
;	O
if	O
(	O
!	O
elt	pointer
)	O
{	O
parsebuf_seterr	function
(	O
pb	pointer
,	O
ENOMEM	int
)	O
;	O
return	O
NULL	O
;	O
}	O
rc	int
=	O
_mu_imap_response_list_create	function
(	O
pb	pointer
->	O
pb_imap	pointer
,	O
&	O
elt	pointer
->	O
v	union
.	O
list	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	function
(	O
elt	pointer
)	O
;	O
parsebuf_seterr	function
(	O
pb	pointer
,	O
rc	int
)	O
;	O
return	O
NULL	O
;	O
}	O
while	O
(	O
(	O
list_elt	pointer
=	O
_parse_element	function
(	O
pb	pointer
)	O
)	O
)	O
mu_list_append	function
(	O
elt	pointer
->	O
v	union
.	O
list	pointer
,	O
list_elt	pointer
)	O
;	O
return	O
elt	pointer
;	O
}	O
static	O
struct	O
imap_list_element	struct
*	O
_parse_element	function
(	O
struct	O
parsebuf	struct
*	O
pb	pointer
)	O
{	O
struct	O
imap_list_element	struct
*	O
elt	pointer
;	O
char	O
*	O
tok	int
;	O
if	O
(	O
pb	pointer
->	O
pb_err	int
)	O
return	O
NULL	O
;	O
tok	int
=	O
parsebuf_gettok	function
(	O
pb	pointer
)	O
;	O
if	O
(	O
!	O
tok	int
)	O
{	O
if	O
(	O
pb	pointer
->	O
pb_inlist	int
)	O
parsebuf_seterr	function
(	O
pb	pointer
,	O
MU_ERR_PARSE	O
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
IS_LBRACE	O
(	O
tok	int
)	O
)	O
{	O
tok	int
=	O
parsebuf_peek	function
(	O
pb	pointer
)	O
;	O
if	O
(	O
!	O
tok	int
)	O
{	O
parsebuf_seterr	function
(	O
pb	pointer
,	O
MU_ERR_PARSE	O
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
IS_RBRACE	O
(	O
tok	int
)	O
)	O
{	O
parsebuf_gettok	function
(	O
pb	pointer
)	O
;	O
elt	pointer
=	O
_new_imap_list_element	function
(	O
pb	pointer
->	O
pb_imap	pointer
,	O
imap_eltype_list	int
)	O
;	O
if	O
(	O
!	O
elt	pointer
)	O
{	O
parsebuf_seterr	function
(	O
pb	pointer
,	O
ENOMEM	int
)	O
;	O
return	O
NULL	O
;	O
}	O
elt	pointer
->	O
v	union
.	O
list	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
pb	pointer
->	O
pb_inlist	int
++	O
;	O
elt	pointer
=	O
_parse_list	function
(	O
pb	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
IS_RBRACE	O
(	O
tok	int
)	O
)	O
{	O
if	O
(	O
pb	pointer
->	O
pb_inlist	int
)	O
pb	pointer
->	O
pb_inlist	int
--	O
;	O
else	O
parsebuf_seterr	function
(	O
pb	pointer
,	O
MU_ERR_PARSE	O
)	O
;	O
return	O
NULL	O
;	O
}	O
else	O
if	O
(	O
IS_NIL	O
(	O
tok	int
)	O
)	O
{	O
elt	pointer
=	O
_new_imap_list_element	function
(	O
pb	pointer
->	O
pb_imap	pointer
,	O
imap_eltype_list	int
)	O
;	O
if	O
(	O
!	O
elt	pointer
)	O
{	O
parsebuf_seterr	function
(	O
pb	pointer
,	O
ENOMEM	int
)	O
;	O
return	O
NULL	O
;	O
}	O
elt	pointer
->	O
v	union
.	O
list	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
char	O
*	O
s	pointer
;	O
elt	pointer
=	O
_new_imap_list_element	function
(	O
pb	pointer
->	O
pb_imap	pointer
,	O
imap_eltype_string	int
)	O
;	O
if	O
(	O
!	O
elt	pointer
)	O
{	O
parsebuf_seterr	function
(	O
pb	pointer
,	O
ENOMEM	int
)	O
;	O
return	O
NULL	O
;	O
}	O
s	pointer
=	O
strdup	function
(	O
tok	int
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
{	O
free	function
(	O
elt	pointer
)	O
;	O
parsebuf_seterr	function
(	O
pb	pointer
,	O
ENOMEM	int
)	O
;	O
return	O
NULL	O
;	O
}	O
elt	pointer
->	O
v	union
.	O
string	pointer
=	O
s	pointer
;	O
}	O
return	O
elt	pointer
;	O
}	O
int	O
_mu_imap_untagged_response_to_list	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
mu_list_t	pointer
*	O
plist	pointer
)	O
{	O
struct	O
imap_list_element	struct
*	O
elt	pointer
;	O
struct	O
parsebuf	struct
pb	pointer
;	O
parsebuf_init	function
(	O
&	O
pb	pointer
,	O
imap	pointer
)	O
;	O
mu_imapio_get_words	function
(	O
imap	pointer
->	O
io	pointer
,	O
&	O
pb	pointer
.	O
pb_count	long
,	O
&	O
pb	pointer
.	O
pb_arr	pointer
)	O
;	O
parsebuf_advance	function
(	O
&	O
pb	pointer
)	O
;	O
elt	pointer
=	O
_parse_list	function
(	O
&	O
pb	pointer
)	O
;	O
if	O
(	O
pb	pointer
.	O
pb_err	int
)	O
{	O
if	O
(	O
elt	pointer
)	O
_imap_list_free	function
(	O
elt	pointer
)	O
;	O
imap	pointer
->	O
client_state	enum
=	O
MU_IMAP_CLIENT_ERROR	int
;	O
return	O
pb	pointer
.	O
pb_err	int
;	O
}	O
*	O
plist	pointer
=	O
elt	pointer
->	O
v	union
.	O
list	pointer
;	O
free	function
(	O
elt	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
_mu_imap_list_element_is_string	function
(	O
struct	O
imap_list_element	struct
*	O
elt	pointer
,	O
const	O
char	O
*	O
str	pointer
)	O
{	O
if	O
(	O
elt	pointer
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
0	int
;	O
return	O
strcmp	function
(	O
elt	pointer
->	O
v	union
.	O
string	pointer
,	O
str	pointer
)	O
==	O
0	int
;	O
}	O
int	O
_mu_imap_list_element_is_nil	function
(	O
struct	O
imap_list_element	struct
*	O
elt	pointer
)	O
{	O
return	O
elt	pointer
->	O
type	int
==	O
imap_eltype_list	int
&&	O
mu_list_is_empty	function
(	O
elt	pointer
->	O
v	union
.	O
list	pointer
)	O
;	O
}	O
struct	O
imap_list_element	struct
*	O
_mu_imap_list_at	function
(	O
mu_list_t	pointer
list	pointer
,	O
int	O
idx	int
)	O
{	O
struct	O
imap_list_element	struct
*	O
arg	pointer
;	O
int	O
rc	int
=	O
mu_list_get	function
(	O
list	pointer
,	O
idx	int
,	O
(	O
void	O
*	O
)	O
&	O
arg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s:%d: cannot get list element: %s"	pointer
,	O
__FILE__	O
,	O
__LINE__	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
return	O
arg	pointer
;	O
}	O
int	O
_mu_imap_list_nth_element_is_string	function
(	O
mu_list_t	pointer
list	pointer
,	O
size_t	long
n	long
,	O
const	O
char	O
*	O
str	pointer
)	O
{	O
struct	O
imap_list_element	struct
*	O
elt	pointer
=	O
_mu_imap_list_at	function
(	O
list	pointer
,	O
n	long
)	O
;	O
return	O
elt	pointer
&&	O
elt	pointer
->	O
type	int
==	O
imap_eltype_string	int
&&	O
strcmp	function
(	O
elt	pointer
->	O
v	union
.	O
string	pointer
,	O
str	pointer
)	O
==	O
0	int
;	O
}	O
int	O
_mu_imap_list_nth_element_is_string_ci	function
(	O
mu_list_t	pointer
list	pointer
,	O
size_t	long
n	long
,	O
const	O
char	O
*	O
str	pointer
)	O
{	O
struct	O
imap_list_element	struct
*	O
elt	pointer
=	O
_mu_imap_list_at	function
(	O
list	pointer
,	O
n	long
)	O
;	O
return	O
elt	pointer
&&	O
elt	pointer
->	O
type	int
==	O
imap_eltype_string	int
&&	O
mu_c_strcasecmp	function
(	O
elt	pointer
->	O
v	union
.	O
string	pointer
,	O
str	pointer
)	O
==	O
0	int
;	O
}	O
