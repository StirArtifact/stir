void	O
mpn_mod_1s_3p_cps	O
(	O
mp_limb_t	long
cps	array
[	O
6	int
]	O
,	O
mp_limb_t	long
b	int
)	O
{	O
mp_limb_t	long
bi	long
;	O
mp_limb_t	long
B1modb	long
,	O
B2modb	long
,	O
B3modb	long
,	O
B4modb	long
;	O
int	O
cnt	int
;	O
ASSERT	O
(	O
b	int
<=	O
(	O
~	O
(	O
mp_limb_t	long
)	O
0	int
)	O
/	O
3	int
)	O
;	O
count_leading_zeros	O
(	O
cnt	int
,	O
b	int
)	O
;	O
b	int
<<=	O
cnt	int
;	O
invert_limb	O
(	O
bi	long
,	O
b	int
)	O
;	O
cps	array
[	O
0	int
]	O
=	O
bi	long
;	O
cps	array
[	O
1	int
]	O
=	O
cnt	int
;	O
B1modb	long
=	O
-	O
b	int
*	O
(	O
(	O
bi	long
>>	O
(	O
GMP_LIMB_BITS	int
-	O
cnt	int
)	O
)	O
|	O
(	O
CNST_LIMB	O
(	O
1	int
)	O
<<	O
cnt	int
)	O
)	O
;	O
ASSERT	O
(	O
B1modb	long
<=	O
b	int
)	O
;	O
cps	array
[	O
2	int
]	O
=	O
B1modb	long
>>	O
cnt	int
;	O
udiv_rnnd_preinv	O
(	O
B2modb	long
,	O
B1modb	long
,	O
0	int
,	O
b	int
,	O
bi	long
)	O
;	O
cps	array
[	O
3	int
]	O
=	O
B2modb	long
>>	O
cnt	int
;	O
udiv_rnnd_preinv	O
(	O
B3modb	long
,	O
B2modb	long
,	O
0	int
,	O
b	int
,	O
bi	long
)	O
;	O
cps	array
[	O
4	int
]	O
=	O
B3modb	long
>>	O
cnt	int
;	O
udiv_rnnd_preinv	O
(	O
B4modb	long
,	O
B3modb	long
,	O
0	int
,	O
b	int
,	O
bi	long
)	O
;	O
cps	array
[	O
5	int
]	O
=	O
B4modb	long
>>	O
cnt	int
;	O
}	O
mp_limb_t	long
mpn_mod_1s_3p	O
(	O
mp_srcptr	pointer
ap	pointer
,	O
mp_size_t	long
n	long
,	O
mp_limb_t	long
b	int
,	O
mp_limb_t	long
cps	array
[	O
6	int
]	O
)	O
{	O
mp_limb_t	long
rh	long
,	O
rl	long
,	O
bi	long
,	O
ph	long
,	O
pl	long
,	O
ch	long
,	O
cl	long
,	O
r	long
;	O
mp_limb_t	long
B1modb	long
,	O
B2modb	long
,	O
B3modb	long
,	O
B4modb	long
;	O
mp_size_t	long
i	long
;	O
int	O
cnt	int
;	O
ASSERT	O
(	O
n	long
>=	O
1	int
)	O
;	O
B1modb	long
=	O
cps	array
[	O
2	int
]	O
;	O
B2modb	long
=	O
cps	array
[	O
3	int
]	O
;	O
B3modb	long
=	O
cps	array
[	O
4	int
]	O
;	O
B4modb	long
=	O
cps	array
[	O
5	int
]	O
;	O
switch	O
(	O
(	O
int	O
)	O
(	O
(	O
mp_limb_t	long
)	O
n	long
*	O
MODLIMB_INVERSE_3	O
>>	O
(	O
GMP_NUMB_BITS	O
-	O
2	int
)	O
)	O
)	O
{	O
case	O
0	int
:	O
umul_ppmm	O
(	O
ph	long
,	O
pl	long
,	O
ap	pointer
[	O
n	long
-	O
2	int
]	O
,	O
B1modb	long
)	O
;	O
add_ssaaaa	O
(	O
ph	long
,	O
pl	long
,	O
ph	long
,	O
pl	long
,	O
0	int
,	O
ap	pointer
[	O
n	long
-	O
3	int
]	O
)	O
;	O
umul_ppmm	O
(	O
rh	long
,	O
rl	long
,	O
ap	pointer
[	O
n	long
-	O
1	int
]	O
,	O
B2modb	long
)	O
;	O
add_ssaaaa	O
(	O
rh	long
,	O
rl	long
,	O
rh	long
,	O
rl	long
,	O
ph	long
,	O
pl	long
)	O
;	O
n	long
-=	O
3	int
;	O
break	O
;	O
case	O
2	int
:	O
rh	long
=	O
0	int
;	O
rl	long
=	O
ap	pointer
[	O
n	long
-	O
1	int
]	O
;	O
n	long
-=	O
1	int
;	O
break	O
;	O
case	O
1	int
:	O
rh	long
=	O
ap	pointer
[	O
n	long
-	O
1	int
]	O
;	O
rl	long
=	O
ap	pointer
[	O
n	long
-	O
2	int
]	O
;	O
n	long
-=	O
2	int
;	O
break	O
;	O
}	O
for	O
(	O
i	long
=	O
n	long
-	O
3	int
;	O
i	long
>=	O
0	int
;	O
i	long
-=	O
3	int
)	O
{	O
umul_ppmm	O
(	O
ph	long
,	O
pl	long
,	O
ap	pointer
[	O
i	long
+	O
1	int
]	O
,	O
B1modb	long
)	O
;	O
add_ssaaaa	O
(	O
ph	long
,	O
pl	long
,	O
ph	long
,	O
pl	long
,	O
0	int
,	O
ap	pointer
[	O
i	long
+	O
0	int
]	O
)	O
;	O
umul_ppmm	O
(	O
ch	long
,	O
cl	long
,	O
ap	pointer
[	O
i	long
+	O
2	int
]	O
,	O
B2modb	long
)	O
;	O
add_ssaaaa	O
(	O
ph	long
,	O
pl	long
,	O
ph	long
,	O
pl	long
,	O
ch	long
,	O
cl	long
)	O
;	O
umul_ppmm	O
(	O
ch	long
,	O
cl	long
,	O
rl	long
,	O
B3modb	long
)	O
;	O
add_ssaaaa	O
(	O
ph	long
,	O
pl	long
,	O
ph	long
,	O
pl	long
,	O
ch	long
,	O
cl	long
)	O
;	O
umul_ppmm	O
(	O
rh	long
,	O
rl	long
,	O
rh	long
,	O
B4modb	long
)	O
;	O
add_ssaaaa	O
(	O
rh	long
,	O
rl	long
,	O
rh	long
,	O
rl	long
,	O
ph	long
,	O
pl	long
)	O
;	O
}	O
umul_ppmm	O
(	O
rh	long
,	O
cl	long
,	O
rh	long
,	O
B1modb	long
)	O
;	O
add_ssaaaa	O
(	O
rh	long
,	O
rl	long
,	O
rh	long
,	O
rl	long
,	O
0	int
,	O
cl	long
)	O
;	O
cnt	int
=	O
cps	array
[	O
1	int
]	O
;	O
bi	long
=	O
cps	array
[	O
0	int
]	O
;	O
r	long
=	O
(	O
rh	long
<<	O
cnt	int
)	O
|	O
(	O
rl	long
>>	O
(	O
GMP_LIMB_BITS	int
-	O
cnt	int
)	O
)	O
;	O
udiv_rnnd_preinv	O
(	O
r	long
,	O
r	long
,	O
rl	long
<<	O
cnt	int
,	O
b	int
,	O
bi	long
)	O
;	O
return	O
r	long
>>	O
cnt	int
;	O
}	O
