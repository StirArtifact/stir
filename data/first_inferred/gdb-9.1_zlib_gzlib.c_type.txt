local	O
void	O
gz_reset	function
OF	O
(	O
(	O
gz_statep	pointer
)	O
)	O
;	O
local	O
gzFile	pointer
gz_open	function
OF	O
(	O
(	O
const	O
void	O
*	O
,	O
int	O
,	O
const	O
char	O
*	O
)	O
)	O
;	O
local	O
void	O
gz_reset	function
(	O
state	pointer
)	O
gz_statep	pointer
state	pointer
;	O
{	O
state	pointer
->	O
x	struct
.	O
have	int
=	O
0	int
;	O
if	O
(	O
state	pointer
->	O
mode	pointer
==	O
GZ_READ	int
)	O
{	O
state	pointer
->	O
eof	int
=	O
0	int
;	O
state	pointer
->	O
past	int
=	O
0	int
;	O
state	pointer
->	O
how	int
=	O
LOOK	int
;	O
}	O
state	pointer
->	O
seek	int
=	O
0	int
;	O
gz_error	function
(	O
state	pointer
,	O
Z_OK	int
,	O
NULL	O
)	O
;	O
state	pointer
->	O
x	struct
.	O
pos	long
=	O
0	int
;	O
state	pointer
->	O
strm	pointer
.	O
avail_in	int
=	O
0	int
;	O
}	O
local	O
gzFile	pointer
gz_open	function
(	O
path	pointer
,	O
fd	int
,	O
mode	pointer
)	O
const	O
void	O
*	O
path	pointer
;	O
int	O
fd	int
;	O
const	O
char	O
*	O
mode	pointer
;	O
{	O
gz_statep	pointer
state	pointer
;	O
z_size_t	long
len	int
;	O
int	O
oflag	int
;	O
int	O
cloexec	int
=	O
0	int
;	O
int	O
exclusive	int
=	O
0	int
;	O
if	O
(	O
path	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
state	pointer
=	O
(	O
gz_statep	pointer
)	O
malloc	function
(	O
sizeof	O
(	O
gz_state	struct
)	O
)	O
;	O
if	O
(	O
state	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
state	pointer
->	O
size	int
=	O
0	int
;	O
state	pointer
->	O
want	int
=	O
GZBUFSIZE	int
;	O
state	pointer
->	O
msg	pointer
=	O
NULL	O
;	O
state	pointer
->	O
mode	pointer
=	O
GZ_NONE	int
;	O
state	pointer
->	O
level	int
=	O
Z_DEFAULT_COMPRESSION	O
;	O
state	pointer
->	O
strategy	int
=	O
Z_DEFAULT_STRATEGY	int
;	O
state	pointer
->	O
direct	int
=	O
0	int
;	O
while	O
(	O
*	O
mode	pointer
)	O
{	O
if	O
(	O
*	O
mode	pointer
>=	O
'0'	O
&&	O
*	O
mode	pointer
<=	O
'9'	O
)	O
state	pointer
->	O
level	int
=	O
*	O
mode	pointer
-	O
'0'	O
;	O
else	O
switch	O
(	O
*	O
mode	pointer
)	O
{	O
case	O
'r'	O
:	O
state	pointer
->	O
mode	pointer
=	O
GZ_READ	int
;	O
break	O
;	O
case	O
'w'	O
:	O
state	pointer
->	O
mode	pointer
=	O
GZ_WRITE	int
;	O
break	O
;	O
case	O
'a'	O
:	O
state	pointer
->	O
mode	pointer
=	O
GZ_APPEND	int
;	O
break	O
;	O
case	O
'+'	O
:	O
free	function
(	O
state	pointer
)	O
;	O
return	O
NULL	O
;	O
case	O
'b'	O
:	O
break	O
;	O
case	O
'e'	O
:	O
cloexec	int
=	O
1	int
;	O
break	O
;	O
case	O
'x'	O
:	O
exclusive	int
=	O
1	int
;	O
break	O
;	O
case	O
'f'	O
:	O
state	pointer
->	O
strategy	int
=	O
Z_FILTERED	int
;	O
break	O
;	O
case	O
'h'	O
:	O
state	pointer
->	O
strategy	int
=	O
Z_HUFFMAN_ONLY	int
;	O
break	O
;	O
case	O
'R'	O
:	O
state	pointer
->	O
strategy	int
=	O
Z_RLE	int
;	O
break	O
;	O
case	O
'F'	O
:	O
state	pointer
->	O
strategy	int
=	O
Z_FIXED	int
;	O
break	O
;	O
case	O
'T'	O
:	O
state	pointer
->	O
direct	int
=	O
1	int
;	O
break	O
;	O
default	O
:	O
;	O
}	O
mode	pointer
++	O
;	O
}	O
if	O
(	O
state	pointer
->	O
mode	pointer
==	O
GZ_NONE	int
)	O
{	O
free	function
(	O
state	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
state	pointer
->	O
mode	pointer
==	O
GZ_READ	int
)	O
{	O
if	O
(	O
state	pointer
->	O
direct	int
)	O
{	O
free	function
(	O
state	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
state	pointer
->	O
direct	int
=	O
1	int
;	O
}	O
len	int
=	O
strlen	function
(	O
(	O
const	O
char	O
*	O
)	O
path	pointer
)	O
;	O
state	pointer
->	O
path	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
len	int
+	O
1	int
)	O
;	O
if	O
(	O
state	pointer
->	O
path	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
state	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
(	O
void	O
)	O
snprintf	function
(	O
state	pointer
->	O
path	pointer
,	O
len	int
+	O
1	int
,	O
"%s"	pointer
,	O
(	O
const	O
char	O
*	O
)	O
path	pointer
)	O
;	O
oflag	int
=	O
(	O
cloexec	int
?	O
O_CLOEXEC	O
:	O
0	int
)	O
|	O
(	O
state	pointer
->	O
mode	pointer
==	O
GZ_READ	int
?	O
O_RDONLY	int
:	O
(	O
O_WRONLY	int
|	O
O_CREAT	int
|	O
(	O
exclusive	int
?	O
O_EXCL	int
:	O
0	int
)	O
|	O
(	O
state	pointer
->	O
mode	pointer
==	O
GZ_WRITE	int
?	O
O_TRUNC	int
:	O
O_APPEND	int
)	O
)	O
)	O
;	O
state	pointer
->	O
fd	int
=	O
fd	int
>	O
-	O
1	int
?	O
fd	int
:	O
(	O
open	function
(	O
(	O
const	O
char	O
*	O
)	O
path	pointer
,	O
oflag	int
,	O
0666	int
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
fd	int
==	O
-	O
1	int
)	O
{	O
free	function
(	O
state	pointer
->	O
path	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
state	pointer
->	O
mode	pointer
==	O
GZ_APPEND	int
)	O
{	O
LSEEK	O
(	O
state	pointer
->	O
fd	int
,	O
0	int
,	O
SEEK_END	int
)	O
;	O
state	pointer
->	O
mode	pointer
=	O
GZ_WRITE	int
;	O
}	O
if	O
(	O
state	pointer
->	O
mode	pointer
==	O
GZ_READ	int
)	O
{	O
state	pointer
->	O
start	long
=	O
LSEEK	O
(	O
state	pointer
->	O
fd	int
,	O
0	int
,	O
SEEK_CUR	int
)	O
;	O
if	O
(	O
state	pointer
->	O
start	long
==	O
-	O
1	int
)	O
state	pointer
->	O
start	long
=	O
0	int
;	O
}	O
gz_reset	function
(	O
state	pointer
)	O
;	O
return	O
(	O
gzFile	pointer
)	O
state	pointer
;	O
}	O
gzFile	pointer
ZEXPORT	O
gzopen	function
(	O
path	pointer
,	O
mode	pointer
)	O
const	O
char	O
*	O
path	pointer
;	O
const	O
char	O
*	O
mode	pointer
;	O
{	O
return	O
gz_open	function
(	O
path	pointer
,	O
-	O
1	int
,	O
mode	pointer
)	O
;	O
}	O
gzFile	pointer
ZEXPORT	O
gzopen64	function
(	O
path	pointer
,	O
mode	pointer
)	O
const	O
char	O
*	O
path	pointer
;	O
const	O
char	O
*	O
mode	pointer
;	O
{	O
return	O
gz_open	function
(	O
path	pointer
,	O
-	O
1	int
,	O
mode	pointer
)	O
;	O
}	O
gzFile	pointer
ZEXPORT	O
gzdopen	function
(	O
fd	int
,	O
mode	pointer
)	O
int	O
fd	int
;	O
const	O
char	O
*	O
mode	pointer
;	O
{	O
char	O
*	O
path	pointer
;	O
gzFile	pointer
gz	pointer
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
||	O
(	O
path	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
7	int
+	O
3	int
*	O
sizeof	O
(	O
int	O
)	O
)	O
)	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
(	O
void	O
)	O
snprintf	function
(	O
path	pointer
,	O
7	int
+	O
3	int
*	O
sizeof	O
(	O
int	O
)	O
,	O
"<fd:%d>"	pointer
,	O
fd	int
)	O
;	O
gz	pointer
=	O
gz_open	function
(	O
path	pointer
,	O
fd	int
,	O
mode	pointer
)	O
;	O
free	function
(	O
path	pointer
)	O
;	O
return	O
gz	pointer
;	O
}	O
int	O
ZEXPORT	O
gzbuffer	function
(	O
file	pointer
,	O
size	int
)	O
gzFile	pointer
file	pointer
;	O
unsigned	O
size	int
;	O
{	O
gz_statep	pointer
state	pointer
;	O
if	O
(	O
file	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
state	pointer
=	O
(	O
gz_statep	pointer
)	O
file	pointer
;	O
if	O
(	O
state	pointer
->	O
mode	pointer
!=	O
GZ_READ	int
&&	O
state	pointer
->	O
mode	pointer
!=	O
GZ_WRITE	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
state	pointer
->	O
size	int
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
size	int
<<	O
1	int
)	O
<	O
size	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
size	int
<	O
2	int
)	O
size	int
=	O
2	int
;	O
state	pointer
->	O
want	int
=	O
size	int
;	O
return	O
0	int
;	O
}	O
int	O
ZEXPORT	O
gzrewind	function
(	O
file	pointer
)	O
gzFile	pointer
file	pointer
;	O
{	O
gz_statep	pointer
state	pointer
;	O
if	O
(	O
file	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
state	pointer
=	O
(	O
gz_statep	pointer
)	O
file	pointer
;	O
if	O
(	O
state	pointer
->	O
mode	pointer
!=	O
GZ_READ	int
||	O
(	O
state	pointer
->	O
err	int
!=	O
Z_OK	int
&&	O
state	pointer
->	O
err	int
!=	O
Z_BUF_ERROR	O
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
LSEEK	O
(	O
state	pointer
->	O
fd	int
,	O
state	pointer
->	O
start	long
,	O
SEEK_SET	int
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
gz_reset	function
(	O
state	pointer
)	O
;	O
return	O
0	int
;	O
}	O
z_off64_t	O
ZEXPORT	O
gzseek64	function
(	O
file	pointer
,	O
offset	long
,	O
whence	int
)	O
gzFile	pointer
file	pointer
;	O
z_off64_t	O
offset	long
;	O
int	O
whence	int
;	O
{	O
unsigned	O
n	int
;	O
z_off64_t	O
ret	long
;	O
gz_statep	pointer
state	pointer
;	O
if	O
(	O
file	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
state	pointer
=	O
(	O
gz_statep	pointer
)	O
file	pointer
;	O
if	O
(	O
state	pointer
->	O
mode	pointer
!=	O
GZ_READ	int
&&	O
state	pointer
->	O
mode	pointer
!=	O
GZ_WRITE	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
state	pointer
->	O
err	int
!=	O
Z_OK	int
&&	O
state	pointer
->	O
err	int
!=	O
Z_BUF_ERROR	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
whence	int
!=	O
SEEK_SET	int
&&	O
whence	int
!=	O
SEEK_CUR	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
whence	int
==	O
SEEK_SET	int
)	O
offset	long
-=	O
state	pointer
->	O
x	struct
.	O
pos	long
;	O
else	O
if	O
(	O
state	pointer
->	O
seek	int
)	O
offset	long
+=	O
state	pointer
->	O
skip	long
;	O
state	pointer
->	O
seek	int
=	O
0	int
;	O
if	O
(	O
state	pointer
->	O
mode	pointer
==	O
GZ_READ	int
&&	O
state	pointer
->	O
how	int
==	O
COPY	int
&&	O
state	pointer
->	O
x	struct
.	O
pos	long
+	O
offset	long
>=	O
0	int
)	O
{	O
ret	long
=	O
LSEEK	O
(	O
state	pointer
->	O
fd	int
,	O
offset	long
-	O
state	pointer
->	O
x	struct
.	O
have	int
,	O
SEEK_CUR	int
)	O
;	O
if	O
(	O
ret	long
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
state	pointer
->	O
x	struct
.	O
have	int
=	O
0	int
;	O
state	pointer
->	O
eof	int
=	O
0	int
;	O
state	pointer
->	O
past	int
=	O
0	int
;	O
state	pointer
->	O
seek	int
=	O
0	int
;	O
gz_error	function
(	O
state	pointer
,	O
Z_OK	int
,	O
NULL	O
)	O
;	O
state	pointer
->	O
strm	pointer
.	O
avail_in	int
=	O
0	int
;	O
state	pointer
->	O
x	struct
.	O
pos	long
+=	O
offset	long
;	O
return	O
state	pointer
->	O
x	struct
.	O
pos	long
;	O
}	O
if	O
(	O
offset	long
<	O
0	int
)	O
{	O
if	O
(	O
state	pointer
->	O
mode	pointer
!=	O
GZ_READ	int
)	O
return	O
-	O
1	int
;	O
offset	long
+=	O
state	pointer
->	O
x	struct
.	O
pos	long
;	O
if	O
(	O
offset	long
<	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
gzrewind	function
(	O
file	pointer
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
state	pointer
->	O
mode	pointer
==	O
GZ_READ	int
)	O
{	O
n	int
=	O
GT_OFF	O
(	O
state	pointer
->	O
x	struct
.	O
have	int
)	O
||	O
(	O
z_off64_t	O
)	O
state	pointer
->	O
x	struct
.	O
have	int
>	O
offset	long
?	O
(	O
unsigned	O
)	O
offset	long
:	O
state	pointer
->	O
x	struct
.	O
have	int
;	O
state	pointer
->	O
x	struct
.	O
have	int
-=	O
n	int
;	O
state	pointer
->	O
x	struct
.	O
next	pointer
+=	O
n	int
;	O
state	pointer
->	O
x	struct
.	O
pos	long
+=	O
n	int
;	O
offset	long
-=	O
n	int
;	O
}	O
if	O
(	O
offset	long
)	O
{	O
state	pointer
->	O
seek	int
=	O
1	int
;	O
state	pointer
->	O
skip	long
=	O
offset	long
;	O
}	O
return	O
state	pointer
->	O
x	struct
.	O
pos	long
+	O
offset	long
;	O
}	O
z_off_t	O
ZEXPORT	O
gzseek	function
(	O
file	pointer
,	O
offset	long
,	O
whence	int
)	O
gzFile	pointer
file	pointer
;	O
z_off_t	O
offset	long
;	O
int	O
whence	int
;	O
{	O
z_off64_t	O
ret	long
;	O
ret	long
=	O
gzseek64	function
(	O
file	pointer
,	O
(	O
z_off64_t	O
)	O
offset	long
,	O
whence	int
)	O
;	O
return	O
ret	long
==	O
(	O
z_off_t	O
)	O
ret	long
?	O
(	O
z_off_t	O
)	O
ret	long
:	O
-	O
1	int
;	O
}	O
z_off64_t	O
ZEXPORT	O
gztell64	function
(	O
file	pointer
)	O
gzFile	pointer
file	pointer
;	O
{	O
gz_statep	pointer
state	pointer
;	O
if	O
(	O
file	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
state	pointer
=	O
(	O
gz_statep	pointer
)	O
file	pointer
;	O
if	O
(	O
state	pointer
->	O
mode	pointer
!=	O
GZ_READ	int
&&	O
state	pointer
->	O
mode	pointer
!=	O
GZ_WRITE	int
)	O
return	O
-	O
1	int
;	O
return	O
state	pointer
->	O
x	struct
.	O
pos	long
+	O
(	O
state	pointer
->	O
seek	int
?	O
state	pointer
->	O
skip	long
:	O
0	int
)	O
;	O
}	O
z_off_t	O
ZEXPORT	O
gztell	function
(	O
file	pointer
)	O
gzFile	pointer
file	pointer
;	O
{	O
z_off64_t	O
ret	long
;	O
ret	long
=	O
gztell64	function
(	O
file	pointer
)	O
;	O
return	O
ret	long
==	O
(	O
z_off_t	O
)	O
ret	long
?	O
(	O
z_off_t	O
)	O
ret	long
:	O
-	O
1	int
;	O
}	O
z_off64_t	O
ZEXPORT	O
gzoffset64	function
(	O
file	pointer
)	O
gzFile	pointer
file	pointer
;	O
{	O
z_off64_t	O
offset	long
;	O
gz_statep	pointer
state	pointer
;	O
if	O
(	O
file	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
state	pointer
=	O
(	O
gz_statep	pointer
)	O
file	pointer
;	O
if	O
(	O
state	pointer
->	O
mode	pointer
!=	O
GZ_READ	int
&&	O
state	pointer
->	O
mode	pointer
!=	O
GZ_WRITE	int
)	O
return	O
-	O
1	int
;	O
offset	long
=	O
LSEEK	O
(	O
state	pointer
->	O
fd	int
,	O
0	int
,	O
SEEK_CUR	int
)	O
;	O
if	O
(	O
offset	long
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
state	pointer
->	O
mode	pointer
==	O
GZ_READ	int
)	O
offset	long
-=	O
state	pointer
->	O
strm	pointer
.	O
avail_in	int
;	O
return	O
offset	long
;	O
}	O
z_off_t	O
ZEXPORT	O
gzoffset	function
(	O
file	pointer
)	O
gzFile	pointer
file	pointer
;	O
{	O
z_off64_t	O
ret	long
;	O
ret	long
=	O
gzoffset64	function
(	O
file	pointer
)	O
;	O
return	O
ret	long
==	O
(	O
z_off_t	O
)	O
ret	long
?	O
(	O
z_off_t	O
)	O
ret	long
:	O
-	O
1	int
;	O
}	O
int	O
ZEXPORT	O
gzeof	function
(	O
file	pointer
)	O
gzFile	pointer
file	pointer
;	O
{	O
gz_statep	pointer
state	pointer
;	O
if	O
(	O
file	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
state	pointer
=	O
(	O
gz_statep	pointer
)	O
file	pointer
;	O
if	O
(	O
state	pointer
->	O
mode	pointer
!=	O
GZ_READ	int
&&	O
state	pointer
->	O
mode	pointer
!=	O
GZ_WRITE	int
)	O
return	O
0	int
;	O
return	O
state	pointer
->	O
mode	pointer
==	O
GZ_READ	int
?	O
state	pointer
->	O
past	int
:	O
0	int
;	O
}	O
const	O
char	O
*	O
ZEXPORT	O
gzerror	function
(	O
file	pointer
,	O
errnum	pointer
)	O
gzFile	pointer
file	pointer
;	O
int	O
*	O
errnum	pointer
;	O
{	O
gz_statep	pointer
state	pointer
;	O
if	O
(	O
file	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
state	pointer
=	O
(	O
gz_statep	pointer
)	O
file	pointer
;	O
if	O
(	O
state	pointer
->	O
mode	pointer
!=	O
GZ_READ	int
&&	O
state	pointer
->	O
mode	pointer
!=	O
GZ_WRITE	int
)	O
return	O
NULL	O
;	O
if	O
(	O
errnum	pointer
!=	O
NULL	O
)	O
*	O
errnum	pointer
=	O
state	pointer
->	O
err	int
;	O
return	O
state	pointer
->	O
err	int
==	O
Z_MEM_ERROR	O
?	O
"out of memory"	pointer
:	O
(	O
state	pointer
->	O
msg	pointer
==	O
NULL	O
?	O
""	pointer
:	O
state	pointer
->	O
msg	pointer
)	O
;	O
}	O
void	O
ZEXPORT	O
gzclearerr	function
(	O
file	pointer
)	O
gzFile	pointer
file	pointer
;	O
{	O
gz_statep	pointer
state	pointer
;	O
if	O
(	O
file	pointer
==	O
NULL	O
)	O
return	O
;	O
state	pointer
=	O
(	O
gz_statep	pointer
)	O
file	pointer
;	O
if	O
(	O
state	pointer
->	O
mode	pointer
!=	O
GZ_READ	int
&&	O
state	pointer
->	O
mode	pointer
!=	O
GZ_WRITE	int
)	O
return	O
;	O
if	O
(	O
state	pointer
->	O
mode	pointer
==	O
GZ_READ	int
)	O
{	O
state	pointer
->	O
eof	int
=	O
0	int
;	O
state	pointer
->	O
past	int
=	O
0	int
;	O
}	O
gz_error	function
(	O
state	pointer
,	O
Z_OK	int
,	O
NULL	O
)	O
;	O
}	O
void	O
ZLIB_INTERNAL	O
gz_error	function
(	O
state	pointer
,	O
err	int
,	O
msg	pointer
)	O
gz_statep	pointer
state	pointer
;	O
int	O
err	int
;	O
const	O
char	O
*	O
msg	pointer
;	O
{	O
if	O
(	O
state	pointer
->	O
msg	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
state	pointer
->	O
err	int
!=	O
Z_MEM_ERROR	O
)	O
free	function
(	O
state	pointer
->	O
msg	pointer
)	O
;	O
state	pointer
->	O
msg	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
err	int
!=	O
Z_OK	int
&&	O
err	int
!=	O
Z_BUF_ERROR	O
)	O
state	pointer
->	O
x	struct
.	O
have	int
=	O
0	int
;	O
state	pointer
->	O
err	int
=	O
err	int
;	O
if	O
(	O
msg	pointer
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
err	int
==	O
Z_MEM_ERROR	O
)	O
return	O
;	O
if	O
(	O
(	O
state	pointer
->	O
msg	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
strlen	function
(	O
state	pointer
->	O
path	pointer
)	O
+	O
strlen	function
(	O
msg	pointer
)	O
+	O
3	int
)	O
)	O
==	O
NULL	O
)	O
{	O
state	pointer
->	O
err	int
=	O
Z_MEM_ERROR	O
;	O
return	O
;	O
}	O
(	O
void	O
)	O
snprintf	function
(	O
state	pointer
->	O
msg	pointer
,	O
strlen	function
(	O
state	pointer
->	O
path	pointer
)	O
+	O
strlen	function
(	O
msg	pointer
)	O
+	O
3	int
,	O
"%s%s%s"	pointer
,	O
state	pointer
->	O
path	pointer
,	O
": "	pointer
,	O
msg	pointer
)	O
;	O
}	O
