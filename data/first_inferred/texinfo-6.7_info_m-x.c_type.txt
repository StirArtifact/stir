char	O
*	O
read_function_name	function
(	O
char	O
*	O
prompt	pointer
,	O
WINDOW	struct
*	O
window	pointer
)	O
{	O
register	O
int	O
i	int
;	O
char	O
*	O
line	pointer
;	O
REFERENCE	struct
*	O
*	O
array	pointer
=	O
NULL	O
;	O
size_t	long
array_index	long
=	O
0	int
,	O
array_slots	long
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
function_doc_array	array
[	O
i	int
]	O
.	O
func	pointer
;	O
i	int
++	O
)	O
{	O
REFERENCE	struct
*	O
entry	pointer
;	O
entry	pointer
=	O
xmalloc	function
(	O
sizeof	O
(	O
REFERENCE	struct
)	O
)	O
;	O
entry	pointer
->	O
label	pointer
=	O
xstrdup	function
(	O
function_doc_array	array
[	O
i	int
]	O
.	O
func_name	pointer
)	O
;	O
entry	pointer
->	O
nodename	pointer
=	O
NULL	O
;	O
entry	pointer
->	O
filename	pointer
=	O
NULL	O
;	O
add_pointer_to_array	O
(	O
entry	pointer
,	O
array_index	long
,	O
array	pointer
,	O
array_slots	long
,	O
200	int
)	O
;	O
}	O
line	pointer
=	O
info_read_completing_in_echo_area	function
(	O
prompt	pointer
,	O
array	pointer
)	O
;	O
info_free_references	function
(	O
array	pointer
)	O
;	O
return	O
line	pointer
;	O
}	O
DECLARE_INFO_COMMAND	O
(	O
describe_command	function
,	O
_	O
(	O
"Read the name of an Info command and describe it"	pointer
)	O
)	O
{	O
char	O
*	O
line	pointer
;	O
line	pointer
=	O
read_function_name	function
(	O
_	O
(	O
"Describe command: "	pointer
)	O
,	O
window	pointer
)	O
;	O
if	O
(	O
!	O
line	pointer
)	O
{	O
info_abort_key	function
(	O
active_window	pointer
,	O
count	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
*	O
line	pointer
)	O
{	O
InfoCommand	struct
*	O
cmd	pointer
=	O
named_function	function
(	O
line	pointer
)	O
;	O
if	O
(	O
!	O
cmd	pointer
)	O
return	O
;	O
window_message_in_echo_area	function
(	O
"%s: %s."	pointer
,	O
line	pointer
,	O
function_documentation	function
(	O
cmd	pointer
)	O
)	O
;	O
}	O
free	function
(	O
line	pointer
)	O
;	O
}	O
DECLARE_INFO_COMMAND	O
(	O
info_execute_command	function
,	O
_	O
(	O
"Read a command name in the echo area and execute it"	pointer
)	O
)	O
{	O
char	O
*	O
line	pointer
;	O
char	O
*	O
keys	pointer
;	O
char	O
*	O
prompt	pointer
;	O
keys	pointer
=	O
where_is	function
(	O
info_keymap	pointer
,	O
InfoCmd	O
(	O
info_execute_command	function
)	O
)	O
;	O
if	O
(	O
!	O
keys	pointer
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
info_explicit_arg	int
||	O
count	pointer
!=	O
1	int
)	O
asprintf	function
(	O
&	O
prompt	pointer
,	O
"%d %s "	pointer
,	O
count	pointer
,	O
keys	pointer
)	O
;	O
else	O
asprintf	function
(	O
&	O
prompt	pointer
,	O
"%s "	pointer
,	O
keys	pointer
)	O
;	O
line	pointer
=	O
read_function_name	function
(	O
prompt	pointer
,	O
window	pointer
)	O
;	O
free	function
(	O
prompt	pointer
)	O
;	O
if	O
(	O
!	O
line	pointer
)	O
{	O
info_abort_key	function
(	O
active_window	pointer
,	O
count	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
*	O
line	pointer
)	O
{	O
free	function
(	O
line	pointer
)	O
;	O
return	O
;	O
}	O
{	O
InfoCommand	struct
*	O
command	pointer
;	O
if	O
(	O
(	O
active_window	pointer
!=	O
the_echo_area	pointer
)	O
&&	O
(	O
strncmp	function
(	O
line	pointer
,	O
"echo-area-"	pointer
,	O
10	int
)	O
==	O
0	int
)	O
)	O
{	O
free	function
(	O
line	pointer
)	O
;	O
info_error	function
(	O
_	O
(	O
"Cannot execute an 'echo-area' command here"	pointer
)	O
)	O
;	O
return	O
;	O
}	O
command	pointer
=	O
named_function	function
(	O
line	pointer
)	O
;	O
free	function
(	O
line	pointer
)	O
;	O
if	O
(	O
command	pointer
&&	O
command	pointer
->	O
func	pointer
)	O
(	O
*	O
command	pointer
->	O
func	pointer
)	O
(	O
active_window	pointer
,	O
count	pointer
,	O
0	int
)	O
;	O
}	O
}	O
DECLARE_INFO_COMMAND	O
(	O
set_screen_height	function
,	O
_	O
(	O
"Set the height of the displayed window"	pointer
)	O
)	O
{	O
int	O
new_height	int
,	O
old_height	int
=	O
screenheight	int
;	O
if	O
(	O
info_explicit_arg	int
||	O
count	pointer
!=	O
1	int
)	O
new_height	int
=	O
count	pointer
;	O
else	O
{	O
char	O
prompt	pointer
[	O
80	int
]	O
;	O
char	O
*	O
line	pointer
;	O
new_height	int
=	O
screenheight	int
;	O
sprintf	function
(	O
prompt	pointer
,	O
_	O
(	O
"Set screen height to (%d): "	pointer
)	O
,	O
new_height	int
)	O
;	O
line	pointer
=	O
info_read_in_echo_area	function
(	O
prompt	pointer
)	O
;	O
if	O
(	O
!	O
line	pointer
)	O
{	O
info_abort_key	function
(	O
active_window	pointer
,	O
count	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
*	O
line	pointer
)	O
new_height	int
=	O
atoi	function
(	O
line	pointer
)	O
;	O
free	function
(	O
line	pointer
)	O
;	O
}	O
terminal_clear_screen	function
(	O
)	O
;	O
display_clear_display	function
(	O
the_display	pointer
)	O
;	O
screenheight	int
=	O
new_height	int
;	O
if	O
(	O
screenheight	int
==	O
old_height	int
)	O
{	O
window_mark_chain	function
(	O
windows	pointer
,	O
W_UpdateWindow	int
)	O
;	O
display_update_display	function
(	O
)	O
;	O
}	O
else	O
{	O
display_initialize_display	function
(	O
screenwidth	int
,	O
screenheight	int
)	O
;	O
window_new_screen_size	function
(	O
screenwidth	int
,	O
screenheight	int
)	O
;	O
}	O
}	O
