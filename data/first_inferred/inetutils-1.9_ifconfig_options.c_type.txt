int	O
verbose	int
;	O
struct	O
ifconfig	struct
*	O
ifs	pointer
;	O
int	O
nifs	int
;	O
static	O
struct	O
ifconfig	struct
ifconfig_initializer	struct
=	O
{	O
NULL	O
,	O
0	int
,	O
}	O
;	O
struct	O
format	pointer
formats	array
[	O
]	O
=	O
{	O
{	O
"default"	pointer
,	O
"Default format.  Equivalent to \"gnu\"."	pointer
,	O
"${format}{gnu}"	pointer
}	O
,	O
{	O
"gnu"	pointer
,	O
"Standard GNU output format."	pointer
,	O
"${first?}{}{${\\n}}${format}{gnu-one-entry}"	pointer
}	O
,	O
{	O
"gnu-one-entry"	pointer
,	O
"Same as GNU, but without additional newlines between the entries."	pointer
,	O
"${format}{check-existence}"	pointer
"${ifdisplay?}{"	pointer
"${name} (${index}):${\\n}"	pointer
"${addr?}{  inet address ${tab}{16}${addr}${\\n}}"	pointer
"${netmask?}{  netmask ${tab}{16}${netmask}${\\n}}"	pointer
"${brdaddr?}{  broadcast ${tab}{16}${brdaddr}${\\n}}"	pointer
"${dstaddr?}{  peer address ${tab}{16}${dstaddr}${\\n}}"	pointer
"${flags?}{  flags ${tab}{16}${flags}${\\n}}"	pointer
"${mtu?}{  mtu ${tab}{16}${mtu}${\\n}}"	pointer
"${metric?}{  metric ${tab}{16}${metric}${\\n}}"	pointer
"${exists?}{hwtype?}{${hwtype?}{  link encap ${tab}{16}${hwtype}${\\n}}}"	pointer
"${exists?}{hwaddr?}{${hwaddr?}{  hardware addr ${tab}{16}${hwaddr}${\\n}}}"	pointer
"${exists?}{txqlen?}{${txqlen?}{  tx queue len ${tab}{16}${txqlen}${\\n}}}"	pointer
"}"	pointer
}	O
,	O
{	O
"net-tools"	pointer
,	O
"Similar to the output of net-tools.  Default for GNU/Linux."	pointer
,	O
"${format}{check-existence}"	pointer
"${ifdisplay?}{"	pointer
"${name}${exists?}{hwtype?}{${hwtype?}{${tab}{10}Link encap:${hwtype}}"	pointer
"${hwaddr?}{  HWaddr ${hwaddr}}}${\\n}"	pointer
"${addr?}{${tab}{10}inet addr:${addr}"	pointer
"${brdaddr?}{  Bcast:${brdaddr}}"	pointer
"${netmask?}{  Mask:${netmask}}"	pointer
"${newline}}"	pointer
"${tab}{10}${flags}"	pointer
"${mtu?}{  MTU:${mtu}}"	pointer
"${metric?}{  Metric:${metric}}"	pointer
"${exists?}{ifstat?}{"	pointer
"${ifstat?}{"	pointer
"${newline}          RX packets:${rxpackets}"	pointer
" errors:${rxerrors} dropped:${rxdropped} overruns:${rxfifoerr}"	pointer
" frame:${rxframeerr}"	pointer
"${newline}          TX packets:${txpackets}"	pointer
" errors:${txerrors} dropped:${txdropped} overruns:${txfifoerr}"	pointer
" carrier:${txcarrier}"	pointer
"${newline}"	pointer
"          collisions:${collisions}"	pointer
"${exists?}{txqlen?}{${txqlen?}{ txqueuelen:${txqlen}}}"	pointer
"${newline}"	pointer
"          RX bytes:${rxbytes}  TX bytes:${txbytes}"	pointer
"}}{"	pointer
"${newline}"	pointer
"${exists?}{txqlen?}{${txqlen?}{ ${tab}{10}txqueuelen:${txqlen}}${\\n}}}"	pointer
"${newline}"	pointer
"${exists?}{map?}{${map?}{${irq?}{"	pointer
"          Interrupt:${irq}"	pointer
"${baseaddr?}{ Base address:0x${baseaddr}{%x}}"	pointer
"${memstart?}{ Memory:${memstart}{%lx}-${memend}{%lx}}"	pointer
"${dma?}{ DMA chan:${dma}{%x}}"	pointer
"${newline}"	pointer
"}}}"	pointer
"${newline}"	pointer
"}"	pointer
}	O
,	O
{	O
"netstat"	pointer
,	O
"Terse output, similar to that of \"netstat -i\"."	pointer
,	O
"${first?}{Iface    MTU Met    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg${newline}}"	pointer
"${format}{check-existence}"	pointer
"${name}${tab}{6}${mtu}{%6d} ${metric}{%3d}"	pointer
"${ifstat?}{"	pointer
" ${rxpackets}{%8lu} ${rxerrors}{%6lu} ${rxdropped}{%6lu} ${rxfifoerr}{%6lu}"	pointer
" ${txpackets}{%8lu} ${txerrors}{%6lu} ${txdropped}{%6lu} ${txfifoerr}{%6lu}"	pointer
"}{   - no statistics available -}"	pointer
"${tab}{76} ${flags?}{${flags}{short}}{[NO FLAGS]}"	pointer
"${newline}"	pointer
}	O
,	O
{	O
"unix"	pointer
,	O
"Traditional UNIX interface listing.  Default for Solaris and HPUX."	pointer
,	O
"${format}{check-existence}"	pointer
"${ifdisplay?}{"	pointer
"${name}: flags=${flags}{number}{%hx}<${flags}{string}{,}>"	pointer
"${mtu?}{ mtu ${mtu}}${\\n}"	pointer
"${addr?}{${\\t}inet ${addr}"	pointer
" netmask ${netmask}{0}{%#02x}${netmask}{1}{%02x}"	pointer
"${netmask}{2}{%02x}${netmask}{3}{%02x}"	pointer
"${brdaddr?}{ broadcast ${brdaddr}}${\\n}}"	pointer
"${exists?}{hwtype?}{${hwtype?}{${\\t}${hwtype}"	pointer
"}${exists?}{hwaddr?}{${hwaddr?}{ ${hwaddr}}}${\\n}}"	pointer
"}"	pointer
}	O
,	O
{	O
"osf"	pointer
,	O
"OSF-style output."	pointer
,	O
"${format}{check-existence}"	pointer
"${ifdisplay?}{"	pointer
"${name}: flags=${flags}{number}{%x}<${flags}{string}{,}>${\\n}"	pointer
"${addr?}{${\\t}inet ${addr}"	pointer
" netmask ${netmask}{0}{%02x}${netmask}{1}{%02x}"	pointer
"${netmask}{2}{%02x}${netmask}{3}{%02x}"	pointer
"${brdaddr?}{ broadcast ${brdaddr}}"	pointer
"${mtu?}{ ipmtu ${mtu}}${\\n}}"	pointer
"}"	pointer
}	O
,	O
{	O
"check-existence"	pointer
,	O
"If interface does not exist, print error message and exit."	pointer
,	O
"${index?}{}"	pointer
"{${error}{${progname}: error: interface `${name}' does not exist${\\n}}"	pointer
"${exit}{1}}"	pointer
}	O
,	O
{	O
"help"	pointer
,	O
"Display this help output."	pointer
,	O
"${foreachformat}{"	pointer
"${name}:${tab}{17}${docstr}"	pointer
"${verbose?}{"	pointer
"${newline}"	pointer
"${rep}{79}{-}"	pointer
"${newline}"	pointer
"${defn}"	pointer
"${newline}"	pointer
"}"	pointer
"${newline}"	pointer
"}"	pointer
"${exit}{0}"	pointer
}	O
,	O
{	O
0	int
,	O
0	int
}	O
}	O
;	O
const	O
char	O
*	O
default_format	pointer
;	O
int	O
all_option	int
;	O
int	O
ifs_cmdline	int
;	O
enum	O
{	O
METRIC_OPTION	int
=	O
256	int
,	O
FORMAT_OPTION	int
,	O
UP_OPTION	int
,	O
DOWN_OPTION	int
,	O
}	O
;	O
static	O
struct	O
argp_option	struct
argp_options	array
[	O
]	O
=	O
{	O
{	O
"verbose"	pointer
,	O
'v'	O
,	O
NULL	O
,	O
0	int
,	O
"output information when configuring interface"	pointer
}	O
,	O
{	O
"all"	pointer
,	O
'a'	O
,	O
NULL	O
,	O
0	int
,	O
"display all available interfaces"	pointer
}	O
,	O
{	O
"interface"	pointer
,	O
'i'	O
,	O
"NAME"	pointer
,	O
0	int
,	O
"configure network interface NAME"	pointer
}	O
,	O
{	O
"address"	pointer
,	O
'A'	O
,	O
"ADDR"	pointer
,	O
0	int
,	O
"set interface address to ADDR"	pointer
}	O
,	O
{	O
"netmask"	pointer
,	O
'm'	O
,	O
"MASK"	pointer
,	O
0	int
,	O
"set netmask to MASK"	pointer
}	O
,	O
{	O
"dstaddr"	pointer
,	O
'd'	O
,	O
"ADDR"	pointer
,	O
0	int
,	O
"set destination (peer) address to ADDR"	pointer
}	O
,	O
{	O
"peer"	pointer
,	O
'p'	O
,	O
"ADDR"	pointer
,	O
OPTION_ALIAS	int
}	O
,	O
{	O
"broadcast"	pointer
,	O
'B'	O
,	O
"ADDR"	pointer
,	O
0	int
,	O
"set broadcast address to ADDR"	pointer
}	O
,	O
{	O
"brdaddr"	pointer
,	O
'b'	O
,	O
NULL	O
,	O
OPTION_ALIAS	int
,	O
}	O
,	O
{	O
"mtu"	pointer
,	O
'M'	O
,	O
"N"	pointer
,	O
0	int
,	O
"set mtu of interface to N"	pointer
}	O
,	O
{	O
"metric"	pointer
,	O
METRIC_OPTION	int
,	O
"N"	pointer
,	O
0	int
,	O
"set metric of interface to N"	pointer
}	O
,	O
{	O
"format"	pointer
,	O
FORMAT_OPTION	int
,	O
"FORMAT"	pointer
,	O
0	int
,	O
"select output format (or set back to default)"	pointer
}	O
,	O
{	O
"up"	pointer
,	O
UP_OPTION	int
,	O
NULL	O
,	O
0	int
,	O
"activate the interface (default if address is given)"	pointer
}	O
,	O
{	O
"down"	pointer
,	O
DOWN_OPTION	int
,	O
NULL	O
,	O
0	int
,	O
"shut the interface down"	pointer
}	O
,	O
{	O
"flags"	pointer
,	O
'F'	O
,	O
"FLAG[,FLAG...]"	pointer
,	O
0	int
,	O
"set interface flags"	pointer
}	O
,	O
{	O
"short"	pointer
,	O
's'	O
,	O
NULL	O
,	O
0	int
,	O
"short output format"	pointer
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
const	O
char	O
doc	pointer
[	O
]	O
=	O
"Configure network interfaces."	pointer
;	O
const	O
char	O
*	O
program_authors	array
[	O
]	O
=	O
{	O
"Marcus Brinkmann"	pointer
,	O
NULL	O
}	O
;	O
struct	O
format	pointer
*	O
format_find	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
format	pointer
*	O
frm	pointer
;	O
for	O
(	O
frm	pointer
=	O
formats	array
;	O
frm	pointer
->	O
name	pointer
;	O
frm	pointer
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
frm	pointer
->	O
name	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
return	O
frm	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
struct	O
ifconfig	struct
*	O
parse_opt_new_ifs	function
(	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
ifconfig	struct
*	O
ifp	pointer
;	O
ifs_cmdline	int
=	O
1	int
;	O
ifs	pointer
=	O
realloc	function
(	O
ifs	pointer
,	O
++	O
nifs	int
*	O
sizeof	O
(	O
struct	O
ifconfig	struct
)	O
)	O
;	O
if	O
(	O
!	O
ifs	pointer
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"can't get memory for interface configuration"	pointer
)	O
;	O
ifp	pointer
=	O
&	O
ifs	pointer
[	O
nifs	int
-	O
1	int
]	O
;	O
*	O
ifp	pointer
=	O
ifconfig_initializer	struct
;	O
ifp	pointer
->	O
name	pointer
=	O
name	pointer
;	O
return	O
ifp	pointer
;	O
}	O
PARSE_OPT_SET_ADDR	O
(	O
address	pointer
,	O
address	pointer
,	O
ADDR	O
)	O
PARSE_OPT_SET_ADDR	O
(	O
netmask	pointer
,	O
netmask	pointer
,	O
NETMASK	O
)	O
PARSE_OPT_SET_ADDR	O
(	O
dstaddr	pointer
,	O
destination	O
/	O
peer	O
address	pointer
,	O
DSTADDR	O
)	O
PARSE_OPT_SET_ADDR	O
(	O
brdaddr	pointer
,	O
broadcast	O
address	pointer
,	O
BRDADDR	O
)	O
PARSE_OPT_SET_INT	O
(	O
mtu	int
,	O
mtu	int
value	O
,	O
MTU	O
)	O
PARSE_OPT_SET_INT	O
(	O
metric	int
,	O
metric	int
value	O
,	O
METRIC	O
)	O
void	O
parse_opt_set_af	function
(	O
struct	O
ifconfig	struct
*	O
ifp	pointer
,	O
char	O
*	O
af	short
)	O
{	O
if	O
(	O
!	O
ifp	pointer
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"no interface specified for address family `%s'"	pointer
,	O
af	short
)	O
;	O
if	O
(	O
!	O
strcasecmp	function
(	O
af	short
,	O
"inet"	pointer
)	O
)	O
ifp	pointer
->	O
af	short
=	O
AF_INET	O
;	O
else	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"unknown address family `%s' for interface `%s': is not a number"	pointer
,	O
af	short
,	O
ifp	pointer
->	O
name	pointer
)	O
;	O
ifp	pointer
->	O
valid	int
|=	O
IF_VALID_AF	int
;	O
}	O
void	O
parse_opt_set_flag	function
(	O
struct	O
ifconfig	struct
*	O
ifp	pointer
,	O
int	O
flag	int
,	O
int	O
rev	int
)	O
{	O
if	O
(	O
rev	int
)	O
ifp	pointer
->	O
clrflags	int
|=	O
flag	int
;	O
else	O
ifp	pointer
->	O
setflags	int
|=	O
flag	int
;	O
}	O
void	O
parse_opt_flag_list	function
(	O
struct	O
ifconfig	struct
*	O
ifp	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
while	O
(	O
*	O
name	pointer
)	O
{	O
int	O
mask	int
,	O
rev	int
;	O
char	O
*	O
p	pointer
=	O
strchr	function
(	O
name	pointer
,	O
','	O
)	O
;	O
size_t	long
len	long
;	O
if	O
(	O
p	pointer
)	O
len	long
=	O
p	pointer
-	O
name	pointer
;	O
else	O
len	long
=	O
strlen	function
(	O
name	pointer
)	O
;	O
if	O
(	O
(	O
mask	int
=	O
if_nametoflag	function
(	O
name	pointer
,	O
len	long
,	O
&	O
rev	int
)	O
)	O
==	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"unknown flag %*.*s"	pointer
,	O
len	long
,	O
len	long
,	O
name	pointer
)	O
;	O
parse_opt_set_flag	function
(	O
ifp	pointer
,	O
mask	int
,	O
rev	int
)	O
;	O
name	pointer
+=	O
len	long
;	O
if	O
(	O
p	pointer
)	O
name	pointer
++	O
;	O
}	O
}	O
void	O
parse_opt_set_point_to_point	function
(	O
struct	O
ifconfig	struct
*	O
ifp	pointer
,	O
char	O
*	O
addr	pointer
)	O
{	O
parse_opt_set_dstaddr	function
(	O
ifp	pointer
,	O
addr	pointer
)	O
;	O
parse_opt_set_flag	function
(	O
ifp	pointer
,	O
IFF_POINTOPOINT	int
,	O
0	int
)	O
;	O
}	O
void	O
parse_opt_set_default_format	function
(	O
const	O
char	O
*	O
format	pointer
)	O
{	O
struct	O
format	pointer
*	O
frm	pointer
;	O
if	O
(	O
!	O
format	pointer
)	O
format	pointer
=	O
system_default_format	pointer
?	O
system_default_format	pointer
:	O
"default"	pointer
;	O
for	O
(	O
frm	pointer
=	O
formats	array
;	O
frm	pointer
->	O
name	pointer
;	O
frm	pointer
++	O
)	O
if	O
(	O
!	O
strcmp	function
(	O
format	pointer
,	O
frm	pointer
->	O
name	pointer
)	O
)	O
break	O
;	O
if	O
(	O
frm	pointer
==	O
NULL	O
||	O
frm	pointer
->	O
templ	pointer
==	O
NULL	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"%s: unknown output format"	pointer
,	O
format	pointer
)	O
;	O
default_format	pointer
=	O
frm	pointer
->	O
templ	pointer
;	O
}	O
static	O
int	O
is_comment_line	function
(	O
const	O
char	O
*	O
p	pointer
,	O
size_t	long
len	long
)	O
{	O
while	O
(	O
len	long
--	O
)	O
{	O
int	O
c	char
=	O
*	O
p	pointer
++	O
;	O
switch	O
(	O
c	char
)	O
{	O
case	O
' '	O
:	O
case	O
'\t'	O
:	O
continue	O
;	O
case	O
'#'	O
:	O
return	O
1	int
;	O
default	O
:	O
return	O
0	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
void	O
parse_opt_set_default_format_from_file	function
(	O
const	O
char	O
*	O
file	pointer
)	O
{	O
static	O
struct	O
obstack	struct
stk	struct
;	O
FILE	struct
*	O
fp	pointer
;	O
char	O
*	O
buf	pointer
=	O
NULL	O
;	O
size_t	long
size	long
=	O
0	int
;	O
fp	pointer
=	O
fopen	function
(	O
file	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
!	O
fp	pointer
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"cannot open format file %s"	pointer
,	O
file	pointer
)	O
;	O
obstack_init	O
(	O
&	O
stk	struct
)	O
;	O
while	O
(	O
getline	function
(	O
&	O
buf	pointer
,	O
&	O
size	long
,	O
fp	pointer
)	O
>	O
0	int
)	O
{	O
size_t	long
len	long
=	O
strlen	function
(	O
buf	pointer
)	O
;	O
if	O
(	O
len	long
>=	O
1	int
&&	O
buf	pointer
[	O
len	long
-	O
1	int
]	O
==	O
'\n'	O
)	O
len	long
--	O
;	O
if	O
(	O
len	long
==	O
0	int
||	O
is_comment_line	function
(	O
buf	pointer
,	O
len	long
)	O
)	O
continue	O
;	O
obstack_grow	O
(	O
&	O
stk	struct
,	O
buf	pointer
,	O
len	long
)	O
;	O
}	O
free	function
(	O
buf	pointer
)	O
;	O
fclose	function
(	O
fp	pointer
)	O
;	O
obstack_1grow	O
(	O
&	O
stk	struct
,	O
0	int
)	O
;	O
default_format	pointer
=	O
obstack_finish	O
(	O
&	O
stk	struct
)	O
;	O
}	O
void	O
parse_opt_finalize	function
(	O
struct	O
ifconfig	struct
*	O
ifp	pointer
)	O
{	O
if	O
(	O
ifp	pointer
&&	O
!	O
ifp	pointer
->	O
valid	int
)	O
{	O
ifp	pointer
->	O
valid	int
=	O
IF_VALID_FORMAT	int
;	O
ifp	pointer
->	O
format	pointer
=	O
default_format	pointer
;	O
}	O
}	O
static	O
error_t	int
parse_opt	function
(	O
int	O
key	int
,	O
char	O
*	O
arg	pointer
,	O
struct	O
argp_state	struct
*	O
state	pointer
)	O
{	O
struct	O
ifconfig	struct
*	O
ifp	pointer
=	O
*	O
(	O
struct	O
ifconfig	struct
*	O
*	O
)	O
state	pointer
->	O
input	pointer
;	O
switch	O
(	O
key	int
)	O
{	O
case	O
ARGP_KEY_INIT	int
:	O
state	pointer
->	O
child_inputs	pointer
[	O
0	int
]	O
=	O
state	pointer
->	O
input	pointer
;	O
break	O
;	O
case	O
'i'	O
:	O
parse_opt_finalize	function
(	O
ifp	pointer
)	O
;	O
ifp	pointer
=	O
parse_opt_new_ifs	function
(	O
arg	pointer
)	O
;	O
*	O
(	O
struct	O
ifconfig	struct
*	O
*	O
)	O
state	pointer
->	O
input	pointer
=	O
ifp	pointer
;	O
break	O
;	O
case	O
'a'	O
:	O
all_option	int
=	O
1	int
;	O
break	O
;	O
case	O
'A'	O
:	O
parse_opt_set_address	function
(	O
ifp	pointer
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
'm'	O
:	O
parse_opt_set_netmask	function
(	O
ifp	pointer
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
'd'	O
:	O
case	O
'p'	O
:	O
parse_opt_set_point_to_point	function
(	O
ifp	pointer
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
'b'	O
:	O
case	O
'B'	O
:	O
parse_opt_set_brdaddr	function
(	O
ifp	pointer
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
'F'	O
:	O
parse_opt_flag_list	function
(	O
ifp	pointer
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
'M'	O
:	O
parse_opt_set_mtu	function
(	O
ifp	pointer
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
's'	O
:	O
parse_opt_set_default_format	function
(	O
"netstat"	pointer
)	O
;	O
break	O
;	O
case	O
'v'	O
:	O
verbose	int
++	O
;	O
break	O
;	O
case	O
METRIC_OPTION	int
:	O
parse_opt_set_metric	function
(	O
ifp	pointer
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
FORMAT_OPTION	int
:	O
if	O
(	O
arg	pointer
&&	O
arg	pointer
[	O
0	int
]	O
==	O
'@'	O
)	O
parse_opt_set_default_format_from_file	function
(	O
arg	pointer
+	O
1	int
)	O
;	O
else	O
parse_opt_set_default_format	function
(	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
UP_OPTION	int
:	O
parse_opt_set_flag	function
(	O
ifp	pointer
,	O
IFF_UP	int
|	O
IFF_RUNNING	int
,	O
0	int
)	O
;	O
break	O
;	O
case	O
DOWN_OPTION	int
:	O
parse_opt_set_flag	function
(	O
ifp	pointer
,	O
IFF_UP	int
,	O
1	int
)	O
;	O
break	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
default_help_filter	function
(	O
int	O
key	int
,	O
const	O
char	O
*	O
text	pointer
,	O
void	O
*	O
input	pointer
)	O
{	O
char	O
*	O
s	pointer
;	O
switch	O
(	O
key	int
)	O
{	O
default	O
:	O
s	pointer
=	O
(	O
char	O
*	O
)	O
text	pointer
;	O
break	O
;	O
case	O
ARGP_KEY_HELP_EXTRA	int
:	O
s	pointer
=	O
if_list_flags	function
(	O
"Known flags are: "	pointer
)	O
;	O
}	O
return	O
s	pointer
;	O
}	O
static	O
struct	O
argp_child	struct
argp_children	array
[	O
2	int
]	O
;	O
static	O
struct	O
argp	struct
argp	struct
=	O
{	O
argp_options	array
,	O
parse_opt	function
,	O
NULL	O
,	O
doc	pointer
,	O
NULL	O
,	O
default_help_filter	function
}	O
;	O
static	O
int	O
cmp_if_name	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
const	O
struct	O
ifconfig	struct
*	O
ifa	pointer
=	O
a	pointer
;	O
const	O
struct	O
ifconfig	struct
*	O
ifb	pointer
=	O
b	pointer
;	O
return	O
strcmp	function
(	O
ifa	pointer
->	O
name	pointer
,	O
ifb	pointer
->	O
name	pointer
)	O
;	O
}	O
void	O
parse_cmdline	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
int	O
index	function
;	O
struct	O
ifconfig	struct
*	O
ifp	pointer
=	O
ifs	pointer
;	O
parse_opt_set_default_format	function
(	O
NULL	O
)	O
;	O
iu_argp_init	O
(	O
"ifconfig"	pointer
,	O
program_authors	array
)	O
;	O
argp_children	array
[	O
0	int
]	O
=	O
system_argp_child	struct
;	O
argp	struct
.	O
children	pointer
=	O
argp_children	array
;	O
argp	struct
.	O
args_doc	pointer
=	O
system_help	pointer
;	O
argp_parse	function
(	O
&	O
argp	struct
,	O
argc	int
,	O
argv	array
,	O
ARGP_IN_ORDER	int
,	O
&	O
index	function
,	O
&	O
ifp	pointer
)	O
;	O
parse_opt_finalize	function
(	O
ifp	pointer
)	O
;	O
if	O
(	O
index	function
<	O
argc	int
)	O
{	O
if	O
(	O
!	O
system_parse_opt_rest	function
(	O
&	O
ifp	pointer
,	O
argc	int
-	O
index	function
,	O
&	O
argv	array
[	O
index	function
]	O
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"invalid arguments"	pointer
)	O
;	O
parse_opt_finalize	function
(	O
ifp	pointer
)	O
;	O
}	O
if	O
(	O
!	O
ifs	pointer
)	O
{	O
struct	O
if_nameindex	struct
*	O
ifnx	pointer
,	O
*	O
ifnxp	pointer
;	O
ifnx	pointer
=	O
ifnxp	pointer
=	O
system_if_nameindex	pointer
(	O
)	O
;	O
if	O
(	O
!	O
ifnx	pointer
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"could not get list of interfaces"	pointer
)	O
;	O
while	O
(	O
ifnxp	pointer
->	O
if_index	int
!=	O
0	int
||	O
ifnxp	pointer
->	O
if_name	pointer
!=	O
NULL	O
)	O
{	O
struct	O
ifconfig	struct
*	O
ifp	pointer
;	O
ifs	pointer
=	O
realloc	function
(	O
ifs	pointer
,	O
++	O
nifs	int
*	O
sizeof	O
(	O
struct	O
ifconfig	struct
)	O
)	O
;	O
if	O
(	O
!	O
ifs	pointer
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"can't get memory for interface configuration"	pointer
)	O
;	O
ifp	pointer
=	O
&	O
ifs	pointer
[	O
nifs	int
-	O
1	int
]	O
;	O
*	O
ifp	pointer
=	O
ifconfig_initializer	struct
;	O
ifp	pointer
->	O
name	pointer
=	O
ifnxp	pointer
->	O
if_name	pointer
;	O
ifp	pointer
->	O
valid	int
=	O
IF_VALID_FORMAT	int
;	O
ifp	pointer
->	O
format	pointer
=	O
default_format	pointer
;	O
ifnxp	pointer
++	O
;	O
}	O
qsort	function
(	O
ifs	pointer
,	O
nifs	int
,	O
sizeof	O
(	O
ifs	pointer
[	O
0	int
]	O
)	O
,	O
cmp_if_name	function
)	O
;	O
}	O
}	O
