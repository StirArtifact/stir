HASHTYPE	O
calc_hash_key	function
(	O
string	pointer
)	O
STRINGTYPE	O
*	O
string	pointer
;	O
{	O
int	O
i	int
;	O
int	O
j	int
;	O
HASHTYPE	O
hash_key	long
;	O
HASHTYPE	O
temp_key	long
;	O
unsigned	O
char	O
*	O
string_tmp	pointer
;	O
j	int
=	O
0	int
;	O
hash_key	long
=	O
0	int
;	O
switch	O
(	O
gi_hashmovement_ind	enum
)	O
{	O
case	O
hm_binary	int
:	O
string_tmp	pointer
=	O
string	pointer
->	O
string	pointer
;	O
while	O
(	O
string_tmp	pointer
<	O
string	pointer
->	O
string	pointer
+	O
string	pointer
->	O
length	long
)	O
{	O
i	int
=	O
0	int
;	O
temp_key	long
=	O
0	int
;	O
while	O
(	O
i	int
<	O
sizeof	O
(	O
temp_key	long
)	O
&&	O
string_tmp	pointer
<	O
string	pointer
->	O
string	pointer
+	O
string	pointer
->	O
length	long
)	O
{	O
temp_key	long
<<=	O
8	int
;	O
temp_key	long
|=	O
*	O
string_tmp	pointer
;	O
i	int
++	O
;	O
string_tmp	pointer
++	O
;	O
}	O
temp_key	long
<<=	O
j	int
;	O
hash_key	long
=	O
(	O
hash_key	long
^	O
temp_key	long
)	O
;	O
j	int
++	O
;	O
}	O
break	O
;	O
case	O
hm_binary_long	int
:	O
string_tmp	pointer
=	O
string	pointer
->	O
string	pointer
;	O
while	O
(	O
string_tmp	pointer
<	O
string	pointer
->	O
string	pointer
+	O
string	pointer
->	O
length	long
)	O
{	O
i	int
=	O
0	int
;	O
temp_key	long
=	O
0	int
;	O
while	O
(	O
i	int
<	O
sizeof	O
(	O
temp_key	long
)	O
*	O
2	int
&&	O
string_tmp	pointer
<	O
string	pointer
->	O
string	pointer
+	O
string	pointer
->	O
length	long
)	O
{	O
temp_key	long
<<=	O
4	int
;	O
temp_key	long
|=	O
(	O
*	O
string_tmp	pointer
&	O
15	int
)	O
;	O
i	int
++	O
;	O
string_tmp	pointer
++	O
;	O
}	O
temp_key	long
<<=	O
j	int
;	O
hash_key	long
=	O
(	O
hash_key	long
^	O
temp_key	long
)	O
;	O
j	int
++	O
;	O
}	O
break	O
;	O
case	O
hm_number	int
:	O
hash_key	long
=	O
dstrtonum	function
(	O
string	pointer
,	O
NULL	O
,	O
10	int
)	O
;	O
string_tmp	pointer
=	O
string	pointer
->	O
string	pointer
;	O
while	O
(	O
string_tmp	pointer
<	O
string	pointer
->	O
string	pointer
+	O
string	pointer
->	O
length	long
)	O
{	O
hash_key	long
*=	O
10	int
;	O
hash_key	long
+=	O
*	O
string_tmp	pointer
-	O
'0'	O
;	O
string_tmp	pointer
++	O
;	O
}	O
break	O
;	O
case	O
hm_beginning	int
:	O
case	O
hm_end	int
:	O
switch	O
(	O
gi_hashmovement_ind	enum
)	O
{	O
case	O
hm_beginning	int
:	O
string_tmp	pointer
=	O
string	pointer
->	O
string	pointer
;	O
while	O
(	O
(	O
i	int
<	O
(	O
sizeof	O
hash_key	long
)	O
*	O
8	int
/	O
3	int
)	O
&&	O
string_tmp	pointer
<	O
string	pointer
->	O
string	pointer
+	O
string	pointer
->	O
length	long
)	O
{	O
hash_key	long
<<=	O
3	int
;	O
hash_key	long
|=	O
(	O
*	O
string_tmp	pointer
&	O
7	int
)	O
;	O
i	int
++	O
;	O
string_tmp	pointer
++	O
;	O
}	O
break	O
;	O
case	O
hm_end	int
:	O
string_tmp	pointer
=	O
string	pointer
->	O
string	pointer
;	O
if	O
(	O
string	pointer
->	O
length	long
>	O
(	O
sizeof	O
hash_key	long
)	O
*	O
8	int
/	O
3	int
)	O
{	O
string_tmp	pointer
+=	O
string	pointer
->	O
length	long
-	O
(	O
(	O
sizeof	O
hash_key	long
)	O
*	O
8	int
/	O
3	int
)	O
;	O
}	O
while	O
(	O
(	O
i	int
<	O
(	O
sizeof	O
hash_key	long
)	O
*	O
8	int
/	O
3	int
)	O
&&	O
string_tmp	pointer
<	O
string	pointer
->	O
string	pointer
+	O
string	pointer
->	O
length	long
)	O
{	O
hash_key	long
<<=	O
3	int
;	O
hash_key	long
|=	O
(	O
*	O
string_tmp	pointer
&	O
7	int
)	O
;	O
i	int
++	O
;	O
string_tmp	pointer
++	O
;	O
}	O
break	O
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
return	O
hash_key	long
;	O
}	O
HASHTYPE	O
find_table_entry	function
(	O
string	pointer
,	O
hash_table	pointer
,	O
hash_table_size	long
)	O
STRINGTYPE	O
*	O
string	pointer
;	O
val_entry	struct
*	O
hash_table	pointer
;	O
long	O
int	O
hash_table_size	long
;	O
{	O
HASHTYPE	O
temp_key	long
;	O
HASHTYPE	O
orig_hash_key	long
;	O
orig_hash_key	long
=	O
calc_hash_key	function
(	O
string	pointer
)	O
;	O
temp_key	long
=	O
orig_hash_key	long
%	O
hash_table_size	long
;	O
if	O
(	O
hash_table	pointer
[	O
temp_key	long
]	O
.	O
hash_key	long
==	O
orig_hash_key	long
&&	O
hash_table	pointer
[	O
temp_key	long
]	O
.	O
value	pointer
!=	O
NULL	O
&&	O
dstrcmp	function
(	O
hash_table	pointer
[	O
temp_key	long
]	O
.	O
value	pointer
,	O
string	pointer
)	O
==	O
0	int
)	O
return	O
temp_key	long
;	O
temp_key	long
=	O
(	O
temp_key	long
+	O
1	int
)	O
%	O
hash_table_size	long
;	O
while	O
(	O
temp_key	long
!=	O
orig_hash_key	long
%	O
hash_table_size	long
&&	O
hash_table	pointer
[	O
temp_key	long
]	O
.	O
value	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
hash_table	pointer
[	O
temp_key	long
]	O
.	O
hash_key	long
==	O
orig_hash_key	long
&&	O
hash_table	pointer
[	O
temp_key	long
]	O
.	O
value	pointer
!=	O
NULL	O
&&	O
dstrcmp	function
(	O
hash_table	pointer
[	O
temp_key	long
]	O
.	O
value	pointer
,	O
string	pointer
)	O
==	O
0	int
)	O
return	O
temp_key	long
;	O
temp_key	long
=	O
(	O
temp_key	long
+	O
1	int
)	O
%	O
hash_table_size	long
;	O
}	O
return	O
-	O
1	int
;	O
}	O
HASHTYPE	O
create_table_entry	function
(	O
string	pointer
,	O
hash_table	pointer
,	O
hash_table_size	long
)	O
STRINGTYPE	O
*	O
string	pointer
;	O
val_entry	struct
*	O
hash_table	pointer
;	O
long	O
int	O
hash_table_size	long
;	O
{	O
HASHTYPE	O
temp_key	long
;	O
HASHTYPE	O
orig_hash_key	long
;	O
orig_hash_key	long
=	O
calc_hash_key	function
(	O
string	pointer
)	O
;	O
temp_key	long
=	O
orig_hash_key	long
%	O
hash_table_size	long
;	O
if	O
(	O
hash_table	pointer
[	O
temp_key	long
]	O
.	O
value	pointer
==	O
NULL	O
)	O
{	O
hash_table	pointer
[	O
temp_key	long
]	O
.	O
hash_key	long
=	O
orig_hash_key	long
;	O
hash_table	pointer
[	O
temp_key	long
]	O
.	O
another_for_key	int
=	O
0	int
;	O
hash_table	pointer
[	O
temp_key	long
]	O
.	O
value	pointer
=	O
string	pointer
;	O
return	O
temp_key	long
;	O
}	O
if	O
(	O
dstrcmp	function
(	O
hash_table	pointer
[	O
temp_key	long
]	O
.	O
value	pointer
,	O
string	pointer
)	O
==	O
0	int
)	O
hash_table	pointer
[	O
temp_key	long
]	O
.	O
another_for_key	int
++	O
;	O
temp_key	long
=	O
(	O
temp_key	long
+	O
1	int
)	O
%	O
hash_table_size	long
;	O
while	O
(	O
temp_key	long
!=	O
orig_hash_key	long
%	O
hash_table_size	long
&&	O
hash_table	pointer
[	O
temp_key	long
]	O
.	O
value	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
dstrcmp	function
(	O
hash_table	pointer
[	O
temp_key	long
]	O
.	O
value	pointer
,	O
string	pointer
)	O
==	O
0	int
)	O
hash_table	pointer
[	O
temp_key	long
]	O
.	O
another_for_key	int
++	O
;	O
temp_key	long
=	O
(	O
temp_key	long
+	O
1	int
)	O
%	O
hash_table_size	long
;	O
}	O
if	O
(	O
hash_table	pointer
[	O
temp_key	long
]	O
.	O
value	pointer
==	O
NULL	O
)	O
{	O
hash_table	pointer
[	O
temp_key	long
]	O
.	O
hash_key	long
=	O
orig_hash_key	long
;	O
hash_table	pointer
[	O
temp_key	long
]	O
.	O
another_for_key	int
=	O
0	int
;	O
hash_table	pointer
[	O
temp_key	long
]	O
.	O
value	pointer
=	O
string	pointer
;	O
return	O
temp_key	long
;	O
}	O
dstrfree	function
(	O
string	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
