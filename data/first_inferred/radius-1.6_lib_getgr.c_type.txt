LOCK_DECLARE	O
(	O
lock	O
)	O
static	O
struct	O
group	struct
*	O
store_group	function
(	O
struct	O
group	struct
*	O
grp	pointer
)	O
{	O
int	O
len	int
;	O
int	O
i	int
,	O
grcnt	int
;	O
struct	O
group	struct
*	O
result	pointer
;	O
char	O
*	O
buffer	pointer
;	O
if	O
(	O
!	O
grp	pointer
)	O
return	O
NULL	O
;	O
for	O
(	O
grcnt	int
=	O
0	int
;	O
grp	pointer
->	O
gr_mem	pointer
[	O
grcnt	int
]	O
;	O
grcnt	int
++	O
)	O
;	O
len	int
=	O
sizeof	O
(	O
result	pointer
[	O
0	int
]	O
)	O
+	O
strlen	function
(	O
grp	pointer
->	O
gr_name	pointer
)	O
+	O
1	int
+	O
strlen	function
(	O
grp	pointer
->	O
gr_passwd	pointer
)	O
+	O
1	int
+	O
(	O
grcnt	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
grp	pointer
->	O
gr_mem	pointer
[	O
0	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
grcnt	int
;	O
i	int
++	O
)	O
len	int
+=	O
strlen	function
(	O
grp	pointer
->	O
gr_mem	pointer
[	O
i	int
]	O
)	O
+	O
1	int
;	O
result	pointer
=	O
grad_emalloc	function
(	O
len	int
)	O
;	O
*	O
result	pointer
=	O
*	O
grp	pointer
;	O
result	pointer
->	O
gr_mem	pointer
=	O
(	O
char	O
*	O
*	O
)	O
(	O
result	pointer
+	O
1	int
)	O
;	O
buffer	pointer
=	O
(	O
char	O
*	O
)	O
(	O
result	pointer
->	O
gr_mem	pointer
+	O
grcnt	int
+	O
1	int
)	O
;	O
COPY	O
(	O
gr_name	pointer
)	O
;	O
COPY	O
(	O
gr_passwd	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
grcnt	int
;	O
i	int
++	O
)	O
COPY	O
(	O
gr_mem	pointer
[	O
i	int
]	O
)	O
;	O
result	pointer
->	O
gr_mem	pointer
[	O
i	int
]	O
=	O
NULL	O
;	O
return	O
result	pointer
;	O
}	O
struct	O
group	struct
*	O
grad_getgrnam	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
group	struct
*	O
grp	pointer
;	O
LOCK_SET	O
(	O
lock	O
)	O
;	O
grp	pointer
=	O
store_group	function
(	O
getgrnam	function
(	O
name	pointer
)	O
)	O
;	O
LOCK_RELEASE	O
(	O
lock	O
)	O
;	O
return	O
grp	pointer
;	O
}	O
