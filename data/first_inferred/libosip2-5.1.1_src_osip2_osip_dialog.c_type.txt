void	O
osip_dialog_set_state	function
(	O
osip_dialog_t	struct
*	O
dialog	pointer
,	O
state_t	enum
state	pointer
)	O
{	O
if	O
(	O
dialog	pointer
==	O
NULL	O
)	O
return	O
;	O
dialog	pointer
->	O
state	pointer
=	O
state	pointer
;	O
}	O
int	O
osip_dialog_update_route_set_as_uas	function
(	O
osip_dialog_t	struct
*	O
dialog	pointer
,	O
osip_message_t	struct
*	O
invite	pointer
)	O
{	O
osip_contact_t	struct
*	O
contact	pointer
;	O
int	O
i	int
;	O
if	O
(	O
dialog	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
invite	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
osip_list_eol	function
(	O
&	O
invite	pointer
->	O
contacts	struct
,	O
0	int
)	O
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_WARNING	O
,	O
NULL	O
,	O
"missing a contact in invite!\n"	pointer
)	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
dialog	pointer
->	O
remote_contact_uri	pointer
!=	O
NULL	O
)	O
{	O
osip_contact_free	function
(	O
dialog	pointer
->	O
remote_contact_uri	pointer
)	O
;	O
}	O
dialog	pointer
->	O
remote_contact_uri	pointer
=	O
NULL	O
;	O
contact	pointer
=	O
osip_list_get	function
(	O
&	O
invite	pointer
->	O
contacts	struct
,	O
0	int
)	O
;	O
i	int
=	O
osip_contact_clone	function
(	O
contact	pointer
,	O
&	O
(	O
dialog	pointer
->	O
remote_contact_uri	pointer
)	O
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
}	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_dialog_update_osip_cseq_as_uas	function
(	O
osip_dialog_t	struct
*	O
dialog	pointer
,	O
osip_message_t	struct
*	O
invite	pointer
)	O
{	O
if	O
(	O
dialog	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
invite	pointer
==	O
NULL	O
||	O
invite	pointer
->	O
cseq	pointer
==	O
NULL	O
||	O
invite	pointer
->	O
cseq	pointer
->	O
number	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
dialog	pointer
->	O
remote_cseq	int
=	O
osip_atoi	function
(	O
invite	pointer
->	O
cseq	pointer
->	O
number	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_dialog_update_route_set_as_uac	function
(	O
osip_dialog_t	struct
*	O
dialog	pointer
,	O
osip_message_t	struct
*	O
response	pointer
)	O
{	O
osip_contact_t	struct
*	O
contact	pointer
;	O
int	O
i	int
;	O
if	O
(	O
dialog	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
response	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
osip_list_eol	function
(	O
&	O
response	pointer
->	O
contacts	struct
,	O
0	int
)	O
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_WARNING	O
,	O
NULL	O
,	O
"missing a contact in response!\n"	pointer
)	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
dialog	pointer
->	O
remote_contact_uri	pointer
!=	O
NULL	O
)	O
{	O
osip_contact_free	function
(	O
dialog	pointer
->	O
remote_contact_uri	pointer
)	O
;	O
}	O
dialog	pointer
->	O
remote_contact_uri	pointer
=	O
NULL	O
;	O
contact	pointer
=	O
osip_list_get	function
(	O
&	O
response	pointer
->	O
contacts	struct
,	O
0	int
)	O
;	O
i	int
=	O
osip_contact_clone	function
(	O
contact	pointer
,	O
&	O
(	O
dialog	pointer
->	O
remote_contact_uri	pointer
)	O
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
}	O
if	O
(	O
dialog	pointer
->	O
state	pointer
==	O
DIALOG_EARLY	int
&&	O
osip_list_size	function
(	O
&	O
dialog	pointer
->	O
route_set	struct
)	O
>	O
0	int
)	O
{	O
osip_list_special_free	function
(	O
&	O
dialog	pointer
->	O
route_set	struct
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
osip_record_route_free	function
)	O
;	O
osip_list_init	function
(	O
&	O
dialog	pointer
->	O
route_set	struct
)	O
;	O
}	O
if	O
(	O
dialog	pointer
->	O
state	pointer
==	O
DIALOG_EARLY	int
&&	O
osip_list_size	function
(	O
&	O
dialog	pointer
->	O
route_set	struct
)	O
==	O
0	int
)	O
{	O
int	O
pos	int
=	O
0	int
;	O
while	O
(	O
!	O
osip_list_eol	function
(	O
&	O
response	pointer
->	O
record_routes	struct
,	O
pos	int
)	O
)	O
{	O
osip_record_route_t	struct
*	O
rr	pointer
;	O
osip_record_route_t	struct
*	O
rr2	pointer
;	O
rr	pointer
=	O
(	O
osip_record_route_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
response	pointer
->	O
record_routes	struct
,	O
pos	int
)	O
;	O
i	int
=	O
osip_record_route_clone	O
(	O
rr	pointer
,	O
&	O
rr2	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
osip_list_add	function
(	O
&	O
dialog	pointer
->	O
route_set	struct
,	O
rr2	pointer
,	O
0	int
)	O
;	O
pos	int
++	O
;	O
}	O
}	O
if	O
(	O
MSG_IS_STATUS_2XX	O
(	O
response	pointer
)	O
)	O
dialog	pointer
->	O
state	pointer
=	O
DIALOG_CONFIRMED	int
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_dialog_update_tag_as_uac	function
(	O
osip_dialog_t	struct
*	O
dialog	pointer
,	O
osip_message_t	struct
*	O
response	pointer
)	O
{	O
osip_generic_param_t	struct
*	O
tag	pointer
;	O
int	O
i	int
;	O
if	O
(	O
dialog	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
response	pointer
==	O
NULL	O
||	O
response	pointer
->	O
to	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
dialog	pointer
->	O
remote_tag	pointer
!=	O
NULL	O
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_WARNING	O
,	O
NULL	O
,	O
"This dialog already have a remote tag: it can't be changed!\n"	pointer
)	O
)	O
;	O
return	O
OSIP_WRONG_STATE	O
;	O
}	O
i	int
=	O
osip_to_get_tag	O
(	O
response	pointer
->	O
to	pointer
,	O
&	O
tag	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
||	O
tag	pointer
==	O
NULL	O
||	O
tag	pointer
->	O
gvalue	pointer
==	O
NULL	O
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_WARNING	O
,	O
NULL	O
,	O
"Remote UA is not compliant: missing a tag in response!\n"	pointer
)	O
)	O
;	O
dialog	pointer
->	O
remote_tag	pointer
=	O
NULL	O
;	O
}	O
else	O
dialog	pointer
->	O
remote_tag	pointer
=	O
osip_strdup	function
(	O
tag	pointer
->	O
gvalue	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_dialog_match_as_uac	function
(	O
osip_dialog_t	struct
*	O
dlg	pointer
,	O
osip_message_t	struct
*	O
answer	pointer
)	O
{	O
osip_generic_param_t	struct
*	O
tag_param_local	pointer
;	O
osip_generic_param_t	struct
*	O
tag_param_remote	pointer
;	O
char	O
*	O
tmp	pointer
;	O
int	O
i	int
;	O
if	O
(	O
dlg	pointer
==	O
NULL	O
||	O
dlg	pointer
->	O
call_id	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
answer	pointer
==	O
NULL	O
||	O
answer	pointer
->	O
call_id	pointer
==	O
NULL	O
||	O
answer	pointer
->	O
from	pointer
==	O
NULL	O
||	O
answer	pointer
->	O
to	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_WARNING	O
,	O
NULL	O
,	O
"Using this method is discouraged. See source code explanations!\n"	pointer
)	O
)	O
;	O
i	int
=	O
osip_call_id_to_str	function
(	O
answer	pointer
->	O
call_id	pointer
,	O
&	O
tmp	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
if	O
(	O
0	int
!=	O
strcmp	function
(	O
dlg	pointer
->	O
call_id	pointer
,	O
tmp	pointer
)	O
)	O
{	O
osip_free	O
(	O
tmp	pointer
)	O
;	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
}	O
osip_free	O
(	O
tmp	pointer
)	O
;	O
i	int
=	O
osip_from_get_tag	O
(	O
answer	pointer
->	O
from	pointer
,	O
&	O
tag_param_local	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
if	O
(	O
dlg	pointer
->	O
local_tag	pointer
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
if	O
(	O
0	int
!=	O
strcmp	function
(	O
tag_param_local	pointer
->	O
gvalue	pointer
,	O
dlg	pointer
->	O
local_tag	pointer
)	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
i	int
=	O
osip_to_get_tag	O
(	O
answer	pointer
->	O
to	pointer
,	O
&	O
tag_param_remote	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
&&	O
dlg	pointer
->	O
remote_tag	pointer
!=	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
if	O
(	O
i	int
!=	O
0	int
&&	O
dlg	pointer
->	O
remote_tag	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
0	int
==	O
osip_from_compare	function
(	O
(	O
osip_from_t	struct
*	O
)	O
dlg	pointer
->	O
local_uri	pointer
,	O
(	O
osip_from_t	struct
*	O
)	O
answer	pointer
->	O
from	pointer
)	O
&&	O
0	int
==	O
osip_from_compare	function
(	O
dlg	pointer
->	O
remote_uri	pointer
,	O
answer	pointer
->	O
to	pointer
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
}	O
if	O
(	O
dlg	pointer
->	O
remote_tag	pointer
==	O
NULL	O
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_WARNING	O
,	O
NULL	O
,	O
"Remote UA is not compliant: missing a tag in To fields!\n"	pointer
)	O
)	O
;	O
if	O
(	O
0	int
==	O
osip_from_compare	function
(	O
(	O
osip_from_t	struct
*	O
)	O
dlg	pointer
->	O
local_uri	pointer
,	O
(	O
osip_from_t	struct
*	O
)	O
answer	pointer
->	O
from	pointer
)	O
&&	O
0	int
==	O
osip_from_compare	function
(	O
dlg	pointer
->	O
remote_uri	pointer
,	O
answer	pointer
->	O
to	pointer
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
}	O
if	O
(	O
0	int
==	O
strcmp	function
(	O
tag_param_remote	pointer
->	O
gvalue	pointer
,	O
dlg	pointer
->	O
remote_tag	pointer
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
}	O
int	O
osip_dialog_match_as_uas	function
(	O
osip_dialog_t	struct
*	O
dlg	pointer
,	O
osip_message_t	struct
*	O
request	pointer
)	O
{	O
osip_generic_param_t	struct
*	O
tag_param_remote	pointer
;	O
int	O
i	int
;	O
char	O
*	O
tmp	pointer
;	O
if	O
(	O
dlg	pointer
==	O
NULL	O
||	O
dlg	pointer
->	O
call_id	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
request	pointer
==	O
NULL	O
||	O
request	pointer
->	O
call_id	pointer
==	O
NULL	O
||	O
request	pointer
->	O
from	pointer
==	O
NULL	O
||	O
request	pointer
->	O
to	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_call_id_to_str	function
(	O
request	pointer
->	O
call_id	pointer
,	O
&	O
tmp	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
if	O
(	O
0	int
!=	O
strcmp	function
(	O
dlg	pointer
->	O
call_id	pointer
,	O
tmp	pointer
)	O
)	O
{	O
osip_free	O
(	O
tmp	pointer
)	O
;	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
}	O
osip_free	O
(	O
tmp	pointer
)	O
;	O
if	O
(	O
dlg	pointer
->	O
local_tag	pointer
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
i	int
=	O
osip_from_get_tag	O
(	O
request	pointer
->	O
from	pointer
,	O
&	O
tag_param_remote	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
&&	O
dlg	pointer
->	O
remote_tag	pointer
!=	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
if	O
(	O
i	int
!=	O
0	int
&&	O
dlg	pointer
->	O
remote_tag	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
0	int
==	O
osip_from_compare	function
(	O
(	O
osip_from_t	struct
*	O
)	O
dlg	pointer
->	O
remote_uri	pointer
,	O
(	O
osip_from_t	struct
*	O
)	O
request	pointer
->	O
from	pointer
)	O
&&	O
0	int
==	O
osip_from_compare	function
(	O
dlg	pointer
->	O
local_uri	pointer
,	O
request	pointer
->	O
to	pointer
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
}	O
if	O
(	O
dlg	pointer
->	O
remote_tag	pointer
==	O
NULL	O
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_WARNING	O
,	O
NULL	O
,	O
"Remote UA is not compliant: missing a tag in To feilds!\n"	pointer
)	O
)	O
;	O
if	O
(	O
0	int
==	O
osip_from_compare	function
(	O
(	O
osip_from_t	struct
*	O
)	O
dlg	pointer
->	O
remote_uri	pointer
,	O
(	O
osip_from_t	struct
*	O
)	O
request	pointer
->	O
from	pointer
)	O
&&	O
0	int
==	O
osip_from_compare	function
(	O
dlg	pointer
->	O
local_uri	pointer
,	O
request	pointer
->	O
to	pointer
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
}	O
if	O
(	O
0	int
==	O
strcmp	function
(	O
tag_param_remote	pointer
->	O
gvalue	pointer
,	O
dlg	pointer
->	O
remote_tag	pointer
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
}	O
static	O
int	O
__osip_dialog_init	function
(	O
osip_dialog_t	struct
*	O
*	O
dialog	pointer
,	O
osip_message_t	struct
*	O
invite	pointer
,	O
osip_message_t	struct
*	O
response	pointer
,	O
osip_from_t	struct
*	O
local	pointer
,	O
osip_to_t	struct
*	O
remote	pointer
,	O
osip_message_t	struct
*	O
remote_msg	pointer
)	O
{	O
int	O
i	int
;	O
int	O
pos	int
;	O
osip_generic_param_t	struct
*	O
tag	pointer
;	O
*	O
dialog	pointer
=	O
NULL	O
;	O
if	O
(	O
response	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
response	pointer
->	O
cseq	pointer
==	O
NULL	O
||	O
local	pointer
==	O
NULL	O
||	O
remote	pointer
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
(	O
*	O
dialog	pointer
)	O
=	O
(	O
osip_dialog_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
osip_dialog_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
dialog	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
memset	function
(	O
*	O
dialog	pointer
,	O
0	int
,	O
sizeof	O
(	O
osip_dialog_t	struct
)	O
)	O
;	O
(	O
*	O
dialog	pointer
)	O
->	O
your_instance	pointer
=	O
NULL	O
;	O
if	O
(	O
MSG_IS_STATUS_2XX	O
(	O
response	pointer
)	O
)	O
(	O
*	O
dialog	pointer
)	O
->	O
state	pointer
=	O
DIALOG_CONFIRMED	int
;	O
else	O
(	O
*	O
dialog	pointer
)	O
->	O
state	pointer
=	O
DIALOG_EARLY	int
;	O
i	int
=	O
osip_call_id_to_str	function
(	O
response	pointer
->	O
call_id	pointer
,	O
&	O
(	O
(	O
*	O
dialog	pointer
)	O
->	O
call_id	pointer
)	O
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_ERROR	O
,	O
NULL	O
,	O
"Could not establish dialog!\n"	pointer
)	O
)	O
;	O
osip_dialog_free	function
(	O
*	O
dialog	pointer
)	O
;	O
*	O
dialog	pointer
=	O
NULL	O
;	O
return	O
i	int
;	O
}	O
i	int
=	O
osip_to_get_tag	O
(	O
local	pointer
,	O
&	O
tag	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_ERROR	O
,	O
NULL	O
,	O
"Could not establish dialog!\n"	pointer
)	O
)	O
;	O
osip_dialog_free	function
(	O
*	O
dialog	pointer
)	O
;	O
*	O
dialog	pointer
=	O
NULL	O
;	O
return	O
i	int
;	O
}	O
(	O
*	O
dialog	pointer
)	O
->	O
local_tag	pointer
=	O
osip_strdup	function
(	O
tag	pointer
->	O
gvalue	pointer
)	O
;	O
i	int
=	O
osip_from_get_tag	O
(	O
remote	pointer
,	O
&	O
tag	pointer
)	O
;	O
if	O
(	O
i	int
==	O
0	int
)	O
(	O
*	O
dialog	pointer
)	O
->	O
remote_tag	pointer
=	O
osip_strdup	function
(	O
tag	pointer
->	O
gvalue	pointer
)	O
;	O
if	O
(	O
invite	pointer
)	O
{	O
osip_uri_param_t	struct
*	O
line_param	pointer
;	O
i	int
=	O
osip_uri_param_get_byname	function
(	O
&	O
invite	pointer
->	O
req_uri	pointer
->	O
url_params	pointer
,	O
"line"	pointer
,	O
&	O
line_param	pointer
)	O
;	O
if	O
(	O
i	int
==	O
0	int
&&	O
line_param	pointer
!=	O
NULL	O
&&	O
line_param	pointer
->	O
gvalue	pointer
!=	O
NULL	O
)	O
(	O
*	O
dialog	pointer
)	O
->	O
line_param	pointer
=	O
osip_strdup	function
(	O
line_param	pointer
->	O
gvalue	pointer
)	O
;	O
}	O
osip_list_init	function
(	O
&	O
(	O
*	O
dialog	pointer
)	O
->	O
route_set	struct
)	O
;	O
pos	int
=	O
0	int
;	O
while	O
(	O
!	O
osip_list_eol	function
(	O
&	O
response	pointer
->	O
record_routes	struct
,	O
pos	int
)	O
)	O
{	O
osip_record_route_t	struct
*	O
rr	pointer
;	O
osip_record_route_t	struct
*	O
rr2	pointer
;	O
rr	pointer
=	O
(	O
osip_record_route_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
response	pointer
->	O
record_routes	struct
,	O
pos	int
)	O
;	O
i	int
=	O
osip_record_route_clone	O
(	O
rr	pointer
,	O
&	O
rr2	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_ERROR	O
,	O
NULL	O
,	O
"Could not establish dialog!\n"	pointer
)	O
)	O
;	O
osip_dialog_free	function
(	O
*	O
dialog	pointer
)	O
;	O
*	O
dialog	pointer
=	O
NULL	O
;	O
return	O
i	int
;	O
}	O
if	O
(	O
invite	pointer
==	O
NULL	O
)	O
osip_list_add	function
(	O
&	O
(	O
*	O
dialog	pointer
)	O
->	O
route_set	struct
,	O
rr2	pointer
,	O
0	int
)	O
;	O
else	O
osip_list_add	function
(	O
&	O
(	O
*	O
dialog	pointer
)	O
->	O
route_set	struct
,	O
rr2	pointer
,	O
-	O
1	int
)	O
;	O
pos	int
++	O
;	O
}	O
(	O
*	O
dialog	pointer
)	O
->	O
local_cseq	int
=	O
osip_atoi	function
(	O
response	pointer
->	O
cseq	pointer
->	O
number	pointer
)	O
;	O
i	int
=	O
osip_from_clone	function
(	O
remote	pointer
,	O
&	O
(	O
(	O
*	O
dialog	pointer
)	O
->	O
remote_uri	pointer
)	O
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_ERROR	O
,	O
NULL	O
,	O
"Could not establish dialog!\n"	pointer
)	O
)	O
;	O
osip_dialog_free	function
(	O
*	O
dialog	pointer
)	O
;	O
*	O
dialog	pointer
=	O
NULL	O
;	O
return	O
i	int
;	O
}	O
i	int
=	O
osip_to_clone	function
(	O
local	pointer
,	O
&	O
(	O
(	O
*	O
dialog	pointer
)	O
->	O
local_uri	pointer
)	O
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_ERROR	O
,	O
NULL	O
,	O
"Could not establish dialog!\n"	pointer
)	O
)	O
;	O
osip_dialog_free	function
(	O
*	O
dialog	pointer
)	O
;	O
*	O
dialog	pointer
=	O
NULL	O
;	O
return	O
i	int
;	O
}	O
{	O
osip_contact_t	struct
*	O
contact	pointer
;	O
if	O
(	O
!	O
osip_list_eol	function
(	O
&	O
remote_msg	pointer
->	O
contacts	struct
,	O
0	int
)	O
)	O
{	O
contact	pointer
=	O
osip_list_get	function
(	O
&	O
remote_msg	pointer
->	O
contacts	struct
,	O
0	int
)	O
;	O
i	int
=	O
osip_contact_clone	function
(	O
contact	pointer
,	O
&	O
(	O
(	O
*	O
dialog	pointer
)	O
->	O
remote_contact_uri	pointer
)	O
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_ERROR	O
,	O
NULL	O
,	O
"Could not establish dialog!\n"	pointer
)	O
)	O
;	O
osip_dialog_free	function
(	O
*	O
dialog	pointer
)	O
;	O
*	O
dialog	pointer
=	O
NULL	O
;	O
return	O
i	int
;	O
}	O
}	O
else	O
{	O
(	O
*	O
dialog	pointer
)	O
->	O
remote_contact_uri	pointer
=	O
NULL	O
;	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_WARNING	O
,	O
NULL	O
,	O
"Remote UA is not compliant: missing a contact in remote message!\n"	pointer
)	O
)	O
;	O
}	O
}	O
(	O
*	O
dialog	pointer
)	O
->	O
secure	int
=	O
-	O
1	int
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_dialog_init_as_uac	function
(	O
osip_dialog_t	struct
*	O
*	O
dialog	pointer
,	O
osip_message_t	struct
*	O
response	pointer
)	O
{	O
int	O
i	int
;	O
i	int
=	O
__osip_dialog_init	function
(	O
dialog	pointer
,	O
NULL	O
,	O
response	pointer
,	O
response	pointer
->	O
from	pointer
,	O
response	pointer
->	O
to	pointer
,	O
response	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
*	O
dialog	pointer
=	O
NULL	O
;	O
return	O
i	int
;	O
}	O
(	O
*	O
dialog	pointer
)	O
->	O
type	pointer
=	O
CALLER	int
;	O
(	O
*	O
dialog	pointer
)	O
->	O
remote_cseq	int
=	O
-	O
1	int
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_dialog_init_as_uac_with_remote_request	function
(	O
osip_dialog_t	struct
*	O
*	O
dialog	pointer
,	O
osip_message_t	struct
*	O
next_request	pointer
,	O
int	O
local_cseq	int
)	O
{	O
int	O
i	int
;	O
*	O
dialog	pointer
=	O
NULL	O
;	O
if	O
(	O
next_request	pointer
->	O
cseq	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
__osip_dialog_init	function
(	O
dialog	pointer
,	O
next_request	pointer
,	O
next_request	pointer
,	O
next_request	pointer
->	O
to	pointer
,	O
next_request	pointer
->	O
from	pointer
,	O
next_request	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
*	O
dialog	pointer
=	O
NULL	O
;	O
return	O
i	int
;	O
}	O
(	O
*	O
dialog	pointer
)	O
->	O
type	pointer
=	O
CALLER	int
;	O
(	O
*	O
dialog	pointer
)	O
->	O
state	pointer
=	O
DIALOG_CONFIRMED	int
;	O
(	O
*	O
dialog	pointer
)	O
->	O
local_cseq	int
=	O
local_cseq	int
;	O
(	O
*	O
dialog	pointer
)	O
->	O
remote_cseq	int
=	O
osip_atoi	function
(	O
next_request	pointer
->	O
cseq	pointer
->	O
number	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_dialog_init_as_uas	function
(	O
osip_dialog_t	struct
*	O
*	O
dialog	pointer
,	O
osip_message_t	struct
*	O
invite	pointer
,	O
osip_message_t	struct
*	O
response	pointer
)	O
{	O
int	O
i	int
;	O
*	O
dialog	pointer
=	O
NULL	O
;	O
if	O
(	O
response	pointer
->	O
cseq	pointer
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
i	int
=	O
__osip_dialog_init	function
(	O
dialog	pointer
,	O
invite	pointer
,	O
response	pointer
,	O
response	pointer
->	O
to	pointer
,	O
response	pointer
->	O
from	pointer
,	O
invite	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
*	O
dialog	pointer
=	O
NULL	O
;	O
return	O
i	int
;	O
}	O
(	O
*	O
dialog	pointer
)	O
->	O
type	pointer
=	O
CALLEE	int
;	O
(	O
*	O
dialog	pointer
)	O
->	O
remote_cseq	int
=	O
osip_atoi	function
(	O
response	pointer
->	O
cseq	pointer
->	O
number	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
osip_dialog_free	function
(	O
osip_dialog_t	struct
*	O
dialog	pointer
)	O
{	O
if	O
(	O
dialog	pointer
==	O
NULL	O
)	O
return	O
;	O
osip_contact_free	function
(	O
dialog	pointer
->	O
remote_contact_uri	pointer
)	O
;	O
osip_from_free	function
(	O
dialog	pointer
->	O
local_uri	pointer
)	O
;	O
osip_to_free	function
(	O
dialog	pointer
->	O
remote_uri	pointer
)	O
;	O
osip_list_special_free	function
(	O
&	O
dialog	pointer
->	O
route_set	struct
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
osip_record_route_free	function
)	O
;	O
osip_free	O
(	O
dialog	pointer
->	O
line_param	pointer
)	O
;	O
osip_free	O
(	O
dialog	pointer
->	O
remote_tag	pointer
)	O
;	O
osip_free	O
(	O
dialog	pointer
->	O
local_tag	pointer
)	O
;	O
osip_free	O
(	O
dialog	pointer
->	O
call_id	pointer
)	O
;	O
osip_free	O
(	O
dialog	pointer
)	O
;	O
}	O
