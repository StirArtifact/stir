static	O
int	O
can_compress	function
(	O
struct	O
MHD_Connection	O
*	O
con	pointer
)	O
{	O
const	O
char	O
*	O
ae	pointer
;	O
const	O
char	O
*	O
de	pointer
;	O
ae	pointer
=	O
MHD_lookup_connection_value	function
(	O
con	pointer
,	O
MHD_HEADER_KIND	int
,	O
MHD_HTTP_HEADER_ACCEPT_ENCODING	pointer
)	O
;	O
if	O
(	O
NULL	O
==	O
ae	pointer
)	O
return	O
MHD_NO	int
;	O
if	O
(	O
0	int
==	O
strcmp	function
(	O
ae	pointer
,	O
"*"	pointer
)	O
)	O
return	O
MHD_YES	int
;	O
de	pointer
=	O
strstr	function
(	O
ae	pointer
,	O
"deflate"	pointer
)	O
;	O
if	O
(	O
NULL	O
==	O
de	pointer
)	O
return	O
MHD_NO	int
;	O
if	O
(	O
(	O
(	O
de	pointer
==	O
ae	pointer
)	O
||	O
(	O
de	pointer
[	O
-	O
1	int
]	O
==	O
','	O
)	O
||	O
(	O
de	pointer
[	O
-	O
1	int
]	O
==	O
' '	O
)	O
)	O
&&	O
(	O
(	O
de	pointer
[	O
strlen	function
(	O
"deflate"	pointer
)	O
]	O
==	O
'\0'	O
)	O
||	O
(	O
de	pointer
[	O
strlen	function
(	O
"deflate"	pointer
)	O
]	O
==	O
','	O
)	O
||	O
(	O
de	pointer
[	O
strlen	function
(	O
"deflate"	pointer
)	O
]	O
==	O
';'	O
)	O
)	O
)	O
return	O
MHD_YES	int
;	O
return	O
MHD_NO	int
;	O
}	O
static	O
int	O
body_compress	function
(	O
void	O
*	O
*	O
buf	pointer
,	O
size_t	long
*	O
buf_size	pointer
)	O
{	O
Bytef	char
*	O
cbuf	pointer
;	O
uLongf	long
cbuf_size	long
;	O
int	O
ret	int
;	O
cbuf_size	long
=	O
compressBound	function
(	O
*	O
buf_size	pointer
)	O
;	O
cbuf	pointer
=	O
malloc	function
(	O
cbuf_size	long
)	O
;	O
if	O
(	O
NULL	O
==	O
cbuf	pointer
)	O
return	O
MHD_NO	int
;	O
ret	int
=	O
compress	function
(	O
cbuf	pointer
,	O
&	O
cbuf_size	long
,	O
(	O
const	O
Bytef	char
*	O
)	O
*	O
buf	pointer
,	O
*	O
buf_size	pointer
)	O
;	O
if	O
(	O
(	O
Z_OK	int
!=	O
ret	int
)	O
||	O
(	O
cbuf_size	long
>=	O
*	O
buf_size	pointer
)	O
)	O
{	O
free	function
(	O
cbuf	pointer
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
free	function
(	O
*	O
buf	pointer
)	O
;	O
*	O
buf	pointer
=	O
(	O
void	O
*	O
)	O
cbuf	pointer
;	O
*	O
buf_size	pointer
=	O
(	O
size_t	long
)	O
cbuf_size	long
;	O
return	O
MHD_YES	int
;	O
}	O
static	O
int	O
ahc_echo	function
(	O
void	O
*	O
cls	pointer
,	O
struct	O
MHD_Connection	O
*	O
connection	pointer
,	O
const	O
char	O
*	O
url	pointer
,	O
const	O
char	O
*	O
method	int
,	O
const	O
char	O
*	O
version	pointer
,	O
const	O
char	O
*	O
upload_data	pointer
,	O
size_t	long
*	O
upload_data_size	pointer
,	O
void	O
*	O
*	O
ptr	pointer
)	O
{	O
struct	O
MHD_Response	O
*	O
response	pointer
;	O
int	O
ret	int
;	O
int	O
comp	int
;	O
size_t	long
body_len	long
;	O
char	O
*	O
body_str	pointer
;	O
(	O
void	O
)	O
cls	pointer
;	O
(	O
void	O
)	O
url	pointer
;	O
(	O
void	O
)	O
version	pointer
;	O
(	O
void	O
)	O
upload_data	pointer
;	O
(	O
void	O
)	O
upload_data_size	pointer
;	O
if	O
(	O
0	int
!=	O
strcmp	function
(	O
method	int
,	O
"GET"	pointer
)	O
)	O
return	O
MHD_NO	int
;	O
if	O
(	O
!	O
*	O
ptr	pointer
)	O
{	O
*	O
ptr	pointer
=	O
(	O
void	O
*	O
)	O
1	int
;	O
return	O
MHD_YES	int
;	O
}	O
*	O
ptr	pointer
=	O
NULL	O
;	O
body_str	pointer
=	O
strdup	function
(	O
PAGE	O
)	O
;	O
if	O
(	O
NULL	O
==	O
body_str	pointer
)	O
{	O
return	O
MHD_NO	int
;	O
}	O
body_len	long
=	O
strlen	function
(	O
body_str	pointer
)	O
;	O
comp	int
=	O
MHD_NO	int
;	O
if	O
(	O
MHD_YES	int
==	O
can_compress	function
(	O
connection	pointer
)	O
)	O
comp	int
=	O
body_compress	function
(	O
(	O
void	O
*	O
*	O
)	O
&	O
body_str	pointer
,	O
&	O
body_len	long
)	O
;	O
response	pointer
=	O
MHD_create_response_from_buffer	function
(	O
body_len	long
,	O
body_str	pointer
,	O
MHD_RESPMEM_MUST_FREE	int
)	O
;	O
if	O
(	O
NULL	O
==	O
response	pointer
)	O
{	O
free	function
(	O
body_str	pointer
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
if	O
(	O
MHD_YES	int
==	O
comp	int
)	O
{	O
if	O
(	O
MHD_NO	int
==	O
MHD_add_response_header	function
(	O
response	pointer
,	O
MHD_HTTP_HEADER_CONTENT_ENCODING	pointer
,	O
"deflate"	pointer
)	O
)	O
{	O
MHD_destroy_response	function
(	O
response	pointer
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
}	O
ret	int
=	O
MHD_queue_response	function
(	O
connection	pointer
,	O
200	int
,	O
response	pointer
)	O
;	O
MHD_destroy_response	function
(	O
response	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	pointer
)	O
{	O
struct	O
MHD_Daemon	O
*	O
d	pointer
;	O
if	O
(	O
argc	int
!=	O
2	int
)	O
{	O
printf	function
(	O
"%s PORT\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
return	O
1	int
;	O
}	O
d	pointer
=	O
MHD_start_daemon	function
(	O
MHD_USE_AUTO	int
|	O
MHD_USE_INTERNAL_POLLING_THREAD	int
|	O
MHD_USE_ERROR_LOG	int
,	O
atoi	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
,	O
NULL	O
,	O
NULL	O
,	O
&	O
ahc_echo	function
,	O
NULL	O
,	O
MHD_OPTION_END	int
)	O
;	O
if	O
(	O
NULL	O
==	O
d	pointer
)	O
return	O
1	int
;	O
(	O
void	O
)	O
getc	function
(	O
stdin	pointer
)	O
;	O
MHD_stop_daemon	function
(	O
d	pointer
)	O
;	O
return	O
0	int
;	O
}	O
