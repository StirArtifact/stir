bfd_boolean	int
create_annotation_files	int
=	O
FALSE	int
;	O
Search_List	struct
src_search_list	struct
=	O
{	O
0	int
,	O
0	int
}	O
;	O
Source_File	struct
*	O
first_src_file	pointer
=	O
0	int
;	O
Source_File	struct
*	O
source_file_lookup_path	function
(	O
const	O
char	O
*	O
path	array
)	O
{	O
Source_File	struct
*	O
sf	pointer
;	O
for	O
(	O
sf	pointer
=	O
first_src_file	pointer
;	O
sf	pointer
;	O
sf	pointer
=	O
sf	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
FILENAME_CMP	O
(	O
path	array
,	O
sf	pointer
->	O
name	pointer
)	O
==	O
0	int
)	O
break	O
;	O
}	O
if	O
(	O
!	O
sf	pointer
)	O
{	O
sf	pointer
=	O
(	O
Source_File	struct
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
*	O
sf	pointer
)	O
)	O
;	O
memset	function
(	O
sf	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
sf	pointer
)	O
)	O
;	O
sf	pointer
->	O
name	pointer
=	O
xstrdup	function
(	O
path	array
)	O
;	O
sf	pointer
->	O
next	pointer
=	O
first_src_file	pointer
;	O
first_src_file	pointer
=	O
sf	pointer
;	O
}	O
return	O
sf	pointer
;	O
}	O
Source_File	struct
*	O
source_file_lookup_name	function
(	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
const	O
char	O
*	O
fname	pointer
;	O
Source_File	struct
*	O
sf	pointer
;	O
for	O
(	O
sf	pointer
=	O
first_src_file	pointer
;	O
sf	pointer
;	O
sf	pointer
=	O
sf	pointer
->	O
next	pointer
)	O
{	O
fname	pointer
=	O
strrchr	function
(	O
sf	pointer
->	O
name	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
fname	pointer
)	O
++	O
fname	pointer
;	O
else	O
fname	pointer
=	O
sf	pointer
->	O
name	pointer
;	O
if	O
(	O
FILENAME_CMP	O
(	O
filename	pointer
,	O
fname	pointer
)	O
==	O
0	int
)	O
break	O
;	O
}	O
return	O
sf	pointer
;	O
}	O
FILE	struct
*	O
annotate_source	function
(	O
Source_File	struct
*	O
sf	pointer
,	O
unsigned	O
int	O
max_width	int
,	O
void	O
(	O
*	O
annote	pointer
)	O
(	O
char	O
*	O
,	O
unsigned	O
int	O
,	O
int	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
arg	pointer
)	O
{	O
static	O
bfd_boolean	int
first_file	int
=	O
TRUE	int
;	O
int	O
i	pointer
,	O
line_num	int
,	O
nread	int
;	O
bfd_boolean	int
new_line	int
;	O
char	O
buf	pointer
[	O
8192	int
]	O
;	O
char	O
fname	pointer
[	O
PATH_MAX	int
]	O
;	O
char	O
*	O
annotation	pointer
,	O
*	O
name_only	pointer
;	O
FILE	struct
*	O
ifp	pointer
,	O
*	O
ofp	pointer
;	O
Search_List_Elem	struct
*	O
sle	pointer
=	O
src_search_list	struct
.	O
head	pointer
;	O
strcpy	function
(	O
fname	pointer
,	O
sf	pointer
->	O
name	pointer
)	O
;	O
if	O
(	O
IS_ABSOLUTE_PATH	O
(	O
sf	pointer
->	O
name	pointer
)	O
)	O
sle	pointer
=	O
0	int
;	O
name_only	pointer
=	O
0	int
;	O
while	O
(	O
TRUE	int
)	O
{	O
DBG	O
(	O
SRCDEBUG	O
,	O
printf	function
(	O
"[annotate_source]: looking for %s, trying %s\n"	pointer
,	O
sf	pointer
->	O
name	pointer
,	O
fname	pointer
)	O
)	O
;	O
ifp	pointer
=	O
fopen	function
(	O
fname	pointer
,	O
FOPEN_RB	pointer
)	O
;	O
if	O
(	O
ifp	pointer
)	O
break	O
;	O
if	O
(	O
!	O
sle	pointer
&&	O
!	O
name_only	pointer
)	O
{	O
name_only	pointer
=	O
strrchr	function
(	O
sf	pointer
->	O
name	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
name_only	pointer
)	O
{	O
++	O
name_only	pointer
;	O
sle	pointer
=	O
src_search_list	struct
.	O
head	pointer
;	O
}	O
}	O
if	O
(	O
sle	pointer
)	O
{	O
strcpy	function
(	O
fname	pointer
,	O
sle	pointer
->	O
path	array
)	O
;	O
strcat	function
(	O
fname	pointer
,	O
"/"	pointer
)	O
;	O
if	O
(	O
name_only	pointer
)	O
strcat	function
(	O
fname	pointer
,	O
name_only	pointer
)	O
;	O
else	O
strcat	function
(	O
fname	pointer
,	O
sf	pointer
->	O
name	pointer
)	O
;	O
sle	pointer
=	O
sle	pointer
->	O
next	pointer
;	O
}	O
else	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: could not locate `%s'\n"	pointer
)	O
,	O
whoami	pointer
,	O
sf	pointer
->	O
name	pointer
)	O
;	O
else	O
perror	function
(	O
sf	pointer
->	O
name	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
ofp	pointer
=	O
stdout	pointer
;	O
if	O
(	O
create_annotation_files	int
)	O
{	O
const	O
char	O
*	O
filename	pointer
;	O
filename	pointer
=	O
strrchr	function
(	O
sf	pointer
->	O
name	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
filename	pointer
)	O
++	O
filename	pointer
;	O
else	O
filename	pointer
=	O
sf	pointer
->	O
name	pointer
;	O
strcpy	function
(	O
fname	pointer
,	O
filename	pointer
)	O
;	O
strcat	function
(	O
fname	pointer
,	O
EXT_ANNO	pointer
)	O
;	O
ofp	pointer
=	O
fopen	function
(	O
fname	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
!	O
ofp	pointer
)	O
{	O
perror	function
(	O
fname	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
if	O
(	O
ofp	pointer
==	O
stdout	pointer
)	O
{	O
if	O
(	O
first_file	int
)	O
first_file	int
=	O
FALSE	int
;	O
else	O
fputc	function
(	O
'\n'	O
,	O
ofp	pointer
)	O
;	O
if	O
(	O
first_output	int
)	O
first_output	int
=	O
FALSE	int
;	O
else	O
fprintf	function
(	O
ofp	pointer
,	O
"\f\n"	pointer
)	O
;	O
fprintf	function
(	O
ofp	pointer
,	O
_	O
(	O
"*** File %s:\n"	pointer
)	O
,	O
sf	pointer
->	O
name	pointer
)	O
;	O
}	O
annotation	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
max_width	int
+	O
1	int
)	O
;	O
line_num	int
=	O
1	int
;	O
new_line	int
=	O
TRUE	int
;	O
while	O
(	O
(	O
nread	int
=	O
fread	function
(	O
buf	pointer
,	O
1	int
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
ifp	pointer
)	O
)	O
>	O
0	int
)	O
{	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
nread	int
;	O
++	O
i	pointer
)	O
{	O
if	O
(	O
new_line	int
)	O
{	O
(	O
*	O
annote	pointer
)	O
(	O
annotation	pointer
,	O
max_width	int
,	O
line_num	int
,	O
arg	pointer
)	O
;	O
fputs	function
(	O
annotation	pointer
,	O
ofp	pointer
)	O
;	O
++	O
line_num	int
;	O
}	O
new_line	int
=	O
(	O
buf	pointer
[	O
i	pointer
]	O
==	O
'\n'	O
)	O
;	O
fputc	function
(	O
buf	pointer
[	O
i	pointer
]	O
,	O
ofp	pointer
)	O
;	O
}	O
}	O
free	function
(	O
annotation	pointer
)	O
;	O
fclose	function
(	O
ifp	pointer
)	O
;	O
return	O
ofp	pointer
;	O
}	O
