static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: bt_curadj.c,v 1.3 2000/06/28 16:46:59 loic Exp $"	pointer
;	O
static	O
int	O
__bam_opd_cursor	function
__P	O
(	O
(	O
DB	struct
*	O
,	O
DBC	struct
*	O
,	O
db_pgno_t	int
,	O
u_int32_t	int
,	O
u_int32_t	int
)	O
)	O
;	O
int	O
CDB___bam_ca_delete	function
(	O
dbp	pointer
,	O
pgno	int
,	O
indx	short
,	O
delete	int
)	O
DB	struct
*	O
dbp	pointer
;	O
db_pgno_t	int
pgno	int
;	O
u_int32_t	int
indx	short
;	O
int	O
delete	int
;	O
{	O
BTREE_CURSOR	struct
*	O
cp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
int	O
count	int
;	O
MUTEX_THREAD_LOCK	O
(	O
dbp	pointer
->	O
mutexp	pointer
)	O
;	O
for	O
(	O
count	int
=	O
0	int
,	O
dbc	pointer
=	O
TAILQ_FIRST	O
(	O
&	O
dbp	pointer
->	O
active_queue	struct
)	O
;	O
dbc	pointer
!=	O
NULL	O
;	O
dbc	pointer
=	O
TAILQ_NEXT	O
(	O
dbc	pointer
,	O
links	struct
)	O
)	O
{	O
cp	pointer
=	O
(	O
BTREE_CURSOR	struct
*	O
)	O
dbc	pointer
->	O
internal	pointer
;	O
if	O
(	O
cp	pointer
->	O
pgno	int
==	O
pgno	int
&&	O
cp	pointer
->	O
indx	short
==	O
indx	short
)	O
{	O
if	O
(	O
delete	int
)	O
F_SET	O
(	O
cp	pointer
,	O
C_DELETED	int
)	O
;	O
else	O
F_CLR	O
(	O
cp	pointer
,	O
C_DELETED	int
)	O
;	O
++	O
count	int
;	O
}	O
}	O
MUTEX_THREAD_UNLOCK	O
(	O
dbp	pointer
->	O
mutexp	pointer
)	O
;	O
return	O
(	O
count	int
)	O
;	O
}	O
int	O
CDB___ram_ca_delete	function
(	O
dbp	pointer
,	O
root_pgno	int
)	O
DB	struct
*	O
dbp	pointer
;	O
db_pgno_t	int
root_pgno	int
;	O
{	O
DBC	struct
*	O
dbc	pointer
;	O
MUTEX_THREAD_LOCK	O
(	O
dbp	pointer
->	O
mutexp	pointer
)	O
;	O
for	O
(	O
dbc	pointer
=	O
TAILQ_FIRST	O
(	O
&	O
dbp	pointer
->	O
active_queue	struct
)	O
;	O
dbc	pointer
!=	O
NULL	O
;	O
dbc	pointer
=	O
TAILQ_NEXT	O
(	O
dbc	pointer
,	O
links	struct
)	O
)	O
if	O
(	O
dbc	pointer
->	O
internal	pointer
->	O
root	int
==	O
root_pgno	int
)	O
break	O
;	O
MUTEX_THREAD_UNLOCK	O
(	O
dbp	pointer
->	O
mutexp	pointer
)	O
;	O
return	O
(	O
dbc	pointer
==	O
NULL	O
?	O
0	int
:	O
1	int
)	O
;	O
}	O
void	O
CDB___bam_ca_di	function
(	O
dbp	pointer
,	O
pgno	int
,	O
indx	short
,	O
adjust	int
)	O
DB	struct
*	O
dbp	pointer
;	O
db_pgno_t	int
pgno	int
;	O
u_int32_t	int
indx	short
;	O
int	O
adjust	int
;	O
{	O
DBC	struct
*	O
dbc	pointer
;	O
DBC_INTERNAL	struct
*	O
cp	pointer
;	O
MUTEX_THREAD_LOCK	O
(	O
dbp	pointer
->	O
mutexp	pointer
)	O
;	O
for	O
(	O
dbc	pointer
=	O
TAILQ_FIRST	O
(	O
&	O
dbp	pointer
->	O
active_queue	struct
)	O
;	O
dbc	pointer
!=	O
NULL	O
;	O
dbc	pointer
=	O
TAILQ_NEXT	O
(	O
dbc	pointer
,	O
links	struct
)	O
)	O
{	O
if	O
(	O
dbc	pointer
->	O
dbtype	enum
==	O
DB_RECNO	int
)	O
continue	O
;	O
cp	pointer
=	O
dbc	pointer
->	O
internal	pointer
;	O
if	O
(	O
cp	pointer
->	O
pgno	int
==	O
pgno	int
&&	O
cp	pointer
->	O
indx	short
>=	O
indx	short
)	O
{	O
DB_ASSERT	O
(	O
cp	pointer
->	O
indx	short
!=	O
0	int
||	O
adjust	int
>	O
0	int
)	O
;	O
cp	pointer
->	O
indx	short
+=	O
adjust	int
;	O
}	O
}	O
MUTEX_THREAD_UNLOCK	O
(	O
dbp	pointer
->	O
mutexp	pointer
)	O
;	O
}	O
static	O
int	O
__bam_opd_cursor	function
(	O
dbp	pointer
,	O
dbc	pointer
,	O
first	int
,	O
tpgno	int
,	O
ti	int
)	O
DB	struct
*	O
dbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
db_pgno_t	int
tpgno	int
;	O
u_int32_t	int
first	int
,	O
ti	int
;	O
{	O
BTREE_CURSOR	struct
*	O
cp	pointer
,	O
*	O
orig_cp	pointer
;	O
DBC	struct
*	O
dbc_nopd	pointer
;	O
int	O
ret	int
;	O
orig_cp	pointer
=	O
(	O
BTREE_CURSOR	struct
*	O
)	O
dbc	pointer
->	O
internal	pointer
;	O
dbc_nopd	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_icursor	function
(	O
dbp	pointer
,	O
dbc	pointer
->	O
txn	pointer
,	O
dbp	pointer
->	O
dup_compare	pointer
==	O
NULL	O
?	O
DB_RECNO	int
:	O
DB_BTREE	int
,	O
tpgno	int
,	O
1	int
,	O
&	O
dbc_nopd	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
cp	pointer
=	O
(	O
BTREE_CURSOR	struct
*	O
)	O
dbc_nopd	pointer
->	O
internal	pointer
;	O
cp	pointer
->	O
pgno	int
=	O
tpgno	int
;	O
cp	pointer
->	O
indx	short
=	O
ti	int
;	O
if	O
(	O
dbp	pointer
->	O
dup_compare	pointer
==	O
NULL	O
)	O
{	O
cp	pointer
->	O
recno	int
=	O
ti	int
+	O
1	int
;	O
}	O
if	O
(	O
F_ISSET	O
(	O
orig_cp	pointer
,	O
C_DELETED	int
)	O
)	O
{	O
F_SET	O
(	O
cp	pointer
,	O
C_DELETED	int
)	O
;	O
F_CLR	O
(	O
orig_cp	pointer
,	O
C_DELETED	int
)	O
;	O
}	O
orig_cp	pointer
->	O
opd	pointer
=	O
dbc_nopd	pointer
;	O
orig_cp	pointer
->	O
indx	short
=	O
first	int
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_ca_dup	function
(	O
dbp	pointer
,	O
first	int
,	O
fpgno	int
,	O
fi	int
,	O
tpgno	int
,	O
ti	int
)	O
DB	struct
*	O
dbp	pointer
;	O
db_pgno_t	int
fpgno	int
,	O
tpgno	int
;	O
u_int32_t	int
first	int
,	O
fi	int
,	O
ti	int
;	O
{	O
BTREE_CURSOR	struct
*	O
orig_cp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
int	O
ret	int
;	O
loop	O
:	O
MUTEX_THREAD_LOCK	O
(	O
dbp	pointer
->	O
mutexp	pointer
)	O
;	O
for	O
(	O
dbc	pointer
=	O
TAILQ_FIRST	O
(	O
&	O
dbp	pointer
->	O
active_queue	struct
)	O
;	O
dbc	pointer
!=	O
NULL	O
;	O
dbc	pointer
=	O
TAILQ_NEXT	O
(	O
dbc	pointer
,	O
links	struct
)	O
)	O
{	O
orig_cp	pointer
=	O
(	O
BTREE_CURSOR	struct
*	O
)	O
dbc	pointer
->	O
internal	pointer
;	O
if	O
(	O
orig_cp	pointer
->	O
opd	pointer
!=	O
NULL	O
||	O
orig_cp	pointer
->	O
pgno	int
!=	O
fpgno	int
||	O
orig_cp	pointer
->	O
indx	short
!=	O
fi	int
)	O
continue	O
;	O
MUTEX_THREAD_UNLOCK	O
(	O
dbp	pointer
->	O
mutexp	pointer
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
__bam_opd_cursor	function
(	O
dbp	pointer
,	O
dbc	pointer
,	O
first	int
,	O
tpgno	int
,	O
ti	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
goto	O
loop	O
;	O
}	O
MUTEX_THREAD_UNLOCK	O
(	O
dbp	pointer
->	O
mutexp	pointer
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
void	O
CDB___bam_ca_rsplit	function
(	O
dbp	pointer
,	O
fpgno	int
,	O
tpgno	int
)	O
DB	struct
*	O
dbp	pointer
;	O
db_pgno_t	int
fpgno	int
,	O
tpgno	int
;	O
{	O
DBC	struct
*	O
dbc	pointer
;	O
MUTEX_THREAD_LOCK	O
(	O
dbp	pointer
->	O
mutexp	pointer
)	O
;	O
for	O
(	O
dbc	pointer
=	O
TAILQ_FIRST	O
(	O
&	O
dbp	pointer
->	O
active_queue	struct
)	O
;	O
dbc	pointer
!=	O
NULL	O
;	O
dbc	pointer
=	O
TAILQ_NEXT	O
(	O
dbc	pointer
,	O
links	struct
)	O
)	O
{	O
if	O
(	O
dbc	pointer
->	O
dbtype	enum
==	O
DB_RECNO	int
)	O
continue	O
;	O
if	O
(	O
dbc	pointer
->	O
internal	pointer
->	O
pgno	int
==	O
fpgno	int
)	O
dbc	pointer
->	O
internal	pointer
->	O
pgno	int
=	O
tpgno	int
;	O
}	O
MUTEX_THREAD_UNLOCK	O
(	O
dbp	pointer
->	O
mutexp	pointer
)	O
;	O
}	O
void	O
CDB___bam_ca_split	function
(	O
dbp	pointer
,	O
ppgno	int
,	O
lpgno	int
,	O
rpgno	int
,	O
split_indx	int
,	O
cleft	int
)	O
DB	struct
*	O
dbp	pointer
;	O
db_pgno_t	int
ppgno	int
,	O
lpgno	int
,	O
rpgno	int
;	O
u_int32_t	int
split_indx	int
;	O
int	O
cleft	int
;	O
{	O
DBC	struct
*	O
dbc	pointer
;	O
DBC_INTERNAL	struct
*	O
cp	pointer
;	O
MUTEX_THREAD_LOCK	O
(	O
dbp	pointer
->	O
mutexp	pointer
)	O
;	O
for	O
(	O
dbc	pointer
=	O
TAILQ_FIRST	O
(	O
&	O
dbp	pointer
->	O
active_queue	struct
)	O
;	O
dbc	pointer
!=	O
NULL	O
;	O
dbc	pointer
=	O
TAILQ_NEXT	O
(	O
dbc	pointer
,	O
links	struct
)	O
)	O
{	O
if	O
(	O
dbc	pointer
->	O
dbtype	enum
==	O
DB_RECNO	int
)	O
continue	O
;	O
cp	pointer
=	O
dbc	pointer
->	O
internal	pointer
;	O
if	O
(	O
cp	pointer
->	O
pgno	int
==	O
ppgno	int
)	O
{	O
if	O
(	O
cp	pointer
->	O
indx	short
<	O
split_indx	int
)	O
{	O
if	O
(	O
cleft	int
)	O
cp	pointer
->	O
pgno	int
=	O
lpgno	int
;	O
}	O
else	O
{	O
cp	pointer
->	O
pgno	int
=	O
rpgno	int
;	O
cp	pointer
->	O
indx	short
-=	O
split_indx	int
;	O
}	O
}	O
}	O
MUTEX_THREAD_UNLOCK	O
(	O
dbp	pointer
->	O
mutexp	pointer
)	O
;	O
}	O
