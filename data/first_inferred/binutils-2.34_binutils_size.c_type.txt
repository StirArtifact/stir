static	O
enum	O
{	O
decimal	int
,	O
octal	int
,	O
hex	int
}	O
radix	enum
=	O
decimal	int
;	O
enum	O
output_format	enum
{	O
FORMAT_BERKLEY	int
,	O
FORMAT_SYSV	int
,	O
FORMAT_GNU	int
}	O
;	O
static	O
enum	O
output_format	enum
selected_output_format	enum
=	O
FORMAT_BERKLEY	int
;	O
static	O
int	O
show_version	int
=	O
0	int
;	O
static	O
int	O
show_help	int
=	O
0	int
;	O
static	O
int	O
show_totals	int
=	O
0	int
;	O
static	O
int	O
show_common	int
=	O
0	int
;	O
static	O
bfd_size_type	long
common_size	long
;	O
static	O
bfd_size_type	long
total_bsssize	long
;	O
static	O
bfd_size_type	long
total_datasize	long
;	O
static	O
bfd_size_type	long
total_textsize	long
;	O
static	O
int	O
return_code	int
=	O
0	int
;	O
static	O
char	O
*	O
target	pointer
=	O
NULL	O
;	O
static	O
void	O
display_file	function
(	O
char	O
*	O
)	O
;	O
static	O
void	O
rprint_number	function
(	O
int	O
,	O
bfd_size_type	long
)	O
;	O
static	O
void	O
print_sizes	function
(	O
bfd	struct
*	O
file	pointer
)	O
;	O
static	O
void	O
usage	function
(	O
FILE	struct
*	O
stream	pointer
,	O
int	O
status	int
)	O
{	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
"Usage: %s [option(s)] [file(s)]\n"	pointer
)	O
,	O
program_name	pointer
)	O
;	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
" Displays the sizes of sections inside binary files\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
" If no input file(s) are specified, a.out is assumed\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
" The options are:\n  -A|-B|-G  --format={sysv|berkeley|gnu}  Select output style (default is %s)\n  -o|-d|-x  --radix={8|10|16}         Display numbers in octal, decimal or hex\n  -t        --totals                  Display the total sizes (Berkeley only)\n            --common                  Display total size for *COM* syms\n            --target=<bfdname>        Set the binary file format\n            @<file>                   Read options from <file>\n  -h        --help                    Display this information\n  -v        --version                 Display the program's version\n\n"	pointer
)	O
,	O
"berkeley"	pointer
)	O
;	O
list_supported_targets	function
(	O
program_name	pointer
,	O
stream	pointer
)	O
;	O
if	O
(	O
REPORT_BUGS_TO	pointer
[	O
0	int
]	O
&&	O
status	int
==	O
0	int
)	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
"Report bugs to %s\n"	pointer
)	O
,	O
REPORT_BUGS_TO	pointer
)	O
;	O
exit	function
(	O
status	int
)	O
;	O
}	O
static	O
struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
"common"	pointer
,	O
no_argument	int
,	O
&	O
show_common	int
,	O
1	int
}	O
,	O
{	O
"format"	pointer
,	O
required_argument	int
,	O
0	int
,	O
OPTION_FORMAT	O
}	O
,	O
{	O
"radix"	pointer
,	O
required_argument	int
,	O
0	int
,	O
OPTION_RADIX	O
}	O
,	O
{	O
"target"	pointer
,	O
required_argument	int
,	O
0	int
,	O
OPTION_TARGET	O
}	O
,	O
{	O
"totals"	pointer
,	O
no_argument	int
,	O
&	O
show_totals	int
,	O
1	int
}	O
,	O
{	O
"version"	pointer
,	O
no_argument	int
,	O
&	O
show_version	int
,	O
1	int
}	O
,	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
&	O
show_help	int
,	O
1	int
}	O
,	O
{	O
0	int
,	O
no_argument	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
int	O
main	function
(	O
int	O
,	O
char	O
*	O
*	O
)	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
temp	int
;	O
int	O
c	int
;	O
setlocale	function
(	O
LC_MESSAGES	O
,	O
""	pointer
)	O
;	O
setlocale	function
(	O
LC_CTYPE	O
,	O
""	pointer
)	O
;	O
bindtextdomain	function
(	O
PACKAGE	pointer
,	O
LOCALEDIR	O
)	O
;	O
textdomain	function
(	O
PACKAGE	pointer
)	O
;	O
program_name	pointer
=	O
*	O
argv	pointer
;	O
xmalloc_set_program_name	function
(	O
program_name	pointer
)	O
;	O
bfd_set_error_program_name	function
(	O
program_name	pointer
)	O
;	O
expandargv	function
(	O
&	O
argc	int
,	O
&	O
argv	pointer
)	O
;	O
if	O
(	O
bfd_init	function
(	O
)	O
!=	O
BFD_INIT_MAGIC	O
)	O
fatal	function
(	O
_	O
(	O
"fatal error: libbfd ABI mismatch"	pointer
)	O
)	O
;	O
set_default_bfd_target	function
(	O
)	O
;	O
while	O
(	O
(	O
c	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"ABGHhVvdfotx"	pointer
,	O
long_options	array
,	O
(	O
int	O
*	O
)	O
0	int
)	O
)	O
!=	O
EOF	O
)	O
switch	O
(	O
c	int
)	O
{	O
case	O
OPTION_FORMAT	O
:	O
switch	O
(	O
*	O
optarg	pointer
)	O
{	O
case	O
'B'	O
:	O
case	O
'b'	O
:	O
selected_output_format	enum
=	O
FORMAT_BERKLEY	int
;	O
break	O
;	O
case	O
'S'	O
:	O
case	O
's'	O
:	O
selected_output_format	enum
=	O
FORMAT_SYSV	int
;	O
break	O
;	O
case	O
'G'	O
:	O
case	O
'g'	O
:	O
selected_output_format	enum
=	O
FORMAT_GNU	int
;	O
break	O
;	O
default	O
:	O
non_fatal	function
(	O
_	O
(	O
"invalid argument to --format: %s"	pointer
)	O
,	O
optarg	pointer
)	O
;	O
usage	function
(	O
stderr	pointer
,	O
1	int
)	O
;	O
}	O
break	O
;	O
case	O
OPTION_TARGET	O
:	O
target	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
OPTION_RADIX	O
:	O
temp	int
=	O
atol	function
(	O
optarg	pointer
)	O
;	O
switch	O
(	O
temp	int
)	O
{	O
case	O
10	int
:	O
radix	enum
=	O
decimal	int
;	O
break	O
;	O
case	O
8	int
:	O
radix	enum
=	O
octal	int
;	O
break	O
;	O
case	O
16	int
:	O
radix	enum
=	O
hex	int
;	O
break	O
;	O
default	O
:	O
non_fatal	function
(	O
_	O
(	O
"Invalid radix: %s\n"	pointer
)	O
,	O
optarg	pointer
)	O
;	O
usage	function
(	O
stderr	pointer
,	O
1	int
)	O
;	O
}	O
break	O
;	O
case	O
'A'	O
:	O
selected_output_format	enum
=	O
FORMAT_SYSV	int
;	O
break	O
;	O
case	O
'B'	O
:	O
selected_output_format	enum
=	O
FORMAT_BERKLEY	int
;	O
break	O
;	O
case	O
'G'	O
:	O
selected_output_format	enum
=	O
FORMAT_GNU	int
;	O
break	O
;	O
case	O
'v'	O
:	O
case	O
'V'	O
:	O
show_version	int
=	O
1	int
;	O
break	O
;	O
case	O
'd'	O
:	O
radix	enum
=	O
decimal	int
;	O
break	O
;	O
case	O
'x'	O
:	O
radix	enum
=	O
hex	int
;	O
break	O
;	O
case	O
'o'	O
:	O
radix	enum
=	O
octal	int
;	O
break	O
;	O
case	O
't'	O
:	O
show_totals	int
=	O
1	int
;	O
break	O
;	O
case	O
'f'	O
:	O
break	O
;	O
case	O
0	int
:	O
break	O
;	O
case	O
'h'	O
:	O
case	O
'H'	O
:	O
case	O
'?'	O
:	O
usage	function
(	O
stderr	pointer
,	O
1	int
)	O
;	O
}	O
if	O
(	O
show_version	int
)	O
print_version	function
(	O
"size"	pointer
)	O
;	O
if	O
(	O
show_help	int
)	O
usage	function
(	O
stdout	pointer
,	O
0	int
)	O
;	O
if	O
(	O
optind	int
==	O
argc	int
)	O
display_file	function
(	O
"a.out"	pointer
)	O
;	O
else	O
for	O
(	O
;	O
optind	int
<	O
argc	int
;	O
)	O
display_file	function
(	O
argv	pointer
[	O
optind	int
++	O
]	O
)	O
;	O
if	O
(	O
show_totals	int
&&	O
(	O
selected_output_format	enum
==	O
FORMAT_BERKLEY	int
||	O
selected_output_format	enum
==	O
FORMAT_GNU	int
)	O
)	O
{	O
bfd_size_type	long
total	long
=	O
total_textsize	long
+	O
total_datasize	long
+	O
total_bsssize	long
;	O
int	O
col_width	int
=	O
(	O
selected_output_format	enum
==	O
FORMAT_BERKLEY	int
)	O
?	O
7	int
:	O
10	int
;	O
char	O
sep_char	char
=	O
(	O
selected_output_format	enum
==	O
FORMAT_BERKLEY	int
)	O
?	O
'\t'	O
:	O
' '	O
;	O
rprint_number	function
(	O
col_width	int
,	O
total_textsize	long
)	O
;	O
putchar	function
(	O
sep_char	char
)	O
;	O
rprint_number	function
(	O
col_width	int
,	O
total_datasize	long
)	O
;	O
putchar	function
(	O
sep_char	char
)	O
;	O
rprint_number	function
(	O
col_width	int
,	O
total_bsssize	long
)	O
;	O
putchar	function
(	O
sep_char	char
)	O
;	O
if	O
(	O
selected_output_format	enum
==	O
FORMAT_BERKLEY	int
)	O
printf	function
(	O
(	O
(	O
radix	enum
==	O
octal	int
)	O
?	O
"%7lo\t%7lx"	pointer
:	O
"%7lu\t%7lx"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
total	long
,	O
(	O
unsigned	O
long	O
)	O
total	long
)	O
;	O
else	O
rprint_number	function
(	O
col_width	int
,	O
total	long
)	O
;	O
putchar	function
(	O
sep_char	char
)	O
;	O
fputs	function
(	O
"(TOTALS)\n"	pointer
,	O
stdout	pointer
)	O
;	O
}	O
return	O
return_code	int
;	O
}	O
static	O
void	O
calculate_common_size	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
asymbol	struct
*	O
*	O
syms	pointer
=	O
NULL	O
;	O
long	O
storage	long
,	O
symcount	int
;	O
common_size	long
=	O
0	int
;	O
if	O
(	O
(	O
bfd_get_file_flags	function
(	O
abfd	pointer
)	O
&	O
(	O
EXEC_P	int
|	O
DYNAMIC	int
|	O
HAS_SYMS	int
)	O
)	O
!=	O
HAS_SYMS	int
)	O
return	O
;	O
storage	long
=	O
bfd_get_symtab_upper_bound	O
(	O
abfd	pointer
)	O
;	O
if	O
(	O
storage	long
<	O
0	int
)	O
bfd_fatal	function
(	O
bfd_get_filename	function
(	O
abfd	pointer
)	O
)	O
;	O
if	O
(	O
storage	long
)	O
syms	pointer
=	O
(	O
asymbol	struct
*	O
*	O
)	O
xmalloc	function
(	O
storage	long
)	O
;	O
symcount	int
=	O
bfd_canonicalize_symtab	O
(	O
abfd	pointer
,	O
syms	pointer
)	O
;	O
if	O
(	O
symcount	int
<	O
0	int
)	O
bfd_fatal	function
(	O
bfd_get_filename	function
(	O
abfd	pointer
)	O
)	O
;	O
while	O
(	O
--	O
symcount	int
>=	O
0	int
)	O
{	O
asymbol	struct
*	O
sym	pointer
=	O
syms	pointer
[	O
symcount	int
]	O
;	O
if	O
(	O
bfd_is_com_section	function
(	O
sym	pointer
->	O
section	pointer
)	O
&&	O
(	O
sym	pointer
->	O
flags	int
&	O
BSF_SECTION_SYM	O
)	O
==	O
0	int
)	O
common_size	long
+=	O
sym	pointer
->	O
value	long
;	O
}	O
free	function
(	O
syms	pointer
)	O
;	O
}	O
static	O
void	O
display_bfd	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
char	O
*	O
*	O
matching	pointer
;	O
if	O
(	O
bfd_check_format	function
(	O
abfd	pointer
,	O
bfd_archive	int
)	O
)	O
return	O
;	O
if	O
(	O
bfd_check_format_matches	function
(	O
abfd	pointer
,	O
bfd_object	int
,	O
&	O
matching	pointer
)	O
)	O
{	O
print_sizes	function
(	O
abfd	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
bfd_get_error	function
(	O
)	O
==	O
bfd_error_file_ambiguously_recognized	int
)	O
{	O
bfd_nonfatal	function
(	O
bfd_get_filename	function
(	O
abfd	pointer
)	O
)	O
;	O
list_matching_formats	function
(	O
matching	pointer
)	O
;	O
free	function
(	O
matching	pointer
)	O
;	O
return_code	int
=	O
3	int
;	O
return	O
;	O
}	O
if	O
(	O
bfd_check_format_matches	function
(	O
abfd	pointer
,	O
bfd_core	int
,	O
&	O
matching	pointer
)	O
)	O
{	O
const	O
char	O
*	O
core_cmd	pointer
;	O
print_sizes	function
(	O
abfd	pointer
)	O
;	O
fputs	function
(	O
" (core file"	pointer
,	O
stdout	pointer
)	O
;	O
core_cmd	pointer
=	O
bfd_core_file_failing_command	function
(	O
abfd	pointer
)	O
;	O
if	O
(	O
core_cmd	pointer
)	O
printf	function
(	O
" invoked as %s"	pointer
,	O
core_cmd	pointer
)	O
;	O
puts	function
(	O
")\n"	pointer
)	O
;	O
return	O
;	O
}	O
bfd_nonfatal	function
(	O
bfd_get_filename	function
(	O
abfd	pointer
)	O
)	O
;	O
if	O
(	O
bfd_get_error	function
(	O
)	O
==	O
bfd_error_file_ambiguously_recognized	int
)	O
{	O
list_matching_formats	function
(	O
matching	pointer
)	O
;	O
free	function
(	O
matching	pointer
)	O
;	O
}	O
return_code	int
=	O
3	int
;	O
}	O
static	O
void	O
display_archive	function
(	O
bfd	struct
*	O
file	pointer
)	O
{	O
bfd	struct
*	O
arfile	pointer
=	O
(	O
bfd	struct
*	O
)	O
NULL	O
;	O
bfd	struct
*	O
last_arfile	pointer
=	O
(	O
bfd	struct
*	O
)	O
NULL	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
bfd_set_error	function
(	O
bfd_error_no_error	int
)	O
;	O
arfile	pointer
=	O
bfd_openr_next_archived_file	function
(	O
file	pointer
,	O
arfile	pointer
)	O
;	O
if	O
(	O
arfile	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
bfd_get_error	function
(	O
)	O
!=	O
bfd_error_no_more_archived_files	int
)	O
{	O
bfd_nonfatal	function
(	O
bfd_get_filename	function
(	O
file	pointer
)	O
)	O
;	O
return_code	int
=	O
2	int
;	O
}	O
break	O
;	O
}	O
display_bfd	function
(	O
arfile	pointer
)	O
;	O
if	O
(	O
last_arfile	pointer
!=	O
NULL	O
)	O
{	O
bfd_close	function
(	O
last_arfile	pointer
)	O
;	O
if	O
(	O
last_arfile	pointer
==	O
arfile	pointer
)	O
return	O
;	O
}	O
last_arfile	pointer
=	O
arfile	pointer
;	O
}	O
if	O
(	O
last_arfile	pointer
!=	O
NULL	O
)	O
bfd_close	function
(	O
last_arfile	pointer
)	O
;	O
}	O
static	O
void	O
display_file	function
(	O
char	O
*	O
filename	pointer
)	O
{	O
bfd	struct
*	O
file	pointer
;	O
if	O
(	O
get_file_size	function
(	O
filename	pointer
)	O
<	O
1	int
)	O
{	O
return_code	int
=	O
1	int
;	O
return	O
;	O
}	O
file	pointer
=	O
bfd_openr	function
(	O
filename	pointer
,	O
target	pointer
)	O
;	O
if	O
(	O
file	pointer
==	O
NULL	O
)	O
{	O
bfd_nonfatal	function
(	O
filename	pointer
)	O
;	O
return_code	int
=	O
1	int
;	O
return	O
;	O
}	O
if	O
(	O
bfd_check_format	function
(	O
file	pointer
,	O
bfd_archive	int
)	O
)	O
display_archive	function
(	O
file	pointer
)	O
;	O
else	O
display_bfd	function
(	O
file	pointer
)	O
;	O
if	O
(	O
!	O
bfd_close	function
(	O
file	pointer
)	O
)	O
{	O
bfd_nonfatal	function
(	O
filename	pointer
)	O
;	O
return_code	int
=	O
1	int
;	O
return	O
;	O
}	O
}	O
static	O
int	O
size_number	function
(	O
bfd_size_type	long
num	long
)	O
{	O
char	O
buffer	array
[	O
40	int
]	O
;	O
sprintf	function
(	O
buffer	array
,	O
(	O
radix	enum
==	O
decimal	int
?	O
"%"	pointer
BFD_VMA_FMT	pointer
"u"	pointer
:	O
(	O
(	O
radix	enum
==	O
octal	int
)	O
?	O
"0%"	pointer
BFD_VMA_FMT	pointer
"o"	pointer
:	O
"0x%"	pointer
BFD_VMA_FMT	pointer
"x"	pointer
)	O
)	O
,	O
num	long
)	O
;	O
return	O
strlen	function
(	O
buffer	array
)	O
;	O
}	O
static	O
void	O
rprint_number	function
(	O
int	O
width	int
,	O
bfd_size_type	long
num	long
)	O
{	O
char	O
buffer	array
[	O
40	int
]	O
;	O
sprintf	function
(	O
buffer	array
,	O
(	O
radix	enum
==	O
decimal	int
?	O
"%"	pointer
BFD_VMA_FMT	pointer
"u"	pointer
:	O
(	O
(	O
radix	enum
==	O
octal	int
)	O
?	O
"0%"	pointer
BFD_VMA_FMT	pointer
"o"	pointer
:	O
"0x%"	pointer
BFD_VMA_FMT	pointer
"x"	pointer
)	O
)	O
,	O
num	long
)	O
;	O
printf	function
(	O
"%*s"	pointer
,	O
width	int
,	O
buffer	array
)	O
;	O
}	O
static	O
bfd_size_type	long
bsssize	long
;	O
static	O
bfd_size_type	long
datasize	long
;	O
static	O
bfd_size_type	long
textsize	long
;	O
static	O
void	O
berkeley_or_gnu_sum	function
(	O
bfd	struct
*	O
abfd	pointer
ATTRIBUTE_UNUSED	O
,	O
sec_ptr	pointer
sec	pointer
,	O
void	O
*	O
ignore	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
flagword	int
flags	int
;	O
bfd_size_type	long
size	int
;	O
flags	int
=	O
bfd_section_flags	function
(	O
sec	pointer
)	O
;	O
if	O
(	O
(	O
flags	int
&	O
SEC_ALLOC	int
)	O
==	O
0	int
)	O
return	O
;	O
size	int
=	O
bfd_section_size	function
(	O
sec	pointer
)	O
;	O
if	O
(	O
(	O
flags	int
&	O
SEC_CODE	int
)	O
!=	O
0	int
||	O
(	O
selected_output_format	enum
==	O
FORMAT_BERKLEY	int
&&	O
(	O
flags	int
&	O
SEC_READONLY	int
)	O
!=	O
0	int
)	O
)	O
textsize	long
+=	O
size	int
;	O
else	O
if	O
(	O
(	O
flags	int
&	O
SEC_HAS_CONTENTS	int
)	O
!=	O
0	int
)	O
datasize	long
+=	O
size	int
;	O
else	O
bsssize	long
+=	O
size	int
;	O
}	O
static	O
void	O
print_berkeley_or_gnu_format	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
static	O
int	O
files_seen	int
=	O
0	int
;	O
bfd_size_type	long
total	long
;	O
int	O
col_width	int
=	O
(	O
selected_output_format	enum
==	O
FORMAT_BERKLEY	int
)	O
?	O
7	int
:	O
10	int
;	O
char	O
sep_char	char
=	O
(	O
selected_output_format	enum
==	O
FORMAT_BERKLEY	int
)	O
?	O
'\t'	O
:	O
' '	O
;	O
bsssize	long
=	O
0	int
;	O
datasize	long
=	O
0	int
;	O
textsize	long
=	O
0	int
;	O
bfd_map_over_sections	function
(	O
abfd	pointer
,	O
berkeley_or_gnu_sum	function
,	O
NULL	O
)	O
;	O
bsssize	long
+=	O
common_size	long
;	O
if	O
(	O
files_seen	int
++	O
==	O
0	int
)	O
{	O
if	O
(	O
selected_output_format	enum
==	O
FORMAT_BERKLEY	int
)	O
puts	function
(	O
(	O
radix	enum
==	O
octal	int
)	O
?	O
"   text\t   data\t    bss\t    oct\t    hex\tfilename"	pointer
:	O
"   text\t   data\t    bss\t    dec\t    hex\tfilename"	pointer
)	O
;	O
else	O
puts	function
(	O
"      text       data        bss      total filename"	pointer
)	O
;	O
}	O
total	long
=	O
textsize	long
+	O
datasize	long
+	O
bsssize	long
;	O
if	O
(	O
show_totals	int
)	O
{	O
total_textsize	long
+=	O
textsize	long
;	O
total_datasize	long
+=	O
datasize	long
;	O
total_bsssize	long
+=	O
bsssize	long
;	O
}	O
rprint_number	function
(	O
col_width	int
,	O
textsize	long
)	O
;	O
putchar	function
(	O
sep_char	char
)	O
;	O
rprint_number	function
(	O
col_width	int
,	O
datasize	long
)	O
;	O
putchar	function
(	O
sep_char	char
)	O
;	O
rprint_number	function
(	O
col_width	int
,	O
bsssize	long
)	O
;	O
putchar	function
(	O
sep_char	char
)	O
;	O
if	O
(	O
selected_output_format	enum
==	O
FORMAT_BERKLEY	int
)	O
printf	function
(	O
(	O
(	O
radix	enum
==	O
octal	int
)	O
?	O
"%7lo\t%7lx"	pointer
:	O
"%7lu\t%7lx"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
total	long
,	O
(	O
unsigned	O
long	O
)	O
total	long
)	O
;	O
else	O
rprint_number	function
(	O
col_width	int
,	O
total	long
)	O
;	O
putchar	function
(	O
sep_char	char
)	O
;	O
fputs	function
(	O
bfd_get_filename	function
(	O
abfd	pointer
)	O
,	O
stdout	pointer
)	O
;	O
if	O
(	O
abfd	pointer
->	O
my_archive	pointer
)	O
printf	function
(	O
" (ex %s)"	pointer
,	O
bfd_get_filename	function
(	O
abfd	pointer
->	O
my_archive	pointer
)	O
)	O
;	O
}	O
bfd_size_type	long
svi_total	long
=	O
0	int
;	O
bfd_vma	long
svi_maxvma	long
=	O
0	int
;	O
int	O
svi_namelen	int
=	O
0	int
;	O
int	O
svi_vmalen	int
=	O
0	int
;	O
int	O
svi_sizelen	int
=	O
0	int
;	O
static	O
void	O
sysv_internal_sizer	function
(	O
bfd	struct
*	O
file	pointer
ATTRIBUTE_UNUSED	O
,	O
sec_ptr	pointer
sec	pointer
,	O
void	O
*	O
ignore	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
flagword	int
flags	int
=	O
bfd_section_flags	function
(	O
sec	pointer
)	O
;	O
if	O
(	O
flags	int
==	O
0	int
)	O
return	O
;	O
if	O
(	O
!	O
bfd_is_abs_section	function
(	O
sec	pointer
)	O
&&	O
!	O
bfd_is_com_section	function
(	O
sec	pointer
)	O
&&	O
!	O
bfd_is_und_section	function
(	O
sec	pointer
)	O
)	O
{	O
bfd_size_type	long
size	int
=	O
bfd_section_size	function
(	O
sec	pointer
)	O
;	O
int	O
namelen	int
=	O
strlen	function
(	O
bfd_section_name	function
(	O
sec	pointer
)	O
)	O
;	O
if	O
(	O
namelen	int
>	O
svi_namelen	int
)	O
svi_namelen	int
=	O
namelen	int
;	O
svi_total	long
+=	O
size	int
;	O
if	O
(	O
bfd_section_vma	function
(	O
sec	pointer
)	O
>	O
svi_maxvma	long
)	O
svi_maxvma	long
=	O
bfd_section_vma	function
(	O
sec	pointer
)	O
;	O
}	O
}	O
static	O
void	O
sysv_one_line	function
(	O
const	O
char	O
*	O
name	pointer
,	O
bfd_size_type	long
size	int
,	O
bfd_vma	long
vma	long
)	O
{	O
printf	function
(	O
"%-*s   "	pointer
,	O
svi_namelen	int
,	O
name	pointer
)	O
;	O
rprint_number	function
(	O
svi_sizelen	int
,	O
size	int
)	O
;	O
printf	function
(	O
"   "	pointer
)	O
;	O
rprint_number	function
(	O
svi_vmalen	int
,	O
vma	long
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
static	O
void	O
sysv_internal_printer	function
(	O
bfd	struct
*	O
file	pointer
ATTRIBUTE_UNUSED	O
,	O
sec_ptr	pointer
sec	pointer
,	O
void	O
*	O
ignore	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
flagword	int
flags	int
=	O
bfd_section_flags	function
(	O
sec	pointer
)	O
;	O
if	O
(	O
flags	int
==	O
0	int
)	O
return	O
;	O
if	O
(	O
!	O
bfd_is_abs_section	function
(	O
sec	pointer
)	O
&&	O
!	O
bfd_is_com_section	function
(	O
sec	pointer
)	O
&&	O
!	O
bfd_is_und_section	function
(	O
sec	pointer
)	O
)	O
{	O
bfd_size_type	long
size	int
=	O
bfd_section_size	function
(	O
sec	pointer
)	O
;	O
svi_total	long
+=	O
size	int
;	O
sysv_one_line	function
(	O
bfd_section_name	function
(	O
sec	pointer
)	O
,	O
size	int
,	O
bfd_section_vma	function
(	O
sec	pointer
)	O
)	O
;	O
}	O
}	O
static	O
void	O
print_sysv_format	function
(	O
bfd	struct
*	O
file	pointer
)	O
{	O
svi_total	long
=	O
0	int
;	O
svi_maxvma	long
=	O
0	int
;	O
svi_namelen	int
=	O
0	int
;	O
bfd_map_over_sections	function
(	O
file	pointer
,	O
sysv_internal_sizer	function
,	O
NULL	O
)	O
;	O
if	O
(	O
show_common	int
)	O
{	O
if	O
(	O
svi_namelen	int
<	O
(	O
int	O
)	O
sizeof	O
(	O
"*COM*"	pointer
)	O
-	O
1	int
)	O
svi_namelen	int
=	O
sizeof	O
(	O
"*COM*"	pointer
)	O
-	O
1	int
;	O
svi_total	long
+=	O
common_size	long
;	O
}	O
svi_vmalen	int
=	O
size_number	function
(	O
(	O
bfd_size_type	long
)	O
svi_maxvma	long
)	O
;	O
if	O
(	O
(	O
size_t	long
)	O
svi_vmalen	int
<	O
sizeof	O
(	O
"addr"	pointer
)	O
-	O
1	int
)	O
svi_vmalen	int
=	O
sizeof	O
(	O
"addr"	pointer
)	O
-	O
1	int
;	O
svi_sizelen	int
=	O
size_number	function
(	O
svi_total	long
)	O
;	O
if	O
(	O
(	O
size_t	long
)	O
svi_sizelen	int
<	O
sizeof	O
(	O
"size"	pointer
)	O
-	O
1	int
)	O
svi_sizelen	int
=	O
sizeof	O
(	O
"size"	pointer
)	O
-	O
1	int
;	O
svi_total	long
=	O
0	int
;	O
printf	function
(	O
"%s  "	pointer
,	O
bfd_get_filename	function
(	O
file	pointer
)	O
)	O
;	O
if	O
(	O
file	pointer
->	O
my_archive	pointer
)	O
printf	function
(	O
" (ex %s)"	pointer
,	O
bfd_get_filename	function
(	O
file	pointer
->	O
my_archive	pointer
)	O
)	O
;	O
printf	function
(	O
":\n%-*s   %*s   %*s\n"	pointer
,	O
svi_namelen	int
,	O
"section"	pointer
,	O
svi_sizelen	int
,	O
"size"	pointer
,	O
svi_vmalen	int
,	O
"addr"	pointer
)	O
;	O
bfd_map_over_sections	function
(	O
file	pointer
,	O
sysv_internal_printer	function
,	O
NULL	O
)	O
;	O
if	O
(	O
show_common	int
)	O
{	O
svi_total	long
+=	O
common_size	long
;	O
sysv_one_line	function
(	O
"*COM*"	pointer
,	O
common_size	long
,	O
0	int
)	O
;	O
}	O
printf	function
(	O
"%-*s   "	pointer
,	O
svi_namelen	int
,	O
"Total"	pointer
)	O
;	O
rprint_number	function
(	O
svi_sizelen	int
,	O
svi_total	long
)	O
;	O
printf	function
(	O
"\n\n"	pointer
)	O
;	O
}	O
static	O
void	O
print_sizes	function
(	O
bfd	struct
*	O
file	pointer
)	O
{	O
if	O
(	O
show_common	int
)	O
calculate_common_size	function
(	O
file	pointer
)	O
;	O
if	O
(	O
selected_output_format	enum
==	O
FORMAT_SYSV	int
)	O
print_sysv_format	function
(	O
file	pointer
)	O
;	O
else	O
print_berkeley_or_gnu_format	function
(	O
file	pointer
)	O
;	O
}	O
