static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: qam_rec.c,v 1.4 2014/04/17 20:27:41 sebdiaz Exp $"	pointer
;	O
int	O
CDB___qam_inc_recover	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
op	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
op	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
if	O
(	O
info	pointer
)	O
{	O
}	O
__qam_inc_args	struct
*	O
argp	pointer
;	O
DB	struct
*	O
file_dbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
DB_LOCK	struct
lock	struct
;	O
DB_MPOOLFILE	struct
*	O
mpf	pointer
;	O
QMETA	struct
*	O
meta	pointer
;	O
db_pgno_t	int
metapg	int
;	O
int	O
cmp_p	int
,	O
modified	int
,	O
ret	int
;	O
COMPQUIET	O
(	O
info	pointer
,	O
NULL	O
)	O
;	O
REC_PRINT	O
(	O
CDB___qam_inc_print	function
)	O
;	O
REC_INTRO	O
(	O
CDB___qam_inc_read	function
,	O
1	int
)	O
;	O
metapg	int
=	O
(	O
(	O
QUEUE	struct
*	O
)	O
file_dbp	pointer
->	O
q_internal	pointer
)	O
->	O
q_meta	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_lget	function
(	O
dbc	pointer
,	O
LCK_ROLLBACK	int
,	O
metapg	int
,	O
DB_LOCK_WRITE	int
,	O
0	int
,	O
&	O
lock	struct
)	O
)	O
!=	O
0	int
)	O
goto	O
done	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
metapg	int
,	O
0	int
,	O
&	O
meta	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
metapg	int
,	O
DB_MPOOL_CREATE	int
,	O
&	O
meta	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
(	O
void	O
)	O
__LPUT	O
(	O
dbc	pointer
,	O
lock	struct
)	O
;	O
goto	O
out	O
;	O
}	O
meta	pointer
->	O
dbmeta	struct
.	O
pgno	int
=	O
metapg	int
;	O
meta	pointer
->	O
dbmeta	struct
.	O
type	enum
=	O
P_QAMMETA	int
;	O
}	O
else	O
{	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
(	O
void	O
)	O
__LPUT	O
(	O
dbc	pointer
,	O
lock	struct
)	O
;	O
goto	O
out	O
;	O
}	O
}	O
modified	int
=	O
0	int
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
meta	pointer
)	O
,	O
&	O
argp	pointer
->	O
lsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
LSN	O
(	O
meta	pointer
)	O
,	O
&	O
argp	pointer
->	O
lsn	struct
)	O
;	O
if	O
(	O
cmp_p	int
==	O
0	int
)	O
{	O
modified	int
=	O
1	int
;	O
meta	pointer
->	O
cur_recno	int
++	O
;	O
meta	pointer
->	O
dbmeta	struct
.	O
lsn	struct
=	O
*	O
lsnp	pointer
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
meta	pointer
,	O
modified	int
?	O
DB_MPOOL_DIRTY	int
:	O
0	int
)	O
)	O
)	O
goto	O
out	O
;	O
(	O
void	O
)	O
__LPUT	O
(	O
dbc	pointer
,	O
lock	struct
)	O
;	O
done	O
:	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
out	O
:	O
REC_CLOSE	O
;	O
}	O
int	O
CDB___qam_incfirst_recover	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
op	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
op	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
if	O
(	O
info	pointer
)	O
{	O
}	O
__qam_incfirst_args	struct
*	O
argp	pointer
;	O
DB	struct
*	O
file_dbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
DB_LOCK	struct
lock	struct
;	O
DB_MPOOLFILE	struct
*	O
mpf	pointer
;	O
QMETA	struct
*	O
meta	pointer
;	O
db_pgno_t	int
metapg	int
;	O
int	O
modified	int
,	O
ret	int
;	O
COMPQUIET	O
(	O
info	pointer
,	O
NULL	O
)	O
;	O
REC_PRINT	O
(	O
CDB___qam_incfirst_print	function
)	O
;	O
REC_INTRO	O
(	O
CDB___qam_incfirst_read	function
,	O
1	int
)	O
;	O
metapg	int
=	O
(	O
(	O
QUEUE	struct
*	O
)	O
file_dbp	pointer
->	O
q_internal	pointer
)	O
->	O
q_meta	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_lget	function
(	O
dbc	pointer
,	O
LCK_ROLLBACK	int
,	O
metapg	int
,	O
DB_LOCK_WRITE	int
,	O
0	int
,	O
&	O
lock	struct
)	O
)	O
!=	O
0	int
)	O
goto	O
done	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
metapg	int
,	O
0	int
,	O
&	O
meta	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
metapg	int
,	O
DB_MPOOL_CREATE	int
,	O
&	O
meta	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
(	O
void	O
)	O
__LPUT	O
(	O
dbc	pointer
,	O
lock	struct
)	O
;	O
goto	O
out	O
;	O
}	O
meta	pointer
->	O
dbmeta	struct
.	O
pgno	int
=	O
metapg	int
;	O
meta	pointer
->	O
dbmeta	struct
.	O
type	enum
=	O
P_QAMMETA	int
;	O
}	O
else	O
{	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
(	O
void	O
)	O
__LPUT	O
(	O
dbc	pointer
,	O
lock	struct
)	O
;	O
goto	O
out	O
;	O
}	O
}	O
modified	int
=	O
0	int
;	O
if	O
(	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
if	O
(	O
meta	pointer
->	O
first_recno	int
>	O
argp	pointer
->	O
recno	int
)	O
{	O
meta	pointer
->	O
first_recno	int
=	O
argp	pointer
->	O
recno	int
;	O
modified	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
meta	pointer
,	O
modified	int
?	O
DB_MPOOL_DIRTY	int
:	O
0	int
)	O
)	O
)	O
goto	O
out	O
;	O
(	O
void	O
)	O
__LPUT	O
(	O
dbc	pointer
,	O
lock	struct
)	O
;	O
done	O
:	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
out	O
:	O
REC_CLOSE	O
;	O
}	O
int	O
CDB___qam_mvptr_recover	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
op	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
op	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
if	O
(	O
info	pointer
)	O
{	O
}	O
__qam_mvptr_args	struct
*	O
argp	pointer
;	O
DB	struct
*	O
file_dbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
DB_LOCK	struct
lock	struct
;	O
DB_MPOOLFILE	struct
*	O
mpf	pointer
;	O
QMETA	struct
*	O
meta	pointer
;	O
db_pgno_t	int
metapg	int
;	O
int	O
cmp_p	int
,	O
modified	int
,	O
ret	int
;	O
COMPQUIET	O
(	O
info	pointer
,	O
NULL	O
)	O
;	O
REC_PRINT	O
(	O
CDB___qam_mvptr_print	function
)	O
;	O
REC_INTRO	O
(	O
CDB___qam_mvptr_read	function
,	O
1	int
)	O
;	O
metapg	int
=	O
(	O
(	O
QUEUE	struct
*	O
)	O
file_dbp	pointer
->	O
q_internal	pointer
)	O
->	O
q_meta	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_lget	function
(	O
dbc	pointer
,	O
LCK_ROLLBACK	int
,	O
metapg	int
,	O
DB_LOCK_WRITE	int
,	O
0	int
,	O
&	O
lock	struct
)	O
)	O
!=	O
0	int
)	O
goto	O
done	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
metapg	int
,	O
0	int
,	O
&	O
meta	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
metapg	int
,	O
DB_MPOOL_CREATE	int
,	O
&	O
meta	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
(	O
void	O
)	O
__LPUT	O
(	O
dbc	pointer
,	O
lock	struct
)	O
;	O
goto	O
out	O
;	O
}	O
meta	pointer
->	O
dbmeta	struct
.	O
pgno	int
=	O
metapg	int
;	O
meta	pointer
->	O
dbmeta	struct
.	O
type	enum
=	O
P_QAMMETA	int
;	O
}	O
else	O
{	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
(	O
void	O
)	O
__LPUT	O
(	O
dbc	pointer
,	O
lock	struct
)	O
;	O
goto	O
out	O
;	O
}	O
}	O
modified	int
=	O
0	int
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
meta	pointer
->	O
dbmeta	struct
.	O
lsn	struct
,	O
&	O
argp	pointer
->	O
metalsn	struct
)	O
;	O
if	O
(	O
cmp_p	int
==	O
0	int
)	O
{	O
if	O
(	O
argp	pointer
->	O
opcode	int
&	O
QAM_SETFIRST	int
)	O
meta	pointer
->	O
first_recno	int
=	O
argp	pointer
->	O
new_first	int
;	O
if	O
(	O
argp	pointer
->	O
opcode	int
&	O
QAM_SETCUR	int
)	O
meta	pointer
->	O
cur_recno	int
=	O
argp	pointer
->	O
new_cur	int
;	O
modified	int
=	O
1	int
;	O
meta	pointer
->	O
dbmeta	struct
.	O
lsn	struct
=	O
*	O
lsnp	pointer
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
meta	pointer
,	O
modified	int
?	O
DB_MPOOL_DIRTY	int
:	O
0	int
)	O
)	O
)	O
goto	O
out	O
;	O
(	O
void	O
)	O
__LPUT	O
(	O
dbc	pointer
,	O
lock	struct
)	O
;	O
done	O
:	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
out	O
:	O
REC_CLOSE	O
;	O
}	O
int	O
CDB___qam_del_recover	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
op	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
op	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
if	O
(	O
info	pointer
)	O
{	O
}	O
__qam_del_args	struct
*	O
argp	pointer
;	O
DB	struct
*	O
file_dbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
DB_LOCK	struct
lock	struct
;	O
DB_MPOOLFILE	struct
*	O
mpf	pointer
;	O
QAMDATA	struct
*	O
qp	pointer
;	O
QMETA	struct
*	O
meta	pointer
;	O
QPAGE	struct
*	O
pagep	pointer
;	O
db_pgno_t	int
metapg	int
;	O
int	O
cmp_n	int
,	O
modified	int
,	O
ret	int
;	O
COMPQUIET	O
(	O
info	pointer
,	O
NULL	O
)	O
;	O
REC_PRINT	O
(	O
CDB___qam_del_print	function
)	O
;	O
REC_INTRO	O
(	O
CDB___qam_del_read	function
,	O
1	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
pgno	int
,	O
0	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
pgno	int
,	O
DB_MPOOL_CREATE	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
pagep	pointer
->	O
pgno	int
=	O
argp	pointer
->	O
pgno	int
;	O
pagep	pointer
->	O
type	enum
=	O
P_QAMDATA	int
;	O
}	O
else	O
{	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
goto	O
out	O
;	O
}	O
}	O
modified	int
=	O
0	int
;	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
)	O
;	O
if	O
(	O
cmp_n	int
>	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
qp	pointer
=	O
QAM_GET_RECORD	O
(	O
file_dbp	pointer
,	O
pagep	pointer
,	O
argp	pointer
->	O
indx	short
)	O
;	O
F_CLR	O
(	O
qp	pointer
,	O
QAM_VALID	int
)	O
;	O
LSN	O
(	O
pagep	pointer
)	O
=	O
*	O
lsnp	pointer
;	O
modified	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
cmp_n	int
<=	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
metapg	int
=	O
(	O
(	O
QUEUE	struct
*	O
)	O
file_dbp	pointer
->	O
q_internal	pointer
)	O
->	O
q_meta	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_lget	function
(	O
dbc	pointer
,	O
LCK_ROLLBACK	int
,	O
metapg	int
,	O
DB_LOCK_WRITE	int
,	O
0	int
,	O
&	O
lock	struct
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
file_dbp	pointer
->	O
mpf	pointer
,	O
&	O
metapg	int
,	O
0	int
,	O
&	O
meta	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
(	O
void	O
)	O
__LPUT	O
(	O
dbc	pointer
,	O
lock	struct
)	O
;	O
goto	O
done	O
;	O
}	O
if	O
(	O
argp	pointer
->	O
recno	int
<	O
meta	pointer
->	O
first_recno	int
)	O
{	O
meta	pointer
->	O
first_recno	int
=	O
argp	pointer
->	O
recno	int
;	O
(	O
void	O
)	O
CDB_memp_fput	function
(	O
file_dbp	pointer
->	O
mpf	pointer
,	O
meta	pointer
,	O
DB_MPOOL_DIRTY	int
)	O
;	O
}	O
else	O
(	O
void	O
)	O
CDB_memp_fput	function
(	O
file_dbp	pointer
->	O
mpf	pointer
,	O
meta	pointer
,	O
0	int
)	O
;	O
(	O
void	O
)	O
__LPUT	O
(	O
dbc	pointer
,	O
lock	struct
)	O
;	O
qp	pointer
=	O
QAM_GET_RECORD	O
(	O
file_dbp	pointer
,	O
pagep	pointer
,	O
argp	pointer
->	O
indx	short
)	O
;	O
F_SET	O
(	O
qp	pointer
,	O
QAM_VALID	int
)	O
;	O
LSN	O
(	O
pagep	pointer
)	O
=	O
argp	pointer
->	O
lsn	struct
;	O
modified	int
=	O
1	int
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pagep	pointer
,	O
modified	int
?	O
DB_MPOOL_DIRTY	int
:	O
0	int
)	O
)	O
)	O
goto	O
out	O
;	O
done	O
:	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
out	O
:	O
REC_CLOSE	O
;	O
}	O
int	O
CDB___qam_add_recover	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
op	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
op	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
if	O
(	O
info	pointer
)	O
{	O
}	O
__qam_add_args	struct
*	O
argp	pointer
;	O
DB	struct
*	O
file_dbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
DB_MPOOLFILE	struct
*	O
mpf	pointer
;	O
QAMDATA	struct
*	O
qp	pointer
;	O
QPAGE	struct
*	O
pagep	pointer
;	O
int	O
cmp_n	int
,	O
cmp_p	int
,	O
modified	int
,	O
ret	int
;	O
COMPQUIET	O
(	O
info	pointer
,	O
NULL	O
)	O
;	O
REC_PRINT	O
(	O
CDB___qam_add_print	function
)	O
;	O
REC_INTRO	O
(	O
CDB___qam_add_read	function
,	O
1	int
)	O
;	O
modified	int
=	O
0	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
pgno	int
,	O
0	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
pgno	int
,	O
DB_MPOOL_CREATE	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
pagep	pointer
->	O
pgno	int
=	O
argp	pointer
->	O
pgno	int
;	O
pagep	pointer
->	O
type	enum
=	O
P_QAMDATA	int
;	O
modified	int
=	O
1	int
;	O
}	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
lsn	struct
)	O
;	O
if	O
(	O
cmp_p	int
<=	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB___qam_pitem	function
(	O
dbc	pointer
,	O
pagep	pointer
,	O
argp	pointer
->	O
indx	short
,	O
argp	pointer
->	O
recno	int
,	O
&	O
argp	pointer
->	O
data	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
LSN	O
(	O
pagep	pointer
)	O
=	O
*	O
lsnp	pointer
;	O
modified	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
cmp_n	int
>=	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
if	O
(	O
argp	pointer
->	O
olddata	struct
.	O
size	int
!=	O
0	int
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB___qam_pitem	function
(	O
dbc	pointer
,	O
pagep	pointer
,	O
argp	pointer
->	O
indx	short
,	O
argp	pointer
->	O
recno	int
,	O
&	O
argp	pointer
->	O
olddata	struct
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
!	O
(	O
argp	pointer
->	O
vflag	int
&	O
QAM_VALID	int
)	O
)	O
{	O
qp	pointer
=	O
QAM_GET_RECORD	O
(	O
file_dbp	pointer
,	O
pagep	pointer
,	O
argp	pointer
->	O
indx	short
)	O
;	O
F_CLR	O
(	O
qp	pointer
,	O
QAM_VALID	int
)	O
;	O
}	O
modified	int
=	O
1	int
;	O
}	O
else	O
{	O
qp	pointer
=	O
QAM_GET_RECORD	O
(	O
file_dbp	pointer
,	O
pagep	pointer
,	O
argp	pointer
->	O
indx	short
)	O
;	O
qp	pointer
->	O
flags	int
=	O
0	int
;	O
modified	int
=	O
1	int
;	O
}	O
LSN	O
(	O
pagep	pointer
)	O
=	O
argp	pointer
->	O
lsn	struct
;	O
}	O
err	pointer
:	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pagep	pointer
,	O
modified	int
?	O
DB_MPOOL_DIRTY	int
:	O
0	int
)	O
)	O
)	O
goto	O
out	O
;	O
done	O
:	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
out	O
:	O
REC_CLOSE	O
;	O
}	O
