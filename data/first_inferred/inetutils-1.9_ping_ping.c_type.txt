extern	O
int	O
ping_echo	function
(	O
char	O
*	O
hostname	pointer
)	O
;	O
extern	O
int	O
ping_timestamp	function
(	O
char	O
*	O
hostname	pointer
)	O
;	O
extern	O
int	O
ping_address	union
(	O
char	O
*	O
hostname	pointer
)	O
;	O
extern	O
int	O
ping_router	function
(	O
char	O
*	O
hostname	pointer
)	O
;	O
PING	struct
*	O
ping	pointer
;	O
bool	bool
is_root	bool
=	O
false	int
;	O
unsigned	O
char	O
*	O
data_buffer	pointer
;	O
unsigned	O
char	O
*	O
patptr	pointer
;	O
int	O
pattern_len	pointer
=	O
16	int
;	O
int	O
socket_type	int
;	O
size_t	long
count	long
=	O
DEFAULT_PING_COUNT	int
;	O
size_t	long
interval	long
;	O
size_t	long
data_length	long
=	O
PING_DATALEN	O
;	O
unsigned	O
options	pointer
;	O
unsigned	O
long	O
preload	long
=	O
0	int
;	O
int	O
timeout	int
=	O
-	O
1	int
;	O
int	O
linger	struct
=	O
MAXWAIT	int
;	O
int	O
(	O
*	O
ping_type	int
)	O
(	O
char	O
*	O
hostname	pointer
)	O
=	O
ping_echo	function
;	O
int	O
(	O
*	O
decode_type	function
(	O
const	O
char	O
*	O
arg	pointer
)	O
)	O
(	O
char	O
*	O
hostname	pointer
)	O
;	O
static	O
int	O
send_echo	function
(	O
PING	struct
*	O
ping	pointer
)	O
;	O
const	O
char	O
args_doc	pointer
[	O
]	O
=	O
"HOST ..."	pointer
;	O
const	O
char	O
doc	pointer
[	O
]	O
=	O
"Send ICMP ECHO_REQUEST packets to network hosts."	pointer
"\vOptions marked with (root only) are available only to "	pointer
"superuser."	pointer
;	O
const	O
char	O
*	O
program_authors	array
[	O
]	O
=	O
{	O
"Sergey Poznyakoff"	pointer
,	O
NULL	O
}	O
;	O
enum	O
{	O
ARG_ECHO	int
=	O
256	int
,	O
ARG_ADDRESS	int
,	O
ARG_TIMESTAMP	int
,	O
ARG_ROUTERDISCOVERY	int
}	O
;	O
static	O
struct	O
argp_option	struct
argp_options	array
[	O
]	O
=	O
{	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
"Options controlling ICMP request types:"	pointer
,	O
GRP	int
}	O
,	O
{	O
"address"	pointer
,	O
ARG_ADDRESS	int
,	O
NULL	O
,	O
0	int
,	O
"send ICMP_ADDRESS packets (root only)"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"echo"	pointer
,	O
ARG_ECHO	int
,	O
NULL	O
,	O
0	int
,	O
"send ICMP_ECHO packets (default)"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"timestamp"	pointer
,	O
ARG_TIMESTAMP	int
,	O
NULL	O
,	O
0	int
,	O
"send ICMP_TIMESTAMP packets"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"type"	pointer
,	O
't'	O
,	O
"TYPE"	pointer
,	O
0	int
,	O
"send TYPE packets"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"router"	pointer
,	O
ARG_ROUTERDISCOVERY	int
,	O
NULL	O
,	O
OPTION_HIDDEN	int
,	O
"send "	pointer
"ICMP_ROUTERDISCOVERY packets (root only)"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
"Options valid for all request types:"	pointer
,	O
GRP	int
}	O
,	O
{	O
"count"	pointer
,	O
'c'	O
,	O
"NUMBER"	pointer
,	O
0	int
,	O
"stop after sending NUMBER packets"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"debug"	pointer
,	O
'd'	O
,	O
NULL	O
,	O
0	int
,	O
"set the SO_DEBUG option"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"interval"	pointer
,	O
'i'	O
,	O
"NUMBER"	pointer
,	O
0	int
,	O
"wait NUMBER seconds between sending each "	pointer
"packet"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"numeric"	pointer
,	O
'n'	O
,	O
NULL	O
,	O
0	int
,	O
"do not resolve host addresses"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"ignore-routing"	pointer
,	O
'r'	O
,	O
NULL	O
,	O
0	int
,	O
"send directly to a host on an attached "	pointer
"network"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"verbose"	pointer
,	O
'v'	O
,	O
NULL	O
,	O
0	int
,	O
"verbose output"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"timeout"	pointer
,	O
'w'	O
,	O
"N"	pointer
,	O
0	int
,	O
"stop after N seconds"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"linger"	pointer
,	O
'W'	O
,	O
"N"	pointer
,	O
0	int
,	O
"number of seconds to wait for response"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
"Options valid for --echo requests:"	pointer
,	O
GRP	int
}	O
,	O
{	O
"flood"	pointer
,	O
'f'	O
,	O
NULL	O
,	O
0	int
,	O
"flood ping (root only)"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"preload"	pointer
,	O
'l'	O
,	O
"NUMBER"	pointer
,	O
0	int
,	O
"send NUMBER packets as fast as possible "	pointer
"before falling into normal mode of behavior (root only)"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"pattern"	pointer
,	O
'p'	O
,	O
"PATTERN"	pointer
,	O
0	int
,	O
"fill ICMP packet with given pattern (hex)"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"quiet"	pointer
,	O
'q'	O
,	O
NULL	O
,	O
0	int
,	O
"quiet output"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"route"	pointer
,	O
'R'	O
,	O
NULL	O
,	O
0	int
,	O
"record route"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"size"	pointer
,	O
's'	O
,	O
"NUMBER"	pointer
,	O
0	int
,	O
"send NUMBER data octets"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
error_t	int
parse_opt	function
(	O
int	O
key	int
,	O
char	O
*	O
arg	pointer
,	O
struct	O
argp_state	struct
*	O
state	pointer
)	O
{	O
char	O
*	O
endptr	pointer
;	O
static	O
unsigned	O
char	O
pattern	array
[	O
16	int
]	O
;	O
double	O
v	double
;	O
switch	O
(	O
key	int
)	O
{	O
case	O
'c'	O
:	O
count	long
=	O
ping_cvt_number	function
(	O
arg	pointer
,	O
0	int
,	O
1	int
)	O
;	O
break	O
;	O
case	O
'd'	O
:	O
socket_type	int
|=	O
SO_DEBUG	int
;	O
break	O
;	O
case	O
'i'	O
:	O
v	double
=	O
strtod	function
(	O
arg	pointer
,	O
&	O
endptr	pointer
)	O
;	O
if	O
(	O
*	O
endptr	pointer
)	O
argp_error	function
(	O
state	pointer
,	O
"invalid value (`%s' near `%s')"	pointer
,	O
arg	pointer
,	O
endptr	pointer
)	O
;	O
options	pointer
|=	O
OPT_INTERVAL	int
;	O
interval	long
=	O
v	double
*	O
PING_PRECISION	int
;	O
if	O
(	O
!	O
is_root	bool
&&	O
interval	long
<	O
MIN_USER_INTERVAL	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"option value too small: %s"	pointer
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
'r'	O
:	O
socket_type	int
|=	O
SO_DONTROUTE	int
;	O
break	O
;	O
case	O
's'	O
:	O
data_length	long
=	O
ping_cvt_number	function
(	O
arg	pointer
,	O
PING_MAX_DATALEN	O
,	O
1	int
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
options	pointer
|=	O
OPT_NUMERIC	int
;	O
break	O
;	O
case	O
'p'	O
:	O
decode_pattern	function
(	O
arg	pointer
,	O
&	O
pattern_len	pointer
,	O
pattern	array
)	O
;	O
patptr	pointer
=	O
pattern	array
;	O
break	O
;	O
case	O
'q'	O
:	O
options	pointer
|=	O
OPT_QUIET	int
;	O
break	O
;	O
case	O
'w'	O
:	O
timeout	int
=	O
ping_cvt_number	function
(	O
arg	pointer
,	O
INT_MAX	O
,	O
0	int
)	O
;	O
break	O
;	O
case	O
'W'	O
:	O
linger	struct
=	O
ping_cvt_number	function
(	O
arg	pointer
,	O
INT_MAX	O
,	O
0	int
)	O
;	O
break	O
;	O
case	O
'R'	O
:	O
options	pointer
|=	O
OPT_RROUTE	int
;	O
break	O
;	O
case	O
'v'	O
:	O
options	pointer
|=	O
OPT_VERBOSE	int
;	O
break	O
;	O
case	O
'l'	O
:	O
preload	long
=	O
strtoul	function
(	O
arg	pointer
,	O
&	O
endptr	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
endptr	pointer
||	O
preload	long
>	O
INT_MAX	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"invalid preload value (%s)"	pointer
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
'f'	O
:	O
options	pointer
|=	O
OPT_FLOOD	int
;	O
break	O
;	O
case	O
't'	O
:	O
ping_type	int
=	O
decode_type	function
(	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
ARG_ECHO	int
:	O
ping_type	int
=	O
decode_type	function
(	O
"echo"	pointer
)	O
;	O
break	O
;	O
case	O
ARG_TIMESTAMP	int
:	O
ping_type	int
=	O
decode_type	function
(	O
"timestamp"	pointer
)	O
;	O
break	O
;	O
case	O
ARG_ADDRESS	int
:	O
ping_type	int
=	O
decode_type	function
(	O
"address"	pointer
)	O
;	O
break	O
;	O
case	O
ARG_ROUTERDISCOVERY	int
:	O
ping_type	int
=	O
decode_type	function
(	O
"router"	pointer
)	O
;	O
break	O
;	O
case	O
ARGP_KEY_NO_ARGS	int
:	O
argp_error	function
(	O
state	pointer
,	O
"missing host operand"	pointer
)	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
argp	struct
argp	struct
=	O
{	O
argp_options	array
,	O
parse_opt	function
,	O
args_doc	pointer
,	O
doc	pointer
}	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
index	function
;	O
int	O
one	int
=	O
1	int
;	O
int	O
status	int
=	O
0	int
;	O
set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
getuid	function
(	O
)	O
==	O
0	int
)	O
is_root	bool
=	O
true	int
;	O
iu_argp_init	O
(	O
"ping"	pointer
,	O
program_authors	array
)	O
;	O
argp_parse	function
(	O
&	O
argp	struct
,	O
argc	int
,	O
argv	pointer
,	O
0	int
,	O
&	O
index	function
,	O
NULL	O
)	O
;	O
ping	pointer
=	O
ping_init	function
(	O
ICMP_ECHO	int
,	O
getpid	function
(	O
)	O
)	O
;	O
if	O
(	O
ping	pointer
==	O
NULL	O
)	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
ping_set_sockopt	function
(	O
ping	pointer
,	O
SO_BROADCAST	int
,	O
(	O
char	O
*	O
)	O
&	O
one	int
,	O
sizeof	O
(	O
one	int
)	O
)	O
;	O
setuid	function
(	O
getuid	function
(	O
)	O
)	O
;	O
argv	pointer
+=	O
index	function
;	O
argc	int
-=	O
index	function
;	O
if	O
(	O
count	long
!=	O
0	int
)	O
ping_set_count	function
(	O
ping	pointer
,	O
count	long
)	O
;	O
if	O
(	O
socket_type	int
!=	O
0	int
)	O
ping_set_sockopt	function
(	O
ping	pointer
,	O
socket_type	int
,	O
&	O
one	int
,	O
sizeof	O
(	O
one	int
)	O
)	O
;	O
if	O
(	O
options	pointer
&	O
OPT_INTERVAL	int
)	O
ping_set_interval	function
(	O
ping	pointer
,	O
interval	long
)	O
;	O
init_data_buffer	function
(	O
patptr	pointer
,	O
pattern_len	pointer
)	O
;	O
while	O
(	O
argc	int
--	O
)	O
{	O
status	int
|=	O
(	O
*	O
(	O
ping_type	int
)	O
)	O
(	O
*	O
argv	pointer
++	O
)	O
;	O
ping_reset	function
(	O
ping	pointer
)	O
;	O
}	O
free	function
(	O
ping	pointer
)	O
;	O
free	function
(	O
data_buffer	pointer
)	O
;	O
return	O
status	int
;	O
}	O
int	O
(	O
*	O
decode_type	function
(	O
const	O
char	O
*	O
arg	pointer
)	O
)	O
(	O
char	O
*	O
hostname	pointer
)	O
{	O
int	O
(	O
*	O
ping_type	int
)	O
(	O
char	O
*	O
hostname	pointer
)	O
;	O
if	O
(	O
strcasecmp	function
(	O
arg	pointer
,	O
"echo"	pointer
)	O
==	O
0	int
)	O
ping_type	int
=	O
ping_echo	function
;	O
else	O
if	O
(	O
strcasecmp	function
(	O
arg	pointer
,	O
"timestamp"	pointer
)	O
==	O
0	int
)	O
ping_type	int
=	O
ping_timestamp	function
;	O
else	O
if	O
(	O
strcasecmp	function
(	O
arg	pointer
,	O
"address"	pointer
)	O
==	O
0	int
)	O
ping_type	int
=	O
ping_address	union
;	O
else	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"unsupported packet type: %s"	pointer
,	O
arg	pointer
)	O
;	O
return	O
ping_type	int
;	O
}	O
int	O
volatile	O
stop	int
=	O
0	int
;	O
void	O
sig_int	function
(	O
int	O
signal	function
)	O
{	O
stop	int
=	O
1	int
;	O
}	O
int	O
ping_run	function
(	O
PING	struct
*	O
ping	pointer
,	O
int	O
(	O
*	O
finish	pointer
)	O
(	O
)	O
)	O
{	O
fd_set	struct
fdset	struct
;	O
int	O
fdmax	int
;	O
struct	O
timeval	struct
resp_time	struct
;	O
struct	O
timeval	struct
last	struct
,	O
intvl	struct
,	O
now	struct
;	O
struct	O
timeval	struct
*	O
t	pointer
=	O
NULL	O
;	O
int	O
finishing	int
=	O
0	int
;	O
int	O
nresp	int
=	O
0	int
;	O
int	O
i	int
;	O
signal	function
(	O
SIGINT	int
,	O
sig_int	function
)	O
;	O
fdmax	int
=	O
ping	pointer
->	O
ping_fd	int
+	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
preload	long
;	O
i	int
++	O
)	O
send_echo	function
(	O
ping	pointer
)	O
;	O
if	O
(	O
options	pointer
&	O
OPT_FLOOD	int
)	O
{	O
intvl	struct
.	O
tv_sec	long
=	O
0	int
;	O
intvl	struct
.	O
tv_usec	long
=	O
10000	int
;	O
}	O
else	O
PING_SET_INTERVAL	O
(	O
intvl	struct
,	O
ping	pointer
->	O
ping_interval	long
)	O
;	O
gettimeofday	function
(	O
&	O
last	struct
,	O
NULL	O
)	O
;	O
send_echo	function
(	O
ping	pointer
)	O
;	O
while	O
(	O
!	O
stop	int
)	O
{	O
int	O
n	int
;	O
FD_ZERO	O
(	O
&	O
fdset	struct
)	O
;	O
FD_SET	O
(	O
ping	pointer
->	O
ping_fd	int
,	O
&	O
fdset	struct
)	O
;	O
gettimeofday	function
(	O
&	O
now	struct
,	O
NULL	O
)	O
;	O
resp_time	struct
.	O
tv_sec	long
=	O
last	struct
.	O
tv_sec	long
+	O
intvl	struct
.	O
tv_sec	long
-	O
now	struct
.	O
tv_sec	long
;	O
resp_time	struct
.	O
tv_usec	long
=	O
last	struct
.	O
tv_usec	long
+	O
intvl	struct
.	O
tv_usec	long
-	O
now	struct
.	O
tv_usec	long
;	O
while	O
(	O
resp_time	struct
.	O
tv_usec	long
<	O
0	int
)	O
{	O
resp_time	struct
.	O
tv_usec	long
+=	O
1000000	int
;	O
resp_time	struct
.	O
tv_sec	long
--	O
;	O
}	O
while	O
(	O
resp_time	struct
.	O
tv_usec	long
>=	O
1000000	int
)	O
{	O
resp_time	struct
.	O
tv_usec	long
-=	O
1000000	int
;	O
resp_time	struct
.	O
tv_sec	long
++	O
;	O
}	O
if	O
(	O
resp_time	struct
.	O
tv_sec	long
<	O
0	int
)	O
resp_time	struct
.	O
tv_sec	long
=	O
resp_time	struct
.	O
tv_usec	long
=	O
0	int
;	O
n	int
=	O
select	function
(	O
fdmax	int
,	O
&	O
fdset	struct
,	O
NULL	O
,	O
NULL	O
,	O
&	O
resp_time	struct
)	O
;	O
if	O
(	O
n	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
!=	O
EINTR	int
)	O
perror	function
(	O
"select"	pointer
)	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
n	int
==	O
1	int
)	O
{	O
if	O
(	O
ping_recv	function
(	O
ping	pointer
)	O
==	O
0	int
)	O
nresp	int
++	O
;	O
if	O
(	O
t	pointer
==	O
0	int
)	O
{	O
gettimeofday	function
(	O
&	O
now	struct
,	O
NULL	O
)	O
;	O
t	pointer
=	O
&	O
now	struct
;	O
}	O
if	O
(	O
ping_timeout_p	function
(	O
&	O
ping	pointer
->	O
ping_start_time	struct
,	O
timeout	int
)	O
)	O
break	O
;	O
if	O
(	O
ping	pointer
->	O
ping_count	long
&&	O
nresp	int
>=	O
ping	pointer
->	O
ping_count	long
)	O
break	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
ping	pointer
->	O
ping_count	long
||	O
ping	pointer
->	O
ping_num_xmit	long
<	O
ping	pointer
->	O
ping_count	long
)	O
{	O
send_echo	function
(	O
ping	pointer
)	O
;	O
if	O
(	O
!	O
(	O
options	pointer
&	O
OPT_QUIET	int
)	O
&&	O
options	pointer
&	O
OPT_FLOOD	int
)	O
putchar	function
(	O
'.'	O
)	O
;	O
if	O
(	O
ping_timeout_p	function
(	O
&	O
ping	pointer
->	O
ping_start_time	struct
,	O
timeout	int
)	O
)	O
break	O
;	O
}	O
else	O
if	O
(	O
finishing	int
)	O
break	O
;	O
else	O
{	O
finishing	int
=	O
1	int
;	O
intvl	struct
.	O
tv_sec	long
=	O
linger	struct
;	O
}	O
gettimeofday	function
(	O
&	O
last	struct
,	O
NULL	O
)	O
;	O
}	O
}	O
ping_unset_data	function
(	O
ping	pointer
)	O
;	O
if	O
(	O
finish	pointer
)	O
return	O
(	O
*	O
finish	pointer
)	O
(	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
send_echo	function
(	O
PING	struct
*	O
ping	pointer
)	O
{	O
int	O
off	long
=	O
0	int
;	O
if	O
(	O
PING_TIMING	O
(	O
data_length	long
)	O
)	O
{	O
struct	O
timeval	struct
tv	struct
;	O
gettimeofday	function
(	O
&	O
tv	struct
,	O
NULL	O
)	O
;	O
ping_set_data	function
(	O
ping	pointer
,	O
&	O
tv	struct
,	O
0	int
,	O
sizeof	O
(	O
tv	struct
)	O
,	O
USE_IPV6	bool
)	O
;	O
off	long
+=	O
sizeof	O
(	O
tv	struct
)	O
;	O
}	O
if	O
(	O
data_buffer	pointer
)	O
ping_set_data	function
(	O
ping	pointer
,	O
data_buffer	pointer
,	O
off	long
,	O
data_length	long
>	O
PING_HEADER_LEN	O
?	O
data_length	long
-	O
PING_HEADER_LEN	O
:	O
data_length	long
,	O
USE_IPV6	bool
)	O
;	O
return	O
ping_xmit	function
(	O
ping	pointer
)	O
;	O
}	O
int	O
ping_finish	function
(	O
void	O
)	O
{	O
fflush	function
(	O
stdout	pointer
)	O
;	O
printf	function
(	O
"--- %s ping statistics ---\n"	pointer
,	O
ping	pointer
->	O
ping_hostname	pointer
)	O
;	O
printf	function
(	O
"%ld packets transmitted, "	pointer
,	O
ping	pointer
->	O
ping_num_xmit	long
)	O
;	O
printf	function
(	O
"%ld packets received, "	pointer
,	O
ping	pointer
->	O
ping_num_recv	long
)	O
;	O
if	O
(	O
ping	pointer
->	O
ping_num_rept	long
)	O
printf	function
(	O
"+%ld duplicates, "	pointer
,	O
ping	pointer
->	O
ping_num_rept	long
)	O
;	O
if	O
(	O
ping	pointer
->	O
ping_num_xmit	long
)	O
{	O
if	O
(	O
ping	pointer
->	O
ping_num_recv	long
>	O
ping	pointer
->	O
ping_num_xmit	long
)	O
printf	function
(	O
"-- somebody's printing up packets!"	pointer
)	O
;	O
else	O
printf	function
(	O
"%d%% packet loss"	pointer
,	O
(	O
int	O
)	O
(	O
(	O
(	O
ping	pointer
->	O
ping_num_xmit	long
-	O
ping	pointer
->	O
ping_num_recv	long
)	O
*	O
100	int
)	O
/	O
ping	pointer
->	O
ping_num_xmit	long
)	O
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
