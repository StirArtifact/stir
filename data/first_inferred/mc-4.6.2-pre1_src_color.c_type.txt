int	O
disable_colors	int
=	O
0	int
;	O
int	O
use_colors	int
=	O
0	int
;	O
int	O
dialog_colors	array
[	O
4	int
]	O
;	O
int	O
alarm_colors	array
[	O
4	int
]	O
;	O
struct	O
colorpair	struct
{	O
const	O
char	O
*	O
name	pointer
;	O
CTYPE	O
fg	pointer
;	O
CTYPE	O
bg	pointer
;	O
}	O
;	O
static	O
struct	O
colorpair	struct
color_map	array
[	O
]	O
=	O
{	O
{	O
"normal="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"selected="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"marked="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"markselect="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"errors="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"menu="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"reverse="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"dnormal="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"dfocus="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"dhotnormal="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"dhotfocus="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"viewunderline="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"menusel="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"menuhot="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"menuhotsel="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"helpnormal="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"helpitalic="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"helpbold="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"helplink="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"helpslink="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"gauge="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"input="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"directory="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"executable="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"link="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"stalelink="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"device="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"special="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"core="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
0	int
,	O
0	int
,	O
0	int
}	O
,	O
{	O
0	int
,	O
0	int
,	O
0	int
}	O
,	O
{	O
0	int
,	O
0	int
,	O
0	int
}	O
,	O
{	O
0	int
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"editnormal="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"editbold="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"editmarked="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"editwhitespace="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"errdhotnormal="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"errdhotfocus="	pointer
,	O
0	int
,	O
0	int
}	O
,	O
}	O
;	O
struct	O
color_table_s	struct
{	O
const	O
char	O
*	O
name	pointer
;	O
int	O
value	pointer
;	O
}	O
;	O
static	O
struct	O
color_table_s	struct
const	O
color_table	array
[	O
]	O
=	O
{	O
{	O
"black"	pointer
,	O
COLOR_BLACK	int
}	O
,	O
{	O
"gray"	pointer
,	O
COLOR_BLACK	int
|	O
A_BOLD	int
}	O
,	O
{	O
"red"	pointer
,	O
COLOR_RED	int
}	O
,	O
{	O
"brightred"	pointer
,	O
COLOR_RED	int
|	O
A_BOLD	int
}	O
,	O
{	O
"green"	pointer
,	O
COLOR_GREEN	int
}	O
,	O
{	O
"brightgreen"	pointer
,	O
COLOR_GREEN	int
|	O
A_BOLD	int
}	O
,	O
{	O
"brown"	pointer
,	O
COLOR_YELLOW	int
}	O
,	O
{	O
"yellow"	pointer
,	O
COLOR_YELLOW	int
|	O
A_BOLD	int
}	O
,	O
{	O
"blue"	pointer
,	O
COLOR_BLUE	int
}	O
,	O
{	O
"brightblue"	pointer
,	O
COLOR_BLUE	int
|	O
A_BOLD	int
}	O
,	O
{	O
"magenta"	pointer
,	O
COLOR_MAGENTA	int
}	O
,	O
{	O
"brightmagenta"	pointer
,	O
COLOR_MAGENTA	int
|	O
A_BOLD	int
}	O
,	O
{	O
"cyan"	pointer
,	O
COLOR_CYAN	int
}	O
,	O
{	O
"brightcyan"	pointer
,	O
COLOR_CYAN	int
|	O
A_BOLD	int
}	O
,	O
{	O
"lightgray"	pointer
,	O
COLOR_WHITE	int
}	O
,	O
{	O
"white"	pointer
,	O
COLOR_WHITE	int
|	O
A_BOLD	int
}	O
,	O
{	O
"default"	pointer
,	O
0	int
}	O
}	O
;	O
static	O
const	O
char	O
*	O
default_colors	pointer
=	O
"normal=lightgray,blue:"	pointer
"selected=black,cyan:"	pointer
"marked=yellow,blue:"	pointer
"markselect=yellow,cyan:"	pointer
"errors=white,red:"	pointer
"menu=white,cyan:"	pointer
"reverse=black,lightgray:"	pointer
"dnormal=black,lightgray:"	pointer
"dfocus=black,cyan:"	pointer
"dhotnormal=blue,lightgray:"	pointer
"dhotfocus=blue,cyan:"	pointer
"viewunderline=brightred,blue:"	pointer
"menuhot=yellow,cyan:"	pointer
"menusel=white,black:"	pointer
"menuhotsel=yellow,black:"	pointer
"helpnormal=black,lightgray:"	pointer
"helpitalic=red,lightgray:"	pointer
"helpbold=blue,lightgray:"	pointer
"helplink=black,cyan:"	pointer
"helpslink=yellow,blue:"	pointer
"gauge=white,black:"	pointer
"input=black,cyan:"	pointer
"directory=white,blue:"	pointer
"executable=brightgreen,blue:"	pointer
"link=lightgray,blue:"	pointer
"stalelink=brightred,blue:"	pointer
"device=brightmagenta,blue:"	pointer
"core=red,blue:"	pointer
"special=black,blue:"	pointer
"editnormal=lightgray,blue:"	pointer
"editbold=yellow,blue:"	pointer
"editmarked=black,cyan:"	pointer
"editwhitespace=brightblue,blue:"	pointer
"errdhotnormal=yellow,red:"	pointer
"errdhotfocus=yellow,lightgray"	pointer
;	O
static	O
void	O
get_color	function
(	O
const	O
char	O
*	O
cpp	pointer
,	O
CTYPE	O
*	O
colp	pointer
)	O
{	O
size_t	long
i	array
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
ELEMENTS	O
(	O
color_table	array
)	O
;	O
i	array
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
cpp	pointer
,	O
color_name	O
(	O
i	array
)	O
)	O
==	O
0	int
)	O
{	O
*	O
colp	pointer
=	O
color_value	O
(	O
i	array
)	O
;	O
return	O
;	O
}	O
}	O
}	O
static	O
void	O
get_two_colors	function
(	O
char	O
*	O
*	O
cpp	pointer
,	O
struct	O
colorpair	struct
*	O
colorpairp	pointer
)	O
{	O
char	O
*	O
p	pointer
=	O
*	O
cpp	pointer
;	O
int	O
state	pointer
;	O
state	pointer
=	O
0	int
;	O
for	O
(	O
;	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
':'	O
)	O
{	O
*	O
p	pointer
=	O
0	int
;	O
get_color	function
(	O
*	O
cpp	pointer
,	O
state	pointer
?	O
&	O
colorpairp	pointer
->	O
bg	pointer
:	O
&	O
colorpairp	pointer
->	O
fg	pointer
)	O
;	O
*	O
p	pointer
=	O
':'	O
;	O
*	O
cpp	pointer
=	O
p	pointer
+	O
1	int
;	O
return	O
;	O
}	O
if	O
(	O
*	O
p	pointer
==	O
','	O
)	O
{	O
state	pointer
=	O
1	int
;	O
*	O
p	pointer
=	O
0	int
;	O
get_color	function
(	O
*	O
cpp	pointer
,	O
&	O
colorpairp	pointer
->	O
fg	pointer
)	O
;	O
*	O
p	pointer
=	O
','	O
;	O
*	O
cpp	pointer
=	O
p	pointer
+	O
1	int
;	O
}	O
}	O
get_color	function
(	O
*	O
cpp	pointer
,	O
state	pointer
?	O
&	O
colorpairp	pointer
->	O
bg	pointer
:	O
&	O
colorpairp	pointer
->	O
fg	pointer
)	O
;	O
}	O
static	O
void	O
configure_colors_string	function
(	O
const	O
char	O
*	O
the_color_string	pointer
)	O
{	O
char	O
*	O
color_string	pointer
,	O
*	O
p	pointer
;	O
size_t	long
i	array
;	O
int	O
found	int
;	O
if	O
(	O
!	O
the_color_string	pointer
)	O
return	O
;	O
p	pointer
=	O
color_string	pointer
=	O
g_strdup	function
(	O
the_color_string	pointer
)	O
;	O
while	O
(	O
color_string	pointer
&&	O
*	O
color_string	pointer
)	O
{	O
while	O
(	O
*	O
color_string	pointer
==	O
' '	O
||	O
*	O
color_string	pointer
==	O
'\t'	O
)	O
color_string	pointer
++	O
;	O
found	int
=	O
0	int
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
ELEMENTS	O
(	O
color_map	array
)	O
;	O
i	array
++	O
)	O
{	O
int	O
klen	int
;	O
if	O
(	O
!	O
color_map	array
[	O
i	array
]	O
.	O
name	pointer
)	O
continue	O
;	O
klen	int
=	O
strlen	function
(	O
color_map	array
[	O
i	array
]	O
.	O
name	pointer
)	O
;	O
if	O
(	O
strncmp	function
(	O
color_string	pointer
,	O
color_map	array
[	O
i	array
]	O
.	O
name	pointer
,	O
klen	int
)	O
==	O
0	int
)	O
{	O
color_string	pointer
+=	O
klen	int
;	O
get_two_colors	function
(	O
&	O
color_string	pointer
,	O
&	O
color_map	array
[	O
i	array
]	O
)	O
;	O
found	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
!	O
found	int
)	O
{	O
while	O
(	O
*	O
color_string	pointer
&&	O
*	O
color_string	pointer
!=	O
':'	O
)	O
color_string	pointer
++	O
;	O
if	O
(	O
*	O
color_string	pointer
)	O
color_string	pointer
++	O
;	O
}	O
}	O
g_free	function
(	O
p	pointer
)	O
;	O
}	O
static	O
void	O
configure_colors	function
(	O
void	O
)	O
{	O
extern	O
char	O
*	O
command_line_colors	pointer
;	O
configure_colors_string	function
(	O
default_colors	pointer
)	O
;	O
configure_colors_string	function
(	O
setup_color_string	array
)	O
;	O
configure_colors_string	function
(	O
term_color_string	array
)	O
;	O
configure_colors_string	function
(	O
getenv	function
(	O
"MC_COLOR_TABLE"	pointer
)	O
)	O
;	O
configure_colors_string	function
(	O
command_line_colors	pointer
)	O
;	O
}	O
static	O
void	O
load_dialog_colors	function
(	O
void	O
)	O
{	O
dialog_colors	array
[	O
0	int
]	O
=	O
COLOR_NORMAL	O
;	O
dialog_colors	array
[	O
1	int
]	O
=	O
COLOR_FOCUS	O
;	O
dialog_colors	array
[	O
2	int
]	O
=	O
COLOR_HOT_NORMAL	O
;	O
dialog_colors	array
[	O
3	int
]	O
=	O
COLOR_HOT_FOCUS	O
;	O
alarm_colors	array
[	O
0	int
]	O
=	O
ERROR_COLOR	O
;	O
alarm_colors	array
[	O
1	int
]	O
=	O
REVERSE_COLOR	O
;	O
alarm_colors	array
[	O
2	int
]	O
=	O
ERROR_HOT_NORMAL	O
;	O
alarm_colors	array
[	O
3	int
]	O
=	O
ERROR_HOT_FOCUS	O
;	O
}	O
void	O
init_colors	function
(	O
void	O
)	O
{	O
size_t	long
i	array
;	O
int	O
hascolors	int
;	O
hascolors	int
=	O
has_colors	function
(	O
)	O
;	O
if	O
(	O
!	O
disable_colors	int
&&	O
hascolors	int
)	O
{	O
use_colors	int
=	O
1	int
;	O
}	O
if	O
(	O
use_colors	int
)	O
{	O
start_color	O
(	O
)	O
;	O
configure_colors	function
(	O
)	O
;	O
if	O
(	O
use_colors	int
)	O
{	O
SLtt_set_color	function
(	O
DEFAULT_COLOR_INDEX	int
,	O
NULL	O
,	O
"default"	pointer
,	O
"default"	pointer
)	O
;	O
}	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
ELEMENTS	O
(	O
color_map	array
)	O
;	O
i	array
++	O
)	O
{	O
if	O
(	O
!	O
color_map	array
[	O
i	array
]	O
.	O
name	pointer
)	O
continue	O
;	O
mc_init_pair	function
(	O
i	array
+	O
1	int
,	O
color_map_fg	O
(	O
i	array
)	O
,	O
color_map_bg	O
(	O
i	array
)	O
)	O
;	O
}	O
}	O
load_dialog_colors	function
(	O
)	O
;	O
}	O
static	O
int	O
max_index	int
=	O
0	int
;	O
static	O
int	O
alloc_color_pair	function
(	O
CTYPE	O
foreground	pointer
,	O
CTYPE	O
background	pointer
)	O
{	O
mc_init_pair	function
(	O
++	O
max_index	int
,	O
foreground	pointer
,	O
background	pointer
)	O
;	O
return	O
max_index	int
;	O
}	O
static	O
struct	O
colors_avail	struct
{	O
struct	O
colors_avail	struct
*	O
next	pointer
;	O
char	O
*	O
fg	pointer
,	O
*	O
bg	pointer
;	O
int	O
index	function
;	O
}	O
c	int
=	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
;	O
void	O
mc_init_pair	function
(	O
int	O
index	function
,	O
CTYPE	O
foreground	pointer
,	O
CTYPE	O
background	pointer
)	O
{	O
if	O
(	O
!	O
background	pointer
)	O
background	pointer
=	O
"default"	pointer
;	O
if	O
(	O
!	O
foreground	pointer
)	O
foreground	pointer
=	O
"default"	pointer
;	O
SLtt_set_color	function
(	O
index	function
,	O
""	pointer
,	O
(	O
char	O
*	O
)	O
foreground	pointer
,	O
(	O
char	O
*	O
)	O
background	pointer
)	O
;	O
if	O
(	O
index	function
>	O
max_index	int
)	O
max_index	int
=	O
index	function
;	O
}	O
int	O
try_alloc_color_pair	function
(	O
const	O
char	O
*	O
fg	pointer
,	O
const	O
char	O
*	O
bg	pointer
)	O
{	O
struct	O
colors_avail	struct
*	O
p	pointer
=	O
&	O
c	int
;	O
c	int
.	O
index	function
=	O
EDITOR_NORMAL_COLOR_INDEX	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
(	O
(	O
fg	pointer
&&	O
p	pointer
->	O
fg	pointer
)	O
?	O
!	O
strcmp	function
(	O
fg	pointer
,	O
p	pointer
->	O
fg	pointer
)	O
:	O
fg	pointer
==	O
p	pointer
->	O
fg	pointer
)	O
!=	O
0	int
&&	O
(	O
(	O
bg	pointer
&&	O
p	pointer
->	O
bg	pointer
)	O
?	O
!	O
strcmp	function
(	O
bg	pointer
,	O
p	pointer
->	O
bg	pointer
)	O
:	O
bg	pointer
==	O
p	pointer
->	O
bg	pointer
)	O
!=	O
0	int
)	O
return	O
p	pointer
->	O
index	function
;	O
if	O
(	O
!	O
p	pointer
->	O
next	pointer
)	O
break	O
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
;	O
}	O
p	pointer
->	O
next	pointer
=	O
g_new	O
(	O
struct	O
colors_avail	struct
,	O
1	int
)	O
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
;	O
p	pointer
->	O
next	pointer
=	O
0	int
;	O
p	pointer
->	O
fg	pointer
=	O
fg	pointer
?	O
g_strdup	function
(	O
fg	pointer
)	O
:	O
0	int
;	O
p	pointer
->	O
bg	pointer
=	O
bg	pointer
?	O
g_strdup	function
(	O
bg	pointer
)	O
:	O
0	int
;	O
if	O
(	O
!	O
fg	pointer
)	O
fg	pointer
=	O
color_map	array
[	O
EDITOR_NORMAL_COLOR_INDEX	int
-	O
1	int
]	O
.	O
fg	pointer
;	O
if	O
(	O
!	O
bg	pointer
)	O
bg	pointer
=	O
color_map	array
[	O
EDITOR_NORMAL_COLOR_INDEX	int
-	O
1	int
]	O
.	O
bg	pointer
;	O
p	pointer
->	O
index	function
=	O
alloc_color_pair	function
(	O
fg	pointer
,	O
bg	pointer
)	O
;	O
return	O
p	pointer
->	O
index	function
;	O
}	O
void	O
done_colors	function
(	O
void	O
)	O
{	O
struct	O
colors_avail	struct
*	O
p	pointer
,	O
*	O
next	pointer
;	O
for	O
(	O
p	pointer
=	O
c	int
.	O
next	pointer
;	O
p	pointer
;	O
p	pointer
=	O
next	pointer
)	O
{	O
next	pointer
=	O
p	pointer
->	O
next	pointer
;	O
g_free	function
(	O
p	pointer
->	O
fg	pointer
)	O
;	O
g_free	function
(	O
p	pointer
->	O
bg	pointer
)	O
;	O
g_free	function
(	O
p	pointer
)	O
;	O
}	O
c	int
.	O
next	pointer
=	O
NULL	O
;	O
}	O
