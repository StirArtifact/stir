extern	O
struct	O
gnufdisk_partition	O
*	O
gnufdisk_device_internals__allocate_partition	function
(	O
struct	O
gnufdisk_disklabel	struct
*	O
_d	pointer
,	O
struct	O
gnufdisk_partition_operations	struct
*	O
_operations	pointer
,	O
void	O
*	O
_implementation_data	pointer
)	O
;	O
struct	O
gnufdisk_disklabel	struct
{	O
struct	O
gnufdisk_disklabel_operations	struct
operations	struct
;	O
void	O
*	O
implementation_data	pointer
;	O
struct	O
gnufdisk_device	O
*	O
device	pointer
;	O
int	O
nref	int
;	O
}	O
;	O
static	O
void	O
check_disklabel	function
(	O
struct	O
gnufdisk_disklabel	struct
*	O
*	O
_d	pointer
)	O
{	O
GNUFDISK_RETRY	O
rp0	array
;	O
union	O
gnufdisk_device_exception_data	union
data	union
;	O
GNUFDISK_RETRY_SET	O
(	O
rp0	array
)	O
;	O
if	O
(	O
gnufdisk_check_memory	function
(	O
*	O
_d	pointer
,	O
sizeof	O
(	O
struct	O
gnufdisk_disklabel	struct
)	O
,	O
0	int
)	O
!=	O
0	int
)	O
{	O
data	union
.	O
edisklabelpointer	pointer
=	O
_d	pointer
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array
,	O
GNUFDISK_DEVICE_EDISKLABELPOINTER	int
,	O
&	O
data	union
,	O
"invalid struct gnufdisk_disklabel* NULL"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
gnufdisk_check_memory	function
(	O
(	O
*	O
_d	pointer
)	O
->	O
device	pointer
,	O
1	int
,	O
1	int
)	O
!=	O
0	int
)	O
{	O
data	union
.	O
edevicepointer	pointer
=	O
&	O
(	O
*	O
_d	pointer
)	O
->	O
device	pointer
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array
,	O
GNUFDISK_DEVICE_EDEVICEPOINTER	int
,	O
&	O
data	union
,	O
"label is not associated with  a device"	pointer
)	O
;	O
}	O
}	O
static	O
void	O
free_pointer	function
(	O
void	O
*	O
_p	pointer
)	O
{	O
GNUFDISK_LOG	O
(	O
(	O
DISKLABEL	O
,	O
"free pointer %p"	pointer
,	O
_p	pointer
)	O
)	O
;	O
free	function
(	O
_p	pointer
)	O
;	O
}	O
struct	O
gnufdisk_disklabel	struct
*	O
gnufdisk_device_internals__allocate_disklabel	function
(	O
struct	O
gnufdisk_device	O
*	O
_dev	pointer
,	O
struct	O
gnufdisk_disklabel_operations	struct
*	O
_operations	pointer
,	O
void	O
*	O
_implementation_data	pointer
)	O
{	O
struct	O
gnufdisk_disklabel	struct
*	O
disk	pointer
;	O
if	O
(	O
gnufdisk_check_memory	function
(	O
_dev	pointer
,	O
1	int
,	O
1	int
)	O
!=	O
0	int
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_EINTERNAL	int
,	O
NULL	O
,	O
"invalid struct gnufdisk_device* %p"	pointer
,	O
_dev	pointer
)	O
;	O
else	O
if	O
(	O
gnufdisk_check_memory	function
(	O
_operations	pointer
,	O
sizeof	O
(	O
struct	O
gnufdisk_disklabel_operations	struct
)	O
,	O
1	int
)	O
!=	O
0	int
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_EINTERNAL	int
,	O
NULL	O
,	O
"invalid struct gnufdisk_disklabel_operations* %p"	pointer
,	O
_operations	pointer
)	O
;	O
if	O
(	O
(	O
disk	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
gnufdisk_disklabel	struct
)	O
)	O
)	O
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOMEM	int
,	O
NULL	O
,	O
"cannot allocate memory"	pointer
)	O
;	O
if	O
(	O
gnufdisk_exception_register_unwind_handler	function
(	O
&	O
free_pointer	function
,	O
disk	pointer
)	O
!=	O
0	int
)	O
GNUFDISK_WARNING	O
(	O
"gnufdisk_exception_register_unwind_handler failed. Missing GNUFDISK_TRY?"	pointer
)	O
;	O
memset	function
(	O
disk	pointer
,	O
0	int
,	O
sizeof	O
(	O
struct	O
gnufdisk_disklabel	struct
)	O
)	O
;	O
memcpy	function
(	O
&	O
disk	pointer
->	O
operations	struct
,	O
_operations	pointer
,	O
sizeof	O
(	O
struct	O
gnufdisk_disklabel_operations	struct
)	O
)	O
;	O
disk	pointer
->	O
implementation_data	pointer
=	O
_implementation_data	pointer
;	O
disk	pointer
->	O
device	pointer
=	O
_dev	pointer
;	O
gnufdisk_device_ref	function
(	O
_dev	pointer
)	O
;	O
disk	pointer
->	O
nref	int
=	O
1	int
;	O
if	O
(	O
gnufdisk_exception_unregister_unwind_handler	function
(	O
&	O
free_pointer	function
,	O
disk	pointer
)	O
!=	O
0	int
)	O
GNUFDISK_WARNING	O
(	O
"gnufdisk_exception_unregister_unwind_handler failed. Missing GNUFDISK_TRY?"	pointer
)	O
;	O
return	O
disk	pointer
;	O
}	O
void	O
gnufdisk_device_internals__disklabel_set_device	function
(	O
struct	O
gnufdisk_disklabel	struct
*	O
_d	pointer
,	O
struct	O
gnufdisk_device	O
*	O
_dev	pointer
)	O
{	O
check_disklabel	function
(	O
&	O
_d	pointer
)	O
;	O
if	O
(	O
_d	pointer
->	O
device	pointer
)	O
{	O
gnufdisk_device_delete	function
(	O
_d	pointer
->	O
device	pointer
)	O
;	O
_d	pointer
->	O
device	pointer
=	O
NULL	O
;	O
}	O
gnufdisk_device_ref	function
(	O
_dev	pointer
)	O
;	O
_d	pointer
->	O
device	pointer
=	O
_dev	pointer
;	O
}	O
struct	O
gnufdisk_device	O
*	O
gnufdisk_device_internals__disklabel_get_device	function
(	O
struct	O
gnufdisk_disklabel	struct
*	O
_d	pointer
)	O
{	O
check_disklabel	function
(	O
&	O
_d	pointer
)	O
;	O
return	O
_d	pointer
->	O
device	pointer
;	O
}	O
void	O
gnufdisk_disklabel_delete	function
(	O
struct	O
gnufdisk_disklabel	struct
*	O
_d	pointer
)	O
{	O
check_disklabel	function
(	O
&	O
_d	pointer
)	O
;	O
if	O
(	O
_d	pointer
->	O
nref	int
<	O
2	int
)	O
{	O
if	O
(	O
_d	pointer
->	O
implementation_data	pointer
&&	O
_d	pointer
->	O
operations	struct
.	O
delete	pointer
!=	O
NULL	O
)	O
{	O
void	O
*	O
data	union
;	O
data	union
=	O
_d	pointer
->	O
implementation_data	pointer
;	O
_d	pointer
->	O
implementation_data	pointer
=	O
NULL	O
;	O
(	O
*	O
_d	pointer
->	O
operations	struct
.	O
delete	pointer
)	O
(	O
data	union
)	O
;	O
}	O
if	O
(	O
_d	pointer
->	O
device	pointer
)	O
{	O
gnufdisk_device_delete	function
(	O
_d	pointer
->	O
device	pointer
)	O
;	O
_d	pointer
->	O
device	pointer
=	O
NULL	O
;	O
}	O
free	function
(	O
_d	pointer
)	O
;	O
}	O
else	O
_d	pointer
->	O
nref	int
--	O
;	O
}	O
void	O
gnufdisk_disklabel_ref	function
(	O
struct	O
gnufdisk_disklabel	struct
*	O
_d	pointer
)	O
{	O
check_disklabel	function
(	O
&	O
_d	pointer
)	O
;	O
_d	pointer
->	O
nref	int
++	O
;	O
}	O
void	O
gnufdisk_disklabel_raw	function
(	O
struct	O
gnufdisk_disklabel	struct
*	O
_d	pointer
,	O
void	O
*	O
*	O
_dest	pointer
,	O
size_t	long
*	O
_size	long
)	O
{	O
GNUFDISK_RETRY	O
rp0	array
;	O
check_disklabel	function
(	O
&	O
_d	pointer
)	O
;	O
GNUFDISK_RETRY_SET	O
(	O
rp0	array
)	O
;	O
if	O
(	O
gnufdisk_check_memory	function
(	O
_dest	pointer
,	O
1	int
,	O
0	int
)	O
!=	O
0	int
)	O
{	O
union	O
gnufdisk_device_exception_data	union
data	union
;	O
data	union
.	O
edestinationpointer	pointer
=	O
&	O
_dest	pointer
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array
,	O
GNUFDISK_DEVICE_EDESTINATIONPOINTER	int
,	O
&	O
data	union
,	O
"invalid destination pointer: %p"	pointer
,	O
_dest	pointer
)	O
;	O
}	O
else	O
if	O
(	O
gnufdisk_check_memory	function
(	O
_size	long
,	O
1	int
,	O
0	int
)	O
!=	O
0	int
)	O
{	O
union	O
gnufdisk_device_exception_data	union
data	union
;	O
data	union
.	O
esizepointer	pointer
=	O
&	O
_size	long
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array
,	O
GNUFDISK_DEVICE_ESIZEPOINTER	int
,	O
&	O
data	union
,	O
"invalid size pointer: %p"	pointer
,	O
_size	long
)	O
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array
,	O
GNUFDISK_DEVICE_ESIZEPOINTER	int
,	O
&	O
data	union
,	O
"invalid size pointer: %p"	pointer
,	O
_size	long
)	O
;	O
}	O
else	O
if	O
(	O
_d	pointer
->	O
operations	struct
.	O
raw	pointer
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported: `raw'"	pointer
)	O
;	O
(	O
*	O
_d	pointer
->	O
operations	struct
.	O
raw	pointer
)	O
(	O
_d	pointer
->	O
implementation_data	pointer
,	O
_dest	pointer
,	O
_size	long
)	O
;	O
}	O
struct	O
gnufdisk_string	O
*	O
gnufdisk_disklabel_system	function
(	O
struct	O
gnufdisk_disklabel	struct
*	O
_d	pointer
)	O
{	O
check_disklabel	function
(	O
&	O
_d	pointer
)	O
;	O
if	O
(	O
_d	pointer
->	O
operations	struct
.	O
system	function
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported `system'"	pointer
)	O
;	O
return	O
(	O
*	O
_d	pointer
->	O
operations	struct
.	O
system	function
)	O
(	O
_d	pointer
->	O
implementation_data	pointer
)	O
;	O
}	O
struct	O
gnufdisk_partition	O
*	O
gnufdisk_disklabel_partition	function
(	O
struct	O
gnufdisk_disklabel	struct
*	O
_d	pointer
,	O
size_t	long
_n	long
)	O
{	O
struct	O
gnufdisk_partition_operations	struct
operations	struct
;	O
void	O
*	O
implementation_data	pointer
;	O
check_disklabel	function
(	O
&	O
_d	pointer
)	O
;	O
if	O
(	O
_d	pointer
->	O
operations	struct
.	O
partition	pointer
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported `partition'"	pointer
)	O
;	O
(	O
*	O
_d	pointer
->	O
operations	struct
.	O
partition	pointer
)	O
(	O
_d	pointer
->	O
implementation_data	pointer
,	O
_n	long
,	O
&	O
operations	struct
,	O
&	O
implementation_data	pointer
)	O
;	O
return	O
gnufdisk_device_internals__allocate_partition	function
(	O
_d	pointer
,	O
&	O
operations	struct
,	O
implementation_data	pointer
)	O
;	O
}	O
int	O
gnufdisk_disklabel_count_partitions	function
(	O
struct	O
gnufdisk_disklabel	struct
*	O
_d	pointer
)	O
{	O
check_disklabel	function
(	O
&	O
_d	pointer
)	O
;	O
if	O
(	O
_d	pointer
->	O
operations	struct
.	O
count_partitions	pointer
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported `count_partitions'"	pointer
)	O
;	O
return	O
(	O
*	O
_d	pointer
->	O
operations	struct
.	O
count_partitions	pointer
)	O
(	O
_d	pointer
->	O
implementation_data	pointer
)	O
;	O
}	O
struct	O
gnufdisk_partition	O
*	O
gnufdisk_disklabel_create_partition	function
(	O
struct	O
gnufdisk_disklabel	struct
*	O
_d	pointer
,	O
struct	O
gnufdisk_geometry	O
*	O
_s	pointer
,	O
struct	O
gnufdisk_geometry	O
*	O
_e	pointer
,	O
struct	O
gnufdisk_string	O
*	O
_type	pointer
)	O
{	O
GNUFDISK_RETRY	O
rp0	array
;	O
struct	O
gnufdisk_partition_operations	struct
operations	struct
;	O
void	O
*	O
implementation_data	pointer
;	O
check_disklabel	function
(	O
&	O
_d	pointer
)	O
;	O
GNUFDISK_RETRY_SET	O
(	O
rp0	array
)	O
;	O
if	O
(	O
gnufdisk_check_memory	function
(	O
_s	pointer
,	O
1	int
,	O
1	int
)	O
!=	O
0	int
)	O
{	O
union	O
gnufdisk_device_exception_data	union
data	union
;	O
data	union
.	O
egeometrypointer	pointer
=	O
&	O
_s	pointer
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array
,	O
GNUFDISK_DEVICE_EGEOMETRYPOINTER	int
,	O
&	O
data	union
,	O
"invalid struct gnufdisk_geometry* %p"	pointer
,	O
_s	pointer
)	O
;	O
}	O
else	O
if	O
(	O
gnufdisk_check_memory	function
(	O
_e	pointer
,	O
1	int
,	O
1	int
)	O
!=	O
0	int
)	O
{	O
union	O
gnufdisk_device_exception_data	union
data	union
;	O
data	union
.	O
egeometrypointer	pointer
=	O
&	O
_e	pointer
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array
,	O
GNUFDISK_DEVICE_EGEOMETRYPOINTER	int
,	O
&	O
data	union
,	O
"invalid struct gnufdisk_geometry* %p"	pointer
,	O
_e	pointer
)	O
;	O
}	O
else	O
if	O
(	O
gnufdisk_check_memory	function
(	O
_type	pointer
,	O
1	int
,	O
1	int
)	O
!=	O
0	int
)	O
{	O
union	O
gnufdisk_device_exception_data	union
data	union
;	O
data	union
.	O
epartitiontypepointer	pointer
=	O
&	O
_type	pointer
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array
,	O
GNUFDISK_DEVICE_EPARTITIONTYPEPOINTER	int
,	O
&	O
data	union
,	O
"invalid struct gnufdisk_string* %p"	pointer
,	O
_type	pointer
)	O
;	O
}	O
else	O
if	O
(	O
_d	pointer
->	O
operations	struct
.	O
create_partition	pointer
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported `create_partition'"	pointer
)	O
;	O
(	O
*	O
_d	pointer
->	O
operations	struct
.	O
create_partition	pointer
)	O
(	O
_d	pointer
->	O
implementation_data	pointer
,	O
_s	pointer
,	O
_e	pointer
,	O
_type	pointer
,	O
&	O
operations	struct
,	O
&	O
implementation_data	pointer
)	O
;	O
return	O
gnufdisk_device_internals__allocate_partition	function
(	O
_d	pointer
,	O
&	O
operations	struct
,	O
implementation_data	pointer
)	O
;	O
}	O
void	O
gnufdisk_disklabel_remove_partition	function
(	O
struct	O
gnufdisk_disklabel	struct
*	O
_d	pointer
,	O
size_t	long
_n	long
)	O
{	O
check_disklabel	function
(	O
&	O
_d	pointer
)	O
;	O
if	O
(	O
_d	pointer
->	O
operations	struct
.	O
remove_partition	pointer
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported `remove_partition'"	pointer
)	O
;	O
(	O
*	O
_d	pointer
->	O
operations	struct
.	O
remove_partition	pointer
)	O
(	O
_d	pointer
->	O
implementation_data	pointer
,	O
_n	long
)	O
;	O
}	O
void	O
gnufdisk_disklabel_set_parameter	function
(	O
struct	O
gnufdisk_disklabel	struct
*	O
_d	pointer
,	O
struct	O
gnufdisk_string	O
*	O
_parameter	pointer
,	O
const	O
void	O
*	O
_data	pointer
,	O
size_t	long
_size	long
)	O
{	O
check_disklabel	function
(	O
&	O
_d	pointer
)	O
;	O
if	O
(	O
gnufdisk_check_memory	function
(	O
_parameter	pointer
,	O
1	int
,	O
1	int
)	O
!=	O
0	int
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_EPARAMETERPOINTER	int
,	O
NULL	O
,	O
"invalid struct gnufdisk_string* %p"	pointer
,	O
_parameter	pointer
)	O
;	O
else	O
if	O
(	O
gnufdisk_check_memory	function
(	O
(	O
void	O
*	O
)	O
_data	pointer
,	O
_size	long
,	O
1	int
)	O
!=	O
0	int
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_EPARAMETERDATA	int
,	O
NULL	O
,	O
"invalid parameter data: %p"	pointer
,	O
_data	pointer
)	O
;	O
else	O
if	O
(	O
_d	pointer
->	O
operations	struct
.	O
set_parameter	pointer
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported `set_parameter'"	pointer
)	O
;	O
(	O
*	O
_d	pointer
->	O
operations	struct
.	O
set_parameter	pointer
)	O
(	O
_d	pointer
->	O
implementation_data	pointer
,	O
_parameter	pointer
,	O
_data	pointer
,	O
_size	long
)	O
;	O
}	O
void	O
gnufdisk_disklabel_get_parameter	function
(	O
struct	O
gnufdisk_disklabel	struct
*	O
_d	pointer
,	O
struct	O
gnufdisk_string	O
*	O
_parameter	pointer
,	O
void	O
*	O
_data	pointer
,	O
size_t	long
_size	long
)	O
{	O
check_disklabel	function
(	O
&	O
_d	pointer
)	O
;	O
if	O
(	O
gnufdisk_check_memory	function
(	O
_parameter	pointer
,	O
1	int
,	O
1	int
)	O
!=	O
0	int
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_EPARAMETERPOINTER	int
,	O
NULL	O
,	O
"invalid struct gnufdisk_string* %p"	pointer
,	O
_parameter	pointer
)	O
;	O
else	O
if	O
(	O
gnufdisk_check_memory	function
(	O
_data	pointer
,	O
_size	long
,	O
0	int
)	O
!=	O
0	int
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_EPARAMETERDATA	int
,	O
NULL	O
,	O
"invalid parameter data: %p"	pointer
,	O
_data	pointer
)	O
;	O
else	O
if	O
(	O
_d	pointer
->	O
operations	struct
.	O
get_parameter	pointer
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported `get_parameter'"	pointer
)	O
;	O
(	O
*	O
_d	pointer
->	O
operations	struct
.	O
get_parameter	pointer
)	O
(	O
_d	pointer
->	O
implementation_data	pointer
,	O
_parameter	pointer
,	O
_data	pointer
,	O
_size	long
)	O
;	O
}	O
