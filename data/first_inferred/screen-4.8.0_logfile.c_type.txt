static	O
void	O
changed_logfile	function
__P	O
(	O
(	O
struct	O
logfile	struct
*	O
)	O
)	O
;	O
static	O
struct	O
logfile	struct
*	O
lookup_logfile	function
__P	O
(	O
(	O
char	O
*	O
)	O
)	O
;	O
static	O
int	O
stolen_logfile	function
__P	O
(	O
(	O
struct	O
logfile	struct
*	O
)	O
)	O
;	O
static	O
struct	O
logfile	struct
*	O
logroot	pointer
=	O
NULL	O
;	O
static	O
void	O
changed_logfile	function
(	O
struct	O
logfile	struct
*	O
l	pointer
)	O
{	O
struct	O
stat	struct
o	struct
,	O
*	O
s	pointer
=	O
l	pointer
->	O
st	pointer
;	O
if	O
(	O
fstat	function
(	O
fileno	function
(	O
l	pointer
->	O
fp	pointer
)	O
,	O
&	O
o	struct
)	O
<	O
0	int
)	O
return	O
;	O
if	O
(	O
o	struct
.	O
st_size	long
>	O
s	pointer
->	O
st_size	long
)	O
{	O
s	pointer
->	O
st_size	long
=	O
o	struct
.	O
st_size	long
;	O
s	pointer
->	O
st_mtime	O
=	O
o	struct
.	O
st_mtime	O
;	O
}	O
}	O
int	O
lf_move_fd	function
(	O
int	O
fd	int
,	O
int	O
need_fd	int
)	O
{	O
int	O
r	int
=	O
-	O
1	int
;	O
if	O
(	O
fd	int
==	O
need_fd	int
)	O
return	O
fd	int
;	O
if	O
(	O
fd	int
>=	O
0	int
&&	O
fd	int
<	O
need_fd	int
)	O
r	int
=	O
lf_move_fd	function
(	O
dup	function
(	O
fd	int
)	O
,	O
need_fd	int
)	O
;	O
close	pointer
(	O
fd	int
)	O
;	O
return	O
r	int
;	O
}	O
static	O
int	O
logfile_reopen	function
(	O
char	O
*	O
name	pointer
,	O
int	O
wantfd	int
,	O
struct	O
logfile	struct
*	O
l	pointer
)	O
{	O
int	O
got_fd	int
;	O
close	pointer
(	O
wantfd	int
)	O
;	O
if	O
(	O
(	O
(	O
got_fd	int
=	O
open	function
(	O
name	pointer
,	O
O_WRONLY	int
|	O
O_CREAT	int
|	O
O_APPEND	int
,	O
0666	int
)	O
)	O
<	O
0	int
)	O
||	O
lf_move_fd	function
(	O
got_fd	int
,	O
wantfd	int
)	O
<	O
0	int
)	O
{	O
logfclose	function
(	O
l	pointer
)	O
;	O
debug1	O
(	O
"logfile_reopen: failed for %s\n"	pointer
,	O
name	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
changed_logfile	function
(	O
l	pointer
)	O
;	O
debug2	O
(	O
"logfile_reopen: %d = %s\n"	pointer
,	O
wantfd	int
,	O
name	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
(	O
*	O
lf_reopen_fn	pointer
)	O
(	O
)	O
=	O
logfile_reopen	function
;	O
void	O
logreopen_register	function
(	O
fn	pointer
)	O
int	O
(	O
*	O
fn	pointer
)	O
__P	O
(	O
(	O
char	O
*	O
,	O
int	O
,	O
struct	O
logfile	struct
*	O
)	O
)	O
;	O
{	O
lf_reopen_fn	pointer
=	O
fn	pointer
?	O
fn	pointer
:	O
logfile_reopen	function
;	O
}	O
static	O
int	O
stolen_logfile	function
(	O
struct	O
logfile	struct
*	O
l	pointer
)	O
{	O
struct	O
stat	struct
o	struct
,	O
*	O
s	pointer
=	O
l	pointer
->	O
st	pointer
;	O
o	struct
=	O
*	O
s	pointer
;	O
if	O
(	O
fstat	function
(	O
fileno	function
(	O
l	pointer
->	O
fp	pointer
)	O
,	O
s	pointer
)	O
<	O
0	int
)	O
s	pointer
->	O
st_ino	long
=	O
s	pointer
->	O
st_dev	long
=	O
0	int
;	O
ASSERT	O
(	O
s	pointer
==	O
l	pointer
->	O
st	pointer
)	O
;	O
if	O
(	O
!	O
o	struct
.	O
st_dev	long
&&	O
!	O
o	struct
.	O
st_ino	long
)	O
return	O
0	int
;	O
if	O
(	O
(	O
!	O
s	pointer
->	O
st_dev	long
&&	O
!	O
s	pointer
->	O
st_ino	long
)	O
||	O
!	O
s	pointer
->	O
st_nlink	long
||	O
(	O
s	pointer
->	O
st_size	long
<	O
o	struct
.	O
st_size	long
)	O
||	O
(	O
s	pointer
->	O
st_mtime	O
!=	O
o	struct
.	O
st_mtime	O
)	O
||	O
(	O
(	O
s	pointer
->	O
st_ctime	O
!=	O
o	struct
.	O
st_ctime	O
)	O
&&	O
!	O
(	O
s	pointer
->	O
st_mtime	O
==	O
s	pointer
->	O
st_ctime	O
&&	O
o	struct
.	O
st_ctime	O
<	O
s	pointer
->	O
st_ctime	O
)	O
)	O
)	O
{	O
debug1	O
(	O
"stolen_logfile: %s stolen!\n"	pointer
,	O
l	pointer
->	O
name	pointer
)	O
;	O
debug3	O
(	O
"st_dev %d, st_ino %d, st_nlink %d\n"	pointer
,	O
(	O
int	O
)	O
s	pointer
->	O
st_dev	long
,	O
(	O
int	O
)	O
s	pointer
->	O
st_ino	long
,	O
(	O
int	O
)	O
s	pointer
->	O
st_nlink	long
)	O
;	O
debug2	O
(	O
"s->st_size %d, o.st_size %d\n"	pointer
,	O
(	O
int	O
)	O
s	pointer
->	O
st_size	long
,	O
(	O
int	O
)	O
o	struct
.	O
st_size	long
)	O
;	O
debug2	O
(	O
"s->st_mtime %d, o.st_mtime %d\n"	pointer
,	O
(	O
int	O
)	O
s	pointer
->	O
st_mtime	O
,	O
(	O
int	O
)	O
o	struct
.	O
st_mtime	O
)	O
;	O
debug2	O
(	O
"s->st_ctime %d, o.st_ctime %d\n"	pointer
,	O
(	O
int	O
)	O
s	pointer
->	O
st_ctime	O
,	O
(	O
int	O
)	O
o	struct
.	O
st_ctime	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
debug1	O
(	O
"stolen_logfile: %s o.k.\n"	pointer
,	O
l	pointer
->	O
name	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
logfile	struct
*	O
lookup_logfile	function
(	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
logfile	struct
*	O
l	pointer
;	O
for	O
(	O
l	pointer
=	O
logroot	pointer
;	O
l	pointer
;	O
l	pointer
=	O
l	pointer
->	O
next	pointer
)	O
if	O
(	O
!	O
strcmp	function
(	O
name	pointer
,	O
l	pointer
->	O
name	pointer
)	O
)	O
return	O
l	pointer
;	O
return	O
NULL	O
;	O
}	O
struct	O
logfile	struct
*	O
logfopen	function
(	O
char	O
*	O
name	pointer
,	O
FILE	struct
*	O
fp	pointer
)	O
{	O
struct	O
logfile	struct
*	O
l	pointer
;	O
if	O
(	O
!	O
fp	pointer
)	O
{	O
if	O
(	O
!	O
(	O
l	pointer
=	O
lookup_logfile	function
(	O
name	pointer
)	O
)	O
)	O
return	O
NULL	O
;	O
l	pointer
->	O
opencount	int
++	O
;	O
return	O
l	pointer
;	O
}	O
if	O
(	O
!	O
(	O
l	pointer
=	O
(	O
struct	O
logfile	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
struct	O
logfile	struct
)	O
)	O
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
(	O
l	pointer
->	O
st	pointer
=	O
(	O
struct	O
stat	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
struct	O
stat	struct
)	O
)	O
)	O
)	O
{	O
free	function
(	O
(	O
char	O
*	O
)	O
l	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
!	O
(	O
l	pointer
->	O
name	pointer
=	O
SaveStr	function
(	O
name	pointer
)	O
)	O
)	O
{	O
free	function
(	O
(	O
char	O
*	O
)	O
l	pointer
->	O
st	pointer
)	O
;	O
free	function
(	O
(	O
char	O
*	O
)	O
l	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
l	pointer
->	O
fp	pointer
=	O
fp	pointer
;	O
l	pointer
->	O
opencount	int
=	O
1	int
;	O
l	pointer
->	O
writecount	int
=	O
0	int
;	O
l	pointer
->	O
flushcount	int
=	O
0	int
;	O
changed_logfile	function
(	O
l	pointer
)	O
;	O
l	pointer
->	O
next	pointer
=	O
logroot	pointer
;	O
logroot	pointer
=	O
l	pointer
;	O
return	O
l	pointer
;	O
}	O
int	O
islogfile	function
(	O
char	O
*	O
name	pointer
)	O
{	O
if	O
(	O
!	O
name	pointer
)	O
return	O
logroot	pointer
?	O
1	int
:	O
0	int
;	O
return	O
lookup_logfile	function
(	O
name	pointer
)	O
?	O
1	int
:	O
0	int
;	O
}	O
int	O
logfclose	function
(	O
struct	O
logfile	struct
*	O
l	pointer
)	O
{	O
struct	O
logfile	struct
*	O
*	O
lp	pointer
;	O
for	O
(	O
lp	pointer
=	O
&	O
logroot	pointer
;	O
*	O
lp	pointer
;	O
lp	pointer
=	O
&	O
(	O
*	O
lp	pointer
)	O
->	O
next	pointer
)	O
if	O
(	O
*	O
lp	pointer
==	O
l	pointer
)	O
break	O
;	O
if	O
(	O
!	O
*	O
lp	pointer
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
--	O
l	pointer
->	O
opencount	int
)	O
>	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
l	pointer
->	O
opencount	int
<	O
0	int
)	O
abort	function
(	O
)	O
;	O
*	O
lp	pointer
=	O
l	pointer
->	O
next	pointer
;	O
fclose	function
(	O
l	pointer
->	O
fp	pointer
)	O
;	O
free	function
(	O
l	pointer
->	O
name	pointer
)	O
;	O
free	function
(	O
(	O
char	O
*	O
)	O
l	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
logfwrite	function
(	O
struct	O
logfile	struct
*	O
l	pointer
,	O
char	O
*	O
buf	pointer
,	O
int	O
n	int
)	O
{	O
int	O
r	int
;	O
if	O
(	O
stolen_logfile	function
(	O
l	pointer
)	O
&&	O
lf_reopen_fn	pointer
(	O
l	pointer
->	O
name	pointer
,	O
fileno	function
(	O
l	pointer
->	O
fp	pointer
)	O
,	O
l	pointer
)	O
)	O
return	O
-	O
1	int
;	O
r	int
=	O
fwrite	function
(	O
buf	pointer
,	O
n	int
,	O
1	int
,	O
l	pointer
->	O
fp	pointer
)	O
;	O
l	pointer
->	O
writecount	int
+=	O
l	pointer
->	O
flushcount	int
+	O
1	int
;	O
l	pointer
->	O
flushcount	int
=	O
0	int
;	O
changed_logfile	function
(	O
l	pointer
)	O
;	O
return	O
r	int
;	O
}	O
int	O
logfflush	function
(	O
struct	O
logfile	struct
*	O
l	pointer
)	O
{	O
int	O
r	int
=	O
0	int
;	O
if	O
(	O
!	O
l	pointer
)	O
for	O
(	O
l	pointer
=	O
logroot	pointer
;	O
l	pointer
;	O
l	pointer
=	O
l	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
stolen_logfile	function
(	O
l	pointer
)	O
&&	O
lf_reopen_fn	pointer
(	O
l	pointer
->	O
name	pointer
,	O
fileno	function
(	O
l	pointer
->	O
fp	pointer
)	O
,	O
l	pointer
)	O
)	O
return	O
-	O
1	int
;	O
r	int
|=	O
fflush	function
(	O
l	pointer
->	O
fp	pointer
)	O
;	O
l	pointer
->	O
flushcount	int
++	O
;	O
changed_logfile	function
(	O
l	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
stolen_logfile	function
(	O
l	pointer
)	O
&&	O
lf_reopen_fn	pointer
(	O
l	pointer
->	O
name	pointer
,	O
fileno	function
(	O
l	pointer
->	O
fp	pointer
)	O
,	O
l	pointer
)	O
)	O
return	O
-	O
1	int
;	O
r	int
=	O
fflush	function
(	O
l	pointer
->	O
fp	pointer
)	O
;	O
l	pointer
->	O
flushcount	int
++	O
;	O
changed_logfile	function
(	O
l	pointer
)	O
;	O
}	O
return	O
r	int
;	O
}	O
