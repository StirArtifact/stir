typedef	O
struct	O
{	O
double	O
*	O
d	pointer
;	O
double	O
*	O
coeff	pointer
;	O
double	O
*	O
work	pointer
;	O
}	O
polynomial_state_t	struct
;	O
static	O
void	O
*	O
polynomial_alloc	function
(	O
size_t	long
size	long
)	O
{	O
polynomial_state_t	struct
*	O
state	pointer
=	O
(	O
polynomial_state_t	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
polynomial_state_t	struct
)	O
)	O
;	O
if	O
(	O
state	pointer
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for polynomial state"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
d	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
double	O
)	O
*	O
size	long
)	O
;	O
if	O
(	O
state	pointer
->	O
d	pointer
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for d"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
coeff	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
double	O
)	O
*	O
size	long
)	O
;	O
if	O
(	O
state	pointer
->	O
coeff	pointer
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
->	O
d	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for d"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
work	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
double	O
)	O
*	O
size	long
)	O
;	O
if	O
(	O
state	pointer
->	O
work	pointer
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
->	O
coeff	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
d	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for d"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
return	O
state	pointer
;	O
}	O
static	O
int	O
polynomial_init	function
(	O
void	O
*	O
vstate	pointer
,	O
const	O
double	O
xa	array
[	O
]	O
,	O
const	O
double	O
ya	array
[	O
]	O
,	O
size_t	long
size	long
)	O
{	O
polynomial_state_t	struct
*	O
state	pointer
=	O
(	O
polynomial_state_t	struct
*	O
)	O
vstate	pointer
;	O
int	O
status	int
=	O
gsl_poly_dd_init	function
(	O
state	pointer
->	O
d	pointer
,	O
xa	array
,	O
ya	array
,	O
size	long
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
polynomial_eval	function
(	O
const	O
void	O
*	O
vstate	pointer
,	O
const	O
double	O
xa	array
[	O
]	O
,	O
const	O
double	O
ya	array
[	O
]	O
,	O
size_t	long
size	long
,	O
double	O
x	double
,	O
gsl_interp_accel	struct
*	O
acc	pointer
,	O
double	O
*	O
y	array
)	O
{	O
const	O
polynomial_state_t	struct
*	O
state	pointer
=	O
(	O
const	O
polynomial_state_t	struct
*	O
)	O
vstate	pointer
;	O
*	O
y	array
=	O
gsl_poly_dd_eval	function
(	O
state	pointer
->	O
d	pointer
,	O
xa	array
,	O
size	long
,	O
x	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
polynomial_deriv	function
(	O
const	O
void	O
*	O
vstate	pointer
,	O
const	O
double	O
xa	array
[	O
]	O
,	O
const	O
double	O
ya	array
[	O
]	O
,	O
size_t	long
size	long
,	O
double	O
x	double
,	O
gsl_interp_accel	struct
*	O
acc	pointer
,	O
double	O
*	O
y	array
)	O
{	O
const	O
polynomial_state_t	struct
*	O
state	pointer
=	O
(	O
const	O
polynomial_state_t	struct
*	O
)	O
vstate	pointer
;	O
gsl_poly_dd_taylor	function
(	O
state	pointer
->	O
coeff	pointer
,	O
x	double
,	O
state	pointer
->	O
d	pointer
,	O
xa	array
,	O
size	long
,	O
state	pointer
->	O
work	pointer
)	O
;	O
*	O
y	array
=	O
state	pointer
->	O
coeff	pointer
[	O
1	int
]	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
polynomial_deriv2	function
(	O
const	O
void	O
*	O
vstate	pointer
,	O
const	O
double	O
xa	array
[	O
]	O
,	O
const	O
double	O
ya	array
[	O
]	O
,	O
size_t	long
size	long
,	O
double	O
x	double
,	O
gsl_interp_accel	struct
*	O
acc	pointer
,	O
double	O
*	O
y	array
)	O
{	O
const	O
polynomial_state_t	struct
*	O
state	pointer
=	O
(	O
const	O
polynomial_state_t	struct
*	O
)	O
vstate	pointer
;	O
gsl_poly_dd_taylor	function
(	O
state	pointer
->	O
coeff	pointer
,	O
x	double
,	O
state	pointer
->	O
d	pointer
,	O
xa	array
,	O
size	long
,	O
state	pointer
->	O
work	pointer
)	O
;	O
*	O
y	array
=	O
2.0	int
*	O
state	pointer
->	O
coeff	pointer
[	O
2	int
]	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
polynomial_integ	function
(	O
const	O
void	O
*	O
vstate	pointer
,	O
const	O
double	O
xa	array
[	O
]	O
,	O
const	O
double	O
ya	array
[	O
]	O
,	O
size_t	long
size	long
,	O
gsl_interp_accel	struct
*	O
acc	pointer
,	O
double	O
a	double
,	O
double	O
b	double
,	O
double	O
*	O
result	pointer
)	O
{	O
const	O
polynomial_state_t	struct
*	O
state	pointer
=	O
(	O
const	O
polynomial_state_t	struct
*	O
)	O
vstate	pointer
;	O
size_t	long
i	int
;	O
double	O
sum	double
;	O
gsl_poly_dd_taylor	function
(	O
state	pointer
->	O
coeff	pointer
,	O
0.0	int
,	O
state	pointer
->	O
d	pointer
,	O
xa	array
,	O
size	long
,	O
state	pointer
->	O
work	pointer
)	O
;	O
sum	double
=	O
state	pointer
->	O
coeff	pointer
[	O
0	int
]	O
*	O
(	O
b	double
-	O
a	double
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
size	long
;	O
i	int
++	O
)	O
{	O
sum	double
+=	O
state	pointer
->	O
coeff	pointer
[	O
i	int
]	O
*	O
(	O
pow	function
(	O
b	double
,	O
i	int
+	O
1	int
)	O
-	O
pow	function
(	O
a	double
,	O
i	int
+	O
1	int
)	O
)	O
/	O
(	O
i	int
+	O
1.0	int
)	O
;	O
}	O
*	O
result	pointer
=	O
sum	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
void	O
polynomial_free	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
polynomial_state_t	struct
*	O
state	pointer
=	O
(	O
polynomial_state_t	struct
*	O
)	O
vstate	pointer
;	O
free	function
(	O
state	pointer
->	O
d	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
coeff	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
work	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
}	O
static	O
const	O
gsl_interp_type	struct
polynomial_type	struct
=	O
{	O
"polynomial"	pointer
,	O
3	int
,	O
&	O
polynomial_alloc	function
,	O
&	O
polynomial_init	function
,	O
&	O
polynomial_eval	function
,	O
&	O
polynomial_deriv	function
,	O
&	O
polynomial_deriv2	function
,	O
&	O
polynomial_integ	function
,	O
&	O
polynomial_free	function
,	O
}	O
;	O
const	O
gsl_interp_type	struct
*	O
gsl_interp_polynomial	pointer
=	O
&	O
polynomial_type	struct
;	O
