extern	O
Display	struct
*	O
dpy	pointer
;	O
extern	O
Window	long
win	long
;	O
extern	O
GC	pointer
curGC	pointer
;	O
extern	O
XSizeHints	struct
xsh	struct
;	O
extern	O
int	O
mono	int
;	O
VPolygon	struct
*	O
poly	pointer
[	O
2048	int
]	O
;	O
double	O
lastTime	double
=	O
1000.0	int
;	O
double	O
frameCount	double
=	O
0.0	int
;	O
double	O
minInterval	double
=	O
10000.0	int
;	O
double	O
maxInterval	double
=	O
0.0	int
;	O
double	O
elapsedTotal	double
=	O
0.0	int
;	O
static	O
VPoint	struct
origin	struct
=	O
{	O
0.0	int
,	O
0.0	int
,	O
0.0	int
}	O
;	O
void	O
TimeIntervalAccounting	function
(	O
)	O
{	O
struct	O
itimerval	struct
itv	struct
;	O
double	O
thisTime	double
,	O
elapsedTime	double
;	O
getitimer	function
(	O
ITIMER_REAL	int
,	O
&	O
itv	struct
)	O
;	O
thisTime	double
=	O
(	O
double	O
)	O
itv	struct
.	O
it_value	struct
.	O
tv_sec	long
+	O
(	O
double	O
)	O
itv	struct
.	O
it_value	struct
.	O
tv_usec	long
/	O
1000000.0	int
;	O
elapsedTime	double
=	O
lastTime	double
-	O
thisTime	double
;	O
if	O
(	O
elapsedTime	double
>	O
maxInterval	double
)	O
maxInterval	double
=	O
elapsedTime	double
;	O
if	O
(	O
elapsedTime	double
<	O
minInterval	double
)	O
minInterval	double
=	O
elapsedTime	double
;	O
elapsedTotal	double
+=	O
elapsedTime	double
;	O
frameCount	double
+=	O
1	int
;	O
lastTime	double
=	O
thisTime	double
;	O
usleep	function
(	O
40000	int
)	O
;	O
}	O
void	O
PrintStatistics	function
(	O
)	O
{	O
printf	function
(	O
"Total time for %g frames was %g seconds.\n\n"	pointer
,	O
frameCount	double
,	O
elapsedTotal	double
)	O
;	O
printf	function
(	O
"Average frame rate was %g frames per second\n"	pointer
,	O
frameCount	double
/	O
elapsedTotal	double
)	O
;	O
printf	function
(	O
"Maximum frame rate was %g frames per second\n"	pointer
,	O
1.0	int
/	O
minInterval	double
)	O
;	O
printf	function
(	O
"Minimum frame rate was %g frames per second\n"	pointer
,	O
1.0	int
/	O
maxInterval	double
)	O
;	O
}	O
VPoint	struct
*	O
normal	struct
;	O
Viewport	struct
*	O
vx	pointer
;	O
void	O
placeObject	function
(	O
v	struct
,	O
obj	pointer
,	O
loc	pointer
,	O
roll	double
,	O
pitch	double
,	O
yaw	double
,	O
poly	pointer
,	O
cnt	pointer
)	O
Viewport	struct
*	O
v	struct
;	O
VObject	struct
*	O
obj	pointer
;	O
VPoint	struct
loc	pointer
;	O
double	O
roll	double
;	O
double	O
pitch	double
;	O
double	O
yaw	double
;	O
VPolygon	struct
*	O
*	O
poly	pointer
;	O
int	O
*	O
cnt	pointer
;	O
{	O
int	O
i	int
,	O
j	int
,	O
k	int
,	O
offset	int
,	O
aspect	int
,	O
n	int
;	O
VPoint	struct
*	O
q	pointer
,	O
tmp	struct
,	O
center	struct
,	O
nc	struct
;	O
VMatrix	struct
mtx	struct
,	O
mtx1	struct
;	O
register	O
double	O
dist	double
;	O
VPolygon	struct
*	O
*	O
p	pointer
;	O
j	int
=	O
*	O
cnt	pointer
;	O
VIdentMatrix	function
(	O
&	O
mtx	struct
)	O
;	O
if	O
(	O
roll	double
!=	O
0.0	int
)	O
VRotate	function
(	O
&	O
mtx	struct
,	O
XRotation	int
,	O
roll	double
)	O
;	O
if	O
(	O
pitch	double
!=	O
0.0	int
)	O
VRotate	function
(	O
&	O
mtx	struct
,	O
YRotation	int
,	O
pitch	double
)	O
;	O
if	O
(	O
yaw	double
!=	O
0.0	int
)	O
VRotate	function
(	O
&	O
mtx	struct
,	O
ZRotation	int
,	O
yaw	double
)	O
;	O
VTranslatePoint	function
(	O
&	O
mtx	struct
,	O
loc	pointer
)	O
;	O
VMatrixMult	function
(	O
&	O
mtx	struct
,	O
&	O
v	struct
->	O
eyeSpace	struct
,	O
&	O
mtx1	struct
)	O
;	O
VTransform	function
(	O
&	O
obj	pointer
->	O
center	struct
,	O
&	O
mtx	struct
,	O
&	O
tmp	struct
)	O
;	O
VTransform	function
(	O
&	O
tmp	struct
,	O
&	O
v	struct
->	O
eyeSpace	struct
,	O
&	O
center	struct
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
++	O
i	int
)	O
{	O
dist	double
=	O
VPointToClipPlaneDistance	O
(	O
&	O
center	struct
,	O
&	O
(	O
normal	struct
[	O
i	int
]	O
)	O
)	O
;	O
if	O
(	O
dist	double
>	O
obj	pointer
->	O
extent	double
)	O
{	O
return	O
;	O
}	O
}	O
n	int
=	O
obj	pointer
->	O
numPolys	int
;	O
p	pointer
=	O
obj	pointer
->	O
polygon	pointer
;	O
if	O
(	O
obj	pointer
->	O
order	pointer
)	O
{	O
VTransform	function
(	O
&	O
origin	struct
,	O
&	O
mtx1	struct
,	O
&	O
nc	struct
)	O
;	O
VTransform_	function
(	O
&	O
_VUnitVectorI	struct
,	O
&	O
mtx1	struct
,	O
&	O
obj	pointer
->	O
xaxis	struct
)	O
;	O
VTransform_	function
(	O
&	O
_VUnitVectorJ	struct
,	O
&	O
mtx1	struct
,	O
&	O
obj	pointer
->	O
yaxis	struct
)	O
;	O
VTransform_	function
(	O
&	O
_VUnitVectorK	struct
,	O
&	O
mtx1	struct
,	O
&	O
obj	pointer
->	O
zaxis	struct
)	O
;	O
aspect	int
=	O
VComputeObjectAspect	function
(	O
obj	pointer
,	O
&	O
nc	struct
)	O
;	O
offset	int
=	O
aspect	int
*	O
n	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
++	O
i	int
)	O
{	O
if	O
(	O
poly	pointer
[	O
j	int
]	O
!=	O
(	O
VPolygon	struct
*	O
)	O
NULL	O
)	O
VDestroyPolygon	O
(	O
poly	pointer
[	O
j	int
]	O
)	O
;	O
poly	pointer
[	O
j	int
]	O
=	O
(	O
obj	pointer
->	O
order	pointer
)	O
?	O
VCopyPolygon	function
(	O
p	pointer
[	O
obj	pointer
->	O
order	pointer
[	O
offset	int
+	O
i	int
]	O
]	O
)	O
:	O
VCopyPolygon	function
(	O
p	pointer
[	O
i	int
]	O
)	O
;	O
for	O
(	O
(	O
k	int
=	O
0	int
,	O
q	pointer
=	O
poly	pointer
[	O
j	int
]	O
->	O
vertex	pointer
)	O
;	O
k	int
<	O
poly	pointer
[	O
j	int
]	O
->	O
numVtces	short
;	O
(	O
++	O
k	int
,	O
++	O
q	pointer
)	O
)	O
{	O
VTransform	function
(	O
q	pointer
,	O
&	O
mtx1	struct
,	O
&	O
tmp	struct
)	O
;	O
*	O
q	pointer
=	O
tmp	struct
;	O
}	O
if	O
(	O
poly	pointer
[	O
j	int
]	O
->	O
flags	short
&	O
PolyNormalValid	int
)	O
{	O
VTransform_	function
(	O
&	O
poly	pointer
[	O
j	int
]	O
->	O
normal	struct
,	O
&	O
mtx1	struct
,	O
&	O
tmp	struct
)	O
;	O
poly	pointer
[	O
j	int
]	O
->	O
normal	struct
=	O
tmp	struct
;	O
}	O
++	O
j	int
;	O
}	O
*	O
cnt	pointer
=	O
j	int
;	O
}	O
app	function
(	O
background	long
)	O
char	O
*	O
background	long
;	O
{	O
int	O
i	int
,	O
cnt	pointer
,	O
black	int
;	O
unsigned	O
int	O
j	int
,	O
curPixel	int
=	O
0	int
;	O
char	O
*	O
str	pointer
;	O
FILE	struct
*	O
file	pointer
;	O
VObject	struct
*	O
obj	pointer
,	O
*	O
ftr	pointer
,	O
*	O
mig	pointer
;	O
VPoint	struct
viewPt	struct
,	O
centerInt	struct
,	O
up	struct
,	O
ftrLoc	struct
,	O
ftrLoc2	struct
,	O
ftrLoc3	struct
,	O
migLoc1	struct
,	O
migLoc2	struct
;	O
Viewport	struct
*	O
v	struct
;	O
double	O
dist	double
,	O
p	pointer
,	O
migV	double
,	O
v1	double
,	O
a	pointer
,	O
migRoll	double
;	O
double	O
updateRate	double
=	O
10.0	int
;	O
Colormap	long
cmap	long
;	O
long	O
screen	pointer
;	O
ZInfo	struct
z	double
;	O
VColor	struct
*	O
vsky	pointer
;	O
unsigned	O
long	O
skypixel	long
;	O
struct	O
itimerval	struct
timeval	struct
;	O
XSegment	struct
seg	pointer
[	O
2	int
]	O
;	O
str	pointer
=	O
"../../objects/rwy-and-gnd.obv"	pointer
;	O
if	O
(	O
(	O
file	pointer
=	O
fopen	function
(	O
str	pointer
,	O
"r"	pointer
)	O
)	O
==	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
{	O
perror	function
(	O
"Cannot open object file"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
(	O
obj	pointer
=	O
VReadObject	function
(	O
file	pointer
)	O
)	O
==	O
(	O
VObject	struct
*	O
)	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Error reading the object definition.\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
fclose	function
(	O
file	pointer
)	O
;	O
str	pointer
=	O
"../../objects/f16.obv"	pointer
;	O
if	O
(	O
(	O
file	pointer
=	O
fopen	function
(	O
str	pointer
,	O
"r"	pointer
)	O
)	O
==	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
{	O
perror	function
(	O
"Cannot open object file"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
(	O
ftr	pointer
=	O
VReadObject	function
(	O
file	pointer
)	O
)	O
==	O
(	O
VObject	struct
*	O
)	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Error reading the object definition.\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
fclose	function
(	O
file	pointer
)	O
;	O
str	pointer
=	O
"../../objects/mig29.obv"	pointer
;	O
if	O
(	O
(	O
file	pointer
=	O
fopen	function
(	O
str	pointer
,	O
"r"	pointer
)	O
)	O
==	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
{	O
perror	function
(	O
"Cannot open object file"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
(	O
mig	pointer
=	O
VReadObject	function
(	O
file	pointer
)	O
)	O
==	O
(	O
VObject	struct
*	O
)	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Error reading the object definition.\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
fclose	function
(	O
file	pointer
)	O
;	O
_VDefaultWorkContext	pointer
->	O
usePixmaps	int
=	O
0	int
;	O
screen	pointer
=	O
DefaultScreen	O
(	O
dpy	pointer
)	O
;	O
cmap	long
=	O
DefaultColormap	O
(	O
dpy	pointer
,	O
screen	pointer
)	O
;	O
v	struct
=	O
VOpenViewport	function
(	O
dpy	pointer
,	O
screen	pointer
,	O
win	long
,	O
cmap	long
,	O
DefaultVisual	O
(	O
dpy	pointer
,	O
screen	pointer
)	O
,	O
UNITS_FEET	int
,	O
1.5	int
,	O
1.0	int
,	O
xsh	struct
.	O
width	int
,	O
xsh	struct
.	O
height	int
)	O
;	O
normal	struct
=	O
v	struct
->	O
clipNormals	array
;	O
vx	pointer
=	O
v	struct
;	O
vsky	pointer
=	O
VAllocColor	function
(	O
"skyblue"	pointer
)	O
;	O
if	O
(	O
VBindColors	function
(	O
v	struct
,	O
background	long
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Error in binding colors.\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
skypixel	long
=	O
v	struct
->	O
pixel	long
[	O
vsky	pointer
->	O
cIndex	short
]	O
;	O
ftrLoc	struct
.	O
x	double
=	O
80.0	int
;	O
ftrLoc	struct
.	O
y	double
=	O
-	O
110.0	int
;	O
ftrLoc	struct
.	O
z	double
=	O
-	O
7.0	int
;	O
ftrLoc2	struct
.	O
x	double
=	O
475.0	int
;	O
ftrLoc2	struct
.	O
y	double
=	O
3.7	int
;	O
ftrLoc2	struct
.	O
z	double
=	O
-	O
7.0	int
;	O
migLoc1	struct
.	O
z	double
=	O
-	O
310.0	int
;	O
migLoc2	struct
.	O
z	double
=	O
-	O
320.0	int
;	O
migV	double
=	O
370.0	int
/	O
3600.0	int
*	O
5280.0	int
/	O
updateRate	double
;	O
migV	double
=	O
migV	double
/	O
(	O
2500.0	int
*	O
3.14	int
*	O
2.0	int
)	O
;	O
migRoll	double
=	O
28.0	int
*	O
3.14	int
/	O
180.0	int
;	O
a	pointer
=	O
90.0	int
*	O
3.14	int
/	O
180.0	int
;	O
v1	double
=	O
130.0	int
/	O
3600.0	int
*	O
5280.0	int
/	O
updateRate	double
;	O
centerInt	struct
.	O
x	double
=	O
80.0	int
;	O
centerInt	struct
.	O
y	double
=	O
-	O
90.0	int
;	O
centerInt	struct
.	O
z	double
=	O
-	O
6.0	int
;	O
dist	double
=	O
-	O
10000.0	int
;	O
p	pointer
=	O
0	int
;	O
getitimer	function
(	O
ITIMER_REAL	int
,	O
&	O
timeval	struct
)	O
;	O
timeval	struct
.	O
it_value	struct
.	O
tv_sec	long
=	O
1000	int
;	O
timeval	struct
.	O
it_value	struct
.	O
tv_usec	long
=	O
0	int
;	O
setitimer	function
(	O
ITIMER_REAL	int
,	O
&	O
timeval	struct
,	O
(	O
struct	O
itimerval	struct
*	O
)	O
NULL	O
)	O
;	O
mono	int
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
mono	int
==	O
0	int
)	O
{	O
z	double
.	O
depth	int
=	O
MaxDepth	int
;	O
z	double
.	O
color	pointer
=	O
skypixel	long
;	O
FillRectangle	function
(	O
v	struct
->	O
w	pointer
,	O
0	int
,	O
0	int
,	O
xsh	struct
.	O
width	int
,	O
xsh	struct
.	O
height	int
,	O
&	O
z	double
)	O
;	O
}	O
ftrLoc3	struct
.	O
x	double
=	O
dist	double
+	O
150.0	int
;	O
ftrLoc3	struct
.	O
y	double
=	O
-	O
15.0	int
;	O
ftrLoc3	struct
.	O
z	double
=	O
(	O
dist	double
+	O
150.0	int
)	O
*	O
50.0	int
/	O
1000.0	int
-	O
40.0	int
;	O
if	O
(	O
ftrLoc3	struct
.	O
z	double
>	O
-	O
13.0	int
)	O
ftrLoc3	struct
.	O
z	double
=	O
-	O
13.0	int
;	O
viewPt	struct
.	O
x	double
=	O
dist	double
;	O
viewPt	struct
.	O
y	double
=	O
15.0	int
;	O
viewPt	struct
.	O
z	double
=	O
dist	double
*	O
50.0	int
/	O
1000.0	int
-	O
50.0	int
;	O
if	O
(	O
viewPt	struct
.	O
z	double
>	O
-	O
13.0	int
)	O
viewPt	struct
.	O
z	double
=	O
-	O
13.0	int
;	O
up	struct
=	O
viewPt	struct
;	O
up	struct
.	O
z	double
=	O
up	struct
.	O
z	double
-	O
1.0	int
;	O
if	O
(	O
viewPt	struct
.	O
z	double
<	O
-	O
14.0	int
)	O
up	struct
.	O
y	double
=	O
up	struct
.	O
y	double
+	O
0.1	int
*	O
sin	function
(	O
p	pointer
)	O
;	O
p	pointer
=	O
p	pointer
+	O
0.03	int
;	O
dist	double
=	O
dist	double
+	O
v1	double
;	O
if	O
(	O
dist	double
>	O
10000.0	int
)	O
{	O
PrintStatistics	function
(	O
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
migLoc1	struct
.	O
x	double
=	O
0.0	int
+	O
2200.0	int
*	O
cos	function
(	O
a	pointer
)	O
;	O
migLoc1	struct
.	O
y	double
=	O
-	O
800.0	int
+	O
2200.0	int
*	O
sin	function
(	O
a	pointer
)	O
;	O
migLoc2	struct
.	O
x	double
=	O
0.0	int
+	O
2225.0	int
*	O
cos	function
(	O
a	pointer
-	O
0.04	int
)	O
;	O
migLoc2	struct
.	O
y	double
=	O
-	O
800.0	int
+	O
2225.0	int
*	O
sin	function
(	O
a	pointer
-	O
0.04	int
)	O
;	O
a	pointer
=	O
a	pointer
+	O
migV	double
;	O
up	struct
=	O
migLoc2	struct
;	O
up	struct
.	O
z	double
=	O
up	struct
.	O
z	double
-	O
1.0	int
;	O
VGetEyeSpace	function
(	O
v	struct
,	O
migLoc2	struct
,	O
viewPt	struct
,	O
up	struct
)	O
;	O
cnt	pointer
=	O
0	int
;	O
placeObject	function
(	O
v	struct
,	O
obj	pointer
,	O
origin	struct
,	O
0.0	int
,	O
0.0	int
,	O
0.0	int
,	O
poly	pointer
,	O
&	O
cnt	pointer
)	O
;	O
placeObject	function
(	O
v	struct
,	O
ftr	pointer
,	O
ftrLoc	struct
,	O
0.0	int
,	O
0.0	int
,	O
90.0	int
*	O
3.14	int
/	O
180.0	int
,	O
poly	pointer
,	O
&	O
cnt	pointer
)	O
;	O
placeObject	function
(	O
v	struct
,	O
ftr	pointer
,	O
ftrLoc2	struct
,	O
0.0	int
,	O
0.0	int
,	O
-	O
3.0	int
*	O
3.14	int
/	O
180.0	int
,	O
poly	pointer
,	O
&	O
cnt	pointer
)	O
;	O
placeObject	function
(	O
v	struct
,	O
ftr	pointer
,	O
ftrLoc3	struct
,	O
0.0	int
,	O
-	O
11.0	int
*	O
3.14	int
/	O
180.0	int
,	O
0.0	int
,	O
poly	pointer
,	O
&	O
cnt	pointer
)	O
;	O
placeObject	function
(	O
v	struct
,	O
ftr	pointer
,	O
viewPt	struct
,	O
0.0	int
,	O
-	O
11.0	int
*	O
3.14	int
/	O
180.0	int
,	O
0.0	int
,	O
poly	pointer
,	O
&	O
cnt	pointer
)	O
;	O
placeObject	function
(	O
v	struct
,	O
mig	pointer
,	O
migLoc1	struct
,	O
migRoll	double
,	O
0.0	int
,	O
a	pointer
+	O
90.0	int
*	O
3.14	int
/	O
180.0	int
,	O
poly	pointer
,	O
&	O
cnt	pointer
)	O
;	O
black	int
=	O
BlackPixel	O
(	O
dpy	pointer
,	O
0	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
cnt	pointer
;	O
++	O
i	int
)	O
{	O
if	O
(	O
mono	int
)	O
XSetForeground	function
(	O
dpy	pointer
,	O
curGC	pointer
,	O
black	int
)	O
;	O
poly	pointer
[	O
i	int
]	O
=	O
VClipSidedPolygon	function
(	O
v	struct
,	O
poly	pointer
[	O
i	int
]	O
,	O
v	struct
->	O
clipPoly	pointer
)	O
;	O
if	O
(	O
poly	pointer
[	O
i	int
]	O
)	O
{	O
if	O
(	O
mono	int
)	O
VDrawPolygon	function
(	O
v	struct
,	O
win	long
,	O
curGC	pointer
,	O
poly	pointer
[	O
i	int
]	O
)	O
;	O
else	O
VFillPolygon	function
(	O
v	struct
,	O
win	long
,	O
curGC	pointer
,	O
poly	pointer
[	O
i	int
]	O
)	O
;	O
}	O
}	O
VExposeBuffer	function
(	O
v	struct
,	O
curGC	pointer
)	O
;	O
TimeIntervalAccounting	function
(	O
)	O
;	O
}	O
}	O
