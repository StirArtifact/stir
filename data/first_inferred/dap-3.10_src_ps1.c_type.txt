extern	O
dataobs	struct
dap_obs	array
[	O
]	O
;	O
extern	O
FILE	struct
*	O
dap_err	pointer
;	O
extern	O
char	O
*	O
pict_newstr	function
(	O
char	O
*	O
str	array
)	O
;	O
void	O
pict_maketick	function
(	O
tick	struct
*	O
t	double
,	O
double	O
num	double
,	O
char	O
*	O
label	array
,	O
double	O
len	double
)	O
{	O
t	double
->	O
tick_num	double
=	O
num	double
;	O
t	double
->	O
tick_lab	pointer
=	O
pict_newstr	function
(	O
label	array
)	O
;	O
t	double
->	O
tick_len	double
=	O
len	double
;	O
}	O
static	O
void	O
yaxis	function
(	O
pict	struct
*	O
p	double
,	O
double	O
miny	double
,	O
double	O
maxy	double
,	O
tick	struct
ytick	array
[	O
]	O
,	O
int	O
nyticks	int
,	O
double	O
xpos	double
,	O
double	O
ypos	double
,	O
double	O
side	double
,	O
int	O
marks	array
)	O
{	O
int	O
ny	int
;	O
char	O
tpos	double
[	O
4	int
]	O
;	O
char	O
npos	array
[	O
3	int
]	O
;	O
double	O
xlaboff	double
;	O
double	O
txtang	double
;	O
int	O
lab1len	int
;	O
int	O
labslen	int
;	O
strcpy	function
(	O
tpos	double
,	O
"cb "	pointer
)	O
;	O
if	O
(	O
side	double
>	O
0.0	int
)	O
strcpy	function
(	O
npos	array
,	O
"rm"	pointer
)	O
;	O
else	O
strcpy	function
(	O
npos	array
,	O
"lm"	pointer
)	O
;	O
for	O
(	O
labslen	int
=	O
0	int
,	O
ny	int
=	O
0	int
;	O
ny	int
<	O
nyticks	int
;	O
ny	int
++	O
)	O
{	O
lab1len	int
=	O
strlen	function
(	O
ytick	array
[	O
ny	int
]	O
.	O
tick_lab	pointer
)	O
;	O
if	O
(	O
lab1len	int
>	O
labslen	int
)	O
labslen	int
=	O
lab1len	int
;	O
}	O
txtang	double
=	O
0.0	int
;	O
if	O
(	O
miny	double
<=	O
ytick	array
[	O
nyticks	int
]	O
.	O
tick_num	double
&&	O
ytick	array
[	O
nyticks	int
]	O
.	O
tick_num	double
<=	O
maxy	double
)	O
{	O
strcpy	function
(	O
tpos	double
,	O
"cb "	pointer
)	O
;	O
xlaboff	double
=	O
0.25	int
*	O
p	double
->	O
pict_fs	double
*	O
(	O
(	O
double	O
)	O
(	O
labslen	int
+	O
6	int
)	O
)	O
*	O
fabs	function
(	O
ytick	array
[	O
nyticks	int
]	O
.	O
tick_len	double
)	O
;	O
txtang	double
=	O
side	double
*	O
90.0	int
;	O
}	O
else	O
if	O
(	O
ytick	array
[	O
nyticks	int
]	O
.	O
tick_num	double
<	O
miny	double
)	O
{	O
strcpy	function
(	O
tpos	double
,	O
"ct "	pointer
)	O
;	O
xlaboff	double
=	O
0.0	int
;	O
}	O
else	O
{	O
strcpy	function
(	O
tpos	double
,	O
"cb "	pointer
)	O
;	O
xlaboff	double
=	O
0.0	int
;	O
}	O
if	O
(	O
side	double
>	O
0.0	int
||	O
marks	array
)	O
pict_text	function
(	O
p	double
,	O
ytick	array
[	O
nyticks	int
]	O
.	O
tick_lab	pointer
,	O
ypos	double
-	O
side	double
*	O
xlaboff	double
,	O
ytick	array
[	O
nyticks	int
]	O
.	O
tick_num	double
,	O
txtang	double
,	O
tpos	double
)	O
;	O
pict_point	function
(	O
p	double
,	O
ypos	double
,	O
maxy	double
)	O
;	O
while	O
(	O
--	O
nyticks	int
>=	O
0	int
)	O
{	O
pict_point	function
(	O
p	double
,	O
ypos	double
,	O
ytick	array
[	O
nyticks	int
]	O
.	O
tick_num	double
)	O
;	O
pict_point	function
(	O
p	double
,	O
ypos	double
+	O
side	double
*	O
ytick	array
[	O
nyticks	int
]	O
.	O
tick_len	double
,	O
ytick	array
[	O
nyticks	int
]	O
.	O
tick_num	double
)	O
;	O
pict_point	function
(	O
p	double
,	O
ypos	double
,	O
ytick	array
[	O
nyticks	int
]	O
.	O
tick_num	double
)	O
;	O
if	O
(	O
side	double
>	O
0.0	int
||	O
marks	array
)	O
pict_text	function
(	O
p	double
,	O
ytick	array
[	O
nyticks	int
]	O
.	O
tick_lab	pointer
,	O
ypos	double
-	O
(	O
4.5	int
*	O
side	double
-	O
0.5	int
)	O
*	O
fabs	function
(	O
ytick	array
[	O
nyticks	int
]	O
.	O
tick_len	double
)	O
,	O
ytick	array
[	O
nyticks	int
]	O
.	O
tick_num	double
,	O
0.0	int
,	O
npos	array
)	O
;	O
}	O
pict_point	function
(	O
p	double
,	O
ypos	double
,	O
miny	double
)	O
;	O
pict_point	function
(	O
p	double
,	O
ypos	double
,	O
xpos	double
)	O
;	O
}	O
static	O
void	O
xaxis	function
(	O
pict	struct
*	O
p	double
,	O
double	O
minx	double
,	O
double	O
maxx	double
,	O
tick	struct
xtick	array
[	O
]	O
,	O
int	O
nxticks	int
,	O
double	O
xpos	double
,	O
double	O
ypos	double
,	O
double	O
side	double
,	O
int	O
marks	array
)	O
{	O
int	O
nx	int
;	O
char	O
tpos	double
[	O
4	int
]	O
;	O
char	O
npos	array
[	O
3	int
]	O
;	O
double	O
ylaboff	double
;	O
int	O
lab1len	int
;	O
int	O
labslen	int
;	O
strcpy	function
(	O
tpos	double
,	O
"lt "	pointer
)	O
;	O
strcpy	function
(	O
npos	array
,	O
"ct"	pointer
)	O
;	O
for	O
(	O
labslen	int
=	O
0	int
,	O
nx	int
=	O
0	int
;	O
nx	int
<	O
nxticks	int
;	O
nx	int
++	O
)	O
{	O
lab1len	int
=	O
strlen	function
(	O
xtick	array
[	O
nx	int
]	O
.	O
tick_lab	pointer
)	O
;	O
if	O
(	O
lab1len	int
>	O
labslen	int
)	O
labslen	int
=	O
lab1len	int
;	O
}	O
if	O
(	O
minx	double
<=	O
xtick	array
[	O
nxticks	int
]	O
.	O
tick_num	double
&&	O
xtick	array
[	O
nxticks	int
]	O
.	O
tick_num	double
<=	O
maxx	double
)	O
{	O
tpos	double
[	O
0	int
]	O
=	O
'c'	O
;	O
if	O
(	O
side	double
<	O
0.0	int
)	O
{	O
tpos	double
[	O
1	int
]	O
=	O
'b'	O
;	O
npos	array
[	O
1	int
]	O
=	O
'b'	O
;	O
}	O
ylaboff	double
=	O
fabs	function
(	O
p	double
->	O
pict_fs	double
*	O
xtick	array
[	O
nxticks	int
]	O
.	O
tick_len	double
)	O
;	O
}	O
else	O
if	O
(	O
xtick	array
[	O
nxticks	int
]	O
.	O
tick_num	double
<	O
minx	double
)	O
{	O
strcpy	function
(	O
tpos	double
,	O
"rm "	pointer
)	O
;	O
ylaboff	double
=	O
0.0	int
;	O
}	O
else	O
{	O
strcpy	function
(	O
tpos	double
,	O
"lm "	pointer
)	O
;	O
ylaboff	double
=	O
0.0	int
;	O
}	O
if	O
(	O
side	double
>	O
0.0	int
||	O
marks	array
)	O
pict_text	function
(	O
p	double
,	O
xtick	array
[	O
nxticks	int
]	O
.	O
tick_lab	pointer
,	O
xtick	array
[	O
nxticks	int
]	O
.	O
tick_num	double
,	O
xpos	double
-	O
side	double
*	O
ylaboff	double
,	O
0.0	int
,	O
tpos	double
)	O
;	O
pict_point	function
(	O
p	double
,	O
maxx	double
,	O
xpos	double
)	O
;	O
while	O
(	O
--	O
nxticks	int
>=	O
0	int
)	O
{	O
pict_point	function
(	O
p	double
,	O
xtick	array
[	O
nxticks	int
]	O
.	O
tick_num	double
,	O
xpos	double
)	O
;	O
if	O
(	O
side	double
>	O
0.0	int
||	O
marks	array
)	O
pict_point	function
(	O
p	double
,	O
xtick	array
[	O
nxticks	int
]	O
.	O
tick_num	double
,	O
xpos	double
+	O
side	double
*	O
xtick	array
[	O
nxticks	int
]	O
.	O
tick_len	double
)	O
;	O
pict_point	function
(	O
p	double
,	O
xtick	array
[	O
nxticks	int
]	O
.	O
tick_num	double
,	O
xpos	double
)	O
;	O
if	O
(	O
side	double
>	O
0.0	int
||	O
marks	array
)	O
pict_text	function
(	O
p	double
,	O
xtick	array
[	O
nxticks	int
]	O
.	O
tick_lab	pointer
,	O
xtick	array
[	O
nxticks	int
]	O
.	O
tick_num	double
,	O
xpos	double
-	O
2.0	int
*	O
side	double
*	O
fabs	function
(	O
xtick	array
[	O
nxticks	int
]	O
.	O
tick_len	double
)	O
,	O
0.0	int
,	O
npos	array
)	O
;	O
}	O
pict_point	function
(	O
p	double
,	O
minx	double
,	O
xpos	double
)	O
;	O
pict_point	function
(	O
p	double
,	O
ypos	double
,	O
xpos	double
)	O
;	O
}	O
void	O
pict_axes	function
(	O
pict	struct
*	O
p	double
,	O
double	O
minx	double
,	O
double	O
maxx	double
,	O
tick	struct
xtick	array
[	O
]	O
,	O
int	O
nxticks	int
,	O
double	O
miny	double
,	O
double	O
maxy	double
,	O
tick	struct
ytick	array
[	O
]	O
,	O
int	O
nyticks	int
,	O
char	O
style	array
[	O
]	O
,	O
double	O
bpos	double
,	O
double	O
lpos	double
,	O
double	O
tpos	double
,	O
double	O
rpos	double
)	O
{	O
double	O
xpos	double
,	O
ypos	double
;	O
int	O
rmarks	int
,	O
tmarks	int
;	O
xpos	double
=	O
0.0	int
;	O
ypos	double
=	O
0.0	int
;	O
rmarks	int
=	O
0	int
;	O
tmarks	int
=	O
0	int
;	O
if	O
(	O
style	array
[	O
0	int
]	O
==	O
'+'	O
||	O
style	array
[	O
0	int
]	O
==	O
'#'	O
)	O
tmarks	int
=	O
1	int
;	O
if	O
(	O
style	array
[	O
1	int
]	O
==	O
'+'	O
||	O
style	array
[	O
1	int
]	O
==	O
'#'	O
)	O
rmarks	int
=	O
1	int
;	O
if	O
(	O
style	array
[	O
0	int
]	O
!=	O
'='	O
&&	O
style	array
[	O
1	int
]	O
!=	O
'='	O
&&	O
style	array
[	O
0	int
]	O
!=	O
'#'	O
&&	O
style	array
[	O
1	int
]	O
!=	O
'#'	O
)	O
{	O
switch	O
(	O
style	array
[	O
0	int
]	O
)	O
{	O
case	O
'-'	O
:	O
xpos	double
=	O
bpos	double
;	O
break	O
;	O
case	O
'+'	O
:	O
xpos	double
=	O
tpos	double
;	O
break	O
;	O
case	O
'0'	O
:	O
case	O
'n'	O
:	O
xpos	double
=	O
0.0	int
;	O
break	O
;	O
}	O
switch	O
(	O
style	array
[	O
1	int
]	O
)	O
{	O
case	O
'-'	O
:	O
ypos	double
=	O
lpos	double
;	O
break	O
;	O
case	O
'+'	O
:	O
ypos	double
=	O
rpos	double
;	O
break	O
;	O
case	O
'0'	O
:	O
case	O
'n'	O
:	O
ypos	double
=	O
0.0	int
;	O
break	O
;	O
}	O
switch	O
(	O
style	array
[	O
0	int
]	O
)	O
{	O
case	O
'-'	O
:	O
case	O
'0'	O
:	O
xaxis	function
(	O
p	double
,	O
minx	double
,	O
maxx	double
,	O
xtick	array
,	O
nxticks	int
,	O
xpos	double
,	O
ypos	double
,	O
1.0	int
,	O
tmarks	int
)	O
;	O
break	O
;	O
case	O
'+'	O
:	O
xaxis	function
(	O
p	double
,	O
minx	double
,	O
maxx	double
,	O
xtick	array
,	O
nxticks	int
,	O
xpos	double
,	O
ypos	double
,	O
-	O
1.0	int
,	O
tmarks	int
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
break	O
;	O
}	O
switch	O
(	O
style	array
[	O
1	int
]	O
)	O
{	O
case	O
'-'	O
:	O
case	O
'0'	O
:	O
yaxis	function
(	O
p	double
,	O
miny	double
,	O
maxy	double
,	O
ytick	array
,	O
nyticks	int
,	O
xpos	double
,	O
ypos	double
,	O
1.0	int
,	O
rmarks	int
)	O
;	O
break	O
;	O
case	O
'+'	O
:	O
yaxis	function
(	O
p	double
,	O
miny	double
,	O
maxy	double
,	O
ytick	array
,	O
nyticks	int
,	O
xpos	double
,	O
ypos	double
,	O
-	O
1.0	int
,	O
rmarks	int
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
break	O
;	O
}	O
}	O
else	O
if	O
(	O
style	array
[	O
0	int
]	O
!=	O
'='	O
&&	O
style	array
[	O
0	int
]	O
!=	O
'#'	O
)	O
{	O
switch	O
(	O
style	array
[	O
0	int
]	O
)	O
{	O
case	O
'-'	O
:	O
xpos	double
=	O
bpos	double
;	O
case	O
'0'	O
:	O
yaxis	function
(	O
p	double
,	O
miny	double
,	O
maxy	double
,	O
ytick	array
,	O
nyticks	int
,	O
xpos	double
,	O
lpos	double
,	O
1.0	int
,	O
rmarks	int
)	O
;	O
xaxis	function
(	O
p	double
,	O
minx	double
,	O
maxx	double
,	O
xtick	array
,	O
nxticks	int
,	O
xpos	double
,	O
lpos	double
,	O
1.0	int
,	O
tmarks	int
)	O
;	O
xaxis	function
(	O
p	double
,	O
minx	double
,	O
maxx	double
,	O
xtick	array
,	O
nxticks	int
,	O
xpos	double
,	O
rpos	double
,	O
1.0	int
,	O
tmarks	int
)	O
;	O
yaxis	function
(	O
p	double
,	O
miny	double
,	O
maxy	double
,	O
ytick	array
,	O
nyticks	int
,	O
xpos	double
,	O
rpos	double
,	O
-	O
1.0	int
,	O
rmarks	int
)	O
;	O
break	O
;	O
case	O
'+'	O
:	O
yaxis	function
(	O
p	double
,	O
miny	double
,	O
maxy	double
,	O
ytick	array
,	O
nyticks	int
,	O
tpos	double
,	O
lpos	double
,	O
1.0	int
,	O
rmarks	int
)	O
;	O
xaxis	function
(	O
p	double
,	O
minx	double
,	O
maxx	double
,	O
xtick	array
,	O
nxticks	int
,	O
tpos	double
,	O
lpos	double
,	O
-	O
1.0	int
,	O
tmarks	int
)	O
;	O
xaxis	function
(	O
p	double
,	O
minx	double
,	O
maxx	double
,	O
xtick	array
,	O
nxticks	int
,	O
tpos	double
,	O
rpos	double
,	O
-	O
1.0	int
,	O
tmarks	int
)	O
;	O
yaxis	function
(	O
p	double
,	O
miny	double
,	O
maxy	double
,	O
ytick	array
,	O
nyticks	int
,	O
tpos	double
,	O
rpos	double
,	O
-	O
1.0	int
,	O
rmarks	int
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
fputs	function
(	O
"(axes) Can't have double y-axes and no x-axis.\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
style	array
[	O
1	int
]	O
!=	O
'='	O
&&	O
style	array
[	O
1	int
]	O
!=	O
'#'	O
)	O
{	O
switch	O
(	O
style	array
[	O
1	int
]	O
)	O
{	O
case	O
'-'	O
:	O
ypos	double
=	O
lpos	double
;	O
case	O
'0'	O
:	O
xaxis	function
(	O
p	double
,	O
minx	double
,	O
maxx	double
,	O
xtick	array
,	O
nxticks	int
,	O
bpos	double
,	O
ypos	double
,	O
1.0	int
,	O
tmarks	int
)	O
;	O
yaxis	function
(	O
p	double
,	O
miny	double
,	O
maxy	double
,	O
ytick	array
,	O
nyticks	int
,	O
bpos	double
,	O
ypos	double
,	O
1.0	int
,	O
rmarks	int
)	O
;	O
yaxis	function
(	O
p	double
,	O
miny	double
,	O
maxy	double
,	O
ytick	array
,	O
nyticks	int
,	O
tpos	double
,	O
ypos	double
,	O
1.0	int
,	O
rmarks	int
)	O
;	O
xaxis	function
(	O
p	double
,	O
minx	double
,	O
maxx	double
,	O
xtick	array
,	O
nxticks	int
,	O
tpos	double
,	O
ypos	double
,	O
-	O
1.0	int
,	O
tmarks	int
)	O
;	O
break	O
;	O
case	O
'+'	O
:	O
xaxis	function
(	O
p	double
,	O
minx	double
,	O
maxx	double
,	O
xtick	array
,	O
nxticks	int
,	O
bpos	double
,	O
rpos	double
,	O
1.0	int
,	O
tmarks	int
)	O
;	O
yaxis	function
(	O
p	double
,	O
miny	double
,	O
maxy	double
,	O
ytick	array
,	O
nyticks	int
,	O
bpos	double
,	O
rpos	double
,	O
-	O
1.0	int
,	O
rmarks	int
)	O
;	O
yaxis	function
(	O
p	double
,	O
miny	double
,	O
maxy	double
,	O
ytick	array
,	O
nyticks	int
,	O
tpos	double
,	O
rpos	double
,	O
-	O
1.0	int
,	O
rmarks	int
)	O
;	O
xaxis	function
(	O
p	double
,	O
minx	double
,	O
maxx	double
,	O
xtick	array
,	O
nxticks	int
,	O
tpos	double
,	O
rpos	double
,	O
-	O
1.0	int
,	O
tmarks	int
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
fputs	function
(	O
"(axes) Can't have double x-axes and no y-axis.\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
else	O
{	O
yaxis	function
(	O
p	double
,	O
miny	double
,	O
maxy	double
,	O
ytick	array
,	O
nyticks	int
,	O
bpos	double
,	O
lpos	double
,	O
1.0	int
,	O
rmarks	int
)	O
;	O
xaxis	function
(	O
p	double
,	O
minx	double
,	O
maxx	double
,	O
xtick	array
,	O
nxticks	int
,	O
bpos	double
,	O
rpos	double
,	O
1.0	int
,	O
tmarks	int
)	O
;	O
yaxis	function
(	O
p	double
,	O
miny	double
,	O
maxy	double
,	O
ytick	array
,	O
nyticks	int
,	O
tpos	double
,	O
rpos	double
,	O
-	O
1.0	int
,	O
rmarks	int
)	O
;	O
xaxis	function
(	O
p	double
,	O
minx	double
,	O
maxx	double
,	O
xtick	array
,	O
nxticks	int
,	O
tpos	double
,	O
lpos	double
,	O
-	O
1.0	int
,	O
tmarks	int
)	O
;	O
}	O
}	O
static	O
void	O
makeform	function
(	O
char	O
form	array
[	O
]	O
,	O
double	O
max	double
,	O
int	O
ndigs	int
)	O
{	O
int	O
ndec	int
;	O
double	O
scale	double
;	O
if	O
(	O
ndigs	int
>	O
9	int
)	O
ndigs	int
=	O
9	int
;	O
max	double
=	O
fabs	function
(	O
max	double
)	O
;	O
strcpy	function
(	O
form	array
,	O
"%.0f"	pointer
)	O
;	O
if	O
(	O
max	double
==	O
0.0	int
)	O
sprintf	function
(	O
form	array
,	O
"%%.%dg"	pointer
,	O
ndigs	int
)	O
;	O
else	O
{	O
for	O
(	O
scale	double
=	O
1.0	int
;	O
ndigs	int
>	O
1	int
;	O
ndigs	int
--	O
)	O
scale	double
*=	O
10.0	int
;	O
for	O
(	O
ndec	int
=	O
0	int
;	O
max	double
<	O
scale	double
;	O
max	double
*=	O
10.0	int
)	O
ndec	int
++	O
;	O
if	O
(	O
ndec	int
>	O
9	int
)	O
ndec	int
=	O
9	int
;	O
form	array
[	O
2	int
]	O
+=	O
ndec	int
;	O
}	O
}	O
static	O
void	O
ticks	array
(	O
tick	struct
ticks	array
[	O
]	O
,	O
double	O
min	double
,	O
double	O
max	double
,	O
int	O
ndigs	int
,	O
double	O
ticklen	double
,	O
int	O
nticks	int
,	O
double	O
labpos	double
,	O
char	O
*	O
alab	pointer
,	O
double	O
(	O
*	O
tfunct	pointer
)	O
(	O
)	O
)	O
{	O
int	O
n	int
;	O
static	O
char	O
*	O
lab	pointer
;	O
double	O
coord	double
;	O
double	O
space	double
;	O
double	O
tcoord	double
;	O
char	O
form	array
[	O
5	int
]	O
;	O
double	O
tmin	double
,	O
tmax	double
;	O
if	O
(	O
!	O
lab	pointer
)	O
lab	pointer
=	O
dap_malloc	function
(	O
dap_maxtxt	int
+	O
1	int
,	O
"dap_maxtxt"	pointer
)	O
;	O
if	O
(	O
nticks	int
>	O
1	int
)	O
space	double
=	O
(	O
max	double
-	O
min	double
)	O
/	O
(	O
double	O
)	O
(	O
nticks	int
-	O
1	int
)	O
;	O
else	O
space	double
=	O
0	int
;	O
if	O
(	O
tfunct	pointer
)	O
tmin	double
=	O
tfunct	pointer
(	O
min	double
)	O
;	O
else	O
tmin	double
=	O
min	double
;	O
tmin	double
=	O
fabs	function
(	O
tmin	double
)	O
;	O
if	O
(	O
tfunct	pointer
)	O
tmax	double
=	O
tfunct	pointer
(	O
max	double
)	O
;	O
else	O
tmax	double
=	O
max	double
;	O
tmax	double
=	O
fabs	function
(	O
tmax	double
)	O
;	O
if	O
(	O
tmin	double
>	O
tmax	double
)	O
tmax	double
=	O
tmin	double
;	O
makeform	function
(	O
form	array
,	O
tmax	double
,	O
ndigs	int
)	O
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
nticks	int
;	O
n	int
++	O
)	O
{	O
if	O
(	O
nticks	int
>	O
1	int
)	O
coord	double
=	O
min	double
+	O
space	double
*	O
(	O
double	O
)	O
n	int
;	O
else	O
coord	double
=	O
(	O
min	double
+	O
max	double
)	O
/	O
2.0	int
;	O
if	O
(	O
tfunct	pointer
)	O
tcoord	double
=	O
(	O
*	O
tfunct	pointer
)	O
(	O
coord	double
)	O
;	O
else	O
tcoord	double
=	O
coord	double
;	O
sprintf	function
(	O
lab	pointer
,	O
form	array
,	O
tcoord	double
)	O
;	O
pict_maketick	function
(	O
ticks	array
+	O
n	int
,	O
coord	double
,	O
lab	pointer
,	O
ticklen	double
)	O
;	O
}	O
pict_maketick	function
(	O
ticks	array
+	O
n	int
,	O
labpos	double
,	O
alab	pointer
,	O
ticklen	double
)	O
;	O
}	O
double	O
pict_autoaxes	function
(	O
pict	struct
*	O
p	double
,	O
char	O
*	O
xlab	array
,	O
char	O
*	O
ylab	array
,	O
char	O
*	O
axspec	array
,	O
double	O
(	O
*	O
xfunct	pointer
)	O
(	O
)	O
,	O
double	O
(	O
*	O
yfunct	pointer
)	O
(	O
)	O
,	O
char	O
*	O
caption	array
,	O
int	O
autopos	int
)	O
{	O
pict	struct
*	O
pp	pointer
;	O
int	O
totpts	int
;	O
double	O
minx	double
,	O
maxx	double
,	O
miny	double
,	O
maxy	double
;	O
double	O
minxt	double
,	O
maxxt	double
,	O
minyt	double
,	O
maxyt	double
;	O
int	O
nxticks	int
,	O
nyticks	int
;	O
tick	struct
*	O
xticks	pointer
;	O
tick	struct
*	O
yticks	pointer
;	O
double	O
xticklen	double
;	O
double	O
yticklen	double
;	O
char	O
as	array
[	O
3	int
]	O
;	O
double	O
lpos	double
,	O
rpos	double
,	O
bpos	double
,	O
tpos	double
;	O
double	O
xlabpos	double
,	O
ylabpos	double
;	O
double	O
captoff	double
;	O
double	O
width	double
,	O
height	double
;	O
double	O
specxmax	double
,	O
specxmin	double
;	O
double	O
specymax	double
,	O
specymin	double
;	O
int	O
specxticks	int
,	O
specyticks	int
;	O
int	O
nxdigs	int
,	O
nydigs	int
;	O
int	O
a	double
,	O
w	int
;	O
char	O
*	O
word	pointer
;	O
double	O
digs	double
,	O
places	double
,	O
sign	double
;	O
int	O
nt	int
;	O
double	O
xscale	double
,	O
yscale	double
;	O
int	O
xlablines	int
;	O
minx	double
=	O
0.0	int
;	O
maxx	double
=	O
0.0	int
;	O
miny	double
=	O
0.0	int
;	O
maxy	double
=	O
0.0	int
;	O
lpos	double
=	O
0.0	int
;	O
rpos	double
=	O
0.0	int
;	O
bpos	double
=	O
0.0	int
;	O
tpos	double
=	O
0.0	int
;	O
xlabpos	double
=	O
0.0	int
;	O
ylabpos	double
=	O
0.0	int
;	O
xscale	double
=	O
1.0	int
;	O
yscale	double
=	O
1.0	int
;	O
captoff	double
=	O
0.0	int
;	O
xticks	pointer
=	O
(	O
tick	struct
*	O
)	O
dap_malloc	function
(	O
sizeof	O
(	O
tick	struct
)	O
*	O
dap_maxntxt	int
,	O
"dap_maxntxt"	pointer
)	O
;	O
yticks	pointer
=	O
(	O
tick	struct
*	O
)	O
dap_malloc	function
(	O
sizeof	O
(	O
tick	struct
)	O
*	O
dap_maxntxt	int
,	O
"dap_maxntxt"	pointer
)	O
;	O
specxmin	double
=	O
0.0	int
/	O
0.0	int
;	O
specxmax	double
=	O
0.0	int
/	O
0.0	int
;	O
specymin	double
=	O
0.0	int
/	O
0.0	int
;	O
specymax	double
=	O
0.0	int
/	O
0.0	int
;	O
specxticks	int
=	O
-	O
1	int
;	O
specyticks	int
=	O
-	O
1	int
;	O
nxdigs	int
=	O
3	int
;	O
nydigs	int
=	O
3	int
;	O
word	pointer
=	O
dap_malloc	function
(	O
dap_namelen	int
+	O
1	int
,	O
""	pointer
)	O
;	O
if	O
(	O
axspec	array
&&	O
axspec	array
[	O
0	int
]	O
)	O
{	O
for	O
(	O
a	double
=	O
0	int
;	O
axspec	array
[	O
a	double
]	O
==	O
' '	O
;	O
a	double
++	O
)	O
;	O
if	O
(	O
axspec	array
[	O
a	double
]	O
==	O
'-'	O
||	O
axspec	array
[	O
a	double
]	O
==	O
'+'	O
||	O
axspec	array
[	O
a	double
]	O
==	O
'0'	O
||	O
axspec	array
[	O
a	double
]	O
==	O
'n'	O
||	O
axspec	array
[	O
a	double
]	O
==	O
'='	O
||	O
axspec	array
[	O
a	double
]	O
==	O
'#'	O
)	O
{	O
as	array
[	O
0	int
]	O
=	O
axspec	array
[	O
a	double
++	O
]	O
;	O
if	O
(	O
axspec	array
[	O
a	double
]	O
==	O
'-'	O
||	O
axspec	array
[	O
a	double
]	O
==	O
'+'	O
||	O
axspec	array
[	O
a	double
]	O
==	O
'0'	O
||	O
axspec	array
[	O
a	double
]	O
==	O
'n'	O
||	O
axspec	array
[	O
a	double
]	O
==	O
'='	O
||	O
axspec	array
[	O
a	double
]	O
==	O
'#'	O
)	O
as	array
[	O
1	int
]	O
=	O
axspec	array
[	O
a	double
++	O
]	O
;	O
else	O
as	array
[	O
1	int
]	O
=	O
'0'	O
;	O
}	O
else	O
strcpy	function
(	O
as	array
,	O
"00"	pointer
)	O
;	O
as	array
[	O
2	int
]	O
=	O
'\0'	O
;	O
while	O
(	O
axspec	array
[	O
a	double
]	O
==	O
' '	O
)	O
a	double
++	O
;	O
while	O
(	O
axspec	array
[	O
a	double
]	O
)	O
{	O
for	O
(	O
w	int
=	O
0	int
;	O
axspec	array
[	O
a	double
]	O
&&	O
axspec	array
[	O
a	double
]	O
!=	O
' '	O
;	O
)	O
{	O
if	O
(	O
w	int
<	O
dap_namelen	int
)	O
word	pointer
[	O
w	int
++	O
]	O
=	O
axspec	array
[	O
a	double
++	O
]	O
;	O
else	O
{	O
word	pointer
[	O
w	int
]	O
=	O
'\0'	O
;	O
fprintf	function
(	O
dap_err	pointer
,	O
"(pict_autoaxes) word in axspec too long: %s\n"	pointer
,	O
word	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
word	pointer
[	O
w	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
strncmp	function
(	O
word	pointer
,	O
"MAXX"	pointer
,	O
4	int
)	O
||	O
!	O
strncmp	function
(	O
word	pointer
,	O
"MINX"	pointer
,	O
4	int
)	O
||	O
!	O
strncmp	function
(	O
word	pointer
,	O
"MAXY"	pointer
,	O
4	int
)	O
||	O
!	O
strncmp	function
(	O
word	pointer
,	O
"MINY"	pointer
,	O
4	int
)	O
)	O
{	O
w	int
=	O
4	int
;	O
sign	double
=	O
1.0	int
;	O
if	O
(	O
word	pointer
[	O
w	int
]	O
==	O
'-'	O
)	O
{	O
sign	double
=	O
-	O
1.0	int
;	O
w	int
++	O
;	O
}	O
for	O
(	O
digs	double
=	O
0.0	int
,	O
places	double
=	O
0.0	int
;	O
(	O
'0'	O
<=	O
word	pointer
[	O
w	int
]	O
&&	O
word	pointer
[	O
w	int
]	O
<=	O
'9'	O
)	O
||	O
word	pointer
[	O
w	int
]	O
==	O
'.'	O
;	O
w	int
++	O
)	O
{	O
if	O
(	O
word	pointer
[	O
w	int
]	O
==	O
'.'	O
)	O
{	O
if	O
(	O
places	double
>	O
0.0	int
)	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(pict_autoaxes) bad number for MIN or MAX: %s\n"	pointer
,	O
word	pointer
+	O
4	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
places	double
=	O
1.0	int
;	O
}	O
else	O
{	O
if	O
(	O
places	double
>	O
0.0	int
)	O
places	double
*=	O
10.0	int
;	O
digs	double
=	O
10.0	int
*	O
digs	double
+	O
(	O
double	O
)	O
(	O
word	pointer
[	O
w	int
]	O
-	O
'0'	O
)	O
;	O
}	O
}	O
digs	double
*=	O
sign	double
;	O
if	O
(	O
places	double
>	O
0.0	int
)	O
digs	double
/=	O
places	double
;	O
if	O
(	O
word	pointer
[	O
w	int
]	O
&&	O
word	pointer
[	O
w	int
]	O
!=	O
' '	O
)	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(pict_autoaxes) bad number for MIN or MAX: %s\n"	pointer
,	O
word	pointer
+	O
3	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
word	pointer
[	O
1	int
]	O
==	O
'A'	O
)	O
{	O
if	O
(	O
word	pointer
[	O
3	int
]	O
==	O
'X'	O
)	O
specxmax	double
=	O
digs	double
;	O
else	O
specymax	double
=	O
digs	double
;	O
}	O
else	O
{	O
if	O
(	O
word	pointer
[	O
3	int
]	O
==	O
'X'	O
)	O
specxmin	double
=	O
digs	double
;	O
else	O
specymin	double
=	O
digs	double
;	O
}	O
}	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
word	pointer
,	O
"NXTICKS"	pointer
,	O
7	int
)	O
||	O
!	O
strncmp	function
(	O
word	pointer
,	O
"NYTICKS"	pointer
,	O
7	int
)	O
)	O
{	O
for	O
(	O
nt	int
=	O
0	int
,	O
w	int
=	O
7	int
;	O
'0'	O
<=	O
word	pointer
[	O
w	int
]	O
&&	O
word	pointer
[	O
w	int
]	O
<=	O
'9'	O
;	O
w	int
++	O
)	O
nt	int
=	O
10	int
*	O
nt	int
+	O
word	pointer
[	O
w	int
]	O
-	O
'0'	O
;	O
if	O
(	O
word	pointer
[	O
w	int
]	O
&&	O
word	pointer
[	O
w	int
]	O
!=	O
' '	O
)	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(pict_autoaxes) bad number of ticks: %s\n"	pointer
,	O
word	pointer
+	O
7	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
word	pointer
[	O
1	int
]	O
==	O
'X'	O
)	O
specxticks	int
=	O
nt	int
;	O
else	O
specyticks	int
=	O
nt	int
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
word	pointer
,	O
"NXDIGITS"	pointer
,	O
8	int
)	O
||	O
!	O
strncmp	function
(	O
word	pointer
,	O
"NYDIGITS"	pointer
,	O
8	int
)	O
)	O
{	O
for	O
(	O
nt	int
=	O
0	int
,	O
w	int
=	O
8	int
;	O
'0'	O
<=	O
word	pointer
[	O
w	int
]	O
&&	O
word	pointer
[	O
w	int
]	O
<=	O
'9'	O
;	O
w	int
++	O
)	O
nt	int
=	O
10	int
*	O
nt	int
+	O
word	pointer
[	O
w	int
]	O
-	O
'0'	O
;	O
if	O
(	O
word	pointer
[	O
w	int
]	O
&&	O
word	pointer
[	O
w	int
]	O
!=	O
' '	O
)	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(pict_autoaxes) bad number of digits: %s\n"	pointer
,	O
word	pointer
+	O
8	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
word	pointer
[	O
1	int
]	O
==	O
'X'	O
)	O
nxdigs	int
=	O
nt	int
;	O
else	O
nydigs	int
=	O
nt	int
;	O
}	O
else	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(pict_autoaxes) bad axes specification: %s\n"	pointer
,	O
word	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
while	O
(	O
axspec	array
[	O
a	double
]	O
==	O
' '	O
)	O
a	double
++	O
;	O
}	O
}	O
else	O
strcpy	function
(	O
as	array
,	O
"00"	pointer
)	O
;	O
for	O
(	O
pp	pointer
=	O
p	double
,	O
totpts	int
=	O
0	int
;	O
pp	pointer
&&	O
pp	pointer
->	O
pict_next	pointer
;	O
pp	pointer
=	O
pp	pointer
->	O
pict_next	pointer
)	O
{	O
if	O
(	O
pp	pointer
->	O
pict_npts	int
)	O
{	O
if	O
(	O
pp	pointer
==	O
p	double
||	O
minx	double
>	O
pp	pointer
->	O
pict_minx	double
)	O
minx	double
=	O
pp	pointer
->	O
pict_minx	double
;	O
if	O
(	O
pp	pointer
==	O
p	double
||	O
miny	double
>	O
pp	pointer
->	O
pict_miny	double
)	O
miny	double
=	O
pp	pointer
->	O
pict_miny	double
;	O
if	O
(	O
pp	pointer
==	O
p	double
||	O
maxx	double
<	O
pp	pointer
->	O
pict_maxx	double
)	O
maxx	double
=	O
pp	pointer
->	O
pict_maxx	double
;	O
if	O
(	O
pp	pointer
==	O
p	double
||	O
maxy	double
<	O
pp	pointer
->	O
pict_maxy	double
)	O
maxy	double
=	O
pp	pointer
->	O
pict_maxy	double
;	O
totpts	int
+=	O
pp	pointer
->	O
pict_npts	int
;	O
}	O
}	O
if	O
(	O
!	O
totpts	int
)	O
{	O
fputs	function
(	O
"(pict_autoaxes) no points.\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
finite	function
(	O
specxmin	double
)	O
)	O
minx	double
=	O
specxmin	double
;	O
else	O
{	O
if	O
(	O
minx	double
>	O
0.0	int
)	O
minx	double
=	O
0.0	int
;	O
}	O
if	O
(	O
finite	function
(	O
specxmax	double
)	O
)	O
maxx	double
=	O
specxmax	double
;	O
else	O
{	O
if	O
(	O
maxx	double
<	O
0.0	int
)	O
maxx	double
=	O
0.0	int
;	O
}	O
minxt	double
=	O
minx	double
;	O
minx	double
-=	O
AXISMARGIN	int
*	O
(	O
maxx	double
-	O
minx	double
)	O
;	O
maxxt	double
=	O
maxx	double
;	O
maxx	double
+=	O
AXISMARGIN	int
*	O
(	O
maxx	double
-	O
minx	double
)	O
;	O
if	O
(	O
finite	function
(	O
specymin	double
)	O
)	O
miny	double
=	O
specymin	double
;	O
else	O
{	O
if	O
(	O
miny	double
>	O
0.0	int
)	O
miny	double
=	O
0.0	int
;	O
}	O
if	O
(	O
finite	function
(	O
specymax	double
)	O
)	O
maxy	double
=	O
specymax	double
;	O
else	O
{	O
if	O
(	O
maxy	double
<	O
0.0	int
)	O
maxy	double
=	O
0.0	int
;	O
}	O
minyt	double
=	O
miny	double
;	O
if	O
(	O
miny	double
!=	O
0.0	int
)	O
miny	double
-=	O
AXISMARGIN	int
*	O
(	O
maxy	double
-	O
miny	double
)	O
;	O
maxyt	double
=	O
maxy	double
;	O
maxy	double
+=	O
AXISMARGIN	int
*	O
(	O
maxy	double
-	O
miny	double
)	O
;	O
if	O
(	O
specxticks	int
>=	O
0	int
)	O
nxticks	int
=	O
specxticks	int
;	O
else	O
nxticks	int
=	O
11	int
;	O
if	O
(	O
nxticks	int
>	O
dap_maxntxt	int
)	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(pict_autoaxes) Too many x-ticks (%d)\n"	pointer
,	O
nxticks	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
specyticks	int
>=	O
0	int
)	O
nyticks	int
=	O
specyticks	int
;	O
else	O
nyticks	int
=	O
11	int
;	O
if	O
(	O
nyticks	int
>	O
dap_maxntxt	int
)	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(pict_autoaxes) Too many y-ticks (%d)\n"	pointer
,	O
nyticks	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
xticklen	double
=	O
-	O
2.0	int
;	O
yticklen	double
=	O
-	O
2.0	int
;	O
if	O
(	O
autopos	int
)	O
{	O
if	O
(	O
autopos	int
==	O
PORTRAIT	int
)	O
{	O
width	double
=	O
PORTWIDTH	int
;	O
height	double
=	O
PORTHEIGHT	int
;	O
}	O
else	O
{	O
width	double
=	O
LANDWIDTH	int
;	O
height	double
=	O
LANDHEIGHT	int
;	O
}	O
xscale	double
=	O
width	double
/	O
(	O
maxx	double
-	O
minx	double
)	O
;	O
yscale	double
=	O
height	double
/	O
(	O
maxy	double
-	O
miny	double
)	O
;	O
}	O
if	O
(	O
as	array
[	O
0	int
]	O
==	O
'='	O
||	O
as	array
[	O
0	int
]	O
==	O
'#'	O
)	O
{	O
bpos	double
=	O
miny	double
;	O
tpos	double
=	O
maxy	double
;	O
xlabpos	double
=	O
0.5	int
*	O
(	O
minx	double
+	O
maxx	double
)	O
;	O
captoff	double
=	O
4.0	int
*	O
p	double
->	O
pict_fs	double
/	O
yscale	double
;	O
}	O
else	O
if	O
(	O
as	array
[	O
0	int
]	O
!=	O
'n'	O
)	O
{	O
switch	O
(	O
as	array
[	O
0	int
]	O
)	O
{	O
case	O
'-'	O
:	O
bpos	double
=	O
miny	double
;	O
xlabpos	double
=	O
0.5	int
*	O
(	O
minx	double
+	O
maxx	double
)	O
;	O
captoff	double
=	O
4.0	int
*	O
p	double
->	O
pict_fs	double
/	O
yscale	double
;	O
break	O
;	O
case	O
'+'	O
:	O
tpos	double
=	O
maxy	double
;	O
xlabpos	double
=	O
0.5	int
*	O
(	O
minx	double
+	O
maxx	double
)	O
;	O
captoff	double
=	O
4.0	int
*	O
p	double
->	O
pict_fs	double
/	O
yscale	double
;	O
break	O
;	O
case	O
'0'	O
:	O
bpos	double
=	O
0.0	int
;	O
if	O
(	O
as	array
[	O
1	int
]	O
==	O
'+'	O
)	O
xlabpos	double
=	O
minx	double
-	O
0.05	int
*	O
(	O
maxx	double
-	O
minx	double
)	O
;	O
else	O
xlabpos	double
=	O
maxx	double
+	O
0.05	int
*	O
(	O
maxx	double
-	O
minx	double
)	O
;	O
captoff	double
=	O
2.0	int
*	O
p	double
->	O
pict_fs	double
/	O
yscale	double
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
dap_err	pointer
,	O
"(pict_autoaxes) Bad axis specification: %s\n"	pointer
,	O
axspec	array
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
as	array
[	O
1	int
]	O
==	O
'='	O
||	O
as	array
[	O
1	int
]	O
==	O
'#'	O
)	O
{	O
lpos	double
=	O
minx	double
;	O
rpos	double
=	O
maxx	double
;	O
ylabpos	double
=	O
0.5	int
*	O
(	O
miny	double
+	O
maxy	double
)	O
;	O
}	O
else	O
if	O
(	O
as	array
[	O
1	int
]	O
!=	O
'n'	O
)	O
{	O
switch	O
(	O
as	array
[	O
1	int
]	O
)	O
{	O
case	O
'-'	O
:	O
lpos	double
=	O
minx	double
;	O
ylabpos	double
=	O
0.5	int
*	O
(	O
miny	double
+	O
maxy	double
)	O
;	O
break	O
;	O
case	O
'+'	O
:	O
rpos	double
=	O
maxx	double
;	O
ylabpos	double
=	O
0.5	int
*	O
(	O
miny	double
+	O
maxy	double
)	O
;	O
break	O
;	O
case	O
'0'	O
:	O
lpos	double
=	O
0.0	int
;	O
if	O
(	O
as	array
[	O
0	int
]	O
==	O
'+'	O
)	O
ylabpos	double
=	O
miny	double
-	O
0.05	int
*	O
(	O
maxy	double
-	O
miny	double
)	O
;	O
else	O
ylabpos	double
=	O
maxy	double
+	O
0.05	int
*	O
(	O
maxy	double
-	O
miny	double
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
dap_err	pointer
,	O
"(autoaxes) Bad axis specification: %s\n"	pointer
,	O
axspec	array
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
for	O
(	O
w	int
=	O
0	int
,	O
xlablines	int
=	O
0	int
;	O
xlab	array
[	O
w	int
]	O
;	O
w	int
++	O
)	O
{	O
if	O
(	O
xlab	array
[	O
w	int
]	O
==	O
'\n'	O
)	O
xlablines	int
++	O
;	O
}	O
captoff	double
+=	O
1.4	int
*	O
xlablines	int
*	O
p	double
->	O
pict_fs	double
/	O
yscale	double
;	O
ticks	array
(	O
xticks	pointer
,	O
minxt	double
,	O
maxxt	double
,	O
nxdigs	int
,	O
xticklen	double
/	O
yscale	double
,	O
nxticks	int
,	O
xlabpos	double
,	O
xlab	array
,	O
xfunct	pointer
)	O
;	O
ticks	array
(	O
yticks	pointer
,	O
minyt	double
,	O
maxyt	double
,	O
nydigs	int
,	O
yticklen	double
/	O
xscale	double
,	O
nyticks	int
,	O
ylabpos	double
,	O
ylab	array
,	O
yfunct	pointer
)	O
;	O
pict_axes	function
(	O
pp	pointer
,	O
minx	double
,	O
maxx	double
,	O
xticks	pointer
,	O
nxticks	int
,	O
miny	double
,	O
maxy	double
,	O
yticks	pointer
,	O
nyticks	int
,	O
as	array
,	O
bpos	double
,	O
lpos	double
,	O
tpos	double
,	O
rpos	double
)	O
;	O
pict_text	function
(	O
pp	pointer
,	O
caption	array
,	O
0.5	int
*	O
(	O
minx	double
+	O
maxx	double
)	O
,	O
miny	double
-	O
captoff	double
,	O
0.0	int
,	O
"ct "	pointer
)	O
;	O
if	O
(	O
autopos	int
)	O
{	O
pict_scale	function
(	O
p	double
,	O
0.5	int
*	O
(	O
minx	double
+	O
maxx	double
)	O
,	O
0.5	int
*	O
(	O
miny	double
+	O
maxy	double
)	O
,	O
xscale	double
,	O
yscale	double
)	O
;	O
pict_translate	function
(	O
p	double
,	O
LEFT	int
+	O
0.5	int
*	O
(	O
width	double
-	O
(	O
minx	double
+	O
maxx	double
)	O
)	O
,	O
BOTTOM	int
+	O
0.5	int
*	O
(	O
height	double
-	O
(	O
miny	double
+	O
maxy	double
)	O
)	O
)	O
;	O
}	O
dap_free	function
(	O
xticks	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
yticks	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
word	pointer
,	O
""	pointer
)	O
;	O
return	O
sqrt	function
(	O
(	O
width	double
*	O
width	double
+	O
height	double
*	O
height	double
)	O
/	O
RADIUSFACTOR	int
)	O
;	O
}	O
void	O
pict_save	function
(	O
pict	struct
*	O
p	double
,	O
int	O
npicts	int
,	O
char	O
*	O
dataset	function
)	O
{	O
pict	struct
*	O
firstp	pointer
;	O
int	O
pn	int
;	O
char	O
strspec	array
[	O
15	int
]	O
;	O
int	O
len	double
;	O
int	O
maxlen	int
;	O
int	O
pict_npts	int
;	O
char	O
pict_type	array
[	O
5	int
]	O
;	O
double	O
pict_dash	double
;	O
double	O
pict_minx	double
,	O
pict_maxx	double
;	O
double	O
pict_miny	double
,	O
pict_maxy	double
;	O
int	O
pict_ntxt	int
;	O
char	O
*	O
pict_font	pointer
;	O
double	O
pict_fs	double
;	O
double	O
pict_lw	double
;	O
double	O
pict_r	double
;	O
double	O
pict_lgray	double
;	O
double	O
pict_fgray	double
;	O
int	O
pict_next	pointer
;	O
double	O
pict_pt	pointer
[	O
2	int
]	O
;	O
int	O
ptn	int
;	O
char	O
*	O
pict_txt	pointer
;	O
double	O
pict_tpt	pointer
[	O
2	int
]	O
;	O
double	O
pict_tang	pointer
;	O
char	O
pict_pos	pointer
[	O
4	int
]	O
;	O
char	O
*	O
outname	pointer
;	O
int	O
pict_patt	pointer
;	O
firstp	pointer
=	O
p	double
;	O
for	O
(	O
p	double
=	O
firstp	pointer
,	O
maxlen	int
=	O
0	int
;	O
p	double
;	O
)	O
{	O
len	double
=	O
strlen	function
(	O
p	double
->	O
pict_font	pointer
)	O
;	O
if	O
(	O
len	double
>	O
maxlen	int
)	O
maxlen	int
=	O
len	double
;	O
for	O
(	O
ptn	int
=	O
0	int
;	O
ptn	int
<	O
p	double
->	O
pict_ntxt	int
;	O
ptn	int
++	O
)	O
{	O
len	double
=	O
strlen	function
(	O
p	double
->	O
pict_txt	pointer
[	O
ptn	int
]	O
)	O
;	O
if	O
(	O
len	double
>	O
maxlen	int
)	O
maxlen	int
=	O
len	double
;	O
}	O
if	O
(	O
npicts	int
)	O
{	O
if	O
(	O
++	O
p	double
>=	O
firstp	pointer
+	O
npicts	int
)	O
break	O
;	O
}	O
else	O
p	double
=	O
p	double
->	O
pict_next	pointer
;	O
}	O
if	O
(	O
maxlen	int
>	O
9998	int
)	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(pict_save) maximum string length too long: %d\n"	pointer
,	O
maxlen	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
pict_font	pointer
=	O
dap_malloc	function
(	O
maxlen	int
+	O
1	int
,	O
""	pointer
)	O
;	O
pict_txt	pointer
=	O
dap_malloc	function
(	O
maxlen	int
+	O
1	int
,	O
""	pointer
)	O
;	O
infile	function
(	O
NULL	O
,	O
NULL	O
)	O
;	O
dap_vd	function
(	O
"pict_npts 0"	pointer
,	O
0	int
)	O
;	O
dap_il	function
(	O
"pict_npts"	pointer
,	O
&	O
pict_npts	int
)	O
;	O
dap_vd	function
(	O
"pict_type 5"	pointer
,	O
0	int
)	O
;	O
dap_sl	function
(	O
"pict_type"	pointer
,	O
pict_type	array
)	O
;	O
dap_vd	function
(	O
"pict_dash -1"	pointer
,	O
0	int
)	O
;	O
dap_dl	function
(	O
"pict_dash"	pointer
,	O
&	O
pict_dash	double
)	O
;	O
dap_vd	function
(	O
"pict_minx -1"	pointer
,	O
0	int
)	O
;	O
dap_dl	function
(	O
"pict_minx"	pointer
,	O
&	O
pict_minx	double
)	O
;	O
dap_vd	function
(	O
"pict_maxx -1"	pointer
,	O
0	int
)	O
;	O
dap_dl	function
(	O
"pict_maxx"	pointer
,	O
&	O
pict_maxx	double
)	O
;	O
dap_vd	function
(	O
"pict_miny -1"	pointer
,	O
0	int
)	O
;	O
dap_dl	function
(	O
"pict_miny"	pointer
,	O
&	O
pict_miny	double
)	O
;	O
dap_vd	function
(	O
"pict_maxy -1"	pointer
,	O
0	int
)	O
;	O
dap_dl	function
(	O
"pict_maxy"	pointer
,	O
&	O
pict_maxy	double
)	O
;	O
dap_vd	function
(	O
"pict_ntxt 0"	pointer
,	O
0	int
)	O
;	O
dap_il	function
(	O
"pict_ntxt"	pointer
,	O
&	O
pict_ntxt	int
)	O
;	O
sprintf	function
(	O
strspec	array
,	O
"pict_font %d"	pointer
,	O
maxlen	int
)	O
;	O
dap_vd	function
(	O
strspec	array
,	O
0	int
)	O
;	O
dap_sl	function
(	O
"pict_font"	pointer
,	O
pict_font	pointer
)	O
;	O
dap_vd	function
(	O
"pict_fs -1"	pointer
,	O
0	int
)	O
;	O
dap_dl	function
(	O
"pict_fs"	pointer
,	O
&	O
pict_fs	double
)	O
;	O
dap_vd	function
(	O
"pict_lw -1"	pointer
,	O
0	int
)	O
;	O
dap_dl	function
(	O
"pict_lw"	pointer
,	O
&	O
pict_lw	double
)	O
;	O
dap_vd	function
(	O
"pict_r -1"	pointer
,	O
0	int
)	O
;	O
dap_dl	function
(	O
"pict_r"	pointer
,	O
&	O
pict_r	double
)	O
;	O
dap_vd	function
(	O
"pict_lgray -1"	pointer
,	O
0	int
)	O
;	O
dap_dl	function
(	O
"pict_lgray"	pointer
,	O
&	O
pict_lgray	double
)	O
;	O
dap_vd	function
(	O
"pict_fgray -1"	pointer
,	O
0	int
)	O
;	O
dap_dl	function
(	O
"pict_fgray"	pointer
,	O
&	O
pict_fgray	double
)	O
;	O
dap_vd	function
(	O
"pict_next 0"	pointer
,	O
0	int
)	O
;	O
dap_il	function
(	O
"pict_next"	pointer
,	O
&	O
pict_next	pointer
)	O
;	O
dap_vd	function
(	O
"pict_patt 0"	pointer
,	O
0	int
)	O
;	O
dap_il	function
(	O
"pict_patt"	pointer
,	O
&	O
pict_patt	pointer
)	O
;	O
outname	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
dataset	function
)	O
+	O
9	int
,	O
""	pointer
)	O
;	O
for	O
(	O
pn	int
=	O
0	int
,	O
p	double
=	O
firstp	pointer
;	O
p	double
;	O
pn	int
++	O
)	O
{	O
if	O
(	O
pn	int
<	O
MAXPICTSAVE	int
)	O
{	O
sprintf	function
(	O
outname	pointer
,	O
"%s.pic%04d"	pointer
,	O
dataset	function
,	O
pn	int
)	O
;	O
outset	function
(	O
outname	pointer
,	O
""	pointer
)	O
;	O
pict_npts	int
=	O
p	double
->	O
pict_npts	int
;	O
strcpy	function
(	O
pict_type	array
,	O
p	double
->	O
pict_type	array
)	O
;	O
pict_dash	double
=	O
p	double
->	O
pict_dash	double
;	O
pict_minx	double
=	O
p	double
->	O
pict_minx	double
;	O
pict_maxx	double
=	O
p	double
->	O
pict_maxx	double
;	O
pict_miny	double
=	O
p	double
->	O
pict_miny	double
;	O
pict_maxy	double
=	O
p	double
->	O
pict_maxy	double
;	O
pict_ntxt	int
=	O
p	double
->	O
pict_ntxt	int
;	O
strcpy	function
(	O
pict_font	pointer
,	O
p	double
->	O
pict_font	pointer
)	O
;	O
pict_fs	double
=	O
p	double
->	O
pict_fs	double
;	O
pict_lw	double
=	O
p	double
->	O
pict_lw	double
;	O
pict_r	double
=	O
p	double
->	O
pict_r	double
;	O
pict_lgray	double
=	O
p	double
->	O
pict_lgray	double
;	O
pict_fgray	double
=	O
p	double
->	O
pict_fgray	double
;	O
if	O
(	O
npicts	int
)	O
{	O
if	O
(	O
pn	int
<	O
npicts	int
-	O
1	int
)	O
{	O
if	O
(	O
p	double
->	O
pict_next	pointer
)	O
pict_next	pointer
=	O
-	O
(	O
p	double
->	O
pict_next	pointer
-	O
firstp	pointer
)	O
;	O
else	O
pict_next	pointer
=	O
-	O
pn	int
;	O
}	O
else	O
pict_next	pointer
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
p	double
->	O
pict_next	pointer
)	O
pict_next	pointer
=	O
pn	int
+	O
1	int
;	O
else	O
pict_next	pointer
=	O
0	int
;	O
}	O
if	O
(	O
p	double
->	O
pict_patt	pointer
)	O
pict_patt	pointer
=	O
1	int
;	O
else	O
pict_patt	pointer
=	O
0	int
;	O
output	function
(	O
)	O
;	O
}	O
else	O
{	O
fputs	function
(	O
"(pict_save) too many picts.\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
npicts	int
)	O
{	O
if	O
(	O
++	O
p	double
>=	O
firstp	pointer
+	O
npicts	int
)	O
break	O
;	O
}	O
else	O
p	double
=	O
p	double
->	O
pict_next	pointer
;	O
}	O
infile	function
(	O
NULL	O
,	O
NULL	O
)	O
;	O
dap_vd	function
(	O
"pict_pt[0] -1 pict_pt[1] - 1"	pointer
,	O
0	int
)	O
;	O
dap_dl	function
(	O
"pict_pt"	pointer
,	O
pict_pt	pointer
)	O
;	O
for	O
(	O
pn	int
=	O
0	int
,	O
p	double
=	O
firstp	pointer
;	O
p	double
;	O
pn	int
++	O
)	O
{	O
sprintf	function
(	O
outname	pointer
,	O
"%s.pts%04d"	pointer
,	O
dataset	function
,	O
pn	int
)	O
;	O
outset	function
(	O
outname	pointer
,	O
""	pointer
)	O
;	O
for	O
(	O
ptn	int
=	O
0	int
;	O
ptn	int
<	O
p	double
->	O
pict_npts	int
;	O
ptn	int
++	O
)	O
{	O
pict_pt	pointer
[	O
0	int
]	O
=	O
p	double
->	O
pict_pt	pointer
[	O
ptn	int
]	O
[	O
0	int
]	O
;	O
pict_pt	pointer
[	O
1	int
]	O
=	O
p	double
->	O
pict_pt	pointer
[	O
ptn	int
]	O
[	O
1	int
]	O
;	O
output	function
(	O
)	O
;	O
}	O
if	O
(	O
npicts	int
)	O
{	O
if	O
(	O
++	O
p	double
>=	O
firstp	pointer
+	O
npicts	int
)	O
break	O
;	O
}	O
else	O
p	double
=	O
p	double
->	O
pict_next	pointer
;	O
}	O
infile	function
(	O
NULL	O
,	O
NULL	O
)	O
;	O
sprintf	function
(	O
strspec	array
,	O
"pict_txt %d"	pointer
,	O
maxlen	int
)	O
;	O
dap_vd	function
(	O
strspec	array
,	O
0	int
)	O
;	O
dap_sl	function
(	O
"pict_txt"	pointer
,	O
pict_txt	pointer
)	O
;	O
dap_vd	function
(	O
"pict_tpt[0] -1 pict_tpt[1] -1"	pointer
,	O
0	int
)	O
;	O
dap_dl	function
(	O
"pict_tpt"	pointer
,	O
pict_tpt	pointer
)	O
;	O
dap_vd	function
(	O
"pict_tang -1"	pointer
,	O
0	int
)	O
;	O
dap_dl	function
(	O
"pict_tang"	pointer
,	O
&	O
pict_tang	pointer
)	O
;	O
dap_vd	function
(	O
"pict_pos 3"	pointer
,	O
0	int
)	O
;	O
dap_sl	function
(	O
"pict_pos"	pointer
,	O
pict_pos	pointer
)	O
;	O
for	O
(	O
pn	int
=	O
0	int
,	O
p	double
=	O
firstp	pointer
;	O
p	double
;	O
pn	int
++	O
)	O
{	O
sprintf	function
(	O
outname	pointer
,	O
"%s.txt%04d"	pointer
,	O
dataset	function
,	O
pn	int
)	O
;	O
outset	function
(	O
outname	pointer
,	O
""	pointer
)	O
;	O
for	O
(	O
ptn	int
=	O
0	int
;	O
ptn	int
<	O
p	double
->	O
pict_ntxt	int
;	O
ptn	int
++	O
)	O
{	O
strcpy	function
(	O
pict_txt	pointer
,	O
p	double
->	O
pict_txt	pointer
[	O
ptn	int
]	O
)	O
;	O
pict_tpt	pointer
[	O
0	int
]	O
=	O
p	double
->	O
pict_tpt	pointer
[	O
ptn	int
]	O
[	O
0	int
]	O
;	O
pict_tpt	pointer
[	O
1	int
]	O
=	O
p	double
->	O
pict_tpt	pointer
[	O
ptn	int
]	O
[	O
1	int
]	O
;	O
pict_tang	pointer
=	O
p	double
->	O
pict_tang	pointer
[	O
ptn	int
]	O
;	O
strcpy	function
(	O
pict_pos	pointer
,	O
p	double
->	O
pict_pos	pointer
[	O
ptn	int
]	O
)	O
;	O
output	function
(	O
)	O
;	O
}	O
if	O
(	O
npicts	int
)	O
{	O
if	O
(	O
++	O
p	double
>=	O
firstp	pointer
+	O
npicts	int
)	O
break	O
;	O
}	O
else	O
p	double
=	O
p	double
->	O
pict_next	pointer
;	O
}	O
for	O
(	O
pn	int
=	O
0	int
,	O
p	double
=	O
firstp	pointer
;	O
p	double
;	O
pn	int
++	O
)	O
{	O
if	O
(	O
p	double
->	O
pict_patt	pointer
)	O
{	O
sprintf	function
(	O
outname	pointer
,	O
"%s.pat%04d"	pointer
,	O
dataset	function
,	O
pn	int
++	O
)	O
;	O
pict_save	function
(	O
p	double
->	O
pict_patt	pointer
,	O
0	int
,	O
outname	pointer
)	O
;	O
}	O
if	O
(	O
npicts	int
)	O
{	O
if	O
(	O
++	O
p	double
>=	O
firstp	pointer
+	O
npicts	int
)	O
break	O
;	O
}	O
else	O
p	double
=	O
p	double
->	O
pict_next	pointer
;	O
}	O
dap_free	function
(	O
outname	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
pict_font	pointer
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
pict_txt	pointer
,	O
""	pointer
)	O
;	O
}	O
pict	struct
*	O
pict_rest	function
(	O
char	O
*	O
dataset	function
)	O
{	O
int	O
npict	int
;	O
pict	struct
*	O
p	double
;	O
char	O
*	O
inname	pointer
;	O
int	O
pn	int
;	O
int	O
ptn	int
;	O
int	O
pnext	int
;	O
int	O
npicts	int
;	O
int	O
pict_npts	int
;	O
int	O
pict_type	array
;	O
int	O
pict_dash	double
;	O
int	O
pict_minx	double
,	O
pict_maxx	double
;	O
int	O
pict_miny	double
,	O
pict_maxy	double
;	O
int	O
pict_ntxt	int
;	O
int	O
pict_font	pointer
;	O
int	O
pict_fs	double
;	O
int	O
pict_lw	double
;	O
int	O
pict_r	double
;	O
int	O
pict_lgray	double
;	O
int	O
pict_fgray	double
;	O
int	O
pict_pt	pointer
;	O
int	O
pict_txt	pointer
;	O
int	O
pict_tpt	pointer
;	O
int	O
pict_tang	pointer
;	O
int	O
pict_pos	pointer
;	O
int	O
pict_next	pointer
;	O
int	O
pict_patt	pointer
;	O
int	O
dim	pointer
;	O
int	O
npts	int
;	O
double	O
*	O
dblmem	pointer
;	O
char	O
*	O
charmem	pointer
;	O
inname	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
dataset	function
)	O
+	O
9	int
,	O
""	pointer
)	O
;	O
for	O
(	O
pn	int
=	O
0	int
,	O
npicts	int
=	O
0	int
;	O
;	O
npicts	int
++	O
)	O
{	O
sprintf	function
(	O
inname	pointer
,	O
"%s.pic%04d"	pointer
,	O
dataset	function
,	O
pn	int
)	O
;	O
inset	function
(	O
inname	pointer
)	O
;	O
step	function
(	O
)	O
;	O
if	O
(	O
(	O
pict_next	pointer
=	O
dap_varnum	function
(	O
"pict_next"	pointer
)	O
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(pict_rest) no pict_next in %s\n"	pointer
,	O
inname	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
pnext	int
=	O
dap_obs	array
[	O
0	int
]	O
.	O
do_int	pointer
[	O
pict_next	pointer
]	O
;	O
if	O
(	O
!	O
pnext	int
)	O
break	O
;	O
if	O
(	O
pnext	int
>	O
0	int
)	O
pn	int
=	O
pnext	int
;	O
else	O
if	O
(	O
pnext	int
<	O
0	int
)	O
++	O
pn	int
;	O
}	O
npicts	int
++	O
;	O
p	double
=	O
(	O
pict	struct
*	O
)	O
dap_malloc	function
(	O
sizeof	O
(	O
pict	struct
)	O
*	O
npicts	int
,	O
""	pointer
)	O
;	O
for	O
(	O
pn	int
=	O
0	int
;	O
pn	int
<	O
npicts	int
;	O
pn	int
++	O
)	O
{	O
sprintf	function
(	O
inname	pointer
,	O
"%s.pic%04d"	pointer
,	O
dataset	function
,	O
pn	int
)	O
;	O
inset	function
(	O
inname	pointer
)	O
;	O
step	function
(	O
)	O
;	O
if	O
(	O
(	O
pict_npts	int
=	O
dap_varnum	function
(	O
"pict_npts"	pointer
)	O
)	O
<	O
0	int
)	O
{	O
fputs	function
(	O
"(pict_rest) missing pict_npts\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
p	double
[	O
pn	int
]	O
.	O
pict_npts	int
=	O
dap_obs	array
[	O
0	int
]	O
.	O
do_int	pointer
[	O
pict_npts	int
]	O
;	O
if	O
(	O
(	O
pict_type	array
=	O
dap_varnum	function
(	O
"pict_type"	pointer
)	O
)	O
<	O
0	int
)	O
{	O
fputs	function
(	O
"(pict_rest) missing pict_type\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
strcpy	function
(	O
p	double
[	O
pn	int
]	O
.	O
pict_type	array
,	O
dap_obs	array
[	O
0	int
]	O
.	O
do_str	pointer
[	O
pict_type	array
]	O
)	O
;	O
if	O
(	O
(	O
pict_dash	double
=	O
dap_varnum	function
(	O
"pict_dash"	pointer
)	O
)	O
<	O
0	int
)	O
{	O
fputs	function
(	O
"(pict_rest) missing pict_dash\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
p	double
[	O
pn	int
]	O
.	O
pict_dash	double
=	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
pict_dash	double
]	O
;	O
if	O
(	O
(	O
pict_minx	double
=	O
dap_varnum	function
(	O
"pict_minx"	pointer
)	O
)	O
<	O
0	int
)	O
{	O
fputs	function
(	O
"(pict_rest) missing pict_minx\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
p	double
[	O
pn	int
]	O
.	O
pict_minx	double
=	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
pict_minx	double
]	O
;	O
if	O
(	O
(	O
pict_maxx	double
=	O
dap_varnum	function
(	O
"pict_maxx"	pointer
)	O
)	O
<	O
0	int
)	O
{	O
fputs	function
(	O
"(pict_rest) missing pict_maxx\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
p	double
[	O
pn	int
]	O
.	O
pict_maxx	double
=	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
pict_maxx	double
]	O
;	O
if	O
(	O
(	O
pict_miny	double
=	O
dap_varnum	function
(	O
"pict_miny"	pointer
)	O
)	O
<	O
0	int
)	O
{	O
fputs	function
(	O
"(pict_rest) missing pict_miny\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
p	double
[	O
pn	int
]	O
.	O
pict_miny	double
=	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
pict_miny	double
]	O
;	O
if	O
(	O
(	O
pict_maxy	double
=	O
dap_varnum	function
(	O
"pict_maxy"	pointer
)	O
)	O
<	O
0	int
)	O
{	O
fputs	function
(	O
"(pict_rest) missing pict_maxy\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
p	double
[	O
pn	int
]	O
.	O
pict_maxy	double
=	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
pict_maxy	double
]	O
;	O
if	O
(	O
(	O
pict_ntxt	int
=	O
dap_varnum	function
(	O
"pict_ntxt"	pointer
)	O
)	O
<	O
0	int
)	O
{	O
fputs	function
(	O
"(pict_rest) missing pict_ntxt\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
p	double
[	O
pn	int
]	O
.	O
pict_ntxt	int
=	O
dap_obs	array
[	O
0	int
]	O
.	O
do_int	pointer
[	O
pict_ntxt	int
]	O
;	O
if	O
(	O
(	O
pict_font	pointer
=	O
dap_varnum	function
(	O
"pict_font"	pointer
)	O
)	O
<	O
0	int
)	O
{	O
fputs	function
(	O
"(pict_rest) missing pict_font\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
p	double
[	O
pn	int
]	O
.	O
pict_font	pointer
=	O
dap_malloc	function
(	O
strlen	function
(	O
dap_obs	array
[	O
0	int
]	O
.	O
do_str	pointer
[	O
pict_font	pointer
]	O
)	O
+	O
1	int
,	O
""	pointer
)	O
;	O
strcpy	function
(	O
p	double
[	O
pn	int
]	O
.	O
pict_font	pointer
,	O
dap_obs	array
[	O
0	int
]	O
.	O
do_str	pointer
[	O
pict_font	pointer
]	O
)	O
;	O
if	O
(	O
(	O
pict_fs	double
=	O
dap_varnum	function
(	O
"pict_fs"	pointer
)	O
)	O
<	O
0	int
)	O
{	O
fputs	function
(	O
"(pict_rest) missing pict_fs\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
p	double
[	O
pn	int
]	O
.	O
pict_fs	double
=	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
pict_fs	double
]	O
;	O
if	O
(	O
(	O
pict_lw	double
=	O
dap_varnum	function
(	O
"pict_lw"	pointer
)	O
)	O
<	O
0	int
)	O
{	O
fputs	function
(	O
"(pict_rest) missing pict_lw\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
p	double
[	O
pn	int
]	O
.	O
pict_lw	double
=	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
pict_lw	double
]	O
;	O
if	O
(	O
(	O
pict_r	double
=	O
dap_varnum	function
(	O
"pict_r"	pointer
)	O
)	O
<	O
0	int
)	O
{	O
fputs	function
(	O
"(pict_rest) missing pict_r\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
p	double
[	O
pn	int
]	O
.	O
pict_r	double
=	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
pict_r	double
]	O
;	O
if	O
(	O
(	O
pict_lgray	double
=	O
dap_varnum	function
(	O
"pict_lgray"	pointer
)	O
)	O
<	O
0	int
)	O
{	O
fputs	function
(	O
"(pict_rest) missing pict_lgray\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
p	double
[	O
pn	int
]	O
.	O
pict_lgray	double
=	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
pict_lgray	double
]	O
;	O
if	O
(	O
(	O
pict_fgray	double
=	O
dap_varnum	function
(	O
"pict_fgray"	pointer
)	O
)	O
<	O
0	int
)	O
{	O
fputs	function
(	O
"(pict_rest) missing pict_fgray\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
p	double
[	O
pn	int
]	O
.	O
pict_fgray	double
=	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
pict_fgray	double
]	O
;	O
if	O
(	O
(	O
pict_next	pointer
=	O
dap_varnum	function
(	O
"pict_next"	pointer
)	O
)	O
<	O
0	int
)	O
{	O
fputs	function
(	O
"(pict_rest) missing pict_next\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
pnext	int
=	O
dap_obs	array
[	O
0	int
]	O
.	O
do_int	pointer
[	O
pict_next	pointer
]	O
;	O
if	O
(	O
pnext	int
<	O
0	int
)	O
{	O
if	O
(	O
pnext	int
==	O
-	O
pn	int
)	O
p	double
[	O
pn	int
]	O
.	O
pict_next	pointer
=	O
NULL	O
;	O
else	O
p	double
[	O
pn	int
]	O
.	O
pict_next	pointer
=	O
p	double
-	O
pnext	int
;	O
}	O
else	O
if	O
(	O
pnext	int
)	O
p	double
[	O
pn	int
]	O
.	O
pict_next	pointer
=	O
p	double
+	O
pn	int
+	O
1	int
;	O
else	O
p	double
[	O
pn	int
]	O
.	O
pict_next	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
pict_patt	pointer
=	O
dap_varnum	function
(	O
"pict_patt"	pointer
)	O
)	O
<	O
0	int
)	O
{	O
fputs	function
(	O
"(pict_rest) missing pict_patt\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
dap_obs	array
[	O
0	int
]	O
.	O
do_int	pointer
[	O
pict_patt	pointer
]	O
)	O
{	O
sprintf	function
(	O
inname	pointer
,	O
"%s.pat%04d"	pointer
,	O
dataset	function
,	O
pn	int
)	O
;	O
p	double
[	O
pn	int
]	O
.	O
pict_patt	pointer
=	O
pict_rest	function
(	O
inname	pointer
)	O
;	O
}	O
else	O
p	double
[	O
pn	int
]	O
.	O
pict_patt	pointer
=	O
NULL	O
;	O
}	O
for	O
(	O
pn	int
=	O
0	int
;	O
pn	int
<	O
npicts	int
;	O
pn	int
++	O
)	O
{	O
sprintf	function
(	O
inname	pointer
,	O
"%s.pts%04d"	pointer
,	O
dataset	function
,	O
pn	int
)	O
;	O
inset	function
(	O
inname	pointer
)	O
;	O
if	O
(	O
(	O
pict_pt	pointer
=	O
dap_arrnum	function
(	O
"pict_pt"	pointer
,	O
&	O
dim	pointer
)	O
)	O
<	O
0	int
)	O
{	O
fputs	function
(	O
"(pict_rest) missing pict_pt\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
dim	pointer
!=	O
2	int
)	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(pict_rest) bad dimension for pict_pt: %d\n"	pointer
,	O
dim	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
npts	int
=	O
p	double
[	O
pn	int
]	O
.	O
pict_npts	int
;	O
for	O
(	O
ptn	int
=	O
0	int
,	O
p	double
[	O
pn	int
]	O
.	O
pict_npts	int
=	O
0	int
;	O
ptn	int
<	O
npts	int
;	O
ptn	int
++	O
)	O
{	O
step	function
(	O
)	O
;	O
pict_point	function
(	O
p	double
+	O
pn	int
,	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
pict_pt	pointer
]	O
,	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
pict_pt	pointer
+	O
1	int
]	O
)	O
;	O
}	O
}	O
for	O
(	O
pn	int
=	O
0	int
;	O
pn	int
<	O
npicts	int
;	O
pn	int
++	O
)	O
{	O
sprintf	function
(	O
inname	pointer
,	O
"%s.txt%04d"	pointer
,	O
dataset	function
,	O
pn	int
)	O
;	O
inset	function
(	O
inname	pointer
)	O
;	O
npts	int
=	O
p	double
[	O
pn	int
]	O
.	O
pict_ntxt	int
;	O
p	double
[	O
pn	int
]	O
.	O
pict_txt	pointer
=	O
(	O
char	O
*	O
*	O
)	O
dap_malloc	function
(	O
sizeof	O
(	O
char	O
*	O
)	O
*	O
dap_maxntxt	int
,	O
"dap_maxntxt"	pointer
)	O
;	O
dblmem	pointer
=	O
(	O
double	O
*	O
)	O
dap_malloc	function
(	O
sizeof	O
(	O
double	O
)	O
*	O
2	int
*	O
dap_maxntxt	int
,	O
"dap_maxntxt"	pointer
)	O
;	O
p	double
[	O
pn	int
]	O
.	O
pict_tpt	pointer
=	O
(	O
double	O
*	O
*	O
)	O
dap_malloc	function
(	O
sizeof	O
(	O
double	O
*	O
)	O
*	O
dap_maxntxt	int
,	O
"dap_maxntxt"	pointer
)	O
;	O
for	O
(	O
ptn	int
=	O
0	int
;	O
ptn	int
<	O
dap_maxntxt	int
;	O
ptn	int
++	O
)	O
p	double
[	O
pn	int
]	O
.	O
pict_tpt	pointer
[	O
ptn	int
]	O
=	O
dblmem	pointer
+	O
2	int
*	O
ptn	int
;	O
p	double
[	O
pn	int
]	O
.	O
pict_tang	pointer
=	O
(	O
double	O
*	O
)	O
dap_malloc	function
(	O
sizeof	O
(	O
double	O
)	O
*	O
dap_maxntxt	int
,	O
"dap_maxntxt"	pointer
)	O
;	O
charmem	pointer
=	O
dap_malloc	function
(	O
3	int
*	O
dap_maxntxt	int
,	O
"dap_maxntxt"	pointer
)	O
;	O
p	double
[	O
pn	int
]	O
.	O
pict_pos	pointer
=	O
(	O
char	O
*	O
*	O
)	O
dap_malloc	function
(	O
sizeof	O
(	O
char	O
*	O
)	O
*	O
dap_maxntxt	int
,	O
"dap_maxntxt"	pointer
)	O
;	O
for	O
(	O
ptn	int
=	O
0	int
;	O
ptn	int
<	O
dap_maxntxt	int
;	O
ptn	int
++	O
)	O
p	double
[	O
pn	int
]	O
.	O
pict_pos	pointer
[	O
ptn	int
]	O
=	O
charmem	pointer
+	O
3	int
*	O
ptn	int
;	O
if	O
(	O
(	O
pict_txt	pointer
=	O
dap_varnum	function
(	O
"pict_txt"	pointer
)	O
)	O
<	O
0	int
)	O
{	O
fputs	function
(	O
"(pict_rest) missing pict_txt\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
(	O
pict_tpt	pointer
=	O
dap_arrnum	function
(	O
"pict_tpt"	pointer
,	O
&	O
dim	pointer
)	O
)	O
<	O
0	int
)	O
{	O
fputs	function
(	O
"(pict_rest) missing pict_tpt\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
dim	pointer
!=	O
2	int
)	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(pict_rest) bad dimension for pict_tpt: %d\n"	pointer
,	O
dim	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
(	O
pict_tang	pointer
=	O
dap_varnum	function
(	O
"pict_tang"	pointer
)	O
)	O
<	O
0	int
)	O
{	O
fputs	function
(	O
"(pict_rest) missing pict_tang\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
(	O
pict_pos	pointer
=	O
dap_varnum	function
(	O
"pict_pos"	pointer
)	O
)	O
<	O
0	int
)	O
{	O
fputs	function
(	O
"(pict_rest) missing pict_pos\n"	pointer
,	O
dap_err	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
for	O
(	O
ptn	int
=	O
0	int
,	O
p	double
[	O
pn	int
]	O
.	O
pict_ntxt	int
=	O
0	int
;	O
ptn	int
<	O
npts	int
;	O
ptn	int
++	O
)	O
{	O
step	function
(	O
)	O
;	O
pict_text	function
(	O
p	double
+	O
pn	int
,	O
dap_obs	array
[	O
0	int
]	O
.	O
do_str	pointer
[	O
pict_txt	pointer
]	O
,	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
pict_tpt	pointer
]	O
,	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
pict_tpt	pointer
+	O
1	int
]	O
,	O
dap_obs	array
[	O
0	int
]	O
.	O
do_dbl	pointer
[	O
pict_tang	pointer
]	O
,	O
dap_obs	array
[	O
0	int
]	O
.	O
do_str	pointer
[	O
pict_pos	pointer
]	O
)	O
;	O
}	O
}	O
dap_free	function
(	O
inname	pointer
,	O
""	pointer
)	O
;	O
return	O
p	double
;	O
}	O
