struct	O
transtab	struct
sysev_transtab	array
[	O
]	O
=	O
{	O
{	O
"ACCESS"	pointer
,	O
IN_ACCESS	int
}	O
,	O
{	O
"ATTRIB"	pointer
,	O
IN_ATTRIB	int
}	O
,	O
{	O
"CLOSE_WRITE"	pointer
,	O
IN_CLOSE_WRITE	int
}	O
,	O
{	O
"CLOSE_NOWRITE"	pointer
,	O
IN_CLOSE_NOWRITE	int
}	O
,	O
{	O
"CREATE"	pointer
,	O
IN_CREATE	int
}	O
,	O
{	O
"DELETE"	pointer
,	O
IN_DELETE	int
}	O
,	O
{	O
"MODIFY"	pointer
,	O
IN_MODIFY	int
}	O
,	O
{	O
"MOVED_FROM"	pointer
,	O
IN_MOVED_FROM	int
}	O
,	O
{	O
"MOVED_TO"	pointer
,	O
IN_MOVED_TO	int
}	O
,	O
{	O
"OPEN"	pointer
,	O
IN_OPEN	int
}	O
,	O
{	O
0	int
}	O
}	O
;	O
event_mask	struct
genev_xlat	array
[	O
]	O
=	O
{	O
{	O
GENEV_CREATE	int
,	O
IN_CREATE	int
|	O
IN_MOVED_TO	int
}	O
,	O
{	O
GENEV_WRITE	int
,	O
IN_MODIFY	int
|	O
IN_CLOSE_WRITE	int
}	O
,	O
{	O
GENEV_ATTRIB	int
,	O
IN_ATTRIB	int
}	O
,	O
{	O
GENEV_DELETE	int
,	O
IN_DELETE	int
|	O
IN_MOVED_FROM	int
}	O
,	O
{	O
0	int
}	O
}	O
;	O
static	O
int	O
ifd	int
;	O
static	O
struct	O
watchpoint	struct
*	O
*	O
wptab	pointer
;	O
static	O
size_t	long
wpsize	long
;	O
static	O
int	O
wpreg	function
(	O
int	O
wd	int
,	O
struct	O
watchpoint	struct
*	O
wpt	pointer
)	O
{	O
if	O
(	O
wd	int
<	O
0	int
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
wd	int
>=	O
wpsize	long
)	O
{	O
size_t	long
n	long
=	O
wpsize	long
;	O
struct	O
watchpoint	struct
*	O
*	O
p	pointer
;	O
if	O
(	O
n	long
==	O
0	int
)	O
n	long
=	O
sysconf	function
(	O
_SC_OPEN_MAX	int
)	O
;	O
while	O
(	O
wd	int
>=	O
n	long
)	O
{	O
n	long
*=	O
2	int
;	O
if	O
(	O
n	long
<	O
wpsize	long
)	O
{	O
diag	function
(	O
LOG_CRIT	int
,	O
_	O
(	O
"can't allocate memory for fd %d"	pointer
)	O
,	O
wd	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
p	pointer
=	O
realloc	function
(	O
wptab	pointer
,	O
n	long
*	O
sizeof	O
(	O
wptab	pointer
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
diag	function
(	O
LOG_CRIT	int
,	O
_	O
(	O
"can't allocate memory for fd %d"	pointer
)	O
,	O
wd	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
memset	function
(	O
p	pointer
+	O
wpsize	long
,	O
0	int
,	O
(	O
n	long
-	O
wpsize	long
)	O
*	O
sizeof	O
(	O
wptab	pointer
[	O
0	int
]	O
)	O
)	O
;	O
wptab	pointer
=	O
p	pointer
;	O
wpsize	long
=	O
n	long
;	O
}	O
watchpoint_ref	function
(	O
wpt	pointer
)	O
;	O
wptab	pointer
[	O
wd	int
]	O
=	O
wpt	pointer
;	O
return	O
0	int
;	O
}	O
static	O
void	O
wpunreg	function
(	O
int	O
wd	int
)	O
{	O
if	O
(	O
wd	int
<	O
0	int
||	O
wd	int
>	O
wpsize	long
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
wptab	pointer
[	O
wd	int
]	O
)	O
{	O
watchpoint_unref	function
(	O
wptab	pointer
[	O
wd	int
]	O
)	O
;	O
wptab	pointer
[	O
wd	int
]	O
=	O
NULL	O
;	O
}	O
}	O
static	O
struct	O
watchpoint	struct
*	O
wpget	function
(	O
int	O
wd	int
)	O
{	O
if	O
(	O
wd	int
>=	O
0	int
&&	O
wd	int
<	O
wpsize	long
)	O
return	O
wptab	pointer
[	O
wd	int
]	O
;	O
return	O
NULL	O
;	O
}	O
int	O
sysev_filemask	function
(	O
struct	O
watchpoint	struct
*	O
dp	pointer
)	O
{	O
return	O
0	int
;	O
}	O
void	O
sysev_init	function
(	O
)	O
{	O
ifd	int
=	O
inotify_init	function
(	O
)	O
;	O
if	O
(	O
ifd	int
==	O
-	O
1	int
)	O
{	O
diag	function
(	O
LOG_CRIT	int
,	O
"inotify_init: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
int	O
sysev_add_watch	function
(	O
struct	O
watchpoint	struct
*	O
wpt	pointer
,	O
event_mask	struct
mask	struct
)	O
{	O
int	O
wd	int
=	O
inotify_add_watch	function
(	O
ifd	int
,	O
wpt	pointer
->	O
dirname	pointer
,	O
mask	struct
.	O
sys_mask	int
)	O
;	O
if	O
(	O
wd	int
>=	O
0	int
&&	O
wpreg	function
(	O
wd	int
,	O
wpt	pointer
)	O
)	O
{	O
inotify_rm_watch	function
(	O
ifd	int
,	O
wd	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
wd	int
;	O
}	O
void	O
sysev_rm_watch	function
(	O
struct	O
watchpoint	struct
*	O
wpt	pointer
)	O
{	O
wpunreg	function
(	O
wpt	pointer
->	O
wd	int
)	O
;	O
inotify_rm_watch	function
(	O
ifd	int
,	O
wpt	pointer
->	O
wd	int
)	O
;	O
}	O
void	O
remove_watcher	function
(	O
const	O
char	O
*	O
dir	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
watchpoint	struct
*	O
wpt	pointer
;	O
char	O
*	O
fullname	pointer
=	O
mkfilename	function
(	O
dir	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
!	O
fullname	pointer
)	O
{	O
diag	function
(	O
LOG_EMERG	int
,	O
"not enough memory: "	pointer
"cannot look up a watcher to delete"	pointer
)	O
;	O
return	O
;	O
}	O
wpt	pointer
=	O
watchpoint_lookup	function
(	O
fullname	pointer
)	O
;	O
free	function
(	O
fullname	pointer
)	O
;	O
if	O
(	O
wpt	pointer
)	O
watchpoint_suspend	function
(	O
wpt	pointer
)	O
;	O
}	O
static	O
void	O
process_event	function
(	O
struct	O
inotify_event	struct
*	O
ep	pointer
)	O
{	O
struct	O
watchpoint	struct
*	O
wpt	pointer
;	O
char	O
*	O
dirname	pointer
,	O
*	O
filename	pointer
;	O
wpt	pointer
=	O
wpget	function
(	O
ep	pointer
->	O
wd	int
)	O
;	O
if	O
(	O
!	O
wpt	pointer
)	O
{	O
if	O
(	O
!	O
(	O
ep	pointer
->	O
mask	struct
&	O
IN_IGNORED	int
)	O
)	O
diag	function
(	O
LOG_NOTICE	int
,	O
_	O
(	O
"watcher not found: %d (%s)"	pointer
)	O
,	O
ep	pointer
->	O
wd	int
,	O
ep	pointer
->	O
name	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
ep	pointer
->	O
mask	struct
&	O
IN_IGNORED	int
)	O
{	O
diag	function
(	O
LOG_NOTICE	int
,	O
_	O
(	O
"%s deleted"	pointer
)	O
,	O
wpt	pointer
->	O
dirname	pointer
)	O
;	O
watchpoint_suspend	function
(	O
wpt	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
ep	pointer
->	O
mask	struct
&	O
IN_Q_OVERFLOW	int
)	O
{	O
diag	function
(	O
LOG_NOTICE	int
,	O
"event queue overflow"	pointer
)	O
;	O
return	O
;	O
}	O
else	O
if	O
(	O
ep	pointer
->	O
mask	struct
&	O
IN_UNMOUNT	int
)	O
{	O
return	O
;	O
}	O
else	O
if	O
(	O
!	O
wpt	pointer
)	O
{	O
if	O
(	O
ep	pointer
->	O
name	pointer
)	O
diag	function
(	O
LOG_NOTICE	int
,	O
"unrecognized event %x"	pointer
"for %s"	pointer
,	O
ep	pointer
->	O
mask	struct
,	O
ep	pointer
->	O
name	pointer
)	O
;	O
else	O
diag	function
(	O
LOG_NOTICE	int
,	O
"unrecognized event %x"	pointer
,	O
ep	pointer
->	O
mask	struct
)	O
;	O
return	O
;	O
}	O
ev_log	function
(	O
ep	pointer
->	O
mask	struct
,	O
wpt	pointer
)	O
;	O
if	O
(	O
ep	pointer
->	O
mask	struct
&	O
IN_CREATE	int
)	O
{	O
debug	O
(	O
1	int
,	O
(	O
"%s/%s created"	pointer
,	O
wpt	pointer
->	O
dirname	pointer
,	O
ep	pointer
->	O
name	pointer
)	O
)	O
;	O
if	O
(	O
check_new_watcher	function
(	O
wpt	pointer
->	O
dirname	pointer
,	O
ep	pointer
->	O
name	pointer
)	O
>	O
0	int
)	O
return	O
;	O
}	O
if	O
(	O
ep	pointer
->	O
len	long
==	O
0	int
)	O
filename	pointer
=	O
split_pathname	function
(	O
wpt	pointer
,	O
&	O
dirname	pointer
)	O
;	O
else	O
{	O
dirname	pointer
=	O
wpt	pointer
->	O
dirname	pointer
;	O
filename	pointer
=	O
ep	pointer
->	O
name	pointer
;	O
}	O
watchpoint_run_handlers	function
(	O
wpt	pointer
,	O
ep	pointer
->	O
mask	struct
,	O
dirname	pointer
,	O
filename	pointer
)	O
;	O
unsplit_pathname	function
(	O
wpt	pointer
)	O
;	O
if	O
(	O
ep	pointer
->	O
mask	struct
&	O
(	O
IN_DELETE	int
|	O
IN_MOVED_FROM	int
)	O
)	O
{	O
debug	O
(	O
1	int
,	O
(	O
"%s/%s deleted"	pointer
,	O
wpt	pointer
->	O
dirname	pointer
,	O
ep	pointer
->	O
name	pointer
)	O
)	O
;	O
remove_watcher	function
(	O
wpt	pointer
->	O
dirname	pointer
,	O
ep	pointer
->	O
name	pointer
)	O
;	O
}	O
}	O
int	O
sysev_select	function
(	O
)	O
{	O
char	O
buffer	array
[	O
4096	int
]	O
;	O
struct	O
inotify_event	struct
*	O
ep	pointer
;	O
size_t	long
size	long
;	O
ssize_t	long
rdbytes	long
;	O
rdbytes	long
=	O
read	function
(	O
ifd	int
,	O
buffer	array
,	O
sizeof	O
(	O
buffer	array
)	O
)	O
;	O
if	O
(	O
rdbytes	long
==	O
-	O
1	int
)	O
{	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
{	O
if	O
(	O
!	O
signo	int
||	O
signo	int
==	O
SIGCHLD	int
||	O
signo	int
==	O
SIGALRM	int
)	O
return	O
0	int
;	O
diag	function
(	O
LOG_NOTICE	int
,	O
"got signal %d"	pointer
,	O
signo	int
)	O
;	O
return	O
1	int
;	O
}	O
diag	function
(	O
LOG_NOTICE	int
,	O
"read failed: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
1	int
;	O
}	O
ep	pointer
=	O
(	O
struct	O
inotify_event	struct
*	O
)	O
buffer	array
;	O
while	O
(	O
rdbytes	long
)	O
{	O
if	O
(	O
ep	pointer
->	O
wd	int
>=	O
0	int
)	O
process_event	function
(	O
ep	pointer
)	O
;	O
size	long
=	O
sizeof	O
(	O
*	O
ep	pointer
)	O
+	O
ep	pointer
->	O
len	long
;	O
ep	pointer
=	O
(	O
struct	O
inotify_event	struct
*	O
)	O
(	O
(	O
char	O
*	O
)	O
ep	pointer
+	O
size	long
)	O
;	O
rdbytes	long
-=	O
size	long
;	O
}	O
return	O
0	int
;	O
}	O
