const	O
char	O
*	O
const	O
format_language	array
[	O
NFORMATS	int
]	O
=	O
{	O
"c"	pointer
,	O
"objc"	pointer
,	O
"sh"	pointer
,	O
"python"	pointer
,	O
"python-brace"	pointer
,	O
"lisp"	pointer
,	O
"elisp"	pointer
,	O
"librep"	pointer
,	O
"scheme"	pointer
,	O
"smalltalk"	pointer
,	O
"java"	pointer
,	O
"csharp"	pointer
,	O
"awk"	pointer
,	O
"object-pascal"	pointer
,	O
"ycp"	pointer
,	O
"tcl"	pointer
,	O
"perl"	pointer
,	O
"perl-brace"	pointer
,	O
"php"	pointer
,	O
"gcc-internal"	pointer
,	O
"gfc-internal"	pointer
,	O
"qt"	pointer
,	O
"qt-plural"	pointer
,	O
"kde"	pointer
,	O
"kde-kuit"	pointer
,	O
"boost"	pointer
,	O
"lua"	pointer
,	O
"javascript"	pointer
}	O
;	O
const	O
char	O
*	O
const	O
format_language_pretty	array
[	O
NFORMATS	int
]	O
=	O
{	O
"C"	pointer
,	O
"Objective C"	pointer
,	O
"Shell"	pointer
,	O
"Python"	pointer
,	O
"Python brace"	pointer
,	O
"Lisp"	pointer
,	O
"Emacs Lisp"	pointer
,	O
"librep"	pointer
,	O
"Scheme"	pointer
,	O
"Smalltalk"	pointer
,	O
"Java"	pointer
,	O
"C#"	pointer
,	O
"awk"	pointer
,	O
"Object Pascal"	pointer
,	O
"YCP"	pointer
,	O
"Tcl"	pointer
,	O
"Perl"	pointer
,	O
"Perl brace"	pointer
,	O
"PHP"	pointer
,	O
"GCC internal"	pointer
,	O
"GFC internal"	pointer
,	O
"Qt"	pointer
,	O
"Qt plural"	pointer
,	O
"KDE"	pointer
,	O
"KDE KUIT"	pointer
,	O
"Boost"	pointer
,	O
"Lua"	pointer
,	O
"JavaScript"	pointer
}	O
;	O
bool	bool
possible_format_p	function
(	O
enum	O
is_format	enum
is_format	enum
)	O
{	O
return	O
is_format	enum
==	O
possible	int
||	O
is_format	enum
==	O
yes_according_to_context	int
||	O
is_format	enum
==	O
yes	int
;	O
}	O
const	O
char	O
*	O
const	O
syntax_check_name	array
[	O
NSYNTAXCHECKS	int
]	O
=	O
{	O
"ellipsis-unicode"	pointer
,	O
"space-ellipsis"	pointer
,	O
"quote-unicode"	pointer
,	O
"bullet-unicode"	pointer
}	O
;	O
message_ty	struct
*	O
message_alloc	function
(	O
const	O
char	O
*	O
msgctxt	pointer
,	O
const	O
char	O
*	O
msgid	pointer
,	O
const	O
char	O
*	O
msgid_plural	pointer
,	O
const	O
char	O
*	O
msgstr	pointer
,	O
size_t	long
msgstr_len	long
,	O
const	O
lex_pos_ty	struct
*	O
pp	pointer
)	O
{	O
message_ty	struct
*	O
mp	pointer
;	O
size_t	long
i	long
;	O
mp	pointer
=	O
XMALLOC	O
(	O
message_ty	struct
)	O
;	O
mp	pointer
->	O
msgctxt	pointer
=	O
msgctxt	pointer
;	O
mp	pointer
->	O
msgid	pointer
=	O
msgid	pointer
;	O
mp	pointer
->	O
msgid_plural	pointer
=	O
(	O
msgid_plural	pointer
!=	O
NULL	O
?	O
xstrdup	function
(	O
msgid_plural	pointer
)	O
:	O
NULL	O
)	O
;	O
mp	pointer
->	O
msgstr	pointer
=	O
msgstr	pointer
;	O
mp	pointer
->	O
msgstr_len	long
=	O
msgstr_len	long
;	O
mp	pointer
->	O
pos	struct
=	O
*	O
pp	pointer
;	O
mp	pointer
->	O
comment	pointer
=	O
NULL	O
;	O
mp	pointer
->	O
comment_dot	pointer
=	O
NULL	O
;	O
mp	pointer
->	O
filepos_count	long
=	O
0	int
;	O
mp	pointer
->	O
filepos	pointer
=	O
NULL	O
;	O
mp	pointer
->	O
is_fuzzy	bool
=	O
false	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NFORMATS	int
;	O
i	long
++	O
)	O
mp	pointer
->	O
is_format	enum
[	O
i	long
]	O
=	O
undecided	int
;	O
mp	pointer
->	O
range	struct
.	O
min	int
=	O
-	O
1	int
;	O
mp	pointer
->	O
range	struct
.	O
max	int
=	O
-	O
1	int
;	O
mp	pointer
->	O
do_wrap	enum
=	O
undecided	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NSYNTAXCHECKS	int
;	O
i	long
++	O
)	O
mp	pointer
->	O
do_syntax_check	array
[	O
i	long
]	O
=	O
undecided	int
;	O
mp	pointer
->	O
prev_msgctxt	pointer
=	O
NULL	O
;	O
mp	pointer
->	O
prev_msgid	pointer
=	O
NULL	O
;	O
mp	pointer
->	O
prev_msgid_plural	pointer
=	O
NULL	O
;	O
mp	pointer
->	O
used	int
=	O
0	int
;	O
mp	pointer
->	O
obsolete	bool
=	O
false	int
;	O
return	O
mp	pointer
;	O
}	O
void	O
message_free	function
(	O
message_ty	struct
*	O
mp	pointer
)	O
{	O
size_t	long
j	long
;	O
free	function
(	O
(	O
char	O
*	O
)	O
mp	pointer
->	O
msgid	pointer
)	O
;	O
if	O
(	O
mp	pointer
->	O
msgid_plural	pointer
!=	O
NULL	O
)	O
free	function
(	O
(	O
char	O
*	O
)	O
mp	pointer
->	O
msgid_plural	pointer
)	O
;	O
free	function
(	O
(	O
char	O
*	O
)	O
mp	pointer
->	O
msgstr	pointer
)	O
;	O
if	O
(	O
mp	pointer
->	O
comment	pointer
!=	O
NULL	O
)	O
string_list_free	function
(	O
mp	pointer
->	O
comment	pointer
)	O
;	O
if	O
(	O
mp	pointer
->	O
comment_dot	pointer
!=	O
NULL	O
)	O
string_list_free	function
(	O
mp	pointer
->	O
comment_dot	pointer
)	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mp	pointer
->	O
filepos_count	long
;	O
++	O
j	long
)	O
free	function
(	O
(	O
char	O
*	O
)	O
mp	pointer
->	O
filepos	pointer
[	O
j	long
]	O
.	O
file_name	pointer
)	O
;	O
if	O
(	O
mp	pointer
->	O
filepos	pointer
!=	O
NULL	O
)	O
free	function
(	O
mp	pointer
->	O
filepos	pointer
)	O
;	O
if	O
(	O
mp	pointer
->	O
prev_msgctxt	pointer
!=	O
NULL	O
)	O
free	function
(	O
(	O
char	O
*	O
)	O
mp	pointer
->	O
prev_msgctxt	pointer
)	O
;	O
if	O
(	O
mp	pointer
->	O
prev_msgid	pointer
!=	O
NULL	O
)	O
free	function
(	O
(	O
char	O
*	O
)	O
mp	pointer
->	O
prev_msgid	pointer
)	O
;	O
if	O
(	O
mp	pointer
->	O
prev_msgid_plural	pointer
!=	O
NULL	O
)	O
free	function
(	O
(	O
char	O
*	O
)	O
mp	pointer
->	O
prev_msgid_plural	pointer
)	O
;	O
free	function
(	O
mp	pointer
)	O
;	O
}	O
void	O
message_comment_append	function
(	O
message_ty	struct
*	O
mp	pointer
,	O
const	O
char	O
*	O
s	pointer
)	O
{	O
if	O
(	O
mp	pointer
->	O
comment	pointer
==	O
NULL	O
)	O
mp	pointer
->	O
comment	pointer
=	O
string_list_alloc	function
(	O
)	O
;	O
string_list_append	function
(	O
mp	pointer
->	O
comment	pointer
,	O
s	pointer
)	O
;	O
}	O
void	O
message_comment_dot_append	function
(	O
message_ty	struct
*	O
mp	pointer
,	O
const	O
char	O
*	O
s	pointer
)	O
{	O
if	O
(	O
mp	pointer
->	O
comment_dot	pointer
==	O
NULL	O
)	O
mp	pointer
->	O
comment_dot	pointer
=	O
string_list_alloc	function
(	O
)	O
;	O
string_list_append	function
(	O
mp	pointer
->	O
comment_dot	pointer
,	O
s	pointer
)	O
;	O
}	O
void	O
message_comment_filepos	function
(	O
message_ty	struct
*	O
mp	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
size_t	long
line	long
)	O
{	O
size_t	long
j	long
;	O
size_t	long
nbytes	long
;	O
lex_pos_ty	struct
*	O
pp	pointer
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mp	pointer
->	O
filepos_count	long
;	O
j	long
++	O
)	O
{	O
pp	pointer
=	O
&	O
mp	pointer
->	O
filepos	pointer
[	O
j	long
]	O
;	O
if	O
(	O
strcmp	function
(	O
pp	pointer
->	O
file_name	pointer
,	O
name	pointer
)	O
==	O
0	int
&&	O
pp	pointer
->	O
line_number	long
==	O
line	long
)	O
return	O
;	O
}	O
nbytes	long
=	O
(	O
mp	pointer
->	O
filepos_count	long
+	O
1	int
)	O
*	O
sizeof	O
(	O
mp	pointer
->	O
filepos	pointer
[	O
0	int
]	O
)	O
;	O
mp	pointer
->	O
filepos	pointer
=	O
xrealloc	function
(	O
mp	pointer
->	O
filepos	pointer
,	O
nbytes	long
)	O
;	O
pp	pointer
=	O
&	O
mp	pointer
->	O
filepos	pointer
[	O
mp	pointer
->	O
filepos_count	long
++	O
]	O
;	O
pp	pointer
->	O
file_name	pointer
=	O
xstrdup	function
(	O
name	pointer
)	O
;	O
pp	pointer
->	O
line_number	long
=	O
line	long
;	O
}	O
message_ty	struct
*	O
message_copy	function
(	O
message_ty	struct
*	O
mp	pointer
)	O
{	O
message_ty	struct
*	O
result	pointer
;	O
size_t	long
j	long
,	O
i	long
;	O
result	pointer
=	O
message_alloc	function
(	O
mp	pointer
->	O
msgctxt	pointer
!=	O
NULL	O
?	O
xstrdup	function
(	O
mp	pointer
->	O
msgctxt	pointer
)	O
:	O
NULL	O
,	O
xstrdup	function
(	O
mp	pointer
->	O
msgid	pointer
)	O
,	O
mp	pointer
->	O
msgid_plural	pointer
,	O
mp	pointer
->	O
msgstr	pointer
,	O
mp	pointer
->	O
msgstr_len	long
,	O
&	O
mp	pointer
->	O
pos	struct
)	O
;	O
if	O
(	O
mp	pointer
->	O
comment	pointer
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mp	pointer
->	O
comment	pointer
->	O
nitems	long
;	O
++	O
j	long
)	O
message_comment_append	function
(	O
result	pointer
,	O
mp	pointer
->	O
comment	pointer
->	O
item	pointer
[	O
j	long
]	O
)	O
;	O
}	O
if	O
(	O
mp	pointer
->	O
comment_dot	pointer
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mp	pointer
->	O
comment_dot	pointer
->	O
nitems	long
;	O
++	O
j	long
)	O
message_comment_dot_append	function
(	O
result	pointer
,	O
mp	pointer
->	O
comment_dot	pointer
->	O
item	pointer
[	O
j	long
]	O
)	O
;	O
}	O
result	pointer
->	O
is_fuzzy	bool
=	O
mp	pointer
->	O
is_fuzzy	bool
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NFORMATS	int
;	O
i	long
++	O
)	O
result	pointer
->	O
is_format	enum
[	O
i	long
]	O
=	O
mp	pointer
->	O
is_format	enum
[	O
i	long
]	O
;	O
result	pointer
->	O
range	struct
=	O
mp	pointer
->	O
range	struct
;	O
result	pointer
->	O
do_wrap	enum
=	O
mp	pointer
->	O
do_wrap	enum
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NSYNTAXCHECKS	int
;	O
i	long
++	O
)	O
result	pointer
->	O
do_syntax_check	array
[	O
i	long
]	O
=	O
mp	pointer
->	O
do_syntax_check	array
[	O
i	long
]	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mp	pointer
->	O
filepos_count	long
;	O
++	O
j	long
)	O
{	O
lex_pos_ty	struct
*	O
pp	pointer
=	O
&	O
mp	pointer
->	O
filepos	pointer
[	O
j	long
]	O
;	O
message_comment_filepos	function
(	O
result	pointer
,	O
pp	pointer
->	O
file_name	pointer
,	O
pp	pointer
->	O
line_number	long
)	O
;	O
}	O
result	pointer
->	O
prev_msgctxt	pointer
=	O
(	O
mp	pointer
->	O
prev_msgctxt	pointer
!=	O
NULL	O
?	O
xstrdup	function
(	O
mp	pointer
->	O
prev_msgctxt	pointer
)	O
:	O
NULL	O
)	O
;	O
result	pointer
->	O
prev_msgid	pointer
=	O
(	O
mp	pointer
->	O
prev_msgid	pointer
!=	O
NULL	O
?	O
xstrdup	function
(	O
mp	pointer
->	O
prev_msgid	pointer
)	O
:	O
NULL	O
)	O
;	O
result	pointer
->	O
prev_msgid_plural	pointer
=	O
(	O
mp	pointer
->	O
prev_msgid_plural	pointer
!=	O
NULL	O
?	O
xstrdup	function
(	O
mp	pointer
->	O
prev_msgid_plural	pointer
)	O
:	O
NULL	O
)	O
;	O
return	O
result	pointer
;	O
}	O
message_list_ty	struct
*	O
message_list_alloc	function
(	O
bool	bool
use_hashtable	bool
)	O
{	O
message_list_ty	struct
*	O
mlp	pointer
;	O
mlp	pointer
=	O
XMALLOC	O
(	O
message_list_ty	struct
)	O
;	O
mlp	pointer
->	O
nitems	long
=	O
0	int
;	O
mlp	pointer
->	O
nitems_max	long
=	O
0	int
;	O
mlp	pointer
->	O
item	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
mlp	pointer
->	O
use_hashtable	bool
=	O
use_hashtable	bool
)	O
)	O
hash_init	function
(	O
&	O
mlp	pointer
->	O
htable	struct
,	O
10	int
)	O
;	O
return	O
mlp	pointer
;	O
}	O
void	O
message_list_free	function
(	O
message_list_ty	struct
*	O
mlp	pointer
,	O
int	O
keep_messages	int
)	O
{	O
size_t	long
j	long
;	O
if	O
(	O
keep_messages	int
==	O
0	int
)	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mlp	pointer
->	O
nitems	long
;	O
++	O
j	long
)	O
message_free	function
(	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
)	O
;	O
if	O
(	O
mlp	pointer
->	O
item	pointer
)	O
free	function
(	O
mlp	pointer
->	O
item	pointer
)	O
;	O
if	O
(	O
mlp	pointer
->	O
use_hashtable	bool
)	O
hash_destroy	function
(	O
&	O
mlp	pointer
->	O
htable	struct
)	O
;	O
free	function
(	O
mlp	pointer
)	O
;	O
}	O
static	O
int	O
message_list_hash_insert_entry	function
(	O
hash_table	struct
*	O
htable	struct
,	O
message_ty	struct
*	O
mp	pointer
)	O
{	O
char	O
*	O
alloced_key	pointer
;	O
const	O
char	O
*	O
key	pointer
;	O
size_t	long
keylen	long
;	O
int	O
found	int
;	O
if	O
(	O
mp	pointer
->	O
msgctxt	pointer
!=	O
NULL	O
)	O
{	O
size_t	long
msgctxt_len	long
=	O
strlen	function
(	O
mp	pointer
->	O
msgctxt	pointer
)	O
;	O
size_t	long
msgid_len	long
=	O
strlen	function
(	O
mp	pointer
->	O
msgid	pointer
)	O
;	O
keylen	long
=	O
msgctxt_len	long
+	O
1	int
+	O
msgid_len	long
+	O
1	int
;	O
alloced_key	pointer
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
keylen	long
)	O
;	O
memcpy	function
(	O
alloced_key	pointer
,	O
mp	pointer
->	O
msgctxt	pointer
,	O
msgctxt_len	long
)	O
;	O
alloced_key	pointer
[	O
msgctxt_len	long
]	O
=	O
MSGCTXT_SEPARATOR	char
;	O
memcpy	function
(	O
alloced_key	pointer
+	O
msgctxt_len	long
+	O
1	int
,	O
mp	pointer
->	O
msgid	pointer
,	O
msgid_len	long
+	O
1	int
)	O
;	O
key	pointer
=	O
alloced_key	pointer
;	O
}	O
else	O
{	O
alloced_key	pointer
=	O
NULL	O
;	O
key	pointer
=	O
mp	pointer
->	O
msgid	pointer
;	O
keylen	long
=	O
strlen	function
(	O
mp	pointer
->	O
msgid	pointer
)	O
+	O
1	int
;	O
}	O
found	int
=	O
(	O
hash_insert_entry	function
(	O
htable	struct
,	O
key	pointer
,	O
keylen	long
,	O
mp	pointer
)	O
==	O
NULL	O
)	O
;	O
if	O
(	O
mp	pointer
->	O
msgctxt	pointer
!=	O
NULL	O
)	O
freea	function
(	O
alloced_key	pointer
)	O
;	O
return	O
found	int
;	O
}	O
void	O
message_list_append	function
(	O
message_list_ty	struct
*	O
mlp	pointer
,	O
message_ty	struct
*	O
mp	pointer
)	O
{	O
if	O
(	O
mlp	pointer
->	O
nitems	long
>=	O
mlp	pointer
->	O
nitems_max	long
)	O
{	O
size_t	long
nbytes	long
;	O
mlp	pointer
->	O
nitems_max	long
=	O
mlp	pointer
->	O
nitems_max	long
*	O
2	int
+	O
4	int
;	O
nbytes	long
=	O
mlp	pointer
->	O
nitems_max	long
*	O
sizeof	O
(	O
message_ty	struct
*	O
)	O
;	O
mlp	pointer
->	O
item	pointer
=	O
xrealloc	function
(	O
mlp	pointer
->	O
item	pointer
,	O
nbytes	long
)	O
;	O
}	O
mlp	pointer
->	O
item	pointer
[	O
mlp	pointer
->	O
nitems	long
++	O
]	O
=	O
mp	pointer
;	O
if	O
(	O
mlp	pointer
->	O
use_hashtable	bool
)	O
if	O
(	O
message_list_hash_insert_entry	function
(	O
&	O
mlp	pointer
->	O
htable	struct
,	O
mp	pointer
)	O
)	O
abort	function
(	O
)	O
;	O
}	O
void	O
message_list_prepend	function
(	O
message_list_ty	struct
*	O
mlp	pointer
,	O
message_ty	struct
*	O
mp	pointer
)	O
{	O
size_t	long
j	long
;	O
if	O
(	O
mlp	pointer
->	O
nitems	long
>=	O
mlp	pointer
->	O
nitems_max	long
)	O
{	O
size_t	long
nbytes	long
;	O
mlp	pointer
->	O
nitems_max	long
=	O
mlp	pointer
->	O
nitems_max	long
*	O
2	int
+	O
4	int
;	O
nbytes	long
=	O
mlp	pointer
->	O
nitems_max	long
*	O
sizeof	O
(	O
message_ty	struct
*	O
)	O
;	O
mlp	pointer
->	O
item	pointer
=	O
xrealloc	function
(	O
mlp	pointer
->	O
item	pointer
,	O
nbytes	long
)	O
;	O
}	O
for	O
(	O
j	long
=	O
mlp	pointer
->	O
nitems	long
;	O
j	long
>	O
0	int
;	O
j	long
--	O
)	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
=	O
mlp	pointer
->	O
item	pointer
[	O
j	long
-	O
1	int
]	O
;	O
mlp	pointer
->	O
item	pointer
[	O
0	int
]	O
=	O
mp	pointer
;	O
mlp	pointer
->	O
nitems	long
++	O
;	O
if	O
(	O
mlp	pointer
->	O
use_hashtable	bool
)	O
if	O
(	O
message_list_hash_insert_entry	function
(	O
&	O
mlp	pointer
->	O
htable	struct
,	O
mp	pointer
)	O
)	O
abort	function
(	O
)	O
;	O
}	O
void	O
message_list_insert_at	function
(	O
message_list_ty	struct
*	O
mlp	pointer
,	O
size_t	long
n	long
,	O
message_ty	struct
*	O
mp	pointer
)	O
{	O
size_t	long
j	long
;	O
if	O
(	O
mlp	pointer
->	O
nitems	long
>=	O
mlp	pointer
->	O
nitems_max	long
)	O
{	O
size_t	long
nbytes	long
;	O
mlp	pointer
->	O
nitems_max	long
=	O
mlp	pointer
->	O
nitems_max	long
*	O
2	int
+	O
4	int
;	O
nbytes	long
=	O
mlp	pointer
->	O
nitems_max	long
*	O
sizeof	O
(	O
message_ty	struct
*	O
)	O
;	O
mlp	pointer
->	O
item	pointer
=	O
xrealloc	function
(	O
mlp	pointer
->	O
item	pointer
,	O
nbytes	long
)	O
;	O
}	O
for	O
(	O
j	long
=	O
mlp	pointer
->	O
nitems	long
;	O
j	long
>	O
n	long
;	O
j	long
--	O
)	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
=	O
mlp	pointer
->	O
item	pointer
[	O
j	long
-	O
1	int
]	O
;	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
=	O
mp	pointer
;	O
mlp	pointer
->	O
nitems	long
++	O
;	O
if	O
(	O
mlp	pointer
->	O
use_hashtable	bool
)	O
if	O
(	O
message_list_hash_insert_entry	function
(	O
&	O
mlp	pointer
->	O
htable	struct
,	O
mp	pointer
)	O
)	O
abort	function
(	O
)	O
;	O
}	O
void	O
message_list_remove_if_not	function
(	O
message_list_ty	struct
*	O
mlp	pointer
,	O
message_predicate_ty	function
*	O
predicate	pointer
)	O
{	O
size_t	long
i	long
,	O
j	long
;	O
for	O
(	O
j	long
=	O
0	int
,	O
i	long
=	O
0	int
;	O
j	long
<	O
mlp	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
if	O
(	O
predicate	pointer
(	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
)	O
)	O
mlp	pointer
->	O
item	pointer
[	O
i	long
++	O
]	O
=	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
;	O
if	O
(	O
mlp	pointer
->	O
use_hashtable	bool
&&	O
i	long
<	O
mlp	pointer
->	O
nitems	long
)	O
{	O
hash_destroy	function
(	O
&	O
mlp	pointer
->	O
htable	struct
)	O
;	O
mlp	pointer
->	O
use_hashtable	bool
=	O
false	int
;	O
}	O
mlp	pointer
->	O
nitems	long
=	O
i	long
;	O
}	O
bool	bool
message_list_msgids_changed	function
(	O
message_list_ty	struct
*	O
mlp	pointer
)	O
{	O
if	O
(	O
mlp	pointer
->	O
use_hashtable	bool
)	O
{	O
unsigned	O
long	O
int	O
size	long
=	O
mlp	pointer
->	O
htable	struct
.	O
size	long
;	O
size_t	long
j	long
;	O
hash_destroy	function
(	O
&	O
mlp	pointer
->	O
htable	struct
)	O
;	O
hash_init	function
(	O
&	O
mlp	pointer
->	O
htable	struct
,	O
size	long
)	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mlp	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
{	O
message_ty	struct
*	O
mp	pointer
=	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
;	O
if	O
(	O
message_list_hash_insert_entry	function
(	O
&	O
mlp	pointer
->	O
htable	struct
,	O
mp	pointer
)	O
)	O
{	O
hash_destroy	function
(	O
&	O
mlp	pointer
->	O
htable	struct
)	O
;	O
mlp	pointer
->	O
use_hashtable	bool
=	O
false	int
;	O
return	O
true	int
;	O
}	O
}	O
}	O
return	O
false	int
;	O
}	O
message_list_ty	struct
*	O
message_list_copy	function
(	O
message_list_ty	struct
*	O
mlp	pointer
,	O
int	O
copy_level	int
)	O
{	O
message_list_ty	struct
*	O
result	pointer
;	O
size_t	long
j	long
;	O
result	pointer
=	O
message_list_alloc	function
(	O
mlp	pointer
->	O
use_hashtable	bool
)	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mlp	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
{	O
message_ty	struct
*	O
mp	pointer
=	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
;	O
message_list_append	function
(	O
result	pointer
,	O
copy_level	int
?	O
mp	pointer
:	O
message_copy	function
(	O
mp	pointer
)	O
)	O
;	O
}	O
return	O
result	pointer
;	O
}	O
message_ty	struct
*	O
message_list_search	function
(	O
message_list_ty	struct
*	O
mlp	pointer
,	O
const	O
char	O
*	O
msgctxt	pointer
,	O
const	O
char	O
*	O
msgid	pointer
)	O
{	O
if	O
(	O
mlp	pointer
->	O
use_hashtable	bool
)	O
{	O
char	O
*	O
alloced_key	pointer
;	O
const	O
char	O
*	O
key	pointer
;	O
size_t	long
keylen	long
;	O
if	O
(	O
msgctxt	pointer
!=	O
NULL	O
)	O
{	O
size_t	long
msgctxt_len	long
=	O
strlen	function
(	O
msgctxt	pointer
)	O
;	O
size_t	long
msgid_len	long
=	O
strlen	function
(	O
msgid	pointer
)	O
;	O
keylen	long
=	O
msgctxt_len	long
+	O
1	int
+	O
msgid_len	long
+	O
1	int
;	O
alloced_key	pointer
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
keylen	long
)	O
;	O
memcpy	function
(	O
alloced_key	pointer
,	O
msgctxt	pointer
,	O
msgctxt_len	long
)	O
;	O
alloced_key	pointer
[	O
msgctxt_len	long
]	O
=	O
MSGCTXT_SEPARATOR	char
;	O
memcpy	function
(	O
alloced_key	pointer
+	O
msgctxt_len	long
+	O
1	int
,	O
msgid	pointer
,	O
msgid_len	long
+	O
1	int
)	O
;	O
key	pointer
=	O
alloced_key	pointer
;	O
}	O
else	O
{	O
alloced_key	pointer
=	O
NULL	O
;	O
key	pointer
=	O
msgid	pointer
;	O
keylen	long
=	O
strlen	function
(	O
msgid	pointer
)	O
+	O
1	int
;	O
}	O
{	O
void	O
*	O
htable_value	pointer
;	O
int	O
found	int
=	O
!	O
hash_find_entry	function
(	O
&	O
mlp	pointer
->	O
htable	struct
,	O
key	pointer
,	O
keylen	long
,	O
&	O
htable_value	pointer
)	O
;	O
if	O
(	O
msgctxt	pointer
!=	O
NULL	O
)	O
freea	function
(	O
alloced_key	pointer
)	O
;	O
if	O
(	O
found	int
)	O
return	O
(	O
message_ty	struct
*	O
)	O
htable_value	pointer
;	O
else	O
return	O
NULL	O
;	O
}	O
}	O
else	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mlp	pointer
->	O
nitems	long
;	O
++	O
j	long
)	O
{	O
message_ty	struct
*	O
mp	pointer
;	O
mp	pointer
=	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
;	O
if	O
(	O
(	O
msgctxt	pointer
!=	O
NULL	O
?	O
mp	pointer
->	O
msgctxt	pointer
!=	O
NULL	O
&&	O
strcmp	function
(	O
msgctxt	pointer
,	O
mp	pointer
->	O
msgctxt	pointer
)	O
==	O
0	int
:	O
mp	pointer
->	O
msgctxt	pointer
==	O
NULL	O
)	O
&&	O
strcmp	function
(	O
msgid	pointer
,	O
mp	pointer
->	O
msgid	pointer
)	O
==	O
0	int
)	O
return	O
mp	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
}	O
double	O
fuzzy_search_goal_function	function
(	O
const	O
message_ty	struct
*	O
mp	pointer
,	O
const	O
char	O
*	O
msgctxt	pointer
,	O
const	O
char	O
*	O
msgid	pointer
,	O
double	O
lower_bound	double
)	O
{	O
double	O
bonus	double
=	O
0.0	int
;	O
if	O
(	O
mp	pointer
->	O
msgctxt	pointer
==	O
NULL	O
||	O
(	O
msgctxt	pointer
!=	O
NULL	O
&&	O
strcmp	function
(	O
msgctxt	pointer
,	O
mp	pointer
->	O
msgctxt	pointer
)	O
==	O
0	int
)	O
)	O
{	O
bonus	double
=	O
0.00001	int
;	O
lower_bound	double
-=	O
bonus	double
*	O
1.01	int
;	O
}	O
{	O
volatile	O
double	O
weight	double
=	O
fstrcmp_bounded	function
(	O
msgid	pointer
,	O
mp	pointer
->	O
msgid	pointer
,	O
lower_bound	double
)	O
;	O
weight	double
+=	O
bonus	double
;	O
return	O
weight	double
;	O
}	O
}	O
static	O
message_ty	struct
*	O
message_list_search_fuzzy_inner	function
(	O
message_list_ty	struct
*	O
mlp	pointer
,	O
const	O
char	O
*	O
msgctxt	pointer
,	O
const	O
char	O
*	O
msgid	pointer
,	O
double	O
*	O
best_weight_p	pointer
)	O
{	O
size_t	long
j	long
;	O
message_ty	struct
*	O
best_mp	pointer
;	O
best_mp	pointer
=	O
NULL	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mlp	pointer
->	O
nitems	long
;	O
++	O
j	long
)	O
{	O
message_ty	struct
*	O
mp	pointer
;	O
mp	pointer
=	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
;	O
if	O
(	O
mp	pointer
->	O
msgstr	pointer
!=	O
NULL	O
&&	O
mp	pointer
->	O
msgstr	pointer
[	O
0	int
]	O
!=	O
'\0'	O
)	O
{	O
double	O
weight	double
=	O
fuzzy_search_goal_function	function
(	O
mp	pointer
,	O
msgctxt	pointer
,	O
msgid	pointer
,	O
*	O
best_weight_p	pointer
)	O
;	O
if	O
(	O
weight	double
>	O
*	O
best_weight_p	pointer
)	O
{	O
*	O
best_weight_p	pointer
=	O
weight	double
;	O
best_mp	pointer
=	O
mp	pointer
;	O
}	O
}	O
}	O
return	O
best_mp	pointer
;	O
}	O
message_ty	struct
*	O
message_list_search_fuzzy	function
(	O
message_list_ty	struct
*	O
mlp	pointer
,	O
const	O
char	O
*	O
msgctxt	pointer
,	O
const	O
char	O
*	O
msgid	pointer
)	O
{	O
double	O
best_weight	double
;	O
best_weight	double
=	O
FUZZY_THRESHOLD	int
;	O
return	O
message_list_search_fuzzy_inner	function
(	O
mlp	pointer
,	O
msgctxt	pointer
,	O
msgid	pointer
,	O
&	O
best_weight	double
)	O
;	O
}	O
message_list_list_ty	struct
*	O
message_list_list_alloc	function
(	O
)	O
{	O
message_list_list_ty	struct
*	O
mllp	pointer
;	O
mllp	pointer
=	O
XMALLOC	O
(	O
message_list_list_ty	struct
)	O
;	O
mllp	pointer
->	O
nitems	long
=	O
0	int
;	O
mllp	pointer
->	O
nitems_max	long
=	O
0	int
;	O
mllp	pointer
->	O
item	pointer
=	O
NULL	O
;	O
return	O
mllp	pointer
;	O
}	O
void	O
message_list_list_free	function
(	O
message_list_list_ty	struct
*	O
mllp	pointer
,	O
int	O
keep_level	int
)	O
{	O
size_t	long
j	long
;	O
if	O
(	O
keep_level	int
<	O
2	int
)	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mllp	pointer
->	O
nitems	long
;	O
++	O
j	long
)	O
message_list_free	function
(	O
mllp	pointer
->	O
item	pointer
[	O
j	long
]	O
,	O
keep_level	int
)	O
;	O
if	O
(	O
mllp	pointer
->	O
item	pointer
)	O
free	function
(	O
mllp	pointer
->	O
item	pointer
)	O
;	O
free	function
(	O
mllp	pointer
)	O
;	O
}	O
void	O
message_list_list_append	function
(	O
message_list_list_ty	struct
*	O
mllp	pointer
,	O
message_list_ty	struct
*	O
mlp	pointer
)	O
{	O
if	O
(	O
mllp	pointer
->	O
nitems	long
>=	O
mllp	pointer
->	O
nitems_max	long
)	O
{	O
size_t	long
nbytes	long
;	O
mllp	pointer
->	O
nitems_max	long
=	O
mllp	pointer
->	O
nitems_max	long
*	O
2	int
+	O
4	int
;	O
nbytes	long
=	O
mllp	pointer
->	O
nitems_max	long
*	O
sizeof	O
(	O
message_list_ty	struct
*	O
)	O
;	O
mllp	pointer
->	O
item	pointer
=	O
xrealloc	function
(	O
mllp	pointer
->	O
item	pointer
,	O
nbytes	long
)	O
;	O
}	O
mllp	pointer
->	O
item	pointer
[	O
mllp	pointer
->	O
nitems	long
++	O
]	O
=	O
mlp	pointer
;	O
}	O
void	O
message_list_list_append_list	function
(	O
message_list_list_ty	struct
*	O
mllp	pointer
,	O
message_list_list_ty	struct
*	O
mllp2	pointer
)	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mllp2	pointer
->	O
nitems	long
;	O
++	O
j	long
)	O
message_list_list_append	function
(	O
mllp	pointer
,	O
mllp2	pointer
->	O
item	pointer
[	O
j	long
]	O
)	O
;	O
}	O
message_ty	struct
*	O
message_list_list_search	function
(	O
message_list_list_ty	struct
*	O
mllp	pointer
,	O
const	O
char	O
*	O
msgctxt	pointer
,	O
const	O
char	O
*	O
msgid	pointer
)	O
{	O
message_ty	struct
*	O
best_mp	pointer
;	O
int	O
best_weight	double
;	O
size_t	long
j	long
;	O
best_mp	pointer
=	O
NULL	O
;	O
best_weight	double
=	O
0	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mllp	pointer
->	O
nitems	long
;	O
++	O
j	long
)	O
{	O
message_list_ty	struct
*	O
mlp	pointer
;	O
message_ty	struct
*	O
mp	pointer
;	O
mlp	pointer
=	O
mllp	pointer
->	O
item	pointer
[	O
j	long
]	O
;	O
mp	pointer
=	O
message_list_search	function
(	O
mlp	pointer
,	O
msgctxt	pointer
,	O
msgid	pointer
)	O
;	O
if	O
(	O
mp	pointer
)	O
{	O
int	O
weight	double
=	O
(	O
mp	pointer
->	O
msgstr_len	long
==	O
1	int
&&	O
mp	pointer
->	O
msgstr	pointer
[	O
0	int
]	O
==	O
'\0'	O
?	O
1	int
:	O
2	int
)	O
;	O
if	O
(	O
weight	double
>	O
best_weight	double
)	O
{	O
best_mp	pointer
=	O
mp	pointer
;	O
best_weight	double
=	O
weight	double
;	O
}	O
}	O
}	O
return	O
best_mp	pointer
;	O
}	O
msgdomain_ty	struct
*	O
msgdomain_alloc	function
(	O
const	O
char	O
*	O
domain	pointer
,	O
bool	bool
use_hashtable	bool
)	O
{	O
msgdomain_ty	struct
*	O
mdp	pointer
;	O
mdp	pointer
=	O
XMALLOC	O
(	O
msgdomain_ty	struct
)	O
;	O
mdp	pointer
->	O
domain	pointer
=	O
domain	pointer
;	O
mdp	pointer
->	O
messages	pointer
=	O
message_list_alloc	function
(	O
use_hashtable	bool
)	O
;	O
return	O
mdp	pointer
;	O
}	O
void	O
msgdomain_free	function
(	O
msgdomain_ty	struct
*	O
mdp	pointer
)	O
{	O
message_list_free	function
(	O
mdp	pointer
->	O
messages	pointer
,	O
0	int
)	O
;	O
free	function
(	O
mdp	pointer
)	O
;	O
}	O
msgdomain_list_ty	struct
*	O
msgdomain_list_alloc	function
(	O
bool	bool
use_hashtable	bool
)	O
{	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
;	O
mdlp	pointer
=	O
XMALLOC	O
(	O
msgdomain_list_ty	struct
)	O
;	O
mdlp	pointer
->	O
nitems	long
=	O
1	int
;	O
mdlp	pointer
->	O
nitems_max	long
=	O
1	int
;	O
mdlp	pointer
->	O
item	pointer
=	O
XNMALLOC	O
(	O
mdlp	pointer
->	O
nitems_max	long
,	O
msgdomain_ty	struct
*	O
)	O
;	O
mdlp	pointer
->	O
item	pointer
[	O
0	int
]	O
=	O
msgdomain_alloc	function
(	O
MESSAGE_DOMAIN_DEFAULT	pointer
,	O
use_hashtable	bool
)	O
;	O
mdlp	pointer
->	O
use_hashtable	bool
=	O
use_hashtable	bool
;	O
mdlp	pointer
->	O
encoding	pointer
=	O
NULL	O
;	O
return	O
mdlp	pointer
;	O
}	O
void	O
msgdomain_list_free	function
(	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
)	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mdlp	pointer
->	O
nitems	long
;	O
++	O
j	long
)	O
msgdomain_free	function
(	O
mdlp	pointer
->	O
item	pointer
[	O
j	long
]	O
)	O
;	O
if	O
(	O
mdlp	pointer
->	O
item	pointer
)	O
free	function
(	O
mdlp	pointer
->	O
item	pointer
)	O
;	O
free	function
(	O
mdlp	pointer
)	O
;	O
}	O
void	O
msgdomain_list_append	function
(	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
,	O
msgdomain_ty	struct
*	O
mdp	pointer
)	O
{	O
if	O
(	O
mdlp	pointer
->	O
nitems	long
>=	O
mdlp	pointer
->	O
nitems_max	long
)	O
{	O
size_t	long
nbytes	long
;	O
mdlp	pointer
->	O
nitems_max	long
=	O
mdlp	pointer
->	O
nitems_max	long
*	O
2	int
+	O
4	int
;	O
nbytes	long
=	O
mdlp	pointer
->	O
nitems_max	long
*	O
sizeof	O
(	O
msgdomain_ty	struct
*	O
)	O
;	O
mdlp	pointer
->	O
item	pointer
=	O
xrealloc	function
(	O
mdlp	pointer
->	O
item	pointer
,	O
nbytes	long
)	O
;	O
}	O
mdlp	pointer
->	O
item	pointer
[	O
mdlp	pointer
->	O
nitems	long
++	O
]	O
=	O
mdp	pointer
;	O
}	O
message_list_ty	struct
*	O
msgdomain_list_sublist	function
(	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
,	O
const	O
char	O
*	O
domain	pointer
,	O
bool	bool
create	bool
)	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mdlp	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
if	O
(	O
strcmp	function
(	O
mdlp	pointer
->	O
item	pointer
[	O
j	long
]	O
->	O
domain	pointer
,	O
domain	pointer
)	O
==	O
0	int
)	O
return	O
mdlp	pointer
->	O
item	pointer
[	O
j	long
]	O
->	O
messages	pointer
;	O
if	O
(	O
create	bool
)	O
{	O
msgdomain_ty	struct
*	O
mdp	pointer
=	O
msgdomain_alloc	function
(	O
domain	pointer
,	O
mdlp	pointer
->	O
use_hashtable	bool
)	O
;	O
msgdomain_list_append	function
(	O
mdlp	pointer
,	O
mdp	pointer
)	O
;	O
return	O
mdp	pointer
->	O
messages	pointer
;	O
}	O
else	O
return	O
NULL	O
;	O
}	O
msgdomain_list_ty	struct
*	O
msgdomain_list_copy	function
(	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
,	O
int	O
copy_level	int
)	O
{	O
msgdomain_list_ty	struct
*	O
result	pointer
;	O
size_t	long
j	long
;	O
result	pointer
=	O
XMALLOC	O
(	O
msgdomain_list_ty	struct
)	O
;	O
result	pointer
->	O
nitems	long
=	O
0	int
;	O
result	pointer
->	O
nitems_max	long
=	O
0	int
;	O
result	pointer
->	O
item	pointer
=	O
NULL	O
;	O
result	pointer
->	O
use_hashtable	bool
=	O
mdlp	pointer
->	O
use_hashtable	bool
;	O
result	pointer
->	O
encoding	pointer
=	O
mdlp	pointer
->	O
encoding	pointer
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mdlp	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
{	O
msgdomain_ty	struct
*	O
mdp	pointer
=	O
mdlp	pointer
->	O
item	pointer
[	O
j	long
]	O
;	O
if	O
(	O
copy_level	int
<	O
2	int
)	O
{	O
msgdomain_ty	struct
*	O
result_mdp	pointer
=	O
XMALLOC	O
(	O
msgdomain_ty	struct
)	O
;	O
result_mdp	pointer
->	O
domain	pointer
=	O
mdp	pointer
->	O
domain	pointer
;	O
result_mdp	pointer
->	O
messages	pointer
=	O
message_list_copy	function
(	O
mdp	pointer
->	O
messages	pointer
,	O
copy_level	int
)	O
;	O
msgdomain_list_append	function
(	O
result	pointer
,	O
result_mdp	pointer
)	O
;	O
}	O
else	O
msgdomain_list_append	function
(	O
result	pointer
,	O
mdp	pointer
)	O
;	O
}	O
return	O
result	pointer
;	O
}	O
