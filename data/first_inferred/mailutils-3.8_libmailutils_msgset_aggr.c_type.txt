static	O
int	O
compare_msgrange	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
struct	O
mu_msgrange	struct
const	O
*	O
sa	pointer
=	O
a	pointer
;	O
struct	O
mu_msgrange	struct
const	O
*	O
sb	pointer
=	O
b	pointer
;	O
if	O
(	O
sa	pointer
->	O
msg_end	long
!=	O
sb	pointer
->	O
msg_end	long
)	O
{	O
if	O
(	O
sa	pointer
->	O
msg_end	long
==	O
MU_MSGNO_LAST	int
)	O
return	O
1	int
;	O
if	O
(	O
sb	pointer
->	O
msg_end	long
==	O
MU_MSGNO_LAST	int
)	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
sa	pointer
->	O
msg_beg	long
<	O
sb	pointer
->	O
msg_beg	long
)	O
return	O
-	O
1	int
;	O
if	O
(	O
sa	pointer
->	O
msg_beg	long
>	O
sb	pointer
->	O
msg_beg	long
)	O
return	O
1	int
;	O
if	O
(	O
sa	pointer
->	O
msg_end	long
==	O
sb	pointer
->	O
msg_end	long
)	O
return	O
0	int
;	O
if	O
(	O
sa	pointer
->	O
msg_end	long
<	O
sb	pointer
->	O
msg_end	long
)	O
return	O
-	O
1	int
;	O
return	O
1	int
;	O
}	O
int	O
mu_msgset_aggregate	function
(	O
mu_msgset_t	pointer
mset	pointer
)	O
{	O
int	O
rc	int
;	O
mu_iterator_t	pointer
itr	pointer
;	O
size_t	long
count	long
;	O
struct	O
mu_msgrange	struct
*	O
prev	pointer
=	O
NULL	O
,	O
*	O
mr	pointer
;	O
int	O
dir	int
;	O
if	O
(	O
!	O
mset	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mset	pointer
->	O
flags	int
&	O
_MU_MSGSET_AGGREGATED	int
)	O
return	O
0	int
;	O
rc	int
=	O
mu_list_count	function
(	O
mset	pointer
->	O
list	pointer
,	O
&	O
count	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
count	long
<	O
2	int
)	O
return	O
0	int
;	O
mu_list_sort	function
(	O
mset	pointer
->	O
list	pointer
,	O
compare_msgrange	function
)	O
;	O
rc	int
=	O
mu_list_get_iterator	function
(	O
mset	pointer
->	O
list	pointer
,	O
&	O
itr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
dir	int
=	O
1	int
;	O
rc	int
=	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_set_direction	int
,	O
&	O
dir	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
mr	pointer
)	O
;	O
if	O
(	O
mr	pointer
->	O
msg_end	long
==	O
MU_MSGNO_LAST	int
)	O
{	O
struct	O
mu_msgrange	struct
*	O
last	pointer
=	O
mr	pointer
;	O
for	O
(	O
mu_iterator_next	function
(	O
itr	pointer
)	O
;	O
rc	int
==	O
0	int
&&	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
mr	pointer
)	O
;	O
if	O
(	O
mr	pointer
->	O
msg_end	long
==	O
MU_MSGNO_LAST	int
)	O
{	O
last	pointer
->	O
msg_beg	long
=	O
mr	pointer
->	O
msg_beg	long
;	O
rc	int
=	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_delete	int
,	O
NULL	O
)	O
;	O
}	O
else	O
if	O
(	O
mr	pointer
->	O
msg_beg	long
>=	O
last	pointer
->	O
msg_beg	long
)	O
rc	int
=	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_delete	int
,	O
NULL	O
)	O
;	O
else	O
if	O
(	O
mr	pointer
->	O
msg_end	long
+	O
1	int
>=	O
last	pointer
->	O
msg_beg	long
)	O
{	O
last	pointer
->	O
msg_beg	long
=	O
mr	pointer
->	O
msg_beg	long
;	O
rc	int
=	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_delete	int
,	O
NULL	O
)	O
;	O
}	O
else	O
break	O
;	O
}	O
}	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
dir	int
=	O
0	int
;	O
rc	int
=	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_set_direction	int
,	O
&	O
dir	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
mr	pointer
)	O
;	O
if	O
(	O
mr	pointer
->	O
msg_end	long
==	O
MU_MSGNO_LAST	int
)	O
break	O
;	O
if	O
(	O
prev	pointer
)	O
{	O
if	O
(	O
prev	pointer
->	O
msg_beg	long
<=	O
mr	pointer
->	O
msg_beg	long
&&	O
mr	pointer
->	O
msg_beg	long
<=	O
prev	pointer
->	O
msg_end	long
)	O
{	O
if	O
(	O
mr	pointer
->	O
msg_end	long
>	O
prev	pointer
->	O
msg_end	long
)	O
prev	pointer
->	O
msg_end	long
=	O
mr	pointer
->	O
msg_end	long
;	O
rc	int
=	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_delete	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
prev	pointer
->	O
msg_end	long
+	O
1	int
==	O
mr	pointer
->	O
msg_beg	long
)	O
{	O
prev	pointer
->	O
msg_end	long
=	O
mr	pointer
->	O
msg_end	long
;	O
rc	int
=	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_delete	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
continue	O
;	O
}	O
}	O
prev	pointer
=	O
mr	pointer
;	O
}	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
mset	pointer
->	O
flags	int
|=	O
_MU_MSGSET_AGGREGATED	int
;	O
return	O
rc	int
;	O
}	O
