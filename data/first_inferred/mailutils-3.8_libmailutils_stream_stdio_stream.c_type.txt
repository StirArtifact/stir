int	O
mu_stdio_stream_create	function
(	O
mu_stream_t	pointer
*	O
pstream	pointer
,	O
int	O
fd	int
,	O
int	O
flags	int
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
filename	pointer
;	O
mu_stream_t	pointer
transport	pointer
;	O
int	O
need_cache	int
;	O
struct	O
_mu_file_stream	struct
*	O
fstr	pointer
;	O
switch	O
(	O
fd	int
)	O
{	O
case	O
MU_STDIN_FD	int
:	O
flags	int
|=	O
MU_STREAM_READ	int
;	O
break	O
;	O
case	O
MU_STDOUT_FD	int
:	O
case	O
MU_STDERR_FD	int
:	O
flags	int
|=	O
MU_STREAM_WRITE	int
;	O
}	O
need_cache	int
=	O
flags	int
&	O
MU_STREAM_SEEK	int
;	O
if	O
(	O
need_cache	int
&&	O
(	O
flags	int
&	O
MU_STREAM_WRITE	int
)	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
flags	int
&	O
MU_STREAM_READ	int
)	O
filename	pointer
=	O
"<stdin>"	pointer
;	O
else	O
filename	pointer
=	O
"<stdout>"	pointer
;	O
rc	int
=	O
_mu_file_stream_create	function
(	O
&	O
fstr	pointer
,	O
sizeof	O
(	O
*	O
fstr	pointer
)	O
,	O
filename	pointer
,	O
fd	int
,	O
flags	int
&	O
~	O
MU_STREAM_SEEK	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
fstr	pointer
->	O
stream	pointer
.	O
flags	int
|=	O
_MU_STR_OPEN	int
;	O
fstr	pointer
->	O
stream	pointer
.	O
open	function
=	O
NULL	O
;	O
transport	pointer
=	O
(	O
mu_stream_t	pointer
)	O
fstr	pointer
;	O
mu_stream_set_buffer	function
(	O
transport	pointer
,	O
mu_buffer_line	int
,	O
0	int
)	O
;	O
if	O
(	O
need_cache	int
)	O
{	O
mu_stream_t	pointer
str	pointer
;	O
rc	int
=	O
mu_rdcache_stream_create	function
(	O
&	O
str	pointer
,	O
transport	pointer
,	O
flags	int
)	O
;	O
mu_stream_unref	function
(	O
transport	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
transport	pointer
=	O
str	pointer
;	O
}	O
*	O
pstream	pointer
=	O
transport	pointer
;	O
return	O
0	int
;	O
}	O
