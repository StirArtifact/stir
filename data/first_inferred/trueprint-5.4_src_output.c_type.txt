long	O
file_page_number	long
;	O
long	O
page_number	long
;	O
typedef	O
enum	O
{	O
INSERT	int
,	O
DELETE	int
,	O
NORMAL	int
}	O
diff_states	enum
;	O
static	O
void	O
add_char	function
(	O
short	O
position	short
,	O
char	O
character	char
,	O
char_status	enum
status	enum
,	O
char	O
*	O
line	pointer
,	O
char_status	enum
line_status	array
[	O
]	O
)	O
;	O
static	O
int	O
line_end	function
(	O
char	O
*	O
input_line	pointer
,	O
int	O
last_char_printed	int
)	O
;	O
static	O
stream_status	enum
printnextline	function
(	O
void	O
)	O
;	O
static	O
boolean	enum
blank_page	function
(	O
boolean	enum
print_page	enum
)	O
;	O
static	O
boolean	enum
no_clever_wrap	enum
;	O
static	O
short	O
min_line_length	short
;	O
static	O
short	O
tabsize	short
;	O
static	O
boolean	enum
no_function_page_breaks	enum
;	O
static	O
boolean	enum
new_sheet_after_file	enum
;	O
static	O
boolean	enum
no_expand_page_break	enum
;	O
static	O
long	O
line_number	long
;	O
static	O
boolean	enum
reached_end_of_sheet	enum
;	O
static	O
char	O
*	O
segment_ends	array
[	O
4	int
]	O
[	O
3	int
]	O
=	O
{	O
{	O
") BF setfont show "	pointer
,	O
") CF setfont So show "	pointer
,	O
") CF setfont show "	pointer
}	O
,	O
{	O
") IF setfont Bs "	pointer
,	O
") IF setfont So show "	pointer
,	O
") IF setfont show "	pointer
}	O
,	O
{	O
") BF setfont show "	pointer
,	O
") BF setfont So show "	pointer
,	O
") BF setfont show "	pointer
}	O
,	O
{	O
") BF setfont Ul show"	pointer
,	O
") CF setfont So Ul show "	pointer
,	O
") CF setfont Ul show "	pointer
}	O
,	O
}	O
;	O
void	O
init_output	function
(	O
void	O
)	O
{	O
line_number	long
=	O
0	int
;	O
page_number	long
=	O
0	int
;	O
}	O
void	O
setup_output	function
(	O
void	O
)	O
{	O
boolean_option	function
(	O
"b"	pointer
,	O
"no-page-break-after-function"	pointer
,	O
"page-break-after-function"	pointer
,	O
TRUE	int
,	O
&	O
no_function_page_breaks	enum
,	O
NULL	O
,	O
NULL	O
,	O
OPT_TEXT_FORMAT	int
,	O
"don't print page breaks at the end of functions"	pointer
,	O
"print page breaks at the end of functions"	pointer
)	O
;	O
boolean_option	function
(	O
NULL	O
,	O
"new-sheet-after-file"	pointer
,	O
"no-new-sheet-after-file"	pointer
,	O
TRUE	int
,	O
&	O
new_sheet_after_file	enum
,	O
NULL	O
,	O
NULL	O
,	O
OPT_TEXT_FORMAT	int
,	O
"Print each file on a new sheet of paper"	pointer
,	O
"Don't print each file on a new sheet of paper"	pointer
)	O
;	O
boolean_option	function
(	O
"W"	pointer
,	O
"no-intelligent-line-wrap"	pointer
,	O
"intelligent-line-wrap"	pointer
,	O
FALSE	int
,	O
&	O
no_clever_wrap	enum
,	O
NULL	O
,	O
NULL	O
,	O
OPT_TEXT_FORMAT	int
,	O
"Wrap lines at exactly the line-wrap column"	pointer
,	O
"Wrap lines intelligently at significant characters, such\n"	pointer
"    as a space"	pointer
)	O
;	O
short_option	function
(	O
"L"	pointer
,	O
"minimum-line-length"	pointer
,	O
10	int
,	O
NULL	O
,	O
0	int
,	O
5	int
,	O
4096	int
,	O
&	O
min_line_length	short
,	O
NULL	O
,	O
NULL	O
,	O
OPT_TEXT_FORMAT	int
,	O
"minimum line length permitted by intelligent line wrap (default 10)"	pointer
,	O
NULL	O
)	O
;	O
short_option	function
(	O
"T"	pointer
,	O
"tabsize"	pointer
,	O
8	int
,	O
NULL	O
,	O
0	int
,	O
1	int
,	O
20	int
,	O
&	O
tabsize	short
,	O
NULL	O
,	O
NULL	O
,	O
OPT_TEXT_FORMAT	int
,	O
"set tabsize (default 8)"	pointer
,	O
NULL	O
)	O
;	O
boolean_option	function
(	O
"E"	pointer
,	O
"ignore-form-feeds"	pointer
,	O
"form-feeds"	pointer
,	O
FALSE	int
,	O
&	O
no_expand_page_break	enum
,	O
NULL	O
,	O
NULL	O
,	O
OPT_TEXT_FORMAT	int
,	O
"don't expand form feed characters to new page"	pointer
,	O
"expand form feed characters to new page"	pointer
)	O
;	O
}	O
void	O
add_char	function
(	O
short	O
position	short
,	O
char	O
character	char
,	O
char_status	enum
status	enum
,	O
char	O
*	O
line	pointer
,	O
char_status	enum
line_status	array
[	O
]	O
)	O
{	O
if	O
(	O
position	short
>=	O
MAXLINELENGTH	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
CMD_NAME	pointer
": line too long!  Are you sure this is a program listing?\n"	pointer
)	O
)	O
;	O
line	pointer
[	O
position	short
]	O
=	O
character	char
;	O
line_status	array
[	O
position	short
]	O
=	O
status	enum
;	O
}	O
stream_status	enum
getnextline	function
(	O
stream_status	enum
(	O
*	O
get_input_char	pointer
)	O
(	O
char	O
*	O
,	O
char_status	enum
*	O
)	O
,	O
boolean	enum
*	O
blank_line	pointer
,	O
char	O
input_line	pointer
[	O
]	O
,	O
char_status	enum
input_status	array
[	O
]	O
)	O
{	O
char	O
input_char	char
;	O
short	O
line_position	short
=	O
0	int
;	O
stream_status	enum
retval	enum
=	O
STREAM_OK	int
;	O
char_status	enum
status	enum
;	O
*	O
blank_line	pointer
=	O
TRUE	int
;	O
do	O
{	O
retval	enum
|=	O
get_input_char	pointer
(	O
&	O
input_char	char
,	O
&	O
status	enum
)	O
;	O
if	O
(	O
!	O
isspace	function
(	O
input_char	char
)	O
)	O
*	O
blank_line	pointer
=	O
FALSE	int
;	O
if	O
(	O
input_char	char
==	O
'\t'	O
)	O
{	O
short	O
tab_stop	short
=	O
tabsize	short
+	O
line_position	short
-	O
line_position	short
%	O
tabsize	short
;	O
short	O
cursor	short
;	O
for	O
(	O
cursor	short
=	O
line_position	short
;	O
cursor	short
<	O
tab_stop	short
;	O
cursor	short
++	O
)	O
add_char	function
(	O
cursor	short
,	O
' '	O
,	O
status	enum
,	O
input_line	pointer
,	O
input_status	array
)	O
;	O
line_position	short
=	O
tab_stop	short
;	O
}	O
else	O
if	O
(	O
input_char	char
==	O
'\n'	O
)	O
{	O
break	O
;	O
}	O
else	O
if	O
(	O
input_char	char
==	O
'\014'	O
)	O
{	O
if	O
(	O
no_expand_page_break	enum
==	O
FALSE	int
)	O
{	O
retval	enum
|=	O
STREAM_PAGE_END	int
;	O
add_char	function
(	O
line_position	short
++	O
,	O
' '	O
,	O
status	enum
,	O
input_line	pointer
,	O
input_status	array
)	O
;	O
}	O
else	O
{	O
add_char	function
(	O
line_position	short
++	O
,	O
'_'	O
,	O
status	enum
,	O
input_line	pointer
,	O
input_status	array
)	O
;	O
}	O
}	O
else	O
if	O
(	O
iscntrl	function
(	O
input_char	char
)	O
)	O
{	O
add_char	function
(	O
line_position	short
++	O
,	O
'_'	O
,	O
status	enum
,	O
input_line	pointer
,	O
input_status	array
)	O
;	O
}	O
else	O
{	O
add_char	function
(	O
line_position	short
++	O
,	O
input_char	char
,	O
status	enum
,	O
input_line	pointer
,	O
input_status	array
)	O
;	O
}	O
}	O
while	O
(	O
!	O
(	O
retval	enum
&	O
(	O
STREAM_FILE_END	int
)	O
)	O
)	O
;	O
input_line	pointer
[	O
line_position	short
]	O
=	O
0	int
;	O
return	O
(	O
retval	enum
)	O
;	O
}	O
int	O
line_end	function
(	O
char	O
*	O
input_line	pointer
,	O
int	O
last_char_printed	int
)	O
{	O
int	O
input_line_length	int
;	O
boolean	enum
got_end	enum
=	O
FALSE	int
;	O
short	O
break_index	short
;	O
int	O
output_line_end	int
;	O
input_line_length	int
=	O
(	O
int	O
)	O
strlen	function
(	O
input_line	pointer
)	O
;	O
dm	function
(	O
'O'	O
,	O
4	int
,	O
"output.c:line_end() line length is %d\n"	pointer
,	O
input_line_length	int
)	O
;	O
if	O
(	O
page_width	int
==	O
0	int
)	O
{	O
output_line_end	int
=	O
input_line_length	int
-	O
1	int
;	O
return	O
(	O
output_line_end	int
)	O
;	O
}	O
if	O
(	O
(	O
input_line_length	int
-	O
last_char_printed	int
)	O
>	O
page_width	int
)	O
{	O
if	O
(	O
no_clever_wrap	enum
==	O
TRUE	int
)	O
{	O
return	O
(	O
last_char_printed	int
+	O
page_width	int
)	O
;	O
}	O
for	O
(	O
break_index	short
=	O
0	int
;	O
break_index	short
<	O
BREAKSLENGTH	int
;	O
break_index	short
++	O
)	O
{	O
for	O
(	O
output_line_end	int
=	O
last_char_printed	int
+	O
page_width	int
;	O
output_line_end	int
>	O
last_char_printed	int
+	O
min_line_length	short
;	O
output_line_end	int
--	O
)	O
if	O
(	O
input_line	pointer
[	O
output_line_end	int
]	O
==	O
BREAKS	pointer
[	O
break_index	short
]	O
)	O
{	O
got_end	enum
=	O
TRUE	int
;	O
break	O
;	O
}	O
if	O
(	O
got_end	enum
==	O
TRUE	int
)	O
break	O
;	O
}	O
if	O
(	O
got_end	enum
==	O
FALSE	int
)	O
output_line_end	int
=	O
last_char_printed	int
+	O
page_width	int
;	O
if	O
(	O
output_line_end	int
>=	O
input_line_length	int
)	O
output_line_end	int
=	O
input_line_length	int
;	O
}	O
else	O
output_line_end	int
=	O
input_line_length	int
-	O
1	int
;	O
return	O
(	O
output_line_end	int
)	O
;	O
}	O
stream_status	enum
printnextline	function
(	O
)	O
{	O
static	O
char	O
input_line	pointer
[	O
MAXLINELENGTH	int
]	O
;	O
static	O
char_status	enum
input_status	array
[	O
MAXLINELENGTH	int
]	O
;	O
static	O
int	O
last_char_printed	int
;	O
static	O
int	O
input_line_length	int
=	O
0	int
;	O
int	O
output_line_end	int
;	O
static	O
stream_status	enum
retval	enum
=	O
STREAM_OK	int
;	O
int	O
output_char_idx	int
;	O
boolean	enum
first_line_segment	enum
=	O
FALSE	int
;	O
short	O
count	short
;	O
static	O
diff_states	enum
diff_state	enum
=	O
NORMAL	int
;	O
boolean	enum
blank_line	pointer
;	O
char_status	enum
last_char_status	enum
;	O
if	O
(	O
input_line_length	int
==	O
0	int
)	O
{	O
dm	function
(	O
'O'	O
,	O
4	int
,	O
"output.c:printnextline() Need new line\n"	pointer
)	O
;	O
switch	O
(	O
diff_state	enum
)	O
{	O
case	O
NORMAL	int
:	O
dm	function
(	O
'O'	O
,	O
4	int
,	O
"output.c:printnextline() diff_state is NORMAL\n"	pointer
)	O
;	O
if	O
(	O
getdelline	function
(	O
line_number	long
+	O
1	int
,	O
input_line	pointer
,	O
input_status	array
)	O
)	O
{	O
dm	function
(	O
'O'	O
,	O
4	int
,	O
"output.c:printnextline() Found deleted line - diff_state is now DELETE\n"	pointer
)	O
;	O
diff_state	enum
=	O
DELETE	int
;	O
}	O
else	O
{	O
line_number	long
+=	O
1	int
;	O
retval	enum
=	O
getnextline	function
(	O
get_char	pointer
,	O
&	O
blank_line	pointer
,	O
input_line	pointer
,	O
input_status	array
)	O
;	O
if	O
(	O
line_inserted	function
(	O
line_number	long
)	O
)	O
{	O
dm	function
(	O
'O'	O
,	O
4	int
,	O
"output.c:printnextline() This line is inserted - diff_state is now INSERT\n"	pointer
)	O
;	O
diff_state	enum
=	O
INSERT	int
;	O
}	O
else	O
{	O
dm	function
(	O
'O'	O
,	O
4	int
,	O
"output.c:printnextline() Nothing unusual - diff_state is still NORMAL\n"	pointer
)	O
;	O
diff_state	enum
=	O
NORMAL	int
;	O
}	O
}	O
break	O
;	O
case	O
DELETE	int
:	O
dm	function
(	O
'O'	O
,	O
4	int
,	O
"output.c:printnextline() diff_state is DELETE\n"	pointer
)	O
;	O
break	O
;	O
case	O
INSERT	int
:	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
input_line_length	int
=	O
(	O
int	O
)	O
strlen	function
(	O
input_line	pointer
)	O
;	O
last_char_printed	int
=	O
-	O
1	int
;	O
first_line_segment	enum
=	O
TRUE	int
;	O
if	O
(	O
diff_state	enum
!=	O
NORMAL	int
)	O
page_has_changed	function
(	O
page_number	long
)	O
;	O
if	O
(	O
pass	short
==	O
1	int
)	O
{	O
if	O
(	O
diff_state	enum
==	O
DELETE	int
)	O
{	O
dm	function
(	O
'O'	O
,	O
4	int
,	O
"output.c:printnextline() Printing line with diff state DELETE\n"	pointer
)	O
;	O
if	O
(	O
(	O
no_show_line_number	enum
==	O
FALSE	int
)	O
||	O
(	O
no_show_indent_level	enum
==	O
FALSE	int
)	O
)	O
PUTS	O
(	O
"Lpt (-          ) CFs setfont show ("	pointer
)	O
;	O
else	O
PUTS	O
(	O
"Lpt (-) CFs setfont show ("	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
diff_state	enum
==	O
INSERT	int
)	O
{	O
dm	function
(	O
'O'	O
,	O
4	int
,	O
"output.c:printnextline() Printing line with diff state INSERT\n"	pointer
)	O
;	O
PUTS	O
(	O
"Lpt BFs setfont (+"	pointer
)	O
;	O
}	O
else	O
{	O
dm	function
(	O
'O'	O
,	O
4	int
,	O
"output.c:printnextline() Printing line with diff state NORMAL\n"	pointer
)	O
;	O
PUTS	O
(	O
"Lpt CFs setfont ( "	pointer
)	O
;	O
}	O
if	O
(	O
blank_line	pointer
)	O
PUTS	O
(	O
"          "	pointer
)	O
;	O
else	O
if	O
(	O
(	O
no_show_line_number	enum
==	O
FALSE	int
)	O
||	O
(	O
no_show_indent_level	enum
==	O
FALSE	int
)	O
)	O
{	O
if	O
(	O
no_show_line_number	enum
==	O
FALSE	int
)	O
printf	function
(	O
"%5ld "	pointer
,	O
line_number	long
)	O
;	O
else	O
PUTS	O
(	O
"      "	pointer
)	O
;	O
if	O
(	O
(	O
no_show_indent_level	enum
==	O
FALSE	int
)	O
&&	O
(	O
braces_depth	short
!=	O
0	int
)	O
)	O
printf	function
(	O
"%2d  "	pointer
,	O
braces_depth	short
)	O
;	O
else	O
PUTS	O
(	O
"    "	pointer
)	O
;	O
}	O
PUTS	O
(	O
") show ("	pointer
)	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
pass	short
==	O
1	int
)	O
{	O
if	O
(	O
diff_state	enum
==	O
DELETE	int
)	O
{	O
dm	function
(	O
'O'	O
,	O
4	int
,	O
"output.c:printnextline() Printing line with diff state DELETE\n"	pointer
)	O
;	O
PUTS	O
(	O
"Lpt CFs setfont ( "	pointer
)	O
;	O
}	O
else	O
if	O
(	O
diff_state	enum
==	O
INSERT	int
)	O
{	O
dm	function
(	O
'O'	O
,	O
4	int
,	O
"output.c:printnextline() Printing line with diff state INSERT\n"	pointer
)	O
;	O
PUTS	O
(	O
"Lpt BFs setfont ( "	pointer
)	O
;	O
}	O
else	O
{	O
dm	function
(	O
'O'	O
,	O
4	int
,	O
"output.c:printnextline() Printing line with diff state NORMAL\n"	pointer
)	O
;	O
PUTS	O
(	O
"Lpt CFs setfont ( "	pointer
)	O
;	O
}	O
if	O
(	O
(	O
no_show_line_number	enum
==	O
FALSE	int
)	O
||	O
(	O
no_show_indent_level	enum
==	O
FALSE	int
)	O
)	O
PUTS	O
(	O
"          "	pointer
)	O
;	O
PUTS	O
(	O
") show ("	pointer
)	O
;	O
}	O
}	O
output_line_end	int
=	O
line_end	function
(	O
input_line	pointer
,	O
last_char_printed	int
)	O
;	O
if	O
(	O
pass	short
==	O
1	int
)	O
{	O
output_char_idx	int
=	O
last_char_printed	int
;	O
if	O
(	O
(	O
no_clever_wrap	enum
==	O
FALSE	int
)	O
&&	O
!	O
first_line_segment	enum
)	O
{	O
int	O
leading_spaces	int
=	O
page_width	int
-	O
(	O
output_line_end	int
-	O
last_char_printed	int
)	O
;	O
for	O
(	O
count	short
=	O
1	int
;	O
count	short
<	O
leading_spaces	int
;	O
count	short
++	O
)	O
putchar	function
(	O
' '	O
)	O
;	O
}	O
last_char_status	enum
=	O
input_status	array
[	O
output_char_idx	int
+	O
1	int
]	O
;	O
while	O
(	O
output_char_idx	int
<	O
output_line_end	int
)	O
{	O
output_char_idx	int
+=	O
1	int
;	O
if	O
(	O
last_char_status	enum
!=	O
input_status	array
[	O
output_char_idx	int
]	O
)	O
{	O
PUTS	O
(	O
segment_ends	array
[	O
last_char_status	enum
]	O
[	O
diff_state	enum
]	O
)	O
;	O
PUTS	O
(	O
"("	pointer
)	O
;	O
}	O
switch	O
(	O
input_line	pointer
[	O
output_char_idx	int
]	O
)	O
{	O
case	O
'('	O
:	O
case	O
')'	O
:	O
case	O
'\\'	O
:	O
putchar	function
(	O
'\\'	O
)	O
;	O
break	O
;	O
default	O
:	O
;	O
}	O
putchar	function
(	O
input_line	pointer
[	O
output_char_idx	int
]	O
)	O
;	O
last_char_status	enum
=	O
input_status	array
[	O
output_char_idx	int
]	O
;	O
}	O
PUTS	O
(	O
segment_ends	array
[	O
last_char_status	enum
]	O
[	O
diff_state	enum
]	O
)	O
;	O
PUTS	O
(	O
" Nl\n"	pointer
)	O
;	O
output_char_idx	int
++	O
;	O
}	O
last_char_printed	int
=	O
output_line_end	int
;	O
if	O
(	O
last_char_printed	int
==	O
input_line_length	int
-	O
1	int
)	O
{	O
input_line_length	int
=	O
0	int
;	O
if	O
(	O
getdelline	function
(	O
line_number	long
+	O
1	int
,	O
input_line	pointer
,	O
input_status	array
)	O
)	O
{	O
diff_state	enum
=	O
DELETE	int
;	O
dm	function
(	O
'O'	O
,	O
3	int
,	O
"output.c:printnextline() Return value is STREAM_OK\n"	pointer
)	O
;	O
return	O
(	O
STREAM_OK	int
)	O
;	O
}	O
diff_state	enum
=	O
NORMAL	int
;	O
if	O
(	O
retval	enum
&	O
STREAM_FILE_END	int
)	O
{	O
line_number	long
=	O
0	int
;	O
retval	enum
=	O
STREAM_OK	int
;	O
dm	function
(	O
'O'	O
,	O
3	int
,	O
"output.c:printnextline() Return value is STREAM_FILE_END\n"	pointer
)	O
;	O
return	O
(	O
STREAM_FILE_END	int
)	O
;	O
}	O
dm	function
(	O
'O'	O
,	O
3	int
,	O
"output.c:printnextline() Return value is %x\n"	pointer
,	O
retval	enum
)	O
;	O
return	O
(	O
retval	enum
)	O
;	O
}	O
else	O
{	O
dm	function
(	O
'O'	O
,	O
3	int
,	O
"output.c:printnextline() Not fully printed this line - return value is LINE\n"	pointer
)	O
;	O
return	O
(	O
STREAM_OK	int
)	O
;	O
}	O
}	O
boolean	enum
blank_page	function
(	O
boolean	enum
output_page	enum
)	O
{	O
file_page_number	long
+=	O
1	int
;	O
page_number	long
+=	O
1	int
;	O
print_text_header	function
(	O
page_number	long
,	O
total_pages	long
)	O
;	O
return	O
PS_endpage	function
(	O
output_page	enum
)	O
;	O
}	O
boolean	enum
print_page	enum
(	O
void	O
)	O
{	O
short	O
page_line_number	short
=	O
0	int
;	O
stream_status	enum
retval	enum
=	O
STREAM_OK	int
;	O
file_page_number	long
+=	O
1	int
;	O
page_number	long
+=	O
1	int
;	O
dm	function
(	O
'O'	O
,	O
2	int
,	O
"output.c:print_page() Printing file %d page %d, filepage %d, pass %d\n"	pointer
,	O
file_number	int
,	O
page_number	long
,	O
file_page_number	long
,	O
pass	short
)	O
;	O
print_text_header	function
(	O
page_number	long
,	O
total_pages	long
)	O
;	O
while	O
(	O
page_line_number	short
<	O
page_length	int
)	O
{	O
dm	function
(	O
'O'	O
,	O
3	int
,	O
"output.c:print_page() Printing line %d\n"	pointer
,	O
page_line_number	short
)	O
;	O
retval	enum
=	O
printnextline	function
(	O
)	O
;	O
page_line_number	short
+=	O
1	int
;	O
if	O
(	O
(	O
retval	enum
&	O
(	O
STREAM_PAGE_END	int
|	O
STREAM_FILE_END	int
)	O
)	O
||	O
(	O
(	O
retval	enum
&	O
STREAM_FUNCTION_END	int
)	O
&&	O
(	O
no_function_page_breaks	enum
==	O
FALSE	int
)	O
)	O
)	O
break	O
;	O
}	O
reached_end_of_sheet	enum
=	O
PS_endpage	function
(	O
print_prompt	function
(	O
PAGE_BODY	int
,	O
file_page_number	long
,	O
file_name	function
(	O
file_number	int
)	O
)	O
)	O
;	O
dm	function
(	O
'O'	O
,	O
2	int
,	O
"output.c:print_page() retval %x\n"	pointer
,	O
retval	enum
)	O
;	O
return	O
(	O
!	O
(	O
retval	enum
&	O
STREAM_FILE_END	int
)	O
)	O
;	O
}	O
void	O
print_file	function
(	O
void	O
)	O
{	O
file_page_number	long
=	O
0	int
;	O
set_get_char	function
(	O
current_filename	pointer
)	O
;	O
while	O
(	O
print_page	enum
(	O
)	O
)	O
;	O
if	O
(	O
new_sheet_after_file	enum
)	O
{	O
fill_sheet_with_blank_pages	function
(	O
)	O
;	O
}	O
}	O
void	O
fill_sheet_with_blank_pages	function
(	O
void	O
)	O
{	O
while	O
(	O
!	O
reached_end_of_sheet	enum
)	O
{	O
dm	function
(	O
'O'	O
,	O
3	int
,	O
"output.c:print_page() Printing a blank page\n"	pointer
)	O
;	O
reached_end_of_sheet	enum
=	O
blank_page	function
(	O
print_prompt	function
(	O
PAGE_BLANK	int
,	O
0	int
,	O
NULL	O
)	O
)	O
;	O
}	O
}	O
