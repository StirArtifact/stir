typedef	O
struct	O
{	O
gsl_matrix	struct
*	O
JTJ	pointer
;	O
gsl_matrix	struct
*	O
work_JTJ	pointer
;	O
gsl_vector	struct
*	O
rhs	pointer
;	O
gsl_vector	struct
*	O
work3p	pointer
;	O
double	O
mu	double
;	O
}	O
cholesky_state_t	struct
;	O
static	O
void	O
*	O
cholesky_alloc	function
(	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
p	int
)	O
;	O
static	O
int	O
cholesky_init	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
cholesky_presolve	function
(	O
const	O
double	O
mu	double
,	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
cholesky_solve	function
(	O
const	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
cholesky_solve_rhs	function
(	O
const	O
gsl_vector	struct
*	O
b	double
,	O
gsl_vector	struct
*	O
x	double
,	O
cholesky_state_t	struct
*	O
state	pointer
)	O
;	O
static	O
int	O
cholesky_regularize	function
(	O
const	O
double	O
mu	double
,	O
const	O
gsl_vector	struct
*	O
diag	pointer
,	O
gsl_matrix	struct
*	O
A	pointer
,	O
cholesky_state_t	struct
*	O
state	pointer
)	O
;	O
static	O
void	O
*	O
cholesky_alloc	function
(	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
p	int
)	O
{	O
cholesky_state_t	struct
*	O
state	pointer
;	O
(	O
void	O
)	O
n	int
;	O
state	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
cholesky_state_t	struct
)	O
)	O
;	O
if	O
(	O
state	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate cholesky state"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
JTJ	pointer
=	O
gsl_matrix_alloc	function
(	O
p	int
,	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
JTJ	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for JTJ"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
work_JTJ	pointer
=	O
gsl_matrix_alloc	function
(	O
p	int
,	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
work_JTJ	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for JTJ workspace"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
rhs	pointer
=	O
gsl_vector_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
rhs	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for rhs"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
work3p	pointer
=	O
gsl_vector_alloc	function
(	O
3	int
*	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
work3p	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for work3p"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
mu	double
=	O
-	O
1.0	int
;	O
return	O
state	pointer
;	O
}	O
static	O
void	O
cholesky_free	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
cholesky_state_t	struct
*	O
state	pointer
=	O
(	O
cholesky_state_t	struct
*	O
)	O
vstate	pointer
;	O
if	O
(	O
state	pointer
->	O
JTJ	pointer
)	O
gsl_matrix_free	function
(	O
state	pointer
->	O
JTJ	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
work_JTJ	pointer
)	O
gsl_matrix_free	function
(	O
state	pointer
->	O
work_JTJ	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
rhs	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
rhs	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
work3p	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
work3p	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
}	O
static	O
int	O
cholesky_init	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
trust_state	pointer
=	O
(	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
)	O
vtrust_state	pointer
;	O
cholesky_state_t	struct
*	O
state	pointer
=	O
(	O
cholesky_state_t	struct
*	O
)	O
vstate	pointer
;	O
gsl_blas_dsyrk	function
(	O
CblasLower	int
,	O
CblasTrans	int
,	O
1.0	int
,	O
trust_state	pointer
->	O
J	pointer
,	O
0.0	int
,	O
state	pointer
->	O
JTJ	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
cholesky_presolve	function
(	O
const	O
double	O
mu	double
,	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
trust_state	pointer
=	O
(	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
)	O
vtrust_state	pointer
;	O
cholesky_state_t	struct
*	O
state	pointer
=	O
(	O
cholesky_state_t	struct
*	O
)	O
vstate	pointer
;	O
gsl_matrix	struct
*	O
JTJ	pointer
=	O
state	pointer
->	O
work_JTJ	pointer
;	O
const	O
gsl_vector	struct
*	O
diag	pointer
=	O
trust_state	pointer
->	O
diag	pointer
;	O
int	O
status	int
;	O
gsl_matrix_tricpy	function
(	O
CblasLower	int
,	O
CblasNonUnit	int
,	O
JTJ	pointer
,	O
state	pointer
->	O
JTJ	pointer
)	O
;	O
status	int
=	O
cholesky_regularize	function
(	O
mu	double
,	O
diag	pointer
,	O
JTJ	pointer
,	O
state	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
gsl_linalg_cholesky_decomp1	function
(	O
JTJ	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
state	pointer
->	O
mu	double
=	O
mu	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
cholesky_solve	function
(	O
const	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
trust_state	pointer
=	O
(	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
)	O
vtrust_state	pointer
;	O
cholesky_state_t	struct
*	O
state	pointer
=	O
(	O
cholesky_state_t	struct
*	O
)	O
vstate	pointer
;	O
int	O
status	int
;	O
gsl_blas_dgemv	function
(	O
CblasTrans	int
,	O
-	O
1.0	int
,	O
trust_state	pointer
->	O
J	pointer
,	O
f	pointer
,	O
0.0	int
,	O
state	pointer
->	O
rhs	pointer
)	O
;	O
status	int
=	O
cholesky_solve_rhs	function
(	O
state	pointer
->	O
rhs	pointer
,	O
x	double
,	O
state	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
cholesky_rcond	function
(	O
double	O
*	O
rcond	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
int	O
status	int
;	O
cholesky_state_t	struct
*	O
state	pointer
=	O
(	O
cholesky_state_t	struct
*	O
)	O
vstate	pointer
;	O
double	O
rcond_JTJ	double
;	O
if	O
(	O
state	pointer
->	O
mu	double
<	O
0.0	int
)	O
{	O
*	O
rcond	pointer
=	O
0.0	int
;	O
return	O
GSL_EFAILED	int
;	O
}	O
if	O
(	O
state	pointer
->	O
mu	double
!=	O
0	int
)	O
{	O
gsl_matrix_tricpy	function
(	O
CblasLower	int
,	O
CblasNonUnit	int
,	O
state	pointer
->	O
work_JTJ	pointer
,	O
state	pointer
->	O
JTJ	pointer
)	O
;	O
status	int
=	O
gsl_linalg_cholesky_decomp1	function
(	O
state	pointer
->	O
work_JTJ	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
}	O
status	int
=	O
gsl_linalg_cholesky_rcond	function
(	O
state	pointer
->	O
work_JTJ	pointer
,	O
&	O
rcond_JTJ	double
,	O
state	pointer
->	O
work3p	pointer
)	O
;	O
if	O
(	O
status	int
==	O
GSL_SUCCESS	int
)	O
*	O
rcond	pointer
=	O
sqrt	function
(	O
rcond_JTJ	double
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
cholesky_solve_rhs	function
(	O
const	O
gsl_vector	struct
*	O
b	double
,	O
gsl_vector	struct
*	O
x	double
,	O
cholesky_state_t	struct
*	O
state	pointer
)	O
{	O
int	O
status	int
;	O
gsl_matrix	struct
*	O
JTJ	pointer
=	O
state	pointer
->	O
work_JTJ	pointer
;	O
status	int
=	O
gsl_linalg_cholesky_solve	function
(	O
JTJ	pointer
,	O
b	double
,	O
x	double
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
cholesky_regularize	function
(	O
const	O
double	O
mu	double
,	O
const	O
gsl_vector	struct
*	O
diag	pointer
,	O
gsl_matrix	struct
*	O
A	pointer
,	O
cholesky_state_t	struct
*	O
state	pointer
)	O
{	O
(	O
void	O
)	O
state	pointer
;	O
if	O
(	O
mu	double
!=	O
0.0	int
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
diag	pointer
->	O
size	long
;	O
++	O
i	long
)	O
{	O
double	O
di	double
=	O
gsl_vector_get	function
(	O
diag	pointer
,	O
i	long
)	O
;	O
double	O
*	O
Aii	pointer
=	O
gsl_matrix_ptr	function
(	O
A	pointer
,	O
i	long
,	O
i	long
)	O
;	O
*	O
Aii	pointer
+=	O
mu	double
*	O
di	double
*	O
di	double
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
const	O
gsl_multifit_nlinear_solver	struct
cholesky_type	struct
=	O
{	O
"cholesky"	pointer
,	O
cholesky_alloc	function
,	O
cholesky_init	function
,	O
cholesky_presolve	function
,	O
cholesky_solve	function
,	O
cholesky_rcond	function
,	O
cholesky_free	function
}	O
;	O
const	O
gsl_multifit_nlinear_solver	struct
*	O
gsl_multifit_nlinear_solver_cholesky	pointer
=	O
&	O
cholesky_type	struct
;	O
