extern	O
struct	O
layer	struct
*	O
flayer	pointer
;	O
static	O
void	O
ListProcess	function
__P	O
(	O
(	O
char	O
*	O
*	O
,	O
int	O
*	O
)	O
)	O
;	O
static	O
void	O
ListAbort	function
__P	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
void	O
ListRedisplayLine	function
__P	O
(	O
(	O
int	O
,	O
int	O
,	O
int	O
,	O
int	O
)	O
)	O
;	O
static	O
void	O
ListClearLine	function
__P	O
(	O
(	O
int	O
,	O
int	O
,	O
int	O
,	O
int	O
)	O
)	O
;	O
static	O
int	O
ListRewrite	function
__P	O
(	O
(	O
int	O
,	O
int	O
,	O
int	O
,	O
struct	O
mchar	struct
*	O
,	O
int	O
)	O
)	O
;	O
static	O
int	O
ListResize	function
__P	O
(	O
(	O
int	O
,	O
int	O
)	O
)	O
;	O
static	O
void	O
ListRestore	function
__P	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
void	O
ListFree	function
__P	O
(	O
(	O
void	O
*	O
)	O
)	O
;	O
struct	O
LayFuncs	struct
ListLf	struct
=	O
{	O
ListProcess	function
,	O
ListAbort	function
,	O
ListRedisplayLine	function
,	O
ListClearLine	function
,	O
ListRewrite	function
,	O
ListResize	function
,	O
ListRestore	function
,	O
ListFree	function
}	O
;	O
struct	O
ListData	struct
*	O
glist_display	function
(	O
struct	O
GenericList	struct
*	O
list	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
ListData	struct
*	O
ldata	pointer
;	O
if	O
(	O
InitOverlayPage	function
(	O
sizeof	O
(	O
struct	O
ListData	struct
)	O
,	O
&	O
ListLf	struct
,	O
0	int
)	O
)	O
return	O
NULL	O
;	O
ldata	pointer
=	O
flayer	pointer
->	O
l_data	pointer
;	O
ldata	pointer
->	O
name	pointer
=	O
name	pointer
;	O
ldata	pointer
->	O
list_fn	pointer
=	O
list	pointer
;	O
flayer	pointer
->	O
l_mode	int
=	O
1	int
;	O
flayer	pointer
->	O
l_x	int
=	O
0	int
;	O
flayer	pointer
->	O
l_y	int
=	O
flayer	pointer
->	O
l_height	int
-	O
1	int
;	O
return	O
ldata	pointer
;	O
}	O
static	O
void	O
glist_decide_top	function
(	O
struct	O
ListData	struct
*	O
ldata	pointer
)	O
{	O
int	O
count	int
=	O
flayer	pointer
->	O
l_height	int
-	O
5	int
;	O
struct	O
ListRow	struct
*	O
top	int
=	O
ldata	pointer
->	O
selected	pointer
;	O
for	O
(	O
;	O
count	int
&&	O
top	int
!=	O
ldata	pointer
->	O
root	pointer
;	O
top	int
=	O
top	int
->	O
prev	pointer
,	O
count	int
--	O
)	O
;	O
ldata	pointer
->	O
top	int
=	O
top	int
;	O
}	O
static	O
struct	O
ListRow	struct
*	O
glist_search_dir	function
(	O
struct	O
ListData	struct
*	O
ldata	pointer
,	O
struct	O
ListRow	struct
*	O
start	int
,	O
int	O
dir	pointer
)	O
{	O
struct	O
ListRow	struct
*	O
row	pointer
=	O
(	O
dir	pointer
==	O
1	int
)	O
?	O
start	int
->	O
next	pointer
:	O
start	int
->	O
prev	pointer
;	O
for	O
(	O
;	O
row	pointer
;	O
row	pointer
=	O
(	O
dir	pointer
==	O
1	int
)	O
?	O
row	pointer
->	O
next	pointer
:	O
row	pointer
->	O
prev	pointer
)	O
if	O
(	O
ldata	pointer
->	O
list_fn	pointer
->	O
gl_matchrow	pointer
(	O
ldata	pointer
,	O
row	pointer
,	O
ldata	pointer
->	O
search	pointer
)	O
)	O
return	O
row	pointer
;	O
if	O
(	O
dir	pointer
==	O
1	int
)	O
row	pointer
=	O
ldata	pointer
->	O
root	pointer
;	O
else	O
{	O
if	O
(	O
!	O
start	int
->	O
next	pointer
)	O
row	pointer
=	O
start	int
;	O
else	O
for	O
(	O
row	pointer
=	O
start	int
->	O
next	pointer
;	O
row	pointer
->	O
next	pointer
;	O
row	pointer
=	O
row	pointer
->	O
next	pointer
)	O
;	O
}	O
for	O
(	O
;	O
row	pointer
!=	O
start	int
;	O
row	pointer
=	O
(	O
dir	pointer
==	O
1	int
)	O
?	O
row	pointer
->	O
next	pointer
:	O
row	pointer
->	O
prev	pointer
)	O
if	O
(	O
ldata	pointer
->	O
list_fn	pointer
->	O
gl_matchrow	pointer
(	O
ldata	pointer
,	O
row	pointer
,	O
ldata	pointer
->	O
search	pointer
)	O
)	O
break	O
;	O
return	O
row	pointer
;	O
}	O
static	O
void	O
glist_search	function
(	O
char	O
*	O
buf	pointer
,	O
int	O
len	int
,	O
char	O
*	O
data	pointer
)	O
{	O
struct	O
ListData	struct
*	O
ldata	pointer
=	O
(	O
struct	O
ListData	struct
*	O
)	O
data	pointer
;	O
struct	O
ListRow	struct
*	O
row	pointer
;	O
if	O
(	O
ldata	pointer
->	O
search	pointer
)	O
Free	O
(	O
ldata	pointer
->	O
search	pointer
)	O
;	O
if	O
(	O
len	int
>	O
0	int
)	O
ldata	pointer
->	O
search	pointer
=	O
SaveStr	function
(	O
buf	pointer
)	O
;	O
else	O
return	O
;	O
for	O
(	O
row	pointer
=	O
ldata	pointer
->	O
selected	pointer
;	O
row	pointer
;	O
row	pointer
=	O
row	pointer
->	O
next	pointer
)	O
if	O
(	O
ldata	pointer
->	O
list_fn	pointer
->	O
gl_matchrow	pointer
(	O
ldata	pointer
,	O
row	pointer
,	O
ldata	pointer
->	O
search	pointer
)	O
)	O
break	O
;	O
if	O
(	O
!	O
row	pointer
)	O
for	O
(	O
row	pointer
=	O
ldata	pointer
->	O
root	pointer
;	O
row	pointer
!=	O
ldata	pointer
->	O
selected	pointer
;	O
row	pointer
=	O
row	pointer
->	O
next	pointer
)	O
if	O
(	O
ldata	pointer
->	O
list_fn	pointer
->	O
gl_matchrow	pointer
(	O
ldata	pointer
,	O
row	pointer
,	O
ldata	pointer
->	O
search	pointer
)	O
)	O
break	O
;	O
if	O
(	O
row	pointer
==	O
ldata	pointer
->	O
selected	pointer
)	O
return	O
;	O
ldata	pointer
->	O
selected	pointer
=	O
row	pointer
;	O
if	O
(	O
ldata	pointer
->	O
selected	pointer
->	O
y	int
==	O
-	O
1	int
)	O
glist_decide_top	function
(	O
ldata	pointer
)	O
;	O
glist_display_all	function
(	O
ldata	pointer
)	O
;	O
}	O
static	O
void	O
ListProcess	function
(	O
char	O
*	O
*	O
ppbuf	pointer
,	O
int	O
*	O
plen	pointer
)	O
{	O
struct	O
ListData	struct
*	O
ldata	pointer
=	O
flayer	pointer
->	O
l_data	pointer
;	O
int	O
count	int
=	O
0	int
;	O
while	O
(	O
*	O
plen	pointer
>	O
0	int
)	O
{	O
struct	O
ListRow	struct
*	O
old	pointer
;	O
unsigned	O
char	O
ch	char
;	O
if	O
(	O
!	O
flayer	pointer
->	O
l_mouseevent	struct
.	O
start	int
&&	O
ldata	pointer
->	O
list_fn	pointer
->	O
gl_pinput	pointer
&&	O
ldata	pointer
->	O
list_fn	pointer
->	O
gl_pinput	pointer
(	O
ldata	pointer
,	O
ppbuf	pointer
,	O
plen	pointer
)	O
)	O
continue	O
;	O
ch	char
=	O
*	O
*	O
ppbuf	pointer
;	O
++	O
*	O
ppbuf	pointer
;	O
--	O
*	O
plen	pointer
;	O
if	O
(	O
flayer	pointer
->	O
l_mouseevent	struct
.	O
start	int
)	O
{	O
int	O
r	int
=	O
LayProcessMouse	function
(	O
flayer	pointer
,	O
ch	char
)	O
;	O
if	O
(	O
r	int
==	O
-	O
1	int
)	O
{	O
LayProcessMouseSwitch	function
(	O
flayer	pointer
,	O
0	int
)	O
;	O
continue	O
;	O
}	O
else	O
{	O
if	O
(	O
r	int
)	O
ch	char
=	O
0222	int
;	O
else	O
continue	O
;	O
}	O
}	O
if	O
(	O
!	O
ldata	pointer
->	O
selected	pointer
)	O
{	O
*	O
plen	pointer
=	O
0	int
;	O
break	O
;	O
}	O
old	pointer
=	O
ldata	pointer
->	O
selected	pointer
;	O
processchar	O
:	O
switch	O
(	O
ch	char
)	O
{	O
case	O
' '	O
:	O
break	O
;	O
case	O
'\r'	O
:	O
case	O
'\n'	O
:	O
break	O
;	O
case	O
0220	int
:	O
case	O
16	int
:	O
case	O
'k'	O
:	O
if	O
(	O
!	O
ldata	pointer
->	O
selected	pointer
->	O
prev	pointer
)	O
break	O
;	O
ldata	pointer
->	O
selected	pointer
=	O
old	pointer
->	O
prev	pointer
;	O
break	O
;	O
case	O
0216	int
:	O
case	O
14	int
:	O
case	O
'j'	O
:	O
if	O
(	O
!	O
ldata	pointer
->	O
selected	pointer
->	O
next	pointer
)	O
break	O
;	O
ldata	pointer
->	O
selected	pointer
=	O
old	pointer
->	O
next	pointer
;	O
break	O
;	O
case	O
033	int
:	O
case	O
007	int
:	O
ListAbort	function
(	O
)	O
;	O
*	O
plen	pointer
=	O
0	int
;	O
return	O
;	O
case	O
0201	int
:	O
case	O
0001	int
:	O
ldata	pointer
->	O
selected	pointer
=	O
ldata	pointer
->	O
root	pointer
;	O
break	O
;	O
case	O
0205	int
:	O
case	O
0005	int
:	O
while	O
(	O
ldata	pointer
->	O
selected	pointer
->	O
next	pointer
)	O
ldata	pointer
->	O
selected	pointer
=	O
ldata	pointer
->	O
selected	pointer
->	O
next	pointer
;	O
if	O
(	O
ldata	pointer
->	O
selected	pointer
->	O
y	int
!=	O
-	O
1	int
)	O
{	O
}	O
break	O
;	O
case	O
0004	int
:	O
case	O
0006	int
:	O
count	int
=	O
(	O
flayer	pointer
->	O
l_height	int
-	O
4	int
)	O
>>	O
(	O
ch	char
==	O
0004	int
)	O
;	O
for	O
(	O
;	O
ldata	pointer
->	O
selected	pointer
->	O
next	pointer
&&	O
--	O
count	int
;	O
ldata	pointer
->	O
selected	pointer
=	O
ldata	pointer
->	O
selected	pointer
->	O
next	pointer
)	O
;	O
break	O
;	O
case	O
0025	int
:	O
case	O
0002	int
:	O
count	int
=	O
(	O
flayer	pointer
->	O
l_height	int
-	O
4	int
)	O
>>	O
(	O
ch	char
==	O
0025	int
)	O
;	O
for	O
(	O
;	O
ldata	pointer
->	O
selected	pointer
->	O
prev	pointer
&&	O
--	O
count	int
;	O
ldata	pointer
->	O
selected	pointer
=	O
ldata	pointer
->	O
selected	pointer
->	O
prev	pointer
)	O
;	O
break	O
;	O
case	O
'/'	O
:	O
if	O
(	O
ldata	pointer
->	O
list_fn	pointer
->	O
gl_matchrow	pointer
)	O
{	O
char	O
*	O
s	pointer
;	O
Input	function
(	O
"Search: "	pointer
,	O
80	int
,	O
INP_COOKED	int
,	O
glist_search	function
,	O
(	O
char	O
*	O
)	O
ldata	pointer
,	O
0	int
)	O
;	O
if	O
(	O
(	O
s	pointer
=	O
ldata	pointer
->	O
search	pointer
)	O
)	O
{	O
for	O
(	O
;	O
*	O
s	pointer
;	O
s	pointer
++	O
)	O
{	O
char	O
*	O
ss	pointer
=	O
s	pointer
;	O
int	O
n	int
=	O
1	int
;	O
LayProcess	O
(	O
&	O
ss	pointer
,	O
&	O
n	int
)	O
;	O
}	O
}	O
}	O
break	O
;	O
case	O
'n'	O
:	O
if	O
(	O
ldata	pointer
->	O
list_fn	pointer
->	O
gl_matchrow	pointer
&&	O
ldata	pointer
->	O
search	pointer
)	O
ldata	pointer
->	O
selected	pointer
=	O
glist_search_dir	function
(	O
ldata	pointer
,	O
ldata	pointer
->	O
selected	pointer
,	O
1	int
)	O
;	O
break	O
;	O
case	O
'N'	O
:	O
if	O
(	O
ldata	pointer
->	O
list_fn	pointer
->	O
gl_matchrow	pointer
&&	O
ldata	pointer
->	O
search	pointer
)	O
ldata	pointer
->	O
selected	pointer
=	O
glist_search_dir	function
(	O
ldata	pointer
,	O
ldata	pointer
->	O
selected	pointer
,	O
-	O
1	int
)	O
;	O
break	O
;	O
case	O
0222	int
:	O
if	O
(	O
flayer	pointer
->	O
l_mouseevent	struct
.	O
start	int
)	O
{	O
int	O
button	int
=	O
flayer	pointer
->	O
l_mouseevent	struct
.	O
buffer	array
[	O
0	int
]	O
;	O
if	O
(	O
button	int
==	O
'a'	O
)	O
ch	char
=	O
'j'	O
;	O
else	O
if	O
(	O
button	int
==	O
'`'	O
)	O
ch	char
=	O
'k'	O
;	O
else	O
if	O
(	O
button	int
==	O
' '	O
)	O
{	O
int	O
y	int
=	O
flayer	pointer
->	O
l_mouseevent	struct
.	O
buffer	array
[	O
2	int
]	O
;	O
struct	O
ListRow	struct
*	O
r	int
=	O
ldata	pointer
->	O
top	int
;	O
for	O
(	O
r	int
=	O
ldata	pointer
->	O
top	int
;	O
r	int
&&	O
r	int
->	O
y	int
!=	O
-	O
1	int
&&	O
r	int
->	O
y	int
!=	O
y	int
;	O
r	int
=	O
r	int
->	O
next	pointer
)	O
;	O
if	O
(	O
r	int
&&	O
r	int
->	O
y	int
==	O
y	int
)	O
ldata	pointer
->	O
selected	pointer
=	O
r	int
;	O
ch	char
=	O
0	int
;	O
}	O
else	O
ch	char
=	O
0	int
;	O
LayProcessMouseSwitch	function
(	O
flayer	pointer
,	O
0	int
)	O
;	O
if	O
(	O
ch	char
)	O
goto	O
processchar	O
;	O
}	O
else	O
LayProcessMouseSwitch	function
(	O
flayer	pointer
,	O
1	int
)	O
;	O
break	O
;	O
}	O
if	O
(	O
old	pointer
==	O
ldata	pointer
->	O
selected	pointer
)	O
continue	O
;	O
if	O
(	O
ldata	pointer
->	O
selected	pointer
->	O
y	int
==	O
-	O
1	int
)	O
{	O
glist_decide_top	function
(	O
ldata	pointer
)	O
;	O
glist_display_all	function
(	O
ldata	pointer
)	O
;	O
}	O
else	O
{	O
ldata	pointer
->	O
list_fn	pointer
->	O
gl_printrow	pointer
(	O
ldata	pointer
,	O
old	pointer
)	O
;	O
ldata	pointer
->	O
list_fn	pointer
->	O
gl_printrow	pointer
(	O
ldata	pointer
,	O
ldata	pointer
->	O
selected	pointer
)	O
;	O
flayer	pointer
->	O
l_y	int
=	O
ldata	pointer
->	O
selected	pointer
->	O
y	int
;	O
LaySetCursor	O
(	O
)	O
;	O
}	O
}	O
}	O
static	O
void	O
ListAbort	function
(	O
void	O
)	O
{	O
LAY_CALL_UP	O
(	O
LRefreshAll	function
(	O
flayer	pointer
,	O
0	int
)	O
)	O
;	O
ExitOverlayPage	function
(	O
)	O
;	O
}	O
static	O
void	O
ListFree	function
(	O
void	O
*	O
d	int
)	O
{	O
struct	O
ListData	struct
*	O
ldata	pointer
=	O
d	int
;	O
glist_remove_rows	function
(	O
ldata	pointer
)	O
;	O
if	O
(	O
ldata	pointer
->	O
list_fn	pointer
->	O
gl_free	pointer
)	O
ldata	pointer
->	O
list_fn	pointer
->	O
gl_free	pointer
(	O
ldata	pointer
)	O
;	O
if	O
(	O
ldata	pointer
->	O
search	pointer
)	O
Free	O
(	O
ldata	pointer
->	O
search	pointer
)	O
;	O
}	O
static	O
void	O
ListRedisplayLine	function
(	O
int	O
y	int
,	O
int	O
xs	int
,	O
int	O
xe	int
,	O
int	O
isblank	int
)	O
{	O
struct	O
ListData	struct
*	O
ldata	pointer
;	O
ASSERT	O
(	O
flayer	pointer
)	O
;	O
ldata	pointer
=	O
flayer	pointer
->	O
l_data	pointer
;	O
if	O
(	O
y	int
<	O
0	int
)	O
{	O
glist_display_all	function
(	O
ldata	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
isblank	int
)	O
LClearArea	function
(	O
flayer	pointer
,	O
xs	int
,	O
y	int
,	O
xe	int
,	O
y	int
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
ldata	pointer
->	O
top	int
&&	O
y	int
<	O
ldata	pointer
->	O
top	int
->	O
y	int
)	O
ldata	pointer
->	O
list_fn	pointer
->	O
gl_printheader	pointer
(	O
ldata	pointer
)	O
;	O
else	O
if	O
(	O
y	int
+	O
1	int
==	O
flayer	pointer
->	O
l_height	int
)	O
ldata	pointer
->	O
list_fn	pointer
->	O
gl_printfooter	pointer
(	O
ldata	pointer
)	O
;	O
else	O
{	O
struct	O
ListRow	struct
*	O
row	pointer
;	O
for	O
(	O
row	pointer
=	O
ldata	pointer
->	O
top	int
;	O
row	pointer
&&	O
row	pointer
->	O
y	int
!=	O
-	O
1	int
;	O
row	pointer
=	O
row	pointer
->	O
next	pointer
)	O
if	O
(	O
row	pointer
->	O
y	int
==	O
y	int
)	O
{	O
ldata	pointer
->	O
list_fn	pointer
->	O
gl_printrow	pointer
(	O
ldata	pointer
,	O
row	pointer
)	O
;	O
break	O
;	O
}	O
}	O
}	O
static	O
void	O
ListClearLine	function
(	O
int	O
y	int
,	O
int	O
xs	int
,	O
int	O
xe	int
,	O
int	O
bce	int
)	O
{	O
DefClearLine	function
(	O
y	int
,	O
xs	int
,	O
xe	int
,	O
bce	int
)	O
;	O
}	O
static	O
int	O
ListRewrite	function
(	O
int	O
y	int
,	O
int	O
xs	int
,	O
int	O
xe	int
,	O
struct	O
mchar	struct
*	O
rend	pointer
,	O
int	O
doit	int
)	O
{	O
return	O
EXPENSIVE	int
;	O
}	O
static	O
int	O
ListResize	function
(	O
int	O
wi	int
,	O
int	O
he	int
)	O
{	O
if	O
(	O
wi	int
<	O
10	int
||	O
he	int
<	O
5	int
)	O
return	O
-	O
1	int
;	O
flayer	pointer
->	O
l_width	int
=	O
wi	int
;	O
flayer	pointer
->	O
l_height	int
=	O
he	int
;	O
flayer	pointer
->	O
l_y	int
=	O
he	int
-	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
void	O
ListRestore	function
(	O
void	O
)	O
{	O
DefRestore	function
(	O
)	O
;	O
}	O
struct	O
ListRow	struct
*	O
glist_add_row	function
(	O
struct	O
ListData	struct
*	O
ldata	pointer
,	O
void	O
*	O
data	pointer
,	O
struct	O
ListRow	struct
*	O
after	pointer
)	O
{	O
struct	O
ListRow	struct
*	O
r	int
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
struct	O
ListRow	struct
)	O
)	O
;	O
r	int
->	O
data	pointer
=	O
data	pointer
;	O
if	O
(	O
after	pointer
)	O
{	O
r	int
->	O
next	pointer
=	O
after	pointer
->	O
next	pointer
;	O
r	int
->	O
prev	pointer
=	O
after	pointer
;	O
after	pointer
->	O
next	pointer
=	O
r	int
;	O
if	O
(	O
r	int
->	O
next	pointer
)	O
r	int
->	O
next	pointer
->	O
prev	pointer
=	O
r	int
;	O
}	O
else	O
{	O
r	int
->	O
next	pointer
=	O
ldata	pointer
->	O
root	pointer
;	O
if	O
(	O
ldata	pointer
->	O
root	pointer
)	O
ldata	pointer
->	O
root	pointer
->	O
prev	pointer
=	O
r	int
;	O
ldata	pointer
->	O
root	pointer
=	O
r	int
;	O
}	O
return	O
r	int
;	O
}	O
void	O
glist_remove_rows	function
(	O
struct	O
ListData	struct
*	O
ldata	pointer
)	O
{	O
struct	O
ListRow	struct
*	O
row	pointer
;	O
for	O
(	O
row	pointer
=	O
ldata	pointer
->	O
root	pointer
;	O
row	pointer
;	O
)	O
{	O
struct	O
ListRow	struct
*	O
r	int
=	O
row	pointer
;	O
row	pointer
=	O
row	pointer
->	O
next	pointer
;	O
ldata	pointer
->	O
list_fn	pointer
->	O
gl_freerow	pointer
(	O
ldata	pointer
,	O
r	int
)	O
;	O
free	function
(	O
r	int
)	O
;	O
}	O
ldata	pointer
->	O
root	pointer
=	O
ldata	pointer
->	O
selected	pointer
=	O
ldata	pointer
->	O
top	int
=	O
NULL	O
;	O
}	O
void	O
glist_display_all	function
(	O
struct	O
ListData	struct
*	O
list	pointer
)	O
{	O
int	O
y	int
;	O
struct	O
ListRow	struct
*	O
row	pointer
;	O
LClearAll	function
(	O
flayer	pointer
,	O
0	int
)	O
;	O
y	int
=	O
list	pointer
->	O
list_fn	pointer
->	O
gl_printheader	pointer
(	O
list	pointer
)	O
;	O
if	O
(	O
!	O
list	pointer
->	O
top	int
)	O
list	pointer
->	O
top	int
=	O
list	pointer
->	O
root	pointer
;	O
if	O
(	O
!	O
list	pointer
->	O
selected	pointer
)	O
list	pointer
->	O
selected	pointer
=	O
list	pointer
->	O
root	pointer
;	O
for	O
(	O
row	pointer
=	O
list	pointer
->	O
root	pointer
;	O
row	pointer
!=	O
list	pointer
->	O
top	int
;	O
row	pointer
=	O
row	pointer
->	O
next	pointer
)	O
row	pointer
->	O
y	int
=	O
-	O
1	int
;	O
for	O
(	O
row	pointer
=	O
list	pointer
->	O
top	int
;	O
row	pointer
;	O
row	pointer
=	O
row	pointer
->	O
next	pointer
)	O
{	O
row	pointer
->	O
y	int
=	O
y	int
++	O
;	O
if	O
(	O
!	O
list	pointer
->	O
list_fn	pointer
->	O
gl_printrow	pointer
(	O
list	pointer
,	O
row	pointer
)	O
)	O
{	O
row	pointer
->	O
y	int
=	O
-	O
1	int
;	O
y	int
--	O
;	O
}	O
if	O
(	O
y	int
+	O
1	int
==	O
flayer	pointer
->	O
l_height	int
)	O
break	O
;	O
}	O
for	O
(	O
;	O
row	pointer
;	O
row	pointer
=	O
row	pointer
->	O
next	pointer
)	O
row	pointer
->	O
y	int
=	O
-	O
1	int
;	O
list	pointer
->	O
list_fn	pointer
->	O
gl_printfooter	pointer
(	O
list	pointer
)	O
;	O
if	O
(	O
list	pointer
->	O
selected	pointer
&&	O
list	pointer
->	O
selected	pointer
->	O
y	int
!=	O
-	O
1	int
)	O
flayer	pointer
->	O
l_y	int
=	O
list	pointer
->	O
selected	pointer
->	O
y	int
;	O
else	O
flayer	pointer
->	O
l_y	int
=	O
flayer	pointer
->	O
l_height	int
-	O
1	int
;	O
LaySetCursor	O
(	O
)	O
;	O
}	O
void	O
glist_abort	function
(	O
void	O
)	O
{	O
ListAbort	function
(	O
)	O
;	O
}	O
