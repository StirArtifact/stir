static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: os_map.c,v 1.4 2000/06/28 16:47:02 loic Exp $"	pointer
;	O
static	O
int	O
__os_map	function
__P	O
(	O
(	O
DB_ENV	struct
*	O
,	O
char	O
*	O
,	O
DB_FH	struct
*	O
,	O
size_t	long
,	O
int	O
,	O
int	O
,	O
void	O
*	O
*	O
)	O
)	O
;	O
int	O
CDB___os_r_sysattach	function
(	O
dbenv	pointer
,	O
infop	pointer
,	O
rp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
REGINFO	struct
*	O
infop	pointer
;	O
REGION	struct
*	O
rp	pointer
;	O
{	O
if	O
(	O
F_ISSET	O
(	O
dbenv	pointer
,	O
DB_ENV_SYSTEM_MEM	int
)	O
)	O
{	O
{	O
key_t	int
segid	long
;	O
int	O
id	int
,	O
ret	int
;	O
if	O
(	O
dbenv	pointer
->	O
shm_key	long
==	O
INVALID_REGION_SEGID	O
)	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"no base system shared memory ID specified"	pointer
)	O
;	O
return	O
(	O
EINVAL	int
)	O
;	O
}	O
segid	long
=	O
(	O
key_t	int
)	O
dbenv	pointer
->	O
shm_key	long
;	O
if	O
(	O
F_ISSET	O
(	O
infop	pointer
,	O
REGION_CREATE	int
)	O
)	O
{	O
if	O
(	O
(	O
id	int
=	O
shmget	function
(	O
segid	long
,	O
0	int
,	O
0	int
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
(	O
void	O
)	O
shmctl	function
(	O
id	int
,	O
IPC_RMID	int
,	O
NULL	O
)	O
;	O
if	O
(	O
(	O
id	int
=	O
shmget	function
(	O
segid	long
,	O
0	int
,	O
0	int
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"shmget: key: %ld: shared system memory region already exists"	pointer
,	O
(	O
long	O
)	O
segid	long
)	O
;	O
return	O
(	O
EAGAIN	int
)	O
;	O
}	O
}	O
if	O
(	O
(	O
rp	pointer
->	O
segid	long
=	O
shmget	function
(	O
segid	long
,	O
rp	pointer
->	O
size	int
,	O
IPC_CREAT	int
|	O
0600	int
)	O
)	O
==	O
-	O
1	int
)	O
{	O
ret	int
=	O
CDB___os_get_errno	function
(	O
)	O
;	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"shmget: key: %ld: unable to create shared system memory region: %s"	pointer
,	O
(	O
long	O
)	O
segid	long
,	O
strerror	function
(	O
ret	int
)	O
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
++	O
dbenv	pointer
->	O
shm_key	long
;	O
}	O
if	O
(	O
(	O
infop	pointer
->	O
addr	pointer
=	O
shmat	function
(	O
rp	pointer
->	O
segid	long
,	O
NULL	O
,	O
0	int
)	O
)	O
==	O
(	O
void	O
*	O
)	O
-	O
1	int
)	O
{	O
infop	pointer
->	O
addr	pointer
=	O
NULL	O
;	O
ret	int
=	O
CDB___os_get_errno	function
(	O
)	O
;	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"shmat: id %ld: unable to attach to shared system memory region: %s"	pointer
,	O
rp	pointer
->	O
segid	long
,	O
strerror	function
(	O
ret	int
)	O
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
}	O
{	O
DB_FH	struct
fh	struct
;	O
int	O
ret	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_open	function
(	O
dbenv	pointer
,	O
infop	pointer
->	O
name	pointer
,	O
F_ISSET	O
(	O
infop	pointer
,	O
REGION_CREATE_OK	int
)	O
?	O
DB_OSO_CREATE	int
:	O
0	int
,	O
infop	pointer
->	O
mode	int
,	O
&	O
fh	struct
)	O
)	O
!=	O
0	int
)	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: %s"	pointer
,	O
infop	pointer
->	O
name	pointer
,	O
CDB_db_strerror	function
(	O
ret	int
)	O
)	O
;	O
if	O
(	O
ret	int
==	O
0	int
&&	O
F_ISSET	O
(	O
infop	pointer
,	O
REGION_CREATE	int
)	O
)	O
ret	int
=	O
CDB___os_finit	function
(	O
dbenv	pointer
,	O
&	O
fh	struct
,	O
rp	pointer
->	O
size	int
,	O
DB_GLOBAL	O
(	O
db_region_init	int
)	O
)	O
;	O
if	O
(	O
ret	int
==	O
0	int
)	O
ret	int
=	O
__os_map	function
(	O
dbenv	pointer
,	O
infop	pointer
->	O
name	pointer
,	O
&	O
fh	struct
,	O
rp	pointer
->	O
size	int
,	O
1	int
,	O
0	int
,	O
&	O
infop	pointer
->	O
addr	pointer
)	O
;	O
(	O
void	O
)	O
CDB___os_closehandle	function
(	O
&	O
fh	struct
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
}	O
int	O
CDB___os_r_sysdetach	function
(	O
dbenv	pointer
,	O
infop	pointer
,	O
destroy	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
REGINFO	struct
*	O
infop	pointer
;	O
int	O
destroy	int
;	O
{	O
REGION	struct
*	O
rp	pointer
;	O
rp	pointer
=	O
infop	pointer
->	O
rp	pointer
;	O
if	O
(	O
F_ISSET	O
(	O
dbenv	pointer
,	O
DB_ENV_SYSTEM_MEM	int
)	O
)	O
{	O
int	O
ret	int
,	O
segid	long
;	O
segid	long
=	O
rp	pointer
->	O
segid	long
;	O
if	O
(	O
destroy	int
)	O
rp	pointer
->	O
segid	long
=	O
INVALID_REGION_SEGID	O
;	O
if	O
(	O
shmdt	function
(	O
infop	pointer
->	O
addr	pointer
)	O
!=	O
0	int
)	O
{	O
ret	int
=	O
CDB___os_get_errno	function
(	O
)	O
;	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"shmdt: %s"	pointer
,	O
strerror	function
(	O
ret	int
)	O
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
if	O
(	O
destroy	int
&&	O
shmctl	function
(	O
segid	long
,	O
IPC_RMID	int
,	O
NULL	O
)	O
!=	O
0	int
&&	O
(	O
ret	int
=	O
CDB___os_get_errno	function
(	O
)	O
)	O
!=	O
EINVAL	int
)	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"shmctl: id %ld: unable to delete system shared memory region: %s"	pointer
,	O
segid	long
,	O
strerror	function
(	O
ret	int
)	O
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
if	O
(	O
F_ISSET	O
(	O
dbenv	pointer
,	O
DB_ENV_LOCKDOWN	int
)	O
)	O
(	O
void	O
)	O
munlock	function
(	O
infop	pointer
->	O
addr	pointer
,	O
rp	pointer
->	O
size	int
)	O
;	O
if	O
(	O
munmap	function
(	O
infop	pointer
->	O
addr	pointer
,	O
rp	pointer
->	O
size	int
)	O
!=	O
0	int
)	O
{	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_get_errno	function
(	O
)	O
;	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"munmap: %s"	pointer
,	O
strerror	function
(	O
ret	int
)	O
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
if	O
(	O
destroy	int
&&	O
CDB___os_unlink	function
(	O
dbenv	pointer
,	O
infop	pointer
->	O
name	pointer
)	O
!=	O
0	int
)	O
return	O
(	O
CDB___os_get_errno	function
(	O
)	O
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___os_mapfile	function
(	O
dbenv	pointer
,	O
path	pointer
,	O
fhp	pointer
,	O
len	short
,	O
is_rdonly	int
,	O
addrp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
char	O
*	O
path	pointer
;	O
DB_FH	struct
*	O
fhp	pointer
;	O
int	O
is_rdonly	int
;	O
size_t	long
len	short
;	O
void	O
*	O
*	O
addrp	pointer
;	O
{	O
return	O
(	O
__os_map	function
(	O
dbenv	pointer
,	O
path	pointer
,	O
fhp	pointer
,	O
len	short
,	O
0	int
,	O
is_rdonly	int
,	O
addrp	pointer
)	O
)	O
;	O
}	O
int	O
CDB___os_unmapfile	function
(	O
dbenv	pointer
,	O
addr	pointer
,	O
len	short
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
addr	pointer
;	O
size_t	long
len	short
;	O
{	O
if	O
(	O
CDB___db_jump	struct
.	O
j_unmap	pointer
!=	O
NULL	O
)	O
return	O
(	O
CDB___db_jump	struct
.	O
j_unmap	pointer
(	O
addr	pointer
,	O
len	short
)	O
)	O
;	O
if	O
(	O
F_ISSET	O
(	O
dbenv	pointer
,	O
DB_ENV_LOCKDOWN	int
)	O
)	O
(	O
void	O
)	O
munlock	function
(	O
addr	pointer
,	O
len	short
)	O
;	O
return	O
(	O
munmap	function
(	O
addr	pointer
,	O
len	short
)	O
?	O
CDB___os_get_errno	function
(	O
)	O
:	O
0	int
)	O
;	O
}	O
static	O
int	O
__os_map	function
(	O
dbenv	pointer
,	O
path	pointer
,	O
fhp	pointer
,	O
len	short
,	O
is_region	int
,	O
is_rdonly	int
,	O
addrp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
char	O
*	O
path	pointer
;	O
DB_FH	struct
*	O
fhp	pointer
;	O
int	O
is_region	int
,	O
is_rdonly	int
;	O
size_t	long
len	short
;	O
void	O
*	O
*	O
addrp	pointer
;	O
{	O
void	O
*	O
p	pointer
;	O
int	O
flags	int
,	O
prot	int
,	O
ret	int
;	O
if	O
(	O
CDB___db_jump	struct
.	O
j_map	pointer
!=	O
NULL	O
)	O
return	O
(	O
CDB___db_jump	struct
.	O
j_map	pointer
(	O
path	pointer
,	O
len	short
,	O
is_region	int
,	O
is_rdonly	int
,	O
addrp	pointer
)	O
)	O
;	O
flags	int
=	O
is_rdonly	int
?	O
MAP_PRIVATE	int
:	O
MAP_SHARED	int
;	O
flags	int
|=	O
MAP_FILE	int
;	O
COMPQUIET	O
(	O
is_region	int
,	O
0	int
)	O
;	O
prot	int
=	O
PROT_READ	int
|	O
(	O
is_rdonly	int
?	O
0	int
:	O
PROT_WRITE	int
)	O
;	O
if	O
(	O
(	O
p	pointer
=	O
mmap	function
(	O
NULL	O
,	O
len	short
,	O
prot	int
,	O
flags	int
,	O
fhp	pointer
->	O
fd	pointer
,	O
(	O
off_t	long
)	O
0	int
)	O
)	O
==	O
(	O
void	O
*	O
)	O
MAP_FAILED	O
)	O
{	O
ret	int
=	O
CDB___os_get_errno	function
(	O
)	O
;	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"mmap: %s"	pointer
,	O
strerror	function
(	O
ret	int
)	O
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
if	O
(	O
F_ISSET	O
(	O
dbenv	pointer
,	O
DB_ENV_LOCKDOWN	int
)	O
&&	O
mlock	function
(	O
p	pointer
,	O
len	short
)	O
!=	O
0	int
)	O
{	O
ret	int
=	O
CDB___os_get_errno	function
(	O
)	O
;	O
(	O
void	O
)	O
munmap	function
(	O
p	pointer
,	O
len	short
)	O
;	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"mlock: %s"	pointer
,	O
strerror	function
(	O
ret	int
)	O
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
*	O
addrp	pointer
=	O
p	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
