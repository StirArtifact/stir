plOutbuf	struct
*	O
_new_outbuf	function
(	O
void	O
)	O
{	O
plOutbuf	struct
*	O
bufp	pointer
;	O
bufp	pointer
=	O
(	O
plOutbuf	struct
*	O
)	O
_pl_xmalloc	function
(	O
sizeof	O
(	O
plOutbuf	struct
)	O
)	O
;	O
bufp	pointer
->	O
header	pointer
=	O
(	O
plOutbuf	struct
*	O
)	O
NULL	O
;	O
bufp	pointer
->	O
trailer	pointer
=	O
(	O
plOutbuf	struct
*	O
)	O
NULL	O
;	O
bufp	pointer
->	O
base	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
INITIAL_OUTBUF_LEN	int
*	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
bufp	pointer
->	O
len	long
=	O
(	O
unsigned	O
long	O
)	O
INITIAL_OUTBUF_LEN	int
;	O
bufp	pointer
->	O
next	pointer
=	O
NULL	O
;	O
bufp	pointer
->	O
reset_point	pointer
=	O
bufp	pointer
->	O
base	pointer
;	O
bufp	pointer
->	O
reset_contents	long
=	O
(	O
unsigned	O
long	O
)	O
0L	int
;	O
_reset_outbuf	function
(	O
bufp	pointer
)	O
;	O
return	O
bufp	pointer
;	O
}	O
void	O
_reset_outbuf	function
(	O
plOutbuf	struct
*	O
bufp	pointer
)	O
{	O
int	O
i	int
;	O
*	O
(	O
bufp	pointer
->	O
reset_point	pointer
)	O
=	O
'\0'	O
;	O
bufp	pointer
->	O
point	pointer
=	O
bufp	pointer
->	O
reset_point	pointer
;	O
bufp	pointer
->	O
contents	long
=	O
bufp	pointer
->	O
reset_contents	long
;	O
bufp	pointer
->	O
xrange_min	double
=	O
DBL_MAX	O
;	O
bufp	pointer
->	O
xrange_max	double
=	O
-	O
(	O
DBL_MAX	O
)	O
;	O
bufp	pointer
->	O
yrange_min	double
=	O
DBL_MAX	O
;	O
bufp	pointer
->	O
yrange_max	double
=	O
-	O
(	O
DBL_MAX	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
PL_NUM_PS_FONTS	int
;	O
i	int
++	O
)	O
bufp	pointer
->	O
ps_font_used	array
[	O
i	int
]	O
=	O
false	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
PL_NUM_PCL_FONTS	int
;	O
i	int
++	O
)	O
bufp	pointer
->	O
pcl_font_used	array
[	O
i	int
]	O
=	O
false	int
;	O
}	O
void	O
_freeze_outbuf	function
(	O
plOutbuf	struct
*	O
bufp	pointer
)	O
{	O
bufp	pointer
->	O
reset_point	pointer
=	O
bufp	pointer
->	O
point	pointer
;	O
bufp	pointer
->	O
reset_contents	long
=	O
bufp	pointer
->	O
contents	long
;	O
}	O
void	O
_delete_outbuf	function
(	O
plOutbuf	struct
*	O
bufp	pointer
)	O
{	O
if	O
(	O
bufp	pointer
)	O
{	O
free	function
(	O
bufp	pointer
->	O
base	pointer
)	O
;	O
free	function
(	O
bufp	pointer
)	O
;	O
}	O
}	O
void	O
_update_buffer	function
(	O
plOutbuf	struct
*	O
bufp	pointer
)	O
{	O
int	O
additional	int
;	O
additional	int
=	O
strlen	function
(	O
bufp	pointer
->	O
point	pointer
)	O
;	O
bufp	pointer
->	O
point	pointer
+=	O
additional	int
;	O
bufp	pointer
->	O
contents	long
+=	O
additional	int
;	O
if	O
(	O
bufp	pointer
->	O
contents	long
+	O
1	int
>	O
bufp	pointer
->	O
len	long
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"libplot: output buffer overrun\n"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
bufp	pointer
->	O
contents	long
>	O
(	O
bufp	pointer
->	O
len	long
>>	O
1	int
)	O
)	O
{	O
unsigned	O
long	O
oldlen	long
,	O
newlen	double
;	O
oldlen	long
=	O
bufp	pointer
->	O
len	long
;	O
newlen	double
=	O
NEW_OUTBUF_LEN	O
(	O
oldlen	long
)	O
;	O
bufp	pointer
->	O
base	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xrealloc	function
(	O
bufp	pointer
->	O
base	pointer
,	O
newlen	double
*	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
bufp	pointer
->	O
len	long
=	O
newlen	double
;	O
bufp	pointer
->	O
point	pointer
=	O
bufp	pointer
->	O
base	pointer
+	O
bufp	pointer
->	O
contents	long
;	O
bufp	pointer
->	O
reset_point	pointer
=	O
bufp	pointer
->	O
base	pointer
+	O
bufp	pointer
->	O
reset_contents	long
;	O
}	O
}	O
void	O
_update_buffer_by_added_bytes	function
(	O
plOutbuf	struct
*	O
bufp	pointer
,	O
int	O
additional	int
)	O
{	O
bufp	pointer
->	O
point	pointer
+=	O
additional	int
;	O
bufp	pointer
->	O
contents	long
+=	O
additional	int
;	O
if	O
(	O
bufp	pointer
->	O
contents	long
+	O
1	int
>	O
bufp	pointer
->	O
len	long
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"libplot: output buffer overrun\n"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
bufp	pointer
->	O
contents	long
>	O
(	O
bufp	pointer
->	O
len	long
>>	O
1	int
)	O
)	O
{	O
unsigned	O
long	O
oldlen	long
,	O
newlen	double
;	O
oldlen	long
=	O
bufp	pointer
->	O
len	long
;	O
newlen	double
=	O
NEW_OUTBUF_LEN	O
(	O
oldlen	long
)	O
;	O
bufp	pointer
->	O
base	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xrealloc	function
(	O
bufp	pointer
->	O
base	pointer
,	O
newlen	double
*	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
bufp	pointer
->	O
len	long
=	O
newlen	double
;	O
bufp	pointer
->	O
point	pointer
=	O
bufp	pointer
->	O
base	pointer
+	O
bufp	pointer
->	O
contents	long
;	O
bufp	pointer
->	O
reset_point	pointer
=	O
bufp	pointer
->	O
base	pointer
+	O
bufp	pointer
->	O
reset_contents	long
;	O
}	O
}	O
void	O
_update_bbox	function
(	O
plOutbuf	struct
*	O
bufp	pointer
,	O
double	O
x	double
,	O
double	O
y	double
)	O
{	O
if	O
(	O
x	double
>	O
bufp	pointer
->	O
xrange_max	double
)	O
bufp	pointer
->	O
xrange_max	double
=	O
x	double
;	O
if	O
(	O
x	double
<	O
bufp	pointer
->	O
xrange_min	double
)	O
bufp	pointer
->	O
xrange_min	double
=	O
x	double
;	O
if	O
(	O
y	double
>	O
bufp	pointer
->	O
yrange_max	double
)	O
bufp	pointer
->	O
yrange_max	double
=	O
y	double
;	O
if	O
(	O
y	double
<	O
bufp	pointer
->	O
yrange_min	double
)	O
bufp	pointer
->	O
yrange_min	double
=	O
y	double
;	O
}	O
void	O
_bbox_of_outbuf	function
(	O
plOutbuf	struct
*	O
bufp	pointer
,	O
double	O
*	O
xmin	double
,	O
double	O
*	O
xmax	double
,	O
double	O
*	O
ymin	double
,	O
double	O
*	O
ymax	double
)	O
{	O
double	O
page_x_min	double
=	O
DBL_MAX	O
;	O
double	O
page_y_min	double
=	O
DBL_MAX	O
;	O
double	O
page_x_max	double
=	O
-	O
(	O
DBL_MAX	O
)	O
;	O
double	O
page_y_max	double
=	O
-	O
(	O
DBL_MAX	O
)	O
;	O
if	O
(	O
bufp	pointer
)	O
{	O
page_x_max	double
=	O
bufp	pointer
->	O
xrange_max	double
;	O
page_x_min	double
=	O
bufp	pointer
->	O
xrange_min	double
;	O
page_y_max	double
=	O
bufp	pointer
->	O
yrange_max	double
;	O
page_y_min	double
=	O
bufp	pointer
->	O
yrange_min	double
;	O
}	O
*	O
xmin	double
=	O
page_x_min	double
;	O
*	O
ymin	double
=	O
page_y_min	double
;	O
*	O
xmax	double
=	O
page_x_max	double
;	O
*	O
ymax	double
=	O
page_y_max	double
;	O
}	O
void	O
_bbox_of_outbufs	function
(	O
plOutbuf	struct
*	O
bufp	pointer
,	O
double	O
*	O
xmin	double
,	O
double	O
*	O
xmax	double
,	O
double	O
*	O
ymin	double
,	O
double	O
*	O
ymax	double
)	O
{	O
double	O
doc_x_min	double
=	O
DBL_MAX	O
;	O
double	O
doc_y_min	double
=	O
DBL_MAX	O
;	O
double	O
doc_x_max	double
=	O
-	O
(	O
DBL_MAX	O
)	O
;	O
double	O
doc_y_max	double
=	O
-	O
(	O
DBL_MAX	O
)	O
;	O
double	O
page_x_min	double
,	O
page_x_max	double
,	O
page_y_min	double
,	O
page_y_max	double
;	O
plOutbuf	struct
*	O
page	pointer
=	O
bufp	pointer
;	O
while	O
(	O
page	pointer
)	O
{	O
page_x_max	double
=	O
page	pointer
->	O
xrange_max	double
;	O
page_x_min	double
=	O
page	pointer
->	O
xrange_min	double
;	O
page_y_max	double
=	O
page	pointer
->	O
yrange_max	double
;	O
page_y_min	double
=	O
page	pointer
->	O
yrange_min	double
;	O
if	O
(	O
!	O
(	O
(	O
page_x_max	double
<	O
page_x_min	double
||	O
page_y_max	double
<	O
page_y_min	double
)	O
)	O
)	O
{	O
if	O
(	O
page_x_max	double
>	O
doc_x_max	double
)	O
doc_x_max	double
=	O
page_x_max	double
;	O
if	O
(	O
page_y_max	double
>	O
doc_y_max	double
)	O
doc_y_max	double
=	O
page_y_max	double
;	O
if	O
(	O
page_x_min	double
<	O
doc_x_min	double
)	O
doc_x_min	double
=	O
page_x_min	double
;	O
if	O
(	O
page_y_min	double
<	O
doc_y_min	double
)	O
doc_y_min	double
=	O
page_y_min	double
;	O
}	O
page	pointer
=	O
page	pointer
->	O
next	pointer
;	O
}	O
*	O
xmin	double
=	O
doc_x_min	double
;	O
*	O
ymin	double
=	O
doc_y_min	double
;	O
*	O
xmax	double
=	O
doc_x_max	double
;	O
*	O
ymax	double
=	O
doc_y_max	double
;	O
}	O
