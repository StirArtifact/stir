static	O
void	O
print_sdiff_common_lines	function
(	O
lin	long
,	O
lin	long
)	O
;	O
static	O
void	O
print_sdiff_hunk	function
(	O
struct	O
change	struct
*	O
)	O
;	O
static	O
lin	long
next0	long
,	O
next1	long
;	O
void	O
print_sdiff_script	function
(	O
struct	O
change	struct
*	O
script	pointer
)	O
{	O
begin_output	function
(	O
)	O
;	O
next0	long
=	O
next1	long
=	O
-	O
files	array
[	O
0	int
]	O
.	O
prefix_lines	long
;	O
print_script	function
(	O
script	pointer
,	O
find_change	function
,	O
print_sdiff_hunk	function
)	O
;	O
print_sdiff_common_lines	function
(	O
files	array
[	O
0	int
]	O
.	O
valid_lines	long
,	O
files	array
[	O
1	int
]	O
.	O
valid_lines	long
)	O
;	O
}	O
static	O
size_t	long
tab_from_to	function
(	O
size_t	long
from	long
,	O
size_t	long
to	long
)	O
{	O
FILE	struct
*	O
out	pointer
=	O
outfile	pointer
;	O
size_t	long
tab	long
;	O
size_t	long
tab_size	long
=	O
tabsize	long
;	O
if	O
(	O
!	O
expand_tabs	bool
)	O
for	O
(	O
tab	long
=	O
from	long
+	O
tab_size	long
-	O
from	long
%	O
tab_size	long
;	O
tab	long
<=	O
to	long
;	O
tab	long
+=	O
tab_size	long
)	O
{	O
putc	function
(	O
'\t'	O
,	O
out	pointer
)	O
;	O
from	long
=	O
tab	long
;	O
}	O
while	O
(	O
from	long
++	O
<	O
to	long
)	O
putc	function
(	O
' '	O
,	O
out	pointer
)	O
;	O
return	O
to	long
;	O
}	O
static	O
size_t	long
print_half_line	function
(	O
char	O
const	O
*	O
const	O
*	O
line	pointer
,	O
size_t	long
indent	long
,	O
size_t	long
out_bound	long
)	O
{	O
FILE	struct
*	O
out	pointer
=	O
outfile	pointer
;	O
register	O
size_t	long
in_position	long
=	O
0	int
;	O
register	O
size_t	long
out_position	long
=	O
0	int
;	O
register	O
char	O
const	O
*	O
text_pointer	pointer
=	O
line	pointer
[	O
0	int
]	O
;	O
register	O
char	O
const	O
*	O
text_limit	pointer
=	O
line	pointer
[	O
1	int
]	O
;	O
mbstate_t	struct
mbstate	struct
=	O
{	O
0	int
}	O
;	O
while	O
(	O
text_pointer	pointer
<	O
text_limit	pointer
)	O
{	O
char	O
const	O
*	O
tp0	pointer
=	O
text_pointer	pointer
;	O
register	O
char	O
c	char
=	O
*	O
text_pointer	pointer
++	O
;	O
switch	O
(	O
c	char
)	O
{	O
case	O
'\t'	O
:	O
{	O
size_t	long
spaces	long
=	O
tabsize	long
-	O
in_position	long
%	O
tabsize	long
;	O
if	O
(	O
in_position	long
==	O
out_position	long
)	O
{	O
size_t	long
tabstop	long
=	O
out_position	long
+	O
spaces	long
;	O
if	O
(	O
expand_tabs	bool
)	O
{	O
if	O
(	O
out_bound	long
<	O
tabstop	long
)	O
tabstop	long
=	O
out_bound	long
;	O
for	O
(	O
;	O
out_position	long
<	O
tabstop	long
;	O
out_position	long
++	O
)	O
putc	function
(	O
' '	O
,	O
out	pointer
)	O
;	O
}	O
else	O
if	O
(	O
tabstop	long
<	O
out_bound	long
)	O
{	O
out_position	long
=	O
tabstop	long
;	O
putc	function
(	O
c	char
,	O
out	pointer
)	O
;	O
}	O
}	O
in_position	long
+=	O
spaces	long
;	O
}	O
break	O
;	O
case	O
'\r'	O
:	O
{	O
putc	function
(	O
c	char
,	O
out	pointer
)	O
;	O
tab_from_to	function
(	O
0	int
,	O
indent	long
)	O
;	O
in_position	long
=	O
out_position	long
=	O
0	int
;	O
}	O
break	O
;	O
case	O
'\b'	O
:	O
if	O
(	O
in_position	long
!=	O
0	int
&&	O
--	O
in_position	long
<	O
out_bound	long
)	O
{	O
if	O
(	O
out_position	long
<=	O
in_position	long
)	O
for	O
(	O
;	O
out_position	long
<	O
in_position	long
;	O
out_position	long
++	O
)	O
putc	function
(	O
' '	O
,	O
out	pointer
)	O
;	O
else	O
{	O
out_position	long
=	O
in_position	long
;	O
putc	function
(	O
c	char
,	O
out	pointer
)	O
;	O
}	O
}	O
break	O
;	O
default	O
:	O
{	O
wchar_t	int
wc	int
;	O
size_t	long
bytes	long
=	O
mbrtowc	function
(	O
&	O
wc	int
,	O
tp0	pointer
,	O
text_limit	pointer
-	O
tp0	pointer
,	O
&	O
mbstate	struct
)	O
;	O
if	O
(	O
0	int
<	O
bytes	long
&&	O
bytes	long
<	O
(	O
size_t	long
)	O
-	O
2	int
)	O
{	O
int	O
width	int
=	O
wcwidth	function
(	O
wc	int
)	O
;	O
if	O
(	O
0	int
<	O
width	int
)	O
in_position	long
+=	O
width	int
;	O
if	O
(	O
in_position	long
<=	O
out_bound	long
)	O
{	O
out_position	long
=	O
in_position	long
;	O
fwrite	function
(	O
tp0	pointer
,	O
1	int
,	O
bytes	long
,	O
stdout	pointer
)	O
;	O
}	O
text_pointer	pointer
=	O
tp0	pointer
+	O
bytes	long
;	O
break	O
;	O
}	O
}	O
case	O
'\f'	O
:	O
case	O
'\v'	O
:	O
if	O
(	O
in_position	long
<	O
out_bound	long
)	O
putc	function
(	O
c	char
,	O
out	pointer
)	O
;	O
break	O
;	O
case	O
' '	O
:	O
case	O
'!'	O
:	O
case	O
'"'	O
:	O
case	O
'#'	O
:	O
case	O
'%'	O
:	O
case	O
'&'	O
:	O
case	O
'\''	O
:	O
case	O
'('	O
:	O
case	O
')'	O
:	O
case	O
'*'	O
:	O
case	O
'+'	O
:	O
case	O
','	O
:	O
case	O
'-'	O
:	O
case	O
'.'	O
:	O
case	O
'/'	O
:	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
case	O
':'	O
:	O
case	O
';'	O
:	O
case	O
'<'	O
:	O
case	O
'='	O
:	O
case	O
'>'	O
:	O
case	O
'?'	O
:	O
case	O
'A'	O
:	O
case	O
'B'	O
:	O
case	O
'C'	O
:	O
case	O
'D'	O
:	O
case	O
'E'	O
:	O
case	O
'F'	O
:	O
case	O
'G'	O
:	O
case	O
'H'	O
:	O
case	O
'I'	O
:	O
case	O
'J'	O
:	O
case	O
'K'	O
:	O
case	O
'L'	O
:	O
case	O
'M'	O
:	O
case	O
'N'	O
:	O
case	O
'O'	O
:	O
case	O
'P'	O
:	O
case	O
'Q'	O
:	O
case	O
'R'	O
:	O
case	O
'S'	O
:	O
case	O
'T'	O
:	O
case	O
'U'	O
:	O
case	O
'V'	O
:	O
case	O
'W'	O
:	O
case	O
'X'	O
:	O
case	O
'Y'	O
:	O
case	O
'Z'	O
:	O
case	O
'['	O
:	O
case	O
'\\'	O
:	O
case	O
']'	O
:	O
case	O
'^'	O
:	O
case	O
'_'	O
:	O
case	O
'a'	O
:	O
case	O
'b'	O
:	O
case	O
'c'	O
:	O
case	O
'd'	O
:	O
case	O
'e'	O
:	O
case	O
'f'	O
:	O
case	O
'g'	O
:	O
case	O
'h'	O
:	O
case	O
'i'	O
:	O
case	O
'j'	O
:	O
case	O
'k'	O
:	O
case	O
'l'	O
:	O
case	O
'm'	O
:	O
case	O
'n'	O
:	O
case	O
'o'	O
:	O
case	O
'p'	O
:	O
case	O
'q'	O
:	O
case	O
'r'	O
:	O
case	O
's'	O
:	O
case	O
't'	O
:	O
case	O
'u'	O
:	O
case	O
'v'	O
:	O
case	O
'w'	O
:	O
case	O
'x'	O
:	O
case	O
'y'	O
:	O
case	O
'z'	O
:	O
case	O
'{'	O
:	O
case	O
'|'	O
:	O
case	O
'}'	O
:	O
case	O
'~'	O
:	O
if	O
(	O
in_position	long
++	O
<	O
out_bound	long
)	O
{	O
out_position	long
=	O
in_position	long
;	O
putc	function
(	O
c	char
,	O
out	pointer
)	O
;	O
}	O
break	O
;	O
case	O
'\n'	O
:	O
return	O
out_position	long
;	O
}	O
}	O
return	O
out_position	long
;	O
}	O
static	O
void	O
print_1sdiff_line	function
(	O
char	O
const	O
*	O
const	O
*	O
left	pointer
,	O
char	O
sep	char
,	O
char	O
const	O
*	O
const	O
*	O
right	pointer
)	O
{	O
FILE	struct
*	O
out	pointer
=	O
outfile	pointer
;	O
size_t	long
hw	long
=	O
sdiff_half_width	long
;	O
size_t	long
c2o	long
=	O
sdiff_column2_offset	long
;	O
size_t	long
col	long
=	O
0	int
;	O
bool	bool
put_newline	bool
=	O
false	int
;	O
if	O
(	O
left	pointer
)	O
{	O
put_newline	bool
|=	O
left	pointer
[	O
1	int
]	O
[	O
-	O
1	int
]	O
==	O
'\n'	O
;	O
col	long
=	O
print_half_line	function
(	O
left	pointer
,	O
0	int
,	O
hw	long
)	O
;	O
}	O
if	O
(	O
sep	char
!=	O
' '	O
)	O
{	O
col	long
=	O
tab_from_to	function
(	O
col	long
,	O
(	O
hw	long
+	O
c2o	long
-	O
1	int
)	O
/	O
2	int
)	O
+	O
1	int
;	O
if	O
(	O
sep	char
==	O
'|'	O
&&	O
put_newline	bool
!=	O
(	O
right	pointer
[	O
1	int
]	O
[	O
-	O
1	int
]	O
==	O
'\n'	O
)	O
)	O
sep	char
=	O
put_newline	bool
?	O
'/'	O
:	O
'\\'	O
;	O
putc	function
(	O
sep	char
,	O
out	pointer
)	O
;	O
}	O
if	O
(	O
right	pointer
)	O
{	O
put_newline	bool
|=	O
right	pointer
[	O
1	int
]	O
[	O
-	O
1	int
]	O
==	O
'\n'	O
;	O
if	O
(	O
*	O
*	O
right	pointer
!=	O
'\n'	O
)	O
{	O
col	long
=	O
tab_from_to	function
(	O
col	long
,	O
c2o	long
)	O
;	O
print_half_line	function
(	O
right	pointer
,	O
col	long
,	O
hw	long
)	O
;	O
}	O
}	O
if	O
(	O
put_newline	bool
)	O
putc	function
(	O
'\n'	O
,	O
out	pointer
)	O
;	O
}	O
static	O
void	O
print_sdiff_common_lines	function
(	O
lin	long
limit0	long
,	O
lin	long
limit1	long
)	O
{	O
lin	long
i0	long
=	O
next0	long
,	O
i1	long
=	O
next1	long
;	O
if	O
(	O
!	O
suppress_common_lines	bool
&&	O
(	O
i0	long
!=	O
limit0	long
||	O
i1	long
!=	O
limit1	long
)	O
)	O
{	O
if	O
(	O
sdiff_merge_assist	bool
)	O
{	O
long	O
int	O
len0	long
=	O
limit0	long
-	O
i0	long
;	O
long	O
int	O
len1	long
=	O
limit1	long
-	O
i1	long
;	O
fprintf	function
(	O
outfile	pointer
,	O
"i%ld,%ld\n"	pointer
,	O
len0	long
,	O
len1	long
)	O
;	O
}	O
if	O
(	O
!	O
left_column	bool
)	O
{	O
while	O
(	O
i0	long
!=	O
limit0	long
&&	O
i1	long
!=	O
limit1	long
)	O
print_1sdiff_line	function
(	O
&	O
files	array
[	O
0	int
]	O
.	O
linbuf	pointer
[	O
i0	long
++	O
]	O
,	O
' '	O
,	O
&	O
files	array
[	O
1	int
]	O
.	O
linbuf	pointer
[	O
i1	long
++	O
]	O
)	O
;	O
while	O
(	O
i1	long
!=	O
limit1	long
)	O
print_1sdiff_line	function
(	O
0	int
,	O
')'	O
,	O
&	O
files	array
[	O
1	int
]	O
.	O
linbuf	pointer
[	O
i1	long
++	O
]	O
)	O
;	O
}	O
while	O
(	O
i0	long
!=	O
limit0	long
)	O
print_1sdiff_line	function
(	O
&	O
files	array
[	O
0	int
]	O
.	O
linbuf	pointer
[	O
i0	long
++	O
]	O
,	O
'('	O
,	O
0	int
)	O
;	O
}	O
next0	long
=	O
limit0	long
;	O
next1	long
=	O
limit1	long
;	O
}	O
static	O
void	O
print_sdiff_hunk	function
(	O
struct	O
change	struct
*	O
hunk	pointer
)	O
{	O
lin	long
first0	long
,	O
last0	long
,	O
first1	long
,	O
last1	long
;	O
register	O
lin	long
i	long
,	O
j	long
;	O
enum	O
changes	enum
changes	enum
=	O
analyze_hunk	function
(	O
hunk	pointer
,	O
&	O
first0	long
,	O
&	O
last0	long
,	O
&	O
first1	long
,	O
&	O
last1	long
)	O
;	O
if	O
(	O
!	O
changes	enum
)	O
return	O
;	O
print_sdiff_common_lines	function
(	O
first0	long
,	O
first1	long
)	O
;	O
if	O
(	O
sdiff_merge_assist	bool
)	O
{	O
long	O
int	O
len0	long
=	O
last0	long
-	O
first0	long
+	O
1	int
;	O
long	O
int	O
len1	long
=	O
last1	long
-	O
first1	long
+	O
1	int
;	O
fprintf	function
(	O
outfile	pointer
,	O
"c%ld,%ld\n"	pointer
,	O
len0	long
,	O
len1	long
)	O
;	O
}	O
if	O
(	O
changes	enum
==	O
CHANGED	int
)	O
{	O
for	O
(	O
i	long
=	O
first0	long
,	O
j	long
=	O
first1	long
;	O
i	long
<=	O
last0	long
&&	O
j	long
<=	O
last1	long
;	O
i	long
++	O
,	O
j	long
++	O
)	O
print_1sdiff_line	function
(	O
&	O
files	array
[	O
0	int
]	O
.	O
linbuf	pointer
[	O
i	long
]	O
,	O
'|'	O
,	O
&	O
files	array
[	O
1	int
]	O
.	O
linbuf	pointer
[	O
j	long
]	O
)	O
;	O
changes	enum
=	O
(	O
i	long
<=	O
last0	long
?	O
OLD	int
:	O
0	int
)	O
+	O
(	O
j	long
<=	O
last1	long
?	O
NEW	int
:	O
0	int
)	O
;	O
next0	long
=	O
first0	long
=	O
i	long
;	O
next1	long
=	O
first1	long
=	O
j	long
;	O
}	O
if	O
(	O
changes	enum
&	O
NEW	int
)	O
{	O
for	O
(	O
j	long
=	O
first1	long
;	O
j	long
<=	O
last1	long
;	O
++	O
j	long
)	O
print_1sdiff_line	function
(	O
0	int
,	O
'>'	O
,	O
&	O
files	array
[	O
1	int
]	O
.	O
linbuf	pointer
[	O
j	long
]	O
)	O
;	O
next1	long
=	O
j	long
;	O
}	O
if	O
(	O
changes	enum
&	O
OLD	int
)	O
{	O
for	O
(	O
i	long
=	O
first0	long
;	O
i	long
<=	O
last0	long
;	O
++	O
i	long
)	O
print_1sdiff_line	function
(	O
&	O
files	array
[	O
0	int
]	O
.	O
linbuf	pointer
[	O
i	long
]	O
,	O
'<'	O
,	O
0	int
)	O
;	O
next0	long
=	O
i	long
;	O
}	O
}	O
