error_t	O
S_io_read	function
(	O
struct	O
sock_user	O
*	O
user	pointer
,	O
char	O
*	O
*	O
data	pointer
,	O
mach_msg_type_number_t	O
*	O
data_len	pointer
,	O
off_t	long
offset	long
,	O
mach_msg_type_number_t	O
amount	int
)	O
{	O
error_t	O
err	O
;	O
struct	O
pipe	function
*	O
pipe	function
;	O
if	O
(	O
!	O
user	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
err	O
=	O
sock_acquire_read_pipe	function
(	O
user	pointer
->	O
sock	pointer
,	O
&	O
pipe	function
)	O
;	O
if	O
(	O
err	O
==	O
EPIPE	O
)	O
{	O
err	O
=	O
0	int
;	O
*	O
data_len	pointer
=	O
0	int
;	O
}	O
else	O
if	O
(	O
!	O
err	O
)	O
{	O
err	O
=	O
pipe_read	function
(	O
pipe	function
,	O
user	pointer
->	O
sock	pointer
->	O
flags	int
&	O
PFLOCAL_SOCK_NONBLOCK	O
,	O
NULL	O
,	O
data	pointer
,	O
data_len	pointer
,	O
amount	int
)	O
;	O
pipe_release_reader	function
(	O
pipe	function
)	O
;	O
}	O
return	O
err	O
;	O
}	O
error_t	O
S_io_write	function
(	O
struct	O
sock_user	O
*	O
user	pointer
,	O
char	O
*	O
data	pointer
,	O
mach_msg_type_number_t	O
data_len	pointer
,	O
off_t	long
offset	long
,	O
mach_msg_type_number_t	O
*	O
amount	int
)	O
{	O
error_t	O
err	O
;	O
struct	O
pipe	function
*	O
pipe	function
;	O
if	O
(	O
!	O
user	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
err	O
=	O
sock_acquire_write_pipe	function
(	O
user	pointer
->	O
sock	pointer
,	O
&	O
pipe	function
)	O
;	O
if	O
(	O
!	O
err	O
)	O
{	O
struct	O
addr	O
*	O
source_addr	pointer
;	O
if	O
(	O
pipe	function
->	O
class	O
->	O
flags	int
&	O
PIPE_CLASS_CONNECTIONLESS	O
)	O
err	O
=	O
sock_get_addr	function
(	O
user	pointer
->	O
sock	pointer
,	O
&	O
source_addr	pointer
)	O
;	O
else	O
source_addr	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
err	O
)	O
{	O
err	O
=	O
pipe_write	function
(	O
pipe	function
,	O
user	pointer
->	O
sock	pointer
->	O
flags	int
&	O
PFLOCAL_SOCK_NONBLOCK	O
,	O
source_addr	pointer
,	O
data	pointer
,	O
data_len	pointer
,	O
amount	int
)	O
;	O
if	O
(	O
err	O
&&	O
source_addr	pointer
)	O
ports_port_deref	function
(	O
source_addr	pointer
)	O
;	O
}	O
pipe_release_writer	function
(	O
pipe	function
)	O
;	O
}	O
return	O
err	O
;	O
}	O
error_t	O
S_io_readable	function
(	O
struct	O
sock_user	O
*	O
user	pointer
,	O
mach_msg_type_number_t	O
*	O
amount	int
)	O
{	O
error_t	O
err	O
;	O
struct	O
pipe	function
*	O
pipe	function
;	O
if	O
(	O
!	O
user	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
err	O
=	O
sock_acquire_read_pipe	function
(	O
user	pointer
->	O
sock	pointer
,	O
&	O
pipe	function
)	O
;	O
if	O
(	O
err	O
==	O
EPIPE	O
)	O
{	O
err	O
=	O
0	int
;	O
*	O
amount	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
!	O
err	O
)	O
{	O
*	O
amount	int
=	O
pipe_readable	function
(	O
user	pointer
->	O
sock	pointer
->	O
read_pipe	pointer
,	O
1	int
)	O
;	O
pipe_release_reader	function
(	O
pipe	function
)	O
;	O
}	O
return	O
err	O
;	O
}	O
error_t	O
S_io_seek	function
(	O
struct	O
sock_user	O
*	O
user	pointer
,	O
off_t	long
offset	long
,	O
int	O
whence	int
,	O
off_t	long
*	O
new_offset	pointer
)	O
{	O
return	O
user	pointer
?	O
ESPIPE	O
:	O
EOPNOTSUPP	O
;	O
}	O
error_t	O
S_io_duplicate	function
(	O
struct	O
sock_user	O
*	O
user	pointer
,	O
mach_port_t	O
*	O
new_port	pointer
,	O
mach_msg_type_name_t	O
*	O
new_port_type	pointer
)	O
{	O
error_t	O
err	O
;	O
if	O
(	O
!	O
user	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
err	O
=	O
sock_create_port	function
(	O
user	pointer
->	O
sock	pointer
,	O
new_port	pointer
)	O
;	O
if	O
(	O
!	O
err	O
)	O
*	O
new_port_type	pointer
=	O
MACH_MSG_TYPE_MAKE_SEND	O
;	O
return	O
err	O
;	O
}	O
static	O
error_t	O
io_select_common	function
(	O
struct	O
sock_user	O
*	O
user	pointer
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
struct	O
timespec	struct
*	O
tsp	pointer
,	O
int	O
*	O
select_type	pointer
)	O
{	O
error_t	O
err	O
=	O
0	int
;	O
struct	O
sock	pointer
*	O
sock	pointer
;	O
if	O
(	O
!	O
user	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
*	O
select_type	pointer
&=	O
SELECT_READ	int
|	O
SELECT_WRITE	int
;	O
sock	pointer
=	O
user	pointer
->	O
sock	pointer
;	O
pthread_mutex_lock	function
(	O
&	O
sock	pointer
->	O
lock	O
)	O
;	O
if	O
(	O
sock	pointer
->	O
listen_queue	O
)	O
{	O
pthread_mutex_unlock	function
(	O
&	O
sock	pointer
->	O
lock	O
)	O
;	O
*	O
select_type	pointer
&=	O
SELECT_READ	int
;	O
if	O
(	O
*	O
select_type	pointer
&	O
SELECT_READ	int
)	O
{	O
struct	O
timespec	struct
noblock	struct
=	O
{	O
0	int
,	O
0	int
}	O
;	O
if	O
(	O
connq_listen	function
(	O
sock	pointer
->	O
listen_queue	O
,	O
&	O
noblock	struct
,	O
NULL	O
)	O
==	O
0	int
)	O
return	O
0	int
;	O
else	O
{	O
ports_interrupt_self_on_port_death	function
(	O
user	pointer
,	O
reply	int
)	O
;	O
err	O
=	O
connq_listen	function
(	O
sock	pointer
->	O
listen_queue	O
,	O
tsp	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
err	O
==	O
ETIMEDOUT	O
)	O
{	O
*	O
select_type	pointer
=	O
0	int
;	O
err	O
=	O
0	int
;	O
}	O
return	O
err	O
;	O
}	O
}	O
}	O
else	O
{	O
int	O
valid	int
;	O
int	O
ready	int
=	O
0	int
;	O
struct	O
pipe	function
*	O
read_pipe	pointer
=	O
sock	pointer
->	O
read_pipe	pointer
;	O
struct	O
pipe	function
*	O
write_pipe	pointer
=	O
sock	pointer
->	O
write_pipe	pointer
;	O
if	O
(	O
!	O
write_pipe	pointer
)	O
ready	int
|=	O
SELECT_WRITE	int
;	O
if	O
(	O
!	O
read_pipe	pointer
)	O
ready	int
|=	O
SELECT_READ	int
;	O
ready	int
&=	O
*	O
select_type	pointer
;	O
*	O
select_type	pointer
&=	O
~	O
ready	int
;	O
valid	int
=	O
*	O
select_type	pointer
;	O
if	O
(	O
valid	int
&	O
SELECT_READ	int
)	O
{	O
pipe_acquire_reader	function
(	O
read_pipe	pointer
)	O
;	O
err	O
=	O
pipe_wait_readable	function
(	O
read_pipe	pointer
,	O
1	int
,	O
1	int
)	O
;	O
if	O
(	O
err	O
==	O
EWOULDBLOCK	O
)	O
err	O
=	O
0	int
;	O
else	O
ready	int
|=	O
SELECT_READ	int
;	O
pthread_mutex_unlock	function
(	O
&	O
read_pipe	pointer
->	O
lock	O
)	O
;	O
if	O
(	O
err	O
)	O
valid	int
&=	O
~	O
SELECT_WRITE	int
;	O
}	O
if	O
(	O
valid	int
&	O
SELECT_WRITE	int
)	O
{	O
pipe_acquire_writer	function
(	O
write_pipe	pointer
)	O
;	O
err	O
=	O
pipe_wait_writable	function
(	O
write_pipe	pointer
,	O
1	int
)	O
;	O
if	O
(	O
err	O
==	O
EWOULDBLOCK	O
)	O
err	O
=	O
0	int
;	O
else	O
ready	int
|=	O
SELECT_WRITE	int
;	O
pthread_mutex_unlock	function
(	O
&	O
write_pipe	pointer
->	O
lock	O
)	O
;	O
}	O
pthread_mutex_unlock	function
(	O
&	O
sock	pointer
->	O
lock	O
)	O
;	O
if	O
(	O
ready	int
)	O
*	O
select_type	pointer
=	O
ready	int
;	O
else	O
{	O
ports_interrupt_self_on_port_death	function
(	O
user	pointer
,	O
reply	int
)	O
;	O
err	O
=	O
pipe_pair_select	function
(	O
read_pipe	pointer
,	O
write_pipe	pointer
,	O
tsp	pointer
,	O
select_type	pointer
,	O
1	int
)	O
;	O
}	O
if	O
(	O
valid	int
&	O
SELECT_READ	int
)	O
pipe_remove_reader	function
(	O
read_pipe	pointer
)	O
;	O
if	O
(	O
valid	int
&	O
SELECT_WRITE	int
)	O
pipe_remove_writer	function
(	O
write_pipe	pointer
)	O
;	O
}	O
return	O
err	O
;	O
}	O
error_t	O
S_io_select	function
(	O
struct	O
sock_user	O
*	O
user	pointer
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
int	O
*	O
select_type	pointer
)	O
{	O
return	O
io_select_common	function
(	O
user	pointer
,	O
reply	int
,	O
reply_type	int
,	O
NULL	O
,	O
select_type	pointer
)	O
;	O
}	O
error_t	O
S_io_select_timeout	function
(	O
struct	O
sock_user	O
*	O
user	pointer
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
struct	O
timespec	struct
ts	struct
,	O
int	O
*	O
select_type	pointer
)	O
{	O
return	O
io_select_common	function
(	O
user	pointer
,	O
reply	int
,	O
reply_type	int
,	O
&	O
ts	struct
,	O
select_type	pointer
)	O
;	O
}	O
static	O
inline	O
void	O
copy_time	function
(	O
time_value_t	O
*	O
from	pointer
,	O
time_t	long
*	O
to_sec	pointer
,	O
long	O
*	O
to_nsec	pointer
)	O
{	O
*	O
to_sec	pointer
=	O
from	pointer
->	O
seconds	O
;	O
*	O
to_nsec	pointer
=	O
from	pointer
->	O
microseconds	O
*	O
1000	int
;	O
}	O
error_t	O
S_io_stat	function
(	O
struct	O
sock_user	O
*	O
user	pointer
,	O
struct	O
stat	struct
*	O
st	pointer
)	O
{	O
struct	O
sock	pointer
*	O
sock	pointer
;	O
struct	O
pipe	function
*	O
rpipe	pointer
,	O
*	O
wpipe	pointer
;	O
if	O
(	O
!	O
user	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
sock	pointer
=	O
user	pointer
->	O
sock	pointer
;	O
memset	function
(	O
st	pointer
,	O
0	int
,	O
sizeof	O
(	O
struct	O
stat	struct
)	O
)	O
;	O
st	pointer
->	O
st_fstype	O
=	O
FSTYPE_SOCKET	int
;	O
st	pointer
->	O
st_mode	int
=	O
sock	pointer
->	O
mode	O
;	O
st	pointer
->	O
st_fsid	O
=	O
getpid	function
(	O
)	O
;	O
st	pointer
->	O
st_ino	long
=	O
sock	pointer
->	O
id	pointer
;	O
st	pointer
->	O
st_blksize	long
=	O
vm_page_size	O
*	O
16	int
;	O
pthread_mutex_lock	function
(	O
&	O
sock	pointer
->	O
lock	O
)	O
;	O
rpipe	pointer
=	O
sock	pointer
->	O
read_pipe	pointer
;	O
wpipe	pointer
=	O
sock	pointer
->	O
write_pipe	pointer
;	O
if	O
(	O
rpipe	pointer
)	O
{	O
pthread_mutex_lock	function
(	O
&	O
rpipe	pointer
->	O
lock	O
)	O
;	O
copy_time	function
(	O
&	O
rpipe	pointer
->	O
read_time	O
,	O
&	O
st	pointer
->	O
st_atim	struct
.	O
tv_sec	long
,	O
&	O
st	pointer
->	O
st_atim	struct
.	O
tv_nsec	long
)	O
;	O
st	pointer
->	O
st_size	long
=	O
pipe_readable	function
(	O
rpipe	pointer
,	O
1	int
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
rpipe	pointer
->	O
lock	O
)	O
;	O
}	O
if	O
(	O
wpipe	pointer
)	O
{	O
pthread_mutex_lock	function
(	O
&	O
wpipe	pointer
->	O
lock	O
)	O
;	O
copy_time	function
(	O
&	O
wpipe	pointer
->	O
write_time	O
,	O
&	O
st	pointer
->	O
st_mtim	struct
.	O
tv_sec	long
,	O
&	O
st	pointer
->	O
st_mtim	struct
.	O
tv_nsec	long
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
wpipe	pointer
->	O
lock	O
)	O
;	O
}	O
copy_time	function
(	O
&	O
sock	pointer
->	O
change_time	O
,	O
&	O
st	pointer
->	O
st_ctim	struct
.	O
tv_sec	long
,	O
&	O
st	pointer
->	O
st_ctim	struct
.	O
tv_nsec	long
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
sock	pointer
->	O
lock	O
)	O
;	O
return	O
0	int
;	O
}	O
error_t	O
S_io_get_openmodes	function
(	O
struct	O
sock_user	O
*	O
user	pointer
,	O
int	O
*	O
bits	pointer
)	O
{	O
unsigned	O
flags	int
;	O
if	O
(	O
!	O
user	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
flags	int
=	O
user	pointer
->	O
sock	pointer
->	O
flags	int
;	O
*	O
bits	pointer
=	O
O_APPEND	int
|	O
(	O
flags	int
&	O
PFLOCAL_SOCK_NONBLOCK	O
?	O
O_NONBLOCK	int
:	O
0	int
)	O
|	O
(	O
flags	int
&	O
PFLOCAL_SOCK_SHUTDOWN_READ	O
?	O
0	int
:	O
O_READ	O
)	O
|	O
(	O
flags	int
&	O
PFLOCAL_SOCK_SHUTDOWN_WRITE	O
?	O
0	int
:	O
O_WRITE	O
)	O
;	O
return	O
0	int
;	O
}	O
error_t	O
S_io_set_all_openmodes	function
(	O
struct	O
sock_user	O
*	O
user	pointer
,	O
int	O
bits	pointer
)	O
{	O
if	O
(	O
!	O
user	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
pthread_mutex_lock	function
(	O
&	O
user	pointer
->	O
sock	pointer
->	O
lock	O
)	O
;	O
if	O
(	O
bits	pointer
&	O
O_NONBLOCK	int
)	O
user	pointer
->	O
sock	pointer
->	O
flags	int
|=	O
PFLOCAL_SOCK_NONBLOCK	O
;	O
else	O
user	pointer
->	O
sock	pointer
->	O
flags	int
&=	O
~	O
PFLOCAL_SOCK_NONBLOCK	O
;	O
pthread_mutex_unlock	function
(	O
&	O
user	pointer
->	O
sock	pointer
->	O
lock	O
)	O
;	O
return	O
0	int
;	O
}	O
error_t	O
S_io_set_some_openmodes	function
(	O
struct	O
sock_user	O
*	O
user	pointer
,	O
int	O
bits	pointer
)	O
{	O
if	O
(	O
!	O
user	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
pthread_mutex_lock	function
(	O
&	O
user	pointer
->	O
sock	pointer
->	O
lock	O
)	O
;	O
if	O
(	O
bits	pointer
&	O
O_NONBLOCK	int
)	O
user	pointer
->	O
sock	pointer
->	O
flags	int
|=	O
PFLOCAL_SOCK_NONBLOCK	O
;	O
pthread_mutex_unlock	function
(	O
&	O
user	pointer
->	O
sock	pointer
->	O
lock	O
)	O
;	O
return	O
0	int
;	O
}	O
error_t	O
S_io_clear_some_openmodes	function
(	O
struct	O
sock_user	O
*	O
user	pointer
,	O
int	O
bits	pointer
)	O
{	O
if	O
(	O
!	O
user	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
pthread_mutex_lock	function
(	O
&	O
user	pointer
->	O
sock	pointer
->	O
lock	O
)	O
;	O
if	O
(	O
bits	pointer
&	O
O_NONBLOCK	int
)	O
user	pointer
->	O
sock	pointer
->	O
flags	int
&=	O
~	O
PFLOCAL_SOCK_NONBLOCK	O
;	O
pthread_mutex_unlock	function
(	O
&	O
user	pointer
->	O
sock	pointer
->	O
lock	O
)	O
;	O
return	O
0	int
;	O
}	O
error_t	O
S_io_reauthenticate	function
(	O
struct	O
sock_user	O
*	O
user	pointer
,	O
mach_port_t	O
rendezvous	int
)	O
{	O
error_t	O
err	O
;	O
mach_port_t	O
auth_server	O
;	O
mach_port_t	O
new_user_port	O
;	O
uid_t	int
uids_buf	array
[	O
NIDS	int
]	O
,	O
aux_uids_buf	array
[	O
NIDS	int
]	O
;	O
uid_t	int
*	O
uids	pointer
=	O
uids_buf	array
,	O
*	O
aux_uids	pointer
=	O
aux_uids_buf	array
;	O
gid_t	int
gids_buf	array
[	O
NIDS	int
]	O
,	O
aux_gids_buf	array
[	O
NIDS	int
]	O
;	O
gid_t	int
*	O
gids	pointer
=	O
gids_buf	array
,	O
*	O
aux_gids	pointer
=	O
aux_gids_buf	array
;	O
size_t	long
num_uids	long
=	O
NIDS	int
,	O
num_aux_uids	long
=	O
NIDS	int
;	O
size_t	long
num_gids	long
=	O
NIDS	int
,	O
num_aux_gids	long
=	O
NIDS	int
;	O
if	O
(	O
!	O
user	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
do	O
err	O
=	O
sock_create_port	function
(	O
user	pointer
->	O
sock	pointer
,	O
&	O
new_user_port	O
)	O
;	O
while	O
(	O
err	O
==	O
EINTR	O
)	O
;	O
if	O
(	O
err	O
)	O
return	O
err	O
;	O
auth_server	O
=	O
getauth	function
(	O
)	O
;	O
err	O
=	O
mach_port_insert_right	function
(	O
mach_task_self	function
(	O
)	O
,	O
new_user_port	O
,	O
new_user_port	O
,	O
MACH_MSG_TYPE_MAKE_SEND	O
)	O
;	O
assert_perror	function
(	O
err	O
)	O
;	O
do	O
err	O
=	O
auth_server_authenticate	function
(	O
auth_server	O
,	O
rendezvous	int
,	O
MACH_MSG_TYPE_COPY_SEND	O
,	O
new_user_port	O
,	O
MACH_MSG_TYPE_COPY_SEND	O
,	O
&	O
uids	pointer
,	O
&	O
num_uids	long
,	O
&	O
aux_uids	pointer
,	O
&	O
num_aux_uids	long
,	O
&	O
gids	pointer
,	O
&	O
num_gids	long
,	O
&	O
aux_gids	pointer
,	O
&	O
num_aux_gids	long
)	O
;	O
while	O
(	O
err	O
==	O
EINTR	O
)	O
;	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
rendezvous	int
)	O
;	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
auth_server	O
)	O
;	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
new_user_port	O
)	O
;	O
TRASH_IDS	O
(	O
uids	pointer
,	O
uids_buf	array
,	O
num_uids	long
)	O
;	O
TRASH_IDS	O
(	O
gids	pointer
,	O
gids_buf	array
,	O
num_gids	long
)	O
;	O
TRASH_IDS	O
(	O
aux_uids	pointer
,	O
aux_uids_buf	array
,	O
num_aux_uids	long
)	O
;	O
TRASH_IDS	O
(	O
aux_gids	pointer
,	O
aux_gids_buf	array
,	O
num_aux_gids	long
)	O
;	O
return	O
err	O
;	O
}	O
error_t	O
S_io_restrict_auth	function
(	O
struct	O
sock_user	O
*	O
user	pointer
,	O
mach_port_t	O
*	O
new_port	pointer
,	O
mach_msg_type_name_t	O
*	O
new_port_type	pointer
,	O
uid_t	int
*	O
uids	pointer
,	O
size_t	long
num_uids	long
,	O
uid_t	int
*	O
gids	pointer
,	O
size_t	long
num_gids	long
)	O
{	O
if	O
(	O
!	O
user	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
*	O
new_port_type	pointer
=	O
MACH_MSG_TYPE_MAKE_SEND	O
;	O
return	O
sock_create_port	function
(	O
user	pointer
->	O
sock	pointer
,	O
new_port	pointer
)	O
;	O
}	O
error_t	O
S_io_pathconf	function
(	O
struct	O
sock_user	O
*	O
user	pointer
,	O
int	O
name	int
,	O
int	O
*	O
value	pointer
)	O
{	O
if	O
(	O
user	pointer
==	O
NULL	O
)	O
return	O
EOPNOTSUPP	O
;	O
else	O
if	O
(	O
name	int
==	O
_PC_PIPE_BUF	int
)	O
{	O
pthread_mutex_lock	function
(	O
&	O
user	pointer
->	O
sock	pointer
->	O
lock	O
)	O
;	O
if	O
(	O
user	pointer
->	O
sock	pointer
->	O
write_pipe	pointer
==	O
NULL	O
)	O
*	O
value	pointer
=	O
0	int
;	O
else	O
*	O
value	pointer
=	O
user	pointer
->	O
sock	pointer
->	O
write_pipe	pointer
->	O
write_atomic	O
;	O
pthread_mutex_unlock	function
(	O
&	O
user	pointer
->	O
sock	pointer
->	O
lock	O
)	O
;	O
return	O
0	int
;	O
}	O
else	O
return	O
EINVAL	O
;	O
}	O
error_t	O
S_io_identity	function
(	O
struct	O
sock_user	O
*	O
user	pointer
,	O
mach_port_t	O
*	O
id	pointer
,	O
mach_msg_type_name_t	O
*	O
id_type	pointer
,	O
mach_port_t	O
*	O
fsys_id	pointer
,	O
mach_msg_type_name_t	O
*	O
fsys_id_type	pointer
,	O
ino_t	long
*	O
fileno	pointer
)	O
{	O
static	O
mach_port_t	O
server_id	int
=	O
MACH_PORT_NULL	O
;	O
error_t	O
err	O
=	O
0	int
;	O
struct	O
sock	pointer
*	O
sock	pointer
;	O
if	O
(	O
!	O
user	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
if	O
(	O
server_id	int
==	O
MACH_PORT_NULL	O
)	O
{	O
static	O
pthread_mutex_t	union
server_id_lock	union
=	O
PTHREAD_MUTEX_INITIALIZER	O
;	O
pthread_mutex_lock	function
(	O
&	O
server_id_lock	union
)	O
;	O
if	O
(	O
server_id	int
==	O
MACH_PORT_NULL	O
)	O
err	O
=	O
mach_port_allocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
MACH_PORT_RIGHT_RECEIVE	O
,	O
&	O
server_id	int
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
server_id_lock	union
)	O
;	O
if	O
(	O
err	O
)	O
return	O
err	O
;	O
}	O
sock	pointer
=	O
user	pointer
->	O
sock	pointer
;	O
pthread_mutex_lock	function
(	O
&	O
sock	pointer
->	O
lock	O
)	O
;	O
if	O
(	O
sock	pointer
->	O
id	pointer
==	O
MACH_PORT_NULL	O
)	O
err	O
=	O
mach_port_allocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
MACH_PORT_RIGHT_RECEIVE	O
,	O
&	O
sock	pointer
->	O
id	pointer
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
sock	pointer
->	O
lock	O
)	O
;	O
if	O
(	O
!	O
err	O
)	O
{	O
*	O
id	pointer
=	O
sock	pointer
->	O
id	pointer
;	O
*	O
id_type	pointer
=	O
MACH_MSG_TYPE_MAKE_SEND	O
;	O
*	O
fsys_id	pointer
=	O
server_id	int
;	O
*	O
fsys_id_type	pointer
=	O
MACH_MSG_TYPE_MAKE_SEND	O
;	O
*	O
fileno	pointer
=	O
sock	pointer
->	O
id	pointer
;	O
}	O
return	O
err	O
;	O
}	O
error_t	O
S_io_revoke	function
(	O
struct	O
sock_user	O
*	O
user	pointer
)	O
{	O
return	O
EOPNOTSUPP	O
;	O
}	O
error_t	O
S_io_async	function
(	O
struct	O
sock_user	O
*	O
user	pointer
,	O
mach_port_t	O
notify_port	int
,	O
mach_port_t	O
*	O
async_id_port	pointer
,	O
mach_msg_type_name_t	O
*	O
async_id_port_type	pointer
)	O
{	O
return	O
EOPNOTSUPP	O
;	O
}	O
error_t	O
S_io_mod_owner	function
(	O
struct	O
sock_user	O
*	O
user	pointer
,	O
pid_t	int
owner	int
)	O
{	O
return	O
EOPNOTSUPP	O
;	O
}	O
error_t	O
S_io_get_owner	function
(	O
struct	O
sock_user	O
*	O
user	pointer
,	O
pid_t	int
*	O
owner	int
)	O
{	O
return	O
EOPNOTSUPP	O
;	O
}	O
error_t	O
S_io_get_icky_async_id	function
(	O
struct	O
sock_user	O
*	O
user	pointer
,	O
mach_port_t	O
*	O
icky_async_id_port	pointer
,	O
mach_msg_type_name_t	O
*	O
icky_async_id_port_type	pointer
)	O
{	O
return	O
EOPNOTSUPP	O
;	O
}	O
error_t	O
S_io_map	function
(	O
struct	O
sock_user	O
*	O
user	pointer
,	O
mach_port_t	O
*	O
memobj_rd	pointer
,	O
mach_msg_type_name_t	O
*	O
memobj_rd_type	pointer
,	O
mach_port_t	O
*	O
memobj_wt	pointer
,	O
mach_msg_type_name_t	O
*	O
memobj_wt_type	pointer
)	O
{	O
return	O
EOPNOTSUPP	O
;	O
}	O
error_t	O
S_io_map_cntl	function
(	O
struct	O
sock_user	O
*	O
user	pointer
,	O
mach_port_t	O
*	O
mem	pointer
,	O
mach_msg_type_name_t	O
*	O
mem_type	pointer
)	O
{	O
return	O
EOPNOTSUPP	O
;	O
}	O
error_t	O
S_io_get_conch	function
(	O
struct	O
sock_user	O
*	O
user	pointer
)	O
{	O
return	O
EOPNOTSUPP	O
;	O
}	O
error_t	O
S_io_release_conch	function
(	O
struct	O
sock_user	O
*	O
user	pointer
)	O
{	O
return	O
EOPNOTSUPP	O
;	O
}	O
error_t	O
S_io_eofnotify	function
(	O
struct	O
sock_user	O
*	O
user	pointer
)	O
{	O
return	O
EOPNOTSUPP	O
;	O
}	O
error_t	O
S_io_prenotify	function
(	O
struct	O
sock_user	O
*	O
user	pointer
,	O
vm_offset_t	O
start	int
,	O
vm_offset_t	O
end	int
)	O
{	O
return	O
EOPNOTSUPP	O
;	O
}	O
error_t	O
S_io_postnotify	function
(	O
struct	O
sock_user	O
*	O
user	pointer
,	O
vm_offset_t	O
start	int
,	O
vm_offset_t	O
end	int
)	O
{	O
return	O
EOPNOTSUPP	O
;	O
}	O
error_t	O
S_io_readsleep	function
(	O
struct	O
sock_user	O
*	O
user	pointer
)	O
{	O
return	O
EOPNOTSUPP	O
;	O
}	O
error_t	O
S_io_readnotify	function
(	O
struct	O
sock_user	O
*	O
user	pointer
)	O
{	O
return	O
EOPNOTSUPP	O
;	O
}	O
error_t	O
S_io_sigio	function
(	O
struct	O
sock_user	O
*	O
user	pointer
)	O
{	O
return	O
EOPNOTSUPP	O
;	O
}	O
error_t	O
S_io_server_version	function
(	O
struct	O
sock_user	O
*	O
user	pointer
,	O
char	O
*	O
name	int
,	O
int	O
*	O
maj	pointer
,	O
int	O
*	O
min	pointer
,	O
int	O
*	O
edit	pointer
)	O
{	O
return	O
EOPNOTSUPP	O
;	O
}	O
