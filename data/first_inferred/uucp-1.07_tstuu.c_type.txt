const	O
char	O
tstuu_rcsid	array
[	O
]	O
=	O
"$Id: tstuu.c,v 1.89 2002/03/05 19:10:41 ian Rel $"	pointer
;	O
typedef	O
int	O
wait_status	int
;	O
extern	O
long	O
times	function
(	O
)	O
;	O
struct	O
sbuf	struct
{	O
struct	O
sbuf	struct
*	O
qnext	pointer
;	O
int	O
cstart	int
;	O
int	O
cend	int
;	O
char	O
ab	array
[	O
BUFCHARS	O
]	O
;	O
}	O
;	O
static	O
void	O
umake_file	function
P	O
(	O
(	O
const	O
char	O
*	O
zfile	pointer
,	O
int	O
cextra	int
)	O
)	O
;	O
static	O
void	O
uprepare_test	function
P	O
(	O
(	O
boolean	int
fmake	int
,	O
int	O
itest	int
,	O
boolean	int
fcall_uucico	int
,	O
const	O
char	O
*	O
zsys	pointer
)	O
)	O
;	O
static	O
void	O
ucheck_file	function
P	O
(	O
(	O
const	O
char	O
*	O
zfile	pointer
,	O
const	O
char	O
*	O
zerr	pointer
,	O
int	O
cextra	int
)	O
)	O
;	O
static	O
void	O
ucheck_test	function
P	O
(	O
(	O
int	O
itest	int
,	O
boolean	int
fcall_uucico	int
)	O
)	O
;	O
static	O
RETSIGTYPE	void
uchild	function
P	O
(	O
(	O
int	O
isig	int
)	O
)	O
;	O
static	O
int	O
cpshow	function
P	O
(	O
(	O
char	O
*	O
z	pointer
,	O
int	O
bchar	int
)	O
)	O
;	O
static	O
void	O
uchoose	function
P	O
(	O
(	O
int	O
*	O
po1	pointer
,	O
int	O
*	O
po2	pointer
)	O
)	O
;	O
static	O
long	O
cread	function
P	O
(	O
(	O
int	O
o	int
,	O
struct	O
sbuf	struct
*	O
*	O
)	O
)	O
;	O
static	O
boolean	int
fsend	function
P	O
(	O
(	O
int	O
o	int
,	O
int	O
oslave	int
,	O
struct	O
sbuf	struct
*	O
*	O
)	O
)	O
;	O
static	O
boolean	int
fwritable	function
P	O
(	O
(	O
int	O
o	int
)	O
)	O
;	O
static	O
void	O
xsystem	function
P	O
(	O
(	O
const	O
char	O
*	O
zcmd	pointer
)	O
)	O
;	O
static	O
FILE	struct
*	O
xfopen	function
P	O
(	O
(	O
const	O
char	O
*	O
zname	pointer
,	O
const	O
char	O
*	O
zmode	pointer
)	O
)	O
;	O
static	O
char	O
*	O
zDebug	pointer
;	O
static	O
int	O
iTest	int
;	O
static	O
boolean	int
fCall_uucico	int
;	O
static	O
int	O
iPercent	int
;	O
static	O
pid_t	int
iPid1	int
,	O
iPid2	int
;	O
static	O
int	O
cFrom1	int
,	O
cFrom2	int
;	O
static	O
char	O
abLogout1	array
[	O
sizeof	O
"tstout /dev/ptyp0"	pointer
]	O
;	O
static	O
char	O
abLogout2	array
[	O
sizeof	O
"tstout /dev/ptyp0"	pointer
]	O
;	O
static	O
char	O
*	O
zProtocols	pointer
;	O
int	O
main	function
(	O
argc	int
,	O
argv	pointer
)	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
{	O
int	O
iopt	int
;	O
const	O
char	O
*	O
zcmd1	pointer
,	O
*	O
zcmd2	pointer
;	O
const	O
char	O
*	O
zsys	pointer
;	O
boolean	int
fmake	int
=	O
TRUE	O
;	O
int	O
omaster1	int
,	O
oslave1	int
,	O
omaster2	int
,	O
oslave2	int
;	O
char	O
abpty1	array
[	O
sizeof	O
"/dev/ptyp0"	pointer
]	O
;	O
char	O
abpty2	array
[	O
sizeof	O
"/dev/ptyp0"	pointer
]	O
;	O
struct	O
sbuf	struct
*	O
qbuf1	pointer
,	O
*	O
qbuf2	pointer
;	O
zcmd1	pointer
=	O
NULL	O
;	O
zcmd2	pointer
=	O
NULL	O
;	O
zsys	pointer
=	O
"test2"	pointer
;	O
while	O
(	O
(	O
iopt	int
=	O
getopt	function
(	O
argc	int
,	O
argv	pointer
,	O
"c:np:s:t:ux:1:2:"	pointer
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
iopt	int
)	O
{	O
case	O
'c'	O
:	O
zProtocols	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
'n'	O
:	O
fmake	int
=	O
FALSE	O
;	O
break	O
;	O
case	O
'p'	O
:	O
iPercent	int
=	O
(	O
int	O
)	O
strtol	function
(	O
optarg	pointer
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
10	int
)	O
;	O
srand	function
(	O
(	O
unsigned	O
int	O
)	O
ixsysdep_time	function
(	O
(	O
long	O
*	O
)	O
NULL	O
)	O
)	O
;	O
break	O
;	O
case	O
's'	O
:	O
zsys	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
't'	O
:	O
iTest	int
=	O
(	O
int	O
)	O
strtol	function
(	O
optarg	pointer
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
10	int
)	O
;	O
break	O
;	O
case	O
'u'	O
:	O
fCall_uucico	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'x'	O
:	O
zDebug	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
'1'	O
:	O
zcmd1	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
'2'	O
:	O
zcmd2	pointer
=	O
optarg	pointer
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"Taylor UUCP %s, copyright (C) 1991, 92, 93, 94, 1995 Ian Lance Taylor\n"	pointer
,	O
VERSION	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Usage: tstuu [-xn] [-t #] [-u] [-1 cmd] [-2 cmd]\n"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
if	O
(	O
fCall_uucico	int
&&	O
zcmd2	pointer
==	O
NULL	O
)	O
zcmd2	pointer
=	O
ZUUCICO_CMD	pointer
;	O
uprepare_test	function
(	O
fmake	int
,	O
iTest	int
,	O
fCall_uucico	int
,	O
zsys	pointer
)	O
;	O
(	O
void	O
)	O
remove	function
(	O
"/usr/tmp/tstuu/spool1/core"	pointer
)	O
;	O
(	O
void	O
)	O
remove	function
(	O
"/usr/tmp/tstuu/spool2/core"	pointer
)	O
;	O
omaster1	int
=	O
-	O
1	int
;	O
oslave1	int
=	O
-	O
1	int
;	O
omaster2	int
=	O
-	O
1	int
;	O
oslave2	int
=	O
-	O
1	int
;	O
{	O
char	O
*	O
zptyname	pointer
;	O
const	O
char	O
*	O
zpty	pointer
;	O
zptyname	pointer
=	O
abpty1	array
;	O
for	O
(	O
zpty	pointer
=	O
"pqrs"	pointer
;	O
*	O
zpty	pointer
!=	O
'\0'	O
;	O
++	O
zpty	pointer
)	O
{	O
int	O
ipty	int
;	O
for	O
(	O
ipty	int
=	O
0	int
;	O
ipty	int
<	O
16	int
;	O
ipty	int
++	O
)	O
{	O
int	O
om	int
,	O
os	int
;	O
FILE	struct
*	O
e	pointer
;	O
sprintf	function
(	O
zptyname	pointer
,	O
"/dev/pty%c%c"	pointer
,	O
*	O
zpty	pointer
,	O
"0123456789abcdef"	pointer
[	O
ipty	int
]	O
)	O
;	O
om	int
=	O
open	function
(	O
zptyname	pointer
,	O
O_RDWR	int
)	O
;	O
if	O
(	O
om	int
<	O
0	int
)	O
continue	O
;	O
zptyname	pointer
[	O
5	int
]	O
=	O
't'	O
;	O
os	int
=	O
open	function
(	O
zptyname	pointer
,	O
O_RDWR	int
)	O
;	O
if	O
(	O
os	int
<	O
0	int
)	O
{	O
(	O
void	O
)	O
close	function
(	O
om	int
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
omaster1	int
==	O
-	O
1	int
)	O
{	O
omaster1	int
=	O
om	int
;	O
oslave1	int
=	O
os	int
;	O
e	pointer
=	O
fopen	function
(	O
"/usr/tmp/tstuu/pty1"	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
e	pointer
==	O
NULL	O
)	O
{	O
perror	function
(	O
"fopen"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
fprintf	function
(	O
e	pointer
,	O
"%s"	pointer
,	O
zptyname	pointer
+	O
5	int
)	O
;	O
if	O
(	O
fclose	function
(	O
e	pointer
)	O
!=	O
0	int
)	O
{	O
perror	function
(	O
"fclose"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
zptyname	pointer
=	O
abpty2	array
;	O
}	O
else	O
{	O
omaster2	int
=	O
om	int
;	O
oslave2	int
=	O
os	int
;	O
e	pointer
=	O
fopen	function
(	O
"/usr/tmp/tstuu/pty2"	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
e	pointer
==	O
NULL	O
)	O
{	O
perror	function
(	O
"fopen"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
fprintf	function
(	O
e	pointer
,	O
"%s"	pointer
,	O
zptyname	pointer
+	O
5	int
)	O
;	O
if	O
(	O
fclose	function
(	O
e	pointer
)	O
!=	O
0	int
)	O
{	O
perror	function
(	O
"fclose"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
break	O
;	O
}	O
}	O
if	O
(	O
omaster1	int
!=	O
-	O
1	int
&&	O
omaster2	int
!=	O
-	O
1	int
)	O
break	O
;	O
}	O
}	O
if	O
(	O
omaster2	int
==	O
-	O
1	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"No pseudo-terminals available\n"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
omaster1	int
>	O
15	int
||	O
omaster2	int
>	O
15	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"File descriptors are too large\n"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
zcmd1	pointer
==	O
NULL	O
||	O
strncmp	function
(	O
zcmd1	pointer
,	O
"login"	pointer
,	O
sizeof	O
"login"	pointer
-	O
1	int
)	O
!=	O
0	int
)	O
abLogout1	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
else	O
sprintf	function
(	O
abLogout1	array
,	O
"tstout %s"	pointer
,	O
abpty1	array
)	O
;	O
if	O
(	O
zcmd2	pointer
==	O
NULL	O
||	O
strncmp	function
(	O
zcmd2	pointer
,	O
"login"	pointer
,	O
sizeof	O
"login"	pointer
-	O
1	int
)	O
!=	O
0	int
)	O
abLogout2	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
else	O
sprintf	function
(	O
abLogout2	array
,	O
"tstout %s"	pointer
,	O
abpty2	array
)	O
;	O
iPid1	int
=	O
fork	function
(	O
)	O
;	O
if	O
(	O
iPid1	int
<	O
0	int
)	O
{	O
perror	function
(	O
"fork"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
else	O
if	O
(	O
iPid1	int
==	O
0	int
)	O
{	O
if	O
(	O
close	function
(	O
0	int
)	O
<	O
0	int
||	O
close	function
(	O
1	int
)	O
<	O
0	int
||	O
close	function
(	O
omaster1	int
)	O
<	O
0	int
||	O
close	function
(	O
omaster2	int
)	O
<	O
0	int
||	O
close	function
(	O
oslave2	int
)	O
<	O
0	int
)	O
perror	function
(	O
"close"	pointer
)	O
;	O
if	O
(	O
dup2	function
(	O
oslave1	int
,	O
0	int
)	O
<	O
0	int
||	O
dup2	function
(	O
oslave1	int
,	O
1	int
)	O
<	O
0	int
)	O
perror	function
(	O
"dup2"	pointer
)	O
;	O
if	O
(	O
close	function
(	O
oslave1	int
)	O
<	O
0	int
)	O
perror	function
(	O
"close"	pointer
)	O
;	O
sleep	function
(	O
3	int
)	O
;	O
if	O
(	O
zDebug	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"About to exec first process\n"	pointer
)	O
;	O
if	O
(	O
zcmd1	pointer
!=	O
NULL	O
)	O
exit	function
(	O
system	function
(	O
(	O
char	O
*	O
)	O
zcmd1	pointer
)	O
)	O
;	O
else	O
{	O
(	O
void	O
)	O
execl	function
(	O
"uucico"	pointer
,	O
"uucico"	pointer
,	O
"-I"	pointer
,	O
"/usr/tmp/tstuu/Config1"	pointer
,	O
"-q"	pointer
,	O
"-S"	pointer
,	O
zsys	pointer
,	O
"-pstdin"	pointer
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
perror	function
(	O
"execl failed"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
iPid2	int
=	O
fork	function
(	O
)	O
;	O
if	O
(	O
iPid2	int
<	O
0	int
)	O
{	O
perror	function
(	O
"fork"	pointer
)	O
;	O
kill	function
(	O
iPid1	int
,	O
SIGTERM	int
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
else	O
if	O
(	O
iPid2	int
==	O
0	int
)	O
{	O
if	O
(	O
close	function
(	O
0	int
)	O
<	O
0	int
||	O
close	function
(	O
1	int
)	O
<	O
0	int
||	O
close	function
(	O
omaster1	int
)	O
<	O
0	int
||	O
close	function
(	O
oslave1	int
)	O
<	O
0	int
||	O
close	function
(	O
omaster2	int
)	O
<	O
0	int
)	O
perror	function
(	O
"close"	pointer
)	O
;	O
if	O
(	O
dup2	function
(	O
oslave2	int
,	O
0	int
)	O
<	O
0	int
||	O
dup2	function
(	O
oslave2	int
,	O
1	int
)	O
<	O
0	int
)	O
perror	function
(	O
"dup2"	pointer
)	O
;	O
if	O
(	O
close	function
(	O
oslave2	int
)	O
<	O
0	int
)	O
perror	function
(	O
"close"	pointer
)	O
;	O
sleep	function
(	O
5	int
)	O
;	O
if	O
(	O
zDebug	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"About to exec second process\n"	pointer
)	O
;	O
if	O
(	O
fCall_uucico	int
)	O
{	O
(	O
void	O
)	O
execl	function
(	O
UUCICO_EXECL	O
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
perror	function
(	O
"execl failed"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
else	O
if	O
(	O
zcmd2	pointer
!=	O
NULL	O
)	O
exit	function
(	O
system	function
(	O
(	O
char	O
*	O
)	O
zcmd2	pointer
)	O
)	O
;	O
else	O
{	O
(	O
void	O
)	O
execl	function
(	O
"uucico"	pointer
,	O
"uucico"	pointer
,	O
"-I"	pointer
,	O
"/usr/tmp/tstuu/Config2"	pointer
,	O
"-lq"	pointer
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
perror	function
(	O
"execl failed"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
signal	function
(	O
SIGCHLD	int
,	O
uchild	function
)	O
;	O
if	O
(	O
fcntl	function
(	O
omaster1	int
,	O
F_SETFL	int
,	O
O_NDELAY	O
|	O
O_NONBLOCK	int
)	O
<	O
0	int
&&	O
errno	O
==	O
EINVAL	int
)	O
(	O
void	O
)	O
fcntl	function
(	O
omaster1	int
,	O
F_SETFL	int
,	O
O_NONBLOCK	int
)	O
;	O
if	O
(	O
fcntl	function
(	O
omaster2	int
,	O
F_SETFL	int
,	O
O_NDELAY	O
|	O
O_NONBLOCK	int
)	O
<	O
0	int
&&	O
errno	O
==	O
EINVAL	int
)	O
(	O
void	O
)	O
fcntl	function
(	O
omaster2	int
,	O
F_SETFL	int
,	O
O_NONBLOCK	int
)	O
;	O
qbuf1	pointer
=	O
NULL	O
;	O
qbuf2	pointer
=	O
NULL	O
;	O
while	O
(	O
TRUE	O
)	O
{	O
int	O
o1	int
,	O
o2	int
;	O
boolean	int
fcont	int
;	O
o1	int
=	O
omaster1	int
;	O
o2	int
=	O
omaster2	int
;	O
uchoose	function
(	O
&	O
o1	int
,	O
&	O
o2	int
)	O
;	O
if	O
(	O
o1	int
==	O
-	O
1	int
&&	O
o2	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
zDebug	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Five second pause\n"	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
o1	int
!=	O
-	O
1	int
)	O
cFrom1	int
+=	O
cread	function
(	O
omaster1	int
,	O
&	O
qbuf1	pointer
)	O
;	O
if	O
(	O
o2	int
!=	O
-	O
1	int
)	O
cFrom2	int
+=	O
cread	function
(	O
omaster2	int
,	O
&	O
qbuf2	pointer
)	O
;	O
do	O
{	O
fcont	int
=	O
FALSE	O
;	O
if	O
(	O
qbuf1	pointer
!=	O
NULL	O
&&	O
fwritable	function
(	O
omaster2	int
)	O
&&	O
fsend	function
(	O
omaster2	int
,	O
oslave2	int
,	O
&	O
qbuf1	pointer
)	O
)	O
fcont	int
=	O
TRUE	O
;	O
if	O
(	O
qbuf2	pointer
!=	O
NULL	O
&&	O
fwritable	function
(	O
omaster1	int
)	O
&&	O
fsend	function
(	O
omaster1	int
,	O
oslave1	int
,	O
&	O
qbuf2	pointer
)	O
)	O
fcont	int
=	O
TRUE	O
;	O
if	O
(	O
!	O
fcont	int
&&	O
(	O
qbuf1	pointer
!=	O
NULL	O
||	O
qbuf2	pointer
!=	O
NULL	O
)	O
)	O
{	O
long	O
cgot1	long
,	O
cgot2	long
;	O
cgot1	long
=	O
cread	function
(	O
omaster1	int
,	O
&	O
qbuf1	pointer
)	O
;	O
cFrom1	int
+=	O
cgot1	long
;	O
cgot2	long
=	O
cread	function
(	O
omaster2	int
,	O
&	O
qbuf2	pointer
)	O
;	O
cFrom2	int
+=	O
cgot2	long
;	O
fcont	int
=	O
TRUE	O
;	O
}	O
}	O
while	O
(	O
fcont	int
)	O
;	O
}	O
}	O
static	O
RETSIGTYPE	void
uchild	function
(	O
isig	int
)	O
int	O
isig	int
ATTRIBUTE_UNUSED	O
;	O
{	O
struct	O
tms	struct
sbase	struct
,	O
s1	struct
,	O
s2	struct
;	O
signal	function
(	O
SIGCHLD	int
,	O
SIG_DFL	O
)	O
;	O
sleep	function
(	O
2	int
)	O
;	O
(	O
void	O
)	O
kill	function
(	O
iPid1	int
,	O
SIGTERM	int
)	O
;	O
(	O
void	O
)	O
kill	function
(	O
iPid2	int
,	O
SIGTERM	int
)	O
;	O
(	O
void	O
)	O
times	function
(	O
&	O
sbase	struct
)	O
;	O
(	O
void	O
)	O
waitpid	function
(	O
iPid1	int
,	O
(	O
pointer	pointer
)	O
NULL	O
,	O
0	int
)	O
;	O
(	O
void	O
)	O
times	function
(	O
&	O
s1	struct
)	O
;	O
(	O
void	O
)	O
waitpid	function
(	O
iPid2	int
,	O
(	O
pointer	pointer
)	O
NULL	O
,	O
0	int
)	O
;	O
(	O
void	O
)	O
times	function
(	O
&	O
s2	struct
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
" First child: user: %g; system: %g\n"	pointer
,	O
(	O
double	O
)	O
(	O
s1	struct
.	O
tms_cutime	long
-	O
sbase	struct
.	O
tms_cutime	long
)	O
/	O
(	O
double	O
)	O
TIMES_TICK	int
,	O
(	O
double	O
)	O
(	O
s1	struct
.	O
tms_cstime	long
-	O
sbase	struct
.	O
tms_cstime	long
)	O
/	O
(	O
double	O
)	O
TIMES_TICK	int
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Second child: user: %g; system: %g\n"	pointer
,	O
(	O
double	O
)	O
(	O
s2	struct
.	O
tms_cutime	long
-	O
s1	struct
.	O
tms_cutime	long
)	O
/	O
(	O
double	O
)	O
TIMES_TICK	int
,	O
(	O
double	O
)	O
(	O
s2	struct
.	O
tms_cstime	long
-	O
s1	struct
.	O
tms_cstime	long
)	O
/	O
(	O
double	O
)	O
TIMES_TICK	int
)	O
;	O
ucheck_test	function
(	O
iTest	int
,	O
fCall_uucico	int
)	O
;	O
if	O
(	O
abLogout1	array
[	O
0	int
]	O
!=	O
'\0'	O
)	O
{	O
if	O
(	O
zDebug	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Executing %s\n"	pointer
,	O
abLogout1	array
)	O
;	O
(	O
void	O
)	O
system	function
(	O
abLogout1	array
)	O
;	O
}	O
if	O
(	O
abLogout2	array
[	O
0	int
]	O
!=	O
'\0'	O
)	O
{	O
if	O
(	O
zDebug	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Executing %s\n"	pointer
,	O
abLogout2	array
)	O
;	O
(	O
void	O
)	O
system	function
(	O
abLogout2	array
)	O
;	O
}	O
fprintf	function
(	O
stderr	pointer
,	O
"Wrote %d bytes from 1 to 2\n"	pointer
,	O
cFrom1	int
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Wrote %d bytes from 2 to 1\n"	pointer
,	O
cFrom2	int
)	O
;	O
if	O
(	O
access	function
(	O
"/usr/tmp/tstuu/spool1/core"	pointer
,	O
R_OK	int
)	O
==	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"core file 1 exists\n"	pointer
)	O
;	O
if	O
(	O
access	function
(	O
"/usr/tmp/tstuu/spool2/core"	pointer
,	O
R_OK	int
)	O
==	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"core file 2 exists\n"	pointer
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
static	O
FILE	struct
*	O
xfopen	function
(	O
zname	pointer
,	O
zmode	pointer
)	O
const	O
char	O
*	O
zname	pointer
;	O
const	O
char	O
*	O
zmode	pointer
;	O
{	O
FILE	struct
*	O
eret	pointer
;	O
eret	pointer
=	O
fopen	function
(	O
zname	pointer
,	O
zmode	pointer
)	O
;	O
if	O
(	O
eret	pointer
==	O
NULL	O
)	O
{	O
perror	function
(	O
zname	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
return	O
eret	pointer
;	O
}	O
static	O
void	O
xfclose	function
P	O
(	O
(	O
FILE	struct
*	O
e	pointer
)	O
)	O
;	O
static	O
void	O
xfclose	function
(	O
e	pointer
)	O
FILE	struct
*	O
e	pointer
;	O
{	O
if	O
(	O
fclose	function
(	O
e	pointer
)	O
!=	O
0	int
)	O
{	O
perror	function
(	O
"fclose"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
static	O
void	O
umake_file	function
(	O
z	pointer
,	O
c	int
)	O
const	O
char	O
*	O
z	pointer
;	O
int	O
c	int
;	O
{	O
int	O
i	int
;	O
FILE	struct
*	O
e	pointer
;	O
e	pointer
=	O
xfopen	function
(	O
z	pointer
,	O
"w"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
256	int
;	O
i	int
++	O
)	O
{	O
int	O
i2	int
;	O
for	O
(	O
i2	int
=	O
0	int
;	O
i2	int
<	O
256	int
;	O
i2	int
++	O
)	O
putc	function
(	O
i	int
,	O
e	pointer
)	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
c	int
;	O
i	int
++	O
)	O
putc	function
(	O
i	int
,	O
e	pointer
)	O
;	O
xfclose	function
(	O
e	pointer
)	O
;	O
}	O
static	O
void	O
ucheck_file	function
(	O
z	pointer
,	O
zerr	pointer
,	O
c	int
)	O
const	O
char	O
*	O
z	pointer
;	O
const	O
char	O
*	O
zerr	pointer
;	O
int	O
c	int
;	O
{	O
int	O
i	int
;	O
FILE	struct
*	O
e	pointer
;	O
e	pointer
=	O
xfopen	function
(	O
z	pointer
,	O
"r"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
256	int
;	O
i	int
++	O
)	O
{	O
int	O
i2	int
;	O
for	O
(	O
i2	int
=	O
0	int
;	O
i2	int
<	O
256	int
;	O
i2	int
++	O
)	O
{	O
int	O
bread	int
;	O
bread	int
=	O
getc	function
(	O
e	pointer
)	O
;	O
if	O
(	O
bread	int
==	O
EOF	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: Unexpected EOF at position %d,%d\n"	pointer
,	O
zerr	pointer
,	O
i	int
,	O
i2	int
)	O
;	O
xfclose	function
(	O
e	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
bread	int
!=	O
i	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: At position %d,%d got %d expected %d\n"	pointer
,	O
zerr	pointer
,	O
i	int
,	O
i2	int
,	O
bread	int
,	O
i	int
)	O
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
c	int
;	O
i	int
++	O
)	O
{	O
int	O
bread	int
;	O
bread	int
=	O
getc	function
(	O
e	pointer
)	O
;	O
if	O
(	O
bread	int
==	O
EOF	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: Unexpected EOF at extra %d\n"	pointer
,	O
zerr	pointer
,	O
i	int
)	O
;	O
xfclose	function
(	O
e	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
bread	int
!=	O
i	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: At extra %d got %d expected %d\n"	pointer
,	O
zerr	pointer
,	O
i	int
,	O
bread	int
,	O
i	int
)	O
;	O
}	O
if	O
(	O
getc	function
(	O
e	pointer
)	O
!=	O
EOF	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: File is too long"	pointer
,	O
zerr	pointer
)	O
;	O
xfclose	function
(	O
e	pointer
)	O
;	O
}	O
static	O
void	O
uprepare_test	function
(	O
fmake	int
,	O
itest	int
,	O
fcall_uucico	int
,	O
zsys	pointer
)	O
boolean	int
fmake	int
;	O
int	O
itest	int
;	O
boolean	int
fcall_uucico	int
;	O
const	O
char	O
*	O
zsys	pointer
;	O
{	O
FILE	struct
*	O
e	pointer
;	O
const	O
char	O
*	O
zuucp1	pointer
,	O
*	O
zuucp2	pointer
;	O
const	O
char	O
*	O
zuux1	pointer
,	O
*	O
zuux2	pointer
;	O
char	O
ab	array
[	O
1000	int
]	O
;	O
const	O
char	O
*	O
zfrom	pointer
;	O
const	O
char	O
*	O
zto	pointer
;	O
(	O
void	O
)	O
umask	function
(	O
0	int
)	O
;	O
if	O
(	O
mkdir	function
(	O
(	O
char	O
*	O
)	O
"/usr/tmp/tstuu"	pointer
,	O
IPUBLIC_DIRECTORY_MODE	O
|	O
S_IWOTH	O
)	O
!=	O
0	int
&&	O
errno	O
!=	O
EEXIST	int
)	O
{	O
perror	function
(	O
"mkdir"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
mkdir	function
(	O
(	O
char	O
*	O
)	O
"/usr/tmp/tstuu/spool1"	pointer
,	O
IPUBLIC_DIRECTORY_MODE	O
)	O
!=	O
0	int
&&	O
errno	O
!=	O
EEXIST	int
)	O
{	O
perror	function
(	O
"mkdir"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
mkdir	function
(	O
(	O
char	O
*	O
)	O
"/usr/tmp/tstuu/spool2"	pointer
,	O
IPUBLIC_DIRECTORY_MODE	O
)	O
!=	O
0	int
&&	O
errno	O
!=	O
EEXIST	int
)	O
{	O
perror	function
(	O
"mkdir"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
fmake	int
)	O
{	O
e	pointer
=	O
xfopen	function
(	O
"/usr/tmp/tstuu/Config1"	pointer
,	O
"w"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"# First test configuration file\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"nodename test1\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"spool /usr/tmp/tstuu/spool1\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"lockdir /usr/tmp/tstuu/spool1\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"sysfile /usr/tmp/tstuu/System1\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"sysfile /usr/tmp/tstuu/System1.2\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"portfile /usr/tmp/tstuu/Port1\n"	pointer
)	O
;	O
(	O
void	O
)	O
remove	function
(	O
"/usr/tmp/tstuu/Log1"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"logfile /usr/tmp/tstuu/Log1\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"statfile /usr/tmp/tstuu/Stats1\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"debugfile /usr/tmp/tstuu/Debug1\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"callfile /usr/tmp/tstuu/Call1\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"pubdir /usr/tmp/tstuu\n"	pointer
)	O
;	O
if	O
(	O
zDebug	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
"debug %s\n"	pointer
,	O
zDebug	pointer
)	O
;	O
xfclose	function
(	O
e	pointer
)	O
;	O
e	pointer
=	O
xfopen	function
(	O
"/usr/tmp/tstuu/System1"	pointer
,	O
"w"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"# This file is ignored, to test multiple system files\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"time never\n"	pointer
)	O
;	O
xfclose	function
(	O
e	pointer
)	O
;	O
e	pointer
=	O
xfopen	function
(	O
"/usr/tmp/tstuu/System1.2"	pointer
,	O
"w"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"# First test system file\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"time any\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"port stdin\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"# That was the defaults\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"system %s\n"	pointer
,	O
zsys	pointer
)	O
;	O
if	O
(	O
!	O
fcall_uucico	int
)	O
{	O
FILE	struct
*	O
eprog	pointer
;	O
eprog	pointer
=	O
xfopen	function
(	O
"/usr/tmp/tstuu/Chat1"	pointer
,	O
"w"	pointer
)	O
;	O
fprintf	function
(	O
eprog	pointer
,	O
"sleep 2\n"	pointer
)	O
;	O
fprintf	function
(	O
eprog	pointer
,	O
"echo password $1 speed $2 1>&2\n"	pointer
)	O
;	O
fprintf	function
(	O
eprog	pointer
,	O
"echo test1\n"	pointer
)	O
;	O
fprintf	function
(	O
eprog	pointer
,	O
"exit 0\n"	pointer
)	O
;	O
xfclose	function
(	O
eprog	pointer
)	O
;	O
if	O
(	O
chmod	function
(	O
"/usr/tmp/tstuu/Chat1"	pointer
,	O
S_IRWXU	O
|	O
S_IRGRP	O
|	O
S_IXGRP	O
|	O
S_IROTH	O
|	O
S_IXOTH	O
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
"chmod (/usr/tmp/tstuu/Chat1)"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
fprintf	function
(	O
e	pointer
,	O
"chat-program /usr/tmp/tstuu/Chat1 \\P \\S\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"chat word: \\P\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"chat-fail login;\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"call-login *\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"call-password *\n"	pointer
)	O
;	O
}	O
else	O
fprintf	function
(	O
e	pointer
,	O
"chat \"\"\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"call-transfer yes\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"commands cat\n"	pointer
)	O
;	O
if	O
(	O
!	O
fcall_uucico	int
&&	O
iPercent	int
==	O
0	int
)	O
{	O
fprintf	function
(	O
e	pointer
,	O
"protocol-parameter g window 7\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"protocol-parameter g packet-size 4096\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"protocol-parameter j avoid \\377\n"	pointer
)	O
;	O
}	O
if	O
(	O
zProtocols	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
"protocol %s\n"	pointer
,	O
zProtocols	pointer
)	O
;	O
xfclose	function
(	O
e	pointer
)	O
;	O
e	pointer
=	O
xfopen	function
(	O
"/usr/tmp/tstuu/Port1"	pointer
,	O
"w"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"port stdin\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"type stdin\n"	pointer
)	O
;	O
xfclose	function
(	O
e	pointer
)	O
;	O
e	pointer
=	O
xfopen	function
(	O
"/usr/tmp/tstuu/Call1"	pointer
,	O
"w"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"Call out password file\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"%s test1 pass\\s1\n"	pointer
,	O
zsys	pointer
)	O
;	O
xfclose	function
(	O
e	pointer
)	O
;	O
if	O
(	O
!	O
fcall_uucico	int
)	O
{	O
FILE	struct
*	O
eprog	pointer
;	O
e	pointer
=	O
xfopen	function
(	O
"/usr/tmp/tstuu/Config2"	pointer
,	O
"w"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"# Second test configuration file\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"nodename test2\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"spool /usr/tmp/tstuu/spool2\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"lockdir /usr/tmp/tstuu/spool2\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"sysfile /usr/tmp/tstuu/System2\n"	pointer
)	O
;	O
(	O
void	O
)	O
remove	function
(	O
"/usr/tmp/tstuu/Log2"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"logfile /usr/tmp/tstuu/Log2\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"statfile /usr/tmp/tstuu/Stats2\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"debugfile /usr/tmp/tstuu/Debug2\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"passwdfile /usr/tmp/tstuu/Pass2\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"pubdir /usr/tmp/tstuu\n"	pointer
)	O
;	O
if	O
(	O
zDebug	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
"debug %s\n"	pointer
,	O
zDebug	pointer
)	O
;	O
xfclose	function
(	O
e	pointer
)	O
;	O
e	pointer
=	O
xfopen	function
(	O
"/usr/tmp/tstuu/System2"	pointer
,	O
"w"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"# Second test system file\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"system test1\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"called-login test1\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"request true\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"commands cat\n"	pointer
)	O
;	O
if	O
(	O
zProtocols	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
"protocol %s\n"	pointer
,	O
zProtocols	pointer
)	O
;	O
eprog	pointer
=	O
xfopen	function
(	O
"/usr/tmp/tstuu/Chat2"	pointer
,	O
"w"	pointer
)	O
;	O
fprintf	function
(	O
eprog	pointer
,	O
"echo port $1 1>&2\n"	pointer
)	O
;	O
fprintf	function
(	O
eprog	pointer
,	O
"exit 0\n"	pointer
)	O
;	O
xfclose	function
(	O
eprog	pointer
)	O
;	O
if	O
(	O
chmod	function
(	O
"/usr/tmp/tstuu/Chat2"	pointer
,	O
S_IRWXU	O
|	O
S_IRGRP	O
|	O
S_IXGRP	O
|	O
S_IROTH	O
|	O
S_IXOTH	O
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
"chmod (/usr/tmp/tstuu/Chat2"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
fprintf	function
(	O
e	pointer
,	O
"called-chat-program /bin/sh /usr/tmp/tstuu/Chat2 \\Y\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"time any\n"	pointer
)	O
;	O
xfclose	function
(	O
e	pointer
)	O
;	O
e	pointer
=	O
xfopen	function
(	O
"/usr/tmp/tstuu/Pass2"	pointer
,	O
"w"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"# Call in password file\n"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"test1 pass\\s1\n"	pointer
)	O
;	O
xfclose	function
(	O
e	pointer
)	O
;	O
}	O
}	O
zuucp1	pointer
=	O
"./uucp -I /usr/tmp/tstuu/Config1 -r"	pointer
;	O
zuux1	pointer
=	O
"./uux -I /usr/tmp/tstuu/Config1 -r"	pointer
;	O
if	O
(	O
fcall_uucico	int
)	O
{	O
zuucp2	pointer
=	O
"/usr/bin/uucp -r"	pointer
;	O
zuux2	pointer
=	O
"/usr/bin/uux -r"	pointer
;	O
}	O
else	O
{	O
zuucp2	pointer
=	O
"./uucp -I /usr/tmp/tstuu/Config2 -r"	pointer
;	O
zuux2	pointer
=	O
"./uux -I /usr/tmp/tstuu/Config2 -r"	pointer
;	O
}	O
if	O
(	O
itest	int
==	O
0	int
||	O
itest	int
==	O
1	int
)	O
{	O
zfrom	pointer
=	O
"/usr/tmp/tstuu/from1"	pointer
;	O
if	O
(	O
fcall_uucico	int
)	O
zto	pointer
=	O
"/usr/spool/uucppublic/to1"	pointer
;	O
else	O
zto	pointer
=	O
"/usr/tmp/tstuu/to1"	pointer
;	O
(	O
void	O
)	O
remove	function
(	O
zto	pointer
)	O
;	O
umake_file	function
(	O
zfrom	pointer
,	O
0	int
)	O
;	O
sprintf	function
(	O
ab	array
,	O
"%s %s %s!%s"	pointer
,	O
zuucp1	pointer
,	O
zfrom	pointer
,	O
zsys	pointer
,	O
zto	pointer
)	O
;	O
xsystem	function
(	O
ab	array
)	O
;	O
}	O
if	O
(	O
itest	int
==	O
0	int
||	O
itest	int
==	O
2	int
)	O
{	O
if	O
(	O
fcall_uucico	int
)	O
zfrom	pointer
=	O
"/usr/spool/uucppublic/from2"	pointer
;	O
else	O
zfrom	pointer
=	O
"/usr/tmp/tstuu/from2"	pointer
;	O
zto	pointer
=	O
"/usr/tmp/tstuu/to2"	pointer
;	O
(	O
void	O
)	O
remove	function
(	O
zto	pointer
)	O
;	O
umake_file	function
(	O
zfrom	pointer
,	O
3	int
)	O
;	O
sprintf	function
(	O
ab	array
,	O
"%s %s!%s %s"	pointer
,	O
zuucp1	pointer
,	O
zsys	pointer
,	O
zfrom	pointer
,	O
zto	pointer
)	O
;	O
xsystem	function
(	O
ab	array
)	O
;	O
}	O
if	O
(	O
itest	int
==	O
0	int
||	O
itest	int
==	O
3	int
)	O
{	O
if	O
(	O
fcall_uucico	int
)	O
zfrom	pointer
=	O
"/usr/spool/uucppublic/from3"	pointer
;	O
else	O
zfrom	pointer
=	O
"/usr/tmp/tstuu/from3"	pointer
;	O
zto	pointer
=	O
"/usr/tmp/tstuu/to3"	pointer
;	O
(	O
void	O
)	O
remove	function
(	O
zto	pointer
)	O
;	O
umake_file	function
(	O
zfrom	pointer
,	O
5	int
)	O
;	O
sprintf	function
(	O
ab	array
,	O
"%s -c \\~/from3 test1!~/to3"	pointer
,	O
zuucp2	pointer
)	O
;	O
xsystem	function
(	O
ab	array
)	O
;	O
}	O
if	O
(	O
itest	int
==	O
0	int
||	O
itest	int
==	O
4	int
)	O
{	O
zfrom	pointer
=	O
"/usr/tmp/tstuu/from4"	pointer
;	O
if	O
(	O
fcall_uucico	int
)	O
zto	pointer
=	O
"/usr/spool/uucppublic/to4"	pointer
;	O
else	O
zto	pointer
=	O
"/usr/tmp/tstuu/to4"	pointer
;	O
(	O
void	O
)	O
remove	function
(	O
zto	pointer
)	O
;	O
umake_file	function
(	O
zfrom	pointer
,	O
7	int
)	O
;	O
sprintf	function
(	O
ab	array
,	O
"%s test1!%s %s"	pointer
,	O
zuucp2	pointer
,	O
zfrom	pointer
,	O
zto	pointer
)	O
;	O
xsystem	function
(	O
ab	array
)	O
;	O
}	O
if	O
(	O
itest	int
==	O
0	int
||	O
itest	int
==	O
5	int
)	O
{	O
zfrom	pointer
=	O
"/usr/tmp/tstuu/from5"	pointer
;	O
if	O
(	O
fcall_uucico	int
)	O
zto	pointer
=	O
"/usr/spool/uucppublic/to5"	pointer
;	O
else	O
zto	pointer
=	O
"/usr/tmp/tstuu/to5"	pointer
;	O
(	O
void	O
)	O
remove	function
(	O
zto	pointer
)	O
;	O
umake_file	function
(	O
zfrom	pointer
,	O
11	int
)	O
;	O
sprintf	function
(	O
ab	array
,	O
"%s test1!cat '<%s' '>%s'"	pointer
,	O
zuux2	pointer
,	O
zfrom	pointer
,	O
zto	pointer
)	O
;	O
xsystem	function
(	O
ab	array
)	O
;	O
}	O
if	O
(	O
itest	int
==	O
0	int
||	O
itest	int
==	O
6	int
)	O
{	O
const	O
char	O
*	O
zfrom1	pointer
,	O
*	O
zfrom2	pointer
;	O
if	O
(	O
fcall_uucico	int
)	O
{	O
zfrom	pointer
=	O
"/usr/spool/uucppublic/to6\\*"	pointer
;	O
zfrom1	pointer
=	O
"/usr/spool/uucppublic/to6.1"	pointer
;	O
zfrom2	pointer
=	O
"/usr/spool/uucppublic/to6.2"	pointer
;	O
}	O
else	O
{	O
zfrom	pointer
=	O
"/usr/tmp/tstuu/spool2/to6\\*"	pointer
;	O
zfrom1	pointer
=	O
"/usr/tmp/tstuu/spool2/to6.1"	pointer
;	O
zfrom2	pointer
=	O
"/usr/tmp/tstuu/spool2/to6.2"	pointer
;	O
}	O
umake_file	function
(	O
zfrom1	pointer
,	O
100	int
)	O
;	O
umake_file	function
(	O
zfrom2	pointer
,	O
101	int
)	O
;	O
(	O
void	O
)	O
remove	function
(	O
"/usr/tmp/tstuu/to6.1"	pointer
)	O
;	O
(	O
void	O
)	O
remove	function
(	O
"/usr/tmp/tstuu/to6.2"	pointer
)	O
;	O
sprintf	function
(	O
ab	array
,	O
"%s %s!%s /usr/tmp/tstuu"	pointer
,	O
zuucp1	pointer
,	O
zsys	pointer
,	O
zfrom	pointer
)	O
;	O
xsystem	function
(	O
ab	array
)	O
;	O
}	O
if	O
(	O
itest	int
==	O
0	int
||	O
itest	int
==	O
7	int
)	O
{	O
const	O
char	O
*	O
zto1	pointer
,	O
*	O
zto2	pointer
;	O
if	O
(	O
fcall_uucico	int
)	O
{	O
zto	pointer
=	O
"/usr/spool/uucppublic"	pointer
;	O
zto1	pointer
=	O
"/usr/spool/uucppublic/to7.1"	pointer
;	O
zto2	pointer
=	O
"/usr/spool/uucppublic/to7.2"	pointer
;	O
}	O
else	O
{	O
zto	pointer
=	O
"/usr/tmp/tstuu"	pointer
;	O
zto1	pointer
=	O
"/usr/tmp/tstuu/to7.1"	pointer
;	O
zto2	pointer
=	O
"/usr/tmp/tstuu/to7.2"	pointer
;	O
}	O
umake_file	function
(	O
"/usr/tmp/tstuu/spool1/to7.1"	pointer
,	O
150	int
)	O
;	O
umake_file	function
(	O
"/usr/tmp/tstuu/spool1/to7.2"	pointer
,	O
155	int
)	O
;	O
(	O
void	O
)	O
remove	function
(	O
zto1	pointer
)	O
;	O
(	O
void	O
)	O
remove	function
(	O
zto2	pointer
)	O
;	O
sprintf	function
(	O
ab	array
,	O
"%s test1!/usr/tmp/tstuu/spool1/to7.\\* %s"	pointer
,	O
zuucp2	pointer
,	O
zto	pointer
)	O
;	O
xsystem	function
(	O
ab	array
)	O
;	O
}	O
if	O
(	O
(	O
itest	int
==	O
0	int
||	O
itest	int
==	O
8	int
)	O
&&	O
!	O
fcall_uucico	int
)	O
{	O
umake_file	function
(	O
"/usr/tmp/tstuu/from8"	pointer
,	O
30	int
)	O
;	O
sprintf	function
(	O
ab	array
,	O
"%s - test2!cat < /usr/tmp/tstuu/from8"	pointer
,	O
zuux1	pointer
)	O
;	O
xsystem	function
(	O
ab	array
)	O
;	O
}	O
}	O
static	O
void	O
ucheck_test	function
(	O
itest	int
,	O
fcall_uucico	int
)	O
int	O
itest	int
;	O
boolean	int
fcall_uucico	int
;	O
{	O
if	O
(	O
itest	int
==	O
0	int
||	O
itest	int
==	O
1	int
)	O
{	O
if	O
(	O
fcall_uucico	int
)	O
ucheck_file	function
(	O
"/usr/spool/uucppublic/to1"	pointer
,	O
"test 1"	pointer
,	O
0	int
)	O
;	O
else	O
ucheck_file	function
(	O
"/usr/tmp/tstuu/to1"	pointer
,	O
"test 1"	pointer
,	O
0	int
)	O
;	O
}	O
if	O
(	O
itest	int
==	O
0	int
||	O
itest	int
==	O
2	int
)	O
ucheck_file	function
(	O
"/usr/tmp/tstuu/to2"	pointer
,	O
"test 2"	pointer
,	O
3	int
)	O
;	O
if	O
(	O
itest	int
==	O
0	int
||	O
itest	int
==	O
3	int
)	O
ucheck_file	function
(	O
"/usr/tmp/tstuu/to3"	pointer
,	O
"test 3"	pointer
,	O
5	int
)	O
;	O
if	O
(	O
itest	int
==	O
0	int
||	O
itest	int
==	O
4	int
)	O
{	O
if	O
(	O
fcall_uucico	int
)	O
ucheck_file	function
(	O
"/usr/spool/uucppublic/to4"	pointer
,	O
"test 4"	pointer
,	O
7	int
)	O
;	O
else	O
ucheck_file	function
(	O
"/usr/tmp/tstuu/to4"	pointer
,	O
"test 4"	pointer
,	O
7	int
)	O
;	O
}	O
if	O
(	O
itest	int
==	O
0	int
||	O
itest	int
==	O
6	int
)	O
{	O
ucheck_file	function
(	O
"/usr/tmp/tstuu/to6.1"	pointer
,	O
"test 6.1"	pointer
,	O
100	int
)	O
;	O
ucheck_file	function
(	O
"/usr/tmp/tstuu/to6.2"	pointer
,	O
"test 6.2"	pointer
,	O
101	int
)	O
;	O
}	O
if	O
(	O
itest	int
==	O
0	int
||	O
itest	int
==	O
7	int
)	O
{	O
const	O
char	O
*	O
zto1	pointer
,	O
*	O
zto2	pointer
;	O
if	O
(	O
fcall_uucico	int
)	O
{	O
zto1	pointer
=	O
"/usr/spool/uucppublic/to7.1"	pointer
;	O
zto2	pointer
=	O
"/usr/spool/uucppublic/to7.2"	pointer
;	O
}	O
else	O
{	O
zto1	pointer
=	O
"/usr/tmp/tstuu/to7.1"	pointer
;	O
zto2	pointer
=	O
"/usr/tmp/tstuu/to7.2"	pointer
;	O
}	O
ucheck_file	function
(	O
zto1	pointer
,	O
"test 7.1"	pointer
,	O
150	int
)	O
;	O
ucheck_file	function
(	O
zto2	pointer
,	O
"test 7.2"	pointer
,	O
155	int
)	O
;	O
}	O
}	O
static	O
int	O
cpshow	function
(	O
z	pointer
,	O
ichar	int
)	O
char	O
*	O
z	pointer
;	O
int	O
ichar	int
;	O
{	O
if	O
(	O
isprint	function
(	O
BUCHAR	O
(	O
ichar	int
)	O
)	O
&&	O
ichar	int
!=	O
'\"'	O
)	O
{	O
*	O
z	pointer
=	O
(	O
char	O
)	O
ichar	int
;	O
return	O
1	int
;	O
}	O
*	O
z	pointer
++	O
=	O
'\\'	O
;	O
switch	O
(	O
ichar	int
)	O
{	O
case	O
'\n'	O
:	O
*	O
z	pointer
=	O
'n'	O
;	O
return	O
2	int
;	O
case	O
'\r'	O
:	O
*	O
z	pointer
=	O
'r'	O
;	O
return	O
2	int
;	O
case	O
'\"'	O
:	O
*	O
z	pointer
=	O
'\"'	O
;	O
return	O
2	int
;	O
default	O
:	O
sprintf	function
(	O
z	pointer
,	O
"%03o"	pointer
,	O
(	O
unsigned	O
int	O
)	O
(	O
ichar	int
&	O
0xff	int
)	O
)	O
;	O
return	O
strlen	function
(	O
z	pointer
)	O
+	O
1	int
;	O
}	O
}	O
static	O
void	O
uchoose	function
(	O
po1	pointer
,	O
po2	pointer
)	O
int	O
*	O
po1	pointer
;	O
int	O
*	O
po2	pointer
;	O
{	O
int	O
iread	int
;	O
struct	O
timeval	struct
stime	struct
;	O
iread	int
=	O
(	O
1	int
<<	O
*	O
po1	pointer
)	O
|	O
(	O
1	int
<<	O
*	O
po2	pointer
)	O
;	O
stime	struct
.	O
tv_sec	long
=	O
5	int
;	O
stime	struct
.	O
tv_usec	long
=	O
0	int
;	O
if	O
(	O
select	function
(	O
(	O
*	O
po1	pointer
>	O
*	O
po2	pointer
?	O
*	O
po1	pointer
:	O
*	O
po2	pointer
)	O
+	O
1	int
,	O
(	O
pointer	pointer
)	O
&	O
iread	int
,	O
(	O
pointer	pointer
)	O
NULL	O
,	O
(	O
pointer	pointer
)	O
NULL	O
,	O
&	O
stime	struct
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
"select"	pointer
)	O
;	O
uchild	function
(	O
SIGCHLD	int
)	O
;	O
}	O
if	O
(	O
(	O
iread	int
&	O
(	O
1	int
<<	O
*	O
po1	pointer
)	O
)	O
==	O
0	int
)	O
*	O
po1	pointer
=	O
-	O
1	int
;	O
if	O
(	O
(	O
iread	int
&	O
(	O
1	int
<<	O
*	O
po2	pointer
)	O
)	O
==	O
0	int
)	O
*	O
po2	pointer
=	O
-	O
1	int
;	O
}	O
static	O
long	O
cread	function
(	O
o	int
,	O
pqbuf	pointer
)	O
int	O
o	int
;	O
struct	O
sbuf	struct
*	O
*	O
pqbuf	pointer
;	O
{	O
long	O
ctotal	long
;	O
while	O
(	O
*	O
pqbuf	pointer
!=	O
NULL	O
&&	O
(	O
*	O
pqbuf	pointer
)	O
->	O
qnext	pointer
!=	O
NULL	O
)	O
pqbuf	pointer
=	O
&	O
(	O
*	O
pqbuf	pointer
)	O
->	O
qnext	pointer
;	O
ctotal	long
=	O
0	int
;	O
while	O
(	O
TRUE	O
)	O
{	O
int	O
cgot	int
;	O
if	O
(	O
*	O
pqbuf	pointer
!=	O
NULL	O
&&	O
(	O
size_t	long
)	O
(	O
*	O
pqbuf	pointer
)	O
->	O
cend	int
>=	O
sizeof	O
(	O
*	O
pqbuf	pointer
)	O
->	O
ab	array
)	O
pqbuf	pointer
=	O
&	O
(	O
*	O
pqbuf	pointer
)	O
->	O
qnext	pointer
;	O
if	O
(	O
*	O
pqbuf	pointer
==	O
NULL	O
)	O
{	O
*	O
pqbuf	pointer
=	O
(	O
struct	O
sbuf	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
struct	O
sbuf	struct
)	O
)	O
;	O
if	O
(	O
*	O
pqbuf	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Out of memory\n"	pointer
)	O
;	O
uchild	function
(	O
SIGCHLD	int
)	O
;	O
}	O
(	O
*	O
pqbuf	pointer
)	O
->	O
qnext	pointer
=	O
NULL	O
;	O
(	O
*	O
pqbuf	pointer
)	O
->	O
cstart	int
=	O
0	int
;	O
(	O
*	O
pqbuf	pointer
)	O
->	O
cend	int
=	O
0	int
;	O
}	O
cgot	int
=	O
read	function
(	O
o	int
,	O
(	O
*	O
pqbuf	pointer
)	O
->	O
ab	array
+	O
(	O
*	O
pqbuf	pointer
)	O
->	O
cend	int
,	O
(	O
sizeof	O
(	O
*	O
pqbuf	pointer
)	O
->	O
ab	array
)	O
-	O
(	O
*	O
pqbuf	pointer
)	O
->	O
cend	int
)	O
;	O
if	O
(	O
cgot	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
EAGAIN	int
||	O
errno	O
==	O
EWOULDBLOCK	O
||	O
errno	O
==	O
ENODATA	int
)	O
cgot	int
=	O
0	int
;	O
else	O
{	O
perror	function
(	O
"read"	pointer
)	O
;	O
uchild	function
(	O
SIGCHLD	int
)	O
;	O
}	O
}	O
if	O
(	O
cgot	int
==	O
0	int
)	O
return	O
ctotal	long
;	O
ctotal	long
+=	O
cgot	int
;	O
if	O
(	O
zDebug	pointer
!=	O
NULL	O
)	O
{	O
char	O
abshow	array
[	O
325	int
]	O
;	O
char	O
*	O
zfrom	pointer
;	O
char	O
*	O
zshow	pointer
;	O
int	O
i	int
;	O
zfrom	pointer
=	O
(	O
*	O
pqbuf	pointer
)	O
->	O
ab	array
+	O
(	O
*	O
pqbuf	pointer
)	O
->	O
cend	int
;	O
zshow	pointer
=	O
abshow	array
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
cgot	int
&&	O
i	int
<	O
80	int
;	O
i	int
++	O
,	O
zfrom	pointer
++	O
)	O
zshow	pointer
+=	O
cpshow	function
(	O
zshow	pointer
,	O
*	O
zfrom	pointer
)	O
;	O
if	O
(	O
i	int
<	O
cgot	int
)	O
{	O
*	O
zshow	pointer
++	O
=	O
'.'	O
;	O
*	O
zshow	pointer
++	O
=	O
'.'	O
;	O
*	O
zshow	pointer
++	O
=	O
'.'	O
;	O
}	O
*	O
zshow	pointer
=	O
'\0'	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Read from %d: %d \"%s\"\n"	pointer
,	O
o	int
,	O
cgot	int
,	O
abshow	array
)	O
;	O
fflush	function
(	O
stderr	pointer
)	O
;	O
}	O
if	O
(	O
iPercent	int
>	O
0	int
)	O
{	O
int	O
i	int
;	O
int	O
c	int
;	O
c	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
cgot	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
rand	function
(	O
)	O
%	O
1000	int
<	O
iPercent	int
)	O
{	O
++	O
(	O
*	O
pqbuf	pointer
)	O
->	O
ab	array
[	O
(	O
*	O
pqbuf	pointer
)	O
->	O
cend	int
+	O
i	int
]	O
;	O
++	O
c	int
;	O
}	O
}	O
if	O
(	O
zDebug	pointer
!=	O
NULL	O
&&	O
c	int
>	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Clobbered %d bytes\n"	pointer
,	O
c	int
)	O
;	O
}	O
(	O
*	O
pqbuf	pointer
)	O
->	O
cend	int
+=	O
cgot	int
;	O
if	O
(	O
ctotal	long
>	O
256	int
)	O
return	O
ctotal	long
;	O
}	O
}	O
static	O
boolean	int
fsend	function
(	O
o	int
,	O
oslave	int
,	O
pqbuf	pointer
)	O
int	O
o	int
;	O
int	O
oslave	int
;	O
struct	O
sbuf	struct
*	O
*	O
pqbuf	pointer
;	O
{	O
long	O
ctotal	long
;	O
ctotal	long
=	O
0	int
;	O
while	O
(	O
*	O
pqbuf	pointer
!=	O
NULL	O
)	O
{	O
int	O
cwrite	int
,	O
cwrote	int
;	O
if	O
(	O
(	O
*	O
pqbuf	pointer
)	O
->	O
cstart	int
>=	O
(	O
*	O
pqbuf	pointer
)	O
->	O
cend	int
)	O
{	O
struct	O
sbuf	struct
*	O
qfree	pointer
;	O
qfree	pointer
=	O
*	O
pqbuf	pointer
;	O
*	O
pqbuf	pointer
=	O
(	O
*	O
pqbuf	pointer
)	O
->	O
qnext	pointer
;	O
free	function
(	O
(	O
pointer	pointer
)	O
qfree	pointer
)	O
;	O
continue	O
;	O
}	O
{	O
long	O
cunread	long
;	O
if	O
(	O
ioctl	function
(	O
oslave	int
,	O
FIONREAD	int
,	O
&	O
cunread	long
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
"FIONREAD"	pointer
)	O
;	O
uchild	function
(	O
SIGCHLD	int
)	O
;	O
}	O
if	O
(	O
zDebug	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%ld unread\n"	pointer
,	O
cunread	long
)	O
;	O
cwrite	int
=	O
256	int
-	O
cunread	long
;	O
if	O
(	O
cwrite	int
<=	O
0	int
)	O
break	O
;	O
}	O
if	O
(	O
cwrite	int
>	O
(	O
*	O
pqbuf	pointer
)	O
->	O
cend	int
-	O
(	O
*	O
pqbuf	pointer
)	O
->	O
cstart	int
)	O
cwrite	int
=	O
(	O
*	O
pqbuf	pointer
)	O
->	O
cend	int
-	O
(	O
*	O
pqbuf	pointer
)	O
->	O
cstart	int
;	O
cwrote	int
=	O
write	function
(	O
o	int
,	O
(	O
*	O
pqbuf	pointer
)	O
->	O
ab	array
+	O
(	O
*	O
pqbuf	pointer
)	O
->	O
cstart	int
,	O
cwrite	int
)	O
;	O
if	O
(	O
cwrote	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
EAGAIN	int
||	O
errno	O
==	O
EWOULDBLOCK	O
||	O
errno	O
==	O
ENODATA	int
)	O
cwrote	int
=	O
0	int
;	O
else	O
{	O
perror	function
(	O
"write"	pointer
)	O
;	O
uchild	function
(	O
SIGCHLD	int
)	O
;	O
}	O
}	O
if	O
(	O
cwrote	int
==	O
0	int
)	O
break	O
;	O
ctotal	long
+=	O
cwrote	int
;	O
(	O
*	O
pqbuf	pointer
)	O
->	O
cstart	int
+=	O
cwrote	int
;	O
}	O
if	O
(	O
zDebug	pointer
!=	O
NULL	O
&&	O
ctotal	long
>	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Wrote %ld to %d\n"	pointer
,	O
ctotal	long
,	O
o	int
)	O
;	O
return	O
ctotal	long
>	O
0	int
;	O
}	O
static	O
boolean	int
fwritable	function
(	O
o	int
)	O
int	O
o	int
;	O
{	O
int	O
iwrite	int
;	O
struct	O
timeval	struct
stime	struct
;	O
int	O
cfds	int
;	O
iwrite	int
=	O
1	int
<<	O
o	int
;	O
stime	struct
.	O
tv_sec	long
=	O
0	int
;	O
stime	struct
.	O
tv_usec	long
=	O
0	int
;	O
cfds	int
=	O
select	function
(	O
o	int
+	O
1	int
,	O
(	O
pointer	pointer
)	O
NULL	O
,	O
(	O
pointer	pointer
)	O
&	O
iwrite	int
,	O
(	O
pointer	pointer
)	O
NULL	O
,	O
&	O
stime	struct
)	O
;	O
if	O
(	O
cfds	int
<	O
0	int
)	O
{	O
perror	function
(	O
"select"	pointer
)	O
;	O
uchild	function
(	O
SIGCHLD	int
)	O
;	O
}	O
return	O
cfds	int
>	O
0	int
;	O
}	O
static	O
void	O
xsystem	function
(	O
zcmd	pointer
)	O
const	O
char	O
*	O
zcmd	pointer
;	O
{	O
int	O
istat	int
;	O
istat	int
=	O
system	function
(	O
(	O
char	O
*	O
)	O
zcmd	pointer
)	O
;	O
if	O
(	O
istat	int
!=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Command failed with status %d\n"	pointer
,	O
istat	int
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s\n"	pointer
,	O
zcmd	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
