extern	O
fragS	struct
zero_address_frag	struct
;	O
extern	O
fragS	struct
predefined_address_frag	struct
;	O
static	O
int	O
totalfrags	int
;	O
int	O
get_frag_count	function
(	O
void	O
)	O
{	O
return	O
totalfrags	int
;	O
}	O
void	O
clear_frag_count	function
(	O
void	O
)	O
{	O
totalfrags	int
=	O
0	int
;	O
}	O
void	O
frag_init	function
(	O
void	O
)	O
{	O
zero_address_frag	struct
.	O
fr_type	enum
=	O
rs_fill	int
;	O
predefined_address_frag	struct
.	O
fr_type	enum
=	O
rs_fill	int
;	O
}	O
static	O
void	O
frag_alloc_check	function
(	O
const	O
struct	O
obstack	struct
*	O
ob	pointer
)	O
{	O
if	O
(	O
ob	pointer
->	O
chunk_size	long
==	O
0	int
)	O
{	O
as_bad	function
(	O
_	O
(	O
"attempt to allocate data in absolute section"	pointer
)	O
)	O
;	O
subseg_set	function
(	O
text_section	pointer
,	O
0	int
)	O
;	O
}	O
if	O
(	O
mri_common_symbol	pointer
!=	O
NULL	O
)	O
{	O
as_bad	function
(	O
_	O
(	O
"attempt to allocate data in common section"	pointer
)	O
)	O
;	O
mri_common_symbol	pointer
=	O
NULL	O
;	O
}	O
}	O
fragS	struct
*	O
frag_alloc	function
(	O
struct	O
obstack	struct
*	O
ob	pointer
)	O
{	O
fragS	struct
*	O
ptr	pointer
;	O
int	O
oalign	int
;	O
(	O
void	O
)	O
obstack_alloc	O
(	O
ob	pointer
,	O
0	int
)	O
;	O
oalign	int
=	O
obstack_alignment_mask	O
(	O
ob	pointer
)	O
;	O
obstack_alignment_mask	O
(	O
ob	pointer
)	O
=	O
0	int
;	O
ptr	pointer
=	O
(	O
fragS	struct
*	O
)	O
obstack_alloc	O
(	O
ob	pointer
,	O
SIZEOF_STRUCT_FRAG	O
)	O
;	O
obstack_alignment_mask	O
(	O
ob	pointer
)	O
=	O
oalign	int
;	O
memset	function
(	O
ptr	pointer
,	O
0	int
,	O
SIZEOF_STRUCT_FRAG	O
)	O
;	O
totalfrags	int
++	O
;	O
return	O
ptr	pointer
;	O
}	O
void	O
frag_grow	function
(	O
size_t	long
nchars	long
)	O
{	O
if	O
(	O
obstack_room	O
(	O
&	O
frchain_now	pointer
->	O
frch_obstack	struct
)	O
<	O
nchars	long
)	O
{	O
size_t	long
oldc	long
;	O
size_t	long
newc	long
;	O
if	O
(	O
nchars	long
<	O
0x10000	int
)	O
newc	long
=	O
2	int
*	O
nchars	long
;	O
else	O
newc	long
=	O
nchars	long
+	O
0x10000	int
;	O
newc	long
+=	O
SIZEOF_STRUCT_FRAG	O
;	O
if	O
(	O
newc	long
<	O
nchars	long
)	O
as_fatal	function
(	O
ngettext	function
(	O
"can't extend frag %lu char"	pointer
,	O
"can't extend frag %lu chars"	pointer
,	O
(	O
unsigned	O
long	O
)	O
nchars	long
)	O
,	O
(	O
unsigned	O
long	O
)	O
nchars	long
)	O
;	O
oldc	long
=	O
obstack_chunk_size	O
(	O
&	O
frchain_now	pointer
->	O
frch_obstack	struct
)	O
;	O
if	O
(	O
newc	long
>	O
oldc	long
)	O
obstack_chunk_size	O
(	O
&	O
frchain_now	pointer
->	O
frch_obstack	struct
)	O
=	O
newc	long
;	O
while	O
(	O
obstack_room	O
(	O
&	O
frchain_now	pointer
->	O
frch_obstack	struct
)	O
<	O
nchars	long
)	O
{	O
frag_wane	function
(	O
frag_now	pointer
)	O
;	O
frag_new	function
(	O
0	int
)	O
;	O
}	O
obstack_chunk_size	O
(	O
&	O
frchain_now	pointer
->	O
frch_obstack	struct
)	O
=	O
oldc	long
;	O
}	O
}	O
void	O
frag_new	function
(	O
size_t	long
old_frags_var_max_size	long
)	O
{	O
fragS	struct
*	O
former_last_fragP	pointer
;	O
frchainS	struct
*	O
frchP	pointer
;	O
gas_assert	O
(	O
frchain_now	pointer
->	O
frch_last	pointer
==	O
frag_now	pointer
)	O
;	O
frag_now	pointer
->	O
fr_fix	long
=	O
frag_now_fix_octets	function
(	O
)	O
;	O
gas_assert	O
(	O
frag_now	pointer
->	O
fr_fix	long
>=	O
old_frags_var_max_size	long
)	O
;	O
frag_now	pointer
->	O
fr_fix	long
-=	O
old_frags_var_max_size	long
;	O
gas_assert	O
(	O
frag_now	pointer
->	O
fr_type	enum
!=	O
0	int
)	O
;	O
obstack_finish	O
(	O
&	O
frchain_now	pointer
->	O
frch_obstack	struct
)	O
;	O
frchP	pointer
=	O
frchain_now	pointer
;	O
know	O
(	O
frchP	pointer
)	O
;	O
former_last_fragP	pointer
=	O
frchP	pointer
->	O
frch_last	pointer
;	O
gas_assert	O
(	O
former_last_fragP	pointer
!=	O
0	int
)	O
;	O
gas_assert	O
(	O
former_last_fragP	pointer
==	O
frag_now	pointer
)	O
;	O
frag_now	pointer
=	O
frag_alloc	function
(	O
&	O
frchP	pointer
->	O
frch_obstack	struct
)	O
;	O
frag_now	pointer
->	O
fr_file	pointer
=	O
as_where	function
(	O
&	O
frag_now	pointer
->	O
fr_line	int
)	O
;	O
former_last_fragP	pointer
->	O
fr_next	pointer
=	O
frag_now	pointer
;	O
frchP	pointer
->	O
frch_last	pointer
=	O
frag_now	pointer
;	O
{	O
extern	O
struct	O
list_info_struct	O
*	O
listing_tail	pointer
;	O
frag_now	pointer
->	O
line	int
=	O
listing_tail	pointer
;	O
}	O
gas_assert	O
(	O
frchain_now	pointer
->	O
frch_last	pointer
==	O
frag_now	pointer
)	O
;	O
frag_now	pointer
->	O
fr_next	pointer
=	O
NULL	O
;	O
}	O
char	O
*	O
frag_more	function
(	O
size_t	long
nchars	long
)	O
{	O
char	O
*	O
retval	pointer
;	O
frag_alloc_check	function
(	O
&	O
frchain_now	pointer
->	O
frch_obstack	struct
)	O
;	O
frag_grow	function
(	O
nchars	long
)	O
;	O
retval	pointer
=	O
obstack_next_free	O
(	O
&	O
frchain_now	pointer
->	O
frch_obstack	struct
)	O
;	O
obstack_blank_fast	O
(	O
&	O
frchain_now	pointer
->	O
frch_obstack	struct
,	O
nchars	long
)	O
;	O
return	O
retval	pointer
;	O
}	O
static	O
void	O
frag_var_init	function
(	O
relax_stateT	enum
type	char
,	O
size_t	long
max_chars	long
,	O
size_t	long
var	long
,	O
relax_substateT	int
subtype	int
,	O
symbolS	struct
*	O
symbol	pointer
,	O
offsetT	long
offset	long
,	O
char	O
*	O
opcode	pointer
)	O
{	O
frag_now	pointer
->	O
fr_var	long
=	O
var	long
;	O
frag_now	pointer
->	O
fr_type	enum
=	O
type	char
;	O
frag_now	pointer
->	O
fr_subtype	int
=	O
subtype	int
;	O
frag_now	pointer
->	O
fr_symbol	pointer
=	O
symbol	pointer
;	O
frag_now	pointer
->	O
fr_offset	long
=	O
offset	long
;	O
frag_now	pointer
->	O
fr_opcode	pointer
=	O
opcode	pointer
;	O
TC_FRAG_INIT	O
(	O
frag_now	pointer
,	O
max_chars	long
)	O
;	O
frag_now	pointer
->	O
fr_file	pointer
=	O
as_where	function
(	O
&	O
frag_now	pointer
->	O
fr_line	int
)	O
;	O
frag_new	function
(	O
max_chars	long
)	O
;	O
}	O
char	O
*	O
frag_var	function
(	O
relax_stateT	enum
type	char
,	O
size_t	long
max_chars	long
,	O
size_t	long
var	long
,	O
relax_substateT	int
subtype	int
,	O
symbolS	struct
*	O
symbol	pointer
,	O
offsetT	long
offset	long
,	O
char	O
*	O
opcode	pointer
)	O
{	O
char	O
*	O
retval	pointer
;	O
frag_grow	function
(	O
max_chars	long
)	O
;	O
retval	pointer
=	O
obstack_next_free	O
(	O
&	O
frchain_now	pointer
->	O
frch_obstack	struct
)	O
;	O
obstack_blank_fast	O
(	O
&	O
frchain_now	pointer
->	O
frch_obstack	struct
,	O
max_chars	long
)	O
;	O
frag_var_init	function
(	O
type	char
,	O
max_chars	long
,	O
var	long
,	O
subtype	int
,	O
symbol	pointer
,	O
offset	long
,	O
opcode	pointer
)	O
;	O
return	O
retval	pointer
;	O
}	O
char	O
*	O
frag_variant	function
(	O
relax_stateT	enum
type	char
,	O
size_t	long
max_chars	long
,	O
size_t	long
var	long
,	O
relax_substateT	int
subtype	int
,	O
symbolS	struct
*	O
symbol	pointer
,	O
offsetT	long
offset	long
,	O
char	O
*	O
opcode	pointer
)	O
{	O
char	O
*	O
retval	pointer
;	O
retval	pointer
=	O
obstack_next_free	O
(	O
&	O
frchain_now	pointer
->	O
frch_obstack	struct
)	O
;	O
frag_var_init	function
(	O
type	char
,	O
max_chars	long
,	O
var	long
,	O
subtype	int
,	O
symbol	pointer
,	O
offset	long
,	O
opcode	pointer
)	O
;	O
return	O
retval	pointer
;	O
}	O
void	O
frag_wane	function
(	O
fragS	struct
*	O
fragP	pointer
)	O
{	O
fragP	pointer
->	O
fr_type	enum
=	O
rs_fill	int
;	O
fragP	pointer
->	O
fr_offset	long
=	O
0	int
;	O
fragP	pointer
->	O
fr_var	long
=	O
0	int
;	O
}	O
size_t	long
frag_room	function
(	O
void	O
)	O
{	O
return	O
obstack_room	O
(	O
&	O
frchain_now	pointer
->	O
frch_obstack	struct
)	O
;	O
}	O
void	O
frag_align	function
(	O
int	O
alignment	int
,	O
int	O
fill_character	int
,	O
int	O
max	int
)	O
{	O
if	O
(	O
now_seg	pointer
==	O
absolute_section	O
)	O
{	O
addressT	long
new_off	long
;	O
addressT	long
mask	int
;	O
mask	int
=	O
(	O
~	O
(	O
addressT	long
)	O
0	int
)	O
<<	O
alignment	int
;	O
new_off	long
=	O
(	O
abs_section_offset	long
+	O
~	O
mask	int
)	O
&	O
mask	int
;	O
if	O
(	O
max	int
==	O
0	int
||	O
new_off	long
-	O
abs_section_offset	long
<=	O
(	O
addressT	long
)	O
max	int
)	O
abs_section_offset	long
=	O
new_off	long
;	O
}	O
else	O
{	O
char	O
*	O
p	pointer
;	O
p	pointer
=	O
frag_var	function
(	O
rs_align	int
,	O
1	int
,	O
1	int
,	O
(	O
relax_substateT	int
)	O
max	int
,	O
(	O
symbolS	struct
*	O
)	O
0	int
,	O
(	O
offsetT	long
)	O
alignment	int
,	O
(	O
char	O
*	O
)	O
0	int
)	O
;	O
*	O
p	pointer
=	O
fill_character	int
;	O
}	O
}	O
void	O
frag_align_pattern	function
(	O
int	O
alignment	int
,	O
const	O
char	O
*	O
fill_pattern	pointer
,	O
size_t	long
n_fill	long
,	O
int	O
max	int
)	O
{	O
char	O
*	O
p	pointer
;	O
p	pointer
=	O
frag_var	function
(	O
rs_align	int
,	O
n_fill	long
,	O
n_fill	long
,	O
(	O
relax_substateT	int
)	O
max	int
,	O
(	O
symbolS	struct
*	O
)	O
0	int
,	O
(	O
offsetT	long
)	O
alignment	int
,	O
(	O
char	O
*	O
)	O
0	int
)	O
;	O
memcpy	function
(	O
p	pointer
,	O
fill_pattern	pointer
,	O
n_fill	long
)	O
;	O
}	O
void	O
frag_align_code	function
(	O
int	O
alignment	int
,	O
int	O
max	int
)	O
{	O
char	O
*	O
p	pointer
;	O
p	pointer
=	O
frag_var	function
(	O
rs_align_code	int
,	O
MAX_MEM_FOR_RS_ALIGN_CODE	O
,	O
1	int
,	O
(	O
relax_substateT	int
)	O
max	int
,	O
(	O
symbolS	struct
*	O
)	O
0	int
,	O
(	O
offsetT	long
)	O
alignment	int
,	O
(	O
char	O
*	O
)	O
0	int
)	O
;	O
*	O
p	pointer
=	O
NOP_OPCODE	O
;	O
}	O
addressT	long
frag_now_fix_octets	function
(	O
void	O
)	O
{	O
if	O
(	O
now_seg	pointer
==	O
absolute_section	O
)	O
return	O
abs_section_offset	long
;	O
return	O
(	O
(	O
char	O
*	O
)	O
obstack_next_free	O
(	O
&	O
frchain_now	pointer
->	O
frch_obstack	struct
)	O
-	O
frag_now	pointer
->	O
fr_literal	array
)	O
;	O
}	O
addressT	long
frag_now_fix	function
(	O
void	O
)	O
{	O
if	O
(	O
now_seg	pointer
->	O
flags	int
&	O
SEC_OCTETS	O
)	O
return	O
frag_now_fix_octets	function
(	O
)	O
;	O
else	O
return	O
frag_now_fix_octets	function
(	O
)	O
/	O
OCTETS_PER_BYTE	O
;	O
}	O
void	O
frag_append_1_char	function
(	O
int	O
datum	int
)	O
{	O
frag_alloc_check	function
(	O
&	O
frchain_now	pointer
->	O
frch_obstack	struct
)	O
;	O
if	O
(	O
obstack_room	O
(	O
&	O
frchain_now	pointer
->	O
frch_obstack	struct
)	O
<=	O
1	int
)	O
{	O
frag_wane	function
(	O
frag_now	pointer
)	O
;	O
frag_new	function
(	O
0	int
)	O
;	O
}	O
obstack_1grow	O
(	O
&	O
frchain_now	pointer
->	O
frch_obstack	struct
,	O
datum	int
)	O
;	O
}	O
bfd_boolean	int
frag_offset_fixed_p	function
(	O
const	O
fragS	struct
*	O
frag1	pointer
,	O
const	O
fragS	struct
*	O
frag2	pointer
,	O
offsetT	long
*	O
offset	long
)	O
{	O
const	O
fragS	struct
*	O
frag	struct
;	O
offsetT	long
off	long
;	O
off	long
=	O
frag1	pointer
->	O
fr_address	long
-	O
frag2	pointer
->	O
fr_address	long
;	O
if	O
(	O
frag1	pointer
==	O
frag2	pointer
)	O
{	O
*	O
offset	long
=	O
off	long
;	O
return	O
TRUE	int
;	O
}	O
frag	struct
=	O
frag1	pointer
;	O
while	O
(	O
frag	struct
->	O
fr_type	enum
==	O
rs_fill	int
)	O
{	O
off	long
+=	O
frag	struct
->	O
fr_fix	long
+	O
frag	struct
->	O
fr_offset	long
*	O
frag	struct
->	O
fr_var	long
;	O
frag	struct
=	O
frag	struct
->	O
fr_next	pointer
;	O
if	O
(	O
frag	struct
==	O
NULL	O
)	O
break	O
;	O
if	O
(	O
frag	struct
==	O
frag2	pointer
)	O
{	O
*	O
offset	long
=	O
off	long
;	O
return	O
TRUE	int
;	O
}	O
}	O
off	long
=	O
frag1	pointer
->	O
fr_address	long
-	O
frag2	pointer
->	O
fr_address	long
;	O
frag	struct
=	O
frag2	pointer
;	O
while	O
(	O
frag	struct
->	O
fr_type	enum
==	O
rs_fill	int
)	O
{	O
off	long
-=	O
frag	struct
->	O
fr_fix	long
+	O
frag	struct
->	O
fr_offset	long
*	O
frag	struct
->	O
fr_var	long
;	O
frag	struct
=	O
frag	struct
->	O
fr_next	pointer
;	O
if	O
(	O
frag	struct
==	O
NULL	O
)	O
break	O
;	O
if	O
(	O
frag	struct
==	O
frag1	pointer
)	O
{	O
*	O
offset	long
=	O
off	long
;	O
return	O
TRUE	int
;	O
}	O
}	O
return	O
FALSE	int
;	O
}	O
bfd_boolean	int
frag_gtoffset_p	function
(	O
valueT	long
off2	long
,	O
const	O
fragS	struct
*	O
frag2	pointer
,	O
valueT	long
off1	long
,	O
const	O
fragS	struct
*	O
frag1	pointer
,	O
offsetT	long
*	O
offset	long
)	O
{	O
if	O
(	O
frag2	pointer
==	O
frag1	pointer
||	O
off1	long
>	O
frag1	pointer
->	O
fr_fix	long
)	O
return	O
FALSE	int
;	O
const	O
fragS	struct
*	O
frag	struct
=	O
frag1	pointer
;	O
offsetT	long
delta	long
=	O
off2	long
-	O
off1	long
;	O
for	O
(	O
;	O
;	O
)	O
{	O
delta	long
+=	O
frag	struct
->	O
fr_fix	long
;	O
frag	struct
=	O
frag	struct
->	O
fr_next	pointer
;	O
if	O
(	O
frag	struct
==	O
frag2	pointer
)	O
{	O
if	O
(	O
delta	long
==	O
0	int
)	O
return	O
FALSE	int
;	O
break	O
;	O
}	O
if	O
(	O
frag	struct
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
}	O
*	O
offset	long
=	O
(	O
off2	long
-	O
off1	long
-	O
delta	long
)	O
*	O
OCTETS_PER_BYTE	O
;	O
return	O
TRUE	int
;	O
}	O
