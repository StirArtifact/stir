enum	O
{	O
ACCEPTED	int
=	O
0x1	int
,	O
CLIPPED_FIRST	int
=	O
0x2	int
,	O
CLIPPED_SECOND	int
=	O
0x4	int
}	O
;	O
enum	O
{	O
TOP	int
=	O
0x1	int
,	O
BOTTOM	int
=	O
0x2	int
,	O
RIGHT	int
=	O
0x4	int
,	O
LEFT	int
=	O
0x8	int
}	O
;	O
static	O
int	O
compute_outcode	function
(	O
double	O
x	double
,	O
double	O
y	double
,	O
double	O
x_min_clip	double
,	O
double	O
x_max_clip	double
,	O
double	O
y_min_clip	double
,	O
double	O
y_max_clip	double
)	O
;	O
int	O
_clip_line	function
(	O
double	O
*	O
x0_p	pointer
,	O
double	O
*	O
y0_p	pointer
,	O
double	O
*	O
x1_p	pointer
,	O
double	O
*	O
y1_p	pointer
,	O
double	O
x_min_clip	double
,	O
double	O
x_max_clip	double
,	O
double	O
y_min_clip	double
,	O
double	O
y_max_clip	double
)	O
{	O
double	O
x0	double
=	O
*	O
x0_p	pointer
;	O
double	O
y0	function
=	O
*	O
y0_p	pointer
;	O
double	O
x1	double
=	O
*	O
x1_p	pointer
;	O
double	O
y1	function
=	O
*	O
y1_p	pointer
;	O
int	O
outcode0	int
,	O
outcode1	int
;	O
bool	enum
accepted	enum
;	O
int	O
clipval	int
=	O
0	int
;	O
outcode0	int
=	O
compute_outcode	function
(	O
x0	double
,	O
y0	function
,	O
x_min_clip	double
,	O
x_max_clip	double
,	O
y_min_clip	double
,	O
y_max_clip	double
)	O
;	O
outcode1	int
=	O
compute_outcode	function
(	O
x1	double
,	O
y1	function
,	O
x_min_clip	double
,	O
x_max_clip	double
,	O
y_min_clip	double
,	O
y_max_clip	double
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
!	O
(	O
outcode0	int
|	O
outcode1	int
)	O
)	O
{	O
accepted	enum
=	O
true	int
;	O
break	O
;	O
}	O
else	O
if	O
(	O
outcode0	int
&	O
outcode1	int
)	O
{	O
accepted	enum
=	O
false	int
;	O
break	O
;	O
}	O
else	O
{	O
int	O
outcode_out	int
=	O
(	O
outcode0	int
?	O
outcode0	int
:	O
outcode1	int
)	O
;	O
double	O
x	double
,	O
y	double
;	O
if	O
(	O
outcode_out	int
&	O
RIGHT	int
)	O
{	O
x	double
=	O
x_max_clip	double
;	O
y	double
=	O
y0	function
+	O
(	O
y1	function
-	O
y0	function
)	O
*	O
(	O
x_max_clip	double
-	O
x0	double
)	O
/	O
(	O
x1	double
-	O
x0	double
)	O
;	O
}	O
else	O
if	O
(	O
outcode_out	int
&	O
LEFT	int
)	O
{	O
x	double
=	O
x_min_clip	double
;	O
y	double
=	O
y0	function
+	O
(	O
y1	function
-	O
y0	function
)	O
*	O
(	O
x_min_clip	double
-	O
x0	double
)	O
/	O
(	O
x1	double
-	O
x0	double
)	O
;	O
}	O
else	O
if	O
(	O
outcode_out	int
&	O
TOP	int
)	O
{	O
x	double
=	O
x0	double
+	O
(	O
x1	double
-	O
x0	double
)	O
*	O
(	O
y_max_clip	double
-	O
y0	function
)	O
/	O
(	O
y1	function
-	O
y0	function
)	O
;	O
y	double
=	O
y_max_clip	double
;	O
}	O
else	O
{	O
x	double
=	O
x0	double
+	O
(	O
x1	double
-	O
x0	double
)	O
*	O
(	O
y_min_clip	double
-	O
y0	function
)	O
/	O
(	O
y1	function
-	O
y0	function
)	O
;	O
y	double
=	O
y_min_clip	double
;	O
}	O
if	O
(	O
outcode_out	int
==	O
outcode0	int
)	O
{	O
x0	double
=	O
x	double
;	O
y0	function
=	O
y	double
;	O
outcode0	int
=	O
compute_outcode	function
(	O
x0	double
,	O
y0	function
,	O
x_min_clip	double
,	O
x_max_clip	double
,	O
y_min_clip	double
,	O
y_max_clip	double
)	O
;	O
}	O
else	O
{	O
x1	double
=	O
x	double
;	O
y1	function
=	O
y	double
;	O
outcode1	int
=	O
compute_outcode	function
(	O
x1	double
,	O
y1	function
,	O
x_min_clip	double
,	O
x_max_clip	double
,	O
y_min_clip	double
,	O
y_max_clip	double
)	O
;	O
}	O
}	O
}	O
if	O
(	O
accepted	enum
)	O
{	O
clipval	int
|=	O
ACCEPTED	int
;	O
if	O
(	O
(	O
x0	double
!=	O
*	O
x0_p	pointer
)	O
||	O
(	O
y0	function
!=	O
*	O
y0_p	pointer
)	O
)	O
clipval	int
|=	O
CLIPPED_FIRST	int
;	O
if	O
(	O
(	O
x1	double
!=	O
*	O
x1_p	pointer
)	O
||	O
(	O
y1	function
!=	O
*	O
y1_p	pointer
)	O
)	O
clipval	int
|=	O
CLIPPED_SECOND	int
;	O
*	O
x0_p	pointer
=	O
x0	double
;	O
*	O
y0_p	pointer
=	O
y0	function
;	O
*	O
x1_p	pointer
=	O
x1	double
;	O
*	O
y1_p	pointer
=	O
y1	function
;	O
}	O
return	O
clipval	int
;	O
}	O
static	O
int	O
compute_outcode	function
(	O
double	O
x	double
,	O
double	O
y	double
,	O
double	O
x_min_clip	double
,	O
double	O
x_max_clip	double
,	O
double	O
y_min_clip	double
,	O
double	O
y_max_clip	double
)	O
{	O
int	O
code	int
=	O
0	int
;	O
if	O
(	O
x	double
>	O
x_max_clip	double
)	O
code	int
|=	O
RIGHT	int
;	O
else	O
if	O
(	O
x	double
<	O
x_min_clip	double
)	O
code	int
|=	O
LEFT	int
;	O
if	O
(	O
y	double
>	O
y_max_clip	double
)	O
code	int
|=	O
TOP	int
;	O
else	O
if	O
(	O
y	double
<	O
y_min_clip	double
)	O
code	int
|=	O
BOTTOM	int
;	O
return	O
code	int
;	O
}	O
