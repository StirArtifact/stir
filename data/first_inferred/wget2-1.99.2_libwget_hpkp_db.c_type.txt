struct	O
wget_hpkp_db_st	struct
{	O
char	O
*	O
fname	pointer
;	O
wget_hashmap	struct
*	O
entries	pointer
;	O
wget_thread_mutex	pointer
mutex	pointer
;	O
int64_t	long
load_time	long
;	O
}	O
;	O
static	O
const	O
wget_hpkp_db_vtable	struct
*	O
plugin_vtable	pointer
;	O
void	O
wget_hpkp_set_plugin	function
(	O
const	O
wget_hpkp_db_vtable	struct
*	O
vtable	pointer
)	O
{	O
plugin_vtable	pointer
=	O
vtable	pointer
;	O
}	O
__attribute__	O
(	O
(	O
no_sanitize	O
(	O
"integer"	pointer
)	O
)	O
)	O
WGET_GCC_PURE	O
static	O
unsigned	O
int	O
hash_hpkp	function
(	O
const	O
wget_hpkp	struct
*	O
hpkp	pointer
)	O
{	O
unsigned	O
int	O
hash	pointer
=	O
0	int
;	O
const	O
unsigned	O
char	O
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
hpkp	pointer
->	O
host	pointer
;	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
hash	pointer
=	O
hash	pointer
*	O
101	int
+	O
*	O
p	pointer
;	O
return	O
hash	pointer
;	O
}	O
WGET_GCC_NONNULL_ALL	O
WGET_GCC_PURE	O
static	O
int	O
compare_hpkp	function
(	O
const	O
wget_hpkp	struct
*	O
h1	pointer
,	O
const	O
wget_hpkp	struct
*	O
h2	pointer
)	O
{	O
return	O
strcmp	function
(	O
h1	pointer
->	O
host	pointer
,	O
h2	pointer
->	O
host	pointer
)	O
;	O
}	O
void	O
wget_hpkp_db_deinit	function
(	O
wget_hpkp_db	struct
*	O
hpkp_db	pointer
)	O
{	O
if	O
(	O
plugin_vtable	pointer
)	O
{	O
plugin_vtable	pointer
->	O
deinit	pointer
(	O
hpkp_db	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
hpkp_db	pointer
)	O
{	O
xfree	O
(	O
hpkp_db	pointer
->	O
fname	pointer
)	O
;	O
wget_thread_mutex_lock	function
(	O
hpkp_db	pointer
->	O
mutex	pointer
)	O
;	O
wget_hashmap_free	function
(	O
&	O
hpkp_db	pointer
->	O
entries	pointer
)	O
;	O
wget_thread_mutex_unlock	function
(	O
hpkp_db	pointer
->	O
mutex	pointer
)	O
;	O
wget_thread_mutex_destroy	function
(	O
&	O
hpkp_db	pointer
->	O
mutex	pointer
)	O
;	O
}	O
}	O
void	O
wget_hpkp_db_free	function
(	O
wget_hpkp_db	struct
*	O
*	O
hpkp_db	pointer
)	O
{	O
if	O
(	O
plugin_vtable	pointer
)	O
{	O
plugin_vtable	pointer
->	O
free	function
(	O
hpkp_db	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
hpkp_db	pointer
&&	O
*	O
hpkp_db	pointer
)	O
{	O
wget_hpkp_db_deinit	function
(	O
*	O
hpkp_db	pointer
)	O
;	O
xfree	O
(	O
*	O
hpkp_db	pointer
)	O
;	O
}	O
}	O
int	O
wget_hpkp_db_check_pubkey	function
(	O
wget_hpkp_db	struct
*	O
hpkp_db	pointer
,	O
const	O
char	O
*	O
host	pointer
,	O
const	O
void	O
*	O
pubkey	pointer
,	O
size_t	long
pubkeysize	long
)	O
{	O
if	O
(	O
plugin_vtable	pointer
)	O
return	O
plugin_vtable	pointer
->	O
check_pubkey	pointer
(	O
hpkp_db	pointer
,	O
host	pointer
,	O
pubkey	pointer
,	O
pubkeysize	long
)	O
;	O
wget_hpkp	struct
key	int
;	O
wget_hpkp	struct
*	O
hpkp	pointer
=	O
NULL	O
;	O
char	O
digest	pointer
[	O
wget_hash_get_len	function
(	O
WGET_DIGTYPE_SHA256	int
)	O
]	O
;	O
int	O
subdomain	int
=	O
0	int
;	O
for	O
(	O
const	O
char	O
*	O
domain	pointer
=	O
host	pointer
;	O
*	O
domain	pointer
&&	O
!	O
hpkp	pointer
;	O
domain	pointer
=	O
strchrnul	function
(	O
domain	pointer
,	O
'.'	O
)	O
)	O
{	O
while	O
(	O
*	O
domain	pointer
==	O
'.'	O
)	O
domain	pointer
++	O
;	O
key	int
.	O
host	pointer
=	O
domain	pointer
;	O
if	O
(	O
!	O
wget_hashmap_get	function
(	O
hpkp_db	pointer
->	O
entries	pointer
,	O
&	O
key	int
,	O
&	O
hpkp	pointer
)	O
)	O
subdomain	int
=	O
1	int
;	O
}	O
if	O
(	O
!	O
hpkp	pointer
)	O
return	O
0	int
;	O
if	O
(	O
subdomain	int
&&	O
!	O
hpkp	pointer
->	O
include_subdomains	int
)	O
return	O
0	int
;	O
if	O
(	O
wget_hash_fast	function
(	O
WGET_DIGTYPE_SHA256	int
,	O
pubkey	pointer
,	O
pubkeysize	long
,	O
digest	pointer
)	O
)	O
return	O
-	O
1	int
;	O
wget_hpkp_pin	struct
pinkey	struct
=	O
{	O
.	O
pin	pointer
=	O
digest	pointer
,	O
.	O
pinsize	long
=	O
sizeof	O
(	O
digest	pointer
)	O
,	O
.	O
hash_type	pointer
=	O
"sha256"	pointer
}	O
;	O
if	O
(	O
wget_vector_find	function
(	O
hpkp	pointer
->	O
pins	pointer
,	O
&	O
pinkey	struct
)	O
!=	O
-	O
1	int
)	O
return	O
1	int
;	O
return	O
-	O
2	int
;	O
}	O
void	O
wget_hpkp_db_add	function
(	O
wget_hpkp_db	struct
*	O
hpkp_db	pointer
,	O
wget_hpkp	struct
*	O
*	O
_hpkp	pointer
)	O
{	O
if	O
(	O
plugin_vtable	pointer
)	O
{	O
plugin_vtable	pointer
->	O
add	pointer
(	O
hpkp_db	pointer
,	O
_hpkp	pointer
)	O
;	O
*	O
_hpkp	pointer
=	O
NULL	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
_hpkp	pointer
||	O
!	O
*	O
_hpkp	pointer
)	O
return	O
;	O
wget_hpkp	struct
*	O
hpkp	pointer
=	O
*	O
_hpkp	pointer
;	O
wget_thread_mutex_lock	function
(	O
hpkp_db	pointer
->	O
mutex	pointer
)	O
;	O
if	O
(	O
hpkp	pointer
->	O
maxage	long
==	O
0	int
||	O
wget_vector_size	function
(	O
hpkp	pointer
->	O
pins	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
wget_hashmap_remove	function
(	O
hpkp_db	pointer
->	O
entries	pointer
,	O
hpkp	pointer
)	O
)	O
debug_printf	O
(	O
"removed HPKP %s\n"	pointer
,	O
hpkp	pointer
->	O
host	pointer
)	O
;	O
wget_hpkp_free	function
(	O
hpkp	pointer
)	O
;	O
}	O
else	O
{	O
wget_hpkp	struct
*	O
old	pointer
;	O
if	O
(	O
wget_hashmap_get	function
(	O
hpkp_db	pointer
->	O
entries	pointer
,	O
hpkp	pointer
,	O
&	O
old	pointer
)	O
)	O
{	O
old	pointer
->	O
created	long
=	O
hpkp	pointer
->	O
created	long
;	O
old	pointer
->	O
maxage	long
=	O
hpkp	pointer
->	O
maxage	long
;	O
old	pointer
->	O
expires	long
=	O
hpkp	pointer
->	O
expires	long
;	O
old	pointer
->	O
include_subdomains	int
=	O
hpkp	pointer
->	O
include_subdomains	int
;	O
wget_vector_free	function
(	O
&	O
old	pointer
->	O
pins	pointer
)	O
;	O
old	pointer
->	O
pins	pointer
=	O
hpkp	pointer
->	O
pins	pointer
;	O
hpkp	pointer
->	O
pins	pointer
=	O
NULL	O
;	O
debug_printf	O
(	O
"update HPKP %s (maxage=%lld, includeSubDomains=%d)\n"	pointer
,	O
old	pointer
->	O
host	pointer
,	O
(	O
long	O
long	O
)	O
old	pointer
->	O
maxage	long
,	O
old	pointer
->	O
include_subdomains	int
)	O
;	O
wget_hpkp_free	function
(	O
hpkp	pointer
)	O
;	O
}	O
else	O
{	O
wget_hashmap_put	function
(	O
hpkp_db	pointer
->	O
entries	pointer
,	O
hpkp	pointer
,	O
hpkp	pointer
)	O
;	O
}	O
}	O
wget_thread_mutex_unlock	function
(	O
hpkp_db	pointer
->	O
mutex	pointer
)	O
;	O
*	O
_hpkp	pointer
=	O
NULL	O
;	O
}	O
static	O
int	O
hpkp_db_load	function
(	O
wget_hpkp_db	struct
*	O
hpkp_db	pointer
,	O
FILE	struct
*	O
fp	pointer
)	O
{	O
int64_t	long
created	long
,	O
max_age	long
;	O
long	O
long	O
_created	long long
,	O
_max_age	long long
;	O
int	O
include_subdomains	int
;	O
wget_hpkp	struct
*	O
hpkp	pointer
=	O
NULL	O
;	O
struct	O
stat	struct
st	struct
;	O
char	O
*	O
buf	pointer
=	O
NULL	O
;	O
size_t	long
bufsize	long
=	O
0	int
;	O
ssize_t	long
buflen	long
;	O
char	O
hash_type	pointer
[	O
32	int
]	O
,	O
host	pointer
[	O
256	int
]	O
,	O
pin_b64	pointer
[	O
256	int
]	O
;	O
int64_t	long
now	long
=	O
time	struct
(	O
NULL	O
)	O
;	O
if	O
(	O
fstat	function
(	O
fileno	function
(	O
fp	pointer
)	O
,	O
&	O
st	struct
)	O
==	O
0	int
)	O
{	O
if	O
(	O
st	struct
.	O
st_mtime	O
!=	O
hpkp_db	pointer
->	O
load_time	long
)	O
hpkp_db	pointer
->	O
load_time	long
=	O
st	struct
.	O
st_mtime	O
;	O
else	O
return	O
0	int
;	O
}	O
while	O
(	O
(	O
buflen	long
=	O
wget_getline	function
(	O
&	O
buf	pointer
,	O
&	O
bufsize	long
,	O
fp	pointer
)	O
)	O
>=	O
0	int
)	O
{	O
char	O
*	O
linep	pointer
=	O
buf	pointer
;	O
while	O
(	O
isspace	function
(	O
*	O
linep	pointer
)	O
)	O
linep	pointer
++	O
;	O
if	O
(	O
!	O
*	O
linep	pointer
)	O
continue	O
;	O
if	O
(	O
*	O
linep	pointer
==	O
'#'	O
)	O
continue	O
;	O
while	O
(	O
buflen	long
>	O
0	int
&&	O
(	O
buf	pointer
[	O
buflen	long
]	O
==	O
'\n'	O
||	O
buf	pointer
[	O
buflen	long
]	O
==	O
'\r'	O
)	O
)	O
buf	pointer
[	O
--	O
buflen	long
]	O
=	O
0	int
;	O
if	O
(	O
*	O
linep	pointer
!=	O
'*'	O
)	O
{	O
wget_hpkp_db_add	function
(	O
hpkp_db	pointer
,	O
&	O
hpkp	pointer
)	O
;	O
if	O
(	O
sscanf	function
(	O
linep	pointer
,	O
"%255s %d %lld %lld"	pointer
,	O
host	pointer
,	O
&	O
include_subdomains	int
,	O
&	O
_created	long long
,	O
&	O
_max_age	long long
)	O
==	O
4	int
)	O
{	O
created	long
=	O
_created	long long
;	O
max_age	long
=	O
_max_age	long long
;	O
if	O
(	O
created	long
<	O
0	int
||	O
max_age	long
<	O
0	int
||	O
created	long
>=	O
INT64_MAX	O
/	O
2	int
||	O
max_age	long
>=	O
INT64_MAX	O
/	O
2	int
)	O
{	O
max_age	long
=	O
0	int
;	O
}	O
int64_t	long
expires	long
=	O
created	long
+	O
max_age	long
;	O
if	O
(	O
max_age	long
&&	O
expires	long
>=	O
now	long
)	O
{	O
hpkp	pointer
=	O
wget_hpkp_new	function
(	O
)	O
;	O
if	O
(	O
hpkp	pointer
)	O
{	O
if	O
(	O
!	O
(	O
hpkp	pointer
->	O
host	pointer
=	O
wget_strdup	function
(	O
host	pointer
)	O
)	O
)	O
xfree	O
(	O
hpkp	pointer
)	O
;	O
else	O
{	O
hpkp	pointer
->	O
maxage	long
=	O
max_age	long
;	O
hpkp	pointer
->	O
created	long
=	O
created	long
;	O
hpkp	pointer
->	O
expires	long
=	O
expires	long
;	O
hpkp	pointer
->	O
include_subdomains	int
=	O
include_subdomains	int
!=	O
0	int
;	O
}	O
}	O
}	O
else	O
debug_printf	O
(	O
"HPKP: entry '%s' is expired\n"	pointer
,	O
host	pointer
)	O
;	O
}	O
else	O
{	O
error_printf	O
(	O
_	O
(	O
"HPKP: could not parse host line '%s'\n"	pointer
)	O
,	O
buf	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
hpkp	pointer
)	O
{	O
if	O
(	O
sscanf	function
(	O
linep	pointer
,	O
"*%31s %255s"	pointer
,	O
hash_type	pointer
,	O
pin_b64	pointer
)	O
==	O
2	int
)	O
{	O
wget_hpkp_pin_add	function
(	O
hpkp	pointer
,	O
hash_type	pointer
,	O
pin_b64	pointer
)	O
;	O
}	O
else	O
{	O
error_printf	O
(	O
_	O
(	O
"HPKP: could not parse pin line '%s'\n"	pointer
)	O
,	O
buf	pointer
)	O
;	O
}	O
}	O
else	O
{	O
debug_printf	O
(	O
"HPKP: skipping PIN entry: '%s'\n"	pointer
,	O
buf	pointer
)	O
;	O
}	O
}	O
wget_hpkp_db_add	function
(	O
hpkp_db	pointer
,	O
&	O
hpkp	pointer
)	O
;	O
xfree	O
(	O
buf	pointer
)	O
;	O
if	O
(	O
ferror	function
(	O
fp	pointer
)	O
)	O
{	O
hpkp_db	pointer
->	O
load_time	long
=	O
0	int
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
wget_hpkp_db_load	function
(	O
wget_hpkp_db	struct
*	O
hpkp_db	pointer
)	O
{	O
if	O
(	O
plugin_vtable	pointer
)	O
return	O
plugin_vtable	pointer
->	O
load	pointer
(	O
hpkp_db	pointer
)	O
;	O
if	O
(	O
!	O
hpkp_db	pointer
)	O
return	O
0	int
;	O
if	O
(	O
!	O
hpkp_db	pointer
->	O
fname	pointer
||	O
!	O
*	O
hpkp_db	pointer
->	O
fname	pointer
)	O
return	O
0	int
;	O
if	O
(	O
wget_update_file	function
(	O
hpkp_db	pointer
->	O
fname	pointer
,	O
(	O
wget_update_load_fn	function
*	O
)	O
hpkp_db_load	function
,	O
NULL	O
,	O
hpkp_db	pointer
)	O
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to read HPKP data\n"	pointer
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
debug_printf	O
(	O
"Fetched HPKP data from '%s'\n"	pointer
,	O
hpkp_db	pointer
->	O
fname	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
static	O
int	O
hpkp_save_pin	function
(	O
FILE	struct
*	O
fp	pointer
,	O
wget_hpkp_pin	struct
*	O
pin	pointer
)	O
{	O
wget_fprintf	function
(	O
fp	pointer
,	O
"*%s %s\n"	pointer
,	O
pin	pointer
->	O
hash_type	pointer
,	O
pin	pointer
->	O
pin_b64	pointer
)	O
;	O
if	O
(	O
ferror	function
(	O
fp	pointer
)	O
)	O
return	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
WGET_GCC_NONNULL_ALL	O
static	O
int	O
hpkp_save	function
(	O
FILE	struct
*	O
fp	pointer
,	O
const	O
wget_hpkp	struct
*	O
hpkp	pointer
)	O
{	O
if	O
(	O
wget_vector_size	function
(	O
hpkp	pointer
->	O
pins	pointer
)	O
==	O
0	int
)	O
debug_printf	O
(	O
"HPKP: drop '%s', no PIN entries\n"	pointer
,	O
hpkp	pointer
->	O
host	pointer
)	O
;	O
else	O
if	O
(	O
hpkp	pointer
->	O
expires	long
<	O
time	struct
(	O
NULL	O
)	O
)	O
debug_printf	O
(	O
"HPKP: drop '%s', expired\n"	pointer
,	O
hpkp	pointer
->	O
host	pointer
)	O
;	O
else	O
{	O
wget_fprintf	function
(	O
fp	pointer
,	O
"%s %d %lld %lld\n"	pointer
,	O
hpkp	pointer
->	O
host	pointer
,	O
hpkp	pointer
->	O
include_subdomains	int
,	O
(	O
long	O
long	O
)	O
hpkp	pointer
->	O
created	long
,	O
(	O
long	O
long	O
)	O
hpkp	pointer
->	O
maxage	long
)	O
;	O
if	O
(	O
ferror	function
(	O
fp	pointer
)	O
)	O
return	O
-	O
1	int
;	O
return	O
wget_vector_browse	function
(	O
hpkp	pointer
->	O
pins	pointer
,	O
(	O
wget_vector_browse_fn	function
*	O
)	O
hpkp_save_pin	function
,	O
fp	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
hpkp_db_save	function
(	O
wget_hpkp_db	struct
*	O
hpkp_db	pointer
,	O
FILE	struct
*	O
fp	pointer
)	O
{	O
wget_hashmap	struct
*	O
entries	pointer
=	O
hpkp_db	pointer
->	O
entries	pointer
;	O
if	O
(	O
wget_hashmap_size	function
(	O
entries	pointer
)	O
>	O
0	int
)	O
{	O
fputs	function
(	O
"# HPKP 1.0 file\n"	pointer
,	O
fp	pointer
)	O
;	O
fputs	function
(	O
"#Generated by Wget2 "	pointer
PACKAGE_VERSION	pointer
". Edit at your own risk.\n"	pointer
,	O
fp	pointer
)	O
;	O
fputs	function
(	O
"#<hostname> <incl. subdomains> <created> <max-age>\n\n"	pointer
,	O
fp	pointer
)	O
;	O
if	O
(	O
ferror	function
(	O
fp	pointer
)	O
)	O
return	O
-	O
1	int
;	O
return	O
wget_hashmap_browse	function
(	O
entries	pointer
,	O
(	O
wget_hashmap_browse_fn	function
*	O
)	O
hpkp_save	function
,	O
fp	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
wget_hpkp_db_save	function
(	O
wget_hpkp_db	struct
*	O
hpkp_db	pointer
)	O
{	O
if	O
(	O
plugin_vtable	pointer
)	O
return	O
plugin_vtable	pointer
->	O
save	pointer
(	O
hpkp_db	pointer
)	O
;	O
if	O
(	O
!	O
hpkp_db	pointer
)	O
return	O
-	O
1	int
;	O
int	O
size	pointer
;	O
if	O
(	O
!	O
hpkp_db	pointer
->	O
fname	pointer
||	O
!	O
*	O
hpkp_db	pointer
->	O
fname	pointer
)	O
return	O
-	O
1	int
;	O
if	O
(	O
wget_update_file	function
(	O
hpkp_db	pointer
->	O
fname	pointer
,	O
(	O
wget_update_load_fn	function
*	O
)	O
hpkp_db_load	function
,	O
(	O
wget_update_load_fn	function
*	O
)	O
hpkp_db_save	function
,	O
hpkp_db	pointer
)	O
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to write HPKP file '%s'\n"	pointer
)	O
,	O
hpkp_db	pointer
->	O
fname	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
size	pointer
=	O
wget_hashmap_size	function
(	O
hpkp_db	pointer
->	O
entries	pointer
)	O
)	O
)	O
debug_printf	O
(	O
"Saved %d HPKP entr%s into '%s'\n"	pointer
,	O
size	pointer
,	O
size	pointer
!=	O
1	int
?	O
"ies"	pointer
:	O
"y"	pointer
,	O
hpkp_db	pointer
->	O
fname	pointer
)	O
;	O
else	O
debug_printf	O
(	O
"No HPKP entries to save. Table is empty.\n"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
wget_hpkp_db	struct
*	O
wget_hpkp_db_init	function
(	O
wget_hpkp_db	struct
*	O
hpkp_db	pointer
,	O
const	O
char	O
*	O
fname	pointer
)	O
{	O
if	O
(	O
plugin_vtable	pointer
)	O
return	O
plugin_vtable	pointer
->	O
init	pointer
(	O
hpkp_db	pointer
,	O
fname	pointer
)	O
;	O
if	O
(	O
!	O
hpkp_db	pointer
)	O
hpkp_db	pointer
=	O
wget_calloc	function
(	O
1	int
,	O
sizeof	O
(	O
struct	O
wget_hpkp_db_st	struct
)	O
)	O
;	O
else	O
memset	function
(	O
hpkp_db	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
hpkp_db	pointer
)	O
)	O
;	O
if	O
(	O
fname	pointer
)	O
hpkp_db	pointer
->	O
fname	pointer
=	O
wget_strdup	function
(	O
fname	pointer
)	O
;	O
hpkp_db	pointer
->	O
entries	pointer
=	O
wget_hashmap_create	function
(	O
16	int
,	O
(	O
wget_hashmap_hash_fn	function
*	O
)	O
hash_hpkp	function
,	O
(	O
wget_hashmap_compare_fn	function
*	O
)	O
compare_hpkp	function
)	O
;	O
wget_hashmap_set_key_destructor	function
(	O
hpkp_db	pointer
->	O
entries	pointer
,	O
(	O
wget_hashmap_key_destructor	function
*	O
)	O
wget_hpkp_free	function
)	O
;	O
wget_thread_mutex_init	function
(	O
&	O
hpkp_db	pointer
->	O
mutex	pointer
)	O
;	O
return	O
(	O
wget_hpkp_db	struct
*	O
)	O
hpkp_db	pointer
;	O
}	O
void	O
wget_hpkp_db_set_fname	function
(	O
wget_hpkp_db	struct
*	O
hpkp_db	pointer
,	O
const	O
char	O
*	O
fname	pointer
)	O
{	O
xfree	O
(	O
hpkp_db	pointer
->	O
fname	pointer
)	O
;	O
hpkp_db	pointer
->	O
fname	pointer
=	O
wget_strdup	function
(	O
fname	pointer
)	O
;	O
}	O
