char	O
filter_docstring	array
[	O
]	O
=	O
N_	O
(	O
"apply a chain of filters to the input"	pointer
)	O
;	O
static	O
char	O
filter_args_doc	array
[	O
]	O
=	O
N_	O
(	O
"[~]NAME [ARGS] [+ [~]NAME [ARGS]...]"	pointer
)	O
;	O
static	O
int	O
filter_mode	int
=	O
MU_FILTER_ENCODE	int
;	O
static	O
int	O
newline_option	int
=	O
0	int
;	O
static	O
int	O
list_option	int
;	O
static	O
void	O
set_encode_mode	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
filter_mode	int
=	O
MU_FILTER_ENCODE	int
;	O
}	O
static	O
void	O
set_decode_mode	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
filter_mode	int
=	O
MU_FILTER_DECODE	int
;	O
}	O
static	O
struct	O
mu_option	struct
filter_options	array
[	O
]	O
=	O
{	O
{	O
"encode"	pointer
,	O
'e'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"encode the input (default)"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
set_encode_mode	function
}	O
,	O
{	O
"decode"	pointer
,	O
'd'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"decode the input"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
set_decode_mode	function
}	O
,	O
{	O
"newline"	pointer
,	O
'n'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"print additional newline"	pointer
)	O
,	O
mu_c_bool	int
,	O
&	O
newline_option	int
}	O
,	O
{	O
"list"	pointer
,	O
'L'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"list supported filters"	pointer
)	O
,	O
mu_c_bool	int
,	O
&	O
list_option	int
}	O
,	O
MU_OPTION_END	O
}	O
;	O
static	O
int	O
filter_printer	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
mu_filter_record_t	pointer
rec	pointer
=	O
item	pointer
;	O
printf	function
(	O
"%s\n"	pointer
,	O
rec	pointer
->	O
name	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
list_filters	function
(	O
void	O
)	O
{	O
mu_list_t	pointer
list	pointer
;	O
int	O
rc	int
=	O
mu_filter_get_list	function
(	O
&	O
list	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_filter_get_list"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
return	O
1	int
;	O
}	O
return	O
mu_list_foreach	function
(	O
list	pointer
,	O
filter_printer	function
,	O
NULL	O
)	O
;	O
}	O
static	O
int	O
negate_filter_mode	function
(	O
int	O
mode	int
)	O
{	O
if	O
(	O
mode	int
==	O
MU_FILTER_DECODE	int
)	O
return	O
MU_FILTER_ENCODE	int
;	O
else	O
if	O
(	O
mode	int
==	O
MU_FILTER_ENCODE	int
)	O
return	O
MU_FILTER_DECODE	int
;	O
abort	function
(	O
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
rc	int
;	O
mu_stream_t	pointer
flt	pointer
,	O
prev_stream	pointer
;	O
const	O
char	O
*	O
fltname	pointer
;	O
int	O
mode	int
;	O
mu_action_getopt	function
(	O
&	O
argc	long
,	O
&	O
argv	pointer
,	O
filter_options	array
,	O
filter_docstring	array
,	O
filter_args_doc	array
)	O
;	O
if	O
(	O
list_option	int
)	O
{	O
if	O
(	O
argc	long
)	O
{	O
mu_error	function
(	O
_	O
(	O
"excess arguments"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
return	O
list_filters	function
(	O
)	O
;	O
}	O
if	O
(	O
argc	long
==	O
0	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"what filter do you want?"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
prev_stream	pointer
=	O
mu_strin	pointer
;	O
mu_stream_ref	function
(	O
mu_strin	pointer
)	O
;	O
do	O
{	O
int	O
i	long
;	O
fltname	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
if	O
(	O
fltname	pointer
[	O
0	int
]	O
==	O
'~'	O
)	O
{	O
mode	int
=	O
negate_filter_mode	function
(	O
filter_mode	int
)	O
;	O
fltname	pointer
++	O
;	O
}	O
else	O
mode	int
=	O
filter_mode	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"+"	pointer
)	O
==	O
0	int
)	O
break	O
;	O
rc	int
=	O
mu_filter_create_args	function
(	O
&	O
flt	pointer
,	O
prev_stream	pointer
,	O
fltname	pointer
,	O
i	long
,	O
(	O
const	O
char	O
*	O
*	O
)	O
argv	pointer
,	O
mode	int
,	O
MU_STREAM_READ	int
)	O
;	O
mu_stream_unref	function
(	O
prev_stream	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot open filter stream: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
prev_stream	pointer
=	O
flt	pointer
;	O
argc	long
-=	O
i	long
;	O
argv	pointer
+=	O
i	long
;	O
if	O
(	O
argc	long
)	O
{	O
argc	long
--	O
;	O
argv	pointer
++	O
;	O
}	O
}	O
while	O
(	O
argc	long
)	O
;	O
rc	int
=	O
mu_stream_copy	function
(	O
mu_strout	pointer
,	O
flt	pointer
,	O
0	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
"%s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
newline_option	int
)	O
mu_stream_write	function
(	O
mu_strout	pointer
,	O
"\n"	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
mu_stream_destroy	function
(	O
&	O
flt	pointer
)	O
;	O
mu_stream_flush	function
(	O
mu_strout	pointer
)	O
;	O
return	O
0	int
;	O
}	O
