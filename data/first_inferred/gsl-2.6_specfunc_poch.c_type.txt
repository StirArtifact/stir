static	O
const	O
double	O
bern	array
[	O
21	int
]	O
=	O
{	O
0.0	int
,	O
+	O
0.833333333333333333333333333333333e-01	int
,	O
-	O
0.138888888888888888888888888888888e-02	int
,	O
+	O
0.330687830687830687830687830687830e-04	int
,	O
-	O
0.826719576719576719576719576719576e-06	int
,	O
+	O
0.208767569878680989792100903212014e-07	int
,	O
-	O
0.528419013868749318484768220217955e-09	int
,	O
+	O
0.133825365306846788328269809751291e-10	int
,	O
-	O
0.338968029632258286683019539124944e-12	int
,	O
+	O
0.858606205627784456413590545042562e-14	int
,	O
-	O
0.217486869855806187304151642386591e-15	int
,	O
+	O
0.550900282836022951520265260890225e-17	int
,	O
-	O
0.139544646858125233407076862640635e-18	int
,	O
+	O
0.353470703962946747169322997780379e-20	int
,	O
-	O
0.895351742703754685040261131811274e-22	int
,	O
+	O
0.226795245233768306031095073886816e-23	int
,	O
-	O
0.574472439520264523834847971943400e-24	int
,	O
+	O
0.145517247561486490186626486727132e-26	int
,	O
-	O
0.368599494066531017818178247990866e-28	int
,	O
+	O
0.933673425709504467203255515278562e-30	int
,	O
-	O
0.236502241570062993455963519636983e-31	int
}	O
;	O
static	O
int	O
pochrel_smallx	function
(	O
const	O
double	O
a	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
double	O
SQTBIG	double
=	O
1.0	int
/	O
(	O
2.0	int
*	O
M_SQRT2	int
*	O
M_SQRT3	int
*	O
GSL_SQRT_DBL_MIN	int
)	O
;	O
const	O
double	O
ALNEPS	double
=	O
GSL_LOG_DBL_EPSILON	O
-	O
M_LN2	int
;	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
return	O
gsl_sf_psi_e	function
(	O
a	double
,	O
result	pointer
)	O
;	O
}	O
else	O
{	O
const	O
double	O
bp	double
=	O
(	O
(	O
a	double
<	O
-	O
0.5	int
)	O
?	O
1.0	int
-	O
a	double
-	O
x	double
:	O
a	double
)	O
;	O
const	O
int	O
incr	int
=	O
(	O
(	O
bp	double
<	O
10.0	int
)	O
?	O
11.0	int
-	O
bp	double
:	O
0	int
)	O
;	O
const	O
double	O
b	double
=	O
bp	double
+	O
incr	int
;	O
double	O
dpoch1	double
;	O
gsl_sf_result	struct
dexprl	struct
;	O
int	O
stat_dexprl	int
;	O
int	O
i	int
;	O
double	O
var	double
=	O
b	double
+	O
0.5	int
*	O
(	O
x	double
-	O
1.0	int
)	O
;	O
double	O
alnvar	double
=	O
log	function
(	O
var	double
)	O
;	O
double	O
q	double
=	O
x	double
*	O
alnvar	double
;	O
double	O
poly1	double
=	O
0.0	int
;	O
if	O
(	O
var	double
<	O
SQTBIG	double
)	O
{	O
const	O
int	O
nterms	int
=	O
(	O
int	O
)	O
(	O
-	O
0.5	int
*	O
ALNEPS	double
/	O
alnvar	double
+	O
1.0	int
)	O
;	O
const	O
double	O
var2	double
=	O
(	O
1.0	int
/	O
var	double
)	O
/	O
var	double
;	O
const	O
double	O
rho	double
=	O
0.5	int
*	O
(	O
x	double
+	O
1.0	int
)	O
;	O
double	O
term	double
=	O
var2	double
;	O
double	O
gbern	array
[	O
24	int
]	O
;	O
int	O
k	int
,	O
j	int
;	O
gbern	array
[	O
1	int
]	O
=	O
1.0	int
;	O
gbern	array
[	O
2	int
]	O
=	O
-	O
rho	double
/	O
12.0	int
;	O
poly1	double
=	O
gbern	array
[	O
2	int
]	O
*	O
term	double
;	O
if	O
(	O
nterms	int
>	O
20	int
)	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
GSL_ERROR	O
(	O
"error"	pointer
,	O
GSL_ESANITY	int
)	O
;	O
}	O
for	O
(	O
k	int
=	O
2	int
;	O
k	int
<=	O
nterms	int
;	O
k	int
++	O
)	O
{	O
double	O
gbk	double
=	O
0.0	int
;	O
for	O
(	O
j	int
=	O
1	int
;	O
j	int
<=	O
k	int
;	O
j	int
++	O
)	O
{	O
gbk	double
+=	O
bern	array
[	O
k	int
-	O
j	int
+	O
1	int
]	O
*	O
gbern	array
[	O
j	int
]	O
;	O
}	O
gbern	array
[	O
k	int
+	O
1	int
]	O
=	O
-	O
rho	double
*	O
gbk	double
/	O
k	int
;	O
term	double
*=	O
(	O
2	int
*	O
k	int
-	O
2	int
-	O
x	double
)	O
*	O
(	O
2	int
*	O
k	int
-	O
1	int
-	O
x	double
)	O
*	O
var2	double
;	O
poly1	double
+=	O
gbern	array
[	O
k	int
+	O
1	int
]	O
*	O
term	double
;	O
}	O
}	O
stat_dexprl	int
=	O
gsl_sf_expm1_e	function
(	O
q	double
,	O
&	O
dexprl	struct
)	O
;	O
if	O
(	O
stat_dexprl	int
!=	O
GSL_SUCCESS	int
)	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
stat_dexprl	int
;	O
}	O
dexprl	struct
.	O
val	double
=	O
dexprl	struct
.	O
val	double
/	O
q	double
;	O
poly1	double
*=	O
(	O
x	double
-	O
1.0	int
)	O
;	O
dpoch1	double
=	O
dexprl	struct
.	O
val	double
*	O
(	O
alnvar	double
+	O
q	double
*	O
poly1	double
)	O
+	O
poly1	double
;	O
for	O
(	O
i	int
=	O
incr	int
-	O
1	int
;	O
i	int
>=	O
0	int
;	O
i	int
--	O
)	O
{	O
double	O
binv	double
=	O
1.0	int
/	O
(	O
bp	double
+	O
i	int
)	O
;	O
dpoch1	double
=	O
(	O
dpoch1	double
-	O
binv	double
)	O
/	O
(	O
1.0	int
+	O
x	double
*	O
binv	double
)	O
;	O
}	O
if	O
(	O
bp	double
==	O
a	double
)	O
{	O
result	pointer
->	O
val	double
=	O
dpoch1	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
incr	int
)	O
+	O
1.0	int
)	O
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
double	O
sinpxx	double
=	O
sin	function
(	O
M_PI	int
*	O
x	double
)	O
/	O
x	double
;	O
double	O
sinpx2	double
=	O
sin	function
(	O
0.5	int
*	O
M_PI	int
*	O
x	double
)	O
;	O
double	O
t1	double
=	O
sinpxx	double
/	O
tan	function
(	O
M_PI	int
*	O
b	double
)	O
;	O
double	O
t2	double
=	O
2.0	int
*	O
sinpx2	double
*	O
(	O
sinpx2	double
/	O
x	double
)	O
;	O
double	O
trig	double
=	O
t1	double
-	O
t2	double
;	O
result	pointer
->	O
val	double
=	O
dpoch1	double
*	O
(	O
1.0	int
+	O
x	double
*	O
trig	double
)	O
+	O
trig	double
;	O
result	pointer
->	O
err	double
=	O
(	O
fabs	function
(	O
dpoch1	double
*	O
x	double
)	O
+	O
1.0	int
)	O
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
t1	double
)	O
+	O
fabs	function
(	O
t2	double
)	O
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
incr	int
)	O
+	O
1.0	int
)	O
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
}	O
static	O
int	O
lnpoch_pos	function
(	O
const	O
double	O
a	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
double	O
absx	double
=	O
fabs	function
(	O
x	double
)	O
;	O
if	O
(	O
absx	double
>	O
0.1	int
*	O
a	double
||	O
absx	double
*	O
log	function
(	O
GSL_MAX_DBL	function
(	O
a	double
,	O
2.0	int
)	O
)	O
>	O
0.1	int
)	O
{	O
if	O
(	O
a	double
<	O
GSL_SF_GAMMA_XMAX	int
&&	O
a	double
+	O
x	double
<	O
GSL_SF_GAMMA_XMAX	int
)	O
{	O
gsl_sf_result	struct
g1	struct
;	O
gsl_sf_result	struct
g2	struct
;	O
gsl_sf_gammainv_e	function
(	O
a	double
,	O
&	O
g1	struct
)	O
;	O
gsl_sf_gammainv_e	function
(	O
a	double
+	O
x	double
,	O
&	O
g2	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
-	O
log	function
(	O
g2	struct
.	O
val	double
/	O
g1	struct
.	O
val	double
)	O
;	O
result	pointer
->	O
err	double
=	O
g1	struct
.	O
err	double
/	O
fabs	function
(	O
g1	struct
.	O
val	double
)	O
+	O
g2	struct
.	O
err	double
/	O
fabs	function
(	O
g2	struct
.	O
val	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct
lg1	struct
;	O
gsl_sf_result	struct
lg2	struct
;	O
int	O
stat_1	int
=	O
gsl_sf_lngamma_e	function
(	O
a	double
,	O
&	O
lg1	struct
)	O
;	O
int	O
stat_2	int
=	O
gsl_sf_lngamma_e	function
(	O
a	double
+	O
x	double
,	O
&	O
lg2	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
lg2	struct
.	O
val	double
-	O
lg1	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
lg2	struct
.	O
err	double
+	O
lg1	struct
.	O
err	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_1	int
,	O
stat_2	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
absx	double
<	O
0.1	int
*	O
a	double
&&	O
a	double
>	O
15.0	int
)	O
{	O
const	O
double	O
eps	double
=	O
x	double
/	O
a	double
;	O
const	O
double	O
den	double
=	O
1.0	int
+	O
eps	double
;	O
const	O
double	O
d3	double
=	O
den	double
*	O
den	double
*	O
den	double
;	O
const	O
double	O
d5	double
=	O
d3	double
*	O
den	double
*	O
den	double
;	O
const	O
double	O
d7	double
=	O
d5	double
*	O
den	double
*	O
den	double
;	O
const	O
double	O
c1	double
=	O
-	O
eps	double
/	O
den	double
;	O
const	O
double	O
c3	double
=	O
-	O
eps	double
*	O
(	O
3.0	int
+	O
eps	double
*	O
(	O
3.0	int
+	O
eps	double
)	O
)	O
/	O
d3	double
;	O
const	O
double	O
c5	double
=	O
-	O
eps	double
*	O
(	O
5.0	int
+	O
eps	double
*	O
(	O
10.0	int
+	O
eps	double
*	O
(	O
10.0	int
+	O
eps	double
*	O
(	O
5.0	int
+	O
eps	double
)	O
)	O
)	O
)	O
/	O
d5	double
;	O
const	O
double	O
c7	double
=	O
-	O
eps	double
*	O
(	O
7.0	int
+	O
eps	double
*	O
(	O
21.0	int
+	O
eps	double
*	O
(	O
35.0	int
+	O
eps	double
*	O
(	O
35.0	int
+	O
eps	double
*	O
(	O
21.0	int
+	O
eps	double
*	O
(	O
7.0	int
+	O
eps	double
)	O
)	O
)	O
)	O
)	O
)	O
/	O
d7	double
;	O
const	O
double	O
p8	double
=	O
gsl_sf_pow_int	function
(	O
1.0	int
+	O
eps	double
,	O
8	int
)	O
;	O
const	O
double	O
c8	double
=	O
1.0	int
/	O
p8	double
-	O
1.0	int
;	O
const	O
double	O
c9	double
=	O
1.0	int
/	O
(	O
p8	double
*	O
(	O
1.0	int
+	O
eps	double
)	O
)	O
-	O
1.0	int
;	O
const	O
double	O
a4	double
=	O
a	double
*	O
a	double
*	O
a	double
*	O
a	double
;	O
const	O
double	O
a6	double
=	O
a4	double
*	O
a	double
*	O
a	double
;	O
const	O
double	O
ser_1	double
=	O
c1	double
+	O
c3	double
/	O
(	O
30.0	int
*	O
a	double
*	O
a	double
)	O
+	O
c5	double
/	O
(	O
105.0	int
*	O
a4	double
)	O
+	O
c7	double
/	O
(	O
140.0	int
*	O
a6	double
)	O
;	O
const	O
double	O
ser_2	double
=	O
c8	double
/	O
(	O
99.0	int
*	O
a6	double
*	O
a	double
*	O
a	double
)	O
-	O
691.0	int
/	O
360360.0	int
*	O
c9	double
/	O
(	O
a6	double
*	O
a4	double
)	O
;	O
const	O
double	O
ser	double
=	O
(	O
ser_1	double
+	O
ser_2	double
)	O
/	O
(	O
12.0	int
*	O
a	double
)	O
;	O
double	O
term1	double
=	O
x	double
*	O
log	function
(	O
a	double
/	O
M_E	int
)	O
;	O
double	O
term2	double
;	O
gsl_sf_result	struct
ln_1peps	struct
;	O
gsl_sf_log_1plusx_e	function
(	O
eps	double
,	O
&	O
ln_1peps	struct
)	O
;	O
term2	double
=	O
(	O
x	double
+	O
a	double
-	O
0.5	int
)	O
*	O
ln_1peps	struct
.	O
val	double
;	O
result	pointer
->	O
val	double
=	O
term1	double
+	O
term2	double
+	O
ser	double
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
term1	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
fabs	function
(	O
(	O
x	double
+	O
a	double
-	O
0.5	int
)	O
*	O
ln_1peps	struct
.	O
err	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
fabs	function
(	O
ln_1peps	struct
.	O
val	double
)	O
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
x	double
)	O
+	O
fabs	function
(	O
a	double
)	O
+	O
0.5	int
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct
poch_rel	struct
;	O
int	O
stat_p	int
=	O
pochrel_smallx	function
(	O
a	double
,	O
x	double
,	O
&	O
poch_rel	struct
)	O
;	O
double	O
eps	double
=	O
x	double
*	O
poch_rel	struct
.	O
val	double
;	O
int	O
stat_e	int
=	O
gsl_sf_log_1plusx_e	function
(	O
eps	double
,	O
result	pointer
)	O
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
fabs	function
(	O
x	double
*	O
poch_rel	struct
.	O
err	double
/	O
(	O
1.0	int
+	O
eps	double
)	O
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_e	int
,	O
stat_p	int
)	O
;	O
}	O
}	O
int	O
gsl_sf_lnpoch_e	function
(	O
const	O
double	O
a	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
a	double
<=	O
0.0	int
||	O
a	double
+	O
x	double
<=	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
return	O
lnpoch_pos	function
(	O
a	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
}	O
int	O
gsl_sf_lnpoch_sgn_e	function
(	O
const	O
double	O
a	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
,	O
double	O
*	O
sgn	pointer
)	O
{	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
*	O
sgn	pointer
=	O
1.0	int
;	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
a	double
>	O
0.0	int
&&	O
a	double
+	O
x	double
>	O
0.0	int
)	O
{	O
*	O
sgn	pointer
=	O
1.0	int
;	O
return	O
lnpoch_pos	function
(	O
a	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
a	double
<=	O
0	int
&&	O
a	double
==	O
floor	function
(	O
a	double
)	O
)	O
{	O
if	O
(	O
a	double
+	O
x	double
<	O
0	int
&&	O
x	double
==	O
floor	function
(	O
x	double
)	O
)	O
{	O
gsl_sf_result	struct
result_pos	struct
;	O
int	O
stat	int
=	O
lnpoch_pos	function
(	O
-	O
a	double
,	O
-	O
x	double
,	O
&	O
result_pos	struct
)	O
;	O
double	O
f	pointer
=	O
log	function
(	O
a	double
/	O
(	O
a	double
+	O
x	double
)	O
)	O
;	O
double	O
s	double
=	O
(	O
fmod	function
(	O
x	double
,	O
2	int
)	O
==	O
0	int
)	O
?	O
1	int
:	O
-	O
1	int
;	O
result	pointer
->	O
val	double
=	O
f	pointer
-	O
result_pos	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
result_pos	struct
.	O
err	double
+	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
f	pointer
;	O
*	O
sgn	pointer
=	O
s	double
;	O
return	O
stat	int
;	O
}	O
else	O
if	O
(	O
a	double
+	O
x	double
==	O
0	int
)	O
{	O
int	O
stat	int
=	O
gsl_sf_lngamma_sgn_e	function
(	O
-	O
a	double
+	O
1	int
,	O
result	pointer
,	O
sgn	pointer
)	O
;	O
double	O
s	double
=	O
(	O
fmod	function
(	O
-	O
a	double
,	O
2	int
)	O
==	O
0	int
)	O
?	O
1	int
:	O
-	O
1	int
;	O
*	O
sgn	pointer
*=	O
s	double
;	O
return	O
stat	int
;	O
}	O
else	O
{	O
result	pointer
->	O
val	double
=	O
GSL_NEGINF	O
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
*	O
sgn	pointer
=	O
1	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
else	O
if	O
(	O
a	double
<	O
0.0	int
&&	O
a	double
+	O
x	double
<	O
0.0	int
)	O
{	O
double	O
sin_1	double
=	O
sin	function
(	O
M_PI	int
*	O
(	O
1.0	int
-	O
a	double
)	O
)	O
;	O
double	O
sin_2	double
=	O
sin	function
(	O
M_PI	int
*	O
(	O
1.0	int
-	O
a	double
-	O
x	double
)	O
)	O
;	O
if	O
(	O
sin_1	double
==	O
0.0	int
||	O
sin_2	double
==	O
0.0	int
)	O
{	O
*	O
sgn	pointer
=	O
0.0	int
;	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
{	O
gsl_sf_result	struct
lnp_pos	struct
;	O
int	O
stat_pp	int
=	O
lnpoch_pos	function
(	O
1.0	int
-	O
a	double
,	O
-	O
x	double
,	O
&	O
lnp_pos	struct
)	O
;	O
double	O
lnterm	double
=	O
log	function
(	O
fabs	function
(	O
sin_1	double
/	O
sin_2	double
)	O
)	O
;	O
result	pointer
->	O
val	double
=	O
lnterm	double
-	O
lnp_pos	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
lnp_pos	struct
.	O
err	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
1.0	int
-	O
a	double
)	O
+	O
fabs	function
(	O
1.0	int
-	O
a	double
-	O
x	double
)	O
)	O
*	O
fabs	function
(	O
lnterm	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
*	O
sgn	pointer
=	O
GSL_SIGN	O
(	O
sin_1	double
*	O
sin_2	double
)	O
;	O
return	O
stat_pp	int
;	O
}	O
}	O
else	O
{	O
gsl_sf_result	struct
lg_apn	struct
;	O
gsl_sf_result	struct
lg_a	struct
;	O
double	O
s_apn	double
,	O
s_a	double
;	O
int	O
stat_apn	int
=	O
gsl_sf_lngamma_sgn_e	function
(	O
a	double
+	O
x	double
,	O
&	O
lg_apn	struct
,	O
&	O
s_apn	double
)	O
;	O
int	O
stat_a	int
=	O
gsl_sf_lngamma_sgn_e	function
(	O
a	double
,	O
&	O
lg_a	struct
,	O
&	O
s_a	double
)	O
;	O
if	O
(	O
stat_apn	int
==	O
GSL_SUCCESS	int
&&	O
stat_a	int
==	O
GSL_SUCCESS	int
)	O
{	O
result	pointer
->	O
val	double
=	O
lg_apn	struct
.	O
val	double
-	O
lg_a	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
lg_apn	struct
.	O
err	double
+	O
lg_a	struct
.	O
err	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
*	O
sgn	pointer
=	O
s_a	double
*	O
s_apn	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
stat_apn	int
==	O
GSL_EDOM	int
||	O
stat_a	int
==	O
GSL_EDOM	int
)	O
{	O
*	O
sgn	pointer
=	O
0.0	int
;	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
*	O
sgn	pointer
=	O
0.0	int
;	O
return	O
GSL_FAILURE	int
;	O
}	O
}	O
}	O
int	O
gsl_sf_poch_e	function
(	O
const	O
double	O
a	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct
lnpoch	struct
;	O
double	O
sgn	pointer
;	O
int	O
stat_lnpoch	int
=	O
gsl_sf_lnpoch_sgn_e	function
(	O
a	double
,	O
x	double
,	O
&	O
lnpoch	struct
,	O
&	O
sgn	pointer
)	O
;	O
if	O
(	O
lnpoch	struct
.	O
val	double
==	O
GSL_NEGINF	O
)	O
{	O
result	pointer
->	O
val	double
=	O
0	int
;	O
result	pointer
->	O
err	double
=	O
0	int
;	O
return	O
stat_lnpoch	int
;	O
}	O
else	O
{	O
int	O
stat_exp	int
=	O
gsl_sf_exp_err_e	function
(	O
lnpoch	struct
.	O
val	double
,	O
lnpoch	struct
.	O
err	double
,	O
result	pointer
)	O
;	O
result	pointer
->	O
val	double
*=	O
sgn	pointer
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_exp	int
,	O
stat_lnpoch	int
)	O
;	O
}	O
}	O
}	O
int	O
gsl_sf_pochrel_e	function
(	O
const	O
double	O
a	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
double	O
absx	double
=	O
fabs	function
(	O
x	double
)	O
;	O
const	O
double	O
absa	double
=	O
fabs	function
(	O
a	double
)	O
;	O
if	O
(	O
absx	double
>	O
0.1	int
*	O
absa	double
||	O
absx	double
*	O
log	function
(	O
GSL_MAX	O
(	O
absa	double
,	O
2.0	int
)	O
)	O
>	O
0.1	int
)	O
{	O
gsl_sf_result	struct
lnpoch	struct
;	O
double	O
sgn	pointer
;	O
int	O
stat_poch	int
=	O
gsl_sf_lnpoch_sgn_e	function
(	O
a	double
,	O
x	double
,	O
&	O
lnpoch	struct
,	O
&	O
sgn	pointer
)	O
;	O
if	O
(	O
lnpoch	struct
.	O
val	double
>	O
GSL_LOG_DBL_MAX	int
)	O
{	O
OVERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
{	O
const	O
double	O
el	double
=	O
exp	function
(	O
lnpoch	struct
.	O
val	double
)	O
;	O
result	pointer
->	O
val	double
=	O
(	O
sgn	pointer
*	O
el	double
-	O
1.0	int
)	O
/	O
x	double
;	O
result	pointer
->	O
err	double
=	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
*	O
(	O
lnpoch	struct
.	O
err	double
+	O
2.0	int
*	O
GSL_DBL_EPSILON	int
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
sgn	pointer
*	O
el	double
)	O
+	O
1.0	int
)	O
/	O
fabs	function
(	O
x	double
)	O
;	O
return	O
stat_poch	int
;	O
}	O
}	O
else	O
{	O
return	O
pochrel_smallx	function
(	O
a	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
}	O
double	O
gsl_sf_lnpoch	function
(	O
const	O
double	O
a	double
,	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_lnpoch_e	function
(	O
a	double
,	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_poch	function
(	O
const	O
double	O
a	double
,	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_poch_e	function
(	O
a	double
,	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_pochrel	function
(	O
const	O
double	O
a	double
,	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_pochrel_e	function
(	O
a	double
,	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
