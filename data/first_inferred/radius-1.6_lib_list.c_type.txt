struct	O
grad_list_entry	struct
{	O
struct	O
grad_list_entry	struct
*	O
next	pointer
;	O
void	O
*	O
data	pointer
;	O
}	O
;	O
struct	O
grad_list	struct
{	O
size_t	long
count	int
;	O
struct	O
grad_list_entry	struct
*	O
head	pointer
,	O
*	O
tail	pointer
;	O
struct	O
grad_iterator	struct
*	O
itr	pointer
;	O
}	O
;	O
struct	O
grad_iterator	struct
{	O
struct	O
grad_iterator	struct
*	O
next	pointer
;	O
grad_list_t	struct
*	O
list	pointer
;	O
struct	O
grad_list_entry	struct
*	O
cur	pointer
;	O
int	O
advanced	int
;	O
}	O
;	O
struct	O
grad_list	struct
*	O
grad_list_create	function
(	O
)	O
{	O
struct	O
grad_list	struct
*	O
p	pointer
=	O
grad_emalloc	function
(	O
sizeof	O
(	O
*	O
p	pointer
)	O
)	O
;	O
p	pointer
->	O
head	pointer
=	O
p	pointer
->	O
tail	pointer
=	O
NULL	O
;	O
p	pointer
->	O
itr	pointer
=	O
NULL	O
;	O
return	O
p	pointer
;	O
}	O
void	O
grad_list_destroy	function
(	O
struct	O
grad_list	struct
*	O
*	O
plist	pointer
,	O
list_iterator_t	pointer
user_free	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
grad_list_entry	struct
*	O
p	pointer
;	O
if	O
(	O
!	O
*	O
plist	pointer
)	O
return	O
;	O
p	pointer
=	O
(	O
*	O
plist	pointer
)	O
->	O
head	pointer
;	O
while	O
(	O
p	pointer
)	O
{	O
struct	O
grad_list_entry	struct
*	O
next	pointer
=	O
p	pointer
->	O
next	pointer
;	O
if	O
(	O
user_free	pointer
)	O
user_free	pointer
(	O
p	pointer
->	O
data	pointer
,	O
data	pointer
)	O
;	O
grad_free	function
(	O
p	pointer
)	O
;	O
p	pointer
=	O
next	pointer
;	O
}	O
grad_free	function
(	O
*	O
plist	pointer
)	O
;	O
*	O
plist	pointer
=	O
NULL	O
;	O
}	O
void	O
*	O
grad_iterator_current	function
(	O
grad_iterator_t	struct
*	O
ip	pointer
)	O
{	O
if	O
(	O
!	O
ip	pointer
)	O
return	O
NULL	O
;	O
return	O
ip	pointer
->	O
cur	pointer
?	O
ip	pointer
->	O
cur	pointer
->	O
data	pointer
:	O
NULL	O
;	O
}	O
static	O
void	O
grad_iterator_attach	function
(	O
grad_iterator_t	struct
*	O
itr	pointer
,	O
grad_list_t	struct
*	O
list	pointer
)	O
{	O
itr	pointer
->	O
list	pointer
=	O
list	pointer
;	O
itr	pointer
->	O
cur	pointer
=	O
NULL	O
;	O
itr	pointer
->	O
next	pointer
=	O
list	pointer
->	O
itr	pointer
;	O
itr	pointer
->	O
advanced	int
=	O
0	int
;	O
list	pointer
->	O
itr	pointer
=	O
itr	pointer
;	O
}	O
static	O
grad_iterator_t	struct
*	O
grad_iterator_detach	function
(	O
grad_iterator_t	struct
*	O
iter	pointer
)	O
{	O
grad_iterator_t	struct
*	O
cur	pointer
,	O
*	O
prev	pointer
;	O
for	O
(	O
cur	pointer
=	O
iter	pointer
->	O
list	pointer
->	O
itr	pointer
,	O
prev	pointer
=	O
NULL	O
;	O
cur	pointer
;	O
prev	pointer
=	O
cur	pointer
,	O
cur	pointer
=	O
cur	pointer
->	O
next	pointer
)	O
if	O
(	O
cur	pointer
==	O
iter	pointer
)	O
break	O
;	O
if	O
(	O
cur	pointer
)	O
{	O
if	O
(	O
prev	pointer
)	O
prev	pointer
->	O
next	pointer
=	O
cur	pointer
->	O
next	pointer
;	O
else	O
cur	pointer
->	O
list	pointer
->	O
itr	pointer
=	O
cur	pointer
->	O
next	pointer
;	O
}	O
return	O
cur	pointer
;	O
}	O
grad_iterator_t	struct
*	O
grad_iterator_create	function
(	O
grad_list_t	struct
*	O
list	pointer
)	O
{	O
grad_iterator_t	struct
*	O
itr	pointer
;	O
if	O
(	O
!	O
list	pointer
)	O
return	O
NULL	O
;	O
itr	pointer
=	O
grad_emalloc	function
(	O
sizeof	O
(	O
*	O
itr	pointer
)	O
)	O
;	O
grad_iterator_attach	function
(	O
itr	pointer
,	O
list	pointer
)	O
;	O
return	O
itr	pointer
;	O
}	O
void	O
grad_iterator_destroy	function
(	O
grad_iterator_t	struct
*	O
*	O
ip	pointer
)	O
{	O
grad_iterator_t	struct
*	O
itr	pointer
;	O
if	O
(	O
!	O
ip	pointer
||	O
!	O
*	O
ip	pointer
)	O
return	O
;	O
itr	pointer
=	O
grad_iterator_detach	function
(	O
*	O
ip	pointer
)	O
;	O
if	O
(	O
itr	pointer
)	O
grad_free	function
(	O
itr	pointer
)	O
;	O
*	O
ip	pointer
=	O
NULL	O
;	O
}	O
void	O
*	O
grad_iterator_first	function
(	O
grad_iterator_t	struct
*	O
ip	pointer
)	O
{	O
if	O
(	O
!	O
ip	pointer
)	O
return	O
NULL	O
;	O
ip	pointer
->	O
cur	pointer
=	O
ip	pointer
->	O
list	pointer
->	O
head	pointer
;	O
ip	pointer
->	O
advanced	int
=	O
0	int
;	O
return	O
grad_iterator_current	function
(	O
ip	pointer
)	O
;	O
}	O
void	O
*	O
grad_iterator_next	function
(	O
grad_iterator_t	struct
*	O
ip	pointer
)	O
{	O
if	O
(	O
!	O
ip	pointer
||	O
!	O
ip	pointer
->	O
cur	pointer
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
ip	pointer
->	O
advanced	int
)	O
ip	pointer
->	O
cur	pointer
=	O
ip	pointer
->	O
cur	pointer
->	O
next	pointer
;	O
ip	pointer
->	O
advanced	int
=	O
0	int
;	O
return	O
grad_iterator_current	function
(	O
ip	pointer
)	O
;	O
}	O
static	O
void	O
_iterator_advance	function
(	O
grad_iterator_t	struct
*	O
ip	pointer
,	O
struct	O
grad_list_entry	struct
*	O
e	pointer
)	O
{	O
for	O
(	O
;	O
ip	pointer
;	O
ip	pointer
=	O
ip	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
ip	pointer
->	O
cur	pointer
==	O
e	pointer
)	O
{	O
ip	pointer
->	O
cur	pointer
=	O
e	pointer
->	O
next	pointer
;	O
ip	pointer
->	O
advanced	int
++	O
;	O
}	O
}	O
}	O
void	O
*	O
grad_list_item	function
(	O
struct	O
grad_list	struct
*	O
list	pointer
,	O
size_t	long
n	long
)	O
{	O
struct	O
grad_list_entry	struct
*	O
p	pointer
;	O
if	O
(	O
!	O
list	pointer
||	O
n	long
>=	O
list	pointer
->	O
count	int
)	O
return	O
NULL	O
;	O
for	O
(	O
p	pointer
=	O
list	pointer
->	O
head	pointer
;	O
n	long
>	O
0	int
&&	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
,	O
n	long
--	O
)	O
;	O
return	O
p	pointer
->	O
data	pointer
;	O
}	O
size_t	long
grad_list_count	function
(	O
struct	O
grad_list	struct
*	O
list	pointer
)	O
{	O
if	O
(	O
!	O
list	pointer
)	O
return	O
0	int
;	O
return	O
list	pointer
->	O
count	int
;	O
}	O
void	O
grad_list_append	function
(	O
struct	O
grad_list	struct
*	O
list	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
grad_list_entry	struct
*	O
ep	pointer
;	O
if	O
(	O
!	O
list	pointer
)	O
return	O
;	O
ep	pointer
=	O
grad_emalloc	function
(	O
sizeof	O
(	O
*	O
ep	pointer
)	O
)	O
;	O
ep	pointer
->	O
next	pointer
=	O
NULL	O
;	O
ep	pointer
->	O
data	pointer
=	O
data	pointer
;	O
if	O
(	O
list	pointer
->	O
tail	pointer
)	O
list	pointer
->	O
tail	pointer
->	O
next	pointer
=	O
ep	pointer
;	O
else	O
list	pointer
->	O
head	pointer
=	O
ep	pointer
;	O
list	pointer
->	O
tail	pointer
=	O
ep	pointer
;	O
list	pointer
->	O
count	int
++	O
;	O
}	O
void	O
grad_list_prepend	function
(	O
struct	O
grad_list	struct
*	O
list	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
grad_list_entry	struct
*	O
ep	pointer
;	O
if	O
(	O
!	O
list	pointer
)	O
return	O
;	O
ep	pointer
=	O
grad_emalloc	function
(	O
sizeof	O
(	O
*	O
ep	pointer
)	O
)	O
;	O
ep	pointer
->	O
data	pointer
=	O
data	pointer
;	O
ep	pointer
->	O
next	pointer
=	O
list	pointer
->	O
head	pointer
;	O
list	pointer
->	O
head	pointer
=	O
ep	pointer
;	O
if	O
(	O
!	O
list	pointer
->	O
tail	pointer
)	O
list	pointer
->	O
tail	pointer
=	O
list	pointer
->	O
head	pointer
;	O
list	pointer
->	O
count	int
++	O
;	O
}	O
static	O
int	O
cmp_ptr	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
return	O
a	pointer
!=	O
b	pointer
;	O
}	O
void	O
*	O
grad_list_remove	function
(	O
struct	O
grad_list	struct
*	O
list	pointer
,	O
void	O
*	O
data	pointer
,	O
list_comp_t	pointer
cmp	pointer
)	O
{	O
struct	O
grad_list_entry	struct
*	O
p	pointer
,	O
*	O
prev	pointer
;	O
if	O
(	O
!	O
list	pointer
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
list	pointer
->	O
head	pointer
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
cmp	pointer
)	O
cmp	pointer
=	O
cmp_ptr	function
;	O
for	O
(	O
p	pointer
=	O
list	pointer
->	O
head	pointer
,	O
prev	pointer
=	O
NULL	O
;	O
p	pointer
;	O
prev	pointer
=	O
p	pointer
,	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
if	O
(	O
cmp	pointer
(	O
p	pointer
->	O
data	pointer
,	O
data	pointer
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
0	int
;	O
_iterator_advance	function
(	O
list	pointer
->	O
itr	pointer
,	O
p	pointer
)	O
;	O
if	O
(	O
p	pointer
==	O
list	pointer
->	O
head	pointer
)	O
{	O
list	pointer
->	O
head	pointer
=	O
list	pointer
->	O
head	pointer
->	O
next	pointer
;	O
if	O
(	O
!	O
list	pointer
->	O
head	pointer
)	O
list	pointer
->	O
tail	pointer
=	O
NULL	O
;	O
}	O
else	O
prev	pointer
->	O
next	pointer
=	O
p	pointer
->	O
next	pointer
;	O
if	O
(	O
p	pointer
==	O
list	pointer
->	O
tail	pointer
)	O
list	pointer
->	O
tail	pointer
=	O
prev	pointer
;	O
grad_free	function
(	O
p	pointer
)	O
;	O
list	pointer
->	O
count	int
--	O
;	O
return	O
data	pointer
;	O
}	O
void	O
grad_list_iterate	function
(	O
struct	O
grad_list	struct
*	O
list	pointer
,	O
list_iterator_t	pointer
func	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
grad_iterator_t	struct
itr	pointer
;	O
void	O
*	O
p	pointer
;	O
if	O
(	O
!	O
list	pointer
)	O
return	O
;	O
grad_iterator_attach	function
(	O
&	O
itr	pointer
,	O
list	pointer
)	O
;	O
for	O
(	O
p	pointer
=	O
grad_iterator_first	function
(	O
&	O
itr	pointer
)	O
;	O
p	pointer
;	O
p	pointer
=	O
grad_iterator_next	function
(	O
&	O
itr	pointer
)	O
)	O
{	O
if	O
(	O
func	pointer
(	O
p	pointer
,	O
data	pointer
)	O
)	O
break	O
;	O
}	O
grad_iterator_detach	function
(	O
&	O
itr	pointer
)	O
;	O
}	O
void	O
*	O
grad_list_locate	function
(	O
struct	O
grad_list	struct
*	O
list	pointer
,	O
void	O
*	O
data	pointer
,	O
list_comp_t	pointer
cmp	pointer
)	O
{	O
struct	O
grad_list_entry	struct
*	O
cur	pointer
;	O
if	O
(	O
!	O
list	pointer
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
cmp	pointer
)	O
cmp	pointer
=	O
cmp_ptr	function
;	O
for	O
(	O
cur	pointer
=	O
list	pointer
->	O
head	pointer
;	O
cur	pointer
;	O
cur	pointer
=	O
cur	pointer
->	O
next	pointer
)	O
if	O
(	O
cmp	pointer
(	O
cur	pointer
->	O
data	pointer
,	O
data	pointer
)	O
==	O
0	int
)	O
break	O
;	O
return	O
cur	pointer
?	O
cur	pointer
->	O
data	pointer
:	O
NULL	O
;	O
}	O
int	O
grad_list_insert_sorted	function
(	O
struct	O
grad_list	struct
*	O
list	pointer
,	O
void	O
*	O
data	pointer
,	O
list_comp_t	pointer
cmp	pointer
)	O
{	O
struct	O
grad_list_entry	struct
*	O
cur	pointer
,	O
*	O
prev	pointer
;	O
if	O
(	O
!	O
list	pointer
)	O
return	O
-	O
1	int
;	O
if	O
(	O
!	O
cmp	pointer
)	O
return	O
-	O
1	int
;	O
for	O
(	O
cur	pointer
=	O
list	pointer
->	O
head	pointer
,	O
prev	pointer
=	O
NULL	O
;	O
cur	pointer
;	O
prev	pointer
=	O
cur	pointer
,	O
cur	pointer
=	O
cur	pointer
->	O
next	pointer
)	O
if	O
(	O
cmp	pointer
(	O
cur	pointer
->	O
data	pointer
,	O
data	pointer
)	O
>	O
0	int
)	O
break	O
;	O
if	O
(	O
!	O
prev	pointer
)	O
{	O
grad_list_prepend	function
(	O
list	pointer
,	O
data	pointer
)	O
;	O
}	O
else	O
if	O
(	O
!	O
cur	pointer
)	O
{	O
grad_list_append	function
(	O
list	pointer
,	O
data	pointer
)	O
;	O
}	O
else	O
{	O
struct	O
grad_list_entry	struct
*	O
ep	pointer
=	O
grad_emalloc	function
(	O
sizeof	O
(	O
*	O
ep	pointer
)	O
)	O
;	O
ep	pointer
->	O
data	pointer
=	O
data	pointer
;	O
ep	pointer
->	O
next	pointer
=	O
cur	pointer
;	O
list	pointer
->	O
count	int
++	O
;	O
prev	pointer
->	O
next	pointer
=	O
ep	pointer
;	O
}	O
return	O
0	int
;	O
}	O
