char	O
ldflags_docstring	array
[	O
]	O
=	O
N_	O
(	O
"list libraries required to link"	pointer
)	O
;	O
static	O
char	O
ldflags_args_doc	array
[	O
]	O
=	O
N_	O
(	O
"KEYWORD [KEYWORD...]"	pointer
)	O
;	O
struct	O
lib_descr	struct
{	O
char	O
*	O
name	pointer
;	O
char	O
*	O
libname	pointer
;	O
int	O
weight	int
;	O
int	O
flags	int
;	O
}	O
lib_descr	struct
[	O
]	O
=	O
{	O
{	O
"mbox"	pointer
,	O
"-lmu_mbox"	pointer
,	O
0	int
}	O
,	O
{	O
"dotmail"	pointer
,	O
"-lmu_dotmail"	pointer
,	O
0	int
}	O
,	O
{	O
"mh"	pointer
,	O
"-lmu_mh"	pointer
,	O
0	int
}	O
,	O
{	O
"maildir"	pointer
,	O
"-lmu_maildir"	pointer
,	O
0	int
}	O
,	O
{	O
"imap"	pointer
,	O
"-lmu_imap"	pointer
,	O
0	int
}	O
,	O
{	O
"imap"	pointer
,	O
NEEDAUTH	O
,	O
2	int
}	O
,	O
{	O
"pop"	pointer
,	O
"-lmu_pop"	pointer
,	O
0	int
}	O
,	O
{	O
"pop"	pointer
,	O
NEEDAUTH	O
,	O
2	int
}	O
,	O
{	O
"mailer"	pointer
,	O
"-lmu_mailer"	pointer
,	O
0	int
}	O
,	O
{	O
"sieve"	pointer
,	O
"-lmu_sieve"	pointer
,	O
0	int
,	O
NOTALL	int
}	O
,	O
{	O
"auth"	pointer
,	O
"-lmu_auth "	pointer
AUTHLIBS	O
,	O
2	int
}	O
,	O
{	O
"compat"	pointer
,	O
NULL	O
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"cfg"	pointer
,	O
NULL	O
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"argp"	pointer
,	O
NULL	O
,	O
0	int
,	O
0	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
struct	O
lib_entry	struct
{	O
int	O
level	int
;	O
char	O
*	O
ptr	pointer
;	O
}	O
lib_entry	struct
[	O
16	int
]	O
;	O
int	O
nentry	int
;	O
void	O
add_entry	function
(	O
int	O
level	int
,	O
char	O
*	O
ptr	pointer
)	O
{	O
int	O
i	long
;	O
if	O
(	O
!	O
ptr	pointer
||	O
!	O
*	O
ptr	pointer
)	O
return	O
;	O
if	O
(	O
nentry	int
>=	O
sizeof	O
(	O
lib_entry	struct
)	O
/	O
sizeof	O
(	O
lib_entry	struct
[	O
0	int
]	O
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"too many arguments"	pointer
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nentry	int
;	O
i	long
++	O
)	O
if	O
(	O
strcmp	function
(	O
lib_entry	struct
[	O
i	long
]	O
.	O
ptr	pointer
,	O
ptr	pointer
)	O
==	O
0	int
)	O
return	O
;	O
lib_entry	struct
[	O
nentry	int
]	O
.	O
level	int
=	O
level	int
;	O
lib_entry	struct
[	O
nentry	int
]	O
.	O
ptr	pointer
=	O
ptr	pointer
;	O
nentry	int
++	O
;	O
}	O
void	O
sort_entries	function
(	O
void	O
)	O
{	O
int	O
j	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
nentry	int
;	O
j	int
++	O
)	O
{	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
j	int
;	O
i	long
<	O
nentry	int
;	O
i	long
++	O
)	O
if	O
(	O
lib_entry	struct
[	O
j	int
]	O
.	O
level	int
>	O
lib_entry	struct
[	O
i	long
]	O
.	O
level	int
)	O
{	O
struct	O
lib_entry	struct
tmp	struct
;	O
tmp	struct
=	O
lib_entry	struct
[	O
i	long
]	O
;	O
lib_entry	struct
[	O
i	long
]	O
=	O
lib_entry	struct
[	O
j	int
]	O
;	O
lib_entry	struct
[	O
j	int
]	O
=	O
tmp	struct
;	O
}	O
}	O
}	O
int	O
main	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
j	int
;	O
mu_action_getopt	function
(	O
&	O
argc	long
,	O
&	O
argv	pointer
,	O
NULL	O
,	O
ldflags_docstring	array
,	O
ldflags_args_doc	array
)	O
;	O
add_entry	function
(	O
-	O
100	int
,	O
LINK_FLAGS	O
)	O
;	O
add_entry	function
(	O
100	int
,	O
LINK_POSTFLAGS	O
)	O
;	O
add_entry	function
(	O
8	int
,	O
"-lmailutils"	pointer
)	O
;	O
if	O
(	O
sizeof	O
(	O
I18NLIBS	O
)	O
>	O
1	int
)	O
add_entry	function
(	O
10	int
,	O
I18NLIBS	O
)	O
;	O
for	O
(	O
;	O
argc	long
>	O
0	int
;	O
argc	long
--	O
,	O
argv	pointer
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
"all"	pointer
)	O
==	O
0	int
)	O
{	O
struct	O
lib_descr	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
lib_descr	struct
;	O
p	pointer
->	O
name	pointer
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
p	pointer
->	O
flags	int
&	O
NOTALL	int
)	O
continue	O
;	O
add_entry	function
(	O
p	pointer
->	O
weight	int
,	O
p	pointer
->	O
libname	pointer
)	O
;	O
}	O
}	O
else	O
{	O
struct	O
lib_descr	struct
*	O
p	pointer
;	O
int	O
found	int
=	O
0	int
;	O
for	O
(	O
p	pointer
=	O
lib_descr	struct
;	O
p	pointer
->	O
name	pointer
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
mu_c_strcasecmp	function
(	O
p	pointer
->	O
name	pointer
,	O
argv	pointer
[	O
0	int
]	O
)	O
==	O
0	int
)	O
{	O
add_entry	function
(	O
p	pointer
->	O
weight	int
,	O
p	pointer
->	O
libname	pointer
)	O
;	O
found	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
!	O
found	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"unknown keyword: %s"	pointer
)	O
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
return	O
1	int
;	O
}	O
}	O
}	O
sort_entries	function
(	O
)	O
;	O
mu_printf	function
(	O
"%s"	pointer
,	O
lib_entry	struct
[	O
0	int
]	O
.	O
ptr	pointer
)	O
;	O
for	O
(	O
j	int
=	O
1	int
;	O
j	int
<	O
nentry	int
;	O
j	int
++	O
)	O
mu_printf	function
(	O
" %s"	pointer
,	O
lib_entry	struct
[	O
j	int
]	O
.	O
ptr	pointer
)	O
;	O
mu_printf	function
(	O
"\n"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
