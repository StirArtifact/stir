static	O
double	O
ldlt_norm1	function
(	O
const	O
gsl_matrix	struct
*	O
A	pointer
)	O
;	O
static	O
int	O
ldlt_Ainv	function
(	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
gsl_vector	struct
*	O
x	double
,	O
void	O
*	O
params	pointer
)	O
;	O
int	O
gsl_linalg_ldlt_decomp	function
(	O
gsl_matrix	struct
*	O
A	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"LDLT decomposition requires square matrix"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
,	O
j	long
;	O
double	O
a00	double
,	O
anorm	double
;	O
gsl_vector_view	struct
work	pointer
,	O
v	pointer
;	O
if	O
(	O
N	int
==	O
1	int
)	O
return	O
GSL_SUCCESS	int
;	O
anorm	double
=	O
ldlt_norm1	function
(	O
A	pointer
)	O
;	O
a00	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
a00	double
==	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix is singular"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
v	pointer
=	O
gsl_matrix_subcolumn	function
(	O
A	pointer
,	O
0	int
,	O
1	int
,	O
N	int
-	O
1	int
)	O
;	O
gsl_vector_scale	function
(	O
&	O
v	pointer
.	O
vector	struct
,	O
1.0	int
/	O
a00	double
)	O
;	O
work	pointer
=	O
gsl_matrix_subrow	function
(	O
A	pointer
,	O
0	int
,	O
1	int
,	O
N	int
-	O
1	int
)	O
;	O
for	O
(	O
j	long
=	O
1	int
;	O
j	long
<	O
N	int
;	O
++	O
j	long
)	O
{	O
gsl_vector_view	struct
w	pointer
=	O
gsl_vector_subvector	function
(	O
&	O
work	pointer
.	O
vector	struct
,	O
0	int
,	O
j	long
)	O
;	O
double	O
ajj	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
j	long
,	O
j	long
)	O
;	O
double	O
dval	double
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
j	long
;	O
++	O
i	long
)	O
{	O
double	O
aii	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
i	long
,	O
i	long
)	O
;	O
double	O
aji	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
j	long
,	O
i	long
)	O
;	O
gsl_vector_set	function
(	O
&	O
w	pointer
.	O
vector	struct
,	O
i	long
,	O
aji	double
*	O
aii	double
)	O
;	O
}	O
v	pointer
=	O
gsl_matrix_subrow	function
(	O
A	pointer
,	O
j	long
,	O
0	int
,	O
j	long
)	O
;	O
gsl_blas_ddot	function
(	O
&	O
v	pointer
.	O
vector	struct
,	O
&	O
w	pointer
.	O
vector	struct
,	O
&	O
dval	double
)	O
;	O
ajj	double
-=	O
dval	double
;	O
if	O
(	O
ajj	double
==	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix is singular"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
gsl_matrix_set	function
(	O
A	pointer
,	O
j	long
,	O
j	long
,	O
ajj	double
)	O
;	O
if	O
(	O
j	long
<	O
N	int
-	O
1	int
)	O
{	O
double	O
ajjinv	double
=	O
1.0	int
/	O
ajj	double
;	O
gsl_matrix_view	struct
m	pointer
=	O
gsl_matrix_submatrix	function
(	O
A	pointer
,	O
j	long
+	O
1	int
,	O
0	int
,	O
N	int
-	O
j	long
-	O
1	int
,	O
j	long
)	O
;	O
v	pointer
=	O
gsl_matrix_subcolumn	function
(	O
A	pointer
,	O
j	long
,	O
j	long
+	O
1	int
,	O
N	int
-	O
j	long
-	O
1	int
)	O
;	O
gsl_blas_dgemv	function
(	O
CblasNoTrans	int
,	O
-	O
ajjinv	double
,	O
&	O
m	pointer
.	O
matrix	struct
,	O
&	O
w	pointer
.	O
vector	struct
,	O
ajjinv	double
,	O
&	O
v	pointer
.	O
vector	struct
)	O
;	O
}	O
}	O
gsl_matrix_set	function
(	O
A	pointer
,	O
0	int
,	O
N	int
-	O
1	int
,	O
anorm	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_ldlt_solve	function
(	O
const	O
gsl_matrix	struct
*	O
LDLT	pointer
,	O
const	O
gsl_vector	struct
*	O
b	double
,	O
gsl_vector	struct
*	O
x	double
)	O
{	O
if	O
(	O
LDLT	pointer
->	O
size1	long
!=	O
LDLT	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"LDLT matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
LDLT	pointer
->	O
size1	long
!=	O
b	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match b size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
LDLT	pointer
->	O
size2	long
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
gsl_vector_memcpy	function
(	O
x	double
,	O
b	double
)	O
;	O
status	int
=	O
gsl_linalg_ldlt_svx	function
(	O
LDLT	pointer
,	O
x	double
)	O
;	O
return	O
status	int
;	O
}	O
}	O
int	O
gsl_linalg_ldlt_svx	function
(	O
const	O
gsl_matrix	struct
*	O
LDLT	pointer
,	O
gsl_vector	struct
*	O
x	double
)	O
{	O
if	O
(	O
LDLT	pointer
->	O
size1	long
!=	O
LDLT	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"LDLT matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
LDLT	pointer
->	O
size2	long
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_vector_const_view	struct
diag	pointer
=	O
gsl_matrix_const_diagonal	function
(	O
LDLT	pointer
)	O
;	O
gsl_blas_dtrsv	function
(	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasUnit	int
,	O
LDLT	pointer
,	O
x	double
)	O
;	O
gsl_vector_div	function
(	O
x	double
,	O
&	O
diag	pointer
.	O
vector	struct
)	O
;	O
gsl_blas_dtrsv	function
(	O
CblasLower	int
,	O
CblasTrans	int
,	O
CblasUnit	int
,	O
LDLT	pointer
,	O
x	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_ldlt_rcond	function
(	O
const	O
gsl_matrix	struct
*	O
LDLT	pointer
,	O
double	O
*	O
rcond	pointer
,	O
gsl_vector	struct
*	O
work	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
LDLT	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
LDLT	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"LDLT matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
work	pointer
->	O
size	long
!=	O
3	int
*	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"work vector must have length 3*N"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
double	O
Anorm	double
;	O
double	O
Ainvnorm	pointer
;	O
if	O
(	O
N	int
==	O
1	int
)	O
Anorm	double
=	O
fabs	function
(	O
gsl_matrix_get	function
(	O
LDLT	pointer
,	O
0	int
,	O
0	int
)	O
)	O
;	O
else	O
Anorm	double
=	O
gsl_matrix_get	function
(	O
LDLT	pointer
,	O
0	int
,	O
N	int
-	O
1	int
)	O
;	O
*	O
rcond	pointer
=	O
0.0	int
;	O
if	O
(	O
Anorm	double
==	O
0.0	int
)	O
return	O
GSL_SUCCESS	int
;	O
status	int
=	O
gsl_linalg_invnorm1	function
(	O
N	int
,	O
ldlt_Ainv	function
,	O
(	O
void	O
*	O
)	O
LDLT	pointer
,	O
&	O
Ainvnorm	pointer
,	O
work	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
Ainvnorm	pointer
!=	O
0.0	int
)	O
*	O
rcond	pointer
=	O
(	O
1.0	int
/	O
Anorm	double
)	O
/	O
Ainvnorm	pointer
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
double	O
ldlt_norm1	function
(	O
const	O
gsl_matrix	struct
*	O
A	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size1	long
;	O
double	O
max	double
=	O
0.0	int
;	O
size_t	long
i	long
,	O
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
N	int
;	O
++	O
j	long
)	O
{	O
gsl_vector_const_view	struct
v	pointer
=	O
gsl_matrix_const_subcolumn	function
(	O
A	pointer
,	O
j	long
,	O
j	long
,	O
N	int
-	O
j	long
)	O
;	O
double	O
sum	double
=	O
gsl_blas_dasum	function
(	O
&	O
v	pointer
.	O
vector	struct
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
j	long
;	O
++	O
i	long
)	O
{	O
double	O
Aij	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
i	long
,	O
j	long
)	O
;	O
sum	double
+=	O
fabs	function
(	O
Aij	double
)	O
;	O
}	O
if	O
(	O
sum	double
>	O
max	double
)	O
max	double
=	O
sum	double
;	O
}	O
return	O
max	double
;	O
}	O
static	O
int	O
ldlt_Ainv	function
(	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
gsl_vector	struct
*	O
x	double
,	O
void	O
*	O
params	pointer
)	O
{	O
int	O
status	int
;	O
gsl_matrix	struct
*	O
A	pointer
=	O
(	O
gsl_matrix	struct
*	O
)	O
params	pointer
;	O
gsl_vector_const_view	struct
diag	pointer
=	O
gsl_matrix_const_diagonal	function
(	O
A	pointer
)	O
;	O
(	O
void	O
)	O
TransA	enum
;	O
status	int
=	O
gsl_blas_dtrsv	function
(	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasUnit	int
,	O
A	pointer
,	O
x	double
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
gsl_vector_div	function
(	O
x	double
,	O
&	O
diag	pointer
.	O
vector	struct
)	O
;	O
status	int
=	O
gsl_blas_dtrsv	function
(	O
CblasLower	int
,	O
CblasTrans	int
,	O
CblasUnit	int
,	O
A	pointer
,	O
x	double
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
