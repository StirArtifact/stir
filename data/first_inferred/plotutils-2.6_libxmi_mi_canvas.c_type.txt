static	O
miPixmap	struct
*	O
miNewPixmap	function
(	O
unsigned	O
int	O
width	int
,	O
unsigned	O
int	O
height	int
,	O
miPixel	int
initPixel	int
)	O
;	O
static	O
miPixmap	struct
*	O
miCopyPixmap	function
(	O
const	O
miPixmap	struct
*	O
pPixmap	pointer
)	O
;	O
static	O
void	O
miDeletePixmap	function
(	O
miPixmap	struct
*	O
pPixmap	pointer
)	O
;	O
static	O
miBitmap	struct
*	O
miCopyBitmap	function
(	O
const	O
miBitmap	struct
*	O
pBitmap	pointer
)	O
;	O
static	O
void	O
miDeleteBitmap	function
(	O
miBitmap	struct
*	O
pBitmap	pointer
)	O
;	O
static	O
void	O
miPaintCanvas	function
(	O
miCanvas	struct
*	O
canvas	pointer
,	O
miPixel	int
pixel	int
,	O
int	O
n	int
,	O
const	O
miPoint	struct
*	O
ppt	pointer
,	O
const	O
unsigned	O
int	O
*	O
pwidth	pointer
,	O
miPoint	struct
offset	int
)	O
;	O
miCanvas	struct
*	O
miNewCanvas	function
(	O
unsigned	O
int	O
width	int
,	O
unsigned	O
int	O
height	int
,	O
miPixel	int
initPixel	int
)	O
{	O
miCanvas	struct
*	O
new_pCanvas	pointer
;	O
if	O
(	O
width	int
<	O
1	int
||	O
height	int
<	O
1	int
)	O
return	O
(	O
miCanvas	struct
*	O
)	O
NULL	O
;	O
new_pCanvas	pointer
=	O
(	O
miCanvas	struct
*	O
)	O
mi_xmalloc	O
(	O
sizeof	O
(	O
miCanvas	struct
)	O
)	O
;	O
new_pCanvas	pointer
->	O
drawable	pointer
=	O
miNewPixmap	function
(	O
width	int
,	O
height	int
,	O
initPixel	int
)	O
;	O
new_pCanvas	pointer
->	O
texture	int
=	O
(	O
miPixmap	struct
*	O
)	O
NULL	O
;	O
new_pCanvas	pointer
->	O
stipple	pointer
=	O
(	O
miBitmap	struct
*	O
)	O
NULL	O
;	O
new_pCanvas	pointer
->	O
pixelMerge2	pointer
=	O
(	O
miPixelMerge2	pointer
)	O
NULL	O
;	O
new_pCanvas	pointer
->	O
pixelMerge3	pointer
=	O
(	O
miPixelMerge3	pointer
)	O
NULL	O
;	O
return	O
new_pCanvas	pointer
;	O
}	O
miCanvas	struct
*	O
miCopyCanvas	function
(	O
const	O
miCanvas	struct
*	O
pCanvas	pointer
)	O
{	O
miCanvas	struct
*	O
new_pCanvas	pointer
;	O
if	O
(	O
pCanvas	pointer
==	O
(	O
const	O
miCanvas	struct
*	O
)	O
NULL	O
)	O
return	O
(	O
miCanvas	struct
*	O
)	O
NULL	O
;	O
new_pCanvas	pointer
=	O
(	O
miCanvas	struct
*	O
)	O
mi_xmalloc	O
(	O
sizeof	O
(	O
miCanvas	struct
)	O
)	O
;	O
new_pCanvas	pointer
->	O
drawable	pointer
=	O
miCopyPixmap	function
(	O
pCanvas	pointer
->	O
drawable	pointer
)	O
;	O
new_pCanvas	pointer
->	O
pixelMerge2	pointer
=	O
pCanvas	pointer
->	O
pixelMerge2	pointer
;	O
new_pCanvas	pointer
->	O
pixelMerge3	pointer
=	O
pCanvas	pointer
->	O
pixelMerge3	pointer
;	O
new_pCanvas	pointer
->	O
texture	int
=	O
miCopyPixmap	function
(	O
pCanvas	pointer
->	O
texture	int
)	O
;	O
new_pCanvas	pointer
->	O
stipple	pointer
=	O
miCopyBitmap	function
(	O
pCanvas	pointer
->	O
stipple	pointer
)	O
;	O
return	O
new_pCanvas	pointer
;	O
}	O
void	O
miDeleteCanvas	function
(	O
miCanvas	struct
*	O
pCanvas	pointer
)	O
{	O
if	O
(	O
pCanvas	pointer
==	O
(	O
miCanvas	struct
*	O
)	O
NULL	O
)	O
return	O
;	O
miDeletePixmap	function
(	O
pCanvas	pointer
->	O
drawable	pointer
)	O
;	O
miDeletePixmap	function
(	O
pCanvas	pointer
->	O
texture	int
)	O
;	O
miDeleteBitmap	function
(	O
pCanvas	pointer
->	O
stipple	pointer
)	O
;	O
free	function
(	O
pCanvas	pointer
)	O
;	O
}	O
static	O
miPixmap	struct
*	O
miNewPixmap	function
(	O
unsigned	O
int	O
width	int
,	O
unsigned	O
int	O
height	int
,	O
miPixel	int
initPixel	int
)	O
{	O
miPixmap	struct
*	O
new_pPixmap	pointer
;	O
miPixel	int
*	O
*	O
pixmap	pointer
;	O
int	O
i	int
,	O
j	int
;	O
new_pPixmap	pointer
=	O
(	O
miPixmap	struct
*	O
)	O
mi_xmalloc	O
(	O
sizeof	O
(	O
miPixmap	struct
)	O
)	O
;	O
pixmap	pointer
=	O
(	O
miPixel	int
*	O
*	O
)	O
mi_xmalloc	O
(	O
height	int
*	O
sizeof	O
(	O
miPixel	int
*	O
)	O
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
(	O
int	O
)	O
height	int
;	O
j	int
++	O
)	O
{	O
pixmap	pointer
[	O
j	int
]	O
=	O
(	O
miPixel	int
*	O
)	O
mi_xmalloc	O
(	O
width	int
*	O
sizeof	O
(	O
miPixel	int
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
int	O
)	O
width	int
;	O
i	int
++	O
)	O
pixmap	pointer
[	O
j	int
]	O
[	O
i	int
]	O
=	O
initPixel	int
;	O
}	O
new_pPixmap	pointer
->	O
pixmap	pointer
=	O
pixmap	pointer
;	O
new_pPixmap	pointer
->	O
width	int
=	O
width	int
;	O
new_pPixmap	pointer
->	O
height	int
=	O
height	int
;	O
return	O
new_pPixmap	pointer
;	O
}	O
static	O
miPixmap	struct
*	O
miCopyPixmap	function
(	O
const	O
miPixmap	struct
*	O
pPixmap	pointer
)	O
{	O
miPixmap	struct
*	O
new_pPixmap	pointer
;	O
miPixel	int
*	O
*	O
pixmap	pointer
;	O
miPixel	int
*	O
const	O
*	O
old_pixmap	pointer
;	O
int	O
i	int
,	O
j	int
;	O
if	O
(	O
pPixmap	pointer
==	O
(	O
const	O
miPixmap	struct
*	O
)	O
NULL	O
)	O
return	O
(	O
miPixmap	struct
*	O
)	O
NULL	O
;	O
new_pPixmap	pointer
=	O
(	O
miPixmap	struct
*	O
)	O
mi_xmalloc	O
(	O
sizeof	O
(	O
miPixmap	struct
)	O
)	O
;	O
pixmap	pointer
=	O
(	O
miPixel	int
*	O
*	O
)	O
mi_xmalloc	O
(	O
pPixmap	pointer
->	O
height	int
*	O
sizeof	O
(	O
miPixel	int
*	O
)	O
)	O
;	O
old_pixmap	pointer
=	O
pPixmap	pointer
->	O
pixmap	pointer
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
(	O
int	O
)	O
(	O
pPixmap	pointer
->	O
height	int
)	O
;	O
j	int
++	O
)	O
{	O
pixmap	pointer
[	O
j	int
]	O
=	O
(	O
miPixel	int
*	O
)	O
mi_xmalloc	O
(	O
pPixmap	pointer
->	O
width	int
*	O
sizeof	O
(	O
miPixel	int
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
int	O
)	O
(	O
pPixmap	pointer
->	O
width	int
)	O
;	O
i	int
++	O
)	O
pixmap	pointer
[	O
j	int
]	O
[	O
i	int
]	O
=	O
old_pixmap	pointer
[	O
j	int
]	O
[	O
i	int
]	O
;	O
}	O
new_pPixmap	pointer
->	O
pixmap	pointer
=	O
pixmap	pointer
;	O
new_pPixmap	pointer
->	O
width	int
=	O
pPixmap	pointer
->	O
width	int
;	O
new_pPixmap	pointer
->	O
height	int
=	O
pPixmap	pointer
->	O
height	int
;	O
return	O
new_pPixmap	pointer
;	O
}	O
static	O
void	O
miDeletePixmap	function
(	O
miPixmap	struct
*	O
pPixmap	pointer
)	O
{	O
int	O
j	int
;	O
if	O
(	O
pPixmap	pointer
==	O
(	O
miPixmap	struct
*	O
)	O
NULL	O
)	O
return	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
(	O
int	O
)	O
(	O
pPixmap	pointer
->	O
height	int
)	O
;	O
j	int
++	O
)	O
free	function
(	O
pPixmap	pointer
->	O
pixmap	pointer
[	O
j	int
]	O
)	O
;	O
free	function
(	O
pPixmap	pointer
->	O
pixmap	pointer
)	O
;	O
free	function
(	O
pPixmap	pointer
)	O
;	O
}	O
static	O
miBitmap	struct
*	O
miCopyBitmap	function
(	O
const	O
miBitmap	struct
*	O
pBitmap	pointer
)	O
{	O
miBitmap	struct
*	O
new_pBitmap	pointer
;	O
int	O
*	O
*	O
bitmap	pointer
;	O
int	O
*	O
const	O
*	O
old_bitmap	pointer
;	O
int	O
i	int
,	O
j	int
;	O
if	O
(	O
pBitmap	pointer
==	O
(	O
const	O
miBitmap	struct
*	O
)	O
NULL	O
)	O
return	O
(	O
miBitmap	struct
*	O
)	O
NULL	O
;	O
new_pBitmap	pointer
=	O
(	O
miBitmap	struct
*	O
)	O
mi_xmalloc	O
(	O
sizeof	O
(	O
miBitmap	struct
)	O
)	O
;	O
bitmap	pointer
=	O
(	O
int	O
*	O
*	O
)	O
mi_xmalloc	O
(	O
pBitmap	pointer
->	O
height	int
*	O
sizeof	O
(	O
int	O
*	O
)	O
)	O
;	O
old_bitmap	pointer
=	O
pBitmap	pointer
->	O
bitmap	pointer
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
(	O
int	O
)	O
(	O
pBitmap	pointer
->	O
height	int
)	O
;	O
j	int
++	O
)	O
{	O
bitmap	pointer
[	O
j	int
]	O
=	O
(	O
int	O
*	O
)	O
mi_xmalloc	O
(	O
pBitmap	pointer
->	O
width	int
*	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
int	O
)	O
(	O
pBitmap	pointer
->	O
width	int
)	O
;	O
i	int
++	O
)	O
bitmap	pointer
[	O
j	int
]	O
[	O
i	int
]	O
=	O
old_bitmap	pointer
[	O
j	int
]	O
[	O
i	int
]	O
;	O
}	O
new_pBitmap	pointer
->	O
bitmap	pointer
=	O
bitmap	pointer
;	O
new_pBitmap	pointer
->	O
width	int
=	O
pBitmap	pointer
->	O
width	int
;	O
new_pBitmap	pointer
->	O
height	int
=	O
pBitmap	pointer
->	O
height	int
;	O
return	O
new_pBitmap	pointer
;	O
}	O
static	O
void	O
miDeleteBitmap	function
(	O
miBitmap	struct
*	O
pBitmap	pointer
)	O
{	O
int	O
j	int
;	O
if	O
(	O
pBitmap	pointer
==	O
(	O
miBitmap	struct
*	O
)	O
NULL	O
)	O
return	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
(	O
int	O
)	O
(	O
pBitmap	pointer
->	O
height	int
)	O
;	O
j	int
++	O
)	O
free	function
(	O
pBitmap	pointer
->	O
bitmap	pointer
[	O
j	int
]	O
)	O
;	O
free	function
(	O
pBitmap	pointer
->	O
bitmap	pointer
)	O
;	O
free	function
(	O
pBitmap	pointer
)	O
;	O
}	O
void	O
miSetPixelMerge2	function
(	O
miCanvas	struct
*	O
pCanvas	pointer
,	O
miPixelMerge2	pointer
pixelMerge2	pointer
)	O
{	O
if	O
(	O
pCanvas	pointer
==	O
(	O
miCanvas	struct
*	O
)	O
NULL	O
)	O
return	O
;	O
pCanvas	pointer
->	O
pixelMerge2	pointer
=	O
pixelMerge2	pointer
;	O
}	O
void	O
miSetPixelMerge3	function
(	O
miCanvas	struct
*	O
pCanvas	pointer
,	O
miPixelMerge3	pointer
pixelMerge3	pointer
)	O
{	O
if	O
(	O
pCanvas	pointer
==	O
(	O
miCanvas	struct
*	O
)	O
NULL	O
)	O
return	O
;	O
pCanvas	pointer
->	O
pixelMerge3	pointer
=	O
pixelMerge3	pointer
;	O
}	O
void	O
miSetCanvasStipple	function
(	O
miCanvas	struct
*	O
pCanvas	pointer
,	O
const	O
miBitmap	struct
*	O
pstipple	pointer
,	O
miPoint	struct
stippleOrigin	struct
)	O
{	O
if	O
(	O
pCanvas	pointer
==	O
(	O
miCanvas	struct
*	O
)	O
NULL	O
)	O
return	O
;	O
miDeleteBitmap	function
(	O
pCanvas	pointer
->	O
stipple	pointer
)	O
;	O
pCanvas	pointer
->	O
stipple	pointer
=	O
miCopyBitmap	function
(	O
pstipple	pointer
)	O
;	O
pCanvas	pointer
->	O
stippleOrigin	struct
=	O
stippleOrigin	struct
;	O
}	O
void	O
miSetCanvasTexture	function
(	O
miCanvas	struct
*	O
pCanvas	pointer
,	O
const	O
miPixmap	struct
*	O
pTexture	pointer
,	O
miPoint	struct
textureOrigin	struct
)	O
{	O
if	O
(	O
pCanvas	pointer
==	O
(	O
miCanvas	struct
*	O
)	O
NULL	O
)	O
return	O
;	O
miDeletePixmap	function
(	O
pCanvas	pointer
->	O
texture	int
)	O
;	O
pCanvas	pointer
->	O
texture	int
=	O
miCopyPixmap	function
(	O
pTexture	pointer
)	O
;	O
pCanvas	pointer
->	O
textureOrigin	struct
=	O
textureOrigin	struct
;	O
}	O
static	O
void	O
miPaintCanvas	function
(	O
miCanvas	struct
*	O
canvas	pointer
,	O
miPixel	int
pixel	int
,	O
int	O
n	int
,	O
const	O
miPoint	struct
*	O
ppt	pointer
,	O
const	O
unsigned	O
int	O
*	O
pwidth	pointer
,	O
miPoint	struct
offset	int
)	O
{	O
int	O
i	int
;	O
int	O
xleft	int
,	O
xright	int
,	O
ybottom	int
,	O
ytop	int
;	O
unsigned	O
int	O
stippleWidth	int
=	O
0	int
,	O
stippleHeight	int
=	O
0	int
;	O
unsigned	O
int	O
textureWidth	int
=	O
0	int
,	O
textureHeight	int
=	O
0	int
;	O
int	O
stippleXOrigin	int
=	O
0	int
,	O
stippleYOrigin	int
=	O
0	int
;	O
int	O
textureXOrigin	int
=	O
0	int
,	O
textureYOrigin	int
=	O
0	int
;	O
int	O
xstart	int
,	O
xend	int
,	O
xstart_clip	int
,	O
xend_clip	int
,	O
xoffset	int
,	O
yoffset	int
,	O
x	int
,	O
y	int
;	O
unsigned	O
int	O
width	int
;	O
const	O
miCanvas	struct
*	O
pCanvas	pointer
;	O
miPixelMerge2	pointer
pixelMerge2	pointer
;	O
miPixelMerge3	pointer
pixelMerge3	pointer
;	O
pCanvas	pointer
=	O
canvas	pointer
;	O
xoffset	int
=	O
offset	int
.	O
x	int
;	O
yoffset	int
=	O
offset	int
.	O
y	int
;	O
MI_GET_CANVAS_DRAWABLE_BOUNDS	O
(	O
pCanvas	pointer
,	O
xleft	int
,	O
ytop	int
,	O
xright	int
,	O
ybottom	int
)	O
if	O
(	O
ppt	pointer
[	O
0	int
]	O
.	O
y	int
+	O
yoffset	int
>	O
ybottom	int
||	O
ppt	pointer
[	O
n	int
-	O
1	int
]	O
.	O
y	int
+	O
yoffset	int
<	O
ytop	int
)	O
return	O
;	O
pixelMerge2	pointer
=	O
pCanvas	pointer
->	O
pixelMerge2	pointer
;	O
pixelMerge3	pointer
=	O
pCanvas	pointer
->	O
pixelMerge3	pointer
;	O
if	O
(	O
pCanvas	pointer
->	O
stipple	pointer
)	O
{	O
stippleWidth	int
=	O
pCanvas	pointer
->	O
stipple	pointer
->	O
width	int
;	O
stippleHeight	int
=	O
pCanvas	pointer
->	O
stipple	pointer
->	O
height	int
;	O
stippleXOrigin	int
=	O
pCanvas	pointer
->	O
stippleOrigin	struct
.	O
x	int
;	O
stippleYOrigin	int
=	O
pCanvas	pointer
->	O
stippleOrigin	struct
.	O
y	int
;	O
while	O
(	O
stippleXOrigin	int
>	O
0	int
)	O
stippleXOrigin	int
-=	O
stippleWidth	int
;	O
while	O
(	O
stippleYOrigin	int
>	O
0	int
)	O
stippleYOrigin	int
-=	O
stippleHeight	int
;	O
}	O
if	O
(	O
pCanvas	pointer
->	O
texture	int
)	O
{	O
textureWidth	int
=	O
pCanvas	pointer
->	O
texture	int
->	O
width	int
;	O
textureHeight	int
=	O
pCanvas	pointer
->	O
texture	int
->	O
height	int
;	O
textureXOrigin	int
=	O
pCanvas	pointer
->	O
textureOrigin	struct
.	O
x	int
;	O
textureYOrigin	int
=	O
pCanvas	pointer
->	O
textureOrigin	struct
.	O
y	int
;	O
while	O
(	O
textureXOrigin	int
>	O
0	int
)	O
textureXOrigin	int
-=	O
textureWidth	int
;	O
while	O
(	O
textureYOrigin	int
>	O
0	int
)	O
textureYOrigin	int
-=	O
textureHeight	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
{	O
y	int
=	O
ppt	pointer
[	O
i	int
]	O
.	O
y	int
+	O
yoffset	int
;	O
if	O
(	O
y	int
>	O
ybottom	int
)	O
return	O
;	O
if	O
(	O
y	int
>=	O
ytop	int
)	O
{	O
width	int
=	O
pwidth	pointer
[	O
i	int
]	O
;	O
xstart	int
=	O
ppt	pointer
[	O
i	int
]	O
.	O
x	int
+	O
xoffset	int
;	O
xend	int
=	O
xstart	int
+	O
(	O
int	O
)	O
width	int
-	O
1	int
;	O
xstart_clip	int
=	O
IMAX	O
(	O
xstart	int
,	O
xleft	int
)	O
;	O
xend_clip	int
=	O
IMIN	O
(	O
xend	int
,	O
xright	int
)	O
;	O
for	O
(	O
x	int
=	O
xstart_clip	int
;	O
x	int
<=	O
xend_clip	int
;	O
x	int
++	O
)	O
{	O
miPixel	int
texturePixel	int
,	O
sourcePixel	int
;	O
bool	enum
have_texturePixel	enum
=	O
false	int
;	O
if	O
(	O
pCanvas	pointer
->	O
texture	int
)	O
{	O
texturePixel	int
=	O
pCanvas	pointer
->	O
texture	int
->	O
pixmap	pointer
[	O
(	O
y	int
-	O
textureYOrigin	int
)	O
%	O
textureHeight	int
]	O
[	O
(	O
x	int
-	O
textureXOrigin	int
)	O
%	O
textureWidth	int
]	O
;	O
have_texturePixel	enum
=	O
true	int
;	O
}	O
else	O
texturePixel	int
=	O
pixel	int
;	O
sourcePixel	int
=	O
pixel	int
;	O
if	O
(	O
pCanvas	pointer
->	O
stipple	pointer
==	O
(	O
miBitmap	struct
*	O
)	O
NULL	O
||	O
pCanvas	pointer
->	O
stipple	pointer
->	O
bitmap	pointer
[	O
(	O
y	int
-	O
stippleYOrigin	int
)	O
%	O
stippleHeight	int
]	O
[	O
(	O
x	int
-	O
stippleXOrigin	int
)	O
%	O
stippleWidth	int
]	O
!=	O
0	int
)	O
MI_MERGE_CANVAS_PIXEL	O
(	O
pCanvas	pointer
,	O
x	int
,	O
y	int
,	O
sourcePixel	int
,	O
texturePixel	int
,	O
have_texturePixel	enum
)	O
}	O
}	O
}	O
}	O
void	O
miCopyPaintedSetToCanvas	function
(	O
const	O
miPaintedSet	struct
*	O
paintedSet	pointer
,	O
miCanvas	struct
*	O
canvas	pointer
,	O
miPoint	struct
offset	int
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
paintedSet	pointer
->	O
ngroups	int
;	O
i	int
++	O
)	O
if	O
(	O
paintedSet	pointer
->	O
groups	pointer
[	O
i	int
]	O
->	O
group	pointer
[	O
0	int
]	O
.	O
count	int
>	O
0	int
)	O
miPaintCanvas	function
(	O
canvas	pointer
,	O
paintedSet	pointer
->	O
groups	pointer
[	O
i	int
]	O
->	O
pixel	int
,	O
paintedSet	pointer
->	O
groups	pointer
[	O
i	int
]	O
->	O
group	pointer
[	O
0	int
]	O
.	O
count	int
,	O
paintedSet	pointer
->	O
groups	pointer
[	O
i	int
]	O
->	O
group	pointer
[	O
0	int
]	O
.	O
points	pointer
,	O
paintedSet	pointer
->	O
groups	pointer
[	O
i	int
]	O
->	O
group	pointer
[	O
0	int
]	O
.	O
widths	pointer
,	O
offset	int
)	O
;	O
}	O
