int	O
xtVersion	int
=	O
XtSpecificationRelease	O
;	O
XtIntervalId	O
firstProgramXID	int
=	O
0	int
,	O
secondProgramXID	O
=	O
0	int
,	O
readGameXID	O
=	O
0	int
,	O
timerXID	O
=	O
0	int
,	O
blinkSquareXID	O
=	O
0	int
;	O
XtAppContext	O
appContext	int
;	O
Boolean	function
(	O
*	O
fileProc	pointer
)	O
(	O
char	O
*	O
name	pointer
)	O
;	O
FILE	struct
*	O
fromFirstProgFP	pointer
,	O
*	O
toFirstProgFP	pointer
,	O
*	O
fromSecondProgFP	pointer
,	O
*	O
toSecondProgFP	pointer
,	O
*	O
gameFileFP	pointer
,	O
*	O
lastMsgFP	pointer
;	O
int	O
currentMove	int
=	O
0	int
,	O
forwardMostMove	int
=	O
0	int
,	O
backwardMostMove	int
=	O
0	int
,	O
firstProgramPID	int
=	O
0	int
,	O
secondProgramPID	int
=	O
0	int
,	O
fromX	int
=	O
-	O
1	int
,	O
fromY	int
=	O
-	O
1	int
,	O
firstMove	int
=	O
True	O
,	O
flipView	int
=	O
False	O
,	O
xshogiDebug	int
=	O
True	O
,	O
commentUp	int
=	O
False	O
,	O
filenameUp	int
=	O
False	O
,	O
whitePlaysFirst	int
=	O
False	O
,	O
startedFromSetupPosition	int
=	O
False	O
,	O
searchTime	int
=	O
0	int
,	O
pmFromX	int
=	O
-	O
1	int
,	O
pmFromY	int
=	O
-	O
1	int
,	O
blackFlag	int
=	O
False	O
,	O
whiteFlag	int
=	O
False	O
,	O
maybeThinking	int
=	O
False	O
,	O
filemodeUp	int
=	O
False	O
;	O
int	O
at_least_gnushogi_1_2p03	int
=	O
False	O
;	O
int	O
firstSendTime	int
=	O
2	int
,	O
secondSendTime	int
=	O
2	int
;	O
MatchMode	O
matchMode	int
=	O
MatchFalse	O
;	O
GameMode	O
gameMode	int
=	O
BeginningOfGame	O
;	O
GameMode	O
lastGameMode	int
=	O
BeginningOfGame	O
;	O
GameMode	O
pausePreviousMode	int
=	O
BeginningOfGame	O
;	O
char	O
moveList	char
[	O
MAX_MOVES	O
]	O
[	O
MOVE_LEN	O
]	O
,	O
parseList	O
[	O
MAX_MOVES	O
]	O
[	O
MOVE_LEN	O
*	O
2	int
]	O
,	O
ptyname	O
[	O
24	int
]	O
,	O
*	O
shogiDir	O
,	O
*	O
programName	O
;	O
char	O
endMessage	char
[	O
MOVE_LEN	O
*	O
4	int
]	O
;	O
long	O
blackTimeRemaining	long
,	O
whiteTimeRemaining	long
,	O
timeControl	long
;	O
long	O
timeRemaining	array
[	O
2	int
]	O
[	O
MAX_MOVES	O
]	O
;	O
extern	O
char	O
currentMoveString	array
[	O
]	O
;	O
int	O
updateRemotePlayer	int
=	O
False	O
;	O
Catched	O
catches	int
[	O
MAX_MOVES	O
]	O
;	O
Widget	O
blackPieceMenu	int
,	O
whitePieceMenu	O
,	O
commentShell	O
;	O
XSetWindowAttributes	O
attr	int
;	O
char	O
catchedIndexToChar	array
[	O
8	int
]	O
=	O
{	O
'P'	O
,	O
'L'	O
,	O
'N'	O
,	O
'S'	O
,	O
'G'	O
,	O
'B'	O
,	O
'R'	O
,	O
'K'	O
}	O
;	O
ShogiSquare	O
catchedIndexToPiece	array
[	O
2	int
]	O
[	O
8	int
]	O
=	O
{	O
{	O
BlackPawn	O
,	O
BlackLance	O
,	O
BlackKnight	O
,	O
BlackSilver	O
,	O
BlackGold	O
,	O
BlackBishop	O
,	O
BlackRook	O
,	O
BlackKing	O
}	O
,	O
{	O
WhitePawn	O
,	O
WhiteLance	O
,	O
WhiteKnight	O
,	O
WhiteSilver	O
,	O
WhiteGold	O
,	O
WhiteBishop	O
,	O
WhiteRook	O
,	O
WhiteKing	O
}	O
}	O
;	O
int	O
pieceToCatchedIndex	array
[	O
]	O
=	O
{	O
pawn	int
,	O
lance	int
,	O
knight	int
,	O
silver	int
,	O
gold	int
,	O
bishop	int
,	O
rook	int
,	O
pawn	int
,	O
lance	int
,	O
knight	int
,	O
silver	int
,	O
bishop	int
,	O
rook	int
,	O
king	int
,	O
pawn	int
,	O
lance	int
,	O
knight	int
,	O
silver	int
,	O
gold	int
,	O
bishop	int
,	O
rook	int
,	O
pawn	int
,	O
lance	int
,	O
knight	int
,	O
silver	int
,	O
bishop	int
,	O
rook	int
,	O
king	int
,	O
no_piece	int
}	O
;	O
Board	O
boards	int
[	O
MAX_MOVES	O
]	O
;	O
Board	O
initialPosition	int
=	O
{	O
{	O
BlackLance	O
,	O
BlackKnight	O
,	O
BlackSilver	O
,	O
BlackGold	O
,	O
BlackKing	O
,	O
BlackGold	O
,	O
BlackSilver	O
,	O
BlackKnight	O
,	O
BlackLance	O
}	O
,	O
{	O
EmptySquare	O
,	O
BlackBishop	O
,	O
EmptySquare	O
,	O
EmptySquare	O
,	O
EmptySquare	O
,	O
EmptySquare	O
,	O
EmptySquare	O
,	O
BlackRook	O
,	O
EmptySquare	O
}	O
,	O
{	O
BlackPawn	O
,	O
BlackPawn	O
,	O
BlackPawn	O
,	O
BlackPawn	O
,	O
BlackPawn	O
,	O
BlackPawn	O
,	O
BlackPawn	O
,	O
BlackPawn	O
,	O
BlackPawn	O
}	O
,	O
{	O
EmptySquare	O
,	O
EmptySquare	O
,	O
EmptySquare	O
,	O
EmptySquare	O
,	O
EmptySquare	O
,	O
EmptySquare	O
,	O
EmptySquare	O
,	O
EmptySquare	O
,	O
EmptySquare	O
}	O
,	O
{	O
EmptySquare	O
,	O
EmptySquare	O
,	O
EmptySquare	O
,	O
EmptySquare	O
,	O
EmptySquare	O
,	O
EmptySquare	O
,	O
EmptySquare	O
,	O
EmptySquare	O
,	O
EmptySquare	O
}	O
,	O
{	O
EmptySquare	O
,	O
EmptySquare	O
,	O
EmptySquare	O
,	O
EmptySquare	O
,	O
EmptySquare	O
,	O
EmptySquare	O
,	O
EmptySquare	O
,	O
EmptySquare	O
,	O
EmptySquare	O
}	O
,	O
{	O
WhitePawn	O
,	O
WhitePawn	O
,	O
WhitePawn	O
,	O
WhitePawn	O
,	O
WhitePawn	O
,	O
WhitePawn	O
,	O
WhitePawn	O
,	O
WhitePawn	O
,	O
WhitePawn	O
}	O
,	O
{	O
EmptySquare	O
,	O
WhiteRook	O
,	O
EmptySquare	O
,	O
EmptySquare	O
,	O
EmptySquare	O
,	O
EmptySquare	O
,	O
EmptySquare	O
,	O
WhiteBishop	O
,	O
EmptySquare	O
}	O
,	O
{	O
WhiteLance	O
,	O
WhiteKnight	O
,	O
WhiteSilver	O
,	O
WhiteGold	O
,	O
WhiteKing	O
,	O
WhiteGold	O
,	O
WhiteSilver	O
,	O
WhiteKnight	O
,	O
WhiteLance	O
}	O
}	O
;	O
String	O
gnuButtonStrings	array
[	O
]	O
=	O
{	O
"Quit"	pointer
,	O
"Load Game"	pointer
,	O
"Machine White"	pointer
,	O
"Forward"	pointer
,	O
"Reset"	pointer
,	O
"Load Position"	pointer
,	O
"Machine Black"	pointer
,	O
"Backward"	pointer
,	O
"Flip View"	pointer
,	O
"Save Game"	pointer
,	O
"Force Moves"	pointer
,	O
"Pause"	pointer
,	O
"Hint"	pointer
,	O
"Save Position"	pointer
,	O
"Two Machines"	pointer
,	O
"Edit Position"	pointer
,	O
"Challenge"	pointer
,	O
"Select Level"	pointer
,	O
"Move NOW"	pointer
,	O
}	O
;	O
XtActionProc	O
gnuButtonProcs	array
[	O
]	O
=	O
{	O
QuitProc	function
,	O
LoadGameProc	function
,	O
MachineWhiteProc	function
,	O
ForwardProc	function
,	O
ResetProc	function
,	O
LoadPositionProc	function
,	O
MachineBlackProc	function
,	O
BackwardProc	function
,	O
FlipViewProc	function
,	O
SaveGameProc	function
,	O
ForceProc	function
,	O
PauseProc	function
,	O
HintProc	function
,	O
SavePositionProc	function
,	O
TwoMachinesProc	function
,	O
EditPositionProc	function
,	O
ChallengeProc	function
,	O
SelectLevelProc	function
,	O
MoveNowProc	function
,	O
NULL	O
}	O
;	O
String	O
*	O
buttonStrings	pointer
;	O
XtActionProc	O
*	O
buttonProcs	pointer
;	O
int	O
buttonCount	int
;	O
String	O
pieceMenuStrings	array
[	O
PIECE_MENU_SIZE	int
]	O
=	O
{	O
"----"	pointer
,	O
"Pawn"	pointer
,	O
"Lance"	pointer
,	O
"Knight"	pointer
,	O
"Silver"	pointer
,	O
"Gold"	pointer
,	O
"Bishop"	pointer
,	O
"Rook"	pointer
,	O
"PPawn"	pointer
,	O
"PLance"	pointer
,	O
"PKnight"	pointer
,	O
"PSilver"	pointer
,	O
"PBishop"	pointer
,	O
"PRook"	pointer
,	O
"King"	pointer
,	O
"----"	pointer
,	O
"Empty square"	pointer
,	O
"Clear board"	pointer
}	O
;	O
ShogiSquare	O
pieceMenuTranslation	array
[	O
2	int
]	O
[	O
PIECE_MENU_SIZE	int
]	O
=	O
{	O
{	O
(	O
ShogiSquare	O
)	O
0	int
,	O
BlackPawn	O
,	O
BlackLance	O
,	O
BlackKnight	O
,	O
BlackSilver	O
,	O
BlackGold	O
,	O
BlackBishop	O
,	O
BlackRook	O
,	O
BlackPPawn	O
,	O
BlackPLance	O
,	O
BlackPKnight	O
,	O
BlackPSilver	O
,	O
BlackPBishop	O
,	O
BlackPRook	O
,	O
BlackKing	O
,	O
(	O
ShogiSquare	O
)	O
0	int
,	O
EmptySquare	O
,	O
ClearBoard	O
}	O
,	O
{	O
(	O
ShogiSquare	O
)	O
0	int
,	O
WhitePawn	O
,	O
WhiteLance	O
,	O
WhiteKnight	O
,	O
WhiteSilver	O
,	O
WhiteGold	O
,	O
WhiteBishop	O
,	O
WhiteRook	O
,	O
WhitePPawn	O
,	O
WhitePLance	O
,	O
WhitePKnight	O
,	O
WhitePSilver	O
,	O
WhitePBishop	O
,	O
WhitePRook	O
,	O
WhiteKing	O
,	O
(	O
ShogiSquare	O
)	O
0	int
,	O
EmptySquare	O
,	O
ClearBoard	O
}	O
,	O
}	O
;	O
typedef	O
struct	O
{	O
Pixel	O
pieceColor	int
;	O
Pixel	O
squareColor	int
;	O
Pixel	O
charPieceColor	int
;	O
Pixel	O
zeroColor	int
;	O
Pixel	O
oneColor	int
;	O
Boolean	function
westernPieceSet	int
;	O
int	O
movesPerSession	int
;	O
String	O
initString	int
;	O
String	O
blackString	int
;	O
String	O
whiteString	int
;	O
String	O
firstShogiProgram	int
;	O
String	O
secondShogiProgram	int
;	O
Boolean	function
noShogiProgram	int
;	O
String	O
firstHost	int
;	O
String	O
secondHost	int
;	O
String	O
reverseBigSolidBitmap	int
;	O
String	O
reverseSmallSolidBitmap	int
;	O
String	O
normalBigSolidBitmap	int
;	O
String	O
normalSmallSolidBitmap	int
;	O
String	O
reversePawnBitmap	int
;	O
String	O
reverseLanceBitmap	int
;	O
String	O
reverseKnightBitmap	int
;	O
String	O
reverseSilverBitmap	int
;	O
String	O
reverseGoldBitmap	int
;	O
String	O
reverseRookBitmap	int
;	O
String	O
reverseBishopBitmap	int
;	O
String	O
reversePPawnBitmap	int
;	O
String	O
reversePLanceBitmap	int
;	O
String	O
reversePKnightBitmap	int
;	O
String	O
reversePSilverBitmap	int
;	O
String	O
reversePBishopBitmap	int
;	O
String	O
reversePRookBitmap	int
;	O
String	O
reverseKingBitmap	int
;	O
String	O
normalPawnBitmap	int
;	O
String	O
normalLanceBitmap	int
;	O
String	O
normalKnightBitmap	int
;	O
String	O
normalSilverBitmap	int
;	O
String	O
normalGoldBitmap	int
;	O
String	O
normalRookBitmap	int
;	O
String	O
normalBishopBitmap	int
;	O
String	O
normalPPawnBitmap	int
;	O
String	O
normalPLanceBitmap	int
;	O
String	O
normalPKnightBitmap	int
;	O
String	O
normalPSilverBitmap	int
;	O
String	O
normalPBishopBitmap	int
;	O
String	O
normalPRookBitmap	int
;	O
String	O
normalKingBitmap	int
;	O
String	O
remoteShell	int
;	O
float	O
timeDelay	float
;	O
String	O
timeControl	long
;	O
String	O
gameIn	int
;	O
Boolean	function
autoSaveGames	int
;	O
String	O
loadGameFile	int
;	O
String	O
loadPositionFile	int
;	O
String	O
saveGameFile	int
;	O
String	O
savePositionFile	int
;	O
String	O
matchMode	int
;	O
String	O
challengeDisplay	int
;	O
Boolean	function
monoMode	int
;	O
Boolean	function
debugMode	int
;	O
Boolean	function
clockMode	int
;	O
String	O
boardSize	int
;	O
Boolean	function
Iconic	int
;	O
String	O
searchTime	int
;	O
int	O
searchDepth	int
;	O
Boolean	function
showCoords	int
;	O
String	O
mainFont	int
;	O
String	O
coordFont	int
;	O
Boolean	function
ringBellAfterMoves	int
;	O
Boolean	function
autoCallFlag	int
;	O
int	O
borderXoffset	int
;	O
int	O
borderYoffset	int
;	O
}	O
AppData	struct
,	O
*	O
AppDataPtr	pointer
;	O
XtResource	O
clientResources	array
[	O
]	O
=	O
{	O
{	O
"pieceColor"	pointer
,	O
"pieceColor"	pointer
,	O
XtRPixel	O
,	O
sizeof	O
(	O
Pixel	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
pieceColor	int
)	O
,	O
XtRString	O
,	O
PIECE_COLOR	O
}	O
,	O
{	O
"charPieceColor"	pointer
,	O
"CharPieceColor"	pointer
,	O
XtRPixel	O
,	O
sizeof	O
(	O
Pixel	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
charPieceColor	int
)	O
,	O
XtRString	O
,	O
CHAR_PIECE_COLOR	O
}	O
,	O
{	O
"oneColor"	pointer
,	O
"OneColor"	pointer
,	O
XtRPixel	O
,	O
sizeof	O
(	O
Pixel	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
oneColor	int
)	O
,	O
XtRString	O
,	O
ONE_COLOR	O
}	O
,	O
{	O
"zeroColor"	pointer
,	O
"ZeroColor"	pointer
,	O
XtRPixel	O
,	O
sizeof	O
(	O
Pixel	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
zeroColor	int
)	O
,	O
XtRString	O
,	O
ZERO_COLOR	O
}	O
,	O
{	O
"squareColor"	pointer
,	O
"squareColor"	pointer
,	O
XtRPixel	O
,	O
sizeof	O
(	O
Pixel	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
squareColor	int
)	O
,	O
XtRString	O
,	O
SQUARE_COLOR	O
}	O
,	O
{	O
"westernPieceSet"	pointer
,	O
"WesternPieceSet"	pointer
,	O
XtRBoolean	O
,	O
sizeof	O
(	O
Boolean	function
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
westernPieceSet	int
)	O
,	O
XtRString	O
,	O
(	O
XtPointer	O
)	O
False	O
}	O
,	O
{	O
"movesPerSession"	pointer
,	O
"movesPerSession"	pointer
,	O
XtRInt	O
,	O
sizeof	O
(	O
int	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
movesPerSession	int
)	O
,	O
XtRImmediate	O
,	O
(	O
XtPointer	O
)	O
MOVES_PER_SESSION	O
}	O
,	O
{	O
"initString"	pointer
,	O
"initString"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
initString	int
)	O
,	O
XtRString	O
,	O
INIT_STRING	O
}	O
,	O
{	O
"blackString"	pointer
,	O
"blackString"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
blackString	int
)	O
,	O
XtRString	O
,	O
BLACK_STRING	O
}	O
,	O
{	O
"whiteString"	pointer
,	O
"whiteString"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
whiteString	int
)	O
,	O
XtRString	O
,	O
WHITE_STRING	O
}	O
,	O
{	O
"firstShogiProgram"	pointer
,	O
"firstShogiProgram"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
firstShogiProgram	int
)	O
,	O
XtRString	O
,	O
FIRST_SHOGI_PROGRAM	O
}	O
,	O
{	O
"secondShogiProgram"	pointer
,	O
"secondShogiProgram"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
secondShogiProgram	int
)	O
,	O
XtRString	O
,	O
SECOND_SHOGI_PROGRAM	O
}	O
,	O
{	O
"noShogiProgram"	pointer
,	O
"noShogiProgram"	pointer
,	O
XtRBoolean	O
,	O
sizeof	O
(	O
Boolean	function
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
noShogiProgram	int
)	O
,	O
XtRImmediate	O
,	O
(	O
XtPointer	O
)	O
False	O
}	O
,	O
{	O
"firstHost"	pointer
,	O
"firstHost"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
firstHost	int
)	O
,	O
XtRString	O
,	O
FIRST_HOST	O
}	O
,	O
{	O
"secondHost"	pointer
,	O
"secondHost"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
secondHost	int
)	O
,	O
XtRString	O
,	O
SECOND_HOST	O
}	O
,	O
{	O
"reversePawnBitmap"	pointer
,	O
"reversePawnBitmap"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
reversePawnBitmap	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"reverseLanceBitmap"	pointer
,	O
"reverseLanceBitmap"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
reverseLanceBitmap	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"reverseKnightBitmap"	pointer
,	O
"reverseKnightBitmap"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
reverseKnightBitmap	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"reverseSilverBitmap"	pointer
,	O
"reverseSilverBitmap"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
reverseSilverBitmap	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"reverseGoldBitmap"	pointer
,	O
"reverseGoldBitmap"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
reverseGoldBitmap	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"reverseRookBitmap"	pointer
,	O
"reverseRookBitmap"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
reverseRookBitmap	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"reverseBishopBitmap"	pointer
,	O
"reverseBishopBitmap"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
reverseBishopBitmap	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"reversePPawnBitmap"	pointer
,	O
"reversePPawnBitmap"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
reversePPawnBitmap	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"reversePLanceBitmap"	pointer
,	O
"reversePLanceBitmap"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
reversePLanceBitmap	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"reversePKnightBitmap"	pointer
,	O
"reversePKnightBitmap"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
reversePKnightBitmap	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"reversePSilverBitmap"	pointer
,	O
"reversePSilverBitmap"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
reversePSilverBitmap	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"reversePRookBitmap"	pointer
,	O
"reversePRookBitmap"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
reversePRookBitmap	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"reversePBishopBitmap"	pointer
,	O
"reversePBishopBitmap"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
reversePBishopBitmap	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"reverseKingBitmap"	pointer
,	O
"reverseKingBitmap"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
reverseKingBitmap	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"normalPawnBitmap"	pointer
,	O
"normalPawnBitmap"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
normalPawnBitmap	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"normalLanceBitmap"	pointer
,	O
"normalLanceBitmap"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
normalLanceBitmap	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"normalKnightBitmap"	pointer
,	O
"normalKnightBitmap"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
normalKnightBitmap	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"normalSilverBitmap"	pointer
,	O
"normalSilverBitmap"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
normalSilverBitmap	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"normalGoldBitmap"	pointer
,	O
"normalGoldBitmap"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
normalGoldBitmap	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"normalBishopBitmap"	pointer
,	O
"normalBishopBitmap"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
normalBishopBitmap	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"normalRookBitmap"	pointer
,	O
"normalRookBitmap"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
normalRookBitmap	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"normalPPawnBitmap"	pointer
,	O
"normalPPawnBitmap"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
normalPPawnBitmap	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"normalPLanceBitmap"	pointer
,	O
"normalPLanceBitmap"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
normalPLanceBitmap	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"normalPKnightBitmap"	pointer
,	O
"normalPKnightBitmap"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
normalPKnightBitmap	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"normalPSilverBitmap"	pointer
,	O
"normalPSilverBitmap"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
normalPSilverBitmap	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"normalPBishopBitmap"	pointer
,	O
"normalPBishopBitmap"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
normalPBishopBitmap	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"normalPRookBitmap"	pointer
,	O
"normalPRookBitmap"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
normalPRookBitmap	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"normalKingBitmap"	pointer
,	O
"normalKingBitmap"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
normalKingBitmap	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"remoteShell"	pointer
,	O
"remoteShell"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
remoteShell	int
)	O
,	O
XtRString	O
,	O
"rsh"	pointer
}	O
,	O
{	O
"timeDelay"	pointer
,	O
"timeDelay"	pointer
,	O
XtRFloat	O
,	O
sizeof	O
(	O
float	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
timeDelay	float
)	O
,	O
XtRString	O
,	O
(	O
XtPointer	O
)	O
TIME_DELAY	O
}	O
,	O
{	O
"timeControl"	pointer
,	O
"timeControl"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
timeControl	long
)	O
,	O
XtRString	O
,	O
(	O
XtPointer	O
)	O
TIME_CONTROL	O
}	O
,	O
{	O
"gameIn"	pointer
,	O
"gameIn"	pointer
,	O
XtRBoolean	O
,	O
sizeof	O
(	O
Boolean	function
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
gameIn	int
)	O
,	O
XtRImmediate	O
,	O
(	O
XtPointer	O
)	O
False	O
}	O
,	O
{	O
"autoSaveGames"	pointer
,	O
"autoSaveGames"	pointer
,	O
XtRBoolean	O
,	O
sizeof	O
(	O
Boolean	function
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
autoSaveGames	int
)	O
,	O
XtRImmediate	O
,	O
(	O
XtPointer	O
)	O
False	O
}	O
,	O
{	O
"loadGameFile"	pointer
,	O
"loadGameFile"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
loadGameFile	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"loadPositionFile"	pointer
,	O
"loadPositionFile"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
loadPositionFile	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"saveGameFile"	pointer
,	O
"saveGameFile"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
saveGameFile	int
)	O
,	O
XtRString	O
,	O
""	pointer
}	O
,	O
{	O
"savePositionFile"	pointer
,	O
"savePositionFile"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
savePositionFile	int
)	O
,	O
XtRString	O
,	O
""	pointer
}	O
,	O
{	O
"challengeDisplay"	pointer
,	O
"challengeDisplay"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
challengeDisplay	int
)	O
,	O
XtRString	O
,	O
NULL	O
}	O
,	O
{	O
"matchMode"	pointer
,	O
"matchMode"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
matchMode	int
)	O
,	O
XtRString	O
,	O
MATCH_MODE	O
}	O
,	O
{	O
"monoMode"	pointer
,	O
"monoMode"	pointer
,	O
XtRBoolean	O
,	O
sizeof	O
(	O
Boolean	function
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
monoMode	int
)	O
,	O
XtRImmediate	O
,	O
(	O
XtPointer	O
)	O
False	O
}	O
,	O
{	O
"debugMode"	pointer
,	O
"debugMode"	pointer
,	O
XtRBoolean	O
,	O
sizeof	O
(	O
Boolean	function
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
debugMode	int
)	O
,	O
XtRImmediate	O
,	O
(	O
XtPointer	O
)	O
False	O
}	O
,	O
{	O
"Iconic"	pointer
,	O
"Iconic"	pointer
,	O
XtRBoolean	O
,	O
sizeof	O
(	O
Boolean	function
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
Iconic	int
)	O
,	O
XtRImmediate	O
,	O
(	O
XtPointer	O
)	O
False	O
}	O
,	O
{	O
"clockMode"	pointer
,	O
"clockMode"	pointer
,	O
XtRBoolean	O
,	O
sizeof	O
(	O
Boolean	function
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
clockMode	int
)	O
,	O
XtRImmediate	O
,	O
(	O
XtPointer	O
)	O
True	O
}	O
,	O
{	O
"autoCallFlag"	pointer
,	O
"autoCallFlag"	pointer
,	O
XtRBoolean	O
,	O
sizeof	O
(	O
Boolean	function
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
autoCallFlag	int
)	O
,	O
XtRImmediate	O
,	O
(	O
XtPointer	O
)	O
False	O
}	O
,	O
{	O
"boardSize"	pointer
,	O
"boardSize"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
boardSize	int
)	O
,	O
XtRString	O
,	O
DEFAULT_SIZE	O
}	O
,	O
{	O
"searchTime"	pointer
,	O
"searchTime"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
searchTime	int
)	O
,	O
XtRString	O
,	O
(	O
XtPointer	O
)	O
NULL	O
}	O
,	O
{	O
"searchDepth"	pointer
,	O
"searchDepth"	pointer
,	O
XtRInt	O
,	O
sizeof	O
(	O
int	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
searchDepth	int
)	O
,	O
XtRImmediate	O
,	O
(	O
XtPointer	O
)	O
0	int
}	O
,	O
{	O
"showCoords"	pointer
,	O
"showCoords"	pointer
,	O
XtRBoolean	O
,	O
sizeof	O
(	O
Boolean	function
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
showCoords	int
)	O
,	O
XtRImmediate	O
,	O
(	O
XtPointer	O
)	O
False	O
}	O
,	O
{	O
"mainFont"	pointer
,	O
"mainFont"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
mainFont	int
)	O
,	O
XtRString	O
,	O
MAIN_FONT	O
}	O
,	O
{	O
"coordFont"	pointer
,	O
"coordFont"	pointer
,	O
XtRString	O
,	O
sizeof	O
(	O
String	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
coordFont	int
)	O
,	O
XtRString	O
,	O
COORD_FONT	O
}	O
,	O
{	O
"ringBellAfterMoves"	pointer
,	O
"ringBellAfterMoves"	pointer
,	O
XtRBoolean	O
,	O
sizeof	O
(	O
Boolean	function
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
ringBellAfterMoves	int
)	O
,	O
XtRImmediate	O
,	O
(	O
XtPointer	O
)	O
False	O
}	O
,	O
{	O
"borderXoffset"	pointer
,	O
"borderXoffset"	pointer
,	O
XtRInt	O
,	O
sizeof	O
(	O
int	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
borderXoffset	int
)	O
,	O
XtRImmediate	O
,	O
(	O
XtPointer	O
)	O
BORDER_X_OFFSET	O
}	O
,	O
{	O
"borderYoffset"	pointer
,	O
"borderYOffset"	pointer
,	O
XtRInt	O
,	O
sizeof	O
(	O
int	O
)	O
,	O
XtOffset	function
(	O
AppDataPtr	pointer
,	O
borderYoffset	int
)	O
,	O
XtRImmediate	O
,	O
(	O
XtPointer	O
)	O
BORDER_Y_OFFSET	O
}	O
}	O
;	O
struct	O
DisplayData	struct
{	O
AppData	struct
appData	struct
;	O
Arg	O
shellArgs	array
[	O
6	int
]	O
;	O
Arg	O
boardArgs	array
[	O
3	int
]	O
;	O
Arg	O
commandsArgs	array
[	O
7	int
]	O
;	O
Arg	O
messageArgs	array
[	O
3	int
]	O
;	O
Arg	O
timerArgs	array
[	O
2	int
]	O
;	O
Arg	O
titleArgs	array
[	O
2	int
]	O
;	O
Pixmap	O
reversePawnBitmap	int
,	O
reverseLanceBitmap	int
,	O
reverseKnightBitmap	int
,	O
reverseSilverBitmap	int
,	O
reverseGoldBitmap	int
,	O
reverseBishopBitmap	int
,	O
reverseRookBitmap	int
,	O
reversePPawnBitmap	int
,	O
reversePLanceBitmap	int
,	O
reversePKnightBitmap	int
,	O
reversePSilverBitmap	int
,	O
reversePBishopBitmap	int
,	O
reversePRookBitmap	int
,	O
reverseKingBitmap	int
,	O
reverseBigSolidBitmap	int
,	O
reverseSmallSolidBitmap	int
,	O
normalBigSolidBitmap	int
,	O
normalSmallSolidBitmap	int
,	O
normalPawnBitmap	int
,	O
normalLanceBitmap	int
,	O
normalKnightBitmap	int
,	O
normalSilverBitmap	int
,	O
normalGoldBitmap	int
,	O
normalBishopBitmap	int
,	O
normalRookBitmap	int
,	O
normalPPawnBitmap	int
,	O
normalPLanceBitmap	int
,	O
normalPKnightBitmap	int
,	O
normalPSilverBitmap	int
,	O
normalPBishopBitmap	int
,	O
normalPRookBitmap	int
,	O
normalKingBitmap	int
,	O
iconPixmap	int
;	O
Display	O
*	O
xDisplay	pointer
;	O
int	O
xScreen	int
;	O
Window	O
xBoardWindow	int
;	O
GC	O
squareGC	int
,	O
lineGC	int
,	O
pieceGC	int
,	O
oPieceGC	int
,	O
charPieceGC	int
,	O
squareOffBoardGC	int
,	O
coordGC	int
,	O
dropPiece	int
;	O
Font	O
mainFontID	int
,	O
coordFontID	int
;	O
XFontStruct	O
*	O
mainFontStruct	pointer
,	O
*	O
coordFontStruct	pointer
;	O
Widget	O
shellWidget	int
,	O
formWidget	int
,	O
boardWidget	int
,	O
commandsWidget	int
,	O
messageWidget	int
,	O
blackTimerWidget	int
,	O
whiteTimerWidget	int
,	O
titleWidget	int
,	O
widgetList	array
[	O
6	int
]	O
,	O
promotionShell	int
,	O
filemodeShell	int
,	O
challengeWidget	int
;	O
XSegment	O
gridSegments	int
[	O
(	O
BOARD_SIZE	O
+	O
1	int
)	O
*	O
2	int
]	O
;	O
Pixel	O
timerForegroundPixel	int
,	O
timerBackgroundPixel	int
;	O
BoardSize	O
boardSize	int
;	O
int	O
squareSize	int
;	O
int	O
black_pixel_is_zero	int
;	O
int	O
flipView	int
;	O
int	O
promotionUp	int
;	O
Boolean	function
monoMode	int
,	O
showCoords	int
,	O
Iconic	int
;	O
}	O
;	O
struct	O
DisplayData	struct
localPlayer	struct
,	O
remotePlayer	struct
;	O
typedef	O
struct	O
{	O
ShogiSquare	O
piece	int
;	O
int	O
to_x	int
,	O
to_y	int
;	O
}	O
PromotionMoveInfo	struct
;	O
static	O
PromotionMoveInfo	struct
pmi	struct
;	O
Pixmap	O
*	O
pieceToReverse	array
[	O
2	int
]	O
[	O
28	int
]	O
=	O
{	O
{	O
&	O
localPlayer	struct
.	O
reversePawnBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseLanceBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseKnightBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseSilverBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseGoldBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseBishopBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseRookBitmap	int
,	O
&	O
localPlayer	struct
.	O
reversePPawnBitmap	int
,	O
&	O
localPlayer	struct
.	O
reversePLanceBitmap	int
,	O
&	O
localPlayer	struct
.	O
reversePKnightBitmap	int
,	O
&	O
localPlayer	struct
.	O
reversePSilverBitmap	int
,	O
&	O
localPlayer	struct
.	O
reversePBishopBitmap	int
,	O
&	O
localPlayer	struct
.	O
reversePRookBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseKingBitmap	int
,	O
&	O
localPlayer	struct
.	O
reversePawnBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseLanceBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseKnightBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseSilverBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseGoldBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseBishopBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseRookBitmap	int
,	O
&	O
localPlayer	struct
.	O
reversePPawnBitmap	int
,	O
&	O
localPlayer	struct
.	O
reversePLanceBitmap	int
,	O
&	O
localPlayer	struct
.	O
reversePKnightBitmap	int
,	O
&	O
localPlayer	struct
.	O
reversePSilverBitmap	int
,	O
&	O
localPlayer	struct
.	O
reversePBishopBitmap	int
,	O
&	O
localPlayer	struct
.	O
reversePRookBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseKingBitmap	int
}	O
,	O
{	O
&	O
remotePlayer	struct
.	O
reversePawnBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseLanceBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseKnightBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseSilverBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseGoldBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseBishopBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseRookBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reversePPawnBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reversePLanceBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reversePKnightBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reversePSilverBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reversePBishopBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reversePRookBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseKingBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reversePawnBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseLanceBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseKnightBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseSilverBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseGoldBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseBishopBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseRookBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reversePPawnBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reversePLanceBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reversePKnightBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reversePSilverBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reversePBishopBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reversePRookBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseKingBitmap	int
}	O
}	O
;	O
Pixmap	O
*	O
pieceToNormal	array
[	O
2	int
]	O
[	O
28	int
]	O
=	O
{	O
{	O
&	O
localPlayer	struct
.	O
normalPawnBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalLanceBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalKnightBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalSilverBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalGoldBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalBishopBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalRookBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalPPawnBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalPLanceBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalPKnightBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalPSilverBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalPBishopBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalPRookBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalKingBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalPawnBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalLanceBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalKnightBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalSilverBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalGoldBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalBishopBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalRookBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalPPawnBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalPLanceBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalPKnightBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalPSilverBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalPBishopBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalPRookBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalKingBitmap	int
}	O
,	O
{	O
&	O
remotePlayer	struct
.	O
normalPawnBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalLanceBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalKnightBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalSilverBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalGoldBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalBishopBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalRookBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalPPawnBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalPLanceBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalPKnightBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalPSilverBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalPBishopBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalPRookBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalKingBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalPawnBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalLanceBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalKnightBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalSilverBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalGoldBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalBishopBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalRookBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalPPawnBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalPLanceBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalPKnightBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalPSilverBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalPBishopBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalPRookBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalKingBitmap	int
}	O
}	O
;	O
Pixmap	O
*	O
pieceToReverseSolid	array
[	O
2	int
]	O
[	O
28	int
]	O
=	O
{	O
{	O
&	O
localPlayer	struct
.	O
reverseSmallSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseSmallSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseSmallSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseSmallSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseSmallSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseSmallSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseSmallSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseSmallSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseSmallSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseSmallSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseSmallSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseSmallSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
reverseBigSolidBitmap	int
}	O
,	O
{	O
&	O
remotePlayer	struct
.	O
reverseSmallSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseSmallSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseSmallSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseSmallSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseSmallSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseSmallSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseSmallSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseSmallSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseSmallSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseSmallSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseSmallSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseSmallSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
reverseBigSolidBitmap	int
}	O
}	O
;	O
Pixmap	O
*	O
pieceToNormalSolid	array
[	O
2	int
]	O
[	O
28	int
]	O
=	O
{	O
{	O
&	O
localPlayer	struct
.	O
normalSmallSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalSmallSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalSmallSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalSmallSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalSmallSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalSmallSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalSmallSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalSmallSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalSmallSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalSmallSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalSmallSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalSmallSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
localPlayer	struct
.	O
normalBigSolidBitmap	int
}	O
,	O
{	O
&	O
remotePlayer	struct
.	O
normalSmallSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalSmallSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalSmallSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalSmallSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalSmallSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalSmallSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalSmallSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalSmallSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalSmallSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalSmallSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalSmallSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalSmallSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
remotePlayer	struct
.	O
normalBigSolidBitmap	int
}	O
}	O
;	O
int	O
pieceIsPromoted	array
[	O
]	O
=	O
{	O
False	O
,	O
False	O
,	O
False	O
,	O
False	O
,	O
False	O
,	O
False	O
,	O
False	O
,	O
True	O
,	O
True	O
,	O
True	O
,	O
True	O
,	O
True	O
,	O
True	O
,	O
False	O
,	O
False	O
,	O
False	O
,	O
False	O
,	O
False	O
,	O
False	O
,	O
False	O
,	O
False	O
,	O
True	O
,	O
True	O
,	O
True	O
,	O
True	O
,	O
True	O
,	O
True	O
,	O
False	O
,	O
False	O
}	O
;	O
int	O
piecePromotable	array
[	O
]	O
=	O
{	O
True	O
,	O
True	O
,	O
True	O
,	O
True	O
,	O
False	O
,	O
True	O
,	O
True	O
,	O
False	O
,	O
False	O
,	O
False	O
,	O
False	O
,	O
False	O
,	O
False	O
,	O
False	O
,	O
True	O
,	O
True	O
,	O
True	O
,	O
True	O
,	O
False	O
,	O
True	O
,	O
True	O
,	O
False	O
,	O
False	O
,	O
False	O
,	O
False	O
,	O
False	O
,	O
False	O
,	O
False	O
,	O
False	O
}	O
;	O
char	O
pieceToChar	array
[	O
]	O
=	O
{	O
'P'	O
,	O
'L'	O
,	O
'N'	O
,	O
'S'	O
,	O
'G'	O
,	O
'B'	O
,	O
'R'	O
,	O
'P'	O
,	O
'L'	O
,	O
'N'	O
,	O
'S'	O
,	O
'B'	O
,	O
'R'	O
,	O
'K'	O
,	O
'p'	O
,	O
'l'	O
,	O
'n'	O
,	O
's'	O
,	O
'g'	O
,	O
'b'	O
,	O
'r'	O
,	O
'p'	O
,	O
'l'	O
,	O
'n'	O
,	O
's'	O
,	O
'b'	O
,	O
'r'	O
,	O
'k'	O
,	O
'.'	O
}	O
;	O
ShogiSquare	O
pieceToPromoted	array
[	O
]	O
=	O
{	O
BlackPPawn	O
,	O
BlackPLance	O
,	O
BlackPKnight	O
,	O
BlackPSilver	O
,	O
BlackGold	O
,	O
BlackPBishop	O
,	O
BlackPRook	O
,	O
BlackPPawn	O
,	O
BlackPLance	O
,	O
BlackPKnight	O
,	O
BlackPSilver	O
,	O
BlackPBishop	O
,	O
BlackPRook	O
,	O
BlackKing	O
,	O
WhitePPawn	O
,	O
WhitePLance	O
,	O
WhitePKnight	O
,	O
WhitePSilver	O
,	O
WhiteGold	O
,	O
WhitePBishop	O
,	O
WhitePRook	O
,	O
WhitePPawn	O
,	O
WhitePLance	O
,	O
WhitePKnight	O
,	O
WhitePSilver	O
,	O
WhitePBishop	O
,	O
WhitePRook	O
,	O
WhiteKing	O
}	O
;	O
XrmOptionDescRec	O
shellOptions	array
[	O
]	O
=	O
{	O
{	O
"-pieceColor"	pointer
,	O
"pieceColor"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-pc"	pointer
,	O
"pieceColor"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-charPieceColor"	pointer
,	O
"charPieceColor"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-cpc"	pointer
,	O
"charPieceColor"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-zeroColor"	pointer
,	O
"zeroColor"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-zc"	pointer
,	O
"zeroColor"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-oneColor"	pointer
,	O
"oneColor"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-oc"	pointer
,	O
"oneColor"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-squareColor"	pointer
,	O
"squareColor"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-sc"	pointer
,	O
"squareColor"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-westernPieceSet"	pointer
,	O
"westernPieceSet"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-wps"	pointer
,	O
"westernPieceSet"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-movesPerSession"	pointer
,	O
"movesPerSession"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-mps"	pointer
,	O
"movesPerSession"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-firstShogiProgram"	pointer
,	O
"firstShogiProgram"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-fsp"	pointer
,	O
"firstShogiProgram"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-secondShogiProgram"	pointer
,	O
"secondShogiProgram"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-ssp"	pointer
,	O
"secondShogiProgram"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-noShogiProgram"	pointer
,	O
"noShogiProgram"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-nsp"	pointer
,	O
"noShogiProgram"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-firstHost"	pointer
,	O
"firstHost"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-fh"	pointer
,	O
"firstHost"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-secondHost"	pointer
,	O
"secondHost"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-sh"	pointer
,	O
"secondHost"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-reversePawnBitmap"	pointer
,	O
"reversePawnBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-rpb"	pointer
,	O
"reversePawnBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-reverseLanceBitmap"	pointer
,	O
"reverseLanceBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-rlb"	pointer
,	O
"reverseLanceBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-reverseKnightBitmap"	pointer
,	O
"reverseKnightBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-rnb"	pointer
,	O
"reverseKnightBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-reverseSilverBitmap"	pointer
,	O
"reverseSilverBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-rsb"	pointer
,	O
"reverseSilverBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-reverseGoldBitmap"	pointer
,	O
"reverseGoldBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-rgb"	pointer
,	O
"reverseGoldBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-reverseRookBitmap"	pointer
,	O
"reverseRookBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-rrb"	pointer
,	O
"reverseRookBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-reverseBishopBitmap"	pointer
,	O
"reverseBishopBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-rbb"	pointer
,	O
"reverseBishopBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-reversePPawnBitmap"	pointer
,	O
"reversePPawnBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-rppb"	pointer
,	O
"reversePPawnBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-reversePLanceBitmap"	pointer
,	O
"reversePLanceBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-rplb"	pointer
,	O
"reversePLanceBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-reversePKnightBitmap"	pointer
,	O
"reversePKnightBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-rpnb"	pointer
,	O
"reversePKnightBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-reversePSilverBitmap"	pointer
,	O
"reversePSilverBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-rpsb"	pointer
,	O
"reversePSilverBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-reversePRookBitmap"	pointer
,	O
"reversePRookBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-rprb"	pointer
,	O
"reversePRookBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-reversePBishopBitmap"	pointer
,	O
"reversePBishopBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-rpbb"	pointer
,	O
"reversePBishopBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-reverseKingBitmap"	pointer
,	O
"reverseKingBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-rkb"	pointer
,	O
"reverseKingBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-outlinePawnBitmap"	pointer
,	O
"outlinePawnBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-opb"	pointer
,	O
"normalPawnBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-normalLanceBitmap"	pointer
,	O
"normalLanceBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-olb"	pointer
,	O
"normalLanceBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-normalKnightBitmap"	pointer
,	O
"normalKnightBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-onb"	pointer
,	O
"normalKnightBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-normalSilverBitmap"	pointer
,	O
"normalSilverBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-osb"	pointer
,	O
"normalSilverBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-normalGoldBitmap"	pointer
,	O
"normalGoldBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-ogb"	pointer
,	O
"normalGoldBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-normalRookBitmap"	pointer
,	O
"normalRookBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-orb"	pointer
,	O
"normalRookBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-normalBishopBitmap"	pointer
,	O
"normalBishopBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-obb"	pointer
,	O
"normalBishopBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-normalPPawnBitmap"	pointer
,	O
"normalPPawnBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-oppb"	pointer
,	O
"normalPPawnBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-normalPLanceBitmap"	pointer
,	O
"normalPLanceBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-oplb"	pointer
,	O
"normalPLanceBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-normalPKnightBitmap"	pointer
,	O
"normalPKnightBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-opnb"	pointer
,	O
"normalPKnightBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-normalPSilverBitmap"	pointer
,	O
"normalPSilverBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-opsb"	pointer
,	O
"normalPSilverBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-normalPRookBitmap"	pointer
,	O
"normalPRookBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-oprb"	pointer
,	O
"normalPRookBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-normalPBishopBitmap"	pointer
,	O
"normalPBishopBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-opbb"	pointer
,	O
"normalPBishopBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-normalKingBitmap"	pointer
,	O
"normalKingBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-okb"	pointer
,	O
"outlineKingBitmap"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-remoteShell"	pointer
,	O
"remoteShell"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-rsh"	pointer
,	O
"remoteShell"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-timeDelay"	pointer
,	O
"timeDelay"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-td"	pointer
,	O
"timeDelay"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-timeControl"	pointer
,	O
"timeControl"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-tc"	pointer
,	O
"timeControl"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-gameIn"	pointer
,	O
"gameIn"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-gi"	pointer
,	O
"gameIn"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-loadGameFile"	pointer
,	O
"loadGameFile"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-lgf"	pointer
,	O
"loadGameFile"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-loadPositionFile"	pointer
,	O
"loadPositionFile"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-lpf"	pointer
,	O
"loadPositionFile"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-saveGameFile"	pointer
,	O
"saveGameFile"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-sgf"	pointer
,	O
"saveGameFile"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-savePositionFile"	pointer
,	O
"savePositionFile"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-spf"	pointer
,	O
"savePositionFile"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-challengeDisplay"	pointer
,	O
"challengeDisplay"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-cd"	pointer
,	O
"challengeDisplay"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-matchMode"	pointer
,	O
"matchMode"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-mm"	pointer
,	O
"matchMode"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-monoMode"	pointer
,	O
"monoMode"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-mono"	pointer
,	O
"monoMode"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-debugMode"	pointer
,	O
"debugMode"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-debug"	pointer
,	O
"debugMode"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-clockMode"	pointer
,	O
"clockMode"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-clock"	pointer
,	O
"clockMode"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-boardSize"	pointer
,	O
"boardSize"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-size"	pointer
,	O
"boardSize"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-searchTime"	pointer
,	O
"searchTime"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-st"	pointer
,	O
"searchTime"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-searchDepth"	pointer
,	O
"searchDepth"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-sd"	pointer
,	O
"searchDepth"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-showCoords"	pointer
,	O
"showCoords"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-coords"	pointer
,	O
"showCoords"	pointer
,	O
XrmoptionSepArg	O
,	O
NULL	O
}	O
,	O
{	O
"-iconic"	pointer
,	O
"Iconic"	pointer
,	O
XrmoptionNoArg	O
,	O
"True"	pointer
}	O
}	O
;	O
XtActionsRec	O
boardActions	array
[	O
]	O
=	O
{	O
{	O
"DrawPosition"	pointer
,	O
(	O
XtActionProc	O
)	O
DrawPosition	function
}	O
,	O
{	O
"HandleUserMove"	pointer
,	O
(	O
XtActionProc	O
)	O
HandleUserMove	function
}	O
,	O
{	O
"ResetProc"	pointer
,	O
(	O
XtActionProc	O
)	O
ResetProc	function
}	O
,	O
{	O
"ResetFileProc"	pointer
,	O
(	O
XtActionProc	O
)	O
ResetFileProc	function
}	O
,	O
{	O
"LoadGameProc"	pointer
,	O
(	O
XtActionProc	O
)	O
LoadGameProc	function
}	O
,	O
{	O
"QuitProc"	pointer
,	O
(	O
XtActionProc	O
)	O
QuitProc	function
}	O
,	O
{	O
"ForwardProc"	pointer
,	O
(	O
XtActionProc	O
)	O
ForwardProc	function
}	O
,	O
{	O
"BackwardProc"	pointer
,	O
(	O
XtActionProc	O
)	O
BackwardProc	function
}	O
,	O
{	O
"PauseProc"	pointer
,	O
(	O
XtActionProc	O
)	O
PauseProc	function
}	O
,	O
{	O
"Iconify"	pointer
,	O
(	O
XtActionProc	O
)	O
Iconify	function
}	O
,	O
{	O
"FileNameAction"	pointer
,	O
(	O
XtActionProc	O
)	O
FileNameAction	function
}	O
,	O
{	O
"PieceMenuPopup"	pointer
,	O
(	O
XtActionProc	O
)	O
PieceMenuPopup	function
}	O
,	O
{	O
"SetBlackToPlay"	pointer
,	O
(	O
XtActionProc	O
)	O
SetBlackToPlay	function
}	O
,	O
{	O
"SetWhiteToPlay"	pointer
,	O
(	O
XtActionProc	O
)	O
SetWhiteToPlay	function
}	O
}	O
;	O
char	O
translationsTable	array
[	O
]	O
=	O
"<Expose>: DrawPosition() \n <Btn1Down>: HandleUserMove() \n <Btn1Up>: HandleUserMove() \n <Btn2Down>: XawPositionSimpleMenu(menuW) PieceMenuPopup(menuW) \n <Btn3Down>: XawPositionSimpleMenu(menuB) PieceMenuPopup(menuB) \n <Key>r: ResetFileProc() ResetProc() \n <Key>R: ResetFileProc() ResetProc() \n <Key>g: LoadGameProc() \n <Key>G: LoadGameProc() \n <Key>q: QuitProc() \n <Key>Q: QuitProc() \n <Message>WM_PROTOCOLS: QuitProc() \n <Key>f: ForwardProc() \n <Key>F: ForwardProc() \n <Key>b: BackwardProc() \n <Key>B: BackwardProc() \n <Key>p: PauseProc() \n <Key>P: PauseProc() \n <Key>i: Iconify() \n <Key>I: Iconify() \n <Key>c: Iconify() \n <Key>C: Iconify() \n"	pointer
;	O
char	O
translationsTableReduced	array
[	O
]	O
=	O
"<Expose>: DrawPosition() \n <Btn1Down>: HandleUserMove() \n <Btn1Up>: HandleUserMove() \n <Message>WM_PROTOCOLS: QuitProc() \n"	pointer
;	O
char	O
blackTranslations	array
[	O
]	O
=	O
"<BtnDown>: SetBlackToPlay()\n"	pointer
;	O
char	O
whiteTranslations	array
[	O
]	O
=	O
"<BtnDown>: SetWhiteToPlay()\n"	pointer
;	O
String	O
xshogiResources	array
[	O
]	O
=	O
{	O
DEFAULT_FONT	O
,	O
"*Dialog*value.translations: #override "	pointer
"\\n <Key>Return: FileNameAction()"	pointer
,	O
NULL	O
}	O
;	O
int	O
global_argc	int
;	O
char	O
*	O
global_argv	array
[	O
10	int
]	O
;	O
static	O
struct	O
DisplayData	struct
*	O
player	pointer
;	O
typedef	O
struct	O
{	O
char	O
mode	array
[	O
2	int
]	O
;	O
char	O
name	pointer
[	O
100	int
]	O
;	O
}	O
FileModeInfo	struct
;	O
static	O
FileModeInfo	struct
fmi	struct
;	O
int	O
loaded_game_finished	int
=	O
0	int
;	O
void	O
CreatePlayerWindow	function
(	O
void	O
)	O
{	O
int	O
mainFontPxlSize	int
,	O
coordFontPxlSize	int
;	O
int	O
min	int
,	O
sec	int
,	O
matched	int
;	O
XSetWindowAttributes	O
window_attributes	O
;	O
char	O
buf	char
[	O
MSG_SIZ	O
]	O
;	O
Arg	O
args	O
[	O
10	int
]	O
;	O
Dimension	O
timerWidth	O
,	O
boardWidth	O
,	O
commandsWidth	O
,	O
w	int
,	O
h	int
;	O
int	O
local	int
;	O
int	O
fromRemotePlayer	int
=	O
(	O
player	pointer
==	O
&	O
remotePlayer	struct
)	O
;	O
player	pointer
->	O
monoMode	int
=	O
player	pointer
->	O
appData	struct
.	O
monoMode	int
;	O
player	pointer
->	O
showCoords	int
=	O
player	pointer
->	O
appData	struct
.	O
showCoords	int
;	O
if	O
(	O
player	pointer
->	O
appData	struct
.	O
timeControl	long
!=	O
NULL	O
)	O
{	O
matched	int
=	O
sscanf	function
(	O
player	pointer
->	O
appData	struct
.	O
timeControl	long
,	O
"%d:%d"	pointer
,	O
&	O
min	int
,	O
&	O
sec	int
)	O
;	O
if	O
(	O
matched	int
==	O
1	int
)	O
{	O
timeControl	long
=	O
min	int
*	O
60	int
*	O
1000	int
;	O
}	O
else	O
if	O
(	O
matched	int
==	O
2	int
)	O
{	O
timeControl	long
=	O
(	O
min	int
*	O
60	int
+	O
sec	int
)	O
*	O
1000	int
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: bad timeControl option %s\n"	pointer
,	O
programName	O
,	O
player	pointer
->	O
appData	struct
.	O
timeControl	long
)	O
;	O
Usage	function
(	O
)	O
;	O
}	O
}	O
if	O
(	O
player	pointer
->	O
appData	struct
.	O
searchTime	int
!=	O
NULL	O
)	O
{	O
matched	int
=	O
sscanf	function
(	O
player	pointer
->	O
appData	struct
.	O
searchTime	int
,	O
"%d:%d"	pointer
,	O
&	O
min	int
,	O
&	O
sec	int
)	O
;	O
if	O
(	O
matched	int
==	O
1	int
)	O
{	O
searchTime	int
=	O
min	int
*	O
60	int
;	O
}	O
else	O
if	O
(	O
matched	int
==	O
2	int
)	O
{	O
searchTime	int
=	O
min	int
*	O
60	int
+	O
sec	int
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: bad searchTime option %s\n"	pointer
,	O
programName	O
,	O
player	pointer
->	O
appData	struct
.	O
searchTime	int
)	O
;	O
Usage	function
(	O
)	O
;	O
}	O
}	O
if	O
(	O
(	O
player	pointer
->	O
appData	struct
.	O
searchTime	int
!=	O
NULL	O
)	O
||	O
(	O
player	pointer
->	O
appData	struct
.	O
searchDepth	int
>	O
0	int
)	O
||	O
player	pointer
->	O
appData	struct
.	O
noShogiProgram	int
)	O
{	O
player	pointer
->	O
appData	struct
.	O
clockMode	int
=	O
False	O
;	O
}	O
player	pointer
->	O
Iconic	int
=	O
False	O
;	O
player	pointer
->	O
boardSize	int
=	O
Small	O
;	O
player	pointer
->	O
squareSize	int
=	O
SMALL_SQUARE_SIZE	O
;	O
player	pointer
->	O
flipView	int
=	O
(	O
player	pointer
==	O
&	O
remotePlayer	struct
)	O
;	O
player	pointer
->	O
promotionUp	int
=	O
False	O
;	O
if	O
(	O
strcasecmp	function
(	O
player	pointer
->	O
appData	struct
.	O
boardSize	int
,	O
"Large"	pointer
)	O
==	O
0	int
)	O
{	O
player	pointer
->	O
boardSize	int
=	O
Large	O
;	O
}	O
else	O
if	O
(	O
strcasecmp	function
(	O
player	pointer
->	O
appData	struct
.	O
boardSize	int
,	O
"Medium"	pointer
)	O
==	O
0	int
)	O
{	O
player	pointer
->	O
boardSize	int
=	O
Medium	O
;	O
}	O
else	O
if	O
(	O
strcasecmp	function
(	O
player	pointer
->	O
appData	struct
.	O
boardSize	int
,	O
"Small"	pointer
)	O
==	O
0	int
)	O
{	O
player	pointer
->	O
boardSize	int
=	O
Small	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: bad boardSize option %s\n"	pointer
,	O
programName	O
,	O
player	pointer
->	O
appData	struct
.	O
boardSize	int
)	O
;	O
Usage	function
(	O
)	O
;	O
}	O
if	O
(	O
(	O
local	int
=	O
(	O
player	pointer
==	O
&	O
localPlayer	struct
)	O
)	O
)	O
{	O
player	pointer
->	O
xDisplay	pointer
=	O
XtDisplay	function
(	O
player	pointer
->	O
shellWidget	int
)	O
;	O
player	pointer
->	O
xScreen	int
=	O
DefaultScreen	function
(	O
player	pointer
->	O
xDisplay	pointer
)	O
;	O
}	O
if	O
(	O
(	O
(	O
DisplayWidth	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
xScreen	int
)	O
<	O
800	int
)	O
||	O
(	O
DisplayHeight	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
xScreen	int
)	O
<	O
800	int
)	O
)	O
&&	O
(	O
player	pointer
->	O
boardSize	int
==	O
Large	O
)	O
)	O
{	O
player	pointer
->	O
boardSize	int
=	O
Medium	O
;	O
}	O
switch	O
(	O
player	pointer
->	O
boardSize	int
)	O
{	O
case	O
Small	O
:	O
player	pointer
->	O
squareSize	int
=	O
SMALL_SQUARE_SIZE	O
;	O
mainFontPxlSize	int
=	O
11	int
;	O
coordFontPxlSize	int
=	O
10	int
;	O
break	O
;	O
case	O
Medium	O
:	O
player	pointer
->	O
squareSize	int
=	O
MEDIUM_SQUARE_SIZE	O
;	O
mainFontPxlSize	int
=	O
17	int
;	O
coordFontPxlSize	int
=	O
12	int
;	O
break	O
;	O
default	O
:	O
case	O
Large	O
:	O
player	pointer
->	O
squareSize	int
=	O
LARGE_SQUARE_SIZE	O
;	O
mainFontPxlSize	int
=	O
17	int
;	O
coordFontPxlSize	int
=	O
14	int
;	O
break	O
;	O
}	O
if	O
(	O
DefaultDepth	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
xScreen	int
)	O
<=	O
2	int
)	O
player	pointer
->	O
monoMode	int
=	O
True	O
;	O
player	pointer
->	O
appData	struct
.	O
mainFont	int
=	O
FindFont	function
(	O
player	pointer
->	O
appData	struct
.	O
mainFont	int
,	O
mainFontPxlSize	int
)	O
;	O
player	pointer
->	O
mainFontID	int
=	O
XLoadFont	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
appData	struct
.	O
mainFont	int
)	O
;	O
player	pointer
->	O
mainFontStruct	pointer
=	O
XQueryFont	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
mainFontID	int
)	O
;	O
player	pointer
->	O
appData	struct
.	O
coordFont	int
=	O
FindFont	function
(	O
player	pointer
->	O
appData	struct
.	O
coordFont	int
,	O
coordFontPxlSize	int
)	O
;	O
player	pointer
->	O
coordFontID	int
=	O
XLoadFont	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
appData	struct
.	O
coordFont	int
)	O
;	O
player	pointer
->	O
coordFontStruct	pointer
=	O
XQueryFont	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
coordFontID	int
)	O
;	O
XtSetArg	function
(	O
player	pointer
->	O
shellArgs	array
[	O
0	int
]	O
,	O
XtNwidth	O
,	O
0	int
)	O
;	O
XtSetArg	function
(	O
player	pointer
->	O
shellArgs	array
[	O
1	int
]	O
,	O
XtNheight	O
,	O
0	int
)	O
;	O
XtSetArg	function
(	O
player	pointer
->	O
shellArgs	array
[	O
2	int
]	O
,	O
XtNminWidth	O
,	O
0	int
)	O
;	O
XtSetArg	function
(	O
player	pointer
->	O
shellArgs	array
[	O
3	int
]	O
,	O
XtNminHeight	O
,	O
0	int
)	O
;	O
XtSetArg	function
(	O
player	pointer
->	O
shellArgs	array
[	O
4	int
]	O
,	O
XtNmaxWidth	O
,	O
0	int
)	O
;	O
XtSetArg	function
(	O
player	pointer
->	O
shellArgs	array
[	O
5	int
]	O
,	O
XtNmaxHeight	O
,	O
0	int
)	O
;	O
XtSetArg	function
(	O
player	pointer
->	O
boardArgs	array
[	O
0	int
]	O
,	O
XtNborderWidth	O
,	O
0	int
)	O
;	O
XtSetArg	function
(	O
player	pointer
->	O
boardArgs	array
[	O
1	int
]	O
,	O
XtNwidth	O
,	O
LINE_GAP	O
+	O
(	O
BOARD_SIZE	O
+	O
4	int
)	O
*	O
(	O
SMALL_SQUARE_SIZE	O
+	O
LINE_GAP	O
)	O
)	O
;	O
XtSetArg	function
(	O
player	pointer
->	O
boardArgs	array
[	O
2	int
]	O
,	O
XtNheight	O
,	O
LINE_GAP	O
+	O
BOARD_SIZE	O
*	O
(	O
SMALL_SQUARE_SIZE	O
+	O
LINE_GAP	O
)	O
)	O
;	O
XtSetArg	function
(	O
player	pointer
->	O
commandsArgs	array
[	O
0	int
]	O
,	O
XtNborderWidth	O
,	O
0	int
)	O
;	O
XtSetArg	function
(	O
player	pointer
->	O
commandsArgs	array
[	O
1	int
]	O
,	O
XtNdefaultColumns	O
,	O
4	int
)	O
;	O
XtSetArg	function
(	O
player	pointer
->	O
commandsArgs	array
[	O
2	int
]	O
,	O
XtNforceColumns	O
,	O
True	O
)	O
;	O
XtSetArg	function
(	O
player	pointer
->	O
commandsArgs	array
[	O
3	int
]	O
,	O
XtNcolumnSpacing	O
,	O
12	int
)	O
;	O
XtSetArg	function
(	O
player	pointer
->	O
commandsArgs	array
[	O
4	int
]	O
,	O
XtNlist	O
,	O
(	O
XtArgVal	O
)	O
buttonStrings	pointer
)	O
;	O
XtSetArg	function
(	O
player	pointer
->	O
commandsArgs	array
[	O
5	int
]	O
,	O
XtNnumberStrings	O
,	O
buttonCount	int
)	O
;	O
XtSetArg	function
(	O
player	pointer
->	O
commandsArgs	array
[	O
6	int
]	O
,	O
XtNfont	O
,	O
player	pointer
->	O
mainFontStruct	pointer
)	O
;	O
XtSetArg	function
(	O
player	pointer
->	O
messageArgs	array
[	O
0	int
]	O
,	O
XtNborderWidth	O
,	O
0	int
)	O
;	O
XtSetArg	function
(	O
player	pointer
->	O
messageArgs	array
[	O
1	int
]	O
,	O
XtNjustify	O
,	O
(	O
XtArgVal	O
)	O
XtJustifyLeft	O
)	O
;	O
XtSetArg	function
(	O
player	pointer
->	O
messageArgs	array
[	O
2	int
]	O
,	O
XtNlabel	O
,	O
(	O
XtArgVal	O
)	O
"starting..."	pointer
)	O
;	O
XtSetArg	function
(	O
player	pointer
->	O
timerArgs	array
[	O
0	int
]	O
,	O
XtNborderWidth	O
,	O
0	int
)	O
;	O
XtSetArg	function
(	O
player	pointer
->	O
timerArgs	array
[	O
1	int
]	O
,	O
XtNjustify	O
,	O
(	O
XtArgVal	O
)	O
XtJustifyLeft	O
)	O
;	O
XtSetArg	function
(	O
player	pointer
->	O
titleArgs	array
[	O
0	int
]	O
,	O
XtNborderWidth	O
,	O
0	int
)	O
;	O
XtSetArg	function
(	O
player	pointer
->	O
titleArgs	array
[	O
1	int
]	O
,	O
XtNjustify	O
,	O
(	O
XtArgVal	O
)	O
XtJustifyLeft	O
)	O
;	O
boardWidth	O
=	O
LINE_GAP	O
+	O
(	O
BOARD_SIZE	O
+	O
4	int
)	O
*	O
(	O
player	pointer
->	O
squareSize	int
+	O
LINE_GAP	O
)	O
;	O
XtSetArg	function
(	O
player	pointer
->	O
boardArgs	array
[	O
1	int
]	O
,	O
XtNwidth	O
,	O
boardWidth	O
)	O
;	O
XtSetArg	function
(	O
player	pointer
->	O
boardArgs	array
[	O
2	int
]	O
,	O
XtNheight	O
,	O
LINE_GAP	O
+	O
BOARD_SIZE	O
*	O
(	O
player	pointer
->	O
squareSize	int
+	O
LINE_GAP	O
)	O
)	O
;	O
player	pointer
->	O
formWidget	int
=	O
XtCreateManagedWidget	function
(	O
"form"	pointer
,	O
formWidgetClass	O
,	O
player	pointer
->	O
shellWidget	int
,	O
NULL	O
,	O
0	int
)	O
;	O
player	pointer
->	O
widgetList	array
[	O
0	int
]	O
=	O
player	pointer
->	O
blackTimerWidget	int
=	O
XtCreateWidget	function
(	O
(	O
local	int
?	O
"black time:"	pointer
:	O
"rblack time:"	pointer
)	O
,	O
labelWidgetClass	O
,	O
player	pointer
->	O
formWidget	int
,	O
player	pointer
->	O
timerArgs	array
,	O
XtNumber	function
(	O
player	pointer
->	O
timerArgs	array
)	O
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNfont	O
,	O
player	pointer
->	O
mainFontStruct	pointer
)	O
;	O
XtSetValues	function
(	O
player	pointer
->	O
blackTimerWidget	int
,	O
args	O
,	O
1	int
)	O
;	O
player	pointer
->	O
widgetList	array
[	O
1	int
]	O
=	O
player	pointer
->	O
whiteTimerWidget	int
=	O
XtCreateWidget	function
(	O
(	O
local	int
?	O
"white time:"	pointer
:	O
"rwhite time:"	pointer
)	O
,	O
labelWidgetClass	O
,	O
player	pointer
->	O
formWidget	int
,	O
player	pointer
->	O
timerArgs	array
,	O
XtNumber	function
(	O
player	pointer
->	O
timerArgs	array
)	O
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNfont	O
,	O
player	pointer
->	O
mainFontStruct	pointer
)	O
;	O
XtSetValues	function
(	O
player	pointer
->	O
whiteTimerWidget	int
,	O
args	O
,	O
1	int
)	O
;	O
player	pointer
->	O
widgetList	array
[	O
2	int
]	O
=	O
player	pointer
->	O
titleWidget	int
=	O
XtCreateWidget	function
(	O
(	O
local	int
?	O
""	pointer
:	O
"r"	pointer
)	O
,	O
labelWidgetClass	O
,	O
player	pointer
->	O
formWidget	int
,	O
player	pointer
->	O
titleArgs	array
,	O
XtNumber	function
(	O
player	pointer
->	O
titleArgs	array
)	O
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNfont	O
,	O
player	pointer
->	O
mainFontStruct	pointer
)	O
;	O
XtSetValues	function
(	O
player	pointer
->	O
titleWidget	int
,	O
args	O
,	O
1	int
)	O
;	O
player	pointer
->	O
widgetList	array
[	O
3	int
]	O
=	O
player	pointer
->	O
messageWidget	int
=	O
XtCreateWidget	function
(	O
(	O
local	int
?	O
"message"	pointer
:	O
"rmessage"	pointer
)	O
,	O
labelWidgetClass	O
,	O
player	pointer
->	O
formWidget	int
,	O
player	pointer
->	O
messageArgs	array
,	O
XtNumber	function
(	O
player	pointer
->	O
messageArgs	array
)	O
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNfont	O
,	O
player	pointer
->	O
mainFontStruct	pointer
)	O
;	O
XtSetValues	function
(	O
player	pointer
->	O
messageWidget	int
,	O
args	O
,	O
1	int
)	O
;	O
player	pointer
->	O
widgetList	array
[	O
4	int
]	O
=	O
player	pointer
->	O
commandsWidget	int
=	O
XtCreateWidget	function
(	O
(	O
local	int
?	O
"commands"	pointer
:	O
"rcommand"	pointer
)	O
,	O
listWidgetClass	O
,	O
player	pointer
->	O
formWidget	int
,	O
player	pointer
->	O
commandsArgs	array
,	O
XtNumber	function
(	O
player	pointer
->	O
commandsArgs	array
)	O
)	O
;	O
player	pointer
->	O
widgetList	array
[	O
5	int
]	O
=	O
player	pointer
->	O
boardWidget	int
=	O
XtCreateWidget	function
(	O
(	O
local	int
?	O
"board"	pointer
:	O
"rboard"	pointer
)	O
,	O
widgetClass	O
,	O
player	pointer
->	O
formWidget	int
,	O
player	pointer
->	O
boardArgs	array
,	O
XtNumber	function
(	O
player	pointer
->	O
boardArgs	array
)	O
)	O
;	O
XtManageChildren	function
(	O
player	pointer
->	O
widgetList	array
,	O
XtNumber	function
(	O
player	pointer
->	O
widgetList	array
)	O
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNfont	O
,	O
&	O
player	pointer
->	O
mainFontStruct	pointer
)	O
;	O
XtGetValues	function
(	O
player	pointer
->	O
blackTimerWidget	int
,	O
args	O
,	O
1	int
)	O
;	O
if	O
(	O
player	pointer
->	O
appData	struct
.	O
clockMode	int
)	O
{	O
timerWidth	O
=	O
XTextWidth	function
(	O
player	pointer
->	O
mainFontStruct	pointer
,	O
"Black: 8:88:88 "	pointer
,	O
15	int
)	O
;	O
}	O
else	O
{	O
timerWidth	O
=	O
XTextWidth	function
(	O
player	pointer
->	O
mainFontStruct	pointer
,	O
"Black  "	pointer
,	O
7	int
)	O
;	O
}	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNwidth	O
,	O
timerWidth	O
)	O
;	O
XtSetValues	function
(	O
player	pointer
->	O
blackTimerWidget	int
,	O
args	O
,	O
1	int
)	O
;	O
XtSetValues	function
(	O
player	pointer
->	O
whiteTimerWidget	int
,	O
args	O
,	O
1	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNbackground	O
,	O
&	O
player	pointer
->	O
timerForegroundPixel	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
1	int
]	O
,	O
XtNforeground	O
,	O
&	O
player	pointer
->	O
timerBackgroundPixel	int
)	O
;	O
XtGetValues	function
(	O
player	pointer
->	O
blackTimerWidget	int
,	O
args	O
,	O
2	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNwidth	O
,	O
&	O
commandsWidth	O
)	O
;	O
XtGetValues	function
(	O
player	pointer
->	O
commandsWidget	int
,	O
args	O
,	O
1	int
)	O
;	O
w	int
=	O
(	O
(	O
commandsWidth	O
>	O
boardWidth	O
)	O
?	O
commandsWidth	O
:	O
boardWidth	O
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNwidth	O
,	O
w	int
-	O
timerWidth	O
*	O
2	int
-	O
12	int
)	O
;	O
XtSetValues	function
(	O
player	pointer
->	O
titleWidget	int
,	O
args	O
,	O
1	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNwidth	O
,	O
w	int
-	O
8	int
)	O
;	O
XtSetValues	function
(	O
player	pointer
->	O
messageWidget	int
,	O
args	O
,	O
1	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNfromHoriz	O
,	O
player	pointer
->	O
blackTimerWidget	int
)	O
;	O
XtSetValues	function
(	O
player	pointer
->	O
whiteTimerWidget	int
,	O
args	O
,	O
1	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNfromHoriz	O
,	O
player	pointer
->	O
whiteTimerWidget	int
)	O
;	O
XtSetValues	function
(	O
player	pointer
->	O
titleWidget	int
,	O
args	O
,	O
1	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNfromVert	O
,	O
player	pointer
->	O
blackTimerWidget	int
)	O
;	O
XtSetValues	function
(	O
player	pointer
->	O
messageWidget	int
,	O
args	O
,	O
1	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNfromVert	O
,	O
player	pointer
->	O
messageWidget	int
)	O
;	O
XtSetValues	function
(	O
player	pointer
->	O
commandsWidget	int
,	O
args	O
,	O
1	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNfromVert	O
,	O
player	pointer
->	O
commandsWidget	int
)	O
;	O
XtSetValues	function
(	O
player	pointer
->	O
boardWidget	int
,	O
args	O
,	O
1	int
)	O
;	O
XtRealizeWidget	function
(	O
player	pointer
->	O
shellWidget	int
)	O
;	O
player	pointer
->	O
xBoardWindow	int
=	O
XtWindow	function
(	O
player	pointer
->	O
boardWidget	int
)	O
;	O
player	pointer
->	O
iconPixmap	int
=	O
XCreateBitmapFromData	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
XtWindow	function
(	O
player	pointer
->	O
shellWidget	int
)	O
,	O
(	O
char	O
*	O
)	O
icon_bits	O
,	O
icon_width	O
,	O
icon_height	O
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNiconPixmap	O
,	O
player	pointer
->	O
iconPixmap	int
)	O
;	O
XtSetValues	function
(	O
player	pointer
->	O
shellWidget	int
,	O
args	O
,	O
1	int
)	O
;	O
window_attributes	O
.	O
cursor	O
=	O
XCreateFontCursor	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
XC_hand2	O
)	O
;	O
XChangeWindowAttributes	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
xBoardWindow	int
,	O
CWCursor	O
,	O
&	O
window_attributes	O
)	O
;	O
player	pointer
->	O
shellArgs	array
[	O
0	int
]	O
.	O
value	O
=	O
(	O
XtArgVal	O
)	O
&	O
w	int
;	O
player	pointer
->	O
shellArgs	array
[	O
1	int
]	O
.	O
value	O
=	O
(	O
XtArgVal	O
)	O
&	O
h	int
;	O
XtGetValues	function
(	O
player	pointer
->	O
shellWidget	int
,	O
player	pointer
->	O
shellArgs	array
,	O
2	int
)	O
;	O
player	pointer
->	O
shellArgs	array
[	O
4	int
]	O
.	O
value	O
=	O
player	pointer
->	O
shellArgs	array
[	O
2	int
]	O
.	O
value	O
=	O
w	int
;	O
player	pointer
->	O
shellArgs	array
[	O
5	int
]	O
.	O
value	O
=	O
player	pointer
->	O
shellArgs	array
[	O
3	int
]	O
.	O
value	O
=	O
h	int
;	O
XtSetValues	function
(	O
player	pointer
->	O
shellWidget	int
,	O
&	O
player	pointer
->	O
shellArgs	array
[	O
2	int
]	O
,	O
4	int
)	O
;	O
player	pointer
->	O
black_pixel_is_zero	int
=	O
(	O
XBlackPixel	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
xScreen	int
)	O
==	O
0	int
)	O
;	O
CreateGCs	function
(	O
)	O
;	O
CreateGrid	function
(	O
)	O
;	O
CreatePieces	function
(	O
)	O
;	O
if	O
(	O
!	O
fromRemotePlayer	int
)	O
CreatePieceMenus	function
(	O
)	O
;	O
XtAddCallback	function
(	O
player	pointer
->	O
commandsWidget	int
,	O
XtNcallback	O
,	O
SelectCommand	function
,	O
(	O
XtPointer	O
)	O
fromRemotePlayer	int
)	O
;	O
if	O
(	O
!	O
fromRemotePlayer	int
)	O
XtAppAddActions	function
(	O
appContext	int
,	O
boardActions	array
,	O
XtNumber	function
(	O
boardActions	array
)	O
)	O
;	O
if	O
(	O
fromRemotePlayer	int
)	O
{	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNtranslations	O
,	O
XtParseTranslationTable	function
(	O
translationsTableReduced	array
)	O
)	O
;	O
XtSetValues	function
(	O
player	pointer
->	O
boardWidget	int
,	O
&	O
args	O
[	O
0	int
]	O
,	O
1	int
)	O
;	O
XtSetValues	function
(	O
localPlayer	struct
.	O
boardWidget	int
,	O
&	O
args	O
[	O
0	int
]	O
,	O
1	int
)	O
;	O
}	O
else	O
{	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNtranslations	O
,	O
XtParseTranslationTable	function
(	O
translationsTable	array
)	O
)	O
;	O
XtSetValues	function
(	O
player	pointer
->	O
boardWidget	int
,	O
&	O
args	O
[	O
0	int
]	O
,	O
1	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNtranslations	O
,	O
XtParseTranslationTable	function
(	O
blackTranslations	array
)	O
)	O
;	O
XtSetValues	function
(	O
player	pointer
->	O
blackTimerWidget	int
,	O
&	O
args	O
[	O
0	int
]	O
,	O
1	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNtranslations	O
,	O
XtParseTranslationTable	function
(	O
whiteTranslations	array
)	O
)	O
;	O
XtSetValues	function
(	O
player	pointer
->	O
whiteTimerWidget	int
,	O
&	O
args	O
[	O
0	int
]	O
,	O
1	int
)	O
;	O
}	O
XtAddEventHandler	function
(	O
player	pointer
->	O
boardWidget	int
,	O
ExposureMask	O
|	O
ButtonPressMask	O
|	O
ButtonReleaseMask	O
|	O
Button1MotionMask	O
|	O
KeyPressMask	O
,	O
False	O
,	O
(	O
XtEventHandler	O
)	O
EventProc	function
,	O
(	O
XtPointer	O
)	O
(	O
player	pointer
==	O
&	O
remotePlayer	struct
)	O
)	O
;	O
sprintf	function
(	O
buf	char
,	O
"xshogi version %s based on "	pointer
"xboard version %s"	pointer
,	O
PACKAGE_VERSION	pointer
,	O
XBOARD_VERSION	pointer
)	O
;	O
if	O
(	O
matchMode	int
!=	O
MatchFalse	O
&&	O
player	pointer
!=	O
&	O
remotePlayer	struct
)	O
{	O
if	O
(	O
player	pointer
->	O
appData	struct
.	O
noShogiProgram	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: can't have a match with no shogi programs!\n"	pointer
,	O
programName	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
DisplayMessage	function
(	O
buf	char
,	O
fromRemotePlayer	int
)	O
;	O
TwoMachinesProc	function
(	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
else	O
{	O
Reset	function
(	O
True	O
)	O
;	O
DisplayMessage	function
(	O
buf	char
,	O
fromRemotePlayer	int
)	O
;	O
}	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
setbuf	function
(	O
stdout	pointer
,	O
NULL	O
)	O
;	O
setbuf	function
(	O
stderr	pointer
,	O
NULL	O
)	O
;	O
for	O
(	O
global_argc	int
=	O
0	int
;	O
global_argc	int
<	O
argc	int
;	O
global_argc	int
++	O
)	O
global_argv	array
[	O
global_argc	int
]	O
=	O
argv	pointer
[	O
global_argc	int
]	O
;	O
programName	O
=	O
strrchr	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
'/'	O
)	O
;	O
if	O
(	O
programName	O
==	O
NULL	O
)	O
programName	O
=	O
argv	pointer
[	O
0	int
]	O
;	O
else	O
programName	O
++	O
;	O
localPlayer	struct
.	O
shellWidget	int
=	O
XtAppInitialize	function
(	O
&	O
appContext	int
,	O
"XShogi"	pointer
,	O
shellOptions	array
,	O
XtNumber	function
(	O
shellOptions	array
)	O
,	O
&	O
argc	int
,	O
argv	pointer
,	O
xshogiResources	array
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
argc	int
>	O
1	int
)	O
Usage	function
(	O
)	O
;	O
if	O
(	O
(	O
shogiDir	O
=	O
(	O
char	O
*	O
)	O
getenv	function
(	O
"SHOGIDIR"	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
shogiDir	O
=	O
"."	pointer
;	O
}	O
else	O
{	O
if	O
(	O
chdir	function
(	O
shogiDir	O
)	O
!=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: can't cd to SHOGIDIR\n"	pointer
,	O
programName	O
)	O
;	O
perror	function
(	O
shogiDir	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
XtGetApplicationResources	function
(	O
localPlayer	struct
.	O
shellWidget	int
,	O
&	O
localPlayer	struct
.	O
appData	struct
,	O
clientResources	array
,	O
XtNumber	function
(	O
clientResources	array
)	O
,	O
NULL	O
,	O
0	int
)	O
;	O
xshogiDebug	int
=	O
localPlayer	struct
.	O
appData	struct
.	O
debugMode	int
;	O
if	O
(	O
strcasecmp	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
matchMode	int
,	O
"Init"	pointer
)	O
==	O
0	int
)	O
{	O
matchMode	int
=	O
MatchInit	O
;	O
}	O
else	O
if	O
(	O
strcasecmp	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
matchMode	int
,	O
"Position"	pointer
)	O
==	O
0	int
)	O
{	O
matchMode	int
=	O
MatchPosition	O
;	O
}	O
else	O
if	O
(	O
strcasecmp	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
matchMode	int
,	O
"Opening"	pointer
)	O
==	O
0	int
)	O
{	O
matchMode	int
=	O
MatchOpening	O
;	O
}	O
else	O
if	O
(	O
strcasecmp	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
matchMode	int
,	O
"False"	pointer
)	O
==	O
0	int
)	O
{	O
matchMode	int
=	O
MatchFalse	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: bad matchMode option %s\n"	pointer
,	O
programName	O
,	O
localPlayer	struct
.	O
appData	struct
.	O
matchMode	int
)	O
;	O
Usage	function
(	O
)	O
;	O
}	O
buttonStrings	pointer
=	O
gnuButtonStrings	array
;	O
buttonProcs	pointer
=	O
gnuButtonProcs	array
;	O
buttonCount	int
=	O
XtNumber	function
(	O
gnuButtonStrings	array
)	O
;	O
player	pointer
=	O
&	O
localPlayer	struct
;	O
CreatePlayerWindow	function
(	O
)	O
;	O
XtAppMainLoop	function
(	O
appContext	int
)	O
;	O
return	O
0	int
;	O
}	O
char	O
*	O
FindFont	function
(	O
char	O
*	O
pattern	pointer
,	O
int	O
targetPxlSize	int
)	O
{	O
char	O
*	O
*	O
fonts	pointer
,	O
*	O
p	pointer
,	O
*	O
best	pointer
;	O
int	O
i	int
,	O
j	int
,	O
nfonts	int
,	O
minerr	int
,	O
err	long
,	O
pxlSize	int
;	O
fonts	pointer
=	O
XListFonts	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
pattern	pointer
,	O
999999	int
,	O
&	O
nfonts	int
)	O
;	O
if	O
(	O
nfonts	int
<	O
1	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: No fonts match pattern %s\n"	pointer
,	O
programName	O
,	O
pattern	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
best	pointer
=	O
""	pointer
;	O
minerr	int
=	O
999999	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nfonts	int
;	O
i	int
++	O
)	O
{	O
j	int
=	O
0	int
;	O
p	pointer
=	O
fonts	pointer
[	O
i	int
]	O
;	O
if	O
(	O
*	O
p	pointer
!=	O
'-'	O
)	O
continue	O
;	O
while	O
(	O
j	int
<	O
7	int
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
NULLCHAR	O
)	O
break	O
;	O
if	O
(	O
*	O
p	pointer
++	O
==	O
'-'	O
)	O
j	int
++	O
;	O
}	O
if	O
(	O
j	int
<	O
7	int
)	O
continue	O
;	O
pxlSize	int
=	O
atoi	function
(	O
p	pointer
)	O
;	O
if	O
(	O
pxlSize	int
==	O
targetPxlSize	int
)	O
{	O
best	pointer
=	O
fonts	pointer
[	O
i	int
]	O
;	O
break	O
;	O
}	O
err	long
=	O
pxlSize	int
-	O
targetPxlSize	int
;	O
if	O
(	O
abs	function
(	O
err	long
)	O
<	O
abs	function
(	O
minerr	int
)	O
||	O
(	O
(	O
minerr	int
>	O
0	int
)	O
&&	O
(	O
err	long
<	O
0	int
)	O
&&	O
(	O
-	O
err	long
==	O
minerr	int
)	O
)	O
)	O
{	O
best	pointer
=	O
fonts	pointer
[	O
i	int
]	O
;	O
minerr	int
=	O
err	long
;	O
}	O
}	O
p	pointer
=	O
(	O
char	O
*	O
)	O
XtMalloc	function
(	O
strlen	function
(	O
best	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
p	pointer
,	O
best	pointer
)	O
;	O
XFreeFontNames	function
(	O
fonts	pointer
)	O
;	O
return	O
p	pointer
;	O
}	O
void	O
CreateGCs	function
(	O
void	O
)	O
{	O
XtGCMask	O
value_mask	O
=	O
GCLineWidth	O
|	O
GCLineStyle	O
|	O
GCForeground	O
|	O
GCBackground	O
|	O
GCFunction	O
|	O
GCPlaneMask	O
;	O
XGCValues	O
gc_values	O
;	O
gc_values	O
.	O
plane_mask	O
=	O
AllPlanes	O
;	O
gc_values	O
.	O
line_width	O
=	O
LINE_GAP	O
;	O
gc_values	O
.	O
line_style	O
=	O
LineSolid	O
;	O
gc_values	O
.	O
function	O
=	O
GXcopy	O
;	O
gc_values	O
.	O
foreground	O
=	O
XBlackPixel	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
xScreen	int
)	O
;	O
gc_values	O
.	O
background	O
=	O
XBlackPixel	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
xScreen	int
)	O
;	O
player	pointer
->	O
lineGC	int
=	O
XtGetGC	function
(	O
player	pointer
->	O
shellWidget	int
,	O
value_mask	O
,	O
&	O
gc_values	O
)	O
;	O
gc_values	O
.	O
background	O
=	O
XWhitePixel	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
xScreen	int
)	O
;	O
player	pointer
->	O
coordGC	int
=	O
XtGetGC	function
(	O
player	pointer
->	O
shellWidget	int
,	O
value_mask	O
,	O
&	O
gc_values	O
)	O
;	O
XSetFont	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
coordGC	int
,	O
player	pointer
->	O
coordFontID	int
)	O
;	O
if	O
(	O
player	pointer
->	O
monoMode	int
)	O
{	O
gc_values	O
.	O
foreground	O
=	O
XWhitePixel	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
xScreen	int
)	O
;	O
gc_values	O
.	O
background	O
=	O
XWhitePixel	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
xScreen	int
)	O
;	O
player	pointer
->	O
squareOffBoardGC	int
=	O
XtGetGC	function
(	O
player	pointer
->	O
shellWidget	int
,	O
value_mask	O
,	O
&	O
gc_values	O
)	O
;	O
player	pointer
->	O
squareGC	int
=	O
XtGetGC	function
(	O
player	pointer
->	O
shellWidget	int
,	O
value_mask	O
,	O
&	O
gc_values	O
)	O
;	O
}	O
else	O
{	O
Pixel	O
bg	long
;	O
Arg	O
args	O
[	O
1	int
]	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNbackground	O
,	O
&	O
bg	long
)	O
;	O
XtGetValues	function
(	O
player	pointer
->	O
shellWidget	int
,	O
args	O
,	O
1	int
)	O
;	O
gc_values	O
.	O
foreground	O
=	O
gc_values	O
.	O
background	O
=	O
bg	long
;	O
player	pointer
->	O
squareOffBoardGC	int
=	O
XtGetGC	function
(	O
player	pointer
->	O
shellWidget	int
,	O
value_mask	O
,	O
&	O
gc_values	O
)	O
;	O
gc_values	O
.	O
foreground	O
=	O
player	pointer
->	O
appData	struct
.	O
squareColor	int
;	O
gc_values	O
.	O
background	O
=	O
player	pointer
->	O
appData	struct
.	O
squareColor	int
;	O
player	pointer
->	O
squareGC	int
=	O
XtGetGC	function
(	O
player	pointer
->	O
shellWidget	int
,	O
value_mask	O
,	O
&	O
gc_values	O
)	O
;	O
gc_values	O
.	O
foreground	O
=	O
player	pointer
->	O
appData	struct
.	O
pieceColor	int
;	O
gc_values	O
.	O
background	O
=	O
bg	long
;	O
player	pointer
->	O
oPieceGC	int
=	O
XtGetGC	function
(	O
player	pointer
->	O
shellWidget	int
,	O
value_mask	O
,	O
&	O
gc_values	O
)	O
;	O
gc_values	O
.	O
foreground	O
=	O
player	pointer
->	O
appData	struct
.	O
pieceColor	int
;	O
gc_values	O
.	O
background	O
=	O
player	pointer
->	O
appData	struct
.	O
squareColor	int
;	O
player	pointer
->	O
pieceGC	int
=	O
XtGetGC	function
(	O
player	pointer
->	O
shellWidget	int
,	O
value_mask	O
,	O
&	O
gc_values	O
)	O
;	O
gc_values	O
.	O
function	O
=	O
(	O
player	pointer
->	O
black_pixel_is_zero	int
?	O
GXand	O
:	O
GXor	O
)	O
;	O
gc_values	O
.	O
foreground	O
=	O
player	pointer
->	O
appData	struct
.	O
charPieceColor	int
;	O
gc_values	O
.	O
background	O
=	O
player	pointer
->	O
appData	struct
.	O
charPieceColor	int
;	O
player	pointer
->	O
charPieceGC	int
=	O
XtGetGC	function
(	O
player	pointer
->	O
shellWidget	int
,	O
value_mask	O
,	O
&	O
gc_values	O
)	O
;	O
}	O
}	O
void	O
CreatePieces	function
(	O
void	O
)	O
{	O
XSynchronize	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
True	O
)	O
;	O
if	O
(	O
player	pointer
->	O
appData	struct
.	O
westernPieceSet	int
)	O
{	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
player	pointer
->	O
reverseBigSolidBitmap	int
,	O
NULL	O
,	O
bigsolidR_bits	O
,	O
bigsolidR_m_bits	O
,	O
bigsolidR_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reverseSmallSolidBitmap	int
,	O
&	O
player	pointer
->	O
reverseSmallSolidBitmap	int
,	O
NULL	O
,	O
smallsolidR_bits	O
,	O
smallsolidR_m_bits	O
,	O
smallsolidR_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
player	pointer
->	O
normalBigSolidBitmap	int
,	O
NULL	O
,	O
bigsolid_bits	O
,	O
bigsolid_m_bits	O
,	O
bigsolid_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalSmallSolidBitmap	int
,	O
&	O
player	pointer
->	O
normalSmallSolidBitmap	int
,	O
NULL	O
,	O
smallsolid_bits	O
,	O
smallsolid_m_bits	O
,	O
smallsolid_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reversePawnBitmap	int
,	O
&	O
player	pointer
->	O
reversePawnBitmap	int
,	O
&	O
player	pointer
->	O
reverseSmallSolidBitmap	int
,	O
pawnRW_bits	O
,	O
pawnRW_bits	O
,	O
pawnRW_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reverseLanceBitmap	int
,	O
&	O
player	pointer
->	O
reverseLanceBitmap	int
,	O
&	O
player	pointer
->	O
reverseSmallSolidBitmap	int
,	O
lanceRW_bits	O
,	O
lanceRW_bits	O
,	O
lanceRW_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reverseKnightBitmap	int
,	O
&	O
player	pointer
->	O
reverseKnightBitmap	int
,	O
&	O
player	pointer
->	O
reverseSmallSolidBitmap	int
,	O
knightRW_bits	O
,	O
knightRW_bits	O
,	O
knightRW_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reverseSilverBitmap	int
,	O
&	O
player	pointer
->	O
reverseSilverBitmap	int
,	O
&	O
player	pointer
->	O
reverseBigSolidBitmap	int
,	O
silverRW_bits	O
,	O
silverRW_bits	O
,	O
silverRW_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reverseGoldBitmap	int
,	O
&	O
player	pointer
->	O
reverseGoldBitmap	int
,	O
&	O
player	pointer
->	O
reverseBigSolidBitmap	int
,	O
goldRW_bits	O
,	O
goldRW_bits	O
,	O
goldRW_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reverseRookBitmap	int
,	O
&	O
player	pointer
->	O
reverseRookBitmap	int
,	O
&	O
player	pointer
->	O
reverseBigSolidBitmap	int
,	O
rookRW_bits	O
,	O
rookRW_bits	O
,	O
rookRW_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reverseBishopBitmap	int
,	O
&	O
player	pointer
->	O
reverseBishopBitmap	int
,	O
&	O
player	pointer
->	O
reverseBigSolidBitmap	int
,	O
bishopRW_bits	O
,	O
bishopRW_bits	O
,	O
bishopRW_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reversePPawnBitmap	int
,	O
&	O
player	pointer
->	O
reversePPawnBitmap	int
,	O
&	O
player	pointer
->	O
reverseSmallSolidBitmap	int
,	O
pawnPRW_bits	O
,	O
pawnPRW_bits	O
,	O
pawnPRW_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reversePLanceBitmap	int
,	O
&	O
player	pointer
->	O
reversePLanceBitmap	int
,	O
&	O
player	pointer
->	O
reverseSmallSolidBitmap	int
,	O
lancePRW_bits	O
,	O
lancePRW_bits	O
,	O
lancePRW_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reversePKnightBitmap	int
,	O
&	O
player	pointer
->	O
reversePKnightBitmap	int
,	O
&	O
player	pointer
->	O
reverseSmallSolidBitmap	int
,	O
knightPRW_bits	O
,	O
knightPRW_bits	O
,	O
knightPRW_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reversePSilverBitmap	int
,	O
&	O
player	pointer
->	O
reversePSilverBitmap	int
,	O
&	O
player	pointer
->	O
reverseBigSolidBitmap	int
,	O
silverPRW_bits	O
,	O
silverPRW_bits	O
,	O
silverPRW_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reversePRookBitmap	int
,	O
&	O
player	pointer
->	O
reversePRookBitmap	int
,	O
&	O
player	pointer
->	O
reverseBigSolidBitmap	int
,	O
rookPRW_bits	O
,	O
rookPRW_bits	O
,	O
rookPRW_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reversePBishopBitmap	int
,	O
&	O
player	pointer
->	O
reversePBishopBitmap	int
,	O
&	O
player	pointer
->	O
reverseBigSolidBitmap	int
,	O
bishopPRW_bits	O
,	O
bishopPRW_bits	O
,	O
bishopPRW_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reverseKingBitmap	int
,	O
&	O
player	pointer
->	O
reverseKingBitmap	int
,	O
&	O
player	pointer
->	O
reverseBigSolidBitmap	int
,	O
kingRW_bits	O
,	O
kingRW_bits	O
,	O
kingRW_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalPawnBitmap	int
,	O
&	O
player	pointer
->	O
normalPawnBitmap	int
,	O
&	O
player	pointer
->	O
normalSmallSolidBitmap	int
,	O
pawnW_bits	O
,	O
pawnW_bits	O
,	O
pawnW_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalLanceBitmap	int
,	O
&	O
player	pointer
->	O
normalLanceBitmap	int
,	O
&	O
player	pointer
->	O
normalSmallSolidBitmap	int
,	O
lanceW_bits	O
,	O
lanceW_bits	O
,	O
lanceW_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalKnightBitmap	int
,	O
&	O
player	pointer
->	O
normalKnightBitmap	int
,	O
&	O
player	pointer
->	O
normalSmallSolidBitmap	int
,	O
knightW_bits	O
,	O
knightW_bits	O
,	O
knightW_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalSilverBitmap	int
,	O
&	O
player	pointer
->	O
normalSilverBitmap	int
,	O
&	O
player	pointer
->	O
normalBigSolidBitmap	int
,	O
silverW_bits	O
,	O
silverW_bits	O
,	O
silverW_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalGoldBitmap	int
,	O
&	O
player	pointer
->	O
normalGoldBitmap	int
,	O
&	O
player	pointer
->	O
normalBigSolidBitmap	int
,	O
goldW_bits	O
,	O
goldW_bits	O
,	O
goldW_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalRookBitmap	int
,	O
&	O
player	pointer
->	O
normalRookBitmap	int
,	O
&	O
player	pointer
->	O
normalBigSolidBitmap	int
,	O
rookW_bits	O
,	O
rookW_bits	O
,	O
rookW_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalBishopBitmap	int
,	O
&	O
player	pointer
->	O
normalBishopBitmap	int
,	O
&	O
player	pointer
->	O
normalBigSolidBitmap	int
,	O
bishopW_bits	O
,	O
bishopW_bits	O
,	O
bishopW_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalPPawnBitmap	int
,	O
&	O
player	pointer
->	O
normalPPawnBitmap	int
,	O
&	O
player	pointer
->	O
normalSmallSolidBitmap	int
,	O
pawnPW_bits	O
,	O
pawnPW_bits	O
,	O
pawnPW_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalPLanceBitmap	int
,	O
&	O
player	pointer
->	O
normalPLanceBitmap	int
,	O
&	O
player	pointer
->	O
normalSmallSolidBitmap	int
,	O
lancePW_bits	O
,	O
lancePW_bits	O
,	O
lancePW_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalPKnightBitmap	int
,	O
&	O
player	pointer
->	O
normalPKnightBitmap	int
,	O
&	O
player	pointer
->	O
normalSmallSolidBitmap	int
,	O
knightPW_bits	O
,	O
knightPW_bits	O
,	O
knightPW_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalPSilverBitmap	int
,	O
&	O
player	pointer
->	O
normalPSilverBitmap	int
,	O
&	O
player	pointer
->	O
normalBigSolidBitmap	int
,	O
silverPW_bits	O
,	O
silverPW_bits	O
,	O
silverPW_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalPRookBitmap	int
,	O
&	O
player	pointer
->	O
normalPRookBitmap	int
,	O
&	O
player	pointer
->	O
normalBigSolidBitmap	int
,	O
rookPW_bits	O
,	O
rookPW_bits	O
,	O
rookPW_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalPBishopBitmap	int
,	O
&	O
player	pointer
->	O
normalPBishopBitmap	int
,	O
&	O
player	pointer
->	O
normalBigSolidBitmap	int
,	O
bishopPW_bits	O
,	O
bishopPW_bits	O
,	O
bishopPW_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalKingBitmap	int
,	O
&	O
player	pointer
->	O
normalKingBitmap	int
,	O
&	O
player	pointer
->	O
normalBigSolidBitmap	int
,	O
kingW_bits	O
,	O
kingW_bits	O
,	O
kingW_bits	O
)	O
;	O
}	O
else	O
{	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reverseBigSolidBitmap	int
,	O
&	O
player	pointer
->	O
reverseBigSolidBitmap	int
,	O
NULL	O
,	O
bigsolidR_bits	O
,	O
bigsolidR_m_bits	O
,	O
bigsolidR_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reverseSmallSolidBitmap	int
,	O
&	O
player	pointer
->	O
reverseSmallSolidBitmap	int
,	O
NULL	O
,	O
smallsolidR_bits	O
,	O
smallsolidR_m_bits	O
,	O
smallsolidR_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalBigSolidBitmap	int
,	O
&	O
player	pointer
->	O
normalBigSolidBitmap	int
,	O
NULL	O
,	O
bigsolid_bits	O
,	O
bigsolid_m_bits	O
,	O
bigsolid_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalSmallSolidBitmap	int
,	O
&	O
player	pointer
->	O
normalSmallSolidBitmap	int
,	O
NULL	O
,	O
smallsolid_bits	O
,	O
smallsolid_m_bits	O
,	O
smallsolid_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reversePawnBitmap	int
,	O
&	O
player	pointer
->	O
reversePawnBitmap	int
,	O
&	O
player	pointer
->	O
reverseSmallSolidBitmap	int
,	O
pawnR_bits	O
,	O
pawnR_m_bits	O
,	O
pawnR_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reverseLanceBitmap	int
,	O
&	O
player	pointer
->	O
reverseLanceBitmap	int
,	O
&	O
player	pointer
->	O
reverseSmallSolidBitmap	int
,	O
lanceR_bits	O
,	O
lanceR_m_bits	O
,	O
lanceR_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reverseKnightBitmap	int
,	O
&	O
player	pointer
->	O
reverseKnightBitmap	int
,	O
&	O
player	pointer
->	O
reverseSmallSolidBitmap	int
,	O
knightR_bits	O
,	O
knightR_m_bits	O
,	O
knightR_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reverseSilverBitmap	int
,	O
&	O
player	pointer
->	O
reverseSilverBitmap	int
,	O
&	O
player	pointer
->	O
reverseBigSolidBitmap	int
,	O
silverR_bits	O
,	O
silverR_m_bits	O
,	O
silverR_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reverseGoldBitmap	int
,	O
&	O
player	pointer
->	O
reverseGoldBitmap	int
,	O
&	O
player	pointer
->	O
reverseBigSolidBitmap	int
,	O
goldR_bits	O
,	O
goldR_m_bits	O
,	O
goldR_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reverseRookBitmap	int
,	O
&	O
player	pointer
->	O
reverseRookBitmap	int
,	O
&	O
player	pointer
->	O
reverseBigSolidBitmap	int
,	O
rookR_bits	O
,	O
rookR_m_bits	O
,	O
rookR_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reverseBishopBitmap	int
,	O
&	O
player	pointer
->	O
reverseBishopBitmap	int
,	O
&	O
player	pointer
->	O
reverseBigSolidBitmap	int
,	O
bishopR_bits	O
,	O
bishopR_m_bits	O
,	O
bishopR_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reversePPawnBitmap	int
,	O
&	O
player	pointer
->	O
reversePPawnBitmap	int
,	O
&	O
player	pointer
->	O
reverseSmallSolidBitmap	int
,	O
pawnPR_bits	O
,	O
pawnPR_m_bits	O
,	O
pawnPR_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reversePLanceBitmap	int
,	O
&	O
player	pointer
->	O
reversePLanceBitmap	int
,	O
&	O
player	pointer
->	O
reverseSmallSolidBitmap	int
,	O
lancePR_bits	O
,	O
lancePR_m_bits	O
,	O
lancePR_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reversePKnightBitmap	int
,	O
&	O
player	pointer
->	O
reversePKnightBitmap	int
,	O
&	O
player	pointer
->	O
reverseSmallSolidBitmap	int
,	O
knightPR_bits	O
,	O
knightPR_m_bits	O
,	O
knightPR_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reversePSilverBitmap	int
,	O
&	O
player	pointer
->	O
reversePSilverBitmap	int
,	O
&	O
player	pointer
->	O
reverseBigSolidBitmap	int
,	O
silverPR_bits	O
,	O
silverPR_m_bits	O
,	O
silverPR_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reversePRookBitmap	int
,	O
&	O
player	pointer
->	O
reversePRookBitmap	int
,	O
&	O
player	pointer
->	O
reverseBigSolidBitmap	int
,	O
rookPR_bits	O
,	O
rookPR_m_bits	O
,	O
rookPR_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reversePBishopBitmap	int
,	O
&	O
player	pointer
->	O
reversePBishopBitmap	int
,	O
&	O
player	pointer
->	O
reverseBigSolidBitmap	int
,	O
bishopPR_bits	O
,	O
bishopPR_m_bits	O
,	O
bishopPR_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
reverseKingBitmap	int
,	O
&	O
player	pointer
->	O
reverseKingBitmap	int
,	O
&	O
player	pointer
->	O
reverseBigSolidBitmap	int
,	O
kingR_bits	O
,	O
kingR_m_bits	O
,	O
kingR_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalPawnBitmap	int
,	O
&	O
player	pointer
->	O
normalPawnBitmap	int
,	O
&	O
player	pointer
->	O
normalSmallSolidBitmap	int
,	O
pawn_bits	O
,	O
pawn_m_bits	O
,	O
pawn_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalLanceBitmap	int
,	O
&	O
player	pointer
->	O
normalLanceBitmap	int
,	O
&	O
player	pointer
->	O
normalSmallSolidBitmap	int
,	O
lance_bits	O
,	O
lance_m_bits	O
,	O
lance_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalKnightBitmap	int
,	O
&	O
player	pointer
->	O
normalKnightBitmap	int
,	O
&	O
player	pointer
->	O
normalSmallSolidBitmap	int
,	O
knight_bits	O
,	O
knight_m_bits	O
,	O
knight_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalSilverBitmap	int
,	O
&	O
player	pointer
->	O
normalSilverBitmap	int
,	O
&	O
player	pointer
->	O
normalBigSolidBitmap	int
,	O
silver_bits	O
,	O
silver_m_bits	O
,	O
silver_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalGoldBitmap	int
,	O
&	O
player	pointer
->	O
normalGoldBitmap	int
,	O
&	O
player	pointer
->	O
normalBigSolidBitmap	int
,	O
gold_bits	O
,	O
gold_m_bits	O
,	O
gold_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalRookBitmap	int
,	O
&	O
player	pointer
->	O
normalRookBitmap	int
,	O
&	O
player	pointer
->	O
normalBigSolidBitmap	int
,	O
rook_bits	O
,	O
rook_m_bits	O
,	O
rook_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalBishopBitmap	int
,	O
&	O
player	pointer
->	O
normalBishopBitmap	int
,	O
&	O
player	pointer
->	O
normalBigSolidBitmap	int
,	O
bishop_bits	O
,	O
bishop_m_bits	O
,	O
bishop_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalPPawnBitmap	int
,	O
&	O
player	pointer
->	O
normalPPawnBitmap	int
,	O
&	O
player	pointer
->	O
normalSmallSolidBitmap	int
,	O
pawnP_bits	O
,	O
pawnP_m_bits	O
,	O
pawnP_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalPLanceBitmap	int
,	O
&	O
player	pointer
->	O
normalPLanceBitmap	int
,	O
&	O
player	pointer
->	O
normalSmallSolidBitmap	int
,	O
lanceP_bits	O
,	O
lanceP_m_bits	O
,	O
lanceP_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalPKnightBitmap	int
,	O
&	O
player	pointer
->	O
normalPKnightBitmap	int
,	O
&	O
player	pointer
->	O
normalSmallSolidBitmap	int
,	O
knightP_bits	O
,	O
knightP_m_bits	O
,	O
knightP_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalPSilverBitmap	int
,	O
&	O
player	pointer
->	O
normalPSilverBitmap	int
,	O
&	O
player	pointer
->	O
normalBigSolidBitmap	int
,	O
silverP_bits	O
,	O
silverP_m_bits	O
,	O
silverP_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalPRookBitmap	int
,	O
&	O
player	pointer
->	O
normalPRookBitmap	int
,	O
&	O
player	pointer
->	O
normalBigSolidBitmap	int
,	O
rookP_bits	O
,	O
rookP_m_bits	O
,	O
rookP_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalPBishopBitmap	int
,	O
&	O
player	pointer
->	O
normalPBishopBitmap	int
,	O
&	O
player	pointer
->	O
normalBigSolidBitmap	int
,	O
bishopP_bits	O
,	O
bishopP_m_bits	O
,	O
bishopP_l_bits	O
)	O
;	O
ReadBitmap	function
(	O
player	pointer
->	O
appData	struct
.	O
normalKingBitmap	int
,	O
&	O
player	pointer
->	O
normalKingBitmap	int
,	O
&	O
player	pointer
->	O
normalBigSolidBitmap	int
,	O
king_bits	O
,	O
king_m_bits	O
,	O
king_l_bits	O
)	O
;	O
}	O
XSynchronize	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
False	O
)	O
;	O
}	O
int	O
ReadBitmapFile	function
(	O
Display	O
*	O
display	pointer
,	O
Drawable	O
d	int
,	O
char	O
*	O
filename	pointer
,	O
unsigned	O
int	O
*	O
width_return	pointer
,	O
unsigned	O
int	O
*	O
height_return	pointer
,	O
Pixmap	O
*	O
bitmap_return	pointer
,	O
int	O
*	O
x_hot_return	pointer
,	O
int	O
*	O
y_hot_return	pointer
)	O
{	O
int	O
n	int
;	O
if	O
(	O
(	O
n	int
=	O
XReadBitmapFile	function
(	O
display	pointer
,	O
d	int
,	O
filename	pointer
,	O
width_return	pointer
,	O
height_return	pointer
,	O
bitmap_return	pointer
,	O
x_hot_return	pointer
,	O
y_hot_return	pointer
)	O
)	O
!=	O
BitmapSuccess	O
)	O
{	O
return	O
n	int
;	O
}	O
else	O
{	O
return	O
BitmapSuccess	O
;	O
}	O
}	O
void	O
ReadBitmap	function
(	O
String	O
name	pointer
,	O
Pixmap	O
*	O
pm	pointer
,	O
Pixmap	O
*	O
qm	pointer
,	O
unsigned	O
char	O
*	O
small_bits	pointer
,	O
unsigned	O
char	O
*	O
medium_bits	pointer
,	O
unsigned	O
char	O
*	O
large_bits	pointer
)	O
{	O
int	O
x_hot	int
,	O
y_hot	int
;	O
unsigned	O
int	O
w	int
,	O
h	int
;	O
if	O
(	O
(	O
name	pointer
==	O
NULL	O
)	O
||	O
(	O
ReadBitmapFile	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
xBoardWindow	int
,	O
name	pointer
,	O
&	O
w	int
,	O
&	O
h	int
,	O
pm	pointer
,	O
&	O
x_hot	int
,	O
&	O
y_hot	int
)	O
!=	O
BitmapSuccess	O
)	O
||	O
(	O
w	int
!=	O
player	pointer
->	O
squareSize	int
)	O
||	O
(	O
h	int
!=	O
player	pointer
->	O
squareSize	int
)	O
)	O
{	O
unsigned	O
long	O
fg	long
,	O
bg	long
;	O
unsigned	O
int	O
depth	int
;	O
depth	int
=	O
DisplayPlanes	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
xScreen	int
)	O
;	O
if	O
(	O
player	pointer
->	O
monoMode	int
)	O
{	O
fg	long
=	O
XBlackPixel	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
xScreen	int
)	O
;	O
bg	long
=	O
XWhitePixel	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
xScreen	int
)	O
;	O
}	O
else	O
if	O
(	O
qm	pointer
==	O
NULL	O
)	O
{	O
fg	long
=	O
player	pointer
->	O
appData	struct
.	O
oneColor	int
;	O
bg	long
=	O
player	pointer
->	O
appData	struct
.	O
zeroColor	int
;	O
}	O
else	O
{	O
fg	long
=	O
(	O
player	pointer
->	O
black_pixel_is_zero	int
?	O
0	int
:	O
~	O
0	int
)	O
;	O
bg	long
=	O
(	O
player	pointer
->	O
black_pixel_is_zero	int
?	O
~	O
0	int
:	O
0	int
)	O
;	O
}	O
switch	O
(	O
player	pointer
->	O
boardSize	int
)	O
{	O
case	O
Large	O
:	O
*	O
pm	pointer
=	O
XCreatePixmapFromBitmapData	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
xBoardWindow	int
,	O
(	O
char	O
*	O
)	O
large_bits	pointer
,	O
player	pointer
->	O
squareSize	int
,	O
player	pointer
->	O
squareSize	int
,	O
fg	long
,	O
bg	long
,	O
depth	int
)	O
;	O
break	O
;	O
case	O
Medium	O
:	O
*	O
pm	pointer
=	O
XCreatePixmapFromBitmapData	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
xBoardWindow	int
,	O
(	O
char	O
*	O
)	O
medium_bits	pointer
,	O
player	pointer
->	O
squareSize	int
,	O
player	pointer
->	O
squareSize	int
,	O
fg	long
,	O
bg	long
,	O
depth	int
)	O
;	O
break	O
;	O
case	O
Small	O
:	O
*	O
pm	pointer
=	O
XCreatePixmapFromBitmapData	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
xBoardWindow	int
,	O
(	O
char	O
*	O
)	O
small_bits	pointer
,	O
player	pointer
->	O
squareSize	int
,	O
player	pointer
->	O
squareSize	int
,	O
fg	long
,	O
bg	long
,	O
depth	int
)	O
;	O
break	O
;	O
}	O
}	O
}	O
void	O
CreateGrid	function
(	O
void	O
)	O
{	O
int	O
i	int
,	O
offset	int
;	O
offset	int
=	O
2	int
*	O
(	O
player	pointer
->	O
squareSize	int
+	O
LINE_GAP	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
BOARD_SIZE	O
+	O
1	int
;	O
i	int
++	O
)	O
{	O
player	pointer
->	O
gridSegments	int
[	O
i	int
]	O
.	O
x1	O
=	O
offset	int
;	O
player	pointer
->	O
gridSegments	int
[	O
i	int
+	O
BOARD_SIZE	O
+	O
1	int
]	O
.	O
y1	O
=	O
0	int
;	O
player	pointer
->	O
gridSegments	int
[	O
i	int
]	O
.	O
y1	O
=	O
player	pointer
->	O
gridSegments	int
[	O
i	int
]	O
.	O
y2	O
=	O
LINE_GAP	O
/	O
2	int
+	O
(	O
i	int
*	O
(	O
player	pointer
->	O
squareSize	int
+	O
LINE_GAP	O
)	O
)	O
;	O
player	pointer
->	O
gridSegments	int
[	O
i	int
]	O
.	O
x2	O
=	O
LINE_GAP	O
+	O
BOARD_SIZE	O
*	O
(	O
player	pointer
->	O
squareSize	int
+	O
LINE_GAP	O
)	O
+	O
offset	int
;	O
player	pointer
->	O
gridSegments	int
[	O
i	int
+	O
BOARD_SIZE	O
+	O
1	int
]	O
.	O
x1	O
=	O
player	pointer
->	O
gridSegments	int
[	O
i	int
+	O
BOARD_SIZE	O
+	O
1	int
]	O
.	O
x2	O
=	O
LINE_GAP	O
/	O
2	int
+	O
(	O
i	int
*	O
(	O
player	pointer
->	O
squareSize	int
+	O
LINE_GAP	O
)	O
)	O
+	O
offset	int
;	O
player	pointer
->	O
gridSegments	int
[	O
i	int
+	O
BOARD_SIZE	O
+	O
1	int
]	O
.	O
y2	O
=	O
BOARD_SIZE	O
*	O
(	O
player	pointer
->	O
squareSize	int
+	O
LINE_GAP	O
)	O
;	O
}	O
}	O
void	O
CreatePieceMenus	function
(	O
void	O
)	O
{	O
int	O
i	int
;	O
Widget	O
entry	O
;	O
Arg	O
args	O
[	O
1	int
]	O
;	O
ShogiSquare	O
selection	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNlabel	O
,	O
"Black"	pointer
)	O
;	O
blackPieceMenu	int
=	O
XtCreatePopupShell	function
(	O
"menuW"	pointer
,	O
simpleMenuWidgetClass	O
,	O
localPlayer	struct
.	O
boardWidget	int
,	O
args	O
,	O
1	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
PIECE_MENU_SIZE	int
;	O
i	int
++	O
)	O
{	O
String	O
item	O
=	O
pieceMenuStrings	array
[	O
i	int
]	O
;	O
if	O
(	O
strcmp	function
(	O
item	O
,	O
"----"	pointer
)	O
==	O
0	int
)	O
{	O
entry	O
=	O
XtCreateManagedWidget	function
(	O
item	O
,	O
smeLineObjectClass	O
,	O
blackPieceMenu	int
,	O
NULL	O
,	O
0	int
)	O
;	O
}	O
else	O
{	O
entry	O
=	O
XtCreateManagedWidget	function
(	O
item	O
,	O
smeBSBObjectClass	O
,	O
blackPieceMenu	int
,	O
NULL	O
,	O
0	int
)	O
;	O
selection	O
=	O
pieceMenuTranslation	array
[	O
0	int
]	O
[	O
i	int
]	O
;	O
XtAddCallback	function
(	O
entry	O
,	O
XtNcallback	O
,	O
(	O
XtCallbackProc	O
)	O
PieceMenuSelect	function
,	O
(	O
XtPointer	O
)	O
selection	O
)	O
;	O
if	O
(	O
selection	O
==	O
BlackPawn	O
)	O
{	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNpopupOnEntry	O
,	O
entry	O
)	O
;	O
XtSetValues	function
(	O
blackPieceMenu	int
,	O
args	O
,	O
1	int
)	O
;	O
}	O
}	O
}	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNlabel	O
,	O
"White"	pointer
)	O
;	O
whitePieceMenu	O
=	O
XtCreatePopupShell	function
(	O
"menuB"	pointer
,	O
simpleMenuWidgetClass	O
,	O
localPlayer	struct
.	O
boardWidget	int
,	O
args	O
,	O
1	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
PIECE_MENU_SIZE	int
;	O
i	int
++	O
)	O
{	O
String	O
item	O
=	O
pieceMenuStrings	array
[	O
i	int
]	O
;	O
if	O
(	O
strcmp	function
(	O
item	O
,	O
"----"	pointer
)	O
==	O
0	int
)	O
{	O
entry	O
=	O
XtCreateManagedWidget	function
(	O
item	O
,	O
smeLineObjectClass	O
,	O
whitePieceMenu	O
,	O
NULL	O
,	O
0	int
)	O
;	O
}	O
else	O
{	O
entry	O
=	O
XtCreateManagedWidget	function
(	O
item	O
,	O
smeBSBObjectClass	O
,	O
whitePieceMenu	O
,	O
NULL	O
,	O
0	int
)	O
;	O
selection	O
=	O
pieceMenuTranslation	array
[	O
1	int
]	O
[	O
i	int
]	O
;	O
XtAddCallback	function
(	O
entry	O
,	O
XtNcallback	O
,	O
(	O
XtCallbackProc	O
)	O
PieceMenuSelect	function
,	O
(	O
XtPointer	O
)	O
selection	O
)	O
;	O
if	O
(	O
selection	O
==	O
WhitePawn	O
)	O
{	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNpopupOnEntry	O
,	O
entry	O
)	O
;	O
XtSetValues	function
(	O
whitePieceMenu	O
,	O
args	O
,	O
1	int
)	O
;	O
}	O
}	O
}	O
XtRegisterGrabAction	function
(	O
PieceMenuPopup	function
,	O
True	O
,	O
(	O
unsigned	O
)	O
(	O
ButtonPressMask	O
|	O
ButtonReleaseMask	O
)	O
,	O
GrabModeAsync	O
,	O
GrabModeAsync	O
)	O
;	O
}	O
void	O
PieceMenuPopup	function
(	O
Widget	O
w	int
,	O
XEvent	O
*	O
event	pointer
,	O
String	O
*	O
params	pointer
,	O
Cardinal	O
*	O
num_params	pointer
)	O
{	O
if	O
(	O
event	pointer
->	O
type	O
!=	O
ButtonPress	O
)	O
return	O
;	O
if	O
(	O
gameMode	int
!=	O
EditPosition	O
)	O
return	O
;	O
if	O
(	O
(	O
(	O
pmFromX	int
=	O
EventToXSquare	function
(	O
event	pointer
->	O
xbutton	O
.	O
x	int
)	O
)	O
<	O
1	int
)	O
||	O
(	O
pmFromX	int
>	O
BOARD_SIZE	O
+	O
2	int
)	O
||	O
(	O
(	O
pmFromY	int
=	O
EventToSquare	function
(	O
event	pointer
->	O
xbutton	O
.	O
y	int
)	O
)	O
<	O
0	int
)	O
)	O
{	O
pmFromX	int
=	O
pmFromY	int
=	O
-	O
1	int
;	O
return	O
;	O
}	O
if	O
(	O
localPlayer	struct
.	O
flipView	int
)	O
pmFromX	int
=	O
BOARD_SIZE	O
+	O
3	int
-	O
pmFromX	int
;	O
else	O
pmFromY	int
=	O
BOARD_SIZE	O
-	O
1	int
-	O
pmFromY	int
;	O
XtPopupSpringLoaded	function
(	O
XtNameToWidget	function
(	O
localPlayer	struct
.	O
boardWidget	int
,	O
params	pointer
[	O
0	int
]	O
)	O
)	O
;	O
}	O
static	O
void	O
PieceMenuSelect	function
(	O
Widget	O
w	int
,	O
ShogiSquare	O
piece	int
,	O
char	O
*	O
junk	pointer
)	O
{	O
if	O
(	O
(	O
pmFromX	int
<	O
0	int
)	O
||	O
(	O
pmFromY	int
<	O
0	int
)	O
)	O
return	O
;	O
if	O
(	O
off_board	O
(	O
pmFromX	int
)	O
)	O
{	O
int	O
i	int
,	O
c	int
;	O
switch	O
(	O
piece	int
)	O
{	O
case	O
ClearBoard	O
:	O
break	O
;	O
case	O
BlackPlay	O
:	O
break	O
;	O
case	O
WhitePlay	O
:	O
break	O
;	O
default	O
:	O
i	int
=	O
pieceToCatchedIndex	array
[	O
piece	int
]	O
;	O
c	int
=	O
(	O
piece	int
>=	O
WhitePawn	O
)	O
;	O
catches	int
[	O
0	int
]	O
[	O
c	int
]	O
[	O
i	int
]	O
++	O
;	O
DrawPosition	function
(	O
localPlayer	struct
.	O
boardWidget	int
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
XSync	function
(	O
localPlayer	struct
.	O
xDisplay	pointer
,	O
False	O
)	O
;	O
return	O
;	O
}	O
}	O
pmFromX	int
-=	O
2	int
;	O
switch	O
(	O
piece	int
)	O
{	O
case	O
ClearBoard	O
:	O
for	O
(	O
pmFromY	int
=	O
0	int
;	O
pmFromY	int
<	O
BOARD_SIZE	O
;	O
pmFromY	int
++	O
)	O
for	O
(	O
pmFromX	int
=	O
0	int
;	O
pmFromX	int
<	O
BOARD_SIZE	O
;	O
pmFromX	int
++	O
)	O
boards	int
[	O
0	int
]	O
[	O
pmFromY	int
]	O
[	O
pmFromX	int
]	O
=	O
EmptySquare	O
;	O
ClearCatches	function
(	O
catches	int
[	O
0	int
]	O
)	O
;	O
DrawPosition	function
(	O
localPlayer	struct
.	O
boardWidget	int
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
break	O
;	O
case	O
BlackPlay	O
:	O
SetBlackToPlay	function
(	O
)	O
;	O
break	O
;	O
case	O
WhitePlay	O
:	O
SetWhiteToPlay	function
(	O
)	O
;	O
break	O
;	O
default	O
:	O
boards	int
[	O
0	int
]	O
[	O
pmFromY	int
]	O
[	O
pmFromX	int
]	O
=	O
piece	int
;	O
DrawPosition	function
(	O
localPlayer	struct
.	O
boardWidget	int
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
break	O
;	O
}	O
XSync	function
(	O
localPlayer	struct
.	O
xDisplay	pointer
,	O
False	O
)	O
;	O
}	O
static	O
void	O
SetBlackToPlay	function
(	O
void	O
)	O
{	O
int	O
saveCM	int
;	O
if	O
(	O
gameMode	int
!=	O
EditPosition	O
)	O
return	O
;	O
whitePlaysFirst	int
=	O
False	O
;	O
saveCM	int
=	O
currentMove	int
;	O
currentMove	int
=	O
0	int
;	O
DisplayClocks	function
(	O
ReDisplayTimers	O
)	O
;	O
currentMove	int
=	O
saveCM	int
;	O
}	O
static	O
void	O
SetWhiteToPlay	function
(	O
void	O
)	O
{	O
int	O
saveCM	int
;	O
if	O
(	O
gameMode	int
!=	O
EditPosition	O
)	O
return	O
;	O
whitePlaysFirst	int
=	O
True	O
;	O
saveCM	int
=	O
currentMove	int
;	O
currentMove	int
=	O
1	int
;	O
DisplayClocks	function
(	O
ReDisplayTimers	O
)	O
;	O
currentMove	int
=	O
saveCM	int
;	O
}	O
int	O
EventToSquare	function
(	O
int	O
x	int
)	O
{	O
if	O
(	O
x	int
<	O
LINE_GAP	O
)	O
return	O
-	O
1	int
;	O
x	int
-=	O
LINE_GAP	O
;	O
if	O
(	O
(	O
x	int
%	O
(	O
player	pointer
->	O
squareSize	int
+	O
LINE_GAP	O
)	O
)	O
>=	O
player	pointer
->	O
squareSize	int
)	O
return	O
-	O
1	int
;	O
x	int
/=	O
(	O
player	pointer
->	O
squareSize	int
+	O
LINE_GAP	O
)	O
;	O
if	O
(	O
x	int
>=	O
BOARD_SIZE	O
)	O
return	O
-	O
1	int
;	O
return	O
x	int
;	O
}	O
int	O
EventToXSquare	function
(	O
int	O
x	int
)	O
{	O
if	O
(	O
x	int
<	O
LINE_GAP	O
)	O
return	O
-	O
1	int
;	O
x	int
-=	O
LINE_GAP	O
;	O
if	O
(	O
(	O
x	int
%	O
(	O
player	pointer
->	O
squareSize	int
+	O
LINE_GAP	O
)	O
)	O
>=	O
player	pointer
->	O
squareSize	int
)	O
return	O
-	O
1	int
;	O
x	int
/=	O
(	O
player	pointer
->	O
squareSize	int
+	O
LINE_GAP	O
)	O
;	O
if	O
(	O
x	int
>=	O
BOARD_SIZE	O
+	O
4	int
)	O
return	O
-	O
1	int
;	O
return	O
x	int
;	O
}	O
ShogiSquare	O
CharToPiece	function
(	O
int	O
c	int
,	O
int	O
p	pointer
)	O
{	O
if	O
(	O
p	pointer
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
default	O
:	O
case	O
'.'	O
:	O
return	O
EmptySquare	O
;	O
case	O
'P'	O
:	O
return	O
BlackPPawn	O
;	O
case	O
'L'	O
:	O
return	O
BlackPLance	O
;	O
case	O
'N'	O
:	O
return	O
BlackPKnight	O
;	O
case	O
'S'	O
:	O
return	O
BlackPSilver	O
;	O
case	O
'G'	O
:	O
return	O
BlackGold	O
;	O
case	O
'R'	O
:	O
return	O
BlackPRook	O
;	O
case	O
'B'	O
:	O
return	O
BlackPBishop	O
;	O
case	O
'K'	O
:	O
return	O
BlackKing	O
;	O
case	O
'p'	O
:	O
return	O
WhitePPawn	O
;	O
case	O
'l'	O
:	O
return	O
WhitePLance	O
;	O
case	O
'n'	O
:	O
return	O
WhitePKnight	O
;	O
case	O
's'	O
:	O
return	O
WhitePSilver	O
;	O
case	O
'g'	O
:	O
return	O
WhiteGold	O
;	O
case	O
'r'	O
:	O
return	O
WhitePRook	O
;	O
case	O
'b'	O
:	O
return	O
WhitePBishop	O
;	O
case	O
'k'	O
:	O
return	O
WhiteKing	O
;	O
}	O
}	O
else	O
{	O
switch	O
(	O
c	int
)	O
{	O
default	O
:	O
case	O
'.'	O
:	O
return	O
EmptySquare	O
;	O
case	O
'P'	O
:	O
return	O
BlackPawn	O
;	O
case	O
'L'	O
:	O
return	O
BlackLance	O
;	O
case	O
'N'	O
:	O
return	O
BlackKnight	O
;	O
case	O
'S'	O
:	O
return	O
BlackSilver	O
;	O
case	O
'G'	O
:	O
return	O
BlackGold	O
;	O
case	O
'R'	O
:	O
return	O
BlackRook	O
;	O
case	O
'B'	O
:	O
return	O
BlackBishop	O
;	O
case	O
'K'	O
:	O
return	O
BlackKing	O
;	O
case	O
'p'	O
:	O
return	O
WhitePawn	O
;	O
case	O
'l'	O
:	O
return	O
WhiteLance	O
;	O
case	O
'n'	O
:	O
return	O
WhiteKnight	O
;	O
case	O
's'	O
:	O
return	O
WhiteSilver	O
;	O
case	O
'g'	O
:	O
return	O
WhiteGold	O
;	O
case	O
'r'	O
:	O
return	O
WhiteRook	O
;	O
case	O
'b'	O
:	O
return	O
WhiteBishop	O
;	O
case	O
'k'	O
:	O
return	O
WhiteKing	O
;	O
}	O
}	O
}	O
ShogiMove	O
MakeAlg	function
(	O
int	O
fromX	int
,	O
int	O
fromY	int
,	O
int	O
toX	int
,	O
int	O
toY	int
,	O
char	O
promoPiece	char
,	O
int	O
currentBoardIndex	int
,	O
char	O
*	O
out	pointer
)	O
{	O
ShogiSquare	O
piece	int
;	O
char	O
*	O
outp	pointer
=	O
out	pointer
;	O
if	O
(	O
fromX	int
>	O
80	int
)	O
{	O
piece	int
=	O
(	O
fromX	int
-	O
81	int
)	O
;	O
*	O
outp	pointer
++	O
=	O
catchedIndexToChar	array
[	O
piece	int
]	O
;	O
*	O
outp	pointer
++	O
=	O
'*'	O
;	O
*	O
outp	pointer
++	O
=	O
'9'	O
-	O
toX	int
;	O
*	O
outp	pointer
++	O
=	O
'i'	O
-	O
toY	int
;	O
*	O
outp	pointer
++	O
=	O
NULLCHAR	O
;	O
return	O
(	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
?	O
BlackDrop	O
:	O
WhiteDrop	O
)	O
;	O
}	O
else	O
{	O
*	O
outp	pointer
++	O
=	O
'9'	O
-	O
fromX	int
;	O
*	O
outp	pointer
++	O
=	O
'i'	O
-	O
fromY	int
;	O
*	O
outp	pointer
++	O
=	O
'9'	O
-	O
toX	int
;	O
*	O
outp	pointer
++	O
=	O
'i'	O
-	O
toY	int
;	O
*	O
outp	pointer
++	O
=	O
promoPiece	char
;	O
*	O
outp	pointer
++	O
=	O
NULLCHAR	O
;	O
if	O
(	O
promoPiece	char
==	O
NULLCHAR	O
)	O
{	O
return	O
NormalMove	O
;	O
}	O
else	O
{	O
return	O
(	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
?	O
BlackPromotion	O
:	O
WhitePromotion	O
)	O
;	O
}	O
}	O
}	O
void	O
DrawSquare	function
(	O
int	O
row	int
,	O
int	O
column	int
,	O
ShogiSquare	O
piece	int
)	O
{	O
int	O
square_color	int
,	O
x	int
,	O
y	int
,	O
direction	int
,	O
font_ascent	int
,	O
font_descent	int
;	O
char	O
string	array
[	O
2	int
]	O
;	O
XCharStruct	O
overall	O
;	O
struct	O
DisplayData	struct
*	O
player	pointer
;	O
for	O
(	O
player	pointer
=	O
&	O
localPlayer	struct
;	O
True	O
;	O
player	pointer
=	O
&	O
remotePlayer	struct
)	O
{	O
int	O
offset	int
,	O
remote	int
;	O
remote	int
=	O
(	O
player	pointer
==	O
&	O
remotePlayer	struct
)	O
;	O
offset	int
=	O
2	int
*	O
(	O
player	pointer
->	O
squareSize	int
+	O
LINE_GAP	O
)	O
;	O
if	O
(	O
player	pointer
->	O
flipView	int
)	O
{	O
x	int
=	O
LINE_GAP	O
+	O
(	O
(	O
BOARD_SIZE	O
-	O
1	int
)	O
-	O
column	int
)	O
*	O
(	O
player	pointer
->	O
squareSize	int
+	O
LINE_GAP	O
)	O
+	O
offset	int
;	O
y	int
=	O
LINE_GAP	O
+	O
row	int
*	O
(	O
player	pointer
->	O
squareSize	int
+	O
LINE_GAP	O
)	O
;	O
}	O
else	O
{	O
x	int
=	O
LINE_GAP	O
+	O
column	int
*	O
(	O
player	pointer
->	O
squareSize	int
+	O
LINE_GAP	O
)	O
+	O
offset	int
;	O
y	int
=	O
LINE_GAP	O
+	O
(	O
(	O
BOARD_SIZE	O
-	O
1	int
)	O
-	O
row	int
)	O
*	O
(	O
player	pointer
->	O
squareSize	int
+	O
LINE_GAP	O
)	O
;	O
}	O
square_color	int
=	O
(	O
(	O
(	O
column	int
+	O
row	int
)	O
%	O
2	int
)	O
?	O
LIGHT	O
:	O
DARK	O
)	O
;	O
if	O
(	O
piece	int
==	O
EmptySquare	O
)	O
{	O
if	O
(	O
column	int
<	O
0	int
||	O
column	int
>=	O
BOARD_SIZE	O
)	O
{	O
XFillRectangle	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
xBoardWindow	int
,	O
player	pointer
->	O
squareOffBoardGC	int
,	O
x	int
,	O
y	int
,	O
player	pointer
->	O
squareSize	int
,	O
player	pointer
->	O
squareSize	int
)	O
;	O
}	O
else	O
{	O
XFillRectangle	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
xBoardWindow	int
,	O
player	pointer
->	O
squareGC	int
,	O
x	int
,	O
y	int
,	O
player	pointer
->	O
squareSize	int
,	O
player	pointer
->	O
squareSize	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
player	pointer
->	O
monoMode	int
)	O
{	O
XCopyArea	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
(	O
(	O
(	O
(	O
(	O
(	O
int	O
)	O
piece	int
)	O
<	O
(	O
(	O
int	O
)	O
WhitePawn	O
)	O
)	O
)	O
^	O
player	pointer
->	O
flipView	int
)	O
?	O
*	O
pieceToNormal	array
[	O
remote	int
]	O
[	O
(	O
int	O
)	O
piece	int
]	O
:	O
*	O
pieceToReverse	array
[	O
remote	int
]	O
[	O
(	O
int	O
)	O
piece	int
]	O
)	O
,	O
player	pointer
->	O
xBoardWindow	int
,	O
(	O
player	pointer
->	O
monoMode	int
?	O
player	pointer
->	O
squareOffBoardGC	int
:	O
player	pointer
->	O
pieceGC	int
)	O
,	O
0	int
,	O
0	int
,	O
player	pointer
->	O
squareSize	int
,	O
player	pointer
->	O
squareSize	int
,	O
x	int
,	O
y	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
(	O
column	int
<	O
0	int
)	O
||	O
(	O
column	int
>=	O
BOARD_SIZE	O
)	O
)	O
{	O
XCopyPlane	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
(	O
(	O
(	O
(	O
(	O
(	O
int	O
)	O
piece	int
)	O
<	O
(	O
(	O
int	O
)	O
WhitePawn	O
)	O
)	O
)	O
^	O
player	pointer
->	O
flipView	int
)	O
?	O
*	O
pieceToNormalSolid	array
[	O
remote	int
]	O
[	O
(	O
int	O
)	O
piece	int
]	O
:	O
*	O
pieceToReverseSolid	array
[	O
remote	int
]	O
[	O
(	O
int	O
)	O
piece	int
]	O
)	O
,	O
player	pointer
->	O
xBoardWindow	int
,	O
player	pointer
->	O
oPieceGC	int
,	O
0	int
,	O
0	int
,	O
player	pointer
->	O
squareSize	int
,	O
player	pointer
->	O
squareSize	int
,	O
x	int
,	O
y	int
,	O
1	int
)	O
;	O
XCopyArea	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
(	O
(	O
(	O
(	O
(	O
(	O
int	O
)	O
piece	int
)	O
<	O
(	O
(	O
int	O
)	O
WhitePawn	O
)	O
)	O
)	O
^	O
player	pointer
->	O
flipView	int
)	O
?	O
*	O
pieceToNormal	array
[	O
remote	int
]	O
[	O
(	O
int	O
)	O
piece	int
]	O
:	O
*	O
pieceToReverse	array
[	O
remote	int
]	O
[	O
(	O
int	O
)	O
piece	int
]	O
)	O
,	O
player	pointer
->	O
xBoardWindow	int
,	O
player	pointer
->	O
charPieceGC	int
,	O
0	int
,	O
0	int
,	O
player	pointer
->	O
squareSize	int
,	O
player	pointer
->	O
squareSize	int
,	O
x	int
,	O
y	int
)	O
;	O
}	O
else	O
{	O
XCopyPlane	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
(	O
(	O
(	O
(	O
(	O
(	O
int	O
)	O
piece	int
)	O
<	O
(	O
(	O
int	O
)	O
WhitePawn	O
)	O
)	O
)	O
^	O
player	pointer
->	O
flipView	int
)	O
?	O
*	O
pieceToNormalSolid	array
[	O
remote	int
]	O
[	O
(	O
int	O
)	O
piece	int
]	O
:	O
*	O
pieceToReverseSolid	array
[	O
remote	int
]	O
[	O
(	O
int	O
)	O
piece	int
]	O
)	O
,	O
player	pointer
->	O
xBoardWindow	int
,	O
player	pointer
->	O
pieceGC	int
,	O
0	int
,	O
0	int
,	O
player	pointer
->	O
squareSize	int
,	O
player	pointer
->	O
squareSize	int
,	O
x	int
,	O
y	int
,	O
1	int
)	O
;	O
XCopyArea	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
(	O
(	O
(	O
(	O
(	O
(	O
int	O
)	O
piece	int
)	O
<	O
(	O
(	O
int	O
)	O
WhitePawn	O
)	O
)	O
)	O
^	O
player	pointer
->	O
flipView	int
)	O
?	O
*	O
pieceToNormal	array
[	O
remote	int
]	O
[	O
(	O
int	O
)	O
piece	int
]	O
:	O
*	O
pieceToReverse	array
[	O
remote	int
]	O
[	O
(	O
int	O
)	O
piece	int
]	O
)	O
,	O
player	pointer
->	O
xBoardWindow	int
,	O
player	pointer
->	O
charPieceGC	int
,	O
0	int
,	O
0	int
,	O
player	pointer
->	O
squareSize	int
,	O
player	pointer
->	O
squareSize	int
,	O
x	int
,	O
y	int
)	O
;	O
}	O
}	O
string	array
[	O
1	int
]	O
=	O
NULLCHAR	O
;	O
if	O
(	O
player	pointer
->	O
showCoords	int
&&	O
(	O
column	int
>=	O
0	int
)	O
&&	O
(	O
column	int
<	O
9	int
)	O
&&	O
(	O
row	int
==	O
(	O
player	pointer
->	O
flipView	int
?	O
8	int
:	O
0	int
)	O
)	O
)	O
{	O
string	array
[	O
0	int
]	O
=	O
'9'	O
-	O
column	int
;	O
XTextExtents	function
(	O
player	pointer
->	O
coordFontStruct	pointer
,	O
string	array
,	O
1	int
,	O
&	O
direction	int
,	O
&	O
font_ascent	int
,	O
&	O
font_descent	int
,	O
&	O
overall	O
)	O
;	O
if	O
(	O
player	pointer
->	O
monoMode	int
)	O
{	O
XDrawImageString	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
xBoardWindow	int
,	O
player	pointer
->	O
coordGC	int
,	O
x	int
+	O
player	pointer
->	O
squareSize	int
-	O
overall	O
.	O
width	O
-	O
2	int
,	O
y	int
+	O
player	pointer
->	O
squareSize	int
-	O
font_descent	int
-	O
1	int
,	O
string	array
,	O
1	int
)	O
;	O
}	O
else	O
{	O
XDrawString	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
xBoardWindow	int
,	O
player	pointer
->	O
coordGC	int
,	O
x	int
+	O
player	pointer
->	O
squareSize	int
-	O
overall	O
.	O
width	O
-	O
2	int
,	O
y	int
+	O
player	pointer
->	O
squareSize	int
-	O
font_descent	int
-	O
1	int
,	O
string	array
,	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
player	pointer
->	O
showCoords	int
&&	O
(	O
row	int
>=	O
0	int
)	O
&&	O
(	O
row	int
<	O
9	int
)	O
&&	O
(	O
column	int
==	O
(	O
player	pointer
->	O
flipView	int
?	O
8	int
:	O
0	int
)	O
)	O
)	O
{	O
string	array
[	O
0	int
]	O
=	O
'i'	O
-	O
row	int
;	O
XTextExtents	function
(	O
player	pointer
->	O
coordFontStruct	pointer
,	O
string	array
,	O
1	int
,	O
&	O
direction	int
,	O
&	O
font_ascent	int
,	O
&	O
font_descent	int
,	O
&	O
overall	O
)	O
;	O
if	O
(	O
player	pointer
->	O
monoMode	int
)	O
{	O
XDrawImageString	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
xBoardWindow	int
,	O
player	pointer
->	O
coordGC	int
,	O
x	int
+	O
2	int
,	O
y	int
+	O
font_ascent	int
+	O
1	int
,	O
string	array
,	O
1	int
)	O
;	O
}	O
else	O
{	O
XDrawString	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
xBoardWindow	int
,	O
player	pointer
->	O
coordGC	int
,	O
x	int
+	O
2	int
,	O
y	int
+	O
font_ascent	int
+	O
1	int
,	O
string	array
,	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
!	O
updateRemotePlayer	int
||	O
(	O
player	pointer
==	O
&	O
remotePlayer	struct
)	O
)	O
break	O
;	O
}	O
}	O
void	O
EventProc	function
(	O
Widget	O
widget	int
,	O
XtPointer	O
client_data	int
,	O
XEvent	O
*	O
event	pointer
)	O
{	O
if	O
(	O
event	pointer
->	O
type	O
==	O
MappingNotify	O
)	O
{	O
XRefreshKeyboardMapping	function
(	O
(	O
XMappingEvent	O
*	O
)	O
event	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
XtIsRealized	function
(	O
widget	int
)	O
)	O
return	O
;	O
if	O
(	O
(	O
event	pointer
->	O
type	O
==	O
ButtonPress	O
)	O
||	O
(	O
event	pointer
->	O
type	O
==	O
ButtonRelease	O
)	O
)	O
{	O
if	O
(	O
event	pointer
->	O
xbutton	O
.	O
button	O
!=	O
Button1	O
)	O
return	O
;	O
}	O
switch	O
(	O
event	pointer
->	O
type	O
)	O
{	O
case	O
Expose	O
:	O
DrawPosition	function
(	O
widget	int
,	O
event	pointer
,	O
NULL	O
,	O
NULL	O
)	O
;	O
break	O
;	O
default	O
:	O
return	O
;	O
}	O
}	O
void	O
DrawPosition	function
(	O
Widget	O
w	int
,	O
XEvent	O
*	O
event	pointer
,	O
String	O
*	O
prms	pointer
,	O
Cardinal	O
*	O
nprms	pointer
)	O
{	O
Arg	O
args	O
[	O
1	int
]	O
;	O
int	O
i	int
,	O
j	int
;	O
static	O
Board	O
lastBoard	int
;	O
static	O
Catched	O
lastCatches	int
;	O
static	O
int	O
lastBoardValid	int
=	O
0	int
;	O
static	O
int	O
lastFlipView	int
=	O
0	int
,	O
lastRemoteFlipView	int
=	O
1	int
;	O
if	O
(	O
!	O
player	pointer
->	O
Iconic	int
)	O
{	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNiconic	O
,	O
False	O
)	O
;	O
XtSetValues	function
(	O
localPlayer	struct
.	O
shellWidget	int
,	O
args	O
,	O
1	int
)	O
;	O
}	O
if	O
(	O
(	O
w	int
==	O
localPlayer	struct
.	O
boardWidget	int
)	O
&&	O
(	O
event	pointer
==	O
NULL	O
)	O
&&	O
lastBoardValid	int
&&	O
(	O
lastFlipView	int
==	O
localPlayer	struct
.	O
flipView	int
)	O
&&	O
(	O
!	O
updateRemotePlayer	int
||	O
(	O
lastRemoteFlipView	int
==	O
remotePlayer	struct
.	O
flipView	int
)	O
)	O
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
BOARD_SIZE	O
;	O
i	int
++	O
)	O
{	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
BOARD_SIZE	O
;	O
j	int
++	O
)	O
{	O
if	O
(	O
boards	int
[	O
currentMove	int
]	O
[	O
i	int
]	O
[	O
j	int
]	O
!=	O
lastBoard	int
[	O
i	int
]	O
[	O
j	int
]	O
)	O
DrawSquare	function
(	O
i	int
,	O
j	int
,	O
boards	int
[	O
currentMove	int
]	O
[	O
i	int
]	O
[	O
j	int
]	O
)	O
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
2	int
;	O
i	int
++	O
)	O
{	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
8	int
;	O
j	int
++	O
)	O
{	O
if	O
(	O
catches	int
[	O
currentMove	int
]	O
[	O
i	int
]	O
[	O
j	int
]	O
!=	O
lastCatches	int
[	O
i	int
]	O
[	O
j	int
]	O
)	O
{	O
UpdateCatched	function
(	O
i	int
,	O
0	int
,	O
False	O
,	O
True	O
,	O
currentMove	int
)	O
;	O
break	O
;	O
}	O
}	O
}	O
}	O
else	O
{	O
XDrawSegments	function
(	O
localPlayer	struct
.	O
xDisplay	pointer
,	O
localPlayer	struct
.	O
xBoardWindow	int
,	O
localPlayer	struct
.	O
lineGC	int
,	O
localPlayer	struct
.	O
gridSegments	int
,	O
(	O
BOARD_SIZE	O
+	O
1	int
)	O
*	O
2	int
)	O
;	O
if	O
(	O
updateRemotePlayer	int
)	O
{	O
XDrawSegments	function
(	O
remotePlayer	struct
.	O
xDisplay	pointer
,	O
remotePlayer	struct
.	O
xBoardWindow	int
,	O
remotePlayer	struct
.	O
lineGC	int
,	O
remotePlayer	struct
.	O
gridSegments	int
,	O
(	O
BOARD_SIZE	O
+	O
1	int
)	O
*	O
2	int
)	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
BOARD_SIZE	O
;	O
i	int
++	O
)	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
BOARD_SIZE	O
;	O
j	int
++	O
)	O
DrawSquare	function
(	O
i	int
,	O
j	int
,	O
boards	int
[	O
currentMove	int
]	O
[	O
i	int
]	O
[	O
j	int
]	O
)	O
;	O
UpdateCatched	function
(	O
0	int
,	O
0	int
,	O
False	O
,	O
True	O
,	O
currentMove	int
)	O
;	O
UpdateCatched	function
(	O
1	int
,	O
0	int
,	O
False	O
,	O
True	O
,	O
currentMove	int
)	O
;	O
}	O
CopyBoard	function
(	O
lastBoard	int
,	O
boards	int
[	O
currentMove	int
]	O
)	O
;	O
CopyCatches	function
(	O
lastCatches	int
,	O
catches	int
[	O
currentMove	int
]	O
)	O
;	O
lastBoardValid	int
=	O
1	int
;	O
lastFlipView	int
=	O
localPlayer	struct
.	O
flipView	int
;	O
if	O
(	O
updateRemotePlayer	int
)	O
lastRemoteFlipView	int
=	O
remotePlayer	struct
.	O
flipView	int
;	O
XSync	function
(	O
localPlayer	struct
.	O
xDisplay	pointer
,	O
False	O
)	O
;	O
if	O
(	O
updateRemotePlayer	int
)	O
XSync	function
(	O
remotePlayer	struct
.	O
xDisplay	pointer
,	O
False	O
)	O
;	O
}	O
void	O
InitPosition	function
(	O
int	O
redraw	int
)	O
{	O
currentMove	int
=	O
forwardMostMove	int
=	O
backwardMostMove	int
=	O
0	int
;	O
CopyBoard	function
(	O
boards	int
[	O
0	int
]	O
,	O
initialPosition	int
)	O
;	O
ClearCatches	function
(	O
catches	int
[	O
0	int
]	O
)	O
;	O
if	O
(	O
redraw	int
)	O
DrawPosition	function
(	O
localPlayer	struct
.	O
boardWidget	int
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
void	O
CopyBoard	function
(	O
Board	O
to	int
,	O
Board	O
from	int
)	O
{	O
int	O
i	int
,	O
j	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
BOARD_SIZE	O
;	O
i	int
++	O
)	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
BOARD_SIZE	O
;	O
j	int
++	O
)	O
to	int
[	O
i	int
]	O
[	O
j	int
]	O
=	O
from	int
[	O
i	int
]	O
[	O
j	int
]	O
;	O
}	O
void	O
CopyCatches	function
(	O
Catched	O
to	int
,	O
Catched	O
from	int
)	O
{	O
int	O
i	int
,	O
j	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
2	int
;	O
i	int
++	O
)	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
8	int
;	O
j	int
++	O
)	O
to	int
[	O
i	int
]	O
[	O
j	int
]	O
=	O
from	int
[	O
i	int
]	O
[	O
j	int
]	O
;	O
}	O
void	O
SendCurrentBoard	function
(	O
FILE	struct
*	O
fp	pointer
)	O
{	O
SendBoard	function
(	O
fp	pointer
,	O
boards	int
[	O
currentMove	int
]	O
,	O
catches	int
[	O
currentMove	int
]	O
)	O
;	O
}	O
void	O
SendBoard	function
(	O
FILE	struct
*	O
fp	pointer
,	O
Board	O
board	int
,	O
Catched	O
catches	int
)	O
{	O
char	O
message	char
[	O
MSG_SIZ	O
]	O
;	O
ShogiSquare	O
*	O
bp	O
;	O
int	O
i	int
,	O
j	int
;	O
SendToProgram	function
(	O
"edit\n"	pointer
,	O
fp	pointer
)	O
;	O
SendToProgram	function
(	O
"#\n"	pointer
,	O
fp	pointer
)	O
;	O
for	O
(	O
i	int
=	O
BOARD_SIZE	O
-	O
1	int
;	O
i	int
>=	O
0	int
;	O
i	int
--	O
)	O
{	O
bp	O
=	O
&	O
board	int
[	O
i	int
]	O
[	O
0	int
]	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
BOARD_SIZE	O
;	O
j	int
++	O
,	O
bp	O
++	O
)	O
{	O
if	O
(	O
(	O
(	O
int	O
)	O
*	O
bp	O
)	O
<	O
(	O
int	O
)	O
WhitePawn	O
)	O
{	O
sprintf	function
(	O
message	char
,	O
"%c%c%c%s\n"	pointer
,	O
pieceToChar	array
[	O
(	O
int	O
)	O
*	O
bp	O
]	O
,	O
'9'	O
-	O
j	int
,	O
'i'	O
-	O
i	int
,	O
(	O
pieceIsPromoted	array
[	O
(	O
int	O
)	O
*	O
bp	O
]	O
?	O
"+"	pointer
:	O
""	pointer
)	O
)	O
;	O
SendToProgram	function
(	O
message	char
,	O
fp	pointer
)	O
;	O
}	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
7	int
;	O
i	int
++	O
)	O
{	O
int	O
n	int
;	O
for	O
(	O
n	int
=	O
catches	int
[	O
0	int
]	O
[	O
i	int
]	O
;	O
n	int
>	O
0	int
;	O
n	int
--	O
)	O
{	O
sprintf	function
(	O
message	char
,	O
"%c*\n"	pointer
,	O
catchedIndexToChar	array
[	O
i	int
]	O
)	O
;	O
SendToProgram	function
(	O
message	char
,	O
fp	pointer
)	O
;	O
}	O
}	O
SendToProgram	function
(	O
"c\n"	pointer
,	O
fp	pointer
)	O
;	O
for	O
(	O
i	int
=	O
BOARD_SIZE	O
-	O
1	int
;	O
i	int
>=	O
0	int
;	O
i	int
--	O
)	O
{	O
bp	O
=	O
&	O
board	int
[	O
i	int
]	O
[	O
0	int
]	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
BOARD_SIZE	O
;	O
j	int
++	O
,	O
bp	O
++	O
)	O
{	O
if	O
(	O
(	O
(	O
(	O
int	O
)	O
*	O
bp	O
)	O
!=	O
(	O
(	O
int	O
)	O
EmptySquare	O
)	O
)	O
&&	O
(	O
(	O
(	O
int	O
)	O
*	O
bp	O
)	O
>=	O
(	O
(	O
int	O
)	O
WhitePawn	O
)	O
)	O
)	O
{	O
sprintf	function
(	O
message	char
,	O
"%c%c%c%s\n"	pointer
,	O
pieceToChar	array
[	O
(	O
(	O
int	O
)	O
*	O
bp	O
)	O
-	O
(	O
(	O
int	O
)	O
WhitePawn	O
)	O
]	O
,	O
'9'	O
-	O
j	int
,	O
'i'	O
-	O
i	int
,	O
(	O
pieceIsPromoted	array
[	O
(	O
int	O
)	O
*	O
bp	O
]	O
?	O
"+"	pointer
:	O
""	pointer
)	O
)	O
;	O
SendToProgram	function
(	O
message	char
,	O
fp	pointer
)	O
;	O
}	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
7	int
;	O
i	int
++	O
)	O
{	O
int	O
n	int
;	O
for	O
(	O
n	int
=	O
catches	int
[	O
1	int
]	O
[	O
i	int
]	O
;	O
n	int
>	O
0	int
;	O
n	int
--	O
)	O
{	O
sprintf	function
(	O
message	char
,	O
"%c*\n"	pointer
,	O
catchedIndexToChar	array
[	O
i	int
]	O
)	O
;	O
SendToProgram	function
(	O
message	char
,	O
fp	pointer
)	O
;	O
}	O
}	O
SendToProgram	function
(	O
".\n"	pointer
,	O
fp	pointer
)	O
;	O
}	O
static	O
int	O
PromotionPossible	function
(	O
int	O
fromY	int
,	O
int	O
toY	int
,	O
ShogiSquare	O
piece	int
)	O
{	O
if	O
(	O
(	O
(	O
int	O
)	O
piece	int
)	O
<	O
(	O
(	O
int	O
)	O
WhitePawn	O
)	O
)	O
{	O
if	O
(	O
(	O
fromY	int
<	O
6	int
)	O
&&	O
(	O
toY	int
<	O
6	int
)	O
)	O
return	O
False	O
;	O
}	O
else	O
{	O
if	O
(	O
(	O
fromY	int
>	O
2	int
)	O
&&	O
(	O
toY	int
>	O
2	int
)	O
)	O
return	O
False	O
;	O
}	O
return	O
piecePromotable	array
[	O
(	O
int	O
)	O
piece	int
]	O
;	O
}	O
static	O
void	O
ShowCount	function
(	O
int	O
row	int
,	O
int	O
column	int
,	O
int	O
n	int
)	O
{	O
int	O
offset	int
=	O
2	int
*	O
(	O
player	pointer
->	O
squareSize	int
+	O
LINE_GAP	O
)	O
;	O
int	O
x	int
,	O
y	int
,	O
direction	int
,	O
font_ascent	int
,	O
font_descent	int
;	O
char	O
string	array
[	O
2	int
]	O
;	O
XCharStruct	O
overall	O
;	O
struct	O
DisplayData	struct
*	O
player	pointer
;	O
DrawSquare	function
(	O
row	int
,	O
column	int
,	O
EmptySquare	O
)	O
;	O
if	O
(	O
n	int
<=	O
1	int
)	O
return	O
;	O
for	O
(	O
player	pointer
=	O
&	O
localPlayer	struct
;	O
True	O
;	O
player	pointer
=	O
&	O
remotePlayer	struct
)	O
{	O
if	O
(	O
player	pointer
->	O
flipView	int
)	O
{	O
x	int
=	O
LINE_GAP	O
+	O
(	O
(	O
BOARD_SIZE	O
-	O
1	int
)	O
-	O
column	int
)	O
*	O
(	O
player	pointer
->	O
squareSize	int
+	O
LINE_GAP	O
)	O
+	O
offset	int
;	O
y	int
=	O
LINE_GAP	O
+	O
row	int
*	O
(	O
player	pointer
->	O
squareSize	int
+	O
LINE_GAP	O
)	O
;	O
}	O
else	O
{	O
x	int
=	O
LINE_GAP	O
+	O
column	int
*	O
(	O
player	pointer
->	O
squareSize	int
+	O
LINE_GAP	O
)	O
+	O
offset	int
;	O
y	int
=	O
LINE_GAP	O
+	O
(	O
(	O
BOARD_SIZE	O
-	O
1	int
)	O
-	O
row	int
)	O
*	O
(	O
player	pointer
->	O
squareSize	int
+	O
LINE_GAP	O
)	O
;	O
}	O
x	int
-=	O
player	pointer
->	O
squareSize	int
/	O
2	int
;	O
string	array
[	O
1	int
]	O
=	O
NULLCHAR	O
;	O
if	O
(	O
n	int
>	O
9	int
)	O
string	array
[	O
0	int
]	O
=	O
'*'	O
;	O
else	O
string	array
[	O
0	int
]	O
=	O
'0'	O
+	O
n	int
;	O
XTextExtents	function
(	O
player	pointer
->	O
coordFontStruct	pointer
,	O
string	array
,	O
1	int
,	O
&	O
direction	int
,	O
&	O
font_ascent	int
,	O
&	O
font_descent	int
,	O
&	O
overall	O
)	O
;	O
if	O
(	O
player	pointer
->	O
monoMode	int
)	O
{	O
XDrawImageString	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
xBoardWindow	int
,	O
player	pointer
->	O
coordGC	int
,	O
x	int
+	O
player	pointer
->	O
squareSize	int
-	O
overall	O
.	O
width	O
-	O
2	int
,	O
y	int
+	O
player	pointer
->	O
squareSize	int
-	O
font_descent	int
-	O
1	int
,	O
string	array
,	O
1	int
)	O
;	O
}	O
else	O
{	O
XDrawString	function
(	O
player	pointer
->	O
xDisplay	pointer
,	O
player	pointer
->	O
xBoardWindow	int
,	O
player	pointer
->	O
coordGC	int
,	O
x	int
+	O
player	pointer
->	O
squareSize	int
-	O
overall	O
.	O
width	O
-	O
2	int
,	O
y	int
+	O
player	pointer
->	O
squareSize	int
-	O
font_descent	int
-	O
1	int
,	O
string	array
,	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
updateRemotePlayer	int
||	O
(	O
player	pointer
==	O
&	O
remotePlayer	struct
)	O
)	O
break	O
;	O
}	O
}	O
void	O
UpdateCatched	function
(	O
int	O
Color	int
,	O
int	O
Figure	int
,	O
int	O
Drop	int
,	O
int	O
DropAll	int
,	O
int	O
currentMove	int
)	O
{	O
int	O
n	int
,	O
F	int
;	O
int	O
x	int
,	O
y	int
;	O
if	O
(	O
Color	int
)	O
{	O
x	int
=	O
-	O
1	int
;	O
y	int
=	O
BOARD_SIZE	O
-	O
1	int
;	O
}	O
else	O
{	O
x	int
=	O
BOARD_SIZE	O
;	O
y	int
=	O
0	int
;	O
}	O
if	O
(	O
DropAll	int
)	O
n	int
=	O
0	int
;	O
else	O
n	int
=	O
catches	int
[	O
currentMove	int
]	O
[	O
Color	int
]	O
[	O
Figure	int
]	O
;	O
if	O
(	O
DropAll	int
||	O
(	O
Drop	int
&&	O
(	O
n	int
==	O
1	int
)	O
)	O
||	O
(	O
!	O
Drop	int
&&	O
(	O
n	int
==	O
0	int
)	O
)	O
)	O
{	O
n	int
=	O
0	int
;	O
for	O
(	O
F	int
=	O
pawn	int
;	O
F	int
<=	O
king	int
;	O
F	int
++	O
)	O
{	O
int	O
c	int
;	O
if	O
(	O
(	O
c	int
=	O
catches	int
[	O
currentMove	int
]	O
[	O
Color	int
]	O
[	O
F	int
]	O
)	O
>	O
0	int
)	O
{	O
n	int
++	O
;	O
DrawSquare	function
(	O
y	int
,	O
x	int
,	O
catchedIndexToPiece	array
[	O
Color	int
]	O
[	O
F	int
]	O
)	O
;	O
ShowCount	function
(	O
y	int
,	O
(	O
Color	int
?	O
(	O
x	int
-	O
1	int
)	O
:	O
(	O
x	int
+	O
1	int
)	O
)	O
,	O
c	int
)	O
;	O
if	O
(	O
Color	int
)	O
y	int
--	O
;	O
else	O
y	int
++	O
;	O
}	O
}	O
if	O
(	O
DropAll	int
)	O
{	O
for	O
(	O
;	O
n	int
<	O
9	int
;	O
n	int
++	O
)	O
{	O
DrawSquare	function
(	O
y	int
,	O
x	int
,	O
EmptySquare	O
)	O
;	O
ShowCount	function
(	O
y	int
,	O
(	O
Color	int
?	O
(	O
x	int
-	O
1	int
)	O
:	O
(	O
x	int
+	O
1	int
)	O
)	O
,	O
0	int
)	O
;	O
if	O
(	O
Color	int
)	O
y	int
--	O
;	O
else	O
y	int
++	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
Drop	int
)	O
{	O
DrawSquare	function
(	O
y	int
,	O
x	int
,	O
EmptySquare	O
)	O
;	O
ShowCount	function
(	O
y	int
,	O
(	O
Color	int
?	O
(	O
x	int
-	O
1	int
)	O
:	O
(	O
x	int
+	O
1	int
)	O
)	O
,	O
0	int
)	O
;	O
}	O
}	O
else	O
{	O
for	O
(	O
F	int
=	O
pawn	int
;	O
F	int
<=	O
Figure	int
-	O
1	int
;	O
F	int
++	O
)	O
{	O
if	O
(	O
catches	int
[	O
currentMove	int
]	O
[	O
Color	int
]	O
[	O
F	int
]	O
>	O
0	int
)	O
{	O
if	O
(	O
Color	int
)	O
y	int
--	O
;	O
else	O
y	int
++	O
;	O
}	O
}	O
ShowCount	function
(	O
y	int
,	O
(	O
Color	int
?	O
(	O
x	int
-	O
1	int
)	O
:	O
(	O
x	int
+	O
1	int
)	O
)	O
,	O
n	int
)	O
;	O
}	O
}	O
static	O
int	O
PieceOfCatched	function
(	O
int	O
color	int
,	O
int	O
x	int
,	O
int	O
y	int
,	O
int	O
currentMove	int
)	O
{	O
int	O
F	int
,	O
n	int
;	O
if	O
(	O
color	int
)	O
{	O
if	O
(	O
x	int
!=	O
1	int
)	O
return	O
(	O
no_piece	int
)	O
;	O
y	int
=	O
8	int
-	O
y	int
;	O
}	O
else	O
{	O
if	O
(	O
x	int
!=	O
11	int
)	O
return	O
no_piece	int
;	O
}	O
for	O
(	O
F	int
=	O
pawn	int
,	O
n	int
=	O
0	int
;	O
F	int
<=	O
king	int
;	O
F	int
++	O
)	O
{	O
if	O
(	O
catches	int
[	O
currentMove	int
]	O
[	O
color	int
]	O
[	O
F	int
]	O
>	O
0	int
)	O
{	O
if	O
(	O
n	int
==	O
y	int
)	O
return	O
F	int
;	O
n	int
++	O
;	O
}	O
}	O
return	O
no_piece	int
;	O
}	O
void	O
HandleUserMove	function
(	O
Widget	O
w	int
,	O
XEvent	O
*	O
event	pointer
)	O
{	O
ShogiMove	O
move_type	int
;	O
ShogiSquare	O
from_piece	O
;	O
int	O
to_x	int
,	O
to_y	int
,	O
fromRemotePlayer	int
;	O
if	O
(	O
updateRemotePlayer	int
)	O
{	O
if	O
(	O
(	O
(	O
w	int
!=	O
localPlayer	struct
.	O
boardWidget	int
)	O
&&	O
(	O
w	int
!=	O
remotePlayer	struct
.	O
boardWidget	int
)	O
)	O
||	O
(	O
matchMode	int
!=	O
MatchFalse	O
)	O
)	O
{	O
return	O
;	O
}	O
fromRemotePlayer	int
=	O
(	O
w	int
==	O
remotePlayer	struct
.	O
boardWidget	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
(	O
w	int
!=	O
localPlayer	struct
.	O
boardWidget	int
)	O
||	O
(	O
matchMode	int
!=	O
MatchFalse	O
)	O
)	O
return	O
;	O
fromRemotePlayer	int
=	O
False	O
;	O
}	O
player	pointer
=	O
(	O
fromRemotePlayer	int
?	O
&	O
remotePlayer	struct
:	O
&	O
localPlayer	struct
)	O
;	O
if	O
(	O
player	pointer
->	O
promotionUp	int
)	O
{	O
XtPopdown	function
(	O
player	pointer
->	O
promotionShell	int
)	O
;	O
XtDestroyWidget	function
(	O
player	pointer
->	O
promotionShell	int
)	O
;	O
player	pointer
->	O
promotionUp	int
=	O
False	O
;	O
fromX	int
=	O
fromY	int
=	O
-	O
1	int
;	O
}	O
switch	O
(	O
gameMode	int
)	O
{	O
case	O
EndOfGame	O
:	O
case	O
PlayFromGameFile	O
:	O
case	O
TwoMachinesPlay	O
:	O
return	O
;	O
case	O
MachinePlaysBlack	O
:	O
if	O
(	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
)	O
{	O
DisplayMessage	function
(	O
"It is not your turn"	pointer
,	O
fromRemotePlayer	int
)	O
;	O
return	O
;	O
}	O
break	O
;	O
case	O
MachinePlaysWhite	O
:	O
if	O
(	O
!	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
)	O
{	O
DisplayMessage	function
(	O
"It is not your turn"	pointer
,	O
fromRemotePlayer	int
)	O
;	O
return	O
;	O
}	O
break	O
;	O
case	O
ForceMoves	O
:	O
forwardMostMove	int
=	O
currentMove	int
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
if	O
(	O
currentMove	int
!=	O
forwardMostMove	int
)	O
{	O
DisplayMessage	function
(	O
"Displayed position is not current"	pointer
,	O
fromRemotePlayer	int
)	O
;	O
return	O
;	O
}	O
switch	O
(	O
event	pointer
->	O
type	O
)	O
{	O
case	O
ButtonPress	O
:	O
if	O
(	O
(	O
fromX	int
>=	O
0	int
)	O
||	O
(	O
fromY	int
>=	O
0	int
)	O
)	O
return	O
;	O
if	O
(	O
(	O
(	O
fromX	int
=	O
EventToXSquare	function
(	O
event	pointer
->	O
xbutton	O
.	O
x	int
)	O
)	O
<	O
1	int
)	O
||	O
(	O
fromX	int
>	O
BOARD_SIZE	O
+	O
2	int
)	O
||	O
(	O
(	O
fromY	int
=	O
EventToSquare	function
(	O
event	pointer
->	O
xbutton	O
.	O
y	int
)	O
)	O
<	O
0	int
)	O
)	O
{	O
fromX	int
=	O
fromY	int
=	O
-	O
1	int
;	O
return	O
;	O
}	O
if	O
(	O
player	pointer
->	O
flipView	int
)	O
fromX	int
=	O
BOARD_SIZE	O
+	O
3	int
-	O
fromX	int
;	O
else	O
fromY	int
=	O
BOARD_SIZE	O
-	O
1	int
-	O
fromY	int
;	O
break	O
;	O
case	O
ButtonRelease	O
:	O
if	O
(	O
(	O
fromX	int
<	O
0	int
)	O
||	O
(	O
fromY	int
<	O
0	int
)	O
)	O
return	O
;	O
if	O
(	O
(	O
(	O
to_x	int
=	O
EventToXSquare	function
(	O
event	pointer
->	O
xbutton	O
.	O
x	int
)	O
)	O
<	O
1	int
)	O
||	O
(	O
to_x	int
>	O
BOARD_SIZE	O
+	O
2	int
)	O
||	O
(	O
(	O
to_y	int
=	O
EventToSquare	function
(	O
event	pointer
->	O
xbutton	O
.	O
y	int
)	O
)	O
<	O
0	int
)	O
)	O
{	O
if	O
(	O
gameMode	int
==	O
EditPosition	O
&&	O
!	O
off_board	O
(	O
fromX	int
)	O
)	O
{	O
fromX	int
-=	O
2	int
;	O
boards	int
[	O
0	int
]	O
[	O
fromY	int
]	O
[	O
fromX	int
]	O
=	O
EmptySquare	O
;	O
DrawPosition	function
(	O
localPlayer	struct
.	O
boardWidget	int
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
XSync	function
(	O
localPlayer	struct
.	O
xDisplay	pointer
,	O
False	O
)	O
;	O
if	O
(	O
updateRemotePlayer	int
)	O
XSync	function
(	O
remotePlayer	struct
.	O
xDisplay	pointer
,	O
False	O
)	O
;	O
}	O
fromX	int
=	O
fromY	int
=	O
-	O
1	int
;	O
return	O
;	O
}	O
if	O
(	O
player	pointer
->	O
flipView	int
)	O
to_x	int
=	O
BOARD_SIZE	O
+	O
3	int
-	O
to_x	int
;	O
else	O
to_y	int
=	O
BOARD_SIZE	O
-	O
1	int
-	O
to_y	int
;	O
if	O
(	O
(	O
fromX	int
==	O
to_x	int
)	O
&&	O
(	O
fromY	int
==	O
to_y	int
)	O
)	O
{	O
fromX	int
=	O
fromY	int
=	O
-	O
1	int
;	O
return	O
;	O
}	O
if	O
(	O
gameMode	int
==	O
EditPosition	O
)	O
{	O
ShogiSquare	O
piece	int
;	O
if	O
(	O
off_board	O
(	O
fromX	int
)	O
)	O
{	O
int	O
i	int
,	O
c	int
;	O
c	int
=	O
(	O
(	O
fromX	int
<	O
5	int
)	O
^	O
player	pointer
->	O
flipView	int
)	O
;	O
i	int
=	O
PieceOfCatched	function
(	O
c	int
,	O
fromX	int
,	O
fromY	int
,	O
0	int
)	O
;	O
if	O
(	O
i	int
==	O
no_piece	int
)	O
{	O
fromX	int
=	O
fromY	int
=	O
-	O
1	int
;	O
return	O
;	O
}	O
else	O
{	O
piece	int
=	O
catchedIndexToPiece	array
[	O
c	int
]	O
[	O
i	int
]	O
;	O
catches	int
[	O
0	int
]	O
[	O
c	int
]	O
[	O
i	int
]	O
--	O
;	O
}	O
}	O
else	O
{	O
fromX	int
-=	O
2	int
;	O
piece	int
=	O
boards	int
[	O
0	int
]	O
[	O
fromY	int
]	O
[	O
fromX	int
]	O
;	O
boards	int
[	O
0	int
]	O
[	O
fromY	int
]	O
[	O
fromX	int
]	O
=	O
EmptySquare	O
;	O
}	O
if	O
(	O
!	O
off_board	O
(	O
to_x	int
)	O
)	O
{	O
ShogiSquare	O
catched_piece	O
;	O
to_x	int
-=	O
2	int
;	O
catched_piece	O
=	O
boards	int
[	O
0	int
]	O
[	O
to_y	int
]	O
[	O
to_x	int
]	O
;	O
if	O
(	O
catched_piece	O
!=	O
EmptySquare	O
)	O
{	O
int	O
i	int
=	O
pieceToCatchedIndex	array
[	O
catched_piece	O
]	O
;	O
int	O
c	int
=	O
(	O
catched_piece	O
<	O
WhitePawn	O
)	O
;	O
catches	int
[	O
0	int
]	O
[	O
c	int
]	O
[	O
i	int
]	O
++	O
;	O
}	O
boards	int
[	O
0	int
]	O
[	O
to_y	int
]	O
[	O
to_x	int
]	O
=	O
piece	int
;	O
}	O
fromX	int
=	O
fromY	int
=	O
-	O
1	int
;	O
DrawPosition	function
(	O
localPlayer	struct
.	O
boardWidget	int
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
XSync	function
(	O
localPlayer	struct
.	O
xDisplay	pointer
,	O
False	O
)	O
;	O
if	O
(	O
updateRemotePlayer	int
)	O
XSync	function
(	O
remotePlayer	struct
.	O
xDisplay	pointer
,	O
False	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
off_board	O
(	O
fromX	int
)	O
)	O
{	O
int	O
c	int
=	O
(	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
?	O
0	int
:	O
1	int
)	O
;	O
int	O
piece	int
=	O
PieceOfCatched	function
(	O
c	int
,	O
fromX	int
,	O
fromY	int
,	O
currentMove	int
)	O
;	O
if	O
(	O
piece	int
==	O
no_piece	int
)	O
{	O
fromX	int
=	O
fromY	int
=	O
-	O
1	int
;	O
return	O
;	O
}	O
else	O
{	O
if	O
(	O
updateRemotePlayer	int
&&	O
(	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
==	O
fromRemotePlayer	int
)	O
)	O
{	O
DisplayMessage	function
(	O
"Do not try to drop your opponent's pieces!"	pointer
,	O
fromRemotePlayer	int
)	O
;	O
fromX	int
=	O
fromY	int
=	O
-	O
1	int
;	O
return	O
;	O
}	O
fromX	int
=	O
fromY	int
=	O
piece	int
+	O
81	int
;	O
to_x	int
-=	O
2	int
;	O
move_type	int
=	O
(	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
?	O
BlackDrop	O
:	O
WhiteDrop	O
)	O
;	O
MakeMove	function
(	O
&	O
move_type	int
,	O
fromX	int
,	O
fromY	int
,	O
to_x	int
,	O
to_y	int
)	O
;	O
FinishUserMove	function
(	O
move_type	int
,	O
to_x	int
,	O
to_y	int
)	O
;	O
break	O
;	O
}	O
}	O
else	O
if	O
(	O
off_board	O
(	O
to_x	int
)	O
)	O
{	O
fromX	int
=	O
fromY	int
=	O
-	O
1	int
;	O
return	O
;	O
}	O
else	O
{	O
fromX	int
-=	O
2	int
;	O
to_x	int
-=	O
2	int
;	O
from_piece	O
=	O
boards	int
[	O
currentMove	int
]	O
[	O
fromY	int
]	O
[	O
fromX	int
]	O
;	O
if	O
(	O
(	O
from_piece	O
!=	O
EmptySquare	O
)	O
&&	O
updateRemotePlayer	int
&&	O
(	O
(	O
from_piece	O
<	O
WhitePawn	O
)	O
==	O
fromRemotePlayer	int
)	O
)	O
{	O
DisplayMessage	function
(	O
"Do not try to move your opponent's pieces!"	pointer
,	O
fromRemotePlayer	int
)	O
;	O
fromX	int
=	O
fromY	int
=	O
-	O
1	int
;	O
return	O
;	O
}	O
if	O
(	O
PromotionPossible	function
(	O
fromY	int
,	O
to_y	int
,	O
from_piece	O
)	O
)	O
{	O
PromotionPopUp	function
(	O
from_piece	O
,	O
to_x	int
,	O
to_y	int
,	O
fromRemotePlayer	int
)	O
;	O
return	O
;	O
}	O
move_type	int
=	O
NormalMove	O
;	O
MakeMove	function
(	O
&	O
move_type	int
,	O
fromX	int
,	O
fromY	int
,	O
to_x	int
,	O
to_y	int
)	O
;	O
FinishUserMove	function
(	O
move_type	int
,	O
to_x	int
,	O
to_y	int
)	O
;	O
break	O
;	O
}	O
}	O
}	O
void	O
FinishUserMove	function
(	O
ShogiMove	O
move_type	int
,	O
int	O
to_x	int
,	O
int	O
to_y	int
)	O
{	O
char	O
user_move	char
[	O
MSG_SIZ	O
]	O
;	O
switch	O
(	O
move_type	int
)	O
{	O
case	O
BlackPromotion	O
:	O
case	O
WhitePromotion	O
:	O
sprintf	function
(	O
user_move	char
,	O
"%c%c%c%c+\n"	pointer
,	O
'9'	O
-	O
fromX	int
,	O
'i'	O
-	O
fromY	int
,	O
'9'	O
-	O
to_x	int
,	O
'i'	O
-	O
to_y	int
)	O
;	O
break	O
;	O
case	O
BlackDrop	O
:	O
case	O
WhiteDrop	O
:	O
sprintf	function
(	O
user_move	char
,	O
"%c*%c%c\n"	pointer
,	O
catchedIndexToChar	array
[	O
fromX	int
-	O
81	int
]	O
,	O
'9'	O
-	O
to_x	int
,	O
'i'	O
-	O
to_y	int
)	O
;	O
break	O
;	O
case	O
NormalMove	O
:	O
sprintf	function
(	O
user_move	char
,	O
"%c%c%c%c\n"	pointer
,	O
'9'	O
-	O
fromX	int
,	O
'i'	O
-	O
fromY	int
,	O
'9'	O
-	O
to_x	int
,	O
'i'	O
-	O
to_y	int
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: internal error; bad move_type\n"	pointer
,	O
(	O
char	O
*	O
)	O
programName	O
)	O
;	O
break	O
;	O
}	O
Attention	function
(	O
firstProgramPID	int
)	O
;	O
if	O
(	O
firstSendTime	int
)	O
SendTimeRemaining	function
(	O
toFirstProgFP	pointer
)	O
;	O
SendToProgram	function
(	O
user_move	char
,	O
toFirstProgFP	pointer
)	O
;	O
strcpy	function
(	O
moveList	char
[	O
currentMove	int
-	O
1	int
]	O
,	O
user_move	char
)	O
;	O
fromX	int
=	O
fromY	int
=	O
-	O
1	int
;	O
if	O
(	O
gameMode	int
==	O
PauseGame	O
)	O
{	O
PauseProc	function
(	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
switch	O
(	O
gameMode	int
)	O
{	O
case	O
ForceMoves	O
:	O
break	O
;	O
case	O
BeginningOfGame	O
:	O
if	O
(	O
localPlayer	struct
.	O
appData	struct
.	O
noShogiProgram	int
)	O
lastGameMode	int
=	O
gameMode	int
=	O
ForceMoves	O
;	O
else	O
lastGameMode	int
=	O
gameMode	int
=	O
MachinePlaysWhite	O
;	O
ModeHighlight	function
(	O
)	O
;	O
break	O
;	O
case	O
MachinePlaysWhite	O
:	O
case	O
MachinePlaysBlack	O
:	O
default	O
:	O
break	O
;	O
}	O
}	O
void	O
ParseMachineMove	function
(	O
char	O
*	O
machine_move	pointer
,	O
ShogiMove	O
*	O
move_type	int
,	O
int	O
*	O
from_x	pointer
,	O
int	O
*	O
from_y	pointer
,	O
int	O
*	O
to_x	int
,	O
int	O
*	O
to_y	int
)	O
{	O
{	O
if	O
(	O
no_digit	O
(	O
machine_move	pointer
[	O
0	int
]	O
)	O
)	O
{	O
switch	O
(	O
machine_move	pointer
[	O
0	int
]	O
)	O
{	O
case	O
'P'	O
:	O
*	O
from_x	pointer
=	O
81	int
;	O
break	O
;	O
case	O
'L'	O
:	O
*	O
from_x	pointer
=	O
82	int
;	O
break	O
;	O
case	O
'N'	O
:	O
*	O
from_x	pointer
=	O
83	int
;	O
break	O
;	O
case	O
'S'	O
:	O
*	O
from_x	pointer
=	O
84	int
;	O
break	O
;	O
case	O
'G'	O
:	O
*	O
from_x	pointer
=	O
85	int
;	O
break	O
;	O
case	O
'B'	O
:	O
*	O
from_x	pointer
=	O
86	int
;	O
break	O
;	O
case	O
'R'	O
:	O
*	O
from_x	pointer
=	O
87	int
;	O
break	O
;	O
case	O
'K'	O
:	O
*	O
from_x	pointer
=	O
88	int
;	O
break	O
;	O
default	O
:	O
*	O
from_x	pointer
=	O
-	O
1	int
;	O
}	O
*	O
from_y	pointer
=	O
*	O
from_x	pointer
;	O
*	O
to_x	int
=	O
'9'	O
-	O
machine_move	pointer
[	O
2	int
]	O
;	O
*	O
to_y	int
=	O
'i'	O
-	O
machine_move	pointer
[	O
3	int
]	O
;	O
}	O
else	O
{	O
*	O
from_x	pointer
=	O
'9'	O
-	O
machine_move	pointer
[	O
0	int
]	O
;	O
*	O
from_y	pointer
=	O
'i'	O
-	O
machine_move	pointer
[	O
1	int
]	O
;	O
*	O
to_x	int
=	O
'9'	O
-	O
machine_move	pointer
[	O
2	int
]	O
;	O
*	O
to_y	int
=	O
'i'	O
-	O
machine_move	pointer
[	O
3	int
]	O
;	O
switch	O
(	O
machine_move	pointer
[	O
4	int
]	O
)	O
{	O
case	O
'+'	O
:	O
*	O
move_type	int
=	O
(	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
?	O
BlackPromotion	O
:	O
WhitePromotion	O
)	O
;	O
break	O
;	O
default	O
:	O
*	O
move_type	int
=	O
NormalMove	O
;	O
break	O
;	O
}	O
}	O
}	O
}	O
void	O
SkipString	function
(	O
char	O
*	O
*	O
mpr	pointer
)	O
{	O
while	O
(	O
*	O
*	O
mpr	pointer
==	O
' '	O
)	O
(	O
*	O
mpr	pointer
)	O
++	O
;	O
while	O
(	O
(	O
*	O
*	O
mpr	pointer
!=	O
' '	O
)	O
&&	O
(	O
*	O
*	O
mpr	pointer
!=	O
NULLCHAR	O
)	O
&&	O
(	O
*	O
*	O
mpr	pointer
!=	O
'\n'	O
)	O
)	O
(	O
*	O
mpr	pointer
)	O
++	O
;	O
while	O
(	O
*	O
*	O
mpr	pointer
==	O
' '	O
)	O
(	O
*	O
mpr	pointer
)	O
++	O
;	O
}	O
void	O
HandleMachineMove	function
(	O
char	O
*	O
message	char
,	O
FILE	struct
*	O
fp	pointer
)	O
{	O
char	O
machine_move	pointer
[	O
MSG_SIZ	O
]	O
,	O
buf1	O
[	O
MSG_SIZ	O
]	O
,	O
buf2	O
[	O
MSG_SIZ	O
]	O
;	O
int	O
from_x	pointer
,	O
from_y	pointer
,	O
to_x	int
,	O
to_y	int
;	O
ShogiMove	O
move_type	int
;	O
char	O
*	O
mpr	pointer
;	O
maybeThinking	int
=	O
False	O
;	O
if	O
(	O
strncmp	function
(	O
message	char
,	O
"warning:"	pointer
,	O
8	int
)	O
==	O
0	int
)	O
{	O
DisplayMessage	function
(	O
message	char
,	O
False	O
)	O
;	O
if	O
(	O
updateRemotePlayer	int
)	O
DisplayMessage	function
(	O
message	char
,	O
True	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
(	O
strstr	function
(	O
message	char
,	O
"unknown host"	pointer
)	O
!=	O
NULL	O
)	O
||	O
(	O
strstr	function
(	O
message	char
,	O
"No remote directory"	pointer
)	O
!=	O
NULL	O
)	O
||	O
(	O
strstr	function
(	O
message	char
,	O
"not found"	pointer
)	O
!=	O
NULL	O
)	O
||	O
(	O
strstr	function
(	O
message	char
,	O
"No such file"	pointer
)	O
!=	O
NULL	O
)	O
||	O
(	O
strstr	function
(	O
message	char
,	O
"Permission denied"	pointer
)	O
!=	O
NULL	O
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: failed to start shogi program %s on %s: %s\n"	pointer
,	O
programName	O
,	O
(	O
(	O
fp	pointer
==	O
fromFirstProgFP	pointer
)	O
?	O
localPlayer	struct
.	O
appData	struct
.	O
firstShogiProgram	int
:	O
localPlayer	struct
.	O
appData	struct
.	O
secondShogiProgram	int
)	O
,	O
(	O
(	O
fp	pointer
==	O
fromFirstProgFP	pointer
)	O
?	O
localPlayer	struct
.	O
appData	struct
.	O
firstHost	int
:	O
localPlayer	struct
.	O
appData	struct
.	O
secondHost	int
)	O
,	O
message	char
)	O
;	O
ShutdownShogiPrograms	function
(	O
message	char
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
strncmp	function
(	O
message	char
,	O
"Illegal move"	pointer
,	O
12	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
fp	pointer
==	O
fromFirstProgFP	pointer
&&	O
firstSendTime	int
==	O
2	int
)	O
{	O
firstSendTime	int
=	O
0	int
;	O
return	O
;	O
}	O
else	O
if	O
(	O
fp	pointer
==	O
fromSecondProgFP	pointer
&&	O
secondSendTime	int
==	O
2	int
)	O
{	O
secondSendTime	int
=	O
0	int
;	O
return	O
;	O
}	O
if	O
(	O
forwardMostMove	int
<=	O
backwardMostMove	int
)	O
return	O
;	O
if	O
(	O
gameMode	int
==	O
PauseGame	O
)	O
PauseProc	function
(	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
gameMode	int
==	O
PlayFromGameFile	O
)	O
{	O
gameMode	int
=	O
ForceMoves	O
;	O
ModeHighlight	function
(	O
)	O
;	O
}	O
currentMove	int
=	O
--	O
forwardMostMove	int
;	O
if	O
(	O
(	O
gameMode	int
==	O
PlayFromGameFile	O
)	O
||	O
(	O
gameMode	int
==	O
ForceMoves	O
)	O
)	O
DisplayClocks	function
(	O
ReDisplayTimers	O
)	O
;	O
else	O
DisplayClocks	function
(	O
SwitchTimers	O
)	O
;	O
sprintf	function
(	O
buf1	O
,	O
"Illegal move: %s"	pointer
,	O
parseList	O
[	O
currentMove	int
]	O
)	O
;	O
DisplayMessage	function
(	O
buf1	O
,	O
False	O
)	O
;	O
if	O
(	O
updateRemotePlayer	int
)	O
DisplayMessage	function
(	O
buf1	O
,	O
True	O
)	O
;	O
DrawPosition	function
(	O
localPlayer	struct
.	O
boardWidget	int
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
XSync	function
(	O
localPlayer	struct
.	O
xDisplay	pointer
,	O
False	O
)	O
;	O
if	O
(	O
updateRemotePlayer	int
)	O
XSync	function
(	O
remotePlayer	struct
.	O
xDisplay	pointer
,	O
False	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
strstr	function
(	O
message	char
,	O
"GNU Shogi"	pointer
)	O
!=	O
NULL	O
)	O
{	O
at_least_gnushogi_1_2p03	int
=	O
True	O
;	O
return	O
;	O
}	O
if	O
(	O
strncmp	function
(	O
message	char
,	O
"Hint:"	pointer
,	O
5	int
)	O
==	O
0	int
)	O
{	O
char	O
promoPiece	char
;	O
sscanf	function
(	O
message	char
,	O
"Hint: %s"	pointer
,	O
machine_move	pointer
)	O
;	O
ParseMachineMove	function
(	O
machine_move	pointer
,	O
&	O
move_type	int
,	O
&	O
from_x	pointer
,	O
&	O
from_y	pointer
,	O
&	O
to_x	int
,	O
&	O
to_y	int
)	O
;	O
if	O
(	O
move_type	int
==	O
WhitePromotion	O
||	O
move_type	int
==	O
BlackPromotion	O
)	O
promoPiece	char
=	O
'+'	O
;	O
else	O
promoPiece	char
=	O
NULLCHAR	O
;	O
move_type	int
=	O
MakeAlg	function
(	O
from_x	pointer
,	O
from_y	pointer
,	O
to_x	int
,	O
to_y	int
,	O
promoPiece	char
,	O
currentMove	int
,	O
buf1	O
)	O
;	O
sprintf	function
(	O
buf2	O
,	O
"Hint: %s"	pointer
,	O
buf1	O
)	O
;	O
DisplayMessage	function
(	O
buf2	O
,	O
False	O
)	O
;	O
if	O
(	O
updateRemotePlayer	int
)	O
DisplayMessage	function
(	O
buf2	O
,	O
True	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
strncmp	function
(	O
message	char
,	O
"Clocks:"	pointer
,	O
7	int
)	O
==	O
0	int
)	O
{	O
sscanf	function
(	O
message	char
,	O
"Clocks: %ld %ld"	pointer
,	O
&	O
blackTimeRemaining	long
,	O
&	O
whiteTimeRemaining	long
)	O
;	O
DisplayClocks	function
(	O
ReDisplayTimers	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
strncmp	function
(	O
message	char
,	O
"Black"	pointer
,	O
5	int
)	O
==	O
0	int
)	O
{	O
ShutdownShogiPrograms	function
(	O
"Black wins"	pointer
)	O
;	O
return	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
message	char
,	O
"White"	pointer
,	O
5	int
)	O
==	O
0	int
)	O
{	O
ShutdownShogiPrograms	function
(	O
"White wins"	pointer
)	O
;	O
return	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
message	char
,	O
"Repetition"	pointer
,	O
10	int
)	O
==	O
0	int
)	O
{	O
ShutdownShogiPrograms	function
(	O
"Repetition"	pointer
)	O
;	O
return	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
message	char
,	O
"opponent mates!"	pointer
,	O
15	int
)	O
==	O
0	int
)	O
{	O
switch	O
(	O
(	O
gameMode	int
==	O
PauseGame	O
)	O
?	O
pausePreviousMode	int
:	O
gameMode	int
)	O
{	O
case	O
MachinePlaysWhite	O
:	O
ShutdownShogiPrograms	function
(	O
"Black wins"	pointer
)	O
;	O
break	O
;	O
case	O
MachinePlaysBlack	O
:	O
ShutdownShogiPrograms	function
(	O
"White wins"	pointer
)	O
;	O
break	O
;	O
case	O
TwoMachinesPlay	O
:	O
ShutdownShogiPrograms	function
(	O
(	O
fp	pointer
==	O
fromFirstProgFP	pointer
)	O
?	O
"Black wins"	pointer
:	O
"White wins"	pointer
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
return	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
message	char
,	O
"computer mates!"	pointer
,	O
15	int
)	O
==	O
0	int
)	O
{	O
switch	O
(	O
(	O
gameMode	int
==	O
PauseGame	O
)	O
?	O
pausePreviousMode	int
:	O
gameMode	int
)	O
{	O
case	O
MachinePlaysWhite	O
:	O
ShutdownShogiPrograms	function
(	O
"White wins"	pointer
)	O
;	O
break	O
;	O
case	O
MachinePlaysBlack	O
:	O
ShutdownShogiPrograms	function
(	O
"Black wins"	pointer
)	O
;	O
break	O
;	O
case	O
TwoMachinesPlay	O
:	O
ShutdownShogiPrograms	function
(	O
(	O
fp	pointer
==	O
fromFirstProgFP	pointer
)	O
?	O
"White wins"	pointer
:	O
"Black wins"	pointer
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
return	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
message	char
,	O
"Draw"	pointer
,	O
4	int
)	O
==	O
0	int
)	O
{	O
ShutdownShogiPrograms	function
(	O
"Draw"	pointer
)	O
;	O
return	O
;	O
}	O
maybeThinking	int
=	O
True	O
;	O
if	O
(	O
strstr	function
(	O
message	char
,	O
"..."	pointer
)	O
!=	O
NULL	O
)	O
{	O
sscanf	function
(	O
message	char
,	O
"%s %s %s"	pointer
,	O
buf1	O
,	O
buf2	O
,	O
machine_move	pointer
)	O
;	O
if	O
(	O
machine_move	pointer
[	O
0	int
]	O
==	O
NULLCHAR	O
)	O
return	O
;	O
}	O
else	O
{	O
mpr	pointer
=	O
message	char
;	O
if	O
(	O
xshogiDebug	int
)	O
printf	function
(	O
"ignore noise: '%s'\n"	pointer
,	O
message	char
)	O
;	O
return	O
;	O
}	O
strcpy	function
(	O
moveList	char
[	O
forwardMostMove	int
]	O
,	O
machine_move	pointer
)	O
;	O
ParseMachineMove	function
(	O
machine_move	pointer
,	O
&	O
move_type	int
,	O
&	O
from_x	pointer
,	O
&	O
from_y	pointer
,	O
&	O
to_x	int
,	O
&	O
to_y	int
)	O
;	O
if	O
(	O
gameMode	int
!=	O
PauseGame	O
)	O
currentMove	int
=	O
forwardMostMove	int
;	O
MakeMove	function
(	O
&	O
move_type	int
,	O
from_x	pointer
,	O
from_y	pointer
,	O
to_x	int
,	O
to_y	int
)	O
;	O
if	O
(	O
(	O
gameMode	int
!=	O
PauseGame	O
)	O
&&	O
localPlayer	struct
.	O
appData	struct
.	O
ringBellAfterMoves	int
)	O
putc	function
(	O
BELLCHAR	O
,	O
stderr	pointer
)	O
;	O
if	O
(	O
(	O
gameMode	int
==	O
TwoMachinesPlay	O
)	O
||	O
(	O
(	O
gameMode	int
==	O
PauseGame	O
)	O
&&	O
(	O
pausePreviousMode	int
==	O
TwoMachinesPlay	O
)	O
)	O
)	O
{	O
strcat	function
(	O
machine_move	pointer
,	O
"\n"	pointer
)	O
;	O
if	O
(	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
)	O
{	O
Attention	function
(	O
secondProgramPID	int
)	O
;	O
if	O
(	O
secondSendTime	int
)	O
SendTimeRemaining	function
(	O
toSecondProgFP	pointer
)	O
;	O
SendToProgram	function
(	O
machine_move	pointer
,	O
toSecondProgFP	pointer
)	O
;	O
if	O
(	O
firstMove	int
)	O
{	O
firstMove	int
=	O
False	O
;	O
SendToProgram	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
blackString	int
,	O
toSecondProgFP	pointer
)	O
;	O
}	O
}	O
else	O
{	O
Attention	function
(	O
firstProgramPID	int
)	O
;	O
if	O
(	O
firstSendTime	int
)	O
SendTimeRemaining	function
(	O
toFirstProgFP	pointer
)	O
;	O
SendToProgram	function
(	O
machine_move	pointer
,	O
toFirstProgFP	pointer
)	O
;	O
if	O
(	O
firstMove	int
)	O
{	O
firstMove	int
=	O
False	O
;	O
SendToProgram	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
blackString	int
,	O
toFirstProgFP	pointer
)	O
;	O
}	O
}	O
}	O
}	O
void	O
ReadGameFile	function
(	O
void	O
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
!	O
ReadGameFileProc	function
(	O
)	O
)	O
return	O
;	O
if	O
(	O
matchMode	int
==	O
MatchOpening	O
)	O
continue	O
;	O
readGameXID	O
=	O
XtAppAddTimeOut	function
(	O
appContext	int
,	O
(	O
int	O
)	O
(	O
1000	int
*	O
localPlayer	struct
.	O
appData	struct
.	O
timeDelay	float
)	O
,	O
(	O
XtTimerCallbackProc	O
)	O
ReadGameFile	function
,	O
NULL	O
)	O
;	O
break	O
;	O
}	O
}	O
int	O
ReadGameFileProc	function
(	O
void	O
)	O
{	O
ShogiMove	O
move_type	int
;	O
char	O
move	char
[	O
MSG_SIZ	O
]	O
,	O
buf	char
[	O
MSG_SIZ	O
]	O
;	O
if	O
(	O
gameFileFP	pointer
==	O
NULL	O
)	O
return	O
(	O
int	O
)	O
False	O
;	O
if	O
(	O
gameMode	int
==	O
PauseGame	O
)	O
return	O
True	O
;	O
if	O
(	O
gameMode	int
!=	O
PlayFromGameFile	O
)	O
{	O
fclose	function
(	O
gameFileFP	pointer
)	O
;	O
gameFileFP	pointer
=	O
NULL	O
;	O
return	O
(	O
int	O
)	O
False	O
;	O
}	O
if	O
(	O
commentUp	int
)	O
{	O
XtPopdown	function
(	O
commentShell	O
)	O
;	O
XtDestroyWidget	function
(	O
commentShell	O
)	O
;	O
commentUp	int
=	O
False	O
;	O
}	O
fgets	function
(	O
move	char
,	O
MSG_SIZ	O
,	O
gameFileFP	pointer
)	O
;	O
move	char
[	O
strlen	function
(	O
move	char
)	O
-	O
1	int
]	O
=	O
NULLCHAR	O
;	O
sprintf	function
(	O
buf	char
,	O
"# %s game file"	pointer
,	O
programName	O
)	O
;	O
if	O
(	O
strncmp	function
(	O
move	char
,	O
buf	char
,	O
strlen	function
(	O
buf	char
)	O
)	O
)	O
{	O
strcat	function
(	O
move	char
,	O
": no xshogi game file"	pointer
)	O
;	O
DisplayMessage	function
(	O
move	char
,	O
False	O
)	O
;	O
return	O
(	O
int	O
)	O
False	O
;	O
}	O
DisplayName	function
(	O
move	char
)	O
;	O
rewind	function
(	O
gameFileFP	pointer
)	O
;	O
parseGameFile	function
(	O
)	O
;	O
move_type	int
=	O
(	O
ShogiMove	O
)	O
0	int
;	O
lastGameMode	int
=	O
gameMode	int
;	O
gameMode	int
=	O
ForceMoves	O
;	O
ModeHighlight	function
(	O
)	O
;	O
if	O
(	O
!	O
loaded_game_finished	int
)	O
DisplayMessage	function
(	O
"End of game file"	pointer
,	O
False	O
)	O
;	O
if	O
(	O
readGameXID	O
!=	O
0	int
)	O
{	O
XtRemoveTimeOut	function
(	O
readGameXID	O
)	O
;	O
readGameXID	O
=	O
0	int
;	O
}	O
fclose	function
(	O
gameFileFP	pointer
)	O
;	O
gameFileFP	pointer
=	O
NULL	O
;	O
return	O
(	O
int	O
)	O
False	O
;	O
}	O
void	O
ApplyMove	function
(	O
ShogiMove	O
*	O
move_type	int
,	O
int	O
from_x	pointer
,	O
int	O
from_y	pointer
,	O
int	O
to_x	int
,	O
int	O
to_y	int
,	O
int	O
currentMove	int
)	O
{	O
ShogiSquare	O
piece	int
,	O
cpiece	O
;	O
char	O
pieceChar	char
;	O
int	O
i	int
,	O
c	int
;	O
if	O
(	O
from_x	pointer
>	O
80	int
)	O
{	O
i	int
=	O
from_x	pointer
-	O
81	int
;	O
c	int
=	O
(	O
BlackOnMove	function
(	O
currentMove	int
)	O
?	O
1	int
:	O
0	int
)	O
;	O
cpiece	O
=	O
catchedIndexToPiece	array
[	O
c	int
]	O
[	O
i	int
]	O
;	O
boards	int
[	O
currentMove	int
]	O
[	O
to_y	int
]	O
[	O
to_x	int
]	O
=	O
cpiece	O
;	O
catches	int
[	O
currentMove	int
]	O
[	O
c	int
]	O
[	O
i	int
]	O
--	O
;	O
}	O
else	O
if	O
(	O
PromotionPossible	function
(	O
from_y	pointer
,	O
to_y	int
,	O
piece	int
=	O
boards	int
[	O
currentMove	int
]	O
[	O
from_y	pointer
]	O
[	O
from_x	pointer
]	O
)	O
)	O
{	O
cpiece	O
=	O
boards	int
[	O
currentMove	int
]	O
[	O
to_y	int
]	O
[	O
to_x	int
]	O
;	O
if	O
(	O
cpiece	O
!=	O
EmptySquare	O
)	O
{	O
i	int
=	O
pieceToCatchedIndex	array
[	O
cpiece	O
]	O
;	O
c	int
=	O
(	O
cpiece	O
<	O
WhitePawn	O
)	O
;	O
catches	int
[	O
currentMove	int
]	O
[	O
c	int
]	O
[	O
i	int
]	O
++	O
;	O
}	O
if	O
(	O
*	O
move_type	int
==	O
NormalMove	O
)	O
{	O
boards	int
[	O
currentMove	int
]	O
[	O
to_y	int
]	O
[	O
to_x	int
]	O
=	O
piece	int
;	O
}	O
else	O
{	O
boards	int
[	O
currentMove	int
]	O
[	O
to_y	int
]	O
[	O
to_x	int
]	O
=	O
piece	int
=	O
pieceToPromoted	array
[	O
piece	int
]	O
;	O
pieceChar	char
=	O
'+'	O
;	O
}	O
boards	int
[	O
currentMove	int
]	O
[	O
from_y	pointer
]	O
[	O
from_x	pointer
]	O
=	O
EmptySquare	O
;	O
}	O
else	O
{	O
ShogiSquare	O
piece	int
=	O
boards	int
[	O
currentMove	int
]	O
[	O
to_y	int
]	O
[	O
to_x	int
]	O
;	O
if	O
(	O
piece	int
!=	O
EmptySquare	O
)	O
{	O
i	int
=	O
pieceToCatchedIndex	array
[	O
piece	int
]	O
;	O
c	int
=	O
(	O
piece	int
<	O
WhitePawn	O
)	O
;	O
catches	int
[	O
currentMove	int
]	O
[	O
c	int
]	O
[	O
i	int
]	O
++	O
;	O
}	O
*	O
move_type	int
=	O
NormalMove	O
;	O
boards	int
[	O
currentMove	int
]	O
[	O
to_y	int
]	O
[	O
to_x	int
]	O
=	O
boards	int
[	O
currentMove	int
]	O
[	O
from_y	pointer
]	O
[	O
from_x	pointer
]	O
;	O
boards	int
[	O
currentMove	int
]	O
[	O
from_y	pointer
]	O
[	O
from_x	pointer
]	O
=	O
EmptySquare	O
;	O
}	O
}	O
void	O
MakeMove	function
(	O
ShogiMove	O
*	O
move_type	int
,	O
int	O
from_x	pointer
,	O
int	O
from_y	pointer
,	O
int	O
to_x	int
,	O
int	O
to_y	int
)	O
{	O
char	O
message	char
[	O
MSG_SIZ	O
]	O
,	O
movestr	O
[	O
MSG_SIZ	O
]	O
;	O
char	O
promoPiece	char
=	O
NULLCHAR	O
;	O
forwardMostMove	int
++	O
;	O
CopyBoard	function
(	O
boards	int
[	O
forwardMostMove	int
]	O
,	O
boards	int
[	O
forwardMostMove	int
-	O
1	int
]	O
)	O
;	O
CopyCatches	function
(	O
catches	int
[	O
forwardMostMove	int
]	O
,	O
catches	int
[	O
forwardMostMove	int
-	O
1	int
]	O
)	O
;	O
ApplyMove	function
(	O
move_type	int
,	O
from_x	pointer
,	O
from_y	pointer
,	O
to_x	int
,	O
to_y	int
,	O
forwardMostMove	int
)	O
;	O
endMessage	char
[	O
0	int
]	O
=	O
NULLCHAR	O
;	O
timeRemaining	array
[	O
0	int
]	O
[	O
forwardMostMove	int
]	O
=	O
blackTimeRemaining	long
;	O
timeRemaining	array
[	O
1	int
]	O
[	O
forwardMostMove	int
]	O
=	O
whiteTimeRemaining	long
;	O
if	O
(	O
(	O
gameMode	int
==	O
PauseGame	O
)	O
&&	O
(	O
pausePreviousMode	int
!=	O
PlayFromGameFile	O
)	O
)	O
return	O
;	O
currentMove	int
=	O
forwardMostMove	int
;	O
if	O
(	O
gameMode	int
==	O
PlayFromGameFile	O
)	O
{	O
sprintf	function
(	O
message	char
,	O
"%d. %s%s"	pointer
,	O
(	O
(	O
currentMove	int
+	O
1	int
)	O
/	O
2	int
)	O
,	O
(	O
BlackOnMove	function
(	O
currentMove	int
)	O
?	O
"... "	pointer
:	O
""	pointer
)	O
,	O
currentMoveString	array
)	O
;	O
strcpy	function
(	O
parseList	O
[	O
currentMove	int
-	O
1	int
]	O
,	O
currentMoveString	array
)	O
;	O
}	O
else	O
{	O
if	O
(	O
(	O
*	O
move_type	int
==	O
WhitePromotion	O
)	O
||	O
(	O
*	O
move_type	int
==	O
BlackPromotion	O
)	O
)	O
promoPiece	char
=	O
'+'	O
;	O
else	O
promoPiece	char
=	O
NULLCHAR	O
;	O
MakeAlg	function
(	O
from_x	pointer
,	O
from_y	pointer
,	O
to_x	int
,	O
to_y	int
,	O
promoPiece	char
,	O
currentMove	int
-	O
1	int
,	O
movestr	O
)	O
;	O
sprintf	function
(	O
message	char
,	O
"%d. %s%s"	pointer
,	O
(	O
(	O
currentMove	int
+	O
1	int
)	O
/	O
2	int
)	O
,	O
(	O
BlackOnMove	function
(	O
currentMove	int
)	O
?	O
"... "	pointer
:	O
""	pointer
)	O
,	O
movestr	O
)	O
;	O
strcpy	function
(	O
parseList	O
[	O
currentMove	int
-	O
1	int
]	O
,	O
movestr	O
)	O
;	O
}	O
DisplayMessage	function
(	O
message	char
,	O
False	O
)	O
;	O
if	O
(	O
(	O
gameMode	int
==	O
PlayFromGameFile	O
)	O
||	O
(	O
gameMode	int
==	O
ForceMoves	O
)	O
||	O
(	O
(	O
gameMode	int
==	O
PauseGame	O
)	O
&&	O
(	O
pausePreviousMode	int
==	O
PlayFromGameFile	O
)	O
)	O
)	O
{	O
DisplayClocks	function
(	O
ReDisplayTimers	O
)	O
;	O
}	O
else	O
{	O
DisplayClocks	function
(	O
SwitchTimers	O
)	O
;	O
}	O
DrawPosition	function
(	O
localPlayer	struct
.	O
boardWidget	int
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
XSync	function
(	O
localPlayer	struct
.	O
xDisplay	pointer
,	O
False	O
)	O
;	O
if	O
(	O
updateRemotePlayer	int
)	O
{	O
DisplayMessage	function
(	O
message	char
,	O
True	O
)	O
;	O
XSync	function
(	O
remotePlayer	struct
.	O
xDisplay	pointer
,	O
False	O
)	O
;	O
}	O
}	O
void	O
InitShogiProgram	function
(	O
char	O
*	O
host_name	pointer
,	O
char	O
*	O
program_name	pointer
,	O
int	O
*	O
pid	int
,	O
FILE	struct
*	O
*	O
to	int
,	O
FILE	struct
*	O
*	O
from	int
,	O
XtIntervalId	O
*	O
xid	pointer
,	O
int	O
*	O
sendTime	pointer
)	O
{	O
char	O
arg_buf	array
[	O
10	int
]	O
;	O
char	O
*	O
arg1	pointer
,	O
*	O
arg2	pointer
;	O
int	O
to_prog	array
[	O
2	int
]	O
,	O
from_prog	array
[	O
2	int
]	O
;	O
FILE	struct
*	O
from_fp	pointer
,	O
*	O
to_fp	pointer
;	O
int	O
dummy_source	int
;	O
XtInputId	O
dummy_id	O
;	O
if	O
(	O
localPlayer	struct
.	O
appData	struct
.	O
noShogiProgram	int
)	O
return	O
;	O
signal	function
(	O
SIGPIPE	int
,	O
CatchPipeSignal	function
)	O
;	O
pipe	function
(	O
to_prog	array
)	O
;	O
pipe	function
(	O
from_prog	array
)	O
;	O
if	O
(	O
(	O
*	O
pid	int
=	O
fork	function
(	O
)	O
)	O
==	O
0	int
)	O
{	O
signal	function
(	O
SIGPIPE	int
,	O
CatchPipeSignal	function
)	O
;	O
dup2	function
(	O
to_prog	array
[	O
0	int
]	O
,	O
0	int
)	O
;	O
dup2	function
(	O
from_prog	array
[	O
1	int
]	O
,	O
1	int
)	O
;	O
close	function
(	O
to_prog	array
[	O
0	int
]	O
)	O
;	O
close	function
(	O
to_prog	array
[	O
1	int
]	O
)	O
;	O
close	function
(	O
from_prog	array
[	O
0	int
]	O
)	O
;	O
close	function
(	O
from_prog	array
[	O
1	int
]	O
)	O
;	O
dup2	function
(	O
1	int
,	O
fileno	function
(	O
stderr	pointer
)	O
)	O
;	O
if	O
(	O
localPlayer	struct
.	O
appData	struct
.	O
searchTime	int
!=	O
NULL	O
)	O
{	O
sprintf	function
(	O
arg_buf	array
,	O
"%d"	pointer
,	O
searchTime	int
)	O
;	O
arg1	pointer
=	O
arg_buf	array
;	O
arg2	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
else	O
if	O
(	O
localPlayer	struct
.	O
appData	struct
.	O
searchDepth	int
>	O
0	int
)	O
{	O
sprintf	function
(	O
arg_buf	array
,	O
"%d"	pointer
,	O
localPlayer	struct
.	O
appData	struct
.	O
searchDepth	int
)	O
;	O
arg1	pointer
=	O
"1"	pointer
;	O
arg2	pointer
=	O
"9999"	pointer
;	O
}	O
else	O
{	O
sprintf	function
(	O
arg_buf	array
,	O
"%d"	pointer
,	O
localPlayer	struct
.	O
appData	struct
.	O
movesPerSession	int
)	O
;	O
arg1	pointer
=	O
arg_buf	array
;	O
arg2	pointer
=	O
localPlayer	struct
.	O
appData	struct
.	O
timeControl	long
;	O
}	O
if	O
(	O
strcmp	function
(	O
host_name	pointer
,	O
"localhost"	pointer
)	O
==	O
0	int
)	O
{	O
execlp	function
(	O
program_name	pointer
,	O
program_name	pointer
,	O
arg1	pointer
,	O
arg2	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
else	O
{	O
execlp	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
remoteShell	int
,	O
localPlayer	struct
.	O
appData	struct
.	O
remoteShell	int
,	O
host_name	pointer
,	O
program_name	pointer
,	O
arg1	pointer
,	O
arg2	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
perror	function
(	O
program_name	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
close	function
(	O
to_prog	array
[	O
0	int
]	O
)	O
;	O
close	function
(	O
from_prog	array
[	O
1	int
]	O
)	O
;	O
*	O
from	int
=	O
from_fp	pointer
=	O
fdopen	function
(	O
from_prog	array
[	O
0	int
]	O
,	O
"r"	pointer
)	O
;	O
*	O
to	int
=	O
to_fp	pointer
=	O
fdopen	function
(	O
to_prog	array
[	O
1	int
]	O
,	O
"w"	pointer
)	O
;	O
setbuf	function
(	O
from_fp	pointer
,	O
NULL	O
)	O
;	O
setbuf	function
(	O
to_fp	pointer
,	O
NULL	O
)	O
;	O
ReceiveFromProgram	function
(	O
from_fp	pointer
,	O
&	O
dummy_source	int
,	O
&	O
dummy_id	O
)	O
;	O
if	O
(	O
!	O
at_least_gnushogi_1_2p03	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"you must have at least gnushogi-1.2p03\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
*	O
pid	int
==	O
0	int
)	O
return	O
;	O
*	O
xid	pointer
=	O
XtAppAddInput	function
(	O
appContext	int
,	O
fileno	function
(	O
from_fp	pointer
)	O
,	O
(	O
XtPointer	O
)	O
XtInputReadMask	O
,	O
(	O
XtInputCallbackProc	O
)	O
ReceiveFromProgram	function
,	O
(	O
XtPointer	O
)	O
from_fp	pointer
)	O
;	O
SendToProgram	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
initString	int
,	O
*	O
to	int
)	O
;	O
if	O
(	O
localPlayer	struct
.	O
appData	struct
.	O
gameIn	int
)	O
SendToProgram	function
(	O
"gamein\n"	pointer
,	O
*	O
to	int
)	O
;	O
SendSearchDepth	function
(	O
*	O
to	int
)	O
;	O
if	O
(	O
*	O
sendTime	pointer
==	O
2	int
)	O
{	O
char	O
buf	char
[	O
MSG_SIZ	O
]	O
;	O
sprintf	function
(	O
buf	char
,	O
"time %ld\n"	pointer
,	O
blackTimeRemaining	long
/	O
10	int
)	O
;	O
SendToProgram	function
(	O
buf	char
,	O
to_fp	pointer
)	O
;	O
ReceiveFromProgram	function
(	O
from_fp	pointer
,	O
&	O
dummy_source	int
,	O
&	O
dummy_id	O
)	O
;	O
if	O
(	O
*	O
sendTime	pointer
==	O
2	int
)	O
{	O
*	O
sendTime	pointer
=	O
1	int
;	O
sprintf	function
(	O
buf	char
,	O
"otime %ld\n"	pointer
,	O
whiteTimeRemaining	long
/	O
10	int
)	O
;	O
SendToProgram	function
(	O
buf	char
,	O
to_fp	pointer
)	O
;	O
ReceiveFromProgram	function
(	O
from_fp	pointer
,	O
&	O
dummy_source	int
,	O
&	O
dummy_id	O
)	O
;	O
}	O
}	O
}	O
void	O
ShutdownShogiPrograms	function
(	O
char	O
*	O
why	pointer
)	O
{	O
lastGameMode	int
=	O
gameMode	int
;	O
gameMode	int
=	O
EndOfGame	O
;	O
ModeHighlight	function
(	O
)	O
;	O
CopyBoard	function
(	O
boards	int
[	O
currentMove	int
+	O
1	int
]	O
,	O
boards	int
[	O
currentMove	int
]	O
)	O
;	O
CopyCatches	function
(	O
catches	int
[	O
currentMove	int
+	O
1	int
]	O
,	O
catches	int
[	O
currentMove	int
]	O
)	O
;	O
strncpy	function
(	O
parseList	O
[	O
currentMove	int
]	O
,	O
why	pointer
,	O
MOVE_LEN	O
)	O
;	O
parseList	O
[	O
currentMove	int
]	O
[	O
MOVE_LEN	O
-	O
1	int
]	O
=	O
NULLCHAR	O
;	O
currentMove	int
++	O
;	O
DisplayMessage	function
(	O
why	pointer
,	O
False	O
)	O
;	O
if	O
(	O
readGameXID	O
!=	O
0	int
)	O
XtRemoveTimeOut	function
(	O
readGameXID	O
)	O
;	O
readGameXID	O
=	O
0	int
;	O
if	O
(	O
firstProgramPID	int
!=	O
0	int
)	O
{	O
fclose	function
(	O
fromFirstProgFP	pointer
)	O
;	O
fclose	function
(	O
toFirstProgFP	pointer
)	O
;	O
fromFirstProgFP	pointer
=	O
toFirstProgFP	pointer
=	O
NULL	O
;	O
if	O
(	O
kill	function
(	O
firstProgramPID	int
,	O
SIGTERM	int
)	O
==	O
0	int
)	O
WAIT0	O
;	O
}	O
firstProgramPID	int
=	O
0	int
;	O
if	O
(	O
firstProgramXID	int
!=	O
0	int
)	O
XtRemoveInput	function
(	O
firstProgramXID	int
)	O
;	O
firstProgramXID	int
=	O
0	int
;	O
if	O
(	O
secondProgramPID	int
!=	O
0	int
)	O
{	O
fclose	function
(	O
fromSecondProgFP	pointer
)	O
;	O
fclose	function
(	O
toSecondProgFP	pointer
)	O
;	O
fromSecondProgFP	pointer
=	O
toSecondProgFP	pointer
=	O
NULL	O
;	O
if	O
(	O
kill	function
(	O
secondProgramPID	int
,	O
SIGTERM	int
)	O
==	O
0	int
)	O
WAIT0	O
;	O
}	O
secondProgramPID	int
=	O
0	int
;	O
if	O
(	O
secondProgramXID	O
!=	O
0	int
)	O
XtRemoveInput	function
(	O
secondProgramXID	O
)	O
;	O
secondProgramXID	O
=	O
0	int
;	O
DisplayClocks	function
(	O
StopTimers	O
)	O
;	O
if	O
(	O
matchMode	int
!=	O
MatchFalse	O
)	O
{	O
if	O
(	O
localPlayer	struct
.	O
appData	struct
.	O
saveGameFile	int
[	O
0	int
]	O
!=	O
NULLCHAR	O
)	O
SaveGame	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
saveGameFile	int
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
}	O
void	O
CommentPopUp	function
(	O
char	O
*	O
label	pointer
)	O
{	O
Arg	O
args	O
[	O
2	int
]	O
;	O
Position	O
x	int
,	O
y	int
;	O
Dimension	O
bw_width	O
,	O
pw_width	O
;	O
if	O
(	O
commentUp	int
)	O
{	O
XtPopdown	function
(	O
commentShell	O
)	O
;	O
XtDestroyWidget	function
(	O
commentShell	O
)	O
;	O
commentUp	int
=	O
False	O
;	O
}	O
DisplayMessage	function
(	O
"Comment"	pointer
,	O
False	O
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNwidth	O
,	O
&	O
bw_width	O
)	O
;	O
XtGetValues	function
(	O
localPlayer	struct
.	O
formWidget	int
,	O
args	O
,	O
1	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNresizable	O
,	O
True	O
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
1	int
]	O
,	O
XtNwidth	O
,	O
bw_width	O
-	O
8	int
)	O
;	O
commentShell	O
=	O
XtCreatePopupShell	function
(	O
"Comment"	pointer
,	O
transientShellWidgetClass	O
,	O
localPlayer	struct
.	O
commandsWidget	int
,	O
args	O
,	O
2	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNlabel	O
,	O
label	pointer
)	O
;	O
(	O
void	O
)	O
XtCreateManagedWidget	function
(	O
"commentLabel"	pointer
,	O
labelWidgetClass	O
,	O
commentShell	O
,	O
args	O
,	O
1	int
)	O
;	O
XtRealizeWidget	function
(	O
commentShell	O
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNwidth	O
,	O
&	O
pw_width	O
)	O
;	O
XtGetValues	function
(	O
commentShell	O
,	O
args	O
,	O
1	int
)	O
;	O
XtTranslateCoords	function
(	O
localPlayer	struct
.	O
shellWidget	int
,	O
(	O
bw_width	O
-	O
pw_width	O
)	O
/	O
2	int
,	O
-	O
50	int
,	O
&	O
x	int
,	O
&	O
y	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNx	O
,	O
x	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
1	int
]	O
,	O
XtNy	O
,	O
y	int
)	O
;	O
XtSetValues	function
(	O
commentShell	O
,	O
args	O
,	O
2	int
)	O
;	O
XtPopup	function
(	O
commentShell	O
,	O
XtGrabNone	O
)	O
;	O
commentUp	int
=	O
True	O
;	O
}	O
void	O
FileNamePopUp	function
(	O
char	O
*	O
label	pointer
,	O
Boolean	function
(	O
*	O
proc	pointer
)	O
(	O
char	O
*	O
)	O
)	O
{	O
Arg	O
args	O
[	O
2	int
]	O
;	O
Widget	O
popup	O
,	O
dialog	O
;	O
Position	O
x	int
,	O
y	int
;	O
Dimension	O
bw_width	O
,	O
pw_width	O
;	O
fileProc	pointer
=	O
proc	pointer
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNwidth	O
,	O
&	O
bw_width	O
)	O
;	O
XtGetValues	function
(	O
localPlayer	struct
.	O
boardWidget	int
,	O
args	O
,	O
1	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNresizable	O
,	O
True	O
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
1	int
]	O
,	O
XtNwidth	O
,	O
DIALOG_SIZE	O
)	O
;	O
popup	O
=	O
XtCreatePopupShell	function
(	O
"File Name Prompt"	pointer
,	O
transientShellWidgetClass	O
,	O
localPlayer	struct
.	O
commandsWidget	int
,	O
args	O
,	O
2	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNlabel	O
,	O
label	pointer
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
1	int
]	O
,	O
XtNvalue	O
,	O
""	pointer
)	O
;	O
dialog	O
=	O
XtCreateManagedWidget	function
(	O
"dialog"	pointer
,	O
dialogWidgetClass	O
,	O
popup	O
,	O
args	O
,	O
2	int
)	O
;	O
XawDialogAddButton	function
(	O
dialog	O
,	O
"ok"	pointer
,	O
FileNameCallback	function
,	O
(	O
XtPointer	O
)	O
dialog	O
)	O
;	O
XawDialogAddButton	function
(	O
dialog	O
,	O
"cancel"	pointer
,	O
FileNameCallback	function
,	O
(	O
XtPointer	O
)	O
dialog	O
)	O
;	O
XtRealizeWidget	function
(	O
popup	O
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNwidth	O
,	O
&	O
pw_width	O
)	O
;	O
XtGetValues	function
(	O
popup	O
,	O
args	O
,	O
1	int
)	O
;	O
XtTranslateCoords	function
(	O
localPlayer	struct
.	O
boardWidget	int
,	O
(	O
bw_width	O
-	O
pw_width	O
)	O
/	O
2	int
,	O
10	int
,	O
&	O
x	int
,	O
&	O
y	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNx	O
,	O
x	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
1	int
]	O
,	O
XtNy	O
,	O
y	int
)	O
;	O
XtSetValues	function
(	O
popup	O
,	O
args	O
,	O
2	int
)	O
;	O
XtPopup	function
(	O
popup	O
,	O
XtGrabExclusive	O
)	O
;	O
filenameUp	int
=	O
True	O
;	O
XtSetKeyboardFocus	function
(	O
localPlayer	struct
.	O
shellWidget	int
,	O
popup	O
)	O
;	O
}	O
void	O
FileNameCallback	function
(	O
Widget	O
w	int
,	O
XtPointer	O
client_data	int
,	O
XtPointer	O
call_data	int
)	O
{	O
String	O
name	pointer
;	O
Arg	O
args	O
[	O
1	int
]	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNlabel	O
,	O
&	O
name	pointer
)	O
;	O
XtGetValues	function
(	O
w	int
,	O
args	O
,	O
1	int
)	O
;	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
"cancel"	pointer
)	O
==	O
0	int
)	O
{	O
XtPopdown	function
(	O
w	int
=	O
XtParent	function
(	O
XtParent	function
(	O
w	int
)	O
)	O
)	O
;	O
XtDestroyWidget	function
(	O
w	int
)	O
;	O
filenameUp	int
=	O
False	O
;	O
ModeHighlight	function
(	O
)	O
;	O
return	O
;	O
}	O
FileNameAction	function
(	O
w	int
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
void	O
FileNameAction	function
(	O
Widget	O
w	int
,	O
XEvent	O
*	O
event	pointer
,	O
String	O
*	O
prms	pointer
,	O
Cardinal	O
*	O
nprms	pointer
)	O
{	O
char	O
buf	char
[	O
MSG_SIZ	O
]	O
;	O
String	O
name	pointer
;	O
name	pointer
=	O
XawDialogGetValueString	function
(	O
w	int
=	O
XtParent	function
(	O
w	int
)	O
)	O
;	O
if	O
(	O
(	O
name	pointer
!=	O
NULL	O
)	O
&&	O
(	O
*	O
name	pointer
!=	O
NULLCHAR	O
)	O
)	O
{	O
strcpy	function
(	O
buf	char
,	O
name	pointer
)	O
;	O
XtPopdown	function
(	O
w	int
=	O
XtParent	function
(	O
w	int
)	O
)	O
;	O
XtDestroyWidget	function
(	O
w	int
)	O
;	O
filenameUp	int
=	O
False	O
;	O
(	O
*	O
fileProc	pointer
)	O
(	O
buf	char
)	O
;	O
ModeHighlight	function
(	O
)	O
;	O
return	O
;	O
}	O
XtPopdown	function
(	O
w	int
=	O
XtParent	function
(	O
w	int
)	O
)	O
;	O
XtDestroyWidget	function
(	O
w	int
)	O
;	O
filenameUp	int
=	O
False	O
;	O
ModeHighlight	function
(	O
)	O
;	O
}	O
void	O
PromotionPopUp	function
(	O
ShogiSquare	O
piece	int
,	O
int	O
to_x	int
,	O
int	O
to_y	int
,	O
int	O
fromRemotePlayer	int
)	O
{	O
Arg	O
args	O
[	O
2	int
]	O
;	O
Widget	O
dialog	O
;	O
Position	O
x	int
,	O
y	int
;	O
Dimension	O
bw_width	O
,	O
bw_height	O
,	O
pw_width	O
,	O
pw_height	O
;	O
player	pointer
=	O
(	O
fromRemotePlayer	int
?	O
&	O
remotePlayer	struct
:	O
&	O
localPlayer	struct
)	O
;	O
pmi	struct
.	O
piece	int
=	O
piece	int
;	O
pmi	struct
.	O
to_x	int
=	O
to_x	int
;	O
pmi	struct
.	O
to_y	int
=	O
to_y	int
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNwidth	O
,	O
&	O
bw_width	O
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
1	int
]	O
,	O
XtNheight	O
,	O
&	O
bw_height	O
)	O
;	O
XtGetValues	function
(	O
player	pointer
->	O
boardWidget	int
,	O
args	O
,	O
2	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNresizable	O
,	O
True	O
)	O
;	O
player	pointer
->	O
promotionShell	int
=	O
XtCreatePopupShell	function
(	O
"Promotion"	pointer
,	O
transientShellWidgetClass	O
,	O
player	pointer
->	O
commandsWidget	int
,	O
args	O
,	O
1	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNlabel	O
,	O
"Promote piece?"	pointer
)	O
;	O
dialog	O
=	O
XtCreateManagedWidget	function
(	O
"promotion"	pointer
,	O
dialogWidgetClass	O
,	O
player	pointer
->	O
promotionShell	int
,	O
args	O
,	O
1	int
)	O
;	O
XawDialogAddButton	function
(	O
dialog	O
,	O
"Yes"	pointer
,	O
PromotionCallback	function
,	O
(	O
XtPointer	O
)	O
dialog	O
)	O
;	O
XawDialogAddButton	function
(	O
dialog	O
,	O
"No"	pointer
,	O
PromotionCallback	function
,	O
(	O
XtPointer	O
)	O
dialog	O
)	O
;	O
XawDialogAddButton	function
(	O
dialog	O
,	O
"cancel"	pointer
,	O
PromotionCallback	function
,	O
(	O
XtPointer	O
)	O
dialog	O
)	O
;	O
XtRealizeWidget	function
(	O
player	pointer
->	O
promotionShell	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNwidth	O
,	O
&	O
pw_width	O
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
1	int
]	O
,	O
XtNheight	O
,	O
&	O
pw_height	O
)	O
;	O
XtGetValues	function
(	O
player	pointer
->	O
promotionShell	int
,	O
args	O
,	O
2	int
)	O
;	O
XtTranslateCoords	function
(	O
player	pointer
->	O
boardWidget	int
,	O
(	O
(	O
bw_width	O
-	O
pw_width	O
)	O
/	O
2	int
)	O
,	O
(	O
LINE_GAP	O
+	O
player	pointer
->	O
squareSize	int
/	O
3	int
+	O
(	O
(	O
(	O
piece	int
==	O
BlackPawn	O
)	O
^	O
(	O
player	pointer
->	O
flipView	int
)	O
)	O
?	O
0	int
:	O
(	O
6	int
*	O
(	O
player	pointer
->	O
squareSize	int
+	O
LINE_GAP	O
)	O
)	O
)	O
)	O
,	O
&	O
x	int
,	O
&	O
y	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNx	O
,	O
x	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
1	int
]	O
,	O
XtNy	O
,	O
y	int
)	O
;	O
XtSetValues	function
(	O
player	pointer
->	O
promotionShell	int
,	O
args	O
,	O
2	int
)	O
;	O
XtPopup	function
(	O
player	pointer
->	O
promotionShell	int
,	O
XtGrabNone	O
)	O
;	O
player	pointer
->	O
promotionUp	int
=	O
True	O
;	O
}	O
void	O
PromotionCallback	function
(	O
Widget	O
w	int
,	O
XtPointer	O
client_data	int
,	O
XtPointer	O
call_data	int
)	O
{	O
String	O
name	pointer
;	O
Arg	O
args	O
[	O
1	int
]	O
;	O
ShogiMove	O
move_type	int
;	O
struct	O
DisplayData	struct
*	O
player	pointer
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNlabel	O
,	O
&	O
name	pointer
)	O
;	O
XtGetValues	function
(	O
w	int
,	O
args	O
,	O
1	int
)	O
;	O
w	int
=	O
XtParent	function
(	O
XtParent	function
(	O
w	int
)	O
)	O
;	O
player	pointer
=	O
(	O
(	O
w	int
==	O
remotePlayer	struct
.	O
promotionShell	int
)	O
?	O
&	O
remotePlayer	struct
:	O
&	O
localPlayer	struct
)	O
;	O
XtPopdown	function
(	O
w	int
)	O
;	O
XtDestroyWidget	function
(	O
w	int
)	O
;	O
player	pointer
->	O
promotionUp	int
=	O
False	O
;	O
if	O
(	O
fromX	int
==	O
-	O
1	int
)	O
return	O
;	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
"Yes"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
(	O
int	O
)	O
pmi	struct
.	O
piece	int
<	O
(	O
int	O
)	O
WhitePawn	O
)	O
move_type	int
=	O
BlackPromotion	O
;	O
else	O
move_type	int
=	O
WhitePromotion	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
"No"	pointer
)	O
==	O
0	int
)	O
{	O
move_type	int
=	O
NormalMove	O
;	O
}	O
else	O
{	O
fromX	int
=	O
fromY	int
=	O
-	O
1	int
;	O
return	O
;	O
}	O
MakeMove	function
(	O
&	O
move_type	int
,	O
fromX	int
,	O
fromY	int
,	O
pmi	struct
.	O
to_x	int
,	O
pmi	struct
.	O
to_y	int
)	O
;	O
FinishUserMove	function
(	O
move_type	int
,	O
pmi	struct
.	O
to_x	int
,	O
pmi	struct
.	O
to_y	int
)	O
;	O
}	O
void	O
FileModePopUp	function
(	O
char	O
*	O
name	pointer
)	O
{	O
Arg	O
args	O
[	O
2	int
]	O
;	O
Widget	O
dialog	O
;	O
Position	O
x	int
,	O
y	int
;	O
Dimension	O
bw_width	O
,	O
bw_height	O
,	O
pw_width	O
,	O
pw_height	O
;	O
struct	O
DisplayData	struct
*	O
player	pointer
=	O
&	O
localPlayer	struct
;	O
strcpy	function
(	O
fmi	struct
.	O
name	pointer
,	O
name	pointer
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNwidth	O
,	O
&	O
bw_width	O
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
1	int
]	O
,	O
XtNheight	O
,	O
&	O
bw_height	O
)	O
;	O
XtGetValues	function
(	O
player	pointer
->	O
boardWidget	int
,	O
args	O
,	O
2	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNresizable	O
,	O
True	O
)	O
;	O
player	pointer
->	O
filemodeShell	int
=	O
XtCreatePopupShell	function
(	O
"FileMode"	pointer
,	O
transientShellWidgetClass	O
,	O
player	pointer
->	O
commandsWidget	int
,	O
args	O
,	O
1	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNlabel	O
,	O
"Append to existing file?"	pointer
)	O
;	O
dialog	O
=	O
XtCreateManagedWidget	function
(	O
"filemode"	pointer
,	O
dialogWidgetClass	O
,	O
player	pointer
->	O
filemodeShell	int
,	O
args	O
,	O
1	int
)	O
;	O
XawDialogAddButton	function
(	O
dialog	O
,	O
"Yes"	pointer
,	O
FileModeCallback	function
,	O
(	O
XtPointer	O
)	O
dialog	O
)	O
;	O
XawDialogAddButton	function
(	O
dialog	O
,	O
"No"	pointer
,	O
FileModeCallback	function
,	O
(	O
XtPointer	O
)	O
dialog	O
)	O
;	O
XawDialogAddButton	function
(	O
dialog	O
,	O
"cancel"	pointer
,	O
FileModeCallback	function
,	O
(	O
XtPointer	O
)	O
dialog	O
)	O
;	O
XtRealizeWidget	function
(	O
player	pointer
->	O
filemodeShell	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNwidth	O
,	O
&	O
pw_width	O
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
1	int
]	O
,	O
XtNheight	O
,	O
&	O
pw_height	O
)	O
;	O
XtGetValues	function
(	O
player	pointer
->	O
filemodeShell	int
,	O
args	O
,	O
2	int
)	O
;	O
XtTranslateCoords	function
(	O
player	pointer
->	O
boardWidget	int
,	O
(	O
bw_width	O
-	O
pw_width	O
)	O
/	O
2	int
,	O
LINE_GAP	O
+	O
player	pointer
->	O
squareSize	int
/	O
3	int
+	O
(	O
6	int
*	O
(	O
player	pointer
->	O
squareSize	int
+	O
LINE_GAP	O
)	O
)	O
,	O
&	O
x	int
,	O
&	O
y	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNx	O
,	O
x	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
1	int
]	O
,	O
XtNy	O
,	O
y	int
)	O
;	O
XtSetValues	function
(	O
player	pointer
->	O
filemodeShell	int
,	O
args	O
,	O
2	int
)	O
;	O
XtPopup	function
(	O
player	pointer
->	O
filemodeShell	int
,	O
XtGrabNone	O
)	O
;	O
filemodeUp	int
=	O
True	O
;	O
}	O
void	O
FileModeCallback	function
(	O
Widget	O
w	int
,	O
XtPointer	O
client_data	int
,	O
XtPointer	O
call_data	int
)	O
{	O
String	O
name	pointer
;	O
Arg	O
args	O
[	O
1	int
]	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNlabel	O
,	O
&	O
name	pointer
)	O
;	O
XtGetValues	function
(	O
w	int
,	O
args	O
,	O
1	int
)	O
;	O
XtPopdown	function
(	O
w	int
=	O
XtParent	function
(	O
XtParent	function
(	O
w	int
)	O
)	O
)	O
;	O
XtDestroyWidget	function
(	O
w	int
)	O
;	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
"Yes"	pointer
)	O
==	O
0	int
)	O
{	O
strcpy	function
(	O
fmi	struct
.	O
mode	array
,	O
"a"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
"No"	pointer
)	O
==	O
0	int
)	O
{	O
strcpy	function
(	O
fmi	struct
.	O
mode	array
,	O
"w"	pointer
)	O
;	O
}	O
else	O
{	O
filemodeUp	int
=	O
False	O
;	O
return	O
;	O
}	O
XtPopdown	function
(	O
localPlayer	struct
.	O
filemodeShell	int
)	O
;	O
XtDestroyWidget	function
(	O
localPlayer	struct
.	O
filemodeShell	int
)	O
;	O
SaveGame	function
(	O
fmi	struct
.	O
name	pointer
)	O
;	O
filemodeUp	int
=	O
False	O
;	O
}	O
void	O
SelectCommand	function
(	O
Widget	O
w	int
,	O
XtPointer	O
client_data	int
,	O
XtPointer	O
call_data	int
)	O
{	O
Cardinal	O
fromRemotePlayer	int
=	O
(	O
Cardinal	O
)	O
client_data	int
;	O
XawListReturnStruct	O
*	O
list_return	O
=	O
XawListShowCurrent	function
(	O
w	int
)	O
;	O
player	pointer
=	O
fromRemotePlayer	int
?	O
&	O
remotePlayer	struct
:	O
&	O
localPlayer	struct
;	O
fromX	int
=	O
fromY	int
=	O
-	O
1	int
;	O
if	O
(	O
player	pointer
->	O
promotionUp	int
)	O
{	O
XtPopdown	function
(	O
player	pointer
->	O
promotionShell	int
)	O
;	O
XtDestroyWidget	function
(	O
player	pointer
->	O
promotionShell	int
)	O
;	O
player	pointer
->	O
promotionUp	int
=	O
False	O
;	O
}	O
(	O
*	O
buttonProcs	pointer
[	O
list_return	O
->	O
list_index	O
]	O
)	O
(	O
w	int
,	O
NULL	O
,	O
NULL	O
,	O
&	O
fromRemotePlayer	int
)	O
;	O
if	O
(	O
!	O
filenameUp	int
)	O
ModeHighlight	function
(	O
)	O
;	O
}	O
void	O
HighlightProcButton	function
(	O
XtActionProc	O
proc	pointer
)	O
{	O
int	O
i	int
=	O
0	int
;	O
if	O
(	O
proc	pointer
==	O
NULL	O
)	O
{	O
XawListUnhighlight	function
(	O
localPlayer	struct
.	O
commandsWidget	int
)	O
;	O
if	O
(	O
updateRemotePlayer	int
)	O
XawListUnhighlight	function
(	O
remotePlayer	struct
.	O
commandsWidget	int
)	O
;	O
return	O
;	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
buttonProcs	pointer
[	O
i	int
]	O
==	O
NULL	O
)	O
{	O
XawListUnhighlight	function
(	O
localPlayer	struct
.	O
commandsWidget	int
)	O
;	O
if	O
(	O
updateRemotePlayer	int
)	O
XawListUnhighlight	function
(	O
remotePlayer	struct
.	O
commandsWidget	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
buttonProcs	pointer
[	O
i	int
]	O
==	O
proc	pointer
)	O
{	O
XawListHighlight	function
(	O
localPlayer	struct
.	O
commandsWidget	int
,	O
i	int
)	O
;	O
if	O
(	O
updateRemotePlayer	int
)	O
XawListHighlight	function
(	O
remotePlayer	struct
.	O
commandsWidget	int
,	O
i	int
)	O
;	O
return	O
;	O
}	O
i	int
++	O
;	O
}	O
}	O
void	O
ModeHighlight	function
(	O
void	O
)	O
{	O
switch	O
(	O
gameMode	int
)	O
{	O
case	O
BeginningOfGame	O
:	O
if	O
(	O
localPlayer	struct
.	O
appData	struct
.	O
noShogiProgram	int
)	O
HighlightProcButton	function
(	O
ForceProc	function
)	O
;	O
else	O
HighlightProcButton	function
(	O
MachineBlackProc	function
)	O
;	O
break	O
;	O
case	O
MachinePlaysBlack	O
:	O
HighlightProcButton	function
(	O
MachineBlackProc	function
)	O
;	O
break	O
;	O
case	O
MachinePlaysWhite	O
:	O
HighlightProcButton	function
(	O
MachineWhiteProc	function
)	O
;	O
break	O
;	O
case	O
TwoMachinesPlay	O
:	O
HighlightProcButton	function
(	O
TwoMachinesProc	function
)	O
;	O
break	O
;	O
case	O
ForceMoves	O
:	O
HighlightProcButton	function
(	O
ForceProc	function
)	O
;	O
break	O
;	O
case	O
PlayFromGameFile	O
:	O
HighlightProcButton	function
(	O
LoadGameProc	function
)	O
;	O
break	O
;	O
case	O
PauseGame	O
:	O
HighlightProcButton	function
(	O
PauseProc	function
)	O
;	O
break	O
;	O
case	O
EditPosition	O
:	O
HighlightProcButton	function
(	O
EditPositionProc	function
)	O
;	O
break	O
;	O
case	O
EndOfGame	O
:	O
default	O
:	O
HighlightProcButton	function
(	O
NULL	O
)	O
;	O
break	O
;	O
}	O
}	O
void	O
QuitRemotePlayerProc	function
(	O
void	O
)	O
{	O
XCloseDisplay	function
(	O
remotePlayer	struct
.	O
xDisplay	pointer
)	O
;	O
updateRemotePlayer	int
=	O
False	O
;	O
DisplayMessage	function
(	O
"Remote player has pressed Quit"	pointer
,	O
False	O
)	O
;	O
fromX	int
=	O
fromY	int
=	O
-	O
1	int
;	O
}	O
void	O
QuitProc	function
(	O
Widget	O
w	int
,	O
XEvent	O
*	O
event	pointer
,	O
String	O
*	O
prms	pointer
,	O
Cardinal	O
*	O
nprms	pointer
)	O
{	O
if	O
(	O
updateRemotePlayer	int
)	O
QuitRemotePlayerProc	function
(	O
)	O
;	O
ShutdownShogiPrograms	function
(	O
"Quitting"	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
void	O
LoadGameProc	function
(	O
Widget	O
w	int
,	O
XEvent	O
*	O
event	pointer
,	O
String	O
*	O
prms	pointer
,	O
Cardinal	O
*	O
nprms	pointer
)	O
{	O
int	O
fromRemotePlayer	int
=	O
*	O
nprms	pointer
;	O
if	O
(	O
fromRemotePlayer	int
)	O
{	O
DisplayMessage	function
(	O
"only opponent may load game"	pointer
,	O
fromRemotePlayer	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
gameMode	int
!=	O
BeginningOfGame	O
)	O
{	O
DisplayMessage	function
(	O
"Press Reset first."	pointer
,	O
False	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
localPlayer	struct
.	O
appData	struct
.	O
loadGameFile	int
==	O
NULL	O
)	O
FileNamePopUp	function
(	O
"Game file name?"	pointer
,	O
LoadGame	function
)	O
;	O
else	O
(	O
void	O
)	O
LoadGame	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
loadGameFile	int
)	O
;	O
}	O
Boolean	function
LoadGame	function
(	O
char	O
*	O
name	pointer
)	O
{	O
char	O
buf	char
[	O
MSG_SIZ	O
]	O
;	O
loaded_game_finished	int
=	O
0	int
;	O
if	O
(	O
gameMode	int
!=	O
BeginningOfGame	O
)	O
{	O
DisplayMessage	function
(	O
"Press Reset first"	pointer
,	O
False	O
)	O
;	O
return	O
(	O
int	O
)	O
False	O
;	O
}	O
if	O
(	O
localPlayer	struct
.	O
appData	struct
.	O
loadGameFile	int
!=	O
name	pointer
)	O
{	O
if	O
(	O
localPlayer	struct
.	O
appData	struct
.	O
loadGameFile	int
)	O
XtFree	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
loadGameFile	int
)	O
;	O
localPlayer	struct
.	O
appData	struct
.	O
loadGameFile	int
=	O
XtMalloc	function
(	O
strlen	function
(	O
name	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
loadGameFile	int
,	O
name	pointer
)	O
;	O
}	O
if	O
(	O
(	O
gameFileFP	pointer
=	O
fopen	function
(	O
name	pointer
,	O
"r"	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
sprintf	function
(	O
buf	char
,	O
"Can't open %s"	pointer
,	O
name	pointer
)	O
;	O
DisplayMessage	function
(	O
buf	char
,	O
False	O
)	O
;	O
XtFree	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
loadGameFile	int
)	O
;	O
localPlayer	struct
.	O
appData	struct
.	O
loadGameFile	int
=	O
NULL	O
;	O
return	O
(	O
int	O
)	O
False	O
;	O
}	O
lastGameMode	int
=	O
gameMode	int
=	O
PlayFromGameFile	O
;	O
ModeHighlight	function
(	O
)	O
;	O
InitPosition	function
(	O
True	O
)	O
;	O
DisplayClocks	function
(	O
StopTimers	O
)	O
;	O
if	O
(	O
firstProgramXID	int
==	O
0	int
)	O
{	O
InitShogiProgram	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
firstHost	int
,	O
localPlayer	struct
.	O
appData	struct
.	O
firstShogiProgram	int
,	O
&	O
firstProgramPID	int
,	O
&	O
toFirstProgFP	pointer
,	O
&	O
fromFirstProgFP	pointer
,	O
&	O
firstProgramXID	int
,	O
&	O
firstSendTime	int
)	O
;	O
}	O
SendToProgram	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
initString	int
,	O
toFirstProgFP	pointer
)	O
;	O
SendSearchDepth	function
(	O
toFirstProgFP	pointer
)	O
;	O
SendToProgram	function
(	O
"force\n"	pointer
,	O
toFirstProgFP	pointer
)	O
;	O
currentMove	int
=	O
forwardMostMove	int
=	O
backwardMostMove	int
=	O
0	int
;	O
ReadGameFile	function
(	O
)	O
;	O
return	O
True	O
;	O
}	O
void	O
ResurrectShogiProgram	function
(	O
void	O
)	O
{	O
char	O
buf	char
[	O
MSG_SIZ	O
]	O
;	O
int	O
i	int
;	O
if	O
(	O
currentMove	int
>	O
0	int
)	O
currentMove	int
--	O
;	O
InitShogiProgram	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
firstHost	int
,	O
localPlayer	struct
.	O
appData	struct
.	O
firstShogiProgram	int
,	O
&	O
firstProgramPID	int
,	O
&	O
toFirstProgFP	pointer
,	O
&	O
fromFirstProgFP	pointer
,	O
&	O
firstProgramXID	int
,	O
&	O
firstSendTime	int
)	O
;	O
SendToProgram	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
initString	int
,	O
toFirstProgFP	pointer
)	O
;	O
SendSearchDepth	function
(	O
toFirstProgFP	pointer
)	O
;	O
SendToProgram	function
(	O
"force\n"	pointer
,	O
toFirstProgFP	pointer
)	O
;	O
gameMode	int
=	O
lastGameMode	int
=	O
ForceMoves	O
;	O
ModeHighlight	function
(	O
)	O
;	O
i	int
=	O
(	O
whitePlaysFirst	int
?	O
1	int
:	O
0	int
)	O
;	O
if	O
(	O
startedFromSetupPosition	int
)	O
SendBoard	function
(	O
toFirstProgFP	pointer
,	O
boards	int
[	O
i	int
]	O
,	O
catches	int
[	O
i	int
]	O
)	O
;	O
for	O
(	O
;	O
i	int
<	O
currentMove	int
;	O
i	int
++	O
)	O
{	O
strcpy	function
(	O
buf	char
,	O
moveList	char
[	O
i	int
]	O
)	O
;	O
SendToProgram	function
(	O
buf	char
,	O
toFirstProgFP	pointer
)	O
;	O
}	O
if	O
(	O
!	O
firstSendTime	int
)	O
{	O
DisplayClocks	function
(	O
ResetTimers	O
)	O
;	O
timeRemaining	array
[	O
0	int
]	O
[	O
currentMove	int
]	O
=	O
blackTimeRemaining	long
;	O
timeRemaining	array
[	O
1	int
]	O
[	O
currentMove	int
]	O
=	O
whiteTimeRemaining	long
;	O
}	O
}	O
void	O
MachineWhiteProc	function
(	O
Widget	O
w	int
,	O
XEvent	O
*	O
event	pointer
,	O
String	O
*	O
prms	pointer
,	O
Cardinal	O
*	O
nprms	pointer
)	O
{	O
int	O
fromRemotePlayer	int
=	O
*	O
nprms	pointer
;	O
if	O
(	O
updateRemotePlayer	int
)	O
{	O
DisplayMessage	function
(	O
"no machine moves in challenge mode"	pointer
,	O
fromRemotePlayer	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
gameMode	int
==	O
PauseGame	O
)	O
PauseProc	function
(	O
w	int
,	O
event	pointer
,	O
prms	pointer
,	O
nprms	pointer
)	O
;	O
if	O
(	O
gameMode	int
==	O
PlayFromGameFile	O
)	O
ForceProc	function
(	O
w	int
,	O
event	pointer
,	O
prms	pointer
,	O
nprms	pointer
)	O
;	O
if	O
(	O
gameMode	int
==	O
EditPosition	O
)	O
EditPositionDone	function
(	O
)	O
;	O
if	O
(	O
(	O
gameMode	int
==	O
EndOfGame	O
)	O
||	O
(	O
gameMode	int
==	O
PlayFromGameFile	O
)	O
||	O
(	O
gameMode	int
==	O
TwoMachinesPlay	O
)	O
||	O
localPlayer	struct
.	O
appData	struct
.	O
noShogiProgram	int
||	O
(	O
gameMode	int
==	O
MachinePlaysWhite	O
)	O
)	O
{	O
return	O
;	O
}	O
if	O
(	O
BlackOnMove	function
(	O
(	O
gameMode	int
==	O
ForceMoves	O
)	O
?	O
currentMove	int
:	O
forwardMostMove	int
)	O
)	O
{	O
DisplayMessage	function
(	O
"It is not White's turn."	pointer
,	O
False	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
gameMode	int
==	O
ForceMoves	O
)	O
forwardMostMove	int
=	O
currentMove	int
;	O
lastGameMode	int
=	O
gameMode	int
=	O
MachinePlaysWhite	O
;	O
ModeHighlight	function
(	O
)	O
;	O
SendToProgram	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
whiteString	int
,	O
toFirstProgFP	pointer
)	O
;	O
DisplayClocks	function
(	O
StartTimers	O
)	O
;	O
}	O
void	O
MachineBlackProc	function
(	O
Widget	O
w	int
,	O
XEvent	O
*	O
event	pointer
,	O
String	O
*	O
prms	pointer
,	O
Cardinal	O
*	O
nprms	pointer
)	O
{	O
int	O
fromRemotePlayer	int
=	O
*	O
nprms	pointer
;	O
if	O
(	O
updateRemotePlayer	int
)	O
{	O
DisplayMessage	function
(	O
"no machine moves in challenge mode"	pointer
,	O
fromRemotePlayer	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
gameMode	int
==	O
PauseGame	O
)	O
PauseProc	function
(	O
w	int
,	O
event	pointer
,	O
prms	pointer
,	O
nprms	pointer
)	O
;	O
if	O
(	O
gameMode	int
==	O
PlayFromGameFile	O
)	O
ForceProc	function
(	O
w	int
,	O
event	pointer
,	O
prms	pointer
,	O
nprms	pointer
)	O
;	O
if	O
(	O
gameMode	int
==	O
EditPosition	O
)	O
EditPositionDone	function
(	O
)	O
;	O
if	O
(	O
(	O
gameMode	int
==	O
EndOfGame	O
)	O
||	O
(	O
gameMode	int
==	O
PlayFromGameFile	O
)	O
||	O
(	O
gameMode	int
==	O
TwoMachinesPlay	O
)	O
||	O
localPlayer	struct
.	O
appData	struct
.	O
noShogiProgram	int
||	O
(	O
gameMode	int
==	O
MachinePlaysBlack	O
)	O
)	O
{	O
return	O
;	O
}	O
if	O
(	O
!	O
BlackOnMove	function
(	O
(	O
gameMode	int
==	O
ForceMoves	O
)	O
?	O
currentMove	int
:	O
forwardMostMove	int
)	O
)	O
{	O
DisplayMessage	function
(	O
"It is not Black's turn."	pointer
,	O
False	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
gameMode	int
==	O
ForceMoves	O
)	O
forwardMostMove	int
=	O
currentMove	int
;	O
lastGameMode	int
=	O
gameMode	int
=	O
MachinePlaysBlack	O
;	O
ModeHighlight	function
(	O
)	O
;	O
SendToProgram	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
blackString	int
,	O
toFirstProgFP	pointer
)	O
;	O
DisplayClocks	function
(	O
StartTimers	O
)	O
;	O
}	O
void	O
ForwardProc	function
(	O
Widget	O
w	int
,	O
XEvent	O
*	O
event	pointer
,	O
String	O
*	O
prms	pointer
,	O
Cardinal	O
*	O
nprms	pointer
)	O
{	O
char	O
buf	char
[	O
MSG_SIZ	O
]	O
;	O
int	O
target	int
;	O
unsigned	O
int	O
state	pointer
;	O
int	O
fromRemotePlayer	int
=	O
*	O
nprms	pointer
;	O
if	O
(	O
updateRemotePlayer	int
)	O
{	O
DisplayMessage	function
(	O
"Forward button disabled."	pointer
,	O
fromRemotePlayer	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
(	O
gameMode	int
==	O
EndOfGame	O
)	O
||	O
(	O
gameMode	int
==	O
EditPosition	O
)	O
)	O
return	O
;	O
if	O
(	O
gameMode	int
==	O
PlayFromGameFile	O
)	O
PauseProc	function
(	O
w	int
,	O
event	pointer
,	O
prms	pointer
,	O
nprms	pointer
)	O
;	O
if	O
(	O
currentMove	int
>=	O
forwardMostMove	int
)	O
return	O
;	O
if	O
(	O
event	pointer
==	O
NULL	O
)	O
{	O
Window	O
root	O
,	O
child	O
;	O
int	O
root_x	int
,	O
root_y	int
;	O
int	O
win_x	int
,	O
win_y	int
;	O
XQueryPointer	function
(	O
localPlayer	struct
.	O
xDisplay	pointer
,	O
localPlayer	struct
.	O
xBoardWindow	int
,	O
&	O
root	O
,	O
&	O
child	O
,	O
&	O
root_x	int
,	O
&	O
root_y	int
,	O
&	O
win_x	int
,	O
&	O
win_y	int
,	O
&	O
state	pointer
)	O
;	O
}	O
else	O
{	O
state	pointer
=	O
event	pointer
->	O
xkey	O
.	O
state	pointer
;	O
}	O
if	O
(	O
state	pointer
&	O
ShiftMask	O
)	O
target	int
=	O
forwardMostMove	int
;	O
else	O
target	int
=	O
currentMove	int
+	O
1	int
;	O
if	O
(	O
gameMode	int
==	O
ForceMoves	O
)	O
{	O
while	O
(	O
currentMove	int
<	O
target	int
)	O
{	O
strcpy	function
(	O
buf	char
,	O
moveList	char
[	O
currentMove	int
++	O
]	O
)	O
;	O
SendToProgram	function
(	O
buf	char
,	O
toFirstProgFP	pointer
)	O
;	O
}	O
}	O
else	O
{	O
currentMove	int
=	O
target	int
;	O
}	O
if	O
(	O
gameMode	int
==	O
ForceMoves	O
)	O
{	O
blackTimeRemaining	long
=	O
timeRemaining	array
[	O
0	int
]	O
[	O
currentMove	int
]	O
;	O
whiteTimeRemaining	long
=	O
timeRemaining	array
[	O
1	int
]	O
[	O
currentMove	int
]	O
;	O
}	O
DisplayClocks	function
(	O
ReDisplayTimers	O
)	O
;	O
DisplayMove	function
(	O
currentMove	int
-	O
1	int
)	O
;	O
DrawPosition	function
(	O
localPlayer	struct
.	O
boardWidget	int
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
void	O
ResetFileProc	function
(	O
void	O
)	O
{	O
char	O
*	O
buf	char
=	O
""	pointer
;	O
if	O
(	O
updateRemotePlayer	int
)	O
return	O
;	O
if	O
(	O
localPlayer	struct
.	O
appData	struct
.	O
loadGameFile	int
)	O
XtFree	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
loadGameFile	int
)	O
;	O
if	O
(	O
localPlayer	struct
.	O
appData	struct
.	O
loadPositionFile	int
)	O
XtFree	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
loadPositionFile	int
)	O
;	O
localPlayer	struct
.	O
appData	struct
.	O
loadGameFile	int
=	O
localPlayer	struct
.	O
appData	struct
.	O
loadPositionFile	int
=	O
NULL	O
;	O
DisplayName	function
(	O
buf	char
)	O
;	O
if	O
(	O
gameFileFP	pointer
!=	O
NULL	O
)	O
{	O
fclose	function
(	O
gameFileFP	pointer
)	O
;	O
gameFileFP	pointer
=	O
NULL	O
;	O
}	O
}	O
void	O
ResetChallenge	function
(	O
void	O
)	O
{	O
char	O
*	O
buf	char
=	O
""	pointer
;	O
if	O
(	O
localPlayer	struct
.	O
appData	struct
.	O
challengeDisplay	int
)	O
XtFree	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
challengeDisplay	int
)	O
;	O
localPlayer	struct
.	O
appData	struct
.	O
challengeDisplay	int
=	O
NULL	O
;	O
DisplayName	function
(	O
buf	char
)	O
;	O
}	O
void	O
ResetProc	function
(	O
Widget	O
w	int
,	O
XEvent	O
*	O
event	pointer
,	O
String	O
*	O
prms	pointer
,	O
Cardinal	O
*	O
nprms	pointer
)	O
{	O
int	O
fromRemotePlayer	int
=	O
*	O
nprms	pointer
;	O
if	O
(	O
fromRemotePlayer	int
)	O
{	O
DisplayMessage	function
(	O
"Only your opponent may reset the game."	pointer
,	O
fromRemotePlayer	int
)	O
;	O
return	O
;	O
}	O
Reset	function
(	O
True	O
)	O
;	O
}	O
void	O
Reset	function
(	O
int	O
redraw	int
)	O
{	O
ResetFileProc	function
(	O
)	O
;	O
ResetChallenge	function
(	O
)	O
;	O
localPlayer	struct
.	O
flipView	int
=	O
False	O
;	O
remotePlayer	struct
.	O
flipView	int
=	O
True	O
;	O
startedFromSetupPosition	int
=	O
whitePlaysFirst	int
=	O
False	O
;	O
matchMode	int
=	O
MatchFalse	O
;	O
firstMove	int
=	O
True	O
;	O
blackFlag	int
=	O
whiteFlag	int
=	O
False	O
;	O
maybeThinking	int
=	O
False	O
;	O
endMessage	char
[	O
0	int
]	O
=	O
NULLCHAR	O
;	O
ShutdownShogiPrograms	function
(	O
""	pointer
)	O
;	O
lastGameMode	int
=	O
gameMode	int
=	O
BeginningOfGame	O
;	O
ModeHighlight	function
(	O
)	O
;	O
InitPosition	function
(	O
redraw	int
)	O
;	O
DisplayClocks	function
(	O
ResetTimers	O
)	O
;	O
timeRemaining	array
[	O
0	int
]	O
[	O
0	int
]	O
=	O
blackTimeRemaining	long
;	O
timeRemaining	array
[	O
1	int
]	O
[	O
0	int
]	O
=	O
whiteTimeRemaining	long
;	O
InitShogiProgram	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
firstHost	int
,	O
localPlayer	struct
.	O
appData	struct
.	O
firstShogiProgram	int
,	O
&	O
firstProgramPID	int
,	O
&	O
toFirstProgFP	pointer
,	O
&	O
fromFirstProgFP	pointer
,	O
&	O
firstProgramXID	int
,	O
&	O
firstSendTime	int
)	O
;	O
if	O
(	O
commentUp	int
)	O
{	O
XtPopdown	function
(	O
commentShell	O
)	O
;	O
XtDestroyWidget	function
(	O
commentShell	O
)	O
;	O
commentUp	int
=	O
False	O
;	O
}	O
if	O
(	O
localPlayer	struct
.	O
promotionUp	int
)	O
{	O
XtPopdown	function
(	O
localPlayer	struct
.	O
promotionShell	int
)	O
;	O
XtDestroyWidget	function
(	O
localPlayer	struct
.	O
promotionShell	int
)	O
;	O
localPlayer	struct
.	O
promotionUp	int
=	O
False	O
;	O
}	O
if	O
(	O
updateRemotePlayer	int
&&	O
remotePlayer	struct
.	O
promotionUp	int
)	O
{	O
XtPopdown	function
(	O
remotePlayer	struct
.	O
promotionShell	int
)	O
;	O
XtDestroyWidget	function
(	O
remotePlayer	struct
.	O
promotionShell	int
)	O
;	O
remotePlayer	struct
.	O
promotionUp	int
=	O
False	O
;	O
}	O
}	O
void	O
ClearCatches	function
(	O
int	O
(	O
*	O
catches	int
)	O
[	O
8	int
]	O
)	O
{	O
int	O
c	int
,	O
p	pointer
;	O
for	O
(	O
c	int
=	O
0	int
;	O
c	int
<=	O
1	int
;	O
c	int
++	O
)	O
for	O
(	O
p	pointer
=	O
0	int
;	O
p	pointer
<=	O
7	int
;	O
p	pointer
++	O
)	O
catches	int
[	O
c	int
]	O
[	O
p	pointer
]	O
=	O
0	int
;	O
}	O
Boolean	function
Challenge	function
(	O
char	O
*	O
name	pointer
)	O
{	O
char	O
buf	char
[	O
MSG_SIZ	O
]	O
;	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
XrmDatabase	O
database	O
;	O
if	O
(	O
gameMode	int
!=	O
BeginningOfGame	O
)	O
{	O
DisplayMessage	function
(	O
"Press Reset first."	pointer
,	O
False	O
)	O
;	O
return	O
(	O
int	O
)	O
False	O
;	O
}	O
if	O
(	O
localPlayer	struct
.	O
appData	struct
.	O
challengeDisplay	int
!=	O
name	pointer
)	O
{	O
if	O
(	O
localPlayer	struct
.	O
appData	struct
.	O
challengeDisplay	int
)	O
XtFree	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
challengeDisplay	int
)	O
;	O
localPlayer	struct
.	O
appData	struct
.	O
challengeDisplay	int
=	O
XtMalloc	function
(	O
strlen	function
(	O
name	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
challengeDisplay	int
,	O
name	pointer
)	O
;	O
}	O
sprintf	function
(	O
buf	char
,	O
"trying to connect to %s....."	pointer
,	O
name	pointer
)	O
;	O
DisplayMessage	function
(	O
buf	char
,	O
False	O
)	O
;	O
argc	int
=	O
global_argc	int
;	O
argv	pointer
=	O
global_argv	array
;	O
if	O
(	O
(	O
remotePlayer	struct
.	O
xDisplay	pointer
=	O
XtOpenDisplay	function
(	O
appContext	int
,	O
name	pointer
,	O
"XShogi"	pointer
,	O
"XShogi"	pointer
,	O
0	int
,	O
0	int
,	O
&	O
argc	int
,	O
argv	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
sprintf	function
(	O
buf	char
,	O
"Can't open display %s"	pointer
,	O
name	pointer
)	O
;	O
DisplayMessage	function
(	O
buf	char
,	O
False	O
)	O
;	O
XtFree	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
challengeDisplay	int
)	O
;	O
localPlayer	struct
.	O
appData	struct
.	O
challengeDisplay	int
=	O
NULL	O
;	O
return	O
(	O
int	O
)	O
False	O
;	O
}	O
DisplayMessage	function
(	O
"connected! creating remote window..."	pointer
,	O
False	O
)	O
;	O
remotePlayer	struct
.	O
xScreen	int
=	O
DefaultScreen	function
(	O
remotePlayer	struct
.	O
xDisplay	pointer
)	O
;	O
remotePlayer	struct
.	O
shellWidget	int
=	O
XtAppCreateShell	function
(	O
NULL	O
,	O
"XShogi"	pointer
,	O
applicationShellWidgetClass	O
,	O
remotePlayer	struct
.	O
xDisplay	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
database	O
=	O
XtDatabase	function
(	O
remotePlayer	struct
.	O
xDisplay	pointer
)	O
;	O
XrmParseCommand	function
(	O
&	O
database	O
,	O
shellOptions	array
,	O
XtNumber	function
(	O
shellOptions	array
)	O
,	O
"XShogi"	pointer
,	O
&	O
argc	int
,	O
argv	pointer
)	O
;	O
XtGetApplicationResources	function
(	O
remotePlayer	struct
.	O
shellWidget	int
,	O
&	O
remotePlayer	struct
.	O
appData	struct
,	O
clientResources	array
,	O
XtNumber	function
(	O
clientResources	array
)	O
,	O
NULL	O
,	O
0	int
)	O
;	O
player	pointer
=	O
&	O
remotePlayer	struct
;	O
CreatePlayerWindow	function
(	O
)	O
;	O
updateRemotePlayer	int
=	O
True	O
;	O
DisplayName	function
(	O
"REMOTE"	pointer
)	O
;	O
DrawPosition	function
(	O
remotePlayer	struct
.	O
boardWidget	int
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
DisplayClocks	function
(	O
ReDisplayTimers	O
)	O
;	O
DisplayMessage	function
(	O
"ready to play"	pointer
,	O
False	O
)	O
;	O
DisplayMessage	function
(	O
"ready to play"	pointer
,	O
True	O
)	O
;	O
return	O
True	O
;	O
}	O
void	O
ChallengeProc	function
(	O
Widget	O
w	int
,	O
XEvent	O
*	O
event	pointer
,	O
String	O
*	O
prms	pointer
,	O
Cardinal	O
*	O
nprms	pointer
)	O
{	O
int	O
fromRemotePlayer	int
=	O
*	O
nprms	pointer
;	O
if	O
(	O
updateRemotePlayer	int
)	O
{	O
DisplayMessage	function
(	O
"You are already in challenge mode."	pointer
,	O
fromRemotePlayer	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
gameMode	int
!=	O
BeginningOfGame	O
)	O
{	O
DisplayMessage	function
(	O
"Press Reset first."	pointer
,	O
False	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
localPlayer	struct
.	O
appData	struct
.	O
challengeDisplay	int
==	O
NULL	O
)	O
FileNamePopUp	function
(	O
"Challenge display?"	pointer
,	O
Challenge	function
)	O
;	O
else	O
(	O
void	O
)	O
Challenge	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
challengeDisplay	int
)	O
;	O
}	O
Boolean	function
SelectLevel	function
(	O
char	O
*	O
command	pointer
)	O
{	O
char	O
buf	char
[	O
MSG_SIZ	O
]	O
;	O
sprintf	function
(	O
buf	char
,	O
"level %s\n"	pointer
,	O
command	pointer
)	O
;	O
SendToProgram	function
(	O
buf	char
,	O
toFirstProgFP	pointer
)	O
;	O
return	O
True	O
;	O
}	O
void	O
SelectLevelProc	function
(	O
Widget	O
w	int
,	O
XEvent	O
*	O
event	pointer
,	O
String	O
*	O
prms	pointer
,	O
Cardinal	O
*	O
nprms	pointer
)	O
{	O
if	O
(	O
(	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
&&	O
(	O
gameMode	int
==	O
MachinePlaysBlack	O
)	O
)	O
||	O
(	O
!	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
&&	O
(	O
gameMode	int
==	O
MachinePlaysWhite	O
)	O
)	O
)	O
{	O
DisplayMessage	function
(	O
"Wait until your turn."	pointer
,	O
False	O
)	O
;	O
}	O
else	O
{	O
FileNamePopUp	function
(	O
"#moves #minutes"	pointer
,	O
SelectLevel	function
)	O
;	O
}	O
}	O
void	O
MoveNowProc	function
(	O
Widget	O
w	int
,	O
XEvent	O
*	O
event	pointer
,	O
String	O
*	O
prms	pointer
,	O
Cardinal	O
*	O
nprms	pointer
)	O
{	O
if	O
(	O
(	O
!	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
&&	O
(	O
gameMode	int
==	O
MachinePlaysBlack	O
)	O
)	O
||	O
(	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
&&	O
(	O
gameMode	int
==	O
MachinePlaysWhite	O
)	O
)	O
)	O
{	O
DisplayMessage	function
(	O
"Wait until machine's turn."	pointer
,	O
False	O
)	O
;	O
}	O
else	O
{	O
Attention	function
(	O
firstProgramPID	int
)	O
;	O
}	O
}	O
void	O
LoadPositionProc	function
(	O
Widget	O
w	int
,	O
XEvent	O
*	O
event	pointer
,	O
String	O
*	O
prms	pointer
,	O
Cardinal	O
*	O
nprms	pointer
)	O
{	O
int	O
fromRemotePlayer	int
=	O
*	O
nprms	pointer
;	O
if	O
(	O
fromRemotePlayer	int
)	O
{	O
DisplayMessage	function
(	O
"only opponent may load position"	pointer
,	O
fromRemotePlayer	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
gameMode	int
!=	O
BeginningOfGame	O
)	O
{	O
DisplayMessage	function
(	O
"Press Reset first."	pointer
,	O
False	O
)	O
;	O
return	O
;	O
}	O
FileNamePopUp	function
(	O
"Position file name?"	pointer
,	O
LoadPosition	function
)	O
;	O
}	O
Boolean	function
LoadPosition	function
(	O
char	O
*	O
name	pointer
)	O
{	O
char	O
*	O
p	pointer
,	O
line	O
[	O
MSG_SIZ	O
]	O
,	O
buf	char
[	O
MSG_SIZ	O
]	O
;	O
Board	O
initial_position	O
;	O
Catched	O
initial_catches	O
;	O
FILE	struct
*	O
fp	pointer
;	O
int	O
i	int
,	O
j	int
;	O
if	O
(	O
gameMode	int
!=	O
BeginningOfGame	O
)	O
{	O
DisplayMessage	function
(	O
"Press Reset first."	pointer
,	O
False	O
)	O
;	O
return	O
False	O
;	O
}	O
if	O
(	O
localPlayer	struct
.	O
appData	struct
.	O
loadPositionFile	int
!=	O
name	pointer
)	O
{	O
if	O
(	O
localPlayer	struct
.	O
appData	struct
.	O
loadPositionFile	int
)	O
XtFree	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
loadPositionFile	int
)	O
;	O
localPlayer	struct
.	O
appData	struct
.	O
loadPositionFile	int
=	O
XtMalloc	function
(	O
strlen	function
(	O
name	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
loadPositionFile	int
,	O
name	pointer
)	O
;	O
}	O
if	O
(	O
(	O
fp	pointer
=	O
fopen	function
(	O
name	pointer
,	O
"r"	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
sprintf	function
(	O
buf	char
,	O
"Can't open %s"	pointer
,	O
name	pointer
)	O
;	O
DisplayMessage	function
(	O
buf	char
,	O
False	O
)	O
;	O
XtFree	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
loadPositionFile	int
)	O
;	O
localPlayer	struct
.	O
appData	struct
.	O
loadPositionFile	int
=	O
NULL	O
;	O
return	O
False	O
;	O
}	O
lastGameMode	int
=	O
gameMode	int
=	O
ForceMoves	O
;	O
ModeHighlight	function
(	O
)	O
;	O
startedFromSetupPosition	int
=	O
True	O
;	O
if	O
(	O
firstProgramXID	int
==	O
0	int
)	O
{	O
InitShogiProgram	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
firstHost	int
,	O
localPlayer	struct
.	O
appData	struct
.	O
firstShogiProgram	int
,	O
&	O
firstProgramPID	int
,	O
&	O
toFirstProgFP	pointer
,	O
&	O
fromFirstProgFP	pointer
,	O
&	O
firstProgramXID	int
,	O
&	O
firstSendTime	int
)	O
;	O
}	O
fgets	function
(	O
line	O
,	O
MSG_SIZ	O
,	O
fp	pointer
)	O
;	O
line	O
[	O
strlen	function
(	O
line	O
)	O
-	O
1	int
]	O
=	O
NULLCHAR	O
;	O
sprintf	function
(	O
buf	char
,	O
"# %s position file"	pointer
,	O
programName	O
)	O
;	O
if	O
(	O
strncmp	function
(	O
line	O
,	O
buf	char
,	O
strlen	function
(	O
buf	char
)	O
)	O
)	O
{	O
strcat	function
(	O
line	O
,	O
": no xshogi position file"	pointer
)	O
;	O
DisplayMessage	function
(	O
line	O
,	O
False	O
)	O
;	O
return	O
False	O
;	O
}	O
DisplayName	function
(	O
line	O
)	O
;	O
fgets	function
(	O
line	O
,	O
MSG_SIZ	O
,	O
fp	pointer
)	O
;	O
for	O
(	O
i	int
=	O
BOARD_SIZE	O
-	O
1	int
;	O
i	int
>=	O
0	int
;	O
i	int
--	O
)	O
{	O
fgets	function
(	O
line	O
,	O
MSG_SIZ	O
,	O
fp	pointer
)	O
;	O
for	O
(	O
p	pointer
=	O
line	O
,	O
j	int
=	O
0	int
;	O
j	int
<	O
BOARD_SIZE	O
;	O
p	pointer
++	O
)	O
{	O
int	O
promoted	int
=	O
False	O
;	O
if	O
(	O
*	O
p	pointer
==	O
'+'	O
)	O
promoted	int
=	O
True	O
;	O
if	O
(	O
*	O
p	pointer
==	O
' '	O
)	O
promoted	int
=	O
False	O
;	O
p	pointer
++	O
;	O
initial_position	O
[	O
i	int
]	O
[	O
j	int
++	O
]	O
=	O
CharToPiece	function
(	O
*	O
p	pointer
,	O
promoted	int
)	O
;	O
}	O
}	O
{	O
int	O
color	int
;	O
for	O
(	O
color	int
=	O
0	int
;	O
color	int
<=	O
1	int
;	O
color	int
++	O
)	O
{	O
fscanf	function
(	O
fp	pointer
,	O
"%i%i%i%i%i%i%i%i\n"	pointer
,	O
&	O
initial_catches	O
[	O
color	int
]	O
[	O
pawn	int
]	O
,	O
&	O
initial_catches	O
[	O
color	int
]	O
[	O
lance	int
]	O
,	O
&	O
initial_catches	O
[	O
color	int
]	O
[	O
knight	int
]	O
,	O
&	O
initial_catches	O
[	O
color	int
]	O
[	O
silver	int
]	O
,	O
&	O
initial_catches	O
[	O
color	int
]	O
[	O
gold	int
]	O
,	O
&	O
initial_catches	O
[	O
color	int
]	O
[	O
bishop	int
]	O
,	O
&	O
initial_catches	O
[	O
color	int
]	O
[	O
rook	int
]	O
,	O
&	O
initial_catches	O
[	O
color	int
]	O
[	O
king	int
]	O
)	O
;	O
}	O
}	O
whitePlaysFirst	int
=	O
False	O
;	O
if	O
(	O
!	O
feof	function
(	O
fp	pointer
)	O
)	O
{	O
fgets	function
(	O
line	O
,	O
MSG_SIZ	O
,	O
fp	pointer
)	O
;	O
if	O
(	O
strncmp	function
(	O
line	O
,	O
"white"	pointer
,	O
strlen	function
(	O
"white"	pointer
)	O
)	O
==	O
0	int
)	O
whitePlaysFirst	int
=	O
True	O
;	O
}	O
fclose	function
(	O
fp	pointer
)	O
;	O
if	O
(	O
whitePlaysFirst	int
)	O
{	O
CopyBoard	function
(	O
boards	int
[	O
0	int
]	O
,	O
initial_position	O
)	O
;	O
CopyCatches	function
(	O
catches	int
[	O
0	int
]	O
,	O
initial_catches	O
)	O
;	O
strcpy	function
(	O
moveList	char
[	O
0	int
]	O
,	O
" ...\n"	pointer
)	O
;	O
strcpy	function
(	O
parseList	O
[	O
0	int
]	O
,	O
" ...\n"	pointer
)	O
;	O
currentMove	int
=	O
forwardMostMove	int
=	O
backwardMostMove	int
=	O
1	int
;	O
CopyBoard	function
(	O
boards	int
[	O
1	int
]	O
,	O
initial_position	O
)	O
;	O
CopyCatches	function
(	O
catches	int
[	O
1	int
]	O
,	O
initial_catches	O
)	O
;	O
SendToProgram	function
(	O
"white\n"	pointer
,	O
toFirstProgFP	pointer
)	O
;	O
SendToProgram	function
(	O
"force\n"	pointer
,	O
toFirstProgFP	pointer
)	O
;	O
SendCurrentBoard	function
(	O
toFirstProgFP	pointer
)	O
;	O
DisplayMessage	function
(	O
"White to play"	pointer
,	O
False	O
)	O
;	O
}	O
else	O
{	O
currentMove	int
=	O
forwardMostMove	int
=	O
backwardMostMove	int
=	O
0	int
;	O
CopyBoard	function
(	O
boards	int
[	O
0	int
]	O
,	O
initial_position	O
)	O
;	O
CopyCatches	function
(	O
catches	int
[	O
0	int
]	O
,	O
initial_catches	O
)	O
;	O
SendCurrentBoard	function
(	O
toFirstProgFP	pointer
)	O
;	O
SendToProgram	function
(	O
"force\n"	pointer
,	O
toFirstProgFP	pointer
)	O
;	O
DisplayMessage	function
(	O
"Black to play"	pointer
,	O
False	O
)	O
;	O
}	O
DisplayClocks	function
(	O
ResetTimers	O
)	O
;	O
timeRemaining	array
[	O
0	int
]	O
[	O
1	int
]	O
=	O
blackTimeRemaining	long
;	O
timeRemaining	array
[	O
1	int
]	O
[	O
1	int
]	O
=	O
whiteTimeRemaining	long
;	O
DrawPosition	function
(	O
localPlayer	struct
.	O
boardWidget	int
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
return	O
True	O
;	O
}	O
void	O
EditPositionProc	function
(	O
Widget	O
w	int
,	O
XEvent	O
*	O
event	pointer
,	O
String	O
*	O
prms	pointer
,	O
Cardinal	O
*	O
nprms	pointer
)	O
{	O
int	O
fromRemotePlayer	int
=	O
*	O
nprms	pointer
;	O
if	O
(	O
updateRemotePlayer	int
)	O
{	O
DisplayMessage	function
(	O
"Edit button disabled"	pointer
,	O
fromRemotePlayer	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
gameMode	int
==	O
EditPosition	O
)	O
return	O
;	O
ForceProc	function
(	O
w	int
,	O
event	pointer
,	O
prms	pointer
,	O
nprms	pointer
)	O
;	O
if	O
(	O
gameMode	int
!=	O
ForceMoves	O
)	O
return	O
;	O
DisplayName	function
(	O
"<-- Press to set side to play next"	pointer
)	O
;	O
DisplayMessage	function
(	O
"Mouse: 1=drag, 2=black, 3=white"	pointer
,	O
False	O
)	O
;	O
lastGameMode	int
=	O
gameMode	int
=	O
EditPosition	O
;	O
ModeHighlight	function
(	O
)	O
;	O
if	O
(	O
currentMove	int
>	O
0	int
)	O
CopyBoard	function
(	O
boards	int
[	O
0	int
]	O
,	O
boards	int
[	O
currentMove	int
]	O
)	O
;	O
whitePlaysFirst	int
=	O
!	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
;	O
currentMove	int
=	O
forwardMostMove	int
=	O
backwardMostMove	int
=	O
0	int
;	O
}	O
void	O
EditPositionDone	function
(	O
void	O
)	O
{	O
startedFromSetupPosition	int
=	O
True	O
;	O
SendToProgram	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
initString	int
,	O
toFirstProgFP	pointer
)	O
;	O
SendSearchDepth	function
(	O
toFirstProgFP	pointer
)	O
;	O
if	O
(	O
whitePlaysFirst	int
)	O
{	O
strcpy	function
(	O
moveList	char
[	O
0	int
]	O
,	O
" ...\n"	pointer
)	O
;	O
strcpy	function
(	O
parseList	O
[	O
0	int
]	O
,	O
" ...\n"	pointer
)	O
;	O
currentMove	int
=	O
forwardMostMove	int
=	O
backwardMostMove	int
=	O
1	int
;	O
CopyBoard	function
(	O
boards	int
[	O
1	int
]	O
,	O
boards	int
[	O
0	int
]	O
)	O
;	O
CopyCatches	function
(	O
catches	int
[	O
1	int
]	O
,	O
catches	int
[	O
0	int
]	O
)	O
;	O
SendToProgram	function
(	O
"force\n"	pointer
,	O
toFirstProgFP	pointer
)	O
;	O
SendCurrentBoard	function
(	O
toFirstProgFP	pointer
)	O
;	O
DisplayName	function
(	O
" "	pointer
)	O
;	O
DisplayMessage	function
(	O
"White to play"	pointer
,	O
False	O
)	O
;	O
}	O
else	O
{	O
currentMove	int
=	O
forwardMostMove	int
=	O
backwardMostMove	int
=	O
0	int
;	O
SendCurrentBoard	function
(	O
toFirstProgFP	pointer
)	O
;	O
SendToProgram	function
(	O
"force\n"	pointer
,	O
toFirstProgFP	pointer
)	O
;	O
DisplayName	function
(	O
" "	pointer
)	O
;	O
DisplayMessage	function
(	O
"Black to play"	pointer
,	O
False	O
)	O
;	O
}	O
lastGameMode	int
=	O
gameMode	int
=	O
ForceMoves	O
;	O
}	O
void	O
BackwardProc	function
(	O
Widget	O
w	int
,	O
XEvent	O
*	O
event	pointer
,	O
String	O
*	O
prms	pointer
,	O
Cardinal	O
*	O
nprms	pointer
)	O
{	O
int	O
target	int
;	O
unsigned	O
int	O
state	pointer
;	O
int	O
fromRemotePlayer	int
=	O
*	O
nprms	pointer
;	O
if	O
(	O
updateRemotePlayer	int
)	O
{	O
DisplayMessage	function
(	O
"Backward button disabled"	pointer
,	O
fromRemotePlayer	int
)	O
;	O
return	O
;	O
}	O
ForceProc	function
(	O
w	int
,	O
event	pointer
,	O
prms	pointer
,	O
nprms	pointer
)	O
;	O
if	O
(	O
(	O
currentMove	int
<=	O
backwardMostMove	int
)	O
||	O
(	O
gameMode	int
==	O
EditPosition	O
)	O
)	O
return	O
;	O
if	O
(	O
gameMode	int
==	O
EndOfGame	O
)	O
ResurrectShogiProgram	function
(	O
)	O
;	O
if	O
(	O
gameMode	int
==	O
PlayFromGameFile	O
)	O
PauseProc	function
(	O
w	int
,	O
event	pointer
,	O
prms	pointer
,	O
nprms	pointer
)	O
;	O
if	O
(	O
event	pointer
==	O
NULL	O
)	O
{	O
Window	O
root	O
,	O
child	O
;	O
int	O
root_x	int
,	O
root_y	int
;	O
int	O
win_x	int
,	O
win_y	int
;	O
XQueryPointer	function
(	O
localPlayer	struct
.	O
xDisplay	pointer
,	O
localPlayer	struct
.	O
xBoardWindow	int
,	O
&	O
root	O
,	O
&	O
child	O
,	O
&	O
root_x	int
,	O
&	O
root_y	int
,	O
&	O
win_x	int
,	O
&	O
win_y	int
,	O
&	O
state	pointer
)	O
;	O
}	O
else	O
{	O
state	pointer
=	O
event	pointer
->	O
xkey	O
.	O
state	pointer
;	O
}	O
if	O
(	O
state	pointer
&	O
ShiftMask	O
)	O
{	O
target	int
=	O
backwardMostMove	int
;	O
}	O
else	O
{	O
target	int
=	O
currentMove	int
-	O
1	int
;	O
}	O
if	O
(	O
gameMode	int
==	O
ForceMoves	O
)	O
{	O
Attention	function
(	O
firstProgramPID	int
)	O
;	O
while	O
(	O
currentMove	int
>	O
target	int
)	O
{	O
SendToProgram	function
(	O
"undo\n"	pointer
,	O
toFirstProgFP	pointer
)	O
;	O
currentMove	int
--	O
;	O
}	O
}	O
else	O
{	O
currentMove	int
=	O
target	int
;	O
}	O
if	O
(	O
gameMode	int
==	O
ForceMoves	O
)	O
{	O
whiteTimeRemaining	long
=	O
timeRemaining	array
[	O
0	int
]	O
[	O
currentMove	int
]	O
;	O
blackTimeRemaining	long
=	O
timeRemaining	array
[	O
1	int
]	O
[	O
currentMove	int
]	O
;	O
}	O
DisplayClocks	function
(	O
ReDisplayTimers	O
)	O
;	O
DisplayMove	function
(	O
currentMove	int
-	O
1	int
)	O
;	O
DrawPosition	function
(	O
localPlayer	struct
.	O
boardWidget	int
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
void	O
FlipViewProc	function
(	O
Widget	O
w	int
,	O
XEvent	O
*	O
event	pointer
,	O
String	O
*	O
prms	pointer
,	O
Cardinal	O
*	O
nprms	pointer
)	O
{	O
struct	O
DisplayData	struct
*	O
player	pointer
=	O
(	O
*	O
nprms	pointer
?	O
&	O
remotePlayer	struct
:	O
&	O
localPlayer	struct
)	O
;	O
player	pointer
->	O
flipView	int
=	O
!	O
player	pointer
->	O
flipView	int
;	O
DrawPosition	function
(	O
localPlayer	struct
.	O
boardWidget	int
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
void	O
SaveGameProc	function
(	O
Widget	O
w	int
,	O
XEvent	O
*	O
event	pointer
,	O
String	O
*	O
prms	pointer
,	O
Cardinal	O
*	O
nprms	pointer
)	O
{	O
char	O
def	char
[	O
MSG_SIZ	O
]	O
;	O
int	O
fromRemotePlayer	int
=	O
*	O
nprms	pointer
;	O
if	O
(	O
fromRemotePlayer	int
)	O
{	O
DisplayMessage	function
(	O
"only opponent may save game"	pointer
,	O
fromRemotePlayer	int
)	O
;	O
return	O
;	O
}	O
def	char
[	O
0	int
]	O
=	O
NULLCHAR	O
;	O
FileNamePopUp	function
(	O
"Filename for saved game?"	pointer
,	O
SaveGame	function
)	O
;	O
}	O
Boolean	function
SaveGame	function
(	O
char	O
*	O
name	pointer
)	O
{	O
char	O
buf	char
[	O
MSG_SIZ	O
]	O
;	O
int	O
i	int
,	O
len	long
,	O
move	char
=	O
0	int
;	O
time_t	long
tm	struct
;	O
if	O
(	O
!	O
filemodeUp	int
)	O
{	O
if	O
(	O
(	O
gameFileFP	pointer
=	O
fopen	function
(	O
name	pointer
,	O
"r"	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
strcpy	function
(	O
fmi	struct
.	O
mode	array
,	O
"w"	pointer
)	O
;	O
}	O
else	O
{	O
fclose	function
(	O
gameFileFP	pointer
)	O
;	O
FileModePopUp	function
(	O
name	pointer
)	O
;	O
return	O
False	O
;	O
}	O
}	O
if	O
(	O
(	O
gameFileFP	pointer
=	O
fopen	function
(	O
name	pointer
,	O
fmi	struct
.	O
mode	array
)	O
)	O
==	O
NULL	O
)	O
{	O
sprintf	function
(	O
buf	char
,	O
"Can't open %s (mode %s)"	pointer
,	O
name	pointer
,	O
fmi	struct
.	O
mode	array
)	O
;	O
DisplayMessage	function
(	O
buf	char
,	O
False	O
)	O
;	O
return	O
False	O
;	O
}	O
tm	struct
=	O
time	function
(	O
(	O
time_t	long
*	O
)	O
NULL	O
)	O
;	O
fprintf	function
(	O
gameFileFP	pointer
,	O
"# %s game file -- %s"	pointer
,	O
programName	O
,	O
ctime	function
(	O
&	O
tm	struct
)	O
)	O
;	O
PrintOpponents	function
(	O
gameFileFP	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
currentMove	int
;	O
)	O
{	O
if	O
(	O
(	O
i	int
%	O
5	int
)	O
==	O
0	int
)	O
fprintf	function
(	O
gameFileFP	pointer
,	O
"\n"	pointer
)	O
;	O
fprintf	function
(	O
gameFileFP	pointer
,	O
"%d. %s "	pointer
,	O
++	O
move	char
,	O
parseList	O
[	O
i	int
++	O
]	O
)	O
;	O
if	O
(	O
i	int
>=	O
currentMove	int
)	O
{	O
fprintf	function
(	O
gameFileFP	pointer
,	O
"\n"	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
(	O
len	long
=	O
strlen	function
(	O
parseList	O
[	O
i	int
]	O
)	O
)	O
==	O
0	int
)	O
break	O
;	O
fprintf	function
(	O
gameFileFP	pointer
,	O
"%s "	pointer
,	O
parseList	O
[	O
i	int
++	O
]	O
)	O
;	O
}	O
fprintf	function
(	O
gameFileFP	pointer
,	O
"\n"	pointer
)	O
;	O
fclose	function
(	O
gameFileFP	pointer
)	O
;	O
gameFileFP	pointer
=	O
NULL	O
;	O
return	O
True	O
;	O
}	O
void	O
SwitchProc	function
(	O
Widget	O
w	int
,	O
XEvent	O
*	O
event	pointer
,	O
String	O
*	O
prms	pointer
,	O
Cardinal	O
*	O
nprms	pointer
)	O
{	O
if	O
(	O
localPlayer	struct
.	O
appData	struct
.	O
noShogiProgram	int
)	O
return	O
;	O
switch	O
(	O
gameMode	int
)	O
{	O
default	O
:	O
return	O
;	O
case	O
MachinePlaysBlack	O
:	O
if	O
(	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
)	O
{	O
DisplayMessage	function
(	O
"Wait until your turn"	pointer
,	O
False	O
)	O
;	O
return	O
;	O
}	O
lastGameMode	int
=	O
gameMode	int
=	O
MachinePlaysWhite	O
;	O
ModeHighlight	function
(	O
)	O
;	O
break	O
;	O
case	O
BeginningOfGame	O
:	O
case	O
MachinePlaysWhite	O
:	O
if	O
(	O
!	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
)	O
{	O
DisplayMessage	function
(	O
"Wait until your turn"	pointer
,	O
False	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
forwardMostMove	int
==	O
0	int
)	O
{	O
MachineBlackProc	function
(	O
w	int
,	O
event	pointer
,	O
prms	pointer
,	O
nprms	pointer
)	O
;	O
return	O
;	O
}	O
lastGameMode	int
=	O
gameMode	int
=	O
MachinePlaysBlack	O
;	O
ModeHighlight	function
(	O
)	O
;	O
break	O
;	O
}	O
Attention	function
(	O
firstProgramPID	int
)	O
;	O
SendToProgram	function
(	O
"switch\n"	pointer
,	O
toFirstProgFP	pointer
)	O
;	O
}	O
void	O
ForceProc	function
(	O
Widget	O
w	int
,	O
XEvent	O
*	O
event	pointer
,	O
String	O
*	O
prms	pointer
,	O
Cardinal	O
*	O
nprms	pointer
)	O
{	O
int	O
i	int
;	O
switch	O
(	O
gameMode	int
)	O
{	O
case	O
MachinePlaysBlack	O
:	O
if	O
(	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
)	O
{	O
DisplayMessage	function
(	O
"Wait until your turn"	pointer
,	O
False	O
)	O
;	O
return	O
;	O
}	O
Attention	function
(	O
firstProgramPID	int
)	O
;	O
SendToProgram	function
(	O
"force\n"	pointer
,	O
toFirstProgFP	pointer
)	O
;	O
break	O
;	O
case	O
MachinePlaysWhite	O
:	O
if	O
(	O
!	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
)	O
{	O
DisplayMessage	function
(	O
"Wait until your turn"	pointer
,	O
False	O
)	O
;	O
return	O
;	O
}	O
Attention	function
(	O
firstProgramPID	int
)	O
;	O
SendToProgram	function
(	O
"force\n"	pointer
,	O
toFirstProgFP	pointer
)	O
;	O
break	O
;	O
case	O
BeginningOfGame	O
:	O
SendToProgram	function
(	O
"force\n"	pointer
,	O
toFirstProgFP	pointer
)	O
;	O
break	O
;	O
case	O
PlayFromGameFile	O
:	O
if	O
(	O
readGameXID	O
!=	O
0	int
)	O
{	O
XtRemoveTimeOut	function
(	O
readGameXID	O
)	O
;	O
readGameXID	O
=	O
0	int
;	O
}	O
if	O
(	O
gameFileFP	pointer
!=	O
NULL	O
)	O
{	O
fclose	function
(	O
gameFileFP	pointer
)	O
;	O
gameFileFP	pointer
=	O
NULL	O
;	O
}	O
break	O
;	O
case	O
EndOfGame	O
:	O
ResurrectShogiProgram	function
(	O
)	O
;	O
break	O
;	O
case	O
EditPosition	O
:	O
EditPositionDone	function
(	O
)	O
;	O
break	O
;	O
case	O
TwoMachinesPlay	O
:	O
ShutdownShogiPrograms	function
(	O
""	pointer
)	O
;	O
ResurrectShogiProgram	function
(	O
)	O
;	O
return	O
;	O
default	O
:	O
return	O
;	O
}	O
if	O
(	O
(	O
gameMode	int
==	O
MachinePlaysWhite	O
)	O
||	O
(	O
gameMode	int
==	O
MachinePlaysBlack	O
)	O
||	O
(	O
gameMode	int
==	O
TwoMachinesPlay	O
)	O
||	O
(	O
gameMode	int
==	O
PlayFromGameFile	O
)	O
)	O
{	O
i	int
=	O
forwardMostMove	int
;	O
while	O
(	O
i	int
>	O
currentMove	int
)	O
{	O
SendToProgram	function
(	O
"undo\n"	pointer
,	O
toFirstProgFP	pointer
)	O
;	O
i	int
--	O
;	O
}	O
blackTimeRemaining	long
=	O
timeRemaining	array
[	O
0	int
]	O
[	O
currentMove	int
]	O
;	O
whiteTimeRemaining	long
=	O
timeRemaining	array
[	O
1	int
]	O
[	O
currentMove	int
]	O
;	O
if	O
(	O
whiteFlag	int
||	O
blackFlag	int
)	O
{	O
whiteFlag	int
=	O
blackFlag	int
=	O
0	int
;	O
}	O
DisplayTitle	function
(	O
""	pointer
)	O
;	O
}	O
lastGameMode	int
=	O
gameMode	int
=	O
ForceMoves	O
;	O
ModeHighlight	function
(	O
)	O
;	O
DisplayClocks	function
(	O
StopTimers	O
)	O
;	O
}	O
void	O
HintProc	function
(	O
Widget	O
w	int
,	O
XEvent	O
*	O
event	pointer
,	O
String	O
*	O
prms	pointer
,	O
Cardinal	O
*	O
nprms	pointer
)	O
{	O
int	O
fromRemotePlayer	int
=	O
*	O
nprms	pointer
;	O
if	O
(	O
updateRemotePlayer	int
)	O
{	O
DisplayMessage	function
(	O
"no hints in challenge mode"	pointer
,	O
fromRemotePlayer	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
localPlayer	struct
.	O
appData	struct
.	O
noShogiProgram	int
)	O
return	O
;	O
switch	O
(	O
gameMode	int
)	O
{	O
case	O
MachinePlaysBlack	O
:	O
if	O
(	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
)	O
{	O
DisplayMessage	function
(	O
"Wait until your turn"	pointer
,	O
False	O
)	O
;	O
return	O
;	O
}	O
break	O
;	O
case	O
BeginningOfGame	O
:	O
case	O
MachinePlaysWhite	O
:	O
if	O
(	O
!	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
)	O
{	O
DisplayMessage	function
(	O
"Wait until your turn"	pointer
,	O
False	O
)	O
;	O
return	O
;	O
}	O
break	O
;	O
default	O
:	O
DisplayMessage	function
(	O
"No hint available"	pointer
,	O
False	O
)	O
;	O
return	O
;	O
}	O
Attention	function
(	O
firstProgramPID	int
)	O
;	O
SendToProgram	function
(	O
"hint\n"	pointer
,	O
toFirstProgFP	pointer
)	O
;	O
}	O
void	O
PrintPosition	function
(	O
FILE	struct
*	O
fp	pointer
,	O
int	O
move	char
)	O
{	O
int	O
i	int
,	O
j	int
,	O
color	int
;	O
for	O
(	O
i	int
=	O
BOARD_SIZE	O
-	O
1	int
;	O
i	int
>=	O
0	int
;	O
i	int
--	O
)	O
{	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
BOARD_SIZE	O
;	O
j	int
++	O
)	O
{	O
if	O
(	O
pieceIsPromoted	array
[	O
(	O
int	O
)	O
boards	int
[	O
currentMove	int
]	O
[	O
i	int
]	O
[	O
j	int
]	O
]	O
)	O
fprintf	function
(	O
fp	pointer
,	O
"%c"	pointer
,	O
'+'	O
)	O
;	O
else	O
fprintf	function
(	O
fp	pointer
,	O
"%c"	pointer
,	O
' '	O
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"%c"	pointer
,	O
pieceToChar	array
[	O
(	O
int	O
)	O
boards	int
[	O
currentMove	int
]	O
[	O
i	int
]	O
[	O
j	int
]	O
]	O
)	O
;	O
if	O
(	O
j	int
==	O
BOARD_SIZE	O
-	O
1	int
)	O
fputc	function
(	O
'\n'	O
,	O
fp	pointer
)	O
;	O
}	O
}	O
for	O
(	O
color	int
=	O
0	int
;	O
color	int
<=	O
1	int
;	O
color	int
++	O
)	O
{	O
fprintf	function
(	O
fp	pointer
,	O
"%i %i %i %i %i %i %i %i\n"	pointer
,	O
catches	int
[	O
currentMove	int
]	O
[	O
color	int
]	O
[	O
pawn	int
]	O
,	O
catches	int
[	O
currentMove	int
]	O
[	O
color	int
]	O
[	O
lance	int
]	O
,	O
catches	int
[	O
currentMove	int
]	O
[	O
color	int
]	O
[	O
knight	int
]	O
,	O
catches	int
[	O
currentMove	int
]	O
[	O
color	int
]	O
[	O
silver	int
]	O
,	O
catches	int
[	O
currentMove	int
]	O
[	O
color	int
]	O
[	O
gold	int
]	O
,	O
catches	int
[	O
currentMove	int
]	O
[	O
color	int
]	O
[	O
bishop	int
]	O
,	O
catches	int
[	O
currentMove	int
]	O
[	O
color	int
]	O
[	O
rook	int
]	O
,	O
catches	int
[	O
currentMove	int
]	O
[	O
color	int
]	O
[	O
king	int
]	O
)	O
;	O
}	O
if	O
(	O
(	O
gameMode	int
==	O
EditPosition	O
)	O
?	O
!	O
whitePlaysFirst	int
:	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
)	O
{	O
fprintf	function
(	O
fp	pointer
,	O
"black to play\n"	pointer
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
fp	pointer
,	O
"white to play\n"	pointer
)	O
;	O
}	O
}	O
void	O
PrintOpponents	function
(	O
FILE	struct
*	O
fp	pointer
)	O
{	O
char	O
host_name	pointer
[	O
MSG_SIZ	O
]	O
;	O
gethostname	function
(	O
host_name	pointer
,	O
MSG_SIZ	O
)	O
;	O
switch	O
(	O
lastGameMode	int
)	O
{	O
case	O
MachinePlaysWhite	O
:	O
fprintf	function
(	O
fp	pointer
,	O
"# %s@%s vs. %s@%s\n"	pointer
,	O
localPlayer	struct
.	O
appData	struct
.	O
firstShogiProgram	int
,	O
localPlayer	struct
.	O
appData	struct
.	O
firstHost	int
,	O
getpwuid	function
(	O
getuid	function
(	O
)	O
)	O
->	O
pw_name	pointer
,	O
host_name	pointer
)	O
;	O
break	O
;	O
case	O
MachinePlaysBlack	O
:	O
fprintf	function
(	O
fp	pointer
,	O
"# %s@%s vs. %s@%s\n"	pointer
,	O
getpwuid	function
(	O
getuid	function
(	O
)	O
)	O
->	O
pw_name	pointer
,	O
host_name	pointer
,	O
localPlayer	struct
.	O
appData	struct
.	O
firstShogiProgram	int
,	O
localPlayer	struct
.	O
appData	struct
.	O
firstHost	int
)	O
;	O
break	O
;	O
case	O
TwoMachinesPlay	O
:	O
fprintf	function
(	O
fp	pointer
,	O
"# %s@%s vs. %s@%s\n"	pointer
,	O
localPlayer	struct
.	O
appData	struct
.	O
secondShogiProgram	int
,	O
localPlayer	struct
.	O
appData	struct
.	O
secondHost	int
,	O
localPlayer	struct
.	O
appData	struct
.	O
firstShogiProgram	int
,	O
localPlayer	struct
.	O
appData	struct
.	O
firstHost	int
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
fp	pointer
,	O
"#\n"	pointer
)	O
;	O
break	O
;	O
}	O
}	O
void	O
SavePositionProc	function
(	O
Widget	O
w	int
,	O
XEvent	O
*	O
event	pointer
,	O
String	O
*	O
prms	pointer
,	O
Cardinal	O
*	O
nprms	pointer
)	O
{	O
char	O
def	char
[	O
MSG_SIZ	O
]	O
;	O
int	O
fromRemotePlayer	int
=	O
*	O
nprms	pointer
;	O
if	O
(	O
fromRemotePlayer	int
)	O
{	O
DisplayMessage	function
(	O
"only opponent may save game"	pointer
,	O
fromRemotePlayer	int
)	O
;	O
return	O
;	O
}	O
def	char
[	O
0	int
]	O
=	O
NULLCHAR	O
;	O
FileNamePopUp	function
(	O
"Filename for saved position?"	pointer
,	O
SavePosition	function
)	O
;	O
}	O
Boolean	function
SavePosition	function
(	O
char	O
*	O
name	pointer
)	O
{	O
char	O
buf	char
[	O
MSG_SIZ	O
]	O
;	O
FILE	struct
*	O
fp	pointer
;	O
time_t	long
tm	struct
;	O
if	O
(	O
(	O
fp	pointer
=	O
fopen	function
(	O
name	pointer
,	O
"w"	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
sprintf	function
(	O
buf	char
,	O
"Can't open %s"	pointer
,	O
name	pointer
)	O
;	O
DisplayMessage	function
(	O
buf	char
,	O
False	O
)	O
;	O
return	O
False	O
;	O
}	O
tm	struct
=	O
time	function
(	O
(	O
time_t	long
*	O
)	O
NULL	O
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"# %s position file -- %s"	pointer
,	O
programName	O
,	O
ctime	function
(	O
&	O
tm	struct
)	O
)	O
;	O
PrintOpponents	function
(	O
fp	pointer
)	O
;	O
PrintPosition	function
(	O
fp	pointer
,	O
currentMove	int
)	O
;	O
fclose	function
(	O
fp	pointer
)	O
;	O
return	O
True	O
;	O
}	O
void	O
TwoMachinesProc	function
(	O
Widget	O
w	int
,	O
XEvent	O
*	O
event	pointer
,	O
String	O
*	O
prms	pointer
,	O
Cardinal	O
*	O
nprms	pointer
)	O
{	O
int	O
i	int
;	O
MatchMode	O
matchKind	O
;	O
int	O
fromRemotePlayer	int
=	O
*	O
nprms	pointer
;	O
if	O
(	O
updateRemotePlayer	int
)	O
{	O
DisplayMessage	function
(	O
"no machine moves in challenge mode"	pointer
,	O
fromRemotePlayer	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
gameMode	int
==	O
PauseGame	O
)	O
PauseProc	function
(	O
w	int
,	O
event	pointer
,	O
prms	pointer
,	O
nprms	pointer
)	O
;	O
if	O
(	O
gameMode	int
==	O
PlayFromGameFile	O
)	O
ForceProc	function
(	O
w	int
,	O
event	pointer
,	O
prms	pointer
,	O
nprms	pointer
)	O
;	O
if	O
(	O
(	O
gameMode	int
==	O
EndOfGame	O
)	O
||	O
(	O
gameMode	int
==	O
TwoMachinesPlay	O
)	O
||	O
localPlayer	struct
.	O
appData	struct
.	O
noShogiProgram	int
)	O
{	O
return	O
;	O
}	O
if	O
(	O
matchMode	int
==	O
MatchFalse	O
)	O
{	O
switch	O
(	O
gameMode	int
)	O
{	O
case	O
PauseGame	O
:	O
case	O
PlayFromGameFile	O
:	O
return	O
;	O
case	O
MachinePlaysBlack	O
:	O
case	O
MachinePlaysWhite	O
:	O
ForceProc	function
(	O
w	int
,	O
event	pointer
,	O
prms	pointer
,	O
nprms	pointer
)	O
;	O
if	O
(	O
gameMode	int
!=	O
ForceMoves	O
)	O
return	O
;	O
matchKind	O
=	O
MatchOpening	O
;	O
break	O
;	O
case	O
ForceMoves	O
:	O
matchKind	O
=	O
MatchOpening	O
;	O
break	O
;	O
case	O
EditPosition	O
:	O
EditPositionDone	function
(	O
)	O
;	O
matchKind	O
=	O
MatchPosition	O
;	O
break	O
;	O
case	O
BeginningOfGame	O
:	O
default	O
:	O
matchKind	O
=	O
MatchInit	O
;	O
break	O
;	O
}	O
}	O
else	O
{	O
matchKind	O
=	O
matchMode	int
;	O
}	O
forwardMostMove	int
=	O
currentMove	int
;	O
localPlayer	struct
.	O
flipView	int
=	O
False	O
;	O
remotePlayer	struct
.	O
flipView	int
=	O
True	O
;	O
firstMove	int
=	O
False	O
;	O
DisplayClocks	function
(	O
ResetTimers	O
)	O
;	O
DisplayClocks	function
(	O
StartTimers	O
)	O
;	O
switch	O
(	O
matchKind	O
)	O
{	O
case	O
MatchOpening	O
:	O
if	O
(	O
firstProgramXID	int
==	O
0	int
)	O
{	O
if	O
(	O
localPlayer	struct
.	O
appData	struct
.	O
loadGameFile	int
==	O
NULL	O
)	O
{	O
DisplayMessage	function
(	O
"Select game file first"	pointer
,	O
False	O
)	O
;	O
return	O
;	O
}	O
InitShogiProgram	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
firstHost	int
,	O
localPlayer	struct
.	O
appData	struct
.	O
firstShogiProgram	int
,	O
&	O
firstProgramPID	int
,	O
&	O
toFirstProgFP	pointer
,	O
&	O
fromFirstProgFP	pointer
,	O
&	O
firstProgramXID	int
,	O
&	O
firstSendTime	int
)	O
;	O
if	O
(	O
!	O
LoadGame	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
loadGameFile	int
)	O
)	O
{	O
ShutdownShogiPrograms	function
(	O
"Bad game file"	pointer
)	O
;	O
return	O
;	O
}	O
DrawPosition	function
(	O
localPlayer	struct
.	O
boardWidget	int
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
InitShogiProgram	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
secondHost	int
,	O
localPlayer	struct
.	O
appData	struct
.	O
secondShogiProgram	int
,	O
&	O
secondProgramPID	int
,	O
&	O
toSecondProgFP	pointer
,	O
&	O
fromSecondProgFP	pointer
,	O
&	O
secondProgramXID	O
,	O
&	O
secondSendTime	int
)	O
;	O
if	O
(	O
startedFromSetupPosition	int
)	O
{	O
if	O
(	O
whitePlaysFirst	int
)	O
{	O
i	int
=	O
1	int
;	O
SendToProgram	function
(	O
"force\n"	pointer
,	O
toSecondProgFP	pointer
)	O
;	O
SendBoard	function
(	O
toSecondProgFP	pointer
,	O
boards	int
[	O
i	int
]	O
,	O
catches	int
[	O
i	int
]	O
)	O
;	O
}	O
else	O
{	O
i	int
=	O
0	int
;	O
SendBoard	function
(	O
toSecondProgFP	pointer
,	O
boards	int
[	O
i	int
]	O
,	O
catches	int
[	O
i	int
]	O
)	O
;	O
SendToProgram	function
(	O
"force\n"	pointer
,	O
toSecondProgFP	pointer
)	O
;	O
}	O
}	O
else	O
{	O
i	int
=	O
0	int
;	O
SendToProgram	function
(	O
"force\n"	pointer
,	O
toSecondProgFP	pointer
)	O
;	O
}	O
for	O
(	O
i	int
=	O
backwardMostMove	int
;	O
i	int
<	O
forwardMostMove	int
;	O
i	int
++	O
)	O
SendToProgram	function
(	O
moveList	char
[	O
i	int
]	O
,	O
toSecondProgFP	pointer
)	O
;	O
lastGameMode	int
=	O
gameMode	int
=	O
TwoMachinesPlay	O
;	O
ModeHighlight	function
(	O
)	O
;	O
firstMove	int
=	O
True	O
;	O
if	O
(	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
)	O
SendToProgram	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
blackString	int
,	O
toSecondProgFP	pointer
)	O
;	O
else	O
SendToProgram	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
whiteString	int
,	O
toFirstProgFP	pointer
)	O
;	O
break	O
;	O
case	O
MatchPosition	O
:	O
if	O
(	O
firstProgramXID	int
==	O
0	int
)	O
{	O
if	O
(	O
localPlayer	struct
.	O
appData	struct
.	O
loadPositionFile	int
==	O
NULL	O
)	O
{	O
DisplayMessage	function
(	O
"Select position file first"	pointer
,	O
False	O
)	O
;	O
return	O
;	O
}	O
InitShogiProgram	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
firstHost	int
,	O
localPlayer	struct
.	O
appData	struct
.	O
firstShogiProgram	int
,	O
&	O
firstProgramPID	int
,	O
&	O
toFirstProgFP	pointer
,	O
&	O
fromFirstProgFP	pointer
,	O
&	O
firstProgramXID	int
,	O
&	O
firstSendTime	int
)	O
;	O
if	O
(	O
!	O
LoadPosition	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
loadPositionFile	int
)	O
)	O
return	O
;	O
}	O
InitShogiProgram	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
secondHost	int
,	O
localPlayer	struct
.	O
appData	struct
.	O
secondShogiProgram	int
,	O
&	O
secondProgramPID	int
,	O
&	O
toSecondProgFP	pointer
,	O
&	O
fromSecondProgFP	pointer
,	O
&	O
secondProgramXID	O
,	O
&	O
secondSendTime	int
)	O
;	O
if	O
(	O
whitePlaysFirst	int
)	O
SendToProgram	function
(	O
"force\n"	pointer
,	O
toSecondProgFP	pointer
)	O
;	O
SendCurrentBoard	function
(	O
toSecondProgFP	pointer
)	O
;	O
lastGameMode	int
=	O
gameMode	int
=	O
TwoMachinesPlay	O
;	O
ModeHighlight	function
(	O
)	O
;	O
firstMove	int
=	O
True	O
;	O
if	O
(	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
)	O
SendToProgram	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
blackString	int
,	O
toSecondProgFP	pointer
)	O
;	O
else	O
SendToProgram	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
whiteString	int
,	O
toFirstProgFP	pointer
)	O
;	O
break	O
;	O
case	O
MatchInit	O
:	O
InitPosition	function
(	O
True	O
)	O
;	O
if	O
(	O
firstProgramXID	int
==	O
0	int
)	O
{	O
InitShogiProgram	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
firstHost	int
,	O
localPlayer	struct
.	O
appData	struct
.	O
firstShogiProgram	int
,	O
&	O
firstProgramPID	int
,	O
&	O
toFirstProgFP	pointer
,	O
&	O
fromFirstProgFP	pointer
,	O
&	O
firstProgramXID	int
,	O
&	O
firstSendTime	int
)	O
;	O
}	O
InitShogiProgram	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
secondHost	int
,	O
localPlayer	struct
.	O
appData	struct
.	O
secondShogiProgram	int
,	O
&	O
secondProgramPID	int
,	O
&	O
toSecondProgFP	pointer
,	O
&	O
fromSecondProgFP	pointer
,	O
&	O
secondProgramXID	O
,	O
&	O
secondSendTime	int
)	O
;	O
lastGameMode	int
=	O
gameMode	int
=	O
TwoMachinesPlay	O
;	O
ModeHighlight	function
(	O
)	O
;	O
SendToProgram	function
(	O
localPlayer	struct
.	O
appData	struct
.	O
blackString	int
,	O
toSecondProgFP	pointer
)	O
;	O
default	O
:	O
break	O
;	O
}	O
if	O
(	O
!	O
firstSendTime	int
||	O
!	O
secondSendTime	int
)	O
{	O
DisplayClocks	function
(	O
ResetTimers	O
)	O
;	O
timeRemaining	array
[	O
0	int
]	O
[	O
forwardMostMove	int
]	O
=	O
blackTimeRemaining	long
;	O
timeRemaining	array
[	O
1	int
]	O
[	O
forwardMostMove	int
]	O
=	O
whiteTimeRemaining	long
;	O
}	O
DisplayClocks	function
(	O
StartTimers	O
)	O
;	O
}	O
void	O
PauseProc	function
(	O
Widget	O
w	int
,	O
XEvent	O
*	O
event	pointer
,	O
String	O
*	O
prms	pointer
,	O
Cardinal	O
*	O
nprms	pointer
)	O
{	O
static	O
GameMode	O
previous_mode	int
=	O
PauseGame	O
;	O
switch	O
(	O
gameMode	int
)	O
{	O
case	O
ForceMoves	O
:	O
case	O
EndOfGame	O
:	O
case	O
EditPosition	O
:	O
default	O
:	O
return	O
;	O
case	O
PauseGame	O
:	O
gameMode	int
=	O
previous_mode	int
;	O
ModeHighlight	function
(	O
)	O
;	O
previous_mode	int
=	O
PauseGame	O
;	O
DisplayClocks	function
(	O
StartTimers	O
)	O
;	O
DisplayMessage	function
(	O
""	pointer
,	O
False	O
)	O
;	O
if	O
(	O
updateRemotePlayer	int
)	O
DisplayMessage	function
(	O
""	pointer
,	O
True	O
)	O
;	O
break	O
;	O
case	O
PlayFromGameFile	O
:	O
if	O
(	O
readGameXID	O
==	O
0	int
)	O
{	O
readGameXID	O
=	O
XtAppAddTimeOut	function
(	O
appContext	int
,	O
(	O
int	O
)	O
(	O
1000	int
*	O
localPlayer	struct
.	O
appData	struct
.	O
timeDelay	float
)	O
,	O
(	O
XtTimerCallbackProc	O
)	O
ReadGameFile	function
,	O
NULL	O
)	O
;	O
}	O
else	O
{	O
XtRemoveTimeOut	function
(	O
readGameXID	O
)	O
;	O
readGameXID	O
=	O
0	int
;	O
}	O
DisplayMessage	function
(	O
"Pausing"	pointer
,	O
False	O
)	O
;	O
if	O
(	O
updateRemotePlayer	int
)	O
DisplayMessage	function
(	O
"Pausing"	pointer
,	O
True	O
)	O
;	O
break	O
;	O
case	O
BeginningOfGame	O
:	O
case	O
MachinePlaysBlack	O
:	O
case	O
MachinePlaysWhite	O
:	O
case	O
TwoMachinesPlay	O
:	O
if	O
(	O
forwardMostMove	int
==	O
0	int
)	O
return	O
;	O
if	O
(	O
(	O
(	O
gameMode	int
==	O
MachinePlaysWhite	O
)	O
&&	O
!	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
)	O
||	O
(	O
(	O
gameMode	int
==	O
MachinePlaysBlack	O
)	O
&&	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
)	O
)	O
{	O
DisplayClocks	function
(	O
StopTimers	O
)	O
;	O
}	O
previous_mode	int
=	O
gameMode	int
;	O
gameMode	int
=	O
PauseGame	O
;	O
ModeHighlight	function
(	O
)	O
;	O
DisplayClocks	function
(	O
StopTimers	O
)	O
;	O
DisplayMessage	function
(	O
"Pausing"	pointer
,	O
False	O
)	O
;	O
if	O
(	O
updateRemotePlayer	int
)	O
DisplayMessage	function
(	O
"Pausing"	pointer
,	O
True	O
)	O
;	O
break	O
;	O
}	O
}	O
void	O
Iconify	function
(	O
Widget	O
w	int
,	O
XEvent	O
*	O
event	pointer
,	O
String	O
*	O
prms	pointer
,	O
Cardinal	O
*	O
nprms	pointer
)	O
{	O
Arg	O
args	O
[	O
1	int
]	O
;	O
fromX	int
=	O
fromY	int
=	O
-	O
1	int
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNiconic	O
,	O
True	O
)	O
;	O
XtSetValues	function
(	O
localPlayer	struct
.	O
shellWidget	int
,	O
args	O
,	O
1	int
)	O
;	O
}	O
void	O
SendToProgram	function
(	O
char	O
*	O
message	char
,	O
FILE	struct
*	O
fp	pointer
)	O
{	O
if	O
(	O
fp	pointer
==	O
NULL	O
)	O
return	O
;	O
lastMsgFP	pointer
=	O
fp	pointer
;	O
if	O
(	O
xshogiDebug	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Sending to %s: %s\n"	pointer
,	O
(	O
(	O
fp	pointer
==	O
toFirstProgFP	pointer
)	O
?	O
"first"	pointer
:	O
"second"	pointer
)	O
,	O
message	char
)	O
;	O
}	O
if	O
(	O
message	char
[	O
strlen	function
(	O
message	char
)	O
-	O
1	int
]	O
!=	O
'\n'	O
)	O
fprintf	function
(	O
fp	pointer
,	O
"\n%s\n"	pointer
,	O
message	char
)	O
;	O
else	O
fputs	function
(	O
message	char
,	O
fp	pointer
)	O
;	O
fflush	function
(	O
fp	pointer
)	O
;	O
}	O
void	O
ReceiveFromProgram	function
(	O
FILE	struct
*	O
fp	pointer
,	O
int	O
*	O
source	pointer
,	O
XtInputId	O
*	O
id	pointer
)	O
{	O
char	O
message	char
[	O
MSG_SIZ	O
]	O
,	O
*	O
end_str	O
,	O
*	O
number	O
,	O
*	O
name	pointer
;	O
if	O
(	O
fgets	function
(	O
message	char
,	O
MSG_SIZ	O
,	O
fp	pointer
)	O
==	O
NULL	O
)	O
{	O
if	O
(	O
fp	pointer
==	O
fromFirstProgFP	pointer
)	O
{	O
number	O
=	O
"first"	pointer
;	O
name	pointer
=	O
localPlayer	struct
.	O
appData	struct
.	O
firstShogiProgram	int
;	O
}	O
else	O
if	O
(	O
fp	pointer
==	O
fromSecondProgFP	pointer
)	O
{	O
number	O
=	O
"second"	pointer
;	O
name	pointer
=	O
localPlayer	struct
.	O
appData	struct
.	O
secondShogiProgram	int
;	O
}	O
else	O
{	O
return	O
;	O
}	O
if	O
(	O
ferror	function
(	O
fp	pointer
)	O
==	O
0	int
)	O
{	O
sprintf	function
(	O
message	char
,	O
"%s shogi program (%s) exited unexpectedly"	pointer
,	O
number	O
,	O
name	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s\n"	pointer
,	O
programName	O
,	O
message	char
)	O
;	O
}	O
else	O
{	O
sprintf	function
(	O
message	char
,	O
"error reading from %s shogi program (%s): %s"	pointer
,	O
number	O
,	O
name	pointer
,	O
strerror	function
(	O
ferror	function
(	O
fp	pointer
)	O
)	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s\n"	pointer
,	O
programName	O
,	O
message	char
)	O
;	O
}	O
return	O
;	O
}	O
if	O
(	O
(	O
end_str	O
=	O
(	O
char	O
*	O
)	O
strchr	function
(	O
message	char
,	O
'\r'	O
)	O
)	O
!=	O
NULL	O
)	O
*	O
end_str	O
=	O
NULLCHAR	O
;	O
if	O
(	O
(	O
end_str	O
=	O
(	O
char	O
*	O
)	O
strchr	function
(	O
message	char
,	O
'\n'	O
)	O
)	O
!=	O
NULL	O
)	O
*	O
end_str	O
=	O
NULLCHAR	O
;	O
if	O
(	O
xshogiDebug	int
||	O
localPlayer	struct
.	O
appData	struct
.	O
debugMode	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Received from %s: %s\n"	pointer
,	O
(	O
(	O
fp	pointer
==	O
fromFirstProgFP	pointer
)	O
?	O
"first"	pointer
:	O
"second"	pointer
)	O
,	O
message	char
)	O
;	O
}	O
HandleMachineMove	function
(	O
message	char
,	O
fp	pointer
)	O
;	O
}	O
void	O
SendSearchDepth	function
(	O
FILE	struct
*	O
fp	pointer
)	O
{	O
char	O
message	char
[	O
MSG_SIZ	O
]	O
;	O
if	O
(	O
localPlayer	struct
.	O
appData	struct
.	O
searchDepth	int
<=	O
0	int
)	O
return	O
;	O
sprintf	function
(	O
message	char
,	O
"depth\n%d\nhelp\n"	pointer
,	O
localPlayer	struct
.	O
appData	struct
.	O
searchDepth	int
)	O
;	O
SendToProgram	function
(	O
message	char
,	O
fp	pointer
)	O
;	O
}	O
void	O
DisplayMessage	function
(	O
char	O
*	O
message	char
,	O
int	O
toRemotePlayer	int
)	O
{	O
Arg	O
arg	O
;	O
XtSetArg	function
(	O
arg	O
,	O
XtNlabel	O
,	O
message	char
)	O
;	O
if	O
(	O
!	O
toRemotePlayer	int
)	O
XtSetValues	function
(	O
localPlayer	struct
.	O
messageWidget	int
,	O
&	O
arg	O
,	O
1	int
)	O
;	O
if	O
(	O
updateRemotePlayer	int
&&	O
toRemotePlayer	int
)	O
XtSetValues	function
(	O
remotePlayer	struct
.	O
messageWidget	int
,	O
&	O
arg	O
,	O
1	int
)	O
;	O
}	O
void	O
DisplayName	function
(	O
char	O
*	O
name	pointer
)	O
{	O
Arg	O
arg	O
;	O
XtSetArg	function
(	O
arg	O
,	O
XtNlabel	O
,	O
name	pointer
)	O
;	O
XtSetValues	function
(	O
localPlayer	struct
.	O
titleWidget	int
,	O
&	O
arg	O
,	O
1	int
)	O
;	O
if	O
(	O
updateRemotePlayer	int
)	O
XtSetValues	function
(	O
remotePlayer	struct
.	O
titleWidget	int
,	O
&	O
arg	O
,	O
1	int
)	O
;	O
}	O
void	O
SendTimeRemaining	function
(	O
FILE	struct
*	O
fp	pointer
)	O
{	O
char	O
message	char
[	O
MSG_SIZ	O
]	O
;	O
long	O
comtime	long
,	O
opptime	long
;	O
if	O
(	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
==	O
(	O
fp	pointer
==	O
toFirstProgFP	pointer
)	O
)	O
{	O
comtime	long
=	O
blackTimeRemaining	long
;	O
opptime	long
=	O
whiteTimeRemaining	long
;	O
}	O
else	O
{	O
comtime	long
=	O
whiteTimeRemaining	long
;	O
opptime	long
=	O
blackTimeRemaining	long
;	O
}	O
if	O
(	O
comtime	long
<=	O
0	int
)	O
comtime	long
=	O
1000	int
;	O
if	O
(	O
opptime	long
<=	O
0	int
)	O
opptime	long
=	O
1000	int
;	O
sprintf	function
(	O
message	char
,	O
"time %ld\n"	pointer
,	O
comtime	long
/	O
10	int
)	O
;	O
SendToProgram	function
(	O
message	char
,	O
fp	pointer
)	O
;	O
sprintf	function
(	O
message	char
,	O
"otime %ld\n"	pointer
,	O
opptime	long
/	O
10	int
)	O
;	O
SendToProgram	function
(	O
message	char
,	O
fp	pointer
)	O
;	O
}	O
void	O
DisplayMove	function
(	O
int	O
moveNumber	int
)	O
{	O
char	O
message	char
[	O
MSG_SIZ	O
]	O
;	O
if	O
(	O
moveNumber	int
<	O
0	int
)	O
{	O
if	O
(	O
moveNumber	int
==	O
forwardMostMove	int
-	O
1	int
)	O
DisplayMessage	function
(	O
endMessage	char
,	O
False	O
)	O
;	O
else	O
DisplayMessage	function
(	O
""	pointer
,	O
False	O
)	O
;	O
}	O
else	O
{	O
sprintf	function
(	O
message	char
,	O
"%d. %s%s  %s"	pointer
,	O
(	O
moveNumber	int
/	O
2	int
+	O
1	int
)	O
,	O
(	O
BlackOnMove	function
(	O
moveNumber	int
)	O
?	O
""	pointer
:	O
"... "	pointer
)	O
,	O
parseList	O
[	O
moveNumber	int
]	O
,	O
(	O
moveNumber	int
==	O
(	O
forwardMostMove	int
-	O
1	int
)	O
)	O
?	O
endMessage	char
:	O
""	pointer
)	O
;	O
DisplayMessage	function
(	O
message	char
,	O
False	O
)	O
;	O
}	O
}	O
void	O
DisplayTitle	function
(	O
char	O
*	O
title	pointer
)	O
{	O
Arg	O
arg	O
;	O
XtSetArg	function
(	O
arg	O
,	O
XtNlabel	O
,	O
title	pointer
)	O
;	O
XtSetValues	function
(	O
localPlayer	struct
.	O
titleWidget	int
,	O
&	O
arg	O
,	O
1	int
)	O
;	O
}	O
void	O
Attention	function
(	O
int	O
pid	int
)	O
{	O
}	O
void	O
CheckFlags	function
(	O
void	O
)	O
{	O
if	O
(	O
blackTimeRemaining	long
<=	O
0	int
)	O
{	O
if	O
(	O
!	O
blackFlag	int
)	O
{	O
blackFlag	int
=	O
True	O
;	O
if	O
(	O
whiteFlag	int
)	O
DisplayName	function
(	O
"  Both flags have fallen"	pointer
)	O
;	O
else	O
DisplayName	function
(	O
"  Black's flag has fallen"	pointer
)	O
;	O
}	O
}	O
if	O
(	O
whiteTimeRemaining	long
<=	O
0	int
)	O
{	O
if	O
(	O
!	O
whiteFlag	int
)	O
{	O
whiteFlag	int
=	O
True	O
;	O
if	O
(	O
blackFlag	int
)	O
DisplayName	function
(	O
"  Both flags have fallen"	pointer
)	O
;	O
else	O
DisplayName	function
(	O
"  White's flag has fallen"	pointer
)	O
;	O
}	O
}	O
}	O
void	O
CheckTimeControl	function
(	O
void	O
)	O
{	O
if	O
(	O
!	O
localPlayer	struct
.	O
appData	struct
.	O
clockMode	int
)	O
return	O
;	O
if	O
(	O
forwardMostMove	int
==	O
0	int
)	O
return	O
;	O
if	O
(	O
(	O
forwardMostMove	int
%	O
(	O
localPlayer	struct
.	O
appData	struct
.	O
movesPerSession	int
*	O
2	int
)	O
)	O
==	O
0	int
)	O
{	O
blackTimeRemaining	long
+=	O
timeControl	long
;	O
whiteTimeRemaining	long
+=	O
timeControl	long
;	O
}	O
}	O
void	O
DisplayLabels	function
(	O
void	O
)	O
{	O
DisplayTimerLabel	function
(	O
localPlayer	struct
.	O
blackTimerWidget	int
,	O
"Black"	pointer
,	O
blackTimeRemaining	long
)	O
;	O
DisplayTimerLabel	function
(	O
localPlayer	struct
.	O
whiteTimerWidget	int
,	O
"White"	pointer
,	O
whiteTimeRemaining	long
)	O
;	O
if	O
(	O
updateRemotePlayer	int
)	O
{	O
DisplayTimerLabel	function
(	O
remotePlayer	struct
.	O
blackTimerWidget	int
,	O
"Black"	pointer
,	O
blackTimeRemaining	long
)	O
;	O
DisplayTimerLabel	function
(	O
remotePlayer	struct
.	O
whiteTimerWidget	int
,	O
"White"	pointer
,	O
whiteTimeRemaining	long
)	O
;	O
}	O
}	O
static	O
struct	O
timeval	struct
tickStartTV	struct
;	O
static	O
int	O
tickLength	int
;	O
int	O
PartialTickLength	function
(	O
void	O
)	O
{	O
struct	O
timeval	struct
tv	struct
;	O
int	O
ptl	int
;	O
gettimeofday	function
(	O
&	O
tv	struct
,	O
NULL	O
)	O
;	O
ptl	int
=	O
(	O
(	O
tv	struct
.	O
tv_sec	long
-	O
tickStartTV	struct
.	O
tv_sec	long
)	O
*	O
1000000	int
+	O
(	O
tv	struct
.	O
tv_usec	long
-	O
tickStartTV	struct
.	O
tv_usec	long
)	O
+	O
500	int
)	O
/	O
1000	int
;	O
if	O
(	O
ptl	int
>	O
tickLength	int
)	O
ptl	int
=	O
tickLength	int
;	O
return	O
ptl	int
;	O
}	O
void	O
DisplayClocks	function
(	O
int	O
clock_mode	int
)	O
{	O
long	O
timeRemaining	array
;	O
switch	O
(	O
clock_mode	int
)	O
{	O
case	O
ResetTimers	O
:	O
if	O
(	O
timerXID	O
!=	O
0	int
)	O
{	O
XtRemoveTimeOut	function
(	O
timerXID	O
)	O
;	O
timerXID	O
=	O
0	int
;	O
}	O
blackTimeRemaining	long
=	O
timeControl	long
;	O
whiteTimeRemaining	long
=	O
timeControl	long
;	O
if	O
(	O
blackFlag	int
||	O
whiteFlag	int
)	O
{	O
DisplayName	function
(	O
""	pointer
)	O
;	O
blackFlag	int
=	O
whiteFlag	int
=	O
False	O
;	O
}	O
DisplayLabels	function
(	O
)	O
;	O
break	O
;	O
case	O
DecrementTimers	O
:	O
if	O
(	O
gameMode	int
==	O
PauseGame	O
)	O
return	O
;	O
timerXID	O
=	O
0	int
;	O
if	O
(	O
!	O
localPlayer	struct
.	O
appData	struct
.	O
clockMode	int
)	O
return	O
;	O
if	O
(	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
)	O
{	O
timeRemaining	array
=	O
(	O
blackTimeRemaining	long
-=	O
tickLength	int
)	O
;	O
}	O
else	O
{	O
timeRemaining	array
=	O
(	O
whiteTimeRemaining	long
-=	O
tickLength	int
)	O
;	O
}	O
DisplayLabels	function
(	O
)	O
;	O
CheckFlags	function
(	O
)	O
;	O
tickLength	int
=	O
(	O
(	O
(	O
timeRemaining	array
<=	O
1000	int
)	O
&&	O
(	O
timeRemaining	array
>	O
0	int
)	O
)	O
?	O
100	int
:	O
1000	int
)	O
;	O
gettimeofday	function
(	O
&	O
tickStartTV	struct
,	O
NULL	O
)	O
;	O
timerXID	O
=	O
XtAppAddTimeOut	function
(	O
appContext	int
,	O
tickLength	int
,	O
(	O
XtTimerCallbackProc	O
)	O
DisplayClocks	function
,	O
(	O
XtPointer	O
)	O
DecrementTimers	O
)	O
;	O
break	O
;	O
case	O
SwitchTimers	O
:	O
if	O
(	O
timerXID	O
!=	O
0	int
)	O
{	O
XtRemoveTimeOut	function
(	O
timerXID	O
)	O
;	O
timerXID	O
=	O
0	int
;	O
if	O
(	O
localPlayer	struct
.	O
appData	struct
.	O
clockMode	int
)	O
{	O
if	O
(	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
)	O
whiteTimeRemaining	long
-=	O
PartialTickLength	function
(	O
)	O
;	O
else	O
blackTimeRemaining	long
-=	O
PartialTickLength	function
(	O
)	O
;	O
CheckFlags	function
(	O
)	O
;	O
}	O
}	O
CheckTimeControl	function
(	O
)	O
;	O
DisplayLabels	function
(	O
)	O
;	O
if	O
(	O
!	O
localPlayer	struct
.	O
appData	struct
.	O
clockMode	int
)	O
return	O
;	O
if	O
(	O
(	O
gameMode	int
==	O
PauseGame	O
)	O
&&	O
(	O
(	O
pausePreviousMode	int
==	O
MachinePlaysBlack	O
)	O
||	O
(	O
pausePreviousMode	int
==	O
MachinePlaysWhite	O
)	O
)	O
)	O
{	O
return	O
;	O
}	O
timeRemaining	array
=	O
(	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
?	O
blackTimeRemaining	long
:	O
whiteTimeRemaining	long
)	O
;	O
tickLength	int
=	O
(	O
(	O
(	O
timeRemaining	array
<=	O
1000	int
)	O
&&	O
(	O
timeRemaining	array
>	O
0	int
)	O
)	O
?	O
(	O
(	O
(	O
timeRemaining	array
-	O
1	int
)	O
%	O
100	int
)	O
+	O
1	int
)	O
:	O
(	O
(	O
(	O
timeRemaining	array
-	O
1	int
)	O
%	O
1000	int
)	O
+	O
1	int
)	O
)	O
;	O
if	O
(	O
tickLength	int
<=	O
0	int
)	O
tickLength	int
+=	O
1000	int
;	O
gettimeofday	function
(	O
&	O
tickStartTV	struct
,	O
NULL	O
)	O
;	O
timerXID	O
=	O
XtAppAddTimeOut	function
(	O
appContext	int
,	O
tickLength	int
,	O
(	O
XtTimerCallbackProc	O
)	O
DisplayClocks	function
,	O
(	O
XtPointer	O
)	O
DecrementTimers	O
)	O
;	O
break	O
;	O
case	O
ReDisplayTimers	O
:	O
DisplayLabels	function
(	O
)	O
;	O
break	O
;	O
case	O
StopTimers	O
:	O
if	O
(	O
timerXID	O
==	O
0	int
)	O
return	O
;	O
XtRemoveTimeOut	function
(	O
timerXID	O
)	O
;	O
timerXID	O
=	O
0	int
;	O
if	O
(	O
!	O
localPlayer	struct
.	O
appData	struct
.	O
clockMode	int
)	O
return	O
;	O
if	O
(	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
)	O
blackTimeRemaining	long
-=	O
PartialTickLength	function
(	O
)	O
;	O
else	O
whiteTimeRemaining	long
-=	O
PartialTickLength	function
(	O
)	O
;	O
CheckFlags	function
(	O
)	O
;	O
DisplayLabels	function
(	O
)	O
;	O
break	O
;	O
case	O
StartTimers	O
:	O
if	O
(	O
timerXID	O
!=	O
0	int
)	O
return	O
;	O
DisplayLabels	function
(	O
)	O
;	O
if	O
(	O
!	O
localPlayer	struct
.	O
appData	struct
.	O
clockMode	int
)	O
return	O
;	O
timeRemaining	array
=	O
(	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
?	O
blackTimeRemaining	long
:	O
whiteTimeRemaining	long
)	O
;	O
if	O
(	O
timeRemaining	array
==	O
0	int
)	O
return	O
;	O
tickLength	int
=	O
(	O
(	O
(	O
timeRemaining	array
<=	O
1000	int
)	O
&&	O
(	O
timeRemaining	array
>	O
0	int
)	O
)	O
?	O
(	O
(	O
(	O
timeRemaining	array
-	O
1	int
)	O
%	O
100	int
)	O
+	O
1	int
)	O
:	O
(	O
(	O
(	O
timeRemaining	array
-	O
1	int
)	O
%	O
1000	int
)	O
+	O
1	int
)	O
)	O
;	O
if	O
(	O
tickLength	int
<=	O
0	int
)	O
tickLength	int
+=	O
1000	int
;	O
gettimeofday	function
(	O
&	O
tickStartTV	struct
,	O
NULL	O
)	O
;	O
timerXID	O
=	O
XtAppAddTimeOut	function
(	O
appContext	int
,	O
tickLength	int
,	O
(	O
XtTimerCallbackProc	O
)	O
DisplayClocks	function
,	O
(	O
XtPointer	O
)	O
DecrementTimers	O
)	O
;	O
break	O
;	O
}	O
}	O
void	O
DisplayTimerLabel	function
(	O
Widget	O
w	int
,	O
char	O
*	O
color	int
,	O
long	O
int	O
timer	long
)	O
{	O
char	O
buf	char
[	O
MSG_SIZ	O
]	O
;	O
Arg	O
args	O
[	O
3	int
]	O
;	O
struct	O
DisplayData	struct
*	O
player	pointer
;	O
player	pointer
=	O
(	O
(	O
(	O
w	int
==	O
localPlayer	struct
.	O
blackTimerWidget	int
)	O
||	O
(	O
w	int
==	O
localPlayer	struct
.	O
whiteTimerWidget	int
)	O
)	O
?	O
&	O
localPlayer	struct
:	O
&	O
remotePlayer	struct
)	O
;	O
if	O
(	O
localPlayer	struct
.	O
appData	struct
.	O
clockMode	int
)	O
{	O
sprintf	function
(	O
buf	char
,	O
"%s: %s"	pointer
,	O
color	int
,	O
TimeString	function
(	O
timer	long
)	O
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNlabel	O
,	O
buf	char
)	O
;	O
}	O
else	O
{	O
XtSetArg	function
(	O
args	O
[	O
0	int
]	O
,	O
XtNlabel	O
,	O
color	int
)	O
;	O
}	O
if	O
(	O
(	O
(	O
color	int
[	O
0	int
]	O
==	O
'W'	O
)	O
&&	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
)	O
||	O
(	O
(	O
color	int
[	O
0	int
]	O
==	O
'B'	O
)	O
&&	O
!	O
BlackOnMove	function
(	O
forwardMostMove	int
)	O
)	O
)	O
{	O
XtSetArg	function
(	O
args	O
[	O
1	int
]	O
,	O
XtNbackground	O
,	O
player	pointer
->	O
timerForegroundPixel	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
2	int
]	O
,	O
XtNforeground	O
,	O
player	pointer
->	O
timerBackgroundPixel	int
)	O
;	O
}	O
else	O
{	O
XtSetArg	function
(	O
args	O
[	O
1	int
]	O
,	O
XtNbackground	O
,	O
player	pointer
->	O
timerBackgroundPixel	int
)	O
;	O
XtSetArg	function
(	O
args	O
[	O
2	int
]	O
,	O
XtNforeground	O
,	O
player	pointer
->	O
timerForegroundPixel	int
)	O
;	O
}	O
XtSetValues	function
(	O
w	int
,	O
args	O
,	O
3	int
)	O
;	O
}	O
char	O
*	O
TimeString	function
(	O
long	O
tm	struct
)	O
{	O
int	O
second	int
,	O
minute	int
,	O
hour	int
,	O
day	int
;	O
char	O
*	O
sign	pointer
=	O
""	pointer
;	O
static	O
char	O
buf	char
[	O
32	int
]	O
;	O
if	O
(	O
(	O
tm	struct
>	O
0	int
)	O
&&	O
(	O
tm	struct
<=	O
900	int
)	O
)	O
{	O
sprintf	function
(	O
buf	char
,	O
" 0.%1ld "	pointer
,	O
(	O
tm	struct
+	O
99	int
)	O
/	O
100	int
)	O
;	O
return	O
buf	char
;	O
}	O
tm	struct
=	O
(	O
tm	struct
+	O
999	int
)	O
/	O
1000	int
;	O
if	O
(	O
tm	struct
<	O
0	int
)	O
{	O
sign	pointer
=	O
"-"	pointer
;	O
tm	struct
=	O
-	O
tm	struct
;	O
}	O
if	O
(	O
tm	struct
>=	O
(	O
60	int
*	O
60	int
*	O
24	int
)	O
)	O
{	O
day	int
=	O
(	O
int	O
)	O
(	O
tm	struct
/	O
(	O
60	int
*	O
60	int
*	O
24	int
)	O
)	O
;	O
tm	struct
-=	O
day	int
*	O
60	int
*	O
60	int
*	O
24	int
;	O
}	O
else	O
{	O
day	int
=	O
0	int
;	O
}	O
if	O
(	O
tm	struct
>=	O
(	O
60	int
*	O
60	int
)	O
)	O
{	O
hour	int
=	O
(	O
int	O
)	O
(	O
tm	struct
/	O
(	O
60	int
*	O
60	int
)	O
)	O
;	O
tm	struct
-=	O
hour	int
*	O
60	int
*	O
60	int
;	O
}	O
else	O
{	O
hour	int
=	O
0	int
;	O
}	O
if	O
(	O
tm	struct
>=	O
60	int
)	O
{	O
minute	int
=	O
(	O
int	O
)	O
(	O
tm	struct
/	O
60	int
)	O
;	O
tm	struct
-=	O
minute	int
*	O
60	int
;	O
}	O
else	O
{	O
minute	int
=	O
0	int
;	O
}	O
second	int
=	O
tm	struct
%	O
60	int
;	O
if	O
(	O
day	int
>	O
0	int
)	O
{	O
sprintf	function
(	O
buf	char
,	O
" %s%d:%02d:%02d:%02d "	pointer
,	O
sign	pointer
,	O
day	int
,	O
hour	int
,	O
minute	int
,	O
second	int
)	O
;	O
}	O
else	O
if	O
(	O
hour	int
>	O
0	int
)	O
{	O
sprintf	function
(	O
buf	char
,	O
" %s%d:%02d:%02d "	pointer
,	O
sign	pointer
,	O
hour	int
,	O
minute	int
,	O
second	int
)	O
;	O
}	O
else	O
{	O
sprintf	function
(	O
buf	char
,	O
" %s%2d:%02d "	pointer
,	O
sign	pointer
,	O
minute	int
,	O
second	int
)	O
;	O
}	O
return	O
buf	char
;	O
}	O
void	O
Usage	function
(	O
void	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Usage: %s\n"	pointer
,	O
programName	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\tstandard Xt options\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\t-iconic\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\t-tc or -timeControl minutes[:seconds]\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\t-gi or -gameIn (True | False)\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\t-mps or -movesPerSession moves\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\t-st or -searchTime minutes[:seconds]\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\t-sd or -searchDepth number\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\t-clock or -clockMode (True | False)\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\t-td or -timeDelay seconds\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\t-nsp or -noShogiProgram (True | False)\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\t-fsp or -firstShogiProgram program_name\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\t-ssp or -secondShogiProgram program_name\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\t-fh or -firstHost host_name\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\t-sh or -secondHost host_name\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\t-rsh or -remoteShell shell_name\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\t-mm or -matchMode (False | Init | Position | Opening)\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\t-lgf or -loadGameFile file_name\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\t-lpf or -loadPositionFile file_name\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\t-sgf or -saveGameFile file_name\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\t-spf or -savePositionFile file_name\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\t-size or -boardSize (Large | Medium | Small)\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\t-coords or -showCoords (True | False)\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\t-mono or -monoMode (True | False)\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\t-pc or -pieceColor color\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\t-sc  or -squareColor color\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\t-wps or -westernPieceSet (True | False)\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\t-debug or -debugMode (True | False)\n"	pointer
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
void	O
CatchPipeSignal	function
(	O
int	O
dummy	int
)	O
{	O
char	O
message	char
[	O
MSG_SIZ	O
]	O
;	O
sprintf	function
(	O
message	char
,	O
"%s shogi program (%s) exited unexpectedly"	pointer
,	O
(	O
(	O
lastMsgFP	pointer
==	O
toFirstProgFP	pointer
)	O
?	O
"first"	pointer
:	O
"second"	pointer
)	O
,	O
(	O
(	O
lastMsgFP	pointer
==	O
toFirstProgFP	pointer
)	O
?	O
localPlayer	struct
.	O
appData	struct
.	O
firstShogiProgram	int
:	O
localPlayer	struct
.	O
appData	struct
.	O
secondShogiProgram	int
)	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s\n"	pointer
,	O
programName	O
,	O
message	char
)	O
;	O
ShutdownShogiPrograms	function
(	O
message	char
)	O
;	O
return	O
;	O
}	O
