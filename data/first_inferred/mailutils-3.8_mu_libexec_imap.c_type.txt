char	O
imap_docstring	array
[	O
]	O
=	O
N_	O
(	O
"IMAP4 client shell"	pointer
)	O
;	O
static	O
mu_imap_t	pointer
imap	pointer
;	O
static	O
int	O
uid_mode	int
;	O
static	O
enum	O
mu_imap_session_state	enum
current_imap_state	function
(	O
)	O
{	O
int	O
state	pointer
;	O
if	O
(	O
imap	pointer
==	O
NULL	O
)	O
state	pointer
=	O
MU_IMAP_SESSION_INIT	int
;	O
else	O
state	pointer
=	O
mu_imap_session_state	enum
(	O
imap	pointer
)	O
;	O
return	O
state	pointer
;	O
}	O
static	O
void	O
imap_set_verbose	function
(	O
)	O
{	O
if	O
(	O
imap	pointer
)	O
{	O
if	O
(	O
QRY_VERBOSE	O
(	O
)	O
)	O
mu_imap_trace	function
(	O
imap	pointer
,	O
MU_IMAP_TRACE_SET	int
)	O
;	O
else	O
mu_imap_trace	function
(	O
imap	pointer
,	O
MU_IMAP_TRACE_CLR	int
)	O
;	O
}	O
}	O
void	O
imap_set_verbose_mask	function
(	O
)	O
{	O
if	O
(	O
imap	pointer
)	O
{	O
mu_imap_trace_mask	function
(	O
imap	pointer
,	O
QRY_VERBOSE_MASK	O
(	O
MU_XSCRIPT_SECURE	int
)	O
?	O
MU_IMAP_TRACE_SET	int
:	O
MU_IMAP_TRACE_CLR	int
,	O
MU_XSCRIPT_SECURE	int
)	O
;	O
mu_imap_trace_mask	function
(	O
imap	pointer
,	O
QRY_VERBOSE_MASK	O
(	O
MU_XSCRIPT_PAYLOAD	int
)	O
?	O
MU_IMAP_TRACE_SET	int
:	O
MU_IMAP_TRACE_CLR	int
,	O
MU_XSCRIPT_PAYLOAD	int
)	O
;	O
}	O
}	O
static	O
int	O
com_verbose	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
return	O
shell_verbose	function
(	O
argc	long
,	O
argv	pointer
,	O
imap_set_verbose	function
,	O
imap_set_verbose_mask	function
)	O
;	O
}	O
static	O
mu_msgset_t	pointer
parse_msgset	function
(	O
const	O
char	O
*	O
arg	pointer
)	O
{	O
int	O
status	int
;	O
mu_msgset_t	pointer
msgset	pointer
;	O
char	O
*	O
p	pointer
;	O
status	int
=	O
mu_msgset_create	function
(	O
&	O
msgset	pointer
,	O
NULL	O
,	O
MU_MSGSET_NUM	int
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_msgset_create"	pointer
,	O
NULL	O
,	O
status	int
)	O
;	O
return	O
NULL	O
;	O
}	O
status	int
=	O
mu_msgset_parse_imap	function
(	O
msgset	pointer
,	O
MU_MSGSET_NUM	int
,	O
arg	pointer
,	O
&	O
p	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"failed to parse message set near \"%s\": %s"	pointer
)	O
,	O
p	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
mu_msgset_destroy	function
(	O
&	O
msgset	pointer
)	O
;	O
}	O
return	O
msgset	pointer
;	O
}	O
static	O
void	O
report_failure	function
(	O
const	O
char	O
*	O
what	pointer
,	O
int	O
status	int
)	O
{	O
const	O
char	O
*	O
str	pointer
;	O
mu_error	function
(	O
_	O
(	O
"%s failed: %s"	pointer
)	O
,	O
what	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
if	O
(	O
mu_imap_strerror	function
(	O
imap	pointer
,	O
&	O
str	pointer
)	O
==	O
0	int
)	O
mu_error	function
(	O
_	O
(	O
"server reply: %s"	pointer
)	O
,	O
str	pointer
)	O
;	O
}	O
static	O
int	O
connect_argc	int
;	O
static	O
char	O
*	O
*	O
connect_argv	pointer
;	O
static	O
char	O
*	O
username	pointer
;	O
static	O
void	O
imap_prompt_env	function
(	O
void	O
)	O
{	O
mu_assoc_t	pointer
assoc	pointer
=	O
mutool_shell_prompt_assoc	function
(	O
)	O
;	O
enum	O
mu_imap_session_state	enum
state	pointer
=	O
current_imap_state	function
(	O
)	O
;	O
const	O
char	O
*	O
p	pointer
;	O
if	O
(	O
state	pointer
>=	O
MU_IMAP_SESSION_AUTH	int
&&	O
username	pointer
)	O
mu_assoc_install	function
(	O
assoc	pointer
,	O
"user"	pointer
,	O
username	pointer
)	O
;	O
if	O
(	O
connect_argv	pointer
)	O
mu_assoc_install	function
(	O
assoc	pointer
,	O
"host"	pointer
,	O
host	pointer
)	O
;	O
if	O
(	O
mu_imap_session_state_str	function
(	O
state	pointer
,	O
&	O
p	pointer
)	O
==	O
0	int
)	O
mu_assoc_install	function
(	O
assoc	pointer
,	O
"status"	pointer
,	O
(	O
void	O
*	O
)	O
p	pointer
)	O
;	O
}	O
static	O
void	O
imap_preauth_callback	function
(	O
void	O
*	O
data	pointer
,	O
int	O
code	int
,	O
size_t	long
sdat	long
,	O
void	O
*	O
pdat	pointer
)	O
{	O
const	O
char	O
*	O
text	pointer
=	O
pdat	pointer
;	O
if	O
(	O
text	pointer
)	O
mu_diag_output	function
(	O
MU_DIAG_INFO	O
,	O
_	O
(	O
"session authenticated: %s"	pointer
)	O
,	O
text	pointer
)	O
;	O
else	O
mu_diag_output	function
(	O
MU_DIAG_INFO	O
,	O
_	O
(	O
"session authenticated"	pointer
)	O
)	O
;	O
}	O
static	O
void	O
imap_bye_callback	function
(	O
void	O
*	O
data	pointer
,	O
int	O
code	int
,	O
size_t	long
sdat	long
,	O
void	O
*	O
pdat	pointer
)	O
{	O
const	O
char	O
*	O
text	pointer
=	O
pdat	pointer
;	O
if	O
(	O
text	pointer
)	O
mu_diag_output	function
(	O
MU_DIAG_INFO	O
,	O
_	O
(	O
"server is closing connection: %s"	pointer
)	O
,	O
text	pointer
)	O
;	O
else	O
mu_diag_output	function
(	O
MU_DIAG_INFO	O
,	O
_	O
(	O
"server is closing connection"	pointer
)	O
)	O
;	O
}	O
static	O
void	O
imap_bad_callback	function
(	O
void	O
*	O
data	pointer
,	O
int	O
code	int
,	O
size_t	long
sdat	long
,	O
void	O
*	O
pdat	pointer
)	O
{	O
const	O
char	O
*	O
text	pointer
=	O
pdat	pointer
;	O
mu_diag_output	function
(	O
MU_DIAG_CRIT	O
,	O
"SERVER ALERT: %s"	pointer
,	O
text	pointer
)	O
;	O
}	O
static	O
void	O
format_email	function
(	O
mu_stream_t	pointer
str	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
mu_address_t	pointer
addr	int
)	O
{	O
mu_stream_printf	function
(	O
str	pointer
,	O
"  %s = "	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
!	O
addr	int
)	O
mu_stream_printf	function
(	O
str	pointer
,	O
"NIL"	pointer
)	O
;	O
else	O
mu_stream_format_address	function
(	O
str	pointer
,	O
addr	int
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
static	O
void	O
format_date	function
(	O
mu_stream_t	pointer
str	pointer
,	O
char	O
*	O
name	pointer
,	O
struct	O
tm	struct
*	O
tm	struct
,	O
struct	O
mu_timezone	struct
*	O
tz	pointer
)	O
{	O
char	O
date	struct
[	O
128	int
]	O
;	O
strftime	function
(	O
date	struct
,	O
sizeof	O
(	O
date	struct
)	O
,	O
"%a %b %e %H:%M:%S"	pointer
,	O
tm	struct
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"  %s = %s"	pointer
,	O
name	pointer
,	O
date	struct
)	O
;	O
if	O
(	O
tz	pointer
->	O
tz_name	pointer
)	O
mu_stream_printf	function
(	O
str	pointer
,	O
" %s"	pointer
,	O
tz	pointer
->	O
tz_name	pointer
)	O
;	O
else	O
{	O
int	O
off	int
=	O
tz	pointer
->	O
utc_offset	int
;	O
if	O
(	O
off	int
<	O
0	int
)	O
{	O
mu_stream_printf	function
(	O
str	pointer
,	O
" -"	pointer
)	O
;	O
off	int
=	O
-	O
off	int
;	O
}	O
else	O
mu_stream_printf	function
(	O
str	pointer
,	O
" +"	pointer
)	O
;	O
off	int
/=	O
60	int
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"%02d%02d"	pointer
,	O
off	int
/	O
60	int
,	O
off	int
%	O
60	int
)	O
;	O
}	O
mu_stream_printf	function
(	O
str	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
static	O
void	O
print_param	function
(	O
mu_stream_t	pointer
ostr	pointer
,	O
const	O
char	O
*	O
prefix	array
,	O
mu_assoc_t	pointer
assoc	pointer
,	O
int	O
indent	int
)	O
{	O
mu_iterator_t	pointer
itr	pointer
;	O
int	O
i	long
;	O
mu_stream_printf	function
(	O
ostr	pointer
,	O
"%*s%s:\n"	pointer
,	O
indent	int
,	O
""	pointer
,	O
prefix	array
)	O
;	O
indent	int
+=	O
4	int
;	O
if	O
(	O
mu_assoc_get_iterator	function
(	O
assoc	pointer
,	O
&	O
itr	pointer
)	O
)	O
return	O
;	O
for	O
(	O
i	long
=	O
0	int
,	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
i	long
++	O
,	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
const	O
char	O
*	O
name	pointer
;	O
struct	O
mu_mime_param	struct
*	O
p	pointer
;	O
mu_iterator_current_kv	function
(	O
itr	pointer
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
name	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
p	pointer
)	O
;	O
mu_stream_printf	function
(	O
ostr	pointer
,	O
"%*s%d: %s=%s\n"	pointer
,	O
indent	int
,	O
""	pointer
,	O
i	long
,	O
name	pointer
,	O
p	pointer
->	O
value	pointer
)	O
;	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
}	O
struct	O
print_data	struct
{	O
mu_stream_t	pointer
ostr	pointer
;	O
int	O
num	long
;	O
int	O
level	int
;	O
}	O
;	O
static	O
void	O
print_bs	function
(	O
mu_stream_t	pointer
ostr	pointer
,	O
struct	O
mu_bodystructure	struct
*	O
bs	pointer
,	O
int	O
level	int
)	O
;	O
static	O
int	O
print_item	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
mu_bodystructure	struct
*	O
bs	pointer
=	O
item	pointer
;	O
struct	O
print_data	struct
*	O
pd	pointer
=	O
data	pointer
;	O
mu_stream_printf	function
(	O
pd	pointer
->	O
ostr	pointer
,	O
"%*sPart #%d\n"	pointer
,	O
(	O
pd	pointer
->	O
level	int
-	O
1	int
)	O
<<	O
2	int
,	O
""	pointer
,	O
pd	pointer
->	O
num	long
)	O
;	O
print_bs	function
(	O
pd	pointer
->	O
ostr	pointer
,	O
bs	pointer
,	O
pd	pointer
->	O
level	int
)	O
;	O
++	O
pd	pointer
->	O
num	long
;	O
return	O
0	int
;	O
}	O
static	O
void	O
print_address	function
(	O
mu_stream_t	pointer
ostr	pointer
,	O
const	O
char	O
*	O
title	pointer
,	O
mu_address_t	pointer
addr	int
,	O
int	O
indent	int
)	O
{	O
mu_stream_printf	function
(	O
ostr	pointer
,	O
"%*s%s: "	pointer
,	O
indent	int
,	O
""	pointer
,	O
title	pointer
)	O
;	O
mu_stream_format_address	function
(	O
mu_strout	pointer
,	O
addr	int
)	O
;	O
mu_stream_printf	function
(	O
ostr	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
static	O
void	O
print_imapenvelope	function
(	O
mu_stream_t	pointer
ostr	pointer
,	O
struct	O
mu_imapenvelope	struct
*	O
env	pointer
,	O
int	O
level	int
)	O
{	O
int	O
indent	int
=	O
(	O
level	int
<<	O
2	int
)	O
;	O
mu_stream_printf	function
(	O
ostr	pointer
,	O
"%*sEnvelope:\n"	pointer
,	O
indent	int
,	O
""	pointer
)	O
;	O
indent	int
+=	O
4	int
;	O
mu_stream_printf	function
(	O
ostr	pointer
,	O
"%*sTime: "	pointer
,	O
indent	int
,	O
""	pointer
)	O
;	O
mu_c_streamftime	function
(	O
mu_strout	pointer
,	O
"%c%n"	pointer
,	O
&	O
env	pointer
->	O
date	struct
,	O
&	O
env	pointer
->	O
tz	pointer
)	O
;	O
mu_stream_printf	function
(	O
ostr	pointer
,	O
"%*sSubject: %s\n"	pointer
,	O
indent	int
,	O
""	pointer
,	O
mu_prstr	function
(	O
env	pointer
->	O
subject	pointer
)	O
)	O
;	O
print_address	function
(	O
ostr	pointer
,	O
"From"	pointer
,	O
env	pointer
->	O
from	pointer
,	O
indent	int
)	O
;	O
print_address	function
(	O
ostr	pointer
,	O
"Sender"	pointer
,	O
env	pointer
->	O
sender	pointer
,	O
indent	int
)	O
;	O
print_address	function
(	O
ostr	pointer
,	O
"Reply-to"	pointer
,	O
env	pointer
->	O
reply_to	pointer
,	O
indent	int
)	O
;	O
print_address	function
(	O
ostr	pointer
,	O
"To"	pointer
,	O
env	pointer
->	O
to	pointer
,	O
indent	int
)	O
;	O
print_address	function
(	O
ostr	pointer
,	O
"Cc"	pointer
,	O
env	pointer
->	O
cc	pointer
,	O
indent	int
)	O
;	O
print_address	function
(	O
ostr	pointer
,	O
"Bcc"	pointer
,	O
env	pointer
->	O
bcc	pointer
,	O
indent	int
)	O
;	O
mu_stream_printf	function
(	O
ostr	pointer
,	O
"%*sIn-Reply-To: %s\n"	pointer
,	O
indent	int
,	O
""	pointer
,	O
mu_prstr	function
(	O
env	pointer
->	O
in_reply_to	pointer
)	O
)	O
;	O
mu_stream_printf	function
(	O
ostr	pointer
,	O
"%*sMessage-ID: %s\n"	pointer
,	O
indent	int
,	O
""	pointer
,	O
mu_prstr	function
(	O
env	pointer
->	O
message_id	pointer
)	O
)	O
;	O
}	O
static	O
void	O
print_bs	function
(	O
mu_stream_t	pointer
ostr	pointer
,	O
struct	O
mu_bodystructure	struct
*	O
bs	pointer
,	O
int	O
level	int
)	O
{	O
int	O
indent	int
=	O
level	int
<<	O
2	int
;	O
mu_stream_printf	function
(	O
ostr	pointer
,	O
"%*sbody_type=%s\n"	pointer
,	O
indent	int
,	O
""	pointer
,	O
mu_prstr	function
(	O
bs	pointer
->	O
body_type	pointer
)	O
)	O
;	O
mu_stream_printf	function
(	O
ostr	pointer
,	O
"%*sbody_subtype=%s\n"	pointer
,	O
indent	int
,	O
""	pointer
,	O
mu_prstr	function
(	O
bs	pointer
->	O
body_subtype	pointer
)	O
)	O
;	O
print_param	function
(	O
ostr	pointer
,	O
"Parameters"	pointer
,	O
bs	pointer
->	O
body_param	pointer
,	O
indent	int
)	O
;	O
mu_stream_printf	function
(	O
ostr	pointer
,	O
"%*sbody_id=%s\n"	pointer
,	O
indent	int
,	O
""	pointer
,	O
mu_prstr	function
(	O
bs	pointer
->	O
body_id	pointer
)	O
)	O
;	O
mu_stream_printf	function
(	O
ostr	pointer
,	O
"%*sbody_descr=%s\n"	pointer
,	O
indent	int
,	O
""	pointer
,	O
mu_prstr	function
(	O
bs	pointer
->	O
body_descr	pointer
)	O
)	O
;	O
mu_stream_printf	function
(	O
ostr	pointer
,	O
"%*sbody_encoding=%s\n"	pointer
,	O
indent	int
,	O
""	pointer
,	O
mu_prstr	function
(	O
bs	pointer
->	O
body_encoding	pointer
)	O
)	O
;	O
mu_stream_printf	function
(	O
ostr	pointer
,	O
"%*sbody_size=%lu\n"	pointer
,	O
indent	int
,	O
""	pointer
,	O
(	O
unsigned	O
long	O
)	O
bs	pointer
->	O
body_size	long
)	O
;	O
mu_stream_printf	function
(	O
ostr	pointer
,	O
"%*sbody_md5=%s\n"	pointer
,	O
indent	int
,	O
""	pointer
,	O
mu_prstr	function
(	O
bs	pointer
->	O
body_md5	pointer
)	O
)	O
;	O
mu_stream_printf	function
(	O
ostr	pointer
,	O
"%*sbody_disposition=%s\n"	pointer
,	O
indent	int
,	O
""	pointer
,	O
mu_prstr	function
(	O
bs	pointer
->	O
body_disposition	pointer
)	O
)	O
;	O
print_param	function
(	O
ostr	pointer
,	O
"Disposition Parameters"	pointer
,	O
bs	pointer
->	O
body_disp_param	pointer
,	O
indent	int
)	O
;	O
mu_stream_printf	function
(	O
ostr	pointer
,	O
"%*sbody_language=%s\n"	pointer
,	O
indent	int
,	O
""	pointer
,	O
mu_prstr	function
(	O
bs	pointer
->	O
body_language	pointer
)	O
)	O
;	O
mu_stream_printf	function
(	O
ostr	pointer
,	O
"%*sbody_location=%s\n"	pointer
,	O
indent	int
,	O
""	pointer
,	O
mu_prstr	function
(	O
bs	pointer
->	O
body_location	pointer
)	O
)	O
;	O
mu_stream_printf	function
(	O
ostr	pointer
,	O
"%*sType "	pointer
,	O
indent	int
,	O
""	pointer
)	O
;	O
switch	O
(	O
bs	pointer
->	O
body_message_type	enum
)	O
{	O
case	O
mu_message_other	int
:	O
mu_stream_printf	function
(	O
ostr	pointer
,	O
"mu_message_other\n"	pointer
)	O
;	O
break	O
;	O
case	O
mu_message_text	int
:	O
mu_stream_printf	function
(	O
ostr	pointer
,	O
"mu_message_text:\n%*sbody_lines=%lu\n"	pointer
,	O
indent	int
+	O
4	int
,	O
""	pointer
,	O
(	O
unsigned	O
long	O
)	O
bs	pointer
->	O
v	array
.	O
text	pointer
.	O
body_lines	long
)	O
;	O
break	O
;	O
case	O
mu_message_rfc822	int
:	O
mu_stream_printf	function
(	O
ostr	pointer
,	O
"mu_message_rfc822:\n%*sbody_lines=%lu\n"	pointer
,	O
indent	int
+	O
4	int
,	O
""	pointer
,	O
(	O
unsigned	O
long	O
)	O
bs	pointer
->	O
v	array
.	O
rfc822	struct
.	O
body_lines	long
)	O
;	O
print_imapenvelope	function
(	O
ostr	pointer
,	O
bs	pointer
->	O
v	array
.	O
rfc822	struct
.	O
body_env	pointer
,	O
level	int
+	O
1	int
)	O
;	O
print_bs	function
(	O
ostr	pointer
,	O
bs	pointer
->	O
v	array
.	O
rfc822	struct
.	O
body_struct	pointer
,	O
level	int
+	O
1	int
)	O
;	O
break	O
;	O
case	O
mu_message_multipart	int
:	O
{	O
struct	O
print_data	struct
pd	pointer
;	O
pd	pointer
.	O
ostr	pointer
=	O
ostr	pointer
;	O
pd	pointer
.	O
num	long
=	O
0	int
;	O
pd	pointer
.	O
level	int
=	O
level	int
+	O
1	int
;	O
mu_stream_printf	function
(	O
ostr	pointer
,	O
"mu_message_multipart:\n"	pointer
)	O
;	O
mu_list_foreach	function
(	O
bs	pointer
->	O
v	array
.	O
multipart	struct
.	O
body_parts	pointer
,	O
print_item	function
,	O
&	O
pd	pointer
)	O
;	O
}	O
}	O
}	O
static	O
int	O
fetch_response_printer	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
union	O
mu_imap_fetch_response	union
*	O
resp	pointer
=	O
item	pointer
;	O
mu_stream_t	pointer
str	pointer
=	O
data	pointer
;	O
switch	O
(	O
resp	pointer
->	O
type	int
)	O
{	O
case	O
MU_IMAP_FETCH_BODY	int
:	O
mu_stream_printf	function
(	O
str	pointer
,	O
"BODY ["	pointer
)	O
;	O
if	O
(	O
resp	pointer
->	O
body	pointer
.	O
partv	pointer
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
resp	pointer
->	O
body	pointer
.	O
partc	long
;	O
i	long
++	O
)	O
mu_stream_printf	function
(	O
str	pointer
,	O
"%lu."	pointer
,	O
(	O
unsigned	O
long	O
)	O
resp	pointer
->	O
body	pointer
.	O
partv	pointer
[	O
i	long
]	O
)	O
;	O
}	O
if	O
(	O
resp	pointer
->	O
body	pointer
.	O
section	struct
)	O
mu_stream_printf	function
(	O
str	pointer
,	O
"%s"	pointer
,	O
resp	pointer
->	O
body	pointer
.	O
section	struct
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"]"	pointer
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"\nBEGIN\n%s\nEND\n"	pointer
,	O
resp	pointer
->	O
body	pointer
.	O
text	pointer
)	O
;	O
break	O
;	O
case	O
MU_IMAP_FETCH_BODYSTRUCTURE	int
:	O
mu_stream_printf	function
(	O
str	pointer
,	O
"BODYSTRUCTURE:\nBEGIN\n"	pointer
)	O
;	O
print_bs	function
(	O
str	pointer
,	O
resp	pointer
->	O
bodystructure	struct
.	O
bs	pointer
,	O
0	int
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"END\n"	pointer
)	O
;	O
break	O
;	O
case	O
MU_IMAP_FETCH_ENVELOPE	int
:	O
{	O
struct	O
mu_imapenvelope	struct
*	O
env	pointer
=	O
resp	pointer
->	O
envelope	pointer
.	O
imapenvelope	pointer
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"ENVELOPE:\n"	pointer
)	O
;	O
format_date	function
(	O
str	pointer
,	O
"date"	pointer
,	O
&	O
env	pointer
->	O
date	struct
,	O
&	O
env	pointer
->	O
tz	pointer
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"  subject = %s\n"	pointer
,	O
env	pointer
->	O
subject	pointer
?	O
env	pointer
->	O
subject	pointer
:	O
"NIL"	pointer
)	O
;	O
format_email	function
(	O
str	pointer
,	O
"from"	pointer
,	O
env	pointer
->	O
from	pointer
)	O
;	O
format_email	function
(	O
str	pointer
,	O
"sender"	pointer
,	O
env	pointer
->	O
sender	pointer
)	O
;	O
format_email	function
(	O
str	pointer
,	O
"reply-to"	pointer
,	O
env	pointer
->	O
reply_to	pointer
)	O
;	O
format_email	function
(	O
str	pointer
,	O
"to"	pointer
,	O
env	pointer
->	O
to	pointer
)	O
;	O
format_email	function
(	O
str	pointer
,	O
"cc"	pointer
,	O
env	pointer
->	O
cc	pointer
)	O
;	O
format_email	function
(	O
str	pointer
,	O
"bcc"	pointer
,	O
env	pointer
->	O
bcc	pointer
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"  in-reply-to = %s\n"	pointer
,	O
env	pointer
->	O
in_reply_to	pointer
?	O
env	pointer
->	O
in_reply_to	pointer
:	O
"NIL"	pointer
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"  message-id = %s\n"	pointer
,	O
env	pointer
->	O
message_id	pointer
?	O
env	pointer
->	O
message_id	pointer
:	O
"NIL"	pointer
)	O
;	O
}	O
break	O
;	O
case	O
MU_IMAP_FETCH_FLAGS	int
:	O
mu_stream_printf	function
(	O
str	pointer
,	O
"  flags = "	pointer
)	O
;	O
mu_imap_format_flags	function
(	O
str	pointer
,	O
resp	pointer
->	O
flags	int
.	O
flags	int
,	O
1	int
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"\n"	pointer
)	O
;	O
break	O
;	O
case	O
MU_IMAP_FETCH_INTERNALDATE	int
:	O
format_date	function
(	O
str	pointer
,	O
"internaldate"	pointer
,	O
&	O
resp	pointer
->	O
internaldate	struct
.	O
tm	struct
,	O
&	O
resp	pointer
->	O
internaldate	struct
.	O
tz	pointer
)	O
;	O
break	O
;	O
case	O
MU_IMAP_FETCH_RFC822_SIZE	int
:	O
mu_stream_printf	function
(	O
str	pointer
,	O
"  size = %lu\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
resp	pointer
->	O
rfc822_size	struct
.	O
size	long
)	O
;	O
break	O
;	O
case	O
MU_IMAP_FETCH_UID	int
:	O
mu_stream_printf	function
(	O
str	pointer
,	O
"  UID = %lu\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
resp	pointer
->	O
uid	int
.	O
uid	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
imap_fetch_callback	function
(	O
void	O
*	O
data	pointer
,	O
int	O
code	int
,	O
size_t	long
sdat	long
,	O
void	O
*	O
pdat	pointer
)	O
{	O
mu_stream_t	pointer
str	pointer
=	O
data	pointer
;	O
mu_list_t	pointer
list	pointer
=	O
pdat	pointer
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"Message #%lu:\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
sdat	long
)	O
;	O
mu_list_foreach	function
(	O
list	pointer
,	O
fetch_response_printer	function
,	O
str	pointer
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"\n\n"	pointer
)	O
;	O
}	O
static	O
int	O
com_uid	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
bv	int
;	O
if	O
(	O
argc	long
==	O
1	int
)	O
mu_printf	function
(	O
"%s\n"	pointer
,	O
uid_mode	int
?	O
_	O
(	O
"UID is on"	pointer
)	O
:	O
_	O
(	O
"UID is off"	pointer
)	O
)	O
;	O
else	O
if	O
(	O
get_bool	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
&	O
bv	int
)	O
==	O
0	int
)	O
uid_mode	int
=	O
bv	int
;	O
else	O
mu_error	function
(	O
_	O
(	O
"invalid boolean value"	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
com_disconnect	function
(	O
int	O
argc	long
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
argv	pointer
MU_ARG_UNUSED	O
)	O
{	O
if	O
(	O
imap	pointer
)	O
{	O
mu_imap_disconnect	function
(	O
imap	pointer
)	O
;	O
mu_imap_destroy	function
(	O
&	O
imap	pointer
)	O
;	O
mu_argcv_free	function
(	O
connect_argc	int
,	O
connect_argv	pointer
)	O
;	O
connect_argc	int
=	O
0	int
;	O
connect_argv	pointer
=	O
NULL	O
;	O
imap_prompt_env	function
(	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
com_connect	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
status	int
;	O
int	O
tls	int
=	O
0	int
;	O
int	O
i	long
=	O
1	int
;	O
enum	O
mu_imap_session_state	enum
state	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"-tls"	pointer
)	O
==	O
0	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"TLS not supported"	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
else	O
break	O
;	O
}	O
argc	long
-=	O
i	long
;	O
argv	pointer
+=	O
i	long
;	O
state	pointer
=	O
current_imap_state	function
(	O
)	O
;	O
if	O
(	O
state	pointer
!=	O
MU_IMAP_SESSION_INIT	int
)	O
com_disconnect	function
(	O
0	int
,	O
NULL	O
)	O
;	O
status	int
=	O
mu_imap_create	function
(	O
&	O
imap	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
mu_stream_t	pointer
tcp	pointer
;	O
struct	O
mu_sockaddr	struct
*	O
sa	pointer
;	O
struct	O
mu_sockaddr_hints	struct
hints	pointer
;	O
memset	function
(	O
&	O
hints	pointer
,	O
0	int
,	O
sizeof	O
(	O
hints	pointer
)	O
)	O
;	O
hints	pointer
.	O
flags	int
=	O
MU_AH_DETECT_FAMILY	int
;	O
hints	pointer
.	O
port	int
=	O
tls	int
?	O
MU_IMAP_DEFAULT_SSL_PORT	int
:	O
MU_IMAP_DEFAULT_PORT	int
;	O
hints	pointer
.	O
protocol	int
=	O
IPPROTO_TCP	int
;	O
hints	pointer
.	O
socktype	int
=	O
SOCK_STREAM	int
;	O
status	int
=	O
mu_sockaddr_from_node	function
(	O
&	O
sa	pointer
,	O
argv	pointer
[	O
0	int
]	O
,	O
argv	pointer
[	O
1	int
]	O
,	O
&	O
hints	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
status	int
=	O
mu_tcp_stream_create_from_sa	function
(	O
&	O
tcp	pointer
,	O
sa	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
status	int
)	O
mu_sockaddr_free	function
(	O
sa	pointer
)	O
;	O
}	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
mu_imap_set_carrier	function
(	O
imap	pointer
,	O
tcp	pointer
)	O
;	O
if	O
(	O
QRY_VERBOSE	O
(	O
)	O
)	O
{	O
imap_set_verbose	function
(	O
)	O
;	O
imap_set_verbose_mask	function
(	O
)	O
;	O
}	O
mu_imap_register_callback_function	function
(	O
imap	pointer
,	O
MU_IMAP_CB_PREAUTH	int
,	O
imap_preauth_callback	function
,	O
NULL	O
)	O
;	O
mu_imap_register_callback_function	function
(	O
imap	pointer
,	O
MU_IMAP_CB_BYE	int
,	O
imap_bye_callback	function
,	O
NULL	O
)	O
;	O
mu_imap_register_callback_function	function
(	O
imap	pointer
,	O
MU_IMAP_CB_BAD	int
,	O
imap_bad_callback	function
,	O
NULL	O
)	O
;	O
mu_imap_register_callback_function	function
(	O
imap	pointer
,	O
MU_IMAP_CB_FETCH	int
,	O
imap_fetch_callback	function
,	O
mu_strout	pointer
)	O
;	O
status	int
=	O
mu_imap_connect	function
(	O
imap	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
const	O
char	O
*	O
err	int
;	O
mu_error	function
(	O
"Failed to connect: %s"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
if	O
(	O
mu_imap_strerror	function
(	O
imap	pointer
,	O
&	O
err	int
)	O
)	O
mu_error	function
(	O
"server response: %s"	pointer
,	O
err	int
)	O
;	O
mu_imap_destroy	function
(	O
&	O
imap	pointer
)	O
;	O
}	O
}	O
else	O
mu_imap_destroy	function
(	O
&	O
imap	pointer
)	O
;	O
}	O
else	O
mu_error	function
(	O
_	O
(	O
"Failed to create imap connection: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
if	O
(	O
!	O
status	int
)	O
{	O
connect_argc	int
=	O
argc	long
;	O
connect_argv	pointer
=	O
mu_calloc	function
(	O
argc	long
+	O
1	int
,	O
sizeof	O
(	O
*	O
connect_argv	pointer
)	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
connect_argv	pointer
[	O
i	long
]	O
=	O
mu_strdup	function
(	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
connect_argv	pointer
[	O
i	long
]	O
=	O
NULL	O
;	O
imap_prompt_env	function
(	O
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
com_starttls	function
(	O
int	O
argc	long
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
argv	pointer
MU_ARG_UNUSED	O
)	O
{	O
int	O
status	int
=	O
mu_imap_starttls	function
(	O
imap	pointer
)	O
;	O
if	O
(	O
status	int
)	O
report_failure	function
(	O
"starttls"	pointer
,	O
status	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
com_logout	function
(	O
int	O
argc	long
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
argv	pointer
MU_ARG_UNUSED	O
)	O
{	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
imap	pointer
)	O
{	O
if	O
(	O
mu_imap_logout	function
(	O
imap	pointer
)	O
==	O
0	int
)	O
{	O
status	int
=	O
com_disconnect	function
(	O
0	int
,	O
NULL	O
)	O
;	O
}	O
else	O
{	O
mu_printf	function
(	O
"Try 'exit' to leave %s\n"	pointer
,	O
mu_program_name	pointer
)	O
;	O
}	O
}	O
else	O
mu_printf	function
(	O
_	O
(	O
"Try 'exit' to leave %s\n"	pointer
)	O
,	O
mu_program_name	pointer
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
com_capability	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
mu_iterator_t	pointer
iterator	pointer
=	O
NULL	O
;	O
int	O
status	int
=	O
0	int
;	O
int	O
reread	int
=	O
0	int
;	O
int	O
i	long
=	O
1	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"-reread"	pointer
)	O
==	O
0	int
)	O
reread	int
=	O
1	int
;	O
else	O
break	O
;	O
}	O
if	O
(	O
i	long
<	O
argc	long
)	O
{	O
if	O
(	O
reread	int
)	O
{	O
status	int
=	O
mu_imap_capability	function
(	O
imap	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
}	O
for	O
(	O
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
const	O
char	O
*	O
elt	pointer
;	O
int	O
rc	int
=	O
mu_imap_capability_test	function
(	O
imap	pointer
,	O
argv	pointer
[	O
i	long
]	O
,	O
&	O
elt	pointer
)	O
;	O
switch	O
(	O
rc	int
)	O
{	O
case	O
0	int
:	O
if	O
(	O
*	O
elt	pointer
)	O
mu_printf	function
(	O
"%s: %s\n"	pointer
,	O
argv	pointer
[	O
i	long
]	O
,	O
elt	pointer
)	O
;	O
else	O
mu_printf	function
(	O
_	O
(	O
"%s is set\n"	pointer
)	O
,	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
break	O
;	O
case	O
MU_ERR_NOENT	O
:	O
mu_printf	function
(	O
_	O
(	O
"%s is not set\n"	pointer
)	O
,	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
break	O
;	O
default	O
:	O
return	O
rc	int
;	O
}	O
}	O
}	O
else	O
{	O
status	int
=	O
mu_imap_capability	function
(	O
imap	pointer
,	O
reread	int
,	O
&	O
iterator	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
for	O
(	O
mu_iterator_first	function
(	O
iterator	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
iterator	pointer
)	O
;	O
mu_iterator_next	function
(	O
iterator	pointer
)	O
)	O
{	O
char	O
*	O
capa	pointer
=	O
NULL	O
;	O
mu_iterator_current	function
(	O
iterator	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
capa	pointer
)	O
;	O
mu_printf	function
(	O
"CAPA: %s\n"	pointer
,	O
capa	pointer
?	O
capa	pointer
:	O
""	pointer
)	O
;	O
}	O
mu_iterator_destroy	function
(	O
&	O
iterator	pointer
)	O
;	O
}	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
com_login	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
status	int
;	O
char	O
*	O
pwd	pointer
,	O
*	O
passbuf	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
imap	pointer
)	O
{	O
mu_error	function
(	O
_	O
(	O
"you need to connect first"	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
argc	long
==	O
2	int
)	O
{	O
if	O
(	O
!	O
mutool_shell_interactive	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"login: password required"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
status	int
=	O
mu_getpass	function
(	O
mu_strin	pointer
,	O
mu_strout	pointer
,	O
_	O
(	O
"Password:"	pointer
)	O
,	O
&	O
passbuf	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
pwd	pointer
=	O
passbuf	pointer
;	O
}	O
else	O
pwd	pointer
=	O
argv	pointer
[	O
2	int
]	O
;	O
status	int
=	O
mu_imap_login	function
(	O
imap	pointer
,	O
argv	pointer
[	O
1	int
]	O
,	O
pwd	pointer
)	O
;	O
memset	function
(	O
pwd	pointer
,	O
0	int
,	O
strlen	function
(	O
pwd	pointer
)	O
)	O
;	O
free	function
(	O
passbuf	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
free	function
(	O
username	pointer
)	O
;	O
username	pointer
=	O
mu_strdup	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
imap_prompt_env	function
(	O
)	O
;	O
}	O
else	O
report_failure	function
(	O
"login"	pointer
,	O
status	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
com_id	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
mu_assoc_t	pointer
assoc	pointer
;	O
char	O
*	O
test	pointer
=	O
NULL	O
;	O
int	O
status	int
;	O
argv	pointer
++	O
;	O
if	O
(	O
argv	pointer
[	O
0	int
]	O
&&	O
strcmp	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
"-test"	pointer
)	O
==	O
0	int
)	O
{	O
argv	pointer
++	O
;	O
if	O
(	O
argv	pointer
[	O
0	int
]	O
==	O
NULL	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"id -test requires an argument"	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
test	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
argv	pointer
++	O
;	O
}	O
status	int
=	O
mu_imap_id	function
(	O
imap	pointer
,	O
argv	pointer
+	O
1	int
,	O
&	O
assoc	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
if	O
(	O
test	pointer
)	O
{	O
char	O
*	O
val	array
=	O
mu_assoc_get	function
(	O
assoc	pointer
,	O
test	pointer
)	O
;	O
if	O
(	O
val	array
)	O
{	O
mu_printf	function
(	O
"%s: %s\n"	pointer
,	O
test	pointer
,	O
val	array
)	O
;	O
}	O
else	O
mu_printf	function
(	O
_	O
(	O
"%s is not set\n"	pointer
)	O
,	O
test	pointer
)	O
;	O
}	O
else	O
{	O
mu_iterator_t	pointer
itr	pointer
;	O
mu_assoc_get_iterator	function
(	O
assoc	pointer
,	O
&	O
itr	pointer
)	O
;	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
char	O
*	O
key	pointer
;	O
char	O
*	O
val	array
;	O
mu_iterator_current_kv	function
(	O
itr	pointer
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
key	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
val	array
)	O
;	O
mu_printf	function
(	O
"ID: %s %s\n"	pointer
,	O
key	pointer
,	O
val	array
)	O
;	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
}	O
mu_assoc_destroy	function
(	O
&	O
assoc	pointer
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
void	O
print_imap_stats	function
(	O
struct	O
mu_imap_stat	struct
*	O
st	pointer
)	O
{	O
if	O
(	O
st	pointer
->	O
flags	int
&	O
MU_IMAP_STAT_DEFINED_FLAGS	int
)	O
{	O
mu_printf	function
(	O
_	O
(	O
"Flags defined: "	pointer
)	O
)	O
;	O
mu_imap_format_flags	function
(	O
mu_strout	pointer
,	O
st	pointer
->	O
defined_flags	int
,	O
0	int
)	O
;	O
mu_printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
if	O
(	O
st	pointer
->	O
flags	int
&	O
MU_IMAP_STAT_PERMANENT_FLAGS	int
)	O
{	O
mu_printf	function
(	O
_	O
(	O
"Flags permanent: "	pointer
)	O
)	O
;	O
mu_imap_format_flags	function
(	O
mu_strout	pointer
,	O
st	pointer
->	O
permanent_flags	int
,	O
0	int
)	O
;	O
mu_printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
if	O
(	O
st	pointer
->	O
flags	int
&	O
MU_IMAP_STAT_MESSAGE_COUNT	int
)	O
mu_printf	function
(	O
_	O
(	O
"Total messages: %lu\n"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
st	pointer
->	O
message_count	long
)	O
;	O
if	O
(	O
st	pointer
->	O
flags	int
&	O
MU_IMAP_STAT_RECENT_COUNT	int
)	O
mu_printf	function
(	O
_	O
(	O
"Recent messages: %lu\n"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
st	pointer
->	O
recent_count	long
)	O
;	O
if	O
(	O
st	pointer
->	O
flags	int
&	O
MU_IMAP_STAT_FIRST_UNSEEN	int
)	O
mu_printf	function
(	O
_	O
(	O
"First unseen message: %lu\n"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
st	pointer
->	O
first_unseen	long
)	O
;	O
if	O
(	O
st	pointer
->	O
flags	int
&	O
MU_IMAP_STAT_UIDNEXT	int
)	O
mu_printf	function
(	O
_	O
(	O
"Next UID: %lu\n"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
st	pointer
->	O
uidnext	long
)	O
;	O
if	O
(	O
st	pointer
->	O
flags	int
&	O
MU_IMAP_STAT_UIDVALIDITY	int
)	O
mu_printf	function
(	O
_	O
(	O
"UID validity: %lu\n"	pointer
)	O
,	O
st	pointer
->	O
uidvalidity	long
)	O
;	O
}	O
static	O
int	O
select_mbox	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
writable	int
)	O
{	O
int	O
status	int
;	O
struct	O
mu_imap_stat	struct
st	pointer
;	O
status	int
=	O
mu_imap_select	function
(	O
imap	pointer
,	O
argv	pointer
[	O
1	int
]	O
,	O
writable	int
,	O
&	O
st	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
print_imap_stats	function
(	O
&	O
st	pointer
)	O
;	O
imap_prompt_env	function
(	O
)	O
;	O
}	O
else	O
report_failure	function
(	O
"select"	pointer
,	O
status	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
com_select	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
return	O
select_mbox	function
(	O
argc	long
,	O
argv	pointer
,	O
1	int
)	O
;	O
}	O
static	O
int	O
com_examine	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
return	O
select_mbox	function
(	O
argc	long
,	O
argv	pointer
,	O
0	int
)	O
;	O
}	O
static	O
int	O
com_status	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
struct	O
mu_imap_stat	struct
st	pointer
;	O
int	O
i	long
,	O
flag	int
;	O
int	O
status	int
;	O
st	pointer
.	O
flags	int
=	O
0	int
;	O
for	O
(	O
i	long
=	O
2	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
mu_kwd_xlat_name_ci	function
(	O
_mu_imap_status_name_table	array
,	O
argv	pointer
[	O
i	long
]	O
,	O
&	O
flag	int
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"unknown data item: %s"	pointer
)	O
,	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
return	O
0	int
;	O
}	O
st	pointer
.	O
flags	int
|=	O
flag	int
;	O
}	O
status	int
=	O
mu_imap_status	function
(	O
imap	pointer
,	O
argv	pointer
[	O
1	int
]	O
,	O
&	O
st	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
print_imap_stats	function
(	O
&	O
st	pointer
)	O
;	O
}	O
else	O
report_failure	function
(	O
"status"	pointer
,	O
status	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
com_noop	function
(	O
int	O
argc	long
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
argv	pointer
MU_ARG_UNUSED	O
)	O
{	O
int	O
status	int
=	O
mu_imap_noop	function
(	O
imap	pointer
)	O
;	O
if	O
(	O
status	int
)	O
report_failure	function
(	O
"noop"	pointer
,	O
status	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
com_check	function
(	O
int	O
argc	long
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
argv	pointer
MU_ARG_UNUSED	O
)	O
{	O
int	O
status	int
=	O
mu_imap_check	function
(	O
imap	pointer
)	O
;	O
if	O
(	O
status	int
)	O
report_failure	function
(	O
"check"	pointer
,	O
status	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
com_fetch	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
mu_stream_t	pointer
out	pointer
=	O
mutool_open_pager	function
(	O
)	O
;	O
mu_msgset_t	pointer
msgset	pointer
=	O
parse_msgset	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
if	O
(	O
msgset	pointer
)	O
{	O
int	O
status	int
;	O
mu_imap_register_callback_function	function
(	O
imap	pointer
,	O
MU_IMAP_CB_FETCH	int
,	O
imap_fetch_callback	function
,	O
out	pointer
)	O
;	O
status	int
=	O
mu_imap_fetch	function
(	O
imap	pointer
,	O
uid_mode	int
,	O
msgset	pointer
,	O
argv	pointer
[	O
2	int
]	O
)	O
;	O
mu_stream_destroy	function
(	O
&	O
out	pointer
)	O
;	O
mu_imap_register_callback_function	function
(	O
imap	pointer
,	O
MU_IMAP_CB_FETCH	int
,	O
imap_fetch_callback	function
,	O
mu_strout	pointer
)	O
;	O
mu_msgset_free	function
(	O
msgset	pointer
)	O
;	O
if	O
(	O
status	int
)	O
report_failure	function
(	O
"fetch"	pointer
,	O
status	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
com_store	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
mu_msgset_t	pointer
msgset	pointer
=	O
parse_msgset	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
if	O
(	O
msgset	pointer
)	O
{	O
int	O
status	int
=	O
mu_imap_store	function
(	O
imap	pointer
,	O
uid_mode	int
,	O
msgset	pointer
,	O
argv	pointer
[	O
2	int
]	O
)	O
;	O
if	O
(	O
status	int
)	O
report_failure	function
(	O
"store"	pointer
,	O
status	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
com_close	function
(	O
int	O
argc	long
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
argv	pointer
MU_ARG_UNUSED	O
)	O
{	O
int	O
status	int
=	O
mu_imap_close	function
(	O
imap	pointer
)	O
;	O
if	O
(	O
status	int
)	O
report_failure	function
(	O
"close"	pointer
,	O
status	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
com_unselect	function
(	O
int	O
argc	long
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
argv	pointer
MU_ARG_UNUSED	O
)	O
{	O
int	O
status	int
=	O
mu_imap_noop	function
(	O
imap	pointer
)	O
;	O
if	O
(	O
status	int
)	O
report_failure	function
(	O
"unselect"	pointer
,	O
status	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
com_delete	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
status	int
=	O
mu_imap_delete	function
(	O
imap	pointer
,	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
if	O
(	O
status	int
)	O
report_failure	function
(	O
"delete"	pointer
,	O
status	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
com_rename	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
status	int
=	O
mu_imap_rename	function
(	O
imap	pointer
,	O
argv	pointer
[	O
1	int
]	O
,	O
argv	pointer
[	O
2	int
]	O
)	O
;	O
if	O
(	O
status	int
)	O
report_failure	function
(	O
"rename"	pointer
,	O
status	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
com_expunge	function
(	O
int	O
argc	long
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
argv	pointer
MU_ARG_UNUSED	O
)	O
{	O
int	O
status	int
=	O
mu_imap_expunge	function
(	O
imap	pointer
)	O
;	O
if	O
(	O
status	int
)	O
report_failure	function
(	O
"expunge"	pointer
,	O
status	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
com_create	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
status	int
=	O
mu_imap_mailbox_create	function
(	O
imap	pointer
,	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
if	O
(	O
status	int
)	O
report_failure	function
(	O
"create"	pointer
,	O
status	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
com_subscribe	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
status	int
=	O
mu_imap_subscribe	function
(	O
imap	pointer
,	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
if	O
(	O
status	int
)	O
report_failure	function
(	O
"subscribe"	pointer
,	O
status	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
com_unsubscribe	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
status	int
=	O
mu_imap_unsubscribe	function
(	O
imap	pointer
,	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
if	O
(	O
status	int
)	O
report_failure	function
(	O
"unsubscribe"	pointer
,	O
status	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
com_append	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
struct	O
tm	struct
tmbuf	struct
,	O
*	O
tm	struct
=	O
NULL	O
;	O
struct	O
mu_timezone	struct
tzbuf	struct
,	O
*	O
tz	pointer
=	O
NULL	O
;	O
int	O
flags	int
=	O
0	int
;	O
mu_stream_t	pointer
stream	pointer
;	O
int	O
rc	int
,	O
i	long
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"-time"	pointer
)	O
==	O
0	int
)	O
{	O
char	O
*	O
p	pointer
;	O
if	O
(	O
++	O
i	long
==	O
argc	long
)	O
{	O
mu_error	function
(	O
_	O
(	O
"-time requires argument"	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
rc	int
=	O
mu_scan_datetime	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
MU_DATETIME_INTERNALDATE	pointer
,	O
&	O
tmbuf	struct
,	O
&	O
tzbuf	struct
,	O
&	O
p	pointer
)	O
;	O
if	O
(	O
rc	int
||	O
*	O
p	pointer
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot parse time"	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
tm	struct
=	O
&	O
tmbuf	struct
;	O
tz	pointer
=	O
&	O
tzbuf	struct
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"-flag"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
++	O
i	long
==	O
argc	long
)	O
{	O
mu_error	function
(	O
_	O
(	O
"-flag requires argument"	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
mu_imap_flag_to_attribute	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
&	O
flags	int
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"unrecognized flag: %s"	pointer
)	O
,	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
return	O
0	int
;	O
}	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"--"	pointer
)	O
==	O
0	int
)	O
{	O
i	long
++	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
argv	pointer
[	O
i	long
]	O
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"unrecognized option: %s"	pointer
)	O
,	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
return	O
0	int
;	O
}	O
else	O
break	O
;	O
}	O
if	O
(	O
argc	long
-	O
i	long
!=	O
2	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"wrong number of arguments"	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
rc	int
=	O
mu_file_stream_create	function
(	O
&	O
stream	pointer
,	O
argv	pointer
[	O
i	long
+	O
1	int
]	O
,	O
MU_STREAM_READ	int
|	O
MU_STREAM_SEEK	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot open file %s: %s"	pointer
)	O
,	O
argv	pointer
[	O
i	long
+	O
1	int
]	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
0	int
;	O
}	O
rc	int
=	O
mu_imap_append_stream	function
(	O
imap	pointer
,	O
argv	pointer
[	O
i	long
]	O
,	O
flags	int
,	O
tm	struct
,	O
tz	pointer
,	O
stream	pointer
)	O
;	O
mu_stream_unref	function
(	O
stream	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
report_failure	function
(	O
"append"	pointer
,	O
rc	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
com_copy	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
mu_msgset_t	pointer
msgset	pointer
=	O
parse_msgset	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
if	O
(	O
msgset	pointer
)	O
{	O
int	O
status	int
=	O
mu_imap_copy	function
(	O
imap	pointer
,	O
uid_mode	int
,	O
msgset	pointer
,	O
argv	pointer
[	O
2	int
]	O
)	O
;	O
mu_msgset_free	function
(	O
msgset	pointer
)	O
;	O
if	O
(	O
status	int
)	O
report_failure	function
(	O
"copy"	pointer
,	O
status	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
com_search	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
mu_msgset_t	pointer
mset	pointer
;	O
size_t	long
count	long
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_imap_search	function
(	O
imap	pointer
,	O
uid_mode	int
,	O
argv	pointer
[	O
1	int
]	O
,	O
&	O
mset	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
report_failure	function
(	O
"search"	pointer
,	O
rc	int
)	O
;	O
return	O
0	int
;	O
}	O
rc	int
=	O
mu_msgset_count	function
(	O
mset	pointer
,	O
&	O
count	long
)	O
;	O
if	O
(	O
rc	int
==	O
EINVAL	int
||	O
count	long
==	O
0	int
)	O
{	O
mu_printf	function
(	O
"%s\n"	pointer
,	O
_	O
(	O
"no matches"	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
mu_printf	function
(	O
"%lu matches:"	pointer
,	O
(	O
unsigned	O
long	O
)	O
count	long
)	O
;	O
mu_msgset_imap_print	function
(	O
mu_strout	pointer
,	O
mset	pointer
)	O
;	O
mu_printf	function
(	O
"\n"	pointer
)	O
;	O
mu_msgset_free	function
(	O
mset	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
print_list_item	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
mu_list_response	struct
*	O
resp	pointer
=	O
item	pointer
;	O
mu_stream_t	pointer
out	pointer
=	O
data	pointer
;	O
mu_stream_printf	function
(	O
out	pointer
,	O
"%c%c %c %4d %s\n"	pointer
,	O
(	O
resp	pointer
->	O
type	int
&	O
MU_FOLDER_ATTRIBUTE_DIRECTORY	int
)	O
?	O
'd'	O
:	O
'-'	O
,	O
(	O
resp	pointer
->	O
type	int
&	O
MU_FOLDER_ATTRIBUTE_FILE	int
)	O
?	O
'f'	O
:	O
'-'	O
,	O
resp	pointer
->	O
separator	int
?	O
resp	pointer
->	O
separator	int
:	O
MU_HIERARCHY_DELIMITER	char
,	O
resp	pointer
->	O
depth	int
,	O
resp	pointer
->	O
name	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
com_list	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
mu_list_t	pointer
list	pointer
;	O
int	O
rc	int
;	O
mu_stream_t	pointer
out	pointer
;	O
rc	int
=	O
mu_imap_list_new	function
(	O
imap	pointer
,	O
argv	pointer
[	O
1	int
]	O
,	O
argv	pointer
[	O
2	int
]	O
,	O
&	O
list	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
report_failure	function
(	O
"list"	pointer
,	O
rc	int
)	O
;	O
return	O
0	int
;	O
}	O
out	pointer
=	O
mutool_open_pager	function
(	O
)	O
;	O
mu_list_foreach	function
(	O
list	pointer
,	O
print_list_item	function
,	O
out	pointer
)	O
;	O
mu_stream_unref	function
(	O
out	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
com_lsub	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
mu_list_t	pointer
list	pointer
;	O
int	O
rc	int
;	O
mu_stream_t	pointer
out	pointer
;	O
rc	int
=	O
mu_imap_lsub_new	function
(	O
imap	pointer
,	O
argv	pointer
[	O
1	int
]	O
,	O
argv	pointer
[	O
2	int
]	O
,	O
&	O
list	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
report_failure	function
(	O
"lsub"	pointer
,	O
rc	int
)	O
;	O
return	O
0	int
;	O
}	O
out	pointer
=	O
mutool_open_pager	function
(	O
)	O
;	O
mu_list_foreach	function
(	O
list	pointer
,	O
print_list_item	function
,	O
out	pointer
)	O
;	O
mu_stream_unref	function
(	O
out	pointer
)	O
;	O
return	O
0	int
;	O
}	O
struct	O
mutool_command	struct
imap_comtab	array
[	O
]	O
=	O
{	O
{	O
"capability"	pointer
,	O
1	int
,	O
-	O
1	int
,	O
0	int
,	O
com_capability	function
,	O
N_	O
(	O
"[-reread] [NAME...]"	pointer
)	O
,	O
N_	O
(	O
"list server capabilities"	pointer
)	O
}	O
,	O
{	O
"verbose"	pointer
,	O
1	int
,	O
4	int
,	O
0	int
,	O
com_verbose	function
,	O
"[on|off|mask|unmask] [secure [payload]]"	pointer
,	O
N_	O
(	O
"control the protocol tracing"	pointer
)	O
}	O
,	O
{	O
"connect"	pointer
,	O
1	int
,	O
4	int
,	O
0	int
,	O
com_connect	function
,	O
N_	O
(	O
"[-tls] HOSTNAME [PORT]"	pointer
)	O
,	O
N_	O
(	O
"open connection"	pointer
)	O
}	O
,	O
{	O
"disconnect"	pointer
,	O
1	int
,	O
1	int
,	O
0	int
,	O
com_disconnect	function
,	O
NULL	O
,	O
N_	O
(	O
"close connection"	pointer
)	O
}	O
,	O
{	O
"starttls"	pointer
,	O
1	int
,	O
1	int
,	O
0	int
,	O
com_starttls	function
,	O
NULL	O
,	O
N_	O
(	O
"Establish TLS encrypted channel"	pointer
)	O
}	O
,	O
{	O
"login"	pointer
,	O
2	int
,	O
3	int
,	O
0	int
,	O
com_login	function
,	O
N_	O
(	O
"USER [PASS]"	pointer
)	O
,	O
N_	O
(	O
"login to the server"	pointer
)	O
}	O
,	O
{	O
"logout"	pointer
,	O
1	int
,	O
1	int
,	O
0	int
,	O
com_logout	function
,	O
NULL	O
,	O
N_	O
(	O
"quit imap session"	pointer
)	O
}	O
,	O
{	O
"id"	pointer
,	O
1	int
,	O
-	O
1	int
,	O
0	int
,	O
com_id	function
,	O
N_	O
(	O
"[-test KW] [ARG [ARG...]]"	pointer
)	O
,	O
N_	O
(	O
"send ID command"	pointer
)	O
}	O
,	O
{	O
"noop"	pointer
,	O
1	int
,	O
1	int
,	O
0	int
,	O
com_noop	function
,	O
NULL	O
,	O
N_	O
(	O
"no operation (keepalive)"	pointer
)	O
}	O
,	O
{	O
"check"	pointer
,	O
1	int
,	O
1	int
,	O
0	int
,	O
com_check	function
,	O
NULL	O
,	O
N_	O
(	O
"request a server checkpoint"	pointer
)	O
}	O
,	O
{	O
"select"	pointer
,	O
1	int
,	O
2	int
,	O
0	int
,	O
com_select	function
,	O
N_	O
(	O
"[MBOX]"	pointer
)	O
,	O
N_	O
(	O
"select a mailbox"	pointer
)	O
}	O
,	O
{	O
"examine"	pointer
,	O
1	int
,	O
2	int
,	O
0	int
,	O
com_examine	function
,	O
N_	O
(	O
"[MBOX]"	pointer
)	O
,	O
N_	O
(	O
"examine a mailbox"	pointer
)	O
}	O
,	O
{	O
"status"	pointer
,	O
3	int
,	O
-	O
1	int
,	O
0	int
,	O
com_status	function
,	O
N_	O
(	O
"MBOX KW [KW...]"	pointer
)	O
,	O
N_	O
(	O
"get mailbox status"	pointer
)	O
}	O
,	O
{	O
"fetch"	pointer
,	O
3	int
,	O
3	int
,	O
CMD_COALESCE_EXTRA_ARGS	int
,	O
com_fetch	function
,	O
N_	O
(	O
"MSGSET ITEMS"	pointer
)	O
,	O
N_	O
(	O
"fetch message data"	pointer
)	O
}	O
,	O
{	O
"store"	pointer
,	O
3	int
,	O
3	int
,	O
CMD_COALESCE_EXTRA_ARGS	int
,	O
com_store	function
,	O
N_	O
(	O
"MSGSET ITEMS"	pointer
)	O
,	O
N_	O
(	O
"alter mailbox data"	pointer
)	O
}	O
,	O
{	O
"close"	pointer
,	O
1	int
,	O
1	int
,	O
0	int
,	O
com_close	function
,	O
NULL	O
,	O
N_	O
(	O
"close the mailbox (with expunge)"	pointer
)	O
}	O
,	O
{	O
"unselect"	pointer
,	O
1	int
,	O
1	int
,	O
0	int
,	O
com_unselect	function
,	O
NULL	O
,	O
N_	O
(	O
"close the mailbox (without expunge)"	pointer
)	O
}	O
,	O
{	O
"delete"	pointer
,	O
2	int
,	O
2	int
,	O
0	int
,	O
com_delete	function
,	O
N_	O
(	O
"MAILBOX"	pointer
)	O
,	O
N_	O
(	O
"delete the mailbox"	pointer
)	O
}	O
,	O
{	O
"rename"	pointer
,	O
3	int
,	O
3	int
,	O
0	int
,	O
com_rename	function
,	O
N_	O
(	O
"OLD-NAME NEW-NAME"	pointer
)	O
,	O
N_	O
(	O
"rename existing mailbox"	pointer
)	O
}	O
,	O
{	O
"expunge"	pointer
,	O
1	int
,	O
1	int
,	O
0	int
,	O
com_expunge	function
,	O
NULL	O
,	O
N_	O
(	O
"permanently remove messages marked for deletion"	pointer
)	O
}	O
,	O
{	O
"create"	pointer
,	O
2	int
,	O
2	int
,	O
0	int
,	O
com_create	function
,	O
N_	O
(	O
"MAILBOX"	pointer
)	O
,	O
N_	O
(	O
"create new mailbox"	pointer
)	O
}	O
,	O
{	O
"append"	pointer
,	O
3	int
,	O
-	O
1	int
,	O
0	int
,	O
com_append	function
,	O
N_	O
(	O
"[-time DATETIME] [-flag FLAG] MAILBOX FILE"	pointer
)	O
,	O
N_	O
(	O
"append message text from FILE to MAILBOX"	pointer
)	O
}	O
,	O
{	O
"copy"	pointer
,	O
3	int
,	O
3	int
,	O
0	int
,	O
com_copy	function
,	O
N_	O
(	O
"MSGSET MAILBOX"	pointer
)	O
,	O
N_	O
(	O
"Copy messages from MSGSET to MAILBOX"	pointer
)	O
}	O
,	O
{	O
"list"	pointer
,	O
3	int
,	O
3	int
,	O
0	int
,	O
com_list	function
,	O
N_	O
(	O
"REF MBOX"	pointer
)	O
,	O
N_	O
(	O
"List matching mailboxes"	pointer
)	O
}	O
,	O
{	O
"lsub"	pointer
,	O
3	int
,	O
3	int
,	O
0	int
,	O
com_lsub	function
,	O
N_	O
(	O
"REF MBOX"	pointer
)	O
,	O
N_	O
(	O
"List subscribed mailboxes"	pointer
)	O
}	O
,	O
{	O
"subscribe"	pointer
,	O
2	int
,	O
2	int
,	O
0	int
,	O
com_subscribe	function
,	O
N_	O
(	O
"MBOX"	pointer
)	O
,	O
N_	O
(	O
"Subscribe to a mailbox"	pointer
)	O
}	O
,	O
{	O
"unsubscribe"	pointer
,	O
2	int
,	O
2	int
,	O
0	int
,	O
com_unsubscribe	function
,	O
N_	O
(	O
"MBOX"	pointer
)	O
,	O
N_	O
(	O
"Remove mailbox from subscription list"	pointer
)	O
}	O
,	O
{	O
"uid"	pointer
,	O
1	int
,	O
2	int
,	O
0	int
,	O
com_uid	function
,	O
N_	O
(	O
"[on|off]"	pointer
)	O
,	O
N_	O
(	O
"control UID mode"	pointer
)	O
}	O
,	O
{	O
"search"	pointer
,	O
2	int
,	O
2	int
,	O
CMD_COALESCE_EXTRA_ARGS	int
,	O
com_search	function
,	O
N_	O
(	O
"args..."	pointer
)	O
,	O
N_	O
(	O
"search the mailbox"	pointer
)	O
}	O
,	O
{	O
"quit"	pointer
,	O
1	int
,	O
1	int
,	O
0	int
,	O
com_logout	function
,	O
NULL	O
,	O
N_	O
(	O
"same as `logout'"	pointer
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
int	O
main	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
mu_action_getopt	function
(	O
&	O
argc	long
,	O
&	O
argv	pointer
,	O
NULL	O
,	O
imap_docstring	array
,	O
NULL	O
)	O
;	O
if	O
(	O
argc	long
)	O
{	O
mu_error	function
(	O
_	O
(	O
"too many arguments"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
mutool_shell_prompt	pointer
=	O
mu_strdup	function
(	O
"imap> "	pointer
)	O
;	O
imap_prompt_env	function
(	O
)	O
;	O
mutool_shell	function
(	O
"imap"	pointer
,	O
imap_comtab	array
)	O
;	O
return	O
0	int
;	O
}	O
