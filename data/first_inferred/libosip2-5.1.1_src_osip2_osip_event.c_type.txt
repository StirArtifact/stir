osip_event_t	struct
*	O
osip_parse	function
(	O
const	O
char	O
*	O
buf	pointer
,	O
size_t	long
length	long
)	O
{	O
int	O
i	int
;	O
osip_event_t	struct
*	O
se	pointer
=	O
__osip_event_new	function
(	O
UNKNOWN_EVT	int
,	O
0	int
)	O
;	O
if	O
(	O
se	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
i	int
=	O
osip_message_init	function
(	O
&	O
(	O
se	pointer
->	O
sip	pointer
)	O
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_free	O
(	O
se	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
osip_message_parse	function
(	O
se	pointer
->	O
sip	pointer
,	O
buf	pointer
,	O
length	long
)	O
!=	O
0	int
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_ERROR	O
,	O
NULL	O
,	O
"could not parse message\n"	pointer
)	O
)	O
;	O
osip_message_free	function
(	O
se	pointer
->	O
sip	pointer
)	O
;	O
osip_free	O
(	O
se	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
else	O
{	O
if	O
(	O
se	pointer
->	O
sip	pointer
->	O
call_id	pointer
!=	O
NULL	O
&&	O
se	pointer
->	O
sip	pointer
->	O
call_id	pointer
->	O
number	pointer
!=	O
NULL	O
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_INFO3	O
,	O
NULL	O
,	O
"MESSAGE REC. CALLID:%s\n"	pointer
,	O
se	pointer
->	O
sip	pointer
->	O
call_id	pointer
->	O
number	pointer
)	O
)	O
;	O
}	O
if	O
(	O
MSG_IS_REQUEST	O
(	O
se	pointer
->	O
sip	pointer
)	O
)	O
{	O
if	O
(	O
se	pointer
->	O
sip	pointer
->	O
sip_method	pointer
==	O
NULL	O
||	O
se	pointer
->	O
sip	pointer
->	O
req_uri	pointer
==	O
NULL	O
)	O
{	O
osip_message_free	function
(	O
se	pointer
->	O
sip	pointer
)	O
;	O
osip_free	O
(	O
se	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
se	pointer
->	O
type	pointer
=	O
evt_set_type_incoming_sipmessage	function
(	O
se	pointer
->	O
sip	pointer
)	O
;	O
return	O
se	pointer
;	O
}	O
}	O
osip_event_t	struct
*	O
__osip_event_new	function
(	O
type_t	enum
type	pointer
,	O
int	O
transactionid	int
)	O
{	O
osip_event_t	struct
*	O
sipevent	pointer
;	O
sipevent	pointer
=	O
(	O
osip_event_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
osip_event_t	struct
)	O
)	O
;	O
if	O
(	O
sipevent	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
sipevent	pointer
->	O
type	pointer
=	O
type	pointer
;	O
sipevent	pointer
->	O
sip	pointer
=	O
NULL	O
;	O
sipevent	pointer
->	O
transactionid	int
=	O
transactionid	int
;	O
return	O
sipevent	pointer
;	O
}	O
osip_event_t	struct
*	O
osip_new_outgoing_sipmessage	function
(	O
osip_message_t	struct
*	O
sip	pointer
)	O
{	O
osip_event_t	struct
*	O
sipevent	pointer
;	O
if	O
(	O
sip	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
MSG_IS_REQUEST	O
(	O
sip	pointer
)	O
)	O
{	O
if	O
(	O
sip	pointer
->	O
sip_method	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
sip	pointer
->	O
req_uri	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
}	O
sipevent	pointer
=	O
(	O
osip_event_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
osip_event_t	struct
)	O
)	O
;	O
if	O
(	O
sipevent	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
sipevent	pointer
->	O
sip	pointer
=	O
sip	pointer
;	O
sipevent	pointer
->	O
type	pointer
=	O
evt_set_type_outgoing_sipmessage	function
(	O
sip	pointer
)	O
;	O
sipevent	pointer
->	O
transactionid	int
=	O
0	int
;	O
return	O
sipevent	pointer
;	O
}	O
type_t	enum
evt_set_type_incoming_sipmessage	function
(	O
osip_message_t	struct
*	O
sip	pointer
)	O
{	O
if	O
(	O
MSG_IS_REQUEST	O
(	O
sip	pointer
)	O
)	O
{	O
if	O
(	O
MSG_IS_INVITE	O
(	O
sip	pointer
)	O
)	O
return	O
RCV_REQINVITE	int
;	O
else	O
if	O
(	O
MSG_IS_ACK	O
(	O
sip	pointer
)	O
)	O
return	O
RCV_REQACK	int
;	O
return	O
RCV_REQUEST	int
;	O
}	O
else	O
{	O
if	O
(	O
MSG_IS_STATUS_1XX	O
(	O
sip	pointer
)	O
)	O
return	O
RCV_STATUS_1XX	int
;	O
else	O
if	O
(	O
MSG_IS_STATUS_2XX	O
(	O
sip	pointer
)	O
)	O
return	O
RCV_STATUS_2XX	int
;	O
return	O
RCV_STATUS_3456XX	int
;	O
}	O
}	O
type_t	enum
evt_set_type_outgoing_sipmessage	function
(	O
osip_message_t	struct
*	O
sip	pointer
)	O
{	O
if	O
(	O
MSG_IS_REQUEST	O
(	O
sip	pointer
)	O
)	O
{	O
if	O
(	O
MSG_IS_INVITE	O
(	O
sip	pointer
)	O
)	O
return	O
SND_REQINVITE	int
;	O
if	O
(	O
MSG_IS_ACK	O
(	O
sip	pointer
)	O
)	O
return	O
SND_REQACK	int
;	O
return	O
SND_REQUEST	int
;	O
}	O
else	O
{	O
if	O
(	O
MSG_IS_STATUS_1XX	O
(	O
sip	pointer
)	O
)	O
return	O
SND_STATUS_1XX	int
;	O
else	O
if	O
(	O
MSG_IS_STATUS_2XX	O
(	O
sip	pointer
)	O
)	O
return	O
SND_STATUS_2XX	int
;	O
return	O
SND_STATUS_3456XX	int
;	O
}	O
}	O
void	O
osip_event_free	function
(	O
osip_event_t	struct
*	O
event	pointer
)	O
{	O
if	O
(	O
event	pointer
!=	O
NULL	O
)	O
{	O
osip_message_free	function
(	O
event	pointer
->	O
sip	pointer
)	O
;	O
osip_free	O
(	O
event	pointer
)	O
;	O
}	O
}	O
