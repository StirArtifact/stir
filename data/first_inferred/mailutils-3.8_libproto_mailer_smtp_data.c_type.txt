int	O
_mu_smtp_data_begin	function
(	O
mu_smtp_t	pointer
smtp	pointer
)	O
{	O
int	O
status	int
;	O
status	int
=	O
mu_smtp_write	function
(	O
smtp	pointer
,	O
"DATA\r\n"	pointer
)	O
;	O
MU_SMTP_CHECK_ERROR	O
(	O
smtp	pointer
,	O
status	int
)	O
;	O
status	int
=	O
mu_smtp_response	function
(	O
smtp	pointer
)	O
;	O
MU_SMTP_CHECK_ERROR	O
(	O
smtp	pointer
,	O
status	int
)	O
;	O
if	O
(	O
smtp	pointer
->	O
replcode	array
[	O
0	int
]	O
!=	O
'3'	O
)	O
return	O
MU_ERR_REPLY	O
;	O
if	O
(	O
mu_smtp_trace_mask	function
(	O
smtp	pointer
,	O
MU_SMTP_TRACE_QRY	int
,	O
MU_XSCRIPT_PAYLOAD	int
)	O
)	O
_mu_smtp_xscript_level	function
(	O
smtp	pointer
,	O
MU_XSCRIPT_PAYLOAD	int
)	O
;	O
smtp	pointer
->	O
savebuf	struct
.	O
type	int
=	O
MU_TRANSPORT_OUTPUT	int
;	O
if	O
(	O
mu_stream_ioctl	function
(	O
smtp	pointer
->	O
carrier	pointer
,	O
MU_IOCTL_TRANSPORT_BUFFER	int
,	O
MU_IOCTL_OP_GET	int
,	O
&	O
smtp	pointer
->	O
savebuf	struct
)	O
==	O
0	int
)	O
{	O
struct	O
mu_buffer_query	struct
newbuf	struct
;	O
newbuf	struct
.	O
type	int
=	O
MU_TRANSPORT_OUTPUT	int
;	O
newbuf	struct
.	O
buftype	enum
=	O
mu_buffer_full	int
;	O
newbuf	struct
.	O
bufsize	long
=	O
64	int
*	O
1024	int
;	O
if	O
(	O
mu_stream_ioctl	function
(	O
smtp	pointer
->	O
carrier	pointer
,	O
MU_IOCTL_TRANSPORT_BUFFER	int
,	O
MU_IOCTL_OP_SET	int
,	O
&	O
newbuf	struct
)	O
==	O
0	int
)	O
MU_SMTP_FSET	O
(	O
smtp	pointer
,	O
_MU_SMTP_SAVEBUF	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
_mu_smtp_data_end	function
(	O
mu_smtp_t	pointer
smtp	pointer
)	O
{	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
MU_SMTP_FISSET	O
(	O
smtp	pointer
,	O
_MU_SMTP_SAVEBUF	int
)	O
)	O
{	O
status	int
=	O
mu_stream_ioctl	function
(	O
smtp	pointer
->	O
carrier	pointer
,	O
MU_IOCTL_TRANSPORT_BUFFER	int
,	O
MU_IOCTL_OP_SET	int
,	O
&	O
smtp	pointer
->	O
savebuf	struct
)	O
;	O
if	O
(	O
status	int
)	O
mu_diag_output	function
(	O
MU_DIAG_NOTICE	O
,	O
"failed to restore buffer state on SMTP carrier: %s"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
}	O
_mu_smtp_xscript_level	function
(	O
smtp	pointer
,	O
MU_XSCRIPT_NORMAL	int
)	O
;	O
smtp	pointer
->	O
state	pointer
=	O
MU_SMTP_DOT	int
;	O
return	O
status	int
;	O
}	O
static	O
void	O
_smtp_event_cb	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
int	O
code	int
,	O
unsigned	O
long	O
lval	long
,	O
void	O
*	O
pval	pointer
)	O
{	O
mu_smtp_t	pointer
smtp	pointer
=	O
str	pointer
->	O
event_cb_data	pointer
;	O
_mu_smtp_data_end	function
(	O
smtp	pointer
)	O
;	O
}	O
int	O
mu_smtp_data	function
(	O
mu_smtp_t	pointer
smtp	pointer
,	O
mu_stream_t	pointer
*	O
pstream	pointer
)	O
{	O
int	O
status	int
;	O
mu_stream_t	pointer
input	pointer
;	O
if	O
(	O
!	O
smtp	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
MU_SMTP_FISSET	O
(	O
smtp	pointer
,	O
_MU_SMTP_ERR	int
)	O
)	O
return	O
MU_ERR_FAILURE	O
;	O
if	O
(	O
smtp	pointer
->	O
state	pointer
!=	O
MU_SMTP_MORE	int
)	O
return	O
MU_ERR_SEQ	O
;	O
status	int
=	O
_mu_smtp_data_begin	function
(	O
smtp	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_filter_create	function
(	O
&	O
input	pointer
,	O
smtp	pointer
->	O
carrier	pointer
,	O
"CRLFDOT"	pointer
,	O
MU_FILTER_ENCODE	int
,	O
MU_STREAM_WRITE	int
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
input	pointer
->	O
event_cb	pointer
=	O
_smtp_event_cb	function
;	O
input	pointer
->	O
event_cb_data	pointer
=	O
smtp	pointer
;	O
input	pointer
->	O
event_mask	int
=	O
_MU_STR_EVMASK	O
(	O
_MU_STR_EVENT_CLOSE	int
)	O
;	O
*	O
pstream	pointer
=	O
input	pointer
;	O
return	O
0	int
;	O
}	O
