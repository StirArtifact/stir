static	O
const	O
Aobj_oformat_struct	struct
aobj_oformat	array
[	O
]	O
[	O
AOBJ_MOON	int
+	O
1	int
]	O
=	O
{	O
{	O
{	O
FMT_HHH	int
,	O
ERR_HHH	int
}	O
,	O
{	O
FMT_HHH	int
,	O
ERR_HHH	int
}	O
}	O
,	O
{	O
{	O
FMT_HHH	int
,	O
ERR_HHH	int
}	O
,	O
{	O
FMT_HHH	int
,	O
ERR_HHH	int
}	O
}	O
,	O
{	O
{	O
FMT_HHH	int
,	O
ERR_HHH	int
}	O
,	O
{	O
FMT_HHH	int
,	O
ERR_HHH	int
}	O
}	O
,	O
{	O
{	O
FMT_HHH	int
,	O
ERR_HHH	int
}	O
,	O
{	O
FMT_HHH	int
,	O
ERR_HHH	int
}	O
}	O
,	O
{	O
{	O
FMT_HHH	int
,	O
ERR_HHH	int
}	O
,	O
{	O
FMT_HHH	int
,	O
ERR_HHH	int
}	O
}	O
,	O
{	O
{	O
FMT_HHH	int
,	O
ERR_HHH	int
}	O
,	O
{	O
FMT_HHH	int
,	O
ERR_HHH	int
}	O
}	O
,	O
{	O
{	O
FMT_HHH	int
,	O
ERR_HHH	int
}	O
,	O
{	O
FMT_DDD	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_HHH	int
,	O
ERR_HHH	int
}	O
,	O
{	O
FMT_DDD	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_HHH	int
,	O
ERR_HHH	int
}	O
,	O
{	O
FMT_NSD	int
,	O
ERR_NNN	int
}	O
}	O
,	O
{	O
{	O
FMT_HHH	int
,	O
ERR_HHH	int
}	O
,	O
{	O
FMT_NND	int
,	O
ERR_NNN	int
}	O
}	O
,	O
{	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_DDD	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_DDD	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_DDD	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_DDD	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_TTT	int
,	O
ERR_TTT	int
}	O
,	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_NND	int
,	O
ERR_NNN	int
}	O
,	O
{	O
FMT_TTT	int
,	O
ERR_TTT	int
}	O
}	O
,	O
{	O
{	O
FMT_DDD	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_NND	int
,	O
ERR_NNN	int
}	O
}	O
,	O
{	O
{	O
FMT_DDD	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_DDD	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_DDD	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_DDD	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_DDD	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_DDD	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_DDD	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_NSD	int
,	O
ERR_NNN	int
}	O
}	O
,	O
{	O
{	O
FMT_DDD	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_NND	int
,	O
ERR_NNN	int
}	O
}	O
,	O
{	O
{	O
FMT_TTT	int
,	O
ERR_TTT	int
}	O
,	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_NND	int
,	O
ERR_NNN	int
}	O
,	O
{	O
FMT_DDD	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_DDD	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_DDD	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_DDD	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_NSD	int
,	O
ERR_NNN	int
}	O
,	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_HHH	int
,	O
ERR_HHH	int
}	O
,	O
{	O
FMT_TTT	int
,	O
ERR_TTT	int
}	O
}	O
,	O
{	O
{	O
FMT_TXS	int
,	O
ERR_TTT	int
}	O
,	O
{	O
FMT_NND	int
,	O
ERR_NNN	int
}	O
}	O
,	O
{	O
{	O
FMT_NND	int
,	O
ERR_NNN	int
}	O
,	O
{	O
FMT_DDD	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_NND	int
,	O
ERR_NNN	int
}	O
,	O
{	O
FMT_NSD	int
,	O
ERR_NNN	int
}	O
}	O
,	O
{	O
{	O
FMT_TTS	int
,	O
ERR_TTT	int
}	O
,	O
{	O
FMT_HHH	int
,	O
ERR_HHH	int
}	O
}	O
,	O
{	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_TXS	int
,	O
ERR_TTT	int
}	O
}	O
,	O
{	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_NND	int
,	O
ERR_NNN	int
}	O
}	O
,	O
{	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_NND	int
,	O
ERR_NNN	int
}	O
}	O
,	O
{	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_TTS	int
,	O
ERR_TTT	int
}	O
,	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_TTS	int
,	O
ERR_TTT	int
}	O
,	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_TTS	int
,	O
ERR_TTT	int
}	O
,	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_TTS	int
,	O
ERR_TTT	int
}	O
}	O
,	O
{	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_TTS	int
,	O
ERR_TTT	int
}	O
}	O
,	O
{	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_TTS	int
,	O
ERR_TTT	int
}	O
}	O
,	O
{	O
{	O
FMT_DDD	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_NND	int
,	O
ERR_NNN	int
}	O
}	O
,	O
{	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_NND	int
,	O
ERR_NNN	int
}	O
}	O
,	O
{	O
{	O
FMT_DDD	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_HHH	int
,	O
ERR_HHH	int
}	O
,	O
{	O
FMT_DDD	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_HHH	int
,	O
ERR_HHH	int
}	O
,	O
{	O
FMT_NND	int
,	O
ERR_NNN	int
}	O
}	O
,	O
{	O
{	O
FMT_NIL	O
,	O
ERR_NIL	O
}	O
,	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_NIL	O
,	O
ERR_NIL	O
}	O
,	O
{	O
FMT_NND	int
,	O
ERR_NNN	int
}	O
}	O
,	O
{	O
{	O
FMT_NIL	O
,	O
ERR_NIL	O
}	O
,	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_NIL	O
,	O
ERR_NIL	O
}	O
,	O
{	O
FMT_NND	int
,	O
ERR_NNN	int
}	O
}	O
,	O
{	O
{	O
FMT_NIL	O
,	O
ERR_NIL	O
}	O
,	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_NIL	O
,	O
ERR_NIL	O
}	O
,	O
{	O
FMT_DDD	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_NIL	O
,	O
ERR_NIL	O
}	O
,	O
{	O
FMT_NND	int
,	O
ERR_NNN	int
}	O
}	O
,	O
{	O
{	O
FMT_NNN	int
,	O
ERR_NNN	int
}	O
,	O
{	O
FMT_NNN	int
,	O
ERR_NNN	int
}	O
}	O
,	O
{	O
{	O
FMT_NND	int
,	O
ERR_NNN	int
}	O
,	O
{	O
FMT_NND	int
,	O
ERR_NNN	int
}	O
}	O
,	O
{	O
{	O
FMT_NSD	int
,	O
ERR_NNN	int
}	O
,	O
{	O
FMT_NSD	int
,	O
ERR_NNN	int
}	O
}	O
,	O
{	O
{	O
FMT_HHH	int
,	O
ERR_HHH	int
}	O
,	O
{	O
FMT_HHH	int
,	O
ERR_HHH	int
}	O
}	O
,	O
{	O
{	O
FMT_TTT	int
,	O
ERR_TTT	int
}	O
,	O
{	O
FMT_TTT	int
,	O
ERR_TTT	int
}	O
}	O
,	O
{	O
{	O
FMT_TTS	int
,	O
ERR_TTT	int
}	O
,	O
{	O
FMT_TTS	int
,	O
ERR_TTT	int
}	O
}	O
,	O
{	O
{	O
FMT_DDD	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_DDD	int
,	O
ERR_DDD	int
}	O
}	O
,	O
{	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
,	O
{	O
FMT_DDS	int
,	O
ERR_DDD	int
}	O
}	O
,	O
}	O
;	O
void	O
insert_line_into_table	function
(	O
line_buffer	pointer
,	O
filename	pointer
,	O
line_number	long
,	O
rc_elems	int
,	O
len_date	int
,	O
print_twice	int
)	O
char	O
*	O
line_buffer	pointer
;	O
const	O
char	O
*	O
filename	pointer
;	O
const	O
long	O
line_number	long
;	O
int	O
*	O
rc_elems	int
;	O
int	O
len_date	int
;	O
int	O
print_twice	int
;	O
{	O
auto	O
Slint	long
num	long
;	O
register	O
int	O
i	int
;	O
register	O
int	O
j	int
;	O
register	O
int	O
j_buf	int
;	O
register	O
int	O
j_diff	int
;	O
register	O
int	O
k	int
;	O
register	O
int	O
kk	int
;	O
register	O
int	O
kpos	int
;	O
register	O
int	O
kkpos	int
;	O
register	O
int	O
len_fn	int
=	O
len_year_max	int
+	O
5	int
;	O
register	O
int	O
tmp_year	int
=	O
year	int
;	O
auto	O
int	O
len	int
;	O
auto	O
int	O
rlen	int
;	O
auto	O
int	O
dd	int
;	O
auto	O
int	O
rdd	int
;	O
auto	O
int	O
mm	int
;	O
auto	O
int	O
rmm	int
;	O
auto	O
int	O
yy	int
;	O
auto	O
int	O
ryy	int
;	O
auto	O
int	O
nn	int
;	O
auto	O
int	O
rnn	int
;	O
auto	O
int	O
hhn	int
;	O
auto	O
int	O
rhn	int
;	O
auto	O
int	O
hhwd	int
;	O
auto	O
int	O
rhwd	int
;	O
auto	O
int	O
bio_emo_phase	int
;	O
auto	O
int	O
bio_emo_waxes	int
;	O
auto	O
int	O
bio_int_phase	int
;	O
auto	O
int	O
bio_int_waxes	int
;	O
auto	O
int	O
bio_phy_phase	int
;	O
auto	O
int	O
bio_phy_waxes	int
;	O
auto	O
int	O
bio_critical_day	int
;	O
auto	O
int	O
bio_positive_day	int
;	O
auto	O
int	O
bio_negative_day	int
;	O
auto	O
int	O
fstyle	pointer
;	O
auto	O
int	O
fwidth	pointer
;	O
static	O
char	O
buffer	array
[	O
40	int
]	O
;	O
static	O
char	O
date_text	pointer
[	O
23	int
]	O
;	O
static	O
char	O
bio_emo_ptext	array
[	O
7	int
]	O
;	O
static	O
char	O
bio_int_ptext	array
[	O
7	int
]	O
;	O
static	O
char	O
bio_phy_ptext	array
[	O
7	int
]	O
;	O
auto	O
char	O
*	O
ptr_date_text	pointer
;	O
auto	O
char	O
*	O
ptr_char	pointer
=	O
line_buffer	pointer
+	O
len_date	int
;	O
auto	O
char	O
hhc	char
;	O
auto	O
char	O
rhc	char
;	O
static	O
Bool	int
inclusive_date_map	array
[	O
DAY_LAST	int
+	O
2	int
]	O
;	O
static	O
Bool	int
exclusive_date_map	array
[	O
DAY_LAST	int
+	O
2	int
]	O
;	O
auto	O
Bool	int
ie_date_maps_set	int
;	O
auto	O
Bool	int
hls1_set	int
;	O
auto	O
Bool	int
hls2_set	int
;	O
auto	O
Bool	int
is_weekday_mode	pointer
;	O
auto	O
Bool	int
ris_weekday_mode	int
;	O
auto	O
Bool	int
moon_min_max	int
;	O
auto	O
Bool	int
ok	int
;	O
auto	O
Bool	int
hls_set	int
;	O
auto	O
Bool	int
print_line	int
;	O
auto	O
Bool	int
is_obsolete_whitespace	int
;	O
auto	O
Bool	int
is_cformat	pointer
;	O
auto	O
Bool	int
is_lformat	pointer
;	O
auto	O
Bool	int
is_sign	pointer
;	O
auto	O
Bool	int
is_lzero	pointer
;	O
auto	O
Bool	int
is_fformat	pointer
;	O
auto	O
Bool	int
is_suffix	pointer
;	O
auto	O
Bool	int
got_command	int
=	O
FALSE	O
;	O
if	O
(	O
rc_enable_fn_flag	int
)	O
len_fn	int
+=	O
(	O
int	O
)	O
strlen	function
(	O
filename	pointer
)	O
+	O
3	int
;	O
while	O
(	O
isspace	function
(	O
*	O
ptr_char	pointer
)	O
)	O
ptr_char	pointer
++	O
;	O
if	O
(	O
*	O
ptr_char	pointer
)	O
{	O
if	O
(	O
(	O
*	O
ptr_char	pointer
==	O
QUOTE_CHAR	char
)	O
&&	O
isspace	function
(	O
*	O
(	O
ptr_char	pointer
+	O
1	int
)	O
)	O
)	O
*	O
ptr_char	pointer
=	O
PSEUDO_QUOTE	char
;	O
if	O
(	O
(	O
Uint	int
)	O
len_the_text	int
<	O
maxlen_max	int
)	O
{	O
len_the_text	int
=	O
(	O
int	O
)	O
maxlen_max	int
;	O
the_text	pointer
=	O
(	O
char	O
*	O
)	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
the_text	pointer
,	O
len_the_text	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"the_text"	pointer
,	O
len_the_text	int
)	O
;	O
}	O
strcpy	function
(	O
the_text	pointer
,	O
ptr_char	pointer
)	O
;	O
}	O
else	O
*	O
the_text	pointer
=	O
'\0'	O
;	O
do	O
{	O
print_line	int
=	O
TRUE	O
;	O
ptr_date_text	pointer
=	O
date_text	pointer
;	O
j	int
=	O
k	int
=	O
j_buf	int
=	O
kk	int
=	O
j_diff	int
=	O
kpos	int
=	O
kkpos	int
=	O
0	int
;	O
ie_date_maps_set	int
=	O
is_obsolete_whitespace	int
=	O
hls_set	int
=	O
hls1_set	int
=	O
hls2_set	int
=	O
FALSE	O
;	O
fstyle	pointer
=	O
FSTYLE_NONE	O
;	O
fwidth	pointer
=	O
SPECIAL_VALUE	O
;	O
ok	int
=	O
is_cformat	pointer
=	O
is_lformat	pointer
=	O
is_sign	pointer
=	O
is_lzero	pointer
=	O
is_fformat	pointer
=	O
is_suffix	pointer
=	O
FALSE	O
;	O
if	O
(	O
(	O
rc_filter_period	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
&&	O
(	O
line_number	long
!=	O
SPECIAL_VALUE	O
)	O
)	O
print_line	int
=	O
rc_valid_period	function
(	O
rc_filter_period	pointer
,	O
d	int
,	O
m	int
,	O
y	int
,	O
incr_year	int
,	O
decr_year	int
)	O
;	O
if	O
(	O
print_line	int
&&	O
(	O
rc_filter_day	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
&&	O
(	O
line_number	long
!=	O
SPECIAL_VALUE	O
)	O
)	O
print_line	int
=	O
rc_valid_day	function
(	O
rc_filter_day	pointer
,	O
d	int
,	O
m	int
,	O
year	int
+	O
incr_year	int
-	O
decr_year	int
)	O
;	O
if	O
(	O
!	O
print_line	int
)	O
ok	int
=	O
TRUE	O
;	O
else	O
*	O
s6	pointer
=	O
*	O
date_text	pointer
=	O
'\0'	O
;	O
while	O
(	O
!	O
ok	int
)	O
{	O
while	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
)	O
{	O
if	O
(	O
(	O
Uint	int
)	O
k	int
>=	O
maxlen_max	int
-	O
(	O
Uint	int
)	O
len_fn	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
if	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
==	O
RC_SPECIAL_TEXT_CHAR	O
||	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
==	O
RC_TVAR_CHAR	char
)	O
{	O
if	O
(	O
j	int
)	O
{	O
if	O
(	O
*	O
(	O
the_text	pointer
+	O
(	O
j	int
-	O
1	int
)	O
)	O
==	O
QUOTE_CHAR	char
)	O
{	O
k	int
--	O
;	O
kk	int
--	O
;	O
}	O
else	O
if	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
==	O
RC_SPECIAL_TEXT_CHAR	O
)	O
break	O
;	O
}	O
else	O
if	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
==	O
RC_SPECIAL_TEXT_CHAR	O
)	O
break	O
;	O
}	O
if	O
(	O
is_obsolete_whitespace	int
&&	O
isspace	function
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
)	O
)	O
{	O
is_obsolete_whitespace	int
=	O
FALSE	O
;	O
j	int
++	O
;	O
}	O
else	O
s1	pointer
[	O
k	int
++	O
]	O
=	O
s6	pointer
[	O
kk	int
++	O
]	O
=	O
*	O
(	O
the_text	pointer
+	O
j	int
++	O
)	O
;	O
}	O
if	O
(	O
(	O
Uint	int
)	O
k	int
>=	O
maxlen_max	int
-	O
(	O
Uint	int
)	O
len_fn	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
if	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
)	O
{	O
auto	O
char	O
special_text_char	char
;	O
j_buf	int
=	O
j	int
++	O
;	O
j	int
=	O
decode_format	function
(	O
the_text	pointer
,	O
j	int
,	O
&	O
is_cformat	pointer
,	O
&	O
is_lformat	pointer
,	O
&	O
is_sign	pointer
,	O
&	O
is_lzero	pointer
,	O
&	O
is_suffix	pointer
,	O
&	O
is_fformat	pointer
,	O
&	O
fstyle	pointer
,	O
&	O
fwidth	pointer
)	O
;	O
*	O
s2	pointer
=	O
'\0'	O
;	O
special_text_char	char
=	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
;	O
if	O
(	O
(	O
!	O
got_command	int
&&	O
(	O
special_text_char	char
==	O
RC_IDATE_CHAR	char
||	O
special_text_char	char
==	O
RC_EDATE_CHAR	char
)	O
)	O
||	O
special_text_char	char
==	O
RC_TDATE_CHAR	char
||	O
special_text_char	char
==	O
RC_WDNAME_CHAR	O
||	O
special_text_char	char
==	O
RC_WDNR_M1_2_S7_CHAR	char
||	O
special_text_char	char
==	O
RC_WDNR_M0_2_S6_CHAR	char
||	O
special_text_char	char
==	O
RC_WDNR_S1_2_S7_CHAR	char
||	O
special_text_char	char
==	O
RC_WDNR_S0_2_S6_CHAR	char
||	O
special_text_char	char
==	O
RC_WDNR_X1_2_X7_CHAR	char
||	O
special_text_char	char
==	O
RC_WDNR_X0_2_X6_CHAR	char
||	O
special_text_char	char
==	O
RC_DOYNR_CHAR	char
||	O
special_text_char	char
==	O
RC_DAYNR_CHAR	O
||	O
special_text_char	char
==	O
RC_MONTHNAME_CHAR	O
||	O
special_text_char	char
==	O
RC_MONTHNR_CHAR	O
||	O
special_text_char	char
==	O
RC_YEARNR_CHAR	O
||	O
special_text_char	char
==	O
RC_WEEKNR_CHAR	char
||	O
special_text_char	char
==	O
RC_BYEAR_CHAR	char
||	O
(	O
(	O
special_text_char	char
==	O
RC_YEAR_DIFF_CHAR	char
)	O
&&	O
*	O
(	O
the_text	pointer
+	O
j	int
+	O
1	int
)	O
&&	O
!	O
isspace	function
(	O
*	O
(	O
the_text	pointer
+	O
j	int
+	O
1	int
)	O
)	O
)	O
||	O
special_text_char	char
==	O
RC_MOON_CHAR	char
||	O
special_text_char	char
==	O
RC_MOON_IMAGE_CHAR	char
||	O
special_text_char	char
==	O
RC_BIO_CHAR	char
||	O
special_text_char	char
==	O
RC_BIO_BAR_CHAR	char
)	O
{	O
j	int
++	O
;	O
if	O
(	O
special_text_char	char
==	O
RC_TDATE_CHAR	char
)	O
{	O
auto	O
Slint	long
jdate	long
;	O
i	int
=	O
0	int
;	O
if	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
==	O
*	O
ASC_LIT	pointer
||	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
==	O
*	O
DES_LIT	pointer
)	O
s2	pointer
[	O
i	int
++	O
]	O
=	O
*	O
(	O
the_text	pointer
+	O
j	int
++	O
)	O
;	O
while	O
(	O
isdigit	function
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
)	O
)	O
{	O
if	O
(	O
(	O
Uint	int
)	O
i	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
s2	pointer
[	O
i	int
++	O
]	O
=	O
*	O
(	O
the_text	pointer
+	O
j	int
++	O
)	O
;	O
}	O
s2	pointer
[	O
i	int
]	O
=	O
'\0'	O
;	O
num	long
=	O
atol	function
(	O
s2	pointer
)	O
;	O
jdate	long
=	O
(	O
Slint	long
)	O
date2num	function
(	O
d	int
,	O
m	int
,	O
year	int
+	O
incr_year	int
-	O
decr_year	int
)	O
;	O
if	O
(	O
(	O
jdate	long
+	O
num	long
<=	O
(	O
Slint	long
)	O
date2num	function
(	O
dvec	array
[	O
MONTH_MAX	int
-	O
1	int
]	O
,	O
MONTH_MAX	int
,	O
YEAR_MAX	int
)	O
)	O
&&	O
(	O
jdate	long
+	O
num	long
>=	O
1L	int
)	O
)	O
{	O
num2date	function
(	O
jdate	long
+	O
num	long
,	O
&	O
dd	int
,	O
&	O
mm	int
,	O
&	O
yy	int
)	O
;	O
if	O
(	O
transform_year	int
)	O
{	O
yy	int
=	O
yy	int
-	O
transform_year	int
;	O
if	O
(	O
(	O
yy	int
>=	O
0	int
)	O
&&	O
(	O
transform_year	int
>	O
0	int
)	O
)	O
yy	int
++	O
;	O
}	O
sprintf	function
(	O
s2	pointer
,	O
"%02d-%s-%0*d"	pointer
,	O
dd	int
,	O
short_month_name	function
(	O
mm	int
)	O
,	O
len_year_max	int
,	O
yy	int
)	O
;	O
}	O
else	O
*	O
s2	pointer
=	O
'\0'	O
;	O
i	int
=	O
0	int
;	O
while	O
(	O
s2	pointer
[	O
i	int
]	O
)	O
{	O
if	O
(	O
(	O
Uint	int
)	O
k	int
>=	O
maxlen_max	int
-	O
(	O
Uint	int
)	O
len_fn	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
s1	pointer
[	O
k	int
++	O
]	O
=	O
s6	pointer
[	O
kk	int
++	O
]	O
=	O
s2	pointer
[	O
i	int
++	O
]	O
;	O
}	O
}	O
else	O
{	O
auto	O
Bool	int
is_ie	int
=	O
FALSE	O
;	O
auto	O
Bool	int
is_range	int
=	O
FALSE	O
;	O
auto	O
Bool	int
dflt_yy_set	int
=	O
FALSE	O
;	O
auto	O
Bool	int
dflt_ryy_set	int
=	O
FALSE	O
;	O
rhc	char
=	O
'\0'	O
;	O
rlen	int
=	O
rdd	int
=	O
rmm	int
=	O
ryy	int
=	O
rnn	int
=	O
0	int
;	O
if	O
(	O
special_text_char	char
==	O
RC_IDATE_CHAR	char
||	O
special_text_char	char
==	O
RC_EDATE_CHAR	char
)	O
{	O
is_ie	int
=	O
TRUE	O
;	O
if	O
(	O
!	O
ie_date_maps_set	int
)	O
{	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
DAY_LAST	int
+	O
2	int
;	O
i	int
++	O
)	O
inclusive_date_map	array
[	O
i	int
]	O
=	O
!	O
(	O
exclusive_date_map	array
[	O
i	int
]	O
=	O
TRUE	O
)	O
;	O
ie_date_maps_set	int
=	O
!	O
(	O
*	O
inclusive_date_map	array
=	O
*	O
exclusive_date_map	array
=	O
FALSE	O
)	O
;	O
}	O
ptr_char	pointer
=	O
the_text	pointer
+	O
j	int
;	O
while	O
(	O
*	O
ptr_char	pointer
&&	O
!	O
isspace	function
(	O
*	O
ptr_char	pointer
)	O
&&	O
(	O
*	O
ptr_char	pointer
!=	O
RC_DRANGE_CHAR	char
)	O
)	O
ptr_char	pointer
++	O
;	O
if	O
(	O
*	O
ptr_char	pointer
==	O
RC_DRANGE_CHAR	char
)	O
is_range	int
=	O
TRUE	O
;	O
}	O
if	O
(	O
is_range	int
)	O
*	O
ptr_char	pointer
=	O
'\0'	O
;	O
(	O
void	O
)	O
rc_get_date	function
(	O
the_text	pointer
+	O
j	int
,	O
lptrs2	pointer
,	O
FALSE	O
,	O
&	O
is_weekday_mode	pointer
,	O
&	O
dd	int
,	O
&	O
mm	int
,	O
&	O
yy	int
,	O
&	O
nn	int
,	O
&	O
len	int
,	O
&	O
hhc	char
,	O
&	O
hhn	int
,	O
&	O
hhwd	int
,	O
filename	pointer
,	O
line_number	long
,	O
the_text	pointer
+	O
j	int
-	O
2	int
,	O
TRUE	O
)	O
;	O
j	int
+=	O
len	int
;	O
if	O
(	O
is_range	int
)	O
{	O
j	int
++	O
;	O
(	O
void	O
)	O
rc_get_date	function
(	O
the_text	pointer
+	O
j	int
,	O
lptrs2	pointer
,	O
FALSE	O
,	O
&	O
ris_weekday_mode	int
,	O
&	O
rdd	int
,	O
&	O
rmm	int
,	O
&	O
ryy	int
,	O
&	O
rnn	int
,	O
&	O
rlen	int
,	O
&	O
rhc	char
,	O
&	O
rhn	int
,	O
&	O
rhwd	int
,	O
filename	pointer
,	O
line_number	long
,	O
the_text	pointer
+	O
j	int
,	O
TRUE	O
)	O
;	O
j	int
+=	O
rlen	int
;	O
}	O
if	O
(	O
is_ie	int
)	O
{	O
if	O
(	O
!	O
len	int
)	O
dflt_yy_set	int
=	O
TRUE	O
;	O
if	O
(	O
!	O
rlen	int
)	O
dflt_ryy_set	int
=	O
TRUE	O
;	O
}	O
if	O
(	O
!	O
yy	int
)	O
{	O
if	O
(	O
dflt_yy_set	int
)	O
yy	int
=	O
YEAR_MIN	int
;	O
else	O
{	O
yy	int
=	O
year	int
;	O
if	O
(	O
y	int
&&	O
(	O
fiscal_month	int
>	O
MONTH_MIN	int
)	O
)	O
yy	int
=	O
y	int
;	O
}	O
}	O
if	O
(	O
!	O
ryy	int
)	O
{	O
if	O
(	O
dflt_ryy_set	int
)	O
ryy	int
=	O
YEAR_MAX	int
;	O
else	O
{	O
ryy	int
=	O
year	int
;	O
if	O
(	O
y	int
&&	O
(	O
fiscal_month	int
>	O
MONTH_MIN	int
)	O
)	O
ryy	int
=	O
y	int
;	O
}	O
}	O
if	O
(	O
!	O
dflt_yy_set	int
&&	O
(	O
yy	int
!=	O
SPECIAL_VALUE	O
)	O
)	O
{	O
yy	int
-=	O
incr_year	int
;	O
yy	int
+=	O
decr_year	int
;	O
}	O
if	O
(	O
!	O
dflt_ryy_set	int
&&	O
(	O
ryy	int
!=	O
SPECIAL_VALUE	O
)	O
)	O
{	O
ryy	int
-=	O
incr_year	int
;	O
ryy	int
+=	O
decr_year	int
;	O
}	O
switch	O
(	O
hhc	char
)	O
{	O
case	O
RC_EASTER_CHAR	char
:	O
case	O
RC_TODAY_CHAR	char
:	O
if	O
(	O
!	O
dflt_yy_set	int
&&	O
(	O
fiscal_month	int
>	O
MONTH_MIN	int
)	O
)	O
{	O
if	O
(	O
!	O
precomp_date	function
(	O
hhn	int
,	O
hhwd	int
,	O
&	O
dd	int
,	O
&	O
mm	int
,	O
yy	int
+	O
incr_year	int
,	O
(	O
hhc	char
==	O
RC_EASTER_CHAR	char
)	O
?	O
EAster	int
:	O
TOday	int
)	O
)	O
yy	int
=	O
SPECIAL_VALUE	O
;	O
}	O
else	O
if	O
(	O
!	O
precomp_date	function
(	O
hhn	int
,	O
hhwd	int
,	O
&	O
dd	int
,	O
&	O
mm	int
,	O
yy	int
,	O
(	O
hhc	char
==	O
RC_EASTER_CHAR	char
)	O
?	O
EAster	int
:	O
TOday	int
)	O
)	O
yy	int
=	O
SPECIAL_VALUE	O
;	O
break	O
;	O
case	O
'D'	O
:	O
case	O
'W'	O
:	O
if	O
(	O
!	O
dflt_yy_set	int
&&	O
(	O
fiscal_month	int
>	O
MONTH_MIN	int
)	O
)	O
{	O
auto	O
int	O
fiscal_year	int
=	O
yy	int
+	O
incr_year	int
;	O
if	O
(	O
!	O
precomp_nth_wd	function
(	O
hhn	int
,	O
hhwd	int
,	O
&	O
hhn	int
,	O
&	O
dd	int
,	O
&	O
mm	int
,	O
&	O
fiscal_year	int
,	O
(	O
hhc	char
==	O
'D'	O
)	O
?	O
DAy	int
:	O
WEek	int
)	O
)	O
yy	int
=	O
fiscal_year	int
;	O
}	O
else	O
(	O
void	O
)	O
precomp_nth_wd	function
(	O
hhn	int
,	O
hhwd	int
,	O
&	O
hhn	int
,	O
&	O
dd	int
,	O
&	O
mm	int
,	O
&	O
yy	int
,	O
(	O
hhc	char
==	O
'D'	O
)	O
?	O
DAy	int
:	O
WEek	int
)	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
islower	function
(	O
hhc	char
)	O
)	O
{	O
if	O
(	O
rc_dvar	array
[	O
IDX	O
(	O
hhc	char
)	O
]	O
.	O
dvar_local	struct
.	O
dvar_month	char
)	O
{	O
mm	int
=	O
(	O
int	O
)	O
rc_dvar	array
[	O
IDX	O
(	O
hhc	char
)	O
]	O
.	O
dvar_local	struct
.	O
dvar_month	char
;	O
dd	int
=	O
(	O
int	O
)	O
rc_dvar	array
[	O
IDX	O
(	O
hhc	char
)	O
]	O
.	O
dvar_local	struct
.	O
dvar_day	char
;	O
}	O
else	O
if	O
(	O
rc_dvar	array
[	O
IDX	O
(	O
hhc	char
)	O
]	O
.	O
dvar_global	struct
.	O
dvar_month	char
)	O
{	O
mm	int
=	O
(	O
int	O
)	O
rc_dvar	array
[	O
IDX	O
(	O
hhc	char
)	O
]	O
.	O
dvar_global	struct
.	O
dvar_month	char
;	O
dd	int
=	O
(	O
int	O
)	O
rc_dvar	array
[	O
IDX	O
(	O
hhc	char
)	O
]	O
.	O
dvar_global	struct
.	O
dvar_day	char
;	O
}	O
if	O
(	O
!	O
dflt_yy_set	int
&&	O
(	O
fiscal_month	int
>	O
MONTH_MIN	int
)	O
)	O
{	O
if	O
(	O
!	O
precomp_date	function
(	O
hhn	int
,	O
hhwd	int
,	O
&	O
dd	int
,	O
&	O
mm	int
,	O
yy	int
+	O
incr_year	int
,	O
DVar	int
)	O
)	O
yy	int
=	O
SPECIAL_VALUE	O
;	O
}	O
else	O
if	O
(	O
!	O
precomp_date	function
(	O
hhn	int
,	O
hhwd	int
,	O
&	O
dd	int
,	O
&	O
mm	int
,	O
yy	int
,	O
DVar	int
)	O
)	O
yy	int
=	O
SPECIAL_VALUE	O
;	O
}	O
}	O
switch	O
(	O
rhc	char
)	O
{	O
case	O
RC_EASTER_CHAR	char
:	O
case	O
RC_TODAY_CHAR	char
:	O
if	O
(	O
!	O
dflt_ryy_set	int
&&	O
(	O
fiscal_month	int
>	O
MONTH_MIN	int
)	O
)	O
{	O
if	O
(	O
!	O
precomp_date	function
(	O
rhn	int
,	O
rhwd	int
,	O
&	O
rdd	int
,	O
&	O
rmm	int
,	O
ryy	int
+	O
incr_year	int
,	O
(	O
rhc	char
==	O
RC_EASTER_CHAR	char
)	O
?	O
EAster	int
:	O
TOday	int
)	O
)	O
ryy	int
=	O
SPECIAL_VALUE	O
;	O
}	O
else	O
if	O
(	O
!	O
precomp_date	function
(	O
rhn	int
,	O
rhwd	int
,	O
&	O
rdd	int
,	O
&	O
rmm	int
,	O
ryy	int
,	O
(	O
rhc	char
==	O
RC_EASTER_CHAR	char
)	O
?	O
EAster	int
:	O
TOday	int
)	O
)	O
ryy	int
=	O
SPECIAL_VALUE	O
;	O
break	O
;	O
case	O
'D'	O
:	O
case	O
'W'	O
:	O
if	O
(	O
!	O
dflt_ryy_set	int
&&	O
(	O
fiscal_month	int
>	O
MONTH_MIN	int
)	O
)	O
{	O
auto	O
int	O
fiscal_year	int
=	O
ryy	int
+	O
incr_year	int
;	O
if	O
(	O
!	O
precomp_nth_wd	function
(	O
rhn	int
,	O
rhwd	int
,	O
&	O
rhn	int
,	O
&	O
rdd	int
,	O
&	O
rmm	int
,	O
&	O
fiscal_year	int
,	O
(	O
rhc	char
==	O
'D'	O
)	O
?	O
DAy	int
:	O
WEek	int
)	O
)	O
ryy	int
=	O
fiscal_year	int
;	O
}	O
else	O
(	O
void	O
)	O
precomp_nth_wd	function
(	O
rhn	int
,	O
rhwd	int
,	O
&	O
rhn	int
,	O
&	O
rdd	int
,	O
&	O
rmm	int
,	O
&	O
ryy	int
,	O
(	O
rhc	char
==	O
'D'	O
)	O
?	O
DAy	int
:	O
WEek	int
)	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
islower	function
(	O
rhc	char
)	O
)	O
{	O
if	O
(	O
rc_dvar	array
[	O
IDX	O
(	O
rhc	char
)	O
]	O
.	O
dvar_local	struct
.	O
dvar_month	char
)	O
{	O
rmm	int
=	O
(	O
int	O
)	O
rc_dvar	array
[	O
IDX	O
(	O
rhc	char
)	O
]	O
.	O
dvar_local	struct
.	O
dvar_month	char
;	O
rdd	int
=	O
(	O
int	O
)	O
rc_dvar	array
[	O
IDX	O
(	O
rhc	char
)	O
]	O
.	O
dvar_local	struct
.	O
dvar_day	char
;	O
}	O
else	O
if	O
(	O
rc_dvar	array
[	O
IDX	O
(	O
rhc	char
)	O
]	O
.	O
dvar_global	struct
.	O
dvar_month	char
)	O
{	O
rmm	int
=	O
(	O
int	O
)	O
rc_dvar	array
[	O
IDX	O
(	O
rhc	char
)	O
]	O
.	O
dvar_global	struct
.	O
dvar_month	char
;	O
rdd	int
=	O
(	O
int	O
)	O
rc_dvar	array
[	O
IDX	O
(	O
rhc	char
)	O
]	O
.	O
dvar_global	struct
.	O
dvar_day	char
;	O
}	O
if	O
(	O
!	O
dflt_ryy_set	int
&&	O
(	O
fiscal_month	int
>	O
MONTH_MIN	int
)	O
)	O
{	O
if	O
(	O
!	O
precomp_date	function
(	O
rhn	int
,	O
rhwd	int
,	O
&	O
rdd	int
,	O
&	O
rmm	int
,	O
ryy	int
+	O
incr_year	int
,	O
DVar	int
)	O
)	O
ryy	int
=	O
SPECIAL_VALUE	O
;	O
}	O
else	O
if	O
(	O
!	O
precomp_date	function
(	O
rhn	int
,	O
rhwd	int
,	O
&	O
rdd	int
,	O
&	O
rmm	int
,	O
ryy	int
,	O
DVar	int
)	O
)	O
ryy	int
=	O
SPECIAL_VALUE	O
;	O
}	O
}	O
if	O
(	O
len	int
>	O
len_year_max	int
)	O
len	int
-=	O
len_year_max	int
;	O
else	O
len	int
=	O
0	int
;	O
if	O
(	O
rlen	int
>	O
len_year_max	int
)	O
rlen	int
-=	O
len_year_max	int
;	O
else	O
rlen	int
=	O
0	int
;	O
if	O
(	O
is_ie	int
)	O
{	O
if	O
(	O
!	O
mm	int
)	O
{	O
if	O
(	O
len	int
>=	O
1	int
)	O
{	O
mm	int
=	O
m	int
;	O
if	O
(	O
len	int
==	O
2	int
)	O
len	int
=	O
0	int
;	O
else	O
len	int
--	O
;	O
}	O
else	O
mm	int
=	O
MONTH_MIN	int
;	O
}	O
else	O
{	O
if	O
(	O
len	int
==	O
2	int
)	O
len	int
=	O
0	int
;	O
else	O
len	int
--	O
;	O
}	O
if	O
(	O
!	O
dd	int
)	O
{	O
if	O
(	O
len	int
>=	O
1	int
)	O
dd	int
=	O
d	int
;	O
else	O
dd	int
=	O
DAY_MIN	int
;	O
}	O
if	O
(	O
!	O
rmm	int
)	O
{	O
if	O
(	O
rlen	int
>=	O
1	int
)	O
{	O
rmm	int
=	O
m	int
;	O
if	O
(	O
rlen	int
==	O
2	int
)	O
rlen	int
=	O
0	int
;	O
else	O
rlen	int
--	O
;	O
}	O
else	O
rmm	int
=	O
MONTH_MAX	int
;	O
}	O
else	O
{	O
if	O
(	O
rlen	int
==	O
2	int
)	O
rlen	int
=	O
0	int
;	O
else	O
rlen	int
--	O
;	O
}	O
if	O
(	O
!	O
rdd	int
)	O
{	O
if	O
(	O
rlen	int
>=	O
1	int
)	O
rdd	int
=	O
d	int
;	O
else	O
{	O
if	O
(	O
rmm	int
==	O
2	int
)	O
{	O
if	O
(	O
!	O
dflt_ryy_set	int
&&	O
(	O
fiscal_month	int
>	O
MONTH_MIN	int
)	O
)	O
rdd	int
=	O
days_of_february	function
(	O
ryy	int
+	O
incr_year	int
)	O
;	O
else	O
rdd	int
=	O
days_of_february	function
(	O
ryy	int
)	O
;	O
}	O
else	O
rdd	int
=	O
dvec	array
[	O
rmm	int
-	O
1	int
]	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
!	O
mm	int
)	O
mm	int
=	O
m	int
;	O
if	O
(	O
!	O
dd	int
)	O
dd	int
=	O
d	int
;	O
}	O
if	O
(	O
dd	int
==	O
99	int
)	O
{	O
if	O
(	O
mm	int
==	O
2	int
)	O
dd	int
=	O
days_of_february	function
(	O
yy	int
)	O
;	O
else	O
dd	int
=	O
dvec	array
[	O
mm	int
-	O
1	int
]	O
;	O
}	O
if	O
(	O
rdd	int
==	O
99	int
)	O
{	O
if	O
(	O
rmm	int
==	O
2	int
)	O
{	O
if	O
(	O
!	O
dflt_ryy_set	int
&&	O
(	O
fiscal_month	int
>	O
MONTH_MIN	int
)	O
)	O
rdd	int
=	O
days_of_february	function
(	O
ryy	int
+	O
incr_year	int
)	O
;	O
else	O
rdd	int
=	O
days_of_february	function
(	O
ryy	int
)	O
;	O
}	O
else	O
rdd	int
=	O
dvec	array
[	O
rmm	int
-	O
1	int
]	O
;	O
}	O
if	O
(	O
nn	int
)	O
nth_weekday_of_month	function
(	O
&	O
dd	int
,	O
&	O
mm	int
,	O
&	O
yy	int
,	O
&	O
nn	int
,	O
&	O
is_weekday_mode	pointer
)	O
;	O
if	O
(	O
rnn	int
)	O
nth_weekday_of_month	function
(	O
&	O
rdd	int
,	O
&	O
rmm	int
,	O
&	O
ryy	int
,	O
&	O
rnn	int
,	O
&	O
ris_weekday_mode	int
)	O
;	O
if	O
(	O
(	O
!	O
is_range	int
&&	O
(	O
yy	int
!=	O
SPECIAL_VALUE	O
)	O
)	O
||	O
(	O
is_range	int
&&	O
(	O
yy	int
!=	O
SPECIAL_VALUE	O
)	O
&&	O
(	O
ryy	int
!=	O
SPECIAL_VALUE	O
)	O
)	O
)	O
{	O
register	O
int	O
true_year	int
=	O
(	O
y	int
)	O
?	O
y	int
:	O
year	int
+	O
incr_year	int
;	O
if	O
(	O
!	O
nn	int
&&	O
!	O
dflt_yy_set	int
&&	O
(	O
fiscal_month	int
>	O
MONTH_MIN	int
||	O
(	O
incr_year	int
&&	O
(	O
rc_tomorrow_flag	int
||	O
rc_week_flag	int
)	O
)	O
)	O
)	O
yy	int
+=	O
incr_year	int
;	O
if	O
(	O
!	O
rnn	int
&&	O
!	O
dflt_ryy_set	int
&&	O
(	O
fiscal_month	int
>	O
MONTH_MIN	int
||	O
(	O
incr_year	int
&&	O
(	O
rc_tomorrow_flag	int
||	O
rc_week_flag	int
)	O
)	O
)	O
)	O
ryy	int
+=	O
incr_year	int
;	O
if	O
(	O
is_ie	int
)	O
{	O
num	long
=	O
d_between	function
(	O
dd	int
,	O
mm	int
,	O
yy	int
,	O
rdd	int
,	O
rmm	int
,	O
ryy	int
)	O
;	O
if	O
(	O
num	long
>=	O
0L	int
)	O
{	O
register	O
int	O
s_doy	int
=	O
DAY_MIN	int
;	O
register	O
int	O
e_doy	int
=	O
DAY_LAST	int
+	O
1	int
;	O
if	O
(	O
special_text_char	char
==	O
RC_IDATE_CHAR	char
)	O
*	O
inclusive_date_map	array
=	O
TRUE	O
;	O
else	O
*	O
exclusive_date_map	array
=	O
TRUE	O
;	O
if	O
(	O
yy	int
==	O
true_year	int
)	O
s_doy	int
=	O
day_of_year	function
(	O
dd	int
,	O
mm	int
,	O
yy	int
)	O
;	O
else	O
if	O
(	O
yy	int
>	O
true_year	int
)	O
s_doy	int
=	O
SPECIAL_VALUE	O
;	O
if	O
(	O
ryy	int
==	O
true_year	int
)	O
e_doy	int
=	O
day_of_year	function
(	O
rdd	int
,	O
rmm	int
,	O
ryy	int
)	O
;	O
else	O
if	O
(	O
ryy	int
<	O
true_year	int
)	O
e_doy	int
=	O
SPECIAL_VALUE	O
;	O
if	O
(	O
(	O
s_doy	int
!=	O
SPECIAL_VALUE	O
)	O
&&	O
(	O
e_doy	int
!=	O
SPECIAL_VALUE	O
)	O
)	O
{	O
if	O
(	O
special_text_char	char
==	O
RC_IDATE_CHAR	char
)	O
for	O
(	O
i	int
=	O
s_doy	int
;	O
i	int
<=	O
e_doy	int
;	O
i	int
++	O
)	O
inclusive_date_map	array
[	O
i	int
]	O
=	O
TRUE	O
;	O
else	O
for	O
(	O
i	int
=	O
s_doy	int
;	O
i	int
<=	O
e_doy	int
;	O
i	int
++	O
)	O
exclusive_date_map	array
[	O
i	int
]	O
=	O
FALSE	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
(	O
special_text_char	char
!=	O
RC_BYEAR_CHAR	char
)	O
&&	O
(	O
special_text_char	char
!=	O
RC_YEAR_DIFF_CHAR	char
)	O
)	O
yy	int
+=	O
incr_year	int
;	O
i	int
=	O
weekday_of_date	function
(	O
dd	int
,	O
mm	int
,	O
yy	int
)	O
;	O
switch	O
(	O
special_text_char	char
)	O
{	O
case	O
RC_WDNAME_CHAR	O
:	O
(	O
void	O
)	O
use_format	function
(	O
&	O
s2	pointer
,	O
0	int
,	O
day_name	function
(	O
i	int
)	O
,	O
0	int
,	O
FALSE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
break	O
;	O
case	O
RC_WDNR_M1_2_S7_CHAR	char
:	O
(	O
void	O
)	O
use_format	function
(	O
&	O
s2	pointer
,	O
0	int
,	O
""	pointer
,	O
i	int
,	O
TRUE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
break	O
;	O
case	O
RC_WDNR_M0_2_S6_CHAR	char
:	O
(	O
void	O
)	O
use_format	function
(	O
&	O
s2	pointer
,	O
0	int
,	O
""	pointer
,	O
i	int
-	O
1	int
,	O
TRUE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
break	O
;	O
case	O
RC_WDNR_S1_2_S7_CHAR	char
:	O
(	O
void	O
)	O
use_format	function
(	O
&	O
s2	pointer
,	O
0	int
,	O
""	pointer
,	O
(	O
i	int
==	O
DAY_MAX	int
)	O
?	O
DAY_MIN	int
:	O
i	int
+	O
1	int
,	O
TRUE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
break	O
;	O
case	O
RC_WDNR_S0_2_S6_CHAR	char
:	O
(	O
void	O
)	O
use_format	function
(	O
&	O
s2	pointer
,	O
0	int
,	O
""	pointer
,	O
(	O
i	int
==	O
DAY_MAX	int
)	O
?	O
DAY_MIN	int
-	O
1	int
:	O
i	int
,	O
TRUE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
break	O
;	O
case	O
RC_WDNR_X1_2_X7_CHAR	char
:	O
(	O
void	O
)	O
use_format	function
(	O
&	O
s2	pointer
,	O
0	int
,	O
""	pointer
,	O
SYEAR	O
(	O
i	int
,	O
start_day	int
)	O
,	O
TRUE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
break	O
;	O
case	O
RC_WDNR_X0_2_X6_CHAR	char
:	O
(	O
void	O
)	O
use_format	function
(	O
&	O
s2	pointer
,	O
0	int
,	O
""	pointer
,	O
(	O
SYEAR	O
(	O
i	int
,	O
start_day	int
)	O
)	O
-	O
1	int
,	O
TRUE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
break	O
;	O
case	O
RC_DOYNR_CHAR	char
:	O
(	O
void	O
)	O
use_format	function
(	O
&	O
s2	pointer
,	O
0	int
,	O
""	pointer
,	O
day_of_year	function
(	O
dd	int
,	O
mm	int
,	O
yy	int
)	O
,	O
TRUE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
break	O
;	O
case	O
RC_DAYNR_CHAR	O
:	O
(	O
void	O
)	O
use_format	function
(	O
&	O
s2	pointer
,	O
0	int
,	O
""	pointer
,	O
dd	int
,	O
TRUE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
break	O
;	O
case	O
RC_MONTHNAME_CHAR	O
:	O
(	O
void	O
)	O
use_format	function
(	O
&	O
s2	pointer
,	O
0	int
,	O
month_name	function
(	O
mm	int
)	O
,	O
0	int
,	O
FALSE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
break	O
;	O
case	O
RC_MONTHNR_CHAR	O
:	O
(	O
void	O
)	O
use_format	function
(	O
&	O
s2	pointer
,	O
0	int
,	O
""	pointer
,	O
mm	int
,	O
TRUE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
break	O
;	O
case	O
RC_WEEKNR_CHAR	char
:	O
i	int
=	O
week_number	function
(	O
dd	int
,	O
mm	int
,	O
yy	int
,	O
iso_week_number	int
,	O
start_day	int
)	O
;	O
if	O
(	O
i	int
<	O
0	int
)	O
sprintf	function
(	O
s2	pointer
,	O
"%02d/0"	pointer
,	O
-	O
i	int
)	O
;	O
else	O
if	O
(	O
!	O
i	int
)	O
sprintf	function
(	O
s2	pointer
,	O
"%s"	pointer
,	O
"53/1"	pointer
)	O
;	O
else	O
sprintf	function
(	O
s2	pointer
,	O
"%02d"	pointer
,	O
i	int
)	O
;	O
break	O
;	O
case	O
RC_YEAR_DIFF_CHAR	char
:	O
yy	int
=	O
yy	int
-	O
true_year	int
;	O
if	O
(	O
m	int
<	O
mm	int
||	O
(	O
(	O
m	int
==	O
mm	int
)	O
&&	O
(	O
d	int
<	O
dd	int
)	O
)	O
)	O
{	O
if	O
(	O
yy	int
<	O
1	int
)	O
yy	int
++	O
;	O
else	O
if	O
(	O
yy	int
>	O
1	int
)	O
yy	int
--	O
;	O
}	O
(	O
void	O
)	O
use_format	function
(	O
&	O
s2	pointer
,	O
0	int
,	O
""	pointer
,	O
yy	int
,	O
TRUE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
break	O
;	O
case	O
RC_YEARNR_CHAR	O
:	O
if	O
(	O
transform_year	int
)	O
{	O
yy	int
=	O
yy	int
-	O
transform_year	int
;	O
if	O
(	O
(	O
yy	int
>=	O
0	int
)	O
&&	O
(	O
transform_year	int
>	O
0	int
)	O
)	O
yy	int
++	O
;	O
}	O
(	O
void	O
)	O
use_format	function
(	O
&	O
s2	pointer
,	O
0	int
,	O
""	pointer
,	O
yy	int
,	O
TRUE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
break	O
;	O
case	O
RC_BYEAR_CHAR	char
:	O
yy	int
=	O
true_year	int
-	O
yy	int
;	O
if	O
(	O
m	int
<	O
mm	int
||	O
(	O
(	O
m	int
==	O
mm	int
)	O
&&	O
(	O
d	int
<	O
dd	int
)	O
)	O
)	O
yy	int
--	O
;	O
if	O
(	O
yy	int
>=	O
1	int
)	O
(	O
void	O
)	O
use_format	function
(	O
&	O
s2	pointer
,	O
0	int
,	O
""	pointer
,	O
yy	int
,	O
TRUE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
else	O
*	O
s2	pointer
=	O
'\0'	O
;	O
break	O
;	O
case	O
RC_MOON_CHAR	char
:	O
i	int
=	O
moondisk	function
(	O
&	O
moon_min_max	int
,	O
dd	int
,	O
mm	int
,	O
yy	int
,	O
time_hour_offset	int
,	O
time_min_offset	int
)	O
;	O
(	O
void	O
)	O
use_format	function
(	O
&	O
s2	pointer
,	O
0	int
,	O
""	pointer
,	O
abs	function
(	O
i	int
)	O
,	O
TRUE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
strcat	function
(	O
s2	pointer
,	O
"%"	pointer
)	O
;	O
if	O
(	O
moon_min_max	int
)	O
{	O
if	O
(	O
abs	function
(	O
i	int
)	O
<	O
50	int
)	O
strcat	function
(	O
s2	pointer
,	O
MOON_MIN	pointer
)	O
;	O
else	O
strcat	function
(	O
s2	pointer
,	O
MOON_MAX	pointer
)	O
;	O
}	O
else	O
if	O
(	O
i	int
<	O
0	int
)	O
strcat	function
(	O
s2	pointer
,	O
MOON_WANES	pointer
)	O
;	O
else	O
strcat	function
(	O
s2	pointer
,	O
MOON_WAXES	pointer
)	O
;	O
break	O
;	O
case	O
RC_MOON_IMAGE_CHAR	char
:	O
draw_moon	function
(	O
moondisk	function
(	O
&	O
moon_min_max	int
,	O
dd	int
,	O
mm	int
,	O
yy	int
,	O
time_hour_offset	int
,	O
time_min_offset	int
)	O
,	O
(	O
(	O
fwidth	pointer
>=	O
MOONIMAGE_MIN	int
)	O
&&	O
(	O
fwidth	pointer
<=	O
MOONIMAGE_MAX	int
)	O
)	O
?	O
fwidth	pointer
:	O
rc_moonimage_lines	int
,	O
&	O
s2	pointer
)	O
;	O
if	O
(	O
k	int
)	O
if	O
(	O
s1	pointer
[	O
k	int
-	O
1	int
]	O
==	O
RC_NL2_CHAR	char
)	O
for	O
(	O
i	int
=	O
0	int
;	O
s2	pointer
[	O
i	int
]	O
;	O
i	int
++	O
)	O
if	O
(	O
s2	pointer
[	O
i	int
]	O
==	O
RC_NL_CHAR	char
)	O
s2	pointer
[	O
i	int
]	O
=	O
RC_NL2_CHAR	char
;	O
break	O
;	O
case	O
RC_BIO_CHAR	char
:	O
if	O
(	O
!	O
y	int
)	O
y	int
=	O
year	int
+	O
incr_year	int
-	O
decr_year	int
;	O
(	O
void	O
)	O
biorhythm	function
(	O
FALSE	O
,	O
rc_bio_axis_len	int
,	O
s2	pointer
,	O
d	int
,	O
m	int
,	O
y	int
,	O
dd	int
,	O
mm	int
,	O
yy	int
,	O
rc_bio_emo_lit	pointer
,	O
&	O
bio_emo_phase	int
,	O
&	O
bio_emo_waxes	int
,	O
rc_bio_int_lit	pointer
,	O
&	O
bio_int_phase	int
,	O
&	O
bio_int_waxes	int
,	O
rc_bio_phy_lit	pointer
,	O
&	O
bio_phy_phase	int
,	O
&	O
bio_phy_waxes	int
,	O
&	O
bio_critical_day	int
,	O
&	O
bio_positive_day	int
,	O
&	O
bio_negative_day	int
)	O
;	O
sprintf	function
(	O
bio_emo_ptext	array
,	O
"%4d%%%c"	pointer
,	O
abs	function
(	O
bio_emo_phase	int
)	O
,	O
(	O
abs	function
(	O
bio_emo_phase	int
)	O
==	O
100	int
)	O
?	O
*	O
BIO_STABLE	O
:	O
(	O
(	O
bio_emo_waxes	int
)	O
?	O
*	O
BIO_WAXES	O
:	O
*	O
BIO_WANES	O
)	O
)	O
;	O
ptr_char	pointer
=	O
bio_emo_ptext	array
+	O
1	int
;	O
while	O
(	O
isspace	function
(	O
*	O
ptr_char	pointer
)	O
)	O
*	O
ptr_char	pointer
++	O
=	O
'0'	O
;	O
if	O
(	O
bio_emo_phase	int
<	O
0	int
)	O
*	O
bio_emo_ptext	array
=	O
*	O
BIO_WANES	O
;	O
else	O
*	O
bio_emo_ptext	array
=	O
*	O
BIO_WAXES	O
;	O
sprintf	function
(	O
bio_int_ptext	array
,	O
"%4d%%%c"	pointer
,	O
abs	function
(	O
bio_int_phase	int
)	O
,	O
(	O
abs	function
(	O
bio_int_phase	int
)	O
==	O
100	int
)	O
?	O
*	O
BIO_STABLE	O
:	O
(	O
(	O
bio_int_waxes	int
)	O
?	O
*	O
BIO_WAXES	O
:	O
*	O
BIO_WANES	O
)	O
)	O
;	O
ptr_char	pointer
=	O
bio_int_ptext	array
+	O
1	int
;	O
while	O
(	O
isspace	function
(	O
*	O
ptr_char	pointer
)	O
)	O
*	O
ptr_char	pointer
++	O
=	O
'0'	O
;	O
if	O
(	O
bio_int_phase	int
<	O
0	int
)	O
*	O
bio_int_ptext	array
=	O
*	O
BIO_WANES	O
;	O
else	O
*	O
bio_int_ptext	array
=	O
*	O
BIO_WAXES	O
;	O
sprintf	function
(	O
bio_phy_ptext	array
,	O
"%4d%%%c"	pointer
,	O
abs	function
(	O
bio_phy_phase	int
)	O
,	O
(	O
abs	function
(	O
bio_phy_phase	int
)	O
==	O
100	int
)	O
?	O
*	O
BIO_STABLE	O
:	O
(	O
(	O
bio_phy_waxes	int
)	O
?	O
*	O
BIO_WAXES	O
:	O
*	O
BIO_WANES	O
)	O
)	O
;	O
ptr_char	pointer
=	O
bio_phy_ptext	array
+	O
1	int
;	O
while	O
(	O
isspace	function
(	O
*	O
ptr_char	pointer
)	O
)	O
*	O
ptr_char	pointer
++	O
=	O
'0'	O
;	O
if	O
(	O
bio_phy_phase	int
<	O
0	int
)	O
*	O
bio_phy_ptext	array
=	O
*	O
BIO_WANES	O
;	O
else	O
*	O
bio_phy_ptext	array
=	O
*	O
BIO_WAXES	O
;	O
sprintf	function
(	O
s2	pointer
,	O
"%d%c %d%c %d%c , %s=%s %s=%s %s=%s"	pointer
,	O
bio_critical_day	int
,	O
*	O
BIO_CRITICAL	O
,	O
bio_positive_day	int
,	O
*	O
BIO_WAXES	O
,	O
bio_negative_day	int
,	O
*	O
BIO_WANES	O
,	O
rc_bio_emo_lit	pointer
,	O
bio_emo_ptext	array
,	O
rc_bio_int_lit	pointer
,	O
bio_int_ptext	array
,	O
rc_bio_phy_lit	pointer
,	O
bio_phy_ptext	array
)	O
;	O
break	O
;	O
case	O
RC_BIO_BAR_CHAR	char
:	O
if	O
(	O
fwidth	pointer
>=	O
BIO_AXIS_MIN	int
||	O
fwidth	pointer
<=	O
BIO_AXIS_MAX	int
)	O
while	O
(	O
BIO_AXIS_MAX	int
%	O
fwidth	pointer
)	O
fwidth	pointer
--	O
;	O
if	O
(	O
!	O
y	int
)	O
y	int
=	O
year	int
+	O
incr_year	int
-	O
decr_year	int
;	O
s2	pointer
=	O
biorhythm	function
(	O
TRUE	O
,	O
(	O
fwidth	pointer
!=	O
SPECIAL_VALUE	O
)	O
?	O
fwidth	pointer
:	O
rc_bio_axis_len	int
,	O
s2	pointer
,	O
d	int
,	O
m	int
,	O
y	int
,	O
dd	int
,	O
mm	int
,	O
yy	int
,	O
rc_bio_emo_lit	pointer
,	O
&	O
bio_emo_phase	int
,	O
&	O
bio_emo_waxes	int
,	O
rc_bio_int_lit	pointer
,	O
&	O
bio_int_phase	int
,	O
&	O
bio_int_waxes	int
,	O
rc_bio_phy_lit	pointer
,	O
&	O
bio_phy_phase	int
,	O
&	O
bio_phy_waxes	int
,	O
&	O
bio_critical_day	int
,	O
&	O
bio_positive_day	int
,	O
&	O
bio_negative_day	int
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
i	int
=	O
0	int
;	O
if	O
(	O
(	O
!	O
k	int
&&	O
(	O
*	O
s2	pointer
==	O
RC_NL_CHAR	char
)	O
)	O
||	O
(	O
*	O
s2	pointer
==	O
RC_NL2_CHAR	char
)	O
)	O
i	int
++	O
;	O
while	O
(	O
s2	pointer
[	O
i	int
]	O
)	O
{	O
if	O
(	O
(	O
Uint	int
)	O
k	int
>=	O
maxlen_max	int
-	O
(	O
Uint	int
)	O
len_fn	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
s1	pointer
[	O
k	int
++	O
]	O
=	O
s6	pointer
[	O
kk	int
++	O
]	O
=	O
s2	pointer
[	O
i	int
++	O
]	O
;	O
}	O
}	O
if	O
(	O
!	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
)	O
ok	int
=	O
TRUE	O
;	O
}	O
is_obsolete_whitespace	int
=	O
TRUE	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
special_text_char	char
==	O
RC_TIME_CHAR	char
||	O
special_text_char	char
==	O
RC_TIME_TMI_CHAR	char
||	O
special_text_char	char
==	O
RC_TIME_HR_CHAR	char
||	O
special_text_char	char
==	O
RC_TIME_MI_CHAR	char
||	O
special_text_char	char
==	O
RC_TIME_AMPM_CHAR	char
||	O
special_text_char	char
==	O
RC_GMTIME_CHAR	char
||	O
special_text_char	char
==	O
RC_GMTIME_TMI_CHAR	char
||	O
special_text_char	char
==	O
RC_GMTIME_HR_CHAR	char
||	O
special_text_char	char
==	O
RC_GMTIME_MI_CHAR	char
||	O
special_text_char	char
==	O
RC_GMTIME_AMPM_CHAR	char
||	O
special_text_char	char
==	O
RC_LT_ZONE_OFFS_CHAR	char
||	O
special_text_char	char
==	O
RC_UT_ZONE_OFFS_CHAR	char
||	O
special_text_char	char
==	O
RC_DISTANCE_CHAR	char
||	O
special_text_char	char
==	O
RC_SUN_RISE_CHAR	char
||	O
special_text_char	char
==	O
RC_SUN_SET_CHAR	char
||	O
special_text_char	char
==	O
RC_SUN_DAY_CHAR	char
||	O
special_text_char	char
==	O
RC_SUN_NIGHT_CHAR	char
||	O
special_text_char	char
==	O
RC_MOON_RISE_CHAR	char
||	O
special_text_char	char
==	O
RC_MOON_SET_CHAR	char
||	O
special_text_char	char
==	O
RC_MOON_DAY_CHAR	char
||	O
special_text_char	char
==	O
RC_MOON_NIGHT_CHAR	char
||	O
special_text_char	char
==	O
RC_ENV_VAR_CHAR	char
||	O
special_text_char	char
==	O
RC_JDAYS_CHAR	char
||	O
special_text_char	char
==	O
RC_DAY_DIFF_CHAR	char
||	O
special_text_char	char
==	O
RC_WEEK_DIFF_CHAR	char
||	O
special_text_char	char
==	O
RC_MONTH_DIFF_CHAR	char
||	O
special_text_char	char
==	O
RC_YEAR_DIFF_CHAR	char
||	O
special_text_char	char
==	O
RC_HLS1S_CHAR	O
||	O
special_text_char	char
==	O
RC_HLS1E_CHAR	O
||	O
special_text_char	char
==	O
RC_HLS2S_CHAR	char
||	O
special_text_char	char
==	O
RC_HLS2E_CHAR	char
||	O
special_text_char	char
==	O
RC_HLS3S_CHAR	char
||	O
special_text_char	char
==	O
RC_HLS3E_CHAR	char
||	O
special_text_char	char
==	O
RC_HLS4S_CHAR	char
||	O
special_text_char	char
==	O
RC_HLS4E_CHAR	char
||	O
special_text_char	char
==	O
RC_HLS5S_CHAR	char
||	O
special_text_char	char
==	O
RC_HLS5E_CHAR	char
)	O
{	O
if	O
(	O
special_text_char	char
==	O
RC_TIME_CHAR	char
||	O
special_text_char	char
==	O
RC_TIME_TMI_CHAR	char
||	O
special_text_char	char
==	O
RC_TIME_HR_CHAR	char
||	O
special_text_char	char
==	O
RC_TIME_MI_CHAR	char
||	O
special_text_char	char
==	O
RC_TIME_AMPM_CHAR	char
||	O
special_text_char	char
==	O
RC_GMTIME_CHAR	char
||	O
special_text_char	char
==	O
RC_GMTIME_TMI_CHAR	char
||	O
special_text_char	char
==	O
RC_GMTIME_HR_CHAR	char
||	O
special_text_char	char
==	O
RC_GMTIME_MI_CHAR	char
||	O
special_text_char	char
==	O
RC_GMTIME_AMPM_CHAR	char
||	O
special_text_char	char
==	O
RC_LT_ZONE_OFFS_CHAR	char
||	O
special_text_char	char
==	O
RC_UT_ZONE_OFFS_CHAR	char
)	O
{	O
register	O
int	O
sign	int
=	O
0	int
;	O
register	O
int	O
state	pointer
=	O
1	int
;	O
register	O
int	O
digits	int
=	O
0	int
;	O
auto	O
Bool	int
skip	int
=	O
FALSE	O
;	O
auto	O
Bool	int
is_last	int
=	O
FALSE	O
;	O
auto	O
Bool	int
is_error	int
=	O
FALSE	O
;	O
auto	O
Bool	int
is_2error	int
=	O
FALSE	O
;	O
auto	O
Bool	int
time_sep_found	int
=	O
FALSE	O
;	O
auto	O
Bool	int
is_leading_zero	int
=	O
TRUE	O
;	O
auto	O
Bool	int
is_format_modifier_given	int
=	O
FALSE	O
;	O
auto	O
Bool	int
is_tzo	int
=	O
(	O
Bool	int
)	O
(	O
special_text_char	char
==	O
RC_LT_ZONE_OFFS_CHAR	char
||	O
special_text_char	char
==	O
RC_UT_ZONE_OFFS_CHAR	char
)	O
;	O
auto	O
Bool	int
is_gmt	int
=	O
(	O
Bool	int
)	O
(	O
special_text_char	char
==	O
RC_GMTIME_CHAR	char
||	O
special_text_char	char
==	O
RC_GMTIME_HR_CHAR	char
||	O
special_text_char	char
==	O
RC_GMTIME_MI_CHAR	char
||	O
special_text_char	char
==	O
RC_GMTIME_TMI_CHAR	char
||	O
special_text_char	char
==	O
RC_GMTIME_AMPM_CHAR	char
)	O
;	O
i	int
=	O
0	int
;	O
j	int
++	O
;	O
if	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
==	O
RC_12_HOURS_FORMAT_CHAR	char
)	O
{	O
j	int
++	O
;	O
switch	O
(	O
special_text_char	char
)	O
{	O
case	O
RC_TIME_CHAR	char
:	O
case	O
RC_GMTIME_CHAR	char
:	O
case	O
RC_TIME_HR_CHAR	char
:	O
case	O
RC_GMTIME_HR_CHAR	char
:	O
is_format_modifier_given	int
=	O
TRUE	O
;	O
break	O
;	O
default	O
:	O
;	O
}	O
}	O
while	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
&&	O
!	O
isspace	function
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
)	O
)	O
{	O
skip	int
=	O
FALSE	O
;	O
switch	O
(	O
state	pointer
)	O
{	O
case	O
1	int
:	O
if	O
(	O
!	O
isdigit	function
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
)	O
)	O
{	O
if	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
==	O
*	O
ASC_LIT	pointer
||	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
==	O
*	O
DES_LIT	pointer
)	O
{	O
if	O
(	O
sign	int
||	O
time_sep_found	int
)	O
state	pointer
=	O
0	int
;	O
else	O
sign	int
++	O
;	O
break	O
;	O
}	O
else	O
state	pointer
++	O
;	O
}	O
else	O
{	O
if	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
==	O
'0'	O
)	O
{	O
if	O
(	O
is_leading_zero	int
)	O
{	O
skip	int
=	O
TRUE	O
;	O
break	O
;	O
}	O
digits	int
++	O
;	O
}	O
else	O
digits	int
++	O
;	O
is_leading_zero	int
=	O
FALSE	O
;	O
break	O
;	O
}	O
case	O
2	int
:	O
if	O
(	O
!	O
digits	int
&&	O
!	O
is_leading_zero	int
)	O
state	pointer
=	O
0	int
;	O
else	O
if	O
(	O
!	O
time_sep_found	int
)	O
{	O
if	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
==	O
*	O
time_sep	pointer
||	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
==	O
*	O
DEFAULT_TIME_SEP	pointer
)	O
{	O
if	O
(	O
digits	int
>	O
2	int
)	O
state	pointer
=	O
0	int
;	O
else	O
{	O
time_sep_found	int
=	O
TRUE	O
;	O
digits	int
=	O
0	int
;	O
state	pointer
--	O
;	O
}	O
}	O
else	O
state	pointer
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
digits	int
>	O
4	int
)	O
state	pointer
=	O
0	int
;	O
else	O
is_last	int
=	O
TRUE	O
;	O
}	O
break	O
;	O
default	O
:	O
state	pointer
=	O
0	int
;	O
}	O
if	O
(	O
state	pointer
&&	O
!	O
skip	int
)	O
s2	pointer
[	O
i	int
++	O
]	O
=	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
;	O
j	int
++	O
;	O
}	O
if	O
(	O
!	O
state	pointer
||	O
is_last	int
||	O
(	O
i	int
&&	O
!	O
time_sep_found	int
&&	O
!	O
is_leading_zero	int
&&	O
!	O
digits	int
)	O
||	O
(	O
time_sep_found	int
&&	O
(	O
digits	int
>	O
2	int
)	O
)	O
||	O
(	O
(	O
state	pointer
==	O
1	int
)	O
&&	O
(	O
digits	int
>	O
4	int
)	O
)	O
)	O
is_error	int
=	O
TRUE	O
;	O
j	int
--	O
;	O
if	O
(	O
i	int
&&	O
!	O
is_error	int
)	O
{	O
s2	pointer
[	O
i	int
]	O
=	O
'\0'	O
;	O
i	int
=	O
atoi	function
(	O
s2	pointer
)	O
;	O
if	O
(	O
time_sep_found	int
)	O
{	O
i	int
*=	O
MINS_PER_HOUR	int
;	O
ptr_char	pointer
=	O
strchr	function
(	O
s2	pointer
,	O
*	O
time_sep	pointer
)	O
;	O
if	O
(	O
ptr_char	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
ptr_char	pointer
=	O
strchr	function
(	O
s2	pointer
,	O
*	O
DEFAULT_TIME_SEP	pointer
)	O
;	O
if	O
(	O
*	O
++	O
ptr_char	pointer
)	O
{	O
state	pointer
=	O
atoi	function
(	O
ptr_char	pointer
)	O
;	O
if	O
(	O
abs	function
(	O
state	pointer
)	O
>=	O
MINS_PER_HOUR	int
)	O
is_error	int
=	O
TRUE	O
;	O
else	O
if	O
(	O
!	O
i	int
)	O
{	O
if	O
(	O
*	O
s2	pointer
==	O
*	O
DES_LIT	pointer
)	O
i	int
=	O
-	O
state	pointer
;	O
else	O
i	int
=	O
state	pointer
;	O
}	O
else	O
if	O
(	O
SGN	O
(	O
i	int
)	O
<	O
0	int
)	O
i	int
-=	O
state	pointer
;	O
else	O
i	int
+=	O
state	pointer
;	O
}	O
}	O
}	O
if	O
(	O
!	O
is_error	int
)	O
{	O
register	O
int	O
the_time	int
=	O
0	int
;	O
auto	O
int	O
gmt_day	int
;	O
auto	O
int	O
gmt_month	int
;	O
auto	O
int	O
gmt_year	int
;	O
auto	O
char	O
*	O
time_suffix	pointer
=	O
""	pointer
;	O
auto	O
Bool	int
is_am_pm	int
=	O
(	O
Bool	int
)	O
(	O
special_text_char	char
==	O
RC_TIME_AMPM_CHAR	char
||	O
special_text_char	char
==	O
RC_GMTIME_AMPM_CHAR	char
)	O
;	O
if	O
(	O
is_tzo	int
)	O
{	O
if	O
(	O
special_text_char	char
==	O
RC_LT_ZONE_OFFS_CHAR	char
)	O
{	O
if	O
(	O
gmt_loc_diff	int
>	O
0	int
)	O
the_time	int
=	O
(	O
MINS_PER_DAY	int
-	O
HHMM2MM	O
(	O
act_hour	int
,	O
act_min	int
)	O
)	O
+	O
HHMM2MM	O
(	O
gmt_hour	int
,	O
gmt_min	int
)	O
;	O
else	O
if	O
(	O
gmt_loc_diff	int
<	O
0	int
)	O
the_time	int
=	O
(	O
MINS_PER_DAY	int
-	O
HHMM2MM	O
(	O
gmt_hour	int
,	O
gmt_min	int
)	O
)	O
+	O
HHMM2MM	O
(	O
act_hour	int
,	O
act_min	int
)	O
;	O
else	O
the_time	int
=	O
HHMM2MM	O
(	O
act_hour	int
,	O
act_min	int
)	O
-	O
HHMM2MM	O
(	O
gmt_hour	int
,	O
gmt_min	int
)	O
;	O
}	O
sign	int
=	O
1	int
;	O
the_time	int
+=	O
i	int
;	O
if	O
(	O
the_time	int
<	O
0	int
)	O
{	O
sign	int
=	O
-	O
sign	int
;	O
the_time	int
=	O
-	O
the_time	int
;	O
}	O
i	int
=	O
the_time	int
%	O
MINS_PER_HOUR	int
;	O
the_time	int
/=	O
MINS_PER_HOUR	int
;	O
}	O
else	O
if	O
(	O
!	O
is_gmt	int
)	O
the_time	int
=	O
HHMM2MM	O
(	O
act_hour	int
,	O
act_min	int
)	O
+	O
i	int
;	O
else	O
{	O
the_time	int
=	O
HHMM2MM	O
(	O
gmt_hour	int
,	O
gmt_min	int
)	O
+	O
i	int
;	O
if	O
(	O
d_between	function
(	O
d	int
,	O
m	int
,	O
year	int
+	O
incr_year	int
-	O
decr_year	int
,	O
buf_gd	int
,	O
buf_gm	int
,	O
buf_gy	int
)	O
)	O
{	O
gmt_day	int
=	O
d	int
;	O
gmt_month	int
=	O
m	int
;	O
gmt_year	int
=	O
year	int
+	O
incr_year	int
-	O
decr_year	int
;	O
if	O
(	O
gmt_loc_diff	int
>	O
0	int
)	O
{	O
(	O
void	O
)	O
next_date	function
(	O
&	O
gmt_day	int
,	O
&	O
gmt_month	int
,	O
&	O
gmt_year	int
)	O
;	O
if	O
(	O
gmt_year	int
>	O
YEAR_MAX	int
)	O
is_2error	int
=	O
TRUE	O
;	O
}	O
else	O
if	O
(	O
gmt_loc_diff	int
<	O
0	int
)	O
{	O
(	O
void	O
)	O
prev_date	function
(	O
&	O
gmt_day	int
,	O
&	O
gmt_month	int
,	O
&	O
gmt_year	int
)	O
;	O
if	O
(	O
gmt_year	int
<	O
YEAR_MIN	int
)	O
is_2error	int
=	O
TRUE	O
;	O
}	O
}	O
else	O
{	O
gmt_day	int
=	O
buf_gd	int
;	O
gmt_month	int
=	O
buf_gm	int
;	O
gmt_year	int
=	O
buf_gy	int
;	O
}	O
}	O
if	O
(	O
!	O
is_error	int
&&	O
!	O
is_2error	int
&&	O
!	O
is_tzo	int
)	O
{	O
i	int
=	O
the_time	int
%	O
MINS_PER_HOUR	int
;	O
the_time	int
/=	O
MINS_PER_HOUR	int
;	O
if	O
(	O
the_time	int
>=	O
HOURS_PER_DAY	int
)	O
while	O
(	O
the_time	int
>=	O
HOURS_PER_DAY	int
)	O
{	O
the_time	int
-=	O
HOURS_PER_DAY	int
;	O
if	O
(	O
is_gmt	int
)	O
{	O
(	O
void	O
)	O
next_date	function
(	O
&	O
gmt_day	int
,	O
&	O
gmt_month	int
,	O
&	O
gmt_year	int
)	O
;	O
if	O
(	O
gmt_year	int
>	O
YEAR_MAX	int
)	O
is_2error	int
=	O
TRUE	O
;	O
}	O
}	O
else	O
if	O
(	O
i	int
<	O
0	int
||	O
the_time	int
<	O
0	int
)	O
{	O
if	O
(	O
the_time	int
<=	O
0	int
)	O
the_time	int
--	O
;	O
while	O
(	O
the_time	int
<	O
0	int
)	O
{	O
the_time	int
+=	O
HOURS_PER_DAY	int
;	O
if	O
(	O
is_gmt	int
)	O
{	O
(	O
void	O
)	O
prev_date	function
(	O
&	O
gmt_day	int
,	O
&	O
gmt_month	int
,	O
&	O
gmt_year	int
)	O
;	O
if	O
(	O
gmt_year	int
<	O
YEAR_MIN	int
)	O
is_2error	int
=	O
TRUE	O
;	O
}	O
}	O
if	O
(	O
i	int
)	O
i	int
=	O
MINS_PER_HOUR	int
+	O
i	int
;	O
else	O
the_time	int
++	O
;	O
}	O
}	O
if	O
(	O
!	O
is_error	int
&&	O
!	O
is_2error	int
)	O
{	O
if	O
(	O
is_am_pm	int
||	O
is_format_modifier_given	int
)	O
{	O
if	O
(	O
the_time	int
>=	O
HOURS_PER_HALF_DAY	int
)	O
{	O
time_suffix	pointer
=	O
_	O
(	O
"pm"	pointer
)	O
;	O
if	O
(	O
!	O
is_am_pm	int
)	O
the_time	int
-=	O
HOURS_PER_HALF_DAY	int
;	O
}	O
else	O
time_suffix	pointer
=	O
_	O
(	O
"am"	pointer
)	O
;	O
}	O
if	O
(	O
transform_year	int
)	O
{	O
gmt_year	int
=	O
gmt_year	int
-	O
transform_year	int
;	O
if	O
(	O
(	O
gmt_year	int
>=	O
0	int
)	O
&&	O
(	O
transform_year	int
>	O
0	int
)	O
)	O
gmt_year	int
++	O
;	O
}	O
*	O
s2	pointer
=	O
'\0'	O
;	O
switch	O
(	O
special_text_char	char
)	O
{	O
case	O
RC_TIME_CHAR	char
:	O
sprintf	function
(	O
buffer	array
,	O
"%02d%s%02d%s"	pointer
,	O
the_time	int
,	O
time_sep	pointer
,	O
i	int
,	O
time_suffix	pointer
)	O
;	O
break	O
;	O
case	O
RC_GMTIME_CHAR	char
:	O
sprintf	function
(	O
buffer	array
,	O
"%02d%s%02d%s/%02d-%s-%0*d"	pointer
,	O
the_time	int
,	O
time_sep	pointer
,	O
i	int
,	O
time_suffix	pointer
,	O
gmt_day	int
,	O
short_month_name	function
(	O
gmt_month	int
)	O
,	O
len_year_max	int
,	O
gmt_year	int
)	O
;	O
break	O
;	O
case	O
RC_TIME_TMI_CHAR	char
:	O
(	O
void	O
)	O
use_format	function
(	O
&	O
s2	pointer
,	O
0	int
,	O
""	pointer
,	O
the_time	int
*	O
MINS_PER_HOUR	int
+	O
i	int
,	O
TRUE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
break	O
;	O
case	O
RC_GMTIME_TMI_CHAR	char
:	O
{	O
sprintf	function
(	O
buffer	array
,	O
"/%02d-%s-%0*d"	pointer
,	O
gmt_day	int
,	O
short_month_name	function
(	O
gmt_month	int
)	O
,	O
len_year_max	int
,	O
gmt_year	int
)	O
;	O
(	O
void	O
)	O
use_format	function
(	O
&	O
s2	pointer
,	O
0	int
,	O
""	pointer
,	O
the_time	int
*	O
MINS_PER_HOUR	int
+	O
i	int
,	O
TRUE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
strcat	function
(	O
s2	pointer
,	O
buffer	array
)	O
;	O
}	O
break	O
;	O
case	O
RC_TIME_HR_CHAR	char
:	O
case	O
RC_GMTIME_HR_CHAR	char
:	O
(	O
void	O
)	O
use_format	function
(	O
&	O
s2	pointer
,	O
0	int
,	O
""	pointer
,	O
the_time	int
,	O
TRUE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
break	O
;	O
case	O
RC_TIME_MI_CHAR	char
:	O
case	O
RC_GMTIME_MI_CHAR	char
:	O
(	O
void	O
)	O
use_format	function
(	O
&	O
s2	pointer
,	O
0	int
,	O
""	pointer
,	O
i	int
,	O
TRUE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
break	O
;	O
case	O
RC_TIME_AMPM_CHAR	char
:	O
case	O
RC_GMTIME_AMPM_CHAR	char
:	O
(	O
void	O
)	O
use_format	function
(	O
&	O
s2	pointer
,	O
0	int
,	O
time_suffix	pointer
,	O
0	int
,	O
FALSE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
break	O
;	O
case	O
RC_LT_ZONE_OFFS_CHAR	char
:	O
case	O
RC_UT_ZONE_OFFS_CHAR	char
:	O
sprintf	function
(	O
buffer	array
,	O
"%s%02d%02d"	pointer
,	O
(	O
sign	int
>	O
0	int
)	O
?	O
ASC_LIT	pointer
:	O
DES_LIT	pointer
,	O
the_time	int
,	O
i	int
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
}	O
if	O
(	O
!	O
is_error	int
&&	O
!	O
is_2error	int
)	O
{	O
if	O
(	O
!	O
*	O
s2	pointer
)	O
(	O
void	O
)	O
use_format	function
(	O
&	O
s2	pointer
,	O
0	int
,	O
buffer	array
,	O
0	int
,	O
FALSE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
}	O
else	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len_year_max	int
;	O
i	int
++	O
)	O
buffer	array
[	O
i	int
]	O
=	O
*	O
RC_INVALID_PARAM_TEXT	pointer
;	O
buffer	array
[	O
i	int
]	O
=	O
'\0'	O
;	O
switch	O
(	O
special_text_char	char
)	O
{	O
case	O
RC_TIME_CHAR	char
:	O
sprintf	function
(	O
s2	pointer
,	O
"%s%s%s"	pointer
,	O
(	O
is_error	int
)	O
?	O
RC_INVALID_PARAM_TEXT	pointer
:	O
RC_INVALID_VALUE_TEXT	pointer
,	O
time_sep	pointer
,	O
(	O
is_error	int
)	O
?	O
RC_INVALID_PARAM_TEXT	pointer
:	O
RC_INVALID_VALUE_TEXT	pointer
)	O
;	O
break	O
;	O
case	O
RC_GMTIME_CHAR	char
:	O
sprintf	function
(	O
s2	pointer
,	O
"%s%s%s/%s-%s%c-%s"	pointer
,	O
(	O
is_error	int
)	O
?	O
RC_INVALID_PARAM_TEXT	pointer
:	O
RC_INVALID_VALUE_TEXT	pointer
,	O
time_sep	pointer
,	O
(	O
is_error	int
)	O
?	O
RC_INVALID_PARAM_TEXT	pointer
:	O
RC_INVALID_VALUE_TEXT	pointer
,	O
RC_INVALID_PARAM_TEXT	pointer
,	O
RC_INVALID_PARAM_TEXT	pointer
,	O
*	O
RC_INVALID_PARAM_TEXT	pointer
,	O
buffer	array
)	O
;	O
break	O
;	O
case	O
RC_TIME_TMI_CHAR	char
:	O
sprintf	function
(	O
s2	pointer
,	O
"%s"	pointer
,	O
(	O
is_error	int
)	O
?	O
RC_INVALID_PARAM_TEXT	pointer
:	O
RC_INVALID_VALUE_TEXT	pointer
)	O
;	O
break	O
;	O
case	O
RC_GMTIME_TMI_CHAR	char
:	O
sprintf	function
(	O
s2	pointer
,	O
"%s/%s-%s%c-%s"	pointer
,	O
(	O
is_error	int
)	O
?	O
RC_INVALID_PARAM_TEXT	pointer
:	O
RC_INVALID_VALUE_TEXT	pointer
,	O
RC_INVALID_PARAM_TEXT	pointer
,	O
RC_INVALID_PARAM_TEXT	pointer
,	O
*	O
RC_INVALID_PARAM_TEXT	pointer
,	O
buffer	array
)	O
;	O
break	O
;	O
case	O
RC_TIME_HR_CHAR	char
:	O
case	O
RC_GMTIME_HR_CHAR	char
:	O
case	O
RC_TIME_MI_CHAR	char
:	O
case	O
RC_GMTIME_MI_CHAR	char
:	O
case	O
RC_TIME_AMPM_CHAR	char
:	O
case	O
RC_GMTIME_AMPM_CHAR	char
:	O
sprintf	function
(	O
s2	pointer
,	O
"%s"	pointer
,	O
(	O
is_error	int
)	O
?	O
RC_INVALID_PARAM_TEXT	pointer
:	O
RC_INVALID_VALUE_TEXT	pointer
)	O
;	O
break	O
;	O
case	O
RC_LT_ZONE_OFFS_CHAR	char
:	O
case	O
RC_UT_ZONE_OFFS_CHAR	char
:	O
sprintf	function
(	O
s2	pointer
,	O
"+%s%s"	pointer
,	O
(	O
is_error	int
)	O
?	O
RC_INVALID_PARAM_TEXT	pointer
:	O
RC_INVALID_VALUE_TEXT	pointer
,	O
(	O
is_error	int
)	O
?	O
RC_INVALID_PARAM_TEXT	pointer
:	O
RC_INVALID_VALUE_TEXT	pointer
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
strcpy	function
(	O
buffer	array
,	O
s2	pointer
)	O
;	O
*	O
s2	pointer
=	O
'\0'	O
;	O
(	O
void	O
)	O
use_format	function
(	O
&	O
s2	pointer
,	O
0	int
,	O
buffer	array
,	O
0	int
,	O
FALSE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
}	O
is_obsolete_whitespace	int
=	O
TRUE	O
;	O
}	O
else	O
if	O
(	O
special_text_char	char
==	O
RC_DISTANCE_CHAR	char
||	O
special_text_char	char
==	O
RC_SUN_RISE_CHAR	char
||	O
special_text_char	char
==	O
RC_SUN_SET_CHAR	char
||	O
special_text_char	char
==	O
RC_SUN_DAY_CHAR	char
||	O
special_text_char	char
==	O
RC_SUN_NIGHT_CHAR	char
||	O
special_text_char	char
==	O
RC_MOON_RISE_CHAR	char
||	O
special_text_char	char
==	O
RC_MOON_SET_CHAR	char
||	O
special_text_char	char
==	O
RC_MOON_DAY_CHAR	char
||	O
special_text_char	char
==	O
RC_MOON_NIGHT_CHAR	char
)	O
{	O
auto	O
double	O
the_time	int
=	O
0.0	int
;	O
auto	O
double	O
the_error	double
;	O
auto	O
int	O
dots	int
;	O
auto	O
int	O
sign	int
;	O
register	O
int	O
split	int
;	O
register	O
int	O
state	pointer
;	O
register	O
int	O
digits	int
;	O
register	O
int	O
decimals	int
;	O
register	O
int	O
num_coord	int
;	O
register	O
int	O
parsed_coordinates	int
=	O
(	O
special_text_char	char
==	O
RC_DISTANCE_CHAR	char
)	O
?	O
2	int
:	O
1	int
;	O
register	O
int	O
dist_mode	int
=	O
0	int
;	O
register	O
int	O
aobj_mode	int
=	O
5	int
;	O
register	O
int	O
astronomical_object	int
=	O
AOBJ_NONE	O
;	O
auto	O
char	O
*	O
sep	pointer
;	O
auto	O
char	O
*	O
time_suffix	pointer
=	O
""	pointer
;	O
auto	O
Bool	int
skip	int
;	O
auto	O
Bool	int
is_last	int
;	O
auto	O
Bool	int
is_error	int
;	O
auto	O
Bool	int
is_decimal	int
;	O
auto	O
Bool	int
got_lat_min	int
;	O
auto	O
Bool	int
got_lon_min	int
;	O
auto	O
Bool	int
time_sep_found	int
;	O
auto	O
Bool	int
is_leading_zero	int
;	O
auto	O
Bool	int
is_format_modifier_given	int
=	O
FALSE	O
;	O
auto	O
Bool	int
is_rise_set	int
=	O
(	O
Bool	int
)	O
(	O
special_text_char	char
==	O
RC_SUN_RISE_CHAR	char
||	O
special_text_char	char
==	O
RC_SUN_SET_CHAR	char
||	O
special_text_char	char
==	O
RC_MOON_RISE_CHAR	char
||	O
special_text_char	char
==	O
RC_MOON_SET_CHAR	char
)	O
;	O
j	int
++	O
;	O
if	O
(	O
special_text_char	char
==	O
RC_DISTANCE_CHAR	char
)	O
{	O
if	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
==	O
RC_SMILES_FORMAT_CHAR	O
)	O
{	O
j	int
++	O
;	O
is_format_modifier_given	int
=	O
TRUE	O
;	O
}	O
if	O
(	O
isdigit	function
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
)	O
)	O
{	O
dist_mode	int
=	O
CHR2DIG	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
)	O
;	O
if	O
(	O
dist_mode	int
<=	O
2	int
)	O
j	int
++	O
;	O
else	O
dist_mode	int
=	O
0	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
special_text_char	char
==	O
RC_SUN_RISE_CHAR	char
||	O
special_text_char	char
==	O
RC_SUN_SET_CHAR	char
||	O
special_text_char	char
==	O
RC_SUN_DAY_CHAR	char
||	O
special_text_char	char
==	O
RC_SUN_NIGHT_CHAR	char
)	O
astronomical_object	int
=	O
AOBJ_SUN	int
;	O
else	O
astronomical_object	int
=	O
AOBJ_MOON	int
;	O
if	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
==	O
RC_12_HOURS_FORMAT_CHAR	char
)	O
{	O
j	int
++	O
;	O
is_format_modifier_given	int
=	O
TRUE	O
;	O
}	O
if	O
(	O
isdigit	function
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
)	O
)	O
{	O
aobj_mode	int
=	O
CHR2DIG	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
)	O
;	O
j	int
++	O
;	O
}	O
else	O
if	O
(	O
islower	function
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
)	O
)	O
{	O
aobj_mode	int
=	O
IDX	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
)	O
+	O
10	int
;	O
j	int
++	O
;	O
}	O
else	O
if	O
(	O
isupper	function
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
)	O
)	O
{	O
aobj_mode	int
=	O
IDX	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
)	O
+	O
36	int
;	O
if	O
(	O
(	O
(	O
astronomical_object	int
==	O
AOBJ_SUN	int
)	O
&&	O
(	O
aobj_mode	int
<=	O
53	int
)	O
)	O
||	O
(	O
(	O
astronomical_object	int
==	O
AOBJ_MOON	int
)	O
&&	O
(	O
aobj_mode	int
<=	O
60	int
)	O
)	O
)	O
j	int
++	O
;	O
else	O
aobj_mode	int
=	O
61	int
;	O
}	O
}	O
if	O
(	O
astronomical_object	int
==	O
AOBJ_NONE	O
)	O
sep	pointer
=	O
_	O
(	O
"d'\""	pointer
)	O
;	O
else	O
if	O
(	O
is_rise_set	int
&&	O
(	O
aobj_oformat	array
[	O
aobj_mode	int
]	O
[	O
astronomical_object	int
]	O
.	O
error_format	char
==	O
ERR_DDD	int
)	O
)	O
sep	pointer
=	O
_	O
(	O
"d'\""	pointer
)	O
;	O
else	O
if	O
(	O
!	O
is_rise_set	int
||	O
aobj_oformat	array
[	O
aobj_mode	int
]	O
[	O
astronomical_object	int
]	O
.	O
error_format	char
==	O
ERR_TTT	int
)	O
sep	pointer
=	O
_	O
(	O
"h'\""	pointer
)	O
;	O
else	O
sep	pointer
=	O
time_sep	pointer
;	O
LABEL_get_second_coordinate	O
:	O
the_error	double
=	O
0.0	int
;	O
num_coord	int
=	O
state	pointer
=	O
1	int
;	O
i	int
=	O
dots	int
=	O
sign	int
=	O
split	int
=	O
digits	int
=	O
decimals	int
=	O
0	int
;	O
is_leading_zero	int
=	O
TRUE	O
;	O
is_last	int
=	O
got_lat_min	int
=	O
got_lon_min	int
=	O
FALSE	O
;	O
is_error	int
=	O
is_decimal	int
=	O
time_sep_found	int
=	O
FALSE	O
;	O
coor1	pointer
->	O
lon_deg	int
=	O
coor1	pointer
->	O
lon_min	int
=	O
coor1	pointer
->	O
lon_sec	int
=	O
0	int
;	O
coor1	pointer
->	O
lat_deg	int
=	O
coor1	pointer
->	O
lat_min	int
=	O
coor1	pointer
->	O
lat_sec	int
=	O
0	int
;	O
if	O
(	O
special_text_char	char
==	O
RC_DISTANCE_CHAR	char
)	O
coor1	pointer
->	O
the_mode	int
=	O
dist_mode	int
;	O
else	O
coor1	pointer
->	O
the_mode	int
=	O
aobj_mode	int
;	O
coor1	pointer
->	O
meters_above_sea_level	int
=	O
coor1	pointer
->	O
time_zone_in_mins	int
=	O
0	int
;	O
while	O
(	O
(	O
(	O
special_text_char	char
!=	O
RC_DISTANCE_CHAR	char
)	O
&&	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
&&	O
!	O
isspace	function
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
)	O
)	O
||	O
(	O
(	O
special_text_char	char
==	O
RC_DISTANCE_CHAR	char
)	O
&&	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
&&	O
!	O
isspace	function
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
)	O
&&	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
!=	O
*	O
RC_COORDINATE_SEP	pointer
)	O
)	O
)	O
{	O
skip	int
=	O
FALSE	O
;	O
switch	O
(	O
state	pointer
)	O
{	O
case	O
1	int
:	O
if	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
==	O
*	O
ASC_LIT	pointer
||	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
==	O
*	O
DES_LIT	pointer
)	O
state	pointer
++	O
;	O
else	O
state	pointer
=	O
0	int
;	O
break	O
;	O
case	O
2	int
:	O
if	O
(	O
!	O
isdigit	function
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
)	O
)	O
state	pointer
++	O
;	O
else	O
{	O
digits	int
++	O
;	O
break	O
;	O
}	O
case	O
3	int
:	O
if	O
(	O
!	O
decimals	int
&&	O
(	O
(	O
(	O
num_coord	int
==	O
1	int
)	O
&&	O
(	O
digits	int
!=	O
2	int
)	O
&&	O
(	O
digits	int
!=	O
4	int
)	O
&&	O
(	O
digits	int
!=	O
6	int
)	O
)	O
||	O
(	O
(	O
num_coord	int
==	O
2	int
)	O
&&	O
(	O
digits	int
!=	O
3	int
)	O
&&	O
(	O
digits	int
!=	O
5	int
)	O
&&	O
(	O
digits	int
!=	O
7	int
)	O
)	O
||	O
(	O
(	O
num_coord	int
==	O
3	int
)	O
&&	O
(	O
digits	int
>	O
4	int
)	O
)	O
)	O
)	O
state	pointer
=	O
0	int
;	O
else	O
if	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
==	O
'.'	O
)	O
{	O
if	O
(	O
dots	int
)	O
state	pointer
=	O
0	int
;	O
else	O
{	O
if	O
(	O
(	O
(	O
num_coord	int
==	O
1	int
)	O
&&	O
(	O
split	int
<=	O
2	int
)	O
)	O
||	O
(	O
(	O
num_coord	int
==	O
2	int
)	O
&&	O
(	O
split	int
-	O
is_decimal	int
<=	O
5	int
)	O
)	O
)	O
{	O
s2	pointer
[	O
i	int
++	O
]	O
=	O
'0'	O
;	O
s2	pointer
[	O
i	int
++	O
]	O
=	O
*	O
SPLIT_SEP	pointer
;	O
if	O
(	O
(	O
(	O
num_coord	int
==	O
1	int
)	O
&&	O
(	O
split	int
==	O
1	int
)	O
)	O
||	O
(	O
(	O
num_coord	int
==	O
2	int
)	O
&&	O
(	O
split	int
-	O
is_decimal	int
==	O
4	int
)	O
)	O
)	O
{	O
s2	pointer
[	O
i	int
++	O
]	O
=	O
'0'	O
;	O
s2	pointer
[	O
i	int
++	O
]	O
=	O
*	O
SPLIT_SEP	pointer
;	O
split	int
++	O
;	O
}	O
split	int
++	O
;	O
}	O
dots	int
++	O
;	O
is_decimal	int
=	O
TRUE	O
;	O
decimals	int
=	O
!	O
(	O
digits	int
=	O
0	int
)	O
;	O
state	pointer
--	O
;	O
}	O
}	O
else	O
if	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
==	O
*	O
ASC_LIT	pointer
||	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
==	O
*	O
DES_LIT	pointer
)	O
{	O
if	O
(	O
decimals	int
&&	O
!	O
digits	int
)	O
state	pointer
=	O
0	int
;	O
else	O
{	O
if	O
(	O
s2	pointer
[	O
i	int
-	O
1	int
]	O
!=	O
*	O
SPLIT_SEP	pointer
)	O
{	O
split	int
++	O
;	O
s2	pointer
[	O
i	int
++	O
]	O
=	O
*	O
SPLIT_SEP	pointer
;	O
}	O
if	O
(	O
(	O
(	O
num_coord	int
==	O
1	int
)	O
&&	O
(	O
split	int
<=	O
2	int
)	O
)	O
||	O
(	O
(	O
num_coord	int
==	O
2	int
)	O
&&	O
(	O
split	int
-	O
is_decimal	int
<=	O
5	int
)	O
)	O
)	O
{	O
s2	pointer
[	O
i	int
++	O
]	O
=	O
'0'	O
;	O
s2	pointer
[	O
i	int
++	O
]	O
=	O
*	O
SPLIT_SEP	pointer
;	O
if	O
(	O
(	O
(	O
num_coord	int
==	O
1	int
)	O
&&	O
(	O
split	int
==	O
1	int
)	O
)	O
||	O
(	O
(	O
num_coord	int
==	O
2	int
)	O
&&	O
(	O
split	int
-	O
is_decimal	int
==	O
4	int
)	O
)	O
)	O
{	O
s2	pointer
[	O
i	int
++	O
]	O
=	O
'0'	O
;	O
s2	pointer
[	O
i	int
++	O
]	O
=	O
*	O
SPLIT_SEP	pointer
;	O
split	int
++	O
;	O
}	O
split	int
++	O
;	O
}	O
decimals	int
=	O
dots	int
=	O
digits	int
=	O
0	int
;	O
num_coord	int
++	O
;	O
state	pointer
--	O
;	O
}	O
}	O
else	O
if	O
(	O
(	O
num_coord	int
>	O
1	int
)	O
&&	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
==	O
*	O
SPLIT_SEP	pointer
)	O
)	O
{	O
if	O
(	O
decimals	int
&&	O
!	O
digits	int
)	O
state	pointer
=	O
0	int
;	O
else	O
{	O
if	O
(	O
split	int
-	O
is_decimal	int
<=	O
5	int
)	O
{	O
s2	pointer
[	O
i	int
++	O
]	O
=	O
'0'	O
;	O
s2	pointer
[	O
i	int
++	O
]	O
=	O
*	O
SPLIT_SEP	pointer
;	O
if	O
(	O
split	int
-	O
is_decimal	int
==	O
4	int
)	O
{	O
s2	pointer
[	O
i	int
++	O
]	O
=	O
'0'	O
;	O
s2	pointer
[	O
i	int
++	O
]	O
=	O
*	O
SPLIT_SEP	pointer
;	O
split	int
++	O
;	O
}	O
split	int
++	O
;	O
}	O
digits	int
=	O
0	int
;	O
state	pointer
++	O
;	O
}	O
}	O
else	O
state	pointer
=	O
0	int
;	O
break	O
;	O
case	O
4	int
:	O
if	O
(	O
!	O
isdigit	function
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
)	O
)	O
{	O
if	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
==	O
*	O
ASC_LIT	pointer
||	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
==	O
*	O
DES_LIT	pointer
)	O
{	O
if	O
(	O
sign	int
||	O
time_sep_found	int
)	O
state	pointer
=	O
0	int
;	O
else	O
sign	int
++	O
;	O
break	O
;	O
}	O
else	O
state	pointer
++	O
;	O
}	O
else	O
{	O
if	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
==	O
'0'	O
)	O
{	O
if	O
(	O
is_leading_zero	int
)	O
{	O
skip	int
=	O
TRUE	O
;	O
break	O
;	O
}	O
digits	int
++	O
;	O
}	O
else	O
digits	int
++	O
;	O
is_leading_zero	int
=	O
FALSE	O
;	O
break	O
;	O
}	O
case	O
5	int
:	O
if	O
(	O
!	O
digits	int
&&	O
!	O
is_leading_zero	int
)	O
state	pointer
=	O
0	int
;	O
else	O
if	O
(	O
!	O
time_sep_found	int
)	O
{	O
if	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
==	O
*	O
time_sep	pointer
||	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
==	O
*	O
DEFAULT_TIME_SEP	pointer
)	O
{	O
if	O
(	O
digits	int
>	O
2	int
)	O
state	pointer
=	O
0	int
;	O
else	O
{	O
time_sep_found	int
=	O
TRUE	O
;	O
digits	int
=	O
0	int
;	O
state	pointer
--	O
;	O
}	O
}	O
else	O
state	pointer
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
digits	int
>	O
4	int
)	O
state	pointer
=	O
0	int
;	O
else	O
is_last	int
=	O
TRUE	O
;	O
}	O
if	O
(	O
!	O
state	pointer
&&	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
==	O
*	O
SPLIT_SEP	pointer
)	O
)	O
{	O
s2	pointer
[	O
i	int
++	O
]	O
=	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
;	O
split	int
++	O
;	O
sign	int
=	O
FALSE	O
;	O
digits	int
=	O
0	int
;	O
state	pointer
=	O
4	int
;	O
}	O
break	O
;	O
default	O
:	O
state	pointer
=	O
0	int
;	O
}	O
if	O
(	O
state	pointer
&&	O
!	O
skip	int
)	O
{	O
if	O
(	O
digits	int
<=	O
7	int
)	O
{	O
if	O
(	O
i	int
)	O
{	O
if	O
(	O
s2	pointer
[	O
i	int
-	O
1	int
]	O
!=	O
*	O
SPLIT_SEP	pointer
||	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
!=	O
*	O
SPLIT_SEP	pointer
)	O
s2	pointer
[	O
i	int
++	O
]	O
=	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
==	O
*	O
SPLIT_SEP	pointer
)	O
split	int
++	O
;	O
s2	pointer
[	O
i	int
++	O
]	O
=	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
;	O
}	O
if	O
(	O
!	O
decimals	int
)	O
{	O
if	O
(	O
(	O
state	pointer
==	O
2	int
)	O
&&	O
(	O
(	O
(	O
num_coord	int
==	O
1	int
)	O
&&	O
(	O
digits	int
==	O
2	int
||	O
digits	int
==	O
4	int
||	O
digits	int
==	O
6	int
)	O
)	O
||	O
(	O
(	O
num_coord	int
==	O
2	int
)	O
&&	O
(	O
digits	int
==	O
3	int
||	O
digits	int
==	O
5	int
||	O
digits	int
==	O
7	int
)	O
)	O
)	O
)	O
if	O
(	O
s2	pointer
[	O
i	int
-	O
1	int
]	O
!=	O
*	O
SPLIT_SEP	pointer
)	O
{	O
split	int
++	O
;	O
s2	pointer
[	O
i	int
++	O
]	O
=	O
*	O
SPLIT_SEP	pointer
;	O
}	O
if	O
(	O
state	pointer
==	O
2	int
)	O
{	O
if	O
(	O
(	O
num_coord	int
==	O
1	int
)	O
&&	O
(	O
digits	int
>	O
2	int
)	O
)	O
got_lat_min	int
=	O
TRUE	O
;	O
else	O
if	O
(	O
(	O
num_coord	int
==	O
2	int
)	O
&&	O
(	O
digits	int
>	O
3	int
)	O
)	O
got_lon_min	int
=	O
TRUE	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
s2	pointer
[	O
i	int
-	O
1	int
]	O
!=	O
*	O
SPLIT_SEP	pointer
)	O
{	O
split	int
++	O
;	O
s2	pointer
[	O
i	int
++	O
]	O
=	O
*	O
SPLIT_SEP	pointer
;	O
}	O
}	O
j	int
++	O
;	O
}	O
if	O
(	O
i	int
&&	O
(	O
split	int
-	O
is_decimal	int
<=	O
5	int
)	O
)	O
{	O
s2	pointer
[	O
i	int
++	O
]	O
=	O
'0'	O
;	O
if	O
(	O
split	int
-	O
is_decimal	int
==	O
4	int
)	O
{	O
s2	pointer
[	O
i	int
++	O
]	O
=	O
*	O
SPLIT_SEP	pointer
;	O
s2	pointer
[	O
i	int
++	O
]	O
=	O
'0'	O
;	O
}	O
}	O
if	O
(	O
!	O
state	pointer
||	O
is_last	int
||	O
num_coord	int
>	O
3	int
||	O
(	O
i	int
&&	O
!	O
time_sep_found	int
&&	O
!	O
is_leading_zero	int
&&	O
!	O
digits	int
)	O
||	O
(	O
time_sep_found	int
&&	O
(	O
digits	int
>	O
2	int
)	O
)	O
||	O
(	O
!	O
is_decimal	int
&&	O
(	O
num_coord	int
==	O
state	pointer
)	O
&&	O
(	O
digits	int
!=	O
3	int
)	O
&&	O
(	O
digits	int
!=	O
5	int
)	O
&&	O
(	O
digits	int
!=	O
7	int
)	O
)	O
||	O
(	O
(	O
num_coord	int
==	O
3	int
||	O
state	pointer
==	O
4	int
)	O
&&	O
(	O
digits	int
>	O
4	int
)	O
)	O
)	O
is_error	int
=	O
TRUE	O
;	O
if	O
(	O
j	int
)	O
j	int
--	O
;	O
if	O
(	O
i	int
&&	O
!	O
is_error	int
)	O
{	O
auto	O
double	O
val	double
=	O
0.0	int
;	O
auto	O
Bool	int
ok2	int
=	O
FALSE	O
;	O
coor1	pointer
->	O
lon_deg	int
=	O
coor1	pointer
->	O
lon_min	int
=	O
coor1	pointer
->	O
lon_sec	int
=	O
SECS_PER_HOUR	int
;	O
coor1	pointer
->	O
lat_deg	int
=	O
coor1	pointer
->	O
lat_min	int
=	O
coor1	pointer
->	O
lat_sec	int
=	O
SECS_PER_HOUR	int
;	O
coor1	pointer
->	O
meters_above_sea_level	int
=	O
coor1	pointer
->	O
time_zone_in_mins	int
=	O
SECS_PER_HOUR	int
*	O
5	int
;	O
s2	pointer
[	O
i	int
]	O
=	O
'\0'	O
;	O
ptr_char	pointer
=	O
s2	pointer
;	O
do	O
{	O
i	int
=	O
0	int
;	O
is_decimal	int
=	O
FALSE	O
;	O
while	O
(	O
!	O
ok2	int
)	O
{	O
if	O
(	O
*	O
ptr_char	pointer
)	O
{	O
if	O
(	O
*	O
ptr_char	pointer
!=	O
*	O
SPLIT_SEP	pointer
)	O
{	O
if	O
(	O
!	O
i	int
&&	O
(	O
*	O
ptr_char	pointer
==	O
'.'	O
)	O
)	O
is_decimal	int
=	O
TRUE	O
;	O
s2	pointer
[	O
i	int
++	O
]	O
=	O
*	O
ptr_char	pointer
++	O
;	O
}	O
else	O
{	O
ptr_char	pointer
++	O
;	O
break	O
;	O
}	O
}	O
else	O
ok2	int
=	O
TRUE	O
;	O
}	O
s2	pointer
[	O
i	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
i	int
)	O
{	O
i	int
=	O
SPECIAL_VALUE	O
;	O
if	O
(	O
is_decimal	int
)	O
(	O
void	O
)	O
sscanf	function
(	O
s2	pointer
,	O
"%lf"	pointer
,	O
&	O
val	double
)	O
;	O
else	O
i	int
=	O
atoi	function
(	O
s2	pointer
)	O
;	O
if	O
(	O
coor1	pointer
->	O
lat_deg	int
==	O
SECS_PER_HOUR	int
)	O
coor1	pointer
->	O
lat_deg	int
=	O
i	int
;	O
else	O
if	O
(	O
coor1	pointer
->	O
lat_min	int
==	O
SECS_PER_HOUR	int
)	O
coor1	pointer
->	O
lat_min	int
=	O
i	int
*	O
(	O
(	O
SGN	O
(	O
coor1	pointer
->	O
lat_deg	int
)	O
)	O
?	O
SGN	O
(	O
coor1	pointer
->	O
lat_deg	int
)	O
:	O
1	int
)	O
;	O
else	O
if	O
(	O
coor1	pointer
->	O
lat_sec	int
==	O
SECS_PER_HOUR	int
)	O
coor1	pointer
->	O
lat_sec	int
=	O
i	int
*	O
(	O
(	O
SGN	O
(	O
coor1	pointer
->	O
lat_deg	int
)	O
)	O
?	O
SGN	O
(	O
coor1	pointer
->	O
lat_deg	int
)	O
:	O
1	int
)	O
;	O
else	O
if	O
(	O
coor1	pointer
->	O
lon_deg	int
==	O
SECS_PER_HOUR	int
)	O
{	O
if	O
(	O
is_decimal	int
)	O
{	O
if	O
(	O
!	O
got_lat_min	int
&&	O
!	O
coor1	pointer
->	O
lat_min	int
)	O
{	O
val	double
*=	O
(	O
double	O
)	O
MINS_PER_HOUR	int
;	O
sprintf	function
(	O
buffer	array
,	O
"%.6f"	pointer
,	O
val	double
)	O
;	O
i	int
=	O
atoi	function
(	O
buffer	array
)	O
;	O
coor1	pointer
->	O
lat_min	int
=	O
i	int
*	O
(	O
(	O
SGN	O
(	O
coor1	pointer
->	O
lat_deg	int
)	O
)	O
?	O
SGN	O
(	O
coor1	pointer
->	O
lat_deg	int
)	O
:	O
1	int
)	O
;	O
val	double
-=	O
(	O
double	O
)	O
i	int
;	O
}	O
if	O
(	O
!	O
coor1	pointer
->	O
lat_sec	int
)	O
{	O
val	double
*=	O
(	O
double	O
)	O
SECS_PER_MIN	O
;	O
sprintf	function
(	O
buffer	array
,	O
"%.6f"	pointer
,	O
val	double
)	O
;	O
i	int
=	O
atoi	function
(	O
buffer	array
)	O
;	O
coor1	pointer
->	O
lat_sec	int
=	O
i	int
*	O
(	O
(	O
SGN	O
(	O
coor1	pointer
->	O
lat_deg	int
)	O
)	O
?	O
SGN	O
(	O
coor1	pointer
->	O
lat_deg	int
)	O
:	O
1	int
)	O
;	O
}	O
}	O
else	O
coor1	pointer
->	O
lon_deg	int
=	O
i	int
;	O
}	O
else	O
if	O
(	O
coor1	pointer
->	O
lon_min	int
==	O
SECS_PER_HOUR	int
)	O
coor1	pointer
->	O
lon_min	int
=	O
i	int
*	O
(	O
(	O
SGN	O
(	O
coor1	pointer
->	O
lon_deg	int
)	O
)	O
?	O
SGN	O
(	O
coor1	pointer
->	O
lon_deg	int
)	O
:	O
1	int
)	O
;	O
else	O
if	O
(	O
coor1	pointer
->	O
lon_sec	int
==	O
SECS_PER_HOUR	int
)	O
coor1	pointer
->	O
lon_sec	int
=	O
i	int
*	O
(	O
(	O
SGN	O
(	O
coor1	pointer
->	O
lon_deg	int
)	O
)	O
?	O
SGN	O
(	O
coor1	pointer
->	O
lon_deg	int
)	O
:	O
1	int
)	O
;	O
else	O
if	O
(	O
num_coord	int
==	O
3	int
&&	O
(	O
coor1	pointer
->	O
meters_above_sea_level	int
==	O
SECS_PER_HOUR	int
*	O
5	int
)	O
)	O
coor1	pointer
->	O
meters_above_sea_level	int
=	O
i	int
;	O
else	O
if	O
(	O
coor1	pointer
->	O
time_zone_in_mins	int
==	O
SECS_PER_HOUR	int
*	O
5	int
)	O
{	O
if	O
(	O
is_decimal	int
)	O
{	O
if	O
(	O
!	O
got_lon_min	int
&&	O
!	O
coor1	pointer
->	O
lon_min	int
)	O
{	O
val	double
*=	O
(	O
double	O
)	O
MINS_PER_HOUR	int
;	O
sprintf	function
(	O
buffer	array
,	O
"%.6f"	pointer
,	O
val	double
)	O
;	O
i	int
=	O
atoi	function
(	O
buffer	array
)	O
;	O
coor1	pointer
->	O
lon_min	int
=	O
i	int
*	O
(	O
(	O
SGN	O
(	O
coor1	pointer
->	O
lon_deg	int
)	O
)	O
?	O
SGN	O
(	O
coor1	pointer
->	O
lon_deg	int
)	O
:	O
1	int
)	O
;	O
val	double
-=	O
(	O
double	O
)	O
i	int
;	O
}	O
if	O
(	O
!	O
coor1	pointer
->	O
lon_sec	int
)	O
{	O
val	double
*=	O
(	O
double	O
)	O
SECS_PER_MIN	O
;	O
sprintf	function
(	O
buffer	array
,	O
"%.6f"	pointer
,	O
val	double
)	O
;	O
i	int
=	O
atoi	function
(	O
buffer	array
)	O
;	O
coor1	pointer
->	O
lon_sec	int
=	O
i	int
*	O
(	O
(	O
SGN	O
(	O
coor1	pointer
->	O
lon_deg	int
)	O
)	O
?	O
SGN	O
(	O
coor1	pointer
->	O
lon_deg	int
)	O
:	O
1	int
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
i	int
==	O
SPECIAL_VALUE	O
&&	O
is_decimal	int
)	O
i	int
=	O
(	O
int	O
)	O
val	double
;	O
coor1	pointer
->	O
time_zone_in_mins	int
=	O
i	int
;	O
if	O
(	O
time_sep_found	int
)	O
{	O
coor1	pointer
->	O
time_zone_in_mins	int
*=	O
MINS_PER_HOUR	int
;	O
ptr_char	pointer
=	O
strchr	function
(	O
s2	pointer
,	O
*	O
time_sep	pointer
)	O
;	O
if	O
(	O
ptr_char	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
ptr_char	pointer
=	O
strchr	function
(	O
s2	pointer
,	O
*	O
DEFAULT_TIME_SEP	pointer
)	O
;	O
if	O
(	O
ptr_char	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
if	O
(	O
*	O
++	O
ptr_char	pointer
)	O
{	O
i	int
=	O
atoi	function
(	O
ptr_char	pointer
)	O
;	O
if	O
(	O
abs	function
(	O
i	int
)	O
>=	O
MINS_PER_HOUR	int
)	O
is_error	int
=	O
TRUE	O
;	O
else	O
if	O
(	O
!	O
coor1	pointer
->	O
time_zone_in_mins	int
)	O
{	O
if	O
(	O
*	O
s2	pointer
==	O
*	O
DES_LIT	pointer
)	O
coor1	pointer
->	O
time_zone_in_mins	int
=	O
-	O
i	int
;	O
else	O
coor1	pointer
->	O
time_zone_in_mins	int
=	O
i	int
;	O
}	O
else	O
if	O
(	O
SGN	O
(	O
coor1	pointer
->	O
time_zone_in_mins	int
)	O
<	O
0	int
)	O
coor1	pointer
->	O
time_zone_in_mins	int
-=	O
i	int
;	O
else	O
coor1	pointer
->	O
time_zone_in_mins	int
+=	O
i	int
;	O
}	O
}	O
else	O
is_error	int
=	O
TRUE	O
;	O
}	O
}	O
}	O
else	O
is_error	int
=	O
TRUE	O
;	O
}	O
}	O
while	O
(	O
!	O
ok2	int
&&	O
!	O
is_error	int
)	O
;	O
if	O
(	O
!	O
is_error	int
)	O
{	O
if	O
(	O
abs	function
(	O
coor1	pointer
->	O
lon_deg	int
)	O
>	O
COOR_LON_DEG_MAX	O
||	O
abs	function
(	O
coor1	pointer
->	O
lon_min	int
)	O
>=	O
COOR_LON_MIN_MAX	O
||	O
abs	function
(	O
coor1	pointer
->	O
lon_sec	int
)	O
>=	O
COOR_LON_SEC_MAX	O
||	O
(	O
(	O
abs	function
(	O
coor1	pointer
->	O
lon_deg	int
)	O
==	O
COOR_LON_DEG_MAX	O
)	O
&&	O
(	O
coor1	pointer
->	O
lon_min	int
!=	O
0	int
||	O
coor1	pointer
->	O
lon_sec	int
!=	O
0	int
)	O
)	O
||	O
abs	function
(	O
coor1	pointer
->	O
lat_deg	int
)	O
>	O
COOR_LAT_DEG_MAX	O
||	O
abs	function
(	O
coor1	pointer
->	O
lat_min	int
)	O
>=	O
COOR_LAT_MIN_MAX	O
||	O
abs	function
(	O
coor1	pointer
->	O
lat_sec	int
)	O
>=	O
COOR_LAT_SEC_MAX	O
||	O
(	O
(	O
abs	function
(	O
coor1	pointer
->	O
lat_deg	int
)	O
==	O
COOR_LAT_DEG_MAX	O
)	O
&&	O
(	O
coor1	pointer
->	O
lat_min	int
!=	O
0	int
||	O
coor1	pointer
->	O
lat_sec	int
!=	O
0	int
)	O
)	O
)	O
is_error	int
=	O
TRUE	O
;	O
else	O
{	O
if	O
(	O
coor1	pointer
->	O
meters_above_sea_level	int
==	O
SECS_PER_HOUR	int
*	O
5	int
)	O
coor1	pointer
->	O
meters_above_sea_level	int
=	O
0	int
;	O
if	O
(	O
coor1	pointer
->	O
time_zone_in_mins	int
==	O
SECS_PER_HOUR	int
*	O
5	int
)	O
coor1	pointer
->	O
time_zone_in_mins	int
=	O
0	int
;	O
else	O
coor1	pointer
->	O
time_zone_in_mins	int
=	O
(	O
int	O
)	O
(	O
SGN	O
(	O
coor1	pointer
->	O
time_zone_in_mins	int
)	O
*	O
(	O
abs	function
(	O
coor1	pointer
->	O
time_zone_in_mins	int
)	O
%	O
MINS_PER_DAY	int
)	O
)	O
;	O
}	O
}	O
}	O
if	O
(	O
!	O
is_error	int
&&	O
--	O
parsed_coordinates	int
)	O
{	O
if	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
+	O
1	int
)	O
==	O
*	O
RC_COORDINATE_SEP	pointer
)	O
{	O
j	int
+=	O
2	int
;	O
coor2	pointer
->	O
lon_deg	int
=	O
coor1	pointer
->	O
lon_deg	int
;	O
coor2	pointer
->	O
lon_min	int
=	O
coor1	pointer
->	O
lon_min	int
;	O
coor2	pointer
->	O
lon_sec	int
=	O
coor1	pointer
->	O
lon_sec	int
;	O
coor2	pointer
->	O
lat_deg	int
=	O
coor1	pointer
->	O
lat_deg	int
;	O
coor2	pointer
->	O
lat_min	int
=	O
coor1	pointer
->	O
lat_min	int
;	O
coor2	pointer
->	O
lat_sec	int
=	O
coor1	pointer
->	O
lat_sec	int
;	O
coor2	pointer
->	O
meters_above_sea_level	int
=	O
coor1	pointer
->	O
meters_above_sea_level	int
;	O
coor2	pointer
->	O
the_mode	int
=	O
coor1	pointer
->	O
the_mode	int
;	O
goto	O
LABEL_get_second_coordinate	O
;	O
}	O
if	O
(	O
digits	int
)	O
is_error	int
=	O
TRUE	O
;	O
}	O
if	O
(	O
!	O
is_rise_set	int
&&	O
(	O
astronomical_object	int
!=	O
AOBJ_NONE	O
)	O
&&	O
(	O
is_error	int
||	O
(	O
aobj_mode	int
<=	O
1	int
||	O
(	O
(	O
aobj_mode	int
>	O
9	int
)	O
&&	O
(	O
aobj_mode	int
<	O
52	int
)	O
&&	O
(	O
astronomical_object	int
==	O
AOBJ_SUN	int
)	O
)	O
||	O
(	O
(	O
aobj_mode	int
>	O
5	int
)	O
&&	O
(	O
astronomical_object	int
==	O
AOBJ_MOON	int
)	O
)	O
)	O
)	O
)	O
{	O
aobj_mode	int
=	O
65	int
;	O
is_error	int
=	O
TRUE	O
;	O
}	O
if	O
(	O
!	O
is_error	int
)	O
{	O
auto	O
double	O
rise	double
=	O
SECS_PER_HOUR	int
;	O
auto	O
double	O
set	double
=	O
SECS_PER_HOUR	int
;	O
if	O
(	O
!	O
y	int
)	O
y	int
=	O
year	int
+	O
incr_year	int
-	O
decr_year	int
;	O
switch	O
(	O
special_text_char	char
)	O
{	O
case	O
RC_DISTANCE_CHAR	char
:	O
the_time	int
=	O
compute_distance	function
(	O
coor2	pointer
,	O
coor1	pointer
)	O
;	O
if	O
(	O
the_time	int
==	O
SPECIAL_VALUE	O
)	O
the_error	double
=	O
the_time	int
;	O
else	O
if	O
(	O
!	O
dist_mode	int
&&	O
is_format_modifier_given	int
)	O
the_time	int
=	O
KM2SM	O
(	O
the_time	int
)	O
;	O
break	O
;	O
case	O
RC_SUN_DAY_CHAR	char
:	O
case	O
RC_SUN_NIGHT_CHAR	char
:	O
case	O
RC_SUN_RISE_CHAR	char
:	O
rise	double
=	O
sun_rise_set	function
(	O
RIse	int
,	O
rc_limit	int
,	O
d	int
,	O
m	int
,	O
y	int
,	O
coor1	pointer
)	O
;	O
if	O
(	O
is_rise_set	int
)	O
{	O
if	O
(	O
(	O
(	O
aobj_mode	int
<=	O
9	int
||	O
aobj_mode	int
>=	O
52	int
)	O
&&	O
(	O
rise	double
<=	O
SPECIAL_VALUE	O
)	O
)	O
||	O
(	O
(	O
aobj_mode	int
>=	O
37	int
)	O
&&	O
(	O
aobj_mode	int
<	O
52	int
)	O
&&	O
(	O
rise	double
<=	O
HH2SS	O
(	O
SPECIAL_VALUE	O
)	O
)	O
)	O
)	O
the_error	double
=	O
rise	double
;	O
break	O
;	O
}	O
case	O
RC_SUN_SET_CHAR	char
:	O
set	double
=	O
sun_rise_set	function
(	O
SEt	int
,	O
rc_limit	int
,	O
d	int
,	O
m	int
,	O
y	int
,	O
coor1	pointer
)	O
;	O
if	O
(	O
is_rise_set	int
&&	O
(	O
(	O
(	O
aobj_mode	int
<=	O
9	int
||	O
aobj_mode	int
>=	O
52	int
)	O
&&	O
(	O
set	double
<=	O
SPECIAL_VALUE	O
)	O
)	O
||	O
(	O
(	O
aobj_mode	int
>=	O
37	int
)	O
&&	O
(	O
aobj_mode	int
<	O
52	int
)	O
&&	O
(	O
set	double
<=	O
HH2SS	O
(	O
SPECIAL_VALUE	O
)	O
)	O
)	O
)	O
)	O
the_error	double
=	O
set	double
;	O
break	O
;	O
case	O
RC_MOON_DAY_CHAR	char
:	O
case	O
RC_MOON_NIGHT_CHAR	char
:	O
case	O
RC_MOON_RISE_CHAR	char
:	O
rise	double
=	O
moon_rise_set	function
(	O
RIse	int
,	O
d	int
,	O
m	int
,	O
y	int
,	O
coor1	pointer
)	O
;	O
if	O
(	O
is_rise_set	int
)	O
{	O
if	O
(	O
(	O
(	O
aobj_mode	int
<=	O
5	int
)	O
&&	O
(	O
rise	double
<=	O
SPECIAL_VALUE	O
)	O
)	O
||	O
(	O
(	O
aobj_mode	int
>=	O
40	int
)	O
&&	O
(	O
rise	double
<=	O
HH2SS	O
(	O
SPECIAL_VALUE	O
)	O
)	O
)	O
)	O
the_error	double
=	O
rise	double
;	O
break	O
;	O
}	O
case	O
RC_MOON_SET_CHAR	char
:	O
set	double
=	O
moon_rise_set	function
(	O
SEt	int
,	O
d	int
,	O
m	int
,	O
y	int
,	O
coor1	pointer
)	O
;	O
if	O
(	O
is_rise_set	int
&&	O
(	O
(	O
(	O
aobj_mode	int
<=	O
5	int
)	O
&&	O
(	O
set	double
<=	O
SPECIAL_VALUE	O
)	O
)	O
||	O
(	O
(	O
aobj_mode	int
>=	O
40	int
)	O
&&	O
(	O
set	double
<=	O
HH2SS	O
(	O
SPECIAL_VALUE	O
)	O
)	O
)	O
)	O
)	O
the_error	double
=	O
set	double
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
if	O
(	O
!	O
is_error	int
&&	O
(	O
astronomical_object	int
!=	O
AOBJ_NONE	O
)	O
)	O
{	O
if	O
(	O
is_rise_set	int
)	O
{	O
if	O
(	O
!	O
(	O
int	O
)	O
ROUND	O
(	O
the_error	double
)	O
)	O
{	O
if	O
(	O
set	double
==	O
SECS_PER_HOUR	int
)	O
the_time	int
=	O
rise	double
;	O
else	O
the_time	int
=	O
set	double
;	O
if	O
(	O
is_format_modifier_given	int
)	O
{	O
if	O
(	O
aobj_oformat	array
[	O
aobj_mode	int
]	O
[	O
astronomical_object	int
]	O
.	O
error_format	char
==	O
ERR_HHH	int
)	O
{	O
if	O
(	O
the_time	int
>=	O
HOURS_PER_HALF_DAY	int
)	O
{	O
time_suffix	pointer
=	O
_	O
(	O
"pm"	pointer
)	O
;	O
the_time	int
-=	O
HOURS_PER_HALF_DAY	int
;	O
}	O
else	O
time_suffix	pointer
=	O
_	O
(	O
"am"	pointer
)	O
;	O
state	pointer
=	O
strlen	function
(	O
time_suffix	pointer
)	O
;	O
}	O
else	O
switch	O
(	O
astronomical_object	int
)	O
{	O
case	O
AOBJ_SUN	int
:	O
if	O
(	O
aobj_mode	int
==	O
15	int
||	O
aobj_mode	int
==	O
24	int
)	O
{	O
the_time	int
=	O
AU2KM	O
(	O
the_time	int
)	O
;	O
aobj_mode	int
=	O
61	int
;	O
}	O
break	O
;	O
case	O
AOBJ_MOON	int
:	O
if	O
(	O
aobj_mode	int
==	O
16	int
||	O
aobj_mode	int
==	O
29	int
)	O
{	O
the_time	int
=	O
ER2KM	O
(	O
the_time	int
)	O
;	O
aobj_mode	int
=	O
61	int
;	O
}	O
else	O
if	O
(	O
aobj_mode	int
==	O
9	int
||	O
aobj_mode	int
==	O
22	int
||	O
aobj_mode	int
==	O
48	int
||	O
aobj_mode	int
==	O
50	int
||	O
aobj_mode	int
==	O
53	int
||	O
aobj_mode	int
==	O
55	int
||	O
aobj_mode	int
==	O
57	int
||	O
aobj_mode	int
==	O
60	int
)	O
the_time	int
*=	O
100.0	int
;	O
break	O
;	O
default	O
:	O
;	O
}	O
}	O
}	O
}	O
else	O
{	O
aobj_mode	int
=	O
65	int
;	O
if	O
(	O
rise	double
<=	O
SPECIAL_VALUE	O
||	O
set	double
<=	O
SPECIAL_VALUE	O
)	O
{	O
if	O
(	O
rise	double
==	O
SPECIAL_VALUE	O
||	O
rise	double
==	O
SPECIAL_VALUE	O
*	O
2	int
)	O
rise	double
=	O
0.0	int
;	O
else	O
if	O
(	O
rise	double
==	O
SPECIAL_VALUE	O
*	O
3	int
)	O
rise	double
=	O
HOURS_PER_DAY	int
;	O
if	O
(	O
set	double
==	O
SPECIAL_VALUE	O
||	O
set	double
==	O
SPECIAL_VALUE	O
*	O
2	int
)	O
set	double
=	O
0.0	int
;	O
else	O
if	O
(	O
set	double
==	O
SPECIAL_VALUE	O
*	O
3	int
)	O
set	double
=	O
HOURS_PER_DAY	int
;	O
}	O
if	O
(	O
rise	double
==	O
set	double
)	O
the_time	int
=	O
rise	double
;	O
else	O
if	O
(	O
rise	double
>	O
set	double
)	O
the_time	int
=	O
(	O
HOURS_PER_DAY	int
-	O
rise	double
)	O
+	O
set	double
;	O
else	O
the_time	int
=	O
set	double
-	O
rise	double
;	O
if	O
(	O
special_text_char	char
==	O
RC_SUN_NIGHT_CHAR	char
||	O
special_text_char	char
==	O
RC_MOON_NIGHT_CHAR	char
)	O
the_time	int
=	O
HOURS_PER_DAY	int
-	O
the_time	int
;	O
}	O
}	O
}	O
if	O
(	O
!	O
is_error	int
&&	O
!	O
(	O
int	O
)	O
ROUND	O
(	O
the_error	double
)	O
)	O
{	O
if	O
(	O
astronomical_object	int
==	O
AOBJ_NONE	O
)	O
{	O
if	O
(	O
!	O
dist_mode	int
)	O
i	int
=	O
FMT_NNN	int
;	O
else	O
i	int
=	O
FMT_DDD	int
;	O
}	O
else	O
i	int
=	O
aobj_oformat	array
[	O
aobj_mode	int
]	O
[	O
astronomical_object	int
]	O
.	O
data_format	char
;	O
if	O
(	O
is_format_modifier_given	int
)	O
switch	O
(	O
i	int
)	O
{	O
case	O
FMT_TTT	int
:	O
case	O
FMT_DDD	int
:	O
i	int
=	O
FMT_NND	int
;	O
break	O
;	O
case	O
FMT_TTS	int
:	O
case	O
FMT_TXS	int
:	O
case	O
FMT_DDS	int
:	O
i	int
=	O
FMT_NSD	int
;	O
break	O
;	O
default	O
:	O
;	O
}	O
if	O
(	O
rc_precise	int
)	O
digits	int
=	O
6	int
;	O
else	O
digits	int
=	O
3	int
;	O
switch	O
(	O
i	int
)	O
{	O
case	O
FMT_NNN	int
:	O
if	O
(	O
rc_precise	int
)	O
digits	int
=	O
3	int
;	O
else	O
digits	int
=	O
0	int
;	O
sprintf	function
(	O
buffer	array
,	O
"%.*f"	pointer
,	O
digits	int
,	O
abs	function
(	O
the_time	int
)	O
)	O
;	O
break	O
;	O
case	O
FMT_NND	int
:	O
sprintf	function
(	O
buffer	array
,	O
"%.*f"	pointer
,	O
digits	int
,	O
abs	function
(	O
the_time	int
)	O
)	O
;	O
break	O
;	O
case	O
FMT_NSD	int
:	O
sprintf	function
(	O
buffer	array
,	O
"%c%.*f"	pointer
,	O
(	O
the_time	int
<	O
0.0	int
)	O
?	O
*	O
DES_LIT	pointer
:	O
*	O
ASC_LIT	pointer
,	O
digits	int
,	O
abs	function
(	O
the_time	int
)	O
)	O
;	O
break	O
;	O
case	O
FMT_HHH	int
:	O
if	O
(	O
rc_precise	int
)	O
{	O
val2hours	function
(	O
HH2DAY	O
(	O
abs	function
(	O
the_time	int
)	O
)	O
,	O
&	O
dots	int
,	O
&	O
sign	int
,	O
&	O
the_error	double
)	O
;	O
digits	int
=	O
(	O
int	O
)	O
ROUND	O
(	O
(	O
the_error	double
-	O
(	O
int	O
)	O
the_error	double
)	O
*	O
1000.0	int
)	O
;	O
if	O
(	O
digits	int
==	O
1000	int
)	O
digits	int
--	O
;	O
sprintf	function
(	O
buffer	array
,	O
"%02d%c%02d%c%02d.%03d%s"	pointer
,	O
dots	int
,	O
*	O
sep	pointer
,	O
sign	int
,	O
*	O
sep	pointer
,	O
(	O
int	O
)	O
the_error	double
,	O
digits	int
,	O
time_suffix	pointer
)	O
;	O
}	O
else	O
{	O
val2hours	function
(	O
HH2DAY	O
(	O
abs	function
(	O
the_time	int
)	O
)	O
,	O
&	O
dots	int
,	O
&	O
sign	int
,	O
NULL	O
)	O
;	O
sprintf	function
(	O
buffer	array
,	O
"%02d%c%02d%s"	pointer
,	O
dots	int
,	O
*	O
sep	pointer
,	O
sign	int
,	O
time_suffix	pointer
)	O
;	O
}	O
break	O
;	O
case	O
FMT_TTT	int
:	O
the_time	int
=	O
abs	function
(	O
the_time	int
)	O
;	O
if	O
(	O
rc_precise	int
)	O
{	O
val2hours	function
(	O
HH2DAY	O
(	O
the_time	int
)	O
,	O
&	O
dots	int
,	O
&	O
sign	int
,	O
&	O
the_error	double
)	O
;	O
digits	int
=	O
(	O
int	O
)	O
ROUND	O
(	O
(	O
the_error	double
-	O
(	O
int	O
)	O
the_error	double
)	O
*	O
1000.0	int
)	O
;	O
if	O
(	O
digits	int
==	O
1000	int
)	O
digits	int
--	O
;	O
}	O
else	O
val2hours	function
(	O
HH2DAY	O
(	O
the_time	int
)	O
,	O
&	O
dots	int
,	O
&	O
sign	int
,	O
NULL	O
)	O
;	O
if	O
(	O
(	O
aobj_mode	int
==	O
65	int
)	O
&&	O
!	O
dots	int
&&	O
(	O
the_time	int
>=	O
HOURS_PER_HALF_DAY	int
)	O
)	O
{	O
dots	int
=	O
HOURS_PER_DAY	int
;	O
digits	int
=	O
sign	int
=	O
0	int
;	O
the_error	double
=	O
0.0	int
;	O
}	O
if	O
(	O
rc_precise	int
)	O
sprintf	function
(	O
buffer	array
,	O
"%02d%c%02d%c%02d.%03d%c"	pointer
,	O
dots	int
,	O
*	O
sep	pointer
,	O
sign	int
,	O
*	O
(	O
sep	pointer
+	O
1	int
)	O
,	O
(	O
int	O
)	O
the_error	double
,	O
digits	int
,	O
*	O
(	O
sep	pointer
+	O
2	int
)	O
)	O
;	O
else	O
sprintf	function
(	O
buffer	array
,	O
"%02d%c%02d%c"	pointer
,	O
dots	int
,	O
*	O
sep	pointer
,	O
sign	int
,	O
*	O
(	O
sep	pointer
+	O
1	int
)	O
)	O
;	O
break	O
;	O
case	O
FMT_TTS	int
:	O
if	O
(	O
rc_precise	int
)	O
{	O
val2hours	function
(	O
HH2DAY	O
(	O
the_time	int
)	O
,	O
&	O
dots	int
,	O
&	O
sign	int
,	O
&	O
the_error	double
)	O
;	O
the_error	double
=	O
abs	function
(	O
the_error	double
)	O
;	O
digits	int
=	O
(	O
int	O
)	O
ROUND	O
(	O
(	O
the_error	double
-	O
(	O
int	O
)	O
the_error	double
)	O
*	O
1000.0	int
)	O
;	O
if	O
(	O
digits	int
==	O
1000	int
)	O
digits	int
--	O
;	O
sprintf	function
(	O
buffer	array
,	O
"%c%02d%c%02d%c%02d.%03d%c"	pointer
,	O
(	O
the_time	int
<	O
0.0	int
)	O
?	O
*	O
DES_LIT	pointer
:	O
*	O
ASC_LIT	pointer
,	O
abs	function
(	O
dots	int
)	O
,	O
*	O
sep	pointer
,	O
abs	function
(	O
sign	int
)	O
,	O
*	O
(	O
sep	pointer
+	O
1	int
)	O
,	O
(	O
int	O
)	O
the_error	double
,	O
digits	int
,	O
*	O
(	O
sep	pointer
+	O
2	int
)	O
)	O
;	O
}	O
else	O
case	O
FMT_TXS	int
:	O
{	O
val2hours	function
(	O
HH2DAY	O
(	O
the_time	int
)	O
,	O
&	O
dots	int
,	O
&	O
sign	int
,	O
NULL	O
)	O
;	O
sprintf	function
(	O
buffer	array
,	O
"%c%02d%c%02d%c"	pointer
,	O
(	O
the_time	int
<	O
0.0	int
)	O
?	O
*	O
DES_LIT	pointer
:	O
*	O
ASC_LIT	pointer
,	O
abs	function
(	O
dots	int
)	O
,	O
*	O
sep	pointer
,	O
abs	function
(	O
sign	int
)	O
,	O
*	O
(	O
sep	pointer
+	O
1	int
)	O
)	O
;	O
}	O
break	O
;	O
case	O
FMT_DDD	int
:	O
if	O
(	O
rc_precise	int
)	O
{	O
val2degrees	function
(	O
abs	function
(	O
the_time	int
)	O
,	O
&	O
dots	int
,	O
&	O
sign	int
,	O
&	O
the_error	double
)	O
;	O
digits	int
=	O
(	O
int	O
)	O
ROUND	O
(	O
(	O
the_error	double
-	O
(	O
int	O
)	O
the_error	double
)	O
*	O
1000.0	int
)	O
;	O
if	O
(	O
digits	int
==	O
1000	int
)	O
digits	int
--	O
;	O
sprintf	function
(	O
buffer	array
,	O
"%03d%c%02d%c%02d.%03d%c"	pointer
,	O
dots	int
,	O
*	O
sep	pointer
,	O
sign	int
,	O
*	O
(	O
sep	pointer
+	O
1	int
)	O
,	O
(	O
int	O
)	O
the_error	double
,	O
digits	int
,	O
*	O
(	O
sep	pointer
+	O
2	int
)	O
)	O
;	O
}	O
else	O
{	O
val2degrees	function
(	O
abs	function
(	O
the_time	int
)	O
,	O
&	O
dots	int
,	O
&	O
sign	int
,	O
NULL	O
)	O
;	O
sprintf	function
(	O
buffer	array
,	O
"%03d%c%02d%c"	pointer
,	O
dots	int
,	O
*	O
sep	pointer
,	O
sign	int
,	O
*	O
(	O
sep	pointer
+	O
1	int
)	O
)	O
;	O
}	O
break	O
;	O
case	O
FMT_DDS	int
:	O
if	O
(	O
rc_precise	int
)	O
{	O
val2degrees	function
(	O
the_time	int
,	O
&	O
dots	int
,	O
&	O
sign	int
,	O
&	O
the_error	double
)	O
;	O
the_error	double
=	O
abs	function
(	O
the_error	double
)	O
;	O
digits	int
=	O
(	O
int	O
)	O
ROUND	O
(	O
(	O
the_error	double
-	O
(	O
int	O
)	O
the_error	double
)	O
*	O
1000.0	int
)	O
;	O
if	O
(	O
digits	int
==	O
1000	int
)	O
digits	int
--	O
;	O
sprintf	function
(	O
buffer	array
,	O
"%c%03d%c%02d%c%02d.%03d%c"	pointer
,	O
(	O
the_time	int
<	O
0.0	int
)	O
?	O
*	O
DES_LIT	pointer
:	O
*	O
ASC_LIT	pointer
,	O
abs	function
(	O
dots	int
)	O
,	O
*	O
sep	pointer
,	O
abs	function
(	O
sign	int
)	O
,	O
*	O
(	O
sep	pointer
+	O
1	int
)	O
,	O
(	O
int	O
)	O
the_error	double
,	O
digits	int
,	O
*	O
(	O
sep	pointer
+	O
2	int
)	O
)	O
;	O
}	O
else	O
{	O
val2degrees	function
(	O
the_time	int
,	O
&	O
dots	int
,	O
&	O
sign	int
,	O
NULL	O
)	O
;	O
sprintf	function
(	O
buffer	array
,	O
"%c%03d%c%02d%c"	pointer
,	O
(	O
the_time	int
<	O
0.0	int
)	O
?	O
*	O
DES_LIT	pointer
:	O
*	O
ASC_LIT	pointer
,	O
abs	function
(	O
dots	int
)	O
,	O
*	O
sep	pointer
,	O
abs	function
(	O
sign	int
)	O
,	O
*	O
(	O
sep	pointer
+	O
1	int
)	O
)	O
;	O
}	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
else	O
{	O
sign	int
=	O
0	int
;	O
if	O
(	O
astronomical_object	int
==	O
AOBJ_NONE	O
)	O
{	O
if	O
(	O
is_error	int
)	O
{	O
if	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
&&	O
!	O
isspace	function
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
)	O
)	O
{	O
while	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
&&	O
!	O
isspace	function
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
)	O
)	O
j	int
++	O
;	O
j	int
--	O
;	O
}	O
}	O
if	O
(	O
!	O
dist_mode	int
)	O
i	int
=	O
ERR_NNN	int
;	O
else	O
i	int
=	O
ERR_DDD	int
;	O
}	O
else	O
{	O
i	int
=	O
aobj_oformat	array
[	O
aobj_mode	int
]	O
[	O
astronomical_object	int
]	O
.	O
error_format	char
;	O
if	O
(	O
aobj_oformat	array
[	O
aobj_mode	int
]	O
[	O
astronomical_object	int
]	O
.	O
data_format	char
==	O
FMT_TTS	int
||	O
aobj_oformat	array
[	O
aobj_mode	int
]	O
[	O
astronomical_object	int
]	O
.	O
data_format	char
==	O
FMT_DDS	int
)	O
sign	int
=	O
1	int
;	O
}	O
if	O
(	O
is_format_modifier_given	int
)	O
switch	O
(	O
i	int
)	O
{	O
case	O
ERR_TTT	int
:	O
case	O
ERR_DDD	int
:	O
i	int
=	O
ERR_NNN	int
;	O
sign	int
=	O
0	int
;	O
break	O
;	O
default	O
:	O
;	O
}	O
if	O
(	O
the_error	double
<=	O
HH2SS	O
(	O
SPECIAL_VALUE	O
)	O
)	O
the_error	double
=	O
SS2HH	O
(	O
the_error	double
)	O
;	O
if	O
(	O
is_error	int
)	O
time_suffix	pointer
=	O
RC_INVALID_PARAM_TEXT	pointer
;	O
else	O
switch	O
(	O
(	O
int	O
)	O
the_error	double
)	O
{	O
case	O
SPECIAL_VALUE	O
*	O
3	int
:	O
time_suffix	pointer
=	O
RC_A_ABOVE_VALUE_TEXT	pointer
;	O
break	O
;	O
case	O
SPECIAL_VALUE	O
*	O
2	int
:	O
time_suffix	pointer
=	O
RC_A_BELOW_VALUE_TEXT	pointer
;	O
break	O
;	O
default	O
:	O
time_suffix	pointer
=	O
RC_INVALID_VALUE_TEXT	pointer
;	O
}	O
switch	O
(	O
i	int
)	O
{	O
case	O
ERR_NNN	int
:	O
strcpy	function
(	O
buffer	array
,	O
time_suffix	pointer
)	O
;	O
break	O
;	O
case	O
ERR_HHH	int
:	O
if	O
(	O
rc_precise	int
)	O
sprintf	function
(	O
buffer	array
,	O
"%s%c%s%c%s.%s%c"	pointer
,	O
time_suffix	pointer
,	O
*	O
sep	pointer
,	O
time_suffix	pointer
,	O
*	O
sep	pointer
,	O
time_suffix	pointer
,	O
time_suffix	pointer
,	O
*	O
time_suffix	pointer
)	O
;	O
else	O
sprintf	function
(	O
buffer	array
,	O
"%s%c%s"	pointer
,	O
time_suffix	pointer
,	O
*	O
sep	pointer
,	O
time_suffix	pointer
)	O
;	O
if	O
(	O
is_format_modifier_given	int
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
state	pointer
;	O
i	int
++	O
)	O
strcat	function
(	O
buffer	array
,	O
time_suffix	pointer
+	O
1	int
)	O
;	O
break	O
;	O
case	O
ERR_TTT	int
:	O
if	O
(	O
sign	int
)	O
*	O
buffer	array
=	O
*	O
time_suffix	pointer
;	O
if	O
(	O
rc_precise	int
&&	O
(	O
aobj_oformat	array
[	O
aobj_mode	int
]	O
[	O
astronomical_object	int
]	O
.	O
data_format	char
!=	O
FMT_TXS	int
)	O
)	O
sprintf	function
(	O
buffer	array
+	O
sign	int
,	O
"%s%c%s%c%s.%s%c%c"	pointer
,	O
time_suffix	pointer
,	O
*	O
sep	pointer
,	O
time_suffix	pointer
,	O
*	O
(	O
sep	pointer
+	O
1	int
)	O
,	O
time_suffix	pointer
,	O
time_suffix	pointer
,	O
*	O
time_suffix	pointer
,	O
*	O
(	O
sep	pointer
+	O
2	int
)	O
)	O
;	O
else	O
sprintf	function
(	O
buffer	array
+	O
sign	int
,	O
"%s%c%s%c"	pointer
,	O
time_suffix	pointer
,	O
*	O
sep	pointer
,	O
time_suffix	pointer
,	O
*	O
(	O
sep	pointer
+	O
1	int
)	O
)	O
;	O
break	O
;	O
case	O
ERR_DDD	int
:	O
if	O
(	O
sign	int
)	O
*	O
buffer	array
=	O
*	O
time_suffix	pointer
;	O
if	O
(	O
rc_precise	int
)	O
sprintf	function
(	O
buffer	array
+	O
sign	int
,	O
"%s%c%c%s%c%s.%s%c%c"	pointer
,	O
time_suffix	pointer
,	O
*	O
time_suffix	pointer
,	O
*	O
sep	pointer
,	O
time_suffix	pointer
,	O
*	O
(	O
sep	pointer
+	O
1	int
)	O
,	O
time_suffix	pointer
,	O
time_suffix	pointer
,	O
*	O
time_suffix	pointer
,	O
*	O
(	O
sep	pointer
+	O
2	int
)	O
)	O
;	O
else	O
sprintf	function
(	O
buffer	array
+	O
sign	int
,	O
"%s%c%c%s%c"	pointer
,	O
time_suffix	pointer
,	O
*	O
time_suffix	pointer
,	O
*	O
sep	pointer
,	O
time_suffix	pointer
,	O
*	O
(	O
sep	pointer
+	O
1	int
)	O
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
*	O
s2	pointer
=	O
'\0'	O
;	O
(	O
void	O
)	O
use_format	function
(	O
&	O
s2	pointer
,	O
0	int
,	O
buffer	array
,	O
0	int
,	O
FALSE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
is_obsolete_whitespace	int
=	O
TRUE	O
;	O
}	O
else	O
if	O
(	O
special_text_char	char
==	O
RC_ENV_VAR_CHAR	char
)	O
{	O
auto	O
char	O
*	O
ptr_env	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
i	int
=	O
0	int
;	O
j	int
++	O
;	O
while	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
&&	O
!	O
isspace	function
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
)	O
)	O
{	O
if	O
(	O
(	O
Uint	int
)	O
i	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
s2	pointer
[	O
i	int
++	O
]	O
=	O
*	O
(	O
the_text	pointer
+	O
j	int
++	O
)	O
;	O
}	O
s2	pointer
[	O
i	int
]	O
=	O
'\0'	O
;	O
j	int
--	O
;	O
ptr_env	pointer
=	O
getenv	function
(	O
s2	pointer
)	O
;	O
*	O
s2	pointer
=	O
'\0'	O
;	O
if	O
(	O
ptr_env	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
(	O
void	O
)	O
use_format	function
(	O
&	O
s2	pointer
,	O
0	int
,	O
ptr_env	pointer
,	O
0	int
,	O
FALSE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
is_obsolete_whitespace	int
=	O
TRUE	O
;	O
}	O
else	O
if	O
(	O
special_text_char	char
==	O
RC_HLS1S_CHAR	O
||	O
special_text_char	char
==	O
RC_HLS1E_CHAR	O
||	O
special_text_char	char
==	O
RC_HLS2S_CHAR	char
||	O
special_text_char	char
==	O
RC_HLS2E_CHAR	char
||	O
special_text_char	char
==	O
RC_HLS3S_CHAR	char
||	O
special_text_char	char
==	O
RC_HLS3E_CHAR	char
||	O
special_text_char	char
==	O
RC_HLS4S_CHAR	char
||	O
special_text_char	char
==	O
RC_HLS4E_CHAR	char
||	O
special_text_char	char
==	O
RC_HLS5S_CHAR	char
||	O
special_text_char	char
==	O
RC_HLS5E_CHAR	char
)	O
{	O
*	O
s2	pointer
=	O
'\0'	O
;	O
if	O
(	O
highlight_flag	int
)	O
{	O
hls_set	int
=	O
FALSE	O
;	O
if	O
(	O
(	O
special_text_char	char
==	O
RC_HLS1S_CHAR	O
)	O
&&	O
!	O
hls1_set	int
)	O
{	O
sprintf	function
(	O
s2	pointer
,	O
"%s"	pointer
,	O
ehls1s	struct
.	O
seq	pointer
)	O
;	O
hls_set	int
=	O
TRUE	O
;	O
hls1_set	int
=	O
TRUE	O
;	O
hls2_set	int
=	O
FALSE	O
;	O
}	O
else	O
if	O
(	O
(	O
special_text_char	char
==	O
RC_HLS1E_CHAR	O
)	O
&&	O
hls1_set	int
)	O
{	O
sprintf	function
(	O
s2	pointer
,	O
"%s"	pointer
,	O
ehls1e	struct
.	O
seq	pointer
)	O
;	O
hls_set	int
=	O
TRUE	O
;	O
hls1_set	int
=	O
FALSE	O
;	O
}	O
else	O
if	O
(	O
(	O
special_text_char	char
==	O
RC_HLS2S_CHAR	char
)	O
&&	O
!	O
hls2_set	int
)	O
{	O
sprintf	function
(	O
s2	pointer
,	O
"%s"	pointer
,	O
ehls2s	struct
.	O
seq	pointer
)	O
;	O
hls_set	int
=	O
TRUE	O
;	O
hls2_set	int
=	O
TRUE	O
;	O
hls1_set	int
=	O
FALSE	O
;	O
}	O
else	O
if	O
(	O
(	O
special_text_char	char
==	O
RC_HLS2E_CHAR	char
)	O
&&	O
hls2_set	int
)	O
{	O
sprintf	function
(	O
s2	pointer
,	O
"%s"	pointer
,	O
ehls2e	struct
.	O
seq	pointer
)	O
;	O
hls_set	int
=	O
TRUE	O
;	O
hls2_set	int
=	O
FALSE	O
;	O
}	O
else	O
if	O
(	O
(	O
special_text_char	char
==	O
RC_HLS3S_CHAR	char
||	O
special_text_char	char
==	O
RC_HLS5S_CHAR	char
)	O
&&	O
(	O
year	int
+	O
incr_year	int
-	O
decr_year	int
==	O
act_year	int
)	O
&&	O
(	O
m	int
==	O
act_month	int
)	O
&&	O
(	O
d	int
==	O
act_day	int
)	O
&&	O
!	O
hls1_set	int
)	O
{	O
sprintf	function
(	O
s2	pointer
,	O
"%s"	pointer
,	O
ehls1s	struct
.	O
seq	pointer
)	O
;	O
hls_set	int
=	O
TRUE	O
;	O
hls1_set	int
=	O
TRUE	O
;	O
hls2_set	int
=	O
FALSE	O
;	O
}	O
else	O
if	O
(	O
(	O
special_text_char	char
==	O
RC_HLS3E_CHAR	char
||	O
special_text_char	char
==	O
RC_HLS5E_CHAR	char
)	O
&&	O
hls1_set	int
)	O
{	O
sprintf	function
(	O
s2	pointer
,	O
"%s"	pointer
,	O
ehls1e	struct
.	O
seq	pointer
)	O
;	O
hls_set	int
=	O
TRUE	O
;	O
hls1_set	int
=	O
FALSE	O
;	O
}	O
else	O
if	O
(	O
(	O
special_text_char	char
==	O
RC_HLS4S_CHAR	char
||	O
special_text_char	char
==	O
RC_HLS5S_CHAR	char
)	O
&&	O
hd_ldays	array
[	O
(	O
(	O
m	int
-	O
1	int
)	O
*	O
MONTH_LAST	int
)	O
+	O
(	O
d	int
-	O
1	int
)	O
]	O
&&	O
!	O
hls2_set	int
)	O
{	O
sprintf	function
(	O
s2	pointer
,	O
"%s"	pointer
,	O
ehls2s	struct
.	O
seq	pointer
)	O
;	O
hls_set	int
=	O
TRUE	O
;	O
hls2_set	int
=	O
TRUE	O
;	O
hls1_set	int
=	O
FALSE	O
;	O
}	O
else	O
if	O
(	O
(	O
special_text_char	char
==	O
RC_HLS4E_CHAR	char
||	O
special_text_char	char
==	O
RC_HLS5E_CHAR	char
)	O
&&	O
hls2_set	int
)	O
{	O
sprintf	function
(	O
s2	pointer
,	O
"%s"	pointer
,	O
ehls2e	struct
.	O
seq	pointer
)	O
;	O
hls_set	int
=	O
TRUE	O
;	O
hls2_set	int
=	O
FALSE	O
;	O
}	O
}	O
}	O
else	O
{	O
auto	O
Slint	long
diff	int
;	O
dd	int
=	O
act_day	int
;	O
mm	int
=	O
act_month	int
;	O
yy	int
=	O
act_year	int
;	O
(	O
void	O
)	O
get_actual_date	function
(	O
)	O
;	O
y	int
=	O
year	int
+	O
incr_year	int
-	O
decr_year	int
;	O
if	O
(	O
special_text_char	char
==	O
RC_JDAYS_CHAR	char
)	O
{	O
auto	O
char	O
op	char
=	O
'\0'	O
;	O
diff	int
=	O
d_between	function
(	O
1	int
,	O
1	int
,	O
1	int
,	O
d	int
,	O
m	int
,	O
y	int
)	O
;	O
j	int
++	O
;	O
if	O
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
==	O
*	O
ASC_LIT	pointer
||	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
==	O
*	O
DES_LIT	pointer
)	O
op	char
=	O
*	O
(	O
the_text	pointer
+	O
j	int
++	O
)	O
;	O
i	int
=	O
0	int
;	O
while	O
(	O
isdigit	function
(	O
*	O
(	O
the_text	pointer
+	O
j	int
)	O
)	O
)	O
{	O
if	O
(	O
(	O
Uint	int
)	O
i	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
s2	pointer
[	O
i	int
++	O
]	O
=	O
*	O
(	O
the_text	pointer
+	O
j	int
++	O
)	O
;	O
}	O
s2	pointer
[	O
i	int
]	O
=	O
'\0'	O
;	O
j	int
--	O
;	O
num	long
=	O
atol	function
(	O
s2	pointer
)	O
;	O
*	O
s2	pointer
=	O
'\0'	O
;	O
diff	int
+=	O
MIN_BCE_TO_1_CE	int
;	O
if	O
(	O
op	char
==	O
*	O
ASC_LIT	pointer
)	O
diff	int
+=	O
num	long
;	O
else	O
diff	int
-=	O
num	long
;	O
}	O
else	O
{	O
if	O
(	O
special_text_char	char
==	O
RC_DAY_DIFF_CHAR	char
)	O
diff	int
=	O
d_between	function
(	O
act_day	int
,	O
act_month	int
,	O
act_year	int
,	O
d	int
,	O
m	int
,	O
y	int
)	O
;	O
else	O
if	O
(	O
special_text_char	char
==	O
RC_WEEK_DIFF_CHAR	char
)	O
diff	int
=	O
w_between	function
(	O
act_day	int
,	O
act_month	int
,	O
act_year	int
,	O
d	int
,	O
m	int
,	O
y	int
)	O
;	O
else	O
if	O
(	O
special_text_char	char
==	O
RC_MONTH_DIFF_CHAR	char
)	O
diff	int
=	O
m_between	function
(	O
act_month	int
,	O
act_year	int
,	O
m	int
,	O
y	int
)	O
;	O
else	O
diff	int
=	O
(	O
Slint	long
)	O
y	int
-	O
act_year	int
;	O
if	O
(	O
j_buf	int
)	O
if	O
(	O
*	O
(	O
the_text	pointer
+	O
j_buf	int
-	O
1	int
)	O
==	O
*	O
DES_LIT	pointer
)	O
{	O
if	O
(	O
(	O
j_buf	int
>	O
1	int
)	O
&&	O
(	O
*	O
(	O
the_text	pointer
+	O
j_buf	int
-	O
2	int
)	O
==	O
QUOTE_CHAR	char
)	O
)	O
{	O
s1	pointer
[	O
k	int
-	O
2	int
]	O
=	O
s1	pointer
[	O
k	int
-	O
1	int
]	O
;	O
k	int
--	O
;	O
s6	pointer
[	O
kk	int
-	O
2	int
]	O
=	O
s6	pointer
[	O
kk	int
-	O
1	int
]	O
;	O
kk	int
--	O
;	O
}	O
else	O
{	O
k	int
--	O
;	O
kk	int
--	O
;	O
diff	int
=	O
-	O
diff	int
;	O
}	O
}	O
}	O
(	O
void	O
)	O
use_format	function
(	O
&	O
s2	pointer
,	O
0	int
,	O
""	pointer
,	O
diff	int
,	O
TRUE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
act_day	int
=	O
dd	int
;	O
act_month	int
=	O
mm	int
;	O
act_year	int
=	O
yy	int
;	O
}	O
i	int
=	O
0	int
;	O
while	O
(	O
s2	pointer
[	O
i	int
]	O
)	O
{	O
if	O
(	O
(	O
Uint	int
)	O
k	int
>=	O
maxlen_max	int
-	O
(	O
Uint	int
)	O
len_fn	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
s1	pointer
[	O
k	int
++	O
]	O
=	O
s2	pointer
[	O
i	int
]	O
;	O
if	O
(	O
!	O
remove_hls_in_regex	int
||	O
!	O
hls_set	int
)	O
s6	pointer
[	O
kk	int
++	O
]	O
=	O
s2	pointer
[	O
i	int
]	O
;	O
i	int
++	O
;	O
}	O
j	int
++	O
;	O
}	O
else	O
if	O
(	O
!	O
got_command	int
&&	O
(	O
special_text_char	char
==	O
RC_EX_LHDY_CHAR	char
||	O
special_text_char	char
==	O
RC_EX_NLHDY_CHAR	char
||	O
special_text_char	char
==	O
RC_EX_AHDY_CHAR	char
||	O
special_text_char	char
==	O
RC_EX_NAHDY_CHAR	char
||	O
special_text_char	char
==	O
RC_EX_MON_CHAR	char
||	O
special_text_char	char
==	O
RC_EX_NMON_CHAR	char
||	O
special_text_char	char
==	O
RC_EX_TUE_CHAR	char
||	O
special_text_char	char
==	O
RC_EX_NTUE_CHAR	char
||	O
special_text_char	char
==	O
RC_EX_WED_CHAR	char
||	O
special_text_char	char
==	O
RC_EX_NWED_CHAR	char
||	O
special_text_char	char
==	O
RC_EX_THU_CHAR	char
||	O
special_text_char	char
==	O
RC_EX_NTHU_CHAR	char
||	O
special_text_char	char
==	O
RC_EX_FRI_CHAR	char
||	O
special_text_char	char
==	O
RC_EX_NFRI_CHAR	char
||	O
special_text_char	char
==	O
RC_EX_SAT_CHAR	char
||	O
special_text_char	char
==	O
RC_EX_NSAT_CHAR	char
||	O
special_text_char	char
==	O
RC_EX_SUN_CHAR	char
||	O
special_text_char	char
==	O
RC_EX_NSUN_CHAR	char
||	O
special_text_char	char
==	O
RC_EX_MON_2_THU_CHAR	char
||	O
special_text_char	char
==	O
RC_EX_NMON_2_THU_CHAR	char
||	O
special_text_char	char
==	O
RC_EX_MON_2_FRI_CHAR	char
||	O
special_text_char	char
==	O
RC_EX_NMON_2_FRI_CHAR	char
)	O
)	O
{	O
if	O
(	O
strchr	function
(	O
date_text	pointer
,	O
special_text_char	char
)	O
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
*	O
ptr_date_text	pointer
++	O
=	O
special_text_char	char
;	O
*	O
ptr_date_text	pointer
=	O
'\0'	O
;	O
}	O
j	int
++	O
;	O
}	O
else	O
{	O
if	O
(	O
rc_execute_command	int
&&	O
!	O
got_command	int
&&	O
(	O
special_text_char	char
==	O
RC_SHELL_ESC_CHAR	char
)	O
)	O
{	O
kpos	int
=	O
k	int
;	O
kkpos	int
=	O
kk	int
;	O
j_diff	int
=	O
j	int
-	O
j_buf	int
-	O
1	int
;	O
got_command	int
=	O
TRUE	O
;	O
}	O
for	O
(	O
;	O
j_buf	int
<	O
j	int
;	O
j_buf	int
++	O
,	O
k	int
++	O
,	O
kk	int
++	O
)	O
s1	pointer
[	O
k	int
]	O
=	O
s6	pointer
[	O
kk	int
]	O
=	O
*	O
(	O
the_text	pointer
+	O
j_buf	int
)	O
;	O
}	O
}	O
}	O
else	O
ok	int
=	O
TRUE	O
;	O
}	O
if	O
(	O
line_number	long
!=	O
SPECIAL_VALUE	O
)	O
{	O
if	O
(	O
ie_date_maps_set	int
&&	O
(	O
*	O
inclusive_date_map	array
||	O
*	O
exclusive_date_map	array
)	O
)	O
{	O
i	int
=	O
day_of_year	function
(	O
d	int
,	O
m	int
,	O
year	int
+	O
incr_year	int
-	O
decr_year	int
)	O
;	O
if	O
(	O
*	O
inclusive_date_map	array
&&	O
*	O
exclusive_date_map	array
)	O
{	O
if	O
(	O
!	O
inclusive_date_map	array
[	O
i	int
]	O
||	O
!	O
exclusive_date_map	array
[	O
i	int
]	O
)	O
print_line	int
=	O
FALSE	O
;	O
}	O
else	O
if	O
(	O
*	O
inclusive_date_map	array
)	O
{	O
if	O
(	O
!	O
inclusive_date_map	array
[	O
i	int
]	O
)	O
print_line	int
=	O
FALSE	O
;	O
}	O
else	O
if	O
(	O
!	O
exclusive_date_map	array
[	O
i	int
]	O
)	O
print_line	int
=	O
FALSE	O
;	O
}	O
if	O
(	O
print_line	int
&&	O
*	O
date_text	pointer
)	O
print_line	int
=	O
rc_valid_day	function
(	O
date_text	pointer
,	O
d	int
,	O
m	int
,	O
year	int
+	O
incr_year	int
-	O
decr_year	int
)	O
;	O
}	O
if	O
(	O
print_line	int
)	O
{	O
s1	pointer
[	O
k	int
]	O
=	O
s6	pointer
[	O
kk	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
got_command	int
)	O
{	O
if	O
(	O
!	O
kpos	int
)	O
print_line	int
=	O
FALSE	O
;	O
else	O
{	O
kk	int
=	O
kkpos	int
;	O
s1	pointer
[	O
kpos	int
]	O
=	O
s6	pointer
[	O
kk	int
]	O
=	O
'\0'	O
;	O
}	O
}	O
if	O
(	O
print_line	int
&&	O
(	O
rc_filter_text	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
&&	O
(	O
line_number	long
!=	O
SPECIAL_VALUE	O
)	O
)	O
{	O
if	O
(	O
rc_ignore_case_flag	int
)	O
{	O
ptr_char	pointer
=	O
s6	pointer
;	O
for	O
(	O
;	O
*	O
ptr_char	pointer
;	O
ptr_char	pointer
++	O
)	O
*	O
ptr_char	pointer
=	O
(	O
char	O
)	O
tolower	function
(	O
*	O
ptr_char	pointer
)	O
;	O
}	O
if	O
(	O
rc_revert_match_flag	int
)	O
print_line	int
=	O
!	O
print_line	int
;	O
}	O
if	O
(	O
got_command	int
&&	O
(	O
(	O
print_line	int
&&	O
(	O
kpos	int
||	O
rc_filter_text	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
)	O
||	O
(	O
!	O
print_line	int
&&	O
(	O
!	O
kpos	int
||	O
rc_filter_text	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
)	O
)	O
)	O
{	O
i	int
=	O
my_system	function
(	O
s1	pointer
+	O
kpos	int
+	O
j_diff	int
+	O
2	int
)	O
;	O
if	O
(	O
warning_level	int
>=	O
0	int
)	O
{	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
{	O
sprintf	function
(	O
s2	pointer
,	O
_	O
(	O
"Cannot execute command in file `%s'\nLine: %ld %s"	pointer
)	O
,	O
filename	pointer
,	O
line_number	long
,	O
the_text	pointer
+	O
kpos	int
+	O
j_diff	int
+	O
2	int
)	O
;	O
print_text	function
(	O
stderr	pointer
,	O
s2	pointer
)	O
;	O
if	O
(	O
warning_level	int
>=	O
WARN_LVL_MAX	int
)	O
{	O
k	int
=	O
(	O
int	O
)	O
strlen	function
(	O
s1	pointer
+	O
kpos	int
+	O
j_diff	int
+	O
2	int
)	O
;	O
if	O
(	O
(	O
Uint	int
)	O
k	int
>=	O
maxlen_max	int
-	O
9	int
)	O
resize_all_strings	function
(	O
k	int
+	O
9	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
sprintf	function
(	O
s2	pointer
,	O
"system(%s)="	pointer
,	O
s1	pointer
+	O
kpos	int
+	O
j_diff	int
+	O
2	int
)	O
;	O
my_error	function
(	O
ERR_INTERNAL_C_FUNC_FAILURE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
22L	int
,	O
s2	pointer
,	O
i	int
)	O
;	O
}	O
}	O
else	O
{	O
sprintf	function
(	O
s2	pointer
,	O
_	O
(	O
"Command executed (exit code=%d) in file `%s'\nLine %ld: %s"	pointer
)	O
,	O
i	int
,	O
filename	pointer
,	O
line_number	long
,	O
s1	pointer
+	O
kpos	int
+	O
j_diff	int
+	O
2	int
)	O
;	O
print_text	function
(	O
stderr	pointer
,	O
s2	pointer
)	O
;	O
if	O
(	O
i	int
&&	O
(	O
warning_level	int
>=	O
WARN_LVL_MAX	int
)	O
)	O
my_exit	function
(	O
ERR_EXTERNAL_CMD_FAILURE	int
)	O
;	O
}	O
}	O
shell_escape_done	int
=	O
TRUE	O
;	O
}	O
if	O
(	O
print_line	int
&&	O
highlight_flag	int
&&	O
(	O
hls1_set	int
||	O
hls2_set	int
)	O
)	O
{	O
if	O
(	O
hls1_set	int
)	O
{	O
if	O
(	O
ehls1e	struct
.	O
len	int
==	O
1	int
)	O
{	O
if	O
(	O
(	O
Uint	int
)	O
k	int
>=	O
maxlen_max	int
-	O
(	O
Uint	int
)	O
len_fn	int
-	O
1	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
}	O
else	O
{	O
while	O
(	O
(	O
Uint	int
)	O
k	int
>=	O
maxlen_max	int
-	O
(	O
Uint	int
)	O
len_fn	int
-	O
(	O
ehls1e	struct
.	O
len	int
+	O
1	int
)	O
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
}	O
strcat	function
(	O
s1	pointer
,	O
ehls1e	struct
.	O
seq	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
ehls2e	struct
.	O
len	int
==	O
1	int
)	O
{	O
if	O
(	O
(	O
Uint	int
)	O
k	int
>=	O
maxlen_max	int
-	O
(	O
Uint	int
)	O
len_fn	int
-	O
1	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
}	O
else	O
{	O
while	O
(	O
(	O
Uint	int
)	O
k	int
>=	O
maxlen_max	int
-	O
(	O
Uint	int
)	O
len_fn	int
-	O
(	O
ehls2e	struct
.	O
len	int
+	O
1	int
)	O
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
}	O
strcat	function
(	O
s1	pointer
,	O
ehls2e	struct
.	O
seq	pointer
)	O
;	O
}	O
}	O
}	O
if	O
(	O
print_line	int
)	O
{	O
if	O
(	O
rc_enable_fn_flag	int
&&	O
(	O
line_number	long
!=	O
SPECIAL_VALUE	O
)	O
)	O
{	O
sprintf	function
(	O
s6	pointer
,	O
"%0*d%02d%02d %c%s#%05ld%c"	pointer
,	O
len_year_max	int
,	O
year	int
+	O
incr_year	int
-	O
decr_year	int
,	O
m	int
,	O
d	int
,	O
PSEUDO_QUOTE	char
,	O
filename	pointer
,	O
line_number	long
,	O
PSEUDO_QUOTE	char
)	O
;	O
if	O
(	O
rc_suppr_text_part_flag	int
)	O
j	int
=	O
strlen	function
(	O
s6	pointer
)	O
;	O
if	O
(	O
*	O
s1	pointer
)	O
{	O
strcat	function
(	O
s6	pointer
,	O
" "	pointer
)	O
;	O
strcat	function
(	O
s6	pointer
,	O
s1	pointer
)	O
;	O
}	O
}	O
else	O
{	O
sprintf	function
(	O
s6	pointer
,	O
"%0*d%02d%02d %s"	pointer
,	O
len_year_max	int
,	O
year	int
+	O
incr_year	int
-	O
decr_year	int
,	O
m	int
,	O
d	int
,	O
s1	pointer
)	O
;	O
if	O
(	O
rc_suppr_text_part_flag	int
)	O
j	int
=	O
len_year_max	int
+	O
4	int
;	O
}	O
if	O
(	O
rc_week_number_flag	int
&&	O
(	O
line_number	long
!=	O
SPECIAL_VALUE	O
)	O
)	O
if	O
(	O
week_number	function
(	O
d	int
,	O
m	int
,	O
year	int
+	O
incr_year	int
-	O
decr_year	int
,	O
iso_week_number	int
,	O
start_day	int
)	O
<=	O
0	int
)	O
len_fil_wt	int
=	O
2	int
;	O
i	int
=	O
1	int
;	O
if	O
(	O
*	O
rc_elems	int
&&	O
(	O
line_number	long
!=	O
SPECIAL_VALUE	O
)	O
)	O
i	int
=	O
strcmp	function
(	O
s6	pointer
,	O
rc_elems_table	pointer
[	O
*	O
rc_elems	int
-	O
1	int
]	O
)	O
;	O
if	O
(	O
i	int
)	O
{	O
if	O
(	O
(	O
Uint	int
)	O
*	O
rc_elems	int
>=	O
rc_elems_max	int
)	O
{	O
rc_elems_max	int
<<=	O
1	int
;	O
if	O
(	O
rc_elems_max	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
>	O
testval	int
)	O
rc_elems_max	int
--	O
;	O
rc_elems_table	pointer
=	O
(	O
char	O
*	O
*	O
)	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
rc_elems_table	pointer
,	O
rc_elems_max	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"rc_elems_table[rc_elems_max]"	pointer
,	O
rc_elems_max	int
)	O
;	O
}	O
if	O
(	O
rc_suppr_text_part_flag	int
&&	O
(	O
line_number	long
!=	O
SPECIAL_VALUE	O
)	O
)	O
{	O
rc_elems_table	pointer
[	O
*	O
rc_elems	int
]	O
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
j	int
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"rc_elems_table[rc_elems]"	pointer
,	O
*	O
rc_elems	int
)	O
;	O
s6	pointer
[	O
j	int
]	O
=	O
'\0'	O
;	O
}	O
else	O
rc_elems_table	pointer
[	O
*	O
rc_elems	int
]	O
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
strlen	function
(	O
s6	pointer
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"rc_elems_table[rc_elems]"	pointer
,	O
*	O
rc_elems	int
)	O
;	O
strcpy	function
(	O
rc_elems_table	pointer
[	O
(	O
*	O
rc_elems	int
)	O
++	O
]	O
,	O
s6	pointer
)	O
;	O
}	O
}	O
if	O
(	O
print_twice	int
>	O
1	int
)	O
{	O
if	O
(	O
is_2easter	int
)	O
{	O
incr_year	int
=	O
1	int
;	O
precomp_date	function
(	O
hn	int
,	O
hwd	int
,	O
&	O
d	int
,	O
&	O
m	int
,	O
year	int
+	O
incr_year	int
,	O
EAster	int
)	O
;	O
}	O
else	O
if	O
(	O
is_2dvar	int
)	O
{	O
incr_year	int
=	O
1	int
;	O
if	O
(	O
islower	function
(	O
hc	char
)	O
)	O
(	O
void	O
)	O
precomp_date	function
(	O
hn	int
,	O
hwd	int
,	O
&	O
d_buf	int
,	O
&	O
m_buf	int
,	O
year	int
+	O
incr_year	int
,	O
(	O
hc	char
==	O
RC_TODAY_CHAR	char
)	O
?	O
TOday	int
:	O
DVar	int
)	O
;	O
else	O
{	O
y	int
=	O
year	int
+	O
incr_year	int
;	O
(	O
void	O
)	O
precomp_nth_wd	function
(	O
hn	int
,	O
hwd	int
,	O
&	O
hn	int
,	O
&	O
d_buf	int
,	O
&	O
m_buf	int
,	O
&	O
y	int
,	O
(	O
hc	char
==	O
'D'	O
)	O
?	O
DAy	int
:	O
WEek	int
)	O
;	O
}	O
d	int
=	O
d_buf	int
;	O
m	int
=	O
m_buf	int
;	O
}	O
else	O
(	O
void	O
)	O
next_date	function
(	O
&	O
d	int
,	O
&	O
m	int
,	O
&	O
year	int
)	O
;	O
if	O
(	O
year	int
+	O
incr_year	int
>	O
YEAR_MAX	int
)	O
print_twice	int
--	O
;	O
else	O
print_line	int
=	O
TRUE	O
;	O
}	O
}	O
while	O
(	O
--	O
print_twice	int
)	O
;	O
year	int
=	O
tmp_year	int
;	O
}	O
