typedef	O
struct	O
{	O
char	O
*	O
lo	pointer
;	O
char	O
*	O
hi	pointer
;	O
}	O
stack_node	struct
;	O
void	O
myqsort	function
(	O
void	O
*	O
const	O
pbase	pointer
,	O
size_t	long
total_elems	long
,	O
size_t	long
size	long
,	O
myqsort_cmp	pointer
cmp	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
register	O
char	O
*	O
base_ptr	pointer
=	O
(	O
char	O
*	O
)	O
pbase	pointer
;	O
char	O
*	O
pivot_buffer	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
size	long
)	O
;	O
const	O
size_t	long
max_thresh	long
=	O
MAX_THRESH	int
*	O
size	long
;	O
if	O
(	O
total_elems	long
==	O
0	int
)	O
{	O
free	function
(	O
pivot_buffer	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
total_elems	long
>	O
MAX_THRESH	int
)	O
{	O
char	O
*	O
lo	pointer
=	O
base_ptr	pointer
;	O
char	O
*	O
hi	pointer
=	O
&	O
lo	pointer
[	O
size	long
*	O
(	O
total_elems	long
-	O
1	int
)	O
]	O
;	O
stack_node	struct
stack	array
[	O
STACK_SIZE	O
]	O
;	O
stack_node	struct
*	O
top	pointer
=	O
stack	array
+	O
1	int
;	O
while	O
(	O
STACK_NOT_EMPTY	O
)	O
{	O
char	O
*	O
left_ptr	pointer
;	O
char	O
*	O
right_ptr	pointer
;	O
char	O
*	O
pivot	pointer
=	O
pivot_buffer	pointer
;	O
char	O
*	O
mid	pointer
=	O
lo	pointer
+	O
size	long
*	O
(	O
(	O
hi	pointer
-	O
lo	pointer
)	O
/	O
size	long
>>	O
1	int
)	O
;	O
if	O
(	O
(	O
*	O
cmp	pointer
)	O
(	O
data	pointer
,	O
(	O
void	O
*	O
)	O
mid	pointer
,	O
(	O
void	O
*	O
)	O
lo	pointer
)	O
<	O
0	int
)	O
SWAP	O
(	O
mid	pointer
,	O
lo	pointer
,	O
size	long
)	O
;	O
if	O
(	O
(	O
*	O
cmp	pointer
)	O
(	O
data	pointer
,	O
(	O
void	O
*	O
)	O
hi	pointer
,	O
(	O
void	O
*	O
)	O
mid	pointer
)	O
<	O
0	int
)	O
SWAP	O
(	O
mid	pointer
,	O
hi	pointer
,	O
size	long
)	O
;	O
else	O
goto	O
jump_over	O
;	O
if	O
(	O
(	O
*	O
cmp	pointer
)	O
(	O
data	pointer
,	O
(	O
void	O
*	O
)	O
mid	pointer
,	O
(	O
void	O
*	O
)	O
lo	pointer
)	O
<	O
0	int
)	O
SWAP	O
(	O
mid	pointer
,	O
lo	pointer
,	O
size	long
)	O
;	O
jump_over	O
:	O
;	O
memcpy	function
(	O
pivot	pointer
,	O
mid	pointer
,	O
size	long
)	O
;	O
pivot	pointer
=	O
pivot_buffer	pointer
;	O
left_ptr	pointer
=	O
lo	pointer
+	O
size	long
;	O
right_ptr	pointer
=	O
hi	pointer
-	O
size	long
;	O
do	O
{	O
while	O
(	O
(	O
*	O
cmp	pointer
)	O
(	O
data	pointer
,	O
(	O
void	O
*	O
)	O
left_ptr	pointer
,	O
(	O
void	O
*	O
)	O
pivot	pointer
)	O
<	O
0	int
)	O
left_ptr	pointer
+=	O
size	long
;	O
while	O
(	O
(	O
*	O
cmp	pointer
)	O
(	O
data	pointer
,	O
(	O
void	O
*	O
)	O
pivot	pointer
,	O
(	O
void	O
*	O
)	O
right_ptr	pointer
)	O
<	O
0	int
)	O
right_ptr	pointer
-=	O
size	long
;	O
if	O
(	O
left_ptr	pointer
<	O
right_ptr	pointer
)	O
{	O
SWAP	O
(	O
left_ptr	pointer
,	O
right_ptr	pointer
,	O
size	long
)	O
;	O
left_ptr	pointer
+=	O
size	long
;	O
right_ptr	pointer
-=	O
size	long
;	O
}	O
else	O
if	O
(	O
left_ptr	pointer
==	O
right_ptr	pointer
)	O
{	O
left_ptr	pointer
+=	O
size	long
;	O
right_ptr	pointer
-=	O
size	long
;	O
break	O
;	O
}	O
}	O
while	O
(	O
left_ptr	pointer
<=	O
right_ptr	pointer
)	O
;	O
if	O
(	O
(	O
size_t	long
)	O
(	O
right_ptr	pointer
-	O
lo	pointer
)	O
<=	O
max_thresh	long
)	O
{	O
if	O
(	O
(	O
size_t	long
)	O
(	O
hi	pointer
-	O
left_ptr	pointer
)	O
<=	O
max_thresh	long
)	O
POP	O
(	O
lo	pointer
,	O
hi	pointer
)	O
;	O
else	O
lo	pointer
=	O
left_ptr	pointer
;	O
}	O
else	O
if	O
(	O
(	O
size_t	long
)	O
(	O
hi	pointer
-	O
left_ptr	pointer
)	O
<=	O
max_thresh	long
)	O
hi	pointer
=	O
right_ptr	pointer
;	O
else	O
if	O
(	O
(	O
right_ptr	pointer
-	O
lo	pointer
)	O
>	O
(	O
hi	pointer
-	O
left_ptr	pointer
)	O
)	O
{	O
PUSH	O
(	O
lo	pointer
,	O
right_ptr	pointer
)	O
;	O
lo	pointer
=	O
left_ptr	pointer
;	O
}	O
else	O
{	O
PUSH	O
(	O
left_ptr	pointer
,	O
hi	pointer
)	O
;	O
hi	pointer
=	O
right_ptr	pointer
;	O
}	O
}	O
}	O
{	O
char	O
*	O
const	O
end_ptr	pointer
=	O
&	O
base_ptr	pointer
[	O
size	long
*	O
(	O
total_elems	long
-	O
1	int
)	O
]	O
;	O
char	O
*	O
tmp_ptr	pointer
=	O
base_ptr	pointer
;	O
char	O
*	O
thresh	pointer
=	O
min	O
(	O
end_ptr	pointer
,	O
base_ptr	pointer
+	O
max_thresh	long
)	O
;	O
register	O
char	O
*	O
run_ptr	pointer
;	O
for	O
(	O
run_ptr	pointer
=	O
tmp_ptr	pointer
+	O
size	long
;	O
run_ptr	pointer
<=	O
thresh	pointer
;	O
run_ptr	pointer
+=	O
size	long
)	O
if	O
(	O
(	O
*	O
cmp	pointer
)	O
(	O
data	pointer
,	O
(	O
void	O
*	O
)	O
run_ptr	pointer
,	O
(	O
void	O
*	O
)	O
tmp_ptr	pointer
)	O
<	O
0	int
)	O
tmp_ptr	pointer
=	O
run_ptr	pointer
;	O
if	O
(	O
tmp_ptr	pointer
!=	O
base_ptr	pointer
)	O
SWAP	O
(	O
tmp_ptr	pointer
,	O
base_ptr	pointer
,	O
size	long
)	O
;	O
run_ptr	pointer
=	O
base_ptr	pointer
+	O
size	long
;	O
while	O
(	O
(	O
run_ptr	pointer
+=	O
size	long
)	O
<=	O
end_ptr	pointer
)	O
{	O
tmp_ptr	pointer
=	O
run_ptr	pointer
-	O
size	long
;	O
while	O
(	O
(	O
*	O
cmp	pointer
)	O
(	O
data	pointer
,	O
(	O
void	O
*	O
)	O
run_ptr	pointer
,	O
(	O
void	O
*	O
)	O
tmp_ptr	pointer
)	O
<	O
0	int
)	O
tmp_ptr	pointer
-=	O
size	long
;	O
tmp_ptr	pointer
+=	O
size	long
;	O
if	O
(	O
tmp_ptr	pointer
!=	O
run_ptr	pointer
)	O
{	O
char	O
*	O
trav	pointer
;	O
trav	pointer
=	O
run_ptr	pointer
+	O
size	long
;	O
while	O
(	O
--	O
trav	pointer
>=	O
run_ptr	pointer
)	O
{	O
char	O
c	char
=	O
*	O
trav	pointer
;	O
char	O
*	O
hi	pointer
,	O
*	O
lo	pointer
;	O
for	O
(	O
hi	pointer
=	O
lo	pointer
=	O
trav	pointer
;	O
(	O
lo	pointer
-=	O
size	long
)	O
>=	O
tmp_ptr	pointer
;	O
hi	pointer
=	O
lo	pointer
)	O
*	O
hi	pointer
=	O
*	O
lo	pointer
;	O
*	O
hi	pointer
=	O
c	char
;	O
}	O
}	O
}	O
}	O
free	function
(	O
pivot_buffer	pointer
)	O
;	O
}	O
