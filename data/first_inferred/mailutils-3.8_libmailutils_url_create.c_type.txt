struct	O
mu_url_ctx	struct
{	O
int	O
flags	int
;	O
const	O
char	O
*	O
input	pointer
;	O
const	O
char	O
*	O
cur	pointer
;	O
mu_url_t	pointer
url	pointer
;	O
size_t	long
passoff	long
;	O
char	O
*	O
tokbuf	pointer
;	O
size_t	long
toksize	long
;	O
size_t	long
toklen	long
;	O
}	O
;	O
static	O
int	O
getkn	function
(	O
struct	O
mu_url_ctx	struct
*	O
ctx	pointer
,	O
char	O
*	O
delim	int
)	O
{	O
size_t	long
n	long
;	O
if	O
(	O
*	O
ctx	pointer
->	O
cur	pointer
==	O
0	int
)	O
return	O
MU_ERR_PARSE	O
;	O
n	long
=	O
strcspn	function
(	O
ctx	pointer
->	O
cur	pointer
,	O
delim	int
)	O
;	O
if	O
(	O
n	long
+	O
1	int
>	O
ctx	pointer
->	O
toksize	long
)	O
{	O
char	O
*	O
p	pointer
=	O
realloc	function
(	O
ctx	pointer
->	O
tokbuf	pointer
,	O
n	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
ENOENT	int
;	O
ctx	pointer
->	O
toksize	long
=	O
n	long
+	O
1	int
;	O
ctx	pointer
->	O
tokbuf	pointer
=	O
p	pointer
;	O
}	O
memcpy	function
(	O
ctx	pointer
->	O
tokbuf	pointer
,	O
ctx	pointer
->	O
cur	pointer
,	O
n	long
)	O
;	O
ctx	pointer
->	O
tokbuf	pointer
[	O
n	long
]	O
=	O
0	int
;	O
ctx	pointer
->	O
toklen	long
=	O
n	long
;	O
ctx	pointer
->	O
cur	pointer
+=	O
n	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
expand_array	function
(	O
size_t	long
*	O
pwc	pointer
,	O
char	O
*	O
*	O
*	O
pwv	pointer
,	O
int	O
incr	int
)	O
{	O
size_t	long
wc	long
=	O
*	O
pwc	pointer
;	O
char	O
*	O
*	O
wv	pointer
=	O
*	O
pwv	pointer
;	O
if	O
(	O
!	O
wv	pointer
)	O
{	O
wv	pointer
=	O
calloc	function
(	O
INIT_ARRAY_SIZE	int
,	O
sizeof	O
(	O
wv	pointer
[	O
0	int
]	O
)	O
)	O
;	O
wc	long
=	O
INIT_ARRAY_SIZE	int
;	O
}	O
else	O
{	O
if	O
(	O
incr	int
)	O
wc	long
+=	O
incr	int
;	O
else	O
{	O
size_t	long
newsize	long
=	O
wc	long
*	O
2	int
;	O
if	O
(	O
newsize	long
<	O
wc	long
)	O
return	O
ENOMEM	int
;	O
wc	long
=	O
newsize	long
;	O
}	O
wv	pointer
=	O
realloc	function
(	O
wv	pointer
,	O
sizeof	O
(	O
wv	pointer
[	O
0	int
]	O
)	O
*	O
wc	long
)	O
;	O
}	O
if	O
(	O
!	O
wv	pointer
)	O
return	O
ENOMEM	int
;	O
*	O
pwv	pointer
=	O
wv	pointer
;	O
*	O
pwc	pointer
=	O
wc	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_param	function
(	O
struct	O
mu_url_ctx	struct
*	O
ctx	pointer
,	O
char	O
*	O
delim	int
,	O
int	O
*	O
pargc	pointer
,	O
char	O
*	O
*	O
*	O
pargv	pointer
)	O
{	O
int	O
rc	int
;	O
size_t	long
wc	long
=	O
0	int
,	O
wn	long
=	O
0	int
;	O
char	O
*	O
*	O
wv	pointer
=	O
NULL	O
;	O
while	O
(	O
(	O
rc	int
=	O
getkn	function
(	O
ctx	pointer
,	O
delim	int
)	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
wn	long
==	O
wc	long
)	O
{	O
rc	int
=	O
expand_array	function
(	O
&	O
wc	long
,	O
&	O
wv	pointer
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
}	O
wv	pointer
[	O
wn	long
]	O
=	O
strdup	function
(	O
ctx	pointer
->	O
tokbuf	pointer
)	O
;	O
if	O
(	O
!	O
wv	pointer
[	O
wn	long
]	O
)	O
{	O
rc	int
=	O
ENOMEM	int
;	O
break	O
;	O
}	O
wn	long
++	O
;	O
if	O
(	O
*	O
ctx	pointer
->	O
cur	pointer
!=	O
delim	int
[	O
0	int
]	O
)	O
break	O
;	O
ctx	pointer
->	O
cur	pointer
++	O
;	O
}	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
wn	long
==	O
wc	long
)	O
{	O
rc	int
=	O
expand_array	function
(	O
&	O
wc	long
,	O
&	O
wv	pointer
,	O
1	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_argcv_free	function
(	O
wc	long
,	O
wv	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
wv	pointer
[	O
wn	long
]	O
=	O
NULL	O
;	O
}	O
*	O
pargv	pointer
=	O
realloc	function
(	O
wv	pointer
,	O
sizeof	O
(	O
wv	pointer
[	O
0	int
]	O
)	O
*	O
(	O
wn	long
+	O
1	int
)	O
)	O
;	O
*	O
pargc	pointer
=	O
wn	long
;	O
}	O
else	O
mu_argcv_free	function
(	O
wc	long
,	O
wv	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_mu_url_ctx_parse_query	function
(	O
struct	O
mu_url_ctx	struct
*	O
ctx	pointer
)	O
{	O
int	O
rc	int
;	O
ctx	pointer
->	O
cur	pointer
++	O
;	O
rc	int
=	O
parse_param	function
(	O
ctx	pointer
,	O
"&"	pointer
,	O
&	O
ctx	pointer
->	O
url	pointer
->	O
qargc	int
,	O
&	O
ctx	pointer
->	O
url	pointer
->	O
qargv	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
&&	O
ctx	pointer
->	O
url	pointer
->	O
qargc	int
)	O
ctx	pointer
->	O
url	pointer
->	O
flags	int
|=	O
MU_URL_QUERY	int
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_mu_url_ctx_parse_param	function
(	O
struct	O
mu_url_ctx	struct
*	O
ctx	pointer
)	O
{	O
int	O
rc	int
;	O
ctx	pointer
->	O
cur	pointer
++	O
;	O
rc	int
=	O
parse_param	function
(	O
ctx	pointer
,	O
";?"	pointer
,	O
&	O
ctx	pointer
->	O
url	pointer
->	O
fvcount	int
,	O
&	O
ctx	pointer
->	O
url	pointer
->	O
fvpairs	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
ctx	pointer
->	O
url	pointer
->	O
fvcount	int
)	O
ctx	pointer
->	O
url	pointer
->	O
flags	int
|=	O
MU_URL_PARAM	int
;	O
if	O
(	O
*	O
ctx	pointer
->	O
cur	pointer
==	O
'?'	O
)	O
return	O
_mu_url_ctx_parse_query	function
(	O
ctx	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
str_assign	function
(	O
char	O
*	O
*	O
ptr	pointer
,	O
const	O
char	O
*	O
str	pointer
)	O
{	O
*	O
ptr	pointer
=	O
strdup	function
(	O
str	pointer
)	O
;	O
if	O
(	O
!	O
*	O
ptr	pointer
)	O
return	O
ENOMEM	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_mu_url_ctx_parse_path	function
(	O
struct	O
mu_url_ctx	struct
*	O
ctx	pointer
)	O
{	O
int	O
rc	int
;	O
mu_url_t	pointer
url	pointer
=	O
ctx	pointer
->	O
url	pointer
;	O
rc	int
=	O
getkn	function
(	O
ctx	pointer
,	O
";?"	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
str_assign	function
(	O
&	O
url	pointer
->	O
path	pointer
,	O
ctx	pointer
->	O
tokbuf	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
url	pointer
->	O
flags	int
|=	O
MU_URL_PATH	int
;	O
if	O
(	O
*	O
ctx	pointer
->	O
cur	pointer
==	O
';'	O
)	O
return	O
_mu_url_ctx_parse_param	function
(	O
ctx	pointer
)	O
;	O
if	O
(	O
*	O
ctx	pointer
->	O
cur	pointer
==	O
'?'	O
)	O
return	O
_mu_url_ctx_parse_query	function
(	O
ctx	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_mu_url_ctx_parse_host	function
(	O
struct	O
mu_url_ctx	struct
*	O
ctx	pointer
,	O
int	O
has_host	int
)	O
{	O
int	O
rc	int
;	O
mu_url_t	pointer
url	pointer
=	O
ctx	pointer
->	O
url	pointer
;	O
if	O
(	O
ctx	pointer
->	O
flags	int
&	O
MU_URL_PARSE_LOCAL	int
)	O
return	O
_mu_url_ctx_parse_path	function
(	O
ctx	pointer
)	O
;	O
rc	int
=	O
getkn	function
(	O
ctx	pointer
,	O
"[:/;?"	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
*	O
ctx	pointer
->	O
cur	pointer
==	O
'['	O
)	O
{	O
rc	int
=	O
getkn	function
(	O
ctx	pointer
,	O
"]/;?"	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
*	O
ctx	pointer
->	O
cur	pointer
==	O
']'	O
)	O
{	O
ctx	pointer
->	O
cur	pointer
++	O
;	O
rc	int
=	O
str_assign	function
(	O
&	O
url	pointer
->	O
host	pointer
,	O
ctx	pointer
->	O
tokbuf	pointer
+	O
1	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
url	pointer
->	O
flags	int
|=	O
MU_URL_HOST	int
|	O
MU_URL_IPV6	int
;	O
has_host	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
!	O
(	O
url	pointer
->	O
flags	int
&	O
MU_URL_HOST	int
)	O
&&	O
ctx	pointer
->	O
toklen	long
)	O
{	O
rc	int
=	O
str_assign	function
(	O
&	O
url	pointer
->	O
host	pointer
,	O
ctx	pointer
->	O
tokbuf	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
url	pointer
->	O
flags	int
|=	O
MU_URL_HOST	int
;	O
has_host	int
=	O
1	int
;	O
}	O
if	O
(	O
*	O
ctx	pointer
->	O
cur	pointer
==	O
':'	O
)	O
{	O
has_host	int
=	O
1	int
;	O
ctx	pointer
->	O
cur	pointer
++	O
;	O
rc	int
=	O
getkn	function
(	O
ctx	pointer
,	O
":/;?"	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
str_assign	function
(	O
&	O
url	pointer
->	O
portstr	pointer
,	O
ctx	pointer
->	O
tokbuf	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
url	pointer
->	O
flags	int
|=	O
MU_URL_PORT	int
;	O
}	O
if	O
(	O
*	O
ctx	pointer
->	O
cur	pointer
==	O
'/'	O
)	O
{	O
if	O
(	O
has_host	int
)	O
{	O
ctx	pointer
->	O
cur	pointer
++	O
;	O
if	O
(	O
*	O
ctx	pointer
->	O
cur	pointer
==	O
0	int
)	O
{	O
rc	int
=	O
str_assign	function
(	O
&	O
url	pointer
->	O
path	pointer
,	O
""	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
url	pointer
->	O
flags	int
|=	O
MU_URL_PATH	int
;	O
return	O
rc	int
;	O
}	O
}	O
return	O
_mu_url_ctx_parse_path	function
(	O
ctx	pointer
)	O
;	O
}	O
if	O
(	O
*	O
ctx	pointer
->	O
cur	pointer
==	O
';'	O
)	O
return	O
_mu_url_ctx_parse_param	function
(	O
ctx	pointer
)	O
;	O
if	O
(	O
*	O
ctx	pointer
->	O
cur	pointer
==	O
'?'	O
)	O
return	O
_mu_url_ctx_parse_query	function
(	O
ctx	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_mu_url_ctx_parse_cred	function
(	O
struct	O
mu_url_ctx	struct
*	O
ctx	pointer
)	O
{	O
int	O
rc	int
,	O
has_cred	int
;	O
mu_url_t	pointer
url	pointer
=	O
ctx	pointer
->	O
url	pointer
;	O
const	O
char	O
*	O
save	pointer
=	O
ctx	pointer
->	O
cur	pointer
;	O
if	O
(	O
*	O
ctx	pointer
->	O
cur	pointer
==	O
0	int
)	O
return	O
0	int
;	O
rc	int
=	O
getkn	function
(	O
ctx	pointer
,	O
"@"	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
has_cred	int
=	O
*	O
ctx	pointer
->	O
cur	pointer
==	O
'@'	O
;	O
ctx	pointer
->	O
cur	pointer
=	O
save	pointer
;	O
if	O
(	O
has_cred	int
)	O
{	O
rc	int
=	O
getkn	function
(	O
ctx	pointer
,	O
":;@"	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
ctx	pointer
->	O
toklen	long
)	O
{	O
rc	int
=	O
str_assign	function
(	O
&	O
url	pointer
->	O
user	pointer
,	O
ctx	pointer
->	O
tokbuf	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
url	pointer
->	O
flags	int
|=	O
MU_URL_USER	int
;	O
}	O
if	O
(	O
*	O
ctx	pointer
->	O
cur	pointer
==	O
':'	O
)	O
{	O
ctx	pointer
->	O
cur	pointer
++	O
;	O
ctx	pointer
->	O
passoff	long
=	O
ctx	pointer
->	O
cur	pointer
-	O
ctx	pointer
->	O
input	pointer
;	O
rc	int
=	O
getkn	function
(	O
ctx	pointer
,	O
";@"	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
ctx	pointer
->	O
toklen	long
)	O
{	O
if	O
(	O
mu_secret_create	function
(	O
&	O
url	pointer
->	O
secret	pointer
,	O
ctx	pointer
->	O
tokbuf	pointer
,	O
ctx	pointer
->	O
toklen	long
)	O
)	O
return	O
ENOMEM	int
;	O
else	O
memset	function
(	O
ctx	pointer
->	O
tokbuf	pointer
,	O
0	int
,	O
ctx	pointer
->	O
toklen	long
)	O
;	O
url	pointer
->	O
flags	int
|=	O
MU_URL_SECRET	int
;	O
}	O
}	O
if	O
(	O
*	O
ctx	pointer
->	O
cur	pointer
==	O
';'	O
)	O
{	O
ctx	pointer
->	O
cur	pointer
++	O
;	O
rc	int
=	O
getkn	function
(	O
ctx	pointer
,	O
"@"	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
mu_c_strncasecmp	function
(	O
ctx	pointer
->	O
tokbuf	pointer
,	O
"auth="	pointer
,	O
5	int
)	O
==	O
0	int
)	O
{	O
rc	int
=	O
str_assign	function
(	O
&	O
url	pointer
->	O
auth	pointer
,	O
ctx	pointer
->	O
tokbuf	pointer
+	O
5	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
url	pointer
->	O
flags	int
|=	O
MU_URL_AUTH	int
;	O
}	O
}	O
ctx	pointer
->	O
cur	pointer
++	O
;	O
}	O
return	O
_mu_url_ctx_parse_host	function
(	O
ctx	pointer
,	O
has_cred	int
)	O
;	O
}	O
int	O
_mu_url_ctx_parse	function
(	O
struct	O
mu_url_ctx	struct
*	O
ctx	pointer
)	O
{	O
int	O
rc	int
;	O
mu_url_t	pointer
url	pointer
=	O
ctx	pointer
->	O
url	pointer
;	O
const	O
char	O
*	O
save	pointer
=	O
ctx	pointer
->	O
cur	pointer
;	O
if	O
(	O
*	O
ctx	pointer
->	O
cur	pointer
==	O
':'	O
)	O
return	O
_mu_url_ctx_parse_cred	function
(	O
ctx	pointer
)	O
;	O
rc	int
=	O
getkn	function
(	O
ctx	pointer
,	O
":/"	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
*	O
ctx	pointer
->	O
cur	pointer
==	O
':'	O
&&	O
(	O
(	O
ctx	pointer
->	O
flags	int
&	O
MU_URL_PARSE_DSLASH_OPTIONAL	int
)	O
||	O
(	O
ctx	pointer
->	O
cur	pointer
[	O
1	int
]	O
==	O
'/'	O
&&	O
ctx	pointer
->	O
cur	pointer
[	O
2	int
]	O
==	O
'/'	O
)	O
)	O
)	O
{	O
rc	int
=	O
str_assign	function
(	O
&	O
url	pointer
->	O
scheme	pointer
,	O
ctx	pointer
->	O
tokbuf	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
url	pointer
->	O
flags	int
|=	O
MU_URL_SCHEME	int
;	O
ctx	pointer
->	O
cur	pointer
++	O
;	O
}	O
else	O
{	O
ctx	pointer
->	O
cur	pointer
=	O
save	pointer
;	O
return	O
_mu_url_ctx_parse_cred	function
(	O
ctx	pointer
)	O
;	O
}	O
if	O
(	O
*	O
ctx	pointer
->	O
cur	pointer
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
ctx	pointer
->	O
cur	pointer
[	O
0	int
]	O
==	O
'/'	O
&&	O
ctx	pointer
->	O
cur	pointer
[	O
1	int
]	O
==	O
'/'	O
)	O
{	O
ctx	pointer
->	O
cur	pointer
+=	O
2	int
;	O
return	O
_mu_url_ctx_parse_cred	function
(	O
ctx	pointer
)	O
;	O
}	O
return	O
_mu_url_ctx_parse_path	function
(	O
ctx	pointer
)	O
;	O
}	O
static	O
int	O
_mu_url_create_internal	function
(	O
struct	O
mu_url_ctx	struct
*	O
ctx	pointer
,	O
mu_url_t	pointer
hint	pointer
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
mu_url_t	pointer
url	pointer
=	O
ctx	pointer
->	O
url	pointer
;	O
const	O
char	O
*	O
scheme	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ctx	pointer
->	O
flags	int
&	O
MU_URL_PARSE_PIPE	int
)	O
&&	O
ctx	pointer
->	O
input	pointer
[	O
0	int
]	O
==	O
'|'	O
)	O
{	O
struct	O
mu_wordsplit	struct
ws	pointer
;	O
size_t	long
i	long
;	O
scheme	pointer
=	O
"prog"	pointer
;	O
ctx	pointer
->	O
flags	int
&=	O
~	O
MU_URL_PARSE_HEXCODE	int
;	O
if	O
(	O
mu_wordsplit	struct
(	O
ctx	pointer
->	O
input	pointer
+	O
1	int
,	O
&	O
ws	pointer
,	O
MU_WRDSF_DEFFLAGS	O
)	O
)	O
return	O
errno	O
;	O
url	pointer
->	O
path	pointer
=	O
strdup	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
!	O
url	pointer
->	O
path	pointer
)	O
{	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
url	pointer
->	O
flags	int
|=	O
MU_URL_PATH	int
;	O
url	pointer
->	O
qargc	int
=	O
ws	pointer
.	O
ws_wordc	long
-	O
1	int
;	O
url	pointer
->	O
qargv	pointer
=	O
calloc	function
(	O
url	pointer
->	O
qargc	int
+	O
1	int
,	O
sizeof	O
(	O
url	pointer
->	O
qargv	pointer
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
url	pointer
->	O
qargv	pointer
)	O
{	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
url	pointer
->	O
qargc	int
;	O
i	long
++	O
)	O
url	pointer
->	O
qargv	pointer
[	O
i	long
]	O
=	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	long
+	O
1	int
]	O
;	O
ws	pointer
.	O
ws_wordc	long
=	O
0	int
;	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
url	pointer
->	O
flags	int
|=	O
MU_URL_QUERY	int
;	O
}	O
else	O
if	O
(	O
(	O
ctx	pointer
->	O
flags	int
&	O
MU_URL_PARSE_SLASH	int
)	O
&&	O
(	O
ctx	pointer
->	O
input	pointer
[	O
0	int
]	O
==	O
'/'	O
||	O
(	O
ctx	pointer
->	O
input	pointer
[	O
0	int
]	O
==	O
'.'	O
&&	O
ctx	pointer
->	O
input	pointer
[	O
1	int
]	O
==	O
'/'	O
)	O
)	O
)	O
{	O
scheme	pointer
=	O
"file"	pointer
;	O
ctx	pointer
->	O
flags	int
&=	O
~	O
MU_URL_PARSE_HEXCODE	int
;	O
rc	int
=	O
str_assign	function
(	O
&	O
url	pointer
->	O
path	pointer
,	O
ctx	pointer
->	O
input	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
url	pointer
->	O
flags	int
|=	O
MU_URL_PATH	int
;	O
}	O
else	O
{	O
if	O
(	O
ctx	pointer
->	O
flags	int
&	O
MU_URL_PARSE_LOCAL	int
)	O
scheme	pointer
=	O
"file"	pointer
;	O
rc	int
=	O
_mu_url_ctx_parse	function
(	O
ctx	pointer
)	O
;	O
}	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
hint	pointer
)	O
{	O
rc	int
=	O
mu_url_copy_hints	function
(	O
url	pointer
,	O
hint	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
if	O
(	O
!	O
(	O
url	pointer
->	O
flags	int
&	O
MU_URL_SCHEME	int
)	O
)	O
{	O
if	O
(	O
scheme	pointer
)	O
{	O
rc	int
=	O
str_assign	function
(	O
&	O
url	pointer
->	O
scheme	pointer
,	O
scheme	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
url	pointer
->	O
flags	int
|=	O
MU_URL_SCHEME	int
;	O
}	O
else	O
return	O
MU_ERR_URL_MISS_PARTS	O
;	O
}	O
mu_strlower	function
(	O
url	pointer
->	O
scheme	pointer
)	O
;	O
if	O
(	O
(	O
url	pointer
->	O
flags	int
&	O
MU_URL_PORT	int
)	O
&&	O
url	pointer
->	O
port	int
==	O
0	int
)	O
{	O
unsigned	O
long	O
n	long
;	O
char	O
*	O
p	pointer
;	O
n	long
=	O
strtoul	function
(	O
url	pointer
->	O
portstr	pointer
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
{	O
if	O
(	O
ctx	pointer
->	O
flags	int
&	O
MU_URL_PARSE_PORTSRV	int
)	O
{	O
struct	O
servent	struct
*	O
sp	pointer
=	O
getservbyname	function
(	O
url	pointer
->	O
portstr	pointer
,	O
"tcp"	pointer
)	O
;	O
if	O
(	O
!	O
sp	pointer
)	O
return	O
MU_ERR_TCP_NO_PORT	O
;	O
url	pointer
->	O
port	int
=	O
ntohs	function
(	O
sp	pointer
->	O
s_port	int
)	O
;	O
}	O
else	O
return	O
MU_ERR_TCP_NO_PORT	O
;	O
}	O
else	O
if	O
(	O
n	long
>	O
USHRT_MAX	O
)	O
return	O
ERANGE	int
;	O
else	O
url	pointer
->	O
port	int
=	O
n	long
;	O
}	O
if	O
(	O
ctx	pointer
->	O
flags	int
&	O
MU_URL_PARSE_HEXCODE	int
)	O
{	O
rc	int
=	O
mu_url_decode	function
(	O
url	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
if	O
(	O
(	O
url	pointer
->	O
flags	int
&	O
MU_URL_SECRET	int
)	O
&&	O
(	O
ctx	pointer
->	O
flags	int
&	O
MU_URL_PARSE_HIDEPASS	int
)	O
)	O
{	O
size_t	long
plen	pointer
=	O
mu_secret_length	function
(	O
url	pointer
->	O
secret	pointer
)	O
;	O
size_t	long
nlen	long
=	O
strlen	function
(	O
url	pointer
->	O
name	pointer
)	O
;	O
size_t	long
len	long
=	O
nlen	long
-	O
plen	pointer
+	O
PASS_REPL_LEN	O
+	O
1	int
;	O
char	O
*	O
newname	pointer
;	O
memset	function
(	O
url	pointer
->	O
name	pointer
+	O
ctx	pointer
->	O
passoff	long
,	O
0	int
,	O
plen	pointer
)	O
;	O
if	O
(	O
len	long
>	O
nlen	long
+	O
1	int
)	O
{	O
newname	pointer
=	O
realloc	function
(	O
url	pointer
->	O
name	pointer
,	O
len	long
)	O
;	O
if	O
(	O
!	O
newname	pointer
)	O
return	O
rc	int
;	O
url	pointer
->	O
name	pointer
=	O
newname	pointer
;	O
}	O
else	O
newname	pointer
=	O
url	pointer
->	O
name	pointer
;	O
memmove	function
(	O
newname	pointer
+	O
ctx	pointer
->	O
passoff	long
+	O
PASS_REPL_LEN	O
,	O
newname	pointer
+	O
ctx	pointer
->	O
passoff	long
+	O
plen	pointer
,	O
nlen	long
-	O
(	O
ctx	pointer
->	O
passoff	long
+	O
plen	pointer
)	O
+	O
1	int
)	O
;	O
memcpy	function
(	O
newname	pointer
+	O
ctx	pointer
->	O
passoff	long
,	O
PASS_REPL	pointer
,	O
PASS_REPL_LEN	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_url_create_hint	function
(	O
mu_url_t	pointer
*	O
purl	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
int	O
flags	int
,	O
mu_url_t	pointer
hint	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_url_ctx	struct
ctx	pointer
;	O
mu_url_t	pointer
url	pointer
;	O
if	O
(	O
!	O
purl	pointer
)	O
return	O
EINVAL	int
;	O
url	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
url	pointer
)	O
)	O
;	O
if	O
(	O
url	pointer
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
url	pointer
->	O
name	pointer
=	O
strdup	function
(	O
str	pointer
)	O
;	O
if	O
(	O
!	O
url	pointer
->	O
name	pointer
)	O
{	O
free	function
(	O
url	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
memset	function
(	O
&	O
ctx	pointer
,	O
0	int
,	O
sizeof	O
(	O
ctx	pointer
)	O
)	O
;	O
ctx	pointer
.	O
flags	int
=	O
flags	int
;	O
ctx	pointer
.	O
input	pointer
=	O
str	pointer
;	O
ctx	pointer
.	O
cur	pointer
=	O
ctx	pointer
.	O
input	pointer
;	O
ctx	pointer
.	O
url	pointer
=	O
url	pointer
;	O
rc	int
=	O
_mu_url_create_internal	function
(	O
&	O
ctx	pointer
,	O
hint	pointer
)	O
;	O
free	function
(	O
ctx	pointer
.	O
tokbuf	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_url_destroy	function
(	O
&	O
url	pointer
)	O
;	O
else	O
*	O
purl	pointer
=	O
url	pointer
;	O
return	O
rc	int
;	O
}	O
int	O
mu_url_create	function
(	O
mu_url_t	pointer
*	O
purl	pointer
,	O
const	O
char	O
*	O
str	pointer
)	O
{	O
return	O
mu_url_create_hint	function
(	O
purl	pointer
,	O
str	pointer
,	O
MU_URL_PARSE_HEXCODE	int
|	O
MU_URL_PARSE_HIDEPASS	int
|	O
MU_URL_PARSE_PORTSRV	int
|	O
MU_URL_PARSE_PIPE	int
|	O
MU_URL_PARSE_SLASH	int
|	O
MU_URL_PARSE_DSLASH_OPTIONAL	int
,	O
NULL	O
)	O
;	O
}	O
