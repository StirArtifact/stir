extern	O
void	O
main_sig_handler	function
(	O
int	O
signum	int
)	O
;	O
extern	O
void	O
safe_sig_handler	function
(	O
int	O
signum	int
)	O
;	O
static	O
int	O
printlogline	function
(	O
STROB	struct
*	O
buf	pointer
,	O
char	O
*	O
sptr	pointer
)	O
{	O
time_t	long
tm	struct
;	O
char	O
result	pointer
[	O
64	int
]	O
;	O
char	O
*	O
s	pointer
;	O
time	struct
(	O
&	O
tm	struct
)	O
;	O
strncpy	function
(	O
result	pointer
,	O
asctime	function
(	O
localtime	function
(	O
&	O
tm	struct
)	O
)	O
,	O
sizeof	O
(	O
result	pointer
)	O
-	O
1	int
)	O
;	O
result	pointer
[	O
sizeof	O
(	O
result	pointer
)	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
s	pointer
=	O
result	pointer
;	O
s	pointer
=	O
strchr	function
(	O
result	pointer
,	O
' '	O
)	O
;	O
if	O
(	O
s	pointer
)	O
{	O
s	pointer
++	O
;	O
}	O
else	O
{	O
s	pointer
=	O
result	pointer
;	O
}	O
swlib_squash_trailing_vnewline	function
(	O
result	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
0	int
,	O
"%s [%d] %s"	pointer
,	O
s	pointer
,	O
(	O
int	O
)	O
getpid	function
(	O
)	O
,	O
sptr	pointer
)	O
;	O
return	O
0	int
;	O
}	O
SWLOG	struct
*	O
swutil_open	function
(	O
void	O
)	O
{	O
SWLOG	struct
*	O
swutil	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
SWLOG	struct
)	O
)	O
;	O
if	O
(	O
!	O
swutil	pointer
)	O
return	O
NULL	O
;	O
swutil	pointer
->	O
swu_efdM	int
=	O
STDERR_FILENO	int
;	O
swutil	pointer
->	O
swu_logspecM	pointer
=	O
NULL	O
;	O
swutil	pointer
->	O
swu_verboseM	int
=	O
1	int
;	O
swutil	pointer
->	O
swu_fail_loudlyM	int
=	O
0	int
;	O
return	O
swutil	pointer
;	O
}	O
void	O
swutil_close	function
(	O
SWLOG	struct
*	O
swutil	pointer
)	O
{	O
free	function
(	O
swutil	pointer
)	O
;	O
}	O
void	O
swutil_set_stderr_fd	function
(	O
SWLOG	struct
*	O
swutil	pointer
,	O
int	O
fd	int
)	O
{	O
swutil	pointer
->	O
swu_efdM	int
=	O
fd	int
;	O
}	O
int	O
doif_i_writef	function
(	O
int	O
verbose_level	int
,	O
int	O
write_at_level	int
,	O
struct	O
sw_logspec	struct
*	O
logspec	pointer
,	O
int	O
fd	int
,	O
char	O
*	O
format	pointer
,	O
va_list	array
*	O
pap	pointer
)	O
{	O
STROB	struct
*	O
buffer	array
;	O
int	O
newret	int
;	O
int	O
level	int
;	O
buffer	array
=	O
strob_open	function
(	O
100	int
)	O
;	O
level	int
=	O
verbose_level	int
;	O
if	O
(	O
write_at_level	int
>=	O
0	int
&&	O
level	int
<	O
write_at_level	int
)	O
{	O
;	O
newret	int
=	O
0	int
;	O
}	O
else	O
{	O
strob_strcpy	function
(	O
buffer	array
,	O
""	pointer
)	O
;	O
if	O
(	O
write_at_level	int
>=	O
SWC_VERBOSE_7	int
)	O
{	O
strob_strcpy	function
(	O
buffer	array
,	O
"debug> "	pointer
)	O
;	O
strob_sprintf	function
(	O
buffer	array
,	O
1	int
,	O
"%s"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
)	O
;	O
strob_sprintf	function
(	O
buffer	array
,	O
1	int
,	O
"[%d]: "	pointer
,	O
(	O
int	O
)	O
getpid	function
(	O
)	O
)	O
;	O
}	O
else	O
{	O
strob_sprintf	function
(	O
buffer	array
,	O
1	int
,	O
"%s: "	pointer
,	O
swlib_utilname_get	function
(	O
)	O
)	O
;	O
}	O
newret	int
=	O
swlib_doif_writeap	function
(	O
fd	int
,	O
buffer	array
,	O
format	pointer
,	O
pap	pointer
)	O
;	O
}	O
if	O
(	O
logspec	pointer
&&	O
logspec	pointer
->	O
logfdM	int
>	O
0	int
)	O
{	O
if	O
(	O
swlib_do_log_is_true	O
(	O
logspec	pointer
,	O
verbose_level	int
,	O
write_at_level	int
)	O
)	O
{	O
if	O
(	O
fd	int
==	O
STDERR_FILENO	int
||	O
fd	int
==	O
STDOUT_FILENO	int
||	O
fd	int
<	O
0	int
)	O
{	O
STROB	struct
*	O
logbuf	pointer
=	O
strob_open	function
(	O
100	int
)	O
;	O
strob_strcpy	function
(	O
buffer	array
,	O
""	pointer
)	O
;	O
if	O
(	O
write_at_level	int
>=	O
SWC_VERBOSE_7	int
)	O
{	O
strob_strcpy	function
(	O
buffer	array
,	O
"debug> "	pointer
)	O
;	O
strob_sprintf	function
(	O
buffer	array
,	O
1	int
,	O
"%s"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
)	O
;	O
strob_sprintf	function
(	O
buffer	array
,	O
1	int
,	O
"[%d]: "	pointer
,	O
(	O
int	O
)	O
getpid	function
(	O
)	O
)	O
;	O
}	O
else	O
{	O
strob_sprintf	function
(	O
buffer	array
,	O
1	int
,	O
"%s: "	pointer
,	O
swlib_utilname_get	function
(	O
)	O
)	O
;	O
}	O
printlogline	function
(	O
logbuf	pointer
,	O
strob_str	function
(	O
buffer	array
)	O
)	O
;	O
newret	int
=	O
swlib_doif_writeap	function
(	O
logspec	pointer
->	O
logfdM	int
,	O
logbuf	pointer
,	O
format	pointer
,	O
pap	pointer
)	O
;	O
strob_close	function
(	O
logbuf	pointer
)	O
;	O
}	O
}	O
else	O
{	O
newret	int
=	O
0	int
;	O
}	O
}	O
strob_close	function
(	O
buffer	array
)	O
;	O
return	O
newret	int
;	O
}	O
XFORMAT	struct
*	O
swutil_setup_xformat	function
(	O
SWLOG	struct
*	O
swutil	pointer
,	O
XFORMAT	struct
*	O
xformat	pointer
,	O
int	O
source_fd0	int
,	O
char	O
*	O
source_path	pointer
,	O
struct	O
extendedOptions	struct
*	O
opta	pointer
,	O
int	O
is_seekable	int
,	O
int	O
g_verboseG	int
,	O
struct	O
sw_logspec	struct
*	O
g_logspec	pointer
,	O
int	O
uinfile_open_flags	int
)	O
{	O
XFORMAT	struct
*	O
ret	pointer
;	O
int	O
open_error	int
=	O
0	int
;	O
int	O
flags	int
;	O
flags	int
=	O
uinfile_open_flags	int
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
is_seekable	int
)	O
{	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
flags	int
|=	O
UINFILE_UXFIO_BUFTYPE_DYNAMIC_MEM	O
;	O
swlib_doif_writef	O
(	O
g_verboseG	int
,	O
SWC_VERBOSE_7	int
,	O
g_logspec	pointer
,	O
swutil	pointer
->	O
swu_efdM	int
,	O
"using dynamic mem\n"	pointer
)	O
;	O
}	O
else	O
{	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
swlib_doif_writef	O
(	O
g_verboseG	int
,	O
SWC_VERBOSE_7	int
,	O
g_logspec	pointer
,	O
swutil	pointer
->	O
swu_efdM	int
,	O
"not using dynamic mem\n"	pointer
)	O
;	O
flags	int
&=	O
~	O
UINFILE_UXFIO_BUFTYPE_DYNAMIC_MEM	O
;	O
}	O
if	O
(	O
opta	pointer
&&	O
(	O
swextopt_is_option_true	function
(	O
SW_E_swbis_allow_rpm	int
,	O
opta	pointer
)	O
||	O
swextopt_is_option_true	function
(	O
SW_E_swbis_any_format	int
,	O
opta	pointer
)	O
)	O
)	O
{	O
E_DEBUG	O
(	O
"turning on UINFILE_DETECT_UNRPM"	pointer
)	O
;	O
flags	int
|=	O
UINFILE_DETECT_UNRPM	O
;	O
}	O
ret	pointer
=	O
xformat	pointer
;	O
E_DEBUG2	O
(	O
"source_path is [%s]"	pointer
,	O
source_path	pointer
)	O
;	O
if	O
(	O
source_fd0	int
>=	O
0	int
&&	O
(	O
source_path	pointer
==	O
NULL	O
||	O
uinfile_open_flags	int
&	O
UINFILE_DETECT_IEEE	O
)	O
&&	O
open_error	int
==	O
0	int
)	O
{	O
E_DEBUG	O
(	O
"open by fd"	pointer
)	O
;	O
E_DEBUG2	O
(	O
"source_path is [%s]"	pointer
,	O
source_path	pointer
)	O
;	O
E_DEBUG2	O
(	O
"flags=[%d]"	pointer
,	O
flags	int
)	O
;	O
if	O
(	O
xformat_open_archive_by_fd	function
(	O
xformat	pointer
,	O
source_fd0	int
,	O
flags	int
,	O
0	int
)	O
)	O
{	O
swlib_doif_writef	O
(	O
g_verboseG	int
,	O
g_logspec	pointer
->	O
fail_loudlyM	int
,	O
g_logspec	pointer
,	O
swutil	pointer
->	O
swu_efdM	int
,	O
"archive open failed\n"	pointer
)	O
;	O
xformat_close	function
(	O
xformat	pointer
)	O
;	O
E_DEBUG	O
(	O
"open error"	pointer
)	O
;	O
ret	pointer
=	O
(	O
XFORMAT	struct
*	O
)	O
NULL	O
;	O
}	O
E_DEBUG	O
(	O
"after xformat_open_archive_by_fd"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
source_fd0	int
>=	O
0	int
&&	O
source_path	pointer
&&	O
open_error	int
==	O
0	int
)	O
{	O
E_DEBUG	O
(	O
"~~~~~~~~~~~~~~~ open by fd and name"	pointer
)	O
;	O
if	O
(	O
xformat_open_archive_by_fd_and_name	function
(	O
xformat	pointer
,	O
source_fd0	int
,	O
flags	int
,	O
0	int
,	O
source_path	pointer
)	O
)	O
{	O
swlib_doif_writef	O
(	O
g_verboseG	int
,	O
g_logspec	pointer
->	O
fail_loudlyM	int
,	O
g_logspec	pointer
,	O
swutil	pointer
->	O
swu_efdM	int
,	O
"archive open failed\n"	pointer
)	O
;	O
xformat_close	function
(	O
xformat	pointer
)	O
;	O
E_DEBUG	O
(	O
"open error"	pointer
)	O
;	O
ret	pointer
=	O
(	O
XFORMAT	struct
*	O
)	O
NULL	O
;	O
}	O
}	O
else	O
if	O
(	O
source_fd0	int
<	O
0	int
&&	O
open_error	int
==	O
0	int
)	O
{	O
E_DEBUG	O
(	O
"open file or directory"	pointer
)	O
;	O
if	O
(	O
xformat_open_archive_dirfile	function
(	O
xformat	pointer
,	O
source_path	pointer
,	O
flags	int
,	O
0	int
)	O
)	O
{	O
swlib_doif_writef	O
(	O
g_verboseG	int
,	O
g_logspec	pointer
->	O
fail_loudlyM	int
,	O
g_logspec	pointer
,	O
swutil	pointer
->	O
swu_efdM	int
,	O
"open failed on %s (by dir)\n"	pointer
,	O
source_path	pointer
)	O
;	O
xformat_close	function
(	O
xformat	pointer
)	O
;	O
ret	pointer
=	O
(	O
XFORMAT	struct
*	O
)	O
NULL	O
;	O
}	O
}	O
else	O
{	O
E_DEBUG	O
(	O
"open error"	pointer
)	O
;	O
swlib_doif_writef	O
(	O
g_verboseG	int
,	O
g_logspec	pointer
->	O
fail_loudlyM	int
,	O
g_logspec	pointer
,	O
swutil	pointer
->	O
swu_efdM	int
,	O
"%s not found\n"	pointer
,	O
source_path	pointer
)	O
;	O
ret	pointer
=	O
(	O
XFORMAT	struct
*	O
)	O
NULL	O
;	O
}	O
return	O
ret	pointer
;	O
}	O
int	O
swutil_writelogline	function
(	O
int	O
logfd	int
,	O
char	O
*	O
sptr	pointer
)	O
{	O
int	O
ret	pointer
;	O
STROB	struct
*	O
buf	pointer
=	O
strob_open	function
(	O
64	int
)	O
;	O
printlogline	function
(	O
buf	pointer
,	O
sptr	pointer
)	O
;	O
ret	pointer
=	O
uxfio_unix_safe_write	function
(	O
logfd	int
,	O
strob_str	function
(	O
buf	pointer
)	O
,	O
strob_strlen	function
(	O
buf	pointer
)	O
)	O
;	O
if	O
(	O
ret	pointer
!=	O
(	O
int	O
)	O
strob_strlen	function
(	O
buf	pointer
)	O
)	O
{	O
SWLIB_EXCEPTION	O
(	O
"error writing logfile"	pointer
)	O
;	O
}	O
strob_close	function
(	O
buf	pointer
)	O
;	O
return	O
ret	pointer
;	O
}	O
int	O
swutil_doif_writef2	function
(	O
SWLOG	struct
*	O
swutil	pointer
,	O
int	O
write_at_level	int
,	O
char	O
*	O
format	pointer
,	O
...	O
)	O
{	O
int	O
ret	pointer
;	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
format	pointer
)	O
;	O
ret	pointer
=	O
doif_i_writef	function
(	O
swutil	pointer
->	O
swu_verboseM	int
,	O
write_at_level	int
,	O
swutil	pointer
->	O
swu_logspecM	pointer
,	O
swutil	pointer
->	O
swu_efdM	int
,	O
format	pointer
,	O
&	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
return	O
ret	pointer
;	O
}	O
int	O
swutil_do_log_is_true	function
(	O
struct	O
sw_logspec	struct
*	O
logspec	pointer
,	O
int	O
verbose_level	int
,	O
int	O
write_at_level	int
)	O
{	O
if	O
(	O
(	O
logspec	pointer
->	O
logfdM	int
==	O
1	int
&&	O
(	O
write_at_level	int
<	O
SWC_VERBOSE_6	int
)	O
)	O
||	O
(	O
logspec	pointer
->	O
logfdM	int
==	O
2	int
&&	O
(	O
write_at_level	int
<	O
SWC_VERBOSE_7	int
)	O
)	O
||	O
(	O
logspec	pointer
->	O
logfdM	int
==	O
2	int
&&	O
(	O
verbose_level	int
>	O
SWC_VERBOSE_7	int
)	O
)	O
)	O
{	O
return	O
1	int
;	O
}	O
else	O
{	O
return	O
0	int
;	O
}	O
}	O
int	O
swutil_doif_writef	function
(	O
int	O
verbose_level	int
,	O
int	O
write_at_level	int
,	O
struct	O
sw_logspec	struct
*	O
logspec	pointer
,	O
int	O
fd	int
,	O
char	O
*	O
format	pointer
,	O
...	O
)	O
{	O
int	O
ret	pointer
;	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
format	pointer
)	O
;	O
ret	pointer
=	O
doif_i_writef	function
(	O
verbose_level	int
,	O
write_at_level	int
,	O
logspec	pointer
,	O
fd	int
,	O
format	pointer
,	O
&	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
return	O
ret	pointer
;	O
}	O
int	O
cpp_doif_i_writef	function
(	O
int	O
verbose_level	int
,	O
int	O
write_at_level	int
,	O
struct	O
sw_logspec	struct
*	O
logspec	pointer
,	O
int	O
fd	int
,	O
char	O
*	O
cpp_FILE	pointer
,	O
int	O
cpp_LINE	int
,	O
const	O
char	O
*	O
cpp_FUNCTION	pointer
,	O
char	O
*	O
format	pointer
,	O
va_list	array
*	O
pap	pointer
)	O
{	O
int	O
ret	pointer
;	O
STROB	struct
*	O
b	pointer
;	O
b	pointer
=	O
strob_open	function
(	O
100	int
)	O
;	O
strob_sprintf	function
(	O
b	pointer
,	O
0	int
,	O
"%s:%d (%s): %s"	pointer
,	O
cpp_FILE	pointer
,	O
cpp_LINE	int
,	O
cpp_FUNCTION	pointer
,	O
format	pointer
)	O
;	O
ret	pointer
=	O
doif_i_writef	function
(	O
verbose_level	int
,	O
write_at_level	int
,	O
logspec	pointer
,	O
fd	int
,	O
strob_str	function
(	O
b	pointer
)	O
,	O
pap	pointer
)	O
;	O
strob_close	function
(	O
b	pointer
)	O
;	O
return	O
ret	pointer
;	O
}	O
int	O
swutil_cpp_doif_writef	function
(	O
int	O
verbose_level	int
,	O
int	O
write_at_level	int
,	O
struct	O
sw_logspec	struct
*	O
logspec	pointer
,	O
int	O
fd	int
,	O
char	O
*	O
cpp_FILE	pointer
,	O
int	O
cpp_LINE	int
,	O
const	O
char	O
*	O
cpp_FUNCTION	pointer
,	O
char	O
*	O
format	pointer
,	O
...	O
)	O
{	O
int	O
ret	pointer
;	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
format	pointer
)	O
;	O
ret	pointer
=	O
cpp_doif_i_writef	function
(	O
verbose_level	int
,	O
write_at_level	int
,	O
logspec	pointer
,	O
fd	int
,	O
cpp_FILE	pointer
,	O
cpp_LINE	int
,	O
cpp_FUNCTION	pointer
,	O
format	pointer
,	O
&	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
return	O
ret	pointer
;	O
}	O
