enum	O
cpio_options	enum
{	O
NO_ABSOLUTE_FILENAMES_OPTION	int
=	O
256	int
,	O
ABSOLUTE_FILENAMES_OPTION	int
,	O
NO_PRESERVE_OWNER_OPTION	int
,	O
ONLY_VERIFY_CRC_OPTION	int
,	O
RENAME_BATCH_FILE_OPTION	int
,	O
RSH_COMMAND_OPTION	int
,	O
QUIET_OPTION	int
,	O
SPARSE_OPTION	int
,	O
FORCE_LOCAL_OPTION	int
,	O
DEBUG_OPTION	int
,	O
BLOCK_SIZE_OPTION	int
,	O
TO_STDOUT_OPTION	int
,	O
RENUMBER_INODES_OPTION	int
,	O
IGNORE_DEVNO_OPTION	int
,	O
DEVICE_INDEPENDENT_OPTION	int
}	O
;	O
const	O
char	O
*	O
program_authors	array
[	O
]	O
=	O
{	O
"Phil Nelson"	pointer
,	O
"David MacKenzie"	pointer
,	O
"John Oleynick"	pointer
,	O
"Sergey Poznyakoff"	pointer
,	O
NULL	O
}	O
;	O
const	O
char	O
*	O
argp_program_bug_address	pointer
=	O
"<"	pointer
PACKAGE_BUGREPORT	pointer
">"	pointer
;	O
static	O
char	O
doc	pointer
[	O
]	O
=	O
N_	O
(	O
"GNU `cpio' copies files to and from archives\n\nExamples:\n  # Copy files named in name-list to the archive\n  cpio -o < name-list [> archive]\n  # Extract files from the archive\n  cpio -i [< archive]\n  # Copy files named in name-list to destination-directory\n  cpio -p destination-directory < name-list\n"	pointer
)	O
;	O
static	O
void	O
usage	function
(	O
int	O
status	int
)	O
;	O
static	O
struct	O
argp_option	struct
options	pointer
[	O
]	O
=	O
{	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Main operation mode:"	pointer
)	O
,	O
GRID	int
}	O
,	O
{	O
"create"	pointer
,	O
'o'	O
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Create the archive (run in copy-out mode)"	pointer
)	O
,	O
GRID	int
}	O
,	O
{	O
"extract"	pointer
,	O
'i'	O
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Extract files from an archive (run in copy-in mode)"	pointer
)	O
,	O
GRID	int
}	O
,	O
{	O
"pass-through"	pointer
,	O
'p'	O
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Run in copy-pass mode"	pointer
)	O
,	O
GRID	int
}	O
,	O
{	O
"list"	pointer
,	O
't'	O
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Print a table of contents of the input"	pointer
)	O
,	O
GRID	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Operation modifiers valid in any mode:"	pointer
)	O
,	O
GRID	int
}	O
,	O
{	O
"directory"	pointer
,	O
'D'	O
,	O
N_	O
(	O
"DIR"	pointer
)	O
,	O
0	int
,	O
N_	O
(	O
"Change to directory DIR"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"force-local"	pointer
,	O
FORCE_LOCAL_OPTION	int
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Archive file is local, even if its name contains colons"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"format"	pointer
,	O
'H'	O
,	O
N_	O
(	O
"FORMAT"	pointer
)	O
,	O
0	int
,	O
N_	O
(	O
"Use given archive FORMAT"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
NULL	O
,	O
'B'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Set the I/O block size to 5120 bytes"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"block-size"	pointer
,	O
BLOCK_SIZE_OPTION	int
,	O
N_	O
(	O
"BLOCK-SIZE"	pointer
)	O
,	O
0	int
,	O
N_	O
(	O
"Set the I/O block size to BLOCK-SIZE * 512 bytes"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
NULL	O
,	O
'c'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Use the old portable (ASCII) archive format"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"dot"	pointer
,	O
'V'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Print a \".\" for each file processed"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"io-size"	pointer
,	O
'C'	O
,	O
N_	O
(	O
"NUMBER"	pointer
)	O
,	O
0	int
,	O
N_	O
(	O
"Set the I/O block size to the given NUMBER of bytes"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"quiet"	pointer
,	O
QUIET_OPTION	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Do not print the number of blocks copied"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"verbose"	pointer
,	O
'v'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Verbosely list the files processed"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"warning"	pointer
,	O
'W'	O
,	O
N_	O
(	O
"FLAG"	pointer
)	O
,	O
0	int
,	O
N_	O
(	O
"Control warning display. Currently FLAG is one of 'none', 'truncate', 'all'. Multiple options accumulate."	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"owner"	pointer
,	O
'R'	O
,	O
N_	O
(	O
"[USER][:.][GROUP]"	pointer
)	O
,	O
0	int
,	O
N_	O
(	O
"Set the ownership of all files created to the specified USER and/or GROUP"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Operation modifiers valid in copy-in and copy-out modes"	pointer
)	O
,	O
GRID	int
}	O
,	O
{	O
"file"	pointer
,	O
'F'	O
,	O
N_	O
(	O
"[[USER@]HOST:]FILE-NAME"	pointer
)	O
,	O
0	int
,	O
N_	O
(	O
"Use this FILE-NAME instead of standard input or output. Optional USER and HOST specify the user and host names in case of a remote archive"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"message"	pointer
,	O
'M'	O
,	O
N_	O
(	O
"STRING"	pointer
)	O
,	O
0	int
,	O
N_	O
(	O
"Print STRING when the end of a volume of the backup media is reached"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"rsh-command"	pointer
,	O
RSH_COMMAND_OPTION	int
,	O
N_	O
(	O
"COMMAND"	pointer
)	O
,	O
0	int
,	O
N_	O
(	O
"Use COMMAND instead of rsh"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Operation modifiers valid only in copy-in mode:"	pointer
)	O
,	O
GRID	int
}	O
,	O
{	O
"nonmatching"	pointer
,	O
'f'	O
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Only copy files that do not match any of the given patterns"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"numeric-uid-gid"	pointer
,	O
'n'	O
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"In the verbose table of contents listing, show numeric UID and GID"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"pattern-file"	pointer
,	O
'E'	O
,	O
N_	O
(	O
"FILE"	pointer
)	O
,	O
0	int
,	O
N_	O
(	O
"Read additional patterns specifying filenames to extract or list from FILE"	pointer
)	O
,	O
210	int
}	O
,	O
{	O
"only-verify-crc"	pointer
,	O
ONLY_VERIFY_CRC_OPTION	int
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"When reading a CRC format archive, only verify the CRC's of each file in the archive, don't actually extract the files"	pointer
)	O
,	O
210	int
}	O
,	O
{	O
"rename"	pointer
,	O
'r'	O
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Interactively rename files"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"rename-batch-file"	pointer
,	O
RENAME_BATCH_FILE_OPTION	int
,	O
N_	O
(	O
"FILE"	pointer
)	O
,	O
OPTION_HIDDEN	int
,	O
""	pointer
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"swap"	pointer
,	O
'b'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Swap both halfwords of words and bytes of halfwords in the data. Equivalent to -sS"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"swap-bytes"	pointer
,	O
's'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Swap the bytes of each halfword in the files"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"swap-halfwords"	pointer
,	O
'S'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Swap the halfwords of each word (4 bytes) in the files"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"to-stdout"	pointer
,	O
TO_STDOUT_OPTION	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Extract files to standard output"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
NULL	O
,	O
'I'	O
,	O
N_	O
(	O
"[[USER@]HOST:]FILE-NAME"	pointer
)	O
,	O
0	int
,	O
N_	O
(	O
"Archive filename to use instead of standard input. Optional USER and HOST specify the user and host names in case of a remote archive"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Operation modifiers valid only in copy-out mode:"	pointer
)	O
,	O
GRID	int
}	O
,	O
{	O
"append"	pointer
,	O
'A'	O
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Append to an existing archive."	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
NULL	O
,	O
'O'	O
,	O
N_	O
(	O
"[[USER@]HOST:]FILE-NAME"	pointer
)	O
,	O
0	int
,	O
N_	O
(	O
"Archive filename to use instead of standard output. Optional USER and HOST specify the user and host names in case of a remote archive"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"renumber-inodes"	pointer
,	O
RENUMBER_INODES_OPTION	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Renumber inodes"	pointer
)	O
}	O
,	O
{	O
"ignore-devno"	pointer
,	O
IGNORE_DEVNO_OPTION	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Don't store device numbers"	pointer
)	O
}	O
,	O
{	O
"device-independent"	pointer
,	O
DEVICE_INDEPENDENT_OPTION	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Create device-independent (reproducible) archives"	pointer
)	O
}	O
,	O
{	O
"reproducible"	pointer
,	O
0	int
,	O
NULL	O
,	O
OPTION_ALIAS	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Operation modifiers valid only in copy-pass mode:"	pointer
)	O
,	O
GRID	int
}	O
,	O
{	O
"link"	pointer
,	O
'l'	O
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Link files instead of copying them, when  possible"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Operation modifiers valid in copy-in and copy-out modes:"	pointer
)	O
,	O
GRID	int
}	O
,	O
{	O
"absolute-filenames"	pointer
,	O
ABSOLUTE_FILENAMES_OPTION	int
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Do not strip file system prefix components from the file names"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"no-absolute-filenames"	pointer
,	O
NO_ABSOLUTE_FILENAMES_OPTION	int
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Create all files relative to the current directory"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Operation modifiers valid in copy-out and copy-pass modes:"	pointer
)	O
,	O
GRID	int
}	O
,	O
{	O
"null"	pointer
,	O
'0'	O
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Filenames in the list are delimited by null characters instead of newlines"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"dereference"	pointer
,	O
'L'	O
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Dereference  symbolic  links  (copy  the files that they point to instead of copying the links)."	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"reset-access-time"	pointer
,	O
'a'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Reset the access times of files after reading them"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Operation modifiers valid in copy-in and copy-pass modes:"	pointer
)	O
,	O
GRID	int
}	O
,	O
{	O
"preserve-modification-time"	pointer
,	O
'm'	O
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Retain previous file modification times when creating files"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"make-directories"	pointer
,	O
'd'	O
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Create leading directories where needed"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"no-preserve-owner"	pointer
,	O
NO_PRESERVE_OWNER_OPTION	int
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Do not change the ownership of the files"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"unconditional"	pointer
,	O
'u'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Replace all files unconditionally"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"sparse"	pointer
,	O
SPARSE_OPTION	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Write files with large blocks of zeros as sparse files"	pointer
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
static	O
char	O
*	O
input_archive_name	pointer
=	O
0	int
;	O
static	O
char	O
*	O
output_archive_name	pointer
=	O
0	int
;	O
static	O
int	O
warn_control	function
(	O
char	O
*	O
arg	pointer
)	O
{	O
static	O
struct	O
warn_tab	struct
{	O
char	O
*	O
name	pointer
;	O
int	O
flag	pointer
;	O
}	O
warn_tab	struct
[	O
]	O
=	O
{	O
{	O
"none"	pointer
,	O
CPIO_WARN_ALL	O
}	O
,	O
{	O
"truncate"	pointer
,	O
CPIO_WARN_TRUNCATE	int
}	O
,	O
{	O
"all"	pointer
,	O
CPIO_WARN_ALL	O
}	O
,	O
{	O
"interdir"	pointer
,	O
CPIO_WARN_INTERDIR	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
struct	O
warn_tab	struct
*	O
wt	pointer
;	O
int	O
offset	long
=	O
0	int
;	O
if	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"none"	pointer
)	O
==	O
0	int
)	O
{	O
warn_option	int
=	O
0	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
strlen	function
(	O
arg	pointer
)	O
>	O
2	int
&&	O
memcmp	function
(	O
arg	pointer
,	O
"no-"	pointer
,	O
3	int
)	O
==	O
0	int
)	O
offset	long
=	O
3	int
;	O
for	O
(	O
wt	pointer
=	O
warn_tab	struct
;	O
wt	pointer
->	O
name	pointer
;	O
wt	pointer
++	O
)	O
if	O
(	O
strcmp	function
(	O
arg	pointer
+	O
offset	long
,	O
wt	pointer
->	O
name	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
offset	long
)	O
warn_option	int
&=	O
~	O
wt	pointer
->	O
flag	pointer
;	O
else	O
warn_option	int
|=	O
wt	pointer
->	O
flag	pointer
;	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
static	O
error_t	int
parse_opt	function
(	O
int	O
key	int
,	O
char	O
*	O
arg	pointer
,	O
struct	O
argp_state	struct
*	O
state	pointer
)	O
{	O
switch	O
(	O
key	int
)	O
{	O
case	O
'0'	O
:	O
name_end	char
=	O
'\0'	O
;	O
break	O
;	O
case	O
'a'	O
:	O
reset_time_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
'A'	O
:	O
append_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
'b'	O
:	O
swap_bytes_flag	int
=	O
true	int
;	O
swap_halfwords_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
'B'	O
:	O
io_block_size	int
=	O
5120	int
;	O
break	O
;	O
case	O
BLOCK_SIZE_OPTION	int
:	O
io_block_size	int
=	O
atoi	function
(	O
arg	pointer
)	O
;	O
if	O
(	O
io_block_size	int
<	O
1	int
||	O
io_block_size	int
>	O
INT_MAX	O
/	O
512	int
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"invalid block size"	pointer
)	O
)	O
)	O
;	O
io_block_size	int
*=	O
512	int
;	O
break	O
;	O
case	O
'c'	O
:	O
if	O
(	O
archive_format	enum
!=	O
arf_unknown	int
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Archive format multiply defined"	pointer
)	O
)	O
)	O
;	O
archive_format	enum
=	O
arf_oldascii	int
;	O
break	O
;	O
case	O
'C'	O
:	O
io_block_size	int
=	O
atoi	function
(	O
arg	pointer
)	O
;	O
if	O
(	O
io_block_size	int
<	O
1	int
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"invalid block size"	pointer
)	O
)	O
)	O
;	O
break	O
;	O
case	O
'd'	O
:	O
create_dir_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
'D'	O
:	O
change_directory_option	pointer
=	O
arg	pointer
;	O
break	O
;	O
case	O
'f'	O
:	O
copy_matching_files	int
=	O
false	int
;	O
break	O
;	O
case	O
'E'	O
:	O
pattern_file_name	pointer
=	O
arg	pointer
;	O
break	O
;	O
case	O
'F'	O
:	O
archive_name	pointer
=	O
arg	pointer
;	O
break	O
;	O
case	O
'H'	O
:	O
if	O
(	O
archive_format	enum
!=	O
arf_unknown	int
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Archive format multiply defined"	pointer
)	O
)	O
)	O
;	O
if	O
(	O
!	O
strcasecmp	function
(	O
arg	pointer
,	O
"crc"	pointer
)	O
)	O
archive_format	enum
=	O
arf_crcascii	int
;	O
else	O
if	O
(	O
!	O
strcasecmp	function
(	O
arg	pointer
,	O
"newc"	pointer
)	O
)	O
archive_format	enum
=	O
arf_newascii	int
;	O
else	O
if	O
(	O
!	O
strcasecmp	function
(	O
arg	pointer
,	O
"odc"	pointer
)	O
)	O
archive_format	enum
=	O
arf_oldascii	int
;	O
else	O
if	O
(	O
!	O
strcasecmp	function
(	O
arg	pointer
,	O
"bin"	pointer
)	O
)	O
archive_format	enum
=	O
arf_binary	int
;	O
else	O
if	O
(	O
!	O
strcasecmp	function
(	O
arg	pointer
,	O
"ustar"	pointer
)	O
)	O
archive_format	enum
=	O
arf_ustar	int
;	O
else	O
if	O
(	O
!	O
strcasecmp	function
(	O
arg	pointer
,	O
"tar"	pointer
)	O
)	O
archive_format	enum
=	O
arf_tar	int
;	O
else	O
if	O
(	O
!	O
strcasecmp	function
(	O
arg	pointer
,	O
"hpodc"	pointer
)	O
)	O
archive_format	enum
=	O
arf_hpoldascii	int
;	O
else	O
if	O
(	O
!	O
strcasecmp	function
(	O
arg	pointer
,	O
"hpbin"	pointer
)	O
)	O
archive_format	enum
=	O
arf_hpbinary	int
;	O
else	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"invalid archive format `%s'; valid formats are:\ncrc newc odc bin ustar tar (all-caps also recognized)"	pointer
)	O
,	O
arg	pointer
)	O
)	O
;	O
break	O
;	O
case	O
'i'	O
:	O
if	O
(	O
copy_function	pointer
!=	O
0	int
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Mode already defined"	pointer
)	O
)	O
)	O
;	O
copy_function	pointer
=	O
process_copy_in	function
;	O
break	O
;	O
case	O
'I'	O
:	O
input_archive_name	pointer
=	O
arg	pointer
;	O
break	O
;	O
case	O
'l'	O
:	O
link_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
'L'	O
:	O
xstat	pointer
=	O
stat	struct
;	O
break	O
;	O
case	O
'm'	O
:	O
retain_time_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
'M'	O
:	O
set_new_media_message	function
(	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
numeric_uid	int
=	O
true	int
;	O
break	O
;	O
case	O
NO_ABSOLUTE_FILENAMES_OPTION	int
:	O
no_abs_paths_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
ABSOLUTE_FILENAMES_OPTION	int
:	O
no_abs_paths_flag	int
=	O
false	int
;	O
break	O
;	O
case	O
NO_PRESERVE_OWNER_OPTION	int
:	O
if	O
(	O
set_owner_flag	int
||	O
set_group_flag	int
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"--no-preserve-owner cannot be used with --owner"	pointer
)	O
)	O
)	O
;	O
no_chown_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
'o'	O
:	O
if	O
(	O
copy_function	pointer
!=	O
0	int
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Mode already defined"	pointer
)	O
)	O
)	O
;	O
copy_function	pointer
=	O
process_copy_out	function
;	O
break	O
;	O
case	O
'O'	O
:	O
output_archive_name	pointer
=	O
arg	pointer
;	O
break	O
;	O
case	O
ONLY_VERIFY_CRC_OPTION	int
:	O
only_verify_crc_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
'p'	O
:	O
if	O
(	O
copy_function	pointer
!=	O
0	int
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Mode already defined"	pointer
)	O
)	O
)	O
;	O
copy_function	pointer
=	O
process_copy_pass	function
;	O
break	O
;	O
case	O
IGNORE_DEVNO_OPTION	int
:	O
ignore_devno_option	int
=	O
1	int
;	O
break	O
;	O
case	O
RENUMBER_INODES_OPTION	int
:	O
renumber_inodes_option	int
=	O
1	int
;	O
break	O
;	O
case	O
DEVICE_INDEPENDENT_OPTION	int
:	O
ignore_devno_option	int
=	O
renumber_inodes_option	int
=	O
1	int
;	O
break	O
;	O
case	O
RSH_COMMAND_OPTION	int
:	O
rsh_command_option	pointer
=	O
arg	pointer
;	O
break	O
;	O
case	O
'r'	O
:	O
rename_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
RENAME_BATCH_FILE_OPTION	int
:	O
rename_batch_file	pointer
=	O
arg	pointer
;	O
break	O
;	O
case	O
QUIET_OPTION	int
:	O
quiet_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
'R'	O
:	O
if	O
(	O
no_chown_flag	int
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"--owner cannot be used with --no-preserve-owner"	pointer
)	O
)	O
)	O
;	O
else	O
{	O
char	O
*	O
e	pointer
,	O
*	O
u	pointer
,	O
*	O
g	pointer
;	O
e	pointer
=	O
parse_user_spec	function
(	O
arg	pointer
,	O
&	O
set_owner	int
,	O
&	O
set_group	int
,	O
&	O
u	pointer
,	O
&	O
g	pointer
)	O
;	O
if	O
(	O
e	pointer
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
"%s: %s"	pointer
,	O
arg	pointer
,	O
e	pointer
)	O
)	O
;	O
if	O
(	O
u	pointer
)	O
{	O
free	function
(	O
u	pointer
)	O
;	O
set_owner_flag	int
=	O
true	int
;	O
}	O
if	O
(	O
g	pointer
)	O
{	O
free	function
(	O
g	pointer
)	O
;	O
set_group_flag	int
=	O
true	int
;	O
}	O
}	O
break	O
;	O
case	O
's'	O
:	O
swap_bytes_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
'S'	O
:	O
swap_halfwords_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
't'	O
:	O
table_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
'u'	O
:	O
unconditional_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
'v'	O
:	O
verbose_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
'V'	O
:	O
dot_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
'W'	O
:	O
if	O
(	O
warn_control	function
(	O
arg	pointer
)	O
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Invalid value for --warning option: %s"	pointer
)	O
,	O
arg	pointer
)	O
)	O
;	O
break	O
;	O
case	O
SPARSE_OPTION	int
:	O
sparse_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
FORCE_LOCAL_OPTION	int
:	O
force_local_option	bool
=	O
1	int
;	O
break	O
;	O
case	O
TO_STDOUT_OPTION	int
:	O
to_stdout_option	bool
=	O
true	int
;	O
break	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
argp	struct
argp	struct
=	O
{	O
options	pointer
,	O
parse_opt	function
,	O
N_	O
(	O
"[destination-directory]"	pointer
)	O
,	O
doc	pointer
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
}	O
;	O
static	O
void	O
usage	function
(	O
int	O
status	int
)	O
{	O
argp_help	function
(	O
&	O
argp	struct
,	O
stderr	pointer
,	O
ARGP_HELP_SEE	int
,	O
(	O
char	O
*	O
)	O
program_name	pointer
)	O
;	O
close_stdout	function
(	O
)	O
;	O
exit	function
(	O
status	int
)	O
;	O
}	O
void	O
process_args	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	pointer
[	O
]	O
)	O
{	O
int	O
index	function
;	O
xstat	pointer
=	O
lstat	function
;	O
if	O
(	O
argp_parse	function
(	O
&	O
argp	struct
,	O
argc	int
,	O
argv	pointer
,	O
ARGP_IN_ORDER	int
,	O
&	O
index	function
,	O
NULL	O
)	O
)	O
exit	function
(	O
PAXEXIT_FAILURE	int
)	O
;	O
if	O
(	O
copy_function	pointer
==	O
0	int
)	O
{	O
if	O
(	O
table_flag	int
)	O
copy_function	pointer
=	O
process_copy_in	function
;	O
else	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"You must specify one of -oipt options."	pointer
)	O
)	O
)	O
;	O
}	O
if	O
(	O
copy_function	pointer
==	O
process_copy_in	function
)	O
{	O
archive_des	int
=	O
0	int
;	O
CHECK_USAGE	O
(	O
link_flag	int
,	O
"--link"	pointer
,	O
"--extract"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
reset_time_flag	int
,	O
"--reset"	pointer
,	O
"--extract"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
xstat	pointer
!=	O
lstat	function
,	O
"--dereference"	pointer
,	O
"--extract"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
append_flag	int
,	O
"--append"	pointer
,	O
"--extract"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
output_archive_name	pointer
,	O
"-O"	pointer
,	O
"--extract"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
renumber_inodes_option	int
,	O
"--renumber-inodes"	pointer
,	O
"--extract"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
ignore_devno_option	int
,	O
"--ignore-devno"	pointer
,	O
"--extract"	pointer
)	O
;	O
if	O
(	O
to_stdout_option	bool
)	O
{	O
CHECK_USAGE	O
(	O
create_dir_flag	int
,	O
"--make-directories"	pointer
,	O
"--to-stdout"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
rename_flag	int
,	O
"--rename"	pointer
,	O
"--to-stdout"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
no_chown_flag	int
,	O
"--no-preserve-owner"	pointer
,	O
"--to-stdout"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
set_owner_flag	int
||	O
set_group_flag	int
,	O
"--owner"	pointer
,	O
"--to-stdout"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
retain_time_flag	int
,	O
"--preserve-modification-time"	pointer
,	O
"--to-stdout"	pointer
)	O
;	O
}	O
if	O
(	O
archive_name	pointer
&&	O
input_archive_name	pointer
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Both -I and -F are used in copy-in mode"	pointer
)	O
)	O
)	O
;	O
if	O
(	O
archive_format	enum
==	O
arf_crcascii	int
)	O
crc_i_flag	int
=	O
true	int
;	O
num_patterns	int
=	O
argc	int
-	O
index	function
;	O
save_patterns	pointer
=	O
&	O
argv	pointer
[	O
index	function
]	O
;	O
if	O
(	O
input_archive_name	pointer
)	O
archive_name	pointer
=	O
input_archive_name	pointer
;	O
}	O
else	O
if	O
(	O
copy_function	pointer
==	O
process_copy_out	function
)	O
{	O
if	O
(	O
index	function
!=	O
argc	int
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Too many arguments"	pointer
)	O
)	O
)	O
;	O
archive_des	int
=	O
1	int
;	O
CHECK_USAGE	O
(	O
create_dir_flag	int
,	O
"--make-directories"	pointer
,	O
"--create"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
rename_flag	int
,	O
"--rename"	pointer
,	O
"--create"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
table_flag	int
,	O
"--list"	pointer
,	O
"--create"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
unconditional_flag	int
,	O
"--unconditional"	pointer
,	O
"--create"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
link_flag	int
,	O
"--link"	pointer
,	O
"--create"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
sparse_flag	int
,	O
"--sparse"	pointer
,	O
"--create"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
retain_time_flag	int
,	O
"--preserve-modification-time"	pointer
,	O
"--create"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
no_chown_flag	int
,	O
"--no-preserve-owner"	pointer
,	O
"--create"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
swap_bytes_flag	int
,	O
"--swap-bytes (--swap)"	pointer
,	O
"--create"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
swap_halfwords_flag	int
,	O
"--swap-halfwords (--swap)"	pointer
,	O
"--create"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
to_stdout_option	bool
,	O
"--to-stdout"	pointer
,	O
"--create"	pointer
)	O
;	O
if	O
(	O
append_flag	int
&&	O
!	O
(	O
archive_name	pointer
||	O
output_archive_name	pointer
)	O
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"--append is used but no archive file name "	pointer
"is given (use -F or -O options)"	pointer
)	O
)	O
)	O
;	O
CHECK_USAGE	O
(	O
rename_batch_file	pointer
,	O
"--rename-batch-file"	pointer
,	O
"--create"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
input_archive_name	pointer
,	O
"-I"	pointer
,	O
"--create"	pointer
)	O
;	O
if	O
(	O
archive_name	pointer
&&	O
output_archive_name	pointer
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Both -O and -F are used in copy-out mode"	pointer
)	O
)	O
)	O
;	O
if	O
(	O
archive_format	enum
==	O
arf_unknown	int
)	O
archive_format	enum
=	O
arf_binary	int
;	O
if	O
(	O
output_archive_name	pointer
)	O
archive_name	pointer
=	O
output_archive_name	pointer
;	O
if	O
(	O
!	O
arf_stores_inode_p	function
(	O
archive_format	enum
)	O
)	O
renumber_inodes_option	int
=	O
ignore_devno_option	int
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
index	function
<	O
argc	int
-	O
1	int
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Too many arguments"	pointer
)	O
)	O
)	O
;	O
else	O
if	O
(	O
index	function
>	O
argc	int
-	O
1	int
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Not enough arguments"	pointer
)	O
)	O
)	O
;	O
if	O
(	O
archive_format	enum
!=	O
arf_unknown	int
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Archive format is not specified in copy-pass mode "	pointer
"(use --format option)"	pointer
)	O
)	O
)	O
;	O
CHECK_USAGE	O
(	O
swap_bytes_flag	int
,	O
"--swap-bytes (--swap)"	pointer
,	O
"--pass-through"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
swap_halfwords_flag	int
,	O
"--swap-halfwords (--swap)"	pointer
,	O
"--pass-through"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
table_flag	int
,	O
"--list"	pointer
,	O
"--pass-through"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
rename_flag	int
,	O
"--rename"	pointer
,	O
"--pass-through"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
append_flag	int
,	O
"--append"	pointer
,	O
"--pass-through"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
rename_batch_file	pointer
,	O
"--rename-batch-file"	pointer
,	O
"--pass-through"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
no_abs_paths_flag	int
,	O
"--no-absolute-pathnames"	pointer
,	O
"--pass-through"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
no_abs_paths_flag	int
,	O
"--absolute-pathnames"	pointer
,	O
"--pass-through"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
to_stdout_option	bool
,	O
"--to-stdout"	pointer
,	O
"--pass-through"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
renumber_inodes_option	int
,	O
"--renumber-inodes"	pointer
,	O
"--pass-through"	pointer
)	O
;	O
CHECK_USAGE	O
(	O
ignore_devno_option	int
,	O
"--ignore-devno"	pointer
,	O
"--pass-through"	pointer
)	O
;	O
directory_name	pointer
=	O
argv	pointer
[	O
index	function
]	O
;	O
}	O
if	O
(	O
archive_name	pointer
)	O
{	O
if	O
(	O
copy_function	pointer
!=	O
process_copy_in	function
&&	O
copy_function	pointer
!=	O
process_copy_out	function
)	O
error	function
(	O
PAXEXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"-F can be used only with --create or --extract"	pointer
)	O
)	O
;	O
archive_des	int
=	O
open_archive	function
(	O
archive_name	pointer
)	O
;	O
if	O
(	O
archive_des	int
<	O
0	int
)	O
error	function
(	O
PAXEXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"Cannot open %s"	pointer
)	O
,	O
quotearg_colon	function
(	O
archive_name	pointer
)	O
)	O
;	O
}	O
if	O
(	O
set_owner_flag	int
==	O
false	int
&&	O
set_group_flag	int
==	O
false	int
&&	O
geteuid	function
(	O
)	O
)	O
no_chown_flag	int
=	O
true	int
;	O
}	O
void	O
initialize_buffers	function
(	O
)	O
{	O
int	O
in_buf_size	int
,	O
out_buf_size	int
;	O
if	O
(	O
copy_function	pointer
==	O
process_copy_in	function
)	O
{	O
if	O
(	O
io_block_size	int
>=	O
512	int
)	O
in_buf_size	int
=	O
2	int
*	O
io_block_size	int
;	O
else	O
in_buf_size	int
=	O
1024	int
;	O
out_buf_size	int
=	O
DISK_IO_BLOCK_SIZE	int
;	O
}	O
else	O
if	O
(	O
copy_function	pointer
==	O
process_copy_out	function
)	O
{	O
in_buf_size	int
=	O
DISK_IO_BLOCK_SIZE	int
;	O
out_buf_size	int
=	O
io_block_size	int
;	O
}	O
else	O
{	O
in_buf_size	int
=	O
DISK_IO_BLOCK_SIZE	int
;	O
out_buf_size	int
=	O
DISK_IO_BLOCK_SIZE	int
;	O
}	O
input_buffer	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
in_buf_size	int
)	O
;	O
in_buff	pointer
=	O
input_buffer	pointer
;	O
input_buffer_size	long
=	O
in_buf_size	int
;	O
input_size	long
=	O
0	int
;	O
input_bytes	long
=	O
0	int
;	O
output_buffer	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
out_buf_size	int
)	O
;	O
out_buff	pointer
=	O
output_buffer	pointer
;	O
output_size	long
=	O
0	int
;	O
output_bytes	long
=	O
0	int
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	pointer
[	O
]	O
)	O
{	O
setlocale	function
(	O
LC_ALL	O
,	O
""	pointer
)	O
;	O
bindtextdomain	function
(	O
PACKAGE	pointer
,	O
LOCALEDIR	pointer
)	O
;	O
textdomain	function
(	O
PACKAGE	pointer
)	O
;	O
set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
argp_version_setup	function
(	O
"cpio"	pointer
,	O
program_authors	array
)	O
;	O
process_args	function
(	O
argc	int
,	O
argv	pointer
)	O
;	O
initialize_buffers	function
(	O
)	O
;	O
(	O
*	O
copy_function	pointer
)	O
(	O
)	O
;	O
if	O
(	O
archive_des	int
>=	O
0	int
&&	O
rmtclose	O
(	O
archive_des	int
)	O
==	O
-	O
1	int
)	O
error	function
(	O
PAXEXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error closing archive"	pointer
)	O
)	O
;	O
pax_exit	function
(	O
)	O
;	O
}	O
