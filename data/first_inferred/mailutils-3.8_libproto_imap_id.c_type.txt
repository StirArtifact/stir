static	O
int	O
_id_mapper	function
(	O
void	O
*	O
*	O
itmv	pointer
,	O
size_t	long
itmc	long
,	O
void	O
*	O
call_data	pointer
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
copy	pointer
;	O
mu_assoc_t	pointer
assoc	pointer
=	O
call_data	pointer
;	O
struct	O
imap_list_element	struct
*	O
key	pointer
=	O
itmv	pointer
[	O
0	int
]	O
,	O
*	O
val	int
=	O
itmv	pointer
[	O
1	int
]	O
;	O
if	O
(	O
key	pointer
->	O
type	int
!=	O
imap_eltype_string	int
||	O
val	int
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
MU_ERR_FAILURE	O
;	O
copy	pointer
=	O
strdup	function
(	O
val	int
->	O
v	union
.	O
string	pointer
)	O
;	O
if	O
(	O
!	O
copy	pointer
)	O
return	O
errno	O
;	O
rc	int
=	O
mu_assoc_install	function
(	O
assoc	pointer
,	O
key	pointer
->	O
v	union
.	O
string	pointer
,	O
copy	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
val	int
->	O
v	union
.	O
string	pointer
=	O
NULL	O
;	O
return	O
rc	int
;	O
}	O
static	O
mu_assoc_t	pointer
create_id_assoc	function
(	O
void	O
)	O
{	O
mu_assoc_t	pointer
assoc	pointer
;	O
int	O
rc	int
=	O
mu_assoc_create	function
(	O
&	O
assoc	pointer
,	O
MU_ASSOC_ICASE	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
NULL	O
;	O
mu_assoc_set_destroy_item	function
(	O
assoc	pointer
,	O
mu_list_free_item	function
)	O
;	O
return	O
assoc	pointer
;	O
}	O
static	O
void	O
parse_id_reply	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
mu_list_t	pointer
resp	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
mu_assoc_t	pointer
*	O
passoc	pointer
=	O
data	pointer
;	O
struct	O
imap_list_element	struct
*	O
elt	pointer
;	O
if	O
(	O
!	O
data	pointer
)	O
return	O
;	O
elt	pointer
=	O
_mu_imap_list_at	function
(	O
resp	pointer
,	O
0	int
)	O
;	O
if	O
(	O
elt	pointer
&&	O
_mu_imap_list_element_is_string	function
(	O
elt	pointer
,	O
"ID"	pointer
)	O
)	O
{	O
elt	pointer
=	O
_mu_imap_list_at	function
(	O
resp	pointer
,	O
1	int
)	O
;	O
if	O
(	O
elt	pointer
->	O
type	int
==	O
imap_eltype_list	int
)	O
{	O
mu_assoc_t	pointer
assoc	pointer
=	O
create_id_assoc	function
(	O
)	O
;	O
if	O
(	O
assoc	pointer
)	O
{	O
mu_list_gmap	function
(	O
elt	pointer
->	O
v	union
.	O
list	pointer
,	O
_id_mapper	function
,	O
2	int
,	O
assoc	pointer
)	O
;	O
*	O
passoc	pointer
=	O
assoc	pointer
;	O
}	O
}	O
}	O
}	O
int	O
mu_imap_id	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
char	O
*	O
*	O
idenv	pointer
,	O
mu_assoc_t	pointer
*	O
passoc	pointer
)	O
{	O
int	O
status	int
;	O
mu_assoc_t	pointer
assoc	pointer
=	O
NULL	O
;	O
if	O
(	O
imap	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
imap	pointer
->	O
io	pointer
)	O
return	O
MU_ERR_NO_TRANSPORT	O
;	O
if	O
(	O
imap	pointer
->	O
session_state	enum
==	O
MU_IMAP_SESSION_INIT	int
)	O
return	O
MU_ERR_SEQ	O
;	O
switch	O
(	O
imap	pointer
->	O
client_state	enum
)	O
{	O
case	O
MU_IMAP_CLIENT_READY	int
:	O
status	int
=	O
_mu_imap_tag_next	function
(	O
imap	pointer
)	O
;	O
MU_IMAP_CHECK_EAGAIN	O
(	O
imap	pointer
,	O
status	int
)	O
;	O
status	int
=	O
mu_imapio_printf	function
(	O
imap	pointer
->	O
io	pointer
,	O
"%s ID "	pointer
,	O
imap	pointer
->	O
tag_str	pointer
)	O
;	O
MU_IMAP_CHECK_ERROR	O
(	O
imap	pointer
,	O
status	int
)	O
;	O
if	O
(	O
!	O
idenv	pointer
)	O
status	int
=	O
mu_imapio_printf	function
(	O
imap	pointer
->	O
io	pointer
,	O
"NIL"	pointer
)	O
;	O
else	O
{	O
if	O
(	O
idenv	pointer
[	O
0	int
]	O
)	O
{	O
int	O
i	int
;	O
char	O
*	O
delim	int
=	O
"("	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
idenv	pointer
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
status	int
=	O
mu_imapio_printf	function
(	O
imap	pointer
->	O
io	pointer
,	O
"%s\"%s\""	pointer
,	O
delim	int
,	O
idenv	pointer
[	O
i	int
]	O
)	O
;	O
MU_IMAP_CHECK_ERROR	O
(	O
imap	pointer
,	O
status	int
)	O
;	O
delim	int
=	O
" "	pointer
;	O
if	O
(	O
status	int
)	O
break	O
;	O
}	O
status	int
=	O
mu_imapio_printf	function
(	O
imap	pointer
->	O
io	pointer
,	O
")"	pointer
)	O
;	O
}	O
else	O
status	int
=	O
mu_imapio_printf	function
(	O
imap	pointer
->	O
io	pointer
,	O
"()"	pointer
)	O
;	O
}	O
MU_IMAP_CHECK_ERROR	O
(	O
imap	pointer
,	O
status	int
)	O
;	O
status	int
=	O
mu_imapio_printf	function
(	O
imap	pointer
->	O
io	pointer
,	O
"\r\n"	pointer
)	O
;	O
MU_IMAP_CHECK_ERROR	O
(	O
imap	pointer
,	O
status	int
)	O
;	O
MU_IMAP_FCLR	O
(	O
imap	pointer
,	O
MU_IMAP_RESP	int
)	O
;	O
imap	pointer
->	O
client_state	enum
=	O
MU_IMAP_CLIENT_ID_RX	int
;	O
case	O
MU_IMAP_CLIENT_ID_RX	int
:	O
status	int
=	O
_mu_imap_response	function
(	O
imap	pointer
,	O
parse_id_reply	function
,	O
&	O
assoc	pointer
)	O
;	O
MU_IMAP_CHECK_EAGAIN	O
(	O
imap	pointer
,	O
status	int
)	O
;	O
switch	O
(	O
imap	pointer
->	O
response	enum
)	O
{	O
case	O
MU_IMAP_OK	int
:	O
status	int
=	O
0	int
;	O
*	O
passoc	pointer
=	O
assoc	pointer
?	O
assoc	pointer
:	O
create_id_assoc	function
(	O
)	O
;	O
break	O
;	O
case	O
MU_IMAP_NO	int
:	O
status	int
=	O
EACCES	int
;	O
break	O
;	O
case	O
MU_IMAP_BAD	int
:	O
status	int
=	O
MU_ERR_BADREPLY	O
;	O
break	O
;	O
}	O
imap	pointer
->	O
client_state	enum
=	O
MU_IMAP_CLIENT_READY	int
;	O
break	O
;	O
default	O
:	O
status	int
=	O
EINPROGRESS	int
;	O
}	O
return	O
status	int
;	O
}	O
