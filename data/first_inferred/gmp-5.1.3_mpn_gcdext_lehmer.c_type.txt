void	O
mpn_gcdext_hook	O
(	O
void	O
*	O
p	pointer
,	O
mp_srcptr	pointer
gp	pointer
,	O
mp_size_t	long
gn	long
,	O
mp_srcptr	pointer
qp	pointer
,	O
mp_size_t	long
qn	long
,	O
int	O
d	long
)	O
{	O
struct	O
gcdext_ctx	struct
*	O
ctx	pointer
=	O
(	O
struct	O
gcdext_ctx	struct
*	O
)	O
p	pointer
;	O
mp_size_t	long
un	long
=	O
ctx	pointer
->	O
un	long
;	O
if	O
(	O
gp	pointer
)	O
{	O
mp_srcptr	pointer
up	pointer
;	O
ASSERT	O
(	O
gn	long
>	O
0	int
)	O
;	O
ASSERT	O
(	O
gp	pointer
[	O
gn	long
-	O
1	int
]	O
>	O
0	int
)	O
;	O
MPN_COPY	O
(	O
ctx	pointer
->	O
gp	pointer
,	O
gp	pointer
,	O
gn	long
)	O
;	O
ctx	pointer
->	O
gn	long
=	O
gn	long
;	O
if	O
(	O
d	long
<	O
0	int
)	O
{	O
int	O
c	int
;	O
MPN_CMP	O
(	O
c	int
,	O
ctx	pointer
->	O
u0	pointer
,	O
ctx	pointer
->	O
u1	pointer
,	O
un	long
)	O
;	O
ASSERT	O
(	O
c	int
!=	O
0	int
||	O
(	O
un	long
==	O
1	int
&&	O
ctx	pointer
->	O
u0	pointer
[	O
0	int
]	O
==	O
1	int
&&	O
ctx	pointer
->	O
u1	pointer
[	O
0	int
]	O
==	O
1	int
)	O
)	O
;	O
d	long
=	O
c	int
<	O
0	int
;	O
}	O
up	pointer
=	O
d	long
?	O
ctx	pointer
->	O
u0	pointer
:	O
ctx	pointer
->	O
u1	pointer
;	O
MPN_NORMALIZE	O
(	O
up	pointer
,	O
un	long
)	O
;	O
MPN_COPY	O
(	O
ctx	pointer
->	O
up	pointer
,	O
up	pointer
,	O
un	long
)	O
;	O
*	O
ctx	pointer
->	O
usize	pointer
=	O
d	long
?	O
-	O
un	long
:	O
un	long
;	O
}	O
else	O
{	O
mp_limb_t	long
cy	long
;	O
mp_ptr	pointer
u0	pointer
=	O
ctx	pointer
->	O
u0	pointer
;	O
mp_ptr	pointer
u1	pointer
=	O
ctx	pointer
->	O
u1	pointer
;	O
ASSERT	O
(	O
d	long
>=	O
0	int
)	O
;	O
if	O
(	O
d	long
)	O
MP_PTR_SWAP	O
(	O
u0	pointer
,	O
u1	pointer
)	O
;	O
qn	long
-=	O
(	O
qp	pointer
[	O
qn	long
-	O
1	int
]	O
==	O
0	int
)	O
;	O
if	O
(	O
qn	long
==	O
1	int
)	O
{	O
mp_limb_t	long
q	int
=	O
qp	pointer
[	O
0	int
]	O
;	O
if	O
(	O
q	int
==	O
1	int
)	O
cy	long
=	O
mpn_add_n	O
(	O
u0	pointer
,	O
u0	pointer
,	O
u1	pointer
,	O
un	long
)	O
;	O
else	O
cy	long
=	O
mpn_addmul_1	O
(	O
u0	pointer
,	O
u1	pointer
,	O
un	long
,	O
q	int
)	O
;	O
}	O
else	O
{	O
mp_size_t	long
u1n	long
;	O
mp_ptr	pointer
tp	pointer
;	O
u1n	long
=	O
un	long
;	O
MPN_NORMALIZE	O
(	O
u1	pointer
,	O
u1n	long
)	O
;	O
if	O
(	O
u1n	long
==	O
0	int
)	O
return	O
;	O
tp	pointer
=	O
ctx	pointer
->	O
tp	pointer
;	O
if	O
(	O
qn	long
>	O
u1n	long
)	O
mpn_mul	O
(	O
tp	pointer
,	O
qp	pointer
,	O
qn	long
,	O
u1	pointer
,	O
u1n	long
)	O
;	O
else	O
mpn_mul	O
(	O
tp	pointer
,	O
u1	pointer
,	O
u1n	long
,	O
qp	pointer
,	O
qn	long
)	O
;	O
u1n	long
+=	O
qn	long
;	O
u1n	long
-=	O
tp	pointer
[	O
u1n	long
-	O
1	int
]	O
==	O
0	int
;	O
if	O
(	O
u1n	long
>=	O
un	long
)	O
{	O
cy	long
=	O
mpn_add	O
(	O
u0	pointer
,	O
tp	pointer
,	O
u1n	long
,	O
u0	pointer
,	O
un	long
)	O
;	O
un	long
=	O
u1n	long
;	O
}	O
else	O
cy	long
=	O
mpn_add	O
(	O
u0	pointer
,	O
u0	pointer
,	O
un	long
,	O
tp	pointer
,	O
u1n	long
)	O
;	O
}	O
u0	pointer
[	O
un	long
]	O
=	O
cy	long
;	O
ctx	pointer
->	O
un	long
=	O
un	long
+	O
(	O
cy	long
>	O
0	int
)	O
;	O
}	O
}	O
mp_size_t	long
mpn_gcdext_lehmer_n	O
(	O
mp_ptr	pointer
gp	pointer
,	O
mp_ptr	pointer
up	pointer
,	O
mp_size_t	long
*	O
usize	pointer
,	O
mp_ptr	pointer
ap	pointer
,	O
mp_ptr	pointer
bp	pointer
,	O
mp_size_t	long
n	long
,	O
mp_ptr	pointer
tp	pointer
)	O
{	O
mp_size_t	long
ualloc	long
=	O
n	long
+	O
1	int
;	O
struct	O
gcdext_ctx	struct
ctx	pointer
;	O
mp_size_t	long
un	long
;	O
mp_ptr	pointer
u0	pointer
;	O
mp_ptr	pointer
u1	pointer
;	O
mp_ptr	pointer
u2	pointer
;	O
MPN_ZERO	O
(	O
tp	pointer
,	O
3	int
*	O
ualloc	long
)	O
;	O
u0	pointer
=	O
tp	pointer
;	O
tp	pointer
+=	O
ualloc	long
;	O
u1	pointer
=	O
tp	pointer
;	O
tp	pointer
+=	O
ualloc	long
;	O
u2	pointer
=	O
tp	pointer
;	O
tp	pointer
+=	O
ualloc	long
;	O
u1	pointer
[	O
0	int
]	O
=	O
1	int
;	O
un	long
=	O
1	int
;	O
ctx	pointer
.	O
gp	pointer
=	O
gp	pointer
;	O
ctx	pointer
.	O
up	pointer
=	O
up	pointer
;	O
ctx	pointer
.	O
usize	pointer
=	O
usize	pointer
;	O
while	O
(	O
n	long
>=	O
2	int
)	O
{	O
struct	O
hgcd_matrix1	struct
M	struct
;	O
mp_limb_t	long
ah	long
,	O
al	long
,	O
bh	long
,	O
bl	long
;	O
mp_limb_t	long
mask	long
;	O
mask	long
=	O
ap	pointer
[	O
n	long
-	O
1	int
]	O
|	O
bp	pointer
[	O
n	long
-	O
1	int
]	O
;	O
ASSERT	O
(	O
mask	long
>	O
0	int
)	O
;	O
if	O
(	O
mask	long
&	O
GMP_NUMB_HIGHBIT	O
)	O
{	O
ah	long
=	O
ap	pointer
[	O
n	long
-	O
1	int
]	O
;	O
al	long
=	O
ap	pointer
[	O
n	long
-	O
2	int
]	O
;	O
bh	long
=	O
bp	pointer
[	O
n	long
-	O
1	int
]	O
;	O
bl	long
=	O
bp	pointer
[	O
n	long
-	O
2	int
]	O
;	O
}	O
else	O
if	O
(	O
n	long
==	O
2	int
)	O
{	O
int	O
shift	long
;	O
count_leading_zeros	O
(	O
shift	long
,	O
mask	long
)	O
;	O
ah	long
=	O
MPN_EXTRACT_NUMB	O
(	O
shift	long
,	O
ap	pointer
[	O
1	int
]	O
,	O
ap	pointer
[	O
0	int
]	O
)	O
;	O
al	long
=	O
ap	pointer
[	O
0	int
]	O
<<	O
shift	long
;	O
bh	long
=	O
MPN_EXTRACT_NUMB	O
(	O
shift	long
,	O
bp	pointer
[	O
1	int
]	O
,	O
bp	pointer
[	O
0	int
]	O
)	O
;	O
bl	long
=	O
bp	pointer
[	O
0	int
]	O
<<	O
shift	long
;	O
}	O
else	O
{	O
int	O
shift	long
;	O
count_leading_zeros	O
(	O
shift	long
,	O
mask	long
)	O
;	O
ah	long
=	O
MPN_EXTRACT_NUMB	O
(	O
shift	long
,	O
ap	pointer
[	O
n	long
-	O
1	int
]	O
,	O
ap	pointer
[	O
n	long
-	O
2	int
]	O
)	O
;	O
al	long
=	O
MPN_EXTRACT_NUMB	O
(	O
shift	long
,	O
ap	pointer
[	O
n	long
-	O
2	int
]	O
,	O
ap	pointer
[	O
n	long
-	O
3	int
]	O
)	O
;	O
bh	long
=	O
MPN_EXTRACT_NUMB	O
(	O
shift	long
,	O
bp	pointer
[	O
n	long
-	O
1	int
]	O
,	O
bp	pointer
[	O
n	long
-	O
2	int
]	O
)	O
;	O
bl	long
=	O
MPN_EXTRACT_NUMB	O
(	O
shift	long
,	O
bp	pointer
[	O
n	long
-	O
2	int
]	O
,	O
bp	pointer
[	O
n	long
-	O
3	int
]	O
)	O
;	O
}	O
if	O
(	O
mpn_hgcd2	O
(	O
ah	long
,	O
al	long
,	O
bh	long
,	O
bl	long
,	O
&	O
M	struct
)	O
)	O
{	O
n	long
=	O
mpn_matrix22_mul1_inverse_vector	O
(	O
&	O
M	struct
,	O
tp	pointer
,	O
ap	pointer
,	O
bp	pointer
,	O
n	long
)	O
;	O
MP_PTR_SWAP	O
(	O
ap	pointer
,	O
tp	pointer
)	O
;	O
un	long
=	O
mpn_hgcd_mul_matrix1_vector	O
(	O
&	O
M	struct
,	O
u2	pointer
,	O
u0	pointer
,	O
u1	pointer
,	O
un	long
)	O
;	O
MP_PTR_SWAP	O
(	O
u0	pointer
,	O
u2	pointer
)	O
;	O
}	O
else	O
{	O
ctx	pointer
.	O
u0	pointer
=	O
u0	pointer
;	O
ctx	pointer
.	O
u1	pointer
=	O
u1	pointer
;	O
ctx	pointer
.	O
tp	pointer
=	O
u2	pointer
;	O
ctx	pointer
.	O
un	long
=	O
un	long
;	O
n	long
=	O
mpn_gcd_subdiv_step	O
(	O
ap	pointer
,	O
bp	pointer
,	O
n	long
,	O
0	int
,	O
mpn_gcdext_hook	O
,	O
&	O
ctx	pointer
,	O
tp	pointer
)	O
;	O
if	O
(	O
n	long
==	O
0	int
)	O
return	O
ctx	pointer
.	O
gn	long
;	O
un	long
=	O
ctx	pointer
.	O
un	long
;	O
}	O
}	O
ASSERT_ALWAYS	O
(	O
ap	pointer
[	O
0	int
]	O
>	O
0	int
)	O
;	O
ASSERT_ALWAYS	O
(	O
bp	pointer
[	O
0	int
]	O
>	O
0	int
)	O
;	O
if	O
(	O
ap	pointer
[	O
0	int
]	O
==	O
bp	pointer
[	O
0	int
]	O
)	O
{	O
int	O
c	int
;	O
gp	pointer
[	O
0	int
]	O
=	O
ap	pointer
[	O
0	int
]	O
;	O
MPN_CMP	O
(	O
c	int
,	O
u0	pointer
,	O
u1	pointer
,	O
un	long
)	O
;	O
ASSERT	O
(	O
c	int
!=	O
0	int
||	O
(	O
un	long
==	O
1	int
&&	O
u0	pointer
[	O
0	int
]	O
==	O
1	int
&&	O
u1	pointer
[	O
0	int
]	O
==	O
1	int
)	O
)	O
;	O
if	O
(	O
c	int
<	O
0	int
)	O
{	O
MPN_NORMALIZE	O
(	O
u0	pointer
,	O
un	long
)	O
;	O
MPN_COPY	O
(	O
up	pointer
,	O
u0	pointer
,	O
un	long
)	O
;	O
*	O
usize	pointer
=	O
-	O
un	long
;	O
}	O
else	O
{	O
MPN_NORMALIZE_NOT_ZERO	O
(	O
u1	pointer
,	O
un	long
)	O
;	O
MPN_COPY	O
(	O
up	pointer
,	O
u1	pointer
,	O
un	long
)	O
;	O
*	O
usize	pointer
=	O
un	long
;	O
}	O
return	O
1	int
;	O
}	O
else	O
{	O
mp_limb_t	long
uh	long
,	O
vh	long
;	O
mp_limb_signed_t	long
u	array
;	O
mp_limb_signed_t	long
v	long
;	O
int	O
negate	int
;	O
gp	pointer
[	O
0	int
]	O
=	O
mpn_gcdext_1	O
(	O
&	O
u	array
,	O
&	O
v	long
,	O
ap	pointer
[	O
0	int
]	O
,	O
bp	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
u	array
==	O
0	int
)	O
{	O
ASSERT	O
(	O
v	long
==	O
1	int
)	O
;	O
MPN_NORMALIZE	O
(	O
u0	pointer
,	O
un	long
)	O
;	O
MPN_COPY	O
(	O
up	pointer
,	O
u0	pointer
,	O
un	long
)	O
;	O
*	O
usize	pointer
=	O
-	O
un	long
;	O
return	O
1	int
;	O
}	O
else	O
if	O
(	O
v	long
==	O
0	int
)	O
{	O
ASSERT	O
(	O
u	array
==	O
1	int
)	O
;	O
MPN_NORMALIZE	O
(	O
u1	pointer
,	O
un	long
)	O
;	O
MPN_COPY	O
(	O
up	pointer
,	O
u1	pointer
,	O
un	long
)	O
;	O
*	O
usize	pointer
=	O
un	long
;	O
return	O
1	int
;	O
}	O
else	O
if	O
(	O
u	array
>	O
0	int
)	O
{	O
negate	int
=	O
0	int
;	O
ASSERT	O
(	O
v	long
<	O
0	int
)	O
;	O
v	long
=	O
-	O
v	long
;	O
}	O
else	O
{	O
negate	int
=	O
1	int
;	O
ASSERT	O
(	O
v	long
>	O
0	int
)	O
;	O
u	array
=	O
-	O
u	array
;	O
}	O
uh	long
=	O
mpn_mul_1	O
(	O
up	pointer
,	O
u1	pointer
,	O
un	long
,	O
u	array
)	O
;	O
vh	long
=	O
mpn_addmul_1	O
(	O
up	pointer
,	O
u0	pointer
,	O
un	long
,	O
v	long
)	O
;	O
if	O
(	O
(	O
uh	long
|	O
vh	long
)	O
>	O
0	int
)	O
{	O
uh	long
+=	O
vh	long
;	O
up	pointer
[	O
un	long
++	O
]	O
=	O
uh	long
;	O
if	O
(	O
uh	long
<	O
vh	long
)	O
up	pointer
[	O
un	long
++	O
]	O
=	O
1	int
;	O
}	O
MPN_NORMALIZE_NOT_ZERO	O
(	O
up	pointer
,	O
un	long
)	O
;	O
*	O
usize	pointer
=	O
negate	int
?	O
-	O
un	long
:	O
un	long
;	O
return	O
1	int
;	O
}	O
}	O
