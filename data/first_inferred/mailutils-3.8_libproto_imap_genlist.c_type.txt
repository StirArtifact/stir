struct	O
list_closure	struct
{	O
int	O
error_code	int
;	O
mu_list_t	pointer
retlist	pointer
;	O
const	O
char	O
*	O
command	pointer
;	O
}	O
;	O
static	O
int	O
count_depth	function
(	O
const	O
char	O
*	O
name	pointer
,	O
int	O
delim	pointer
)	O
{	O
int	O
depth	int
=	O
0	int
;	O
while	O
(	O
*	O
name	pointer
)	O
if	O
(	O
*	O
name	pointer
++	O
==	O
delim	pointer
)	O
depth	int
++	O
;	O
return	O
depth	int
;	O
}	O
static	O
int	O
list_attr_conv	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
imap_list_element	struct
*	O
elt	pointer
=	O
item	pointer
;	O
struct	O
mu_list_response	struct
*	O
rp	pointer
=	O
data	pointer
;	O
if	O
(	O
elt	pointer
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
0	int
;	O
if	O
(	O
mu_c_strcasecmp	function
(	O
elt	pointer
->	O
v	array
.	O
string	pointer
,	O
"\\Noinferiors"	pointer
)	O
)	O
rp	pointer
->	O
type	int
|=	O
MU_FOLDER_ATTRIBUTE_DIRECTORY	int
;	O
if	O
(	O
mu_c_strcasecmp	function
(	O
elt	pointer
->	O
v	array
.	O
string	pointer
,	O
"\\Noselect"	pointer
)	O
)	O
rp	pointer
->	O
type	int
|=	O
MU_FOLDER_ATTRIBUTE_FILE	int
;	O
return	O
0	int
;	O
}	O
static	O
void	O
list_untagged_handler	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
mu_list_t	pointer
resp	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
list_closure	struct
*	O
clos	pointer
=	O
data	pointer
;	O
struct	O
imap_list_element	struct
*	O
elt	pointer
;	O
size_t	long
count	long
;	O
if	O
(	O
clos	pointer
->	O
error_code	int
)	O
return	O
;	O
mu_list_count	function
(	O
resp	pointer
,	O
&	O
count	long
)	O
;	O
if	O
(	O
count	long
==	O
4	int
&&	O
_mu_imap_list_nth_element_is_string	function
(	O
resp	pointer
,	O
0	int
,	O
clos	pointer
->	O
command	pointer
)	O
)	O
{	O
struct	O
mu_list_response	struct
*	O
rp	pointer
;	O
rp	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
rp	pointer
)	O
)	O
;	O
if	O
(	O
!	O
rp	pointer
)	O
{	O
clos	pointer
->	O
error_code	int
=	O
ENOMEM	int
;	O
return	O
;	O
}	O
elt	pointer
=	O
_mu_imap_list_at	function
(	O
resp	pointer
,	O
1	int
)	O
;	O
if	O
(	O
!	O
(	O
elt	pointer
&&	O
elt	pointer
->	O
type	int
==	O
imap_eltype_list	int
)	O
)	O
return	O
;	O
rp	pointer
->	O
type	int
=	O
0	int
;	O
mu_list_foreach	function
(	O
elt	pointer
->	O
v	array
.	O
list	pointer
,	O
list_attr_conv	function
,	O
rp	pointer
)	O
;	O
elt	pointer
=	O
_mu_imap_list_at	function
(	O
resp	pointer
,	O
3	int
)	O
;	O
if	O
(	O
!	O
(	O
elt	pointer
&&	O
elt	pointer
->	O
type	int
==	O
imap_eltype_string	int
)	O
)	O
return	O
;	O
rp	pointer
->	O
name	pointer
=	O
strdup	function
(	O
elt	pointer
->	O
v	array
.	O
string	pointer
)	O
;	O
if	O
(	O
!	O
rp	pointer
->	O
name	pointer
)	O
{	O
free	function
(	O
rp	pointer
)	O
;	O
clos	pointer
->	O
error_code	int
=	O
ENOMEM	int
;	O
return	O
;	O
}	O
elt	pointer
=	O
_mu_imap_list_at	function
(	O
resp	pointer
,	O
2	int
)	O
;	O
if	O
(	O
!	O
elt	pointer
)	O
return	O
;	O
if	O
(	O
_mu_imap_list_element_is_nil	function
(	O
elt	pointer
)	O
)	O
{	O
rp	pointer
->	O
separator	int
=	O
0	int
;	O
rp	pointer
->	O
depth	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
elt	pointer
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
;	O
else	O
{	O
rp	pointer
->	O
separator	int
=	O
elt	pointer
->	O
v	array
.	O
string	pointer
[	O
0	int
]	O
;	O
rp	pointer
->	O
depth	int
=	O
count_depth	function
(	O
rp	pointer
->	O
name	pointer
,	O
rp	pointer
->	O
separator	int
)	O
;	O
}	O
if	O
(	O
(	O
clos	pointer
->	O
error_code	int
=	O
mu_list_append	function
(	O
clos	pointer
->	O
retlist	pointer
,	O
rp	pointer
)	O
)	O
)	O
mu_list_response_free	function
(	O
rp	pointer
)	O
;	O
}	O
}	O
int	O
mu_imap_genlist	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
int	O
lsub	int
,	O
const	O
char	O
*	O
refname	pointer
,	O
const	O
char	O
*	O
mboxname	pointer
,	O
mu_list_t	pointer
retlist	pointer
)	O
{	O
char	O
const	O
*	O
argv	pointer
[	O
3	int
]	O
;	O
static	O
struct	O
imap_command	struct
com	struct
;	O
struct	O
list_closure	struct
clos	pointer
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
refname	pointer
||	O
!	O
mboxname	pointer
)	O
return	O
EINVAL	int
;	O
argv	pointer
[	O
0	int
]	O
=	O
lsub	int
?	O
"LSUB"	pointer
:	O
"LIST"	pointer
;	O
argv	pointer
[	O
1	int
]	O
=	O
refname	pointer
;	O
argv	pointer
[	O
2	int
]	O
=	O
mboxname	pointer
;	O
clos	pointer
.	O
error_code	int
=	O
0	int
;	O
clos	pointer
.	O
retlist	pointer
=	O
retlist	pointer
;	O
clos	pointer
.	O
command	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
com	struct
.	O
session_state	enum
=	O
MU_IMAP_SESSION_AUTH	int
;	O
com	struct
.	O
capa	pointer
=	O
NULL	O
;	O
com	struct
.	O
rx_state	int
=	O
lsub	int
?	O
MU_IMAP_CLIENT_LSUB_RX	int
:	O
MU_IMAP_CLIENT_LIST_RX	int
;	O
com	struct
.	O
argc	int
=	O
3	int
;	O
com	struct
.	O
argv	pointer
=	O
argv	pointer
;	O
com	struct
.	O
extra	pointer
=	O
NULL	O
;	O
com	struct
.	O
msgset	pointer
=	O
NULL	O
;	O
com	struct
.	O
tagged_handler	pointer
=	O
NULL	O
;	O
com	struct
.	O
untagged_handler	pointer
=	O
list_untagged_handler	function
;	O
com	struct
.	O
untagged_handler_data	pointer
=	O
&	O
clos	pointer
;	O
rc	int
=	O
mu_imap_gencom	function
(	O
imap	pointer
,	O
&	O
com	struct
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
rc	int
=	O
clos	pointer
.	O
error_code	int
;	O
return	O
rc	int
;	O
}	O
int	O
mu_imap_genlist_new	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
int	O
lsub	int
,	O
const	O
char	O
*	O
refname	pointer
,	O
const	O
char	O
*	O
mboxname	pointer
,	O
mu_list_t	pointer
*	O
plist	pointer
)	O
{	O
mu_list_t	pointer
list	pointer
;	O
int	O
rc	int
=	O
mu_list_create	function
(	O
&	O
list	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_list_set_destroy_item	function
(	O
list	pointer
,	O
mu_list_response_free	function
)	O
;	O
rc	int
=	O
mu_imap_genlist	function
(	O
imap	pointer
,	O
lsub	int
,	O
refname	pointer
,	O
mboxname	pointer
,	O
list	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_list_destroy	function
(	O
&	O
list	pointer
)	O
;	O
else	O
*	O
plist	pointer
=	O
list	pointer
;	O
}	O
return	O
rc	int
;	O
}	O
