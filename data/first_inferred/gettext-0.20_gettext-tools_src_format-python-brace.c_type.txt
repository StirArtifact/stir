struct	O
named_arg	struct
{	O
char	O
*	O
name	pointer
;	O
}	O
;	O
struct	O
spec	struct
{	O
unsigned	O
int	O
directives	int
;	O
unsigned	O
int	O
named_arg_count	int
;	O
unsigned	O
int	O
allocated	int
;	O
struct	O
named_arg	struct
*	O
named	pointer
;	O
}	O
;	O
static	O
bool	bool
parse_upto	function
(	O
struct	O
spec	struct
*	O
spec	struct
,	O
const	O
char	O
*	O
*	O
formatp	pointer
,	O
bool	bool
is_toplevel	bool
,	O
char	O
terminator	char
,	O
bool	bool
translated	bool
,	O
char	O
*	O
fdi	pointer
,	O
char	O
*	O
*	O
invalid_reason	pointer
)	O
;	O
static	O
void	O
free_named_args	function
(	O
struct	O
spec	struct
*	O
spec	struct
)	O
;	O
static	O
bool	bool
parse_named_field	function
(	O
struct	O
spec	struct
*	O
spec	struct
,	O
const	O
char	O
*	O
*	O
formatp	pointer
,	O
bool	bool
translated	bool
,	O
char	O
*	O
fdi	pointer
,	O
char	O
*	O
*	O
invalid_reason	pointer
)	O
{	O
const	O
char	O
*	O
format	pointer
=	O
*	O
formatp	pointer
;	O
char	O
c	int
;	O
c	int
=	O
*	O
format	pointer
;	O
if	O
(	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'Z'	O
)	O
||	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'z'	O
)	O
||	O
c	int
==	O
'_'	O
)	O
{	O
do	O
c	int
=	O
*	O
++	O
format	pointer
;	O
while	O
(	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'Z'	O
)	O
||	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'z'	O
)	O
||	O
c	int
==	O
'_'	O
||	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
)	O
;	O
*	O
formatp	pointer
=	O
format	pointer
;	O
return	O
true	int
;	O
}	O
return	O
false	int
;	O
}	O
static	O
bool	bool
parse_numeric_field	function
(	O
struct	O
spec	struct
*	O
spec	struct
,	O
const	O
char	O
*	O
*	O
formatp	pointer
,	O
bool	bool
translated	bool
,	O
char	O
*	O
fdi	pointer
,	O
char	O
*	O
*	O
invalid_reason	pointer
)	O
{	O
const	O
char	O
*	O
format	pointer
=	O
*	O
formatp	pointer
;	O
char	O
c	int
;	O
c	int
=	O
*	O
format	pointer
;	O
if	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
{	O
do	O
c	int
=	O
*	O
++	O
format	pointer
;	O
while	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
;	O
*	O
formatp	pointer
=	O
format	pointer
;	O
return	O
true	int
;	O
}	O
return	O
false	int
;	O
}	O
static	O
bool	bool
parse_directive	function
(	O
struct	O
spec	struct
*	O
spec	struct
,	O
const	O
char	O
*	O
*	O
formatp	pointer
,	O
bool	bool
is_toplevel	bool
,	O
bool	bool
translated	bool
,	O
char	O
*	O
fdi	pointer
,	O
char	O
*	O
*	O
invalid_reason	pointer
)	O
{	O
const	O
char	O
*	O
format	pointer
=	O
*	O
formatp	pointer
;	O
const	O
char	O
*	O
const	O
format_start	pointer
=	O
format	pointer
;	O
const	O
char	O
*	O
name_start	pointer
;	O
char	O
c	int
;	O
c	int
=	O
*	O
++	O
format	pointer
;	O
if	O
(	O
c	int
==	O
'{'	O
)	O
{	O
*	O
formatp	pointer
=	O
++	O
format	pointer
;	O
return	O
true	int
;	O
}	O
name_start	pointer
=	O
format	pointer
;	O
if	O
(	O
!	O
parse_named_field	function
(	O
spec	struct
,	O
&	O
format	pointer
,	O
translated	bool
,	O
fdi	pointer
,	O
invalid_reason	pointer
)	O
&&	O
!	O
parse_numeric_field	function
(	O
spec	struct
,	O
&	O
format	pointer
,	O
translated	bool
,	O
fdi	pointer
,	O
invalid_reason	pointer
)	O
)	O
{	O
*	O
invalid_reason	pointer
=	O
xasprintf	function
(	O
_	O
(	O
"In the directive number %u, '%c' cannot start a field name."	pointer
)	O
,	O
spec	struct
->	O
directives	int
,	O
*	O
format	pointer
)	O
;	O
FDI_SET	O
(	O
format	pointer
,	O
FMTDIR_ERROR	int
)	O
;	O
return	O
false	int
;	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
*	O
format	pointer
;	O
if	O
(	O
c	int
==	O
'.'	O
)	O
{	O
format	pointer
++	O
;	O
if	O
(	O
!	O
parse_named_field	function
(	O
spec	struct
,	O
&	O
format	pointer
,	O
translated	bool
,	O
fdi	pointer
,	O
invalid_reason	pointer
)	O
)	O
{	O
*	O
invalid_reason	pointer
=	O
xasprintf	function
(	O
_	O
(	O
"In the directive number %u, '%c' cannot start a getattr argument."	pointer
)	O
,	O
spec	struct
->	O
directives	int
,	O
*	O
format	pointer
)	O
;	O
FDI_SET	O
(	O
format	pointer
,	O
FMTDIR_ERROR	int
)	O
;	O
return	O
false	int
;	O
}	O
}	O
else	O
if	O
(	O
c	int
==	O
'['	O
)	O
{	O
format	pointer
++	O
;	O
if	O
(	O
!	O
parse_named_field	function
(	O
spec	struct
,	O
&	O
format	pointer
,	O
translated	bool
,	O
fdi	pointer
,	O
invalid_reason	pointer
)	O
&&	O
!	O
parse_numeric_field	function
(	O
spec	struct
,	O
&	O
format	pointer
,	O
translated	bool
,	O
fdi	pointer
,	O
invalid_reason	pointer
)	O
)	O
{	O
*	O
invalid_reason	pointer
=	O
xasprintf	function
(	O
_	O
(	O
"In the directive number %u, '%c' cannot start a getitem argument."	pointer
)	O
,	O
spec	struct
->	O
directives	int
,	O
*	O
format	pointer
)	O
;	O
FDI_SET	O
(	O
format	pointer
,	O
FMTDIR_ERROR	int
)	O
;	O
return	O
false	int
;	O
}	O
c	int
=	O
*	O
format	pointer
++	O
;	O
if	O
(	O
c	int
!=	O
']'	O
)	O
{	O
*	O
invalid_reason	pointer
=	O
INVALID_UNTERMINATED_DIRECTIVE	O
(	O
)	O
;	O
FDI_SET	O
(	O
format	pointer
,	O
FMTDIR_ERROR	int
)	O
;	O
return	O
false	int
;	O
}	O
}	O
else	O
break	O
;	O
}	O
if	O
(	O
c	int
==	O
':'	O
)	O
{	O
if	O
(	O
!	O
is_toplevel	bool
)	O
{	O
*	O
invalid_reason	pointer
=	O
xasprintf	function
(	O
_	O
(	O
"In the directive number %u, no more nesting is allowed in a format specifier."	pointer
)	O
,	O
spec	struct
->	O
directives	int
)	O
;	O
FDI_SET	O
(	O
format	pointer
,	O
FMTDIR_ERROR	int
)	O
;	O
return	O
false	int
;	O
}	O
format	pointer
++	O
;	O
if	O
(	O
*	O
format	pointer
==	O
'{'	O
)	O
{	O
if	O
(	O
!	O
parse_directive	function
(	O
spec	struct
,	O
&	O
format	pointer
,	O
false	int
,	O
translated	bool
,	O
fdi	pointer
,	O
invalid_reason	pointer
)	O
)	O
{	O
return	O
false	int
;	O
}	O
if	O
(	O
*	O
format	pointer
!=	O
'}'	O
)	O
{	O
*	O
invalid_reason	pointer
=	O
INVALID_UNTERMINATED_DIRECTIVE	O
(	O
)	O
;	O
FDI_SET	O
(	O
format	pointer
,	O
FMTDIR_ERROR	int
)	O
;	O
return	O
false	int
;	O
}	O
}	O
else	O
{	O
int	O
c1	int
,	O
c2	int
;	O
c1	int
=	O
format	pointer
[	O
0	int
]	O
;	O
c2	int
=	O
format	pointer
[	O
1	int
]	O
;	O
if	O
(	O
c2	int
==	O
'<'	O
||	O
c2	int
==	O
'>'	O
||	O
c2	int
==	O
'='	O
||	O
c2	int
==	O
'^'	O
)	O
format	pointer
+=	O
2	int
;	O
else	O
if	O
(	O
c1	int
==	O
'<'	O
||	O
c1	int
==	O
'>'	O
||	O
c1	int
==	O
'='	O
||	O
c1	int
==	O
'^'	O
)	O
format	pointer
++	O
;	O
if	O
(	O
*	O
format	pointer
==	O
'+'	O
||	O
*	O
format	pointer
==	O
'-'	O
||	O
*	O
format	pointer
==	O
' '	O
)	O
format	pointer
++	O
;	O
if	O
(	O
*	O
format	pointer
==	O
'#'	O
)	O
format	pointer
++	O
;	O
if	O
(	O
*	O
format	pointer
==	O
'0'	O
)	O
format	pointer
++	O
;	O
while	O
(	O
c_isdigit	function
(	O
*	O
format	pointer
)	O
)	O
format	pointer
++	O
;	O
if	O
(	O
*	O
format	pointer
==	O
'.'	O
)	O
{	O
format	pointer
++	O
;	O
while	O
(	O
c_isdigit	function
(	O
*	O
format	pointer
)	O
)	O
format	pointer
++	O
;	O
}	O
switch	O
(	O
*	O
format	pointer
)	O
{	O
case	O
'b'	O
:	O
case	O
'c'	O
:	O
case	O
'd'	O
:	O
case	O
'o'	O
:	O
case	O
'x'	O
:	O
case	O
'X'	O
:	O
case	O
'n'	O
:	O
case	O
'e'	O
:	O
case	O
'E'	O
:	O
case	O
'f'	O
:	O
case	O
'F'	O
:	O
case	O
'g'	O
:	O
case	O
'G'	O
:	O
case	O
'%'	O
:	O
format	pointer
++	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
if	O
(	O
*	O
format	pointer
!=	O
'}'	O
)	O
{	O
*	O
invalid_reason	pointer
=	O
INVALID_UNTERMINATED_DIRECTIVE	O
(	O
)	O
;	O
FDI_SET	O
(	O
format	pointer
,	O
FMTDIR_ERROR	int
)	O
;	O
return	O
false	int
;	O
}	O
}	O
c	int
=	O
*	O
format	pointer
;	O
}	O
if	O
(	O
c	int
!=	O
'}'	O
)	O
{	O
*	O
invalid_reason	pointer
=	O
xasprintf	function
(	O
_	O
(	O
"In the directive number %u, there is an unterminated format directive."	pointer
)	O
,	O
spec	struct
->	O
directives	int
)	O
;	O
FDI_SET	O
(	O
format	pointer
,	O
FMTDIR_ERROR	int
)	O
;	O
return	O
false	int
;	O
}	O
if	O
(	O
is_toplevel	bool
)	O
{	O
char	O
*	O
name	pointer
;	O
size_t	long
n	long
=	O
format	pointer
-	O
name_start	pointer
;	O
FDI_SET	O
(	O
name_start	pointer
-	O
1	int
,	O
FMTDIR_START	int
)	O
;	O
name	pointer
=	O
XNMALLOC	O
(	O
n	long
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	function
(	O
name	pointer
,	O
name_start	pointer
,	O
n	long
)	O
;	O
name	pointer
[	O
n	long
]	O
=	O
'\0'	O
;	O
spec	struct
->	O
directives	int
++	O
;	O
if	O
(	O
spec	struct
->	O
allocated	int
==	O
spec	struct
->	O
named_arg_count	int
)	O
{	O
spec	struct
->	O
allocated	int
=	O
2	int
*	O
spec	struct
->	O
allocated	int
+	O
1	int
;	O
spec	struct
->	O
named	pointer
=	O
(	O
struct	O
named_arg	struct
*	O
)	O
xrealloc	function
(	O
spec	struct
->	O
named	pointer
,	O
spec	struct
->	O
allocated	int
*	O
sizeof	O
(	O
struct	O
named_arg	struct
)	O
)	O
;	O
}	O
spec	struct
->	O
named	pointer
[	O
spec	struct
->	O
named_arg_count	int
]	O
.	O
name	pointer
=	O
name	pointer
;	O
spec	struct
->	O
named_arg_count	int
++	O
;	O
FDI_SET	O
(	O
format	pointer
,	O
FMTDIR_END	int
)	O
;	O
}	O
*	O
formatp	pointer
=	O
++	O
format	pointer
;	O
return	O
true	int
;	O
}	O
static	O
bool	bool
parse_upto	function
(	O
struct	O
spec	struct
*	O
spec	struct
,	O
const	O
char	O
*	O
*	O
formatp	pointer
,	O
bool	bool
is_toplevel	bool
,	O
char	O
terminator	char
,	O
bool	bool
translated	bool
,	O
char	O
*	O
fdi	pointer
,	O
char	O
*	O
*	O
invalid_reason	pointer
)	O
{	O
const	O
char	O
*	O
format	pointer
=	O
*	O
formatp	pointer
;	O
for	O
(	O
;	O
*	O
format	pointer
!=	O
terminator	char
&&	O
*	O
format	pointer
!=	O
'\0'	O
;	O
)	O
{	O
if	O
(	O
*	O
format	pointer
==	O
'{'	O
)	O
{	O
if	O
(	O
!	O
parse_directive	function
(	O
spec	struct
,	O
&	O
format	pointer
,	O
is_toplevel	bool
,	O
translated	bool
,	O
fdi	pointer
,	O
invalid_reason	pointer
)	O
)	O
return	O
false	int
;	O
}	O
else	O
format	pointer
++	O
;	O
}	O
*	O
formatp	pointer
=	O
format	pointer
;	O
return	O
true	int
;	O
}	O
static	O
int	O
named_arg_compare	function
(	O
const	O
void	O
*	O
p1	pointer
,	O
const	O
void	O
*	O
p2	pointer
)	O
{	O
return	O
strcmp	function
(	O
(	O
(	O
const	O
struct	O
named_arg	struct
*	O
)	O
p1	pointer
)	O
->	O
name	pointer
,	O
(	O
(	O
const	O
struct	O
named_arg	struct
*	O
)	O
p2	pointer
)	O
->	O
name	pointer
)	O
;	O
}	O
static	O
void	O
*	O
format_parse	function
(	O
const	O
char	O
*	O
format	pointer
,	O
bool	bool
translated	bool
,	O
char	O
*	O
fdi	pointer
,	O
char	O
*	O
*	O
invalid_reason	pointer
)	O
{	O
struct	O
spec	struct
spec	struct
;	O
struct	O
spec	struct
*	O
result	pointer
;	O
spec	struct
.	O
directives	int
=	O
0	int
;	O
spec	struct
.	O
named_arg_count	int
=	O
0	int
;	O
spec	struct
.	O
allocated	int
=	O
0	int
;	O
spec	struct
.	O
named	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
parse_upto	function
(	O
&	O
spec	struct
,	O
&	O
format	pointer
,	O
true	int
,	O
'\0'	O
,	O
translated	bool
,	O
fdi	pointer
,	O
invalid_reason	pointer
)	O
)	O
{	O
free_named_args	function
(	O
&	O
spec	struct
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
spec	struct
.	O
named_arg_count	int
>	O
1	int
)	O
{	O
unsigned	O
int	O
i	long
,	O
j	long
;	O
qsort	function
(	O
spec	struct
.	O
named	pointer
,	O
spec	struct
.	O
named_arg_count	int
,	O
sizeof	O
(	O
struct	O
named_arg	struct
)	O
,	O
named_arg_compare	function
)	O
;	O
for	O
(	O
i	long
=	O
j	long
=	O
0	int
;	O
i	long
<	O
spec	struct
.	O
named_arg_count	int
;	O
i	long
++	O
)	O
if	O
(	O
j	long
>	O
0	int
&&	O
strcmp	function
(	O
spec	struct
.	O
named	pointer
[	O
i	long
]	O
.	O
name	pointer
,	O
spec	struct
.	O
named	pointer
[	O
j	long
-	O
1	int
]	O
.	O
name	pointer
)	O
==	O
0	int
)	O
free	function
(	O
spec	struct
.	O
named	pointer
[	O
i	long
]	O
.	O
name	pointer
)	O
;	O
else	O
{	O
if	O
(	O
j	long
<	O
i	long
)	O
spec	struct
.	O
named	pointer
[	O
j	long
]	O
.	O
name	pointer
=	O
spec	struct
.	O
named	pointer
[	O
i	long
]	O
.	O
name	pointer
;	O
j	long
++	O
;	O
}	O
spec	struct
.	O
named_arg_count	int
=	O
j	long
;	O
}	O
result	pointer
=	O
XMALLOC	O
(	O
struct	O
spec	struct
)	O
;	O
*	O
result	pointer
=	O
spec	struct
;	O
return	O
result	pointer
;	O
}	O
static	O
void	O
free_named_args	function
(	O
struct	O
spec	struct
*	O
spec	struct
)	O
{	O
if	O
(	O
spec	struct
->	O
named	pointer
!=	O
NULL	O
)	O
{	O
unsigned	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
spec	struct
->	O
named_arg_count	int
;	O
i	long
++	O
)	O
free	function
(	O
spec	struct
->	O
named	pointer
[	O
i	long
]	O
.	O
name	pointer
)	O
;	O
free	function
(	O
spec	struct
->	O
named	pointer
)	O
;	O
}	O
}	O
static	O
void	O
format_free	function
(	O
void	O
*	O
descr	pointer
)	O
{	O
struct	O
spec	struct
*	O
spec	struct
=	O
(	O
struct	O
spec	struct
*	O
)	O
descr	pointer
;	O
free_named_args	function
(	O
spec	struct
)	O
;	O
free	function
(	O
spec	struct
)	O
;	O
}	O
static	O
int	O
format_get_number_of_directives	function
(	O
void	O
*	O
descr	pointer
)	O
{	O
struct	O
spec	struct
*	O
spec	struct
=	O
(	O
struct	O
spec	struct
*	O
)	O
descr	pointer
;	O
return	O
spec	struct
->	O
directives	int
;	O
}	O
static	O
bool	bool
format_check	function
(	O
void	O
*	O
msgid_descr	pointer
,	O
void	O
*	O
msgstr_descr	pointer
,	O
bool	bool
equality	bool
,	O
formatstring_error_logger_t	pointer
error_logger	pointer
,	O
const	O
char	O
*	O
pretty_msgid	pointer
,	O
const	O
char	O
*	O
pretty_msgstr	pointer
)	O
{	O
struct	O
spec	struct
*	O
spec1	pointer
=	O
(	O
struct	O
spec	struct
*	O
)	O
msgid_descr	pointer
;	O
struct	O
spec	struct
*	O
spec2	pointer
=	O
(	O
struct	O
spec	struct
*	O
)	O
msgstr_descr	pointer
;	O
bool	bool
err	bool
=	O
false	int
;	O
if	O
(	O
spec1	pointer
->	O
named_arg_count	int
+	O
spec2	pointer
->	O
named_arg_count	int
>	O
0	int
)	O
{	O
unsigned	O
int	O
i	long
,	O
j	long
;	O
unsigned	O
int	O
n1	int
=	O
spec1	pointer
->	O
named_arg_count	int
;	O
unsigned	O
int	O
n2	int
=	O
spec2	pointer
->	O
named_arg_count	int
;	O
for	O
(	O
i	long
=	O
0	int
,	O
j	long
=	O
0	int
;	O
i	long
<	O
n1	int
||	O
j	long
<	O
n2	int
;	O
)	O
{	O
int	O
cmp	int
=	O
(	O
i	long
>=	O
n1	int
?	O
1	int
:	O
j	long
>=	O
n2	int
?	O
-	O
1	int
:	O
strcmp	function
(	O
spec1	pointer
->	O
named	pointer
[	O
i	long
]	O
.	O
name	pointer
,	O
spec2	pointer
->	O
named	pointer
[	O
j	long
]	O
.	O
name	pointer
)	O
)	O
;	O
if	O
(	O
cmp	int
>	O
0	int
)	O
{	O
if	O
(	O
equality	bool
)	O
{	O
if	O
(	O
error_logger	pointer
)	O
error_logger	pointer
(	O
_	O
(	O
"a format specification for argument '%s' doesn't exist in '%s'"	pointer
)	O
,	O
spec2	pointer
->	O
named	pointer
[	O
i	long
]	O
.	O
name	pointer
,	O
pretty_msgid	pointer
)	O
;	O
err	bool
=	O
true	int
;	O
break	O
;	O
}	O
else	O
j	long
++	O
;	O
}	O
else	O
if	O
(	O
cmp	int
<	O
0	int
)	O
{	O
if	O
(	O
equality	bool
)	O
{	O
if	O
(	O
error_logger	pointer
)	O
error_logger	pointer
(	O
_	O
(	O
"a format specification for argument '%s' doesn't exist in '%s'"	pointer
)	O
,	O
spec1	pointer
->	O
named	pointer
[	O
i	long
]	O
.	O
name	pointer
,	O
pretty_msgstr	pointer
)	O
;	O
err	bool
=	O
true	int
;	O
break	O
;	O
}	O
else	O
i	long
++	O
;	O
}	O
else	O
j	long
++	O
,	O
i	long
++	O
;	O
}	O
}	O
return	O
err	bool
;	O
}	O
struct	O
formatstring_parser	struct
formatstring_python_brace	struct
=	O
{	O
format_parse	function
,	O
format_free	function
,	O
format_get_number_of_directives	function
,	O
NULL	O
,	O
format_check	function
}	O
;	O
