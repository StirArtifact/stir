typedef	O
struct	O
{	O
const	O
char	O
*	O
hostname	pointer
,	O
*	O
ip	pointer
;	O
wget_hpkp_stats_result	enum
hpkp	pointer
;	O
wget_iri_scheme	enum
scheme	enum
;	O
char	O
hsts	bool
,	O
csp	bool
,	O
hpkp_new	char
;	O
}	O
server_stats_data	struct
;	O
typedef	O
struct	O
{	O
const	O
char	O
*	O
hostname	pointer
,	O
*	O
ip	pointer
;	O
wget_iri_scheme	enum
scheme	enum
;	O
}	O
server_stats_host	struct
;	O
static	O
wget_hashmap	struct
*	O
hosts	pointer
;	O
static	O
wget_thread_mutex	pointer
mutex	pointer
;	O
static	O
FILE	struct
*	O
fp	pointer
;	O
static	O
int	O
host_compare	function
(	O
const	O
server_stats_host	struct
*	O
host1	pointer
,	O
const	O
server_stats_host	struct
*	O
host2	pointer
)	O
{	O
int	O
n	long
;	O
if	O
(	O
(	O
n	long
=	O
wget_strcmp	function
(	O
host1	pointer
->	O
hostname	pointer
,	O
host2	pointer
->	O
hostname	pointer
)	O
)	O
)	O
return	O
n	long
;	O
if	O
(	O
(	O
n	long
=	O
wget_strcmp	function
(	O
host1	pointer
->	O
ip	pointer
,	O
host2	pointer
->	O
ip	pointer
)	O
)	O
)	O
return	O
n	long
;	O
return	O
host1	pointer
->	O
scheme	enum
-	O
host2	pointer
->	O
scheme	enum
;	O
}	O
__attribute__	O
(	O
(	O
no_sanitize	O
(	O
"integer"	pointer
)	O
)	O
)	O
static	O
unsigned	O
int	O
host_hash	function
(	O
const	O
server_stats_host	struct
*	O
host	pointer
)	O
{	O
unsigned	O
int	O
hash	pointer
=	O
host	pointer
->	O
scheme	enum
;	O
const	O
unsigned	O
char	O
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
host	pointer
->	O
hostname	pointer
;	O
p	pointer
&&	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
hash	pointer
=	O
hash	pointer
*	O
101	int
+	O
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
host	pointer
->	O
ip	pointer
;	O
p	pointer
&&	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
hash	pointer
=	O
hash	pointer
*	O
101	int
+	O
*	O
p	pointer
;	O
return	O
hash	pointer
;	O
}	O
static	O
void	O
free_host_entry	function
(	O
server_stats_host	struct
*	O
host	pointer
)	O
{	O
if	O
(	O
host	pointer
)	O
{	O
wget_xfree	O
(	O
host	pointer
->	O
hostname	pointer
)	O
;	O
wget_xfree	O
(	O
host	pointer
->	O
ip	pointer
)	O
;	O
wget_xfree	O
(	O
host	pointer
)	O
;	O
}	O
}	O
WGET_GCC_CONST	O
static	O
const	O
char	O
*	O
hpkp_string	function
(	O
wget_hpkp_stats_result	enum
hpkp	pointer
)	O
{	O
switch	O
(	O
hpkp	pointer
)	O
{	O
case	O
WGET_STATS_HPKP_NO	int
:	O
return	O
"HPKP_NO"	pointer
;	O
case	O
WGET_STATS_HPKP_MATCH	int
:	O
return	O
"HPKP_MATCH"	pointer
;	O
case	O
WGET_STATS_HPKP_NOMATCH	int
:	O
return	O
"HPKP_NOMATCH"	pointer
;	O
case	O
WGET_STATS_HPKP_ERROR	int
:	O
return	O
"HPKP_ERROR"	pointer
;	O
default	O
:	O
return	O
"?"	pointer
;	O
}	O
}	O
static	O
void	O
server_stats_print	function
(	O
server_stats_data	struct
*	O
stats	pointer
)	O
{	O
if	O
(	O
config	struct
.	O
stats_server_args	pointer
->	O
format	enum
==	O
WGET_STATS_FORMAT_HUMAN	int
)	O
{	O
wget_fprintf	function
(	O
fp	pointer
,	O
"  %s:\n"	pointer
,	O
NULL_TO_DASH	O
(	O
stats	pointer
->	O
hostname	pointer
)	O
)	O
;	O
wget_fprintf	function
(	O
fp	pointer
,	O
"    IP             : %s\n"	pointer
,	O
NULL_TO_DASH	O
(	O
stats	pointer
->	O
ip	pointer
)	O
)	O
;	O
wget_fprintf	function
(	O
fp	pointer
,	O
"    Scheme         : %s\n"	pointer
,	O
wget_iri_scheme_get_name	function
(	O
stats	pointer
->	O
scheme	enum
)	O
)	O
;	O
wget_fprintf	function
(	O
fp	pointer
,	O
"    HPKP           : %s\n"	pointer
,	O
hpkp_string	function
(	O
stats	pointer
->	O
hpkp	pointer
)	O
)	O
;	O
wget_fprintf	function
(	O
fp	pointer
,	O
"    HPKP New Entry : %s\n"	pointer
,	O
ON_OFF_DASH	O
(	O
stats	pointer
->	O
hpkp_new	char
)	O
)	O
;	O
wget_fprintf	function
(	O
fp	pointer
,	O
"    HSTS           : %s\n"	pointer
,	O
ON_OFF_DASH	O
(	O
stats	pointer
->	O
hsts	bool
)	O
)	O
;	O
wget_fprintf	function
(	O
fp	pointer
,	O
"    CSP            : %s\n\n"	pointer
,	O
ON_OFF_DASH	O
(	O
stats	pointer
->	O
csp	bool
)	O
)	O
;	O
}	O
else	O
{	O
wget_fprintf	function
(	O
fp	pointer
,	O
"%s,%s,%s,%d,%d,%d,%d\n"	pointer
,	O
stats	pointer
->	O
hostname	pointer
?	O
stats	pointer
->	O
hostname	pointer
:	O
""	pointer
,	O
stats	pointer
->	O
ip	pointer
?	O
stats	pointer
->	O
ip	pointer
:	O
""	pointer
,	O
wget_iri_scheme_get_name	function
(	O
stats	pointer
->	O
scheme	enum
)	O
,	O
(	O
int	O
)	O
stats	pointer
->	O
hpkp	pointer
,	O
stats	pointer
->	O
hpkp_new	char
,	O
stats	pointer
->	O
hsts	bool
,	O
stats	pointer
->	O
csp	bool
)	O
;	O
}	O
}	O
static	O
void	O
server_stats_add	function
(	O
wget_http_connection	struct
*	O
conn	pointer
,	O
wget_http_response	struct
*	O
resp	pointer
)	O
{	O
server_stats_host	struct
*	O
hostp	pointer
=	O
wget_malloc	function
(	O
sizeof	O
(	O
server_stats_host	struct
)	O
)	O
;	O
hostp	pointer
->	O
hostname	pointer
=	O
wget_strdup	function
(	O
wget_http_get_host	function
(	O
conn	pointer
)	O
)	O
;	O
hostp	pointer
->	O
ip	pointer
=	O
wget_strdup	function
(	O
wget_tcp_get_ip	function
(	O
conn	pointer
->	O
tcp	pointer
)	O
)	O
;	O
hostp	pointer
->	O
scheme	enum
=	O
conn	pointer
->	O
scheme	enum
;	O
wget_thread_mutex_lock	function
(	O
mutex	pointer
)	O
;	O
if	O
(	O
!	O
wget_hashmap_contains	function
(	O
hosts	pointer
,	O
hostp	pointer
)	O
)	O
{	O
server_stats_data	struct
stats	pointer
;	O
stats	pointer
.	O
hostname	pointer
=	O
hostp	pointer
->	O
hostname	pointer
;	O
stats	pointer
.	O
ip	pointer
=	O
hostp	pointer
->	O
ip	pointer
;	O
stats	pointer
.	O
scheme	enum
=	O
hostp	pointer
->	O
scheme	enum
;	O
stats	pointer
.	O
hpkp	pointer
=	O
conn	pointer
->	O
tcp	pointer
->	O
hpkp	pointer
;	O
stats	pointer
.	O
hpkp_new	char
=	O
resp	pointer
?	O
(	O
resp	pointer
->	O
hpkp	pointer
?	O
1	int
:	O
0	int
)	O
:	O
-	O
1	int
;	O
stats	pointer
.	O
hsts	bool
=	O
resp	pointer
?	O
(	O
resp	pointer
->	O
hsts	bool
?	O
1	int
:	O
0	int
)	O
:	O
-	O
1	int
;	O
stats	pointer
.	O
csp	bool
=	O
resp	pointer
?	O
(	O
resp	pointer
->	O
csp	bool
?	O
1	int
:	O
0	int
)	O
:	O
-	O
1	int
;	O
server_stats_print	function
(	O
&	O
stats	pointer
)	O
;	O
wget_hashmap_put	function
(	O
hosts	pointer
,	O
hostp	pointer
,	O
hostp	pointer
)	O
;	O
}	O
else	O
free_host_entry	function
(	O
hostp	pointer
)	O
;	O
wget_thread_mutex_unlock	function
(	O
mutex	pointer
)	O
;	O
}	O
void	O
server_stats_init	function
(	O
FILE	struct
*	O
fpout	pointer
)	O
{	O
wget_thread_mutex_init	function
(	O
&	O
mutex	pointer
)	O
;	O
hosts	pointer
=	O
wget_hashmap_create	function
(	O
16	int
,	O
(	O
wget_hashmap_hash_fn	function
*	O
)	O
host_hash	function
,	O
(	O
wget_hashmap_compare_fn	function
*	O
)	O
host_compare	function
)	O
;	O
wget_hashmap_set_key_destructor	function
(	O
hosts	pointer
,	O
(	O
wget_hashmap_key_destructor	function
*	O
)	O
free_host_entry	function
)	O
;	O
fp	pointer
=	O
fpout	pointer
;	O
wget_server_set_stats_callback	function
(	O
server_stats_add	function
)	O
;	O
}	O
void	O
server_stats_exit	function
(	O
void	O
)	O
{	O
wget_hashmap_free	function
(	O
&	O
hosts	pointer
)	O
;	O
wget_thread_mutex_destroy	function
(	O
&	O
mutex	pointer
)	O
;	O
}	O
