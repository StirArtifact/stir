AWindow	struct
*	O
InitializeX11AWindow	function
(	O
Display	struct
*	O
dpy	pointer
,	O
int	O
screen	pointer
,	O
Drawable	long
d	long
,	O
int	O
flags	char
)	O
{	O
register	O
AWindow	struct
*	O
w	pointer
;	O
register	O
int	O
i	int
;	O
int	O
x	int
,	O
y	int
;	O
Window	long
root	long
;	O
unsigned	O
int	O
width	int
,	O
height	int
,	O
bwidth	int
,	O
depth	int
;	O
XGCValues	struct
gcv	struct
;	O
XGetGeometry	function
(	O
dpy	pointer
,	O
d	long
,	O
&	O
root	long
,	O
&	O
x	int
,	O
&	O
y	int
,	O
&	O
width	int
,	O
&	O
height	int
,	O
&	O
bwidth	int
,	O
&	O
depth	int
)	O
;	O
if	O
(	O
(	O
w	pointer
=	O
(	O
AWindow	struct
*	O
)	O
malloc	O
(	O
sizeof	O
(	O
AWindow	struct
)	O
)	O
)	O
==	O
(	O
AWindow	struct
*	O
)	O
NULL	O
)	O
return	O
w	pointer
;	O
w	pointer
->	O
width	int
=	O
width	int
;	O
w	pointer
->	O
height	int
=	O
height	int
;	O
w	pointer
->	O
clip	struct
.	O
x1	short
=	O
0	int
;	O
w	pointer
->	O
clip	struct
.	O
y1	short
=	O
0	int
;	O
w	pointer
->	O
clip	struct
.	O
x2	short
=	O
width	int
-	O
1	int
;	O
w	pointer
->	O
clip	struct
.	O
y2	short
=	O
height	int
-	O
1	int
;	O
w	pointer
->	O
edges	pointer
=	O
(	O
EdgeList	struct
*	O
)	O
malloc	O
(	O
(	O
w	pointer
->	O
height	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
EdgeList	struct
)	O
)	O
;	O
w	pointer
->	O
lines	pointer
=	O
(	O
EdgeList	struct
*	O
)	O
malloc	O
(	O
(	O
w	pointer
->	O
height	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
EdgeList	struct
)	O
)	O
;	O
w	pointer
->	O
EPSize	int
=	O
64	int
*	O
1024	int
;	O
w	pointer
->	O
edgePool	pointer
=	O
(	O
Edge	struct
*	O
)	O
malloc	O
(	O
w	pointer
->	O
EPSize	int
*	O
sizeof	O
(	O
Edge	struct
)	O
)	O
;	O
memset	function
(	O
w	pointer
->	O
edgePool	pointer
,	O
0	int
,	O
w	pointer
->	O
EPSize	int
*	O
sizeof	O
(	O
Edge	struct
)	O
)	O
;	O
w	pointer
->	O
CSSize0	int
=	O
w	pointer
->	O
height	int
*	O
32	int
;	O
w	pointer
->	O
csPool0	pointer
=	O
(	O
ColorSegment	struct
*	O
)	O
malloc	O
(	O
w	pointer
->	O
CSSize0	int
*	O
sizeof	O
(	O
ColorSegment	struct
)	O
)	O
;	O
memset	function
(	O
w	pointer
->	O
csPool0	pointer
,	O
0	int
,	O
w	pointer
->	O
CSSize0	int
*	O
sizeof	O
(	O
ColorSegment	struct
)	O
)	O
;	O
w	pointer
->	O
CSSize1	int
=	O
w	pointer
->	O
height	int
*	O
32	int
;	O
w	pointer
->	O
csPool1	pointer
=	O
(	O
ColorSegment	struct
*	O
)	O
malloc	O
(	O
w	pointer
->	O
CSSize1	int
*	O
sizeof	O
(	O
ColorSegment	struct
)	O
)	O
;	O
memset	function
(	O
w	pointer
->	O
csPool1	pointer
,	O
0	int
,	O
w	pointer
->	O
CSSize1	int
*	O
sizeof	O
(	O
ColorSegment	struct
)	O
)	O
;	O
w	pointer
->	O
CSSize2	int
=	O
0	int
;	O
w	pointer
->	O
csPool2	pointer
=	O
(	O
ColorSegment	struct
*	O
)	O
NULL	O
;	O
w	pointer
->	O
scanLine	pointer
=	O
(	O
ScanLine	struct
*	O
)	O
malloc	O
(	O
(	O
w	pointer
->	O
height	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
ScanLine	struct
)	O
)	O
;	O
w	pointer
->	O
lastScanLine	pointer
=	O
(	O
ScanLine	struct
*	O
)	O
malloc	O
(	O
(	O
w	pointer
->	O
height	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
ScanLine	struct
)	O
)	O
;	O
w	pointer
->	O
otherLastScanLine	pointer
=	O
NULL	O
;	O
w	pointer
->	O
doubleBuffered	int
=	O
0	int
;	O
w	pointer
->	O
EPTop	int
=	O
w	pointer
->	O
CSTop0	int
=	O
w	pointer
->	O
CSTop1	int
=	O
w	pointer
->	O
curPool	int
=	O
0	int
;	O
w	pointer
->	O
ymin	short
=	O
0x7FFF	int
;	O
w	pointer
->	O
ymax	short
=	O
-	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
w	pointer
->	O
height	int
+	O
1	int
;	O
++	O
i	int
)	O
{	O
w	pointer
->	O
scanLine	pointer
[	O
i	int
]	O
.	O
count	int
=	O
0	int
;	O
w	pointer
->	O
scanLine	pointer
[	O
i	int
]	O
.	O
head	pointer
=	O
0	int
;	O
w	pointer
->	O
scanLine	pointer
[	O
i	int
]	O
.	O
tail	pointer
=	O
0	int
;	O
w	pointer
->	O
lastScanLine	pointer
[	O
i	int
]	O
.	O
count	int
=	O
0	int
;	O
w	pointer
->	O
lastScanLine	pointer
[	O
i	int
]	O
.	O
head	pointer
=	O
0	int
;	O
w	pointer
->	O
lastScanLine	pointer
[	O
i	int
]	O
.	O
tail	pointer
=	O
0	int
;	O
w	pointer
->	O
edges	pointer
[	O
i	int
]	O
.	O
head	pointer
=	O
(	O
Edge	struct
*	O
)	O
NULL	O
;	O
w	pointer
->	O
lines	pointer
[	O
i	int
]	O
.	O
head	pointer
=	O
(	O
Edge	struct
*	O
)	O
NULL	O
;	O
}	O
w	pointer
->	O
color_to_pixel_map_top	long
=	O
0	int
;	O
w	pointer
->	O
bsegSize	int
=	O
256	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
sizeof	O
(	O
w	pointer
->	O
bseg	array
)	O
/	O
sizeof	O
(	O
w	pointer
->	O
bseg	array
[	O
0	int
]	O
)	O
)	O
;	O
++	O
i	int
)	O
w	pointer
->	O
bseg	array
[	O
i	int
]	O
.	O
count	int
=	O
-	O
1	int
;	O
w	pointer
->	O
display	pointer
=	O
dpy	pointer
;	O
w	pointer
->	O
d	long
=	O
d	long
;	O
gcv	struct
.	O
cap_style	int
=	O
CapButt	int
;	O
w	pointer
->	O
gc	pointer
=	O
XCreateGC	function
(	O
dpy	pointer
,	O
RootWindow	O
(	O
dpy	pointer
,	O
screen	pointer
)	O
,	O
GCCapStyle	O
,	O
&	O
gcv	struct
)	O
;	O
w	pointer
->	O
flags	char
=	O
flags	char
;	O
if	O
(	O
flags	char
&	O
AMonoMode	int
)	O
XSetFillStyle	function
(	O
dpy	pointer
,	O
w	pointer
->	O
gc	pointer
,	O
FillOpaqueStippled	int
)	O
;	O
return	O
w	pointer
;	O
}	O
int	O
_AlibDoubleBuffered	int
=	O
0	int
;	O
AWindow	struct
*	O
InitializeAWindow	function
(	O
unsigned	O
int	O
width	int
,	O
unsigned	O
int	O
height	int
)	O
{	O
register	O
AWindow	struct
*	O
w	pointer
;	O
register	O
int	O
i	int
;	O
if	O
(	O
(	O
w	pointer
=	O
(	O
AWindow	struct
*	O
)	O
malloc	O
(	O
sizeof	O
(	O
AWindow	struct
)	O
)	O
)	O
==	O
(	O
AWindow	struct
*	O
)	O
NULL	O
)	O
return	O
w	pointer
;	O
w	pointer
->	O
doubleBuffered	int
=	O
_AlibDoubleBuffered	int
;	O
w	pointer
->	O
width	int
=	O
width	int
;	O
w	pointer
->	O
height	int
=	O
height	int
;	O
w	pointer
->	O
edges	pointer
=	O
(	O
EdgeList	struct
*	O
)	O
malloc	O
(	O
w	pointer
->	O
height	int
*	O
sizeof	O
(	O
EdgeList	struct
)	O
)	O
;	O
w	pointer
->	O
lines	pointer
=	O
(	O
EdgeList	struct
*	O
)	O
malloc	O
(	O
w	pointer
->	O
height	int
*	O
sizeof	O
(	O
EdgeList	struct
)	O
)	O
;	O
w	pointer
->	O
EPSize	int
=	O
64	int
*	O
1024	int
;	O
w	pointer
->	O
edgePool	pointer
=	O
(	O
Edge	struct
*	O
)	O
malloc	O
(	O
w	pointer
->	O
EPSize	int
*	O
sizeof	O
(	O
Edge	struct
)	O
)	O
;	O
memset	function
(	O
w	pointer
->	O
edgePool	pointer
,	O
0	int
,	O
w	pointer
->	O
EPSize	int
*	O
sizeof	O
(	O
Edge	struct
)	O
)	O
;	O
w	pointer
->	O
CSSize0	int
=	O
w	pointer
->	O
height	int
*	O
32	int
;	O
w	pointer
->	O
csPool0	pointer
=	O
(	O
ColorSegment	struct
*	O
)	O
malloc	O
(	O
w	pointer
->	O
CSSize0	int
*	O
sizeof	O
(	O
ColorSegment	struct
)	O
)	O
;	O
memset	function
(	O
w	pointer
->	O
csPool0	pointer
,	O
0	int
,	O
w	pointer
->	O
CSSize0	int
*	O
sizeof	O
(	O
ColorSegment	struct
)	O
)	O
;	O
w	pointer
->	O
CSSize1	int
=	O
w	pointer
->	O
height	int
*	O
32	int
;	O
w	pointer
->	O
csPool1	pointer
=	O
(	O
ColorSegment	struct
*	O
)	O
malloc	O
(	O
w	pointer
->	O
CSSize1	int
*	O
sizeof	O
(	O
ColorSegment	struct
)	O
)	O
;	O
memset	function
(	O
w	pointer
->	O
csPool1	pointer
,	O
0	int
,	O
w	pointer
->	O
CSSize1	int
*	O
sizeof	O
(	O
ColorSegment	struct
)	O
)	O
;	O
if	O
(	O
w	pointer
->	O
doubleBuffered	int
)	O
{	O
w	pointer
->	O
CSSize2	int
=	O
w	pointer
->	O
height	int
*	O
32	int
;	O
w	pointer
->	O
csPool2	pointer
=	O
(	O
ColorSegment	struct
*	O
)	O
malloc	O
(	O
w	pointer
->	O
CSSize2	int
*	O
sizeof	O
(	O
ColorSegment	struct
)	O
)	O
;	O
memset	function
(	O
w	pointer
->	O
csPool2	pointer
,	O
0	int
,	O
w	pointer
->	O
CSSize2	int
*	O
sizeof	O
(	O
ColorSegment	struct
)	O
)	O
;	O
}	O
else	O
{	O
w	pointer
->	O
CSSize2	int
=	O
0	int
;	O
w	pointer
->	O
csPool2	pointer
=	O
(	O
ColorSegment	struct
*	O
)	O
NULL	O
;	O
}	O
w	pointer
->	O
scanLine	pointer
=	O
(	O
ScanLine	struct
*	O
)	O
malloc	O
(	O
(	O
w	pointer
->	O
height	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
ScanLine	struct
)	O
)	O
;	O
w	pointer
->	O
lastScanLine	pointer
=	O
(	O
ScanLine	struct
*	O
)	O
malloc	O
(	O
(	O
w	pointer
->	O
height	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
ScanLine	struct
)	O
)	O
;	O
if	O
(	O
w	pointer
->	O
doubleBuffered	int
)	O
{	O
w	pointer
->	O
otherLastScanLine	pointer
=	O
(	O
ScanLine	struct
*	O
)	O
malloc	O
(	O
(	O
w	pointer
->	O
height	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
ScanLine	struct
)	O
)	O
;	O
}	O
else	O
{	O
w	pointer
->	O
otherLastScanLine	pointer
=	O
NULL	O
;	O
}	O
w	pointer
->	O
EPTop	int
=	O
w	pointer
->	O
CSTop0	int
=	O
w	pointer
->	O
CSTop1	int
=	O
w	pointer
->	O
CSTop2	int
=	O
w	pointer
->	O
curPool	int
=	O
0	int
;	O
w	pointer
->	O
ymin	short
=	O
0x7FFF	int
;	O
w	pointer
->	O
ymax	short
=	O
-	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
w	pointer
->	O
height	int
;	O
++	O
i	int
)	O
{	O
w	pointer
->	O
scanLine	pointer
[	O
i	int
]	O
.	O
count	int
=	O
0	int
;	O
w	pointer
->	O
scanLine	pointer
[	O
i	int
]	O
.	O
head	pointer
=	O
0	int
;	O
w	pointer
->	O
scanLine	pointer
[	O
i	int
]	O
.	O
tail	pointer
=	O
0	int
;	O
w	pointer
->	O
lastScanLine	pointer
[	O
i	int
]	O
.	O
count	int
=	O
0	int
;	O
w	pointer
->	O
lastScanLine	pointer
[	O
i	int
]	O
.	O
head	pointer
=	O
0	int
;	O
w	pointer
->	O
lastScanLine	pointer
[	O
i	int
]	O
.	O
tail	pointer
=	O
0	int
;	O
if	O
(	O
w	pointer
->	O
doubleBuffered	int
)	O
{	O
w	pointer
->	O
otherLastScanLine	pointer
[	O
i	int
]	O
.	O
count	int
=	O
0	int
;	O
w	pointer
->	O
otherLastScanLine	pointer
[	O
i	int
]	O
.	O
head	pointer
=	O
0	int
;	O
w	pointer
->	O
otherLastScanLine	pointer
[	O
i	int
]	O
.	O
tail	pointer
=	O
0	int
;	O
}	O
w	pointer
->	O
edges	pointer
[	O
i	int
]	O
.	O
head	pointer
=	O
(	O
Edge	struct
*	O
)	O
NULL	O
;	O
w	pointer
->	O
lines	pointer
[	O
i	int
]	O
.	O
head	pointer
=	O
(	O
Edge	struct
*	O
)	O
NULL	O
;	O
}	O
return	O
w	pointer
;	O
}	O
void	O
ResizeAWindow	function
(	O
AWindow	struct
*	O
w	pointer
,	O
int	O
height	int
,	O
int	O
width	int
)	O
{	O
register	O
int	O
i	int
;	O
if	O
(	O
!	O
w	pointer
)	O
{	O
return	O
;	O
}	O
if	O
(	O
w	pointer
->	O
edges	pointer
)	O
{	O
free	function
(	O
(	O
char	O
*	O
)	O
w	pointer
->	O
edges	pointer
)	O
;	O
}	O
if	O
(	O
w	pointer
->	O
lines	pointer
)	O
{	O
free	function
(	O
(	O
char	O
*	O
)	O
w	pointer
->	O
lines	pointer
)	O
;	O
}	O
if	O
(	O
w	pointer
->	O
edgePool	pointer
)	O
{	O
free	function
(	O
(	O
char	O
*	O
)	O
w	pointer
->	O
edgePool	pointer
)	O
;	O
}	O
if	O
(	O
w	pointer
->	O
scanLine	pointer
)	O
{	O
free	function
(	O
(	O
char	O
*	O
)	O
w	pointer
->	O
scanLine	pointer
)	O
;	O
}	O
if	O
(	O
w	pointer
->	O
lastScanLine	pointer
)	O
{	O
free	function
(	O
(	O
char	O
*	O
)	O
w	pointer
->	O
lastScanLine	pointer
)	O
;	O
}	O
if	O
(	O
w	pointer
->	O
otherLastScanLine	pointer
)	O
{	O
free	function
(	O
(	O
char	O
*	O
)	O
w	pointer
->	O
otherLastScanLine	pointer
)	O
;	O
}	O
if	O
(	O
w	pointer
->	O
csPool0	pointer
)	O
{	O
free	function
(	O
w	pointer
->	O
csPool0	pointer
)	O
;	O
}	O
if	O
(	O
w	pointer
->	O
csPool1	pointer
)	O
{	O
free	function
(	O
w	pointer
->	O
csPool1	pointer
)	O
;	O
}	O
if	O
(	O
w	pointer
->	O
csPool2	pointer
)	O
{	O
free	function
(	O
w	pointer
->	O
csPool2	pointer
)	O
;	O
}	O
w	pointer
->	O
width	int
=	O
width	int
;	O
w	pointer
->	O
height	int
=	O
height	int
;	O
w	pointer
->	O
clip	struct
.	O
x2	short
=	O
width	int
-	O
1	int
;	O
w	pointer
->	O
clip	struct
.	O
y2	short
=	O
height	int
-	O
1	int
;	O
w	pointer
->	O
edges	pointer
=	O
(	O
EdgeList	struct
*	O
)	O
malloc	O
(	O
(	O
w	pointer
->	O
height	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
EdgeList	struct
)	O
)	O
;	O
w	pointer
->	O
lines	pointer
=	O
(	O
EdgeList	struct
*	O
)	O
malloc	O
(	O
(	O
w	pointer
->	O
height	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
EdgeList	struct
)	O
)	O
;	O
w	pointer
->	O
EPSize	int
=	O
64	int
*	O
1024	int
;	O
w	pointer
->	O
edgePool	pointer
=	O
(	O
Edge	struct
*	O
)	O
malloc	O
(	O
w	pointer
->	O
EPSize	int
*	O
sizeof	O
(	O
Edge	struct
)	O
)	O
;	O
memset	function
(	O
w	pointer
->	O
edgePool	pointer
,	O
0	int
,	O
w	pointer
->	O
EPSize	int
*	O
sizeof	O
(	O
Edge	struct
)	O
)	O
;	O
w	pointer
->	O
CSSize0	int
=	O
w	pointer
->	O
height	int
*	O
32	int
;	O
w	pointer
->	O
csPool0	pointer
=	O
(	O
ColorSegment	struct
*	O
)	O
malloc	O
(	O
w	pointer
->	O
CSSize0	int
*	O
sizeof	O
(	O
ColorSegment	struct
)	O
)	O
;	O
memset	function
(	O
w	pointer
->	O
csPool0	pointer
,	O
0	int
,	O
w	pointer
->	O
CSSize0	int
*	O
sizeof	O
(	O
ColorSegment	struct
)	O
)	O
;	O
w	pointer
->	O
CSSize1	int
=	O
w	pointer
->	O
height	int
*	O
32	int
;	O
w	pointer
->	O
csPool1	pointer
=	O
(	O
ColorSegment	struct
*	O
)	O
malloc	O
(	O
w	pointer
->	O
CSSize1	int
*	O
sizeof	O
(	O
ColorSegment	struct
)	O
)	O
;	O
memset	function
(	O
w	pointer
->	O
csPool1	pointer
,	O
0	int
,	O
w	pointer
->	O
CSSize1	int
*	O
sizeof	O
(	O
ColorSegment	struct
)	O
)	O
;	O
if	O
(	O
w	pointer
->	O
doubleBuffered	int
)	O
{	O
w	pointer
->	O
CSSize2	int
=	O
w	pointer
->	O
height	int
*	O
32	int
;	O
w	pointer
->	O
csPool2	pointer
=	O
(	O
ColorSegment	struct
*	O
)	O
malloc	O
(	O
w	pointer
->	O
CSSize2	int
*	O
sizeof	O
(	O
ColorSegment	struct
)	O
)	O
;	O
memset	function
(	O
w	pointer
->	O
csPool2	pointer
,	O
0	int
,	O
w	pointer
->	O
CSSize2	int
*	O
sizeof	O
(	O
ColorSegment	struct
)	O
)	O
;	O
}	O
else	O
{	O
w	pointer
->	O
CSSize2	int
=	O
0	int
;	O
w	pointer
->	O
csPool2	pointer
=	O
(	O
ColorSegment	struct
*	O
)	O
NULL	O
;	O
}	O
w	pointer
->	O
scanLine	pointer
=	O
(	O
ScanLine	struct
*	O
)	O
malloc	O
(	O
(	O
w	pointer
->	O
height	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
ScanLine	struct
)	O
)	O
;	O
w	pointer
->	O
lastScanLine	pointer
=	O
(	O
ScanLine	struct
*	O
)	O
malloc	O
(	O
(	O
w	pointer
->	O
height	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
ScanLine	struct
)	O
)	O
;	O
if	O
(	O
w	pointer
->	O
doubleBuffered	int
)	O
{	O
w	pointer
->	O
otherLastScanLine	pointer
=	O
(	O
ScanLine	struct
*	O
)	O
malloc	O
(	O
(	O
w	pointer
->	O
height	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
ScanLine	struct
)	O
)	O
;	O
}	O
else	O
{	O
w	pointer
->	O
otherLastScanLine	pointer
=	O
NULL	O
;	O
}	O
w	pointer
->	O
EPTop	int
=	O
w	pointer
->	O
CSTop0	int
=	O
w	pointer
->	O
CSTop1	int
=	O
w	pointer
->	O
CSTop2	int
=	O
w	pointer
->	O
curPool	int
=	O
0	int
;	O
w	pointer
->	O
ymin	short
=	O
0x7FFF	int
;	O
w	pointer
->	O
ymax	short
=	O
-	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
w	pointer
->	O
height	int
+	O
1	int
;	O
++	O
i	int
)	O
{	O
w	pointer
->	O
scanLine	pointer
[	O
i	int
]	O
.	O
count	int
=	O
0	int
;	O
w	pointer
->	O
scanLine	pointer
[	O
i	int
]	O
.	O
head	pointer
=	O
0	int
;	O
w	pointer
->	O
scanLine	pointer
[	O
i	int
]	O
.	O
tail	pointer
=	O
0	int
;	O
w	pointer
->	O
lastScanLine	pointer
[	O
i	int
]	O
.	O
count	int
=	O
0	int
;	O
w	pointer
->	O
lastScanLine	pointer
[	O
i	int
]	O
.	O
head	pointer
=	O
0	int
;	O
w	pointer
->	O
lastScanLine	pointer
[	O
i	int
]	O
.	O
tail	pointer
=	O
0	int
;	O
if	O
(	O
w	pointer
->	O
doubleBuffered	int
)	O
{	O
w	pointer
->	O
otherLastScanLine	pointer
[	O
i	int
]	O
.	O
count	int
=	O
0	int
;	O
w	pointer
->	O
otherLastScanLine	pointer
[	O
i	int
]	O
.	O
head	pointer
=	O
0	int
;	O
w	pointer
->	O
otherLastScanLine	pointer
[	O
i	int
]	O
.	O
tail	pointer
=	O
0	int
;	O
}	O
w	pointer
->	O
edges	pointer
[	O
i	int
]	O
.	O
head	pointer
=	O
(	O
Edge	struct
*	O
)	O
NULL	O
;	O
w	pointer
->	O
lines	pointer
[	O
i	int
]	O
.	O
head	pointer
=	O
(	O
Edge	struct
*	O
)	O
NULL	O
;	O
}	O
}	O
