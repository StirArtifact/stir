static	O
bfd_boolean	int
segment_executable	function
(	O
struct	O
elf_segment_map	struct
*	O
seg	pointer
)	O
{	O
if	O
(	O
seg	pointer
->	O
p_flags_valid	int
)	O
return	O
(	O
seg	pointer
->	O
p_flags	array
&	O
PF_X	O
)	O
!=	O
0	int
;	O
else	O
{	O
unsigned	O
int	O
i	pointer
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
seg	pointer
->	O
count	int
;	O
++	O
i	pointer
)	O
if	O
(	O
seg	pointer
->	O
sections	pointer
[	O
i	pointer
]	O
->	O
flags	int
&	O
SEC_CODE	int
)	O
return	O
TRUE	int
;	O
}	O
return	O
FALSE	int
;	O
}	O
static	O
bfd_boolean	int
segment_eligible_for_headers	function
(	O
struct	O
elf_segment_map	struct
*	O
seg	pointer
,	O
bfd_vma	long
minpagesize	long
,	O
bfd_vma	long
sizeof_headers	long
)	O
{	O
unsigned	O
int	O
i	pointer
;	O
if	O
(	O
seg	pointer
->	O
count	int
==	O
0	int
||	O
seg	pointer
->	O
sections	pointer
[	O
0	int
]	O
->	O
lma	long
%	O
minpagesize	long
<	O
sizeof_headers	long
)	O
return	O
FALSE	int
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
seg	pointer
->	O
count	int
;	O
++	O
i	pointer
)	O
{	O
if	O
(	O
(	O
seg	pointer
->	O
sections	pointer
[	O
i	pointer
]	O
->	O
flags	int
&	O
(	O
SEC_CODE	int
|	O
SEC_READONLY	int
)	O
)	O
!=	O
SEC_READONLY	int
)	O
return	O
FALSE	int
;	O
}	O
return	O
TRUE	int
;	O
}	O
bfd_boolean	int
nacl_modify_segment_map	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
struct	O
bfd_link_info	struct
*	O
info	pointer
)	O
{	O
const	O
struct	O
elf_backend_data	struct
*	O
const	O
bed	pointer
=	O
get_elf_backend_data	O
(	O
abfd	pointer
)	O
;	O
struct	O
elf_segment_map	struct
*	O
*	O
m	pointer
=	O
&	O
elf_seg_map	O
(	O
abfd	pointer
)	O
;	O
struct	O
elf_segment_map	struct
*	O
*	O
first_load	pointer
=	O
NULL	O
;	O
struct	O
elf_segment_map	struct
*	O
*	O
headers	pointer
=	O
NULL	O
;	O
int	O
sizeof_headers	long
;	O
if	O
(	O
info	pointer
!=	O
NULL	O
&&	O
info	pointer
->	O
user_phdrs	int
)	O
return	O
TRUE	int
;	O
if	O
(	O
info	pointer
!=	O
NULL	O
)	O
sizeof_headers	long
=	O
bfd_sizeof_headers	O
(	O
abfd	pointer
,	O
info	pointer
)	O
;	O
else	O
{	O
struct	O
elf_segment_map	struct
*	O
seg	pointer
;	O
sizeof_headers	long
=	O
bed	pointer
->	O
s	pointer
->	O
sizeof_ehdr	char
;	O
for	O
(	O
seg	pointer
=	O
*	O
m	pointer
;	O
seg	pointer
!=	O
NULL	O
;	O
seg	pointer
=	O
seg	pointer
->	O
next	pointer
)	O
sizeof_headers	long
+=	O
bed	pointer
->	O
s	pointer
->	O
sizeof_phdr	char
;	O
}	O
while	O
(	O
*	O
m	pointer
!=	O
NULL	O
)	O
{	O
struct	O
elf_segment_map	struct
*	O
seg	pointer
=	O
*	O
m	pointer
;	O
if	O
(	O
seg	pointer
->	O
p_type	array
==	O
PT_LOAD	int
)	O
{	O
bfd_boolean	int
executable	int
=	O
segment_executable	function
(	O
seg	pointer
)	O
;	O
if	O
(	O
executable	int
&&	O
seg	pointer
->	O
count	int
>	O
0	int
&&	O
seg	pointer
->	O
sections	pointer
[	O
0	int
]	O
->	O
vma	long
%	O
bed	pointer
->	O
minpagesize	long
==	O
0	int
)	O
{	O
asection	struct
*	O
lastsec	pointer
=	O
seg	pointer
->	O
sections	pointer
[	O
seg	pointer
->	O
count	int
-	O
1	int
]	O
;	O
bfd_vma	long
end	pointer
=	O
lastsec	pointer
->	O
vma	long
+	O
lastsec	pointer
->	O
size	long
;	O
if	O
(	O
end	pointer
%	O
bed	pointer
->	O
minpagesize	long
!=	O
0	int
)	O
{	O
struct	O
elf_segment_map	struct
*	O
newseg	pointer
;	O
asection	struct
*	O
sec	pointer
;	O
struct	O
bfd_elf_section_data	struct
*	O
secdata	pointer
;	O
BFD_ASSERT	O
(	O
!	O
seg	pointer
->	O
p_size_valid	int
)	O
;	O
secdata	pointer
=	O
bfd_zalloc	function
(	O
abfd	pointer
,	O
sizeof	O
*	O
secdata	pointer
)	O
;	O
if	O
(	O
secdata	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
sec	pointer
=	O
bfd_zalloc	function
(	O
abfd	pointer
,	O
sizeof	O
*	O
sec	pointer
)	O
;	O
if	O
(	O
sec	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
sec	pointer
->	O
vma	long
=	O
end	pointer
;	O
sec	pointer
->	O
lma	long
=	O
lastsec	pointer
->	O
lma	long
+	O
lastsec	pointer
->	O
size	long
;	O
sec	pointer
->	O
size	long
=	O
bed	pointer
->	O
minpagesize	long
-	O
(	O
end	pointer
%	O
bed	pointer
->	O
minpagesize	long
)	O
;	O
sec	pointer
->	O
flags	int
=	O
(	O
SEC_ALLOC	int
|	O
SEC_LOAD	int
|	O
SEC_READONLY	int
|	O
SEC_CODE	int
|	O
SEC_LINKER_CREATED	int
)	O
;	O
sec	pointer
->	O
used_by_bfd	pointer
=	O
secdata	pointer
;	O
secdata	pointer
->	O
this_hdr	struct
.	O
sh_type	array
=	O
SHT_PROGBITS	int
;	O
secdata	pointer
->	O
this_hdr	struct
.	O
sh_flags	array
=	O
SHF_ALLOC	O
|	O
SHF_EXECINSTR	O
;	O
secdata	pointer
->	O
this_hdr	struct
.	O
sh_addr	array
=	O
sec	pointer
->	O
vma	long
;	O
secdata	pointer
->	O
this_hdr	struct
.	O
sh_size	array
=	O
sec	pointer
->	O
size	long
;	O
newseg	pointer
=	O
bfd_alloc	function
(	O
abfd	pointer
,	O
sizeof	O
*	O
newseg	pointer
+	O
(	O
(	O
seg	pointer
->	O
count	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
asection	struct
*	O
)	O
)	O
)	O
;	O
if	O
(	O
newseg	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
memcpy	function
(	O
newseg	pointer
,	O
seg	pointer
,	O
sizeof	O
*	O
newseg	pointer
+	O
(	O
seg	pointer
->	O
count	int
*	O
sizeof	O
(	O
asection	struct
*	O
)	O
)	O
)	O
;	O
newseg	pointer
->	O
sections	pointer
[	O
newseg	pointer
->	O
count	int
++	O
]	O
=	O
sec	pointer
;	O
*	O
m	pointer
=	O
seg	pointer
=	O
newseg	pointer
;	O
}	O
}	O
if	O
(	O
first_load	pointer
==	O
NULL	O
)	O
first_load	pointer
=	O
m	pointer
;	O
else	O
if	O
(	O
headers	pointer
==	O
NULL	O
&&	O
segment_eligible_for_headers	function
(	O
seg	pointer
,	O
bed	pointer
->	O
minpagesize	long
,	O
sizeof_headers	long
)	O
)	O
headers	pointer
=	O
m	pointer
;	O
}	O
m	pointer
=	O
&	O
seg	pointer
->	O
next	pointer
;	O
}	O
if	O
(	O
headers	pointer
!=	O
NULL	O
)	O
{	O
struct	O
elf_segment_map	struct
*	O
*	O
last_load	pointer
=	O
NULL	O
;	O
struct	O
elf_segment_map	struct
*	O
seg	pointer
;	O
m	pointer
=	O
first_load	pointer
;	O
while	O
(	O
(	O
seg	pointer
=	O
*	O
m	pointer
)	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
seg	pointer
->	O
p_type	array
==	O
PT_LOAD	int
)	O
{	O
seg	pointer
->	O
includes_filehdr	int
=	O
0	int
;	O
seg	pointer
->	O
includes_phdrs	int
=	O
0	int
;	O
seg	pointer
->	O
no_sort_lma	int
=	O
1	int
;	O
if	O
(	O
seg	pointer
->	O
count	int
==	O
0	int
)	O
{	O
if	O
(	O
headers	pointer
==	O
&	O
seg	pointer
->	O
next	pointer
)	O
headers	pointer
=	O
m	pointer
;	O
*	O
m	pointer
=	O
seg	pointer
->	O
next	pointer
;	O
continue	O
;	O
}	O
last_load	pointer
=	O
m	pointer
;	O
}	O
m	pointer
=	O
&	O
seg	pointer
->	O
next	pointer
;	O
}	O
seg	pointer
=	O
*	O
headers	pointer
;	O
seg	pointer
->	O
includes_filehdr	int
=	O
1	int
;	O
seg	pointer
->	O
includes_phdrs	int
=	O
1	int
;	O
if	O
(	O
last_load	pointer
!=	O
NULL	O
&&	O
first_load	pointer
!=	O
last_load	pointer
&&	O
first_load	pointer
!=	O
headers	pointer
)	O
{	O
struct	O
elf_segment_map	struct
*	O
first	pointer
=	O
*	O
first_load	pointer
;	O
struct	O
elf_segment_map	struct
*	O
last	pointer
=	O
*	O
last_load	pointer
;	O
*	O
first_load	pointer
=	O
first	pointer
->	O
next	pointer
;	O
first	pointer
->	O
next	pointer
=	O
last	pointer
->	O
next	pointer
;	O
last	pointer
->	O
next	pointer
=	O
first	pointer
;	O
}	O
}	O
return	O
TRUE	int
;	O
}	O
bfd_boolean	int
nacl_modify_headers	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
struct	O
bfd_link_info	struct
*	O
info	pointer
)	O
{	O
if	O
(	O
info	pointer
!=	O
NULL	O
&&	O
info	pointer
->	O
user_phdrs	int
)	O
;	O
else	O
{	O
struct	O
elf_segment_map	struct
*	O
*	O
m	pointer
=	O
&	O
elf_seg_map	O
(	O
abfd	pointer
)	O
;	O
Elf_Internal_Phdr	struct
*	O
phdr	pointer
=	O
elf_tdata	O
(	O
abfd	pointer
)	O
->	O
phdr	pointer
;	O
Elf_Internal_Phdr	struct
*	O
p	pointer
=	O
phdr	pointer
;	O
while	O
(	O
*	O
m	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
(	O
*	O
m	pointer
)	O
->	O
p_type	array
==	O
PT_LOAD	int
&&	O
(	O
*	O
m	pointer
)	O
->	O
includes_filehdr	int
)	O
break	O
;	O
m	pointer
=	O
&	O
(	O
*	O
m	pointer
)	O
->	O
next	pointer
;	O
++	O
p	pointer
;	O
}	O
if	O
(	O
*	O
m	pointer
!=	O
NULL	O
)	O
{	O
struct	O
elf_segment_map	struct
*	O
*	O
first_load_seg	pointer
=	O
m	pointer
;	O
Elf_Internal_Phdr	struct
*	O
first_load_phdr	pointer
=	O
p	pointer
;	O
struct	O
elf_segment_map	struct
*	O
*	O
next_load_seg	pointer
=	O
NULL	O
;	O
Elf_Internal_Phdr	struct
*	O
next_load_phdr	pointer
=	O
NULL	O
;	O
m	pointer
=	O
&	O
(	O
*	O
m	pointer
)	O
->	O
next	pointer
;	O
++	O
p	pointer
;	O
while	O
(	O
*	O
m	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
p	pointer
->	O
p_type	array
==	O
PT_LOAD	int
&&	O
p	pointer
->	O
p_vaddr	array
<	O
first_load_phdr	pointer
->	O
p_vaddr	array
)	O
{	O
next_load_seg	pointer
=	O
m	pointer
;	O
next_load_phdr	pointer
=	O
p	pointer
;	O
break	O
;	O
}	O
m	pointer
=	O
&	O
(	O
*	O
m	pointer
)	O
->	O
next	pointer
;	O
++	O
p	pointer
;	O
}	O
if	O
(	O
next_load_seg	pointer
!=	O
NULL	O
)	O
{	O
Elf_Internal_Phdr	struct
move_phdr	struct
;	O
struct	O
elf_segment_map	struct
*	O
first_seg	pointer
=	O
*	O
first_load_seg	pointer
;	O
struct	O
elf_segment_map	struct
*	O
next_seg	pointer
=	O
*	O
next_load_seg	pointer
;	O
struct	O
elf_segment_map	struct
*	O
first_next	pointer
=	O
first_seg	pointer
->	O
next	pointer
;	O
struct	O
elf_segment_map	struct
*	O
next_next	pointer
=	O
next_seg	pointer
->	O
next	pointer
;	O
if	O
(	O
next_load_seg	pointer
==	O
&	O
first_seg	pointer
->	O
next	pointer
)	O
{	O
*	O
first_load_seg	pointer
=	O
next_seg	pointer
;	O
next_seg	pointer
->	O
next	pointer
=	O
first_seg	pointer
;	O
first_seg	pointer
->	O
next	pointer
=	O
next_next	pointer
;	O
}	O
else	O
{	O
*	O
first_load_seg	pointer
=	O
first_next	pointer
;	O
*	O
next_load_seg	pointer
=	O
next_next	pointer
;	O
first_seg	pointer
->	O
next	pointer
=	O
*	O
next_load_seg	pointer
;	O
*	O
next_load_seg	pointer
=	O
first_seg	pointer
;	O
next_seg	pointer
->	O
next	pointer
=	O
*	O
first_load_seg	pointer
;	O
*	O
first_load_seg	pointer
=	O
next_seg	pointer
;	O
}	O
move_phdr	struct
=	O
*	O
next_load_phdr	pointer
;	O
memmove	function
(	O
first_load_phdr	pointer
+	O
1	int
,	O
first_load_phdr	pointer
,	O
(	O
next_load_phdr	pointer
-	O
first_load_phdr	pointer
)	O
*	O
sizeof	O
move_phdr	struct
)	O
;	O
*	O
first_load_phdr	pointer
=	O
move_phdr	struct
;	O
}	O
}	O
}	O
return	O
_bfd_elf_modify_headers	function
(	O
abfd	pointer
,	O
info	pointer
)	O
;	O
}	O
bfd_boolean	int
nacl_final_write_processing	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
struct	O
elf_segment_map	struct
*	O
seg	pointer
;	O
for	O
(	O
seg	pointer
=	O
elf_seg_map	O
(	O
abfd	pointer
)	O
;	O
seg	pointer
!=	O
NULL	O
;	O
seg	pointer
=	O
seg	pointer
->	O
next	pointer
)	O
if	O
(	O
seg	pointer
->	O
p_type	array
==	O
PT_LOAD	int
&&	O
seg	pointer
->	O
count	int
>	O
1	int
&&	O
seg	pointer
->	O
sections	pointer
[	O
seg	pointer
->	O
count	int
-	O
1	int
]	O
->	O
owner	pointer
==	O
NULL	O
)	O
{	O
asection	struct
*	O
sec	pointer
=	O
seg	pointer
->	O
sections	pointer
[	O
seg	pointer
->	O
count	int
-	O
1	int
]	O
;	O
char	O
*	O
fill	pointer
;	O
BFD_ASSERT	O
(	O
sec	pointer
->	O
flags	int
&	O
SEC_LINKER_CREATED	int
)	O
;	O
BFD_ASSERT	O
(	O
sec	pointer
->	O
flags	int
&	O
SEC_CODE	int
)	O
;	O
BFD_ASSERT	O
(	O
sec	pointer
->	O
size	long
>	O
0	int
)	O
;	O
fill	pointer
=	O
abfd	pointer
->	O
arch_info	pointer
->	O
fill	pointer
(	O
sec	pointer
->	O
size	long
,	O
bfd_big_endian	function
(	O
abfd	pointer
)	O
,	O
TRUE	int
)	O
;	O
if	O
(	O
fill	pointer
==	O
NULL	O
||	O
bfd_seek	function
(	O
abfd	pointer
,	O
sec	pointer
->	O
filepos	long
,	O
SEEK_SET	int
)	O
!=	O
0	int
||	O
bfd_bwrite	function
(	O
fill	pointer
,	O
sec	pointer
->	O
size	long
,	O
abfd	pointer
)	O
!=	O
sec	pointer
->	O
size	long
)	O
{	O
elf_elfheader	O
(	O
abfd	pointer
)	O
->	O
e_shoff	array
=	O
(	O
file_ptr	long
)	O
-	O
1	int
;	O
}	O
free	function
(	O
fill	pointer
)	O
;	O
}	O
return	O
_bfd_elf_final_write_processing	function
(	O
abfd	pointer
)	O
;	O
}	O
