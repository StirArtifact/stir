struct	O
moler_vanloan_optimal_suggestion	struct
{	O
int	O
k	long
;	O
int	O
j	long
;	O
}	O
;	O
typedef	O
struct	O
moler_vanloan_optimal_suggestion	struct
mvl_suggestion_t	struct
;	O
static	O
mvl_suggestion_t	struct
mvl_tab	array
[	O
3	int
]	O
[	O
6	int
]	O
=	O
{	O
{	O
{	O
5	int
,	O
1	int
}	O
,	O
{	O
5	int
,	O
4	int
}	O
,	O
{	O
7	int
,	O
5	int
}	O
,	O
{	O
9	int
,	O
7	int
}	O
,	O
{	O
10	int
,	O
10	int
}	O
,	O
{	O
8	int
,	O
14	int
}	O
}	O
,	O
{	O
{	O
2	int
,	O
1	int
}	O
,	O
{	O
4	int
,	O
0	int
}	O
,	O
{	O
7	int
,	O
1	int
}	O
,	O
{	O
6	int
,	O
5	int
}	O
,	O
{	O
5	int
,	O
9	int
}	O
,	O
{	O
7	int
,	O
11	int
}	O
}	O
,	O
{	O
{	O
1	int
,	O
0	int
}	O
,	O
{	O
3	int
,	O
0	int
}	O
,	O
{	O
5	int
,	O
1	int
}	O
,	O
{	O
4	int
,	O
5	int
}	O
,	O
{	O
4	int
,	O
8	int
}	O
,	O
{	O
2	int
,	O
11	int
}	O
}	O
}	O
;	O
inline	O
static	O
double	O
sup_norm	function
(	O
const	O
gsl_matrix	struct
*	O
A	pointer
)	O
{	O
double	O
min	double
,	O
max	double
;	O
gsl_matrix_minmax	function
(	O
A	pointer
,	O
&	O
min	double
,	O
&	O
max	double
)	O
;	O
return	O
GSL_MAX_DBL	function
(	O
fabs	function
(	O
min	double
)	O
,	O
fabs	function
(	O
max	double
)	O
)	O
;	O
}	O
static	O
mvl_suggestion_t	struct
obtain_suggestion	function
(	O
const	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_mode_t	int
mode	int
)	O
{	O
const	O
unsigned	O
int	O
mode_prec	int
=	O
GSL_MODE_PREC	function
(	O
mode	int
)	O
;	O
const	O
double	O
norm_A	double
=	O
sup_norm	function
(	O
A	pointer
)	O
;	O
if	O
(	O
norm_A	double
<	O
0.01	int
)	O
return	O
mvl_tab	array
[	O
mode_prec	int
]	O
[	O
0	int
]	O
;	O
else	O
if	O
(	O
norm_A	double
<	O
0.1	int
)	O
return	O
mvl_tab	array
[	O
mode_prec	int
]	O
[	O
1	int
]	O
;	O
else	O
if	O
(	O
norm_A	double
<	O
1.0	int
)	O
return	O
mvl_tab	array
[	O
mode_prec	int
]	O
[	O
2	int
]	O
;	O
else	O
if	O
(	O
norm_A	double
<	O
10.0	int
)	O
return	O
mvl_tab	array
[	O
mode_prec	int
]	O
[	O
3	int
]	O
;	O
else	O
if	O
(	O
norm_A	double
<	O
100.0	int
)	O
return	O
mvl_tab	array
[	O
mode_prec	int
]	O
[	O
4	int
]	O
;	O
else	O
if	O
(	O
norm_A	double
<	O
1000.0	int
)	O
return	O
mvl_tab	array
[	O
mode_prec	int
]	O
[	O
5	int
]	O
;	O
else	O
{	O
const	O
double	O
extra	double
=	O
log	function
(	O
1.01	int
*	O
norm_A	double
/	O
1000.0	int
)	O
/	O
M_LN2	int
;	O
const	O
int	O
extra_i	int
=	O
(	O
unsigned	O
int	O
)	O
ceil	function
(	O
extra	double
)	O
;	O
mvl_suggestion_t	struct
s	pointer
=	O
mvl_tab	array
[	O
mode	int
]	O
[	O
5	int
]	O
;	O
s	pointer
.	O
j	long
+=	O
extra_i	int
;	O
return	O
s	pointer
;	O
}	O
}	O
static	O
void	O
matrix_exp_series	function
(	O
const	O
gsl_matrix	struct
*	O
B	pointer
,	O
gsl_matrix	struct
*	O
eB	pointer
,	O
int	O
number_of_terms	int
)	O
{	O
int	O
count	int
;	O
gsl_matrix	struct
*	O
temp	pointer
=	O
gsl_matrix_calloc	function
(	O
B	pointer
->	O
size1	long
,	O
B	pointer
->	O
size2	long
)	O
;	O
gsl_matrix_memcpy	function
(	O
eB	pointer
,	O
B	pointer
)	O
;	O
gsl_matrix_scale	function
(	O
eB	pointer
,	O
1.0	int
/	O
number_of_terms	int
)	O
;	O
gsl_matrix_add_diagonal	function
(	O
eB	pointer
,	O
1.0	int
)	O
;	O
for	O
(	O
count	int
=	O
number_of_terms	int
-	O
1	int
;	O
count	int
>=	O
1	int
;	O
--	O
count	int
)	O
{	O
gsl_blas_dgemm	function
(	O
CblasNoTrans	int
,	O
CblasNoTrans	int
,	O
1.0	int
,	O
B	pointer
,	O
eB	pointer
,	O
0.0	int
,	O
temp	pointer
)	O
;	O
gsl_matrix_scale	function
(	O
temp	pointer
,	O
1.0	int
/	O
count	int
)	O
;	O
gsl_matrix_add_diagonal	function
(	O
temp	pointer
,	O
1.0	int
)	O
;	O
gsl_matrix_memcpy	function
(	O
eB	pointer
,	O
temp	pointer
)	O
;	O
}	O
gsl_matrix_free	function
(	O
temp	pointer
)	O
;	O
}	O
int	O
gsl_linalg_exponential_ss	function
(	O
const	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_matrix	struct
*	O
eA	pointer
,	O
gsl_mode_t	int
mode	int
)	O
{	O
if	O
(	O
A	pointer
->	O
size1	long
!=	O
A	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"cannot exponentiate a non-square matrix"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
A	pointer
->	O
size1	long
!=	O
eA	pointer
->	O
size1	long
||	O
A	pointer
->	O
size2	long
!=	O
eA	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"exponential of matrix must have same dimension as matrix"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
i	long
;	O
const	O
mvl_suggestion_t	struct
sugg	struct
=	O
obtain_suggestion	function
(	O
A	pointer
,	O
mode	int
)	O
;	O
const	O
double	O
divisor	double
=	O
exp	function
(	O
M_LN2	int
*	O
sugg	struct
.	O
j	long
)	O
;	O
gsl_matrix	struct
*	O
reduced_A	pointer
=	O
gsl_matrix_alloc	function
(	O
A	pointer
->	O
size1	long
,	O
A	pointer
->	O
size2	long
)	O
;	O
gsl_matrix_memcpy	function
(	O
reduced_A	pointer
,	O
A	pointer
)	O
;	O
gsl_matrix_scale	function
(	O
reduced_A	pointer
,	O
1.0	int
/	O
divisor	double
)	O
;	O
matrix_exp_series	function
(	O
reduced_A	pointer
,	O
eA	pointer
,	O
sugg	struct
.	O
k	long
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
sugg	struct
.	O
j	long
;	O
++	O
i	long
)	O
{	O
gsl_blas_dgemm	function
(	O
CblasNoTrans	int
,	O
CblasNoTrans	int
,	O
1.0	int
,	O
eA	pointer
,	O
eA	pointer
,	O
0.0	int
,	O
reduced_A	pointer
)	O
;	O
gsl_matrix_memcpy	function
(	O
eA	pointer
,	O
reduced_A	pointer
)	O
;	O
}	O
gsl_matrix_free	function
(	O
reduced_A	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
