void	O
osip_response_get_destination	function
(	O
osip_message_t	struct
*	O
response	pointer
,	O
char	O
*	O
*	O
address	pointer
,	O
int	O
*	O
portnum	pointer
)	O
{	O
osip_via_t	struct
*	O
via	pointer
;	O
char	O
*	O
host	pointer
=	O
NULL	O
;	O
int	O
port	pointer
=	O
0	int
;	O
via	pointer
=	O
(	O
osip_via_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
response	pointer
->	O
vias	struct
,	O
0	int
)	O
;	O
if	O
(	O
via	pointer
)	O
{	O
osip_generic_param_t	struct
*	O
maddr	pointer
;	O
osip_generic_param_t	struct
*	O
received	pointer
;	O
osip_generic_param_t	struct
*	O
rport	pointer
;	O
osip_via_param_get_byname	O
(	O
via	pointer
,	O
"maddr"	pointer
,	O
&	O
maddr	pointer
)	O
;	O
osip_via_param_get_byname	O
(	O
via	pointer
,	O
"received"	pointer
,	O
&	O
received	pointer
)	O
;	O
osip_via_param_get_byname	O
(	O
via	pointer
,	O
"rport"	pointer
,	O
&	O
rport	pointer
)	O
;	O
if	O
(	O
maddr	pointer
!=	O
NULL	O
)	O
host	pointer
=	O
maddr	pointer
->	O
gvalue	pointer
;	O
else	O
if	O
(	O
received	pointer
!=	O
NULL	O
)	O
host	pointer
=	O
received	pointer
->	O
gvalue	pointer
;	O
else	O
host	pointer
=	O
via	pointer
->	O
host	pointer
;	O
if	O
(	O
rport	pointer
==	O
NULL	O
||	O
rport	pointer
->	O
gvalue	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
via	pointer
->	O
port	pointer
!=	O
NULL	O
)	O
port	pointer
=	O
osip_atoi	function
(	O
via	pointer
->	O
port	pointer
)	O
;	O
else	O
port	pointer
=	O
5060	int
;	O
}	O
else	O
port	pointer
=	O
osip_atoi	function
(	O
rport	pointer
->	O
gvalue	pointer
)	O
;	O
}	O
*	O
portnum	pointer
=	O
port	pointer
;	O
if	O
(	O
host	pointer
!=	O
NULL	O
)	O
*	O
address	pointer
=	O
osip_strdup	function
(	O
host	pointer
)	O
;	O
else	O
*	O
address	pointer
=	O
NULL	O
;	O
}	O
static	O
int	O
osip_ixt_lock	function
(	O
osip_t	struct
*	O
osip	struct
)	O
{	O
return	O
osip_mutex_lock	function
(	O
osip	struct
->	O
ixt_fastmutex	pointer
)	O
;	O
}	O
static	O
int	O
osip_ixt_unlock	function
(	O
osip_t	struct
*	O
osip	struct
)	O
{	O
return	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
ixt_fastmutex	pointer
)	O
;	O
}	O
int	O
osip_id_mutex_lock	function
(	O
osip_t	struct
*	O
osip	struct
)	O
;	O
int	O
osip_id_mutex_unlock	function
(	O
osip_t	struct
*	O
osip	struct
)	O
;	O
int	O
osip_id_mutex_lock	function
(	O
osip_t	struct
*	O
osip	struct
)	O
{	O
return	O
osip_mutex_lock	function
(	O
osip	struct
->	O
id_mutex	pointer
)	O
;	O
}	O
int	O
osip_id_mutex_unlock	function
(	O
osip_t	struct
*	O
osip	struct
)	O
{	O
return	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
id_mutex	pointer
)	O
;	O
}	O
static	O
void	O
osip_add_ixt	function
(	O
osip_t	struct
*	O
osip	struct
,	O
ixt_t	struct
*	O
ixt	struct
)	O
{	O
osip_ixt_lock	function
(	O
osip	struct
)	O
;	O
osip_list_add	function
(	O
&	O
osip	struct
->	O
ixt_retransmissions	struct
,	O
(	O
void	O
*	O
)	O
ixt	struct
,	O
0	int
)	O
;	O
osip_ixt_unlock	function
(	O
osip	struct
)	O
;	O
}	O
static	O
int	O
ixt_init	function
(	O
ixt_t	struct
*	O
*	O
ixt	struct
)	O
{	O
ixt_t	struct
*	O
pixt	pointer
;	O
*	O
ixt	struct
=	O
pixt	pointer
=	O
(	O
ixt_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
ixt_t	struct
)	O
)	O
;	O
if	O
(	O
pixt	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
pixt	pointer
->	O
dialog	pointer
=	O
NULL	O
;	O
pixt	pointer
->	O
msg2xx	pointer
=	O
NULL	O
;	O
pixt	pointer
->	O
ack	pointer
=	O
NULL	O
;	O
pixt	pointer
->	O
interval	int
=	O
DEFAULT_T1	int
;	O
osip_gettimeofday	function
(	O
&	O
pixt	pointer
->	O
start	struct
,	O
NULL	O
)	O
;	O
add_gettimeofday	function
(	O
&	O
pixt	pointer
->	O
start	struct
,	O
pixt	pointer
->	O
interval	int
+	O
10	int
)	O
;	O
pixt	pointer
->	O
counter	int
=	O
10	int
;	O
pixt	pointer
->	O
dest	pointer
=	O
NULL	O
;	O
pixt	pointer
->	O
port	pointer
=	O
5060	int
;	O
pixt	pointer
->	O
sock	int
=	O
-	O
1	int
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
static	O
void	O
ixt_free	function
(	O
ixt_t	struct
*	O
ixt	struct
)	O
{	O
osip_message_free	function
(	O
ixt	struct
->	O
ack	pointer
)	O
;	O
osip_message_free	function
(	O
ixt	struct
->	O
msg2xx	pointer
)	O
;	O
osip_free	O
(	O
ixt	struct
->	O
dest	pointer
)	O
;	O
osip_free	O
(	O
ixt	struct
)	O
;	O
}	O
void	O
osip_start_200ok_retransmissions	function
(	O
osip_t	struct
*	O
osip	struct
,	O
osip_dialog_t	struct
*	O
dialog	pointer
,	O
osip_message_t	struct
*	O
msg200ok	pointer
,	O
int	O
sock	int
)	O
{	O
int	O
i	int
;	O
ixt_t	struct
*	O
ixt	struct
;	O
i	int
=	O
ixt_init	function
(	O
&	O
ixt	struct
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
;	O
ixt	struct
->	O
dialog	pointer
=	O
dialog	pointer
;	O
osip_message_clone	function
(	O
msg200ok	pointer
,	O
&	O
ixt	struct
->	O
msg2xx	pointer
)	O
;	O
ixt	struct
->	O
sock	int
=	O
sock	int
;	O
osip_response_get_destination	function
(	O
msg200ok	pointer
,	O
&	O
ixt	struct
->	O
dest	pointer
,	O
&	O
ixt	struct
->	O
port	pointer
)	O
;	O
osip_add_ixt	function
(	O
osip	struct
,	O
ixt	struct
)	O
;	O
}	O
void	O
osip_start_ack_retransmissions	function
(	O
osip_t	struct
*	O
osip	struct
,	O
osip_dialog_t	struct
*	O
dialog	pointer
,	O
osip_message_t	struct
*	O
ack	pointer
,	O
char	O
*	O
dest	pointer
,	O
int	O
port	pointer
,	O
int	O
sock	int
)	O
{	O
int	O
i	int
;	O
ixt_t	struct
*	O
ixt	struct
;	O
i	int
=	O
ixt_init	function
(	O
&	O
ixt	struct
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
;	O
ixt	struct
->	O
dialog	pointer
=	O
dialog	pointer
;	O
osip_message_clone	function
(	O
ack	pointer
,	O
&	O
ixt	struct
->	O
ack	pointer
)	O
;	O
ixt	struct
->	O
dest	pointer
=	O
osip_strdup	function
(	O
dest	pointer
)	O
;	O
ixt	struct
->	O
port	pointer
=	O
port	pointer
;	O
ixt	struct
->	O
sock	int
=	O
sock	int
;	O
osip_add_ixt	function
(	O
osip	struct
,	O
ixt	struct
)	O
;	O
}	O
struct	O
osip_dialog	struct
*	O
osip_stop_200ok_retransmissions	function
(	O
osip_t	struct
*	O
osip	struct
,	O
osip_message_t	struct
*	O
ack	pointer
)	O
{	O
osip_dialog_t	struct
*	O
dialog	pointer
=	O
NULL	O
;	O
int	O
i	int
;	O
ixt_t	struct
*	O
ixt	struct
;	O
if	O
(	O
ack	pointer
==	O
NULL	O
||	O
ack	pointer
->	O
cseq	pointer
==	O
NULL	O
||	O
ack	pointer
->	O
cseq	pointer
->	O
number	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
osip_ixt_lock	function
(	O
osip	struct
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
!	O
osip_list_eol	function
(	O
&	O
osip	struct
->	O
ixt_retransmissions	struct
,	O
i	int
)	O
;	O
i	int
++	O
)	O
{	O
ixt	struct
=	O
(	O
ixt_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
osip	struct
->	O
ixt_retransmissions	struct
,	O
i	int
)	O
;	O
if	O
(	O
ixt	struct
->	O
msg2xx	pointer
==	O
NULL	O
||	O
ixt	struct
->	O
msg2xx	pointer
->	O
cseq	pointer
==	O
NULL	O
||	O
ixt	struct
->	O
msg2xx	pointer
->	O
cseq	pointer
->	O
number	pointer
==	O
NULL	O
)	O
continue	O
;	O
if	O
(	O
osip_dialog_match_as_uas	function
(	O
ixt	struct
->	O
dialog	pointer
,	O
ack	pointer
)	O
==	O
0	int
&&	O
strcmp	function
(	O
ixt	struct
->	O
msg2xx	pointer
->	O
cseq	pointer
->	O
number	pointer
,	O
ack	pointer
->	O
cseq	pointer
->	O
number	pointer
)	O
==	O
0	int
)	O
{	O
osip_list_remove	function
(	O
&	O
osip	struct
->	O
ixt_retransmissions	struct
,	O
i	int
)	O
;	O
dialog	pointer
=	O
ixt	struct
->	O
dialog	pointer
;	O
ixt_free	function
(	O
ixt	struct
)	O
;	O
break	O
;	O
}	O
}	O
osip_ixt_unlock	function
(	O
osip	struct
)	O
;	O
return	O
dialog	pointer
;	O
}	O
void	O
osip_stop_retransmissions_from_dialog	function
(	O
osip_t	struct
*	O
osip	struct
,	O
osip_dialog_t	struct
*	O
dialog	pointer
)	O
{	O
int	O
i	int
;	O
ixt_t	struct
*	O
ixt	struct
;	O
osip_ixt_lock	function
(	O
osip	struct
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
!	O
osip_list_eol	function
(	O
&	O
osip	struct
->	O
ixt_retransmissions	struct
,	O
i	int
)	O
;	O
i	int
++	O
)	O
{	O
ixt	struct
=	O
(	O
ixt_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
osip	struct
->	O
ixt_retransmissions	struct
,	O
i	int
)	O
;	O
if	O
(	O
ixt	struct
->	O
dialog	pointer
==	O
dialog	pointer
)	O
{	O
osip_list_remove	function
(	O
&	O
osip	struct
->	O
ixt_retransmissions	struct
,	O
i	int
)	O
;	O
ixt_free	function
(	O
ixt	struct
)	O
;	O
i	int
--	O
;	O
}	O
}	O
osip_ixt_unlock	function
(	O
osip	struct
)	O
;	O
}	O
static	O
void	O
ixt_retransmit	function
(	O
osip_t	struct
*	O
osip	struct
,	O
ixt_t	struct
*	O
ixt	struct
,	O
struct	O
timeval	struct
*	O
current	pointer
)	O
{	O
if	O
(	O
osip_timercmp	O
(	O
current	pointer
,	O
&	O
ixt	struct
->	O
start	struct
,	O
>	O
)	O
)	O
{	O
ixt	struct
->	O
interval	int
=	O
ixt	struct
->	O
interval	int
*	O
2	int
;	O
if	O
(	O
ixt	struct
->	O
interval	int
>	O
DEFAULT_T2	int
)	O
ixt	struct
->	O
interval	int
=	O
DEFAULT_T2	int
;	O
add_gettimeofday	function
(	O
&	O
ixt	struct
->	O
start	struct
,	O
ixt	struct
->	O
interval	int
)	O
;	O
if	O
(	O
ixt	struct
->	O
ack	pointer
!=	O
NULL	O
)	O
osip	struct
->	O
cb_send_message	pointer
(	O
NULL	O
,	O
ixt	struct
->	O
ack	pointer
,	O
ixt	struct
->	O
dest	pointer
,	O
ixt	struct
->	O
port	pointer
,	O
ixt	struct
->	O
sock	int
)	O
;	O
else	O
if	O
(	O
ixt	struct
->	O
msg2xx	pointer
!=	O
NULL	O
)	O
osip	struct
->	O
cb_send_message	pointer
(	O
NULL	O
,	O
ixt	struct
->	O
msg2xx	pointer
,	O
ixt	struct
->	O
dest	pointer
,	O
ixt	struct
->	O
port	pointer
,	O
ixt	struct
->	O
sock	int
)	O
;	O
ixt	struct
->	O
counter	int
--	O
;	O
}	O
}	O
void	O
osip_retransmissions_execute	function
(	O
osip_t	struct
*	O
osip	struct
)	O
{	O
int	O
i	int
;	O
ixt_t	struct
*	O
ixt	struct
;	O
struct	O
timeval	struct
current	pointer
;	O
osip_gettimeofday	function
(	O
&	O
current	pointer
,	O
NULL	O
)	O
;	O
osip_ixt_lock	function
(	O
osip	struct
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
!	O
osip_list_eol	function
(	O
&	O
osip	struct
->	O
ixt_retransmissions	struct
,	O
i	int
)	O
;	O
i	int
++	O
)	O
{	O
ixt	struct
=	O
(	O
ixt_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
osip	struct
->	O
ixt_retransmissions	struct
,	O
i	int
)	O
;	O
ixt_retransmit	function
(	O
osip	struct
,	O
ixt	struct
,	O
&	O
current	pointer
)	O
;	O
if	O
(	O
ixt	struct
->	O
counter	int
==	O
0	int
)	O
{	O
osip_list_remove	function
(	O
&	O
osip	struct
->	O
ixt_retransmissions	struct
,	O
i	int
)	O
;	O
ixt_free	function
(	O
ixt	struct
)	O
;	O
i	int
--	O
;	O
}	O
}	O
osip_ixt_unlock	function
(	O
osip	struct
)	O
;	O
}	O
int	O
osip_ict_lock	function
(	O
osip_t	struct
*	O
osip	struct
)	O
{	O
return	O
osip_mutex_lock	function
(	O
osip	struct
->	O
ict_fastmutex	pointer
)	O
;	O
}	O
int	O
osip_ict_unlock	function
(	O
osip_t	struct
*	O
osip	struct
)	O
{	O
return	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
ict_fastmutex	pointer
)	O
;	O
}	O
int	O
osip_ist_lock	function
(	O
osip_t	struct
*	O
osip	struct
)	O
{	O
return	O
osip_mutex_lock	function
(	O
osip	struct
->	O
ist_fastmutex	pointer
)	O
;	O
}	O
int	O
osip_ist_unlock	function
(	O
osip_t	struct
*	O
osip	struct
)	O
{	O
return	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
ist_fastmutex	pointer
)	O
;	O
}	O
int	O
osip_nict_lock	function
(	O
osip_t	struct
*	O
osip	struct
)	O
{	O
return	O
osip_mutex_lock	function
(	O
osip	struct
->	O
nict_fastmutex	pointer
)	O
;	O
}	O
int	O
osip_nict_unlock	function
(	O
osip_t	struct
*	O
osip	struct
)	O
{	O
return	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
nict_fastmutex	pointer
)	O
;	O
}	O
int	O
osip_nist_lock	function
(	O
osip_t	struct
*	O
osip	struct
)	O
{	O
return	O
osip_mutex_lock	function
(	O
osip	struct
->	O
nist_fastmutex	pointer
)	O
;	O
}	O
int	O
osip_nist_unlock	function
(	O
osip_t	struct
*	O
osip	struct
)	O
{	O
return	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
nist_fastmutex	pointer
)	O
;	O
}	O
int	O
__osip_add_ict	function
(	O
osip_t	struct
*	O
osip	struct
,	O
osip_transaction_t	struct
*	O
ict	pointer
)	O
{	O
osip_mutex_lock	function
(	O
osip	struct
->	O
ict_fastmutex	pointer
)	O
;	O
osip_list_add	function
(	O
&	O
osip	struct
->	O
osip_ict_transactions	struct
,	O
ict	pointer
,	O
-	O
1	int
)	O
;	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
ict_fastmutex	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
__osip_add_ist	function
(	O
osip_t	struct
*	O
osip	struct
,	O
osip_transaction_t	struct
*	O
ist	pointer
)	O
{	O
osip_mutex_lock	function
(	O
osip	struct
->	O
ist_fastmutex	pointer
)	O
;	O
osip_list_add	function
(	O
&	O
osip	struct
->	O
osip_ist_transactions	struct
,	O
ist	pointer
,	O
-	O
1	int
)	O
;	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
ist_fastmutex	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
__osip_add_nict	function
(	O
osip_t	struct
*	O
osip	struct
,	O
osip_transaction_t	struct
*	O
nict	pointer
)	O
{	O
osip_mutex_lock	function
(	O
osip	struct
->	O
nict_fastmutex	pointer
)	O
;	O
osip_list_add	function
(	O
&	O
osip	struct
->	O
osip_nict_transactions	struct
,	O
nict	pointer
,	O
-	O
1	int
)	O
;	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
nict_fastmutex	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
__osip_add_nist	function
(	O
osip_t	struct
*	O
osip	struct
,	O
osip_transaction_t	struct
*	O
nist	pointer
)	O
{	O
osip_mutex_lock	function
(	O
osip	struct
->	O
nist_fastmutex	pointer
)	O
;	O
osip_list_add	function
(	O
&	O
osip	struct
->	O
osip_nist_transactions	struct
,	O
nist	pointer
,	O
-	O
1	int
)	O
;	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
nist_fastmutex	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_remove_transaction	function
(	O
osip_t	struct
*	O
osip	struct
,	O
osip_transaction_t	struct
*	O
tr	pointer
)	O
{	O
int	O
i	int
=	O
-	O
1	int
;	O
if	O
(	O
tr	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
tr	pointer
->	O
ctx_type	enum
==	O
ICT	int
)	O
i	int
=	O
__osip_remove_ict_transaction	function
(	O
osip	struct
,	O
tr	pointer
)	O
;	O
else	O
if	O
(	O
tr	pointer
->	O
ctx_type	enum
==	O
IST	int
)	O
i	int
=	O
__osip_remove_ist_transaction	function
(	O
osip	struct
,	O
tr	pointer
)	O
;	O
else	O
if	O
(	O
tr	pointer
->	O
ctx_type	enum
==	O
NICT	int
)	O
i	int
=	O
__osip_remove_nict_transaction	function
(	O
osip	struct
,	O
tr	pointer
)	O
;	O
else	O
if	O
(	O
tr	pointer
->	O
ctx_type	enum
==	O
NIST	int
)	O
i	int
=	O
__osip_remove_nist_transaction	function
(	O
osip	struct
,	O
tr	pointer
)	O
;	O
else	O
return	O
OSIP_BADPARAMETER	O
;	O
return	O
i	int
;	O
}	O
int	O
__osip_remove_ict_transaction	function
(	O
osip_t	struct
*	O
osip	struct
,	O
osip_transaction_t	struct
*	O
ict	pointer
)	O
{	O
osip_list_iterator_t	struct
iterator	struct
;	O
osip_transaction_t	struct
*	O
tmp	pointer
;	O
osip_mutex_lock	function
(	O
osip	struct
->	O
ict_fastmutex	pointer
)	O
;	O
tmp	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_first	function
(	O
&	O
osip	struct
->	O
osip_ict_transactions	struct
,	O
&	O
iterator	struct
)	O
;	O
while	O
(	O
osip_list_iterator_has_elem	O
(	O
iterator	struct
)	O
)	O
{	O
if	O
(	O
tmp	pointer
->	O
transactionid	int
==	O
ict	pointer
->	O
transactionid	int
)	O
{	O
osip_list_iterator_remove	function
(	O
&	O
iterator	struct
)	O
;	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
ict_fastmutex	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
tmp	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
iterator	struct
)	O
;	O
}	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
ict_fastmutex	pointer
)	O
;	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
}	O
int	O
__osip_remove_ist_transaction	function
(	O
osip_t	struct
*	O
osip	struct
,	O
osip_transaction_t	struct
*	O
ist	pointer
)	O
{	O
osip_list_iterator_t	struct
iterator	struct
;	O
osip_transaction_t	struct
*	O
tmp	pointer
;	O
osip_mutex_lock	function
(	O
osip	struct
->	O
ist_fastmutex	pointer
)	O
;	O
tmp	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_first	function
(	O
&	O
osip	struct
->	O
osip_ist_transactions	struct
,	O
&	O
iterator	struct
)	O
;	O
while	O
(	O
osip_list_iterator_has_elem	O
(	O
iterator	struct
)	O
)	O
{	O
if	O
(	O
tmp	pointer
->	O
transactionid	int
==	O
ist	pointer
->	O
transactionid	int
)	O
{	O
osip_list_iterator_remove	function
(	O
&	O
iterator	struct
)	O
;	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
ist_fastmutex	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
tmp	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
iterator	struct
)	O
;	O
}	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
ist_fastmutex	pointer
)	O
;	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
}	O
int	O
__osip_remove_nict_transaction	function
(	O
osip_t	struct
*	O
osip	struct
,	O
osip_transaction_t	struct
*	O
nict	pointer
)	O
{	O
osip_list_iterator_t	struct
iterator	struct
;	O
osip_transaction_t	struct
*	O
tmp	pointer
;	O
osip_mutex_lock	function
(	O
osip	struct
->	O
nict_fastmutex	pointer
)	O
;	O
tmp	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_first	function
(	O
&	O
osip	struct
->	O
osip_nict_transactions	struct
,	O
&	O
iterator	struct
)	O
;	O
while	O
(	O
osip_list_iterator_has_elem	O
(	O
iterator	struct
)	O
)	O
{	O
if	O
(	O
tmp	pointer
->	O
transactionid	int
==	O
nict	pointer
->	O
transactionid	int
)	O
{	O
osip_list_iterator_remove	function
(	O
&	O
iterator	struct
)	O
;	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
nict_fastmutex	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
tmp	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
iterator	struct
)	O
;	O
}	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
nict_fastmutex	pointer
)	O
;	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
}	O
int	O
__osip_remove_nist_transaction	function
(	O
osip_t	struct
*	O
osip	struct
,	O
osip_transaction_t	struct
*	O
nist	pointer
)	O
{	O
osip_list_iterator_t	struct
iterator	struct
;	O
osip_transaction_t	struct
*	O
tmp	pointer
;	O
osip_mutex_lock	function
(	O
osip	struct
->	O
nist_fastmutex	pointer
)	O
;	O
tmp	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_first	function
(	O
&	O
osip	struct
->	O
osip_nist_transactions	struct
,	O
&	O
iterator	struct
)	O
;	O
while	O
(	O
osip_list_iterator_has_elem	O
(	O
iterator	struct
)	O
)	O
{	O
if	O
(	O
tmp	pointer
->	O
transactionid	int
==	O
nist	pointer
->	O
transactionid	int
)	O
{	O
osip_list_iterator_remove	function
(	O
&	O
iterator	struct
)	O
;	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
nist_fastmutex	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
tmp	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
iterator	struct
)	O
;	O
}	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
nist_fastmutex	pointer
)	O
;	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
}	O
int	O
osip_find_transaction_and_add_event	function
(	O
osip_t	struct
*	O
osip	struct
,	O
osip_event_t	struct
*	O
evt	pointer
)	O
{	O
osip_transaction_t	struct
*	O
transaction	pointer
=	O
__osip_find_transaction	function
(	O
osip	struct
,	O
evt	pointer
,	O
1	int
)	O
;	O
if	O
(	O
transaction	pointer
==	O
NULL	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
osip_transaction_t	struct
*	O
__osip_find_transaction	function
(	O
osip_t	struct
*	O
osip	struct
,	O
osip_event_t	struct
*	O
evt	pointer
,	O
int	O
consume	int
)	O
{	O
osip_transaction_t	struct
*	O
transaction	pointer
=	O
NULL	O
;	O
osip_list_t	struct
*	O
transactions	pointer
=	O
NULL	O
;	O
struct	O
osip_mutex	O
*	O
mut	pointer
=	O
NULL	O
;	O
if	O
(	O
evt	pointer
==	O
NULL	O
||	O
evt	pointer
->	O
sip	pointer
==	O
NULL	O
||	O
evt	pointer
->	O
sip	pointer
->	O
cseq	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
EVT_IS_INCOMINGMSG	O
(	O
evt	pointer
)	O
)	O
{	O
if	O
(	O
MSG_IS_REQUEST	O
(	O
evt	pointer
->	O
sip	pointer
)	O
)	O
{	O
if	O
(	O
0	int
==	O
strcmp	function
(	O
evt	pointer
->	O
sip	pointer
->	O
cseq	pointer
->	O
method	pointer
,	O
"INVITE"	pointer
)	O
||	O
0	int
==	O
strcmp	function
(	O
evt	pointer
->	O
sip	pointer
->	O
cseq	pointer
->	O
method	pointer
,	O
"ACK"	pointer
)	O
)	O
{	O
transactions	pointer
=	O
&	O
osip	struct
->	O
osip_ist_transactions	struct
;	O
mut	pointer
=	O
osip	struct
->	O
ist_fastmutex	pointer
;	O
}	O
else	O
{	O
transactions	pointer
=	O
&	O
osip	struct
->	O
osip_nist_transactions	struct
;	O
mut	pointer
=	O
osip	struct
->	O
nist_fastmutex	pointer
;	O
}	O
}	O
else	O
{	O
if	O
(	O
0	int
==	O
strcmp	function
(	O
evt	pointer
->	O
sip	pointer
->	O
cseq	pointer
->	O
method	pointer
,	O
"INVITE"	pointer
)	O
)	O
{	O
transactions	pointer
=	O
&	O
osip	struct
->	O
osip_ict_transactions	struct
;	O
mut	pointer
=	O
osip	struct
->	O
ict_fastmutex	pointer
;	O
}	O
else	O
{	O
transactions	pointer
=	O
&	O
osip	struct
->	O
osip_nict_transactions	struct
;	O
mut	pointer
=	O
osip	struct
->	O
nict_fastmutex	pointer
;	O
}	O
}	O
}	O
else	O
if	O
(	O
EVT_IS_OUTGOINGMSG	O
(	O
evt	pointer
)	O
)	O
{	O
if	O
(	O
MSG_IS_RESPONSE	O
(	O
evt	pointer
->	O
sip	pointer
)	O
)	O
{	O
if	O
(	O
0	int
==	O
strcmp	function
(	O
evt	pointer
->	O
sip	pointer
->	O
cseq	pointer
->	O
method	pointer
,	O
"INVITE"	pointer
)	O
)	O
{	O
transactions	pointer
=	O
&	O
osip	struct
->	O
osip_ist_transactions	struct
;	O
mut	pointer
=	O
osip	struct
->	O
ist_fastmutex	pointer
;	O
}	O
else	O
{	O
transactions	pointer
=	O
&	O
osip	struct
->	O
osip_nist_transactions	struct
;	O
mut	pointer
=	O
osip	struct
->	O
nist_fastmutex	pointer
;	O
}	O
}	O
else	O
{	O
if	O
(	O
0	int
==	O
strcmp	function
(	O
evt	pointer
->	O
sip	pointer
->	O
cseq	pointer
->	O
method	pointer
,	O
"INVITE"	pointer
)	O
||	O
0	int
==	O
strcmp	function
(	O
evt	pointer
->	O
sip	pointer
->	O
cseq	pointer
->	O
method	pointer
,	O
"ACK"	pointer
)	O
)	O
{	O
transactions	pointer
=	O
&	O
osip	struct
->	O
osip_ict_transactions	struct
;	O
mut	pointer
=	O
osip	struct
->	O
ict_fastmutex	pointer
;	O
}	O
else	O
{	O
transactions	pointer
=	O
&	O
osip	struct
->	O
osip_nict_transactions	struct
;	O
mut	pointer
=	O
osip	struct
->	O
nict_fastmutex	pointer
;	O
}	O
}	O
}	O
if	O
(	O
transactions	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
osip_mutex_lock	function
(	O
mut	pointer
)	O
;	O
transaction	pointer
=	O
osip_transaction_find	function
(	O
transactions	pointer
,	O
evt	pointer
)	O
;	O
if	O
(	O
consume	int
==	O
1	int
)	O
{	O
if	O
(	O
transaction	pointer
!=	O
NULL	O
)	O
{	O
osip_transaction_add_event	function
(	O
transaction	pointer
,	O
evt	pointer
)	O
;	O
osip_mutex_unlock	function
(	O
mut	pointer
)	O
;	O
return	O
transaction	pointer
;	O
}	O
}	O
osip_mutex_unlock	function
(	O
mut	pointer
)	O
;	O
return	O
transaction	pointer
;	O
}	O
osip_transaction_t	struct
*	O
osip_create_transaction	function
(	O
osip_t	struct
*	O
osip	struct
,	O
osip_event_t	struct
*	O
evt	pointer
)	O
{	O
osip_transaction_t	struct
*	O
transaction	pointer
;	O
int	O
i	int
;	O
osip_fsm_type_t	enum
ctx_type	enum
;	O
if	O
(	O
evt	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
evt	pointer
->	O
sip	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
MSG_IS_REQUEST	O
(	O
evt	pointer
->	O
sip	pointer
)	O
)	O
{	O
if	O
(	O
evt	pointer
->	O
sip	pointer
->	O
cseq	pointer
==	O
NULL	O
||	O
evt	pointer
->	O
sip	pointer
->	O
cseq	pointer
->	O
method	pointer
==	O
NULL	O
||	O
evt	pointer
->	O
sip	pointer
->	O
sip_method	pointer
==	O
NULL	O
)	O
{	O
return	O
NULL	O
;	O
}	O
if	O
(	O
0	int
!=	O
strcmp	function
(	O
evt	pointer
->	O
sip	pointer
->	O
cseq	pointer
->	O
method	pointer
,	O
evt	pointer
->	O
sip	pointer
->	O
sip_method	pointer
)	O
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_WARNING	O
,	O
NULL	O
,	O
"core module: Discard invalid message with method!=cseq!\n"	pointer
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
if	O
(	O
MSG_IS_ACK	O
(	O
evt	pointer
->	O
sip	pointer
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
EVT_IS_INCOMINGREQ	O
(	O
evt	pointer
)	O
)	O
{	O
if	O
(	O
0	int
==	O
strcmp	function
(	O
evt	pointer
->	O
sip	pointer
->	O
cseq	pointer
->	O
method	pointer
,	O
"INVITE"	pointer
)	O
)	O
ctx_type	enum
=	O
IST	int
;	O
else	O
ctx_type	enum
=	O
NIST	int
;	O
}	O
else	O
if	O
(	O
EVT_IS_OUTGOINGREQ	O
(	O
evt	pointer
)	O
)	O
{	O
if	O
(	O
0	int
==	O
strcmp	function
(	O
evt	pointer
->	O
sip	pointer
->	O
cseq	pointer
->	O
method	pointer
,	O
"INVITE"	pointer
)	O
)	O
ctx_type	enum
=	O
ICT	int
;	O
else	O
ctx_type	enum
=	O
NICT	int
;	O
}	O
else	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_ERROR	O
,	O
NULL	O
,	O
"Cannot build a transaction for this message!\n"	pointer
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
i	int
=	O
osip_transaction_init	function
(	O
&	O
transaction	pointer
,	O
ctx_type	enum
,	O
osip	struct
,	O
evt	pointer
->	O
sip	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
return	O
NULL	O
;	O
}	O
evt	pointer
->	O
transactionid	int
=	O
transaction	pointer
->	O
transactionid	int
;	O
return	O
transaction	pointer
;	O
}	O
osip_transaction_t	struct
*	O
osip_transaction_find	function
(	O
osip_list_t	struct
*	O
transactions	pointer
,	O
osip_event_t	struct
*	O
evt	pointer
)	O
{	O
osip_list_iterator_t	struct
iterator	struct
;	O
osip_transaction_t	struct
*	O
transaction	pointer
;	O
osip_t	struct
*	O
osip	struct
=	O
NULL	O
;	O
transaction	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_first	function
(	O
transactions	pointer
,	O
&	O
iterator	struct
)	O
;	O
if	O
(	O
transaction	pointer
!=	O
NULL	O
)	O
osip	struct
=	O
(	O
osip_t	struct
*	O
)	O
transaction	pointer
->	O
config	pointer
;	O
if	O
(	O
osip	struct
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
EVT_IS_INCOMINGREQ	O
(	O
evt	pointer
)	O
)	O
{	O
transaction	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_first	function
(	O
transactions	pointer
,	O
&	O
iterator	struct
)	O
;	O
while	O
(	O
osip_list_iterator_has_elem	O
(	O
iterator	struct
)	O
)	O
{	O
if	O
(	O
0	int
==	O
__osip_transaction_matching_request_osip_to_xist_17_2_3	function
(	O
transaction	pointer
,	O
evt	pointer
->	O
sip	pointer
)	O
)	O
return	O
transaction	pointer
;	O
transaction	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
iterator	struct
)	O
;	O
}	O
}	O
else	O
if	O
(	O
EVT_IS_INCOMINGRESP	O
(	O
evt	pointer
)	O
)	O
{	O
transaction	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_first	function
(	O
transactions	pointer
,	O
&	O
iterator	struct
)	O
;	O
while	O
(	O
osip_list_iterator_has_elem	O
(	O
iterator	struct
)	O
)	O
{	O
if	O
(	O
0	int
==	O
__osip_transaction_matching_response_osip_to_xict_17_1_3	function
(	O
transaction	pointer
,	O
evt	pointer
->	O
sip	pointer
)	O
)	O
return	O
transaction	pointer
;	O
transaction	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
iterator	struct
)	O
;	O
}	O
}	O
else	O
{	O
transaction	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_first	function
(	O
transactions	pointer
,	O
&	O
iterator	struct
)	O
;	O
while	O
(	O
osip_list_iterator_has_elem	O
(	O
iterator	struct
)	O
)	O
{	O
if	O
(	O
transaction	pointer
->	O
transactionid	int
==	O
evt	pointer
->	O
transactionid	int
)	O
return	O
transaction	pointer
;	O
transaction	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
iterator	struct
)	O
;	O
}	O
}	O
return	O
NULL	O
;	O
}	O
int	O
osip_init	function
(	O
osip_t	struct
*	O
*	O
osip	struct
)	O
{	O
static	O
int	O
ref_count	int
=	O
0	int
;	O
if	O
(	O
ref_count	int
==	O
0	int
)	O
{	O
ref_count	int
++	O
;	O
parser_init	function
(	O
)	O
;	O
}	O
*	O
osip	struct
=	O
(	O
osip_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
osip_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
osip	struct
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
memset	function
(	O
*	O
osip	struct
,	O
0	int
,	O
sizeof	O
(	O
osip_t	struct
)	O
)	O
;	O
(	O
*	O
osip	struct
)	O
->	O
ict_fastmutex	pointer
=	O
osip_mutex_init	function
(	O
)	O
;	O
(	O
*	O
osip	struct
)	O
->	O
ist_fastmutex	pointer
=	O
osip_mutex_init	function
(	O
)	O
;	O
(	O
*	O
osip	struct
)	O
->	O
nict_fastmutex	pointer
=	O
osip_mutex_init	function
(	O
)	O
;	O
(	O
*	O
osip	struct
)	O
->	O
nist_fastmutex	pointer
=	O
osip_mutex_init	function
(	O
)	O
;	O
(	O
*	O
osip	struct
)	O
->	O
ixt_fastmutex	pointer
=	O
osip_mutex_init	function
(	O
)	O
;	O
(	O
*	O
osip	struct
)	O
->	O
id_mutex	pointer
=	O
osip_mutex_init	function
(	O
)	O
;	O
osip_list_init	function
(	O
&	O
(	O
*	O
osip	struct
)	O
->	O
osip_ict_transactions	struct
)	O
;	O
osip_list_init	function
(	O
&	O
(	O
*	O
osip	struct
)	O
->	O
osip_ist_transactions	struct
)	O
;	O
osip_list_init	function
(	O
&	O
(	O
*	O
osip	struct
)	O
->	O
osip_nict_transactions	struct
)	O
;	O
osip_list_init	function
(	O
&	O
(	O
*	O
osip	struct
)	O
->	O
osip_nist_transactions	struct
)	O
;	O
osip_list_init	function
(	O
&	O
(	O
*	O
osip	struct
)	O
->	O
ixt_retransmissions	struct
)	O
;	O
(	O
*	O
osip	struct
)	O
->	O
transactionid	int
=	O
1	int
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
osip_release	function
(	O
osip_t	struct
*	O
osip	struct
)	O
{	O
osip_mutex_destroy	function
(	O
osip	struct
->	O
ict_fastmutex	pointer
)	O
;	O
osip_mutex_destroy	function
(	O
osip	struct
->	O
ist_fastmutex	pointer
)	O
;	O
osip_mutex_destroy	function
(	O
osip	struct
->	O
nict_fastmutex	pointer
)	O
;	O
osip_mutex_destroy	function
(	O
osip	struct
->	O
nist_fastmutex	pointer
)	O
;	O
osip_mutex_destroy	function
(	O
osip	struct
->	O
ixt_fastmutex	pointer
)	O
;	O
osip_mutex_destroy	function
(	O
osip	struct
->	O
id_mutex	pointer
)	O
;	O
osip_free	O
(	O
osip	struct
)	O
;	O
}	O
void	O
osip_set_application_context	function
(	O
osip_t	struct
*	O
osip	struct
,	O
void	O
*	O
pointer	pointer
)	O
{	O
osip	struct
->	O
application_context	pointer
=	O
pointer	pointer
;	O
}	O
void	O
*	O
osip_get_application_context	function
(	O
osip_t	struct
*	O
osip	struct
)	O
{	O
if	O
(	O
osip	struct
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
osip	struct
->	O
application_context	pointer
;	O
}	O
int	O
osip_ict_execute	function
(	O
osip_t	struct
*	O
osip	struct
)	O
{	O
osip_transaction_t	struct
*	O
transaction	pointer
;	O
osip_event_t	struct
*	O
se	pointer
;	O
int	O
more_event	int
;	O
osip_list_iterator_t	struct
iterator	struct
;	O
void	O
*	O
*	O
array	pointer
;	O
int	O
len	long
;	O
int	O
index	function
=	O
0	int
;	O
osip_mutex_lock	function
(	O
osip	struct
->	O
ict_fastmutex	pointer
)	O
;	O
len	long
=	O
osip_list_size	function
(	O
&	O
osip	struct
->	O
osip_ict_transactions	struct
)	O
;	O
if	O
(	O
0	int
>=	O
len	long
)	O
{	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
ict_fastmutex	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
array	pointer
=	O
osip_malloc	O
(	O
sizeof	O
(	O
void	O
*	O
)	O
*	O
len	long
)	O
;	O
if	O
(	O
array	pointer
==	O
NULL	O
)	O
{	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
ict_fastmutex	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
transaction	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_first	function
(	O
&	O
osip	struct
->	O
osip_ict_transactions	struct
,	O
&	O
iterator	struct
)	O
;	O
while	O
(	O
osip_list_iterator_has_elem	O
(	O
iterator	struct
)	O
)	O
{	O
array	pointer
[	O
index	function
++	O
]	O
=	O
transaction	pointer
;	O
transaction	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
iterator	struct
)	O
;	O
}	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
ict_fastmutex	pointer
)	O
;	O
for	O
(	O
index	function
=	O
0	int
;	O
index	function
<	O
len	long
;	O
++	O
index	function
)	O
{	O
transaction	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
array	pointer
[	O
index	function
]	O
;	O
more_event	int
=	O
1	int
;	O
do	O
{	O
se	pointer
=	O
(	O
osip_event_t	struct
*	O
)	O
osip_fifo_tryget	function
(	O
transaction	pointer
->	O
transactionff	pointer
)	O
;	O
if	O
(	O
se	pointer
==	O
NULL	O
)	O
more_event	int
=	O
0	int
;	O
else	O
osip_transaction_execute	function
(	O
transaction	pointer
,	O
se	pointer
)	O
;	O
}	O
while	O
(	O
more_event	int
==	O
1	int
)	O
;	O
}	O
osip_free	O
(	O
array	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_ist_execute	function
(	O
osip_t	struct
*	O
osip	struct
)	O
{	O
osip_transaction_t	struct
*	O
transaction	pointer
;	O
osip_event_t	struct
*	O
se	pointer
;	O
int	O
more_event	int
;	O
osip_list_iterator_t	struct
iterator	struct
;	O
void	O
*	O
*	O
array	pointer
;	O
int	O
len	long
;	O
int	O
index	function
=	O
0	int
;	O
osip_mutex_lock	function
(	O
osip	struct
->	O
ist_fastmutex	pointer
)	O
;	O
len	long
=	O
osip_list_size	function
(	O
&	O
osip	struct
->	O
osip_ist_transactions	struct
)	O
;	O
if	O
(	O
0	int
>=	O
len	long
)	O
{	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
ist_fastmutex	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
array	pointer
=	O
osip_malloc	O
(	O
sizeof	O
(	O
void	O
*	O
)	O
*	O
len	long
)	O
;	O
if	O
(	O
array	pointer
==	O
NULL	O
)	O
{	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
ist_fastmutex	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
transaction	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_first	function
(	O
&	O
osip	struct
->	O
osip_ist_transactions	struct
,	O
&	O
iterator	struct
)	O
;	O
while	O
(	O
osip_list_iterator_has_elem	O
(	O
iterator	struct
)	O
)	O
{	O
array	pointer
[	O
index	function
++	O
]	O
=	O
transaction	pointer
;	O
transaction	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
iterator	struct
)	O
;	O
}	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
ist_fastmutex	pointer
)	O
;	O
for	O
(	O
index	function
=	O
0	int
;	O
index	function
<	O
len	long
;	O
++	O
index	function
)	O
{	O
transaction	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
array	pointer
[	O
index	function
]	O
;	O
more_event	int
=	O
1	int
;	O
do	O
{	O
se	pointer
=	O
(	O
osip_event_t	struct
*	O
)	O
osip_fifo_tryget	function
(	O
transaction	pointer
->	O
transactionff	pointer
)	O
;	O
if	O
(	O
se	pointer
==	O
NULL	O
)	O
more_event	int
=	O
0	int
;	O
else	O
osip_transaction_execute	function
(	O
transaction	pointer
,	O
se	pointer
)	O
;	O
}	O
while	O
(	O
more_event	int
==	O
1	int
)	O
;	O
}	O
osip_free	O
(	O
array	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_nict_execute	function
(	O
osip_t	struct
*	O
osip	struct
)	O
{	O
osip_transaction_t	struct
*	O
transaction	pointer
;	O
osip_event_t	struct
*	O
se	pointer
;	O
int	O
more_event	int
;	O
osip_list_iterator_t	struct
iterator	struct
;	O
void	O
*	O
*	O
array	pointer
;	O
int	O
len	long
;	O
int	O
index	function
=	O
0	int
;	O
osip_mutex_lock	function
(	O
osip	struct
->	O
nict_fastmutex	pointer
)	O
;	O
len	long
=	O
osip_list_size	function
(	O
&	O
osip	struct
->	O
osip_nict_transactions	struct
)	O
;	O
if	O
(	O
0	int
>=	O
len	long
)	O
{	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
nict_fastmutex	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
array	pointer
=	O
osip_malloc	O
(	O
sizeof	O
(	O
void	O
*	O
)	O
*	O
len	long
)	O
;	O
if	O
(	O
array	pointer
==	O
NULL	O
)	O
{	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
nict_fastmutex	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
transaction	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_first	function
(	O
&	O
osip	struct
->	O
osip_nict_transactions	struct
,	O
&	O
iterator	struct
)	O
;	O
while	O
(	O
osip_list_iterator_has_elem	O
(	O
iterator	struct
)	O
)	O
{	O
array	pointer
[	O
index	function
++	O
]	O
=	O
transaction	pointer
;	O
transaction	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
iterator	struct
)	O
;	O
}	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
nict_fastmutex	pointer
)	O
;	O
for	O
(	O
index	function
=	O
0	int
;	O
index	function
<	O
len	long
;	O
++	O
index	function
)	O
{	O
transaction	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
array	pointer
[	O
index	function
]	O
;	O
more_event	int
=	O
1	int
;	O
do	O
{	O
se	pointer
=	O
(	O
osip_event_t	struct
*	O
)	O
osip_fifo_tryget	function
(	O
transaction	pointer
->	O
transactionff	pointer
)	O
;	O
if	O
(	O
se	pointer
==	O
NULL	O
)	O
more_event	int
=	O
0	int
;	O
else	O
osip_transaction_execute	function
(	O
transaction	pointer
,	O
se	pointer
)	O
;	O
}	O
while	O
(	O
more_event	int
==	O
1	int
)	O
;	O
}	O
osip_free	O
(	O
array	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_nist_execute	function
(	O
osip_t	struct
*	O
osip	struct
)	O
{	O
osip_transaction_t	struct
*	O
transaction	pointer
;	O
osip_event_t	struct
*	O
se	pointer
;	O
int	O
more_event	int
;	O
osip_list_iterator_t	struct
iterator	struct
;	O
void	O
*	O
*	O
array	pointer
;	O
int	O
len	long
;	O
int	O
index	function
=	O
0	int
;	O
osip_mutex_lock	function
(	O
osip	struct
->	O
nist_fastmutex	pointer
)	O
;	O
len	long
=	O
osip_list_size	function
(	O
&	O
osip	struct
->	O
osip_nist_transactions	struct
)	O
;	O
if	O
(	O
0	int
>=	O
len	long
)	O
{	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
nist_fastmutex	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
array	pointer
=	O
osip_malloc	O
(	O
sizeof	O
(	O
void	O
*	O
)	O
*	O
len	long
)	O
;	O
if	O
(	O
array	pointer
==	O
NULL	O
)	O
{	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
nist_fastmutex	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
transaction	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_first	function
(	O
&	O
osip	struct
->	O
osip_nist_transactions	struct
,	O
&	O
iterator	struct
)	O
;	O
while	O
(	O
osip_list_iterator_has_elem	O
(	O
iterator	struct
)	O
)	O
{	O
array	pointer
[	O
index	function
++	O
]	O
=	O
transaction	pointer
;	O
transaction	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
iterator	struct
)	O
;	O
}	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
nist_fastmutex	pointer
)	O
;	O
for	O
(	O
index	function
=	O
0	int
;	O
index	function
<	O
len	long
;	O
++	O
index	function
)	O
{	O
transaction	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
array	pointer
[	O
index	function
]	O
;	O
more_event	int
=	O
1	int
;	O
do	O
{	O
se	pointer
=	O
(	O
osip_event_t	struct
*	O
)	O
osip_fifo_tryget	function
(	O
transaction	pointer
->	O
transactionff	pointer
)	O
;	O
if	O
(	O
se	pointer
==	O
NULL	O
)	O
more_event	int
=	O
0	int
;	O
else	O
osip_transaction_execute	function
(	O
transaction	pointer
,	O
se	pointer
)	O
;	O
}	O
while	O
(	O
more_event	int
==	O
1	int
)	O
;	O
}	O
osip_free	O
(	O
array	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
osip_timers_gettimeout	function
(	O
osip_t	struct
*	O
osip	struct
,	O
struct	O
timeval	struct
*	O
lower_tv	pointer
)	O
{	O
struct	O
timeval	struct
now	struct
;	O
osip_transaction_t	struct
*	O
tr	pointer
;	O
osip_list_iterator_t	struct
iterator	struct
;	O
osip_gettimeofday	function
(	O
&	O
now	struct
,	O
NULL	O
)	O
;	O
lower_tv	pointer
->	O
tv_sec	long
=	O
now	struct
.	O
tv_sec	long
+	O
3600	int
*	O
24	int
*	O
365	int
;	O
lower_tv	pointer
->	O
tv_usec	long
=	O
now	struct
.	O
tv_usec	long
;	O
osip_mutex_lock	function
(	O
osip	struct
->	O
ict_fastmutex	pointer
)	O
;	O
tr	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_first	function
(	O
&	O
osip	struct
->	O
osip_ict_transactions	struct
,	O
&	O
iterator	struct
)	O
;	O
while	O
(	O
osip_list_iterator_has_elem	O
(	O
iterator	struct
)	O
)	O
{	O
if	O
(	O
1	int
<=	O
osip_fifo_size	function
(	O
tr	pointer
->	O
transactionff	pointer
)	O
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_INFO4	O
,	O
NULL	O
,	O
"1 Pending event already in transaction !\n"	pointer
)	O
)	O
;	O
lower_tv	pointer
->	O
tv_sec	long
=	O
0	int
;	O
lower_tv	pointer
->	O
tv_usec	long
=	O
0	int
;	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
ict_fastmutex	pointer
)	O
;	O
return	O
;	O
}	O
else	O
{	O
if	O
(	O
tr	pointer
->	O
state	pointer
==	O
ICT_CALLING	int
)	O
min_timercmp	function
(	O
lower_tv	pointer
,	O
&	O
tr	pointer
->	O
ict_context	pointer
->	O
timer_b_start	struct
)	O
;	O
if	O
(	O
tr	pointer
->	O
state	pointer
==	O
ICT_CALLING	int
)	O
min_timercmp	function
(	O
lower_tv	pointer
,	O
&	O
tr	pointer
->	O
ict_context	pointer
->	O
timer_a_start	struct
)	O
;	O
if	O
(	O
tr	pointer
->	O
state	pointer
==	O
ICT_COMPLETED	int
)	O
min_timercmp	function
(	O
lower_tv	pointer
,	O
&	O
tr	pointer
->	O
ict_context	pointer
->	O
timer_d_start	struct
)	O
;	O
if	O
(	O
osip_timercmp	O
(	O
&	O
now	struct
,	O
lower_tv	pointer
,	O
>	O
)	O
)	O
{	O
lower_tv	pointer
->	O
tv_sec	long
=	O
0	int
;	O
lower_tv	pointer
->	O
tv_usec	long
=	O
0	int
;	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
ict_fastmutex	pointer
)	O
;	O
return	O
;	O
}	O
}	O
tr	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
iterator	struct
)	O
;	O
}	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
ict_fastmutex	pointer
)	O
;	O
osip_mutex_lock	function
(	O
osip	struct
->	O
ist_fastmutex	pointer
)	O
;	O
tr	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_first	function
(	O
&	O
osip	struct
->	O
osip_ist_transactions	struct
,	O
&	O
iterator	struct
)	O
;	O
while	O
(	O
osip_list_iterator_has_elem	O
(	O
iterator	struct
)	O
)	O
{	O
if	O
(	O
tr	pointer
->	O
state	pointer
==	O
IST_CONFIRMED	int
)	O
min_timercmp	function
(	O
lower_tv	pointer
,	O
&	O
tr	pointer
->	O
ist_context	pointer
->	O
timer_i_start	struct
)	O
;	O
if	O
(	O
tr	pointer
->	O
state	pointer
==	O
IST_COMPLETED	int
)	O
min_timercmp	function
(	O
lower_tv	pointer
,	O
&	O
tr	pointer
->	O
ist_context	pointer
->	O
timer_h_start	struct
)	O
;	O
if	O
(	O
tr	pointer
->	O
state	pointer
==	O
IST_COMPLETED	int
)	O
min_timercmp	function
(	O
lower_tv	pointer
,	O
&	O
tr	pointer
->	O
ist_context	pointer
->	O
timer_g_start	struct
)	O
;	O
if	O
(	O
osip_timercmp	O
(	O
&	O
now	struct
,	O
lower_tv	pointer
,	O
>	O
)	O
)	O
{	O
lower_tv	pointer
->	O
tv_sec	long
=	O
0	int
;	O
lower_tv	pointer
->	O
tv_usec	long
=	O
0	int
;	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
ist_fastmutex	pointer
)	O
;	O
return	O
;	O
}	O
tr	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
iterator	struct
)	O
;	O
}	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
ist_fastmutex	pointer
)	O
;	O
osip_mutex_lock	function
(	O
osip	struct
->	O
nict_fastmutex	pointer
)	O
;	O
tr	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_first	function
(	O
&	O
osip	struct
->	O
osip_nict_transactions	struct
,	O
&	O
iterator	struct
)	O
;	O
while	O
(	O
osip_list_iterator_has_elem	O
(	O
iterator	struct
)	O
)	O
{	O
if	O
(	O
tr	pointer
->	O
state	pointer
==	O
NICT_COMPLETED	int
)	O
min_timercmp	function
(	O
lower_tv	pointer
,	O
&	O
tr	pointer
->	O
nict_context	pointer
->	O
timer_k_start	struct
)	O
;	O
if	O
(	O
tr	pointer
->	O
state	pointer
==	O
NICT_PROCEEDING	int
||	O
tr	pointer
->	O
state	pointer
==	O
NICT_TRYING	int
)	O
min_timercmp	function
(	O
lower_tv	pointer
,	O
&	O
tr	pointer
->	O
nict_context	pointer
->	O
timer_f_start	struct
)	O
;	O
if	O
(	O
tr	pointer
->	O
state	pointer
==	O
NICT_PROCEEDING	int
||	O
tr	pointer
->	O
state	pointer
==	O
NICT_TRYING	int
)	O
min_timercmp	function
(	O
lower_tv	pointer
,	O
&	O
tr	pointer
->	O
nict_context	pointer
->	O
timer_e_start	struct
)	O
;	O
if	O
(	O
osip_timercmp	O
(	O
&	O
now	struct
,	O
lower_tv	pointer
,	O
>	O
)	O
)	O
{	O
lower_tv	pointer
->	O
tv_sec	long
=	O
0	int
;	O
lower_tv	pointer
->	O
tv_usec	long
=	O
0	int
;	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
nict_fastmutex	pointer
)	O
;	O
return	O
;	O
}	O
tr	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
iterator	struct
)	O
;	O
}	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
nict_fastmutex	pointer
)	O
;	O
osip_mutex_lock	function
(	O
osip	struct
->	O
nist_fastmutex	pointer
)	O
;	O
tr	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_first	function
(	O
&	O
osip	struct
->	O
osip_nist_transactions	struct
,	O
&	O
iterator	struct
)	O
;	O
while	O
(	O
osip_list_iterator_has_elem	O
(	O
iterator	struct
)	O
)	O
{	O
if	O
(	O
tr	pointer
->	O
state	pointer
==	O
NIST_COMPLETED	int
)	O
min_timercmp	function
(	O
lower_tv	pointer
,	O
&	O
tr	pointer
->	O
nist_context	pointer
->	O
timer_j_start	struct
)	O
;	O
if	O
(	O
osip_timercmp	O
(	O
&	O
now	struct
,	O
lower_tv	pointer
,	O
>	O
)	O
)	O
{	O
lower_tv	pointer
->	O
tv_sec	long
=	O
0	int
;	O
lower_tv	pointer
->	O
tv_usec	long
=	O
0	int
;	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
nist_fastmutex	pointer
)	O
;	O
return	O
;	O
}	O
tr	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
iterator	struct
)	O
;	O
}	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
nist_fastmutex	pointer
)	O
;	O
osip_mutex_lock	function
(	O
osip	struct
->	O
ixt_fastmutex	pointer
)	O
;	O
{	O
ixt_t	struct
*	O
ixt	struct
;	O
ixt	struct
=	O
(	O
ixt_t	struct
*	O
)	O
osip_list_get_first	function
(	O
&	O
osip	struct
->	O
ixt_retransmissions	struct
,	O
&	O
iterator	struct
)	O
;	O
while	O
(	O
osip_list_iterator_has_elem	O
(	O
iterator	struct
)	O
)	O
{	O
min_timercmp	function
(	O
lower_tv	pointer
,	O
&	O
ixt	struct
->	O
start	struct
)	O
;	O
if	O
(	O
osip_timercmp	O
(	O
&	O
now	struct
,	O
lower_tv	pointer
,	O
>	O
)	O
)	O
{	O
lower_tv	pointer
->	O
tv_sec	long
=	O
0	int
;	O
lower_tv	pointer
->	O
tv_usec	long
=	O
0	int
;	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
ixt_fastmutex	pointer
)	O
;	O
return	O
;	O
}	O
ixt	struct
=	O
(	O
ixt_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
iterator	struct
)	O
;	O
}	O
}	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
ixt_fastmutex	pointer
)	O
;	O
lower_tv	pointer
->	O
tv_sec	long
=	O
lower_tv	pointer
->	O
tv_sec	long
-	O
now	struct
.	O
tv_sec	long
;	O
lower_tv	pointer
->	O
tv_usec	long
=	O
lower_tv	pointer
->	O
tv_usec	long
-	O
now	struct
.	O
tv_usec	long
;	O
if	O
(	O
lower_tv	pointer
->	O
tv_usec	long
<	O
0	int
)	O
{	O
lower_tv	pointer
->	O
tv_usec	long
=	O
lower_tv	pointer
->	O
tv_usec	long
+	O
1000000	int
;	O
lower_tv	pointer
->	O
tv_sec	long
--	O
;	O
}	O
if	O
(	O
lower_tv	pointer
->	O
tv_sec	long
<	O
0	int
)	O
{	O
lower_tv	pointer
->	O
tv_sec	long
=	O
0	int
;	O
lower_tv	pointer
->	O
tv_usec	long
=	O
0	int
;	O
}	O
if	O
(	O
lower_tv	pointer
->	O
tv_usec	long
>	O
1000000	int
)	O
{	O
lower_tv	pointer
->	O
tv_usec	long
=	O
lower_tv	pointer
->	O
tv_usec	long
-	O
1000000	int
;	O
lower_tv	pointer
->	O
tv_sec	long
++	O
;	O
}	O
return	O
;	O
}	O
void	O
osip_timers_ict_execute	function
(	O
osip_t	struct
*	O
osip	struct
)	O
{	O
osip_transaction_t	struct
*	O
tr	pointer
;	O
osip_list_iterator_t	struct
iterator	struct
;	O
osip_mutex_lock	function
(	O
osip	struct
->	O
ict_fastmutex	pointer
)	O
;	O
tr	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_first	function
(	O
&	O
osip	struct
->	O
osip_ict_transactions	struct
,	O
&	O
iterator	struct
)	O
;	O
while	O
(	O
osip_list_iterator_has_elem	O
(	O
iterator	struct
)	O
)	O
{	O
osip_event_t	struct
*	O
evt	pointer
;	O
if	O
(	O
1	int
<=	O
osip_fifo_size	function
(	O
tr	pointer
->	O
transactionff	pointer
)	O
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_INFO4	O
,	O
NULL	O
,	O
"1 Pending event already in transaction !\n"	pointer
)	O
)	O
;	O
}	O
else	O
{	O
evt	pointer
=	O
__osip_ict_need_timer_b_event	function
(	O
tr	pointer
->	O
ict_context	pointer
,	O
tr	pointer
->	O
state	pointer
,	O
tr	pointer
->	O
transactionid	int
)	O
;	O
if	O
(	O
evt	pointer
!=	O
NULL	O
)	O
osip_fifo_add	function
(	O
tr	pointer
->	O
transactionff	pointer
,	O
evt	pointer
)	O
;	O
else	O
{	O
evt	pointer
=	O
__osip_ict_need_timer_a_event	function
(	O
tr	pointer
->	O
ict_context	pointer
,	O
tr	pointer
->	O
state	pointer
,	O
tr	pointer
->	O
transactionid	int
)	O
;	O
if	O
(	O
evt	pointer
!=	O
NULL	O
)	O
osip_fifo_add	function
(	O
tr	pointer
->	O
transactionff	pointer
,	O
evt	pointer
)	O
;	O
else	O
{	O
evt	pointer
=	O
__osip_ict_need_timer_d_event	function
(	O
tr	pointer
->	O
ict_context	pointer
,	O
tr	pointer
->	O
state	pointer
,	O
tr	pointer
->	O
transactionid	int
)	O
;	O
if	O
(	O
evt	pointer
!=	O
NULL	O
)	O
osip_fifo_add	function
(	O
tr	pointer
->	O
transactionff	pointer
,	O
evt	pointer
)	O
;	O
}	O
}	O
}	O
tr	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
iterator	struct
)	O
;	O
}	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
ict_fastmutex	pointer
)	O
;	O
}	O
void	O
osip_timers_ist_execute	function
(	O
osip_t	struct
*	O
osip	struct
)	O
{	O
osip_transaction_t	struct
*	O
tr	pointer
;	O
osip_list_iterator_t	struct
iterator	struct
;	O
osip_mutex_lock	function
(	O
osip	struct
->	O
ist_fastmutex	pointer
)	O
;	O
tr	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_first	function
(	O
&	O
osip	struct
->	O
osip_ist_transactions	struct
,	O
&	O
iterator	struct
)	O
;	O
while	O
(	O
osip_list_iterator_has_elem	O
(	O
iterator	struct
)	O
)	O
{	O
osip_event_t	struct
*	O
evt	pointer
;	O
evt	pointer
=	O
__osip_ist_need_timer_i_event	function
(	O
tr	pointer
->	O
ist_context	pointer
,	O
tr	pointer
->	O
state	pointer
,	O
tr	pointer
->	O
transactionid	int
)	O
;	O
if	O
(	O
evt	pointer
!=	O
NULL	O
)	O
osip_fifo_add	function
(	O
tr	pointer
->	O
transactionff	pointer
,	O
evt	pointer
)	O
;	O
else	O
{	O
evt	pointer
=	O
__osip_ist_need_timer_h_event	function
(	O
tr	pointer
->	O
ist_context	pointer
,	O
tr	pointer
->	O
state	pointer
,	O
tr	pointer
->	O
transactionid	int
)	O
;	O
if	O
(	O
evt	pointer
!=	O
NULL	O
)	O
osip_fifo_add	function
(	O
tr	pointer
->	O
transactionff	pointer
,	O
evt	pointer
)	O
;	O
else	O
{	O
evt	pointer
=	O
__osip_ist_need_timer_g_event	function
(	O
tr	pointer
->	O
ist_context	pointer
,	O
tr	pointer
->	O
state	pointer
,	O
tr	pointer
->	O
transactionid	int
)	O
;	O
if	O
(	O
evt	pointer
!=	O
NULL	O
)	O
osip_fifo_add	function
(	O
tr	pointer
->	O
transactionff	pointer
,	O
evt	pointer
)	O
;	O
}	O
}	O
tr	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
iterator	struct
)	O
;	O
}	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
ist_fastmutex	pointer
)	O
;	O
}	O
void	O
osip_timers_nict_execute	function
(	O
osip_t	struct
*	O
osip	struct
)	O
{	O
osip_transaction_t	struct
*	O
tr	pointer
;	O
osip_list_iterator_t	struct
iterator	struct
;	O
osip_mutex_lock	function
(	O
osip	struct
->	O
nict_fastmutex	pointer
)	O
;	O
tr	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_first	function
(	O
&	O
osip	struct
->	O
osip_nict_transactions	struct
,	O
&	O
iterator	struct
)	O
;	O
while	O
(	O
osip_list_iterator_has_elem	O
(	O
iterator	struct
)	O
)	O
{	O
osip_event_t	struct
*	O
evt	pointer
;	O
evt	pointer
=	O
__osip_nict_need_timer_k_event	function
(	O
tr	pointer
->	O
nict_context	pointer
,	O
tr	pointer
->	O
state	pointer
,	O
tr	pointer
->	O
transactionid	int
)	O
;	O
if	O
(	O
evt	pointer
!=	O
NULL	O
)	O
osip_fifo_add	function
(	O
tr	pointer
->	O
transactionff	pointer
,	O
evt	pointer
)	O
;	O
else	O
{	O
evt	pointer
=	O
__osip_nict_need_timer_f_event	function
(	O
tr	pointer
->	O
nict_context	pointer
,	O
tr	pointer
->	O
state	pointer
,	O
tr	pointer
->	O
transactionid	int
)	O
;	O
if	O
(	O
evt	pointer
!=	O
NULL	O
)	O
osip_fifo_add	function
(	O
tr	pointer
->	O
transactionff	pointer
,	O
evt	pointer
)	O
;	O
else	O
{	O
evt	pointer
=	O
__osip_nict_need_timer_e_event	function
(	O
tr	pointer
->	O
nict_context	pointer
,	O
tr	pointer
->	O
state	pointer
,	O
tr	pointer
->	O
transactionid	int
)	O
;	O
if	O
(	O
evt	pointer
!=	O
NULL	O
)	O
osip_fifo_add	function
(	O
tr	pointer
->	O
transactionff	pointer
,	O
evt	pointer
)	O
;	O
}	O
}	O
tr	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
iterator	struct
)	O
;	O
}	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
nict_fastmutex	pointer
)	O
;	O
}	O
void	O
osip_timers_nist_execute	function
(	O
osip_t	struct
*	O
osip	struct
)	O
{	O
osip_transaction_t	struct
*	O
tr	pointer
;	O
osip_list_iterator_t	struct
iterator	struct
;	O
osip_mutex_lock	function
(	O
osip	struct
->	O
nist_fastmutex	pointer
)	O
;	O
tr	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_first	function
(	O
&	O
osip	struct
->	O
osip_nist_transactions	struct
,	O
&	O
iterator	struct
)	O
;	O
while	O
(	O
osip_list_iterator_has_elem	O
(	O
iterator	struct
)	O
)	O
{	O
osip_event_t	struct
*	O
evt	pointer
;	O
evt	pointer
=	O
__osip_nist_need_timer_j_event	function
(	O
tr	pointer
->	O
nist_context	pointer
,	O
tr	pointer
->	O
state	pointer
,	O
tr	pointer
->	O
transactionid	int
)	O
;	O
if	O
(	O
evt	pointer
!=	O
NULL	O
)	O
osip_fifo_add	function
(	O
tr	pointer
->	O
transactionff	pointer
,	O
evt	pointer
)	O
;	O
tr	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
iterator	struct
)	O
;	O
}	O
osip_mutex_unlock	function
(	O
osip	struct
->	O
nist_fastmutex	pointer
)	O
;	O
}	O
void	O
osip_set_cb_send_message	function
(	O
osip_t	struct
*	O
cf	pointer
,	O
int	O
(	O
*	O
cb	pointer
)	O
(	O
osip_transaction_t	struct
*	O
,	O
osip_message_t	struct
*	O
,	O
char	O
*	O
,	O
int	O
,	O
int	O
)	O
)	O
{	O
cf	pointer
->	O
cb_send_message	pointer
=	O
cb	pointer
;	O
}	O
void	O
__osip_message_callback	function
(	O
int	O
type	pointer
,	O
osip_transaction_t	struct
*	O
tr	pointer
,	O
osip_message_t	struct
*	O
msg	pointer
)	O
{	O
osip_t	struct
*	O
config	pointer
=	O
tr	pointer
->	O
config	pointer
;	O
if	O
(	O
type	pointer
>=	O
OSIP_MESSAGE_CALLBACK_COUNT	int
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_BUG	O
,	O
NULL	O
,	O
"invalid callback type %d\n"	pointer
,	O
type	pointer
)	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
config	pointer
->	O
msg_callbacks	array
[	O
type	pointer
]	O
==	O
NULL	O
)	O
return	O
;	O
config	pointer
->	O
msg_callbacks	array
[	O
type	pointer
]	O
(	O
type	pointer
,	O
tr	pointer
,	O
msg	pointer
)	O
;	O
}	O
void	O
__osip_kill_transaction_callback	function
(	O
int	O
type	pointer
,	O
osip_transaction_t	struct
*	O
tr	pointer
)	O
{	O
osip_t	struct
*	O
config	pointer
=	O
tr	pointer
->	O
config	pointer
;	O
if	O
(	O
type	pointer
>=	O
OSIP_KILL_CALLBACK_COUNT	int
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_BUG	O
,	O
NULL	O
,	O
"invalid callback type %d\n"	pointer
,	O
type	pointer
)	O
)	O
;	O
return	O
;	O
}	O
tr	pointer
->	O
completed_time	long
=	O
osip_getsystemtime	function
(	O
NULL	O
)	O
;	O
if	O
(	O
config	pointer
->	O
kill_callbacks	array
[	O
type	pointer
]	O
==	O
NULL	O
)	O
return	O
;	O
config	pointer
->	O
kill_callbacks	array
[	O
type	pointer
]	O
(	O
type	pointer
,	O
tr	pointer
)	O
;	O
}	O
void	O
__osip_transport_error_callback	function
(	O
int	O
type	pointer
,	O
osip_transaction_t	struct
*	O
tr	pointer
,	O
int	O
error	int
)	O
{	O
osip_t	struct
*	O
config	pointer
=	O
tr	pointer
->	O
config	pointer
;	O
if	O
(	O
type	pointer
>=	O
OSIP_TRANSPORT_ERROR_CALLBACK_COUNT	int
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_BUG	O
,	O
NULL	O
,	O
"invalid callback type %d\n"	pointer
,	O
type	pointer
)	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
config	pointer
->	O
tp_error_callbacks	array
[	O
type	pointer
]	O
==	O
NULL	O
)	O
return	O
;	O
config	pointer
->	O
tp_error_callbacks	array
[	O
type	pointer
]	O
(	O
type	pointer
,	O
tr	pointer
,	O
error	int
)	O
;	O
}	O
int	O
osip_set_message_callback	function
(	O
osip_t	struct
*	O
config	pointer
,	O
int	O
type	pointer
,	O
osip_message_cb_t	pointer
cb	pointer
)	O
{	O
if	O
(	O
type	pointer
>=	O
OSIP_MESSAGE_CALLBACK_COUNT	int
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_ERROR	O
,	O
NULL	O
,	O
"invalid callback type %d\n"	pointer
,	O
type	pointer
)	O
)	O
;	O
return	O
OSIP_BADPARAMETER	O
;	O
}	O
config	pointer
->	O
msg_callbacks	array
[	O
type	pointer
]	O
=	O
cb	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_set_kill_transaction_callback	function
(	O
osip_t	struct
*	O
config	pointer
,	O
int	O
type	pointer
,	O
osip_kill_transaction_cb_t	pointer
cb	pointer
)	O
{	O
if	O
(	O
type	pointer
>=	O
OSIP_KILL_CALLBACK_COUNT	int
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_ERROR	O
,	O
NULL	O
,	O
"invalid callback type %d\n"	pointer
,	O
type	pointer
)	O
)	O
;	O
return	O
OSIP_BADPARAMETER	O
;	O
}	O
config	pointer
->	O
kill_callbacks	array
[	O
type	pointer
]	O
=	O
cb	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_set_transport_error_callback	function
(	O
osip_t	struct
*	O
config	pointer
,	O
int	O
type	pointer
,	O
osip_transport_error_cb_t	pointer
cb	pointer
)	O
{	O
if	O
(	O
type	pointer
>=	O
OSIP_TRANSPORT_ERROR_CALLBACK_COUNT	int
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_ERROR	O
,	O
NULL	O
,	O
"invalid callback type %d\n"	pointer
,	O
type	pointer
)	O
)	O
;	O
return	O
OSIP_BADPARAMETER	O
;	O
}	O
config	pointer
->	O
tp_error_callbacks	array
[	O
type	pointer
]	O
=	O
cb	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
