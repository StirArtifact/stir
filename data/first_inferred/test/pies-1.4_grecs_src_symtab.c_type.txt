static	O
unsigned	O
int	O
hash_size	array
[	O
]	O
=	O
{	O
7	int
,	O
17	int
,	O
37	int
,	O
101	int
,	O
229	int
,	O
487	int
,	O
1009	int
,	O
2039	int
,	O
4091	int
,	O
8191	int
,	O
16411	int
}	O
;	O
static	O
unsigned	O
int	O
max_rehash	int
=	O
sizeof	O
(	O
hash_size	array
)	O
/	O
sizeof	O
(	O
hash_size	array
[	O
0	int
]	O
)	O
;	O
enum	O
symtab_defer_type	enum
{	O
defer_add	int
,	O
defer_del	int
}	O
;	O
struct	O
grecs_symtab	struct
{	O
int	O
flags	int
;	O
unsigned	O
int	O
hash_num	int
;	O
size_t	long
elsize	long
;	O
size_t	long
elcount	long
;	O
struct	O
grecs_syment	struct
*	O
*	O
tab	pointer
;	O
unsigned	O
(	O
*	O
hash_fun	pointer
)	O
(	O
void	O
*	O
,	O
unsigned	O
long	O
)	O
;	O
int	O
(	O
*	O
cmp_fun	pointer
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
)	O
;	O
int	O
(	O
*	O
copy_fun	pointer
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
;	O
void	O
*	O
(	O
*	O
syment_alloc_fun	pointer
)	O
(	O
size_t	long
)	O
;	O
void	O
(	O
*	O
syment_free_fun	pointer
)	O
(	O
void	O
*	O
)	O
;	O
unsigned	O
int	O
itr_level	int
;	O
grecs_list_ptr_t	pointer
defer_list	array
[	O
2	int
]	O
;	O
}	O
;	O
static	O
void	O
syment_free	function
(	O
struct	O
grecs_symtab	struct
*	O
st	pointer
,	O
void	O
*	O
ptr	pointer
)	O
{	O
if	O
(	O
st	pointer
->	O
syment_free_fun	pointer
)	O
st	pointer
->	O
syment_free_fun	pointer
(	O
ptr	pointer
)	O
;	O
else	O
free	function
(	O
ptr	pointer
)	O
;	O
}	O
static	O
struct	O
grecs_syment	struct
*	O
syment_alloc	function
(	O
struct	O
grecs_symtab	struct
*	O
st	pointer
,	O
void	O
*	O
key	pointer
)	O
{	O
struct	O
grecs_syment	struct
*	O
ent	pointer
;	O
ent	pointer
=	O
st	pointer
->	O
syment_alloc_fun	pointer
?	O
st	pointer
->	O
syment_alloc_fun	pointer
(	O
st	pointer
->	O
elsize	long
)	O
:	O
malloc	function
(	O
st	pointer
->	O
elsize	long
)	O
;	O
if	O
(	O
ent	pointer
)	O
{	O
memset	function
(	O
ent	pointer
,	O
0	int
,	O
st	pointer
->	O
elsize	long
)	O
;	O
if	O
(	O
st	pointer
->	O
copy_fun	pointer
(	O
ent	pointer
,	O
key	pointer
)	O
)	O
{	O
int	O
ec	int
=	O
errno	O
;	O
syment_free	function
(	O
st	pointer
,	O
ent	pointer
)	O
;	O
errno	O
=	O
ec	int
;	O
return	O
NULL	O
;	O
}	O
}	O
return	O
ent	pointer
;	O
}	O
static	O
void	O
symtab_defer_op	function
(	O
struct	O
grecs_symtab	struct
*	O
st	pointer
,	O
enum	O
symtab_defer_type	enum
type	int
,	O
struct	O
grecs_syment	struct
*	O
ent	pointer
)	O
{	O
if	O
(	O
!	O
st	pointer
->	O
defer_list	array
[	O
type	int
]	O
)	O
{	O
st	pointer
->	O
defer_list	array
[	O
type	int
]	O
=	O
grecs_list_create	function
(	O
)	O
;	O
st	pointer
->	O
defer_list	array
[	O
type	int
]	O
->	O
cmp	pointer
=	O
st	pointer
->	O
cmp_fun	pointer
;	O
}	O
grecs_list_append	function
(	O
st	pointer
->	O
defer_list	array
[	O
type	int
]	O
,	O
ent	pointer
)	O
;	O
}	O
unsigned	O
grecs_hash_string	function
(	O
const	O
char	O
*	O
name	pointer
,	O
unsigned	O
long	O
hashsize	long
)	O
{	O
unsigned	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
*	O
name	pointer
;	O
name	pointer
++	O
)	O
{	O
i	int
<<=	O
1	int
;	O
i	int
^=	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
name	pointer
;	O
}	O
return	O
i	int
%	O
hashsize	long
;	O
}	O
unsigned	O
grecs_hash_string_ci	function
(	O
const	O
char	O
*	O
name	pointer
,	O
unsigned	O
long	O
hashsize	long
)	O
{	O
unsigned	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
*	O
name	pointer
;	O
name	pointer
++	O
)	O
{	O
i	int
<<=	O
1	int
;	O
i	int
^=	O
tolower	function
(	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
name	pointer
)	O
;	O
}	O
return	O
i	int
%	O
hashsize	long
;	O
}	O
static	O
unsigned	O
def_hash	function
(	O
void	O
*	O
data	pointer
,	O
unsigned	O
long	O
hashsize	long
)	O
{	O
struct	O
grecs_syment	struct
*	O
sym	pointer
=	O
data	pointer
;	O
return	O
grecs_hash_string	function
(	O
sym	pointer
->	O
name	pointer
,	O
hashsize	long
)	O
;	O
}	O
static	O
int	O
def_cmp	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
struct	O
grecs_syment	struct
const	O
*	O
syma	pointer
=	O
a	pointer
;	O
struct	O
grecs_syment	struct
const	O
*	O
symb	pointer
=	O
b	pointer
;	O
return	O
strcmp	function
(	O
syma	pointer
->	O
name	pointer
,	O
symb	pointer
->	O
name	pointer
)	O
;	O
}	O
static	O
int	O
def_copy	function
(	O
void	O
*	O
a	pointer
,	O
void	O
*	O
b	pointer
)	O
{	O
struct	O
grecs_syment	struct
*	O
syma	pointer
=	O
a	pointer
;	O
struct	O
grecs_syment	struct
*	O
symb	pointer
=	O
b	pointer
;	O
syma	pointer
->	O
name	pointer
=	O
strdup	function
(	O
symb	pointer
->	O
name	pointer
)	O
;	O
return	O
syma	pointer
->	O
name	pointer
==	O
NULL	O
;	O
}	O
static	O
void	O
def_free_fun	function
(	O
void	O
*	O
p	pointer
)	O
{	O
struct	O
grecs_syment	struct
*	O
sym	pointer
=	O
p	pointer
;	O
free	function
(	O
sym	pointer
->	O
name	pointer
)	O
;	O
free	function
(	O
sym	pointer
)	O
;	O
}	O
static	O
unsigned	O
symtab_insert_pos	function
(	O
struct	O
grecs_symtab	struct
*	O
st	pointer
,	O
void	O
*	O
elt	pointer
)	O
{	O
unsigned	O
i	int
;	O
unsigned	O
pos	int
=	O
st	pointer
->	O
hash_fun	pointer
(	O
elt	pointer
,	O
hash_size	array
[	O
st	pointer
->	O
hash_num	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
pos	int
;	O
st	pointer
->	O
tab	pointer
[	O
i	int
]	O
;	O
)	O
{	O
if	O
(	O
++	O
i	int
>=	O
hash_size	array
[	O
st	pointer
->	O
hash_num	int
]	O
)	O
i	int
=	O
0	int
;	O
if	O
(	O
i	int
==	O
pos	int
)	O
abort	function
(	O
)	O
;	O
}	O
return	O
i	int
;	O
}	O
int	O
grecs_symtab_replace	function
(	O
struct	O
grecs_symtab	struct
*	O
st	pointer
,	O
void	O
*	O
ent	pointer
,	O
void	O
*	O
*	O
old_ent	pointer
)	O
{	O
struct	O
grecs_syment	struct
*	O
entry	pointer
;	O
unsigned	O
i	int
,	O
pos	int
=	O
st	pointer
->	O
hash_fun	pointer
(	O
ent	pointer
,	O
hash_size	array
[	O
st	pointer
->	O
hash_num	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
pos	int
;	O
(	O
entry	pointer
=	O
st	pointer
->	O
tab	pointer
[	O
i	int
]	O
)	O
;	O
)	O
{	O
if	O
(	O
st	pointer
->	O
cmp_fun	pointer
(	O
entry	pointer
,	O
ent	pointer
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
++	O
i	int
>=	O
hash_size	array
[	O
st	pointer
->	O
hash_num	int
]	O
)	O
i	int
=	O
0	int
;	O
if	O
(	O
i	int
==	O
pos	int
)	O
return	O
ENOENT	int
;	O
}	O
if	O
(	O
old_ent	pointer
)	O
*	O
old_ent	pointer
=	O
entry	pointer
;	O
st	pointer
->	O
tab	pointer
[	O
i	int
]	O
=	O
ent	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
symtab_rehash	function
(	O
struct	O
grecs_symtab	struct
*	O
st	pointer
)	O
{	O
struct	O
grecs_syment	struct
*	O
*	O
old_tab	pointer
=	O
st	pointer
->	O
tab	pointer
;	O
struct	O
grecs_syment	struct
*	O
*	O
new_tab	pointer
;	O
unsigned	O
int	O
i	int
;	O
unsigned	O
int	O
hash_num	int
=	O
st	pointer
->	O
hash_num	int
+	O
1	int
;	O
if	O
(	O
hash_num	int
>=	O
max_rehash	int
)	O
return	O
E2BIG	int
;	O
new_tab	pointer
=	O
calloc	function
(	O
hash_size	array
[	O
hash_num	int
]	O
,	O
sizeof	O
(	O
*	O
new_tab	pointer
)	O
)	O
;	O
if	O
(	O
!	O
new_tab	pointer
)	O
return	O
ENOMEM	int
;	O
st	pointer
->	O
tab	pointer
=	O
new_tab	pointer
;	O
if	O
(	O
old_tab	pointer
)	O
{	O
st	pointer
->	O
hash_num	int
=	O
hash_num	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
hash_size	array
[	O
hash_num	int
-	O
1	int
]	O
;	O
i	int
++	O
)	O
{	O
struct	O
grecs_syment	struct
*	O
elt	pointer
=	O
old_tab	pointer
[	O
i	int
]	O
;	O
if	O
(	O
elt	pointer
->	O
name	pointer
)	O
{	O
unsigned	O
n	long
=	O
symtab_insert_pos	function
(	O
st	pointer
,	O
elt	pointer
)	O
;	O
new_tab	pointer
[	O
n	long
]	O
=	O
elt	pointer
;	O
}	O
}	O
free	function
(	O
old_tab	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
const	O
char	O
*	O
grecs_symtab_strerror	function
(	O
int	O
rc	int
)	O
{	O
switch	O
(	O
rc	int
)	O
{	O
case	O
ENOENT	int
:	O
return	O
_	O
(	O
"element not found in table"	pointer
)	O
;	O
case	O
E2BIG	int
:	O
return	O
_	O
(	O
"symbol table is full"	pointer
)	O
;	O
case	O
ENOMEM	int
:	O
return	O
strerror	function
(	O
ENOMEM	int
)	O
;	O
}	O
return	O
strerror	function
(	O
rc	int
)	O
;	O
}	O
int	O
grecs_symtab_remove	function
(	O
struct	O
grecs_symtab	struct
*	O
st	pointer
,	O
void	O
*	O
elt	pointer
)	O
{	O
unsigned	O
int	O
pos	int
,	O
i	int
,	O
j	int
,	O
r	int
;	O
struct	O
grecs_syment	struct
*	O
entry	pointer
;	O
if	O
(	O
st	pointer
->	O
itr_level	int
)	O
{	O
if	O
(	O
grecs_list_remove	function
(	O
st	pointer
->	O
defer_list	array
[	O
defer_add	int
]	O
,	O
elt	pointer
)	O
==	O
0	int
)	O
return	O
0	int
;	O
}	O
pos	int
=	O
st	pointer
->	O
hash_fun	pointer
(	O
elt	pointer
,	O
hash_size	array
[	O
st	pointer
->	O
hash_num	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
pos	int
;	O
(	O
entry	pointer
=	O
st	pointer
->	O
tab	pointer
[	O
i	int
]	O
)	O
;	O
)	O
{	O
if	O
(	O
st	pointer
->	O
cmp_fun	pointer
(	O
entry	pointer
,	O
elt	pointer
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
++	O
i	int
>=	O
hash_size	array
[	O
st	pointer
->	O
hash_num	int
]	O
)	O
i	int
=	O
0	int
;	O
if	O
(	O
i	int
==	O
pos	int
)	O
return	O
ENOENT	int
;	O
}	O
if	O
(	O
!	O
entry	pointer
)	O
return	O
ENOENT	int
;	O
if	O
(	O
st	pointer
->	O
itr_level	int
)	O
{	O
symtab_defer_op	function
(	O
st	pointer
,	O
defer_del	int
,	O
entry	pointer
)	O
;	O
return	O
0	int
;	O
}	O
syment_free	function
(	O
st	pointer
,	O
entry	pointer
)	O
;	O
st	pointer
->	O
elcount	long
--	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
st	pointer
->	O
tab	pointer
[	O
i	int
]	O
=	O
NULL	O
;	O
j	int
=	O
i	int
;	O
do	O
{	O
if	O
(	O
++	O
i	int
>=	O
hash_size	array
[	O
st	pointer
->	O
hash_num	int
]	O
)	O
i	int
=	O
0	int
;	O
if	O
(	O
!	O
st	pointer
->	O
tab	pointer
[	O
i	int
]	O
)	O
return	O
0	int
;	O
r	int
=	O
st	pointer
->	O
hash_fun	pointer
(	O
st	pointer
->	O
tab	pointer
[	O
i	int
]	O
,	O
hash_size	array
[	O
st	pointer
->	O
hash_num	int
]	O
)	O
;	O
}	O
while	O
(	O
(	O
j	int
<	O
r	int
&&	O
r	int
<=	O
i	int
)	O
||	O
(	O
i	int
<	O
j	int
&&	O
j	int
<	O
r	int
)	O
||	O
(	O
r	int
<=	O
i	int
&&	O
i	int
<	O
j	int
)	O
)	O
;	O
st	pointer
->	O
tab	pointer
[	O
j	int
]	O
=	O
st	pointer
->	O
tab	pointer
[	O
i	int
]	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
grecs_symtab_get_index	function
(	O
unsigned	O
*	O
idx	pointer
,	O
struct	O
grecs_symtab	struct
*	O
st	pointer
,	O
void	O
*	O
key	pointer
,	O
int	O
*	O
install	pointer
)	O
{	O
int	O
rc	int
;	O
unsigned	O
i	int
,	O
pos	int
;	O
struct	O
grecs_syment	struct
*	O
elem	pointer
;	O
if	O
(	O
!	O
st	pointer
->	O
tab	pointer
)	O
{	O
if	O
(	O
install	pointer
)	O
{	O
rc	int
=	O
symtab_rehash	function
(	O
st	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
else	O
return	O
ENOENT	int
;	O
}	O
pos	int
=	O
st	pointer
->	O
hash_fun	pointer
(	O
key	pointer
,	O
hash_size	array
[	O
st	pointer
->	O
hash_num	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
pos	int
;	O
(	O
elem	pointer
=	O
st	pointer
->	O
tab	pointer
[	O
i	int
]	O
)	O
;	O
)	O
{	O
if	O
(	O
st	pointer
->	O
cmp_fun	pointer
(	O
elem	pointer
,	O
key	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
install	pointer
)	O
*	O
install	pointer
=	O
0	int
;	O
*	O
idx	pointer
=	O
i	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
++	O
i	int
>=	O
hash_size	array
[	O
st	pointer
->	O
hash_num	int
]	O
)	O
i	int
=	O
0	int
;	O
if	O
(	O
i	int
==	O
pos	int
)	O
break	O
;	O
}	O
if	O
(	O
!	O
install	pointer
)	O
return	O
ENOENT	int
;	O
if	O
(	O
!	O
elem	pointer
)	O
{	O
*	O
install	pointer
=	O
1	int
;	O
*	O
idx	pointer
=	O
i	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
(	O
rc	int
=	O
symtab_rehash	function
(	O
st	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
rc	int
;	O
return	O
grecs_symtab_get_index	function
(	O
idx	pointer
,	O
st	pointer
,	O
key	pointer
,	O
install	pointer
)	O
;	O
}	O
void	O
*	O
grecs_symtab_lookup_or_install	function
(	O
struct	O
grecs_symtab	struct
*	O
st	pointer
,	O
void	O
*	O
key	pointer
,	O
int	O
*	O
install	pointer
)	O
{	O
unsigned	O
i	int
;	O
int	O
rc	int
=	O
grecs_symtab_get_index	function
(	O
&	O
i	int
,	O
st	pointer
,	O
key	pointer
,	O
install	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
install	pointer
&&	O
*	O
install	pointer
==	O
1	int
)	O
{	O
struct	O
grecs_syment	struct
*	O
ent	pointer
=	O
syment_alloc	function
(	O
st	pointer
,	O
key	pointer
)	O
;	O
if	O
(	O
!	O
ent	pointer
)	O
{	O
errno	O
=	O
ENOMEM	int
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
st	pointer
->	O
itr_level	int
)	O
{	O
symtab_defer_op	function
(	O
st	pointer
,	O
defer_add	int
,	O
ent	pointer
)	O
;	O
}	O
else	O
{	O
st	pointer
->	O
tab	pointer
[	O
i	int
]	O
=	O
ent	pointer
;	O
st	pointer
->	O
elcount	long
++	O
;	O
}	O
return	O
ent	pointer
;	O
}	O
else	O
return	O
st	pointer
->	O
tab	pointer
[	O
i	int
]	O
;	O
}	O
else	O
if	O
(	O
rc	int
==	O
ENOENT	int
&&	O
st	pointer
->	O
itr_level	int
)	O
{	O
void	O
*	O
ptr	pointer
=	O
grecs_list_locate	function
(	O
st	pointer
->	O
defer_list	array
[	O
defer_add	int
]	O
,	O
key	pointer
)	O
;	O
if	O
(	O
ptr	pointer
)	O
return	O
ptr	pointer
;	O
rc	int
=	O
ENOENT	int
;	O
}	O
errno	O
=	O
rc	int
;	O
return	O
NULL	O
;	O
}	O
void	O
grecs_symtab_clear	function
(	O
struct	O
grecs_symtab	struct
*	O
st	pointer
)	O
{	O
unsigned	O
i	int
,	O
hs	int
;	O
if	O
(	O
!	O
st	pointer
||	O
!	O
st	pointer
->	O
tab	pointer
)	O
return	O
;	O
hs	int
=	O
hash_size	array
[	O
st	pointer
->	O
hash_num	int
]	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
hs	int
;	O
i	int
++	O
)	O
{	O
struct	O
grecs_syment	struct
*	O
elem	pointer
=	O
st	pointer
->	O
tab	pointer
[	O
i	int
]	O
;	O
if	O
(	O
elem	pointer
)	O
{	O
syment_free	function
(	O
st	pointer
,	O
elem	pointer
)	O
;	O
st	pointer
->	O
tab	pointer
[	O
i	int
]	O
=	O
NULL	O
;	O
}	O
}	O
st	pointer
->	O
elcount	long
=	O
0	int
;	O
}	O
struct	O
grecs_symtab	struct
*	O
grecs_symtab_create	function
(	O
size_t	long
elsize	long
,	O
unsigned	O
(	O
*	O
hash_fun	pointer
)	O
(	O
void	O
*	O
,	O
unsigned	O
long	O
)	O
,	O
int	O
(	O
*	O
cmp_fun	pointer
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
)	O
,	O
int	O
(	O
*	O
copy_fun	pointer
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
(	O
*	O
alloc_fun	pointer
)	O
(	O
size_t	long
)	O
,	O
void	O
(	O
*	O
free_fun	pointer
)	O
(	O
void	O
*	O
)	O
)	O
{	O
struct	O
grecs_symtab	struct
*	O
st	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
st	pointer
)	O
)	O
;	O
if	O
(	O
st	pointer
)	O
{	O
memset	function
(	O
st	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
st	pointer
)	O
)	O
;	O
st	pointer
->	O
elsize	long
=	O
elsize	long
;	O
st	pointer
->	O
elcount	long
=	O
0	int
;	O
st	pointer
->	O
hash_fun	pointer
=	O
hash_fun	pointer
?	O
hash_fun	pointer
:	O
def_hash	function
;	O
st	pointer
->	O
cmp_fun	pointer
=	O
cmp_fun	pointer
?	O
cmp_fun	pointer
:	O
def_cmp	function
;	O
st	pointer
->	O
copy_fun	pointer
=	O
copy_fun	pointer
?	O
copy_fun	pointer
:	O
def_copy	function
;	O
st	pointer
->	O
syment_alloc_fun	pointer
=	O
alloc_fun	pointer
;	O
if	O
(	O
free_fun	pointer
)	O
st	pointer
->	O
syment_free_fun	pointer
=	O
free_fun	pointer
;	O
else	O
if	O
(	O
!	O
copy_fun	pointer
)	O
st	pointer
->	O
syment_free_fun	pointer
=	O
def_free_fun	function
;	O
else	O
st	pointer
->	O
syment_free_fun	pointer
=	O
NULL	O
;	O
st	pointer
->	O
tab	pointer
=	O
calloc	function
(	O
hash_size	array
[	O
st	pointer
->	O
hash_num	int
]	O
,	O
sizeof	O
(	O
*	O
st	pointer
->	O
tab	pointer
)	O
)	O
;	O
if	O
(	O
!	O
st	pointer
->	O
tab	pointer
)	O
{	O
free	function
(	O
st	pointer
)	O
;	O
st	pointer
=	O
NULL	O
;	O
}	O
}	O
return	O
st	pointer
;	O
}	O
struct	O
grecs_symtab	struct
*	O
grecs_symtab_create_default	function
(	O
size_t	long
elsize	long
)	O
{	O
return	O
grecs_symtab_create	function
(	O
elsize	long
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
void	O
grecs_symtab_free	function
(	O
struct	O
grecs_symtab	struct
*	O
st	pointer
)	O
{	O
if	O
(	O
st	pointer
)	O
{	O
grecs_symtab_clear	function
(	O
st	pointer
)	O
;	O
grecs_list_free	function
(	O
st	pointer
->	O
defer_list	array
[	O
defer_add	int
]	O
)	O
;	O
grecs_list_free	function
(	O
st	pointer
->	O
defer_list	array
[	O
defer_del	int
]	O
)	O
;	O
free	function
(	O
st	pointer
->	O
tab	pointer
)	O
;	O
free	function
(	O
st	pointer
)	O
;	O
}	O
}	O
size_t	long
grecs_symtab_count	function
(	O
struct	O
grecs_symtab	struct
*	O
st	pointer
)	O
{	O
return	O
st	pointer
->	O
elcount	long
;	O
}	O
int	O
grecs_symtab_foreach	function
(	O
struct	O
grecs_symtab	struct
*	O
st	pointer
,	O
grecs_symtab_enumerator_t	pointer
fun	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
unsigned	O
i	int
;	O
struct	O
grecs_syment	struct
*	O
ep	pointer
;	O
if	O
(	O
!	O
st	pointer
)	O
return	O
0	int
;	O
++	O
st	pointer
->	O
itr_level	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
hash_size	array
[	O
st	pointer
->	O
hash_num	int
]	O
;	O
i	int
++	O
)	O
{	O
ep	pointer
=	O
st	pointer
->	O
tab	pointer
[	O
i	int
]	O
;	O
if	O
(	O
ep	pointer
&&	O
!	O
grecs_list_locate	function
(	O
st	pointer
->	O
defer_list	array
[	O
defer_del	int
]	O
,	O
ep	pointer
)	O
)	O
{	O
int	O
rc	int
=	O
fun	pointer
(	O
ep	pointer
,	O
data	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
}	O
if	O
(	O
--	O
st	pointer
->	O
itr_level	int
==	O
0	int
)	O
{	O
while	O
(	O
(	O
ep	pointer
=	O
grecs_list_pop	function
(	O
st	pointer
->	O
defer_list	array
[	O
defer_del	int
]	O
)	O
)	O
!=	O
NULL	O
)	O
grecs_symtab_remove	function
(	O
st	pointer
,	O
ep	pointer
)	O
;	O
while	O
(	O
(	O
ep	pointer
=	O
grecs_list_pop	function
(	O
st	pointer
->	O
defer_list	array
[	O
defer_add	int
]	O
)	O
)	O
!=	O
NULL	O
)	O
{	O
int	O
install	pointer
=	O
1	int
;	O
if	O
(	O
grecs_symtab_get_index	function
(	O
&	O
i	int
,	O
st	pointer
,	O
ep	pointer
,	O
&	O
install	pointer
)	O
==	O
0	int
)	O
{	O
st	pointer
->	O
tab	pointer
[	O
i	int
]	O
=	O
ep	pointer
;	O
st	pointer
->	O
elcount	long
++	O
;	O
}	O
}	O
}	O
return	O
0	int
;	O
}	O