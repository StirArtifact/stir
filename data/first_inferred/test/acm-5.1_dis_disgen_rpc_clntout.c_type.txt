static	O
char	O
rcsid	array
[	O
]	O
=	O
"$Id: rpc_clntout.c,v 1.1.1.1 2005/10/28 14:46:46 k0ro Exp $"	*
;	O
static	O
int	O
write_program	function
(	O
)	O
,	O
printbody	function
(	O
)	O
;	O
void	O
write_stubs	function
(	O
)	O
{	O
list	*
*	O
l	*
;	O
definition	struct
*	O
def	*
;	O
f_print	function
(	O
fout	*
,	O
"\n/* Default timeout can be changed using clnt_control() */\n"	*
)	O
;	O
f_print	function
(	O
fout	*
,	O
"static struct timeval TIMEOUT = { %d, 0 };\n"	*
,	O
DEFAULT_TIMEOUT	*
)	O
;	O
for	O
(	O
l	*
=	O
defined	*
;	O
l	*
!=	O
NULL	O
;	O
l	*
=	O
l	*
->	O
next	*
)	O
{	O
def	*
=	O
(	O
definition	enum
*	O
)	O
l	*
->	O
val	int
;	O
if	O
(	O
def	*
->	O
def_kind	int
==	O
DEF_PROGRAM	int
)	O
{	O
write_program	function
(	O
def	*
)	O
;	O
}	O
}	O
}	O
static	O
write_program	function
(	O
def	*
)	O
definition	struct
*	O
def	*
;	O
{	O
version_list	struct
*	O
vp	*
;	O
proc_list	struct
*	O
proc	int
;	O
for	O
(	O
vp	*
=	O
def	*
->	O
def	*
.	O
pr	struct
.	O
versions	*
;	O
vp	*
!=	O
NULL	O
;	O
vp	*
=	O
vp	*
->	O
next	*
)	O
{	O
for	O
(	O
proc	int
=	O
vp	*
->	O
procs	O
;	O
proc	O
!=	O
NULL	O
;	O
proc	int
=	O
proc	O
->	O
next	*
)	O
{	O
f_print	function
(	O
fout	*
,	O
"\n"	*
)	O
;	O
ptype	function
(	O
proc	O
->	O
res_prefix	*
,	O
proc	O
->	O
res_type	*
,	O
1	int
)	O
;	O
f_print	function
(	O
fout	*
,	O
"*\n"	*
)	O
;	O
pvname	function
(	O
proc	O
->	O
proc_name	*
,	O
vp	*
->	O
vers_num	*
)	O
;	O
f_print	function
(	O
fout	*
,	O
"(argp, clnt)\n"	*
)	O
;	O
f_print	function
(	O
fout	*
,	O
"\t"	*
)	O
;	O
ptype	function
(	O
proc	O
->	O
arg_prefix	*
,	O
proc	O
->	O
arg_type	*
,	O
1	int
)	O
;	O
f_print	function
(	O
fout	*
,	O
"*argp;\n"	*
)	O
;	O
f_print	function
(	O
fout	*
,	O
"\tCLIENT *clnt;\n"	*
)	O
;	O
f_print	function
(	O
fout	*
,	O
"{\n"	*
)	O
;	O
printbody	function
(	O
proc	int
)	O
;	O
f_print	function
(	O
fout	*
,	O
"}\n\n"	*
)	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
ampr	function
(	O
type	*
)	O
char	O
*	O
type	*
;	O
{	O
if	O
(	O
isvectordef	function
(	O
type	*
,	O
REL_ALIAS	*
)	O
)	O
{	O
return	O
(	O
""	*
)	O
;	O
}	O
else	O
{	O
return	O
(	O
"&"	*
)	O
;	O
}	O
}	O
static	O
printbody	function
(	O
proc	int
)	O
proc_list	enum
*	O
proc	int
;	O
{	O
f_print	function
(	O
fout	*
,	O
"\tstatic "	*
)	O
;	O
if	O
(	O
streq	function
(	O
proc	O
->	O
res_type	*
,	O
"void"	*
)	O
)	O
{	O
f_print	function
(	O
fout	*
,	O
"char "	*
)	O
;	O
}	O
else	O
{	O
ptype	function
(	O
proc	int
->	O
res_prefix	*
,	O
proc	int
->	O
res_type	*
,	O
0	int
)	O
;	O
}	O
f_print	function
(	O
fout	*
,	O
"res;\n"	*
)	O
;	O
f_print	function
(	O
fout	*
,	O
"\n"	*
)	O
;	O
f_print	function
(	O
fout	*
,	O
"\tbzero((char *)%sres, sizeof(res));\n"	*
,	O
ampr	function
(	O
proc	int
->	O
res_type	*
)	O
)	O
;	O
f_print	function
(	O
fout	*
,	O
"\tif (clnt_call(clnt, %s, xdr_%s, argp, xdr_%s, %sres, TIMEOUT) != RPC_SUCCESS) {\n"	*
,	O
proc	int
->	O
proc_name	*
,	O
stringfix	function
(	O
proc	O
->	O
arg_type	*
)	O
,	O
stringfix	function
(	O
proc	O
->	O
res_type	*
)	O
,	O
ampr	function
(	O
proc	int
->	O
res_type	*
)	O
)	O
;	O
f_print	function
(	O
fout	*
,	O
"\t\treturn (NULL);\n"	*
)	O
;	O
f_print	function
(	O
fout	*
,	O
"\t}\n"	*
)	O
;	O
if	O
(	O
streq	function
(	O
proc	O
->	O
res_type	*
,	O
"void"	*
)	O
)	O
{	O
f_print	function
(	O
fout	*
,	O
"\treturn ((void *)%sres);\n"	*
,	O
ampr	function
(	O
proc	int
->	O
res_type	*
)	O
)	O
;	O
}	O
else	O
{	O
f_print	function
(	O
fout	*
,	O
"\treturn (%sres);\n"	*
,	O
ampr	function
(	O
proc	int
->	O
res_type	*
)	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O