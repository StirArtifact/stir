int	O
mpn_bsqrtinv	O
(	O
mp_ptr	*
rp	*
,	O
mp_srcptr	*
yp	*
,	O
mp_bitcnt_t	long
bnb	*
,	O
mp_ptr	*
tp	*
)	O
{	O
mp_ptr	*
tp2	*
,	O
tp3	*
;	O
mp_limb_t	long
k	long
;	O
mp_size_t	long
bn	long
,	O
order	array
[	O
GMP_LIMB_BITS	int
+	O
1	int
]	O
;	O
int	O
i	long
,	O
d	long
;	O
ASSERT	O
(	O
bnb	long
>	O
0	int
)	O
;	O
bn	long
=	O
1	int
+	O
bnb	int
/	O
GMP_LIMB_BITS	int
;	O
tp2	*
=	O
tp	*
+	O
bn	long
;	O
tp3	*
=	O
tp	*
+	O
2	int
*	O
bn	long
;	O
k	long
=	O
3	int
;	O
rp	*
[	O
0	int
]	O
=	O
1	int
;	O
if	O
(	O
bnb	int
==	O
1	int
)	O
{	O
if	O
(	O
(	O
yp	*
[	O
0	int
]	O
&	O
3	int
)	O
!=	O
1	int
)	O
return	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
(	O
yp	*
[	O
0	int
]	O
&	O
7	int
)	O
!=	O
1	int
)	O
return	O
0	int
;	O
d	long
=	O
0	int
;	O
for	O
(	O
;	O
bnb	long
!=	O
2	int
;	O
bnb	long
=	O
(	O
bnb	long
+	O
2	int
)	O
>>	O
1	int
)	O
order	array
[	O
d	long
++	O
]	O
=	O
bnb	int
;	O
for	O
(	O
i	long
=	O
d	long
-	O
1	int
;	O
i	long
>=	O
0	int
;	O
i	long
--	O
)	O
{	O
bnb	long
=	O
order	*
[	O
i	long
]	O
;	O
bn	long
=	O
1	int
+	O
bnb	int
/	O
GMP_LIMB_BITS	int
;	O
mpn_mul_1	O
(	O
tp	*
,	O
rp	*
,	O
bn	long
,	O
k	long
)	O
;	O
mpn_powlo	O
(	O
tp2	*
,	O
rp	*
,	O
&	O
k	long
,	O
1	int
,	O
bn	long
,	O
tp3	*
)	O
;	O
mpn_mullo_n	O
(	O
rp	*
,	O
yp	*
,	O
tp2	*
,	O
bn	long
)	O
;	O
mpn_rsh1sub_n	O
(	O
rp	*
,	O
tp	*
,	O
rp	*
,	O
bn	long
)	O
;	O
}	O
}	O
return	O
1	int
;	O
}	O