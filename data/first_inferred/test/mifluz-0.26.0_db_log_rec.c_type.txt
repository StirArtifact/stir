static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: log_rec.c,v 1.4 2014/04/17 20:27:30 sebdiaz Exp $"	pointer
;	O
static	O
int	O
__log_do_open	function
__P	O
(	O
(	O
DB_ENV	struct
*	O
,	O
DB_LOG	struct
*	O
,	O
u_int8_t	char
*	O
,	O
char	O
*	O
,	O
DBTYPE	enum
,	O
int32_t	int
,	O
db_pgno_t	int
)	O
)	O
;	O
static	O
int	O
__log_lid_to_fname	function
__P	O
(	O
(	O
DB_LOG	struct
*	O
,	O
int32_t	int
,	O
FNAME	struct
*	O
*	O
)	O
)	O
;	O
static	O
int	O
__log_open_file	function
__P	O
(	O
(	O
DB_ENV	struct
*	O
,	O
DB_LOG	struct
*	O
,	O
__log_register_args	struct
*	O
)	O
)	O
;	O
int	O
CDB___log_register_recover	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
op	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
op	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
if	O
(	O
lsnp	pointer
)	O
{	O
}	O
DB_ENTRY	struct
*	O
dbe	pointer
;	O
DB_LOG	struct
*	O
logp	pointer
;	O
DB	struct
*	O
dbp	pointer
;	O
__log_register_args	struct
*	O
argp	pointer
;	O
int	O
do_rem	int
,	O
ret	int
,	O
t_ret	int
;	O
logp	pointer
=	O
dbenv	pointer
->	O
lg_handle	pointer
;	O
dbp	pointer
=	O
NULL	O
;	O
COMPQUIET	O
(	O
lsnp	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___log_register_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
if	O
(	O
(	O
argp	pointer
->	O
opcode	int
==	O
LOG_OPEN	int
&&	O
(	O
DB_REDO	O
(	O
op	enum
)	O
||	O
op	enum
==	O
DB_TXN_OPENFILES	int
)	O
)	O
||	O
(	O
argp	pointer
->	O
opcode	int
==	O
LOG_CLOSE	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
)	O
{	O
if	O
(	O
op	enum
==	O
DB_TXN_OPENFILES	int
)	O
F_SET	O
(	O
logp	pointer
,	O
DBLOG_FORCE_OPEN	int
)	O
;	O
ret	int
=	O
__log_open_file	function
(	O
dbenv	pointer
,	O
logp	pointer
,	O
argp	pointer
)	O
;	O
F_CLR	O
(	O
logp	pointer
,	O
DBLOG_FORCE_OPEN	int
)	O
;	O
if	O
(	O
ret	int
==	O
ENOENT	int
||	O
ret	int
==	O
EINVAL	int
)	O
{	O
if	O
(	O
op	enum
==	O
DB_TXN_OPENFILES	int
&&	O
argp	pointer
->	O
name	pointer
.	O
size	int
!=	O
0	int
&&	O
(	O
ret	int
=	O
CDB___db_txnlist_delete	function
(	O
dbenv	pointer
,	O
info	pointer
,	O
argp	pointer
->	O
name	pointer
.	O
data	pointer
,	O
argp	pointer
->	O
fileid	array
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
ret	int
=	O
0	int
;	O
}	O
}	O
else	O
if	O
(	O
argp	pointer
->	O
opcode	int
!=	O
LOG_CHECKPOINT	int
)	O
{	O
do_rem	int
=	O
0	int
;	O
MUTEX_THREAD_LOCK	O
(	O
logp	pointer
->	O
mutexp	pointer
)	O
;	O
if	O
(	O
argp	pointer
->	O
fileid	array
<	O
logp	pointer
->	O
dbentry_cnt	int
)	O
{	O
dbe	pointer
=	O
&	O
logp	pointer
->	O
dbentry	pointer
[	O
argp	pointer
->	O
fileid	array
]	O
;	O
if	O
(	O
dbe	pointer
->	O
refcount	int
==	O
1	int
)	O
{	O
ret	int
=	O
CDB___db_txnlist_close	function
(	O
info	pointer
,	O
argp	pointer
->	O
fileid	array
,	O
dbe	pointer
->	O
count	int
)	O
;	O
if	O
(	O
(	O
dbp	pointer
=	O
TAILQ_FIRST	O
(	O
&	O
dbe	pointer
->	O
dblist	struct
)	O
)	O
!=	O
NULL	O
)	O
(	O
void	O
)	O
CDB_log_unregister	function
(	O
dbenv	pointer
,	O
dbp	pointer
)	O
;	O
do_rem	int
=	O
1	int
;	O
}	O
else	O
dbe	pointer
->	O
refcount	int
--	O
;	O
}	O
MUTEX_THREAD_UNLOCK	O
(	O
logp	pointer
->	O
mutexp	pointer
)	O
;	O
if	O
(	O
do_rem	int
)	O
{	O
(	O
void	O
)	O
CDB___log_rem_logid	function
(	O
logp	pointer
,	O
dbp	pointer
,	O
argp	pointer
->	O
fileid	array
)	O
;	O
if	O
(	O
dbp	pointer
!=	O
NULL	O
&&	O
(	O
t_ret	int
=	O
dbp	pointer
->	O
close	pointer
(	O
dbp	pointer
,	O
dbp	pointer
->	O
mpf	pointer
==	O
NULL	O
?	O
DB_NOSYNC	int
:	O
0	int
)	O
)	O
!=	O
0	int
&&	O
ret	int
==	O
0	int
)	O
ret	int
=	O
t_ret	int
;	O
}	O
}	O
else	O
if	O
(	O
DB_UNDO	O
(	O
op	enum
)	O
||	O
op	enum
==	O
DB_TXN_OPENFILES	int
)	O
{	O
ret	int
=	O
__log_open_file	function
(	O
dbenv	pointer
,	O
logp	pointer
,	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
==	O
ENOENT	int
||	O
ret	int
==	O
EINVAL	int
)	O
{	O
if	O
(	O
argp	pointer
->	O
name	pointer
.	O
size	int
!=	O
0	int
&&	O
(	O
ret	int
=	O
CDB___db_txnlist_delete	function
(	O
dbenv	pointer
,	O
info	pointer
,	O
argp	pointer
->	O
name	pointer
.	O
data	pointer
,	O
argp	pointer
->	O
fileid	array
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
ret	int
=	O
0	int
;	O
}	O
}	O
out	O
:	O
if	O
(	O
argp	pointer
!=	O
NULL	O
)	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
static	O
int	O
__log_open_file	function
(	O
dbenv	pointer
,	O
lp	pointer
,	O
argp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_LOG	struct
*	O
lp	pointer
;	O
__log_register_args	struct
*	O
argp	pointer
;	O
{	O
DB_ENTRY	struct
*	O
dbe	pointer
;	O
DB	struct
*	O
dbp	pointer
;	O
if	O
(	O
argp	pointer
->	O
name	pointer
.	O
size	int
==	O
0	int
)	O
{	O
(	O
void	O
)	O
CDB___log_add_logid	function
(	O
dbenv	pointer
,	O
lp	pointer
,	O
NULL	O
,	O
argp	pointer
->	O
fileid	array
)	O
;	O
return	O
(	O
ENOENT	int
)	O
;	O
}	O
MUTEX_THREAD_LOCK	O
(	O
lp	pointer
->	O
mutexp	pointer
)	O
;	O
if	O
(	O
argp	pointer
->	O
fileid	array
<	O
lp	pointer
->	O
dbentry_cnt	int
)	O
dbe	pointer
=	O
&	O
lp	pointer
->	O
dbentry	pointer
[	O
argp	pointer
->	O
fileid	array
]	O
;	O
else	O
dbe	pointer
=	O
NULL	O
;	O
if	O
(	O
dbe	pointer
!=	O
NULL	O
)	O
{	O
dbe	pointer
->	O
deleted	int
=	O
0	int
;	O
if	O
(	O
(	O
dbp	pointer
=	O
TAILQ_FIRST	O
(	O
&	O
dbe	pointer
->	O
dblist	struct
)	O
)	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
dbp	pointer
->	O
meta_pgno	int
!=	O
argp	pointer
->	O
meta_pgno	int
||	O
memcmp	function
(	O
dbp	pointer
->	O
fileid	array
,	O
argp	pointer
->	O
uid	array
.	O
data	pointer
,	O
DB_FILE_ID_LEN	int
)	O
!=	O
0	int
)	O
{	O
MUTEX_THREAD_UNLOCK	O
(	O
lp	pointer
->	O
mutexp	pointer
)	O
;	O
goto	O
reopen	O
;	O
}	O
if	O
(	O
!	O
F_ISSET	O
(	O
lp	pointer
,	O
DBLOG_RECOVER	int
)	O
)	O
dbe	pointer
->	O
refcount	int
++	O
;	O
MUTEX_THREAD_UNLOCK	O
(	O
lp	pointer
->	O
mutexp	pointer
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
}	O
MUTEX_THREAD_UNLOCK	O
(	O
lp	pointer
->	O
mutexp	pointer
)	O
;	O
if	O
(	O
0	int
)	O
{	O
reopen	O
:	O
(	O
void	O
)	O
CDB_log_unregister	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
dbp	pointer
)	O
;	O
(	O
void	O
)	O
CDB___log_rem_logid	function
(	O
lp	pointer
,	O
dbp	pointer
,	O
argp	pointer
->	O
fileid	array
)	O
;	O
dbp	pointer
->	O
close	pointer
(	O
dbp	pointer
,	O
0	int
)	O
;	O
}	O
return	O
(	O
__log_do_open	function
(	O
dbenv	pointer
,	O
lp	pointer
,	O
argp	pointer
->	O
uid	array
.	O
data	pointer
,	O
argp	pointer
->	O
name	pointer
.	O
data	pointer
,	O
argp	pointer
->	O
ftype	int
,	O
argp	pointer
->	O
fileid	array
,	O
argp	pointer
->	O
meta_pgno	int
)	O
)	O
;	O
}	O
int	O
CDB___log_reopen_file	function
(	O
dbenv	pointer
,	O
name	pointer
,	O
ndx	int
,	O
fileid	array
,	O
meta_pgno	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
char	O
*	O
name	pointer
;	O
int32_t	int
ndx	int
;	O
u_int8_t	char
*	O
fileid	array
;	O
db_pgno_t	int
meta_pgno	int
;	O
{	O
DB	struct
*	O
dbp	pointer
;	O
DB_LOG	struct
*	O
logp	pointer
;	O
DBTYPE	enum
ftype	int
;	O
int	O
ret	int
;	O
logp	pointer
=	O
dbenv	pointer
->	O
lg_handle	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_fileid_to_db	function
(	O
dbenv	pointer
,	O
&	O
dbp	pointer
,	O
ndx	int
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
ftype	int
=	O
dbp	pointer
->	O
type	enum
;	O
(	O
void	O
)	O
CDB_log_unregister	function
(	O
dbenv	pointer
,	O
dbp	pointer
)	O
;	O
(	O
void	O
)	O
CDB___log_rem_logid	function
(	O
logp	pointer
,	O
dbp	pointer
,	O
ndx	int
)	O
;	O
(	O
void	O
)	O
dbp	pointer
->	O
close	pointer
(	O
dbp	pointer
,	O
0	int
)	O
;	O
ret	int
=	O
__log_do_open	function
(	O
dbenv	pointer
,	O
logp	pointer
,	O
fileid	array
,	O
name	pointer
,	O
ftype	int
,	O
ndx	int
,	O
meta_pgno	int
)	O
;	O
out	O
:	O
return	O
(	O
ret	int
)	O
;	O
}	O
static	O
int	O
__log_do_open	function
(	O
dbenv	pointer
,	O
lp	pointer
,	O
uid	array
,	O
name	pointer
,	O
ftype	int
,	O
ndx	int
,	O
meta_pgno	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_LOG	struct
*	O
lp	pointer
;	O
u_int8_t	char
*	O
uid	array
;	O
char	O
*	O
name	pointer
;	O
DBTYPE	enum
ftype	int
;	O
int32_t	int
ndx	int
;	O
db_pgno_t	int
meta_pgno	int
;	O
{	O
DB	struct
*	O
dbp	pointer
;	O
int	O
ret	int
;	O
u_int8_t	char
zeroid	array
[	O
DB_FILE_ID_LEN	int
]	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_db_create	function
(	O
&	O
dbp	pointer
,	O
lp	pointer
->	O
dbenv	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
dbp	pointer
->	O
log_fileid	int
=	O
ndx	int
;	O
F_SET	O
(	O
dbp	pointer
,	O
DB_AM_RECOVER	int
)	O
;	O
if	O
(	O
meta_pgno	int
!=	O
PGNO_BASE_MD	int
)	O
memcpy	function
(	O
dbp	pointer
->	O
fileid	array
,	O
uid	array
,	O
DB_FILE_ID_LEN	int
)	O
;	O
dbp	pointer
->	O
type	enum
=	O
ftype	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_dbopen	function
(	O
dbp	pointer
,	O
name	pointer
,	O
0	int
,	O
0600	int
,	O
meta_pgno	int
)	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
memcmp	function
(	O
uid	array
,	O
dbp	pointer
->	O
fileid	array
,	O
DB_FILE_ID_LEN	int
)	O
!=	O
0	int
)	O
{	O
memset	function
(	O
zeroid	array
,	O
0	int
,	O
DB_FILE_ID_LEN	int
)	O
;	O
if	O
(	O
memcmp	function
(	O
dbp	pointer
->	O
fileid	array
,	O
zeroid	array
,	O
DB_FILE_ID_LEN	int
)	O
!=	O
0	int
)	O
goto	O
not_right	O
;	O
memcpy	function
(	O
dbp	pointer
->	O
fileid	array
,	O
uid	array
,	O
DB_FILE_ID_LEN	int
)	O
;	O
}	O
if	O
(	O
IS_RECOVERING	O
(	O
dbenv	pointer
)	O
)	O
{	O
(	O
void	O
)	O
CDB_log_register	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
dbp	pointer
,	O
name	pointer
)	O
;	O
(	O
void	O
)	O
CDB___log_add_logid	function
(	O
dbenv	pointer
,	O
lp	pointer
,	O
dbp	pointer
,	O
ndx	int
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
not_right	O
:	O
(	O
void	O
)	O
dbp	pointer
->	O
close	pointer
(	O
dbp	pointer
,	O
0	int
)	O
;	O
(	O
void	O
)	O
CDB___log_add_logid	function
(	O
dbenv	pointer
,	O
lp	pointer
,	O
NULL	O
,	O
ndx	int
)	O
;	O
return	O
(	O
ENOENT	int
)	O
;	O
}	O
int	O
CDB___log_add_logid	function
(	O
dbenv	pointer
,	O
logp	pointer
,	O
dbp	pointer
,	O
ndx	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_LOG	struct
*	O
logp	pointer
;	O
DB	struct
*	O
dbp	pointer
;	O
int32_t	int
ndx	int
;	O
{	O
int32_t	int
i	int
;	O
int	O
ret	int
;	O
ret	int
=	O
0	int
;	O
MUTEX_THREAD_LOCK	O
(	O
logp	pointer
->	O
mutexp	pointer
)	O
;	O
if	O
(	O
logp	pointer
->	O
dbentry_cnt	int
<=	O
ndx	int
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_realloc	function
(	O
dbenv	pointer
,	O
(	O
ndx	int
+	O
DB_GROW_SIZE	int
)	O
*	O
sizeof	O
(	O
DB_ENTRY	struct
)	O
,	O
NULL	O
,	O
&	O
logp	pointer
->	O
dbentry	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
for	O
(	O
i	int
=	O
logp	pointer
->	O
dbentry_cnt	int
;	O
i	int
<	O
ndx	int
+	O
DB_GROW_SIZE	int
;	O
i	int
++	O
)	O
{	O
logp	pointer
->	O
dbentry	pointer
[	O
i	int
]	O
.	O
count	int
=	O
0	int
;	O
TAILQ_INIT	O
(	O
&	O
logp	pointer
->	O
dbentry	pointer
[	O
i	int
]	O
.	O
dblist	struct
)	O
;	O
logp	pointer
->	O
dbentry	pointer
[	O
i	int
]	O
.	O
deleted	int
=	O
0	int
;	O
logp	pointer
->	O
dbentry	pointer
[	O
i	int
]	O
.	O
refcount	int
=	O
0	int
;	O
}	O
logp	pointer
->	O
dbentry_cnt	int
=	O
i	int
;	O
}	O
if	O
(	O
logp	pointer
->	O
dbentry	pointer
[	O
ndx	int
]	O
.	O
deleted	int
==	O
0	int
&&	O
TAILQ_FIRST	O
(	O
&	O
logp	pointer
->	O
dbentry	pointer
[	O
ndx	int
]	O
.	O
dblist	struct
)	O
==	O
NULL	O
)	O
{	O
logp	pointer
->	O
dbentry	pointer
[	O
ndx	int
]	O
.	O
count	int
=	O
0	int
;	O
if	O
(	O
dbp	pointer
!=	O
NULL	O
)	O
TAILQ_INSERT_HEAD	O
(	O
&	O
logp	pointer
->	O
dbentry	pointer
[	O
ndx	int
]	O
.	O
dblist	struct
,	O
dbp	pointer
,	O
links	struct
)	O
;	O
logp	pointer
->	O
dbentry	pointer
[	O
ndx	int
]	O
.	O
deleted	int
=	O
dbp	pointer
==	O
NULL	O
;	O
logp	pointer
->	O
dbentry	pointer
[	O
ndx	int
]	O
.	O
refcount	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
!	O
F_ISSET	O
(	O
logp	pointer
,	O
DBLOG_RECOVER	int
)	O
)	O
{	O
if	O
(	O
dbp	pointer
!=	O
NULL	O
)	O
TAILQ_INSERT_HEAD	O
(	O
&	O
logp	pointer
->	O
dbentry	pointer
[	O
ndx	int
]	O
.	O
dblist	struct
,	O
dbp	pointer
,	O
links	struct
)	O
;	O
logp	pointer
->	O
dbentry	pointer
[	O
ndx	int
]	O
.	O
refcount	int
++	O
;	O
}	O
err	pointer
:	O
MUTEX_THREAD_UNLOCK	O
(	O
logp	pointer
->	O
mutexp	pointer
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___db_fileid_to_db	function
(	O
dbenv	pointer
,	O
dbpp	pointer
,	O
ndx	int
,	O
inc	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB	struct
*	O
*	O
dbpp	pointer
;	O
int32_t	int
ndx	int
;	O
int	O
inc	int
;	O
{	O
DB_LOG	struct
*	O
logp	pointer
;	O
DB	struct
*	O
dbp	pointer
;	O
FNAME	struct
*	O
fname	pointer
;	O
int	O
ret	int
;	O
char	O
*	O
name	pointer
;	O
ret	int
=	O
0	int
;	O
logp	pointer
=	O
dbenv	pointer
->	O
lg_handle	pointer
;	O
MUTEX_THREAD_LOCK	O
(	O
logp	pointer
->	O
mutexp	pointer
)	O
;	O
if	O
(	O
ndx	int
>=	O
logp	pointer
->	O
dbentry_cnt	int
||	O
(	O
!	O
logp	pointer
->	O
dbentry	pointer
[	O
ndx	int
]	O
.	O
deleted	int
&&	O
(	O
dbp	pointer
=	O
TAILQ_FIRST	O
(	O
&	O
logp	pointer
->	O
dbentry	pointer
[	O
ndx	int
]	O
.	O
dblist	struct
)	O
)	O
==	O
NULL	O
)	O
)	O
{	O
if	O
(	O
F_ISSET	O
(	O
logp	pointer
,	O
DBLOG_RECOVER	int
)	O
)	O
{	O
ret	int
=	O
ENOENT	int
;	O
goto	O
err	pointer
;	O
}	O
if	O
(	O
__log_lid_to_fname	function
(	O
logp	pointer
,	O
ndx	int
,	O
&	O
fname	pointer
)	O
!=	O
0	int
)	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"Missing log fileid entry"	pointer
)	O
;	O
ret	int
=	O
EINVAL	int
;	O
goto	O
err	pointer
;	O
}	O
name	pointer
=	O
R_ADDR	O
(	O
&	O
logp	pointer
->	O
reginfo	pointer
,	O
fname	pointer
->	O
name_off	int
)	O
;	O
MUTEX_THREAD_UNLOCK	O
(	O
logp	pointer
->	O
mutexp	pointer
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
__log_do_open	function
(	O
dbenv	pointer
,	O
logp	pointer
,	O
fname	pointer
->	O
ufid	array
,	O
name	pointer
,	O
fname	pointer
->	O
s_type	enum
,	O
ndx	int
,	O
fname	pointer
->	O
meta_pgno	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
*	O
dbpp	pointer
=	O
TAILQ_FIRST	O
(	O
&	O
logp	pointer
->	O
dbentry	pointer
[	O
ndx	int
]	O
.	O
dblist	struct
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
if	O
(	O
logp	pointer
->	O
dbentry	pointer
[	O
ndx	int
]	O
.	O
deleted	int
)	O
{	O
ret	int
=	O
DB_DELETED	O
;	O
if	O
(	O
inc	int
)	O
logp	pointer
->	O
dbentry	pointer
[	O
ndx	int
]	O
.	O
count	int
++	O
;	O
goto	O
err	pointer
;	O
}	O
if	O
(	O
(	O
*	O
dbpp	pointer
=	O
TAILQ_FIRST	O
(	O
&	O
logp	pointer
->	O
dbentry	pointer
[	O
ndx	int
]	O
.	O
dblist	struct
)	O
)	O
==	O
NULL	O
)	O
ret	int
=	O
ENOENT	int
;	O
err	pointer
:	O
MUTEX_THREAD_UNLOCK	O
(	O
logp	pointer
->	O
mutexp	pointer
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
void	O
CDB___log_close_files	function
(	O
dbenv	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
{	O
DB_ENTRY	struct
*	O
dbe	pointer
;	O
DB_LOG	struct
*	O
logp	pointer
;	O
DB	struct
*	O
dbp	pointer
;	O
int32_t	int
i	int
;	O
logp	pointer
=	O
dbenv	pointer
->	O
lg_handle	pointer
;	O
MUTEX_THREAD_LOCK	O
(	O
logp	pointer
->	O
mutexp	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
logp	pointer
->	O
dbentry_cnt	int
;	O
i	int
++	O
)	O
{	O
dbe	pointer
=	O
&	O
logp	pointer
->	O
dbentry	pointer
[	O
i	int
]	O
;	O
while	O
(	O
(	O
dbp	pointer
=	O
TAILQ_FIRST	O
(	O
&	O
dbe	pointer
->	O
dblist	struct
)	O
)	O
!=	O
NULL	O
)	O
{	O
(	O
void	O
)	O
CDB_log_unregister	function
(	O
dbenv	pointer
,	O
dbp	pointer
)	O
;	O
TAILQ_REMOVE	O
(	O
&	O
dbe	pointer
->	O
dblist	struct
,	O
dbp	pointer
,	O
links	struct
)	O
;	O
(	O
void	O
)	O
dbp	pointer
->	O
close	pointer
(	O
dbp	pointer
,	O
0	int
)	O
;	O
}	O
dbe	pointer
->	O
deleted	int
=	O
0	int
;	O
dbe	pointer
->	O
refcount	int
=	O
0	int
;	O
}	O
MUTEX_THREAD_UNLOCK	O
(	O
logp	pointer
->	O
mutexp	pointer
)	O
;	O
}	O
void	O
CDB___log_rem_logid	function
(	O
logp	pointer
,	O
dbp	pointer
,	O
ndx	int
)	O
DB_LOG	struct
*	O
logp	pointer
;	O
DB	struct
*	O
dbp	pointer
;	O
int32_t	int
ndx	int
;	O
{	O
DB	struct
*	O
xdbp	pointer
;	O
MUTEX_THREAD_LOCK	O
(	O
logp	pointer
->	O
mutexp	pointer
)	O
;	O
if	O
(	O
--	O
logp	pointer
->	O
dbentry	pointer
[	O
ndx	int
]	O
.	O
refcount	int
==	O
0	int
)	O
{	O
TAILQ_INIT	O
(	O
&	O
logp	pointer
->	O
dbentry	pointer
[	O
ndx	int
]	O
.	O
dblist	struct
)	O
;	O
logp	pointer
->	O
dbentry	pointer
[	O
ndx	int
]	O
.	O
deleted	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
dbp	pointer
!=	O
NULL	O
)	O
for	O
(	O
xdbp	pointer
=	O
TAILQ_FIRST	O
(	O
&	O
logp	pointer
->	O
dbentry	pointer
[	O
ndx	int
]	O
.	O
dblist	struct
)	O
;	O
xdbp	pointer
!=	O
NULL	O
;	O
xdbp	pointer
=	O
TAILQ_NEXT	O
(	O
xdbp	pointer
,	O
links	struct
)	O
)	O
if	O
(	O
xdbp	pointer
==	O
dbp	pointer
)	O
{	O
TAILQ_REMOVE	O
(	O
&	O
logp	pointer
->	O
dbentry	pointer
[	O
ndx	int
]	O
.	O
dblist	struct
,	O
xdbp	pointer
,	O
links	struct
)	O
;	O
break	O
;	O
}	O
MUTEX_THREAD_UNLOCK	O
(	O
logp	pointer
->	O
mutexp	pointer
)	O
;	O
}	O
static	O
int	O
__log_lid_to_fname	function
(	O
dblp	pointer
,	O
lid	int
,	O
fnamep	pointer
)	O
DB_LOG	struct
*	O
dblp	pointer
;	O
int32_t	int
lid	int
;	O
FNAME	struct
*	O
*	O
fnamep	pointer
;	O
{	O
FNAME	struct
*	O
fnp	pointer
;	O
LOG	struct
*	O
lp	pointer
;	O
lp	pointer
=	O
dblp	pointer
->	O
reginfo	pointer
.	O
primary	int
;	O
for	O
(	O
fnp	pointer
=	O
SH_TAILQ_FIRST	O
(	O
&	O
lp	pointer
->	O
fq	struct
,	O
__fname	struct
)	O
;	O
fnp	pointer
!=	O
NULL	O
;	O
fnp	pointer
=	O
SH_TAILQ_NEXT	O
(	O
fnp	pointer
,	O
q	struct
,	O
__fname	struct
)	O
)	O
{	O
if	O
(	O
fnp	pointer
->	O
ref	short
==	O
0	int
)	O
continue	O
;	O
if	O
(	O
fnp	pointer
->	O
id	int
==	O
lid	int
)	O
{	O
*	O
fnamep	pointer
=	O
fnp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
}	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O