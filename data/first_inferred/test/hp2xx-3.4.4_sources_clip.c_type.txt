static	O
short	O
ClipAreaCode	function
(	O
double	O
x1	double
,	O
double	O
y1	double
,	O
double	O
x2	double
,	O
double	O
y2	double
,	O
double	O
px	double
,	O
double	O
py	double
)	O
{	O
short	O
code	int
=	O
CLIP_INSIDE	int
;	O
if	O
(	O
px	double
<	O
x1	double
-	O
1.e-3	int
)	O
code	int
|=	O
CLIP_LEFT	int
;	O
else	O
if	O
(	O
px	double
>	O
x2	double
+	O
1.e-3	int
)	O
code	int
|=	O
CLIP_RIGHT	int
;	O
if	O
(	O
py	double
<	O
y1	function
-	O
1.e-3	int
)	O
code	int
|=	O
CLIP_BELOW	int
;	O
else	O
if	O
(	O
py	double
>	O
y2	double
+	O
1.e-3	int
)	O
code	int
|=	O
CLIP_ABOVE	int
;	O
return	O
code	int
;	O
}	O
static	O
int	O
ClipWithBorder	function
(	O
double	O
delta	double
,	O
double	O
diff	double
,	O
double	O
*	O
tEnter	pointer
,	O
double	O
*	O
tLeave	pointer
)	O
{	O
double	O
t	double
;	O
t	double
=	O
diff	double
/	O
delta	double
;	O
if	O
(	O
fabs	function
(	O
t	double
)	O
<	O
1.e-5	double
)	O
return	O
0	int
;	O
if	O
(	O
delta	double
<	O
0.0	int
)	O
{	O
if	O
(	O
t	int
>	O
*	O
tLeave	pointer
)	O
return	O
0	int
;	O
else	O
if	O
(	O
t	int
>	O
*	O
tEnter	pointer
)	O
*	O
tEnter	pointer
=	O
t	double
;	O
}	O
else	O
{	O
if	O
(	O
t	double
<	O
*	O
tEnter	pointer
)	O
return	O
0	int
;	O
else	O
if	O
(	O
t	double
<	O
*	O
tLeave	pointer
)	O
*	O
tLeave	pointer
=	O
t	double
;	O
}	O
return	O
1	int
;	O
}	O
short	O
DtClipLine	function
(	O
double	O
xmin	double
,	O
double	O
ymin	double
,	O
double	O
xmax	double
,	O
double	O
ymax	double
,	O
double	O
*	O
x1	double
,	O
double	O
*	O
y1	double
,	O
double	O
*	O
x2	double
,	O
double	O
*	O
y2	double
)	O
{	O
short	O
area_code1	double
,	O
area_code2	double
;	O
double	O
eps	double
;	O
eps	double
=	O
1.e-10	double
;	O
area_code1	double
=	O
ClipAreaCode	function
(	O
xmin	double
,	O
ymin	double
,	O
xmax	double
,	O
ymax	double
,	O
*	O
x1	double
,	O
*	O
y1	double
)	O
;	O
area_code2	double
=	O
ClipAreaCode	function
(	O
xmin	double
,	O
ymin	double
,	O
xmax	double
,	O
ymax	double
,	O
*	O
x2	double
,	O
*	O
y2	double
)	O
;	O
if	O
(	O
ClipFullyInside	function
(	O
area_code1	pointer
,	O
area_code2	pointer
)	O
)	O
return	O
CLIP_DRAW	int
;	O
if	O
(	O
ClipSurelyOutside	function
(	O
area_code1	pointer
,	O
area_code2	int
)	O
)	O
{	O
return	O
CLIP_NODRAW	int
;	O
}	O
else	O
{	O
double	O
dx	pointer
,	O
dy	int
;	O
int	O
dx0	int
,	O
dy0	int
;	O
double	O
tEnter	double
,	O
tLeave	double
;	O
double	O
*	O
tE	pointer
=	O
&	O
tEnter	struct
;	O
double	O
*	O
tL	pointer
=	O
&	O
tLeave	struct
;	O
dx	double
=	O
*	O
x2	double
-	O
*	O
x1	double
;	O
dy	double
=	O
*	O
y2	double
-	O
*	O
y1	function
;	O
tEnter	double
=	O
0.0	int
;	O
tLeave	int
=	O
1.	int
;	O
dx0	double
=	O
(	O
-	O
eps	double
<	O
dx	double
&&	O
dx	double
<	O
eps	double
)	O
;	O
dy0	double
=	O
(	O
-	O
eps	double
<	O
dy	double
&&	O
dy	double
<	O
eps	double
)	O
;	O
if	O
(	O
dx0	double
||	O
ClipWithBorder	function
(	O
-	O
dx	pointer
,	O
-	O
(	O
xmin	double
-	O
*	O
x1	double
)	O
,	O
tE	int
,	O
tL	int
)	O
)	O
if	O
(	O
dy0	double
||	O
ClipWithBorder	function
(	O
dy	double
,	O
(	O
ymax	double
-	O
*	O
y1	double
)	O
,	O
tE	double
,	O
tL	int
)	O
)	O
if	O
(	O
dx0	int
||	O
ClipWithBorder	function
(	O
dx	pointer
,	O
(	O
xmax	double
-	O
*	O
x1	double
)	O
,	O
tE	int
,	O
tL	int
)	O
)	O
if	O
(	O
dy0	int
||	O
ClipWithBorder	function
(	O
-	O
dy	double
,	O
-	O
(	O
ymin	double
-	O
*	O
y1	function
)	O
,	O
tE	int
,	O
tL	int
)	O
)	O
{	O
*	O
x2	double
=	O
*	O
x1	double
+	O
(	O
tLeave	struct
*	O
dx	pointer
)	O
;	O
*	O
y2	double
=	O
*	O
y1	double
+	O
(	O
tLeave	struct
*	O
dy	pointer
)	O
;	O
*	O
x1	double
=	O
*	O
x1	double
+	O
(	O
tEnter	struct
*	O
dx	pointer
)	O
;	O
*	O
y1	struct
=	O
*	O
y1	function
+	O
(	O
tEnter	struct
*	O
dy	pointer
)	O
;	O
return	O
CLIP_DRAW	int
;	O
}	O
}	O
return	O
CLIP_NODRAW	pointer
;	O
}	O