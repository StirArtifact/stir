static	O
size_t	long
hash_size	array
[	O
]	O
=	O
{	O
37	int
,	O
101	int
,	O
229	int
,	O
487	int
,	O
1009	int
,	O
2039	int
,	O
4091	int
,	O
8191	int
,	O
16411	int
,	O
32797	int
,	O
65579	int
,	O
131129	int
,	O
262217	int
,	O
524369	int
,	O
1048661	int
}	O
;	O
static	O
int	O
max_rehash	int
=	O
sizeof	O
(	O
hash_size	array
)	O
/	O
sizeof	O
(	O
hash_size	array
[	O
0	int
]	O
)	O
;	O
grad_symbol_t	struct
*	O
alloc_sym	function
(	O
const	O
char	O
*	O
s	pointer
,	O
unsigned	O
size	int
)	O
{	O
grad_symbol_t	struct
*	O
ptr	pointer
;	O
ptr	pointer
=	O
grad_emalloc	function
(	O
size	int
)	O
;	O
ptr	pointer
->	O
name	pointer
=	O
grad_estrdup	function
(	O
s	pointer
)	O
;	O
return	O
ptr	pointer
;	O
}	O
static	O
unsigned	O
int	O
hashval	function
(	O
const	O
unsigned	O
char	O
*	O
s	pointer
,	O
unsigned	O
bias	int
)	O
{	O
unsigned	O
h	int
=	O
0	int
;	O
for	O
(	O
;	O
*	O
s	pointer
;	O
s	pointer
++	O
)	O
{	O
h	int
<<=	O
1	int
;	O
h	int
^=	O
*	O
s	pointer
;	O
}	O
return	O
h	int
%	O
bias	int
;	O
}	O
static	O
void	O
_sym_add	function
(	O
grad_symtab_t	struct
*	O
symtab	pointer
,	O
unsigned	O
h	int
,	O
grad_symbol_t	struct
*	O
sp	pointer
)	O
{	O
sp	pointer
->	O
next	pointer
=	O
NULL	O
;	O
if	O
(	O
symtab	pointer
->	O
sym	pointer
[	O
h	int
]	O
)	O
{	O
grad_symbol_t	struct
*	O
prev	pointer
;	O
for	O
(	O
prev	pointer
=	O
symtab	pointer
->	O
sym	pointer
[	O
h	int
]	O
;	O
prev	pointer
->	O
next	pointer
;	O
prev	pointer
=	O
prev	pointer
->	O
next	pointer
)	O
;	O
prev	pointer
->	O
next	pointer
=	O
sp	pointer
;	O
}	O
else	O
symtab	pointer
->	O
sym	pointer
[	O
h	int
]	O
=	O
sp	pointer
;	O
}	O
grad_symtab_t	struct
*	O
grad_symtab_create	function
(	O
unsigned	O
esize	int
,	O
int	O
(	O
*	O
elfree	pointer
)	O
(	O
)	O
)	O
{	O
grad_symtab_t	struct
*	O
symtab	pointer
;	O
symtab	pointer
=	O
grad_emalloc	function
(	O
sizeof	O
(	O
*	O
symtab	pointer
)	O
)	O
;	O
symtab	pointer
->	O
elsize	int
=	O
esize	int
;	O
symtab	pointer
->	O
elcnt	int
=	O
0	int
;	O
symtab	pointer
->	O
hash_num	int
=	O
-	O
1	int
;	O
symtab	pointer
->	O
elfree	pointer
=	O
elfree	pointer
;	O
symtab	pointer
->	O
sym	pointer
=	O
NULL	O
;	O
return	O
symtab	pointer
;	O
}	O
int	O
grad_symtab_rehash	function
(	O
grad_symtab_t	struct
*	O
symtab	pointer
)	O
{	O
grad_symbol_t	struct
*	O
*	O
old_table	pointer
=	O
symtab	pointer
->	O
sym	pointer
;	O
int	O
i	int
;	O
if	O
(	O
++	O
symtab	pointer
->	O
hash_num	int
>=	O
max_rehash	int
)	O
{	O
abort	function
(	O
)	O
;	O
}	O
symtab	pointer
->	O
sym	pointer
=	O
grad_emalloc	function
(	O
hash_size	array
[	O
symtab	pointer
->	O
hash_num	int
]	O
*	O
symtab	pointer
->	O
elsize	int
)	O
;	O
if	O
(	O
old_table	pointer
)	O
{	O
size_t	long
old_size	long
=	O
hash_size	array
[	O
symtab	pointer
->	O
hash_num	int
-	O
1	int
]	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
old_size	long
;	O
i	int
++	O
)	O
{	O
grad_symbol_t	struct
*	O
sym	pointer
,	O
*	O
next	pointer
;	O
sym	pointer
=	O
old_table	pointer
[	O
i	int
]	O
;	O
while	O
(	O
sym	pointer
)	O
{	O
unsigned	O
int	O
h	int
;	O
next	pointer
=	O
sym	pointer
->	O
next	pointer
;	O
h	int
=	O
hashval	function
(	O
(	O
unsigned	O
char	O
*	O
)	O
sym	pointer
->	O
name	pointer
,	O
hash_size	array
[	O
symtab	pointer
->	O
hash_num	int
]	O
)	O
;	O
_sym_add	function
(	O
symtab	pointer
,	O
h	int
,	O
sym	pointer
)	O
;	O
sym	pointer
=	O
next	pointer
;	O
}	O
}	O
grad_free	function
(	O
old_table	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
*	O
grad_sym_lookup_or_install	function
(	O
grad_symtab_t	struct
*	O
symtab	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
int	O
install	int
)	O
{	O
if	O
(	O
symtab	pointer
->	O
sym	pointer
)	O
{	O
grad_symbol_t	struct
*	O
sp	pointer
;	O
unsigned	O
h	int
;	O
h	int
=	O
hashval	function
(	O
(	O
unsigned	O
char	O
*	O
)	O
name	pointer
,	O
hash_size	array
[	O
symtab	pointer
->	O
hash_num	int
]	O
)	O
;	O
for	O
(	O
sp	pointer
=	O
symtab	pointer
->	O
sym	pointer
[	O
h	int
]	O
;	O
sp	pointer
;	O
sp	pointer
=	O
sp	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
sp	pointer
->	O
name	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
return	O
sp	pointer
;	O
}	O
}	O
if	O
(	O
install	int
)	O
return	O
grad_sym_install	function
(	O
symtab	pointer
,	O
name	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
void	O
*	O
grad_sym_install	function
(	O
grad_symtab_t	struct
*	O
symtab	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
grad_symbol_t	struct
*	O
sp	pointer
;	O
unsigned	O
int	O
h	int
;	O
if	O
(	O
!	O
symtab	pointer
->	O
sym	pointer
||	O
10	int
*	O
symtab	pointer
->	O
elcnt	int
/	O
hash_size	array
[	O
symtab	pointer
->	O
hash_num	int
]	O
>	O
20	int
/	O
3	int
)	O
grad_symtab_rehash	function
(	O
symtab	pointer
)	O
;	O
h	int
=	O
hashval	function
(	O
(	O
unsigned	O
char	O
*	O
)	O
name	pointer
,	O
hash_size	array
[	O
symtab	pointer
->	O
hash_num	int
]	O
)	O
;	O
sp	pointer
=	O
alloc_sym	function
(	O
name	pointer
,	O
symtab	pointer
->	O
elsize	int
)	O
;	O
_sym_add	function
(	O
symtab	pointer
,	O
h	int
,	O
sp	pointer
)	O
;	O
symtab	pointer
->	O
elcnt	int
++	O
;	O
return	O
sp	pointer
;	O
}	O
void	O
*	O
grad_sym_lookup	function
(	O
grad_symtab_t	struct
*	O
symtab	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
return	O
grad_sym_lookup_or_install	function
(	O
symtab	pointer
,	O
name	pointer
,	O
0	int
)	O
;	O
}	O
void	O
*	O
grad_sym_next	function
(	O
grad_symbol_t	struct
*	O
sym	pointer
)	O
{	O
char	O
*	O
name	pointer
=	O
sym	pointer
->	O
name	pointer
;	O
for	O
(	O
sym	pointer
=	O
sym	pointer
->	O
next	pointer
;	O
sym	pointer
;	O
sym	pointer
=	O
sym	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
sym	pointer
->	O
name	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
return	O
sym	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
int	O
grad_symtab_delete	function
(	O
grad_symtab_t	struct
*	O
symtab	pointer
,	O
grad_symbol_t	struct
*	O
sym	pointer
)	O
{	O
grad_symbol_t	struct
*	O
sp	pointer
,	O
*	O
prev	pointer
;	O
unsigned	O
h	int
;	O
if	O
(	O
!	O
symtab	pointer
->	O
sym	pointer
)	O
return	O
1	int
;	O
h	int
=	O
hashval	function
(	O
(	O
unsigned	O
char	O
*	O
)	O
sym	pointer
->	O
name	pointer
,	O
hash_size	array
[	O
symtab	pointer
->	O
hash_num	int
]	O
)	O
;	O
sp	pointer
=	O
symtab	pointer
->	O
sym	pointer
[	O
h	int
]	O
;	O
prev	pointer
=	O
NULL	O
;	O
while	O
(	O
sp	pointer
)	O
{	O
if	O
(	O
sp	pointer
==	O
sym	pointer
)	O
break	O
;	O
prev	pointer
=	O
sp	pointer
;	O
sp	pointer
=	O
sp	pointer
->	O
next	pointer
;	O
}	O
if	O
(	O
!	O
sp	pointer
)	O
return	O
-	O
1	int
;	O
if	O
(	O
prev	pointer
)	O
prev	pointer
->	O
next	pointer
=	O
sp	pointer
->	O
next	pointer
;	O
else	O
symtab	pointer
->	O
sym	pointer
[	O
h	int
]	O
=	O
sp	pointer
->	O
next	pointer
;	O
if	O
(	O
symtab	pointer
->	O
elfree	pointer
)	O
symtab	pointer
->	O
elfree	pointer
(	O
sp	pointer
)	O
;	O
grad_sym_free	function
(	O
sp	pointer
)	O
;	O
symtab	pointer
->	O
elcnt	int
--	O
;	O
return	O
0	int
;	O
}	O
void	O
grad_sym_free	function
(	O
grad_symbol_t	struct
*	O
sp	pointer
)	O
{	O
grad_free	function
(	O
sp	pointer
->	O
name	pointer
)	O
;	O
grad_free	function
(	O
sp	pointer
)	O
;	O
}	O
void	O
grad_symtab_clear	function
(	O
grad_symtab_t	struct
*	O
symtab	pointer
)	O
{	O
int	O
i	int
;	O
grad_symbol_t	struct
*	O
sp	pointer
,	O
*	O
next	pointer
;	O
if	O
(	O
!	O
symtab	pointer
||	O
!	O
symtab	pointer
->	O
sym	pointer
)	O
return	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
hash_size	array
[	O
symtab	pointer
->	O
hash_num	int
]	O
;	O
i	int
++	O
)	O
{	O
for	O
(	O
sp	pointer
=	O
symtab	pointer
->	O
sym	pointer
[	O
i	int
]	O
;	O
sp	pointer
;	O
sp	pointer
=	O
next	pointer
)	O
{	O
next	pointer
=	O
sp	pointer
->	O
next	pointer
;	O
if	O
(	O
symtab	pointer
->	O
elfree	pointer
)	O
symtab	pointer
->	O
elfree	pointer
(	O
sp	pointer
)	O
;	O
grad_sym_free	function
(	O
sp	pointer
)	O
;	O
}	O
symtab	pointer
->	O
sym	pointer
[	O
i	int
]	O
=	O
NULL	O
;	O
}	O
symtab	pointer
->	O
elcnt	int
=	O
0	int
;	O
}	O
void	O
grad_symtab_free	function
(	O
grad_symtab_t	struct
*	O
*	O
symtab	pointer
)	O
{	O
if	O
(	O
!	O
symtab	pointer
||	O
!	O
*	O
symtab	pointer
)	O
return	O
;	O
grad_symtab_clear	function
(	O
*	O
symtab	pointer
)	O
;	O
grad_free	function
(	O
(	O
*	O
symtab	pointer
)	O
->	O
sym	pointer
)	O
;	O
grad_free	function
(	O
*	O
symtab	pointer
)	O
;	O
*	O
symtab	pointer
=	O
NULL	O
;	O
}	O
void	O
grad_symtab_iterate	function
(	O
grad_symtab_t	struct
*	O
symtab	pointer
,	O
int	O
(	O
*	O
fn	pointer
)	O
(	O
void	O
*	O
,	O
grad_symbol_t	struct
*	O
)	O
,	O
void	O
*	O
closure	pointer
)	O
{	O
int	O
i	int
;	O
grad_symbol_t	struct
*	O
sym	pointer
,	O
*	O
next	pointer
;	O
if	O
(	O
!	O
symtab	pointer
->	O
sym	pointer
)	O
return	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
hash_size	array
[	O
symtab	pointer
->	O
hash_num	int
]	O
;	O
i	int
++	O
)	O
{	O
sym	pointer
=	O
symtab	pointer
->	O
sym	pointer
[	O
i	int
]	O
;	O
while	O
(	O
sym	pointer
)	O
{	O
next	pointer
=	O
sym	pointer
->	O
next	pointer
;	O
if	O
(	O
(	O
*	O
fn	pointer
)	O
(	O
closure	pointer
,	O
sym	pointer
)	O
)	O
return	O
;	O
sym	pointer
=	O
next	pointer
;	O
}	O
}	O
}	O
