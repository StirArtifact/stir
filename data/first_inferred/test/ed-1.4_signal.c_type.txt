jmp_buf	array
jmp_state	array
;	O
static	O
int	O
mutex	int
=	O
0	int
;	O
static	O
int	O
window_lines_	int
=	O
22	int
;	O
static	O
int	O
window_columns_	int
=	O
72	int
;	O
static	O
char	O
sighup_pending	char
=	O
0	int
;	O
static	O
char	O
sigint_pending	char
=	O
0	int
;	O
static	O
void	O
sighup_handler	function
(	O
int	O
signum	int
)	O
{	O
signum	int
=	O
0	int
;	O
if	O
(	O
mutex	int
)	O
sighup_pending	char
=	O
1	int
;	O
else	O
{	O
char	O
hb	array
[	O
]	O
=	O
"ed.hup"	pointer
;	O
sighup_pending	char
=	O
0	int
;	O
if	O
(	O
last_addr	function
(	O
)	O
&&	O
modified	function
(	O
)	O
&&	O
write_file	function
(	O
hb	array
,	O
"w"	pointer
,	O
1	int
,	O
last_addr	function
(	O
)	O
)	O
<	O
0	int
)	O
{	O
char	O
*	O
s	pointer
=	O
getenv	function
(	O
"HOME"	pointer
)	O
;	O
int	O
n	int
=	O
(	O
s	pointer
?	O
strlen	function
(	O
s	pointer
)	O
:	O
0	int
)	O
;	O
int	O
m	char
=	O
(	O
(	O
!	O
n	int
||	O
*	O
(	O
s	pointer
+	O
n	int
-	O
1	int
)	O
!=	O
'/'	O
)	O
?	O
1	int
:	O
0	int
)	O
;	O
char	O
*	O
hup	pointer
=	O
(	O
(	O
n	int
+	O
m	char
+	O
(	O
int	O
)	O
sizeof	O
(	O
hb	array
)	O
<	O
path_max	function
(	O
0	int
)	O
)	O
?	O
(	O
char	O
*	O
)	O
malloc	function
(	O
n	int
+	O
m	char
+	O
sizeof	O
(	O
hb	array
)	O
)	O
:	O
0	int
)	O
;	O
if	O
(	O
n	int
&&	O
hup	pointer
)	O
{	O
memcpy	function
(	O
hup	pointer
,	O
s	pointer
,	O
n	int
)	O
;	O
if	O
(	O
m	char
)	O
memcpy	function
(	O
hup	pointer
+	O
n	int
,	O
"/"	pointer
,	O
1	int
)	O
;	O
memcpy	function
(	O
hup	pointer
+	O
n	int
+	O
m	char
,	O
hb	array
,	O
sizeof	O
(	O
hb	array
)	O
)	O
;	O
if	O
(	O
write_file	function
(	O
hup	pointer
,	O
"w"	pointer
,	O
1	int
,	O
last_addr	function
(	O
)	O
)	O
>=	O
0	int
)	O
exit	function
(	O
0	int
)	O
;	O
}	O
exit	function
(	O
1	int
)	O
;	O
}	O
exit	function
(	O
0	int
)	O
;	O
}	O
}	O
static	O
void	O
sigint_handler	function
(	O
int	O
signum	int
)	O
{	O
if	O
(	O
mutex	int
)	O
sigint_pending	char
=	O
1	int
;	O
else	O
{	O
sigset_t	struct
set	struct
;	O
sigint_pending	char
=	O
0	int
;	O
sigemptyset	function
(	O
&	O
set	struct
)	O
;	O
sigaddset	function
(	O
&	O
set	struct
,	O
signum	int
)	O
;	O
sigprocmask	function
(	O
SIG_UNBLOCK	int
,	O
&	O
set	struct
,	O
0	int
)	O
;	O
longjmp	function
(	O
jmp_state	array
,	O
-	O
1	int
)	O
;	O
}	O
}	O
static	O
void	O
sigwinch_handler	function
(	O
int	O
signum	int
)	O
{	O
struct	O
winsize	struct
ws	struct
;	O
if	O
(	O
ioctl	function
(	O
0	int
,	O
TIOCGWINSZ	int
,	O
(	O
char	O
*	O
)	O
&	O
ws	struct
)	O
>=	O
0	int
)	O
{	O
if	O
(	O
ws	struct
.	O
ws_row	short
>	O
2	int
&&	O
ws	struct
.	O
ws_row	short
<	O
600	int
)	O
window_lines_	int
=	O
ws	struct
.	O
ws_row	short
-	O
2	int
;	O
if	O
(	O
ws	struct
.	O
ws_col	short
>	O
8	int
&&	O
ws	struct
.	O
ws_col	short
<	O
1800	int
)	O
window_columns_	int
=	O
ws	struct
.	O
ws_col	short
-	O
8	int
;	O
}	O
signum	int
=	O
0	int
;	O
}	O
static	O
int	O
set_signal	function
(	O
int	O
signum	int
,	O
void	O
(	O
*	O
handler	pointer
)	O
(	O
int	O
)	O
)	O
{	O
struct	O
sigaction	struct
new_action	struct
;	O
new_action	struct
.	O
sa_handler	pointer
=	O
handler	pointer
;	O
sigemptyset	function
(	O
&	O
new_action	struct
.	O
sa_mask	struct
)	O
;	O
new_action	struct
.	O
sa_flags	int
=	O
SA_RESTART	int
;	O
return	O
sigaction	struct
(	O
signum	int
,	O
&	O
new_action	struct
,	O
0	int
)	O
;	O
}	O
void	O
enable_interrupts	function
(	O
void	O
)	O
{	O
if	O
(	O
--	O
mutex	int
<=	O
0	int
)	O
{	O
mutex	int
=	O
0	int
;	O
if	O
(	O
sighup_pending	char
)	O
sighup_handler	function
(	O
SIGHUP	int
)	O
;	O
if	O
(	O
sigint_pending	char
)	O
sigint_handler	function
(	O
SIGINT	int
)	O
;	O
}	O
}	O
void	O
disable_interrupts	function
(	O
void	O
)	O
{	O
++	O
mutex	int
;	O
}	O
void	O
set_signals	function
(	O
void	O
)	O
{	O
sigwinch_handler	function
(	O
SIGWINCH	int
)	O
;	O
if	O
(	O
isatty	function
(	O
0	int
)	O
)	O
set_signal	function
(	O
SIGWINCH	int
,	O
sigwinch_handler	function
)	O
;	O
set_signal	function
(	O
SIGHUP	int
,	O
sighup_handler	function
)	O
;	O
set_signal	function
(	O
SIGQUIT	int
,	O
SIG_IGN	O
)	O
;	O
set_signal	function
(	O
SIGINT	int
,	O
sigint_handler	function
)	O
;	O
}	O
void	O
set_window_lines	function
(	O
const	O
int	O
lines	int
)	O
{	O
window_lines_	int
=	O
lines	int
;	O
}	O
int	O
window_columns	function
(	O
void	O
)	O
{	O
return	O
window_columns_	int
;	O
}	O
int	O
window_lines	function
(	O
void	O
)	O
{	O
return	O
window_lines_	int
;	O
}	O
char	O
parse_int	function
(	O
int	O
*	O
i	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
const	O
char	O
*	O
*	O
tail	pointer
)	O
{	O
char	O
*	O
tmp	pointer
;	O
errno	O
=	O
0	int
;	O
*	O
i	pointer
=	O
strtol	function
(	O
str	pointer
,	O
&	O
tmp	pointer
,	O
10	int
)	O
;	O
if	O
(	O
tail	pointer
)	O
*	O
tail	pointer
=	O
tmp	pointer
;	O
if	O
(	O
tmp	pointer
==	O
str	pointer
)	O
{	O
set_error_msg	function
(	O
"Bad numerical result"	pointer
)	O
;	O
*	O
i	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
errno	O
==	O
ERANGE	int
)	O
{	O
set_error_msg	function
(	O
"Numerical result out of range"	pointer
)	O
;	O
*	O
i	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
char	O
resize_buffer	function
(	O
char	O
*	O
*	O
buf	pointer
,	O
int	O
*	O
size	pointer
,	O
int	O
min_size	int
)	O
{	O
if	O
(	O
*	O
size	pointer
<	O
min_size	int
)	O
{	O
const	O
int	O
new_size	int
=	O
(	O
min_size	int
<	O
512	int
?	O
512	int
:	O
(	O
min_size	int
/	O
512	int
)	O
*	O
1024	int
)	O
;	O
void	O
*	O
new_buf	pointer
=	O
0	int
;	O
disable_interrupts	function
(	O
)	O
;	O
if	O
(	O
*	O
buf	pointer
)	O
new_buf	pointer
=	O
realloc	function
(	O
*	O
buf	pointer
,	O
new_size	int
)	O
;	O
else	O
new_buf	pointer
=	O
malloc	function
(	O
new_size	int
)	O
;	O
if	O
(	O
!	O
new_buf	pointer
)	O
{	O
show_strerror	function
(	O
0	int
,	O
errno	O
)	O
;	O
set_error_msg	function
(	O
"Memory exhausted"	pointer
)	O
;	O
enable_interrupts	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
*	O
size	pointer
=	O
new_size	int
;	O
*	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
new_buf	pointer
;	O
enable_interrupts	function
(	O
)	O
;	O
}	O
return	O
1	int
;	O
}	O
char	O
resize_line_buffer	function
(	O
const	O
line_t	struct
*	O
*	O
*	O
buf	pointer
,	O
int	O
*	O
size	pointer
,	O
int	O
min_size	int
)	O
{	O
if	O
(	O
*	O
size	pointer
<	O
min_size	int
)	O
{	O
const	O
int	O
new_size	int
=	O
(	O
min_size	int
<	O
512	int
?	O
512	int
:	O
(	O
min_size	int
/	O
512	int
)	O
*	O
1024	int
)	O
;	O
void	O
*	O
new_buf	pointer
=	O
0	int
;	O
disable_interrupts	function
(	O
)	O
;	O
if	O
(	O
*	O
buf	pointer
)	O
new_buf	pointer
=	O
realloc	function
(	O
*	O
buf	pointer
,	O
new_size	int
)	O
;	O
else	O
new_buf	pointer
=	O
malloc	function
(	O
new_size	int
)	O
;	O
if	O
(	O
!	O
new_buf	pointer
)	O
{	O
show_strerror	function
(	O
0	int
,	O
errno	O
)	O
;	O
set_error_msg	function
(	O
"Memory exhausted"	pointer
)	O
;	O
enable_interrupts	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
*	O
size	pointer
=	O
new_size	int
;	O
*	O
buf	pointer
=	O
(	O
const	O
line_t	struct
*	O
*	O
)	O
new_buf	pointer
;	O
enable_interrupts	function
(	O
)	O
;	O
}	O
return	O
1	int
;	O
}	O
char	O
resize_undo_buffer	function
(	O
undo_t	struct
*	O
*	O
buf	pointer
,	O
int	O
*	O
size	pointer
,	O
int	O
min_size	int
)	O
{	O
if	O
(	O
*	O
size	pointer
<	O
min_size	int
)	O
{	O
const	O
int	O
new_size	int
=	O
(	O
min_size	int
<	O
512	int
?	O
512	int
:	O
(	O
min_size	int
/	O
512	int
)	O
*	O
1024	int
)	O
;	O
void	O
*	O
new_buf	pointer
=	O
0	int
;	O
disable_interrupts	function
(	O
)	O
;	O
if	O
(	O
*	O
buf	pointer
)	O
new_buf	pointer
=	O
realloc	function
(	O
*	O
buf	pointer
,	O
new_size	int
)	O
;	O
else	O
new_buf	pointer
=	O
malloc	function
(	O
new_size	int
)	O
;	O
if	O
(	O
!	O
new_buf	pointer
)	O
{	O
show_strerror	function
(	O
0	int
,	O
errno	O
)	O
;	O
set_error_msg	function
(	O
"Memory exhausted"	pointer
)	O
;	O
enable_interrupts	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
*	O
size	pointer
=	O
new_size	int
;	O
*	O
buf	pointer
=	O
(	O
undo_t	struct
*	O
)	O
new_buf	pointer
;	O
enable_interrupts	function
(	O
)	O
;	O
}	O
return	O
1	int
;	O
}	O
const	O
char	O
*	O
strip_escapes	function
(	O
const	O
char	O
*	O
s	pointer
)	O
{	O
static	O
char	O
*	O
buf	pointer
=	O
0	int
;	O
static	O
int	O
bufsz	int
=	O
0	int
;	O
const	O
int	O
len	int
=	O
strlen	function
(	O
s	pointer
)	O
;	O
int	O
i	pointer
=	O
0	int
;	O
if	O
(	O
!	O
resize_buffer	function
(	O
&	O
buf	pointer
,	O
&	O
bufsz	int
,	O
len	int
+	O
1	int
)	O
)	O
return	O
0	int
;	O
while	O
(	O
(	O
buf	pointer
[	O
i	pointer
++	O
]	O
=	O
(	O
(	O
*	O
s	pointer
==	O
'\\'	O
)	O
?	O
*	O
++	O
s	pointer
:	O
*	O
s	pointer
)	O
)	O
)	O
s	pointer
++	O
;	O
return	O
buf	pointer
;	O
}	O