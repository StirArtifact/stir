static	O
int	O
do_aftermath_genmove	function
(	O
int	O
color	int
,	O
int	O
under_control	array
[	O
BOARDMAX	O
]	O
,	O
int	O
do_capture_dead_stones	int
)	O
;	O
static	O
int	O
all_own_neighbors_inessential	function
(	O
int	O
pos	int
,	O
int	O
color	int
)	O
{	O
int	O
k	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
4	int
;	O
k	int
++	O
)	O
if	O
(	O
board	pointer
[	O
pos	int
+	O
delta	array
[	O
k	int
]	O
]	O
==	O
color	int
&&	O
DRAGON2	O
(	O
pos	int
+	O
delta	array
[	O
k	int
]	O
)	O
.	O
safety	int
!=	O
INESSENTIAL	int
&&	O
(	O
DRAGON2	O
(	O
pos	int
+	O
delta	array
[	O
k	int
]	O
)	O
.	O
safety	int
!=	O
ALIVE	int
||	O
DRAGON2	O
(	O
pos	int
+	O
delta	array
[	O
k	int
]	O
)	O
.	O
owl_status	enum
!=	O
DEAD	int
)	O
)	O
return	O
0	int
;	O
return	O
1	int
;	O
}	O
static	O
int	O
make_solid_eye	function
(	O
int	O
pos	int
,	O
int	O
color	int
)	O
{	O
int	O
k	int
;	O
int	O
r	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
4	int
;	O
k	int
++	O
)	O
{	O
int	O
eyepos	int
=	O
pos	int
+	O
delta	array
[	O
k	int
]	O
;	O
if	O
(	O
board	pointer
[	O
eyepos	int
]	O
==	O
EMPTY	int
||	O
(	O
board	pointer
[	O
eyepos	int
]	O
==	O
OTHER_COLOR	O
(	O
color	int
)	O
&&	O
countlib	function
(	O
eyepos	int
)	O
==	O
1	int
)	O
)	O
{	O
int	O
own_neighbors	int
=	O
is_edge_vertex	function
(	O
pos	int
)	O
+	O
is_corner_vertex	function
(	O
pos	int
)	O
;	O
int	O
own_diagonals	int
=	O
own_neighbors	int
;	O
for	O
(	O
r	int
=	O
0	int
;	O
r	int
<	O
8	int
;	O
r	int
++	O
)	O
{	O
if	O
(	O
board	pointer
[	O
eyepos	int
+	O
delta	array
[	O
r	int
]	O
]	O
==	O
color	int
)	O
{	O
if	O
(	O
r	int
<	O
4	int
)	O
own_neighbors	int
++	O
;	O
else	O
own_diagonals	int
++	O
;	O
}	O
}	O
if	O
(	O
own_neighbors	int
==	O
3	int
&&	O
own_diagonals	int
>=	O
3	int
)	O
return	O
1	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
aftermath_genmove	function
(	O
int	O
color	int
,	O
int	O
do_capture_dead_stones	int
,	O
int	O
allowed_moves	array
[	O
BOARDMAX	O
]	O
)	O
{	O
int	O
move	pointer
=	O
do_aftermath_genmove	function
(	O
color	int
,	O
NULL	O
,	O
do_capture_dead_stones	int
)	O
;	O
if	O
(	O
move	pointer
!=	O
PASS_MOVE	int
&&	O
allowed_moves	array
&&	O
!	O
allowed_moves	array
[	O
move	pointer
]	O
)	O
move	pointer
=	O
PASS_MOVE	int
;	O
return	O
move	pointer
;	O
}	O
static	O
int	O
do_aftermath_genmove	function
(	O
int	O
color	int
,	O
int	O
under_control	array
[	O
BOARDMAX	O
]	O
,	O
int	O
do_capture_dead_stones	int
)	O
{	O
int	O
k	int
;	O
int	O
other	int
=	O
OTHER_COLOR	O
(	O
color	int
)	O
;	O
int	O
distance	array
[	O
BOARDMAX	O
]	O
;	O
int	O
score	float
[	O
BOARDMAX	O
]	O
;	O
float	O
owl_hotspot	array
[	O
BOARDMAX	O
]	O
;	O
float	O
reading_hotspot	array
[	O
BOARDMAX	O
]	O
;	O
int	O
dragons	array
[	O
BOARDMAX	O
]	O
;	O
int	O
something_found	int
;	O
int	O
closest_opponent	int
=	O
NO_MOVE	O
;	O
int	O
closest_own	int
=	O
NO_MOVE	O
;	O
int	O
d	int
;	O
int	O
move	pointer
=	O
NO_MOVE	O
;	O
int	O
pos	int
=	O
NO_MOVE	O
;	O
int	O
best_score	int
;	O
int	O
best_scoring_move	int
;	O
owl_hotspots	function
(	O
owl_hotspot	array
)	O
;	O
reading_hotspots	function
(	O
reading_hotspot	array
)	O
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
!	O
ON_BOARD	O
(	O
pos	int
)	O
)	O
continue	O
;	O
else	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
color	int
&&	O
worm	array
[	O
pos	int
]	O
.	O
invincible	int
)	O
distance	array
[	O
pos	int
]	O
=	O
0	int
;	O
else	O
if	O
(	O
!	O
do_capture_dead_stones	int
&&	O
(	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
other	int
&&	O
worm	array
[	O
pos	int
]	O
.	O
unconditional_status	enum
==	O
DEAD	int
)	O
||	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
color	int
&&	O
worm	array
[	O
pos	int
]	O
.	O
unconditional_status	enum
==	O
ALIVE	int
)	O
)	O
)	O
distance	array
[	O
pos	int
]	O
=	O
0	int
;	O
else	O
distance	array
[	O
pos	int
]	O
=	O
-	O
1	int
;	O
}	O
d	int
=	O
0	int
;	O
do	O
{	O
something_found	int
=	O
0	int
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
ON_BOARD	O
(	O
pos	int
)	O
&&	O
distance	array
[	O
pos	int
]	O
==	O
-	O
1	int
)	O
{	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
4	int
;	O
k	int
++	O
)	O
{	O
int	O
pos2	int
=	O
pos	int
+	O
delta	array
[	O
k	int
]	O
;	O
if	O
(	O
!	O
ON_BOARD	O
(	O
pos2	int
)	O
)	O
continue	O
;	O
if	O
(	O
(	O
d	int
==	O
0	int
||	O
board	pointer
[	O
pos2	int
]	O
==	O
EMPTY	int
)	O
&&	O
distance	array
[	O
pos2	int
]	O
==	O
d	int
)	O
{	O
if	O
(	O
d	int
>	O
0	int
&&	O
board	pointer
[	O
pos	int
]	O
==	O
other	int
)	O
{	O
distance	array
[	O
pos	int
]	O
=	O
d	int
+	O
1	int
;	O
if	O
(	O
closest_opponent	int
==	O
NO_MOVE	O
)	O
closest_opponent	int
=	O
pos	int
;	O
}	O
else	O
if	O
(	O
d	int
>	O
0	int
&&	O
board	pointer
[	O
pos	int
]	O
==	O
color	int
)	O
{	O
distance	array
[	O
pos	int
]	O
=	O
d	int
+	O
1	int
;	O
if	O
(	O
closest_own	int
==	O
NO_MOVE	O
)	O
closest_own	int
=	O
pos	int
;	O
}	O
else	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
EMPTY	int
)	O
{	O
distance	array
[	O
pos	int
]	O
=	O
d	int
+	O
1	int
;	O
something_found	int
=	O
1	int
;	O
}	O
break	O
;	O
}	O
}	O
}	O
}	O
d	int
++	O
;	O
}	O
while	O
(	O
something_found	int
)	O
;	O
if	O
(	O
under_control	array
)	O
{	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
!	O
ON_BOARD	O
(	O
pos	int
)	O
)	O
continue	O
;	O
else	O
if	O
(	O
distance	array
[	O
pos	int
]	O
==	O
-	O
1	int
)	O
under_control	array
[	O
pos	int
]	O
=	O
0	int
;	O
else	O
under_control	array
[	O
pos	int
]	O
=	O
1	int
;	O
}	O
}	O
if	O
(	O
debug	int
&	O
DEBUG_AFTERMATH	int
)	O
{	O
int	O
m	int
,	O
n	int
;	O
for	O
(	O
m	int
=	O
0	int
;	O
m	int
<	O
board_size	int
;	O
m	int
++	O
)	O
{	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
board_size	int
;	O
n	int
++	O
)	O
{	O
pos	int
=	O
POS	O
(	O
m	int
,	O
n	int
)	O
;	O
if	O
(	O
distance	array
[	O
pos	int
]	O
>	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%2d"	pointer
,	O
distance	array
[	O
pos	int
]	O
)	O
;	O
else	O
if	O
(	O
distance	array
[	O
pos	int
]	O
==	O
0	int
)	O
{	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
WHITE	int
)	O
gprintf	function
(	O
" o"	pointer
)	O
;	O
else	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
BLACK	int
)	O
gprintf	function
(	O
" x"	pointer
)	O
;	O
else	O
gprintf	function
(	O
" ?"	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
WHITE	int
)	O
gprintf	function
(	O
" O"	pointer
)	O
;	O
else	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
BLACK	int
)	O
gprintf	function
(	O
" X"	pointer
)	O
;	O
else	O
gprintf	function
(	O
" ."	pointer
)	O
;	O
}	O
}	O
gprintf	function
(	O
"\n"	pointer
)	O
;	O
}	O
gprintf	function
(	O
"Closest opponent %1m"	pointer
,	O
closest_opponent	int
)	O
;	O
if	O
(	O
closest_opponent	int
!=	O
NO_MOVE	O
)	O
gprintf	function
(	O
", distance %d\n"	pointer
,	O
distance	array
[	O
closest_opponent	int
]	O
)	O
;	O
else	O
gprintf	function
(	O
"\n"	pointer
)	O
;	O
gprintf	function
(	O
"Closest own %1m"	pointer
,	O
closest_own	int
)	O
;	O
if	O
(	O
closest_own	int
!=	O
NO_MOVE	O
)	O
gprintf	function
(	O
", distance %d\n"	pointer
,	O
distance	array
[	O
closest_own	int
]	O
)	O
;	O
else	O
gprintf	function
(	O
"\n"	pointer
)	O
;	O
}	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
int	O
replacement_move	pointer
;	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
EMPTY	int
&&	O
distance	array
[	O
pos	int
]	O
==	O
-	O
1	int
&&	O
unconditionally_meaningless_move	function
(	O
pos	int
,	O
color	int
,	O
&	O
replacement_move	pointer
)	O
&&	O
replacement_move	pointer
!=	O
NO_MOVE	O
)	O
{	O
DEBUG	O
(	O
DEBUG_AFTERMATH	int
,	O
"Replacement move for %1m at %1m\n"	pointer
,	O
pos	int
,	O
replacement_move	pointer
)	O
;	O
return	O
replacement_move	pointer
;	O
}	O
}	O
best_scoring_move	int
=	O
NO_MOVE	O
;	O
best_score	int
=	O
5	int
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
int	O
libs	pointer
;	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
!=	O
EMPTY	int
||	O
distance	array
[	O
pos	int
]	O
==	O
0	int
)	O
continue	O
;	O
libs	pointer
=	O
approxlib	function
(	O
pos	int
,	O
color	int
,	O
3	int
,	O
NULL	O
)	O
;	O
if	O
(	O
libs	pointer
<	O
3	int
)	O
continue	O
;	O
if	O
(	O
is_self_atari	function
(	O
pos	int
,	O
other	int
)	O
)	O
continue	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
4	int
;	O
k	int
++	O
)	O
{	O
int	O
dir	int
=	O
delta	array
[	O
k	int
]	O
;	O
int	O
right	int
=	O
delta	array
[	O
(	O
k	int
+	O
1	int
)	O
%	O
4	int
]	O
;	O
if	O
(	O
!	O
ON_BOARD	O
(	O
pos	int
-	O
dir	int
)	O
&&	O
board	pointer
[	O
pos	int
+	O
dir	int
]	O
==	O
color	int
&&	O
board	pointer
[	O
pos	int
+	O
dir	int
+	O
right	int
]	O
==	O
other	int
&&	O
board	pointer
[	O
pos	int
+	O
dir	int
-	O
right	int
]	O
==	O
other	int
&&	O
(	O
libs	pointer
>	O
countlib	function
(	O
pos	int
+	O
dir	int
)	O
||	O
(	O
libs	pointer
>	O
4	int
&&	O
libs	pointer
==	O
countlib	function
(	O
pos	int
+	O
dir	int
)	O
)	O
)	O
&&	O
(	O
DRAGON2	O
(	O
pos	int
+	O
dir	int
)	O
.	O
safety	int
==	O
INVINCIBLE	int
||	O
DRAGON2	O
(	O
pos	int
+	O
dir	int
)	O
.	O
safety	int
==	O
STRONGLY_ALIVE	int
)	O
)	O
{	O
int	O
this_score	int
=	O
20	int
*	O
(	O
owl_hotspot	array
[	O
pos	int
]	O
+	O
reading_hotspot	array
[	O
pos	int
]	O
)	O
;	O
if	O
(	O
this_score	int
>	O
best_score	int
)	O
{	O
best_score	int
=	O
this_score	int
;	O
best_scoring_move	int
=	O
pos	int
;	O
}	O
}	O
}	O
}	O
if	O
(	O
best_scoring_move	int
!=	O
NO_MOVE	O
&&	O
safe_move	function
(	O
best_scoring_move	int
,	O
color	int
)	O
==	O
WIN	int
)	O
{	O
DEBUG	O
(	O
DEBUG_AFTERMATH	int
,	O
"Closing edge at %1m\n"	pointer
,	O
best_scoring_move	int
)	O
;	O
return	O
best_scoring_move	int
;	O
}	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
int	O
lib	int
;	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
other	int
&&	O
worm	array
[	O
pos	int
]	O
.	O
unconditional_status	enum
!=	O
DEAD	int
&&	O
countlib	function
(	O
pos	int
)	O
==	O
1	int
&&	O
(	O
(	O
ON_BOARD	O
(	O
SOUTH	O
(	O
pos	int
)	O
)	O
&&	O
distance	array
[	O
SOUTH	O
(	O
pos	int
)	O
]	O
==	O
0	int
)	O
||	O
(	O
ON_BOARD	O
(	O
WEST	O
(	O
pos	int
)	O
)	O
&&	O
distance	array
[	O
WEST	O
(	O
pos	int
)	O
]	O
==	O
0	int
)	O
||	O
(	O
ON_BOARD	O
(	O
NORTH	O
(	O
pos	int
)	O
)	O
&&	O
distance	array
[	O
NORTH	O
(	O
pos	int
)	O
]	O
==	O
0	int
)	O
||	O
(	O
ON_BOARD	O
(	O
EAST	O
(	O
pos	int
)	O
)	O
&&	O
distance	array
[	O
EAST	O
(	O
pos	int
)	O
]	O
==	O
0	int
)	O
)	O
)	O
{	O
findlib	function
(	O
pos	int
,	O
1	int
,	O
&	O
lib	int
)	O
;	O
if	O
(	O
countstones	function
(	O
pos	int
)	O
>	O
1	int
||	O
!	O
is_self_atari	function
(	O
lib	int
,	O
color	int
)	O
)	O
{	O
return	O
lib	int
;	O
}	O
}	O
}	O
if	O
(	O
do_capture_dead_stones	int
)	O
{	O
best_score	int
=	O
0	int
;	O
best_scoring_move	int
=	O
NO_MOVE	O
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
EMPTY	int
&&	O
distance	array
[	O
pos	int
]	O
>=	O
0	int
)	O
{	O
int	O
valid_move	int
=	O
0	int
;	O
int	O
this_score	int
=	O
0	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
4	int
;	O
k	int
++	O
)	O
{	O
int	O
pos2	int
=	O
pos	int
+	O
delta	array
[	O
k	int
]	O
;	O
if	O
(	O
board	pointer
[	O
pos2	int
]	O
==	O
EMPTY	int
)	O
this_score	int
+=	O
2	int
;	O
else	O
if	O
(	O
board	pointer
[	O
pos2	int
]	O
==	O
other	int
&&	O
worm	array
[	O
pos2	int
]	O
.	O
unconditional_status	enum
==	O
DEAD	int
)	O
{	O
this_score	int
++	O
;	O
valid_move	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
valid_move	int
&&	O
this_score	int
>	O
best_score	int
&&	O
!	O
is_self_atari	function
(	O
pos	int
,	O
color	int
)	O
)	O
{	O
best_score	int
=	O
this_score	int
;	O
best_scoring_move	int
=	O
pos	int
;	O
}	O
}	O
}	O
if	O
(	O
best_score	int
>	O
0	int
)	O
return	O
best_scoring_move	int
;	O
}	O
if	O
(	O
do_capture_dead_stones	int
)	O
{	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
EMPTY	int
&&	O
distance	array
[	O
pos	int
]	O
==	O
1	int
&&	O
has_neighbor	function
(	O
pos	int
,	O
other	int
)	O
)	O
{	O
return	O
pos	int
;	O
}	O
}	O
}	O
if	O
(	O
closest_opponent	int
!=	O
NO_MOVE	O
||	O
closest_own	int
!=	O
NO_MOVE	O
)	O
{	O
if	O
(	O
closest_own	int
==	O
NO_MOVE	O
||	O
(	O
capture_all_dead	int
&&	O
closest_opponent	int
!=	O
NO_MOVE	O
&&	O
distance	array
[	O
closest_opponent	int
]	O
<	O
distance	array
[	O
closest_own	int
]	O
)	O
)	O
move	pointer
=	O
closest_opponent	int
;	O
else	O
move	pointer
=	O
closest_own	int
;	O
if	O
(	O
distance	array
[	O
move	pointer
]	O
==	O
2	int
)	O
{	O
signed	O
char	O
mx	array
[	O
BOARDMAX	O
]	O
;	O
signed	O
char	O
mark	char
=	O
0	int
;	O
memset	function
(	O
mx	array
,	O
0	int
,	O
sizeof	O
(	O
mx	array
)	O
)	O
;	O
best_score	int
=	O
0	int
;	O
best_scoring_move	int
=	O
move	pointer
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
int	O
score	float
=	O
0	int
;	O
int	O
move_ok	int
=	O
0	int
;	O
if	O
(	O
!	O
ON_BOARD	O
(	O
pos	int
)	O
||	O
distance	array
[	O
pos	int
]	O
!=	O
1	int
)	O
continue	O
;	O
mark	char
++	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
4	int
;	O
k	int
++	O
)	O
{	O
int	O
pos2	int
=	O
pos	int
+	O
delta	array
[	O
k	int
]	O
;	O
if	O
(	O
!	O
ON_BOARD	O
(	O
pos2	int
)	O
)	O
continue	O
;	O
if	O
(	O
distance	array
[	O
pos2	int
]	O
<	O
1	int
)	O
score	float
--	O
;	O
else	O
if	O
(	O
board	pointer
[	O
pos2	int
]	O
==	O
EMPTY	int
)	O
score	float
++	O
;	O
else	O
if	O
(	O
mx	array
[	O
pos2	int
]	O
==	O
mark	char
)	O
score	float
--	O
;	O
else	O
{	O
if	O
(	O
board	pointer
[	O
pos2	int
]	O
==	O
color	int
)	O
{	O
move_ok	int
=	O
1	int
;	O
score	float
+=	O
7	int
;	O
if	O
(	O
countstones	function
(	O
pos2	int
)	O
>	O
2	int
)	O
score	float
++	O
;	O
if	O
(	O
countstones	function
(	O
pos2	int
)	O
>	O
4	int
)	O
score	float
++	O
;	O
if	O
(	O
countlib	function
(	O
pos2	int
)	O
<	O
4	int
)	O
score	float
++	O
;	O
if	O
(	O
countlib	function
(	O
pos2	int
)	O
<	O
3	int
)	O
score	float
++	O
;	O
}	O
else	O
{	O
int	O
deltalib	int
=	O
(	O
approxlib	function
(	O
pos	int
,	O
other	int
,	O
MAXLIBS	O
,	O
NULL	O
)	O
-	O
countlib	function
(	O
pos2	int
)	O
)	O
;	O
move_ok	int
=	O
1	int
;	O
score	float
++	O
;	O
if	O
(	O
deltalib	int
>=	O
0	int
)	O
score	float
++	O
;	O
if	O
(	O
deltalib	int
>	O
0	int
)	O
score	float
++	O
;	O
}	O
mark_string	function
(	O
pos2	int
,	O
mx	array
,	O
mark	char
)	O
;	O
}	O
}	O
if	O
(	O
is_suicide	function
(	O
pos	int
,	O
other	int
)	O
)	O
score	float
-=	O
3	int
;	O
if	O
(	O
0	int
)	O
gprintf	function
(	O
"Score %1m = %d\n"	pointer
,	O
pos	int
,	O
score	float
)	O
;	O
if	O
(	O
move_ok	int
&&	O
score	float
>	O
best_score	int
)	O
{	O
best_score	int
=	O
score	float
;	O
best_scoring_move	int
=	O
pos	int
;	O
}	O
}	O
move	pointer
=	O
best_scoring_move	int
;	O
}	O
while	O
(	O
distance	array
[	O
move	pointer
]	O
>	O
1	int
)	O
{	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
4	int
;	O
k	int
++	O
)	O
{	O
int	O
pos2	int
=	O
move	pointer
+	O
delta	array
[	O
k	int
]	O
;	O
if	O
(	O
ON_BOARD	O
(	O
pos2	int
)	O
&&	O
board	pointer
[	O
pos2	int
]	O
==	O
EMPTY	int
&&	O
distance	array
[	O
pos2	int
]	O
==	O
distance	array
[	O
move	pointer
]	O
-	O
1	int
)	O
{	O
move	pointer
=	O
pos2	int
;	O
break	O
;	O
}	O
}	O
}	O
return	O
move	pointer
;	O
}	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
int	O
eyespace_neighbors	int
=	O
0	int
;	O
int	O
own_neighbors	int
=	O
0	int
;	O
int	O
own_diagonals	int
=	O
0	int
;	O
int	O
opponent_dragons	int
=	O
0	int
;	O
int	O
own_worms	int
=	O
0	int
;	O
int	O
safety	int
=	O
UNKNOWN	int
;	O
int	O
bonus	int
=	O
0	int
;	O
int	O
mx	array
[	O
BOARDMAX	O
]	O
;	O
score	float
[	O
pos	int
]	O
=	O
0	int
;	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
!=	O
EMPTY	int
||	O
distance	array
[	O
pos	int
]	O
!=	O
-	O
1	int
)	O
continue	O
;	O
if	O
(	O
is_self_atari	function
(	O
pos	int
,	O
color	int
)	O
)	O
continue	O
;	O
memset	function
(	O
mx	array
,	O
0	int
,	O
sizeof	O
(	O
mx	array
)	O
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
8	int
;	O
k	int
++	O
)	O
{	O
int	O
pos2	int
=	O
pos	int
+	O
delta	array
[	O
k	int
]	O
;	O
if	O
(	O
!	O
ON_BOARD	O
(	O
pos2	int
)	O
)	O
continue	O
;	O
if	O
(	O
board	pointer
[	O
pos2	int
]	O
==	O
EMPTY	int
)	O
{	O
if	O
(	O
k	int
<	O
4	int
)	O
eyespace_neighbors	int
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
board	pointer
[	O
pos2	int
]	O
==	O
other	int
)	O
{	O
int	O
origin	int
=	O
dragon	int
[	O
pos2	int
]	O
.	O
origin	int
;	O
if	O
(	O
k	int
<	O
4	int
)	O
{	O
if	O
(	O
dragon	int
[	O
pos2	int
]	O
.	O
status	enum
==	O
ALIVE	int
)	O
{	O
safety	int
=	O
DEAD	int
;	O
break	O
;	O
}	O
else	O
if	O
(	O
!	O
mx	array
[	O
origin	int
]	O
)	O
{	O
eyespace_neighbors	int
++	O
;	O
opponent_dragons	int
++	O
;	O
}	O
}	O
if	O
(	O
!	O
mx	array
[	O
origin	int
]	O
&&	O
dragon	int
[	O
pos2	int
]	O
.	O
status	enum
==	O
DEAD	int
)	O
{	O
bonus	int
++	O
;	O
if	O
(	O
k	int
<	O
4	int
&&	O
countlib	function
(	O
pos2	int
)	O
<=	O
2	int
&&	O
countstones	function
(	O
pos2	int
)	O
>=	O
3	int
)	O
bonus	int
++	O
;	O
if	O
(	O
k	int
<	O
4	int
&&	O
countlib	function
(	O
pos2	int
)	O
==	O
1	int
)	O
bonus	int
+=	O
3	int
;	O
}	O
mx	array
[	O
origin	int
]	O
=	O
1	int
;	O
}	O
else	O
if	O
(	O
board	pointer
[	O
pos2	int
]	O
==	O
color	int
)	O
{	O
dragons	array
[	O
pos	int
]	O
=	O
pos2	int
;	O
if	O
(	O
safety	int
==	O
UNKNOWN	int
&&	O
dragon	int
[	O
pos2	int
]	O
.	O
status	enum
==	O
ALIVE	int
)	O
safety	int
=	O
ALIVE	int
;	O
if	O
(	O
DRAGON2	O
(	O
pos2	int
)	O
.	O
safety	int
==	O
INVINCIBLE	int
)	O
safety	int
=	O
INVINCIBLE	int
;	O
if	O
(	O
k	int
<	O
4	int
)	O
{	O
int	O
apos	int
=	O
worm	array
[	O
pos2	int
]	O
.	O
origin	int
;	O
if	O
(	O
!	O
mx	array
[	O
apos	int
]	O
)	O
{	O
own_worms	int
++	O
;	O
if	O
(	O
countstones	function
(	O
apos	int
)	O
==	O
1	int
)	O
bonus	int
+=	O
2	int
;	O
if	O
(	O
countlib	function
(	O
apos	int
)	O
<	O
6	int
&&	O
approxlib	function
(	O
pos	int
,	O
color	int
,	O
5	int
,	O
NULL	O
)	O
<	O
countlib	function
(	O
apos	int
)	O
)	O
bonus	int
-=	O
5	int
;	O
mx	array
[	O
apos	int
]	O
=	O
1	int
;	O
}	O
if	O
(	O
countlib	function
(	O
apos	int
)	O
<=	O
2	int
)	O
{	O
int	O
r	int
;	O
int	O
important	int
=	O
0	int
;	O
int	O
safe_atari	int
=	O
0	int
;	O
for	O
(	O
r	int
=	O
0	int
;	O
r	int
<	O
4	int
;	O
r	int
++	O
)	O
{	O
d	int
=	O
delta	array
[	O
r	int
]	O
;	O
if	O
(	O
!	O
ON_BOARD	O
(	O
apos	int
+	O
d	int
)	O
)	O
continue	O
;	O
if	O
(	O
board	pointer
[	O
apos	int
+	O
d	int
]	O
==	O
other	int
&&	O
dragon	int
[	O
apos	int
+	O
d	int
]	O
.	O
status	enum
==	O
DEAD	int
)	O
important	int
=	O
1	int
;	O
else	O
if	O
(	O
board	pointer
[	O
apos	int
+	O
d	int
]	O
==	O
EMPTY	int
&&	O
!	O
is_self_atari	function
(	O
apos	int
+	O
d	int
,	O
other	int
)	O
)	O
safe_atari	int
=	O
1	int
;	O
}	O
if	O
(	O
approxlib	function
(	O
pos	int
,	O
color	int
,	O
3	int
,	O
NULL	O
)	O
>	O
2	int
)	O
{	O
bonus	int
++	O
;	O
if	O
(	O
important	int
)	O
{	O
bonus	int
+=	O
2	int
;	O
if	O
(	O
safe_atari	int
)	O
bonus	int
+=	O
2	int
;	O
}	O
}	O
}	O
own_neighbors	int
++	O
;	O
}	O
else	O
own_diagonals	int
++	O
;	O
}	O
}	O
if	O
(	O
safety	int
==	O
DEAD	int
||	O
safety	int
==	O
UNKNOWN	int
||	O
eyespace_neighbors	int
==	O
0	int
||	O
(	O
own_neighbors	int
+	O
own_diagonals	int
)	O
==	O
0	int
)	O
continue	O
;	O
if	O
(	O
bonus	int
<	O
0	int
)	O
bonus	int
=	O
0	int
;	O
if	O
(	O
eyespace_neighbors	int
>=	O
2	int
)	O
if	O
(	O
make_solid_eye	function
(	O
pos	int
,	O
color	int
)	O
)	O
{	O
bonus	int
+=	O
20	int
;	O
if	O
(	O
do_capture_dead_stones	int
&&	O
opponent_dragons	int
>	O
0	int
)	O
bonus	int
+=	O
10	int
;	O
}	O
score	float
[	O
pos	int
]	O
=	O
4	int
*	O
eyespace_neighbors	int
+	O
bonus	int
;	O
if	O
(	O
safety	int
==	O
INVINCIBLE	int
)	O
{	O
score	float
[	O
pos	int
]	O
+=	O
own_neighbors	int
;	O
if	O
(	O
own_neighbors	int
<	O
2	int
)	O
score	float
[	O
pos	int
]	O
+=	O
own_diagonals	int
;	O
if	O
(	O
own_worms	int
>	O
1	int
&&	O
eyespace_neighbors	int
>=	O
1	int
)	O
score	float
[	O
pos	int
]	O
+=	O
10	int
+	O
5	int
*	O
(	O
own_worms	int
-	O
2	int
)	O
;	O
}	O
else	O
if	O
(	O
eyespace_neighbors	int
>	O
2	int
)	O
score	float
[	O
pos	int
]	O
+=	O
own_diagonals	int
;	O
if	O
(	O
opponent_dragons	int
>	O
1	int
)	O
score	float
[	O
pos	int
]	O
+=	O
10	int
*	O
(	O
opponent_dragons	int
-	O
1	int
)	O
;	O
{	O
int	O
owl_hotspot_bonus	int
=	O
(	O
int	O
)	O
(	O
20.0	int
*	O
owl_hotspot	array
[	O
pos	int
]	O
)	O
;	O
int	O
reading_hotspot_bonus	int
=	O
(	O
int	O
)	O
(	O
20.0	int
*	O
reading_hotspot	array
[	O
pos	int
]	O
)	O
;	O
int	O
hotspot_bonus	int
=	O
owl_hotspot_bonus	int
+	O
reading_hotspot_bonus	int
;	O
if	O
(	O
score	float
[	O
pos	int
]	O
>	O
0	int
&&	O
score	float
[	O
pos	int
]	O
+	O
hotspot_bonus	int
<=	O
0	int
)	O
hotspot_bonus	int
=	O
1	int
-	O
score	float
[	O
pos	int
]	O
;	O
score	float
[	O
pos	int
]	O
+=	O
hotspot_bonus	int
;	O
if	O
(	O
1	int
&&	O
(	O
debug	int
&	O
DEBUG_AFTERMATH	int
)	O
)	O
gprintf	function
(	O
"Score %1M = %d (hotspot bonus %d + %d)\n"	pointer
,	O
pos	int
,	O
score	float
[	O
pos	int
]	O
,	O
owl_hotspot_bonus	int
,	O
reading_hotspot_bonus	int
)	O
;	O
}	O
if	O
(	O
is_ko	function
(	O
pos	int
,	O
color	int
,	O
NULL	O
)	O
)	O
score	float
[	O
pos	int
]	O
=	O
(	O
score	float
[	O
pos	int
]	O
+	O
1	int
)	O
/	O
2	int
;	O
}	O
while	O
(	O
1	int
)	O
{	O
int	O
bb	int
;	O
best_score	int
=	O
0	int
;	O
move	pointer
=	O
NO_MOVE	O
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
ON_BOARD	O
(	O
pos	int
)	O
&&	O
score	float
[	O
pos	int
]	O
>	O
best_score	int
)	O
{	O
best_score	int
=	O
score	float
[	O
pos	int
]	O
;	O
move	pointer
=	O
pos	int
;	O
}	O
}	O
if	O
(	O
move	pointer
==	O
NO_MOVE	O
)	O
break	O
;	O
bb	int
=	O
dragons	array
[	O
move	pointer
]	O
;	O
if	O
(	O
is_illegal_ko_capture	function
(	O
move	pointer
,	O
color	int
)	O
||	O
!	O
safe_move	function
(	O
move	pointer
,	O
color	int
)	O
||	O
(	O
DRAGON2	O
(	O
bb	int
)	O
.	O
safety	int
!=	O
INVINCIBLE	int
&&	O
DRAGON2	O
(	O
bb	int
)	O
.	O
safety	int
!=	O
STRONGLY_ALIVE	int
&&	O
owl_does_defend	function
(	O
move	pointer
,	O
bb	int
,	O
NULL	O
)	O
!=	O
WIN	int
)	O
||	O
(	O
!	O
confirm_safety	function
(	O
move	pointer
,	O
color	int
,	O
NULL	O
,	O
NULL	O
)	O
)	O
)	O
{	O
score	float
[	O
move	pointer
]	O
=	O
0	int
;	O
}	O
else	O
{	O
int	O
libs	pointer
=	O
approxlib	function
(	O
move	pointer
,	O
color	int
,	O
5	int
,	O
NULL	O
)	O
;	O
int	O
move_ok	int
=	O
1	int
;	O
if	O
(	O
libs	pointer
<	O
5	int
)	O
{	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
4	int
;	O
k	int
++	O
)	O
{	O
if	O
(	O
board	pointer
[	O
move	pointer
+	O
delta	array
[	O
k	int
]	O
]	O
==	O
color	int
&&	O
countlib	function
(	O
move	pointer
+	O
delta	array
[	O
k	int
]	O
)	O
>	O
libs	pointer
)	O
break	O
;	O
}	O
if	O
(	O
k	int
<	O
4	int
)	O
{	O
if	O
(	O
trymove	function
(	O
move	pointer
,	O
color	int
,	O
"aftermath-B"	pointer
,	O
move	pointer
+	O
delta	array
[	O
k	int
]	O
)	O
)	O
{	O
int	O
adjs	array
[	O
MAXCHAIN	int
]	O
;	O
int	O
neighbors	int
;	O
int	O
r	int
;	O
neighbors	int
=	O
chainlinks	function
(	O
move	pointer
,	O
adjs	array
)	O
;	O
for	O
(	O
r	int
=	O
0	int
;	O
r	int
<	O
neighbors	int
;	O
r	int
++	O
)	O
{	O
if	O
(	O
worm	array
[	O
adjs	array
[	O
r	int
]	O
]	O
.	O
attack_codes	array
[	O
0	int
]	O
!=	O
0	int
&&	O
(	O
find_defense	function
(	O
adjs	array
[	O
r	int
]	O
,	O
NULL	O
)	O
>	O
worm	array
[	O
adjs	array
[	O
r	int
]	O
]	O
.	O
defense_codes	array
[	O
0	int
]	O
)	O
)	O
{	O
DEBUG	O
(	O
DEBUG_AFTERMATH	int
,	O
"Blunder: %1m becomes tactically safer after %1m\n"	pointer
,	O
adjs	array
[	O
r	int
]	O
,	O
move	pointer
)	O
;	O
move_ok	int
=	O
0	int
;	O
}	O
}	O
popgo	function
(	O
)	O
;	O
for	O
(	O
r	int
=	O
0	int
;	O
r	int
<	O
neighbors	int
&&	O
move_ok	int
;	O
r	int
++	O
)	O
{	O
if	O
(	O
dragon	int
[	O
adjs	array
[	O
r	int
]	O
]	O
.	O
status	enum
==	O
DEAD	int
&&	O
!	O
owl_does_attack	function
(	O
move	pointer
,	O
adjs	array
[	O
r	int
]	O
,	O
NULL	O
)	O
)	O
{	O
DEBUG	O
(	O
DEBUG_AFTERMATH	int
,	O
"Blunder: %1m becomes more alive after %1m\n"	pointer
,	O
adjs	array
[	O
r	int
]	O
,	O
move	pointer
)	O
;	O
move_ok	int
=	O
0	int
;	O
}	O
}	O
}	O
}	O
}	O
if	O
(	O
!	O
move_ok	int
)	O
score	float
[	O
move	pointer
]	O
=	O
0	int
;	O
else	O
{	O
DEBUG	O
(	O
DEBUG_AFTERMATH	int
,	O
"Splitting eyespace at %1m\n"	pointer
,	O
move	pointer
)	O
;	O
return	O
move	pointer
;	O
}	O
}	O
}	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
int	O
target	int
;	O
int	O
cc	int
=	O
NO_MOVE	O
;	O
int	O
self_atari_ok	int
=	O
0	int
;	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
!=	O
EMPTY	int
||	O
distance	array
[	O
pos	int
]	O
!=	O
-	O
1	int
)	O
continue	O
;	O
target	int
=	O
NO_MOVE	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
8	int
;	O
k	int
++	O
)	O
{	O
int	O
pos2	int
=	O
pos	int
+	O
delta	array
[	O
k	int
]	O
;	O
if	O
(	O
!	O
ON_BOARD	O
(	O
pos2	int
)	O
)	O
continue	O
;	O
if	O
(	O
board	pointer
[	O
pos2	int
]	O
==	O
other	int
&&	O
dragon	int
[	O
pos2	int
]	O
.	O
status	enum
!=	O
ALIVE	int
&&	O
dragon	int
[	O
pos2	int
]	O
.	O
status	enum
!=	O
UNKNOWN	int
&&	O
(	O
do_capture_dead_stones	int
||	O
worm	array
[	O
pos2	int
]	O
.	O
unconditional_status	enum
!=	O
DEAD	int
)	O
&&	O
DRAGON2	O
(	O
pos2	int
)	O
.	O
safety	int
!=	O
INESSENTIAL	int
)	O
{	O
if	O
(	O
k	int
<	O
4	int
||	O
all_own_neighbors_inessential	function
(	O
pos	int
,	O
color	int
)	O
)	O
{	O
target	int
=	O
pos2	int
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
target	int
==	O
NO_MOVE	O
)	O
continue	O
;	O
if	O
(	O
!	O
trymove	function
(	O
pos	int
,	O
color	int
,	O
"aftermath-A"	pointer
,	O
target	int
)	O
)	O
continue	O
;	O
self_atari_ok	int
=	O
1	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
4	int
;	O
k	int
++	O
)	O
{	O
if	O
(	O
board	pointer
[	O
pos	int
+	O
delta	array
[	O
k	int
]	O
]	O
==	O
color	int
&&	O
DRAGON2	O
(	O
pos	int
+	O
delta	array
[	O
k	int
]	O
)	O
.	O
safety	int
!=	O
INESSENTIAL	int
)	O
{	O
self_atari_ok	int
=	O
0	int
;	O
cc	int
=	O
pos	int
+	O
delta	array
[	O
k	int
]	O
;	O
break	O
;	O
}	O
}	O
move	pointer
=	O
pos	int
;	O
if	O
(	O
!	O
self_atari_ok	int
)	O
{	O
while	O
(	O
countlib	function
(	O
pos	int
)	O
==	O
1	int
)	O
{	O
int	O
lib	int
;	O
findlib	function
(	O
pos	int
,	O
1	int
,	O
&	O
lib	int
)	O
;	O
move	pointer
=	O
lib	int
;	O
if	O
(	O
!	O
trymove	function
(	O
move	pointer
,	O
color	int
,	O
"aftermath-B"	pointer
,	O
target	int
)	O
)	O
break	O
;	O
}	O
if	O
(	O
countlib	function
(	O
pos	int
)	O
==	O
1	int
)	O
move	pointer
=	O
NO_MOVE	O
;	O
}	O
while	O
(	O
stackp	int
>	O
0	int
)	O
popgo	function
(	O
)	O
;	O
if	O
(	O
move	pointer
==	O
NO_MOVE	O
)	O
continue	O
;	O
if	O
(	O
!	O
self_atari_ok	int
&&	O
(	O
board	pointer
[	O
move	pointer
]	O
!=	O
EMPTY	int
||	O
is_self_atari	function
(	O
move	pointer
,	O
color	int
)	O
)	O
)	O
continue	O
;	O
if	O
(	O
owl_does_attack	function
(	O
move	pointer
,	O
target	int
,	O
NULL	O
)	O
==	O
WIN	int
)	O
{	O
if	O
(	O
cc	int
!=	O
NO_MOVE	O
&&	O
!	O
owl_does_defend	function
(	O
move	pointer
,	O
cc	int
,	O
NULL	O
)	O
)	O
{	O
int	O
resulta	pointer
,	O
resultb	pointer
;	O
owl_analyze_semeai_after_move	function
(	O
move	pointer
,	O
color	int
,	O
target	int
,	O
cc	int
,	O
&	O
resulta	pointer
,	O
&	O
resultb	pointer
,	O
NULL	O
,	O
1	int
,	O
NULL	O
,	O
1	int
)	O
;	O
if	O
(	O
resulta	pointer
!=	O
0	int
)	O
continue	O
;	O
}	O
if	O
(	O
!	O
self_atari_ok	int
&&	O
!	O
confirm_safety	function
(	O
move	pointer
,	O
color	int
,	O
NULL	O
,	O
NULL	O
)	O
)	O
continue	O
;	O
DEBUG	O
(	O
DEBUG_AFTERMATH	int
,	O
"Filling opponent liberty at %1m\n"	pointer
,	O
move	pointer
)	O
;	O
return	O
move	pointer
;	O
}	O
}	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
other	int
&&	O
(	O
worm	array
[	O
pos	int
]	O
.	O
unconditional_status	enum
==	O
UNKNOWN	int
||	O
do_capture_dead_stones	int
)	O
&&	O
(	O
DRAGON2	O
(	O
pos	int
)	O
.	O
safety	int
==	O
DEAD	int
||	O
DRAGON2	O
(	O
pos	int
)	O
.	O
safety	int
==	O
TACTICALLY_DEAD	int
)	O
&&	O
worm	array
[	O
pos	int
]	O
.	O
attack_codes	array
[	O
0	int
]	O
!=	O
0	int
&&	O
!	O
is_illegal_ko_capture	function
(	O
worm	array
[	O
pos	int
]	O
.	O
attack_points	array
[	O
0	int
]	O
,	O
color	int
)	O
)	O
{	O
DEBUG	O
(	O
DEBUG_AFTERMATH	int
,	O
"Tactically attack %1m at %1m\n"	pointer
,	O
pos	int
,	O
worm	array
[	O
pos	int
]	O
.	O
attack_points	array
[	O
0	int
]	O
)	O
;	O
return	O
worm	array
[	O
pos	int
]	O
.	O
attack_points	array
[	O
0	int
]	O
;	O
}	O
}	O
return	O
PASS_MOVE	int
;	O
}	O
static	O
int	O
reduced_genmove	function
(	O
int	O
color	int
)	O
{	O
float	O
value	pointer
;	O
int	O
save_verbose	int
;	O
float	O
our_score	float
;	O
int	O
move	pointer
;	O
move	pointer
=	O
PASS_MOVE	int
;	O
value	pointer
=	O
0.0	int
;	O
reset_engine	function
(	O
)	O
;	O
examine_position	function
(	O
EXAMINE_ALL	int
,	O
1	int
)	O
;	O
if	O
(	O
color	int
==	O
WHITE	int
)	O
our_score	float
=	O
black_score	float
;	O
else	O
our_score	float
=	O
-	O
white_score	float
;	O
gg_assert	O
(	O
stackp	int
==	O
0	int
)	O
;	O
save_verbose	int
=	O
verbose	int
;	O
if	O
(	O
verbose	int
>	O
0	int
)	O
verbose	int
--	O
;	O
collect_move_reasons	function
(	O
color	int
)	O
;	O
verbose	int
=	O
save_verbose	int
;	O
combinations	function
(	O
color	int
)	O
;	O
gg_assert	O
(	O
stackp	int
==	O
0	int
)	O
;	O
if	O
(	O
review_move_reasons	function
(	O
&	O
move	pointer
,	O
&	O
value	pointer
,	O
color	int
,	O
0.0	int
,	O
our_score	float
,	O
NULL	O
,	O
0	int
)	O
)	O
TRACE	O
(	O
"Move generation likes %1m with value %f\n"	pointer
,	O
move	pointer
,	O
value	pointer
)	O
;	O
gg_assert	O
(	O
stackp	int
==	O
0	int
)	O
;	O
if	O
(	O
move	pointer
==	O
PASS_MOVE	int
)	O
TRACE	O
(	O
"I pass.\n"	pointer
)	O
;	O
else	O
TRACE	O
(	O
"reduced_genmove() recommends %1m with value %f\n"	pointer
,	O
move	pointer
,	O
value	pointer
)	O
;	O
return	O
move	pointer
;	O
}	O
static	O
void	O
do_play_aftermath	function
(	O
int	O
color	int
,	O
struct	O
aftermath_data	struct
*	O
a	char
,	O
SGFTree	struct
*	O
aftermath_sgftree	pointer
)	O
{	O
int	O
move	pointer
;	O
int	O
pass	int
=	O
0	int
;	O
int	O
moves	array
=	O
0	int
;	O
int	O
color_to_play	int
=	O
color	int
;	O
DEBUG	O
(	O
DEBUG_AFTERMATH	int
,	O
"The aftermath starts.\n"	pointer
)	O
;	O
disable_threat_computation	int
=	O
1	int
;	O
disable_endgame_patterns	int
=	O
1	int
;	O
while	O
(	O
pass	int
<	O
2	int
&&	O
moves	array
<	O
board_size	int
*	O
board_size	int
)	O
{	O
int	O
reading_nodes	int
=	O
get_reading_node_counter	function
(	O
)	O
;	O
int	O
owl_nodes	int
=	O
get_owl_node_counter	function
(	O
)	O
;	O
move	pointer
=	O
reduced_genmove	function
(	O
color_to_play	int
)	O
;	O
if	O
(	O
move	pointer
==	O
PASS_MOVE	int
)	O
{	O
int	O
save_verbose	int
=	O
verbose	int
;	O
if	O
(	O
verbose	int
>	O
0	int
)	O
verbose	int
--	O
;	O
move	pointer
=	O
do_aftermath_genmove	function
(	O
color_to_play	int
,	O
(	O
color_to_play	int
==	O
WHITE	int
?	O
a	char
->	O
white_control	array
:	O
a	char
->	O
black_control	array
)	O
,	O
0	int
)	O
;	O
verbose	int
=	O
save_verbose	int
;	O
}	O
play_move	function
(	O
move	pointer
,	O
color_to_play	int
)	O
;	O
if	O
(	O
aftermath_sgftree	pointer
)	O
sgftreeAddPlay	function
(	O
aftermath_sgftree	pointer
,	O
color_to_play	int
,	O
I	O
(	O
move	pointer
)	O
,	O
J	O
(	O
move	pointer
)	O
)	O
;	O
moves	array
++	O
;	O
DEBUG	O
(	O
DEBUG_AFTERMATH	int
,	O
"%d %C move %1m (nodes %d, %d  total %d, %d)\n"	pointer
,	O
movenum	int
,	O
color_to_play	int
,	O
move	pointer
,	O
get_owl_node_counter	function
(	O
)	O
-	O
owl_nodes	int
,	O
get_reading_node_counter	function
(	O
)	O
-	O
reading_nodes	int
,	O
get_owl_node_counter	function
(	O
)	O
,	O
get_reading_node_counter	function
(	O
)	O
)	O
;	O
if	O
(	O
move	pointer
!=	O
PASS_MOVE	int
)	O
pass	int
=	O
0	int
;	O
else	O
pass	int
++	O
;	O
color_to_play	int
=	O
OTHER_COLOR	O
(	O
color_to_play	int
)	O
;	O
}	O
disable_threat_computation	int
=	O
0	int
;	O
disable_endgame_patterns	int
=	O
0	int
;	O
}	O
static	O
struct	O
aftermath_data	struct
aftermath	struct
;	O
static	O
void	O
play_aftermath	function
(	O
int	O
color	int
,	O
SGFTree	struct
*	O
aftermath_sgftree	pointer
)	O
{	O
int	O
pos	int
;	O
struct	O
board_state	struct
saved_board	struct
;	O
struct	O
aftermath_data	struct
*	O
a	char
=	O
&	O
aftermath	struct
;	O
static	O
int	O
current_board	array
[	O
BOARDMAX	O
]	O
;	O
static	O
int	O
current_color	int
=	O
EMPTY	int
;	O
int	O
cached_board	int
=	O
1	int
;	O
gg_assert	O
(	O
color	int
==	O
BLACK	int
||	O
color	int
==	O
WHITE	int
)	O
;	O
if	O
(	O
current_color	int
!=	O
color	int
)	O
{	O
current_color	int
=	O
color	int
;	O
cached_board	int
=	O
0	int
;	O
}	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
ON_BOARD	O
(	O
pos	int
)	O
&&	O
board	pointer
[	O
pos	int
]	O
!=	O
current_board	array
[	O
pos	int
]	O
)	O
{	O
current_board	array
[	O
pos	int
]	O
=	O
board	pointer
[	O
pos	int
]	O
;	O
cached_board	int
=	O
0	int
;	O
}	O
}	O
if	O
(	O
cached_board	int
)	O
return	O
;	O
a	char
->	O
white_captured	int
=	O
white_captured	int
;	O
a	char
->	O
black_captured	int
=	O
black_captured	int
;	O
a	char
->	O
white_prisoners	int
=	O
0	int
;	O
a	char
->	O
black_prisoners	int
=	O
0	int
;	O
a	char
->	O
white_territory	int
=	O
0	int
;	O
a	char
->	O
black_territory	int
=	O
0	int
;	O
a	char
->	O
white_area	int
=	O
0	int
;	O
a	char
->	O
black_area	int
=	O
0	int
;	O
store_board	function
(	O
&	O
saved_board	struct
)	O
;	O
do_play_aftermath	function
(	O
color	int
,	O
a	char
,	O
aftermath_sgftree	pointer
)	O
;	O
restore_board	function
(	O
&	O
saved_board	struct
)	O
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
!	O
ON_BOARD	O
(	O
pos	int
)	O
)	O
continue	O
;	O
if	O
(	O
a	char
->	O
black_control	array
[	O
pos	int
]	O
)	O
{	O
a	char
->	O
black_area	int
++	O
;	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
WHITE	int
)	O
{	O
a	char
->	O
black_territory	int
++	O
;	O
a	char
->	O
white_prisoners	int
++	O
;	O
a	char
->	O
final_status	array
[	O
pos	int
]	O
=	O
DEAD	int
;	O
}	O
else	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
EMPTY	int
)	O
{	O
a	char
->	O
black_territory	int
++	O
;	O
a	char
->	O
final_status	array
[	O
pos	int
]	O
=	O
BLACK_TERRITORY	int
;	O
}	O
else	O
a	char
->	O
final_status	array
[	O
pos	int
]	O
=	O
ALIVE	int
;	O
}	O
else	O
if	O
(	O
a	char
->	O
white_control	array
[	O
pos	int
]	O
)	O
{	O
a	char
->	O
white_area	int
++	O
;	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
BLACK	int
)	O
{	O
a	char
->	O
white_territory	int
++	O
;	O
a	char
->	O
black_prisoners	int
++	O
;	O
a	char
->	O
final_status	array
[	O
pos	int
]	O
=	O
DEAD	int
;	O
}	O
else	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
EMPTY	int
)	O
{	O
a	char
->	O
white_territory	int
++	O
;	O
a	char
->	O
final_status	array
[	O
pos	int
]	O
=	O
WHITE_TERRITORY	int
;	O
}	O
else	O
a	char
->	O
final_status	array
[	O
pos	int
]	O
=	O
ALIVE	int
;	O
}	O
else	O
{	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
EMPTY	int
)	O
a	char
->	O
final_status	array
[	O
pos	int
]	O
=	O
DAME	int
;	O
else	O
{	O
a	char
->	O
final_status	array
[	O
pos	int
]	O
=	O
ALIVE_IN_SEKI	int
;	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
WHITE	int
)	O
a	char
->	O
white_area	int
++	O
;	O
else	O
a	char
->	O
black_area	int
++	O
;	O
}	O
}	O
}	O
if	O
(	O
debug	int
&	O
DEBUG_AFTERMATH	int
)	O
{	O
gprintf	function
(	O
"White captured: %d\n"	pointer
,	O
a	char
->	O
white_captured	int
)	O
;	O
gprintf	function
(	O
"Black captured: %d\n"	pointer
,	O
a	char
->	O
black_captured	int
)	O
;	O
gprintf	function
(	O
"White prisoners: %d\n"	pointer
,	O
a	char
->	O
white_prisoners	int
)	O
;	O
gprintf	function
(	O
"Black prisoners: %d\n"	pointer
,	O
a	char
->	O
black_prisoners	int
)	O
;	O
gprintf	function
(	O
"White territory: %d\n"	pointer
,	O
a	char
->	O
white_territory	int
)	O
;	O
gprintf	function
(	O
"Black territory: %d\n"	pointer
,	O
a	char
->	O
black_territory	int
)	O
;	O
gprintf	function
(	O
"White area: %d\n"	pointer
,	O
a	char
->	O
white_area	int
)	O
;	O
gprintf	function
(	O
"Black area: %d\n"	pointer
,	O
a	char
->	O
black_area	int
)	O
;	O
}	O
}	O
float	O
aftermath_compute_score	function
(	O
int	O
color	int
,	O
SGFTree	struct
*	O
tree	pointer
)	O
{	O
struct	O
aftermath_data	struct
*	O
a	char
=	O
&	O
aftermath	struct
;	O
play_aftermath	function
(	O
color	int
,	O
tree	pointer
)	O
;	O
if	O
(	O
chinese_rules	int
)	O
return	O
(	O
a	char
->	O
white_area	int
-	O
a	char
->	O
black_area	int
+	O
komi	float
+	O
handicap	int
)	O
;	O
else	O
return	O
(	O
a	char
->	O
white_territory	int
+	O
a	char
->	O
black_captured	int
+	O
a	char
->	O
black_prisoners	int
-	O
(	O
a	char
->	O
black_territory	int
+	O
a	char
->	O
white_captured	int
+	O
a	char
->	O
white_prisoners	int
)	O
+	O
komi	float
)	O
;	O
}	O
enum	O
dragon_status	function
aftermath_final_status	function
(	O
int	O
color	int
,	O
int	O
pos	int
)	O
{	O
ASSERT_ON_BOARD1	O
(	O
pos	int
)	O
;	O
play_aftermath	function
(	O
color	int
,	O
NULL	O
)	O
;	O
return	O
aftermath	struct
.	O
final_status	array
[	O
pos	int
]	O
;	O
}	O