static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: mp_stat.c,v 1.3 2000/06/28 16:47:02 loic Exp $"	pointer
;	O
static	O
void	O
__memp_dumpcache	function
__P	O
(	O
(	O
DB_MPOOL	struct
*	O
,	O
REGINFO	struct
*	O
,	O
size_t	long
*	O
,	O
FILE	struct
*	O
,	O
u_int32_t	int
)	O
)	O
;	O
static	O
void	O
__memp_pbh	function
__P	O
(	O
(	O
DB_MPOOL	struct
*	O
,	O
BH	struct
*	O
,	O
size_t	long
*	O
,	O
FILE	struct
*	O
)	O
)	O
;	O
int	O
CDB_memp_stat	function
(	O
dbenv	pointer
,	O
gspp	pointer
,	O
fspp	pointer
,	O
db_malloc	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_MPOOL_STAT	struct
*	O
*	O
gspp	pointer
;	O
DB_MPOOL_FSTAT	struct
*	O
*	O
*	O
fspp	pointer
;	O
void	O
*	O
(	O
*	O
db_malloc	pointer
)	O
__P	O
(	O
(	O
size_t	long
)	O
)	O
;	O
{	O
DB_MPOOL	struct
*	O
dbmp	pointer
;	O
DB_MPOOL_FSTAT	struct
*	O
*	O
tfsp	pointer
;	O
DB_MPOOL_STAT	struct
*	O
sp	pointer
;	O
MPOOL	struct
*	O
c_mp	pointer
,	O
*	O
mp	pointer
;	O
MPOOLFILE	struct
*	O
mfp	pointer
;	O
size_t	long
len	short
,	O
nlen	long
;	O
u_int32_t	int
i	int
;	O
int	O
ret	int
;	O
char	O
*	O
name	pointer
;	O
PANIC_CHECK	O
(	O
dbenv	pointer
)	O
;	O
ENV_REQUIRES_CONFIG	O
(	O
dbenv	pointer
,	O
dbenv	pointer
->	O
mp_handle	pointer
,	O
DB_INIT_MPOOL	int
)	O
;	O
dbmp	pointer
=	O
dbenv	pointer
->	O
mp_handle	pointer
;	O
sp	pointer
=	O
NULL	O
;	O
mp	pointer
=	O
dbmp	pointer
->	O
reginfo	pointer
[	O
0	int
]	O
.	O
primary	int
;	O
if	O
(	O
gspp	pointer
!=	O
NULL	O
)	O
{	O
*	O
gspp	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_calloc	function
(	O
dbenv	pointer
,	O
1	int
,	O
sizeof	O
(	O
*	O
*	O
gspp	pointer
)	O
,	O
gspp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
sp	pointer
=	O
*	O
gspp	pointer
;	O
sp	pointer
->	O
st_hash_longest	int
=	O
0	int
;	O
sp	pointer
->	O
st_region_wait	int
=	O
dbmp	pointer
->	O
reginfo	pointer
[	O
0	int
]	O
.	O
rp	pointer
->	O
mutex	union
.	O
mutex_set_wait	int
;	O
sp	pointer
->	O
st_region_nowait	int
=	O
dbmp	pointer
->	O
reginfo	pointer
[	O
0	int
]	O
.	O
rp	pointer
->	O
mutex	union
.	O
mutex_set_nowait	int
;	O
sp	pointer
->	O
st_gbytes	int
=	O
dbenv	pointer
->	O
mp_gbytes	int
;	O
sp	pointer
->	O
st_bytes	int
=	O
dbenv	pointer
->	O
mp_bytes	int
;	O
sp	pointer
->	O
st_ncache	int
=	O
dbmp	pointer
->	O
nreg	int
;	O
sp	pointer
->	O
st_regsize	int
=	O
dbmp	pointer
->	O
reginfo	pointer
[	O
0	int
]	O
.	O
rp	pointer
->	O
size	int
;	O
R_LOCK	O
(	O
dbenv	pointer
,	O
dbmp	pointer
->	O
reginfo	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
mp	pointer
->	O
nreg	int
;	O
++	O
i	int
)	O
{	O
c_mp	pointer
=	O
dbmp	pointer
->	O
reginfo	pointer
[	O
i	int
]	O
.	O
primary	int
;	O
sp	pointer
->	O
st_cache_hit	int
+=	O
c_mp	pointer
->	O
stat	pointer
.	O
st_cache_hit	int
;	O
sp	pointer
->	O
st_cache_miss	int
+=	O
c_mp	pointer
->	O
stat	pointer
.	O
st_cache_miss	int
;	O
sp	pointer
->	O
st_map	int
+=	O
c_mp	pointer
->	O
stat	pointer
.	O
st_map	int
;	O
sp	pointer
->	O
st_page_create	int
+=	O
c_mp	pointer
->	O
stat	pointer
.	O
st_page_create	int
;	O
sp	pointer
->	O
st_page_in	int
+=	O
c_mp	pointer
->	O
stat	pointer
.	O
st_page_in	int
;	O
sp	pointer
->	O
st_page_out	int
+=	O
c_mp	pointer
->	O
stat	pointer
.	O
st_page_out	int
;	O
sp	pointer
->	O
st_ro_evict	int
+=	O
c_mp	pointer
->	O
stat	pointer
.	O
st_ro_evict	int
;	O
sp	pointer
->	O
st_rw_evict	int
+=	O
c_mp	pointer
->	O
stat	pointer
.	O
st_rw_evict	int
;	O
sp	pointer
->	O
st_hash_buckets	int
+=	O
c_mp	pointer
->	O
stat	pointer
.	O
st_hash_buckets	int
;	O
sp	pointer
->	O
st_hash_searches	int
+=	O
c_mp	pointer
->	O
stat	pointer
.	O
st_hash_searches	int
;	O
if	O
(	O
c_mp	pointer
->	O
stat	pointer
.	O
st_hash_longest	int
>	O
sp	pointer
->	O
st_hash_longest	int
)	O
sp	pointer
->	O
st_hash_longest	int
=	O
c_mp	pointer
->	O
stat	pointer
.	O
st_hash_longest	int
;	O
sp	pointer
->	O
st_hash_examined	int
+=	O
c_mp	pointer
->	O
stat	pointer
.	O
st_hash_examined	int
;	O
sp	pointer
->	O
st_page_clean	int
+=	O
c_mp	pointer
->	O
stat	pointer
.	O
st_page_clean	int
;	O
sp	pointer
->	O
st_page_dirty	int
+=	O
c_mp	pointer
->	O
stat	pointer
.	O
st_page_dirty	int
;	O
sp	pointer
->	O
st_page_trickle	int
+=	O
c_mp	pointer
->	O
stat	pointer
.	O
st_page_trickle	int
;	O
sp	pointer
->	O
st_region_wait	int
+=	O
c_mp	pointer
->	O
stat	pointer
.	O
st_region_wait	int
;	O
sp	pointer
->	O
st_region_nowait	int
+=	O
c_mp	pointer
->	O
stat	pointer
.	O
st_region_nowait	int
;	O
}	O
R_UNLOCK	O
(	O
dbenv	pointer
,	O
dbmp	pointer
->	O
reginfo	pointer
)	O
;	O
}	O
if	O
(	O
fspp	pointer
!=	O
NULL	O
)	O
{	O
*	O
fspp	pointer
=	O
NULL	O
;	O
R_LOCK	O
(	O
dbenv	pointer
,	O
dbmp	pointer
->	O
reginfo	pointer
)	O
;	O
for	O
(	O
len	short
=	O
0	int
,	O
mfp	pointer
=	O
SH_TAILQ_FIRST	O
(	O
&	O
mp	pointer
->	O
mpfq	struct
,	O
__mpoolfile	struct
)	O
;	O
mfp	pointer
!=	O
NULL	O
;	O
++	O
len	short
,	O
mfp	pointer
=	O
SH_TAILQ_NEXT	O
(	O
mfp	pointer
,	O
q	struct
,	O
__mpoolfile	struct
)	O
)	O
;	O
R_UNLOCK	O
(	O
dbenv	pointer
,	O
dbmp	pointer
->	O
reginfo	pointer
)	O
;	O
if	O
(	O
len	short
==	O
0	int
)	O
return	O
(	O
0	int
)	O
;	O
len	short
=	O
(	O
len	short
+	O
1	int
)	O
*	O
sizeof	O
(	O
DB_MPOOL_FSTAT	struct
*	O
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
len	short
,	O
db_malloc	pointer
,	O
fspp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
R_LOCK	O
(	O
dbenv	pointer
,	O
dbmp	pointer
->	O
reginfo	pointer
)	O
;	O
for	O
(	O
tfsp	pointer
=	O
*	O
fspp	pointer
,	O
mfp	pointer
=	O
SH_TAILQ_FIRST	O
(	O
&	O
mp	pointer
->	O
mpfq	struct
,	O
__mpoolfile	struct
)	O
;	O
mfp	pointer
!=	O
NULL	O
;	O
++	O
tfsp	pointer
,	O
mfp	pointer
=	O
SH_TAILQ_NEXT	O
(	O
mfp	pointer
,	O
q	struct
,	O
__mpoolfile	struct
)	O
)	O
{	O
name	pointer
=	O
CDB___memp_fns	function
(	O
dbmp	pointer
,	O
mfp	pointer
)	O
;	O
nlen	long
=	O
strlen	function
(	O
name	pointer
)	O
;	O
len	short
=	O
sizeof	O
(	O
DB_MPOOL_FSTAT	struct
)	O
+	O
nlen	long
+	O
1	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
len	short
,	O
db_malloc	pointer
,	O
tfsp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
*	O
*	O
tfsp	pointer
=	O
mfp	pointer
->	O
stat	pointer
;	O
(	O
*	O
tfsp	pointer
)	O
->	O
file_name	pointer
=	O
(	O
char	O
*	O
)	O
(	O
u_int8_t	char
*	O
)	O
*	O
tfsp	pointer
+	O
sizeof	O
(	O
DB_MPOOL_FSTAT	struct
)	O
;	O
memcpy	function
(	O
(	O
*	O
tfsp	pointer
)	O
->	O
file_name	pointer
,	O
name	pointer
,	O
nlen	long
+	O
1	int
)	O
;	O
if	O
(	O
sp	pointer
!=	O
NULL	O
)	O
{	O
sp	pointer
->	O
st_cache_hit	int
+=	O
mfp	pointer
->	O
stat	pointer
.	O
st_cache_hit	int
;	O
sp	pointer
->	O
st_cache_miss	int
+=	O
mfp	pointer
->	O
stat	pointer
.	O
st_cache_miss	int
;	O
sp	pointer
->	O
st_map	int
+=	O
mfp	pointer
->	O
stat	pointer
.	O
st_map	int
;	O
sp	pointer
->	O
st_page_create	int
+=	O
mfp	pointer
->	O
stat	pointer
.	O
st_page_create	int
;	O
sp	pointer
->	O
st_page_in	int
+=	O
mfp	pointer
->	O
stat	pointer
.	O
st_page_in	int
;	O
sp	pointer
->	O
st_page_out	int
+=	O
mfp	pointer
->	O
stat	pointer
.	O
st_page_out	int
;	O
}	O
}	O
*	O
tfsp	pointer
=	O
NULL	O
;	O
R_UNLOCK	O
(	O
dbenv	pointer
,	O
dbmp	pointer
->	O
reginfo	pointer
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
void	O
CDB___memp_dump_region	function
(	O
dbenv	pointer
,	O
area	pointer
,	O
fp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
char	O
*	O
area	pointer
;	O
FILE	struct
*	O
fp	pointer
;	O
{	O
DB_MPOOL	struct
*	O
dbmp	pointer
;	O
DB_MPOOLFILE	struct
*	O
dbmfp	pointer
;	O
MPOOL	struct
*	O
mp	pointer
;	O
MPOOLFILE	struct
*	O
mfp	pointer
;	O
size_t	long
fmap	array
[	O
FMAP_ENTRIES	int
+	O
1	int
]	O
;	O
u_int32_t	int
i	int
,	O
flags	int
;	O
int	O
cnt	int
;	O
u_int8_t	char
*	O
p	pointer
;	O
dbmp	pointer
=	O
dbenv	pointer
->	O
mp_handle	pointer
;	O
if	O
(	O
fp	pointer
==	O
NULL	O
)	O
fp	pointer
=	O
stderr	pointer
;	O
for	O
(	O
flags	int
=	O
0	int
;	O
*	O
area	pointer
!=	O
'\0'	O
;	O
++	O
area	pointer
)	O
switch	O
(	O
*	O
area	pointer
)	O
{	O
case	O
'A'	O
:	O
LF_SET	O
(	O
MPOOL_DUMP_ALL	int
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
LF_SET	O
(	O
MPOOL_DUMP_HASH	int
)	O
;	O
break	O
;	O
case	O
'l'	O
:	O
LF_SET	O
(	O
MPOOL_DUMP_LRU	int
)	O
;	O
break	O
;	O
case	O
'm'	O
:	O
LF_SET	O
(	O
MPOOL_DUMP_MEM	int
)	O
;	O
break	O
;	O
}	O
R_LOCK	O
(	O
dbenv	pointer
,	O
dbmp	pointer
->	O
reginfo	pointer
)	O
;	O
mp	pointer
=	O
dbmp	pointer
->	O
reginfo	pointer
[	O
0	int
]	O
.	O
primary	int
;	O
(	O
void	O
)	O
fprintf	function
(	O
fp	pointer
,	O
"%s\nPool (region addr 0x%lx)\n"	pointer
,	O
DB_LINE	pointer
,	O
(	O
u_long	long
)	O
dbmp	pointer
->	O
reginfo	pointer
[	O
0	int
]	O
.	O
addr	pointer
)	O
;	O
cnt	int
=	O
0	int
;	O
for	O
(	O
mfp	pointer
=	O
SH_TAILQ_FIRST	O
(	O
&	O
mp	pointer
->	O
mpfq	struct
,	O
__mpoolfile	struct
)	O
;	O
mfp	pointer
!=	O
NULL	O
;	O
mfp	pointer
=	O
SH_TAILQ_NEXT	O
(	O
mfp	pointer
,	O
q	struct
,	O
__mpoolfile	struct
)	O
,	O
++	O
cnt	int
)	O
{	O
(	O
void	O
)	O
fprintf	function
(	O
fp	pointer
,	O
"File #%d: %s: type %ld, %s\n\t [UID: "	pointer
,	O
cnt	int
+	O
1	int
,	O
CDB___memp_fns	function
(	O
dbmp	pointer
,	O
mfp	pointer
)	O
,	O
(	O
long	O
)	O
mfp	pointer
->	O
ftype	int
,	O
F_ISSET	O
(	O
mfp	pointer
,	O
MP_CAN_MMAP	int
)	O
?	O
"mmap"	pointer
:	O
"read/write"	pointer
)	O
;	O
p	pointer
=	O
R_ADDR	O
(	O
dbmp	pointer
->	O
reginfo	pointer
,	O
mfp	pointer
->	O
fileid_off	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
DB_FILE_ID_LEN	int
;	O
++	O
i	int
)	O
{	O
(	O
void	O
)	O
fprintf	function
(	O
fp	pointer
,	O
"%x"	pointer
,	O
*	O
p	pointer
++	O
)	O
;	O
if	O
(	O
i	int
<	O
DB_FILE_ID_LEN	int
-	O
1	int
)	O
(	O
void	O
)	O
fprintf	function
(	O
fp	pointer
,	O
" "	pointer
)	O
;	O
}	O
(	O
void	O
)	O
fprintf	function
(	O
fp	pointer
,	O
"]\n"	pointer
)	O
;	O
if	O
(	O
cnt	int
<	O
FMAP_ENTRIES	int
)	O
fmap	array
[	O
cnt	int
]	O
=	O
R_OFFSET	O
(	O
dbmp	pointer
->	O
reginfo	pointer
,	O
mfp	pointer
)	O
;	O
}	O
for	O
(	O
dbmfp	pointer
=	O
TAILQ_FIRST	O
(	O
&	O
dbmp	pointer
->	O
dbmfq	struct
)	O
;	O
dbmfp	pointer
!=	O
NULL	O
;	O
dbmfp	pointer
=	O
TAILQ_NEXT	O
(	O
dbmfp	pointer
,	O
q	struct
)	O
,	O
++	O
cnt	int
)	O
{	O
(	O
void	O
)	O
fprintf	function
(	O
fp	pointer
,	O
"File #%d: %s: per-process, %s\n"	pointer
,	O
cnt	int
+	O
1	int
,	O
CDB___memp_fn	function
(	O
dbmfp	pointer
)	O
,	O
F_ISSET	O
(	O
dbmfp	pointer
,	O
MP_READONLY	int
)	O
?	O
"readonly"	pointer
:	O
"read/write"	pointer
)	O
;	O
if	O
(	O
cnt	int
<	O
FMAP_ENTRIES	int
)	O
fmap	array
[	O
cnt	int
]	O
=	O
R_OFFSET	O
(	O
dbmp	pointer
->	O
reginfo	pointer
,	O
mfp	pointer
)	O
;	O
}	O
if	O
(	O
cnt	int
<	O
FMAP_ENTRIES	int
)	O
fmap	array
[	O
cnt	int
]	O
=	O
INVALID_ROFF	int
;	O
else	O
fmap	array
[	O
FMAP_ENTRIES	int
]	O
=	O
INVALID_ROFF	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
mp	pointer
->	O
nreg	int
;	O
++	O
i	int
)	O
{	O
(	O
void	O
)	O
fprintf	function
(	O
fp	pointer
,	O
"%s\nCache #%d:\n"	pointer
,	O
DB_LINE	pointer
,	O
i	int
+	O
1	int
)	O
;	O
__memp_dumpcache	function
(	O
dbmp	pointer
,	O
&	O
dbmp	pointer
->	O
reginfo	pointer
[	O
i	int
]	O
,	O
fmap	array
,	O
fp	pointer
,	O
flags	int
)	O
;	O
}	O
R_UNLOCK	O
(	O
dbenv	pointer
,	O
dbmp	pointer
->	O
reginfo	pointer
)	O
;	O
(	O
void	O
)	O
fflush	function
(	O
fp	pointer
)	O
;	O
}	O
static	O
void	O
__memp_dumpcache	function
(	O
dbmp	pointer
,	O
reginfo	pointer
,	O
fmap	array
,	O
fp	pointer
,	O
flags	int
)	O
DB_MPOOL	struct
*	O
dbmp	pointer
;	O
REGINFO	struct
*	O
reginfo	pointer
;	O
size_t	long
*	O
fmap	array
;	O
FILE	struct
*	O
fp	pointer
;	O
u_int32_t	int
flags	int
;	O
{	O
BH	struct
*	O
bhp	pointer
;	O
DB_HASHTAB	struct
*	O
dbht	pointer
;	O
MPOOL	struct
*	O
c_mp	pointer
;	O
int	O
bucket	int
;	O
c_mp	pointer
=	O
reginfo	pointer
->	O
primary	int
;	O
if	O
(	O
LF_ISSET	O
(	O
MPOOL_DUMP_HASH	int
)	O
)	O
{	O
(	O
void	O
)	O
fprintf	function
(	O
fp	pointer
,	O
"%s\nBH hash table (%lu hash slots)\npageno, file, ref, address\n"	pointer
,	O
DB_LINE	pointer
,	O
(	O
u_long	long
)	O
c_mp	pointer
->	O
htab_buckets	int
)	O
;	O
for	O
(	O
dbht	pointer
=	O
R_ADDR	O
(	O
reginfo	pointer
,	O
c_mp	pointer
->	O
htab	int
)	O
,	O
bucket	int
=	O
0	int
;	O
bucket	int
<	O
c_mp	pointer
->	O
htab_buckets	int
;	O
++	O
dbht	pointer
,	O
++	O
bucket	int
)	O
{	O
if	O
(	O
SH_TAILQ_FIRST	O
(	O
dbht	pointer
,	O
__bh	struct
)	O
!=	O
NULL	O
)	O
(	O
void	O
)	O
fprintf	function
(	O
fp	pointer
,	O
"%lu:\n"	pointer
,	O
(	O
u_long	long
)	O
bucket	int
)	O
;	O
for	O
(	O
bhp	pointer
=	O
SH_TAILQ_FIRST	O
(	O
dbht	pointer
,	O
__bh	struct
)	O
;	O
bhp	pointer
!=	O
NULL	O
;	O
bhp	pointer
=	O
SH_TAILQ_NEXT	O
(	O
bhp	pointer
,	O
hq	struct
,	O
__bh	struct
)	O
)	O
__memp_pbh	function
(	O
dbmp	pointer
,	O
bhp	pointer
,	O
fmap	array
,	O
fp	pointer
)	O
;	O
}	O
}	O
if	O
(	O
LF_ISSET	O
(	O
MPOOL_DUMP_LRU	int
)	O
)	O
{	O
(	O
void	O
)	O
fprintf	function
(	O
fp	pointer
,	O
"%s\nBH LRU list\n"	pointer
,	O
DB_LINE	pointer
)	O
;	O
(	O
void	O
)	O
fprintf	function
(	O
fp	pointer
,	O
"pageno, file, ref, address\n"	pointer
)	O
;	O
for	O
(	O
bhp	pointer
=	O
SH_TAILQ_FIRST	O
(	O
&	O
c_mp	pointer
->	O
bhq	struct
,	O
__bh	struct
)	O
;	O
bhp	pointer
!=	O
NULL	O
;	O
bhp	pointer
=	O
SH_TAILQ_NEXT	O
(	O
bhp	pointer
,	O
q	struct
,	O
__bh	struct
)	O
)	O
__memp_pbh	function
(	O
dbmp	pointer
,	O
bhp	pointer
,	O
fmap	array
,	O
fp	pointer
)	O
;	O
}	O
if	O
(	O
LF_ISSET	O
(	O
MPOOL_DUMP_MEM	int
)	O
)	O
CDB___db_shalloc_dump	function
(	O
reginfo	pointer
->	O
addr	pointer
,	O
fp	pointer
)	O
;	O
}	O
static	O
void	O
__memp_pbh	function
(	O
dbmp	pointer
,	O
bhp	pointer
,	O
fmap	array
,	O
fp	pointer
)	O
DB_MPOOL	struct
*	O
dbmp	pointer
;	O
BH	struct
*	O
bhp	pointer
;	O
size_t	long
*	O
fmap	array
;	O
FILE	struct
*	O
fp	pointer
;	O
{	O
static	O
const	O
FN	struct
fn	array
[	O
]	O
=	O
{	O
{	O
BH_CALLPGIN	int
,	O
"callpgin"	pointer
}	O
,	O
{	O
BH_DIRTY	int
,	O
"dirty"	pointer
}	O
,	O
{	O
BH_DISCARD	int
,	O
"discard"	pointer
}	O
,	O
{	O
BH_LOCKED	int
,	O
"locked"	pointer
}	O
,	O
{	O
BH_TRASH	int
,	O
"trash"	pointer
}	O
,	O
{	O
BH_WRITE	int
,	O
"write"	pointer
}	O
,	O
{	O
0	int
,	O
NULL	O
}	O
}	O
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
FMAP_ENTRIES	int
;	O
++	O
i	int
)	O
if	O
(	O
fmap	array
[	O
i	int
]	O
==	O
INVALID_ROFF	int
||	O
fmap	array
[	O
i	int
]	O
==	O
bhp	pointer
->	O
mf_offset	int
)	O
break	O
;	O
if	O
(	O
fmap	array
[	O
i	int
]	O
==	O
INVALID_ROFF	int
)	O
(	O
void	O
)	O
fprintf	function
(	O
fp	pointer
,	O
"  %4lu, %lu, %2lu, %lu"	pointer
,	O
(	O
u_long	long
)	O
bhp	pointer
->	O
pgno	int
,	O
(	O
u_long	long
)	O
bhp	pointer
->	O
mf_offset	int
,	O
(	O
u_long	long
)	O
bhp	pointer
->	O
ref	int
,	O
(	O
u_long	long
)	O
R_OFFSET	O
(	O
dbmp	pointer
->	O
reginfo	pointer
,	O
bhp	pointer
)	O
)	O
;	O
else	O
(	O
void	O
)	O
fprintf	function
(	O
fp	pointer
,	O
"  %4lu,   #%d,  %2lu, %lu"	pointer
,	O
(	O
u_long	long
)	O
bhp	pointer
->	O
pgno	int
,	O
i	int
+	O
1	int
,	O
(	O
u_long	long
)	O
bhp	pointer
->	O
ref	int
,	O
(	O
u_long	long
)	O
R_OFFSET	O
(	O
dbmp	pointer
->	O
reginfo	pointer
,	O
bhp	pointer
)	O
)	O
;	O
CDB___db_prflags	function
(	O
bhp	pointer
->	O
flags	int
,	O
fn	array
,	O
fp	pointer
)	O
;	O
(	O
void	O
)	O
fprintf	function
(	O
fp	pointer
,	O
"\n"	pointer
)	O
;	O
}	O