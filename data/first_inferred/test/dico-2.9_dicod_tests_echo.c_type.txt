enum	O
echo_mode	enum
{	O
ECHO_ECHO	int
,	O
ECHO_NULL	int
}	O
;	O
struct	O
dico_handle_struct	struct
{	O
enum	O
echo_mode	enum
mode	enum
;	O
char	O
*	O
prefix	*
;	O
size_t	long
prefix_len	long
;	O
}	O
;	O
static	O
int	O
echo_init	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*
)	O
{	O
return	O
0	int
;	O
}	O
static	O
dico_handle_t	function
echo_init_db	function
(	O
const	O
char	O
*	O
dbname	*
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*
)	O
{	O
int	O
null_mode	int
=	O
0	int
;	O
dico_handle_t	*
hp	*
;	O
char	O
*	O
prefix	*
=	O
NULL	O
;	O
struct	O
dico_option	struct
init_db_option	array
[	O
]	O
=	O
{	O
{	O
DICO_OPTSTR	O
(	O
null	O
)	O
,	O
dico_opt_bool	int
,	O
&	O
null_mode	*
}	O
,	O
{	O
DICO_OPTSTR	O
(	O
prefix	*
)	O
,	O
dico_opt_string	int
,	O
&	O
prefix	*
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
if	O
(	O
dico_parseopt	function
(	O
init_db_option	*
,	O
argc	int
,	O
argv	*
,	O
0	int
,	O
NULL	O
)	O
)	O
return	O
NULL	O
;	O
hp	*
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
hp	*
)	O
)	O
;	O
if	O
(	O
hp	*
)	O
{	O
hp	*
->	O
mode	enum
=	O
null_mode	int
?	O
ECHO_NULL	int
:	O
ECHO_ECHO	int
;	O
if	O
(	O
prefix	*
)	O
{	O
hp	*
->	O
prefix	*
=	O
strdup	function
(	O
prefix	*
)	O
;	O
if	O
(	O
!	O
hp	*
->	O
prefix	*
)	O
{	O
dico_log	function
(	O
L_ERR	int
,	O
0	int
,	O
"not enough memory"	*
)	O
;	O
free	function
(	O
hp	*
)	O
;	O
return	O
NULL	O
;	O
}	O
hp	*
->	O
prefix_len	long
=	O
strlen	function
(	O
prefix	*
)	O
;	O
}	O
else	O
{	O
hp	*
->	O
prefix	*
=	O
NULL	O
;	O
hp	*
->	O
prefix_len	int
=	O
0	int
;	O
}	O
}	O
else	O
dico_log	function
(	O
L_ERR	int
,	O
0	int
,	O
"not enough memory"	*
)	O
;	O
return	O
hp	*
;	O
}	O
static	O
int	O
echo_free_db	function
(	O
dico_handle_t	*
hp	*
)	O
{	O
free	function
(	O
hp	*
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
echo_open	function
(	O
dico_handle_t	*
dp	*
)	O
{	O
return	O
0	int
;	O
}	O
static	O
int	O
echo_close	function
(	O
dico_handle_t	*
hp	*
)	O
{	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
echo_info	function
(	O
dico_handle_t	*
ep	*
)	O
{	O
static	O
char	O
*	O
echo_info_str	array
[	O
2	int
]	O
=	O
{	O
"ECHO database.\n\nThis database echoes each query.\n"	*
,	O
"NULL database.\n\nThis database returns NULL (no result) to any match and define\nrequests.\n"	*
}	O
;	O
return	O
strdup	function
(	O
echo_info_str	array
[	O
ep	*
->	O
mode	*
]	O
)	O
;	O
}	O
static	O
char	O
*	O
echo_descr	function
(	O
dico_handle_t	*
ep	*
)	O
{	O
static	O
char	O
*	O
echo_descr_str	array
[	O
2	int
]	O
=	O
{	O
"GNU Dico ECHO database"	*
,	O
"GNU Dico NULL database"	*
}	O
;	O
char	O
*	O
res	*
;	O
if	O
(	O
ep	*
->	O
mode	enum
==	O
ECHO_ECHO	int
&&	O
ep	*
->	O
prefix	*
)	O
{	O
size_t	long
len	long
=	O
strlen	function
(	O
echo_descr_str	*
[	O
ep	*
->	O
mode	int
]	O
)	O
+	O
ep	*
->	O
prefix_len	long
+	O
11	int
;	O
res	*
=	O
malloc	function
(	O
len	long
)	O
;	O
if	O
(	O
res	O
)	O
snprintf	function
(	O
res	*
,	O
len	long
,	O
"%s (prefix %s)"	*
,	O
echo_descr_str	array
[	O
ep	*
->	O
mode	int
]	O
,	O
ep	*
->	O
prefix	array
)	O
;	O
}	O
else	O
res	*
=	O
strdup	function
(	O
echo_descr_str	array
[	O
ep	*
->	O
mode	int
]	O
)	O
;	O
return	O
res	*
;	O
}	O
static	O
dico_result_t	O
new_result	function
(	O
dico_handle_t	*
ep	*
,	O
char	O
const	O
*	O
word	*
)	O
{	O
char	O
*	O
res	*
=	O
malloc	function
(	O
strlen	function
(	O
word	*
)	O
+	O
ep	*
->	O
prefix_len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
res	*
)	O
dico_log	function
(	O
L_ERR	int
,	O
0	int
,	O
"not enough memory"	*
)	O
;	O
else	O
{	O
if	O
(	O
ep	*
->	O
prefix	*
)	O
memcpy	function
(	O
res	*
,	O
ep	*
->	O
prefix	*
,	O
ep	*
->	O
prefix_len	long
)	O
;	O
strcpy	function
(	O
res	*
+	O
ep	*
->	O
prefix_len	long
,	O
word	*
)	O
;	O
}	O
return	O
(	O
dico_result_t	*
)	O
res	*
;	O
}	O
static	O
dico_result_t	*
echo_match	function
(	O
dico_handle_t	*
ep	*
,	O
const	O
dico_strategy_t	*
strat	*
,	O
const	O
char	O
*	O
word	*
)	O
{	O
if	O
(	O
ep	*
->	O
mode	enum
==	O
ECHO_NULL	int
)	O
return	O
NULL	O
;	O
return	O
new_result	function
(	O
ep	*
,	O
word	*
)	O
;	O
}	O
static	O
dico_result_t	O
echo_define	function
(	O
dico_handle_t	*
ep	*
,	O
const	O
char	O
*	O
word	*
)	O
{	O
if	O
(	O
ep	*
->	O
mode	enum
==	O
ECHO_NULL	int
)	O
return	O
NULL	O
;	O
return	O
new_result	function
(	O
ep	*
,	O
word	*
)	O
;	O
}	O
static	O
int	O
echo_output_result	function
(	O
dico_result_t	*
rp	*
,	O
size_t	long
n	long
,	O
dico_stream_t	*
str	*
)	O
{	O
char	O
*	O
word	*
=	O
(	O
char	O
*	O
)	O
rp	*
;	O
dico_stream_write	function
(	O
str	*
,	O
word	*
,	O
strlen	function
(	O
word	*
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
size_t	long
echo_result_count	function
(	O
dico_result_t	*
rp	*
)	O
{	O
return	O
1	int
;	O
}	O
static	O
size_t	long
echo_compare_count	function
(	O
dico_result_t	*
rp	*
)	O
{	O
return	O
1	int
;	O
}	O
static	O
void	O
echo_free_result	function
(	O
dico_result_t	*
rp	*
)	O
{	O
free	function
(	O
rp	*
)	O
;	O
}	O
static	O
char	O
*	O
echo_mime_header	function
(	O
dico_handle_t	*
ep	*
)	O
{	O
return	O
strdup	function
(	O
"Content-Type: text/plain; charset=utf-8\nContent-Transfer-Encoding: 8bit\n"	*
)	O
;	O
}	O
struct	O
dico_database_module	struct
DICO_EXPORT	O
(	O
echo	*
,	O
module	O
)	O
=	O
{	O
.	O
dico_version	int
=	O
DICO_MODULE_VERSION	int
,	O
.	O
dico_capabilities	int
=	O
DICO_CAPA_NONE	*
,	O
.	O
dico_init	*
=	O
echo_init	*
,	O
.	O
dico_init_db	*
=	O
echo_init_db	*
,	O
.	O
dico_free_db	*
=	O
echo_free_db	*
,	O
.	O
dico_open	*
=	O
echo_open	*
,	O
.	O
dico_close	*
=	O
echo_close	*
,	O
.	O
dico_db_info	*
=	O
echo_info	*
,	O
.	O
dico_db_descr	*
=	O
echo_descr	*
,	O
.	O
dico_match	*
=	O
echo_match	*
,	O
.	O
dico_define	*
=	O
echo_define	*
,	O
.	O
dico_output_result	*
=	O
echo_output_result	*
,	O
.	O
dico_result_count	*
=	O
echo_result_count	*
,	O
.	O
dico_compare_count	*
=	O
echo_compare_count	*
,	O
.	O
dico_free_result	int
=	O
echo_free_result	*
,	O
.	O
dico_db_mime_header	*
=	O
echo_mime_header	int
}	O
;	O