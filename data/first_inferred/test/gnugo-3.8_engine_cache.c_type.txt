static	O
void	O
tt_init	function
(	O
Transposition_table	struct
*	O
table	pointer
,	O
int	O
memsize	int
)	O
;	O
static	O
void	O
tt_clear	function
(	O
Transposition_table	struct
*	O
table	pointer
)	O
;	O
Transposition_table	struct
ttable	struct
;	O
static	O
Hash_data	struct
target1_hash	array
[	O
BOARDMAX	O
]	O
;	O
static	O
Hash_data	struct
target2_hash	array
[	O
BOARDMAX	O
]	O
;	O
static	O
Hash_data	struct
routine_hash	array
[	O
NUM_CACHE_ROUTINES	int
]	O
;	O
static	O
void	O
keyhash_init	function
(	O
void	O
)	O
{	O
static	O
int	O
is_initialized	int
=	O
0	int
;	O
if	O
(	O
!	O
is_initialized	int
)	O
{	O
INIT_ZOBRIST_ARRAY	O
(	O
target1_hash	array
)	O
;	O
INIT_ZOBRIST_ARRAY	O
(	O
target2_hash	array
)	O
;	O
INIT_ZOBRIST_ARRAY	O
(	O
routine_hash	array
)	O
;	O
is_initialized	int
=	O
1	int
;	O
}	O
}	O
static	O
void	O
calculate_hashval_for_tt	function
(	O
Hash_data	struct
*	O
hashdata	pointer
,	O
int	O
routine	enum
,	O
int	O
target1	int
,	O
int	O
target2	int
,	O
Hash_data	struct
*	O
extra_hash	pointer
)	O
{	O
*	O
hashdata	pointer
=	O
board_hash	struct
;	O
hashdata_xor	O
(	O
*	O
hashdata	pointer
,	O
routine_hash	array
[	O
routine	enum
]	O
)	O
;	O
hashdata_xor	O
(	O
*	O
hashdata	pointer
,	O
target1_hash	array
[	O
target1	int
]	O
)	O
;	O
if	O
(	O
target2	int
!=	O
NO_MOVE	O
)	O
hashdata_xor	O
(	O
*	O
hashdata	pointer
,	O
target2_hash	array
[	O
target2	int
]	O
)	O
;	O
if	O
(	O
extra_hash	pointer
)	O
hashdata_xor	O
(	O
*	O
hashdata	pointer
,	O
*	O
extra_hash	pointer
)	O
;	O
}	O
static	O
void	O
tt_init	function
(	O
Transposition_table	struct
*	O
table	pointer
,	O
int	O
memsize	int
)	O
{	O
int	O
num_entries	int
;	O
hash_init	function
(	O
)	O
;	O
keyhash_init	function
(	O
)	O
;	O
if	O
(	O
memsize	int
>	O
0	int
)	O
num_entries	int
=	O
memsize	int
/	O
sizeof	O
(	O
table	pointer
->	O
entries	pointer
[	O
0	int
]	O
)	O
;	O
else	O
num_entries	int
=	O
DEFAULT_NUMBER_OF_CACHE_ENTRIES	int
;	O
table	pointer
->	O
num_entries	int
=	O
num_entries	int
;	O
table	pointer
->	O
entries	pointer
=	O
malloc	function
(	O
num_entries	int
*	O
sizeof	O
(	O
table	pointer
->	O
entries	pointer
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
table	pointer
->	O
entries	pointer
==	O
NULL	O
)	O
{	O
perror	function
(	O
"Couldn't allocate memory for transposition table. \n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
table	pointer
->	O
is_clean	int
=	O
0	int
;	O
tt_clear	function
(	O
table	pointer
)	O
;	O
}	O
static	O
void	O
tt_clear	function
(	O
Transposition_table	struct
*	O
table	pointer
)	O
{	O
if	O
(	O
!	O
table	pointer
->	O
is_clean	int
)	O
{	O
memset	function
(	O
table	pointer
->	O
entries	pointer
,	O
0	int
,	O
table	pointer
->	O
num_entries	int
*	O
sizeof	O
(	O
table	pointer
->	O
entries	pointer
[	O
0	int
]	O
)	O
)	O
;	O
table	pointer
->	O
is_clean	int
=	O
1	int
;	O
}	O
}	O
void	O
tt_free	function
(	O
Transposition_table	struct
*	O
table	pointer
)	O
{	O
free	function
(	O
table	pointer
->	O
entries	pointer
)	O
;	O
}	O
int	O
tt_get	function
(	O
Transposition_table	struct
*	O
table	pointer
,	O
enum	O
routine_id	enum
routine	enum
,	O
int	O
target1	int
,	O
int	O
target2	int
,	O
int	O
remaining_depth	int
,	O
Hash_data	struct
*	O
extra_hash	pointer
,	O
int	O
*	O
value1	pointer
,	O
int	O
*	O
value2	pointer
,	O
int	O
*	O
move	pointer
)	O
{	O
Hash_data	struct
hashval	array
;	O
Hashentry	struct
*	O
entry	pointer
;	O
Hashnode	struct
*	O
node	pointer
;	O
if	O
(	O
remaining_depth	int
<	O
0	int
||	O
remaining_depth	int
>	O
HN_MAX_REMAINING_DEPTH	int
)	O
return	O
0	int
;	O
calculate_hashval_for_tt	function
(	O
&	O
hashval	array
,	O
routine	enum
,	O
target1	int
,	O
target2	int
,	O
extra_hash	pointer
)	O
;	O
entry	pointer
=	O
&	O
table	pointer
->	O
entries	pointer
[	O
hashdata_remainder	O
(	O
hashval	array
,	O
table	pointer
->	O
num_entries	int
)	O
]	O
;	O
if	O
(	O
hashdata_is_equal	O
(	O
hashval	array
,	O
entry	pointer
->	O
deepest	struct
.	O
key	struct
)	O
)	O
node	pointer
=	O
&	O
entry	pointer
->	O
deepest	struct
;	O
else	O
if	O
(	O
hashdata_is_equal	O
(	O
hashval	array
,	O
entry	pointer
->	O
newest	struct
.	O
key	struct
)	O
)	O
node	pointer
=	O
&	O
entry	pointer
->	O
newest	struct
;	O
else	O
return	O
0	int
;	O
stats	struct
.	O
read_result_hits	int
++	O
;	O
if	O
(	O
move	pointer
)	O
*	O
move	pointer
=	O
hn_get_move	O
(	O
node	pointer
->	O
data	pointer
)	O
;	O
if	O
(	O
remaining_depth	int
<=	O
(	O
int	O
)	O
hn_get_remaining_depth	O
(	O
node	pointer
->	O
data	pointer
)	O
)	O
{	O
if	O
(	O
value1	pointer
)	O
*	O
value1	pointer
=	O
hn_get_value1	O
(	O
node	pointer
->	O
data	pointer
)	O
;	O
if	O
(	O
value2	pointer
)	O
*	O
value2	pointer
=	O
hn_get_value2	O
(	O
node	pointer
->	O
data	pointer
)	O
;	O
stats	struct
.	O
trusted_read_result_hits	int
++	O
;	O
return	O
2	int
;	O
}	O
return	O
1	int
;	O
}	O
void	O
tt_update	function
(	O
Transposition_table	struct
*	O
table	pointer
,	O
enum	O
routine_id	enum
routine	enum
,	O
int	O
target1	int
,	O
int	O
target2	int
,	O
int	O
remaining_depth	int
,	O
Hash_data	struct
*	O
extra_hash	pointer
,	O
int	O
value1	pointer
,	O
int	O
value2	pointer
,	O
int	O
move	pointer
)	O
{	O
Hash_data	struct
hashval	array
;	O
Hashentry	struct
*	O
entry	pointer
;	O
Hashnode	struct
*	O
deepest	struct
;	O
Hashnode	struct
*	O
newest	struct
;	O
unsigned	O
int	O
data	pointer
;	O
static	O
const	O
int	O
routine_costs	array
[	O
]	O
=	O
{	O
ROUTINE_COSTS	O
}	O
;	O
gg_assert	O
(	O
routine_costs	array
[	O
NUM_CACHE_ROUTINES	int
]	O
==	O
-	O
1	int
)	O
;	O
if	O
(	O
remaining_depth	int
<	O
0	int
||	O
remaining_depth	int
>	O
HN_MAX_REMAINING_DEPTH	int
)	O
return	O
;	O
calculate_hashval_for_tt	function
(	O
&	O
hashval	array
,	O
routine	enum
,	O
target1	int
,	O
target2	int
,	O
extra_hash	pointer
)	O
;	O
data	pointer
=	O
hn_create_data	O
(	O
remaining_depth	int
,	O
value1	pointer
,	O
value2	pointer
,	O
move	pointer
,	O
routine_costs	array
[	O
routine	enum
]	O
)	O
;	O
entry	pointer
=	O
&	O
table	pointer
->	O
entries	pointer
[	O
hashdata_remainder	O
(	O
hashval	array
,	O
table	pointer
->	O
num_entries	int
)	O
]	O
;	O
deepest	struct
=	O
&	O
entry	pointer
->	O
deepest	struct
;	O
newest	struct
=	O
&	O
entry	pointer
->	O
newest	struct
;	O
if	O
(	O
hashdata_is_equal	O
(	O
hashval	array
,	O
deepest	struct
->	O
key	struct
)	O
&&	O
remaining_depth	int
>=	O
(	O
int	O
)	O
hn_get_remaining_depth	O
(	O
deepest	struct
->	O
data	pointer
)	O
)	O
{	O
deepest	struct
->	O
data	pointer
=	O
data	pointer
;	O
}	O
else	O
if	O
(	O
hashdata_is_equal	O
(	O
hashval	array
,	O
newest	struct
->	O
key	struct
)	O
&&	O
remaining_depth	int
>=	O
(	O
int	O
)	O
hn_get_remaining_depth	O
(	O
newest	struct
->	O
data	pointer
)	O
)	O
{	O
newest	struct
->	O
data	pointer
=	O
data	pointer
;	O
if	O
(	O
hn_get_remaining_depth	O
(	O
newest	struct
->	O
data	pointer
)	O
>	O
hn_get_remaining_depth	O
(	O
deepest	struct
->	O
data	pointer
)	O
)	O
{	O
Hashnode	struct
temp	struct
;	O
temp	struct
=	O
*	O
deepest	struct
;	O
*	O
deepest	struct
=	O
*	O
newest	struct
;	O
*	O
newest	struct
=	O
temp	struct
;	O
}	O
}	O
else	O
if	O
(	O
hn_get_total_cost	O
(	O
data	pointer
)	O
>	O
hn_get_total_cost	O
(	O
deepest	struct
->	O
data	pointer
)	O
)	O
{	O
if	O
(	O
hn_get_total_cost	O
(	O
newest	struct
->	O
data	pointer
)	O
<	O
hn_get_total_cost	O
(	O
deepest	struct
->	O
data	pointer
)	O
)	O
*	O
newest	struct
=	O
*	O
deepest	struct
;	O
deepest	struct
->	O
key	struct
=	O
hashval	array
;	O
deepest	struct
->	O
data	pointer
=	O
data	pointer
;	O
}	O
else	O
{	O
newest	struct
->	O
key	struct
=	O
hashval	array
;	O
newest	struct
->	O
data	pointer
=	O
data	pointer
;	O
}	O
stats	struct
.	O
read_result_entered	int
++	O
;	O
table	pointer
->	O
is_clean	int
=	O
0	int
;	O
}	O
static	O
const	O
char	O
*	O
routine_names	array
[	O
]	O
=	O
{	O
ROUTINE_NAMES	O
}	O
;	O
const	O
char	O
*	O
routine_id_to_string	function
(	O
enum	O
routine_id	enum
routine	enum
)	O
{	O
return	O
routine_names	array
[	O
(	O
int	O
)	O
routine	enum
]	O
;	O
}	O
void	O
reading_cache_init	function
(	O
int	O
bytes	int
)	O
{	O
tt_init	function
(	O
&	O
ttable	struct
,	O
bytes	int
)	O
;	O
}	O
void	O
reading_cache_clear	function
(	O
)	O
{	O
tt_clear	function
(	O
&	O
ttable	struct
)	O
;	O
}	O
float	O
reading_cache_default_size	function
(	O
)	O
{	O
return	O
DEFAULT_NUMBER_OF_CACHE_ENTRIES	int
*	O
sizeof	O
(	O
Hashentry	struct
)	O
/	O
1024.0	int
/	O
1024.0	int
;	O
}	O
void	O
sgf_trace	function
(	O
const	O
char	O
*	O
func	pointer
,	O
int	O
str	int
,	O
int	O
move	pointer
,	O
int	O
result	int
,	O
const	O
char	O
*	O
message	pointer
)	O
{	O
char	O
buf	pointer
[	O
100	int
]	O
;	O
sprintf	function
(	O
buf	pointer
,	O
"%s %c%d: "	pointer
,	O
func	pointer
,	O
J	O
(	O
str	int
)	O
+	O
'A'	O
+	O
(	O
J	O
(	O
str	int
)	O
>=	O
8	int
)	O
,	O
board_size	int
-	O
I	O
(	O
str	int
)	O
)	O
;	O
if	O
(	O
result	int
==	O
0	int
)	O
sprintf	function
(	O
buf	pointer
+	O
strlen	function
(	O
buf	pointer
)	O
,	O
"0"	pointer
)	O
;	O
else	O
if	O
(	O
ON_BOARD	O
(	O
move	pointer
)	O
)	O
sprintf	function
(	O
buf	pointer
+	O
strlen	function
(	O
buf	pointer
)	O
,	O
"%s %c%d"	pointer
,	O
result_to_string	function
(	O
result	int
)	O
,	O
J	O
(	O
move	pointer
)	O
+	O
'A'	O
+	O
(	O
J	O
(	O
move	pointer
)	O
>=	O
8	int
)	O
,	O
board_size	int
-	O
I	O
(	O
move	pointer
)	O
)	O
;	O
else	O
if	O
(	O
is_pass	function
(	O
move	pointer
)	O
)	O
sprintf	function
(	O
buf	pointer
+	O
strlen	function
(	O
buf	pointer
)	O
,	O
"%s PASS"	pointer
,	O
result_to_string	function
(	O
result	int
)	O
)	O
;	O
else	O
sprintf	function
(	O
buf	pointer
+	O
strlen	function
(	O
buf	pointer
)	O
,	O
"%s [%d]"	pointer
,	O
result_to_string	function
(	O
result	int
)	O
,	O
move	pointer
)	O
;	O
if	O
(	O
message	pointer
)	O
sprintf	function
(	O
buf	pointer
+	O
strlen	function
(	O
buf	pointer
)	O
,	O
" (%s)"	pointer
,	O
message	pointer
)	O
;	O
sgftreeAddComment	function
(	O
sgf_dumptree	pointer
,	O
buf	pointer
)	O
;	O
}	O
void	O
sgf_trace2	function
(	O
const	O
char	O
*	O
func	pointer
,	O
int	O
str1	int
,	O
int	O
str2	int
,	O
int	O
move	pointer
,	O
const	O
char	O
*	O
result	int
,	O
const	O
char	O
*	O
message	pointer
)	O
{	O
char	O
buf	pointer
[	O
100	int
]	O
;	O
sprintf	function
(	O
buf	pointer
,	O
"%s %c%d %c%d: "	pointer
,	O
func	pointer
,	O
J	O
(	O
str1	int
)	O
+	O
'A'	O
+	O
(	O
J	O
(	O
str1	int
)	O
>=	O
8	int
)	O
,	O
board_size	int
-	O
I	O
(	O
str1	int
)	O
,	O
J	O
(	O
str2	int
)	O
+	O
'A'	O
+	O
(	O
J	O
(	O
str2	int
)	O
>=	O
8	int
)	O
,	O
board_size	int
-	O
I	O
(	O
str2	int
)	O
)	O
;	O
if	O
(	O
ON_BOARD	O
(	O
move	pointer
)	O
)	O
sprintf	function
(	O
buf	pointer
+	O
strlen	function
(	O
buf	pointer
)	O
,	O
"%s %c%d"	pointer
,	O
result	int
,	O
J	O
(	O
move	pointer
)	O
+	O
'A'	O
+	O
(	O
J	O
(	O
move	pointer
)	O
>=	O
8	int
)	O
,	O
board_size	int
-	O
I	O
(	O
move	pointer
)	O
)	O
;	O
else	O
if	O
(	O
is_pass	function
(	O
move	pointer
)	O
)	O
sprintf	function
(	O
buf	pointer
+	O
strlen	function
(	O
buf	pointer
)	O
,	O
"%s PASS"	pointer
,	O
result	int
)	O
;	O
else	O
sprintf	function
(	O
buf	pointer
+	O
strlen	function
(	O
buf	pointer
)	O
,	O
"%s [%d]"	pointer
,	O
result	int
,	O
move	pointer
)	O
;	O
if	O
(	O
message	pointer
)	O
sprintf	function
(	O
buf	pointer
+	O
strlen	function
(	O
buf	pointer
)	O
,	O
" (%s)"	pointer
,	O
message	pointer
)	O
;	O
sgftreeAddComment	function
(	O
sgf_dumptree	pointer
,	O
buf	pointer
)	O
;	O
}	O
void	O
sgf_trace_semeai	function
(	O
const	O
char	O
*	O
func	pointer
,	O
int	O
str1	int
,	O
int	O
str2	int
,	O
int	O
move	pointer
,	O
int	O
result1	int
,	O
int	O
result2	int
,	O
const	O
char	O
*	O
message	pointer
)	O
{	O
char	O
buf	pointer
[	O
100	int
]	O
;	O
sprintf	function
(	O
buf	pointer
,	O
"%s %c%d %c%d: "	pointer
,	O
func	pointer
,	O
J	O
(	O
str1	int
)	O
+	O
'A'	O
+	O
(	O
J	O
(	O
str1	int
)	O
>=	O
8	int
)	O
,	O
board_size	int
-	O
I	O
(	O
str1	int
)	O
,	O
J	O
(	O
str2	int
)	O
+	O
'A'	O
+	O
(	O
J	O
(	O
str2	int
)	O
>=	O
8	int
)	O
,	O
board_size	int
-	O
I	O
(	O
str2	int
)	O
)	O
;	O
if	O
(	O
ON_BOARD	O
(	O
move	pointer
)	O
)	O
sprintf	function
(	O
buf	pointer
+	O
strlen	function
(	O
buf	pointer
)	O
,	O
"%s %s %c%d"	pointer
,	O
result_to_string	function
(	O
result1	int
)	O
,	O
result_to_string	function
(	O
result2	int
)	O
,	O
J	O
(	O
move	pointer
)	O
+	O
'A'	O
+	O
(	O
J	O
(	O
move	pointer
)	O
>=	O
8	int
)	O
,	O
board_size	int
-	O
I	O
(	O
move	pointer
)	O
)	O
;	O
else	O
if	O
(	O
is_pass	function
(	O
move	pointer
)	O
)	O
sprintf	function
(	O
buf	pointer
+	O
strlen	function
(	O
buf	pointer
)	O
,	O
"%s %s PASS"	pointer
,	O
result_to_string	function
(	O
result1	int
)	O
,	O
result_to_string	function
(	O
result2	int
)	O
)	O
;	O
else	O
sprintf	function
(	O
buf	pointer
+	O
strlen	function
(	O
buf	pointer
)	O
,	O
"%s %s [%d]"	pointer
,	O
result_to_string	function
(	O
result1	int
)	O
,	O
result_to_string	function
(	O
result2	int
)	O
,	O
move	pointer
)	O
;	O
if	O
(	O
message	pointer
)	O
sprintf	function
(	O
buf	pointer
+	O
strlen	function
(	O
buf	pointer
)	O
,	O
" (%s)"	pointer
,	O
message	pointer
)	O
;	O
sgftreeAddComment	function
(	O
sgf_dumptree	pointer
,	O
buf	pointer
)	O
;	O
}	O