gsl_rng	struct
*	O
gsl_rng_alloc	function
(	O
const	O
gsl_rng_type	struct
*	O
T	*
)	O
{	O
gsl_rng	struct
*	O
r	*
=	O
(	O
gsl_rng	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
gsl_rng	*
)	O
)	O
;	O
if	O
(	O
r	*
==	O
0	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for rng struct"	*
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
;	O
r	*
->	O
state	*
=	O
calloc	function
(	O
1	int
,	O
T	*
->	O
size	long
)	O
;	O
if	O
(	O
r	*
->	O
state	*
==	O
0	int
)	O
{	O
free	function
(	O
r	*
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for rng state"	*
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
;	O
r	*
->	O
type	*
=	O
T	*
;	O
gsl_rng_set	function
(	O
r	*
,	O
gsl_rng_default_seed	long
)	O
;	O
return	O
r	int
;	O
}	O
int	O
gsl_rng_memcpy	function
(	O
gsl_rng	struct
*	O
dest	*
,	O
const	O
gsl_rng	struct
*	O
src	*
)	O
{	O
if	O
(	O
dest	*
->	O
type	*
!=	O
src	*
->	O
type	int
)	O
{	O
GSL_ERROR	O
(	O
"generators must be of the same type"	*
,	O
GSL_EINVAL	int
)	O
;	O
}	O
memcpy	function
(	O
dest	*
->	O
state	*
,	O
src	*
->	O
state	*
,	O
src	*
->	O
type	*
->	O
size	long
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
gsl_rng	struct
*	O
gsl_rng_clone	function
(	O
const	O
gsl_rng	struct
*	O
q	*
)	O
{	O
gsl_rng	struct
*	O
r	*
=	O
(	O
gsl_rng	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
gsl_rng	*
)	O
)	O
;	O
if	O
(	O
r	*
==	O
0	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for rng struct"	*
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
;	O
r	*
->	O
state	*
=	O
malloc	function
(	O
q	*
->	O
type	*
->	O
size	long
)	O
;	O
if	O
(	O
r	*
->	O
state	*
==	O
0	int
)	O
{	O
free	function
(	O
r	*
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for rng state"	*
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
;	O
r	*
->	O
type	enum
=	O
q	*
->	O
type	enum
;	O
memcpy	function
(	O
r	*
->	O
state	*
,	O
q	*
->	O
state	*
,	O
q	*
->	O
type	*
->	O
size	long
)	O
;	O
return	O
r	int
;	O
}	O
void	O
gsl_rng_set	function
(	O
const	O
gsl_rng	struct
*	O
r	*
,	O
unsigned	O
long	O
int	O
seed	long
)	O
{	O
(	O
r	*
->	O
type	*
->	O
set	*
)	O
(	O
r	*
->	O
state	*
,	O
seed	long
)	O
;	O
}	O
unsigned	O
long	O
int	O
gsl_rng_max	function
(	O
const	O
gsl_rng	struct
*	O
r	*
)	O
{	O
return	O
r	*
->	O
type	*
->	O
max	int
;	O
}	O
unsigned	O
long	O
int	O
gsl_rng_min	function
(	O
const	O
gsl_rng	struct
*	O
r	*
)	O
{	O
return	O
r	*
->	O
type	*
->	O
min	*
;	O
}	O
const	O
char	O
*	O
gsl_rng_name	function
(	O
const	O
gsl_rng	struct
*	O
r	*
)	O
{	O
return	O
r	*
->	O
type	*
->	O
name	*
;	O
}	O
size_t	long
gsl_rng_size	function
(	O
const	O
gsl_rng	struct
*	O
r	*
)	O
{	O
return	O
r	*
->	O
type	*
->	O
size	long
;	O
}	O
void	O
*	O
gsl_rng_state	function
(	O
const	O
gsl_rng	struct
*	O
r	*
)	O
{	O
return	O
r	*
->	O
state	*
;	O
}	O
void	O
gsl_rng_print_state	function
(	O
const	O
gsl_rng	struct
*	O
r	*
)	O
{	O
size_t	long
i	long
;	O
unsigned	O
char	O
*	O
p	*
=	O
(	O
unsigned	O
char	O
*	O
)	O
(	O
r	*
->	O
state	*
)	O
;	O
const	O
size_t	long
n	long
=	O
r	*
->	O
type	*
->	O
size	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	long
;	O
i	long
++	O
)	O
{	O
printf	function
(	O
"%.2x"	*
,	O
*	O
(	O
p	*
+	O
i	long
)	O
)	O
;	O
}	O
}	O
void	O
gsl_rng_free	function
(	O
gsl_rng	struct
*	O
r	*
)	O
{	O
RETURN_IF_NULL	O
(	O
r	*
)	O
;	O
free	function
(	O
r	*
->	O
state	*
)	O
;	O
free	function
(	O
r	*
)	O
;	O
}	O