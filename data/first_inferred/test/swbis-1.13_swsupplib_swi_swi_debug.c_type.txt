static	O
STROB	struct
*	O
buf0	pointer
=	O
NULL	O
;	O
static	O
STROB	struct
*	O
buf1	pointer
=	O
NULL	O
;	O
static	O
STROB	struct
*	O
buf1a	pointer
=	O
NULL	O
;	O
static	O
STROB	struct
*	O
buf2	pointer
=	O
NULL	O
;	O
static	O
STROB	struct
*	O
buf4	pointer
=	O
NULL	O
;	O
static	O
STROB	struct
*	O
buf6	pointer
=	O
NULL	O
;	O
static	O
STROB	struct
*	O
buf8	pointer
=	O
NULL	O
;	O
static	O
STROB	struct
*	O
buf9	pointer
=	O
NULL	O
;	O
static	O
STROB	struct
*	O
bufbase	pointer
=	O
NULL	O
;	O
static	O
STROB	struct
*	O
buf10	pointer
=	O
NULL	O
;	O
char	O
*	O
swi_script_list_dump_string_s	function
(	O
SWI_SCRIPTS	struct
*	O
xx	pointer
,	O
char	O
*	O
prefix	pointer
)	O
{	O
int	O
i	int
=	O
0	int
;	O
STROB	struct
*	O
buf	pointer
;	O
char	O
*	O
tmp_s	pointer
;	O
if	O
(	O
buf4	pointer
==	O
(	O
STROB	struct
*	O
)	O
NULL	O
)	O
buf4	pointer
=	O
strob_open	function
(	O
100	int
)	O
;	O
buf	pointer
=	O
buf4	pointer
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
0	int
,	O
"%s%p (SWI_SCRIPTS*)\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
)	O
;	O
i	int
=	O
0	int
;	O
while	O
(	O
i	int
<	O
SWI_MAX_OBJ	int
&&	O
xx	pointer
->	O
swi_coM	array
[	O
i	int
]	O
)	O
{	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->swi_coM[%d] = %p\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
i	int
,	O
xx	pointer
->	O
swi_coM	array
[	O
i	int
]	O
)	O
;	O
tmp_s	pointer
=	O
swi_xfile_script_dump_string_s	function
(	O
xx	pointer
->	O
swi_coM	array
[	O
i	int
]	O
,	O
prefix	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s"	pointer
,	O
tmp_s	pointer
)	O
;	O
i	int
++	O
;	O
}	O
return	O
strob_str	function
(	O
buf	pointer
)	O
;	O
}	O
char	O
*	O
swi_control_script_info_definition_dump	function
(	O
SWI_CONTROL_SCRIPT	struct
*	O
xx	pointer
,	O
char	O
*	O
prefix	pointer
)	O
{	O
SWI_XFILE	struct
*	O
xfile	pointer
;	O
STROB	struct
*	O
buf	pointer
;	O
STROB	struct
*	O
tmp	pointer
=	O
strob_open	function
(	O
10	int
)	O
;	O
SWHEADER	struct
*	O
h	pointer
;	O
char	O
*	O
next_attr	pointer
;	O
char	O
*	O
image	pointer
;	O
int	O
memfd	int
;	O
int	O
len	int
;	O
SWHEADER_STATE	struct
state	pointer
;	O
memfd	int
=	O
swlib_open_memfd	function
(	O
)	O
;	O
if	O
(	O
buf10	pointer
==	O
(	O
STROB	struct
*	O
)	O
NULL	O
)	O
buf10	pointer
=	O
strob_open	function
(	O
100	int
)	O
;	O
buf	pointer
=	O
buf10	pointer
;	O
strob_strcpy	function
(	O
buf	pointer
,	O
""	pointer
)	O
;	O
xfile	pointer
=	O
xx	pointer
->	O
swi_xfileM	pointer
;	O
h	pointer
=	O
xfile	pointer
->	O
info_headerM	pointer
;	O
swheader_store_state	function
(	O
h	pointer
,	O
&	O
state	pointer
)	O
;	O
swheader_reset	function
(	O
h	pointer
)	O
;	O
swheader_set_current_offset_p	function
(	O
h	pointer
,	O
&	O
(	O
xfile	pointer
->	O
INFO_header_indexM	int
)	O
)	O
;	O
swheader_set_current_offset_p_value	function
(	O
h	pointer
,	O
xx	pointer
->	O
INFO_offsetM	int
)	O
;	O
while	O
(	O
(	O
next_attr	pointer
=	O
swheader_get_next_attribute	function
(	O
h	pointer
)	O
)	O
)	O
swheaderline_write_debug	function
(	O
next_attr	pointer
,	O
memfd	int
)	O
;	O
image	pointer
=	O
swi_com_get_fd_mem	function
(	O
memfd	int
,	O
&	O
len	int
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->dataM T>>>>>> BEGIN DEFINITION ATTRIBUTES\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
)	O
;	O
strob_strcat	function
(	O
buf	pointer
,	O
image	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->dataM T>>>>>> END DEFINITION ATTRIBUTES\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
)	O
;	O
uxfio_close	function
(	O
memfd	int
)	O
;	O
swheader_restore_state	function
(	O
h	pointer
,	O
&	O
state	pointer
)	O
;	O
return	O
strob_str	function
(	O
buf	pointer
)	O
;	O
}	O
char	O
*	O
swi_xfile_member_dump_string_s	function
(	O
SWI_FILE_MEMBER	struct
*	O
xx	pointer
,	O
char	O
*	O
prefix	pointer
)	O
{	O
STROB	struct
*	O
buf	pointer
;	O
STROB	struct
*	O
tmp	pointer
=	O
strob_open	function
(	O
10	int
)	O
;	O
char	O
*	O
datap	pointer
;	O
char	O
*	O
newline	pointer
;	O
if	O
(	O
buf1	pointer
==	O
(	O
STROB	struct
*	O
)	O
NULL	O
)	O
buf1	pointer
=	O
strob_open	function
(	O
100	int
)	O
;	O
buf	pointer
=	O
buf1	pointer
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
0	int
,	O
"%s%p (SWI_FILE_MEMBER*)\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->baseM  = [%p]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
(	O
void	O
*	O
)	O
(	O
&	O
(	O
xx	pointer
->	O
baseM	struct
)	O
)	O
)	O
;	O
strob_sprintf	function
(	O
tmp	pointer
,	O
0	int
,	O
"%s%p->baseM:"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
(	O
&	O
(	O
xx	pointer
->	O
baseM	struct
)	O
)	O
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s"	pointer
,	O
swi_base_dump_string_s	function
(	O
&	O
(	O
xx	pointer
->	O
baseM	struct
)	O
,	O
strob_str	function
(	O
tmp	pointer
)	O
)	O
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->pathnameM         = [%s]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
pathnameM	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->lenM              = [%d]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
lenM	int
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->dataM T>>>>>> BEGIN DATA\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
)	O
;	O
datap	pointer
=	O
xx	pointer
->	O
dataM	pointer
;	O
newline	pointer
=	O
datap	pointer
;	O
while	O
(	O
*	O
datap	pointer
)	O
{	O
if	O
(	O
*	O
datap	pointer
==	O
'\n'	O
)	O
{	O
*	O
datap	pointer
=	O
'\0'	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->dataM D>%s\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
newline	pointer
)	O
;	O
newline	pointer
=	O
datap	pointer
+	O
1	int
;	O
}	O
datap	pointer
++	O
;	O
}	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->dataM T>>>>>> END DATA\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
)	O
;	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
return	O
strob_str	function
(	O
buf	pointer
)	O
;	O
}	O
char	O
*	O
swi_bundle_dump_string_s	function
(	O
SWI_BUNDLE	struct
*	O
xx	pointer
,	O
char	O
*	O
prefix	pointer
)	O
{	O
STROB	struct
*	O
buf	pointer
;	O
if	O
(	O
buf1a	pointer
==	O
(	O
STROB	struct
*	O
)	O
NULL	O
)	O
buf1a	pointer
=	O
strob_open	function
(	O
100	int
)	O
;	O
buf	pointer
=	O
buf1a	pointer
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
0	int
,	O
"%s%p (SWI_BUNDLE*)\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
)	O
;	O
return	O
strob_str	function
(	O
buf	pointer
)	O
;	O
}	O
char	O
*	O
swi_xfile_script_dump_string_s	function
(	O
SWI_CONTROL_SCRIPT	struct
*	O
xx	pointer
,	O
char	O
*	O
prefix	pointer
)	O
{	O
STROB	struct
*	O
buf	pointer
;	O
char	O
*	O
tmps	pointer
;	O
if	O
(	O
buf2	pointer
==	O
(	O
STROB	struct
*	O
)	O
NULL	O
)	O
buf2	pointer
=	O
strob_open	function
(	O
100	int
)	O
;	O
buf	pointer
=	O
buf2	pointer
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
0	int
,	O
"%s%p (SWI_CONTROL_SCRIPT*)\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->baseM.is_activeM  = [%d]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
baseM	struct
.	O
is_activeM	int
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->b_tagM        = [%s]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
baseM	struct
.	O
b_tagM	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->resultM     = [%d]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
resultM	int
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->afileM      = [%p]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
afileM	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->swi_xfileM      = [%p]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
swi_xfileM	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->INFO_offsetM      = [%d]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
INFO_offsetM	int
)	O
;	O
tmps	pointer
=	O
swi_control_script_info_definition_dump	function
(	O
xx	pointer
,	O
prefix	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s"	pointer
,	O
tmps	pointer
)	O
;	O
tmps	pointer
=	O
swi_xfile_member_dump_string_s	function
(	O
xx	pointer
->	O
afileM	pointer
,	O
prefix	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s"	pointer
,	O
tmps	pointer
)	O
;	O
return	O
strob_str	function
(	O
buf	pointer
)	O
;	O
}	O
char	O
*	O
swi_base_dump_string_s	function
(	O
SWI_BASE	struct
*	O
xx	pointer
,	O
char	O
*	O
prefix	pointer
)	O
{	O
STROB	struct
*	O
tmp	pointer
=	O
strob_open	function
(	O
1	int
)	O
;	O
STROB	struct
*	O
buf	pointer
;	O
STROB	struct
*	O
bufverid	pointer
;	O
int	O
current_offset	int
;	O
if	O
(	O
bufbase	pointer
==	O
(	O
STROB	struct
*	O
)	O
(	O
NULL	O
)	O
)	O
bufbase	pointer
=	O
strob_open	function
(	O
100	int
)	O
;	O
buf	pointer
=	O
bufbase	pointer
;	O
bufverid	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
0	int
,	O
"%s%p (SWI_BASE*)\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->id_startM       = [%d]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
(	O
int	O
)	O
(	O
xx	pointer
->	O
id_startM	char
)	O
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->type_idM        = [%d]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
(	O
int	O
)	O
(	O
xx	pointer
->	O
type_idM	char
)	O
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->is_activeM      = [%d]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
is_activeM	int
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->b_tagM          = [%s]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
b_tagM	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->create_timeM    = [%lu]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
(	O
unsigned	O
long	O
)	O
(	O
xx	pointer
->	O
create_timeM	long
)	O
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->mod_timeM       = [%lu]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
(	O
unsigned	O
long	O
)	O
(	O
xx	pointer
->	O
mod_timeM	long
)	O
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->header_indexM   = [%d]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
header_indexM	int
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->global_headerM  = [%p]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
(	O
void	O
*	O
)	O
(	O
xx	pointer
->	O
global_headerM	pointer
)	O
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->swveridM        = [%p]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
(	O
void	O
*	O
)	O
(	O
xx	pointer
->	O
swveridM	pointer
)	O
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->%p->swverid_print() = [%s]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
(	O
void	O
*	O
)	O
(	O
xx	pointer
->	O
swveridM	pointer
)	O
,	O
swverid_print	function
(	O
xx	pointer
->	O
swveridM	pointer
,	O
tmp	pointer
)	O
)	O
;	O
strob_sprintf	function
(	O
tmp	pointer
,	O
0	int
,	O
"%s->%p:"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
(	O
xx	pointer
->	O
swveridM	pointer
)	O
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->swveridM        = [%s]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
swverid_show_object_debug	function
(	O
xx	pointer
->	O
swveridM	pointer
,	O
bufverid	pointer
,	O
strob_str	function
(	O
tmp	pointer
)	O
)	O
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->verboseM        = [%d]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
verboseM	int
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->id_endM         = [%d]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
(	O
int	O
)	O
(	O
xx	pointer
->	O
id_endM	char
)	O
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->(implied data) T>>>>>> BEGIN INDEX DATA\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
)	O
;	O
if	O
(	O
xx	pointer
->	O
global_headerM	pointer
)	O
{	O
char	O
*	O
next_attr	pointer
;	O
char	O
*	O
obj	pointer
;	O
int	O
level	int
;	O
int	O
memfd	int
;	O
int	O
len	int
;	O
char	O
*	O
image	pointer
;	O
current_offset	int
=	O
swheader_get_current_offset	function
(	O
xx	pointer
->	O
global_headerM	pointer
)	O
;	O
swheader_set_current_offset	function
(	O
xx	pointer
->	O
global_headerM	pointer
,	O
xx	pointer
->	O
header_indexM	int
)	O
;	O
obj	pointer
=	O
swheader_get_current_line	function
(	O
xx	pointer
->	O
global_headerM	pointer
)	O
;	O
level	int
=	O
swheaderline_get_level	function
(	O
obj	pointer
)	O
;	O
memfd	int
=	O
swlib_open_memfd	function
(	O
)	O
;	O
swheaderline_write_debug	function
(	O
obj	pointer
,	O
memfd	int
)	O
;	O
while	O
(	O
(	O
next_attr	pointer
=	O
swheader_get_next_attribute	function
(	O
xx	pointer
->	O
global_headerM	pointer
)	O
)	O
)	O
swheaderline_write_debug	function
(	O
next_attr	pointer
,	O
memfd	int
)	O
;	O
image	pointer
=	O
swi_com_get_fd_mem	function
(	O
memfd	int
,	O
&	O
len	int
)	O
;	O
strob_strcpy	function
(	O
tmp	pointer
,	O
image	pointer
)	O
;	O
uxfio_close	function
(	O
memfd	int
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s"	pointer
,	O
strob_str	function
(	O
tmp	pointer
)	O
)	O
;	O
swheader_set_current_offset	function
(	O
xx	pointer
->	O
global_headerM	pointer
,	O
current_offset	int
)	O
;	O
}	O
else	O
{	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->(implied data)\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
)	O
;	O
}	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->(implied data) T>>>>>> END INDEX DATA\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
)	O
;	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
return	O
strob_str	function
(	O
buf	pointer
)	O
;	O
}	O
char	O
*	O
swi_xfile_dump_string_s	function
(	O
SWI_XFILE	struct
*	O
xx	pointer
,	O
char	O
*	O
prefix	pointer
)	O
{	O
int	O
i	int
=	O
0	int
;	O
STROB	struct
*	O
tmp	pointer
=	O
strob_open	function
(	O
1	int
)	O
;	O
char	O
*	O
tmp_s	pointer
;	O
SWI_FILE_MEMBER	struct
*	O
afile	pointer
;	O
STROB	struct
*	O
buf	pointer
;	O
int	O
current_offset	int
;	O
if	O
(	O
buf0	pointer
==	O
(	O
STROB	struct
*	O
)	O
(	O
NULL	O
)	O
)	O
buf0	pointer
=	O
strob_open	function
(	O
100	int
)	O
;	O
buf	pointer
=	O
buf0	pointer
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
0	int
,	O
"%s%p (SWI_XFILE*)\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->baseM  = [%p]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
(	O
void	O
*	O
)	O
(	O
&	O
(	O
xx	pointer
->	O
baseM	struct
)	O
)	O
)	O
;	O
strob_sprintf	function
(	O
tmp	pointer
,	O
0	int
,	O
"%s%p->baseM:"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
(	O
&	O
(	O
xx	pointer
->	O
baseM	struct
)	O
)	O
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s"	pointer
,	O
swi_base_dump_string_s	function
(	O
&	O
(	O
xx	pointer
->	O
baseM	struct
)	O
,	O
strob_str	function
(	O
tmp	pointer
)	O
)	O
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->is_selectedM    = [%d]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
is_selectedM	int
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->typeM           = [%d]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
typeM	int
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->package_pathM   = [%s]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
package_pathM	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->control_dirM    = [%s]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
control_dirM	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->swi_scM         = [%p]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
swi_scM	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->info_headerM         = [%p]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
info_headerM	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->INFO_header_indexM   = [%d]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
INFO_header_indexM	int
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->archive_filesM  = [%p]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
archive_filesM	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->swdef_fdM       = [%d]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
swdef_fdM	int
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->did_parse_def_fileM = [%d]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
did_parse_def_fileM	int
)	O
;	O
i	int
=	O
0	int
;	O
while	O
(	O
(	O
afile	pointer
=	O
(	O
SWI_FILE_MEMBER	struct
*	O
)	O
cplob_val	function
(	O
xx	pointer
->	O
archive_filesM	pointer
,	O
i	int
)	O
)	O
)	O
{	O
strob_sprintf	function
(	O
tmp	pointer
,	O
0	int
,	O
"[n =%-30d]"	pointer
,	O
i	int
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->archive_filesM[%d] = %p\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
i	int
,	O
(	O
void	O
*	O
)	O
afile	pointer
)	O
;	O
tmp_s	pointer
=	O
swi_xfile_member_dump_string_s	function
(	O
afile	pointer
,	O
prefix	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s"	pointer
,	O
tmp_s	pointer
)	O
;	O
i	int
++	O
;	O
}	O
if	O
(	O
xx	pointer
->	O
swi_scM	pointer
)	O
{	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->swi_scM = %p\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
swi_scM	pointer
)	O
;	O
tmp_s	pointer
=	O
swi_script_list_dump_string_s	function
(	O
xx	pointer
->	O
swi_scM	pointer
,	O
prefix	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s"	pointer
,	O
tmp_s	pointer
)	O
;	O
}	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
return	O
strob_str	function
(	O
buf	pointer
)	O
;	O
}	O
char	O
*	O
swi_product_dump_string_s	function
(	O
SWI_PRODUCT	struct
*	O
xx	pointer
,	O
char	O
*	O
prefix	pointer
)	O
{	O
int	O
i	int
=	O
0	int
;	O
STROB	struct
*	O
buf	pointer
;	O
STROB	struct
*	O
tmp	pointer
=	O
strob_open	function
(	O
1	int
)	O
;	O
SWI_XFILE	struct
*	O
xfile	pointer
;	O
char	O
*	O
tmp_s	pointer
;	O
if	O
(	O
buf6	pointer
==	O
(	O
STROB	struct
*	O
)	O
NULL	O
)	O
buf6	pointer
=	O
strob_open	function
(	O
100	int
)	O
;	O
buf	pointer
=	O
buf6	pointer
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
0	int
,	O
"%s%p (SWI_PRODUCT*)\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->p_baseM  = [%p]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
(	O
void	O
*	O
)	O
(	O
&	O
(	O
xx	pointer
->	O
p_baseM	struct
)	O
)	O
)	O
;	O
strob_sprintf	function
(	O
tmp	pointer
,	O
0	int
,	O
"%s%p->baseM:"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
(	O
&	O
(	O
xx	pointer
->	O
p_baseM	struct
)	O
)	O
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s"	pointer
,	O
swi_base_dump_string_s	function
(	O
&	O
(	O
xx	pointer
->	O
p_baseM	struct
)	O
,	O
strob_str	function
(	O
tmp	pointer
)	O
)	O
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->package_pathM   = [%s]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
package_pathM	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->control_dirM    = [%s]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
control_dirM	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->xfileM         = [%p]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
(	O
void	O
*	O
)	O
(	O
xx	pointer
->	O
xfileM	pointer
)	O
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->xfileM         = [%p] (BEGIN PFILES)\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
(	O
void	O
*	O
)	O
(	O
xx	pointer
->	O
xfileM	pointer
)	O
)	O
;	O
tmp_s	pointer
=	O
swi_xfile_dump_string_s	function
(	O
xx	pointer
->	O
xfileM	pointer
,	O
prefix	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s"	pointer
,	O
tmp_s	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->xfileM         = [%p] (END PFILES)\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
(	O
void	O
*	O
)	O
(	O
xx	pointer
->	O
xfileM	pointer
)	O
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->filesetsM  = [%p]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
(	O
void	O
*	O
)	O
(	O
xx	pointer
->	O
filesetsM	pointer
)	O
)	O
;	O
if	O
(	O
xx	pointer
->	O
filesetsM	pointer
)	O
{	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s"	pointer
,	O
strar_dump_string_s	function
(	O
xx	pointer
->	O
filesetsM	pointer
,	O
prefix	pointer
)	O
)	O
;	O
}	O
i	int
=	O
0	int
;	O
while	O
(	O
i	int
<	O
SWI_MAX_OBJ	int
)	O
{	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->swi_coM[%d]      = [%p]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
i	int
,	O
(	O
void	O
*	O
)	O
(	O
xx	pointer
->	O
swi_coM	array
[	O
i	int
]	O
)	O
)	O
;	O
i	int
++	O
;	O
}	O
i	int
=	O
0	int
;	O
while	O
(	O
i	int
<	O
SWI_MAX_OBJ	int
&&	O
(	O
xfile	pointer
=	O
xx	pointer
->	O
swi_coM	array
[	O
i	int
]	O
)	O
)	O
{	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->swi_coM[%d] = %p (BEGIN FILESET[%d])\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
i	int
,	O
(	O
void	O
*	O
)	O
(	O
xx	pointer
->	O
swi_coM	array
[	O
i	int
]	O
)	O
,	O
i	int
)	O
;	O
tmp_s	pointer
=	O
swi_xfile_dump_string_s	function
(	O
xfile	pointer
,	O
prefix	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s"	pointer
,	O
tmp_s	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->swi_coM[%d] = %p (END FILESET[%d])\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
i	int
,	O
(	O
void	O
*	O
)	O
(	O
xx	pointer
->	O
swi_coM	array
[	O
i	int
]	O
)	O
,	O
i	int
)	O
;	O
i	int
++	O
;	O
}	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
return	O
strob_str	function
(	O
buf	pointer
)	O
;	O
}	O
char	O
*	O
swi_package_dump_string_s	function
(	O
SWI_PACKAGE	struct
*	O
xx	pointer
,	O
char	O
*	O
prefix	pointer
)	O
{	O
STROB	struct
*	O
buf	pointer
;	O
STROB	struct
*	O
tmp	pointer
=	O
strob_open	function
(	O
1	int
)	O
;	O
SWI_PRODUCT	struct
*	O
prod	pointer
;	O
int	O
i	int
;	O
STROB	struct
*	O
tmpprefix	pointer
=	O
strob_open	function
(	O
10	int
)	O
;	O
char	O
*	O
tmps	pointer
;	O
if	O
(	O
buf8	pointer
==	O
(	O
STROB	struct
*	O
)	O
NULL	O
)	O
buf8	pointer
=	O
strob_open	function
(	O
100	int
)	O
;	O
buf	pointer
=	O
buf8	pointer
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
0	int
,	O
"%s%p (SWI_PACKAGE*)\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->baseM  = [%p]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
(	O
void	O
*	O
)	O
(	O
&	O
(	O
xx	pointer
->	O
baseM	struct
)	O
)	O
)	O
;	O
strob_sprintf	function
(	O
tmp	pointer
,	O
0	int
,	O
"%s%p->baseM:"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
(	O
&	O
(	O
xx	pointer
->	O
baseM	struct
)	O
)	O
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s"	pointer
,	O
swi_base_dump_string_s	function
(	O
&	O
(	O
xx	pointer
->	O
baseM	struct
)	O
,	O
strob_str	function
(	O
tmp	pointer
)	O
)	O
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->swi_scM         = [%p]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
swi_scM	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->exlistM             = [%p]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
exlistM	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->dfilesM             = [%p]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
dfilesM	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->current_xfileM      = [%p]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
current_xfileM	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->prev_swpath_exM     = [%p]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
prev_swpath_exM	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->dfiles_attributeM   = [%s]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
dfiles_attributeM	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->pfiles_attributeM   = [%s]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
pfiles_attributeM	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->dfilesM             = [%p] (BEGIN DFILES)\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
dfilesM	pointer
)	O
;	O
tmps	pointer
=	O
swi_xfile_dump_string_s	function
(	O
xx	pointer
->	O
dfilesM	pointer
,	O
prefix	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s"	pointer
,	O
tmps	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->dfilesM             = [%p] (END DFILES)\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
dfilesM	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->catalog_start_offsetM = [%d]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
catalog_start_offsetM	int
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->catalog_end_offsetM = [%d]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
catalog_end_offsetM	int
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->catalog_lengthM = [%d]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
catalog_lengthM	int
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->target_pathM = [%s]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
target_pathM	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->target_hostM = [%s]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
target_hostM	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->catalog_entryM = [%s]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
catalog_entryM	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->installed_software_catalogM = [%s]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
installed_software_catalogM	pointer
)	O
;	O
strob_sprintf	function
(	O
tmpprefix	pointer
,	O
0	int
,	O
"%s"	pointer
,	O
prefix	pointer
)	O
;	O
tmps	pointer
=	O
swi_script_list_dump_string_s	function
(	O
xx	pointer
->	O
swi_scM	pointer
,	O
strob_str	function
(	O
tmpprefix	pointer
)	O
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s"	pointer
,	O
tmps	pointer
)	O
;	O
i	int
=	O
0	int
;	O
while	O
(	O
i	int
<	O
SWI_MAX_OBJ	int
&&	O
(	O
prod	pointer
=	O
xx	pointer
->	O
swi_coM	array
[	O
i	int
]	O
)	O
)	O
{	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->swi_coM[%d] = %p (BEGIN PRODUCT[%d])\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
i	int
,	O
(	O
void	O
*	O
)	O
(	O
xx	pointer
->	O
swi_coM	array
[	O
i	int
]	O
)	O
,	O
i	int
)	O
;	O
tmps	pointer
=	O
swi_product_dump_string_s	function
(	O
prod	pointer
,	O
prefix	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s"	pointer
,	O
tmps	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->swi_coM[%d] = %p (END PRODUCT[%d])\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
i	int
,	O
(	O
void	O
*	O
)	O
(	O
xx	pointer
->	O
swi_coM	array
[	O
i	int
]	O
)	O
,	O
i	int
)	O
;	O
i	int
++	O
;	O
}	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
strob_close	function
(	O
tmpprefix	pointer
)	O
;	O
return	O
strob_str	function
(	O
buf	pointer
)	O
;	O
}	O
char	O
*	O
swi_dump_string_s	function
(	O
SWI	struct
*	O
xx	pointer
,	O
char	O
*	O
prefix	pointer
)	O
{	O
STROB	struct
*	O
buf	pointer
;	O
char	O
*	O
tmp_s	pointer
;	O
if	O
(	O
buf9	pointer
==	O
(	O
STROB	struct
*	O
)	O
NULL	O
)	O
buf9	pointer
=	O
strob_open	function
(	O
100	int
)	O
;	O
buf	pointer
=	O
buf9	pointer
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
0	int
,	O
"%s%p (SWI*)\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
)	O
;	O
tmp_s	pointer
=	O
swi_package_dump_string_s	function
(	O
xx	pointer
->	O
swi_pkgM	pointer
,	O
prefix	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
0	int
,	O
"%s"	pointer
,	O
tmp_s	pointer
)	O
;	O
return	O
strob_str	function
(	O
buf	pointer
)	O
;	O
}	O