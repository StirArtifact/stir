static	O
int	O
_imap_mbx_scan	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
size_t	long
msgno	long
,	O
size_t	long
*	O
pcount	pointer
)	O
;	O
static	O
int	O
_imap_mbx_is_updated	function
(	O
mu_mailbox_t	pointer
mbox	pointer
)	O
;	O
static	O
inline	O
size_t	long
_imap_msg_no	function
(	O
struct	O
_mu_imap_message	struct
*	O
imsg	pointer
)	O
{	O
return	O
imsg	pointer
->	O
msgno	long
;	O
}	O
static	O
int	O
_imap_fetch_with_callback	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
mu_msgset_t	pointer
msgset	pointer
,	O
char	O
*	O
items	pointer
,	O
mu_imap_callback_t	pointer
cb	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
int	O
rc	int
;	O
mu_imap_register_callback_function	function
(	O
imap	pointer
,	O
MU_IMAP_CB_FETCH	int
,	O
cb	pointer
,	O
data	pointer
)	O
;	O
rc	int
=	O
mu_imap_fetch	function
(	O
imap	pointer
,	O
0	int
,	O
msgset	pointer
,	O
items	pointer
)	O
;	O
mu_imap_register_callback_function	function
(	O
imap	pointer
,	O
MU_IMAP_CB_FETCH	int
,	O
NULL	O
,	O
NULL	O
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
void	O
_imap_msg_free	function
(	O
struct	O
_mu_imap_message	struct
*	O
msg	pointer
)	O
{	O
mu_message_imapenvelope_free	function
(	O
msg	pointer
->	O
env	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
msg	pointer
->	O
header_stream	pointer
)	O
;	O
mu_message_destroy	function
(	O
&	O
msg	pointer
->	O
message	pointer
,	O
msg	pointer
)	O
;	O
free	function
(	O
msg	pointer
)	O
;	O
}	O
struct	O
save_closure	struct
{	O
mu_stream_t	pointer
save_stream	pointer
;	O
size_t	long
size	long
;	O
struct	O
_mu_imap_message	struct
*	O
imsg	pointer
;	O
}	O
;	O
static	O
int	O
_save_message_parser	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
union	O
mu_imap_fetch_response	union
*	O
resp	pointer
=	O
item	pointer
;	O
struct	O
save_closure	struct
*	O
clos	pointer
=	O
data	pointer
;	O
if	O
(	O
resp	pointer
->	O
type	int
==	O
MU_IMAP_FETCH_BODY	int
)	O
{	O
struct	O
_mu_imap_message	struct
*	O
imsg	pointer
=	O
clos	pointer
->	O
imsg	pointer
;	O
struct	O
_mu_imap_mailbox	struct
*	O
imbx	pointer
=	O
imsg	pointer
->	O
imbx	pointer
;	O
int	O
rc	int
;	O
mu_stream_t	pointer
istr	pointer
,	O
flt	pointer
;	O
mu_off_t	long
size	long
;	O
rc	int
=	O
mu_static_memory_stream_create	function
(	O
&	O
istr	pointer
,	O
resp	pointer
->	O
body	pointer
.	O
text	struct
,	O
strlen	function
(	O
resp	pointer
->	O
body	pointer
.	O
text	struct
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"mu_static_memory_stream_create: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
imbx	pointer
->	O
last_error	int
=	O
rc	int
;	O
return	O
0	int
;	O
}	O
rc	int
=	O
mu_filter_create	function
(	O
&	O
flt	pointer
,	O
istr	pointer
,	O
"CRLF"	pointer
,	O
MU_FILTER_DECODE	int
,	O
MU_STREAM_READ	int
)	O
;	O
mu_stream_unref	function
(	O
istr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"mu_filter_create: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
imbx	pointer
->	O
last_error	int
=	O
rc	int
;	O
return	O
0	int
;	O
}	O
rc	int
=	O
mu_stream_copy	function
(	O
clos	pointer
->	O
save_stream	pointer
,	O
flt	pointer
,	O
0	int
,	O
&	O
size	long
)	O
;	O
mu_stream_destroy	function
(	O
&	O
flt	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"copying to cache failed: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
imbx	pointer
->	O
last_error	int
=	O
rc	int
;	O
return	O
0	int
;	O
}	O
clos	pointer
->	O
size	long
=	O
size	long
;	O
}	O
else	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE0	int
,	O
(	O
_	O
(	O
"fetch returned a not requested item %d"	pointer
)	O
,	O
resp	pointer
->	O
type	int
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
_save_message_callback	function
(	O
void	O
*	O
data	pointer
,	O
int	O
code	int
,	O
size_t	long
sdat	long
,	O
void	O
*	O
pdat	pointer
)	O
{	O
mu_list_t	pointer
list	pointer
=	O
pdat	pointer
;	O
mu_list_foreach	function
(	O
list	pointer
,	O
_save_message_parser	function
,	O
data	pointer
)	O
;	O
}	O
static	O
int	O
__imap_msg_get_stream	function
(	O
struct	O
_mu_imap_message	struct
*	O
imsg	pointer
,	O
size_t	long
msgno	long
,	O
mu_stream_t	pointer
*	O
pstr	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
_mu_imap_mailbox	struct
*	O
imbx	pointer
=	O
imsg	pointer
->	O
imbx	pointer
;	O
mu_folder_t	pointer
folder	pointer
=	O
imbx	pointer
->	O
mbox	pointer
->	O
folder	pointer
;	O
mu_imap_t	pointer
imap	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
if	O
(	O
!	O
(	O
imsg	pointer
->	O
flags	int
&	O
_MU_IMAP_MSG_CACHED	int
)	O
)	O
{	O
mu_msgset_t	pointer
msgset	pointer
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
_	O
(	O
"caching message %lu"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
msgno	long
)	O
)	O
;	O
if	O
(	O
!	O
imbx	pointer
->	O
cache	pointer
)	O
{	O
rc	int
=	O
mu_temp_file_stream_create	function
(	O
&	O
imbx	pointer
->	O
cache	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_stream_set_buffer	function
(	O
imbx	pointer
->	O
cache	pointer
,	O
mu_buffer_full	int
,	O
8192	int
)	O
;	O
}	O
rc	int
=	O
mu_stream_size	function
(	O
imbx	pointer
->	O
cache	pointer
,	O
&	O
imsg	pointer
->	O
offset	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_msgset_create	function
(	O
&	O
msgset	pointer
,	O
NULL	O
,	O
MU_MSGSET_NUM	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
struct	O
save_closure	struct
clos	pointer
;	O
clos	pointer
.	O
imsg	pointer
=	O
imsg	pointer
;	O
clos	pointer
.	O
save_stream	pointer
=	O
imbx	pointer
->	O
cache	pointer
;	O
clos	pointer
.	O
size	long
=	O
0	int
;	O
rc	int
=	O
mu_msgset_add_range	function
(	O
msgset	pointer
,	O
msgno	long
,	O
msgno	long
,	O
MU_MSGSET_NUM	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
_imap_mbx_clrerr	O
(	O
imbx	pointer
)	O
;	O
rc	int
=	O
_imap_fetch_with_callback	function
(	O
imap	pointer
,	O
msgset	pointer
,	O
"BODY[]"	pointer
,	O
_save_message_callback	function
,	O
&	O
clos	pointer
)	O
;	O
}	O
mu_msgset_free	function
(	O
msgset	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
&&	O
!	O
_imap_mbx_errno	O
(	O
imbx	pointer
)	O
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
_	O
(	O
"cached message %lu: offset=%lu, size=%lu"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
msgno	long
,	O
(	O
unsigned	O
long	O
)	O
imsg	pointer
->	O
offset	long
,	O
(	O
unsigned	O
long	O
)	O
clos	pointer
.	O
size	long
)	O
)	O
;	O
imsg	pointer
->	O
message_size	long
=	O
clos	pointer
.	O
size	long
;	O
}	O
}	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
imsg	pointer
->	O
flags	int
|=	O
_MU_IMAP_MSG_CACHED	int
;	O
}	O
return	O
mu_streamref_create_abridged	function
(	O
pstr	pointer
,	O
imbx	pointer
->	O
cache	pointer
,	O
imsg	pointer
->	O
offset	long
,	O
imsg	pointer
->	O
offset	long
+	O
imsg	pointer
->	O
message_size	long
-	O
1	int
)	O
;	O
}	O
static	O
int	O
_imap_msg_scan	function
(	O
struct	O
_mu_imap_message	struct
*	O
imsg	pointer
)	O
{	O
int	O
rc	int
;	O
mu_stream_t	pointer
stream	pointer
;	O
struct	O
mu_message_scan	struct
scan	struct
;	O
size_t	long
msgno	long
=	O
_imap_msg_no	function
(	O
imsg	pointer
)	O
;	O
if	O
(	O
imsg	pointer
->	O
flags	int
&	O
_MU_IMAP_MSG_SCANNED	int
)	O
return	O
0	int
;	O
rc	int
=	O
__imap_msg_get_stream	function
(	O
imsg	pointer
,	O
msgno	long
,	O
&	O
stream	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
scan	struct
.	O
flags	int
=	O
MU_SCAN_SEEK	int
|	O
MU_SCAN_SIZE	int
;	O
scan	struct
.	O
message_start	long
=	O
0	int
;	O
scan	struct
.	O
message_size	long
=	O
imsg	pointer
->	O
message_size	long
;	O
rc	int
=	O
mu_stream_scan_message	function
(	O
stream	pointer
,	O
&	O
scan	struct
)	O
;	O
mu_stream_unref	function
(	O
stream	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
imsg	pointer
->	O
body_start	long
=	O
scan	struct
.	O
body_start	long
;	O
imsg	pointer
->	O
body_end	long
=	O
scan	struct
.	O
body_end	long
;	O
imsg	pointer
->	O
header_lines	long
=	O
scan	struct
.	O
header_lines	long
;	O
imsg	pointer
->	O
body_lines	long
=	O
scan	struct
.	O
body_lines	long
;	O
imsg	pointer
->	O
message_lines	long
=	O
imsg	pointer
->	O
header_lines	long
+	O
1	int
+	O
imsg	pointer
->	O
body_lines	long
;	O
imsg	pointer
->	O
flags	int
|=	O
_MU_IMAP_MSG_SCANNED	int
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
_imap_env_date	function
(	O
mu_envelope_t	pointer
env	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
len	long
,	O
size_t	long
*	O
pnwrite	pointer
)	O
{	O
struct	O
_mu_imap_message	struct
*	O
imsg	pointer
=	O
mu_envelope_get_owner	function
(	O
env	pointer
)	O
;	O
mu_stream_t	pointer
str	pointer
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
buf	pointer
)	O
rc	int
=	O
mu_nullstream_create	function
(	O
&	O
str	pointer
,	O
MU_STREAM_WRITE	int
)	O
;	O
else	O
rc	int
=	O
mu_fixed_memory_stream_create	function
(	O
&	O
str	pointer
,	O
buf	pointer
,	O
len	long
,	O
MU_STREAM_WRITE	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_stream_stat_buffer	array
statbuf	array
;	O
mu_stream_set_stat	function
(	O
str	pointer
,	O
MU_STREAM_STAT_MASK	O
(	O
MU_STREAM_STAT_OUT	int
)	O
,	O
statbuf	array
)	O
;	O
rc	int
=	O
mu_c_streamftime	function
(	O
str	pointer
,	O
MU_DATETIME_FROM	pointer
,	O
&	O
imsg	pointer
->	O
env	pointer
->	O
date	struct
,	O
&	O
imsg	pointer
->	O
env	pointer
->	O
tz	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
rc	int
=	O
mu_stream_write	function
(	O
str	pointer
,	O
""	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
mu_stream_destroy	function
(	O
&	O
str	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
&&	O
pnwrite	pointer
)	O
*	O
pnwrite	pointer
=	O
statbuf	array
[	O
MU_STREAM_STAT_OUT	int
]	O
-	O
1	int
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
_imap_env_sender	function
(	O
mu_envelope_t	pointer
env	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
len	long
,	O
size_t	long
*	O
pnwrite	pointer
)	O
{	O
struct	O
_mu_imap_message	struct
*	O
imsg	pointer
=	O
mu_envelope_get_owner	function
(	O
env	pointer
)	O
;	O
mu_address_t	pointer
addr	pointer
=	O
imsg	pointer
->	O
env	pointer
->	O
sender	pointer
?	O
imsg	pointer
->	O
env	pointer
->	O
sender	pointer
:	O
imsg	pointer
->	O
env	pointer
->	O
from	pointer
;	O
if	O
(	O
!	O
addr	pointer
)	O
return	O
MU_ERR_NOENT	O
;	O
return	O
mu_address_get_email	function
(	O
addr	pointer
,	O
1	int
,	O
buf	pointer
,	O
len	long
,	O
pnwrite	pointer
)	O
;	O
}	O
static	O
int	O
_imap_msg_env_setup	function
(	O
struct	O
_mu_imap_message	struct
*	O
imsg	pointer
,	O
mu_message_t	pointer
message	pointer
)	O
{	O
mu_envelope_t	pointer
env	pointer
;	O
int	O
rc	int
=	O
mu_envelope_create	function
(	O
&	O
env	pointer
,	O
imsg	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_envelope_set_sender	function
(	O
env	pointer
,	O
_imap_env_sender	function
,	O
imsg	pointer
)	O
;	O
mu_envelope_set_date	function
(	O
env	pointer
,	O
_imap_env_date	function
,	O
imsg	pointer
)	O
;	O
rc	int
=	O
mu_message_set_envelope	function
(	O
message	pointer
,	O
env	pointer
,	O
imsg	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
_imap_attr_get_flags	function
(	O
mu_attribute_t	pointer
attr	pointer
,	O
int	O
*	O
pflags	pointer
)	O
{	O
struct	O
_mu_imap_message	struct
*	O
imsg	pointer
=	O
mu_attribute_get_owner	function
(	O
attr	pointer
)	O
;	O
if	O
(	O
!	O
imsg	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pflags	pointer
)	O
*	O
pflags	pointer
=	O
imsg	pointer
->	O
attr_flags	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_imap_attr_set_flags	function
(	O
mu_attribute_t	pointer
attr	pointer
,	O
int	O
flags	int
)	O
{	O
struct	O
_mu_imap_message	struct
*	O
imsg	pointer
=	O
mu_attribute_get_owner	function
(	O
attr	pointer
)	O
;	O
if	O
(	O
!	O
imsg	pointer
)	O
return	O
EINVAL	int
;	O
imsg	pointer
->	O
attr_flags	int
|=	O
flags	int
;	O
imsg	pointer
->	O
flags	int
|=	O
_MU_IMAP_MSG_ATTRCHG	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_imap_attr_clr_flags	function
(	O
mu_attribute_t	pointer
attr	pointer
,	O
int	O
flags	int
)	O
{	O
struct	O
_mu_imap_message	struct
*	O
imsg	pointer
=	O
mu_attribute_get_owner	function
(	O
attr	pointer
)	O
;	O
if	O
(	O
!	O
imsg	pointer
)	O
return	O
EINVAL	int
;	O
imsg	pointer
->	O
attr_flags	int
&=	O
~	O
flags	int
;	O
imsg	pointer
->	O
flags	int
|=	O
_MU_IMAP_MSG_ATTRCHG	int
;	O
return	O
0	int
;	O
}	O
int	O
_imap_msg_attr_setup	function
(	O
struct	O
_mu_imap_message	struct
*	O
imsg	pointer
,	O
mu_message_t	pointer
message	pointer
)	O
{	O
mu_attribute_t	pointer
attribute	pointer
;	O
int	O
rc	int
=	O
mu_attribute_create	function
(	O
&	O
attribute	pointer
,	O
imsg	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_attribute_set_get_flags	function
(	O
attribute	pointer
,	O
_imap_attr_get_flags	function
,	O
imsg	pointer
)	O
;	O
mu_attribute_set_set_flags	function
(	O
attribute	pointer
,	O
_imap_attr_set_flags	function
,	O
imsg	pointer
)	O
;	O
mu_attribute_set_unset_flags	function
(	O
attribute	pointer
,	O
_imap_attr_clr_flags	function
,	O
imsg	pointer
)	O
;	O
rc	int
=	O
mu_message_set_attribute	function
(	O
message	pointer
,	O
attribute	pointer
,	O
imsg	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
_imap_hdr_fill	function
(	O
void	O
*	O
data	pointer
,	O
char	O
*	O
*	O
pbuf	pointer
,	O
size_t	long
*	O
plen	pointer
)	O
{	O
struct	O
_mu_imap_message	struct
*	O
imsg	pointer
=	O
data	pointer
;	O
mu_stream_t	pointer
str	pointer
=	O
imsg	pointer
->	O
header_stream	pointer
;	O
char	O
*	O
buf	pointer
;	O
mu_off_t	long
size	long
;	O
int	O
rc	int
=	O
0	int
;	O
mu_stream_size	function
(	O
str	pointer
,	O
&	O
size	long
)	O
;	O
buf	pointer
=	O
malloc	function
(	O
size	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
buf	pointer
)	O
rc	int
=	O
ENOMEM	int
;	O
else	O
{	O
mu_stream_seek	function
(	O
str	pointer
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
rc	int
=	O
mu_stream_read	function
(	O
str	pointer
,	O
buf	pointer
,	O
size	long
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
*	O
pbuf	pointer
=	O
buf	pointer
;	O
*	O
plen	pointer
=	O
size	long
;	O
}	O
else	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"mu_stream_read: %s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
free	function
(	O
buf	pointer
)	O
;	O
}	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
_imap_msg_header_setup	function
(	O
struct	O
_mu_imap_message	struct
*	O
imsg	pointer
,	O
mu_message_t	pointer
message	pointer
)	O
{	O
int	O
rc	int
;	O
mu_header_t	pointer
header	pointer
=	O
NULL	O
;	O
rc	int
=	O
mu_header_create	function
(	O
&	O
header	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_header_set_fill	function
(	O
header	pointer
,	O
_imap_hdr_fill	function
,	O
imsg	pointer
)	O
;	O
return	O
mu_message_set_header	function
(	O
message	pointer
,	O
header	pointer
,	O
imsg	pointer
)	O
;	O
}	O
static	O
int	O
_imap_body_get_stream	function
(	O
mu_body_t	pointer
body	pointer
,	O
mu_stream_t	pointer
*	O
pstr	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
=	O
mu_body_get_owner	function
(	O
body	pointer
)	O
;	O
struct	O
_mu_imap_message	struct
*	O
imsg	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
struct	O
_mu_imap_mailbox	struct
*	O
imbx	pointer
=	O
imsg	pointer
->	O
imbx	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
_imap_msg_scan	function
(	O
imsg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
return	O
mu_streamref_create_abridged	function
(	O
pstr	pointer
,	O
imbx	pointer
->	O
cache	pointer
,	O
imsg	pointer
->	O
offset	long
+	O
imsg	pointer
->	O
body_start	long
,	O
imsg	pointer
->	O
offset	long
+	O
imsg	pointer
->	O
body_end	long
-	O
1	int
)	O
;	O
}	O
static	O
int	O
_imap_body_size	function
(	O
mu_body_t	pointer
body	pointer
,	O
size_t	long
*	O
psize	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
=	O
mu_body_get_owner	function
(	O
body	pointer
)	O
;	O
struct	O
_mu_imap_message	struct
*	O
imsg	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
int	O
rc	int
;	O
rc	int
=	O
_imap_msg_scan	function
(	O
imsg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
*	O
psize	pointer
=	O
imsg	pointer
->	O
body_end	long
-	O
imsg	pointer
->	O
body_start	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_imap_body_lines	function
(	O
mu_body_t	pointer
body	pointer
,	O
size_t	long
*	O
psize	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
=	O
mu_body_get_owner	function
(	O
body	pointer
)	O
;	O
struct	O
_mu_imap_message	struct
*	O
imsg	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
int	O
rc	int
;	O
rc	int
=	O
_imap_msg_scan	function
(	O
imsg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
*	O
psize	pointer
=	O
imsg	pointer
->	O
body_lines	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_imap_mbx_body_setup	function
(	O
struct	O
_mu_imap_message	struct
*	O
imsg	pointer
,	O
mu_message_t	pointer
message	pointer
)	O
{	O
int	O
rc	int
;	O
mu_body_t	pointer
body	pointer
;	O
rc	int
=	O
mu_body_create	function
(	O
&	O
body	pointer
,	O
message	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_body_set_get_stream	function
(	O
body	pointer
,	O
_imap_body_get_stream	function
,	O
message	pointer
)	O
;	O
mu_body_set_size	function
(	O
body	pointer
,	O
_imap_body_size	function
,	O
message	pointer
)	O
;	O
mu_body_set_lines	function
(	O
body	pointer
,	O
_imap_body_lines	function
,	O
message	pointer
)	O
;	O
return	O
mu_message_set_body	function
(	O
message	pointer
,	O
body	pointer
,	O
imsg	pointer
)	O
;	O
}	O
static	O
int	O
_imap_msg_get_stream	function
(	O
mu_message_t	pointer
msg	pointer
,	O
mu_stream_t	pointer
*	O
pstr	pointer
)	O
{	O
struct	O
_mu_imap_message	struct
*	O
imsg	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
return	O
__imap_msg_get_stream	function
(	O
imsg	pointer
,	O
_imap_msg_no	function
(	O
imsg	pointer
)	O
,	O
pstr	pointer
)	O
;	O
}	O
static	O
int	O
_imap_msg_size	function
(	O
mu_message_t	pointer
msg	pointer
,	O
size_t	long
*	O
psize	pointer
)	O
{	O
struct	O
_mu_imap_message	struct
*	O
imsg	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
*	O
psize	pointer
=	O
imsg	pointer
->	O
message_size	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_imap_msg_lines	function
(	O
mu_message_t	pointer
msg	pointer
,	O
size_t	long
*	O
plines	pointer
,	O
int	O
quick	int
)	O
{	O
struct	O
_mu_imap_message	struct
*	O
imsg	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
struct	O
_mu_imap_mailbox	struct
*	O
imbx	pointer
=	O
imsg	pointer
->	O
imbx	pointer
;	O
mu_mailbox_t	pointer
mbox	pointer
=	O
imbx	pointer
->	O
mbox	pointer
;	O
if	O
(	O
!	O
(	O
imsg	pointer
->	O
flags	int
&	O
_MU_IMAP_MSG_LINES	int
)	O
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
quick	int
&&	O
!	O
(	O
imsg	pointer
->	O
flags	int
&	O
_MU_IMAP_MSG_CACHED	int
)	O
)	O
return	O
MU_ERR_INFO_UNAVAILABLE	O
;	O
if	O
(	O
!	O
_imap_mbx_uptodate	O
(	O
imbx	pointer
)	O
)	O
_imap_mbx_scan	function
(	O
mbox	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
rc	int
=	O
_imap_msg_scan	function
(	O
imsg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
*	O
plines	pointer
=	O
imsg	pointer
->	O
message_lines	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_copy_imapenvelope	function
(	O
struct	O
mu_imapenvelope	struct
*	O
env	pointer
,	O
struct	O
mu_imapenvelope	struct
const	O
*	O
src	pointer
)	O
{	O
env	pointer
->	O
date	struct
=	O
src	pointer
->	O
date	struct
;	O
env	pointer
->	O
tz	pointer
=	O
src	pointer
->	O
tz	pointer
;	O
if	O
(	O
src	pointer
->	O
subject	pointer
&&	O
(	O
env	pointer
->	O
subject	pointer
=	O
strdup	function
(	O
src	pointer
->	O
subject	pointer
)	O
)	O
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
src	pointer
->	O
from	pointer
&&	O
(	O
env	pointer
->	O
from	pointer
=	O
mu_address_dup	function
(	O
src	pointer
->	O
from	pointer
)	O
)	O
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
src	pointer
->	O
sender	pointer
&&	O
(	O
env	pointer
->	O
sender	pointer
=	O
mu_address_dup	function
(	O
src	pointer
->	O
sender	pointer
)	O
)	O
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
src	pointer
->	O
reply_to	pointer
&&	O
(	O
env	pointer
->	O
reply_to	pointer
=	O
mu_address_dup	function
(	O
src	pointer
->	O
reply_to	pointer
)	O
)	O
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
src	pointer
->	O
to	pointer
&&	O
(	O
env	pointer
->	O
to	pointer
=	O
mu_address_dup	function
(	O
src	pointer
->	O
to	pointer
)	O
)	O
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
src	pointer
->	O
cc	pointer
&&	O
(	O
env	pointer
->	O
cc	pointer
=	O
mu_address_dup	function
(	O
src	pointer
->	O
cc	pointer
)	O
)	O
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
src	pointer
->	O
bcc	pointer
&&	O
(	O
env	pointer
->	O
bcc	pointer
=	O
mu_address_dup	function
(	O
src	pointer
->	O
bcc	pointer
)	O
)	O
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
src	pointer
->	O
in_reply_to	pointer
&&	O
(	O
env	pointer
->	O
in_reply_to	pointer
=	O
strdup	function
(	O
src	pointer
->	O
in_reply_to	pointer
)	O
)	O
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
src	pointer
->	O
message_id	pointer
&&	O
(	O
env	pointer
->	O
message_id	pointer
=	O
strdup	function
(	O
src	pointer
->	O
message_id	pointer
)	O
)	O
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_imap_msg_imapenvelope	function
(	O
mu_message_t	pointer
msg	pointer
,	O
struct	O
mu_imapenvelope	struct
*	O
*	O
penv	pointer
)	O
{	O
struct	O
_mu_imap_message	struct
*	O
imsg	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
int	O
rc	int
=	O
0	int
;	O
struct	O
mu_imapenvelope	struct
*	O
env	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
env	pointer
)	O
)	O
;	O
if	O
(	O
!	O
env	pointer
)	O
return	O
ENOMEM	int
;	O
rc	int
=	O
_copy_imapenvelope	function
(	O
env	pointer
,	O
imsg	pointer
->	O
env	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_message_imapenvelope_free	function
(	O
env	pointer
)	O
;	O
else	O
*	O
penv	pointer
=	O
env	pointer
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
fetch_bodystructure_parser	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
union	O
mu_imap_fetch_response	union
*	O
resp	pointer
=	O
item	pointer
;	O
struct	O
mu_bodystructure	struct
*	O
*	O
pbs	pointer
=	O
data	pointer
;	O
if	O
(	O
resp	pointer
->	O
type	int
==	O
MU_IMAP_FETCH_BODYSTRUCTURE	int
)	O
{	O
*	O
pbs	pointer
=	O
resp	pointer
->	O
bodystructure	struct
.	O
bs	pointer
;	O
resp	pointer
->	O
bodystructure	struct
.	O
bs	pointer
=	O
NULL	O
;	O
}	O
else	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE0	int
,	O
(	O
_	O
(	O
"fetch returned a not requested item %d"	pointer
)	O
,	O
resp	pointer
->	O
type	int
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
_imap_bodystructure_callback	function
(	O
void	O
*	O
data	pointer
,	O
int	O
code	int
,	O
size_t	long
sdat	long
,	O
void	O
*	O
pdat	pointer
)	O
{	O
mu_list_t	pointer
list	pointer
=	O
pdat	pointer
;	O
mu_list_foreach	function
(	O
list	pointer
,	O
fetch_bodystructure_parser	function
,	O
data	pointer
)	O
;	O
}	O
static	O
int	O
_imap_msg_bodystructure	function
(	O
mu_message_t	pointer
msg	pointer
,	O
struct	O
mu_bodystructure	struct
*	O
*	O
pbs	pointer
)	O
{	O
struct	O
_mu_imap_message	struct
*	O
imsg	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
struct	O
_mu_imap_mailbox	struct
*	O
imbx	pointer
=	O
imsg	pointer
->	O
imbx	pointer
;	O
mu_imap_t	pointer
imap	pointer
=	O
imbx	pointer
->	O
mbox	pointer
->	O
folder	pointer
->	O
data	pointer
;	O
int	O
rc	int
;	O
mu_msgset_t	pointer
msgset	pointer
;	O
rc	int
=	O
mu_msgset_create	function
(	O
&	O
msgset	pointer
,	O
NULL	O
,	O
MU_MSGSET_NUM	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
size_t	long
msgno	long
=	O
_imap_msg_no	function
(	O
imsg	pointer
)	O
;	O
rc	int
=	O
mu_msgset_add_range	function
(	O
msgset	pointer
,	O
msgno	long
,	O
msgno	long
,	O
MU_MSGSET_NUM	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
rc	int
=	O
_imap_fetch_with_callback	function
(	O
imap	pointer
,	O
msgset	pointer
,	O
"BODYSTRUCTURE"	pointer
,	O
_imap_bodystructure_callback	function
,	O
pbs	pointer
)	O
;	O
mu_msgset_free	function
(	O
msgset	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
_imap_mbx_get_message	function
(	O
mu_mailbox_t	pointer
mailbox	pointer
,	O
size_t	long
msgno	long
,	O
mu_message_t	pointer
*	O
pmsg	pointer
)	O
{	O
struct	O
_mu_imap_mailbox	struct
*	O
imbx	pointer
=	O
mailbox	pointer
->	O
data	pointer
;	O
struct	O
_mu_imap_message	struct
*	O
imsg	pointer
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
_imap_mbx_uptodate	O
(	O
imbx	pointer
)	O
)	O
_imap_mbx_scan	function
(	O
mailbox	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
msgno	long
>	O
imbx	pointer
->	O
msgs_cnt	long
)	O
return	O
MU_ERR_NOENT	O
;	O
imsg	pointer
=	O
imbx	pointer
->	O
msgs	pointer
[	O
msgno	long
-	O
1	int
]	O
;	O
if	O
(	O
!	O
imsg	pointer
->	O
message	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
;	O
rc	int
=	O
mu_message_create	function
(	O
&	O
msg	pointer
,	O
imsg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_message_set_get_stream	function
(	O
msg	pointer
,	O
_imap_msg_get_stream	function
,	O
imsg	pointer
)	O
;	O
mu_message_set_size	function
(	O
msg	pointer
,	O
_imap_msg_size	function
,	O
imsg	pointer
)	O
;	O
mu_message_set_lines	function
(	O
msg	pointer
,	O
_imap_msg_lines	function
,	O
imsg	pointer
)	O
;	O
mu_message_set_imapenvelope	function
(	O
msg	pointer
,	O
_imap_msg_imapenvelope	function
,	O
imsg	pointer
)	O
;	O
mu_message_set_bodystructure	function
(	O
msg	pointer
,	O
_imap_msg_bodystructure	function
,	O
imsg	pointer
)	O
;	O
do	O
{	O
rc	int
=	O
_imap_msg_env_setup	function
(	O
imsg	pointer
,	O
msg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
rc	int
=	O
_imap_msg_attr_setup	function
(	O
imsg	pointer
,	O
msg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
rc	int
=	O
_imap_msg_header_setup	function
(	O
imsg	pointer
,	O
msg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
rc	int
=	O
_imap_mbx_body_setup	function
(	O
imsg	pointer
,	O
msg	pointer
)	O
;	O
}	O
while	O
(	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_message_destroy	function
(	O
&	O
msg	pointer
,	O
imsg	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
imsg	pointer
->	O
message	pointer
=	O
msg	pointer
;	O
}	O
*	O
pmsg	pointer
=	O
imsg	pointer
->	O
message	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_imap_realloc_messages	function
(	O
struct	O
_mu_imap_mailbox	struct
*	O
imbx	pointer
,	O
size_t	long
count	long
)	O
{	O
if	O
(	O
count	long
>	O
imbx	pointer
->	O
msgs_max	long
)	O
{	O
struct	O
_mu_imap_message	struct
*	O
*	O
newmsgs	pointer
=	O
realloc	function
(	O
imbx	pointer
->	O
msgs	pointer
,	O
count	long
*	O
sizeof	O
(	O
*	O
newmsgs	pointer
)	O
)	O
;	O
if	O
(	O
!	O
newmsgs	pointer
)	O
return	O
ENOMEM	int
;	O
memset	function
(	O
newmsgs	pointer
+	O
imbx	pointer
->	O
msgs_max	long
,	O
0	int
,	O
sizeof	O
(	O
*	O
newmsgs	pointer
)	O
*	O
(	O
count	long
-	O
imbx	pointer
->	O
msgs_max	long
)	O
)	O
;	O
imbx	pointer
->	O
msgs	pointer
=	O
newmsgs	pointer
;	O
imbx	pointer
->	O
msgs_max	long
=	O
count	long
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
_imap_mbx_destroy	function
(	O
mu_mailbox_t	pointer
mailbox	pointer
)	O
{	O
size_t	long
i	long
;	O
struct	O
_mu_imap_mailbox	struct
*	O
imbx	pointer
=	O
mailbox	pointer
->	O
data	pointer
;	O
if	O
(	O
!	O
imbx	pointer
)	O
return	O
;	O
if	O
(	O
imbx	pointer
->	O
msgs	pointer
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
imbx	pointer
->	O
msgs_cnt	long
;	O
i	long
++	O
)	O
_imap_msg_free	function
(	O
imbx	pointer
->	O
msgs	pointer
[	O
i	long
]	O
)	O
;	O
free	function
(	O
imbx	pointer
->	O
msgs	pointer
)	O
;	O
}	O
mu_stream_unref	function
(	O
imbx	pointer
->	O
cache	pointer
)	O
;	O
free	function
(	O
imbx	pointer
)	O
;	O
mailbox	pointer
->	O
data	pointer
=	O
NULL	O
;	O
}	O
static	O
void	O
_imap_update_callback	function
(	O
void	O
*	O
data	pointer
,	O
int	O
code	int
,	O
size_t	long
sdat	long
,	O
void	O
*	O
pdat	pointer
)	O
{	O
struct	O
_mu_imap_mailbox	struct
*	O
imbx	pointer
=	O
data	pointer
;	O
memcpy	function
(	O
&	O
imbx	pointer
->	O
stats	struct
,	O
pdat	pointer
,	O
sizeof	O
(	O
imbx	pointer
->	O
stats	struct
)	O
)	O
;	O
imbx	pointer
->	O
flags	int
&=	O
~	O
_MU_IMAP_MBX_UPTODATE	int
;	O
}	O
static	O
void	O
_imap_expunge_callback	function
(	O
void	O
*	O
data	pointer
,	O
int	O
code	int
,	O
size_t	long
msgno	long
,	O
void	O
*	O
pdat	pointer
)	O
{	O
struct	O
_mu_imap_mailbox	struct
*	O
imbx	pointer
=	O
data	pointer
;	O
size_t	long
n	long
;	O
if	O
(	O
msgno	long
>	O
imbx	pointer
->	O
msgs_cnt	long
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"_imap_expunge_callback called with invalid message number: %lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
msgno	long
)	O
)	O
;	O
return	O
;	O
}	O
_imap_msg_free	function
(	O
imbx	pointer
->	O
msgs	pointer
[	O
msgno	long
-	O
1	int
]	O
)	O
;	O
n	long
=	O
imbx	pointer
->	O
msgs_cnt	long
-	O
msgno	long
;	O
if	O
(	O
n	long
)	O
{	O
size_t	long
i	long
;	O
memmove	function
(	O
imbx	pointer
->	O
msgs	pointer
+	O
msgno	long
-	O
1	int
,	O
imbx	pointer
->	O
msgs	pointer
+	O
msgno	long
,	O
n	long
*	O
sizeof	O
(	O
imbx	pointer
->	O
msgs	pointer
[	O
0	int
]	O
)	O
)	O
;	O
for	O
(	O
i	long
=	O
msgno	long
-	O
1	int
;	O
i	long
<	O
imbx	pointer
->	O
msgs_cnt	long
;	O
i	long
++	O
)	O
imbx	pointer
->	O
msgs	pointer
[	O
i	long
]	O
->	O
msgno	long
=	O
i	long
+	O
1	int
;	O
}	O
imbx	pointer
->	O
msgs_cnt	long
--	O
;	O
}	O
static	O
int	O
_imap_mbx_open	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
int	O
flags	int
)	O
{	O
struct	O
_mu_imap_mailbox	struct
*	O
imbx	pointer
=	O
mbox	pointer
->	O
data	pointer
;	O
mu_folder_t	pointer
folder	pointer
=	O
mbox	pointer
->	O
folder	pointer
;	O
int	O
rc	int
;	O
const	O
char	O
*	O
mbox_name	pointer
;	O
mu_url_t	pointer
url	pointer
;	O
mu_imap_t	pointer
imap	pointer
;	O
mbox	pointer
->	O
flags	int
=	O
flags	int
;	O
rc	int
=	O
mu_mailbox_get_url	function
(	O
mbox	pointer
,	O
&	O
url	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
_	O
(	O
"opening mailbox %s"	pointer
)	O
,	O
mu_url_to_string	function
(	O
url	pointer
)	O
)	O
)	O
;	O
rc	int
=	O
mu_url_sget_path	function
(	O
url	pointer
,	O
&	O
mbox_name	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
MU_ERR_NOENT	O
)	O
mbox_name	pointer
=	O
"INBOX"	pointer
;	O
else	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_folder_open	function
(	O
folder	pointer
,	O
flags	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
imap	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
mu_imap_register_callback_function	function
(	O
imap	pointer
,	O
MU_IMAP_CB_RECENT_COUNT	int
,	O
_imap_update_callback	function
,	O
imbx	pointer
)	O
;	O
mu_imap_register_callback_function	function
(	O
imap	pointer
,	O
MU_IMAP_CB_MESSAGE_COUNT	int
,	O
_imap_update_callback	function
,	O
imbx	pointer
)	O
;	O
mu_imap_register_callback_function	function
(	O
imap	pointer
,	O
MU_IMAP_CB_EXPUNGE	int
,	O
_imap_expunge_callback	function
,	O
imbx	pointer
)	O
;	O
rc	int
=	O
mu_imap_select	function
(	O
imap	pointer
,	O
mbox_name	pointer
,	O
flags	int
&	O
(	O
MU_STREAM_WRITE	int
|	O
MU_STREAM_APPEND	int
)	O
,	O
&	O
imbx	pointer
->	O
stats	struct
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
imbx	pointer
->	O
stats	struct
.	O
flags	int
&	O
MU_IMAP_STAT_MESSAGE_COUNT	int
)	O
rc	int
=	O
_imap_realloc_messages	function
(	O
imbx	pointer
,	O
imbx	pointer
->	O
stats	struct
.	O
message_count	long
)	O
;	O
_imap_mbx_scan	function
(	O
mbox	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_imap_mbx_close	function
(	O
mu_mailbox_t	pointer
mbox	pointer
)	O
{	O
int	O
rc	int
;	O
mu_folder_t	pointer
folder	pointer
=	O
mbox	pointer
->	O
folder	pointer
;	O
mu_imap_t	pointer
imap	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
_	O
(	O
"closing mailbox %s"	pointer
)	O
,	O
mu_url_to_string	function
(	O
mbox	pointer
->	O
url	pointer
)	O
)	O
)	O
;	O
if	O
(	O
mu_imap_capability_test	function
(	O
imap	pointer
,	O
"UNSELECT"	pointer
,	O
NULL	O
)	O
==	O
0	int
)	O
rc	int
=	O
mu_imap_unselect	function
(	O
imap	pointer
)	O
;	O
else	O
rc	int
=	O
mu_imap_close	function
(	O
imap	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_imap_messages_count	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
size_t	long
*	O
pcount	pointer
)	O
{	O
struct	O
_mu_imap_mailbox	struct
*	O
imbx	pointer
=	O
mbox	pointer
->	O
data	pointer
;	O
if	O
(	O
imbx	pointer
->	O
stats	struct
.	O
flags	int
&	O
MU_IMAP_STAT_MESSAGE_COUNT	int
)	O
*	O
pcount	pointer
=	O
imbx	pointer
->	O
stats	struct
.	O
message_count	long
;	O
else	O
return	O
MU_ERR_INFO_UNAVAILABLE	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_imap_messages_recent	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
size_t	long
*	O
pcount	pointer
)	O
{	O
struct	O
_mu_imap_mailbox	struct
*	O
imbx	pointer
=	O
mbox	pointer
->	O
data	pointer
;	O
if	O
(	O
imbx	pointer
->	O
stats	struct
.	O
flags	int
&	O
MU_IMAP_STAT_RECENT_COUNT	int
)	O
*	O
pcount	pointer
=	O
imbx	pointer
->	O
stats	struct
.	O
recent_count	long
;	O
else	O
{	O
int	O
rc	int
;	O
mu_folder_t	pointer
folder	pointer
=	O
mbox	pointer
->	O
folder	pointer
;	O
mu_imap_t	pointer
imap	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
mu_msgset_t	pointer
msgset	pointer
;	O
rc	int
=	O
mu_imap_search	function
(	O
imap	pointer
,	O
0	int
,	O
"RECENT"	pointer
,	O
&	O
msgset	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_msgset_count	function
(	O
msgset	pointer
,	O
pcount	pointer
)	O
;	O
mu_msgset_free	function
(	O
msgset	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_imap_uidnext	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
size_t	long
*	O
pn	pointer
)	O
{	O
struct	O
_mu_imap_mailbox	struct
*	O
imbx	pointer
=	O
mbox	pointer
->	O
data	pointer
;	O
if	O
(	O
imbx	pointer
->	O
stats	struct
.	O
flags	int
&	O
MU_IMAP_STAT_UIDNEXT	int
)	O
*	O
pn	pointer
=	O
imbx	pointer
->	O
stats	struct
.	O
uidnext	long
;	O
else	O
return	O
MU_ERR_INFO_UNAVAILABLE	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_imap_message_unseen	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
size_t	long
*	O
pn	pointer
)	O
{	O
struct	O
_mu_imap_mailbox	struct
*	O
imbx	pointer
=	O
mbox	pointer
->	O
data	pointer
;	O
if	O
(	O
imbx	pointer
->	O
stats	struct
.	O
flags	int
&	O
MU_IMAP_STAT_FIRST_UNSEEN	int
)	O
*	O
pn	pointer
=	O
imbx	pointer
->	O
stats	struct
.	O
first_unseen	long
;	O
else	O
{	O
int	O
rc	int
;	O
mu_folder_t	pointer
folder	pointer
=	O
mbox	pointer
->	O
folder	pointer
;	O
mu_imap_t	pointer
imap	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
mu_msgset_t	pointer
msgset	pointer
;	O
mu_list_t	pointer
list	pointer
;	O
rc	int
=	O
mu_imap_search	function
(	O
imap	pointer
,	O
0	int
,	O
"UNSEEN"	pointer
,	O
&	O
msgset	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
mu_msgset_is_empty	function
(	O
msgset	pointer
)	O
)	O
{	O
mu_msgset_free	function
(	O
msgset	pointer
)	O
;	O
return	O
MU_ERR_NOENT	O
;	O
}	O
rc	int
=	O
mu_msgset_get_list	function
(	O
msgset	pointer
,	O
&	O
list	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
struct	O
mu_msgrange	struct
*	O
r	pointer
;	O
rc	int
=	O
mu_list_head	function
(	O
list	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
r	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
*	O
pn	pointer
=	O
r	pointer
->	O
msg_beg	long
;	O
}	O
mu_msgset_free	function
(	O
msgset	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_imap_uidvalidity	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
unsigned	O
long	O
*	O
pn	pointer
)	O
{	O
struct	O
_mu_imap_mailbox	struct
*	O
imbx	pointer
=	O
mbox	pointer
->	O
data	pointer
;	O
if	O
(	O
imbx	pointer
->	O
stats	struct
.	O
flags	int
&	O
MU_IMAP_STAT_UIDVALIDITY	int
)	O
*	O
pn	pointer
=	O
imbx	pointer
->	O
stats	struct
.	O
uidvalidity	long
;	O
else	O
return	O
MU_ERR_INFO_UNAVAILABLE	O
;	O
return	O
0	int
;	O
}	O
struct	O
attr_tab	struct
{	O
size_t	long
start	long
;	O
size_t	long
end	long
;	O
int	O
attr_flags	int
;	O
}	O
;	O
static	O
int	O
attr_tab_cmp	function
(	O
void	O
const	O
*	O
a	pointer
,	O
void	O
const	O
*	O
b	pointer
)	O
{	O
struct	O
attr_tab	struct
const	O
*	O
ta	pointer
=	O
a	pointer
;	O
struct	O
attr_tab	struct
const	O
*	O
tb	pointer
=	O
b	pointer
;	O
if	O
(	O
ta	pointer
->	O
attr_flags	int
<	O
tb	pointer
->	O
attr_flags	int
)	O
return	O
-	O
1	int
;	O
else	O
if	O
(	O
ta	pointer
->	O
attr_flags	int
>	O
tb	pointer
->	O
attr_flags	int
)	O
return	O
1	int
;	O
if	O
(	O
ta	pointer
->	O
start	long
<	O
tb	pointer
->	O
start	long
)	O
return	O
-	O
1	int
;	O
else	O
if	O
(	O
ta	pointer
->	O
start	long
>	O
tb	pointer
->	O
start	long
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
aggregate_attributes	function
(	O
struct	O
_mu_imap_mailbox	struct
*	O
imbx	pointer
,	O
struct	O
attr_tab	struct
*	O
*	O
ptab	pointer
,	O
size_t	long
*	O
pcnt	pointer
)	O
{	O
size_t	long
i	long
,	O
j	long
;	O
size_t	long
count	long
;	O
struct	O
attr_tab	struct
*	O
tab	pointer
;	O
count	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
imbx	pointer
->	O
msgs_cnt	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
imbx	pointer
->	O
msgs	pointer
[	O
i	long
]	O
->	O
flags	int
&	O
_MU_IMAP_MSG_ATTRCHG	int
)	O
count	long
++	O
;	O
}	O
if	O
(	O
count	long
==	O
0	int
)	O
{	O
*	O
ptab	pointer
=	O
NULL	O
;	O
*	O
pcnt	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
tab	pointer
=	O
calloc	function
(	O
count	long
,	O
sizeof	O
(	O
*	O
tab	pointer
)	O
)	O
;	O
if	O
(	O
!	O
tab	pointer
)	O
return	O
ENOMEM	int
;	O
for	O
(	O
i	long
=	O
j	long
=	O
0	int
;	O
i	long
<	O
imbx	pointer
->	O
msgs_cnt	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
imbx	pointer
->	O
msgs	pointer
[	O
i	long
]	O
->	O
flags	int
&	O
_MU_IMAP_MSG_ATTRCHG	int
)	O
{	O
tab	pointer
[	O
j	long
]	O
.	O
start	long
=	O
tab	pointer
[	O
j	long
]	O
.	O
end	long
=	O
i	long
;	O
tab	pointer
[	O
j	long
]	O
.	O
attr_flags	int
=	O
imbx	pointer
->	O
msgs	pointer
[	O
i	long
]	O
->	O
attr_flags	int
;	O
j	long
++	O
;	O
}	O
}	O
qsort	function
(	O
tab	pointer
,	O
count	long
,	O
sizeof	O
(	O
tab	pointer
[	O
0	int
]	O
)	O
,	O
attr_tab_cmp	function
)	O
;	O
for	O
(	O
i	long
=	O
j	long
=	O
0	int
;	O
i	long
<	O
count	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
i	long
==	O
j	long
)	O
continue	O
;	O
else	O
if	O
(	O
(	O
tab	pointer
[	O
i	long
]	O
.	O
attr_flags	int
==	O
tab	pointer
[	O
j	long
]	O
.	O
attr_flags	int
)	O
&&	O
(	O
tab	pointer
[	O
i	long
]	O
.	O
start	long
==	O
tab	pointer
[	O
j	long
]	O
.	O
end	long
+	O
1	int
)	O
)	O
tab	pointer
[	O
j	long
]	O
.	O
end	long
++	O
;	O
else	O
tab	pointer
[	O
++	O
j	long
]	O
=	O
tab	pointer
[	O
i	long
]	O
;	O
}	O
*	O
ptab	pointer
=	O
tab	pointer
;	O
*	O
pcnt	pointer
=	O
j	long
+	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_imap_mbx_gensync	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
int	O
*	O
pdel	pointer
)	O
{	O
struct	O
_mu_imap_mailbox	struct
*	O
imbx	pointer
=	O
mbox	pointer
->	O
data	pointer
;	O
mu_folder_t	pointer
folder	pointer
=	O
mbox	pointer
->	O
folder	pointer
;	O
mu_imap_t	pointer
imap	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
size_t	long
i	long
,	O
j	long
;	O
mu_msgset_t	pointer
msgset	pointer
;	O
int	O
rc	int
;	O
int	O
delflg	int
=	O
0	int
;	O
struct	O
attr_tab	struct
*	O
tab	pointer
;	O
size_t	long
count	long
;	O
rc	int
=	O
mu_msgset_create	function
(	O
&	O
msgset	pointer
,	O
NULL	O
,	O
MU_MSGSET_NUM	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
aggregate_attributes	function
(	O
imbx	pointer
,	O
&	O
tab	pointer
,	O
&	O
count	long
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
imbx	pointer
->	O
msgs_cnt	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
imbx	pointer
->	O
msgs	pointer
[	O
i	long
]	O
->	O
flags	int
&	O
_MU_IMAP_MSG_ATTRCHG	int
)	O
{	O
mu_msgset_clear	function
(	O
msgset	pointer
)	O
;	O
mu_msgset_add_range	function
(	O
msgset	pointer
,	O
i	long
+	O
1	int
,	O
i	long
+	O
1	int
,	O
MU_MSGSET_NUM	int
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
rc	int
=	O
mu_imap_store_flags	function
(	O
imap	pointer
,	O
0	int
,	O
msgset	pointer
,	O
MU_IMAP_STORE_SET	int
|	O
MU_IMAP_STORE_SILENT	int
,	O
imbx	pointer
->	O
msgs	pointer
[	O
i	long
]	O
->	O
attr_flags	int
)	O
;	O
delflg	int
|=	O
imbx	pointer
->	O
msgs	pointer
[	O
i	long
]	O
->	O
attr_flags	int
&	O
MU_ATTRIBUTE_DELETED	int
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
}	O
}	O
}	O
else	O
{	O
for	O
(	O
i	long
=	O
j	long
=	O
0	int
;	O
i	long
<	O
count	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
j	long
<	O
i	long
)	O
{	O
if	O
(	O
tab	pointer
[	O
j	long
]	O
.	O
attr_flags	int
!=	O
tab	pointer
[	O
i	long
]	O
.	O
attr_flags	int
)	O
{	O
rc	int
=	O
mu_imap_store_flags	function
(	O
imap	pointer
,	O
0	int
,	O
msgset	pointer
,	O
MU_IMAP_STORE_SET	int
|	O
MU_IMAP_STORE_SILENT	int
,	O
tab	pointer
[	O
j	long
]	O
.	O
attr_flags	int
)	O
;	O
delflg	int
|=	O
tab	pointer
[	O
j	long
]	O
.	O
attr_flags	int
&	O
MU_ATTRIBUTE_DELETED	int
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
mu_msgset_clear	function
(	O
msgset	pointer
)	O
;	O
j	long
=	O
i	long
;	O
}	O
}	O
if	O
(	O
tab	pointer
[	O
i	long
]	O
.	O
end	long
==	O
tab	pointer
[	O
i	long
]	O
.	O
start	long
)	O
rc	int
=	O
mu_msgset_add_range	function
(	O
msgset	pointer
,	O
tab	pointer
[	O
i	long
]	O
.	O
start	long
+	O
1	int
,	O
tab	pointer
[	O
i	long
]	O
.	O
start	long
+	O
1	int
,	O
MU_MSGSET_NUM	int
)	O
;	O
else	O
rc	int
=	O
mu_msgset_add_range	function
(	O
msgset	pointer
,	O
tab	pointer
[	O
i	long
]	O
.	O
start	long
+	O
1	int
,	O
tab	pointer
[	O
i	long
]	O
.	O
end	long
+	O
1	int
,	O
MU_MSGSET_NUM	int
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
}	O
if	O
(	O
rc	int
==	O
0	int
&&	O
j	long
<	O
i	long
)	O
{	O
rc	int
=	O
mu_imap_store_flags	function
(	O
imap	pointer
,	O
0	int
,	O
msgset	pointer
,	O
MU_IMAP_STORE_SET	int
|	O
MU_IMAP_STORE_SILENT	int
,	O
tab	pointer
[	O
j	long
]	O
.	O
attr_flags	int
)	O
;	O
delflg	int
|=	O
tab	pointer
[	O
j	long
]	O
.	O
attr_flags	int
&	O
MU_ATTRIBUTE_DELETED	int
;	O
}	O
free	function
(	O
tab	pointer
)	O
;	O
}	O
mu_msgset_free	function
(	O
msgset	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
pdel	pointer
)	O
*	O
pdel	pointer
=	O
delflg	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_imap_mbx_expunge	function
(	O
mu_mailbox_t	pointer
mbox	pointer
)	O
{	O
int	O
rc	int
,	O
del	int
=	O
0	int
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
_	O
(	O
"expunging mailbox %s"	pointer
)	O
,	O
mu_url_to_string	function
(	O
mbox	pointer
->	O
url	pointer
)	O
)	O
)	O
;	O
rc	int
=	O
_imap_mbx_gensync	function
(	O
mbox	pointer
,	O
&	O
del	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
&&	O
del	int
)	O
{	O
mu_folder_t	pointer
folder	pointer
=	O
mbox	pointer
->	O
folder	pointer
;	O
mu_imap_t	pointer
imap	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
rc	int
=	O
mu_imap_expunge	function
(	O
imap	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
_imap_mbx_sync	function
(	O
mu_mailbox_t	pointer
mbox	pointer
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
_	O
(	O
"synchronizing mailbox %s"	pointer
)	O
,	O
mu_url_to_string	function
(	O
mbox	pointer
->	O
url	pointer
)	O
)	O
)	O
;	O
return	O
_imap_mbx_gensync	function
(	O
mbox	pointer
,	O
NULL	O
)	O
;	O
}	O
static	O
int	O
_imap_mbx_append_message	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
mu_message_t	pointer
msg	pointer
)	O
{	O
int	O
rc	int
;	O
mu_folder_t	pointer
folder	pointer
=	O
mbox	pointer
->	O
folder	pointer
;	O
mu_imap_t	pointer
imap	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
mu_url_t	pointer
url	pointer
;	O
const	O
char	O
*	O
mbox_name	pointer
;	O
rc	int
=	O
mu_mailbox_get_url	function
(	O
mbox	pointer
,	O
&	O
url	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_url_sget_path	function
(	O
url	pointer
,	O
&	O
mbox_name	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
return	O
mu_imap_append_message	function
(	O
imap	pointer
,	O
mbox_name	pointer
,	O
0	int
,	O
NULL	O
,	O
NULL	O
,	O
msg	pointer
)	O
;	O
}	O
static	O
int	O
_compute_lines	function
(	O
struct	O
mu_bodystructure	struct
*	O
bs	pointer
,	O
size_t	long
*	O
pcount	pointer
)	O
;	O
static	O
int	O
sum_lines	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
mu_bodystructure	struct
*	O
bs	pointer
=	O
item	pointer
;	O
size_t	long
*	O
pn	pointer
=	O
data	pointer
;	O
size_t	long
n	long
;	O
int	O
rc	int
;	O
rc	int
=	O
_compute_lines	function
(	O
bs	pointer
,	O
&	O
n	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
*	O
pn	pointer
+=	O
n	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_compute_lines	function
(	O
struct	O
mu_bodystructure	struct
*	O
bs	pointer
,	O
size_t	long
*	O
pcount	pointer
)	O
{	O
switch	O
(	O
bs	pointer
->	O
body_message_type	enum
)	O
{	O
case	O
mu_message_other	int
:	O
break	O
;	O
case	O
mu_message_text	int
:	O
*	O
pcount	pointer
=	O
bs	pointer
->	O
v	union
.	O
text	struct
.	O
body_lines	long
;	O
return	O
0	int
;	O
case	O
mu_message_rfc822	int
:	O
*	O
pcount	pointer
=	O
bs	pointer
->	O
v	union
.	O
rfc822	struct
.	O
body_lines	long
;	O
return	O
0	int
;	O
case	O
mu_message_multipart	int
:	O
*	O
pcount	pointer
=	O
0	int
;	O
return	O
mu_list_foreach	function
(	O
bs	pointer
->	O
v	union
.	O
multipart	struct
.	O
body_parts	pointer
,	O
sum_lines	function
,	O
pcount	pointer
)	O
;	O
}	O
return	O
MU_ERR_USER0	O
;	O
}	O
static	O
int	O
fetch_response_parser	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
union	O
mu_imap_fetch_response	union
*	O
resp	pointer
=	O
item	pointer
;	O
struct	O
_mu_imap_message	struct
*	O
imsg	pointer
=	O
data	pointer
;	O
switch	O
(	O
resp	pointer
->	O
type	int
)	O
{	O
case	O
MU_IMAP_FETCH_UID	int
:	O
imsg	pointer
->	O
uid	long
=	O
resp	pointer
->	O
uid	long
.	O
uid	long
;	O
break	O
;	O
case	O
MU_IMAP_FETCH_FLAGS	int
:	O
imsg	pointer
->	O
attr_flags	int
=	O
resp	pointer
->	O
flags	int
.	O
flags	int
;	O
break	O
;	O
case	O
MU_IMAP_FETCH_ENVELOPE	int
:	O
imsg	pointer
->	O
env	pointer
=	O
resp	pointer
->	O
envelope	pointer
.	O
imapenvelope	pointer
;	O
resp	pointer
->	O
envelope	pointer
.	O
imapenvelope	pointer
=	O
NULL	O
;	O
break	O
;	O
case	O
MU_IMAP_FETCH_RFC822_SIZE	int
:	O
imsg	pointer
->	O
message_size	long
=	O
resp	pointer
->	O
rfc822_size	struct
.	O
size	long
;	O
break	O
;	O
case	O
MU_IMAP_FETCH_BODYSTRUCTURE	int
:	O
{	O
size_t	long
n	long
;	O
if	O
(	O
_compute_lines	function
(	O
resp	pointer
->	O
bodystructure	struct
.	O
bs	pointer
,	O
&	O
n	long
)	O
==	O
0	int
)	O
{	O
imsg	pointer
->	O
message_lines	long
=	O
n	long
;	O
imsg	pointer
->	O
flags	int
|=	O
_MU_IMAP_MSG_LINES	int
;	O
}	O
}	O
break	O
;	O
case	O
MU_IMAP_FETCH_BODY	int
:	O
{	O
int	O
rc	int
;	O
struct	O
save_closure	struct
clos	pointer
;	O
clos	pointer
.	O
imsg	pointer
=	O
imsg	pointer
;	O
rc	int
=	O
mu_memory_stream_create	function
(	O
&	O
clos	pointer
.	O
save_stream	pointer
,	O
MU_STREAM_RDWR	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
rc	int
=	O
_save_message_parser	function
(	O
resp	pointer
,	O
&	O
clos	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
imsg	pointer
->	O
header_stream	pointer
=	O
clos	pointer
.	O
save_stream	pointer
;	O
else	O
mu_stream_destroy	function
(	O
&	O
clos	pointer
.	O
save_stream	pointer
)	O
;	O
}	O
else	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"mu_static_memory_stream_create: %s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
}	O
break	O
;	O
default	O
:	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE0	int
,	O
(	O
_	O
(	O
"fetch returned a not requested item %d"	pointer
)	O
,	O
resp	pointer
->	O
type	int
)	O
)	O
;	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
_imap_fetch_callback	function
(	O
void	O
*	O
data	pointer
,	O
int	O
code	int
,	O
size_t	long
sdat	long
,	O
void	O
*	O
pdat	pointer
)	O
{	O
struct	O
_mu_imap_mailbox	struct
*	O
imbx	pointer
=	O
data	pointer
;	O
mu_mailbox_t	pointer
mbox	pointer
=	O
imbx	pointer
->	O
mbox	pointer
;	O
mu_list_t	pointer
list	pointer
=	O
pdat	pointer
;	O
int	O
rc	int
;	O
struct	O
_mu_imap_message	struct
*	O
imsg	pointer
;	O
rc	int
=	O
_imap_realloc_messages	function
(	O
imbx	pointer
,	O
sdat	long
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"cannot reallocate array of messages: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
imbx	pointer
->	O
last_error	int
=	O
rc	int
;	O
return	O
;	O
}	O
if	O
(	O
imbx	pointer
->	O
msgs_cnt	long
<	O
sdat	long
)	O
imbx	pointer
->	O
msgs_cnt	long
=	O
sdat	long
;	O
if	O
(	O
!	O
imbx	pointer
->	O
msgs	pointer
[	O
sdat	long
-	O
1	int
]	O
)	O
{	O
imbx	pointer
->	O
msgs	pointer
[	O
sdat	long
-	O
1	int
]	O
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
imbx	pointer
->	O
msgs	pointer
[	O
sdat	long
-	O
1	int
]	O
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
imbx	pointer
->	O
msgs	pointer
[	O
sdat	long
-	O
1	int
]	O
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"cannot allocate imap message: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
)	O
;	O
imbx	pointer
->	O
last_error	int
=	O
errno	O
;	O
return	O
;	O
}	O
imbx	pointer
->	O
msgs	pointer
[	O
sdat	long
-	O
1	int
]	O
->	O
msgno	long
=	O
sdat	long
;	O
}	O
imsg	pointer
=	O
imbx	pointer
->	O
msgs	pointer
[	O
sdat	long
-	O
1	int
]	O
;	O
imsg	pointer
->	O
imbx	pointer
=	O
imbx	pointer
;	O
mu_list_foreach	function
(	O
list	pointer
,	O
fetch_response_parser	function
,	O
imsg	pointer
)	O
;	O
if	O
(	O
mbox	pointer
->	O
observable	pointer
)	O
{	O
if	O
(	O
(	O
(	O
sdat	long
+	O
1	int
)	O
%	O
10	int
)	O
==	O
0	int
)	O
mu_observable_notify	function
(	O
imbx	pointer
->	O
mbox	pointer
->	O
observable	pointer
,	O
MU_EVT_MAILBOX_PROGRESS	int
,	O
NULL	O
)	O
;	O
}	O
}	O
static	O
int	O
_imap_mbx_scan	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
size_t	long
msgno	long
,	O
size_t	long
*	O
pcount	pointer
)	O
{	O
struct	O
_mu_imap_mailbox	struct
*	O
imbx	pointer
=	O
mbox	pointer
->	O
data	pointer
;	O
mu_folder_t	pointer
folder	pointer
=	O
mbox	pointer
->	O
folder	pointer
;	O
mu_imap_t	pointer
imap	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
mu_msgset_t	pointer
msgset	pointer
;	O
int	O
rc	int
;	O
static	O
char	O
_imap_scan_items	array
[	O
]	O
=	O
"(UID FLAGS ENVELOPE RFC822.SIZE BODY BODY.PEEK[HEADER])"	pointer
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
_	O
(	O
"scanning mailbox %s"	pointer
)	O
,	O
mu_url_to_string	function
(	O
mbox	pointer
->	O
url	pointer
)	O
)	O
)	O
;	O
if	O
(	O
imbx	pointer
->	O
stats	struct
.	O
message_count	long
>	O
0	int
)	O
{	O
rc	int
=	O
mu_msgset_create	function
(	O
&	O
msgset	pointer
,	O
NULL	O
,	O
MU_MSGSET_NUM	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_msgset_add_range	function
(	O
msgset	pointer
,	O
msgno	long
,	O
MU_MSGNO_LAST	int
,	O
MU_MSGSET_NUM	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_msgset_free	function
(	O
msgset	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
_imap_mbx_clrerr	O
(	O
imbx	pointer
)	O
;	O
rc	int
=	O
_imap_fetch_with_callback	function
(	O
imap	pointer
,	O
msgset	pointer
,	O
_imap_scan_items	array
,	O
_imap_fetch_callback	function
,	O
imbx	pointer
)	O
;	O
mu_msgset_free	function
(	O
msgset	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
rc	int
=	O
_imap_mbx_errno	O
(	O
imbx	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
size_t	long
i	long
;	O
mu_off_t	long
total	long
=	O
0	int
;	O
imbx	pointer
->	O
flags	int
|=	O
_MU_IMAP_MBX_UPTODATE	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
imbx	pointer
->	O
msgs_cnt	long
;	O
i	long
++	O
)	O
{	O
total	long
+=	O
imbx	pointer
->	O
msgs	pointer
[	O
i	long
-	O
1	int
]	O
->	O
message_size	long
;	O
if	O
(	O
mbox	pointer
->	O
observable	pointer
)	O
mu_observable_notify	function
(	O
mbox	pointer
->	O
observable	pointer
,	O
MU_EVT_MESSAGE_ADD	int
,	O
&	O
i	long
)	O
;	O
}	O
if	O
(	O
pcount	pointer
)	O
*	O
pcount	pointer
=	O
imbx	pointer
->	O
msgs_cnt	long
;	O
}	O
}	O
else	O
{	O
rc	int
=	O
0	int
;	O
imbx	pointer
->	O
flags	int
|=	O
_MU_IMAP_MBX_UPTODATE	int
;	O
if	O
(	O
pcount	pointer
)	O
*	O
pcount	pointer
=	O
0	int
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
_imap_mbx_is_updated	function
(	O
mu_mailbox_t	pointer
mbox	pointer
)	O
{	O
struct	O
_mu_imap_mailbox	struct
*	O
imbx	pointer
=	O
mbox	pointer
->	O
data	pointer
;	O
mu_folder_t	pointer
folder	pointer
=	O
mbox	pointer
->	O
folder	pointer
;	O
mu_imap_t	pointer
imap	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_imap_noop	function
(	O
imap	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"mu_imap_noop: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
imbx	pointer
->	O
last_error	int
=	O
rc	int
;	O
}	O
return	O
_imap_mbx_uptodate	O
(	O
imbx	pointer
)	O
;	O
}	O
static	O
int	O
_imap_copy_to_mailbox	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
mu_msgset_t	pointer
msgset	pointer
,	O
const	O
char	O
*	O
mailbox	pointer
,	O
int	O
flags	int
)	O
{	O
struct	O
_mu_imap_mailbox	struct
*	O
imbx	pointer
=	O
mbox	pointer
->	O
data	pointer
;	O
mu_folder_t	pointer
folder	pointer
=	O
mbox	pointer
->	O
folder	pointer
;	O
mu_imap_t	pointer
imap	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
int	O
rc	int
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
_	O
(	O
"copying messages to mailbox %s"	pointer
)	O
,	O
mailbox	pointer
)	O
)	O
;	O
_imap_mbx_clrerr	O
(	O
imbx	pointer
)	O
;	O
rc	int
=	O
mu_imap_copy	function
(	O
imap	pointer
,	O
flags	int
&	O
MU_MAILBOX_COPY_UID	int
,	O
msgset	pointer
,	O
mailbox	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"mu_imap_copy: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
mu_imap_response_code	function
(	O
imap	pointer
)	O
==	O
MU_IMAP_RESPONSE_TRYCREATE	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
_	O
(	O
"creating mailbox %s"	pointer
)	O
,	O
mailbox	pointer
)	O
)	O
;	O
rc	int
=	O
mu_imap_mailbox_create	function
(	O
imap	pointer
,	O
mailbox	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
rc	int
=	O
mu_imap_copy	function
(	O
imap	pointer
,	O
flags	int
&	O
MU_MAILBOX_COPY_UID	int
,	O
msgset	pointer
,	O
mailbox	pointer
)	O
;	O
}	O
}	O
imbx	pointer
->	O
last_error	int
=	O
rc	int
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
_mu_imap_mailbox_init	function
(	O
mu_mailbox_t	pointer
mailbox	pointer
)	O
{	O
struct	O
_mu_imap_mailbox	struct
*	O
mbx	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
mbx	pointer
)	O
)	O
;	O
if	O
(	O
!	O
mbx	pointer
)	O
return	O
ENOMEM	int
;	O
mbx	pointer
->	O
mbox	pointer
=	O
mailbox	pointer
;	O
mailbox	pointer
->	O
data	pointer
=	O
mbx	pointer
;	O
mailbox	pointer
->	O
_destroy	pointer
=	O
_imap_mbx_destroy	function
;	O
mailbox	pointer
->	O
_open	pointer
=	O
_imap_mbx_open	function
;	O
mailbox	pointer
->	O
_close	pointer
=	O
_imap_mbx_close	function
;	O
mailbox	pointer
->	O
_expunge	pointer
=	O
_imap_mbx_expunge	function
;	O
mailbox	pointer
->	O
_messages_count	pointer
=	O
_imap_messages_count	function
;	O
mailbox	pointer
->	O
_messages_recent	pointer
=	O
_imap_messages_recent	function
;	O
mailbox	pointer
->	O
_message_unseen	pointer
=	O
_imap_message_unseen	function
;	O
mailbox	pointer
->	O
_uidvalidity	pointer
=	O
_imap_uidvalidity	function
;	O
mailbox	pointer
->	O
_uidnext	pointer
=	O
_imap_uidnext	function
;	O
mailbox	pointer
->	O
_scan	pointer
=	O
_imap_mbx_scan	function
;	O
mailbox	pointer
->	O
_is_updated	pointer
=	O
_imap_mbx_is_updated	function
;	O
mailbox	pointer
->	O
_get_message	pointer
=	O
_imap_mbx_get_message	function
;	O
mailbox	pointer
->	O
_sync	pointer
=	O
_imap_mbx_sync	function
;	O
mailbox	pointer
->	O
_append_message	pointer
=	O
_imap_mbx_append_message	function
;	O
mailbox	pointer
->	O
_copy	pointer
=	O
_imap_copy_to_mailbox	function
;	O
return	O
0	int
;	O
}	O