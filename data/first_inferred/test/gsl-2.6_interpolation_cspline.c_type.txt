typedef	O
struct	O
{	O
double	O
*	O
c	pointer
;	O
double	O
*	O
g	pointer
;	O
double	O
*	O
diag	pointer
;	O
double	O
*	O
offdiag	pointer
;	O
}	O
cspline_state_t	struct
;	O
static	O
void	O
*	O
cspline_alloc	function
(	O
size_t	long
size	long
)	O
{	O
cspline_state_t	struct
*	O
state	pointer
=	O
(	O
cspline_state_t	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
cspline_state_t	struct
)	O
)	O
;	O
if	O
(	O
state	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for state"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
c	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
size	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
c	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for c"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
g	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
size	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
g	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
state	pointer
->	O
c	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for g"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
diag	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
size	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
diag	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
state	pointer
->	O
g	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
c	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for diag"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
offdiag	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
size	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
offdiag	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
state	pointer
->	O
diag	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
g	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
c	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for offdiag"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
return	O
state	pointer
;	O
}	O
static	O
int	O
cspline_init	function
(	O
void	O
*	O
vstate	pointer
,	O
const	O
double	O
xa	array
[	O
]	O
,	O
const	O
double	O
ya	array
[	O
]	O
,	O
size_t	long
size	long
)	O
{	O
cspline_state_t	struct
*	O
state	pointer
=	O
(	O
cspline_state_t	struct
*	O
)	O
vstate	pointer
;	O
size_t	long
i	long
;	O
size_t	long
num_points	long
=	O
size	long
;	O
size_t	long
max_index	long
=	O
num_points	long
-	O
1	int
;	O
size_t	long
sys_size	long
=	O
max_index	long
-	O
1	int
;	O
state	pointer
->	O
c	pointer
[	O
0	int
]	O
=	O
0.0	int
;	O
state	pointer
->	O
c	pointer
[	O
max_index	long
]	O
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
sys_size	long
;	O
i	long
++	O
)	O
{	O
const	O
double	O
h_i	double
=	O
xa	array
[	O
i	long
+	O
1	int
]	O
-	O
xa	array
[	O
i	long
]	O
;	O
const	O
double	O
h_ip1	double
=	O
xa	array
[	O
i	long
+	O
2	int
]	O
-	O
xa	array
[	O
i	long
+	O
1	int
]	O
;	O
const	O
double	O
ydiff_i	double
=	O
ya	array
[	O
i	long
+	O
1	int
]	O
-	O
ya	array
[	O
i	long
]	O
;	O
const	O
double	O
ydiff_ip1	double
=	O
ya	array
[	O
i	long
+	O
2	int
]	O
-	O
ya	array
[	O
i	long
+	O
1	int
]	O
;	O
const	O
double	O
g_i	double
=	O
(	O
h_i	double
!=	O
0.0	int
)	O
?	O
1.0	int
/	O
h_i	double
:	O
0.0	int
;	O
const	O
double	O
g_ip1	double
=	O
(	O
h_ip1	double
!=	O
0.0	int
)	O
?	O
1.0	int
/	O
h_ip1	double
:	O
0.0	int
;	O
state	pointer
->	O
offdiag	pointer
[	O
i	long
]	O
=	O
h_ip1	double
;	O
state	pointer
->	O
diag	pointer
[	O
i	long
]	O
=	O
2.0	int
*	O
(	O
h_ip1	double
+	O
h_i	double
)	O
;	O
state	pointer
->	O
g	pointer
[	O
i	long
]	O
=	O
3.0	int
*	O
(	O
ydiff_ip1	double
*	O
g_ip1	double
-	O
ydiff_i	double
*	O
g_i	double
)	O
;	O
}	O
if	O
(	O
sys_size	long
==	O
1	int
)	O
{	O
state	pointer
->	O
c	pointer
[	O
1	int
]	O
=	O
state	pointer
->	O
g	pointer
[	O
0	int
]	O
/	O
state	pointer
->	O
diag	pointer
[	O
0	int
]	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
gsl_vector_view	struct
g_vec	struct
=	O
gsl_vector_view_array	function
(	O
state	pointer
->	O
g	pointer
,	O
sys_size	long
)	O
;	O
gsl_vector_view	struct
diag_vec	struct
=	O
gsl_vector_view_array	function
(	O
state	pointer
->	O
diag	pointer
,	O
sys_size	long
)	O
;	O
gsl_vector_view	struct
offdiag_vec	struct
=	O
gsl_vector_view_array	function
(	O
state	pointer
->	O
offdiag	pointer
,	O
sys_size	long
-	O
1	int
)	O
;	O
gsl_vector_view	struct
solution_vec	struct
=	O
gsl_vector_view_array	function
(	O
(	O
state	pointer
->	O
c	pointer
)	O
+	O
1	int
,	O
sys_size	long
)	O
;	O
int	O
status	int
=	O
gsl_linalg_solve_symm_tridiag	function
(	O
&	O
diag_vec	struct
.	O
vector	struct
,	O
&	O
offdiag_vec	struct
.	O
vector	struct
,	O
&	O
g_vec	struct
.	O
vector	struct
,	O
&	O
solution_vec	struct
.	O
vector	struct
)	O
;	O
return	O
status	int
;	O
}	O
}	O
static	O
int	O
cspline_init_periodic	function
(	O
void	O
*	O
vstate	pointer
,	O
const	O
double	O
xa	array
[	O
]	O
,	O
const	O
double	O
ya	array
[	O
]	O
,	O
size_t	long
size	long
)	O
{	O
cspline_state_t	struct
*	O
state	pointer
=	O
(	O
cspline_state_t	struct
*	O
)	O
vstate	pointer
;	O
size_t	long
i	long
;	O
size_t	long
num_points	long
=	O
size	long
;	O
size_t	long
max_index	long
=	O
num_points	long
-	O
1	int
;	O
size_t	long
sys_size	long
=	O
max_index	long
;	O
if	O
(	O
sys_size	long
==	O
2	int
)	O
{	O
const	O
double	O
h0	double
=	O
xa	array
[	O
1	int
]	O
-	O
xa	array
[	O
0	int
]	O
;	O
const	O
double	O
h1	double
=	O
xa	array
[	O
2	int
]	O
-	O
xa	array
[	O
1	int
]	O
;	O
const	O
double	O
A	pointer
=	O
2.0	int
*	O
(	O
h0	double
+	O
h1	double
)	O
;	O
const	O
double	O
B	pointer
=	O
h0	double
+	O
h1	double
;	O
double	O
g	pointer
[	O
2	int
]	O
;	O
double	O
det	double
;	O
g	pointer
[	O
0	int
]	O
=	O
3.0	int
*	O
(	O
(	O
ya	array
[	O
2	int
]	O
-	O
ya	array
[	O
1	int
]	O
)	O
/	O
h1	double
-	O
(	O
ya	array
[	O
1	int
]	O
-	O
ya	array
[	O
0	int
]	O
)	O
/	O
h0	double
)	O
;	O
g	pointer
[	O
1	int
]	O
=	O
3.0	int
*	O
(	O
(	O
ya	array
[	O
1	int
]	O
-	O
ya	array
[	O
2	int
]	O
)	O
/	O
h0	double
-	O
(	O
ya	array
[	O
2	int
]	O
-	O
ya	array
[	O
1	int
]	O
)	O
/	O
h1	double
)	O
;	O
det	double
=	O
3.0	int
*	O
(	O
h0	double
+	O
h1	double
)	O
*	O
(	O
h0	double
+	O
h1	double
)	O
;	O
state	pointer
->	O
c	pointer
[	O
1	int
]	O
=	O
(	O
A	pointer
*	O
g	pointer
[	O
0	int
]	O
-	O
B	pointer
*	O
g	pointer
[	O
1	int
]	O
)	O
/	O
det	double
;	O
state	pointer
->	O
c	pointer
[	O
2	int
]	O
=	O
(	O
-	O
B	pointer
*	O
g	pointer
[	O
0	int
]	O
+	O
A	pointer
*	O
g	pointer
[	O
1	int
]	O
)	O
/	O
det	double
;	O
state	pointer
->	O
c	pointer
[	O
0	int
]	O
=	O
state	pointer
->	O
c	pointer
[	O
2	int
]	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
sys_size	long
-	O
1	int
;	O
i	long
++	O
)	O
{	O
const	O
double	O
h_i	double
=	O
xa	array
[	O
i	long
+	O
1	int
]	O
-	O
xa	array
[	O
i	long
]	O
;	O
const	O
double	O
h_ip1	double
=	O
xa	array
[	O
i	long
+	O
2	int
]	O
-	O
xa	array
[	O
i	long
+	O
1	int
]	O
;	O
const	O
double	O
ydiff_i	double
=	O
ya	array
[	O
i	long
+	O
1	int
]	O
-	O
ya	array
[	O
i	long
]	O
;	O
const	O
double	O
ydiff_ip1	double
=	O
ya	array
[	O
i	long
+	O
2	int
]	O
-	O
ya	array
[	O
i	long
+	O
1	int
]	O
;	O
const	O
double	O
g_i	double
=	O
(	O
h_i	double
!=	O
0.0	int
)	O
?	O
1.0	int
/	O
h_i	double
:	O
0.0	int
;	O
const	O
double	O
g_ip1	double
=	O
(	O
h_ip1	double
!=	O
0.0	int
)	O
?	O
1.0	int
/	O
h_ip1	double
:	O
0.0	int
;	O
state	pointer
->	O
offdiag	pointer
[	O
i	long
]	O
=	O
h_ip1	double
;	O
state	pointer
->	O
diag	pointer
[	O
i	long
]	O
=	O
2.0	int
*	O
(	O
h_ip1	double
+	O
h_i	double
)	O
;	O
state	pointer
->	O
g	pointer
[	O
i	long
]	O
=	O
3.0	int
*	O
(	O
ydiff_ip1	double
*	O
g_ip1	double
-	O
ydiff_i	double
*	O
g_i	double
)	O
;	O
}	O
i	long
=	O
sys_size	long
-	O
1	int
;	O
{	O
const	O
double	O
h_i	double
=	O
xa	array
[	O
i	long
+	O
1	int
]	O
-	O
xa	array
[	O
i	long
]	O
;	O
const	O
double	O
h_ip1	double
=	O
xa	array
[	O
1	int
]	O
-	O
xa	array
[	O
0	int
]	O
;	O
const	O
double	O
ydiff_i	double
=	O
ya	array
[	O
i	long
+	O
1	int
]	O
-	O
ya	array
[	O
i	long
]	O
;	O
const	O
double	O
ydiff_ip1	double
=	O
ya	array
[	O
1	int
]	O
-	O
ya	array
[	O
0	int
]	O
;	O
const	O
double	O
g_i	double
=	O
(	O
h_i	double
!=	O
0.0	int
)	O
?	O
1.0	int
/	O
h_i	double
:	O
0.0	int
;	O
const	O
double	O
g_ip1	double
=	O
(	O
h_ip1	double
!=	O
0.0	int
)	O
?	O
1.0	int
/	O
h_ip1	double
:	O
0.0	int
;	O
state	pointer
->	O
offdiag	pointer
[	O
i	long
]	O
=	O
h_ip1	double
;	O
state	pointer
->	O
diag	pointer
[	O
i	long
]	O
=	O
2.0	int
*	O
(	O
h_ip1	double
+	O
h_i	double
)	O
;	O
state	pointer
->	O
g	pointer
[	O
i	long
]	O
=	O
3.0	int
*	O
(	O
ydiff_ip1	double
*	O
g_ip1	double
-	O
ydiff_i	double
*	O
g_i	double
)	O
;	O
}	O
{	O
gsl_vector_view	struct
g_vec	struct
=	O
gsl_vector_view_array	function
(	O
state	pointer
->	O
g	pointer
,	O
sys_size	long
)	O
;	O
gsl_vector_view	struct
diag_vec	struct
=	O
gsl_vector_view_array	function
(	O
state	pointer
->	O
diag	pointer
,	O
sys_size	long
)	O
;	O
gsl_vector_view	struct
offdiag_vec	struct
=	O
gsl_vector_view_array	function
(	O
state	pointer
->	O
offdiag	pointer
,	O
sys_size	long
)	O
;	O
gsl_vector_view	struct
solution_vec	struct
=	O
gsl_vector_view_array	function
(	O
(	O
state	pointer
->	O
c	pointer
)	O
+	O
1	int
,	O
sys_size	long
)	O
;	O
int	O
status	int
=	O
gsl_linalg_solve_symm_cyc_tridiag	function
(	O
&	O
diag_vec	struct
.	O
vector	struct
,	O
&	O
offdiag_vec	struct
.	O
vector	struct
,	O
&	O
g_vec	struct
.	O
vector	struct
,	O
&	O
solution_vec	struct
.	O
vector	struct
)	O
;	O
state	pointer
->	O
c	pointer
[	O
0	int
]	O
=	O
state	pointer
->	O
c	pointer
[	O
max_index	long
]	O
;	O
return	O
status	int
;	O
}	O
}	O
}	O
static	O
void	O
cspline_free	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
cspline_state_t	struct
*	O
state	pointer
=	O
(	O
cspline_state_t	struct
*	O
)	O
vstate	pointer
;	O
free	function
(	O
state	pointer
->	O
c	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
g	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
diag	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
offdiag	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
}	O
static	O
inline	O
void	O
coeff_calc	function
(	O
const	O
double	O
c_array	array
[	O
]	O
,	O
double	O
dy	double
,	O
double	O
dx	double
,	O
size_t	long
index	long
,	O
double	O
*	O
b	pointer
,	O
double	O
*	O
c	pointer
,	O
double	O
*	O
d	pointer
)	O
{	O
const	O
double	O
c_i	double
=	O
c_array	array
[	O
index	long
]	O
;	O
const	O
double	O
c_ip1	double
=	O
c_array	array
[	O
index	long
+	O
1	int
]	O
;	O
*	O
b	pointer
=	O
(	O
dy	double
/	O
dx	double
)	O
-	O
dx	double
*	O
(	O
c_ip1	double
+	O
2.0	int
*	O
c_i	double
)	O
/	O
3.0	int
;	O
*	O
c	pointer
=	O
c_i	double
;	O
*	O
d	pointer
=	O
(	O
c_ip1	double
-	O
c_i	double
)	O
/	O
(	O
3.0	int
*	O
dx	double
)	O
;	O
}	O
static	O
int	O
cspline_eval	function
(	O
const	O
void	O
*	O
vstate	pointer
,	O
const	O
double	O
x_array	array
[	O
]	O
,	O
const	O
double	O
y_array	array
[	O
]	O
,	O
size_t	long
size	long
,	O
double	O
x	long double
,	O
gsl_interp_accel	struct
*	O
a	pointer
,	O
double	O
*	O
y	pointer
)	O
{	O
const	O
cspline_state_t	struct
*	O
state	pointer
=	O
(	O
const	O
cspline_state_t	struct
*	O
)	O
vstate	pointer
;	O
double	O
x_lo	double
,	O
x_hi	double
;	O
double	O
dx	double
;	O
size_t	long
index	long
;	O
if	O
(	O
a	pointer
!=	O
0	int
)	O
{	O
index	long
=	O
gsl_interp_accel_find	function
(	O
a	pointer
,	O
x_array	array
,	O
size	long
,	O
x	long double
)	O
;	O
}	O
else	O
{	O
index	long
=	O
gsl_interp_bsearch	function
(	O
x_array	array
,	O
x	long double
,	O
0	int
,	O
size	long
-	O
1	int
)	O
;	O
}	O
x_hi	double
=	O
x_array	array
[	O
index	long
+	O
1	int
]	O
;	O
x_lo	double
=	O
x_array	array
[	O
index	long
]	O
;	O
dx	double
=	O
x_hi	double
-	O
x_lo	double
;	O
if	O
(	O
dx	double
>	O
0.0	int
)	O
{	O
const	O
double	O
y_lo	double
=	O
y_array	array
[	O
index	long
]	O
;	O
const	O
double	O
y_hi	double
=	O
y_array	array
[	O
index	long
+	O
1	int
]	O
;	O
const	O
double	O
dy	double
=	O
y_hi	double
-	O
y_lo	double
;	O
double	O
delx	double
=	O
x	long double
-	O
x_lo	double
;	O
double	O
b_i	double
,	O
c_i	double
,	O
d_i	double
;	O
coeff_calc	function
(	O
state	pointer
->	O
c	pointer
,	O
dy	double
,	O
dx	double
,	O
index	long
,	O
&	O
b_i	double
,	O
&	O
c_i	double
,	O
&	O
d_i	double
)	O
;	O
*	O
y	pointer
=	O
y_lo	double
+	O
delx	double
*	O
(	O
b_i	double
+	O
delx	double
*	O
(	O
c_i	double
+	O
delx	double
*	O
d_i	double
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
*	O
y	pointer
=	O
0.0	int
;	O
return	O
GSL_EINVAL	int
;	O
}	O
}	O
static	O
int	O
cspline_eval_deriv	function
(	O
const	O
void	O
*	O
vstate	pointer
,	O
const	O
double	O
x_array	array
[	O
]	O
,	O
const	O
double	O
y_array	array
[	O
]	O
,	O
size_t	long
size	long
,	O
double	O
x	long double
,	O
gsl_interp_accel	struct
*	O
a	pointer
,	O
double	O
*	O
dydx	pointer
)	O
{	O
const	O
cspline_state_t	struct
*	O
state	pointer
=	O
(	O
const	O
cspline_state_t	struct
*	O
)	O
vstate	pointer
;	O
double	O
x_lo	double
,	O
x_hi	double
;	O
double	O
dx	double
;	O
size_t	long
index	long
;	O
if	O
(	O
a	pointer
!=	O
0	int
)	O
{	O
index	long
=	O
gsl_interp_accel_find	function
(	O
a	pointer
,	O
x_array	array
,	O
size	long
,	O
x	long double
)	O
;	O
}	O
else	O
{	O
index	long
=	O
gsl_interp_bsearch	function
(	O
x_array	array
,	O
x	long double
,	O
0	int
,	O
size	long
-	O
1	int
)	O
;	O
}	O
x_hi	double
=	O
x_array	array
[	O
index	long
+	O
1	int
]	O
;	O
x_lo	double
=	O
x_array	array
[	O
index	long
]	O
;	O
dx	double
=	O
x_hi	double
-	O
x_lo	double
;	O
if	O
(	O
dx	double
>	O
0.0	int
)	O
{	O
const	O
double	O
y_lo	double
=	O
y_array	array
[	O
index	long
]	O
;	O
const	O
double	O
y_hi	double
=	O
y_array	array
[	O
index	long
+	O
1	int
]	O
;	O
const	O
double	O
dy	double
=	O
y_hi	double
-	O
y_lo	double
;	O
double	O
delx	double
=	O
x	long double
-	O
x_lo	double
;	O
double	O
b_i	double
,	O
c_i	double
,	O
d_i	double
;	O
coeff_calc	function
(	O
state	pointer
->	O
c	pointer
,	O
dy	double
,	O
dx	double
,	O
index	long
,	O
&	O
b_i	double
,	O
&	O
c_i	double
,	O
&	O
d_i	double
)	O
;	O
*	O
dydx	pointer
=	O
b_i	double
+	O
delx	double
*	O
(	O
2.0	int
*	O
c_i	double
+	O
3.0	int
*	O
d_i	double
*	O
delx	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
*	O
dydx	pointer
=	O
0.0	int
;	O
return	O
GSL_EINVAL	int
;	O
}	O
}	O
static	O
int	O
cspline_eval_deriv2	function
(	O
const	O
void	O
*	O
vstate	pointer
,	O
const	O
double	O
x_array	array
[	O
]	O
,	O
const	O
double	O
y_array	array
[	O
]	O
,	O
size_t	long
size	long
,	O
double	O
x	long double
,	O
gsl_interp_accel	struct
*	O
a	pointer
,	O
double	O
*	O
y_pp	pointer
)	O
{	O
const	O
cspline_state_t	struct
*	O
state	pointer
=	O
(	O
const	O
cspline_state_t	struct
*	O
)	O
vstate	pointer
;	O
double	O
x_lo	double
,	O
x_hi	double
;	O
double	O
dx	double
;	O
size_t	long
index	long
;	O
if	O
(	O
a	pointer
!=	O
0	int
)	O
{	O
index	long
=	O
gsl_interp_accel_find	function
(	O
a	pointer
,	O
x_array	array
,	O
size	long
,	O
x	long double
)	O
;	O
}	O
else	O
{	O
index	long
=	O
gsl_interp_bsearch	function
(	O
x_array	array
,	O
x	long double
,	O
0	int
,	O
size	long
-	O
1	int
)	O
;	O
}	O
x_hi	double
=	O
x_array	array
[	O
index	long
+	O
1	int
]	O
;	O
x_lo	double
=	O
x_array	array
[	O
index	long
]	O
;	O
dx	double
=	O
x_hi	double
-	O
x_lo	double
;	O
if	O
(	O
dx	double
>	O
0.0	int
)	O
{	O
const	O
double	O
y_lo	double
=	O
y_array	array
[	O
index	long
]	O
;	O
const	O
double	O
y_hi	double
=	O
y_array	array
[	O
index	long
+	O
1	int
]	O
;	O
const	O
double	O
dy	double
=	O
y_hi	double
-	O
y_lo	double
;	O
double	O
delx	double
=	O
x	long double
-	O
x_lo	double
;	O
double	O
b_i	double
,	O
c_i	double
,	O
d_i	double
;	O
coeff_calc	function
(	O
state	pointer
->	O
c	pointer
,	O
dy	double
,	O
dx	double
,	O
index	long
,	O
&	O
b_i	double
,	O
&	O
c_i	double
,	O
&	O
d_i	double
)	O
;	O
*	O
y_pp	pointer
=	O
2.0	int
*	O
c_i	double
+	O
6.0	int
*	O
d_i	double
*	O
delx	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
*	O
y_pp	pointer
=	O
0.0	int
;	O
return	O
GSL_EINVAL	int
;	O
}	O
}	O
static	O
int	O
cspline_eval_integ	function
(	O
const	O
void	O
*	O
vstate	pointer
,	O
const	O
double	O
x_array	array
[	O
]	O
,	O
const	O
double	O
y_array	array
[	O
]	O
,	O
size_t	long
size	long
,	O
gsl_interp_accel	struct
*	O
acc	pointer
,	O
double	O
a	pointer
,	O
double	O
b	pointer
,	O
double	O
*	O
result	pointer
)	O
{	O
const	O
cspline_state_t	struct
*	O
state	pointer
=	O
(	O
const	O
cspline_state_t	struct
*	O
)	O
vstate	pointer
;	O
size_t	long
i	long
,	O
index_a	long
,	O
index_b	long
;	O
if	O
(	O
acc	pointer
!=	O
0	int
)	O
{	O
index_a	long
=	O
gsl_interp_accel_find	function
(	O
acc	pointer
,	O
x_array	array
,	O
size	long
,	O
a	pointer
)	O
;	O
index_b	long
=	O
gsl_interp_accel_find	function
(	O
acc	pointer
,	O
x_array	array
,	O
size	long
,	O
b	pointer
)	O
;	O
}	O
else	O
{	O
index_a	long
=	O
gsl_interp_bsearch	function
(	O
x_array	array
,	O
a	pointer
,	O
0	int
,	O
size	long
-	O
1	int
)	O
;	O
index_b	long
=	O
gsl_interp_bsearch	function
(	O
x_array	array
,	O
b	pointer
,	O
0	int
,	O
size	long
-	O
1	int
)	O
;	O
}	O
*	O
result	pointer
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
index_a	long
;	O
i	long
<=	O
index_b	long
;	O
i	long
++	O
)	O
{	O
const	O
double	O
x_hi	double
=	O
x_array	array
[	O
i	long
+	O
1	int
]	O
;	O
const	O
double	O
x_lo	double
=	O
x_array	array
[	O
i	long
]	O
;	O
const	O
double	O
y_lo	double
=	O
y_array	array
[	O
i	long
]	O
;	O
const	O
double	O
y_hi	double
=	O
y_array	array
[	O
i	long
+	O
1	int
]	O
;	O
const	O
double	O
dx	double
=	O
x_hi	double
-	O
x_lo	double
;	O
const	O
double	O
dy	double
=	O
y_hi	double
-	O
y_lo	double
;	O
if	O
(	O
dx	double
!=	O
0.0	int
)	O
{	O
double	O
b_i	double
,	O
c_i	double
,	O
d_i	double
;	O
coeff_calc	function
(	O
state	pointer
->	O
c	pointer
,	O
dy	double
,	O
dx	double
,	O
i	long
,	O
&	O
b_i	double
,	O
&	O
c_i	double
,	O
&	O
d_i	double
)	O
;	O
if	O
(	O
i	long
==	O
index_a	long
||	O
i	long
==	O
index_b	long
)	O
{	O
double	O
x1	double
=	O
(	O
i	long
==	O
index_a	long
)	O
?	O
a	pointer
:	O
x_lo	double
;	O
double	O
x2	double
=	O
(	O
i	long
==	O
index_b	long
)	O
?	O
b	pointer
:	O
x_hi	double
;	O
*	O
result	pointer
+=	O
integ_eval	function
(	O
y_lo	double
,	O
b_i	double
,	O
c_i	double
,	O
d_i	double
,	O
x_lo	double
,	O
x1	double
,	O
x2	double
)	O
;	O
}	O
else	O
{	O
*	O
result	pointer
+=	O
dx	double
*	O
(	O
y_lo	double
+	O
dx	double
*	O
(	O
0.5	int
*	O
b_i	double
+	O
dx	double
*	O
(	O
c_i	double
/	O
3.0	int
+	O
0.25	int
*	O
d_i	double
*	O
dx	double
)	O
)	O
)	O
;	O
}	O
}	O
else	O
{	O
*	O
result	pointer
=	O
0.0	int
;	O
return	O
GSL_EINVAL	int
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
const	O
gsl_interp_type	struct
cspline_type	struct
=	O
{	O
"cspline"	pointer
,	O
3	int
,	O
&	O
cspline_alloc	function
,	O
&	O
cspline_init	function
,	O
&	O
cspline_eval	function
,	O
&	O
cspline_eval_deriv	function
,	O
&	O
cspline_eval_deriv2	function
,	O
&	O
cspline_eval_integ	function
,	O
&	O
cspline_free	function
}	O
;	O
const	O
gsl_interp_type	struct
*	O
gsl_interp_cspline	pointer
=	O
&	O
cspline_type	struct
;	O
static	O
const	O
gsl_interp_type	struct
cspline_periodic_type	struct
=	O
{	O
"cspline-periodic"	pointer
,	O
2	int
,	O
&	O
cspline_alloc	function
,	O
&	O
cspline_init_periodic	function
,	O
&	O
cspline_eval	function
,	O
&	O
cspline_eval_deriv	function
,	O
&	O
cspline_eval_deriv2	function
,	O
&	O
cspline_eval_integ	function
,	O
&	O
cspline_free	function
}	O
;	O
const	O
gsl_interp_type	struct
*	O
gsl_interp_cspline_periodic	pointer
=	O
&	O
cspline_periodic_type	struct
;	O