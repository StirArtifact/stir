void	O
cbc_encrypt	function
(	O
const	O
void	O
*	O
ctx	*
,	O
nettle_cipher_func	function
*	O
f	*
,	O
size_t	long
block_size	long
,	O
uint8_t	char
*	O
iv	*
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
dst	*
,	O
const	O
uint8_t	char
*	O
src	*
)	O
{	O
assert	O
(	O
!	O
(	O
length	long
%	O
block_size	long
)	O
)	O
;	O
for	O
(	O
;	O
length	long
;	O
length	long
-=	O
block_size	long
,	O
src	*
+=	O
block_size	long
,	O
dst	*
+=	O
block_size	long
)	O
{	O
memxor	O
(	O
iv	*
,	O
src	*
,	O
block_size	long
)	O
;	O
f	*
(	O
ctx	*
,	O
block_size	long
,	O
dst	*
,	O
iv	*
)	O
;	O
memcpy	function
(	O
iv	*
,	O
dst	*
,	O
block_size	long
)	O
;	O
}	O
}	O
void	O
cbc_decrypt	function
(	O
const	O
void	O
*	O
ctx	*
,	O
nettle_cipher_func	function
*	O
f	*
,	O
size_t	long
block_size	long
,	O
uint8_t	char
*	O
iv	*
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
dst	*
,	O
const	O
uint8_t	char
*	O
src	*
)	O
{	O
assert	O
(	O
!	O
(	O
length	long
%	O
block_size	long
)	O
)	O
;	O
if	O
(	O
!	O
length	long
)	O
return	O
;	O
if	O
(	O
src	*
!=	O
dst	*
)	O
{	O
f	*
(	O
ctx	*
,	O
length	long
,	O
dst	*
,	O
src	*
)	O
;	O
memxor	O
(	O
dst	*
,	O
iv	*
,	O
block_size	long
)	O
;	O
memxor	O
(	O
dst	*
+	O
block_size	long
,	O
src	*
,	O
length	long
-	O
block_size	long
)	O
;	O
memcpy	function
(	O
iv	*
,	O
src	*
+	O
length	long
-	O
block_size	long
,	O
block_size	long
)	O
;	O
}	O
else	O
{	O
TMP_DECL	O
(	O
buffer	*
,	O
uint8_t	char
,	O
CBC_BUFFER_LIMIT	*
)	O
;	O
TMP_DECL	O
(	O
initial_iv	*
,	O
uint8_t	char
,	O
NETTLE_MAX_CIPHER_BLOCK_SIZE	O
)	O
;	O
size_t	long
buffer_size	long
;	O
if	O
(	O
length	long
<=	O
CBC_BUFFER_LIMIT	int
)	O
buffer_size	long
=	O
length	long
;	O
else	O
buffer_size	long
=	O
CBC_BUFFER_LIMIT	long
-	O
(	O
CBC_BUFFER_LIMIT	*
%	O
block_size	long
)	O
;	O
TMP_ALLOC	O
(	O
buffer	*
,	O
buffer_size	long
)	O
;	O
TMP_ALLOC	O
(	O
initial_iv	*
,	O
block_size	long
)	O
;	O
for	O
(	O
;	O
length	long
>	O
buffer_size	long
;	O
length	long
-=	O
buffer_size	long
,	O
dst	*
+=	O
buffer_size	long
)	O
{	O
f	*
(	O
ctx	*
,	O
buffer_size	long
,	O
buffer	*
,	O
dst	*
)	O
;	O
memcpy	function
(	O
initial_iv	*
,	O
iv	*
,	O
block_size	long
)	O
;	O
memcpy	function
(	O
iv	*
,	O
dst	*
+	O
buffer_size	long
-	O
block_size	long
,	O
block_size	long
)	O
;	O
memxor3	O
(	O
dst	*
+	O
block_size	long
,	O
buffer	*
+	O
block_size	long
,	O
dst	*
,	O
buffer_size	long
-	O
block_size	long
)	O
;	O
memxor3	O
(	O
dst	*
,	O
buffer	*
,	O
initial_iv	*
,	O
block_size	long
)	O
;	O
}	O
f	*
(	O
ctx	*
,	O
length	long
,	O
buffer	*
,	O
dst	*
)	O
;	O
memcpy	function
(	O
initial_iv	*
,	O
iv	*
,	O
block_size	long
)	O
;	O
memcpy	function
(	O
iv	*
,	O
dst	*
+	O
length	long
-	O
block_size	long
,	O
block_size	long
)	O
;	O
memxor3	O
(	O
dst	*
+	O
block_size	long
,	O
buffer	*
+	O
block_size	long
,	O
dst	*
,	O
length	long
-	O
block_size	long
)	O
;	O
memxor3	O
(	O
dst	*
,	O
buffer	*
,	O
initial_iv	*
,	O
block_size	long
)	O
;	O
}	O
}	O