Widget	O
Xt_CreateManagedWidget	function
(	O
CHAR	O
*	O
name	pointer
,	O
WidgetClass	O
widget_class	int
,	O
Widget	O
parent	pointer
,	O
CHAR	O
*	O
*	O
arg_name	pointer
,	O
void	O
*	O
*	O
arg_val_ptr	pointer
,	O
INT	O
*	O
arg_val_int	pointer
,	O
INT	O
nargs	int
)	O
{	O
int	O
i	int
;	O
ArgList	struct
args	pointer
=	O
(	O
ArgList	pointer
)	O
alloca	function
(	O
nargs	int
*	O
sizeof	O
(	O
Arg	struct
)	O
)	O
;	O
if	O
(	O
!	O
args	pointer
)	O
fprintf	function
(	O
stderr	pointer
,	O
"C_XT_WIDGET::Xt_CreateManagedWidget: "	pointer
"could not allocate memory\n"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
nargs	int
;	O
i	int
--	O
;	O
)	O
{	O
args	pointer
[	O
i	int
]	O
.	O
name	pointer
=	O
arg_name	array
[	O
i	int
]	O
;	O
args	array
[	O
i	int
]	O
.	O
value	int
=	O
(	O
arg_val_int	array
[	O
i	int
]	O
?	O
(	O
XtArgVal	pointer
)	O
arg_val_int	array
[	O
i	int
]	O
:	O
(	O
XtArgVal	pointer
)	O
arg_val_ptr	array
[	O
i	int
]	O
)	O
;	O
}	O
return	O
XtCreateManagedWidget	function
(	O
name	pointer
,	O
widget_class	int
,	O
parent	pointer
,	O
args	pointer
,	O
nargs	int
)	O
;	O
}	O
void	O
Xt_RealizeWidget	function
(	O
Widget	O
widget	O
)	O
{	O
XtRealizeWidget	function
(	O
widget	O
)	O
;	O
}	O
void	O
Xt_UnrealizeWidget	function
(	O
Widget	O
widget	O
)	O
{	O
XtUnrealizeWidget	function
(	O
widget	O
)	O
;	O
}	O
void	O
Xt_DestroyWidget	function
(	O
Widget	O
widget	O
)	O
{	O
XtDestroyWidget	function
(	O
widget	O
)	O
;	O
}	O
void	O
C_XT_WIDGET_Xt_HandleCallback	function
(	O
Widget	O
widget	O
,	O
INT	O
callback	pointer
,	O
EXT_OB	pointer
call_data	pointer
)	O
;	O
void	O
XtHandleCallback	function
(	O
Widget	O
widget	O
,	O
XtPointer	pointer
closure	pointer
,	O
XtPointer	pointer
call_data	pointer
)	O
{	O
C_XT_WIDGET_Xt_HandleCallback	function
(	O
widget	O
,	O
(	O
INT	O
)	O
closure	O
,	O
call_data	pointer
)	O
;	O
}	O
void	O
Xt_AddCallback	function
(	O
Widget	O
widget	O
,	O
CHAR	O
*	O
name	pointer
,	O
INT	O
callback	int
)	O
{	O
XtAddCallback	function
(	O
widget	O
,	O
name	pointer
,	O
XtHandleCallback	int
,	O
(	O
XtPointer	pointer
)	O
callback	pointer
)	O
;	O
}	O