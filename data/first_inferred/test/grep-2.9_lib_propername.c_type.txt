static	O
bool	bool
mbsstr_trimmed_wordbounded	bool
(	O
const	O
char	O
*	O
string	*
,	O
const	O
char	O
*	O
sub	*
)	O
{	O
char	O
*	O
tsub	*
=	O
trim	O
(	O
sub	*
)	O
;	O
bool	bool
found	bool
=	O
false	int
;	O
for	O
(	O
;	O
*	O
string	*
!=	O
'\0'	O
;	O
)	O
{	O
const	O
char	O
*	O
tsub_in_string	*
=	O
mbsstr	function
(	O
string	*
,	O
tsub	*
)	O
;	O
if	O
(	O
tsub_in_string	*
==	O
NULL	O
)	O
break	O
;	O
else	O
{	O
if	O
(	O
MB_CUR_MAX	O
>	O
1	int
)	O
{	O
mbui_iterator_t	struct
string_iter	struct
;	O
bool	bool
word_boundary_before	bool
;	O
bool	bool
word_boundary_after	bool
;	O
mbui_init	O
(	O
string_iter	struct
,	O
string	*
)	O
;	O
word_boundary_before	bool
=	O
true	int
;	O
if	O
(	O
mbui_cur_ptr	O
(	O
string_iter	struct
)	O
<	O
tsub_in_string	*
)	O
{	O
mbchar_t	struct
last_char_before_tsub	struct
;	O
do	O
{	O
if	O
(	O
!	O
mbui_avail	O
(	O
string_iter	struct
)	O
)	O
abort	function
(	O
)	O
;	O
last_char_before_tsub	struct
=	O
mbui_cur	O
(	O
string_iter	struct
)	O
;	O
mbui_advance	O
(	O
string_iter	struct
)	O
;	O
}	O
while	O
(	O
mbui_cur_ptr	O
(	O
string_iter	struct
)	O
<	O
tsub_in_string	*
)	O
;	O
if	O
(	O
mb_isalnum	O
(	O
last_char_before_tsub	struct
)	O
)	O
word_boundary_before	bool
=	O
false	int
;	O
}	O
mbui_init	O
(	O
string_iter	struct
,	O
tsub_in_string	*
)	O
;	O
{	O
mbui_iterator_t	struct
tsub_iter	struct
;	O
for	O
(	O
mbui_init	O
(	O
tsub_iter	struct
,	O
tsub	*
)	O
;	O
mbui_avail	O
(	O
tsub_iter	struct
)	O
;	O
mbui_advance	O
(	O
tsub_iter	struct
)	O
)	O
{	O
if	O
(	O
!	O
mbui_avail	O
(	O
string_iter	struct
)	O
)	O
abort	function
(	O
)	O
;	O
mbui_advance	O
(	O
string_iter	struct
)	O
;	O
}	O
}	O
word_boundary_after	bool
=	O
true	int
;	O
if	O
(	O
mbui_avail	O
(	O
string_iter	struct
)	O
)	O
{	O
mbchar_t	struct
first_char_after_tsub	struct
=	O
mbui_cur	O
(	O
string_iter	struct
)	O
;	O
if	O
(	O
mb_isalnum	O
(	O
first_char_after_tsub	struct
)	O
)	O
word_boundary_after	bool
=	O
false	int
;	O
}	O
if	O
(	O
word_boundary_before	bool
&&	O
word_boundary_after	bool
)	O
{	O
found	bool
=	O
true	int
;	O
break	O
;	O
}	O
mbui_init	O
(	O
string_iter	struct
,	O
tsub_in_string	*
)	O
;	O
if	O
(	O
!	O
mbui_avail	O
(	O
string_iter	struct
)	O
)	O
break	O
;	O
string	*
=	O
tsub_in_string	*
+	O
mb_len	O
(	O
mbui_cur	O
(	O
string_iter	struct
)	O
)	O
;	O
}	O
else	O
{	O
bool	bool
word_boundary_before	bool
;	O
const	O
char	O
*	O
p	*
;	O
bool	bool
word_boundary_after	bool
;	O
word_boundary_before	bool
=	O
true	int
;	O
if	O
(	O
string	*
<	O
tsub_in_string	*
)	O
if	O
(	O
isalnum	function
(	O
(	O
unsigned	O
char	O
)	O
tsub_in_string	*
[	O
-	O
1	int
]	O
)	O
)	O
word_boundary_before	bool
=	O
false	int
;	O
p	*
=	O
tsub_in_string	*
+	O
strlen	function
(	O
tsub	*
)	O
;	O
word_boundary_after	bool
=	O
true	int
;	O
if	O
(	O
*	O
p	*
!=	O
'\0'	O
)	O
if	O
(	O
isalnum	function
(	O
(	O
unsigned	O
char	O
)	O
*	O
p	*
)	O
)	O
word_boundary_after	bool
=	O
false	int
;	O
if	O
(	O
word_boundary_before	bool
&&	O
word_boundary_after	bool
)	O
{	O
found	bool
=	O
true	int
;	O
break	O
;	O
}	O
if	O
(	O
*	O
tsub_in_string	*
==	O
'\0'	O
)	O
break	O
;	O
string	*
=	O
tsub_in_string	*
+	O
1	int
;	O
}	O
}	O
}	O
free	function
(	O
tsub	*
)	O
;	O
return	O
found	enum
;	O
}	O
const	O
char	O
*	O
proper_name	function
(	O
const	O
char	O
*	O
name	*
)	O
{	O
const	O
char	O
*	O
translation	*
=	O
gettext	function
(	O
name	*
)	O
;	O
if	O
(	O
translation	*
!=	O
name	*
)	O
{	O
if	O
(	O
mbsstr_trimmed_wordbounded	function
(	O
translation	*
,	O
name	*
)	O
)	O
return	O
translation	*
;	O
else	O
{	O
char	O
*	O
result	*
=	O
XNMALLOC	O
(	O
strlen	function
(	O
translation	*
)	O
+	O
2	int
+	O
strlen	function
(	O
name	*
)	O
+	O
1	int
+	O
1	int
,	O
char	O
)	O
;	O
sprintf	function
(	O
result	*
,	O
"%s (%s)"	*
,	O
translation	*
,	O
name	*
)	O
;	O
return	O
result	*
;	O
}	O
}	O
else	O
return	O
name	*
;	O
}	O
const	O
char	O
*	O
proper_name_utf8	function
(	O
const	O
char	O
*	O
name_ascii	*
,	O
const	O
char	O
*	O
name_utf8	*
)	O
{	O
const	O
char	O
*	O
translation	*
=	O
gettext	function
(	O
name_ascii	*
)	O
;	O
const	O
char	O
*	O
locale_code	*
=	O
locale_charset	function
(	O
)	O
;	O
char	O
*	O
alloc_name_converted	*
=	O
NULL	O
;	O
char	O
*	O
alloc_name_converted_translit	*
=	O
NULL	O
;	O
const	O
char	O
*	O
name_converted	*
=	O
NULL	O
;	O
const	O
char	O
*	O
name_converted_translit	*
=	O
NULL	O
;	O
const	O
char	O
*	O
name	*
;	O
if	O
(	O
c_strcasecmp	function
(	O
locale_code	*
,	O
"UTF-8"	*
)	O
!=	O
0	int
)	O
{	O
name_converted	*
=	O
alloc_name_converted	*
=	O
xstr_iconv	function
(	O
name_utf8	*
,	O
"UTF-8"	*
,	O
locale_code	*
)	O
;	O
{	O
char	O
*	O
converted_translit	*
;	O
size_t	long
len	long
=	O
strlen	function
(	O
locale_code	*
)	O
;	O
char	O
*	O
locale_code_translit	*
=	O
XNMALLOC	O
(	O
len	long
+	O
10	int
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	function
(	O
locale_code_translit	*
,	O
locale_code	*
,	O
len	long
)	O
;	O
memcpy	function
(	O
locale_code_translit	*
+	O
len	long
,	O
"//TRANSLIT"	*
,	O
10	int
+	O
1	int
)	O
;	O
converted_translit	*
=	O
xstr_iconv	function
(	O
name_utf8	*
,	O
"UTF-8"	*
,	O
locale_code_translit	*
)	O
;	O
free	function
(	O
locale_code_translit	*
)	O
;	O
if	O
(	O
converted_translit	*
!=	O
NULL	O
)	O
{	O
if	O
(	O
strchr	function
(	O
converted_translit	*
,	O
'?'	O
)	O
!=	O
NULL	O
)	O
free	function
(	O
converted_translit	*
)	O
;	O
else	O
name_converted_translit	*
=	O
alloc_name_converted_translit	*
=	O
converted_translit	*
;	O
}	O
}	O
}	O
else	O
{	O
name_converted	*
=	O
name_utf8	*
;	O
name_converted_translit	*
=	O
name_utf8	*
;	O
}	O
name	*
=	O
(	O
name_converted	*
!=	O
NULL	O
?	O
name_converted	*
:	O
name_converted_translit	*
!=	O
NULL	O
?	O
name_converted_translit	*
:	O
name_ascii	*
)	O
;	O
if	O
(	O
strcmp	function
(	O
translation	*
,	O
name_ascii	*
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
mbsstr_trimmed_wordbounded	function
(	O
translation	*
,	O
name_ascii	*
)	O
||	O
(	O
name_converted	*
!=	O
NULL	O
&&	O
mbsstr_trimmed_wordbounded	function
(	O
translation	*
,	O
name_converted	*
)	O
)	O
||	O
(	O
name_converted_translit	*
!=	O
NULL	O
&&	O
mbsstr_trimmed_wordbounded	function
(	O
translation	*
,	O
name_converted_translit	*
)	O
)	O
)	O
{	O
if	O
(	O
alloc_name_converted	*
!=	O
NULL	O
)	O
free	function
(	O
alloc_name_converted	*
)	O
;	O
if	O
(	O
alloc_name_converted_translit	*
!=	O
NULL	O
)	O
free	function
(	O
alloc_name_converted_translit	*
)	O
;	O
return	O
translation	*
;	O
}	O
else	O
{	O
char	O
*	O
result	*
=	O
XNMALLOC	O
(	O
strlen	function
(	O
translation	*
)	O
+	O
2	int
+	O
strlen	function
(	O
name	*
)	O
+	O
1	int
+	O
1	int
,	O
char	O
)	O
;	O
sprintf	function
(	O
result	*
,	O
"%s (%s)"	*
,	O
translation	*
,	O
name	*
)	O
;	O
if	O
(	O
alloc_name_converted	*
!=	O
NULL	O
)	O
free	function
(	O
alloc_name_converted	*
)	O
;	O
if	O
(	O
alloc_name_converted_translit	*
!=	O
NULL	O
)	O
free	function
(	O
alloc_name_converted_translit	*
)	O
;	O
return	O
result	*
;	O
}	O
}	O
else	O
{	O
if	O
(	O
alloc_name_converted	*
!=	O
NULL	O
&&	O
alloc_name_converted	*
!=	O
name	*
)	O
free	function
(	O
alloc_name_converted	*
)	O
;	O
if	O
(	O
alloc_name_converted_translit	*
!=	O
NULL	O
&&	O
alloc_name_converted_translit	*
!=	O
name	*
)	O
free	function
(	O
alloc_name_converted_translit	*
)	O
;	O
return	O
name	*
;	O
}	O
}	O