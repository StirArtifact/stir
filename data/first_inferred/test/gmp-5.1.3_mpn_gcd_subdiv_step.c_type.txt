mp_size_t	long
mpn_gcd_subdiv_step	O
(	O
mp_ptr	*
ap	*
,	O
mp_ptr	*
bp	*
,	O
mp_size_t	long
n	long
,	O
mp_size_t	long
s	array
,	O
gcd_subdiv_step_hook	struct
*	O
hook	*
,	O
void	O
*	O
ctx	*
,	O
mp_ptr	*
tp	*
)	O
{	O
static	O
const	O
mp_limb_t	long
one	long
=	O
CNST_LIMB	O
(	O
1	int
)	O
;	O
mp_size_t	long
an	long
,	O
bn	long
,	O
qn	long
;	O
int	O
swapped	int
;	O
ASSERT	O
(	O
n	long
>	O
0	int
)	O
;	O
ASSERT	O
(	O
ap	*
[	O
n	long
-	O
1	int
]	O
>	O
0	int
||	O
bp	*
[	O
n	long
-	O
1	int
]	O
>	O
0	int
)	O
;	O
an	long
=	O
bn	long
=	O
n	long
;	O
MPN_NORMALIZE	O
(	O
ap	*
,	O
an	long
)	O
;	O
MPN_NORMALIZE	O
(	O
bp	*
,	O
bn	long
)	O
;	O
swapped	int
=	O
0	int
;	O
if	O
(	O
an	long
==	O
bn	long
)	O
{	O
int	O
c	int
;	O
MPN_CMP	O
(	O
c	int
,	O
ap	*
,	O
bp	*
,	O
an	long
)	O
;	O
if	O
(	O
UNLIKELY	O
(	O
c	int
==	O
0	int
)	O
)	O
{	O
if	O
(	O
s	long
==	O
0	int
)	O
hook	*
(	O
ctx	*
,	O
ap	*
,	O
an	long
,	O
NULL	O
,	O
0	int
,	O
-	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
c	int
>	O
0	int
)	O
{	O
MP_PTR_SWAP	O
(	O
ap	*
,	O
bp	*
)	O
;	O
swapped	int
^=	O
1	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
an	long
>	O
bn	long
)	O
{	O
MPN_PTR_SWAP	O
(	O
ap	*
,	O
an	long
,	O
bp	*
,	O
bn	long
)	O
;	O
swapped	int
^=	O
1	int
;	O
}	O
}	O
if	O
(	O
an	long
<=	O
s	array
)	O
{	O
if	O
(	O
s	long
==	O
0	int
)	O
hook	*
(	O
ctx	*
,	O
bp	*
,	O
bn	long
,	O
NULL	O
,	O
0	int
,	O
swapped	int
^	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
ASSERT_NOCARRY	O
(	O
mpn_sub	O
(	O
bp	*
,	O
bp	*
,	O
bn	long
,	O
ap	*
,	O
an	long
)	O
)	O
;	O
MPN_NORMALIZE	O
(	O
bp	*
,	O
bn	long
)	O
;	O
ASSERT	O
(	O
bn	long
>	O
0	int
)	O
;	O
if	O
(	O
bn	long
<=	O
s	array
)	O
{	O
mp_limb_t	long
cy	long
=	O
mpn_add	O
(	O
bp	*
,	O
ap	*
,	O
an	long
,	O
bp	*
,	O
bn	long
)	O
;	O
if	O
(	O
cy	long
>	O
0	int
)	O
bp	*
[	O
an	long
]	O
=	O
cy	long
;	O
return	O
0	int
;	O
}	O
if	O
(	O
an	long
==	O
bn	long
)	O
{	O
int	O
c	int
;	O
MPN_CMP	O
(	O
c	int
,	O
ap	*
,	O
bp	*
,	O
an	long
)	O
;	O
if	O
(	O
UNLIKELY	O
(	O
c	int
==	O
0	int
)	O
)	O
{	O
if	O
(	O
s	long
>	O
0	int
)	O
hook	*
(	O
ctx	*
,	O
NULL	O
,	O
0	int
,	O
&	O
one	function
,	O
1	int
,	O
swapped	int
)	O
;	O
else	O
hook	*
(	O
ctx	*
,	O
bp	*
,	O
bn	long
,	O
NULL	O
,	O
0	int
,	O
swapped	int
)	O
;	O
return	O
0	int
;	O
}	O
hook	*
(	O
ctx	*
,	O
NULL	O
,	O
0	int
,	O
&	O
one	function
,	O
1	int
,	O
swapped	int
)	O
;	O
if	O
(	O
c	int
>	O
0	int
)	O
{	O
MP_PTR_SWAP	O
(	O
ap	*
,	O
bp	*
)	O
;	O
swapped	int
^=	O
1	int
;	O
}	O
}	O
else	O
{	O
hook	*
(	O
ctx	*
,	O
NULL	O
,	O
0	int
,	O
&	O
one	function
,	O
1	int
,	O
swapped	int
)	O
;	O
if	O
(	O
an	long
>	O
bn	long
)	O
{	O
MPN_PTR_SWAP	O
(	O
ap	*
,	O
an	long
,	O
bp	*
,	O
bn	long
)	O
;	O
swapped	int
^=	O
1	int
;	O
}	O
}	O
mpn_tdiv_qr	O
(	O
tp	*
,	O
bp	*
,	O
0	int
,	O
bp	*
,	O
bn	long
,	O
ap	*
,	O
an	long
)	O
;	O
qn	long
=	O
bn	long
-	O
an	long
+	O
1	int
;	O
bn	long
=	O
an	long
;	O
MPN_NORMALIZE	O
(	O
bp	*
,	O
bn	long
)	O
;	O
if	O
(	O
UNLIKELY	O
(	O
bn	long
<=	O
s	array
)	O
)	O
{	O
if	O
(	O
s	long
==	O
0	int
)	O
{	O
hook	*
(	O
ctx	*
,	O
ap	*
,	O
an	long
,	O
tp	*
,	O
qn	long
,	O
swapped	int
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
bn	long
>	O
0	int
)	O
{	O
mp_limb_t	long
cy	long
=	O
mpn_add	O
(	O
bp	*
,	O
ap	*
,	O
an	long
,	O
bp	*
,	O
bn	long
)	O
;	O
if	O
(	O
cy	long
)	O
bp	*
[	O
an	long
++	O
]	O
=	O
cy	long
;	O
}	O
else	O
MPN_COPY	O
(	O
bp	*
,	O
ap	*
,	O
an	long
)	O
;	O
MPN_DECR_U	O
(	O
tp	*
,	O
qn	long
,	O
1	int
)	O
;	O
}	O
hook	*
(	O
ctx	*
,	O
NULL	O
,	O
0	int
,	O
tp	*
,	O
qn	long
,	O
swapped	int
)	O
;	O
return	O
an	long
;	O
}	O