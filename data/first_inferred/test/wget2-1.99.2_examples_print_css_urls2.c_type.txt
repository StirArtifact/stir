struct	O
css_context	struct
{	O
wget_iri	struct
*	O
base	*
;	O
const	O
char	O
*	O
encoding	*
;	O
wget_buffer	struct
uri_buf	*
;	O
char	O
encoding_allocated	char
;	O
}	O
;	O
static	O
void	O
WGET_GCC_NORETURN	function
usage	function
(	O
const	O
char	O
*	O
myname	*
)	O
{	O
error_printf_exit	O
(	O
"\nUsage: %s [options] file...\n"	*
"  --base <URI>          Default base for relative URIs, default: http://www.example.com\n"	*
"  --encoding <Encoding> Default file character encoding, default: iso-8859-1\n"	*
"\n"	*
"  Examples:\n"	*
"    %s --base http://www.mydomain.com x.css\n"	*
"    cat x.css | %s --base http://www.mydomain.com -\n"	*
"\n"	*
"  Print URIs as found (without a base):\n"	*
"    %s --base \"\" x.css\n\n"	*
,	O
myname	int
,	O
myname	int
,	O
myname	int
,	O
myname	int
)	O
;	O
}	O
static	O
void	O
css_parse_encoding	function
(	O
void	O
*	O
context	*
,	O
const	O
char	O
*	O
encoding	*
,	O
size_t	long
len	long
)	O
{	O
struct	O
css_context	struct
*	O
ctx	*
=	O
context	*
;	O
if	O
(	O
!	O
ctx	*
->	O
encoding_allocated	*
&&	O
wget_strncasecmp_ascii	function
(	O
ctx	*
->	O
encoding	*
,	O
encoding	*
,	O
len	long
)	O
)	O
{	O
if	O
(	O
ctx	*
->	O
encoding	*
)	O
info_printf	function
(	O
"Encoding changed from '%s' to '%.*s'\n"	*
,	O
ctx	*
->	O
encoding	*
,	O
(	O
int	O
)	O
len	int
,	O
encoding	*
)	O
;	O
else	O
info_printf	function
(	O
"Encoding set to '%.*s'\n"	*
,	O
(	O
int	O
)	O
len	int
,	O
encoding	*
)	O
;	O
ctx	*
->	O
encoding	*
=	O
wget_strmemdup	function
(	O
encoding	*
,	O
len	long
)	O
;	O
ctx	*
->	O
encoding_allocated	int
=	O
1	int
;	O
}	O
}	O
static	O
void	O
css_parse_uri	function
(	O
void	O
*	O
context	*
,	O
const	O
char	O
*	O
url	*
,	O
size_t	long
len	long
,	O
size_t	long
pos	int
WGET_GCC_UNUSED	O
)	O
{	O
struct	O
css_context	struct
*	O
ctx	*
=	O
context	*
;	O
if	O
(	O
!	O
ctx	*
->	O
base	*
)	O
{	O
wget_info_printf	function
(	O
"  %.*s\n"	*
,	O
(	O
int	O
)	O
len	long
,	O
url	*
)	O
;	O
}	O
else	O
if	O
(	O
wget_iri_relative_to_abs	function
(	O
ctx	*
->	O
base	*
,	O
url	*
,	O
len	long
,	O
&	O
ctx	*
->	O
uri_buf	*
)	O
)	O
{	O
wget_info_printf	function
(	O
"  %.*s -> %s\n"	*
,	O
(	O
int	O
)	O
len	int
,	O
url	*
,	O
ctx	*
->	O
uri_buf	struct
.	O
data	*
)	O
;	O
}	O
else	O
{	O
error_printf	O
(	O
"Cannot resolve relative URI %.*s\n"	*
,	O
(	O
int	O
)	O
len	int
,	O
url	*
)	O
;	O
}	O
}	O
static	O
void	O
css_parse_localfile	function
(	O
const	O
char	O
*	O
fname	*
,	O
wget_iri	struct
*	O
base	*
,	O
const	O
char	O
*	O
encoding	*
)	O
{	O
struct	O
css_context	struct
context	*
=	O
{	O
.	O
base	*
=	O
base	*
,	O
.	O
encoding	*
=	O
encoding	*
}	O
;	O
wget_buffer_init	function
(	O
&	O
context	*
.	O
uri_buf	O
,	O
NULL	O
,	O
128	int
)	O
;	O
wget_css_parse_file	function
(	O
fname	*
,	O
css_parse_uri	*
,	O
css_parse_encoding	*
,	O
&	O
context	*
)	O
;	O
if	O
(	O
context	*
.	O
encoding_allocated	int
)	O
wget_xfree	O
(	O
context	*
.	O
encoding	*
)	O
;	O
wget_buffer_deinit	function
(	O
&	O
context	*
.	O
uri_buf	O
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
const	O
char	O
*	O
const	O
*	O
argv	*
)	O
{	O
const	O
char	O
*	O
base	*
=	O
"http://www.example.com"	*
;	O
const	O
char	O
*	O
local_encoding	*
=	O
wget_local_charset_encoding	function
(	O
)	O
;	O
wget_iri	struct
*	O
base_uri	*
;	O
const	O
char	O
*	O
css_encoding	*
=	O
NULL	O
;	O
int	O
argpos	int
;	O
wget_logger_set_stream	function
(	O
wget_get_logger	function
(	O
WGET_LOGGER_ERROR	int
)	O
,	O
stderr	*
)	O
;	O
wget_logger_set_stream	function
(	O
wget_get_logger	function
(	O
WGET_LOGGER_INFO	int
)	O
,	O
stdout	*
)	O
;	O
for	O
(	O
argpos	int
=	O
1	int
;	O
argpos	int
<	O
argc	int
;	O
argpos	int
++	O
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
argv	*
[	O
argpos	int
]	O
,	O
"--base"	*
)	O
&&	O
argc	int
-	O
argpos	int
>	O
1	int
)	O
{	O
base	*
=	O
argv	*
[	O
++	O
argpos	int
]	O
;	O
info_printf	function
(	O
"Base URL encoding = '%s'\n"	*
,	O
local_encoding	*
)	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
argv	*
[	O
argpos	int
]	O
,	O
"--encoding"	*
)	O
&&	O
argc	int
-	O
argpos	int
>	O
1	int
)	O
{	O
css_encoding	*
=	O
argv	*
[	O
++	O
argpos	int
]	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
argv	*
[	O
argpos	int
]	O
,	O
"--"	*
)	O
)	O
{	O
argpos	int
++	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
argv	*
[	O
argpos	int
]	O
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
usage	function
(	O
argv	*
[	O
0	int
]	O
)	O
;	O
}	O
else	O
break	O
;	O
}	O
base_uri	int
=	O
wget_iri_parse	function
(	O
base	int
,	O
local_encoding	*
)	O
;	O
for	O
(	O
;	O
argpos	int
<	O
argc	int
;	O
argpos	int
++	O
)	O
{	O
css_parse_localfile	function
(	O
argv	*
[	O
argpos	int
]	O
,	O
base_uri	int
,	O
css_encoding	int
)	O
;	O
}	O
wget_iri_free	function
(	O
&	O
base_uri	*
)	O
;	O
return	O
0	int
;	O
}	O