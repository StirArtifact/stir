extern	O
char	O
*	O
ttymsg	function
(	O
struct	O
iovec	struct
*	O
iov	pointer
,	O
int	O
iovcnt	int
,	O
char	O
*	O
line	pointer
,	O
int	O
tmout	int
)	O
;	O
typedef	O
struct	O
{	O
int	O
ind	int
;	O
int	O
max_size	int
;	O
char	O
line	array
[	O
N_LINES	int
]	O
[	O
N_CHARS	int
]	O
;	O
int	O
size	int
[	O
N_LINES	int
]	O
;	O
char	O
buf	pointer
[	O
N_LINES	int
*	O
N_CHARS	pointer
+	O
3	int
]	O
;	O
}	O
LINE	pointer
;	O
static	O
void	O
init_line	function
(	O
LINE	struct
*	O
lp	pointer
)	O
{	O
memset	function
(	O
lp	pointer
,	O
0	int
,	O
sizeof	O
*	O
lp	pointer
)	O
;	O
}	O
static	O
void	O
format_line	function
(	O
LINE	struct
*	O
lp	pointer
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
int	O
i	int
=	O
lp	pointer
->	O
ind	long
;	O
if	O
(	O
lp	pointer
->	O
ind	long
>=	O
N_LINES	int
)	O
return	O
;	O
lp	pointer
->	O
ind	long
++	O
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
lp	pointer
->	O
size	array
[	O
i	int
]	O
=	O
vsnprintf	function
(	O
lp	pointer
->	O
line	array
[	O
i	int
]	O
,	O
sizeof	O
lp	pointer
->	O
line	array
[	O
i	int
]	O
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
lp	pointer
->	O
max_size	int
=	O
MAX	O
(	O
lp	pointer
->	O
max_size	int
,	O
lp	pointer
->	O
size	array
[	O
i	int
]	O
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
static	O
char	O
*	O
finish_line	function
(	O
LINE	struct
*	O
lp	pointer
)	O
{	O
int	O
i	int
;	O
char	O
*	O
p	pointer
;	O
p	pointer
=	O
lp	pointer
->	O
buf	pointer
;	O
*	O
p	pointer
++	O
=	O
'\a'	O
;	O
*	O
p	pointer
++	O
=	O
'\r'	O
;	O
*	O
p	pointer
++	O
=	O
'\n'	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
lp	pointer
->	O
ind	long
;	O
i	int
++	O
)	O
{	O
char	O
*	O
q	pointer
;	O
int	O
j	int
;	O
for	O
(	O
q	pointer
=	O
lp	pointer
->	O
line	array
[	O
i	int
]	O
;	O
*	O
q	pointer
;	O
q	pointer
++	O
)	O
*	O
p	pointer
++	O
=	O
*	O
q	pointer
;	O
for	O
(	O
j	int
=	O
lp	pointer
->	O
size	array
[	O
i	int
]	O
;	O
j	int
<	O
lp	pointer
->	O
max_size	int
+	O
2	int
;	O
j	int
++	O
)	O
*	O
p	pointer
++	O
=	O
' '	O
;	O
*	O
p	pointer
++	O
=	O
'\r'	O
;	O
*	O
p	pointer
++	O
=	O
'\n'	O
;	O
}	O
*	O
p	pointer
=	O
0	int
;	O
return	O
lp	pointer
->	O
buf	pointer
;	O
}	O
static	O
int	O
print_mesg	function
(	O
char	O
*	O
tty	pointer
,	O
CTL_MSG	struct
*	O
request	pointer
,	O
char	O
*	O
remote_machine	pointer
)	O
{	O
time_t	long
t	long
;	O
LINE	struct
ln	pointer
;	O
char	O
*	O
buf	pointer
;	O
struct	O
tm	struct
*	O
tm	struct
;	O
struct	O
iovec	struct
iovec	struct
;	O
char	O
*	O
cp	pointer
;	O
time	function
(	O
&	O
t	long
)	O
;	O
tm	struct
=	O
localtime	function
(	O
&	O
t	long
)	O
;	O
init_line	function
(	O
&	O
ln	struct
)	O
;	O
format_line	function
(	O
&	O
ln	struct
,	O
""	pointer
)	O
;	O
format_line	function
(	O
&	O
ln	struct
,	O
"Message from Talk_Daemon@%s at %d:%02d ..."	pointer
,	O
hostname	pointer
,	O
tm	struct
->	O
tm_hour	int
,	O
tm	struct
->	O
tm_min	int
)	O
;	O
format_line	function
(	O
&	O
ln	pointer
,	O
"talk: connection requested by %s@%s"	pointer
,	O
request	pointer
->	O
l_name	array
,	O
remote_machine	int
)	O
;	O
format_line	function
(	O
&	O
ln	pointer
,	O
"talk: respond with:  talk %s@%s"	pointer
,	O
request	pointer
->	O
l_name	array
,	O
remote_machine	int
)	O
;	O
format_line	function
(	O
&	O
ln	pointer
,	O
""	pointer
)	O
;	O
format_line	function
(	O
&	O
ln	pointer
,	O
""	pointer
)	O
;	O
buf	pointer
=	O
finish_line	function
(	O
&	O
ln	pointer
)	O
;	O
iovec	struct
.	O
iov_base	pointer
=	O
buf	pointer
;	O
iovec	struct
.	O
iov_len	long
=	O
strlen	function
(	O
buf	pointer
)	O
;	O
if	O
(	O
(	O
cp	pointer
=	O
ttymsg	function
(	O
&	O
iovec	int
,	O
1	int
,	O
tty	int
,	O
RING_WAIT	int
-	O
5	int
)	O
)	O
!=	O
NULL	O
)	O
{	O
syslog	function
(	O
LOG_CRIT	int
,	O
"%s"	pointer
,	O
cp	pointer
)	O
;	O
return	O
FAILED	int
;	O
}	O
return	O
SUCCESS	int
;	O
}	O
int	O
announce	function
(	O
CTL_MSG	struct
*	O
request	pointer
,	O
char	O
*	O
remote_machine	pointer
)	O
{	O
char	O
*	O
ttypath	pointer
;	O
int	O
len	int
;	O
struct	O
stat	struct
st	struct
;	O
int	O
rc	int
;	O
len	int
=	O
sizeof	O
(	O
PATH_DEV	O
)	O
+	O
strlen	function
(	O
request	pointer
->	O
r_tty	array
)	O
+	O
2	int
;	O
ttypath	pointer
=	O
malloc	function
(	O
len	int
)	O
;	O
if	O
(	O
!	O
ttypath	pointer
)	O
{	O
syslog	function
(	O
LOG_CRIT	int
,	O
"out of memory"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
sprintf	function
(	O
ttypath	pointer
,	O
"%s/%s"	pointer
,	O
PATH_DEV	O
,	O
request	pointer
->	O
r_tty	array
)	O
;	O
rc	int
=	O
stat	struct
(	O
ttypath	pointer
,	O
&	O
st	struct
)	O
;	O
free	function
(	O
ttypath	pointer
)	O
;	O
if	O
(	O
rc	int
<	O
0	int
||	O
(	O
st	struct
.	O
st_mode	int
&	O
S_IWGRP	O
)	O
==	O
0	int
)	O
return	O
PERMISSION_DENIED	int
;	O
return	O
print_mesg	function
(	O
request	pointer
->	O
r_tty	array
,	O
request	int
,	O
remote_machine	pointer
)	O
;	O
}	O