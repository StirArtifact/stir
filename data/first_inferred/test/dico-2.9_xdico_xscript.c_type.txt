struct	O
transcript_stream	struct
{	O
int	O
flags	int
;	O
dico_stream_t	*
transport	*
;	O
dico_stream_t	*
logstr	*
;	O
char	O
*	O
prefix	array
[	O
2	int
]	O
;	O
}	O
;	O
static	O
void	O
print_transcript	function
(	O
struct	O
transcript_stream	struct
*	O
str	*
,	O
int	O
flag	int
,	O
const	O
char	O
*	O
buf	*
,	O
size_t	long
size	long
)	O
{	O
while	O
(	O
size	long
)	O
{	O
const	O
char	O
*	O
p	*
;	O
size_t	long
len	long
;	O
if	O
(	O
str	*
->	O
flags	int
&	O
flag	int
)	O
{	O
dico_stream_write	function
(	O
str	*
->	O
logstr	*
,	O
str	*
->	O
prefix	array
[	O
FLAG_TO_PFX	function
(	O
flag	int
)	O
]	O
,	O
strlen	function
(	O
str	*
->	O
prefix	array
[	O
FLAG_TO_PFX	function
(	O
flag	int
)	O
]	O
)	O
)	O
;	O
str	*
->	O
flags	int
&=	O
~	O
flag	int
;	O
}	O
p	*
=	O
memchr	function
(	O
buf	*
,	O
'\n'	O
,	O
size	long
)	O
;	O
if	O
(	O
p	*
)	O
{	O
len	long
=	O
p	*
-	O
buf	*
;	O
if	O
(	O
p	*
>	O
buf	*
&&	O
p	*
[	O
-	O
1	int
]	O
==	O
'\r'	O
)	O
len	long
--	O
;	O
dico_stream_write	function
(	O
str	*
->	O
logstr	*
,	O
buf	*
,	O
len	long
)	O
;	O
dico_stream_write	function
(	O
str	*
->	O
logstr	*
,	O
"\n"	*
,	O
1	int
)	O
;	O
str	*
->	O
flags	int
|=	O
flag	int
;	O
len	int
=	O
p	*
-	O
buf	*
+	O
1	int
;	O
buf	*
=	O
p	*
+	O
1	int
;	O
size	long
-=	O
len	long
;	O
}	O
else	O
{	O
dico_stream_write	function
(	O
str	*
->	O
logstr	*
,	O
buf	*
,	O
size	long
)	O
;	O
break	O
;	O
}	O
}	O
}	O
static	O
int	O
transcript_read	function
(	O
void	O
*	O
data	*
,	O
char	O
*	O
buf	*
,	O
size_t	long
size	long
,	O
size_t	long
*	O
pret	*
)	O
{	O
struct	O
transcript_stream	struct
*	O
p	*
=	O
data	*
;	O
size_t	long
nbytes	long
;	O
if	O
(	O
dico_stream_read	function
(	O
p	*
->	O
transport	*
,	O
buf	*
,	O
size	long
,	O
&	O
nbytes	long
)	O
==	O
0	int
)	O
{	O
print_transcript	function
(	O
p	*
,	O
TRANS_READ	*
,	O
buf	*
,	O
nbytes	long
)	O
;	O
if	O
(	O
pret	*
)	O
*	O
pret	*
=	O
nbytes	long
;	O
}	O
else	O
return	O
dico_stream_last_error	function
(	O
p	*
->	O
transport	*
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
transcript_write	function
(	O
void	O
*	O
data	*
,	O
const	O
char	O
*	O
buf	*
,	O
size_t	long
size	long
,	O
size_t	long
*	O
pret	*
)	O
{	O
struct	O
transcript_stream	struct
*	O
p	*
=	O
data	*
;	O
if	O
(	O
dico_stream_write	function
(	O
p	*
->	O
transport	*
,	O
buf	*
,	O
size	long
)	O
==	O
0	int
)	O
{	O
print_transcript	function
(	O
p	*
,	O
TRANS_WRITE	*
,	O
buf	*
,	O
size	long
)	O
;	O
if	O
(	O
pret	*
)	O
*	O
pret	*
=	O
size	long
;	O
}	O
else	O
return	O
dico_stream_last_error	function
(	O
p	*
->	O
transport	*
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
transcript_flush	function
(	O
void	O
*	O
data	*
)	O
{	O
struct	O
transcript_stream	struct
*	O
p	*
=	O
data	*
;	O
if	O
(	O
!	O
p	*
->	O
transport	*
)	O
return	O
0	int
;	O
return	O
dico_stream_flush	function
(	O
p	*
->	O
transport	*
)	O
;	O
}	O
static	O
int	O
transcript_close	function
(	O
void	O
*	O
data	*
)	O
{	O
struct	O
transcript_stream	struct
*	O
p	*
=	O
data	*
;	O
dico_stream_close	function
(	O
p	*
->	O
logstr	*
)	O
;	O
dico_stream_close	function
(	O
p	*
->	O
transport	*
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
transcript_destroy	function
(	O
void	O
*	O
data	*
)	O
{	O
struct	O
transcript_stream	struct
*	O
p	*
=	O
data	*
;	O
free	function
(	O
p	*
->	O
prefix	array
[	O
0	int
]	O
)	O
;	O
free	function
(	O
p	*
->	O
prefix	array
[	O
1	int
]	O
)	O
;	O
dico_stream_destroy	function
(	O
&	O
p	*
->	O
transport	*
)	O
;	O
dico_stream_destroy	function
(	O
&	O
p	*
->	O
logstr	*
)	O
;	O
free	function
(	O
p	*
)	O
;	O
return	O
0	int
;	O
}	O
static	O
const	O
char	O
*	O
transcript_strerror	function
(	O
void	O
*	O
data	*
,	O
int	O
rc	int
)	O
{	O
struct	O
transcript_stream	struct
*	O
p	*
=	O
data	*
;	O
return	O
dico_stream_strerror	function
(	O
p	*
->	O
transport	*
,	O
rc	int
)	O
;	O
}	O
static	O
int	O
transcript_ioctl	function
(	O
void	O
*	O
data	*
,	O
int	O
code	int
,	O
void	O
*	O
call_data	*
)	O
{	O
struct	O
transcript_stream	struct
*	O
p	*
=	O
data	*
;	O
switch	O
(	O
code	int
)	O
{	O
case	O
DICO_IOCTL_GET_TRANSPORT	int
:	O
*	O
(	O
dico_stream_t	*
*	O
)	O
call_data	*
=	O
p	*
->	O
transport	*
;	O
break	O
;	O
case	O
DICO_IOCTL_SET_TRANSPORT	int
:	O
p	*
->	O
transport	*
=	O
call_data	*
;	O
break	O
;	O
case	O
DICO_IOCTL_BYTES_IN	int
:	O
*	O
(	O
off_t	long
*	O
)	O
call_data	*
=	O
dico_stream_bytes_in	function
(	O
p	*
->	O
transport	*
)	O
;	O
break	O
;	O
case	O
DICO_IOCTL_BYTES_OUT	int
:	O
*	O
(	O
off_t	long
*	O
)	O
call_data	*
=	O
dico_stream_bytes_out	function
(	O
p	*
->	O
transport	*
)	O
;	O
break	O
;	O
default	O
:	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
const	O
char	O
*	O
default_prefix	array
[	O
2	int
]	O
=	O
{	O
"C: "	*
,	O
"S: "	*
}	O
;	O
dico_stream_t	*
xdico_transcript_stream_create	function
(	O
dico_stream_t	*
transport	*
,	O
dico_stream_t	*
logstr	*
,	O
const	O
char	O
*	O
prefix	array
[	O
]	O
)	O
{	O
struct	O
transcript_stream	struct
*	O
p	*
=	O
xmalloc	function
(	O
sizeof	O
(	O
*	O
p	*
)	O
)	O
;	O
dico_stream_t	*
stream	*
;	O
int	O
rc	int
=	O
dico_stream_create	function
(	O
&	O
stream	*
,	O
DICO_STREAM_READ	int
|	O
DICO_STREAM_WRITE	int
,	O
p	*
)	O
;	O
if	O
(	O
rc	int
)	O
xalloc_die	function
(	O
)	O
;	O
p	*
->	O
flags	int
=	O
TRANS_READ	int
|	O
TRANS_WRITE	int
;	O
if	O
(	O
prefix	*
)	O
{	O
p	*
->	O
prefix	array
[	O
0	int
]	O
=	O
xstrdup	function
(	O
prefix	array
[	O
0	int
]	O
?	O
prefix	array
[	O
0	int
]	O
:	O
default_prefix	array
[	O
0	int
]	O
)	O
;	O
p	*
->	O
prefix	array
[	O
1	int
]	O
=	O
xstrdup	function
(	O
prefix	array
[	O
1	int
]	O
?	O
prefix	array
[	O
1	int
]	O
:	O
default_prefix	array
[	O
1	int
]	O
)	O
;	O
}	O
else	O
{	O
p	*
->	O
prefix	array
[	O
0	int
]	O
=	O
xstrdup	function
(	O
default_prefix	array
[	O
0	int
]	O
)	O
;	O
p	*
->	O
prefix	array
[	O
1	int
]	O
=	O
xstrdup	function
(	O
default_prefix	array
[	O
1	int
]	O
)	O
;	O
}	O
p	*
->	O
transport	*
=	O
transport	*
;	O
p	*
->	O
logstr	*
=	O
logstr	*
;	O
dico_stream_set_read	function
(	O
stream	*
,	O
transcript_read	*
)	O
;	O
dico_stream_set_write	function
(	O
stream	*
,	O
transcript_write	function
)	O
;	O
dico_stream_set_flush	function
(	O
stream	*
,	O
transcript_flush	function
)	O
;	O
dico_stream_set_close	function
(	O
stream	*
,	O
transcript_close	function
)	O
;	O
dico_stream_set_destroy	function
(	O
stream	*
,	O
transcript_destroy	function
)	O
;	O
dico_stream_set_ioctl	function
(	O
stream	*
,	O
transcript_ioctl	O
)	O
;	O
dico_stream_set_error_string	function
(	O
stream	O
,	O
transcript_strerror	function
)	O
;	O
dico_stream_set_buffer	function
(	O
stream	*
,	O
dico_buffer_line	int
,	O
1024	int
)	O
;	O
return	O
stream	int
;	O
}	O