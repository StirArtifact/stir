static	O
char	O
rcsid	array
[	O
]	O
=	O
"$Id: rpc_parse.c,v 1.1.1.1 2005/10/28 14:46:46 k0ro Exp $"	pointer
;	O
static	O
void	O
isdefined	function
(	O
)	O
;	O
static	O
void	O
def_struct	function
(	O
)	O
,	O
def_program	function
(	O
)	O
,	O
def_enum	function
(	O
)	O
,	O
def_const	function
(	O
)	O
,	O
def_union	function
(	O
)	O
,	O
def_typedef	function
(	O
)	O
,	O
get_declaration	function
(	O
)	O
,	O
get_type	function
(	O
)	O
,	O
unsigned_dec	function
(	O
)	O
;	O
definition	struct
*	O
get_definition	function
(	O
)	O
{	O
definition	struct
*	O
defp	pointer
;	O
token	struct
tok	struct
;	O
defp	pointer
=	O
ALLOC	O
(	O
definition	struct
)	O
;	O
get_token	function
(	O
&	O
tok	struct
)	O
;	O
switch	O
(	O
tok	struct
.	O
kind	enum
)	O
{	O
case	O
TOK_STRUCT	int
:	O
def_struct	function
(	O
defp	pointer
)	O
;	O
break	O
;	O
case	O
TOK_UNION	int
:	O
def_union	function
(	O
defp	pointer
)	O
;	O
break	O
;	O
case	O
TOK_TYPEDEF	int
:	O
def_typedef	function
(	O
defp	pointer
)	O
;	O
break	O
;	O
case	O
TOK_ENUM	int
:	O
def_enum	function
(	O
defp	pointer
)	O
;	O
break	O
;	O
case	O
TOK_PROGRAM	int
:	O
def_program	function
(	O
defp	pointer
)	O
;	O
break	O
;	O
case	O
TOK_CONST	int
:	O
def_const	function
(	O
defp	pointer
)	O
;	O
break	O
;	O
case	O
TOK_EOF	int
:	O
return	O
(	O
NULL	O
)	O
;	O
break	O
;	O
default	O
:	O
error	function
(	O
"definition keyword expected"	pointer
)	O
;	O
}	O
scan	function
(	O
TOK_SEMICOLON	int
,	O
&	O
tok	struct
)	O
;	O
isdefined	function
(	O
defp	pointer
)	O
;	O
return	O
(	O
defp	pointer
)	O
;	O
}	O
static	O
void	O
isdefined	function
(	O
defp	pointer
)	O
definition	struct
*	O
defp	pointer
;	O
{	O
STOREVAL	O
(	O
&	O
defined	pointer
,	O
defp	pointer
)	O
;	O
}	O
static	O
void	O
def_struct	function
(	O
defp	pointer
)	O
definition	struct
*	O
defp	pointer
;	O
{	O
token	struct
tok	struct
;	O
declaration	struct
dec	struct
;	O
decl_list	struct
*	O
decls	pointer
;	O
decl_list	struct
*	O
*	O
tailp	pointer
;	O
defp	pointer
->	O
def_kind	enum
=	O
DEF_STRUCT	int
;	O
scan	function
(	O
TOK_IDENT	int
,	O
&	O
tok	struct
)	O
;	O
defp	pointer
->	O
def_name	pointer
=	O
tok	struct
.	O
str	pointer
;	O
scan	function
(	O
TOK_LBRACE	int
,	O
&	O
tok	struct
)	O
;	O
tailp	pointer
=	O
&	O
defp	pointer
->	O
def	union
.	O
st	struct
.	O
decls	pointer
;	O
do	O
{	O
get_declaration	function
(	O
&	O
dec	struct
,	O
DEF_STRUCT	int
)	O
;	O
decls	pointer
=	O
ALLOC	O
(	O
decl_list	struct
)	O
;	O
decls	pointer
->	O
decl	struct
=	O
dec	struct
;	O
*	O
tailp	pointer
=	O
decls	pointer
;	O
tailp	pointer
=	O
&	O
decls	pointer
->	O
next	pointer
;	O
scan	function
(	O
TOK_SEMICOLON	int
,	O
&	O
tok	struct
)	O
;	O
peek	function
(	O
&	O
tok	struct
)	O
;	O
}	O
while	O
(	O
tok	struct
.	O
kind	enum
!=	O
TOK_RBRACE	int
)	O
;	O
get_token	function
(	O
&	O
tok	struct
)	O
;	O
*	O
tailp	pointer
=	O
NULL	O
;	O
}	O
static	O
void	O
def_program	function
(	O
defp	pointer
)	O
definition	struct
*	O
defp	pointer
;	O
{	O
token	struct
tok	struct
;	O
version_list	struct
*	O
vlist	pointer
;	O
version_list	struct
*	O
*	O
vtailp	pointer
;	O
proc_list	struct
*	O
plist	pointer
;	O
proc_list	struct
*	O
*	O
ptailp	pointer
;	O
int	O
dummy	int
;	O
defp	pointer
->	O
def_kind	enum
=	O
DEF_PROGRAM	int
;	O
scan	function
(	O
TOK_IDENT	int
,	O
&	O
tok	struct
)	O
;	O
defp	pointer
->	O
def_name	pointer
=	O
tok	struct
.	O
str	pointer
;	O
scan	function
(	O
TOK_LBRACE	int
,	O
&	O
tok	struct
)	O
;	O
vtailp	pointer
=	O
&	O
defp	pointer
->	O
def	union
.	O
pr	struct
.	O
versions	pointer
;	O
scan	function
(	O
TOK_VERSION	int
,	O
&	O
tok	struct
)	O
;	O
do	O
{	O
scan	function
(	O
TOK_IDENT	int
,	O
&	O
tok	struct
)	O
;	O
vlist	pointer
=	O
ALLOC	O
(	O
version_list	struct
)	O
;	O
vlist	pointer
->	O
vers_name	pointer
=	O
tok	struct
.	O
str	pointer
;	O
scan	function
(	O
TOK_LBRACE	int
,	O
&	O
tok	struct
)	O
;	O
ptailp	pointer
=	O
&	O
vlist	pointer
->	O
procs	pointer
;	O
do	O
{	O
plist	pointer
=	O
ALLOC	O
(	O
proc_list	struct
)	O
;	O
get_type	function
(	O
&	O
plist	pointer
->	O
res_prefix	pointer
,	O
&	O
plist	pointer
->	O
res_type	pointer
,	O
&	O
dummy	int
,	O
DEF_PROGRAM	int
)	O
;	O
if	O
(	O
streq	function
(	O
plist	pointer
->	O
res_type	pointer
,	O
"opaque"	pointer
)	O
)	O
{	O
error	function
(	O
"illegal result type"	pointer
)	O
;	O
}	O
scan	function
(	O
TOK_IDENT	int
,	O
&	O
tok	struct
)	O
;	O
plist	pointer
->	O
proc_name	pointer
=	O
tok	struct
.	O
str	pointer
;	O
scan	function
(	O
TOK_LPAREN	int
,	O
&	O
tok	struct
)	O
;	O
get_type	function
(	O
&	O
plist	pointer
->	O
arg_prefix	pointer
,	O
&	O
plist	pointer
->	O
arg_type	pointer
,	O
&	O
dummy	int
,	O
DEF_PROGRAM	int
)	O
;	O
if	O
(	O
streq	function
(	O
plist	pointer
->	O
arg_type	pointer
,	O
"opaque"	pointer
)	O
)	O
{	O
error	function
(	O
"illegal argument type"	pointer
)	O
;	O
}	O
scan	function
(	O
TOK_RPAREN	int
,	O
&	O
tok	struct
)	O
;	O
scan	function
(	O
TOK_EQUAL	int
,	O
&	O
tok	struct
)	O
;	O
scan_num	function
(	O
&	O
tok	struct
)	O
;	O
scan	function
(	O
TOK_SEMICOLON	int
,	O
&	O
tok	struct
)	O
;	O
plist	pointer
->	O
proc_num	pointer
=	O
tok	struct
.	O
str	pointer
;	O
*	O
ptailp	pointer
=	O
plist	pointer
;	O
ptailp	pointer
=	O
&	O
plist	pointer
->	O
next	pointer
;	O
peek	function
(	O
&	O
tok	struct
)	O
;	O
}	O
while	O
(	O
tok	struct
.	O
kind	enum
!=	O
TOK_RBRACE	int
)	O
;	O
*	O
vtailp	pointer
=	O
vlist	pointer
;	O
vtailp	pointer
=	O
&	O
vlist	pointer
->	O
next	pointer
;	O
scan	function
(	O
TOK_RBRACE	int
,	O
&	O
tok	struct
)	O
;	O
scan	function
(	O
TOK_EQUAL	int
,	O
&	O
tok	struct
)	O
;	O
scan_num	function
(	O
&	O
tok	struct
)	O
;	O
vlist	pointer
->	O
vers_num	pointer
=	O
tok	struct
.	O
str	pointer
;	O
scan	function
(	O
TOK_SEMICOLON	int
,	O
&	O
tok	struct
)	O
;	O
scan2	function
(	O
TOK_VERSION	int
,	O
TOK_RBRACE	int
,	O
&	O
tok	struct
)	O
;	O
}	O
while	O
(	O
tok	struct
.	O
kind	enum
==	O
TOK_VERSION	int
)	O
;	O
scan	function
(	O
TOK_EQUAL	int
,	O
&	O
tok	struct
)	O
;	O
scan_num	function
(	O
&	O
tok	struct
)	O
;	O
defp	pointer
->	O
def	union
.	O
pr	struct
.	O
prog_num	pointer
=	O
tok	struct
.	O
str	pointer
;	O
*	O
vtailp	pointer
=	O
NULL	O
;	O
}	O
static	O
void	O
def_enum	function
(	O
defp	pointer
)	O
definition	struct
*	O
defp	pointer
;	O
{	O
token	struct
tok	struct
;	O
enumval_list	struct
*	O
elist	pointer
;	O
enumval_list	struct
*	O
*	O
tailp	pointer
;	O
defp	pointer
->	O
def_kind	enum
=	O
DEF_ENUM	int
;	O
scan	function
(	O
TOK_IDENT	int
,	O
&	O
tok	struct
)	O
;	O
defp	pointer
->	O
def_name	pointer
=	O
tok	struct
.	O
str	pointer
;	O
scan	function
(	O
TOK_LBRACE	int
,	O
&	O
tok	struct
)	O
;	O
tailp	pointer
=	O
&	O
defp	pointer
->	O
def	union
.	O
en	struct
.	O
vals	pointer
;	O
do	O
{	O
scan	function
(	O
TOK_IDENT	int
,	O
&	O
tok	struct
)	O
;	O
elist	pointer
=	O
ALLOC	O
(	O
enumval_list	struct
)	O
;	O
elist	pointer
->	O
name	pointer
=	O
tok	struct
.	O
str	pointer
;	O
elist	pointer
->	O
assignment	pointer
=	O
NULL	O
;	O
scan3	function
(	O
TOK_COMMA	int
,	O
TOK_RBRACE	int
,	O
TOK_EQUAL	int
,	O
&	O
tok	struct
)	O
;	O
if	O
(	O
tok	struct
.	O
kind	enum
==	O
TOK_EQUAL	int
)	O
{	O
scan_num	function
(	O
&	O
tok	struct
)	O
;	O
elist	pointer
->	O
assignment	pointer
=	O
tok	struct
.	O
str	pointer
;	O
scan2	function
(	O
TOK_COMMA	int
,	O
TOK_RBRACE	int
,	O
&	O
tok	struct
)	O
;	O
}	O
*	O
tailp	pointer
=	O
elist	pointer
;	O
tailp	pointer
=	O
&	O
elist	pointer
->	O
next	pointer
;	O
}	O
while	O
(	O
tok	struct
.	O
kind	enum
!=	O
TOK_RBRACE	int
)	O
;	O
*	O
tailp	pointer
=	O
NULL	O
;	O
}	O
static	O
void	O
def_const	function
(	O
defp	pointer
)	O
definition	struct
*	O
defp	pointer
;	O
{	O
token	struct
tok	struct
;	O
defp	pointer
->	O
def_kind	enum
=	O
DEF_CONST	int
;	O
scan	function
(	O
TOK_IDENT	int
,	O
&	O
tok	struct
)	O
;	O
defp	pointer
->	O
def_name	pointer
=	O
tok	struct
.	O
str	pointer
;	O
scan	function
(	O
TOK_EQUAL	int
,	O
&	O
tok	struct
)	O
;	O
scan2	function
(	O
TOK_IDENT	int
,	O
TOK_STRCONST	int
,	O
&	O
tok	struct
)	O
;	O
defp	pointer
->	O
def	union
.	O
co	pointer
=	O
tok	struct
.	O
str	pointer
;	O
}	O
static	O
void	O
def_union	function
(	O
defp	pointer
)	O
definition	struct
*	O
defp	pointer
;	O
{	O
token	struct
tok	struct
;	O
declaration	struct
dec	struct
;	O
case_list	struct
*	O
cases	pointer
;	O
case_list	struct
*	O
*	O
tailp	pointer
;	O
defp	pointer
->	O
def_kind	enum
=	O
DEF_UNION	int
;	O
scan	function
(	O
TOK_IDENT	int
,	O
&	O
tok	struct
)	O
;	O
defp	pointer
->	O
def_name	pointer
=	O
tok	struct
.	O
str	pointer
;	O
scan	function
(	O
TOK_SWITCH	int
,	O
&	O
tok	struct
)	O
;	O
scan	function
(	O
TOK_LPAREN	int
,	O
&	O
tok	struct
)	O
;	O
get_declaration	function
(	O
&	O
dec	struct
,	O
DEF_UNION	int
)	O
;	O
defp	pointer
->	O
def	union
.	O
un	struct
.	O
enum_decl	struct
=	O
dec	struct
;	O
tailp	pointer
=	O
&	O
defp	pointer
->	O
def	union
.	O
un	struct
.	O
cases	pointer
;	O
scan	function
(	O
TOK_RPAREN	int
,	O
&	O
tok	struct
)	O
;	O
scan	function
(	O
TOK_LBRACE	int
,	O
&	O
tok	struct
)	O
;	O
scan	function
(	O
TOK_CASE	int
,	O
&	O
tok	struct
)	O
;	O
while	O
(	O
tok	struct
.	O
kind	enum
==	O
TOK_CASE	int
)	O
{	O
scan	function
(	O
TOK_IDENT	int
,	O
&	O
tok	struct
)	O
;	O
cases	pointer
=	O
ALLOC	O
(	O
case_list	struct
)	O
;	O
cases	pointer
->	O
case_name	pointer
=	O
tok	struct
.	O
str	pointer
;	O
scan	function
(	O
TOK_COLON	int
,	O
&	O
tok	struct
)	O
;	O
get_declaration	function
(	O
&	O
dec	struct
,	O
DEF_UNION	int
)	O
;	O
cases	pointer
->	O
case_decl	struct
=	O
dec	struct
;	O
*	O
tailp	pointer
=	O
cases	pointer
;	O
tailp	pointer
=	O
&	O
cases	pointer
->	O
next	pointer
;	O
scan	function
(	O
TOK_SEMICOLON	int
,	O
&	O
tok	struct
)	O
;	O
scan3	function
(	O
TOK_CASE	int
,	O
TOK_DEFAULT	int
,	O
TOK_RBRACE	int
,	O
&	O
tok	struct
)	O
;	O
}	O
*	O
tailp	pointer
=	O
NULL	O
;	O
if	O
(	O
tok	struct
.	O
kind	enum
==	O
TOK_DEFAULT	int
)	O
{	O
scan	function
(	O
TOK_COLON	int
,	O
&	O
tok	struct
)	O
;	O
get_declaration	function
(	O
&	O
dec	struct
,	O
DEF_UNION	int
)	O
;	O
defp	pointer
->	O
def	union
.	O
un	struct
.	O
default_decl	pointer
=	O
ALLOC	O
(	O
declaration	struct
)	O
;	O
*	O
defp	pointer
->	O
def	union
.	O
un	struct
.	O
default_decl	pointer
=	O
dec	struct
;	O
scan	function
(	O
TOK_SEMICOLON	int
,	O
&	O
tok	struct
)	O
;	O
scan	function
(	O
TOK_RBRACE	int
,	O
&	O
tok	struct
)	O
;	O
}	O
else	O
{	O
defp	pointer
->	O
def	union
.	O
un	struct
.	O
default_decl	pointer
=	O
NULL	O
;	O
}	O
}	O
static	O
void	O
def_typedef	function
(	O
defp	pointer
)	O
definition	struct
*	O
defp	pointer
;	O
{	O
declaration	struct
dec	struct
;	O
defp	pointer
->	O
def_kind	enum
=	O
DEF_TYPEDEF	int
;	O
get_declaration	function
(	O
&	O
dec	struct
,	O
DEF_TYPEDEF	int
)	O
;	O
defp	pointer
->	O
def_name	pointer
=	O
dec	struct
.	O
name	pointer
;	O
defp	pointer
->	O
def	union
.	O
ty	struct
.	O
old_prefix	pointer
=	O
dec	struct
.	O
prefix	pointer
;	O
defp	pointer
->	O
def	union
.	O
ty	struct
.	O
old_type	pointer
=	O
dec	struct
.	O
type	pointer
;	O
defp	pointer
->	O
def	union
.	O
ty	struct
.	O
old_storage	int
=	O
dec	struct
.	O
storage	int
;	O
strncpy	O
(	O
defp	pointer
->	O
def	union
.	O
ty	struct
.	O
old_pstorage	array
,	O
dec	struct
.	O
pstorage	array
,	O
128	int
)	O
;	O
defp	pointer
->	O
def	union
.	O
ty	struct
.	O
rel	enum
=	O
dec	struct
.	O
rel	enum
;	O
defp	pointer
->	O
def	union
.	O
ty	struct
.	O
array_max	pointer
=	O
dec	struct
.	O
array_max	pointer
;	O
}	O
static	O
void	O
get_declaration	function
(	O
dec	struct
,	O
dkind	enum
)	O
declaration	struct
*	O
dec	struct
;	O
defkind	enum
dkind	enum
;	O
{	O
token	struct
tok	struct
;	O
int	O
count	int
;	O
get_type	function
(	O
&	O
dec	struct
->	O
prefix	pointer
,	O
&	O
dec	struct
->	O
type	pointer
,	O
&	O
dec	struct
->	O
storage	int
,	O
dkind	enum
)	O
;	O
dec	struct
->	O
rel	enum
=	O
REL_ALIAS	int
;	O
dec	struct
->	O
pstorage	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
streq	function
(	O
dec	struct
->	O
type	pointer
,	O
"void"	pointer
)	O
)	O
{	O
return	O
;	O
}	O
scan2	function
(	O
TOK_STAR	int
,	O
TOK_IDENT	int
,	O
&	O
tok	struct
)	O
;	O
if	O
(	O
tok	struct
.	O
kind	enum
==	O
TOK_STAR	int
)	O
{	O
dec	struct
->	O
rel	enum
=	O
REL_POINTER	int
;	O
scan	function
(	O
TOK_IDENT	int
,	O
&	O
tok	struct
)	O
;	O
}	O
dec	struct
->	O
name	pointer
=	O
tok	struct
.	O
str	pointer
;	O
if	O
(	O
peekscan	function
(	O
TOK_LBRACKET	int
,	O
&	O
tok	struct
)	O
)	O
{	O
if	O
(	O
dec	struct
->	O
rel	enum
==	O
REL_POINTER	int
)	O
{	O
error	function
(	O
"no array-of-pointer declarations -- use typedef"	pointer
)	O
;	O
}	O
dec	struct
->	O
rel	enum
=	O
REL_VECTOR	int
;	O
scan_num	function
(	O
&	O
tok	struct
)	O
;	O
if	O
(	O
isdigit	function
(	O
*	O
tok	struct
.	O
str	pointer
)	O
)	O
{	O
dec	struct
->	O
rel	enum
=	O
REL_VECTOR	int
;	O
count	int
=	O
atoi	function
(	O
tok	struct
.	O
str	pointer
)	O
;	O
dec	struct
->	O
storage	int
*=	O
count	int
;	O
}	O
else	O
{	O
dec	struct
->	O
rel	enum
=	O
REL_ARRAY2	int
;	O
}	O
dec	struct
->	O
array_max	pointer
=	O
tok	struct
.	O
str	pointer
;	O
scan	function
(	O
TOK_RBRACKET	int
,	O
&	O
tok	struct
)	O
;	O
}	O
else	O
if	O
(	O
peekscan	function
(	O
TOK_LANGLE	int
,	O
&	O
tok	struct
)	O
)	O
{	O
if	O
(	O
dec	struct
->	O
rel	enum
==	O
REL_POINTER	int
)	O
{	O
error	function
(	O
"no array-of-pointer declarations -- use typedef"	pointer
)	O
;	O
}	O
dec	struct
->	O
rel	enum
=	O
REL_ARRAY	int
;	O
if	O
(	O
peekscan	function
(	O
TOK_RANGLE	int
,	O
&	O
tok	struct
)	O
)	O
{	O
dec	struct
->	O
array_max	pointer
=	O
"~0"	pointer
;	O
}	O
else	O
{	O
scan_num	function
(	O
&	O
tok	struct
)	O
;	O
dec	struct
->	O
array_max	pointer
=	O
tok	struct
.	O
str	pointer
;	O
scan	function
(	O
TOK_RANGLE	int
,	O
&	O
tok	struct
)	O
;	O
}	O
}	O
if	O
(	O
streq	function
(	O
dec	struct
->	O
type	pointer
,	O
"opaque"	pointer
)	O
)	O
{	O
if	O
(	O
dec	struct
->	O
rel	enum
!=	O
REL_ARRAY	int
&&	O
dec	struct
->	O
rel	enum
!=	O
REL_VECTOR	int
)	O
{	O
error	function
(	O
"array declaration expected"	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
streq	function
(	O
dec	struct
->	O
type	pointer
,	O
"string"	pointer
)	O
)	O
{	O
if	O
(	O
dec	struct
->	O
rel	enum
!=	O
REL_ARRAY	int
)	O
{	O
error	function
(	O
"variable-length array declaration expected"	pointer
)	O
;	O
}	O
}	O
}	O
static	O
void	O
get_type	function
(	O
prefixp	pointer
,	O
typep	pointer
,	O
stg	pointer
,	O
dkind	enum
)	O
char	O
*	O
*	O
prefixp	pointer
;	O
char	O
*	O
*	O
typep	pointer
;	O
int	O
*	O
stg	pointer
;	O
defkind	enum
dkind	enum
;	O
{	O
token	struct
tok	struct
;	O
*	O
stg	pointer
=	O
-	O
1	int
;	O
*	O
prefixp	pointer
=	O
NULL	O
;	O
get_token	function
(	O
&	O
tok	struct
)	O
;	O
switch	O
(	O
tok	struct
.	O
kind	enum
)	O
{	O
case	O
TOK_IDENT	int
:	O
*	O
typep	pointer
=	O
tok	struct
.	O
str	pointer
;	O
break	O
;	O
case	O
TOK_STRUCT	int
:	O
case	O
TOK_ENUM	int
:	O
case	O
TOK_UNION	int
:	O
*	O
prefixp	pointer
=	O
tok	struct
.	O
str	pointer
;	O
scan	function
(	O
TOK_IDENT	int
,	O
&	O
tok	struct
)	O
;	O
*	O
typep	pointer
=	O
tok	struct
.	O
str	pointer
;	O
break	O
;	O
case	O
TOK_UNSIGNED	int
:	O
unsigned_dec	function
(	O
typep	pointer
,	O
stg	pointer
)	O
;	O
break	O
;	O
case	O
TOK_SHORT	int
:	O
*	O
typep	pointer
=	O
"byte_short"	pointer
;	O
*	O
stg	pointer
=	O
2	int
;	O
(	O
void	O
)	O
peekscan	function
(	O
TOK_INT	int
,	O
&	O
tok	struct
)	O
;	O
break	O
;	O
case	O
TOK_LONG	int
:	O
*	O
typep	pointer
=	O
"byte_long"	pointer
;	O
*	O
stg	pointer
=	O
4	int
;	O
(	O
void	O
)	O
peekscan	function
(	O
TOK_INT	int
,	O
&	O
tok	struct
)	O
;	O
break	O
;	O
case	O
TOK_VOID	int
:	O
if	O
(	O
dkind	enum
!=	O
DEF_UNION	int
&&	O
dkind	enum
!=	O
DEF_PROGRAM	int
)	O
{	O
error	function
(	O
"voids allowed only inside union and program definitions"	pointer
)	O
;	O
}	O
*	O
typep	pointer
=	O
tok	struct
.	O
str	pointer
;	O
break	O
;	O
case	O
TOK_STRING	int
:	O
case	O
TOK_OPAQUE	int
:	O
case	O
TOK_CHAR	int
:	O
case	O
TOK_BOOL	int
:	O
*	O
typep	pointer
=	O
tok	struct
.	O
str	pointer
;	O
*	O
stg	pointer
=	O
1	int
;	O
break	O
;	O
case	O
TOK_FLOAT	int
:	O
*	O
typep	pointer
=	O
"byte_float"	pointer
;	O
*	O
stg	pointer
=	O
4	int
;	O
break	O
;	O
case	O
TOK_DOUBLE	int
:	O
*	O
typep	pointer
=	O
"byte_double"	pointer
;	O
*	O
stg	pointer
=	O
8	int
;	O
break	O
;	O
case	O
TOK_INT	int
:	O
*	O
typep	pointer
=	O
"byte_int"	pointer
;	O
*	O
stg	pointer
=	O
4	int
;	O
break	O
;	O
default	O
:	O
error	function
(	O
"expected type specifier"	pointer
)	O
;	O
}	O
}	O
static	O
void	O
unsigned_dec	function
(	O
typep	pointer
,	O
stg	pointer
)	O
char	O
*	O
*	O
typep	pointer
;	O
int	O
*	O
stg	pointer
;	O
{	O
token	struct
tok	struct
;	O
peek	function
(	O
&	O
tok	struct
)	O
;	O
switch	O
(	O
tok	struct
.	O
kind	enum
)	O
{	O
case	O
TOK_CHAR	int
:	O
get_token	function
(	O
&	O
tok	struct
)	O
;	O
*	O
typep	pointer
=	O
"byte_u_char"	pointer
;	O
*	O
stg	pointer
=	O
1	int
;	O
break	O
;	O
case	O
TOK_SHORT	int
:	O
get_token	function
(	O
&	O
tok	struct
)	O
;	O
*	O
typep	pointer
=	O
"byte_u_short"	pointer
;	O
*	O
stg	pointer
=	O
2	int
;	O
(	O
void	O
)	O
peekscan	function
(	O
TOK_INT	int
,	O
&	O
tok	struct
)	O
;	O
break	O
;	O
case	O
TOK_LONG	int
:	O
get_token	function
(	O
&	O
tok	struct
)	O
;	O
*	O
typep	pointer
=	O
"byte_u_long"	pointer
;	O
*	O
stg	pointer
=	O
4	int
;	O
(	O
void	O
)	O
peekscan	function
(	O
TOK_INT	int
,	O
&	O
tok	struct
)	O
;	O
break	O
;	O
case	O
TOK_INT	int
:	O
get_token	function
(	O
&	O
tok	struct
)	O
;	O
*	O
typep	pointer
=	O
"byte_u_int"	pointer
;	O
*	O
stg	pointer
=	O
4	int
;	O
break	O
;	O
default	O
:	O
*	O
typep	pointer
=	O
"byte_u_int"	pointer
;	O
*	O
stg	pointer
=	O
4	int
;	O
break	O
;	O
}	O
}	O