int	O
_API_fellipse	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
double	O
xc	double
,	O
double	O
yc	double
,	O
double	O
rx	double
,	O
double	O
ry	double
,	O
double	O
angle	double
)	O
{	O
if	O
(	O
!	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
)	O
{	O
_plotter	pointer
->	O
error	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"fellipse: invalid operation"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
)	O
_API_endpath	O
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
if	O
(	O
!	O
_plotter	pointer
->	O
drawstate	pointer
->	O
points_are_connected	enum
)	O
{	O
}	O
else	O
{	O
plPoint	struct
pc	struct
;	O
bool	enum
clockwise	enum
;	O
bool	enum
aligned_ellipse	enum
=	O
false	int
;	O
int	O
iangle	int
=	O
IROUND	O
(	O
angle	double
)	O
;	O
if	O
(	O
iangle	int
<	O
0	int
)	O
iangle	double
+=	O
(	O
1	int
+	O
(	O
-	O
iangle	int
/	O
90	int
)	O
)	O
*	O
90	int
;	O
if	O
(	O
iangle	double
%	O
90	int
==	O
0	int
&&	O
angle	double
==	O
(	O
double	O
)	O
iangle	int
)	O
aligned_ellipse	enum
=	O
true	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
=	O
_new_plPath	function
(	O
)	O
;	O
pc	struct
.	O
x	double
=	O
xc	double
;	O
pc	struct
.	O
y	double
=	O
yc	double
;	O
clockwise	enum
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
orientation	int
<	O
0	int
?	O
true	int
:	O
false	int
;	O
if	O
(	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_ellipse_scaling	enum
==	O
AS_ANY	int
)	O
||	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_ellipse_scaling	enum
==	O
AS_AXES_PRESERVED	int
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
axes_preserved	enum
&&	O
aligned_ellipse	enum
)	O
)	O
_add_ellipse	function
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
,	O
pc	struct
,	O
rx	struct
,	O
ry	int
,	O
angle	enum
,	O
clockwise	enum
)	O
;	O
else	O
if	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_ellarc_scaling	enum
==	O
AS_ANY	int
||	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_ellarc_scaling	enum
==	O
AS_AXES_PRESERVED	int
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
axes_preserved	enum
&&	O
aligned_ellipse	int
)	O
)	O
_add_ellipse_as_ellarcs	function
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
,	O
pc	struct
,	O
rx	struct
,	O
ry	int
,	O
angle	enum
,	O
clockwise	enum
)	O
;	O
else	O
if	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_cubic_scaling	enum
==	O
AS_ANY	int
)	O
_add_ellipse_as_bezier3s	function
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
,	O
pc	struct
,	O
rx	struct
,	O
ry	int
,	O
angle	enum
,	O
clockwise	enum
)	O
;	O
else	O
_add_ellipse_as_lines	function
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
,	O
pc	struct
,	O
rx	struct
,	O
ry	int
,	O
angle	enum
,	O
clockwise	enum
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
type	enum
==	O
PATH_SEGMENT_LIST	int
)	O
_plotter	pointer
->	O
maybe_prepaint_segments	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
0	int
)	O
;	O
}	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
=	O
xc	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
=	O
yc	double
;	O
return	O
0	int
;	O
}	O