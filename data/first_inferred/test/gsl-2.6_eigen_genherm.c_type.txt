static	O
int	O
genherm_standardize_L2	function
(	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
const	O
gsl_matrix_complex	struct
*	O
B	pointer
)	O
;	O
static	O
int	O
genherm_standardize_L3	function
(	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
const	O
gsl_matrix_complex	struct
*	O
B	pointer
)	O
;	O
gsl_eigen_genherm_workspace	struct
*	O
gsl_eigen_genherm_alloc	function
(	O
const	O
size_t	long
n	long
)	O
{	O
gsl_eigen_genherm_workspace	struct
*	O
w	pointer
;	O
if	O
(	O
n	long
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"matrix dimension must be positive integer"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
w	pointer
=	O
(	O
gsl_eigen_genherm_workspace	struct
*	O
)	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
gsl_eigen_genherm_workspace	struct
)	O
)	O
;	O
if	O
(	O
w	pointer
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workspace"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
w	pointer
->	O
size	long
=	O
n	long
;	O
w	pointer
->	O
herm_workspace_p	pointer
=	O
gsl_eigen_herm_alloc	function
(	O
n	long
)	O
;	O
if	O
(	O
!	O
w	pointer
->	O
herm_workspace_p	pointer
)	O
{	O
gsl_eigen_genherm_free	function
(	O
w	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for herm workspace"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
return	O
(	O
w	pointer
)	O
;	O
}	O
void	O
gsl_eigen_genherm_free	function
(	O
gsl_eigen_genherm_workspace	struct
*	O
w	pointer
)	O
{	O
RETURN_IF_NULL	O
(	O
w	pointer
)	O
;	O
if	O
(	O
w	pointer
->	O
herm_workspace_p	pointer
)	O
gsl_eigen_herm_free	function
(	O
w	pointer
->	O
herm_workspace_p	pointer
)	O
;	O
free	function
(	O
w	pointer
)	O
;	O
}	O
int	O
gsl_eigen_genherm	function
(	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
gsl_matrix_complex	struct
*	O
B	pointer
,	O
gsl_vector	struct
*	O
eval	pointer
,	O
gsl_eigen_genherm_workspace	struct
*	O
w	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
A	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square to compute eigenvalues"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
(	O
N	int
!=	O
B	pointer
->	O
size1	long
)	O
||	O
(	O
N	int
!=	O
B	pointer
->	O
size2	long
)	O
)	O
{	O
GSL_ERROR	O
(	O
"B matrix dimensions must match A"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
eval	pointer
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"eigenvalue vector must match matrix size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
w	pointer
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix size does not match workspace"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
s	pointer
;	O
s	pointer
=	O
gsl_linalg_complex_cholesky_decomp	function
(	O
B	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
return	O
s	pointer
;	O
gsl_eigen_genherm_standardize	function
(	O
A	pointer
,	O
B	pointer
)	O
;	O
s	pointer
=	O
gsl_eigen_herm	function
(	O
A	pointer
,	O
eval	pointer
,	O
w	pointer
->	O
herm_workspace_p	pointer
)	O
;	O
return	O
s	pointer
;	O
}	O
}	O
int	O
gsl_eigen_genherm_standardize	function
(	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
const	O
gsl_matrix_complex	struct
*	O
B	pointer
)	O
{	O
return	O
genherm_standardize_L3	function
(	O
A	pointer
,	O
B	pointer
)	O
;	O
}	O
static	O
int	O
genherm_standardize_L2	function
(	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
const	O
gsl_matrix_complex	struct
*	O
B	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size1	long
;	O
size_t	long
i	long
;	O
double	O
a	pointer
,	O
b	pointer
;	O
gsl_complex	struct
y	pointer
,	O
z	struct
;	O
GSL_SET_IMAG	O
(	O
&	O
z	struct
,	O
0.0	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
y	pointer
=	O
gsl_matrix_complex_get	function
(	O
A	pointer
,	O
i	long
,	O
i	long
)	O
;	O
a	pointer
=	O
GSL_REAL	O
(	O
y	pointer
)	O
;	O
y	pointer
=	O
gsl_matrix_complex_get	function
(	O
B	pointer
,	O
i	long
,	O
i	long
)	O
;	O
b	pointer
=	O
GSL_REAL	O
(	O
y	pointer
)	O
;	O
a	pointer
/=	O
b	pointer
*	O
b	pointer
;	O
GSL_SET_REAL	O
(	O
&	O
z	struct
,	O
a	pointer
)	O
;	O
gsl_matrix_complex_set	function
(	O
A	pointer
,	O
i	long
,	O
i	long
,	O
z	struct
)	O
;	O
if	O
(	O
i	long
<	O
N	int
-	O
1	int
)	O
{	O
gsl_vector_complex_view	struct
ai	struct
=	O
gsl_matrix_complex_subcolumn	function
(	O
A	pointer
,	O
i	long
,	O
i	long
+	O
1	int
,	O
N	int
-	O
i	long
-	O
1	int
)	O
;	O
gsl_matrix_complex_view	struct
ma	struct
=	O
gsl_matrix_complex_submatrix	function
(	O
A	pointer
,	O
i	long
+	O
1	int
,	O
i	long
+	O
1	int
,	O
N	int
-	O
i	long
-	O
1	int
,	O
N	int
-	O
i	long
-	O
1	int
)	O
;	O
gsl_vector_complex_const_view	struct
bi	struct
=	O
gsl_matrix_complex_const_subcolumn	function
(	O
B	pointer
,	O
i	long
,	O
i	long
+	O
1	int
,	O
N	int
-	O
i	long
-	O
1	int
)	O
;	O
gsl_matrix_complex_const_view	struct
mb	struct
=	O
gsl_matrix_complex_const_submatrix	function
(	O
B	pointer
,	O
i	long
+	O
1	int
,	O
i	long
+	O
1	int
,	O
N	int
-	O
i	long
-	O
1	int
,	O
N	int
-	O
i	long
-	O
1	int
)	O
;	O
gsl_blas_zdscal	function
(	O
1.0	int
/	O
b	pointer
,	O
&	O
ai	struct
.	O
vector	struct
)	O
;	O
GSL_SET_REAL	O
(	O
&	O
z	struct
,	O
-	O
0.5	int
*	O
a	pointer
)	O
;	O
gsl_blas_zaxpy	function
(	O
z	struct
,	O
&	O
bi	struct
.	O
vector	struct
,	O
&	O
ai	struct
.	O
vector	struct
)	O
;	O
gsl_blas_zher2	function
(	O
CblasLower	int
,	O
GSL_COMPLEX_NEGONE	O
,	O
&	O
ai	struct
.	O
vector	struct
,	O
&	O
bi	struct
.	O
vector	struct
,	O
&	O
ma	struct
.	O
matrix	struct
)	O
;	O
gsl_blas_zaxpy	function
(	O
z	struct
,	O
&	O
bi	struct
.	O
vector	struct
,	O
&	O
ai	struct
.	O
vector	struct
)	O
;	O
gsl_blas_ztrsv	function
(	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
&	O
mb	struct
.	O
matrix	struct
,	O
&	O
ai	struct
.	O
vector	struct
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
genherm_standardize_L3	function
(	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
const	O
gsl_matrix_complex	struct
*	O
B	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size1	long
;	O
if	O
(	O
N	int
<=	O
CROSSOVER_GENHERM	O
)	O
{	O
return	O
genherm_standardize_L2	function
(	O
A	pointer
,	O
B	pointer
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
const	O
size_t	long
N1	long
=	O
GSL_EIGEN_SPLIT_COMPLEX	O
(	O
N	int
)	O
;	O
const	O
size_t	long
N2	long
=	O
N	int
-	O
N1	long
;	O
gsl_matrix_complex_view	struct
A11	struct
=	O
gsl_matrix_complex_submatrix	function
(	O
A	pointer
,	O
0	int
,	O
0	int
,	O
N1	long
,	O
N1	long
)	O
;	O
gsl_matrix_complex_view	struct
A21	struct
=	O
gsl_matrix_complex_submatrix	function
(	O
A	pointer
,	O
N1	long
,	O
0	int
,	O
N2	long
,	O
N1	long
)	O
;	O
gsl_matrix_complex_view	struct
A22	struct
=	O
gsl_matrix_complex_submatrix	function
(	O
A	pointer
,	O
N1	long
,	O
N1	long
,	O
N2	long
,	O
N2	long
)	O
;	O
gsl_matrix_complex_const_view	struct
B11	struct
=	O
gsl_matrix_complex_const_submatrix	function
(	O
B	pointer
,	O
0	int
,	O
0	int
,	O
N1	long
,	O
N1	long
)	O
;	O
gsl_matrix_complex_const_view	struct
B21	struct
=	O
gsl_matrix_complex_const_submatrix	function
(	O
B	pointer
,	O
N1	long
,	O
0	int
,	O
N2	long
,	O
N1	long
)	O
;	O
gsl_matrix_complex_const_view	struct
B22	struct
=	O
gsl_matrix_complex_const_submatrix	function
(	O
B	pointer
,	O
N1	long
,	O
N1	long
,	O
N2	long
,	O
N2	long
)	O
;	O
const	O
gsl_complex	struct
MHALF	struct
=	O
gsl_complex_rect	function
(	O
-	O
0.5	int
,	O
0.0	int
)	O
;	O
status	int
=	O
genherm_standardize_L3	function
(	O
&	O
A11	struct
.	O
matrix	struct
,	O
&	O
B11	struct
.	O
matrix	struct
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
gsl_blas_ztrsm	function
(	O
CblasRight	int
,	O
CblasLower	int
,	O
CblasConjTrans	int
,	O
CblasNonUnit	int
,	O
GSL_COMPLEX_ONE	O
,	O
&	O
B11	struct
.	O
matrix	struct
,	O
&	O
A21	struct
.	O
matrix	struct
)	O
;	O
gsl_blas_zhemm	function
(	O
CblasRight	int
,	O
CblasLower	int
,	O
MHALF	struct
,	O
&	O
A11	struct
.	O
matrix	struct
,	O
&	O
B21	struct
.	O
matrix	struct
,	O
GSL_COMPLEX_ONE	O
,	O
&	O
A21	struct
.	O
matrix	struct
)	O
;	O
gsl_blas_zher2k	function
(	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
GSL_COMPLEX_NEGONE	O
,	O
&	O
A21	struct
.	O
matrix	struct
,	O
&	O
B21	struct
.	O
matrix	struct
,	O
1.0	int
,	O
&	O
A22	struct
.	O
matrix	struct
)	O
;	O
gsl_blas_zhemm	function
(	O
CblasRight	int
,	O
CblasLower	int
,	O
MHALF	struct
,	O
&	O
A11	struct
.	O
matrix	struct
,	O
&	O
B21	struct
.	O
matrix	struct
,	O
GSL_COMPLEX_ONE	O
,	O
&	O
A21	struct
.	O
matrix	struct
)	O
;	O
gsl_blas_ztrsm	function
(	O
CblasLeft	int
,	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
GSL_COMPLEX_ONE	O
,	O
&	O
B22	struct
.	O
matrix	struct
,	O
&	O
A21	struct
.	O
matrix	struct
)	O
;	O
status	int
=	O
genherm_standardize_L3	function
(	O
&	O
A22	struct
.	O
matrix	struct
,	O
&	O
B22	struct
.	O
matrix	struct
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
