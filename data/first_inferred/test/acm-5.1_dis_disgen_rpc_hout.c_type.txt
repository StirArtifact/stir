static	O
char	O
rcsid	array
[	O
]	O
=	O
"$Id: rpc_hout.c,v 1.1.1.1 2005/10/28 14:46:46 k0ro Exp $"	pointer
;	O
static	O
void	O
pconstdef	function
(	O
)	O
,	O
pstructdef	function
(	O
)	O
,	O
puniondef	function
(	O
)	O
,	O
pdefine	function
(	O
)	O
,	O
pprogramdef	function
(	O
)	O
,	O
penumdef	function
(	O
)	O
,	O
ptypedef	function
(	O
)	O
,	O
pdeclaration	function
(	O
)	O
;	O
static	O
int	O
undefined2	function
(	O
)	O
;	O
extern	O
void	O
pprocdef	function
(	O
)	O
;	O
void	O
print_datadef	function
(	O
def	union
)	O
definition	struct
*	O
def	union
;	O
{	O
if	O
(	O
def	union
->	O
def_kind	enum
!=	O
DEF_CONST	int
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
switch	O
(	O
def	union
->	O
def_kind	enum
)	O
{	O
case	O
DEF_STRUCT	int
:	O
pstructdef	function
(	O
def	union
)	O
;	O
break	O
;	O
case	O
DEF_UNION	int
:	O
puniondef	function
(	O
def	union
)	O
;	O
break	O
;	O
case	O
DEF_ENUM	int
:	O
penumdef	function
(	O
def	union
)	O
;	O
break	O
;	O
case	O
DEF_TYPEDEF	int
:	O
ptypedef	function
(	O
def	union
)	O
;	O
break	O
;	O
case	O
DEF_PROGRAM	int
:	O
pprogramdef	function
(	O
def	union
)	O
;	O
break	O
;	O
case	O
DEF_CONST	int
:	O
pconstdef	function
(	O
def	union
)	O
;	O
break	O
;	O
}	O
if	O
(	O
def	union
->	O
def_kind	enum
!=	O
DEF_PROGRAM	int
&&	O
def	union
->	O
def_kind	enum
!=	O
DEF_CONST	int
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
"bool_t xdr_%s (XDR *, %s *);\n"	pointer
,	O
def	union
->	O
def_name	pointer
,	O
def	union
->	O
def_name	pointer
)	O
;	O
}	O
if	O
(	O
def	union
->	O
def_kind	enum
!=	O
DEF_CONST	int
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
}	O
static	O
void	O
pconstdef	function
(	O
def	union
)	O
definition	struct
*	O
def	union
;	O
{	O
pdefine	function
(	O
def	union
->	O
def_name	pointer
,	O
def	union
->	O
def	union
.	O
co	pointer
)	O
;	O
}	O
static	O
void	O
pstructdef	function
(	O
def	union
)	O
definition	struct
*	O
def	union
;	O
{	O
decl_list	struct
*	O
l	pointer
;	O
char	O
*	O
name	pointer
=	O
def	union
->	O
def_name	pointer
;	O
f_print	O
(	O
fout	pointer
,	O
"struct %s {\n"	pointer
,	O
name	pointer
)	O
;	O
for	O
(	O
l	pointer
=	O
def	union
->	O
def	union
.	O
st	struct
.	O
decls	pointer
;	O
l	pointer
!=	O
NULL	O
;	O
l	pointer
=	O
l	pointer
->	O
next	pointer
)	O
{	O
pdeclaration	function
(	O
name	pointer
,	O
&	O
l	pointer
->	O
decl	struct
,	O
1	int
)	O
;	O
}	O
f_print	O
(	O
fout	pointer
,	O
"};\n"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"typedef struct %s %s;\n"	pointer
,	O
name	pointer
,	O
name	pointer
)	O
;	O
}	O
static	O
void	O
puniondef	function
(	O
def	union
)	O
definition	struct
*	O
def	union
;	O
{	O
case_list	struct
*	O
l	pointer
;	O
char	O
*	O
name	pointer
=	O
def	union
->	O
def_name	pointer
;	O
declaration	struct
*	O
decl	struct
;	O
f_print	O
(	O
fout	pointer
,	O
"struct %s {\n"	pointer
,	O
name	pointer
)	O
;	O
decl	struct
=	O
&	O
def	union
->	O
def	union
.	O
un	struct
.	O
enum_decl	struct
;	O
if	O
(	O
streq	function
(	O
decl	struct
->	O
type	pointer
,	O
"bool"	pointer
)	O
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
"\tbool_t %s;\n"	pointer
,	O
decl	struct
->	O
name	pointer
)	O
;	O
}	O
else	O
{	O
f_print	O
(	O
fout	pointer
,	O
"\t%s %s;\n"	pointer
,	O
decl	struct
->	O
type	pointer
,	O
decl	struct
->	O
name	pointer
)	O
;	O
}	O
f_print	O
(	O
fout	pointer
,	O
"\tunion {\n"	pointer
)	O
;	O
for	O
(	O
l	pointer
=	O
def	union
->	O
def	union
.	O
un	struct
.	O
cases	pointer
;	O
l	pointer
!=	O
NULL	O
;	O
l	pointer
=	O
l	pointer
->	O
next	pointer
)	O
{	O
pdeclaration	function
(	O
name	pointer
,	O
&	O
l	pointer
->	O
case_decl	struct
,	O
2	int
)	O
;	O
}	O
decl	struct
=	O
def	union
->	O
def	union
.	O
un	struct
.	O
default_decl	pointer
;	O
if	O
(	O
decl	struct
&&	O
!	O
streq	function
(	O
decl	struct
->	O
type	pointer
,	O
"void"	pointer
)	O
)	O
{	O
pdeclaration	function
(	O
name	pointer
,	O
decl	struct
,	O
2	int
)	O
;	O
}	O
f_print	O
(	O
fout	pointer
,	O
"\t} %s_u;\n"	pointer
,	O
name	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"};\n"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"typedef struct %s %s;\n"	pointer
,	O
name	pointer
,	O
name	pointer
)	O
;	O
}	O
static	O
void	O
pdefine	function
(	O
name	pointer
,	O
num	pointer
)	O
char	O
*	O
name	pointer
;	O
char	O
*	O
num	pointer
;	O
{	O
f_print	O
(	O
fout	pointer
,	O
"#define %s %s\n"	pointer
,	O
name	pointer
,	O
num	pointer
)	O
;	O
}	O
static	O
void	O
puldefine	function
(	O
name	pointer
,	O
num	pointer
)	O
char	O
*	O
name	pointer
;	O
char	O
*	O
num	pointer
;	O
{	O
f_print	O
(	O
fout	pointer
,	O
"#define %s ((u_long)%s)\n"	pointer
,	O
name	pointer
,	O
num	pointer
)	O
;	O
}	O
static	O
int	O
define_printed	function
(	O
stop	pointer
,	O
start	pointer
)	O
proc_list	struct
*	O
stop	pointer
;	O
version_list	struct
*	O
start	pointer
;	O
{	O
version_list	struct
*	O
vers	pointer
;	O
proc_list	struct
*	O
proc	pointer
;	O
for	O
(	O
vers	pointer
=	O
start	pointer
;	O
vers	pointer
!=	O
NULL	O
;	O
vers	pointer
=	O
vers	pointer
->	O
next	pointer
)	O
{	O
for	O
(	O
proc	pointer
=	O
vers	pointer
->	O
procs	pointer
;	O
proc	pointer
!=	O
NULL	O
;	O
proc	pointer
=	O
proc	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
proc	pointer
==	O
stop	pointer
)	O
{	O
return	O
(	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
streq	function
(	O
proc	pointer
->	O
proc_name	pointer
,	O
stop	pointer
->	O
proc_name	pointer
)	O
)	O
{	O
return	O
(	O
1	int
)	O
;	O
}	O
}	O
}	O
abort	function
(	O
)	O
;	O
}	O
static	O
void	O
pprogramdef	function
(	O
def	union
)	O
definition	struct
*	O
def	union
;	O
{	O
version_list	struct
*	O
vers	pointer
;	O
proc_list	struct
*	O
proc	pointer
;	O
puldefine	function
(	O
def	union
->	O
def_name	pointer
,	O
def	union
->	O
def	union
.	O
pr	struct
.	O
prog_num	pointer
)	O
;	O
for	O
(	O
vers	pointer
=	O
def	union
->	O
def	union
.	O
pr	struct
.	O
versions	pointer
;	O
vers	pointer
!=	O
NULL	O
;	O
vers	pointer
=	O
vers	pointer
->	O
next	pointer
)	O
{	O
puldefine	function
(	O
vers	pointer
->	O
vers_name	pointer
,	O
vers	pointer
->	O
vers_num	pointer
)	O
;	O
for	O
(	O
proc	pointer
=	O
vers	pointer
->	O
procs	pointer
;	O
proc	pointer
!=	O
NULL	O
;	O
proc	pointer
=	O
proc	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
!	O
define_printed	function
(	O
proc	pointer
,	O
def	union
->	O
def	union
.	O
pr	struct
.	O
versions	pointer
)	O
)	O
{	O
puldefine	function
(	O
proc	pointer
->	O
proc_name	pointer
,	O
proc	pointer
->	O
proc_num	pointer
)	O
;	O
}	O
pprocdef	function
(	O
proc	pointer
,	O
vers	pointer
)	O
;	O
}	O
}	O
}	O
void	O
pprocdef	function
(	O
proc	pointer
,	O
vp	pointer
)	O
proc_list	struct
*	O
proc	pointer
;	O
version_list	struct
*	O
vp	pointer
;	O
{	O
f_print	O
(	O
fout	pointer
,	O
"extern "	pointer
)	O
;	O
if	O
(	O
proc	pointer
->	O
res_prefix	pointer
)	O
{	O
if	O
(	O
streq	function
(	O
proc	pointer
->	O
res_prefix	pointer
,	O
"enum"	pointer
)	O
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
"enum "	pointer
)	O
;	O
}	O
else	O
{	O
f_print	O
(	O
fout	pointer
,	O
"struct "	pointer
)	O
;	O
}	O
}	O
if	O
(	O
streq	function
(	O
proc	pointer
->	O
res_type	pointer
,	O
"bool"	pointer
)	O
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
"bool_t *"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
streq	function
(	O
proc	pointer
->	O
res_type	pointer
,	O
"string"	pointer
)	O
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
"char **"	pointer
)	O
;	O
}	O
else	O
{	O
f_print	O
(	O
fout	pointer
,	O
"%s *"	pointer
,	O
fixtype	function
(	O
proc	pointer
->	O
res_type	pointer
)	O
)	O
;	O
}	O
pvname	function
(	O
proc	pointer
->	O
proc_name	pointer
,	O
vp	pointer
->	O
vers_num	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"();\n"	pointer
)	O
;	O
}	O
static	O
void	O
penumdef	function
(	O
def	union
)	O
definition	struct
*	O
def	union
;	O
{	O
char	O
*	O
name	pointer
=	O
def	union
->	O
def_name	pointer
;	O
enumval_list	struct
*	O
l	pointer
;	O
char	O
*	O
last	pointer
=	O
NULL	O
;	O
int	O
count	int
=	O
0	int
;	O
f_print	O
(	O
fout	pointer
,	O
"enum %s {\n"	pointer
,	O
name	pointer
)	O
;	O
for	O
(	O
l	pointer
=	O
def	union
->	O
def	union
.	O
en	struct
.	O
vals	pointer
;	O
l	pointer
!=	O
NULL	O
;	O
l	pointer
=	O
l	pointer
->	O
next	pointer
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
"\t%s"	pointer
,	O
l	pointer
->	O
name	pointer
)	O
;	O
if	O
(	O
l	pointer
->	O
assignment	pointer
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
" = %s"	pointer
,	O
l	pointer
->	O
assignment	pointer
)	O
;	O
last	pointer
=	O
l	pointer
->	O
assignment	pointer
;	O
count	int
=	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
last	pointer
==	O
NULL	O
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
" = %d"	pointer
,	O
count	int
++	O
)	O
;	O
}	O
else	O
{	O
f_print	O
(	O
fout	pointer
,	O
" = %s + %d"	pointer
,	O
last	pointer
,	O
count	int
++	O
)	O
;	O
}	O
}	O
f_print	O
(	O
fout	pointer
,	O
",\n"	pointer
)	O
;	O
}	O
f_print	O
(	O
fout	pointer
,	O
"};\n"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"typedef enum %s %s;\n"	pointer
,	O
name	pointer
,	O
name	pointer
)	O
;	O
}	O
static	O
void	O
ptypedef	function
(	O
def	union
)	O
definition	struct
*	O
def	union
;	O
{	O
char	O
*	O
name	pointer
=	O
def	union
->	O
def_name	pointer
;	O
char	O
*	O
old	pointer
=	O
def	union
->	O
def	union
.	O
ty	struct
.	O
old_type	pointer
;	O
char	O
prefix	pointer
[	O
8	int
]	O
;	O
relation	enum
rel	enum
=	O
def	union
->	O
def	union
.	O
ty	struct
.	O
rel	enum
;	O
if	O
(	O
strncmp	O
(	O
old	pointer
,	O
"byte_"	pointer
,	O
5	int
)	O
==	O
0	int
)	O
{	O
old	pointer
+=	O
5	int
;	O
}	O
if	O
(	O
!	O
streq	function
(	O
name	pointer
,	O
old	pointer
)	O
)	O
{	O
if	O
(	O
streq	function
(	O
old	pointer
,	O
"string"	pointer
)	O
)	O
{	O
old	pointer
=	O
"char"	pointer
;	O
rel	enum
=	O
REL_POINTER	int
;	O
}	O
else	O
if	O
(	O
streq	function
(	O
old	pointer
,	O
"opaque"	pointer
)	O
)	O
{	O
old	pointer
=	O
"char"	pointer
;	O
}	O
else	O
if	O
(	O
streq	function
(	O
old	pointer
,	O
"bool"	pointer
)	O
)	O
{	O
old	pointer
=	O
"bool_t"	pointer
;	O
}	O
if	O
(	O
undefined2	function
(	O
old	pointer
,	O
name	pointer
)	O
&&	O
def	union
->	O
def	union
.	O
ty	struct
.	O
old_prefix	pointer
)	O
{	O
s_print	O
(	O
prefix	pointer
,	O
"%s "	pointer
,	O
def	union
->	O
def	union
.	O
ty	struct
.	O
old_prefix	pointer
)	O
;	O
}	O
else	O
{	O
prefix	pointer
[	O
0	int
]	O
=	O
0	int
;	O
}	O
f_print	O
(	O
fout	pointer
,	O
"typedef "	pointer
)	O
;	O
switch	O
(	O
rel	enum
)	O
{	O
case	O
REL_ARRAY	int
:	O
f_print	O
(	O
fout	pointer
,	O
"struct {\n"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\tu_int %s_len;\n"	pointer
,	O
name	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\t%s%s *%s_val;\n"	pointer
,	O
prefix	pointer
,	O
old	pointer
,	O
name	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"} %s"	pointer
,	O
name	pointer
)	O
;	O
break	O
;	O
case	O
REL_ARRAY2	int
:	O
f_print	O
(	O
fout	pointer
,	O
"%s *%s\n"	pointer
,	O
prefix	pointer
,	O
name	pointer
)	O
;	O
break	O
;	O
case	O
REL_POINTER	int
:	O
f_print	O
(	O
fout	pointer
,	O
"%s%s *%s"	pointer
,	O
prefix	pointer
,	O
old	pointer
,	O
name	pointer
)	O
;	O
break	O
;	O
case	O
REL_VECTOR	int
:	O
f_print	O
(	O
fout	pointer
,	O
"%s%s %s[%s]"	pointer
,	O
prefix	pointer
,	O
old	pointer
,	O
name	pointer
,	O
def	union
->	O
def	union
.	O
ty	struct
.	O
array_max	pointer
)	O
;	O
break	O
;	O
case	O
REL_ALIAS	int
:	O
f_print	O
(	O
fout	pointer
,	O
"%s%s %s"	pointer
,	O
prefix	pointer
,	O
old	pointer
,	O
name	pointer
)	O
;	O
break	O
;	O
}	O
f_print	O
(	O
fout	pointer
,	O
";\n"	pointer
)	O
;	O
}	O
}	O
static	O
void	O
pdeclaration	function
(	O
name	pointer
,	O
dec	pointer
,	O
tab	int
)	O
char	O
*	O
name	pointer
;	O
declaration	struct
*	O
dec	pointer
;	O
int	O
tab	int
;	O
{	O
char	O
buf	array
[	O
8	int
]	O
;	O
char	O
*	O
prefix	pointer
;	O
char	O
*	O
type	pointer
;	O
if	O
(	O
streq	function
(	O
dec	pointer
->	O
type	pointer
,	O
"void"	pointer
)	O
)	O
{	O
return	O
;	O
}	O
tabify	function
(	O
fout	pointer
,	O
tab	int
)	O
;	O
if	O
(	O
streq	function
(	O
dec	pointer
->	O
type	pointer
,	O
name	pointer
)	O
&&	O
!	O
dec	pointer
->	O
prefix	pointer
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
"struct "	pointer
)	O
;	O
}	O
if	O
(	O
streq	function
(	O
dec	pointer
->	O
type	pointer
,	O
"string"	pointer
)	O
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
"char *%s"	pointer
,	O
dec	pointer
->	O
name	pointer
)	O
;	O
}	O
else	O
{	O
prefix	pointer
=	O
""	pointer
;	O
if	O
(	O
streq	function
(	O
dec	pointer
->	O
type	pointer
,	O
"bool"	pointer
)	O
)	O
{	O
type	pointer
=	O
"bool_t"	pointer
;	O
}	O
else	O
if	O
(	O
streq	function
(	O
dec	pointer
->	O
type	pointer
,	O
"opaque"	pointer
)	O
)	O
{	O
type	pointer
=	O
"char"	pointer
;	O
}	O
else	O
{	O
if	O
(	O
dec	pointer
->	O
prefix	pointer
)	O
{	O
s_print	O
(	O
buf	array
,	O
"%s "	pointer
,	O
dec	pointer
->	O
prefix	pointer
)	O
;	O
prefix	pointer
=	O
buf	array
;	O
}	O
if	O
(	O
strncmp	O
(	O
dec	pointer
->	O
type	pointer
,	O
"byte_"	pointer
,	O
5	int
)	O
==	O
0	int
)	O
{	O
type	pointer
=	O
dec	pointer
->	O
type	pointer
+	O
5	int
;	O
}	O
else	O
{	O
type	pointer
=	O
dec	pointer
->	O
type	pointer
;	O
}	O
}	O
switch	O
(	O
dec	pointer
->	O
rel	enum
)	O
{	O
case	O
REL_ALIAS	int
:	O
f_print	O
(	O
fout	pointer
,	O
"%s%s %s"	pointer
,	O
prefix	pointer
,	O
type	pointer
,	O
dec	pointer
->	O
name	pointer
)	O
;	O
break	O
;	O
case	O
REL_VECTOR	int
:	O
f_print	O
(	O
fout	pointer
,	O
"%s%s %s[%s]"	pointer
,	O
prefix	pointer
,	O
type	pointer
,	O
dec	pointer
->	O
name	pointer
,	O
dec	pointer
->	O
array_max	pointer
)	O
;	O
break	O
;	O
case	O
REL_POINTER	int
:	O
f_print	O
(	O
fout	pointer
,	O
"%s%s *%s"	pointer
,	O
prefix	pointer
,	O
type	pointer
,	O
dec	pointer
->	O
name	pointer
)	O
;	O
break	O
;	O
case	O
REL_ARRAY	int
:	O
f_print	O
(	O
fout	pointer
,	O
"struct {\n"	pointer
)	O
;	O
tabify	function
(	O
fout	pointer
,	O
tab	int
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\tu_int %s_len;\n"	pointer
,	O
dec	pointer
->	O
name	pointer
)	O
;	O
tabify	function
(	O
fout	pointer
,	O
tab	int
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\t%s%s *%s_val;\n"	pointer
,	O
prefix	pointer
,	O
type	pointer
,	O
dec	pointer
->	O
name	pointer
)	O
;	O
tabify	function
(	O
fout	pointer
,	O
tab	int
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"} %s"	pointer
,	O
dec	pointer
->	O
name	pointer
)	O
;	O
break	O
;	O
case	O
REL_ARRAY2	int
:	O
f_print	O
(	O
fout	pointer
,	O
"%s%s *%s"	pointer
,	O
prefix	pointer
,	O
type	pointer
,	O
dec	pointer
->	O
name	pointer
)	O
;	O
break	O
;	O
}	O
}	O
f_print	O
(	O
fout	pointer
,	O
";\n"	pointer
)	O
;	O
}	O
static	O
int	O
undefined2	function
(	O
type	pointer
,	O
stop	pointer
)	O
char	O
*	O
type	pointer
;	O
char	O
*	O
stop	pointer
;	O
{	O
list	struct
*	O
l	pointer
;	O
definition	struct
*	O
def	union
;	O
for	O
(	O
l	pointer
=	O
defined	pointer
;	O
l	pointer
!=	O
NULL	O
;	O
l	pointer
=	O
l	pointer
->	O
next	pointer
)	O
{	O
def	union
=	O
(	O
definition	struct
*	O
)	O
l	pointer
->	O
val	pointer
;	O
if	O
(	O
def	union
->	O
def_kind	enum
!=	O
DEF_PROGRAM	int
)	O
{	O
if	O
(	O
streq	function
(	O
def	union
->	O
def_name	pointer
,	O
stop	pointer
)	O
)	O
{	O
return	O
(	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
streq	function
(	O
def	union
->	O
def_name	pointer
,	O
type	pointer
)	O
)	O
{	O
return	O
(	O
0	int
)	O
;	O
}	O
}	O
}	O
return	O
(	O
1	int
)	O
;	O
}	O
