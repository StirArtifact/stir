int	O
getword	function
(	O
char	O
*	O
*	O
pret	pointer
,	O
const	O
char	O
*	O
*	O
pstr	pointer
,	O
int	O
delim	int
)	O
{	O
size_t	long
len	int
;	O
char	O
*	O
ret	pointer
;	O
const	O
char	O
*	O
start	long
=	O
*	O
pstr	pointer
;	O
const	O
char	O
*	O
end	long
=	O
strchr	function
(	O
start	long
,	O
delim	int
)	O
;	O
free	function
(	O
*	O
pret	pointer
)	O
;	O
*	O
pret	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
end	long
)	O
return	O
MU_ERR_BAD_2047_INPUT	O
;	O
len	int
=	O
end	long
-	O
start	long
;	O
ret	pointer
=	O
malloc	function
(	O
len	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
ret	pointer
)	O
return	O
ENOMEM	int
;	O
memcpy	function
(	O
ret	pointer
,	O
start	long
,	O
len	int
)	O
;	O
ret	pointer
[	O
len	int
]	O
=	O
0	int
;	O
*	O
pstr	pointer
=	O
end	long
+	O
1	int
;	O
*	O
pret	pointer
=	O
ret	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_rfc2047_decode_param	function
(	O
const	O
char	O
*	O
tocode	pointer
,	O
const	O
char	O
*	O
input	pointer
,	O
struct	O
mu_mime_param	struct
*	O
param	pointer
)	O
{	O
int	O
status	int
=	O
0	int
;	O
const	O
char	O
*	O
fromstr	pointer
;	O
size_t	long
run_count	long
=	O
0	int
;	O
char	O
*	O
fromcode	pointer
=	O
NULL	O
;	O
char	O
*	O
encoding_type	pointer
=	O
NULL	O
;	O
char	O
*	O
encoded_text	pointer
=	O
NULL	O
;	O
char	O
*	O
tocodetmp	pointer
=	O
NULL	O
;	O
mu_stream_t	pointer
str	pointer
;	O
memset	function
(	O
param	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
param	pointer
)	O
)	O
;	O
status	int
=	O
mu_memory_stream_create	function
(	O
&	O
str	pointer
,	O
MU_STREAM_RDWR	O
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
tocode	pointer
&&	O
(	O
param	pointer
->	O
cset	pointer
=	O
strdup	function
(	O
tocode	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
mu_stream_destroy	function
(	O
&	O
str	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
fromstr	pointer
=	O
input	pointer
;	O
while	O
(	O
*	O
fromstr	pointer
)	O
{	O
if	O
(	O
strncmp	function
(	O
fromstr	pointer
,	O
"=?"	pointer
,	O
2	int
)	O
==	O
0	int
)	O
{	O
mu_stream_t	pointer
filter	pointer
=	O
NULL	O
;	O
mu_stream_t	pointer
in_stream	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
filter_type	pointer
=	O
NULL	O
;	O
size_t	long
size	long
;	O
const	O
char	O
*	O
sp	pointer
=	O
fromstr	pointer
+	O
2	int
;	O
char	O
*	O
lang	pointer
;	O
status	int
=	O
getword	function
(	O
&	O
fromcode	pointer
,	O
&	O
sp	pointer
,	O
'?'	O
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
lang	pointer
=	O
strchr	function
(	O
fromcode	pointer
,	O
'*'	O
)	O
;	O
if	O
(	O
lang	pointer
)	O
*	O
lang	pointer
++	O
=	O
0	int
;	O
if	O
(	O
!	O
param	pointer
->	O
cset	pointer
)	O
{	O
param	pointer
->	O
cset	pointer
=	O
strdup	function
(	O
fromcode	pointer
)	O
;	O
if	O
(	O
!	O
param	pointer
->	O
cset	pointer
)	O
{	O
status	int
=	O
ENOMEM	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
lang	pointer
&&	O
!	O
param	pointer
->	O
lang	pointer
&&	O
(	O
param	pointer
->	O
lang	pointer
=	O
strdup	function
(	O
lang	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
status	int
=	O
ENOMEM	int
;	O
break	O
;	O
}	O
if	O
(	O
!	O
tocode	pointer
)	O
{	O
if	O
(	O
(	O
tocodetmp	pointer
=	O
strdup	function
(	O
fromcode	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
status	int
=	O
ENOMEM	int
;	O
break	O
;	O
}	O
tocode	pointer
=	O
tocodetmp	pointer
;	O
}	O
status	int
=	O
getword	function
(	O
&	O
encoding_type	pointer
,	O
&	O
sp	pointer
,	O
'?'	O
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
status	int
=	O
getword	function
(	O
&	O
encoded_text	pointer
,	O
&	O
sp	pointer
,	O
'?'	O
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
if	O
(	O
sp	pointer
==	O
NULL	O
||	O
sp	pointer
[	O
0	int
]	O
!=	O
'='	O
)	O
{	O
status	int
=	O
MU_ERR_BAD_2047_INPUT	O
;	O
break	O
;	O
}	O
size	long
=	O
strlen	function
(	O
encoded_text	pointer
)	O
;	O
switch	O
(	O
encoding_type	pointer
[	O
0	int
]	O
)	O
{	O
case	O
'b'	O
:	O
case	O
'B'	O
:	O
filter_type	pointer
=	O
"base64"	pointer
;	O
break	O
;	O
case	O
'q'	O
:	O
case	O
'Q'	O
:	O
filter_type	pointer
=	O
"Q"	pointer
;	O
break	O
;	O
default	O
:	O
status	int
=	O
MU_ERR_BAD_2047_INPUT	O
;	O
break	O
;	O
}	O
if	O
(	O
status	int
!=	O
0	int
)	O
break	O
;	O
mu_static_memory_stream_create	function
(	O
&	O
in_stream	pointer
,	O
encoded_text	pointer
,	O
size	long
)	O
;	O
mu_stream_seek	function
(	O
in_stream	pointer
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
status	int
=	O
mu_decode_filter	function
(	O
&	O
filter	pointer
,	O
in_stream	pointer
,	O
filter_type	pointer
,	O
fromcode	pointer
,	O
tocode	pointer
)	O
;	O
mu_stream_unref	function
(	O
in_stream	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
break	O
;	O
status	int
=	O
mu_stream_copy	function
(	O
str	pointer
,	O
filter	pointer
,	O
0	int
,	O
NULL	O
)	O
;	O
mu_stream_destroy	function
(	O
&	O
filter	pointer
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
fromstr	pointer
=	O
sp	pointer
+	O
1	int
;	O
run_count	long
=	O
1	int
;	O
}	O
else	O
if	O
(	O
run_count	long
)	O
{	O
if	O
(	O
*	O
fromstr	pointer
==	O
' '	O
||	O
*	O
fromstr	pointer
==	O
'\t'	O
)	O
{	O
run_count	long
++	O
;	O
fromstr	pointer
++	O
;	O
continue	O
;	O
}	O
else	O
{	O
if	O
(	O
--	O
run_count	long
)	O
{	O
status	int
=	O
mu_stream_write	function
(	O
str	pointer
,	O
fromstr	pointer
-	O
run_count	long
,	O
run_count	long
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
run_count	long
=	O
0	int
;	O
}	O
status	int
=	O
mu_stream_write	function
(	O
str	pointer
,	O
fromstr	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
fromstr	pointer
++	O
;	O
}	O
}	O
else	O
{	O
status	int
=	O
mu_stream_write	function
(	O
str	pointer
,	O
fromstr	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
fromstr	pointer
++	O
;	O
}	O
}	O
if	O
(	O
status	int
==	O
0	int
&&	O
*	O
fromstr	pointer
)	O
status	int
=	O
mu_stream_write	function
(	O
str	pointer
,	O
fromstr	pointer
,	O
strlen	function
(	O
fromstr	pointer
)	O
,	O
NULL	O
)	O
;	O
free	function
(	O
fromcode	pointer
)	O
;	O
free	function
(	O
encoding_type	pointer
)	O
;	O
free	function
(	O
encoded_text	pointer
)	O
;	O
free	function
(	O
tocodetmp	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
mu_off_t	long
size	long
;	O
mu_stream_size	function
(	O
str	pointer
,	O
&	O
size	long
)	O
;	O
param	pointer
->	O
value	pointer
=	O
malloc	function
(	O
size	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
param	pointer
->	O
value	pointer
)	O
status	int
=	O
ENOMEM	int
;	O
else	O
{	O
mu_stream_seek	function
(	O
str	pointer
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
status	int
=	O
mu_stream_read	function
(	O
str	pointer
,	O
param	pointer
->	O
value	pointer
,	O
size	long
,	O
NULL	O
)	O
;	O
param	pointer
->	O
value	pointer
[	O
size	long
]	O
=	O
0	int
;	O
}	O
}	O
mu_stream_destroy	function
(	O
&	O
str	pointer
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_rfc2047_decode_param	function
(	O
const	O
char	O
*	O
tocode	pointer
,	O
const	O
char	O
*	O
input	pointer
,	O
struct	O
mu_mime_param	struct
*	O
*	O
param_ptr	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_mime_param	struct
*	O
p	pointer
;	O
if	O
(	O
!	O
input	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
param_ptr	pointer
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
p	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
p	pointer
)	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
errno	O
;	O
rc	int
=	O
_rfc2047_decode_param	function
(	O
tocode	pointer
,	O
input	pointer
,	O
p	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
*	O
param_ptr	pointer
=	O
p	pointer
;	O
else	O
mu_mime_param_free	function
(	O
p	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_rfc2047_decode	function
(	O
const	O
char	O
*	O
tocode	pointer
,	O
const	O
char	O
*	O
input	pointer
,	O
char	O
*	O
*	O
ptostr	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_mime_param	struct
param	pointer
;	O
if	O
(	O
!	O
input	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
ptostr	pointer
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
rc	int
=	O
_rfc2047_decode_param	function
(	O
tocode	pointer
,	O
input	pointer
,	O
&	O
param	pointer
)	O
;	O
free	function
(	O
param	pointer
.	O
cset	pointer
)	O
;	O
free	function
(	O
param	pointer
.	O
lang	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
*	O
ptostr	pointer
=	O
param	pointer
.	O
value	pointer
;	O
return	O
rc	int
;	O
}	O
int	O
mu_rfc2047_encode	function
(	O
const	O
char	O
*	O
charset	pointer
,	O
const	O
char	O
*	O
encoding	pointer
,	O
const	O
char	O
*	O
text	pointer
,	O
char	O
*	O
*	O
result	pointer
)	O
{	O
mu_stream_t	pointer
input_stream	pointer
;	O
mu_stream_t	pointer
inter_stream	pointer
;	O
int	O
rc	int
;	O
if	O
(	O
charset	pointer
==	O
NULL	O
||	O
encoding	pointer
==	O
NULL	O
||	O
text	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
strlen	function
(	O
charset	pointer
)	O
>	O
MAX_ENCODED_WORD	int
-	O
8	int
)	O
return	O
EINVAL	int
;	O
if	O
(	O
strcmp	function
(	O
encoding	pointer
,	O
"base64"	pointer
)	O
==	O
0	int
)	O
encoding	pointer
=	O
"B"	pointer
;	O
else	O
if	O
(	O
strcmp	function
(	O
encoding	pointer
,	O
"quoted-printable"	pointer
)	O
==	O
0	int
)	O
encoding	pointer
=	O
"Q"	pointer
;	O
else	O
if	O
(	O
encoding	pointer
[	O
1	int
]	O
||	O
!	O
strchr	function
(	O
"BQ"	pointer
,	O
encoding	pointer
[	O
0	int
]	O
)	O
)	O
return	O
MU_ERR_BAD_2047_ENCODING	O
;	O
rc	int
=	O
mu_static_memory_stream_create	function
(	O
&	O
input_stream	pointer
,	O
text	pointer
,	O
strlen	function
(	O
text	pointer
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_filter_create	function
(	O
&	O
inter_stream	pointer
,	O
input_stream	pointer
,	O
encoding	pointer
,	O
MU_FILTER_ENCODE	int
,	O
MU_STREAM_READ	int
)	O
;	O
mu_stream_unref	function
(	O
input_stream	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_stream_t	pointer
output_stream	pointer
;	O
rc	int
=	O
mu_memory_stream_create	function
(	O
&	O
output_stream	pointer
,	O
MU_STREAM_RDWR	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
char	O
buf	pointer
[	O
MAX_ENCODED_WORD	int
]	O
;	O
size_t	long
start	long
,	O
bs	long
,	O
n	long
;	O
char	O
putback	array
[	O
2	int
]	O
;	O
int	O
pbi	int
=	O
0	int
;	O
start	long
=	O
snprintf	function
(	O
buf	pointer
,	O
sizeof	O
buf	pointer
,	O
"=?%s?%s?"	pointer
,	O
charset	pointer
,	O
encoding	pointer
)	O
;	O
bs	long
=	O
sizeof	O
buf	pointer
-	O
start	long
-	O
2	int
;	O
if	O
(	O
encoding	pointer
[	O
0	int
]	O
==	O
'B'	O
)	O
{	O
bs	long
-=	O
bs	long
%	O
4	int
;	O
}	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
pbi	int
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
pbi	int
;	O
i	int
++	O
)	O
buf	pointer
[	O
start	long
+	O
i	int
]	O
=	O
putback	array
[	O
pbi	int
-	O
i	int
]	O
;	O
}	O
rc	int
=	O
mu_stream_read	function
(	O
inter_stream	pointer
,	O
buf	pointer
+	O
start	long
+	O
pbi	int
,	O
bs	long
-	O
pbi	int
,	O
&	O
n	long
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
n	long
+=	O
pbi	int
;	O
pbi	int
=	O
0	int
;	O
if	O
(	O
n	long
==	O
0	int
)	O
break	O
;	O
if	O
(	O
encoding	pointer
[	O
0	int
]	O
==	O
'Q'	O
)	O
{	O
if	O
(	O
buf	pointer
[	O
n	long
+	O
start	long
-	O
1	int
]	O
==	O
'='	O
)	O
{	O
putback	array
[	O
pbi	int
++	O
]	O
=	O
buf	pointer
[	O
start	long
+	O
--	O
n	long
]	O
;	O
}	O
else	O
if	O
(	O
buf	pointer
[	O
n	long
+	O
start	long
-	O
2	int
]	O
==	O
'='	O
)	O
{	O
putback	array
[	O
pbi	int
++	O
]	O
=	O
buf	pointer
[	O
start	long
+	O
--	O
n	long
]	O
;	O
putback	array
[	O
pbi	int
++	O
]	O
=	O
buf	pointer
[	O
start	long
+	O
--	O
n	long
]	O
;	O
}	O
}	O
rc	int
=	O
mu_stream_write	function
(	O
output_stream	pointer
,	O
buf	pointer
,	O
n	long
+	O
start	long
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
rc	int
=	O
mu_stream_write	function
(	O
output_stream	pointer
,	O
"?="	pointer
,	O
2	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
if	O
(	O
n	long
==	O
bs	long
)	O
rc	int
=	O
mu_stream_write	function
(	O
output_stream	pointer
,	O
"\n "	pointer
,	O
2	int
,	O
NULL	O
)	O
;	O
else	O
break	O
;	O
}	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_off_t	long
sz	long
;	O
char	O
*	O
ptr	pointer
;	O
mu_stream_size	function
(	O
output_stream	pointer
,	O
&	O
sz	long
)	O
;	O
ptr	pointer
=	O
malloc	function
(	O
sz	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
ptr	pointer
)	O
rc	int
=	O
ENOMEM	int
;	O
else	O
{	O
if	O
(	O
(	O
rc	int
=	O
mu_stream_seek	function
(	O
output_stream	pointer
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
)	O
==	O
0	int
&&	O
(	O
rc	int
=	O
mu_stream_read	function
(	O
output_stream	pointer
,	O
ptr	pointer
,	O
sz	long
,	O
NULL	O
)	O
)	O
==	O
0	int
)	O
{	O
ptr	pointer
[	O
sz	long
]	O
=	O
0	int
;	O
*	O
result	pointer
=	O
ptr	pointer
;	O
}	O
}	O
}	O
mu_stream_destroy	function
(	O
&	O
output_stream	pointer
)	O
;	O
}	O
mu_stream_destroy	function
(	O
&	O
inter_stream	pointer
)	O
;	O
}	O
else	O
mu_stream_destroy	function
(	O
&	O
input_stream	pointer
)	O
;	O
return	O
rc	int
;	O
}	O