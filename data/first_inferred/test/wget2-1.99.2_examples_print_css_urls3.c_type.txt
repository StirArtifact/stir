static	O
void	O
WGET_GCC_NORETURN	function
usage	function
(	O
const	O
char	O
*	O
myname	*
)	O
{	O
error_printf_exit	O
(	O
"\nUsage: %s [options] file...\n"	*
"  --base <URI>          Default base for relative URIs, default: http://www.example.com\n"	*
"  --encoding <Encoding> Default file character encoding, default: iso-8859-1\n"	*
"\n"	*
"  Examples:\n"	*
"    %s --base http://www.mydomain.com x.css\n"	*
"    cat x.css | %s --base http://www.mydomain.com -\n"	*
"    %s http://www.example.com\n"	*
"\n"	*
"  Print URIs as found (without a base):\n"	*
"    %s --base \"\" x.css\n\n"	*
,	O
myname	int
,	O
myname	int
,	O
myname	int
,	O
myname	int
,	O
myname	int
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
const	O
char	O
*	O
*	O
argv	*
)	O
{	O
const	O
char	O
*	O
base	*
=	O
NULL	O
;	O
const	O
char	O
*	O
local_encoding	*
=	O
wget_local_charset_encoding	function
(	O
)	O
;	O
wget_iri	struct
*	O
base_uri	*
;	O
const	O
char	O
*	O
css_encoding	*
=	O
NULL	O
;	O
int	O
argpos	int
;	O
wget_logger_set_stream	function
(	O
wget_get_logger	function
(	O
WGET_LOGGER_ERROR	int
)	O
,	O
stderr	*
)	O
;	O
wget_logger_set_stream	function
(	O
wget_get_logger	function
(	O
WGET_LOGGER_INFO	int
)	O
,	O
stdout	*
)	O
;	O
for	O
(	O
argpos	int
=	O
1	int
;	O
argpos	int
<	O
argc	int
;	O
argpos	int
++	O
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
argv	*
[	O
argpos	int
]	O
,	O
"--base"	*
)	O
&&	O
argc	int
-	O
argpos	int
>	O
1	int
)	O
{	O
base	*
=	O
argv	*
[	O
++	O
argpos	int
]	O
;	O
info_printf	function
(	O
"Local URI encoding = '%s'\n"	*
,	O
local_encoding	*
)	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
argv	*
[	O
argpos	int
]	O
,	O
"--encoding"	*
)	O
&&	O
argc	int
-	O
argpos	int
>	O
1	int
)	O
{	O
css_encoding	*
=	O
argv	*
[	O
++	O
argpos	int
]	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
argv	*
[	O
argpos	int
]	O
,	O
"--"	*
)	O
)	O
{	O
argpos	int
++	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
argv	*
[	O
argpos	int
]	O
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
usage	function
(	O
argv	*
[	O
0	int
]	O
)	O
;	O
}	O
else	O
break	O
;	O
}	O
base_uri	*
=	O
base	*
?	O
wget_iri_parse	function
(	O
base	int
,	O
local_encoding	*
)	O
:	O
NULL	O
;	O
for	O
(	O
;	O
argpos	int
<	O
argc	int
;	O
argpos	int
++	O
)	O
{	O
wget_vector	struct
*	O
css_urls	*
=	O
wget_css_get_urls_from_localfile	function
(	O
argv	*
[	O
argpos	int
]	O
,	O
base_uri	*
,	O
&	O
css_encoding	O
)	O
;	O
if	O
(	O
wget_vector_size	function
(	O
css_urls	*
)	O
>	O
0	int
)	O
{	O
info_printf	function
(	O
"URL encoding for %s is '%s':\n"	*
,	O
argv	*
[	O
argpos	int
]	O
,	O
css_encoding	int
?	O
css_encoding	int
:	O
"UTF-8"	int
)	O
;	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
it	int
<	O
wget_vector_size	function
(	O
css_urls	int
)	O
;	O
it	int
++	O
)	O
{	O
wget_css_parsed_url	struct
*	O
css_url	*
=	O
wget_vector_get	function
(	O
css_urls	*
,	O
it	int
)	O
;	O
if	O
(	O
css_url	*
->	O
abs_url	*
)	O
info_printf	function
(	O
"  %s -> %s\n"	*
,	O
css_url	*
->	O
url	*
,	O
css_url	*
->	O
abs_url	*
)	O
;	O
else	O
info_printf	function
(	O
"  %s\n"	*
,	O
css_url	*
->	O
url	*
)	O
;	O
}	O
info_printf	function
(	O
"\n"	*
)	O
;	O
}	O
wget_vector_free	function
(	O
&	O
css_urls	int
)	O
;	O
}	O
wget_iri_free	function
(	O
&	O
base_uri	*
)	O
;	O
return	O
0	int
;	O
}	O