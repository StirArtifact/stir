static	O
void	O
pre_cork_setsockopt	function
(	O
struct	O
MHD_Connection	O
*	O
connection	*
,	O
bool	bool
want_cork	bool
)	O
{	O
}	O
static	O
void	O
post_cork_setsockopt	function
(	O
struct	O
MHD_Connection	O
*	O
connection	*
,	O
bool	bool
want_cork	bool
)	O
{	O
}	O
ssize_t	long
MHD_send_on_connection_	function
(	O
struct	O
MHD_Connection	O
*	O
connection	*
,	O
const	O
char	O
*	O
buffer	*
,	O
size_t	long
buffer_size	long
,	O
enum	O
MHD_SendSocketOptions	enum
options	enum
)	O
{	O
bool	bool
want_cork	bool
;	O
MHD_socket	int
s	int
=	O
connection	*
->	O
socket_fd	int
;	O
ssize_t	long
ret	long
;	O
if	O
(	O
(	O
MHD_INVALID_SOCKET	O
==	O
s	*
)	O
||	O
(	O
MHD_CONNECTION_CLOSED	*
==	O
connection	*
->	O
state	*
)	O
)	O
{	O
return	O
MHD_ERR_NOTCONN_	int
;	O
}	O
if	O
(	O
buffer_size	long
>	O
MHD_SCKT_SEND_MAX_SIZE_	int
)	O
buffer_size	long
=	O
MHD_SCKT_SEND_MAX_SIZE_	int
;	O
switch	O
(	O
options	int
)	O
{	O
case	O
MHD_SSO_NO_CORK	int
:	O
want_cork	enum
=	O
false	int
;	O
break	O
;	O
case	O
MHD_SSO_MAY_CORK	int
:	O
want_cork	bool
=	O
true	int
;	O
break	O
;	O
case	O
MHD_SSO_HDR_CORK	int
:	O
want_cork	long
=	O
(	O
buffer_size	long
<=	O
1024	int
)	O
;	O
break	O
;	O
}	O
{	O
pre_cork_setsockopt	function
(	O
connection	*
,	O
want_cork	*
)	O
;	O
ret	int
=	O
send	function
(	O
s	*
,	O
buffer	*
,	O
buffer_size	long
,	O
MAYBE_MSG_NOSIGNAL	int
|	O
(	O
want_cork	int
?	O
MSG_MORE	int
:	O
0	int
)	O
)	O
;	O
if	O
(	O
0	int
>	O
ret	int
)	O
{	O
const	O
int	O
err	int
=	O
MHD_socket_get_error_	function
(	O
)	O
;	O
if	O
(	O
MHD_SCKT_ERR_IS_EAGAIN_	function
(	O
err	int
)	O
)	O
{	O
connection	*
->	O
epoll_state	enum
&=	O
~	O
MHD_EPOLL_STATE_WRITE_READY	int
;	O
return	O
MHD_ERR_AGAIN_	int
;	O
}	O
if	O
(	O
MHD_SCKT_ERR_IS_EINTR_	function
(	O
err	int
)	O
)	O
return	O
MHD_ERR_AGAIN_	int
;	O
if	O
(	O
MHD_SCKT_ERR_IS_	function
(	O
err	int
,	O
MHD_SCKT_ECONNRESET_	*
)	O
)	O
return	O
MHD_ERR_CONNRESET_	int
;	O
return	O
MHD_ERR_NOTCONN_	int
;	O
}	O
else	O
if	O
(	O
buffer_size	long
>	O
(	O
size_t	long
)	O
ret	int
)	O
connection	*
->	O
epoll_state	enum
&=	O
~	O
MHD_EPOLL_STATE_WRITE_READY	int
;	O
if	O
(	O
ret	int
==	O
buffer_size	int
)	O
post_cork_setsockopt	function
(	O
connection	*
,	O
want_cork	*
)	O
;	O
}	O
return	O
ret	int
;	O
}	O
ssize_t	long
MHD_send_on_connection2_	function
(	O
struct	O
MHD_Connection	O
*	O
connection	*
,	O
const	O
char	O
*	O
header	*
,	O
size_t	long
header_size	long
,	O
const	O
char	O
*	O
buffer	*
,	O
size_t	long
buffer_size	long
)	O
{	O
MHD_socket	int
s	int
=	O
connection	*
->	O
socket_fd	int
;	O
ssize_t	long
ret	long
;	O
struct	O
iovec	struct
vector	struct
[	O
2	int
]	O
;	O
pre_cork_setsockopt	function
(	O
connection	*
,	O
false	int
)	O
;	O
vector	struct
[	O
0	int
]	O
.	O
iov_base	*
=	O
(	O
void	O
*	O
)	O
header	*
;	O
vector	struct
[	O
0	int
]	O
.	O
iov_len	long
=	O
header_size	*
;	O
vector	struct
[	O
1	int
]	O
.	O
iov_base	*
=	O
(	O
void	O
*	O
)	O
buffer	*
;	O
vector	struct
[	O
1	int
]	O
.	O
iov_len	long
=	O
buffer_size	long
;	O
{	O
struct	O
msghdr	struct
msg	struct
;	O
memset	function
(	O
&	O
msg	*
,	O
0	int
,	O
sizeof	O
(	O
struct	O
msghdr	struct
)	O
)	O
;	O
msg	struct
.	O
msg_iov	*
=	O
vector	struct
;	O
msg	struct
.	O
msg_iovlen	long
=	O
2	int
;	O
ret	int
=	O
sendmsg	function
(	O
s	*
,	O
&	O
msg	*
,	O
MAYBE_MSG_NOSIGNAL	*
)	O
;	O
}	O
if	O
(	O
ret	int
==	O
header_size	int
+	O
buffer_size	int
)	O
post_cork_setsockopt	function
(	O
connection	*
,	O
false	int
)	O
;	O
return	O
ret	int
;	O
}	O
ssize_t	long
MHD_send_sendfile_	function
(	O
struct	O
MHD_Connection	O
*	O
connection	*
)	O
{	O
ssize_t	long
ret	long
;	O
const	O
int	O
file_fd	int
=	O
connection	*
->	O
response	*
->	O
fd	int
;	O
uint64_t	long
left	long
;	O
uint64_t	long
offsetu64	long
;	O
const	O
uint64_t	long
max_off_t	long
=	O
(	O
uint64_t	long
)	O
OFF64_T_MAX	long
;	O
off64_t	long
offset	long
;	O
const	O
bool	bool
used_thr_p_c	bool
=	O
(	O
0	int
!=	O
(	O
connection	*
->	O
daemon	function
->	O
options	*
&	O
MHD_USE_THREAD_PER_CONNECTION	int
)	O
)	O
;	O
const	O
size_t	long
chunk_size	long
=	O
used_thr_p_c	bool
?	O
MHD_SENFILE_CHUNK_THR_P_C_	int
:	O
MHD_SENFILE_CHUNK_	int
;	O
size_t	long
send_size	long
=	O
0	int
;	O
mhd_assert	O
(	O
MHD_resp_sender_sendfile	int
==	O
connection	*
->	O
resp_sender	enum
)	O
;	O
pre_cork_setsockopt	function
(	O
connection	*
,	O
false	int
)	O
;	O
offsetu64	*
=	O
connection	*
->	O
response_write_position	long
+	O
connection	*
->	O
response	*
->	O
fd_off	int
;	O
left	long
=	O
connection	*
->	O
response	*
->	O
total_size	long
-	O
connection	*
->	O
response_write_position	long
;	O
send_size	long
=	O
(	O
left	long
>	O
chunk_size	long
)	O
?	O
chunk_size	long
:	O
(	O
size_t	long
)	O
left	long
;	O
if	O
(	O
max_off_t	int
<	O
offsetu64	*
)	O
{	O
connection	*
->	O
resp_sender	enum
=	O
MHD_resp_sender_std	int
;	O
return	O
MHD_ERR_AGAIN_	int
;	O
}	O
offset	long
=	O
(	O
off64_t	long
)	O
offsetu64	int
;	O
ret	int
=	O
sendfile64	function
(	O
connection	*
->	O
socket_fd	int
,	O
file_fd	int
,	O
&	O
offset	long
,	O
send_size	*
)	O
;	O
if	O
(	O
0	int
>	O
ret	int
)	O
{	O
const	O
int	O
err	int
=	O
MHD_socket_get_error_	function
(	O
)	O
;	O
if	O
(	O
MHD_SCKT_ERR_IS_EAGAIN_	function
(	O
err	int
)	O
)	O
{	O
connection	*
->	O
epoll_state	enum
&=	O
~	O
MHD_EPOLL_STATE_WRITE_READY	int
;	O
return	O
MHD_ERR_AGAIN_	int
;	O
}	O
if	O
(	O
MHD_SCKT_ERR_IS_EINTR_	function
(	O
err	int
)	O
)	O
return	O
MHD_ERR_AGAIN_	int
;	O
if	O
(	O
MHD_SCKT_ERR_IS_	function
(	O
err	int
,	O
MHD_SCKT_EBADF_	*
)	O
)	O
return	O
MHD_ERR_BADF_	int
;	O
connection	*
->	O
resp_sender	enum
=	O
MHD_resp_sender_std	int
;	O
return	O
MHD_ERR_AGAIN_	int
;	O
}	O
else	O
if	O
(	O
send_size	long
>	O
(	O
size_t	long
)	O
ret	int
)	O
connection	*
->	O
epoll_state	enum
&=	O
~	O
MHD_EPOLL_STATE_WRITE_READY	int
;	O
if	O
(	O
ret	int
==	O
left	long
)	O
post_cork_setsockopt	function
(	O
connection	*
,	O
false	int
)	O
;	O
return	O
ret	int
;	O
}	O