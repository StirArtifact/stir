mp_limb_t	long
mpn_redc_2	O
(	O
mp_ptr	*
rp	*
,	O
mp_ptr	*
up	*
,	O
mp_srcptr	*
mp	*
,	O
mp_size_t	long
n	long
,	O
mp_srcptr	*
mip	*
)	O
{	O
mp_limb_t	long
q	array
[	O
2	int
]	O
;	O
mp_size_t	long
j	long
;	O
mp_limb_t	long
upn	long
;	O
mp_limb_t	long
cy	long
;	O
ASSERT	O
(	O
n	long
>	O
0	int
)	O
;	O
ASSERT_MPN	O
(	O
up	*
,	O
2	int
*	O
n	long
)	O
;	O
if	O
(	O
(	O
n	long
&	O
1	int
)	O
!=	O
0	int
)	O
{	O
up	*
[	O
0	int
]	O
=	O
mpn_addmul_1	O
(	O
up	*
,	O
mp	*
,	O
n	long
,	O
(	O
up	*
[	O
0	int
]	O
*	O
mip	*
[	O
0	int
]	O
)	O
&	O
GMP_NUMB_MASK	O
)	O
;	O
up	*
++	O
;	O
}	O
for	O
(	O
j	long
=	O
n	long
-	O
2	int
;	O
j	long
>=	O
0	int
;	O
j	long
-=	O
2	int
)	O
{	O
umul2low	function
(	O
q	*
[	O
1	int
]	O
,	O
q	*
[	O
0	int
]	O
,	O
mip	*
[	O
1	int
]	O
,	O
mip	*
[	O
0	int
]	O
,	O
up	*
[	O
1	int
]	O
,	O
up	*
[	O
0	int
]	O
)	O
;	O
upn	long
=	O
up	*
[	O
n	long
]	O
;	O
up	*
[	O
1	int
]	O
=	O
mpn_addmul_2	function
(	O
up	*
,	O
mp	*
,	O
n	long
,	O
q	*
)	O
;	O
up	*
[	O
0	int
]	O
=	O
up	*
[	O
n	long
]	O
;	O
up	*
[	O
n	long
]	O
=	O
upn	long
;	O
up	*
+=	O
2	int
;	O
}	O
cy	long
=	O
mpn_add_n	O
(	O
rp	*
,	O
up	*
,	O
up	*
-	O
n	long
,	O
n	long
)	O
;	O
return	O
cy	long
;	O
}	O