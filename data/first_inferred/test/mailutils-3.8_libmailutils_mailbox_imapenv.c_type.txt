void	O
mu_message_imapenvelope_free	function
(	O
struct	O
mu_imapenvelope	struct
*	O
env	*
)	O
{	O
if	O
(	O
!	O
env	*
)	O
return	O
;	O
free	function
(	O
env	*
->	O
subject	*
)	O
;	O
mu_address_destroy	function
(	O
&	O
env	*
->	O
from	*
)	O
;	O
mu_address_destroy	function
(	O
&	O
env	*
->	O
sender	*
)	O
;	O
mu_address_destroy	function
(	O
&	O
env	*
->	O
reply_to	*
)	O
;	O
mu_address_destroy	function
(	O
&	O
env	*
->	O
to	*
)	O
;	O
mu_address_destroy	function
(	O
&	O
env	*
->	O
cc	*
)	O
;	O
mu_address_destroy	function
(	O
&	O
env	*
->	O
bcc	*
)	O
;	O
free	function
(	O
env	*
->	O
in_reply_to	*
)	O
;	O
free	function
(	O
env	*
->	O
message_id	*
)	O
;	O
free	function
(	O
env	*
)	O
;	O
}	O
int	O
mu_message_get_imapenvelope	function
(	O
mu_message_t	*
msg	*
,	O
struct	O
mu_imapenvelope	struct
*	O
*	O
pimapenvelope	*
)	O
{	O
struct	O
mu_imapenvelope	struct
*	O
imapenvelope	*
;	O
int	O
rc	int
;	O
if	O
(	O
msg	*
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pimapenvelope	*
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
msg	*
->	O
_imapenvelope	*
)	O
return	O
msg	*
->	O
_imapenvelope	*
(	O
msg	*
,	O
pimapenvelope	*
)	O
;	O
imapenvelope	*
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
imapenvelope	array
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
imapenvelope	*
)	O
return	O
ENOMEM	int
;	O
do	O
{	O
mu_header_t	*
hdr	*
;	O
mu_envelope_t	*
env	*
;	O
const	O
char	O
*	O
s	*
;	O
if	O
(	O
(	O
rc	int
=	O
mu_message_get_envelope	function
(	O
msg	*
,	O
&	O
env	*
)	O
)	O
)	O
break	O
;	O
if	O
(	O
(	O
rc	int
=	O
mu_envelope_sget_date	function
(	O
env	*
,	O
&	O
s	*
)	O
)	O
)	O
break	O
;	O
if	O
(	O
(	O
rc	int
=	O
mu_scan_datetime	function
(	O
s	*
,	O
MU_DATETIME_FROM	*
,	O
&	O
imapenvelope	*
->	O
date	struct
,	O
&	O
imapenvelope	*
->	O
tz	*
,	O
NULL	O
)	O
)	O
)	O
break	O
;	O
if	O
(	O
(	O
rc	int
=	O
mu_message_get_header	function
(	O
msg	*
,	O
&	O
hdr	*
)	O
)	O
)	O
break	O
;	O
rc	int
=	O
mu_header_get_address	function
(	O
hdr	*
,	O
MU_HEADER_FROM	*
,	O
&	O
imapenvelope	*
->	O
from	*
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
break	O
;	O
rc	int
=	O
mu_header_get_address	function
(	O
hdr	*
,	O
MU_HEADER_SENDER	*
,	O
&	O
imapenvelope	*
->	O
sender	*
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
break	O
;	O
rc	int
=	O
mu_header_get_address	function
(	O
hdr	*
,	O
MU_HEADER_REPLY_TO	*
,	O
&	O
imapenvelope	*
->	O
reply_to	*
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
break	O
;	O
rc	int
=	O
mu_header_get_address	function
(	O
hdr	*
,	O
MU_HEADER_TO	*
,	O
&	O
imapenvelope	*
->	O
to	*
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
break	O
;	O
rc	int
=	O
mu_header_get_address	function
(	O
hdr	*
,	O
MU_HEADER_CC	*
,	O
&	O
imapenvelope	*
->	O
cc	*
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
break	O
;	O
rc	int
=	O
mu_header_get_address	function
(	O
hdr	*
,	O
MU_HEADER_BCC	*
,	O
&	O
imapenvelope	*
->	O
bcc	*
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
break	O
;	O
rc	int
=	O
mu_header_aget_value_unfold	function
(	O
hdr	*
,	O
MU_HEADER_SUBJECT	*
,	O
&	O
imapenvelope	*
->	O
subject	*
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
break	O
;	O
rc	int
=	O
mu_header_aget_value_unfold	function
(	O
hdr	*
,	O
MU_HEADER_IN_REPLY_TO	*
,	O
&	O
imapenvelope	*
->	O
in_reply_to	*
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
break	O
;	O
rc	int
=	O
mu_header_aget_value_unfold	function
(	O
hdr	*
,	O
MU_HEADER_MESSAGE_ID	*
,	O
&	O
imapenvelope	*
->	O
message_id	*
)	O
;	O
}	O
while	O
(	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
mu_message_imapenvelope_free	function
(	O
imapenvelope	*
)	O
;	O
else	O
*	O
pimapenvelope	*
=	O
imapenvelope	*
;	O
return	O
rc	int
;	O
}	O
int	O
mu_message_set_imapenvelope	function
(	O
mu_message_t	*
msg	*
,	O
int	O
(	O
*	O
_imapenvelope	*
)	O
(	O
mu_message_t	*
,	O
struct	O
mu_imapenvelope	struct
*	O
*	O
)	O
,	O
void	O
*	O
owner	*
)	O
{	O
if	O
(	O
msg	*
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
msg	*
->	O
owner	*
!=	O
owner	*
)	O
return	O
EACCES	int
;	O
msg	*
->	O
_imapenvelope	*
=	O
_imapenvelope	*
;	O
return	O
0	int
;	O
}	O