int	O
retrieve_env	function
(	O
void	O
*	O
item	*
,	O
void	O
*	O
data	*
,	O
size_t	long
idx	long
,	O
char	O
*	O
*	O
pval	*
)	O
{	O
mu_sieve_machine_t	*
mach	*
;	O
if	O
(	O
idx	long
)	O
return	O
MU_ERR_NOENT	O
;	O
mach	*
=	O
data	*
;	O
return	O
mu_sieve_get_environ	function
(	O
mach	*
,	O
item	*
,	O
pval	*
)	O
;	O
}	O
static	O
int	O
sieve_test_environment	function
(	O
mu_sieve_machine_t	*
mach	*
)	O
{	O
mu_sieve_value_t	struct
*	O
name	*
,	O
*	O
key_list	*
;	O
name	*
=	O
mu_sieve_get_arg_untyped	function
(	O
mach	*
,	O
0	int
)	O
;	O
key_list	long
=	O
mu_sieve_get_arg_untyped	function
(	O
mach	*
,	O
1	int
)	O
;	O
return	O
mu_sieve_vlist_compare	function
(	O
mach	*
,	O
name	*
,	O
key_list	*
,	O
retrieve_env	*
,	O
NULL	O
,	O
mach	*
)	O
;	O
}	O
static	O
mu_sieve_data_type	enum
environ_args	array
[	O
]	O
=	O
{	O
SVT_STRING	int
,	O
SVT_STRING_LIST	int
,	O
SVT_VOID	int
}	O
;	O
static	O
mu_sieve_tag_group_t	struct
environ_tag_groups	array
[	O
]	O
=	O
{	O
{	O
mu_sieve_match_part_tags	*
,	O
mu_sieve_match_part_checker	function
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
int	O
mu_sieve_require_environment	function
(	O
mu_sieve_machine_t	*
mach	*
)	O
{	O
mu_sieve_register_test	function
(	O
mach	*
,	O
"environment"	*
,	O
sieve_test_environment	*
,	O
environ_args	*
,	O
environ_tag_groups	*
,	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
std_name_get	function
(	O
mu_sieve_machine_t	*
mach	*
)	O
{	O
return	O
strdup	function
(	O
PACKAGE_NAME	*
)	O
;	O
}	O
static	O
char	O
*	O
std_version_get	function
(	O
mu_sieve_machine_t	*
mach	*
)	O
{	O
return	O
strdup	function
(	O
PACKAGE_VERSION	*
)	O
;	O
}	O
static	O
char	O
*	O
std_host_get	function
(	O
mu_sieve_machine_t	*
mach	*
)	O
{	O
char	O
*	O
host	*
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_get_host_name	function
(	O
&	O
host	*
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
return	O
host	*
;	O
return	O
NULL	O
;	O
}	O
static	O
char	O
*	O
std_domain_get	function
(	O
mu_sieve_machine_t	*
mach	*
)	O
{	O
char	O
*	O
host	*
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_get_host_name	function
(	O
&	O
host	*
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
char	O
*	O
p	*
=	O
strchr	function
(	O
host	*
,	O
'.'	O
)	O
;	O
if	O
(	O
p	*
)	O
{	O
p	*
=	O
strdup	function
(	O
p	*
+	O
1	int
)	O
;	O
free	function
(	O
host	*
)	O
;	O
return	O
p	*
;	O
}	O
return	O
host	*
;	O
}	O
return	O
NULL	O
;	O
}	O
struct	O
stdenviron	struct
{	O
char	O
*	O
name	*
;	O
char	O
*	O
(	O
*	O
get	*
)	O
(	O
mu_sieve_machine_t	*
)	O
;	O
int	O
(	O
*	O
set	*
)	O
(	O
mu_sieve_machine_t	*
,	O
char	O
const	O
*	O
,	O
char	O
const	O
*	O
value	*
)	O
;	O
}	O
;	O
static	O
struct	O
stdenviron	struct
stdenv	array
[	O
]	O
=	O
{	O
{	O
"domain"	*
,	O
std_domain_get	*
,	O
NULL	O
}	O
,	O
{	O
"host"	*
,	O
std_host_get	*
,	O
NULL	O
}	O
,	O
{	O
"name"	*
,	O
std_name_get	*
,	O
NULL	O
}	O
,	O
{	O
"version"	*
,	O
std_version_get	*
,	O
NULL	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
struct	O
stdenviron	struct
const	O
*	O
stdenv_find	function
(	O
char	O
const	O
*	O
name	*
)	O
{	O
struct	O
stdenviron	struct
const	O
*	O
p	*
;	O
for	O
(	O
p	*
=	O
stdenv	*
;	O
p	*
->	O
name	*
;	O
p	*
++	O
)	O
if	O
(	O
strcmp	function
(	O
p	*
->	O
name	*
,	O
name	*
)	O
==	O
0	int
)	O
return	O
p	*
;	O
return	O
NULL	O
;	O
}	O
static	O
char	O
*	O
stdenv_get	function
(	O
mu_sieve_machine_t	*
mach	*
,	O
char	O
const	O
*	O
name	*
)	O
{	O
struct	O
stdenviron	struct
const	O
*	O
p	*
=	O
stdenv_find	function
(	O
name	*
)	O
;	O
if	O
(	O
!	O
p	*
)	O
return	O
NULL	O
;	O
return	O
p	*
->	O
get	*
(	O
mach	*
)	O
;	O
}	O
static	O
int	O
stdenv_set	function
(	O
mu_sieve_machine_t	*
mach	*
,	O
char	O
const	O
*	O
name	*
,	O
char	O
const	O
*	O
value	*
)	O
{	O
struct	O
stdenviron	struct
const	O
*	O
p	*
=	O
stdenv_find	function
(	O
name	*
)	O
;	O
if	O
(	O
!	O
p	*
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
!	O
p	*
->	O
set	*
)	O
return	O
EACCES	int
;	O
return	O
p	*
->	O
set	*
(	O
mach	*
,	O
name	*
,	O
value	*
)	O
;	O
}	O
int	O
mu_sieve_get_environ	function
(	O
mu_sieve_machine_t	*
mach	*
,	O
char	O
const	O
*	O
name	*
,	O
char	O
*	O
*	O
retval	*
)	O
{	O
char	O
*	O
p	*
;	O
p	*
=	O
stdenv_get	function
(	O
mach	*
,	O
name	*
)	O
;	O
if	O
(	O
p	*
)	O
{	O
*	O
retval	*
=	O
p	*
;	O
return	O
0	int
;	O
}	O
if	O
(	O
!	O
mach	*
->	O
exenv	*
)	O
return	O
MU_ERR_NOENT	O
;	O
p	*
=	O
mu_assoc_get	function
(	O
mach	*
->	O
exenv	*
,	O
name	*
)	O
;	O
if	O
(	O
p	*
)	O
{	O
*	O
retval	*
=	O
strdup	function
(	O
p	*
)	O
;	O
if	O
(	O
!	O
*	O
retval	*
)	O
return	O
errno	O
;	O
}	O
else	O
return	O
MU_ERR_NOENT	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_sieve_set_environ	function
(	O
mu_sieve_machine_t	*
mach	*
,	O
char	O
const	O
*	O
name	*
,	O
char	O
const	O
*	O
value	*
)	O
{	O
int	O
rc	int
;	O
rc	int
=	O
stdenv_set	function
(	O
mach	*
,	O
name	*
,	O
value	*
)	O
;	O
if	O
(	O
rc	int
==	O
MU_ERR_NOENT	O
)	O
{	O
char	O
*	O
*	O
pptr	*
;	O
if	O
(	O
!	O
mach	*
->	O
exenv	*
)	O
{	O
int	O
rc	int
=	O
mu_assoc_create	function
(	O
&	O
mach	*
->	O
exenv	*
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
rc	int
=	O
mu_assoc_install_ref	function
(	O
mach	*
->	O
exenv	*
,	O
name	*
,	O
&	O
pptr	*
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
||	O
rc	int
==	O
MU_ERR_EXISTS	O
)	O
{	O
char	O
*	O
copy	*
=	O
strdup	function
(	O
value	*
)	O
;	O
if	O
(	O
!	O
copy	*
)	O
rc	int
=	O
errno	O
;	O
else	O
{	O
*	O
pptr	*
=	O
copy	*
;	O
rc	int
=	O
0	int
;	O
}	O
}	O
}	O
return	O
rc	int
;	O
}	O