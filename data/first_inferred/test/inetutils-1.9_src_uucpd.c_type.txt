void	O
dologin	function
(	O
struct	O
passwd	struct
*	O
pw	pointer
,	O
struct	O
sockaddr_in	struct
*	O
sin	pointer
)	O
;	O
struct	O
sockaddr_in	struct
hisctladdr	struct
;	O
int	O
hisaddrlen	int
=	O
sizeof	O
hisctladdr	pointer
;	O
struct	O
sockaddr_in	struct
myctladdr	struct
;	O
int	O
mypid	int
;	O
char	O
Username	array
[	O
64	int
]	O
;	O
char	O
*	O
nenv	array
[	O
]	O
=	O
{	O
Username	pointer
,	O
NULL	O
,	O
}	O
;	O
extern	O
char	O
*	O
*	O
environ	pointer
;	O
static	O
struct	O
argp	struct
argp	struct
=	O
{	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
"TCP/IP server for uucico"	function
}	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
register	O
int	O
s	pointer
;	O
struct	O
servent	struct
*	O
sp	pointer
;	O
void	O
dologout	function
(	O
void	O
)	O
;	O
set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
iu_argp_init	O
(	O
"uucpd"	pointer
,	O
default_program_authors	array
)	O
;	O
argp_parse	function
(	O
&	O
argp	struct
,	O
argc	int
,	O
argv	pointer
,	O
0	int
,	O
NULL	O
,	O
NULL	O
)	O
;	O
environ	pointer
=	O
nenv	pointer
;	O
sp	pointer
=	O
getservbyname	function
(	O
"uucp"	pointer
,	O
"tcp"	pointer
)	O
;	O
if	O
(	O
sp	pointer
==	O
NULL	O
)	O
{	O
perror	function
(	O
"uucpd: getservbyname"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
fork	function
(	O
)	O
)	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
if	O
(	O
(	O
s	pointer
=	O
open	function
(	O
PATH_TTY	int
,	O
O_RDWR	int
)	O
)	O
>=	O
0	int
)	O
{	O
ioctl	function
(	O
s	int
,	O
TIOCNOTTY	int
,	O
(	O
char	O
*	O
)	O
0	int
)	O
;	O
close	function
(	O
s	int
)	O
;	O
}	O
memset	function
(	O
&	O
myctladdr	struct
,	O
0	int
,	O
sizeof	O
(	O
myctladdr	struct
)	O
)	O
;	O
myctladdr	struct
.	O
sin_family	short
=	O
AF_INET	O
;	O
myctladdr	struct
.	O
sin_port	short
=	O
sp	pointer
->	O
s_port	int
;	O
}	O
static	O
int	O
readline	function
(	O
register	O
char	O
*	O
p	pointer
,	O
register	O
int	O
n	int
)	O
{	O
char	O
c	int
;	O
while	O
(	O
n	int
--	O
>	O
0	int
)	O
{	O
if	O
(	O
read	pointer
(	O
0	int
,	O
&	O
c	int
,	O
1	int
)	O
<=	O
0	int
)	O
return	O
(	O
-	O
1	int
)	O
;	O
c	int
&=	O
0177	int
;	O
if	O
(	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
'\r'	O
)	O
{	O
*	O
p	pointer
=	O
'\0'	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
*	O
p	pointer
++	O
=	O
c	int
;	O
}	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
void	O
doit	function
(	O
struct	O
sockaddr_in	struct
*	O
sinp	pointer
)	O
{	O
struct	O
passwd	struct
*	O
pw	pointer
,	O
*	O
getpwnam	function
(	O
const	O
char	O
*	O
)	O
;	O
char	O
user	pointer
[	O
64	int
]	O
,	O
passwd	pointer
[	O
64	int
]	O
;	O
char	O
*	O
xpasswd	pointer
;	O
alarm	function
(	O
60	int
)	O
;	O
printf	function
(	O
"login: "	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
if	O
(	O
readline	function
(	O
user	pointer
,	O
sizeof	O
user	pointer
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"user read\n"	pointer
)	O
;	O
return	O
;	O
}	O
user	pointer
[	O
8	int
]	O
=	O
'\0'	O
;	O
pw	pointer
=	O
getpwnam	function
(	O
user	pointer
)	O
;	O
if	O
(	O
pw	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"user unknown\n"	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
strcmp	function
(	O
pw	pointer
->	O
pw_shell	pointer
,	O
PATH_UUCICO	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Login incorrect."	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
pw	pointer
->	O
pw_passwd	pointer
&&	O
*	O
pw	pointer
->	O
pw_passwd	pointer
!=	O
'\0'	O
)	O
{	O
printf	function
(	O
"Password: "	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
if	O
(	O
readline	function
(	O
passwd	struct
,	O
sizeof	O
passwd	pointer
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"passwd read\n"	pointer
)	O
;	O
return	O
;	O
}	O
xpasswd	pointer
=	O
crypt	function
(	O
passwd	struct
,	O
pw	pointer
->	O
pw_passwd	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
xpasswd	pointer
,	O
pw	pointer
->	O
pw_passwd	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Login incorrect."	pointer
)	O
;	O
return	O
;	O
}	O
}	O
alarm	function
(	O
0	int
)	O
;	O
sprintf	function
(	O
Username	pointer
,	O
"USER=%s"	pointer
,	O
user	pointer
)	O
;	O
dologin	function
(	O
pw	pointer
,	O
sinp	pointer
)	O
;	O
setgid	function
(	O
pw	pointer
->	O
pw_gid	int
)	O
;	O
chdir	function
(	O
pw	pointer
->	O
pw_dir	pointer
)	O
;	O
setuid	function
(	O
pw	pointer
->	O
pw_uid	int
)	O
;	O
perror	function
(	O
"uucico server: execl"	pointer
)	O
;	O
}	O
void	O
dologout	function
(	O
void	O
)	O
{	O
int	O
pid	int
;	O
while	O
(	O
(	O
pid	int
=	O
wait3	function
(	O
0	int
,	O
WNOHANG	int
,	O
0	int
)	O
)	O
>	O
0	int
)	O
{	O
char	O
line	array
[	O
100	int
]	O
;	O
sprintf	function
(	O
line	pointer
,	O
"uucp%.4d"	pointer
,	O
pid	int
)	O
;	O
logwtmp	function
(	O
line	array
,	O
""	pointer
,	O
""	pointer
)	O
;	O
}	O
}	O
void	O
dologin	function
(	O
struct	O
passwd	struct
*	O
pw	pointer
,	O
struct	O
sockaddr_in	struct
*	O
sin	pointer
)	O
{	O
char	O
line	array
[	O
32	int
]	O
;	O
char	O
remotehost	array
[	O
32	int
]	O
;	O
int	O
f	pointer
;	O
struct	O
hostent	struct
*	O
hp	pointer
=	O
gethostbyaddr	function
(	O
(	O
char	O
*	O
)	O
&	O
sin	struct
->	O
sin_addr	struct
,	O
sizeof	O
(	O
struct	O
in_addr	struct
)	O
,	O
AF_INET	O
)	O
;	O
if	O
(	O
hp	pointer
)	O
{	O
strncpy	function
(	O
remotehost	O
,	O
hp	pointer
->	O
h_name	pointer
,	O
sizeof	O
(	O
remotehost	pointer
)	O
)	O
;	O
endhostent	function
(	O
)	O
;	O
}	O
else	O
strncpy	function
(	O
remotehost	pointer
,	O
inet_ntoa	function
(	O
sin	pointer
->	O
sin_addr	struct
)	O
,	O
sizeof	O
(	O
remotehost	struct
)	O
)	O
;	O
sprintf	function
(	O
line	pointer
,	O
"uucp%.4d"	pointer
,	O
getpid	function
(	O
)	O
)	O
;	O
logwtmp	function
(	O
line	pointer
,	O
pw	pointer
->	O
pw_name	pointer
,	O
remotehost	int
)	O
;	O
f	pointer
=	O
open	function
(	O
PATH_LASTLOG	int
,	O
O_RDWR	int
)	O
;	O
if	O
(	O
f	int
>=	O
0	int
)	O
{	O
struct	O
lastlog	O
ll	int
;	O
time_t	long
t	long
;	O
time	function
(	O
&	O
t	long
)	O
;	O
ll	struct
.	O
ll_time	pointer
=	O
t	pointer
;	O
lseek	function
(	O
f	pointer
,	O
(	O
long	O
)	O
pw	pointer
->	O
pw_uid	int
*	O
sizeof	O
(	O
struct	O
lastlog	struct
)	O
,	O
0	int
)	O
;	O
strcpy	function
(	O
line	pointer
,	O
remotehost	pointer
)	O
;	O
SCPYN	function
(	O
ll	struct
.	O
ll_line	pointer
,	O
line	int
)	O
;	O
SCPYN	function
(	O
ll	struct
.	O
ll_host	int
,	O
remotehost	int
)	O
;	O
write	function
(	O
f	pointer
,	O
(	O
char	O
*	O
)	O
&	O
ll	int
,	O
sizeof	O
ll	pointer
)	O
;	O
close	pointer
(	O
f	int
)	O
;	O
}	O
}	O