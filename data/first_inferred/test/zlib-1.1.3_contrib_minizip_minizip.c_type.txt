uLong	long
filetime	function
(	O
f	pointer
,	O
tmzip	pointer
,	O
dt	pointer
)	O
char	O
*	O
f	pointer
;	O
tm_zip	struct
*	O
tmzip	pointer
;	O
uLong	long
*	O
dt	pointer
;	O
{	O
int	O
ret	int
=	O
0	int
;	O
struct	O
stat	struct
s	pointer
;	O
struct	O
tm	struct
*	O
filedate	pointer
;	O
time_t	long
tm_t	long
=	O
0	int
;	O
if	O
(	O
strcmp	function
(	O
f	pointer
,	O
"-"	pointer
)	O
!=	O
0	int
)	O
{	O
char	O
name	array
[	O
MAXFILENAME	O
]	O
;	O
int	O
len	int
=	O
strlen	function
(	O
f	pointer
)	O
;	O
strcpy	function
(	O
name	array
,	O
f	pointer
)	O
;	O
if	O
(	O
name	array
[	O
len	int
-	O
1	int
]	O
==	O
'/'	O
)	O
name	array
[	O
len	int
-	O
1	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
stat	struct
(	O
name	array
,	O
&	O
s	pointer
)	O
==	O
0	int
)	O
{	O
tm_t	long
=	O
s	pointer
.	O
st_mtime	O
;	O
ret	int
=	O
1	int
;	O
}	O
}	O
filedate	pointer
=	O
localtime	function
(	O
&	O
tm_t	long
)	O
;	O
tmzip	pointer
->	O
tm_sec	int
=	O
filedate	pointer
->	O
tm_sec	int
;	O
tmzip	pointer
->	O
tm_min	int
=	O
filedate	pointer
->	O
tm_min	int
;	O
tmzip	pointer
->	O
tm_hour	int
=	O
filedate	pointer
->	O
tm_hour	int
;	O
tmzip	pointer
->	O
tm_mday	int
=	O
filedate	pointer
->	O
tm_mday	int
;	O
tmzip	pointer
->	O
tm_mon	int
=	O
filedate	pointer
->	O
tm_mon	int
;	O
tmzip	pointer
->	O
tm_year	int
=	O
filedate	pointer
->	O
tm_year	int
;	O
return	O
ret	int
;	O
}	O
int	O
check_exist_file	function
(	O
filename	pointer
)	O
const	O
char	O
*	O
filename	pointer
;	O
{	O
FILE	struct
*	O
ftestexist	pointer
;	O
int	O
ret	int
=	O
1	int
;	O
ftestexist	pointer
=	O
fopen	function
(	O
filename	pointer
,	O
"rb"	pointer
)	O
;	O
if	O
(	O
ftestexist	pointer
==	O
NULL	O
)	O
ret	int
=	O
0	int
;	O
else	O
fclose	function
(	O
ftestexist	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
void	O
do_banner	function
(	O
)	O
{	O
printf	function
(	O
"MiniZip 0.15, demo of zLib + Zip package written by Gilles Vollant\n"	pointer
)	O
;	O
printf	function
(	O
"more info at http://wwww.winimage/zLibDll/unzip.htm\n\n"	pointer
)	O
;	O
}	O
void	O
do_help	function
(	O
)	O
{	O
printf	function
(	O
"Usage : minizip [-o] file.zip [files_to_add]\n\n"	pointer
)	O
;	O
}	O
int	O
main	function
(	O
argc	int
,	O
argv	array
)	O
int	O
argc	int
;	O
char	O
*	O
argv	array
[	O
]	O
;	O
{	O
int	O
i	int
;	O
int	O
opt_overwrite	int
=	O
0	int
;	O
int	O
opt_compress_level	int
=	O
Z_DEFAULT_COMPRESSION	O
;	O
int	O
zipfilenamearg	int
=	O
0	int
;	O
char	O
filename_try	array
[	O
MAXFILENAME	O
]	O
;	O
int	O
zipok	int
;	O
int	O
err	int
=	O
0	int
;	O
int	O
size_buf	int
=	O
0	int
;	O
void	O
*	O
buf	pointer
=	O
NULL	O
,	O
do_banner	function
(	O
)	O
;	O
if	O
(	O
argc	int
==	O
1	int
)	O
{	O
do_help	function
(	O
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
else	O
{	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
(	O
*	O
argv	array
[	O
i	int
]	O
)	O
==	O
'-'	O
)	O
{	O
const	O
char	O
*	O
p	pointer
=	O
argv	array
[	O
i	int
]	O
+	O
1	int
;	O
while	O
(	O
(	O
*	O
p	pointer
)	O
!=	O
'\0'	O
)	O
{	O
char	O
c	int
=	O
*	O
(	O
p	pointer
++	O
)	O
;	O
;	O
if	O
(	O
(	O
c	int
==	O
'o'	O
)	O
||	O
(	O
c	int
==	O
'O'	O
)	O
)	O
opt_overwrite	int
=	O
1	int
;	O
if	O
(	O
(	O
c	int
>=	O
'0'	O
)	O
&&	O
(	O
c	int
<=	O
'9'	O
)	O
)	O
opt_compress_level	int
=	O
c	int
-	O
'0'	O
;	O
}	O
}	O
else	O
if	O
(	O
zipfilenamearg	int
==	O
0	int
)	O
zipfilenamearg	int
=	O
i	int
;	O
}	O
}	O
size_buf	int
=	O
WRITEBUFFERSIZE	O
;	O
buf	pointer
=	O
(	O
void	O
*	O
)	O
malloc	function
(	O
size_buf	int
)	O
;	O
if	O
(	O
buf	pointer
==	O
NULL	O
)	O
{	O
printf	function
(	O
"Error allocating memory\n"	pointer
)	O
;	O
return	O
ZIP_INTERNALERROR	O
;	O
}	O
if	O
(	O
zipfilenamearg	int
==	O
0	int
)	O
zipok	int
=	O
0	int
;	O
else	O
{	O
int	O
i	int
,	O
len	int
;	O
int	O
dot_found	int
=	O
0	int
;	O
zipok	int
=	O
1	int
;	O
strcpy	function
(	O
filename_try	array
,	O
argv	array
[	O
zipfilenamearg	int
]	O
)	O
;	O
len	int
=	O
strlen	function
(	O
filename_try	array
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len	int
;	O
i	int
++	O
)	O
if	O
(	O
filename_try	array
[	O
i	int
]	O
==	O
'.'	O
)	O
dot_found	int
=	O
1	int
;	O
if	O
(	O
dot_found	int
==	O
0	int
)	O
strcat	function
(	O
filename_try	array
,	O
".zip"	pointer
)	O
;	O
if	O
(	O
opt_overwrite	int
==	O
0	int
)	O
if	O
(	O
check_exist_file	function
(	O
filename_try	array
)	O
!=	O
0	int
)	O
{	O
char	O
rep	char
;	O
do	O
{	O
char	O
answer	array
[	O
128	int
]	O
;	O
printf	function
(	O
"The file %s exist. Overwrite ? [y]es, [n]o : "	pointer
,	O
filename_try	array
)	O
;	O
scanf	function
(	O
"%1s"	pointer
,	O
answer	array
)	O
;	O
rep	char
=	O
answer	array
[	O
0	int
]	O
;	O
if	O
(	O
(	O
rep	char
>=	O
'a'	O
)	O
&&	O
(	O
rep	char
<=	O
'z'	O
)	O
)	O
rep	char
-=	O
0x20	int
;	O
}	O
while	O
(	O
(	O
rep	char
!=	O
'Y'	O
)	O
&&	O
(	O
rep	char
!=	O
'N'	O
)	O
)	O
;	O
if	O
(	O
rep	char
==	O
'N'	O
)	O
zipok	int
=	O
0	int
;	O
}	O
}	O
if	O
(	O
zipok	int
==	O
1	int
)	O
{	O
zipFile	pointer
zf	pointer
;	O
int	O
errclose	int
;	O
zf	pointer
=	O
zipOpen	function
(	O
filename_try	array
,	O
0	int
)	O
;	O
if	O
(	O
zf	pointer
==	O
NULL	O
)	O
{	O
printf	function
(	O
"error opening %s\n"	pointer
,	O
filename_try	array
)	O
;	O
err	int
=	O
ZIP_ERRNO	O
;	O
}	O
else	O
printf	function
(	O
"creating %s\n"	pointer
,	O
filename_try	array
)	O
;	O
for	O
(	O
i	int
=	O
zipfilenamearg	int
+	O
1	int
;	O
(	O
i	int
<	O
argc	int
)	O
&&	O
(	O
err	int
==	O
ZIP_OK	O
)	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
(	O
(	O
*	O
(	O
argv	array
[	O
i	int
]	O
)	O
)	O
!=	O
'-'	O
)	O
&&	O
(	O
(	O
*	O
(	O
argv	array
[	O
i	int
]	O
)	O
)	O
!=	O
'/'	O
)	O
)	O
{	O
FILE	struct
*	O
fin	pointer
;	O
int	O
size_read	int
;	O
const	O
char	O
*	O
filenameinzip	pointer
=	O
argv	array
[	O
i	int
]	O
;	O
zip_fileinfo	struct
zi	struct
;	O
zi	struct
.	O
tmz_date	struct
.	O
tm_sec	int
=	O
zi	struct
.	O
tmz_date	struct
.	O
tm_min	int
=	O
zi	struct
.	O
tmz_date	struct
.	O
tm_hour	int
=	O
zi	struct
.	O
tmz_date	struct
.	O
tm_mday	int
=	O
zi	struct
.	O
tmz_date	struct
.	O
tm_min	int
=	O
zi	struct
.	O
tmz_date	struct
.	O
tm_year	int
=	O
0	int
;	O
zi	struct
.	O
dosDate	long
=	O
0	int
;	O
zi	struct
.	O
internal_fa	long
=	O
0	int
;	O
zi	struct
.	O
external_fa	long
=	O
0	int
;	O
filetime	function
(	O
filenameinzip	pointer
,	O
&	O
zi	struct
.	O
tmz_date	struct
,	O
&	O
zi	struct
.	O
dosDate	long
)	O
;	O
err	int
=	O
zipOpenNewFileInZip	function
(	O
zf	pointer
,	O
filenameinzip	pointer
,	O
&	O
zi	struct
,	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
(	O
opt_compress_level	int
!=	O
0	int
)	O
?	O
Z_DEFLATED	int
:	O
0	int
,	O
opt_compress_level	int
)	O
;	O
if	O
(	O
err	int
!=	O
ZIP_OK	O
)	O
printf	function
(	O
"error in opening %s in zipfile\n"	pointer
,	O
filenameinzip	pointer
)	O
;	O
else	O
{	O
fin	pointer
=	O
fopen	function
(	O
filenameinzip	pointer
,	O
"rb"	pointer
)	O
;	O
if	O
(	O
fin	pointer
==	O
NULL	O
)	O
{	O
err	int
=	O
ZIP_ERRNO	O
;	O
printf	function
(	O
"error in opening %s for reading\n"	pointer
,	O
filenameinzip	pointer
)	O
;	O
}	O
}	O
if	O
(	O
err	int
==	O
ZIP_OK	O
)	O
do	O
{	O
err	int
=	O
ZIP_OK	O
;	O
size_read	int
=	O
fread	function
(	O
buf	pointer
,	O
1	int
,	O
size_buf	int
,	O
fin	pointer
)	O
;	O
if	O
(	O
size_read	int
<	O
size_buf	int
)	O
if	O
(	O
feof	function
(	O
fin	pointer
)	O
==	O
0	int
)	O
{	O
printf	function
(	O
"error in reading %s\n"	pointer
,	O
filenameinzip	pointer
)	O
;	O
err	int
=	O
ZIP_ERRNO	O
;	O
}	O
if	O
(	O
size_read	int
>	O
0	int
)	O
{	O
err	int
=	O
zipWriteInFileInZip	function
(	O
zf	pointer
,	O
buf	pointer
,	O
size_read	int
)	O
;	O
if	O
(	O
err	int
<	O
0	int
)	O
{	O
printf	function
(	O
"error in writing %s in the zipfile\n"	pointer
,	O
filenameinzip	pointer
)	O
;	O
}	O
}	O
}	O
while	O
(	O
(	O
err	int
==	O
ZIP_OK	O
)	O
&&	O
(	O
size_read	int
>	O
0	int
)	O
)	O
;	O
fclose	function
(	O
fin	pointer
)	O
;	O
if	O
(	O
err	int
<	O
0	int
)	O
err	int
=	O
ZIP_ERRNO	O
;	O
else	O
{	O
err	int
=	O
zipCloseFileInZip	function
(	O
zf	pointer
)	O
;	O
if	O
(	O
err	int
!=	O
ZIP_OK	O
)	O
printf	function
(	O
"error in closing %s in the zipfile\n"	pointer
,	O
filenameinzip	pointer
)	O
;	O
}	O
}	O
}	O
errclose	int
=	O
zipClose	function
(	O
zf	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
errclose	int
!=	O
ZIP_OK	O
)	O
printf	function
(	O
"error in closing %s\n"	pointer
,	O
filename_try	array
)	O
;	O
}	O
free	function
(	O
buf	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O