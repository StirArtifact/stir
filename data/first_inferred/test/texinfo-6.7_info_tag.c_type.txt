struct	O
tag_handler	struct
{	O
const	O
char	O
*	O
name	*
;	O
size_t	long
len	long
;	O
int	O
(	O
*	O
handler	*
)	O
(	O
char	O
*	O
,	O
struct	O
text_buffer	struct
*	O
)	O
;	O
}	O
;	O
struct	O
info_tag	struct
{	O
struct	O
info_tag	struct
*	O
next	*
;	O
char	O
*	O
kw	*
;	O
char	O
*	O
val	*
;	O
}	O
;	O
static	O
void	O
info_tag_free	function
(	O
struct	O
info_tag	struct
*	O
tag	*
)	O
{	O
while	O
(	O
tag	*
)	O
{	O
struct	O
info_tag	struct
*	O
next	*
=	O
tag	*
->	O
next	*
;	O
free	function
(	O
tag	*
->	O
kw	*
)	O
;	O
free	function
(	O
tag	*
->	O
val	*
)	O
;	O
free	function
(	O
tag	*
)	O
;	O
tag	*
=	O
next	*
;	O
}	O
}	O
static	O
struct	O
info_tag	struct
*	O
info_tag_find	function
(	O
struct	O
info_tag	struct
*	O
tag	*
,	O
const	O
char	O
*	O
kw	*
)	O
{	O
for	O
(	O
;	O
tag	*
;	O
tag	*
=	O
tag	*
->	O
next	*
)	O
if	O
(	O
strcmp	function
(	O
tag	*
->	O
kw	*
,	O
kw	*
)	O
==	O
0	int
)	O
return	O
tag	*
;	O
return	O
NULL	O
;	O
}	O
static	O
struct	O
info_tag	struct
*	O
tag_found_keyword	function
(	O
struct	O
text_buffer	struct
*	O
tmpbuf_ptr	*
,	O
char	O
*	O
*	O
kw	*
)	O
{	O
struct	O
info_tag	struct
*	O
tag	*
=	O
xmalloc	function
(	O
sizeof	O
(	O
*	O
tag	*
)	O
)	O
;	O
tag	*
->	O
next	*
=	O
NULL	O
;	O
text_buffer_add_char	function
(	O
tmpbuf_ptr	*
,	O
0	int
)	O
;	O
if	O
(	O
*	O
kw	*
!=	O
tmpbuf_ptr	*
->	O
base	*
)	O
{	O
*	O
kw	*
=	O
tmpbuf_ptr	*
->	O
base	*
;	O
}	O
tag	*
->	O
kw	*
=	O
xstrdup	function
(	O
*	O
kw	*
)	O
;	O
tag	*
->	O
val	*
=	O
xstrdup	function
(	O
*	O
kw	*
+	O
strlen	function
(	O
*	O
kw	*
)	O
+	O
1	int
)	O
;	O
text_buffer_reset	function
(	O
tmpbuf_ptr	*
)	O
;	O
return	O
tag	*
;	O
}	O
static	O
int	O
tag_image	function
(	O
char	O
*	O
text	*
,	O
struct	O
text_buffer	struct
*	O
outbuf	*
)	O
{	O
mbi_iterator_t	struct
iter	struct
;	O
enum	O
{	O
state_kw	int
,	O
state_val	int
,	O
state_qstr	int
,	O
state_delim	int
}	O
state	*
=	O
state_kw	int
;	O
struct	O
text_buffer	struct
tmpbuf	struct
;	O
char	O
*	O
kw	*
;	O
struct	O
info_tag	struct
*	O
tag_head	*
=	O
NULL	O
,	O
*	O
tag	*
;	O
int	O
escaped	int
=	O
0	int
;	O
text_buffer_init	function
(	O
&	O
tmpbuf	struct
)	O
;	O
for	O
(	O
mbi_init	O
(	O
iter	*
,	O
text	*
,	O
strlen	function
(	O
text	*
)	O
)	O
;	O
mbi_avail	O
(	O
iter	*
)	O
;	O
mbi_advance	O
(	O
iter	*
)	O
)	O
{	O
const	O
char	O
*	O
cur_ptr	*
;	O
size_t	long
cur_len	long
;	O
if	O
(	O
mb_isspace	O
(	O
mbi_cur	O
(	O
iter	*
)	O
)	O
)	O
{	O
if	O
(	O
state	*
==	O
state_val	int
)	O
{	O
struct	O
info_tag	struct
*	O
new_kw	*
=	O
tag_found_keyword	function
(	O
&	O
tmpbuf	struct
,	O
&	O
kw	*
)	O
;	O
new_kw	*
->	O
next	*
=	O
tag_head	int
;	O
tag_head	int
=	O
new_kw	int
;	O
state	*
=	O
state_delim	int
;	O
continue	O
;	O
}	O
if	O
(	O
state	*
==	O
state_delim	int
)	O
continue	O
;	O
}	O
else	O
if	O
(	O
state	*
==	O
state_delim	int
)	O
state	*
=	O
state_kw	int
;	O
cur_len	long
=	O
mb_len	O
(	O
mbi_cur	O
(	O
iter	*
)	O
)	O
;	O
cur_ptr	*
=	O
mbi_cur_ptr	O
(	O
iter	*
)	O
;	O
if	O
(	O
state	*
==	O
state_qstr	int
&&	O
escaped	int
)	O
{	O
escaped	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
cur_len	int
==	O
1	int
)	O
{	O
switch	O
(	O
*	O
cur_ptr	*
)	O
{	O
case	O
'='	O
:	O
if	O
(	O
state	*
!=	O
state_kw	int
)	O
break	O
;	O
text_buffer_add_char	function
(	O
&	O
tmpbuf	struct
,	O
0	int
)	O
;	O
kw	*
=	O
tmpbuf	struct
.	O
base	*
;	O
if	O
(	O
!	O
mbi_avail	O
(	O
iter	*
)	O
)	O
break	O
;	O
mbi_advance	O
(	O
iter	*
)	O
;	O
state	*
=	O
state_val	int
;	O
cur_len	long
=	O
mb_len	O
(	O
mbi_cur	O
(	O
iter	*
)	O
)	O
;	O
cur_ptr	*
=	O
mbi_cur_ptr	O
(	O
iter	*
)	O
;	O
if	O
(	O
!	O
(	O
cur_len	int
==	O
1	int
&&	O
*	O
cur_ptr	*
==	O
'"'	O
)	O
)	O
break	O
;	O
case	O
'"'	O
:	O
if	O
(	O
state	*
==	O
state_val	int
)	O
{	O
state	*
=	O
state_qstr	int
;	O
continue	O
;	O
}	O
if	O
(	O
state	*
==	O
state_qstr	int
)	O
{	O
struct	O
info_tag	struct
*	O
new_kw	*
=	O
tag_found_keyword	function
(	O
&	O
tmpbuf	struct
,	O
&	O
kw	*
)	O
;	O
new_kw	*
->	O
next	*
=	O
tag_head	int
;	O
tag_head	int
=	O
new_kw	int
;	O
state	*
=	O
state_delim	int
;	O
continue	O
;	O
}	O
break	O
;	O
case	O
'\\'	O
:	O
if	O
(	O
state	*
==	O
state_qstr	int
)	O
{	O
escaped	int
=	O
1	int
;	O
continue	O
;	O
}	O
}	O
}	O
text_buffer_add_string	function
(	O
&	O
tmpbuf	O
,	O
cur_ptr	*
,	O
cur_len	int
)	O
;	O
}	O
tag	*
=	O
info_tag_find	function
(	O
tag_head	*
,	O
"text"	*
)	O
;	O
if	O
(	O
!	O
tag	*
)	O
tag	*
=	O
info_tag_find	function
(	O
tag_head	*
,	O
"alt"	*
)	O
;	O
if	O
(	O
tag	*
)	O
{	O
text_buffer_add_string	function
(	O
outbuf	*
,	O
tag	*
->	O
val	array
,	O
strlen	function
(	O
tag	*
->	O
val	array
)	O
)	O
;	O
}	O
text_buffer_free	function
(	O
&	O
tmpbuf	array
)	O
;	O
info_tag_free	function
(	O
tag_head	*
)	O
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
tag_handler	struct
tagtab	array
[	O
]	O
=	O
{	O
{	O
"image"	*
,	O
5	int
,	O
tag_image	int
}	O
,	O
{	O
"index"	*
,	O
5	int
,	O
NULL	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
struct	O
tag_handler	struct
*	O
find_tag_handler	function
(	O
char	O
*	O
tag	*
,	O
size_t	long
taglen	long
)	O
{	O
struct	O
tag_handler	struct
*	O
tp	*
;	O
for	O
(	O
tp	*
=	O
tagtab	*
;	O
tp	*
->	O
name	*
;	O
tp	*
++	O
)	O
if	O
(	O
taglen	long
>=	O
tp	*
->	O
len	long
&&	O
strncmp	function
(	O
tp	*
->	O
name	*
,	O
tag	*
,	O
tp	*
->	O
len	long
)	O
==	O
0	int
)	O
return	O
tp	*
;	O
return	O
NULL	O
;	O
}	O
int	O
tag_expand	function
(	O
char	O
*	O
*	O
input	*
,	O
char	O
*	O
input_end	*
,	O
struct	O
text_buffer	struct
*	O
outbuf	*
,	O
int	O
*	O
is_index	*
)	O
{	O
char	O
*	O
p	*
=	O
*	O
input	*
;	O
char	O
*	O
q	*
;	O
size_t	long
len	long
;	O
struct	O
tag_handler	struct
*	O
tp	*
;	O
if	O
(	O
p	*
>=	O
input_end	*
-	O
3	int
||	O
memcmp	function
(	O
p	*
,	O
"\0\b["	*
,	O
3	int
)	O
!=	O
0	int
)	O
return	O
0	int
;	O
p	*
+=	O
3	int
;	O
q	*
=	O
p	*
+	O
strlen	function
(	O
p	*
)	O
;	O
if	O
(	O
q	*
>=	O
input_end	*
-	O
3	int
||	O
memcmp	function
(	O
q	*
+	O
1	int
,	O
"\b]"	*
,	O
2	int
)	O
)	O
return	O
0	int
;	O
if	O
(	O
!	O
strncmp	function
(	O
"index"	*
,	O
p	*
,	O
strlen	function
(	O
"index"	*
)	O
)	O
)	O
*	O
is_index	*
=	O
1	int
;	O
len	long
=	O
strcspn	function
(	O
p	*
,	O
" \t"	*
)	O
;	O
tp	*
=	O
find_tag_handler	function
(	O
p	*
,	O
len	long
)	O
;	O
if	O
(	O
tp	*
&&	O
tp	*
->	O
handler	*
)	O
{	O
while	O
(	O
p	*
[	O
len	long
]	O
==	O
' '	O
||	O
p	*
[	O
len	long
]	O
==	O
'\t'	O
)	O
++	O
len	long
;	O
tp	*
->	O
handler	*
(	O
p	*
+	O
len	int
,	O
outbuf	*
)	O
;	O
}	O
*	O
input	*
=	O
q	*
+	O
3	int
;	O
return	O
1	int
;	O
}	O