static	O
strtol_error	enum
bkm_scale	function
(	O
__strtol_t	O
*	O
x	*
,	O
int	O
scale_factor	int
)	O
{	O
if	O
(	O
TYPE_SIGNED	O
(	O
__strtol_t	O
)	O
&&	O
*	O
x	*
<	O
STRTOL_T_MINIMUM	O
/	O
scale_factor	int
)	O
{	O
*	O
x	*
=	O
STRTOL_T_MINIMUM	O
;	O
return	O
LONGINT_OVERFLOW	int
;	O
}	O
if	O
(	O
STRTOL_T_MAXIMUM	O
/	O
scale_factor	int
<	O
*	O
x	*
)	O
{	O
*	O
x	*
=	O
STRTOL_T_MAXIMUM	O
;	O
return	O
LONGINT_OVERFLOW	int
;	O
}	O
*	O
x	*
*=	O
scale_factor	int
;	O
return	O
LONGINT_OK	int
;	O
}	O
static	O
strtol_error	enum
bkm_scale_by_power	function
(	O
__strtol_t	O
*	O
x	*
,	O
int	O
base	int
,	O
int	O
power	int
)	O
{	O
strtol_error	enum
err	enum
=	O
LONGINT_OK	int
;	O
while	O
(	O
power	int
--	O
)	O
err	enum
|=	O
bkm_scale	function
(	O
x	*
,	O
base	int
)	O
;	O
return	O
err	enum
;	O
}	O
strtol_error	enum
__xstrtol	O
(	O
const	O
char	O
*	O
s	*
,	O
char	O
*	O
*	O
ptr	*
,	O
int	O
strtol_base	int
,	O
__strtol_t	O
*	O
val	int
,	O
const	O
char	O
*	O
valid_suffixes	*
)	O
{	O
char	O
*	O
t_ptr	*
;	O
char	O
*	O
*	O
p	*
;	O
__strtol_t	O
tmp	long
;	O
strtol_error	enum
err	enum
=	O
LONGINT_OK	int
;	O
assert	O
(	O
0	int
<=	O
strtol_base	int
&&	O
strtol_base	int
<=	O
36	int
)	O
;	O
p	*
=	O
(	O
ptr	*
?	O
ptr	*
:	O
&	O
t_ptr	*
)	O
;	O
if	O
(	O
!	O
TYPE_SIGNED	O
(	O
__strtol_t	O
)	O
)	O
{	O
const	O
char	O
*	O
q	*
=	O
s	*
;	O
unsigned	O
char	O
ch	char
=	O
*	O
q	*
;	O
while	O
(	O
isspace	function
(	O
ch	char
)	O
)	O
ch	char
=	O
*	O
++	O
q	*
;	O
if	O
(	O
ch	char
==	O
'-'	O
)	O
return	O
LONGINT_INVALID	int
;	O
}	O
errno	O
=	O
0	int
;	O
tmp	long
=	O
__strtol	O
(	O
s	*
,	O
p	*
,	O
strtol_base	int
)	O
;	O
if	O
(	O
*	O
p	*
==	O
s	*
)	O
{	O
if	O
(	O
valid_suffixes	*
&&	O
*	O
*	O
p	*
&&	O
strchr	function
(	O
valid_suffixes	*
,	O
*	O
*	O
p	*
)	O
)	O
tmp	long
=	O
1	int
;	O
else	O
return	O
LONGINT_INVALID	int
;	O
}	O
else	O
if	O
(	O
errno	O
!=	O
0	int
)	O
{	O
if	O
(	O
errno	O
!=	O
ERANGE	int
)	O
return	O
LONGINT_INVALID	int
;	O
err	enum
=	O
LONGINT_OVERFLOW	int
;	O
}	O
if	O
(	O
!	O
valid_suffixes	*
)	O
{	O
*	O
val	int
=	O
tmp	long
;	O
return	O
err	enum
;	O
}	O
if	O
(	O
*	O
*	O
p	*
!=	O
'\0'	O
)	O
{	O
int	O
base	int
=	O
1024	int
;	O
int	O
suffixes	int
=	O
1	int
;	O
strtol_error	enum
overflow	enum
;	O
if	O
(	O
!	O
strchr	function
(	O
valid_suffixes	*
,	O
*	O
*	O
p	*
)	O
)	O
{	O
*	O
val	int
=	O
tmp	long
;	O
return	O
err	enum
|	O
LONGINT_INVALID_SUFFIX_CHAR	int
;	O
}	O
if	O
(	O
strchr	function
(	O
valid_suffixes	*
,	O
'0'	O
)	O
)	O
{	O
switch	O
(	O
p	*
[	O
0	int
]	O
[	O
1	int
]	O
)	O
{	O
case	O
'i'	O
:	O
if	O
(	O
p	*
[	O
0	int
]	O
[	O
2	int
]	O
==	O
'B'	O
)	O
suffixes	int
+=	O
2	int
;	O
break	O
;	O
case	O
'B'	O
:	O
case	O
'D'	O
:	O
base	int
=	O
1000	int
;	O
suffixes	int
++	O
;	O
break	O
;	O
}	O
}	O
switch	O
(	O
*	O
*	O
p	*
)	O
{	O
case	O
'b'	O
:	O
overflow	enum
=	O
bkm_scale	function
(	O
&	O
tmp	long
,	O
512	int
)	O
;	O
break	O
;	O
case	O
'B'	O
:	O
overflow	enum
=	O
bkm_scale	function
(	O
&	O
tmp	long
,	O
1024	int
)	O
;	O
break	O
;	O
case	O
'c'	O
:	O
overflow	enum
=	O
0	int
;	O
break	O
;	O
case	O
'E'	O
:	O
overflow	enum
=	O
bkm_scale_by_power	function
(	O
&	O
tmp	long
,	O
base	int
,	O
6	int
)	O
;	O
break	O
;	O
case	O
'G'	O
:	O
case	O
'g'	O
:	O
overflow	enum
=	O
bkm_scale_by_power	function
(	O
&	O
tmp	long
,	O
base	int
,	O
3	int
)	O
;	O
break	O
;	O
case	O
'k'	O
:	O
case	O
'K'	O
:	O
overflow	enum
=	O
bkm_scale_by_power	function
(	O
&	O
tmp	long
,	O
base	int
,	O
1	int
)	O
;	O
break	O
;	O
case	O
'M'	O
:	O
case	O
'm'	O
:	O
overflow	enum
=	O
bkm_scale_by_power	function
(	O
&	O
tmp	long
,	O
base	int
,	O
2	int
)	O
;	O
break	O
;	O
case	O
'P'	O
:	O
overflow	enum
=	O
bkm_scale_by_power	function
(	O
&	O
tmp	long
,	O
base	int
,	O
5	int
)	O
;	O
break	O
;	O
case	O
'T'	O
:	O
case	O
't'	O
:	O
overflow	enum
=	O
bkm_scale_by_power	function
(	O
&	O
tmp	long
,	O
base	int
,	O
4	int
)	O
;	O
break	O
;	O
case	O
'w'	O
:	O
overflow	enum
=	O
bkm_scale	function
(	O
&	O
tmp	long
,	O
2	int
)	O
;	O
break	O
;	O
case	O
'Y'	O
:	O
overflow	enum
=	O
bkm_scale_by_power	function
(	O
&	O
tmp	long
,	O
base	int
,	O
8	int
)	O
;	O
break	O
;	O
case	O
'Z'	O
:	O
overflow	enum
=	O
bkm_scale_by_power	function
(	O
&	O
tmp	long
,	O
base	int
,	O
7	int
)	O
;	O
break	O
;	O
default	O
:	O
*	O
val	int
=	O
tmp	long
;	O
return	O
err	enum
|	O
LONGINT_INVALID_SUFFIX_CHAR	int
;	O
}	O
err	enum
|=	O
overflow	enum
;	O
*	O
p	*
+=	O
suffixes	int
;	O
if	O
(	O
*	O
*	O
p	*
)	O
err	enum
|=	O
LONGINT_INVALID_SUFFIX_CHAR	int
;	O
}	O
*	O
val	int
=	O
tmp	long
;	O
return	O
err	enum
;	O
}	O