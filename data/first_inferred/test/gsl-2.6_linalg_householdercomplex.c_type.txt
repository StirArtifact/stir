gsl_complex	struct
gsl_linalg_complex_householder_transform	function
(	O
gsl_vector_complex	struct
*	O
v	pointer
)	O
{	O
const	O
size_t	long
n	int
=	O
v	pointer
->	O
size	long
;	O
if	O
(	O
n	int
==	O
1	int
)	O
{	O
gsl_complex	struct
alpha	long double
=	O
gsl_vector_complex_get	function
(	O
v	pointer
,	O
0	int
)	O
;	O
double	O
absa	double
=	O
gsl_complex_abs	function
(	O
alpha	long double
)	O
;	O
double	O
beta_r	double
=	O
-	O
(	O
GSL_REAL	O
(	O
alpha	long double
)	O
>=	O
0	int
?	O
+	O
1	int
:	O
-	O
1	int
)	O
*	O
absa	double
;	O
gsl_complex	struct
tau	double
;	O
if	O
(	O
beta_r	double
==	O
0.0	int
)	O
{	O
GSL_REAL	O
(	O
tau	double
)	O
=	O
0.0	int
;	O
GSL_IMAG	O
(	O
tau	double
)	O
=	O
0.0	int
;	O
}	O
else	O
{	O
GSL_REAL	O
(	O
tau	double
)	O
=	O
(	O
beta_r	double
-	O
GSL_REAL	O
(	O
alpha	long double
)	O
)	O
/	O
beta_r	double
;	O
GSL_IMAG	O
(	O
tau	double
)	O
=	O
-	O
GSL_IMAG	O
(	O
alpha	long double
)	O
/	O
beta_r	double
;	O
{	O
gsl_complex	struct
beta	long double
=	O
gsl_complex_rect	function
(	O
beta_r	double
,	O
0.0	int
)	O
;	O
gsl_vector_complex_set	function
(	O
v	pointer
,	O
0	int
,	O
beta	long double
)	O
;	O
}	O
}	O
return	O
tau	double
;	O
}	O
else	O
{	O
gsl_complex	struct
tau	double
;	O
double	O
beta_r	double
;	O
gsl_vector_complex_view	struct
x	double
=	O
gsl_vector_complex_subvector	function
(	O
v	pointer
,	O
1	int
,	O
n	int
-	O
1	int
)	O
;	O
gsl_complex	struct
alpha	long double
=	O
gsl_vector_complex_get	function
(	O
v	pointer
,	O
0	int
)	O
;	O
double	O
absa	double
=	O
gsl_complex_abs	function
(	O
alpha	long double
)	O
;	O
double	O
xnorm	double
=	O
gsl_blas_dznrm2	function
(	O
&	O
x	double
.	O
vector	struct
)	O
;	O
if	O
(	O
xnorm	double
==	O
0	int
&&	O
GSL_IMAG	O
(	O
alpha	long double
)	O
==	O
0	int
)	O
{	O
gsl_complex	struct
zero	struct
=	O
gsl_complex_rect	function
(	O
0.0	int
,	O
0.0	int
)	O
;	O
return	O
zero	struct
;	O
}	O
beta_r	double
=	O
-	O
(	O
GSL_REAL	O
(	O
alpha	long double
)	O
>=	O
0	int
?	O
+	O
1	int
:	O
-	O
1	int
)	O
*	O
hypot	function
(	O
absa	double
,	O
xnorm	double
)	O
;	O
GSL_REAL	O
(	O
tau	double
)	O
=	O
(	O
beta_r	double
-	O
GSL_REAL	O
(	O
alpha	long double
)	O
)	O
/	O
beta_r	double
;	O
GSL_IMAG	O
(	O
tau	double
)	O
=	O
-	O
GSL_IMAG	O
(	O
alpha	long double
)	O
/	O
beta_r	double
;	O
{	O
gsl_complex	struct
amb	struct
=	O
gsl_complex_sub_real	function
(	O
alpha	long double
,	O
beta_r	double
)	O
;	O
gsl_complex	struct
s	pointer
=	O
gsl_complex_inverse	function
(	O
amb	struct
)	O
;	O
gsl_blas_zscal	function
(	O
s	pointer
,	O
&	O
x	double
.	O
vector	struct
)	O
;	O
}	O
{	O
gsl_complex	struct
beta	long double
=	O
gsl_complex_rect	function
(	O
beta_r	double
,	O
0.0	int
)	O
;	O
gsl_vector_complex_set	function
(	O
v	pointer
,	O
0	int
,	O
beta	long double
)	O
;	O
}	O
return	O
tau	double
;	O
}	O
}	O
int	O
gsl_linalg_complex_householder_hv	function
(	O
gsl_complex	struct
tau	double
,	O
const	O
gsl_vector_complex	struct
*	O
v	pointer
,	O
gsl_vector_complex	struct
*	O
w	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
v	pointer
->	O
size	long
;	O
if	O
(	O
GSL_REAL	O
(	O
tau	double
)	O
==	O
0.0	int
&&	O
GSL_IMAG	O
(	O
tau	double
)	O
==	O
0.0	int
)	O
return	O
GSL_SUCCESS	int
;	O
{	O
gsl_complex	struct
z0	struct
=	O
gsl_vector_complex_get	function
(	O
w	pointer
,	O
0	int
)	O
;	O
gsl_complex	struct
z1	struct
,	O
z	double
;	O
gsl_complex	struct
tz	struct
,	O
ntz	struct
;	O
gsl_vector_complex_const_view	struct
v1	struct
=	O
gsl_vector_complex_const_subvector	function
(	O
v	pointer
,	O
1	int
,	O
N	int
-	O
1	int
)	O
;	O
gsl_vector_complex_view	struct
w1	struct
=	O
gsl_vector_complex_subvector	function
(	O
w	pointer
,	O
1	int
,	O
N	int
-	O
1	int
)	O
;	O
gsl_blas_zdotc	function
(	O
&	O
v1	struct
.	O
vector	struct
,	O
&	O
w1	struct
.	O
vector	struct
,	O
&	O
z1	struct
)	O
;	O
z	double
=	O
gsl_complex_add	function
(	O
z0	struct
,	O
z1	struct
)	O
;	O
tz	struct
=	O
gsl_complex_mul	function
(	O
tau	double
,	O
z	double
)	O
;	O
ntz	struct
=	O
gsl_complex_negative	function
(	O
tz	struct
)	O
;	O
{	O
gsl_complex	struct
w0	struct
=	O
gsl_vector_complex_get	function
(	O
w	pointer
,	O
0	int
)	O
;	O
gsl_complex	struct
w0ntz	struct
=	O
gsl_complex_add	function
(	O
w0	struct
,	O
ntz	struct
)	O
;	O
gsl_vector_complex_set	function
(	O
w	pointer
,	O
0	int
,	O
w0ntz	struct
)	O
;	O
}	O
gsl_blas_zaxpy	function
(	O
ntz	struct
,	O
&	O
v1	struct
.	O
vector	struct
,	O
&	O
w1	struct
.	O
vector	struct
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_linalg_complex_householder_left	function
(	O
const	O
gsl_complex	struct
tau	double
,	O
const	O
gsl_vector_complex	struct
*	O
v	pointer
,	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
gsl_vector_complex	struct
*	O
work	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
v	pointer
->	O
size	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must match Householder vector dimensions"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
work	pointer
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"workspace must match matrix"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_complex	struct
v0	struct
,	O
mtau	struct
;	O
if	O
(	O
GSL_REAL	O
(	O
tau	double
)	O
==	O
0.0	int
&&	O
GSL_IMAG	O
(	O
tau	double
)	O
==	O
0.0	int
)	O
return	O
GSL_SUCCESS	int
;	O
v0	struct
=	O
gsl_vector_complex_get	function
(	O
v	pointer
,	O
0	int
)	O
;	O
v	pointer
->	O
data	pointer
[	O
0	int
]	O
=	O
1.0	int
;	O
v	pointer
->	O
data	pointer
[	O
1	int
]	O
=	O
0.0	int
;	O
gsl_blas_zgemv	function
(	O
CblasConjTrans	int
,	O
GSL_COMPLEX_ONE	O
,	O
A	pointer
,	O
v	pointer
,	O
GSL_COMPLEX_ZERO	O
,	O
work	pointer
)	O
;	O
GSL_REAL	O
(	O
mtau	struct
)	O
=	O
-	O
GSL_REAL	O
(	O
tau	double
)	O
;	O
GSL_IMAG	O
(	O
mtau	struct
)	O
=	O
-	O
GSL_IMAG	O
(	O
tau	double
)	O
;	O
gsl_blas_zgerc	function
(	O
mtau	struct
,	O
v	pointer
,	O
work	pointer
,	O
A	pointer
)	O
;	O
v	pointer
->	O
data	pointer
[	O
0	int
]	O
=	O
GSL_REAL	O
(	O
v0	struct
)	O
;	O
v	pointer
->	O
data	pointer
[	O
1	int
]	O
=	O
GSL_IMAG	O
(	O
v0	struct
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_complex_householder_hm	function
(	O
gsl_complex	struct
tau	double
,	O
const	O
gsl_vector_complex	struct
*	O
v	pointer
,	O
gsl_matrix_complex	struct
*	O
A	pointer
)	O
{	O
size_t	long
i	long
,	O
j	long
;	O
if	O
(	O
GSL_REAL	O
(	O
tau	double
)	O
==	O
0.0	int
&&	O
GSL_IMAG	O
(	O
tau	double
)	O
==	O
0.0	int
)	O
{	O
return	O
GSL_SUCCESS	int
;	O
}	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
A	pointer
->	O
size2	long
;	O
j	long
++	O
)	O
{	O
gsl_complex	struct
tauwj	struct
;	O
gsl_complex	struct
wj	struct
=	O
gsl_matrix_complex_get	function
(	O
A	pointer
,	O
0	int
,	O
j	long
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
A	pointer
->	O
size1	long
;	O
i	long
++	O
)	O
{	O
gsl_complex	struct
Aij	struct
=	O
gsl_matrix_complex_get	function
(	O
A	pointer
,	O
i	long
,	O
j	long
)	O
;	O
gsl_complex	struct
vi	double
=	O
gsl_vector_complex_get	function
(	O
v	pointer
,	O
i	long
)	O
;	O
gsl_complex	struct
Av	struct
=	O
gsl_complex_mul	function
(	O
Aij	struct
,	O
gsl_complex_conjugate	function
(	O
vi	double
)	O
)	O
;	O
wj	struct
=	O
gsl_complex_add	function
(	O
wj	struct
,	O
Av	struct
)	O
;	O
}	O
tauwj	struct
=	O
gsl_complex_mul	function
(	O
tau	double
,	O
wj	struct
)	O
;	O
{	O
gsl_complex	struct
A0j	struct
=	O
gsl_matrix_complex_get	function
(	O
A	pointer
,	O
0	int
,	O
j	long
)	O
;	O
gsl_complex	struct
Atw	struct
=	O
gsl_complex_sub	function
(	O
A0j	struct
,	O
tauwj	struct
)	O
;	O
gsl_matrix_complex_set	function
(	O
A	pointer
,	O
0	int
,	O
j	long
,	O
Atw	struct
)	O
;	O
}	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
A	pointer
->	O
size1	long
;	O
i	long
++	O
)	O
{	O
gsl_complex	struct
vi	double
=	O
gsl_vector_complex_get	function
(	O
v	pointer
,	O
i	long
)	O
;	O
gsl_complex	struct
tauvw	struct
=	O
gsl_complex_mul	function
(	O
vi	double
,	O
tauwj	struct
)	O
;	O
gsl_complex	struct
Aij	struct
=	O
gsl_matrix_complex_get	function
(	O
A	pointer
,	O
i	long
,	O
j	long
)	O
;	O
gsl_complex	struct
Atwv	struct
=	O
gsl_complex_sub	function
(	O
Aij	struct
,	O
tauvw	struct
)	O
;	O
gsl_matrix_complex_set	function
(	O
A	pointer
,	O
i	long
,	O
j	long
,	O
Atwv	struct
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_linalg_complex_householder_mh	function
(	O
gsl_complex	struct
tau	double
,	O
const	O
gsl_vector_complex	struct
*	O
v	pointer
,	O
gsl_matrix_complex	struct
*	O
A	pointer
)	O
{	O
size_t	long
i	long
,	O
j	long
;	O
if	O
(	O
GSL_REAL	O
(	O
tau	double
)	O
==	O
0.0	int
&&	O
GSL_IMAG	O
(	O
tau	double
)	O
==	O
0.0	int
)	O
{	O
return	O
GSL_SUCCESS	int
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
A	pointer
->	O
size1	long
;	O
i	long
++	O
)	O
{	O
gsl_complex	struct
tauwi	struct
;	O
gsl_complex	struct
Ai0	struct
=	O
gsl_matrix_complex_get	function
(	O
A	pointer
,	O
i	long
,	O
0	int
)	O
;	O
gsl_complex	struct
wi	struct
=	O
Ai0	struct
;	O
for	O
(	O
j	long
=	O
1	int
;	O
j	long
<	O
A	pointer
->	O
size2	long
;	O
j	long
++	O
)	O
{	O
gsl_complex	struct
Aij	struct
=	O
gsl_matrix_complex_get	function
(	O
A	pointer
,	O
i	long
,	O
j	long
)	O
;	O
gsl_complex	struct
vj	double
=	O
gsl_vector_complex_get	function
(	O
v	pointer
,	O
j	long
)	O
;	O
gsl_complex	struct
Av	struct
=	O
gsl_complex_mul	function
(	O
Aij	struct
,	O
vj	double
)	O
;	O
wi	struct
=	O
gsl_complex_add	function
(	O
wi	struct
,	O
Av	struct
)	O
;	O
}	O
tauwi	struct
=	O
gsl_complex_mul	function
(	O
tau	double
,	O
wi	struct
)	O
;	O
{	O
gsl_complex	struct
Atw	struct
=	O
gsl_complex_sub	function
(	O
Ai0	struct
,	O
tauwi	struct
)	O
;	O
gsl_matrix_complex_set	function
(	O
A	pointer
,	O
i	long
,	O
0	int
,	O
Atw	struct
)	O
;	O
}	O
for	O
(	O
j	long
=	O
1	int
;	O
j	long
<	O
A	pointer
->	O
size2	long
;	O
j	long
++	O
)	O
{	O
gsl_complex	struct
vj	double
=	O
gsl_vector_complex_get	function
(	O
v	pointer
,	O
j	long
)	O
;	O
gsl_complex	struct
tauwv	struct
=	O
gsl_complex_mul	function
(	O
gsl_complex_conjugate	function
(	O
vj	double
)	O
,	O
tauwi	struct
)	O
;	O
gsl_complex	struct
Aij	struct
=	O
gsl_matrix_complex_get	function
(	O
A	pointer
,	O
i	long
,	O
j	long
)	O
;	O
gsl_complex	struct
Atwv	struct
=	O
gsl_complex_sub	function
(	O
Aij	struct
,	O
tauwv	struct
)	O
;	O
gsl_matrix_complex_set	function
(	O
A	pointer
,	O
i	long
,	O
j	long
,	O
Atwv	struct
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O