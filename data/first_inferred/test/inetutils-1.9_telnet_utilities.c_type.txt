FILE	struct
*	O
NetTrace	pointer
=	O
0	int
;	O
int	O
prettydump	int
;	O
void	O
upcase	function
(	O
register	O
char	O
*	O
argument	pointer
)	O
{	O
register	O
int	O
c	int
;	O
while	O
(	O
(	O
c	int
=	O
*	O
argument	pointer
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
islower	function
(	O
c	int
)	O
)	O
{	O
*	O
argument	pointer
=	O
toupper	function
(	O
c	int
)	O
;	O
}	O
argument	pointer
++	O
;	O
}	O
}	O
int	O
SetSockOpt	function
(	O
int	O
fd	int
,	O
int	O
level	int
,	O
int	O
option	int
,	O
int	O
yesno	int
)	O
{	O
return	O
setsockopt	function
(	O
fd	int
,	O
level	int
,	O
option	int
,	O
(	O
char	O
*	O
)	O
&	O
yesno	int
,	O
sizeof	O
yesno	int
)	O
;	O
}	O
unsigned	O
char	O
NetTraceFile	array
[	O
256	int
]	O
=	O
"(standard output)"	pointer
;	O
void	O
SetNetTrace	function
(	O
register	O
char	O
*	O
file	pointer
)	O
{	O
if	O
(	O
NetTrace	pointer
&&	O
NetTrace	pointer
!=	O
stdout	pointer
)	O
fclose	function
(	O
NetTrace	pointer
)	O
;	O
if	O
(	O
file	pointer
&&	O
(	O
strcmp	function
(	O
file	pointer
,	O
"-"	pointer
)	O
!=	O
0	int
)	O
)	O
{	O
NetTrace	pointer
=	O
fopen	function
(	O
file	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
NetTrace	pointer
)	O
{	O
strcpy	function
(	O
(	O
char	O
*	O
)	O
NetTraceFile	array
,	O
file	pointer
)	O
;	O
return	O
;	O
}	O
fprintf	function
(	O
stderr	pointer
,	O
"Cannot open %s.\n"	pointer
,	O
file	pointer
)	O
;	O
}	O
NetTrace	pointer
=	O
stdout	pointer
;	O
strcpy	function
(	O
(	O
char	O
*	O
)	O
NetTraceFile	array
,	O
"(standard output)"	pointer
)	O
;	O
}	O
void	O
Dump	function
(	O
char	O
direction	char
,	O
unsigned	O
char	O
*	O
buffer	pointer
,	O
int	O
length	int
)	O
{	O
unsigned	O
char	O
*	O
pThis	pointer
;	O
int	O
offset	long
;	O
offset	long
=	O
0	int
;	O
while	O
(	O
length	int
)	O
{	O
fprintf	function
(	O
NetTrace	pointer
,	O
"%c 0x%x\t"	pointer
,	O
direction	char
,	O
offset	long
)	O
;	O
pThis	pointer
=	O
buffer	pointer
;	O
if	O
(	O
prettydump	int
)	O
{	O
buffer	pointer
=	O
buffer	pointer
+	O
min	O
(	O
length	int
,	O
BYTES_PER_LINE	int
/	O
2	int
)	O
;	O
while	O
(	O
pThis	pointer
<	O
buffer	pointer
)	O
{	O
fprintf	function
(	O
NetTrace	pointer
,	O
"%c%.2x"	pointer
,	O
(	O
(	O
(	O
*	O
pThis	pointer
)	O
&	O
0xff	int
)	O
==	O
0xff	int
)	O
?	O
'*'	O
:	O
' '	O
,	O
(	O
*	O
pThis	pointer
)	O
&	O
0xff	int
)	O
;	O
pThis	pointer
++	O
;	O
}	O
length	int
-=	O
BYTES_PER_LINE	int
/	O
2	int
;	O
offset	long
+=	O
BYTES_PER_LINE	int
/	O
2	int
;	O
}	O
else	O
{	O
buffer	pointer
=	O
buffer	pointer
+	O
min	O
(	O
length	int
,	O
BYTES_PER_LINE	int
)	O
;	O
while	O
(	O
pThis	pointer
<	O
buffer	pointer
)	O
{	O
fprintf	function
(	O
NetTrace	pointer
,	O
"%.2x"	pointer
,	O
(	O
*	O
pThis	pointer
)	O
&	O
0xff	int
)	O
;	O
pThis	pointer
++	O
;	O
}	O
length	int
-=	O
BYTES_PER_LINE	int
;	O
offset	long
+=	O
BYTES_PER_LINE	int
;	O
}	O
if	O
(	O
NetTrace	pointer
==	O
stdout	pointer
)	O
{	O
fprintf	function
(	O
NetTrace	pointer
,	O
"\r\n"	pointer
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
NetTrace	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
if	O
(	O
length	int
<	O
0	int
)	O
{	O
fflush	function
(	O
NetTrace	pointer
)	O
;	O
return	O
;	O
}	O
}	O
fflush	function
(	O
NetTrace	pointer
)	O
;	O
}	O
void	O
printoption	function
(	O
char	O
*	O
direction	char
,	O
int	O
cmd	int
,	O
int	O
option	int
)	O
{	O
if	O
(	O
!	O
showoptions	int
)	O
return	O
;	O
if	O
(	O
cmd	int
==	O
IAC	int
)	O
{	O
if	O
(	O
TELCMD_OK	O
(	O
option	int
)	O
)	O
fprintf	function
(	O
NetTrace	pointer
,	O
"%s IAC %s"	pointer
,	O
direction	char
,	O
TELCMD	O
(	O
option	int
)	O
)	O
;	O
else	O
fprintf	function
(	O
NetTrace	pointer
,	O
"%s IAC %d"	pointer
,	O
direction	char
,	O
option	int
)	O
;	O
}	O
else	O
{	O
register	O
char	O
*	O
fmt	pointer
;	O
fmt	pointer
=	O
(	O
cmd	int
==	O
WILL	int
)	O
?	O
"WILL"	pointer
:	O
(	O
cmd	int
==	O
WONT	int
)	O
?	O
"WONT"	pointer
:	O
(	O
cmd	int
==	O
DO	int
)	O
?	O
"DO"	pointer
:	O
(	O
cmd	int
==	O
DONT	int
)	O
?	O
"DONT"	pointer
:	O
0	int
;	O
if	O
(	O
fmt	pointer
)	O
{	O
fprintf	function
(	O
NetTrace	pointer
,	O
"%s %s "	pointer
,	O
direction	char
,	O
fmt	pointer
)	O
;	O
if	O
(	O
TELOPT_OK	O
(	O
option	int
)	O
)	O
fprintf	function
(	O
NetTrace	pointer
,	O
"%s"	pointer
,	O
TELOPT	O
(	O
option	int
)	O
)	O
;	O
else	O
if	O
(	O
option	int
==	O
TELOPT_EXOPL	int
)	O
fprintf	function
(	O
NetTrace	pointer
,	O
"EXOPL"	pointer
)	O
;	O
else	O
fprintf	function
(	O
NetTrace	pointer
,	O
"%d"	pointer
,	O
option	int
)	O
;	O
}	O
else	O
fprintf	function
(	O
NetTrace	pointer
,	O
"%s %d %d"	pointer
,	O
direction	char
,	O
cmd	int
,	O
option	int
)	O
;	O
}	O
if	O
(	O
NetTrace	pointer
==	O
stdout	pointer
)	O
{	O
fprintf	function
(	O
NetTrace	pointer
,	O
"\r\n"	pointer
)	O
;	O
fflush	function
(	O
NetTrace	pointer
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
NetTrace	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
return	O
;	O
}	O
void	O
optionstatus	function
(	O
void	O
)	O
{	O
register	O
int	O
i	int
;	O
extern	O
char	O
will_wont_resp	array
[	O
]	O
,	O
do_dont_resp	array
[	O
]	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
256	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
do_dont_resp	array
[	O
i	int
]	O
)	O
{	O
if	O
(	O
TELOPT_OK	O
(	O
i	int
)	O
)	O
printf	function
(	O
"resp DO_DONT %s: %d\n"	pointer
,	O
TELOPT	O
(	O
i	int
)	O
,	O
do_dont_resp	array
[	O
i	int
]	O
)	O
;	O
else	O
if	O
(	O
TELCMD_OK	O
(	O
i	int
)	O
)	O
printf	function
(	O
"resp DO_DONT %s: %d\n"	pointer
,	O
TELCMD	O
(	O
i	int
)	O
,	O
do_dont_resp	array
[	O
i	int
]	O
)	O
;	O
else	O
printf	function
(	O
"resp DO_DONT %d: %d\n"	pointer
,	O
i	int
,	O
do_dont_resp	array
[	O
i	int
]	O
)	O
;	O
if	O
(	O
my_want_state_is_do	O
(	O
i	int
)	O
)	O
{	O
if	O
(	O
TELOPT_OK	O
(	O
i	int
)	O
)	O
printf	function
(	O
"want DO   %s\n"	pointer
,	O
TELOPT	O
(	O
i	int
)	O
)	O
;	O
else	O
if	O
(	O
TELCMD_OK	O
(	O
i	int
)	O
)	O
printf	function
(	O
"want DO   %s\n"	pointer
,	O
TELCMD	O
(	O
i	int
)	O
)	O
;	O
else	O
printf	function
(	O
"want DO   %d\n"	pointer
,	O
i	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
TELOPT_OK	O
(	O
i	int
)	O
)	O
printf	function
(	O
"want DONT %s\n"	pointer
,	O
TELOPT	O
(	O
i	int
)	O
)	O
;	O
else	O
if	O
(	O
TELCMD_OK	O
(	O
i	int
)	O
)	O
printf	function
(	O
"want DONT %s\n"	pointer
,	O
TELCMD	O
(	O
i	int
)	O
)	O
;	O
else	O
printf	function
(	O
"want DONT %d\n"	pointer
,	O
i	int
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
my_state_is_do	O
(	O
i	int
)	O
)	O
{	O
if	O
(	O
TELOPT_OK	O
(	O
i	int
)	O
)	O
printf	function
(	O
"     DO   %s\n"	pointer
,	O
TELOPT	O
(	O
i	int
)	O
)	O
;	O
else	O
if	O
(	O
TELCMD_OK	O
(	O
i	int
)	O
)	O
printf	function
(	O
"     DO   %s\n"	pointer
,	O
TELCMD	O
(	O
i	int
)	O
)	O
;	O
else	O
printf	function
(	O
"     DO   %d\n"	pointer
,	O
i	int
)	O
;	O
}	O
}	O
if	O
(	O
will_wont_resp	array
[	O
i	int
]	O
)	O
{	O
if	O
(	O
TELOPT_OK	O
(	O
i	int
)	O
)	O
printf	function
(	O
"resp WILL_WONT %s: %d\n"	pointer
,	O
TELOPT	O
(	O
i	int
)	O
,	O
will_wont_resp	array
[	O
i	int
]	O
)	O
;	O
else	O
if	O
(	O
TELCMD_OK	O
(	O
i	int
)	O
)	O
printf	function
(	O
"resp WILL_WONT %s: %d\n"	pointer
,	O
TELCMD	O
(	O
i	int
)	O
,	O
will_wont_resp	array
[	O
i	int
]	O
)	O
;	O
else	O
printf	function
(	O
"resp WILL_WONT %d: %d\n"	pointer
,	O
i	int
,	O
will_wont_resp	array
[	O
i	int
]	O
)	O
;	O
if	O
(	O
my_want_state_is_will	O
(	O
i	int
)	O
)	O
{	O
if	O
(	O
TELOPT_OK	O
(	O
i	int
)	O
)	O
printf	function
(	O
"want WILL %s\n"	pointer
,	O
TELOPT	O
(	O
i	int
)	O
)	O
;	O
else	O
if	O
(	O
TELCMD_OK	O
(	O
i	int
)	O
)	O
printf	function
(	O
"want WILL %s\n"	pointer
,	O
TELCMD	O
(	O
i	int
)	O
)	O
;	O
else	O
printf	function
(	O
"want WILL %d\n"	pointer
,	O
i	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
TELOPT_OK	O
(	O
i	int
)	O
)	O
printf	function
(	O
"want WONT %s\n"	pointer
,	O
TELOPT	O
(	O
i	int
)	O
)	O
;	O
else	O
if	O
(	O
TELCMD_OK	O
(	O
i	int
)	O
)	O
printf	function
(	O
"want WONT %s\n"	pointer
,	O
TELCMD	O
(	O
i	int
)	O
)	O
;	O
else	O
printf	function
(	O
"want WONT %d\n"	pointer
,	O
i	int
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
my_state_is_will	O
(	O
i	int
)	O
)	O
{	O
if	O
(	O
TELOPT_OK	O
(	O
i	int
)	O
)	O
printf	function
(	O
"     WILL %s\n"	pointer
,	O
TELOPT	O
(	O
i	int
)	O
)	O
;	O
else	O
if	O
(	O
TELCMD_OK	O
(	O
i	int
)	O
)	O
printf	function
(	O
"     WILL %s\n"	pointer
,	O
TELCMD	O
(	O
i	int
)	O
)	O
;	O
else	O
printf	function
(	O
"     WILL %d\n"	pointer
,	O
i	int
)	O
;	O
}	O
}	O
}	O
}	O
void	O
printsub	function
(	O
char	O
direction	char
,	O
unsigned	O
char	O
*	O
pointer	pointer
,	O
int	O
length	int
)	O
{	O
register	O
int	O
i	int
;	O
extern	O
int	O
want_status_response	int
;	O
if	O
(	O
showoptions	int
||	O
direction	char
==	O
0	int
||	O
(	O
want_status_response	int
&&	O
(	O
pointer	pointer
[	O
0	int
]	O
==	O
TELOPT_STATUS	int
)	O
)	O
)	O
{	O
if	O
(	O
direction	char
)	O
{	O
fprintf	function
(	O
NetTrace	pointer
,	O
"%s IAC SB "	pointer
,	O
(	O
direction	char
==	O
'<'	O
)	O
?	O
"RCVD"	pointer
:	O
"SENT"	pointer
)	O
;	O
if	O
(	O
length	int
>=	O
3	int
)	O
{	O
register	O
int	O
j	int
;	O
i	int
=	O
pointer	pointer
[	O
length	int
-	O
2	int
]	O
;	O
j	int
=	O
pointer	pointer
[	O
length	int
-	O
1	int
]	O
;	O
if	O
(	O
i	int
!=	O
IAC	int
||	O
j	int
!=	O
SE	int
)	O
{	O
fprintf	function
(	O
NetTrace	pointer
,	O
"(terminated by "	pointer
)	O
;	O
if	O
(	O
TELOPT_OK	O
(	O
i	int
)	O
)	O
fprintf	function
(	O
NetTrace	pointer
,	O
"%s "	pointer
,	O
TELOPT	O
(	O
i	int
)	O
)	O
;	O
else	O
if	O
(	O
TELCMD_OK	O
(	O
i	int
)	O
)	O
fprintf	function
(	O
NetTrace	pointer
,	O
"%s "	pointer
,	O
TELCMD	O
(	O
i	int
)	O
)	O
;	O
else	O
fprintf	function
(	O
NetTrace	pointer
,	O
"%d "	pointer
,	O
i	int
)	O
;	O
if	O
(	O
TELOPT_OK	O
(	O
j	int
)	O
)	O
fprintf	function
(	O
NetTrace	pointer
,	O
"%s"	pointer
,	O
TELOPT	O
(	O
j	int
)	O
)	O
;	O
else	O
if	O
(	O
TELCMD_OK	O
(	O
j	int
)	O
)	O
fprintf	function
(	O
NetTrace	pointer
,	O
"%s"	pointer
,	O
TELCMD	O
(	O
j	int
)	O
)	O
;	O
else	O
fprintf	function
(	O
NetTrace	pointer
,	O
"%d"	pointer
,	O
j	int
)	O
;	O
fprintf	function
(	O
NetTrace	pointer
,	O
", not IAC SE!) "	pointer
)	O
;	O
}	O
}	O
length	int
-=	O
2	int
;	O
}	O
if	O
(	O
length	int
<	O
1	int
)	O
{	O
fprintf	function
(	O
NetTrace	pointer
,	O
"(Empty suboption??\?)"	pointer
)	O
;	O
if	O
(	O
NetTrace	pointer
==	O
stdout	pointer
)	O
fflush	function
(	O
NetTrace	pointer
)	O
;	O
return	O
;	O
}	O
switch	O
(	O
pointer	pointer
[	O
0	int
]	O
)	O
{	O
case	O
TELOPT_TTYPE	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
"TERMINAL-TYPE "	pointer
)	O
;	O
switch	O
(	O
pointer	pointer
[	O
1	int
]	O
)	O
{	O
case	O
TELQUAL_IS	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
"IS \"%.*s\""	pointer
,	O
length	int
-	O
2	int
,	O
(	O
char	O
*	O
)	O
pointer	pointer
+	O
2	int
)	O
;	O
break	O
;	O
case	O
TELQUAL_SEND	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
"SEND"	pointer
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
"- unknown qualifier %d (0x%x)."	pointer
,	O
pointer	pointer
[	O
1	int
]	O
,	O
pointer	pointer
[	O
1	int
]	O
)	O
;	O
}	O
break	O
;	O
case	O
TELOPT_TSPEED	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
"TERMINAL-SPEED"	pointer
)	O
;	O
if	O
(	O
length	int
<	O
2	int
)	O
{	O
fprintf	function
(	O
NetTrace	pointer
,	O
" (empty suboption??\?)"	pointer
)	O
;	O
break	O
;	O
}	O
switch	O
(	O
pointer	pointer
[	O
1	int
]	O
)	O
{	O
case	O
TELQUAL_IS	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
" IS "	pointer
)	O
;	O
fprintf	function
(	O
NetTrace	pointer
,	O
"%.*s"	pointer
,	O
length	int
-	O
2	int
,	O
(	O
char	O
*	O
)	O
pointer	pointer
+	O
2	int
)	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
pointer	pointer
[	O
1	int
]	O
==	O
1	int
)	O
fprintf	function
(	O
NetTrace	pointer
,	O
" SEND"	pointer
)	O
;	O
else	O
fprintf	function
(	O
NetTrace	pointer
,	O
" %d (unknown)"	pointer
,	O
pointer	pointer
[	O
1	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
2	int
;	O
i	int
<	O
length	int
;	O
i	int
++	O
)	O
fprintf	function
(	O
NetTrace	pointer
,	O
" ?%d?"	pointer
,	O
pointer	pointer
[	O
i	int
]	O
)	O
;	O
break	O
;	O
}	O
break	O
;	O
case	O
TELOPT_LFLOW	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
"TOGGLE-FLOW-CONTROL"	pointer
)	O
;	O
if	O
(	O
length	int
<	O
2	int
)	O
{	O
fprintf	function
(	O
NetTrace	pointer
,	O
" (empty suboption??\?)"	pointer
)	O
;	O
break	O
;	O
}	O
switch	O
(	O
pointer	pointer
[	O
1	int
]	O
)	O
{	O
case	O
LFLOW_OFF	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
" OFF"	pointer
)	O
;	O
break	O
;	O
case	O
LFLOW_ON	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
" ON"	pointer
)	O
;	O
break	O
;	O
case	O
LFLOW_RESTART_ANY	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
" RESTART-ANY"	pointer
)	O
;	O
break	O
;	O
case	O
LFLOW_RESTART_XON	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
" RESTART-XON"	pointer
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
" %d (unknown)"	pointer
,	O
pointer	pointer
[	O
1	int
]	O
)	O
;	O
}	O
for	O
(	O
i	int
=	O
2	int
;	O
i	int
<	O
length	int
;	O
i	int
++	O
)	O
fprintf	function
(	O
NetTrace	pointer
,	O
" ?%d?"	pointer
,	O
pointer	pointer
[	O
i	int
]	O
)	O
;	O
break	O
;	O
case	O
TELOPT_NAWS	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
"NAWS"	pointer
)	O
;	O
if	O
(	O
length	int
<	O
2	int
)	O
{	O
fprintf	function
(	O
NetTrace	pointer
,	O
" (empty suboption??\?)"	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
length	int
==	O
2	int
)	O
{	O
fprintf	function
(	O
NetTrace	pointer
,	O
" ?%d?"	pointer
,	O
pointer	pointer
[	O
1	int
]	O
)	O
;	O
break	O
;	O
}	O
fprintf	function
(	O
NetTrace	pointer
,	O
" %d %d (%d)"	pointer
,	O
pointer	pointer
[	O
1	int
]	O
,	O
pointer	pointer
[	O
2	int
]	O
,	O
(	O
int	O
)	O
(	O
(	O
(	O
(	O
unsigned	O
int	O
)	O
pointer	pointer
[	O
1	int
]	O
)	O
<<	O
8	int
)	O
|	O
(	O
(	O
unsigned	O
int	O
)	O
pointer	pointer
[	O
2	int
]	O
)	O
)	O
)	O
;	O
if	O
(	O
length	int
==	O
4	int
)	O
{	O
fprintf	function
(	O
NetTrace	pointer
,	O
" ?%d?"	pointer
,	O
pointer	pointer
[	O
3	int
]	O
)	O
;	O
break	O
;	O
}	O
fprintf	function
(	O
NetTrace	pointer
,	O
" %d %d (%d)"	pointer
,	O
pointer	pointer
[	O
3	int
]	O
,	O
pointer	pointer
[	O
4	int
]	O
,	O
(	O
int	O
)	O
(	O
(	O
(	O
(	O
unsigned	O
int	O
)	O
pointer	pointer
[	O
3	int
]	O
)	O
<<	O
8	int
)	O
|	O
(	O
(	O
unsigned	O
int	O
)	O
pointer	pointer
[	O
4	int
]	O
)	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
5	int
;	O
i	int
<	O
length	int
;	O
i	int
++	O
)	O
fprintf	function
(	O
NetTrace	pointer
,	O
" ?%d?"	pointer
,	O
pointer	pointer
[	O
i	int
]	O
)	O
;	O
break	O
;	O
case	O
TELOPT_LINEMODE	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
"LINEMODE "	pointer
)	O
;	O
if	O
(	O
length	int
<	O
2	int
)	O
{	O
fprintf	function
(	O
NetTrace	pointer
,	O
" (empty suboption??\?)"	pointer
)	O
;	O
break	O
;	O
}	O
switch	O
(	O
pointer	pointer
[	O
1	int
]	O
)	O
{	O
case	O
WILL	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
"WILL "	pointer
)	O
;	O
goto	O
common	O
;	O
case	O
WONT	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
"WONT "	pointer
)	O
;	O
goto	O
common	O
;	O
case	O
DO	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
"DO "	pointer
)	O
;	O
goto	O
common	O
;	O
case	O
DONT	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
"DONT "	pointer
)	O
;	O
common	O
:	O
if	O
(	O
length	int
<	O
3	int
)	O
{	O
fprintf	function
(	O
NetTrace	pointer
,	O
"(no option??\?)"	pointer
)	O
;	O
break	O
;	O
}	O
switch	O
(	O
pointer	pointer
[	O
2	int
]	O
)	O
{	O
case	O
LM_FORWARDMASK	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
"Forward Mask"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
3	int
;	O
i	int
<	O
length	int
;	O
i	int
++	O
)	O
fprintf	function
(	O
NetTrace	pointer
,	O
" %x"	pointer
,	O
pointer	pointer
[	O
i	int
]	O
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
"%d (unknown)"	pointer
,	O
pointer	pointer
[	O
2	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
3	int
;	O
i	int
<	O
length	int
;	O
i	int
++	O
)	O
fprintf	function
(	O
NetTrace	pointer
,	O
" %d"	pointer
,	O
pointer	pointer
[	O
i	int
]	O
)	O
;	O
break	O
;	O
}	O
break	O
;	O
case	O
LM_SLC	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
"SLC"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
2	int
;	O
i	int
<	O
length	int
-	O
2	int
;	O
i	int
+=	O
3	int
)	O
{	O
if	O
(	O
SLC_NAME_OK	O
(	O
pointer	pointer
[	O
i	int
+	O
SLC_FUNC	int
]	O
)	O
)	O
fprintf	function
(	O
NetTrace	pointer
,	O
" %s"	pointer
,	O
SLC_NAME	O
(	O
pointer	pointer
[	O
i	int
+	O
SLC_FUNC	int
]	O
)	O
)	O
;	O
else	O
fprintf	function
(	O
NetTrace	pointer
,	O
" %d"	pointer
,	O
pointer	pointer
[	O
i	int
+	O
SLC_FUNC	int
]	O
)	O
;	O
switch	O
(	O
pointer	pointer
[	O
i	int
+	O
SLC_FLAGS	int
]	O
&	O
SLC_LEVELBITS	int
)	O
{	O
case	O
SLC_NOSUPPORT	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
" NOSUPPORT"	pointer
)	O
;	O
break	O
;	O
case	O
SLC_CANTCHANGE	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
" CANTCHANGE"	pointer
)	O
;	O
break	O
;	O
case	O
SLC_VARIABLE	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
" VARIABLE"	pointer
)	O
;	O
break	O
;	O
case	O
SLC_DEFAULT	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
" DEFAULT"	pointer
)	O
;	O
break	O
;	O
}	O
fprintf	function
(	O
NetTrace	pointer
,	O
"%s%s%s"	pointer
,	O
pointer	pointer
[	O
i	int
+	O
SLC_FLAGS	int
]	O
&	O
SLC_ACK	int
?	O
"|ACK"	pointer
:	O
""	pointer
,	O
pointer	pointer
[	O
i	int
+	O
SLC_FLAGS	int
]	O
&	O
SLC_FLUSHIN	int
?	O
"|FLUSHIN"	pointer
:	O
""	pointer
,	O
pointer	pointer
[	O
i	int
+	O
SLC_FLAGS	int
]	O
&	O
SLC_FLUSHOUT	int
?	O
"|FLUSHOUT"	pointer
:	O
""	pointer
)	O
;	O
if	O
(	O
pointer	pointer
[	O
i	int
+	O
SLC_FLAGS	int
]	O
&	O
~	O
(	O
SLC_ACK	int
|	O
SLC_FLUSHIN	int
|	O
SLC_FLUSHOUT	int
|	O
SLC_LEVELBITS	int
)	O
)	O
fprintf	function
(	O
NetTrace	pointer
,	O
"(0x%x)"	pointer
,	O
pointer	pointer
[	O
i	int
+	O
SLC_FLAGS	int
]	O
)	O
;	O
fprintf	function
(	O
NetTrace	pointer
,	O
" %d;"	pointer
,	O
pointer	pointer
[	O
i	int
+	O
SLC_VALUE	int
]	O
)	O
;	O
if	O
(	O
(	O
pointer	pointer
[	O
i	int
+	O
SLC_VALUE	int
]	O
==	O
IAC	int
)	O
&&	O
(	O
pointer	pointer
[	O
i	int
+	O
SLC_VALUE	int
+	O
1	int
]	O
==	O
IAC	int
)	O
)	O
i	int
++	O
;	O
}	O
for	O
(	O
;	O
i	int
<	O
length	int
;	O
i	int
++	O
)	O
fprintf	function
(	O
NetTrace	pointer
,	O
" ?%d?"	pointer
,	O
pointer	pointer
[	O
i	int
]	O
)	O
;	O
break	O
;	O
case	O
LM_MODE	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
"MODE "	pointer
)	O
;	O
if	O
(	O
length	int
<	O
3	int
)	O
{	O
fprintf	function
(	O
NetTrace	pointer
,	O
"(no mode??\?)"	pointer
)	O
;	O
break	O
;	O
}	O
{	O
char	O
tbuf	array
[	O
64	int
]	O
;	O
sprintf	function
(	O
tbuf	array
,	O
"%s%s%s%s%s"	pointer
,	O
pointer	pointer
[	O
2	int
]	O
&	O
MODE_EDIT	int
?	O
"|EDIT"	pointer
:	O
""	pointer
,	O
pointer	pointer
[	O
2	int
]	O
&	O
MODE_TRAPSIG	int
?	O
"|TRAPSIG"	pointer
:	O
""	pointer
,	O
pointer	pointer
[	O
2	int
]	O
&	O
MODE_SOFT_TAB	int
?	O
"|SOFT_TAB"	pointer
:	O
""	pointer
,	O
pointer	pointer
[	O
2	int
]	O
&	O
MODE_LIT_ECHO	int
?	O
"|LIT_ECHO"	pointer
:	O
""	pointer
,	O
pointer	pointer
[	O
2	int
]	O
&	O
MODE_ACK	int
?	O
"|ACK"	pointer
:	O
""	pointer
)	O
;	O
fprintf	function
(	O
NetTrace	pointer
,	O
"%s"	pointer
,	O
tbuf	array
[	O
1	int
]	O
?	O
&	O
tbuf	array
[	O
1	int
]	O
:	O
"0"	pointer
)	O
;	O
}	O
if	O
(	O
pointer	pointer
[	O
2	int
]	O
&	O
~	O
(	O
MODE_MASK	int
)	O
)	O
fprintf	function
(	O
NetTrace	pointer
,	O
" (0x%x)"	pointer
,	O
pointer	pointer
[	O
2	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
3	int
;	O
i	int
<	O
length	int
;	O
i	int
++	O
)	O
fprintf	function
(	O
NetTrace	pointer
,	O
" ?0x%x?"	pointer
,	O
pointer	pointer
[	O
i	int
]	O
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
"%d (unknown)"	pointer
,	O
pointer	pointer
[	O
1	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
2	int
;	O
i	int
<	O
length	int
;	O
i	int
++	O
)	O
fprintf	function
(	O
NetTrace	pointer
,	O
" %d"	pointer
,	O
pointer	pointer
[	O
i	int
]	O
)	O
;	O
}	O
break	O
;	O
case	O
TELOPT_STATUS	int
:	O
{	O
register	O
char	O
*	O
cp	pointer
;	O
register	O
int	O
j	int
,	O
k	int
;	O
fprintf	function
(	O
NetTrace	pointer
,	O
"STATUS"	pointer
)	O
;	O
switch	O
(	O
pointer	pointer
[	O
1	int
]	O
)	O
{	O
default	O
:	O
if	O
(	O
pointer	pointer
[	O
1	int
]	O
==	O
TELQUAL_SEND	int
)	O
fprintf	function
(	O
NetTrace	pointer
,	O
" SEND"	pointer
)	O
;	O
else	O
fprintf	function
(	O
NetTrace	pointer
,	O
" %d (unknown)"	pointer
,	O
pointer	pointer
[	O
1	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
2	int
;	O
i	int
<	O
length	int
;	O
i	int
++	O
)	O
fprintf	function
(	O
NetTrace	pointer
,	O
" ?%d?"	pointer
,	O
pointer	pointer
[	O
i	int
]	O
)	O
;	O
break	O
;	O
case	O
TELQUAL_IS	int
:	O
if	O
(	O
--	O
want_status_response	int
<	O
0	int
)	O
want_status_response	int
=	O
0	int
;	O
if	O
(	O
NetTrace	pointer
==	O
stdout	pointer
)	O
fprintf	function
(	O
NetTrace	pointer
,	O
" IS\r\n"	pointer
)	O
;	O
else	O
fprintf	function
(	O
NetTrace	pointer
,	O
" IS\n"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
2	int
;	O
i	int
<	O
length	int
;	O
i	int
++	O
)	O
{	O
switch	O
(	O
pointer	pointer
[	O
i	int
]	O
)	O
{	O
case	O
DO	int
:	O
cp	pointer
=	O
"DO"	pointer
;	O
goto	O
common2	O
;	O
case	O
DONT	int
:	O
cp	pointer
=	O
"DONT"	pointer
;	O
goto	O
common2	O
;	O
case	O
WILL	int
:	O
cp	pointer
=	O
"WILL"	pointer
;	O
goto	O
common2	O
;	O
case	O
WONT	int
:	O
cp	pointer
=	O
"WONT"	pointer
;	O
goto	O
common2	O
;	O
common2	O
:	O
i	int
++	O
;	O
if	O
(	O
TELOPT_OK	O
(	O
(	O
int	O
)	O
pointer	pointer
[	O
i	int
]	O
)	O
)	O
fprintf	function
(	O
NetTrace	pointer
,	O
" %s %s"	pointer
,	O
cp	pointer
,	O
TELOPT	O
(	O
pointer	pointer
[	O
i	int
]	O
)	O
)	O
;	O
else	O
fprintf	function
(	O
NetTrace	pointer
,	O
" %s %d"	pointer
,	O
cp	pointer
,	O
pointer	pointer
[	O
i	int
]	O
)	O
;	O
if	O
(	O
NetTrace	pointer
==	O
stdout	pointer
)	O
fprintf	function
(	O
NetTrace	pointer
,	O
"\r\n"	pointer
)	O
;	O
else	O
fprintf	function
(	O
NetTrace	pointer
,	O
"\n"	pointer
)	O
;	O
break	O
;	O
case	O
SB	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
" SB "	pointer
)	O
;	O
i	int
++	O
;	O
j	int
=	O
k	int
=	O
i	int
;	O
while	O
(	O
j	int
<	O
length	int
)	O
{	O
if	O
(	O
pointer	pointer
[	O
j	int
]	O
==	O
SE	int
)	O
{	O
if	O
(	O
j	int
+	O
1	int
==	O
length	int
)	O
break	O
;	O
if	O
(	O
pointer	pointer
[	O
j	int
+	O
1	int
]	O
==	O
SE	int
)	O
j	int
++	O
;	O
else	O
break	O
;	O
}	O
pointer	pointer
[	O
k	int
++	O
]	O
=	O
pointer	pointer
[	O
j	int
++	O
]	O
;	O
}	O
printsub	function
(	O
0	int
,	O
&	O
pointer	pointer
[	O
i	int
]	O
,	O
k	int
-	O
i	int
)	O
;	O
if	O
(	O
i	int
<	O
length	int
)	O
{	O
fprintf	function
(	O
NetTrace	pointer
,	O
" SE"	pointer
)	O
;	O
i	int
=	O
j	int
;	O
}	O
else	O
i	int
=	O
j	int
-	O
1	int
;	O
if	O
(	O
NetTrace	pointer
==	O
stdout	pointer
)	O
fprintf	function
(	O
NetTrace	pointer
,	O
"\r\n"	pointer
)	O
;	O
else	O
fprintf	function
(	O
NetTrace	pointer
,	O
"\n"	pointer
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
" %d"	pointer
,	O
pointer	pointer
[	O
i	int
]	O
)	O
;	O
break	O
;	O
}	O
}	O
break	O
;	O
}	O
break	O
;	O
}	O
case	O
TELOPT_XDISPLOC	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
"X-DISPLAY-LOCATION "	pointer
)	O
;	O
switch	O
(	O
pointer	pointer
[	O
1	int
]	O
)	O
{	O
case	O
TELQUAL_IS	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
"IS \"%.*s\""	pointer
,	O
length	int
-	O
2	int
,	O
(	O
char	O
*	O
)	O
pointer	pointer
+	O
2	int
)	O
;	O
break	O
;	O
case	O
TELQUAL_SEND	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
"SEND"	pointer
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
"- unknown qualifier %d (0x%x)."	pointer
,	O
pointer	pointer
[	O
1	int
]	O
,	O
pointer	pointer
[	O
1	int
]	O
)	O
;	O
}	O
break	O
;	O
case	O
TELOPT_NEW_ENVIRON	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
"NEW-ENVIRON "	pointer
)	O
;	O
switch	O
(	O
pointer	pointer
[	O
1	int
]	O
)	O
{	O
case	O
TELQUAL_IS	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
"IS "	pointer
)	O
;	O
goto	O
env_common	O
;	O
case	O
TELQUAL_SEND	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
"SEND "	pointer
)	O
;	O
goto	O
env_common	O
;	O
case	O
TELQUAL_INFO	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
"INFO "	pointer
)	O
;	O
env_common	O
:	O
{	O
register	O
int	O
noquote	int
=	O
2	int
;	O
for	O
(	O
i	int
=	O
2	int
;	O
i	int
<	O
length	int
;	O
i	int
++	O
)	O
{	O
switch	O
(	O
pointer	pointer
[	O
i	int
]	O
)	O
{	O
case	O
NEW_ENV_VALUE	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
"\" VALUE "	pointer
+	O
noquote	int
)	O
;	O
noquote	int
=	O
2	int
;	O
break	O
;	O
case	O
NEW_ENV_VAR	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
"\" VAR "	pointer
+	O
noquote	int
)	O
;	O
noquote	int
=	O
2	int
;	O
break	O
;	O
case	O
ENV_ESC	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
"\" ESC "	pointer
+	O
noquote	int
)	O
;	O
noquote	int
=	O
2	int
;	O
break	O
;	O
case	O
ENV_USERVAR	int
:	O
fprintf	function
(	O
NetTrace	pointer
,	O
"\" USERVAR "	pointer
+	O
noquote	int
)	O
;	O
noquote	int
=	O
2	int
;	O
break	O
;	O
default	O
:	O
if	O
(	O
isprint	function
(	O
pointer	pointer
[	O
i	int
]	O
)	O
&&	O
pointer	pointer
[	O
i	int
]	O
!=	O
'"'	O
)	O
{	O
if	O
(	O
noquote	int
)	O
{	O
putc	function
(	O
'"'	O
,	O
NetTrace	pointer
)	O
;	O
noquote	int
=	O
0	int
;	O
}	O
putc	function
(	O
pointer	pointer
[	O
i	int
]	O
,	O
NetTrace	pointer
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
NetTrace	pointer
,	O
"\" %03o "	pointer
+	O
noquote	int
,	O
pointer	pointer
[	O
i	int
]	O
)	O
;	O
noquote	int
=	O
2	int
;	O
}	O
break	O
;	O
}	O
}	O
if	O
(	O
!	O
noquote	int
)	O
putc	function
(	O
'"'	O
,	O
NetTrace	pointer
)	O
;	O
break	O
;	O
}	O
}	O
break	O
;	O
default	O
:	O
if	O
(	O
TELOPT_OK	O
(	O
pointer	pointer
[	O
0	int
]	O
)	O
)	O
fprintf	function
(	O
NetTrace	pointer
,	O
"%s (unknown)"	pointer
,	O
TELOPT	O
(	O
pointer	pointer
[	O
0	int
]	O
)	O
)	O
;	O
else	O
fprintf	function
(	O
NetTrace	pointer
,	O
"%d (unknown)"	pointer
,	O
pointer	pointer
[	O
0	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
length	int
;	O
i	int
++	O
)	O
fprintf	function
(	O
NetTrace	pointer
,	O
" %d"	pointer
,	O
pointer	pointer
[	O
i	int
]	O
)	O
;	O
break	O
;	O
}	O
if	O
(	O
direction	char
)	O
{	O
if	O
(	O
NetTrace	pointer
==	O
stdout	pointer
)	O
fprintf	function
(	O
NetTrace	pointer
,	O
"\r\n"	pointer
)	O
;	O
else	O
fprintf	function
(	O
NetTrace	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
if	O
(	O
NetTrace	pointer
==	O
stdout	pointer
)	O
fflush	function
(	O
NetTrace	pointer
)	O
;	O
}	O
}	O
void	O
EmptyTerminal	function
(	O
void	O
)	O
{	O
fd_set	struct
o	struct
;	O
FD_ZERO	O
(	O
&	O
o	struct
)	O
;	O
if	O
(	O
TTYBYTES	O
(	O
)	O
==	O
0	int
)	O
{	O
FD_SET	O
(	O
tout	int
,	O
&	O
o	struct
)	O
;	O
select	function
(	O
tout	int
+	O
1	int
,	O
(	O
fd_set	struct
*	O
)	O
0	int
,	O
&	O
o	struct
,	O
(	O
fd_set	struct
*	O
)	O
0	int
,	O
(	O
struct	O
timeval	struct
*	O
)	O
0	int
)	O
;	O
}	O
else	O
{	O
while	O
(	O
TTYBYTES	O
(	O
)	O
)	O
{	O
ttyflush	function
(	O
0	int
)	O
;	O
FD_SET	O
(	O
tout	int
,	O
&	O
o	struct
)	O
;	O
select	function
(	O
tout	int
+	O
1	int
,	O
(	O
fd_set	struct
*	O
)	O
0	int
,	O
&	O
o	struct
,	O
(	O
fd_set	struct
*	O
)	O
0	int
,	O
(	O
struct	O
timeval	struct
*	O
)	O
0	int
)	O
;	O
}	O
}	O
}	O
void	O
SetForExit	function
(	O
void	O
)	O
{	O
setconnmode	function
(	O
0	int
)	O
;	O
do	O
{	O
telrcv	function
(	O
)	O
;	O
EmptyTerminal	function
(	O
)	O
;	O
}	O
while	O
(	O
ring_full_count	function
(	O
&	O
netiring	struct
)	O
)	O
;	O
setcommandmode	function
(	O
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
fflush	function
(	O
stderr	pointer
)	O
;	O
setconnmode	function
(	O
0	int
)	O
;	O
EmptyTerminal	function
(	O
)	O
;	O
setcommandmode	function
(	O
)	O
;	O
}	O
void	O
Exit	function
(	O
int	O
returnCode	int
)	O
{	O
SetForExit	function
(	O
)	O
;	O
exit	function
(	O
returnCode	int
)	O
;	O
}	O
void	O
ExitString	function
(	O
char	O
*	O
string	pointer
,	O
int	O
returnCode	int
)	O
{	O
SetForExit	function
(	O
)	O
;	O
fwrite	function
(	O
string	pointer
,	O
1	int
,	O
strlen	function
(	O
string	pointer
)	O
,	O
stderr	pointer
)	O
;	O
exit	function
(	O
returnCode	int
)	O
;	O
}	O