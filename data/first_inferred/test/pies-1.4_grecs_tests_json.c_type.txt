static	O
void	O
printer	function
(	O
void	O
*	O
d	*
,	O
char	O
const	O
*	O
buf	*
,	O
size_t	long
size	long
)	O
{	O
FILE	struct
*	O
fp	*
=	O
d	*
;	O
fwrite	function
(	O
buf	*
,	O
size	long
,	O
1	int
,	O
fp	*
)	O
;	O
}	O
struct	O
json_format	struct
fmt	*
=	O
{	O
0	int
,	O
-	O
1	int
,	O
printer	*
,	O
NULL	O
}	O
;	O
static	O
void	O
usage	function
(	O
const	O
char	O
*	O
arg	struct
,	O
FILE	struct
*	O
fp	*
,	O
int	O
code	int
)	O
{	O
fprintf	function
(	O
fp	*
,	O
"usage: %s [-file=FILE][-indent=N][-precision=N] [expr]\n"	*
,	O
arg	*
)	O
;	O
exit	function
(	O
code	int
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*
)	O
{	O
char	O
*	O
progname	*
=	O
argv	*
[	O
0	int
]	O
;	O
char	O
*	O
file	*
=	O
NULL	O
;	O
char	O
*	O
input	*
;	O
size_t	long
size	long
;	O
struct	O
json_value	struct
*	O
obj	*
;	O
char	O
*	O
key	*
=	O
NULL	O
;	O
while	O
(	O
--	O
argc	int
)	O
{	O
char	O
*	O
arg	*
=	O
*	O
++	O
argv	*
;	O
if	O
(	O
strncmp	function
(	O
arg	*
,	O
"-file="	*
,	O
6	int
)	O
==	O
0	int
)	O
file	*
=	O
arg	*
+	O
6	int
;	O
else	O
if	O
(	O
strncmp	function
(	O
arg	*
,	O
"-indent="	*
,	O
8	int
)	O
==	O
0	int
)	O
fmt	*
.	O
indent	int
=	O
atoi	function
(	O
arg	*
+	O
8	int
)	O
;	O
else	O
if	O
(	O
strncmp	function
(	O
arg	*
,	O
"-search="	*
,	O
8	int
)	O
==	O
0	int
)	O
key	*
=	O
arg	*
+	O
8	int
;	O
else	O
if	O
(	O
strncmp	function
(	O
arg	*
,	O
"-precision="	*
,	O
11	int
)	O
==	O
0	int
)	O
fmt	*
.	O
precision	long
=	O
atoi	function
(	O
arg	*
+	O
11	int
)	O
;	O
else	O
if	O
(	O
arg	*
[	O
0	int
]	O
==	O
'-'	O
)	O
usage	function
(	O
progname	*
,	O
stderr	*
,	O
1	int
)	O
;	O
else	O
break	O
;	O
}	O
if	O
(	O
file	*
)	O
{	O
struct	O
stat	struct
st	struct
;	O
int	O
fd	int
;	O
ssize_t	long
n	long
;	O
if	O
(	O
argc	long
!=	O
0	int
)	O
usage	function
(	O
progname	*
,	O
stderr	*
,	O
1	int
)	O
;	O
fd	int
=	O
open	function
(	O
file	*
,	O
O_RDONLY	int
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
file	*
)	O
;	O
return	O
2	int
;	O
}	O
if	O
(	O
fstat	function
(	O
fd	int
,	O
&	O
st	struct
)	O
)	O
{	O
perror	function
(	O
"fstat"	*
)	O
;	O
return	O
2	int
;	O
}	O
size	long
=	O
(	O
size_t	long
)	O
st	struct
.	O
st_size	long
;	O
if	O
(	O
size	long
!=	O
st	struct
.	O
st_size	long
)	O
abort	function
(	O
)	O
;	O
input	*
=	O
grecs_malloc	function
(	O
size	long
+	O
1	int
)	O
;	O
n	long
=	O
read	*
(	O
fd	int
,	O
input	*
,	O
size	long
)	O
;	O
if	O
(	O
n	int
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"read"	*
)	O
;	O
return	O
2	int
;	O
}	O
if	O
(	O
n	long
!=	O
size	long
)	O
{	O
fprintf	function
(	O
stderr	*
,	O
"%s: short read from %s\n"	*
,	O
progname	*
,	O
file	*
)	O
;	O
return	O
2	int
;	O
}	O
input	*
[	O
n	long
]	O
=	O
0	int
;	O
close	function
(	O
fd	int
)	O
;	O
}	O
else	O
if	O
(	O
argc	int
==	O
1	int
)	O
{	O
if	O
(	O
file	*
)	O
usage	function
(	O
progname	*
,	O
stderr	*
,	O
1	int
)	O
;	O
input	*
=	O
*	O
argv	*
;	O
size	long
=	O
strlen	function
(	O
input	*
)	O
;	O
}	O
else	O
usage	function
(	O
progname	*
,	O
stderr	*
,	O
1	int
)	O
;	O
obj	*
=	O
json_parse_string	function
(	O
input	*
,	O
size	int
)	O
;	O
if	O
(	O
!	O
obj	*
)	O
{	O
json_err_locus	struct
.	O
beg	struct
.	O
file	*
=	O
json_err_locus	struct
.	O
end	struct
.	O
file	*
=	O
file	*
?	O
file	*
:	O
"input"	O
;	O
grecs_error	function
(	O
&	O
json_err_locus	struct
,	O
0	int
,	O
"%s"	*
,	O
json_err_diag	*
)	O
;	O
return	O
3	int
;	O
}	O
if	O
(	O
key	*
)	O
{	O
struct	O
json_value	struct
*	O
p	*
=	O
json_value_lookup	function
(	O
obj	*
,	O
key	*
)	O
;	O
if	O
(	O
!	O
p	*
)	O
return	O
4	int
;	O
obj	*
=	O
p	*
;	O
}	O
fmt	*
.	O
data	*
=	O
stdout	*
;	O
json_format_value	function
(	O
obj	*
,	O
&	O
fmt	*
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
return	O
0	int
;	O
}	O