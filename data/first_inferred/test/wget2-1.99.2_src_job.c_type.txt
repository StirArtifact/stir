void	O
job_free	function
(	O
JOB	struct
*	O
job	pointer
)	O
{	O
if	O
(	O
job	pointer
->	O
challenges_alloc	bool
)	O
wget_http_free_challenges	function
(	O
&	O
job	pointer
->	O
challenges	pointer
)	O
;	O
wget_http_free_challenges	function
(	O
&	O
job	pointer
->	O
proxy_challenges	pointer
)	O
;	O
wget_metalink_free	function
(	O
&	O
job	pointer
->	O
metalink	pointer
)	O
;	O
wget_vector_free	function
(	O
&	O
job	pointer
->	O
parts	pointer
)	O
;	O
wget_list_free	function
(	O
&	O
job	pointer
->	O
remaining_sig_ext	pointer
)	O
;	O
xfree	O
(	O
job	pointer
->	O
sig_req	pointer
)	O
;	O
xfree	O
(	O
job	pointer
->	O
local_filename	pointer
)	O
;	O
xfree	O
(	O
job	pointer
->	O
sig_filename	pointer
)	O
;	O
}	O
void	O
job_create_parts	function
(	O
JOB	struct
*	O
job	pointer
)	O
{	O
PART	struct
part	pointer
;	O
wget_metalink	struct
*	O
metalink	pointer
;	O
ssize_t	long
fsize	long
;	O
if	O
(	O
!	O
(	O
metalink	pointer
=	O
job	pointer
->	O
metalink	pointer
)	O
)	O
return	O
;	O
memset	function
(	O
&	O
part	pointer
,	O
0	int
,	O
sizeof	O
(	O
PART	struct
)	O
)	O
;	O
if	O
(	O
!	O
job	pointer
->	O
parts	pointer
)	O
job	pointer
->	O
parts	pointer
=	O
wget_vector_create	function
(	O
wget_vector_size	function
(	O
metalink	pointer
->	O
pieces	pointer
)	O
,	O
NULL	O
)	O
;	O
else	O
wget_vector_clear	function
(	O
job	pointer
->	O
parts	pointer
)	O
;	O
fsize	long
=	O
metalink	pointer
->	O
size	pointer
;	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
it	int
<	O
wget_vector_size	function
(	O
metalink	pointer
->	O
pieces	pointer
)	O
;	O
it	int
++	O
)	O
{	O
wget_metalink_piece	struct
*	O
piece	pointer
=	O
wget_vector_get	function
(	O
metalink	pointer
->	O
pieces	pointer
,	O
it	int
)	O
;	O
if	O
(	O
fsize	long
>=	O
piece	pointer
->	O
length	long
)	O
{	O
part	pointer
.	O
length	long
=	O
piece	pointer
->	O
length	long
;	O
}	O
else	O
{	O
part	pointer
.	O
length	long
=	O
fsize	long
;	O
}	O
part	pointer
.	O
id	int
=	O
it	int
+	O
1	int
;	O
wget_vector_add_memdup	function
(	O
job	pointer
->	O
parts	pointer
,	O
&	O
part	pointer
,	O
sizeof	O
(	O
PART	struct
)	O
)	O
;	O
part	pointer
.	O
position	long
+=	O
part	pointer
.	O
length	long
;	O
fsize	long
-=	O
piece	pointer
->	O
length	long
;	O
}	O
}	O
static	O
int	O
check_piece_hash	function
(	O
wget_metalink_hash	struct
*	O
hash	pointer
,	O
int	O
fd	array
,	O
off_t	long
offset	long
,	O
size_t	long
length	long
)	O
{	O
char	O
sum	array
[	O
128	int
+	O
1	int
]	O
;	O
if	O
(	O
wget_hash_file_fd	function
(	O
hash	pointer
->	O
type	enum
,	O
fd	array
,	O
sum	array
,	O
sizeof	O
(	O
sum	array
)	O
,	O
offset	long
,	O
length	long
)	O
!=	O
-	O
1	int
)	O
{	O
return	O
!	O
wget_strcasecmp_ascii	function
(	O
sum	array
,	O
hash	pointer
->	O
hash_hex	array
)	O
;	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
_check_file_fd	function
(	O
wget_metalink_hash	struct
*	O
hash	pointer
,	O
int	O
fd	array
)	O
{	O
char	O
sum	array
[	O
128	int
+	O
1	int
]	O
;	O
if	O
(	O
wget_hash_file_fd	function
(	O
hash	pointer
->	O
type	enum
,	O
fd	array
,	O
sum	array
,	O
sizeof	O
(	O
sum	array
)	O
,	O
0	int
,	O
0	int
)	O
!=	O
-	O
1	int
)	O
{	O
return	O
!	O
wget_strcasecmp_ascii	function
(	O
sum	array
,	O
hash	pointer
->	O
hash_hex	array
)	O
;	O
}	O
return	O
-	O
1	int
;	O
}	O
int	O
job_validate_file	function
(	O
JOB	struct
*	O
job	pointer
)	O
{	O
PART	struct
part	pointer
;	O
wget_metalink	struct
*	O
metalink	pointer
;	O
off_t	long
fsize	long
,	O
real_fsize	long
=	O
0	int
;	O
int	O
fd	array
;	O
struct	O
stat	struct
st	struct
;	O
if	O
(	O
!	O
(	O
metalink	pointer
=	O
job	pointer
->	O
metalink	pointer
)	O
)	O
return	O
0	int
;	O
memset	function
(	O
&	O
part	pointer
,	O
0	int
,	O
sizeof	O
(	O
PART	struct
)	O
)	O
;	O
if	O
(	O
!	O
metalink	pointer
->	O
pieces	pointer
)	O
{	O
wget_metalink_piece	struct
piece	pointer
;	O
wget_metalink_hash	struct
*	O
hash	pointer
=	O
wget_vector_get	function
(	O
metalink	pointer
->	O
hashes	pointer
,	O
0	int
)	O
;	O
if	O
(	O
!	O
hash	pointer
)	O
return	O
1	int
;	O
piece	pointer
.	O
length	long
=	O
metalink	pointer
->	O
size	pointer
;	O
piece	pointer
.	O
position	long
=	O
0	int
;	O
wget_strscpy	function
(	O
piece	pointer
.	O
hash	pointer
.	O
type	enum
,	O
hash	pointer
->	O
type	enum
,	O
sizeof	O
(	O
piece	pointer
.	O
hash	pointer
.	O
type	enum
)	O
)	O
;	O
wget_strscpy	function
(	O
piece	pointer
.	O
hash	pointer
.	O
hash_hex	array
,	O
hash	pointer
->	O
hash_hex	array
,	O
sizeof	O
(	O
piece	pointer
.	O
hash	pointer
.	O
hash_hex	array
)	O
)	O
;	O
metalink	pointer
->	O
pieces	pointer
=	O
wget_vector_create	function
(	O
1	int
,	O
NULL	O
)	O
;	O
wget_vector_add_memdup	function
(	O
metalink	pointer
->	O
pieces	pointer
,	O
&	O
piece	pointer
,	O
sizeof	O
(	O
wget_metalink_piece	struct
)	O
)	O
;	O
}	O
if	O
(	O
!	O
job	pointer
->	O
parts	pointer
)	O
job	pointer
->	O
parts	pointer
=	O
wget_vector_create	function
(	O
wget_vector_size	function
(	O
metalink	pointer
->	O
pieces	pointer
)	O
,	O
NULL	O
)	O
;	O
else	O
wget_vector_clear	function
(	O
job	pointer
->	O
parts	pointer
)	O
;	O
fsize	long
=	O
metalink	pointer
->	O
size	pointer
;	O
if	O
(	O
wget_vector_size	function
(	O
metalink	pointer
->	O
hashes	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
stat	struct
(	O
metalink	pointer
->	O
name	pointer
,	O
&	O
st	struct
)	O
==	O
0	int
&&	O
st	struct
.	O
st_size	long
==	O
fsize	long
)	O
{	O
return	O
1	int
;	O
}	O
}	O
if	O
(	O
stat	struct
(	O
metalink	pointer
->	O
name	pointer
,	O
&	O
st	struct
)	O
==	O
0	int
&&	O
(	O
real_fsize	long
=	O
st	struct
.	O
st_size	long
)	O
>	O
fsize	long
)	O
{	O
if	O
(	O
wget_truncate	function
(	O
metalink	pointer
->	O
name	pointer
,	O
fsize	long
)	O
!=	O
WGET_E_SUCCESS	int
)	O
error_printf	O
(	O
_	O
(	O
"Failed to truncate %s\n from %llu to %llu bytes\n"	pointer
)	O
,	O
metalink	pointer
->	O
name	pointer
,	O
(	O
unsigned	O
long	O
long	O
)	O
st	struct
.	O
st_size	long
,	O
(	O
unsigned	O
long	O
long	O
)	O
fsize	long
)	O
;	O
else	O
real_fsize	long
=	O
fsize	long
;	O
}	O
if	O
(	O
wget_vector_size	function
(	O
metalink	pointer
->	O
hashes	pointer
)	O
>	O
0	int
&&	O
(	O
fd	array
=	O
open	function
(	O
metalink	pointer
->	O
name	pointer
,	O
O_RDONLY	int
|	O
O_BINARY	int
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
int	O
rc	int
=	O
-	O
1	int
;	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
errno	O
!=	O
EINTR	int
&&	O
it	int
<	O
wget_vector_size	function
(	O
metalink	pointer
->	O
hashes	pointer
)	O
;	O
it	int
++	O
)	O
{	O
wget_metalink_hash	struct
*	O
hash	pointer
=	O
wget_vector_get	function
(	O
metalink	pointer
->	O
hashes	pointer
,	O
it	int
)	O
;	O
if	O
(	O
(	O
rc	int
=	O
_check_file_fd	function
(	O
hash	pointer
,	O
fd	array
)	O
)	O
==	O
-	O
1	int
)	O
continue	O
;	O
break	O
;	O
}	O
if	O
(	O
rc	int
==	O
1	int
)	O
{	O
info_printf	O
(	O
_	O
(	O
"Checksum OK for '%s'\n"	pointer
)	O
,	O
metalink	pointer
->	O
name	pointer
)	O
;	O
close	pointer
(	O
fd	array
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
rc	int
==	O
-	O
1	int
)	O
{	O
info_printf	O
(	O
_	O
(	O
"Failed to build checksum, assuming file to be OK\n"	pointer
)	O
)	O
;	O
close	pointer
(	O
fd	array
)	O
;	O
return	O
1	int
;	O
}	O
info_printf	O
(	O
_	O
(	O
"Bad checksum for '%s'\n"	pointer
)	O
,	O
metalink	pointer
->	O
name	pointer
)	O
;	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
errno	O
!=	O
EINTR	int
&&	O
it	int
<	O
wget_vector_size	function
(	O
metalink	pointer
->	O
pieces	pointer
)	O
;	O
it	int
++	O
)	O
{	O
wget_metalink_piece	struct
*	O
piece	pointer
=	O
wget_vector_get	function
(	O
metalink	pointer
->	O
pieces	pointer
,	O
it	int
)	O
;	O
wget_metalink_hash	struct
*	O
hash	pointer
=	O
&	O
piece	pointer
->	O
hash	pointer
;	O
if	O
(	O
fsize	long
>=	O
piece	pointer
->	O
length	long
)	O
{	O
part	pointer
.	O
length	long
=	O
piece	pointer
->	O
length	long
;	O
}	O
else	O
{	O
part	pointer
.	O
length	long
=	O
(	O
size_t	long
)	O
fsize	long
;	O
}	O
part	pointer
.	O
id	int
=	O
it	int
+	O
1	int
;	O
if	O
(	O
(	O
rc	int
=	O
check_piece_hash	function
(	O
hash	pointer
,	O
fd	array
,	O
part	pointer
.	O
position	long
,	O
part	pointer
.	O
length	long
)	O
)	O
!=	O
1	int
)	O
{	O
info_printf	O
(	O
_	O
(	O
"Piece %d/%d not OK - requeuing\n"	pointer
)	O
,	O
it	int
+	O
1	int
,	O
wget_vector_size	function
(	O
metalink	pointer
->	O
pieces	pointer
)	O
)	O
;	O
wget_vector_add_memdup	function
(	O
job	pointer
->	O
parts	pointer
,	O
&	O
part	pointer
,	O
sizeof	O
(	O
PART	struct
)	O
)	O
;	O
debug_printf	O
(	O
"  need to download %llu bytes from pos=%llu\n"	pointer
,	O
(	O
unsigned	O
long	O
long	O
)	O
part	pointer
.	O
length	long
,	O
(	O
unsigned	O
long	O
long	O
)	O
part	pointer
.	O
position	long
)	O
;	O
}	O
part	pointer
.	O
position	long
+=	O
part	pointer
.	O
length	long
;	O
fsize	long
-=	O
piece	pointer
->	O
length	long
;	O
}	O
close	pointer
(	O
fd	array
)	O
;	O
}	O
else	O
{	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
it	int
<	O
wget_vector_size	function
(	O
metalink	pointer
->	O
pieces	pointer
)	O
;	O
it	int
++	O
)	O
{	O
wget_metalink_piece	struct
*	O
piece	pointer
=	O
wget_vector_get	function
(	O
metalink	pointer
->	O
pieces	pointer
,	O
it	int
)	O
;	O
if	O
(	O
fsize	long
>=	O
piece	pointer
->	O
length	long
)	O
{	O
part	pointer
.	O
length	long
=	O
piece	pointer
->	O
length	long
;	O
}	O
else	O
{	O
part	pointer
.	O
length	long
=	O
fsize	long
;	O
}	O
part	pointer
.	O
id	int
=	O
it	int
+	O
1	int
;	O
if	O
(	O
real_fsize	long
<	O
part	pointer
.	O
position	long
+	O
part	pointer
.	O
length	long
)	O
{	O
int	O
idx	int
=	O
wget_vector_add_memdup	function
(	O
job	pointer
->	O
parts	pointer
,	O
&	O
part	pointer
,	O
sizeof	O
(	O
PART	struct
)	O
)	O
;	O
if	O
(	O
real_fsize	long
>	O
part	pointer
.	O
position	long
)	O
{	O
PART	struct
*	O
p	pointer
=	O
wget_vector_get	function
(	O
job	pointer
->	O
parts	pointer
,	O
idx	int
)	O
;	O
p	pointer
->	O
position	long
=	O
real_fsize	long
;	O
p	pointer
->	O
length	long
=	O
(	O
part	pointer
.	O
position	long
+	O
part	pointer
.	O
length	long
)	O
-	O
real_fsize	long
;	O
}	O
}	O
part	pointer
.	O
position	long
+=	O
part	pointer
.	O
length	long
;	O
fsize	long
-=	O
piece	pointer
->	O
length	long
;	O
}	O
}	O
return	O
0	int
;	O
}	O
JOB	struct
*	O
job_init	function
(	O
JOB	struct
*	O
job	pointer
,	O
wget_iri	struct
*	O
iri	pointer
,	O
bool	bool
http_fallback	bool
)	O
{	O
static	O
unsigned	O
long	O
long	O
jobid	long long
;	O
if	O
(	O
!	O
job	pointer
)	O
job	pointer
=	O
wget_calloc	function
(	O
1	int
,	O
sizeof	O
(	O
JOB	struct
)	O
)	O
;	O
else	O
memset	function
(	O
job	pointer
,	O
0	int
,	O
sizeof	O
(	O
JOB	struct
)	O
)	O
;	O
job	pointer
->	O
iri	pointer
=	O
iri	pointer
;	O
job	pointer
->	O
http_fallback	bool
=	O
http_fallback	bool
;	O
job	pointer
->	O
id	int
=	O
++	O
jobid	long long
;	O
return	O
job	pointer
;	O
}	O
