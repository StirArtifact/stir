char	O
lang_sh_defaults	array
[	O
]	O
=	O
"-i --F --f"	pointer
;	O
typedef	O
enum	O
{	O
IP_CODE	int
,	O
IP_STRING	int
,	O
IP_QSTRING	int
,	O
IP_COMMENT	int
,	O
IP_COMMAND	int
,	O
IP_VAR1	int
,	O
IP_VARBODY	int
,	O
IP_HD1	int
,	O
IP_HD2	int
,	O
IP_HDSTART	int
,	O
IP_HD	int
,	O
IP_HDSTARTLINE	int
,	O
IP_HDCHECKSTRING	int
}	O
sh_ip_states	enum
;	O
typedef	O
enum	O
{	O
F1_CODE	int
,	O
F1_FUNCTION	int
,	O
F1_LEADING_SPACE	int
,	O
F1_NAME	int
,	O
F1_TRAILING_SPACE	int
,	O
F1_FNTEXT	int
}	O
sh_f1_states	enum
;	O
typedef	O
enum	O
{	O
FN_INITIAL_SPACE	int
,	O
FN_NAME	int
,	O
FN_TRAIL_SPACE	int
,	O
FN_OPEN_BRACKET	int
,	O
FN_CLOSE_BRACKET	int
,	O
FN_FNTEXT	int
}	O
sh_fn_states	enum
;	O
stream_status	enum
get_sh_char	function
(	O
char	O
*	O
input_char	pointer
,	O
char_status	enum
*	O
status	enum
)	O
{	O
static	O
sh_ip_states	enum
state	pointer
=	O
IP_CODE	int
;	O
stream_status	enum
retval	enum
;	O
static	O
sh_f1_states	enum
f1_state	enum
=	O
F1_CODE	int
;	O
static	O
sh_fn_states	enum
fn_state	enum
=	O
FN_INITIAL_SPACE	int
;	O
static	O
size_t	long
f1_index	long
=	O
0	int
;	O
static	O
short	O
fn_index	short
=	O
0	int
;	O
static	O
long	O
f1_start_char	long
=	O
0	int
;	O
static	O
long	O
fn_start_char	long
=	O
0	int
;	O
static	O
long	O
f1_end_char	long
=	O
0	int
;	O
static	O
long	O
fn_end_char	long
=	O
0	int
;	O
static	O
char	O
f1_name	array
[	O
SYMBOL_LEN	int
]	O
=	O
"UNINITIALIZED"	pointer
;	O
static	O
char	O
fn_name	array
[	O
SYMBOL_LEN	int
]	O
=	O
"UNINITIALIZED"	pointer
;	O
static	O
char	O
here_marker	array
[	O
SYMBOL_LEN	int
]	O
;	O
static	O
short	O
here_marker_index	short
;	O
static	O
short	O
here_marker_length	short
;	O
static	O
long	O
f1_page_number	long
=	O
0	int
;	O
static	O
long	O
fn_page_number	long
=	O
0	int
;	O
static	O
char	O
function	array
[	O
]	O
=	O
"function"	pointer
;	O
static	O
boolean	enum
escaped	enum
=	O
FALSE	int
;	O
*	O
status	enum
=	O
CHAR_NORMAL	int
;	O
if	O
(	O
restart_language	enum
==	O
TRUE	int
)	O
{	O
state	pointer
=	O
IP_CODE	int
;	O
f1_state	enum
=	O
F1_CODE	int
;	O
fn_state	enum
=	O
FN_INITIAL_SPACE	int
;	O
f1_index	long
=	O
0	int
;	O
fn_index	short
=	O
0	int
;	O
f1_start_char	long
=	O
0	int
;	O
fn_start_char	long
=	O
0	int
;	O
f1_end_char	long
=	O
0	int
;	O
fn_end_char	long
=	O
0	int
;	O
f1_page_number	long
=	O
0	int
;	O
fn_page_number	long
=	O
0	int
;	O
escaped	enum
=	O
FALSE	int
;	O
braces_depth	short
=	O
0	int
;	O
restart_language	enum
=	O
FALSE	int
;	O
}	O
retval	enum
=	O
getnextchar	function
(	O
input_char	pointer
)	O
;	O
dm	function
(	O
'L'	O
,	O
9	int
,	O
"lang_sh.c:state=%d,f1_state=%d,fn_state=%d,input=%c\n"	pointer
,	O
state	pointer
,	O
f1_state	enum
,	O
fn_state	enum
,	O
*	O
input_char	pointer
)	O
;	O
switch	O
(	O
state	pointer
)	O
{	O
case	O
IP_CODE	int
:	O
case	O
IP_STRING	int
:	O
case	O
IP_QSTRING	int
:	O
case	O
IP_COMMAND	int
:	O
case	O
IP_VARBODY	int
:	O
if	O
(	O
escaped	enum
)	O
{	O
escaped	enum
=	O
FALSE	int
;	O
break	O
;	O
}	O
case	O
IP_HD1	int
:	O
case	O
IP_HD2	int
:	O
case	O
IP_VAR1	int
:	O
case	O
IP_HDSTART	int
:	O
if	O
(	O
(	O
*	O
input_char	pointer
==	O
'\\'	O
)	O
&&	O
!	O
escaped	enum
)	O
{	O
escaped	enum
=	O
TRUE	int
;	O
break	O
;	O
}	O
default	O
:	O
switch	O
(	O
state	pointer
)	O
{	O
case	O
IP_CODE	int
:	O
switch	O
(	O
*	O
input_char	pointer
)	O
{	O
case	O
'$'	O
:	O
state	pointer
=	O
IP_VAR1	int
;	O
break	O
;	O
case	O
'"'	O
:	O
state	pointer
=	O
IP_STRING	int
;	O
break	O
;	O
case	O
'\''	O
:	O
state	pointer
=	O
IP_QSTRING	int
;	O
break	O
;	O
case	O
'`'	O
:	O
state	pointer
=	O
IP_COMMAND	int
;	O
break	O
;	O
case	O
'#'	O
:	O
*	O
status	enum
=	O
CHAR_ITALIC	int
;	O
state	pointer
=	O
IP_COMMENT	int
;	O
break	O
;	O
case	O
'<'	O
:	O
state	pointer
=	O
IP_HD1	int
;	O
break	O
;	O
case	O
'{'	O
:	O
if	O
(	O
braces_depth	short
==	O
0	int
)	O
{	O
if	O
(	O
f1_state	enum
==	O
F1_TRAILING_SPACE	int
)	O
{	O
add_function	function
(	O
f1_name	array
,	O
f1_start_char	long
,	O
f1_end_char	long
,	O
f1_page_number	long
,	O
current_filename	pointer
)	O
;	O
f1_index	long
=	O
0	int
;	O
f1_state	enum
=	O
F1_FNTEXT	int
;	O
}	O
else	O
if	O
(	O
fn_state	enum
==	O
FN_CLOSE_BRACKET	int
)	O
{	O
add_function	function
(	O
fn_name	array
,	O
fn_start_char	long
,	O
fn_end_char	long
,	O
fn_page_number	long
,	O
current_filename	pointer
)	O
;	O
fn_index	short
=	O
0	int
;	O
fn_state	enum
=	O
FN_FNTEXT	int
;	O
}	O
}	O
braces_depth	short
++	O
;	O
break	O
;	O
case	O
'}'	O
:	O
if	O
(	O
(	O
(	O
braces_depth	short
-=	O
1	int
)	O
==	O
0	int
)	O
&&	O
(	O
(	O
f1_state	enum
==	O
F1_FNTEXT	int
)	O
||	O
(	O
fn_state	enum
==	O
FN_FNTEXT	int
)	O
)	O
)	O
{	O
end_function	function
(	O
page_number	long
)	O
;	O
retval	enum
|=	O
STREAM_FUNCTION_END	int
;	O
f1_state	enum
=	O
F1_CODE	int
;	O
fn_state	enum
=	O
FN_INITIAL_SPACE	int
;	O
}	O
break	O
;	O
default	O
:	O
;	O
}	O
break	O
;	O
case	O
IP_STRING	int
:	O
if	O
(	O
*	O
input_char	pointer
==	O
'"'	O
)	O
state	pointer
=	O
IP_CODE	int
;	O
break	O
;	O
case	O
IP_QSTRING	int
:	O
if	O
(	O
*	O
input_char	pointer
==	O
'\''	O
)	O
state	pointer
=	O
IP_CODE	int
;	O
break	O
;	O
case	O
IP_COMMAND	int
:	O
if	O
(	O
*	O
input_char	pointer
==	O
'`'	O
)	O
state	pointer
=	O
IP_CODE	int
;	O
break	O
;	O
case	O
IP_COMMENT	int
:	O
*	O
status	enum
=	O
CHAR_ITALIC	int
;	O
if	O
(	O
*	O
input_char	pointer
==	O
'\n'	O
)	O
{	O
state	pointer
=	O
IP_CODE	int
;	O
}	O
break	O
;	O
case	O
IP_VAR1	int
:	O
if	O
(	O
escaped	enum
)	O
{	O
state	pointer
=	O
IP_CODE	int
;	O
escaped	enum
=	O
FALSE	int
;	O
break	O
;	O
}	O
if	O
(	O
*	O
input_char	pointer
==	O
'{'	O
)	O
state	pointer
=	O
IP_VARBODY	int
;	O
else	O
state	pointer
=	O
IP_CODE	int
;	O
break	O
;	O
case	O
IP_VARBODY	int
:	O
if	O
(	O
*	O
input_char	pointer
==	O
'}'	O
)	O
state	pointer
=	O
IP_CODE	int
;	O
break	O
;	O
case	O
IP_HD1	int
:	O
if	O
(	O
escaped	enum
)	O
{	O
state	pointer
=	O
IP_CODE	int
;	O
escaped	enum
=	O
FALSE	int
;	O
break	O
;	O
}	O
if	O
(	O
*	O
input_char	pointer
==	O
'<'	O
)	O
state	pointer
=	O
IP_HD2	int
;	O
else	O
state	pointer
=	O
IP_CODE	int
;	O
break	O
;	O
case	O
IP_HD2	int
:	O
if	O
(	O
(	O
escaped	enum
||	O
(	O
(	O
*	O
input_char	pointer
!=	O
'-'	O
)	O
&&	O
(	O
!	O
isspace	function
(	O
*	O
input_char	pointer
)	O
)	O
)	O
)	O
&&	O
(	O
*	O
input_char	pointer
!=	O
'"'	O
)	O
&&	O
(	O
*	O
input_char	pointer
!=	O
'\''	O
)	O
)	O
{	O
escaped	enum
=	O
FALSE	int
;	O
here_marker	array
[	O
here_marker_index	short
=	O
0	int
]	O
=	O
*	O
input_char	pointer
;	O
state	pointer
=	O
IP_HDSTART	int
;	O
break	O
;	O
}	O
if	O
(	O
*	O
input_char	pointer
==	O
'-'	O
)	O
break	O
;	O
if	O
(	O
isspace	function
(	O
*	O
input_char	pointer
)	O
||	O
(	O
*	O
input_char	pointer
==	O
'"'	O
)	O
||	O
(	O
*	O
input_char	pointer
==	O
'\''	O
)	O
)	O
break	O
;	O
state	pointer
=	O
IP_CODE	int
;	O
break	O
;	O
case	O
IP_HDSTART	int
:	O
if	O
(	O
(	O
escaped	enum
||	O
!	O
isspace	function
(	O
*	O
input_char	pointer
)	O
)	O
&&	O
(	O
*	O
input_char	pointer
!=	O
'"'	O
)	O
&&	O
(	O
*	O
input_char	pointer
!=	O
'\''	O
)	O
)	O
{	O
escaped	enum
=	O
FALSE	int
;	O
here_marker	array
[	O
++	O
here_marker_index	short
]	O
=	O
*	O
input_char	pointer
;	O
break	O
;	O
}	O
here_marker_length	short
=	O
here_marker_index	short
+	O
1	int
;	O
here_marker_index	short
=	O
0	int
;	O
state	pointer
=	O
IP_HD	int
;	O
break	O
;	O
case	O
IP_HD	int
:	O
if	O
(	O
*	O
input_char	pointer
==	O
'\n'	O
)	O
state	pointer
=	O
IP_HDSTARTLINE	int
;	O
break	O
;	O
case	O
IP_HDSTARTLINE	int
:	O
if	O
(	O
(	O
*	O
input_char	pointer
==	O
'\n'	O
)	O
||	O
(	O
isspace	function
(	O
*	O
input_char	pointer
)	O
)	O
)	O
break	O
;	O
state	pointer
=	O
IP_HDCHECKSTRING	int
;	O
case	O
IP_HDCHECKSTRING	int
:	O
if	O
(	O
(	O
*	O
input_char	pointer
==	O
'"'	O
)	O
||	O
(	O
*	O
input_char	pointer
==	O
'\''	O
)	O
)	O
break	O
;	O
if	O
(	O
*	O
input_char	pointer
!=	O
here_marker	array
[	O
here_marker_index	short
++	O
]	O
)	O
{	O
if	O
(	O
(	O
here_marker_index	short
==	O
here_marker_length	short
+	O
1	int
)	O
&&	O
(	O
*	O
input_char	pointer
==	O
'\n'	O
)	O
)	O
{	O
state	pointer
=	O
IP_CODE	int
;	O
break	O
;	O
}	O
state	pointer
=	O
IP_HD	int
;	O
here_marker_index	short
=	O
0	int
;	O
}	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
if	O
(	O
state	pointer
==	O
IP_CODE	int
)	O
{	O
switch	O
(	O
f1_state	enum
)	O
{	O
case	O
F1_CODE	int
:	O
if	O
(	O
*	O
input_char	pointer
==	O
'f'	O
)	O
{	O
f1_index	long
=	O
1	int
;	O
f1_state	enum
=	O
F1_FUNCTION	int
;	O
f1_page_number	long
=	O
page_number	long
;	O
}	O
break	O
;	O
case	O
F1_FUNCTION	int
:	O
if	O
(	O
*	O
input_char	pointer
==	O
function	array
[	O
f1_index	long
++	O
]	O
)	O
{	O
if	O
(	O
f1_index	long
==	O
strlen	function
(	O
function	array
)	O
)	O
f1_state	enum
=	O
F1_LEADING_SPACE	int
;	O
}	O
else	O
f1_state	enum
=	O
F1_CODE	int
;	O
break	O
;	O
case	O
F1_LEADING_SPACE	int
:	O
if	O
(	O
isspace	function
(	O
*	O
input_char	pointer
)	O
)	O
break	O
;	O
if	O
(	O
isalpha	function
(	O
*	O
input_char	pointer
)	O
)	O
{	O
f1_page_number	long
=	O
page_number	long
;	O
f1_name	array
[	O
f1_index	long
=	O
0	int
]	O
=	O
*	O
input_char	pointer
;	O
f1_start_char	long
=	O
char_number	long
;	O
f1_state	enum
=	O
F1_NAME	int
;	O
break	O
;	O
}	O
f1_state	enum
=	O
F1_CODE	int
;	O
break	O
;	O
case	O
F1_NAME	int
:	O
if	O
(	O
isalnum	function
(	O
*	O
input_char	pointer
)	O
||	O
(	O
*	O
input_char	pointer
==	O
'_'	O
)	O
)	O
{	O
f1_name	array
[	O
++	O
f1_index	long
]	O
=	O
*	O
input_char	pointer
;	O
}	O
else	O
{	O
f1_name	array
[	O
++	O
f1_index	long
]	O
=	O
'\0'	O
;	O
f1_end_char	long
=	O
char_number	long
-	O
1	int
;	O
f1_state	enum
=	O
F1_TRAILING_SPACE	int
;	O
}	O
break	O
;	O
case	O
F1_TRAILING_SPACE	int
:	O
if	O
(	O
!	O
isspace	function
(	O
*	O
input_char	pointer
)	O
)	O
f1_state	enum
=	O
F1_FNTEXT	int
;	O
break	O
;	O
default	O
:	O
;	O
}	O
}	O
if	O
(	O
state	pointer
==	O
IP_CODE	int
)	O
{	O
switch	O
(	O
fn_state	enum
)	O
{	O
case	O
FN_INITIAL_SPACE	int
:	O
if	O
(	O
isalpha	function
(	O
*	O
input_char	pointer
)	O
)	O
{	O
fn_page_number	long
=	O
page_number	long
;	O
fn_name	array
[	O
fn_index	short
++	O
]	O
=	O
*	O
input_char	pointer
;	O
fn_start_char	long
=	O
char_number	long
;	O
fn_state	enum
=	O
FN_NAME	int
;	O
}	O
break	O
;	O
case	O
FN_NAME	int
:	O
if	O
(	O
isalnum	function
(	O
*	O
input_char	pointer
)	O
||	O
(	O
*	O
input_char	pointer
==	O
'_'	O
)	O
)	O
fn_name	array
[	O
fn_index	short
++	O
]	O
=	O
*	O
input_char	pointer
;	O
else	O
if	O
(	O
isspace	function
(	O
*	O
input_char	pointer
)	O
)	O
{	O
fn_name	array
[	O
fn_index	short
]	O
=	O
'\0'	O
;	O
fn_end_char	long
=	O
char_number	long
-	O
1	int
;	O
fn_state	enum
=	O
FN_TRAIL_SPACE	int
;	O
}	O
else	O
if	O
(	O
*	O
input_char	pointer
==	O
'('	O
)	O
{	O
fn_name	array
[	O
fn_index	short
]	O
=	O
'\0'	O
;	O
fn_end_char	long
=	O
char_number	long
-	O
1	int
;	O
fn_state	enum
=	O
FN_OPEN_BRACKET	int
;	O
}	O
else	O
{	O
fn_index	short
=	O
0	int
;	O
fn_state	enum
=	O
FN_INITIAL_SPACE	int
;	O
}	O
break	O
;	O
case	O
FN_TRAIL_SPACE	int
:	O
if	O
(	O
isspace	function
(	O
*	O
input_char	pointer
)	O
)	O
break	O
;	O
else	O
if	O
(	O
*	O
input_char	pointer
==	O
'('	O
)	O
fn_state	enum
=	O
FN_OPEN_BRACKET	int
;	O
else	O
if	O
(	O
isalpha	function
(	O
*	O
input_char	pointer
)	O
)	O
{	O
fn_index	short
=	O
0	int
;	O
fn_page_number	long
=	O
page_number	long
;	O
fn_name	array
[	O
fn_index	short
++	O
]	O
=	O
*	O
input_char	pointer
;	O
fn_start_char	long
=	O
char_number	long
;	O
fn_state	enum
=	O
FN_NAME	int
;	O
}	O
else	O
{	O
fn_index	short
=	O
0	int
;	O
fn_state	enum
=	O
FN_INITIAL_SPACE	int
;	O
}	O
break	O
;	O
case	O
FN_OPEN_BRACKET	int
:	O
if	O
(	O
*	O
input_char	pointer
==	O
')'	O
)	O
fn_state	enum
=	O
FN_CLOSE_BRACKET	int
;	O
break	O
;	O
case	O
FN_CLOSE_BRACKET	int
:	O
if	O
(	O
isspace	function
(	O
*	O
input_char	pointer
)	O
)	O
break	O
;	O
fn_index	short
=	O
0	int
;	O
fn_page_number	long
=	O
page_number	long
;	O
fn_name	array
[	O
fn_index	short
++	O
]	O
=	O
*	O
input_char	pointer
;	O
fn_start_char	long
=	O
char_number	long
;	O
fn_state	enum
=	O
FN_NAME	int
;	O
break	O
;	O
default	O
:	O
;	O
}	O
}	O
if	O
(	O
pass	short
==	O
1	int
)	O
*	O
status	enum
=	O
get_function_name_posn	function
(	O
char_number	long
,	O
*	O
status	enum
)	O
;	O
return	O
(	O
retval	enum
)	O
;	O
}	O