int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
char	O
line	array
[	O
LINELEN	int
]	O
,	O
*	O
t	*
;	O
int	O
c	int
;	O
int	O
debugmode	int
=	O
0	int
;	O
struct	O
stat	struct
st	struct
;	O
int	O
format	int
=	O
arf_ustar	int
;	O
XFORMAT	struct
*	O
xxformat	*
;	O
char	O
*	O
name	*
,	O
*	O
source	*
;	O
char	O
*	O
statname	*
;	O
char	O
*	O
s	*
;	O
while	O
(	O
1	int
)	O
{	O
int	O
option_index	int
=	O
0	int
;	O
static	O
struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
c	int
=	O
ugetopt_long	function
(	O
argc	*
,	O
argv	*
,	O
"DH:"	*
,	O
long_options	array
,	O
&	O
option_index	int
)	O
;	O
if	O
(	O
c	int
==	O
-	O
1	int
)	O
break	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
'D'	O
:	O
debugmode	int
=	O
1	int
;	O
break	O
;	O
case	O
'H'	O
:	O
if	O
(	O
!	O
strcmp	function
(	O
optarg	*
,	O
"ustar"	*
)	O
)	O
{	O
format	*
=	O
arf_ustar	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
optarg	*
,	O
"newc"	*
)	O
)	O
{	O
format	int
=	O
arf_newascii	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
optarg	*
,	O
"crc"	*
)	O
)	O
{	O
format	*
=	O
arf_crcascii	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
optarg	*
,	O
"odc"	*
)	O
)	O
{	O
format	int
=	O
arf_oldascii	int
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	*
,	O
"unrecognized format: %s\n"	*
,	O
optarg	*
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
break	O
;	O
}	O
}	O
xxformat	int
=	O
xformat_open	function
(	O
-	O
1	int
,	O
STDOUT_FILENO	int
,	O
format	*
)	O
;	O
while	O
(	O
fgets	function
(	O
line	array
,	O
LINELEN	int
-	O
1	int
,	O
stdin	*
)	O
!=	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
)	O
{	O
if	O
(	O
strlen	function
(	O
line	array
)	O
>=	O
LINELEN	int
-	O
2	int
)	O
{	O
fprintf	function
(	O
stderr	*
,	O
"filesize: line too long : %s\n"	*
,	O
line	array
)	O
;	O
}	O
else	O
{	O
if	O
(	O
(	O
t	*
=	O
strpbrk	function
(	O
line	array
,	O
"\n\r"	*
)	O
)	O
)	O
{	O
*	O
t	*
=	O
'\0'	O
;	O
}	O
if	O
(	O
strlen	function
(	O
line	array
)	O
)	O
{	O
if	O
(	O
(	O
s	*
=	O
strchr	function
(	O
line	array
,	O
' '	O
)	O
)	O
)	O
{	O
*	O
s	*
=	O
'\0'	O
;	O
source	*
=	O
++	O
s	*
;	O
name	*
=	O
line	*
;	O
statname	int
=	O
source	*
;	O
}	O
else	O
{	O
name	*
=	O
line	*
;	O
source	*
=	O
NULL	O
;	O
statname	*
=	O
line	*
;	O
}	O
if	O
(	O
lstat	function
(	O
statname	*
,	O
&	O
st	struct
)	O
==	O
0	int
)	O
{	O
xformat_write_file	function
(	O
xxformat	*
,	O
&	O
st	*
,	O
name	*
,	O
source	int
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	*
,	O
"list2tar: lstat %s %s\n"	*
,	O
name	*
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
}	O
}	O
}	O
}	O
xformat_write_trailer	function
(	O
xxformat	*
)	O
;	O
xformat_close	function
(	O
xxformat	*
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O