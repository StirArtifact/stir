char	O
*	O
show_field	pointer
;	O
int	O
show_to	int
;	O
int	O
show_number	int
;	O
int	O
frm_debug	int
;	O
int	O
util_getcols	function
(	O
void	O
)	O
{	O
struct	O
winsize	struct
ws	struct
;	O
ws	struct
.	O
ws_col	short
=	O
ws	struct
.	O
ws_row	short
=	O
0	int
;	O
if	O
(	O
ioctl	function
(	O
1	int
,	O
TIOCGWINSZ	int
,	O
(	O
char	O
*	O
)	O
&	O
ws	struct
)	O
<	O
0	int
)	O
{	O
int	O
fd	int
=	O
open	function
(	O
"/dev/tty"	pointer
,	O
O_RDWR	int
)	O
;	O
ioctl	function
(	O
fd	int
,	O
TIOCGWINSZ	int
,	O
(	O
char	O
*	O
)	O
&	O
ws	struct
)	O
;	O
close	pointer
(	O
fd	int
)	O
;	O
}	O
if	O
(	O
ws	struct
.	O
ws_row	short
==	O
0	int
)	O
{	O
const	O
char	O
*	O
columns	pointer
=	O
getenv	function
(	O
"COLUMNS"	pointer
)	O
;	O
if	O
(	O
columns	pointer
)	O
ws	struct
.	O
ws_col	short
=	O
strtol	function
(	O
columns	pointer
,	O
NULL	O
,	O
10	int
)	O
;	O
}	O
return	O
ws	struct
.	O
ws_col	short
;	O
}	O
static	O
char	O
*	O
output_charset	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
get_charset	function
(	O
)	O
{	O
if	O
(	O
!	O
output_charset	pointer
)	O
{	O
char	O
*	O
tmp	pointer
;	O
tmp	pointer
=	O
getenv	function
(	O
"LC_ALL"	pointer
)	O
;	O
if	O
(	O
!	O
tmp	pointer
)	O
tmp	pointer
=	O
getenv	function
(	O
"LANG"	pointer
)	O
;	O
if	O
(	O
tmp	pointer
)	O
{	O
struct	O
mu_lc_all	struct
lc_all	struct
;	O
if	O
(	O
mu_parse_lc_all	function
(	O
tmp	pointer
,	O
&	O
lc_all	struct
,	O
MU_LC_CSET	int
)	O
==	O
0	int
)	O
output_charset	pointer
=	O
lc_all	struct
.	O
charset	pointer
;	O
}	O
if	O
(	O
!	O
output_charset	pointer
)	O
output_charset	pointer
=	O
mu_strdup	function
(	O
"ASCII"	pointer
)	O
;	O
}	O
return	O
output_charset	pointer
;	O
}	O
static	O
int	O
numfields	int
;	O
static	O
int	O
fieldwidth	array
[	O
4	int
]	O
;	O
static	O
char	O
*	O
linebuf	pointer
;	O
static	O
size_t	long
linemax	long
;	O
static	O
size_t	long
linepos	long
;	O
static	O
int	O
curfield	int
;	O
static	O
int	O
nextstart	int
;	O
static	O
int	O
curcol	int
;	O
typedef	O
void	O
(	O
*	O
fmt_formatter	pointer
)	O
(	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
;	O
static	O
fmt_formatter	pointer
format_field	pointer
;	O
void	O
print_line	function
(	O
)	O
{	O
if	O
(	O
linebuf	pointer
)	O
{	O
puts_bidi	O
(	O
linebuf	pointer
)	O
;	O
linebuf	pointer
[	O
0	int
]	O
=	O
0	int
;	O
linepos	long
=	O
0	int
;	O
curcol	int
=	O
nextstart	int
=	O
0	int
;	O
}	O
else	O
mu_printf	function
(	O
"\n"	pointer
)	O
;	O
curfield	int
=	O
0	int
;	O
}	O
void	O
format_field_simple	function
(	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
if	O
(	O
curfield	int
++	O
)	O
mu_printf	function
(	O
"\t"	pointer
)	O
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
mu_stream_vprintf	function
(	O
mu_strout	pointer
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
void	O
format_field_align	function
(	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
size_t	long
n	pointer
,	O
width	long
;	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
if	O
(	O
nextstart	int
!=	O
0	int
)	O
{	O
if	O
(	O
curcol	int
>=	O
nextstart	int
)	O
{	O
if	O
(	O
curfield	int
==	O
numfields	int
-	O
1	int
)	O
{	O
puts_bidi	O
(	O
linebuf	pointer
)	O
;	O
linepos	long
=	O
0	int
;	O
mu_printf	function
(	O
"%*s"	pointer
,	O
nextstart	int
,	O
""	pointer
)	O
;	O
}	O
else	O
{	O
linebuf	pointer
[	O
linepos	long
++	O
]	O
=	O
' '	O
;	O
curcol	int
++	O
;	O
}	O
}	O
else	O
if	O
(	O
nextstart	int
!=	O
curcol	int
)	O
{	O
n	pointer
=	O
snprintf	function
(	O
linebuf	pointer
+	O
linepos	long
,	O
linemax	long
-	O
linepos	long
,	O
"%*s"	pointer
,	O
nextstart	int
-	O
curcol	int
,	O
""	pointer
)	O
;	O
linepos	long
+=	O
n	pointer
;	O
curcol	int
=	O
nextstart	int
;	O
}	O
}	O
n	pointer
=	O
vsnprintf	function
(	O
linebuf	pointer
+	O
linepos	long
,	O
linemax	long
-	O
linepos	long
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
if	O
(	O
curfield	int
==	O
numfields	int
-	O
1	int
)	O
{	O
for	O
(	O
;	O
n	pointer
>	O
0	int
;	O
n	pointer
--	O
)	O
{	O
int	O
c	char
=	O
linebuf	pointer
[	O
linepos	long
+	O
n	pointer
]	O
;	O
linebuf	pointer
[	O
linepos	long
+	O
n	pointer
]	O
=	O
0	int
;	O
width	long
=	O
mbswidth	O
(	O
linebuf	pointer
+	O
linepos	long
,	O
0	int
)	O
;	O
if	O
(	O
width	long
<=	O
fieldwidth	array
[	O
curfield	int
]	O
)	O
break	O
;	O
linebuf	pointer
[	O
linepos	long
+	O
n	pointer
]	O
=	O
c	char
;	O
}	O
}	O
else	O
width	long
=	O
mbswidth	O
(	O
linebuf	pointer
+	O
linepos	long
,	O
0	int
)	O
;	O
linepos	long
+=	O
n	pointer
;	O
curcol	int
+=	O
width	long
;	O
nextstart	int
+=	O
fieldwidth	array
[	O
curfield	int
++	O
]	O
;	O
}	O
void	O
init_output	function
(	O
size_t	long
s	pointer
)	O
{	O
int	O
i	int
;	O
size_t	long
width	long
=	O
0	int
;	O
if	O
(	O
s	pointer
==	O
0	int
)	O
{	O
format_field	pointer
=	O
format_field_simple	function
;	O
return	O
;	O
}	O
format_field	pointer
=	O
format_field_align	function
;	O
linemax	long
=	O
s	pointer
*	O
MB_LEN_MAX	int
+	O
1	int
;	O
linebuf	pointer
=	O
mu_alloc	function
(	O
linemax	long
)	O
;	O
alloc_logical	O
(	O
s	pointer
)	O
;	O
if	O
(	O
show_number	int
)	O
fieldwidth	array
[	O
numfields	int
++	O
]	O
=	O
5	int
;	O
if	O
(	O
show_to	int
)	O
fieldwidth	array
[	O
numfields	int
++	O
]	O
=	O
20	int
;	O
if	O
(	O
show_field	pointer
)	O
fieldwidth	array
[	O
numfields	int
++	O
]	O
=	O
0	int
;	O
else	O
{	O
fieldwidth	array
[	O
numfields	int
++	O
]	O
=	O
20	int
;	O
fieldwidth	array
[	O
numfields	int
++	O
]	O
=	O
0	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
numfields	int
;	O
i	int
++	O
)	O
width	long
+=	O
fieldwidth	array
[	O
i	int
]	O
;	O
fieldwidth	array
[	O
numfields	int
-	O
1	int
]	O
=	O
util_getcols	function
(	O
)	O
-	O
width	long
;	O
}	O
static	O
char	O
*	O
rfc2047_decode_wrapper	function
(	O
const	O
char	O
*	O
buf	pointer
,	O
size_t	long
buflen	long
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
tmp	pointer
;	O
const	O
char	O
*	O
charset	pointer
=	O
get_charset	function
(	O
)	O
;	O
if	O
(	O
strcmp	function
(	O
charset	pointer
,	O
"ASCII"	pointer
)	O
==	O
0	int
)	O
return	O
mu_strdup	function
(	O
buf	pointer
)	O
;	O
rc	int
=	O
mu_rfc2047_decode	function
(	O
charset	pointer
,	O
buf	pointer
,	O
&	O
tmp	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
frm_debug	int
)	O
mu_error	function
(	O
_	O
(	O
"cannot decode line `%s': %s"	pointer
)	O
,	O
buf	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
mu_strdup	function
(	O
buf	pointer
)	O
;	O
}	O
return	O
tmp	pointer
;	O
}	O
static	O
int	O
get_personal	function
(	O
mu_header_t	pointer
hdr	pointer
,	O
const	O
char	O
*	O
field	pointer
,	O
char	O
*	O
*	O
personal	pointer
)	O
{	O
char	O
*	O
hfield	pointer
;	O
int	O
status	int
;	O
status	int
=	O
mu_header_aget_value_unfold	O
(	O
hdr	pointer
,	O
field	pointer
,	O
&	O
hfield	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
mu_address_t	pointer
address	array
=	O
NULL	O
;	O
const	O
char	O
*	O
s	pointer
=	O
NULL	O
;	O
mu_address_create	function
(	O
&	O
address	array
,	O
hfield	pointer
)	O
;	O
mu_address_sget_personal	function
(	O
address	array
,	O
1	int
,	O
&	O
s	pointer
)	O
;	O
if	O
(	O
s	pointer
==	O
NULL	O
)	O
s	pointer
=	O
hfield	pointer
;	O
*	O
personal	pointer
=	O
rfc2047_decode_wrapper	function
(	O
s	pointer
,	O
strlen	function
(	O
s	pointer
)	O
)	O
;	O
mu_address_destroy	function
(	O
&	O
address	array
)	O
;	O
}	O
return	O
status	int
;	O
}	O
struct	O
frm_action_closure	struct
{	O
frm_select_t	pointer
select_message	pointer
;	O
size_t	long
msg_index	long
;	O
}	O
;	O
static	O
int	O
action	function
(	O
mu_observer_t	pointer
o	pointer
,	O
size_t	long
type	enum
,	O
void	O
*	O
data	pointer
,	O
void	O
*	O
action_data	pointer
)	O
{	O
int	O
status	int
;	O
struct	O
frm_action_closure	struct
*	O
clos	pointer
=	O
action_data	pointer
;	O
switch	O
(	O
type	enum
)	O
{	O
case	O
MU_EVT_MESSAGE_ADD	int
:	O
{	O
mu_mailbox_t	pointer
mbox	pointer
=	O
mu_observer_get_owner	function
(	O
o	pointer
)	O
;	O
mu_message_t	pointer
msg	pointer
=	O
NULL	O
;	O
mu_header_t	pointer
hdr	pointer
=	O
NULL	O
;	O
mu_attribute_t	pointer
attr	pointer
=	O
NULL	O
;	O
clos	pointer
->	O
msg_index	long
++	O
;	O
mu_mailbox_get_message	function
(	O
mbox	pointer
,	O
clos	pointer
->	O
msg_index	long
,	O
&	O
msg	pointer
)	O
;	O
mu_message_get_attribute	function
(	O
msg	pointer
,	O
&	O
attr	pointer
)	O
;	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
if	O
(	O
!	O
clos	pointer
->	O
select_message	pointer
(	O
clos	pointer
->	O
msg_index	long
,	O
msg	pointer
)	O
)	O
break	O
;	O
if	O
(	O
show_number	int
)	O
format_field	pointer
(	O
"%4lu:"	pointer
,	O
(	O
u_long	long
)	O
clos	pointer
->	O
msg_index	long
)	O
;	O
if	O
(	O
show_to	int
)	O
{	O
char	O
*	O
hto	pointer
;	O
status	int
=	O
get_personal	function
(	O
hdr	pointer
,	O
MU_HEADER_TO	pointer
,	O
&	O
hto	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
format_field	pointer
(	O
"(%s)"	pointer
,	O
hto	pointer
)	O
;	O
free	function
(	O
hto	pointer
)	O
;	O
}	O
else	O
format_field	pointer
(	O
"(none)"	pointer
)	O
;	O
}	O
if	O
(	O
show_field	pointer
)	O
{	O
char	O
*	O
hfield	pointer
;	O
status	int
=	O
mu_header_aget_value_unfold	O
(	O
hdr	pointer
,	O
show_field	pointer
,	O
&	O
hfield	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
format_field	pointer
(	O
"%s"	pointer
,	O
hfield	pointer
)	O
;	O
free	function
(	O
hfield	pointer
)	O
;	O
}	O
else	O
format_field	pointer
(	O
""	pointer
)	O
;	O
}	O
else	O
{	O
char	O
*	O
tmp	pointer
;	O
status	int
=	O
get_personal	function
(	O
hdr	pointer
,	O
MU_HEADER_FROM	pointer
,	O
&	O
tmp	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
format_field	pointer
(	O
"%s"	pointer
,	O
tmp	pointer
)	O
;	O
free	function
(	O
tmp	pointer
)	O
;	O
}	O
else	O
format_field	pointer
(	O
""	pointer
)	O
;	O
status	int
=	O
mu_header_aget_value_unfold	O
(	O
hdr	pointer
,	O
MU_HEADER_SUBJECT	pointer
,	O
&	O
tmp	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
char	O
*	O
s	pointer
=	O
rfc2047_decode_wrapper	function
(	O
tmp	pointer
,	O
strlen	function
(	O
tmp	pointer
)	O
)	O
;	O
format_field	pointer
(	O
"%s"	pointer
,	O
s	pointer
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
free	function
(	O
tmp	pointer
)	O
;	O
}	O
}	O
print_line	function
(	O
)	O
;	O
break	O
;	O
}	O
case	O
MU_EVT_MAILBOX_PROGRESS	int
:	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
frm_abort	function
(	O
mu_mailbox_t	pointer
*	O
mbox	pointer
)	O
{	O
int	O
status	int
;	O
if	O
(	O
(	O
status	int
=	O
mu_mailbox_close	function
(	O
*	O
mbox	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
mu_url_t	pointer
url	pointer
;	O
mu_mailbox_get_url	function
(	O
*	O
mbox	pointer
,	O
&	O
url	pointer
)	O
;	O
mu_error	function
(	O
_	O
(	O
"could not close mailbox `%s': %s"	pointer
)	O
,	O
mu_url_to_string	function
(	O
url	pointer
)	O
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
exit	function
(	O
3	int
)	O
;	O
}	O
mu_mailbox_destroy	function
(	O
mbox	pointer
)	O
;	O
exit	function
(	O
3	int
)	O
;	O
}	O
void	O
frm_scan	function
(	O
char	O
*	O
mailbox_name	pointer
,	O
frm_select_t	pointer
fun	pointer
,	O
size_t	long
*	O
total	pointer
)	O
{	O
mu_mailbox_t	pointer
mbox	pointer
;	O
int	O
status	int
;	O
mu_url_t	pointer
url	pointer
;	O
status	int
=	O
mu_mailbox_create_default	function
(	O
&	O
mbox	pointer
,	O
mailbox_name	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
{	O
if	O
(	O
mailbox_name	pointer
)	O
mu_error	function
(	O
_	O
(	O
"could not create mailbox `%s': %s"	pointer
)	O
,	O
mailbox_name	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
else	O
mu_error	function
(	O
_	O
(	O
"could not create default mailbox: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
exit	function
(	O
3	int
)	O
;	O
}	O
if	O
(	O
frm_debug	int
)	O
{	O
mu_debug_set_category_level	function
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_LEVEL_UPTO	O
(	O
MU_DEBUG_PROT	int
)	O
)	O
;	O
}	O
mu_mailbox_get_url	function
(	O
mbox	pointer
,	O
&	O
url	pointer
)	O
;	O
status	int
=	O
mu_mailbox_open	function
(	O
mbox	pointer
,	O
MU_STREAM_READ	int
)	O
;	O
if	O
(	O
status	int
==	O
ENOENT	int
)	O
*	O
total	pointer
=	O
0	int
;	O
else	O
if	O
(	O
status	int
!=	O
0	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"could not open mailbox `%s': %s"	pointer
)	O
,	O
mu_url_to_string	function
(	O
url	pointer
)	O
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
mu_mailbox_destroy	function
(	O
&	O
mbox	pointer
)	O
;	O
exit	function
(	O
3	int
)	O
;	O
}	O
else	O
{	O
mu_observer_t	pointer
observer	pointer
;	O
mu_observable_t	pointer
observable	pointer
;	O
struct	O
frm_action_closure	struct
closure	pointer
=	O
{	O
fun	pointer
,	O
0	int
}	O
;	O
mu_observer_create	function
(	O
&	O
observer	pointer
,	O
mbox	pointer
)	O
;	O
mu_observer_set_action	function
(	O
observer	pointer
,	O
action	function
,	O
mbox	pointer
)	O
;	O
mu_observer_set_action_data	function
(	O
observer	pointer
,	O
&	O
closure	pointer
,	O
mbox	pointer
)	O
;	O
mu_mailbox_get_observable	function
(	O
mbox	pointer
,	O
&	O
observable	pointer
)	O
;	O
mu_observable_attach	function
(	O
observable	pointer
,	O
MU_EVT_MESSAGE_ADD	int
,	O
observer	pointer
)	O
;	O
status	int
=	O
mu_mailbox_scan	function
(	O
mbox	pointer
,	O
1	int
,	O
total	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"could not scan mailbox `%s': %s"	pointer
)	O
,	O
mu_url_to_string	function
(	O
url	pointer
)	O
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
frm_abort	function
(	O
&	O
mbox	pointer
)	O
;	O
}	O
mu_observable_detach	function
(	O
observable	pointer
,	O
observer	pointer
)	O
;	O
mu_observer_destroy	function
(	O
&	O
observer	pointer
,	O
mbox	pointer
)	O
;	O
if	O
(	O
(	O
status	int
=	O
mu_mailbox_close	function
(	O
mbox	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"could not close mailbox `%s': %s"	pointer
)	O
,	O
mu_url_to_string	function
(	O
url	pointer
)	O
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
exit	function
(	O
3	int
)	O
;	O
}	O
}	O
mu_mailbox_destroy	function
(	O
&	O
mbox	pointer
)	O
;	O
}	O