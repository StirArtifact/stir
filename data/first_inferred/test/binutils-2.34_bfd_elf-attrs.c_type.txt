static	O
int	O
uleb128_size	function
(	O
unsigned	O
int	O
i	pointer
)	O
{	O
int	O
size	long
;	O
size	long
=	O
1	int
;	O
while	O
(	O
i	pointer
>=	O
0x80	int
)	O
{	O
i	pointer
>>=	O
7	int
;	O
size	long
++	O
;	O
}	O
return	O
size	long
;	O
}	O
static	O
bfd_boolean	int
is_default_attr	function
(	O
obj_attribute	struct
*	O
attr	long
)	O
{	O
if	O
(	O
ATTR_TYPE_HAS_ERROR	O
(	O
attr	long
->	O
type	enum
)	O
)	O
return	O
TRUE	int
;	O
if	O
(	O
ATTR_TYPE_HAS_INT_VAL	O
(	O
attr	long
->	O
type	enum
)	O
&&	O
attr	long
->	O
i	pointer
!=	O
0	int
)	O
return	O
FALSE	int
;	O
if	O
(	O
ATTR_TYPE_HAS_STR_VAL	O
(	O
attr	long
->	O
type	enum
)	O
&&	O
attr	long
->	O
s	pointer
&&	O
*	O
attr	long
->	O
s	pointer
)	O
return	O
FALSE	int
;	O
if	O
(	O
ATTR_TYPE_HAS_NO_DEFAULT	O
(	O
attr	long
->	O
type	enum
)	O
)	O
return	O
FALSE	int
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_vma	long
obj_attr_size	function
(	O
unsigned	O
int	O
tag	int
,	O
obj_attribute	struct
*	O
attr	long
)	O
{	O
bfd_vma	long
size	long
;	O
if	O
(	O
is_default_attr	function
(	O
attr	long
)	O
)	O
return	O
0	int
;	O
size	long
=	O
uleb128_size	function
(	O
tag	int
)	O
;	O
if	O
(	O
ATTR_TYPE_HAS_INT_VAL	O
(	O
attr	long
->	O
type	enum
)	O
)	O
size	long
+=	O
uleb128_size	function
(	O
attr	long
->	O
i	pointer
)	O
;	O
if	O
(	O
ATTR_TYPE_HAS_STR_VAL	O
(	O
attr	long
->	O
type	enum
)	O
)	O
size	long
+=	O
strlen	function
(	O
(	O
char	O
*	O
)	O
attr	long
->	O
s	pointer
)	O
+	O
1	int
;	O
return	O
size	long
;	O
}	O
static	O
const	O
char	O
*	O
vendor_obj_attr_name	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
int	O
vendor	int
)	O
{	O
return	O
(	O
vendor	int
==	O
OBJ_ATTR_PROC	int
?	O
get_elf_backend_data	O
(	O
abfd	pointer
)	O
->	O
obj_attrs_vendor	pointer
:	O
"gnu"	pointer
)	O
;	O
}	O
static	O
bfd_vma	long
vendor_obj_attr_size	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
int	O
vendor	int
)	O
{	O
bfd_vma	long
size	long
;	O
obj_attribute	struct
*	O
attr	long
;	O
obj_attribute_list	struct
*	O
list	pointer
;	O
int	O
i	pointer
;	O
const	O
char	O
*	O
vendor_name	pointer
=	O
vendor_obj_attr_name	function
(	O
abfd	pointer
,	O
vendor	int
)	O
;	O
if	O
(	O
!	O
vendor_name	pointer
)	O
return	O
0	int
;	O
attr	long
=	O
elf_known_obj_attributes	O
(	O
abfd	pointer
)	O
[	O
vendor	int
]	O
;	O
size	long
=	O
0	int
;	O
for	O
(	O
i	pointer
=	O
LEAST_KNOWN_OBJ_ATTRIBUTE	int
;	O
i	pointer
<	O
NUM_KNOWN_OBJ_ATTRIBUTES	int
;	O
i	pointer
++	O
)	O
size	long
+=	O
obj_attr_size	function
(	O
i	pointer
,	O
&	O
attr	long
[	O
i	pointer
]	O
)	O
;	O
for	O
(	O
list	pointer
=	O
elf_other_obj_attributes	O
(	O
abfd	pointer
)	O
[	O
vendor	int
]	O
;	O
list	pointer
;	O
list	pointer
=	O
list	pointer
->	O
next	pointer
)	O
size	long
+=	O
obj_attr_size	function
(	O
list	pointer
->	O
tag	int
,	O
&	O
list	pointer
->	O
attr	long
)	O
;	O
return	O
(	O
size	long
?	O
size	long
+	O
10	int
+	O
strlen	function
(	O
vendor_name	pointer
)	O
:	O
0	int
)	O
;	O
}	O
bfd_vma	long
bfd_elf_obj_attr_size	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
bfd_vma	long
size	long
;	O
size	long
=	O
vendor_obj_attr_size	function
(	O
abfd	pointer
,	O
OBJ_ATTR_PROC	int
)	O
;	O
size	long
+=	O
vendor_obj_attr_size	function
(	O
abfd	pointer
,	O
OBJ_ATTR_GNU	int
)	O
;	O
return	O
(	O
size	long
?	O
size	long
+	O
1	int
:	O
0	int
)	O
;	O
}	O
static	O
bfd_byte	char
*	O
write_uleb128	function
(	O
bfd_byte	char
*	O
p	pointer
,	O
unsigned	O
int	O
val	array
)	O
{	O
bfd_byte	char
c	struct
;	O
do	O
{	O
c	struct
=	O
val	array
&	O
0x7f	int
;	O
val	array
>>=	O
7	int
;	O
if	O
(	O
val	array
)	O
c	struct
|=	O
0x80	int
;	O
*	O
(	O
p	pointer
++	O
)	O
=	O
c	struct
;	O
}	O
while	O
(	O
val	array
)	O
;	O
return	O
p	pointer
;	O
}	O
static	O
bfd_byte	char
*	O
write_obj_attribute	function
(	O
bfd_byte	char
*	O
p	pointer
,	O
unsigned	O
int	O
tag	int
,	O
obj_attribute	struct
*	O
attr	long
)	O
{	O
if	O
(	O
is_default_attr	function
(	O
attr	long
)	O
)	O
return	O
p	pointer
;	O
p	pointer
=	O
write_uleb128	function
(	O
p	pointer
,	O
tag	int
)	O
;	O
if	O
(	O
ATTR_TYPE_HAS_INT_VAL	O
(	O
attr	long
->	O
type	enum
)	O
)	O
p	pointer
=	O
write_uleb128	function
(	O
p	pointer
,	O
attr	long
->	O
i	pointer
)	O
;	O
if	O
(	O
ATTR_TYPE_HAS_STR_VAL	O
(	O
attr	long
->	O
type	enum
)	O
)	O
{	O
int	O
len	long
;	O
len	long
=	O
strlen	function
(	O
attr	long
->	O
s	pointer
)	O
+	O
1	int
;	O
memcpy	function
(	O
p	pointer
,	O
attr	long
->	O
s	pointer
,	O
len	long
)	O
;	O
p	pointer
+=	O
len	long
;	O
}	O
return	O
p	pointer
;	O
}	O
static	O
void	O
vendor_set_obj_attr_contents	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
bfd_byte	char
*	O
contents	pointer
,	O
bfd_vma	long
size	long
,	O
int	O
vendor	int
)	O
{	O
bfd_byte	char
*	O
p	pointer
;	O
obj_attribute	struct
*	O
attr	long
;	O
obj_attribute_list	struct
*	O
list	pointer
;	O
int	O
i	pointer
;	O
const	O
char	O
*	O
vendor_name	pointer
=	O
vendor_obj_attr_name	function
(	O
abfd	pointer
,	O
vendor	int
)	O
;	O
size_t	long
vendor_length	long
=	O
strlen	function
(	O
vendor_name	pointer
)	O
+	O
1	int
;	O
p	pointer
=	O
contents	pointer
;	O
bfd_put_32	O
(	O
abfd	pointer
,	O
size	long
,	O
p	pointer
)	O
;	O
p	pointer
+=	O
4	int
;	O
memcpy	function
(	O
p	pointer
,	O
vendor_name	pointer
,	O
vendor_length	long
)	O
;	O
p	pointer
+=	O
vendor_length	long
;	O
*	O
(	O
p	pointer
++	O
)	O
=	O
Tag_File	int
;	O
bfd_put_32	O
(	O
abfd	pointer
,	O
size	long
-	O
4	int
-	O
vendor_length	long
,	O
p	pointer
)	O
;	O
p	pointer
+=	O
4	int
;	O
attr	long
=	O
elf_known_obj_attributes	O
(	O
abfd	pointer
)	O
[	O
vendor	int
]	O
;	O
for	O
(	O
i	pointer
=	O
LEAST_KNOWN_OBJ_ATTRIBUTE	int
;	O
i	pointer
<	O
NUM_KNOWN_OBJ_ATTRIBUTES	int
;	O
i	pointer
++	O
)	O
{	O
unsigned	O
int	O
tag	int
=	O
i	pointer
;	O
if	O
(	O
get_elf_backend_data	O
(	O
abfd	pointer
)	O
->	O
obj_attrs_order	pointer
)	O
tag	int
=	O
get_elf_backend_data	O
(	O
abfd	pointer
)	O
->	O
obj_attrs_order	pointer
(	O
i	pointer
)	O
;	O
p	pointer
=	O
write_obj_attribute	function
(	O
p	pointer
,	O
tag	int
,	O
&	O
attr	long
[	O
tag	int
]	O
)	O
;	O
}	O
for	O
(	O
list	pointer
=	O
elf_other_obj_attributes	O
(	O
abfd	pointer
)	O
[	O
vendor	int
]	O
;	O
list	pointer
;	O
list	pointer
=	O
list	pointer
->	O
next	pointer
)	O
p	pointer
=	O
write_obj_attribute	function
(	O
p	pointer
,	O
list	pointer
->	O
tag	int
,	O
&	O
list	pointer
->	O
attr	long
)	O
;	O
}	O
void	O
bfd_elf_set_obj_attr_contents	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
bfd_byte	char
*	O
contents	pointer
,	O
bfd_vma	long
size	long
)	O
{	O
bfd_byte	char
*	O
p	pointer
;	O
int	O
vendor	int
;	O
bfd_vma	long
my_size	long
;	O
p	pointer
=	O
contents	pointer
;	O
*	O
(	O
p	pointer
++	O
)	O
=	O
'A'	O
;	O
my_size	long
=	O
1	int
;	O
for	O
(	O
vendor	int
=	O
OBJ_ATTR_FIRST	O
;	O
vendor	int
<=	O
OBJ_ATTR_LAST	O
;	O
vendor	int
++	O
)	O
{	O
bfd_vma	long
vendor_size	long
=	O
vendor_obj_attr_size	function
(	O
abfd	pointer
,	O
vendor	int
)	O
;	O
if	O
(	O
vendor_size	long
)	O
vendor_set_obj_attr_contents	function
(	O
abfd	pointer
,	O
p	pointer
,	O
vendor_size	long
,	O
vendor	int
)	O
;	O
p	pointer
+=	O
vendor_size	long
;	O
my_size	long
+=	O
vendor_size	long
;	O
}	O
if	O
(	O
size	long
!=	O
my_size	long
)	O
abort	function
(	O
)	O
;	O
}	O
static	O
obj_attribute	struct
*	O
elf_new_obj_attr	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
int	O
vendor	int
,	O
unsigned	O
int	O
tag	int
)	O
{	O
obj_attribute	struct
*	O
attr	long
;	O
obj_attribute_list	struct
*	O
list	pointer
;	O
obj_attribute_list	struct
*	O
p	pointer
;	O
obj_attribute_list	struct
*	O
*	O
lastp	pointer
;	O
if	O
(	O
tag	int
<	O
NUM_KNOWN_OBJ_ATTRIBUTES	int
)	O
{	O
attr	long
=	O
&	O
elf_known_obj_attributes	O
(	O
abfd	pointer
)	O
[	O
vendor	int
]	O
[	O
tag	int
]	O
;	O
}	O
else	O
{	O
list	pointer
=	O
(	O
obj_attribute_list	struct
*	O
)	O
bfd_alloc	function
(	O
abfd	pointer
,	O
sizeof	O
(	O
obj_attribute_list	struct
)	O
)	O
;	O
memset	function
(	O
list	pointer
,	O
0	int
,	O
sizeof	O
(	O
obj_attribute_list	struct
)	O
)	O
;	O
list	pointer
->	O
tag	int
=	O
tag	int
;	O
lastp	pointer
=	O
&	O
elf_other_obj_attributes	O
(	O
abfd	pointer
)	O
[	O
vendor	int
]	O
;	O
for	O
(	O
p	pointer
=	O
*	O
lastp	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
tag	int
<	O
p	pointer
->	O
tag	int
)	O
break	O
;	O
lastp	pointer
=	O
&	O
p	pointer
->	O
next	pointer
;	O
}	O
list	pointer
->	O
next	pointer
=	O
*	O
lastp	pointer
;	O
*	O
lastp	pointer
=	O
list	pointer
;	O
attr	long
=	O
&	O
list	pointer
->	O
attr	long
;	O
}	O
return	O
attr	long
;	O
}	O
int	O
bfd_elf_get_obj_attr_int	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
int	O
vendor	int
,	O
unsigned	O
int	O
tag	int
)	O
{	O
obj_attribute_list	struct
*	O
p	pointer
;	O
if	O
(	O
tag	int
<	O
NUM_KNOWN_OBJ_ATTRIBUTES	int
)	O
{	O
return	O
elf_known_obj_attributes	O
(	O
abfd	pointer
)	O
[	O
vendor	int
]	O
[	O
tag	int
]	O
.	O
i	pointer
;	O
}	O
else	O
{	O
for	O
(	O
p	pointer
=	O
elf_other_obj_attributes	O
(	O
abfd	pointer
)	O
[	O
vendor	int
]	O
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
tag	int
==	O
p	pointer
->	O
tag	int
)	O
return	O
p	pointer
->	O
attr	long
.	O
i	pointer
;	O
if	O
(	O
tag	int
<	O
p	pointer
->	O
tag	int
)	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
}	O
void	O
bfd_elf_add_obj_attr_int	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
int	O
vendor	int
,	O
unsigned	O
int	O
tag	int
,	O
unsigned	O
int	O
i	pointer
)	O
{	O
obj_attribute	struct
*	O
attr	long
;	O
attr	long
=	O
elf_new_obj_attr	function
(	O
abfd	pointer
,	O
vendor	int
,	O
tag	int
)	O
;	O
attr	long
->	O
type	enum
=	O
_bfd_elf_obj_attrs_arg_type	function
(	O
abfd	pointer
,	O
vendor	int
,	O
tag	int
)	O
;	O
attr	long
->	O
i	pointer
=	O
i	pointer
;	O
}	O
char	O
*	O
_bfd_elf_attr_strdup	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
const	O
char	O
*	O
s	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
int	O
len	long
;	O
len	long
=	O
strlen	function
(	O
s	pointer
)	O
+	O
1	int
;	O
p	pointer
=	O
(	O
char	O
*	O
)	O
bfd_alloc	function
(	O
abfd	pointer
,	O
len	long
)	O
;	O
return	O
(	O
char	O
*	O
)	O
memcpy	function
(	O
p	pointer
,	O
s	pointer
,	O
len	long
)	O
;	O
}	O
void	O
bfd_elf_add_obj_attr_string	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
int	O
vendor	int
,	O
unsigned	O
int	O
tag	int
,	O
const	O
char	O
*	O
s	pointer
)	O
{	O
obj_attribute	struct
*	O
attr	long
;	O
attr	long
=	O
elf_new_obj_attr	function
(	O
abfd	pointer
,	O
vendor	int
,	O
tag	int
)	O
;	O
attr	long
->	O
type	enum
=	O
_bfd_elf_obj_attrs_arg_type	function
(	O
abfd	pointer
,	O
vendor	int
,	O
tag	int
)	O
;	O
attr	long
->	O
s	pointer
=	O
_bfd_elf_attr_strdup	function
(	O
abfd	pointer
,	O
s	pointer
)	O
;	O
}	O
void	O
bfd_elf_add_obj_attr_int_string	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
int	O
vendor	int
,	O
unsigned	O
int	O
tag	int
,	O
unsigned	O
int	O
i	pointer
,	O
const	O
char	O
*	O
s	pointer
)	O
{	O
obj_attribute	struct
*	O
attr	long
;	O
attr	long
=	O
elf_new_obj_attr	function
(	O
abfd	pointer
,	O
vendor	int
,	O
tag	int
)	O
;	O
attr	long
->	O
type	enum
=	O
_bfd_elf_obj_attrs_arg_type	function
(	O
abfd	pointer
,	O
vendor	int
,	O
tag	int
)	O
;	O
attr	long
->	O
i	pointer
=	O
i	pointer
;	O
attr	long
->	O
s	pointer
=	O
_bfd_elf_attr_strdup	function
(	O
abfd	pointer
,	O
s	pointer
)	O
;	O
}	O
void	O
_bfd_elf_copy_obj_attributes	function
(	O
bfd	struct
*	O
ibfd	pointer
,	O
bfd	struct
*	O
obfd	pointer
)	O
{	O
obj_attribute	struct
*	O
in_attr	pointer
;	O
obj_attribute	struct
*	O
out_attr	pointer
;	O
obj_attribute_list	struct
*	O
list	pointer
;	O
int	O
i	pointer
;	O
int	O
vendor	int
;	O
if	O
(	O
bfd_get_flavour	function
(	O
ibfd	pointer
)	O
!=	O
bfd_target_elf_flavour	int
||	O
bfd_get_flavour	function
(	O
obfd	pointer
)	O
!=	O
bfd_target_elf_flavour	int
)	O
return	O
;	O
for	O
(	O
vendor	int
=	O
OBJ_ATTR_FIRST	O
;	O
vendor	int
<=	O
OBJ_ATTR_LAST	O
;	O
vendor	int
++	O
)	O
{	O
in_attr	pointer
=	O
&	O
elf_known_obj_attributes	O
(	O
ibfd	pointer
)	O
[	O
vendor	int
]	O
[	O
LEAST_KNOWN_OBJ_ATTRIBUTE	int
]	O
;	O
out_attr	pointer
=	O
&	O
elf_known_obj_attributes	O
(	O
obfd	pointer
)	O
[	O
vendor	int
]	O
[	O
LEAST_KNOWN_OBJ_ATTRIBUTE	int
]	O
;	O
for	O
(	O
i	pointer
=	O
LEAST_KNOWN_OBJ_ATTRIBUTE	int
;	O
i	pointer
<	O
NUM_KNOWN_OBJ_ATTRIBUTES	int
;	O
i	pointer
++	O
)	O
{	O
out_attr	pointer
->	O
type	enum
=	O
in_attr	pointer
->	O
type	enum
;	O
out_attr	pointer
->	O
i	pointer
=	O
in_attr	pointer
->	O
i	pointer
;	O
if	O
(	O
in_attr	pointer
->	O
s	pointer
&&	O
*	O
in_attr	pointer
->	O
s	pointer
)	O
out_attr	pointer
->	O
s	pointer
=	O
_bfd_elf_attr_strdup	function
(	O
obfd	pointer
,	O
in_attr	pointer
->	O
s	pointer
)	O
;	O
in_attr	pointer
++	O
;	O
out_attr	pointer
++	O
;	O
}	O
for	O
(	O
list	pointer
=	O
elf_other_obj_attributes	O
(	O
ibfd	pointer
)	O
[	O
vendor	int
]	O
;	O
list	pointer
;	O
list	pointer
=	O
list	pointer
->	O
next	pointer
)	O
{	O
in_attr	pointer
=	O
&	O
list	pointer
->	O
attr	long
;	O
switch	O
(	O
in_attr	pointer
->	O
type	enum
&	O
(	O
ATTR_TYPE_FLAG_INT_VAL	O
|	O
ATTR_TYPE_FLAG_STR_VAL	O
)	O
)	O
{	O
case	O
ATTR_TYPE_FLAG_INT_VAL	O
:	O
bfd_elf_add_obj_attr_int	function
(	O
obfd	pointer
,	O
vendor	int
,	O
list	pointer
->	O
tag	int
,	O
in_attr	pointer
->	O
i	pointer
)	O
;	O
break	O
;	O
case	O
ATTR_TYPE_FLAG_STR_VAL	O
:	O
bfd_elf_add_obj_attr_string	function
(	O
obfd	pointer
,	O
vendor	int
,	O
list	pointer
->	O
tag	int
,	O
in_attr	pointer
->	O
s	pointer
)	O
;	O
break	O
;	O
case	O
ATTR_TYPE_FLAG_INT_VAL	O
|	O
ATTR_TYPE_FLAG_STR_VAL	O
:	O
bfd_elf_add_obj_attr_int_string	function
(	O
obfd	pointer
,	O
vendor	int
,	O
list	pointer
->	O
tag	int
,	O
in_attr	pointer
->	O
i	pointer
,	O
in_attr	pointer
->	O
s	pointer
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
}	O
}	O
static	O
int	O
gnu_obj_attrs_arg_type	function
(	O
unsigned	O
int	O
tag	int
)	O
{	O
if	O
(	O
tag	int
==	O
Tag_compatibility	int
)	O
return	O
3	int
;	O
else	O
return	O
(	O
tag	int
&	O
1	int
)	O
!=	O
0	int
?	O
2	int
:	O
1	int
;	O
}	O
int	O
_bfd_elf_obj_attrs_arg_type	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
int	O
vendor	int
,	O
unsigned	O
int	O
tag	int
)	O
{	O
switch	O
(	O
vendor	int
)	O
{	O
case	O
OBJ_ATTR_PROC	int
:	O
return	O
get_elf_backend_data	O
(	O
abfd	pointer
)	O
->	O
obj_attrs_arg_type	pointer
(	O
tag	int
)	O
;	O
break	O
;	O
case	O
OBJ_ATTR_GNU	int
:	O
return	O
gnu_obj_attrs_arg_type	function
(	O
tag	int
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
void	O
_bfd_elf_parse_attributes	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
Elf_Internal_Shdr	struct
*	O
hdr	pointer
)	O
{	O
bfd_byte	char
*	O
contents	pointer
;	O
bfd_byte	char
*	O
p	pointer
;	O
bfd_byte	char
*	O
p_end	pointer
;	O
bfd_vma	long
len	long
;	O
const	O
char	O
*	O
std_sec	pointer
;	O
if	O
(	O
hdr	pointer
->	O
sh_size	array
==	O
0	int
)	O
return	O
;	O
if	O
(	O
hdr	pointer
->	O
sh_size	array
>	O
bfd_get_file_size	function
(	O
abfd	pointer
)	O
)	O
{	O
_bfd_error_handler	function
(	O
_	O
(	O
"%pB: error: attribute section '%pA' too big: %#llx"	pointer
)	O
,	O
abfd	pointer
,	O
hdr	pointer
->	O
bfd_section	struct
,	O
(	O
long	O
long	O
)	O
hdr	pointer
->	O
sh_size	array
)	O
;	O
bfd_set_error	function
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
;	O
}	O
contents	pointer
=	O
(	O
bfd_byte	char
*	O
)	O
bfd_malloc	function
(	O
hdr	pointer
->	O
sh_size	array
+	O
1	int
)	O
;	O
if	O
(	O
!	O
contents	pointer
)	O
return	O
;	O
if	O
(	O
!	O
bfd_get_section_contents	function
(	O
abfd	pointer
,	O
hdr	pointer
->	O
bfd_section	struct
,	O
contents	pointer
,	O
0	int
,	O
hdr	pointer
->	O
sh_size	array
)	O
)	O
{	O
free	function
(	O
contents	pointer
)	O
;	O
return	O
;	O
}	O
contents	pointer
[	O
hdr	pointer
->	O
sh_size	array
]	O
=	O
0	int
;	O
p	pointer
=	O
contents	pointer
;	O
p_end	pointer
=	O
p	pointer
+	O
hdr	pointer
->	O
sh_size	array
;	O
std_sec	pointer
=	O
get_elf_backend_data	O
(	O
abfd	pointer
)	O
->	O
obj_attrs_vendor	pointer
;	O
if	O
(	O
*	O
(	O
p	pointer
++	O
)	O
==	O
'A'	O
)	O
{	O
len	long
=	O
hdr	pointer
->	O
sh_size	array
-	O
1	int
;	O
while	O
(	O
len	long
>	O
0	int
&&	O
p	pointer
<	O
p_end	pointer
-	O
4	int
)	O
{	O
unsigned	O
namelen	int
;	O
bfd_vma	long
section_len	long
;	O
int	O
vendor	int
;	O
section_len	long
=	O
bfd_get_32	O
(	O
abfd	pointer
,	O
p	pointer
)	O
;	O
p	pointer
+=	O
4	int
;	O
if	O
(	O
section_len	long
==	O
0	int
)	O
break	O
;	O
if	O
(	O
section_len	long
>	O
len	long
)	O
section_len	long
=	O
len	long
;	O
len	long
-=	O
section_len	long
;	O
if	O
(	O
section_len	long
<=	O
4	int
)	O
{	O
_bfd_error_handler	function
(	O
_	O
(	O
"%pB: error: attribute section length too small: %"	pointer
PRId64	O
)	O
,	O
abfd	pointer
,	O
(	O
int64_t	long
)	O
section_len	long
)	O
;	O
break	O
;	O
}	O
section_len	long
-=	O
4	int
;	O
namelen	int
=	O
strnlen	function
(	O
(	O
char	O
*	O
)	O
p	pointer
,	O
section_len	long
)	O
+	O
1	int
;	O
if	O
(	O
namelen	int
==	O
0	int
||	O
namelen	int
>=	O
section_len	long
)	O
break	O
;	O
section_len	long
-=	O
namelen	int
;	O
if	O
(	O
std_sec	pointer
&&	O
strcmp	function
(	O
(	O
char	O
*	O
)	O
p	pointer
,	O
std_sec	pointer
)	O
==	O
0	int
)	O
vendor	int
=	O
OBJ_ATTR_PROC	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
(	O
char	O
*	O
)	O
p	pointer
,	O
"gnu"	pointer
)	O
==	O
0	int
)	O
vendor	int
=	O
OBJ_ATTR_GNU	int
;	O
else	O
{	O
p	pointer
+=	O
namelen	int
+	O
section_len	long
;	O
continue	O
;	O
}	O
p	pointer
+=	O
namelen	int
;	O
while	O
(	O
section_len	long
>	O
0	int
&&	O
p	pointer
<	O
p_end	pointer
)	O
{	O
unsigned	O
int	O
tag	int
;	O
unsigned	O
int	O
n	long
;	O
unsigned	O
int	O
val	array
;	O
bfd_vma	long
subsection_len	long
;	O
bfd_byte	char
*	O
end	pointer
;	O
tag	int
=	O
_bfd_safe_read_leb128	function
(	O
abfd	pointer
,	O
p	pointer
,	O
&	O
n	long
,	O
FALSE	int
,	O
p_end	pointer
)	O
;	O
p	pointer
+=	O
n	long
;	O
if	O
(	O
p	pointer
<	O
p_end	pointer
-	O
4	int
)	O
subsection_len	long
=	O
bfd_get_32	O
(	O
abfd	pointer
,	O
p	pointer
)	O
;	O
else	O
subsection_len	long
=	O
0	int
;	O
p	pointer
+=	O
4	int
;	O
if	O
(	O
subsection_len	long
==	O
0	int
)	O
break	O
;	O
if	O
(	O
subsection_len	long
>	O
section_len	long
)	O
subsection_len	long
=	O
section_len	long
;	O
section_len	long
-=	O
subsection_len	long
;	O
subsection_len	long
-=	O
n	long
+	O
4	int
;	O
end	pointer
=	O
p	pointer
+	O
subsection_len	long
;	O
if	O
(	O
end	pointer
>	O
p_end	pointer
)	O
end	pointer
=	O
p_end	pointer
;	O
switch	O
(	O
tag	int
)	O
{	O
case	O
Tag_File	int
:	O
while	O
(	O
p	pointer
<	O
end	pointer
)	O
{	O
int	O
type	enum
;	O
tag	int
=	O
_bfd_safe_read_leb128	function
(	O
abfd	pointer
,	O
p	pointer
,	O
&	O
n	long
,	O
FALSE	int
,	O
end	pointer
)	O
;	O
p	pointer
+=	O
n	long
;	O
type	enum
=	O
_bfd_elf_obj_attrs_arg_type	function
(	O
abfd	pointer
,	O
vendor	int
,	O
tag	int
)	O
;	O
switch	O
(	O
type	enum
&	O
(	O
ATTR_TYPE_FLAG_INT_VAL	O
|	O
ATTR_TYPE_FLAG_STR_VAL	O
)	O
)	O
{	O
case	O
ATTR_TYPE_FLAG_INT_VAL	O
|	O
ATTR_TYPE_FLAG_STR_VAL	O
:	O
val	array
=	O
_bfd_safe_read_leb128	function
(	O
abfd	pointer
,	O
p	pointer
,	O
&	O
n	long
,	O
FALSE	int
,	O
end	pointer
)	O
;	O
p	pointer
+=	O
n	long
;	O
bfd_elf_add_obj_attr_int_string	function
(	O
abfd	pointer
,	O
vendor	int
,	O
tag	int
,	O
val	array
,	O
(	O
char	O
*	O
)	O
p	pointer
)	O
;	O
p	pointer
+=	O
strlen	function
(	O
(	O
char	O
*	O
)	O
p	pointer
)	O
+	O
1	int
;	O
break	O
;	O
case	O
ATTR_TYPE_FLAG_STR_VAL	O
:	O
bfd_elf_add_obj_attr_string	function
(	O
abfd	pointer
,	O
vendor	int
,	O
tag	int
,	O
(	O
char	O
*	O
)	O
p	pointer
)	O
;	O
p	pointer
+=	O
strlen	function
(	O
(	O
char	O
*	O
)	O
p	pointer
)	O
+	O
1	int
;	O
break	O
;	O
case	O
ATTR_TYPE_FLAG_INT_VAL	O
:	O
val	array
=	O
_bfd_safe_read_leb128	function
(	O
abfd	pointer
,	O
p	pointer
,	O
&	O
n	long
,	O
FALSE	int
,	O
end	pointer
)	O
;	O
p	pointer
+=	O
n	long
;	O
bfd_elf_add_obj_attr_int	function
(	O
abfd	pointer
,	O
vendor	int
,	O
tag	int
,	O
val	array
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
break	O
;	O
case	O
Tag_Section	int
:	O
case	O
Tag_Symbol	int
:	O
default	O
:	O
p	pointer
+=	O
subsection_len	long
;	O
subsection_len	long
=	O
0	int
;	O
break	O
;	O
}	O
}	O
}	O
}	O
free	function
(	O
contents	pointer
)	O
;	O
}	O
bfd_boolean	int
_bfd_elf_merge_object_attributes	function
(	O
bfd	struct
*	O
ibfd	pointer
,	O
struct	O
bfd_link_info	struct
*	O
info	pointer
)	O
{	O
bfd	struct
*	O
obfd	pointer
=	O
info	pointer
->	O
output_bfd	pointer
;	O
obj_attribute	struct
*	O
in_attr	pointer
;	O
obj_attribute	struct
*	O
out_attr	pointer
;	O
int	O
vendor	int
;	O
for	O
(	O
vendor	int
=	O
OBJ_ATTR_FIRST	O
;	O
vendor	int
<=	O
OBJ_ATTR_LAST	O
;	O
vendor	int
++	O
)	O
{	O
in_attr	pointer
=	O
&	O
elf_known_obj_attributes	O
(	O
ibfd	pointer
)	O
[	O
vendor	int
]	O
[	O
Tag_compatibility	int
]	O
;	O
out_attr	pointer
=	O
&	O
elf_known_obj_attributes	O
(	O
obfd	pointer
)	O
[	O
vendor	int
]	O
[	O
Tag_compatibility	int
]	O
;	O
if	O
(	O
in_attr	pointer
->	O
i	pointer
>	O
0	int
&&	O
strcmp	function
(	O
in_attr	pointer
->	O
s	pointer
,	O
"gnu"	pointer
)	O
!=	O
0	int
)	O
{	O
_bfd_error_handler	function
(	O
_	O
(	O
"error: %pB: object has vendor-specific contents that "	pointer
"must be processed by the '%s' toolchain"	pointer
)	O
,	O
ibfd	pointer
,	O
in_attr	pointer
->	O
s	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
in_attr	pointer
->	O
i	pointer
!=	O
out_attr	pointer
->	O
i	pointer
||	O
(	O
in_attr	pointer
->	O
i	pointer
!=	O
0	int
&&	O
strcmp	function
(	O
in_attr	pointer
->	O
s	pointer
,	O
out_attr	pointer
->	O
s	pointer
)	O
!=	O
0	int
)	O
)	O
{	O
_bfd_error_handler	function
(	O
_	O
(	O
"error: %pB: object tag '%d, %s' is "	pointer
"incompatible with tag '%d, %s'"	pointer
)	O
,	O
ibfd	pointer
,	O
in_attr	pointer
->	O
i	pointer
,	O
in_attr	pointer
->	O
s	pointer
?	O
in_attr	pointer
->	O
s	pointer
:	O
""	pointer
,	O
out_attr	pointer
->	O
i	pointer
,	O
out_attr	pointer
->	O
s	pointer
?	O
out_attr	pointer
->	O
s	pointer
:	O
""	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
}	O
return	O
TRUE	int
;	O
}	O
bfd_boolean	int
_bfd_elf_merge_unknown_attribute_low	function
(	O
bfd	struct
*	O
ibfd	pointer
,	O
bfd	struct
*	O
obfd	pointer
,	O
int	O
tag	int
)	O
{	O
obj_attribute	struct
*	O
in_attr	pointer
;	O
obj_attribute	struct
*	O
out_attr	pointer
;	O
bfd	struct
*	O
err_bfd	pointer
=	O
NULL	O
;	O
bfd_boolean	int
result	int
=	O
TRUE	int
;	O
in_attr	pointer
=	O
elf_known_obj_attributes_proc	O
(	O
ibfd	pointer
)	O
;	O
out_attr	pointer
=	O
elf_known_obj_attributes_proc	O
(	O
obfd	pointer
)	O
;	O
if	O
(	O
out_attr	pointer
[	O
tag	int
]	O
.	O
i	pointer
!=	O
0	int
||	O
out_attr	pointer
[	O
tag	int
]	O
.	O
s	pointer
!=	O
NULL	O
)	O
err_bfd	pointer
=	O
obfd	pointer
;	O
else	O
if	O
(	O
in_attr	pointer
[	O
tag	int
]	O
.	O
i	pointer
!=	O
0	int
||	O
in_attr	pointer
[	O
tag	int
]	O
.	O
s	pointer
!=	O
NULL	O
)	O
err_bfd	pointer
=	O
ibfd	pointer
;	O
if	O
(	O
err_bfd	pointer
!=	O
NULL	O
)	O
result	int
=	O
get_elf_backend_data	O
(	O
err_bfd	pointer
)	O
->	O
obj_attrs_handle_unknown	pointer
(	O
err_bfd	pointer
,	O
tag	int
)	O
;	O
if	O
(	O
in_attr	pointer
[	O
tag	int
]	O
.	O
i	pointer
!=	O
out_attr	pointer
[	O
tag	int
]	O
.	O
i	pointer
||	O
(	O
in_attr	pointer
[	O
tag	int
]	O
.	O
s	pointer
==	O
NULL	O
)	O
!=	O
(	O
out_attr	pointer
[	O
tag	int
]	O
.	O
s	pointer
==	O
NULL	O
)	O
||	O
(	O
in_attr	pointer
[	O
tag	int
]	O
.	O
s	pointer
!=	O
NULL	O
&&	O
out_attr	pointer
[	O
tag	int
]	O
.	O
s	pointer
!=	O
NULL	O
&&	O
strcmp	function
(	O
in_attr	pointer
[	O
tag	int
]	O
.	O
s	pointer
,	O
out_attr	pointer
[	O
tag	int
]	O
.	O
s	pointer
)	O
!=	O
0	int
)	O
)	O
{	O
out_attr	pointer
[	O
tag	int
]	O
.	O
i	pointer
=	O
0	int
;	O
out_attr	pointer
[	O
tag	int
]	O
.	O
s	pointer
=	O
NULL	O
;	O
}	O
return	O
result	int
;	O
}	O
bfd_boolean	int
_bfd_elf_merge_unknown_attribute_list	function
(	O
bfd	struct
*	O
ibfd	pointer
,	O
bfd	struct
*	O
obfd	pointer
)	O
{	O
obj_attribute_list	struct
*	O
in_list	pointer
;	O
obj_attribute_list	struct
*	O
out_list	pointer
;	O
obj_attribute_list	struct
*	O
*	O
out_listp	pointer
;	O
bfd_boolean	int
result	int
=	O
TRUE	int
;	O
in_list	pointer
=	O
elf_other_obj_attributes_proc	O
(	O
ibfd	pointer
)	O
;	O
out_listp	pointer
=	O
&	O
elf_other_obj_attributes_proc	O
(	O
obfd	pointer
)	O
;	O
out_list	pointer
=	O
*	O
out_listp	pointer
;	O
for	O
(	O
;	O
in_list	pointer
||	O
out_list	pointer
;	O
)	O
{	O
bfd	struct
*	O
err_bfd	pointer
=	O
NULL	O
;	O
unsigned	O
int	O
err_tag	int
=	O
0	int
;	O
if	O
(	O
out_list	pointer
&&	O
(	O
!	O
in_list	pointer
||	O
in_list	pointer
->	O
tag	int
>	O
out_list	pointer
->	O
tag	int
)	O
)	O
{	O
err_bfd	pointer
=	O
obfd	pointer
;	O
err_tag	int
=	O
out_list	pointer
->	O
tag	int
;	O
*	O
out_listp	pointer
=	O
out_list	pointer
->	O
next	pointer
;	O
out_list	pointer
=	O
*	O
out_listp	pointer
;	O
}	O
else	O
if	O
(	O
in_list	pointer
&&	O
(	O
!	O
out_list	pointer
||	O
in_list	pointer
->	O
tag	int
<	O
out_list	pointer
->	O
tag	int
)	O
)	O
{	O
err_bfd	pointer
=	O
ibfd	pointer
;	O
err_tag	int
=	O
in_list	pointer
->	O
tag	int
;	O
in_list	pointer
=	O
in_list	pointer
->	O
next	pointer
;	O
}	O
else	O
{	O
err_bfd	pointer
=	O
obfd	pointer
;	O
err_tag	int
=	O
out_list	pointer
->	O
tag	int
;	O
if	O
(	O
in_list	pointer
->	O
attr	long
.	O
i	pointer
!=	O
out_list	pointer
->	O
attr	long
.	O
i	pointer
||	O
(	O
in_list	pointer
->	O
attr	long
.	O
s	pointer
==	O
NULL	O
)	O
!=	O
(	O
out_list	pointer
->	O
attr	long
.	O
s	pointer
==	O
NULL	O
)	O
||	O
(	O
in_list	pointer
->	O
attr	long
.	O
s	pointer
&&	O
out_list	pointer
->	O
attr	long
.	O
s	pointer
&&	O
strcmp	function
(	O
in_list	pointer
->	O
attr	long
.	O
s	pointer
,	O
out_list	pointer
->	O
attr	long
.	O
s	pointer
)	O
!=	O
0	int
)	O
)	O
{	O
*	O
out_listp	pointer
=	O
out_list	pointer
->	O
next	pointer
;	O
out_list	pointer
=	O
*	O
out_listp	pointer
;	O
}	O
else	O
{	O
out_list	pointer
=	O
out_list	pointer
->	O
next	pointer
;	O
in_list	pointer
=	O
in_list	pointer
->	O
next	pointer
;	O
}	O
}	O
if	O
(	O
err_bfd	pointer
)	O
result	int
=	O
result	int
&&	O
get_elf_backend_data	O
(	O
err_bfd	pointer
)	O
->	O
obj_attrs_handle_unknown	pointer
(	O
err_bfd	pointer
,	O
err_tag	int
)	O
;	O
}	O
return	O
result	int
;	O
}	O