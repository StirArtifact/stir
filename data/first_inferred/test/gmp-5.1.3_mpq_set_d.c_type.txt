void	O
mpq_set_d	function
(	O
mpq_ptr	*
dest	*
,	O
double	O
d	*
)	O
{	O
int	O
negative	int
;	O
mp_exp_t	long
exp	int
;	O
mp_limb_t	long
tp	*
[	O
LIMBS_PER_DOUBLE	O
]	O
;	O
mp_ptr	*
np	*
,	O
dp	*
;	O
mp_size_t	long
nn	long
,	O
dn	long
;	O
int	O
c	int
;	O
DOUBLE_NAN_INF_ACTION	O
(	O
d	long
,	O
__gmp_invalid_operation	function
(	O
)	O
,	O
__gmp_invalid_operation	function
(	O
)	O
)	O
;	O
negative	int
=	O
d	long
<	O
0	int
;	O
d	long
=	O
ABS	O
(	O
d	long
)	O
;	O
exp	int
=	O
__gmp_extract_double	function
(	O
tp	*
,	O
d	long
)	O
;	O
if	O
(	O
exp	int
<=	O
1	int
)	O
{	O
if	O
(	O
d	long
==	O
0.0	int
)	O
{	O
SIZ	O
(	O
NUM	O
(	O
dest	*
)	O
)	O
=	O
0	int
;	O
SIZ	O
(	O
DEN	O
(	O
dest	*
)	O
)	O
=	O
1	int
;	O
PTR	O
(	O
DEN	O
(	O
dest	*
)	O
)	O
[	O
0	int
]	O
=	O
1	int
;	O
return	O
;	O
}	O
dn	long
=	O
-	O
exp	int
;	O
np	*
=	O
MPZ_NEWALLOC	O
(	O
NUM	O
(	O
dest	*
)	O
,	O
3	int
)	O
;	O
if	O
(	O
tp	*
[	O
0	int
]	O
==	O
0	int
)	O
np	*
[	O
0	int
]	O
=	O
tp	*
[	O
1	int
]	O
,	O
nn	long
=	O
1	int
;	O
else	O
np	*
[	O
1	int
]	O
=	O
tp	*
[	O
1	int
]	O
,	O
np	*
[	O
0	int
]	O
=	O
tp	*
[	O
0	int
]	O
,	O
nn	long
=	O
2	int
;	O
dn	long
+=	O
nn	long
+	O
1	int
;	O
ASSERT_ALWAYS	O
(	O
dn	long
>	O
0	int
)	O
;	O
dp	*
=	O
MPZ_NEWALLOC	O
(	O
DEN	O
(	O
dest	*
)	O
,	O
dn	long
)	O
;	O
MPN_ZERO	O
(	O
dp	*
,	O
dn	long
-	O
1	int
)	O
;	O
dp	*
[	O
dn	long
-	O
1	int
]	O
=	O
1	int
;	O
count_trailing_zeros	O
(	O
c	int
,	O
np	*
[	O
0	int
]	O
|	O
dp	*
[	O
0	int
]	O
)	O
;	O
if	O
(	O
c	long
!=	O
0	int
)	O
{	O
mpn_rshift	O
(	O
np	*
,	O
np	*
,	O
nn	long
,	O
c	*
)	O
;	O
nn	long
-=	O
np	*
[	O
nn	long
-	O
1	int
]	O
==	O
0	int
;	O
mpn_rshift	O
(	O
dp	*
,	O
dp	*
,	O
dn	long
,	O
c	int
)	O
;	O
dn	long
-=	O
dp	*
[	O
dn	long
-	O
1	int
]	O
==	O
0	int
;	O
}	O
SIZ	O
(	O
DEN	O
(	O
dest	*
)	O
)	O
=	O
dn	long
;	O
SIZ	O
(	O
NUM	O
(	O
dest	*
)	O
)	O
=	O
negative	int
?	O
-	O
nn	long
:	O
nn	long
;	O
}	O
else	O
{	O
nn	long
=	O
exp	int
;	O
np	*
=	O
MPZ_NEWALLOC	O
(	O
NUM	O
(	O
dest	*
)	O
,	O
nn	long
)	O
;	O
switch	O
(	O
nn	long
)	O
{	O
default	O
:	O
MPN_ZERO	O
(	O
np	*
,	O
nn	long
-	O
LIMBS_PER_DOUBLE	O
)	O
;	O
np	*
+=	O
nn	long
-	O
LIMBS_PER_DOUBLE	O
;	O
case	O
2	int
:	O
np	*
[	O
1	int
]	O
=	O
tp	*
[	O
1	int
]	O
,	O
np	*
[	O
0	int
]	O
=	O
tp	*
[	O
0	int
]	O
;	O
break	O
;	O
}	O
dp	*
=	O
PTR	O
(	O
DEN	O
(	O
dest	*
)	O
)	O
;	O
dp	*
[	O
0	int
]	O
=	O
1	int
;	O
SIZ	O
(	O
DEN	O
(	O
dest	*
)	O
)	O
=	O
1	int
;	O
SIZ	O
(	O
NUM	O
(	O
dest	*
)	O
)	O
=	O
negative	int
?	O
-	O
nn	long
:	O
nn	long
;	O
}	O
}	O