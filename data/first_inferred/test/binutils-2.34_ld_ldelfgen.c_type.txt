void	O
ldelf_map_segments	function
(	O
bfd_boolean	int
need_layout	int
)	O
{	O
int	O
tries	int
=	O
10	int
;	O
do	O
{	O
lang_relax_sections	function
(	O
need_layout	*
)	O
;	O
need_layout	int
=	O
FALSE	O
;	O
if	O
(	O
link_info	*
.	O
output_bfd	*
->	O
xvec	*
->	O
flavour	enum
==	O
bfd_target_elf_flavour	int
&&	O
!	O
bfd_link_relocatable	function
(	O
&	O
link_info	*
)	O
)	O
{	O
bfd_size_type	long
phdr_size	int
;	O
phdr_size	int
=	O
elf_program_header_size	function
(	O
link_info	*
.	O
output_bfd	int
)	O
;	O
if	O
(	O
lang_phdr_list	*
==	O
NULL	O
)	O
elf_seg_map	function
(	O
link_info	*
.	O
output_bfd	*
)	O
=	O
NULL	O
;	O
if	O
(	O
!	O
_bfd_elf_map_sections_to_segments	function
(	O
link_info	*
.	O
output_bfd	*
,	O
&	O
link_info	*
)	O
)	O
einfo	function
(	O
_	O
(	O
"%F%P: map sections to segments failed: %E\n"	*
)	O
)	O
;	O
if	O
(	O
phdr_size	int
!=	O
elf_program_header_size	function
(	O
link_info	*
.	O
output_bfd	int
)	O
)	O
{	O
if	O
(	O
tries	int
>	O
6	int
)	O
need_layout	int
=	O
TRUE	O
;	O
else	O
if	O
(	O
phdr_size	int
<	O
elf_program_header_size	function
(	O
link_info	*
.	O
output_bfd	int
)	O
)	O
need_layout	int
=	O
TRUE	O
;	O
else	O
elf_program_header_size	function
(	O
link_info	*
.	O
output_bfd	int
)	O
=	O
phdr_size	int
;	O
}	O
}	O
}	O
while	O
(	O
need_layout	int
&&	O
--	O
tries	int
)	O
;	O
if	O
(	O
tries	int
==	O
0	int
)	O
einfo	function
(	O
_	O
(	O
"%F%P: looping in map_segments"	*
)	O
)	O
;	O
}	O
int	O
ldelf_emit_ctf_early	function
(	O
void	O
)	O
{	O
if	O
(	O
bfd_get_flavour	function
(	O
link_info	*
.	O
output_bfd	int
)	O
==	O
bfd_target_elf_flavour	int
)	O
return	O
0	int
;	O
return	O
1	int
;	O
}	O
struct	O
ctf_strsym_iter_cb_arg	struct
{	O
struct	O
elf_sym_strtab	struct
*	O
syms	*
;	O
bfd_size_type	long
symcount	int
;	O
struct	O
elf_strtab_hash	struct
*	O
symstrtab	*
;	O
size_t	long
next_i	long
;	O
size_t	long
next_idx	long
;	O
}	O
;	O
static	O
const	O
char	O
*	O
ldelf_ctf_strtab_iter_cb	function
(	O
uint32_t	int
*	O
offset	*
,	O
void	O
*	O
arg_	*
)	O
{	O
bfd_size_type	long
off	long
;	O
const	O
char	O
*	O
ret	*
;	O
struct	O
ctf_strsym_iter_cb_arg	struct
*	O
arg	*
=	O
(	O
struct	O
ctf_strsym_iter_cb_arg	struct
*	O
)	O
arg_	*
;	O
if	O
(	O
arg	*
->	O
next_i	int
==	O
0	int
)	O
arg	*
->	O
next_i	int
=	O
1	int
;	O
if	O
(	O
arg	*
->	O
next_i	int
>=	O
_bfd_elf_strtab_len	function
(	O
arg	*
->	O
symstrtab	int
)	O
)	O
{	O
arg	*
->	O
next_i	int
=	O
0	int
;	O
return	O
NULL	O
;	O
}	O
ret	int
=	O
_bfd_elf_strtab_str	function
(	O
arg	*
->	O
symstrtab	*
,	O
arg	*
->	O
next_i	*
++	O
,	O
&	O
off	long
)	O
;	O
*	O
offset	*
=	O
off	long
;	O
if	O
(	O
*	O
offset	*
!=	O
off	long
)	O
return	O
NULL	O
;	O
return	O
ret	*
;	O
}	O
static	O
struct	O
ctf_link_sym	struct
*	O
ldelf_ctf_symbols_iter_cb	function
(	O
struct	O
ctf_link_sym	struct
*	O
dest	*
,	O
void	O
*	O
arg_	*
)	O
{	O
struct	O
ctf_strsym_iter_cb_arg	struct
*	O
arg	*
=	O
(	O
struct	O
ctf_strsym_iter_cb_arg	struct
*	O
)	O
arg_	*
;	O
if	O
(	O
arg	*
->	O
next_i	int
>	O
arg	*
->	O
symcount	int
)	O
{	O
arg	*
->	O
next_i	int
=	O
0	int
;	O
arg	*
->	O
next_idx	int
=	O
0	int
;	O
return	O
NULL	O
;	O
}	O
ASSERT	O
(	O
arg	*
->	O
syms	*
[	O
arg	*
->	O
next_i	int
]	O
.	O
dest_index	*
==	O
arg	*
->	O
next_idx	int
)	O
;	O
dest	*
->	O
st_name	*
=	O
_bfd_elf_strtab_str	function
(	O
arg	*
->	O
symstrtab	*
,	O
arg	*
->	O
next_i	*
,	O
NULL	O
)	O
;	O
dest	*
->	O
st_shndx	*
=	O
arg	*
->	O
syms	*
[	O
arg	*
->	O
next_i	int
]	O
.	O
sym	*
.	O
st_shndx	int
;	O
dest	*
->	O
st_type	*
=	O
ELF_ST_TYPE	function
(	O
arg	*
->	O
syms	*
[	O
arg	*
->	O
next_i	int
]	O
.	O
sym	*
.	O
st_info	int
)	O
;	O
dest	*
->	O
st_value	*
=	O
arg	*
->	O
syms	*
[	O
arg	*
->	O
next_i	int
]	O
.	O
sym	struct
.	O
st_value	int
;	O
arg	*
->	O
next_i	int
++	O
;	O
return	O
dest	*
;	O
}	O
void	O
ldelf_examine_strtab_for_ctf	function
(	O
struct	O
ctf_file	struct
*	O
ctf_output	*
,	O
struct	O
elf_sym_strtab	struct
*	O
syms	*
,	O
bfd_size_type	long
symcount	int
,	O
struct	O
elf_strtab_hash	struct
*	O
symstrtab	*
)	O
{	O
struct	O
ctf_strsym_iter_cb_arg	struct
args	*
=	O
{	O
syms	*
,	O
symcount	*
,	O
symstrtab	function
,	O
0	int
,	O
0	int
}	O
;	O
if	O
(	O
!	O
ctf_output	*
)	O
return	O
;	O
if	O
(	O
bfd_get_flavour	function
(	O
link_info	*
.	O
output_bfd	int
)	O
==	O
bfd_target_elf_flavour	int
&&	O
!	O
bfd_link_relocatable	function
(	O
&	O
link_info	*
)	O
)	O
{	O
if	O
(	O
ctf_link_add_strtab	function
(	O
ctf_output	*
,	O
ldelf_ctf_strtab_iter_cb	*
,	O
&	O
args	*
)	O
<	O
0	int
)	O
einfo	function
(	O
_	O
(	O
"%F%P: warning: CTF strtab association failed; strings will "	*
"not be shared: %s\n"	*
)	O
,	O
ctf_errmsg	function
(	O
ctf_errno	function
(	O
ctf_output	*
)	O
)	O
)	O
;	O
if	O
(	O
ctf_link_shuffle_syms	function
(	O
ctf_output	*
,	O
ldelf_ctf_symbols_iter_cb	int
,	O
&	O
args	*
)	O
<	O
0	int
)	O
einfo	function
(	O
_	O
(	O
"%F%P: warning: CTF symbol shuffling failed; slight space "	*
"cost: %s\n"	*
)	O
,	O
ctf_errmsg	function
(	O
ctf_errno	function
(	O
ctf_output	*
)	O
)	O
)	O
;	O
}	O
}	O