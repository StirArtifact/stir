static	O
double	O
adeb1_data	array
[	O
17	int
]	O
=	O
{	O
2.4006597190381410194	int
,	O
0.1937213042189360089	int
,	O
-	O
0.62329124554895770e-02	int
,	O
0.3511174770206480e-03	int
,	O
-	O
0.228222466701231e-04	int
,	O
0.15805467875030e-05	int
,	O
-	O
0.1135378197072e-06	int
,	O
0.83583361188e-08	int
,	O
-	O
0.6264424787e-09	int
,	O
0.476033489e-10	int
,	O
-	O
0.36574154e-11	int
,	O
0.2835431e-12	int
,	O
-	O
0.221473e-13	int
,	O
0.17409e-14	int
,	O
-	O
0.1376e-15	int
,	O
0.109e-16	int
,	O
-	O
0.9e-18	int
}	O
;	O
static	O
cheb_series	struct
adeb1_cs	struct
=	O
{	O
adeb1_data	array
,	O
16	int
,	O
-	O
1.0	int
,	O
1.0	int
,	O
9	int
}	O
;	O
static	O
double	O
adeb2_data	array
[	O
18	int
]	O
=	O
{	O
2.5943810232570770282	int
,	O
0.2863357204530719834	int
,	O
-	O
0.102062656158046713e-01	int
,	O
0.6049109775346844e-03	int
,	O
-	O
0.405257658950210e-04	int
,	O
0.28633826328811e-05	int
,	O
-	O
0.2086394303065e-06	int
,	O
0.155237875826e-07	int
,	O
-	O
0.11731280087e-08	int
,	O
0.897358589e-10	int
,	O
-	O
0.69317614e-11	int
,	O
0.5398057e-12	int
,	O
-	O
0.423241e-13	int
,	O
0.33378e-14	int
,	O
-	O
0.2645e-15	int
,	O
0.211e-16	int
,	O
-	O
0.17e-17	int
,	O
0.1e-18	int
}	O
;	O
static	O
cheb_series	struct
adeb2_cs	struct
=	O
{	O
adeb2_data	array
,	O
17	int
,	O
-	O
1.0	int
,	O
1.0	int
,	O
10	int
}	O
;	O
static	O
double	O
adeb3_data	array
[	O
17	int
]	O
=	O
{	O
2.707737068327440945	int
,	O
0.340068135211091751	int
,	O
-	O
0.12945150184440869e-01	int
,	O
0.7963755380173816e-03	int
,	O
-	O
0.546360009590824e-04	int
,	O
0.39243019598805e-05	int
,	O
-	O
0.2894032823539e-06	int
,	O
0.217317613962e-07	int
,	O
-	O
0.16542099950e-08	int
,	O
0.1272796189e-09	int
,	O
-	O
0.987963460e-11	int
,	O
0.7725074e-12	int
,	O
-	O
0.607797e-13	int
,	O
0.48076e-14	int
,	O
-	O
0.3820e-15	int
,	O
0.305e-16	int
,	O
-	O
0.24e-17	int
}	O
;	O
static	O
cheb_series	struct
adeb3_cs	struct
=	O
{	O
adeb3_data	array
,	O
16	int
,	O
-	O
1.0	int
,	O
1.0	int
,	O
10	int
}	O
;	O
static	O
double	O
adeb4_data	array
[	O
17	int
]	O
=	O
{	O
2.781869415020523460	int
,	O
0.374976783526892863	int
,	O
-	O
0.14940907399031583e-01	int
,	O
0.945679811437042e-03	int
,	O
-	O
0.66132916138933e-04	int
,	O
0.4815632982144e-05	int
,	O
-	O
0.3588083958759e-06	int
,	O
0.271601187416e-07	int
,	O
-	O
0.20807099122e-08	int
,	O
0.1609383869e-09	int
,	O
-	O
0.125470979e-10	int
,	O
0.9847265e-12	int
,	O
-	O
0.777237e-13	int
,	O
0.61648e-14	int
,	O
-	O
0.4911e-15	int
,	O
0.393e-16	int
,	O
-	O
0.32e-17	int
}	O
;	O
static	O
cheb_series	struct
adeb4_cs	struct
=	O
{	O
adeb4_data	array
,	O
16	int
,	O
-	O
1.0	int
,	O
1.0	int
,	O
10	int
}	O
;	O
static	O
double	O
adeb5_data	array
[	O
17	int
]	O
=	O
{	O
2.8340269546834530149	int
,	O
0.3994098857106266445	int
,	O
-	O
0.164566764773099646e-1	int
,	O
0.10652138340664541e-2	int
,	O
-	O
0.756730374875418e-4	int
,	O
0.55745985240273e-5	int
,	O
-	O
0.4190692330918e-6	int
,	O
0.319456143678e-7	int
,	O
-	O
0.24613318171e-8	int
,	O
0.1912801633e-9	int
,	O
-	O
0.149720049e-10	int
,	O
0.11790312e-11	int
,	O
-	O
0.933329e-13	int
,	O
0.74218e-14	int
,	O
-	O
0.5925e-15	int
,	O
0.475e-16	int
,	O
-	O
0.39e-17	int
}	O
;	O
static	O
cheb_series	struct
adeb5_cs	struct
=	O
{	O
adeb5_data	array
,	O
16	int
,	O
-	O
1.0	int
,	O
1.0	int
,	O
10	int
}	O
;	O
static	O
double	O
adeb6_data	array
[	O
17	int
]	O
=	O
{	O
2.8726727134130122113	int
,	O
0.4174375352339027746	int
,	O
-	O
0.176453849354067873e-1	int
,	O
0.11629852733494556e-2	int
,	O
-	O
0.837118027357117e-4	int
,	O
0.62283611596189e-5	int
,	O
-	O
0.4718644465636e-6	int
,	O
0.361950397806e-7	int
,	O
-	O
0.28030368010e-8	int
,	O
0.2187681983e-9	int
,	O
-	O
0.171857387e-10	int
,	O
0.13575809e-11	int
,	O
-	O
0.1077580e-12	int
,	O
0.85893e-14	int
,	O
-	O
0.6872e-15	int
,	O
0.552e-16	int
,	O
-	O
0.44e-17	int
}	O
;	O
static	O
cheb_series	struct
adeb6_cs	struct
=	O
{	O
adeb6_data	array
,	O
16	int
,	O
-	O
1.0	int
,	O
1.0	int
,	O
10	int
}	O
;	O
int	O
gsl_sf_debye_1_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
double	O
val_infinity	double
=	O
1.64493406684822644	int
;	O
const	O
double	O
xcut	double
=	O
-	O
GSL_LOG_DBL_MIN	O
;	O
if	O
(	O
x	double
<	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
2.0	int
*	O
GSL_SQRT_DBL_EPSILON	int
)	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
-	O
0.25	int
*	O
x	double
+	O
x	double
*	O
x	double
/	O
36.0	int
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<=	O
4.0	int
)	O
{	O
const	O
double	O
t	double
=	O
x	double
*	O
x	double
/	O
8.0	int
-	O
1.0	int
;	O
gsl_sf_result	struct
c	pointer
;	O
cheb_eval_e	function
(	O
&	O
adeb1_cs	struct
,	O
t	double
,	O
&	O
c	pointer
)	O
;	O
result	pointer
->	O
val	double
=	O
c	pointer
.	O
val	double
-	O
0.25	int
*	O
x	double
;	O
result	pointer
->	O
err	double
=	O
c	pointer
.	O
err	double
+	O
0.25	int
*	O
x	double
*	O
GSL_DBL_EPSILON	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
-	O
(	O
M_LN2	int
+	O
GSL_LOG_DBL_EPSILON	O
)	O
)	O
{	O
const	O
int	O
nexp	int
=	O
floor	function
(	O
xcut	double
/	O
x	double
)	O
;	O
const	O
double	O
ex	double
=	O
exp	function
(	O
-	O
x	double
)	O
;	O
double	O
sum	double
=	O
0.0	int
;	O
double	O
xk	double
=	O
nexp	int
*	O
x	double
;	O
double	O
rk	double
=	O
nexp	int
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
nexp	int
;	O
i	int
>=	O
1	int
;	O
i	int
--	O
)	O
{	O
sum	double
*=	O
ex	double
;	O
sum	double
+=	O
(	O
1.0	int
+	O
1.0	int
/	O
xk	double
)	O
/	O
rk	double
;	O
rk	double
-=	O
1.0	int
;	O
xk	double
-=	O
x	double
;	O
}	O
result	pointer
->	O
val	double
=	O
val_infinity	double
/	O
x	double
-	O
sum	double
*	O
ex	double
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
xcut	double
)	O
{	O
result	pointer
->	O
val	double
=	O
(	O
val_infinity	double
-	O
exp	function
(	O
-	O
x	double
)	O
*	O
(	O
x	double
+	O
1.0	int
)	O
)	O
/	O
x	double
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
result	pointer
->	O
val	double
=	O
val_infinity	double
/	O
x	double
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_debye_2_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
double	O
val_infinity	double
=	O
4.80822761263837714	int
;	O
const	O
double	O
xcut	double
=	O
-	O
GSL_LOG_DBL_MIN	O
;	O
if	O
(	O
x	double
<	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
2.0	int
*	O
M_SQRT2	int
*	O
GSL_SQRT_DBL_EPSILON	int
)	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
-	O
x	double
/	O
3.0	int
+	O
x	double
*	O
x	double
/	O
24.0	int
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
result	pointer
->	O
val	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<=	O
4.0	int
)	O
{	O
const	O
double	O
t	double
=	O
x	double
*	O
x	double
/	O
8.0	int
-	O
1.0	int
;	O
gsl_sf_result	struct
c	pointer
;	O
cheb_eval_e	function
(	O
&	O
adeb2_cs	struct
,	O
t	double
,	O
&	O
c	pointer
)	O
;	O
result	pointer
->	O
val	double
=	O
c	pointer
.	O
val	double
-	O
x	double
/	O
3.0	int
;	O
result	pointer
->	O
err	double
=	O
c	pointer
.	O
err	double
+	O
GSL_DBL_EPSILON	int
*	O
x	double
/	O
3.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
-	O
(	O
M_LN2	int
+	O
GSL_LOG_DBL_EPSILON	O
)	O
)	O
{	O
const	O
int	O
nexp	int
=	O
floor	function
(	O
xcut	double
/	O
x	double
)	O
;	O
const	O
double	O
ex	double
=	O
exp	function
(	O
-	O
x	double
)	O
;	O
double	O
xk	double
=	O
nexp	int
*	O
x	double
;	O
double	O
rk	double
=	O
nexp	int
;	O
double	O
sum	double
=	O
0.0	int
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
nexp	int
;	O
i	int
>=	O
1	int
;	O
i	int
--	O
)	O
{	O
sum	double
*=	O
ex	double
;	O
sum	double
+=	O
(	O
1.0	int
+	O
2.0	int
/	O
xk	double
+	O
2.0	int
/	O
(	O
xk	double
*	O
xk	double
)	O
)	O
/	O
rk	double
;	O
rk	double
-=	O
1.0	int
;	O
xk	double
-=	O
x	double
;	O
}	O
result	pointer
->	O
val	double
=	O
val_infinity	double
/	O
(	O
x	double
*	O
x	double
)	O
-	O
2.0	int
*	O
sum	double
*	O
ex	double
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
xcut	double
)	O
{	O
const	O
double	O
x2	double
=	O
x	double
*	O
x	double
;	O
const	O
double	O
sum	double
=	O
2.0	int
+	O
2.0	int
*	O
x	double
+	O
x2	double
;	O
result	pointer
->	O
val	double
=	O
(	O
val_infinity	double
-	O
2.0	int
*	O
sum	double
*	O
exp	function
(	O
-	O
x	double
)	O
)	O
/	O
x2	double
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
result	pointer
->	O
val	double
=	O
(	O
val_infinity	double
/	O
x	double
)	O
/	O
x	double
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
result	pointer
->	O
val	double
;	O
CHECK_UNDERFLOW	O
(	O
result	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_debye_3_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
double	O
val_infinity	double
=	O
19.4818182068004875	int
;	O
const	O
double	O
xcut	double
=	O
-	O
GSL_LOG_DBL_MIN	O
;	O
if	O
(	O
x	double
<	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
2.0	int
*	O
M_SQRT2	int
*	O
GSL_SQRT_DBL_EPSILON	int
)	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
-	O
3.0	int
*	O
x	double
/	O
8.0	int
+	O
x	double
*	O
x	double
/	O
20.0	int
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
result	pointer
->	O
val	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<=	O
4.0	int
)	O
{	O
const	O
double	O
t	double
=	O
x	double
*	O
x	double
/	O
8.0	int
-	O
1.0	int
;	O
gsl_sf_result	struct
c	pointer
;	O
cheb_eval_e	function
(	O
&	O
adeb3_cs	struct
,	O
t	double
,	O
&	O
c	pointer
)	O
;	O
result	pointer
->	O
val	double
=	O
c	pointer
.	O
val	double
-	O
0.375	int
*	O
x	double
;	O
result	pointer
->	O
err	double
=	O
c	pointer
.	O
err	double
+	O
GSL_DBL_EPSILON	int
*	O
0.375	int
*	O
x	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
-	O
(	O
M_LN2	int
+	O
GSL_LOG_DBL_EPSILON	O
)	O
)	O
{	O
const	O
int	O
nexp	int
=	O
floor	function
(	O
xcut	double
/	O
x	double
)	O
;	O
const	O
double	O
ex	double
=	O
exp	function
(	O
-	O
x	double
)	O
;	O
double	O
xk	double
=	O
nexp	int
*	O
x	double
;	O
double	O
rk	double
=	O
nexp	int
;	O
double	O
sum	double
=	O
0.0	int
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
nexp	int
;	O
i	int
>=	O
1	int
;	O
i	int
--	O
)	O
{	O
double	O
xk_inv	double
=	O
1.0	int
/	O
xk	double
;	O
sum	double
*=	O
ex	double
;	O
sum	double
+=	O
(	O
(	O
(	O
6.0	int
*	O
xk_inv	double
+	O
6.0	int
)	O
*	O
xk_inv	double
+	O
3.0	int
)	O
*	O
xk_inv	double
+	O
1.0	int
)	O
/	O
rk	double
;	O
rk	double
-=	O
1.0	int
;	O
xk	double
-=	O
x	double
;	O
}	O
result	pointer
->	O
val	double
=	O
val_infinity	double
/	O
(	O
x	double
*	O
x	double
*	O
x	double
)	O
-	O
3.0	int
*	O
sum	double
*	O
ex	double
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
result	pointer
->	O
val	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
xcut	double
)	O
{	O
const	O
double	O
x3	double
=	O
x	double
*	O
x	double
*	O
x	double
;	O
const	O
double	O
sum	double
=	O
6.0	int
+	O
6.0	int
*	O
x	double
+	O
3.0	int
*	O
x	double
*	O
x	double
+	O
x3	double
;	O
result	pointer
->	O
val	double
=	O
(	O
val_infinity	double
-	O
3.0	int
*	O
sum	double
*	O
exp	function
(	O
-	O
x	double
)	O
)	O
/	O
x3	double
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
result	pointer
->	O
val	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
result	pointer
->	O
val	double
=	O
(	O
(	O
val_infinity	double
/	O
x	double
)	O
/	O
x	double
)	O
/	O
x	double
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
result	pointer
->	O
val	double
;	O
CHECK_UNDERFLOW	O
(	O
result	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_debye_4_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
double	O
val_infinity	double
=	O
99.5450644937635129	int
;	O
const	O
double	O
xcut	double
=	O
-	O
GSL_LOG_DBL_MIN	O
;	O
if	O
(	O
x	double
<	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
2.0	int
*	O
M_SQRT2	int
*	O
GSL_SQRT_DBL_EPSILON	int
)	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
-	O
2.0	int
*	O
x	double
/	O
5.0	int
+	O
x	double
*	O
x	double
/	O
18.0	int
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
result	pointer
->	O
val	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<=	O
4.0	int
)	O
{	O
const	O
double	O
t	double
=	O
x	double
*	O
x	double
/	O
8.0	int
-	O
1.0	int
;	O
gsl_sf_result	struct
c	pointer
;	O
cheb_eval_e	function
(	O
&	O
adeb4_cs	struct
,	O
t	double
,	O
&	O
c	pointer
)	O
;	O
result	pointer
->	O
val	double
=	O
c	pointer
.	O
val	double
-	O
2.0	int
*	O
x	double
/	O
5.0	int
;	O
result	pointer
->	O
err	double
=	O
c	pointer
.	O
err	double
+	O
GSL_DBL_EPSILON	int
*	O
2.0	int
*	O
x	double
/	O
5.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
-	O
(	O
M_LN2	int
+	O
GSL_LOG_DBL_EPSILON	O
)	O
)	O
{	O
const	O
int	O
nexp	int
=	O
floor	function
(	O
xcut	double
/	O
x	double
)	O
;	O
const	O
double	O
ex	double
=	O
exp	function
(	O
-	O
x	double
)	O
;	O
double	O
xk	double
=	O
nexp	int
*	O
x	double
;	O
double	O
rk	double
=	O
nexp	int
;	O
double	O
sum	double
=	O
0.0	int
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
nexp	int
;	O
i	int
>=	O
1	int
;	O
i	int
--	O
)	O
{	O
double	O
xk_inv	double
=	O
1.0	int
/	O
xk	double
;	O
sum	double
*=	O
ex	double
;	O
sum	double
+=	O
(	O
(	O
(	O
(	O
24.0	int
*	O
xk_inv	double
+	O
24.0	int
)	O
*	O
xk_inv	double
+	O
12.0	int
)	O
*	O
xk_inv	double
+	O
4.0	int
)	O
*	O
xk_inv	double
+	O
1.0	int
)	O
/	O
rk	double
;	O
rk	double
-=	O
1.0	int
;	O
xk	double
-=	O
x	double
;	O
}	O
result	pointer
->	O
val	double
=	O
val_infinity	double
/	O
(	O
x	double
*	O
x	double
*	O
x	double
*	O
x	double
)	O
-	O
4.0	int
*	O
sum	double
*	O
ex	double
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
result	pointer
->	O
val	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
xcut	double
)	O
{	O
const	O
double	O
x2	double
=	O
x	double
*	O
x	double
;	O
const	O
double	O
x4	double
=	O
x2	double
*	O
x2	double
;	O
const	O
double	O
sum	double
=	O
24.0	int
+	O
24.0	int
*	O
x	double
+	O
12.0	int
*	O
x2	double
+	O
4.0	int
*	O
x2	double
*	O
x	double
+	O
x4	double
;	O
result	pointer
->	O
val	double
=	O
(	O
val_infinity	double
-	O
4.0	int
*	O
sum	double
*	O
exp	function
(	O
-	O
x	double
)	O
)	O
/	O
x4	double
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
result	pointer
->	O
val	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
result	pointer
->	O
val	double
=	O
(	O
(	O
(	O
val_infinity	double
/	O
x	double
)	O
/	O
x	double
)	O
/	O
x	double
)	O
/	O
x	double
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
result	pointer
->	O
val	double
;	O
CHECK_UNDERFLOW	O
(	O
result	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_debye_5_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
double	O
val_infinity	double
=	O
610.405837190669483828710757875	int
;	O
const	O
double	O
xcut	double
=	O
-	O
GSL_LOG_DBL_MIN	O
;	O
if	O
(	O
x	double
<	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
2.0	int
*	O
M_SQRT2	int
*	O
GSL_SQRT_DBL_EPSILON	int
)	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
-	O
5.0	int
*	O
x	double
/	O
12.0	int
+	O
5.0	int
*	O
x	double
*	O
x	double
/	O
84.0	int
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
result	pointer
->	O
val	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<=	O
4.0	int
)	O
{	O
const	O
double	O
t	double
=	O
x	double
*	O
x	double
/	O
8.0	int
-	O
1.0	int
;	O
gsl_sf_result	struct
c	pointer
;	O
cheb_eval_e	function
(	O
&	O
adeb5_cs	struct
,	O
t	double
,	O
&	O
c	pointer
)	O
;	O
result	pointer
->	O
val	double
=	O
c	pointer
.	O
val	double
-	O
5.0	int
*	O
x	double
/	O
12.0	int
;	O
result	pointer
->	O
err	double
=	O
c	pointer
.	O
err	double
+	O
GSL_DBL_EPSILON	int
*	O
5.0	int
*	O
x	double
/	O
12.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
-	O
(	O
M_LN2	int
+	O
GSL_LOG_DBL_EPSILON	O
)	O
)	O
{	O
const	O
int	O
nexp	int
=	O
floor	function
(	O
xcut	double
/	O
x	double
)	O
;	O
const	O
double	O
ex	double
=	O
exp	function
(	O
-	O
x	double
)	O
;	O
double	O
xk	double
=	O
nexp	int
*	O
x	double
;	O
double	O
rk	double
=	O
nexp	int
;	O
double	O
sum	double
=	O
0.0	int
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
nexp	int
;	O
i	int
>=	O
1	int
;	O
i	int
--	O
)	O
{	O
double	O
xk_inv	double
=	O
1.0	int
/	O
xk	double
;	O
sum	double
*=	O
ex	double
;	O
sum	double
+=	O
(	O
(	O
(	O
(	O
(	O
120.0	int
*	O
xk_inv	double
+	O
120.0	int
)	O
*	O
xk_inv	double
+	O
60.0	int
)	O
*	O
xk_inv	double
+	O
20.0	int
)	O
*	O
xk_inv	double
+	O
5.0	int
)	O
*	O
xk_inv	double
+	O
1.0	int
)	O
/	O
rk	double
;	O
rk	double
-=	O
1.0	int
;	O
xk	double
-=	O
x	double
;	O
}	O
result	pointer
->	O
val	double
=	O
val_infinity	double
/	O
(	O
x	double
*	O
x	double
*	O
x	double
*	O
x	double
*	O
x	double
)	O
-	O
5.0	int
*	O
sum	double
*	O
ex	double
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
result	pointer
->	O
val	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
xcut	double
)	O
{	O
const	O
double	O
x2	double
=	O
x	double
*	O
x	double
;	O
const	O
double	O
x4	double
=	O
x2	double
*	O
x2	double
;	O
const	O
double	O
x5	double
=	O
x4	double
*	O
x	double
;	O
const	O
double	O
sum	double
=	O
120.0	int
+	O
120.0	int
*	O
x	double
+	O
60.0	int
*	O
x2	double
+	O
20.0	int
*	O
x2	double
*	O
x	double
+	O
5.0	int
*	O
x4	double
+	O
x5	double
;	O
result	pointer
->	O
val	double
=	O
(	O
val_infinity	double
-	O
5.0	int
*	O
sum	double
*	O
exp	function
(	O
-	O
x	double
)	O
)	O
/	O
x5	double
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
result	pointer
->	O
val	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
result	pointer
->	O
val	double
=	O
(	O
(	O
(	O
(	O
val_infinity	double
/	O
x	double
)	O
/	O
x	double
)	O
/	O
x	double
)	O
/	O
x	double
)	O
/	O
x	double
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
result	pointer
->	O
val	double
;	O
CHECK_UNDERFLOW	O
(	O
result	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_debye_6_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
double	O
val_infinity	double
=	O
4356.06887828990661194792541535	int
;	O
const	O
double	O
xcut	double
=	O
-	O
GSL_LOG_DBL_MIN	O
;	O
if	O
(	O
x	double
<	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
2.0	int
*	O
M_SQRT2	int
*	O
GSL_SQRT_DBL_EPSILON	int
)	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
-	O
3.0	int
*	O
x	double
/	O
7.0	int
+	O
x	double
*	O
x	double
/	O
16.0	int
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
result	pointer
->	O
val	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<=	O
4.0	int
)	O
{	O
const	O
double	O
t	double
=	O
x	double
*	O
x	double
/	O
8.0	int
-	O
1.0	int
;	O
gsl_sf_result	struct
c	pointer
;	O
cheb_eval_e	function
(	O
&	O
adeb6_cs	struct
,	O
t	double
,	O
&	O
c	pointer
)	O
;	O
result	pointer
->	O
val	double
=	O
c	pointer
.	O
val	double
-	O
3.0	int
*	O
x	double
/	O
7.0	int
;	O
result	pointer
->	O
err	double
=	O
c	pointer
.	O
err	double
+	O
GSL_DBL_EPSILON	int
*	O
3.0	int
*	O
x	double
/	O
7.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
-	O
(	O
M_LN2	int
+	O
GSL_LOG_DBL_EPSILON	O
)	O
)	O
{	O
const	O
int	O
nexp	int
=	O
floor	function
(	O
xcut	double
/	O
x	double
)	O
;	O
const	O
double	O
ex	double
=	O
exp	function
(	O
-	O
x	double
)	O
;	O
double	O
xk	double
=	O
nexp	int
*	O
x	double
;	O
double	O
rk	double
=	O
nexp	int
;	O
double	O
sum	double
=	O
0.0	int
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
nexp	int
;	O
i	int
>=	O
1	int
;	O
i	int
--	O
)	O
{	O
double	O
xk_inv	double
=	O
1.0	int
/	O
xk	double
;	O
sum	double
*=	O
ex	double
;	O
sum	double
+=	O
(	O
(	O
(	O
(	O
(	O
(	O
720.0	int
*	O
xk_inv	double
+	O
720.0	int
)	O
*	O
xk_inv	double
+	O
360.0	int
)	O
*	O
xk_inv	double
+	O
120.0	int
)	O
*	O
xk_inv	double
+	O
30.0	int
)	O
*	O
xk_inv	double
+	O
6.0	int
)	O
*	O
xk_inv	double
+	O
1.0	int
)	O
/	O
rk	double
;	O
rk	double
-=	O
1.0	int
;	O
xk	double
-=	O
x	double
;	O
}	O
result	pointer
->	O
val	double
=	O
val_infinity	double
/	O
(	O
x	double
*	O
x	double
*	O
x	double
*	O
x	double
*	O
x	double
*	O
x	double
)	O
-	O
6.0	int
*	O
sum	double
*	O
ex	double
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
result	pointer
->	O
val	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
xcut	double
)	O
{	O
const	O
double	O
x2	double
=	O
x	double
*	O
x	double
;	O
const	O
double	O
x4	double
=	O
x2	double
*	O
x2	double
;	O
const	O
double	O
x6	double
=	O
x4	double
*	O
x2	double
;	O
const	O
double	O
sum	double
=	O
720.0	int
+	O
720.0	int
*	O
x	double
+	O
360.0	int
*	O
x2	double
+	O
120.0	int
*	O
x2	double
*	O
x	double
+	O
30.0	int
*	O
x4	double
+	O
6.0	int
*	O
x4	double
*	O
x	double
+	O
x6	double
;	O
result	pointer
->	O
val	double
=	O
(	O
val_infinity	double
-	O
6.0	int
*	O
sum	double
*	O
exp	function
(	O
-	O
x	double
)	O
)	O
/	O
x6	double
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
result	pointer
->	O
val	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
result	pointer
->	O
val	double
=	O
(	O
(	O
(	O
(	O
(	O
val_infinity	double
/	O
x	double
)	O
/	O
x	double
)	O
/	O
x	double
)	O
/	O
x	double
)	O
/	O
x	double
)	O
/	O
x	double
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
result	pointer
->	O
val	double
;	O
CHECK_UNDERFLOW	O
(	O
result	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
double	O
gsl_sf_debye_1	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_debye_1_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_debye_2	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_debye_2_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_debye_3	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_debye_3_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_debye_4	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_debye_4_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_debye_5	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_debye_5_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_debye_6	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_debye_6_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O