int	O
_rl_allow_pathname_alphabetic_chars	int
=	O
0	int
;	O
static	O
const	O
char	O
*	O
const	O
pathname_alphabetic_chars	*
=	O
"/-_=~.#$"	*
;	O
int	O
rl_alphabetic	function
(	O
c	int
)	O
int	O
c	int
;	O
{	O
if	O
(	O
ALPHABETIC	function
(	O
c	int
)	O
)	O
return	O
(	O
1	int
)	O
;	O
return	O
(	O
_rl_allow_pathname_alphabetic_chars	*
&&	O
strchr	function
(	O
pathname_alphabetic_chars	*
,	O
c	int
)	O
!=	O
NULL	O
)	O
;	O
}	O
int	O
_rl_walphabetic	function
(	O
wchar_t	int
wc	int
)	O
{	O
int	O
c	int
;	O
if	O
(	O
iswalnum	function
(	O
wc	int
)	O
)	O
return	O
(	O
1	int
)	O
;	O
c	int
=	O
wc	int
&	O
0177	int
;	O
return	O
(	O
_rl_allow_pathname_alphabetic_chars	*
&&	O
strchr	function
(	O
pathname_alphabetic_chars	*
,	O
c	int
)	O
!=	O
NULL	O
)	O
;	O
}	O
int	O
_rl_abort_internal	function
(	O
)	O
{	O
rl_ding	function
(	O
)	O
;	O
rl_clear_message	function
(	O
)	O
;	O
_rl_reset_argument	function
(	O
)	O
;	O
rl_clear_pending_input	function
(	O
)	O
;	O
RL_UNSETSTATE	O
(	O
RL_STATE_MACRODEF	*
)	O
;	O
while	O
(	O
rl_executing_macro	*
)	O
_rl_pop_executing_macro	function
(	O
)	O
;	O
RL_UNSETSTATE	O
(	O
RL_STATE_MULTIKEY	int
)	O
;	O
rl_last_func	*
=	O
(	O
rl_command_func_t	function
*	O
)	O
NULL	O
;	O
_rl_longjmp	function
(	O
_rl_top_level	int
,	O
1	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
rl_abort	function
(	O
count	int
,	O
key	*
)	O
int	O
count	int
,	O
key	int
;	O
{	O
return	O
(	O
_rl_abort_internal	function
(	O
)	O
)	O
;	O
}	O
int	O
_rl_null_function	function
(	O
count	int
,	O
key	*
)	O
int	O
count	int
,	O
key	int
;	O
{	O
return	O
0	int
;	O
}	O
int	O
rl_tty_status	function
(	O
count	int
,	O
key	*
)	O
int	O
count	int
,	O
key	int
;	O
{	O
rl_ding	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
char	O
*	O
rl_copy_text	function
(	O
from	*
,	O
to	*
)	O
int	O
from	*
,	O
to	O
;	O
{	O
register	O
int	O
length	int
;	O
char	O
*	O
copy	*
;	O
if	O
(	O
from	*
>	O
to	O
)	O
SWAP	O
(	O
from	*
,	O
to	O
)	O
;	O
length	int
=	O
to	*
-	O
from	*
;	O
copy	*
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
1	int
+	O
length	int
)	O
;	O
strncpy	function
(	O
copy	O
,	O
rl_line_buffer	*
+	O
from	*
,	O
length	int
)	O
;	O
copy	*
[	O
length	int
]	O
=	O
'\0'	O
;	O
return	O
(	O
copy	O
)	O
;	O
}	O
void	O
rl_extend_line_buffer	function
(	O
len	int
)	O
int	O
len	int
;	O
{	O
while	O
(	O
len	int
>=	O
rl_line_buffer_len	int
)	O
{	O
rl_line_buffer_len	int
+=	O
DEFAULT_BUFFER_SIZE	int
;	O
rl_line_buffer	*
=	O
(	O
char	O
*	O
)	O
xrealloc	function
(	O
rl_line_buffer	*
,	O
rl_line_buffer_len	*
)	O
;	O
}	O
_rl_set_the_line	function
(	O
)	O
;	O
}	O
int	O
rl_tilde_expand	function
(	O
ignore	*
,	O
key	*
)	O
int	O
ignore	int
,	O
key	int
;	O
{	O
register	O
int	O
start	int
,	O
end	int
;	O
char	O
*	O
homedir	*
,	O
*	O
temp	*
;	O
int	O
len	int
;	O
end	int
=	O
rl_point	int
;	O
start	int
=	O
end	int
-	O
1	int
;	O
if	O
(	O
rl_point	int
==	O
rl_end	int
&&	O
rl_line_buffer	*
[	O
rl_point	int
]	O
==	O
'~'	O
)	O
{	O
homedir	*
=	O
tilde_expand	function
(	O
"~"	*
)	O
;	O
_rl_replace_text	function
(	O
homedir	*
,	O
start	int
,	O
end	int
)	O
;	O
xfree	function
(	O
homedir	*
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
start	int
>=	O
0	int
&&	O
rl_line_buffer	*
[	O
start	int
]	O
!=	O
'~'	O
)	O
{	O
for	O
(	O
;	O
!	O
whitespace	function
(	O
rl_line_buffer	*
[	O
start	int
]	O
)	O
&&	O
start	int
>=	O
0	int
;	O
start	int
--	O
)	O
;	O
start	int
++	O
;	O
}	O
else	O
if	O
(	O
start	int
<	O
0	int
)	O
start	int
=	O
0	int
;	O
end	int
=	O
start	int
;	O
do	O
end	int
++	O
;	O
while	O
(	O
whitespace	function
(	O
rl_line_buffer	*
[	O
end	int
]	O
)	O
==	O
0	int
&&	O
end	int
<	O
rl_end	int
)	O
;	O
if	O
(	O
whitespace	function
(	O
rl_line_buffer	*
[	O
end	int
]	O
)	O
||	O
end	int
>=	O
rl_end	int
)	O
end	int
--	O
;	O
if	O
(	O
rl_line_buffer	*
[	O
start	int
]	O
==	O
'~'	O
)	O
{	O
len	int
=	O
end	int
-	O
start	*
+	O
1	int
;	O
temp	*
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
len	int
+	O
1	int
)	O
;	O
strncpy	function
(	O
temp	*
,	O
rl_line_buffer	*
+	O
start	int
,	O
len	int
)	O
;	O
temp	*
[	O
len	int
]	O
=	O
'\0'	O
;	O
homedir	*
=	O
tilde_expand	function
(	O
temp	*
)	O
;	O
xfree	function
(	O
temp	*
)	O
;	O
_rl_replace_text	function
(	O
homedir	*
,	O
start	int
,	O
end	int
)	O
;	O
xfree	function
(	O
homedir	*
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
void	O
_rl_ttymsg	function
(	O
const	O
char	O
*	O
format	*
,	O
...	O
)	O
{	O
va_list	array
args	array
;	O
va_start	O
(	O
args	array
,	O
format	*
)	O
;	O
fprintf	function
(	O
stderr	*
,	O
"readline: "	*
)	O
;	O
vfprintf	function
(	O
stderr	*
,	O
format	*
,	O
args	array
)	O
;	O
fprintf	function
(	O
stderr	*
,	O
"\n"	*
)	O
;	O
fflush	function
(	O
stderr	*
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
rl_forced_update_display	function
(	O
)	O
;	O
}	O
void	O
_rl_errmsg	function
(	O
const	O
char	O
*	O
format	*
,	O
...	O
)	O
{	O
va_list	array
args	array
;	O
va_start	O
(	O
args	array
,	O
format	*
)	O
;	O
fprintf	function
(	O
stderr	*
,	O
"readline: "	*
)	O
;	O
vfprintf	function
(	O
stderr	*
,	O
format	*
,	O
args	array
)	O
;	O
fprintf	function
(	O
stderr	*
,	O
"\n"	*
)	O
;	O
fflush	function
(	O
stderr	*
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
}	O
char	O
*	O
_rl_strindex	function
(	O
s1	*
,	O
s2	*
)	O
register	O
const	O
char	O
*	O
s1	*
,	O
*	O
s2	*
;	O
{	O
register	O
int	O
i	int
,	O
l	int
,	O
len	int
;	O
for	O
(	O
i	int
=	O
0	int
,	O
l	int
=	O
strlen	function
(	O
s2	*
)	O
,	O
len	int
=	O
strlen	function
(	O
s1	*
)	O
;	O
(	O
len	int
-	O
i	int
)	O
>=	O
l	int
;	O
i	int
++	O
)	O
if	O
(	O
_rl_strnicmp	function
(	O
s1	*
+	O
i	int
,	O
s2	int
,	O
l	int
)	O
==	O
0	int
)	O
return	O
(	O
(	O
char	O
*	O
)	O
(	O
s1	*
+	O
i	int
)	O
)	O
;	O
return	O
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
int	O
_rl_qsort_string_compare	function
(	O
s1	*
,	O
s2	*
)	O
char	O
*	O
*	O
s1	*
,	O
*	O
*	O
s2	*
;	O
{	O
return	O
(	O
strcoll	function
(	O
*	O
s1	*
,	O
*	O
s2	*
)	O
)	O
;	O
}	O
FUNCTION_FOR_MACRO	function
(	O
_rl_digit_p	*
)	O
FUNCTION_FOR_MACRO	function
(	O
_rl_digit_value	*
)	O
FUNCTION_FOR_MACRO	function
(	O
_rl_lowercase_p	*
)	O
FUNCTION_FOR_MACRO	function
(	O
_rl_pure_alphabetic	*
)	O
FUNCTION_FOR_MACRO	function
(	O
_rl_to_lower	*
)	O
FUNCTION_FOR_MACRO	function
(	O
_rl_to_upper	*
)	O
FUNCTION_FOR_MACRO	function
(	O
_rl_uppercase_p	*
)	O
void	O
rl_free	function
(	O
mem	*
)	O
void	O
*	O
mem	*
;	O
{	O
if	O
(	O
mem	*
)	O
free	function
(	O
mem	*
)	O
;	O
}	O
char	O
*	O
_rl_savestring	function
(	O
s	*
)	O
const	O
char	O
*	O
s	*
;	O
{	O
return	O
(	O
strcpy	function
(	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
1	int
+	O
(	O
int	O
)	O
strlen	function
(	O
s	*
)	O
)	O
,	O
(	O
s	*
)	O
)	O
)	O
;	O
}	O