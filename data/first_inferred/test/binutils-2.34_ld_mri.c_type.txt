struct	O
section_name_struct	struct
{	O
struct	O
section_name_struct	struct
*	O
next	pointer
;	O
const	O
char	O
*	O
name	pointer
;	O
const	O
char	O
*	O
alias	pointer
;	O
etree_type	union
*	O
vma	long
;	O
etree_type	union
*	O
align	pointer
;	O
etree_type	union
*	O
subalign	pointer
;	O
int	O
ok_to_load	int
;	O
}	O
;	O
static	O
unsigned	O
int	O
symbol_truncate	int
=	O
10000	int
;	O
static	O
etree_type	union
*	O
base	int
;	O
static	O
struct	O
section_name_struct	struct
*	O
order	pointer
;	O
static	O
struct	O
section_name_struct	struct
*	O
only_load	pointer
;	O
static	O
struct	O
section_name_struct	struct
*	O
address	long
;	O
static	O
struct	O
section_name_struct	struct
*	O
alias	pointer
;	O
static	O
struct	O
section_name_struct	struct
*	O
alignment	pointer
;	O
static	O
struct	O
section_name_struct	struct
*	O
subalignment	pointer
;	O
static	O
struct	O
section_name_struct	struct
*	O
*	O
lookup	function
(	O
const	O
char	O
*	O
name	pointer
,	O
struct	O
section_name_struct	struct
*	O
*	O
list	pointer
)	O
{	O
struct	O
section_name_struct	struct
*	O
*	O
ptr	pointer
=	O
list	pointer
;	O
while	O
(	O
*	O
ptr	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
(	O
*	O
ptr	pointer
)	O
->	O
name	pointer
)	O
==	O
0	int
)	O
*	O
ptr	pointer
=	O
(	O
*	O
ptr	pointer
)	O
->	O
next	pointer
;	O
else	O
ptr	pointer
=	O
&	O
(	O
(	O
*	O
ptr	pointer
)	O
->	O
next	pointer
)	O
;	O
}	O
*	O
ptr	pointer
=	O
(	O
struct	O
section_name_struct	struct
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
struct	O
section_name_struct	struct
)	O
)	O
;	O
return	O
ptr	pointer
;	O
}	O
static	O
void	O
mri_add_to_list	function
(	O
struct	O
section_name_struct	struct
*	O
*	O
list	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
etree_type	union
*	O
vma	long
,	O
const	O
char	O
*	O
zalias	pointer
,	O
etree_type	union
*	O
align	pointer
,	O
etree_type	union
*	O
subalign	pointer
)	O
{	O
struct	O
section_name_struct	struct
*	O
*	O
ptr	pointer
=	O
lookup	function
(	O
name	pointer
,	O
list	pointer
)	O
;	O
(	O
*	O
ptr	pointer
)	O
->	O
name	pointer
=	O
name	pointer
;	O
(	O
*	O
ptr	pointer
)	O
->	O
vma	long
=	O
vma	long
;	O
(	O
*	O
ptr	pointer
)	O
->	O
next	pointer
=	O
NULL	O
;	O
(	O
*	O
ptr	pointer
)	O
->	O
ok_to_load	int
=	O
0	int
;	O
(	O
*	O
ptr	pointer
)	O
->	O
alias	pointer
=	O
zalias	pointer
;	O
(	O
*	O
ptr	pointer
)	O
->	O
align	pointer
=	O
align	pointer
;	O
(	O
*	O
ptr	pointer
)	O
->	O
subalign	pointer
=	O
subalign	pointer
;	O
}	O
void	O
mri_output_section	function
(	O
const	O
char	O
*	O
name	pointer
,	O
etree_type	union
*	O
vma	long
)	O
{	O
mri_add_to_list	function
(	O
&	O
address	long
,	O
name	pointer
,	O
vma	long
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
}	O
void	O
mri_only_load	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
mri_add_to_list	function
(	O
&	O
only_load	pointer
,	O
name	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
}	O
void	O
mri_base	function
(	O
etree_type	union
*	O
exp	pointer
)	O
{	O
base	int
=	O
exp	pointer
;	O
}	O
static	O
int	O
done_tree	int
=	O
0	int
;	O
void	O
mri_draw_tree	function
(	O
void	O
)	O
{	O
if	O
(	O
done_tree	int
)	O
return	O
;	O
if	O
(	O
address	long
!=	O
NULL	O
)	O
{	O
struct	O
section_name_struct	struct
*	O
alist	pointer
;	O
struct	O
section_name_struct	struct
*	O
olist	pointer
;	O
if	O
(	O
order	pointer
==	O
NULL	O
)	O
order	pointer
=	O
address	long
;	O
for	O
(	O
alist	pointer
=	O
address	long
;	O
alist	pointer
!=	O
NULL	O
;	O
alist	pointer
=	O
alist	pointer
->	O
next	pointer
)	O
{	O
int	O
done	int
=	O
0	int
;	O
for	O
(	O
olist	pointer
=	O
order	pointer
;	O
done	int
==	O
0	int
&&	O
olist	pointer
!=	O
NULL	O
;	O
olist	pointer
=	O
olist	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
alist	pointer
->	O
name	pointer
,	O
olist	pointer
->	O
name	pointer
)	O
==	O
0	int
)	O
{	O
olist	pointer
->	O
vma	long
=	O
alist	pointer
->	O
vma	long
;	O
done	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
!	O
done	int
)	O
{	O
mri_add_to_list	function
(	O
&	O
order	pointer
,	O
alist	pointer
->	O
name	pointer
,	O
alist	pointer
->	O
vma	long
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
}	O
}	O
}	O
if	O
(	O
only_load	pointer
!=	O
NULL	O
)	O
{	O
struct	O
section_name_struct	struct
*	O
ptr1	pointer
;	O
struct	O
section_name_struct	struct
*	O
ptr2	pointer
;	O
if	O
(	O
order	pointer
==	O
NULL	O
)	O
order	pointer
=	O
only_load	pointer
;	O
for	O
(	O
ptr1	pointer
=	O
only_load	pointer
;	O
ptr1	pointer
;	O
ptr1	pointer
=	O
ptr1	pointer
->	O
next	pointer
)	O
for	O
(	O
ptr2	pointer
=	O
order	pointer
;	O
ptr2	pointer
;	O
ptr2	pointer
=	O
ptr2	pointer
->	O
next	pointer
)	O
if	O
(	O
strcmp	function
(	O
ptr2	pointer
->	O
name	pointer
,	O
ptr1	pointer
->	O
name	pointer
)	O
==	O
0	int
)	O
ptr2	pointer
->	O
ok_to_load	int
=	O
1	int
;	O
}	O
else	O
{	O
struct	O
section_name_struct	struct
*	O
ptr	pointer
;	O
for	O
(	O
ptr	pointer
=	O
order	pointer
;	O
ptr	pointer
;	O
ptr	pointer
=	O
ptr	pointer
->	O
next	pointer
)	O
ptr	pointer
->	O
ok_to_load	int
=	O
1	int
;	O
}	O
if	O
(	O
order	pointer
!=	O
NULL	O
)	O
{	O
struct	O
section_name_struct	struct
*	O
p	pointer
=	O
order	pointer
;	O
while	O
(	O
p	pointer
)	O
{	O
struct	O
section_name_struct	struct
*	O
aptr	pointer
;	O
etree_type	union
*	O
align	pointer
=	O
0	int
;	O
etree_type	union
*	O
subalign	pointer
=	O
0	int
;	O
struct	O
wildcard_list	struct
*	O
tmp	pointer
;	O
for	O
(	O
aptr	pointer
=	O
alignment	pointer
;	O
aptr	pointer
;	O
aptr	pointer
=	O
aptr	pointer
->	O
next	pointer
)	O
if	O
(	O
strcmp	function
(	O
aptr	pointer
->	O
name	pointer
,	O
p	pointer
->	O
name	pointer
)	O
==	O
0	int
)	O
align	pointer
=	O
aptr	pointer
->	O
align	pointer
;	O
for	O
(	O
aptr	pointer
=	O
subalignment	pointer
;	O
aptr	pointer
;	O
aptr	pointer
=	O
aptr	pointer
->	O
next	pointer
)	O
if	O
(	O
strcmp	function
(	O
aptr	pointer
->	O
name	pointer
,	O
p	pointer
->	O
name	pointer
)	O
==	O
0	int
)	O
subalign	pointer
=	O
aptr	pointer
->	O
subalign	pointer
;	O
if	O
(	O
base	int
==	O
0	int
)	O
base	int
=	O
p	pointer
->	O
vma	long
?	O
p	pointer
->	O
vma	long
:	O
exp_nameop	function
(	O
NAME	int
,	O
"."	pointer
)	O
;	O
lang_enter_output_section_statement	function
(	O
p	pointer
->	O
name	pointer
,	O
base	int
,	O
p	pointer
->	O
ok_to_load	int
?	O
normal_section	int
:	O
noload_section	int
,	O
align	pointer
,	O
subalign	pointer
,	O
NULL	O
,	O
0	int
,	O
0	int
)	O
;	O
base	int
=	O
0	int
;	O
tmp	pointer
=	O
(	O
struct	O
wildcard_list	struct
*	O
)	O
xmalloc	function
(	O
sizeof	O
*	O
tmp	pointer
)	O
;	O
tmp	pointer
->	O
next	pointer
=	O
NULL	O
;	O
tmp	pointer
->	O
spec	struct
.	O
name	pointer
=	O
p	pointer
->	O
name	pointer
;	O
tmp	pointer
->	O
spec	struct
.	O
exclude_name_list	pointer
=	O
NULL	O
;	O
tmp	pointer
->	O
spec	struct
.	O
sorted	enum
=	O
none	int
;	O
tmp	pointer
->	O
spec	struct
.	O
section_flag_list	pointer
=	O
NULL	O
;	O
lang_add_wild	function
(	O
NULL	O
,	O
tmp	pointer
,	O
FALSE	int
)	O
;	O
for	O
(	O
aptr	pointer
=	O
alias	pointer
;	O
aptr	pointer
;	O
aptr	pointer
=	O
aptr	pointer
->	O
next	pointer
)	O
if	O
(	O
strcmp	function
(	O
aptr	pointer
->	O
alias	pointer
,	O
p	pointer
->	O
name	pointer
)	O
==	O
0	int
)	O
{	O
tmp	pointer
=	O
(	O
struct	O
wildcard_list	struct
*	O
)	O
xmalloc	function
(	O
sizeof	O
*	O
tmp	pointer
)	O
;	O
tmp	pointer
->	O
next	pointer
=	O
NULL	O
;	O
tmp	pointer
->	O
spec	struct
.	O
name	pointer
=	O
aptr	pointer
->	O
name	pointer
;	O
tmp	pointer
->	O
spec	struct
.	O
exclude_name_list	pointer
=	O
NULL	O
;	O
tmp	pointer
->	O
spec	struct
.	O
sorted	enum
=	O
none	int
;	O
tmp	pointer
->	O
spec	struct
.	O
section_flag_list	pointer
=	O
NULL	O
;	O
lang_add_wild	function
(	O
NULL	O
,	O
tmp	pointer
,	O
FALSE	int
)	O
;	O
}	O
lang_leave_output_section_statement	function
(	O
0	int
,	O
"*default*"	pointer
,	O
NULL	O
,	O
NULL	O
)	O
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
;	O
}	O
}	O
done_tree	int
=	O
1	int
;	O
}	O
void	O
mri_load	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
base	int
=	O
0	int
;	O
lang_add_input_file	function
(	O
name	pointer
,	O
lang_input_file_is_file_enum	int
,	O
NULL	O
)	O
;	O
}	O
void	O
mri_order	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
mri_add_to_list	function
(	O
&	O
order	pointer
,	O
name	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
}	O
void	O
mri_alias	function
(	O
const	O
char	O
*	O
want	pointer
,	O
const	O
char	O
*	O
is	pointer
,	O
int	O
isn	int
)	O
{	O
if	O
(	O
!	O
is	pointer
)	O
{	O
char	O
buf	pointer
[	O
20	int
]	O
;	O
sprintf	function
(	O
buf	pointer
,	O
"%d"	pointer
,	O
isn	int
)	O
;	O
is	pointer
=	O
xstrdup	function
(	O
buf	pointer
)	O
;	O
if	O
(	O
is	pointer
==	O
NULL	O
)	O
abort	function
(	O
)	O
;	O
}	O
mri_add_to_list	function
(	O
&	O
alias	pointer
,	O
is	pointer
,	O
0	int
,	O
want	pointer
,	O
0	int
,	O
0	int
)	O
;	O
}	O
void	O
mri_name	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
lang_add_output	function
(	O
name	pointer
,	O
1	int
)	O
;	O
}	O
void	O
mri_format	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
"S"	pointer
)	O
==	O
0	int
)	O
lang_add_output_format	function
(	O
"srec"	pointer
,	O
NULL	O
,	O
NULL	O
,	O
1	int
)	O
;	O
else	O
einfo	pointer
(	O
_	O
(	O
"%F%P: unknown format type %s\n"	pointer
)	O
,	O
name	pointer
)	O
;	O
}	O
void	O
mri_public	function
(	O
const	O
char	O
*	O
name	pointer
,	O
etree_type	union
*	O
exp	pointer
)	O
{	O
lang_add_assignment	function
(	O
exp_assign	function
(	O
name	pointer
,	O
exp	pointer
,	O
FALSE	int
)	O
)	O
;	O
}	O
void	O
mri_align	function
(	O
const	O
char	O
*	O
name	pointer
,	O
etree_type	union
*	O
exp	pointer
)	O
{	O
mri_add_to_list	function
(	O
&	O
alignment	pointer
,	O
name	pointer
,	O
0	int
,	O
0	int
,	O
exp	pointer
,	O
0	int
)	O
;	O
}	O
void	O
mri_alignmod	function
(	O
const	O
char	O
*	O
name	pointer
,	O
etree_type	union
*	O
exp	pointer
)	O
{	O
mri_add_to_list	function
(	O
&	O
subalignment	pointer
,	O
name	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
exp	pointer
)	O
;	O
}	O
void	O
mri_truncate	function
(	O
unsigned	O
int	O
exp	pointer
)	O
{	O
symbol_truncate	int
=	O
exp	pointer
;	O
}	O
