static	O
int	O
isqualifier	function
(	O
const	O
char	O
*	O
s	pointer
,	O
size_t	long
len	int
)	O
{	O
static	O
const	O
struct	O
qual	struct
{	O
const	O
char	O
*	O
q_name	pointer
;	O
size_t	long
q_len	long
;	O
}	O
qhash	array
[	O
]	O
=	O
{	O
{	O
"static"	pointer
,	O
6	int
}	O
,	O
{	O
""	pointer
,	O
0	int
}	O
,	O
{	O
""	pointer
,	O
0	int
}	O
,	O
{	O
""	pointer
,	O
0	int
}	O
,	O
{	O
"volatile"	pointer
,	O
8	int
}	O
,	O
{	O
""	pointer
,	O
0	int
}	O
,	O
{	O
""	pointer
,	O
0	int
}	O
,	O
{	O
""	pointer
,	O
0	int
}	O
,	O
{	O
""	pointer
,	O
0	int
}	O
,	O
{	O
""	pointer
,	O
0	int
}	O
,	O
{	O
"auto"	pointer
,	O
4	int
}	O
,	O
{	O
"extern"	pointer
,	O
6	int
}	O
,	O
{	O
""	pointer
,	O
0	int
}	O
,	O
{	O
""	pointer
,	O
0	int
}	O
,	O
{	O
""	pointer
,	O
0	int
}	O
,	O
{	O
""	pointer
,	O
0	int
}	O
,	O
{	O
"const"	pointer
,	O
5	int
}	O
,	O
{	O
"register"	pointer
,	O
8	int
}	O
,	O
{	O
""	pointer
,	O
0	int
}	O
,	O
{	O
"restrict"	pointer
,	O
8	int
}	O
,	O
{	O
"_Restrict"	pointer
,	O
9	int
}	O
}	O
;	O
int	O
h	pointer
=	O
s	pointer
[	O
len	int
-	O
1	int
]	O
+	O
(	O
int	O
)	O
len	int
-	O
105	int
;	O
const	O
struct	O
qual	struct
*	O
qp	pointer
=	O
&	O
qhash	array
[	O
h	pointer
]	O
;	O
return	O
(	O
h	pointer
>=	O
0	int
&&	O
(	O
size_t	long
)	O
h	pointer
<	O
sizeof	O
(	O
qhash	array
)	O
/	O
sizeof	O
(	O
qhash	array
[	O
0	int
]	O
)	O
&&	O
(	O
size_t	long
)	O
len	int
==	O
qp	pointer
->	O
q_len	long
&&	O
strncmp	function
(	O
qp	pointer
->	O
q_name	pointer
,	O
s	pointer
,	O
qp	pointer
->	O
q_len	long
)	O
==	O
0	int
)	O
;	O
}	O
ctf_id_t	long
ctf_lookup_by_name	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
static	O
const	O
char	O
delimiters	array
[	O
]	O
=	O
" \t\n\r\v\f*"	pointer
;	O
const	O
ctf_lookup_t	struct
*	O
lp	pointer
;	O
const	O
char	O
*	O
p	pointer
,	O
*	O
q	pointer
,	O
*	O
end	pointer
;	O
ctf_id_t	long
type	long
=	O
0	int
;	O
ctf_id_t	long
ntype	long
,	O
ptype	long
;	O
if	O
(	O
name	pointer
==	O
NULL	O
)	O
return	O
(	O
ctf_set_errno	function
(	O
fp	pointer
,	O
EINVAL	int
)	O
)	O
;	O
for	O
(	O
p	pointer
=	O
name	pointer
,	O
end	pointer
=	O
name	pointer
+	O
strlen	function
(	O
name	pointer
)	O
;	O
*	O
p	pointer
!=	O
'\0'	O
;	O
p	pointer
=	O
q	pointer
)	O
{	O
while	O
(	O
isspace	function
(	O
*	O
p	pointer
)	O
)	O
p	pointer
++	O
;	O
if	O
(	O
p	pointer
==	O
end	pointer
)	O
break	O
;	O
if	O
(	O
(	O
q	pointer
=	O
strpbrk	function
(	O
p	pointer
+	O
1	int
,	O
delimiters	array
)	O
)	O
==	O
NULL	O
)	O
q	pointer
=	O
end	pointer
;	O
if	O
(	O
*	O
p	pointer
==	O
'*'	O
)	O
{	O
ntype	long
=	O
fp	pointer
->	O
ctf_ptrtab	pointer
[	O
LCTF_TYPE_TO_INDEX	O
(	O
fp	pointer
,	O
type	long
)	O
]	O
;	O
if	O
(	O
ntype	long
==	O
0	int
)	O
{	O
ntype	long
=	O
ctf_type_resolve_unsliced	function
(	O
fp	pointer
,	O
type	long
)	O
;	O
if	O
(	O
ntype	long
==	O
CTF_ERR	O
||	O
(	O
ntype	long
=	O
fp	pointer
->	O
ctf_ptrtab	pointer
[	O
LCTF_TYPE_TO_INDEX	O
(	O
fp	pointer
,	O
ntype	long
)	O
]	O
)	O
==	O
0	int
)	O
{	O
(	O
void	O
)	O
ctf_set_errno	function
(	O
fp	pointer
,	O
ECTF_NOTYPE	int
)	O
;	O
goto	O
err	long
;	O
}	O
}	O
type	long
=	O
LCTF_INDEX_TO_TYPE	O
(	O
fp	pointer
,	O
ntype	long
,	O
(	O
fp	pointer
->	O
ctf_flags	int
&	O
LCTF_CHILD	int
)	O
)	O
;	O
q	pointer
=	O
p	pointer
+	O
1	int
;	O
continue	O
;	O
}	O
if	O
(	O
isqualifier	function
(	O
p	pointer
,	O
(	O
size_t	long
)	O
(	O
q	pointer
-	O
p	pointer
)	O
)	O
)	O
continue	O
;	O
for	O
(	O
lp	pointer
=	O
fp	pointer
->	O
ctf_lookups	array
;	O
lp	pointer
->	O
ctl_prefix	pointer
!=	O
NULL	O
;	O
lp	pointer
++	O
)	O
{	O
if	O
(	O
(	O
lp	pointer
->	O
ctl_prefix	pointer
[	O
0	int
]	O
==	O
'\0'	O
||	O
strncmp	function
(	O
p	pointer
,	O
lp	pointer
->	O
ctl_prefix	pointer
,	O
(	O
size_t	long
)	O
(	O
q	pointer
-	O
p	pointer
)	O
)	O
==	O
0	int
)	O
&&	O
(	O
size_t	long
)	O
(	O
q	pointer
-	O
p	pointer
)	O
>=	O
lp	pointer
->	O
ctl_len	long
)	O
{	O
for	O
(	O
p	pointer
+=	O
lp	pointer
->	O
ctl_len	long
;	O
isspace	function
(	O
*	O
p	pointer
)	O
;	O
p	pointer
++	O
)	O
continue	O
;	O
if	O
(	O
(	O
q	pointer
=	O
strchr	function
(	O
p	pointer
,	O
'*'	O
)	O
)	O
==	O
NULL	O
)	O
q	pointer
=	O
end	pointer
;	O
while	O
(	O
isspace	function
(	O
q	pointer
[	O
-	O
1	int
]	O
)	O
)	O
q	pointer
--	O
;	O
if	O
(	O
fp	pointer
->	O
ctf_tmp_typeslicelen	long
>=	O
(	O
size_t	long
)	O
(	O
q	pointer
-	O
p	pointer
)	O
+	O
1	int
)	O
{	O
memcpy	function
(	O
fp	pointer
->	O
ctf_tmp_typeslice	pointer
,	O
p	pointer
,	O
(	O
size_t	long
)	O
(	O
q	pointer
-	O
p	pointer
)	O
)	O
;	O
fp	pointer
->	O
ctf_tmp_typeslice	pointer
[	O
(	O
size_t	long
)	O
(	O
q	pointer
-	O
p	pointer
)	O
]	O
=	O
'\0'	O
;	O
}	O
else	O
{	O
free	function
(	O
fp	pointer
->	O
ctf_tmp_typeslice	pointer
)	O
;	O
fp	pointer
->	O
ctf_tmp_typeslice	pointer
=	O
xstrndup	function
(	O
p	pointer
,	O
(	O
size_t	long
)	O
(	O
q	pointer
-	O
p	pointer
)	O
)	O
;	O
if	O
(	O
fp	pointer
->	O
ctf_tmp_typeslice	pointer
==	O
NULL	O
)	O
{	O
(	O
void	O
)	O
ctf_set_errno	function
(	O
fp	pointer
,	O
ENOMEM	int
)	O
;	O
return	O
CTF_ERR	O
;	O
}	O
}	O
if	O
(	O
(	O
type	long
=	O
ctf_lookup_by_rawhash	function
(	O
fp	pointer
,	O
lp	pointer
->	O
ctl_hash	pointer
,	O
fp	pointer
->	O
ctf_tmp_typeslice	pointer
)	O
)	O
==	O
0	int
)	O
{	O
(	O
void	O
)	O
ctf_set_errno	function
(	O
fp	pointer
,	O
ECTF_NOTYPE	int
)	O
;	O
goto	O
err	long
;	O
}	O
break	O
;	O
}	O
}	O
if	O
(	O
lp	pointer
->	O
ctl_prefix	pointer
==	O
NULL	O
)	O
{	O
(	O
void	O
)	O
ctf_set_errno	function
(	O
fp	pointer
,	O
ECTF_NOTYPE	int
)	O
;	O
goto	O
err	long
;	O
}	O
}	O
if	O
(	O
*	O
p	pointer
!=	O
'\0'	O
||	O
type	long
==	O
0	int
)	O
return	O
(	O
ctf_set_errno	function
(	O
fp	pointer
,	O
ECTF_SYNTAX	int
)	O
)	O
;	O
return	O
type	long
;	O
err	long
:	O
if	O
(	O
fp	pointer
->	O
ctf_parent	pointer
!=	O
NULL	O
&&	O
(	O
ptype	long
=	O
ctf_lookup_by_name	function
(	O
fp	pointer
->	O
ctf_parent	pointer
,	O
name	pointer
)	O
)	O
!=	O
CTF_ERR	O
)	O
return	O
ptype	long
;	O
return	O
CTF_ERR	O
;	O
}	O
typedef	O
struct	O
ctf_lookup_var_key	struct
{	O
ctf_file_t	struct
*	O
clvk_fp	pointer
;	O
const	O
char	O
*	O
clvk_name	pointer
;	O
}	O
ctf_lookup_var_key_t	struct
;	O
static	O
int	O
ctf_lookup_var	function
(	O
const	O
void	O
*	O
key_	pointer
,	O
const	O
void	O
*	O
memb_	pointer
)	O
{	O
const	O
ctf_lookup_var_key_t	struct
*	O
key	pointer
=	O
key_	pointer
;	O
const	O
ctf_varent_t	struct
*	O
memb	pointer
=	O
memb_	pointer
;	O
return	O
(	O
strcmp	function
(	O
key	pointer
->	O
clvk_name	pointer
,	O
ctf_strptr	function
(	O
key	pointer
->	O
clvk_fp	pointer
,	O
memb	pointer
->	O
ctv_name	int
)	O
)	O
)	O
;	O
}	O
ctf_id_t	long
ctf_lookup_variable	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
ctf_varent_t	struct
*	O
ent	pointer
;	O
ctf_lookup_var_key_t	struct
key	pointer
=	O
{	O
fp	pointer
,	O
name	pointer
}	O
;	O
ent	pointer
=	O
bsearch	function
(	O
&	O
key	pointer
,	O
fp	pointer
->	O
ctf_vars	pointer
,	O
fp	pointer
->	O
ctf_nvars	long
,	O
sizeof	O
(	O
ctf_varent_t	struct
)	O
,	O
ctf_lookup_var	function
)	O
;	O
if	O
(	O
ent	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
fp	pointer
->	O
ctf_parent	pointer
!=	O
NULL	O
)	O
return	O
ctf_lookup_variable	function
(	O
fp	pointer
->	O
ctf_parent	pointer
,	O
name	pointer
)	O
;	O
return	O
(	O
ctf_set_errno	function
(	O
fp	pointer
,	O
ECTF_NOTYPEDAT	int
)	O
)	O
;	O
}	O
return	O
ent	pointer
->	O
ctv_type	int
;	O
}	O
const	O
char	O
*	O
ctf_lookup_symbol_name	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
unsigned	O
long	O
symidx	long
)	O
{	O
const	O
ctf_sect_t	struct
*	O
sp	pointer
=	O
&	O
fp	pointer
->	O
ctf_symtab	struct
;	O
Elf64_Sym	struct
sym	pointer
,	O
*	O
gsp	pointer
;	O
if	O
(	O
sp	pointer
->	O
cts_data	pointer
==	O
NULL	O
)	O
{	O
ctf_set_errno	function
(	O
fp	pointer
,	O
ECTF_NOSYMTAB	int
)	O
;	O
return	O
_CTF_NULLSTR	array
;	O
}	O
if	O
(	O
symidx	long
>=	O
fp	pointer
->	O
ctf_nsyms	long
)	O
{	O
ctf_set_errno	function
(	O
fp	pointer
,	O
EINVAL	int
)	O
;	O
return	O
_CTF_NULLSTR	array
;	O
}	O
if	O
(	O
sp	pointer
->	O
cts_entsize	long
==	O
sizeof	O
(	O
Elf32_Sym	struct
)	O
)	O
{	O
const	O
Elf32_Sym	struct
*	O
symp	pointer
=	O
(	O
Elf32_Sym	struct
*	O
)	O
sp	pointer
->	O
cts_data	pointer
+	O
symidx	long
;	O
gsp	pointer
=	O
ctf_sym_to_elf64	function
(	O
symp	pointer
,	O
&	O
sym	pointer
)	O
;	O
}	O
else	O
gsp	pointer
=	O
(	O
Elf64_Sym	struct
*	O
)	O
sp	pointer
->	O
cts_data	pointer
+	O
symidx	long
;	O
if	O
(	O
gsp	pointer
->	O
st_name	pointer
<	O
fp	pointer
->	O
ctf_str	array
[	O
CTF_STRTAB_1	int
]	O
.	O
cts_len	long
)	O
return	O
(	O
const	O
char	O
*	O
)	O
fp	pointer
->	O
ctf_str	array
[	O
CTF_STRTAB_1	int
]	O
.	O
cts_strs	pointer
+	O
gsp	pointer
->	O
st_name	pointer
;	O
return	O
_CTF_NULLSTR	array
;	O
}	O
ctf_id_t	long
ctf_lookup_by_symbol	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
unsigned	O
long	O
symidx	long
)	O
{	O
const	O
ctf_sect_t	struct
*	O
sp	pointer
=	O
&	O
fp	pointer
->	O
ctf_symtab	struct
;	O
ctf_id_t	long
type	long
;	O
if	O
(	O
sp	pointer
->	O
cts_data	pointer
==	O
NULL	O
)	O
return	O
(	O
ctf_set_errno	function
(	O
fp	pointer
,	O
ECTF_NOSYMTAB	int
)	O
)	O
;	O
if	O
(	O
symidx	long
>=	O
fp	pointer
->	O
ctf_nsyms	long
)	O
return	O
(	O
ctf_set_errno	function
(	O
fp	pointer
,	O
EINVAL	int
)	O
)	O
;	O
if	O
(	O
sp	pointer
->	O
cts_entsize	long
==	O
sizeof	O
(	O
Elf32_Sym	struct
)	O
)	O
{	O
const	O
Elf32_Sym	struct
*	O
symp	pointer
=	O
(	O
Elf32_Sym	struct
*	O
)	O
sp	pointer
->	O
cts_data	pointer
+	O
symidx	long
;	O
if	O
(	O
ELF32_ST_TYPE	O
(	O
symp	pointer
->	O
st_info	array
)	O
!=	O
STT_OBJECT	int
)	O
return	O
(	O
ctf_set_errno	function
(	O
fp	pointer
,	O
ECTF_NOTDATA	int
)	O
)	O
;	O
}	O
else	O
{	O
const	O
Elf64_Sym	struct
*	O
symp	pointer
=	O
(	O
Elf64_Sym	struct
*	O
)	O
sp	pointer
->	O
cts_data	pointer
+	O
symidx	long
;	O
if	O
(	O
ELF64_ST_TYPE	O
(	O
symp	pointer
->	O
st_info	array
)	O
!=	O
STT_OBJECT	int
)	O
return	O
(	O
ctf_set_errno	function
(	O
fp	pointer
,	O
ECTF_NOTDATA	int
)	O
)	O
;	O
}	O
if	O
(	O
fp	pointer
->	O
ctf_sxlate	pointer
[	O
symidx	long
]	O
==	O
-	O
1u	int
)	O
return	O
(	O
ctf_set_errno	function
(	O
fp	pointer
,	O
ECTF_NOTYPEDAT	int
)	O
)	O
;	O
type	long
=	O
*	O
(	O
uint32_t	int
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
fp	pointer
->	O
ctf_buf	pointer
+	O
fp	pointer
->	O
ctf_sxlate	pointer
[	O
symidx	long
]	O
)	O
;	O
if	O
(	O
type	long
==	O
0	int
)	O
return	O
(	O
ctf_set_errno	function
(	O
fp	pointer
,	O
ECTF_NOTYPEDAT	int
)	O
)	O
;	O
return	O
type	long
;	O
}	O
const	O
ctf_type_t	struct
*	O
ctf_lookup_by_id	function
(	O
ctf_file_t	struct
*	O
*	O
fpp	pointer
,	O
ctf_id_t	long
type	long
)	O
{	O
ctf_file_t	struct
*	O
fp	pointer
=	O
*	O
fpp	pointer
;	O
ctf_id_t	long
idx	long
;	O
if	O
(	O
(	O
fp	pointer
->	O
ctf_flags	int
&	O
LCTF_CHILD	int
)	O
&&	O
LCTF_TYPE_ISPARENT	O
(	O
fp	pointer
,	O
type	long
)	O
&&	O
(	O
fp	pointer
=	O
fp	pointer
->	O
ctf_parent	pointer
)	O
==	O
NULL	O
)	O
{	O
(	O
void	O
)	O
ctf_set_errno	function
(	O
*	O
fpp	pointer
,	O
ECTF_NOPARENT	int
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
fp	pointer
->	O
ctf_flags	int
&	O
LCTF_RDWR	int
)	O
{	O
ctf_dtdef_t	struct
*	O
dtd	pointer
;	O
if	O
(	O
(	O
dtd	pointer
=	O
ctf_dynamic_type	function
(	O
fp	pointer
,	O
type	long
)	O
)	O
!=	O
NULL	O
)	O
{	O
*	O
fpp	pointer
=	O
fp	pointer
;	O
return	O
&	O
dtd	pointer
->	O
dtd_data	struct
;	O
}	O
(	O
void	O
)	O
ctf_set_errno	function
(	O
*	O
fpp	pointer
,	O
ECTF_BADID	int
)	O
;	O
return	O
NULL	O
;	O
}	O
idx	long
=	O
LCTF_TYPE_TO_INDEX	O
(	O
fp	pointer
,	O
type	long
)	O
;	O
if	O
(	O
idx	long
>	O
0	int
&&	O
(	O
unsigned	O
long	O
)	O
idx	long
<=	O
fp	pointer
->	O
ctf_typemax	long
)	O
{	O
*	O
fpp	pointer
=	O
fp	pointer
;	O
return	O
(	O
LCTF_INDEX_TO_TYPEPTR	O
(	O
fp	pointer
,	O
idx	long
)	O
)	O
;	O
}	O
(	O
void	O
)	O
ctf_set_errno	function
(	O
*	O
fpp	pointer
,	O
ECTF_BADID	int
)	O
;	O
return	O
NULL	O
;	O
}	O
int	O
ctf_func_info	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
unsigned	O
long	O
symidx	long
,	O
ctf_funcinfo_t	struct
*	O
fip	pointer
)	O
{	O
const	O
ctf_sect_t	struct
*	O
sp	pointer
=	O
&	O
fp	pointer
->	O
ctf_symtab	struct
;	O
const	O
uint32_t	int
*	O
dp	pointer
;	O
uint32_t	int
info	pointer
,	O
kind	int
,	O
n	int
;	O
if	O
(	O
sp	pointer
->	O
cts_data	pointer
==	O
NULL	O
)	O
return	O
(	O
ctf_set_errno	function
(	O
fp	pointer
,	O
ECTF_NOSYMTAB	int
)	O
)	O
;	O
if	O
(	O
symidx	long
>=	O
fp	pointer
->	O
ctf_nsyms	long
)	O
return	O
(	O
ctf_set_errno	function
(	O
fp	pointer
,	O
EINVAL	int
)	O
)	O
;	O
if	O
(	O
sp	pointer
->	O
cts_entsize	long
==	O
sizeof	O
(	O
Elf32_Sym	struct
)	O
)	O
{	O
const	O
Elf32_Sym	struct
*	O
symp	pointer
=	O
(	O
Elf32_Sym	struct
*	O
)	O
sp	pointer
->	O
cts_data	pointer
+	O
symidx	long
;	O
if	O
(	O
ELF32_ST_TYPE	O
(	O
symp	pointer
->	O
st_info	array
)	O
!=	O
STT_FUNC	int
)	O
return	O
(	O
ctf_set_errno	function
(	O
fp	pointer
,	O
ECTF_NOTFUNC	int
)	O
)	O
;	O
}	O
else	O
{	O
const	O
Elf64_Sym	struct
*	O
symp	pointer
=	O
(	O
Elf64_Sym	struct
*	O
)	O
sp	pointer
->	O
cts_data	pointer
+	O
symidx	long
;	O
if	O
(	O
ELF64_ST_TYPE	O
(	O
symp	pointer
->	O
st_info	array
)	O
!=	O
STT_FUNC	int
)	O
return	O
(	O
ctf_set_errno	function
(	O
fp	pointer
,	O
ECTF_NOTFUNC	int
)	O
)	O
;	O
}	O
if	O
(	O
fp	pointer
->	O
ctf_sxlate	pointer
[	O
symidx	long
]	O
==	O
-	O
1u	int
)	O
return	O
(	O
ctf_set_errno	function
(	O
fp	pointer
,	O
ECTF_NOFUNCDAT	int
)	O
)	O
;	O
dp	pointer
=	O
(	O
uint32_t	int
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
fp	pointer
->	O
ctf_buf	pointer
+	O
fp	pointer
->	O
ctf_sxlate	pointer
[	O
symidx	long
]	O
)	O
;	O
info	pointer
=	O
*	O
dp	pointer
++	O
;	O
kind	int
=	O
LCTF_INFO_KIND	O
(	O
fp	pointer
,	O
info	pointer
)	O
;	O
n	int
=	O
LCTF_INFO_VLEN	O
(	O
fp	pointer
,	O
info	pointer
)	O
;	O
if	O
(	O
kind	int
==	O
CTF_K_UNKNOWN	int
&&	O
n	int
==	O
0	int
)	O
return	O
(	O
ctf_set_errno	function
(	O
fp	pointer
,	O
ECTF_NOFUNCDAT	int
)	O
)	O
;	O
if	O
(	O
kind	int
!=	O
CTF_K_FUNCTION	int
)	O
return	O
(	O
ctf_set_errno	function
(	O
fp	pointer
,	O
ECTF_CORRUPT	int
)	O
)	O
;	O
fip	pointer
->	O
ctc_return	long
=	O
*	O
dp	pointer
++	O
;	O
fip	pointer
->	O
ctc_argc	int
=	O
n	int
;	O
fip	pointer
->	O
ctc_flags	int
=	O
0	int
;	O
if	O
(	O
n	int
!=	O
0	int
&&	O
dp	pointer
[	O
n	int
-	O
1	int
]	O
==	O
0	int
)	O
{	O
fip	pointer
->	O
ctc_flags	int
|=	O
CTF_FUNC_VARARG	int
;	O
fip	pointer
->	O
ctc_argc	int
--	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
ctf_func_args	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
unsigned	O
long	O
symidx	long
,	O
uint32_t	int
argc	int
,	O
ctf_id_t	long
*	O
argv	pointer
)	O
{	O
const	O
uint32_t	int
*	O
dp	pointer
;	O
ctf_funcinfo_t	struct
f	struct
;	O
if	O
(	O
ctf_func_info	function
(	O
fp	pointer
,	O
symidx	long
,	O
&	O
f	struct
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
dp	pointer
=	O
(	O
uint32_t	int
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
fp	pointer
->	O
ctf_buf	pointer
+	O
fp	pointer
->	O
ctf_sxlate	pointer
[	O
symidx	long
]	O
)	O
+	O
2	int
;	O
for	O
(	O
argc	int
=	O
MIN	O
(	O
argc	int
,	O
f	struct
.	O
ctc_argc	int
)	O
;	O
argc	int
!=	O
0	int
;	O
argc	int
--	O
)	O
*	O
argv	pointer
++	O
=	O
*	O
dp	pointer
++	O
;	O
return	O
0	int
;	O
}	O