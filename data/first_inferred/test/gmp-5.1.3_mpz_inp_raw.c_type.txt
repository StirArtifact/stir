size_t	long
mpz_inp_raw	O
(	O
mpz_ptr	*
x	*
,	O
FILE	struct
*	O
fp	*
)	O
{	O
unsigned	O
char	O
csize_bytes	array
[	O
4	int
]	O
;	O
mp_size_t	long
csize	long
,	O
abs_xsize	long
,	O
i	long
;	O
size_t	long
abs_csize	long
;	O
char	O
*	O
cp	*
;	O
mp_ptr	*
xp	*
,	O
sp	*
,	O
ep	*
;	O
mp_limb_t	long
slimb	long
,	O
elimb	long
;	O
if	O
(	O
fp	*
==	O
0	int
)	O
fp	*
=	O
stdin	*
;	O
if	O
(	O
fread	function
(	O
csize_bytes	*
,	O
sizeof	O
(	O
csize_bytes	int
)	O
,	O
1	int
,	O
fp	*
)	O
!=	O
1	int
)	O
return	O
0	int
;	O
csize	long
=	O
(	O
(	O
mp_size_t	long
)	O
csize_bytes	array
[	O
0	int
]	O
<<	O
24	int
)	O
+	O
(	O
(	O
mp_size_t	long
)	O
csize_bytes	array
[	O
1	int
]	O
<<	O
16	int
)	O
+	O
(	O
(	O
mp_size_t	long
)	O
csize_bytes	array
[	O
2	int
]	O
<<	O
8	int
)	O
+	O
(	O
(	O
mp_size_t	long
)	O
csize_bytes	array
[	O
3	int
]	O
)	O
;	O
if	O
(	O
sizeof	O
(	O
csize	long
)	O
>	O
4	int
&&	O
csize	long
&	O
0x80000000L	long
)	O
csize	long
-=	O
0x80000000L	int
<<	O
1	int
;	O
abs_csize	int
=	O
ABS	O
(	O
csize	long
)	O
;	O
abs_xsize	long
=	O
(	O
abs_csize	long
*	O
8	int
+	O
GMP_NUMB_BITS	O
-	O
1	int
)	O
/	O
GMP_NUMB_BITS	O
;	O
if	O
(	O
abs_xsize	long
!=	O
0	int
)	O
{	O
xp	*
=	O
MPZ_REALLOC	O
(	O
x	*
,	O
abs_xsize	long
)	O
;	O
xp	*
[	O
0	int
]	O
=	O
0	int
;	O
cp	*
=	O
(	O
char	O
*	O
)	O
(	O
xp	*
+	O
abs_xsize	long
)	O
-	O
abs_csize	int
;	O
if	O
(	O
fread	function
(	O
cp	*
,	O
abs_csize	int
,	O
1	int
,	O
fp	*
)	O
!=	O
1	int
)	O
return	O
0	int
;	O
if	O
(	O
GMP_NAIL_BITS	int
==	O
0	int
)	O
{	O
sp	*
=	O
xp	*
;	O
ep	*
=	O
xp	*
+	O
abs_xsize	long
-	O
1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
(	O
abs_xsize	long
+	O
1	int
)	O
/	O
2	int
;	O
i	long
++	O
)	O
{	O
NTOH_LIMB_FETCH	function
(	O
elimb	long
,	O
ep	*
)	O
;	O
NTOH_LIMB_FETCH	function
(	O
slimb	*
,	O
sp	*
)	O
;	O
*	O
sp	*
++	O
=	O
elimb	long
;	O
*	O
ep	*
--	O
=	O
slimb	int
;	O
}	O
}	O
else	O
{	O
mp_limb_t	long
byte	long
,	O
limb	long
;	O
int	O
bits	int
;	O
mp_size_t	long
tpos	long
;	O
mp_ptr	*
tp	*
;	O
TMP_DECL	O
;	O
TMP_MARK	O
;	O
tp	*
=	O
TMP_ALLOC_LIMBS	O
(	O
abs_xsize	long
)	O
;	O
limb	long
=	O
0	int
;	O
bits	int
=	O
0	int
;	O
tpos	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
abs_csize	int
-	O
1	int
;	O
i	long
>=	O
0	int
;	O
i	long
--	O
)	O
{	O
byte	int
=	O
(	O
unsigned	O
char	O
)	O
cp	*
[	O
i	long
]	O
;	O
limb	long
|=	O
(	O
byte	int
<<	O
bits	int
)	O
;	O
bits	long
+=	O
8	int
;	O
if	O
(	O
bits	long
>=	O
GMP_NUMB_BITS	O
)	O
{	O
ASSERT	O
(	O
tpos	long
<	O
abs_xsize	long
)	O
;	O
tp	*
[	O
tpos	long
++	O
]	O
=	O
limb	long
&	O
GMP_NUMB_MASK	O
;	O
bits	long
-=	O
GMP_NUMB_BITS	O
;	O
ASSERT	O
(	O
bits	int
<	O
8	int
)	O
;	O
limb	long
=	O
byte	long
>>	O
(	O
8	int
-	O
bits	int
)	O
;	O
}	O
}	O
if	O
(	O
bits	int
!=	O
0	int
)	O
{	O
ASSERT	O
(	O
tpos	long
<	O
abs_xsize	long
)	O
;	O
tp	*
[	O
tpos	long
++	O
]	O
=	O
limb	long
;	O
}	O
ASSERT	O
(	O
tpos	long
==	O
abs_xsize	long
)	O
;	O
MPN_COPY	O
(	O
xp	*
,	O
tp	*
,	O
abs_xsize	long
)	O
;	O
TMP_FREE	O
;	O
}	O
MPN_NORMALIZE	O
(	O
xp	*
,	O
abs_xsize	long
)	O
;	O
}	O
SIZ	O
(	O
x	*
)	O
=	O
(	O
csize	long
>=	O
0	int
?	O
abs_xsize	long
:	O
-	O
abs_xsize	long
)	O
;	O
return	O
abs_csize	int
+	O
4	int
;	O
}	O