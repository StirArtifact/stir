struct	O
_mu_linelen_filter	struct
{	O
size_t	long
max_len	long
;	O
size_t	long
cur_len	long
;	O
}	O
;	O
static	O
enum	O
mu_filter_result	enum
_ll_encoder	function
(	O
void	O
*	O
xd	pointer
,	O
enum	O
mu_filter_command	enum
cmd	enum
,	O
struct	O
mu_filter_io	struct
*	O
iobuf	pointer
)	O
{	O
struct	O
_mu_linelen_filter	struct
*	O
flt	pointer
=	O
xd	pointer
;	O
const	O
char	O
*	O
iptr	pointer
;	O
size_t	long
isize	long
;	O
char	O
*	O
optr	pointer
;	O
size_t	long
osize	long
;	O
size_t	long
consumed	long
,	O
written	long
;	O
switch	O
(	O
cmd	enum
)	O
{	O
case	O
mu_filter_init	int
:	O
flt	pointer
->	O
cur_len	int
=	O
0	int
;	O
case	O
mu_filter_done	int
:	O
return	O
mu_filter_ok	int
;	O
default	O
:	O
break	O
;	O
}	O
iptr	pointer
=	O
iobuf	pointer
->	O
input	pointer
;	O
isize	long
=	O
iobuf	pointer
->	O
isize	long
;	O
optr	pointer
=	O
iobuf	pointer
->	O
output	pointer
;	O
osize	long
=	O
iobuf	pointer
->	O
osize	long
;	O
for	O
(	O
consumed	long
=	O
written	long
=	O
0	int
;	O
consumed	long
<	O
isize	long
&&	O
written	long
<	O
osize	long
;	O
)	O
{	O
char	O
*	O
p	pointer
;	O
size_t	long
rest	long
=	O
flt	pointer
->	O
max_len	pointer
-	O
flt	pointer
->	O
cur_len	int
;	O
size_t	long
len	long
=	O
isize	long
-	O
consumed	long
;	O
if	O
(	O
len	long
>	O
rest	long
)	O
len	long
=	O
rest	long
;	O
p	pointer
=	O
memchr	function
(	O
iptr	pointer
+	O
consumed	long
,	O
'\n'	O
,	O
len	long
)	O
;	O
if	O
(	O
p	pointer
)	O
len	long
=	O
p	pointer
-	O
iptr	pointer
-	O
consumed	long
+	O
1	int
;	O
rest	long
=	O
osize	long
-	O
written	long
;	O
if	O
(	O
len	long
>	O
rest	long
)	O
{	O
len	long
=	O
rest	long
;	O
p	pointer
=	O
NULL	O
;	O
}	O
memcpy	function
(	O
optr	pointer
+	O
written	long
,	O
iptr	pointer
+	O
consumed	long
,	O
len	long
)	O
;	O
written	long
+=	O
len	long
;	O
consumed	long
+=	O
len	long
;	O
if	O
(	O
p	pointer
)	O
flt	pointer
->	O
cur_len	int
=	O
0	int
;	O
else	O
{	O
flt	pointer
->	O
cur_len	long
+=	O
len	long
;	O
if	O
(	O
flt	pointer
->	O
cur_len	int
==	O
flt	pointer
->	O
max_len	int
)	O
{	O
if	O
(	O
written	long
<	O
osize	long
)	O
optr	pointer
[	O
written	long
++	O
]	O
=	O
'\n'	O
;	O
flt	pointer
->	O
cur_len	int
=	O
0	int
;	O
}	O
}	O
}	O
iobuf	pointer
->	O
isize	long
=	O
consumed	long
;	O
iobuf	pointer
->	O
osize	long
=	O
written	long
;	O
return	O
mu_filter_ok	int
;	O
}	O
int	O
mu_linelen_filter_create	function
(	O
mu_stream_t	pointer
*	O
pstream	pointer
,	O
mu_stream_t	pointer
stream	pointer
,	O
size_t	long
limit	long
,	O
int	O
flags	int
)	O
{	O
struct	O
_mu_linelen_filter	struct
*	O
flt	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
flt	pointer
)	O
)	O
;	O
if	O
(	O
!	O
flt	pointer
)	O
return	O
ENOMEM	int
;	O
flt	pointer
->	O
max_len	pointer
=	O
limit	pointer
;	O
return	O
mu_filter_stream_create	function
(	O
pstream	pointer
,	O
stream	pointer
,	O
MU_FILTER_ENCODE	int
,	O
_ll_encoder	int
,	O
flt	pointer
,	O
flags	int
)	O
;	O
}	O
static	O
int	O
alloc_state	function
(	O
void	O
*	O
*	O
pret	pointer
,	O
int	O
mode	int
MU_ARG_UNUSED	O
,	O
int	O
argc	int
,	O
const	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
struct	O
_mu_linelen_filter	struct
*	O
flt	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
flt	pointer
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
flt	pointer
)	O
return	O
ENOMEM	int
;	O
flt	pointer
->	O
cur_len	int
=	O
0	int
;	O
flt	pointer
->	O
max_len	int
=	O
76	int
;	O
if	O
(	O
argc	int
>	O
1	int
)	O
{	O
char	O
*	O
p	pointer
;	O
flt	pointer
->	O
max_len	int
=	O
strtoul	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
{	O
free	function
(	O
flt	pointer
)	O
;	O
return	O
MU_ERR_PARSE	O
;	O
}	O
}	O
*	O
pret	pointer
=	O
flt	pointer
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
_mu_filter_record	struct
_linelen_filter	struct
=	O
{	O
"LINELEN"	pointer
,	O
alloc_state	function
,	O
_ll_encoder	function
,	O
NULL	O
,	O
}	O
;	O
mu_filter_record_t	pointer
mu_linelen_filter	pointer
=	O
&	O
_linelen_filter	struct
;	O