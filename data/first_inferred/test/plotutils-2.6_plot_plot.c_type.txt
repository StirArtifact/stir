typedef	O
enum	O
{	O
GNU_BINARY	int
,	O
GNU_PORTABLE	int
,	O
PLOT5_HIGH	int
,	O
PLOT5_LOW	int
,	O
GNU_OLD_BINARY	int
,	O
GNU_OLD_PORTABLE	int
}	O
plot_format	enum
;	O
const	O
char	O
*	O
progname	pointer
=	O
"plot"	pointer
;	O
const	O
char	O
*	O
written	pointer
=	O
"Written by Robert S. Maier."	pointer
;	O
const	O
char	O
*	O
copyright	pointer
=	O
"Copyright (C) 2009 Free Software Foundation, Inc."	pointer
;	O
const	O
char	O
*	O
usage_appendage	pointer
=	O
" [FILE]...\nWith no FILE, or when FILE is -, read standard input.\n"	pointer
;	O
bool	enum
single_page_is_requested	enum
=	O
false	int
;	O
char	O
*	O
bg_color	pointer
=	O
NULL	O
;	O
char	O
*	O
font_name	pointer
=	O
NULL	O
;	O
char	O
*	O
pen_color	pointer
=	O
NULL	O
;	O
double	O
font_size	double
=	O
-	O
1.0	int
;	O
double	O
line_width	double
=	O
-	O
1.0	int
;	O
int	O
requested_page	int
=	O
0	int
;	O
plot_format	enum
user_specified_input_format	enum
=	O
GNU_OLD_BINARY	int
;	O
plot_format	enum
input_format	enum
=	O
GNU_OLD_BINARY	int
;	O
bool	enum
merge_pages	enum
=	O
false	int
;	O
const	O
char	O
*	O
optstring	pointer
=	O
"shlAIOp:F:f:W:T:"	pointer
;	O
struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
"output-format"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'T'	O
}	O
,	O
{	O
"display-type"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'T'	O
<<	O
8	int
}	O
,	O
{	O
"font-name"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'F'	O
}	O
,	O
{	O
"font-size"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'f'	O
}	O
,	O
{	O
"line-width"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'W'	O
}	O
,	O
{	O
"bg-color"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'q'	O
<<	O
8	int
}	O
,	O
{	O
"bitmap-size"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'B'	O
<<	O
8	int
}	O
,	O
{	O
"emulate-color"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'e'	O
<<	O
8	int
}	O
,	O
{	O
"max-line-length"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'M'	O
<<	O
8	int
}	O
,	O
{	O
"merge-pages"	pointer
,	O
ARG_NONE	int
,	O
NULL	O
,	O
's'	O
}	O
,	O
{	O
"page-number"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'p'	O
}	O
,	O
{	O
"page-size"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'P'	O
<<	O
8	int
}	O
,	O
{	O
"pen-color"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'C'	O
<<	O
8	int
}	O
,	O
{	O
"rotation"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'r'	O
<<	O
8	int
}	O
,	O
{	O
"portable-output"	pointer
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'O'	O
}	O
,	O
{	O
"high-byte-first-input"	pointer
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'h'	O
}	O
,	O
{	O
"low-byte-first-input"	pointer
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'l'	O
}	O
,	O
{	O
"ascii-input"	pointer
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'A'	O
}	O
,	O
{	O
"ascii-input"	pointer
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'I'	O
}	O
,	O
{	O
"help-fonts"	pointer
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'f'	O
<<	O
8	int
}	O
,	O
{	O
"list-fonts"	pointer
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'l'	O
<<	O
8	int
}	O
,	O
{	O
"version"	pointer
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'V'	O
<<	O
8	int
}	O
,	O
{	O
"help"	pointer
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'h'	O
<<	O
8	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
const	O
int	O
hidden_options	array
[	O
]	O
=	O
{	O
(	O
int	O
)	O
'I'	O
,	O
(	O
int	O
)	O
(	O
'T'	O
<<	O
8	int
)	O
,	O
0	int
}	O
;	O
bool	enum
read_plot	function
(	O
plPlotter	struct
*	O
plotter	pointer
,	O
FILE	struct
*	O
in_stream	pointer
)	O
;	O
char	O
*	O
read_string	function
(	O
FILE	struct
*	O
input	pointer
,	O
bool	enum
*	O
badstatus	pointer
)	O
;	O
double	O
read_float	function
(	O
FILE	struct
*	O
input	pointer
,	O
bool	enum
*	O
badstatus	pointer
)	O
;	O
double	O
read_int	function
(	O
FILE	struct
*	O
input	pointer
,	O
bool	enum
*	O
badstatus	pointer
)	O
;	O
int	O
maybe_closepl	function
(	O
plPlotter	struct
*	O
plotter	pointer
)	O
;	O
int	O
maybe_openpl	function
(	O
plPlotter	struct
*	O
plotter	pointer
)	O
;	O
int	O
read_true_int	function
(	O
FILE	struct
*	O
input	pointer
,	O
bool	enum
*	O
badstatus	pointer
)	O
;	O
unsigned	O
char	O
read_byte_as_unsigned_char	function
(	O
FILE	struct
*	O
input	pointer
,	O
bool	enum
*	O
badstatus	pointer
)	O
;	O
unsigned	O
int	O
read_byte_as_unsigned_int	function
(	O
FILE	struct
*	O
input	pointer
,	O
bool	enum
*	O
badstatus	pointer
)	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	pointer
[	O
]	O
)	O
{	O
plPlotter	struct
*	O
plotter	pointer
;	O
plPlotterParams	struct
*	O
plotter_params	pointer
;	O
bool	enum
do_list_fonts	enum
=	O
false	int
;	O
bool	enum
show_fonts	enum
=	O
false	int
;	O
bool	enum
show_usage	enum
=	O
false	int
;	O
bool	enum
show_version	enum
=	O
false	int
;	O
char	O
*	O
output_format	pointer
=	O
(	O
char	O
*	O
)	O
"meta"	pointer
;	O
int	O
errcnt	int
=	O
0	int
;	O
int	O
local_page_number	int
;	O
int	O
opt_index	int
;	O
int	O
option	struct
;	O
int	O
retval	int
;	O
plotter_params	pointer
=	O
pl_newplparams	function
(	O
)	O
;	O
while	O
(	O
(	O
option	struct
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
optstring	pointer
,	O
long_options	array
,	O
&	O
opt_index	int
)	O
)	O
!=	O
EOF	O
)	O
{	O
if	O
(	O
option	struct
==	O
0	int
)	O
option	struct
=	O
long_options	array
[	O
opt_index	int
]	O
.	O
val	int
;	O
switch	O
(	O
option	struct
)	O
{	O
case	O
'T'	O
:	O
case	O
'T'	O
<<	O
8	int
:	O
output_format	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
optarg	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
output_format	pointer
,	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'O'	O
:	O
pl_setplparam	function
(	O
plotter_params	pointer
,	O
"META_PORTABLE"	pointer
,	O
(	O
void	O
*	O
)	O
"yes"	pointer
)	O
;	O
break	O
;	O
case	O
'F'	O
:	O
font_name	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
optarg	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
font_name	pointer
,	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'e'	O
<<	O
8	int
:	O
pl_setplparam	function
(	O
plotter_params	pointer
,	O
"EMULATE_COLOR"	pointer
,	O
(	O
void	O
*	O
)	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'C'	O
<<	O
8	int
:	O
pen_color	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
optarg	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
pen_color	pointer
,	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'q'	O
<<	O
8	int
:	O
bg_color	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
optarg	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
bg_color	pointer
,	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'B'	O
<<	O
8	int
:	O
pl_setplparam	function
(	O
plotter_params	pointer
,	O
"BITMAPSIZE"	pointer
,	O
(	O
void	O
*	O
)	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'P'	O
<<	O
8	int
:	O
pl_setplparam	function
(	O
plotter_params	pointer
,	O
"PAGESIZE"	pointer
,	O
(	O
void	O
*	O
)	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'f'	O
:	O
{	O
double	O
local_font_size	double
;	O
if	O
(	O
sscanf	function
(	O
optarg	pointer
,	O
"%lf"	pointer
,	O
&	O
local_font_size	double
)	O
<=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: the initial font size `%s' is bad (it should be a number)\n"	pointer
,	O
progname	pointer
,	O
optarg	pointer
)	O
;	O
errcnt	int
++	O
;	O
break	O
;	O
}	O
if	O
(	O
local_font_size	double
>	O
1.0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: the too-large initial font size `%f' is disregarded (it should be less than 1.0)\n"	pointer
,	O
progname	pointer
,	O
local_font_size	double
)	O
;	O
else	O
if	O
(	O
local_font_size	double
<	O
0.0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: the negative initial font size `%f' is disregarded\n"	pointer
,	O
progname	pointer
,	O
local_font_size	double
)	O
;	O
else	O
font_size	double
=	O
local_font_size	double
;	O
break	O
;	O
}	O
case	O
'p'	O
:	O
if	O
(	O
sscanf	function
(	O
optarg	pointer
,	O
"%d"	pointer
,	O
&	O
local_page_number	int
)	O
<=	O
0	int
||	O
local_page_number	int
<	O
1	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: the page number `%s' is bad (it should be a positive integer)\n"	pointer
,	O
progname	pointer
,	O
optarg	pointer
)	O
;	O
errcnt	int
++	O
;	O
}	O
else	O
{	O
requested_page	int
=	O
local_page_number	int
;	O
single_page_is_requested	enum
=	O
true	int
;	O
}	O
break	O
;	O
case	O
'W'	O
:	O
{	O
double	O
local_line_width	double
;	O
if	O
(	O
sscanf	function
(	O
optarg	pointer
,	O
"%lf"	pointer
,	O
&	O
local_line_width	double
)	O
<=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: the initial line thickness `%s' is bad (it should be a number)\n"	pointer
,	O
progname	pointer
,	O
optarg	pointer
)	O
;	O
errcnt	int
++	O
;	O
break	O
;	O
}	O
if	O
(	O
local_line_width	double
<	O
0.0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: the negative initial line thickness `%f' is ignored\n"	pointer
,	O
progname	pointer
,	O
local_line_width	double
)	O
;	O
else	O
line_width	double
=	O
local_line_width	double
;	O
break	O
;	O
}	O
case	O
'h'	O
:	O
user_specified_input_format	enum
=	O
PLOT5_HIGH	int
;	O
break	O
;	O
case	O
'l'	O
:	O
user_specified_input_format	enum
=	O
PLOT5_LOW	int
;	O
break	O
;	O
case	O
'A'	O
:	O
case	O
'I'	O
:	O
user_specified_input_format	enum
=	O
GNU_OLD_PORTABLE	int
;	O
break	O
;	O
case	O
'r'	O
<<	O
8	int
:	O
pl_setplparam	function
(	O
plotter_params	pointer
,	O
"ROTATION"	pointer
,	O
(	O
void	O
*	O
)	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'M'	O
<<	O
8	int
:	O
pl_setplparam	function
(	O
plotter_params	pointer
,	O
"MAX_LINE_LENGTH"	pointer
,	O
(	O
void	O
*	O
)	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
's'	O
:	O
merge_pages	enum
=	O
true	int
;	O
break	O
;	O
case	O
'V'	O
<<	O
8	int
:	O
show_version	enum
=	O
true	int
;	O
break	O
;	O
case	O
'f'	O
<<	O
8	int
:	O
show_fonts	enum
=	O
true	int
;	O
break	O
;	O
case	O
'h'	O
<<	O
8	int
:	O
show_usage	enum
=	O
true	int
;	O
break	O
;	O
case	O
'l'	O
<<	O
8	int
:	O
do_list_fonts	enum
=	O
true	int
;	O
break	O
;	O
default	O
:	O
errcnt	int
++	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
errcnt	int
>	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Try `%s --help' for more information\n"	pointer
,	O
progname	pointer
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
if	O
(	O
show_version	enum
)	O
{	O
display_version	function
(	O
progname	pointer
,	O
written	pointer
,	O
copyright	pointer
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
if	O
(	O
do_list_fonts	enum
)	O
{	O
int	O
success	int
;	O
success	int
=	O
list_fonts	function
(	O
output_format	pointer
,	O
progname	pointer
)	O
;	O
if	O
(	O
success	int
)	O
return	O
EXIT_SUCCESS	int
;	O
else	O
return	O
EXIT_FAILURE	int
;	O
}	O
if	O
(	O
show_fonts	enum
)	O
{	O
int	O
success	int
;	O
success	int
=	O
display_fonts	function
(	O
output_format	pointer
,	O
progname	pointer
)	O
;	O
if	O
(	O
success	int
)	O
return	O
EXIT_SUCCESS	int
;	O
else	O
return	O
EXIT_FAILURE	int
;	O
}	O
if	O
(	O
show_usage	enum
)	O
{	O
display_usage	function
(	O
progname	pointer
,	O
hidden_options	array
,	O
usage_appendage	pointer
,	O
2	int
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
if	O
(	O
bg_color	pointer
)	O
pl_setplparam	function
(	O
plotter_params	pointer
,	O
"BG_COLOR"	pointer
,	O
(	O
void	O
*	O
)	O
bg_color	pointer
)	O
;	O
if	O
(	O
(	O
plotter	pointer
=	O
pl_newpl_r	function
(	O
output_format	pointer
,	O
NULL	O
,	O
stdout	pointer
,	O
stderr	pointer
,	O
plotter_params	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: the plot device could not be created\n"	pointer
,	O
progname	pointer
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
if	O
(	O
merge_pages	enum
)	O
if	O
(	O
pl_openpl_r	function
(	O
plotter	pointer
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: the plot device could not be opened\n"	pointer
,	O
progname	pointer
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
retval	int
=	O
EXIT_SUCCESS	int
;	O
if	O
(	O
optind	int
<	O
argc	int
)	O
{	O
for	O
(	O
;	O
optind	int
<	O
argc	int
;	O
optind	int
++	O
)	O
{	O
FILE	struct
*	O
data_file	pointer
;	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
optind	int
]	O
,	O
"-"	pointer
)	O
==	O
0	int
)	O
data_file	pointer
=	O
stdin	pointer
;	O
else	O
{	O
data_file	pointer
=	O
fopen	function
(	O
argv	pointer
[	O
optind	int
]	O
,	O
"r"	pointer
)	O
;	O
if	O
(	O
data_file	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s: %s\n"	pointer
,	O
progname	pointer
,	O
argv	pointer
[	O
optind	int
]	O
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: ignoring this file\n"	pointer
,	O
progname	pointer
)	O
;	O
errno	O
=	O
0	int
;	O
retval	int
=	O
EXIT_FAILURE	int
;	O
continue	O
;	O
}	O
}	O
if	O
(	O
read_plot	function
(	O
plotter	pointer
,	O
data_file	pointer
)	O
==	O
false	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: the input file `%s' could not be parsed\n"	pointer
,	O
progname	pointer
,	O
argv	pointer
[	O
optind	int
]	O
)	O
;	O
retval	int
=	O
EXIT_FAILURE	int
;	O
break	O
;	O
}	O
if	O
(	O
data_file	pointer
!=	O
stdin	pointer
)	O
if	O
(	O
fclose	function
(	O
data_file	pointer
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: the input file `%s' could not be closed\n"	pointer
,	O
progname	pointer
,	O
argv	pointer
[	O
optind	int
]	O
)	O
;	O
retval	int
=	O
EXIT_FAILURE	int
;	O
continue	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
read_plot	function
(	O
plotter	pointer
,	O
stdin	pointer
)	O
==	O
false	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: the input could not be parsed\n"	pointer
,	O
progname	pointer
)	O
;	O
retval	int
=	O
EXIT_FAILURE	int
;	O
}	O
}	O
if	O
(	O
merge_pages	enum
)	O
if	O
(	O
pl_closepl_r	function
(	O
plotter	pointer
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: the plot device could not be closed\n"	pointer
,	O
progname	pointer
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
if	O
(	O
pl_deletepl_r	function
(	O
plotter	pointer
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: the plot device could not be deleted\n"	pointer
,	O
progname	pointer
)	O
;	O
retval	int
=	O
EXIT_FAILURE	int
;	O
}	O
pl_deleteplparams	function
(	O
plotter_params	pointer
)	O
;	O
return	O
retval	int
;	O
}	O
bool	enum
read_plot	function
(	O
plPlotter	struct
*	O
plotter	pointer
,	O
FILE	struct
*	O
in_stream	pointer
)	O
{	O
bool	enum
argerr	enum
=	O
false	int
;	O
bool	enum
display_open	enum
=	O
false	int
;	O
bool	enum
first_command	enum
=	O
true	int
;	O
bool	enum
in_page	enum
=	O
false	int
;	O
bool	enum
parameters_initted	enum
=	O
false	int
;	O
bool	enum
unrec	enum
=	O
false	int
;	O
char	O
*	O
s	pointer
;	O
double	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
,	O
x2	int
,	O
y2	int
,	O
x3	int
,	O
y3	int
;	O
int	O
i0	int
,	O
i1	int
,	O
i2	int
;	O
int	O
instruction	int
;	O
static	O
int	O
current_page	int
=	O
1	int
;	O
input_format	enum
=	O
user_specified_input_format	enum
;	O
instruction	int
=	O
getc	function
(	O
in_stream	pointer
)	O
;	O
if	O
(	O
input_format	enum
==	O
GNU_OLD_BINARY	int
&&	O
instruction	int
==	O
(	O
int	O
)	O
O_COMMENT	int
)	O
input_format	enum
=	O
GNU_BINARY	int
;	O
while	O
(	O
instruction	int
!=	O
EOF	O
)	O
{	O
if	O
(	O
input_format	enum
!=	O
GNU_BINARY	int
&&	O
input_format	enum
!=	O
GNU_PORTABLE	int
)	O
if	O
(	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
&&	O
instruction	int
!=	O
(	O
int	O
)	O
O_COMMENT	int
&&	O
display_open	enum
==	O
false	int
)	O
{	O
if	O
(	O
maybe_openpl	function
(	O
plotter	pointer
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: the plot device could not be opened\n"	pointer
,	O
progname	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
else	O
display_open	enum
=	O
true	int
;	O
}	O
switch	O
(	O
instruction	int
)	O
{	O
case	O
(	O
int	O
)	O
O_ALABEL	int
:	O
{	O
char	O
x_adjust	char
,	O
y_adjust	char
;	O
x_adjust	char
=	O
(	O
char	O
)	O
read_byte_as_unsigned_char	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y_adjust	char
=	O
(	O
char	O
)	O
read_byte_as_unsigned_char	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
s	pointer
=	O
read_string	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
{	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_alabel_r	function
(	O
plotter	pointer
,	O
x_adjust	char
,	O
y_adjust	char
,	O
s	pointer
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
}	O
}	O
break	O
;	O
case	O
(	O
int	O
)	O
O_ARC	int
:	O
x0	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x2	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y2	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_farc_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
,	O
x2	int
,	O
y2	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_ARCREL	int
:	O
x0	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x2	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y2	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_farcrel_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
,	O
x2	int
,	O
y2	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_BEZIER2	int
:	O
x0	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x2	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y2	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fbezier2_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
,	O
x2	int
,	O
y2	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_BEZIER2REL	int
:	O
x0	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x2	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y2	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fbezier2rel_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
,	O
x2	int
,	O
y2	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_BEZIER3	int
:	O
x0	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x2	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y2	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x3	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y3	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fbezier3_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
,	O
x2	int
,	O
y2	int
,	O
x3	int
,	O
y3	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_BEZIER3REL	int
:	O
x0	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x2	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y2	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x3	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y3	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fbezier3rel_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
,	O
x2	int
,	O
y2	int
,	O
x3	int
,	O
y3	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_BGCOLOR	int
:	O
i0	int
=	O
read_true_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
&	O
0xFFFF	int
;	O
i1	int
=	O
read_true_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
&	O
0xFFFF	int
;	O
i2	int
=	O
read_true_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
&	O
0xFFFF	int
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_bgcolor_r	function
(	O
plotter	pointer
,	O
i0	int
,	O
i1	int
,	O
i2	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_BOX	int
:	O
x0	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fbox_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_BOXREL	int
:	O
x0	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fboxrel_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_CAPMOD	int
:	O
s	pointer
=	O
read_string	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
{	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_capmod_r	function
(	O
plotter	pointer
,	O
s	pointer
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
}	O
break	O
;	O
case	O
(	O
int	O
)	O
O_CIRCLE	int
:	O
x0	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fcircle_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_CIRCLEREL	int
:	O
x0	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fcirclerel_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_COLOR	char
:	O
i0	int
=	O
read_true_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
&	O
0xFFFF	int
;	O
i1	int
=	O
read_true_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
&	O
0xFFFF	int
;	O
i2	int
=	O
read_true_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
&	O
0xFFFF	int
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_color_r	function
(	O
plotter	pointer
,	O
i0	int
,	O
i1	int
,	O
i2	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_CLOSEPATH	int
:	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_closepath_r	function
(	O
plotter	pointer
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_CLOSEPL	int
:	O
if	O
(	O
input_format	enum
!=	O
GNU_BINARY	int
&&	O
input_format	enum
!=	O
GNU_PORTABLE	int
)	O
{	O
if	O
(	O
display_open	enum
&&	O
maybe_closepl	function
(	O
plotter	pointer
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: the plot device could not be closed\n"	pointer
,	O
progname	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
current_page	int
++	O
;	O
return	O
false	int
;	O
}	O
else	O
{	O
if	O
(	O
in_page	enum
==	O
false	int
)	O
{	O
current_page	int
++	O
;	O
return	O
false	int
;	O
}	O
else	O
{	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
{	O
if	O
(	O
maybe_closepl	function
(	O
plotter	pointer
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: the plot device could not be closed\n"	pointer
,	O
progname	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
display_open	enum
=	O
false	int
;	O
}	O
in_page	enum
=	O
false	int
;	O
current_page	int
++	O
;	O
}	O
}	O
break	O
;	O
case	O
(	O
int	O
)	O
O_COMMENT	int
:	O
s	pointer
=	O
read_string	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
{	O
if	O
(	O
first_command	enum
&&	O
input_format	enum
!=	O
PLOT5_HIGH	int
&&	O
input_format	enum
!=	O
PLOT5_LOW	int
&&	O
(	O
strlen	function
(	O
s	pointer
)	O
>=	O
6	int
)	O
&&	O
strncmp	function
(	O
s	pointer
,	O
"PLOT "	pointer
,	O
5	int
)	O
==	O
0	int
)	O
switch	O
(	O
s	pointer
[	O
5	int
]	O
)	O
{	O
case	O
'1'	O
:	O
input_format	enum
=	O
GNU_BINARY	int
;	O
break	O
;	O
case	O
'2'	O
:	O
input_format	enum
=	O
GNU_PORTABLE	int
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: the input file is of an unrecognized metafile type\n"	pointer
,	O
progname	pointer
)	O
;	O
break	O
;	O
}	O
free	function
(	O
s	pointer
)	O
;	O
}	O
break	O
;	O
case	O
(	O
int	O
)	O
O_CONT	int
:	O
x0	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fcont_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_CONTREL	int
:	O
x0	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fcontrel_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_ELLARC	int
:	O
x0	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x2	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y2	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fellarc_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
,	O
x2	int
,	O
y2	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_ELLARCREL	int
:	O
x0	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x2	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y2	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fellarcrel_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
,	O
x2	int
,	O
y2	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_ELLIPSE	int
:	O
x0	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x2	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fellipse_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
,	O
x2	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_ELLIPSEREL	int
:	O
x0	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x2	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fellipserel_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
,	O
x2	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_ENDPATH	int
:	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_endpath_r	function
(	O
plotter	pointer
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_ENDSUBPATH	int
:	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_endsubpath_r	function
(	O
plotter	pointer
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_ERASE	int
:	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
if	O
(	O
merge_pages	enum
==	O
false	int
)	O
pl_erase_r	function
(	O
plotter	pointer
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FILLCOLOR	int
:	O
i0	int
=	O
read_true_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
&	O
0xFFFF	int
;	O
i1	int
=	O
read_true_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
&	O
0xFFFF	int
;	O
i2	int
=	O
read_true_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
&	O
0xFFFF	int
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fillcolor_r	function
(	O
plotter	pointer
,	O
i0	int
,	O
i1	int
,	O
i2	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FILLMOD	int
:	O
s	pointer
=	O
read_string	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
{	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fillmod_r	function
(	O
plotter	pointer
,	O
s	pointer
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
}	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FILLTYPE	int
:	O
i0	int
=	O
read_true_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
&	O
0xFFFF	int
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_filltype_r	function
(	O
plotter	pointer
,	O
i0	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FONTNAME	int
:	O
s	pointer
=	O
read_string	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
{	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fontname_r	function
(	O
plotter	pointer
,	O
s	pointer
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
}	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FONTSIZE	int
:	O
x0	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
input_format	enum
==	O
GNU_BINARY	int
||	O
input_format	enum
==	O
GNU_PORTABLE	int
)	O
{	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_ffontsize_r	function
(	O
plotter	pointer
,	O
x0	int
)	O
;	O
}	O
break	O
;	O
case	O
(	O
int	O
)	O
O_JOINMOD	int
:	O
s	pointer
=	O
read_string	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
{	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_joinmod_r	function
(	O
plotter	pointer
,	O
s	pointer
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
}	O
break	O
;	O
case	O
(	O
int	O
)	O
O_LABEL	int
:	O
s	pointer
=	O
read_string	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
{	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_label_r	function
(	O
plotter	pointer
,	O
s	pointer
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
}	O
break	O
;	O
case	O
(	O
int	O
)	O
O_LINE	int
:	O
x0	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fline_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_LINEDASH	int
:	O
{	O
int	O
n	int
,	O
i	int
;	O
double	O
*	O
dash_array	pointer
,	O
phase	double
;	O
n	int
=	O
read_true_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
n	int
>	O
0	int
)	O
dash_array	pointer
=	O
(	O
double	O
*	O
)	O
xmalloc	function
(	O
(	O
unsigned	O
int	O
)	O
n	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
else	O
dash_array	pointer
=	O
NULL	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
dash_array	pointer
[	O
i	int
]	O
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
phase	double
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_flinedash_r	function
(	O
plotter	pointer
,	O
n	int
,	O
dash_array	pointer
,	O
phase	double
)	O
;	O
free	function
(	O
dash_array	pointer
)	O
;	O
break	O
;	O
}	O
case	O
(	O
int	O
)	O
O_LINEREL	int
:	O
x0	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_flinerel_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_LINEMOD	int
:	O
s	pointer
=	O
read_string	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
{	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_linemod_r	function
(	O
plotter	pointer
,	O
s	pointer
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
}	O
break	O
;	O
case	O
(	O
int	O
)	O
O_LINEWIDTH	int
:	O
x0	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_flinewidth_r	function
(	O
plotter	pointer
,	O
x0	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_MARKER	int
:	O
x0	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
i0	int
=	O
read_true_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fmarker_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
i0	int
,	O
y1	function
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_MARKERREL	int
:	O
x0	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
i0	int
=	O
read_true_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fmarkerrel_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
i0	int
,	O
y1	function
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_MOVE	int
:	O
x0	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fmove_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_MOVEREL	int
:	O
x0	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fmoverel_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_OPENPL	int
:	O
if	O
(	O
input_format	enum
!=	O
GNU_BINARY	int
&&	O
input_format	enum
!=	O
GNU_PORTABLE	int
)	O
{	O
if	O
(	O
display_open	enum
&&	O
maybe_closepl	function
(	O
plotter	pointer
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: the plot device could not be closed\n"	pointer
,	O
progname	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
current_page	int
++	O
;	O
return	O
false	int
;	O
}	O
else	O
{	O
if	O
(	O
in_page	enum
)	O
{	O
if	O
(	O
display_open	enum
&&	O
maybe_closepl	function
(	O
plotter	pointer
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: the plot device could not be closed\n"	pointer
,	O
progname	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
current_page	int
++	O
;	O
return	O
false	int
;	O
}	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
{	O
if	O
(	O
maybe_openpl	function
(	O
plotter	pointer
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: the plot device could not be opened\n"	pointer
,	O
progname	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
else	O
display_open	enum
=	O
true	int
;	O
}	O
in_page	enum
=	O
true	int
;	O
}	O
break	O
;	O
case	O
(	O
int	O
)	O
O_ORIENTATION	int
:	O
i0	int
=	O
read_true_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_orientation_r	function
(	O
plotter	pointer
,	O
i0	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_PENCOLOR	int
:	O
i0	int
=	O
read_true_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
&	O
0xFFFF	int
;	O
i1	int
=	O
read_true_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
&	O
0xFFFF	int
;	O
i2	int
=	O
read_true_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
&	O
0xFFFF	int
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_pencolor_r	function
(	O
plotter	pointer
,	O
i0	int
,	O
i1	int
,	O
i2	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_PENTYPE	int
:	O
i0	int
=	O
read_true_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
&	O
0xFFFF	int
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_pentype_r	function
(	O
plotter	pointer
,	O
i0	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_POINT	int
:	O
x0	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fpoint_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_POINTREL	int
:	O
x0	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fpointrel_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_RESTORESTATE	int
:	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_restorestate_r	function
(	O
plotter	pointer
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_SAVESTATE	int
:	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_savestate_r	function
(	O
plotter	pointer
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_SPACE	int
:	O
x0	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
argerr	enum
)	O
break	O
;	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fspace_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
)	O
;	O
if	O
(	O
parameters_initted	enum
==	O
false	int
&&	O
(	O
(	O
!	O
single_page_is_requested	enum
&&	O
current_page	int
==	O
1	int
)	O
||	O
(	O
single_page_is_requested	enum
&&	O
current_page	int
==	O
requested_page	int
)	O
)	O
)	O
{	O
if	O
(	O
pen_color	pointer
)	O
pl_pencolorname_r	function
(	O
plotter	pointer
,	O
pen_color	pointer
)	O
;	O
if	O
(	O
font_name	pointer
)	O
pl_fontname_r	function
(	O
plotter	pointer
,	O
font_name	pointer
)	O
;	O
if	O
(	O
font_size	double
>=	O
0.0	int
)	O
pl_ffontsize_r	function
(	O
plotter	pointer
,	O
font_size	double
*	O
fabs	function
(	O
x1	int
-	O
x0	int
)	O
)	O
;	O
if	O
(	O
line_width	double
>=	O
0.0	int
)	O
pl_flinewidth_r	function
(	O
plotter	pointer
,	O
line_width	double
*	O
fabs	function
(	O
x1	int
-	O
x0	int
)	O
)	O
;	O
parameters_initted	enum
=	O
true	int
;	O
}	O
break	O
;	O
case	O
(	O
int	O
)	O
O_SPACE2	int
:	O
x0	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x2	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y2	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
argerr	enum
)	O
break	O
;	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fspace2_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
,	O
x2	int
,	O
y2	int
)	O
;	O
if	O
(	O
parameters_initted	enum
==	O
false	int
&&	O
(	O
(	O
!	O
single_page_is_requested	enum
&&	O
current_page	int
==	O
1	int
)	O
||	O
(	O
single_page_is_requested	enum
&&	O
current_page	int
==	O
requested_page	int
)	O
)	O
)	O
{	O
if	O
(	O
bg_color	pointer
)	O
{	O
pl_bgcolorname_r	function
(	O
plotter	pointer
,	O
bg_color	pointer
)	O
;	O
pl_erase_r	function
(	O
plotter	pointer
)	O
;	O
}	O
if	O
(	O
pen_color	pointer
)	O
pl_pencolorname_r	function
(	O
plotter	pointer
,	O
pen_color	pointer
)	O
;	O
if	O
(	O
font_name	pointer
)	O
pl_fontname_r	function
(	O
plotter	pointer
,	O
font_name	pointer
)	O
;	O
if	O
(	O
font_size	double
>=	O
0.0	int
)	O
pl_ffontsize_r	function
(	O
plotter	pointer
,	O
font_size	double
*	O
fabs	function
(	O
x1	int
-	O
x0	int
)	O
)	O
;	O
if	O
(	O
line_width	double
>=	O
0.0	int
)	O
pl_flinewidth_r	function
(	O
plotter	pointer
,	O
line_width	double
*	O
fabs	function
(	O
x1	int
-	O
x0	int
)	O
)	O
;	O
parameters_initted	enum
=	O
true	int
;	O
}	O
break	O
;	O
case	O
(	O
int	O
)	O
O_TEXTANGLE	int
:	O
x0	int
=	O
read_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_ftextangle_r	function
(	O
plotter	pointer
,	O
x0	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FARC	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x2	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y2	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_farc_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
,	O
x2	int
,	O
y2	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FARCREL	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x2	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y2	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_farcrel_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
,	O
x2	int
,	O
y2	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FBEZIER2	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x2	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y2	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fbezier2_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
,	O
x2	int
,	O
y2	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FBEZIER2REL	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x2	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y2	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fbezier2rel_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
,	O
x2	int
,	O
y2	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FBEZIER3	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x2	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y2	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x3	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y3	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fbezier3_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
,	O
x2	int
,	O
y2	int
,	O
x3	int
,	O
y3	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FBEZIER3REL	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x2	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y2	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x3	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y3	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fbezier3rel_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
,	O
x2	int
,	O
y2	int
,	O
x3	int
,	O
y3	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FBOX	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fbox_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FBOXREL	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fboxrel_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FCIRCLE	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fcircle_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FCIRCLEREL	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fcirclerel_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FCONT	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fcont_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FCONTREL	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fcontrel_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FELLARC	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x2	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y2	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fellarc_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
,	O
x2	int
,	O
y2	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FELLARCREL	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x2	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y2	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fellarcrel_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
,	O
x2	int
,	O
y2	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FELLIPSE	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x2	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fellipse_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
,	O
x2	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FELLIPSEREL	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x2	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fellipserel_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
,	O
x2	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FFONTSIZE	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
input_format	enum
==	O
GNU_BINARY	int
||	O
input_format	enum
==	O
GNU_PORTABLE	int
)	O
{	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_ffontsize_r	function
(	O
plotter	pointer
,	O
x0	int
)	O
;	O
}	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FLINE	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fline_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FLINEDASH	int
:	O
{	O
int	O
n	int
,	O
i	int
;	O
double	O
*	O
dash_array	pointer
,	O
phase	double
;	O
n	int
=	O
read_true_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
n	int
>	O
0	int
)	O
dash_array	pointer
=	O
(	O
double	O
*	O
)	O
xmalloc	function
(	O
(	O
unsigned	O
int	O
)	O
n	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
else	O
dash_array	pointer
=	O
NULL	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
dash_array	pointer
[	O
i	int
]	O
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
phase	double
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_flinedash_r	function
(	O
plotter	pointer
,	O
n	int
,	O
dash_array	pointer
,	O
phase	double
)	O
;	O
free	function
(	O
dash_array	pointer
)	O
;	O
break	O
;	O
}	O
case	O
(	O
int	O
)	O
O_FLINEREL	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_flinerel_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FLINEWIDTH	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_flinewidth_r	function
(	O
plotter	pointer
,	O
x0	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FMARKER	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
i0	int
=	O
read_true_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fmarker_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
i0	int
,	O
y1	function
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FMARKERREL	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
i0	int
=	O
read_true_int	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fmarkerrel_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
i0	int
,	O
y1	function
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FMOVE	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fmove_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FMOVEREL	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fmoverel_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FPOINT	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fpoint_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FPOINTREL	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fpointrel_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FSPACE	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
argerr	enum
)	O
break	O
;	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fspace_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
)	O
;	O
if	O
(	O
parameters_initted	enum
==	O
false	int
&&	O
(	O
(	O
!	O
single_page_is_requested	enum
&&	O
current_page	int
==	O
1	int
)	O
||	O
(	O
single_page_is_requested	enum
&&	O
current_page	int
==	O
requested_page	int
)	O
)	O
)	O
{	O
if	O
(	O
bg_color	pointer
)	O
{	O
pl_bgcolorname_r	function
(	O
plotter	pointer
,	O
bg_color	pointer
)	O
;	O
pl_erase_r	function
(	O
plotter	pointer
)	O
;	O
}	O
if	O
(	O
pen_color	pointer
)	O
pl_pencolorname_r	function
(	O
plotter	pointer
,	O
pen_color	pointer
)	O
;	O
if	O
(	O
font_name	pointer
)	O
pl_fontname_r	function
(	O
plotter	pointer
,	O
font_name	pointer
)	O
;	O
if	O
(	O
font_size	double
>=	O
0.0	int
)	O
pl_ffontsize_r	function
(	O
plotter	pointer
,	O
font_size	double
*	O
fabs	function
(	O
x1	int
-	O
x0	int
)	O
)	O
;	O
if	O
(	O
line_width	double
>=	O
0.0	int
)	O
pl_flinewidth_r	function
(	O
plotter	pointer
,	O
line_width	double
*	O
fabs	function
(	O
x1	int
-	O
x0	int
)	O
)	O
;	O
parameters_initted	enum
=	O
true	int
;	O
}	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FSPACE2	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x2	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y2	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
argerr	enum
)	O
break	O
;	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fspace2_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
,	O
x2	int
,	O
y2	int
)	O
;	O
if	O
(	O
parameters_initted	enum
==	O
false	int
&&	O
(	O
(	O
!	O
single_page_is_requested	enum
&&	O
current_page	int
==	O
1	int
)	O
||	O
(	O
single_page_is_requested	enum
&&	O
current_page	int
==	O
requested_page	int
)	O
)	O
)	O
{	O
if	O
(	O
bg_color	pointer
)	O
{	O
pl_bgcolorname_r	function
(	O
plotter	pointer
,	O
bg_color	pointer
)	O
;	O
pl_erase_r	function
(	O
plotter	pointer
)	O
;	O
}	O
if	O
(	O
pen_color	pointer
)	O
pl_pencolorname_r	function
(	O
plotter	pointer
,	O
pen_color	pointer
)	O
;	O
if	O
(	O
font_name	pointer
)	O
pl_fontname_r	function
(	O
plotter	pointer
,	O
font_name	pointer
)	O
;	O
if	O
(	O
font_size	double
>=	O
0.0	int
)	O
pl_ffontsize_r	function
(	O
plotter	pointer
,	O
font_size	double
*	O
fabs	function
(	O
x1	int
-	O
x0	int
)	O
)	O
;	O
if	O
(	O
line_width	double
>=	O
0.0	int
)	O
pl_flinewidth_r	function
(	O
plotter	pointer
,	O
line_width	double
*	O
fabs	function
(	O
x1	int
-	O
x0	int
)	O
)	O
;	O
parameters_initted	enum
=	O
true	int
;	O
}	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FTEXTANGLE	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_ftextangle_r	function
(	O
plotter	pointer
,	O
x0	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FCONCAT	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x2	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y2	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fconcat_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
,	O
x2	int
,	O
y2	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FMITERLIMIT	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fmiterlimit_r	function
(	O
plotter	pointer
,	O
x0	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FSETMATRIX	int
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x1	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y1	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
x2	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y2	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fsetmatrix_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
,	O
x1	int
,	O
y1	function
,	O
x2	int
,	O
y2	int
)	O
;	O
if	O
(	O
parameters_initted	enum
==	O
false	int
&&	O
(	O
(	O
!	O
single_page_is_requested	enum
&&	O
current_page	int
==	O
1	int
)	O
||	O
(	O
single_page_is_requested	enum
&&	O
current_page	int
==	O
requested_page	int
)	O
)	O
)	O
{	O
if	O
(	O
pen_color	pointer
)	O
pl_pencolorname_r	function
(	O
plotter	pointer
,	O
pen_color	pointer
)	O
;	O
if	O
(	O
font_name	pointer
)	O
pl_fontname_r	function
(	O
plotter	pointer
,	O
font_name	pointer
)	O
;	O
if	O
(	O
x0	int
!=	O
0.0	int
)	O
{	O
if	O
(	O
font_size	double
>=	O
0.0	int
)	O
pl_ffontsize_r	function
(	O
plotter	pointer
,	O
font_size	double
/	O
fabs	function
(	O
x0	int
)	O
)	O
;	O
if	O
(	O
line_width	double
>=	O
0.0	int
)	O
pl_flinewidth_r	function
(	O
plotter	pointer
,	O
line_width	double
/	O
fabs	function
(	O
x0	int
)	O
)	O
;	O
}	O
parameters_initted	enum
=	O
true	int
;	O
}	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FROTATE	char
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_frotate_r	function
(	O
plotter	pointer
,	O
x0	int
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FSCALE	char
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_fscale_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
O_FTRANSLATE	char
:	O
x0	int
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
y0	function
=	O
read_float	function
(	O
in_stream	pointer
,	O
&	O
argerr	enum
)	O
;	O
if	O
(	O
!	O
argerr	enum
)	O
if	O
(	O
!	O
single_page_is_requested	enum
||	O
current_page	int
==	O
requested_page	int
)	O
pl_ftranslate_r	function
(	O
plotter	pointer
,	O
x0	int
,	O
y0	function
)	O
;	O
break	O
;	O
case	O
' '	O
:	O
case	O
'\n'	O
:	O
case	O
'\r'	O
:	O
case	O
'\t'	O
:	O
case	O
'\v'	O
:	O
case	O
'\f'	O
:	O
if	O
(	O
input_format	enum
==	O
GNU_PORTABLE	int
||	O
input_format	enum
==	O
GNU_OLD_PORTABLE	int
)	O
break	O
;	O
else	O
unrec	enum
=	O
true	int
;	O
break	O
;	O
default	O
:	O
unrec	enum
=	O
true	int
;	O
break	O
;	O
}	O
first_command	enum
=	O
false	int
;	O
if	O
(	O
unrec	enum
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: an unrecognized command `0x%x' was encountered in the input\n"	pointer
,	O
progname	pointer
,	O
instruction	int
)	O
;	O
break	O
;	O
}	O
if	O
(	O
argerr	enum
)	O
{	O
int	O
eof	int
=	O
feof	function
(	O
in_stream	pointer
)	O
;	O
if	O
(	O
eof	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: the input terminated prematurely\n"	pointer
,	O
progname	pointer
)	O
;	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: the argument of the command `0x%x' in the input could not be parsed\n"	pointer
,	O
progname	pointer
,	O
instruction	int
)	O
;	O
break	O
;	O
}	O
instruction	int
=	O
getc	function
(	O
in_stream	pointer
)	O
;	O
}	O
if	O
(	O
input_format	enum
!=	O
GNU_BINARY	int
&&	O
input_format	enum
!=	O
GNU_PORTABLE	int
)	O
{	O
if	O
(	O
display_open	enum
&&	O
maybe_closepl	function
(	O
plotter	pointer
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: the plot device could not be closed\n"	pointer
,	O
progname	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
current_page	int
++	O
;	O
}	O
else	O
{	O
if	O
(	O
in_page	enum
)	O
{	O
if	O
(	O
display_open	enum
&&	O
maybe_closepl	function
(	O
plotter	pointer
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: the plot device could not be closed\n"	pointer
,	O
progname	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
current_page	int
++	O
;	O
return	O
false	int
;	O
}	O
}	O
return	O
(	O
(	O
argerr	enum
||	O
unrec	enum
)	O
?	O
false	int
:	O
true	int
)	O
;	O
}	O
int	O
maybe_openpl	function
(	O
plPlotter	struct
*	O
plotter	pointer
)	O
{	O
if	O
(	O
merge_pages	enum
)	O
return	O
0	int
;	O
else	O
return	O
(	O
pl_openpl_r	function
(	O
plotter	pointer
)	O
)	O
;	O
}	O
int	O
maybe_closepl	function
(	O
plPlotter	struct
*	O
plotter	pointer
)	O
{	O
if	O
(	O
merge_pages	enum
)	O
return	O
0	int
;	O
else	O
return	O
(	O
pl_closepl_r	function
(	O
plotter	pointer
)	O
)	O
;	O
}	O
unsigned	O
char	O
read_byte_as_unsigned_char	function
(	O
FILE	struct
*	O
input	pointer
,	O
bool	enum
*	O
badstatus	pointer
)	O
{	O
int	O
newint	int
;	O
if	O
(	O
*	O
badstatus	pointer
==	O
true	int
)	O
return	O
0	int
;	O
newint	int
=	O
getc	function
(	O
input	pointer
)	O
;	O
if	O
(	O
newint	int
==	O
EOF	O
)	O
{	O
*	O
badstatus	pointer
=	O
true	int
;	O
return	O
0	int
;	O
}	O
else	O
return	O
(	O
unsigned	O
char	O
)	O
newint	int
;	O
}	O
unsigned	O
int	O
read_byte_as_unsigned_int	function
(	O
FILE	struct
*	O
input	pointer
,	O
bool	enum
*	O
badstatus	pointer
)	O
{	O
int	O
newint	int
;	O
if	O
(	O
*	O
badstatus	pointer
==	O
true	int
)	O
return	O
0	int
;	O
newint	int
=	O
getc	function
(	O
input	pointer
)	O
;	O
if	O
(	O
newint	int
==	O
EOF	O
)	O
{	O
*	O
badstatus	pointer
=	O
true	int
;	O
return	O
0	int
;	O
}	O
else	O
return	O
(	O
unsigned	O
int	O
)	O
newint	int
;	O
}	O
int	O
read_true_int	function
(	O
FILE	struct
*	O
input	pointer
,	O
bool	enum
*	O
badstatus	pointer
)	O
{	O
int	O
x	int
,	O
zi	int
,	O
returnval	int
;	O
short	O
zs	short
;	O
unsigned	O
int	O
u	int
;	O
if	O
(	O
*	O
badstatus	pointer
==	O
true	int
)	O
return	O
0	int
;	O
switch	O
(	O
input_format	enum
)	O
{	O
case	O
GNU_PORTABLE	int
:	O
case	O
GNU_OLD_PORTABLE	int
:	O
returnval	int
=	O
fscanf	function
(	O
input	pointer
,	O
" %d"	pointer
,	O
&	O
x	int
)	O
;	O
if	O
(	O
returnval	int
!=	O
1	int
)	O
{	O
x	int
=	O
0	int
;	O
*	O
badstatus	pointer
=	O
true	int
;	O
}	O
break	O
;	O
case	O
GNU_BINARY	int
:	O
default	O
:	O
returnval	int
=	O
fread	function
(	O
&	O
zi	int
,	O
sizeof	O
(	O
zi	int
)	O
,	O
1	int
,	O
input	pointer
)	O
;	O
if	O
(	O
returnval	int
==	O
1	int
)	O
x	int
=	O
zi	int
;	O
else	O
{	O
x	int
=	O
0	int
;	O
*	O
badstatus	pointer
=	O
true	int
;	O
}	O
break	O
;	O
case	O
GNU_OLD_BINARY	int
:	O
returnval	int
=	O
fread	function
(	O
&	O
zs	short
,	O
sizeof	O
(	O
zs	short
)	O
,	O
1	int
,	O
input	pointer
)	O
;	O
if	O
(	O
returnval	int
==	O
1	int
)	O
x	int
=	O
(	O
int	O
)	O
zs	short
;	O
else	O
{	O
x	int
=	O
0	int
;	O
*	O
badstatus	pointer
=	O
true	int
;	O
}	O
break	O
;	O
case	O
PLOT5_HIGH	int
:	O
u	int
=	O
(	O
(	O
read_byte_as_unsigned_int	function
(	O
input	pointer
,	O
badstatus	pointer
)	O
)	O
<<	O
8	int
)	O
;	O
u	int
|=	O
read_byte_as_unsigned_int	function
(	O
input	pointer
,	O
badstatus	pointer
)	O
;	O
if	O
(	O
u	int
>	O
0x7fff	int
)	O
x	int
=	O
-	O
(	O
int	O
)	O
(	O
0x10000	int
-	O
u	int
)	O
;	O
else	O
x	int
=	O
(	O
int	O
)	O
u	int
;	O
break	O
;	O
case	O
PLOT5_LOW	int
:	O
u	int
=	O
read_byte_as_unsigned_int	function
(	O
input	pointer
,	O
badstatus	pointer
)	O
;	O
u	int
|=	O
(	O
read_byte_as_unsigned_int	function
(	O
input	pointer
,	O
badstatus	pointer
)	O
<<	O
8	int
)	O
;	O
if	O
(	O
u	int
>	O
0x7fff	int
)	O
x	int
=	O
-	O
(	O
int	O
)	O
(	O
0x10000	int
-	O
u	int
)	O
;	O
else	O
x	int
=	O
(	O
int	O
)	O
u	int
;	O
break	O
;	O
}	O
return	O
x	int
;	O
}	O
double	O
read_int	function
(	O
FILE	struct
*	O
input	pointer
,	O
bool	enum
*	O
badstatus	pointer
)	O
{	O
int	O
x	int
,	O
zi	int
,	O
returnval	int
;	O
short	O
zs	short
;	O
unsigned	O
int	O
u	int
;	O
if	O
(	O
*	O
badstatus	pointer
==	O
true	int
)	O
return	O
0.0	int
;	O
switch	O
(	O
input_format	enum
)	O
{	O
case	O
GNU_PORTABLE	int
:	O
case	O
GNU_OLD_PORTABLE	int
:	O
{	O
double	O
r	int
;	O
returnval	int
=	O
fscanf	function
(	O
input	pointer
,	O
" %lf"	pointer
,	O
&	O
r	int
)	O
;	O
if	O
(	O
returnval	int
!=	O
1	int
)	O
{	O
*	O
badstatus	pointer
=	O
true	int
;	O
r	int
=	O
0.0	int
;	O
}	O
return	O
r	int
;	O
}	O
case	O
GNU_BINARY	int
:	O
default	O
:	O
returnval	int
=	O
fread	function
(	O
&	O
zi	int
,	O
sizeof	O
(	O
zi	int
)	O
,	O
1	int
,	O
input	pointer
)	O
;	O
if	O
(	O
returnval	int
==	O
1	int
)	O
x	int
=	O
(	O
int	O
)	O
zi	int
;	O
else	O
{	O
x	int
=	O
0	int
;	O
*	O
badstatus	pointer
=	O
true	int
;	O
}	O
break	O
;	O
case	O
GNU_OLD_BINARY	int
:	O
returnval	int
=	O
fread	function
(	O
&	O
zs	short
,	O
sizeof	O
(	O
zs	short
)	O
,	O
1	int
,	O
input	pointer
)	O
;	O
if	O
(	O
returnval	int
==	O
1	int
)	O
x	int
=	O
(	O
int	O
)	O
zs	short
;	O
else	O
{	O
x	int
=	O
0	int
;	O
*	O
badstatus	pointer
=	O
true	int
;	O
}	O
break	O
;	O
case	O
PLOT5_HIGH	int
:	O
u	int
=	O
(	O
(	O
read_byte_as_unsigned_int	function
(	O
input	pointer
,	O
badstatus	pointer
)	O
)	O
<<	O
8	int
)	O
;	O
u	int
|=	O
read_byte_as_unsigned_int	function
(	O
input	pointer
,	O
badstatus	pointer
)	O
;	O
if	O
(	O
u	int
>	O
0x7fff	int
)	O
x	int
=	O
-	O
(	O
int	O
)	O
(	O
0x10000	int
-	O
u	int
)	O
;	O
else	O
x	int
=	O
(	O
int	O
)	O
u	int
;	O
break	O
;	O
case	O
PLOT5_LOW	int
:	O
u	int
=	O
read_byte_as_unsigned_int	function
(	O
input	pointer
,	O
badstatus	pointer
)	O
;	O
u	int
|=	O
(	O
read_byte_as_unsigned_int	function
(	O
input	pointer
,	O
badstatus	pointer
)	O
<<	O
8	int
)	O
;	O
if	O
(	O
u	int
>	O
0x7fff	int
)	O
x	int
=	O
-	O
(	O
int	O
)	O
(	O
0x10000	int
-	O
u	int
)	O
;	O
else	O
x	int
=	O
(	O
int	O
)	O
u	int
;	O
break	O
;	O
}	O
return	O
(	O
double	O
)	O
x	int
;	O
}	O
double	O
read_float	function
(	O
FILE	struct
*	O
input	pointer
,	O
bool	enum
*	O
badstatus	pointer
)	O
{	O
float	O
f	float
;	O
int	O
returnval	int
;	O
if	O
(	O
*	O
badstatus	pointer
==	O
true	int
)	O
return	O
0	int
;	O
switch	O
(	O
input_format	enum
)	O
{	O
case	O
GNU_PORTABLE	int
:	O
case	O
GNU_OLD_PORTABLE	int
:	O
returnval	int
=	O
fscanf	function
(	O
input	pointer
,	O
" %f"	pointer
,	O
&	O
f	float
)	O
;	O
break	O
;	O
case	O
GNU_BINARY	int
:	O
case	O
GNU_OLD_BINARY	int
:	O
default	O
:	O
returnval	int
=	O
fread	function
(	O
&	O
f	float
,	O
sizeof	O
(	O
f	float
)	O
,	O
1	int
,	O
input	pointer
)	O
;	O
break	O
;	O
case	O
PLOT5_HIGH	int
:	O
case	O
PLOT5_LOW	int
:	O
returnval	int
=	O
0	int
;	O
break	O
;	O
}	O
if	O
(	O
returnval	int
!=	O
1	int
||	O
f	float
!=	O
f	float
)	O
{	O
*	O
badstatus	pointer
=	O
true	int
;	O
return	O
0.0	int
;	O
}	O
else	O
return	O
(	O
double	O
)	O
f	float
;	O
}	O
char	O
*	O
read_string	function
(	O
FILE	struct
*	O
input	pointer
,	O
bool	enum
*	O
badstatus	pointer
)	O
{	O
int	O
length	long
=	O
0	int
,	O
buffer_length	int
=	O
16	int
;	O
char	O
*	O
buffer	pointer
;	O
char	O
c	char
;	O
if	O
(	O
*	O
badstatus	pointer
==	O
true	int
)	O
return	O
0	int
;	O
buffer	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
buffer_length	int
*	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
length	long
>=	O
buffer_length	int
)	O
{	O
buffer_length	int
*=	O
2	int
;	O
buffer	pointer
=	O
(	O
char	O
*	O
)	O
xrealloc	function
(	O
buffer	pointer
,	O
(	O
unsigned	O
int	O
)	O
(	O
buffer_length	int
)	O
)	O
;	O
}	O
c	char
=	O
(	O
char	O
)	O
read_byte_as_unsigned_char	function
(	O
input	pointer
,	O
badstatus	pointer
)	O
;	O
if	O
(	O
(	O
*	O
badstatus	pointer
==	O
true	int
)	O
||	O
(	O
c	char
==	O
'\n'	O
)	O
)	O
break	O
;	O
buffer	pointer
[	O
length	long
++	O
]	O
=	O
c	char
;	O
}	O
if	O
(	O
*	O
badstatus	pointer
)	O
{	O
free	function
(	O
buffer	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
else	O
{	O
buffer	pointer
[	O
length	long
]	O
=	O
'\0'	O
;	O
return	O
buffer	pointer
;	O
}	O
}	O