static	O
char	O
*	O
swheader_goto_c_next_line	function
(	O
void	O
*	O
vheader	pointer
,	O
int	O
*	O
output_line_offset	pointer
,	O
int	O
peek_only	int
)	O
;	O
static	O
void	O
swheader__reset	function
(	O
SWHEADER	struct
*	O
swheader	pointer
)	O
;	O
static	O
char	O
*	O
swheader_goto_c_next_line	function
(	O
void	O
*	O
vheader	pointer
,	O
int	O
*	O
output_line_offset	pointer
,	O
int	O
peek_only	int
)	O
{	O
SWHEADER	struct
*	O
swheader	pointer
;	O
char	O
*	O
ih	pointer
;	O
char	O
*	O
keyw	pointer
;	O
char	O
*	O
p	pointer
;	O
char	O
*	O
line	pointer
;	O
int	O
n	long
;	O
int	O
type	enum
;	O
swheader	pointer
=	O
(	O
SWHEADER	struct
*	O
)	O
vheader	pointer
;	O
ih	pointer
=	O
swheader	pointer
->	O
image_head_	pointer
;	O
if	O
(	O
!	O
output_line_offset	pointer
)	O
{	O
swheader__reset	function
(	O
swheader	pointer
)	O
;	O
return	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
;	O
}	O
if	O
(	O
*	O
output_line_offset	pointer
==	O
INT_MAX	O
)	O
{	O
return	O
ih	pointer
;	O
}	O
if	O
(	O
*	O
output_line_offset	pointer
<	O
0	int
)	O
{	O
return	O
ih	pointer
+	O
(	O
-	O
(	O
*	O
output_line_offset	pointer
)	O
)	O
;	O
}	O
type	enum
=	O
swheaderline_get_type	function
(	O
ih	pointer
+	O
(	O
*	O
output_line_offset	pointer
)	O
)	O
;	O
if	O
(	O
type	enum
==	O
'F'	O
)	O
{	O
p	pointer
=	O
strchr	function
(	O
ih	pointer
+	O
(	O
*	O
output_line_offset	pointer
)	O
,	O
'\n'	O
)	O
+	O
NEWLINE_LEN	int
;	O
if	O
(	O
p	pointer
)	O
{	O
*	O
output_line_offset	pointer
=	O
p	pointer
-	O
swheader	pointer
->	O
image_head_	pointer
;	O
}	O
return	O
p	pointer
;	O
}	O
keyw	pointer
=	O
swheaderline_get_keyword	function
(	O
ih	pointer
+	O
(	O
*	O
output_line_offset	pointer
)	O
)	O
;	O
if	O
(	O
keyw	pointer
==	O
NULL	O
)	O
{	O
return	O
NULL	O
;	O
}	O
n	long
=	O
swheaderline_get_value_length	function
(	O
ih	pointer
+	O
(	O
*	O
output_line_offset	pointer
)	O
)	O
;	O
if	O
(	O
n	long
<	O
0	int
)	O
{	O
return	O
NULL	O
;	O
}	O
if	O
(	O
type	enum
==	O
'A'	O
)	O
n	long
++	O
;	O
line	pointer
=	O
keyw	pointer
+	O
(	O
strlen	function
(	O
keyw	pointer
)	O
+	O
n	long
+	O
NEWLINE_LEN	int
)	O
;	O
if	O
(	O
*	O
line	pointer
==	O
'\0'	O
&&	O
peek_only	int
==	O
0	int
)	O
{	O
*	O
output_line_offset	pointer
=	O
-	O
1	int
;	O
}	O
if	O
(	O
*	O
line	pointer
==	O
'\0'	O
)	O
{	O
return	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
;	O
}	O
if	O
(	O
peek_only	int
==	O
0	int
)	O
{	O
*	O
output_line_offset	pointer
=	O
(	O
int	O
)	O
(	O
line	pointer
-	O
swheader	pointer
->	O
image_head_	pointer
)	O
;	O
}	O
return	O
line	pointer
;	O
}	O
static	O
void	O
swheader__reset	function
(	O
SWHEADER	struct
*	O
swheader	pointer
)	O
{	O
swheader	pointer
->	O
current_offset_	int
=	O
0	int
;	O
*	O
(	O
swheader	pointer
->	O
current_offset_p_	pointer
)	O
=	O
0	int
;	O
}	O
static	O
char	O
*	O
get_object_by_swverid	function
(	O
SWHEADER	struct
*	O
swheader	pointer
,	O
SWVERID	struct
*	O
swverid	pointer
,	O
int	O
(	O
*	O
f_comp	pointer
)	O
(	O
SWVERID	struct
*	O
,	O
SWVERID	struct
*	O
)	O
,	O
int	O
*	O
nmatches	pointer
)	O
{	O
char	O
*	O
retval	pointer
;	O
char	O
*	O
next_line	pointer
;	O
SWVERID	struct
*	O
t_swverid	pointer
=	O
NULL	O
;	O
int	O
start_offset	int
;	O
int	O
object_offset	int
;	O
int	O
ret_object_offset	int
;	O
Swverid_Cmp_Code	int
comparison_result	int
;	O
retval	pointer
=	O
NULL	O
;	O
start_offset	int
=	O
swheader_get_current_offset	function
(	O
swheader	pointer
)	O
;	O
ret_object_offset	int
=	O
start_offset	int
;	O
if	O
(	O
f_comp	pointer
==	O
NULL	O
)	O
f_comp	pointer
=	O
swverid_vtagOLD_compare	function
;	O
SWHEADER_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
nmatches	pointer
)	O
*	O
nmatches	pointer
=	O
0	int
;	O
next_line	pointer
=	O
swheader_get_current_line	function
(	O
swheader	pointer
)	O
;	O
E_DEBUG2	O
(	O
"initial next_line is %p"	pointer
,	O
(	O
void	O
*	O
)	O
next_line	pointer
)	O
;	O
if	O
(	O
!	O
next_line	pointer
)	O
return	O
NULL	O
;	O
while	O
(	O
next_line	pointer
&&	O
(	O
swheaderline_get_type	function
(	O
next_line	pointer
)	O
!=	O
SWPARSE_MD_TYPE_OBJ	char
)	O
)	O
next_line	pointer
=	O
swheader_f_goto_next	function
(	O
swheader	pointer
)	O
;	O
do	O
{	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
object_offset	int
=	O
swheader_get_current_offset	function
(	O
swheader	pointer
)	O
;	O
t_swverid	pointer
=	O
swverid_open	function
(	O
NULL	O
,	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
)	O
;	O
if	O
(	O
swheader_generate_swverid	function
(	O
swheader	pointer
,	O
t_swverid	pointer
,	O
next_line	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"swheader_get_object: error returned by get_object.\n"	pointer
)	O
;	O
swheader_set_current_offset_p_value	function
(	O
swheader	pointer
,	O
start_offset	int
)	O
;	O
return	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
comparison_result	int
=	O
(	O
*	O
f_comp	pointer
)	O
(	O
swverid	pointer
,	O
t_swverid	pointer
)	O
;	O
if	O
(	O
comparison_result	int
==	O
SWVERID_CMP_EQ	int
)	O
{	O
swverid_close	function
(	O
t_swverid	pointer
)	O
;	O
t_swverid	pointer
=	O
NULL	O
;	O
swheader_set_current_offset_p_value	function
(	O
swheader	pointer
,	O
object_offset	int
)	O
;	O
retval	pointer
=	O
next_line	pointer
;	O
ret_object_offset	int
=	O
object_offset	int
;	O
if	O
(	O
nmatches	pointer
)	O
(	O
*	O
nmatches	pointer
)	O
++	O
;	O
else	O
break	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
}	O
if	O
(	O
t_swverid	pointer
)	O
swverid_close	function
(	O
t_swverid	pointer
)	O
;	O
t_swverid	pointer
=	O
NULL	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
}	O
while	O
(	O
(	O
next_line	pointer
=	O
swheader_get_next_object	function
(	O
swheader	pointer
,	O
(	O
int	O
)	O
(	O
UCHAR_MAX	O
)	O
,	O
(	O
int	O
)	O
UCHAR_MAX	O
)	O
)	O
)	O
;	O
if	O
(	O
t_swverid	pointer
)	O
swverid_close	function
(	O
t_swverid	pointer
)	O
;	O
swheader_set_current_offset_p_value	function
(	O
swheader	pointer
,	O
ret_object_offset	int
)	O
;	O
return	O
retval	pointer
;	O
}	O
void	O
restore_state	function
(	O
SWHEADER	struct
*	O
header	struct
,	O
SWHEADER_STATE	struct
*	O
state	pointer
)	O
{	O
header	struct
->	O
current_offset_p_	pointer
=	O
state	pointer
->	O
save_current_offset_pM	pointer
;	O
header	struct
->	O
current_offset_	int
=	O
state	pointer
->	O
save_current_offsetM	int
;	O
if	O
(	O
header	struct
->	O
current_offset_p_	pointer
)	O
*	O
(	O
header	struct
->	O
current_offset_p_	pointer
)	O
=	O
state	pointer
->	O
save_current_offset_vM	int
;	O
}	O
static	O
char	O
*	O
get_attribute_in_current_object	function
(	O
SWHEADER	struct
*	O
swheader	pointer
,	O
char	O
*	O
keyword	pointer
,	O
char	O
*	O
object_keyword	pointer
,	O
int	O
*	O
is_multi_value	pointer
)	O
{	O
int	O
multi_line	int
;	O
struct	O
swsdflt_defaults	struct
*	O
swd	short
;	O
char	O
*	O
line	pointer
;	O
char	O
*	O
prevline	pointer
;	O
SWHEADER_STATE	struct
state	pointer
;	O
SWHEADER_E_DEBUG	O
(	O
""	pointer
)	O
;	O
swheader_store_state	function
(	O
swheader	pointer
,	O
&	O
state	pointer
)	O
;	O
if	O
(	O
object_keyword	pointer
)	O
fprintf	function
(	O
stderr	pointer
,	O
"warning: get_attribute_in_current_object() is deprecated for this usage\n"	pointer
)	O
;	O
if	O
(	O
object_keyword	pointer
)	O
{	O
swd	short
=	O
swsdflt_return_entry	function
(	O
object_keyword	pointer
,	O
keyword	pointer
)	O
;	O
if	O
(	O
swd	short
==	O
NULL	O
)	O
{	O
multi_line	int
=	O
(	O
enum	O
swsdflt_value_type	enum
)	O
(	O
sdf_single_value	int
)	O
;	O
}	O
else	O
{	O
multi_line	int
=	O
swsdflt_get_value_type	function
(	O
swd	short
)	O
;	O
}	O
}	O
else	O
{	O
multi_line	int
=	O
(	O
enum	O
swsdflt_value_type	enum
)	O
(	O
sdf_single_value	int
)	O
;	O
}	O
if	O
(	O
multi_line	int
==	O
(	O
enum	O
swsdflt_value_type	enum
)	O
(	O
sdf_single_value	int
)	O
)	O
{	O
if	O
(	O
is_multi_value	pointer
)	O
*	O
is_multi_value	pointer
=	O
0	int
;	O
line	pointer
=	O
swheader_raw_get_attribute_in_object	function
(	O
swheader	pointer
,	O
keyword	pointer
)	O
;	O
prevline	pointer
=	O
line	pointer
;	O
while	O
(	O
line	pointer
)	O
{	O
line	pointer
=	O
swheader_raw_get_attribute_in_object	function
(	O
swheader	pointer
,	O
keyword	pointer
)	O
;	O
if	O
(	O
line	pointer
)	O
prevline	pointer
=	O
line	pointer
;	O
}	O
restore_state	function
(	O
swheader	pointer
,	O
&	O
state	pointer
)	O
;	O
return	O
prevline	pointer
;	O
}	O
else	O
{	O
if	O
(	O
is_multi_value	pointer
)	O
*	O
is_multi_value	pointer
=	O
1	int
;	O
line	pointer
=	O
swheader_raw_get_attribute_in_object	function
(	O
swheader	pointer
,	O
keyword	pointer
)	O
;	O
restore_state	function
(	O
swheader	pointer
,	O
&	O
state	pointer
)	O
;	O
return	O
line	pointer
;	O
}	O
}	O
SWHEADER_STATE	struct
*	O
swheader_state_create	function
(	O
void	O
)	O
{	O
SWHEADER_STATE	struct
*	O
x	pointer
;	O
x	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
SWHEADER_STATE	struct
)	O
)	O
;	O
x	pointer
->	O
save_current_offset_pM	pointer
=	O
NULL	O
;	O
x	pointer
->	O
save_current_offsetM	int
=	O
-	O
1	int
;	O
x	pointer
->	O
save_current_offset_vM	int
=	O
-	O
1	int
;	O
return	O
x	pointer
;	O
}	O
void	O
swheader_state_delete	function
(	O
SWHEADER_STATE	struct
*	O
x	pointer
)	O
{	O
free	function
(	O
x	pointer
)	O
;	O
}	O
void	O
swheader_state_copy	function
(	O
SWHEADER_STATE	struct
*	O
to	int
,	O
SWHEADER_STATE	struct
*	O
from	int
)	O
{	O
to	int
->	O
save_current_offset_pM	pointer
=	O
from	int
->	O
save_current_offset_pM	pointer
;	O
to	int
->	O
save_current_offsetM	int
=	O
from	int
->	O
save_current_offsetM	int
;	O
to	int
->	O
save_current_offset_vM	int
=	O
from	int
->	O
save_current_offset_vM	int
;	O
}	O
void	O
swheader_store_state	function
(	O
SWHEADER	struct
*	O
header	struct
,	O
SWHEADER_STATE	struct
*	O
fp_state	pointer
)	O
{	O
SWHEADER_STATE	struct
*	O
state	pointer
;	O
if	O
(	O
fp_state	pointer
)	O
state	pointer
=	O
fp_state	pointer
;	O
else	O
state	pointer
=	O
&	O
(	O
header	struct
->	O
saved_	struct
)	O
;	O
state	pointer
->	O
save_current_offset_pM	pointer
=	O
header	struct
->	O
current_offset_p_	pointer
;	O
state	pointer
->	O
save_current_offsetM	int
=	O
header	struct
->	O
current_offset_	int
;	O
if	O
(	O
header	struct
->	O
current_offset_p_	pointer
)	O
{	O
state	pointer
->	O
save_current_offset_vM	int
=	O
*	O
(	O
header	struct
->	O
current_offset_p_	pointer
)	O
;	O
}	O
else	O
{	O
state	pointer
->	O
save_current_offset_vM	int
=	O
0	int
;	O
}	O
}	O
void	O
swheader_restore_state	function
(	O
SWHEADER	struct
*	O
header	struct
,	O
SWHEADER_STATE	struct
*	O
state	pointer
)	O
{	O
if	O
(	O
state	pointer
)	O
restore_state	function
(	O
header	struct
,	O
state	pointer
)	O
;	O
else	O
restore_state	function
(	O
header	struct
,	O
&	O
(	O
header	struct
->	O
saved_	struct
)	O
)	O
;	O
}	O
SWHEADER	struct
*	O
swheader_open	function
(	O
char	O
*	O
(	O
*	O
f_goto_next	pointer
)	O
(	O
void	O
*	O
,	O
int	O
*	O
,	O
int	O
)	O
,	O
void	O
*	O
image_object	pointer
)	O
{	O
int	O
i	int
;	O
SWHEADER	struct
*	O
swheader	pointer
=	O
(	O
SWHEADER	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
SWHEADER	struct
)	O
)	O
;	O
if	O
(	O
!	O
swheader	pointer
)	O
return	O
swheader	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
SWHEADER_IMAGE_STACK_LEN	int
;	O
i	int
++	O
)	O
swheader	pointer
->	O
image_object_stack_	array
[	O
i	int
]	O
=	O
(	O
void	O
*	O
)	O
(	O
NULL	O
)	O
;	O
if	O
(	O
image_object	pointer
)	O
{	O
swheader_set_image_object	function
(	O
swheader	pointer
,	O
image_object	pointer
,	O
0	int
)	O
;	O
swheader	pointer
->	O
image_object_	pointer
=	O
image_object	pointer
;	O
}	O
else	O
{	O
swheader_set_image_object	function
(	O
swheader	pointer
,	O
(	O
void	O
*	O
)	O
(	O
swheader	pointer
)	O
,	O
0	int
)	O
;	O
swheader	pointer
->	O
image_object_	pointer
=	O
(	O
void	O
*	O
)	O
swheader	pointer
;	O
}	O
swheader	pointer
->	O
f_goto_next_	pointer
=	O
f_goto_next	pointer
;	O
swheader	pointer
->	O
current_offset_p_	pointer
=	O
&	O
(	O
swheader	pointer
->	O
current_offset_	int
)	O
;	O
swheader	pointer
->	O
current_offset_	int
=	O
0	int
;	O
swheader	pointer
->	O
image_head_	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
swheader	pointer
->	O
f_goto_next_	pointer
)	O
swheader_set_iter_function	function
(	O
swheader	pointer
,	O
swheader_goto_c_next_line	function
)	O
;	O
swheader_store_state	function
(	O
swheader	pointer
,	O
&	O
(	O
swheader	pointer
->	O
saved_	struct
)	O
)	O
;	O
return	O
swheader	pointer
;	O
}	O
void	O
swheader_close	function
(	O
SWHEADER	struct
*	O
swheader	pointer
)	O
{	O
if	O
(	O
swheader	pointer
->	O
image_head_	pointer
)	O
free	function
(	O
swheader	pointer
->	O
image_head_	pointer
)	O
;	O
if	O
(	O
swheader	pointer
!=	O
NULL	O
)	O
swbis_free	O
(	O
swheader	pointer
)	O
;	O
}	O
void	O
swheader_reset	function
(	O
SWHEADER	struct
*	O
swheader	pointer
)	O
{	O
swheader__reset	function
(	O
swheader	pointer
)	O
;	O
if	O
(	O
swheader	pointer
->	O
f_goto_next_	pointer
!=	O
swheader_goto_c_next_line	function
)	O
{	O
while	O
(	O
swheader_f_goto_next	function
(	O
swheader	pointer
)	O
)	O
;	O
}	O
swheader__reset	function
(	O
swheader	pointer
)	O
;	O
(	O
*	O
(	O
swheader	pointer
->	O
f_goto_next_	pointer
)	O
)	O
(	O
swheader	pointer
->	O
image_object_	pointer
,	O
NULL	O
,	O
SWHEADER_GET_NEXT	int
)	O
;	O
}	O
char	O
*	O
swheader_f_goto_next	function
(	O
SWHEADER	struct
*	O
swheader	pointer
)	O
{	O
char	O
*	O
ret	pointer
;	O
ret	pointer
=	O
(	O
*	O
(	O
swheader	pointer
->	O
f_goto_next_	pointer
)	O
)	O
(	O
swheader	pointer
->	O
image_object_	pointer
,	O
swheader_get_current_offset_p	function
(	O
swheader	pointer
)	O
,	O
SWHEADER_GET_NEXT	int
)	O
;	O
return	O
ret	pointer
;	O
}	O
o__inline__	O
char	O
*	O
swheader_goto_next_line	function
(	O
void	O
*	O
vheader	pointer
,	O
int	O
*	O
output_line_offset	pointer
,	O
int	O
peek_only	int
)	O
{	O
char	O
*	O
ret	pointer
;	O
ret	pointer
=	O
(	O
*	O
(	O
(	O
(	O
SWHEADER	struct
*	O
)	O
(	O
vheader	pointer
)	O
)	O
->	O
f_goto_next_	pointer
)	O
)	O
(	O
(	O
(	O
SWHEADER	struct
*	O
)	O
(	O
vheader	pointer
)	O
)	O
->	O
image_object_	pointer
,	O
output_line_offset	pointer
,	O
peek_only	int
)	O
;	O
return	O
ret	pointer
;	O
}	O
char	O
*	O
swheader_get_current_line	function
(	O
SWHEADER	struct
*	O
swheader	pointer
)	O
{	O
int	O
i	int
;	O
char	O
*	O
p	pointer
;	O
SWHEADER_E_DEBUG	O
(	O
""	pointer
)	O
;	O
i	int
=	O
-	O
swheader_get_current_offset	function
(	O
swheader	pointer
)	O
;	O
SWHEADER_E_DEBUG2	O
(	O
"current offset is %d"	pointer
,	O
i	int
)	O
;	O
p	pointer
=	O
(	O
*	O
(	O
swheader	pointer
->	O
f_goto_next_	pointer
)	O
)	O
(	O
swheader	pointer
->	O
image_object_	pointer
,	O
&	O
i	int
,	O
SWHEADER_PEEK_NEXT	int
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
SWHEADER_E_DEBUG	O
(	O
"returning NULL"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
else	O
{	O
SWHEADER_E_DEBUG3	O
(	O
"returning non-NULL p=%p value=[%s]"	pointer
,	O
p	pointer
,	O
p	pointer
)	O
;	O
return	O
p	pointer
;	O
}	O
}	O
void	O
swheader_set_iter_function	function
(	O
SWHEADER	struct
*	O
swheader	pointer
,	O
char	O
*	O
(	O
*	O
fc	pointer
)	O
(	O
void	O
*	O
,	O
int	O
*	O
,	O
int	O
)	O
)	O
{	O
SWHEADER_E_DEBUG	O
(	O
""	pointer
)	O
;	O
swheader	pointer
->	O
f_goto_next_	pointer
=	O
fc	pointer
;	O
}	O
o__inline__	O
int	O
swheader_set_image_object	function
(	O
SWHEADER	struct
*	O
swheader	pointer
,	O
void	O
*	O
image	pointer
,	O
int	O
index	function
)	O
{	O
int	O
i	int
=	O
0	int
;	O
SWHEADER_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
index	function
<	O
0	int
)	O
{	O
while	O
(	O
swheader	pointer
->	O
image_object_stack_	array
[	O
i	int
]	O
)	O
i	int
++	O
;	O
if	O
(	O
i	int
>=	O
SWHEADER_IMAGE_STACK_LEN	int
)	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
i	int
=	O
index	function
;	O
}	O
swheader	pointer
->	O
image_object_stack_	array
[	O
i	int
]	O
=	O
image	pointer
;	O
return	O
i	int
;	O
}	O
o__inline__	O
void	O
swheader_set_image_object_active	function
(	O
SWHEADER	struct
*	O
swheader	pointer
,	O
int	O
index	function
)	O
{	O
SWHEADER_E_DEBUG	O
(	O
""	pointer
)	O
;	O
swheader	pointer
->	O
image_object_	pointer
=	O
swheader	pointer
->	O
image_object_stack_	array
[	O
index	function
]	O
;	O
}	O
o__inline__	O
void	O
swheader_set_image_head	function
(	O
SWHEADER	struct
*	O
swheader	pointer
,	O
void	O
*	O
image	pointer
)	O
{	O
SWHEADER_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
swheader	pointer
->	O
image_head_	pointer
)	O
free	function
(	O
swheader	pointer
->	O
image_head_	pointer
)	O
;	O
swheader	pointer
->	O
image_head_	pointer
=	O
image	pointer
;	O
}	O
o__inline__	O
void	O
swheader_set_current_offset	function
(	O
SWHEADER	struct
*	O
swheader	pointer
,	O
int	O
n	long
)	O
{	O
swheader_set_current_offset_p_value	function
(	O
swheader	pointer
,	O
n	long
)	O
;	O
}	O
o__inline__	O
void	O
swheader_set_current_offset_p_value	function
(	O
SWHEADER	struct
*	O
swheader	pointer
,	O
int	O
n	long
)	O
{	O
*	O
(	O
swheader	pointer
->	O
current_offset_p_	pointer
)	O
=	O
n	long
;	O
}	O
o__inline__	O
void	O
swheader_set_current_offset_p	function
(	O
SWHEADER	struct
*	O
swheader	pointer
,	O
int	O
*	O
n	long
)	O
{	O
if	O
(	O
!	O
n	long
)	O
swheader	pointer
->	O
current_offset_p_	pointer
=	O
&	O
(	O
swheader	pointer
->	O
current_offset_	int
)	O
;	O
else	O
swheader	pointer
->	O
current_offset_p_	pointer
=	O
n	long
;	O
}	O
F_GOTO_NEXT	pointer
swheader_get_iter_function	function
(	O
SWHEADER	struct
*	O
swheader	pointer
)	O
{	O
return	O
swheader	pointer
->	O
f_goto_next_	pointer
;	O
}	O
o__inline__	O
int	O
*	O
swheader_get_current_offset_p	function
(	O
SWHEADER	struct
*	O
swheader	pointer
)	O
{	O
return	O
swheader	pointer
->	O
current_offset_p_	pointer
;	O
}	O
o__inline__	O
int	O
swheader_get_current_offset	function
(	O
SWHEADER	struct
*	O
swheader	pointer
)	O
{	O
return	O
*	O
(	O
swheader	pointer
->	O
current_offset_p_	pointer
)	O
;	O
}	O
char	O
*	O
swheader_get_image_head	function
(	O
SWHEADER	struct
*	O
swheader	pointer
)	O
{	O
int	O
i	int
=	O
INT_MAX	O
;	O
return	O
(	O
*	O
(	O
swheader	pointer
->	O
f_goto_next_	pointer
)	O
)	O
(	O
swheader	pointer
->	O
image_object_	pointer
,	O
&	O
i	int
,	O
SWHEADER_GET_NEXT	int
)	O
;	O
}	O
char	O
*	O
swheader_get_next_object	function
(	O
SWHEADER	struct
*	O
swheader	pointer
,	O
int	O
relative_level_min	int
,	O
int	O
relative_level_max	int
)	O
{	O
char	O
*	O
next_line	pointer
;	O
int	O
object_level	int
=	O
0	int
;	O
int	O
current_relative_level	int
;	O
SWHEADER_E_DEBUG	O
(	O
""	pointer
)	O
;	O
next_line	pointer
=	O
swheader_goto_next_line	function
(	O
(	O
void	O
*	O
)	O
swheader	pointer
,	O
swheader_get_current_offset_p	function
(	O
swheader	pointer
)	O
,	O
SWHEADER_GET_NEXT	int
)	O
;	O
while	O
(	O
next_line	pointer
)	O
{	O
SWHEADER_E_DEBUG	O
(	O
""	pointer
)	O
;	O
current_relative_level	int
=	O
swheaderline_get_level	function
(	O
next_line	pointer
)	O
-	O
object_level	int
;	O
if	O
(	O
swheaderline_get_type	function
(	O
next_line	pointer
)	O
==	O
SWPARSE_MD_TYPE_OBJ	char
)	O
{	O
if	O
(	O
relative_level_min	int
==	O
UCHAR_MAX	O
&&	O
relative_level_max	int
==	O
UCHAR_MAX	O
)	O
{	O
SWHEADER_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
next_line	pointer
;	O
}	O
else	O
if	O
(	O
current_relative_level	int
<	O
relative_level_min	int
||	O
current_relative_level	int
>	O
relative_level_max	int
)	O
{	O
SWHEADER_E_DEBUG	O
(	O
"tested NULL"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
else	O
if	O
(	O
current_relative_level	int
>=	O
relative_level_min	int
&&	O
current_relative_level	int
<=	O
relative_level_max	int
)	O
{	O
SWHEADER_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
next_line	pointer
;	O
}	O
}	O
next_line	pointer
=	O
swheader_goto_next_line	function
(	O
(	O
void	O
*	O
)	O
swheader	pointer
,	O
swheader_get_current_offset_p	function
(	O
swheader	pointer
)	O
,	O
SWHEADER_GET_NEXT	int
)	O
;	O
}	O
SWHEADER_E_DEBUG	O
(	O
"terminating NULL"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
int	O
swheader_generate_swverid	function
(	O
SWHEADER	struct
*	O
swheader	pointer
,	O
SWVERID	struct
*	O
swverid	pointer
,	O
char	O
*	O
object_line	pointer
)	O
{	O
int	O
len	int
;	O
char	O
*	O
next_attr	pointer
,	O
*	O
keyw	pointer
,	O
*	O
value	long
,	O
*	O
object_keyword	pointer
;	O
int	O
object_offset	int
=	O
swheader_get_current_offset	function
(	O
swheader	pointer
)	O
;	O
if	O
(	O
object_line	pointer
==	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
swheaderline_get_type	function
(	O
object_line	pointer
)	O
!=	O
SWPARSE_MD_TYPE_OBJ	char
)	O
return	O
-	O
2	int
;	O
object_keyword	pointer
=	O
swheaderline_get_keyword	function
(	O
object_line	pointer
)	O
;	O
swverid_set_namespace	function
(	O
swverid	pointer
,	O
object_keyword	pointer
)	O
;	O
while	O
(	O
(	O
next_attr	pointer
=	O
swheader_get_next_attribute	function
(	O
swheader	pointer
)	O
)	O
)	O
{	O
value	long
=	O
swheaderline_get_value	function
(	O
next_attr	pointer
,	O
&	O
len	int
)	O
;	O
keyw	pointer
=	O
swheaderline_get_keyword	function
(	O
next_attr	pointer
)	O
;	O
if	O
(	O
!	O
keyw	pointer
||	O
!	O
value	long
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"error in swheader_generate_swverid.\n"	pointer
)	O
;	O
swheader_set_current_offset_p_value	function
(	O
swheader	pointer
,	O
object_offset	int
)	O
;	O
return	O
-	O
3	int
;	O
}	O
if	O
(	O
swverid_add_attribute	function
(	O
swverid	pointer
,	O
object_keyword	pointer
,	O
keyw	pointer
,	O
value	long
)	O
<	O
0	int
)	O
{	O
return	O
-	O
4	int
;	O
}	O
}	O
swheader_set_current_offset_p_value	function
(	O
swheader	pointer
,	O
object_offset	int
)	O
;	O
return	O
0	int
;	O
}	O
char	O
*	O
swheader_get_single_attribute_value	function
(	O
SWHEADER	struct
*	O
swheader	pointer
,	O
char	O
*	O
keyword	pointer
)	O
{	O
char	O
*	O
line	pointer
;	O
char	O
*	O
value	long
;	O
SWHEADER_STATE	struct
state	pointer
;	O
swheader_store_state	function
(	O
swheader	pointer
,	O
&	O
state	pointer
)	O
;	O
line	pointer
=	O
get_attribute_in_current_object	function
(	O
swheader	pointer
,	O
keyword	pointer
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
line	pointer
==	O
NULL	O
)	O
{	O
swheader_restore_state	function
(	O
swheader	pointer
,	O
&	O
state	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
value	long
=	O
swheaderline_get_value	function
(	O
line	pointer
,	O
NULL	O
)	O
;	O
swheader_restore_state	function
(	O
swheader	pointer
,	O
&	O
state	pointer
)	O
;	O
return	O
value	long
;	O
}	O
char	O
*	O
swheader_get_attribute	function
(	O
SWHEADER	struct
*	O
swheader	pointer
,	O
char	O
*	O
attribute_keyword	pointer
,	O
int	O
*	O
is_multi	pointer
)	O
{	O
char	O
*	O
*	O
list	pointer
;	O
char	O
*	O
*	O
pp	pointer
;	O
char	O
*	O
ret	pointer
=	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
;	O
SWHEADER_E_DEBUG	O
(	O
""	pointer
)	O
;	O
list	pointer
=	O
swheader_get_attribute_list	function
(	O
swheader	pointer
,	O
attribute_keyword	pointer
,	O
is_multi	pointer
)	O
;	O
pp	pointer
=	O
list	pointer
;	O
if	O
(	O
!	O
list	pointer
)	O
return	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
;	O
while	O
(	O
*	O
pp	pointer
)	O
{	O
ret	pointer
=	O
*	O
pp	pointer
;	O
pp	pointer
++	O
;	O
}	O
free	function
(	O
list	pointer
)	O
;	O
return	O
ret	pointer
;	O
}	O
char	O
*	O
swheader_get_attribute_in_current_object	function
(	O
SWHEADER	struct
*	O
swheader	pointer
,	O
char	O
*	O
keyword	pointer
,	O
char	O
*	O
object_keyword	pointer
,	O
int	O
*	O
is_multi_value	pointer
)	O
{	O
return	O
get_attribute_in_current_object	function
(	O
swheader	pointer
,	O
keyword	pointer
,	O
object_keyword	pointer
,	O
is_multi_value	pointer
)	O
;	O
}	O
char	O
*	O
*	O
swheader_get_attribute_list	function
(	O
SWHEADER	struct
*	O
swheader	pointer
,	O
char	O
*	O
attribute_keyword	pointer
,	O
int	O
*	O
multi_line	int
)	O
{	O
struct	O
swsdflt_defaults	struct
*	O
swd	short
;	O
char	O
*	O
line	pointer
,	O
*	O
keyw	pointer
,	O
*	O
headerline	pointer
,	O
*	O
*	O
ret	pointer
;	O
CPLOB	struct
*	O
cplob_obj	pointer
;	O
SWHEADER_STATE	struct
state	pointer
;	O
swheader_store_state	function
(	O
swheader	pointer
,	O
&	O
state	pointer
)	O
;	O
headerline	pointer
=	O
swheader_get_current_line	function
(	O
swheader	pointer
)	O
;	O
if	O
(	O
swheaderline_get_type	function
(	O
headerline	pointer
)	O
!=	O
SWPARSE_MD_TYPE_OBJ	char
)	O
{	O
restore_state	function
(	O
swheader	pointer
,	O
&	O
state	pointer
)	O
;	O
return	O
(	O
char	O
*	O
*	O
)	O
NULL	O
;	O
}	O
keyw	pointer
=	O
swheaderline_get_keyword	function
(	O
headerline	pointer
)	O
;	O
if	O
(	O
multi_line	int
)	O
{	O
swd	short
=	O
swsdflt_return_entry	function
(	O
keyw	pointer
,	O
attribute_keyword	pointer
)	O
;	O
if	O
(	O
swd	short
==	O
NULL	O
)	O
{	O
*	O
multi_line	int
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
swsdflt_get_value_type	function
(	O
swd	short
)	O
==	O
(	O
enum	O
swsdflt_value_type	enum
)	O
(	O
sdf_single_value	int
)	O
)	O
{	O
*	O
multi_line	int
=	O
0	int
;	O
}	O
else	O
{	O
*	O
multi_line	int
=	O
1	int
;	O
}	O
}	O
}	O
cplob_obj	pointer
=	O
cplob_open	function
(	O
2	int
)	O
;	O
cplob_add_nta	function
(	O
cplob_obj	pointer
,	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
)	O
;	O
while	O
(	O
(	O
line	pointer
=	O
swheader_get_next_attribute	function
(	O
swheader	pointer
)	O
)	O
)	O
{	O
keyw	pointer
=	O
swheaderline_get_keyword	function
(	O
line	pointer
)	O
;	O
if	O
(	O
!	O
strcmp	function
(	O
attribute_keyword	pointer
,	O
keyw	pointer
)	O
)	O
{	O
cplob_add_nta	function
(	O
cplob_obj	pointer
,	O
line	pointer
)	O
;	O
}	O
}	O
ret	pointer
=	O
cplob_release	function
(	O
cplob_obj	pointer
)	O
;	O
restore_state	function
(	O
swheader	pointer
,	O
&	O
state	pointer
)	O
;	O
return	O
ret	pointer
;	O
}	O
char	O
*	O
swheader_get_next_attribute	function
(	O
SWHEADER	struct
*	O
swheader	pointer
)	O
{	O
static	O
int	O
att_count	int
=	O
0	int
;	O
char	O
*	O
currentline	pointer
;	O
char	O
*	O
nextline	pointer
;	O
SWHEADER_E_DEBUG	O
(	O
""	pointer
)	O
;	O
nextline	pointer
=	O
swheader_goto_next_line	function
(	O
(	O
void	O
*	O
)	O
swheader	pointer
,	O
swheader_get_current_offset_p	function
(	O
swheader	pointer
)	O
,	O
SWHEADER_PEEK_NEXT	int
)	O
;	O
currentline	pointer
=	O
swheader_get_current_line	function
(	O
swheader	pointer
)	O
;	O
if	O
(	O
!	O
currentline	pointer
)	O
{	O
att_count	int
=	O
0	int
;	O
SWHEADER_E_DEBUG	O
(	O
"returning NULL loc 0"	pointer
)	O
;	O
return	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
;	O
}	O
else	O
if	O
(	O
(	O
swheaderline_get_type	function
(	O
currentline	pointer
)	O
==	O
SWPARSE_MD_TYPE_OBJ	char
)	O
&&	O
att_count	int
)	O
{	O
att_count	int
=	O
0	int
;	O
SWHEADER_E_DEBUG	O
(	O
"returning NULL loc 1"	pointer
)	O
;	O
return	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
nextline	pointer
||	O
(	O
swheaderline_get_type	function
(	O
nextline	pointer
)	O
==	O
SWPARSE_MD_TYPE_OBJ	char
)	O
)	O
{	O
att_count	int
=	O
0	int
;	O
SWHEADER_E_DEBUG	O
(	O
"returning NULL loc 2"	pointer
)	O
;	O
return	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
;	O
}	O
att_count	int
++	O
;	O
swheader_f_goto_next	function
(	O
swheader	pointer
)	O
;	O
SWHEADER_E_DEBUG2	O
(	O
"returning next line [%s]"	pointer
,	O
nextline	pointer
)	O
;	O
return	O
nextline	pointer
;	O
}	O
}	O
char	O
*	O
swheader_get_object_by_tag	function
(	O
SWHEADER	struct
*	O
swheader	pointer
,	O
char	O
*	O
object_keyword	pointer
,	O
char	O
*	O
idtag	pointer
)	O
{	O
SWVERID	struct
*	O
swverid	pointer
;	O
char	O
*	O
ret	pointer
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
swverid	pointer
=	O
swverid_open	function
(	O
object_keyword	pointer
,	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
swverid_set_tag	function
(	O
swverid	pointer
,	O
SW_A_tag	pointer
,	O
idtag	pointer
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
swverid_set_comparison_code	function
(	O
swverid	pointer
,	O
SWVERID_CMP_EQ	int
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
ret	pointer
=	O
get_object_by_swverid	function
(	O
swheader	pointer
,	O
swverid	pointer
,	O
swverid_vtagOLD_compare	function
,	O
(	O
int	O
*	O
)	O
NULL	O
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
swverid_close	function
(	O
swverid	pointer
)	O
;	O
return	O
ret	pointer
;	O
}	O
char	O
*	O
swverid_get_object_by_swverid	function
(	O
SWHEADER	struct
*	O
swheader	pointer
,	O
SWVERID	struct
*	O
swverid	pointer
,	O
int	O
*	O
nmatches	pointer
)	O
{	O
char	O
*	O
ret	pointer
;	O
ret	pointer
=	O
get_object_by_swverid	function
(	O
swheader	pointer
,	O
swverid	pointer
,	O
swverid_vtagOLD_compare	function
,	O
nmatches	pointer
)	O
;	O
return	O
ret	pointer
;	O
}	O
int	O
swheader_get_object_offset_by_control_directory	function
(	O
SWHEADER	struct
*	O
swheader	pointer
,	O
STRAR	struct
*	O
pairs	pointer
)	O
{	O
char	O
*	O
next_line	pointer
;	O
int	O
object_offset	int
=	O
0	int
;	O
char	O
*	O
control_directory	pointer
;	O
SWHEADER_E_DEBUG	O
(	O
""	pointer
)	O
;	O
next_line	pointer
=	O
swheader_get_current_line	function
(	O
swheader	pointer
)	O
;	O
if	O
(	O
!	O
next_line	pointer
)	O
return	O
-	O
1	int
;	O
while	O
(	O
next_line	pointer
&&	O
(	O
swheaderline_get_type	function
(	O
next_line	pointer
)	O
!=	O
SWPARSE_MD_TYPE_OBJ	char
)	O
)	O
{	O
next_line	pointer
=	O
swheader_f_goto_next	function
(	O
swheader	pointer
)	O
;	O
}	O
do	O
{	O
control_directory	pointer
=	O
swheader_get_single_attribute_value	function
(	O
swheader	pointer
,	O
SW_A_control_directory	pointer
)	O
;	O
}	O
while	O
(	O
(	O
next_line	pointer
=	O
swheader_get_next_object	function
(	O
swheader	pointer
,	O
(	O
int	O
)	O
(	O
UCHAR_MAX	O
)	O
,	O
(	O
int	O
)	O
UCHAR_MAX	O
)	O
)	O
)	O
;	O
swheader_set_current_offset_p_value	function
(	O
swheader	pointer
,	O
object_offset	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
char	O
*	O
swheader_raw_get_attribute_in_object	function
(	O
SWHEADER	struct
*	O
swheader	pointer
,	O
char	O
*	O
keyword	pointer
)	O
{	O
char	O
*	O
line	pointer
;	O
char	O
*	O
keyw	pointer
;	O
SWHEADER_E_DEBUG	O
(	O
""	pointer
)	O
;	O
line	pointer
=	O
swheader_get_next_attribute	function
(	O
swheader	pointer
)	O
;	O
while	O
(	O
line	pointer
)	O
{	O
keyw	pointer
=	O
swheaderline_get_keyword	function
(	O
line	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
keyw	pointer
,	O
keyword	pointer
)	O
==	O
0	int
)	O
{	O
return	O
line	pointer
;	O
}	O
line	pointer
=	O
swheader_get_next_attribute	function
(	O
swheader	pointer
)	O
;	O
}	O
return	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
int	O
swheader_fileobject2filehdr	function
(	O
SWHEADER	struct
*	O
fileheader	pointer
,	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
)	O
{	O
char	O
*	O
attr	pointer
;	O
char	O
*	O
keyword	pointer
;	O
char	O
*	O
value	long
;	O
int	O
len	int
;	O
int	O
ret	pointer
;	O
int	O
info_filetype	int
=	O
0	int
;	O
int	O
tartype	int
=	O
0	int
;	O
mode_t	int
modet	int
;	O
uid_t	int
uid	array
;	O
gid_t	int
gid	array
;	O
char	O
did_uname	char
=	O
0	int
;	O
char	O
did_gname	char
=	O
0	int
;	O
char	O
did_gid	char
=	O
0	int
;	O
char	O
did_uid	char
=	O
0	int
;	O
char	O
did_mtime	char
=	O
0	int
;	O
char	O
did_link_source	char
=	O
0	int
;	O
char	O
did_size	char
=	O
0	int
;	O
char	O
did_major	char
=	O
0	int
;	O
char	O
did_minor	char
=	O
0	int
;	O
char	O
did_type	char
=	O
0	int
;	O
SWHEADER_STATE	struct
state	pointer
;	O
taru_init_header	function
(	O
file_hdr	pointer
)	O
;	O
taru_init_header_digs	function
(	O
file_hdr	pointer
)	O
;	O
swheader_store_state	function
(	O
fileheader	pointer
,	O
&	O
state	pointer
)	O
;	O
while	O
(	O
(	O
attr	pointer
=	O
swheader_get_next_attribute	function
(	O
fileheader	pointer
)	O
)	O
)	O
{	O
keyword	pointer
=	O
swheaderline_get_keyword	function
(	O
attr	pointer
)	O
;	O
value	long
=	O
swheaderline_get_value	function
(	O
attr	pointer
,	O
&	O
len	int
)	O
;	O
if	O
(	O
strcmp	function
(	O
keyword	pointer
,	O
SW_A_mode	pointer
)	O
==	O
0	int
)	O
{	O
file_hdr	pointer
->	O
c_mode	short
=	O
0	int
;	O
taru_otoul	function
(	O
value	long
,	O
&	O
(	O
file_hdr	pointer
->	O
c_mode	short
)	O
)	O
;	O
file_hdr	pointer
->	O
c_mode	short
=	O
file_hdr	pointer
->	O
c_mode	short
&	O
07777	int
;	O
(	O
file_hdr	pointer
->	O
usage_maskM	char
)	O
|=	O
TARU_UM_MODE	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
keyword	pointer
,	O
SW_A_size	pointer
)	O
==	O
0	int
)	O
{	O
file_hdr	pointer
->	O
c_filesize	long
=	O
(	O
unsigned	O
long	O
)	O
atol	function
(	O
value	long
)	O
;	O
if	O
(	O
file_hdr	pointer
->	O
digsM	pointer
)	O
{	O
swlib_strncpy	function
(	O
file_hdr	pointer
->	O
digsM	pointer
->	O
size	array
,	O
value	long
,	O
sizeof	O
(	O
file_hdr	pointer
->	O
digsM	pointer
->	O
size	array
)	O
)	O
;	O
file_hdr	pointer
->	O
digsM	pointer
->	O
do_size	short
=	O
DIGS_ENABLE_ON	int
;	O
}	O
did_size	char
=	O
1	int
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
keyword	pointer
,	O
SW_A_path	pointer
)	O
==	O
0	int
)	O
{	O
ahsStaticSetTarFilename	function
(	O
file_hdr	pointer
,	O
value	long
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
keyword	pointer
,	O
SW_A_uid	pointer
)	O
==	O
0	int
)	O
{	O
E_DEBUG	O
(	O
"uid"	pointer
)	O
;	O
file_hdr	pointer
->	O
c_uid	short
=	O
(	O
unsigned	O
long	O
)	O
atol	function
(	O
value	long
)	O
;	O
(	O
file_hdr	pointer
->	O
usage_maskM	char
)	O
|=	O
TARU_UM_UID	O
;	O
did_uid	char
=	O
1	int
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
keyword	pointer
,	O
SW_A_gid	pointer
)	O
==	O
0	int
)	O
{	O
E_DEBUG	O
(	O
"gid"	pointer
)	O
;	O
file_hdr	pointer
->	O
c_gid	short
=	O
(	O
unsigned	O
long	O
)	O
atol	function
(	O
value	long
)	O
;	O
(	O
file_hdr	pointer
->	O
usage_maskM	char
)	O
|=	O
TARU_UM_GID	O
;	O
did_gid	char
=	O
1	int
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
keyword	pointer
,	O
SW_A_link_source	pointer
)	O
==	O
0	int
)	O
{	O
ahsStaticSetPaxLinkname	function
(	O
file_hdr	pointer
,	O
value	long
)	O
;	O
did_link_source	char
=	O
1	int
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
keyword	pointer
,	O
SW_A_owner	pointer
)	O
==	O
0	int
)	O
{	O
E_DEBUG	O
(	O
"owner"	pointer
)	O
;	O
ahsStaticSetTarUsername	function
(	O
file_hdr	pointer
,	O
value	long
)	O
;	O
did_uname	char
=	O
1	int
;	O
(	O
file_hdr	pointer
->	O
usage_maskM	char
)	O
|=	O
TARU_UM_OWNER	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
keyword	pointer
,	O
SW_A_group	pointer
)	O
==	O
0	int
)	O
{	O
E_DEBUG	O
(	O
"group"	pointer
)	O
;	O
ahsStaticSetTarGroupname	function
(	O
file_hdr	pointer
,	O
value	long
)	O
;	O
did_gname	char
=	O
1	int
;	O
(	O
file_hdr	pointer
->	O
usage_maskM	char
)	O
|=	O
TARU_UM_GROUP	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
keyword	pointer
,	O
SW_A_mtime	pointer
)	O
==	O
0	int
)	O
{	O
E_DEBUG	O
(	O
"mtime"	pointer
)	O
;	O
file_hdr	pointer
->	O
c_mtime	long
=	O
strtoul	function
(	O
value	long
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
10	int
)	O
;	O
did_mtime	char
=	O
1	int
;	O
(	O
file_hdr	pointer
->	O
usage_maskM	char
)	O
|=	O
TARU_UM_MTIME	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
keyword	pointer
,	O
SW_A_major	pointer
)	O
==	O
0	int
)	O
{	O
E_DEBUG	O
(	O
SW_A_major	pointer
)	O
;	O
file_hdr	pointer
->	O
c_rdev_maj	long
=	O
swlib_atoi	function
(	O
value	long
,	O
NULL	O
)	O
;	O
did_major	char
=	O
1	int
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
keyword	pointer
,	O
SW_A_minor	pointer
)	O
==	O
0	int
)	O
{	O
E_DEBUG	O
(	O
SW_A_minor	pointer
)	O
;	O
file_hdr	pointer
->	O
c_rdev_min	long
=	O
swlib_atoi	function
(	O
value	long
,	O
NULL	O
)	O
;	O
did_minor	char
=	O
1	int
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
keyword	pointer
,	O
"md5sum"	pointer
)	O
==	O
0	int
)	O
{	O
E_DEBUG	O
(	O
"md5sum"	pointer
)	O
;	O
if	O
(	O
file_hdr	pointer
->	O
digsM	pointer
)	O
{	O
E_DEBUG	O
(	O
"md5sum: DIGS_ENABLE_ON"	pointer
)	O
;	O
swlib_strncpy	function
(	O
file_hdr	pointer
->	O
digsM	pointer
->	O
md5	array
,	O
value	long
,	O
sizeof	O
(	O
file_hdr	pointer
->	O
digsM	pointer
->	O
md5	array
)	O
)	O
;	O
file_hdr	pointer
->	O
digsM	pointer
->	O
do_md5	short
=	O
DIGS_ENABLE_ON	int
;	O
}	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
keyword	pointer
,	O
"sha1sum"	pointer
)	O
==	O
0	int
)	O
{	O
E_DEBUG	O
(	O
"sha1sum"	pointer
)	O
;	O
if	O
(	O
file_hdr	pointer
->	O
digsM	pointer
)	O
{	O
E_DEBUG	O
(	O
"sha1sum: DIGS_ENABLE_ON"	pointer
)	O
;	O
swlib_strncpy	function
(	O
file_hdr	pointer
->	O
digsM	pointer
->	O
sha1	array
,	O
value	long
,	O
sizeof	O
(	O
file_hdr	pointer
->	O
digsM	pointer
->	O
sha1	array
)	O
)	O
;	O
file_hdr	pointer
->	O
digsM	pointer
->	O
do_sha1	short
=	O
DIGS_ENABLE_ON	int
;	O
}	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
keyword	pointer
,	O
"sha512sum"	pointer
)	O
==	O
0	int
)	O
{	O
E_DEBUG	O
(	O
"sha512sum"	pointer
)	O
;	O
if	O
(	O
file_hdr	pointer
->	O
digsM	pointer
)	O
{	O
E_DEBUG	O
(	O
"sha512sum: DIGS_ENABLE_ON"	pointer
)	O
;	O
swlib_strncpy	function
(	O
file_hdr	pointer
->	O
digsM	pointer
->	O
sha512	array
,	O
value	long
,	O
sizeof	O
(	O
file_hdr	pointer
->	O
digsM	pointer
->	O
sha512	array
)	O
)	O
;	O
file_hdr	pointer
->	O
digsM	pointer
->	O
do_sha512	short
=	O
DIGS_ENABLE_ON	int
;	O
}	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
keyword	pointer
,	O
SW_A_type	pointer
)	O
==	O
0	int
)	O
{	O
info_filetype	int
=	O
(	O
int	O
)	O
(	O
*	O
value	long
)	O
;	O
did_type	char
=	O
1	int
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
keyword	pointer
,	O
SW_A_is_volatile	pointer
)	O
==	O
0	int
)	O
{	O
(	O
file_hdr	pointer
->	O
usage_maskM	char
)	O
|=	O
TARU_UM_IS_VOLATILE	O
;	O
}	O
}	O
tartype	int
=	O
swheader_getTarTypeFromTypeAttribute	function
(	O
info_filetype	int
)	O
;	O
if	O
(	O
tartype	int
==	O
LNKTYPE	char
)	O
file_hdr	pointer
->	O
c_is_tar_lnktype	char
=	O
1	int
;	O
else	O
file_hdr	pointer
->	O
c_is_tar_lnktype	char
=	O
0	int
;	O
taru_set_filetype_from_tartype	function
(	O
(	O
char	O
)	O
tartype	int
,	O
(	O
modet	int
=	O
(	O
mode_t	int
)	O
(	O
file_hdr	pointer
->	O
c_mode	short
)	O
,	O
&	O
modet	int
)	O
,	O
"/"	pointer
)	O
;	O
file_hdr	pointer
->	O
c_mode	short
=	O
(	O
unsigned	O
long	O
)	O
modet	int
;	O
if	O
(	O
did_uname	char
&&	O
did_uid	char
)	O
{	O
file_hdr	pointer
->	O
c_cu	char
=	O
TARU_C_BY_UNONE	int
;	O
}	O
else	O
if	O
(	O
did_uid	char
)	O
{	O
ahsStaticSetTarUsername	function
(	O
file_hdr	pointer
,	O
""	pointer
)	O
;	O
file_hdr	pointer
->	O
c_cu	char
=	O
TARU_C_BY_UNONE	int
;	O
}	O
if	O
(	O
did_gname	char
&&	O
did_gid	char
)	O
{	O
file_hdr	pointer
->	O
c_cg	char
=	O
TARU_C_BY_UNONE	int
;	O
}	O
else	O
if	O
(	O
did_gid	char
)	O
{	O
ahsStaticSetTarGroupname	function
(	O
file_hdr	pointer
,	O
""	pointer
)	O
;	O
file_hdr	pointer
->	O
c_cg	char
=	O
TARU_C_BY_UNONE	int
;	O
}	O
if	O
(	O
(	O
!	O
did_gname	char
&&	O
!	O
did_gid	char
)	O
||	O
(	O
!	O
did_uname	char
&&	O
!	O
did_uid	char
)	O
)	O
{	O
swheader_restore_state	function
(	O
fileheader	pointer
,	O
&	O
state	pointer
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
!	O
did_gid	char
)	O
{	O
ret	pointer
=	O
taru_get_gid_by_name	function
(	O
ahsStaticGetTarGroupname	function
(	O
file_hdr	pointer
)	O
,	O
&	O
gid	array
)	O
;	O
if	O
(	O
ret	pointer
==	O
0	int
)	O
{	O
file_hdr	pointer
->	O
c_gid	short
=	O
(	O
unsigned	O
long	O
)	O
gid	array
;	O
}	O
}	O
if	O
(	O
!	O
did_uid	char
)	O
{	O
ret	pointer
=	O
taru_get_uid_by_name	function
(	O
ahsStaticGetTarUsername	function
(	O
file_hdr	pointer
)	O
,	O
&	O
uid	array
)	O
;	O
if	O
(	O
ret	pointer
==	O
0	int
)	O
{	O
file_hdr	pointer
->	O
c_uid	short
=	O
(	O
unsigned	O
long	O
)	O
uid	array
;	O
}	O
}	O
swheader_restore_state	function
(	O
fileheader	pointer
,	O
&	O
state	pointer
)	O
;	O
return	O
0	int
;	O
}	O
char	O
swheader_getTarTypeFromTypeAttribute	function
(	O
char	O
ch	int
)	O
{	O
switch	O
(	O
ch	int
)	O
{	O
case	O
'f'	O
:	O
return	O
REGTYPE	char
;	O
case	O
'd'	O
:	O
return	O
DIRTYPE	char
;	O
case	O
'c'	O
:	O
return	O
CHRTYPE	char
;	O
case	O
'b'	O
:	O
return	O
BLKTYPE	char
;	O
case	O
'p'	O
:	O
return	O
FIFOTYPE	char
;	O
case	O
's'	O
:	O
return	O
SYMTYPE	char
;	O
case	O
'h'	O
:	O
return	O
LNKTYPE	char
;	O
case	O
SW_ITYPE_y	char
:	O
return	O
NOTDUMPEDTYPE	char
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: invalid C701 file type [%c]  not found, ignoring.\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
ch	int
)	O
;	O
return	O
REGTYPE	char
;	O
}	O
}	O
void	O
swheader_print_header	function
(	O
SWHEADER	struct
*	O
swheader	pointer
)	O
{	O
char	O
*	O
next_attr	pointer
;	O
char	O
*	O
next_line	pointer
;	O
SWHEADER_STATE	struct
state	pointer
;	O
swheader_store_state	function
(	O
swheader	pointer
,	O
&	O
state	pointer
)	O
;	O
swheader_reset	function
(	O
swheader	pointer
)	O
;	O
swheader_set_current_offset_p_value	function
(	O
swheader	pointer
,	O
0	int
)	O
;	O
next_line	pointer
=	O
swheader_get_next_object	function
(	O
swheader	pointer
,	O
(	O
int	O
)	O
UCHAR_MAX	O
,	O
(	O
int	O
)	O
UCHAR_MAX	O
)	O
;	O
while	O
(	O
next_line	pointer
)	O
{	O
swheaderline_write_debug	function
(	O
next_line	pointer
,	O
STDERR_FILENO	int
)	O
;	O
swheader_goto_next_line	function
(	O
(	O
void	O
*	O
)	O
swheader	pointer
,	O
swheader_get_current_offset_p	function
(	O
swheader	pointer
)	O
,	O
SWHEADER_PEEK_NEXT	int
)	O
;	O
while	O
(	O
(	O
next_attr	pointer
=	O
swheader_get_next_attribute	function
(	O
swheader	pointer
)	O
)	O
)	O
swheaderline_write_debug	function
(	O
next_attr	pointer
,	O
STDERR_FILENO	int
)	O
;	O
next_line	pointer
=	O
swheader_get_next_object	function
(	O
swheader	pointer
,	O
(	O
int	O
)	O
UCHAR_MAX	O
,	O
(	O
int	O
)	O
UCHAR_MAX	O
)	O
;	O
}	O
swheader_restore_state	function
(	O
swheader	pointer
,	O
&	O
state	pointer
)	O
;	O
}	O