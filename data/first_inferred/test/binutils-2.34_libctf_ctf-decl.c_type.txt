void	O
ctf_decl_init	function
(	O
ctf_decl_t	struct
*	O
cd	*
)	O
{	O
int	O
i	int
;	O
memset	function
(	O
cd	*
,	O
0	int
,	O
sizeof	O
(	O
ctf_decl_t	*
)	O
)	O
;	O
for	O
(	O
i	int
=	O
CTF_PREC_BASE	int
;	O
i	int
<	O
CTF_PREC_MAX	int
;	O
i	int
++	O
)	O
cd	*
->	O
cd_order	array
[	O
i	int
]	O
=	O
CTF_PREC_BASE	int
-	O
1	int
;	O
cd	*
->	O
cd_qualp	*
=	O
CTF_PREC_BASE	int
;	O
cd	*
->	O
cd_ordp	int
=	O
CTF_PREC_BASE	int
;	O
}	O
void	O
ctf_decl_fini	function
(	O
ctf_decl_t	struct
*	O
cd	*
)	O
{	O
ctf_decl_node_t	struct
*	O
cdp	*
,	O
*	O
ndp	*
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
CTF_PREC_BASE	int
;	O
i	int
<	O
CTF_PREC_MAX	int
;	O
i	int
++	O
)	O
{	O
for	O
(	O
cdp	int
=	O
ctf_list_next	function
(	O
&	O
cd	*
->	O
cd_nodes	array
[	O
i	int
]	O
)	O
;	O
cdp	*
!=	O
NULL	O
;	O
cdp	int
=	O
ndp	int
)	O
{	O
ndp	*
=	O
ctf_list_next	function
(	O
cdp	*
)	O
;	O
free	function
(	O
cdp	*
)	O
;	O
}	O
}	O
}	O
void	O
ctf_decl_push	function
(	O
ctf_decl_t	struct
*	O
cd	*
,	O
ctf_file_t	struct
*	O
fp	*
,	O
ctf_id_t	enum
type	enum
)	O
{	O
ctf_decl_node_t	struct
*	O
cdp	*
;	O
ctf_decl_prec_t	enum
prec	enum
;	O
uint32_t	int
kind	int
,	O
n	int
=	O
1	int
;	O
int	O
is_qual	int
=	O
0	int
;	O
const	O
ctf_type_t	struct
*	O
tp	*
;	O
ctf_arinfo_t	struct
ar	double
;	O
if	O
(	O
(	O
tp	*
=	O
ctf_lookup_by_id	function
(	O
&	O
fp	*
,	O
type	*
)	O
)	O
==	O
NULL	O
)	O
{	O
cd	*
->	O
cd_err	*
=	O
fp	*
->	O
ctf_errno	function
;	O
return	O
;	O
}	O
switch	O
(	O
kind	int
=	O
LCTF_INFO_KIND	function
(	O
fp	*
,	O
tp	*
->	O
ctt_info	int
)	O
)	O
{	O
case	O
CTF_K_ARRAY	int
:	O
(	O
void	O
)	O
ctf_array_info	function
(	O
fp	*
,	O
type	*
,	O
&	O
ar	struct
)	O
;	O
ctf_decl_push	function
(	O
cd	*
,	O
fp	*
,	O
ar	struct
.	O
ctr_contents	int
)	O
;	O
n	int
=	O
ar	struct
.	O
ctr_nelems	int
;	O
prec	int
=	O
CTF_PREC_ARRAY	int
;	O
break	O
;	O
case	O
CTF_K_TYPEDEF	int
:	O
if	O
(	O
ctf_strptr	function
(	O
fp	*
,	O
tp	*
->	O
ctt_name	*
)	O
[	O
0	int
]	O
==	O
'\0'	O
)	O
{	O
ctf_decl_push	function
(	O
cd	*
,	O
fp	*
,	O
tp	*
->	O
ctt_type	*
)	O
;	O
return	O
;	O
}	O
prec	int
=	O
CTF_PREC_BASE	int
;	O
break	O
;	O
case	O
CTF_K_FUNCTION	int
:	O
ctf_decl_push	function
(	O
cd	*
,	O
fp	*
,	O
tp	*
->	O
ctt_type	int
)	O
;	O
prec	int
=	O
CTF_PREC_FUNCTION	int
;	O
break	O
;	O
case	O
CTF_K_POINTER	int
:	O
ctf_decl_push	function
(	O
cd	*
,	O
fp	*
,	O
tp	*
->	O
ctt_type	int
)	O
;	O
prec	int
=	O
CTF_PREC_POINTER	int
;	O
break	O
;	O
case	O
CTF_K_SLICE	int
:	O
ctf_decl_push	function
(	O
cd	*
,	O
fp	*
,	O
ctf_type_reference	function
(	O
fp	*
,	O
type	int
)	O
)	O
;	O
prec	int
=	O
CTF_PREC_BASE	int
;	O
break	O
;	O
case	O
CTF_K_VOLATILE	int
:	O
case	O
CTF_K_CONST	int
:	O
case	O
CTF_K_RESTRICT	int
:	O
ctf_decl_push	function
(	O
cd	*
,	O
fp	*
,	O
tp	*
->	O
ctt_type	int
)	O
;	O
prec	int
=	O
cd	*
->	O
cd_qualp	int
;	O
is_qual	int
++	O
;	O
break	O
;	O
default	O
:	O
prec	int
=	O
CTF_PREC_BASE	int
;	O
}	O
if	O
(	O
(	O
cdp	*
=	O
malloc	function
(	O
sizeof	O
(	O
ctf_decl_node_t	struct
)	O
)	O
)	O
==	O
NULL	O
)	O
{	O
cd	*
->	O
cd_err	int
=	O
EAGAIN	int
;	O
return	O
;	O
}	O
cdp	*
->	O
cd_type	int
=	O
type	int
;	O
cdp	*
->	O
cd_kind	enum
=	O
kind	int
;	O
cdp	*
->	O
cd_n	long
=	O
n	int
;	O
if	O
(	O
ctf_list_next	function
(	O
&	O
cd	*
->	O
cd_nodes	array
[	O
prec	int
]	O
)	O
==	O
NULL	O
)	O
cd	*
->	O
cd_order	array
[	O
prec	int
]	O
=	O
cd	*
->	O
cd_ordp	int
++	O
;	O
if	O
(	O
prec	int
>	O
cd	*
->	O
cd_qualp	int
&&	O
prec	int
<	O
CTF_PREC_ARRAY	int
)	O
cd	*
->	O
cd_qualp	enum
=	O
prec	int
;	O
if	O
(	O
kind	enum
==	O
CTF_K_ARRAY	int
||	O
(	O
is_qual	int
&&	O
prec	int
==	O
CTF_PREC_BASE	int
)	O
)	O
ctf_list_prepend	function
(	O
&	O
cd	*
->	O
cd_nodes	array
[	O
prec	int
]	O
,	O
cdp	*
)	O
;	O
else	O
ctf_list_append	function
(	O
&	O
cd	*
->	O
cd_nodes	array
[	O
prec	int
]	O
,	O
cdp	*
)	O
;	O
}	O
_libctf_printflike_	O
(	O
2	int
,	O
3	int
)	O
void	O
ctf_decl_sprintf	function
(	O
ctf_decl_t	struct
*	O
cd	*
,	O
const	O
char	O
*	O
format	*
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
char	O
*	O
str	*
;	O
int	O
n	int
;	O
if	O
(	O
cd	*
->	O
cd_enomem	*
)	O
return	O
;	O
va_start	O
(	O
ap	*
,	O
format	*
)	O
;	O
n	int
=	O
vasprintf	function
(	O
&	O
str	*
,	O
format	*
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
if	O
(	O
n	int
>	O
0	int
)	O
{	O
char	O
*	O
newbuf	*
;	O
if	O
(	O
(	O
newbuf	*
=	O
ctf_str_append	function
(	O
cd	*
->	O
cd_buf	*
,	O
str	*
)	O
)	O
!=	O
NULL	O
)	O
cd	*
->	O
cd_buf	*
=	O
newbuf	*
;	O
}	O
if	O
(	O
n	int
<	O
0	int
||	O
cd	*
->	O
cd_buf	*
==	O
NULL	O
)	O
{	O
free	function
(	O
cd	*
->	O
cd_buf	*
)	O
;	O
cd	*
->	O
cd_buf	*
=	O
NULL	O
;	O
cd	*
->	O
cd_enomem	int
=	O
1	int
;	O
}	O
free	function
(	O
str	*
)	O
;	O
}	O
char	O
*	O
ctf_decl_buf	function
(	O
ctf_decl_t	struct
*	O
cd	*
)	O
{	O
return	O
cd	*
->	O
cd_buf	*
;	O
}	O