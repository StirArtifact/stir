static	O
int	O
pop3_itr_dup	function
(	O
void	O
*	O
*	O
ptr	*
,	O
void	O
*	O
owner	*
)	O
;	O
static	O
int	O
pop3_itr_destroy	function
(	O
mu_iterator_t	*
itr	*
,	O
void	O
*	O
owner	*
)	O
;	O
static	O
int	O
pop3_itr_first	function
(	O
void	O
*	O
owner	*
)	O
;	O
static	O
int	O
pop3_itr_next	function
(	O
void	O
*	O
woner	*
)	O
;	O
static	O
int	O
pop3_itr_getitem	function
(	O
void	O
*	O
owner	*
,	O
void	O
*	O
*	O
pret	*
,	O
const	O
void	O
*	O
*	O
pkey	*
)	O
;	O
static	O
int	O
pop3_itr_delitem	function
(	O
void	O
*	O
owner	*
,	O
void	O
*	O
data	*
)	O
;	O
static	O
int	O
pop3_itr_finished_p	function
(	O
void	O
*	O
owner	*
)	O
;	O
struct	O
pop3_iterator	struct
{	O
mu_pop3_t	*
pop3	*
;	O
mu_stream_t	*
stream	*
;	O
int	O
done	int
;	O
char	O
*	O
item	*
;	O
char	O
*	O
rdbuf	*
;	O
size_t	long
rdsize	long
;	O
}	O
;	O
int	O
mu_pop3_iterator_create	function
(	O
mu_pop3_t	*
pop3	*
,	O
mu_iterator_t	*
*	O
piterator	*
)	O
{	O
struct	O
pop3_iterator	struct
*	O
pop3_iterator	*
;	O
mu_iterator_t	*
iterator	*
;	O
int	O
status	int
;	O
pop3_iterator	*
=	O
malloc	function
(	O
sizeof	O
*	O
pop3_iterator	*
)	O
;	O
if	O
(	O
pop3_iterator	*
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
status	int
=	O
mu_pop3_stream_create	function
(	O
pop3	*
,	O
&	O
pop3_iterator	*
->	O
stream	*
)	O
;	O
if	O
(	O
status	int
)	O
{	O
free	function
(	O
pop3_iterator	*
)	O
;	O
return	O
status	int
;	O
}	O
pop3_iterator	*
->	O
item	*
=	O
NULL	O
;	O
pop3_iterator	*
->	O
rdbuf	*
=	O
NULL	O
;	O
pop3_iterator	*
->	O
rdsize	long
=	O
0	int
;	O
pop3_iterator	*
->	O
done	int
=	O
0	int
;	O
pop3_iterator	*
->	O
pop3	*
=	O
pop3	*
;	O
status	int
=	O
mu_iterator_create	function
(	O
&	O
iterator	*
,	O
pop3_iterator	*
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
{	O
free	function
(	O
pop3_iterator	*
)	O
;	O
return	O
status	int
;	O
}	O
mu_iterator_set_first	function
(	O
iterator	*
,	O
pop3_itr_first	function
)	O
;	O
mu_iterator_set_next	function
(	O
iterator	*
,	O
pop3_itr_next	function
)	O
;	O
mu_iterator_set_getitem	function
(	O
iterator	*
,	O
pop3_itr_getitem	function
)	O
;	O
mu_iterator_set_finished_p	function
(	O
iterator	*
,	O
pop3_itr_finished_p	function
)	O
;	O
mu_iterator_set_delitem	function
(	O
iterator	*
,	O
pop3_itr_delitem	function
)	O
;	O
mu_iterator_set_destroy	function
(	O
iterator	*
,	O
pop3_itr_destroy	function
)	O
;	O
mu_iterator_set_dup	function
(	O
iterator	*
,	O
pop3_itr_dup	function
)	O
;	O
*	O
piterator	*
=	O
iterator	*
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pop3_itr_dup	function
(	O
void	O
*	O
*	O
ptr	*
,	O
void	O
*	O
owner	*
)	O
{	O
struct	O
pop3_iterator	struct
*	O
pop3_iterator	*
=	O
(	O
struct	O
pop3_iterator	struct
*	O
)	O
owner	*
;	O
struct	O
pop3_iterator	struct
*	O
clone	*
=	O
malloc	function
(	O
sizeof	O
*	O
pop3_iterator	*
)	O
;	O
if	O
(	O
clone	*
==	O
NULL	O
)	O
return	O
ENOMEM	O
;	O
*	O
clone	O
=	O
*	O
pop3_iterator	*
;	O
*	O
ptr	*
=	O
clone	function
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pop3_itr_destroy	function
(	O
mu_iterator_t	*
iterator	*
,	O
void	O
*	O
owner	*
)	O
{	O
struct	O
pop3_iterator	struct
*	O
pop3_iterator	*
=	O
(	O
struct	O
pop3_iterator	struct
*	O
)	O
owner	*
;	O
if	O
(	O
!	O
pop3_iterator	*
->	O
done	int
)	O
{	O
char	O
buf	*
[	O
128	int
]	O
;	O
size_t	long
n	long
=	O
0	int
;	O
mu_stream_t	*
str	*
=	O
pop3_iterator	*
->	O
pop3	*
->	O
carrier	*
;	O
while	O
(	O
mu_stream_readline	function
(	O
str	*
,	O
buf	*
,	O
sizeof	O
buf	*
,	O
&	O
n	long
)	O
>	O
0	int
&&	O
n	long
>	O
0	int
)	O
n	long
=	O
0	int
;	O
}	O
if	O
(	O
pop3_iterator	*
->	O
item	*
)	O
free	function
(	O
pop3_iterator	*
->	O
item	*
)	O
;	O
if	O
(	O
pop3_iterator	*
->	O
rdbuf	*
)	O
free	function
(	O
pop3_iterator	*
->	O
rdbuf	*
)	O
;	O
pop3_iterator	*
->	O
pop3	*
->	O
state	*
=	O
MU_POP3_NO_STATE	int
;	O
free	function
(	O
pop3_iterator	*
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pop3_itr_first	function
(	O
void	O
*	O
data	*
)	O
{	O
return	O
pop3_itr_next	function
(	O
data	*
)	O
;	O
}	O
static	O
int	O
pop3_itr_next	function
(	O
void	O
*	O
owner	*
)	O
{	O
struct	O
pop3_iterator	struct
*	O
pop3_iterator	*
=	O
(	O
struct	O
pop3_iterator	struct
*	O
)	O
owner	*
;	O
int	O
status	int
=	O
0	int
;	O
size_t	long
n	int
;	O
status	int
=	O
mu_stream_getline	function
(	O
pop3_iterator	*
->	O
stream	*
,	O
&	O
pop3_iterator	*
->	O
rdbuf	*
,	O
&	O
pop3_iterator	*
->	O
rdsize	long
,	O
&	O
n	long
)	O
;	O
if	O
(	O
status	int
||	O
n	int
==	O
0	int
)	O
{	O
pop3_iterator	*
->	O
done	int
=	O
1	int
;	O
pop3_iterator	*
->	O
pop3	*
->	O
state	*
=	O
MU_POP3_NO_STATE	int
;	O
return	O
0	int
;	O
}	O
n	long
=	O
mu_rtrim_class	function
(	O
pop3_iterator	*
->	O
rdbuf	*
,	O
MU_CTYPE_SPACE	int
)	O
;	O
if	O
(	O
n	long
==	O
1	int
&&	O
pop3_iterator	*
->	O
rdbuf	*
[	O
0	int
]	O
==	O
'.'	O
)	O
{	O
pop3_iterator	*
->	O
done	int
=	O
1	int
;	O
pop3_iterator	*
->	O
pop3	*
->	O
state	int
=	O
MU_POP3_NO_STATE	int
;	O
}	O
else	O
pop3_iterator	*
->	O
item	*
=	O
pop3_iterator	*
->	O
rdbuf	*
;	O
return	O
status	int
;	O
}	O
static	O
int	O
pop3_itr_getitem	function
(	O
void	O
*	O
owner	*
,	O
void	O
*	O
*	O
item	*
,	O
const	O
void	O
*	O
*	O
pkey	*
)	O
{	O
struct	O
pop3_iterator	struct
*	O
pop3_iterator	*
=	O
(	O
struct	O
pop3_iterator	struct
*	O
)	O
owner	*
;	O
if	O
(	O
item	*
)	O
{	O
*	O
(	O
(	O
char	O
*	O
*	O
)	O
item	*
)	O
=	O
pop3_iterator	*
->	O
item	*
;	O
pop3_iterator	*
->	O
item	*
=	O
NULL	O
;	O
}	O
if	O
(	O
pkey	*
)	O
*	O
pkey	*
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pop3_itr_finished_p	function
(	O
void	O
*	O
owner	*
)	O
{	O
struct	O
pop3_iterator	struct
*	O
pop3_iterator	*
=	O
(	O
struct	O
pop3_iterator	struct
*	O
)	O
owner	*
;	O
return	O
pop3_iterator	*
->	O
done	*
;	O
}	O
static	O
int	O
pop3_itr_delitem	function
(	O
void	O
*	O
owner	*
,	O
void	O
*	O
item	*
)	O
{	O
struct	O
pop3_iterator	struct
*	O
pop3_iterator	*
=	O
(	O
struct	O
pop3_iterator	struct
*	O
)	O
owner	*
;	O
return	O
*	O
(	O
(	O
char	O
*	O
*	O
)	O
item	*
)	O
==	O
pop3_iterator	*
->	O
item	*
?	O
MU_ITR_DELITEM_NEXT	int
:	O
MU_ITR_DELITEM_NOTHING	int
;	O
}	O