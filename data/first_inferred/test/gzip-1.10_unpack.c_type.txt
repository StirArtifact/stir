local	O
ulg	long
orig_len	long
;	O
local	O
int	O
max_len	int
;	O
local	O
uch	char
literal	array
[	O
LITERALS	int
]	O
;	O
local	O
int	O
lit_base	array
[	O
MAX_BITLEN	int
+	O
1	int
]	O
;	O
local	O
int	O
leaves	array
[	O
MAX_BITLEN	int
+	O
1	int
]	O
;	O
local	O
int	O
parents	array
[	O
MAX_BITLEN	int
+	O
1	int
]	O
;	O
local	O
int	O
peek_bits	int
;	O
local	O
ulg	long
bitbuf	long
;	O
local	O
int	O
valid	int
;	O
static	O
unsigned	O
char	O
read_byte	function
(	O
void	O
)	O
{	O
int	O
b	int
=	O
get_byte	O
(	O
)	O
;	O
if	O
(	O
b	int
<	O
0	int
)	O
gzip_error	function
(	O
"invalid compressed data -- unexpected end of file"	*
)	O
;	O
return	O
b	int
;	O
}	O
local	O
void	O
read_tree	function
(	O
void	O
)	O
;	O
local	O
void	O
build_tree	function
(	O
void	O
)	O
;	O
local	O
void	O
read_tree	function
(	O
)	O
{	O
int	O
len	int
;	O
int	O
base	int
;	O
int	O
n	int
;	O
int	O
max_leaves	int
=	O
1	int
;	O
orig_len	long
=	O
0	int
;	O
for	O
(	O
n	int
=	O
1	int
;	O
n	int
<=	O
4	int
;	O
n	int
++	O
)	O
orig_len	long
=	O
(	O
orig_len	long
<<	O
8	int
)	O
|	O
read_byte	function
(	O
)	O
;	O
max_len	int
=	O
read_byte	function
(	O
)	O
;	O
if	O
(	O
!	O
(	O
0	int
<	O
max_len	int
&&	O
max_len	int
<=	O
MAX_BITLEN	int
)	O
)	O
gzip_error	function
(	O
"invalid compressed data -- "	*
"Huffman code bit length out of range"	*
)	O
;	O
n	int
=	O
0	int
;	O
for	O
(	O
len	int
=	O
1	int
;	O
len	int
<=	O
max_len	int
;	O
len	int
++	O
)	O
{	O
leaves	array
[	O
len	int
]	O
=	O
read_byte	function
(	O
)	O
;	O
if	O
(	O
max_leaves	int
-	O
(	O
len	int
==	O
max_len	int
)	O
<	O
leaves	array
[	O
len	int
]	O
)	O
gzip_error	function
(	O
"too many leaves in Huffman tree"	*
)	O
;	O
max_leaves	int
=	O
(	O
max_leaves	*
-	O
leaves	array
[	O
len	int
]	O
+	O
1	int
)	O
*	O
2	int
-	O
1	int
;	O
n	int
+=	O
leaves	array
[	O
len	int
]	O
;	O
}	O
if	O
(	O
LITERALS	int
<=	O
n	int
)	O
{	O
gzip_error	function
(	O
"too many leaves in Huffman tree"	*
)	O
;	O
}	O
Trace	function
(	O
(	O
stderr	*
,	O
"orig_len %lu, max_len %d, leaves %d\n"	*
,	O
orig_len	long
,	O
max_len	*
,	O
n	int
)	O
)	O
;	O
leaves	array
[	O
max_len	int
]	O
++	O
;	O
base	int
=	O
0	int
;	O
for	O
(	O
len	int
=	O
1	int
;	O
len	int
<=	O
max_len	int
;	O
len	int
++	O
)	O
{	O
lit_base	array
[	O
len	int
]	O
=	O
base	*
;	O
for	O
(	O
n	int
=	O
leaves	array
[	O
len	int
]	O
;	O
n	int
>	O
0	int
;	O
n	int
--	O
)	O
{	O
literal	array
[	O
base	int
++	O
]	O
=	O
read_byte	function
(	O
)	O
;	O
}	O
}	O
leaves	array
[	O
max_len	int
]	O
++	O
;	O
}	O
local	O
void	O
build_tree	function
(	O
)	O
{	O
int	O
nodes	int
=	O
0	int
;	O
int	O
len	int
;	O
uch	char
*	O
prefixp	*
;	O
for	O
(	O
len	int
=	O
max_len	int
;	O
len	int
>=	O
1	int
;	O
len	int
--	O
)	O
{	O
nodes	int
>>=	O
1	int
;	O
parents	*
[	O
len	int
]	O
=	O
nodes	*
;	O
lit_base	array
[	O
len	int
]	O
-=	O
nodes	int
;	O
nodes	int
+=	O
leaves	array
[	O
len	int
]	O
;	O
}	O
if	O
(	O
(	O
nodes	int
>>	O
1	int
)	O
!=	O
1	int
)	O
gzip_error	function
(	O
"too few leaves in Huffman tree"	*
)	O
;	O
peek_bits	int
=	O
MIN	O
(	O
max_len	*
,	O
MAX_PEEK	int
)	O
;	O
prefixp	long
=	O
&	O
prefix_len	array
[	O
1	int
<<	O
peek_bits	int
]	O
;	O
for	O
(	O
len	int
=	O
1	int
;	O
len	int
<=	O
peek_bits	int
;	O
len	int
++	O
)	O
{	O
int	O
prefixes	int
=	O
leaves	array
[	O
len	int
]	O
<<	O
(	O
peek_bits	int
-	O
len	int
)	O
;	O
while	O
(	O
prefixes	int
--	O
)	O
*	O
--	O
prefixp	int
=	O
(	O
uch	char
)	O
len	int
;	O
}	O
while	O
(	O
prefixp	int
>	O
prefix_len	long
)	O
*	O
--	O
prefixp	int
=	O
0	int
;	O
}	O
int	O
unpack	function
(	O
in	*
,	O
out	*
)	O
int	O
in	int
,	O
out	*
;	O
{	O
int	O
len	int
;	O
unsigned	O
eob	int
;	O
register	O
unsigned	O
peek	int
;	O
unsigned	O
peek_mask	int
;	O
ifd	int
=	O
in	int
;	O
ofd	int
=	O
out	int
;	O
read_tree	function
(	O
)	O
;	O
build_tree	function
(	O
)	O
;	O
clear_bitbuf	function
(	O
)	O
;	O
peek_mask	int
=	O
(	O
1	int
<<	O
peek_bits	int
)	O
-	O
1	int
;	O
eob	int
=	O
leaves	array
[	O
max_len	int
]	O
-	O
1	int
;	O
Trace	function
(	O
(	O
stderr	*
,	O
"eob %d %x\n"	*
,	O
max_len	*
,	O
eob	*
)	O
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
look_bits	function
(	O
peek	*
,	O
peek_bits	*
,	O
peek_mask	int
)	O
;	O
len	int
=	O
prefix_len	array
[	O
peek	int
]	O
;	O
if	O
(	O
len	int
>	O
0	int
)	O
{	O
peek	O
>>=	O
peek_bits	int
-	O
len	int
;	O
}	O
else	O
{	O
ulg	long
mask	long
=	O
peek_mask	int
;	O
len	int
=	O
peek_bits	int
;	O
while	O
(	O
peek	int
<	O
parents	*
[	O
len	int
]	O
)	O
{	O
len	int
++	O
,	O
mask	int
=	O
(	O
mask	int
<<	O
1	int
)	O
+	O
1	int
;	O
look_bits	function
(	O
peek	*
,	O
len	int
,	O
mask	int
)	O
;	O
}	O
}	O
if	O
(	O
peek	int
==	O
eob	int
&&	O
len	int
==	O
max_len	int
)	O
break	O
;	O
put_ubyte	O
(	O
literal	array
[	O
peek	int
+	O
lit_base	array
[	O
len	int
]	O
]	O
)	O
;	O
Tracev	function
(	O
(	O
stderr	*
,	O
"%02d %04x %c\n"	*
,	O
len	int
,	O
peek	*
,	O
literal	array
[	O
peek	*
+	O
lit_base	*
[	O
len	int
]	O
]	O
)	O
)	O
;	O
skip_bits	function
(	O
len	int
)	O
;	O
}	O
flush_window	function
(	O
)	O
;	O
if	O
(	O
orig_len	long
!=	O
(	O
ulg	long
)	O
(	O
bytes_out	long
&	O
0xffffffff	int
)	O
)	O
{	O
gzip_error	function
(	O
"invalid compressed data--length error"	*
)	O
;	O
}	O
return	O
OK	int
;	O
}	O