local	O
const	O
int	O
extra_lbits	array
[	O
LENGTH_CODES	int
]	O
=	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
4	int
,	O
4	int
,	O
4	int
,	O
4	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
0	int
}	O
;	O
local	O
const	O
int	O
extra_dbits	array
[	O
D_CODES	int
]	O
=	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
2	int
,	O
2	int
,	O
3	int
,	O
3	int
,	O
4	int
,	O
4	int
,	O
5	int
,	O
5	int
,	O
6	int
,	O
6	int
,	O
7	int
,	O
7	int
,	O
8	int
,	O
8	int
,	O
9	int
,	O
9	int
,	O
10	int
,	O
10	int
,	O
11	int
,	O
11	int
,	O
12	int
,	O
12	int
,	O
13	int
,	O
13	int
}	O
;	O
local	O
const	O
int	O
extra_blbits	array
[	O
BL_CODES	int
]	O
=	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
2	int
,	O
3	int
,	O
7	int
}	O
;	O
local	O
const	O
uch	char
bl_order	array
[	O
BL_CODES	int
]	O
=	O
{	O
16	int
,	O
17	int
,	O
18	int
,	O
0	int
,	O
8	int
,	O
7	int
,	O
9	int
,	O
6	int
,	O
10	int
,	O
5	int
,	O
11	int
,	O
4	int
,	O
12	int
,	O
3	int
,	O
13	int
,	O
2	int
,	O
14	int
,	O
1	int
,	O
15	int
}	O
;	O
struct	O
static_tree_desc_s	struct
{	O
const	O
ct_data	struct
*	O
static_tree	pointer
;	O
const	O
intf	int
*	O
extra_bits	pointer
;	O
int	O
extra_base	int
;	O
int	O
elems	int
;	O
int	O
max_length	int
;	O
}	O
;	O
local	O
const	O
static_tree_desc	struct
static_l_desc	struct
=	O
{	O
static_ltree	array
,	O
extra_lbits	array
,	O
LITERALS	int
+	O
1	int
,	O
L_CODES	O
,	O
MAX_BITS	int
}	O
;	O
local	O
const	O
static_tree_desc	struct
static_d_desc	struct
=	O
{	O
static_dtree	array
,	O
extra_dbits	array
,	O
0	int
,	O
D_CODES	int
,	O
MAX_BITS	int
}	O
;	O
local	O
const	O
static_tree_desc	struct
static_bl_desc	struct
=	O
{	O
(	O
const	O
ct_data	struct
*	O
)	O
0	int
,	O
extra_blbits	array
,	O
0	int
,	O
BL_CODES	int
,	O
MAX_BL_BITS	int
}	O
;	O
local	O
void	O
tr_static_init	function
OF	O
(	O
(	O
void	O
)	O
)	O
;	O
local	O
void	O
init_block	function
OF	O
(	O
(	O
deflate_state	struct
*	O
s	pointer
)	O
)	O
;	O
local	O
void	O
pqdownheap	function
OF	O
(	O
(	O
deflate_state	struct
*	O
s	pointer
,	O
ct_data	struct
*	O
tree	pointer
,	O
int	O
k	int
)	O
)	O
;	O
local	O
void	O
gen_bitlen	function
OF	O
(	O
(	O
deflate_state	struct
*	O
s	pointer
,	O
tree_desc	struct
*	O
desc	pointer
)	O
)	O
;	O
local	O
void	O
gen_codes	function
OF	O
(	O
(	O
ct_data	struct
*	O
tree	pointer
,	O
int	O
max_code	int
,	O
ushf	short
*	O
bl_count	array
)	O
)	O
;	O
local	O
void	O
build_tree	function
OF	O
(	O
(	O
deflate_state	struct
*	O
s	pointer
,	O
tree_desc	struct
*	O
desc	pointer
)	O
)	O
;	O
local	O
void	O
scan_tree	function
OF	O
(	O
(	O
deflate_state	struct
*	O
s	pointer
,	O
ct_data	struct
*	O
tree	pointer
,	O
int	O
max_code	int
)	O
)	O
;	O
local	O
void	O
send_tree	function
OF	O
(	O
(	O
deflate_state	struct
*	O
s	pointer
,	O
ct_data	struct
*	O
tree	pointer
,	O
int	O
max_code	int
)	O
)	O
;	O
local	O
int	O
build_bl_tree	function
OF	O
(	O
(	O
deflate_state	struct
*	O
s	pointer
)	O
)	O
;	O
local	O
void	O
send_all_trees	function
OF	O
(	O
(	O
deflate_state	struct
*	O
s	pointer
,	O
int	O
lcodes	int
,	O
int	O
dcodes	int
,	O
int	O
blcodes	int
)	O
)	O
;	O
local	O
void	O
compress_block	function
OF	O
(	O
(	O
deflate_state	struct
*	O
s	pointer
,	O
const	O
ct_data	struct
*	O
ltree	pointer
,	O
const	O
ct_data	struct
*	O
dtree	pointer
)	O
)	O
;	O
local	O
int	O
detect_data_type	function
OF	O
(	O
(	O
deflate_state	struct
*	O
s	pointer
)	O
)	O
;	O
local	O
unsigned	O
bi_reverse	function
OF	O
(	O
(	O
unsigned	O
value	int
,	O
int	O
length	int
)	O
)	O
;	O
local	O
void	O
bi_windup	function
OF	O
(	O
(	O
deflate_state	struct
*	O
s	pointer
)	O
)	O
;	O
local	O
void	O
bi_flush	function
OF	O
(	O
(	O
deflate_state	struct
*	O
s	pointer
)	O
)	O
;	O
local	O
void	O
tr_static_init	function
(	O
)	O
{	O
}	O
void	O
ZLIB_INTERNAL	O
_tr_init	function
(	O
s	pointer
)	O
deflate_state	struct
*	O
s	pointer
;	O
{	O
tr_static_init	function
(	O
)	O
;	O
s	pointer
->	O
l_desc	struct
.	O
dyn_tree	pointer
=	O
s	pointer
->	O
dyn_ltree	array
;	O
s	pointer
->	O
l_desc	struct
.	O
stat_desc	pointer
=	O
&	O
static_l_desc	struct
;	O
s	pointer
->	O
d_desc	struct
.	O
dyn_tree	pointer
=	O
s	pointer
->	O
dyn_dtree	array
;	O
s	pointer
->	O
d_desc	struct
.	O
stat_desc	pointer
=	O
&	O
static_d_desc	struct
;	O
s	pointer
->	O
bl_desc	struct
.	O
dyn_tree	pointer
=	O
s	pointer
->	O
bl_tree	array
;	O
s	pointer
->	O
bl_desc	struct
.	O
stat_desc	pointer
=	O
&	O
static_bl_desc	struct
;	O
s	pointer
->	O
bi_buf	short
=	O
0	int
;	O
s	pointer
->	O
bi_valid	int
=	O
0	int
;	O
init_block	function
(	O
s	pointer
)	O
;	O
}	O
local	O
void	O
init_block	function
(	O
s	pointer
)	O
deflate_state	struct
*	O
s	pointer
;	O
{	O
int	O
n	int
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
L_CODES	O
;	O
n	int
++	O
)	O
s	pointer
->	O
dyn_ltree	array
[	O
n	int
]	O
.	O
Freq	O
=	O
0	int
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
D_CODES	int
;	O
n	int
++	O
)	O
s	pointer
->	O
dyn_dtree	array
[	O
n	int
]	O
.	O
Freq	O
=	O
0	int
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
BL_CODES	int
;	O
n	int
++	O
)	O
s	pointer
->	O
bl_tree	array
[	O
n	int
]	O
.	O
Freq	O
=	O
0	int
;	O
s	pointer
->	O
dyn_ltree	array
[	O
END_BLOCK	int
]	O
.	O
Freq	O
=	O
1	int
;	O
s	pointer
->	O
opt_len	long
=	O
s	pointer
->	O
static_len	long
=	O
0L	int
;	O
s	pointer
->	O
last_lit	int
=	O
s	pointer
->	O
matches	int
=	O
0	int
;	O
}	O
local	O
void	O
pqdownheap	function
(	O
s	pointer
,	O
tree	pointer
,	O
k	int
)	O
deflate_state	struct
*	O
s	pointer
;	O
ct_data	struct
*	O
tree	pointer
;	O
int	O
k	int
;	O
{	O
int	O
v	int
=	O
s	pointer
->	O
heap	array
[	O
k	int
]	O
;	O
int	O
j	int
=	O
k	int
<<	O
1	int
;	O
while	O
(	O
j	int
<=	O
s	pointer
->	O
heap_len	int
)	O
{	O
if	O
(	O
j	int
<	O
s	pointer
->	O
heap_len	int
&&	O
smaller	O
(	O
tree	pointer
,	O
s	pointer
->	O
heap	array
[	O
j	int
+	O
1	int
]	O
,	O
s	pointer
->	O
heap	array
[	O
j	int
]	O
,	O
s	pointer
->	O
depth	array
)	O
)	O
{	O
j	int
++	O
;	O
}	O
if	O
(	O
smaller	O
(	O
tree	pointer
,	O
v	int
,	O
s	pointer
->	O
heap	array
[	O
j	int
]	O
,	O
s	pointer
->	O
depth	array
)	O
)	O
break	O
;	O
s	pointer
->	O
heap	array
[	O
k	int
]	O
=	O
s	pointer
->	O
heap	array
[	O
j	int
]	O
;	O
k	int
=	O
j	int
;	O
j	int
<<=	O
1	int
;	O
}	O
s	pointer
->	O
heap	array
[	O
k	int
]	O
=	O
v	int
;	O
}	O
local	O
void	O
gen_bitlen	function
(	O
s	pointer
,	O
desc	pointer
)	O
deflate_state	struct
*	O
s	pointer
;	O
tree_desc	struct
*	O
desc	pointer
;	O
{	O
ct_data	struct
*	O
tree	pointer
=	O
desc	pointer
->	O
dyn_tree	pointer
;	O
int	O
max_code	int
=	O
desc	pointer
->	O
max_code	int
;	O
const	O
ct_data	struct
*	O
stree	pointer
=	O
desc	pointer
->	O
stat_desc	pointer
->	O
static_tree	pointer
;	O
const	O
intf	int
*	O
extra	pointer
=	O
desc	pointer
->	O
stat_desc	pointer
->	O
extra_bits	pointer
;	O
int	O
base	int
=	O
desc	pointer
->	O
stat_desc	pointer
->	O
extra_base	int
;	O
int	O
max_length	int
=	O
desc	pointer
->	O
stat_desc	pointer
->	O
max_length	int
;	O
int	O
h	int
;	O
int	O
n	int
,	O
m	int
;	O
int	O
bits	pointer
;	O
int	O
xbits	int
;	O
ush	short
f	short
;	O
int	O
overflow	int
=	O
0	int
;	O
for	O
(	O
bits	pointer
=	O
0	int
;	O
bits	pointer
<=	O
MAX_BITS	int
;	O
bits	pointer
++	O
)	O
s	pointer
->	O
bl_count	array
[	O
bits	pointer
]	O
=	O
0	int
;	O
tree	pointer
[	O
s	pointer
->	O
heap	array
[	O
s	pointer
->	O
heap_max	int
]	O
]	O
.	O
Len	O
=	O
0	int
;	O
for	O
(	O
h	int
=	O
s	pointer
->	O
heap_max	int
+	O
1	int
;	O
h	int
<	O
HEAP_SIZE	O
;	O
h	int
++	O
)	O
{	O
n	int
=	O
s	pointer
->	O
heap	array
[	O
h	int
]	O
;	O
bits	pointer
=	O
tree	pointer
[	O
tree	pointer
[	O
n	int
]	O
.	O
Dad	O
]	O
.	O
Len	O
+	O
1	int
;	O
if	O
(	O
bits	pointer
>	O
max_length	int
)	O
bits	pointer
=	O
max_length	int
,	O
overflow	int
++	O
;	O
tree	pointer
[	O
n	int
]	O
.	O
Len	O
=	O
(	O
ush	short
)	O
bits	pointer
;	O
if	O
(	O
n	int
>	O
max_code	int
)	O
continue	O
;	O
s	pointer
->	O
bl_count	array
[	O
bits	pointer
]	O
++	O
;	O
xbits	int
=	O
0	int
;	O
if	O
(	O
n	int
>=	O
base	int
)	O
xbits	int
=	O
extra	pointer
[	O
n	int
-	O
base	int
]	O
;	O
f	short
=	O
tree	pointer
[	O
n	int
]	O
.	O
Freq	O
;	O
s	pointer
->	O
opt_len	long
+=	O
(	O
ulg	long
)	O
f	short
*	O
(	O
unsigned	O
)	O
(	O
bits	pointer
+	O
xbits	int
)	O
;	O
if	O
(	O
stree	pointer
)	O
s	pointer
->	O
static_len	long
+=	O
(	O
ulg	long
)	O
f	short
*	O
(	O
unsigned	O
)	O
(	O
stree	pointer
[	O
n	int
]	O
.	O
Len	O
+	O
xbits	int
)	O
;	O
}	O
if	O
(	O
overflow	int
==	O
0	int
)	O
return	O
;	O
Tracev	O
(	O
(	O
stderr	O
,	O
"\nbit length overflow\n"	pointer
)	O
)	O
;	O
do	O
{	O
bits	pointer
=	O
max_length	int
-	O
1	int
;	O
while	O
(	O
s	pointer
->	O
bl_count	array
[	O
bits	pointer
]	O
==	O
0	int
)	O
bits	pointer
--	O
;	O
s	pointer
->	O
bl_count	array
[	O
bits	pointer
]	O
--	O
;	O
s	pointer
->	O
bl_count	array
[	O
bits	pointer
+	O
1	int
]	O
+=	O
2	int
;	O
s	pointer
->	O
bl_count	array
[	O
max_length	int
]	O
--	O
;	O
overflow	int
-=	O
2	int
;	O
}	O
while	O
(	O
overflow	int
>	O
0	int
)	O
;	O
for	O
(	O
bits	pointer
=	O
max_length	int
;	O
bits	pointer
!=	O
0	int
;	O
bits	pointer
--	O
)	O
{	O
n	int
=	O
s	pointer
->	O
bl_count	array
[	O
bits	pointer
]	O
;	O
while	O
(	O
n	int
!=	O
0	int
)	O
{	O
m	int
=	O
s	pointer
->	O
heap	array
[	O
--	O
h	int
]	O
;	O
if	O
(	O
m	int
>	O
max_code	int
)	O
continue	O
;	O
if	O
(	O
(	O
unsigned	O
)	O
tree	pointer
[	O
m	int
]	O
.	O
Len	O
!=	O
(	O
unsigned	O
)	O
bits	pointer
)	O
{	O
Tracev	O
(	O
(	O
stderr	O
,	O
"code %d bits %d->%d\n"	pointer
,	O
m	int
,	O
tree	pointer
[	O
m	int
]	O
.	O
Len	O
,	O
bits	pointer
)	O
)	O
;	O
s	pointer
->	O
opt_len	long
+=	O
(	O
(	O
ulg	long
)	O
bits	pointer
-	O
tree	pointer
[	O
m	int
]	O
.	O
Len	O
)	O
*	O
tree	pointer
[	O
m	int
]	O
.	O
Freq	O
;	O
tree	pointer
[	O
m	int
]	O
.	O
Len	O
=	O
(	O
ush	short
)	O
bits	pointer
;	O
}	O
n	int
--	O
;	O
}	O
}	O
}	O
local	O
void	O
gen_codes	function
(	O
tree	pointer
,	O
max_code	int
,	O
bl_count	array
)	O
ct_data	struct
*	O
tree	pointer
;	O
int	O
max_code	int
;	O
ushf	short
*	O
bl_count	array
;	O
{	O
ush	short
next_code	array
[	O
MAX_BITS	int
+	O
1	int
]	O
;	O
unsigned	O
code	short
=	O
0	int
;	O
int	O
bits	pointer
;	O
int	O
n	int
;	O
for	O
(	O
bits	pointer
=	O
1	int
;	O
bits	pointer
<=	O
MAX_BITS	int
;	O
bits	pointer
++	O
)	O
{	O
code	short
=	O
(	O
code	short
+	O
bl_count	array
[	O
bits	pointer
-	O
1	int
]	O
)	O
<<	O
1	int
;	O
next_code	array
[	O
bits	pointer
]	O
=	O
(	O
ush	short
)	O
code	short
;	O
}	O
Assert	O
(	O
code	short
+	O
bl_count	array
[	O
MAX_BITS	int
]	O
-	O
1	int
==	O
(	O
1	int
<<	O
MAX_BITS	int
)	O
-	O
1	int
,	O
"inconsistent bit counts"	pointer
)	O
;	O
Tracev	O
(	O
(	O
stderr	O
,	O
"\ngen_codes: max_code %d "	pointer
,	O
max_code	int
)	O
)	O
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<=	O
max_code	int
;	O
n	int
++	O
)	O
{	O
int	O
len	int
=	O
tree	pointer
[	O
n	int
]	O
.	O
Len	O
;	O
if	O
(	O
len	int
==	O
0	int
)	O
continue	O
;	O
tree	pointer
[	O
n	int
]	O
.	O
Code	O
=	O
(	O
ush	short
)	O
bi_reverse	function
(	O
next_code	array
[	O
len	int
]	O
++	O
,	O
len	int
)	O
;	O
Tracecv	O
(	O
tree	pointer
!=	O
static_ltree	array
,	O
(	O
stderr	O
,	O
"\nn %3d %c l %2d c %4x (%x) "	pointer
,	O
n	int
,	O
(	O
isgraph	O
(	O
n	int
)	O
?	O
n	int
:	O
' '	O
)	O
,	O
len	int
,	O
tree	pointer
[	O
n	int
]	O
.	O
Code	O
,	O
next_code	array
[	O
len	int
]	O
-	O
1	int
)	O
)	O
;	O
}	O
}	O
local	O
void	O
build_tree	function
(	O
s	pointer
,	O
desc	pointer
)	O
deflate_state	struct
*	O
s	pointer
;	O
tree_desc	struct
*	O
desc	pointer
;	O
{	O
ct_data	struct
*	O
tree	pointer
=	O
desc	pointer
->	O
dyn_tree	pointer
;	O
const	O
ct_data	struct
*	O
stree	pointer
=	O
desc	pointer
->	O
stat_desc	pointer
->	O
static_tree	pointer
;	O
int	O
elems	int
=	O
desc	pointer
->	O
stat_desc	pointer
->	O
elems	int
;	O
int	O
n	int
,	O
m	int
;	O
int	O
max_code	int
=	O
-	O
1	int
;	O
int	O
node	int
;	O
s	pointer
->	O
heap_len	int
=	O
0	int
,	O
s	pointer
->	O
heap_max	int
=	O
HEAP_SIZE	O
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
elems	int
;	O
n	int
++	O
)	O
{	O
if	O
(	O
tree	pointer
[	O
n	int
]	O
.	O
Freq	O
!=	O
0	int
)	O
{	O
s	pointer
->	O
heap	array
[	O
++	O
(	O
s	pointer
->	O
heap_len	int
)	O
]	O
=	O
max_code	int
=	O
n	int
;	O
s	pointer
->	O
depth	array
[	O
n	int
]	O
=	O
0	int
;	O
}	O
else	O
{	O
tree	pointer
[	O
n	int
]	O
.	O
Len	O
=	O
0	int
;	O
}	O
}	O
while	O
(	O
s	pointer
->	O
heap_len	int
<	O
2	int
)	O
{	O
node	int
=	O
s	pointer
->	O
heap	array
[	O
++	O
(	O
s	pointer
->	O
heap_len	int
)	O
]	O
=	O
(	O
max_code	int
<	O
2	int
?	O
++	O
max_code	int
:	O
0	int
)	O
;	O
tree	pointer
[	O
node	int
]	O
.	O
Freq	O
=	O
1	int
;	O
s	pointer
->	O
depth	array
[	O
node	int
]	O
=	O
0	int
;	O
s	pointer
->	O
opt_len	long
--	O
;	O
if	O
(	O
stree	pointer
)	O
s	pointer
->	O
static_len	long
-=	O
stree	pointer
[	O
node	int
]	O
.	O
Len	O
;	O
}	O
desc	pointer
->	O
max_code	int
=	O
max_code	int
;	O
for	O
(	O
n	int
=	O
s	pointer
->	O
heap_len	int
/	O
2	int
;	O
n	int
>=	O
1	int
;	O
n	int
--	O
)	O
pqdownheap	function
(	O
s	pointer
,	O
tree	pointer
,	O
n	int
)	O
;	O
node	int
=	O
elems	int
;	O
do	O
{	O
pqremove	O
(	O
s	pointer
,	O
tree	pointer
,	O
n	int
)	O
;	O
m	int
=	O
s	pointer
->	O
heap	array
[	O
SMALLEST	int
]	O
;	O
s	pointer
->	O
heap	array
[	O
--	O
(	O
s	pointer
->	O
heap_max	int
)	O
]	O
=	O
n	int
;	O
s	pointer
->	O
heap	array
[	O
--	O
(	O
s	pointer
->	O
heap_max	int
)	O
]	O
=	O
m	int
;	O
tree	pointer
[	O
node	int
]	O
.	O
Freq	O
=	O
tree	pointer
[	O
n	int
]	O
.	O
Freq	O
+	O
tree	pointer
[	O
m	int
]	O
.	O
Freq	O
;	O
s	pointer
->	O
depth	array
[	O
node	int
]	O
=	O
(	O
uch	char
)	O
(	O
(	O
s	pointer
->	O
depth	array
[	O
n	int
]	O
>=	O
s	pointer
->	O
depth	array
[	O
m	int
]	O
?	O
s	pointer
->	O
depth	array
[	O
n	int
]	O
:	O
s	pointer
->	O
depth	array
[	O
m	int
]	O
)	O
+	O
1	int
)	O
;	O
tree	pointer
[	O
n	int
]	O
.	O
Dad	O
=	O
tree	pointer
[	O
m	int
]	O
.	O
Dad	O
=	O
(	O
ush	short
)	O
node	int
;	O
s	pointer
->	O
heap	array
[	O
SMALLEST	int
]	O
=	O
node	int
++	O
;	O
pqdownheap	function
(	O
s	pointer
,	O
tree	pointer
,	O
SMALLEST	int
)	O
;	O
}	O
while	O
(	O
s	pointer
->	O
heap_len	int
>=	O
2	int
)	O
;	O
s	pointer
->	O
heap	array
[	O
--	O
(	O
s	pointer
->	O
heap_max	int
)	O
]	O
=	O
s	pointer
->	O
heap	array
[	O
SMALLEST	int
]	O
;	O
gen_bitlen	function
(	O
s	pointer
,	O
(	O
tree_desc	struct
*	O
)	O
desc	pointer
)	O
;	O
gen_codes	function
(	O
(	O
ct_data	struct
*	O
)	O
tree	pointer
,	O
max_code	int
,	O
s	pointer
->	O
bl_count	array
)	O
;	O
}	O
local	O
void	O
scan_tree	function
(	O
s	pointer
,	O
tree	pointer
,	O
max_code	int
)	O
deflate_state	struct
*	O
s	pointer
;	O
ct_data	struct
*	O
tree	pointer
;	O
int	O
max_code	int
;	O
{	O
int	O
n	int
;	O
int	O
prevlen	int
=	O
-	O
1	int
;	O
int	O
curlen	int
;	O
int	O
nextlen	int
=	O
tree	pointer
[	O
0	int
]	O
.	O
Len	O
;	O
int	O
count	int
=	O
0	int
;	O
int	O
max_count	int
=	O
7	int
;	O
int	O
min_count	int
=	O
4	int
;	O
if	O
(	O
nextlen	int
==	O
0	int
)	O
max_count	int
=	O
138	int
,	O
min_count	int
=	O
3	int
;	O
tree	pointer
[	O
max_code	int
+	O
1	int
]	O
.	O
Len	O
=	O
(	O
ush	short
)	O
0xffff	int
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<=	O
max_code	int
;	O
n	int
++	O
)	O
{	O
curlen	int
=	O
nextlen	int
;	O
nextlen	int
=	O
tree	pointer
[	O
n	int
+	O
1	int
]	O
.	O
Len	O
;	O
if	O
(	O
++	O
count	int
<	O
max_count	int
&&	O
curlen	int
==	O
nextlen	int
)	O
{	O
continue	O
;	O
}	O
else	O
if	O
(	O
count	int
<	O
min_count	int
)	O
{	O
s	pointer
->	O
bl_tree	array
[	O
curlen	int
]	O
.	O
Freq	O
+=	O
count	int
;	O
}	O
else	O
if	O
(	O
curlen	int
!=	O
0	int
)	O
{	O
if	O
(	O
curlen	int
!=	O
prevlen	int
)	O
s	pointer
->	O
bl_tree	array
[	O
curlen	int
]	O
.	O
Freq	O
++	O
;	O
s	pointer
->	O
bl_tree	array
[	O
REP_3_6	int
]	O
.	O
Freq	O
++	O
;	O
}	O
else	O
if	O
(	O
count	int
<=	O
10	int
)	O
{	O
s	pointer
->	O
bl_tree	array
[	O
REPZ_3_10	int
]	O
.	O
Freq	O
++	O
;	O
}	O
else	O
{	O
s	pointer
->	O
bl_tree	array
[	O
REPZ_11_138	int
]	O
.	O
Freq	O
++	O
;	O
}	O
count	int
=	O
0	int
;	O
prevlen	int
=	O
curlen	int
;	O
if	O
(	O
nextlen	int
==	O
0	int
)	O
{	O
max_count	int
=	O
138	int
,	O
min_count	int
=	O
3	int
;	O
}	O
else	O
if	O
(	O
curlen	int
==	O
nextlen	int
)	O
{	O
max_count	int
=	O
6	int
,	O
min_count	int
=	O
3	int
;	O
}	O
else	O
{	O
max_count	int
=	O
7	int
,	O
min_count	int
=	O
4	int
;	O
}	O
}	O
}	O
local	O
void	O
send_tree	function
(	O
s	pointer
,	O
tree	pointer
,	O
max_code	int
)	O
deflate_state	struct
*	O
s	pointer
;	O
ct_data	struct
*	O
tree	pointer
;	O
int	O
max_code	int
;	O
{	O
int	O
n	int
;	O
int	O
prevlen	int
=	O
-	O
1	int
;	O
int	O
curlen	int
;	O
int	O
nextlen	int
=	O
tree	pointer
[	O
0	int
]	O
.	O
Len	O
;	O
int	O
count	int
=	O
0	int
;	O
int	O
max_count	int
=	O
7	int
;	O
int	O
min_count	int
=	O
4	int
;	O
if	O
(	O
nextlen	int
==	O
0	int
)	O
max_count	int
=	O
138	int
,	O
min_count	int
=	O
3	int
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<=	O
max_code	int
;	O
n	int
++	O
)	O
{	O
curlen	int
=	O
nextlen	int
;	O
nextlen	int
=	O
tree	pointer
[	O
n	int
+	O
1	int
]	O
.	O
Len	O
;	O
if	O
(	O
++	O
count	int
<	O
max_count	int
&&	O
curlen	int
==	O
nextlen	int
)	O
{	O
continue	O
;	O
}	O
else	O
if	O
(	O
count	int
<	O
min_count	int
)	O
{	O
do	O
{	O
send_code	O
(	O
s	pointer
,	O
curlen	int
,	O
s	pointer
->	O
bl_tree	array
)	O
;	O
}	O
while	O
(	O
--	O
count	int
!=	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
curlen	int
!=	O
0	int
)	O
{	O
if	O
(	O
curlen	int
!=	O
prevlen	int
)	O
{	O
send_code	O
(	O
s	pointer
,	O
curlen	int
,	O
s	pointer
->	O
bl_tree	array
)	O
;	O
count	int
--	O
;	O
}	O
Assert	O
(	O
count	int
>=	O
3	int
&&	O
count	int
<=	O
6	int
,	O
" 3_6?"	pointer
)	O
;	O
send_code	O
(	O
s	pointer
,	O
REP_3_6	int
,	O
s	pointer
->	O
bl_tree	array
)	O
;	O
send_bits	O
(	O
s	pointer
,	O
count	int
-	O
3	int
,	O
2	int
)	O
;	O
}	O
else	O
if	O
(	O
count	int
<=	O
10	int
)	O
{	O
send_code	O
(	O
s	pointer
,	O
REPZ_3_10	int
,	O
s	pointer
->	O
bl_tree	array
)	O
;	O
send_bits	O
(	O
s	pointer
,	O
count	int
-	O
3	int
,	O
3	int
)	O
;	O
}	O
else	O
{	O
send_code	O
(	O
s	pointer
,	O
REPZ_11_138	int
,	O
s	pointer
->	O
bl_tree	array
)	O
;	O
send_bits	O
(	O
s	pointer
,	O
count	int
-	O
11	int
,	O
7	int
)	O
;	O
}	O
count	int
=	O
0	int
;	O
prevlen	int
=	O
curlen	int
;	O
if	O
(	O
nextlen	int
==	O
0	int
)	O
{	O
max_count	int
=	O
138	int
,	O
min_count	int
=	O
3	int
;	O
}	O
else	O
if	O
(	O
curlen	int
==	O
nextlen	int
)	O
{	O
max_count	int
=	O
6	int
,	O
min_count	int
=	O
3	int
;	O
}	O
else	O
{	O
max_count	int
=	O
7	int
,	O
min_count	int
=	O
4	int
;	O
}	O
}	O
}	O
local	O
int	O
build_bl_tree	function
(	O
s	pointer
)	O
deflate_state	struct
*	O
s	pointer
;	O
{	O
int	O
max_blindex	int
;	O
scan_tree	function
(	O
s	pointer
,	O
(	O
ct_data	struct
*	O
)	O
s	pointer
->	O
dyn_ltree	array
,	O
s	pointer
->	O
l_desc	struct
.	O
max_code	int
)	O
;	O
scan_tree	function
(	O
s	pointer
,	O
(	O
ct_data	struct
*	O
)	O
s	pointer
->	O
dyn_dtree	array
,	O
s	pointer
->	O
d_desc	struct
.	O
max_code	int
)	O
;	O
build_tree	function
(	O
s	pointer
,	O
(	O
tree_desc	struct
*	O
)	O
(	O
&	O
(	O
s	pointer
->	O
bl_desc	struct
)	O
)	O
)	O
;	O
for	O
(	O
max_blindex	int
=	O
BL_CODES	int
-	O
1	int
;	O
max_blindex	int
>=	O
3	int
;	O
max_blindex	int
--	O
)	O
{	O
if	O
(	O
s	pointer
->	O
bl_tree	array
[	O
bl_order	array
[	O
max_blindex	int
]	O
]	O
.	O
Len	O
!=	O
0	int
)	O
break	O
;	O
}	O
s	pointer
->	O
opt_len	long
+=	O
3	int
*	O
(	O
(	O
ulg	long
)	O
max_blindex	int
+	O
1	int
)	O
+	O
5	int
+	O
5	int
+	O
4	int
;	O
Tracev	O
(	O
(	O
stderr	O
,	O
"\ndyn trees: dyn %ld, stat %ld"	pointer
,	O
s	pointer
->	O
opt_len	long
,	O
s	pointer
->	O
static_len	long
)	O
)	O
;	O
return	O
max_blindex	int
;	O
}	O
local	O
void	O
send_all_trees	function
(	O
s	pointer
,	O
lcodes	int
,	O
dcodes	int
,	O
blcodes	int
)	O
deflate_state	struct
*	O
s	pointer
;	O
int	O
lcodes	int
,	O
dcodes	int
,	O
blcodes	int
;	O
{	O
int	O
rank	int
;	O
Assert	O
(	O
lcodes	int
>=	O
257	int
&&	O
dcodes	int
>=	O
1	int
&&	O
blcodes	int
>=	O
4	int
,	O
"not enough codes"	pointer
)	O
;	O
Assert	O
(	O
lcodes	int
<=	O
L_CODES	O
&&	O
dcodes	int
<=	O
D_CODES	int
&&	O
blcodes	int
<=	O
BL_CODES	int
,	O
"too many codes"	pointer
)	O
;	O
Tracev	O
(	O
(	O
stderr	O
,	O
"\nbl counts: "	pointer
)	O
)	O
;	O
send_bits	O
(	O
s	pointer
,	O
lcodes	int
-	O
257	int
,	O
5	int
)	O
;	O
send_bits	O
(	O
s	pointer
,	O
dcodes	int
-	O
1	int
,	O
5	int
)	O
;	O
send_bits	O
(	O
s	pointer
,	O
blcodes	int
-	O
4	int
,	O
4	int
)	O
;	O
for	O
(	O
rank	int
=	O
0	int
;	O
rank	int
<	O
blcodes	int
;	O
rank	int
++	O
)	O
{	O
Tracev	O
(	O
(	O
stderr	O
,	O
"\nbl code %2d "	pointer
,	O
bl_order	array
[	O
rank	int
]	O
)	O
)	O
;	O
send_bits	O
(	O
s	pointer
,	O
s	pointer
->	O
bl_tree	array
[	O
bl_order	array
[	O
rank	int
]	O
]	O
.	O
Len	O
,	O
3	int
)	O
;	O
}	O
Tracev	O
(	O
(	O
stderr	O
,	O
"\nbl tree: sent %ld"	pointer
,	O
s	pointer
->	O
bits_sent	O
)	O
)	O
;	O
send_tree	function
(	O
s	pointer
,	O
(	O
ct_data	struct
*	O
)	O
s	pointer
->	O
dyn_ltree	array
,	O
lcodes	int
-	O
1	int
)	O
;	O
Tracev	O
(	O
(	O
stderr	O
,	O
"\nlit tree: sent %ld"	pointer
,	O
s	pointer
->	O
bits_sent	O
)	O
)	O
;	O
send_tree	function
(	O
s	pointer
,	O
(	O
ct_data	struct
*	O
)	O
s	pointer
->	O
dyn_dtree	array
,	O
dcodes	int
-	O
1	int
)	O
;	O
Tracev	O
(	O
(	O
stderr	O
,	O
"\ndist tree: sent %ld"	pointer
,	O
s	pointer
->	O
bits_sent	O
)	O
)	O
;	O
}	O
void	O
ZLIB_INTERNAL	O
_tr_stored_block	function
(	O
s	pointer
,	O
buf	pointer
,	O
stored_len	long
,	O
last	int
)	O
deflate_state	struct
*	O
s	pointer
;	O
charf	char
*	O
buf	pointer
;	O
ulg	long
stored_len	long
;	O
int	O
last	int
;	O
{	O
send_bits	O
(	O
s	pointer
,	O
(	O
STORED_BLOCK	int
<<	O
1	int
)	O
+	O
last	int
,	O
3	int
)	O
;	O
bi_windup	function
(	O
s	pointer
)	O
;	O
put_short	O
(	O
s	pointer
,	O
(	O
ush	short
)	O
stored_len	long
)	O
;	O
put_short	O
(	O
s	pointer
,	O
(	O
ush	short
)	O
~	O
stored_len	long
)	O
;	O
zmemcpy	O
(	O
s	pointer
->	O
pending_buf	pointer
+	O
s	pointer
->	O
pending	pointer
,	O
(	O
Bytef	char
*	O
)	O
buf	pointer
,	O
stored_len	long
)	O
;	O
s	pointer
->	O
pending	pointer
+=	O
stored_len	long
;	O
}	O
void	O
ZLIB_INTERNAL	O
_tr_flush_bits	function
(	O
s	pointer
)	O
deflate_state	struct
*	O
s	pointer
;	O
{	O
bi_flush	function
(	O
s	pointer
)	O
;	O
}	O
void	O
ZLIB_INTERNAL	O
_tr_align	function
(	O
s	pointer
)	O
deflate_state	struct
*	O
s	pointer
;	O
{	O
send_bits	O
(	O
s	pointer
,	O
STATIC_TREES	int
<<	O
1	int
,	O
3	int
)	O
;	O
send_code	O
(	O
s	pointer
,	O
END_BLOCK	int
,	O
static_ltree	array
)	O
;	O
bi_flush	function
(	O
s	pointer
)	O
;	O
}	O
void	O
ZLIB_INTERNAL	O
_tr_flush_block	function
(	O
s	pointer
,	O
buf	pointer
,	O
stored_len	long
,	O
last	int
)	O
deflate_state	struct
*	O
s	pointer
;	O
charf	char
*	O
buf	pointer
;	O
ulg	long
stored_len	long
;	O
int	O
last	int
;	O
{	O
ulg	long
opt_lenb	long
,	O
static_lenb	long
;	O
int	O
max_blindex	int
=	O
0	int
;	O
if	O
(	O
s	pointer
->	O
level	int
>	O
0	int
)	O
{	O
if	O
(	O
s	pointer
->	O
strm	pointer
->	O
data_type	int
==	O
Z_UNKNOWN	int
)	O
s	pointer
->	O
strm	pointer
->	O
data_type	int
=	O
detect_data_type	function
(	O
s	pointer
)	O
;	O
build_tree	function
(	O
s	pointer
,	O
(	O
tree_desc	struct
*	O
)	O
(	O
&	O
(	O
s	pointer
->	O
l_desc	struct
)	O
)	O
)	O
;	O
Tracev	O
(	O
(	O
stderr	O
,	O
"\nlit data: dyn %ld, stat %ld"	pointer
,	O
s	pointer
->	O
opt_len	long
,	O
s	pointer
->	O
static_len	long
)	O
)	O
;	O
build_tree	function
(	O
s	pointer
,	O
(	O
tree_desc	struct
*	O
)	O
(	O
&	O
(	O
s	pointer
->	O
d_desc	struct
)	O
)	O
)	O
;	O
Tracev	O
(	O
(	O
stderr	O
,	O
"\ndist data: dyn %ld, stat %ld"	pointer
,	O
s	pointer
->	O
opt_len	long
,	O
s	pointer
->	O
static_len	long
)	O
)	O
;	O
max_blindex	int
=	O
build_bl_tree	function
(	O
s	pointer
)	O
;	O
opt_lenb	long
=	O
(	O
s	pointer
->	O
opt_len	long
+	O
3	int
+	O
7	int
)	O
>>	O
3	int
;	O
static_lenb	long
=	O
(	O
s	pointer
->	O
static_len	long
+	O
3	int
+	O
7	int
)	O
>>	O
3	int
;	O
Tracev	O
(	O
(	O
stderr	O
,	O
"\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u "	pointer
,	O
opt_lenb	long
,	O
s	pointer
->	O
opt_len	long
,	O
static_lenb	long
,	O
s	pointer
->	O
static_len	long
,	O
stored_len	long
,	O
s	pointer
->	O
last_lit	int
)	O
)	O
;	O
if	O
(	O
static_lenb	long
<=	O
opt_lenb	long
)	O
opt_lenb	long
=	O
static_lenb	long
;	O
}	O
else	O
{	O
Assert	O
(	O
buf	pointer
!=	O
(	O
char	O
*	O
)	O
0	int
,	O
"lost buf"	pointer
)	O
;	O
opt_lenb	long
=	O
static_lenb	long
=	O
stored_len	long
+	O
5	int
;	O
}	O
if	O
(	O
stored_len	long
+	O
4	int
<=	O
opt_lenb	long
&&	O
buf	pointer
!=	O
(	O
char	O
*	O
)	O
0	int
)	O
{	O
_tr_stored_block	function
(	O
s	pointer
,	O
buf	pointer
,	O
stored_len	long
,	O
last	int
)	O
;	O
}	O
else	O
if	O
(	O
s	pointer
->	O
strategy	int
==	O
Z_FIXED	int
||	O
static_lenb	long
==	O
opt_lenb	long
)	O
{	O
send_bits	O
(	O
s	pointer
,	O
(	O
STATIC_TREES	int
<<	O
1	int
)	O
+	O
last	int
,	O
3	int
)	O
;	O
compress_block	function
(	O
s	pointer
,	O
(	O
const	O
ct_data	struct
*	O
)	O
static_ltree	array
,	O
(	O
const	O
ct_data	struct
*	O
)	O
static_dtree	array
)	O
;	O
}	O
else	O
{	O
send_bits	O
(	O
s	pointer
,	O
(	O
DYN_TREES	int
<<	O
1	int
)	O
+	O
last	int
,	O
3	int
)	O
;	O
send_all_trees	function
(	O
s	pointer
,	O
s	pointer
->	O
l_desc	struct
.	O
max_code	int
+	O
1	int
,	O
s	pointer
->	O
d_desc	struct
.	O
max_code	int
+	O
1	int
,	O
max_blindex	int
+	O
1	int
)	O
;	O
compress_block	function
(	O
s	pointer
,	O
(	O
const	O
ct_data	struct
*	O
)	O
s	pointer
->	O
dyn_ltree	array
,	O
(	O
const	O
ct_data	struct
*	O
)	O
s	pointer
->	O
dyn_dtree	array
)	O
;	O
}	O
Assert	O
(	O
s	pointer
->	O
compressed_len	O
==	O
s	pointer
->	O
bits_sent	O
,	O
"bad compressed size"	pointer
)	O
;	O
init_block	function
(	O
s	pointer
)	O
;	O
if	O
(	O
last	int
)	O
{	O
bi_windup	function
(	O
s	pointer
)	O
;	O
}	O
Tracev	O
(	O
(	O
stderr	O
,	O
"\ncomprlen %lu(%lu) "	pointer
,	O
s	pointer
->	O
compressed_len	O
>>	O
3	int
,	O
s	pointer
->	O
compressed_len	O
-	O
7	int
*	O
last	int
)	O
)	O
;	O
}	O
int	O
ZLIB_INTERNAL	O
_tr_tally	function
(	O
s	pointer
,	O
dist	int
,	O
lc	int
)	O
deflate_state	struct
*	O
s	pointer
;	O
unsigned	O
dist	int
;	O
unsigned	O
lc	int
;	O
{	O
s	pointer
->	O
d_buf	pointer
[	O
s	pointer
->	O
last_lit	int
]	O
=	O
(	O
ush	short
)	O
dist	int
;	O
s	pointer
->	O
l_buf	pointer
[	O
s	pointer
->	O
last_lit	int
++	O
]	O
=	O
(	O
uch	char
)	O
lc	int
;	O
if	O
(	O
dist	int
==	O
0	int
)	O
{	O
s	pointer
->	O
dyn_ltree	array
[	O
lc	int
]	O
.	O
Freq	O
++	O
;	O
}	O
else	O
{	O
s	pointer
->	O
matches	int
++	O
;	O
dist	int
--	O
;	O
Assert	O
(	O
(	O
ush	short
)	O
dist	int
<	O
(	O
ush	short
)	O
MAX_DIST	O
(	O
s	pointer
)	O
&&	O
(	O
ush	short
)	O
lc	int
<=	O
(	O
ush	short
)	O
(	O
MAX_MATCH	int
-	O
MIN_MATCH	int
)	O
&&	O
(	O
ush	short
)	O
d_code	O
(	O
dist	int
)	O
<	O
(	O
ush	short
)	O
D_CODES	int
,	O
"_tr_tally: bad match"	pointer
)	O
;	O
s	pointer
->	O
dyn_ltree	array
[	O
_length_code	array
[	O
lc	int
]	O
+	O
LITERALS	int
+	O
1	int
]	O
.	O
Freq	O
++	O
;	O
s	pointer
->	O
dyn_dtree	array
[	O
d_code	O
(	O
dist	int
)	O
]	O
.	O
Freq	O
++	O
;	O
}	O
return	O
(	O
s	pointer
->	O
last_lit	int
==	O
s	pointer
->	O
lit_bufsize	int
-	O
1	int
)	O
;	O
}	O
local	O
void	O
compress_block	function
(	O
s	pointer
,	O
ltree	pointer
,	O
dtree	pointer
)	O
deflate_state	struct
*	O
s	pointer
;	O
const	O
ct_data	struct
*	O
ltree	pointer
;	O
const	O
ct_data	struct
*	O
dtree	pointer
;	O
{	O
unsigned	O
dist	int
;	O
int	O
lc	int
;	O
unsigned	O
lx	int
=	O
0	int
;	O
unsigned	O
code	short
;	O
int	O
extra	pointer
;	O
if	O
(	O
s	pointer
->	O
last_lit	int
!=	O
0	int
)	O
do	O
{	O
dist	int
=	O
s	pointer
->	O
d_buf	pointer
[	O
lx	int
]	O
;	O
lc	int
=	O
s	pointer
->	O
l_buf	pointer
[	O
lx	int
++	O
]	O
;	O
if	O
(	O
dist	int
==	O
0	int
)	O
{	O
send_code	O
(	O
s	pointer
,	O
lc	int
,	O
ltree	pointer
)	O
;	O
Tracecv	O
(	O
isgraph	O
(	O
lc	int
)	O
,	O
(	O
stderr	O
,	O
" '%c' "	pointer
,	O
lc	int
)	O
)	O
;	O
}	O
else	O
{	O
code	short
=	O
_length_code	array
[	O
lc	int
]	O
;	O
send_code	O
(	O
s	pointer
,	O
code	short
+	O
LITERALS	int
+	O
1	int
,	O
ltree	pointer
)	O
;	O
extra	pointer
=	O
extra_lbits	array
[	O
code	short
]	O
;	O
if	O
(	O
extra	pointer
!=	O
0	int
)	O
{	O
lc	int
-=	O
base_length	array
[	O
code	short
]	O
;	O
send_bits	O
(	O
s	pointer
,	O
lc	int
,	O
extra	pointer
)	O
;	O
}	O
dist	int
--	O
;	O
code	short
=	O
d_code	O
(	O
dist	int
)	O
;	O
Assert	O
(	O
code	short
<	O
D_CODES	int
,	O
"bad d_code"	pointer
)	O
;	O
send_code	O
(	O
s	pointer
,	O
code	short
,	O
dtree	pointer
)	O
;	O
extra	pointer
=	O
extra_dbits	array
[	O
code	short
]	O
;	O
if	O
(	O
extra	pointer
!=	O
0	int
)	O
{	O
dist	int
-=	O
(	O
unsigned	O
)	O
base_dist	array
[	O
code	short
]	O
;	O
send_bits	O
(	O
s	pointer
,	O
dist	int
,	O
extra	pointer
)	O
;	O
}	O
}	O
Assert	O
(	O
(	O
uInt	int
)	O
(	O
s	pointer
->	O
pending	pointer
)	O
<	O
s	pointer
->	O
lit_bufsize	int
+	O
2	int
*	O
lx	int
,	O
"pendingBuf overflow"	pointer
)	O
;	O
}	O
while	O
(	O
lx	int
<	O
s	pointer
->	O
last_lit	int
)	O
;	O
send_code	O
(	O
s	pointer
,	O
END_BLOCK	int
,	O
ltree	pointer
)	O
;	O
}	O
local	O
int	O
detect_data_type	function
(	O
s	pointer
)	O
deflate_state	struct
*	O
s	pointer
;	O
{	O
unsigned	O
long	O
black_mask	long
=	O
0xf3ffc07fUL	int
;	O
int	O
n	int
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<=	O
31	int
;	O
n	int
++	O
,	O
black_mask	long
>>=	O
1	int
)	O
if	O
(	O
(	O
black_mask	long
&	O
1	int
)	O
&&	O
(	O
s	pointer
->	O
dyn_ltree	array
[	O
n	int
]	O
.	O
Freq	O
!=	O
0	int
)	O
)	O
return	O
Z_BINARY	int
;	O
if	O
(	O
s	pointer
->	O
dyn_ltree	array
[	O
9	int
]	O
.	O
Freq	O
!=	O
0	int
||	O
s	pointer
->	O
dyn_ltree	array
[	O
10	int
]	O
.	O
Freq	O
!=	O
0	int
||	O
s	pointer
->	O
dyn_ltree	array
[	O
13	int
]	O
.	O
Freq	O
!=	O
0	int
)	O
return	O
Z_TEXT	int
;	O
for	O
(	O
n	int
=	O
32	int
;	O
n	int
<	O
LITERALS	int
;	O
n	int
++	O
)	O
if	O
(	O
s	pointer
->	O
dyn_ltree	array
[	O
n	int
]	O
.	O
Freq	O
!=	O
0	int
)	O
return	O
Z_TEXT	int
;	O
return	O
Z_BINARY	int
;	O
}	O
local	O
unsigned	O
bi_reverse	function
(	O
code	short
,	O
len	int
)	O
unsigned	O
code	short
;	O
int	O
len	int
;	O
{	O
register	O
unsigned	O
res	int
=	O
0	int
;	O
do	O
{	O
res	int
|=	O
code	short
&	O
1	int
;	O
code	short
>>=	O
1	int
,	O
res	int
<<=	O
1	int
;	O
}	O
while	O
(	O
--	O
len	int
>	O
0	int
)	O
;	O
return	O
res	int
>>	O
1	int
;	O
}	O
local	O
void	O
bi_flush	function
(	O
s	pointer
)	O
deflate_state	struct
*	O
s	pointer
;	O
{	O
if	O
(	O
s	pointer
->	O
bi_valid	int
==	O
16	int
)	O
{	O
put_short	O
(	O
s	pointer
,	O
s	pointer
->	O
bi_buf	short
)	O
;	O
s	pointer
->	O
bi_buf	short
=	O
0	int
;	O
s	pointer
->	O
bi_valid	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
s	pointer
->	O
bi_valid	int
>=	O
8	int
)	O
{	O
put_byte	O
(	O
s	pointer
,	O
(	O
Byte	char
)	O
s	pointer
->	O
bi_buf	short
)	O
;	O
s	pointer
->	O
bi_buf	short
>>=	O
8	int
;	O
s	pointer
->	O
bi_valid	int
-=	O
8	int
;	O
}	O
}	O
local	O
void	O
bi_windup	function
(	O
s	pointer
)	O
deflate_state	struct
*	O
s	pointer
;	O
{	O
if	O
(	O
s	pointer
->	O
bi_valid	int
>	O
8	int
)	O
{	O
put_short	O
(	O
s	pointer
,	O
s	pointer
->	O
bi_buf	short
)	O
;	O
}	O
else	O
if	O
(	O
s	pointer
->	O
bi_valid	int
>	O
0	int
)	O
{	O
put_byte	O
(	O
s	pointer
,	O
(	O
Byte	char
)	O
s	pointer
->	O
bi_buf	short
)	O
;	O
}	O
s	pointer
->	O
bi_buf	short
=	O
0	int
;	O
s	pointer
->	O
bi_valid	int
=	O
0	int
;	O
}	O