static	O
void	O
cfbBresD	function
(	O
miPaintedSet	struct
*	O
paintedSet	pointer
,	O
const	O
miGC	struct
*	O
pGC	pointer
,	O
int	O
*	O
pdashNum	pointer
,	O
int	O
*	O
pdashIndex	pointer
,	O
const	O
unsigned	O
int	O
*	O
pDash	pointer
,	O
int	O
numInDashList	int
,	O
int	O
*	O
pdashOffset	pointer
,	O
bool	enum
isDoubleDash	enum
,	O
int	O
signdx	int
,	O
int	O
signdy	int
,	O
int	O
axis	int
,	O
int	O
x1	int
,	O
int	O
y1	function
,	O
int	O
e	int
,	O
int	O
e1	int
,	O
int	O
e2	int
,	O
int	O
len	int
)	O
;	O
static	O
void	O
cfbBresS	function
(	O
miPaintedSet	struct
*	O
paintedSet	pointer
,	O
const	O
miGC	struct
*	O
pGC	pointer
,	O
int	O
signdx	int
,	O
int	O
signdy	int
,	O
int	O
axis	int
,	O
int	O
x1	int
,	O
int	O
y1	function
,	O
int	O
e	int
,	O
int	O
e1	int
,	O
int	O
e2	int
,	O
int	O
len	int
)	O
;	O
static	O
void	O
cfbHorzS	function
(	O
miPaintedSet	struct
*	O
paintedSet	pointer
,	O
const	O
miGC	struct
*	O
pGC	pointer
,	O
int	O
x1	int
,	O
int	O
y1	function
,	O
int	O
len	int
)	O
;	O
static	O
void	O
cfbVertS	function
(	O
miPaintedSet	struct
*	O
paintedSet	pointer
,	O
const	O
miGC	struct
*	O
pGC	pointer
,	O
int	O
x1	int
,	O
int	O
y1	function
,	O
int	O
len	int
)	O
;	O
void	O
miZeroLine	O
(	O
miPaintedSet	struct
*	O
paintedSet	pointer
,	O
const	O
miGC	struct
*	O
pGC	pointer
,	O
miCoordMode	enum
mode	enum
,	O
int	O
npt	int
,	O
const	O
miPoint	struct
*	O
pPts	pointer
)	O
{	O
const	O
miPoint	struct
*	O
ppt	pointer
;	O
int	O
xstart	int
,	O
ystart	int
;	O
int	O
x1	int
,	O
x2	int
;	O
int	O
y1	function
,	O
y2	int
;	O
if	O
(	O
npt	int
<=	O
0	int
)	O
return	O
;	O
ppt	pointer
=	O
pPts	pointer
;	O
xstart	int
=	O
ppt	pointer
->	O
x	int
;	O
ystart	int
=	O
ppt	pointer
->	O
y	int
;	O
x2	int
=	O
xstart	int
;	O
y2	int
=	O
ystart	int
;	O
while	O
(	O
--	O
npt	int
)	O
{	O
x1	int
=	O
x2	int
;	O
y1	function
=	O
y2	int
;	O
++	O
ppt	pointer
;	O
x2	int
=	O
ppt	pointer
->	O
x	int
;	O
y2	int
=	O
ppt	pointer
->	O
y	int
;	O
if	O
(	O
mode	enum
==	O
MI_COORD_MODE_PREVIOUS	int
)	O
{	O
x2	int
+=	O
x1	int
;	O
y2	int
+=	O
y1	function
;	O
}	O
if	O
(	O
x1	int
==	O
x2	int
)	O
{	O
if	O
(	O
y1	function
>	O
y2	int
)	O
{	O
int	O
tmp	int
;	O
tmp	int
=	O
y2	int
;	O
y2	int
=	O
y1	function
+	O
1	int
;	O
y1	function
=	O
tmp	int
+	O
1	int
;	O
}	O
if	O
(	O
y1	function
!=	O
y2	int
)	O
cfbVertS	function
(	O
paintedSet	pointer
,	O
pGC	pointer
,	O
x1	int
,	O
y1	function
,	O
y2	int
-	O
y1	function
)	O
;	O
y2	int
=	O
ppt	pointer
->	O
y	int
;	O
}	O
else	O
if	O
(	O
y1	function
==	O
y2	int
)	O
{	O
if	O
(	O
x1	int
>	O
x2	int
)	O
{	O
int	O
tmp	int
;	O
tmp	int
=	O
x2	int
;	O
x2	int
=	O
x1	int
+	O
1	int
;	O
x1	int
=	O
tmp	int
+	O
1	int
;	O
}	O
if	O
(	O
x1	int
!=	O
x2	int
)	O
cfbHorzS	function
(	O
paintedSet	pointer
,	O
pGC	pointer
,	O
x1	int
,	O
y1	function
,	O
x2	int
-	O
x1	int
)	O
;	O
x2	int
=	O
ppt	pointer
->	O
x	int
;	O
}	O
else	O
{	O
int	O
adx	int
;	O
int	O
ady	int
;	O
int	O
signdx	int
;	O
int	O
signdy	int
;	O
int	O
e	int
,	O
e1	int
,	O
e2	int
;	O
int	O
axis	int
;	O
int	O
len	int
;	O
AbsDeltaAndSign	O
(	O
x2	int
,	O
x1	int
,	O
adx	int
,	O
signdx	int
)	O
;	O
AbsDeltaAndSign	O
(	O
y2	int
,	O
y1	function
,	O
ady	int
,	O
signdy	int
)	O
;	O
if	O
(	O
adx	int
>	O
ady	int
)	O
{	O
axis	int
=	O
X_AXIS	int
;	O
e1	int
=	O
ady	int
<<	O
1	int
;	O
e2	int
=	O
e1	int
-	O
(	O
adx	int
<<	O
1	int
)	O
;	O
e	int
=	O
e1	int
-	O
adx	int
;	O
FIXUP_X_MAJOR_ERROR	O
(	O
e	int
,	O
signdx	int
,	O
signdy	int
)	O
;	O
}	O
else	O
{	O
axis	int
=	O
Y_AXIS	int
;	O
e1	int
=	O
adx	int
<<	O
1	int
;	O
e2	int
=	O
e1	int
-	O
(	O
ady	int
<<	O
1	int
)	O
;	O
e	int
=	O
e1	int
-	O
ady	int
;	O
FIXUP_Y_MAJOR_ERROR	O
(	O
e	int
,	O
signdx	int
,	O
signdy	int
)	O
;	O
}	O
if	O
(	O
axis	int
==	O
X_AXIS	int
)	O
len	int
=	O
adx	int
;	O
else	O
len	int
=	O
ady	int
;	O
cfbBresS	function
(	O
paintedSet	pointer
,	O
pGC	pointer
,	O
signdx	int
,	O
signdy	int
,	O
axis	int
,	O
x1	int
,	O
y1	function
,	O
e	int
,	O
e1	int
,	O
e2	int
,	O
len	int
)	O
;	O
}	O
}	O
if	O
(	O
pGC	pointer
->	O
capStyle	int
!=	O
(	O
int	O
)	O
MI_CAP_NOT_LAST	int
&&	O
(	O
xstart	int
!=	O
x2	int
||	O
ystart	int
!=	O
y2	int
||	O
ppt	pointer
==	O
pPts	pointer
+	O
1	int
)	O
)	O
MI_PAINT_POINT	O
(	O
paintedSet	pointer
,	O
pGC	pointer
->	O
pixels	pointer
[	O
1	int
]	O
,	O
x2	int
,	O
y2	int
)	O
}	O
void	O
miZeroDash	O
(	O
miPaintedSet	struct
*	O
paintedSet	pointer
,	O
const	O
miGC	struct
*	O
pGC	pointer
,	O
miCoordMode	enum
mode	enum
,	O
int	O
npt	int
,	O
const	O
miPoint	struct
*	O
pPts	pointer
)	O
{	O
const	O
miPoint	struct
*	O
ppt	pointer
;	O
int	O
xstart	int
,	O
ystart	int
;	O
int	O
x1	int
,	O
x2	int
,	O
y1	function
,	O
y2	int
;	O
const	O
unsigned	O
int	O
*	O
pDash	pointer
;	O
int	O
dashNum	int
,	O
dashIndex	int
;	O
int	O
dashOffset	int
;	O
int	O
numInDashList	int
;	O
bool	enum
isDoubleDash	enum
;	O
if	O
(	O
npt	int
<=	O
0	int
)	O
return	O
;	O
pDash	pointer
=	O
pGC	pointer
->	O
dash	pointer
;	O
numInDashList	int
=	O
pGC	pointer
->	O
numInDashList	int
;	O
isDoubleDash	enum
=	O
(	O
pGC	pointer
->	O
lineStyle	int
==	O
(	O
int	O
)	O
MI_LINE_DOUBLE_DASH	int
?	O
true	int
:	O
false	int
)	O
;	O
dashNum	int
=	O
0	int
;	O
dashIndex	int
=	O
0	int
;	O
dashOffset	int
=	O
0	int
;	O
miStepDash	O
(	O
pGC	pointer
->	O
dashOffset	int
,	O
&	O
dashNum	int
,	O
&	O
dashIndex	int
,	O
pDash	pointer
,	O
numInDashList	int
,	O
&	O
dashOffset	int
)	O
;	O
ppt	pointer
=	O
pPts	pointer
;	O
xstart	int
=	O
ppt	pointer
->	O
x	int
;	O
ystart	int
=	O
ppt	pointer
->	O
y	int
;	O
x2	int
=	O
xstart	int
;	O
y2	int
=	O
ystart	int
;	O
while	O
(	O
--	O
npt	int
)	O
{	O
x1	int
=	O
x2	int
;	O
y1	function
=	O
y2	int
;	O
++	O
ppt	pointer
;	O
x2	int
=	O
ppt	pointer
->	O
x	int
;	O
y2	int
=	O
ppt	pointer
->	O
y	int
;	O
if	O
(	O
mode	enum
==	O
MI_COORD_MODE_PREVIOUS	int
)	O
{	O
x2	int
+=	O
x1	int
;	O
y2	int
+=	O
y1	function
;	O
}	O
{	O
int	O
adx	int
;	O
int	O
ady	int
;	O
int	O
signdx	int
;	O
int	O
signdy	int
;	O
int	O
e	int
,	O
e1	int
,	O
e2	int
;	O
int	O
axis	int
;	O
int	O
len	int
;	O
AbsDeltaAndSign	O
(	O
x2	int
,	O
x1	int
,	O
adx	int
,	O
signdx	int
)	O
;	O
AbsDeltaAndSign	O
(	O
y2	int
,	O
y1	function
,	O
ady	int
,	O
signdy	int
)	O
;	O
if	O
(	O
adx	int
>	O
ady	int
)	O
{	O
axis	int
=	O
X_AXIS	int
;	O
e1	int
=	O
ady	int
<<	O
1	int
;	O
e2	int
=	O
e1	int
-	O
(	O
adx	int
<<	O
1	int
)	O
;	O
e	int
=	O
e1	int
-	O
adx	int
;	O
len	int
=	O
adx	int
;	O
FIXUP_X_MAJOR_ERROR	O
(	O
e	int
,	O
signdx	int
,	O
signdy	int
)	O
;	O
}	O
else	O
{	O
axis	int
=	O
Y_AXIS	int
;	O
e1	int
=	O
adx	int
<<	O
1	int
;	O
e2	int
=	O
e1	int
-	O
(	O
ady	int
<<	O
1	int
)	O
;	O
e	int
=	O
e1	int
-	O
ady	int
;	O
len	int
=	O
ady	int
;	O
FIXUP_Y_MAJOR_ERROR	O
(	O
e	int
,	O
signdx	int
,	O
signdy	int
)	O
;	O
}	O
cfbBresD	function
(	O
paintedSet	pointer
,	O
pGC	pointer
,	O
&	O
dashNum	int
,	O
&	O
dashIndex	int
,	O
pDash	pointer
,	O
numInDashList	int
,	O
&	O
dashOffset	int
,	O
isDoubleDash	enum
,	O
signdx	int
,	O
signdy	int
,	O
axis	int
,	O
x1	int
,	O
y1	function
,	O
e	int
,	O
e1	int
,	O
e2	int
,	O
len	int
)	O
;	O
}	O
}	O
if	O
(	O
pGC	pointer
->	O
capStyle	int
!=	O
(	O
int	O
)	O
MI_CAP_NOT_LAST	int
&&	O
(	O
xstart	int
!=	O
x2	int
||	O
ystart	int
!=	O
y2	int
||	O
ppt	pointer
==	O
pPts	pointer
+	O
1	int
)	O
)	O
{	O
if	O
(	O
dashNum	int
&	O
1	int
)	O
{	O
if	O
(	O
isDoubleDash	enum
)	O
MI_PAINT_POINT	O
(	O
paintedSet	pointer
,	O
pGC	pointer
->	O
pixels	pointer
[	O
0	int
]	O
,	O
x2	int
,	O
y2	int
)	O
;	O
}	O
else	O
{	O
int	O
numPixels	int
=	O
pGC	pointer
->	O
numPixels	int
;	O
int	O
paintType	int
=	O
1	int
+	O
(	O
(	O
dashNum	int
/	O
2	int
)	O
%	O
(	O
numPixels	int
-	O
1	int
)	O
)	O
;	O
MI_PAINT_POINT	O
(	O
paintedSet	pointer
,	O
pGC	pointer
->	O
pixels	pointer
[	O
paintType	int
]	O
,	O
x2	int
,	O
y2	int
)	O
;	O
}	O
}	O
}	O
static	O
void	O
cfbBresS	function
(	O
miPaintedSet	struct
*	O
paintedSet	pointer
,	O
const	O
miGC	struct
*	O
pGC	pointer
,	O
int	O
signdx	int
,	O
int	O
signdy	int
,	O
int	O
axis	int
,	O
int	O
x1	int
,	O
int	O
y1	function
,	O
int	O
e	int
,	O
int	O
e1	int
,	O
int	O
e2	int
,	O
int	O
len	int
)	O
{	O
miPoint	struct
*	O
pptInit	pointer
,	O
*	O
pptLast	pointer
;	O
unsigned	O
int	O
*	O
pwidthInit	pointer
,	O
*	O
pwidthLast	pointer
;	O
int	O
x	int
,	O
y	int
;	O
int	O
e3	int
;	O
int	O
numSpans	int
;	O
int	O
ycurr	int
;	O
miPoint	struct
*	O
ppt	pointer
;	O
unsigned	O
int	O
*	O
pwidth	pointer
;	O
bool	enum
firstspan	enum
;	O
if	O
(	O
len	int
==	O
0	int
)	O
return	O
;	O
pptInit	pointer
=	O
(	O
miPoint	struct
*	O
)	O
mi_xmalloc	O
(	O
len	int
*	O
sizeof	O
(	O
miPoint	struct
)	O
)	O
;	O
pwidthInit	pointer
=	O
(	O
unsigned	O
int	O
*	O
)	O
mi_xmalloc	O
(	O
len	int
*	O
sizeof	O
(	O
unsigned	O
int	O
)	O
)	O
;	O
pptLast	pointer
=	O
pptInit	pointer
+	O
(	O
len	int
-	O
1	int
)	O
;	O
pwidthLast	pointer
=	O
pwidthInit	pointer
+	O
(	O
len	int
-	O
1	int
)	O
;	O
numSpans	int
=	O
0	int
;	O
ycurr	int
=	O
0	int
;	O
firstspan	enum
=	O
true	int
;	O
if	O
(	O
signdy	int
>=	O
0	int
)	O
{	O
ppt	pointer
=	O
pptInit	pointer
;	O
pwidth	pointer
=	O
pwidthInit	pointer
;	O
}	O
else	O
{	O
ppt	pointer
=	O
pptLast	pointer
;	O
pwidth	pointer
=	O
pwidthLast	pointer
;	O
}	O
e3	int
=	O
e2	int
-	O
e1	int
;	O
e	int
=	O
e	int
-	O
e1	int
;	O
x	int
=	O
x1	int
;	O
y	int
=	O
y1	function
;	O
switch	O
(	O
axis	int
)	O
{	O
case	O
X_AXIS	int
:	O
default	O
:	O
Loop_x	O
(	O
len	int
,	O
MI_ADD_POINT	O
(	O
x	int
,	O
y	int
,	O
ppt	pointer
,	O
pwidth	pointer
,	O
numSpans	int
,	O
ycurr	int
,	O
firstspan	enum
,	O
signdy	int
)	O
)	O
break	O
;	O
case	O
Y_AXIS	int
:	O
Loop_y	O
(	O
len	int
,	O
MI_ADD_POINT	O
(	O
x	int
,	O
y	int
,	O
ppt	pointer
,	O
pwidth	pointer
,	O
numSpans	int
,	O
ycurr	int
,	O
firstspan	enum
,	O
signdy	int
)	O
)	O
break	O
;	O
}	O
if	O
(	O
numSpans	int
>	O
0	int
)	O
{	O
if	O
(	O
signdy	int
<	O
0	int
)	O
{	O
miPoint	struct
*	O
ppt_src	pointer
=	O
pptLast	pointer
-	O
(	O
numSpans	int
-	O
1	int
)	O
;	O
miPoint	struct
*	O
ppt_dst	pointer
=	O
pptInit	pointer
;	O
unsigned	O
int	O
*	O
pwidth_src	pointer
=	O
pwidthLast	pointer
-	O
(	O
numSpans	int
-	O
1	int
)	O
;	O
unsigned	O
int	O
*	O
pwidth_dst	pointer
=	O
pwidthInit	pointer
;	O
int	O
count	int
=	O
numSpans	int
;	O
while	O
(	O
count	int
--	O
)	O
{	O
*	O
ppt_dst	pointer
++	O
=	O
*	O
ppt_src	pointer
++	O
;	O
*	O
pwidth_dst	pointer
++	O
=	O
*	O
pwidth_src	pointer
++	O
;	O
}	O
}	O
MI_PAINT_SPANS	O
(	O
paintedSet	pointer
,	O
pGC	pointer
->	O
pixels	pointer
[	O
1	int
]	O
,	O
numSpans	int
,	O
pptInit	pointer
,	O
pwidthInit	pointer
)	O
}	O
}	O
static	O
void	O
cfbBresD	function
(	O
miPaintedSet	struct
*	O
paintedSet	pointer
,	O
const	O
miGC	struct
*	O
pGC	pointer
,	O
int	O
*	O
pdashNum	pointer
,	O
int	O
*	O
pdashIndex	pointer
,	O
const	O
unsigned	O
int	O
*	O
pDash	pointer
,	O
int	O
numInDashList	int
,	O
int	O
*	O
pdashOffset	pointer
,	O
bool	enum
isDoubleDash	enum
,	O
int	O
signdx	int
,	O
int	O
signdy	int
,	O
int	O
axis	int
,	O
int	O
x1	int
,	O
int	O
y1	function
,	O
int	O
e	int
,	O
int	O
e1	int
,	O
int	O
e2	int
,	O
int	O
len	int
)	O
{	O
miPoint	struct
*	O
pptInit_fg	pointer
,	O
*	O
pptInit_bg	pointer
=	O
(	O
miPoint	struct
*	O
)	O
NULL	O
;	O
miPoint	struct
*	O
pptLast_fg	pointer
,	O
*	O
pptLast_bg	pointer
=	O
(	O
miPoint	struct
*	O
)	O
NULL	O
;	O
unsigned	O
int	O
*	O
pwidthInit_fg	pointer
,	O
*	O
pwidthInit_bg	pointer
=	O
(	O
unsigned	O
int	O
*	O
)	O
NULL	O
;	O
unsigned	O
int	O
*	O
pwidthLast_fg	pointer
,	O
*	O
pwidthLast_bg	pointer
=	O
(	O
unsigned	O
int	O
*	O
)	O
NULL	O
;	O
int	O
x	int
,	O
y	int
;	O
int	O
e3	int
;	O
int	O
dashNum	int
,	O
dashIndex	int
;	O
int	O
dashOffset	int
;	O
int	O
dashRemaining	int
;	O
int	O
thisDash	int
;	O
int	O
numSpans_fg	int
,	O
numSpans_bg	int
=	O
0	int
;	O
int	O
ycurr_fg	int
,	O
ycurr_bg	int
=	O
0	int
;	O
miPoint	struct
*	O
ppt_fg	pointer
,	O
*	O
ppt_bg	pointer
=	O
(	O
miPoint	struct
*	O
)	O
NULL	O
;	O
unsigned	O
int	O
*	O
pwidth_fg	pointer
,	O
*	O
pwidth_bg	pointer
=	O
(	O
unsigned	O
int	O
*	O
)	O
NULL	O
;	O
bool	enum
firstspan_fg	enum
,	O
firstspan_bg	enum
=	O
false	int
;	O
pptInit_fg	pointer
=	O
(	O
miPoint	struct
*	O
)	O
mi_xmalloc	O
(	O
len	int
*	O
sizeof	O
(	O
miPoint	struct
)	O
)	O
;	O
pwidthInit_fg	pointer
=	O
(	O
unsigned	O
int	O
*	O
)	O
mi_xmalloc	O
(	O
len	int
*	O
sizeof	O
(	O
unsigned	O
int	O
)	O
)	O
;	O
pptLast_fg	pointer
=	O
pptInit_fg	pointer
+	O
(	O
len	int
-	O
1	int
)	O
;	O
pwidthLast_fg	pointer
=	O
pwidthInit_fg	pointer
+	O
(	O
len	int
-	O
1	int
)	O
;	O
if	O
(	O
isDoubleDash	enum
)	O
{	O
pptInit_bg	pointer
=	O
(	O
miPoint	struct
*	O
)	O
mi_xmalloc	O
(	O
len	int
*	O
sizeof	O
(	O
miPoint	struct
)	O
)	O
;	O
pwidthInit_bg	pointer
=	O
(	O
unsigned	O
int	O
*	O
)	O
mi_xmalloc	O
(	O
len	int
*	O
sizeof	O
(	O
unsigned	O
int	O
)	O
)	O
;	O
pptLast_bg	pointer
=	O
pptInit_bg	pointer
+	O
(	O
len	int
-	O
1	int
)	O
;	O
pwidthLast_bg	pointer
=	O
pwidthInit_bg	pointer
+	O
(	O
len	int
-	O
1	int
)	O
;	O
}	O
dashNum	int
=	O
*	O
pdashNum	pointer
;	O
dashIndex	int
=	O
*	O
pdashIndex	pointer
;	O
dashOffset	int
=	O
*	O
pdashOffset	pointer
;	O
dashRemaining	int
=	O
(	O
int	O
)	O
(	O
pDash	pointer
[	O
dashIndex	int
]	O
)	O
-	O
dashOffset	int
;	O
if	O
(	O
len	int
<=	O
(	O
thisDash	int
=	O
dashRemaining	int
)	O
)	O
{	O
thisDash	int
=	O
len	int
;	O
dashRemaining	int
-=	O
len	int
;	O
}	O
e3	int
=	O
e2	int
-	O
e1	int
;	O
e	int
=	O
e	int
-	O
e1	int
;	O
x	int
=	O
x1	int
;	O
y	int
=	O
y1	function
;	O
for	O
(	O
;	O
;	O
)	O
{	O
len	int
-=	O
thisDash	int
;	O
numSpans_fg	int
=	O
0	int
;	O
ycurr_fg	int
=	O
0	int
;	O
firstspan_fg	enum
=	O
true	int
;	O
if	O
(	O
signdy	int
>=	O
0	int
)	O
{	O
ppt_fg	pointer
=	O
pptInit_fg	pointer
;	O
pwidth_fg	pointer
=	O
pwidthInit_fg	pointer
;	O
}	O
else	O
{	O
ppt_fg	pointer
=	O
pptLast_fg	pointer
;	O
pwidth_fg	pointer
=	O
pwidthLast_fg	pointer
;	O
}	O
if	O
(	O
isDoubleDash	enum
)	O
{	O
numSpans_bg	int
=	O
0	int
;	O
ycurr_bg	int
=	O
0	int
;	O
firstspan_bg	enum
=	O
true	int
;	O
ppt_bg	pointer
=	O
pptInit_bg	pointer
;	O
pwidth_bg	pointer
=	O
pwidthInit_bg	pointer
;	O
if	O
(	O
signdy	int
>=	O
0	int
)	O
{	O
ppt_bg	pointer
=	O
pptInit_bg	pointer
;	O
pwidth_bg	pointer
=	O
pwidthInit_bg	pointer
;	O
}	O
else	O
{	O
ppt_bg	pointer
=	O
pptLast_bg	pointer
;	O
pwidth_bg	pointer
=	O
pwidthLast_bg	pointer
;	O
}	O
}	O
switch	O
(	O
axis	int
)	O
{	O
case	O
X_AXIS	int
:	O
default	O
:	O
if	O
(	O
dashIndex	int
&	O
1	int
)	O
{	O
if	O
(	O
isDoubleDash	enum
)	O
{	O
Loop_x	O
(	O
thisDash	int
,	O
MI_ADD_POINT	O
(	O
x	int
,	O
y	int
,	O
ppt_bg	pointer
,	O
pwidth_bg	pointer
,	O
numSpans_bg	int
,	O
ycurr_bg	int
,	O
firstspan_bg	enum
,	O
signdy	int
)	O
)	O
}	O
else	O
Loop_x	O
(	O
thisDash	int
,	O
;	O
)	O
;	O
}	O
else	O
Loop_x	O
(	O
thisDash	int
,	O
MI_ADD_POINT	O
(	O
x	int
,	O
y	int
,	O
ppt_fg	pointer
,	O
pwidth_fg	pointer
,	O
numSpans_fg	int
,	O
ycurr_fg	int
,	O
firstspan_fg	enum
,	O
signdy	int
)	O
)	O
break	O
;	O
case	O
Y_AXIS	int
:	O
if	O
(	O
dashIndex	int
&	O
1	int
)	O
{	O
if	O
(	O
isDoubleDash	enum
)	O
{	O
Loop_y	O
(	O
thisDash	int
,	O
MI_ADD_POINT	O
(	O
x	int
,	O
y	int
,	O
ppt_bg	pointer
,	O
pwidth_bg	pointer
,	O
numSpans_bg	int
,	O
ycurr_bg	int
,	O
firstspan_bg	enum
,	O
signdy	int
)	O
)	O
}	O
else	O
Loop_y	O
(	O
thisDash	int
,	O
;	O
)	O
;	O
}	O
else	O
Loop_y	O
(	O
thisDash	int
,	O
MI_ADD_POINT	O
(	O
x	int
,	O
y	int
,	O
ppt_fg	pointer
,	O
pwidth_fg	pointer
,	O
numSpans_fg	int
,	O
ycurr_fg	int
,	O
firstspan_fg	enum
,	O
signdy	int
)	O
)	O
break	O
;	O
}	O
if	O
(	O
numSpans_fg	int
>	O
0	int
)	O
{	O
miPoint	struct
*	O
pptStart_fg	pointer
;	O
unsigned	O
int	O
*	O
pwidthStart_fg	pointer
;	O
if	O
(	O
signdy	int
>=	O
0	int
)	O
{	O
pptStart_fg	pointer
=	O
pptInit_fg	pointer
;	O
pwidthStart_fg	pointer
=	O
pwidthInit_fg	pointer
;	O
}	O
else	O
{	O
pptStart_fg	pointer
=	O
pptLast_fg	pointer
-	O
(	O
numSpans_fg	int
-	O
1	int
)	O
;	O
pwidthStart_fg	pointer
=	O
pwidthLast_fg	pointer
-	O
(	O
numSpans_fg	int
-	O
1	int
)	O
;	O
}	O
{	O
int	O
numPixels	int
=	O
pGC	pointer
->	O
numPixels	int
;	O
int	O
paintType	int
=	O
1	int
+	O
(	O
(	O
dashNum	int
/	O
2	int
)	O
%	O
(	O
numPixels	int
-	O
1	int
)	O
)	O
;	O
MI_COPY_AND_PAINT_SPANS	O
(	O
paintedSet	pointer
,	O
pGC	pointer
->	O
pixels	pointer
[	O
paintType	int
]	O
,	O
numSpans_fg	int
,	O
pptStart_fg	pointer
,	O
pwidthStart_fg	pointer
)	O
}	O
}	O
if	O
(	O
isDoubleDash	enum
&&	O
numSpans_bg	int
>	O
0	int
)	O
{	O
miPoint	struct
*	O
pptStart_bg	pointer
;	O
unsigned	O
int	O
*	O
pwidthStart_bg	pointer
;	O
if	O
(	O
signdy	int
>=	O
0	int
)	O
{	O
pptStart_bg	pointer
=	O
pptInit_bg	pointer
;	O
pwidthStart_bg	pointer
=	O
pwidthInit_bg	pointer
;	O
}	O
else	O
{	O
pptStart_bg	pointer
=	O
pptLast_bg	pointer
-	O
(	O
numSpans_bg	int
-	O
1	int
)	O
;	O
pwidthStart_bg	pointer
=	O
pwidthLast_bg	pointer
-	O
(	O
numSpans_bg	int
-	O
1	int
)	O
;	O
}	O
MI_COPY_AND_PAINT_SPANS	O
(	O
paintedSet	pointer
,	O
pGC	pointer
->	O
pixels	pointer
[	O
0	int
]	O
,	O
numSpans_bg	int
,	O
pptStart_bg	pointer
,	O
pwidthStart_bg	pointer
)	O
}	O
if	O
(	O
len	int
==	O
0	int
)	O
break	O
;	O
NextDash	O
}	O
*	O
pdashNum	pointer
=	O
dashNum	int
;	O
*	O
pdashIndex	pointer
=	O
dashIndex	int
;	O
*	O
pdashOffset	pointer
=	O
(	O
int	O
)	O
(	O
pDash	pointer
[	O
dashIndex	int
]	O
)	O
-	O
dashRemaining	int
;	O
free	function
(	O
pwidthInit_fg	pointer
)	O
;	O
free	function
(	O
pptInit_fg	pointer
)	O
;	O
if	O
(	O
isDoubleDash	enum
)	O
{	O
free	function
(	O
pwidthInit_bg	pointer
)	O
;	O
free	function
(	O
pptInit_bg	pointer
)	O
;	O
}	O
}	O
static	O
void	O
cfbHorzS	function
(	O
miPaintedSet	struct
*	O
paintedSet	pointer
,	O
const	O
miGC	struct
*	O
pGC	pointer
,	O
int	O
x1	int
,	O
int	O
y1	function
,	O
int	O
len	int
)	O
{	O
miPoint	struct
*	O
ppt	pointer
;	O
unsigned	O
int	O
*	O
pwidth	pointer
;	O
ppt	pointer
=	O
(	O
miPoint	struct
*	O
)	O
mi_xmalloc	O
(	O
sizeof	O
(	O
miPoint	struct
)	O
)	O
;	O
pwidth	pointer
=	O
(	O
unsigned	O
int	O
*	O
)	O
mi_xmalloc	O
(	O
sizeof	O
(	O
unsigned	O
int	O
)	O
)	O
;	O
ppt	pointer
->	O
x	int
=	O
x1	int
;	O
ppt	pointer
->	O
y	int
=	O
y1	function
;	O
*	O
pwidth	pointer
=	O
(	O
unsigned	O
int	O
)	O
len	int
;	O
MI_PAINT_SPANS	O
(	O
paintedSet	pointer
,	O
pGC	pointer
->	O
pixels	pointer
[	O
1	int
]	O
,	O
1	int
,	O
ppt	pointer
,	O
pwidth	pointer
)	O
}	O
static	O
void	O
cfbVertS	function
(	O
miPaintedSet	struct
*	O
paintedSet	pointer
,	O
const	O
miGC	struct
*	O
pGC	pointer
,	O
int	O
x1	int
,	O
int	O
y1	function
,	O
int	O
len	int
)	O
{	O
miPoint	struct
*	O
ppt	pointer
,	O
*	O
pptInit	pointer
;	O
unsigned	O
int	O
*	O
pwidth	pointer
,	O
*	O
pwidthInit	pointer
;	O
int	O
i	int
;	O
ppt	pointer
=	O
pptInit	pointer
=	O
(	O
miPoint	struct
*	O
)	O
mi_xmalloc	O
(	O
len	int
*	O
sizeof	O
(	O
miPoint	struct
)	O
)	O
;	O
pwidth	pointer
=	O
pwidthInit	pointer
=	O
(	O
unsigned	O
int	O
*	O
)	O
mi_xmalloc	O
(	O
len	int
*	O
sizeof	O
(	O
unsigned	O
int	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len	int
;	O
i	int
++	O
)	O
{	O
ppt	pointer
->	O
x	int
=	O
x1	int
;	O
ppt	pointer
->	O
y	int
=	O
y1	function
+	O
i	int
;	O
ppt	pointer
++	O
;	O
*	O
pwidth	pointer
++	O
=	O
(	O
unsigned	O
int	O
)	O
1	int
;	O
}	O
MI_PAINT_SPANS	O
(	O
paintedSet	pointer
,	O
pGC	pointer
->	O
pixels	pointer
[	O
1	int
]	O
,	O
len	int
,	O
pptInit	pointer
,	O
pwidthInit	pointer
)	O
}	O
