struct	O
translator	struct
{	O
struct	O
port_info	struct
*	O
pi	*
;	O
char	O
*	O
name	*
;	O
mach_port_t	O
active	int
;	O
}	O
;	O
static	O
struct	O
hurd_ihash	O
translator_ihash	*
=	O
HURD_IHASH_INITIALIZER	function
(	O
HURD_IHASH_NO_LOCP	O
)	O
;	O
static	O
pthread_mutex_t	O
translator_ihash_lock	*
=	O
PTHREAD_MUTEX_INITIALIZER	O
;	O
static	O
void	O
translator_ihash_cleanup	function
(	O
void	O
*	O
element	*
,	O
void	O
*	O
arg	*
)	O
{	O
struct	O
translator	struct
*	O
translator	*
=	O
element	*
;	O
if	O
(	O
translator	*
->	O
pi	*
)	O
ports_port_deref	function
(	O
translator	*
->	O
pi	*
)	O
;	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
translator	*
->	O
active	int
)	O
;	O
free	function
(	O
translator	*
->	O
name	*
)	O
;	O
free	function
(	O
translator	*
)	O
;	O
}	O
error_t	O
fshelp_set_active_translator	function
(	O
struct	O
port_info	O
*	O
pi	*
,	O
const	O
char	O
*	O
name	*
,	O
mach_port_t	O
active	int
)	O
{	O
error_t	O
err	int
=	O
0	int
;	O
pthread_mutex_lock	function
(	O
&	O
translator_ihash_lock	*
)	O
;	O
if	O
(	O
!	O
translator_ihash	struct
.	O
cleanup	*
)	O
hurd_ihash_set_cleanup	function
(	O
&	O
translator_ihash	struct
,	O
translator_ihash_cleanup	*
,	O
NULL	O
)	O
;	O
struct	O
translator	struct
*	O
t	*
=	O
NULL	O
;	O
HURD_IHASH_ITERATE	function
(	O
&	O
translator_ihash	O
,	O
value	*
)	O
{	O
t	int
=	O
value	O
;	O
if	O
(	O
strcmp	function
(	O
name	*
,	O
t	*
->	O
name	*
)	O
==	O
0	int
)	O
goto	O
update	*
;	O
}	O
t	*
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
translator	struct
)	O
)	O
;	O
if	O
(	O
!	O
t	*
)	O
{	O
err	int
=	O
errno	O
;	O
goto	O
out	O
;	O
}	O
t	*
->	O
active	int
=	O
MACH_PORT_NULL	O
;	O
t	*
->	O
pi	*
=	O
NULL	O
;	O
t	*
->	O
name	*
=	O
strdup	function
(	O
name	*
)	O
;	O
if	O
(	O
!	O
t	*
->	O
name	*
)	O
{	O
err	int
=	O
errno	O
;	O
free	function
(	O
t	*
)	O
;	O
goto	O
out	O
;	O
}	O
err	O
=	O
hurd_ihash_add	function
(	O
&	O
translator_ihash	O
,	O
(	O
hurd_ihash_key_t	long
)	O
t	*
,	O
t	*
)	O
;	O
if	O
(	O
err	int
)	O
goto	O
out	O
;	O
update	*
:	O
if	O
(	O
active	int
)	O
{	O
if	O
(	O
t	*
->	O
pi	*
!=	O
pi	int
)	O
{	O
mach_port_t	O
old	int
;	O
err	O
=	O
mach_port_request_notification	function
(	O
mach_task_self	function
(	O
)	O
,	O
active	int
,	O
MACH_NOTIFY_DEAD_NAME	O
,	O
0	int
,	O
pi	*
->	O
port_right	int
,	O
MACH_MSG_TYPE_MAKE_SEND_ONCE	O
,	O
&	O
old	O
)	O
;	O
if	O
(	O
err	int
)	O
goto	O
out	O
;	O
if	O
(	O
old	int
!=	O
MACH_PORT_NULL	O
)	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
old	O
)	O
;	O
if	O
(	O
t	*
->	O
pi	*
)	O
ports_port_deref	function
(	O
t	*
->	O
pi	*
)	O
;	O
ports_port_ref	function
(	O
pi	*
)	O
;	O
t	*
->	O
pi	*
=	O
pi	*
;	O
}	O
if	O
(	O
MACH_PORT_VALID	function
(	O
t	*
->	O
active	int
)	O
)	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
t	*
->	O
active	int
)	O
;	O
mach_port_mod_refs	function
(	O
mach_task_self	function
(	O
)	O
,	O
active	int
,	O
MACH_PORT_RIGHT_SEND	int
,	O
+	O
1	int
)	O
;	O
t	*
->	O
active	int
=	O
active	int
;	O
}	O
else	O
hurd_ihash_remove	function
(	O
&	O
translator_ihash	O
,	O
(	O
hurd_ihash_key_t	long
)	O
t	int
)	O
;	O
out	O
:	O
pthread_mutex_unlock	function
(	O
&	O
translator_ihash_lock	O
)	O
;	O
return	O
err	int
;	O
}	O
error_t	O
fshelp_remove_active_translator	function
(	O
mach_port_t	O
active	int
)	O
{	O
error_t	O
err	int
=	O
0	int
;	O
pthread_mutex_lock	function
(	O
&	O
translator_ihash_lock	O
)	O
;	O
struct	O
translator	O
*	O
t	*
=	O
NULL	O
;	O
HURD_IHASH_ITERATE	function
(	O
&	O
translator_ihash	O
,	O
value	O
)	O
{	O
struct	O
translator	struct
*	O
v	*
=	O
value	*
;	O
if	O
(	O
active	int
==	O
v	struct
->	O
active	int
)	O
{	O
t	int
=	O
v	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
t	int
)	O
hurd_ihash_remove	function
(	O
&	O
translator_ihash	O
,	O
(	O
hurd_ihash_key_t	long
)	O
t	int
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
translator_ihash_lock	struct
)	O
;	O
return	O
err	int
;	O
}	O
error_t	O
fshelp_get_active_translators	function
(	O
char	O
*	O
*	O
translators	*
,	O
size_t	long
*	O
translators_len	*
,	O
fshelp_filter	*
filter	*
,	O
const	O
char	O
*	O
prefix	*
)	O
{	O
error_t	O
err	int
=	O
0	int
;	O
pthread_mutex_lock	function
(	O
&	O
translator_ihash_lock	*
)	O
;	O
if	O
(	O
prefix	*
&&	O
strlen	function
(	O
prefix	*
)	O
==	O
0	int
)	O
prefix	*
=	O
NULL	O
;	O
HURD_IHASH_ITERATE	function
(	O
&	O
translator_ihash	O
,	O
value	*
)	O
{	O
struct	O
translator	struct
*	O
t	*
=	O
value	*
;	O
if	O
(	O
prefix	*
!=	O
NULL	O
&&	O
(	O
strncmp	function
(	O
t	*
->	O
name	*
,	O
prefix	*
,	O
strlen	function
(	O
prefix	*
)	O
)	O
!=	O
0	int
||	O
t	*
->	O
name	*
[	O
strlen	function
(	O
prefix	*
)	O
]	O
!=	O
'/'	O
)	O
)	O
continue	O
;	O
if	O
(	O
filter	*
)	O
{	O
char	O
*	O
dir	*
=	O
strdup	function
(	O
t	*
->	O
name	*
)	O
;	O
if	O
(	O
!	O
dir	*
)	O
{	O
err	*
=	O
ENOMEM	int
;	O
break	O
;	O
}	O
err	O
=	O
filter	function
(	O
dirname	function
(	O
dir	*
)	O
)	O
;	O
free	function
(	O
dir	*
)	O
;	O
if	O
(	O
err	O
)	O
{	O
err	int
=	O
0	int
;	O
continue	O
;	O
}	O
}	O
err	int
=	O
argz_add	function
(	O
translators	*
,	O
translators_len	*
,	O
&	O
t	*
->	O
name	*
[	O
prefix	O
?	O
strlen	function
(	O
prefix	*
)	O
+	O
1	int
:	O
0	int
]	O
)	O
;	O
if	O
(	O
err	O
)	O
break	O
;	O
}	O
pthread_mutex_unlock	function
(	O
&	O
translator_ihash_lock	O
)	O
;	O
return	O
err	int
;	O
}	O