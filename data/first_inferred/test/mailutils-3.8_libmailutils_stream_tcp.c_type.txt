struct	O
_tcp_instance	struct
{	O
struct	O
_mu_stream	struct
stream	pointer
;	O
int	O
fd	int
;	O
int	O
state	pointer
;	O
struct	O
mu_sockaddr	struct
*	O
remote_addr	pointer
;	O
struct	O
mu_sockaddr	struct
*	O
source_addr	pointer
;	O
}	O
;	O
static	O
int	O
_tcp_close	function
(	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
struct	O
_tcp_instance	struct
*	O
tcp	pointer
=	O
(	O
struct	O
_tcp_instance	struct
*	O
)	O
stream	pointer
;	O
int	O
err	int
=	O
0	int
;	O
if	O
(	O
tcp	pointer
->	O
fd	int
!=	O
-	O
1	int
)	O
{	O
if	O
(	O
close	pointer
(	O
tcp	pointer
->	O
fd	int
)	O
!=	O
0	int
)	O
{	O
err	int
=	O
errno	O
;	O
}	O
}	O
tcp	pointer
->	O
fd	int
=	O
-	O
1	int
;	O
tcp	pointer
->	O
state	pointer
=	O
TCP_STATE_INIT	int
;	O
return	O
err	int
;	O
}	O
static	O
int	O
_tcp_open	function
(	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
struct	O
_tcp_instance	struct
*	O
tcp	pointer
=	O
(	O
struct	O
_tcp_instance	struct
*	O
)	O
stream	pointer
;	O
int	O
flgs	int
,	O
ret	int
;	O
socklen_t	int
namelen	int
;	O
struct	O
sockaddr_in	struct
peer_addr	struct
;	O
int	O
flags	int
;	O
mu_stream_get_flags	function
(	O
stream	pointer
,	O
&	O
flags	int
)	O
;	O
switch	O
(	O
tcp	pointer
->	O
state	pointer
)	O
{	O
case	O
TCP_STATE_INIT	int
:	O
if	O
(	O
tcp	pointer
->	O
fd	int
==	O
-	O
1	int
)	O
{	O
tcp	pointer
->	O
fd	int
=	O
socket	function
(	O
tcp	pointer
->	O
remote_addr	pointer
->	O
addr	pointer
->	O
sa_family	short
,	O
SOCK_STREAM	int
,	O
0	int
)	O
;	O
if	O
(	O
tcp	pointer
->	O
fd	int
==	O
-	O
1	int
)	O
return	O
errno	O
;	O
}	O
if	O
(	O
flags	int
&	O
MU_STREAM_NONBLOCK	int
)	O
{	O
flgs	int
=	O
fcntl	function
(	O
tcp	pointer
->	O
fd	int
,	O
F_GETFL	int
)	O
;	O
flgs	int
|=	O
O_NONBLOCK	int
;	O
fcntl	function
(	O
tcp	pointer
->	O
fd	int
,	O
F_SETFL	int
,	O
flgs	int
)	O
;	O
mu_stream_set_flags	function
(	O
stream	pointer
,	O
MU_STREAM_NONBLOCK	int
)	O
;	O
}	O
if	O
(	O
tcp	pointer
->	O
source_addr	pointer
)	O
{	O
if	O
(	O
bind	function
(	O
tcp	pointer
->	O
fd	int
,	O
tcp	pointer
->	O
source_addr	pointer
->	O
addr	pointer
,	O
tcp	pointer
->	O
source_addr	pointer
->	O
addrlen	int
)	O
<	O
0	int
)	O
{	O
int	O
e	int
=	O
errno	O
;	O
close	pointer
(	O
tcp	pointer
->	O
fd	int
)	O
;	O
tcp	pointer
->	O
fd	int
=	O
-	O
1	int
;	O
return	O
e	int
;	O
}	O
}	O
tcp	pointer
->	O
state	pointer
=	O
TCP_STATE_RESOLVING	int
;	O
case	O
TCP_STATE_RESOLVING	int
:	O
tcp	pointer
->	O
state	pointer
=	O
TCP_STATE_RESOLVE	int
;	O
case	O
TCP_STATE_RESOLVE	int
:	O
if	O
(	O
connect	function
(	O
tcp	pointer
->	O
fd	int
,	O
tcp	pointer
->	O
remote_addr	pointer
->	O
addr	pointer
,	O
tcp	pointer
->	O
remote_addr	pointer
->	O
addrlen	int
)	O
==	O
-	O
1	int
)	O
{	O
ret	int
=	O
errno	O
;	O
if	O
(	O
ret	int
==	O
EINPROGRESS	int
||	O
ret	int
==	O
EAGAIN	int
)	O
{	O
tcp	pointer
->	O
state	pointer
=	O
TCP_STATE_CONNECTING	int
;	O
ret	int
=	O
EAGAIN	int
;	O
}	O
else	O
_tcp_close	function
(	O
stream	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
tcp	pointer
->	O
state	pointer
=	O
TCP_STATE_CONNECTING	int
;	O
case	O
TCP_STATE_CONNECTING	int
:	O
namelen	int
=	O
sizeof	O
(	O
peer_addr	struct
)	O
;	O
if	O
(	O
getpeername	function
(	O
tcp	pointer
->	O
fd	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
peer_addr	struct
,	O
&	O
namelen	int
)	O
==	O
0	int
)	O
tcp	pointer
->	O
state	pointer
=	O
TCP_STATE_CONNECTED	int
;	O
else	O
{	O
ret	int
=	O
errno	O
;	O
_tcp_close	function
(	O
stream	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_tcp_ioctl	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
int	O
code	int
,	O
int	O
opcode	int
,	O
void	O
*	O
ptr	pointer
)	O
{	O
struct	O
_tcp_instance	struct
*	O
tcp	pointer
=	O
(	O
struct	O
_tcp_instance	struct
*	O
)	O
stream	pointer
;	O
switch	O
(	O
code	int
)	O
{	O
case	O
MU_IOCTL_TRANSPORT	int
:	O
if	O
(	O
!	O
ptr	pointer
)	O
return	O
EINVAL	int
;	O
else	O
{	O
mu_transport_t	pointer
*	O
ptrans	pointer
=	O
ptr	pointer
;	O
switch	O
(	O
opcode	int
)	O
{	O
case	O
MU_IOCTL_OP_GET	int
:	O
ptrans	pointer
[	O
0	int
]	O
=	O
(	O
mu_transport_t	pointer
)	O
(	O
intptr_t	long
)	O
tcp	pointer
->	O
fd	int
;	O
ptrans	pointer
[	O
1	int
]	O
=	O
NULL	O
;	O
break	O
;	O
case	O
MU_IOCTL_OP_SET	int
:	O
return	O
ENOSYS	int
;	O
default	O
:	O
return	O
EINVAL	int
;	O
}	O
}	O
break	O
;	O
case	O
MU_IOCTL_TCPSTREAM	int
:	O
switch	O
(	O
opcode	int
)	O
{	O
case	O
MU_IOCTL_TCP_GETSOCKNAME	int
:	O
if	O
(	O
!	O
ptr	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
tcp	pointer
->	O
source_addr	pointer
)	O
{	O
int	O
rc	int
=	O
mu_sockaddr_from_socket	function
(	O
&	O
tcp	pointer
->	O
source_addr	pointer
,	O
tcp	pointer
->	O
fd	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
return	O
mu_sockaddr_copy	function
(	O
(	O
struct	O
mu_sockaddr	struct
*	O
*	O
)	O
ptr	pointer
,	O
tcp	pointer
->	O
source_addr	pointer
)	O
;	O
default	O
:	O
return	O
EINVAL	int
;	O
}	O
break	O
;	O
default	O
:	O
return	O
ENOSYS	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_tcp_read	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
size	long
,	O
size_t	long
*	O
pret	pointer
)	O
{	O
struct	O
_tcp_instance	struct
*	O
tcp	pointer
=	O
(	O
struct	O
_tcp_instance	struct
*	O
)	O
stream	pointer
;	O
ssize_t	long
bytes	pointer
;	O
if	O
(	O
(	O
bytes	pointer
=	O
recv	function
(	O
tcp	pointer
->	O
fd	int
,	O
buf	pointer
,	O
size	long
,	O
0	int
)	O
)	O
==	O
-	O
1	int
)	O
return	O
errno	O
;	O
*	O
pret	pointer
=	O
bytes	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_tcp_write	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
const	O
char	O
*	O
buf	pointer
,	O
size_t	long
size	long
,	O
size_t	long
*	O
pret	pointer
)	O
{	O
struct	O
_tcp_instance	struct
*	O
tcp	pointer
=	O
(	O
struct	O
_tcp_instance	struct
*	O
)	O
stream	pointer
;	O
ssize_t	long
bytes	pointer
;	O
if	O
(	O
(	O
bytes	pointer
=	O
send	function
(	O
tcp	pointer
->	O
fd	int
,	O
buf	pointer
,	O
size	long
,	O
0	int
)	O
)	O
==	O
-	O
1	int
)	O
return	O
errno	O
;	O
*	O
pret	pointer
=	O
bytes	pointer
;	O
return	O
0	int
;	O
}	O
static	O
void	O
_tcp_done	function
(	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
struct	O
_tcp_instance	struct
*	O
tcp	pointer
=	O
(	O
struct	O
_tcp_instance	struct
*	O
)	O
stream	pointer
;	O
mu_sockaddr_free	function
(	O
tcp	pointer
->	O
remote_addr	pointer
)	O
;	O
mu_sockaddr_free	function
(	O
tcp	pointer
->	O
source_addr	pointer
)	O
;	O
}	O
int	O
_tcp_wait	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
int	O
*	O
pflags	pointer
,	O
struct	O
timeval	struct
*	O
tvp	pointer
)	O
{	O
struct	O
_tcp_instance	struct
*	O
tcp	pointer
=	O
(	O
struct	O
_tcp_instance	struct
*	O
)	O
stream	pointer
;	O
if	O
(	O
tcp	pointer
->	O
fd	int
==	O
-	O
1	int
)	O
return	O
EINVAL	int
;	O
return	O
mu_fd_wait	function
(	O
tcp	pointer
->	O
fd	int
,	O
pflags	pointer
,	O
tvp	pointer
)	O
;	O
}	O
int	O
_tcp_shutdown	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
int	O
how	int
)	O
{	O
struct	O
_tcp_instance	struct
*	O
tcp	pointer
=	O
(	O
struct	O
_tcp_instance	struct
*	O
)	O
stream	pointer
;	O
int	O
flag	int
;	O
if	O
(	O
tcp	pointer
->	O
fd	int
==	O
-	O
1	int
)	O
return	O
EINVAL	int
;	O
switch	O
(	O
how	int
)	O
{	O
case	O
MU_STREAM_READ	int
:	O
flag	int
=	O
SHUT_RD	int
;	O
break	O
;	O
case	O
MU_STREAM_WRITE	int
:	O
flag	int
=	O
SHUT_WR	int
;	O
}	O
if	O
(	O
shutdown	function
(	O
tcp	pointer
->	O
fd	int
,	O
flag	int
)	O
)	O
return	O
errno	O
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
_tcp_instance	struct
*	O
_create_tcp_stream	function
(	O
int	O
flags	int
)	O
{	O
struct	O
_tcp_instance	struct
*	O
tcp	pointer
=	O
(	O
struct	O
_tcp_instance	struct
*	O
)	O
_mu_stream_create	function
(	O
sizeof	O
(	O
*	O
tcp	pointer
)	O
,	O
flags	int
)	O
;	O
if	O
(	O
tcp	pointer
)	O
{	O
tcp	pointer
->	O
stream	pointer
.	O
open	function
=	O
_tcp_open	function
;	O
tcp	pointer
->	O
stream	pointer
.	O
close	pointer
=	O
_tcp_close	function
;	O
tcp	pointer
->	O
stream	pointer
.	O
read	pointer
=	O
_tcp_read	function
;	O
tcp	pointer
->	O
stream	pointer
.	O
write	pointer
=	O
_tcp_write	function
;	O
tcp	pointer
->	O
stream	pointer
.	O
ctl	pointer
=	O
_tcp_ioctl	function
;	O
tcp	pointer
->	O
stream	pointer
.	O
done	pointer
=	O
_tcp_done	function
;	O
tcp	pointer
->	O
stream	pointer
.	O
wait	pointer
=	O
_tcp_wait	function
;	O
tcp	pointer
->	O
stream	pointer
.	O
shutdown	function
=	O
_tcp_shutdown	function
;	O
tcp	pointer
->	O
fd	int
=	O
-	O
1	int
;	O
tcp	pointer
->	O
state	pointer
=	O
TCP_STATE_INIT	int
;	O
}	O
return	O
tcp	pointer
;	O
}	O
int	O
mu_tcp_stream_create_from_sa	function
(	O
mu_stream_t	pointer
*	O
pstream	pointer
,	O
struct	O
mu_sockaddr	struct
*	O
remote_addr	pointer
,	O
struct	O
mu_sockaddr	struct
*	O
source_addr	pointer
,	O
int	O
flags	int
)	O
{	O
int	O
rc	int
;	O
mu_stream_t	pointer
stream	pointer
;	O
struct	O
_tcp_instance	struct
*	O
tcp	pointer
;	O
tcp	pointer
=	O
_create_tcp_stream	function
(	O
flags	int
|	O
MU_STREAM_RDWR	O
)	O
;	O
if	O
(	O
!	O
tcp	pointer
)	O
return	O
ENOMEM	int
;	O
tcp	pointer
->	O
remote_addr	pointer
=	O
remote_addr	pointer
;	O
tcp	pointer
->	O
source_addr	pointer
=	O
source_addr	pointer
;	O
stream	pointer
=	O
(	O
mu_stream_t	pointer
)	O
tcp	pointer
;	O
rc	int
=	O
mu_stream_open	function
(	O
stream	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
||	O
rc	int
==	O
EAGAIN	int
||	O
rc	int
==	O
EINPROGRESS	int
)	O
*	O
pstream	pointer
=	O
stream	pointer
;	O
else	O
{	O
tcp	pointer
->	O
remote_addr	pointer
=	O
tcp	pointer
->	O
source_addr	pointer
=	O
NULL	O
;	O
mu_stream_destroy	function
(	O
&	O
stream	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_tcp_stream_create_with_source_ip	function
(	O
mu_stream_t	pointer
*	O
pstream	pointer
,	O
const	O
char	O
*	O
host	pointer
,	O
unsigned	O
port	int
,	O
unsigned	O
long	O
source_ip	long
,	O
int	O
flags	int
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_sockaddr	struct
*	O
remote_addr	pointer
,	O
*	O
source_addr	pointer
=	O
NULL	O
;	O
struct	O
mu_sockaddr_hints	struct
hints	pointer
;	O
memset	function
(	O
&	O
hints	pointer
,	O
0	int
,	O
sizeof	O
hints	pointer
)	O
;	O
hints	pointer
.	O
family	int
=	O
AF_INET	O
;	O
hints	pointer
.	O
socktype	int
=	O
SOCK_STREAM	int
;	O
hints	pointer
.	O
protocol	int
=	O
IPPROTO_TCP	int
;	O
hints	pointer
.	O
port	int
=	O
port	int
;	O
rc	int
=	O
mu_sockaddr_from_node	function
(	O
&	O
remote_addr	pointer
,	O
host	pointer
,	O
NULL	O
,	O
&	O
hints	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
source_ip	long
)	O
{	O
struct	O
sockaddr_in	struct
s	pointer
;	O
s	pointer
.	O
sin_family	short
=	O
AF_INET	O
;	O
s	pointer
.	O
sin_addr	struct
.	O
s_addr	int
=	O
source_ip	long
;	O
s	pointer
.	O
sin_port	short
=	O
0	int
;	O
rc	int
=	O
mu_sockaddr_create	function
(	O
&	O
source_addr	pointer
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
s	pointer
,	O
sizeof	O
(	O
s	pointer
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sockaddr_free	function
(	O
remote_addr	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
rc	int
=	O
mu_tcp_stream_create_from_sa	function
(	O
pstream	pointer
,	O
remote_addr	pointer
,	O
source_addr	pointer
,	O
flags	int
)	O
;	O
if	O
(	O
rc	int
&&	O
!	O
(	O
rc	int
==	O
EAGAIN	int
||	O
rc	int
==	O
EINPROGRESS	int
)	O
)	O
{	O
mu_sockaddr_free	function
(	O
remote_addr	pointer
)	O
;	O
mu_sockaddr_free	function
(	O
source_addr	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_tcp_stream_create_with_source_host	function
(	O
mu_stream_t	pointer
*	O
stream	pointer
,	O
const	O
char	O
*	O
host	pointer
,	O
unsigned	O
port	int
,	O
const	O
char	O
*	O
source_host	pointer
,	O
int	O
flags	int
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_sockaddr	struct
*	O
remote_addr	pointer
,	O
*	O
source_addr	pointer
=	O
NULL	O
;	O
struct	O
mu_sockaddr_hints	struct
hints	pointer
;	O
memset	function
(	O
&	O
hints	pointer
,	O
0	int
,	O
sizeof	O
hints	pointer
)	O
;	O
hints	pointer
.	O
family	int
=	O
AF_INET	O
;	O
hints	pointer
.	O
socktype	int
=	O
SOCK_STREAM	int
;	O
hints	pointer
.	O
port	int
=	O
port	int
;	O
rc	int
=	O
mu_sockaddr_from_node	function
(	O
&	O
remote_addr	pointer
,	O
host	pointer
,	O
NULL	O
,	O
&	O
hints	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
source_host	pointer
)	O
{	O
hints	pointer
.	O
flags	int
=	O
MU_AH_PASSIVE	int
;	O
hints	pointer
.	O
port	int
=	O
0	int
;	O
rc	int
=	O
mu_sockaddr_from_node	function
(	O
&	O
source_addr	pointer
,	O
source_host	pointer
,	O
NULL	O
,	O
&	O
hints	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sockaddr_free	function
(	O
remote_addr	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
rc	int
=	O
mu_tcp_stream_create_from_sa	function
(	O
stream	pointer
,	O
remote_addr	pointer
,	O
source_addr	pointer
,	O
flags	int
)	O
;	O
if	O
(	O
rc	int
&&	O
!	O
(	O
rc	int
==	O
EAGAIN	int
||	O
rc	int
==	O
EINPROGRESS	int
)	O
)	O
{	O
mu_sockaddr_free	function
(	O
remote_addr	pointer
)	O
;	O
mu_sockaddr_free	function
(	O
source_addr	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_tcp_stream_create	function
(	O
mu_stream_t	pointer
*	O
stream	pointer
,	O
const	O
char	O
*	O
host	pointer
,	O
unsigned	O
port	int
,	O
int	O
flags	int
)	O
{	O
return	O
mu_tcp_stream_create_with_source_host	function
(	O
stream	pointer
,	O
host	pointer
,	O
port	int
,	O
NULL	O
,	O
flags	int
)	O
;	O
}	O