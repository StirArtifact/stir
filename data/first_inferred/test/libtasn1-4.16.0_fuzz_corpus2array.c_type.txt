struct	O
fuzz_elem	struct
{	O
unsigned	O
int	O
type	int
;	O
char	O
name	*
[	O
20	int
]	O
;	O
char	O
value	*
[	O
20	int
]	O
;	O
}	O
;	O
static	O
char	O
*	O
escape	function
(	O
unsigned	O
char	O
*	O
s	*
)	O
{	O
static	O
char	O
out	*
[	O
19	int
*	O
6	int
+	O
1	int
]	O
;	O
char	O
*	O
p	*
=	O
out	*
;	O
while	O
(	O
*	O
s	*
)	O
{	O
if	O
(	O
*	O
s	*
>	O
127	int
)	O
{	O
if	O
(	O
isxdigit	function
(	O
s	*
[	O
1	int
]	O
)	O
)	O
{	O
sprintf	function
(	O
p	*
,	O
"\\u%04x"	*
,	O
*	O
s	*
++	O
)	O
;	O
p	*
+=	O
6	int
;	O
}	O
else	O
{	O
sprintf	function
(	O
p	*
,	O
"\\x%02x"	*
,	O
*	O
s	*
++	O
)	O
;	O
p	*
+=	O
4	int
;	O
}	O
}	O
else	O
if	O
(	O
*	O
s	*
==	O
'\n'	O
)	O
{	O
sprintf	function
(	O
p	*
,	O
"\\n"	*
)	O
;	O
p	*
+=	O
2	int
;	O
s	*
++	O
;	O
}	O
else	O
if	O
(	O
*	O
s	*
==	O
'\t'	O
)	O
{	O
sprintf	function
(	O
p	*
,	O
"\\t"	*
)	O
;	O
p	*
+=	O
2	int
;	O
s	*
++	O
;	O
}	O
else	O
*	O
p	*
++	O
=	O
*	O
s	*
++	O
;	O
}	O
*	O
p	*
=	O
0	int
;	O
return	O
out	*
;	O
}	O
static	O
const	O
char	O
*	O
typename	array
[	O
24	int
]	O
=	O
{	O
"CONST_UNIVERSAL"	*
,	O
"CONST_PRIVATE"	*
,	O
"CONST_APPLICATION"	*
,	O
"CONST_EXPLICIT"	*
,	O
"CONST_IMPLICIT"	*
,	O
"CONST_TAG"	*
,	O
"CONST_OPTION"	*
,	O
"CONST_DEFAULT"	*
,	O
"CONST_TRUE"	*
,	O
"CONST_FALSE"	*
,	O
"CONST_LIST"	*
,	O
"CONST_MIN_MAX"	*
,	O
"CONST_1_PARAM"	*
,	O
"CONST_SIZE"	*
,	O
"CONST_DEFINED_BY"	*
,	O
"CONST_GENERALIZED"	*
,	O
"CONST_UTC"	*
,	O
NULL	O
,	O
"CONST_NOT_USED"	*
,	O
"CONST_SET"	*
,	O
"CONST_ASSIGN"	*
,	O
"CONST_DOWN"	*
,	O
"CONST_RIGHT"	*
,	O
NULL	O
}	O
;	O
int	O
main	function
(	O
void	O
)	O
{	O
struct	O
fuzz_elem	struct
e	*
;	O
printf	function
(	O
"const asn1_static_node tab[] = {\n"	*
)	O
;	O
while	O
(	O
fread	function
(	O
&	O
e	*
,	O
sizeof	O
(	O
e	O
)	O
,	O
1	int
,	O
stdin	*
)	O
==	O
1	int
)	O
{	O
e	function
.	O
name	*
[	O
sizeof	O
(	O
e	*
.	O
name	*
)	O
-	O
1	int
]	O
=	O
0	int
;	O
e	*
.	O
value	*
[	O
sizeof	O
(	O
e	*
.	O
value	*
)	O
-	O
1	int
]	O
=	O
0	int
;	O
if	O
(	O
strcmp	function
(	O
e	*
.	O
name	*
,	O
"NULL"	int
)	O
)	O
printf	function
(	O
"  { \"%s\""	*
,	O
escape	function
(	O
(	O
unsigned	O
char	O
*	O
)	O
e	*
.	O
name	*
)	O
)	O
;	O
else	O
printf	function
(	O
"  { NULL"	*
)	O
;	O
if	O
(	O
e	int
.	O
type	enum
)	O
{	O
int	O
add	int
=	O
0	int
;	O
if	O
(	O
(	O
e	int
.	O
type	int
&	O
0xFF	int
)	O
==	O
17	int
)	O
{	O
printf	function
(	O
", ASN1_ETYPE_TIME"	*
)	O
;	O
add	int
=	O
1	int
;	O
}	O
for	O
(	O
int	O
i	int
=	O
8	int
;	O
i	int
<	O
32	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
(	O
e	int
.	O
type	int
&	O
(	O
1U	O
<<	O
i	int
)	O
)	O
&&	O
typename	array
[	O
i	int
-	O
8	int
]	O
)	O
{	O
printf	function
(	O
add	int
?	O
"|%s"	int
:	O
", %s"	*
,	O
typename	array
[	O
i	int
-	O
8	int
]	O
)	O
;	O
add	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
!	O
add	int
)	O
printf	function
(	O
", %u"	*
,	O
e	*
.	O
type	int
)	O
;	O
}	O
else	O
printf	function
(	O
", 0"	*
)	O
;	O
if	O
(	O
strcmp	function
(	O
e	*
.	O
value	*
,	O
"NULL"	int
)	O
)	O
printf	function
(	O
", \"%s\" },\n"	*
,	O
escape	function
(	O
(	O
unsigned	O
char	O
*	O
)	O
e	*
.	O
value	*
)	O
)	O
;	O
else	O
printf	function
(	O
", NULL },"	*
)	O
;	O
}	O
printf	function
(	O
"  { NULL, 0, NULL }\n"	*
)	O
;	O
printf	function
(	O
"};\n"	*
)	O
;	O
return	O
0	int
;	O
}	O