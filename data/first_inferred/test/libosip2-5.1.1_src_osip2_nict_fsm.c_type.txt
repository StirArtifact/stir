transition_t	struct
nict_transition	array
[	O
12	int
]	O
=	O
{	O
{	O
NICT_PRE_TRYING	int
,	O
SND_REQUEST	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
nict_snd_request	function
,	O
&	O
nict_transition	array
[	O
1	int
]	O
,	O
NULL	O
}	O
,	O
{	O
NICT_TRYING	int
,	O
TIMEOUT_F	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
osip_nict_timeout_f_event	function
,	O
&	O
nict_transition	array
[	O
2	int
]	O
,	O
NULL	O
}	O
,	O
{	O
NICT_TRYING	int
,	O
TIMEOUT_E	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
osip_nict_timeout_e_event	function
,	O
&	O
nict_transition	array
[	O
3	int
]	O
,	O
NULL	O
}	O
,	O
{	O
NICT_TRYING	int
,	O
RCV_STATUS_1XX	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
nict_rcv_1xx	function
,	O
&	O
nict_transition	array
[	O
4	int
]	O
,	O
NULL	O
}	O
,	O
{	O
NICT_TRYING	int
,	O
RCV_STATUS_2XX	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
nict_rcv_23456xx	function
,	O
&	O
nict_transition	array
[	O
5	int
]	O
,	O
NULL	O
}	O
,	O
{	O
NICT_TRYING	int
,	O
RCV_STATUS_3456XX	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
nict_rcv_23456xx	function
,	O
&	O
nict_transition	array
[	O
6	int
]	O
,	O
NULL	O
}	O
,	O
{	O
NICT_PROCEEDING	int
,	O
TIMEOUT_F	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
osip_nict_timeout_f_event	function
,	O
&	O
nict_transition	array
[	O
7	int
]	O
,	O
NULL	O
}	O
,	O
{	O
NICT_PROCEEDING	int
,	O
TIMEOUT_E	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
osip_nict_timeout_e_event	function
,	O
&	O
nict_transition	array
[	O
8	int
]	O
,	O
NULL	O
}	O
,	O
{	O
NICT_PROCEEDING	int
,	O
RCV_STATUS_1XX	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
nict_rcv_1xx	function
,	O
&	O
nict_transition	array
[	O
9	int
]	O
,	O
NULL	O
}	O
,	O
{	O
NICT_PROCEEDING	int
,	O
RCV_STATUS_2XX	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
nict_rcv_23456xx	function
,	O
&	O
nict_transition	array
[	O
10	int
]	O
,	O
NULL	O
}	O
,	O
{	O
NICT_PROCEEDING	int
,	O
RCV_STATUS_3456XX	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
nict_rcv_23456xx	function
,	O
&	O
nict_transition	array
[	O
11	int
]	O
,	O
NULL	O
}	O
,	O
{	O
NICT_COMPLETED	int
,	O
TIMEOUT_K	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
osip_nict_timeout_k_event	function
,	O
NULL	O
,	O
NULL	O
}	O
}	O
;	O
osip_statemachine_t	struct
nict_fsm	struct
=	O
{	O
nict_transition	array
}	O
;	O
static	O
void	O
nict_handle_transport_error	function
(	O
osip_transaction_t	struct
*	O
nict	pointer
,	O
int	O
err	int
)	O
{	O
__osip_transport_error_callback	function
(	O
OSIP_NICT_TRANSPORT_ERROR	int
,	O
nict	pointer
,	O
err	int
)	O
;	O
__osip_transaction_set_state	function
(	O
nict	pointer
,	O
NICT_TERMINATED	int
)	O
;	O
__osip_kill_transaction_callback	function
(	O
OSIP_NICT_KILL_TRANSACTION	int
,	O
nict	pointer
)	O
;	O
}	O
void	O
nict_snd_request	function
(	O
osip_transaction_t	struct
*	O
nict	pointer
,	O
osip_event_t	struct
*	O
evt	pointer
)	O
{	O
int	O
i	int
;	O
osip_t	struct
*	O
osip	struct
=	O
(	O
osip_t	struct
*	O
)	O
nict	pointer
->	O
config	pointer
;	O
nict	pointer
->	O
orig_request	pointer
=	O
evt	pointer
->	O
sip	pointer
;	O
i	int
=	O
osip	struct
->	O
cb_send_message	pointer
(	O
nict	pointer
,	O
evt	pointer
->	O
sip	pointer
,	O
nict	pointer
->	O
nict_context	pointer
->	O
destination	pointer
,	O
nict	pointer
->	O
nict_context	pointer
->	O
port	pointer
,	O
nict	pointer
->	O
out_socket	int
)	O
;	O
if	O
(	O
i	int
>=	O
0	int
)	O
{	O
if	O
(	O
MSG_IS_REGISTER	O
(	O
evt	pointer
->	O
sip	pointer
)	O
)	O
__osip_message_callback	function
(	O
OSIP_NICT_REGISTER_SENT	int
,	O
nict	pointer
,	O
nict	pointer
->	O
orig_request	pointer
)	O
;	O
else	O
if	O
(	O
MSG_IS_BYE	O
(	O
evt	pointer
->	O
sip	pointer
)	O
)	O
__osip_message_callback	function
(	O
OSIP_NICT_BYE_SENT	int
,	O
nict	pointer
,	O
nict	pointer
->	O
orig_request	pointer
)	O
;	O
else	O
if	O
(	O
MSG_IS_OPTIONS	O
(	O
evt	pointer
->	O
sip	pointer
)	O
)	O
__osip_message_callback	function
(	O
OSIP_NICT_OPTIONS_SENT	int
,	O
nict	pointer
,	O
nict	pointer
->	O
orig_request	pointer
)	O
;	O
else	O
if	O
(	O
MSG_IS_INFO	O
(	O
evt	pointer
->	O
sip	pointer
)	O
)	O
__osip_message_callback	function
(	O
OSIP_NICT_INFO_SENT	int
,	O
nict	pointer
,	O
nict	pointer
->	O
orig_request	pointer
)	O
;	O
else	O
if	O
(	O
MSG_IS_CANCEL	O
(	O
evt	pointer
->	O
sip	pointer
)	O
)	O
__osip_message_callback	function
(	O
OSIP_NICT_CANCEL_SENT	int
,	O
nict	pointer
,	O
nict	pointer
->	O
orig_request	pointer
)	O
;	O
else	O
if	O
(	O
MSG_IS_NOTIFY	O
(	O
evt	pointer
->	O
sip	pointer
)	O
)	O
__osip_message_callback	function
(	O
OSIP_NICT_NOTIFY_SENT	int
,	O
nict	pointer
,	O
nict	pointer
->	O
orig_request	pointer
)	O
;	O
else	O
if	O
(	O
MSG_IS_SUBSCRIBE	O
(	O
evt	pointer
->	O
sip	pointer
)	O
)	O
__osip_message_callback	function
(	O
OSIP_NICT_SUBSCRIBE_SENT	int
,	O
nict	pointer
,	O
nict	pointer
->	O
orig_request	pointer
)	O
;	O
else	O
__osip_message_callback	function
(	O
OSIP_NICT_UNKNOWN_REQUEST_SENT	int
,	O
nict	pointer
,	O
nict	pointer
->	O
orig_request	pointer
)	O
;	O
{	O
osip_via_t	struct
*	O
via	pointer
;	O
char	O
*	O
proto	pointer
;	O
int	O
k	int
;	O
k	int
=	O
osip_message_get_via	function
(	O
nict	pointer
->	O
orig_request	pointer
,	O
0	int
,	O
&	O
via	pointer
)	O
;	O
if	O
(	O
k	int
<	O
0	int
)	O
{	O
nict_handle_transport_error	function
(	O
nict	pointer
,	O
-	O
1	int
)	O
;	O
return	O
;	O
}	O
proto	pointer
=	O
via_get_protocol	function
(	O
via	pointer
)	O
;	O
if	O
(	O
proto	pointer
==	O
NULL	O
)	O
{	O
nict_handle_transport_error	function
(	O
nict	pointer
,	O
-	O
1	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
i	int
==	O
0	int
)	O
{	O
if	O
(	O
osip_strcasecmp	function
(	O
proto	pointer
,	O
"TCP"	pointer
)	O
!=	O
0	int
&&	O
osip_strcasecmp	function
(	O
proto	pointer
,	O
"TLS"	pointer
)	O
!=	O
0	int
&&	O
osip_strcasecmp	function
(	O
proto	pointer
,	O
"SCTP"	pointer
)	O
!=	O
0	int
)	O
{	O
}	O
else	O
{	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_e_length	int
=	O
-	O
1	int
;	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_e_start	struct
.	O
tv_sec	long
=	O
-	O
1	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
osip_strcasecmp	function
(	O
proto	pointer
,	O
"TCP"	pointer
)	O
!=	O
0	int
&&	O
osip_strcasecmp	function
(	O
proto	pointer
,	O
"TLS"	pointer
)	O
!=	O
0	int
&&	O
osip_strcasecmp	function
(	O
proto	pointer
,	O
"SCTP"	pointer
)	O
!=	O
0	int
)	O
{	O
}	O
else	O
{	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_e_length	int
=	O
DEFAULT_T1_TCP_PROGRESS	int
;	O
}	O
}	O
}	O
if	O
(	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_e_length	int
>	O
0	int
)	O
{	O
osip_gettimeofday	function
(	O
&	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_e_start	struct
,	O
NULL	O
)	O
;	O
add_gettimeofday	function
(	O
&	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_e_start	struct
,	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_e_length	int
)	O
;	O
}	O
__osip_transaction_set_state	function
(	O
nict	pointer
,	O
NICT_TRYING	int
)	O
;	O
}	O
else	O
{	O
nict_handle_transport_error	function
(	O
nict	pointer
,	O
i	int
)	O
;	O
}	O
}	O
void	O
osip_nict_timeout_e_event	function
(	O
osip_transaction_t	struct
*	O
nict	pointer
,	O
osip_event_t	struct
*	O
evt	pointer
)	O
{	O
osip_t	struct
*	O
osip	struct
=	O
(	O
osip_t	struct
*	O
)	O
nict	pointer
->	O
config	pointer
;	O
int	O
i	int
;	O
if	O
(	O
nict	pointer
->	O
state	pointer
==	O
NICT_TRYING	int
)	O
{	O
if	O
(	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_e_length	int
<	O
DEFAULT_T1	int
)	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_e_length	int
=	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_e_length	int
+	O
DEFAULT_T1_TCP_PROGRESS	int
;	O
else	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_e_length	int
=	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_e_length	int
*	O
2	int
;	O
if	O
(	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_e_length	int
>	O
DEFAULT_T2	int
)	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_e_length	int
=	O
DEFAULT_T2	int
;	O
}	O
else	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_e_length	int
=	O
DEFAULT_T2	int
;	O
osip_gettimeofday	function
(	O
&	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_e_start	struct
,	O
NULL	O
)	O
;	O
add_gettimeofday	function
(	O
&	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_e_start	struct
,	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_e_length	int
)	O
;	O
i	int
=	O
osip	struct
->	O
cb_send_message	pointer
(	O
nict	pointer
,	O
nict	pointer
->	O
orig_request	pointer
,	O
nict	pointer
->	O
nict_context	pointer
->	O
destination	pointer
,	O
nict	pointer
->	O
nict_context	pointer
->	O
port	pointer
,	O
nict	pointer
->	O
out_socket	int
)	O
;	O
if	O
(	O
i	int
<	O
0	int
)	O
{	O
nict_handle_transport_error	function
(	O
nict	pointer
,	O
i	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
i	int
==	O
0	int
)	O
{	O
osip_via_t	struct
*	O
via	pointer
;	O
char	O
*	O
proto	pointer
;	O
i	int
=	O
osip_message_get_via	function
(	O
nict	pointer
->	O
orig_request	pointer
,	O
0	int
,	O
&	O
via	pointer
)	O
;	O
if	O
(	O
i	int
<	O
0	int
)	O
{	O
nict_handle_transport_error	function
(	O
nict	pointer
,	O
-	O
1	int
)	O
;	O
return	O
;	O
}	O
proto	pointer
=	O
via_get_protocol	function
(	O
via	pointer
)	O
;	O
if	O
(	O
proto	pointer
==	O
NULL	O
)	O
{	O
nict_handle_transport_error	function
(	O
nict	pointer
,	O
-	O
1	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
osip_strcasecmp	function
(	O
proto	pointer
,	O
"TCP"	pointer
)	O
!=	O
0	int
&&	O
osip_strcasecmp	function
(	O
proto	pointer
,	O
"TLS"	pointer
)	O
!=	O
0	int
&&	O
osip_strcasecmp	function
(	O
proto	pointer
,	O
"SCTP"	pointer
)	O
!=	O
0	int
)	O
{	O
}	O
else	O
{	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_e_length	int
=	O
-	O
1	int
;	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_e_start	struct
.	O
tv_sec	long
=	O
-	O
1	int
;	O
}	O
}	O
if	O
(	O
i	int
==	O
0	int
)	O
__osip_message_callback	function
(	O
OSIP_NICT_REQUEST_SENT_AGAIN	int
,	O
nict	pointer
,	O
nict	pointer
->	O
orig_request	pointer
)	O
;	O
}	O
void	O
osip_nict_timeout_f_event	function
(	O
osip_transaction_t	struct
*	O
nict	pointer
,	O
osip_event_t	struct
*	O
evt	pointer
)	O
{	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_f_length	int
=	O
-	O
1	int
;	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_f_start	struct
.	O
tv_sec	long
=	O
-	O
1	int
;	O
__osip_message_callback	function
(	O
OSIP_NICT_STATUS_TIMEOUT	int
,	O
nict	pointer
,	O
evt	pointer
->	O
sip	pointer
)	O
;	O
__osip_transaction_set_state	function
(	O
nict	pointer
,	O
NICT_TERMINATED	int
)	O
;	O
__osip_kill_transaction_callback	function
(	O
OSIP_NICT_KILL_TRANSACTION	int
,	O
nict	pointer
)	O
;	O
}	O
void	O
osip_nict_timeout_k_event	function
(	O
osip_transaction_t	struct
*	O
nict	pointer
,	O
osip_event_t	struct
*	O
evt	pointer
)	O
{	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_k_length	int
=	O
-	O
1	int
;	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_k_start	struct
.	O
tv_sec	long
=	O
-	O
1	int
;	O
__osip_transaction_set_state	function
(	O
nict	pointer
,	O
NICT_TERMINATED	int
)	O
;	O
__osip_kill_transaction_callback	function
(	O
OSIP_NICT_KILL_TRANSACTION	int
,	O
nict	pointer
)	O
;	O
}	O
void	O
nict_rcv_1xx	function
(	O
osip_transaction_t	struct
*	O
nict	pointer
,	O
osip_event_t	struct
*	O
evt	pointer
)	O
{	O
if	O
(	O
nict	pointer
->	O
last_response	pointer
!=	O
NULL	O
)	O
{	O
osip_message_free	function
(	O
nict	pointer
->	O
last_response	pointer
)	O
;	O
}	O
nict	pointer
->	O
last_response	pointer
=	O
evt	pointer
->	O
sip	pointer
;	O
if	O
(	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_e_length	int
>	O
0	int
)	O
{	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_e_length	int
=	O
DEFAULT_T2	int
;	O
osip_gettimeofday	function
(	O
&	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_e_start	struct
,	O
NULL	O
)	O
;	O
add_gettimeofday	function
(	O
&	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_e_start	struct
,	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_e_length	int
)	O
;	O
}	O
__osip_message_callback	function
(	O
OSIP_NICT_STATUS_1XX_RECEIVED	int
,	O
nict	pointer
,	O
evt	pointer
->	O
sip	pointer
)	O
;	O
__osip_transaction_set_state	function
(	O
nict	pointer
,	O
NICT_PROCEEDING	int
)	O
;	O
}	O
void	O
nict_rcv_23456xx	function
(	O
osip_transaction_t	struct
*	O
nict	pointer
,	O
osip_event_t	struct
*	O
evt	pointer
)	O
{	O
if	O
(	O
nict	pointer
->	O
last_response	pointer
!=	O
NULL	O
)	O
{	O
osip_message_free	function
(	O
nict	pointer
->	O
last_response	pointer
)	O
;	O
}	O
nict	pointer
->	O
last_response	pointer
=	O
evt	pointer
->	O
sip	pointer
;	O
if	O
(	O
EVT_IS_RCV_STATUS_2XX	O
(	O
evt	pointer
)	O
)	O
__osip_message_callback	function
(	O
OSIP_NICT_STATUS_2XX_RECEIVED	int
,	O
nict	pointer
,	O
nict	pointer
->	O
last_response	pointer
)	O
;	O
else	O
if	O
(	O
MSG_IS_STATUS_3XX	O
(	O
nict	pointer
->	O
last_response	pointer
)	O
)	O
__osip_message_callback	function
(	O
OSIP_NICT_STATUS_3XX_RECEIVED	int
,	O
nict	pointer
,	O
nict	pointer
->	O
last_response	pointer
)	O
;	O
else	O
if	O
(	O
MSG_IS_STATUS_4XX	O
(	O
nict	pointer
->	O
last_response	pointer
)	O
)	O
__osip_message_callback	function
(	O
OSIP_NICT_STATUS_4XX_RECEIVED	int
,	O
nict	pointer
,	O
nict	pointer
->	O
last_response	pointer
)	O
;	O
else	O
if	O
(	O
MSG_IS_STATUS_5XX	O
(	O
nict	pointer
->	O
last_response	pointer
)	O
)	O
__osip_message_callback	function
(	O
OSIP_NICT_STATUS_5XX_RECEIVED	int
,	O
nict	pointer
,	O
nict	pointer
->	O
last_response	pointer
)	O
;	O
else	O
__osip_message_callback	function
(	O
OSIP_NICT_STATUS_6XX_RECEIVED	int
,	O
nict	pointer
,	O
nict	pointer
->	O
last_response	pointer
)	O
;	O
if	O
(	O
nict	pointer
->	O
state	pointer
!=	O
NICT_COMPLETED	int
)	O
{	O
osip_gettimeofday	function
(	O
&	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_k_start	struct
,	O
NULL	O
)	O
;	O
add_gettimeofday	function
(	O
&	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_k_start	struct
,	O
nict	pointer
->	O
nict_context	pointer
->	O
timer_k_length	int
)	O
;	O
}	O
__osip_transaction_set_state	function
(	O
nict	pointer
,	O
NICT_COMPLETED	int
)	O
;	O
}	O