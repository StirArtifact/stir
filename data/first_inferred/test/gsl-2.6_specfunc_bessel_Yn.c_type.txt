static	O
int	O
bessel_Yn_small_x	function
(	O
const	O
int	O
n	int
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
int	O
k	int
;	O
double	O
y	double
=	O
0.25	int
*	O
x	double
*	O
x	double
;	O
double	O
ln_x_2	double
=	O
log	function
(	O
0.5	int
*	O
x	double
)	O
;	O
gsl_sf_result	struct
ln_nm1_fact	struct
;	O
double	O
k_term	double
;	O
double	O
term1	double
,	O
sum1	double
,	O
ln_pre1	double
;	O
double	O
term2	double
,	O
sum2	double
,	O
pre2	double
;	O
gsl_sf_lnfact_e	function
(	O
(	O
unsigned	O
int	O
)	O
(	O
n	int
-	O
1	int
)	O
,	O
&	O
ln_nm1_fact	struct
)	O
;	O
ln_pre1	double
=	O
-	O
n	int
*	O
ln_x_2	double
+	O
ln_nm1_fact	struct
.	O
val	double
;	O
if	O
(	O
ln_pre1	double
>	O
GSL_LOG_DBL_MAX	int
-	O
3.0	int
)	O
GSL_ERROR	O
(	O
"error"	pointer
,	O
GSL_EOVRFLW	int
)	O
;	O
sum1	double
=	O
1.0	int
;	O
k_term	double
=	O
1.0	int
;	O
for	O
(	O
k	int
=	O
1	int
;	O
k	int
<=	O
n	int
-	O
1	int
;	O
k	int
++	O
)	O
{	O
k_term	double
*=	O
y	double
/	O
(	O
k	int
*	O
(	O
n	int
-	O
k	int
)	O
)	O
;	O
sum1	double
+=	O
k_term	double
;	O
}	O
term1	double
=	O
-	O
exp	function
(	O
ln_pre1	double
)	O
*	O
sum1	double
/	O
M_PI	int
;	O
pre2	double
=	O
-	O
exp	function
(	O
n	int
*	O
ln_x_2	double
)	O
/	O
M_PI	int
;	O
if	O
(	O
fabs	function
(	O
pre2	double
)	O
>	O
0.0	int
)	O
{	O
const	O
int	O
KMAX	int
=	O
20	int
;	O
gsl_sf_result	struct
psi_n	struct
;	O
gsl_sf_result	struct
npk_fact	struct
;	O
double	O
yk	double
=	O
1.0	int
;	O
double	O
k_fact	double
=	O
1.0	int
;	O
double	O
psi_kp1	double
=	O
-	O
M_EULER	int
;	O
double	O
psi_npkp1	double
;	O
gsl_sf_psi_int_e	function
(	O
n	int
,	O
&	O
psi_n	struct
)	O
;	O
gsl_sf_fact_e	function
(	O
(	O
unsigned	O
int	O
)	O
n	int
,	O
&	O
npk_fact	struct
)	O
;	O
psi_npkp1	double
=	O
psi_n	struct
.	O
val	double
+	O
1.0	int
/	O
n	int
;	O
sum2	double
=	O
(	O
psi_kp1	double
+	O
psi_npkp1	double
-	O
2.0	int
*	O
ln_x_2	double
)	O
/	O
npk_fact	struct
.	O
val	double
;	O
for	O
(	O
k	int
=	O
1	int
;	O
k	int
<	O
KMAX	int
;	O
k	int
++	O
)	O
{	O
psi_kp1	double
+=	O
1.	int
/	O
k	int
;	O
psi_npkp1	double
+=	O
1.	int
/	O
(	O
n	int
+	O
k	int
)	O
;	O
k_fact	double
*=	O
k	int
;	O
npk_fact	struct
.	O
val	double
*=	O
n	int
+	O
k	int
;	O
yk	double
*=	O
-	O
y	double
;	O
k_term	double
=	O
yk	double
*	O
(	O
psi_kp1	double
+	O
psi_npkp1	double
-	O
2.0	int
*	O
ln_x_2	double
)	O
/	O
(	O
k_fact	double
*	O
npk_fact	struct
.	O
val	double
)	O
;	O
sum2	double
+=	O
k_term	double
;	O
}	O
term2	double
=	O
pre2	double
*	O
sum2	double
;	O
}	O
else	O
{	O
term2	double
=	O
0.0	int
;	O
}	O
result	pointer
->	O
val	double
=	O
term1	double
+	O
term2	double
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
ln_pre1	double
)	O
*	O
fabs	function
(	O
term1	double
)	O
+	O
fabs	function
(	O
term2	double
)	O
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_sf_bessel_Yn_e	function
(	O
int	O
n	int
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
int	O
sign	int
=	O
1	int
;	O
if	O
(	O
n	int
<	O
0	int
)	O
{	O
n	int
=	O
-	O
n	int
;	O
if	O
(	O
GSL_IS_ODD	O
(	O
n	int
)	O
)	O
sign	int
=	O
-	O
1	int
;	O
}	O
if	O
(	O
n	int
==	O
0	int
)	O
{	O
int	O
status	int
=	O
gsl_sf_bessel_Y0_e	function
(	O
x	double
,	O
result	pointer
)	O
;	O
result	pointer
->	O
val	double
*=	O
sign	int
;	O
return	O
status	int
;	O
}	O
else	O
if	O
(	O
n	int
==	O
1	int
)	O
{	O
int	O
status	int
=	O
gsl_sf_bessel_Y1_e	function
(	O
x	double
,	O
result	pointer
)	O
;	O
result	pointer
->	O
val	double
*=	O
sign	int
;	O
return	O
status	int
;	O
}	O
else	O
{	O
if	O
(	O
x	double
<=	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
if	O
(	O
x	double
<	O
5.0	int
)	O
{	O
int	O
status	int
=	O
bessel_Yn_small_x	function
(	O
n	int
,	O
x	double
,	O
result	pointer
)	O
;	O
result	pointer
->	O
val	double
*=	O
sign	int
;	O
return	O
status	int
;	O
}	O
else	O
if	O
(	O
GSL_ROOT3_DBL_EPSILON	int
*	O
x	double
>	O
(	O
n	int
*	O
n	int
+	O
1.0	int
)	O
)	O
{	O
int	O
status	int
=	O
gsl_sf_bessel_Ynu_asympx_e	function
(	O
(	O
double	O
)	O
n	int
,	O
x	double
,	O
result	pointer
)	O
;	O
result	pointer
->	O
val	double
*=	O
sign	int
;	O
return	O
status	int
;	O
}	O
else	O
if	O
(	O
n	int
>	O
50	int
)	O
{	O
int	O
status	int
=	O
gsl_sf_bessel_Ynu_asymp_Olver_e	function
(	O
(	O
double	O
)	O
n	int
,	O
x	double
,	O
result	pointer
)	O
;	O
result	pointer
->	O
val	double
*=	O
sign	int
;	O
return	O
status	int
;	O
}	O
else	O
{	O
double	O
two_over_x	double
=	O
2.0	int
/	O
x	double
;	O
gsl_sf_result	struct
r_by	struct
;	O
gsl_sf_result	struct
r_bym	struct
;	O
int	O
stat_1	int
=	O
gsl_sf_bessel_Y1_e	function
(	O
x	double
,	O
&	O
r_by	struct
)	O
;	O
int	O
stat_0	int
=	O
gsl_sf_bessel_Y0_e	function
(	O
x	double
,	O
&	O
r_bym	struct
)	O
;	O
double	O
bym	double
=	O
r_bym	struct
.	O
val	double
;	O
double	O
by	double
=	O
r_by	struct
.	O
val	double
;	O
double	O
byp	double
;	O
int	O
j	int
;	O
for	O
(	O
j	int
=	O
1	int
;	O
j	int
<	O
n	int
;	O
j	int
++	O
)	O
{	O
byp	double
=	O
j	int
*	O
two_over_x	double
*	O
by	double
-	O
bym	double
;	O
bym	double
=	O
by	double
;	O
by	double
=	O
byp	double
;	O
}	O
result	pointer
->	O
val	double
=	O
sign	int
*	O
by	double
;	O
result	pointer
->	O
err	double
=	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
*	O
(	O
fabs	function
(	O
r_by	struct
.	O
err	double
/	O
r_by	struct
.	O
val	double
)	O
+	O
fabs	function
(	O
r_bym	struct
.	O
err	double
/	O
r_bym	struct
.	O
val	double
)	O
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_1	int
,	O
stat_0	int
)	O
;	O
}	O
}	O
}	O
int	O
gsl_sf_bessel_Yn_array	function
(	O
const	O
int	O
nmin	int
,	O
const	O
int	O
nmax	int
,	O
const	O
double	O
x	double
,	O
double	O
*	O
result_array	pointer
)	O
{	O
if	O
(	O
nmin	int
<	O
0	int
||	O
nmax	int
<	O
nmin	int
||	O
x	double
<=	O
0.0	int
)	O
{	O
int	O
j	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<=	O
nmax	int
-	O
nmin	int
;	O
j	int
++	O
)	O
result_array	pointer
[	O
j	int
]	O
=	O
0.0	int
;	O
GSL_ERROR	O
(	O
"error"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
{	O
gsl_sf_result	struct
r_Ynm1	struct
;	O
gsl_sf_result	struct
r_Yn	struct
;	O
int	O
stat_nm1	int
=	O
gsl_sf_bessel_Yn_e	function
(	O
nmin	int
,	O
x	double
,	O
&	O
r_Ynm1	struct
)	O
;	O
int	O
stat_n	int
=	O
gsl_sf_bessel_Yn_e	function
(	O
nmin	int
+	O
1	int
,	O
x	double
,	O
&	O
r_Yn	struct
)	O
;	O
double	O
Ynp1	double
;	O
double	O
Yn	double
=	O
r_Yn	struct
.	O
val	double
;	O
double	O
Ynm1	double
=	O
r_Ynm1	struct
.	O
val	double
;	O
int	O
n	int
;	O
int	O
stat	int
=	O
GSL_ERROR_SELECT_2	O
(	O
stat_nm1	int
,	O
stat_n	int
)	O
;	O
if	O
(	O
stat	int
==	O
GSL_SUCCESS	int
)	O
{	O
for	O
(	O
n	int
=	O
nmin	int
+	O
1	int
;	O
n	int
<=	O
nmax	int
+	O
1	int
;	O
n	int
++	O
)	O
{	O
result_array	pointer
[	O
n	int
-	O
nmin	int
-	O
1	int
]	O
=	O
Ynm1	double
;	O
Ynp1	double
=	O
-	O
Ynm1	double
+	O
2.0	int
*	O
n	int
/	O
x	double
*	O
Yn	double
;	O
Ynm1	double
=	O
Yn	double
;	O
Yn	double
=	O
Ynp1	double
;	O
}	O
}	O
else	O
{	O
for	O
(	O
n	int
=	O
nmin	int
;	O
n	int
<=	O
nmax	int
;	O
n	int
++	O
)	O
{	O
result_array	pointer
[	O
n	int
-	O
nmin	int
]	O
=	O
0.0	int
;	O
}	O
}	O
return	O
stat	int
;	O
}	O
}	O
double	O
gsl_sf_bessel_Yn	function
(	O
const	O
int	O
n	int
,	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_Yn_e	function
(	O
n	int
,	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O