char	O
flt2047_docstring	array
[	O
]	O
=	O
N_	O
(	O
"decode/encode email message headers"	pointer
)	O
;	O
static	O
char	O
flt2047_args_doc	array
[	O
]	O
=	O
N_	O
(	O
"[text]"	pointer
)	O
;	O
static	O
int	O
decode_mode	int
=	O
0	int
;	O
static	O
int	O
newline_option	int
=	O
0	int
;	O
static	O
const	O
char	O
*	O
charset	pointer
=	O
"iso-8859-1"	pointer
;	O
static	O
const	O
char	O
*	O
encoding	pointer
=	O
"quoted-printable"	pointer
;	O
static	O
void	O
set_encode_mode	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
decode_mode	int
=	O
0	int
;	O
}	O
static	O
struct	O
mu_option	struct
flt2047_options	array
[	O
]	O
=	O
{	O
{	O
"encode"	pointer
,	O
'e'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"encode the input (default)"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
set_encode_mode	function
}	O
,	O
{	O
"decode"	pointer
,	O
'd'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"decode the input"	pointer
)	O
,	O
mu_c_bool	int
,	O
&	O
decode_mode	int
}	O
,	O
{	O
"newline"	pointer
,	O
'n'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"print additional newline"	pointer
)	O
,	O
mu_c_bool	int
,	O
&	O
newline_option	int
}	O
,	O
{	O
"charset"	pointer
,	O
'c'	O
,	O
N_	O
(	O
"NAME"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"set charset (default: iso-8859-1)"	pointer
)	O
,	O
mu_c_string	int
,	O
&	O
charset	pointer
}	O
,	O
{	O
"encoding"	pointer
,	O
'E'	O
,	O
N_	O
(	O
"NAME"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"set encoding (default: quoted-printable)"	pointer
)	O
,	O
mu_c_string	int
,	O
&	O
encoding	pointer
}	O
,	O
MU_OPTION_END	O
}	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
p	pointer
;	O
mu_action_getopt	function
(	O
&	O
argc	long
,	O
&	O
argv	pointer
,	O
flt2047_options	pointer
,	O
flt2047_docstring	pointer
,	O
flt2047_args_doc	pointer
)	O
;	O
if	O
(	O
argc	long
)	O
{	O
char	O
*	O
p	pointer
;	O
while	O
(	O
argc	long
--	O
)	O
{	O
const	O
char	O
*	O
text	pointer
=	O
*	O
argv	pointer
++	O
;	O
if	O
(	O
decode_mode	pointer
)	O
rc	int
=	O
mu_rfc2047_decode	function
(	O
charset	pointer
,	O
text	pointer
,	O
&	O
p	pointer
)	O
;	O
else	O
rc	int
=	O
mu_rfc2047_encode	function
(	O
charset	pointer
,	O
encoding	pointer
,	O
text	pointer
,	O
&	O
p	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
"%s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
mu_printf	function
(	O
"%s\n"	pointer
,	O
p	pointer
)	O
;	O
}	O
}	O
else	O
{	O
size_t	long
size	long
=	O
0	int
,	O
n	long
;	O
char	O
*	O
buf	pointer
=	O
NULL	O
;	O
while	O
(	O
(	O
rc	int
=	O
mu_stream_getline	function
(	O
mu_strin	pointer
,	O
&	O
buf	pointer
,	O
&	O
size	long
,	O
&	O
n	long
)	O
)	O
==	O
0	int
&&	O
n	long
>	O
0	int
)	O
{	O
mu_rtrim_class	function
(	O
buf	pointer
,	O
MU_CTYPE_SPACE	int
)	O
;	O
if	O
(	O
decode_mode	int
)	O
rc	int
=	O
mu_rfc2047_decode	function
(	O
charset	pointer
,	O
buf	pointer
,	O
&	O
p	pointer
)	O
;	O
else	O
rc	int
=	O
mu_rfc2047_encode	function
(	O
charset	pointer
,	O
encoding	pointer
,	O
buf	pointer
,	O
&	O
p	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
"%s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
mu_printf	function
(	O
"%s\n"	pointer
,	O
p	pointer
)	O
;	O
}	O
}	O
mu_stream_flush	function
(	O
mu_strout	pointer
)	O
;	O
return	O
0	int
;	O
}	O