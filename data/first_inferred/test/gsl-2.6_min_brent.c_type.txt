typedef	O
struct	O
{	O
double	O
d	double
,	O
e	int
,	O
v	*
,	O
w	*
;	O
double	O
f_v	double
,	O
f_w	int
;	O
}	O
brent_state_t	struct
;	O
static	O
int	O
brent_init	function
(	O
void	O
*	O
vstate	*
,	O
gsl_function	struct
*	O
f	*
,	O
double	O
x_minimum	double
,	O
double	O
f_minimum	double
,	O
double	O
x_lower	double
,	O
double	O
f_lower	double
,	O
double	O
x_upper	double
,	O
double	O
f_upper	double
)	O
;	O
static	O
int	O
brent_iterate	function
(	O
void	O
*	O
vstate	*
,	O
gsl_function	struct
*	O
f	*
,	O
double	O
*	O
x_minimum	double
,	O
double	O
*	O
f_minimum	double
,	O
double	O
*	O
x_lower	double
,	O
double	O
*	O
f_lower	double
,	O
double	O
*	O
x_upper	double
,	O
double	O
*	O
f_upper	double
)	O
;	O
static	O
int	O
brent_init	function
(	O
void	O
*	O
vstate	*
,	O
gsl_function	struct
*	O
f	*
,	O
double	O
x_minimum	double
,	O
double	O
f_minimum	double
,	O
double	O
x_lower	double
,	O
double	O
f_lower	double
,	O
double	O
x_upper	double
,	O
double	O
f_upper	double
)	O
{	O
brent_state_t	struct
*	O
state	*
=	O
(	O
brent_state_t	struct
*	O
)	O
vstate	*
;	O
const	O
double	O
golden	double
=	O
0.3819660	int
;	O
double	O
v	double
=	O
x_lower	double
+	O
golden	double
*	O
(	O
x_upper	double
-	O
x_lower	double
)	O
;	O
double	O
w	*
=	O
v	*
;	O
double	O
f_vw	double
;	O
x_minimum	double
=	O
0	int
;	O
f_minimum	double
=	O
0	int
;	O
f_lower	double
=	O
0	int
;	O
f_upper	double
=	O
0	int
;	O
state	*
->	O
v	*
=	O
v	*
;	O
state	*
->	O
w	int
=	O
w	int
;	O
state	*
->	O
d	int
=	O
0	int
;	O
state	*
->	O
e	int
=	O
0	int
;	O
SAFE_FUNC_CALL	O
(	O
f	*
,	O
v	*
,	O
&	O
f_vw	int
)	O
;	O
state	*
->	O
f_v	double
=	O
f_vw	int
;	O
state	*
->	O
f_w	int
=	O
f_vw	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
brent_iterate	function
(	O
void	O
*	O
vstate	*
,	O
gsl_function	struct
*	O
f	*
,	O
double	O
*	O
x_minimum	double
,	O
double	O
*	O
f_minimum	double
,	O
double	O
*	O
x_lower	double
,	O
double	O
*	O
f_lower	double
,	O
double	O
*	O
x_upper	double
,	O
double	O
*	O
f_upper	double
)	O
{	O
brent_state_t	struct
*	O
state	*
=	O
(	O
brent_state_t	struct
*	O
)	O
vstate	*
;	O
const	O
double	O
x_left	double
=	O
*	O
x_lower	double
;	O
const	O
double	O
x_right	double
=	O
*	O
x_upper	double
;	O
const	O
double	O
z	double
=	O
*	O
x_minimum	double
;	O
double	O
d	double
=	O
state	*
->	O
e	int
;	O
double	O
e	int
=	O
state	*
->	O
d	int
;	O
double	O
u	double
,	O
f_u	double
;	O
const	O
double	O
v	double
=	O
state	*
->	O
v	*
;	O
const	O
double	O
w	int
=	O
state	*
->	O
w	*
;	O
const	O
double	O
f_v	double
=	O
state	*
->	O
f_v	int
;	O
const	O
double	O
f_w	double
=	O
state	*
->	O
f_w	double
;	O
const	O
double	O
f_z	double
=	O
*	O
f_minimum	double
;	O
const	O
double	O
golden	double
=	O
0.3819660	int
;	O
const	O
double	O
w_lower	double
=	O
(	O
z	double
-	O
x_left	double
)	O
;	O
const	O
double	O
w_upper	double
=	O
(	O
x_right	double
-	O
z	double
)	O
;	O
const	O
double	O
tolerance	double
=	O
GSL_SQRT_DBL_EPSILON	int
*	O
fabs	function
(	O
z	double
)	O
;	O
double	O
p	int
=	O
0	int
,	O
q	int
=	O
0	int
,	O
r	double
=	O
0	int
;	O
const	O
double	O
midpoint	double
=	O
0.5	int
*	O
(	O
x_left	double
+	O
x_right	double
)	O
;	O
if	O
(	O
fabs	function
(	O
e	int
)	O
>	O
tolerance	double
)	O
{	O
r	double
=	O
(	O
z	double
-	O
w	double
)	O
*	O
(	O
f_z	double
-	O
f_v	int
)	O
;	O
q	double
=	O
(	O
z	double
-	O
v	double
)	O
*	O
(	O
f_z	double
-	O
f_w	double
)	O
;	O
p	*
=	O
(	O
z	double
-	O
v	double
)	O
*	O
q	*
-	O
(	O
z	double
-	O
w	double
)	O
*	O
r	*
;	O
q	double
=	O
2	int
*	O
(	O
q	double
-	O
r	double
)	O
;	O
if	O
(	O
q	double
>	O
0	int
)	O
{	O
p	*
=	O
-	O
p	double
;	O
}	O
else	O
{	O
q	double
=	O
-	O
q	double
;	O
}	O
r	double
=	O
e	int
;	O
e	int
=	O
d	double
;	O
}	O
if	O
(	O
fabs	function
(	O
p	double
)	O
<	O
fabs	function
(	O
0.5	int
*	O
q	double
*	O
r	double
)	O
&&	O
p	double
<	O
q	double
*	O
w_lower	double
&&	O
p	double
<	O
q	double
*	O
w_upper	double
)	O
{	O
double	O
t2	double
=	O
2	int
*	O
tolerance	double
;	O
d	double
=	O
p	double
/	O
q	double
;	O
u	double
=	O
z	double
+	O
d	long
;	O
if	O
(	O
(	O
u	double
-	O
x_left	double
)	O
<	O
t2	double
||	O
(	O
x_right	double
-	O
u	double
)	O
<	O
t2	double
)	O
{	O
d	double
=	O
(	O
z	double
<	O
midpoint	double
)	O
?	O
tolerance	double
:	O
-	O
tolerance	double
;	O
}	O
}	O
else	O
{	O
e	int
=	O
(	O
z	double
<	O
midpoint	double
)	O
?	O
x_right	double
-	O
z	double
:	O
-	O
(	O
z	double
-	O
x_left	double
)	O
;	O
d	double
=	O
golden	double
*	O
e	int
;	O
}	O
if	O
(	O
fabs	function
(	O
d	double
)	O
>=	O
tolerance	double
)	O
{	O
u	double
=	O
z	double
+	O
d	long
;	O
}	O
else	O
{	O
u	double
=	O
z	double
+	O
(	O
(	O
d	int
>	O
0	int
)	O
?	O
tolerance	double
:	O
-	O
tolerance	double
)	O
;	O
}	O
state	*
->	O
e	int
=	O
e	int
;	O
state	*
->	O
d	double
=	O
d	double
;	O
SAFE_FUNC_CALL	O
(	O
f	*
,	O
u	double
,	O
&	O
f_u	struct
)	O
;	O
if	O
(	O
f_u	int
<=	O
f_z	int
)	O
{	O
if	O
(	O
u	double
<	O
z	double
)	O
{	O
*	O
x_upper	double
=	O
z	double
;	O
*	O
f_upper	double
=	O
f_z	int
;	O
}	O
else	O
{	O
*	O
x_lower	double
=	O
z	double
;	O
*	O
f_lower	double
=	O
f_z	int
;	O
}	O
state	*
->	O
v	*
=	O
w	*
;	O
state	*
->	O
f_v	double
=	O
f_w	int
;	O
state	*
->	O
w	int
=	O
z	double
;	O
state	*
->	O
f_w	int
=	O
f_z	int
;	O
*	O
x_minimum	*
=	O
u	*
;	O
*	O
f_minimum	double
=	O
f_u	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
if	O
(	O
u	*
<	O
z	double
)	O
{	O
*	O
x_lower	double
=	O
u	double
;	O
*	O
f_lower	double
=	O
f_u	int
;	O
}	O
else	O
{	O
*	O
x_upper	double
=	O
u	double
;	O
*	O
f_upper	double
=	O
f_u	int
;	O
}	O
if	O
(	O
f_u	double
<=	O
f_w	int
||	O
w	double
==	O
z	double
)	O
{	O
state	*
->	O
v	*
=	O
w	int
;	O
state	*
->	O
f_v	double
=	O
f_w	int
;	O
state	*
->	O
w	array
=	O
u	int
;	O
state	*
->	O
f_w	double
=	O
f_u	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
f_u	double
<=	O
f_v	int
||	O
v	double
==	O
z	double
||	O
v	*
==	O
w	*
)	O
{	O
state	*
->	O
v	*
=	O
u	*
;	O
state	*
->	O
f_v	double
=	O
f_u	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
const	O
gsl_min_fminimizer_type	struct
brent_type	struct
=	O
{	O
"brent"	*
,	O
sizeof	O
(	O
brent_state_t	struct
)	O
,	O
&	O
brent_init	function
,	O
&	O
brent_iterate	function
}	O
;	O
const	O
gsl_min_fminimizer_type	struct
*	O
gsl_min_fminimizer_brent	*
=	O
&	O
brent_type	struct
;	O