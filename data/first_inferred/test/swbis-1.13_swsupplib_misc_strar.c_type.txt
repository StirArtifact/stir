static	O
int	O
f_strcmp	function
(	O
int	O
sense	int
,	O
const	O
void	O
*	O
vf1	*
,	O
const	O
void	O
*	O
vf2	*
)	O
{	O
char	O
*	O
f1	*
;	O
char	O
*	O
f2	*
;	O
f1	*
=	O
*	O
(	O
(	O
char	O
*	O
*	O
)	O
(	O
vf1	*
)	O
)	O
;	O
f2	*
=	O
*	O
(	O
(	O
char	O
*	O
*	O
)	O
(	O
vf2	*
)	O
)	O
;	O
if	O
(	O
sense	int
<	O
0	int
)	O
return	O
-	O
strcmp	function
(	O
f1	*
,	O
f2	*
)	O
;	O
return	O
strcmp	function
(	O
f1	*
,	O
f2	*
)	O
;	O
}	O
STRAR	struct
*	O
strar_copy_construct	function
(	O
STRAR	struct
*	O
src	*
)	O
{	O
int	O
i	int
;	O
char	O
*	O
s	*
;	O
STRAR	struct
*	O
ret	*
;	O
if	O
(	O
!	O
src	*
)	O
return	O
NULL	O
;	O
ret	*
=	O
strar_open	function
(	O
)	O
;	O
if	O
(	O
!	O
ret	*
)	O
return	O
NULL	O
;	O
i	int
=	O
0	int
;	O
while	O
(	O
(	O
s	*
=	O
strar_get	function
(	O
src	*
,	O
i	int
++	O
)	O
)	O
)	O
{	O
strar_add	function
(	O
ret	int
,	O
s	*
)	O
;	O
}	O
return	O
ret	int
;	O
}	O
STRAR	struct
*	O
strar_open	function
(	O
void	O
)	O
{	O
STRAR	struct
*	O
strb	*
;	O
strb	*
=	O
(	O
STRAR	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
STRAR	struct
)	O
)	O
;	O
if	O
(	O
strb	*
==	O
(	O
STRAR	struct
*	O
)	O
(	O
NULL	O
)	O
)	O
return	O
(	O
STRAR	struct
*	O
)	O
(	O
NULL	O
)	O
;	O
strb	*
->	O
lenM	int
=	O
0	int
;	O
strb	*
->	O
nsM	int
=	O
0	int
;	O
strb	*
->	O
storageM	*
=	O
strob_open	function
(	O
132	int
)	O
;	O
strb	*
->	O
listM	*
=	O
cplob_open	function
(	O
10	int
)	O
;	O
cplob_add_nta	function
(	O
strb	*
->	O
listM	*
,	O
NULL	O
)	O
;	O
return	O
strb	*
;	O
}	O
void	O
strar_reset	function
(	O
STRAR	struct
*	O
strar	*
)	O
{	O
strar	*
->	O
lenM	int
=	O
0	int
;	O
strar	*
->	O
nsM	int
=	O
0	int
;	O
strob_strcpy	function
(	O
strar	*
->	O
storageM	*
,	O
""	*
)	O
;	O
cplob_shallow_reset	function
(	O
strar	*
->	O
listM	*
)	O
;	O
}	O
void	O
strar_close	function
(	O
STRAR	struct
*	O
strar	*
)	O
{	O
strob_close	function
(	O
strar	*
->	O
storageM	*
)	O
;	O
swbis_free	O
(	O
cplob_release	function
(	O
strar	*
->	O
listM	*
)	O
)	O
;	O
swbis_free	O
(	O
strar	*
)	O
;	O
return	O
;	O
}	O
int	O
strar_num_elements	function
(	O
STRAR	struct
*	O
strar	*
)	O
{	O
return	O
strar	*
->	O
nsM	int
;	O
}	O
char	O
*	O
strar_get	function
(	O
STRAR	struct
*	O
strar	*
,	O
int	O
index	function
)	O
{	O
char	O
*	O
s	*
;	O
if	O
(	O
index	function
>=	O
strar	*
->	O
nsM	int
||	O
index	function
<	O
0	int
)	O
return	O
NULL	O
;	O
s	*
=	O
cplob_val	function
(	O
strar	*
->	O
listM	*
,	O
index	function
)	O
;	O
return	O
s	*
;	O
}	O
char	O
*	O
strar_return_store	function
(	O
STRAR	struct
*	O
strar	*
,	O
int	O
len	int
)	O
{	O
char	O
*	O
oldbase	*
;	O
char	O
*	O
base	*
;	O
char	O
*	O
last	*
;	O
int	O
nused	int
;	O
strar	*
->	O
lenM	int
=	O
strar	*
->	O
lenM	int
+	O
len	int
+	O
1	int
;	O
oldbase	int
=	O
strob_str	function
(	O
strar	*
->	O
storageM	*
)	O
;	O
strob_set_memlength	function
(	O
strar	*
->	O
storageM	*
,	O
strar	*
->	O
lenM	int
)	O
;	O
base	int
=	O
strob_str	function
(	O
strar	*
->	O
storageM	*
)	O
;	O
strar	*
->	O
nsM	int
++	O
;	O
if	O
(	O
base	int
!=	O
oldbase	int
)	O
{	O
int	O
index	function
=	O
0	int
;	O
char	O
*	O
p	*
;	O
while	O
(	O
(	O
p	*
=	O
cplob_val	function
(	O
strar	*
->	O
listM	*
,	O
index	function
)	O
)	O
)	O
{	O
cplob_additem	function
(	O
strar	*
->	O
listM	*
,	O
index	function
,	O
base	*
+	O
(	O
(	O
int	O
)	O
(	O
p	*
-	O
oldbase	int
)	O
)	O
)	O
;	O
index	function
++	O
;	O
}	O
}	O
nused	*
=	O
cplob_get_nused	function
(	O
strar	*
->	O
listM	*
)	O
-	O
1	int
;	O
if	O
(	O
nused	int
>	O
0	int
)	O
{	O
last	*
=	O
cplob_val	function
(	O
strar	*
->	O
listM	int
,	O
nused	int
-	O
1	int
)	O
;	O
}	O
else	O
{	O
last	*
=	O
NULL	O
;	O
}	O
if	O
(	O
last	*
)	O
{	O
last	*
=	O
last	*
+	O
strlen	function
(	O
last	*
)	O
+	O
1	int
;	O
}	O
else	O
{	O
last	*
=	O
base	*
;	O
}	O
cplob_add_nta	function
(	O
strar	*
->	O
listM	*
,	O
last	int
)	O
;	O
memset	function
(	O
last	*
,	O
(	O
int	O
)	O
'_'	O
,	O
len	int
)	O
;	O
*	O
(	O
last	*
+	O
len	int
)	O
=	O
'\0'	O
;	O
return	O
last	*
;	O
}	O
int	O
strar_add	function
(	O
STRAR	struct
*	O
strar	*
,	O
char	O
*	O
src	*
)	O
{	O
char	O
*	O
last	*
;	O
last	*
=	O
strar_return_store	function
(	O
strar	*
,	O
strlen	function
(	O
src	*
)	O
)	O
;	O
strcpy	function
(	O
last	*
,	O
src	*
)	O
;	O
return	O
0	int
;	O
}	O
void	O
strar_qsort	function
(	O
STRAR	struct
*	O
strar	*
,	O
int	O
(	O
*	O
f_comp	*
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
)	O
)	O
{	O
size_t	long
nused	long
;	O
nused	long
=	O
(	O
size_t	long
)	O
cplob_get_nused	function
(	O
strar	*
->	O
listM	*
)	O
-	O
1	int
;	O
std_quicksort	function
(	O
strar	*
->	O
listM	*
->	O
list	*
,	O
(	O
size_t	long
)	O
nused	*
,	O
sizeof	O
(	O
char	O
*	O
)	O
,	O
f_comp	*
)	O
;	O
}	O
int	O
strar_qsort_neg_strcmp	function
(	O
const	O
void	O
*	O
vf1	*
,	O
const	O
void	O
*	O
vf2	*
)	O
{	O
return	O
f_strcmp	function
(	O
-	O
1	int
,	O
vf1	*
,	O
vf2	*
)	O
;	O
}	O
int	O
strar_qsort_strcmp	function
(	O
const	O
void	O
*	O
vf1	*
,	O
const	O
void	O
*	O
vf2	*
)	O
{	O
return	O
f_strcmp	function
(	O
1	int
,	O
vf1	*
,	O
vf2	*
)	O
;	O
}	O
void	O
strar_remove_index	function
(	O
STRAR	struct
*	O
strar	*
,	O
int	O
index	function
)	O
{	O
cplob_remove_index	function
(	O
strar	*
->	O
listM	*
,	O
index	function
)	O
;	O
strar	*
->	O
nsM	int
--	O
;	O
}	O