static	O
const	O
double	O
Abar	array
[	O
]	O
=	O
{	O
14005451.0	int
/	O
335480064.0	int
,	O
0.0	int
,	O
0.0	int
,	O
0.0	int
,	O
0.0	int
,	O
-	O
59238493.0	int
/	O
1068277825.0	int
,	O
181606767.0	int
/	O
758867731.0	int
,	O
561292985.0	int
/	O
797845732.0	int
,	O
-	O
1041891430.0	int
/	O
1371343529.0	int
,	O
760417239.0	int
/	O
1151165299.0	int
,	O
118820643.0	int
/	O
751138087.0	int
,	O
-	O
528747749.0	int
/	O
2220607170.0	int
,	O
1.0	int
/	O
4.0	int
}	O
;	O
static	O
const	O
double	O
A	array
[	O
]	O
=	O
{	O
13451932.0	int
/	O
455176623.0	int
,	O
0.0	int
,	O
0.0	int
,	O
0.0	int
,	O
0.0	int
,	O
-	O
808719846.0	int
/	O
976000145.0	int
,	O
1757004468.0	int
/	O
5645159321.0	int
,	O
656045339.0	int
/	O
265891186.0	int
,	O
-	O
3867574721.0	int
/	O
1518517206.0	int
,	O
465885868.0	int
/	O
322736535.0	int
,	O
53011238.0	int
/	O
667516719.0	int
,	O
2.0	int
/	O
45.0	int
}	O
;	O
static	O
const	O
double	O
ah	array
[	O
]	O
=	O
{	O
1.0	int
/	O
18.0	int
,	O
1.0	int
/	O
12.0	int
,	O
1.0	int
/	O
8.0	int
,	O
5.0	int
/	O
16.0	int
,	O
3.0	int
/	O
8.0	int
,	O
59.0	int
/	O
400.0	int
,	O
93.0	int
/	O
200.0	int
,	O
5490023248.0	int
/	O
9719169821.0	int
,	O
13.0	int
/	O
20.0	int
,	O
1201146811.0	int
/	O
1299019798.0	int
}	O
;	O
static	O
const	O
double	O
b21	double
=	O
1.0	int
/	O
18.0	int
;	O
static	O
const	O
double	O
b3	array
[	O
]	O
=	O
{	O
1.0	int
/	O
48.0	int
,	O
1.0	int
/	O
16.0	int
}	O
;	O
static	O
const	O
double	O
b4	array
[	O
]	O
=	O
{	O
1.0	int
/	O
32.0	int
,	O
0.0	int
,	O
3.0	int
/	O
32.0	int
}	O
;	O
static	O
const	O
double	O
b5	array
[	O
]	O
=	O
{	O
5.0	int
/	O
16.0	int
,	O
0.0	int
,	O
-	O
75.0	int
/	O
64.0	int
,	O
75.0	int
/	O
64.0	int
}	O
;	O
static	O
const	O
double	O
b6	array
[	O
]	O
=	O
{	O
3.0	int
/	O
80.0	int
,	O
0.0	int
,	O
0.0	int
,	O
3.0	int
/	O
16.0	int
,	O
3.0	int
/	O
20.0	int
}	O
;	O
static	O
const	O
double	O
b7	array
[	O
]	O
=	O
{	O
29443841.0	int
/	O
614563906.0	int
,	O
0.0	int
,	O
0.0	int
,	O
77736538.0	int
/	O
692538347.0	int
,	O
-	O
28693883.0	int
/	O
1125000000.0	int
,	O
23124283.0	int
/	O
1800000000.0	int
}	O
;	O
static	O
const	O
double	O
b8	array
[	O
]	O
=	O
{	O
16016141.0	int
/	O
946692911.0	int
,	O
0.0	int
,	O
0.0	int
,	O
61564180.0	int
/	O
158732637.0	int
,	O
22789713.0	int
/	O
633445777.0	int
,	O
545815736.0	int
/	O
2771057229.0	int
,	O
-	O
180193667.0	int
/	O
1043307555.0	int
}	O
;	O
static	O
const	O
double	O
b9	array
[	O
]	O
=	O
{	O
39632708.0	int
/	O
573591083.0	int
,	O
0.0	int
,	O
0.0	int
,	O
-	O
433636366.0	int
/	O
683701615.0	int
,	O
-	O
421739975.0	int
/	O
2616292301.0	int
,	O
100302831.0	int
/	O
723423059.0	int
,	O
790204164.0	int
/	O
839813087.0	int
,	O
800635310.0	int
/	O
3783071287.0	int
}	O
;	O
static	O
const	O
double	O
b10	array
[	O
]	O
=	O
{	O
246121993.0	int
/	O
1340847787.0	int
,	O
0.0	int
,	O
0.0	int
,	O
-	O
37695042795.0	int
/	O
15268766246.0	int
,	O
-	O
309121744.0	int
/	O
1061227803.0	int
,	O
-	O
12992083.0	int
/	O
490766935.0	int
,	O
6005943493.0	int
/	O
2108947869.0	int
,	O
393006217.0	int
/	O
1396673457.0	int
,	O
123872331.0	int
/	O
1001029789.0	int
}	O
;	O
static	O
const	O
double	O
b11	array
[	O
]	O
=	O
{	O
-	O
1028468189.0	int
/	O
846180014.0	int
,	O
0.0	int
,	O
0.0	int
,	O
8478235783.0	int
/	O
508512852.0	int
,	O
1311729495.0	int
/	O
1432422823.0	int
,	O
-	O
10304129995.0	int
/	O
1701304382.0	int
,	O
-	O
48777925059.0	int
/	O
3047939560.0	int
,	O
15336726248.0	int
/	O
1032824649.0	int
,	O
-	O
45442868181.0	int
/	O
3398467696.0	int
,	O
3065993473.0	int
/	O
597172653.0	int
}	O
;	O
static	O
const	O
double	O
b12	array
[	O
]	O
=	O
{	O
185892177.0	int
/	O
718116043.0	int
,	O
0.0	int
,	O
0.0	int
,	O
-	O
3185094517.0	int
/	O
667107341.0	int
,	O
-	O
477755414.0	int
/	O
1098053517.0	int
,	O
-	O
703635378.0	int
/	O
230739211.0	int
,	O
5731566787.0	int
/	O
1027545527.0	int
,	O
5232866602.0	int
/	O
850066563.0	int
,	O
-	O
4093664535.0	int
/	O
808688257.0	int
,	O
3962137247.0	int
/	O
1805957418.0	int
,	O
65686358.0	int
/	O
487910083.0	int
}	O
;	O
static	O
const	O
double	O
b13	array
[	O
]	O
=	O
{	O
403863854.0	int
/	O
491063109.0	int
,	O
0.0	int
,	O
0.0	int
,	O
-	O
5068492393.0	int
/	O
434740067.0	int
,	O
-	O
411421997.0	int
/	O
543043805.0	int
,	O
652783627.0	int
/	O
914296604.0	int
,	O
11173962825.0	int
/	O
925320556.0	int
,	O
-	O
13158990841.0	int
/	O
6184727034.0	int
,	O
3936647629.0	int
/	O
1978049680.0	int
,	O
-	O
160528059.0	int
/	O
685178525.0	int
,	O
248638103.0	int
/	O
1413531060.0	int
,	O
0.0	int
}	O
;	O
typedef	O
struct	O
{	O
double	O
*	O
k	array
[	O
13	int
]	O
;	O
double	O
*	O
ytmp	pointer
;	O
double	O
*	O
y0	pointer
;	O
}	O
rk8pd_state_t	struct
;	O
static	O
void	O
*	O
rk8pd_alloc	function
(	O
size_t	long
dim	long
)	O
{	O
rk8pd_state_t	struct
*	O
state	pointer
=	O
(	O
rk8pd_state_t	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
rk8pd_state_t	struct
)	O
)	O
;	O
int	O
i	int
,	O
j	int
;	O
if	O
(	O
state	pointer
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for rk8pd_state"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
ytmp	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
ytmp	pointer
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for ytmp"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
y0	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
y0	pointer
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for y0"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
13	int
;	O
i	int
++	O
)	O
{	O
state	pointer
->	O
k	array
[	O
i	int
]	O
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
k	array
[	O
i	int
]	O
==	O
0	int
)	O
{	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
i	int
;	O
j	int
++	O
)	O
{	O
free	function
(	O
state	pointer
->	O
k	array
[	O
j	int
]	O
)	O
;	O
}	O
free	function
(	O
state	pointer
->	O
y0	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for k's"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
}	O
return	O
state	pointer
;	O
}	O
static	O
int	O
rk8pd_apply	function
(	O
void	O
*	O
vstate	pointer
,	O
size_t	long
dim	long
,	O
double	O
t	double
,	O
double	O
h	double
,	O
double	O
y	array
[	O
]	O
,	O
double	O
yerr	array
[	O
]	O
,	O
const	O
double	O
dydt_in	array
[	O
]	O
,	O
double	O
dydt_out	array
[	O
]	O
,	O
const	O
gsl_odeiv2_system	struct
*	O
sys	pointer
)	O
{	O
rk8pd_state_t	struct
*	O
state	pointer
=	O
(	O
rk8pd_state_t	struct
*	O
)	O
vstate	pointer
;	O
size_t	long
i	int
;	O
double	O
*	O
const	O
ytmp	pointer
=	O
state	pointer
->	O
ytmp	pointer
;	O
double	O
*	O
const	O
y0	pointer
=	O
state	pointer
->	O
y0	pointer
;	O
double	O
*	O
const	O
k1	pointer
=	O
state	pointer
->	O
k	array
[	O
0	int
]	O
;	O
double	O
*	O
const	O
k2	pointer
=	O
state	pointer
->	O
k	array
[	O
1	int
]	O
;	O
double	O
*	O
const	O
k3	pointer
=	O
state	pointer
->	O
k	array
[	O
2	int
]	O
;	O
double	O
*	O
const	O
k4	pointer
=	O
state	pointer
->	O
k	array
[	O
3	int
]	O
;	O
double	O
*	O
const	O
k5	pointer
=	O
state	pointer
->	O
k	array
[	O
4	int
]	O
;	O
double	O
*	O
const	O
k6	pointer
=	O
state	pointer
->	O
k	array
[	O
5	int
]	O
;	O
double	O
*	O
const	O
k7	pointer
=	O
state	pointer
->	O
k	array
[	O
6	int
]	O
;	O
double	O
*	O
const	O
k8	pointer
=	O
state	pointer
->	O
k	array
[	O
7	int
]	O
;	O
double	O
*	O
const	O
k9	pointer
=	O
state	pointer
->	O
k	array
[	O
8	int
]	O
;	O
double	O
*	O
const	O
k10	pointer
=	O
state	pointer
->	O
k	array
[	O
9	int
]	O
;	O
double	O
*	O
const	O
k11	pointer
=	O
state	pointer
->	O
k	array
[	O
10	int
]	O
;	O
double	O
*	O
const	O
k12	pointer
=	O
state	pointer
->	O
k	array
[	O
11	int
]	O
;	O
double	O
*	O
const	O
k13	pointer
=	O
state	pointer
->	O
k	array
[	O
12	int
]	O
;	O
DBL_MEMCPY	O
(	O
y0	pointer
,	O
y	array
,	O
dim	long
)	O
;	O
if	O
(	O
dydt_in	array
!=	O
NULL	O
)	O
{	O
DBL_MEMCPY	O
(	O
k1	pointer
,	O
dydt_in	array
,	O
dim	long
)	O
;	O
}	O
else	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	double
,	O
y	array
,	O
k1	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
dim	long
;	O
i	int
++	O
)	O
ytmp	pointer
[	O
i	int
]	O
=	O
y	array
[	O
i	int
]	O
+	O
b21	double
*	O
h	double
*	O
k1	pointer
[	O
i	int
]	O
;	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	double
+	O
ah	array
[	O
0	int
]	O
*	O
h	double
,	O
ytmp	pointer
,	O
k2	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
dim	long
;	O
i	int
++	O
)	O
ytmp	pointer
[	O
i	int
]	O
=	O
y	array
[	O
i	int
]	O
+	O
h	double
*	O
(	O
b3	array
[	O
0	int
]	O
*	O
k1	pointer
[	O
i	int
]	O
+	O
b3	array
[	O
1	int
]	O
*	O
k2	pointer
[	O
i	int
]	O
)	O
;	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	double
+	O
ah	array
[	O
1	int
]	O
*	O
h	double
,	O
ytmp	pointer
,	O
k3	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
dim	long
;	O
i	int
++	O
)	O
ytmp	pointer
[	O
i	int
]	O
=	O
y	array
[	O
i	int
]	O
+	O
h	double
*	O
(	O
b4	array
[	O
0	int
]	O
*	O
k1	pointer
[	O
i	int
]	O
+	O
b4	array
[	O
2	int
]	O
*	O
k3	pointer
[	O
i	int
]	O
)	O
;	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	double
+	O
ah	array
[	O
2	int
]	O
*	O
h	double
,	O
ytmp	pointer
,	O
k4	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
dim	long
;	O
i	int
++	O
)	O
ytmp	pointer
[	O
i	int
]	O
=	O
y	array
[	O
i	int
]	O
+	O
h	double
*	O
(	O
b5	array
[	O
0	int
]	O
*	O
k1	pointer
[	O
i	int
]	O
+	O
b5	array
[	O
2	int
]	O
*	O
k3	pointer
[	O
i	int
]	O
+	O
b5	array
[	O
3	int
]	O
*	O
k4	pointer
[	O
i	int
]	O
)	O
;	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	double
+	O
ah	array
[	O
3	int
]	O
*	O
h	double
,	O
ytmp	pointer
,	O
k5	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
dim	long
;	O
i	int
++	O
)	O
ytmp	pointer
[	O
i	int
]	O
=	O
y	array
[	O
i	int
]	O
+	O
h	double
*	O
(	O
b6	array
[	O
0	int
]	O
*	O
k1	pointer
[	O
i	int
]	O
+	O
b6	array
[	O
3	int
]	O
*	O
k4	pointer
[	O
i	int
]	O
+	O
b6	array
[	O
4	int
]	O
*	O
k5	pointer
[	O
i	int
]	O
)	O
;	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	double
+	O
ah	array
[	O
4	int
]	O
*	O
h	double
,	O
ytmp	pointer
,	O
k6	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
dim	long
;	O
i	int
++	O
)	O
ytmp	pointer
[	O
i	int
]	O
=	O
y	array
[	O
i	int
]	O
+	O
h	double
*	O
(	O
b7	array
[	O
0	int
]	O
*	O
k1	pointer
[	O
i	int
]	O
+	O
b7	array
[	O
3	int
]	O
*	O
k4	pointer
[	O
i	int
]	O
+	O
b7	array
[	O
4	int
]	O
*	O
k5	pointer
[	O
i	int
]	O
+	O
b7	array
[	O
5	int
]	O
*	O
k6	pointer
[	O
i	int
]	O
)	O
;	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	double
+	O
ah	array
[	O
5	int
]	O
*	O
h	double
,	O
ytmp	pointer
,	O
k7	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
dim	long
;	O
i	int
++	O
)	O
ytmp	pointer
[	O
i	int
]	O
=	O
y	array
[	O
i	int
]	O
+	O
h	double
*	O
(	O
b8	array
[	O
0	int
]	O
*	O
k1	pointer
[	O
i	int
]	O
+	O
b8	array
[	O
3	int
]	O
*	O
k4	pointer
[	O
i	int
]	O
+	O
b8	array
[	O
4	int
]	O
*	O
k5	pointer
[	O
i	int
]	O
+	O
b8	array
[	O
5	int
]	O
*	O
k6	pointer
[	O
i	int
]	O
+	O
b8	array
[	O
6	int
]	O
*	O
k7	pointer
[	O
i	int
]	O
)	O
;	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	double
+	O
ah	array
[	O
6	int
]	O
*	O
h	double
,	O
ytmp	pointer
,	O
k8	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
dim	long
;	O
i	int
++	O
)	O
ytmp	pointer
[	O
i	int
]	O
=	O
y	array
[	O
i	int
]	O
+	O
h	double
*	O
(	O
b9	array
[	O
0	int
]	O
*	O
k1	pointer
[	O
i	int
]	O
+	O
b9	array
[	O
3	int
]	O
*	O
k4	pointer
[	O
i	int
]	O
+	O
b9	array
[	O
4	int
]	O
*	O
k5	pointer
[	O
i	int
]	O
+	O
b9	array
[	O
5	int
]	O
*	O
k6	pointer
[	O
i	int
]	O
+	O
b9	array
[	O
6	int
]	O
*	O
k7	pointer
[	O
i	int
]	O
+	O
b9	array
[	O
7	int
]	O
*	O
k8	pointer
[	O
i	int
]	O
)	O
;	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	double
+	O
ah	array
[	O
7	int
]	O
*	O
h	double
,	O
ytmp	pointer
,	O
k9	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
dim	long
;	O
i	int
++	O
)	O
ytmp	pointer
[	O
i	int
]	O
=	O
y	array
[	O
i	int
]	O
+	O
h	double
*	O
(	O
b10	array
[	O
0	int
]	O
*	O
k1	pointer
[	O
i	int
]	O
+	O
b10	array
[	O
3	int
]	O
*	O
k4	pointer
[	O
i	int
]	O
+	O
b10	array
[	O
4	int
]	O
*	O
k5	pointer
[	O
i	int
]	O
+	O
b10	array
[	O
5	int
]	O
*	O
k6	pointer
[	O
i	int
]	O
+	O
b10	array
[	O
6	int
]	O
*	O
k7	pointer
[	O
i	int
]	O
+	O
b10	array
[	O
7	int
]	O
*	O
k8	pointer
[	O
i	int
]	O
+	O
b10	array
[	O
8	int
]	O
*	O
k9	pointer
[	O
i	int
]	O
)	O
;	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	double
+	O
ah	array
[	O
8	int
]	O
*	O
h	double
,	O
ytmp	pointer
,	O
k10	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
dim	long
;	O
i	int
++	O
)	O
ytmp	pointer
[	O
i	int
]	O
=	O
y	array
[	O
i	int
]	O
+	O
h	double
*	O
(	O
b11	array
[	O
0	int
]	O
*	O
k1	pointer
[	O
i	int
]	O
+	O
b11	array
[	O
3	int
]	O
*	O
k4	pointer
[	O
i	int
]	O
+	O
b11	array
[	O
4	int
]	O
*	O
k5	pointer
[	O
i	int
]	O
+	O
b11	array
[	O
5	int
]	O
*	O
k6	pointer
[	O
i	int
]	O
+	O
b11	array
[	O
6	int
]	O
*	O
k7	pointer
[	O
i	int
]	O
+	O
b11	array
[	O
7	int
]	O
*	O
k8	pointer
[	O
i	int
]	O
+	O
b11	array
[	O
8	int
]	O
*	O
k9	pointer
[	O
i	int
]	O
+	O
b11	array
[	O
9	int
]	O
*	O
k10	pointer
[	O
i	int
]	O
)	O
;	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	double
+	O
ah	array
[	O
9	int
]	O
*	O
h	double
,	O
ytmp	pointer
,	O
k11	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
dim	long
;	O
i	int
++	O
)	O
ytmp	pointer
[	O
i	int
]	O
=	O
y	array
[	O
i	int
]	O
+	O
h	double
*	O
(	O
b12	array
[	O
0	int
]	O
*	O
k1	pointer
[	O
i	int
]	O
+	O
b12	array
[	O
3	int
]	O
*	O
k4	pointer
[	O
i	int
]	O
+	O
b12	array
[	O
4	int
]	O
*	O
k5	pointer
[	O
i	int
]	O
+	O
b12	array
[	O
5	int
]	O
*	O
k6	pointer
[	O
i	int
]	O
+	O
b12	array
[	O
6	int
]	O
*	O
k7	pointer
[	O
i	int
]	O
+	O
b12	array
[	O
7	int
]	O
*	O
k8	pointer
[	O
i	int
]	O
+	O
b12	array
[	O
8	int
]	O
*	O
k9	pointer
[	O
i	int
]	O
+	O
b12	array
[	O
9	int
]	O
*	O
k10	pointer
[	O
i	int
]	O
+	O
b12	array
[	O
10	int
]	O
*	O
k11	pointer
[	O
i	int
]	O
)	O
;	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	double
+	O
h	double
,	O
ytmp	pointer
,	O
k12	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
dim	long
;	O
i	int
++	O
)	O
ytmp	pointer
[	O
i	int
]	O
=	O
y	array
[	O
i	int
]	O
+	O
h	double
*	O
(	O
b13	array
[	O
0	int
]	O
*	O
k1	pointer
[	O
i	int
]	O
+	O
b13	array
[	O
3	int
]	O
*	O
k4	pointer
[	O
i	int
]	O
+	O
b13	array
[	O
4	int
]	O
*	O
k5	pointer
[	O
i	int
]	O
+	O
b13	array
[	O
5	int
]	O
*	O
k6	pointer
[	O
i	int
]	O
+	O
b13	array
[	O
6	int
]	O
*	O
k7	pointer
[	O
i	int
]	O
+	O
b13	array
[	O
7	int
]	O
*	O
k8	pointer
[	O
i	int
]	O
+	O
b13	array
[	O
8	int
]	O
*	O
k9	pointer
[	O
i	int
]	O
+	O
b13	array
[	O
9	int
]	O
*	O
k10	pointer
[	O
i	int
]	O
+	O
b13	array
[	O
10	int
]	O
*	O
k11	pointer
[	O
i	int
]	O
+	O
b13	array
[	O
11	int
]	O
*	O
k12	pointer
[	O
i	int
]	O
)	O
;	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	double
+	O
h	double
,	O
ytmp	pointer
,	O
k13	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
dim	long
;	O
i	int
++	O
)	O
{	O
const	O
double	O
ksum8	double
=	O
Abar	array
[	O
0	int
]	O
*	O
k1	pointer
[	O
i	int
]	O
+	O
Abar	array
[	O
5	int
]	O
*	O
k6	pointer
[	O
i	int
]	O
+	O
Abar	array
[	O
6	int
]	O
*	O
k7	pointer
[	O
i	int
]	O
+	O
Abar	array
[	O
7	int
]	O
*	O
k8	pointer
[	O
i	int
]	O
+	O
Abar	array
[	O
8	int
]	O
*	O
k9	pointer
[	O
i	int
]	O
+	O
Abar	array
[	O
9	int
]	O
*	O
k10	pointer
[	O
i	int
]	O
+	O
Abar	array
[	O
10	int
]	O
*	O
k11	pointer
[	O
i	int
]	O
+	O
Abar	array
[	O
11	int
]	O
*	O
k12	pointer
[	O
i	int
]	O
+	O
Abar	array
[	O
12	int
]	O
*	O
k13	pointer
[	O
i	int
]	O
;	O
y	array
[	O
i	int
]	O
+=	O
h	double
*	O
ksum8	double
;	O
}	O
if	O
(	O
dydt_out	array
!=	O
NULL	O
)	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	double
+	O
h	double
,	O
y	array
,	O
dydt_out	array
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
DBL_MEMCPY	O
(	O
y	array
,	O
y0	pointer
,	O
dim	long
)	O
;	O
return	O
s	pointer
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
dim	long
;	O
i	int
++	O
)	O
{	O
const	O
double	O
ksum8	double
=	O
Abar	array
[	O
0	int
]	O
*	O
k1	pointer
[	O
i	int
]	O
+	O
Abar	array
[	O
5	int
]	O
*	O
k6	pointer
[	O
i	int
]	O
+	O
Abar	array
[	O
6	int
]	O
*	O
k7	pointer
[	O
i	int
]	O
+	O
Abar	array
[	O
7	int
]	O
*	O
k8	pointer
[	O
i	int
]	O
+	O
Abar	array
[	O
8	int
]	O
*	O
k9	pointer
[	O
i	int
]	O
+	O
Abar	array
[	O
9	int
]	O
*	O
k10	pointer
[	O
i	int
]	O
+	O
Abar	array
[	O
10	int
]	O
*	O
k11	pointer
[	O
i	int
]	O
+	O
Abar	array
[	O
11	int
]	O
*	O
k12	pointer
[	O
i	int
]	O
+	O
Abar	array
[	O
12	int
]	O
*	O
k13	pointer
[	O
i	int
]	O
;	O
const	O
double	O
ksum7	double
=	O
A	array
[	O
0	int
]	O
*	O
k1	pointer
[	O
i	int
]	O
+	O
A	array
[	O
5	int
]	O
*	O
k6	pointer
[	O
i	int
]	O
+	O
A	array
[	O
6	int
]	O
*	O
k7	pointer
[	O
i	int
]	O
+	O
A	array
[	O
7	int
]	O
*	O
k8	pointer
[	O
i	int
]	O
+	O
A	array
[	O
8	int
]	O
*	O
k9	pointer
[	O
i	int
]	O
+	O
A	array
[	O
9	int
]	O
*	O
k10	pointer
[	O
i	int
]	O
+	O
A	array
[	O
10	int
]	O
*	O
k11	pointer
[	O
i	int
]	O
+	O
A	array
[	O
11	int
]	O
*	O
k12	pointer
[	O
i	int
]	O
;	O
yerr	array
[	O
i	int
]	O
=	O
h	double
*	O
(	O
ksum7	double
-	O
ksum8	double
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
rk8pd_reset	function
(	O
void	O
*	O
vstate	pointer
,	O
size_t	long
dim	long
)	O
{	O
rk8pd_state_t	struct
*	O
state	pointer
=	O
(	O
rk8pd_state_t	struct
*	O
)	O
vstate	pointer
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
13	int
;	O
i	int
++	O
)	O
{	O
DBL_ZERO_MEMSET	O
(	O
state	pointer
->	O
k	array
[	O
i	int
]	O
,	O
dim	long
)	O
;	O
}	O
DBL_ZERO_MEMSET	O
(	O
state	pointer
->	O
y0	pointer
,	O
dim	long
)	O
;	O
DBL_ZERO_MEMSET	O
(	O
state	pointer
->	O
ytmp	pointer
,	O
dim	long
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
unsigned	O
int	O
rk8pd_order	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
rk8pd_state_t	struct
*	O
state	pointer
=	O
(	O
rk8pd_state_t	struct
*	O
)	O
vstate	pointer
;	O
state	pointer
=	O
0	int
;	O
return	O
8	int
;	O
}	O
static	O
void	O
rk8pd_free	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
rk8pd_state_t	struct
*	O
state	pointer
=	O
(	O
rk8pd_state_t	struct
*	O
)	O
vstate	pointer
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
13	int
;	O
i	int
++	O
)	O
{	O
free	function
(	O
state	pointer
->	O
k	array
[	O
i	int
]	O
)	O
;	O
}	O
free	function
(	O
state	pointer
->	O
y0	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
}	O
static	O
const	O
gsl_odeiv2_step_type	struct
rk8pd_type	struct
=	O
{	O
"rk8pd"	pointer
,	O
1	int
,	O
1	int
,	O
&	O
rk8pd_alloc	function
,	O
&	O
rk8pd_apply	function
,	O
&	O
stepper_set_driver_null	function
,	O
&	O
rk8pd_reset	function
,	O
&	O
rk8pd_order	function
,	O
&	O
rk8pd_free	function
}	O
;	O
const	O
gsl_odeiv2_step_type	struct
*	O
gsl_odeiv2_step_rk8pd	pointer
=	O
&	O
rk8pd_type	struct
;	O
