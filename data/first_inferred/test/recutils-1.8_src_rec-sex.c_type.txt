struct	O
rec_sex_s	struct
{	O
rec_sex_ast_t	pointer
ast	pointer
;	O
rec_sex_parser_t	pointer
parser	pointer
;	O
}	O
;	O
struct	O
rec_sex_val_s	struct
{	O
int	O
type	enum
;	O
int	O
int_val	int
;	O
double	O
real_val	double
;	O
char	O
*	O
str_val	pointer
;	O
}	O
;	O
static	O
struct	O
rec_sex_val_s	struct
rec_sex_eval_node	function
(	O
rec_sex_t	pointer
sex	pointer
,	O
rec_record_t	pointer
record	pointer
,	O
rec_sex_ast_node_t	pointer
node	pointer
,	O
bool	bool
*	O
status	int
)	O
;	O
static	O
bool	bool
rec_sex_op_real_p	function
(	O
struct	O
rec_sex_val_s	struct
op1	struct
,	O
struct	O
rec_sex_val_s	struct
op2	struct
)	O
;	O
rec_sex_t	pointer
rec_sex_new	function
(	O
bool	bool
case_insensitive	bool
)	O
{	O
rec_sex_t	pointer
new	pointer
;	O
new	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
rec_sex_s	struct
)	O
)	O
;	O
if	O
(	O
new	pointer
)	O
{	O
new	pointer
->	O
parser	pointer
=	O
rec_sex_parser_new	function
(	O
)	O
;	O
rec_sex_parser_set_case_insensitive	function
(	O
new	pointer
->	O
parser	pointer
,	O
case_insensitive	bool
)	O
;	O
new	pointer
->	O
ast	pointer
=	O
NULL	O
;	O
}	O
return	O
new	pointer
;	O
}	O
void	O
rec_sex_destroy	function
(	O
rec_sex_t	pointer
sex	pointer
)	O
{	O
if	O
(	O
sex	pointer
)	O
{	O
if	O
(	O
sex	pointer
->	O
parser	pointer
)	O
{	O
rec_sex_parser_destroy	function
(	O
sex	pointer
->	O
parser	pointer
)	O
;	O
}	O
if	O
(	O
sex	pointer
->	O
ast	pointer
)	O
{	O
rec_sex_ast_destroy	function
(	O
sex	pointer
->	O
ast	pointer
)	O
;	O
}	O
free	function
(	O
sex	pointer
)	O
;	O
}	O
}	O
bool	bool
rec_sex_compile	function
(	O
rec_sex_t	pointer
sex	pointer
,	O
const	O
char	O
*	O
expr	pointer
)	O
{	O
bool	bool
res	bool
;	O
res	bool
=	O
rec_sex_parser_run	function
(	O
sex	pointer
->	O
parser	pointer
,	O
expr	pointer
)	O
;	O
if	O
(	O
res	bool
)	O
{	O
sex	pointer
->	O
ast	pointer
=	O
rec_sex_parser_ast	function
(	O
sex	pointer
->	O
parser	pointer
)	O
;	O
}	O
return	O
res	bool
;	O
}	O
char	O
*	O
rec_sex_eval_str	function
(	O
rec_sex_t	pointer
sex	pointer
,	O
rec_record_t	pointer
record	pointer
)	O
{	O
char	O
*	O
res	bool
;	O
struct	O
rec_sex_val_s	struct
val	pointer
;	O
bool	bool
status	int
;	O
rec_sex_ast_node_unfix	function
(	O
rec_sex_ast_top	function
(	O
sex	pointer
->	O
ast	pointer
)	O
)	O
;	O
val	pointer
=	O
rec_sex_eval_node	function
(	O
sex	pointer
,	O
record	pointer
,	O
rec_sex_ast_top	function
(	O
sex	pointer
->	O
ast	pointer
)	O
,	O
&	O
status	int
)	O
;	O
if	O
(	O
!	O
status	int
)	O
{	O
return	O
NULL	O
;	O
}	O
res	bool
=	O
NULL	O
;	O
switch	O
(	O
val	pointer
.	O
type	enum
)	O
{	O
case	O
REC_SEX_VAL_INT	int
:	O
{	O
asprintf	function
(	O
&	O
res	bool
,	O
"%d"	pointer
,	O
val	pointer
.	O
int_val	int
)	O
;	O
break	O
;	O
}	O
case	O
REC_SEX_VAL_REAL	int
:	O
{	O
asprintf	function
(	O
&	O
res	bool
,	O
"%f"	pointer
,	O
val	pointer
.	O
real_val	double
)	O
;	O
break	O
;	O
}	O
case	O
REC_SEX_VAL_STR	int
:	O
{	O
res	bool
=	O
strdup	function
(	O
val	pointer
.	O
str_val	pointer
)	O
;	O
break	O
;	O
}	O
}	O
return	O
res	bool
;	O
}	O
bool	bool
rec_sex_eval	function
(	O
rec_sex_t	pointer
sex	pointer
,	O
rec_record_t	pointer
record	pointer
,	O
bool	bool
*	O
status	int
)	O
{	O
bool	bool
res	bool
;	O
rec_field_t	pointer
field	pointer
;	O
rec_field_t	pointer
wfield	pointer
;	O
rec_record_t	pointer
wrec	pointer
;	O
rec_mset_iterator_t	struct
iter	struct
;	O
int	O
j	long
,	O
nf	int
;	O
struct	O
rec_sex_val_s	struct
val	pointer
;	O
res	bool
=	O
false	int
;	O
wrec	pointer
=	O
NULL	O
;	O
rec_sex_ast_node_unfix	function
(	O
rec_sex_ast_top	function
(	O
sex	pointer
->	O
ast	pointer
)	O
)	O
;	O
EXEC_AST	O
(	O
record	pointer
)	O
;	O
if	O
(	O
res	bool
)	O
{	O
goto	O
exit	function
;	O
}	O
rec_record_reset_marks	function
(	O
record	pointer
)	O
;	O
iter	struct
=	O
rec_mset_iterator	function
(	O
rec_record_mset	function
(	O
record	pointer
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter	struct
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field	pointer
,	O
NULL	O
)	O
)	O
{	O
nf	int
=	O
rec_record_get_num_fields_by_name	function
(	O
record	pointer
,	O
rec_field_name	function
(	O
field	pointer
)	O
)	O
;	O
if	O
(	O
(	O
nf	int
>	O
1	int
)	O
&&	O
(	O
rec_record_field_mark	function
(	O
record	pointer
,	O
field	pointer
)	O
==	O
0	int
)	O
&&	O
(	O
rec_sex_ast_name_p	function
(	O
sex	pointer
->	O
ast	pointer
,	O
rec_field_name	function
(	O
field	pointer
)	O
,	O
nf	int
)	O
)	O
&&	O
(	O
!	O
rec_sex_ast_hash_name_p	function
(	O
sex	pointer
->	O
ast	pointer
,	O
rec_field_name	function
(	O
field	pointer
)	O
)	O
)	O
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
nf	int
;	O
j	long
++	O
)	O
{	O
wfield	pointer
=	O
rec_record_get_field_by_name	function
(	O
record	pointer
,	O
rec_field_name	function
(	O
field	pointer
)	O
,	O
j	long
)	O
;	O
if	O
(	O
wrec	pointer
)	O
{	O
rec_record_destroy	function
(	O
wrec	pointer
)	O
;	O
}	O
rec_record_mark_field	function
(	O
record	pointer
,	O
wfield	pointer
,	O
1	int
)	O
;	O
wrec	pointer
=	O
rec_record_dup	function
(	O
record	pointer
)	O
;	O
rec_record_remove_field_by_name	function
(	O
wrec	pointer
,	O
rec_field_name	function
(	O
field	pointer
)	O
,	O
-	O
1	int
)	O
;	O
rec_mset_append	function
(	O
rec_record_mset	function
(	O
wrec	pointer
)	O
,	O
MSET_FIELD	int
,	O
(	O
void	O
*	O
)	O
rec_field_dup	function
(	O
wfield	pointer
)	O
,	O
MSET_ANY	int
)	O
;	O
EXEC_AST	O
(	O
wrec	pointer
)	O
;	O
if	O
(	O
res	bool
)	O
{	O
rec_record_destroy	function
(	O
wrec	pointer
)	O
;	O
goto	O
exit	function
;	O
}	O
}	O
}	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter	struct
)	O
;	O
exit	function
:	O
if	O
(	O
!	O
*	O
status	int
)	O
{	O
res	bool
=	O
false	int
;	O
}	O
return	O
res	bool
;	O
}	O
void	O
rec_sex_print_ast	function
(	O
rec_sex_t	pointer
sex	pointer
)	O
{	O
rec_sex_parser_print_ast	function
(	O
sex	pointer
->	O
parser	pointer
)	O
;	O
}	O
struct	O
rec_sex_val_s	struct
rec_sex_eval_node	function
(	O
rec_sex_t	pointer
sex	pointer
,	O
rec_record_t	pointer
record	pointer
,	O
rec_sex_ast_node_t	pointer
node	pointer
,	O
bool	bool
*	O
status	int
)	O
{	O
struct	O
rec_sex_val_s	struct
res	bool
=	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
;	O
struct	O
rec_sex_val_s	struct
child_val1	struct
=	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
;	O
struct	O
rec_sex_val_s	struct
child_val2	struct
=	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
;	O
struct	O
rec_sex_val_s	struct
child_val3	struct
=	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
;	O
*	O
status	int
=	O
true	int
;	O
switch	O
(	O
rec_sex_ast_node_type	function
(	O
node	pointer
)	O
)	O
{	O
case	O
REC_SEX_NOVAL	int
:	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Application bug: REC_SEX_NOVAL node found.\nPlease report this!\n"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
break	O
;	O
}	O
case	O
REC_SEX_OP_NEG	int
:	O
case	O
REC_SEX_OP_ADD	int
:	O
{	O
int	O
op1	struct
;	O
int	O
op2	struct
;	O
double	O
op1_real	double
;	O
double	O
op2_real	double
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct
,	O
1	int
)	O
;	O
if	O
(	O
rec_sex_op_real_p	function
(	O
child_val1	struct
,	O
child_val2	struct
)	O
)	O
{	O
ATOD_VAL	O
(	O
op1_real	double
,	O
child_val1	struct
)	O
;	O
ATOD_VAL	O
(	O
op2_real	double
,	O
child_val2	struct
)	O
;	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_REAL	int
;	O
res	bool
.	O
real_val	double
=	O
op1_real	double
+	O
op2_real	double
;	O
}	O
else	O
{	O
ATOI_VAL	O
(	O
op1	struct
,	O
child_val1	struct
)	O
;	O
ATOI_VAL	O
(	O
op2	struct
,	O
child_val2	struct
)	O
;	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
op1	struct
+	O
op2	struct
;	O
}	O
break	O
;	O
}	O
case	O
REC_SEX_OP_SUB	int
:	O
{	O
int	O
op1	struct
;	O
int	O
op2	struct
;	O
double	O
op1_real	double
;	O
double	O
op2_real	double
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct
,	O
1	int
)	O
;	O
if	O
(	O
rec_sex_op_real_p	function
(	O
child_val1	struct
,	O
child_val2	struct
)	O
)	O
{	O
ATOD_VAL	O
(	O
op1_real	double
,	O
child_val1	struct
)	O
;	O
ATOD_VAL	O
(	O
op2_real	double
,	O
child_val2	struct
)	O
;	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_REAL	int
;	O
res	bool
.	O
real_val	double
=	O
op1	struct
-	O
op2	struct
;	O
}	O
else	O
{	O
ATOI_VAL	O
(	O
op1	struct
,	O
child_val1	struct
)	O
;	O
ATOI_VAL	O
(	O
op2	struct
,	O
child_val2	struct
)	O
;	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
op1	struct
-	O
op2	struct
;	O
}	O
break	O
;	O
}	O
case	O
REC_SEX_OP_MUL	int
:	O
{	O
int	O
op1	struct
;	O
int	O
op2	struct
;	O
double	O
op1_real	double
;	O
double	O
op2_real	double
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct
,	O
1	int
)	O
;	O
if	O
(	O
rec_sex_op_real_p	function
(	O
child_val1	struct
,	O
child_val2	struct
)	O
)	O
{	O
ATOD_VAL	O
(	O
op1_real	double
,	O
child_val1	struct
)	O
;	O
ATOD_VAL	O
(	O
op2_real	double
,	O
child_val2	struct
)	O
;	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_REAL	int
;	O
res	bool
.	O
real_val	double
=	O
op1_real	double
*	O
op2_real	double
;	O
}	O
else	O
{	O
ATOI_VAL	O
(	O
op1	struct
,	O
child_val1	struct
)	O
;	O
ATOI_VAL	O
(	O
op2	struct
,	O
child_val2	struct
)	O
;	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
op1	struct
*	O
op2	struct
;	O
}	O
break	O
;	O
}	O
case	O
REC_SEX_OP_DIV	int
:	O
{	O
int	O
op1	struct
;	O
int	O
op2	struct
;	O
double	O
op1_real	double
;	O
double	O
op2_real	double
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct
,	O
1	int
)	O
;	O
if	O
(	O
rec_sex_op_real_p	function
(	O
child_val1	struct
,	O
child_val2	struct
)	O
)	O
{	O
ATOD_VAL	O
(	O
op1_real	double
,	O
child_val1	struct
)	O
;	O
ATOD_VAL	O
(	O
op2_real	double
,	O
child_val2	struct
)	O
;	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_REAL	int
;	O
res	bool
.	O
real_val	double
=	O
op1_real	double
/	O
op2_real	double
;	O
}	O
else	O
{	O
ATOI_VAL	O
(	O
op1	struct
,	O
child_val1	struct
)	O
;	O
ATOI_VAL	O
(	O
op2	struct
,	O
child_val2	struct
)	O
;	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_INT	int
;	O
if	O
(	O
op2	struct
!=	O
0	int
)	O
{	O
res	bool
.	O
int_val	int
=	O
op1	struct
/	O
op2	struct
;	O
}	O
else	O
{	O
*	O
status	int
=	O
false	int
;	O
return	O
res	bool
;	O
}	O
}	O
break	O
;	O
}	O
case	O
REC_SEX_OP_MOD	int
:	O
{	O
int	O
op1	struct
;	O
int	O
op2	struct
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct
,	O
1	int
)	O
;	O
ATOI_VAL	O
(	O
op1	struct
,	O
child_val1	struct
)	O
;	O
ATOI_VAL	O
(	O
op2	struct
,	O
child_val2	struct
)	O
;	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_INT	int
;	O
if	O
(	O
op2	struct
!=	O
0	int
)	O
{	O
res	bool
.	O
int_val	int
=	O
op1	struct
%	O
op2	struct
;	O
}	O
else	O
{	O
*	O
status	int
=	O
false	int
;	O
return	O
res	bool
;	O
}	O
break	O
;	O
}	O
case	O
REC_SEX_OP_EQL	int
:	O
{	O
int	O
op1	struct
;	O
int	O
op2	struct
;	O
double	O
op1_real	double
;	O
double	O
op2_real	double
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct
,	O
1	int
)	O
;	O
if	O
(	O
(	O
child_val1	struct
.	O
type	enum
==	O
REC_SEX_VAL_STR	int
)	O
&&	O
(	O
child_val2	struct
.	O
type	enum
==	O
REC_SEX_VAL_STR	int
)	O
)	O
{	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_INT	int
;	O
if	O
(	O
rec_sex_parser_case_insensitive	function
(	O
sex	pointer
->	O
parser	pointer
)	O
)	O
{	O
res	bool
.	O
int_val	int
=	O
(	O
strcasecmp	function
(	O
child_val1	struct
.	O
str_val	pointer
,	O
child_val2	struct
.	O
str_val	pointer
)	O
==	O
0	int
)	O
;	O
}	O
else	O
{	O
res	bool
.	O
int_val	int
=	O
(	O
strcmp	function
(	O
child_val1	struct
.	O
str_val	pointer
,	O
child_val2	struct
.	O
str_val	pointer
)	O
==	O
0	int
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
rec_sex_op_real_p	function
(	O
child_val1	struct
,	O
child_val2	struct
)	O
)	O
{	O
ATOD_VAL	O
(	O
op1_real	double
,	O
child_val1	struct
)	O
;	O
ATOD_VAL	O
(	O
op2_real	double
,	O
child_val2	struct
)	O
;	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
op1_real	double
==	O
op2_real	double
;	O
}	O
else	O
{	O
ATOI_VAL	O
(	O
op1	struct
,	O
child_val1	struct
)	O
;	O
ATOI_VAL	O
(	O
op2	struct
,	O
child_val2	struct
)	O
;	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
op1	struct
==	O
op2	struct
;	O
}	O
}	O
break	O
;	O
}	O
case	O
REC_SEX_OP_NEQ	int
:	O
{	O
int	O
op1	struct
;	O
int	O
op2	struct
;	O
double	O
op1_real	double
;	O
double	O
op2_real	double
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct
,	O
1	int
)	O
;	O
if	O
(	O
(	O
child_val1	struct
.	O
type	enum
==	O
REC_SEX_VAL_STR	int
)	O
&&	O
(	O
child_val2	struct
.	O
type	enum
==	O
REC_SEX_VAL_STR	int
)	O
)	O
{	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_INT	int
;	O
if	O
(	O
rec_sex_parser_case_insensitive	function
(	O
sex	pointer
->	O
parser	pointer
)	O
)	O
{	O
res	bool
.	O
int_val	int
=	O
(	O
strcasecmp	function
(	O
child_val1	struct
.	O
str_val	pointer
,	O
child_val2	struct
.	O
str_val	pointer
)	O
!=	O
0	int
)	O
;	O
}	O
else	O
{	O
res	bool
.	O
int_val	int
=	O
(	O
strcmp	function
(	O
child_val1	struct
.	O
str_val	pointer
,	O
child_val2	struct
.	O
str_val	pointer
)	O
!=	O
0	int
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
rec_sex_op_real_p	function
(	O
child_val1	struct
,	O
child_val2	struct
)	O
)	O
{	O
ATOD_VAL	O
(	O
op1_real	double
,	O
child_val1	struct
)	O
;	O
ATOD_VAL	O
(	O
op2_real	double
,	O
child_val2	struct
)	O
;	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
op1_real	double
!=	O
op2_real	double
;	O
}	O
else	O
{	O
ATOI_VAL	O
(	O
op1	struct
,	O
child_val1	struct
)	O
;	O
ATOI_VAL	O
(	O
op2	struct
,	O
child_val2	struct
)	O
;	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
op1	struct
!=	O
op2	struct
;	O
}	O
}	O
break	O
;	O
}	O
case	O
REC_SEX_OP_MAT	int
:	O
{	O
GET_CHILD_VAL	O
(	O
child_val1	struct
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct
,	O
1	int
)	O
;	O
if	O
(	O
(	O
child_val1	struct
.	O
type	enum
==	O
REC_SEX_VAL_STR	int
)	O
&&	O
(	O
child_val2	struct
.	O
type	enum
==	O
REC_SEX_VAL_STR	int
)	O
)	O
{	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_INT	int
;	O
if	O
(	O
rec_sex_parser_case_insensitive	function
(	O
sex	pointer
->	O
parser	pointer
)	O
)	O
{	O
res	bool
.	O
int_val	int
=	O
rec_match_insensitive	function
(	O
child_val1	struct
.	O
str_val	pointer
,	O
child_val2	struct
.	O
str_val	pointer
)	O
;	O
}	O
else	O
{	O
res	bool
.	O
int_val	int
=	O
rec_match	function
(	O
child_val1	struct
.	O
str_val	pointer
,	O
child_val2	struct
.	O
str_val	pointer
)	O
;	O
}	O
}	O
else	O
{	O
*	O
status	int
=	O
false	int
;	O
return	O
res	bool
;	O
}	O
break	O
;	O
}	O
case	O
REC_SEX_OP_BEFORE	int
:	O
{	O
struct	O
timespec	struct
op1	struct
;	O
struct	O
timespec	struct
op2	struct
;	O
struct	O
timespec	struct
diff	struct
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct
,	O
1	int
)	O
;	O
ATOTS_VAL	O
(	O
op1	struct
,	O
child_val1	struct
)	O
;	O
ATOTS_VAL	O
(	O
op2	struct
,	O
child_val2	struct
)	O
;	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
rec_timespec_subtract	function
(	O
&	O
diff	struct
,	O
&	O
op1	struct
,	O
&	O
op2	struct
)	O
;	O
break	O
;	O
}	O
case	O
REC_SEX_OP_AFTER	int
:	O
{	O
struct	O
timespec	struct
op1	struct
;	O
struct	O
timespec	struct
op2	struct
;	O
struct	O
timespec	struct
diff	struct
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct
,	O
1	int
)	O
;	O
ATOTS_VAL	O
(	O
op1	struct
,	O
child_val1	struct
)	O
;	O
ATOTS_VAL	O
(	O
op2	struct
,	O
child_val2	struct
)	O
;	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
(	O
!	O
rec_timespec_subtract	function
(	O
&	O
diff	struct
,	O
&	O
op1	struct
,	O
&	O
op2	struct
)	O
&&	O
(	O
(	O
diff	struct
.	O
tv_sec	long
!=	O
0	int
)	O
||	O
(	O
diff	struct
.	O
tv_nsec	long
!=	O
0	int
)	O
)	O
)	O
;	O
break	O
;	O
}	O
case	O
REC_SEX_OP_SAMETIME	int
:	O
{	O
struct	O
timespec	struct
op1	struct
;	O
struct	O
timespec	struct
op2	struct
;	O
struct	O
timespec	struct
diff	struct
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct
,	O
1	int
)	O
;	O
ATOTS_VAL	O
(	O
op1	struct
,	O
child_val1	struct
)	O
;	O
ATOTS_VAL	O
(	O
op2	struct
,	O
child_val2	struct
)	O
;	O
rec_timespec_subtract	function
(	O
&	O
diff	struct
,	O
&	O
op1	struct
,	O
&	O
op2	struct
)	O
;	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
(	O
(	O
diff	struct
.	O
tv_sec	long
==	O
0	int
)	O
&&	O
(	O
diff	struct
.	O
tv_nsec	long
==	O
0	int
)	O
)	O
;	O
break	O
;	O
}	O
case	O
REC_SEX_OP_IMPLIES	int
:	O
{	O
int	O
op1	struct
;	O
int	O
op2	struct
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct
,	O
1	int
)	O
;	O
ATOI_VAL	O
(	O
op1	struct
,	O
child_val1	struct
)	O
;	O
ATOI_VAL	O
(	O
op2	struct
,	O
child_val2	struct
)	O
;	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
!	O
op1	struct
||	O
(	O
op1	struct
&&	O
op2	struct
)	O
;	O
break	O
;	O
}	O
case	O
REC_SEX_OP_LT	int
:	O
case	O
REC_SEX_OP_LTE	int
:	O
{	O
int	O
op1	struct
;	O
int	O
op2	struct
;	O
double	O
op1_real	double
;	O
double	O
op2_real	double
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct
,	O
1	int
)	O
;	O
if	O
(	O
rec_sex_op_real_p	function
(	O
child_val1	struct
,	O
child_val2	struct
)	O
)	O
{	O
ATOD_VAL	O
(	O
op1_real	double
,	O
child_val1	struct
)	O
;	O
ATOD_VAL	O
(	O
op2_real	double
,	O
child_val2	struct
)	O
;	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_INT	int
;	O
if	O
(	O
rec_sex_ast_node_type	function
(	O
node	pointer
)	O
==	O
REC_SEX_OP_LT	int
)	O
{	O
res	bool
.	O
int_val	int
=	O
op1_real	double
<	O
op2_real	double
;	O
}	O
else	O
{	O
res	bool
.	O
int_val	int
=	O
op1_real	double
<=	O
op2_real	double
;	O
}	O
}	O
else	O
{	O
ATOI_VAL	O
(	O
op1	struct
,	O
child_val1	struct
)	O
;	O
ATOI_VAL	O
(	O
op2	struct
,	O
child_val2	struct
)	O
;	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_INT	int
;	O
if	O
(	O
rec_sex_ast_node_type	function
(	O
node	pointer
)	O
==	O
REC_SEX_OP_LT	int
)	O
{	O
res	bool
.	O
int_val	int
=	O
op1	struct
<	O
op2	struct
;	O
}	O
else	O
{	O
res	bool
.	O
int_val	int
=	O
op1	struct
<=	O
op2	struct
;	O
}	O
}	O
break	O
;	O
}	O
case	O
REC_SEX_OP_GT	int
:	O
case	O
REC_SEX_OP_GTE	int
:	O
{	O
int	O
op1	struct
;	O
int	O
op2	struct
;	O
double	O
op1_real	double
;	O
double	O
op2_real	double
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct
,	O
1	int
)	O
;	O
if	O
(	O
rec_sex_op_real_p	function
(	O
child_val1	struct
,	O
child_val2	struct
)	O
)	O
{	O
ATOD_VAL	O
(	O
op1_real	double
,	O
child_val1	struct
)	O
;	O
ATOD_VAL	O
(	O
op2_real	double
,	O
child_val2	struct
)	O
;	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_INT	int
;	O
if	O
(	O
rec_sex_ast_node_type	function
(	O
node	pointer
)	O
==	O
REC_SEX_OP_GT	int
)	O
{	O
res	bool
.	O
int_val	int
=	O
op1_real	double
>	O
op2_real	double
;	O
}	O
else	O
{	O
res	bool
.	O
int_val	int
=	O
op1_real	double
>=	O
op2_real	double
;	O
}	O
}	O
else	O
{	O
ATOI_VAL	O
(	O
op1	struct
,	O
child_val1	struct
)	O
;	O
ATOI_VAL	O
(	O
op2	struct
,	O
child_val2	struct
)	O
;	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_INT	int
;	O
if	O
(	O
rec_sex_ast_node_type	function
(	O
node	pointer
)	O
==	O
REC_SEX_OP_GT	int
)	O
{	O
res	bool
.	O
int_val	int
=	O
op1	struct
>	O
op2	struct
;	O
}	O
else	O
{	O
res	bool
.	O
int_val	int
=	O
op1	struct
>=	O
op2	struct
;	O
}	O
}	O
break	O
;	O
}	O
case	O
REC_SEX_OP_AND	int
:	O
{	O
int	O
op1	struct
;	O
int	O
op2	struct
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct
,	O
1	int
)	O
;	O
ATOI_VAL	O
(	O
op1	struct
,	O
child_val1	struct
)	O
;	O
ATOI_VAL	O
(	O
op2	struct
,	O
child_val2	struct
)	O
;	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
op1	struct
&&	O
op2	struct
;	O
break	O
;	O
}	O
case	O
REC_SEX_OP_OR	int
:	O
{	O
int	O
op1	struct
;	O
int	O
op2	struct
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct
,	O
1	int
)	O
;	O
ATOI_VAL	O
(	O
op1	struct
,	O
child_val1	struct
)	O
;	O
ATOI_VAL	O
(	O
op2	struct
,	O
child_val2	struct
)	O
;	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
op1	struct
||	O
op2	struct
;	O
break	O
;	O
}	O
case	O
REC_SEX_OP_CONCAT	int
:	O
{	O
size_t	long
str1_size	long
;	O
size_t	long
str2_size	long
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct
,	O
1	int
)	O
;	O
if	O
(	O
(	O
child_val1	struct
.	O
type	enum
==	O
REC_SEX_VAL_STR	int
)	O
&&	O
(	O
child_val2	struct
.	O
type	enum
==	O
REC_SEX_VAL_STR	int
)	O
)	O
{	O
str1_size	long
=	O
strlen	function
(	O
child_val1	struct
.	O
str_val	pointer
)	O
;	O
str2_size	long
=	O
strlen	function
(	O
child_val2	struct
.	O
str_val	pointer
)	O
;	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_STR	int
;	O
res	bool
.	O
str_val	pointer
=	O
malloc	function
(	O
str1_size	long
+	O
str2_size	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
res	bool
.	O
str_val	pointer
,	O
child_val1	struct
.	O
str_val	pointer
,	O
str1_size	long
)	O
;	O
memcpy	function
(	O
res	bool
.	O
str_val	pointer
+	O
str1_size	long
,	O
child_val2	struct
.	O
str_val	pointer
,	O
str2_size	long
)	O
;	O
res	bool
.	O
str_val	pointer
[	O
str1_size	long
+	O
str2_size	long
]	O
=	O
'\0'	O
;	O
}	O
else	O
{	O
*	O
status	int
=	O
false	int
;	O
return	O
res	bool
;	O
}	O
break	O
;	O
}	O
case	O
REC_SEX_OP_NOT	int
:	O
{	O
int	O
op	int
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct
,	O
0	int
)	O
;	O
ATOI_VAL	O
(	O
op	int
,	O
child_val1	struct
)	O
;	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
!	O
op	int
;	O
break	O
;	O
}	O
case	O
REC_SEX_OP_SHA	int
:	O
{	O
int	O
n	int
;	O
const	O
char	O
*	O
field_name	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
field_subname	pointer
=	O
NULL	O
;	O
rec_sex_ast_node_t	pointer
child	pointer
;	O
child	pointer
=	O
rec_sex_ast_node_child	function
(	O
node	pointer
,	O
0	int
)	O
;	O
if	O
(	O
rec_sex_ast_node_type	function
(	O
rec_sex_ast_node_child	function
(	O
node	pointer
,	O
0	int
)	O
)	O
!=	O
REC_SEX_NAME	int
)	O
{	O
*	O
status	int
=	O
false	int
;	O
return	O
res	bool
;	O
}	O
field_name	pointer
=	O
rec_sex_ast_node_name	function
(	O
child	pointer
)	O
;	O
field_subname	pointer
=	O
rec_sex_ast_node_subname	function
(	O
child	pointer
)	O
;	O
if	O
(	O
field_subname	pointer
)	O
{	O
char	O
*	O
effective_name	pointer
=	O
rec_concat_strings	function
(	O
field_name	pointer
,	O
"_"	pointer
,	O
field_subname	pointer
)	O
;	O
n	int
=	O
rec_record_get_num_fields_by_name	function
(	O
record	pointer
,	O
effective_name	pointer
)	O
;	O
free	function
(	O
effective_name	pointer
)	O
;	O
}	O
else	O
{	O
n	int
=	O
rec_record_get_num_fields_by_name	function
(	O
record	pointer
,	O
field_name	pointer
)	O
;	O
}	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
n	int
;	O
break	O
;	O
}	O
case	O
REC_SEX_OP_COND	int
:	O
{	O
int	O
op1	struct
;	O
GET_CHILD_VAL	O
(	O
child_val1	struct
,	O
0	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val2	struct
,	O
1	int
)	O
;	O
GET_CHILD_VAL	O
(	O
child_val3	struct
,	O
2	int
)	O
;	O
ATOI_VAL	O
(	O
op1	struct
,	O
child_val1	struct
)	O
;	O
if	O
(	O
op1	struct
)	O
{	O
res	bool
=	O
child_val2	struct
;	O
}	O
else	O
{	O
res	bool
=	O
child_val3	struct
;	O
}	O
break	O
;	O
}	O
case	O
REC_SEX_INT	int
:	O
{	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_INT	int
;	O
res	bool
.	O
int_val	int
=	O
rec_sex_ast_node_int	function
(	O
node	pointer
)	O
;	O
break	O
;	O
}	O
case	O
REC_SEX_REAL	int
:	O
{	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_REAL	int
;	O
res	bool
.	O
real_val	double
=	O
rec_sex_ast_node_real	function
(	O
node	pointer
)	O
;	O
break	O
;	O
}	O
case	O
REC_SEX_STR	int
:	O
{	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_STR	int
;	O
res	bool
.	O
str_val	pointer
=	O
rec_sex_ast_node_str	function
(	O
node	pointer
)	O
;	O
break	O
;	O
}	O
case	O
REC_SEX_NAME	int
:	O
{	O
rec_field_t	pointer
field	pointer
;	O
const	O
char	O
*	O
field_name	pointer
;	O
const	O
char	O
*	O
field_subname	pointer
;	O
int	O
index	function
;	O
bool	bool
tofix	bool
;	O
if	O
(	O
rec_sex_ast_node_fixed	function
(	O
node	pointer
)	O
)	O
{	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_STR	int
;	O
res	bool
.	O
str_val	pointer
=	O
rec_sex_ast_node_fixed_val	function
(	O
node	pointer
)	O
;	O
}	O
else	O
{	O
field_name	pointer
=	O
rec_sex_ast_node_name	function
(	O
node	pointer
)	O
;	O
field_subname	pointer
=	O
rec_sex_ast_node_subname	function
(	O
node	pointer
)	O
;	O
index	function
=	O
rec_sex_ast_node_index	function
(	O
node	pointer
)	O
;	O
tofix	bool
=	O
(	O
index	function
!=	O
-	O
1	int
)	O
;	O
if	O
(	O
index	function
==	O
-	O
1	int
)	O
{	O
index	function
=	O
0	int
;	O
}	O
{	O
if	O
(	O
field_subname	pointer
)	O
{	O
char	O
*	O
effective_field_name	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
char	O
)	O
*	O
(	O
strlen	function
(	O
field_name	pointer
)	O
+	O
strlen	function
(	O
field_subname	pointer
)	O
+	O
2	int
)	O
)	O
;	O
memcpy	function
(	O
effective_field_name	pointer
,	O
field_name	pointer
,	O
strlen	function
(	O
field_name	pointer
)	O
)	O
;	O
effective_field_name	pointer
[	O
strlen	function
(	O
field_name	pointer
)	O
]	O
=	O
'_'	O
;	O
memcpy	function
(	O
effective_field_name	pointer
+	O
strlen	function
(	O
field_name	pointer
)	O
+	O
1	int
,	O
field_subname	pointer
,	O
strlen	function
(	O
field_subname	pointer
)	O
+	O
1	int
)	O
;	O
field	pointer
=	O
rec_record_get_field_by_name	function
(	O
record	pointer
,	O
effective_field_name	pointer
,	O
index	function
)	O
;	O
}	O
else	O
{	O
field	pointer
=	O
rec_record_get_field_by_name	function
(	O
record	pointer
,	O
field_name	pointer
,	O
index	function
)	O
;	O
}	O
}	O
res	bool
.	O
type	enum
=	O
REC_SEX_VAL_STR	int
;	O
if	O
(	O
field	pointer
)	O
{	O
res	bool
.	O
str_val	pointer
=	O
strdup	function
(	O
rec_field_value	function
(	O
field	pointer
)	O
)	O
;	O
}	O
else	O
{	O
res	bool
.	O
str_val	pointer
=	O
""	pointer
;	O
}	O
if	O
(	O
tofix	bool
)	O
{	O
rec_sex_ast_node_fix	function
(	O
node	pointer
,	O
res	bool
.	O
str_val	pointer
)	O
;	O
}	O
}	O
break	O
;	O
}	O
}	O
return	O
res	bool
;	O
}	O
static	O
bool	bool
rec_sex_op_real_p	function
(	O
struct	O
rec_sex_val_s	struct
op1	struct
,	O
struct	O
rec_sex_val_s	struct
op2	struct
)	O
{	O
bool	bool
ret	bool
;	O
int	O
integer	int
;	O
double	O
real	double
;	O
ret	bool
=	O
true	int
;	O
if	O
(	O
(	O
op1	struct
.	O
type	enum
==	O
REC_SEX_VAL_INT	int
)	O
||	O
(	O
(	O
op1	struct
.	O
type	enum
==	O
REC_SEX_VAL_STR	int
)	O
&&	O
rec_atoi	function
(	O
op1	struct
.	O
str_val	pointer
,	O
&	O
integer	int
)	O
)	O
)	O
{	O
switch	O
(	O
op2	struct
.	O
type	enum
)	O
{	O
case	O
REC_SEX_VAL_INT	int
:	O
{	O
ret	bool
=	O
false	int
;	O
break	O
;	O
}	O
case	O
REC_SEX_VAL_REAL	int
:	O
{	O
ret	bool
=	O
true	int
;	O
break	O
;	O
}	O
case	O
REC_SEX_VAL_STR	int
:	O
{	O
ret	bool
=	O
(	O
rec_atod	function
(	O
op2	struct
.	O
str_val	pointer
,	O
&	O
real	double
)	O
&&	O
(	O
!	O
rec_atoi	function
(	O
op2	struct
.	O
str_val	pointer
,	O
&	O
integer	int
)	O
)	O
)	O
;	O
break	O
;	O
}	O
default	O
:	O
{	O
ret	bool
=	O
false	int
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
(	O
op1	struct
.	O
type	enum
==	O
REC_SEX_VAL_REAL	int
)	O
||	O
(	O
(	O
op1	struct
.	O
type	enum
==	O
REC_SEX_VAL_STR	int
)	O
&&	O
rec_atod	function
(	O
op1	struct
.	O
str_val	pointer
,	O
&	O
real	double
)	O
&&	O
(	O
!	O
rec_atoi	function
(	O
op1	struct
.	O
str_val	pointer
,	O
&	O
integer	int
)	O
)	O
)	O
)	O
{	O
switch	O
(	O
op2	struct
.	O
type	enum
)	O
{	O
case	O
REC_SEX_VAL_INT	int
:	O
{	O
ret	bool
=	O
true	int
;	O
break	O
;	O
}	O
case	O
REC_SEX_VAL_REAL	int
:	O
{	O
ret	bool
=	O
true	int
;	O
break	O
;	O
}	O
case	O
REC_SEX_VAL_STR	int
:	O
{	O
ret	bool
=	O
rec_atod	function
(	O
op2	struct
.	O
str_val	pointer
,	O
&	O
real	double
)	O
;	O
break	O
;	O
}	O
default	O
:	O
{	O
ret	bool
=	O
false	int
;	O
break	O
;	O
}	O
}	O
}	O
return	O
ret	bool
;	O
}	O