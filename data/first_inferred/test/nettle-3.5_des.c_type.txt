static	O
const	O
uint32_t	int
des_keymap	array
[	O
]	O
=	O
{	O
}	O
;	O
static	O
const	O
uint8_t	char
rotors	array
[	O
]	O
=	O
{	O
}	O
;	O
static	O
ENCRYPT	O
(	O
DesSmallFipsEncrypt	function
,	O
TEMPSMALL	O
,	O
LOADFIPS	O
,	O
KEYMAPSMALL	O
,	O
SAVEFIPS	O
)	O
static	O
DECRYPT	O
(	O
DesSmallFipsDecrypt	function
,	O
TEMPSMALL	O
,	O
LOADFIPS	O
,	O
KEYMAPSMALL	O
,	O
SAVEFIPS	O
)	O
static	O
const	O
unsigned	O
parity_16	array
[	O
16	int
]	O
=	O
{	O
0	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
0	int
}	O
;	O
int	O
des_check_parity	O
(	O
size_t	long
length	long
,	O
const	O
uint8_t	char
*	O
key	pointer
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
length	long
;	O
i	long
++	O
)	O
if	O
(	O
!	O
PARITY	O
(	O
key	pointer
[	O
i	long
]	O
)	O
)	O
return	O
0	int
;	O
return	O
1	int
;	O
}	O
void	O
des_fix_parity	O
(	O
size_t	long
length	long
,	O
uint8_t	char
*	O
dst	pointer
,	O
const	O
uint8_t	char
*	O
src	pointer
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
length	long
;	O
i	long
++	O
)	O
dst	pointer
[	O
i	long
]	O
=	O
src	pointer
[	O
i	long
]	O
^	O
PARITY	O
(	O
src	pointer
[	O
i	long
]	O
)	O
^	O
1	int
;	O
}	O
static	O
int	O
des_weak_p	function
(	O
const	O
uint8_t	char
*	O
key	pointer
)	O
{	O
static	O
const	O
unsigned	O
char	O
asso_values	array
[	O
0x81	int
]	O
=	O
{	O
16	int
,	O
9	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
6	int
,	O
2	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
3	int
,	O
1	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
26	int
,	O
0	int
,	O
0	int
}	O
;	O
static	O
const	O
int8_t	char
weak_key_hash	array
[	O
26	int
]	O
[	O
4	int
]	O
=	O
{	O
{	O
0x7f	int
,	O
0x7f	int
,	O
0x7f	int
,	O
0x7f	int
}	O
,	O
{	O
0x7f	int
,	O
0x70	int
,	O
0x7f	int
,	O
0x78	int
}	O
,	O
{	O
0x7f	int
,	O
0x0f	int
,	O
0x7f	int
,	O
0x07	int
}	O
,	O
{	O
0x70	int
,	O
0x7f	int
,	O
0x78	int
,	O
0x7f	int
}	O
,	O
{	O
0x70	int
,	O
0x70	int
,	O
0x78	int
,	O
0x78	int
}	O
,	O
{	O
0x70	int
,	O
0x0f	int
,	O
0x78	int
,	O
0x07	int
}	O
,	O
{	O
0x0f	int
,	O
0x7f	int
,	O
0x07	int
,	O
0x7f	int
}	O
,	O
{	O
0x0f	int
,	O
0x70	int
,	O
0x07	int
,	O
0x78	int
}	O
,	O
{	O
0x0f	int
,	O
0x0f	int
,	O
0x07	int
,	O
0x07	int
}	O
,	O
{	O
0x7f	int
,	O
0x00	int
,	O
0x7f	int
,	O
0x00	int
}	O
,	O
{	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
}	O
,	O
{	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
}	O
,	O
{	O
0x70	int
,	O
0x00	int
,	O
0x78	int
,	O
0x00	int
}	O
,	O
{	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
}	O
,	O
{	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
}	O
,	O
{	O
0x0f	int
,	O
0x00	int
,	O
0x07	int
,	O
0x00	int
}	O
,	O
{	O
0x00	int
,	O
0x7f	int
,	O
0x00	int
,	O
0x7f	int
}	O
,	O
{	O
0x00	int
,	O
0x70	int
,	O
0x00	int
,	O
0x78	int
}	O
,	O
{	O
0x00	int
,	O
0x0f	int
,	O
0x00	int
,	O
0x07	int
}	O
,	O
{	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
}	O
,	O
{	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
}	O
,	O
{	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
}	O
,	O
{	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
}	O
,	O
{	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
}	O
,	O
{	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
}	O
,	O
{	O
0x00	int
,	O
0x00	int
,	O
0x00	int
,	O
0x00	int
}	O
}	O
;	O
int8_t	char
k0	char
=	O
key	pointer
[	O
0	int
]	O
>>	O
1	int
;	O
int8_t	char
k1	char
=	O
key	pointer
[	O
1	int
]	O
>>	O
1	int
;	O
unsigned	O
hash	int
=	O
asso_values	array
[	O
k1	char
+	O
1	int
]	O
+	O
asso_values	array
[	O
k0	char
]	O
;	O
const	O
int8_t	char
*	O
candidate	pointer
;	O
if	O
(	O
hash	int
>	O
25	int
)	O
return	O
0	int
;	O
candidate	pointer
=	O
weak_key_hash	array
[	O
hash	int
]	O
;	O
if	O
(	O
k0	char
!=	O
candidate	pointer
[	O
0	int
]	O
||	O
k1	char
!=	O
candidate	pointer
[	O
1	int
]	O
)	O
return	O
0	int
;	O
if	O
(	O
(	O
key	pointer
[	O
2	int
]	O
>>	O
1	int
)	O
!=	O
k0	char
||	O
(	O
key	pointer
[	O
3	int
]	O
>>	O
1	int
)	O
!=	O
k1	char
)	O
return	O
0	int
;	O
k0	char
=	O
key	pointer
[	O
4	int
]	O
>>	O
1	int
;	O
k1	char
=	O
key	pointer
[	O
5	int
]	O
>>	O
1	int
;	O
if	O
(	O
k0	char
!=	O
candidate	pointer
[	O
2	int
]	O
||	O
k1	char
!=	O
candidate	pointer
[	O
3	int
]	O
)	O
return	O
0	int
;	O
if	O
(	O
(	O
key	pointer
[	O
6	int
]	O
>>	O
1	int
)	O
!=	O
k0	char
||	O
(	O
key	pointer
[	O
7	int
]	O
>>	O
1	int
)	O
!=	O
k1	char
)	O
return	O
0	int
;	O
return	O
1	int
;	O
}	O
int	O
des_set_key	O
(	O
struct	O
des_ctx	struct
*	O
ctx	pointer
,	O
const	O
uint8_t	char
*	O
key	pointer
)	O
{	O
register	O
uint32_t	int
n	int
,	O
w	array
;	O
register	O
char	O
*	O
b0	pointer
,	O
*	O
b1	pointer
;	O
char	O
bits0	array
[	O
56	int
]	O
,	O
bits1	array
[	O
56	int
]	O
;	O
uint32_t	int
*	O
method	pointer
;	O
const	O
uint8_t	char
*	O
k	pointer
;	O
n	int
=	O
56	int
;	O
b0	pointer
=	O
bits0	array
;	O
b1	pointer
=	O
bits1	array
;	O
k	pointer
=	O
key	pointer
;	O
do	O
{	O
w	array
=	O
(	O
256	int
|	O
*	O
k	pointer
++	O
)	O
<<	O
2	int
;	O
do	O
{	O
--	O
n	int
;	O
b1	pointer
[	O
n	int
]	O
=	O
8	int
&	O
w	array
;	O
w	array
>>=	O
1	int
;	O
b0	pointer
[	O
n	int
]	O
=	O
4	int
&	O
w	array
;	O
}	O
while	O
(	O
w	array
>=	O
16	int
)	O
;	O
}	O
while	O
(	O
n	int
)	O
;	O
n	int
=	O
16	int
;	O
k	pointer
=	O
rotors	array
;	O
method	pointer
=	O
ctx	pointer
->	O
key	pointer
;	O
do	O
{	O
w	array
=	O
(	O
b1	pointer
[	O
k	pointer
[	O
0	int
]	O
]	O
|	O
b0	pointer
[	O
k	pointer
[	O
1	int
]	O
]	O
)	O
<<	O
4	int
;	O
w	array
|=	O
(	O
b1	pointer
[	O
k	pointer
[	O
2	int
]	O
]	O
|	O
b0	pointer
[	O
k	pointer
[	O
3	int
]	O
]	O
)	O
<<	O
2	int
;	O
w	array
|=	O
b1	pointer
[	O
k	pointer
[	O
4	int
]	O
]	O
|	O
b0	pointer
[	O
k	pointer
[	O
5	int
]	O
]	O
;	O
w	array
<<=	O
8	int
;	O
w	array
|=	O
(	O
b1	pointer
[	O
k	pointer
[	O
6	int
]	O
]	O
|	O
b0	pointer
[	O
k	pointer
[	O
7	int
]	O
]	O
)	O
<<	O
4	int
;	O
w	array
|=	O
(	O
b1	pointer
[	O
k	pointer
[	O
8	int
]	O
]	O
|	O
b0	pointer
[	O
k	pointer
[	O
9	int
]	O
]	O
)	O
<<	O
2	int
;	O
w	array
|=	O
b1	pointer
[	O
k	pointer
[	O
10	int
]	O
]	O
|	O
b0	pointer
[	O
k	pointer
[	O
11	int
]	O
]	O
;	O
w	array
<<=	O
8	int
;	O
w	array
|=	O
(	O
b1	pointer
[	O
k	pointer
[	O
12	int
]	O
]	O
|	O
b0	pointer
[	O
k	pointer
[	O
13	int
]	O
]	O
)	O
<<	O
4	int
;	O
w	array
|=	O
(	O
b1	pointer
[	O
k	pointer
[	O
14	int
]	O
]	O
|	O
b0	pointer
[	O
k	pointer
[	O
15	int
]	O
]	O
)	O
<<	O
2	int
;	O
w	array
|=	O
b1	pointer
[	O
k	pointer
[	O
16	int
]	O
]	O
|	O
b0	pointer
[	O
k	pointer
[	O
17	int
]	O
]	O
;	O
w	array
<<=	O
8	int
;	O
w	array
|=	O
(	O
b1	pointer
[	O
k	pointer
[	O
18	int
]	O
]	O
|	O
b0	pointer
[	O
k	pointer
[	O
19	int
]	O
]	O
)	O
<<	O
4	int
;	O
w	array
|=	O
(	O
b1	pointer
[	O
k	pointer
[	O
20	int
]	O
]	O
|	O
b0	pointer
[	O
k	pointer
[	O
21	int
]	O
]	O
)	O
<<	O
2	int
;	O
w	array
|=	O
b1	pointer
[	O
k	pointer
[	O
22	int
]	O
]	O
|	O
b0	pointer
[	O
k	pointer
[	O
23	int
]	O
]	O
;	O
method	pointer
[	O
0	int
]	O
=	O
w	array
;	O
w	array
=	O
(	O
b1	pointer
[	O
k	pointer
[	O
0	int
+	O
24	int
]	O
]	O
|	O
b0	pointer
[	O
k	pointer
[	O
1	int
+	O
24	int
]	O
]	O
)	O
<<	O
4	int
;	O
w	array
|=	O
(	O
b1	pointer
[	O
k	pointer
[	O
2	int
+	O
24	int
]	O
]	O
|	O
b0	pointer
[	O
k	pointer
[	O
3	int
+	O
24	int
]	O
]	O
)	O
<<	O
2	int
;	O
w	array
|=	O
b1	pointer
[	O
k	pointer
[	O
4	int
+	O
24	int
]	O
]	O
|	O
b0	pointer
[	O
k	pointer
[	O
5	int
+	O
24	int
]	O
]	O
;	O
w	array
<<=	O
8	int
;	O
w	array
|=	O
(	O
b1	pointer
[	O
k	pointer
[	O
6	int
+	O
24	int
]	O
]	O
|	O
b0	pointer
[	O
k	pointer
[	O
7	int
+	O
24	int
]	O
]	O
)	O
<<	O
4	int
;	O
w	array
|=	O
(	O
b1	pointer
[	O
k	pointer
[	O
8	int
+	O
24	int
]	O
]	O
|	O
b0	pointer
[	O
k	pointer
[	O
9	int
+	O
24	int
]	O
]	O
)	O
<<	O
2	int
;	O
w	array
|=	O
b1	pointer
[	O
k	pointer
[	O
10	int
+	O
24	int
]	O
]	O
|	O
b0	pointer
[	O
k	pointer
[	O
11	int
+	O
24	int
]	O
]	O
;	O
w	array
<<=	O
8	int
;	O
w	array
|=	O
(	O
b1	pointer
[	O
k	pointer
[	O
12	int
+	O
24	int
]	O
]	O
|	O
b0	pointer
[	O
k	pointer
[	O
13	int
+	O
24	int
]	O
]	O
)	O
<<	O
4	int
;	O
w	array
|=	O
(	O
b1	pointer
[	O
k	pointer
[	O
14	int
+	O
24	int
]	O
]	O
|	O
b0	pointer
[	O
k	pointer
[	O
15	int
+	O
24	int
]	O
]	O
)	O
<<	O
2	int
;	O
w	array
|=	O
b1	pointer
[	O
k	pointer
[	O
16	int
+	O
24	int
]	O
]	O
|	O
b0	pointer
[	O
k	pointer
[	O
17	int
+	O
24	int
]	O
]	O
;	O
w	array
<<=	O
8	int
;	O
w	array
|=	O
(	O
b1	pointer
[	O
k	pointer
[	O
18	int
+	O
24	int
]	O
]	O
|	O
b0	pointer
[	O
k	pointer
[	O
19	int
+	O
24	int
]	O
]	O
)	O
<<	O
4	int
;	O
w	array
|=	O
(	O
b1	pointer
[	O
k	pointer
[	O
20	int
+	O
24	int
]	O
]	O
|	O
b0	pointer
[	O
k	pointer
[	O
21	int
+	O
24	int
]	O
]	O
)	O
<<	O
2	int
;	O
w	array
|=	O
b1	pointer
[	O
k	pointer
[	O
22	int
+	O
24	int
]	O
]	O
|	O
b0	pointer
[	O
k	pointer
[	O
23	int
+	O
24	int
]	O
]	O
;	O
ROR	O
(	O
w	array
,	O
4	int
,	O
28	int
)	O
;	O
method	pointer
[	O
1	int
]	O
=	O
w	array
;	O
k	pointer
+=	O
48	int
;	O
method	pointer
+=	O
2	int
;	O
}	O
while	O
(	O
--	O
n	int
)	O
;	O
return	O
!	O
des_weak_p	function
(	O
key	pointer
)	O
;	O
}	O
void	O
des_encrypt	O
(	O
const	O
struct	O
des_ctx	struct
*	O
ctx	pointer
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
dst	pointer
,	O
const	O
uint8_t	char
*	O
src	pointer
)	O
{	O
assert	O
(	O
!	O
(	O
length	long
%	O
DES_BLOCK_SIZE	int
)	O
)	O
;	O
while	O
(	O
length	long
)	O
{	O
DesSmallFipsEncrypt	function
(	O
dst	pointer
,	O
ctx	pointer
->	O
key	pointer
,	O
src	pointer
)	O
;	O
length	long
-=	O
DES_BLOCK_SIZE	int
;	O
src	pointer
+=	O
DES_BLOCK_SIZE	int
;	O
dst	pointer
+=	O
DES_BLOCK_SIZE	int
;	O
}	O
}	O
void	O
des_decrypt	O
(	O
const	O
struct	O
des_ctx	struct
*	O
ctx	pointer
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
dst	pointer
,	O
const	O
uint8_t	char
*	O
src	pointer
)	O
{	O
assert	O
(	O
!	O
(	O
length	long
%	O
DES_BLOCK_SIZE	int
)	O
)	O
;	O
while	O
(	O
length	long
)	O
{	O
DesSmallFipsDecrypt	function
(	O
dst	pointer
,	O
ctx	pointer
->	O
key	pointer
,	O
src	pointer
)	O
;	O
length	long
-=	O
DES_BLOCK_SIZE	int
;	O
src	pointer
+=	O
DES_BLOCK_SIZE	int
;	O
dst	pointer
+=	O
DES_BLOCK_SIZE	int
;	O
}	O
}	O