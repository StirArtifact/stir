int	O
vbuf__append_quoted1035	function
(	O
vbuf	struct
*	O
vb	pointer
,	O
const	O
byte	char
*	O
buf	pointer
,	O
int	O
len	int
)	O
{	O
char	O
qbuf	array
[	O
10	int
]	O
;	O
int	O
i	int
,	O
ch	int
;	O
while	O
(	O
len	int
)	O
{	O
qbuf	array
[	O
0	int
]	O
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len	int
;	O
i	int
++	O
)	O
{	O
ch	int
=	O
buf	pointer
[	O
i	int
]	O
;	O
if	O
(	O
ch	int
<=	O
' '	O
||	O
ch	int
>=	O
127	int
)	O
{	O
sprintf	function
(	O
qbuf	array
,	O
"\\%03o"	pointer
,	O
ch	int
)	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
!	O
ctype_domainunquoted	function
(	O
ch	int
)	O
)	O
{	O
sprintf	function
(	O
qbuf	array
,	O
"\\%c"	pointer
,	O
ch	int
)	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
!	O
adns__vbuf_append	function
(	O
vb	pointer
,	O
buf	pointer
,	O
i	int
)	O
||	O
!	O
adns__vbuf_append	function
(	O
vb	pointer
,	O
qbuf	array
,	O
strlen	function
(	O
qbuf	array
)	O
)	O
)	O
return	O
0	int
;	O
if	O
(	O
i	int
<	O
len	int
)	O
i	int
++	O
;	O
buf	pointer
+=	O
i	int
;	O
len	int
-=	O
i	int
;	O
}	O
return	O
1	int
;	O
}	O
void	O
adns__findlabel_start	function
(	O
findlabel_state	struct
*	O
fls	pointer
,	O
adns_state	pointer
ads	pointer
,	O
int	O
serv	int
,	O
adns_query	pointer
qu	pointer
,	O
const	O
byte	char
*	O
dgram	pointer
,	O
int	O
dglen	int
,	O
int	O
max	int
,	O
int	O
dmbegin	int
,	O
int	O
*	O
dmend_rlater	pointer
)	O
{	O
fls	pointer
->	O
ads	pointer
=	O
ads	pointer
;	O
fls	pointer
->	O
qu	pointer
=	O
qu	pointer
;	O
fls	pointer
->	O
serv	int
=	O
serv	int
;	O
fls	pointer
->	O
dgram	pointer
=	O
dgram	pointer
;	O
fls	pointer
->	O
dglen	int
=	O
dglen	int
;	O
fls	pointer
->	O
max	int
=	O
max	int
;	O
fls	pointer
->	O
cbyte	int
=	O
dmbegin	int
;	O
fls	pointer
->	O
namelen	int
=	O
0	int
;	O
fls	pointer
->	O
dmend_r	pointer
=	O
dmend_rlater	pointer
;	O
}	O
adns_status	enum
adns__findlabel_next	function
(	O
findlabel_state	struct
*	O
fls	pointer
,	O
int	O
*	O
lablen_r	pointer
,	O
int	O
*	O
labstart_r	pointer
)	O
{	O
int	O
lablen	int
,	O
jumpto	int
;	O
const	O
char	O
*	O
dgram	pointer
;	O
dgram	pointer
=	O
fls	pointer
->	O
dgram	pointer
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
fls	pointer
->	O
cbyte	int
>=	O
fls	pointer
->	O
dglen	int
)	O
goto	O
x_truncated	O
;	O
if	O
(	O
fls	pointer
->	O
cbyte	int
>=	O
fls	pointer
->	O
max	int
)	O
goto	O
x_badresponse	O
;	O
GET_B	O
(	O
fls	pointer
->	O
cbyte	int
,	O
lablen	int
)	O
;	O
if	O
(	O
!	O
(	O
lablen	int
&	O
0x0c0	int
)	O
)	O
break	O
;	O
if	O
(	O
(	O
lablen	int
&	O
0x0c0	int
)	O
!=	O
0x0c0	int
)	O
return	O
adns_s_unknownformat	int
;	O
if	O
(	O
fls	pointer
->	O
cbyte	int
>=	O
fls	pointer
->	O
dglen	int
)	O
goto	O
x_truncated	O
;	O
if	O
(	O
fls	pointer
->	O
cbyte	int
>=	O
fls	pointer
->	O
max	int
)	O
goto	O
x_badresponse	O
;	O
GET_B	O
(	O
fls	pointer
->	O
cbyte	int
,	O
jumpto	int
)	O
;	O
jumpto	int
|=	O
(	O
lablen	int
&	O
0x3f	int
)	O
<<	O
8	int
;	O
if	O
(	O
fls	pointer
->	O
dmend_r	pointer
)	O
*	O
(	O
fls	pointer
->	O
dmend_r	pointer
)	O
=	O
fls	pointer
->	O
cbyte	int
;	O
fls	pointer
->	O
cbyte	int
=	O
jumpto	int
;	O
fls	pointer
->	O
dmend_r	pointer
=	O
0	int
;	O
fls	pointer
->	O
max	int
=	O
fls	pointer
->	O
dglen	int
+	O
1	int
;	O
}	O
if	O
(	O
labstart_r	pointer
)	O
*	O
labstart_r	pointer
=	O
fls	pointer
->	O
cbyte	int
;	O
if	O
(	O
lablen	int
)	O
{	O
if	O
(	O
fls	pointer
->	O
namelen	int
)	O
fls	pointer
->	O
namelen	int
++	O
;	O
fls	pointer
->	O
namelen	int
+=	O
lablen	int
;	O
if	O
(	O
fls	pointer
->	O
namelen	int
>	O
DNS_MAXDOMAIN	int
)	O
return	O
adns_s_answerdomaintoolong	int
;	O
fls	pointer
->	O
cbyte	int
+=	O
lablen	int
;	O
if	O
(	O
fls	pointer
->	O
cbyte	int
>	O
fls	pointer
->	O
dglen	int
)	O
goto	O
x_truncated	O
;	O
if	O
(	O
fls	pointer
->	O
cbyte	int
>	O
fls	pointer
->	O
max	int
)	O
goto	O
x_badresponse	O
;	O
}	O
else	O
{	O
if	O
(	O
fls	pointer
->	O
dmend_r	pointer
)	O
*	O
(	O
fls	pointer
->	O
dmend_r	pointer
)	O
=	O
fls	pointer
->	O
cbyte	int
;	O
}	O
*	O
lablen_r	pointer
=	O
lablen	int
;	O
return	O
adns_s_ok	int
;	O
x_truncated	O
:	O
*	O
lablen_r	pointer
=	O
-	O
1	int
;	O
return	O
adns_s_ok	int
;	O
x_badresponse	O
:	O
adns__diag	function
(	O
fls	pointer
->	O
ads	pointer
,	O
fls	pointer
->	O
serv	int
,	O
fls	pointer
->	O
qu	pointer
,	O
"label in domain runs beyond end of domain"	pointer
)	O
;	O
return	O
adns_s_invalidresponse	int
;	O
}	O
adns_status	enum
adns__parse_domain	function
(	O
adns_state	pointer
ads	pointer
,	O
int	O
serv	int
,	O
adns_query	pointer
qu	pointer
,	O
vbuf	struct
*	O
vb	pointer
,	O
parsedomain_flags	enum
flags	enum
,	O
const	O
byte	char
*	O
dgram	pointer
,	O
int	O
dglen	int
,	O
int	O
*	O
cbyte_io	pointer
,	O
int	O
max	int
)	O
{	O
findlabel_state	struct
fls	pointer
;	O
adns__findlabel_start	function
(	O
&	O
fls	pointer
,	O
ads	pointer
,	O
serv	int
,	O
qu	pointer
,	O
dgram	pointer
,	O
dglen	int
,	O
max	int
,	O
*	O
cbyte_io	pointer
,	O
cbyte_io	pointer
)	O
;	O
vb	pointer
->	O
used	int
=	O
0	int
;	O
return	O
adns__parse_domain_more	function
(	O
&	O
fls	pointer
,	O
ads	pointer
,	O
qu	pointer
,	O
vb	pointer
,	O
flags	enum
,	O
dgram	pointer
)	O
;	O
}	O
adns_status	enum
adns__parse_domain_more	function
(	O
findlabel_state	struct
*	O
fls	pointer
,	O
adns_state	pointer
ads	pointer
,	O
adns_query	pointer
qu	pointer
,	O
vbuf	struct
*	O
vb	pointer
,	O
parsedomain_flags	enum
flags	enum
,	O
const	O
byte	char
*	O
dgram	pointer
)	O
{	O
int	O
lablen	int
,	O
labstart	int
,	O
i	int
,	O
ch	int
,	O
first	int
;	O
adns_status	enum
st	enum
;	O
first	int
=	O
1	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
st	enum
=	O
adns__findlabel_next	function
(	O
fls	pointer
,	O
&	O
lablen	int
,	O
&	O
labstart	int
)	O
;	O
if	O
(	O
st	enum
)	O
return	O
st	enum
;	O
if	O
(	O
lablen	int
<	O
0	int
)	O
{	O
vb	pointer
->	O
used	int
=	O
0	int
;	O
return	O
adns_s_ok	int
;	O
}	O
if	O
(	O
!	O
lablen	int
)	O
break	O
;	O
if	O
(	O
first	int
)	O
{	O
first	int
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
!	O
adns__vbuf_append	function
(	O
vb	pointer
,	O
"."	pointer
,	O
1	int
)	O
)	O
return	O
adns_s_nomemory	int
;	O
}	O
if	O
(	O
flags	enum
&	O
pdf_quoteok	int
)	O
{	O
if	O
(	O
!	O
vbuf__append_quoted1035	function
(	O
vb	pointer
,	O
dgram	pointer
+	O
labstart	int
,	O
lablen	int
)	O
)	O
return	O
adns_s_nomemory	int
;	O
}	O
else	O
{	O
ch	int
=	O
dgram	pointer
[	O
labstart	int
]	O
;	O
if	O
(	O
!	O
ctype_alpha	function
(	O
ch	int
)	O
&&	O
!	O
ctype_digit	function
(	O
ch	int
)	O
)	O
return	O
adns_s_answerdomaininvalid	int
;	O
for	O
(	O
i	int
=	O
labstart	int
+	O
1	int
;	O
i	int
<	O
labstart	int
+	O
lablen	int
;	O
i	int
++	O
)	O
{	O
ch	int
=	O
dgram	pointer
[	O
i	int
]	O
;	O
if	O
(	O
ch	int
!=	O
'-'	O
&&	O
!	O
ctype_alpha	function
(	O
ch	int
)	O
&&	O
!	O
ctype_digit	function
(	O
ch	int
)	O
)	O
return	O
adns_s_answerdomaininvalid	int
;	O
}	O
if	O
(	O
!	O
adns__vbuf_append	function
(	O
vb	pointer
,	O
dgram	pointer
+	O
labstart	int
,	O
lablen	int
)	O
)	O
return	O
adns_s_nomemory	int
;	O
}	O
}	O
if	O
(	O
!	O
adns__vbuf_append	function
(	O
vb	pointer
,	O
""	pointer
,	O
1	int
)	O
)	O
return	O
adns_s_nomemory	int
;	O
return	O
adns_s_ok	int
;	O
}	O
adns_status	enum
adns__findrr_anychk	function
(	O
adns_query	pointer
qu	pointer
,	O
int	O
serv	int
,	O
const	O
byte	char
*	O
dgram	pointer
,	O
int	O
dglen	int
,	O
int	O
*	O
cbyte_io	pointer
,	O
int	O
*	O
type_r	pointer
,	O
int	O
*	O
class_r	pointer
,	O
unsigned	O
long	O
*	O
ttl_r	pointer
,	O
int	O
*	O
rdlen_r	pointer
,	O
int	O
*	O
rdstart_r	pointer
,	O
const	O
byte	char
*	O
eo_dgram	pointer
,	O
int	O
eo_dglen	int
,	O
int	O
eo_cbyte	int
,	O
int	O
*	O
eo_matched_r	pointer
)	O
{	O
findlabel_state	struct
fls	pointer
,	O
eo_fls_buf	struct
;	O
findlabel_state	struct
*	O
eo_fls	pointer
;	O
int	O
cbyte	int
;	O
int	O
tmp	int
,	O
rdlen	int
;	O
unsigned	O
long	O
ttl	long
;	O
int	O
lablen	int
,	O
labstart	int
,	O
ch	int
;	O
int	O
eo_lablen	int
,	O
eo_labstart	int
,	O
eo_ch	int
;	O
adns_status	enum
st	enum
;	O
cbyte	int
=	O
*	O
cbyte_io	pointer
;	O
adns__findlabel_start	function
(	O
&	O
fls	pointer
,	O
qu	pointer
->	O
ads	pointer
,	O
serv	int
,	O
qu	pointer
,	O
dgram	pointer
,	O
dglen	int
,	O
dglen	int
,	O
cbyte	int
,	O
&	O
cbyte	int
)	O
;	O
if	O
(	O
eo_dgram	pointer
)	O
{	O
eo_fls	pointer
=	O
&	O
eo_fls_buf	struct
;	O
adns__findlabel_start	function
(	O
eo_fls	pointer
,	O
qu	pointer
->	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
eo_dgram	pointer
,	O
eo_dglen	int
,	O
eo_dglen	int
,	O
eo_cbyte	int
,	O
0	int
)	O
;	O
}	O
else	O
{	O
eo_fls	pointer
=	O
0	int
;	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
st	enum
=	O
adns__findlabel_next	function
(	O
&	O
fls	pointer
,	O
&	O
lablen	int
,	O
&	O
labstart	int
)	O
;	O
if	O
(	O
st	enum
)	O
return	O
st	enum
;	O
if	O
(	O
lablen	int
<	O
0	int
)	O
goto	O
x_truncated	O
;	O
if	O
(	O
eo_fls	pointer
)	O
{	O
st	enum
=	O
adns__findlabel_next	function
(	O
eo_fls	pointer
,	O
&	O
eo_lablen	int
,	O
&	O
eo_labstart	int
)	O
;	O
assert	O
(	O
!	O
st	enum
)	O
;	O
assert	O
(	O
eo_lablen	int
>=	O
0	int
)	O
;	O
if	O
(	O
lablen	int
!=	O
eo_lablen	int
)	O
eo_fls	pointer
=	O
0	int
;	O
while	O
(	O
eo_fls	pointer
&&	O
eo_lablen	int
--	O
>	O
0	int
)	O
{	O
ch	int
=	O
dgram	pointer
[	O
labstart	int
++	O
]	O
;	O
if	O
(	O
ctype_alpha	function
(	O
ch	int
)	O
)	O
ch	int
&=	O
~	O
32	int
;	O
eo_ch	int
=	O
eo_dgram	pointer
[	O
eo_labstart	int
++	O
]	O
;	O
if	O
(	O
ctype_alpha	function
(	O
eo_ch	int
)	O
)	O
eo_ch	int
&=	O
~	O
32	int
;	O
if	O
(	O
ch	int
!=	O
eo_ch	int
)	O
eo_fls	pointer
=	O
0	int
;	O
}	O
}	O
if	O
(	O
!	O
lablen	int
)	O
break	O
;	O
}	O
if	O
(	O
eo_matched_r	pointer
)	O
*	O
eo_matched_r	pointer
=	O
!	O
!	O
eo_fls	pointer
;	O
if	O
(	O
cbyte	int
+	O
10	int
>	O
dglen	int
)	O
goto	O
x_truncated	O
;	O
GET_W	O
(	O
cbyte	int
,	O
tmp	int
)	O
;	O
*	O
type_r	pointer
=	O
tmp	int
;	O
GET_W	O
(	O
cbyte	int
,	O
tmp	int
)	O
;	O
*	O
class_r	pointer
=	O
tmp	int
;	O
GET_L	O
(	O
cbyte	int
,	O
ttl	long
)	O
;	O
if	O
(	O
ttl	long
>	O
MAXTTLBELIEVE	O
)	O
ttl	long
=	O
MAXTTLBELIEVE	O
;	O
*	O
ttl_r	pointer
=	O
ttl	long
;	O
GET_W	O
(	O
cbyte	int
,	O
rdlen	int
)	O
;	O
if	O
(	O
rdlen_r	pointer
)	O
*	O
rdlen_r	pointer
=	O
rdlen	int
;	O
if	O
(	O
rdstart_r	pointer
)	O
*	O
rdstart_r	pointer
=	O
cbyte	int
;	O
cbyte	int
+=	O
rdlen	int
;	O
if	O
(	O
cbyte	int
>	O
dglen	int
)	O
goto	O
x_truncated	O
;	O
*	O
cbyte_io	pointer
=	O
cbyte	int
;	O
return	O
adns_s_ok	int
;	O
x_truncated	O
:	O
*	O
type_r	pointer
=	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
adns_status	enum
adns__findrr	function
(	O
adns_query	pointer
qu	pointer
,	O
int	O
serv	int
,	O
const	O
byte	char
*	O
dgram	pointer
,	O
int	O
dglen	int
,	O
int	O
*	O
cbyte_io	pointer
,	O
int	O
*	O
type_r	pointer
,	O
int	O
*	O
class_r	pointer
,	O
unsigned	O
long	O
*	O
ttl_r	pointer
,	O
int	O
*	O
rdlen_r	pointer
,	O
int	O
*	O
rdstart_r	pointer
,	O
int	O
*	O
ownermatchedquery_r	pointer
)	O
{	O
if	O
(	O
!	O
ownermatchedquery_r	pointer
)	O
{	O
return	O
adns__findrr_anychk	function
(	O
qu	pointer
,	O
serv	int
,	O
dgram	pointer
,	O
dglen	int
,	O
cbyte_io	pointer
,	O
type_r	pointer
,	O
class_r	pointer
,	O
ttl_r	pointer
,	O
rdlen_r	pointer
,	O
rdstart_r	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
!	O
qu	pointer
->	O
cname_dgram	pointer
)	O
{	O
return	O
adns__findrr_anychk	function
(	O
qu	pointer
,	O
serv	int
,	O
dgram	pointer
,	O
dglen	int
,	O
cbyte_io	pointer
,	O
type_r	pointer
,	O
class_r	pointer
,	O
ttl_r	pointer
,	O
rdlen_r	pointer
,	O
rdstart_r	pointer
,	O
qu	pointer
->	O
query_dgram	pointer
,	O
qu	pointer
->	O
query_dglen	int
,	O
DNS_HDRSIZE	int
,	O
ownermatchedquery_r	pointer
)	O
;	O
}	O
else	O
{	O
return	O
adns__findrr_anychk	function
(	O
qu	pointer
,	O
serv	int
,	O
dgram	pointer
,	O
dglen	int
,	O
cbyte_io	pointer
,	O
type_r	pointer
,	O
class_r	pointer
,	O
ttl_r	pointer
,	O
rdlen_r	pointer
,	O
rdstart_r	pointer
,	O
qu	pointer
->	O
cname_dgram	pointer
,	O
qu	pointer
->	O
cname_dglen	int
,	O
qu	pointer
->	O
cname_begin	int
,	O
ownermatchedquery_r	pointer
)	O
;	O
}	O
}	O