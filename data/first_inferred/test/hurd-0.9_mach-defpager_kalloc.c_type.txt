static	O
void	O
init_hook	function
(	O
void	O
)	O
;	O
static	O
void	O
*	O
malloc_hook	function
(	O
size_t	long
size	long
,	O
const	O
void	O
*	O
caller	*
)	O
;	O
static	O
void	O
*	O
realloc_hook	function
(	O
void	O
*	O
ptr	*
,	O
size_t	long
size	long
,	O
const	O
void	O
*	O
caller	*
)	O
;	O
static	O
void	O
*	O
memalign_hook	function
(	O
size_t	long
alignment	long
,	O
size_t	long
size	long
,	O
const	O
void	O
*	O
caller	*
)	O
;	O
static	O
void	O
free_hook	function
(	O
void	O
*	O
ptr	*
,	O
const	O
void	O
*	O
caller	*
)	O
;	O
void	O
(	O
*	O
__MALLOC_HOOK_VOLATILE	*
__malloc_initialize_hook	*
)	O
(	O
void	O
)	O
=	O
init_hook	*
;	O
vm_size_t	O
kalloc_max	*
;	O
struct	O
free_list	struct
{	O
pthread_spinlock_t	*
lock	*
;	O
vm_offset_t	enum
head	enum
;	O
}	O
;	O
struct	O
free_list	struct
kfree_list	array
[	O
KLIST_MAX	int
]	O
;	O
pthread_spinlock_t	int
kget_space_lock	int
;	O
vm_offset_t	O
kalloc_next_space	int
=	O
0	int
;	O
vm_offset_t	int
kalloc_end_of_space	int
=	O
0	int
;	O
vm_size_t	O
kalloc_wasted_space	int
=	O
0	int
;	O
boolean_t	O
kalloc_initialized	int
=	O
FALSE	O
;	O
void	O
kalloc_init	function
(	O
void	O
)	O
{	O
int	O
i	int
;	O
if	O
(	O
vm_page_size	O
>	O
(	O
MINSIZE	int
<<	O
(	O
KLIST_MAX	int
-	O
1	int
)	O
)	O
)	O
kalloc_max	int
=	O
(	O
MINSIZE	int
<<	O
(	O
KLIST_MAX	int
-	O
1	int
)	O
)	O
;	O
else	O
kalloc_max	*
=	O
vm_page_size	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
KLIST_MAX	int
;	O
i	int
++	O
)	O
{	O
pthread_spin_init	function
(	O
&	O
kfree_list	*
[	O
i	int
]	O
.	O
lock	*
,	O
PTHREAD_PROCESS_PRIVATE	*
)	O
;	O
kfree_list	*
[	O
i	int
]	O
.	O
head	*
=	O
0	int
;	O
}	O
pthread_spin_init	function
(	O
&	O
kget_space_lock	*
,	O
PTHREAD_PROCESS_PRIVATE	*
)	O
;	O
kalloc_next_space	*
=	O
vm_page_size	O
;	O
kalloc_end_of_space	O
=	O
vm_page_size	O
;	O
}	O
vm_offset_t	O
kget_space	function
(	O
vm_offset_t	O
size	int
)	O
{	O
vm_size_t	O
space_to_add	int
=	O
0	int
;	O
vm_offset_t	int
new_space	int
=	O
0	int
;	O
vm_offset_t	O
addr	int
;	O
pthread_spin_lock	function
(	O
&	O
kget_space_lock	int
)	O
;	O
while	O
(	O
kalloc_next_space	int
+	O
size	int
>	O
kalloc_end_of_space	int
)	O
{	O
space_to_add	*
=	O
round_page	function
(	O
size	int
)	O
;	O
if	O
(	O
new_space	int
==	O
0	int
)	O
{	O
pthread_spin_unlock	function
(	O
&	O
kget_space_lock	int
)	O
;	O
new_space	*
=	O
kalloc_end_of_space	int
;	O
if	O
(	O
vm_map	function
(	O
mach_task_self	function
(	O
)	O
,	O
&	O
new_space	O
,	O
space_to_add	*
,	O
(	O
vm_offset_t	O
)	O
0	int
,	O
TRUE	O
,	O
MEMORY_OBJECT_NULL	O
,	O
(	O
vm_offset_t	int
)	O
0	int
,	O
FALSE	O
,	O
VM_PROT_DEFAULT	O
,	O
VM_PROT_ALL	O
,	O
VM_INHERIT_DEFAULT	int
)	O
!=	O
KERN_SUCCESS	O
)	O
return	O
0	int
;	O
wire_memory	function
(	O
new_space	*
,	O
space_to_add	O
,	O
VM_PROT_READ	O
|	O
VM_PROT_WRITE	O
)	O
;	O
pthread_spin_lock	function
(	O
&	O
kget_space_lock	int
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
new_space	int
!=	O
kalloc_end_of_space	int
)	O
{	O
kalloc_wasted_space	int
+=	O
kalloc_end_of_space	int
-	O
kalloc_next_space	int
;	O
kalloc_next_space	int
=	O
new_space	int
;	O
}	O
kalloc_end_of_space	int
=	O
new_space	int
+	O
space_to_add	int
;	O
new_space	int
=	O
0	int
;	O
}	O
addr	*
=	O
kalloc_next_space	int
;	O
kalloc_next_space	int
+=	O
size	int
;	O
pthread_spin_unlock	function
(	O
&	O
kget_space_lock	int
)	O
;	O
if	O
(	O
new_space	int
!=	O
0	int
)	O
(	O
void	O
)	O
vm_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
new_space	O
,	O
space_to_add	O
)	O
;	O
return	O
addr	*
;	O
}	O
void	O
*	O
kalloc	function
(	O
vm_size_t	O
size	int
)	O
{	O
vm_size_t	O
allocsize	*
;	O
vm_offset_t	O
addr	*
;	O
struct	O
free_list	struct
*	O
fl	*
;	O
if	O
(	O
!	O
kalloc_initialized	*
)	O
{	O
kalloc_init	function
(	O
)	O
;	O
kalloc_initialized	int
=	O
TRUE	O
;	O
}	O
allocsize	*
=	O
size	long
;	O
if	O
(	O
size	int
<=	O
kalloc_max	int
)	O
{	O
allocsize	O
=	O
MINSIZE	int
;	O
fl	double
=	O
kfree_list	int
;	O
while	O
(	O
allocsize	O
<	O
size	long
)	O
{	O
allocsize	O
<<=	O
1	int
;	O
fl	int
++	O
;	O
}	O
}	O
if	O
(	O
allocsize	O
<=	O
kalloc_max	int
)	O
{	O
pthread_spin_lock	function
(	O
&	O
fl	*
->	O
lock	*
)	O
;	O
if	O
(	O
(	O
addr	*
=	O
fl	*
->	O
head	*
)	O
!=	O
0	int
)	O
{	O
fl	*
->	O
head	*
=	O
*	O
(	O
vm_offset_t	O
*	O
)	O
addr	*
;	O
pthread_spin_unlock	function
(	O
&	O
fl	*
->	O
lock	*
)	O
;	O
}	O
else	O
{	O
pthread_spin_unlock	function
(	O
&	O
fl	*
->	O
lock	*
)	O
;	O
addr	*
=	O
kget_space	function
(	O
allocsize	O
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
vm_allocate	O
(	O
mach_task_self	function
(	O
)	O
,	O
&	O
addr	*
,	O
allocsize	O
,	O
TRUE	O
)	O
!=	O
KERN_SUCCESS	O
)	O
addr	O
=	O
0	int
;	O
}	O
return	O
(	O
void	O
*	O
)	O
addr	*
;	O
}	O
void	O
kfree	function
(	O
void	O
*	O
data	*
,	O
vm_size_t	O
size	int
)	O
{	O
vm_size_t	O
freesize	*
;	O
struct	O
free_list	struct
*	O
fl	*
;	O
freesize	long
=	O
size	long
;	O
if	O
(	O
size	int
<=	O
kalloc_max	int
)	O
{	O
freesize	int
=	O
MINSIZE	int
;	O
fl	double
=	O
kfree_list	int
;	O
while	O
(	O
freesize	int
<	O
size	long
)	O
{	O
freesize	int
<<=	O
1	int
;	O
fl	int
++	O
;	O
}	O
}	O
if	O
(	O
freesize	int
<=	O
kalloc_max	int
)	O
{	O
pthread_spin_lock	function
(	O
&	O
fl	*
->	O
lock	*
)	O
;	O
*	O
(	O
vm_offset_t	O
*	O
)	O
data	*
=	O
fl	*
->	O
head	*
;	O
fl	*
->	O
head	*
=	O
(	O
vm_offset_t	O
)	O
data	*
;	O
pthread_spin_unlock	function
(	O
&	O
fl	*
->	O
lock	*
)	O
;	O
}	O
else	O
{	O
(	O
void	O
)	O
vm_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
(	O
vm_offset_t	O
)	O
data	O
,	O
freesize	int
)	O
;	O
}	O
}	O
static	O
void	O
init_hook	function
(	O
void	O
)	O
{	O
__malloc_hook	int
=	O
malloc_hook	int
;	O
__realloc_hook	O
=	O
realloc_hook	*
;	O
__memalign_hook	*
=	O
memalign_hook	*
;	O
__free_hook	*
=	O
free_hook	*
;	O
}	O
static	O
void	O
*	O
malloc_hook	function
(	O
size_t	long
size	long
,	O
const	O
void	O
*	O
caller	*
)	O
{	O
return	O
(	O
void	O
*	O
)	O
kalloc	function
(	O
(	O
vm_size_t	O
)	O
size	*
)	O
;	O
}	O
static	O
void	O
*	O
realloc_hook	function
(	O
void	O
*	O
ptr	*
,	O
size_t	long
size	long
,	O
const	O
void	O
*	O
caller	*
)	O
{	O
panic	function
(	O
"realloc_hook not implemented"	*
)	O
;	O
}	O
static	O
void	O
*	O
memalign_hook	function
(	O
size_t	long
alignment	long
,	O
size_t	long
size	long
,	O
const	O
void	O
*	O
caller	*
)	O
{	O
if	O
(	O
alignment	long
>	O
vm_page_size	O
)	O
panic	function
(	O
"memalign_hook not implemented"	*
)	O
;	O
return	O
malloc_hook	function
(	O
size	*
,	O
caller	*
)	O
;	O
}	O
static	O
void	O
free_hook	function
(	O
void	O
*	O
ptr	*
,	O
const	O
void	O
*	O
caller	*
)	O
{	O
}	O
void	O
malloc_fork_prepare	function
(	O
)	O
{	O
}	O
void	O
malloc_fork_parent	function
(	O
)	O
{	O
}	O
void	O
malloc_fork_child	function
(	O
)	O
{	O
}	O