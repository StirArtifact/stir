gsl_rstat_workspace	struct
*	O
gsl_rstat_alloc	function
(	O
void	O
)	O
{	O
gsl_rstat_workspace	struct
*	O
w	*
;	O
w	*
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
gsl_rstat_workspace	struct
)	O
)	O
;	O
if	O
(	O
w	*
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workspace"	*
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
w	*
->	O
median_workspace_p	*
=	O
gsl_rstat_quantile_alloc	function
(	O
0.5	int
)	O
;	O
if	O
(	O
w	*
->	O
median_workspace_p	*
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for median workspace"	*
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
gsl_rstat_reset	function
(	O
w	*
)	O
;	O
return	O
w	*
;	O
}	O
void	O
gsl_rstat_free	function
(	O
gsl_rstat_workspace	struct
*	O
w	*
)	O
{	O
if	O
(	O
w	*
->	O
median_workspace_p	*
)	O
gsl_rstat_quantile_free	function
(	O
w	*
->	O
median_workspace_p	*
)	O
;	O
free	function
(	O
w	*
)	O
;	O
}	O
size_t	long
gsl_rstat_n	function
(	O
const	O
gsl_rstat_workspace	struct
*	O
w	*
)	O
{	O
return	O
w	*
->	O
n	int
;	O
}	O
int	O
gsl_rstat_add	function
(	O
const	O
double	O
x	double
,	O
gsl_rstat_workspace	struct
*	O
w	*
)	O
{	O
double	O
delta	double
=	O
x	double
-	O
w	*
->	O
mean	double
;	O
double	O
delta_n	int
,	O
delta_nsq	*
,	O
term1	*
,	O
n	int
;	O
if	O
(	O
w	*
->	O
n	int
==	O
0	int
)	O
{	O
w	*
->	O
min	double
=	O
x	double
;	O
w	*
->	O
max	double
=	O
x	double
;	O
}	O
else	O
{	O
if	O
(	O
x	double
<	O
w	*
->	O
min	double
)	O
w	*
->	O
min	double
=	O
x	double
;	O
if	O
(	O
x	double
>	O
w	*
->	O
max	double
)	O
w	*
->	O
max	double
=	O
x	double
;	O
}	O
n	int
=	O
(	O
double	O
)	O
++	O
(	O
w	*
->	O
n	int
)	O
;	O
delta_n	int
=	O
delta	int
/	O
n	int
;	O
delta_nsq	int
=	O
delta_n	struct
*	O
delta_n	int
;	O
term1	double
=	O
delta	double
*	O
delta_n	double
*	O
(	O
n	int
-	O
1.0	int
)	O
;	O
w	*
->	O
mean	double
+=	O
delta_n	double
;	O
w	*
->	O
M4	double
+=	O
term1	double
*	O
delta_nsq	*
*	O
(	O
n	int
*	O
n	int
-	O
3.0	int
*	O
n	int
+	O
3.0	int
)	O
+	O
6.0	int
*	O
delta_nsq	double
*	O
w	*
->	O
M2	double
-	O
4.0	int
*	O
delta_n	double
*	O
w	*
->	O
M3	*
;	O
w	*
->	O
M3	double
+=	O
term1	double
*	O
delta_n	double
*	O
(	O
n	int
-	O
2.0	int
)	O
-	O
3.0	int
*	O
delta_n	double
*	O
w	*
->	O
M2	double
;	O
w	*
->	O
M2	double
+=	O
term1	double
;	O
gsl_rstat_quantile_add	function
(	O
x	double
,	O
w	*
->	O
median_workspace_p	*
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
double	O
gsl_rstat_min	function
(	O
const	O
gsl_rstat_workspace	struct
*	O
w	*
)	O
{	O
return	O
w	*
->	O
min	double
;	O
}	O
double	O
gsl_rstat_max	function
(	O
const	O
gsl_rstat_workspace	struct
*	O
w	*
)	O
{	O
return	O
w	*
->	O
max	double
;	O
}	O
double	O
gsl_rstat_mean	function
(	O
const	O
gsl_rstat_workspace	struct
*	O
w	*
)	O
{	O
return	O
w	*
->	O
mean	double
;	O
}	O
double	O
gsl_rstat_variance	function
(	O
const	O
gsl_rstat_workspace	struct
*	O
w	*
)	O
{	O
if	O
(	O
w	*
->	O
n	int
>	O
1	int
)	O
{	O
double	O
n	int
=	O
(	O
double	O
)	O
w	*
->	O
n	int
;	O
return	O
(	O
w	*
->	O
M2	double
/	O
(	O
n	int
-	O
1.0	int
)	O
)	O
;	O
}	O
else	O
return	O
0.0	int
;	O
}	O
double	O
gsl_rstat_sd	function
(	O
const	O
gsl_rstat_workspace	struct
*	O
w	*
)	O
{	O
double	O
var	double
=	O
gsl_rstat_variance	function
(	O
w	*
)	O
;	O
return	O
(	O
sqrt	function
(	O
var	double
)	O
)	O
;	O
}	O
double	O
gsl_rstat_rms	function
(	O
const	O
gsl_rstat_workspace	struct
*	O
w	*
)	O
{	O
double	O
rms	double
=	O
0.0	int
;	O
if	O
(	O
w	*
->	O
n	int
>	O
0	int
)	O
{	O
double	O
mean	double
=	O
gsl_rstat_mean	function
(	O
w	*
)	O
;	O
double	O
sigma	double
=	O
gsl_rstat_sd	function
(	O
w	*
)	O
;	O
double	O
n	int
=	O
(	O
double	O
)	O
w	*
->	O
n	int
;	O
double	O
a	double
=	O
sqrt	function
(	O
(	O
n	int
-	O
1.0	int
)	O
/	O
n	int
)	O
;	O
rms	double
=	O
gsl_hypot	function
(	O
mean	double
,	O
a	double
*	O
sigma	double
)	O
;	O
}	O
return	O
rms	int
;	O
}	O
double	O
gsl_rstat_sd_mean	function
(	O
const	O
gsl_rstat_workspace	struct
*	O
w	*
)	O
{	O
if	O
(	O
w	*
->	O
n	int
>	O
0	int
)	O
{	O
double	O
sd	int
=	O
gsl_rstat_sd	function
(	O
w	double
)	O
;	O
return	O
(	O
sd	int
/	O
sqrt	function
(	O
(	O
double	O
)	O
w	array
->	O
n	int
)	O
)	O
;	O
}	O
else	O
return	O
0.0	int
;	O
}	O
double	O
gsl_rstat_median	function
(	O
gsl_rstat_workspace	struct
*	O
w	*
)	O
{	O
return	O
gsl_rstat_quantile_get	function
(	O
w	*
->	O
median_workspace_p	*
)	O
;	O
}	O
double	O
gsl_rstat_skew	function
(	O
const	O
gsl_rstat_workspace	struct
*	O
w	*
)	O
{	O
if	O
(	O
w	*
->	O
n	int
>	O
0	int
)	O
{	O
double	O
n	int
=	O
(	O
double	O
)	O
w	*
->	O
n	int
;	O
double	O
fac	double
=	O
pow	function
(	O
n	int
-	O
1.0	int
,	O
1.5	*
)	O
/	O
n	int
;	O
return	O
(	O
(	O
fac	double
*	O
w	*
->	O
M3	double
)	O
/	O
pow	function
(	O
w	*
->	O
M2	double
,	O
1.5	double
)	O
)	O
;	O
}	O
else	O
return	O
0.0	int
;	O
}	O
double	O
gsl_rstat_kurtosis	function
(	O
const	O
gsl_rstat_workspace	struct
*	O
w	*
)	O
{	O
if	O
(	O
w	*
->	O
n	int
>	O
0	int
)	O
{	O
double	O
n	int
=	O
(	O
double	O
)	O
w	*
->	O
n	int
;	O
double	O
fac	double
=	O
(	O
(	O
n	int
-	O
1.0	int
)	O
/	O
n	int
)	O
*	O
(	O
n	int
-	O
1.0	int
)	O
;	O
return	O
(	O
(	O
fac	double
*	O
w	*
->	O
M4	double
)	O
/	O
(	O
w	*
->	O
M2	double
*	O
w	*
->	O
M2	double
)	O
-	O
3.0	int
)	O
;	O
}	O
else	O
return	O
0.0	int
;	O
}	O
int	O
gsl_rstat_reset	function
(	O
gsl_rstat_workspace	struct
*	O
w	*
)	O
{	O
int	O
status	int
;	O
w	*
->	O
min	double
=	O
0.0	int
;	O
w	*
->	O
max	double
=	O
0.0	int
;	O
w	*
->	O
mean	double
=	O
0.0	int
;	O
w	*
->	O
M2	double
=	O
0.0	int
;	O
w	*
->	O
M3	double
=	O
0.0	int
;	O
w	*
->	O
M4	double
=	O
0.0	int
;	O
w	*
->	O
n	int
=	O
0	int
;	O
status	int
=	O
gsl_rstat_quantile_reset	function
(	O
w	*
->	O
median_workspace_p	*
)	O
;	O
return	O
status	int
;	O
}	O