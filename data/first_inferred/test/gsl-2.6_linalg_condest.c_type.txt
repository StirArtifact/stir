static	O
double	O
condest_tri_norm1	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
const	O
gsl_matrix	struct
*	O
A	pointer
)	O
;	O
static	O
int	O
condest_tri_rcond	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
const	O
gsl_matrix	struct
*	O
A	pointer
,	O
double	O
*	O
rcond	pointer
,	O
gsl_vector	struct
*	O
work	pointer
)	O
;	O
static	O
int	O
condest_same_sign	function
(	O
const	O
gsl_vector	struct
*	O
x	double
,	O
const	O
gsl_vector	struct
*	O
y	double
)	O
;	O
static	O
int	O
condest_invtriu	function
(	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
gsl_vector	struct
*	O
x	double
,	O
void	O
*	O
params	pointer
)	O
;	O
static	O
int	O
condest_invtril	function
(	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
gsl_vector	struct
*	O
x	double
,	O
void	O
*	O
params	pointer
)	O
;	O
int	O
gsl_linalg_tri_rcond	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
const	O
gsl_matrix	struct
*	O
A	pointer
,	O
double	O
*	O
rcond	pointer
,	O
gsl_vector	struct
*	O
work	pointer
)	O
{	O
return	O
condest_tri_rcond	function
(	O
Uplo	enum
,	O
A	pointer
,	O
rcond	pointer
,	O
work	pointer
)	O
;	O
}	O
int	O
gsl_linalg_invnorm1	function
(	O
const	O
size_t	long
N	int
,	O
int	O
(	O
*	O
Ainvx	pointer
)	O
(	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
gsl_vector	struct
*	O
x	double
,	O
void	O
*	O
params	pointer
)	O
,	O
void	O
*	O
params	pointer
,	O
double	O
*	O
Ainvnorm	pointer
,	O
gsl_vector	struct
*	O
work	pointer
)	O
{	O
if	O
(	O
work	pointer
->	O
size	long
!=	O
3	int
*	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"work vector must have length 3*N"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
const	O
size_t	long
maxit	long
=	O
5	int
;	O
gsl_vector_view	struct
x	double
=	O
gsl_vector_subvector	function
(	O
work	pointer
,	O
0	int
,	O
N	int
)	O
;	O
gsl_vector_view	struct
v	pointer
=	O
gsl_vector_subvector	function
(	O
work	pointer
,	O
N	int
,	O
N	int
)	O
;	O
gsl_vector_view	struct
xi	struct
=	O
gsl_vector_subvector	function
(	O
work	pointer
,	O
2	int
*	O
N	int
,	O
N	int
)	O
;	O
double	O
gamma	function
,	O
gamma_old	double
,	O
temp	double
;	O
size_t	long
i	long
,	O
k	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
gsl_vector_set	function
(	O
&	O
x	double
.	O
vector	struct
,	O
i	long
,	O
1.0	int
/	O
(	O
double	O
)	O
N	int
)	O
;	O
gsl_vector_memcpy	function
(	O
&	O
v	pointer
.	O
vector	struct
,	O
&	O
x	double
.	O
vector	struct
)	O
;	O
(	O
*	O
Ainvx	pointer
)	O
(	O
CblasNoTrans	int
,	O
&	O
v	pointer
.	O
vector	struct
,	O
params	pointer
)	O
;	O
gamma	function
=	O
gsl_blas_dasum	function
(	O
&	O
v	pointer
.	O
vector	struct
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
double	O
vi	double
=	O
gsl_vector_get	function
(	O
&	O
v	pointer
.	O
vector	struct
,	O
i	long
)	O
;	O
gsl_vector_set	function
(	O
&	O
xi	struct
.	O
vector	struct
,	O
i	long
,	O
GSL_SIGN	O
(	O
vi	double
)	O
)	O
;	O
}	O
gsl_vector_memcpy	function
(	O
&	O
x	double
.	O
vector	struct
,	O
&	O
xi	struct
.	O
vector	struct
)	O
;	O
(	O
*	O
Ainvx	pointer
)	O
(	O
CblasTrans	int
,	O
&	O
x	double
.	O
vector	struct
,	O
params	pointer
)	O
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
maxit	long
;	O
++	O
k	long
)	O
{	O
size_t	long
j	long
=	O
(	O
size_t	long
)	O
gsl_blas_idamax	function
(	O
&	O
x	double
.	O
vector	struct
)	O
;	O
gsl_vector_set_zero	function
(	O
&	O
v	pointer
.	O
vector	struct
)	O
;	O
gsl_vector_set	function
(	O
&	O
v	pointer
.	O
vector	struct
,	O
j	long
,	O
1.0	int
)	O
;	O
(	O
*	O
Ainvx	pointer
)	O
(	O
CblasNoTrans	int
,	O
&	O
v	pointer
.	O
vector	struct
,	O
params	pointer
)	O
;	O
gamma_old	double
=	O
gamma	function
;	O
gamma	function
=	O
gsl_blas_dasum	function
(	O
&	O
v	pointer
.	O
vector	struct
)	O
;	O
if	O
(	O
condest_same_sign	function
(	O
&	O
v	pointer
.	O
vector	struct
,	O
&	O
xi	struct
.	O
vector	struct
)	O
||	O
(	O
gamma	function
<	O
gamma_old	double
)	O
)	O
break	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
double	O
vi	double
=	O
gsl_vector_get	function
(	O
&	O
v	pointer
.	O
vector	struct
,	O
i	long
)	O
;	O
gsl_vector_set	function
(	O
&	O
xi	struct
.	O
vector	struct
,	O
i	long
,	O
GSL_SIGN	O
(	O
vi	double
)	O
)	O
;	O
}	O
gsl_vector_memcpy	function
(	O
&	O
x	double
.	O
vector	struct
,	O
&	O
xi	struct
.	O
vector	struct
)	O
;	O
(	O
*	O
Ainvx	pointer
)	O
(	O
CblasTrans	int
,	O
&	O
x	double
.	O
vector	struct
,	O
params	pointer
)	O
;	O
}	O
temp	double
=	O
1.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
double	O
term	double
=	O
1.0	int
+	O
(	O
double	O
)	O
i	long
/	O
(	O
N	int
-	O
1.0	int
)	O
;	O
gsl_vector_set	function
(	O
&	O
x	double
.	O
vector	struct
,	O
i	long
,	O
temp	double
*	O
term	double
)	O
;	O
temp	double
=	O
-	O
temp	double
;	O
}	O
(	O
*	O
Ainvx	pointer
)	O
(	O
CblasNoTrans	int
,	O
&	O
x	double
.	O
vector	struct
,	O
params	pointer
)	O
;	O
temp	double
=	O
2.0	int
*	O
gsl_blas_dasum	function
(	O
&	O
x	double
.	O
vector	struct
)	O
/	O
(	O
3.0	int
*	O
N	int
)	O
;	O
if	O
(	O
temp	double
>	O
gamma	function
)	O
{	O
gsl_vector_memcpy	function
(	O
&	O
v	pointer
.	O
vector	struct
,	O
&	O
x	double
.	O
vector	struct
)	O
;	O
gamma	function
=	O
temp	double
;	O
}	O
*	O
Ainvnorm	pointer
=	O
gamma	function
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
condest_tri_rcond	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
const	O
gsl_matrix	struct
*	O
A	pointer
,	O
double	O
*	O
rcond	pointer
,	O
gsl_vector	struct
*	O
work	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
work	pointer
->	O
size	long
!=	O
3	int
*	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"work vector must have length 3*N"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
double	O
Anorm	double
=	O
condest_tri_norm1	function
(	O
Uplo	enum
,	O
A	pointer
)	O
;	O
double	O
Ainvnorm	pointer
;	O
*	O
rcond	pointer
=	O
0.0	int
;	O
if	O
(	O
Anorm	double
==	O
0.0	int
)	O
return	O
GSL_SUCCESS	int
;	O
if	O
(	O
Uplo	enum
==	O
CblasUpper	int
)	O
status	int
=	O
gsl_linalg_invnorm1	function
(	O
N	int
,	O
condest_invtriu	function
,	O
(	O
void	O
*	O
)	O
A	pointer
,	O
&	O
Ainvnorm	pointer
,	O
work	pointer
)	O
;	O
else	O
status	int
=	O
gsl_linalg_invnorm1	function
(	O
N	int
,	O
condest_invtril	function
,	O
(	O
void	O
*	O
)	O
A	pointer
,	O
&	O
Ainvnorm	pointer
,	O
work	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
Ainvnorm	pointer
!=	O
0.0	int
)	O
*	O
rcond	pointer
=	O
(	O
1.0	int
/	O
Anorm	double
)	O
/	O
Ainvnorm	pointer
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
double	O
condest_tri_norm1	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
const	O
gsl_matrix	struct
*	O
A	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
double	O
max	double
=	O
0.0	int
;	O
size_t	long
i	long
,	O
j	long
;	O
if	O
(	O
Uplo	enum
==	O
CblasUpper	int
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
N	int
;	O
++	O
j	long
)	O
{	O
double	O
sum	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<=	O
j	long
;	O
++	O
i	long
)	O
{	O
double	O
Aij	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
i	long
,	O
j	long
)	O
;	O
sum	double
+=	O
fabs	function
(	O
Aij	double
)	O
;	O
}	O
max	double
=	O
GSL_MAX	O
(	O
max	double
,	O
sum	double
)	O
;	O
}	O
}	O
else	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
N	int
;	O
++	O
j	long
)	O
{	O
double	O
sum	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
j	long
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
double	O
Aij	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
i	long
,	O
j	long
)	O
;	O
sum	double
+=	O
fabs	function
(	O
Aij	double
)	O
;	O
}	O
max	double
=	O
GSL_MAX	O
(	O
max	double
,	O
sum	double
)	O
;	O
}	O
}	O
return	O
max	double
;	O
}	O
static	O
int	O
condest_same_sign	function
(	O
const	O
gsl_vector	struct
*	O
x	double
,	O
const	O
gsl_vector	struct
*	O
y	double
)	O
{	O
const	O
size_t	long
n	int
=	O
x	double
->	O
size	long
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
double	O
xi	struct
=	O
gsl_vector_get	function
(	O
x	double
,	O
i	long
)	O
;	O
double	O
yi	double
=	O
gsl_vector_get	function
(	O
y	double
,	O
i	long
)	O
;	O
if	O
(	O
GSL_SIGN	O
(	O
xi	struct
)	O
!=	O
GSL_SIGN	O
(	O
yi	double
)	O
)	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
condest_invtriu	function
(	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
gsl_vector	struct
*	O
x	double
,	O
void	O
*	O
params	pointer
)	O
{	O
gsl_matrix	struct
*	O
A	pointer
=	O
(	O
gsl_matrix	struct
*	O
)	O
params	pointer
;	O
return	O
gsl_blas_dtrsv	function
(	O
CblasUpper	int
,	O
TransA	enum
,	O
CblasNonUnit	int
,	O
A	pointer
,	O
x	double
)	O
;	O
}	O
static	O
int	O
condest_invtril	function
(	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
gsl_vector	struct
*	O
x	double
,	O
void	O
*	O
params	pointer
)	O
{	O
gsl_matrix	struct
*	O
A	pointer
=	O
(	O
gsl_matrix	struct
*	O
)	O
params	pointer
;	O
return	O
gsl_blas_dtrsv	function
(	O
CblasLower	int
,	O
TransA	enum
,	O
CblasNonUnit	int
,	O
A	pointer
,	O
x	double
)	O
;	O
}	O
int	O
gsl_linalg_tri_upper_rcond	function
(	O
const	O
gsl_matrix	struct
*	O
A	pointer
,	O
double	O
*	O
rcond	pointer
,	O
gsl_vector	struct
*	O
work	pointer
)	O
{	O
int	O
status	int
=	O
condest_tri_rcond	function
(	O
CblasUpper	int
,	O
A	pointer
,	O
rcond	pointer
,	O
work	pointer
)	O
;	O
return	O
status	int
;	O
}	O
int	O
gsl_linalg_tri_lower_rcond	function
(	O
const	O
gsl_matrix	struct
*	O
A	pointer
,	O
double	O
*	O
rcond	pointer
,	O
gsl_vector	struct
*	O
work	pointer
)	O
{	O
int	O
status	int
=	O
condest_tri_rcond	function
(	O
CblasLower	int
,	O
A	pointer
,	O
rcond	pointer
,	O
work	pointer
)	O
;	O
return	O
status	int
;	O
}	O