static	O
void	O
ran_dirichlet_small	function
(	O
const	O
gsl_rng	struct
*	O
r	*
,	O
const	O
size_t	long
K	long
,	O
const	O
double	O
alpha	enum
[	O
]	O
,	O
double	O
theta	array
[	O
]	O
)	O
;	O
void	O
gsl_ran_dirichlet	function
(	O
const	O
gsl_rng	struct
*	O
r	*
,	O
const	O
size_t	long
K	long
,	O
const	O
double	O
alpha	double
[	O
]	O
,	O
double	O
theta	array
[	O
]	O
)	O
{	O
size_t	long
i	long
;	O
double	O
norm	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
)	O
{	O
theta	array
[	O
i	long
]	O
=	O
gsl_ran_gamma	function
(	O
r	*
,	O
alpha	double
[	O
i	long
]	O
,	O
1.0	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
)	O
{	O
norm	*
+=	O
theta	array
[	O
i	long
]	O
;	O
}	O
if	O
(	O
norm	double
<	O
GSL_SQRT_DBL_MIN	int
)	O
{	O
ran_dirichlet_small	function
(	O
r	*
,	O
K	int
,	O
alpha	double
,	O
theta	double
)	O
;	O
return	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
K	int
;	O
i	long
++	O
)	O
{	O
theta	array
[	O
i	int
]	O
/=	O
norm	int
;	O
}	O
}	O
static	O
void	O
ran_dirichlet_small	function
(	O
const	O
gsl_rng	struct
*	O
r	*
,	O
const	O
size_t	long
K	long
,	O
const	O
double	O
alpha	double
[	O
]	O
,	O
double	O
theta	array
[	O
]	O
)	O
{	O
size_t	long
i	long
;	O
double	O
norm	double
=	O
0.0	int
,	O
umax	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
)	O
{	O
double	O
u	*
=	O
log	function
(	O
gsl_rng_uniform_pos	function
(	O
r	*
)	O
)	O
/	O
alpha	double
[	O
i	long
]	O
;	O
theta	array
[	O
i	int
]	O
=	O
u	double
;	O
if	O
(	O
u	*
>	O
umax	int
||	O
i	long
==	O
0	int
)	O
{	O
umax	*
=	O
u	*
;	O
}	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
)	O
{	O
theta	array
[	O
i	int
]	O
=	O
exp	function
(	O
theta	array
[	O
i	long
]	O
-	O
umax	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
)	O
{	O
theta	array
[	O
i	int
]	O
=	O
theta	array
[	O
i	long
]	O
*	O
gsl_ran_gamma	function
(	O
r	*
,	O
alpha	double
[	O
i	long
]	O
+	O
1.0	int
,	O
1.0	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
)	O
{	O
norm	*
+=	O
theta	array
[	O
i	long
]	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
)	O
{	O
theta	array
[	O
i	int
]	O
/=	O
norm	int
;	O
}	O
}	O
double	O
gsl_ran_dirichlet_pdf	function
(	O
const	O
size_t	long
K	long
,	O
const	O
double	O
alpha	double
[	O
]	O
,	O
const	O
double	O
theta	array
[	O
]	O
)	O
{	O
return	O
exp	function
(	O
gsl_ran_dirichlet_lnpdf	function
(	O
K	int
,	O
alpha	double
,	O
theta	double
)	O
)	O
;	O
}	O
double	O
gsl_ran_dirichlet_lnpdf	function
(	O
const	O
size_t	long
K	long
,	O
const	O
double	O
alpha	double
[	O
]	O
,	O
const	O
double	O
theta	array
[	O
]	O
)	O
{	O
size_t	long
i	long
;	O
double	O
log_p	double
=	O
0.0	int
;	O
double	O
sum_alpha	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
)	O
{	O
log_p	int
+=	O
(	O
alpha	double
[	O
i	long
]	O
-	O
1.0	int
)	O
*	O
log	function
(	O
theta	array
[	O
i	int
]	O
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
)	O
{	O
sum_alpha	int
+=	O
alpha	double
[	O
i	long
]	O
;	O
}	O
log_p	double
+=	O
gsl_sf_lngamma	function
(	O
sum_alpha	*
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
)	O
{	O
log_p	int
-=	O
gsl_sf_lngamma	function
(	O
alpha	double
[	O
i	long
]	O
)	O
;	O
}	O
return	O
log_p	double
;	O
}	O