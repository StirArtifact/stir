static	O
int	O
_env_msg_date	function
(	O
mu_envelope_t	pointer
envelope	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
len	long
,	O
size_t	long
*	O
pnwrite	pointer
)	O
{	O
struct	O
_mu_message_stream	struct
*	O
str	pointer
=	O
mu_envelope_get_owner	function
(	O
envelope	pointer
)	O
;	O
if	O
(	O
!	O
str	pointer
||	O
!	O
str	pointer
->	O
date	struct
)	O
return	O
EINVAL	int
;	O
if	O
(	O
buf	pointer
)	O
{	O
strncpy	function
(	O
buf	pointer
,	O
str	pointer
->	O
date	struct
,	O
len	long
)	O
;	O
buf	pointer
[	O
len	long
-	O
1	int
]	O
=	O
0	int
;	O
if	O
(	O
pnwrite	pointer
)	O
*	O
pnwrite	pointer
=	O
len	long
;	O
}	O
else	O
if	O
(	O
!	O
pnwrite	pointer
)	O
return	O
EINVAL	int
;	O
else	O
*	O
pnwrite	pointer
=	O
strlen	function
(	O
str	pointer
->	O
date	struct
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_env_msg_sender	function
(	O
mu_envelope_t	pointer
envelope	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
len	long
,	O
size_t	long
*	O
pnwrite	pointer
)	O
{	O
struct	O
_mu_message_stream	struct
*	O
str	pointer
=	O
mu_envelope_get_owner	function
(	O
envelope	pointer
)	O
;	O
if	O
(	O
!	O
str	pointer
||	O
!	O
str	pointer
->	O
from	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
buf	pointer
)	O
{	O
strncpy	function
(	O
buf	pointer
,	O
str	pointer
->	O
from	pointer
,	O
len	long
)	O
;	O
buf	pointer
[	O
len	long
-	O
1	int
]	O
=	O
0	int
;	O
if	O
(	O
pnwrite	pointer
)	O
*	O
pnwrite	pointer
=	O
len	long
;	O
}	O
else	O
if	O
(	O
!	O
pnwrite	pointer
)	O
return	O
EINVAL	int
;	O
else	O
*	O
pnwrite	pointer
=	O
strlen	function
(	O
str	pointer
->	O
from	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_message_read	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
char	O
*	O
optr	pointer
,	O
size_t	long
osize	long
,	O
size_t	long
*	O
nbytes	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
_mu_message_stream	struct
*	O
s	pointer
=	O
(	O
struct	O
_mu_message_stream	struct
*	O
)	O
stream	pointer
;	O
mu_off_t	long
offset	long
=	O
s	pointer
->	O
offset	long
+	O
s	pointer
->	O
envelope_length	long
;	O
size_t	long
rsize	long
;	O
if	O
(	O
offset	long
<	O
s	pointer
->	O
mark_offset	long
)	O
{	O
if	O
(	O
offset	long
+	O
osize	long
>=	O
s	pointer
->	O
mark_offset	long
)	O
osize	long
=	O
s	pointer
->	O
mark_offset	long
-	O
offset	long
;	O
}	O
else	O
offset	long
+=	O
s	pointer
->	O
mark_length	long
;	O
rc	int
=	O
mu_stream_seek	function
(	O
s	pointer
->	O
transport	pointer
,	O
offset	long
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
rc	int
=	O
mu_stream_read	function
(	O
s	pointer
->	O
transport	pointer
,	O
optr	pointer
,	O
osize	long
,	O
&	O
rsize	long
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
s	pointer
->	O
offset	long
+=	O
rsize	long
;	O
if	O
(	O
nbytes	pointer
)	O
*	O
nbytes	pointer
=	O
rsize	long
;	O
}	O
else	O
s	pointer
->	O
stream	pointer
.	O
last_err	int
=	O
rc	int
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_message_size	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
mu_off_t	long
*	O
psize	pointer
)	O
{	O
struct	O
_mu_message_stream	struct
*	O
s	pointer
=	O
(	O
struct	O
_mu_message_stream	struct
*	O
)	O
stream	pointer
;	O
int	O
rc	int
=	O
mu_stream_size	function
(	O
s	pointer
->	O
transport	pointer
,	O
psize	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
*	O
psize	pointer
-=	O
s	pointer
->	O
envelope_length	long
+	O
s	pointer
->	O
mark_length	long
;	O
return	O
rc	int
;	O
}	O
static	O
char	O
*	O
copy_trimmed_value	function
(	O
const	O
char	O
*	O
str	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
size_t	long
len	long
;	O
str	pointer
=	O
mu_str_skip_class	function
(	O
str	pointer
,	O
MU_CTYPE_SPACE	int
)	O
;	O
p	pointer
=	O
mu_str_skip_class_comp	function
(	O
str	pointer
,	O
MU_CTYPE_ENDLN	int
)	O
;	O
len	long
=	O
p	pointer
-	O
str	pointer
;	O
p	pointer
=	O
malloc	function
(	O
len	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
p	pointer
,	O
str	pointer
,	O
len	long
)	O
;	O
p	pointer
[	O
len	long
]	O
=	O
0	int
;	O
return	O
p	pointer
;	O
}	O
static	O
int	O
is_header_start	function
(	O
const	O
char	O
*	O
buf	pointer
)	O
{	O
for	O
(	O
;	O
*	O
buf	pointer
;	O
buf	pointer
++	O
)	O
{	O
if	O
(	O
mu_isalnum	O
(	O
*	O
buf	pointer
)	O
||	O
*	O
buf	pointer
==	O
'-'	O
||	O
*	O
buf	pointer
==	O
'_'	O
)	O
continue	O
;	O
if	O
(	O
*	O
buf	pointer
==	O
':'	O
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
is_header_cont	function
(	O
const	O
char	O
*	O
buf	pointer
)	O
{	O
return	O
mu_isblank	O
(	O
*	O
buf	pointer
)	O
;	O
}	O
static	O
int	O
_message_open	function
(	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
struct	O
_mu_message_stream	struct
*	O
str	pointer
=	O
(	O
struct	O
_mu_message_stream	struct
*	O
)	O
stream	pointer
;	O
char	O
*	O
from	pointer
=	O
NULL	O
;	O
char	O
*	O
env_from	pointer
=	O
NULL	O
;	O
char	O
*	O
env_date	pointer
=	O
NULL	O
;	O
int	O
rc	int
;	O
char	O
*	O
buffer	pointer
=	O
NULL	O
;	O
size_t	long
bufsize	long
=	O
0	int
;	O
size_t	long
offset	long
,	O
len	long
;	O
mu_off_t	long
body_start	long
,	O
body_end	long
;	O
mu_stream_t	pointer
transport	pointer
=	O
str	pointer
->	O
transport	pointer
;	O
int	O
has_headers	int
=	O
0	int
;	O
rc	int
=	O
mu_stream_seek	function
(	O
transport	pointer
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
offset	long
=	O
0	int
;	O
while	O
(	O
(	O
rc	int
=	O
mu_stream_getline	function
(	O
transport	pointer
,	O
&	O
buffer	pointer
,	O
&	O
bufsize	long
,	O
&	O
len	long
)	O
)	O
==	O
0	int
&&	O
len	long
>	O
0	int
)	O
{	O
if	O
(	O
offset	long
==	O
0	int
&&	O
memcmp	function
(	O
buffer	pointer
,	O
"From "	pointer
,	O
5	int
)	O
==	O
0	int
)	O
{	O
str	pointer
->	O
envelope_length	long
=	O
len	long
;	O
if	O
(	O
str	pointer
->	O
construct_envelope	int
)	O
{	O
char	O
*	O
s	pointer
,	O
*	O
p	pointer
;	O
str	pointer
->	O
envelope_string	pointer
=	O
mu_strdup	function
(	O
buffer	pointer
)	O
;	O
if	O
(	O
!	O
str	pointer
->	O
envelope_string	pointer
)	O
return	O
ENOMEM	int
;	O
str	pointer
->	O
envelope_string	pointer
[	O
len	long
-	O
1	int
]	O
=	O
0	int
;	O
s	pointer
=	O
str	pointer
->	O
envelope_string	pointer
+	O
5	int
;	O
p	pointer
=	O
strchr	function
(	O
s	pointer
,	O
' '	O
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
size_t	long
n	pointer
=	O
p	pointer
-	O
s	pointer
;	O
env_from	pointer
=	O
mu_alloc	function
(	O
n	pointer
+	O
1	int
)	O
;	O
if	O
(	O
!	O
env_from	pointer
)	O
return	O
ENOMEM	int
;	O
memcpy	function
(	O
env_from	pointer
,	O
s	pointer
,	O
n	pointer
)	O
;	O
env_from	pointer
[	O
n	pointer
]	O
=	O
0	int
;	O
env_date	pointer
=	O
mu_strdup	function
(	O
p	pointer
+	O
1	int
)	O
;	O
if	O
(	O
!	O
env_date	pointer
)	O
{	O
free	function
(	O
env_from	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
}	O
}	O
}	O
else	O
if	O
(	O
mu_mh_delim	function
(	O
buffer	pointer
)	O
)	O
{	O
str	pointer
->	O
mark_offset	long
=	O
offset	long
;	O
str	pointer
->	O
mark_length	long
=	O
len	long
-	O
1	int
;	O
break	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
is_header_start	function
(	O
buffer	pointer
)	O
)	O
{	O
if	O
(	O
has_headers	int
&&	O
is_header_cont	function
(	O
buffer	pointer
)	O
)	O
{	O
offset	long
+=	O
len	long
;	O
continue	O
;	O
}	O
return	O
MU_ERR_INVALID_EMAIL	O
;	O
}	O
has_headers	int
=	O
1	int
;	O
if	O
(	O
str	pointer
->	O
construct_envelope	int
&&	O
(	O
!	O
env_from	pointer
||	O
!	O
env_date	pointer
)	O
)	O
{	O
if	O
(	O
!	O
from	pointer
&&	O
mu_c_strncasecmp	function
(	O
buffer	pointer
,	O
MU_HEADER_FROM	pointer
,	O
sizeof	O
(	O
MU_HEADER_FROM	pointer
)	O
-	O
1	int
)	O
==	O
0	int
)	O
from	pointer
=	O
copy_trimmed_value	function
(	O
buffer	pointer
+	O
sizeof	O
(	O
MU_HEADER_FROM	pointer
)	O
)	O
;	O
else	O
if	O
(	O
!	O
env_from	pointer
&&	O
mu_c_strncasecmp	function
(	O
buffer	pointer
,	O
MU_HEADER_ENV_SENDER	pointer
,	O
sizeof	O
(	O
MU_HEADER_ENV_SENDER	pointer
)	O
-	O
1	int
)	O
==	O
0	int
)	O
env_from	pointer
=	O
copy_trimmed_value	function
(	O
buffer	pointer
+	O
sizeof	O
(	O
MU_HEADER_ENV_SENDER	pointer
)	O
)	O
;	O
else	O
if	O
(	O
!	O
env_date	pointer
&&	O
mu_c_strncasecmp	function
(	O
buffer	pointer
,	O
MU_HEADER_ENV_DATE	pointer
,	O
sizeof	O
(	O
MU_HEADER_ENV_DATE	pointer
)	O
-	O
1	int
)	O
==	O
0	int
)	O
env_date	pointer
=	O
copy_trimmed_value	function
(	O
buffer	pointer
+	O
sizeof	O
(	O
MU_HEADER_ENV_DATE	pointer
)	O
)	O
;	O
}	O
}	O
offset	long
+=	O
len	long
;	O
}	O
free	function
(	O
buffer	pointer
)	O
;	O
rc	int
=	O
mu_stream_seek	function
(	O
transport	pointer
,	O
0	int
,	O
MU_SEEK_CUR	int
,	O
&	O
body_start	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_stream_size	function
(	O
transport	pointer
,	O
&	O
body_end	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
str	pointer
->	O
construct_envelope	int
)	O
{	O
if	O
(	O
!	O
env_from	pointer
)	O
{	O
if	O
(	O
from	pointer
)	O
{	O
mu_address_t	pointer
addr	pointer
;	O
mu_address_create	function
(	O
&	O
addr	pointer
,	O
from	pointer
)	O
;	O
if	O
(	O
addr	pointer
)	O
{	O
mu_address_aget_email	function
(	O
addr	pointer
,	O
1	int
,	O
&	O
env_from	pointer
)	O
;	O
mu_address_destroy	function
(	O
&	O
addr	pointer
)	O
;	O
}	O
}	O
if	O
(	O
!	O
env_from	pointer
)	O
env_from	pointer
=	O
mu_get_user_email	function
(	O
NULL	O
)	O
;	O
}	O
free	function
(	O
from	pointer
)	O
;	O
if	O
(	O
!	O
env_date	pointer
)	O
{	O
struct	O
tm	struct
*	O
tm	struct
;	O
time_t	long
t	long
;	O
char	O
date	struct
[	O
MU_DATETIME_FROM_LENGTH	int
+	O
1	int
]	O
;	O
time	struct
(	O
&	O
t	long
)	O
;	O
tm	struct
=	O
gmtime	function
(	O
&	O
t	long
)	O
;	O
mu_strftime	function
(	O
date	struct
,	O
sizeof	O
(	O
date	struct
)	O
,	O
MU_DATETIME_FROM	pointer
,	O
tm	struct
)	O
;	O
env_date	pointer
=	O
strdup	function
(	O
date	struct
)	O
;	O
if	O
(	O
!	O
env_date	pointer
)	O
return	O
ENOMEM	int
;	O
}	O
str	pointer
->	O
from	pointer
=	O
env_from	pointer
;	O
str	pointer
->	O
date	struct
=	O
env_date	pointer
;	O
}	O
str	pointer
->	O
body_start	long
=	O
body_start	long
;	O
str	pointer
->	O
body_end	long
=	O
body_end	long
-	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_message_close	function
(	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
struct	O
_mu_message_stream	struct
*	O
s	pointer
=	O
(	O
struct	O
_mu_message_stream	struct
*	O
)	O
stream	pointer
;	O
return	O
s	pointer
->	O
stream	pointer
.	O
last_err	int
=	O
mu_stream_close	function
(	O
s	pointer
->	O
transport	pointer
)	O
;	O
}	O
static	O
void	O
_message_done	function
(	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
struct	O
_mu_message_stream	struct
*	O
s	pointer
=	O
(	O
struct	O
_mu_message_stream	struct
*	O
)	O
stream	pointer
;	O
free	function
(	O
s	pointer
->	O
envelope_string	pointer
)	O
;	O
free	function
(	O
s	pointer
->	O
date	struct
)	O
;	O
free	function
(	O
s	pointer
->	O
from	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
s	pointer
->	O
transport	pointer
)	O
;	O
}	O
static	O
int	O
_message_seek	function
(	O
struct	O
_mu_stream	struct
*	O
stream	pointer
,	O
mu_off_t	long
off	long
,	O
mu_off_t	long
*	O
presult	pointer
)	O
{	O
struct	O
_mu_message_stream	struct
*	O
s	pointer
=	O
(	O
struct	O
_mu_message_stream	struct
*	O
)	O
stream	pointer
;	O
mu_off_t	long
size	long
;	O
mu_stream_size	function
(	O
stream	pointer
,	O
&	O
size	long
)	O
;	O
if	O
(	O
off	long
<	O
0	int
||	O
off	long
>=	O
size	long
)	O
return	O
ESPIPE	int
;	O
s	pointer
->	O
offset	long
=	O
off	long
;	O
*	O
presult	pointer
=	O
off	long
;	O
return	O
0	int
;	O
}	O
const	O
char	O
*	O
_message_error_string	function
(	O
struct	O
_mu_stream	struct
*	O
stream	pointer
,	O
int	O
rc	int
)	O
{	O
struct	O
_mu_message_stream	struct
*	O
str	pointer
=	O
(	O
struct	O
_mu_message_stream	struct
*	O
)	O
stream	pointer
;	O
return	O
mu_stream_strerror	function
(	O
str	pointer
->	O
transport	pointer
,	O
rc	int
)	O
;	O
}	O
static	O
int	O
mu_message_stream_create	function
(	O
mu_stream_t	pointer
*	O
pstream	pointer
,	O
mu_stream_t	pointer
src	pointer
,	O
int	O
flags	int
,	O
int	O
construct_envelope	int
)	O
{	O
struct	O
_mu_message_stream	struct
*	O
s	pointer
;	O
int	O
sflag	int
;	O
int	O
rc	int
;	O
mu_stream_t	pointer
stream	pointer
;	O
mu_stream_get_flags	function
(	O
src	pointer
,	O
&	O
sflag	int
)	O
;	O
sflag	int
&=	O
MU_STREAM_SEEK	int
;	O
if	O
(	O
!	O
flags	int
)	O
flags	int
=	O
MU_STREAM_READ	int
;	O
if	O
(	O
flags	int
&	O
(	O
MU_STREAM_WRITE	int
|	O
MU_STREAM_CREAT	int
|	O
MU_STREAM_APPEND	int
)	O
)	O
return	O
EINVAL	int
;	O
s	pointer
=	O
(	O
struct	O
_mu_message_stream	struct
*	O
)	O
_mu_stream_create	function
(	O
sizeof	O
(	O
*	O
s	pointer
)	O
,	O
flags	int
|	O
sflag	int
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
return	O
ENOMEM	int
;	O
rc	int
=	O
mu_streamref_create	function
(	O
&	O
s	pointer
->	O
transport	pointer
,	O
src	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	function
(	O
s	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
s	pointer
->	O
construct_envelope	int
=	O
construct_envelope	int
;	O
s	pointer
->	O
stream	pointer
.	O
open	pointer
=	O
_message_open	function
;	O
s	pointer
->	O
stream	pointer
.	O
close	pointer
=	O
_message_close	function
;	O
s	pointer
->	O
stream	pointer
.	O
done	pointer
=	O
_message_done	function
;	O
s	pointer
->	O
stream	pointer
.	O
read	pointer
=	O
_message_read	function
;	O
s	pointer
->	O
stream	pointer
.	O
size	long
=	O
_message_size	function
;	O
s	pointer
->	O
stream	pointer
.	O
seek	pointer
=	O
_message_seek	function
;	O
s	pointer
->	O
stream	pointer
.	O
error_string	pointer
=	O
_message_error_string	function
;	O
stream	pointer
=	O
(	O
mu_stream_t	pointer
)	O
s	pointer
;	O
rc	int
=	O
mu_stream_open	function
(	O
stream	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_stream_destroy	function
(	O
&	O
stream	pointer
)	O
;	O
else	O
*	O
pstream	pointer
=	O
stream	pointer
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_body_obj_size	function
(	O
mu_body_t	pointer
body	pointer
,	O
size_t	long
*	O
size	long
)	O
{	O
mu_message_t	pointer
msg	pointer
=	O
mu_body_get_owner	function
(	O
body	pointer
)	O
;	O
struct	O
_mu_message_stream	struct
*	O
str	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
if	O
(	O
size	long
)	O
*	O
size	long
=	O
str	pointer
->	O
body_end	long
-	O
str	pointer
->	O
body_start	long
+	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_message_from_stream_with_envelope	function
(	O
mu_message_t	pointer
*	O
pmsg	pointer
,	O
mu_stream_t	pointer
instream	pointer
,	O
mu_envelope_t	pointer
env	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
;	O
mu_body_t	pointer
body	pointer
;	O
mu_stream_t	pointer
bstream	pointer
;	O
mu_stream_t	pointer
draftstream	pointer
;	O
int	O
rc	int
;	O
struct	O
_mu_message_stream	struct
*	O
sp	pointer
;	O
if	O
(	O
(	O
rc	int
=	O
mu_message_stream_create	function
(	O
&	O
draftstream	pointer
,	O
instream	pointer
,	O
0	int
,	O
!	O
env	pointer
)	O
)	O
)	O
return	O
rc	int
;	O
if	O
(	O
(	O
rc	int
=	O
mu_message_create	function
(	O
&	O
msg	pointer
,	O
draftstream	pointer
)	O
)	O
)	O
{	O
mu_stream_destroy	function
(	O
&	O
draftstream	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
mu_message_set_stream	function
(	O
msg	pointer
,	O
draftstream	pointer
,	O
draftstream	pointer
)	O
;	O
if	O
(	O
!	O
env	pointer
)	O
{	O
if	O
(	O
(	O
rc	int
=	O
mu_envelope_create	function
(	O
&	O
env	pointer
,	O
draftstream	pointer
)	O
)	O
)	O
{	O
mu_message_destroy	function
(	O
&	O
msg	pointer
,	O
draftstream	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
draftstream	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
mu_envelope_set_date	function
(	O
env	pointer
,	O
_env_msg_date	function
,	O
draftstream	pointer
)	O
;	O
mu_envelope_set_sender	function
(	O
env	pointer
,	O
_env_msg_sender	function
,	O
draftstream	pointer
)	O
;	O
}	O
mu_message_set_envelope	function
(	O
msg	pointer
,	O
env	pointer
,	O
draftstream	pointer
)	O
;	O
mu_body_create	function
(	O
&	O
body	pointer
,	O
msg	pointer
)	O
;	O
sp	pointer
=	O
(	O
struct	O
_mu_message_stream	struct
*	O
)	O
draftstream	pointer
;	O
rc	int
=	O
mu_streamref_create_abridged	function
(	O
&	O
bstream	pointer
,	O
instream	pointer
,	O
sp	pointer
->	O
body_start	long
,	O
sp	pointer
->	O
body_end	long
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_body_destroy	function
(	O
&	O
body	pointer
,	O
msg	pointer
)	O
;	O
mu_message_destroy	function
(	O
&	O
msg	pointer
,	O
draftstream	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
draftstream	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
mu_body_set_stream	function
(	O
body	pointer
,	O
bstream	pointer
,	O
msg	pointer
)	O
;	O
mu_body_set_size	function
(	O
body	pointer
,	O
_body_obj_size	function
,	O
msg	pointer
)	O
;	O
mu_message_set_body	function
(	O
msg	pointer
,	O
body	pointer
,	O
draftstream	pointer
)	O
;	O
*	O
pmsg	pointer
=	O
msg	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_stream_to_message	function
(	O
mu_stream_t	pointer
instream	pointer
,	O
mu_message_t	pointer
*	O
pmsg	pointer
)	O
{	O
return	O
mu_message_from_stream_with_envelope	function
(	O
pmsg	pointer
,	O
instream	pointer
,	O
NULL	O
)	O
;	O
}	O