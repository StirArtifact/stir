char	O
*	O
areadlink_with_size	function
(	O
char	O
const	O
*	O
file	*
,	O
size_t	long
size	long
)	O
{	O
size_t	long
symlink_max	long
=	O
SYMLINK_MAX	int
;	O
size_t	long
INITIAL_LIMIT_BOUND	long
=	O
8	int
*	O
1024	int
;	O
size_t	long
initial_limit	long
=	O
(	O
symlink_max	long
<	O
INITIAL_LIMIT_BOUND	int
?	O
symlink_max	int
+	O
1	int
:	O
INITIAL_LIMIT_BOUND	*
)	O
;	O
size_t	long
buf_size	long
=	O
size	long
<	O
initial_limit	int
?	O
size	long
+	O
1	int
:	O
initial_limit	int
;	O
while	O
(	O
1	int
)	O
{	O
ssize_t	long
r	long
;	O
size_t	long
link_length	long
;	O
char	O
*	O
buffer	*
=	O
malloc	function
(	O
buf_size	long
)	O
;	O
if	O
(	O
buffer	*
==	O
NULL	O
)	O
return	O
NULL	O
;	O
r	*
=	O
readlink	function
(	O
file	*
,	O
buffer	*
,	O
buf_size	long
)	O
;	O
link_length	int
=	O
r	int
;	O
if	O
(	O
r	long
<	O
0	int
&&	O
errno	O
!=	O
ERANGE	int
)	O
{	O
int	O
saved_errno	int
=	O
errno	O
;	O
free	function
(	O
buffer	*
)	O
;	O
errno	O
=	O
saved_errno	int
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
link_length	long
<	O
buf_size	long
)	O
{	O
buffer	*
[	O
link_length	int
]	O
=	O
0	int
;	O
return	O
buffer	*
;	O
}	O
free	function
(	O
buffer	*
)	O
;	O
if	O
(	O
buf_size	long
<=	O
MAXSIZE	long
/	O
2	int
)	O
buf_size	long
*=	O
2	int
;	O
else	O
if	O
(	O
buf_size	long
<	O
MAXSIZE	int
)	O
buf_size	long
=	O
MAXSIZE	int
;	O
else	O
{	O
errno	O
=	O
ENOMEM	int
;	O
return	O
NULL	O
;	O
}	O
}	O
}	O