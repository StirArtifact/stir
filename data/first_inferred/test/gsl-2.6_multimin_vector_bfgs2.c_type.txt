typedef	O
struct	O
{	O
int	O
iter	int
;	O
double	O
step	double
;	O
double	O
g0norm	double
;	O
double	O
pnorm	double
;	O
double	O
delta_f	double
;	O
double	O
fp0	double
;	O
gsl_vector	struct
*	O
x0	pointer
;	O
gsl_vector	struct
*	O
g0	pointer
;	O
gsl_vector	struct
*	O
p	int
;	O
gsl_vector	struct
*	O
dx0	pointer
;	O
gsl_vector	struct
*	O
dg0	pointer
;	O
gsl_vector	struct
*	O
x_alpha	pointer
;	O
gsl_vector	struct
*	O
g_alpha	pointer
;	O
wrapper_t	struct
wrap	struct
;	O
double	O
rho	double
;	O
double	O
sigma	double
;	O
double	O
tau1	double
;	O
double	O
tau2	double
;	O
double	O
tau3	double
;	O
int	O
order	enum
;	O
}	O
vector_bfgs2_state_t	struct
;	O
static	O
int	O
vector_bfgs2_alloc	function
(	O
void	O
*	O
vstate	pointer
,	O
size_t	long
n	int
)	O
{	O
vector_bfgs2_state_t	struct
*	O
state	pointer
=	O
(	O
vector_bfgs2_state_t	struct
*	O
)	O
vstate	pointer
;	O
state	pointer
->	O
p	int
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
state	pointer
->	O
p	int
==	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"failed to allocate space for p"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
x0	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
state	pointer
->	O
x0	pointer
==	O
0	int
)	O
{	O
gsl_vector_free	function
(	O
state	pointer
->	O
p	int
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for g0"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
g0	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
state	pointer
->	O
g0	pointer
==	O
0	int
)	O
{	O
gsl_vector_free	function
(	O
state	pointer
->	O
x0	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
p	int
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for g0"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
dx0	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
state	pointer
->	O
dx0	pointer
==	O
0	int
)	O
{	O
gsl_vector_free	function
(	O
state	pointer
->	O
g0	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
x0	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
p	int
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for g0"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
dg0	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
state	pointer
->	O
dg0	pointer
==	O
0	int
)	O
{	O
gsl_vector_free	function
(	O
state	pointer
->	O
dx0	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
g0	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
x0	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
p	int
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for g0"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
x_alpha	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
state	pointer
->	O
x_alpha	pointer
==	O
0	int
)	O
{	O
gsl_vector_free	function
(	O
state	pointer
->	O
dg0	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
dx0	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
g0	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
x0	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
p	int
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for g0"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
g_alpha	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
state	pointer
->	O
g_alpha	pointer
==	O
0	int
)	O
{	O
gsl_vector_free	function
(	O
state	pointer
->	O
x_alpha	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
dg0	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
dx0	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
g0	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
x0	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
p	int
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for g0"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
vector_bfgs2_set	function
(	O
void	O
*	O
vstate	pointer
,	O
gsl_multimin_function_fdf	struct
*	O
fdf	pointer
,	O
const	O
gsl_vector	struct
*	O
x	double
,	O
double	O
*	O
f	pointer
,	O
gsl_vector	struct
*	O
gradient	pointer
,	O
double	O
step_size	pointer
,	O
double	O
tol	double
)	O
{	O
vector_bfgs2_state_t	struct
*	O
state	pointer
=	O
(	O
vector_bfgs2_state_t	struct
*	O
)	O
vstate	pointer
;	O
state	pointer
->	O
iter	int
=	O
0	int
;	O
state	pointer
->	O
step	double
=	O
step_size	pointer
;	O
state	pointer
->	O
delta_f	double
=	O
0	int
;	O
GSL_MULTIMIN_FN_EVAL_F_DF	O
(	O
fdf	pointer
,	O
x	double
,	O
f	pointer
,	O
gradient	pointer
)	O
;	O
gsl_vector_memcpy	function
(	O
state	pointer
->	O
x0	pointer
,	O
x	double
)	O
;	O
gsl_vector_memcpy	function
(	O
state	pointer
->	O
g0	pointer
,	O
gradient	pointer
)	O
;	O
state	pointer
->	O
g0norm	double
=	O
gsl_blas_dnrm2	function
(	O
state	pointer
->	O
g0	pointer
)	O
;	O
gsl_vector_memcpy	function
(	O
state	pointer
->	O
p	int
,	O
gradient	pointer
)	O
;	O
gsl_blas_dscal	function
(	O
-	O
1	int
/	O
state	pointer
->	O
g0norm	double
,	O
state	pointer
->	O
p	int
)	O
;	O
state	pointer
->	O
pnorm	double
=	O
gsl_blas_dnrm2	function
(	O
state	pointer
->	O
p	int
)	O
;	O
state	pointer
->	O
fp0	double
=	O
-	O
state	pointer
->	O
g0norm	double
;	O
prepare_wrapper	function
(	O
&	O
state	pointer
->	O
wrap	struct
,	O
fdf	pointer
,	O
state	pointer
->	O
x0	pointer
,	O
*	O
f	pointer
,	O
state	pointer
->	O
g0	pointer
,	O
state	pointer
->	O
p	int
,	O
state	pointer
->	O
x_alpha	pointer
,	O
state	pointer
->	O
g_alpha	pointer
)	O
;	O
state	pointer
->	O
rho	double
=	O
0.01	int
;	O
state	pointer
->	O
sigma	double
=	O
tol	double
;	O
state	pointer
->	O
tau1	double
=	O
9	int
;	O
state	pointer
->	O
tau2	double
=	O
0.05	int
;	O
state	pointer
->	O
tau3	double
=	O
0.5	int
;	O
state	pointer
->	O
order	enum
=	O
3	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
void	O
vector_bfgs2_free	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
vector_bfgs2_state_t	struct
*	O
state	pointer
=	O
(	O
vector_bfgs2_state_t	struct
*	O
)	O
vstate	pointer
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
x_alpha	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
g_alpha	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
dg0	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
dx0	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
g0	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
x0	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
p	int
)	O
;	O
}	O
static	O
int	O
vector_bfgs2_restart	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
vector_bfgs2_state_t	struct
*	O
state	pointer
=	O
(	O
vector_bfgs2_state_t	struct
*	O
)	O
vstate	pointer
;	O
state	pointer
->	O
iter	int
=	O
0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
vector_bfgs2_iterate	function
(	O
void	O
*	O
vstate	pointer
,	O
gsl_multimin_function_fdf	struct
*	O
fdf	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
double	O
*	O
f	pointer
,	O
gsl_vector	struct
*	O
gradient	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
)	O
{	O
vector_bfgs2_state_t	struct
*	O
state	pointer
=	O
(	O
vector_bfgs2_state_t	struct
*	O
)	O
vstate	pointer
;	O
double	O
alpha	long double
=	O
0.0	int
,	O
alpha1	double
;	O
gsl_vector	struct
*	O
x0	pointer
=	O
state	pointer
->	O
x0	pointer
;	O
gsl_vector	struct
*	O
g0	pointer
=	O
state	pointer
->	O
g0	pointer
;	O
gsl_vector	struct
*	O
p	int
=	O
state	pointer
->	O
p	int
;	O
double	O
g0norm	double
=	O
state	pointer
->	O
g0norm	double
;	O
double	O
pnorm	double
=	O
state	pointer
->	O
pnorm	double
;	O
double	O
delta_f	double
=	O
state	pointer
->	O
delta_f	double
;	O
double	O
pg	double
,	O
dir	double
;	O
int	O
status	int
;	O
double	O
f0	double
=	O
*	O
f	pointer
;	O
if	O
(	O
pnorm	double
==	O
0.0	int
||	O
g0norm	double
==	O
0.0	int
||	O
state	pointer
->	O
fp0	double
==	O
0	int
)	O
{	O
gsl_vector_set_zero	function
(	O
dx	pointer
)	O
;	O
return	O
GSL_ENOPROG	int
;	O
}	O
if	O
(	O
delta_f	double
<	O
0	int
)	O
{	O
double	O
del	double
=	O
GSL_MAX_DBL	function
(	O
-	O
delta_f	double
,	O
10	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
f0	double
)	O
)	O
;	O
alpha1	double
=	O
GSL_MIN_DBL	function
(	O
1.0	int
,	O
2.0	int
*	O
del	double
/	O
(	O
-	O
state	pointer
->	O
fp0	double
)	O
)	O
;	O
}	O
else	O
{	O
alpha1	double
=	O
fabs	function
(	O
state	pointer
->	O
step	double
)	O
;	O
}	O
status	int
=	O
minimize	function
(	O
&	O
state	pointer
->	O
wrap	struct
.	O
fdf_linear	struct
,	O
state	pointer
->	O
rho	double
,	O
state	pointer
->	O
sigma	double
,	O
state	pointer
->	O
tau1	double
,	O
state	pointer
->	O
tau2	double
,	O
state	pointer
->	O
tau3	double
,	O
state	pointer
->	O
order	enum
,	O
alpha1	double
,	O
&	O
alpha	long double
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
status	int
;	O
}	O
update_position	function
(	O
&	O
(	O
state	pointer
->	O
wrap	struct
)	O
,	O
alpha	long double
,	O
x	double
,	O
f	pointer
,	O
gradient	pointer
)	O
;	O
state	pointer
->	O
delta_f	double
=	O
*	O
f	pointer
-	O
f0	double
;	O
{	O
gsl_vector	struct
*	O
dx0	pointer
=	O
state	pointer
->	O
dx0	pointer
;	O
gsl_vector	struct
*	O
dg0	pointer
=	O
state	pointer
->	O
dg0	pointer
;	O
double	O
dxg	double
,	O
dgg	double
,	O
dxdg	double
,	O
dgnorm	double
,	O
A	pointer
,	O
B	pointer
;	O
gsl_vector_memcpy	function
(	O
dx0	pointer
,	O
x	double
)	O
;	O
gsl_blas_daxpy	function
(	O
-	O
1.0	int
,	O
x0	pointer
,	O
dx0	pointer
)	O
;	O
gsl_vector_memcpy	function
(	O
dx	pointer
,	O
dx0	pointer
)	O
;	O
gsl_vector_memcpy	function
(	O
dg0	pointer
,	O
gradient	pointer
)	O
;	O
gsl_blas_daxpy	function
(	O
-	O
1.0	int
,	O
g0	pointer
,	O
dg0	pointer
)	O
;	O
gsl_blas_ddot	function
(	O
dx0	pointer
,	O
gradient	pointer
,	O
&	O
dxg	double
)	O
;	O
gsl_blas_ddot	function
(	O
dg0	pointer
,	O
gradient	pointer
,	O
&	O
dgg	double
)	O
;	O
gsl_blas_ddot	function
(	O
dx0	pointer
,	O
dg0	pointer
,	O
&	O
dxdg	double
)	O
;	O
dgnorm	double
=	O
gsl_blas_dnrm2	function
(	O
dg0	pointer
)	O
;	O
if	O
(	O
dxdg	double
!=	O
0	int
)	O
{	O
B	pointer
=	O
dxg	double
/	O
dxdg	double
;	O
A	pointer
=	O
-	O
(	O
1.0	int
+	O
dgnorm	double
*	O
dgnorm	double
/	O
dxdg	double
)	O
*	O
B	pointer
+	O
dgg	double
/	O
dxdg	double
;	O
}	O
else	O
{	O
B	pointer
=	O
0	int
;	O
A	pointer
=	O
0	int
;	O
}	O
gsl_vector_memcpy	function
(	O
p	int
,	O
gradient	pointer
)	O
;	O
gsl_blas_daxpy	function
(	O
-	O
A	pointer
,	O
dx0	pointer
,	O
p	int
)	O
;	O
gsl_blas_daxpy	function
(	O
-	O
B	pointer
,	O
dg0	pointer
,	O
p	int
)	O
;	O
}	O
gsl_vector_memcpy	function
(	O
g0	pointer
,	O
gradient	pointer
)	O
;	O
gsl_vector_memcpy	function
(	O
x0	pointer
,	O
x	double
)	O
;	O
state	pointer
->	O
g0norm	double
=	O
gsl_blas_dnrm2	function
(	O
g0	pointer
)	O
;	O
state	pointer
->	O
pnorm	double
=	O
gsl_blas_dnrm2	function
(	O
p	int
)	O
;	O
gsl_blas_ddot	function
(	O
p	int
,	O
gradient	pointer
,	O
&	O
pg	double
)	O
;	O
dir	double
=	O
(	O
pg	double
>=	O
0.0	int
)	O
?	O
-	O
1.0	int
:	O
+	O
1.0	int
;	O
gsl_blas_dscal	function
(	O
dir	double
/	O
state	pointer
->	O
pnorm	double
,	O
p	int
)	O
;	O
state	pointer
->	O
pnorm	double
=	O
gsl_blas_dnrm2	function
(	O
p	int
)	O
;	O
gsl_blas_ddot	function
(	O
p	int
,	O
g0	pointer
,	O
&	O
state	pointer
->	O
fp0	double
)	O
;	O
change_direction	function
(	O
&	O
state	pointer
->	O
wrap	struct
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
const	O
gsl_multimin_fdfminimizer_type	struct
vector_bfgs2_type	struct
=	O
{	O
"vector_bfgs2"	pointer
,	O
sizeof	O
(	O
vector_bfgs2_state_t	struct
)	O
,	O
&	O
vector_bfgs2_alloc	function
,	O
&	O
vector_bfgs2_set	function
,	O
&	O
vector_bfgs2_iterate	function
,	O
&	O
vector_bfgs2_restart	function
,	O
&	O
vector_bfgs2_free	function
}	O
;	O
const	O
gsl_multimin_fdfminimizer_type	struct
*	O
gsl_multimin_fdfminimizer_vector_bfgs2	pointer
=	O
&	O
vector_bfgs2_type	struct
;	O