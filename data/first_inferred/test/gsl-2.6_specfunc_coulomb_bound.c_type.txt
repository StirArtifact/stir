static	O
int	O
R_norm	function
(	O
const	O
int	O
n	int
,	O
const	O
int	O
l	int
,	O
const	O
double	O
Z	double
,	O
gsl_sf_result	struct
*	O
result	*
)	O
{	O
double	O
A	*
=	O
2.0	int
*	O
Z	double
/	O
n	int
;	O
double	O
pre	double
=	O
sqrt	function
(	O
A	double
*	O
A	double
*	O
A	double
/	O
(	O
2.0	int
*	O
n	int
)	O
)	O
;	O
gsl_sf_result	struct
ln_a	struct
,	O
ln_b	struct
;	O
gsl_sf_result	struct
ex	*
;	O
int	O
stat_a	int
=	O
gsl_sf_lnfact_e	function
(	O
n	int
+	O
l	int
,	O
&	O
ln_a	int
)	O
;	O
int	O
stat_b	int
=	O
gsl_sf_lnfact_e	function
(	O
n	int
-	O
l	int
-	O
1	int
,	O
&	O
ln_b	int
)	O
;	O
double	O
diff_val	double
=	O
0.5	int
*	O
(	O
ln_b	struct
.	O
val	double
-	O
ln_a	struct
.	O
val	double
)	O
;	O
double	O
diff_err	double
=	O
0.5	int
*	O
(	O
ln_b	struct
.	O
err	double
+	O
ln_a	struct
.	O
err	double
)	O
+	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
diff_val	*
)	O
;	O
int	O
stat_e	int
=	O
gsl_sf_exp_err_e	function
(	O
diff_val	*
,	O
diff_err	*
,	O
&	O
ex	double
)	O
;	O
result	*
->	O
val	double
=	O
pre	double
*	O
ex	struct
.	O
val	double
;	O
result	*
->	O
err	double
=	O
pre	double
*	O
ex	struct
.	O
err	double
;	O
result	*
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	*
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_3	O
(	O
stat_e	int
,	O
stat_a	int
,	O
stat_b	int
)	O
;	O
}	O
int	O
gsl_sf_hydrogenicR_1_e	function
(	O
const	O
double	O
Z	double
,	O
const	O
double	O
r	*
,	O
gsl_sf_result	struct
*	O
result	*
)	O
{	O
if	O
(	O
Z	double
>	O
0.0	int
&&	O
r	double
>=	O
0.0	int
)	O
{	O
double	O
A	double
=	O
2.0	int
*	O
Z	double
;	O
double	O
norm	double
=	O
A	double
*	O
sqrt	function
(	O
Z	double
)	O
;	O
double	O
ea	double
=	O
exp	function
(	O
-	O
Z	double
*	O
r	double
)	O
;	O
result	*
->	O
val	double
=	O
norm	double
*	O
ea	double
;	O
result	*
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	*
->	O
val	double
)	O
*	O
fabs	function
(	O
Z	struct
*	O
r	*
)	O
;	O
CHECK_UNDERFLOW	function
(	O
result	*
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
DOMAIN_ERROR	O
(	O
result	*
)	O
;	O
}	O
}	O
int	O
gsl_sf_hydrogenicR_e	function
(	O
const	O
int	O
n	int
,	O
const	O
int	O
l	int
,	O
const	O
double	O
Z	double
,	O
const	O
double	O
r	int
,	O
gsl_sf_result	struct
*	O
result	*
)	O
{	O
if	O
(	O
n	int
<	O
1	int
||	O
l	int
>	O
n	int
-	O
1	int
||	O
Z	double
<=	O
0.0	int
||	O
r	double
<	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	*
)	O
;	O
}	O
else	O
{	O
double	O
A	double
=	O
2.0	int
*	O
Z	double
/	O
n	int
;	O
gsl_sf_result	struct
norm	*
;	O
int	O
stat_norm	int
=	O
R_norm	function
(	O
n	int
,	O
l	double
,	O
Z	double
,	O
&	O
norm	*
)	O
;	O
double	O
rho	double
=	O
A	double
*	O
r	double
;	O
double	O
ea	double
=	O
exp	function
(	O
-	O
0.5	int
*	O
rho	double
)	O
;	O
double	O
pp	double
=	O
gsl_sf_pow_int	function
(	O
rho	double
,	O
l	long
)	O
;	O
gsl_sf_result	struct
lag	struct
;	O
int	O
stat_lag	int
=	O
gsl_sf_laguerre_n_e	function
(	O
n	int
-	O
l	long
-	O
1	int
,	O
2	int
*	O
l	int
+	O
1	int
,	O
rho	double
,	O
&	O
lag	int
)	O
;	O
double	O
W_val	double
=	O
norm	struct
.	O
val	double
*	O
ea	struct
*	O
pp	*
;	O
double	O
W_err	double
=	O
norm	struct
.	O
err	double
*	O
ea	struct
*	O
pp	*
;	O
W_err	double
+=	O
norm	*
.	O
val	double
*	O
(	O
(	O
0.5	int
*	O
rho	double
+	O
1.0	int
)	O
*	O
GSL_DBL_EPSILON	int
)	O
*	O
ea	struct
*	O
pp	*
;	O
W_err	double
+=	O
norm	*
.	O
val	double
*	O
ea	double
*	O
(	O
(	O
l	double
+	O
1.0	int
)	O
*	O
GSL_DBL_EPSILON	int
)	O
*	O
pp	*
;	O
result	*
->	O
val	double
=	O
W_val	double
*	O
lag	struct
.	O
val	double
;	O
result	*
->	O
err	double
=	O
W_val	double
*	O
lag	struct
.	O
err	double
+	O
W_err	int
*	O
fabs	function
(	O
lag	struct
.	O
val	double
)	O
;	O
result	*
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	*
->	O
val	double
)	O
;	O
if	O
(	O
(	O
l	int
==	O
0	int
||	O
(	O
r	double
>	O
0	int
&&	O
l	long
>	O
0	int
)	O
)	O
&&	O
lag	struct
.	O
val	double
!=	O
0.0	int
&&	O
stat_lag	int
==	O
GSL_SUCCESS	int
&&	O
stat_norm	int
==	O
GSL_SUCCESS	int
)	O
{	O
CHECK_UNDERFLOW	function
(	O
result	*
)	O
;	O
}	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_lag	int
,	O
stat_norm	int
)	O
;	O
}	O
}	O
double	O
gsl_sf_hydrogenicR_1	function
(	O
const	O
double	O
Z	double
,	O
const	O
double	O
r	*
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_hydrogenicR_1_e	function
(	O
Z	double
,	O
r	*
,	O
&	O
result	*
)	O
)	O
;	O
}	O
double	O
gsl_sf_hydrogenicR	function
(	O
const	O
int	O
n	int
,	O
const	O
int	O
l	int
,	O
const	O
double	O
Z	double
,	O
const	O
double	O
r	int
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_hydrogenicR_e	function
(	O
n	int
,	O
l	int
,	O
Z	double
,	O
r	*
,	O
&	O
result	*
)	O
)	O
;	O
}	O