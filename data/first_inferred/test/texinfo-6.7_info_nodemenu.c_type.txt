static	O
NODE	struct
*	O
get_visited_nodes	function
(	O
void	O
)	O
;	O
static	O
const	O
char	O
*	O
nodemenu_format_info	function
(	O
void	O
)	O
{	O
return	O
_	O
(	O
"\n* Menu:\n\n  (File)Node                        Lines   Size   Containing File\n  ----------                        -----   ----   ---------------"	pointer
)	O
;	O
}	O
static	O
char	O
*	O
format_node_info	function
(	O
NODE	struct
*	O
node	pointer
)	O
{	O
register	O
int	O
i	int
;	O
char	O
*	O
containing_file	pointer
;	O
static	O
struct	O
text_buffer	struct
line_buffer	struct
=	O
{	O
0	int
}	O
;	O
if	O
(	O
!	O
text_buffer_base	O
(	O
&	O
line_buffer	struct
)	O
)	O
text_buffer_init	function
(	O
&	O
line_buffer	struct
)	O
;	O
else	O
text_buffer_reset	O
(	O
&	O
line_buffer	struct
)	O
;	O
if	O
(	O
node	pointer
->	O
subfile	pointer
)	O
containing_file	pointer
=	O
node	pointer
->	O
subfile	pointer
;	O
else	O
containing_file	pointer
=	O
node	pointer
->	O
fullpath	pointer
;	O
if	O
(	O
!	O
containing_file	pointer
||	O
!	O
*	O
containing_file	pointer
)	O
text_buffer_printf	function
(	O
&	O
line_buffer	struct
,	O
"* %s::"	pointer
,	O
node	pointer
->	O
nodename	pointer
)	O
;	O
else	O
text_buffer_printf	function
(	O
&	O
line_buffer	struct
,	O
"* (%s)%s::"	pointer
,	O
filename_non_directory	function
(	O
node	pointer
->	O
fullpath	pointer
)	O
,	O
node	pointer
->	O
nodename	pointer
)	O
;	O
for	O
(	O
i	int
=	O
text_buffer_off	O
(	O
&	O
line_buffer	struct
)	O
;	O
i	int
<	O
36	int
;	O
i	int
++	O
)	O
text_buffer_add_char	function
(	O
&	O
line_buffer	struct
,	O
' '	O
)	O
;	O
{	O
int	O
lines	int
=	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
node	pointer
->	O
nodelen	long
;	O
i	int
++	O
)	O
if	O
(	O
node	pointer
->	O
contents	pointer
[	O
i	int
]	O
==	O
'\n'	O
)	O
lines	int
++	O
;	O
text_buffer_printf	function
(	O
&	O
line_buffer	struct
,	O
"%d"	pointer
,	O
lines	int
)	O
;	O
}	O
text_buffer_add_char	function
(	O
&	O
line_buffer	struct
,	O
' '	O
)	O
;	O
for	O
(	O
i	int
=	O
text_buffer_off	O
(	O
&	O
line_buffer	struct
)	O
;	O
i	int
<	O
44	int
;	O
i	int
++	O
)	O
text_buffer_add_char	function
(	O
&	O
line_buffer	struct
,	O
' '	O
)	O
;	O
text_buffer_printf	function
(	O
&	O
line_buffer	struct
,	O
"%ld"	pointer
,	O
node	pointer
->	O
nodelen	long
)	O
;	O
if	O
(	O
containing_file	pointer
)	O
{	O
for	O
(	O
i	int
=	O
text_buffer_off	O
(	O
&	O
line_buffer	struct
)	O
;	O
i	int
<	O
51	int
;	O
i	int
++	O
)	O
text_buffer_add_char	function
(	O
&	O
line_buffer	struct
,	O
' '	O
)	O
;	O
text_buffer_printf	function
(	O
&	O
line_buffer	struct
,	O
containing_file	pointer
)	O
;	O
}	O
return	O
xstrdup	function
(	O
text_buffer_base	O
(	O
&	O
line_buffer	struct
)	O
)	O
;	O
}	O
static	O
int	O
compare_strings	function
(	O
const	O
void	O
*	O
entry1	pointer
,	O
const	O
void	O
*	O
entry2	pointer
)	O
{	O
char	O
*	O
*	O
e1	pointer
=	O
(	O
char	O
*	O
*	O
)	O
entry1	pointer
;	O
char	O
*	O
*	O
e2	pointer
=	O
(	O
char	O
*	O
*	O
)	O
entry2	pointer
;	O
return	O
mbscasecmp	function
(	O
*	O
e1	pointer
,	O
*	O
e2	pointer
)	O
;	O
}	O
static	O
char	O
*	O
nodemenu_nodename	pointer
=	O
"*Node Menu*"	pointer
;	O
static	O
NODE	struct
*	O
get_visited_nodes	function
(	O
void	O
)	O
{	O
register	O
int	O
i	int
;	O
WINDOW	struct
*	O
info_win	pointer
;	O
NODE	struct
*	O
node	pointer
;	O
char	O
*	O
*	O
lines	int
=	O
NULL	O
;	O
size_t	long
lines_index	long
=	O
0	int
,	O
lines_slots	long
=	O
0	int
;	O
struct	O
text_buffer	struct
message	pointer
;	O
for	O
(	O
info_win	pointer
=	O
windows	pointer
;	O
info_win	pointer
;	O
info_win	pointer
=	O
info_win	pointer
->	O
next	pointer
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
info_win	pointer
->	O
hist_index	long
;	O
i	int
++	O
)	O
{	O
NODE	struct
*	O
history_node	pointer
=	O
info_win	pointer
->	O
hist	pointer
[	O
i	int
]	O
->	O
node	pointer
;	O
if	O
(	O
strcmp	function
(	O
history_node	pointer
->	O
nodename	pointer
,	O
nodemenu_nodename	pointer
)	O
==	O
0	int
)	O
continue	O
;	O
if	O
(	O
history_node	pointer
)	O
{	O
char	O
*	O
line	pointer
;	O
line	pointer
=	O
format_node_info	function
(	O
history_node	pointer
)	O
;	O
add_pointer_to_array	O
(	O
line	pointer
,	O
lines_index	long
,	O
lines	int
,	O
lines_slots	long
,	O
20	int
)	O
;	O
}	O
}	O
}	O
if	O
(	O
lines	int
)	O
{	O
register	O
int	O
j	int
,	O
newlen	int
;	O
char	O
*	O
*	O
temp	pointer
;	O
qsort	function
(	O
lines	int
,	O
lines_index	long
,	O
sizeof	O
(	O
char	O
*	O
)	O
,	O
compare_strings	function
)	O
;	O
for	O
(	O
i	int
=	O
0	int
,	O
newlen	int
=	O
1	int
;	O
i	int
<	O
lines_index	long
-	O
1	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
FILENAME_CMP	O
(	O
lines	int
[	O
i	int
]	O
,	O
lines	int
[	O
i	int
+	O
1	int
]	O
)	O
==	O
0	int
)	O
{	O
free	function
(	O
lines	int
[	O
i	int
]	O
)	O
;	O
lines	int
[	O
i	int
]	O
=	O
NULL	O
;	O
}	O
else	O
newlen	int
++	O
;	O
}	O
temp	pointer
=	O
xmalloc	function
(	O
(	O
1	int
+	O
newlen	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
,	O
j	int
=	O
0	int
;	O
i	int
<	O
lines_index	long
;	O
i	int
++	O
)	O
if	O
(	O
lines	int
[	O
i	int
]	O
)	O
temp	pointer
[	O
j	int
++	O
]	O
=	O
lines	int
[	O
i	int
]	O
;	O
temp	pointer
[	O
j	int
]	O
=	O
NULL	O
;	O
free	function
(	O
lines	int
)	O
;	O
lines	int
=	O
temp	pointer
;	O
lines_index	long
=	O
newlen	int
;	O
}	O
text_buffer_init	function
(	O
&	O
message	pointer
)	O
;	O
text_buffer_printf	function
(	O
&	O
message	pointer
,	O
"\n"	pointer
)	O
;	O
text_buffer_printf	function
(	O
&	O
message	pointer
,	O
"%s"	pointer
,	O
replace_in_documentation	function
(	O
_	O
(	O
"Here is the menu of nodes you have recently visited.\nSelect one from this menu, or use '\\[history-node]' in another window.\n"	pointer
)	O
,	O
0	int
)	O
)	O
;	O
text_buffer_printf	function
(	O
&	O
message	pointer
,	O
"%s\n"	pointer
,	O
nodemenu_format_info	function
(	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
(	O
lines	int
!=	O
NULL	O
)	O
&&	O
(	O
i	int
<	O
lines_index	long
)	O
;	O
i	int
++	O
)	O
{	O
text_buffer_printf	function
(	O
&	O
message	pointer
,	O
"%s\n"	pointer
,	O
lines	int
[	O
i	int
]	O
)	O
;	O
free	function
(	O
lines	int
[	O
i	int
]	O
)	O
;	O
}	O
if	O
(	O
lines	int
)	O
free	function
(	O
lines	int
)	O
;	O
node	pointer
=	O
text_buffer_to_node	function
(	O
&	O
message	pointer
)	O
;	O
scan_node_contents	function
(	O
node	pointer
,	O
0	int
,	O
0	int
)	O
;	O
return	O
node	pointer
;	O
}	O
DECLARE_INFO_COMMAND	O
(	O
list_visited_nodes	function
,	O
_	O
(	O
"Make a window containing a menu of all of the currently visited nodes"	pointer
)	O
)	O
{	O
WINDOW	struct
*	O
new	pointer
;	O
NODE	struct
*	O
node	pointer
;	O
for	O
(	O
new	pointer
=	O
windows	pointer
;	O
new	pointer
;	O
new	pointer
=	O
new	pointer
->	O
next	pointer
)	O
{	O
node	pointer
=	O
new	pointer
->	O
node	pointer
;	O
if	O
(	O
internal_info_node_p	function
(	O
node	pointer
)	O
&&	O
(	O
strcmp	function
(	O
node	pointer
->	O
nodename	pointer
,	O
nodemenu_nodename	pointer
)	O
==	O
0	int
)	O
)	O
break	O
;	O
}	O
if	O
(	O
!	O
new	pointer
)	O
{	O
if	O
(	O
window	pointer
->	O
next	pointer
)	O
new	pointer
=	O
window	pointer
->	O
next	pointer
;	O
else	O
if	O
(	O
window	pointer
!=	O
windows	pointer
)	O
new	pointer
=	O
windows	pointer
;	O
}	O
if	O
(	O
!	O
new	pointer
)	O
new	pointer
=	O
window_make_window	function
(	O
)	O
;	O
if	O
(	O
!	O
new	pointer
)	O
new	pointer
=	O
window	pointer
;	O
new	pointer
->	O
flags	int
|=	O
W_NoWrap	int
;	O
node	pointer
=	O
get_visited_nodes	function
(	O
)	O
;	O
name_internal_node	function
(	O
node	pointer
,	O
xstrdup	function
(	O
nodemenu_nodename	pointer
)	O
)	O
;	O
node	pointer
->	O
flags	int
|=	O
N_WasRewritten	int
;	O
info_set_node_of_window	function
(	O
new	pointer
,	O
node	pointer
)	O
;	O
active_window	pointer
=	O
new	pointer
;	O
}	O
DECLARE_INFO_COMMAND	O
(	O
select_visited_node	function
,	O
_	O
(	O
"Select a node which has been previously visited in a visible window"	pointer
)	O
)	O
{	O
char	O
*	O
line	pointer
;	O
NODE	struct
*	O
node	pointer
;	O
node	pointer
=	O
get_visited_nodes	function
(	O
)	O
;	O
line	pointer
=	O
info_read_completing_in_echo_area	function
(	O
_	O
(	O
"Select visited node: "	pointer
)	O
,	O
node	pointer
->	O
references	pointer
)	O
;	O
window	pointer
=	O
active_window	pointer
;	O
if	O
(	O
!	O
line	pointer
)	O
info_abort_key	function
(	O
window	pointer
,	O
0	int
)	O
;	O
else	O
if	O
(	O
*	O
line	pointer
)	O
{	O
REFERENCE	struct
*	O
entry	pointer
;	O
entry	pointer
=	O
info_get_menu_entry_by_label	function
(	O
node	pointer
,	O
line	pointer
,	O
0	int
)	O
;	O
if	O
(	O
!	O
entry	pointer
)	O
info_error	function
(	O
_	O
(	O
"The reference disappeared! (%s)."	pointer
)	O
,	O
line	pointer
)	O
;	O
else	O
info_select_reference	function
(	O
window	pointer
,	O
entry	pointer
)	O
;	O
}	O
free	function
(	O
line	pointer
)	O
;	O
free	function
(	O
node	pointer
)	O
;	O
}	O