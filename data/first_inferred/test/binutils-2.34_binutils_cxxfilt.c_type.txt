static	O
int	O
flags	int
=	O
DMGL_PARAMS	O
|	O
DMGL_ANSI	int
|	O
DMGL_VERBOSE	int
;	O
static	O
int	O
strip_underscore	int
=	O
TARGET_PREPENDS_UNDERSCORE	int
;	O
static	O
const	O
struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
"strip-underscore"	*
,	O
no_argument	int
,	O
NULL	O
,	O
'_'	O
}	O
,	O
{	O
"format"	*
,	O
required_argument	int
,	O
NULL	O
,	O
's'	O
}	O
,	O
{	O
"help"	*
,	O
no_argument	int
,	O
NULL	O
,	O
'h'	O
}	O
,	O
{	O
"no-params"	*
,	O
no_argument	int
,	O
NULL	O
,	O
'p'	O
}	O
,	O
{	O
"no-strip-underscores"	*
,	O
no_argument	int
,	O
NULL	O
,	O
'n'	O
}	O
,	O
{	O
"no-verbose"	*
,	O
no_argument	int
,	O
NULL	O
,	O
'i'	O
}	O
,	O
{	O
"types"	*
,	O
no_argument	int
,	O
NULL	O
,	O
't'	O
}	O
,	O
{	O
"version"	*
,	O
no_argument	int
,	O
NULL	O
,	O
'v'	O
}	O
,	O
{	O
"recurse-limit"	*
,	O
no_argument	int
,	O
NULL	O
,	O
'R'	O
}	O
,	O
{	O
"recursion-limit"	*
,	O
no_argument	int
,	O
NULL	O
,	O
'R'	O
}	O
,	O
{	O
"no-recurse-limit"	*
,	O
no_argument	int
,	O
NULL	O
,	O
'r'	O
}	O
,	O
{	O
"no-recursion-limit"	*
,	O
no_argument	int
,	O
NULL	O
,	O
'r'	O
}	O
,	O
{	O
NULL	O
,	O
no_argument	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
static	O
void	O
demangle_it	function
(	O
char	O
*	O
mangled_name	*
)	O
{	O
char	O
*	O
result	*
;	O
unsigned	O
int	O
skip_first	int
=	O
0	int
;	O
if	O
(	O
mangled_name	array
[	O
0	int
]	O
==	O
'.'	O
||	O
mangled_name	array
[	O
0	int
]	O
==	O
'$'	O
)	O
++	O
skip_first	int
;	O
if	O
(	O
strip_underscore	int
&&	O
mangled_name	array
[	O
skip_first	int
]	O
==	O
'_'	O
)	O
++	O
skip_first	int
;	O
result	*
=	O
cplus_demangle	function
(	O
mangled_name	int
+	O
skip_first	*
,	O
flags	int
)	O
;	O
if	O
(	O
result	*
==	O
NULL	O
)	O
printf	function
(	O
"%s"	*
,	O
mangled_name	*
)	O
;	O
else	O
{	O
if	O
(	O
mangled_name	array
[	O
0	int
]	O
==	O
'.'	O
)	O
putchar	function
(	O
'.'	O
)	O
;	O
printf	function
(	O
"%s"	*
,	O
result	*
)	O
;	O
free	function
(	O
result	*
)	O
;	O
}	O
}	O
static	O
void	O
print_demangler_list	function
(	O
FILE	struct
*	O
stream	*
)	O
{	O
const	O
struct	O
demangler_engine	struct
*	O
demangler	*
;	O
fprintf	function
(	O
stream	*
,	O
"{%s"	*
,	O
libiberty_demanglers	*
->	O
demangling_style_name	*
)	O
;	O
for	O
(	O
demangler	int
=	O
libiberty_demanglers	*
+	O
1	int
;	O
demangler	*
->	O
demangling_style	int
!=	O
unknown_demangling	int
;	O
++	O
demangler	int
)	O
fprintf	function
(	O
stream	*
,	O
",%s"	*
,	O
demangler	*
->	O
demangling_style_name	*
)	O
;	O
fprintf	function
(	O
stream	*
,	O
"}"	*
)	O
;	O
}	O
ATTRIBUTE_NORETURN	O
static	O
void	O
usage	function
(	O
FILE	struct
*	O
stream	*
,	O
int	O
status	int
)	O
{	O
fprintf	function
(	O
stream	*
,	O
"Usage: %s [options] [mangled names]\n"	*
,	O
program_name	*
)	O
;	O
fprintf	function
(	O
stream	*
,	O
"Options are:\n  [-_|--strip-underscore]     Ignore first leading underscore%s\n"	*
,	O
TARGET_PREPENDS_UNDERSCORE	int
?	O
" (default)"	int
:	O
""	*
)	O
;	O
fprintf	function
(	O
stream	*
,	O
"  [-n|--no-strip-underscore]  Do not ignore a leading underscore%s\n"	*
,	O
TARGET_PREPENDS_UNDERSCORE	*
?	O
""	*
:	O
" (default)"	*
)	O
;	O
fprintf	function
(	O
stream	*
,	O
"  [-p|--no-params]            Do not display function arguments\n  [-i|--no-verbose]           Do not show implementation details (if any)\n  [-R|--recurse-limit]        Enable a limit on recursion whilst demangling.  [Default]\n  ]-r|--no-recurse-limit]     Disable a limit on recursion whilst demangling\n  [-t|--types]                Also attempt to demangle type encodings\n  [-s|--format "	*
)	O
;	O
print_demangler_list	function
(	O
stream	*
)	O
;	O
fprintf	function
(	O
stream	*
,	O
"]\n"	*
)	O
;	O
fprintf	function
(	O
stream	*
,	O
"  [@<file>]                   Read extra options from <file>\n  [-h|--help]                 Display this information\n  [-v|--version]              Show the version information\nDemangled names are displayed to stdout.\nIf a name cannot be demangled it is just echoed to stdout.\nIf no names are provided on the command line, stdin is read.\n"	*
)	O
;	O
if	O
(	O
REPORT_BUGS_TO	array
[	O
0	int
]	O
&&	O
status	int
==	O
0	int
)	O
fprintf	function
(	O
stream	*
,	O
_	O
(	O
"Report bugs to %s.\n"	*
)	O
,	O
REPORT_BUGS_TO	*
)	O
;	O
exit	function
(	O
status	int
)	O
;	O
}	O
static	O
const	O
char	O
*	O
standard_symbol_characters	function
(	O
void	O
)	O
{	O
return	O
"_$."	int
;	O
}	O
extern	O
int	O
main	function
(	O
int	O
,	O
char	O
*	O
*	O
)	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*
)	O
{	O
int	O
c	int
;	O
const	O
char	O
*	O
valid_symbols	*
;	O
enum	O
demangling_styles	enum
style	enum
=	O
auto_demangling	int
;	O
program_name	*
=	O
argv	*
[	O
0	int
]	O
;	O
xmalloc_set_program_name	function
(	O
program_name	*
)	O
;	O
bfd_set_error_program_name	function
(	O
program_name	*
)	O
;	O
expandargv	function
(	O
&	O
argc	int
,	O
&	O
argv	*
)	O
;	O
while	O
(	O
(	O
c	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	array
,	O
"_hinprRs:tv"	*
,	O
long_options	array
,	O
(	O
int	O
*	O
)	O
0	int
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
'?'	O
:	O
usage	function
(	O
stderr	*
,	O
1	int
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
usage	function
(	O
stdout	*
,	O
0	int
)	O
;	O
case	O
'n'	O
:	O
strip_underscore	int
=	O
0	int
;	O
break	O
;	O
case	O
'p'	O
:	O
flags	int
&=	O
~	O
DMGL_PARAMS	O
;	O
break	O
;	O
case	O
'r'	O
:	O
flags	int
|=	O
DMGL_NO_RECURSE_LIMIT	int
;	O
break	O
;	O
case	O
'R'	O
:	O
flags	int
&=	O
~	O
DMGL_NO_RECURSE_LIMIT	int
;	O
break	O
;	O
case	O
't'	O
:	O
flags	int
|=	O
DMGL_TYPES	int
;	O
break	O
;	O
case	O
'i'	O
:	O
flags	int
&=	O
~	O
DMGL_VERBOSE	int
;	O
break	O
;	O
case	O
'v'	O
:	O
print_version	function
(	O
"c++filt"	*
)	O
;	O
return	O
0	int
;	O
case	O
'_'	O
:	O
strip_underscore	int
=	O
1	int
;	O
break	O
;	O
case	O
's'	O
:	O
style	*
=	O
cplus_demangle_name_to_style	function
(	O
optarg	*
)	O
;	O
if	O
(	O
style	int
==	O
unknown_demangling	int
)	O
{	O
fprintf	function
(	O
stderr	*
,	O
"%s: unknown demangling style `%s'\n"	*
,	O
program_name	*
,	O
optarg	*
)	O
;	O
return	O
1	int
;	O
}	O
cplus_demangle_set_style	O
(	O
style	*
)	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
optind	int
<	O
argc	int
)	O
{	O
for	O
(	O
;	O
optind	int
<	O
argc	int
;	O
optind	int
++	O
)	O
{	O
demangle_it	function
(	O
argv	*
[	O
optind	int
]	O
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
switch	O
(	O
current_demangling_style	int
)	O
{	O
case	O
auto_demangling	int
:	O
case	O
gnu_v3_demangling	int
:	O
case	O
java_demangling	int
:	O
case	O
gnat_demangling	int
:	O
case	O
dlang_demangling	int
:	O
case	O
rust_demangling	int
:	O
valid_symbols	*
=	O
standard_symbol_characters	function
(	O
)	O
;	O
break	O
;	O
default	O
:	O
fatal	function
(	O
"Internal error: no symbol alphabet for current style"	int
)	O
;	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
static	O
char	O
mbuffer	array
[	O
32767	int
]	O
;	O
unsigned	O
i	int
=	O
0	int
;	O
c	int
=	O
getchar	function
(	O
)	O
;	O
while	O
(	O
c	int
!=	O
EOF	O
&&	O
(	O
ISALNUM	function
(	O
c	int
)	O
||	O
strchr	function
(	O
valid_symbols	*
,	O
c	int
)	O
)	O
)	O
{	O
if	O
(	O
i	int
>=	O
sizeof	O
(	O
mbuffer	int
)	O
-	O
1	int
)	O
break	O
;	O
mbuffer	array
[	O
i	int
++	O
]	O
=	O
c	int
;	O
c	int
=	O
getchar	function
(	O
)	O
;	O
}	O
if	O
(	O
i	int
>	O
0	int
)	O
{	O
mbuffer	array
[	O
i	int
]	O
=	O
0	int
;	O
demangle_it	function
(	O
mbuffer	*
)	O
;	O
}	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
putchar	function
(	O
c	int
)	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
fflush	function
(	O
stdout	*
)	O
;	O
}	O
fflush	function
(	O
stdout	*
)	O
;	O
return	O
0	int
;	O
}	O