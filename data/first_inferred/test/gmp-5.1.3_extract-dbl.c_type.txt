int	O
__gmp_extract_double	function
(	O
mp_ptr	pointer
rp	pointer
,	O
double	O
d	double
)	O
{	O
long	O
exp	int
;	O
unsigned	O
sc	int
;	O
unsigned	O
long	O
int	O
manh	O
,	O
manl	O
;	O
ASSERT	O
(	O
d	long
>=	O
0.0	int
)	O
;	O
if	O
(	O
d	long
==	O
0.0	int
)	O
{	O
MPN_ZERO	O
(	O
rp	pointer
,	O
LIMBS_PER_DOUBLE	O
)	O
;	O
return	O
0	int
;	O
}	O
{	O
union	O
ieee_double_extract	union
x	union
;	O
x	double
.	O
d	long
=	O
d	double
;	O
exp	int
=	O
x	double
.	O
s	struct
.	O
exp	int
;	O
manl	O
=	O
(	O
(	O
(	O
mp_limb_t	long
)	O
1	int
<<	O
63	int
)	O
|	O
(	O
(	O
mp_limb_t	long
)	O
x	double
.	O
s	array
.	O
manh	O
<<	O
43	int
)	O
|	O
(	O
(	O
mp_limb_t	long
)	O
x	double
.	O
s	array
.	O
manl	O
<<	O
11	int
)	O
)	O
;	O
if	O
(	O
exp	int
==	O
0	int
)	O
{	O
exp	int
=	O
1	int
;	O
do	O
{	O
manl	O
=	O
manl	O
<<	O
1	int
;	O
exp	int
--	O
;	O
}	O
while	O
(	O
(	O
manl	O
&	O
GMP_LIMB_HIGHBIT	O
)	O
==	O
0	int
)	O
;	O
}	O
exp	int
-=	O
1022	int
;	O
}	O
sc	double
=	O
(	O
unsigned	O
)	O
(	O
exp	int
+	O
64	int
*	O
GMP_NUMB_BITS	O
)	O
%	O
GMP_NUMB_BITS	O
;	O
exp	int
=	O
(	O
exp	int
+	O
64	int
*	O
GMP_NUMB_BITS	O
)	O
/	O
GMP_NUMB_BITS	O
-	O
64	int
*	O
GMP_NUMB_BITS	O
/	O
GMP_NUMB_BITS	O
+	O
1	int
;	O
if	O
(	O
sc	int
!=	O
0	int
)	O
{	O
rp	pointer
[	O
1	int
]	O
=	O
manl	O
>>	O
(	O
GMP_LIMB_BITS	int
-	O
sc	int
)	O
;	O
rp	pointer
[	O
0	int
]	O
=	O
manl	O
<<	O
sc	int
;	O
}	O
else	O
{	O
rp	pointer
[	O
1	int
]	O
=	O
manl	O
;	O
rp	pointer
[	O
0	int
]	O
=	O
0	int
;	O
exp	int
--	O
;	O
}	O
return	O
exp	int
;	O
}	O