int	O
mu_list_remove	function
(	O
mu_list_t	*
list	*
,	O
const	O
void	O
*	O
item	*
)	O
{	O
struct	O
list_data	struct
*	O
current	*
;	O
mu_list_comparator_t	*
comp	*
;	O
int	O
status	int
=	O
MU_ERR_NOENT	O
;	O
if	O
(	O
list	*
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
comp	*
=	O
list	*
->	O
comp	*
?	O
list	*
->	O
comp	*
:	O
_mu_list_ptr_comparator	function
;	O
mu_monitor_wrlock	function
(	O
list	*
->	O
monitor	*
)	O
;	O
for	O
(	O
current	*
=	O
list	*
->	O
head	struct
.	O
next	*
;	O
current	*
!=	O
&	O
list	*
->	O
head	struct
;	O
current	*
=	O
current	*
->	O
next	*
)	O
{	O
if	O
(	O
comp	*
(	O
current	*
->	O
item	*
,	O
item	*
)	O
==	O
0	int
)	O
{	O
struct	O
list_data	struct
*	O
previous	*
=	O
current	*
->	O
prev	*
;	O
mu_iterator_delitem	function
(	O
list	*
->	O
itr	*
,	O
current	*
)	O
;	O
previous	*
->	O
next	*
=	O
current	*
->	O
next	*
;	O
current	*
->	O
next	*
->	O
prev	*
=	O
previous	*
;	O
DESTROY_ITEM	O
(	O
list	*
,	O
current	*
)	O
;	O
free	function
(	O
current	*
)	O
;	O
list	*
->	O
count	long
--	O
;	O
status	int
=	O
0	int
;	O
break	O
;	O
}	O
}	O
mu_monitor_unlock	function
(	O
list	*
->	O
monitor	*
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_list_remove_nd	function
(	O
mu_list_t	*
list	*
,	O
const	O
void	O
*	O
item	*
)	O
{	O
mu_list_destroy_item_t	*
dptr	*
=	O
mu_list_set_destroy_item	function
(	O
list	*
,	O
NULL	O
)	O
;	O
int	O
rc	int
=	O
mu_list_remove	function
(	O
list	*
,	O
item	*
)	O
;	O
mu_list_set_destroy_item	function
(	O
list	*
,	O
dptr	*
)	O
;	O
return	O
rc	int
;	O
}	O