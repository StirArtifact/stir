RCSTAG_CC	O
(	O
"$Id$"	pointer
)	O
;	O
static	O
char	O
*	O
simple_backup_suffix	pointer
=	O
BACKUP_SUFFIX_STR	pointer
;	O
backup_mode_ty	enum
version_control	enum
=	O
unknown	int
;	O
int	O
version_width	int
=	O
1	int
;	O
static	O
char	O
*	O
simple_backup_name	function
(	O
char	O
*	O
pathname	pointer
)	O
{	O
char	O
*	O
backup_name	pointer
;	O
backup_name	pointer
=	O
xmalloc	function
(	O
strlen	function
(	O
pathname	pointer
)	O
+	O
strlen	function
(	O
simple_backup_suffix	pointer
)	O
+	O
2	int
)	O
;	O
sprintf	function
(	O
backup_name	pointer
,	O
"%s%s"	pointer
,	O
pathname	pointer
,	O
simple_backup_suffix	pointer
)	O
;	O
return	O
backup_name	pointer
;	O
}	O
static	O
int	O
version_number	function
(	O
char	O
*	O
base	pointer
,	O
char	O
*	O
direntry	pointer
,	O
int	O
base_length	int
)	O
{	O
int	O
version	int
;	O
char	O
*	O
p	pointer
=	O
NULL	O
;	O
version	int
=	O
0	int
;	O
if	O
(	O
!	O
strncmp	function
(	O
base	pointer
,	O
direntry	pointer
,	O
base_length	int
)	O
&&	O
ISDIGIT	O
(	O
direntry	pointer
[	O
base_length	int
+	O
2	int
]	O
)	O
)	O
{	O
for	O
(	O
p	pointer
=	O
&	O
direntry	pointer
[	O
base_length	int
+	O
2	int
]	O
;	O
ISDIGIT	O
(	O
*	O
p	pointer
)	O
;	O
++	O
p	pointer
)	O
{	O
version	int
=	O
version	int
*	O
10	int
+	O
*	O
p	pointer
-	O
'0'	O
;	O
}	O
if	O
(	O
p	pointer
[	O
0	int
]	O
!=	O
BACKUP_SUFFIX_CHAR	char
||	O
p	pointer
[	O
1	int
]	O
)	O
{	O
version	int
=	O
0	int
;	O
}	O
}	O
return	O
version	int
;	O
}	O
static	O
int	O
highest_version	function
(	O
char	O
*	O
filename	pointer
,	O
char	O
*	O
dirname	pointer
)	O
{	O
DIR	struct
*	O
dirp	pointer
=	O
opendir	function
(	O
dirname	pointer
)	O
;	O
struct	O
dirent	struct
*	O
dp	pointer
=	O
NULL	O
;	O
int	O
highestVersion	int
;	O
if	O
(	O
!	O
dirp	pointer
)	O
{	O
highestVersion	int
=	O
0	int
;	O
}	O
else	O
{	O
int	O
this_version	int
;	O
unsigned	O
int	O
file_name_length	int
=	O
strlen	function
(	O
filename	pointer
)	O
;	O
highestVersion	int
=	O
0	int
;	O
while	O
(	O
(	O
dp	pointer
=	O
readdir	function
(	O
dirp	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
!	O
REAL_DIR_ENTRY	int
(	O
dp	pointer
)	O
||	O
NAMLEN	O
(	O
dp	pointer
)	O
<=	O
file_name_length	int
+	O
2	int
)	O
{	O
continue	O
;	O
}	O
this_version	int
=	O
version_number	function
(	O
filename	pointer
,	O
dp	pointer
->	O
d_name	array
,	O
file_name_length	int
)	O
;	O
if	O
(	O
this_version	int
>	O
highestVersion	int
)	O
{	O
highestVersion	int
=	O
this_version	int
;	O
}	O
}	O
closedir	function
(	O
dirp	pointer
)	O
;	O
}	O
return	O
highestVersion	int
;	O
}	O
static	O
int	O
max_version	function
(	O
char	O
*	O
pathname	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
char	O
*	O
filename	pointer
;	O
int	O
pathlen	int
=	O
strlen	function
(	O
pathname	pointer
)	O
;	O
int	O
version	int
;	O
p	pointer
=	O
pathname	pointer
+	O
pathlen	int
-	O
1	int
;	O
while	O
(	O
(	O
p	pointer
>	O
pathname	pointer
)	O
&&	O
(	O
*	O
p	pointer
!=	O
'/'	O
)	O
)	O
{	O
p	pointer
--	O
;	O
}	O
if	O
(	O
*	O
p	pointer
==	O
'/'	O
)	O
{	O
int	O
dirlen	int
=	O
p	pointer
-	O
pathname	pointer
;	O
char	O
*	O
dirname	pointer
;	O
filename	pointer
=	O
p	pointer
+	O
1	int
;	O
dirname	pointer
=	O
xmalloc	function
(	O
dirlen	int
+	O
1	int
)	O
;	O
strncpy	function
(	O
dirname	pointer
,	O
pathname	pointer
,	O
(	O
dirlen	int
)	O
)	O
;	O
dirname	pointer
[	O
dirlen	int
]	O
=	O
'\0'	O
;	O
version	int
=	O
highest_version	function
(	O
filename	pointer
,	O
dirname	pointer
)	O
;	O
xfree	function
(	O
dirname	pointer
)	O
;	O
}	O
else	O
{	O
filename	pointer
=	O
pathname	pointer
;	O
version	int
=	O
highest_version	function
(	O
filename	pointer
,	O
"."	pointer
)	O
;	O
}	O
return	O
version	int
;	O
}	O
static	O
char	O
*	O
generate_backup_filename	function
(	O
backup_mode_ty	enum
versionControl	enum
,	O
char	O
*	O
pathname	pointer
)	O
{	O
int	O
last_numbered_version	int
;	O
char	O
*	O
backup_name	pointer
;	O
if	O
(	O
versionControl	enum
==	O
none	int
)	O
{	O
backup_name	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
if	O
(	O
versionControl	enum
==	O
simple	int
)	O
{	O
backup_name	pointer
=	O
simple_backup_name	function
(	O
pathname	pointer
)	O
;	O
}	O
else	O
{	O
last_numbered_version	int
=	O
max_version	function
(	O
pathname	pointer
)	O
;	O
if	O
(	O
(	O
versionControl	enum
==	O
numbered_existing	int
)	O
&&	O
(	O
last_numbered_version	int
==	O
0	int
)	O
)	O
{	O
backup_name	pointer
=	O
simple_backup_name	function
(	O
pathname	pointer
)	O
;	O
}	O
else	O
{	O
last_numbered_version	int
++	O
;	O
backup_name	pointer
=	O
xmalloc	function
(	O
strlen	function
(	O
pathname	pointer
)	O
+	O
16	int
)	O
;	O
if	O
(	O
backup_name	pointer
)	O
{	O
sprintf	function
(	O
backup_name	pointer
,	O
BACKUP_SUFFIX_FORMAT	pointer
,	O
pathname	pointer
,	O
version_width	int
,	O
(	O
int	O
)	O
last_numbered_version	int
)	O
;	O
}	O
}	O
}	O
}	O
return	O
backup_name	pointer
;	O
}	O
static	O
version_control_values_ty	struct
values	array
[	O
]	O
=	O
{	O
{	O
none	int
,	O
"never"	pointer
}	O
,	O
{	O
none	int
,	O
"none"	pointer
}	O
,	O
{	O
simple	int
,	O
"simple"	pointer
}	O
,	O
{	O
numbered_existing	int
,	O
"existing"	pointer
}	O
,	O
{	O
numbered_existing	int
,	O
"nil"	pointer
}	O
,	O
{	O
numbered	int
,	O
"numbered"	pointer
}	O
,	O
{	O
numbered	int
,	O
"t"	pointer
}	O
,	O
{	O
unknown	int
,	O
0	int
}	O
}	O
;	O
backup_mode_ty	enum
version_control_value	function
(	O
void	O
)	O
{	O
char	O
*	O
version	int
=	O
getenv	function
(	O
"VERSION_CONTROL"	pointer
)	O
;	O
version_control_values_ty	struct
*	O
v	pointer
;	O
backup_mode_ty	enum
ret	enum
=	O
unknown	int
;	O
if	O
(	O
(	O
version	int
==	O
NULL	O
)	O
||	O
(	O
*	O
version	int
==	O
0	int
)	O
)	O
{	O
ret	enum
=	O
numbered_existing	int
;	O
}	O
else	O
{	O
v	pointer
=	O
&	O
values	array
[	O
0	int
]	O
;	O
while	O
(	O
v	pointer
->	O
name	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
version	int
,	O
v	pointer
->	O
name	pointer
)	O
==	O
0	int
)	O
{	O
ret	enum
=	O
v	pointer
->	O
value	enum
;	O
break	O
;	O
}	O
else	O
{	O
v	pointer
++	O
;	O
}	O
}	O
}	O
return	O
ret	enum
;	O
}	O
static	O
void	O
set_version_width	function
(	O
void	O
)	O
{	O
char	O
*	O
v	pointer
=	O
getenv	function
(	O
"VERSION_WIDTH"	pointer
)	O
;	O
if	O
(	O
v	pointer
&&	O
ISDIGIT	O
(	O
*	O
v	pointer
)	O
)	O
{	O
version_width	int
=	O
atoi	function
(	O
v	pointer
)	O
;	O
}	O
if	O
(	O
version_width	int
>	O
16	int
)	O
{	O
version_width	int
=	O
16	int
;	O
}	O
}	O
void	O
initialize_backups	function
(	O
void	O
)	O
{	O
char	O
*	O
v	pointer
=	O
getenv	function
(	O
"SIMPLE_BACKUP_SUFFIX"	pointer
)	O
;	O
if	O
(	O
v	pointer
&&	O
*	O
v	pointer
)	O
{	O
simple_backup_suffix	pointer
=	O
v	pointer
;	O
}	O
version_control	enum
=	O
version_control_value	function
(	O
)	O
;	O
if	O
(	O
version_control	enum
==	O
unknown	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"indent:  Strange version-control value\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"indent:  Using numbered-existing\n"	pointer
)	O
)	O
;	O
version_control	enum
=	O
numbered_existing	int
;	O
}	O
set_version_width	function
(	O
)	O
;	O
}	O
void	O
make_backup	function
(	O
file_buffer_ty	struct
*	O
file	pointer
,	O
const	O
struct	O
stat	struct
*	O
file_stats	pointer
)	O
{	O
FILE	struct
*	O
bf	pointer
;	O
char	O
*	O
backup_filename	pointer
;	O
unsigned	O
int	O
size	long
;	O
if	O
(	O
version_control	enum
==	O
none	int
)	O
{	O
}	O
else	O
{	O
backup_filename	pointer
=	O
generate_backup_filename	function
(	O
version_control	enum
,	O
file	pointer
->	O
name	pointer
)	O
;	O
if	O
(	O
!	O
backup_filename	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"indent: Can't make backup filename of %s\n"	pointer
)	O
,	O
file	pointer
->	O
name	pointer
)	O
;	O
exit	function
(	O
system_error	int
)	O
;	O
}	O
bf	pointer
=	O
fopen	function
(	O
backup_filename	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
!	O
bf	pointer
)	O
{	O
fatal	function
(	O
_	O
(	O
"Can't open backup file %s"	pointer
)	O
,	O
backup_filename	pointer
)	O
;	O
}	O
size	long
=	O
fwrite	function
(	O
file	pointer
->	O
data	pointer
,	O
file	pointer
->	O
size	long
,	O
1	int
,	O
bf	pointer
)	O
;	O
if	O
(	O
size	long
!=	O
1	int
)	O
{	O
fatal	function
(	O
_	O
(	O
"Can't write to backup file %s"	pointer
)	O
,	O
backup_filename	pointer
)	O
;	O
}	O
fclose	function
(	O
bf	pointer
)	O
;	O
{	O
struct	O
utimbuf	struct
buf	struct
;	O
buf	struct
.	O
actime	long
=	O
time	struct
(	O
NULL	O
)	O
;	O
buf	struct
.	O
modtime	long
=	O
file_stats	pointer
->	O
st_mtime	O
;	O
if	O
(	O
utime	function
(	O
backup_filename	pointer
,	O
&	O
buf	struct
)	O
!=	O
0	int
)	O
{	O
WARNING	O
(	O
_	O
(	O
"Can't preserve modification time on backup file %s"	pointer
)	O
,	O
backup_filename	pointer
,	O
NULL	O
)	O
;	O
}	O
}	O
xfree	function
(	O
backup_filename	pointer
)	O
;	O
}	O
}	O