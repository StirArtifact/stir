typedef	O
int	O
(	O
*	O
convfun	*
)	O
(	O
char	O
const	O
*	O
str	*
,	O
size_t	long
len	int
,	O
size_t	long
*	O
ncons	*
,	O
mu_opool_t	*
pool	*
)	O
;	O
static	O
int	O
hexconv	function
(	O
char	O
const	O
*	O
str	*
,	O
size_t	long
len	long
,	O
size_t	long
*	O
ncons	*
,	O
mu_opool_t	*
pool	*
)	O
;	O
static	O
int	O
uniconv	function
(	O
char	O
const	O
*	O
str	*
,	O
size_t	long
len	long
,	O
size_t	long
*	O
ncons	*
,	O
mu_opool_t	*
pool	*
)	O
;	O
struct	O
convertor	struct
{	O
char	O
const	O
*	O
pfx	*
;	O
size_t	long
len	long
;	O
convfun	*
fun	*
;	O
}	O
;	O
static	O
struct	O
convertor	struct
conv	array
[	O
]	O
=	O
{	O
{	O
"hex"	*
,	O
3	int
,	O
hexconv	int
}	O
,	O
{	O
"unicode"	*
,	O
7	int
,	O
uniconv	*
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
convfun	O
findconv	function
(	O
char	O
const	O
*	O
*	O
pstr	*
,	O
size_t	long
*	O
plen	*
)	O
{	O
struct	O
convertor	struct
*	O
cp	*
;	O
char	O
const	O
*	O
str	*
=	O
*	O
pstr	*
;	O
size_t	long
len	long
=	O
*	O
plen	*
;	O
for	O
(	O
cp	*
=	O
conv	*
;	O
cp	*
->	O
pfx	*
;	O
cp	*
++	O
)	O
{	O
if	O
(	O
len	int
>	O
cp	*
->	O
len	int
&&	O
strncasecmp	function
(	O
str	*
,	O
cp	*
->	O
pfx	*
,	O
cp	*
->	O
len	long
)	O
==	O
0	int
&&	O
str	*
[	O
cp	*
->	O
len	long
]	O
==	O
':'	O
)	O
{	O
*	O
pstr	*
+=	O
cp	*
->	O
len	long
+	O
1	int
;	O
*	O
plen	*
-=	O
cp	*
->	O
len	int
+	O
1	int
;	O
return	O
cp	*
->	O
fun	*
;	O
}	O
}	O
return	O
NULL	O
;	O
}	O
int	O
mu_i_sv_expand_encoded_char	function
(	O
char	O
const	O
*	O
input	*
,	O
size_t	long
len	long
,	O
char	O
*	O
*	O
exp	*
,	O
void	O
*	O
data	*
)	O
{	O
int	O
rc	int
;	O
convfun	*
fn	*
;	O
mu_opool_t	*
pool	*
;	O
fn	*
=	O
findconv	function
(	O
&	O
input	*
,	O
&	O
len	long
)	O
;	O
if	O
(	O
!	O
fn	*
)	O
return	O
MU_ERR_NOENT	O
;	O
rc	int
=	O
mu_opool_create	function
(	O
&	O
pool	*
,	O
MU_OPOOL_DEFAULT	*
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
while	O
(	O
rc	int
==	O
0	int
&&	O
len	int
>	O
0	int
)	O
{	O
if	O
(	O
mu_isblank	function
(	O
*	O
input	*
)	O
)	O
{	O
++	O
input	*
;	O
--	O
len	int
;	O
}	O
else	O
if	O
(	O
mu_isxdigit	O
(	O
*	O
input	*
)	O
)	O
{	O
size_t	long
n	long
;	O
rc	int
=	O
fn	*
(	O
input	*
,	O
len	long
,	O
&	O
n	long
,	O
pool	*
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
input	*
+=	O
n	int
;	O
len	int
-=	O
n	int
;	O
}	O
else	O
{	O
rc	int
=	O
EILSEQ	*
;	O
break	O
;	O
}	O
}	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
size_t	long
len	long
;	O
char	O
*	O
p	*
=	O
mu_opool_finish	function
(	O
pool	*
,	O
&	O
len	int
)	O
;	O
char	O
*	O
res	*
;	O
res	*
=	O
malloc	function
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
res	*
)	O
rc	int
=	O
errno	O
;	O
else	O
{	O
memcpy	function
(	O
res	*
,	O
p	*
,	O
len	long
)	O
;	O
res	*
[	O
len	long
]	O
=	O
0	int
;	O
*	O
exp	*
=	O
res	*
;	O
}	O
}	O
mu_opool_destroy	function
(	O
&	O
pool	*
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
hexconv	function
(	O
char	O
const	O
*	O
str	*
,	O
size_t	long
len	long
,	O
size_t	long
*	O
ncons	*
,	O
mu_opool_t	*
pool	*
)	O
{	O
char	O
c	int
;	O
if	O
(	O
len	int
<	O
2	int
)	O
return	O
EILSEQ	O
;	O
else	O
{	O
c	long
=	O
mu_hex2ul	function
(	O
*	O
str	*
)	O
;	O
++	O
str	*
;	O
if	O
(	O
!	O
mu_isxdigit	O
(	O
*	O
str	*
)	O
)	O
return	O
EILSEQ	O
;	O
c	int
=	O
(	O
c	int
<<	O
4	int
)	O
+	O
mu_hex2ul	function
(	O
*	O
str	*
)	O
;	O
mu_opool_append_char	function
(	O
pool	array
,	O
c	int
)	O
;	O
}	O
*	O
ncons	*
=	O
2	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
utf8_wctomb	function
(	O
unsigned	O
int	O
wc	int
,	O
mu_opool_t	*
pool	*
)	O
{	O
int	O
count	int
;	O
char	O
r	*
[	O
6	int
]	O
;	O
if	O
(	O
wc	int
<	O
0x80	int
)	O
count	int
=	O
1	int
;	O
else	O
if	O
(	O
wc	int
<	O
0x800	int
)	O
count	int
=	O
2	int
;	O
else	O
if	O
(	O
wc	int
<	O
0x10000	int
)	O
count	int
=	O
3	int
;	O
else	O
if	O
(	O
wc	int
<	O
0x200000	int
)	O
count	int
=	O
4	int
;	O
else	O
if	O
(	O
wc	int
<	O
0x4000000	int
)	O
count	int
=	O
5	int
;	O
else	O
if	O
(	O
wc	int
<=	O
0x7fffffff	int
)	O
count	int
=	O
6	int
;	O
else	O
return	O
EILSEQ	function
;	O
switch	O
(	O
count	int
)	O
{	O
case	O
6	int
:	O
r	*
[	O
5	int
]	O
=	O
0x80	int
|	O
(	O
wc	int
&	O
0x3f	int
)	O
;	O
wc	int
=	O
wc	int
>>	O
6	int
;	O
wc	int
|=	O
0x4000000	int
;	O
case	O
5	int
:	O
r	*
[	O
4	int
]	O
=	O
0x80	int
|	O
(	O
wc	int
&	O
0x3f	int
)	O
;	O
wc	long
=	O
wc	int
>>	O
6	int
;	O
wc	int
|=	O
0x200000	int
;	O
case	O
4	int
:	O
r	*
[	O
3	int
]	O
=	O
0x80	int
|	O
(	O
wc	int
&	O
0x3f	int
)	O
;	O
wc	long
=	O
wc	int
>>	O
6	int
;	O
wc	int
|=	O
0x10000	int
;	O
case	O
3	int
:	O
r	*
[	O
2	int
]	O
=	O
0x80	int
|	O
(	O
wc	int
&	O
0x3f	int
)	O
;	O
wc	long
=	O
wc	int
>>	O
6	int
;	O
wc	int
|=	O
0x800	int
;	O
case	O
2	int
:	O
r	*
[	O
1	int
]	O
=	O
0x80	int
|	O
(	O
wc	int
&	O
0x3f	int
)	O
;	O
wc	long
=	O
wc	int
>>	O
6	int
;	O
wc	int
|=	O
0xc0	int
;	O
case	O
1	int
:	O
r	*
[	O
0	int
]	O
=	O
wc	int
;	O
}	O
mu_opool_append	function
(	O
pool	*
,	O
r	*
,	O
count	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
uniconv	function
(	O
char	O
const	O
*	O
str	*
,	O
size_t	long
len	long
,	O
size_t	long
*	O
ncons	*
,	O
mu_opool_t	*
pool	*
)	O
{	O
unsigned	O
int	O
wc	int
=	O
0	int
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
len	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
i	int
>=	O
12	int
)	O
return	O
EILSEQ	int
;	O
if	O
(	O
!	O
mu_isxdigit	O
(	O
str	*
[	O
i	long
]	O
)	O
)	O
break	O
;	O
wc	long
=	O
(	O
wc	long
<<	O
4	int
)	O
+	O
mu_hex2ul	function
(	O
str	*
[	O
i	long
]	O
)	O
;	O
}	O
*	O
ncons	*
=	O
i	long
;	O
return	O
utf8_wctomb	function
(	O
wc	int
,	O
pool	*
)	O
;	O
}	O