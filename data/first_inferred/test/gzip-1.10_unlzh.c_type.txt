local	O
unsigned	O
decode	function
(	O
unsigned	O
count	int
,	O
uch	char
buffer	array
[	O
]	O
)	O
;	O
local	O
void	O
decode_start	function
(	O
void	O
)	O
;	O
local	O
void	O
huf_decode_start	function
(	O
void	O
)	O
;	O
local	O
unsigned	O
decode_c	function
(	O
void	O
)	O
;	O
local	O
unsigned	O
decode_p	function
(	O
void	O
)	O
;	O
local	O
void	O
read_pt_len	function
(	O
int	O
nn	int
,	O
int	O
nbit	int
,	O
int	O
i_special	int
)	O
;	O
local	O
void	O
read_c_len	function
(	O
void	O
)	O
;	O
local	O
void	O
fillbuf	function
(	O
int	O
n	int
)	O
;	O
local	O
unsigned	O
getbits	function
(	O
int	O
n	int
)	O
;	O
local	O
void	O
init_getbits	function
(	O
void	O
)	O
;	O
local	O
void	O
make_table	function
(	O
int	O
nchar	int
,	O
uch	char
bitlen	array
[	O
]	O
,	O
int	O
tablebits	int
,	O
ush	short
table	array
[	O
]	O
)	O
;	O
local	O
uch	char
pt_len	array
[	O
NPT	O
]	O
;	O
local	O
unsigned	O
blocksize	int
;	O
local	O
ush	short
pt_table	array
[	O
256	int
]	O
;	O
local	O
ush	short
bitbuf	short
;	O
local	O
unsigned	O
subbitbuf	int
;	O
local	O
int	O
bitcount	int
;	O
local	O
void	O
fillbuf	function
(	O
n	int
)	O
int	O
n	int
;	O
{	O
bitbuf	short
<<=	O
n	int
;	O
while	O
(	O
n	int
>	O
bitcount	int
)	O
{	O
bitbuf	short
|=	O
subbitbuf	int
<<	O
(	O
n	int
-=	O
bitcount	int
)	O
;	O
subbitbuf	int
=	O
(	O
unsigned	O
)	O
try_byte	O
(	O
)	O
;	O
if	O
(	O
(	O
int	O
)	O
subbitbuf	int
==	O
EOF	O
)	O
subbitbuf	int
=	O
0	int
;	O
bitcount	int
=	O
CHAR_BIT	int
;	O
}	O
bitbuf	short
|=	O
subbitbuf	int
>>	O
(	O
bitcount	int
-=	O
n	int
)	O
;	O
}	O
local	O
unsigned	O
getbits	function
(	O
n	int
)	O
int	O
n	int
;	O
{	O
unsigned	O
x	int
;	O
x	int
=	O
bitbuf	short
>>	O
(	O
BITBUFSIZ	O
-	O
n	int
)	O
;	O
fillbuf	function
(	O
n	int
)	O
;	O
return	O
x	int
;	O
}	O
local	O
void	O
init_getbits	function
(	O
)	O
{	O
bitbuf	short
=	O
0	int
;	O
subbitbuf	int
=	O
0	int
;	O
bitcount	int
=	O
0	int
;	O
fillbuf	function
(	O
BITBUFSIZ	O
)	O
;	O
}	O
local	O
void	O
make_table	function
(	O
nchar	int
,	O
bitlen	array
,	O
tablebits	int
,	O
table	array
)	O
int	O
nchar	int
;	O
uch	char
bitlen	array
[	O
]	O
;	O
int	O
tablebits	int
;	O
ush	short
table	array
[	O
]	O
;	O
{	O
ush	short
count	int
[	O
17	int
]	O
,	O
weight	array
[	O
17	int
]	O
,	O
start	array
[	O
18	int
]	O
,	O
*	O
p	pointer
;	O
unsigned	O
i	int
,	O
k	int
,	O
len	int
,	O
ch	int
,	O
jutbits	int
,	O
avail	int
,	O
nextcode	int
,	O
mask	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
16	int
;	O
i	int
++	O
)	O
count	int
[	O
i	int
]	O
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
unsigned	O
)	O
nchar	int
;	O
i	int
++	O
)	O
count	int
[	O
bitlen	array
[	O
i	int
]	O
]	O
++	O
;	O
start	array
[	O
1	int
]	O
=	O
0	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
16	int
;	O
i	int
++	O
)	O
start	array
[	O
i	int
+	O
1	int
]	O
=	O
start	array
[	O
i	int
]	O
+	O
(	O
count	int
[	O
i	int
]	O
<<	O
(	O
16	int
-	O
i	int
)	O
)	O
;	O
if	O
(	O
(	O
start	array
[	O
17	int
]	O
&	O
0xffff	int
)	O
!=	O
0	int
)	O
gzip_error	function
(	O
"Bad table\n"	pointer
)	O
;	O
jutbits	int
=	O
16	int
-	O
tablebits	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
(	O
unsigned	O
)	O
tablebits	int
;	O
i	int
++	O
)	O
{	O
start	array
[	O
i	int
]	O
>>=	O
jutbits	int
;	O
weight	array
[	O
i	int
]	O
=	O
(	O
unsigned	O
)	O
1	int
<<	O
(	O
tablebits	int
-	O
i	int
)	O
;	O
}	O
while	O
(	O
i	int
<=	O
16	int
)	O
{	O
weight	array
[	O
i	int
]	O
=	O
(	O
unsigned	O
)	O
1	int
<<	O
(	O
16	int
-	O
i	int
)	O
;	O
i	int
++	O
;	O
}	O
i	int
=	O
start	array
[	O
tablebits	int
+	O
1	int
]	O
>>	O
jutbits	int
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
k	int
=	O
1	int
<<	O
tablebits	int
;	O
while	O
(	O
i	int
!=	O
k	int
)	O
table	array
[	O
i	int
++	O
]	O
=	O
0	int
;	O
}	O
avail	int
=	O
nchar	int
;	O
mask	int
=	O
(	O
unsigned	O
)	O
1	int
<<	O
(	O
15	int
-	O
tablebits	int
)	O
;	O
for	O
(	O
ch	int
=	O
0	int
;	O
ch	int
<	O
(	O
unsigned	O
)	O
nchar	int
;	O
ch	int
++	O
)	O
{	O
if	O
(	O
(	O
len	int
=	O
bitlen	array
[	O
ch	int
]	O
)	O
==	O
0	int
)	O
continue	O
;	O
nextcode	int
=	O
start	array
[	O
len	int
]	O
+	O
weight	array
[	O
len	int
]	O
;	O
if	O
(	O
len	int
<=	O
(	O
unsigned	O
)	O
tablebits	int
)	O
{	O
if	O
(	O
(	O
unsigned	O
)	O
1	int
<<	O
tablebits	int
<	O
nextcode	int
)	O
gzip_error	function
(	O
"Bad table\n"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
start	array
[	O
len	int
]	O
;	O
i	int
<	O
nextcode	int
;	O
i	int
++	O
)	O
table	array
[	O
i	int
]	O
=	O
ch	int
;	O
}	O
else	O
{	O
k	int
=	O
start	array
[	O
len	int
]	O
;	O
p	pointer
=	O
&	O
table	array
[	O
k	int
>>	O
jutbits	int
]	O
;	O
i	int
=	O
len	int
-	O
tablebits	int
;	O
while	O
(	O
i	int
!=	O
0	int
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
0	int
)	O
{	O
right	O
[	O
avail	int
]	O
=	O
left	O
[	O
avail	int
]	O
=	O
0	int
;	O
*	O
p	pointer
=	O
avail	int
++	O
;	O
}	O
if	O
(	O
k	int
&	O
mask	int
)	O
p	pointer
=	O
&	O
right	O
[	O
*	O
p	pointer
]	O
;	O
else	O
p	pointer
=	O
&	O
left	O
[	O
*	O
p	pointer
]	O
;	O
k	int
<<=	O
1	int
;	O
i	int
--	O
;	O
}	O
*	O
p	pointer
=	O
ch	int
;	O
}	O
start	array
[	O
len	int
]	O
=	O
nextcode	int
;	O
}	O
}	O
local	O
void	O
read_pt_len	function
(	O
nn	int
,	O
nbit	int
,	O
i_special	int
)	O
int	O
nn	int
;	O
int	O
nbit	int
;	O
int	O
i_special	int
;	O
{	O
int	O
i	int
,	O
c	int
,	O
n	int
;	O
unsigned	O
mask	int
;	O
n	int
=	O
getbits	function
(	O
nbit	int
)	O
;	O
if	O
(	O
n	int
==	O
0	int
)	O
{	O
c	int
=	O
getbits	function
(	O
nbit	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nn	int
;	O
i	int
++	O
)	O
pt_len	array
[	O
i	int
]	O
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
256	int
;	O
i	int
++	O
)	O
pt_table	array
[	O
i	int
]	O
=	O
c	int
;	O
}	O
else	O
{	O
i	int
=	O
0	int
;	O
while	O
(	O
i	int
<	O
n	int
)	O
{	O
c	int
=	O
bitbuf	short
>>	O
(	O
BITBUFSIZ	O
-	O
3	int
)	O
;	O
if	O
(	O
c	int
==	O
7	int
)	O
{	O
mask	int
=	O
(	O
unsigned	O
)	O
1	int
<<	O
(	O
BITBUFSIZ	O
-	O
1	int
-	O
3	int
)	O
;	O
while	O
(	O
mask	int
&	O
bitbuf	short
)	O
{	O
mask	int
>>=	O
1	int
;	O
c	int
++	O
;	O
}	O
if	O
(	O
16	int
<	O
c	int
)	O
gzip_error	function
(	O
"Bad table\n"	pointer
)	O
;	O
}	O
fillbuf	function
(	O
(	O
c	int
<	O
7	int
)	O
?	O
3	int
:	O
c	int
-	O
3	int
)	O
;	O
pt_len	array
[	O
i	int
++	O
]	O
=	O
c	int
;	O
if	O
(	O
i	int
==	O
i_special	int
)	O
{	O
c	int
=	O
getbits	function
(	O
2	int
)	O
;	O
while	O
(	O
--	O
c	int
>=	O
0	int
)	O
pt_len	array
[	O
i	int
++	O
]	O
=	O
0	int
;	O
}	O
}	O
while	O
(	O
i	int
<	O
nn	int
)	O
pt_len	array
[	O
i	int
++	O
]	O
=	O
0	int
;	O
make_table	function
(	O
nn	int
,	O
pt_len	array
,	O
8	int
,	O
pt_table	array
)	O
;	O
}	O
}	O
local	O
void	O
read_c_len	function
(	O
)	O
{	O
int	O
i	int
,	O
c	int
,	O
n	int
;	O
unsigned	O
mask	int
;	O
n	int
=	O
getbits	function
(	O
CBIT	int
)	O
;	O
if	O
(	O
n	int
==	O
0	int
)	O
{	O
c	int
=	O
getbits	function
(	O
CBIT	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NC	O
;	O
i	int
++	O
)	O
c_len	O
[	O
i	int
]	O
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4096	int
;	O
i	int
++	O
)	O
c_table	O
[	O
i	int
]	O
=	O
c	int
;	O
}	O
else	O
{	O
i	int
=	O
0	int
;	O
while	O
(	O
i	int
<	O
n	int
)	O
{	O
c	int
=	O
pt_table	array
[	O
bitbuf	short
>>	O
(	O
BITBUFSIZ	O
-	O
8	int
)	O
]	O
;	O
if	O
(	O
c	int
>=	O
NT	O
)	O
{	O
mask	int
=	O
(	O
unsigned	O
)	O
1	int
<<	O
(	O
BITBUFSIZ	O
-	O
1	int
-	O
8	int
)	O
;	O
do	O
{	O
if	O
(	O
bitbuf	short
&	O
mask	int
)	O
c	int
=	O
right	O
[	O
c	int
]	O
;	O
else	O
c	int
=	O
left	O
[	O
c	int
]	O
;	O
mask	int
>>=	O
1	int
;	O
}	O
while	O
(	O
c	int
>=	O
NT	O
)	O
;	O
}	O
fillbuf	function
(	O
(	O
int	O
)	O
pt_len	array
[	O
c	int
]	O
)	O
;	O
if	O
(	O
c	int
<=	O
2	int
)	O
{	O
if	O
(	O
c	int
==	O
0	int
)	O
c	int
=	O
1	int
;	O
else	O
if	O
(	O
c	int
==	O
1	int
)	O
c	int
=	O
getbits	function
(	O
4	int
)	O
+	O
3	int
;	O
else	O
c	int
=	O
getbits	function
(	O
CBIT	int
)	O
+	O
20	int
;	O
while	O
(	O
--	O
c	int
>=	O
0	int
)	O
c_len	O
[	O
i	int
++	O
]	O
=	O
0	int
;	O
}	O
else	O
c_len	O
[	O
i	int
++	O
]	O
=	O
c	int
-	O
2	int
;	O
}	O
while	O
(	O
i	int
<	O
NC	O
)	O
c_len	O
[	O
i	int
++	O
]	O
=	O
0	int
;	O
make_table	function
(	O
NC	O
,	O
c_len	O
,	O
12	int
,	O
c_table	O
)	O
;	O
}	O
}	O
local	O
unsigned	O
decode_c	function
(	O
)	O
{	O
unsigned	O
j	int
,	O
mask	int
;	O
if	O
(	O
blocksize	int
==	O
0	int
)	O
{	O
blocksize	int
=	O
getbits	function
(	O
16	int
)	O
;	O
if	O
(	O
blocksize	int
==	O
0	int
)	O
{	O
return	O
NC	O
;	O
}	O
read_pt_len	function
(	O
NT	O
,	O
TBIT	int
,	O
3	int
)	O
;	O
read_c_len	function
(	O
)	O
;	O
read_pt_len	function
(	O
NP	O
,	O
PBIT	int
,	O
-	O
1	int
)	O
;	O
}	O
blocksize	int
--	O
;	O
j	int
=	O
c_table	O
[	O
bitbuf	short
>>	O
(	O
BITBUFSIZ	O
-	O
12	int
)	O
]	O
;	O
if	O
(	O
j	int
>=	O
NC	O
)	O
{	O
mask	int
=	O
(	O
unsigned	O
)	O
1	int
<<	O
(	O
BITBUFSIZ	O
-	O
1	int
-	O
12	int
)	O
;	O
do	O
{	O
if	O
(	O
bitbuf	short
&	O
mask	int
)	O
j	int
=	O
right	O
[	O
j	int
]	O
;	O
else	O
j	int
=	O
left	O
[	O
j	int
]	O
;	O
mask	int
>>=	O
1	int
;	O
}	O
while	O
(	O
j	int
>=	O
NC	O
)	O
;	O
}	O
fillbuf	function
(	O
(	O
int	O
)	O
c_len	O
[	O
j	int
]	O
)	O
;	O
return	O
j	int
;	O
}	O
local	O
unsigned	O
decode_p	function
(	O
)	O
{	O
unsigned	O
j	int
,	O
mask	int
;	O
j	int
=	O
pt_table	array
[	O
bitbuf	short
>>	O
(	O
BITBUFSIZ	O
-	O
8	int
)	O
]	O
;	O
if	O
(	O
j	int
>=	O
NP	O
)	O
{	O
mask	int
=	O
(	O
unsigned	O
)	O
1	int
<<	O
(	O
BITBUFSIZ	O
-	O
1	int
-	O
8	int
)	O
;	O
do	O
{	O
if	O
(	O
bitbuf	short
&	O
mask	int
)	O
j	int
=	O
right	O
[	O
j	int
]	O
;	O
else	O
j	int
=	O
left	O
[	O
j	int
]	O
;	O
mask	int
>>=	O
1	int
;	O
}	O
while	O
(	O
j	int
>=	O
NP	O
)	O
;	O
}	O
fillbuf	function
(	O
(	O
int	O
)	O
pt_len	array
[	O
j	int
]	O
)	O
;	O
if	O
(	O
j	int
!=	O
0	int
)	O
j	int
=	O
(	O
(	O
unsigned	O
)	O
1	int
<<	O
(	O
j	int
-	O
1	int
)	O
)	O
+	O
getbits	function
(	O
(	O
int	O
)	O
(	O
j	int
-	O
1	int
)	O
)	O
;	O
return	O
j	int
;	O
}	O
local	O
void	O
huf_decode_start	function
(	O
)	O
{	O
init_getbits	function
(	O
)	O
;	O
blocksize	int
=	O
0	int
;	O
}	O
local	O
int	O
j	int
;	O
local	O
int	O
done	int
;	O
local	O
void	O
decode_start	function
(	O
)	O
{	O
huf_decode_start	function
(	O
)	O
;	O
j	int
=	O
0	int
;	O
done	int
=	O
0	int
;	O
}	O
local	O
unsigned	O
decode	function
(	O
count	int
,	O
buffer	array
)	O
unsigned	O
count	int
;	O
uch	char
buffer	array
[	O
]	O
;	O
{	O
local	O
unsigned	O
i	int
;	O
unsigned	O
r	int
,	O
c	int
;	O
r	int
=	O
0	int
;	O
while	O
(	O
--	O
j	int
>=	O
0	int
)	O
{	O
buffer	array
[	O
r	int
]	O
=	O
buffer	array
[	O
i	int
]	O
;	O
i	int
=	O
(	O
i	int
+	O
1	int
)	O
&	O
(	O
DICSIZ	O
-	O
1	int
)	O
;	O
if	O
(	O
++	O
r	int
==	O
count	int
)	O
return	O
r	int
;	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
decode_c	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
NC	O
)	O
{	O
done	int
=	O
1	int
;	O
return	O
r	int
;	O
}	O
if	O
(	O
c	int
<=	O
UCHAR_MAX	int
)	O
{	O
buffer	array
[	O
r	int
]	O
=	O
c	int
;	O
if	O
(	O
++	O
r	int
==	O
count	int
)	O
return	O
r	int
;	O
}	O
else	O
{	O
j	int
=	O
c	int
-	O
(	O
UCHAR_MAX	int
+	O
1	int
-	O
THRESHOLD	int
)	O
;	O
i	int
=	O
(	O
r	int
-	O
decode_p	function
(	O
)	O
-	O
1	int
)	O
&	O
(	O
DICSIZ	O
-	O
1	int
)	O
;	O
while	O
(	O
--	O
j	int
>=	O
0	int
)	O
{	O
buffer	array
[	O
r	int
]	O
=	O
buffer	array
[	O
i	int
]	O
;	O
i	int
=	O
(	O
i	int
+	O
1	int
)	O
&	O
(	O
DICSIZ	O
-	O
1	int
)	O
;	O
if	O
(	O
++	O
r	int
==	O
count	int
)	O
return	O
r	int
;	O
}	O
}	O
}	O
}	O
int	O
unlzh	function
(	O
in	int
,	O
out	int
)	O
int	O
in	int
;	O
int	O
out	int
;	O
{	O
unsigned	O
n	int
;	O
ifd	int
=	O
in	int
;	O
ofd	int
=	O
out	int
;	O
decode_start	function
(	O
)	O
;	O
while	O
(	O
!	O
done	int
)	O
{	O
n	int
=	O
decode	function
(	O
(	O
unsigned	O
)	O
DICSIZ	O
,	O
window	array
)	O
;	O
if	O
(	O
!	O
test	int
&&	O
n	int
>	O
0	int
)	O
{	O
write_buf	function
(	O
out	int
,	O
(	O
char	O
*	O
)	O
window	array
,	O
n	int
)	O
;	O
}	O
}	O
return	O
OK	int
;	O
}	O