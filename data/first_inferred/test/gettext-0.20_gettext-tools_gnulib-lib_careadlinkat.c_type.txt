char	O
*	O
careadlinkat	function
(	O
int	O
fd	int
,	O
char	O
const	O
*	O
filename	*
,	O
char	O
*	O
buffer	*
,	O
size_t	long
buffer_size	long
,	O
struct	O
allocator	struct
const	O
*	O
alloc	*
,	O
ssize_t	long
(	O
*	O
preadlinkat	*
)	O
(	O
int	O
,	O
char	O
const	O
*	O
,	O
char	O
*	O
,	O
size_t	long
)	O
)	O
{	O
char	O
*	O
buf	*
;	O
size_t	long
buf_size	long
;	O
size_t	long
buf_size_max	long
=	O
SSIZE_MAX	O
<	O
SIZE_MAX	O
?	O
(	O
size_t	long
)	O
SSIZE_MAX	O
+	O
1	int
:	O
SIZE_MAX	O
;	O
char	O
stack_buf	array
[	O
1024	int
]	O
;	O
if	O
(	O
!	O
alloc	*
)	O
alloc	*
=	O
&	O
stdlib_allocator	struct
;	O
if	O
(	O
!	O
buffer_size	long
)	O
{	O
buffer	*
=	O
stack_buf	array
;	O
buffer_size	long
=	O
sizeof	O
stack_buf	array
;	O
}	O
buf	*
=	O
buffer	*
;	O
buf_size	long
=	O
buffer_size	long
;	O
do	O
{	O
ssize_t	long
link_length	long
=	O
preadlinkat	*
(	O
fd	int
,	O
filename	*
,	O
buf	*
,	O
buf_size	long
)	O
;	O
size_t	long
link_size	long
;	O
if	O
(	O
link_length	long
<	O
0	int
)	O
{	O
int	O
readlinkat_errno	int
=	O
errno	O
;	O
if	O
(	O
readlinkat_errno	int
!=	O
ERANGE	int
)	O
{	O
if	O
(	O
buf	*
!=	O
buffer	*
)	O
{	O
alloc	*
->	O
free	*
(	O
buf	*
)	O
;	O
errno	O
=	O
readlinkat_errno	int
;	O
}	O
return	O
NULL	O
;	O
}	O
}	O
link_size	long
=	O
link_length	long
;	O
if	O
(	O
link_size	long
<	O
buf_size	long
)	O
{	O
buf	*
[	O
link_size	long
++	O
]	O
=	O
'\0'	O
;	O
if	O
(	O
buf	*
==	O
stack_buf	array
)	O
{	O
char	O
*	O
b	*
=	O
(	O
char	O
*	O
)	O
alloc	*
->	O
allocate	*
(	O
link_size	long
)	O
;	O
buf_size	long
=	O
link_size	long
;	O
if	O
(	O
!	O
b	*
)	O
break	O
;	O
memcpy	function
(	O
b	*
,	O
buf	*
,	O
link_size	long
)	O
;	O
buf	*
=	O
b	*
;	O
}	O
else	O
if	O
(	O
link_size	long
<	O
buf_size	long
&&	O
buf	*
!=	O
buffer	*
&&	O
alloc	*
->	O
reallocate	*
)	O
{	O
char	O
*	O
b	*
=	O
(	O
char	O
*	O
)	O
alloc	*
->	O
reallocate	*
(	O
buf	*
,	O
link_size	long
)	O
;	O
if	O
(	O
b	*
)	O
buf	*
=	O
b	*
;	O
}	O
return	O
buf	*
;	O
}	O
if	O
(	O
buf	*
!=	O
buffer	*
)	O
alloc	*
->	O
free	*
(	O
buf	*
)	O
;	O
if	O
(	O
buf_size	long
<=	O
buf_size_max	long
/	O
2	int
)	O
buf_size	long
*=	O
2	int
;	O
else	O
if	O
(	O
buf_size	long
<	O
buf_size_max	long
)	O
buf_size	long
=	O
buf_size_max	long
;	O
else	O
if	O
(	O
buf_size_max	long
<	O
SIZE_MAX	O
)	O
{	O
errno	O
=	O
ENAMETOOLONG	int
;	O
return	O
NULL	O
;	O
}	O
else	O
break	O
;	O
buf	*
=	O
(	O
char	O
*	O
)	O
alloc	*
->	O
allocate	*
(	O
buf_size	long
)	O
;	O
}	O
while	O
(	O
buf	*
)	O
;	O
if	O
(	O
alloc	*
->	O
die	*
)	O
alloc	*
->	O
die	*
(	O
buf_size	long
)	O
;	O
errno	O
=	O
ENOMEM	int
;	O
return	O
NULL	O
;	O
}	O