void	O
sexp_input_init	function
(	O
struct	O
sexp_input	struct
*	O
input	pointer
,	O
FILE	struct
*	O
f	pointer
)	O
{	O
input	pointer
->	O
f	pointer
=	O
f	pointer
;	O
input	pointer
->	O
coding	pointer
=	O
NULL	O
;	O
}	O
static	O
void	O
sexp_get_raw_char	function
(	O
struct	O
sexp_input	struct
*	O
input	pointer
)	O
{	O
int	O
c	int
=	O
getc	function
(	O
input	pointer
->	O
f	pointer
)	O
;	O
if	O
(	O
c	int
<	O
0	int
)	O
{	O
if	O
(	O
ferror	function
(	O
input	pointer
->	O
f	pointer
)	O
)	O
die	function
(	O
"Read error: %s\n"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
input	pointer
->	O
ctype	enum
=	O
SEXP_EOF_CHAR	int
;	O
}	O
else	O
{	O
input	pointer
->	O
ctype	enum
=	O
SEXP_NORMAL_CHAR	int
;	O
input	pointer
->	O
c	int
=	O
c	int
;	O
}	O
}	O
void	O
sexp_get_char	function
(	O
struct	O
sexp_input	struct
*	O
input	pointer
)	O
{	O
if	O
(	O
input	pointer
->	O
coding	pointer
)	O
for	O
(	O
;	O
;	O
)	O
{	O
size_t	long
done	long
;	O
sexp_get_raw_char	function
(	O
input	pointer
)	O
;	O
if	O
(	O
input	pointer
->	O
ctype	enum
==	O
SEXP_EOF_CHAR	int
)	O
die	function
(	O
"Unexpected end of file in coded data.\n"	pointer
)	O
;	O
if	O
(	O
input	pointer
->	O
c	int
==	O
input	pointer
->	O
terminator	char
)	O
{	O
input	pointer
->	O
ctype	enum
=	O
SEXP_END_CHAR	int
;	O
return	O
;	O
}	O
done	long
=	O
1	int
;	O
if	O
(	O
!	O
input	pointer
->	O
coding	pointer
->	O
decode_update	pointer
(	O
&	O
input	pointer
->	O
state	pointer
,	O
&	O
done	long
,	O
&	O
input	pointer
->	O
c	int
,	O
1	int
,	O
(	O
const	O
char	O
*	O
)	O
&	O
input	pointer
->	O
c	int
)	O
)	O
die	function
(	O
"Invalid coded data.\n"	pointer
)	O
;	O
if	O
(	O
done	long
)	O
return	O
;	O
}	O
else	O
sexp_get_raw_char	function
(	O
input	pointer
)	O
;	O
}	O
static	O
uint8_t	char
sexp_next_char	function
(	O
struct	O
sexp_input	struct
*	O
input	pointer
)	O
{	O
sexp_get_char	function
(	O
input	pointer
)	O
;	O
if	O
(	O
input	pointer
->	O
ctype	enum
!=	O
SEXP_NORMAL_CHAR	int
)	O
die	function
(	O
"Unexpected end of file.\n"	pointer
)	O
;	O
return	O
input	pointer
->	O
c	int
;	O
}	O
static	O
void	O
sexp_push_char	function
(	O
struct	O
sexp_input	struct
*	O
input	pointer
,	O
struct	O
nettle_buffer	struct
*	O
string	pointer
)	O
{	O
assert	O
(	O
input	pointer
->	O
ctype	enum
==	O
SEXP_NORMAL_CHAR	int
)	O
;	O
if	O
(	O
!	O
NETTLE_BUFFER_PUTC	O
(	O
string	pointer
,	O
input	pointer
->	O
c	int
)	O
)	O
die	function
(	O
"Virtual memory exhasuted.\n"	pointer
)	O
;	O
}	O
static	O
void	O
sexp_input_start_coding	function
(	O
struct	O
sexp_input	struct
*	O
input	pointer
,	O
const	O
struct	O
nettle_armor	struct
*	O
coding	pointer
,	O
uint8_t	char
terminator	char
)	O
{	O
assert	O
(	O
!	O
input	pointer
->	O
coding	pointer
)	O
;	O
input	pointer
->	O
coding	pointer
=	O
coding	pointer
;	O
input	pointer
->	O
coding	pointer
->	O
decode_init	pointer
(	O
&	O
input	pointer
->	O
state	pointer
)	O
;	O
input	pointer
->	O
terminator	char
=	O
terminator	char
;	O
}	O
static	O
void	O
sexp_input_end_coding	function
(	O
struct	O
sexp_input	struct
*	O
input	pointer
)	O
{	O
assert	O
(	O
input	pointer
->	O
coding	pointer
)	O
;	O
if	O
(	O
!	O
input	pointer
->	O
coding	pointer
->	O
decode_final	pointer
(	O
&	O
input	pointer
->	O
state	pointer
)	O
)	O
die	function
(	O
"Invalid coded data.\n"	pointer
)	O
;	O
input	pointer
->	O
coding	pointer
=	O
NULL	O
;	O
}	O
static	O
int	O
sexp_get_quoted_char	function
(	O
struct	O
sexp_input	struct
*	O
input	pointer
)	O
{	O
sexp_next_char	function
(	O
input	pointer
)	O
;	O
switch	O
(	O
input	pointer
->	O
c	int
)	O
{	O
default	O
:	O
return	O
1	int
;	O
case	O
'\"'	O
:	O
return	O
0	int
;	O
case	O
'\\'	O
:	O
sexp_next_char	function
(	O
input	pointer
)	O
;	O
switch	O
(	O
input	pointer
->	O
c	int
)	O
{	O
case	O
'b'	O
:	O
input	pointer
->	O
c	int
=	O
'\b'	O
;	O
return	O
1	int
;	O
case	O
't'	O
:	O
input	pointer
->	O
c	int
=	O
'\t'	O
;	O
return	O
1	int
;	O
case	O
'n'	O
:	O
input	pointer
->	O
c	int
=	O
'\n'	O
;	O
return	O
1	int
;	O
case	O
'f'	O
:	O
input	pointer
->	O
c	int
=	O
'\f'	O
;	O
return	O
1	int
;	O
case	O
'r'	O
:	O
input	pointer
->	O
c	int
=	O
'\r'	O
;	O
return	O
1	int
;	O
case	O
'\\'	O
:	O
input	pointer
->	O
c	int
=	O
'\\'	O
;	O
return	O
1	int
;	O
case	O
'o'	O
:	O
case	O
'x'	O
:	O
abort	function
(	O
)	O
;	O
case	O
'\n'	O
:	O
if	O
(	O
sexp_next_char	function
(	O
input	pointer
)	O
==	O
'\r'	O
)	O
sexp_next_char	function
(	O
input	pointer
)	O
;	O
break	O
;	O
case	O
'\r'	O
:	O
if	O
(	O
sexp_next_char	function
(	O
input	pointer
)	O
==	O
'\n'	O
)	O
sexp_next_char	function
(	O
input	pointer
)	O
;	O
break	O
;	O
}	O
return	O
1	int
;	O
}	O
}	O
static	O
void	O
sexp_get_token_string	function
(	O
struct	O
sexp_input	struct
*	O
input	pointer
,	O
struct	O
nettle_buffer	struct
*	O
string	pointer
)	O
{	O
assert	O
(	O
!	O
input	pointer
->	O
coding	pointer
)	O
;	O
assert	O
(	O
input	pointer
->	O
ctype	enum
==	O
SEXP_NORMAL_CHAR	int
)	O
;	O
if	O
(	O
!	O
TOKEN_CHAR	O
(	O
input	pointer
->	O
c	int
)	O
)	O
die	function
(	O
"Invalid token.\n"	pointer
)	O
;	O
do	O
{	O
sexp_push_char	function
(	O
input	pointer
,	O
string	pointer
)	O
;	O
sexp_get_char	function
(	O
input	pointer
)	O
;	O
}	O
while	O
(	O
input	pointer
->	O
ctype	enum
==	O
SEXP_NORMAL_CHAR	int
&&	O
TOKEN_CHAR	O
(	O
input	pointer
->	O
c	int
)	O
)	O
;	O
assert	O
(	O
string	pointer
->	O
size	long
)	O
;	O
}	O
static	O
void	O
sexp_get_string	function
(	O
struct	O
sexp_input	struct
*	O
input	pointer
,	O
struct	O
nettle_buffer	struct
*	O
string	pointer
)	O
{	O
nettle_buffer_reset	function
(	O
string	pointer
)	O
;	O
input	pointer
->	O
token	enum
=	O
SEXP_STRING	int
;	O
switch	O
(	O
input	pointer
->	O
c	int
)	O
{	O
case	O
'\"'	O
:	O
while	O
(	O
sexp_get_quoted_char	function
(	O
input	pointer
)	O
)	O
sexp_push_char	function
(	O
input	pointer
,	O
string	pointer
)	O
;	O
sexp_get_char	function
(	O
input	pointer
)	O
;	O
break	O
;	O
case	O
'#'	O
:	O
sexp_input_start_coding	function
(	O
input	pointer
,	O
&	O
nettle_base16	struct
,	O
'#'	O
)	O
;	O
goto	O
decode	O
;	O
case	O
'|'	O
:	O
sexp_input_start_coding	function
(	O
input	pointer
,	O
&	O
nettle_base64	struct
,	O
'|'	O
)	O
;	O
decode	O
:	O
for	O
(	O
;	O
;	O
)	O
{	O
sexp_get_char	function
(	O
input	pointer
)	O
;	O
switch	O
(	O
input	pointer
->	O
ctype	enum
)	O
{	O
case	O
SEXP_NORMAL_CHAR	int
:	O
sexp_push_char	function
(	O
input	pointer
,	O
string	pointer
)	O
;	O
break	O
;	O
case	O
SEXP_EOF_CHAR	int
:	O
die	function
(	O
"Unexpected end of file in coded string.\n"	pointer
)	O
;	O
case	O
SEXP_END_CHAR	int
:	O
sexp_input_end_coding	function
(	O
input	pointer
)	O
;	O
sexp_get_char	function
(	O
input	pointer
)	O
;	O
return	O
;	O
}	O
}	O
break	O
;	O
default	O
:	O
sexp_get_token_string	function
(	O
input	pointer
,	O
string	pointer
)	O
;	O
break	O
;	O
}	O
}	O
static	O
void	O
sexp_get_string_length	function
(	O
struct	O
sexp_input	struct
*	O
input	pointer
,	O
enum	O
sexp_mode	enum
mode	enum
,	O
struct	O
nettle_buffer	struct
*	O
string	pointer
)	O
{	O
unsigned	O
length	long
;	O
nettle_buffer_reset	function
(	O
string	pointer
)	O
;	O
input	pointer
->	O
token	enum
=	O
SEXP_STRING	int
;	O
length	long
=	O
input	pointer
->	O
c	int
-	O
'0'	O
;	O
if	O
(	O
!	O
length	long
)	O
sexp_next_char	function
(	O
input	pointer
)	O
;	O
else	O
{	O
assert	O
(	O
length	long
<	O
10	int
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
sexp_next_char	function
(	O
input	pointer
)	O
;	O
if	O
(	O
input	pointer
->	O
c	int
<	O
'0'	O
||	O
input	pointer
->	O
c	int
>	O
'9'	O
)	O
break	O
;	O
length	long
=	O
length	long
*	O
10	int
+	O
input	pointer
->	O
c	int
-	O
'0'	O
;	O
}	O
}	O
if	O
(	O
input	pointer
->	O
c	int
==	O
':'	O
)	O
for	O
(	O
;	O
length	long
;	O
length	long
--	O
)	O
{	O
sexp_next_char	function
(	O
input	pointer
)	O
;	O
sexp_push_char	function
(	O
input	pointer
,	O
string	pointer
)	O
;	O
}	O
else	O
if	O
(	O
mode	enum
!=	O
SEXP_ADVANCED	int
)	O
die	function
(	O
"Encountered advanced string in canonical mode.\n"	pointer
)	O
;	O
else	O
switch	O
(	O
input	pointer
->	O
c	int
)	O
{	O
case	O
'"'	O
:	O
for	O
(	O
;	O
length	long
;	O
length	long
--	O
)	O
if	O
(	O
sexp_get_quoted_char	function
(	O
input	pointer
)	O
)	O
sexp_push_char	function
(	O
input	pointer
,	O
string	pointer
)	O
;	O
else	O
die	function
(	O
"Unexpected end of string.\n"	pointer
)	O
;	O
if	O
(	O
sexp_get_quoted_char	function
(	O
input	pointer
)	O
)	O
die	function
(	O
"Quoted string longer than expected.\n"	pointer
)	O
;	O
break	O
;	O
case	O
'#'	O
:	O
sexp_input_start_coding	function
(	O
input	pointer
,	O
&	O
nettle_base16	struct
,	O
'#'	O
)	O
;	O
goto	O
decode	O
;	O
case	O
'|'	O
:	O
sexp_input_start_coding	function
(	O
input	pointer
,	O
&	O
nettle_base64	struct
,	O
'|'	O
)	O
;	O
decode	O
:	O
for	O
(	O
;	O
length	long
;	O
length	long
--	O
)	O
{	O
sexp_next_char	function
(	O
input	pointer
)	O
;	O
sexp_push_char	function
(	O
input	pointer
,	O
string	pointer
)	O
;	O
}	O
sexp_get_char	function
(	O
input	pointer
)	O
;	O
if	O
(	O
input	pointer
->	O
ctype	enum
!=	O
SEXP_END_CHAR	int
)	O
die	function
(	O
"Coded string too long.\n"	pointer
)	O
;	O
sexp_input_end_coding	function
(	O
input	pointer
)	O
;	O
break	O
;	O
default	O
:	O
die	function
(	O
"Invalid string.\n"	pointer
)	O
;	O
}	O
sexp_get_char	function
(	O
input	pointer
)	O
;	O
}	O
static	O
void	O
sexp_get_comment	function
(	O
struct	O
sexp_input	struct
*	O
input	pointer
,	O
struct	O
nettle_buffer	struct
*	O
string	pointer
)	O
{	O
nettle_buffer_reset	function
(	O
string	pointer
)	O
;	O
assert	O
(	O
input	pointer
->	O
ctype	enum
==	O
SEXP_NORMAL_CHAR	int
)	O
;	O
assert	O
(	O
input	pointer
->	O
c	int
==	O
';'	O
)	O
;	O
do	O
{	O
sexp_push_char	function
(	O
input	pointer
,	O
string	pointer
)	O
;	O
sexp_get_raw_char	function
(	O
input	pointer
)	O
;	O
}	O
while	O
(	O
input	pointer
->	O
ctype	enum
==	O
SEXP_NORMAL_CHAR	int
&&	O
input	pointer
->	O
c	int
!=	O
'\n'	O
)	O
;	O
input	pointer
->	O
token	enum
=	O
SEXP_COMMENT	int
;	O
}	O
void	O
sexp_get_token	function
(	O
struct	O
sexp_input	struct
*	O
input	pointer
,	O
enum	O
sexp_mode	enum
mode	enum
,	O
struct	O
nettle_buffer	struct
*	O
string	pointer
)	O
{	O
for	O
(	O
;	O
;	O
)	O
switch	O
(	O
input	pointer
->	O
ctype	enum
)	O
{	O
case	O
SEXP_EOF_CHAR	int
:	O
input	pointer
->	O
token	enum
=	O
SEXP_EOF	int
;	O
return	O
;	O
case	O
SEXP_END_CHAR	int
:	O
input	pointer
->	O
token	enum
=	O
SEXP_CODING_END	int
;	O
sexp_input_end_coding	function
(	O
input	pointer
)	O
;	O
sexp_get_char	function
(	O
input	pointer
)	O
;	O
return	O
;	O
case	O
SEXP_NORMAL_CHAR	int
:	O
switch	O
(	O
input	pointer
->	O
c	int
)	O
{	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
sexp_get_string_length	function
(	O
input	pointer
,	O
mode	enum
,	O
string	pointer
)	O
;	O
return	O
;	O
case	O
'('	O
:	O
input	pointer
->	O
token	enum
=	O
SEXP_LIST_START	int
;	O
sexp_get_char	function
(	O
input	pointer
)	O
;	O
return	O
;	O
case	O
')'	O
:	O
input	pointer
->	O
token	enum
=	O
SEXP_LIST_END	int
;	O
sexp_get_char	function
(	O
input	pointer
)	O
;	O
return	O
;	O
case	O
'['	O
:	O
input	pointer
->	O
token	enum
=	O
SEXP_DISPLAY_START	int
;	O
sexp_get_char	function
(	O
input	pointer
)	O
;	O
return	O
;	O
case	O
']'	O
:	O
input	pointer
->	O
token	enum
=	O
SEXP_DISPLAY_END	int
;	O
sexp_get_char	function
(	O
input	pointer
)	O
;	O
return	O
;	O
case	O
'{'	O
:	O
if	O
(	O
mode	enum
==	O
SEXP_CANONICAL	int
)	O
die	function
(	O
"Unexpected transport data in canonical mode.\n"	pointer
)	O
;	O
sexp_input_start_coding	function
(	O
input	pointer
,	O
&	O
nettle_base64	struct
,	O
'}'	O
)	O
;	O
sexp_get_char	function
(	O
input	pointer
)	O
;	O
input	pointer
->	O
token	enum
=	O
SEXP_TRANSPORT_START	int
;	O
return	O
;	O
case	O
' '	O
:	O
case	O
'\t'	O
:	O
case	O
'\n'	O
:	O
case	O
'\r'	O
:	O
if	O
(	O
mode	enum
==	O
SEXP_CANONICAL	int
)	O
die	function
(	O
"Whitespace encountered in canonical mode.\n"	pointer
)	O
;	O
sexp_get_char	function
(	O
input	pointer
)	O
;	O
break	O
;	O
case	O
';'	O
:	O
if	O
(	O
mode	enum
==	O
SEXP_CANONICAL	int
)	O
die	function
(	O
"Comment encountered in canonical mode.\n"	pointer
)	O
;	O
sexp_get_comment	function
(	O
input	pointer
,	O
string	pointer
)	O
;	O
return	O
;	O
default	O
:	O
if	O
(	O
mode	enum
!=	O
SEXP_ADVANCED	int
)	O
die	function
(	O
"Encountered advanced string in canonical mode.\n"	pointer
)	O
;	O
sexp_get_string	function
(	O
input	pointer
,	O
string	pointer
)	O
;	O
return	O
;	O
}	O
}	O
}	O