static	O
void	O
miInsertEdgeInET	function
(	O
EdgeTable	struct
*	O
ET	*
,	O
EdgeTableEntry	struct
*	O
ETE	*
,	O
int	O
scanline	int
,	O
ScanLineListBlock	struct
*	O
*	O
SLLBlock	*
,	O
int	O
*	O
iSLLBlock	*
)	O
{	O
EdgeTableEntry	struct
*	O
start	*
,	O
*	O
prev	*
;	O
ScanLineList	struct
*	O
pSLL	*
,	O
*	O
pPrevSLL	*
;	O
ScanLineListBlock	struct
*	O
tmpSLLBlock	*
;	O
pPrevSLL	*
=	O
&	O
ET	*
->	O
scanlines	struct
;	O
pSLL	*
=	O
pPrevSLL	*
->	O
next	*
;	O
while	O
(	O
pSLL	*
&&	O
(	O
pSLL	*
->	O
scanline	int
<	O
scanline	int
)	O
)	O
{	O
pPrevSLL	*
=	O
pSLL	*
;	O
pSLL	*
=	O
pSLL	*
->	O
next	*
;	O
}	O
if	O
(	O
(	O
!	O
pSLL	*
)	O
||	O
(	O
pSLL	*
->	O
scanline	int
>	O
scanline	int
)	O
)	O
{	O
if	O
(	O
*	O
iSLLBlock	*
>	O
SLLSPERBLOCK	int
-	O
1	int
)	O
{	O
tmpSLLBlock	*
=	O
(	O
ScanLineListBlock	struct
*	O
)	O
mi_xmalloc	O
(	O
sizeof	O
(	O
ScanLineListBlock	struct
)	O
)	O
;	O
(	O
*	O
SLLBlock	*
)	O
->	O
next	*
=	O
tmpSLLBlock	*
;	O
tmpSLLBlock	*
->	O
next	*
=	O
(	O
ScanLineListBlock	struct
*	O
)	O
NULL	O
;	O
*	O
SLLBlock	*
=	O
tmpSLLBlock	*
;	O
*	O
iSLLBlock	*
=	O
0	int
;	O
}	O
pSLL	*
=	O
&	O
(	O
(	O
*	O
SLLBlock	*
)	O
->	O
SLLs	array
[	O
(	O
*	O
iSLLBlock	*
)	O
++	O
]	O
)	O
;	O
pSLL	*
->	O
next	*
=	O
pPrevSLL	*
->	O
next	*
;	O
pSLL	*
->	O
edgelist	*
=	O
(	O
EdgeTableEntry	struct
*	O
)	O
NULL	O
;	O
pPrevSLL	*
->	O
next	*
=	O
pSLL	*
;	O
}	O
pSLL	*
->	O
scanline	int
=	O
scanline	int
;	O
prev	*
=	O
(	O
EdgeTableEntry	struct
*	O
)	O
NULL	O
;	O
start	*
=	O
pSLL	*
->	O
edgelist	*
;	O
while	O
(	O
start	*
&&	O
(	O
start	*
->	O
bres	struct
.	O
minor_axis	int
<	O
ETE	*
->	O
bres	struct
.	O
minor_axis	int
)	O
)	O
{	O
prev	*
=	O
start	*
;	O
start	*
=	O
start	*
->	O
next	*
;	O
}	O
ETE	*
->	O
next	*
=	O
start	*
;	O
if	O
(	O
prev	*
)	O
prev	*
->	O
next	*
=	O
ETE	*
;	O
else	O
pSLL	*
->	O
edgelist	*
=	O
ETE	*
;	O
}	O
void	O
miCreateETandAET	O
(	O
int	O
count	int
,	O
const	O
miPoint	struct
*	O
pts	array
,	O
EdgeTable	struct
*	O
ET	*
,	O
EdgeTableEntry	struct
*	O
AET	*
,	O
EdgeTableEntry	struct
*	O
pETEs	*
,	O
ScanLineListBlock	struct
*	O
pSLLBlock	*
)	O
{	O
const	O
miPoint	struct
*	O
top	*
,	O
*	O
bottom	*
;	O
const	O
miPoint	struct
*	O
PrevPt	*
,	O
*	O
CurrPt	*
;	O
int	O
iSLLBlock	*
=	O
0	int
;	O
int	O
dy	int
;	O
if	O
(	O
count	int
<	O
2	int
)	O
return	O
;	O
AET	*
->	O
next	*
=	O
(	O
EdgeTableEntry	struct
*	O
)	O
NULL	O
;	O
AET	*
->	O
back	*
=	O
(	O
EdgeTableEntry	struct
*	O
)	O
NULL	O
;	O
AET	*
->	O
nextWETE	*
=	O
(	O
EdgeTableEntry	struct
*	O
)	O
NULL	O
;	O
AET	*
->	O
bres	struct
.	O
minor_axis	int
=	O
INT_MIN	O
;	O
ET	*
->	O
scanlines	struct
.	O
next	*
=	O
(	O
ScanLineList	struct
*	O
)	O
NULL	O
;	O
ET	*
->	O
ymax	double
=	O
INT_MIN	O
;	O
ET	*
->	O
ymin	double
=	O
INT_MAX	O
;	O
pSLLBlock	*
->	O
next	*
=	O
(	O
ScanLineListBlock	struct
*	O
)	O
NULL	O
;	O
PrevPt	*
=	O
&	O
pts	array
[	O
count	int
-	O
1	int
]	O
;	O
while	O
(	O
count	int
--	O
)	O
{	O
CurrPt	*
=	O
pts	array
++	O
;	O
if	O
(	O
PrevPt	*
->	O
y	double
>	O
CurrPt	*
->	O
y	double
)	O
{	O
bottom	*
=	O
PrevPt	*
,	O
top	*
=	O
CurrPt	*
;	O
pETEs	*
->	O
ClockWise	enum
=	O
false	int
;	O
}	O
else	O
{	O
bottom	*
=	O
CurrPt	*
,	O
top	*
=	O
PrevPt	*
;	O
pETEs	*
->	O
ClockWise	enum
=	O
true	int
;	O
}	O
if	O
(	O
bottom	*
->	O
y	double
!=	O
top	*
->	O
y	double
)	O
{	O
pETEs	*
->	O
ymax	double
=	O
bottom	*
->	O
y	double
-	O
1	int
;	O
dy	int
=	O
bottom	*
->	O
y	double
-	O
top	*
->	O
y	double
;	O
BRESINITPGONSTRUCT	O
(	O
dy	int
,	O
top	*
->	O
x	double
,	O
bottom	*
->	O
x	double
,	O
pETEs	*
->	O
bres	struct
)	O
;	O
miInsertEdgeInET	function
(	O
ET	*
,	O
pETEs	*
,	O
top	*
->	O
y	double
,	O
&	O
pSLLBlock	*
,	O
&	O
iSLLBlock	*
)	O
;	O
ET	*
->	O
ymax	double
=	O
IMAX	O
(	O
ET	*
->	O
ymax	double
,	O
PrevPt	*
->	O
y	double
)	O
;	O
ET	*
->	O
ymin	double
=	O
IMIN	O
(	O
ET	*
->	O
ymin	double
,	O
PrevPt	*
->	O
y	double
)	O
;	O
pETEs	*
++	O
;	O
}	O
PrevPt	*
=	O
CurrPt	*
;	O
}	O
}	O
void	O
miloadAET	O
(	O
EdgeTableEntry	struct
*	O
AET	*
,	O
EdgeTableEntry	struct
*	O
ETEs	*
)	O
{	O
EdgeTableEntry	struct
*	O
pPrevAET	*
;	O
EdgeTableEntry	struct
*	O
tmp	*
;	O
pPrevAET	*
=	O
AET	*
;	O
AET	*
=	O
AET	*
->	O
next	*
;	O
while	O
(	O
ETEs	*
)	O
{	O
while	O
(	O
AET	*
&&	O
(	O
AET	*
->	O
bres	struct
.	O
minor_axis	int
<	O
ETEs	*
->	O
bres	struct
.	O
minor_axis	int
)	O
)	O
{	O
pPrevAET	*
=	O
AET	*
;	O
AET	*
=	O
AET	*
->	O
next	*
;	O
}	O
tmp	*
=	O
ETEs	*
->	O
next	*
;	O
ETEs	*
->	O
next	*
=	O
AET	*
;	O
if	O
(	O
AET	*
)	O
AET	*
->	O
back	*
=	O
ETEs	*
;	O
ETEs	*
->	O
back	*
=	O
pPrevAET	*
;	O
pPrevAET	*
->	O
next	*
=	O
ETEs	*
;	O
pPrevAET	*
=	O
ETEs	*
;	O
ETEs	*
=	O
tmp	*
;	O
}	O
}	O
void	O
micomputeWAET	O
(	O
EdgeTableEntry	struct
*	O
AET	*
)	O
{	O
EdgeTableEntry	struct
*	O
pWETE	*
;	O
int	O
inside	int
=	O
1	int
;	O
int	O
isInside	int
=	O
0	int
;	O
AET	*
->	O
nextWETE	*
=	O
(	O
EdgeTableEntry	struct
*	O
)	O
NULL	O
;	O
pWETE	*
=	O
AET	*
;	O
AET	*
=	O
AET	*
->	O
next	*
;	O
while	O
(	O
AET	*
)	O
{	O
if	O
(	O
AET	*
->	O
ClockWise	enum
)	O
isInside	int
++	O
;	O
else	O
isInside	int
--	O
;	O
if	O
(	O
(	O
!	O
inside	int
&&	O
!	O
isInside	int
)	O
||	O
(	O
inside	int
&&	O
isInside	int
)	O
)	O
{	O
pWETE	*
->	O
nextWETE	*
=	O
AET	*
;	O
pWETE	*
=	O
AET	*
;	O
inside	int
=	O
!	O
inside	int
;	O
}	O
AET	*
=	O
AET	*
->	O
next	*
;	O
}	O
pWETE	*
->	O
nextWETE	*
=	O
(	O
EdgeTableEntry	struct
*	O
)	O
NULL	O
;	O
}	O
bool	enum
miInsertionSort	O
(	O
EdgeTableEntry	struct
*	O
AET	*
)	O
{	O
EdgeTableEntry	struct
*	O
pETEchase	*
;	O
EdgeTableEntry	struct
*	O
pETEinsert	*
;	O
EdgeTableEntry	struct
*	O
pETEchaseBackTMP	*
;	O
bool	enum
changed	enum
=	O
false	int
;	O
AET	*
=	O
AET	*
->	O
next	*
;	O
while	O
(	O
AET	*
)	O
{	O
pETEinsert	*
=	O
AET	*
;	O
pETEchase	*
=	O
AET	*
;	O
while	O
(	O
pETEchase	*
->	O
back	*
->	O
bres	struct
.	O
minor_axis	int
>	O
AET	*
->	O
bres	struct
.	O
minor_axis	int
)	O
pETEchase	*
=	O
pETEchase	*
->	O
back	*
;	O
AET	*
=	O
AET	*
->	O
next	*
;	O
if	O
(	O
pETEchase	*
!=	O
pETEinsert	*
)	O
{	O
pETEchaseBackTMP	*
=	O
pETEchase	*
->	O
back	*
;	O
pETEinsert	*
->	O
back	*
->	O
next	*
=	O
AET	*
;	O
if	O
(	O
AET	*
)	O
AET	*
->	O
back	*
=	O
pETEinsert	*
->	O
back	*
;	O
pETEinsert	*
->	O
next	*
=	O
pETEchase	*
;	O
pETEchase	*
->	O
back	*
->	O
next	*
=	O
pETEinsert	*
;	O
pETEchase	*
->	O
back	*
=	O
pETEinsert	*
;	O
pETEinsert	*
->	O
back	*
=	O
pETEchaseBackTMP	*
;	O
changed	enum
=	O
true	int
;	O
}	O
}	O
return	O
changed	enum
;	O
}	O
void	O
miFreeStorage	O
(	O
ScanLineListBlock	struct
*	O
pSLLBlock	*
)	O
{	O
ScanLineListBlock	struct
*	O
tmpSLLBlock	*
;	O
while	O
(	O
pSLLBlock	*
)	O
{	O
tmpSLLBlock	*
=	O
pSLLBlock	*
->	O
next	*
;	O
free	function
(	O
pSLLBlock	*
)	O
;	O
pSLLBlock	*
=	O
tmpSLLBlock	*
;	O
}	O
}	O