enum	O
_BAR_SIZES	enum
{	O
_BAR_FILENAME_SIZE	int
=	O
20	int
,	O
_BAR_RATIO_SIZE	int
=	O
3	int
,	O
_BAR_METER_COST	int
=	O
2	int
,	O
_BAR_DOWNBYTES_SIZE	int
=	O
8	int
,	O
_BAR_SPEED_SIZE	int
=	O
8	int
,	O
}	O
;	O
enum	O
_BAR_DECOR_SIZE	enum
{	O
_BAR_DECOR_COST	int
=	O
_BAR_FILENAME_SIZE	int
+	O
1	int
+	O
_BAR_RATIO_SIZE	int
+	O
2	int
+	O
_BAR_METER_COST	int
+	O
1	int
+	O
_BAR_DOWNBYTES_SIZE	int
+	O
1	int
+	O
_BAR_SPEED_SIZE	int
+	O
3	int
}	O
;	O
enum	O
_SCREEN_WIDTH	enum
{	O
DEFAULT_SCREEN_WIDTH	int
=	O
70	int
,	O
MINIMUM_SCREEN_WIDTH	int
=	O
45	int
,	O
}	O
;	O
enum	O
_bar_slot_status_t	enum
{	O
EMPTY	int
=	O
0	int
,	O
DOWNLOADING	int
=	O
1	int
,	O
COMPLETE	int
=	O
2	int
}	O
;	O
enum	O
_BAR_SETTINGS	enum
{	O
SPEED_RING_SIZE	int
=	O
24	int
,	O
}	O
;	O
typedef	O
struct	O
{	O
char	O
*	O
progress	pointer
,	O
*	O
filename	pointer
,	O
speed_buf	array
[	O
_BAR_SPEED_SIZE	int
]	O
,	O
human_size	array
[	O
_BAR_DOWNBYTES_SIZE	int
]	O
;	O
uint64_t	long
file_size	long
,	O
time_ring	array
[	O
SPEED_RING_SIZE	int
]	O
,	O
bytes_ring	array
[	O
SPEED_RING_SIZE	int
]	O
,	O
bytes_downloaded	long
;	O
int	O
ring_pos	int
,	O
ring_used	int
,	O
tick	long
,	O
numfiles	int
;	O
enum	O
_bar_slot_status_t	enum
status	int
;	O
bool	bool
redraw	bool
:	O
1	int
;	O
}	O
_bar_slot_t	struct
;	O
struct	O
wget_bar_st	struct
{	O
_bar_slot_t	struct
*	O
slots	pointer
;	O
char	O
*	O
progress_mem_holder	pointer
,	O
*	O
unknown_size	pointer
,	O
*	O
known_size	pointer
,	O
*	O
spaces	pointer
;	O
int	O
nslots	int
,	O
max_width	int
;	O
wget_thread_mutex	pointer
mutex	pointer
;	O
}	O
;	O
static	O
wget_report_speed	enum
report_speed_type	enum
=	O
WGET_REPORT_SPEED_BYTES	int
;	O
static	O
char	O
report_speed_type_char	char
=	O
'B'	O
;	O
static	O
unsigned	O
short	O
speed_modifier	short
=	O
1000	int
;	O
static	O
void	O
_bar_update_speed_stats	function
(	O
_bar_slot_t	struct
*	O
slotp	pointer
)	O
{	O
int	O
ring_pos	int
=	O
slotp	pointer
->	O
ring_pos	int
;	O
int	O
ring_used	int
=	O
slotp	pointer
->	O
ring_used	int
;	O
int	O
next_pos	int
;	O
if	O
(	O
slotp	pointer
->	O
bytes_downloaded	long
==	O
slotp	pointer
->	O
bytes_ring	array
[	O
ring_pos	int
]	O
)	O
{	O
return	O
;	O
}	O
uint64_t	long
curtime	long
=	O
wget_get_timemillis	function
(	O
)	O
;	O
if	O
(	O
++	O
ring_pos	int
==	O
SPEED_RING_SIZE	int
)	O
ring_pos	int
=	O
0	int
;	O
slotp	pointer
->	O
bytes_ring	array
[	O
ring_pos	int
]	O
=	O
slotp	pointer
->	O
bytes_downloaded	long
;	O
slotp	pointer
->	O
time_ring	array
[	O
ring_pos	int
]	O
=	O
curtime	long
;	O
if	O
(	O
ring_used	int
<	O
SPEED_RING_SIZE	int
)	O
{	O
ring_used	int
++	O
;	O
next_pos	int
=	O
1	int
;	O
}	O
else	O
{	O
next_pos	int
=	O
(	O
ring_pos	int
+	O
1	int
==	O
SPEED_RING_SIZE	int
)	O
?	O
0	int
:	O
ring_pos	int
+	O
1	int
;	O
}	O
if	O
(	O
ring_used	int
<	O
2	int
)	O
{	O
wget_strlcpy	function
(	O
slotp	pointer
->	O
speed_buf	array
,	O
" --.-K"	pointer
,	O
sizeof	O
(	O
slotp	pointer
->	O
speed_buf	array
)	O
)	O
;	O
}	O
else	O
{	O
size_t	long
bytes	long
=	O
slotp	pointer
->	O
bytes_ring	array
[	O
ring_pos	int
]	O
-	O
slotp	pointer
->	O
bytes_ring	array
[	O
next_pos	int
]	O
;	O
size_t	long
time	struct
=	O
slotp	pointer
->	O
time_ring	array
[	O
ring_pos	int
]	O
-	O
slotp	pointer
->	O
time_ring	array
[	O
next_pos	int
]	O
;	O
size_t	long
speed	long
=	O
(	O
bytes	long
*	O
speed_modifier	short
)	O
/	O
(	O
time	struct
?	O
time	struct
:	O
1	int
)	O
;	O
wget_human_readable	function
(	O
slotp	pointer
->	O
speed_buf	array
,	O
sizeof	O
(	O
slotp	pointer
->	O
speed_buf	array
)	O
,	O
speed	long
)	O
;	O
}	O
slotp	pointer
->	O
ring_pos	int
=	O
ring_pos	int
;	O
slotp	pointer
->	O
ring_used	int
=	O
ring_used	int
;	O
}	O
static	O
volatile	O
sig_atomic_t	int
winsize_changed	int
;	O
static	O
inline	O
WGET_GCC_ALWAYS_INLINE	O
void	O
_restore_cursor_position	function
(	O
void	O
)	O
{	O
fputs	function
(	O
"\0338"	pointer
,	O
stdout	pointer
)	O
;	O
}	O
static	O
inline	O
WGET_GCC_ALWAYS_INLINE	O
void	O
_bar_print_slot	function
(	O
const	O
wget_bar	struct
*	O
bar	pointer
,	O
int	O
slot	int
)	O
{	O
wget_fprintf	function
(	O
stdout	pointer
,	O
"\0337\033[%dA\033[1G"	pointer
,	O
bar	pointer
->	O
nslots	int
-	O
slot	int
)	O
;	O
}	O
static	O
inline	O
WGET_GCC_ALWAYS_INLINE	O
void	O
_bar_set_progress	function
(	O
const	O
wget_bar	struct
*	O
bar	pointer
,	O
int	O
slot	int
)	O
{	O
_bar_slot_t	struct
*	O
slotp	pointer
=	O
&	O
bar	pointer
->	O
slots	pointer
[	O
slot	int
]	O
;	O
if	O
(	O
slotp	pointer
->	O
file_size	long
>	O
0	int
)	O
{	O
size_t	long
bytes	long
=	O
slotp	pointer
->	O
bytes_downloaded	long
;	O
int	O
cols	int
=	O
(	O
int	O
)	O
(	O
(	O
bytes	long
/	O
(	O
double	O
)	O
slotp	pointer
->	O
file_size	long
)	O
*	O
bar	pointer
->	O
max_width	int
)	O
;	O
if	O
(	O
cols	int
>	O
bar	pointer
->	O
max_width	int
)	O
cols	int
=	O
bar	pointer
->	O
max_width	int
;	O
else	O
if	O
(	O
cols	int
<=	O
0	int
)	O
cols	int
=	O
1	int
;	O
memcpy	function
(	O
slotp	pointer
->	O
progress	pointer
,	O
bar	pointer
->	O
known_size	pointer
,	O
cols	int
-	O
1	int
)	O
;	O
slotp	pointer
->	O
progress	pointer
[	O
cols	int
-	O
1	int
]	O
=	O
'>'	O
;	O
if	O
(	O
cols	int
<	O
bar	pointer
->	O
max_width	int
)	O
memset	function
(	O
slotp	pointer
->	O
progress	pointer
+	O
cols	int
,	O
' '	O
,	O
bar	pointer
->	O
max_width	int
-	O
cols	int
)	O
;	O
}	O
else	O
{	O
int	O
ind	int
=	O
slotp	pointer
->	O
tick	long
%	O
(	O
bar	pointer
->	O
max_width	int
*	O
2	int
-	O
6	int
)	O
;	O
int	O
pre_space	int
;	O
if	O
(	O
ind	int
<=	O
bar	pointer
->	O
max_width	int
-	O
3	int
)	O
pre_space	int
=	O
ind	int
;	O
else	O
pre_space	int
=	O
bar	pointer
->	O
max_width	int
-	O
(	O
ind	int
-	O
bar	pointer
->	O
max_width	int
+	O
5	int
)	O
;	O
memset	function
(	O
slotp	pointer
->	O
progress	pointer
,	O
' '	O
,	O
bar	pointer
->	O
max_width	int
)	O
;	O
memcpy	function
(	O
slotp	pointer
->	O
progress	pointer
+	O
pre_space	int
,	O
"<=>"	pointer
,	O
3	int
)	O
;	O
}	O
slotp	pointer
->	O
progress	pointer
[	O
bar	pointer
->	O
max_width	int
]	O
=	O
0	int
;	O
}	O
static	O
void	O
inspect_multibyte	function
(	O
char	O
*	O
s	pointer
,	O
size_t	long
available_space	long
,	O
size_t	long
*	O
inspectedp	pointer
,	O
size_t	long
*	O
padp	pointer
)	O
{	O
unsigned	O
int	O
displayed	int
=	O
0	int
;	O
int	O
inspected	int
=	O
0	int
;	O
wchar_t	int
wide	int
;	O
int	O
mblen	function
;	O
size_t	long
remaining	long
;	O
if	O
(	O
!	O
s	pointer
)	O
{	O
*	O
inspectedp	pointer
=	O
inspected	int
;	O
*	O
padp	pointer
=	O
available_space	long
;	O
return	O
;	O
}	O
remaining	long
=	O
strlen	function
(	O
s	pointer
)	O
;	O
while	O
(	O
(	O
mblen	function
=	O
mbtowc	function
(	O
&	O
wide	int
,	O
&	O
s	pointer
[	O
inspected	int
]	O
,	O
remaining	long
)	O
)	O
>	O
0	int
)	O
{	O
int	O
wid	int
=	O
wcwidth	function
(	O
wide	int
)	O
;	O
if	O
(	O
(	O
wid	int
==	O
0	int
&&	O
displayed	int
==	O
available_space	long
)	O
||	O
displayed	int
+	O
wid	int
>	O
available_space	long
)	O
break	O
;	O
inspected	int
+=	O
mblen	function
;	O
remaining	long
-=	O
mblen	function
;	O
displayed	int
+=	O
wid	int
;	O
}	O
*	O
inspectedp	pointer
=	O
inspected	int
;	O
*	O
padp	pointer
=	O
available_space	long
-	O
displayed	int
;	O
}	O
static	O
void	O
_bar_update_slot	function
(	O
const	O
wget_bar	struct
*	O
bar	pointer
,	O
int	O
slot	int
)	O
{	O
_bar_slot_t	struct
*	O
slotp	pointer
=	O
&	O
bar	pointer
->	O
slots	pointer
[	O
slot	int
]	O
;	O
if	O
(	O
slotp	pointer
->	O
status	int
==	O
DOWNLOADING	int
||	O
slotp	pointer
->	O
status	int
==	O
COMPLETE	int
)	O
{	O
uint64_t	long
max	int
,	O
cur	long
;	O
int	O
ratio	int
;	O
size_t	long
consumed	long
,	O
pad	long
;	O
max	int
=	O
slotp	pointer
->	O
file_size	long
;	O
cur	long
=	O
slotp	pointer
->	O
bytes_downloaded	long
;	O
ratio	int
=	O
max	int
?	O
(	O
int	O
)	O
(	O
(	O
100	int
*	O
cur	long
)	O
/	O
max	int
)	O
:	O
0	int
;	O
wget_human_readable	function
(	O
slotp	pointer
->	O
human_size	array
,	O
sizeof	O
(	O
slotp	pointer
->	O
human_size	array
)	O
,	O
cur	long
)	O
;	O
_bar_update_speed_stats	function
(	O
slotp	pointer
)	O
;	O
_bar_set_progress	function
(	O
bar	pointer
,	O
slot	int
)	O
;	O
_bar_print_slot	function
(	O
bar	pointer
,	O
slot	int
)	O
;	O
inspect_multibyte	function
(	O
slotp	pointer
->	O
filename	pointer
,	O
_BAR_FILENAME_SIZE	int
,	O
&	O
consumed	long
,	O
&	O
pad	long
)	O
;	O
wget_fprintf	function
(	O
stdout	pointer
,	O
"%-*.*s %*d%% [%s] %*s %*s%c/s"	pointer
,	O
(	O
int	O
)	O
(	O
consumed	long
+	O
pad	long
)	O
,	O
(	O
int	O
)	O
(	O
consumed	long
+	O
pad	long
)	O
,	O
slotp	pointer
->	O
filename	pointer
,	O
_BAR_RATIO_SIZE	int
,	O
ratio	int
,	O
slotp	pointer
->	O
progress	pointer
,	O
_BAR_DOWNBYTES_SIZE	int
,	O
slotp	pointer
->	O
human_size	array
,	O
_BAR_SPEED_SIZE	int
,	O
slotp	pointer
->	O
speed_buf	array
,	O
report_speed_type_char	char
)	O
;	O
_restore_cursor_position	function
(	O
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
slotp	pointer
->	O
tick	long
++	O
;	O
}	O
}	O
static	O
int	O
_bar_get_width	function
(	O
void	O
)	O
{	O
int	O
width	pointer
=	O
DEFAULT_SCREEN_WIDTH	int
;	O
if	O
(	O
wget_get_screen_size	function
(	O
&	O
width	pointer
,	O
NULL	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
width	pointer
<	O
MINIMUM_SCREEN_WIDTH	int
)	O
width	pointer
=	O
MINIMUM_SCREEN_WIDTH	int
;	O
else	O
width	pointer
--	O
;	O
}	O
return	O
width	pointer
-	O
_BAR_DECOR_COST	int
;	O
}	O
static	O
void	O
_bar_update_winsize	function
(	O
wget_bar	struct
*	O
bar	pointer
,	O
bool	bool
slots_changed	bool
)	O
{	O
if	O
(	O
winsize_changed	int
||	O
slots_changed	bool
)	O
{	O
char	O
*	O
progress_mem_holder	pointer
;	O
int	O
max_width	int
=	O
_bar_get_width	function
(	O
)	O
;	O
if	O
(	O
!	O
(	O
progress_mem_holder	pointer
=	O
wget_calloc	function
(	O
bar	pointer
->	O
nslots	int
,	O
max_width	int
+	O
1	int
)	O
)	O
)	O
return	O
;	O
if	O
(	O
bar	pointer
->	O
max_width	int
<	O
max_width	int
)	O
{	O
char	O
*	O
known_size	pointer
=	O
wget_malloc	function
(	O
max_width	int
)	O
;	O
char	O
*	O
unknown_size	pointer
=	O
wget_malloc	function
(	O
max_width	int
)	O
;	O
char	O
*	O
spaces	pointer
=	O
wget_malloc	function
(	O
max_width	int
)	O
;	O
if	O
(	O
!	O
known_size	pointer
||	O
!	O
unknown_size	pointer
||	O
!	O
spaces	pointer
)	O
{	O
xfree	O
(	O
spaces	pointer
)	O
;	O
xfree	O
(	O
unknown_size	pointer
)	O
;	O
xfree	O
(	O
known_size	pointer
)	O
;	O
xfree	O
(	O
progress_mem_holder	pointer
)	O
;	O
return	O
;	O
}	O
xfree	O
(	O
bar	pointer
->	O
known_size	pointer
)	O
;	O
bar	pointer
->	O
known_size	pointer
=	O
known_size	pointer
;	O
memset	function
(	O
bar	pointer
->	O
known_size	pointer
,	O
'='	O
,	O
max_width	int
)	O
;	O
xfree	O
(	O
bar	pointer
->	O
unknown_size	pointer
)	O
;	O
bar	pointer
->	O
unknown_size	pointer
=	O
unknown_size	pointer
;	O
memset	function
(	O
bar	pointer
->	O
unknown_size	pointer
,	O
'*'	O
,	O
max_width	int
)	O
;	O
xfree	O
(	O
bar	pointer
->	O
spaces	pointer
)	O
;	O
bar	pointer
->	O
spaces	pointer
=	O
spaces	pointer
;	O
memset	function
(	O
bar	pointer
->	O
spaces	pointer
,	O
' '	O
,	O
max_width	int
)	O
;	O
}	O
xfree	O
(	O
bar	pointer
->	O
progress_mem_holder	pointer
)	O
;	O
bar	pointer
->	O
progress_mem_holder	pointer
=	O
progress_mem_holder	pointer
;	O
for	O
(	O
int	O
i	int
=	O
0	int
;	O
i	int
<	O
bar	pointer
->	O
nslots	int
;	O
i	int
++	O
)	O
{	O
bar	pointer
->	O
slots	pointer
[	O
i	int
]	O
.	O
progress	pointer
=	O
bar	pointer
->	O
progress_mem_holder	pointer
+	O
(	O
i	int
*	O
max_width	int
)	O
;	O
}	O
bar	pointer
->	O
max_width	int
=	O
max_width	int
;	O
}	O
winsize_changed	int
=	O
0	int
;	O
}	O
static	O
void	O
_bar_update	function
(	O
wget_bar	struct
*	O
bar	pointer
)	O
{	O
_bar_update_winsize	function
(	O
bar	pointer
,	O
false	int
)	O
;	O
for	O
(	O
int	O
i	int
=	O
0	int
;	O
i	int
<	O
bar	pointer
->	O
nslots	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
bar	pointer
->	O
slots	pointer
[	O
i	int
]	O
.	O
redraw	bool
||	O
winsize_changed	int
)	O
{	O
_bar_update_slot	function
(	O
bar	pointer
,	O
i	int
)	O
;	O
bar	pointer
->	O
slots	pointer
[	O
i	int
]	O
.	O
redraw	bool
=	O
0	int
;	O
}	O
}	O
}	O
wget_bar	struct
*	O
wget_bar_init	function
(	O
wget_bar	struct
*	O
bar	pointer
,	O
int	O
nslots	int
)	O
{	O
int	O
max_width	int
=	O
_bar_get_width	function
(	O
)	O
;	O
if	O
(	O
nslots	int
<	O
1	int
||	O
max_width	int
<	O
1	int
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
bar	pointer
)	O
{	O
if	O
(	O
!	O
(	O
bar	pointer
=	O
wget_calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
bar	pointer
)	O
)	O
)	O
)	O
return	O
NULL	O
;	O
}	O
else	O
memset	function
(	O
bar	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
bar	pointer
)	O
)	O
;	O
wget_thread_mutex_init	function
(	O
&	O
bar	pointer
->	O
mutex	pointer
)	O
;	O
wget_bar_set_slots	function
(	O
bar	pointer
,	O
nslots	int
)	O
;	O
return	O
bar	pointer
;	O
}	O
void	O
wget_bar_set_slots	function
(	O
wget_bar	struct
*	O
bar	pointer
,	O
int	O
nslots	int
)	O
{	O
wget_thread_mutex_lock	function
(	O
bar	pointer
->	O
mutex	pointer
)	O
;	O
int	O
more_slots	int
=	O
nslots	int
-	O
bar	pointer
->	O
nslots	int
;	O
if	O
(	O
more_slots	int
>	O
0	int
)	O
{	O
_bar_slot_t	struct
*	O
slots	pointer
=	O
wget_realloc	function
(	O
bar	pointer
->	O
slots	pointer
,	O
nslots	int
*	O
sizeof	O
(	O
_bar_slot_t	struct
)	O
)	O
;	O
if	O
(	O
!	O
slots	pointer
)	O
{	O
wget_thread_mutex_unlock	function
(	O
bar	pointer
->	O
mutex	pointer
)	O
;	O
return	O
;	O
}	O
bar	pointer
->	O
slots	pointer
=	O
slots	pointer
;	O
memset	function
(	O
bar	pointer
->	O
slots	pointer
+	O
bar	pointer
->	O
nslots	int
,	O
0	int
,	O
more_slots	int
*	O
sizeof	O
(	O
_bar_slot_t	struct
)	O
)	O
;	O
bar	pointer
->	O
nslots	int
=	O
nslots	int
;	O
for	O
(	O
int	O
i	int
=	O
0	int
;	O
i	int
<	O
more_slots	int
;	O
i	int
++	O
)	O
fputs	function
(	O
"\n"	pointer
,	O
stdout	pointer
)	O
;	O
_bar_update_winsize	function
(	O
bar	pointer
,	O
true	int
)	O
;	O
_bar_update	function
(	O
bar	pointer
)	O
;	O
}	O
wget_thread_mutex_unlock	function
(	O
bar	pointer
->	O
mutex	pointer
)	O
;	O
}	O
void	O
wget_bar_slot_begin	function
(	O
wget_bar	struct
*	O
bar	pointer
,	O
int	O
slot	int
,	O
const	O
char	O
*	O
filename	pointer
,	O
int	O
new_file	int
,	O
ssize_t	long
file_size	long
)	O
{	O
wget_thread_mutex_lock	function
(	O
bar	pointer
->	O
mutex	pointer
)	O
;	O
_bar_slot_t	struct
*	O
slotp	pointer
=	O
&	O
bar	pointer
->	O
slots	pointer
[	O
slot	int
]	O
;	O
xfree	O
(	O
slotp	pointer
->	O
filename	pointer
)	O
;	O
if	O
(	O
new_file	int
)	O
slotp	pointer
->	O
numfiles	int
++	O
;	O
if	O
(	O
slotp	pointer
->	O
numfiles	int
==	O
1	int
)	O
{	O
slotp	pointer
->	O
filename	pointer
=	O
wget_strdup	function
(	O
filename	pointer
)	O
;	O
}	O
else	O
{	O
slotp	pointer
->	O
filename	pointer
=	O
wget_aprintf	function
(	O
"%d files"	pointer
,	O
slotp	pointer
->	O
numfiles	int
)	O
;	O
}	O
slotp	pointer
->	O
tick	long
=	O
0	int
;	O
slotp	pointer
->	O
file_size	long
+=	O
file_size	long
;	O
slotp	pointer
->	O
status	int
=	O
DOWNLOADING	int
;	O
slotp	pointer
->	O
redraw	bool
=	O
1	int
;	O
slotp	pointer
->	O
ring_pos	int
=	O
0	int
;	O
slotp	pointer
->	O
ring_used	int
=	O
0	int
;	O
memset	function
(	O
&	O
slotp	pointer
->	O
time_ring	array
,	O
0	int
,	O
sizeof	O
(	O
slotp	pointer
->	O
time_ring	array
)	O
)	O
;	O
memset	function
(	O
&	O
slotp	pointer
->	O
bytes_ring	array
,	O
0	int
,	O
sizeof	O
(	O
slotp	pointer
->	O
bytes_ring	array
)	O
)	O
;	O
wget_thread_mutex_unlock	function
(	O
bar	pointer
->	O
mutex	pointer
)	O
;	O
}	O
void	O
wget_bar_slot_downloaded	function
(	O
wget_bar	struct
*	O
bar	pointer
,	O
int	O
slot	int
,	O
size_t	long
nbytes	long
)	O
{	O
wget_thread_mutex_lock	function
(	O
bar	pointer
->	O
mutex	pointer
)	O
;	O
bar	pointer
->	O
slots	pointer
[	O
slot	int
]	O
.	O
bytes_downloaded	long
+=	O
nbytes	long
;	O
bar	pointer
->	O
slots	pointer
[	O
slot	int
]	O
.	O
redraw	bool
=	O
1	int
;	O
wget_thread_mutex_unlock	function
(	O
bar	pointer
->	O
mutex	pointer
)	O
;	O
}	O
void	O
wget_bar_slot_deregister	function
(	O
wget_bar	struct
*	O
bar	pointer
,	O
int	O
slot	int
)	O
{	O
wget_thread_mutex_lock	function
(	O
bar	pointer
->	O
mutex	pointer
)	O
;	O
if	O
(	O
slot	int
>=	O
0	int
&&	O
slot	int
<	O
bar	pointer
->	O
nslots	int
)	O
{	O
_bar_slot_t	struct
*	O
slotp	pointer
=	O
&	O
bar	pointer
->	O
slots	pointer
[	O
slot	int
]	O
;	O
slotp	pointer
->	O
status	int
=	O
COMPLETE	int
;	O
_bar_update_slot	function
(	O
bar	pointer
,	O
slot	int
)	O
;	O
}	O
wget_thread_mutex_unlock	function
(	O
bar	pointer
->	O
mutex	pointer
)	O
;	O
}	O
void	O
wget_bar_update	function
(	O
wget_bar	struct
*	O
bar	pointer
)	O
{	O
wget_thread_mutex_lock	function
(	O
bar	pointer
->	O
mutex	pointer
)	O
;	O
_bar_update	function
(	O
bar	pointer
)	O
;	O
wget_thread_mutex_unlock	function
(	O
bar	pointer
->	O
mutex	pointer
)	O
;	O
}	O
void	O
wget_bar_deinit	function
(	O
wget_bar	struct
*	O
bar	pointer
)	O
{	O
if	O
(	O
bar	pointer
)	O
{	O
for	O
(	O
int	O
i	int
=	O
0	int
;	O
i	int
<	O
bar	pointer
->	O
nslots	int
;	O
i	int
++	O
)	O
{	O
xfree	O
(	O
bar	pointer
->	O
slots	pointer
[	O
i	int
]	O
.	O
filename	pointer
)	O
;	O
}	O
xfree	O
(	O
bar	pointer
->	O
progress_mem_holder	pointer
)	O
;	O
xfree	O
(	O
bar	pointer
->	O
spaces	pointer
)	O
;	O
xfree	O
(	O
bar	pointer
->	O
known_size	pointer
)	O
;	O
xfree	O
(	O
bar	pointer
->	O
unknown_size	pointer
)	O
;	O
xfree	O
(	O
bar	pointer
->	O
slots	pointer
)	O
;	O
wget_thread_mutex_destroy	function
(	O
&	O
bar	pointer
->	O
mutex	pointer
)	O
;	O
}	O
}	O
void	O
wget_bar_free	function
(	O
wget_bar	struct
*	O
*	O
bar	pointer
)	O
{	O
if	O
(	O
bar	pointer
)	O
{	O
wget_bar_deinit	function
(	O
*	O
bar	pointer
)	O
;	O
xfree	O
(	O
*	O
bar	pointer
)	O
;	O
}	O
}	O
void	O
wget_bar_print	function
(	O
wget_bar	struct
*	O
bar	pointer
,	O
int	O
slot	int
,	O
const	O
char	O
*	O
display	pointer
)	O
{	O
wget_thread_mutex_lock	function
(	O
bar	pointer
->	O
mutex	pointer
)	O
;	O
_bar_print_slot	function
(	O
bar	pointer
,	O
slot	int
)	O
;	O
wget_fprintf	function
(	O
stdout	pointer
,	O
"\033[27G[%-*.*s]"	pointer
,	O
bar	pointer
->	O
max_width	int
,	O
bar	pointer
->	O
max_width	int
,	O
display	pointer
)	O
;	O
_restore_cursor_position	function
(	O
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
wget_thread_mutex_unlock	function
(	O
bar	pointer
->	O
mutex	pointer
)	O
;	O
}	O
void	O
wget_bar_vprintf	function
(	O
wget_bar	struct
*	O
bar	pointer
,	O
int	O
slot	int
,	O
const	O
char	O
*	O
fmt	pointer
,	O
va_list	array
args	array
)	O
{	O
char	O
text	pointer
[	O
bar	pointer
->	O
max_width	int
+	O
1	int
]	O
;	O
wget_vsnprintf	function
(	O
text	pointer
,	O
sizeof	O
(	O
text	pointer
)	O
,	O
fmt	pointer
,	O
args	array
)	O
;	O
wget_bar_print	function
(	O
bar	pointer
,	O
slot	int
,	O
text	pointer
)	O
;	O
}	O
void	O
wget_bar_printf	function
(	O
wget_bar	struct
*	O
bar	pointer
,	O
int	O
slot	int
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
args	array
;	O
va_start	O
(	O
args	array
,	O
fmt	pointer
)	O
;	O
wget_bar_vprintf	function
(	O
bar	pointer
,	O
slot	int
,	O
fmt	pointer
,	O
args	array
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
}	O
void	O
wget_bar_screen_resized	function
(	O
void	O
)	O
{	O
winsize_changed	int
=	O
1	int
;	O
}	O
void	O
wget_bar_write_line	function
(	O
wget_bar	struct
*	O
bar	pointer
,	O
const	O
char	O
*	O
buf	pointer
,	O
size_t	long
len	long
)	O
{	O
wget_thread_mutex_lock	function
(	O
bar	pointer
->	O
mutex	pointer
)	O
;	O
wget_fprintf	function
(	O
stdout	pointer
,	O
"\0337\033[1S\033[%dA\033[1G\033[0J\033[31m"	pointer
,	O
bar	pointer
->	O
nslots	int
+	O
1	int
)	O
;	O
fwrite	function
(	O
buf	pointer
,	O
1	int
,	O
len	long
,	O
stdout	pointer
)	O
;	O
fputs	function
(	O
"\033[m"	pointer
,	O
stdout	pointer
)	O
;	O
_restore_cursor_position	function
(	O
)	O
;	O
_bar_update	function
(	O
bar	pointer
)	O
;	O
wget_thread_mutex_unlock	function
(	O
bar	pointer
->	O
mutex	pointer
)	O
;	O
}	O
void	O
wget_bar_set_speed_type	function
(	O
wget_report_speed	enum
type	pointer
)	O
{	O
report_speed_type	enum
=	O
type	pointer
;	O
if	O
(	O
type	pointer
==	O
WGET_REPORT_SPEED_BITS	int
)	O
{	O
report_speed_type_char	char
=	O
'b'	O
;	O
speed_modifier	short
=	O
8	int
;	O
}	O
}	O