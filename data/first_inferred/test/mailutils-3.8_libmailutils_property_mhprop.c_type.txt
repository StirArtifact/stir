static	O
void	O
_mh_prop_done	function
(	O
struct	O
_mu_property	struct
*	O
prop	*
)	O
{	O
struct	O
mu_mh_prop	struct
*	O
mhprop	*
=	O
prop	*
->	O
_prop_init_data	*
;	O
mu_header_t	*
header	*
=	O
prop	*
->	O
_prop_data	*
;	O
mu_header_destroy	function
(	O
&	O
header	*
)	O
;	O
free	function
(	O
mhprop	*
->	O
filename	*
)	O
;	O
free	function
(	O
mhprop	*
)	O
;	O
}	O
static	O
int	O
_mh_prop_getval	function
(	O
struct	O
_mu_property	struct
*	O
prop	*
,	O
const	O
char	O
*	O
key	*
,	O
const	O
char	O
*	O
*	O
pval	*
)	O
{	O
mu_header_t	*
header	*
=	O
prop	*
->	O
_prop_data	*
;	O
if	O
(	O
!	O
header	*
)	O
return	O
MU_ERR_NOENT	O
;	O
return	O
mu_header_sget_value	O
(	O
header	*
,	O
key	*
,	O
pval	*
)	O
;	O
}	O
static	O
int	O
_mh_prop_setval	function
(	O
struct	O
_mu_property	struct
*	O
prop	*
,	O
const	O
char	O
*	O
key	*
,	O
const	O
char	O
*	O
val	*
,	O
int	O
overwrite	int
)	O
{	O
struct	O
mu_mh_prop	struct
*	O
mhprop	*
=	O
prop	*
->	O
_prop_init_data	*
;	O
mu_header_t	*
header	*
=	O
prop	*
->	O
_prop_data	*
;	O
if	O
(	O
!	O
header	*
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
(	O
rc	int
=	O
mu_header_create	function
(	O
&	O
header	*
,	O
NULL	O
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot create context %s: %s"	*
)	O
,	O
mhprop	*
->	O
filename	*
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
prop	*
->	O
_prop_data	*
=	O
header	*
;	O
}	O
return	O
mu_header_set_value	function
(	O
header	*
,	O
key	*
,	O
val	*
,	O
overwrite	int
)	O
;	O
}	O
static	O
int	O
_mh_prop_unset	function
(	O
struct	O
_mu_property	struct
*	O
prop	*
,	O
const	O
char	O
*	O
key	*
)	O
{	O
mu_header_t	*
header	*
=	O
prop	*
->	O
_prop_data	*
;	O
if	O
(	O
!	O
header	*
)	O
return	O
0	int
;	O
return	O
mu_header_remove	function
(	O
header	*
,	O
key	*
,	O
1	int
)	O
;	O
}	O
static	O
int	O
_mh_prop_getitr	function
(	O
struct	O
_mu_property	struct
*	O
prop	*
,	O
mu_iterator_t	*
*	O
pitr	*
)	O
{	O
mu_header_t	*
header	*
=	O
prop	*
->	O
_prop_data	*
;	O
return	O
mu_header_get_iterator	function
(	O
header	*
,	O
pitr	*
)	O
;	O
}	O
static	O
int	O
_mh_prop_clear	function
(	O
struct	O
_mu_property	struct
*	O
prop	*
)	O
{	O
mu_header_t	*
header	*
=	O
prop	*
->	O
_prop_data	*
;	O
return	O
mu_header_clear	function
(	O
header	*
)	O
;	O
}	O
static	O
int	O
_mh_prop_read_stream	function
(	O
mu_header_t	*
*	O
phdr	*
,	O
mu_stream_t	*
stream	*
)	O
{	O
int	O
rc	int
;	O
mu_stream_t	*
flt	*
;	O
const	O
char	O
*	O
argv	*
[	O
4	int
]	O
;	O
mu_off_t	long
size	long
;	O
size_t	long
total	long
;	O
char	O
*	O
blurb	*
;	O
rc	int
=	O
mu_stream_size	function
(	O
stream	*
,	O
&	O
size	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
argv	*
[	O
0	int
]	O
=	O
"INLINE-COMMENT"	*
;	O
argv	*
[	O
1	int
]	O
=	O
"#"	*
;	O
argv	*
[	O
2	int
]	O
=	O
"-r"	*
;	O
argv	*
[	O
3	int
]	O
=	O
NULL	O
;	O
rc	int
=	O
mu_filter_create_args	function
(	O
&	O
flt	*
,	O
stream	*
,	O
argv	*
[	O
0	int
]	O
,	O
3	int
,	O
argv	array
,	O
MU_FILTER_DECODE	int
,	O
MU_STREAM_READ	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot open filter stream: %s"	*
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
blurb	*
=	O
malloc	function
(	O
size	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
blurb	*
)	O
{	O
mu_stream_destroy	function
(	O
&	O
flt	*
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
total	long
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
size_t	long
n	long
;	O
rc	int
=	O
mu_stream_read	function
(	O
flt	*
,	O
blurb	int
+	O
total	long
,	O
size	long
-	O
total	long
,	O
&	O
n	long
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
if	O
(	O
n	long
==	O
0	int
)	O
break	O
;	O
total	long
+=	O
n	int
;	O
}	O
mu_stream_destroy	function
(	O
&	O
flt	*
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	function
(	O
blurb	*
)	O
;	O
return	O
rc	int
;	O
}	O
rc	int
=	O
mu_header_create	function
(	O
phdr	*
,	O
blurb	*
,	O
total	long
)	O
;	O
free	function
(	O
blurb	*
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_mh_prop_write_stream	function
(	O
mu_header_t	*
header	*
,	O
struct	O
mu_mh_prop	struct
*	O
mhprop	*
,	O
mu_stream_t	*
stream	*
)	O
{	O
int	O
rc	int
;	O
mu_stream_t	*
instream	*
;	O
mu_off_t	long
size	long
;	O
mu_header_get_streamref	function
(	O
header	*
,	O
&	O
instream	*
)	O
;	O
rc	int
=	O
mu_stream_copy	function
(	O
stream	*
,	O
instream	*
,	O
0	int
,	O
&	O
size	long
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"error writing to context file %s: %s"	*
)	O
,	O
mhprop	*
->	O
filename	*
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
else	O
rc	int
=	O
mu_stream_truncate	function
(	O
stream	*
,	O
size	long
)	O
;	O
mu_stream_destroy	function
(	O
&	O
instream	*
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_mh_prop_fill	function
(	O
struct	O
_mu_property	struct
*	O
prop	*
)	O
{	O
struct	O
mu_mh_prop	struct
*	O
mhprop	*
=	O
prop	*
->	O
_prop_init_data	*
;	O
int	O
rc	int
;	O
mu_stream_t	*
stream	*
;	O
mu_header_t	*
header	*
;	O
rc	int
=	O
mu_file_stream_create	function
(	O
&	O
stream	*
,	O
mhprop	*
->	O
filename	*
,	O
MU_STREAM_READ	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
(	O
rc	int
=	O
mu_header_create	function
(	O
&	O
header	*
,	O
NULL	O
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
mu_error	function
(	O
_	O
(	O
"cannot create context %s: %s"	*
)	O
,	O
mhprop	*
->	O
filename	*
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
}	O
else	O
{	O
rc	int
=	O
_mh_prop_read_stream	function
(	O
&	O
header	*
,	O
stream	*
)	O
;	O
mu_stream_unref	function
(	O
stream	*
)	O
;	O
}	O
if	O
(	O
rc	int
==	O
0	int
)	O
prop	*
->	O
_prop_data	*
=	O
header	*
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_mh_prop_save	function
(	O
struct	O
_mu_property	struct
*	O
prop	*
)	O
{	O
struct	O
mu_mh_prop	struct
*	O
mhprop	*
=	O
prop	*
->	O
_prop_init_data	*
;	O
mu_header_t	*
header	*
=	O
prop	*
->	O
_prop_data	*
;	O
mu_stream_t	*
stream	*
;	O
int	O
rc	int
;	O
if	O
(	O
mhprop	*
->	O
ro	*
)	O
return	O
0	int
;	O
rc	int
=	O
mu_file_stream_create	function
(	O
&	O
stream	*
,	O
mhprop	*
->	O
filename	*
,	O
MU_STREAM_WRITE	int
|	O
MU_STREAM_CREAT	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
_mh_prop_write_stream	function
(	O
header	*
,	O
mhprop	*
,	O
stream	*
)	O
;	O
mu_stream_unref	function
(	O
stream	*
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_mh_property_init	function
(	O
struct	O
_mu_property	struct
*	O
prop	*
)	O
{	O
struct	O
mu_mh_prop	struct
*	O
mhprop	*
=	O
prop	*
->	O
_prop_init_data	*
;	O
if	O
(	O
!	O
mhprop	*
)	O
return	O
EINVAL	int
;	O
prop	*
->	O
_prop_data	*
=	O
NULL	O
;	O
prop	*
->	O
_prop_done	*
=	O
_mh_prop_done	*
;	O
prop	*
->	O
_prop_fill	*
=	O
_mh_prop_fill	function
;	O
prop	*
->	O
_prop_save	*
=	O
_mh_prop_save	function
;	O
prop	*
->	O
_prop_getval	*
=	O
_mh_prop_getval	function
;	O
prop	*
->	O
_prop_setval	*
=	O
_mh_prop_setval	function
;	O
prop	*
->	O
_prop_unset	*
=	O
_mh_prop_unset	function
;	O
prop	*
->	O
_prop_getitr	*
=	O
_mh_prop_getitr	function
;	O
prop	*
->	O
_prop_clear	*
=	O
_mh_prop_clear	int
;	O
return	O
0	int
;	O
}	O