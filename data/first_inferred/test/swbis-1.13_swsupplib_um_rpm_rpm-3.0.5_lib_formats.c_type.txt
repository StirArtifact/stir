static	O
char	O
*	O
permsString	function
(	O
int	O
mode	int
)	O
{	O
char	O
*	O
perms	int
=	O
xmalloc	function
(	O
11	int
)	O
;	O
strcpy	function
(	O
perms	int
,	O
"-----------"	pointer
)	O
;	O
if	O
(	O
mode	int
&	O
S_ISVTX	O
)	O
perms	int
[	O
10	int
]	O
=	O
't'	O
;	O
if	O
(	O
mode	int
&	O
S_IRUSR	O
)	O
perms	int
[	O
1	int
]	O
=	O
'r'	O
;	O
if	O
(	O
mode	int
&	O
S_IWUSR	O
)	O
perms	int
[	O
2	int
]	O
=	O
'w'	O
;	O
if	O
(	O
mode	int
&	O
S_IXUSR	O
)	O
perms	int
[	O
3	int
]	O
=	O
'x'	O
;	O
if	O
(	O
mode	int
&	O
S_IRGRP	O
)	O
perms	int
[	O
4	int
]	O
=	O
'r'	O
;	O
if	O
(	O
mode	int
&	O
S_IWGRP	O
)	O
perms	int
[	O
5	int
]	O
=	O
'w'	O
;	O
if	O
(	O
mode	int
&	O
S_IXGRP	O
)	O
perms	int
[	O
6	int
]	O
=	O
'x'	O
;	O
if	O
(	O
mode	int
&	O
S_IROTH	O
)	O
perms	int
[	O
7	int
]	O
=	O
'r'	O
;	O
if	O
(	O
mode	int
&	O
S_IWOTH	O
)	O
perms	int
[	O
8	int
]	O
=	O
'w'	O
;	O
if	O
(	O
mode	int
&	O
S_IXOTH	O
)	O
perms	int
[	O
9	int
]	O
=	O
'x'	O
;	O
if	O
(	O
mode	int
&	O
S_ISUID	O
)	O
{	O
if	O
(	O
mode	int
&	O
S_IXUSR	O
)	O
perms	int
[	O
3	int
]	O
=	O
's'	O
;	O
else	O
perms	int
[	O
3	int
]	O
=	O
'S'	O
;	O
}	O
if	O
(	O
mode	int
&	O
S_ISGID	O
)	O
{	O
if	O
(	O
mode	int
&	O
S_IXGRP	O
)	O
perms	int
[	O
6	int
]	O
=	O
's'	O
;	O
else	O
perms	int
[	O
6	int
]	O
=	O
'S'	O
;	O
}	O
if	O
(	O
S_ISDIR	O
(	O
mode	int
)	O
)	O
perms	int
[	O
0	int
]	O
=	O
'd'	O
;	O
else	O
if	O
(	O
S_ISLNK	O
(	O
mode	int
)	O
)	O
{	O
perms	int
[	O
0	int
]	O
=	O
'l'	O
;	O
}	O
else	O
if	O
(	O
S_ISFIFO	O
(	O
mode	int
)	O
)	O
perms	int
[	O
0	int
]	O
=	O
'p'	O
;	O
else	O
if	O
(	O
S_ISSOCK	O
(	O
mode	int
)	O
)	O
perms	int
[	O
0	int
]	O
=	O
'l'	O
;	O
else	O
if	O
(	O
S_ISCHR	O
(	O
mode	int
)	O
)	O
{	O
perms	int
[	O
0	int
]	O
=	O
'c'	O
;	O
}	O
else	O
if	O
(	O
S_ISBLK	O
(	O
mode	int
)	O
)	O
{	O
perms	int
[	O
0	int
]	O
=	O
'b'	O
;	O
}	O
return	O
perms	int
;	O
}	O
static	O
char	O
*	O
triggertypeFormat	function
(	O
int_32	int
type	enum
,	O
const	O
void	O
*	O
data	pointer
,	O
char	O
*	O
formatPrefix	pointer
,	O
int	O
padding	int
,	O
int	O
element	array
)	O
{	O
const	O
int_32	int
*	O
item	pointer
=	O
data	pointer
;	O
char	O
*	O
val	array
;	O
if	O
(	O
type	enum
!=	O
RPM_INT32_TYPE	int
)	O
{	O
val	array
=	O
xstrdup	function
(	O
_	O
(	O
"(not a number)"	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
*	O
item	pointer
&	O
RPMSENSE_TRIGGERIN	O
)	O
{	O
val	array
=	O
xstrdup	function
(	O
"in"	pointer
)	O
;	O
}	O
else	O
{	O
val	array
=	O
xstrdup	function
(	O
"un"	pointer
)	O
;	O
}	O
return	O
val	array
;	O
}	O
static	O
char	O
*	O
permsFormat	function
(	O
int_32	int
type	enum
,	O
const	O
void	O
*	O
data	pointer
,	O
char	O
*	O
formatPrefix	pointer
,	O
int	O
padding	int
,	O
int	O
element	array
)	O
{	O
char	O
*	O
val	array
;	O
char	O
*	O
buf	pointer
;	O
if	O
(	O
type	enum
!=	O
RPM_INT32_TYPE	int
)	O
{	O
val	array
=	O
xstrdup	function
(	O
_	O
(	O
"(not a number)"	pointer
)	O
)	O
;	O
}	O
else	O
{	O
val	array
=	O
xmalloc	function
(	O
15	int
+	O
padding	int
)	O
;	O
strcat	function
(	O
formatPrefix	pointer
,	O
"s"	pointer
)	O
;	O
buf	pointer
=	O
permsString	function
(	O
*	O
(	O
(	O
int_32	int
*	O
)	O
data	pointer
)	O
)	O
;	O
sprintf	function
(	O
val	array
,	O
formatPrefix	pointer
,	O
buf	pointer
)	O
;	O
free	function
(	O
buf	pointer
)	O
;	O
}	O
return	O
val	array
;	O
}	O
static	O
char	O
*	O
fflagsFormat	function
(	O
int_32	int
type	enum
,	O
const	O
void	O
*	O
data	pointer
,	O
char	O
*	O
formatPrefix	pointer
,	O
int	O
padding	int
,	O
int	O
element	array
)	O
{	O
char	O
*	O
val	array
;	O
char	O
buf	pointer
[	O
15	int
]	O
;	O
int	O
anint	int
=	O
*	O
(	O
(	O
int_32	int
*	O
)	O
data	pointer
)	O
;	O
if	O
(	O
type	enum
!=	O
RPM_INT32_TYPE	int
)	O
{	O
val	array
=	O
xstrdup	function
(	O
_	O
(	O
"(not a number)"	pointer
)	O
)	O
;	O
}	O
else	O
{	O
buf	pointer
[	O
0	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
anint	int
&	O
RPMFILE_DOC	O
)	O
strcat	function
(	O
buf	pointer
,	O
"d"	pointer
)	O
;	O
if	O
(	O
anint	int
&	O
RPMFILE_CONFIG	O
)	O
strcat	function
(	O
buf	pointer
,	O
"c"	pointer
)	O
;	O
if	O
(	O
anint	int
&	O
RPMFILE_SPECFILE	O
)	O
strcat	function
(	O
buf	pointer
,	O
"s"	pointer
)	O
;	O
if	O
(	O
anint	int
&	O
RPMFILE_MISSINGOK	O
)	O
strcat	function
(	O
buf	pointer
,	O
"m"	pointer
)	O
;	O
if	O
(	O
anint	int
&	O
RPMFILE_NOREPLACE	O
)	O
strcat	function
(	O
buf	pointer
,	O
"n"	pointer
)	O
;	O
if	O
(	O
anint	int
&	O
RPMFILE_GHOST	O
)	O
strcat	function
(	O
buf	pointer
,	O
"g"	pointer
)	O
;	O
val	array
=	O
xmalloc	function
(	O
5	int
+	O
padding	int
)	O
;	O
strcat	function
(	O
formatPrefix	pointer
,	O
"s"	pointer
)	O
;	O
sprintf	function
(	O
val	array
,	O
formatPrefix	pointer
,	O
buf	pointer
)	O
;	O
}	O
return	O
val	array
;	O
}	O
static	O
char	O
*	O
depflagsFormat	function
(	O
int_32	int
type	enum
,	O
const	O
void	O
*	O
data	pointer
,	O
char	O
*	O
formatPrefix	pointer
,	O
int	O
padding	int
,	O
int	O
element	array
)	O
{	O
char	O
*	O
val	array
;	O
char	O
buf	pointer
[	O
10	int
]	O
;	O
int	O
anint	int
=	O
*	O
(	O
(	O
int_32	int
*	O
)	O
data	pointer
)	O
;	O
if	O
(	O
type	enum
!=	O
RPM_INT32_TYPE	int
)	O
{	O
val	array
=	O
xstrdup	function
(	O
_	O
(	O
"(not a number)"	pointer
)	O
)	O
;	O
}	O
else	O
{	O
buf	pointer
[	O
0	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
anint	int
&	O
RPMSENSE_LESS	O
)	O
strcat	function
(	O
buf	pointer
,	O
"<"	pointer
)	O
;	O
if	O
(	O
anint	int
&	O
RPMSENSE_GREATER	O
)	O
strcat	function
(	O
buf	pointer
,	O
">"	pointer
)	O
;	O
if	O
(	O
anint	int
&	O
RPMSENSE_EQUAL	O
)	O
strcat	function
(	O
buf	pointer
,	O
"="	pointer
)	O
;	O
val	array
=	O
xmalloc	function
(	O
5	int
+	O
padding	int
)	O
;	O
strcat	function
(	O
formatPrefix	pointer
,	O
"s"	pointer
)	O
;	O
sprintf	function
(	O
val	array
,	O
formatPrefix	pointer
,	O
buf	pointer
)	O
;	O
}	O
return	O
val	array
;	O
}	O
static	O
int	O
instprefixTag	function
(	O
Header	pointer
h	pointer
,	O
int_32	int
*	O
type	enum
,	O
const	O
void	O
*	O
*	O
data	pointer
,	O
int_32	int
*	O
count	long
,	O
int	O
*	O
freeData	pointer
)	O
{	O
char	O
*	O
*	O
array	pointer
;	O
if	O
(	O
headerGetEntry	function
(	O
h	pointer
,	O
RPMTAG_INSTALLPREFIX	int
,	O
type	enum
,	O
(	O
void	O
*	O
*	O
)	O
data	pointer
,	O
count	long
)	O
)	O
{	O
*	O
freeData	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
headerGetEntry	function
(	O
h	pointer
,	O
RPMTAG_INSTPREFIXES	int
,	O
NULL	O
,	O
(	O
void	O
*	O
*	O
)	O
&	O
array	pointer
,	O
count	long
)	O
)	O
{	O
*	O
data	pointer
=	O
xstrdup	function
(	O
array	pointer
[	O
0	int
]	O
)	O
;	O
*	O
freeData	pointer
=	O
1	int
;	O
*	O
type	enum
=	O
RPM_STRING_TYPE	int
;	O
free	function
(	O
array	pointer
)	O
;	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
triggercondsTag	function
(	O
Header	pointer
h	pointer
,	O
int_32	int
*	O
type	enum
,	O
const	O
void	O
*	O
*	O
data	pointer
,	O
int_32	int
*	O
count	long
,	O
int	O
*	O
freeData	pointer
)	O
{	O
int_32	int
*	O
indices	pointer
,	O
*	O
flags	int
;	O
char	O
*	O
*	O
names	pointer
,	O
*	O
*	O
versions	pointer
;	O
int	O
numNames	int
,	O
numScripts	int
;	O
char	O
*	O
*	O
conds	pointer
,	O
*	O
*	O
s	pointer
;	O
char	O
*	O
item	pointer
,	O
*	O
flagsStr	pointer
;	O
char	O
*	O
chptr	pointer
;	O
int	O
i	int
,	O
j	int
;	O
char	O
buf	pointer
[	O
5	int
]	O
;	O
if	O
(	O
!	O
headerGetEntry	function
(	O
h	pointer
,	O
RPMTAG_TRIGGERNAME	int
,	O
NULL	O
,	O
(	O
void	O
*	O
*	O
)	O
&	O
names	pointer
,	O
&	O
numNames	int
)	O
)	O
{	O
*	O
freeData	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
headerGetEntry	function
(	O
h	pointer
,	O
RPMTAG_TRIGGERINDEX	int
,	O
NULL	O
,	O
(	O
void	O
*	O
*	O
)	O
&	O
indices	pointer
,	O
NULL	O
)	O
;	O
headerGetEntry	function
(	O
h	pointer
,	O
RPMTAG_TRIGGERFLAGS	int
,	O
NULL	O
,	O
(	O
void	O
*	O
*	O
)	O
&	O
flags	int
,	O
NULL	O
)	O
;	O
headerGetEntry	function
(	O
h	pointer
,	O
RPMTAG_TRIGGERVERSION	int
,	O
NULL	O
,	O
(	O
void	O
*	O
*	O
)	O
&	O
versions	pointer
,	O
NULL	O
)	O
;	O
headerGetEntry	function
(	O
h	pointer
,	O
RPMTAG_TRIGGERSCRIPTS	int
,	O
NULL	O
,	O
(	O
void	O
*	O
*	O
)	O
&	O
s	pointer
,	O
&	O
numScripts	int
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
*	O
freeData	pointer
=	O
1	int
;	O
*	O
data	pointer
=	O
conds	pointer
=	O
xmalloc	function
(	O
sizeof	O
(	O
char	O
*	O
)	O
*	O
numScripts	int
)	O
;	O
*	O
count	long
=	O
numScripts	int
;	O
*	O
type	enum
=	O
RPM_STRING_ARRAY_TYPE	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
numScripts	int
;	O
i	int
++	O
)	O
{	O
chptr	pointer
=	O
xstrdup	function
(	O
""	pointer
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
numNames	int
;	O
j	int
++	O
)	O
{	O
if	O
(	O
indices	pointer
[	O
j	int
]	O
!=	O
i	int
)	O
continue	O
;	O
item	pointer
=	O
xmalloc	function
(	O
strlen	function
(	O
names	pointer
[	O
j	int
]	O
)	O
+	O
strlen	function
(	O
versions	pointer
[	O
j	int
]	O
)	O
+	O
20	int
)	O
;	O
if	O
(	O
flags	int
[	O
j	int
]	O
&	O
RPMSENSE_SENSEMASK	int
)	O
{	O
buf	pointer
[	O
0	int
]	O
=	O
'%'	O
,	O
buf	pointer
[	O
1	int
]	O
=	O
'\0'	O
;	O
flagsStr	pointer
=	O
depflagsFormat	function
(	O
RPM_INT32_TYPE	int
,	O
flags	int
,	O
buf	pointer
,	O
0	int
,	O
j	int
)	O
;	O
sprintf	function
(	O
item	pointer
,	O
"%s %s %s"	pointer
,	O
names	pointer
[	O
j	int
]	O
,	O
flagsStr	pointer
,	O
versions	pointer
[	O
j	int
]	O
)	O
;	O
free	function
(	O
flagsStr	pointer
)	O
;	O
}	O
else	O
{	O
strcpy	function
(	O
item	pointer
,	O
names	pointer
[	O
j	int
]	O
)	O
;	O
}	O
chptr	pointer
=	O
xrealloc	function
(	O
chptr	pointer
,	O
strlen	function
(	O
chptr	pointer
)	O
+	O
strlen	function
(	O
item	pointer
)	O
+	O
5	int
)	O
;	O
if	O
(	O
*	O
chptr	pointer
)	O
strcat	function
(	O
chptr	pointer
,	O
", "	pointer
)	O
;	O
strcat	function
(	O
chptr	pointer
,	O
item	pointer
)	O
;	O
free	function
(	O
item	pointer
)	O
;	O
}	O
conds	pointer
[	O
i	int
]	O
=	O
chptr	pointer
;	O
}	O
free	function
(	O
names	pointer
)	O
;	O
free	function
(	O
versions	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
triggertypeTag	function
(	O
Header	pointer
h	pointer
,	O
int_32	int
*	O
type	enum
,	O
const	O
void	O
*	O
*	O
data	pointer
,	O
int_32	int
*	O
count	long
,	O
int	O
*	O
freeData	pointer
)	O
{	O
int_32	int
*	O
indices	pointer
,	O
*	O
flags	int
;	O
char	O
*	O
*	O
conds	pointer
,	O
*	O
*	O
s	pointer
;	O
int	O
i	int
,	O
j	int
;	O
int	O
numScripts	int
,	O
numNames	int
;	O
if	O
(	O
!	O
headerGetEntry	function
(	O
h	pointer
,	O
RPMTAG_TRIGGERINDEX	int
,	O
NULL	O
,	O
(	O
void	O
*	O
*	O
)	O
&	O
indices	pointer
,	O
&	O
numNames	int
)	O
)	O
{	O
*	O
freeData	pointer
=	O
0	int
;	O
return	O
1	int
;	O
}	O
headerGetEntry	function
(	O
h	pointer
,	O
RPMTAG_TRIGGERFLAGS	int
,	O
NULL	O
,	O
(	O
void	O
*	O
*	O
)	O
&	O
flags	int
,	O
NULL	O
)	O
;	O
headerGetEntry	function
(	O
h	pointer
,	O
RPMTAG_TRIGGERSCRIPTS	int
,	O
NULL	O
,	O
(	O
void	O
*	O
*	O
)	O
&	O
s	pointer
,	O
&	O
numScripts	int
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
*	O
freeData	pointer
=	O
1	int
;	O
*	O
data	pointer
=	O
conds	pointer
=	O
xmalloc	function
(	O
sizeof	O
(	O
char	O
*	O
)	O
*	O
numScripts	int
)	O
;	O
*	O
count	long
=	O
numScripts	int
;	O
*	O
type	enum
=	O
RPM_STRING_ARRAY_TYPE	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
numScripts	int
;	O
i	int
++	O
)	O
{	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
numNames	int
;	O
j	int
++	O
)	O
{	O
if	O
(	O
indices	pointer
[	O
j	int
]	O
!=	O
i	int
)	O
continue	O
;	O
if	O
(	O
flags	int
[	O
j	int
]	O
&	O
RPMSENSE_TRIGGERIN	O
)	O
conds	pointer
[	O
i	int
]	O
=	O
xstrdup	function
(	O
"in"	pointer
)	O
;	O
else	O
if	O
(	O
flags	int
[	O
j	int
]	O
&	O
RPMSENSE_TRIGGERUN	O
)	O
conds	pointer
[	O
i	int
]	O
=	O
xstrdup	function
(	O
"un"	pointer
)	O
;	O
else	O
conds	pointer
[	O
i	int
]	O
=	O
xstrdup	function
(	O
"postun"	pointer
)	O
;	O
break	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
filenamesTag	function
(	O
Header	pointer
h	pointer
,	O
int_32	int
*	O
type	enum
,	O
const	O
void	O
*	O
*	O
data	pointer
,	O
int_32	int
*	O
count	long
,	O
int	O
*	O
freeData	pointer
)	O
{	O
*	O
type	enum
=	O
RPM_STRING_ARRAY_TYPE	int
;	O
rpmBuildFileList	function
(	O
h	pointer
,	O
(	O
const	O
char	O
*	O
*	O
*	O
)	O
data	pointer
,	O
count	long
)	O
;	O
*	O
freeData	pointer
=	O
1	int
;	O
*	O
freeData	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
int	O
_nl_msg_cat_cntr	int
;	O
static	O
const	O
char	O
*	O
language	pointer
=	O
"LANGUAGE"	pointer
;	O
static	O
char	O
*	O
_macro_i18ndomains	pointer
=	O
"%{?_i18ndomains:%{_i18ndomains}}"	pointer
;	O
static	O
int	O
i18nTag	function
(	O
Header	pointer
h	pointer
,	O
int_32	int
tag	int
,	O
int_32	int
*	O
type	enum
,	O
const	O
void	O
*	O
*	O
data	pointer
,	O
int_32	int
*	O
count	long
,	O
int	O
*	O
freeData	pointer
)	O
{	O
char	O
*	O
dstring	pointer
=	O
rpmExpand	function
(	O
_macro_i18ndomains	pointer
,	O
NULL	O
)	O
;	O
int	O
rc	int
;	O
*	O
type	enum
=	O
RPM_STRING_TYPE	int
;	O
*	O
data	pointer
=	O
NULL	O
;	O
*	O
count	long
=	O
0	int
;	O
*	O
freeData	pointer
=	O
0	int
;	O
if	O
(	O
dstring	pointer
&&	O
*	O
dstring	pointer
)	O
{	O
char	O
*	O
domain	pointer
,	O
*	O
de	pointer
;	O
const	O
char	O
*	O
langval	pointer
;	O
const	O
char	O
*	O
msgkey	pointer
;	O
const	O
char	O
*	O
msgid	pointer
;	O
{	O
const	O
char	O
*	O
tn	pointer
=	O
tagName	function
(	O
tag	int
)	O
;	O
const	O
char	O
*	O
n	pointer
;	O
char	O
*	O
mk	pointer
;	O
headerNVR	function
(	O
h	pointer
,	O
&	O
n	pointer
,	O
NULL	O
,	O
NULL	O
)	O
;	O
mk	pointer
=	O
alloca	function
(	O
strlen	function
(	O
n	pointer
)	O
+	O
strlen	function
(	O
tn	pointer
)	O
+	O
sizeof	O
(	O
"()"	pointer
)	O
)	O
;	O
sprintf	function
(	O
mk	pointer
,	O
"%s(%s)"	pointer
,	O
n	pointer
,	O
tn	pointer
)	O
;	O
msgkey	pointer
=	O
mk	pointer
;	O
}	O
langval	pointer
=	O
getenv	function
(	O
language	pointer
)	O
;	O
rpm_setenv	function
(	O
language	pointer
,	O
"en_US"	pointer
,	O
1	int
)	O
;	O
++	O
_nl_msg_cat_cntr	int
;	O
msgid	pointer
=	O
NULL	O
;	O
for	O
(	O
domain	pointer
=	O
dstring	pointer
;	O
domain	pointer
!=	O
NULL	O
;	O
domain	pointer
=	O
de	pointer
)	O
{	O
de	pointer
=	O
strchr	function
(	O
domain	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
de	pointer
)	O
*	O
de	pointer
++	O
=	O
'\0'	O
;	O
msgid	pointer
=	O
dgettext	O
(	O
domain	pointer
,	O
msgkey	pointer
)	O
;	O
if	O
(	O
msgid	pointer
!=	O
msgkey	pointer
)	O
break	O
;	O
}	O
if	O
(	O
langval	pointer
)	O
rpm_setenv	function
(	O
language	pointer
,	O
langval	pointer
,	O
1	int
)	O
;	O
else	O
rpm_unsetenv	function
(	O
language	pointer
)	O
;	O
++	O
_nl_msg_cat_cntr	int
;	O
if	O
(	O
domain	pointer
&&	O
msgid	pointer
)	O
{	O
*	O
data	pointer
=	O
xstrdup	function
(	O
dgettext	O
(	O
domain	pointer
,	O
msgid	pointer
)	O
)	O
;	O
*	O
count	long
=	O
1	int
;	O
*	O
freeData	pointer
=	O
1	int
;	O
}	O
xfree	O
(	O
dstring	pointer
)	O
;	O
dstring	pointer
=	O
NULL	O
;	O
if	O
(	O
*	O
data	pointer
)	O
{	O
return	O
0	int
;	O
}	O
}	O
if	O
(	O
dstring	pointer
)	O
xfree	O
(	O
dstring	pointer
)	O
;	O
rc	int
=	O
headerGetEntry	function
(	O
h	pointer
,	O
tag	int
,	O
type	enum
,	O
(	O
void	O
*	O
*	O
)	O
data	pointer
,	O
count	long
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
const	O
char	O
*	O
t	pointer
=	O
*	O
data	pointer
;	O
*	O
data	pointer
=	O
xstrdup	function
(	O
t	pointer
)	O
;	O
*	O
freeData	pointer
=	O
1	int
;	O
return	O
0	int
;	O
}	O
*	O
freeData	pointer
=	O
0	int
;	O
*	O
data	pointer
=	O
NULL	O
;	O
*	O
count	long
=	O
0	int
;	O
return	O
1	int
;	O
}	O
static	O
int	O
summaryTag	function
(	O
Header	pointer
h	pointer
,	O
int_32	int
*	O
type	enum
,	O
const	O
void	O
*	O
*	O
data	pointer
,	O
int_32	int
*	O
count	long
,	O
int	O
*	O
freeData	pointer
)	O
{	O
return	O
i18nTag	function
(	O
h	pointer
,	O
RPMTAG_SUMMARY	int
,	O
type	enum
,	O
data	pointer
,	O
count	long
,	O
freeData	pointer
)	O
;	O
}	O
static	O
int	O
descriptionTag	function
(	O
Header	pointer
h	pointer
,	O
int_32	int
*	O
type	enum
,	O
const	O
void	O
*	O
*	O
data	pointer
,	O
int_32	int
*	O
count	long
,	O
int	O
*	O
freeData	pointer
)	O
{	O
return	O
i18nTag	function
(	O
h	pointer
,	O
RPMTAG_DESCRIPTION	int
,	O
type	enum
,	O
data	pointer
,	O
count	long
,	O
freeData	pointer
)	O
;	O
}	O
static	O
int	O
groupTag	function
(	O
Header	pointer
h	pointer
,	O
int_32	int
*	O
type	enum
,	O
const	O
void	O
*	O
*	O
data	pointer
,	O
int_32	int
*	O
count	long
,	O
int	O
*	O
freeData	pointer
)	O
{	O
return	O
i18nTag	function
(	O
h	pointer
,	O
RPMTAG_GROUP	int
,	O
type	enum
,	O
data	pointer
,	O
count	long
,	O
freeData	pointer
)	O
;	O
}	O
const	O
struct	O
headerSprintfExtension	struct
rpmHeaderFormats	array
[	O
]	O
=	O
{	O
{	O
HEADER_EXT_TAG	int
,	O
"RPMTAG_GROUP"	pointer
,	O
{	O
groupTag	function
}	O
}	O
,	O
{	O
HEADER_EXT_TAG	int
,	O
"RPMTAG_DESCRIPTION"	pointer
,	O
{	O
descriptionTag	function
}	O
}	O
,	O
{	O
HEADER_EXT_TAG	int
,	O
"RPMTAG_SUMMARY"	pointer
,	O
{	O
summaryTag	function
}	O
}	O
,	O
{	O
HEADER_EXT_TAG	int
,	O
"RPMTAG_FILENAMES"	pointer
,	O
{	O
filenamesTag	function
}	O
}	O
,	O
{	O
HEADER_EXT_TAG	int
,	O
"RPMTAG_INSTALLPREFIX"	pointer
,	O
{	O
instprefixTag	function
}	O
}	O
,	O
{	O
HEADER_EXT_MORE	int
,	O
NULL	O
,	O
{	O
(	O
void	O
*	O
)	O
headerDefaultFormats	array
}	O
}	O
}	O
;	O
