miGC	struct
*	O
miNewGC	O
(	O
int	O
npixels	int
,	O
const	O
miPixel	struct
*	O
pixels	pointer
)	O
{	O
miGC	struct
*	O
new_gc	pointer
;	O
int	O
i	int
;	O
new_gc	pointer
=	O
(	O
miGC	struct
*	O
)	O
mi_xmalloc	O
(	O
sizeof	O
(	O
miGC	struct
)	O
)	O
;	O
new_gc	pointer
->	O
fillRule	int
=	O
MI_EVEN_ODD_RULE	int
;	O
new_gc	pointer
->	O
joinStyle	int
=	O
MI_JOIN_MITER	int
;	O
new_gc	pointer
->	O
capStyle	int
=	O
MI_CAP_BUTT	int
;	O
new_gc	pointer
->	O
lineStyle	int
=	O
MI_LINE_SOLID	int
;	O
new_gc	pointer
->	O
arcMode	int
=	O
MI_ARC_PIE_SLICE	int
;	O
new_gc	pointer
->	O
lineWidth	int
=	O
(	O
unsigned	O
int	O
)	O
0	int
;	O
new_gc	pointer
->	O
miterLimit	double
=	O
10.43	int
;	O
new_gc	pointer
->	O
dashOffset	int
=	O
0	int
;	O
new_gc	pointer
->	O
numInDashList	int
=	O
2	int
;	O
new_gc	pointer
->	O
dash	pointer
=	O
(	O
unsigned	O
int	O
*	O
)	O
mi_xmalloc	O
(	O
2	int
*	O
sizeof	O
(	O
unsigned	O
int	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
2	int
;	O
i	int
++	O
)	O
new_gc	pointer
->	O
dash	pointer
[	O
i	int
]	O
=	O
4	int
;	O
new_gc	pointer
->	O
numPixels	int
=	O
npixels	int
;	O
new_gc	pointer
->	O
pixels	pointer
=	O
(	O
miPixel	struct
*	O
)	O
mi_xmalloc	O
(	O
npixels	int
*	O
sizeof	O
(	O
miPixel	struct
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
npixels	int
;	O
i	int
++	O
)	O
new_gc	pointer
->	O
pixels	pointer
[	O
i	int
]	O
=	O
pixels	pointer
[	O
i	int
]	O
;	O
return	O
new_gc	pointer
;	O
}	O
void	O
miDeleteGC	O
(	O
miGC	struct
*	O
pGC	pointer
)	O
{	O
if	O
(	O
pGC	pointer
==	O
(	O
miGC	struct
*	O
)	O
NULL	O
)	O
return	O
;	O
if	O
(	O
pGC	pointer
->	O
dash	pointer
)	O
free	function
(	O
pGC	pointer
->	O
dash	pointer
)	O
;	O
free	function
(	O
pGC	pointer
->	O
pixels	pointer
)	O
;	O
free	function
(	O
pGC	pointer
)	O
;	O
}	O
miGC	struct
*	O
miCopyGC	O
(	O
const	O
miGC	struct
*	O
pGC	pointer
)	O
{	O
miGC	struct
*	O
new_gc	pointer
;	O
int	O
i	int
;	O
if	O
(	O
pGC	pointer
==	O
(	O
const	O
miGC	struct
*	O
)	O
pGC	pointer
)	O
return	O
(	O
miGC	struct
*	O
)	O
NULL	O
;	O
new_gc	pointer
=	O
(	O
miGC	struct
*	O
)	O
mi_xmalloc	O
(	O
sizeof	O
(	O
miGC	struct
)	O
)	O
;	O
new_gc	pointer
->	O
fillRule	int
=	O
pGC	pointer
->	O
fillRule	int
;	O
new_gc	pointer
->	O
joinStyle	int
=	O
pGC	pointer
->	O
joinStyle	int
;	O
new_gc	pointer
->	O
capStyle	int
=	O
pGC	pointer
->	O
capStyle	int
;	O
new_gc	pointer
->	O
lineStyle	int
=	O
pGC	pointer
->	O
lineStyle	int
;	O
new_gc	pointer
->	O
arcMode	int
=	O
pGC	pointer
->	O
arcMode	int
;	O
new_gc	pointer
->	O
lineWidth	int
=	O
pGC	pointer
->	O
lineWidth	int
;	O
new_gc	pointer
->	O
miterLimit	double
=	O
pGC	pointer
->	O
miterLimit	double
;	O
new_gc	pointer
->	O
dashOffset	int
=	O
pGC	pointer
->	O
dashOffset	int
;	O
new_gc	pointer
->	O
numInDashList	int
=	O
pGC	pointer
->	O
numInDashList	int
;	O
if	O
(	O
pGC	pointer
->	O
numInDashList	int
==	O
0	int
)	O
new_gc	pointer
->	O
dash	pointer
=	O
(	O
unsigned	O
int	O
*	O
)	O
NULL	O
;	O
else	O
{	O
new_gc	pointer
->	O
dash	pointer
=	O
(	O
unsigned	O
int	O
*	O
)	O
mi_xmalloc	O
(	O
pGC	pointer
->	O
numInDashList	int
*	O
sizeof	O
(	O
unsigned	O
int	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
pGC	pointer
->	O
numInDashList	int
;	O
i	int
++	O
)	O
new_gc	pointer
->	O
dash	pointer
[	O
i	int
]	O
=	O
pGC	pointer
->	O
dash	pointer
[	O
i	int
]	O
;	O
}	O
new_gc	pointer
->	O
pixels	pointer
=	O
(	O
miPixel	struct
*	O
)	O
mi_xmalloc	O
(	O
pGC	pointer
->	O
numPixels	int
*	O
sizeof	O
(	O
miPixel	struct
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
pGC	pointer
->	O
numPixels	int
;	O
i	int
++	O
)	O
new_gc	pointer
->	O
pixels	pointer
[	O
i	int
]	O
=	O
pGC	pointer
->	O
pixels	pointer
[	O
i	int
]	O
;	O
return	O
new_gc	pointer
;	O
}	O
void	O
miSetGCAttrib	O
(	O
miGC	struct
*	O
pGC	pointer
,	O
miGCAttribute	enum
attribute	enum
,	O
int	O
value	pointer
)	O
{	O
if	O
(	O
pGC	pointer
==	O
(	O
miGC	struct
*	O
)	O
NULL	O
||	O
value	pointer
<	O
0	int
)	O
return	O
;	O
switch	O
(	O
(	O
int	O
)	O
attribute	enum
)	O
{	O
case	O
(	O
int	O
)	O
MI_GC_FILL_RULE	int
:	O
pGC	pointer
->	O
fillRule	int
=	O
value	pointer
;	O
break	O
;	O
case	O
(	O
int	O
)	O
MI_GC_JOIN_STYLE	int
:	O
pGC	pointer
->	O
joinStyle	int
=	O
value	pointer
;	O
break	O
;	O
case	O
(	O
int	O
)	O
MI_GC_CAP_STYLE	int
:	O
pGC	pointer
->	O
capStyle	int
=	O
value	pointer
;	O
break	O
;	O
case	O
(	O
int	O
)	O
MI_GC_LINE_STYLE	int
:	O
pGC	pointer
->	O
lineStyle	int
=	O
value	pointer
;	O
break	O
;	O
case	O
(	O
int	O
)	O
MI_GC_ARC_MODE	int
:	O
pGC	pointer
->	O
arcMode	int
=	O
value	pointer
;	O
break	O
;	O
case	O
(	O
int	O
)	O
MI_GC_LINE_WIDTH	int
:	O
if	O
(	O
value	pointer
>=	O
0	int
)	O
pGC	pointer
->	O
lineWidth	int
=	O
(	O
unsigned	O
int	O
)	O
value	pointer
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
void	O
miSetGCAttribs	O
(	O
miGC	struct
*	O
pGC	pointer
,	O
int	O
nattributes	int
,	O
const	O
miGCAttribute	enum
*	O
attributes	pointer
,	O
const	O
int	O
*	O
values	pointer
)	O
{	O
int	O
i	int
;	O
miGCAttribute	enum
attribute	enum
;	O
int	O
value	pointer
;	O
if	O
(	O
nattributes	int
<=	O
0	int
||	O
pGC	pointer
==	O
(	O
miGC	struct
*	O
)	O
NULL	O
)	O
return	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nattributes	int
;	O
i	int
++	O
)	O
{	O
attribute	enum
=	O
*	O
attributes	pointer
++	O
;	O
value	pointer
=	O
*	O
values	pointer
++	O
;	O
if	O
(	O
value	pointer
<	O
0	int
)	O
continue	O
;	O
switch	O
(	O
(	O
int	O
)	O
attribute	enum
)	O
{	O
case	O
(	O
int	O
)	O
MI_GC_FILL_RULE	int
:	O
pGC	pointer
->	O
fillRule	int
=	O
value	pointer
;	O
break	O
;	O
case	O
(	O
int	O
)	O
MI_GC_JOIN_STYLE	int
:	O
pGC	pointer
->	O
joinStyle	int
=	O
value	pointer
;	O
break	O
;	O
case	O
(	O
int	O
)	O
MI_GC_CAP_STYLE	int
:	O
pGC	pointer
->	O
capStyle	int
=	O
value	pointer
;	O
break	O
;	O
case	O
(	O
int	O
)	O
MI_GC_LINE_STYLE	int
:	O
pGC	pointer
->	O
lineStyle	int
=	O
value	pointer
;	O
break	O
;	O
case	O
(	O
int	O
)	O
MI_GC_ARC_MODE	int
:	O
pGC	pointer
->	O
arcMode	int
=	O
value	pointer
;	O
break	O
;	O
case	O
(	O
int	O
)	O
MI_GC_LINE_WIDTH	int
:	O
if	O
(	O
value	pointer
>=	O
0	int
)	O
pGC	pointer
->	O
lineWidth	int
=	O
(	O
unsigned	O
int	O
)	O
value	pointer
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
}	O
void	O
miSetGCMiterLimit	O
(	O
miGC	struct
*	O
pGC	pointer
,	O
double	O
value	pointer
)	O
{	O
if	O
(	O
pGC	pointer
==	O
(	O
miGC	struct
*	O
)	O
NULL	O
)	O
return	O
;	O
pGC	pointer
->	O
miterLimit	double
=	O
value	pointer
;	O
}	O
void	O
miSetGCDashes	O
(	O
miGC	struct
*	O
pGC	pointer
,	O
int	O
ndashes	int
,	O
const	O
unsigned	O
int	O
*	O
dashes	pointer
,	O
int	O
offset	array
)	O
{	O
int	O
i	int
;	O
if	O
(	O
pGC	pointer
==	O
(	O
miGC	struct
*	O
)	O
NULL	O
||	O
ndashes	int
<	O
0	int
)	O
return	O
;	O
if	O
(	O
pGC	pointer
->	O
dash	pointer
)	O
free	function
(	O
pGC	pointer
->	O
dash	pointer
)	O
;	O
pGC	pointer
->	O
dashOffset	int
=	O
offset	array
;	O
pGC	pointer
->	O
numInDashList	int
=	O
ndashes	int
;	O
if	O
(	O
ndashes	int
==	O
0	int
)	O
pGC	pointer
->	O
dash	pointer
=	O
(	O
unsigned	O
int	O
*	O
)	O
NULL	O
;	O
else	O
{	O
pGC	pointer
->	O
dash	pointer
=	O
(	O
unsigned	O
int	O
*	O
)	O
mi_xmalloc	O
(	O
ndashes	int
*	O
sizeof	O
(	O
unsigned	O
int	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ndashes	int
;	O
i	int
++	O
)	O
pGC	pointer
->	O
dash	pointer
[	O
i	int
]	O
=	O
dashes	pointer
[	O
i	int
]	O
;	O
}	O
}	O
void	O
miSetGCPixels	O
(	O
miGC	struct
*	O
pGC	pointer
,	O
int	O
npixels	int
,	O
const	O
miPixel	struct
*	O
pixels	pointer
)	O
{	O
int	O
i	int
;	O
if	O
(	O
pGC	pointer
==	O
(	O
miGC	struct
*	O
)	O
NULL	O
||	O
npixels	int
<	O
2	int
)	O
return	O
;	O
free	function
(	O
pGC	pointer
->	O
pixels	pointer
)	O
;	O
pGC	pointer
->	O
numPixels	int
=	O
npixels	int
;	O
pGC	pointer
->	O
pixels	pointer
=	O
(	O
miPixel	struct
*	O
)	O
mi_xmalloc	O
(	O
npixels	int
*	O
sizeof	O
(	O
miPixel	struct
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
npixels	int
;	O
i	int
++	O
)	O
pGC	pointer
->	O
pixels	pointer
[	O
i	int
]	O
=	O
pixels	pointer
[	O
i	int
]	O
;	O
}	O
