static	O
void	O
scale_and_align_entries	function
(	O
void	O
)	O
;	O
static	O
void	O
print_header	function
(	O
int	O
)	O
;	O
static	O
void	O
print_line	function
(	O
Sym	struct
*	O
,	O
double	O
)	O
;	O
static	O
int	O
cmp_time	function
(	O
const	O
PTR	O
,	O
const	O
PTR	O
)	O
;	O
extern	O
void	O
flat_blurb	function
(	O
FILE	struct
*	O
fp	pointer
)	O
;	O
static	O
histogram	struct
*	O
find_histogram	function
(	O
bfd_vma	long
lowpc	long
,	O
bfd_vma	long
highpc	long
)	O
;	O
static	O
histogram	struct
*	O
find_histogram_for_pc	function
(	O
bfd_vma	long
pc	long
)	O
;	O
histogram	struct
*	O
histograms	pointer
;	O
unsigned	O
num_histograms	int
;	O
double	O
hist_scale	double
;	O
static	O
char	O
hist_dimension	array
[	O
16	int
]	O
=	O
"seconds"	pointer
;	O
static	O
char	O
hist_dimension_abbrev	char
=	O
's'	O
;	O
static	O
double	O
accum_time	double
;	O
static	O
double	O
total_time	double
;	O
const	O
struct	O
{	O
char	O
prefix	char
;	O
double	O
scale	double
;	O
}	O
SItab	array
[	O
]	O
=	O
{	O
{	O
'T'	O
,	O
1e-12	int
}	O
,	O
{	O
'G'	O
,	O
1e-09	int
}	O
,	O
{	O
'M'	O
,	O
1e-06	int
}	O
,	O
{	O
'K'	O
,	O
1e-03	int
}	O
,	O
{	O
' '	O
,	O
1e-00	int
}	O
,	O
{	O
'm'	O
,	O
1e+03	int
}	O
,	O
{	O
'u'	O
,	O
1e+06	int
}	O
,	O
{	O
'n'	O
,	O
1e+09	int
}	O
,	O
{	O
'p'	O
,	O
1e+12	int
}	O
,	O
{	O
'f'	O
,	O
1e+15	int
}	O
,	O
{	O
'a'	O
,	O
1e+18	int
}	O
}	O
;	O
static	O
void	O
read_histogram_header	function
(	O
histogram	struct
*	O
record	pointer
,	O
FILE	struct
*	O
ifp	pointer
,	O
const	O
char	O
*	O
filename	pointer
,	O
int	O
first	int
)	O
{	O
unsigned	O
int	O
profrate	int
;	O
char	O
n_hist_dimension	array
[	O
15	int
]	O
;	O
char	O
n_hist_dimension_abbrev	char
;	O
double	O
n_hist_scale	double
;	O
if	O
(	O
gmon_io_read_vma	function
(	O
ifp	pointer
,	O
&	O
record	pointer
->	O
lowpc	long
)	O
||	O
gmon_io_read_vma	function
(	O
ifp	pointer
,	O
&	O
record	pointer
->	O
highpc	long
)	O
||	O
gmon_io_read_32	function
(	O
ifp	pointer
,	O
&	O
record	pointer
->	O
num_bins	int
)	O
||	O
gmon_io_read_32	function
(	O
ifp	pointer
,	O
&	O
profrate	int
)	O
||	O
gmon_io_read	function
(	O
ifp	pointer
,	O
n_hist_dimension	array
,	O
15	int
)	O
||	O
gmon_io_read	function
(	O
ifp	pointer
,	O
&	O
n_hist_dimension_abbrev	char
,	O
1	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: %s: unexpected end of file\n"	pointer
)	O
,	O
whoami	pointer
,	O
filename	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
n_hist_scale	double
=	O
(	O
double	O
)	O
(	O
(	O
record	pointer
->	O
highpc	long
-	O
record	pointer
->	O
lowpc	long
)	O
/	O
sizeof	O
(	O
UNIT	array
)	O
)	O
/	O
record	pointer
->	O
num_bins	int
;	O
if	O
(	O
first	int
)	O
{	O
hz	long
=	O
profrate	int
;	O
memcpy	function
(	O
hist_dimension	array
,	O
n_hist_dimension	array
,	O
15	int
)	O
;	O
hist_dimension_abbrev	char
=	O
n_hist_dimension_abbrev	char
;	O
hist_scale	double
=	O
n_hist_scale	double
;	O
}	O
else	O
{	O
if	O
(	O
strncmp	function
(	O
n_hist_dimension	array
,	O
hist_dimension	array
,	O
15	int
)	O
!=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: dimension unit changed between histogram records\n"	pointer
"%s: from '%s'\n"	pointer
"%s: to '%s'\n"	pointer
)	O
,	O
whoami	pointer
,	O
whoami	pointer
,	O
hist_dimension	array
,	O
whoami	pointer
,	O
n_hist_dimension	array
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
n_hist_dimension_abbrev	char
!=	O
hist_dimension_abbrev	char
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: dimension abbreviation changed between histogram records\n"	pointer
"%s: from '%c'\n"	pointer
"%s: to '%c'\n"	pointer
)	O
,	O
whoami	pointer
,	O
whoami	pointer
,	O
hist_dimension_abbrev	char
,	O
whoami	pointer
,	O
n_hist_dimension_abbrev	char
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
fabs	function
(	O
hist_scale	double
-	O
n_hist_scale	double
)	O
>	O
0.000001	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: different scales in histogram records"	pointer
)	O
,	O
whoami	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
}	O
}	O
void	O
hist_read_rec	function
(	O
FILE	struct
*	O
ifp	pointer
,	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
bfd_vma	long
lowpc	long
,	O
highpc	long
;	O
histogram	struct
n_record	struct
;	O
histogram	struct
*	O
record	pointer
,	O
*	O
existing_record	pointer
;	O
unsigned	O
i	pointer
;	O
read_histogram_header	function
(	O
&	O
n_record	struct
,	O
ifp	pointer
,	O
filename	pointer
,	O
num_histograms	int
==	O
0	int
)	O
;	O
existing_record	pointer
=	O
find_histogram	function
(	O
n_record	struct
.	O
lowpc	long
,	O
n_record	struct
.	O
highpc	long
)	O
;	O
if	O
(	O
existing_record	pointer
)	O
{	O
record	pointer
=	O
existing_record	pointer
;	O
}	O
else	O
{	O
lowpc	long
=	O
n_record	struct
.	O
lowpc	long
;	O
highpc	long
=	O
n_record	struct
.	O
highpc	long
;	O
hist_clip_symbol_address	function
(	O
&	O
lowpc	long
,	O
&	O
highpc	long
)	O
;	O
if	O
(	O
lowpc	long
!=	O
highpc	long
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: overlapping histogram records\n"	pointer
)	O
,	O
whoami	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
histograms	pointer
=	O
(	O
struct	O
histogram	struct
*	O
)	O
xrealloc	function
(	O
histograms	pointer
,	O
sizeof	O
(	O
histogram	struct
)	O
*	O
(	O
num_histograms	int
+	O
1	int
)	O
)	O
;	O
memcpy	function
(	O
histograms	pointer
+	O
num_histograms	int
,	O
&	O
n_record	struct
,	O
sizeof	O
(	O
histogram	struct
)	O
)	O
;	O
record	pointer
=	O
&	O
histograms	pointer
[	O
num_histograms	int
]	O
;	O
++	O
num_histograms	int
;	O
record	pointer
->	O
sample	pointer
=	O
(	O
int	O
*	O
)	O
xmalloc	function
(	O
record	pointer
->	O
num_bins	int
*	O
sizeof	O
(	O
record	pointer
->	O
sample	pointer
[	O
0	int
]	O
)	O
)	O
;	O
memset	function
(	O
record	pointer
->	O
sample	pointer
,	O
0	int
,	O
record	pointer
->	O
num_bins	int
*	O
sizeof	O
(	O
record	pointer
->	O
sample	pointer
[	O
0	int
]	O
)	O
)	O
;	O
}	O
DBG	O
(	O
SAMPLEDEBUG	O
,	O
printf	function
(	O
"[hist_read_rec] n_lowpc 0x%lx n_highpc 0x%lx ncnt %u\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
record	pointer
->	O
lowpc	long
,	O
(	O
unsigned	O
long	O
)	O
record	pointer
->	O
highpc	long
,	O
record	pointer
->	O
num_bins	int
)	O
)	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
record	pointer
->	O
num_bins	int
;	O
++	O
i	pointer
)	O
{	O
UNIT	array
count	int
;	O
if	O
(	O
fread	function
(	O
&	O
count	int
[	O
0	int
]	O
,	O
sizeof	O
(	O
count	int
)	O
,	O
1	int
,	O
ifp	pointer
)	O
!=	O
1	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: %s: unexpected EOF after reading %u of %u samples\n"	pointer
)	O
,	O
whoami	pointer
,	O
filename	pointer
,	O
i	pointer
,	O
record	pointer
->	O
num_bins	int
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
record	pointer
->	O
sample	pointer
[	O
i	pointer
]	O
+=	O
bfd_get_16	O
(	O
core_bfd	pointer
,	O
(	O
bfd_byte	char
*	O
)	O
&	O
count	int
[	O
0	int
]	O
)	O
;	O
DBG	O
(	O
SAMPLEDEBUG	O
,	O
printf	function
(	O
"[hist_read_rec] 0x%lx: %u\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
(	O
record	pointer
->	O
lowpc	long
+	O
i	pointer
*	O
(	O
record	pointer
->	O
highpc	long
-	O
record	pointer
->	O
lowpc	long
)	O
/	O
record	pointer
->	O
num_bins	int
)	O
,	O
record	pointer
->	O
sample	pointer
[	O
i	pointer
]	O
)	O
)	O
;	O
}	O
}	O
void	O
hist_write_hist	function
(	O
FILE	struct
*	O
ofp	pointer
,	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
UNIT	array
count	int
;	O
unsigned	O
int	O
i	pointer
,	O
r	int
;	O
for	O
(	O
r	int
=	O
0	int
;	O
r	int
<	O
num_histograms	int
;	O
++	O
r	int
)	O
{	O
histogram	struct
*	O
record	pointer
=	O
&	O
histograms	pointer
[	O
r	int
]	O
;	O
if	O
(	O
gmon_io_write_8	function
(	O
ofp	pointer
,	O
GMON_TAG_TIME_HIST	int
)	O
||	O
gmon_io_write_vma	function
(	O
ofp	pointer
,	O
record	pointer
->	O
lowpc	long
)	O
||	O
gmon_io_write_vma	function
(	O
ofp	pointer
,	O
record	pointer
->	O
highpc	long
)	O
||	O
gmon_io_write_32	function
(	O
ofp	pointer
,	O
record	pointer
->	O
num_bins	int
)	O
||	O
gmon_io_write_32	function
(	O
ofp	pointer
,	O
hz	long
)	O
||	O
gmon_io_write	function
(	O
ofp	pointer
,	O
hist_dimension	array
,	O
15	int
)	O
||	O
gmon_io_write	function
(	O
ofp	pointer
,	O
&	O
hist_dimension_abbrev	char
,	O
1	int
)	O
)	O
{	O
perror	function
(	O
filename	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
record	pointer
->	O
num_bins	int
;	O
++	O
i	pointer
)	O
{	O
bfd_put_16	O
(	O
core_bfd	pointer
,	O
(	O
bfd_vma	long
)	O
record	pointer
->	O
sample	pointer
[	O
i	pointer
]	O
,	O
(	O
bfd_byte	char
*	O
)	O
&	O
count	int
[	O
0	int
]	O
)	O
;	O
if	O
(	O
fwrite	function
(	O
&	O
count	int
[	O
0	int
]	O
,	O
sizeof	O
(	O
count	int
)	O
,	O
1	int
,	O
ofp	pointer
)	O
!=	O
1	int
)	O
{	O
perror	function
(	O
filename	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
}	O
}	O
}	O
static	O
void	O
scale_and_align_entries	function
(	O
void	O
)	O
{	O
Sym	struct
*	O
sym	pointer
;	O
bfd_vma	long
bin_of_entry	long
;	O
bfd_vma	long
bin_of_code	long
;	O
for	O
(	O
sym	pointer
=	O
symtab	struct
.	O
base	int
;	O
sym	pointer
<	O
symtab	struct
.	O
limit	pointer
;	O
sym	pointer
++	O
)	O
{	O
histogram	struct
*	O
r	int
=	O
find_histogram_for_pc	function
(	O
sym	pointer
->	O
addr	pointer
)	O
;	O
sym	pointer
->	O
hist	struct
.	O
scaled_addr	long
=	O
sym	pointer
->	O
addr	pointer
/	O
sizeof	O
(	O
UNIT	array
)	O
;	O
if	O
(	O
r	int
)	O
{	O
bin_of_entry	long
=	O
(	O
sym	pointer
->	O
hist	struct
.	O
scaled_addr	long
-	O
r	int
->	O
lowpc	long
)	O
/	O
hist_scale	double
;	O
bin_of_code	long
=	O
(	O
(	O
sym	pointer
->	O
hist	struct
.	O
scaled_addr	long
+	O
UNITS_TO_CODE	O
-	O
r	int
->	O
lowpc	long
)	O
/	O
hist_scale	double
)	O
;	O
if	O
(	O
bin_of_entry	long
<	O
bin_of_code	long
)	O
{	O
DBG	O
(	O
SAMPLEDEBUG	O
,	O
printf	function
(	O
"[scale_and_align_entries] pushing 0x%lx to 0x%lx\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
sym	pointer
->	O
hist	struct
.	O
scaled_addr	long
,	O
(	O
unsigned	O
long	O
)	O
(	O
sym	pointer
->	O
hist	struct
.	O
scaled_addr	long
+	O
UNITS_TO_CODE	O
)	O
)	O
)	O
;	O
sym	pointer
->	O
hist	struct
.	O
scaled_addr	long
+=	O
UNITS_TO_CODE	O
;	O
}	O
}	O
}	O
}	O
static	O
void	O
hist_assign_samples_1	function
(	O
histogram	struct
*	O
r	int
)	O
{	O
bfd_vma	long
bin_low_pc	long
,	O
bin_high_pc	long
;	O
bfd_vma	long
sym_low_pc	long
,	O
sym_high_pc	long
;	O
bfd_vma	long
overlap	long
,	O
addr	pointer
;	O
unsigned	O
int	O
bin_count	int
;	O
unsigned	O
int	O
i	pointer
,	O
j	int
,	O
k	int
;	O
double	O
count_time	double
,	O
credit	double
;	O
bfd_vma	long
lowpc	long
=	O
r	int
->	O
lowpc	long
/	O
sizeof	O
(	O
UNIT	array
)	O
;	O
for	O
(	O
i	pointer
=	O
0	int
,	O
k	int
=	O
1	int
;	O
i	pointer
<	O
r	int
->	O
num_bins	int
;	O
++	O
i	pointer
)	O
{	O
bin_count	int
=	O
r	int
->	O
sample	pointer
[	O
i	pointer
]	O
;	O
if	O
(	O
!	O
bin_count	int
)	O
continue	O
;	O
bin_low_pc	long
=	O
lowpc	long
+	O
(	O
bfd_vma	long
)	O
(	O
hist_scale	double
*	O
i	pointer
)	O
;	O
bin_high_pc	long
=	O
lowpc	long
+	O
(	O
bfd_vma	long
)	O
(	O
hist_scale	double
*	O
(	O
i	pointer
+	O
1	int
)	O
)	O
;	O
count_time	double
=	O
bin_count	int
;	O
DBG	O
(	O
SAMPLEDEBUG	O
,	O
printf	function
(	O
"[assign_samples] bin_low_pc=0x%lx, bin_high_pc=0x%lx, bin_count=%u\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
(	O
sizeof	O
(	O
UNIT	array
)	O
*	O
bin_low_pc	long
)	O
,	O
(	O
unsigned	O
long	O
)	O
(	O
sizeof	O
(	O
UNIT	array
)	O
*	O
bin_high_pc	long
)	O
,	O
bin_count	int
)	O
)	O
;	O
total_time	double
+=	O
count_time	double
;	O
for	O
(	O
j	int
=	O
k	int
-	O
1	int
;	O
j	int
<	O
symtab	struct
.	O
len	long
;	O
k	int
=	O
++	O
j	int
)	O
{	O
sym_low_pc	long
=	O
symtab	struct
.	O
base	int
[	O
j	int
]	O
.	O
hist	struct
.	O
scaled_addr	long
;	O
sym_high_pc	long
=	O
symtab	struct
.	O
base	int
[	O
j	int
+	O
1	int
]	O
.	O
hist	struct
.	O
scaled_addr	long
;	O
if	O
(	O
bin_high_pc	long
<	O
sym_low_pc	long
)	O
break	O
;	O
if	O
(	O
bin_low_pc	long
>=	O
sym_high_pc	long
)	O
continue	O
;	O
overlap	long
=	O
MIN	O
(	O
bin_high_pc	long
,	O
sym_high_pc	long
)	O
-	O
MAX	O
(	O
bin_low_pc	long
,	O
sym_low_pc	long
)	O
;	O
if	O
(	O
overlap	long
>	O
0	int
)	O
{	O
DBG	O
(	O
SAMPLEDEBUG	O
,	O
printf	function
(	O
"[assign_samples] [0x%lx,0x%lx) %s gets %f ticks %ld overlap\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
symtab	struct
.	O
base	int
[	O
j	int
]	O
.	O
addr	pointer
,	O
(	O
unsigned	O
long	O
)	O
(	O
sizeof	O
(	O
UNIT	array
)	O
*	O
sym_high_pc	long
)	O
,	O
symtab	struct
.	O
base	int
[	O
j	int
]	O
.	O
name	pointer
,	O
overlap	long
*	O
count_time	double
/	O
hist_scale	double
,	O
(	O
long	O
)	O
overlap	long
)	O
)	O
;	O
addr	pointer
=	O
symtab	struct
.	O
base	int
[	O
j	int
]	O
.	O
addr	pointer
;	O
credit	double
=	O
overlap	long
*	O
count_time	double
/	O
hist_scale	double
;	O
if	O
(	O
sym_lookup	function
(	O
&	O
syms	pointer
[	O
INCL_FLAT	int
]	O
,	O
addr	pointer
)	O
||	O
(	O
syms	pointer
[	O
INCL_FLAT	int
]	O
.	O
len	long
==	O
0	int
&&	O
!	O
sym_lookup	function
(	O
&	O
syms	pointer
[	O
EXCL_FLAT	int
]	O
,	O
addr	pointer
)	O
)	O
)	O
{	O
symtab	struct
.	O
base	int
[	O
j	int
]	O
.	O
hist	struct
.	O
time	struct
+=	O
credit	double
;	O
}	O
else	O
{	O
total_time	double
-=	O
credit	double
;	O
}	O
}	O
}	O
}	O
DBG	O
(	O
SAMPLEDEBUG	O
,	O
printf	function
(	O
"[assign_samples] total_time %f\n"	pointer
,	O
total_time	double
)	O
)	O
;	O
}	O
void	O
hist_assign_samples	function
(	O
void	O
)	O
{	O
unsigned	O
i	pointer
;	O
scale_and_align_entries	function
(	O
)	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
num_histograms	int
;	O
++	O
i	pointer
)	O
hist_assign_samples_1	function
(	O
&	O
histograms	pointer
[	O
i	pointer
]	O
)	O
;	O
}	O
static	O
void	O
print_header	function
(	O
int	O
prefix	char
)	O
{	O
char	O
unit	array
[	O
64	int
]	O
;	O
sprintf	function
(	O
unit	array
,	O
_	O
(	O
"%c%c/call"	pointer
)	O
,	O
prefix	char
,	O
hist_dimension_abbrev	char
)	O
;	O
if	O
(	O
bsd_style_output	int
)	O
{	O
printf	function
(	O
_	O
(	O
"\ngranularity: each sample hit covers %ld byte(s)"	pointer
)	O
,	O
(	O
long	O
)	O
hist_scale	double
*	O
(	O
long	O
)	O
sizeof	O
(	O
UNIT	array
)	O
)	O
;	O
if	O
(	O
total_time	double
>	O
0.0	int
)	O
{	O
printf	function
(	O
_	O
(	O
" for %.2f%% of %.2f %s\n\n"	pointer
)	O
,	O
100.0	int
/	O
total_time	double
,	O
total_time	double
/	O
hz	long
,	O
hist_dimension	array
)	O
;	O
}	O
}	O
else	O
{	O
printf	function
(	O
_	O
(	O
"\nEach sample counts as %g %s.\n"	pointer
)	O
,	O
1.0	int
/	O
hz	long
,	O
hist_dimension	array
)	O
;	O
}	O
if	O
(	O
total_time	double
<=	O
0.0	int
)	O
{	O
printf	function
(	O
_	O
(	O
" no time accumulated\n\n"	pointer
)	O
)	O
;	O
total_time	double
=	O
1.0	int
;	O
}	O
printf	function
(	O
"%5.5s %10.10s %8.8s %8.8s %8.8s %8.8s  %-8.8s\n"	pointer
,	O
"%  "	pointer
,	O
_	O
(	O
"cumulative"	pointer
)	O
,	O
_	O
(	O
"self  "	pointer
)	O
,	O
""	pointer
,	O
_	O
(	O
"self  "	pointer
)	O
,	O
_	O
(	O
"total "	pointer
)	O
,	O
""	pointer
)	O
;	O
printf	function
(	O
"%5.5s %9.9s  %8.8s %8.8s %8.8s %8.8s  %-8.8s\n"	pointer
,	O
_	O
(	O
"time"	pointer
)	O
,	O
hist_dimension	array
,	O
hist_dimension	array
,	O
_	O
(	O
"calls"	pointer
)	O
,	O
unit	array
,	O
unit	array
,	O
_	O
(	O
"name"	pointer
)	O
)	O
;	O
}	O
static	O
void	O
print_line	function
(	O
Sym	struct
*	O
sym	pointer
,	O
double	O
scale	double
)	O
{	O
if	O
(	O
ignore_zeros	int
&&	O
sym	pointer
->	O
ncalls	long
==	O
0	int
&&	O
sym	pointer
->	O
hist	struct
.	O
time	struct
==	O
0	int
)	O
return	O
;	O
accum_time	double
+=	O
sym	pointer
->	O
hist	struct
.	O
time	struct
;	O
if	O
(	O
bsd_style_output	int
)	O
printf	function
(	O
"%5.1f %10.2f %8.2f"	pointer
,	O
total_time	double
>	O
0.0	int
?	O
100	int
*	O
sym	pointer
->	O
hist	struct
.	O
time	struct
/	O
total_time	double
:	O
0.0	int
,	O
accum_time	double
/	O
hz	long
,	O
sym	pointer
->	O
hist	struct
.	O
time	struct
/	O
hz	long
)	O
;	O
else	O
printf	function
(	O
"%6.2f %9.2f %8.2f"	pointer
,	O
total_time	double
>	O
0.0	int
?	O
100	int
*	O
sym	pointer
->	O
hist	struct
.	O
time	struct
/	O
total_time	double
:	O
0.0	int
,	O
accum_time	double
/	O
hz	long
,	O
sym	pointer
->	O
hist	struct
.	O
time	struct
/	O
hz	long
)	O
;	O
if	O
(	O
sym	pointer
->	O
ncalls	long
!=	O
0	int
)	O
printf	function
(	O
" %8lu %8.2f %8.2f  "	pointer
,	O
sym	pointer
->	O
ncalls	long
,	O
scale	double
*	O
sym	pointer
->	O
hist	struct
.	O
time	struct
/	O
hz	long
/	O
sym	pointer
->	O
ncalls	long
,	O
scale	double
*	O
(	O
sym	pointer
->	O
hist	struct
.	O
time	struct
+	O
sym	pointer
->	O
cg	struct
.	O
child_time	double
)	O
/	O
hz	long
/	O
sym	pointer
->	O
ncalls	long
)	O
;	O
else	O
printf	function
(	O
" %8.8s %8.8s %8.8s  "	pointer
,	O
""	pointer
,	O
""	pointer
,	O
""	pointer
)	O
;	O
if	O
(	O
bsd_style_output	int
)	O
print_name	function
(	O
sym	pointer
)	O
;	O
else	O
print_name_only	function
(	O
sym	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
static	O
int	O
cmp_time	function
(	O
const	O
PTR	O
lp	pointer
,	O
const	O
PTR	O
rp	pointer
)	O
{	O
const	O
Sym	struct
*	O
left	pointer
=	O
*	O
(	O
const	O
Sym	struct
*	O
*	O
)	O
lp	pointer
;	O
const	O
Sym	struct
*	O
right	pointer
=	O
*	O
(	O
const	O
Sym	struct
*	O
*	O
)	O
rp	pointer
;	O
double	O
time_diff	double
;	O
time_diff	double
=	O
right	pointer
->	O
hist	struct
.	O
time	struct
-	O
left	pointer
->	O
hist	struct
.	O
time	struct
;	O
if	O
(	O
time_diff	double
>	O
0.0	int
)	O
return	O
1	int
;	O
if	O
(	O
time_diff	double
<	O
0.0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
right	pointer
->	O
ncalls	long
>	O
left	pointer
->	O
ncalls	long
)	O
return	O
1	int
;	O
if	O
(	O
right	pointer
->	O
ncalls	long
<	O
left	pointer
->	O
ncalls	long
)	O
return	O
-	O
1	int
;	O
return	O
strcmp	function
(	O
left	pointer
->	O
name	pointer
,	O
right	pointer
->	O
name	pointer
)	O
;	O
}	O
void	O
hist_print	function
(	O
void	O
)	O
{	O
Sym	struct
*	O
*	O
time_sorted_syms	pointer
,	O
*	O
top_dog	pointer
,	O
*	O
sym	pointer
;	O
unsigned	O
int	O
sym_index	int
;	O
unsigned	O
log_scale	int
;	O
double	O
top_time	double
;	O
bfd_vma	long
addr	pointer
;	O
if	O
(	O
first_output	int
)	O
first_output	int
=	O
FALSE	int
;	O
else	O
printf	function
(	O
"\f\n"	pointer
)	O
;	O
accum_time	double
=	O
0.0	int
;	O
if	O
(	O
bsd_style_output	int
)	O
{	O
if	O
(	O
print_descriptions	int
)	O
{	O
printf	function
(	O
_	O
(	O
"\n\n\nflat profile:\n"	pointer
)	O
)	O
;	O
flat_blurb	function
(	O
stdout	pointer
)	O
;	O
}	O
}	O
else	O
{	O
printf	function
(	O
_	O
(	O
"Flat profile:\n"	pointer
)	O
)	O
;	O
}	O
time_sorted_syms	pointer
=	O
(	O
Sym	struct
*	O
*	O
)	O
xmalloc	function
(	O
symtab	struct
.	O
len	long
*	O
sizeof	O
(	O
Sym	struct
*	O
)	O
)	O
;	O
for	O
(	O
sym_index	int
=	O
0	int
;	O
sym_index	int
<	O
symtab	struct
.	O
len	long
;	O
++	O
sym_index	int
)	O
time_sorted_syms	pointer
[	O
sym_index	int
]	O
=	O
&	O
symtab	struct
.	O
base	int
[	O
sym_index	int
]	O
;	O
qsort	function
(	O
time_sorted_syms	pointer
,	O
symtab	struct
.	O
len	long
,	O
sizeof	O
(	O
Sym	struct
*	O
)	O
,	O
cmp_time	function
)	O
;	O
if	O
(	O
bsd_style_output	int
)	O
{	O
log_scale	int
=	O
5	int
;	O
}	O
else	O
{	O
log_scale	int
=	O
0	int
;	O
top_dog	pointer
=	O
0	int
;	O
top_time	double
=	O
0.0	int
;	O
for	O
(	O
sym_index	int
=	O
0	int
;	O
sym_index	int
<	O
symtab	struct
.	O
len	long
;	O
++	O
sym_index	int
)	O
{	O
sym	pointer
=	O
time_sorted_syms	pointer
[	O
sym_index	int
]	O
;	O
if	O
(	O
sym	pointer
->	O
ncalls	long
!=	O
0	int
)	O
{	O
double	O
call_time	double
;	O
call_time	double
=	O
(	O
sym	pointer
->	O
hist	struct
.	O
time	struct
+	O
sym	pointer
->	O
cg	struct
.	O
child_time	double
)	O
/	O
sym	pointer
->	O
ncalls	long
;	O
if	O
(	O
call_time	double
>	O
top_time	double
)	O
{	O
top_dog	pointer
=	O
sym	pointer
;	O
top_time	double
=	O
call_time	double
;	O
}	O
}	O
}	O
if	O
(	O
top_dog	pointer
&&	O
top_dog	pointer
->	O
ncalls	long
!=	O
0	int
&&	O
top_time	double
>	O
0.0	int
)	O
{	O
top_time	double
/=	O
hz	long
;	O
for	O
(	O
log_scale	int
=	O
0	int
;	O
log_scale	int
<	O
ARRAY_SIZE	O
(	O
SItab	array
)	O
;	O
log_scale	int
++	O
)	O
{	O
double	O
scaled_value	double
=	O
SItab	array
[	O
log_scale	int
]	O
.	O
scale	double
*	O
top_time	double
;	O
if	O
(	O
scaled_value	double
>=	O
1.0	int
&&	O
scaled_value	double
<	O
1000.0	int
)	O
break	O
;	O
}	O
}	O
}	O
print_header	function
(	O
SItab	array
[	O
log_scale	int
]	O
.	O
prefix	char
)	O
;	O
for	O
(	O
sym_index	int
=	O
0	int
;	O
sym_index	int
<	O
symtab	struct
.	O
len	long
;	O
++	O
sym_index	int
)	O
{	O
addr	pointer
=	O
time_sorted_syms	pointer
[	O
sym_index	int
]	O
->	O
addr	pointer
;	O
if	O
(	O
sym_lookup	function
(	O
&	O
syms	pointer
[	O
INCL_FLAT	int
]	O
,	O
addr	pointer
)	O
||	O
(	O
syms	pointer
[	O
INCL_FLAT	int
]	O
.	O
len	long
==	O
0	int
&&	O
!	O
sym_lookup	function
(	O
&	O
syms	pointer
[	O
EXCL_FLAT	int
]	O
,	O
addr	pointer
)	O
)	O
)	O
print_line	function
(	O
time_sorted_syms	pointer
[	O
sym_index	int
]	O
,	O
SItab	array
[	O
log_scale	int
]	O
.	O
scale	double
)	O
;	O
}	O
free	function
(	O
time_sorted_syms	pointer
)	O
;	O
if	O
(	O
print_descriptions	int
&&	O
!	O
bsd_style_output	int
)	O
flat_blurb	function
(	O
stdout	pointer
)	O
;	O
}	O
int	O
hist_check_address	function
(	O
unsigned	O
address	long
)	O
{	O
unsigned	O
i	pointer
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
num_histograms	int
;	O
++	O
i	pointer
)	O
if	O
(	O
histograms	pointer
[	O
i	pointer
]	O
.	O
lowpc	long
<=	O
address	long
&&	O
address	long
<	O
histograms	pointer
[	O
i	pointer
]	O
.	O
highpc	long
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
void	O
hist_clip_symbol_address	function
(	O
bfd_vma	long
*	O
p_lowpc	pointer
,	O
bfd_vma	long
*	O
p_highpc	pointer
)	O
{	O
unsigned	O
i	pointer
;	O
int	O
found	int
=	O
0	int
;	O
if	O
(	O
num_histograms	int
==	O
0	int
)	O
{	O
*	O
p_highpc	pointer
=	O
*	O
p_lowpc	pointer
;	O
return	O
;	O
}	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
num_histograms	int
;	O
++	O
i	pointer
)	O
{	O
bfd_vma	long
common_low	long
,	O
common_high	long
;	O
common_low	long
=	O
max	O
(	O
histograms	pointer
[	O
i	pointer
]	O
.	O
lowpc	long
,	O
*	O
p_lowpc	pointer
)	O
;	O
common_high	long
=	O
min	O
(	O
histograms	pointer
[	O
i	pointer
]	O
.	O
highpc	long
,	O
*	O
p_highpc	pointer
)	O
;	O
if	O
(	O
common_low	long
<	O
common_high	long
)	O
{	O
if	O
(	O
found	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: found a symbol that covers "	pointer
"several histogram records"	pointer
)	O
,	O
whoami	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
found	int
=	O
1	int
;	O
*	O
p_lowpc	pointer
=	O
common_low	long
;	O
*	O
p_highpc	pointer
=	O
common_high	long
;	O
}	O
}	O
if	O
(	O
!	O
found	int
)	O
*	O
p_highpc	pointer
=	O
*	O
p_lowpc	pointer
;	O
}	O
static	O
histogram	struct
*	O
find_histogram	function
(	O
bfd_vma	long
lowpc	long
,	O
bfd_vma	long
highpc	long
)	O
{	O
unsigned	O
i	pointer
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
num_histograms	int
;	O
++	O
i	pointer
)	O
{	O
if	O
(	O
histograms	pointer
[	O
i	pointer
]	O
.	O
lowpc	long
==	O
lowpc	long
&&	O
histograms	pointer
[	O
i	pointer
]	O
.	O
highpc	long
==	O
highpc	long
)	O
return	O
&	O
histograms	pointer
[	O
i	pointer
]	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
histogram	struct
*	O
find_histogram_for_pc	function
(	O
bfd_vma	long
pc	long
)	O
{	O
unsigned	O
i	pointer
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
num_histograms	int
;	O
++	O
i	pointer
)	O
{	O
if	O
(	O
histograms	pointer
[	O
i	pointer
]	O
.	O
lowpc	long
<=	O
pc	long
&&	O
pc	long
<	O
histograms	pointer
[	O
i	pointer
]	O
.	O
highpc	long
)	O
return	O
&	O
histograms	pointer
[	O
i	pointer
]	O
;	O
}	O
return	O
0	int
;	O
}	O