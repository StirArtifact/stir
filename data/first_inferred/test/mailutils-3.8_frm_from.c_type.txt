int	O
count_only	int
;	O
char	O
*	O
sender_option	*
;	O
char	O
*	O
mailbox_name	*
;	O
static	O
struct	O
mu_option	struct
from_options	array
[	O
]	O
=	O
{	O
{	O
"count"	*
,	O
'c'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"just print a count of messages and exit"	*
)	O
,	O
mu_c_bool	int
,	O
&	O
count_only	int
}	O
,	O
{	O
"sender"	*
,	O
's'	O
,	O
N_	O
(	O
"ADDRESS"	*
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"print only mail from addresses containing the supplied string"	*
)	O
,	O
mu_c_string	int
,	O
&	O
sender_option	int
}	O
,	O
{	O
"file"	*
,	O
'f'	O
,	O
N_	O
(	O
"FILE"	*
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"read mail from FILE"	*
)	O
,	O
mu_c_string	int
,	O
&	O
mailbox_name	int
}	O
,	O
{	O
"debug"	*
,	O
'd'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"enable debugging output"	*
)	O
,	O
mu_c_incr	int
,	O
&	O
frm_debug	int
}	O
,	O
MU_OPTION_END	O
}	O
,	O
*	O
options	array
[	O
]	O
=	O
{	O
from_options	*
,	O
NULL	O
}	O
;	O
static	O
struct	O
mu_cli_setup	struct
cli	struct
=	O
{	O
options	array
,	O
NULL	O
,	O
N_	O
(	O
"GNU from -- display from and subject."	*
)	O
,	O
N_	O
(	O
"[OPTIONS] [USER]"	*
)	O
,	O
}	O
;	O
static	O
char	O
*	O
capa	*
[	O
]	O
=	O
{	O
"debug"	*
,	O
"mailbox"	*
,	O
"locking"	*
,	O
NULL	O
}	O
;	O
static	O
int	O
from_select	function
(	O
size_t	long
index	function
,	O
mu_message_t	*
msg	*
)	O
{	O
if	O
(	O
count_only	*
)	O
return	O
0	int
;	O
if	O
(	O
sender_option	*
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
mu_header_t	*
hdr	*
=	O
NULL	O
;	O
char	O
*	O
sender	*
;	O
mu_message_get_header	function
(	O
msg	*
,	O
&	O
hdr	*
)	O
;	O
if	O
(	O
mu_header_aget_value_unfold	function
(	O
hdr	*
,	O
MU_HEADER_FROM	*
,	O
&	O
sender	*
)	O
==	O
0	int
)	O
{	O
if	O
(	O
strstr	function
(	O
sender	*
,	O
sender_option	*
)	O
)	O
rc	int
=	O
1	int
;	O
free	function
(	O
sender	*
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
return	O
1	int
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*
)	O
{	O
size_t	long
total	long
;	O
MU_APP_INIT_NLS	O
(	O
)	O
;	O
mu_register_all_mbox_formats	O
(	O
)	O
;	O
mu_auth_register_module	function
(	O
&	O
mu_auth_tls_module	struct
)	O
;	O
mu_cli	function
(	O
argc	long
,	O
argv	*
,	O
&	O
cli	struct
,	O
capa	*
,	O
NULL	O
,	O
&	O
argc	long
,	O
&	O
argv	*
)	O
;	O
if	O
(	O
argc	long
>	O
1	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"too many arguments"	*
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
argc	long
>	O
0	int
)	O
{	O
if	O
(	O
mailbox_name	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"both --from option and user name are specified"	*
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
mailbox_name	*
=	O
mu_alloc	function
(	O
strlen	function
(	O
argv	*
[	O
0	int
]	O
)	O
+	O
2	int
)	O
;	O
mailbox_name	*
[	O
0	int
]	O
=	O
'%'	O
;	O
strcpy	function
(	O
mailbox_name	*
+	O
1	int
,	O
argv	*
[	O
0	int
]	O
)	O
;	O
}	O
init_output	function
(	O
0	int
)	O
;	O
frm_scan	function
(	O
mailbox_name	*
,	O
from_select	*
,	O
&	O
total	long
)	O
;	O
if	O
(	O
count_only	int
)	O
{	O
mu_printf	function
(	O
ngettext	function
(	O
"There is %lu message in your incoming mailbox.\n"	*
,	O
"There are %lu messages in your incoming mailbox.\n"	*
,	O
total	long
)	O
,	O
(	O
unsigned	O
long	O
)	O
total	long
)	O
;	O
}	O
return	O
0	int
;	O
}	O