void	O
ctf_list_append	function
(	O
ctf_list_t	struct
*	O
lp	*
,	O
void	O
*	O
newp	*
)	O
{	O
ctf_list_t	struct
*	O
p	*
=	O
lp	*
->	O
l_prev	*
;	O
ctf_list_t	struct
*	O
q	*
=	O
newp	*
;	O
lp	*
->	O
l_prev	*
=	O
q	*
;	O
q	*
->	O
l_prev	*
=	O
p	*
;	O
q	*
->	O
l_next	*
=	O
NULL	O
;	O
if	O
(	O
p	*
!=	O
NULL	O
)	O
p	*
->	O
l_next	int
=	O
q	*
;	O
else	O
lp	*
->	O
l_next	enum
=	O
q	*
;	O
}	O
void	O
ctf_list_prepend	function
(	O
ctf_list_t	struct
*	O
lp	*
,	O
void	O
*	O
newp	*
)	O
{	O
ctf_list_t	struct
*	O
p	*
=	O
newp	*
;	O
ctf_list_t	struct
*	O
q	*
=	O
lp	*
->	O
l_next	*
;	O
lp	*
->	O
l_next	*
=	O
p	*
;	O
p	*
->	O
l_prev	*
=	O
NULL	O
;	O
p	*
->	O
l_next	*
=	O
q	*
;	O
if	O
(	O
q	*
!=	O
NULL	O
)	O
q	*
->	O
l_prev	*
=	O
p	*
;	O
else	O
lp	*
->	O
l_prev	*
=	O
p	*
;	O
}	O
void	O
ctf_list_delete	function
(	O
ctf_list_t	struct
*	O
lp	*
,	O
void	O
*	O
existing	*
)	O
{	O
ctf_list_t	struct
*	O
p	*
=	O
existing	*
;	O
if	O
(	O
p	*
->	O
l_prev	*
!=	O
NULL	O
)	O
p	*
->	O
l_prev	*
->	O
l_next	*
=	O
p	*
->	O
l_next	int
;	O
else	O
lp	*
->	O
l_next	enum
=	O
p	*
->	O
l_next	int
;	O
if	O
(	O
p	*
->	O
l_next	*
!=	O
NULL	O
)	O
p	*
->	O
l_next	*
->	O
l_prev	*
=	O
p	*
->	O
l_prev	int
;	O
else	O
lp	*
->	O
l_prev	*
=	O
p	*
->	O
l_prev	int
;	O
}	O
int	O
ctf_list_empty_p	function
(	O
ctf_list_t	struct
*	O
lp	*
)	O
{	O
return	O
(	O
lp	*
->	O
l_next	*
==	O
NULL	O
&&	O
lp	*
->	O
l_prev	*
==	O
NULL	O
)	O
;	O
}	O
Elf64_Sym	struct
*	O
ctf_sym_to_elf64	function
(	O
const	O
Elf32_Sym	struct
*	O
src	*
,	O
Elf64_Sym	struct
*	O
dst	*
)	O
{	O
dst	*
->	O
st_name	int
=	O
src	*
->	O
st_name	*
;	O
dst	*
->	O
st_value	int
=	O
src	*
->	O
st_value	*
;	O
dst	*
->	O
st_size	long
=	O
src	*
->	O
st_size	long
;	O
dst	*
->	O
st_info	int
=	O
src	*
->	O
st_info	*
;	O
dst	*
->	O
st_other	int
=	O
src	*
->	O
st_other	*
;	O
dst	*
->	O
st_shndx	*
=	O
src	*
->	O
st_shndx	*
;	O
return	O
dst	*
;	O
}	O
char	O
*	O
ctf_str_append	function
(	O
char	O
*	O
s	*
,	O
const	O
char	O
*	O
append	*
)	O
{	O
size_t	long
s_len	long
=	O
0	int
;	O
if	O
(	O
append	*
==	O
NULL	O
)	O
return	O
s	*
;	O
if	O
(	O
s	*
!=	O
NULL	O
)	O
s_len	long
=	O
strlen	function
(	O
s	*
)	O
;	O
size_t	long
append_len	long
=	O
strlen	function
(	O
append	*
)	O
;	O
if	O
(	O
(	O
s	*
=	O
realloc	function
(	O
s	*
,	O
s_len	long
+	O
append_len	int
+	O
1	int
)	O
)	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
memcpy	function
(	O
s	*
+	O
s_len	int
,	O
append	*
,	O
append_len	int
)	O
;	O
s	*
[	O
s_len	long
+	O
append_len	int
]	O
=	O
'\0'	O
;	O
return	O
s	*
;	O
}	O
char	O
*	O
ctf_str_append_noerr	function
(	O
char	O
*	O
s	*
,	O
const	O
char	O
*	O
append	*
)	O
{	O
char	O
*	O
new_s	*
;	O
new_s	*
=	O
ctf_str_append	function
(	O
s	*
,	O
append	*
)	O
;	O
if	O
(	O
!	O
new_s	*
)	O
return	O
s	*
;	O
return	O
new_s	*
;	O
}	O
void	O
*	O
ctf_realloc	function
(	O
ctf_file_t	struct
*	O
fp	*
,	O
void	O
*	O
ptr	*
,	O
size_t	long
size	long
)	O
{	O
if	O
(	O
fp	*
->	O
ctf_str_num_refs	long
>	O
0	int
)	O
{	O
ctf_dprintf	function
(	O
"%p: attempt to realloc() string table with %lu active refs\n"	*
,	O
(	O
void	O
*	O
)	O
fp	*
,	O
(	O
unsigned	O
long	O
)	O
fp	*
->	O
ctf_str_num_refs	*
)	O
;	O
return	O
NULL	O
;	O
}	O
return	O
realloc	function
(	O
ptr	*
,	O
size	long
)	O
;	O
}	O
void	O
*	O
ctf_set_open_errno	function
(	O
int	O
*	O
errp	*
,	O
int	O
error	int
)	O
{	O
if	O
(	O
errp	*
!=	O
NULL	O
)	O
*	O
errp	*
=	O
error	*
;	O
return	O
NULL	O
;	O
}	O
unsigned	O
long	O
ctf_set_errno	function
(	O
ctf_file_t	struct
*	O
fp	*
,	O
int	O
err	int
)	O
{	O
fp	*
->	O
ctf_errno	function
=	O
err	long
;	O
return	O
CTF_ERR	*
;	O
}	O