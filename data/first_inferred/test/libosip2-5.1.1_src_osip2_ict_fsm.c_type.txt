transition_t	struct
ict_transition	array
[	O
11	int
]	O
=	O
{	O
{	O
ICT_PRE_CALLING	int
,	O
SND_REQINVITE	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
ict_snd_invite	function
,	O
&	O
ict_transition	array
[	O
1	int
]	O
,	O
NULL	O
}	O
,	O
{	O
ICT_CALLING	int
,	O
TIMEOUT_A	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
osip_ict_timeout_a_event	function
,	O
&	O
ict_transition	array
[	O
2	int
]	O
,	O
NULL	O
}	O
,	O
{	O
ICT_CALLING	int
,	O
TIMEOUT_B	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
osip_ict_timeout_b_event	function
,	O
&	O
ict_transition	array
[	O
3	int
]	O
,	O
NULL	O
}	O
,	O
{	O
ICT_CALLING	int
,	O
RCV_STATUS_1XX	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
ict_rcv_1xx	function
,	O
&	O
ict_transition	array
[	O
4	int
]	O
,	O
NULL	O
}	O
,	O
{	O
ICT_CALLING	int
,	O
RCV_STATUS_2XX	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
ict_rcv_2xx	function
,	O
&	O
ict_transition	array
[	O
5	int
]	O
,	O
NULL	O
}	O
,	O
{	O
ICT_CALLING	int
,	O
RCV_STATUS_3456XX	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
ict_rcv_3456xx	function
,	O
&	O
ict_transition	array
[	O
6	int
]	O
,	O
NULL	O
}	O
,	O
{	O
ICT_PROCEEDING	int
,	O
RCV_STATUS_1XX	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
ict_rcv_1xx	function
,	O
&	O
ict_transition	array
[	O
7	int
]	O
,	O
NULL	O
}	O
,	O
{	O
ICT_PROCEEDING	int
,	O
RCV_STATUS_2XX	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
ict_rcv_2xx	function
,	O
&	O
ict_transition	array
[	O
8	int
]	O
,	O
NULL	O
}	O
,	O
{	O
ICT_PROCEEDING	int
,	O
RCV_STATUS_3456XX	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
ict_rcv_3456xx	function
,	O
&	O
ict_transition	array
[	O
9	int
]	O
,	O
NULL	O
}	O
,	O
{	O
ICT_COMPLETED	int
,	O
RCV_STATUS_3456XX	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
ict_retransmit_ack	function
,	O
&	O
ict_transition	array
[	O
10	int
]	O
,	O
NULL	O
}	O
,	O
{	O
ICT_COMPLETED	int
,	O
TIMEOUT_D	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
osip_ict_timeout_d_event	function
,	O
NULL	O
,	O
NULL	O
}	O
}	O
;	O
osip_statemachine_t	struct
ict_fsm	struct
=	O
{	O
ict_transition	array
}	O
;	O
static	O
void	O
ict_handle_transport_error	function
(	O
osip_transaction_t	struct
*	O
ict	pointer
,	O
int	O
err	int
)	O
{	O
__osip_transport_error_callback	function
(	O
OSIP_ICT_TRANSPORT_ERROR	int
,	O
ict	pointer
,	O
err	int
)	O
;	O
__osip_transaction_set_state	function
(	O
ict	pointer
,	O
ICT_TERMINATED	int
)	O
;	O
__osip_kill_transaction_callback	function
(	O
OSIP_ICT_KILL_TRANSACTION	int
,	O
ict	pointer
)	O
;	O
}	O
void	O
ict_snd_invite	function
(	O
osip_transaction_t	struct
*	O
ict	pointer
,	O
osip_event_t	struct
*	O
evt	pointer
)	O
{	O
int	O
i	int
;	O
osip_t	struct
*	O
osip	struct
=	O
(	O
osip_t	struct
*	O
)	O
ict	pointer
->	O
config	pointer
;	O
ict	pointer
->	O
orig_request	pointer
=	O
evt	pointer
->	O
sip	pointer
;	O
i	int
=	O
osip	struct
->	O
cb_send_message	pointer
(	O
ict	pointer
,	O
evt	pointer
->	O
sip	pointer
,	O
ict	pointer
->	O
ict_context	pointer
->	O
destination	pointer
,	O
ict	pointer
->	O
ict_context	pointer
->	O
port	pointer
,	O
ict	pointer
->	O
out_socket	int
)	O
;	O
if	O
(	O
i	int
<	O
0	int
)	O
{	O
ict_handle_transport_error	function
(	O
ict	pointer
,	O
i	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
i	int
==	O
0	int
)	O
{	O
osip_via_t	struct
*	O
via	pointer
;	O
char	O
*	O
proto	pointer
;	O
i	int
=	O
osip_message_get_via	function
(	O
ict	pointer
->	O
orig_request	pointer
,	O
0	int
,	O
&	O
via	pointer
)	O
;	O
if	O
(	O
i	int
<	O
0	int
)	O
{	O
ict_handle_transport_error	function
(	O
ict	pointer
,	O
i	int
)	O
;	O
return	O
;	O
}	O
proto	pointer
=	O
via_get_protocol	function
(	O
via	pointer
)	O
;	O
if	O
(	O
proto	pointer
==	O
NULL	O
)	O
{	O
ict_handle_transport_error	function
(	O
ict	pointer
,	O
i	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
osip_strcasecmp	function
(	O
proto	pointer
,	O
"TCP"	pointer
)	O
!=	O
0	int
&&	O
osip_strcasecmp	function
(	O
proto	pointer
,	O
"TLS"	pointer
)	O
!=	O
0	int
&&	O
osip_strcasecmp	function
(	O
proto	pointer
,	O
"SCTP"	pointer
)	O
!=	O
0	int
)	O
{	O
}	O
else	O
{	O
ict	pointer
->	O
ict_context	pointer
->	O
timer_a_length	int
=	O
-	O
1	int
;	O
ict	pointer
->	O
ict_context	pointer
->	O
timer_a_start	struct
.	O
tv_sec	long
=	O
-	O
1	int
;	O
}	O
}	O
__osip_message_callback	function
(	O
OSIP_ICT_INVITE_SENT	int
,	O
ict	pointer
,	O
ict	pointer
->	O
orig_request	pointer
)	O
;	O
__osip_transaction_set_state	function
(	O
ict	pointer
,	O
ICT_CALLING	int
)	O
;	O
}	O
void	O
osip_ict_timeout_a_event	function
(	O
osip_transaction_t	struct
*	O
ict	pointer
,	O
osip_event_t	struct
*	O
evt	pointer
)	O
{	O
osip_t	struct
*	O
osip	struct
=	O
(	O
osip_t	struct
*	O
)	O
ict	pointer
->	O
config	pointer
;	O
int	O
i	int
;	O
ict	pointer
->	O
ict_context	pointer
->	O
timer_a_length	int
=	O
ict	pointer
->	O
ict_context	pointer
->	O
timer_a_length	int
*	O
2	int
;	O
osip_gettimeofday	function
(	O
&	O
ict	pointer
->	O
ict_context	pointer
->	O
timer_a_start	struct
,	O
NULL	O
)	O
;	O
add_gettimeofday	function
(	O
&	O
ict	pointer
->	O
ict_context	pointer
->	O
timer_a_start	struct
,	O
ict	pointer
->	O
ict_context	pointer
->	O
timer_a_length	int
)	O
;	O
i	int
=	O
osip	struct
->	O
cb_send_message	pointer
(	O
ict	pointer
,	O
ict	pointer
->	O
orig_request	pointer
,	O
ict	pointer
->	O
ict_context	pointer
->	O
destination	pointer
,	O
ict	pointer
->	O
ict_context	pointer
->	O
port	pointer
,	O
ict	pointer
->	O
out_socket	int
)	O
;	O
if	O
(	O
i	int
<	O
0	int
)	O
{	O
ict_handle_transport_error	function
(	O
ict	pointer
,	O
i	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
i	int
==	O
0	int
)	O
{	O
osip_via_t	struct
*	O
via	pointer
;	O
char	O
*	O
proto	pointer
;	O
i	int
=	O
osip_message_get_via	function
(	O
ict	pointer
->	O
orig_request	pointer
,	O
0	int
,	O
&	O
via	pointer
)	O
;	O
if	O
(	O
i	int
<	O
0	int
)	O
{	O
ict_handle_transport_error	function
(	O
ict	pointer
,	O
i	int
)	O
;	O
return	O
;	O
}	O
proto	pointer
=	O
via_get_protocol	function
(	O
via	pointer
)	O
;	O
if	O
(	O
proto	pointer
==	O
NULL	O
)	O
{	O
ict_handle_transport_error	function
(	O
ict	pointer
,	O
i	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
osip_strcasecmp	function
(	O
proto	pointer
,	O
"TCP"	pointer
)	O
!=	O
0	int
&&	O
osip_strcasecmp	function
(	O
proto	pointer
,	O
"TLS"	pointer
)	O
!=	O
0	int
&&	O
osip_strcasecmp	function
(	O
proto	pointer
,	O
"SCTP"	pointer
)	O
!=	O
0	int
)	O
{	O
}	O
else	O
{	O
ict	pointer
->	O
ict_context	pointer
->	O
timer_a_length	int
=	O
-	O
1	int
;	O
ict	pointer
->	O
ict_context	pointer
->	O
timer_a_start	struct
.	O
tv_sec	long
=	O
-	O
1	int
;	O
}	O
}	O
if	O
(	O
i	int
==	O
0	int
)	O
__osip_message_callback	function
(	O
OSIP_ICT_INVITE_SENT_AGAIN	int
,	O
ict	pointer
,	O
ict	pointer
->	O
orig_request	pointer
)	O
;	O
}	O
void	O
osip_ict_timeout_b_event	function
(	O
osip_transaction_t	struct
*	O
ict	pointer
,	O
osip_event_t	struct
*	O
evt	pointer
)	O
{	O
ict	pointer
->	O
ict_context	pointer
->	O
timer_b_length	int
=	O
-	O
1	int
;	O
ict	pointer
->	O
ict_context	pointer
->	O
timer_b_start	struct
.	O
tv_sec	long
=	O
-	O
1	int
;	O
__osip_message_callback	function
(	O
OSIP_ICT_STATUS_TIMEOUT	int
,	O
ict	pointer
,	O
evt	pointer
->	O
sip	pointer
)	O
;	O
__osip_transaction_set_state	function
(	O
ict	pointer
,	O
ICT_TERMINATED	int
)	O
;	O
__osip_kill_transaction_callback	function
(	O
OSIP_ICT_KILL_TRANSACTION	int
,	O
ict	pointer
)	O
;	O
}	O
void	O
ict_rcv_1xx	function
(	O
osip_transaction_t	struct
*	O
ict	pointer
,	O
osip_event_t	struct
*	O
evt	pointer
)	O
{	O
if	O
(	O
ict	pointer
->	O
last_response	pointer
!=	O
NULL	O
)	O
{	O
osip_message_free	function
(	O
ict	pointer
->	O
last_response	pointer
)	O
;	O
}	O
ict	pointer
->	O
last_response	pointer
=	O
evt	pointer
->	O
sip	pointer
;	O
__osip_message_callback	function
(	O
OSIP_ICT_STATUS_1XX_RECEIVED	int
,	O
ict	pointer
,	O
evt	pointer
->	O
sip	pointer
)	O
;	O
__osip_transaction_set_state	function
(	O
ict	pointer
,	O
ICT_PROCEEDING	int
)	O
;	O
}	O
void	O
ict_rcv_2xx	function
(	O
osip_transaction_t	struct
*	O
ict	pointer
,	O
osip_event_t	struct
*	O
evt	pointer
)	O
{	O
if	O
(	O
ict	pointer
->	O
last_response	pointer
!=	O
NULL	O
)	O
{	O
osip_message_free	function
(	O
ict	pointer
->	O
last_response	pointer
)	O
;	O
}	O
ict	pointer
->	O
last_response	pointer
=	O
evt	pointer
->	O
sip	pointer
;	O
__osip_message_callback	function
(	O
OSIP_ICT_STATUS_2XX_RECEIVED	int
,	O
ict	pointer
,	O
evt	pointer
->	O
sip	pointer
)	O
;	O
__osip_transaction_set_state	function
(	O
ict	pointer
,	O
ICT_TERMINATED	int
)	O
;	O
__osip_kill_transaction_callback	function
(	O
OSIP_ICT_KILL_TRANSACTION	int
,	O
ict	pointer
)	O
;	O
}	O
osip_message_t	struct
*	O
ict_create_ack	function
(	O
osip_transaction_t	struct
*	O
ict	pointer
,	O
osip_message_t	struct
*	O
response	pointer
)	O
{	O
int	O
i	int
;	O
osip_message_t	struct
*	O
ack	pointer
;	O
i	int
=	O
osip_message_init	function
(	O
&	O
ack	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
NULL	O
;	O
i	int
=	O
osip_from_clone	function
(	O
response	pointer
->	O
from	pointer
,	O
&	O
(	O
ack	pointer
->	O
from	pointer
)	O
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_message_free	function
(	O
ack	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
i	int
=	O
osip_to_clone	function
(	O
response	pointer
->	O
to	pointer
,	O
&	O
(	O
ack	pointer
->	O
to	pointer
)	O
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_message_free	function
(	O
ack	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
i	int
=	O
osip_call_id_clone	function
(	O
response	pointer
->	O
call_id	pointer
,	O
&	O
(	O
ack	pointer
->	O
call_id	pointer
)	O
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_message_free	function
(	O
ack	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
i	int
=	O
osip_cseq_clone	function
(	O
response	pointer
->	O
cseq	pointer
,	O
&	O
(	O
ack	pointer
->	O
cseq	pointer
)	O
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_message_free	function
(	O
ack	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
osip_free	O
(	O
ack	pointer
->	O
cseq	pointer
->	O
method	pointer
)	O
;	O
ack	pointer
->	O
cseq	pointer
->	O
method	pointer
=	O
osip_strdup	function
(	O
"ACK"	pointer
)	O
;	O
if	O
(	O
ack	pointer
->	O
cseq	pointer
->	O
method	pointer
==	O
NULL	O
)	O
{	O
osip_message_free	function
(	O
ack	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
ack	pointer
->	O
sip_method	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
5	int
)	O
;	O
if	O
(	O
ack	pointer
->	O
sip_method	pointer
==	O
NULL	O
)	O
{	O
osip_message_free	function
(	O
ack	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
sprintf	function
(	O
ack	pointer
->	O
sip_method	pointer
,	O
"ACK"	pointer
)	O
;	O
ack	pointer
->	O
sip_version	pointer
=	O
osip_strdup	function
(	O
ict	pointer
->	O
orig_request	pointer
->	O
sip_version	pointer
)	O
;	O
if	O
(	O
ack	pointer
->	O
sip_version	pointer
==	O
NULL	O
)	O
{	O
osip_message_free	function
(	O
ack	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
ack	pointer
->	O
status_code	int
=	O
0	int
;	O
ack	pointer
->	O
reason_phrase	pointer
=	O
NULL	O
;	O
i	int
=	O
osip_uri_clone	function
(	O
ict	pointer
->	O
orig_request	pointer
->	O
req_uri	pointer
,	O
&	O
(	O
ack	pointer
->	O
req_uri	pointer
)	O
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_message_free	function
(	O
ack	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
{	O
osip_via_t	struct
*	O
via	pointer
;	O
osip_via_t	struct
*	O
orig_via	pointer
;	O
osip_message_get_via	function
(	O
ict	pointer
->	O
orig_request	pointer
,	O
0	int
,	O
&	O
orig_via	pointer
)	O
;	O
if	O
(	O
orig_via	pointer
==	O
NULL	O
)	O
{	O
osip_message_free	function
(	O
ack	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
i	int
=	O
osip_via_clone	function
(	O
orig_via	pointer
,	O
&	O
via	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_message_free	function
(	O
ack	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
osip_list_add	function
(	O
&	O
ack	pointer
->	O
vias	struct
,	O
via	pointer
,	O
-	O
1	int
)	O
;	O
}	O
{	O
int	O
pos	int
=	O
0	int
;	O
osip_route_t	struct
*	O
route	pointer
;	O
osip_route_t	struct
*	O
orig_route	pointer
;	O
while	O
(	O
!	O
osip_list_eol	function
(	O
&	O
ict	pointer
->	O
orig_request	pointer
->	O
routes	struct
,	O
pos	int
)	O
)	O
{	O
orig_route	pointer
=	O
(	O
osip_route_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
ict	pointer
->	O
orig_request	pointer
->	O
routes	struct
,	O
pos	int
)	O
;	O
i	int
=	O
osip_route_clone	O
(	O
orig_route	pointer
,	O
&	O
route	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_message_free	function
(	O
ack	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
osip_list_add	function
(	O
&	O
ack	pointer
->	O
routes	struct
,	O
route	pointer
,	O
-	O
1	int
)	O
;	O
pos	int
++	O
;	O
}	O
}	O
if	O
(	O
response	pointer
->	O
status_code	int
!=	O
401	int
&&	O
response	pointer
->	O
status_code	int
!=	O
407	int
)	O
{	O
if	O
(	O
osip_list_size	function
(	O
&	O
ict	pointer
->	O
orig_request	pointer
->	O
authorizations	struct
)	O
>	O
0	int
)	O
{	O
i	int
=	O
osip_list_clone	function
(	O
&	O
ict	pointer
->	O
orig_request	pointer
->	O
authorizations	struct
,	O
&	O
ack	pointer
->	O
authorizations	struct
,	O
(	O
int	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
*	O
)	O
)	O
&	O
osip_authorization_clone	function
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_message_free	function
(	O
ack	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
if	O
(	O
osip_list_size	function
(	O
&	O
ict	pointer
->	O
orig_request	pointer
->	O
proxy_authorizations	struct
)	O
>	O
0	int
)	O
{	O
i	int
=	O
osip_list_clone	function
(	O
&	O
ict	pointer
->	O
orig_request	pointer
->	O
proxy_authorizations	struct
,	O
&	O
ack	pointer
->	O
proxy_authorizations	struct
,	O
(	O
int	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
*	O
)	O
)	O
&	O
osip_proxy_authorization_clone	O
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_message_free	function
(	O
ack	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
}	O
return	O
ack	pointer
;	O
}	O
void	O
ict_rcv_3456xx	function
(	O
osip_transaction_t	struct
*	O
ict	pointer
,	O
osip_event_t	struct
*	O
evt	pointer
)	O
{	O
osip_route_t	struct
*	O
route	pointer
;	O
int	O
i	int
;	O
osip_t	struct
*	O
osip	struct
=	O
(	O
osip_t	struct
*	O
)	O
ict	pointer
->	O
config	pointer
;	O
if	O
(	O
ict	pointer
->	O
last_response	pointer
!=	O
NULL	O
)	O
osip_message_free	function
(	O
ict	pointer
->	O
last_response	pointer
)	O
;	O
ict	pointer
->	O
last_response	pointer
=	O
evt	pointer
->	O
sip	pointer
;	O
if	O
(	O
ict	pointer
->	O
state	pointer
!=	O
ICT_COMPLETED	int
)	O
{	O
osip_message_t	struct
*	O
ack	pointer
=	O
ict_create_ack	function
(	O
ict	pointer
,	O
evt	pointer
->	O
sip	pointer
)	O
;	O
ict	pointer
->	O
ack	pointer
=	O
ack	pointer
;	O
if	O
(	O
ict	pointer
->	O
ack	pointer
==	O
NULL	O
)	O
{	O
__osip_transaction_set_state	function
(	O
ict	pointer
,	O
ICT_TERMINATED	int
)	O
;	O
__osip_kill_transaction_callback	function
(	O
OSIP_ICT_KILL_TRANSACTION	int
,	O
ict	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
ict	pointer
->	O
ict_context	pointer
->	O
destination	pointer
==	O
NULL	O
)	O
{	O
osip_message_get_route	function
(	O
ack	pointer
,	O
0	int
,	O
&	O
route	pointer
)	O
;	O
if	O
(	O
route	pointer
!=	O
NULL	O
&&	O
route	pointer
->	O
url	pointer
!=	O
NULL	O
)	O
{	O
osip_uri_param_t	struct
*	O
lr_param	pointer
;	O
osip_uri_uparam_get_byname	O
(	O
route	pointer
->	O
url	pointer
,	O
"lr"	pointer
,	O
&	O
lr_param	pointer
)	O
;	O
if	O
(	O
lr_param	pointer
==	O
NULL	O
)	O
{	O
route	pointer
=	O
NULL	O
;	O
}	O
}	O
if	O
(	O
route	pointer
!=	O
NULL	O
&&	O
route	pointer
->	O
url	pointer
!=	O
NULL	O
)	O
{	O
int	O
port	pointer
=	O
5060	int
;	O
if	O
(	O
route	pointer
->	O
url	pointer
->	O
port	pointer
!=	O
NULL	O
)	O
port	pointer
=	O
osip_atoi	function
(	O
route	pointer
->	O
url	pointer
->	O
port	pointer
)	O
;	O
osip_ict_set_destination	function
(	O
ict	pointer
->	O
ict_context	pointer
,	O
osip_strdup	function
(	O
route	pointer
->	O
url	pointer
->	O
host	pointer
)	O
,	O
port	pointer
)	O
;	O
}	O
else	O
{	O
int	O
port	pointer
=	O
5060	int
;	O
osip_uri_param_t	struct
*	O
maddr_param	pointer
=	O
NULL	O
;	O
osip_uri_param_t	struct
*	O
obr_param	pointer
=	O
NULL	O
;	O
osip_uri_param_t	struct
*	O
obp_param	pointer
=	O
NULL	O
;	O
port	pointer
=	O
5060	int
;	O
if	O
(	O
ack	pointer
->	O
req_uri	pointer
->	O
port	pointer
!=	O
NULL	O
)	O
port	pointer
=	O
osip_atoi	function
(	O
ack	pointer
->	O
req_uri	pointer
->	O
port	pointer
)	O
;	O
osip_uri_uparam_get_byname	O
(	O
ack	pointer
->	O
req_uri	pointer
,	O
"x-obr"	pointer
,	O
&	O
obr_param	pointer
)	O
;	O
osip_uri_uparam_get_byname	O
(	O
ack	pointer
->	O
req_uri	pointer
,	O
"x-obp"	pointer
,	O
&	O
obp_param	pointer
)	O
;	O
osip_uri_uparam_get_byname	O
(	O
ack	pointer
->	O
req_uri	pointer
,	O
"maddr"	pointer
,	O
&	O
maddr_param	pointer
)	O
;	O
if	O
(	O
maddr_param	pointer
!=	O
NULL	O
&&	O
maddr_param	pointer
->	O
gvalue	pointer
!=	O
NULL	O
)	O
osip_ict_set_destination	function
(	O
ict	pointer
->	O
ict_context	pointer
,	O
osip_strdup	function
(	O
maddr_param	pointer
->	O
gvalue	pointer
)	O
,	O
port	pointer
)	O
;	O
else	O
if	O
(	O
obr_param	pointer
!=	O
NULL	O
&&	O
obr_param	pointer
->	O
gvalue	pointer
!=	O
NULL	O
&&	O
obp_param	pointer
!=	O
NULL	O
&&	O
obp_param	pointer
->	O
gvalue	pointer
!=	O
NULL	O
)	O
osip_ict_set_destination	function
(	O
ict	pointer
->	O
ict_context	pointer
,	O
osip_strdup	function
(	O
obr_param	pointer
->	O
gvalue	pointer
)	O
,	O
osip_atoi	function
(	O
obp_param	pointer
->	O
gvalue	pointer
)	O
)	O
;	O
else	O
osip_ict_set_destination	function
(	O
ict	pointer
->	O
ict_context	pointer
,	O
osip_strdup	function
(	O
ack	pointer
->	O
req_uri	pointer
->	O
host	pointer
)	O
,	O
port	pointer
)	O
;	O
}	O
}	O
i	int
=	O
osip	struct
->	O
cb_send_message	pointer
(	O
ict	pointer
,	O
ack	pointer
,	O
ict	pointer
->	O
ict_context	pointer
->	O
destination	pointer
,	O
ict	pointer
->	O
ict_context	pointer
->	O
port	pointer
,	O
ict	pointer
->	O
out_socket	int
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
ict_handle_transport_error	function
(	O
ict	pointer
,	O
i	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
MSG_IS_STATUS_3XX	O
(	O
evt	pointer
->	O
sip	pointer
)	O
)	O
__osip_message_callback	function
(	O
OSIP_ICT_STATUS_3XX_RECEIVED	int
,	O
ict	pointer
,	O
evt	pointer
->	O
sip	pointer
)	O
;	O
else	O
if	O
(	O
MSG_IS_STATUS_4XX	O
(	O
evt	pointer
->	O
sip	pointer
)	O
)	O
__osip_message_callback	function
(	O
OSIP_ICT_STATUS_4XX_RECEIVED	int
,	O
ict	pointer
,	O
evt	pointer
->	O
sip	pointer
)	O
;	O
else	O
if	O
(	O
MSG_IS_STATUS_5XX	O
(	O
evt	pointer
->	O
sip	pointer
)	O
)	O
__osip_message_callback	function
(	O
OSIP_ICT_STATUS_5XX_RECEIVED	int
,	O
ict	pointer
,	O
evt	pointer
->	O
sip	pointer
)	O
;	O
else	O
__osip_message_callback	function
(	O
OSIP_ICT_STATUS_6XX_RECEIVED	int
,	O
ict	pointer
,	O
evt	pointer
->	O
sip	pointer
)	O
;	O
__osip_message_callback	function
(	O
OSIP_ICT_ACK_SENT	int
,	O
ict	pointer
,	O
ack	pointer
)	O
;	O
}	O
osip_gettimeofday	function
(	O
&	O
ict	pointer
->	O
ict_context	pointer
->	O
timer_d_start	struct
,	O
NULL	O
)	O
;	O
add_gettimeofday	function
(	O
&	O
ict	pointer
->	O
ict_context	pointer
->	O
timer_d_start	struct
,	O
ict	pointer
->	O
ict_context	pointer
->	O
timer_d_length	int
)	O
;	O
__osip_transaction_set_state	function
(	O
ict	pointer
,	O
ICT_COMPLETED	int
)	O
;	O
}	O
void	O
osip_ict_timeout_d_event	function
(	O
osip_transaction_t	struct
*	O
ict	pointer
,	O
osip_event_t	struct
*	O
evt	pointer
)	O
{	O
ict	pointer
->	O
ict_context	pointer
->	O
timer_d_length	int
=	O
-	O
1	int
;	O
ict	pointer
->	O
ict_context	pointer
->	O
timer_d_start	struct
.	O
tv_sec	long
=	O
-	O
1	int
;	O
__osip_transaction_set_state	function
(	O
ict	pointer
,	O
ICT_TERMINATED	int
)	O
;	O
__osip_kill_transaction_callback	function
(	O
OSIP_ICT_KILL_TRANSACTION	int
,	O
ict	pointer
)	O
;	O
}	O
void	O
ict_retransmit_ack	function
(	O
osip_transaction_t	struct
*	O
ict	pointer
,	O
osip_event_t	struct
*	O
evt	pointer
)	O
{	O
int	O
i	int
;	O
osip_t	struct
*	O
osip	struct
=	O
(	O
osip_t	struct
*	O
)	O
ict	pointer
->	O
config	pointer
;	O
__osip_message_callback	function
(	O
OSIP_ICT_STATUS_3456XX_RECEIVED_AGAIN	int
,	O
ict	pointer
,	O
evt	pointer
->	O
sip	pointer
)	O
;	O
osip_message_free	function
(	O
evt	pointer
->	O
sip	pointer
)	O
;	O
i	int
=	O
osip	struct
->	O
cb_send_message	pointer
(	O
ict	pointer
,	O
ict	pointer
->	O
ack	pointer
,	O
ict	pointer
->	O
ict_context	pointer
->	O
destination	pointer
,	O
ict	pointer
->	O
ict_context	pointer
->	O
port	pointer
,	O
ict	pointer
->	O
out_socket	int
)	O
;	O
if	O
(	O
i	int
==	O
0	int
)	O
{	O
__osip_message_callback	function
(	O
OSIP_ICT_ACK_SENT_AGAIN	int
,	O
ict	pointer
,	O
ict	pointer
->	O
ack	pointer
)	O
;	O
__osip_transaction_set_state	function
(	O
ict	pointer
,	O
ICT_COMPLETED	int
)	O
;	O
}	O
else	O
{	O
ict_handle_transport_error	function
(	O
ict	pointer
,	O
i	int
)	O
;	O
}	O
}	O
