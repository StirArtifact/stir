typedef	O
struct	O
{	O
FILE	struct
*	O
f	*
;	O
EPChar	*
p	*
;	O
EUint32	long
tam	long
;	O
EChar	char
Name	array
[	O
500	int
]	O
;	O
}	O
INIFILE	*
,	O
*	O
PINIFILE	*
;	O
PINIFILE	*
EDMAPROC	O
edma_open_ini	function
(	O
EPChar	*
Name	*
)	O
{	O
PINIFILE	long
pini	long
;	O
EUint32	long
tam	long
;	O
if	O
(	O
Name	*
==	O
NULL	O
)	O
{	O
edma_printf_err	function
(	O
"%s"	*
,	O
"[edma_open_ini] Invalid file name"	*
)	O
;	O
return	O
NULL	O
;	O
}	O
pini	long
=	O
(	O
PINIFILE	*
)	O
edma_palloc	function
(	O
sizeof	O
(	O
INIFILE	struct
)	O
)	O
;	O
if	O
(	O
pini	*
==	O
NULL	O
)	O
{	O
printf	function
(	O
"\nCan't alloc INIFILE struct"	*
)	O
;	O
return	O
0	int
;	O
}	O
strncpy	function
(	O
pini	*
->	O
Name	*
,	O
Name	*
,	O
500	int
)	O
;	O
pini	*
->	O
f	*
=	O
fopen	function
(	O
Name	*
,	O
"rb"	*
)	O
;	O
if	O
(	O
pini	*
->	O
f	*
==	O
NULL	O
)	O
{	O
printf	function
(	O
"\n[%s] Can't Open file %s"	*
,	O
__FUNCTION__	O
,	O
Name	*
)	O
;	O
return	O
0	int
;	O
}	O
fseek	function
(	O
pini	*
->	O
f	*
,	O
0	int
,	O
SEEK_END	int
)	O
;	O
pini	*
->	O
tam	int
=	O
ftell	function
(	O
pini	*
->	O
f	*
)	O
;	O
pini	*
->	O
p	*
=	O
(	O
EPChar	*
)	O
edma_palloc	function
(	O
pini	*
->	O
tam	*
)	O
;	O
if	O
(	O
pini	*
->	O
p	*
==	O
NULL	O
)	O
{	O
printf	function
(	O
"\nCan't alloc %ld bytes for file %s"	*
,	O
pini	*
->	O
tam	*
,	O
Name	*
)	O
;	O
return	O
0	int
;	O
}	O
memset	function
(	O
pini	*
->	O
p	*
,	O
0	int
,	O
pini	*
->	O
tam	*
)	O
;	O
fseek	function
(	O
pini	*
->	O
f	*
,	O
0	int
,	O
SEEK_SET	int
)	O
;	O
tam	int
=	O
fread	function
(	O
pini	*
->	O
p	int
,	O
sizeof	O
(	O
char	O
)	O
,	O
pini	*
->	O
tam	*
,	O
pini	*
->	O
f	*
)	O
;	O
fclose	function
(	O
pini	*
->	O
f	*
)	O
;	O
return	O
pini	int
;	O
}	O
ESint32	int
EDMAPROC	O
edma_close_ini	function
(	O
PINIFILE	*
pini	int
)	O
{	O
if	O
(	O
pini	*
==	O
NULL	O
)	O
{	O
edma_printf_err	function
(	O
"%s"	*
,	O
"[edma_close_ini] Invalid file handler"	*
)	O
;	O
return	O
-	O
1	int
;	O
}	O
edma_pfree	function
(	O
(	O
HMEM	long
)	O
pini	*
->	O
p	*
,	O
pini	*
->	O
p	*
)	O
;	O
edma_pfree	function
(	O
(	O
HMEM	long
)	O
pini	*
,	O
pini	*
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAPROC	O
edma_get_ini_int	function
(	O
PINIFILE	*
pini	*
,	O
EPChar	*
Section	*
,	O
EPChar	*
Val	*
,	O
ESint32	int
def	int
)	O
{	O
EPChar	*
pi	*
;	O
EPChar	*
pe	*
;	O
EUint32	long
i	long
;	O
if	O
(	O
pini	*
==	O
NULL	O
)	O
{	O
edma_printf_err	function
(	O
"%s"	*
,	O
"[edma_get_ini_int] Invalid file handler"	*
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
Section	*
==	O
NULL	O
)	O
{	O
edma_printf_err	function
(	O
"%s"	*
,	O
"[edma_get_ini_int] Invalid Section"	*
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
Val	*
==	O
NULL	O
)	O
{	O
edma_printf_err	function
(	O
"%s"	*
,	O
"[edma_get_ini_int] Invalid Field"	*
)	O
;	O
return	O
-	O
1	int
;	O
}	O
pi	*
=	O
strstr	function
(	O
pini	*
->	O
p	*
,	O
Section	*
)	O
;	O
if	O
(	O
pi	*
==	O
NULL	O
)	O
return	O
def	*
;	O
pe	*
=	O
strchr	function
(	O
pi	*
,	O
'['	O
)	O
;	O
if	O
(	O
pe	*
!=	O
NULL	O
)	O
*	O
pe	*
=	O
0	int
;	O
pi	*
=	O
strstr	function
(	O
pi	*
,	O
Val	*
)	O
;	O
if	O
(	O
pi	*
==	O
NULL	O
)	O
{	O
*	O
pe	*
=	O
'['	O
;	O
return	O
def	*
;	O
}	O
pi	*
=	O
strchr	function
(	O
pi	*
,	O
'='	O
)	O
;	O
pi	*
++	O
;	O
i	long
=	O
atoi	function
(	O
pi	*
)	O
;	O
*	O
pe	*
=	O
'['	O
;	O
return	O
i	long
;	O
}	O
EUint32	long
EDMAPROC	O
edma_get_ini_string	function
(	O
PINIFILE	*
pini	*
,	O
EPChar	*
Section	*
,	O
EPChar	*
Val	*
,	O
EPChar	*
def	*
,	O
EPChar	*
Buffer	*
,	O
EUint32	long
size	long
)	O
{	O
EPChar	*
pi	*
;	O
EPChar	*
pe	*
,	O
pe1	*
;	O
EChar	char
sec	array
[	O
80	int
]	O
;	O
EUint32	long
n	long
;	O
if	O
(	O
pini	*
==	O
NULL	O
)	O
{	O
edma_printf_err	function
(	O
"%s"	*
,	O
"[edma_get_ini_string] Invalid file handler"	*
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
Section	*
==	O
NULL	O
)	O
{	O
edma_printf_err	function
(	O
"%s"	*
,	O
"[edma_get_ini_string] Invalid Section"	*
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
Val	*
==	O
NULL	O
)	O
{	O
edma_printf_err	function
(	O
"%s"	*
,	O
"[edma_get_ini_string] Invalid Field"	*
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
Buffer	*
==	O
NULL	O
)	O
{	O
edma_printf_err	function
(	O
"%s"	*
,	O
"[edma_get_ini_string] Invalid Target buffer"	*
)	O
;	O
return	O
-	O
1	int
;	O
}	O
memset	function
(	O
Buffer	*
,	O
0	int
,	O
size	int
)	O
;	O
snprintf	function
(	O
sec	*
,	O
80	int
,	O
"[%s]"	*
,	O
Section	*
)	O
;	O
pi	*
=	O
strstr	function
(	O
pini	*
->	O
p	*
,	O
sec	*
)	O
;	O
if	O
(	O
pi	*
==	O
NULL	O
)	O
{	O
return	O
0	int
;	O
}	O
pi	*
++	O
;	O
pe	*
=	O
strchr	function
(	O
pi	*
,	O
'['	O
)	O
;	O
if	O
(	O
pe	*
!=	O
NULL	O
)	O
*	O
pe	*
=	O
0	int
;	O
pi	*
=	O
strstr	function
(	O
pi	*
,	O
Val	*
)	O
;	O
if	O
(	O
(	O
pi	*
==	O
NULL	O
)	O
)	O
{	O
*	O
pe	*
=	O
'['	O
;	O
return	O
0	int
;	O
}	O
pi	*
=	O
strchr	function
(	O
pi	*
,	O
'='	O
)	O
;	O
pe1	*
=	O
strchr	function
(	O
pi	*
,	O
13	int
)	O
;	O
if	O
(	O
pe1	*
==	O
NULL	O
)	O
{	O
pe1	*
=	O
strchr	function
(	O
pi	*
,	O
10	int
)	O
;	O
if	O
(	O
pe1	*
==	O
NULL	O
)	O
{	O
printf	function
(	O
"%s"	*
,	O
"[edma_get_ini_string] Can't locate end of line"	*
)	O
;	O
return	O
0	int
;	O
}	O
}	O
n	int
=	O
pe1	*
-	O
pi	*
;	O
n	int
--	O
;	O
pi	*
++	O
;	O
strncpy	function
(	O
Buffer	*
,	O
pi	*
,	O
n	int
)	O
;	O
Buffer	*
[	O
n	int
]	O
=	O
0	int
;	O
*	O
pe	*
=	O
'['	O
;	O
n	int
=	O
strlen	function
(	O
Buffer	*
)	O
;	O
return	O
n	int
;	O
}	O
ESint32	int
EDMAPROC	O
edma_clean_ini_string	function
(	O
EPChar	*
Buffer	*
)	O
{	O
EUint32	long
i	long
;	O
if	O
(	O
Buffer	*
==	O
NULL	O
)	O
{	O
edma_printf_err	function
(	O
"%s"	*
,	O
"[edma_clean_ini_string] Invalid buffer"	*
)	O
;	O
return	O
-	O
1	int
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
strlen	function
(	O
Buffer	*
)	O
;	O
i	long
++	O
)	O
{	O
if	O
(	O
Buffer	*
[	O
i	long
]	O
==	O
'\\'	O
)	O
Buffer	*
[	O
i	long
]	O
=	O
'/'	O
;	O
}	O
return	O
0	int
;	O
}	O