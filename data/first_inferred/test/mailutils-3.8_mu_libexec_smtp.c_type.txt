char	O
smtp_docstring	array
[	O
]	O
=	O
N_	O
(	O
"run a SMTP session"	pointer
)	O
;	O
enum	O
smtp_session_status	enum
{	O
smtp_session_disconnected	int
,	O
smtp_session_connected	int
,	O
smtp_session_logged_in	int
}	O
;	O
static	O
enum	O
smtp_session_status	enum
smtp_session_status	enum
;	O
static	O
int	O
connect_argc	int
;	O
static	O
char	O
*	O
*	O
connect_argv	pointer
;	O
static	O
int	O
port	int
=	O
25	int
;	O
static	O
char	O
*	O
sender	pointer
;	O
static	O
mu_list_t	pointer
recipients	pointer
;	O
static	O
char	O
*	O
msgfile	pointer
;	O
static	O
int	O
temp_msgfile	int
;	O
static	O
mu_smtp_t	pointer
smtp	pointer
;	O
const	O
char	O
*	O
smtp_session_str	function
(	O
enum	O
smtp_session_status	enum
stat	pointer
)	O
{	O
switch	O
(	O
stat	pointer
)	O
{	O
case	O
smtp_session_disconnected	int
:	O
return	O
"disconnected"	pointer
;	O
case	O
smtp_session_connected	int
:	O
return	O
"connected"	pointer
;	O
case	O
smtp_session_logged_in	int
:	O
return	O
"logged in"	pointer
;	O
}	O
return	O
"unknown"	pointer
;	O
}	O
static	O
void	O
smtp_prompt_env	function
(	O
void	O
)	O
{	O
mu_assoc_t	pointer
assoc	pointer
=	O
mutool_shell_prompt_assoc	function
(	O
)	O
;	O
const	O
char	O
*	O
value	pointer
;	O
if	O
(	O
smtp_session_status	enum
==	O
smtp_session_logged_in	int
&&	O
mu_smtp_get_param	function
(	O
smtp	pointer
,	O
MU_SMTP_PARAM_USERNAME	int
,	O
&	O
value	pointer
)	O
==	O
0	int
)	O
mu_assoc_install	function
(	O
assoc	pointer
,	O
"user"	pointer
,	O
(	O
void	O
*	O
)	O
value	pointer
)	O
;	O
if	O
(	O
smtp_session_status	enum
!=	O
smtp_session_disconnected	int
)	O
mu_assoc_install	function
(	O
assoc	pointer
,	O
"host"	pointer
,	O
host	pointer
)	O
;	O
mu_assoc_install	function
(	O
assoc	pointer
,	O
"status"	pointer
,	O
(	O
void	O
*	O
)	O
smtp_session_str	function
(	O
smtp_session_status	enum
)	O
)	O
;	O
}	O
static	O
void	O
smtp_set_verbose	function
(	O
void	O
)	O
{	O
if	O
(	O
smtp	pointer
)	O
{	O
if	O
(	O
QRY_VERBOSE	O
(	O
)	O
)	O
mu_smtp_trace	function
(	O
smtp	pointer
,	O
MU_SMTP_TRACE_SET	int
)	O
;	O
else	O
mu_smtp_trace	function
(	O
smtp	pointer
,	O
MU_SMTP_TRACE_CLR	int
)	O
;	O
}	O
}	O
static	O
void	O
smtp_set_verbose_mask	function
(	O
void	O
)	O
{	O
if	O
(	O
smtp	pointer
)	O
{	O
mu_smtp_trace_mask	function
(	O
smtp	pointer
,	O
QRY_VERBOSE_MASK	O
(	O
MU_XSCRIPT_SECURE	int
)	O
?	O
MU_SMTP_TRACE_SET	int
:	O
MU_SMTP_TRACE_CLR	int
,	O
MU_XSCRIPT_SECURE	int
)	O
;	O
mu_smtp_trace_mask	function
(	O
smtp	pointer
,	O
QRY_VERBOSE_MASK	O
(	O
MU_XSCRIPT_PAYLOAD	int
)	O
?	O
MU_SMTP_TRACE_SET	int
:	O
MU_SMTP_TRACE_CLR	int
,	O
MU_XSCRIPT_PAYLOAD	int
)	O
;	O
}	O
}	O
static	O
int	O
com_verbose	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
return	O
shell_verbose	function
(	O
argc	long
,	O
argv	pointer
,	O
smtp_set_verbose	function
,	O
smtp_set_verbose_mask	function
)	O
;	O
}	O
static	O
int	O
smtp_error_handler	function
(	O
int	O
rc	int
)	O
{	O
if	O
(	O
rc	int
==	O
0	int
||	O
rc	int
==	O
MU_ERR_REPLY	O
)	O
{	O
char	O
code	int
[	O
4	int
]	O
;	O
const	O
char	O
*	O
repl	pointer
;	O
mu_smtp_replcode	function
(	O
smtp	pointer
,	O
code	int
)	O
;	O
mu_smtp_sget_reply	function
(	O
smtp	pointer
,	O
&	O
repl	pointer
)	O
;	O
mu_printf	function
(	O
"%s %s\n"	pointer
,	O
code	int
,	O
repl	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
com_disconnect	function
(	O
int	O
argc	long
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
argv	pointer
MU_ARG_UNUSED	O
)	O
{	O
if	O
(	O
smtp	pointer
)	O
{	O
mu_smtp_disconnect	function
(	O
smtp	pointer
)	O
;	O
mu_smtp_destroy	function
(	O
&	O
smtp	pointer
)	O
;	O
smtp	pointer
=	O
NULL	O
;	O
mu_argcv_free	function
(	O
connect_argc	int
,	O
connect_argv	pointer
)	O
;	O
connect_argc	int
=	O
0	int
;	O
connect_argv	pointer
=	O
NULL	O
;	O
smtp_session_status	enum
=	O
smtp_session_disconnected	int
;	O
smtp_prompt_env	function
(	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
com_connect	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
status	int
;	O
int	O
tls	int
=	O
0	int
;	O
int	O
i	long
=	O
1	int
;	O
int	O
n	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"-tls"	pointer
)	O
==	O
0	int
)	O
{	O
mu_error	function
(	O
"TLS not supported"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
else	O
break	O
;	O
}	O
argc	long
-=	O
i	long
;	O
argv	pointer
+=	O
i	long
;	O
if	O
(	O
smtp_session_status	enum
!=	O
smtp_session_disconnected	int
)	O
com_disconnect	function
(	O
0	int
,	O
NULL	O
)	O
;	O
status	int
=	O
mu_smtp_create	function
(	O
&	O
smtp	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
mu_stream_t	pointer
tcp	pointer
;	O
struct	O
mu_sockaddr	struct
*	O
sa	pointer
;	O
struct	O
mu_sockaddr_hints	struct
hints	pointer
;	O
if	O
(	O
QRY_VERBOSE	O
(	O
)	O
)	O
{	O
smtp_set_verbose	function
(	O
)	O
;	O
smtp_set_verbose_mask	function
(	O
)	O
;	O
}	O
memset	function
(	O
&	O
hints	pointer
,	O
0	int
,	O
sizeof	O
(	O
hints	pointer
)	O
)	O
;	O
hints	pointer
.	O
flags	int
=	O
MU_AH_DETECT_FAMILY	int
;	O
hints	pointer
.	O
port	int
=	O
tls	int
?	O
465	int
:	O
25	int
;	O
hints	pointer
.	O
protocol	int
=	O
IPPROTO_TCP	int
;	O
hints	pointer
.	O
socktype	int
=	O
SOCK_STREAM	int
;	O
status	int
=	O
mu_sockaddr_from_node	function
(	O
&	O
sa	pointer
,	O
argv	pointer
[	O
0	int
]	O
,	O
argv	pointer
[	O
1	int
]	O
,	O
&	O
hints	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
n	pointer
=	O
port_from_sa	function
(	O
sa	pointer
)	O
;	O
status	int
=	O
mu_tcp_stream_create_from_sa	function
(	O
&	O
tcp	pointer
,	O
sa	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
status	int
)	O
mu_sockaddr_free	function
(	O
sa	pointer
)	O
;	O
}	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
mu_smtp_set_carrier	function
(	O
smtp	pointer
,	O
tcp	pointer
)	O
;	O
status	int
=	O
smtp_error_handler	function
(	O
mu_smtp_open	function
(	O
smtp	pointer
)	O
)	O
;	O
}	O
else	O
{	O
mu_smtp_destroy	function
(	O
&	O
smtp	pointer
)	O
;	O
smtp	pointer
=	O
NULL	O
;	O
}	O
}	O
if	O
(	O
status	int
)	O
mu_error	function
(	O
"Failed to create smtp: %s"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
else	O
{	O
connect_argc	int
=	O
argc	long
;	O
connect_argv	pointer
=	O
mu_calloc	function
(	O
argc	long
+	O
1	int
,	O
sizeof	O
(	O
*	O
connect_argv	pointer
)	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
connect_argv	pointer
[	O
i	long
]	O
=	O
mu_strdup	function
(	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
connect_argv	pointer
[	O
i	long
]	O
=	O
NULL	O
;	O
port	int
=	O
n	pointer
;	O
smtp_session_status	enum
=	O
smtp_session_connected	int
;	O
smtp_prompt_env	function
(	O
)	O
;	O
}	O
mu_smtp_set_param	function
(	O
smtp	pointer
,	O
MU_SMTP_PARAM_URL	int
,	O
"smtp://"	pointer
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
com_capa	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
mu_iterator_t	pointer
iterator	pointer
=	O
NULL	O
;	O
int	O
status	int
=	O
0	int
;	O
int	O
i	long
=	O
1	int
;	O
if	O
(	O
i	long
<	O
argc	long
)	O
{	O
for	O
(	O
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
const	O
char	O
*	O
elt	pointer
;	O
int	O
rc	int
=	O
mu_smtp_capa_test	function
(	O
smtp	pointer
,	O
argv	pointer
[	O
i	long
]	O
,	O
&	O
elt	pointer
)	O
;	O
switch	O
(	O
rc	int
)	O
{	O
case	O
0	int
:	O
if	O
(	O
*	O
elt	pointer
)	O
mu_printf	function
(	O
"%s: %s\n"	pointer
,	O
argv	pointer
[	O
i	long
]	O
,	O
elt	pointer
)	O
;	O
else	O
mu_printf	function
(	O
"%s is set\n"	pointer
,	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
break	O
;	O
case	O
MU_ERR_NOENT	O
:	O
mu_printf	function
(	O
"%s is not set\n"	pointer
,	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
break	O
;	O
default	O
:	O
return	O
smtp_error_handler	function
(	O
rc	int
)	O
;	O
}	O
}	O
}	O
else	O
{	O
status	int
=	O
mu_smtp_capa_iterator	function
(	O
smtp	pointer
,	O
&	O
iterator	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
for	O
(	O
mu_iterator_first	function
(	O
iterator	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
iterator	pointer
)	O
;	O
mu_iterator_next	function
(	O
iterator	pointer
)	O
)	O
{	O
char	O
*	O
capa	pointer
=	O
NULL	O
;	O
mu_iterator_current	function
(	O
iterator	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
capa	pointer
)	O
;	O
mu_printf	function
(	O
"CAPA: %s\n"	pointer
,	O
mu_prstr	function
(	O
capa	pointer
)	O
)	O
;	O
}	O
mu_iterator_destroy	function
(	O
&	O
iterator	pointer
)	O
;	O
}	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
com_ehlo	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
if	O
(	O
argc	long
==	O
1	int
)	O
{	O
if	O
(	O
mu_smtp_test_param	function
(	O
smtp	pointer
,	O
MU_SMTP_PARAM_DOMAIN	int
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"no domain set"	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
}	O
else	O
mu_smtp_set_param	function
(	O
smtp	pointer
,	O
MU_SMTP_PARAM_DOMAIN	int
,	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
return	O
com_capa	function
(	O
1	int
,	O
argv	pointer
)	O
;	O
}	O
static	O
int	O
com_rset	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
return	O
smtp_error_handler	function
(	O
mu_smtp_rset	function
(	O
smtp	pointer
)	O
)	O
;	O
}	O
static	O
int	O
com_quit	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
smtp	pointer
)	O
{	O
if	O
(	O
smtp_error_handler	function
(	O
mu_smtp_quit	function
(	O
smtp	pointer
)	O
)	O
==	O
0	int
)	O
{	O
status	int
=	O
com_disconnect	function
(	O
0	int
,	O
NULL	O
)	O
;	O
}	O
else	O
{	O
mu_printf	function
(	O
"Try 'exit' to leave %s\n"	pointer
,	O
mu_program_name	pointer
)	O
;	O
}	O
}	O
else	O
mu_printf	function
(	O
"Try 'exit' to leave %s\n"	pointer
,	O
mu_program_name	pointer
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
com_from	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
if	O
(	O
argc	long
==	O
1	int
)	O
{	O
if	O
(	O
!	O
sender	pointer
)	O
{	O
mu_error	function
(	O
_	O
(	O
"no sender address"	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
}	O
else	O
{	O
free	function
(	O
sender	pointer
)	O
;	O
sender	pointer
=	O
mu_strdup	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
}	O
return	O
smtp_error_handler	function
(	O
mu_smtp_mail_basic	function
(	O
smtp	pointer
,	O
sender	pointer
,	O
NULL	O
)	O
)	O
;	O
}	O
static	O
int	O
send_rcpt_to	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
return	O
smtp_error_handler	function
(	O
mu_smtp_rcpt_basic	function
(	O
smtp	pointer
,	O
(	O
char	O
*	O
)	O
item	pointer
,	O
NULL	O
)	O
)	O
;	O
}	O
static	O
int	O
com_to	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
argc	long
==	O
1	int
)	O
{	O
if	O
(	O
mu_list_is_empty	function
(	O
recipients	pointer
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"no recipients"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
mu_list_foreach	function
(	O
recipients	pointer
,	O
send_rcpt_to	function
,	O
NULL	O
)	O
;	O
rc	int
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
!	O
recipients	pointer
)	O
mu_list_create	function
(	O
&	O
recipients	pointer
)	O
;	O
mu_list_set_destroy_item	function
(	O
recipients	pointer
,	O
mu_list_free_item	function
)	O
;	O
rc	int
=	O
smtp_error_handler	function
(	O
mu_smtp_rcpt_basic	function
(	O
smtp	pointer
,	O
argv	pointer
[	O
1	int
]	O
,	O
NULL	O
)	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
mu_list_append	function
(	O
recipients	pointer
,	O
mu_strdup	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
edit	function
(	O
const	O
char	O
*	O
file	pointer
)	O
{	O
char	O
*	O
ed	pointer
;	O
char	O
*	O
edv	array
[	O
3	int
]	O
;	O
int	O
rc	int
,	O
status	int
;	O
ed	pointer
=	O
getenv	function
(	O
"VISUAL"	pointer
)	O
;	O
if	O
(	O
!	O
ed	pointer
)	O
{	O
ed	pointer
=	O
getenv	function
(	O
"EDITOR"	pointer
)	O
;	O
if	O
(	O
!	O
ed	pointer
)	O
ed	pointer
=	O
"/bin/ed"	pointer
;	O
}	O
edv	array
[	O
0	int
]	O
=	O
ed	pointer
;	O
edv	array
[	O
1	int
]	O
=	O
(	O
char	O
*	O
)	O
file	pointer
;	O
edv	array
[	O
2	int
]	O
=	O
NULL	O
;	O
rc	int
=	O
mu_spawnvp	function
(	O
edv	array
[	O
0	int
]	O
,	O
edv	array
,	O
&	O
status	int
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_spawnvp"	pointer
,	O
edv	array
[	O
0	int
]	O
,	O
rc	int
)	O
;	O
return	O
rc	int
;	O
}	O
struct	O
rcptout	struct
{	O
mu_stream_t	pointer
str	pointer
;	O
int	O
n	pointer
;	O
}	O
;	O
static	O
int	O
print_rcpt	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
rcptout	struct
*	O
p	pointer
=	O
data	pointer
;	O
if	O
(	O
p	pointer
->	O
n	pointer
++	O
)	O
mu_stream_write	function
(	O
p	pointer
->	O
str	pointer
,	O
", "	pointer
,	O
2	int
,	O
NULL	O
)	O
;	O
mu_stream_printf	function
(	O
p	pointer
->	O
str	pointer
,	O
"%s"	pointer
,	O
(	O
char	O
*	O
)	O
item	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
edit_file	function
(	O
const	O
char	O
*	O
fname	pointer
,	O
int	O
inplace	int
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
fname	pointer
&&	O
!	O
inplace	int
)	O
{	O
mu_stream_t	pointer
istr	pointer
,	O
ostr	pointer
;	O
rc	int
=	O
mu_file_stream_create	function
(	O
&	O
istr	pointer
,	O
fname	pointer
,	O
MU_STREAM_READ	int
|	O
MU_STREAM_SEEK	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
char	O
*	O
tempfile	pointer
=	O
mu_tempname	function
(	O
NULL	O
)	O
;	O
rc	int
=	O
mu_file_stream_create	function
(	O
&	O
ostr	pointer
,	O
tempfile	pointer
,	O
MU_STREAM_CREAT	int
|	O
MU_STREAM_WRITE	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	function
(	O
tempfile	pointer
)	O
;	O
mu_error	function
(	O
_	O
(	O
"cannot create temporary file: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
rc	int
=	O
mu_stream_copy	function
(	O
ostr	pointer
,	O
istr	pointer
,	O
0	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
unlink	function
(	O
tempfile	pointer
)	O
;	O
free	function
(	O
tempfile	pointer
)	O
;	O
mu_error	function
(	O
_	O
(	O
"error copying to temporary file: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
mu_stream_unref	function
(	O
ostr	pointer
)	O
;	O
free	function
(	O
msgfile	pointer
)	O
;	O
msgfile	pointer
=	O
tempfile	pointer
;	O
temp_msgfile	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
rc	int
!=	O
ENOENT	int
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_file_stream_create"	pointer
,	O
fname	pointer
,	O
rc	int
)	O
;	O
return	O
1	int
;	O
}	O
mu_stream_unref	function
(	O
istr	pointer
)	O
;	O
}	O
else	O
if	O
(	O
!	O
fname	pointer
)	O
{	O
struct	O
rcptout	struct
rcptout	struct
;	O
if	O
(	O
temp_msgfile	int
)	O
unlink	function
(	O
msgfile	pointer
)	O
;	O
free	function
(	O
msgfile	pointer
)	O
;	O
msgfile	pointer
=	O
mu_tempname	function
(	O
NULL	O
)	O
;	O
temp_msgfile	int
=	O
1	int
;	O
rc	int
=	O
mu_file_stream_create	function
(	O
&	O
rcptout	struct
.	O
str	pointer
,	O
msgfile	pointer
,	O
MU_STREAM_CREAT	int
|	O
MU_STREAM_WRITE	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot open temporary file for writing: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
rcptout	struct
.	O
n	pointer
=	O
0	int
;	O
if	O
(	O
sender	pointer
)	O
mu_stream_printf	function
(	O
rcptout	struct
.	O
str	pointer
,	O
"From: %s\n"	pointer
,	O
sender	pointer
)	O
;	O
else	O
mu_stream_printf	function
(	O
rcptout	struct
.	O
str	pointer
,	O
"From: \n"	pointer
)	O
;	O
mu_stream_printf	function
(	O
rcptout	struct
.	O
str	pointer
,	O
"To: "	pointer
)	O
;	O
mu_list_foreach	function
(	O
recipients	pointer
,	O
print_rcpt	function
,	O
&	O
rcptout	struct
)	O
;	O
mu_stream_write	function
(	O
rcptout	struct
.	O
str	pointer
,	O
"\n"	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
mu_stream_printf	function
(	O
rcptout	struct
.	O
str	pointer
,	O
"Subject: \n\n"	pointer
)	O
;	O
mu_stream_unref	function
(	O
rcptout	struct
.	O
str	pointer
)	O
;	O
}	O
else	O
{	O
free	function
(	O
msgfile	pointer
)	O
;	O
msgfile	pointer
=	O
mu_strdup	function
(	O
fname	pointer
)	O
;	O
temp_msgfile	int
=	O
0	int
;	O
}	O
do	O
{	O
if	O
(	O
edit	function
(	O
msgfile	pointer
)	O
)	O
return	O
1	int
;	O
}	O
while	O
(	O
(	O
rc	int
=	O
mu_getans	function
(	O
"seqSEQ"	pointer
,	O
_	O
(	O
"What now: [s]end, [e]dit, [q]uit"	pointer
)	O
)	O
)	O
==	O
'e'	O
||	O
rc	int
==	O
'E'	O
)	O
;	O
return	O
rc	int
==	O
'q'	O
||	O
rc	int
==	O
'Q'	O
;	O
}	O
static	O
int	O
com_send	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
rc	int
;	O
mu_stream_t	pointer
instr	pointer
;	O
if	O
(	O
argc	long
==	O
1	int
)	O
{	O
if	O
(	O
msgfile	pointer
)	O
{	O
switch	O
(	O
mu_getans	function
(	O
"rReEdD"	pointer
,	O
_	O
(	O
"Previous message exists. "	pointer
"What now: [r]euse, [e]dit, "	pointer
"[u]se as a template or\n"	pointer
"[d]rop and start from scratch"	pointer
)	O
)	O
)	O
{	O
case	O
'r'	O
:	O
case	O
'R'	O
:	O
rc	int
=	O
0	int
;	O
break	O
;	O
case	O
'e'	O
:	O
case	O
'E'	O
:	O
rc	int
=	O
edit_file	function
(	O
msgfile	pointer
,	O
1	int
)	O
;	O
break	O
;	O
case	O
'd'	O
:	O
case	O
'D'	O
:	O
if	O
(	O
temp_msgfile	int
)	O
unlink	function
(	O
msgfile	pointer
)	O
;	O
free	function
(	O
msgfile	pointer
)	O
;	O
msgfile	pointer
=	O
NULL	O
;	O
temp_msgfile	int
=	O
0	int
;	O
rc	int
=	O
edit_file	function
(	O
NULL	O
,	O
0	int
)	O
;	O
break	O
;	O
case	O
'u'	O
:	O
case	O
'U'	O
:	O
rc	int
=	O
edit_file	function
(	O
msgfile	pointer
,	O
0	int
)	O
;	O
}	O
}	O
else	O
rc	int
=	O
edit_file	function
(	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
temp_msgfile	int
)	O
unlink	function
(	O
msgfile	pointer
)	O
;	O
free	function
(	O
msgfile	pointer
)	O
;	O
msgfile	pointer
=	O
NULL	O
;	O
temp_msgfile	int
=	O
0	int
;	O
msgfile	pointer
=	O
mu_strdup	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
}	O
rc	int
=	O
mu_file_stream_create	function
(	O
&	O
instr	pointer
,	O
msgfile	pointer
,	O
MU_STREAM_READ	int
|	O
MU_STREAM_SEEK	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_file_stream_create"	pointer
,	O
msgfile	pointer
,	O
rc	int
)	O
;	O
return	O
1	int
;	O
}	O
rc	int
=	O
mu_smtp_send_stream	function
(	O
smtp	pointer
,	O
instr	pointer
)	O
;	O
mu_stream_unref	function
(	O
instr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
smtp_error_handler	function
(	O
rc	int
)	O
;	O
else	O
rc	int
=	O
smtp_error_handler	function
(	O
mu_smtp_dot	function
(	O
smtp	pointer
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
com_starttls	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
if	O
(	O
mu_smtp_capa_test	function
(	O
smtp	pointer
,	O
"STARTTLS"	pointer
,	O
NULL	O
)	O
==	O
0	int
)	O
return	O
smtp_error_handler	function
(	O
mu_smtp_starttls	function
(	O
smtp	pointer
)	O
)	O
;	O
else	O
mu_error	function
(	O
_	O
(	O
"remote party does not offer STARTTLS"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
static	O
int	O
com_auth	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
rc	int
,	O
i	long
;	O
rc	int
=	O
mu_smtp_clear_auth_mech	function
(	O
smtp	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_smtp_clear_auth_mech"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
return	O
MU_ERR_FAILURE	O
;	O
}	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
if	O
(	O
(	O
rc	int
=	O
mu_smtp_add_auth_mech	function
(	O
smtp	pointer
,	O
argv	pointer
[	O
1	int
]	O
)	O
)	O
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_smtp_add_auth_mech"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
return	O
MU_ERR_FAILURE	O
;	O
}	O
rc	int
=	O
mu_smtp_auth	function
(	O
smtp	pointer
)	O
;	O
switch	O
(	O
rc	int
)	O
{	O
case	O
0	int
:	O
smtp_session_status	enum
=	O
smtp_session_logged_in	int
;	O
break	O
;	O
case	O
ENOSYS	int
:	O
mu_error	function
(	O
_	O
(	O
"authentication not implemented"	pointer
)	O
)	O
;	O
break	O
;	O
case	O
MU_ERR_NOENT	O
:	O
mu_error	function
(	O
_	O
(	O
"no suitable authentication mechanism found"	pointer
)	O
)	O
;	O
break	O
;	O
default	O
:	O
smtp_error_handler	function
(	O
rc	int
)	O
;	O
return	O
rc	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
mu_kwd	struct
paramtab	pointer
[	O
]	O
=	O
{	O
{	O
"domain"	pointer
,	O
MU_SMTP_PARAM_DOMAIN	int
}	O
,	O
{	O
"username"	pointer
,	O
MU_SMTP_PARAM_USERNAME	int
}	O
,	O
{	O
"password"	pointer
,	O
MU_SMTP_PARAM_PASSWORD	int
}	O
,	O
{	O
"service"	pointer
,	O
MU_SMTP_PARAM_SERVICE	int
}	O
,	O
{	O
"realm"	pointer
,	O
MU_SMTP_PARAM_REALM	int
}	O
,	O
{	O
"host"	pointer
,	O
MU_SMTP_PARAM_HOST	int
}	O
,	O
{	O
"url"	pointer
,	O
MU_SMTP_PARAM_URL	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
int	O
get_param	function
(	O
int	O
param	pointer
,	O
char	O
*	O
prompt	pointer
,	O
char	O
*	O
*	O
retval	pointer
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
param	pointer
==	O
MU_SMTP_PARAM_PASSWORD	int
)	O
{	O
rc	int
=	O
mu_getpass	function
(	O
mu_strin	pointer
,	O
mu_strout	pointer
,	O
prompt	pointer
,	O
retval	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_getpass"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
}	O
else	O
{	O
char	O
*	O
buf	pointer
=	O
NULL	O
;	O
size_t	long
size	long
=	O
0	int
;	O
rc	int
=	O
mu_stream_write	function
(	O
mu_strout	pointer
,	O
prompt	pointer
,	O
strlen	function
(	O
prompt	pointer
)	O
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_stream_flush	function
(	O
mu_strout	pointer
)	O
;	O
rc	int
=	O
mu_stream_getline	function
(	O
mu_strin	pointer
,	O
&	O
buf	pointer
,	O
&	O
size	long
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_rtrim_cset	function
(	O
buf	pointer
,	O
"\n"	pointer
)	O
;	O
*	O
retval	pointer
=	O
buf	pointer
;	O
}	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
com_set	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
param	pointer
,	O
i	long
,	O
rc	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	long
;	O
i	long
+=	O
2	int
)	O
{	O
if	O
(	O
mu_kwd_xlat_name	function
(	O
paramtab	pointer
,	O
argv	pointer
[	O
i	long
]	O
,	O
&	O
param	pointer
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"unrecognized parameter: %s"	pointer
)	O
,	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
i	long
+	O
1	int
<	O
argc	long
)	O
{	O
rc	int
=	O
mu_smtp_set_param	function
(	O
smtp	pointer
,	O
param	pointer
,	O
argv	pointer
[	O
i	long
+	O
1	int
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_smtp_set_param"	pointer
,	O
argv	pointer
[	O
i	long
]	O
,	O
rc	int
)	O
;	O
}	O
else	O
{	O
char	O
*	O
prompt	pointer
,	O
*	O
value	pointer
;	O
mu_asprintf	function
(	O
&	O
prompt	pointer
,	O
"%s: "	pointer
,	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
rc	int
=	O
get_param	function
(	O
param	pointer
,	O
prompt	pointer
,	O
&	O
value	pointer
)	O
;	O
free	function
(	O
prompt	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	function
(	O
_	O
(	O
"error reading value: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
else	O
{	O
rc	int
=	O
mu_smtp_set_param	function
(	O
smtp	pointer
,	O
param	pointer
,	O
value	pointer
)	O
;	O
if	O
(	O
param	pointer
==	O
MU_SMTP_PARAM_PASSWORD	int
)	O
memset	function
(	O
value	pointer
,	O
0	int
,	O
strlen	function
(	O
value	pointer
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_smtp_set_param"	pointer
,	O
argv	pointer
[	O
i	long
]	O
,	O
rc	int
)	O
;	O
free	function
(	O
value	pointer
)	O
;	O
}	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
com_clear	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
param	pointer
,	O
i	long
,	O
rc	int
;	O
if	O
(	O
argc	long
>	O
1	int
)	O
{	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
mu_kwd_xlat_name	function
(	O
paramtab	pointer
,	O
argv	pointer
[	O
i	long
]	O
,	O
&	O
param	pointer
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"unrecognized parameter: %s"	pointer
)	O
,	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
continue	O
;	O
}	O
rc	int
=	O
mu_smtp_set_param	function
(	O
smtp	pointer
,	O
param	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_smtp_set_param"	pointer
,	O
argv	pointer
[	O
i	long
]	O
,	O
rc	int
)	O
;	O
}	O
}	O
else	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
paramtab	pointer
[	O
i	long
]	O
.	O
name	pointer
;	O
i	long
++	O
)	O
{	O
rc	int
=	O
mu_smtp_set_param	function
(	O
smtp	pointer
,	O
paramtab	pointer
[	O
i	long
]	O
.	O
tok	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_smtp_set_param"	pointer
,	O
paramtab	pointer
[	O
i	long
]	O
.	O
name	pointer
,	O
rc	int
)	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
com_list_param	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
param	pointer
,	O
i	long
,	O
rc	int
;	O
const	O
char	O
*	O
value	pointer
;	O
if	O
(	O
!	O
smtp	pointer
)	O
{	O
mu_printf	function
(	O
"%s\n"	pointer
,	O
_	O
(	O
"no connection yet"	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
argc	long
>	O
1	int
)	O
{	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
mu_kwd_xlat_name	function
(	O
paramtab	pointer
,	O
argv	pointer
[	O
i	long
]	O
,	O
&	O
param	pointer
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"unrecognized parameter: %s"	pointer
)	O
,	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
continue	O
;	O
}	O
rc	int
=	O
mu_smtp_get_param	function
(	O
smtp	pointer
,	O
param	pointer
,	O
&	O
value	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_smtp_get_param"	pointer
,	O
argv	pointer
[	O
i	long
]	O
,	O
rc	int
)	O
;	O
else	O
if	O
(	O
value	pointer
)	O
mu_printf	function
(	O
"%s = %s\n"	pointer
,	O
argv	pointer
[	O
i	long
]	O
,	O
value	pointer
)	O
;	O
else	O
mu_printf	function
(	O
_	O
(	O
"%s not set\n"	pointer
)	O
,	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
}	O
}	O
else	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
paramtab	pointer
[	O
i	long
]	O
.	O
name	pointer
;	O
i	long
++	O
)	O
{	O
rc	int
=	O
mu_smtp_get_param	function
(	O
smtp	pointer
,	O
paramtab	pointer
[	O
i	long
]	O
.	O
tok	int
,	O
&	O
value	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_smtp_get_param"	pointer
,	O
paramtab	pointer
[	O
i	long
]	O
.	O
name	pointer
,	O
rc	int
)	O
;	O
else	O
if	O
(	O
value	pointer
)	O
mu_printf	function
(	O
"%s = %s\n"	pointer
,	O
paramtab	pointer
[	O
i	long
]	O
.	O
name	pointer
,	O
value	pointer
)	O
;	O
else	O
mu_printf	function
(	O
_	O
(	O
"%s not set\n"	pointer
)	O
,	O
paramtab	pointer
[	O
i	long
]	O
.	O
name	pointer
)	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
com_smtp_command	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
rc	int
;	O
mu_iterator_t	pointer
itr	pointer
;	O
rc	int
=	O
mu_smtp_cmd	function
(	O
smtp	pointer
,	O
argc	long
-	O
1	int
,	O
argv	pointer
+	O
1	int
)	O
;	O
smtp_error_handler	function
(	O
rc	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_smtp_get_reply_iterator	function
(	O
smtp	pointer
,	O
&	O
itr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_smtp_get_reply_iterator"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
return	O
1	int
;	O
}	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
char	O
*	O
str	pointer
=	O
NULL	O
;	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
str	pointer
)	O
;	O
mu_printf	function
(	O
"%s\n"	pointer
,	O
str	pointer
)	O
;	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
return	O
0	int
;	O
}	O
struct	O
mutool_command	struct
smtp_comtab	array
[	O
]	O
=	O
{	O
{	O
"connect"	pointer
,	O
1	int
,	O
4	int
,	O
0	int
,	O
com_connect	function
,	O
N_	O
(	O
"[-tls] HOSTNAME [PORT]"	pointer
)	O
,	O
N_	O
(	O
"open connection"	pointer
)	O
}	O
,	O
{	O
"set"	pointer
,	O
2	int
,	O
-	O
1	int
,	O
0	int
,	O
com_set	function
,	O
N_	O
(	O
"PARAM [ARG...]"	pointer
)	O
,	O
N_	O
(	O
"Set connection parameter"	pointer
)	O
}	O
,	O
{	O
"clear"	pointer
,	O
1	int
,	O
-	O
1	int
,	O
0	int
,	O
com_clear	function
,	O
N_	O
(	O
"[PARAM...]"	pointer
)	O
,	O
N_	O
(	O
"Clear connection parameters"	pointer
)	O
}	O
,	O
{	O
"list"	pointer
,	O
1	int
,	O
-	O
1	int
,	O
0	int
,	O
com_list_param	function
,	O
N_	O
(	O
"[PARAM...]"	pointer
)	O
,	O
N_	O
(	O
"List connection parameters"	pointer
)	O
}	O
,	O
{	O
"auth"	pointer
,	O
2	int
,	O
-	O
1	int
,	O
0	int
,	O
com_auth	function
,	O
N_	O
(	O
"MECH [MECH...]"	pointer
)	O
,	O
N_	O
(	O
"Authenticate"	pointer
)	O
}	O
,	O
{	O
"ehlo"	pointer
,	O
1	int
,	O
2	int
,	O
0	int
,	O
com_ehlo	function
,	O
N_	O
(	O
"[DOMAIN]"	pointer
)	O
,	O
N_	O
(	O
"Greet the server"	pointer
)	O
}	O
,	O
{	O
"capa"	pointer
,	O
1	int
,	O
-	O
1	int
,	O
0	int
,	O
com_capa	function
,	O
N_	O
(	O
"[NAME...]"	pointer
)	O
,	O
N_	O
(	O
"list server capabilities"	pointer
)	O
}	O
,	O
{	O
"starttls"	pointer
,	O
1	int
,	O
1	int
,	O
0	int
,	O
com_starttls	function
,	O
NULL	O
,	O
N_	O
(	O
"initiate encrypted connection"	pointer
)	O
}	O
,	O
{	O
"rset"	pointer
,	O
1	int
,	O
1	int
,	O
0	int
,	O
com_rset	function
,	O
NULL	O
,	O
N_	O
(	O
"reset the session state"	pointer
)	O
}	O
,	O
{	O
"from"	pointer
,	O
1	int
,	O
2	int
,	O
0	int
,	O
com_from	function
,	O
N_	O
(	O
"[EMAIL]"	pointer
)	O
,	O
N_	O
(	O
"set sender email"	pointer
)	O
}	O
,	O
{	O
"to"	pointer
,	O
1	int
,	O
2	int
,	O
0	int
,	O
com_to	function
,	O
N_	O
(	O
"[EMAIL]"	pointer
)	O
,	O
N_	O
(	O
"set recipient email"	pointer
)	O
}	O
,	O
{	O
"send"	pointer
,	O
1	int
,	O
2	int
,	O
0	int
,	O
com_send	function
,	O
N_	O
(	O
"[FILE]"	pointer
)	O
,	O
N_	O
(	O
"send message"	pointer
)	O
}	O
,	O
{	O
"smtp"	pointer
,	O
2	int
,	O
-	O
1	int
,	O
0	int
,	O
com_smtp_command	function
,	O
N_	O
(	O
"COMMAND [ARGS...]"	pointer
)	O
,	O
N_	O
(	O
"send an arbitrary COMMAND"	pointer
)	O
}	O
,	O
{	O
"quit"	pointer
,	O
1	int
,	O
1	int
,	O
0	int
,	O
com_quit	function
,	O
NULL	O
,	O
N_	O
(	O
"quit the session"	pointer
)	O
}	O
,	O
{	O
"verbose"	pointer
,	O
1	int
,	O
4	int
,	O
0	int
,	O
com_verbose	function
,	O
"[on|off|mask|unmask] [secure [payload]]"	pointer
,	O
N_	O
(	O
"control the protocol tracing"	pointer
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
int	O
main	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
mu_registrar_record	function
(	O
mu_smtp_record	pointer
)	O
;	O
mu_registrar_record	function
(	O
mu_smtps_record	pointer
)	O
;	O
mu_action_getopt	function
(	O
&	O
argc	long
,	O
&	O
argv	pointer
,	O
NULL	O
,	O
smtp_docstring	array
,	O
NULL	O
)	O
;	O
if	O
(	O
argc	long
)	O
{	O
mu_error	function
(	O
_	O
(	O
"bad arguments"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
mutool_shell_prompt	pointer
=	O
mu_strdup	function
(	O
"smtp> "	pointer
)	O
;	O
smtp_prompt_env	function
(	O
)	O
;	O
mutool_shell	function
(	O
"smtp"	pointer
,	O
smtp_comtab	array
)	O
;	O
if	O
(	O
temp_msgfile	int
)	O
unlink	function
(	O
msgfile	pointer
)	O
;	O
return	O
0	int
;	O
}	O
