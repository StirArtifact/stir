RCSTAG_CC	O
(	O
"$Id$"	pointer
)	O
;	O
char	O
*	O
token	pointer
;	O
char	O
*	O
token_end	pointer
;	O
typedef	O
struct	O
{	O
char	O
*	O
rwd	pointer
;	O
rwcodes_ty	enum
rwcode	enum
;	O
}	O
templ_ty	struct
;	O
static	O
templ_ty	struct
*	O
user_specials	pointer
=	O
0	int
;	O
static	O
unsigned	O
int	O
user_specials_max	int
=	O
0	int
;	O
static	O
unsigned	O
int	O
user_specials_idx	int
=	O
0	int
;	O
char	O
chartype	array
[	O
]	O
=	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
3	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
3	int
,	O
3	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
3	int
,	O
3	int
,	O
0	int
,	O
3	int
,	O
0	int
,	O
3	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
3	int
,	O
1	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
3	int
,	O
0	int
,	O
3	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
}	O
;	O
templ_ty	struct
*	O
is_reserved	function
(	O
register	O
const	O
char	O
*	O
str	pointer
,	O
register	O
size_t	long
len	int
)	O
;	O
templ_ty	struct
*	O
is_reserved_cc	function
(	O
register	O
const	O
char	O
*	O
str	pointer
,	O
register	O
size_t	long
len	int
)	O
;	O
extern	O
codes_ty	enum
lexi	function
(	O
void	O
)	O
{	O
int	O
unary_delim	int
=	O
false	int
;	O
static	O
codes_ty	enum
last_code	enum
=	O
code_eof	int
;	O
static	O
int	O
l_struct	int
=	O
0	int
;	O
static	O
int	O
l_enum	int
=	O
0	int
;	O
codes_ty	enum
code	int
;	O
char	O
qchar	char
;	O
char	O
tmpchar	array
[	O
2	int
]	O
;	O
parser_state_tos	pointer
->	O
col_1	int
=	O
parser_state_tos	pointer
->	O
last_nl	int
;	O
parser_state_tos	pointer
->	O
last_saw_nl	int
=	O
parser_state_tos	pointer
->	O
last_nl	int
;	O
parser_state_tos	pointer
->	O
last_nl	int
=	O
false	int
;	O
if	O
(	O
buf_ptr	pointer
>=	O
buf_end	pointer
)	O
{	O
fill_buffer	function
(	O
)	O
;	O
}	O
if	O
(	O
*	O
buf_ptr	pointer
==	O
' '	O
||	O
*	O
buf_ptr	pointer
==	O
TAB	char
)	O
{	O
parser_state_tos	pointer
->	O
col_1	int
=	O
false	int
;	O
skip_buffered_space	function
(	O
)	O
;	O
}	O
token	pointer
=	O
buf_ptr	pointer
;	O
if	O
(	O
(	O
!	O
(	O
(	O
buf_ptr	pointer
[	O
0	int
]	O
==	O
'L'	O
)	O
&&	O
(	O
(	O
buf_ptr	pointer
[	O
1	int
]	O
==	O
'"'	O
)	O
||	O
(	O
buf_ptr	pointer
[	O
1	int
]	O
==	O
'\''	O
)	O
)	O
)	O
&&	O
!	O
(	O
settings	struct
.	O
gettext_strings	int
&&	O
(	O
buf_ptr	pointer
[	O
0	int
]	O
==	O
'_'	O
)	O
&&	O
(	O
buf_ptr	pointer
[	O
1	int
]	O
==	O
'('	O
)	O
&&	O
(	O
buf_ptr	pointer
[	O
2	int
]	O
==	O
'"'	O
)	O
)	O
&&	O
!	O
(	O
settings	struct
.	O
gettext_strings	int
&&	O
(	O
buf_ptr	pointer
[	O
0	int
]	O
==	O
'N'	O
)	O
&&	O
(	O
buf_ptr	pointer
[	O
1	int
]	O
==	O
'_'	O
)	O
&&	O
(	O
buf_ptr	pointer
[	O
2	int
]	O
==	O
'('	O
)	O
&&	O
(	O
buf_ptr	pointer
[	O
3	int
]	O
==	O
'"'	O
)	O
)	O
&&	O
(	O
chartype	array
[	O
0xff	int
&	O
(	O
int	O
)	O
*	O
buf_ptr	pointer
]	O
==	O
alphanum	int
)	O
)	O
||	O
(	O
(	O
buf_ptr	pointer
[	O
0	int
]	O
==	O
'.'	O
)	O
&&	O
isdigit	function
(	O
buf_ptr	pointer
[	O
1	int
]	O
)	O
)	O
)	O
{	O
templ_ty	struct
*	O
p	pointer
;	O
if	O
(	O
parser_state_tos	pointer
->	O
last_rw	enum
==	O
rw_return	int
)	O
parser_state_tos	pointer
->	O
last_rw	enum
=	O
rw_none	int
;	O
if	O
(	O
isdigit	function
(	O
*	O
buf_ptr	pointer
)	O
||	O
(	O
(	O
buf_ptr	pointer
[	O
0	int
]	O
==	O
'.'	O
)	O
&&	O
isdigit	function
(	O
buf_ptr	pointer
[	O
1	int
]	O
)	O
)	O
)	O
{	O
int	O
seendot	int
=	O
0	int
,	O
seenexp	int
=	O
0	int
,	O
ishexa	int
=	O
0	int
;	O
if	O
(	O
(	O
*	O
buf_ptr	pointer
==	O
'0'	O
)	O
&&	O
(	O
(	O
buf_ptr	pointer
[	O
1	int
]	O
==	O
'x'	O
)	O
||	O
(	O
buf_ptr	pointer
[	O
1	int
]	O
==	O
'X'	O
)	O
)	O
)	O
{	O
ishexa	int
=	O
1	int
;	O
buf_ptr	pointer
+=	O
1	int
;	O
}	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
*	O
buf_ptr	pointer
==	O
'.'	O
)	O
{	O
if	O
(	O
seendot	int
)	O
{	O
break	O
;	O
}	O
else	O
{	O
seendot	int
++	O
;	O
}	O
}	O
buf_ptr	pointer
++	O
;	O
if	O
(	O
!	O
(	O
ishexa	int
&&	O
!	O
seenexp	int
?	O
isxdigit	function
(	O
*	O
buf_ptr	pointer
)	O
:	O
isdigit	function
(	O
*	O
buf_ptr	pointer
)	O
)	O
&&	O
*	O
buf_ptr	pointer
!=	O
'.'	O
)	O
{	O
if	O
(	O
(	O
ishexa	int
?	O
(	O
*	O
buf_ptr	pointer
!=	O
'P'	O
&&	O
*	O
buf_ptr	pointer
!=	O
'p'	O
)	O
:	O
(	O
*	O
buf_ptr	pointer
!=	O
'E'	O
&&	O
*	O
buf_ptr	pointer
!=	O
'e'	O
)	O
)	O
||	O
seenexp	int
)	O
{	O
break	O
;	O
}	O
else	O
{	O
seenexp	int
++	O
;	O
seendot	int
++	O
;	O
buf_ptr	pointer
++	O
;	O
if	O
(	O
*	O
buf_ptr	pointer
==	O
'+'	O
||	O
*	O
buf_ptr	pointer
==	O
'-'	O
)	O
{	O
buf_ptr	pointer
++	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
*	O
buf_ptr	pointer
==	O
'F'	O
||	O
*	O
buf_ptr	pointer
==	O
'f'	O
||	O
*	O
buf_ptr	pointer
==	O
'i'	O
||	O
*	O
buf_ptr	pointer
==	O
'j'	O
)	O
{	O
buf_ptr	pointer
++	O
;	O
}	O
else	O
if	O
(	O
*	O
buf_ptr	pointer
==	O
'D'	O
||	O
*	O
buf_ptr	pointer
==	O
'd'	O
)	O
{	O
if	O
(	O
buf_ptr	pointer
[	O
1	int
]	O
==	O
'F'	O
||	O
buf_ptr	pointer
[	O
1	int
]	O
==	O
'f'	O
||	O
buf_ptr	pointer
[	O
1	int
]	O
==	O
'D'	O
||	O
buf_ptr	pointer
[	O
1	int
]	O
==	O
'd'	O
||	O
buf_ptr	pointer
[	O
1	int
]	O
==	O
'L'	O
||	O
buf_ptr	pointer
[	O
1	int
]	O
==	O
'l'	O
)	O
{	O
buf_ptr	pointer
+=	O
2	int
;	O
}	O
}	O
else	O
{	O
while	O
(	O
*	O
buf_ptr	pointer
==	O
'U'	O
||	O
*	O
buf_ptr	pointer
==	O
'u'	O
||	O
*	O
buf_ptr	pointer
==	O
'L'	O
||	O
*	O
buf_ptr	pointer
==	O
'l'	O
)	O
{	O
buf_ptr	pointer
++	O
;	O
}	O
}	O
}	O
else	O
while	O
(	O
chartype	array
[	O
0xff	int
&	O
(	O
int	O
)	O
*	O
buf_ptr	pointer
]	O
==	O
alphanum	int
)	O
{	O
buf_ptr	pointer
++	O
;	O
if	O
(	O
buf_ptr	pointer
>=	O
buf_end	pointer
)	O
{	O
fill_buffer	function
(	O
)	O
;	O
}	O
}	O
token_end	pointer
=	O
buf_ptr	pointer
;	O
if	O
(	O
token_end	pointer
-	O
token	pointer
==	O
13	int
&&	O
!	O
strncmp	function
(	O
token	pointer
,	O
"__attribute__"	pointer
,	O
13	int
)	O
)	O
{	O
last_code	enum
=	O
decl	int
;	O
parser_state_tos	pointer
->	O
last_u_d	int
=	O
true	int
;	O
return	O
(	O
attribute	int
)	O
;	O
}	O
skip_buffered_space	function
(	O
)	O
;	O
if	O
(	O
token_end	pointer
-	O
token	pointer
==	O
8	int
&&	O
!	O
strncmp	function
(	O
token	pointer
,	O
"operator"	pointer
,	O
8	int
)	O
)	O
{	O
while	O
(	O
chartype	array
[	O
0xff	int
&	O
(	O
int	O
)	O
*	O
buf_ptr	pointer
]	O
==	O
opchar	int
)	O
{	O
buf_ptr	pointer
++	O
;	O
if	O
(	O
buf_ptr	pointer
>=	O
buf_end	pointer
)	O
{	O
fill_buffer	function
(	O
)	O
;	O
}	O
}	O
token_end	pointer
=	O
buf_ptr	pointer
;	O
skip_buffered_space	function
(	O
)	O
;	O
}	O
parser_state_tos	pointer
->	O
its_a_keyword	int
=	O
false	int
;	O
parser_state_tos	pointer
->	O
sizeof_keyword	int
=	O
false	int
;	O
if	O
(	O
l_struct	int
)	O
{	O
l_struct	int
=	O
false	int
;	O
last_code	enum
=	O
ident	int
;	O
parser_state_tos	pointer
->	O
last_u_d	int
=	O
true	int
;	O
if	O
(	O
parser_state_tos	pointer
->	O
last_token	enum
==	O
cpp_operator	int
)	O
{	O
return	O
overloaded	int
;	O
}	O
return	O
(	O
decl	int
)	O
;	O
}	O
parser_state_tos	pointer
->	O
last_u_d	int
=	O
false	int
;	O
last_code	enum
=	O
ident	int
;	O
if	O
(	O
settings	struct
.	O
c_plus_plus	int
)	O
{	O
p	pointer
=	O
is_reserved_cc	function
(	O
token	pointer
,	O
token_end	pointer
-	O
token	pointer
)	O
;	O
}	O
else	O
{	O
p	pointer
=	O
is_reserved	function
(	O
token	pointer
,	O
token_end	pointer
-	O
token	pointer
)	O
;	O
}	O
if	O
(	O
(	O
p	pointer
==	O
NULL	O
)	O
&&	O
(	O
user_specials	pointer
!=	O
0	int
)	O
)	O
{	O
for	O
(	O
p	pointer
=	O
&	O
user_specials	pointer
[	O
0	int
]	O
;	O
p	pointer
<	O
&	O
user_specials	pointer
[	O
0	int
]	O
+	O
user_specials_idx	int
;	O
p	pointer
++	O
)	O
{	O
char	O
*	O
q	pointer
=	O
token	pointer
;	O
char	O
*	O
r	pointer
=	O
p	pointer
->	O
rwd	pointer
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
q	pointer
>=	O
token_end	pointer
&&	O
!	O
*	O
r	pointer
)	O
{	O
goto	O
found_keyword	O
;	O
}	O
if	O
(	O
q	pointer
>=	O
token_end	pointer
||	O
!	O
*	O
r	pointer
)	O
{	O
break	O
;	O
}	O
if	O
(	O
*	O
q	pointer
++	O
!=	O
*	O
r	pointer
++	O
)	O
{	O
break	O
;	O
}	O
}	O
}	O
p	pointer
=	O
NULL	O
;	O
}	O
found_keyword	O
:	O
if	O
(	O
p	pointer
)	O
{	O
codes_ty	enum
value	enum
;	O
value	enum
=	O
ident	int
;	O
parser_state_tos	pointer
->	O
its_a_keyword	int
=	O
true	int
;	O
parser_state_tos	pointer
->	O
last_u_d	int
=	O
true	int
;	O
parser_state_tos	pointer
->	O
last_rw	enum
=	O
p	pointer
->	O
rwcode	enum
;	O
parser_state_tos	pointer
->	O
last_rw_depth	int
=	O
parser_state_tos	pointer
->	O
paren_depth	int
;	O
switch	O
(	O
p	pointer
->	O
rwcode	enum
)	O
{	O
case	O
rw_operator	int
:	O
value	enum
=	O
cpp_operator	int
;	O
parser_state_tos	pointer
->	O
in_parameter_declaration	int
=	O
1	int
;	O
break	O
;	O
case	O
rw_switch	int
:	O
value	enum
=	O
(	O
swstmt	int
)	O
;	O
break	O
;	O
case	O
rw_case	int
:	O
value	enum
=	O
(	O
casestmt	int
)	O
;	O
break	O
;	O
case	O
rw_enum	int
:	O
l_enum	int
=	O
true	int
;	O
case	O
rw_struct_like	int
:	O
if	O
(	O
parser_state_tos	pointer
->	O
p_l_follow	int
&&	O
!	O
(	O
parser_state_tos	pointer
->	O
noncast_mask	int
&	O
1	int
<<	O
parser_state_tos	pointer
->	O
p_l_follow	int
)	O
)	O
{	O
parser_state_tos	pointer
->	O
cast_mask	int
|=	O
1	int
<<	O
parser_state_tos	pointer
->	O
p_l_follow	int
;	O
break	O
;	O
}	O
l_struct	int
=	O
true	int
;	O
case	O
rw_decl	int
:	O
if	O
(	O
parser_state_tos	pointer
->	O
p_l_follow	int
&&	O
!	O
(	O
parser_state_tos	pointer
->	O
noncast_mask	int
&	O
1	int
<<	O
parser_state_tos	pointer
->	O
p_l_follow	int
)	O
)	O
{	O
parser_state_tos	pointer
->	O
cast_mask	int
|=	O
1	int
<<	O
parser_state_tos	pointer
->	O
p_l_follow	int
;	O
break	O
;	O
}	O
last_code	enum
=	O
decl	int
;	O
value	enum
=	O
(	O
decl	int
)	O
;	O
break	O
;	O
case	O
rw_sp_paren	int
:	O
value	enum
=	O
(	O
sp_paren	int
)	O
;	O
if	O
(	O
*	O
token	pointer
==	O
'i'	O
&&	O
parser_state_tos	pointer
->	O
last_token	enum
==	O
sp_else	int
)	O
{	O
parser_state_tos	pointer
->	O
i_l_follow	int
-=	O
settings	struct
.	O
ind_size	int
;	O
}	O
break	O
;	O
case	O
rw_sp_nparen	int
:	O
value	enum
=	O
(	O
sp_nparen	int
)	O
;	O
break	O
;	O
case	O
rw_sp_else	int
:	O
value	enum
=	O
(	O
sp_else	int
)	O
;	O
break	O
;	O
case	O
rw_sizeof	int
:	O
parser_state_tos	pointer
->	O
sizeof_keyword	int
=	O
true	int
;	O
value	enum
=	O
(	O
ident	int
)	O
;	O
break	O
;	O
case	O
rw_return	int
:	O
case	O
rw_break	int
:	O
default	O
:	O
value	enum
=	O
(	O
ident	int
)	O
;	O
}	O
if	O
(	O
parser_state_tos	pointer
->	O
last_token	enum
==	O
cpp_operator	int
)	O
{	O
return	O
overloaded	int
;	O
}	O
return	O
value	enum
;	O
}	O
else	O
if	O
(	O
(	O
*	O
buf_ptr	pointer
==	O
'('	O
)	O
&&	O
(	O
parser_state_tos	pointer
->	O
tos	int
<=	O
1	int
)	O
&&	O
(	O
parser_state_tos	pointer
->	O
ind_level	int
==	O
0	int
)	O
&&	O
(	O
parser_state_tos	pointer
->	O
paren_depth	int
==	O
0	int
)	O
)	O
{	O
char	O
*	O
tp	pointer
;	O
int	O
paren_count	int
=	O
1	int
;	O
if	O
(	O
parser_state_tos	pointer
->	O
last_token	enum
==	O
ident	int
&&	O
parser_state_tos	pointer
->	O
last_saw_nl	int
)	O
{	O
parser_state_tos	pointer
->	O
in_decl	char
=	O
true	int
;	O
}	O
for	O
(	O
tp	pointer
=	O
buf_ptr	pointer
+	O
1	int
;	O
(	O
paren_count	int
>	O
0	int
)	O
&&	O
(	O
tp	pointer
<	O
in_prog	pointer
+	O
in_prog_size	long
)	O
;	O
tp	pointer
++	O
)	O
{	O
if	O
(	O
*	O
tp	pointer
==	O
'('	O
)	O
{	O
paren_count	int
++	O
;	O
}	O
if	O
(	O
*	O
tp	pointer
==	O
')'	O
)	O
{	O
paren_count	int
--	O
;	O
}	O
if	O
(	O
*	O
tp	pointer
==	O
';'	O
)	O
{	O
goto	O
not_proc	O
;	O
}	O
}	O
if	O
(	O
paren_count	int
==	O
0	int
)	O
{	O
parser_state_tos	pointer
->	O
procname	pointer
=	O
token	pointer
;	O
parser_state_tos	pointer
->	O
procname_end	pointer
=	O
token_end	pointer
;	O
while	O
(	O
isspace	function
(	O
*	O
tp	pointer
)	O
)	O
{	O
tp	pointer
++	O
;	O
}	O
if	O
(	O
(	O
*	O
tp	pointer
==	O
'_'	O
)	O
&&	O
(	O
in_prog	pointer
+	O
in_prog_size	long
-	O
tp	pointer
>=	O
13	int
)	O
&&	O
!	O
strncmp	function
(	O
tp	pointer
,	O
"__attribute__"	pointer
,	O
13	int
)	O
)	O
{	O
}	O
else	O
{	O
if	O
(	O
*	O
tp	pointer
!=	O
';'	O
&&	O
*	O
tp	pointer
!=	O
','	O
&&	O
*	O
tp	pointer
!=	O
'('	O
&&	O
*	O
tp	pointer
!=	O
'='	O
)	O
{	O
parser_state_tos	pointer
->	O
in_parameter_declaration	int
=	O
1	int
;	O
}	O
}	O
}	O
}	O
else	O
if	O
(	O
(	O
*	O
buf_ptr	pointer
==	O
':'	O
)	O
&&	O
(	O
*	O
(	O
buf_ptr	pointer
+	O
1	int
)	O
==	O
':'	O
)	O
&&	O
(	O
parser_state_tos	pointer
->	O
tos	int
<=	O
1	int
)	O
&&	O
(	O
parser_state_tos	pointer
->	O
ind_level	int
==	O
0	int
)	O
&&	O
(	O
parser_state_tos	pointer
->	O
paren_depth	int
==	O
0	int
)	O
)	O
{	O
parser_state_tos	pointer
->	O
classname	pointer
=	O
token	pointer
;	O
parser_state_tos	pointer
->	O
classname_end	pointer
=	O
token_end	pointer
;	O
}	O
else	O
if	O
(	O
(	O
(	O
(	O
*	O
buf_ptr	pointer
==	O
'*'	O
)	O
&&	O
(	O
buf_ptr	pointer
[	O
1	int
]	O
!=	O
'='	O
)	O
)	O
||	O
isalpha	function
(	O
*	O
buf_ptr	pointer
)	O
||	O
(	O
*	O
buf_ptr	pointer
==	O
'_'	O
)	O
)	O
&&	O
!	O
parser_state_tos	pointer
->	O
p_l_follow	int
&&	O
!	O
parser_state_tos	pointer
->	O
block_init	int
&&	O
(	O
(	O
parser_state_tos	pointer
->	O
last_token	enum
==	O
rparen	int
)	O
||	O
(	O
parser_state_tos	pointer
->	O
last_token	enum
==	O
semicolon	int
)	O
||	O
(	O
parser_state_tos	pointer
->	O
last_token	enum
==	O
rbrace	int
)	O
||	O
(	O
parser_state_tos	pointer
->	O
last_token	enum
==	O
decl	int
)	O
||	O
(	O
parser_state_tos	pointer
->	O
last_token	enum
==	O
lbrace	int
)	O
||	O
(	O
parser_state_tos	pointer
->	O
last_token	enum
==	O
start_token	int
)	O
)	O
)	O
{	O
parser_state_tos	pointer
->	O
its_a_keyword	int
=	O
true	int
;	O
parser_state_tos	pointer
->	O
last_u_d	int
=	O
true	int
;	O
last_code	enum
=	O
decl	int
;	O
if	O
(	O
parser_state_tos	pointer
->	O
last_token	enum
==	O
cpp_operator	int
)	O
{	O
return	O
overloaded	int
;	O
}	O
return	O
decl	int
;	O
}	O
else	O
{	O
}	O
not_proc	O
:	O
last_code	enum
=	O
ident	int
;	O
if	O
(	O
parser_state_tos	pointer
->	O
last_token	enum
==	O
cpp_operator	int
)	O
{	O
return	O
overloaded	int
;	O
}	O
return	O
(	O
ident	int
)	O
;	O
}	O
token_end	pointer
=	O
buf_ptr	pointer
+	O
1	int
;	O
if	O
(	O
++	O
buf_ptr	pointer
>=	O
buf_end	pointer
)	O
{	O
fill_buffer	function
(	O
)	O
;	O
}	O
if	O
(	O
(	O
*	O
token	pointer
==	O
'\\'	O
)	O
&&	O
(	O
buf_ptr	pointer
[	O
0	int
]	O
==	O
EOL	char
)	O
)	O
{	O
token	pointer
=	O
buf_ptr	pointer
;	O
if	O
(	O
++	O
buf_ptr	pointer
>=	O
buf_end	pointer
)	O
{	O
fill_buffer	function
(	O
)	O
;	O
}	O
}	O
switch	O
(	O
*	O
token	pointer
)	O
{	O
case	O
'\0'	O
:	O
code	int
=	O
code_eof	int
;	O
break	O
;	O
case	O
EOL	char
:	O
parser_state_tos	pointer
->	O
matching_brace_on_same_line	int
=	O
-	O
1	int
;	O
unary_delim	int
=	O
parser_state_tos	pointer
->	O
last_u_d	int
;	O
parser_state_tos	pointer
->	O
last_nl	int
=	O
true	int
;	O
code	int
=	O
newline	int
;	O
break	O
;	O
case	O
'_'	O
:	O
if	O
(	O
!	O
settings	struct
.	O
gettext_strings	int
||	O
buf_ptr	pointer
[	O
0	int
]	O
!=	O
'('	O
||	O
buf_ptr	pointer
[	O
1	int
]	O
!=	O
'"'	O
)	O
{	O
token_end	pointer
=	O
buf_ptr	pointer
;	O
code	int
=	O
ident	int
;	O
break	O
;	O
}	O
qchar	char
=	O
buf_ptr	pointer
[	O
1	int
]	O
;	O
buf_ptr	pointer
++	O
;	O
buf_ptr	pointer
++	O
;	O
goto	O
handle_string	O
;	O
case	O
'N'	O
:	O
if	O
(	O
!	O
settings	struct
.	O
gettext_strings	int
||	O
buf_ptr	pointer
[	O
0	int
]	O
!=	O
'_'	O
||	O
buf_ptr	pointer
[	O
1	int
]	O
!=	O
'('	O
||	O
buf_ptr	pointer
[	O
2	int
]	O
!=	O
'"'	O
)	O
{	O
token_end	pointer
=	O
buf_ptr	pointer
;	O
code	int
=	O
ident	int
;	O
break	O
;	O
}	O
qchar	char
=	O
buf_ptr	pointer
[	O
2	int
]	O
;	O
buf_ptr	pointer
++	O
;	O
buf_ptr	pointer
++	O
;	O
buf_ptr	pointer
++	O
;	O
goto	O
handle_string	O
;	O
case	O
'L'	O
:	O
if	O
(	O
buf_ptr	pointer
[	O
0	int
]	O
!=	O
'"'	O
&&	O
buf_ptr	pointer
[	O
0	int
]	O
!=	O
'\''	O
)	O
{	O
token_end	pointer
=	O
buf_ptr	pointer
;	O
code	int
=	O
ident	int
;	O
break	O
;	O
}	O
qchar	char
=	O
buf_ptr	pointer
[	O
0	int
]	O
;	O
buf_ptr	pointer
++	O
;	O
goto	O
handle_string	O
;	O
case	O
'\''	O
:	O
case	O
'"'	O
:	O
qchar	char
=	O
*	O
token	pointer
;	O
handle_string	O
:	O
while	O
(	O
(	O
*	O
buf_ptr	pointer
!=	O
qchar	char
)	O
&&	O
(	O
*	O
buf_ptr	pointer
!=	O
0	int
)	O
)	O
{	O
if	O
(	O
*	O
buf_ptr	pointer
==	O
EOL	char
)	O
{	O
++	O
line_no	int
;	O
}	O
if	O
(	O
*	O
buf_ptr	pointer
==	O
'\\'	O
)	O
{	O
buf_ptr	pointer
++	O
;	O
if	O
(	O
buf_ptr	pointer
>=	O
buf_end	pointer
)	O
{	O
fill_buffer	function
(	O
)	O
;	O
}	O
if	O
(	O
*	O
buf_ptr	pointer
==	O
EOL	char
)	O
{	O
++	O
line_no	int
;	O
}	O
if	O
(	O
*	O
buf_ptr	pointer
==	O
0	int
)	O
{	O
break	O
;	O
}	O
}	O
buf_ptr	pointer
++	O
;	O
if	O
(	O
buf_ptr	pointer
>=	O
buf_end	pointer
)	O
{	O
fill_buffer	function
(	O
)	O
;	O
}	O
}	O
if	O
(	O
*	O
buf_ptr	pointer
==	O
EOL	char
||	O
*	O
buf_ptr	pointer
==	O
0	int
)	O
{	O
WARNING	O
(	O
(	O
qchar	char
==	O
'\''	O
?	O
_	O
(	O
"Unterminated character constant"	pointer
)	O
:	O
_	O
(	O
"Unterminated string constant"	pointer
)	O
)	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
else	O
{	O
buf_ptr	pointer
++	O
;	O
if	O
(	O
buf_ptr	pointer
>=	O
buf_end	pointer
)	O
{	O
fill_buffer	function
(	O
)	O
;	O
}	O
}	O
if	O
(	O
settings	struct
.	O
gettext_strings	int
&&	O
(	O
token	pointer
[	O
0	int
]	O
==	O
'_'	O
||	O
(	O
token	pointer
[	O
0	int
]	O
==	O
'N'	O
&&	O
token	pointer
[	O
1	int
]	O
==	O
'_'	O
)	O
)	O
)	O
{	O
if	O
(	O
*	O
buf_ptr	pointer
!=	O
')'	O
)	O
{	O
WARNING	O
(	O
_	O
(	O
"Unterminated string constant"	pointer
)	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
else	O
{	O
buf_ptr	pointer
++	O
;	O
if	O
(	O
buf_ptr	pointer
>=	O
buf_end	pointer
)	O
{	O
fill_buffer	function
(	O
)	O
;	O
}	O
}	O
}	O
token_end	pointer
=	O
buf_ptr	pointer
;	O
code	int
=	O
ident	int
;	O
break	O
;	O
case	O
'('	O
:	O
l_enum	int
=	O
false	int
;	O
unary_delim	int
=	O
true	int
;	O
code	int
=	O
lparen	int
;	O
break	O
;	O
case	O
'['	O
:	O
if	O
(	O
parser_state_tos	pointer
->	O
in_or_st	int
)	O
{	O
parser_state_tos	pointer
->	O
in_or_st	int
++	O
;	O
}	O
unary_delim	int
=	O
true	int
;	O
code	int
=	O
lparen	int
;	O
break	O
;	O
case	O
')'	O
:	O
l_enum	int
=	O
false	int
;	O
code	int
=	O
rparen	int
;	O
break	O
;	O
case	O
']'	O
:	O
if	O
(	O
parser_state_tos	pointer
->	O
in_or_st	int
>	O
1	int
)	O
{	O
parser_state_tos	pointer
->	O
in_or_st	int
--	O
;	O
}	O
code	int
=	O
rparen	int
;	O
break	O
;	O
case	O
'#'	O
:	O
unary_delim	int
=	O
parser_state_tos	pointer
->	O
last_u_d	int
;	O
code	int
=	O
preesc	int
;	O
while	O
(	O
*	O
buf_ptr	pointer
==	O
' '	O
&&	O
buf_ptr	pointer
<	O
buf_end	pointer
)	O
{	O
buf_ptr	pointer
++	O
;	O
}	O
if	O
(	O
settings	struct
.	O
leave_preproc_space	int
)	O
{	O
token_end	pointer
=	O
buf_ptr	pointer
;	O
}	O
break	O
;	O
case	O
'?'	O
:	O
unary_delim	int
=	O
true	int
;	O
code	int
=	O
question	int
;	O
break	O
;	O
case	O
':'	O
:	O
if	O
(	O
*	O
buf_ptr	pointer
==	O
':'	O
)	O
{	O
code	int
=	O
doublecolon	int
;	O
buf_ptr	pointer
++	O
;	O
token_end	pointer
=	O
buf_ptr	pointer
;	O
break	O
;	O
}	O
code	int
=	O
colon	int
;	O
unary_delim	int
=	O
true	int
;	O
if	O
(	O
squest	int
&&	O
*	O
e_com	pointer
!=	O
' '	O
)	O
{	O
if	O
(	O
e_code	pointer
==	O
s_code	pointer
)	O
{	O
parser_state_tos	pointer
->	O
want_blank	int
=	O
false	int
;	O
}	O
else	O
{	O
parser_state_tos	pointer
->	O
want_blank	int
=	O
true	int
;	O
}	O
}	O
break	O
;	O
case	O
';'	O
:	O
l_enum	int
=	O
false	int
;	O
unary_delim	int
=	O
true	int
;	O
code	int
=	O
semicolon	int
;	O
break	O
;	O
case	O
'{'	O
:	O
if	O
(	O
parser_state_tos	pointer
->	O
matching_brace_on_same_line	int
<	O
0	int
)	O
{	O
parser_state_tos	pointer
->	O
matching_brace_on_same_line	int
=	O
1	int
;	O
}	O
else	O
{	O
parser_state_tos	pointer
->	O
matching_brace_on_same_line	int
++	O
;	O
}	O
if	O
(	O
l_enum	int
)	O
{	O
parser_state_tos	pointer
->	O
block_init	int
=	O
2	int
;	O
parser_state_tos	pointer
->	O
block_init_level	int
=	O
0	int
;	O
l_enum	int
=	O
false	int
;	O
}	O
unary_delim	int
=	O
true	int
;	O
code	int
=	O
lbrace	int
;	O
break	O
;	O
case	O
'}'	O
:	O
parser_state_tos	pointer
->	O
matching_brace_on_same_line	int
--	O
;	O
l_enum	int
=	O
false	int
;	O
unary_delim	int
=	O
true	int
;	O
code	int
=	O
rbrace	int
;	O
break	O
;	O
case	O
014	int
:	O
unary_delim	int
=	O
parser_state_tos	pointer
->	O
last_u_d	int
;	O
parser_state_tos	pointer
->	O
last_nl	int
=	O
true	int
;	O
code	int
=	O
form_feed	int
;	O
break	O
;	O
case	O
','	O
:	O
unary_delim	int
=	O
true	int
;	O
code	int
=	O
comma	int
;	O
break	O
;	O
case	O
'.'	O
:	O
if	O
(	O
(	O
buf_ptr	pointer
[	O
0	int
]	O
==	O
'.'	O
)	O
&&	O
(	O
buf_ptr	pointer
[	O
1	int
]	O
==	O
'.'	O
)	O
)	O
{	O
if	O
(	O
(	O
buf_ptr	pointer
+=	O
2	int
)	O
>=	O
buf_end	pointer
)	O
{	O
fill_buffer	function
(	O
)	O
;	O
}	O
unary_delim	int
=	O
true	int
;	O
token_end	pointer
=	O
buf_ptr	pointer
;	O
if	O
(	O
parser_state_tos	pointer
->	O
in_decl	char
)	O
{	O
code	int
=	O
decl	int
;	O
}	O
else	O
{	O
code	int
=	O
binary_op	int
;	O
}	O
}	O
else	O
{	O
unary_delim	int
=	O
false	int
;	O
code	int
=	O
struct_delim	int
;	O
if	O
(	O
*	O
buf_ptr	pointer
==	O
'*'	O
)	O
{	O
++	O
buf_ptr	pointer
;	O
token_end	pointer
=	O
buf_ptr	pointer
;	O
}	O
}	O
break	O
;	O
case	O
'-'	O
:	O
case	O
'+'	O
:	O
code	int
=	O
(	O
parser_state_tos	pointer
->	O
last_u_d	int
?	O
unary_op	int
:	O
binary_op	int
)	O
;	O
unary_delim	int
=	O
true	int
;	O
if	O
(	O
*	O
buf_ptr	pointer
==	O
token	pointer
[	O
0	int
]	O
)	O
{	O
buf_ptr	pointer
++	O
;	O
if	O
(	O
last_code	enum
==	O
ident	int
||	O
last_code	enum
==	O
rparen	int
)	O
{	O
code	int
=	O
(	O
parser_state_tos	pointer
->	O
last_u_d	int
?	O
unary_op	int
:	O
postop	int
)	O
;	O
unary_delim	int
=	O
false	int
;	O
}	O
}	O
else	O
if	O
(	O
*	O
buf_ptr	pointer
==	O
'='	O
)	O
{	O
buf_ptr	pointer
++	O
;	O
}	O
else	O
if	O
(	O
*	O
buf_ptr	pointer
==	O
'>'	O
)	O
{	O
buf_ptr	pointer
++	O
;	O
code	int
=	O
struct_delim	int
;	O
if	O
(	O
*	O
buf_ptr	pointer
==	O
'*'	O
)	O
{	O
buf_ptr	pointer
++	O
;	O
}	O
}	O
else	O
{	O
}	O
token_end	pointer
=	O
buf_ptr	pointer
;	O
break	O
;	O
case	O
'='	O
:	O
if	O
(	O
parser_state_tos	pointer
->	O
in_or_st	int
&&	O
(	O
parser_state_tos	pointer
->	O
last_token	enum
!=	O
cpp_operator	int
)	O
)	O
{	O
parser_state_tos	pointer
->	O
block_init	int
=	O
1	int
;	O
parser_state_tos	pointer
->	O
block_init_level	int
=	O
0	int
;	O
}	O
if	O
(	O
*	O
buf_ptr	pointer
==	O
'='	O
)	O
{	O
buf_ptr	pointer
++	O
;	O
}	O
else	O
if	O
(	O
(	O
*	O
buf_ptr	pointer
==	O
'-'	O
)	O
||	O
(	O
*	O
buf_ptr	pointer
==	O
'+'	O
)	O
||	O
(	O
*	O
buf_ptr	pointer
==	O
'*'	O
)	O
||	O
(	O
*	O
buf_ptr	pointer
==	O
'&'	O
)	O
)	O
{	O
tmpchar	array
[	O
0	int
]	O
=	O
*	O
buf_ptr	pointer
;	O
tmpchar	array
[	O
1	int
]	O
=	O
'\0'	O
;	O
WARNING	O
(	O
_	O
(	O
"old style assignment ambiguity in \"=%s\". "	pointer
"Assuming \"= %s\"\n"	pointer
)	O
,	O
tmpchar	array
,	O
tmpchar	array
)	O
;	O
}	O
else	O
{	O
}	O
code	int
=	O
binary_op	int
;	O
unary_delim	int
=	O
true	int
;	O
token_end	pointer
=	O
buf_ptr	pointer
;	O
break	O
;	O
case	O
'>'	O
:	O
case	O
'<'	O
:	O
case	O
'!'	O
:	O
while	O
(	O
*	O
buf_ptr	pointer
==	O
'>'	O
||	O
*	O
buf_ptr	pointer
==	O
'<'	O
||	O
*	O
buf_ptr	pointer
==	O
'='	O
||	O
(	O
settings	struct
.	O
c_plus_plus	int
&&	O
*	O
buf_ptr	pointer
==	O
'?'	O
)	O
)	O
{	O
if	O
(	O
++	O
buf_ptr	pointer
>=	O
buf_end	pointer
)	O
{	O
fill_buffer	function
(	O
)	O
;	O
}	O
if	O
(	O
*	O
buf_ptr	pointer
==	O
'='	O
)	O
{	O
if	O
(	O
++	O
buf_ptr	pointer
>=	O
buf_end	pointer
)	O
{	O
fill_buffer	function
(	O
)	O
;	O
}	O
}	O
}	O
code	int
=	O
(	O
parser_state_tos	pointer
->	O
last_u_d	int
?	O
unary_op	int
:	O
binary_op	int
)	O
;	O
unary_delim	int
=	O
true	int
;	O
token_end	pointer
=	O
buf_ptr	pointer
;	O
break	O
;	O
default	O
:	O
if	O
(	O
token	pointer
[	O
0	int
]	O
==	O
'/'	O
&&	O
(	O
*	O
buf_ptr	pointer
==	O
'*'	O
||	O
*	O
buf_ptr	pointer
==	O
'/'	O
)	O
)	O
{	O
if	O
(	O
*	O
buf_ptr	pointer
==	O
'*'	O
)	O
{	O
code	int
=	O
comment	int
;	O
}	O
else	O
{	O
code	int
=	O
cplus_comment	int
;	O
}	O
if	O
(	O
++	O
buf_ptr	pointer
>=	O
buf_end	pointer
)	O
{	O
fill_buffer	function
(	O
)	O
;	O
}	O
if	O
(	O
code	int
==	O
comment	int
)	O
{	O
char	O
*	O
p	pointer
=	O
buf_ptr	pointer
;	O
while	O
(	O
isupper	function
(	O
*	O
p	pointer
++	O
)	O
)	O
{	O
}	O
if	O
(	O
p	pointer
<	O
buf_end	pointer
&&	O
p	pointer
[	O
-	O
1	int
]	O
==	O
'*'	O
&&	O
*	O
p	pointer
==	O
'/'	O
)	O
{	O
buf_ptr	pointer
=	O
p	pointer
+	O
1	int
;	O
code	int
=	O
ident	int
;	O
parser_state_tos	pointer
->	O
want_blank	int
=	O
true	int
;	O
}	O
}	O
unary_delim	int
=	O
parser_state_tos	pointer
->	O
last_u_d	int
;	O
}	O
else	O
if	O
(	O
parser_state_tos	pointer
->	O
last_token	enum
==	O
cpp_operator	int
)	O
{	O
code	int
=	O
overloaded	int
;	O
last_code	enum
=	O
overloaded	int
;	O
}	O
else	O
{	O
while	O
(	O
*	O
(	O
buf_ptr	pointer
-	O
1	int
)	O
==	O
*	O
buf_ptr	pointer
||	O
*	O
buf_ptr	pointer
==	O
'='	O
)	O
{	O
if	O
(	O
++	O
buf_ptr	pointer
>=	O
buf_end	pointer
)	O
{	O
fill_buffer	function
(	O
)	O
;	O
}	O
}	O
code	int
=	O
(	O
parser_state_tos	pointer
->	O
last_u_d	int
?	O
unary_op	int
:	O
binary_op	int
)	O
;	O
unary_delim	int
=	O
true	int
;	O
}	O
token_end	pointer
=	O
buf_ptr	pointer
;	O
}	O
if	O
(	O
code	int
!=	O
newline	int
)	O
{	O
l_struct	int
=	O
false	int
;	O
last_code	enum
=	O
code	int
;	O
}	O
if	O
(	O
buf_ptr	pointer
>=	O
buf_end	pointer
)	O
{	O
fill_buffer	function
(	O
)	O
;	O
}	O
parser_state_tos	pointer
->	O
last_u_d	int
=	O
unary_delim	int
;	O
if	O
(	O
parser_state_tos	pointer
->	O
last_token	enum
==	O
cpp_operator	int
)	O
{	O
return	O
overloaded	int
;	O
}	O
return	O
(	O
code	int
)	O
;	O
}	O
extern	O
void	O
addkey	function
(	O
char	O
*	O
key	pointer
,	O
rwcodes_ty	enum
val	enum
)	O
{	O
templ_ty	struct
*	O
p	pointer
;	O
if	O
(	O
(	O
settings	struct
.	O
c_plus_plus	int
&&	O
is_reserved_cc	function
(	O
key	pointer
,	O
strlen	function
(	O
key	pointer
)	O
)	O
!=	O
0	int
)	O
||	O
(	O
!	O
settings	struct
.	O
c_plus_plus	int
&&	O
is_reserved	function
(	O
key	pointer
,	O
strlen	function
(	O
key	pointer
)	O
)	O
!=	O
0	int
)	O
)	O
{	O
}	O
else	O
{	O
if	O
(	O
user_specials	pointer
==	O
0	int
)	O
{	O
user_specials	pointer
=	O
xmalloc	function
(	O
5	int
*	O
sizeof	O
(	O
templ_ty	struct
)	O
)	O
;	O
user_specials_max	int
=	O
5	int
;	O
user_specials_idx	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
user_specials_idx	int
==	O
user_specials_max	int
)	O
{	O
user_specials_max	int
+=	O
5	int
;	O
user_specials	pointer
=	O
xrealloc	function
(	O
user_specials	pointer
,	O
user_specials_max	int
*	O
sizeof	O
(	O
templ_ty	struct
)	O
)	O
;	O
}	O
else	O
{	O
}	O
p	pointer
=	O
&	O
user_specials	pointer
[	O
user_specials_idx	int
++	O
]	O
;	O
p	pointer
->	O
rwd	pointer
=	O
key	pointer
;	O
p	pointer
->	O
rwcode	enum
=	O
val	enum
;	O
}	O
}	O
extern	O
void	O
cleanup_user_specials	function
(	O
void	O
)	O
{	O
if	O
(	O
user_specials	pointer
)	O
{	O
while	O
(	O
--	O
user_specials_idx	int
>	O
0	int
)	O
{	O
xfree	function
(	O
user_specials	pointer
[	O
user_specials_idx	int
]	O
.	O
rwd	pointer
)	O
;	O
}	O
xfree	function
(	O
user_specials	pointer
[	O
0	int
]	O
.	O
rwd	pointer
)	O
;	O
xfree	function
(	O
user_specials	pointer
)	O
;	O
}	O
}	O