static	O
void	O
uint32_to_bytes	function
(	O
unsigned	O
char	O
*	O
bytes	*
,	O
uint32_t	int
u	int
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
)	O
{	O
bytes	*
[	O
i	int
]	O
=	O
u	int
&	O
0xff	int
;	O
u	int
>>=	O
8	int
;	O
}	O
}	O
int	O
grecs_inaddr_to_bytes	function
(	O
int	O
af	int
,	O
void	O
*	O
buf	*
,	O
unsigned	O
char	O
*	O
bytes	*
)	O
{	O
uint32_t	int
u	int
;	O
switch	O
(	O
af	int
)	O
{	O
case	O
AF_INET	O
:	O
memcpy	function
(	O
&	O
u	int
,	O
buf	*
,	O
sizeof	O
u	int
)	O
;	O
uint32_to_bytes	function
(	O
bytes	*
,	O
u	int
)	O
;	O
return	O
4	int
;	O
case	O
AF_INET6	O
:	O
memcpy	function
(	O
bytes	*
,	O
buf	*
,	O
16	int
)	O
;	O
return	O
16	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
grecs_sockaddr_to_bytes	function
(	O
unsigned	O
char	O
*	O
bytes	*
,	O
struct	O
sockaddr	struct
const	O
*	O
sa	*
)	O
{	O
switch	O
(	O
sa	*
->	O
sa_family	short
)	O
{	O
case	O
AF_INET	O
:	O
uint32_to_bytes	function
(	O
bytes	*
,	O
(	O
(	O
struct	O
sockaddr_in	struct
*	O
)	O
sa	*
)	O
->	O
sin_addr	struct
.	O
s_addr	int
)	O
;	O
return	O
4	int
;	O
case	O
AF_INET6	O
:	O
memcpy	function
(	O
bytes	*
,	O
&	O
(	O
(	O
struct	O
sockaddr_in6	struct
*	O
)	O
sa	*
)	O
->	O
sin6_addr	struct
,	O
16	int
)	O
;	O
return	O
16	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
grecs_sockaddr_to_cidr	function
(	O
struct	O
grecs_cidr	struct
*	O
cidr	*
,	O
const	O
struct	O
sockaddr	struct
*	O
sa	*
)	O
{	O
unsigned	O
char	O
address	array
[	O
GRECS_INADDR_BYTES	int
]	O
;	O
int	O
len	long
;	O
int	O
i	int
;	O
len	long
=	O
grecs_sockaddr_to_bytes	function
(	O
address	array
,	O
sa	*
)	O
;	O
if	O
(	O
len	long
==	O
0	int
)	O
return	O
-	O
1	int
;	O
cidr	*
->	O
family	int
=	O
sa	*
->	O
sa_family	short
;	O
cidr	*
->	O
len	long
=	O
len	int
;	O
memcpy	function
(	O
cidr	*
->	O
address	array
,	O
address	array
,	O
sizeof	O
(	O
cidr	*
->	O
address	array
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
GRECS_INADDR_BYTES	int
;	O
i	int
++	O
)	O
cidr	*
->	O
netmask	array
[	O
i	int
]	O
=	O
0xff	int
;	O
return	O
0	int
;	O
}	O
static	O
void	O
masklen_to_netmask	function
(	O
unsigned	O
char	O
*	O
buf	*
,	O
size_t	long
len	long
,	O
size_t	long
masklen	long
)	O
{	O
int	O
i	int
,	O
cnt	int
;	O
cnt	int
=	O
masklen	long
/	O
8	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
cnt	int
;	O
i	int
++	O
)	O
buf	*
[	O
i	int
]	O
=	O
0xff	int
;	O
if	O
(	O
i	int
==	O
GRECS_INADDR_BYTES	int
)	O
return	O
;	O
cnt	int
=	O
8	int
-	O
masklen	long
%	O
8	int
;	O
buf	*
[	O
i	int
++	O
]	O
=	O
(	O
0xff	int
>>	O
cnt	int
)	O
<<	O
cnt	int
;	O
for	O
(	O
;	O
i	int
<	O
GRECS_INADDR_BYTES	int
;	O
i	int
++	O
)	O
buf	*
[	O
i	int
]	O
=	O
0	int
;	O
}	O
int	O
grecs_str_to_cidr	function
(	O
struct	O
grecs_cidr	struct
*	O
pcidr	*
,	O
const	O
char	O
*	O
str	*
,	O
grecs_locus_t	struct
const	O
*	O
locus	struct
)	O
{	O
int	O
rc	int
;	O
char	O
ipbuf	array
[	O
41	int
]	O
;	O
struct	O
grecs_cidr	struct
cidr	*
;	O
char	O
*	O
p	*
;	O
size_t	long
len	long
;	O
union	O
{	O
struct	O
in_addr	struct
in	struct
;	O
struct	O
in6_addr	struct
in6	struct
;	O
}	O
inaddr	union
;	O
p	*
=	O
strchr	function
(	O
str	*
,	O
'/'	O
)	O
;	O
if	O
(	O
p	*
)	O
len	long
=	O
p	*
-	O
str	*
;	O
else	O
len	long
=	O
strlen	function
(	O
str	*
)	O
;	O
if	O
(	O
len	long
>	O
sizeof	O
(	O
ipbuf	array
)	O
)	O
{	O
grecs_error	function
(	O
locus	struct
,	O
0	int
,	O
_	O
(	O
"invalid network mask: %s"	*
)	O
,	O
str	*
)	O
;	O
return	O
-	O
1	int
;	O
}	O
memcpy	function
(	O
ipbuf	array
,	O
str	*
,	O
len	long
)	O
;	O
ipbuf	array
[	O
len	long
]	O
=	O
0	int
;	O
if	O
(	O
grecs_str_is_ipv4	function
(	O
ipbuf	array
)	O
)	O
cidr	*
.	O
family	int
=	O
AF_INET	O
;	O
else	O
if	O
(	O
grecs_str_is_ipv6	function
(	O
ipbuf	array
)	O
)	O
cidr	*
.	O
family	int
=	O
AF_INET6	O
;	O
else	O
{	O
grecs_error	function
(	O
locus	struct
,	O
0	int
,	O
_	O
(	O
"unrecognized address family: %s"	*
)	O
,	O
str	*
)	O
;	O
return	O
-	O
1	int
;	O
}	O
rc	int
=	O
inet_pton	function
(	O
cidr	*
.	O
family	int
,	O
ipbuf	array
,	O
&	O
inaddr	union
)	O
;	O
if	O
(	O
rc	int
==	O
-	O
1	int
)	O
{	O
grecs_error	function
(	O
locus	struct
,	O
0	int
,	O
_	O
(	O
"unrecognized address family: %s"	*
)	O
,	O
str	*
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
rc	int
!=	O
1	int
)	O
{	O
grecs_error	function
(	O
locus	struct
,	O
0	int
,	O
_	O
(	O
"invalid network address: %s"	*
)	O
,	O
str	*
)	O
;	O
return	O
-	O
1	int
;	O
}	O
cidr	*
.	O
len	long
=	O
grecs_inaddr_to_bytes	function
(	O
cidr	*
.	O
family	int
,	O
&	O
inaddr	union
,	O
cidr	*
.	O
address	array
)	O
;	O
if	O
(	O
cidr	*
.	O
len	long
==	O
0	int
)	O
{	O
grecs_error	function
(	O
locus	struct
,	O
0	int
,	O
_	O
(	O
"unrecognized address family: %s"	*
)	O
,	O
str	*
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
p	*
)	O
{	O
char	O
*	O
end	*
;	O
unsigned	O
long	O
masklen	long
;	O
p	*
++	O
;	O
masklen	long
=	O
strtoul	function
(	O
p	*
,	O
&	O
end	struct
,	O
10	int
)	O
;	O
if	O
(	O
*	O
end	struct
==	O
0	int
)	O
masklen_to_netmask	function
(	O
cidr	*
.	O
netmask	array
,	O
cidr	*
.	O
len	long
,	O
masklen	long
)	O
;	O
else	O
if	O
(	O
(	O
cidr	*
.	O
family	int
==	O
AF_INET	O
&&	O
grecs_str_is_ipv4	function
(	O
p	*
)	O
)	O
||	O
(	O
cidr	*
.	O
family	int
==	O
AF_INET6	O
&&	O
grecs_str_is_ipv6	function
(	O
ipbuf	array
)	O
)	O
)	O
{	O
rc	int
=	O
inet_pton	function
(	O
cidr	*
.	O
family	int
,	O
p	*
,	O
&	O
inaddr	union
)	O
;	O
if	O
(	O
rc	int
!=	O
1	int
)	O
{	O
grecs_error	function
(	O
locus	struct
,	O
0	int
,	O
_	O
(	O
"invalid network mask: %s"	*
)	O
,	O
str	*
)	O
;	O
return	O
-	O
1	int
;	O
}	O
grecs_inaddr_to_bytes	function
(	O
cidr	*
.	O
family	int
,	O
&	O
inaddr	union
,	O
cidr	*
.	O
netmask	array
)	O
;	O
}	O
else	O
{	O
grecs_error	function
(	O
locus	struct
,	O
0	int
,	O
_	O
(	O
"invalid network mask: %s"	*
)	O
,	O
str	*
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
masklen_to_netmask	function
(	O
cidr	*
.	O
netmask	array
,	O
cidr	*
.	O
len	long
,	O
cidr	*
.	O
len	long
*	O
8	int
)	O
;	O
memcpy	function
(	O
pcidr	*
,	O
&	O
cidr	*
,	O
sizeof	O
(	O
*	O
pcidr	*
)	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
grecs_cidr_match	function
(	O
struct	O
grecs_cidr	struct
*	O
a	*
,	O
struct	O
grecs_cidr	struct
*	O
b	*
)	O
{	O
int	O
i	int
;	O
if	O
(	O
a	*
->	O
family	int
!=	O
b	*
->	O
family	int
)	O
return	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
a	*
->	O
len	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
a	*
->	O
address	array
[	O
i	int
]	O
!=	O
(	O
b	*
->	O
address	array
[	O
i	int
]	O
&	O
a	*
->	O
netmask	array
[	O
i	int
]	O
)	O
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
grecs_sockadd_cidr_match	function
(	O
struct	O
sockaddr	struct
*	O
sa	*
,	O
struct	O
grecs_cidr	struct
*	O
cidr	*
)	O
{	O
struct	O
grecs_cidr	struct
t	int
;	O
if	O
(	O
grecs_sockaddr_to_cidr	function
(	O
&	O
t	int
,	O
sa	*
)	O
)	O
return	O
1	int
;	O
return	O
grecs_cidr_match	function
(	O
cidr	*
,	O
&	O
t	int
)	O
;	O
}	O