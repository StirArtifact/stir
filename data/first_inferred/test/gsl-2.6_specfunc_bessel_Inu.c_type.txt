int	O
gsl_sf_bessel_Inu_scaled_e	function
(	O
double	O
nu	double
,	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
<	O
0.0	int
||	O
nu	double
<	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
*	O
x	double
<	O
10.0	int
*	O
(	O
nu	double
+	O
1.0	int
)	O
)	O
{	O
gsl_sf_result	struct
b	pointer
;	O
double	O
ex	double
=	O
exp	function
(	O
-	O
x	double
)	O
;	O
int	O
stat	int
=	O
gsl_sf_bessel_IJ_taylor_e	function
(	O
nu	double
,	O
x	double
,	O
1	int
,	O
100	int
,	O
GSL_DBL_EPSILON	int
,	O
&	O
b	pointer
)	O
;	O
result	pointer
->	O
val	double
=	O
b	double
.	O
val	double
*	O
ex	double
;	O
result	pointer
->	O
err	double
=	O
b	double
.	O
err	double
*	O
ex	pointer
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
stat	double
;	O
}	O
else	O
if	O
(	O
0.5	int
/	O
(	O
nu	double
*	O
nu	double
+	O
x	double
*	O
x	double
)	O
<	O
GSL_ROOT3_DBL_EPSILON	int
)	O
{	O
return	O
gsl_sf_bessel_Inu_scaled_asymp_unif_e	function
(	O
nu	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
{	O
int	O
N	int
=	O
(	O
int	O
)	O
(	O
nu	double
+	O
0.5	int
)	O
;	O
double	O
mu	double
=	O
nu	double
-	O
N	int
;	O
double	O
K_mu	double
,	O
K_mup1	double
,	O
Kp_mu	double
;	O
double	O
K_nu	pointer
,	O
K_nup1	pointer
,	O
K_num1	double
;	O
double	O
I_nu_ratio	double
;	O
int	O
stat_Irat	int
;	O
int	O
stat_Kmu	int
;	O
int	O
n	int
;	O
if	O
(	O
x	double
<	O
2.0	int
)	O
{	O
stat_Kmu	int
=	O
gsl_sf_bessel_K_scaled_temme	function
(	O
mu	double
,	O
x	double
,	O
&	O
K_mu	double
,	O
&	O
K_mup1	double
,	O
&	O
Kp_mu	double
)	O
;	O
}	O
else	O
{	O
stat_Kmu	double
=	O
gsl_sf_bessel_K_scaled_steed_temme_CF2	function
(	O
mu	double
,	O
x	double
,	O
&	O
K_mu	double
,	O
&	O
K_mup1	double
,	O
&	O
Kp_mu	double
)	O
;	O
}	O
K_nu	pointer
=	O
K_mu	double
;	O
K_nup1	pointer
=	O
K_mup1	double
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
N	int
;	O
n	int
++	O
)	O
{	O
K_num1	double
=	O
K_nu	pointer
;	O
K_nu	pointer
=	O
K_nup1	pointer
;	O
K_nup1	pointer
=	O
2.0	int
*	O
(	O
mu	double
+	O
n	int
+	O
1	int
)	O
/	O
x	double
*	O
K_nu	pointer
+	O
K_num1	double
;	O
}	O
stat_Irat	double
=	O
gsl_sf_bessel_I_CF1_ser	function
(	O
nu	double
,	O
x	double
,	O
&	O
I_nu_ratio	pointer
)	O
;	O
result	pointer
->	O
val	double
=	O
1.0	int
/	O
(	O
x	double
*	O
(	O
K_nup1	pointer
+	O
I_nu_ratio	struct
*	O
K_nu	pointer
)	O
)	O
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
(	O
0.5	int
*	O
N	int
+	O
2.0	int
)	O
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_Kmu	int
,	O
stat_Irat	int
)	O
;	O
}	O
}	O
int	O
gsl_sf_bessel_Inu_e	function
(	O
double	O
nu	double
,	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
gsl_sf_result	struct
b	pointer
;	O
int	O
stat_I	int
=	O
gsl_sf_bessel_Inu_scaled_e	function
(	O
nu	double
,	O
x	double
,	O
&	O
b	double
)	O
;	O
int	O
stat_e	int
=	O
gsl_sf_exp_mult_err_e	function
(	O
x	double
,	O
fabs	function
(	O
x	double
*	O
GSL_DBL_EPSILON	int
)	O
,	O
b	double
.	O
val	double
,	O
b	double
.	O
err	double
,	O
result	pointer
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_e	int
,	O
stat_I	int
)	O
;	O
}	O
double	O
gsl_sf_bessel_Inu_scaled	function
(	O
double	O
nu	double
,	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_Inu_scaled_e	function
(	O
nu	double
,	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_bessel_Inu	function
(	O
double	O
nu	double
,	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_Inu_e	function
(	O
nu	double
,	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O