int	O
mpz_kronecker_si	function
(	O
mpz_srcptr	*
a	*
,	O
long	O
b	long
)	O
{	O
mp_srcptr	*
a_ptr	*
;	O
mp_size_t	long
a_size	long
;	O
mp_limb_t	long
a_rem	long
,	O
b_limb	long
;	O
int	O
result_bit1	int
;	O
a_size	long
=	O
SIZ	O
(	O
a	int
)	O
;	O
if	O
(	O
a_size	long
==	O
0	int
)	O
return	O
JACOBI_0S	function
(	O
b	int
)	O
;	O
result_bit1	int
=	O
JACOBI_BSGN_SS_BIT1	O
(	O
a_size	long
,	O
b	int
)	O
;	O
b_limb	long
=	O
ABS_CAST	O
(	O
unsigned	O
long	O
,	O
b	long
)	O
;	O
a_ptr	*
=	O
PTR	O
(	O
a	int
)	O
;	O
if	O
(	O
(	O
b_limb	int
&	O
1	int
)	O
==	O
0	int
)	O
{	O
mp_limb_t	long
a_low	long
=	O
a_ptr	*
[	O
0	int
]	O
;	O
int	O
twos	int
;	O
if	O
(	O
b_limb	int
==	O
0	int
)	O
return	O
JACOBI_LS0	O
(	O
a_low	long
,	O
a_size	long
)	O
;	O
if	O
(	O
!	O
(	O
a_low	long
&	O
1	int
)	O
)	O
return	O
0	int
;	O
count_trailing_zeros	O
(	O
twos	int
,	O
b_limb	int
)	O
;	O
b_limb	O
>>=	O
twos	int
;	O
result_bit1	int
^=	O
JACOBI_TWOS_U_BIT1	O
(	O
twos	int
,	O
a_low	long
)	O
;	O
}	O
if	O
(	O
b_limb	int
==	O
1	int
)	O
return	O
JACOBI_BIT1_TO_PN	O
(	O
result_bit1	int
)	O
;	O
result_bit1	int
^=	O
JACOBI_ASGN_SU_BIT1	O
(	O
a_size	long
,	O
b_limb	int
)	O
;	O
a_size	long
=	O
ABS	O
(	O
a_size	long
)	O
;	O
JACOBI_MOD_OR_MODEXACT_1_ODD	O
(	O
result_bit1	int
,	O
a_rem	long
,	O
a_ptr	*
,	O
a_size	long
,	O
b_limb	int
)	O
;	O
return	O
mpn_jacobi_base	function
(	O
a_rem	long
,	O
b_limb	int
,	O
result_bit1	int
)	O
;	O
}	O