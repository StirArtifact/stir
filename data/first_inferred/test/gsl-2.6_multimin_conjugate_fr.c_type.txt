typedef	O
struct	O
{	O
int	O
iter	int
;	O
double	O
step	double
;	O
double	O
max_step	double
;	O
double	O
tol	double
;	O
gsl_vector	struct
*	O
x1	double
;	O
gsl_vector	struct
*	O
dx1	*
;	O
gsl_vector	struct
*	O
x2	double
;	O
double	O
pnorm	double
;	O
gsl_vector	struct
*	O
p	int
;	O
double	O
g0norm	double
;	O
gsl_vector	struct
*	O
g0	*
;	O
}	O
conjugate_fr_state_t	struct
;	O
static	O
int	O
conjugate_fr_alloc	function
(	O
void	O
*	O
vstate	*
,	O
size_t	long
n	int
)	O
{	O
conjugate_fr_state_t	struct
*	O
state	*
=	O
(	O
conjugate_fr_state_t	struct
*	O
)	O
vstate	*
;	O
state	*
->	O
x1	double
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
state	*
->	O
x1	double
==	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"failed to allocate space for x1"	*
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*
->	O
dx1	*
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
state	*
->	O
dx1	*
==	O
0	int
)	O
{	O
gsl_vector_free	function
(	O
state	*
->	O
x1	double
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for dx1"	*
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*
->	O
x2	double
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
state	*
->	O
x2	double
==	O
0	int
)	O
{	O
gsl_vector_free	function
(	O
state	*
->	O
dx1	*
)	O
;	O
gsl_vector_free	function
(	O
state	*
->	O
x1	double
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for x2"	*
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*
->	O
p	int
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
state	*
->	O
p	int
==	O
0	int
)	O
{	O
gsl_vector_free	function
(	O
state	*
->	O
x2	double
)	O
;	O
gsl_vector_free	function
(	O
state	*
->	O
dx1	*
)	O
;	O
gsl_vector_free	function
(	O
state	*
->	O
x1	double
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for p"	*
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*
->	O
g0	*
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
state	*
->	O
g0	*
==	O
0	int
)	O
{	O
gsl_vector_free	function
(	O
state	*
->	O
p	int
)	O
;	O
gsl_vector_free	function
(	O
state	*
->	O
x2	double
)	O
;	O
gsl_vector_free	function
(	O
state	*
->	O
dx1	*
)	O
;	O
gsl_vector_free	function
(	O
state	*
->	O
x1	double
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for g0"	*
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
conjugate_fr_set	function
(	O
void	O
*	O
vstate	*
,	O
gsl_multimin_function_fdf	struct
*	O
fdf	*
,	O
const	O
gsl_vector	struct
*	O
x	double
,	O
double	O
*	O
f	*
,	O
gsl_vector	struct
*	O
gradient	*
,	O
double	O
step_size	*
,	O
double	O
tol	double
)	O
{	O
conjugate_fr_state_t	struct
*	O
state	*
=	O
(	O
conjugate_fr_state_t	struct
*	O
)	O
vstate	*
;	O
state	*
->	O
iter	int
=	O
0	int
;	O
state	*
->	O
step	double
=	O
step_size	*
;	O
state	*
->	O
max_step	double
=	O
step_size	*
;	O
state	*
->	O
tol	double
=	O
tol	double
;	O
GSL_MULTIMIN_FN_EVAL_F_DF	O
(	O
fdf	*
,	O
x	double
,	O
f	*
,	O
gradient	*
)	O
;	O
gsl_vector_memcpy	function
(	O
state	*
->	O
p	int
,	O
gradient	*
)	O
;	O
gsl_vector_memcpy	function
(	O
state	*
->	O
g0	*
,	O
gradient	*
)	O
;	O
{	O
double	O
gnorm	*
=	O
gsl_blas_dnrm2	function
(	O
gradient	*
)	O
;	O
state	*
->	O
pnorm	double
=	O
gnorm	*
;	O
state	*
->	O
g0norm	double
=	O
gnorm	*
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
void	O
conjugate_fr_free	function
(	O
void	O
*	O
vstate	*
)	O
{	O
conjugate_fr_state_t	struct
*	O
state	*
=	O
(	O
conjugate_fr_state_t	struct
*	O
)	O
vstate	*
;	O
gsl_vector_free	function
(	O
state	*
->	O
g0	*
)	O
;	O
gsl_vector_free	function
(	O
state	*
->	O
p	int
)	O
;	O
gsl_vector_free	function
(	O
state	*
->	O
x2	double
)	O
;	O
gsl_vector_free	function
(	O
state	*
->	O
dx1	*
)	O
;	O
gsl_vector_free	function
(	O
state	*
->	O
x1	double
)	O
;	O
}	O
static	O
int	O
conjugate_fr_restart	function
(	O
void	O
*	O
vstate	*
)	O
{	O
conjugate_fr_state_t	struct
*	O
state	*
=	O
(	O
conjugate_fr_state_t	struct
*	O
)	O
vstate	*
;	O
state	*
->	O
iter	int
=	O
0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
conjugate_fr_iterate	function
(	O
void	O
*	O
vstate	*
,	O
gsl_multimin_function_fdf	struct
*	O
fdf	*
,	O
gsl_vector	struct
*	O
x	double
,	O
double	O
*	O
f	*
,	O
gsl_vector	struct
*	O
gradient	*
,	O
gsl_vector	struct
*	O
dx	*
)	O
{	O
conjugate_fr_state_t	struct
*	O
state	*
=	O
(	O
conjugate_fr_state_t	struct
*	O
)	O
vstate	*
;	O
gsl_vector	struct
*	O
x1	double
=	O
state	*
->	O
x1	double
;	O
gsl_vector	struct
*	O
dx1	*
=	O
state	*
->	O
dx1	*
;	O
gsl_vector	struct
*	O
x2	double
=	O
state	*
->	O
x2	double
;	O
gsl_vector	struct
*	O
p	*
=	O
state	*
->	O
p	int
;	O
gsl_vector	struct
*	O
g0	*
=	O
state	*
->	O
g0	*
;	O
double	O
pnorm	double
=	O
state	*
->	O
pnorm	double
;	O
double	O
g0norm	double
=	O
state	*
->	O
g0norm	double
;	O
double	O
fa	double
=	O
*	O
f	*
,	O
fb	double
,	O
fc	double
;	O
double	O
dir	double
;	O
double	O
stepa	double
=	O
0.0	int
,	O
stepb	double
,	O
stepc	double
=	O
state	*
->	O
step	double
,	O
tol	double
=	O
state	*
->	O
tol	double
;	O
double	O
g1norm	double
;	O
double	O
pg	double
;	O
if	O
(	O
pnorm	double
==	O
0.0	int
||	O
g0norm	double
==	O
0.0	int
)	O
{	O
gsl_vector_set_zero	function
(	O
dx	*
)	O
;	O
return	O
GSL_ENOPROG	int
;	O
}	O
gsl_blas_ddot	function
(	O
p	int
,	O
gradient	*
,	O
&	O
pg	double
)	O
;	O
dir	double
=	O
(	O
pg	double
>=	O
0.0	int
)	O
?	O
+	O
1.0	int
:	O
-	O
1.0	int
;	O
take_step	function
(	O
x	double
,	O
p	int
,	O
stepc	double
,	O
dir	double
/	O
pnorm	double
,	O
x1	double
,	O
dx	*
)	O
;	O
fc	double
=	O
GSL_MULTIMIN_FN_EVAL_F	O
(	O
fdf	*
,	O
x1	double
)	O
;	O
if	O
(	O
fc	double
<	O
fa	double
)	O
{	O
state	*
->	O
step	double
=	O
stepc	double
*	O
2.0	int
;	O
*	O
f	*
=	O
fc	double
;	O
gsl_vector_memcpy	function
(	O
x	double
,	O
x1	double
)	O
;	O
GSL_MULTIMIN_FN_EVAL_DF	O
(	O
fdf	*
,	O
x1	double
,	O
gradient	*
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
intermediate_point	function
(	O
fdf	*
,	O
x	double
,	O
p	int
,	O
dir	double
/	O
pnorm	double
,	O
pg	double
,	O
stepa	double
,	O
stepc	double
,	O
fa	double
,	O
fc	double
,	O
x1	double
,	O
dx1	*
,	O
gradient	*
,	O
&	O
stepb	double
,	O
&	O
fb	double
)	O
;	O
if	O
(	O
stepb	double
==	O
0.0	int
)	O
{	O
return	O
GSL_ENOPROG	int
;	O
}	O
minimize	function
(	O
fdf	*
,	O
x	double
,	O
p	int
,	O
dir	double
/	O
pnorm	double
,	O
stepa	double
,	O
stepb	double
,	O
stepc	double
,	O
fa	double
,	O
fb	double
,	O
fc	double
,	O
tol	double
,	O
x1	double
,	O
dx1	*
,	O
x2	double
,	O
dx	*
,	O
gradient	*
,	O
&	O
(	O
state	*
->	O
step	double
)	O
,	O
f	*
,	O
&	O
g1norm	double
)	O
;	O
gsl_vector_memcpy	function
(	O
x	double
,	O
x2	double
)	O
;	O
state	*
->	O
iter	int
=	O
(	O
state	*
->	O
iter	int
+	O
1	int
)	O
%	O
x	double
->	O
size	long
;	O
if	O
(	O
state	*
->	O
iter	int
==	O
0	int
)	O
{	O
gsl_vector_memcpy	function
(	O
p	int
,	O
gradient	*
)	O
;	O
state	*
->	O
pnorm	double
=	O
g1norm	double
;	O
}	O
else	O
{	O
double	O
beta	double
=	O
-	O
pow	function
(	O
g1norm	double
/	O
g0norm	double
,	O
2.0	int
)	O
;	O
gsl_blas_dscal	function
(	O
-	O
beta	double
,	O
p	int
)	O
;	O
gsl_blas_daxpy	function
(	O
1.0	int
,	O
gradient	*
,	O
p	int
)	O
;	O
state	*
->	O
pnorm	double
=	O
gsl_blas_dnrm2	function
(	O
p	int
)	O
;	O
}	O
state	*
->	O
g0norm	double
=	O
g1norm	double
;	O
gsl_vector_memcpy	function
(	O
g0	*
,	O
gradient	*
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
const	O
gsl_multimin_fdfminimizer_type	struct
conjugate_fr_type	struct
=	O
{	O
"conjugate_fr"	*
,	O
sizeof	O
(	O
conjugate_fr_state_t	struct
)	O
,	O
&	O
conjugate_fr_alloc	function
,	O
&	O
conjugate_fr_set	function
,	O
&	O
conjugate_fr_iterate	function
,	O
&	O
conjugate_fr_restart	function
,	O
&	O
conjugate_fr_free	function
}	O
;	O
const	O
gsl_multimin_fdfminimizer_type	struct
*	O
gsl_multimin_fdfminimizer_conjugate_fr	*
=	O
&	O
conjugate_fr_type	struct
;	O