typedef	O
struct	O
Arg_t	struct
{	O
const	O
char	O
*	O
fromname	pointer
;	O
int	O
verbose	int
;	O
MainParam_t	struct
mp	pointer
;	O
direntry_t	struct
*	O
entry	int
;	O
ClashHandling_t	struct
ch	char
;	O
}	O
Arg_t	struct
;	O
static	O
int	O
renameit	function
(	O
dos_name_t	struct
*	O
dosname	pointer
,	O
char	O
*	O
longname	pointer
UNUSEDP	O
,	O
void	O
*	O
arg0	pointer
,	O
direntry_t	struct
*	O
targetEntry	pointer
)	O
{	O
Arg_t	struct
*	O
arg	pointer
=	O
(	O
Arg_t	struct
*	O
)	O
arg0	pointer
;	O
int	O
fat	int
;	O
targetEntry	pointer
->	O
dir	pointer
=	O
arg	pointer
->	O
entry	int
->	O
dir	pointer
;	O
dosnameToDirentry	function
(	O
dosname	pointer
,	O
&	O
targetEntry	pointer
->	O
dir	pointer
)	O
;	O
if	O
(	O
IS_DIR	O
(	O
targetEntry	pointer
)	O
)	O
{	O
direntry_t	struct
*	O
movedEntry	pointer
;	O
movedEntry	pointer
=	O
getDirentry	function
(	O
arg	pointer
->	O
mp	pointer
.	O
File	pointer
)	O
;	O
if	O
(	O
movedEntry	pointer
->	O
Dir	pointer
!=	O
targetEntry	pointer
->	O
Dir	pointer
)	O
{	O
direntry_t	struct
subEntry	struct
;	O
Stream_t	struct
*	O
oldDir	pointer
;	O
initializeDirentry	function
(	O
&	O
subEntry	struct
,	O
arg	pointer
->	O
mp	pointer
.	O
File	pointer
)	O
;	O
switch	O
(	O
vfat_lookup	function
(	O
&	O
subEntry	struct
,	O
".."	pointer
,	O
2	int
,	O
ACCEPT_DIR	int
,	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
)	O
)	O
{	O
case	O
-	O
1	int
:	O
fprintf	function
(	O
stderr	pointer
,	O
" Directory has no parent entry\n"	pointer
)	O
;	O
break	O
;	O
case	O
-	O
2	int
:	O
return	O
ERROR_ONE	int
;	O
case	O
0	int
:	O
GET_DATA	O
(	O
targetEntry	pointer
->	O
Dir	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
&	O
fat	int
)	O
;	O
if	O
(	O
fat	int
==	O
fat32RootCluster	function
(	O
targetEntry	pointer
->	O
Dir	pointer
)	O
)	O
{	O
fat	int
=	O
0	int
;	O
}	O
subEntry	struct
.	O
dir	pointer
.	O
start	array
[	O
1	int
]	O
=	O
(	O
fat	int
>>	O
8	int
)	O
&	O
0xff	int
;	O
subEntry	struct
.	O
dir	pointer
.	O
start	array
[	O
0	int
]	O
=	O
fat	int
&	O
0xff	int
;	O
dir_write	function
(	O
&	O
subEntry	struct
)	O
;	O
if	O
(	O
arg	pointer
->	O
verbose	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Easy, isn't it? I wonder why DOS can't do this.\n"	pointer
)	O
;	O
}	O
break	O
;	O
}	O
wipeEntry	function
(	O
movedEntry	pointer
)	O
;	O
oldDir	pointer
=	O
movedEntry	pointer
->	O
Dir	pointer
;	O
*	O
movedEntry	pointer
=	O
*	O
targetEntry	pointer
;	O
COPY	O
(	O
targetEntry	pointer
->	O
Dir	pointer
)	O
;	O
FREE	O
(	O
&	O
oldDir	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
wipeEntry	function
(	O
arg	pointer
->	O
mp	pointer
.	O
direntry	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
rename_file	function
(	O
direntry_t	struct
*	O
entry	int
,	O
MainParam_t	struct
*	O
mp	pointer
)	O
{	O
int	O
result	int
;	O
Stream_t	struct
*	O
targetDir	pointer
;	O
char	O
*	O
shortname	pointer
;	O
const	O
char	O
*	O
longname	pointer
;	O
Arg_t	struct
*	O
arg	pointer
=	O
(	O
Arg_t	struct
*	O
)	O
(	O
mp	pointer
->	O
arg	pointer
)	O
;	O
arg	pointer
->	O
entry	int
=	O
entry	int
;	O
targetDir	pointer
=	O
mp	pointer
->	O
targetDir	pointer
;	O
if	O
(	O
targetDir	pointer
==	O
entry	int
->	O
Dir	pointer
)	O
{	O
arg	pointer
->	O
ch	char
.	O
ignore_entry	int
=	O
-	O
1	int
;	O
arg	pointer
->	O
ch	char
.	O
source	short
=	O
entry	int
->	O
entry	int
;	O
arg	pointer
->	O
ch	char
.	O
source_entry	int
=	O
entry	int
->	O
entry	int
;	O
}	O
else	O
{	O
arg	pointer
->	O
ch	char
.	O
ignore_entry	int
=	O
-	O
1	int
;	O
arg	pointer
->	O
ch	char
.	O
source	short
=	O
-	O
2	int
;	O
}	O
longname	pointer
=	O
mpPickTargetName	function
(	O
mp	pointer
)	O
;	O
shortname	pointer
=	O
0	int
;	O
result	int
=	O
mwrite_one	function
(	O
targetDir	pointer
,	O
longname	pointer
,	O
shortname	pointer
,	O
renameit	function
,	O
(	O
void	O
*	O
)	O
arg	pointer
,	O
&	O
arg	pointer
->	O
ch	char
)	O
;	O
if	O
(	O
result	int
==	O
1	int
)	O
return	O
GOT_ONE	int
;	O
else	O
return	O
ERROR_ONE	int
;	O
}	O
static	O
int	O
rename_directory	function
(	O
direntry_t	struct
*	O
entry	int
,	O
MainParam_t	struct
*	O
mp	pointer
)	O
{	O
int	O
ret	int
;	O
if	O
(	O
isSubdirOf	function
(	O
mp	pointer
->	O
targetDir	pointer
,	O
mp	pointer
->	O
File	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Cannot move directory "	pointer
)	O
;	O
fprintPwd	function
(	O
stderr	pointer
,	O
entry	int
,	O
0	int
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
" into one of its own subdirectories ("	pointer
)	O
;	O
fprintPwd	function
(	O
stderr	pointer
,	O
getDirentry	function
(	O
mp	pointer
->	O
targetDir	pointer
)	O
,	O
0	int
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
")\n"	pointer
)	O
;	O
return	O
ERROR_ONE	int
;	O
}	O
if	O
(	O
entry	int
->	O
entry	int
==	O
-	O
3	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Cannot move a root directory: "	pointer
)	O
;	O
fprintPwd	function
(	O
stderr	pointer
,	O
entry	int
,	O
0	int
)	O
;	O
return	O
ERROR_ONE	int
;	O
}	O
ret	int
=	O
rename_file	function
(	O
entry	int
,	O
mp	pointer
)	O
;	O
if	O
(	O
ret	int
&	O
ERROR_ONE	int
)	O
return	O
ret	int
;	O
return	O
ret	int
;	O
}	O
static	O
int	O
rename_oldsyntax	function
(	O
direntry_t	struct
*	O
entry	int
,	O
MainParam_t	struct
*	O
mp	pointer
)	O
{	O
int	O
result	int
;	O
Stream_t	struct
*	O
targetDir	pointer
;	O
const	O
char	O
*	O
shortname	pointer
,	O
*	O
longname	pointer
;	O
Arg_t	struct
*	O
arg	pointer
=	O
(	O
Arg_t	struct
*	O
)	O
(	O
mp	pointer
->	O
arg	pointer
)	O
;	O
arg	pointer
->	O
entry	int
=	O
entry	int
;	O
targetDir	pointer
=	O
entry	int
->	O
Dir	pointer
;	O
arg	pointer
->	O
ch	char
.	O
ignore_entry	int
=	O
-	O
1	int
;	O
arg	pointer
->	O
ch	char
.	O
source	short
=	O
entry	int
->	O
entry	int
;	O
arg	pointer
->	O
ch	char
.	O
source_entry	int
=	O
entry	int
->	O
entry	int
;	O
longname	pointer
=	O
mp	pointer
->	O
targetName	pointer
;	O
shortname	pointer
=	O
0	int
;	O
result	int
=	O
mwrite_one	function
(	O
targetDir	pointer
,	O
longname	pointer
,	O
shortname	pointer
,	O
renameit	function
,	O
(	O
void	O
*	O
)	O
arg	pointer
,	O
&	O
arg	pointer
->	O
ch	char
)	O
;	O
if	O
(	O
result	int
==	O
1	int
)	O
return	O
GOT_ONE	int
;	O
else	O
return	O
ERROR_ONE	int
;	O
}	O
static	O
void	O
usage	function
(	O
int	O
ret	int
)	O
NORETURN	O
;	O
static	O
void	O
usage	function
(	O
int	O
ret	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Mtools version %s, dated %s\n"	pointer
,	O
mversion	pointer
,	O
mdate	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Usage: %s [-vV] [-D clash_option] file targetfile\n"	pointer
,	O
progname	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"       %s [-vV] [-D clash_option] file [files...] target_directory\n"	pointer
,	O
progname	pointer
)	O
;	O
exit	function
(	O
ret	int
)	O
;	O
}	O
void	O
mmove	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
oldsyntax	int
)	O
NORETURN	O
;	O
void	O
mmove	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
oldsyntax	int
)	O
{	O
Arg_t	struct
arg	pointer
;	O
int	O
c	char
;	O
char	O
shortname	pointer
[	O
12	int
*	O
4	int
+	O
1	int
]	O
;	O
char	O
longname	pointer
[	O
4	int
*	O
MAX_VNAMELEN	O
+	O
1	int
]	O
;	O
char	O
def_drive	char
;	O
int	O
i	int
;	O
init_clash_handling	function
(	O
&	O
arg	pointer
.	O
ch	char
)	O
;	O
arg	pointer
.	O
verbose	int
=	O
0	int
;	O
if	O
(	O
helpFlag	function
(	O
argc	int
,	O
argv	pointer
)	O
)	O
usage	function
(	O
0	int
)	O
;	O
while	O
(	O
(	O
c	char
=	O
getopt	function
(	O
argc	int
,	O
argv	pointer
,	O
"i:vD:oh"	pointer
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
c	char
)	O
{	O
case	O
'i'	O
:	O
set_cmd_line_image	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'v'	O
:	O
arg	pointer
.	O
verbose	int
=	O
1	int
;	O
break	O
;	O
case	O
'o'	O
:	O
handle_clash_options	function
(	O
&	O
arg	pointer
.	O
ch	char
,	O
c	char
)	O
;	O
break	O
;	O
case	O
'D'	O
:	O
if	O
(	O
handle_clash_options	function
(	O
&	O
arg	pointer
.	O
ch	char
,	O
*	O
optarg	pointer
)	O
)	O
usage	function
(	O
1	int
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
usage	function
(	O
0	int
)	O
;	O
case	O
'?'	O
:	O
usage	function
(	O
1	int
)	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
if	O
(	O
argc	int
-	O
optind	int
<	O
2	int
)	O
usage	function
(	O
1	int
)	O
;	O
init_mp	function
(	O
&	O
arg	pointer
.	O
mp	pointer
)	O
;	O
arg	pointer
.	O
mp	pointer
.	O
arg	pointer
=	O
(	O
void	O
*	O
)	O
&	O
arg	pointer
;	O
arg	pointer
.	O
mp	pointer
.	O
openflags	int
=	O
O_RDWR	int
;	O
def_drive	char
=	O
'\0'	O
;	O
for	O
(	O
i	int
=	O
optind	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
if	O
(	O
argv	pointer
[	O
i	int
]	O
[	O
0	int
]	O
&&	O
argv	pointer
[	O
i	int
]	O
[	O
1	int
]	O
==	O
':'	O
)	O
{	O
if	O
(	O
!	O
def_drive	char
)	O
def_drive	char
=	O
ch_toupper	function
(	O
argv	pointer
[	O
i	int
]	O
[	O
0	int
]	O
)	O
;	O
else	O
if	O
(	O
def_drive	char
!=	O
ch_toupper	function
(	O
argv	pointer
[	O
i	int
]	O
[	O
0	int
]	O
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Cannot move files across different drives\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
def_drive	char
)	O
*	O
(	O
arg	pointer
.	O
mp	pointer
.	O
mcwd	array
)	O
=	O
def_drive	char
;	O
if	O
(	O
oldsyntax	int
&&	O
(	O
argc	int
-	O
optind	int
!=	O
2	int
||	O
strpbrk	function
(	O
":/"	pointer
,	O
argv	pointer
[	O
argc	int
-	O
1	int
]	O
)	O
)	O
)	O
oldsyntax	int
=	O
0	int
;	O
arg	pointer
.	O
mp	pointer
.	O
lookupflags	int
=	O
ACCEPT_PLAIN	int
|	O
ACCEPT_DIR	int
|	O
DO_OPEN_DIRS	int
|	O
NO_DOTS	int
|	O
NO_UNIX	int
;	O
if	O
(	O
!	O
oldsyntax	int
)	O
{	O
target_lookup	function
(	O
&	O
arg	pointer
.	O
mp	pointer
,	O
argv	pointer
[	O
argc	int
-	O
1	int
]	O
)	O
;	O
arg	pointer
.	O
mp	pointer
.	O
callback	pointer
=	O
rename_file	function
;	O
arg	pointer
.	O
mp	pointer
.	O
dirCallback	pointer
=	O
rename_directory	function
;	O
}	O
else	O
{	O
arg	pointer
.	O
fromname	pointer
=	O
argv	pointer
[	O
optind	int
]	O
;	O
if	O
(	O
arg	pointer
.	O
fromname	pointer
[	O
0	int
]	O
&&	O
arg	pointer
.	O
fromname	pointer
[	O
1	int
]	O
==	O
':'	O
)	O
arg	pointer
.	O
fromname	pointer
+=	O
2	int
;	O
arg	pointer
.	O
fromname	pointer
=	O
_basename	function
(	O
arg	pointer
.	O
fromname	pointer
)	O
;	O
arg	pointer
.	O
mp	pointer
.	O
targetName	pointer
=	O
strdup	function
(	O
argv	pointer
[	O
argc	int
-	O
1	int
]	O
)	O
;	O
arg	pointer
.	O
mp	pointer
.	O
callback	pointer
=	O
rename_oldsyntax	function
;	O
}	O
arg	pointer
.	O
mp	pointer
.	O
longname	pointer
.	O
data	pointer
=	O
longname	pointer
;	O
arg	pointer
.	O
mp	pointer
.	O
longname	pointer
.	O
len	long
=	O
sizeof	O
(	O
longname	pointer
)	O
;	O
longname	pointer
[	O
0	int
]	O
=	O
'\0'	O
;	O
arg	pointer
.	O
mp	pointer
.	O
shortname	pointer
.	O
data	pointer
=	O
shortname	pointer
;	O
arg	pointer
.	O
mp	pointer
.	O
shortname	pointer
.	O
len	long
=	O
sizeof	O
(	O
shortname	pointer
)	O
;	O
shortname	pointer
[	O
0	int
]	O
=	O
'\0'	O
;	O
exit	function
(	O
main_loop	function
(	O
&	O
arg	pointer
.	O
mp	pointer
,	O
argv	pointer
+	O
optind	int
,	O
argc	int
-	O
optind	int
-	O
1	int
)	O
)	O
;	O
}	O
