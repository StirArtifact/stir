const	O
char	O
proti_rcsid	array
[	O
]	O
=	O
"$Id: proti.c,v 1.36 2002/03/05 19:10:41 ian Rel $"	pointer
;	O
static	O
int	O
iIrequest_packsize	int
=	O
IREQUEST_PACKSIZE	O
;	O
static	O
int	O
iIrequest_winsize	int
=	O
IREQUEST_WINSIZE	O
;	O
static	O
int	O
iIremote_packsize	int
;	O
static	O
int	O
iIalc_packsize	int
;	O
static	O
int	O
iIforced_remote_packsize	int
=	O
0	int
;	O
static	O
int	O
iIremote_winsize	int
;	O
int	O
cIsync_timeout	int
=	O
CSYNC_TIMEOUT	O
;	O
static	O
int	O
cIsync_retries	int
=	O
CSYNC_RETRIES	O
;	O
static	O
int	O
cItimeout	int
=	O
CTIMEOUT	O
;	O
static	O
int	O
cIwindow_timeout	int
=	O
CTIMEOUT	O
;	O
static	O
int	O
cIretries	int
=	O
CRETRIES	O
;	O
static	O
int	O
cIerrors	int
=	O
CERRORS	O
;	O
static	O
int	O
cIerror_decay	int
=	O
CERROR_DECAY	O
;	O
static	O
int	O
cIack_frequency	int
=	O
0	int
;	O
const	O
char	O
*	O
zJavoid_parameter	pointer
=	O
ZAVOID	pointer
;	O
static	O
boolean	int
(	O
*	O
pfIsend	pointer
)	O
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
const	O
char	O
*	O
zsend	pointer
,	O
size_t	long
csend	long
,	O
boolean	int
fdoread	int
)	O
)	O
;	O
static	O
boolean	int
(	O
*	O
pfIreceive	pointer
)	O
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
size_t	long
cneed	long
,	O
size_t	long
*	O
pcrec	pointer
,	O
int	O
ctimeout	int
,	O
boolean	int
freport	int
)	O
)	O
;	O
static	O
int	O
iIsendseq	int
;	O
static	O
int	O
iIrecseq	int
;	O
static	O
int	O
iIlocal_ack	int
;	O
static	O
int	O
iIremote_ack	int
;	O
static	O
long	O
iIsendpos	long
;	O
static	O
long	O
iIrecpos	long
;	O
static	O
boolean	int
fIclosing	int
;	O
static	O
char	O
*	O
azIsendbuffers	array
[	O
IMAXSEQ	int
]	O
;	O
static	O
char	O
*	O
azIrecbuffers	array
[	O
IMAXSEQ	int
]	O
;	O
static	O
boolean	int
afInaked	array
[	O
IMAXSEQ	int
]	O
;	O
static	O
int	O
cIsyncs	int
;	O
static	O
long	O
cIsent_packets	long
;	O
static	O
long	O
cIreceived_packets	long
;	O
static	O
long	O
cIresent_packets	long
;	O
static	O
long	O
cIbad_hdr	long
;	O
static	O
long	O
cIbad_order	long
;	O
static	O
long	O
cIbad_cksum	long
;	O
static	O
long	O
cIremote_rejects	long
;	O
struct	O
uuconf_cmdtab	struct
asIproto_params	array
[	O
]	O
=	O
{	O
{	O
"packet-size"	pointer
,	O
UUCONF_CMDTABTYPE_INT	O
,	O
(	O
pointer	pointer
)	O
&	O
iIrequest_packsize	int
,	O
NULL	O
}	O
,	O
{	O
"window"	pointer
,	O
UUCONF_CMDTABTYPE_INT	O
,	O
(	O
pointer	pointer
)	O
&	O
iIrequest_winsize	int
,	O
NULL	O
}	O
,	O
{	O
"remote-packet-size"	pointer
,	O
UUCONF_CMDTABTYPE_INT	O
,	O
(	O
pointer	pointer
)	O
&	O
iIforced_remote_packsize	int
,	O
NULL	O
}	O
,	O
{	O
"sync-timeout"	pointer
,	O
UUCONF_CMDTABTYPE_INT	O
,	O
(	O
pointer	pointer
)	O
&	O
cIsync_timeout	int
,	O
NULL	O
}	O
,	O
{	O
"sync-retries"	pointer
,	O
UUCONF_CMDTABTYPE_INT	O
,	O
(	O
pointer	pointer
)	O
&	O
cIsync_retries	int
,	O
NULL	O
}	O
,	O
{	O
"timeout"	pointer
,	O
UUCONF_CMDTABTYPE_INT	O
,	O
(	O
pointer	pointer
)	O
&	O
cItimeout	int
,	O
NULL	O
}	O
,	O
{	O
"retries"	pointer
,	O
UUCONF_CMDTABTYPE_INT	O
,	O
(	O
pointer	pointer
)	O
&	O
cIretries	int
,	O
NULL	O
}	O
,	O
{	O
"errors"	pointer
,	O
UUCONF_CMDTABTYPE_INT	O
,	O
(	O
pointer	pointer
)	O
&	O
cIerrors	int
,	O
NULL	O
}	O
,	O
{	O
"error-decay"	pointer
,	O
UUCONF_CMDTABTYPE_INT	O
,	O
(	O
pointer	pointer
)	O
&	O
cIerror_decay	int
,	O
NULL	O
}	O
,	O
{	O
"ack-frequency"	pointer
,	O
UUCONF_CMDTABTYPE_INT	O
,	O
(	O
pointer	pointer
)	O
&	O
cIack_frequency	int
,	O
NULL	O
}	O
,	O
{	O
"avoid"	pointer
,	O
UUCONF_CMDTABTYPE_STRING	O
,	O
(	O
pointer	pointer
)	O
&	O
zJavoid_parameter	pointer
,	O
NULL	O
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
NULL	O
}	O
}	O
;	O
static	O
boolean	int
finak	function
P	O
(	O
(	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
,	O
int	O
iseq	int
)	O
)	O
;	O
static	O
boolean	int
firesend	function
P	O
(	O
(	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
)	O
)	O
;	O
static	O
boolean	int
fiwindow_wait	function
P	O
(	O
(	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
)	O
)	O
;	O
static	O
boolean	int
fiwait_for_packet	function
P	O
(	O
(	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
,	O
int	O
ctimeout	int
,	O
int	O
cretries	int
,	O
boolean	int
fone	int
,	O
boolean	int
*	O
ftimedout	pointer
)	O
)	O
;	O
static	O
boolean	int
ficheck_errors	function
P	O
(	O
(	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
)	O
)	O
;	O
static	O
boolean	int
fiprocess_data	function
P	O
(	O
(	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
,	O
boolean	int
*	O
pfexit	pointer
,	O
boolean	int
*	O
pffound	pointer
,	O
size_t	long
*	O
pcneed	pointer
)	O
)	O
;	O
static	O
boolean	int
fiprocess_packet	function
P	O
(	O
(	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
,	O
const	O
char	O
*	O
zhdr	pointer
,	O
const	O
char	O
*	O
zfirst	pointer
,	O
int	O
cfirst	long
,	O
const	O
char	O
*	O
zsecond	pointer
,	O
int	O
csecond	long
,	O
boolean	int
*	O
pfexit	pointer
)	O
)	O
;	O
boolean	int
fistart	function
(	O
qdaemon	pointer
,	O
pzlog	pointer
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
char	O
*	O
*	O
pzlog	pointer
;	O
{	O
return	O
fijstart	function
(	O
qdaemon	pointer
,	O
pzlog	pointer
,	O
IMAXPACKSIZE	O
,	O
fsend_data	function
,	O
freceive_data	function
)	O
;	O
}	O
boolean	int
fijstart	function
(	O
qdaemon	pointer
,	O
pzlog	pointer
,	O
imaxpacksize	int
,	O
pfsend	pointer
,	O
pfreceive	pointer
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
char	O
*	O
*	O
pzlog	pointer
;	O
int	O
imaxpacksize	int
;	O
boolean	int
(	O
*	O
pfsend	pointer
)	O
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
const	O
char	O
*	O
zsend	pointer
,	O
size_t	long
csend	long
,	O
boolean	int
fdoread	int
)	O
)	O
;	O
boolean	int
(	O
*	O
pfreceive	pointer
)	O
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
size_t	long
cneed	long
,	O
size_t	long
*	O
pcrec	pointer
,	O
int	O
ctimeout	int
,	O
boolean	int
freport	int
)	O
)	O
;	O
{	O
char	O
ab	array
[	O
CHDRLEN	O
+	O
4	int
+	O
CCKSUMLEN	O
]	O
;	O
unsigned	O
long	O
icksum	long
;	O
int	O
ctries	int
;	O
int	O
csyncs	int
;	O
long	O
ibaud	long
;	O
*	O
pzlog	pointer
=	O
NULL	O
;	O
pfIsend	pointer
=	O
pfsend	pointer
;	O
pfIreceive	pointer
=	O
pfreceive	pointer
;	O
if	O
(	O
iIforced_remote_packsize	int
<=	O
0	int
||	O
iIforced_remote_packsize	int
>	O
imaxpacksize	int
)	O
iIforced_remote_packsize	int
=	O
0	int
;	O
else	O
iIremote_packsize	int
=	O
iIforced_remote_packsize	int
;	O
iIalc_packsize	int
=	O
0	int
;	O
iIsendseq	int
=	O
1	int
;	O
iIrecseq	int
=	O
0	int
;	O
iIlocal_ack	int
=	O
0	int
;	O
iIremote_ack	int
=	O
0	int
;	O
iIsendpos	long
=	O
0	int
;	O
iIrecpos	long
=	O
0	int
;	O
fIclosing	int
=	O
FALSE	O
;	O
cIsent_packets	long
=	O
0	int
;	O
cIreceived_packets	long
=	O
0	int
;	O
cIresent_packets	long
=	O
0	int
;	O
cIbad_hdr	long
=	O
0	int
;	O
cIbad_order	long
=	O
0	int
;	O
cIbad_cksum	long
=	O
0	int
;	O
cIremote_rejects	long
=	O
0	int
;	O
if	O
(	O
iIrequest_packsize	int
<	O
0	int
||	O
iIrequest_packsize	int
>	O
imaxpacksize	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Illegal protocol '%c' packet size; using %d"	pointer
,	O
qdaemon	pointer
->	O
qproto	pointer
->	O
bname	char
,	O
imaxpacksize	int
)	O
;	O
iIrequest_packsize	int
=	O
imaxpacksize	int
;	O
}	O
if	O
(	O
iIrequest_winsize	int
<	O
0	int
||	O
iIrequest_winsize	int
>	O
IMAXSEQ	int
/	O
2	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Illegal protocol '%c' window size; using %d"	pointer
,	O
qdaemon	pointer
->	O
qproto	pointer
->	O
bname	char
,	O
IREQUEST_WINSIZE	O
)	O
;	O
iIrequest_winsize	int
=	O
IREQUEST_WINSIZE	O
;	O
}	O
if	O
(	O
cIack_frequency	int
<=	O
0	int
||	O
cIack_frequency	int
>=	O
iIrequest_winsize	int
)	O
cIack_frequency	int
=	O
iIrequest_winsize	int
/	O
2	int
;	O
ab	array
[	O
IHDR_INTRO	O
]	O
=	O
IINTRO	O
;	O
ab	array
[	O
IHDR_LOCAL	O
]	O
=	O
ab	array
[	O
IHDR_REMOTE	O
]	O
=	O
IHDRWIN_SET	O
(	O
0	int
,	O
0	int
)	O
;	O
ab	array
[	O
IHDR_CONTENTS1	O
]	O
=	O
IHDRCON_SET1	O
(	O
SYNC	O
,	O
qdaemon	pointer
->	O
fcaller	int
,	O
4	int
)	O
;	O
ab	array
[	O
IHDR_CONTENTS2	O
]	O
=	O
IHDRCON_SET2	O
(	O
SYNC	O
,	O
qdaemon	pointer
->	O
fcaller	int
,	O
4	int
)	O
;	O
ab	array
[	O
IHDR_CHECK	O
]	O
=	O
IHDRCHECK_VAL	O
(	O
ab	array
)	O
;	O
ab	array
[	O
CHDRLEN	O
+	O
0	int
]	O
=	O
(	O
iIrequest_packsize	int
>>	O
8	int
)	O
&	O
0xff	int
;	O
ab	array
[	O
CHDRLEN	O
+	O
1	int
]	O
=	O
iIrequest_packsize	int
&	O
0xff	int
;	O
ab	array
[	O
CHDRLEN	O
+	O
2	int
]	O
=	O
iIrequest_winsize	int
;	O
ab	array
[	O
CHDRLEN	O
+	O
3	int
]	O
=	O
qdaemon	pointer
->	O
cchans	int
;	O
icksum	long
=	O
icrc	function
(	O
ab	array
+	O
CHDRLEN	O
,	O
4	int
,	O
ICRCINIT	O
)	O
;	O
UCKSUM_SET	O
(	O
ab	array
+	O
CHDRLEN	O
+	O
4	int
,	O
icksum	long
)	O
;	O
csyncs	int
=	O
cIsyncs	int
;	O
ctries	int
=	O
0	int
;	O
while	O
(	O
TRUE	O
)	O
{	O
boolean	int
ftimedout	pointer
;	O
DEBUG_MESSAGE3	O
(	O
DEBUG_PROTO	O
,	O
"fistart: Sending SYNC packsize %d winsize %d channels %d"	pointer
,	O
iIrequest_packsize	int
,	O
iIrequest_winsize	int
,	O
qdaemon	pointer
->	O
cchans	int
)	O
;	O
if	O
(	O
!	O
(	O
*	O
pfIsend	pointer
)	O
(	O
qdaemon	pointer
->	O
qconn	pointer
,	O
ab	array
,	O
CHDRLEN	O
+	O
4	int
+	O
CCKSUMLEN	O
,	O
TRUE	O
)	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
fiwait_for_packet	function
(	O
qdaemon	pointer
,	O
cIsync_timeout	int
,	O
0	int
,	O
FALSE	O
,	O
&	O
ftimedout	pointer
)	O
)	O
{	O
if	O
(	O
csyncs	int
!=	O
cIsyncs	int
)	O
break	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
ftimedout	pointer
)	O
return	O
FALSE	O
;	O
++	O
ctries	int
;	O
if	O
(	O
ctries	int
>	O
cIsync_retries	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Protocol startup failed"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
}	O
ibaud	long
=	O
iconn_baud	function
(	O
qdaemon	pointer
->	O
qconn	pointer
)	O
;	O
if	O
(	O
ibaud	long
==	O
0	int
)	O
cIwindow_timeout	int
=	O
cItimeout	int
;	O
else	O
{	O
cIwindow_timeout	int
=	O
(	O
(	O
5	int
*	O
iIremote_packsize	int
*	O
iIremote_winsize	int
)	O
/	O
ibaud	long
+	O
cItimeout	int
)	O
;	O
}	O
if	O
(	O
!	O
qdaemon	pointer
->	O
fcaller	int
)	O
{	O
++	O
cItimeout	int
;	O
++	O
cIwindow_timeout	int
;	O
}	O
if	O
(	O
iIremote_packsize	int
>	O
imaxpacksize	int
)	O
iIremote_packsize	int
=	O
imaxpacksize	int
;	O
do	O
{	O
int	O
iseq	int
;	O
for	O
(	O
iseq	int
=	O
0	int
;	O
iseq	int
<	O
IMAXSEQ	int
;	O
iseq	int
++	O
)	O
{	O
azIrecbuffers	array
[	O
iseq	int
]	O
=	O
NULL	O
;	O
afInaked	array
[	O
iseq	int
]	O
=	O
FALSE	O
;	O
azIsendbuffers	array
[	O
iseq	int
]	O
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
iIremote_packsize	int
+	O
CHDRSKIPLEN	O
+	O
CCKSUMLEN	O
)	O
;	O
if	O
(	O
azIsendbuffers	array
[	O
iseq	int
]	O
==	O
NULL	O
)	O
{	O
int	O
ifree	int
;	O
for	O
(	O
ifree	int
=	O
0	int
;	O
ifree	int
<	O
iseq	int
;	O
ifree	int
++	O
)	O
free	function
(	O
(	O
pointer	pointer
)	O
azIsendbuffers	array
[	O
ifree	int
]	O
)	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
iseq	int
>=	O
IMAXSEQ	int
)	O
{	O
*	O
pzlog	pointer
=	O
zbufalc	function
(	O
sizeof	O
"protocol '' sending packet/window / receiving /"	pointer
+	O
64	int
)	O
;	O
sprintf	function
(	O
*	O
pzlog	pointer
,	O
"protocol '%c' sending packet/window %d/%d receiving %d/%d"	pointer
,	O
qdaemon	pointer
->	O
qproto	pointer
->	O
bname	char
,	O
(	O
int	O
)	O
iIremote_packsize	int
,	O
(	O
int	O
)	O
iIremote_winsize	int
,	O
(	O
int	O
)	O
iIrequest_packsize	int
,	O
(	O
int	O
)	O
iIrequest_winsize	int
)	O
;	O
iIalc_packsize	int
=	O
iIremote_packsize	int
;	O
return	O
TRUE	O
;	O
}	O
iIremote_packsize	int
>>=	O
1	int
;	O
}	O
while	O
(	O
iIremote_packsize	int
>	O
200	int
)	O
;	O
ulog	function
(	O
LOG_ERROR	int
,	O
"'%c' protocol startup failed; insufficient memory for packets"	pointer
,	O
qdaemon	pointer
->	O
qproto	pointer
->	O
bname	char
)	O
;	O
return	O
FALSE	O
;	O
}	O
boolean	int
fishutdown	function
(	O
qdaemon	pointer
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
{	O
char	O
*	O
z	pointer
;	O
size_t	long
clen	long
;	O
fIclosing	int
=	O
TRUE	O
;	O
z	pointer
=	O
zigetspace	function
(	O
qdaemon	pointer
,	O
&	O
clen	long
)	O
-	O
CHDRLEN	O
;	O
z	pointer
[	O
IHDR_INTRO	O
]	O
=	O
IINTRO	O
;	O
z	pointer
[	O
IHDR_LOCAL	O
]	O
=	O
IHDRWIN_SET	O
(	O
iIsendseq	int
,	O
0	int
)	O
;	O
z	pointer
[	O
IHDR_REMOTE	O
]	O
=	O
IHDRWIN_SET	O
(	O
iIrecseq	int
,	O
0	int
)	O
;	O
iIlocal_ack	int
=	O
iIrecseq	int
;	O
z	pointer
[	O
IHDR_CONTENTS1	O
]	O
=	O
IHDRCON_SET1	O
(	O
CLOSE	O
,	O
qdaemon	pointer
->	O
fcaller	int
,	O
0	int
)	O
;	O
z	pointer
[	O
IHDR_CONTENTS2	O
]	O
=	O
IHDRCON_SET2	O
(	O
CLOSE	O
,	O
qdaemon	pointer
->	O
fcaller	int
,	O
0	int
)	O
;	O
z	pointer
[	O
IHDR_CHECK	O
]	O
=	O
IHDRCHECK_VAL	O
(	O
z	pointer
)	O
;	O
DEBUG_MESSAGE0	O
(	O
DEBUG_PROTO	O
,	O
"fishutdown: Sending CLOSE"	pointer
)	O
;	O
if	O
(	O
!	O
(	O
*	O
pfIsend	pointer
)	O
(	O
qdaemon	pointer
->	O
qconn	pointer
,	O
z	pointer
,	O
CHDRLEN	O
,	O
FALSE	O
)	O
)	O
return	O
FALSE	O
;	O
ulog	function
(	O
LOG_NORMAL	int
,	O
"Protocol '%c' packets: sent %ld, resent %ld, received %ld"	pointer
,	O
qdaemon	pointer
->	O
qproto	pointer
->	O
bname	char
,	O
cIsent_packets	long
,	O
cIresent_packets	long
,	O
cIreceived_packets	long
)	O
;	O
if	O
(	O
cIbad_hdr	long
!=	O
0	int
||	O
cIbad_cksum	long
!=	O
0	int
||	O
cIbad_order	long
!=	O
0	int
||	O
cIremote_rejects	long
!=	O
0	int
)	O
ulog	function
(	O
LOG_NORMAL	int
,	O
"Errors: header %ld, checksum %ld, order %ld, remote rejects %ld"	pointer
,	O
cIbad_hdr	long
,	O
cIbad_cksum	long
,	O
cIbad_order	long
,	O
cIremote_rejects	long
)	O
;	O
iIrequest_packsize	int
=	O
IREQUEST_PACKSIZE	O
;	O
iIrequest_winsize	int
=	O
IREQUEST_WINSIZE	O
;	O
iIforced_remote_packsize	int
=	O
0	int
;	O
cIsync_timeout	int
=	O
CSYNC_TIMEOUT	O
;	O
cIsync_retries	int
=	O
CSYNC_RETRIES	O
;	O
cItimeout	int
=	O
CTIMEOUT	O
;	O
cIwindow_timeout	int
=	O
CTIMEOUT	O
;	O
cIretries	int
=	O
CRETRIES	O
;	O
cIerrors	int
=	O
CERRORS	O
;	O
cIerror_decay	int
=	O
CERROR_DECAY	O
;	O
cIack_frequency	int
=	O
0	int
;	O
zJavoid_parameter	pointer
=	O
ZAVOID	pointer
;	O
return	O
TRUE	O
;	O
}	O
boolean	int
fisendcmd	function
(	O
qdaemon	pointer
,	O
z	pointer
,	O
ilocal	int
,	O
iremote	int
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
const	O
char	O
*	O
z	pointer
;	O
int	O
ilocal	int
;	O
int	O
iremote	int
;	O
{	O
size_t	long
clen	long
;	O
DEBUG_MESSAGE1	O
(	O
DEBUG_UUCP_PROTO	O
,	O
"fisendcmd: Sending command \"%s\""	pointer
,	O
z	pointer
)	O
;	O
clen	long
=	O
strlen	function
(	O
z	pointer
)	O
;	O
while	O
(	O
TRUE	O
)	O
{	O
char	O
*	O
zpacket	pointer
;	O
size_t	long
csize	long
;	O
zpacket	pointer
=	O
zigetspace	function
(	O
qdaemon	pointer
,	O
&	O
csize	long
)	O
;	O
if	O
(	O
clen	long
<	O
csize	long
)	O
{	O
memcpy	function
(	O
zpacket	pointer
,	O
z	pointer
,	O
clen	long
+	O
1	int
)	O
;	O
return	O
fisenddata	function
(	O
qdaemon	pointer
,	O
zpacket	pointer
,	O
clen	long
+	O
1	int
,	O
ilocal	int
,	O
iremote	int
,	O
(	O
long	O
)	O
-	O
1	int
)	O
;	O
}	O
memcpy	function
(	O
zpacket	pointer
,	O
z	pointer
,	O
csize	long
)	O
;	O
z	pointer
+=	O
csize	long
;	O
clen	long
-=	O
csize	long
;	O
if	O
(	O
!	O
fisenddata	function
(	O
qdaemon	pointer
,	O
zpacket	pointer
,	O
csize	long
,	O
ilocal	int
,	O
iremote	int
,	O
(	O
long	O
)	O
-	O
1	int
)	O
)	O
return	O
FALSE	O
;	O
}	O
}	O
static	O
boolean	int
finak	function
(	O
qdaemon	pointer
,	O
iseq	int
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
int	O
iseq	int
;	O
{	O
char	O
abnak	array
[	O
CHDRLEN	O
]	O
;	O
abnak	array
[	O
IHDR_INTRO	O
]	O
=	O
IINTRO	O
;	O
abnak	array
[	O
IHDR_LOCAL	O
]	O
=	O
IHDRWIN_SET	O
(	O
iseq	int
,	O
0	int
)	O
;	O
abnak	array
[	O
IHDR_REMOTE	O
]	O
=	O
IHDRWIN_SET	O
(	O
iIrecseq	int
,	O
0	int
)	O
;	O
iIlocal_ack	int
=	O
iIrecseq	int
;	O
abnak	array
[	O
IHDR_CONTENTS1	O
]	O
=	O
IHDRCON_SET1	O
(	O
NAK	O
,	O
qdaemon	pointer
->	O
fcaller	int
,	O
0	int
)	O
;	O
abnak	array
[	O
IHDR_CONTENTS2	O
]	O
=	O
IHDRCON_SET2	O
(	O
NAK	O
,	O
qdaemon	pointer
->	O
fcaller	int
,	O
0	int
)	O
;	O
abnak	array
[	O
IHDR_CHECK	O
]	O
=	O
IHDRCHECK_VAL	O
(	O
abnak	array
)	O
;	O
afInaked	array
[	O
iseq	int
]	O
=	O
TRUE	O
;	O
DEBUG_MESSAGE1	O
(	O
DEBUG_PROTO	O
|	O
DEBUG_ABNORMAL	O
,	O
"finak: Sending NAK %d"	pointer
,	O
iseq	int
)	O
;	O
return	O
(	O
*	O
pfIsend	pointer
)	O
(	O
qdaemon	pointer
->	O
qconn	pointer
,	O
abnak	array
,	O
CHDRLEN	O
,	O
TRUE	O
)	O
;	O
}	O
static	O
boolean	int
firesend	function
(	O
qdaemon	pointer
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
{	O
int	O
iseq	int
;	O
char	O
*	O
zhdr	pointer
;	O
size_t	long
clen	long
;	O
iseq	int
=	O
INEXTSEQ	O
(	O
iIremote_ack	int
)	O
;	O
if	O
(	O
iseq	int
==	O
iIsendseq	int
)	O
{	O
return	O
TRUE	O
;	O
}	O
DEBUG_MESSAGE1	O
(	O
DEBUG_PROTO	O
|	O
DEBUG_ABNORMAL	O
,	O
"firesend: Resending packet %d"	pointer
,	O
iseq	int
)	O
;	O
zhdr	pointer
=	O
azIsendbuffers	array
[	O
iseq	int
]	O
+	O
CHDROFFSET	O
;	O
if	O
(	O
IHDRWIN_GETSEQ	O
(	O
zhdr	pointer
[	O
IHDR_REMOTE	O
]	O
)	O
!=	O
iIrecseq	int
)	O
{	O
int	O
iremote	int
;	O
iremote	int
=	O
IHDRWIN_GETCHAN	O
(	O
zhdr	pointer
[	O
IHDR_REMOTE	O
]	O
)	O
;	O
zhdr	pointer
[	O
IHDR_REMOTE	O
]	O
=	O
IHDRWIN_SET	O
(	O
iIrecseq	int
,	O
iremote	int
)	O
;	O
zhdr	pointer
[	O
IHDR_CHECK	O
]	O
=	O
IHDRCHECK_VAL	O
(	O
zhdr	pointer
)	O
;	O
iIlocal_ack	int
=	O
iIrecseq	int
;	O
}	O
++	O
cIresent_packets	long
;	O
clen	long
=	O
CHDRCON_GETBYTES	O
(	O
zhdr	pointer
[	O
IHDR_CONTENTS1	O
]	O
,	O
zhdr	pointer
[	O
IHDR_CONTENTS2	O
]	O
)	O
;	O
return	O
(	O
*	O
pfIsend	pointer
)	O
(	O
qdaemon	pointer
->	O
qconn	pointer
,	O
zhdr	pointer
,	O
CHDRLEN	O
+	O
clen	long
+	O
(	O
clen	long
>	O
0	int
?	O
CCKSUMLEN	O
:	O
0	int
)	O
,	O
TRUE	O
)	O
;	O
}	O
static	O
boolean	int
fiwindow_wait	function
(	O
qdaemon	pointer
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
{	O
while	O
(	O
CSEQDIFF	O
(	O
iIsendseq	int
,	O
iIremote_ack	int
)	O
>	O
iIremote_winsize	int
)	O
{	O
DEBUG_MESSAGE0	O
(	O
DEBUG_PROTO	O
,	O
"fiwindow_wait: Waiting for ACK"	pointer
)	O
;	O
if	O
(	O
!	O
fiwait_for_packet	function
(	O
qdaemon	pointer
,	O
cIwindow_timeout	int
,	O
cIretries	int
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
)	O
return	O
FALSE	O
;	O
}	O
return	O
TRUE	O
;	O
}	O
char	O
*	O
zigetspace	function
(	O
qdaemon	pointer
,	O
pclen	pointer
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
ATTRIBUTE_UNUSED	O
;	O
size_t	long
*	O
pclen	pointer
;	O
{	O
*	O
pclen	pointer
=	O
iIremote_packsize	int
;	O
return	O
azIsendbuffers	array
[	O
iIsendseq	int
]	O
+	O
CHDRSKIPLEN	O
;	O
}	O
boolean	int
fisenddata	function
(	O
qdaemon	pointer
,	O
zdata	pointer
,	O
cdata	long
,	O
ilocal	int
,	O
iremote	int
,	O
ipos	long
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
char	O
*	O
zdata	pointer
;	O
size_t	long
cdata	long
;	O
int	O
ilocal	int
;	O
int	O
iremote	int
;	O
long	O
ipos	long
;	O
{	O
char	O
*	O
zhdr	pointer
;	O
unsigned	O
long	O
icksum	long
;	O
boolean	int
fret	int
;	O
if	O
(	O
ilocal	int
<	O
0	int
||	O
ilocal	int
>=	O
IMAXICHAN	O
||	O
iremote	int
<	O
0	int
||	O
iremote	int
>=	O
IMAXICHAN	O
)	O
ulog	function
(	O
LOG_FATAL	int
,	O
"fisenddata: ilocal %d iremote %d"	pointer
,	O
ilocal	int
,	O
iremote	int
)	O
;	O
if	O
(	O
ipos	long
!=	O
iIsendpos	long
&&	O
ipos	long
!=	O
(	O
long	O
)	O
-	O
1	int
)	O
{	O
int	O
inext	int
;	O
char	O
*	O
zspos	pointer
;	O
inext	int
=	O
INEXTSEQ	O
(	O
iIsendseq	int
)	O
;	O
zspos	pointer
=	O
azIsendbuffers	array
[	O
inext	int
]	O
;	O
azIsendbuffers	array
[	O
inext	int
]	O
=	O
zdata	pointer
-	O
CHDRSKIPLEN	O
;	O
azIsendbuffers	array
[	O
iIsendseq	int
]	O
=	O
zspos	pointer
;	O
zspos	pointer
+=	O
CHDROFFSET	O
;	O
zspos	pointer
[	O
IHDR_INTRO	O
]	O
=	O
IINTRO	O
;	O
zspos	pointer
[	O
IHDR_LOCAL	O
]	O
=	O
IHDRWIN_SET	O
(	O
iIsendseq	int
,	O
0	int
)	O
;	O
zspos	pointer
[	O
IHDR_REMOTE	O
]	O
=	O
IHDRWIN_SET	O
(	O
iIrecseq	int
,	O
0	int
)	O
;	O
iIlocal_ack	int
=	O
iIrecseq	int
;	O
zspos	pointer
[	O
IHDR_CONTENTS1	O
]	O
=	O
IHDRCON_SET1	O
(	O
SPOS	O
,	O
qdaemon	pointer
->	O
fcaller	int
,	O
CCKSUMLEN	O
)	O
;	O
zspos	pointer
[	O
IHDR_CONTENTS2	O
]	O
=	O
IHDRCON_SET2	O
(	O
SPOS	O
,	O
qdaemon	pointer
->	O
fcaller	int
,	O
CCKSUMLEN	O
)	O
;	O
zspos	pointer
[	O
IHDR_CHECK	O
]	O
=	O
IHDRCHECK_VAL	O
(	O
zspos	pointer
)	O
;	O
UCKSUM_SET	O
(	O
zspos	pointer
+	O
CHDRLEN	O
,	O
(	O
unsigned	O
long	O
)	O
ipos	long
)	O
;	O
icksum	long
=	O
icrc	function
(	O
zspos	pointer
+	O
CHDRLEN	O
,	O
CCKSUMLEN	O
,	O
ICRCINIT	O
)	O
;	O
UCKSUM_SET	O
(	O
zspos	pointer
+	O
CHDRLEN	O
+	O
CCKSUMLEN	O
,	O
icksum	long
)	O
;	O
if	O
(	O
iIremote_winsize	int
>	O
0	int
&&	O
CSEQDIFF	O
(	O
iIsendseq	int
,	O
iIremote_ack	int
)	O
>	O
iIremote_winsize	int
)	O
{	O
if	O
(	O
!	O
fiwindow_wait	function
(	O
qdaemon	pointer
)	O
)	O
return	O
FALSE	O
;	O
}	O
DEBUG_MESSAGE1	O
(	O
DEBUG_PROTO	O
,	O
"fisenddata: Sending SPOS %ld"	pointer
,	O
ipos	long
)	O
;	O
if	O
(	O
!	O
(	O
*	O
pfIsend	pointer
)	O
(	O
qdaemon	pointer
->	O
qconn	pointer
,	O
zspos	pointer
,	O
CHDRLEN	O
+	O
CCKSUMLEN	O
+	O
CCKSUMLEN	O
,	O
TRUE	O
)	O
)	O
return	O
FALSE	O
;	O
iIsendseq	int
=	O
INEXTSEQ	O
(	O
iIsendseq	int
)	O
;	O
iIsendpos	long
=	O
ipos	long
;	O
}	O
zhdr	pointer
=	O
zdata	pointer
-	O
CHDRLEN	O
;	O
zhdr	pointer
[	O
IHDR_INTRO	O
]	O
=	O
IINTRO	O
;	O
zhdr	pointer
[	O
IHDR_LOCAL	O
]	O
=	O
IHDRWIN_SET	O
(	O
iIsendseq	int
,	O
ilocal	int
)	O
;	O
zhdr	pointer
[	O
IHDR_CONTENTS1	O
]	O
=	O
IHDRCON_SET1	O
(	O
DATA	O
,	O
qdaemon	pointer
->	O
fcaller	int
,	O
cdata	long
)	O
;	O
zhdr	pointer
[	O
IHDR_CONTENTS2	O
]	O
=	O
IHDRCON_SET2	O
(	O
DATA	O
,	O
qdaemon	pointer
->	O
fcaller	int
,	O
cdata	long
)	O
;	O
if	O
(	O
cdata	long
>	O
0	int
)	O
{	O
icksum	long
=	O
icrc	function
(	O
zdata	pointer
,	O
cdata	long
,	O
ICRCINIT	O
)	O
;	O
UCKSUM_SET	O
(	O
zdata	pointer
+	O
cdata	long
,	O
icksum	long
)	O
;	O
}	O
if	O
(	O
iIremote_winsize	int
>	O
0	int
&&	O
CSEQDIFF	O
(	O
iIsendseq	int
,	O
iIremote_ack	int
)	O
>	O
iIremote_winsize	int
)	O
{	O
if	O
(	O
!	O
fiwindow_wait	function
(	O
qdaemon	pointer
)	O
)	O
return	O
FALSE	O
;	O
}	O
zhdr	pointer
[	O
IHDR_REMOTE	O
]	O
=	O
IHDRWIN_SET	O
(	O
iIrecseq	int
,	O
iremote	int
)	O
;	O
iIlocal_ack	int
=	O
iIrecseq	int
;	O
zhdr	pointer
[	O
IHDR_CHECK	O
]	O
=	O
IHDRCHECK_VAL	O
(	O
zhdr	pointer
)	O
;	O
DEBUG_MESSAGE4	O
(	O
DEBUG_PROTO	O
,	O
"fisenddata: Sending packet %d size %d local %d remote %d"	pointer
,	O
iIsendseq	int
,	O
(	O
int	O
)	O
cdata	long
,	O
ilocal	int
,	O
iremote	int
)	O
;	O
iIsendseq	int
=	O
INEXTSEQ	O
(	O
iIsendseq	int
)	O
;	O
++	O
cIsent_packets	long
;	O
fret	int
=	O
(	O
*	O
pfIsend	pointer
)	O
(	O
qdaemon	pointer
->	O
qconn	pointer
,	O
zhdr	pointer
,	O
cdata	long
+	O
CHDRLEN	O
+	O
(	O
cdata	long
>	O
0	int
?	O
CCKSUMLEN	O
:	O
0	int
)	O
,	O
TRUE	O
)	O
;	O
iIsendpos	long
+=	O
cdata	long
;	O
if	O
(	O
fret	int
&&	O
iPrecstart	int
!=	O
iPrecend	int
)	O
{	O
boolean	int
fexit	int
;	O
fret	int
=	O
fiprocess_data	function
(	O
qdaemon	pointer
,	O
&	O
fexit	int
,	O
(	O
boolean	int
*	O
)	O
NULL	O
,	O
(	O
size_t	long
*	O
)	O
NULL	O
)	O
;	O
}	O
return	O
fret	int
;	O
}	O
boolean	int
fiwait	function
(	O
qdaemon	pointer
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
{	O
return	O
fiwait_for_packet	function
(	O
qdaemon	pointer
,	O
cItimeout	int
,	O
cIretries	int
,	O
FALSE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
}	O
static	O
boolean	int
fiwait_for_packet	function
(	O
qdaemon	pointer
,	O
ctimeout	int
,	O
cretries	int
,	O
fone	int
,	O
pftimedout	pointer
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
int	O
ctimeout	int
;	O
int	O
cretries	int
;	O
boolean	int
fone	int
;	O
boolean	int
*	O
pftimedout	pointer
;	O
{	O
int	O
cshort	int
;	O
int	O
ctimeouts	int
;	O
if	O
(	O
pftimedout	pointer
!=	O
NULL	O
)	O
*	O
pftimedout	pointer
=	O
FALSE	O
;	O
cshort	int
=	O
0	int
;	O
ctimeouts	int
=	O
0	int
;	O
while	O
(	O
TRUE	O
)	O
{	O
boolean	int
fexit	int
,	O
ffound	int
;	O
size_t	long
cneed	long
;	O
size_t	long
crec	long
;	O
if	O
(	O
!	O
fiprocess_data	function
(	O
qdaemon	pointer
,	O
&	O
fexit	int
,	O
&	O
ffound	int
,	O
&	O
cneed	long
)	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
fexit	int
||	O
(	O
fone	int
&&	O
ffound	int
)	O
)	O
return	O
TRUE	O
;	O
if	O
(	O
cneed	long
==	O
0	int
)	O
continue	O
;	O
DEBUG_MESSAGE1	O
(	O
DEBUG_PROTO	O
,	O
"fiwait_for_packet: Need %d bytes"	pointer
,	O
(	O
int	O
)	O
cneed	long
)	O
;	O
if	O
(	O
!	O
(	O
*	O
pfIreceive	pointer
)	O
(	O
qdaemon	pointer
->	O
qconn	pointer
,	O
cneed	long
,	O
&	O
crec	long
,	O
ctimeout	int
,	O
TRUE	O
)	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
crec	long
!=	O
0	int
)	O
{	O
if	O
(	O
crec	long
>=	O
cneed	long
)	O
cshort	int
=	O
0	int
;	O
else	O
{	O
++	O
cshort	int
;	O
if	O
(	O
cshort	int
>	O
1	int
)	O
{	O
iPrecstart	int
=	O
(	O
iPrecstart	int
+	O
1	int
)	O
%	O
CRECBUFLEN	O
;	O
cshort	int
=	O
0	int
;	O
}	O
}	O
}	O
else	O
{	O
int	O
i	int
;	O
++	O
ctimeouts	int
;	O
if	O
(	O
ctimeouts	int
>	O
cretries	int
)	O
{	O
if	O
(	O
cretries	int
>	O
0	int
)	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Timed out waiting for packet"	pointer
)	O
;	O
if	O
(	O
pftimedout	pointer
!=	O
NULL	O
)	O
*	O
pftimedout	pointer
=	O
TRUE	O
;	O
return	O
FALSE	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
IMAXSEQ	int
;	O
i	int
++	O
)	O
afInaked	array
[	O
i	int
]	O
=	O
FALSE	O
;	O
if	O
(	O
!	O
finak	function
(	O
qdaemon	pointer
,	O
INEXTSEQ	O
(	O
iIrecseq	int
)	O
)	O
||	O
!	O
firesend	function
(	O
qdaemon	pointer
)	O
)	O
return	O
FALSE	O
;	O
}	O
}	O
}	O
static	O
boolean	int
ficheck_errors	function
(	O
qdaemon	pointer
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
{	O
if	O
(	O
cIerrors	int
<	O
0	int
)	O
return	O
TRUE	O
;	O
if	O
(	O
(	O
(	O
cIbad_order	long
+	O
cIbad_hdr	long
+	O
cIbad_cksum	long
+	O
cIremote_rejects	long
)	O
-	O
(	O
cIreceived_packets	long
/	O
cIerror_decay	int
)	O
)	O
>	O
cIerrors	int
)	O
{	O
if	O
(	O
iIrequest_packsize	int
>	O
400	int
)	O
{	O
char	O
absync	array
[	O
CHDRLEN	O
+	O
3	int
+	O
CCKSUMLEN	O
]	O
;	O
unsigned	O
long	O
icksum	long
;	O
iIrequest_packsize	int
/=	O
2	int
;	O
absync	array
[	O
IHDR_INTRO	O
]	O
=	O
IINTRO	O
;	O
absync	array
[	O
IHDR_LOCAL	O
]	O
=	O
IHDRWIN_SET	O
(	O
0	int
,	O
0	int
)	O
;	O
absync	array
[	O
IHDR_REMOTE	O
]	O
=	O
IHDRWIN_SET	O
(	O
iIrecseq	int
,	O
0	int
)	O
;	O
iIlocal_ack	int
=	O
iIrecseq	int
;	O
absync	array
[	O
IHDR_CONTENTS1	O
]	O
=	O
IHDRCON_SET1	O
(	O
SYNC	O
,	O
qdaemon	pointer
->	O
fcaller	int
,	O
3	int
)	O
;	O
absync	array
[	O
IHDR_CONTENTS2	O
]	O
=	O
IHDRCON_SET2	O
(	O
SYNC	O
,	O
qdaemon	pointer
->	O
fcaller	int
,	O
3	int
)	O
;	O
absync	array
[	O
IHDR_CHECK	O
]	O
=	O
IHDRCHECK_VAL	O
(	O
absync	array
)	O
;	O
absync	array
[	O
CHDRLEN	O
+	O
0	int
]	O
=	O
(	O
iIrequest_packsize	int
>>	O
8	int
)	O
&	O
0xff	int
;	O
absync	array
[	O
CHDRLEN	O
+	O
1	int
]	O
=	O
iIrequest_packsize	int
&	O
0xff	int
;	O
absync	array
[	O
CHDRLEN	O
+	O
2	int
]	O
=	O
iIrequest_winsize	int
;	O
icksum	long
=	O
icrc	function
(	O
absync	array
+	O
CHDRLEN	O
,	O
3	int
,	O
ICRCINIT	O
)	O
;	O
UCKSUM_SET	O
(	O
absync	array
+	O
CHDRLEN	O
+	O
3	int
,	O
icksum	long
)	O
;	O
cIerrors	int
*=	O
2	int
;	O
DEBUG_MESSAGE2	O
(	O
DEBUG_PROTO	O
|	O
DEBUG_ABNORMAL	O
,	O
"ficheck_errors: Sending SYNC packsize %d winsize %d"	pointer
,	O
iIrequest_packsize	int
,	O
iIrequest_winsize	int
)	O
;	O
return	O
(	O
*	O
pfIsend	pointer
)	O
(	O
qdaemon	pointer
->	O
qconn	pointer
,	O
absync	array
,	O
CHDRLEN	O
+	O
3	int
+	O
CCKSUMLEN	O
,	O
TRUE	O
)	O
;	O
}	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Too many '%c' protocol errors"	pointer
,	O
qdaemon	pointer
->	O
qproto	pointer
->	O
bname	char
)	O
;	O
return	O
FALSE	O
;	O
}	O
return	O
TRUE	O
;	O
}	O
static	O
boolean	int
fiprocess_data	function
(	O
qdaemon	pointer
,	O
pfexit	pointer
,	O
pffound	pointer
,	O
pcneed	pointer
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
boolean	int
*	O
pfexit	pointer
;	O
boolean	int
*	O
pffound	pointer
;	O
size_t	long
*	O
pcneed	pointer
;	O
{	O
boolean	int
fbadhdr	int
;	O
if	O
(	O
pfexit	pointer
!=	O
NULL	O
)	O
*	O
pfexit	pointer
=	O
FALSE	O
;	O
if	O
(	O
pffound	pointer
!=	O
NULL	O
)	O
*	O
pffound	pointer
=	O
FALSE	O
;	O
fbadhdr	int
=	O
FALSE	O
;	O
while	O
(	O
iPrecstart	int
!=	O
iPrecend	int
)	O
{	O
char	O
ab	array
[	O
CHDRLEN	O
]	O
;	O
int	O
cfirst	long
,	O
csecond	long
;	O
char	O
*	O
zfirst	pointer
,	O
*	O
zsecond	pointer
;	O
int	O
i	int
;	O
int	O
iget	int
;	O
int	O
ttype	enum
;	O
int	O
iseq	int
;	O
int	O
csize	long
;	O
int	O
iack	int
;	O
if	O
(	O
fIclosing	int
)	O
{	O
if	O
(	O
pfexit	pointer
!=	O
NULL	O
)	O
*	O
pfexit	pointer
=	O
TRUE	O
;	O
if	O
(	O
pcneed	pointer
!=	O
NULL	O
)	O
*	O
pcneed	pointer
=	O
0	int
;	O
return	O
TRUE	O
;	O
}	O
if	O
(	O
abPrecbuf	array
[	O
iPrecstart	int
]	O
!=	O
IINTRO	O
)	O
{	O
char	O
*	O
zintro	pointer
;	O
int	O
cintro	int
;	O
cintro	int
=	O
iPrecend	int
-	O
iPrecstart	int
;	O
if	O
(	O
cintro	int
<	O
0	int
)	O
cintro	int
=	O
CRECBUFLEN	O
-	O
iPrecstart	int
;	O
zintro	pointer
=	O
memchr	function
(	O
abPrecbuf	array
+	O
iPrecstart	int
,	O
IINTRO	O
,	O
(	O
size_t	long
)	O
cintro	int
)	O
;	O
if	O
(	O
zintro	pointer
==	O
NULL	O
)	O
{	O
iPrecstart	int
=	O
(	O
iPrecstart	int
+	O
cintro	int
)	O
%	O
CRECBUFLEN	O
;	O
continue	O
;	O
}	O
iPrecstart	int
+=	O
zintro	pointer
-	O
(	O
abPrecbuf	array
+	O
iPrecstart	int
)	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
,	O
iget	int
=	O
iPrecstart	int
;	O
i	int
<	O
CHDRLEN	O
&&	O
iget	int
!=	O
iPrecend	int
;	O
i	int
++	O
,	O
iget	int
=	O
(	O
iget	int
+	O
1	int
)	O
%	O
CRECBUFLEN	O
)	O
ab	array
[	O
i	int
]	O
=	O
abPrecbuf	array
[	O
iget	int
]	O
;	O
if	O
(	O
i	int
<	O
CHDRLEN	O
)	O
{	O
if	O
(	O
pcneed	pointer
!=	O
NULL	O
)	O
*	O
pcneed	pointer
=	O
CHDRLEN	O
-	O
i	int
;	O
return	O
TRUE	O
;	O
}	O
if	O
(	O
(	O
ab	array
[	O
IHDR_CHECK	O
]	O
&	O
0xff	int
)	O
!=	O
IHDRCHECK_VAL	O
(	O
ab	array
)	O
||	O
(	O
FHDRCON_GETCALLER	O
(	O
ab	array
[	O
IHDR_CONTENTS1	O
]	O
,	O
ab	array
[	O
IHDR_CONTENTS2	O
]	O
)	O
?	O
qdaemon	pointer
->	O
fcaller	int
:	O
!	O
qdaemon	pointer
->	O
fcaller	int
)	O
)	O
{	O
if	O
(	O
!	O
fbadhdr	int
)	O
{	O
DEBUG_MESSAGE0	O
(	O
DEBUG_PROTO	O
|	O
DEBUG_ABNORMAL	O
,	O
"fiprocess_data: Bad header"	pointer
)	O
;	O
++	O
cIbad_hdr	long
;	O
if	O
(	O
!	O
ficheck_errors	function
(	O
qdaemon	pointer
)	O
)	O
return	O
FALSE	O
;	O
fbadhdr	int
=	O
TRUE	O
;	O
}	O
iPrecstart	int
=	O
(	O
iPrecstart	int
+	O
1	int
)	O
%	O
CRECBUFLEN	O
;	O
continue	O
;	O
}	O
zfirst	pointer
=	O
zsecond	pointer
=	O
NULL	O
;	O
cfirst	long
=	O
csecond	long
=	O
0	int
;	O
ttype	enum
=	O
THDRCON_GETTYPE	O
(	O
ab	array
[	O
IHDR_CONTENTS1	O
]	O
,	O
ab	array
[	O
IHDR_CONTENTS2	O
]	O
)	O
;	O
if	O
(	O
ttype	enum
==	O
DATA	O
||	O
ttype	enum
==	O
SPOS	O
||	O
ttype	enum
==	O
CLOSE	O
)	O
iseq	int
=	O
IHDRWIN_GETSEQ	O
(	O
ab	array
[	O
IHDR_LOCAL	O
]	O
)	O
;	O
else	O
iseq	int
=	O
-	O
1	int
;	O
csize	long
=	O
CHDRCON_GETBYTES	O
(	O
ab	array
[	O
IHDR_CONTENTS1	O
]	O
,	O
ab	array
[	O
IHDR_CONTENTS2	O
]	O
)	O
;	O
if	O
(	O
iseq	int
!=	O
-	O
1	int
)	O
{	O
if	O
(	O
iIrequest_winsize	int
>	O
0	int
&&	O
CSEQDIFF	O
(	O
iseq	int
,	O
iIlocal_ack	int
)	O
>	O
iIrequest_winsize	int
)	O
{	O
DEBUG_MESSAGE2	O
(	O
DEBUG_PROTO	O
|	O
DEBUG_ABNORMAL	O
,	O
"fiprocess_data: Out of order packet %d (ack %d)"	pointer
,	O
iseq	int
,	O
iIlocal_ack	int
)	O
;	O
++	O
cIbad_order	long
;	O
if	O
(	O
!	O
ficheck_errors	function
(	O
qdaemon	pointer
)	O
)	O
return	O
FALSE	O
;	O
iPrecstart	int
=	O
(	O
iPrecstart	int
+	O
1	int
)	O
%	O
CRECBUFLEN	O
;	O
continue	O
;	O
}	O
}	O
if	O
(	O
csize	long
>	O
0	int
)	O
{	O
int	O
cinbuf	int
;	O
char	O
abcksum	array
[	O
CCKSUMLEN	O
]	O
;	O
unsigned	O
long	O
ickdata	long
;	O
cinbuf	int
=	O
iPrecend	int
-	O
iPrecstart	int
;	O
if	O
(	O
cinbuf	int
<	O
0	int
)	O
cinbuf	int
+=	O
CRECBUFLEN	O
;	O
if	O
(	O
cinbuf	int
<	O
CHDRLEN	O
+	O
csize	long
+	O
CCKSUMLEN	O
)	O
{	O
if	O
(	O
pcneed	pointer
!=	O
NULL	O
)	O
*	O
pcneed	pointer
=	O
CHDRLEN	O
+	O
csize	long
+	O
CCKSUMLEN	O
-	O
cinbuf	int
;	O
return	O
TRUE	O
;	O
}	O
if	O
(	O
iPrecend	int
>	O
iPrecstart	int
)	O
{	O
cfirst	long
=	O
csize	long
;	O
zfirst	pointer
=	O
abPrecbuf	array
+	O
iPrecstart	int
+	O
CHDRLEN	O
;	O
}	O
else	O
{	O
cfirst	long
=	O
CRECBUFLEN	O
-	O
(	O
iPrecstart	int
+	O
CHDRLEN	O
)	O
;	O
if	O
(	O
cfirst	long
<=	O
0	int
)	O
{	O
zfirst	pointer
=	O
abPrecbuf	array
-	O
cfirst	long
;	O
cfirst	long
=	O
csize	long
;	O
}	O
else	O
{	O
if	O
(	O
cfirst	long
>=	O
csize	long
)	O
cfirst	long
=	O
csize	long
;	O
else	O
{	O
zsecond	pointer
=	O
abPrecbuf	array
;	O
csecond	long
=	O
csize	long
-	O
cfirst	long
;	O
}	O
zfirst	pointer
=	O
abPrecbuf	array
+	O
iPrecstart	int
+	O
CHDRLEN	O
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
,	O
iget	int
=	O
(	O
iPrecstart	int
+	O
CHDRLEN	O
+	O
csize	long
)	O
%	O
CRECBUFLEN	O
;	O
i	int
<	O
CCKSUMLEN	O
;	O
i	int
++	O
,	O
iget	int
=	O
(	O
iget	int
+	O
1	int
)	O
%	O
CRECBUFLEN	O
)	O
abcksum	array
[	O
i	int
]	O
=	O
abPrecbuf	array
[	O
iget	int
]	O
;	O
ickdata	long
=	O
icrc	function
(	O
zfirst	pointer
,	O
(	O
size_t	long
)	O
cfirst	long
,	O
ICRCINIT	O
)	O
;	O
if	O
(	O
csecond	long
>	O
0	int
)	O
ickdata	long
=	O
icrc	function
(	O
zsecond	pointer
,	O
(	O
size_t	long
)	O
csecond	long
,	O
ickdata	long
)	O
;	O
if	O
(	O
ICKSUM_GET	O
(	O
abcksum	array
)	O
!=	O
ickdata	long
)	O
{	O
DEBUG_MESSAGE2	O
(	O
DEBUG_PROTO	O
|	O
DEBUG_ABNORMAL	O
,	O
"fiprocess_data: Bad checksum; data %lu, frame %lu"	pointer
,	O
ickdata	long
,	O
ICKSUM_GET	O
(	O
abcksum	array
)	O
)	O
;	O
++	O
cIbad_cksum	long
;	O
if	O
(	O
!	O
ficheck_errors	function
(	O
qdaemon	pointer
)	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
iseq	int
!=	O
-	O
1	int
&&	O
iseq	int
!=	O
iIrecseq	int
&&	O
(	O
iIrequest_winsize	int
<=	O
0	int
||	O
CSEQDIFF	O
(	O
iseq	int
,	O
iIrecseq	int
)	O
<=	O
iIrequest_winsize	int
)	O
&&	O
azIrecbuffers	array
[	O
iseq	int
]	O
==	O
NULL	O
)	O
{	O
if	O
(	O
!	O
finak	function
(	O
qdaemon	pointer
,	O
iseq	int
)	O
)	O
return	O
FALSE	O
;	O
}	O
iPrecstart	int
=	O
(	O
iPrecstart	int
+	O
1	int
)	O
%	O
CRECBUFLEN	O
;	O
continue	O
;	O
}	O
}	O
if	O
(	O
csize	long
==	O
0	int
)	O
iPrecstart	int
=	O
(	O
iPrecstart	int
+	O
CHDRLEN	O
)	O
%	O
CRECBUFLEN	O
;	O
else	O
{	O
iPrecstart	int
=	O
(	O
(	O
iPrecstart	int
+	O
CHDRLEN	O
+	O
csize	long
+	O
CCKSUMLEN	O
)	O
%	O
CRECBUFLEN	O
)	O
;	O
++	O
cIreceived_packets	long
;	O
}	O
iack	int
=	O
IHDRWIN_GETSEQ	O
(	O
ab	array
[	O
IHDR_REMOTE	O
]	O
)	O
;	O
if	O
(	O
iIremote_winsize	int
>	O
0	int
&&	O
iack	int
!=	O
iIsendseq	int
&&	O
CSEQDIFF	O
(	O
iack	int
,	O
iIremote_ack	int
)	O
<=	O
iIremote_winsize	int
&&	O
CSEQDIFF	O
(	O
iIsendseq	int
,	O
iack	int
)	O
<=	O
iIremote_winsize	int
)	O
{	O
if	O
(	O
iack	int
<	O
iIremote_ack	int
)	O
uwindow_acked	function
(	O
qdaemon	pointer
,	O
FALSE	O
)	O
;	O
iIremote_ack	int
=	O
iack	int
;	O
}	O
if	O
(	O
iseq	int
!=	O
-	O
1	int
)	O
{	O
if	O
(	O
afInaked	array
[	O
iseq	int
]	O
&&	O
azIrecbuffers	array
[	O
IPREVSEQ	O
(	O
iseq	int
)	O
]	O
==	O
NULL	O
)	O
{	O
for	O
(	O
i	int
=	O
INEXTSEQ	O
(	O
iIrecseq	int
)	O
;	O
i	int
!=	O
iseq	int
;	O
i	int
=	O
INEXTSEQ	O
(	O
i	int
)	O
)	O
afInaked	array
[	O
i	int
]	O
=	O
FALSE	O
;	O
afInaked	array
[	O
iseq	int
]	O
=	O
FALSE	O
;	O
}	O
if	O
(	O
iseq	int
!=	O
INEXTSEQ	O
(	O
iIrecseq	int
)	O
)	O
{	O
if	O
(	O
iseq	int
==	O
iIrecseq	int
||	O
(	O
iIrequest_winsize	int
>	O
0	int
&&	O
CSEQDIFF	O
(	O
iseq	int
,	O
iIrecseq	int
)	O
>	O
iIrequest_winsize	int
)	O
)	O
{	O
DEBUG_MESSAGE2	O
(	O
DEBUG_PROTO	O
|	O
DEBUG_ABNORMAL	O
,	O
"fiprocess_data: Ignoring out of order packet %d (recseq %d)"	pointer
,	O
iseq	int
,	O
iIrecseq	int
)	O
;	O
continue	O
;	O
}	O
else	O
{	O
DEBUG_MESSAGE2	O
(	O
DEBUG_PROTO	O
|	O
DEBUG_ABNORMAL	O
,	O
"fiprocess_data: Saving unexpected packet %d (recseq %d)"	pointer
,	O
iseq	int
,	O
iIrecseq	int
)	O
;	O
if	O
(	O
azIrecbuffers	array
[	O
iseq	int
]	O
==	O
NULL	O
)	O
{	O
azIrecbuffers	array
[	O
iseq	int
]	O
=	O
zbufalc	function
(	O
(	O
size_t	long
)	O
(	O
CHDRLEN	O
+	O
csize	long
)	O
)	O
;	O
memcpy	function
(	O
azIrecbuffers	array
[	O
iseq	int
]	O
,	O
ab	array
,	O
CHDRLEN	O
)	O
;	O
if	O
(	O
csize	long
>	O
0	int
)	O
{	O
memcpy	function
(	O
azIrecbuffers	array
[	O
iseq	int
]	O
+	O
CHDRLEN	O
,	O
zfirst	pointer
,	O
(	O
size_t	long
)	O
cfirst	long
)	O
;	O
if	O
(	O
csecond	long
>	O
0	int
)	O
memcpy	function
(	O
azIrecbuffers	array
[	O
iseq	int
]	O
+	O
CHDRLEN	O
+	O
cfirst	long
,	O
zsecond	pointer
,	O
(	O
size_t	long
)	O
csecond	long
)	O
;	O
}	O
}	O
}	O
for	O
(	O
i	int
=	O
INEXTSEQ	O
(	O
iIrecseq	int
)	O
;	O
i	int
!=	O
iseq	int
;	O
i	int
=	O
INEXTSEQ	O
(	O
i	int
)	O
)	O
{	O
if	O
(	O
!	O
afInaked	array
[	O
i	int
]	O
&&	O
azIrecbuffers	array
[	O
i	int
]	O
==	O
NULL	O
)	O
{	O
if	O
(	O
!	O
finak	function
(	O
qdaemon	pointer
,	O
i	int
)	O
)	O
return	O
FALSE	O
;	O
}	O
}	O
continue	O
;	O
}	O
iIrecseq	int
=	O
iseq	int
;	O
}	O
if	O
(	O
pffound	pointer
!=	O
NULL	O
)	O
*	O
pffound	pointer
=	O
TRUE	O
;	O
if	O
(	O
!	O
fiprocess_packet	function
(	O
qdaemon	pointer
,	O
ab	array
,	O
zfirst	pointer
,	O
cfirst	long
,	O
zsecond	pointer
,	O
csecond	long
,	O
pfexit	pointer
)	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
iseq	int
!=	O
-	O
1	int
)	O
{	O
int	O
inext	int
;	O
inext	int
=	O
INEXTSEQ	O
(	O
iIrecseq	int
)	O
;	O
while	O
(	O
azIrecbuffers	array
[	O
inext	int
]	O
!=	O
NULL	O
)	O
{	O
char	O
*	O
z	pointer
;	O
int	O
c	long
;	O
z	pointer
=	O
azIrecbuffers	array
[	O
inext	int
]	O
;	O
c	long
=	O
CHDRCON_GETBYTES	O
(	O
z	pointer
[	O
IHDR_CONTENTS1	O
]	O
,	O
z	pointer
[	O
IHDR_CONTENTS2	O
]	O
)	O
;	O
iIrecseq	int
=	O
inext	int
;	O
if	O
(	O
!	O
fiprocess_packet	function
(	O
qdaemon	pointer
,	O
z	pointer
,	O
z	pointer
+	O
CHDRLEN	O
,	O
c	long
,	O
(	O
char	O
*	O
)	O
NULL	O
,	O
0	int
,	O
pfexit	pointer
)	O
)	O
return	O
FALSE	O
;	O
ubuffree	function
(	O
azIrecbuffers	array
[	O
inext	int
]	O
)	O
;	O
azIrecbuffers	array
[	O
inext	int
]	O
=	O
NULL	O
;	O
inext	int
=	O
INEXTSEQ	O
(	O
inext	int
)	O
;	O
}	O
}	O
if	O
(	O
iIrequest_winsize	int
>	O
0	int
&&	O
CSEQDIFF	O
(	O
iIrecseq	int
,	O
iIlocal_ack	int
)	O
>=	O
cIack_frequency	int
)	O
{	O
char	O
aback	array
[	O
CHDRLEN	O
]	O
;	O
aback	array
[	O
IHDR_INTRO	O
]	O
=	O
IINTRO	O
;	O
aback	array
[	O
IHDR_LOCAL	O
]	O
=	O
IHDRWIN_SET	O
(	O
0	int
,	O
0	int
)	O
;	O
aback	array
[	O
IHDR_REMOTE	O
]	O
=	O
IHDRWIN_SET	O
(	O
iIrecseq	int
,	O
0	int
)	O
;	O
iIlocal_ack	int
=	O
iIrecseq	int
;	O
aback	array
[	O
IHDR_CONTENTS1	O
]	O
=	O
IHDRCON_SET1	O
(	O
ACK	O
,	O
qdaemon	pointer
->	O
fcaller	int
,	O
0	int
)	O
;	O
aback	array
[	O
IHDR_CONTENTS2	O
]	O
=	O
IHDRCON_SET2	O
(	O
ACK	O
,	O
qdaemon	pointer
->	O
fcaller	int
,	O
0	int
)	O
;	O
aback	array
[	O
IHDR_CHECK	O
]	O
=	O
IHDRCHECK_VAL	O
(	O
aback	array
)	O
;	O
DEBUG_MESSAGE1	O
(	O
DEBUG_PROTO	O
,	O
"fiprocess_data: Sending ACK %d"	pointer
,	O
iIrecseq	int
)	O
;	O
if	O
(	O
!	O
(	O
*	O
pfIsend	pointer
)	O
(	O
qdaemon	pointer
->	O
qconn	pointer
,	O
aback	array
,	O
CHDRLEN	O
,	O
TRUE	O
)	O
)	O
return	O
FALSE	O
;	O
}	O
}	O
if	O
(	O
pcneed	pointer
!=	O
NULL	O
)	O
*	O
pcneed	pointer
=	O
CHDRLEN	O
;	O
return	O
TRUE	O
;	O
}	O
static	O
boolean	int
fiprocess_packet	function
(	O
qdaemon	pointer
,	O
zhdr	pointer
,	O
zfirst	pointer
,	O
cfirst	long
,	O
zsecond	pointer
,	O
csecond	long
,	O
pfexit	pointer
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
const	O
char	O
*	O
zhdr	pointer
;	O
const	O
char	O
*	O
zfirst	pointer
;	O
int	O
cfirst	long
;	O
const	O
char	O
*	O
zsecond	pointer
;	O
int	O
csecond	long
;	O
boolean	int
*	O
pfexit	pointer
;	O
{	O
int	O
ttype	enum
;	O
ttype	enum
=	O
THDRCON_GETTYPE	O
(	O
zhdr	pointer
[	O
IHDR_CONTENTS1	O
]	O
,	O
zhdr	pointer
[	O
IHDR_CONTENTS2	O
]	O
)	O
;	O
switch	O
(	O
ttype	enum
)	O
{	O
case	O
DATA	O
:	O
{	O
int	O
iseq	int
;	O
boolean	int
fret	int
;	O
iseq	int
=	O
IHDRWIN_GETSEQ	O
(	O
zhdr	pointer
[	O
IHDR_LOCAL	O
]	O
)	O
;	O
DEBUG_MESSAGE4	O
(	O
DEBUG_PROTO	O
,	O
"fiprocess_packet: Got DATA packet %d size %d local %d remote %d"	pointer
,	O
iseq	int
,	O
cfirst	long
+	O
csecond	long
,	O
IHDRWIN_GETCHAN	O
(	O
zhdr	pointer
[	O
IHDR_REMOTE	O
]	O
)	O
,	O
IHDRWIN_GETCHAN	O
(	O
zhdr	pointer
[	O
IHDR_LOCAL	O
]	O
)	O
)	O
;	O
fret	int
=	O
fgot_data	function
(	O
qdaemon	pointer
,	O
zfirst	pointer
,	O
(	O
size_t	long
)	O
cfirst	long
,	O
zsecond	pointer
,	O
(	O
size_t	long
)	O
csecond	long
,	O
IHDRWIN_GETCHAN	O
(	O
zhdr	pointer
[	O
IHDR_REMOTE	O
]	O
)	O
,	O
IHDRWIN_GETCHAN	O
(	O
zhdr	pointer
[	O
IHDR_LOCAL	O
]	O
)	O
,	O
iIrecpos	long
,	O
INEXTSEQ	O
(	O
iIremote_ack	int
)	O
==	O
iIsendseq	int
,	O
pfexit	pointer
)	O
;	O
iIrecpos	long
+=	O
cfirst	long
+	O
csecond	long
;	O
return	O
fret	int
;	O
}	O
case	O
SYNC	O
:	O
{	O
int	O
ipack	int
,	O
iwin	int
,	O
cchans	int
;	O
if	O
(	O
cfirst	long
+	O
csecond	long
<	O
3	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Bad SYNC packet"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
ipack	int
=	O
(	O
zfirst	pointer
[	O
0	int
]	O
&	O
0xff	int
)	O
<<	O
8	int
;	O
if	O
(	O
cfirst	long
>	O
1	int
)	O
ipack	int
|=	O
zfirst	pointer
[	O
1	int
]	O
&	O
0xff	int
;	O
else	O
ipack	int
|=	O
zsecond	pointer
[	O
0	int
]	O
;	O
if	O
(	O
cfirst	long
>	O
2	int
)	O
iwin	int
=	O
zfirst	pointer
[	O
2	int
]	O
;	O
else	O
iwin	int
=	O
zsecond	pointer
[	O
2	int
-	O
cfirst	long
]	O
;	O
if	O
(	O
cfirst	long
+	O
csecond	long
<=	O
3	int
)	O
cchans	int
=	O
0	int
;	O
else	O
{	O
if	O
(	O
cfirst	long
>	O
3	int
)	O
cchans	int
=	O
zfirst	pointer
[	O
3	int
]	O
;	O
else	O
cchans	int
=	O
zsecond	pointer
[	O
3	int
-	O
cfirst	long
]	O
;	O
if	O
(	O
cchans	int
>	O
0	int
&&	O
cchans	int
<	O
8	int
)	O
qdaemon	pointer
->	O
cchans	int
=	O
cchans	int
;	O
}	O
DEBUG_MESSAGE3	O
(	O
DEBUG_PROTO	O
,	O
"fiprocess_packet: Got SYNC packsize %d winsize %d channels %d"	pointer
,	O
ipack	int
,	O
iwin	int
,	O
cchans	int
)	O
;	O
if	O
(	O
iIforced_remote_packsize	int
==	O
0	int
&&	O
(	O
iIalc_packsize	int
==	O
0	int
||	O
ipack	int
<=	O
iIalc_packsize	int
)	O
)	O
iIremote_packsize	int
=	O
ipack	int
;	O
iIremote_winsize	int
=	O
iwin	int
;	O
++	O
cIsyncs	int
;	O
*	O
pfexit	pointer
=	O
TRUE	O
;	O
return	O
TRUE	O
;	O
}	O
case	O
ACK	O
:	O
DEBUG_MESSAGE1	O
(	O
DEBUG_PROTO	O
,	O
"fiprocess_packet: Got ACK %d"	pointer
,	O
IHDRWIN_GETSEQ	O
(	O
zhdr	pointer
[	O
IHDR_REMOTE	O
]	O
)	O
)	O
;	O
return	O
TRUE	O
;	O
case	O
NAK	O
:	O
{	O
int	O
iseq	int
;	O
char	O
*	O
zsend	pointer
;	O
size_t	long
clen	long
;	O
++	O
cIremote_rejects	long
;	O
if	O
(	O
!	O
ficheck_errors	function
(	O
qdaemon	pointer
)	O
)	O
return	O
FALSE	O
;	O
iseq	int
=	O
IHDRWIN_GETSEQ	O
(	O
zhdr	pointer
[	O
IHDR_LOCAL	O
]	O
)	O
;	O
if	O
(	O
iseq	int
==	O
iIsendseq	int
&&	O
INEXTSEQ	O
(	O
iIremote_ack	int
)	O
==	O
iIsendseq	int
)	O
{	O
char	O
aback	array
[	O
CHDRLEN	O
]	O
;	O
aback	array
[	O
IHDR_INTRO	O
]	O
=	O
IINTRO	O
;	O
aback	array
[	O
IHDR_LOCAL	O
]	O
=	O
IHDRWIN_SET	O
(	O
0	int
,	O
0	int
)	O
;	O
aback	array
[	O
IHDR_REMOTE	O
]	O
=	O
IHDRWIN_SET	O
(	O
iIrecseq	int
,	O
0	int
)	O
;	O
iIlocal_ack	int
=	O
iIrecseq	int
;	O
aback	array
[	O
IHDR_CONTENTS1	O
]	O
=	O
IHDRCON_SET1	O
(	O
ACK	O
,	O
qdaemon	pointer
->	O
fcaller	int
,	O
0	int
)	O
;	O
aback	array
[	O
IHDR_CONTENTS2	O
]	O
=	O
IHDRCON_SET2	O
(	O
ACK	O
,	O
qdaemon	pointer
->	O
fcaller	int
,	O
0	int
)	O
;	O
aback	array
[	O
IHDR_CHECK	O
]	O
=	O
IHDRCHECK_VAL	O
(	O
aback	array
)	O
;	O
DEBUG_MESSAGE1	O
(	O
DEBUG_PROTO	O
,	O
"fiprocess_packet: Sending ACK %d"	pointer
,	O
iIrecseq	int
)	O
;	O
return	O
(	O
*	O
pfIsend	pointer
)	O
(	O
qdaemon	pointer
->	O
qconn	pointer
,	O
aback	array
,	O
CHDRLEN	O
,	O
TRUE	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
iseq	int
==	O
iIsendseq	int
||	O
(	O
iIremote_winsize	int
>	O
0	int
&&	O
(	O
CSEQDIFF	O
(	O
iseq	int
,	O
iIremote_ack	int
)	O
>	O
iIremote_winsize	int
||	O
CSEQDIFF	O
(	O
iIsendseq	int
,	O
iseq	int
)	O
>	O
iIremote_winsize	int
)	O
)	O
)	O
{	O
DEBUG_MESSAGE2	O
(	O
DEBUG_PROTO	O
|	O
DEBUG_ABNORMAL	O
,	O
"fiprocess_packet: Ignoring out of order NAK %d (sendseq %d)"	pointer
,	O
iseq	int
,	O
iIsendseq	int
)	O
;	O
return	O
TRUE	O
;	O
}	O
DEBUG_MESSAGE1	O
(	O
DEBUG_PROTO	O
|	O
DEBUG_ABNORMAL	O
,	O
"fiprocess_packet: Got NAK %d; resending packet"	pointer
,	O
iseq	int
)	O
;	O
zsend	pointer
=	O
azIsendbuffers	array
[	O
iseq	int
]	O
+	O
CHDROFFSET	O
;	O
if	O
(	O
IHDRWIN_GETSEQ	O
(	O
zsend	pointer
[	O
IHDR_REMOTE	O
]	O
)	O
!=	O
iIrecseq	int
)	O
{	O
int	O
iremote	int
;	O
iremote	int
=	O
IHDRWIN_GETCHAN	O
(	O
zsend	pointer
[	O
IHDR_REMOTE	O
]	O
)	O
;	O
zsend	pointer
[	O
IHDR_REMOTE	O
]	O
=	O
IHDRWIN_SET	O
(	O
iIrecseq	int
,	O
iremote	int
)	O
;	O
zsend	pointer
[	O
IHDR_CHECK	O
]	O
=	O
IHDRCHECK_VAL	O
(	O
zsend	pointer
)	O
;	O
iIlocal_ack	int
=	O
iIrecseq	int
;	O
}	O
++	O
cIresent_packets	long
;	O
clen	long
=	O
CHDRCON_GETBYTES	O
(	O
zsend	pointer
[	O
IHDR_CONTENTS1	O
]	O
,	O
zsend	pointer
[	O
IHDR_CONTENTS2	O
]	O
)	O
;	O
return	O
(	O
*	O
pfIsend	pointer
)	O
(	O
qdaemon	pointer
->	O
qconn	pointer
,	O
zsend	pointer
,	O
CHDRLEN	O
+	O
clen	long
+	O
(	O
clen	long
>	O
0	int
?	O
CCKSUMLEN	O
:	O
0	int
)	O
,	O
TRUE	O
)	O
;	O
}	O
}	O
case	O
SPOS	O
:	O
{	O
char	O
abpos	array
[	O
CCKSUMLEN	O
]	O
;	O
const	O
char	O
*	O
zpos	pointer
;	O
if	O
(	O
cfirst	long
>=	O
CCKSUMLEN	O
)	O
zpos	pointer
=	O
zfirst	pointer
;	O
else	O
{	O
memcpy	function
(	O
abpos	array
,	O
zfirst	pointer
,	O
(	O
size_t	long
)	O
cfirst	long
)	O
;	O
memcpy	function
(	O
abpos	array
+	O
cfirst	long
,	O
zsecond	pointer
,	O
(	O
size_t	long
)	O
(	O
CCKSUMLEN	O
-	O
cfirst	long
)	O
)	O
;	O
zpos	pointer
=	O
abpos	array
;	O
}	O
iIrecpos	long
=	O
(	O
long	O
)	O
ICKSUM_GET	O
(	O
zpos	pointer
)	O
;	O
DEBUG_MESSAGE1	O
(	O
DEBUG_PROTO	O
,	O
"fiprocess_packet: Got SPOS %ld"	pointer
,	O
iIrecpos	long
)	O
;	O
return	O
TRUE	O
;	O
}	O
case	O
CLOSE	O
:	O
{	O
boolean	int
fexpected	int
;	O
fexpected	int
=	O
!	O
fLog_sighup	int
||	O
fIclosing	int
;	O
if	O
(	O
!	O
fexpected	int
)	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Received unexpected CLOSE packet"	pointer
)	O
;	O
else	O
DEBUG_MESSAGE0	O
(	O
DEBUG_PROTO	O
,	O
"fiprocess_packet: Got CLOSE packet"	pointer
)	O
;	O
fIclosing	int
=	O
TRUE	O
;	O
*	O
pfexit	pointer
=	O
TRUE	O
;	O
return	O
fexpected	int
;	O
}	O
default	O
:	O
DEBUG_MESSAGE1	O
(	O
DEBUG_PROTO	O
,	O
"fiprocess_packet: Got packet type %d"	pointer
,	O
ttype	enum
)	O
;	O
return	O
TRUE	O
;	O
}	O
}	O