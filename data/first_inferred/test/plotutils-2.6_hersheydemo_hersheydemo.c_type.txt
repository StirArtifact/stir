struct	O
hershey_word	struct
{	O
const	O
char	O
*	O
word	pointer
;	O
const	O
char	O
*	O
fontname	pointer
;	O
double	O
m	array
[	O
6	int
]	O
;	O
char	O
just	char
;	O
}	O
;	O
const	O
struct	O
hershey_word	struct
demo_word	array
[	O
NUM_DEMO_WORDS	int
]	O
=	O
{	O
{	O
"Invitation"	pointer
,	O
"HersheyScript-Bold"	pointer
,	O
{	O
1.	int
,	O
0.	int
,	O
0.	int
,	O
1.	int
,	O
-	O
3125.	int
,	O
3980.	int
}	O
,	O
'l'	O
}	O
,	O
{	O
"ECONOMY"	pointer
,	O
"HersheySans"	pointer
,	O
{	O
1.	int
,	O
0.	int
,	O
0.	int
,	O
1.	int
,	O
-	O
3125.	int
,	O
3340.	int
}	O
,	O
'l'	O
}	O
,	O
{	O
"CARTOGRAPHY"	pointer
,	O
"HersheySans"	pointer
,	O
{	O
CART	O
,	O
0.	int
,	O
0.	int
,	O
CART	O
,	O
-	O
3125.	int
,	O
2700.	int
}	O
,	O
'l'	O
}	O
,	O
{	O
"Gramma"	pointer
,	O
"HersheySerifSymbol"	pointer
,	O
{	O
1.	int
,	O
0.	int
,	O
0.	int
,	O
1.	int
,	O
-	O
3125.	int
,	O
2060.	int
}	O
,	O
'l'	O
}	O
,	O
{	O
"\347\322\301\306\311\313\301"	pointer
,	O
"HersheyCyrillic"	pointer
,	O
{	O
1.	int
,	O
0.	int
,	O
0.	int
,	O
1.	int
,	O
-	O
3125.	int
,	O
1420.	int
}	O
,	O
'l'	O
}	O
,	O
{	O
"COMMUNICATION"	pointer
,	O
"HersheySans-Bold"	pointer
,	O
{	O
1.	int
,	O
0.	int
,	O
0.	int
,	O
1.	int
,	O
0.	int
,	O
3980.	int
}	O
,	O
'c'	O
}	O
,	O
{	O
"VERSATILITY"	pointer
,	O
"HersheySerif-Italic"	pointer
,	O
{	O
1.	int
,	O
0.	int
,	O
0.	int
,	O
1.	int
,	O
0.	int
,	O
3340.	int
}	O
,	O
'c'	O
}	O
,	O
{	O
"Standardization"	pointer
,	O
"HersheySerif"	pointer
,	O
{	O
1.	int
,	O
0.	int
,	O
0.	int
,	O
1.	int
,	O
0.	int
,	O
2700.	int
}	O
,	O
'c'	O
}	O
,	O
{	O
"Sumbolon"	pointer
,	O
"HersheySerifSymbol"	pointer
,	O
{	O
INDEXICAL	O
,	O
0.	int
,	O
0.	int
,	O
INDEXICAL	O
,	O
0.	int
,	O
2060.	int
}	O
,	O
'c'	O
}	O
,	O
{	O
"\363\354\357\366\356\357\363\364\370"	pointer
,	O
"HersheyCyrillic"	pointer
,	O
{	O
1.	int
,	O
0.	int
,	O
0.	int
,	O
1.	int
,	O
0.	int
,	O
1420.	int
}	O
,	O
'c'	O
}	O
,	O
{	O
"Publication"	pointer
,	O
"HersheyScript-Bold"	pointer
,	O
{	O
1.	int
,	O
0.	int
,	O
0.	int
,	O
1.	int
,	O
3125.	int
,	O
3980.	int
}	O
,	O
'r'	O
}	O
,	O
{	O
"Quality"	pointer
,	O
"HersheyGothicEnglish"	pointer
,	O
{	O
1.	int
,	O
0.	int
,	O
0.	int
,	O
1.	int
,	O
3125.	int
,	O
3340.	int
}	O
,	O
'r'	O
}	O
,	O
{	O
"TYPOGRAPHY"	pointer
,	O
"HersheySans"	pointer
,	O
{	O
CART	O
,	O
0.	int
,	O
0.	int
,	O
CART	O
,	O
3125.	int
,	O
2700.	int
}	O
,	O
'r'	O
}	O
,	O
{	O
"AriJmo\\s-"	pointer
,	O
"HersheySerifSymbol"	pointer
,	O
{	O
1.	int
,	O
0.	int
,	O
0.	int
,	O
1.	int
,	O
3125.	int
,	O
2060.	int
}	O
,	O
'r'	O
}	O
,	O
{	O
"\346\317\316\305\324\311\313\301"	pointer
,	O
"HersheyCyrillic"	pointer
,	O
{	O
1.	int
,	O
0.	int
,	O
0.	int
,	O
1.	int
,	O
3125.	int
,	O
1420.	int
}	O
,	O
'r'	O
}	O
,	O
{	O
"EXTENSION"	pointer
,	O
"HersheySans"	pointer
,	O
{	O
17.	int
/	O
7.	int
,	O
0.	int
,	O
0.	int
,	O
2.	int
/	O
7.	int
,	O
0.	int
,	O
780.	int
}	O
,	O
'c'	O
}	O
,	O
{	O
"CONDENSATION"	pointer
,	O
"HersheySans"	pointer
,	O
{	O
5.	int
/	O
7.	int
,	O
0.	int
,	O
0.	int
,	O
17.	int
/	O
7.	int
,	O
0.	int
,	O
-	O
20.	int
}	O
,	O
'c'	O
}	O
,	O
{	O
"Rotation"	pointer
,	O
"HersheySans"	pointer
,	O
{	O
M_SQRT1_2	O
,	O
M_SQRT1_2	O
,	O
-	O
M_SQRT1_2	O
,	O
M_SQRT1_2	O
,	O
-	O
2880.	int
,	O
-	O
20.	int
}	O
,	O
'l'	O
}	O
,	O
{	O
"ROTATION"	pointer
,	O
"HersheySans"	pointer
,	O
{	O
M_SQRT1_2	O
,	O
-	O
M_SQRT1_2	O
,	O
M_SQRT1_2	O
,	O
M_SQRT1_2	O
,	O
2880.	int
,	O
-	O
20.	int
}	O
,	O
'r'	O
}	O
,	O
{	O
"Syllabary"	pointer
,	O
"HersheySerif"	pointer
,	O
{	O
1.	int
,	O
0.	int
,	O
0.	int
,	O
1.	int
,	O
-	O
3125.	int
,	O
-	O
780.	int
}	O
,	O
'l'	O
}	O
,	O
{	O
"Art"	pointer
,	O
"HersheyGothicEnglish"	pointer
,	O
{	O
1.	int
,	O
0.	int
,	O
0.	int
,	O
1.	int
,	O
-	O
3125.	int
,	O
-	O
1420.	int
}	O
,	O
'l'	O
}	O
,	O
{	O
"Meteorology"	pointer
,	O
"HersheySerif-Italic"	pointer
,	O
{	O
INDEXICAL	O
,	O
0.	int
,	O
0.	int
,	O
INDEXICAL	O
,	O
-	O
3125.	int
,	O
-	O
2060.	int
}	O
,	O
'l'	O
}	O
,	O
{	O
"CHEMISTRY"	pointer
,	O
"HersheySerif"	pointer
,	O
{	O
1.	int
,	O
0.	int
,	O
0.	int
,	O
1.	int
,	O
-	O
3125.	int
,	O
-	O
2700.	int
}	O
,	O
'l'	O
}	O
,	O
{	O
"Analysis"	pointer
,	O
"HersheySerif-BoldItalic"	pointer
,	O
{	O
1.	int
,	O
0.	int
,	O
0.	int
,	O
1.	int
,	O
-	O
3125.	int
,	O
-	O
3340.	int
}	O
,	O
'l'	O
}	O
,	O
{	O
"LEXIKON"	pointer
,	O
"HersheySerifSymbol-Bold"	pointer
,	O
{	O
1.	int
,	O
0.	int
,	O
0.	int
,	O
1.	int
,	O
0.	int
,	O
-	O
780.	int
}	O
,	O
'c'	O
}	O
,	O
{	O
"\\#J3d71\\#J463b"	pointer
,	O
"HersheySerif"	pointer
,	O
{	O
1.	int
/	O
.7	int
,	O
0.	int
,	O
0.	int
,	O
1.	int
/	O
.7	int
,	O
0.	int
,	O
-	O
1420.	int
}	O
,	O
'c'	O
}	O
,	O
{	O
"Wissenschaft"	pointer
,	O
"HersheyGothicGerman"	pointer
,	O
{	O
1.	int
,	O
0.	int
,	O
0.	int
,	O
1.	int
,	O
0.	int
,	O
-	O
2060.	int
}	O
,	O
'c'	O
}	O
,	O
{	O
"Electronics"	pointer
,	O
"HersheySerif-Italic"	pointer
,	O
{	O
1.	int
,	O
0.	int
,	O
0.	int
,	O
1.	int
,	O
0.	int
,	O
-	O
2700.	int
}	O
,	O
'c'	O
}	O
,	O
{	O
"COMPUTATION"	pointer
,	O
"HersheySerif-Bold"	pointer
,	O
{	O
1.	int
,	O
0.	int
,	O
0.	int
,	O
1.	int
,	O
0.	int
,	O
-	O
3340.	int
}	O
,	O
'c'	O
}	O
,	O
{	O
"Alphabet"	pointer
,	O
"HersheySerif"	pointer
,	O
{	O
1.	int
,	O
0.	int
,	O
0.	int
,	O
1.	int
,	O
3125.	int
,	O
-	O
780.	int
}	O
,	O
'r'	O
}	O
,	O
{	O
"Music"	pointer
,	O
"HersheyGothicItalian"	pointer
,	O
{	O
1.	int
,	O
0.	int
,	O
0.	int
,	O
1.	int
,	O
3125.	int
,	O
-	O
1420.	int
}	O
,	O
'r'	O
}	O
,	O
{	O
"Astronomy"	pointer
,	O
"HersheySerif"	pointer
,	O
{	O
INDEXICAL	O
,	O
0.	int
,	O
0.	int
,	O
INDEXICAL	O
,	O
3125.	int
,	O
-	O
2060.	int
}	O
,	O
'r'	O
}	O
,	O
{	O
"MATHEMATICS"	pointer
,	O
"HersheySerif"	pointer
,	O
{	O
1.	int
,	O
0.	int
,	O
0.	int
,	O
1.	int
,	O
3125.	int
,	O
-	O
2700.	int
}	O
,	O
'r'	O
}	O
,	O
{	O
"Program"	pointer
,	O
"HersheySerif-BoldItalic"	pointer
,	O
{	O
1.	int
,	O
0.	int
,	O
0.	int
,	O
1.	int
,	O
3125.	int
,	O
-	O
3340.	int
}	O
,	O
'r'	O
}	O
,	O
}	O
;	O
const	O
char	O
*	O
progname	pointer
=	O
"hersheydemo"	pointer
;	O
const	O
char	O
*	O
written	pointer
=	O
"Written by Robert S. Maier."	pointer
;	O
const	O
char	O
*	O
copyright	pointer
=	O
"Copyright (C) 2009 Free Software Foundation, Inc."	pointer
;	O
const	O
char	O
*	O
usage_appendage	pointer
=	O
"\n"	pointer
;	O
char	O
*	O
bg_color	pointer
=	O
NULL	O
;	O
char	O
*	O
pen_color	pointer
=	O
NULL	O
;	O
char	O
*	O
bitmap_size	pointer
=	O
NULL	O
;	O
char	O
*	O
page_size	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
optstring	pointer
=	O
"T:"	pointer
;	O
struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
"output-format"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'T'	O
}	O
,	O
{	O
"display-type"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'T'	O
<<	O
8	int
}	O
,	O
{	O
"bg-color"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'q'	O
<<	O
8	int
}	O
,	O
{	O
"pen-color"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'C'	O
<<	O
8	int
}	O
,	O
{	O
"rotation"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'r'	O
<<	O
8	int
}	O
,	O
{	O
"bitmap-size"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'B'	O
<<	O
8	int
}	O
,	O
{	O
"page-size"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'P'	O
<<	O
8	int
}	O
,	O
{	O
"version"	pointer
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'V'	O
<<	O
8	int
}	O
,	O
{	O
"help"	pointer
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'h'	O
<<	O
8	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
const	O
int	O
hidden_options	array
[	O
]	O
=	O
{	O
(	O
int	O
)	O
(	O
'T'	O
<<	O
8	int
)	O
,	O
0	int
}	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	pointer
[	O
]	O
)	O
{	O
plPlotter	struct
*	O
plotter	pointer
;	O
plPlotterParams	struct
*	O
plotter_params	pointer
;	O
bool	enum
show_usage	enum
=	O
false	int
;	O
bool	enum
show_version	enum
=	O
false	int
;	O
char	O
*	O
output_format	pointer
=	O
(	O
char	O
*	O
)	O
"meta"	pointer
;	O
int	O
errcnt	int
=	O
0	int
;	O
int	O
opt_index	int
;	O
int	O
option	struct
;	O
int	O
i	int
;	O
plotter_params	pointer
=	O
pl_newplparams	function
(	O
)	O
;	O
while	O
(	O
(	O
option	struct
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
optstring	pointer
,	O
long_options	array
,	O
&	O
opt_index	int
)	O
)	O
!=	O
EOF	O
)	O
{	O
if	O
(	O
option	struct
==	O
0	int
)	O
option	struct
=	O
long_options	array
[	O
opt_index	int
]	O
.	O
val	int
;	O
switch	O
(	O
option	struct
)	O
{	O
case	O
'T'	O
:	O
case	O
'T'	O
<<	O
8	int
:	O
output_format	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
optarg	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
output_format	pointer
,	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'C'	O
<<	O
8	int
:	O
pen_color	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
optarg	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
pen_color	pointer
,	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'q'	O
<<	O
8	int
:	O
bg_color	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
optarg	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
bg_color	pointer
,	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'r'	O
<<	O
8	int
:	O
pl_setplparam	function
(	O
plotter_params	pointer
,	O
"ROTATION"	pointer
,	O
(	O
void	O
*	O
)	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'B'	O
<<	O
8	int
:	O
pl_setplparam	function
(	O
plotter_params	pointer
,	O
"BITMAPSIZE"	pointer
,	O
(	O
void	O
*	O
)	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'P'	O
<<	O
8	int
:	O
pl_setplparam	function
(	O
plotter_params	pointer
,	O
"PAGESIZE"	pointer
,	O
(	O
void	O
*	O
)	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'V'	O
<<	O
8	int
:	O
show_version	enum
=	O
true	int
;	O
break	O
;	O
case	O
'h'	O
<<	O
8	int
:	O
show_usage	enum
=	O
true	int
;	O
break	O
;	O
default	O
:	O
errcnt	int
++	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
errcnt	int
>	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Try `%s --help' for more information\n"	pointer
,	O
progname	pointer
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
if	O
(	O
show_version	enum
)	O
{	O
display_version	function
(	O
progname	pointer
,	O
written	pointer
,	O
copyright	pointer
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
if	O
(	O
show_usage	enum
)	O
{	O
display_usage	function
(	O
progname	pointer
,	O
hidden_options	array
,	O
usage_appendage	pointer
,	O
1	int
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
if	O
(	O
bg_color	pointer
)	O
pl_setplparam	function
(	O
plotter_params	pointer
,	O
"BG_COLOR"	pointer
,	O
(	O
void	O
*	O
)	O
bg_color	pointer
)	O
;	O
if	O
(	O
(	O
plotter	pointer
=	O
pl_newpl_r	function
(	O
output_format	pointer
,	O
NULL	O
,	O
stdout	pointer
,	O
stderr	pointer
,	O
plotter_params	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: the plot device could not be created\n"	pointer
,	O
progname	pointer
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
pl_openpl_r	function
(	O
plotter	pointer
)	O
;	O
pl_erase_r	function
(	O
plotter	pointer
)	O
;	O
pl_fspace_r	function
(	O
plotter	pointer
,	O
LLX	O
,	O
LLY	O
,	O
URX	int
,	O
URY	int
)	O
;	O
if	O
(	O
pen_color	pointer
)	O
pl_pencolorname_r	function
(	O
plotter	pointer
,	O
pen_color	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NUM_DEMO_WORDS	int
;	O
i	int
++	O
)	O
{	O
pl_savestate_r	function
(	O
plotter	pointer
)	O
;	O
pl_fontname_r	function
(	O
plotter	pointer
,	O
demo_word	array
[	O
i	int
]	O
.	O
fontname	pointer
)	O
;	O
pl_fconcat_r	function
(	O
plotter	pointer
,	O
demo_word	array
[	O
i	int
]	O
.	O
m	array
[	O
0	int
]	O
,	O
demo_word	array
[	O
i	int
]	O
.	O
m	array
[	O
1	int
]	O
,	O
demo_word	array
[	O
i	int
]	O
.	O
m	array
[	O
2	int
]	O
,	O
demo_word	array
[	O
i	int
]	O
.	O
m	array
[	O
3	int
]	O
,	O
demo_word	array
[	O
i	int
]	O
.	O
m	array
[	O
4	int
]	O
,	O
demo_word	array
[	O
i	int
]	O
.	O
m	array
[	O
5	int
]	O
)	O
;	O
pl_ffontsize_r	function
(	O
plotter	pointer
,	O
BASE_FONTSIZE	int
)	O
;	O
pl_fmove_r	function
(	O
plotter	pointer
,	O
0.0	int
,	O
0.0	int
)	O
;	O
pl_alabel_r	function
(	O
plotter	pointer
,	O
demo_word	array
[	O
i	int
]	O
.	O
just	char
,	O
'c'	O
,	O
demo_word	array
[	O
i	int
]	O
.	O
word	pointer
)	O
;	O
pl_restorestate_r	function
(	O
plotter	pointer
)	O
;	O
}	O
pl_closepl_r	function
(	O
plotter	pointer
)	O
;	O
if	O
(	O
pl_deletepl_r	function
(	O
plotter	pointer
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Couldn't delete Plotter\n"	pointer
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
return	O
EXIT_SUCCESS	int
;	O
}	O