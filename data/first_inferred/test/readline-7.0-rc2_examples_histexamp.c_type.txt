main	function
(	O
argc	int
,	O
argv	array
)	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	*
;	O
{	O
char	O
line	array
[	O
1024	int
]	O
,	O
*	O
t	*
;	O
int	O
len	int
,	O
done	int
;	O
line	*
[	O
0	int
]	O
=	O
0	int
;	O
done	int
=	O
0	int
;	O
using_history	function
(	O
)	O
;	O
while	O
(	O
!	O
done	int
)	O
{	O
printf	function
(	O
"history$ "	*
)	O
;	O
fflush	function
(	O
stdout	*
)	O
;	O
t	int
=	O
fgets	function
(	O
line	array
,	O
sizeof	O
(	O
line	array
)	O
-	O
1	int
,	O
stdin	*
)	O
;	O
if	O
(	O
t	int
&&	O
*	O
t	int
)	O
{	O
len	int
=	O
strlen	function
(	O
t	int
)	O
;	O
if	O
(	O
t	*
[	O
len	int
-	O
1	int
]	O
==	O
'\n'	O
)	O
t	*
[	O
len	int
-	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
if	O
(	O
!	O
t	int
)	O
strcpy	function
(	O
line	array
,	O
"quit"	*
)	O
;	O
if	O
(	O
line	array
[	O
0	int
]	O
)	O
{	O
char	O
*	O
expansion	*
;	O
int	O
result	int
;	O
using_history	function
(	O
)	O
;	O
result	int
=	O
history_expand	function
(	O
line	int
,	O
&	O
expansion	int
)	O
;	O
if	O
(	O
result	int
)	O
fprintf	function
(	O
stderr	*
,	O
"%s\n"	*
,	O
expansion	*
)	O
;	O
if	O
(	O
result	int
<	O
0	int
||	O
result	int
==	O
2	int
)	O
{	O
free	function
(	O
expansion	*
)	O
;	O
continue	O
;	O
}	O
add_history	function
(	O
expansion	*
)	O
;	O
strncpy	function
(	O
line	array
,	O
expansion	*
,	O
sizeof	O
(	O
line	array
)	O
-	O
1	int
)	O
;	O
free	function
(	O
expansion	*
)	O
;	O
}	O
if	O
(	O
strcmp	function
(	O
line	*
,	O
"quit"	*
)	O
==	O
0	int
)	O
done	int
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
line	*
,	O
"save"	*
)	O
==	O
0	int
)	O
write_history	function
(	O
"history_file"	*
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
line	*
,	O
"read"	*
)	O
==	O
0	int
)	O
read_history	function
(	O
"history_file"	*
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
line	*
,	O
"list"	*
)	O
==	O
0	int
)	O
{	O
register	O
HIST_ENTRY	struct
*	O
*	O
the_list	*
;	O
register	O
int	O
i	int
;	O
time_t	O
tt	int
;	O
char	O
timestr	array
[	O
128	int
]	O
;	O
the_list	*
=	O
history_list	function
(	O
)	O
;	O
if	O
(	O
the_list	*
)	O
for	O
(	O
i	int
=	O
0	int
;	O
the_list	array
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
tt	int
=	O
history_get_time	function
(	O
the_list	array
[	O
i	int
]	O
)	O
;	O
if	O
(	O
tt	int
)	O
strftime	function
(	O
timestr	*
,	O
sizeof	O
(	O
timestr	*
)	O
,	O
"%a %R"	*
,	O
localtime	function
(	O
&	O
tt	int
)	O
)	O
;	O
else	O
strcpy	function
(	O
timestr	*
,	O
"??"	*
)	O
;	O
printf	function
(	O
"%d: %s: %s\n"	*
,	O
i	int
+	O
history_base	int
,	O
timestr	*
,	O
the_list	array
[	O
i	int
]	O
->	O
line	*
)	O
;	O
}	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
line	*
,	O
"delete"	*
,	O
6	int
)	O
==	O
0	int
)	O
{	O
int	O
which	int
;	O
if	O
(	O
(	O
sscanf	function
(	O
line	*
+	O
6	int
,	O
"%d"	*
,	O
&	O
which	int
)	O
)	O
==	O
1	int
)	O
{	O
HIST_ENTRY	struct
*	O
entry	*
=	O
remove_history	function
(	O
which	*
)	O
;	O
if	O
(	O
!	O
entry	int
)	O
fprintf	function
(	O
stderr	*
,	O
"No such entry %d\n"	*
,	O
which	*
)	O
;	O
else	O
{	O
free	function
(	O
entry	*
->	O
line	*
)	O
;	O
free	function
(	O
entry	*
)	O
;	O
}	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	*
,	O
"non-numeric arg given to `delete'\n"	*
)	O
;	O
}	O
}	O
}	O
}	O