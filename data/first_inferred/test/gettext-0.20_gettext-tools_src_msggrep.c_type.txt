static	O
int	O
force_po	int
;	O
static	O
bool	bool
invert_match	bool
=	O
false	int
;	O
static	O
string_list_ty	struct
*	O
location_files	pointer
;	O
static	O
string_list_ty	struct
*	O
domain_names	pointer
;	O
struct	O
grep_task	struct
{	O
matcher_t	struct
*	O
matcher	pointer
;	O
size_t	long
pattern_count	long
;	O
char	O
*	O
patterns	pointer
;	O
size_t	long
patterns_size	long
;	O
bool	bool
case_insensitive	bool
;	O
void	O
*	O
compiled_patterns	pointer
;	O
}	O
;	O
static	O
struct	O
grep_task	struct
grep_task	struct
[	O
5	int
]	O
;	O
static	O
const	O
struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
"add-location"	pointer
,	O
optional_argument	int
,	O
NULL	O
,	O
'n'	O
}	O
,	O
{	O
"color"	pointer
,	O
optional_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
9	int
}	O
,	O
{	O
"comment"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'C'	O
}	O
,	O
{	O
"directory"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'D'	O
}	O
,	O
{	O
"domain"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'M'	O
}	O
,	O
{	O
"escape"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
1	int
}	O
,	O
{	O
"extended-regexp"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'E'	O
}	O
,	O
{	O
"extracted-comment"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'X'	O
}	O
,	O
{	O
"file"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'f'	O
}	O
,	O
{	O
"fixed-strings"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'F'	O
}	O
,	O
{	O
"force-po"	pointer
,	O
no_argument	int
,	O
&	O
force_po	int
,	O
1	int
}	O
,	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'h'	O
}	O
,	O
{	O
"ignore-case"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'i'	O
}	O
,	O
{	O
"indent"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
2	int
}	O
,	O
{	O
"invert-match"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'v'	O
}	O
,	O
{	O
"location"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'N'	O
}	O
,	O
{	O
"msgctxt"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'J'	O
}	O
,	O
{	O
"msgid"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'K'	O
}	O
,	O
{	O
"msgstr"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'T'	O
}	O
,	O
{	O
"no-escape"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
3	int
}	O
,	O
{	O
"no-location"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
11	int
}	O
,	O
{	O
"no-wrap"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
6	int
}	O
,	O
{	O
"output-file"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'o'	O
}	O
,	O
{	O
"properties-input"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'P'	O
}	O
,	O
{	O
"properties-output"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'p'	O
}	O
,	O
{	O
"regexp"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'e'	O
}	O
,	O
{	O
"sort-by-file"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
4	int
}	O
,	O
{	O
"sort-output"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
5	int
}	O
,	O
{	O
"strict"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'S'	O
}	O
,	O
{	O
"stringtable-input"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
7	int
}	O
,	O
{	O
"stringtable-output"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
8	int
}	O
,	O
{	O
"style"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
10	int
}	O
,	O
{	O
"version"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'V'	O
}	O
,	O
{	O
"width"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'w'	O
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
static	O
void	O
no_pass	function
(	O
int	O
opt	int
)	O
__attribute__	O
(	O
(	O
noreturn	O
)	O
)	O
;	O
static	O
void	O
usage	function
(	O
int	O
status	int
)	O
__attribute__	O
(	O
(	O
noreturn	O
)	O
)	O
;	O
static	O
msgdomain_list_ty	struct
*	O
process_msgdomain_list	function
(	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
)	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
opt	int
;	O
bool	bool
do_help	bool
;	O
bool	bool
do_version	bool
;	O
char	O
*	O
output_file	pointer
;	O
const	O
char	O
*	O
input_file	pointer
;	O
int	O
grep_pass	int
;	O
msgdomain_list_ty	struct
*	O
result	pointer
;	O
catalog_input_format_ty	pointer
input_syntax	pointer
=	O
&	O
input_format_po	struct
;	O
catalog_output_format_ty	pointer
output_syntax	pointer
=	O
&	O
output_format_po	struct
;	O
bool	bool
sort_by_filepos	bool
=	O
false	int
;	O
bool	bool
sort_by_msgid	bool
=	O
false	int
;	O
size_t	long
i	long
;	O
set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
error_print_progname	pointer
=	O
maybe_print_progname	function
;	O
setlocale	function
(	O
LC_ALL	O
,	O
""	pointer
)	O
;	O
bindtextdomain	function
(	O
PACKAGE	pointer
,	O
relocate	O
(	O
LOCALEDIR	O
)	O
)	O
;	O
bindtextdomain	function
(	O
"bison-runtime"	pointer
,	O
relocate	O
(	O
BISON_LOCALEDIR	O
)	O
)	O
;	O
textdomain	function
(	O
PACKAGE	pointer
)	O
;	O
atexit	function
(	O
close_stdout	function
)	O
;	O
do_help	bool
=	O
false	int
;	O
do_version	bool
=	O
false	int
;	O
output_file	pointer
=	O
NULL	O
;	O
input_file	pointer
=	O
NULL	O
;	O
grep_pass	int
=	O
-	O
1	int
;	O
location_files	pointer
=	O
string_list_alloc	function
(	O
)	O
;	O
domain_names	pointer
=	O
string_list_alloc	function
(	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
5	int
;	O
i	long
++	O
)	O
{	O
struct	O
grep_task	struct
*	O
gt	pointer
=	O
&	O
grep_task	struct
[	O
i	long
]	O
;	O
gt	pointer
->	O
matcher	pointer
=	O
&	O
matcher_grep	struct
;	O
gt	pointer
->	O
pattern_count	long
=	O
0	int
;	O
gt	pointer
->	O
patterns	pointer
=	O
NULL	O
;	O
gt	pointer
->	O
patterns_size	long
=	O
0	int
;	O
gt	pointer
->	O
case_insensitive	bool
=	O
false	int
;	O
}	O
while	O
(	O
(	O
opt	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"CD:e:Ef:FhiJKM:n:N:o:pPTvVw:X"	pointer
,	O
long_options	array
,	O
NULL	O
)	O
)	O
!=	O
EOF	O
)	O
switch	O
(	O
opt	int
)	O
{	O
case	O
'\0'	O
:	O
break	O
;	O
case	O
'C'	O
:	O
grep_pass	int
=	O
3	int
;	O
break	O
;	O
case	O
'D'	O
:	O
dir_list_append	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'e'	O
:	O
if	O
(	O
grep_pass	int
<	O
0	int
)	O
no_pass	function
(	O
opt	int
)	O
;	O
{	O
struct	O
grep_task	struct
*	O
gt	pointer
=	O
&	O
grep_task	struct
[	O
grep_pass	int
]	O
;	O
size_t	long
len	long
=	O
strlen	function
(	O
optarg	pointer
)	O
;	O
gt	pointer
->	O
patterns	pointer
=	O
(	O
char	O
*	O
)	O
xrealloc	function
(	O
gt	pointer
->	O
patterns	pointer
,	O
gt	pointer
->	O
patterns_size	long
+	O
len	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
gt	pointer
->	O
patterns	pointer
+	O
gt	pointer
->	O
patterns_size	long
,	O
optarg	pointer
,	O
len	long
)	O
;	O
gt	pointer
->	O
patterns_size	long
+=	O
len	long
;	O
*	O
(	O
gt	pointer
->	O
patterns	pointer
+	O
gt	pointer
->	O
patterns_size	long
)	O
=	O
'\n'	O
;	O
gt	pointer
->	O
patterns_size	long
+=	O
1	int
;	O
gt	pointer
->	O
pattern_count	long
++	O
;	O
}	O
break	O
;	O
case	O
'E'	O
:	O
if	O
(	O
grep_pass	int
<	O
0	int
)	O
no_pass	function
(	O
opt	int
)	O
;	O
grep_task	struct
[	O
grep_pass	int
]	O
.	O
matcher	pointer
=	O
&	O
matcher_egrep	struct
;	O
break	O
;	O
case	O
'f'	O
:	O
if	O
(	O
grep_pass	int
<	O
0	int
)	O
no_pass	function
(	O
opt	int
)	O
;	O
{	O
struct	O
grep_task	struct
*	O
gt	pointer
=	O
&	O
grep_task	struct
[	O
grep_pass	int
]	O
;	O
FILE	struct
*	O
fp	pointer
=	O
fopen	function
(	O
optarg	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
fp	pointer
==	O
NULL	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error while opening \"%s\" for reading"	pointer
)	O
,	O
optarg	pointer
)	O
;	O
while	O
(	O
!	O
feof	function
(	O
fp	pointer
)	O
)	O
{	O
char	O
buf	pointer
[	O
4096	int
]	O
;	O
size_t	long
count	long
=	O
fread	function
(	O
buf	pointer
,	O
1	int
,	O
sizeof	O
buf	pointer
,	O
fp	pointer
)	O
;	O
if	O
(	O
count	long
==	O
0	int
)	O
{	O
if	O
(	O
ferror	function
(	O
fp	pointer
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error while reading \"%s\""	pointer
)	O
,	O
optarg	pointer
)	O
;	O
break	O
;	O
}	O
gt	pointer
->	O
patterns	pointer
=	O
(	O
char	O
*	O
)	O
xrealloc	function
(	O
gt	pointer
->	O
patterns	pointer
,	O
gt	pointer
->	O
patterns_size	long
+	O
count	long
)	O
;	O
memcpy	function
(	O
gt	pointer
->	O
patterns	pointer
+	O
gt	pointer
->	O
patterns_size	long
,	O
buf	pointer
,	O
count	long
)	O
;	O
gt	pointer
->	O
patterns_size	long
+=	O
count	long
;	O
}	O
if	O
(	O
gt	pointer
->	O
patterns_size	long
>	O
0	int
&&	O
*	O
(	O
gt	pointer
->	O
patterns	pointer
+	O
gt	pointer
->	O
patterns_size	long
-	O
1	int
)	O
!=	O
'\n'	O
)	O
{	O
gt	pointer
->	O
patterns	pointer
=	O
(	O
char	O
*	O
)	O
xrealloc	function
(	O
gt	pointer
->	O
patterns	pointer
,	O
gt	pointer
->	O
patterns_size	long
+	O
1	int
)	O
;	O
*	O
(	O
gt	pointer
->	O
patterns	pointer
+	O
gt	pointer
->	O
patterns_size	long
)	O
=	O
'\n'	O
;	O
gt	pointer
->	O
patterns_size	long
+=	O
1	int
;	O
}	O
fclose	function
(	O
fp	pointer
)	O
;	O
gt	pointer
->	O
pattern_count	long
++	O
;	O
}	O
break	O
;	O
case	O
'F'	O
:	O
if	O
(	O
grep_pass	int
<	O
0	int
)	O
no_pass	function
(	O
opt	int
)	O
;	O
grep_task	struct
[	O
grep_pass	int
]	O
.	O
matcher	pointer
=	O
&	O
matcher_fgrep	struct
;	O
break	O
;	O
case	O
'h'	O
:	O
do_help	bool
=	O
true	int
;	O
break	O
;	O
case	O
'i'	O
:	O
if	O
(	O
grep_pass	int
<	O
0	int
)	O
no_pass	function
(	O
opt	int
)	O
;	O
grep_task	struct
[	O
grep_pass	int
]	O
.	O
case_insensitive	bool
=	O
true	int
;	O
break	O
;	O
case	O
'J'	O
:	O
grep_pass	int
=	O
0	int
;	O
break	O
;	O
case	O
'K'	O
:	O
grep_pass	int
=	O
1	int
;	O
break	O
;	O
case	O
'M'	O
:	O
string_list_append	function
(	O
domain_names	pointer
,	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
if	O
(	O
handle_filepos_comment_option	function
(	O
optarg	pointer
)	O
)	O
usage	function
(	O
EXIT_FAILURE	int
)	O
;	O
break	O
;	O
case	O
'N'	O
:	O
string_list_append	function
(	O
location_files	pointer
,	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'o'	O
:	O
output_file	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
'p'	O
:	O
output_syntax	pointer
=	O
&	O
output_format_properties	struct
;	O
break	O
;	O
case	O
'P'	O
:	O
input_syntax	pointer
=	O
&	O
input_format_properties	struct
;	O
break	O
;	O
case	O
'S'	O
:	O
message_print_style_uniforum	function
(	O
)	O
;	O
break	O
;	O
case	O
'T'	O
:	O
grep_pass	int
=	O
2	int
;	O
break	O
;	O
case	O
'v'	O
:	O
invert_match	bool
=	O
true	int
;	O
break	O
;	O
case	O
'V'	O
:	O
do_version	bool
=	O
true	int
;	O
break	O
;	O
case	O
'w'	O
:	O
{	O
int	O
value	int
;	O
char	O
*	O
endp	pointer
;	O
value	int
=	O
strtol	function
(	O
optarg	pointer
,	O
&	O
endp	pointer
,	O
10	int
)	O
;	O
if	O
(	O
endp	pointer
!=	O
optarg	pointer
)	O
message_page_width_set	function
(	O
value	int
)	O
;	O
}	O
break	O
;	O
case	O
'X'	O
:	O
grep_pass	int
=	O
4	int
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
1	int
:	O
message_print_style_escape	function
(	O
true	int
)	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
2	int
:	O
message_print_style_indent	function
(	O
)	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
3	int
:	O
message_print_style_escape	function
(	O
false	int
)	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
4	int
:	O
sort_by_filepos	bool
=	O
true	int
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
5	int
:	O
sort_by_msgid	bool
=	O
true	int
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
6	int
:	O
message_page_width_ignore	function
(	O
)	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
7	int
:	O
input_syntax	pointer
=	O
&	O
input_format_stringtable	struct
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
8	int
:	O
output_syntax	pointer
=	O
&	O
output_format_stringtable	struct
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
9	int
:	O
if	O
(	O
handle_color_option	function
(	O
optarg	pointer
)	O
||	O
color_test_mode	bool
)	O
usage	function
(	O
EXIT_FAILURE	int
)	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
10	int
:	O
handle_style_option	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
11	int
:	O
message_print_style_filepos	function
(	O
filepos_comment_none	int
)	O
;	O
break	O
;	O
default	O
:	O
usage	function
(	O
EXIT_FAILURE	int
)	O
;	O
break	O
;	O
}	O
if	O
(	O
do_version	bool
)	O
{	O
printf	function
(	O
"%s (GNU %s) %s\n"	pointer
,	O
basename	function
(	O
program_name	pointer
)	O
,	O
PACKAGE	pointer
,	O
VERSION	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Copyright (C) %s Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n"	pointer
)	O
,	O
"2001-2019"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Written by %s.\n"	pointer
)	O
,	O
proper_name	function
(	O
"Bruno Haible"	pointer
)	O
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
if	O
(	O
do_help	bool
)	O
usage	function
(	O
EXIT_SUCCESS	int
)	O
;	O
if	O
(	O
optind	int
==	O
argc	int
)	O
input_file	pointer
=	O
"-"	pointer
;	O
else	O
if	O
(	O
optind	int
+	O
1	int
==	O
argc	int
)	O
input_file	pointer
=	O
argv	pointer
[	O
optind	int
]	O
;	O
else	O
{	O
error	function
(	O
EXIT_SUCCESS	int
,	O
0	int
,	O
_	O
(	O
"at most one input file allowed"	pointer
)	O
)	O
;	O
usage	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
sort_by_msgid	bool
&&	O
sort_by_filepos	bool
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"%s and %s are mutually exclusive"	pointer
)	O
,	O
"--sort-output"	pointer
,	O
"--sort-by-file"	pointer
)	O
;	O
for	O
(	O
grep_pass	int
=	O
0	int
;	O
grep_pass	int
<	O
5	int
;	O
grep_pass	int
++	O
)	O
{	O
struct	O
grep_task	struct
*	O
gt	pointer
=	O
&	O
grep_task	struct
[	O
grep_pass	int
]	O
;	O
if	O
(	O
gt	pointer
->	O
pattern_count	long
>	O
0	int
)	O
{	O
if	O
(	O
gt	pointer
->	O
patterns_size	long
>	O
0	int
)	O
{	O
assert	O
(	O
gt	pointer
->	O
patterns	pointer
[	O
gt	pointer
->	O
patterns_size	long
-	O
1	int
]	O
==	O
'\n'	O
)	O
;	O
gt	pointer
->	O
patterns_size	long
--	O
;	O
}	O
gt	pointer
->	O
compiled_patterns	pointer
=	O
gt	pointer
->	O
matcher	pointer
->	O
compile	pointer
(	O
gt	pointer
->	O
patterns	pointer
,	O
gt	pointer
->	O
patterns_size	long
,	O
gt	pointer
->	O
case_insensitive	bool
,	O
false	int
,	O
false	int
,	O
'\n'	O
)	O
;	O
}	O
}	O
result	pointer
=	O
read_catalog_file	function
(	O
input_file	pointer
,	O
input_syntax	pointer
)	O
;	O
if	O
(	O
grep_task	struct
[	O
0	int
]	O
.	O
pattern_count	long
>	O
0	int
||	O
grep_task	struct
[	O
1	int
]	O
.	O
pattern_count	long
>	O
0	int
||	O
grep_task	struct
[	O
2	int
]	O
.	O
pattern_count	long
>	O
0	int
||	O
grep_task	struct
[	O
3	int
]	O
.	O
pattern_count	long
>	O
0	int
||	O
grep_task	struct
[	O
4	int
]	O
.	O
pattern_count	long
>	O
0	int
)	O
{	O
compare_po_locale_charsets	function
(	O
result	pointer
)	O
;	O
}	O
result	pointer
=	O
process_msgdomain_list	function
(	O
result	pointer
)	O
;	O
if	O
(	O
sort_by_filepos	bool
)	O
msgdomain_list_sort_by_filepos	function
(	O
result	pointer
)	O
;	O
else	O
if	O
(	O
sort_by_msgid	bool
)	O
msgdomain_list_sort_by_msgid	function
(	O
result	pointer
)	O
;	O
msgdomain_list_print	function
(	O
result	pointer
,	O
output_file	pointer
,	O
output_syntax	pointer
,	O
force_po	int
,	O
false	int
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
static	O
void	O
no_pass	function
(	O
int	O
opt	int
)	O
{	O
error	function
(	O
EXIT_SUCCESS	int
,	O
0	int
,	O
_	O
(	O
"option '%c' cannot be used before 'J' or 'K' or 'T' or 'C' or 'X' has been specified"	pointer
)	O
,	O
opt	int
)	O
;	O
usage	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
static	O
void	O
usage	function
(	O
int	O
status	int
)	O
{	O
if	O
(	O
status	int
!=	O
EXIT_SUCCESS	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"Try '%s --help' for more information.\n"	pointer
)	O
,	O
program_name	pointer
)	O
;	O
else	O
{	O
printf	function
(	O
_	O
(	O
"Usage: %s [OPTION] [INPUTFILE]\n"	pointer
)	O
,	O
program_name	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Extracts all messages of a translation catalog that match a given pattern\nor belong to some given source files.\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Mandatory arguments to long options are mandatory for short options too.\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Input file location:\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  INPUTFILE                   input PO file\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -D, --directory=DIRECTORY   add DIRECTORY to list for input files search\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"If no input file is given or if it is -, standard input is read.\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Output file location:\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -o, --output-file=FILE      write output to specified file\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"The results are written to standard output if no output file is specified\nor if it is -.\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Message selection:\n  [-N SOURCEFILE]... [-M DOMAINNAME]...\n  [-J MSGCTXT-PATTERN] [-K MSGID-PATTERN] [-T MSGSTR-PATTERN]\n  [-C COMMENT-PATTERN] [-X EXTRACTED-COMMENT-PATTERN]\nA message is selected if it comes from one of the specified source files,\nor if it comes from one of the specified domains,\nor if -J is given and its context (msgctxt) matches MSGCTXT-PATTERN,\nor if -K is given and its key (msgid or msgid_plural) matches MSGID-PATTERN,\nor if -T is given and its translation (msgstr) matches MSGSTR-PATTERN,\nor if -C is given and the translator's comment matches COMMENT-PATTERN,\nor if -X is given and the extracted comment matches EXTRACTED-COMMENT-PATTERN.\n\nWhen more than one selection criterion is specified, the set of selected\nmessages is the union of the selected messages of each criterion.\n\nMSGCTXT-PATTERN or MSGID-PATTERN or MSGSTR-PATTERN or COMMENT-PATTERN or\nEXTRACTED-COMMENT-PATTERN syntax:\n  [-E | -F] [-e PATTERN | -f FILE]...\nPATTERNs are basic regular expressions by default, or extended regular\nexpressions if -E is given, or fixed strings if -F is given.\n\n  -N, --location=SOURCEFILE   select messages extracted from SOURCEFILE\n  -M, --domain=DOMAINNAME     select messages belonging to domain DOMAINNAME\n  -J, --msgctxt               start of patterns for the msgctxt\n  -K, --msgid                 start of patterns for the msgid\n  -T, --msgstr                start of patterns for the msgstr\n  -C, --comment               start of patterns for the translator's comment\n  -X, --extracted-comment     start of patterns for the extracted comment\n  -E, --extended-regexp       PATTERN is an extended regular expression\n  -F, --fixed-strings         PATTERN is a set of newline-separated strings\n  -e, --regexp=PATTERN        use PATTERN as a regular expression\n  -f, --file=FILE             obtain PATTERN from FILE\n  -i, --ignore-case           ignore case distinctions\n  -v, --invert-match          output only the messages that do not match any\n                              selection criterion\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Input file syntax:\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -P, --properties-input      input file is in Java .properties syntax\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"      --stringtable-input     input file is in NeXTstep/GNUstep .strings syntax\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Output details:\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"      --color                 use colors and other text attributes always\n      --color=WHEN            use colors and other text attributes if WHEN.\n                              WHEN may be 'always', 'never', 'auto', or 'html'.\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"      --style=STYLEFILE       specify CSS style rule file for --color\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"      --no-escape             do not use C escapes in output (default)\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"      --escape                use C escapes in output, no extended chars\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"      --force-po              write PO file even if empty\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"      --indent                indented output style\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"      --no-location           suppress '#: filename:line' lines\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -n, --add-location          preserve '#: filename:line' lines (default)\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"      --strict                strict Uniforum output style\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -p, --properties-output     write out a Java .properties file\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"      --stringtable-output    write out a NeXTstep/GNUstep .strings file\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -w, --width=NUMBER          set output page width\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"      --no-wrap               do not break long message lines, longer than\n                              the output page width, into several lines\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"      --sort-output           generate sorted output\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"      --sort-by-file          sort output by file location\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Informative output:\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -h, --help                  display this help and exit\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -V, --version               output version information and exit\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"Report bugs to <bug-gnu-gettext@gnu.org>.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
}	O
exit	function
(	O
status	int
)	O
;	O
}	O
static	O
bool	bool
filename_list_match	function
(	O
const	O
string_list_ty	struct
*	O
slp	pointer
,	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
slp	pointer
->	O
nitems	long
;	O
++	O
j	long
)	O
if	O
(	O
fnmatch	function
(	O
slp	pointer
->	O
item	pointer
[	O
j	long
]	O
,	O
filename	pointer
,	O
FNM_PATHNAME	O
)	O
==	O
0	int
)	O
return	O
true	int
;	O
return	O
false	int
;	O
}	O
static	O
inline	O
int	O
nonintr_close	function
(	O
int	O
fd	array
)	O
{	O
int	O
retval	int
;	O
do	O
retval	int
=	O
close	pointer
(	O
fd	array
)	O
;	O
while	O
(	O
retval	int
<	O
0	int
&&	O
errno	O
==	O
EINTR	int
)	O
;	O
return	O
retval	int
;	O
}	O
static	O
bool	bool
is_string_selected	function
(	O
int	O
grep_pass	int
,	O
const	O
char	O
*	O
str	pointer
,	O
size_t	long
len	long
)	O
{	O
const	O
struct	O
grep_task	struct
*	O
gt	pointer
=	O
&	O
grep_task	struct
[	O
grep_pass	int
]	O
;	O
if	O
(	O
gt	pointer
->	O
pattern_count	long
>	O
0	int
)	O
{	O
size_t	long
match_size	pointer
;	O
size_t	long
match_offset	long
;	O
match_offset	long
=	O
gt	pointer
->	O
matcher	pointer
->	O
execute	pointer
(	O
gt	pointer
->	O
compiled_patterns	pointer
,	O
str	pointer
,	O
len	long
,	O
&	O
match_size	pointer
,	O
false	int
)	O
;	O
return	O
(	O
match_offset	long
!=	O
(	O
size_t	long
)	O
-	O
1	int
)	O
;	O
}	O
else	O
return	O
0	int
;	O
}	O
static	O
bool	bool
is_message_selected_no_invert	function
(	O
const	O
message_ty	struct
*	O
mp	pointer
)	O
{	O
size_t	long
i	long
;	O
const	O
char	O
*	O
msgstr	pointer
;	O
size_t	long
msgstr_len	long
;	O
const	O
char	O
*	O
p	pointer
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mp	pointer
->	O
filepos_count	long
;	O
i	long
++	O
)	O
if	O
(	O
filename_list_match	function
(	O
location_files	pointer
,	O
mp	pointer
->	O
filepos	pointer
[	O
i	long
]	O
.	O
file_name	pointer
)	O
)	O
return	O
true	int
;	O
if	O
(	O
mp	pointer
->	O
msgctxt	pointer
!=	O
NULL	O
&&	O
is_string_selected	function
(	O
0	int
,	O
mp	pointer
->	O
msgctxt	pointer
,	O
strlen	function
(	O
mp	pointer
->	O
msgctxt	pointer
)	O
)	O
)	O
return	O
true	int
;	O
if	O
(	O
is_string_selected	function
(	O
1	int
,	O
mp	pointer
->	O
msgid	pointer
,	O
strlen	function
(	O
mp	pointer
->	O
msgid	pointer
)	O
)	O
)	O
return	O
true	int
;	O
if	O
(	O
mp	pointer
->	O
msgid_plural	pointer
!=	O
NULL	O
&&	O
is_string_selected	function
(	O
1	int
,	O
mp	pointer
->	O
msgid_plural	pointer
,	O
strlen	function
(	O
mp	pointer
->	O
msgid_plural	pointer
)	O
)	O
)	O
return	O
true	int
;	O
msgstr	pointer
=	O
mp	pointer
->	O
msgstr	pointer
;	O
msgstr_len	long
=	O
mp	pointer
->	O
msgstr_len	long
;	O
for	O
(	O
p	pointer
=	O
msgstr	pointer
;	O
p	pointer
<	O
msgstr	pointer
+	O
msgstr_len	long
;	O
)	O
{	O
size_t	long
length	long
=	O
strlen	function
(	O
p	pointer
)	O
;	O
if	O
(	O
is_string_selected	function
(	O
2	int
,	O
p	pointer
,	O
length	long
)	O
)	O
return	O
true	int
;	O
p	pointer
+=	O
length	long
+	O
1	int
;	O
}	O
if	O
(	O
grep_task	struct
[	O
3	int
]	O
.	O
pattern_count	long
>	O
0	int
&&	O
mp	pointer
->	O
comment	pointer
!=	O
NULL	O
&&	O
mp	pointer
->	O
comment	pointer
->	O
nitems	long
>	O
0	int
)	O
{	O
size_t	long
length	long
;	O
char	O
*	O
total_comment	pointer
;	O
char	O
*	O
q	pointer
;	O
size_t	long
j	long
;	O
bool	bool
selected	bool
;	O
length	long
=	O
0	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mp	pointer
->	O
comment	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
length	long
+=	O
strlen	function
(	O
mp	pointer
->	O
comment	pointer
->	O
item	pointer
[	O
j	long
]	O
)	O
+	O
1	int
;	O
total_comment	pointer
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
length	long
)	O
;	O
q	pointer
=	O
total_comment	pointer
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mp	pointer
->	O
comment	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
{	O
size_t	long
l	long
=	O
strlen	function
(	O
mp	pointer
->	O
comment	pointer
->	O
item	pointer
[	O
j	long
]	O
)	O
;	O
memcpy	function
(	O
q	pointer
,	O
mp	pointer
->	O
comment	pointer
->	O
item	pointer
[	O
j	long
]	O
,	O
l	long
)	O
;	O
q	pointer
+=	O
l	long
;	O
*	O
q	pointer
++	O
=	O
'\n'	O
;	O
}	O
if	O
(	O
q	pointer
!=	O
total_comment	pointer
+	O
length	long
)	O
abort	function
(	O
)	O
;	O
selected	bool
=	O
is_string_selected	function
(	O
3	int
,	O
total_comment	pointer
,	O
length	long
)	O
;	O
freea	function
(	O
total_comment	pointer
)	O
;	O
if	O
(	O
selected	bool
)	O
return	O
true	int
;	O
}	O
if	O
(	O
grep_task	struct
[	O
4	int
]	O
.	O
pattern_count	long
>	O
0	int
&&	O
mp	pointer
->	O
comment_dot	pointer
!=	O
NULL	O
&&	O
mp	pointer
->	O
comment_dot	pointer
->	O
nitems	long
>	O
0	int
)	O
{	O
size_t	long
length	long
;	O
char	O
*	O
total_comment	pointer
;	O
char	O
*	O
q	pointer
;	O
size_t	long
j	long
;	O
bool	bool
selected	bool
;	O
length	long
=	O
0	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mp	pointer
->	O
comment_dot	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
length	long
+=	O
strlen	function
(	O
mp	pointer
->	O
comment_dot	pointer
->	O
item	pointer
[	O
j	long
]	O
)	O
+	O
1	int
;	O
total_comment	pointer
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
length	long
)	O
;	O
q	pointer
=	O
total_comment	pointer
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mp	pointer
->	O
comment_dot	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
{	O
size_t	long
l	long
=	O
strlen	function
(	O
mp	pointer
->	O
comment_dot	pointer
->	O
item	pointer
[	O
j	long
]	O
)	O
;	O
memcpy	function
(	O
q	pointer
,	O
mp	pointer
->	O
comment_dot	pointer
->	O
item	pointer
[	O
j	long
]	O
,	O
l	long
)	O
;	O
q	pointer
+=	O
l	long
;	O
*	O
q	pointer
++	O
=	O
'\n'	O
;	O
}	O
if	O
(	O
q	pointer
!=	O
total_comment	pointer
+	O
length	long
)	O
abort	function
(	O
)	O
;	O
selected	bool
=	O
is_string_selected	function
(	O
4	int
,	O
total_comment	pointer
,	O
length	long
)	O
;	O
freea	function
(	O
total_comment	pointer
)	O
;	O
if	O
(	O
selected	bool
)	O
return	O
true	int
;	O
}	O
return	O
false	int
;	O
}	O
static	O
bool	bool
is_message_selected	function
(	O
const	O
message_ty	struct
*	O
mp	pointer
)	O
{	O
bool	bool
result	pointer
;	O
if	O
(	O
is_header	O
(	O
mp	pointer
)	O
)	O
return	O
true	int
;	O
result	pointer
=	O
is_message_selected_no_invert	function
(	O
mp	pointer
)	O
;	O
if	O
(	O
invert_match	bool
)	O
return	O
!	O
result	pointer
;	O
else	O
return	O
result	pointer
;	O
}	O
static	O
void	O
process_message_list	function
(	O
const	O
char	O
*	O
domain	pointer
,	O
message_list_ty	struct
*	O
mlp	pointer
)	O
{	O
if	O
(	O
string_list_member	function
(	O
domain_names	pointer
,	O
domain	pointer
)	O
)	O
;	O
else	O
message_list_remove_if_not	function
(	O
mlp	pointer
,	O
is_message_selected	function
)	O
;	O
}	O
static	O
msgdomain_list_ty	struct
*	O
process_msgdomain_list	function
(	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
)	O
{	O
size_t	long
k	long
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
mdlp	pointer
->	O
nitems	long
;	O
k	long
++	O
)	O
process_message_list	function
(	O
mdlp	pointer
->	O
item	pointer
[	O
k	long
]	O
->	O
domain	pointer
,	O
mdlp	pointer
->	O
item	pointer
[	O
k	long
]	O
->	O
messages	pointer
)	O
;	O
return	O
mdlp	pointer
;	O
}	O