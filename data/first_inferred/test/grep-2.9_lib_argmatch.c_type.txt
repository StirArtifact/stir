ARGMATCH_DIE_DECL	struct
;	O
static	O
void	O
__argmatch_die	function
(	O
void	O
)	O
{	O
ARGMATCH_DIE	int
;	O
}	O
argmatch_exit_fn	*
argmatch_die	*
=	O
__argmatch_die	*
;	O
ptrdiff_t	bool
argmatch	function
(	O
const	O
char	O
*	O
arg	*
,	O
const	O
char	O
*	O
const	O
*	O
arglist	*
,	O
const	O
char	O
*	O
vallist	*
,	O
size_t	long
valsize	long
)	O
{	O
size_t	long
i	long
;	O
size_t	long
arglen	long
;	O
ptrdiff_t	long
matchind	long
=	O
-	O
1	int
;	O
bool	bool
ambiguous	bool
=	O
false	int
;	O
arglen	long
=	O
strlen	function
(	O
arg	*
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
arglist	array
[	O
i	long
]	O
;	O
i	long
++	O
)	O
{	O
if	O
(	O
!	O
strncmp	function
(	O
arglist	array
[	O
i	*
]	O
,	O
arg	*
,	O
arglen	*
)	O
)	O
{	O
if	O
(	O
strlen	function
(	O
arglist	array
[	O
i	long
]	O
)	O
==	O
arglen	*
)	O
return	O
i	long
;	O
else	O
if	O
(	O
matchind	int
==	O
-	O
1	int
)	O
matchind	long
=	O
i	long
;	O
else	O
{	O
if	O
(	O
vallist	*
==	O
NULL	O
||	O
memcmp	function
(	O
vallist	*
+	O
valsize	struct
*	O
matchind	*
,	O
vallist	*
+	O
valsize	O
*	O
i	long
,	O
valsize	int
)	O
)	O
{	O
ambiguous	bool
=	O
true	int
;	O
}	O
}	O
}	O
}	O
if	O
(	O
ambiguous	*
)	O
return	O
-	O
2	int
;	O
else	O
return	O
matchind	*
;	O
}	O
void	O
argmatch_invalid	function
(	O
const	O
char	O
*	O
context	*
,	O
const	O
char	O
*	O
value	*
,	O
ptrdiff_t	long
problem	long
)	O
{	O
char	O
const	O
*	O
format	*
=	O
(	O
problem	int
==	O
-	O
1	int
?	O
_	O
(	O
"invalid argument %s for %s"	*
)	O
:	O
_	O
(	O
"ambiguous argument %s for %s"	*
)	O
)	O
;	O
error	function
(	O
0	int
,	O
0	int
,	O
format	*
,	O
quotearg_n_style	function
(	O
0	int
,	O
ARGMATCH_QUOTING_STYLE	*
,	O
value	*
)	O
,	O
quote_n	function
(	O
1	int
,	O
context	*
)	O
)	O
;	O
}	O
void	O
argmatch_valid	function
(	O
const	O
char	O
*	O
const	O
*	O
arglist	*
,	O
const	O
char	O
*	O
vallist	*
,	O
size_t	long
valsize	long
)	O
{	O
size_t	long
i	long
;	O
const	O
char	O
*	O
last_val	*
=	O
NULL	O
;	O
fprintf	function
(	O
stderr	*
,	O
_	O
(	O
"Valid arguments are:"	*
)	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
arglist	array
[	O
i	long
]	O
;	O
i	long
++	O
)	O
if	O
(	O
(	O
i	long
==	O
0	int
)	O
||	O
memcmp	function
(	O
last_val	*
,	O
vallist	*
+	O
valsize	O
*	O
i	long
,	O
valsize	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	*
,	O
"\n  - `%s'"	*
,	O
arglist	array
[	O
i	long
]	O
)	O
;	O
last_val	*
=	O
vallist	*
+	O
valsize	O
*	O
i	long
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	*
,	O
", `%s'"	*
,	O
arglist	array
[	O
i	long
]	O
)	O
;	O
}	O
putc	function
(	O
'\n'	O
,	O
stderr	*
)	O
;	O
}	O
ptrdiff_t	bool
__xargmatch_internal	function
(	O
const	O
char	O
*	O
context	*
,	O
const	O
char	O
*	O
arg	*
,	O
const	O
char	O
*	O
const	O
*	O
arglist	*
,	O
const	O
char	O
*	O
vallist	*
,	O
size_t	long
valsize	long
,	O
argmatch_exit_fn	*
exit_fn	*
)	O
{	O
ptrdiff_t	long
res	long
=	O
argmatch	function
(	O
arg	*
,	O
arglist	int
,	O
vallist	*
,	O
valsize	*
)	O
;	O
if	O
(	O
res	int
>=	O
0	int
)	O
return	O
res	*
;	O
argmatch_invalid	function
(	O
context	*
,	O
arg	*
,	O
res	*
)	O
;	O
argmatch_valid	function
(	O
arglist	int
,	O
vallist	*
,	O
valsize	int
)	O
;	O
(	O
*	O
exit_fn	*
)	O
(	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
const	O
char	O
*	O
argmatch_to_argument	function
(	O
const	O
char	O
*	O
value	*
,	O
const	O
char	O
*	O
const	O
*	O
arglist	*
,	O
const	O
char	O
*	O
vallist	*
,	O
size_t	long
valsize	long
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
arglist	array
[	O
i	long
]	O
;	O
i	long
++	O
)	O
if	O
(	O
!	O
memcmp	function
(	O
value	*
,	O
vallist	*
+	O
valsize	O
*	O
i	int
,	O
valsize	int
)	O
)	O
return	O
arglist	array
[	O
i	long
]	O
;	O
return	O
NULL	O
;	O
}	O