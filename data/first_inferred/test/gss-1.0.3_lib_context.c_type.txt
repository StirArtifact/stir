OM_uint32	int
gss_init_sec_context	function
(	O
OM_uint32	int
*	O
minor_status	*
,	O
const	O
gss_cred_id_t	*
initiator_cred_handle	*
,	O
gss_ctx_id_t	*
*	O
context_handle	*
,	O
const	O
gss_name_t	*
target_name	*
,	O
const	O
gss_OID	*
mech_type	*
,	O
OM_uint32	int
req_flags	int
,	O
OM_uint32	int
time_req	int
,	O
const	O
gss_channel_bindings_t	*
input_chan_bindings	*
,	O
const	O
gss_buffer_t	*
input_token	*
,	O
gss_OID	*
*	O
actual_mech_type	*
,	O
gss_buffer_t	*
output_token	*
,	O
OM_uint32	int
*	O
ret_flags	*
,	O
OM_uint32	int
*	O
time_rec	*
)	O
{	O
OM_uint32	int
maj_stat	int
;	O
_gss_mech_api_t	*
mech	*
;	O
int	O
freecontext	int
=	O
0	int
;	O
if	O
(	O
output_token	*
)	O
{	O
output_token	*
->	O
length	int
=	O
0	int
;	O
output_token	*
->	O
value	*
=	O
NULL	O
;	O
}	O
if	O
(	O
ret_flags	*
)	O
*	O
ret_flags	*
=	O
0	int
;	O
if	O
(	O
!	O
context_handle	*
)	O
{	O
if	O
(	O
minor_status	*
)	O
*	O
minor_status	*
=	O
0	int
;	O
return	O
GSS_S_NO_CONTEXT	O
|	O
GSS_S_CALL_INACCESSIBLE_READ	O
;	O
}	O
if	O
(	O
output_token	int
==	O
GSS_C_NO_BUFFER	O
)	O
{	O
if	O
(	O
minor_status	*
)	O
*	O
minor_status	*
=	O
0	int
;	O
return	O
GSS_S_FAILURE	O
|	O
GSS_S_CALL_BAD_STRUCTURE	O
;	O
}	O
if	O
(	O
*	O
context_handle	*
==	O
GSS_C_NO_CONTEXT	*
)	O
mech	*
=	O
_gss_find_mech	function
(	O
mech_type	*
)	O
;	O
else	O
mech	*
=	O
_gss_find_mech	function
(	O
(	O
*	O
context_handle	*
)	O
->	O
mech	*
)	O
;	O
if	O
(	O
mech	*
==	O
NULL	O
)	O
{	O
if	O
(	O
minor_status	*
)	O
*	O
minor_status	*
=	O
0	int
;	O
return	O
GSS_S_BAD_MECH	O
;	O
}	O
if	O
(	O
actual_mech_type	*
)	O
*	O
actual_mech_type	*
=	O
mech	*
->	O
mech	*
;	O
if	O
(	O
*	O
context_handle	*
==	O
GSS_C_NO_CONTEXT	int
)	O
{	O
*	O
context_handle	*
=	O
calloc	function
(	O
sizeof	O
(	O
*	O
*	O
context_handle	*
)	O
,	O
1	int
)	O
;	O
if	O
(	O
!	O
*	O
context_handle	*
)	O
{	O
if	O
(	O
minor_status	*
)	O
*	O
minor_status	*
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
(	O
*	O
context_handle	*
)	O
->	O
mech	*
=	O
mech	*
->	O
mech	*
;	O
freecontext	int
=	O
1	int
;	O
}	O
maj_stat	int
=	O
mech	*
->	O
init_sec_context	*
(	O
minor_status	*
,	O
initiator_cred_handle	*
,	O
context_handle	*
,	O
target_name	*
,	O
mech_type	*
,	O
req_flags	*
,	O
time_req	int
,	O
input_chan_bindings	*
,	O
input_token	*
,	O
actual_mech_type	*
,	O
output_token	*
,	O
ret_flags	*
,	O
time_rec	*
)	O
;	O
if	O
(	O
GSS_ERROR	O
(	O
maj_stat	int
)	O
&&	O
freecontext	*
)	O
{	O
free	function
(	O
*	O
context_handle	*
)	O
;	O
*	O
context_handle	*
=	O
GSS_C_NO_CONTEXT	int
;	O
}	O
return	O
maj_stat	int
;	O
}	O
OM_uint32	int
gss_accept_sec_context	function
(	O
OM_uint32	int
*	O
minor_status	*
,	O
gss_ctx_id_t	*
*	O
context_handle	*
,	O
const	O
gss_cred_id_t	*
acceptor_cred_handle	*
,	O
const	O
gss_buffer_t	*
input_token_buffer	*
,	O
const	O
gss_channel_bindings_t	*
input_chan_bindings	*
,	O
gss_name_t	*
*	O
src_name	*
,	O
gss_OID	*
*	O
mech_type	*
,	O
gss_buffer_t	*
output_token	*
,	O
OM_uint32	int
*	O
ret_flags	*
,	O
OM_uint32	int
*	O
time_rec	*
,	O
gss_cred_id_t	*
*	O
delegated_cred_handle	*
)	O
{	O
_gss_mech_api_t	*
mech	*
;	O
if	O
(	O
!	O
context_handle	*
)	O
{	O
if	O
(	O
minor_status	*
)	O
*	O
minor_status	*
=	O
0	int
;	O
return	O
GSS_S_NO_CONTEXT	O
|	O
GSS_S_CALL_INACCESSIBLE_READ	O
;	O
}	O
if	O
(	O
*	O
context_handle	*
==	O
GSS_C_NO_CONTEXT	int
)	O
{	O
char	O
*	O
oid	*
;	O
size_t	long
oidlen	int
;	O
gss_OID_desc	struct
oidbuf	struct
;	O
int	O
rc	int
;	O
rc	int
=	O
_gss_decapsulate_token	function
(	O
input_token_buffer	*
->	O
value	*
,	O
input_token_buffer	*
->	O
length	long
,	O
&	O
oid	*
,	O
&	O
oidlen	int
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
!=	O
0	int
)	O
{	O
if	O
(	O
minor_status	*
)	O
*	O
minor_status	*
=	O
0	int
;	O
return	O
GSS_S_DEFECTIVE_TOKEN	O
;	O
}	O
oidbuf	struct
.	O
elements	*
=	O
oid	*
;	O
oidbuf	struct
.	O
length	long
=	O
oidlen	int
;	O
mech	*
=	O
_gss_find_mech_no_default	function
(	O
&	O
oidbuf	*
)	O
;	O
}	O
else	O
mech	*
=	O
_gss_find_mech_no_default	function
(	O
(	O
*	O
context_handle	*
)	O
->	O
mech	*
)	O
;	O
if	O
(	O
mech	*
==	O
NULL	O
)	O
{	O
if	O
(	O
minor_status	*
)	O
*	O
minor_status	*
=	O
0	int
;	O
return	O
GSS_S_BAD_MECH	O
;	O
}	O
if	O
(	O
mech_type	*
)	O
*	O
mech_type	*
=	O
mech	*
->	O
mech	*
;	O
return	O
mech	*
->	O
accept_sec_context	*
(	O
minor_status	*
,	O
context_handle	*
,	O
acceptor_cred_handle	*
,	O
input_token_buffer	*
,	O
input_chan_bindings	*
,	O
src_name	*
,	O
mech_type	*
,	O
output_token	*
,	O
ret_flags	*
,	O
time_rec	*
,	O
delegated_cred_handle	*
)	O
;	O
}	O
OM_uint32	int
gss_delete_sec_context	function
(	O
OM_uint32	int
*	O
minor_status	*
,	O
gss_ctx_id_t	*
*	O
context_handle	*
,	O
gss_buffer_t	*
output_token	*
)	O
{	O
_gss_mech_api_t	*
mech	*
;	O
OM_uint32	int
ret	int
;	O
if	O
(	O
!	O
context_handle	*
)	O
{	O
if	O
(	O
minor_status	*
)	O
*	O
minor_status	*
=	O
0	int
;	O
return	O
GSS_S_NO_CONTEXT	O
|	O
GSS_S_CALL_INACCESSIBLE_READ	O
;	O
}	O
if	O
(	O
*	O
context_handle	*
==	O
GSS_C_NO_CONTEXT	int
)	O
{	O
if	O
(	O
minor_status	*
)	O
*	O
minor_status	*
=	O
0	int
;	O
return	O
GSS_S_NO_CONTEXT	O
|	O
GSS_S_CALL_BAD_STRUCTURE	O
;	O
}	O
if	O
(	O
output_token	int
!=	O
GSS_C_NO_BUFFER	O
)	O
{	O
output_token	*
->	O
length	int
=	O
0	int
;	O
output_token	*
->	O
value	*
=	O
NULL	O
;	O
}	O
mech	*
=	O
_gss_find_mech	function
(	O
(	O
*	O
context_handle	*
)	O
->	O
mech	*
)	O
;	O
if	O
(	O
mech	*
==	O
NULL	O
)	O
{	O
if	O
(	O
minor_status	*
)	O
*	O
minor_status	*
=	O
0	int
;	O
return	O
GSS_S_BAD_MECH	O
;	O
}	O
ret	int
=	O
mech	*
->	O
delete_sec_context	function
(	O
NULL	O
,	O
context_handle	*
,	O
output_token	*
)	O
;	O
free	function
(	O
*	O
context_handle	*
)	O
;	O
*	O
context_handle	*
=	O
GSS_C_NO_CONTEXT	*
;	O
return	O
ret	int
;	O
}	O
OM_uint32	int
gss_process_context_token	function
(	O
OM_uint32	int
*	O
minor_status	*
,	O
const	O
gss_ctx_id_t	*
context_handle	*
,	O
const	O
gss_buffer_t	*
token_buffer	*
)	O
{	O
return	O
GSS_S_FAILURE	O
;	O
}	O
OM_uint32	int
gss_context_time	function
(	O
OM_uint32	int
*	O
minor_status	*
,	O
const	O
gss_ctx_id_t	*
context_handle	*
,	O
OM_uint32	int
*	O
time_rec	*
)	O
{	O
_gss_mech_api_t	*
mech	*
;	O
if	O
(	O
context_handle	*
==	O
GSS_C_NO_CONTEXT	int
)	O
{	O
if	O
(	O
minor_status	*
)	O
*	O
minor_status	*
=	O
0	int
;	O
return	O
GSS_S_NO_CONTEXT	O
|	O
GSS_S_CALL_BAD_STRUCTURE	O
;	O
}	O
mech	*
=	O
_gss_find_mech	function
(	O
context_handle	*
->	O
mech	*
)	O
;	O
if	O
(	O
mech	*
==	O
NULL	O
)	O
{	O
if	O
(	O
minor_status	*
)	O
*	O
minor_status	*
=	O
0	int
;	O
return	O
GSS_S_BAD_MECH	O
;	O
}	O
return	O
mech	*
->	O
context_time	*
(	O
minor_status	*
,	O
context_handle	*
,	O
time_rec	*
)	O
;	O
}	O
OM_uint32	int
gss_inquire_context	function
(	O
OM_uint32	int
*	O
minor_status	*
,	O
const	O
gss_ctx_id_t	*
context_handle	*
,	O
gss_name_t	*
*	O
src_name	*
,	O
gss_name_t	*
*	O
targ_name	*
,	O
OM_uint32	int
*	O
lifetime_rec	*
,	O
gss_OID	*
*	O
mech_type	*
,	O
OM_uint32	int
*	O
ctx_flags	*
,	O
int	O
*	O
locally_initiated	*
,	O
int	O
*	O
open	int
)	O
{	O
return	O
GSS_S_FAILURE	O
;	O
}	O
OM_uint32	int
gss_wrap_size_limit	function
(	O
OM_uint32	int
*	O
minor_status	*
,	O
const	O
gss_ctx_id_t	*
context_handle	*
,	O
int	O
conf_req_flag	int
,	O
gss_qop_t	int
qop_req	int
,	O
OM_uint32	int
req_output_size	*
,	O
OM_uint32	int
*	O
max_input_size	*
)	O
{	O
return	O
GSS_S_FAILURE	O
;	O
}	O
OM_uint32	int
gss_export_sec_context	function
(	O
OM_uint32	int
*	O
minor_status	*
,	O
gss_ctx_id_t	*
*	O
context_handle	*
,	O
gss_buffer_t	*
interprocess_token	*
)	O
{	O
return	O
GSS_S_UNAVAILABLE	O
;	O
}	O
OM_uint32	int
gss_import_sec_context	function
(	O
OM_uint32	int
*	O
minor_status	*
,	O
const	O
gss_buffer_t	*
interprocess_token	*
,	O
gss_ctx_id_t	*
*	O
context_handle	*
)	O
{	O
return	O
GSS_S_UNAVAILABLE	O
;	O
}	O