void	O
mpz_lucnum2_ui	O
(	O
mpz_ptr	*
ln	*
,	O
mpz_ptr	*
lnsub1	*
,	O
unsigned	O
long	O
n	long
)	O
{	O
mp_ptr	*
lp	*
,	O
l1p	*
,	O
f1p	*
;	O
mp_size_t	long
size	long
;	O
mp_limb_t	long
c	long
;	O
TMP_DECL	O
;	O
ASSERT	O
(	O
ln	*
!=	O
lnsub1	*
)	O
;	O
if	O
(	O
n	long
<=	O
FIB_TABLE_LUCNUM_LIMIT	int
)	O
{	O
mp_limb_t	long
f	long
=	O
FIB_TABLE	O
(	O
n	long
)	O
;	O
mp_limb_t	long
f1	long
=	O
FIB_TABLE	O
(	O
(	O
int	O
)	O
n	long
-	O
1	int
)	O
;	O
PTR	O
(	O
ln	*
)	O
[	O
0	int
]	O
=	O
f	*
+	O
2	int
*	O
f1	long
;	O
SIZ	O
(	O
ln	*
)	O
=	O
1	int
;	O
PTR	O
(	O
lnsub1	*
)	O
[	O
0	int
]	O
=	O
(	O
n	long
==	O
0	int
?	O
1	int
:	O
2	int
*	O
f	*
-	O
f1	long
)	O
;	O
SIZ	O
(	O
lnsub1	*
)	O
=	O
(	O
n	long
==	O
0	int
?	O
-	O
1	int
:	O
1	int
)	O
;	O
return	O
;	O
}	O
TMP_MARK	O
;	O
size	long
=	O
MPN_FIB2_SIZE	O
(	O
n	long
)	O
;	O
f1p	*
=	O
TMP_ALLOC_LIMBS	O
(	O
size	long
)	O
;	O
lp	*
=	O
MPZ_REALLOC	O
(	O
ln	*
,	O
size	long
+	O
1	int
)	O
;	O
l1p	*
=	O
MPZ_REALLOC	O
(	O
lnsub1	*
,	O
size	long
+	O
1	int
)	O
;	O
size	long
=	O
mpn_fib2_ui	O
(	O
l1p	*
,	O
f1p	*
,	O
n	long
)	O
;	O
c	long
=	O
mpn_addlsh1_n	O
(	O
lp	*
,	O
l1p	*
,	O
f1p	*
,	O
size	long
)	O
;	O
lp	*
[	O
size	long
]	O
=	O
c	int
;	O
SIZ	O
(	O
ln	*
)	O
=	O
size	long
+	O
(	O
c	int
!=	O
0	int
)	O
;	O
c	long
=	O
mpn_lshift	O
(	O
l1p	*
,	O
l1p	*
,	O
size	long
,	O
1	int
)	O
;	O
c	int
-=	O
mpn_sub_n	O
(	O
l1p	*
,	O
l1p	*
,	O
f1p	*
,	O
size	long
)	O
;	O
ASSERT	O
(	O
(	O
mp_limb_signed_t	long
)	O
c	int
>=	O
0	int
)	O
;	O
l1p	array
[	O
size	long
]	O
=	O
c	int
;	O
SIZ	O
(	O
lnsub1	*
)	O
=	O
size	long
+	O
(	O
c	int
!=	O
0	int
)	O
;	O
TMP_FREE	O
;	O
}	O