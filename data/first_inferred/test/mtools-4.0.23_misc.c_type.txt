void	O
printOom	function
(	O
void	O
)	O
{	O
fprintf	function
(	O
stderr	*
,	O
"Out of memory error"	*
)	O
;	O
}	O
char	O
*	O
get_homedir	function
(	O
void	O
)	O
{	O
struct	O
passwd	struct
*	O
pw	*
;	O
uid_t	int
uid	int
;	O
char	O
*	O
homedir	*
;	O
char	O
*	O
username	*
;	O
homedir	*
=	O
getenv	function
(	O
"HOME"	*
)	O
;	O
if	O
(	O
homedir	*
)	O
return	O
homedir	*
;	O
pw	*
=	O
0	int
;	O
username	*
=	O
getenv	function
(	O
"LOGNAME"	*
)	O
;	O
if	O
(	O
!	O
username	*
)	O
username	*
=	O
getlogin	function
(	O
)	O
;	O
if	O
(	O
username	*
)	O
pw	*
=	O
getpwnam	function
(	O
username	*
)	O
;	O
if	O
(	O
pw	*
==	O
0	int
)	O
{	O
uid	int
=	O
geteuid	function
(	O
)	O
;	O
pw	*
=	O
getpwuid	function
(	O
uid	int
)	O
;	O
}	O
if	O
(	O
pw	*
)	O
return	O
pw	*
->	O
pw_dir	*
;	O
return	O
0	int
;	O
}	O
static	O
void	O
get_mcwd_file_name	function
(	O
char	O
*	O
file	*
)	O
{	O
char	O
*	O
mcwd_path	*
;	O
const	O
char	O
*	O
homedir	*
;	O
mcwd_path	*
=	O
getenv	function
(	O
"MCWD"	*
)	O
;	O
if	O
(	O
mcwd_path	*
==	O
NULL	O
||	O
*	O
mcwd_path	*
==	O
'\0'	O
)	O
{	O
homedir	*
=	O
get_homedir	function
(	O
)	O
;	O
if	O
(	O
!	O
homedir	*
)	O
homedir	*
=	O
"/tmp"	*
;	O
strncpy	function
(	O
file	*
,	O
homedir	*
,	O
MAXPATHLEN	O
-	O
6	int
)	O
;	O
file	*
[	O
MAXPATHLEN	O
-	O
6	int
]	O
=	O
'\0'	O
;	O
strcat	function
(	O
file	*
,	O
"/.mcwd"	*
)	O
;	O
}	O
else	O
{	O
strncpy	function
(	O
file	*
,	O
mcwd_path	*
,	O
MAXPATHLEN	O
)	O
;	O
file	*
[	O
MAXPATHLEN	int
]	O
=	O
'\0'	O
;	O
}	O
}	O
void	O
unlink_mcwd	function
(	O
void	O
)	O
{	O
char	O
file	*
[	O
MAXPATHLEN	O
+	O
1	int
]	O
;	O
get_mcwd_file_name	function
(	O
file	*
)	O
;	O
unlink	function
(	O
file	*
)	O
;	O
}	O
FILE	struct
*	O
open_mcwd	function
(	O
const	O
char	O
*	O
mode	*
)	O
{	O
struct	O
MT_STAT	O
sbuf	struct
;	O
char	O
file	*
[	O
MAXPATHLEN	O
+	O
1	int
]	O
;	O
time_t	long
now	long
;	O
get_mcwd_file_name	function
(	O
file	*
)	O
;	O
if	O
(	O
*	O
mode	*
==	O
'r'	O
)	O
{	O
if	O
(	O
MT_STAT	O
(	O
file	*
,	O
&	O
sbuf	struct
)	O
<	O
0	int
)	O
return	O
NULL	O
;	O
getTimeNow	function
(	O
&	O
now	*
)	O
;	O
if	O
(	O
now	long
-	O
sbuf	struct
.	O
st_mtime	O
>	O
6	int
*	O
60	int
*	O
60	int
)	O
{	O
fprintf	function
(	O
stderr	*
,	O
"Warning: \"%s\" is out of date, removing it\n"	*
,	O
file	*
)	O
;	O
unlink	function
(	O
file	*
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
return	O
fopen	function
(	O
file	*
,	O
mode	*
)	O
;	O
}	O
void	O
*	O
safe_malloc	function
(	O
size_t	long
size	int
)	O
{	O
void	O
*	O
p	*
;	O
p	*
=	O
malloc	function
(	O
size	long
)	O
;	O
if	O
(	O
!	O
p	*
)	O
{	O
printOom	function
(	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
return	O
p	*
;	O
}	O
void	O
print_sector	function
(	O
const	O
char	O
*	O
message	*
,	O
unsigned	O
char	O
*	O
data	*
,	O
int	O
size	int
)	O
{	O
int	O
col	int
;	O
int	O
row	int
;	O
printf	function
(	O
"%s:\n"	*
,	O
message	*
)	O
;	O
for	O
(	O
row	int
=	O
0	int
;	O
row	int
*	O
16	int
<	O
size	int
;	O
row	int
++	O
)	O
{	O
printf	function
(	O
"%03x  "	*
,	O
row	int
*	O
16	int
)	O
;	O
for	O
(	O
col	int
=	O
0	int
;	O
col	int
<	O
16	int
;	O
col	int
++	O
)	O
printf	function
(	O
"%02x "	*
,	O
data	*
[	O
row	int
*	O
16	int
+	O
col	int
]	O
)	O
;	O
for	O
(	O
col	int
=	O
0	int
;	O
col	int
<	O
16	int
;	O
col	int
++	O
)	O
{	O
if	O
(	O
isprint	function
(	O
data	*
[	O
row	int
*	O
16	int
+	O
col	int
]	O
)	O
)	O
printf	function
(	O
"%c"	*
,	O
data	*
[	O
row	int
*	O
16	int
+	O
col	int
]	O
)	O
;	O
else	O
printf	function
(	O
"."	*
)	O
;	O
}	O
printf	function
(	O
"\n"	*
)	O
;	O
}	O
}	O
time_t	long
getTimeNow	function
(	O
time_t	long
*	O
now	long
)	O
{	O
static	O
int	O
haveTime	int
=	O
0	int
;	O
static	O
time_t	long
sharedNow	long
;	O
if	O
(	O
!	O
haveTime	*
)	O
{	O
const	O
char	O
*	O
source_date_epoch	*
=	O
getenv	function
(	O
"SOURCE_DATE_EPOCH"	*
)	O
;	O
if	O
(	O
source_date_epoch	*
)	O
{	O
char	O
*	O
endptr	*
;	O
errno	O
=	O
0	int
;	O
time_t	long
epoch	long
=	O
STRTOTIME	function
(	O
source_date_epoch	int
,	O
&	O
endptr	*
,	O
10	int
)	O
;	O
if	O
(	O
endptr	*
==	O
source_date_epoch	int
)	O
fprintf	function
(	O
stderr	*
,	O
"SOURCE_DATE_EPOCH \"%s\" invalid\n"	*
,	O
source_date_epoch	*
)	O
;	O
else	O
if	O
(	O
errno	O
!=	O
0	int
)	O
fprintf	function
(	O
stderr	*
,	O
"SOURCE_DATE_EPOCH: strtoll: %s: %s\n"	*
,	O
strerror	function
(	O
errno	O
)	O
,	O
source_date_epoch	*
)	O
;	O
else	O
if	O
(	O
*	O
endptr	*
!=	O
'\0'	O
)	O
fprintf	function
(	O
stderr	*
,	O
"SOURCE_DATE_EPOCH has trailing garbage \"%s\"\n"	*
,	O
endptr	*
)	O
;	O
else	O
{	O
sharedNow	int
=	O
epoch	int
;	O
haveTime	int
=	O
1	int
;	O
}	O
}	O
}	O
if	O
(	O
!	O
haveTime	*
)	O
{	O
time	function
(	O
&	O
sharedNow	int
)	O
;	O
haveTime	int
=	O
1	int
;	O
}	O
if	O
(	O
now	long
)	O
*	O
now	*
=	O
sharedNow	*
;	O
return	O
sharedNow	int
;	O
}	O
off_t	long
str_to_offset	function
(	O
char	O
*	O
str	*
)	O
{	O
char	O
s	*
,	O
*	O
endp	*
=	O
NULL	O
;	O
off_t	long
ofs	long
;	O
ofs	long
=	O
strtol	function
(	O
str	*
,	O
&	O
endp	*
,	O
0	int
)	O
;	O
if	O
(	O
ofs	long
<=	O
0	int
)	O
return	O
0	int
;	O
s	long
=	O
*	O
endp	*
++	O
;	O
if	O
(	O
s	long
)	O
{	O
if	O
(	O
s	long
==	O
's'	O
||	O
s	long
==	O
'S'	O
)	O
ofs	long
<<=	O
9	int
;	O
else	O
if	O
(	O
s	long
==	O
'k'	O
||	O
s	O
==	O
'K'	O
)	O
ofs	long
<<=	O
10	int
;	O
else	O
if	O
(	O
s	long
==	O
'm'	O
||	O
s	long
==	O
'M'	O
)	O
ofs	long
<<=	O
20	int
;	O
else	O
if	O
(	O
s	long
==	O
'g'	O
||	O
s	long
==	O
'G'	O
)	O
ofs	long
<<=	O
30	int
;	O
else	O
return	O
0	int
;	O
if	O
(	O
*	O
endp	*
)	O
return	O
0	int
;	O
}	O
return	O
ofs	long
;	O
}	O