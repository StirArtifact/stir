static	O
int	O
bessel_kl_scaled_small_x	function
(	O
int	O
l	int
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
gsl_sf_result	struct
num_fact	struct
;	O
double	O
den	double
=	O
gsl_sf_pow_int	function
(	O
x	double
,	O
l	int
+	O
1	int
)	O
;	O
int	O
stat_df	int
=	O
gsl_sf_doublefact_e	function
(	O
(	O
unsigned	O
int	O
)	O
(	O
2	int
*	O
l	int
-	O
1	int
)	O
,	O
&	O
num_fact	struct
)	O
;	O
if	O
(	O
stat_df	int
!=	O
GSL_SUCCESS	int
||	O
den	double
==	O
0.0	int
)	O
{	O
OVERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
{	O
const	O
int	O
lmax	int
=	O
50	int
;	O
gsl_sf_result	struct
ipos_term	struct
;	O
double	O
ineg_term	double
;	O
double	O
sgn	pointer
=	O
(	O
GSL_IS_ODD	O
(	O
l	int
)	O
?	O
-	O
1.0	int
:	O
1.0	int
)	O
;	O
double	O
ex	double
=	O
exp	function
(	O
x	double
)	O
;	O
double	O
t	double
=	O
0.5	int
*	O
x	double
*	O
x	double
;	O
double	O
sum	double
=	O
1.0	int
;	O
double	O
t_coeff	double
=	O
1.0	int
;	O
double	O
t_power	double
=	O
1.0	int
;	O
double	O
delta	double
;	O
int	O
stat_il	int
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
lmax	int
;	O
i	int
++	O
)	O
{	O
t_coeff	double
/=	O
i	int
*	O
(	O
2	int
*	O
(	O
i	int
-	O
l	int
)	O
-	O
1	int
)	O
;	O
t_power	double
*=	O
t	double
;	O
delta	double
=	O
t_power	double
*	O
t_coeff	double
;	O
sum	double
+=	O
delta	double
;	O
if	O
(	O
fabs	function
(	O
delta	double
/	O
sum	double
)	O
<	O
GSL_DBL_EPSILON	int
)	O
break	O
;	O
}	O
stat_il	int
=	O
gsl_sf_bessel_il_scaled_e	function
(	O
l	int
,	O
x	double
,	O
&	O
ipos_term	struct
)	O
;	O
ineg_term	double
=	O
sgn	pointer
*	O
num_fact	struct
.	O
val	double
/	O
den	double
*	O
sum	double
;	O
result	pointer
->	O
val	double
=	O
-	O
sgn	pointer
*	O
0.5	int
*	O
M_PI	int
*	O
(	O
ex	double
*	O
ipos_term	struct
.	O
val	double
-	O
ineg_term	double
)	O
;	O
result	pointer
->	O
val	double
*=	O
ex	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
stat_il	int
;	O
}	O
}	O
int	O
gsl_sf_bessel_k0_scaled_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
<=	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
{	O
result	pointer
->	O
val	double
=	O
M_PI	int
/	O
(	O
2.0	int
*	O
x	double
)	O
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
CHECK_UNDERFLOW	O
(	O
result	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_bessel_k1_scaled_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
<=	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
(	O
M_SQRTPI	int
+	O
1.0	int
)	O
/	O
(	O
M_SQRT2	int
*	O
GSL_SQRT_DBL_MAX	int
)	O
)	O
{	O
OVERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
{	O
result	pointer
->	O
val	double
=	O
M_PI	int
/	O
(	O
2.0	int
*	O
x	double
)	O
*	O
(	O
1.0	int
+	O
1.0	int
/	O
x	double
)	O
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
CHECK_UNDERFLOW	O
(	O
result	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_bessel_k2_scaled_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
<=	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
2.0	int
/	O
GSL_ROOT3_DBL_MAX	int
)	O
{	O
OVERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
{	O
result	pointer
->	O
val	double
=	O
M_PI	int
/	O
(	O
2.0	int
*	O
x	double
)	O
*	O
(	O
1.0	int
+	O
3.0	int
/	O
x	double
*	O
(	O
1.0	int
+	O
1.0	int
/	O
x	double
)	O
)	O
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
CHECK_UNDERFLOW	O
(	O
result	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_bessel_kl_scaled_e	function
(	O
int	O
l	int
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
l	int
<	O
0	int
||	O
x	double
<=	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
l	int
==	O
0	int
)	O
{	O
return	O
gsl_sf_bessel_k0_scaled_e	function
(	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
l	int
==	O
1	int
)	O
{	O
return	O
gsl_sf_bessel_k1_scaled_e	function
(	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
l	int
==	O
2	int
)	O
{	O
return	O
gsl_sf_bessel_k2_scaled_e	function
(	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
3.0	int
)	O
{	O
return	O
bessel_kl_scaled_small_x	function
(	O
l	int
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
GSL_ROOT3_DBL_EPSILON	int
*	O
x	double
>	O
(	O
l	int
*	O
l	int
+	O
l	int
+	O
1	int
)	O
)	O
{	O
int	O
status	int
=	O
gsl_sf_bessel_Knu_scaled_asympx_e	function
(	O
l	int
+	O
0.5	int
,	O
x	double
,	O
result	pointer
)	O
;	O
double	O
pre	double
=	O
sqrt	function
(	O
(	O
0.5	int
*	O
M_PI	int
)	O
/	O
x	double
)	O
;	O
result	pointer
->	O
val	double
*=	O
pre	double
;	O
result	pointer
->	O
err	double
*=	O
pre	double
;	O
return	O
status	int
;	O
}	O
else	O
if	O
(	O
GSL_MIN	O
(	O
0.29	int
/	O
(	O
l	int
*	O
l	int
+	O
1.0	int
)	O
,	O
0.5	int
/	O
(	O
l	int
*	O
l	int
+	O
1.0	int
+	O
x	double
*	O
x	double
)	O
)	O
<	O
GSL_ROOT3_DBL_EPSILON	int
)	O
{	O
int	O
status	int
=	O
gsl_sf_bessel_Knu_scaled_asymp_unif_e	function
(	O
l	int
+	O
0.5	int
,	O
x	double
,	O
result	pointer
)	O
;	O
double	O
pre	double
=	O
sqrt	function
(	O
(	O
0.5	int
*	O
M_PI	int
)	O
/	O
x	double
)	O
;	O
result	pointer
->	O
val	double
*=	O
pre	double
;	O
result	pointer
->	O
err	double
*=	O
pre	double
;	O
return	O
status	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct
r_bk	struct
;	O
gsl_sf_result	struct
r_bkm	struct
;	O
int	O
stat_1	int
=	O
gsl_sf_bessel_k1_scaled_e	function
(	O
x	double
,	O
&	O
r_bk	struct
)	O
;	O
int	O
stat_0	int
=	O
gsl_sf_bessel_k0_scaled_e	function
(	O
x	double
,	O
&	O
r_bkm	struct
)	O
;	O
double	O
bkp	double
;	O
double	O
bk	double
=	O
r_bk	struct
.	O
val	double
;	O
double	O
bkm	double
=	O
r_bkm	struct
.	O
val	double
;	O
int	O
j	int
;	O
for	O
(	O
j	int
=	O
1	int
;	O
j	int
<	O
l	int
;	O
j	int
++	O
)	O
{	O
bkp	double
=	O
(	O
2	int
*	O
j	int
+	O
1	int
)	O
/	O
x	double
*	O
bk	double
+	O
bkm	double
;	O
bkm	double
=	O
bk	double
;	O
bk	double
=	O
bkp	double
;	O
}	O
result	pointer
->	O
val	double
=	O
bk	double
;	O
result	pointer
->	O
err	double
=	O
fabs	function
(	O
bk	double
)	O
*	O
(	O
fabs	function
(	O
r_bk	struct
.	O
err	double
/	O
r_bk	struct
.	O
val	double
)	O
+	O
fabs	function
(	O
r_bkm	struct
.	O
err	double
/	O
r_bkm	struct
.	O
val	double
)	O
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_1	int
,	O
stat_0	int
)	O
;	O
}	O
}	O
int	O
gsl_sf_bessel_kl_scaled_array	function
(	O
const	O
int	O
lmax	int
,	O
const	O
double	O
x	double
,	O
double	O
*	O
result_array	pointer
)	O
{	O
if	O
(	O
lmax	int
<	O
0	int
||	O
x	double
<=	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"domain error"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
if	O
(	O
lmax	int
==	O
0	int
)	O
{	O
gsl_sf_result	struct
result	pointer
;	O
int	O
stat	int
=	O
gsl_sf_bessel_k0_scaled_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
;	O
result_array	pointer
[	O
0	int
]	O
=	O
result	pointer
.	O
val	double
;	O
return	O
stat	int
;	O
}	O
else	O
{	O
int	O
ell	int
;	O
double	O
kellp1	double
,	O
kell	double
,	O
kellm1	double
;	O
gsl_sf_result	struct
r_kell	struct
;	O
gsl_sf_result	struct
r_kellm1	struct
;	O
gsl_sf_bessel_k1_scaled_e	function
(	O
x	double
,	O
&	O
r_kell	struct
)	O
;	O
gsl_sf_bessel_k0_scaled_e	function
(	O
x	double
,	O
&	O
r_kellm1	struct
)	O
;	O
kell	double
=	O
r_kell	struct
.	O
val	double
;	O
kellm1	double
=	O
r_kellm1	struct
.	O
val	double
;	O
result_array	pointer
[	O
0	int
]	O
=	O
kellm1	double
;	O
result_array	pointer
[	O
1	int
]	O
=	O
kell	double
;	O
for	O
(	O
ell	int
=	O
1	int
;	O
ell	int
<	O
lmax	int
;	O
ell	int
++	O
)	O
{	O
kellp1	double
=	O
(	O
2	int
*	O
ell	int
+	O
1	int
)	O
/	O
x	double
*	O
kell	double
+	O
kellm1	double
;	O
result_array	pointer
[	O
ell	int
+	O
1	int
]	O
=	O
kellp1	double
;	O
kellm1	double
=	O
kell	double
;	O
kell	double
=	O
kellp1	double
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
double	O
gsl_sf_bessel_k0_scaled	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_k0_scaled_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_bessel_k1_scaled	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_k1_scaled_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_bessel_k2_scaled	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_k2_scaled_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_bessel_kl_scaled	function
(	O
const	O
int	O
l	int
,	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_kl_scaled_e	function
(	O
l	int
,	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O