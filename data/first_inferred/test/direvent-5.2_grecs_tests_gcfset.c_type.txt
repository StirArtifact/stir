struct	O
logging_setup	struct
{	O
int	O
use_syslog	int
;	O
int	O
print_priority	int
;	O
char	O
*	O
tag	pointer
;	O
char	O
*	O
facility	pointer
;	O
}	O
;	O
struct	O
logging_setup	struct
logging_setup	struct
;	O
char	O
*	O
scalar_string	pointer
;	O
char	O
*	O
mailbox_pattern	pointer
;	O
char	O
*	O
mailbox_type	pointer
;	O
struct	O
grecs_list	struct
*	O
listvar	pointer
;	O
struct	O
program	struct
{	O
char	O
*	O
name	pointer
;	O
struct	O
logging_setup	struct
logging_setup	struct
;	O
char	O
*	O
scalar_string	pointer
;	O
grecs_locus_t	struct
locus	struct
;	O
struct	O
program	struct
*	O
next	pointer
;	O
}	O
;	O
struct	O
grecs_list	struct
*	O
proglist	pointer
;	O
static	O
int	O
cb_logging_facility	function
(	O
GRECS_CB_ARGS	O
)	O
{	O
GRECS_CB_AUTO	O
if	O
(	O
cmd	enum
!=	O
grecs_callback_set_value	int
)	O
{	O
grecs_error	function
(	O
locus	struct
,	O
0	int
,	O
"Unexpected block statement"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
!	O
value	pointer
||	O
value	pointer
->	O
type	int
!=	O
GRECS_TYPE_STRING	int
)	O
{	O
grecs_error	function
(	O
locus	struct
,	O
0	int
,	O
"expected string argument"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
*	O
(	O
char	O
*	O
*	O
)	O
varptr	pointer
=	O
grecs_strdup	function
(	O
value	pointer
->	O
v	pointer
.	O
string	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
grecs_keyword	struct
logging_kwtab	array
[	O
]	O
=	O
{	O
{	O
"syslog"	pointer
,	O
NULL	O
,	O
"Send to syslog"	pointer
,	O
grecs_type_bool	int
,	O
GRECS_DFLT	int
,	O
NULL	O
,	O
offsetof	O
(	O
struct	O
logging_setup	struct
,	O
use_syslog	int
)	O
}	O
,	O
{	O
"facility"	pointer
,	O
"name"	pointer
,	O
"Set logging facility"	pointer
,	O
grecs_type_string	int
,	O
GRECS_AGGR	int
,	O
NULL	O
,	O
offsetof	O
(	O
struct	O
logging_setup	struct
,	O
facility	pointer
)	O
,	O
cb_logging_facility	function
}	O
,	O
{	O
"tag"	pointer
,	O
"label"	pointer
,	O
"Tag logging messages with this string"	pointer
,	O
grecs_type_string	int
,	O
GRECS_DFLT	int
,	O
NULL	O
,	O
offsetof	O
(	O
struct	O
logging_setup	struct
,	O
tag	pointer
)	O
}	O
,	O
{	O
"print-priority"	pointer
,	O
NULL	O
,	O
"Prefix each message with its priority"	pointer
,	O
grecs_type_bool	int
,	O
GRECS_DFLT	int
,	O
NULL	O
,	O
offsetof	O
(	O
struct	O
logging_setup	struct
,	O
print_priority	int
)	O
}	O
,	O
{	O
NULL	O
}	O
,	O
}	O
;	O
static	O
struct	O
grecs_keyword	struct
mailbox_kwtab	array
[	O
]	O
=	O
{	O
{	O
"mailbox-pattern"	pointer
,	O
NULL	O
,	O
"Default mailbox pattern"	pointer
,	O
grecs_type_string	int
,	O
GRECS_DFLT	int
,	O
&	O
mailbox_pattern	pointer
}	O
,	O
{	O
"mailbox-type"	pointer
,	O
NULL	O
,	O
"Default mailbox type"	pointer
,	O
grecs_type_string	int
,	O
GRECS_DFLT	int
,	O
&	O
mailbox_type	pointer
}	O
,	O
{	O
NULL	O
}	O
,	O
}	O
;	O
static	O
struct	O
grecs_keyword	struct
program_kwtab	array
[	O
]	O
=	O
{	O
{	O
"scalar"	pointer
,	O
"label"	pointer
,	O
"Scalar string"	pointer
,	O
grecs_type_string	int
,	O
GRECS_DFLT	int
,	O
NULL	O
,	O
offsetof	O
(	O
struct	O
program	struct
,	O
scalar_string	pointer
)	O
}	O
,	O
{	O
"logging"	pointer
,	O
NULL	O
,	O
"Configure logging logging"	pointer
,	O
grecs_type_section	int
,	O
GRECS_DFLT	int
,	O
NULL	O
,	O
offsetof	O
(	O
struct	O
program	struct
,	O
logging_setup	struct
)	O
,	O
NULL	O
,	O
NULL	O
,	O
logging_kwtab	array
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
int	O
cb_program	function
(	O
GRECS_CB_ARGS	O
)	O
{	O
struct	O
program	struct
*	O
prog	pointer
;	O
void	O
*	O
*	O
pdata	pointer
=	O
cb_data	pointer
;	O
GRECS_CB_AUTO	O
switch	O
(	O
cmd	enum
)	O
{	O
case	O
grecs_callback_section_begin	int
:	O
if	O
(	O
!	O
value	pointer
||	O
value	pointer
->	O
type	int
!=	O
GRECS_TYPE_STRING	int
)	O
{	O
grecs_error	function
(	O
locus	struct
,	O
0	int
,	O
"tag must be a string"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
prog	pointer
=	O
grecs_zalloc	function
(	O
sizeof	O
(	O
*	O
prog	pointer
)	O
)	O
;	O
prog	pointer
->	O
name	pointer
=	O
grecs_strdup	function
(	O
value	pointer
->	O
v	pointer
.	O
string	pointer
)	O
;	O
prog	pointer
->	O
locus	struct
=	O
*	O
locus	struct
;	O
*	O
pdata	pointer
=	O
prog	pointer
;	O
break	O
;	O
case	O
grecs_callback_section_end	int
:	O
prog	pointer
=	O
*	O
pdata	pointer
;	O
if	O
(	O
!	O
proglist	pointer
)	O
proglist	pointer
=	O
grecs_list_create	function
(	O
)	O
;	O
grecs_list_append	function
(	O
proglist	pointer
,	O
prog	pointer
)	O
;	O
break	O
;	O
case	O
grecs_callback_set_value	int
:	O
grecs_error	function
(	O
locus	struct
,	O
0	int
,	O
"invalid use of block statement"	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
grecs_keyword	struct
main_kwtab	array
[	O
]	O
=	O
{	O
{	O
"scalar"	pointer
,	O
"label"	pointer
,	O
"Scalar string"	pointer
,	O
grecs_type_string	int
,	O
GRECS_DFLT	int
,	O
&	O
scalar_string	pointer
}	O
,	O
{	O
"logging"	pointer
,	O
NULL	O
,	O
"Configure logging logging"	pointer
,	O
grecs_type_section	int
,	O
GRECS_DFLT	int
,	O
&	O
logging_setup	struct
,	O
0	int
,	O
NULL	O
,	O
NULL	O
,	O
logging_kwtab	array
}	O
,	O
{	O
"mailbox"	pointer
,	O
NULL	O
,	O
"Mailbox configuration"	pointer
,	O
grecs_type_section	int
,	O
GRECS_DFLT	int
,	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
NULL	O
,	O
mailbox_kwtab	array
}	O
,	O
{	O
"program"	pointer
,	O
"name: string"	pointer
,	O
"Subprogram configuration"	pointer
,	O
grecs_type_section	int
,	O
GRECS_DFLT	int
,	O
NULL	O
,	O
0	int
,	O
cb_program	function
,	O
NULL	O
,	O
program_kwtab	array
}	O
,	O
{	O
"listvar"	pointer
,	O
NULL	O
,	O
"list variable"	pointer
,	O
grecs_type_string	int
,	O
GRECS_LIST	int
,	O
&	O
listvar	pointer
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
void	O
print_logging_setup	function
(	O
struct	O
logging_setup	struct
*	O
p	pointer
)	O
{	O
printf	function
(	O
"logging: %d/%s/%s/%d\n"	pointer
,	O
p	pointer
->	O
use_syslog	int
,	O
S	O
(	O
p	pointer
->	O
facility	pointer
)	O
,	O
S	O
(	O
p	pointer
->	O
tag	pointer
)	O
,	O
p	pointer
->	O
print_priority	int
)	O
;	O
}	O
static	O
void	O
print_program	function
(	O
struct	O
program	struct
*	O
prog	pointer
)	O
{	O
printf	function
(	O
"Program %s:\n"	pointer
,	O
prog	pointer
->	O
name	pointer
)	O
;	O
printf	function
(	O
"scalar = %s\n"	pointer
,	O
S	O
(	O
prog	pointer
->	O
scalar_string	pointer
)	O
)	O
;	O
print_logging_setup	function
(	O
&	O
prog	pointer
->	O
logging_setup	struct
)	O
;	O
}	O
static	O
int	O
node_ident_cmp	function
(	O
struct	O
grecs_node	struct
const	O
*	O
a	pointer
,	O
struct	O
grecs_node	struct
const	O
*	O
b	pointer
)	O
{	O
return	O
strcmp	function
(	O
a	pointer
->	O
ident	pointer
,	O
b	pointer
->	O
ident	pointer
)	O
;	O
}	O
static	O
void	O
usage	function
(	O
const	O
char	O
*	O
arg	struct
,	O
FILE	struct
*	O
fp	pointer
,	O
int	O
code	int
)	O
{	O
fprintf	function
(	O
fp	pointer
,	O
"usage: %s [-h] [-cfhelp] [-reduce] [-sort] [-print] [-locus] [-noset] file\n"	pointer
,	O
arg	struct
)	O
;	O
exit	function
(	O
code	int
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
char	O
*	O
progname	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
const	O
char	O
*	O
file	pointer
=	O
NULL	O
;	O
struct	O
grecs_node	struct
*	O
tree	pointer
;	O
int	O
cfhelp	int
=	O
0	int
;	O
int	O
reduce	int
=	O
0	int
;	O
int	O
print	int
=	O
0	int
;	O
int	O
sort	int
=	O
0	int
;	O
int	O
flags	int
=	O
GRECS_NODE_FLAG_DEFAULT	O
;	O
int	O
dontset	int
=	O
0	int
;	O
while	O
(	O
--	O
argc	int
)	O
{	O
char	O
*	O
arg	struct
=	O
*	O
++	O
argv	pointer
;	O
if	O
(	O
strcmp	function
(	O
arg	struct
,	O
"-cfhelp"	pointer
)	O
==	O
0	int
)	O
cfhelp	int
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	struct
,	O
"-h"	pointer
)	O
==	O
0	int
)	O
usage	function
(	O
progname	pointer
,	O
stdout	pointer
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	struct
,	O
"-reduce"	pointer
)	O
==	O
0	int
)	O
reduce	int
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	struct
,	O
"-print"	pointer
)	O
==	O
0	int
)	O
print	int
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	struct
,	O
"-locus"	pointer
)	O
==	O
0	int
)	O
flags	int
|=	O
GRECS_NODE_FLAG_LOCUS	int
;	O
else	O
if	O
(	O
strncmp	function
(	O
arg	struct
,	O
"-delim="	pointer
,	O
7	int
)	O
==	O
0	int
)	O
flags	int
|=	O
arg	struct
[	O
7	int
]	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	struct
,	O
"-sort"	pointer
)	O
==	O
0	int
)	O
sort	int
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	struct
,	O
"-noset"	pointer
)	O
==	O
0	int
)	O
dontset	int
=	O
1	int
;	O
else	O
if	O
(	O
arg	struct
[	O
0	int
]	O
==	O
'-'	O
)	O
usage	function
(	O
progname	pointer
,	O
stderr	pointer
,	O
1	int
)	O
;	O
else	O
if	O
(	O
file	pointer
)	O
usage	function
(	O
progname	pointer
,	O
stderr	pointer
,	O
1	int
)	O
;	O
else	O
file	pointer
=	O
arg	struct
;	O
}	O
if	O
(	O
(	O
!	O
file	pointer
&&	O
!	O
cfhelp	int
)	O
||	O
argc	int
)	O
usage	function
(	O
progname	pointer
,	O
stderr	pointer
,	O
1	int
)	O
;	O
if	O
(	O
cfhelp	int
)	O
{	O
static	O
char	O
docstring	pointer
[	O
]	O
=	O
"Sample configuration file structure.\n"	pointer
;	O
grecs_print_docstring	function
(	O
docstring	pointer
,	O
0	int
,	O
stdout	pointer
)	O
;	O
grecs_print_statement_array	function
(	O
main_kwtab	array
,	O
1	int
,	O
0	int
,	O
stdout	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
tree	pointer
=	O
grecs_parse	function
(	O
file	pointer
)	O
;	O
if	O
(	O
!	O
tree	pointer
)	O
exit	function
(	O
2	int
)	O
;	O
if	O
(	O
reduce	int
)	O
grecs_tree_reduce	function
(	O
tree	pointer
,	O
main_kwtab	array
,	O
GRECS_AGGR	int
)	O
;	O
if	O
(	O
sort	int
)	O
grecs_tree_sort	function
(	O
tree	pointer
,	O
node_ident_cmp	function
)	O
;	O
if	O
(	O
print	int
)	O
{	O
grecs_print_node	function
(	O
tree	pointer
,	O
flags	int
,	O
stdout	pointer
)	O
;	O
fputc	function
(	O
'\n'	O
,	O
stdout	pointer
)	O
;	O
}	O
if	O
(	O
dontset	int
)	O
exit	function
(	O
0	int
)	O
;	O
if	O
(	O
grecs_tree_process	function
(	O
tree	pointer
,	O
main_kwtab	array
)	O
)	O
exit	function
(	O
2	int
)	O
;	O
grecs_tree_free	function
(	O
tree	pointer
)	O
;	O
printf	function
(	O
"Global settings:\n"	pointer
)	O
;	O
printf	function
(	O
"scalar = %s\n"	pointer
,	O
S	O
(	O
scalar_string	pointer
)	O
)	O
;	O
if	O
(	O
listvar	pointer
)	O
{	O
struct	O
grecs_list_entry	struct
*	O
ep	pointer
;	O
printf	function
(	O
"listvar ="	pointer
)	O
;	O
for	O
(	O
ep	pointer
=	O
listvar	pointer
->	O
head	pointer
;	O
ep	pointer
;	O
ep	pointer
=	O
ep	pointer
->	O
next	pointer
)	O
printf	function
(	O
" \"%s\""	pointer
,	O
(	O
char	O
*	O
)	O
ep	pointer
->	O
data	pointer
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
}	O
print_logging_setup	function
(	O
&	O
logging_setup	struct
)	O
;	O
if	O
(	O
proglist	pointer
)	O
{	O
struct	O
grecs_list_entry	struct
*	O
ep	pointer
;	O
printf	function
(	O
"Programs configured: %lu\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
grecs_list_size	function
(	O
proglist	pointer
)	O
)	O
;	O
for	O
(	O
ep	pointer
=	O
proglist	pointer
->	O
head	pointer
;	O
ep	pointer
;	O
ep	pointer
=	O
ep	pointer
->	O
next	pointer
)	O
print_program	function
(	O
ep	pointer
->	O
data	pointer
)	O
;	O
}	O
exit	function
(	O
0	int
)	O
;	O
}	O