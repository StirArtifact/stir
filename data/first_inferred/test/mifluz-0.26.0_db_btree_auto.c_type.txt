int	O
CDB___bam_pg_alloc1_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
)	O
{	O
}	O
if	O
(	O
notused3	pointer
)	O
{	O
}	O
__bam_pg_alloc1_args	struct
*	O
argp	pointer
;	O
int	O
ret	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___bam_pg_alloc1_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]bam_pg_alloc1: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tmeta_lsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
meta_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
meta_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tpage_lsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
page_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
page_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tpgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pgno	int
)	O
;	O
printf	function
(	O
"\tptype: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
ptype	int
)	O
;	O
printf	function
(	O
"\tnext: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
next	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_pg_alloc1_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__bam_pg_alloc1_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__bam_pg_alloc1_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__bam_pg_alloc1_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
meta_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
meta_lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
meta_lsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
page_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
page_lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
page_lsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
ptype	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
ptype	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
ptype	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
next	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
next	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
next	int
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_pg_alloc_log	function
(	O
dbenv	pointer
,	O
txnid	int
,	O
ret_lsnp	pointer
,	O
flags	int
,	O
fileid	array
,	O
meta_lsn	struct
,	O
alloc_lsn	struct
,	O
page_lsn	struct
,	O
pgno	int
,	O
ptype	int
,	O
next	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_TXN	struct
*	O
txnid	int
;	O
DB_LSN	struct
*	O
ret_lsnp	pointer
;	O
u_int32_t	int
flags	int
;	O
int32_t	int
fileid	array
;	O
DB_LSN	struct
*	O
meta_lsn	struct
;	O
DB_LSN	struct
*	O
alloc_lsn	struct
;	O
DB_LSN	struct
*	O
page_lsn	struct
;	O
db_pgno_t	int
pgno	int
;	O
u_int32_t	int
ptype	int
;	O
db_pgno_t	int
next	int
;	O
{	O
DBT	struct
logrec	struct
;	O
DB_LSN	struct
*	O
lsnp	pointer
,	O
null_lsn	struct
;	O
u_int32_t	int
rectype	int
,	O
txn_num	int
;	O
int	O
ret	int
;	O
u_int8_t	char
*	O
bp	pointer
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
&&	O
TAILQ_FIRST	O
(	O
&	O
txnid	int
->	O
kids	struct
)	O
!=	O
NULL	O
&&	O
CDB___txn_activekids	function
(	O
txnid	int
)	O
!=	O
0	int
)	O
return	O
(	O
CDB___db_child_active_err	function
(	O
dbenv	pointer
)	O
)	O
;	O
rectype	int
=	O
DB_bam_pg_alloc	int
;	O
txn_num	int
=	O
txnid	int
==	O
NULL	O
?	O
0	int
:	O
txnid	int
->	O
txnid	int
;	O
if	O
(	O
txnid	int
==	O
NULL	O
)	O
{	O
ZERO_LSN	O
(	O
null_lsn	struct
)	O
;	O
lsnp	pointer
=	O
&	O
null_lsn	struct
;	O
}	O
else	O
lsnp	pointer
=	O
&	O
txnid	int
->	O
last_lsn	struct
;	O
logrec	struct
.	O
size	int
=	O
sizeof	O
(	O
rectype	int
)	O
+	O
sizeof	O
(	O
txn_num	int
)	O
+	O
sizeof	O
(	O
DB_LSN	struct
)	O
+	O
sizeof	O
(	O
fileid	array
)	O
+	O
sizeof	O
(	O
*	O
meta_lsn	struct
)	O
+	O
sizeof	O
(	O
*	O
alloc_lsn	struct
)	O
+	O
sizeof	O
(	O
*	O
page_lsn	struct
)	O
+	O
sizeof	O
(	O
pgno	int
)	O
+	O
sizeof	O
(	O
ptype	int
)	O
+	O
sizeof	O
(	O
next	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
logrec	struct
.	O
size	int
,	O
NULL	O
,	O
&	O
logrec	struct
.	O
data	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
bp	pointer
=	O
logrec	struct
.	O
data	pointer
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
rectype	int
,	O
sizeof	O
(	O
rectype	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
rectype	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
txn_num	int
,	O
sizeof	O
(	O
txn_num	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
txn_num	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
lsnp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
fileid	array
,	O
sizeof	O
(	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
fileid	array
)	O
;	O
if	O
(	O
meta_lsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
meta_lsn	struct
,	O
sizeof	O
(	O
*	O
meta_lsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
meta_lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
meta_lsn	struct
)	O
;	O
if	O
(	O
alloc_lsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
alloc_lsn	struct
,	O
sizeof	O
(	O
*	O
alloc_lsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
alloc_lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
alloc_lsn	struct
)	O
;	O
if	O
(	O
page_lsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
page_lsn	struct
,	O
sizeof	O
(	O
*	O
page_lsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
page_lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
page_lsn	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
pgno	int
,	O
sizeof	O
(	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
pgno	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
ptype	int
,	O
sizeof	O
(	O
ptype	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
ptype	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
next	int
,	O
sizeof	O
(	O
next	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
next	int
)	O
;	O
DB_ASSERT	O
(	O
(	O
u_int32_t	int
)	O
(	O
bp	pointer
-	O
(	O
u_int8_t	char
*	O
)	O
logrec	struct
.	O
data	pointer
)	O
==	O
logrec	struct
.	O
size	int
)	O
;	O
ret	int
=	O
CDB_log_put	function
(	O
dbenv	pointer
,	O
ret_lsnp	pointer
,	O
(	O
DBT	struct
*	O
)	O
&	O
logrec	struct
,	O
flags	int
)	O
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
)	O
txnid	int
->	O
last_lsn	struct
=	O
*	O
ret_lsnp	pointer
;	O
CDB___os_free	function
(	O
logrec	struct
.	O
data	pointer
,	O
logrec	struct
.	O
size	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___bam_pg_alloc_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
)	O
{	O
}	O
if	O
(	O
notused3	pointer
)	O
{	O
}	O
__bam_pg_alloc_args	struct
*	O
argp	pointer
;	O
int	O
ret	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___bam_pg_alloc_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]bam_pg_alloc: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tmeta_lsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
meta_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
meta_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\talloc_lsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
alloc_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
alloc_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tpage_lsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
page_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
page_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tpgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pgno	int
)	O
;	O
printf	function
(	O
"\tptype: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
ptype	int
)	O
;	O
printf	function
(	O
"\tnext: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
next	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_pg_alloc_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__bam_pg_alloc_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__bam_pg_alloc_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__bam_pg_alloc_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
meta_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
meta_lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
meta_lsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
alloc_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
alloc_lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
alloc_lsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
page_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
page_lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
page_lsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
ptype	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
ptype	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
ptype	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
next	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
next	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
next	int
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_pg_free1_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
)	O
{	O
}	O
if	O
(	O
notused3	pointer
)	O
{	O
}	O
__bam_pg_free1_args	struct
*	O
argp	pointer
;	O
u_int32_t	int
i	int
;	O
u_int	int
ch	int
;	O
int	O
ret	int
;	O
i	int
=	O
0	int
;	O
ch	int
=	O
0	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___bam_pg_free1_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]bam_pg_free1: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tpgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pgno	int
)	O
;	O
printf	function
(	O
"\tmeta_lsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
meta_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
meta_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\theader: "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argp	pointer
->	O
header	struct
.	O
size	int
;	O
i	int
++	O
)	O
{	O
ch	int
=	O
(	O
(	O
u_int8_t	char
*	O
)	O
argp	pointer
->	O
header	struct
.	O
data	pointer
)	O
[	O
i	int
]	O
;	O
if	O
(	O
isprint	function
(	O
ch	int
)	O
||	O
ch	int
==	O
0xa	int
)	O
putchar	function
(	O
ch	int
)	O
;	O
else	O
printf	function
(	O
"%#x "	pointer
,	O
ch	int
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"\tnext: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
next	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_pg_free1_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__bam_pg_free1_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__bam_pg_free1_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__bam_pg_free1_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
meta_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
meta_lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
meta_lsn	struct
)	O
;	O
memset	function
(	O
&	O
argp	pointer
->	O
header	struct
,	O
0	int
,	O
sizeof	O
(	O
argp	pointer
->	O
header	struct
)	O
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
header	struct
.	O
size	int
,	O
bp	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
argp	pointer
->	O
header	struct
.	O
data	pointer
=	O
bp	pointer
;	O
bp	pointer
+=	O
argp	pointer
->	O
header	struct
.	O
size	int
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
next	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
next	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
next	int
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_pg_free_log	function
(	O
dbenv	pointer
,	O
txnid	int
,	O
ret_lsnp	pointer
,	O
flags	int
,	O
fileid	array
,	O
pgno	int
,	O
meta_lsn	struct
,	O
alloc_lsn	struct
,	O
header	struct
,	O
next	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_TXN	struct
*	O
txnid	int
;	O
DB_LSN	struct
*	O
ret_lsnp	pointer
;	O
u_int32_t	int
flags	int
;	O
int32_t	int
fileid	array
;	O
db_pgno_t	int
pgno	int
;	O
DB_LSN	struct
*	O
meta_lsn	struct
;	O
DB_LSN	struct
*	O
alloc_lsn	struct
;	O
const	O
DBT	struct
*	O
header	struct
;	O
db_pgno_t	int
next	int
;	O
{	O
DBT	struct
logrec	struct
;	O
DB_LSN	struct
*	O
lsnp	pointer
,	O
null_lsn	struct
;	O
u_int32_t	int
zero	int
;	O
u_int32_t	int
rectype	int
,	O
txn_num	int
;	O
int	O
ret	int
;	O
u_int8_t	char
*	O
bp	pointer
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
&&	O
TAILQ_FIRST	O
(	O
&	O
txnid	int
->	O
kids	struct
)	O
!=	O
NULL	O
&&	O
CDB___txn_activekids	function
(	O
txnid	int
)	O
!=	O
0	int
)	O
return	O
(	O
CDB___db_child_active_err	function
(	O
dbenv	pointer
)	O
)	O
;	O
rectype	int
=	O
DB_bam_pg_free	int
;	O
txn_num	int
=	O
txnid	int
==	O
NULL	O
?	O
0	int
:	O
txnid	int
->	O
txnid	int
;	O
if	O
(	O
txnid	int
==	O
NULL	O
)	O
{	O
ZERO_LSN	O
(	O
null_lsn	struct
)	O
;	O
lsnp	pointer
=	O
&	O
null_lsn	struct
;	O
}	O
else	O
lsnp	pointer
=	O
&	O
txnid	int
->	O
last_lsn	struct
;	O
logrec	struct
.	O
size	int
=	O
sizeof	O
(	O
rectype	int
)	O
+	O
sizeof	O
(	O
txn_num	int
)	O
+	O
sizeof	O
(	O
DB_LSN	struct
)	O
+	O
sizeof	O
(	O
fileid	array
)	O
+	O
sizeof	O
(	O
pgno	int
)	O
+	O
sizeof	O
(	O
*	O
meta_lsn	struct
)	O
+	O
sizeof	O
(	O
*	O
alloc_lsn	struct
)	O
+	O
sizeof	O
(	O
u_int32_t	int
)	O
+	O
(	O
header	struct
==	O
NULL	O
?	O
0	int
:	O
header	struct
->	O
size	int
)	O
+	O
sizeof	O
(	O
next	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
logrec	struct
.	O
size	int
,	O
NULL	O
,	O
&	O
logrec	struct
.	O
data	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
bp	pointer
=	O
logrec	struct
.	O
data	pointer
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
rectype	int
,	O
sizeof	O
(	O
rectype	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
rectype	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
txn_num	int
,	O
sizeof	O
(	O
txn_num	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
txn_num	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
lsnp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
fileid	array
,	O
sizeof	O
(	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
fileid	array
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
pgno	int
,	O
sizeof	O
(	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
pgno	int
)	O
;	O
if	O
(	O
meta_lsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
meta_lsn	struct
,	O
sizeof	O
(	O
*	O
meta_lsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
meta_lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
meta_lsn	struct
)	O
;	O
if	O
(	O
alloc_lsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
alloc_lsn	struct
,	O
sizeof	O
(	O
*	O
alloc_lsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
alloc_lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
alloc_lsn	struct
)	O
;	O
if	O
(	O
header	struct
==	O
NULL	O
)	O
{	O
zero	int
=	O
0	int
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
zero	int
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
}	O
else	O
{	O
memcpy	function
(	O
bp	pointer
,	O
&	O
header	struct
->	O
size	int
,	O
sizeof	O
(	O
header	struct
->	O
size	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
header	struct
->	O
size	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
header	struct
->	O
data	pointer
,	O
header	struct
->	O
size	int
)	O
;	O
bp	pointer
+=	O
header	struct
->	O
size	int
;	O
}	O
memcpy	function
(	O
bp	pointer
,	O
&	O
next	int
,	O
sizeof	O
(	O
next	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
next	int
)	O
;	O
DB_ASSERT	O
(	O
(	O
u_int32_t	int
)	O
(	O
bp	pointer
-	O
(	O
u_int8_t	char
*	O
)	O
logrec	struct
.	O
data	pointer
)	O
==	O
logrec	struct
.	O
size	int
)	O
;	O
ret	int
=	O
CDB_log_put	function
(	O
dbenv	pointer
,	O
ret_lsnp	pointer
,	O
(	O
DBT	struct
*	O
)	O
&	O
logrec	struct
,	O
flags	int
)	O
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
)	O
txnid	int
->	O
last_lsn	struct
=	O
*	O
ret_lsnp	pointer
;	O
CDB___os_free	function
(	O
logrec	struct
.	O
data	pointer
,	O
logrec	struct
.	O
size	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___bam_pg_free_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
)	O
{	O
}	O
if	O
(	O
notused3	pointer
)	O
{	O
}	O
__bam_pg_free_args	struct
*	O
argp	pointer
;	O
u_int32_t	int
i	int
;	O
u_int	int
ch	int
;	O
int	O
ret	int
;	O
i	int
=	O
0	int
;	O
ch	int
=	O
0	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___bam_pg_free_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]bam_pg_free: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tpgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pgno	int
)	O
;	O
printf	function
(	O
"\tmeta_lsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
meta_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
meta_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\talloc_lsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
alloc_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
alloc_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\theader: "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argp	pointer
->	O
header	struct
.	O
size	int
;	O
i	int
++	O
)	O
{	O
ch	int
=	O
(	O
(	O
u_int8_t	char
*	O
)	O
argp	pointer
->	O
header	struct
.	O
data	pointer
)	O
[	O
i	int
]	O
;	O
if	O
(	O
isprint	function
(	O
ch	int
)	O
||	O
ch	int
==	O
0xa	int
)	O
putchar	function
(	O
ch	int
)	O
;	O
else	O
printf	function
(	O
"%#x "	pointer
,	O
ch	int
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"\tnext: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
next	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_pg_free_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__bam_pg_free_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__bam_pg_free_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__bam_pg_free_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
meta_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
meta_lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
meta_lsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
alloc_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
alloc_lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
alloc_lsn	struct
)	O
;	O
memset	function
(	O
&	O
argp	pointer
->	O
header	struct
,	O
0	int
,	O
sizeof	O
(	O
argp	pointer
->	O
header	struct
)	O
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
header	struct
.	O
size	int
,	O
bp	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
argp	pointer
->	O
header	struct
.	O
data	pointer
=	O
bp	pointer
;	O
bp	pointer
+=	O
argp	pointer
->	O
header	struct
.	O
size	int
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
next	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
next	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
next	int
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_split1_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
)	O
{	O
}	O
if	O
(	O
notused3	pointer
)	O
{	O
}	O
__bam_split1_args	struct
*	O
argp	pointer
;	O
u_int32_t	int
i	int
;	O
u_int	int
ch	int
;	O
int	O
ret	int
;	O
i	int
=	O
0	int
;	O
ch	int
=	O
0	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___bam_split1_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]bam_split1: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tleft: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
left	int
)	O
;	O
printf	function
(	O
"\tllsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
llsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
llsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tright: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
right	int
)	O
;	O
printf	function
(	O
"\trlsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
rlsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
rlsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tindx: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
indx	short
)	O
;	O
printf	function
(	O
"\tnpgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
npgno	int
)	O
;	O
printf	function
(	O
"\tnlsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
nlsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
nlsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tpg: "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argp	pointer
->	O
pg	struct
.	O
size	int
;	O
i	int
++	O
)	O
{	O
ch	int
=	O
(	O
(	O
u_int8_t	char
*	O
)	O
argp	pointer
->	O
pg	struct
.	O
data	pointer
)	O
[	O
i	int
]	O
;	O
if	O
(	O
isprint	function
(	O
ch	int
)	O
||	O
ch	int
==	O
0xa	int
)	O
putchar	function
(	O
ch	int
)	O
;	O
else	O
printf	function
(	O
"%#x "	pointer
,	O
ch	int
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_split1_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__bam_split1_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__bam_split1_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__bam_split1_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
left	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
left	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
left	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
llsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
llsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
llsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
right	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
right	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
right	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
rlsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
rlsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
rlsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
indx	short
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
indx	short
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
indx	short
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
npgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
npgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
npgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
nlsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
nlsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
nlsn	struct
)	O
;	O
memset	function
(	O
&	O
argp	pointer
->	O
pg	struct
,	O
0	int
,	O
sizeof	O
(	O
argp	pointer
->	O
pg	struct
)	O
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pg	struct
.	O
size	int
,	O
bp	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
argp	pointer
->	O
pg	struct
.	O
data	pointer
=	O
bp	pointer
;	O
bp	pointer
+=	O
argp	pointer
->	O
pg	struct
.	O
size	int
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_split_log	function
(	O
dbenv	pointer
,	O
txnid	int
,	O
ret_lsnp	pointer
,	O
flags	int
,	O
fileid	array
,	O
left	int
,	O
llsn	struct
,	O
right	int
,	O
rlsn	struct
,	O
indx	short
,	O
npgno	int
,	O
nlsn	struct
,	O
root_pgno	int
,	O
pg	struct
,	O
opflags	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_TXN	struct
*	O
txnid	int
;	O
DB_LSN	struct
*	O
ret_lsnp	pointer
;	O
u_int32_t	int
flags	int
;	O
int32_t	int
fileid	array
;	O
db_pgno_t	int
left	int
;	O
DB_LSN	struct
*	O
llsn	struct
;	O
db_pgno_t	int
right	int
;	O
DB_LSN	struct
*	O
rlsn	struct
;	O
u_int32_t	int
indx	short
;	O
db_pgno_t	int
npgno	int
;	O
DB_LSN	struct
*	O
nlsn	struct
;	O
db_pgno_t	int
root_pgno	int
;	O
const	O
DBT	struct
*	O
pg	struct
;	O
u_int32_t	int
opflags	int
;	O
{	O
DBT	struct
logrec	struct
;	O
DB_LSN	struct
*	O
lsnp	pointer
,	O
null_lsn	struct
;	O
u_int32_t	int
zero	int
;	O
u_int32_t	int
rectype	int
,	O
txn_num	int
;	O
int	O
ret	int
;	O
u_int8_t	char
*	O
bp	pointer
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
&&	O
TAILQ_FIRST	O
(	O
&	O
txnid	int
->	O
kids	struct
)	O
!=	O
NULL	O
&&	O
CDB___txn_activekids	function
(	O
txnid	int
)	O
!=	O
0	int
)	O
return	O
(	O
CDB___db_child_active_err	function
(	O
dbenv	pointer
)	O
)	O
;	O
rectype	int
=	O
DB_bam_split	int
;	O
txn_num	int
=	O
txnid	int
==	O
NULL	O
?	O
0	int
:	O
txnid	int
->	O
txnid	int
;	O
if	O
(	O
txnid	int
==	O
NULL	O
)	O
{	O
ZERO_LSN	O
(	O
null_lsn	struct
)	O
;	O
lsnp	pointer
=	O
&	O
null_lsn	struct
;	O
}	O
else	O
lsnp	pointer
=	O
&	O
txnid	int
->	O
last_lsn	struct
;	O
logrec	struct
.	O
size	int
=	O
sizeof	O
(	O
rectype	int
)	O
+	O
sizeof	O
(	O
txn_num	int
)	O
+	O
sizeof	O
(	O
DB_LSN	struct
)	O
+	O
sizeof	O
(	O
fileid	array
)	O
+	O
sizeof	O
(	O
left	int
)	O
+	O
sizeof	O
(	O
*	O
llsn	struct
)	O
+	O
sizeof	O
(	O
right	int
)	O
+	O
sizeof	O
(	O
*	O
rlsn	struct
)	O
+	O
sizeof	O
(	O
indx	short
)	O
+	O
sizeof	O
(	O
npgno	int
)	O
+	O
sizeof	O
(	O
*	O
nlsn	struct
)	O
+	O
sizeof	O
(	O
root_pgno	int
)	O
+	O
sizeof	O
(	O
u_int32_t	int
)	O
+	O
(	O
pg	struct
==	O
NULL	O
?	O
0	int
:	O
pg	struct
->	O
size	int
)	O
+	O
sizeof	O
(	O
opflags	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
logrec	struct
.	O
size	int
,	O
NULL	O
,	O
&	O
logrec	struct
.	O
data	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
bp	pointer
=	O
logrec	struct
.	O
data	pointer
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
rectype	int
,	O
sizeof	O
(	O
rectype	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
rectype	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
txn_num	int
,	O
sizeof	O
(	O
txn_num	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
txn_num	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
lsnp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
fileid	array
,	O
sizeof	O
(	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
fileid	array
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
left	int
,	O
sizeof	O
(	O
left	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
left	int
)	O
;	O
if	O
(	O
llsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
llsn	struct
,	O
sizeof	O
(	O
*	O
llsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
llsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
llsn	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
right	int
,	O
sizeof	O
(	O
right	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
right	int
)	O
;	O
if	O
(	O
rlsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
rlsn	struct
,	O
sizeof	O
(	O
*	O
rlsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
rlsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
rlsn	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
indx	short
,	O
sizeof	O
(	O
indx	short
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
indx	short
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
npgno	int
,	O
sizeof	O
(	O
npgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
npgno	int
)	O
;	O
if	O
(	O
nlsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
nlsn	struct
,	O
sizeof	O
(	O
*	O
nlsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
nlsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
nlsn	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
root_pgno	int
,	O
sizeof	O
(	O
root_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
root_pgno	int
)	O
;	O
if	O
(	O
pg	struct
==	O
NULL	O
)	O
{	O
zero	int
=	O
0	int
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
zero	int
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
}	O
else	O
{	O
memcpy	function
(	O
bp	pointer
,	O
&	O
pg	struct
->	O
size	int
,	O
sizeof	O
(	O
pg	struct
->	O
size	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
pg	struct
->	O
size	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
pg	struct
->	O
data	pointer
,	O
pg	struct
->	O
size	int
)	O
;	O
bp	pointer
+=	O
pg	struct
->	O
size	int
;	O
}	O
memcpy	function
(	O
bp	pointer
,	O
&	O
opflags	int
,	O
sizeof	O
(	O
opflags	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
opflags	int
)	O
;	O
DB_ASSERT	O
(	O
(	O
u_int32_t	int
)	O
(	O
bp	pointer
-	O
(	O
u_int8_t	char
*	O
)	O
logrec	struct
.	O
data	pointer
)	O
==	O
logrec	struct
.	O
size	int
)	O
;	O
ret	int
=	O
CDB_log_put	function
(	O
dbenv	pointer
,	O
ret_lsnp	pointer
,	O
(	O
DBT	struct
*	O
)	O
&	O
logrec	struct
,	O
flags	int
)	O
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
)	O
txnid	int
->	O
last_lsn	struct
=	O
*	O
ret_lsnp	pointer
;	O
CDB___os_free	function
(	O
logrec	struct
.	O
data	pointer
,	O
logrec	struct
.	O
size	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___bam_split_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
)	O
{	O
}	O
if	O
(	O
notused3	pointer
)	O
{	O
}	O
__bam_split_args	struct
*	O
argp	pointer
;	O
u_int32_t	int
i	int
;	O
u_int	int
ch	int
;	O
int	O
ret	int
;	O
i	int
=	O
0	int
;	O
ch	int
=	O
0	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___bam_split_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]bam_split: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tleft: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
left	int
)	O
;	O
printf	function
(	O
"\tllsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
llsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
llsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tright: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
right	int
)	O
;	O
printf	function
(	O
"\trlsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
rlsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
rlsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tindx: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
indx	short
)	O
;	O
printf	function
(	O
"\tnpgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
npgno	int
)	O
;	O
printf	function
(	O
"\tnlsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
nlsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
nlsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\troot_pgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
root_pgno	int
)	O
;	O
printf	function
(	O
"\tpg: "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argp	pointer
->	O
pg	struct
.	O
size	int
;	O
i	int
++	O
)	O
{	O
ch	int
=	O
(	O
(	O
u_int8_t	char
*	O
)	O
argp	pointer
->	O
pg	struct
.	O
data	pointer
)	O
[	O
i	int
]	O
;	O
if	O
(	O
isprint	function
(	O
ch	int
)	O
||	O
ch	int
==	O
0xa	int
)	O
putchar	function
(	O
ch	int
)	O
;	O
else	O
printf	function
(	O
"%#x "	pointer
,	O
ch	int
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"\topflags: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
opflags	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_split_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__bam_split_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__bam_split_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__bam_split_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
left	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
left	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
left	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
llsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
llsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
llsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
right	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
right	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
right	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
rlsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
rlsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
rlsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
indx	short
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
indx	short
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
indx	short
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
npgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
npgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
npgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
nlsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
nlsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
nlsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
root_pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
root_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
root_pgno	int
)	O
;	O
memset	function
(	O
&	O
argp	pointer
->	O
pg	struct
,	O
0	int
,	O
sizeof	O
(	O
argp	pointer
->	O
pg	struct
)	O
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pg	struct
.	O
size	int
,	O
bp	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
argp	pointer
->	O
pg	struct
.	O
data	pointer
=	O
bp	pointer
;	O
bp	pointer
+=	O
argp	pointer
->	O
pg	struct
.	O
size	int
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
opflags	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
opflags	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
opflags	int
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_rsplit1_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
)	O
{	O
}	O
if	O
(	O
notused3	pointer
)	O
{	O
}	O
__bam_rsplit1_args	struct
*	O
argp	pointer
;	O
u_int32_t	int
i	int
;	O
u_int	int
ch	int
;	O
int	O
ret	int
;	O
i	int
=	O
0	int
;	O
ch	int
=	O
0	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___bam_rsplit1_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]bam_rsplit1: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tpgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pgno	int
)	O
;	O
printf	function
(	O
"\tpgdbt: "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argp	pointer
->	O
pgdbt	struct
.	O
size	int
;	O
i	int
++	O
)	O
{	O
ch	int
=	O
(	O
(	O
u_int8_t	char
*	O
)	O
argp	pointer
->	O
pgdbt	struct
.	O
data	pointer
)	O
[	O
i	int
]	O
;	O
if	O
(	O
isprint	function
(	O
ch	int
)	O
||	O
ch	int
==	O
0xa	int
)	O
putchar	function
(	O
ch	int
)	O
;	O
else	O
printf	function
(	O
"%#x "	pointer
,	O
ch	int
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"\tnrec: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
nrec	int
)	O
;	O
printf	function
(	O
"\trootent: "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argp	pointer
->	O
rootent	struct
.	O
size	int
;	O
i	int
++	O
)	O
{	O
ch	int
=	O
(	O
(	O
u_int8_t	char
*	O
)	O
argp	pointer
->	O
rootent	struct
.	O
data	pointer
)	O
[	O
i	int
]	O
;	O
if	O
(	O
isprint	function
(	O
ch	int
)	O
||	O
ch	int
==	O
0xa	int
)	O
putchar	function
(	O
ch	int
)	O
;	O
else	O
printf	function
(	O
"%#x "	pointer
,	O
ch	int
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"\trootlsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
rootlsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
rootlsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_rsplit1_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__bam_rsplit1_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__bam_rsplit1_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__bam_rsplit1_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
;	O
memset	function
(	O
&	O
argp	pointer
->	O
pgdbt	struct
,	O
0	int
,	O
sizeof	O
(	O
argp	pointer
->	O
pgdbt	struct
)	O
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pgdbt	struct
.	O
size	int
,	O
bp	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
argp	pointer
->	O
pgdbt	struct
.	O
data	pointer
=	O
bp	pointer
;	O
bp	pointer
+=	O
argp	pointer
->	O
pgdbt	struct
.	O
size	int
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
nrec	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
nrec	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
nrec	int
)	O
;	O
memset	function
(	O
&	O
argp	pointer
->	O
rootent	struct
,	O
0	int
,	O
sizeof	O
(	O
argp	pointer
->	O
rootent	struct
)	O
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
rootent	struct
.	O
size	int
,	O
bp	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
argp	pointer
->	O
rootent	struct
.	O
data	pointer
=	O
bp	pointer
;	O
bp	pointer
+=	O
argp	pointer
->	O
rootent	struct
.	O
size	int
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
rootlsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
rootlsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
rootlsn	struct
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_rsplit_log	function
(	O
dbenv	pointer
,	O
txnid	int
,	O
ret_lsnp	pointer
,	O
flags	int
,	O
fileid	array
,	O
pgno	int
,	O
pgdbt	struct
,	O
root_pgno	int
,	O
nrec	int
,	O
rootent	struct
,	O
rootlsn	struct
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_TXN	struct
*	O
txnid	int
;	O
DB_LSN	struct
*	O
ret_lsnp	pointer
;	O
u_int32_t	int
flags	int
;	O
int32_t	int
fileid	array
;	O
db_pgno_t	int
pgno	int
;	O
const	O
DBT	struct
*	O
pgdbt	struct
;	O
db_pgno_t	int
root_pgno	int
;	O
db_pgno_t	int
nrec	int
;	O
const	O
DBT	struct
*	O
rootent	struct
;	O
DB_LSN	struct
*	O
rootlsn	struct
;	O
{	O
DBT	struct
logrec	struct
;	O
DB_LSN	struct
*	O
lsnp	pointer
,	O
null_lsn	struct
;	O
u_int32_t	int
zero	int
;	O
u_int32_t	int
rectype	int
,	O
txn_num	int
;	O
int	O
ret	int
;	O
u_int8_t	char
*	O
bp	pointer
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
&&	O
TAILQ_FIRST	O
(	O
&	O
txnid	int
->	O
kids	struct
)	O
!=	O
NULL	O
&&	O
CDB___txn_activekids	function
(	O
txnid	int
)	O
!=	O
0	int
)	O
return	O
(	O
CDB___db_child_active_err	function
(	O
dbenv	pointer
)	O
)	O
;	O
rectype	int
=	O
DB_bam_rsplit	int
;	O
txn_num	int
=	O
txnid	int
==	O
NULL	O
?	O
0	int
:	O
txnid	int
->	O
txnid	int
;	O
if	O
(	O
txnid	int
==	O
NULL	O
)	O
{	O
ZERO_LSN	O
(	O
null_lsn	struct
)	O
;	O
lsnp	pointer
=	O
&	O
null_lsn	struct
;	O
}	O
else	O
lsnp	pointer
=	O
&	O
txnid	int
->	O
last_lsn	struct
;	O
logrec	struct
.	O
size	int
=	O
sizeof	O
(	O
rectype	int
)	O
+	O
sizeof	O
(	O
txn_num	int
)	O
+	O
sizeof	O
(	O
DB_LSN	struct
)	O
+	O
sizeof	O
(	O
fileid	array
)	O
+	O
sizeof	O
(	O
pgno	int
)	O
+	O
sizeof	O
(	O
u_int32_t	int
)	O
+	O
(	O
pgdbt	struct
==	O
NULL	O
?	O
0	int
:	O
pgdbt	struct
->	O
size	int
)	O
+	O
sizeof	O
(	O
root_pgno	int
)	O
+	O
sizeof	O
(	O
nrec	int
)	O
+	O
sizeof	O
(	O
u_int32_t	int
)	O
+	O
(	O
rootent	struct
==	O
NULL	O
?	O
0	int
:	O
rootent	struct
->	O
size	int
)	O
+	O
sizeof	O
(	O
*	O
rootlsn	struct
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
logrec	struct
.	O
size	int
,	O
NULL	O
,	O
&	O
logrec	struct
.	O
data	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
bp	pointer
=	O
logrec	struct
.	O
data	pointer
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
rectype	int
,	O
sizeof	O
(	O
rectype	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
rectype	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
txn_num	int
,	O
sizeof	O
(	O
txn_num	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
txn_num	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
lsnp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
fileid	array
,	O
sizeof	O
(	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
fileid	array
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
pgno	int
,	O
sizeof	O
(	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
pgno	int
)	O
;	O
if	O
(	O
pgdbt	struct
==	O
NULL	O
)	O
{	O
zero	int
=	O
0	int
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
zero	int
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
}	O
else	O
{	O
memcpy	function
(	O
bp	pointer
,	O
&	O
pgdbt	struct
->	O
size	int
,	O
sizeof	O
(	O
pgdbt	struct
->	O
size	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
pgdbt	struct
->	O
size	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
pgdbt	struct
->	O
data	pointer
,	O
pgdbt	struct
->	O
size	int
)	O
;	O
bp	pointer
+=	O
pgdbt	struct
->	O
size	int
;	O
}	O
memcpy	function
(	O
bp	pointer
,	O
&	O
root_pgno	int
,	O
sizeof	O
(	O
root_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
root_pgno	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
nrec	int
,	O
sizeof	O
(	O
nrec	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
nrec	int
)	O
;	O
if	O
(	O
rootent	struct
==	O
NULL	O
)	O
{	O
zero	int
=	O
0	int
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
zero	int
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
}	O
else	O
{	O
memcpy	function
(	O
bp	pointer
,	O
&	O
rootent	struct
->	O
size	int
,	O
sizeof	O
(	O
rootent	struct
->	O
size	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
rootent	struct
->	O
size	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
rootent	struct
->	O
data	pointer
,	O
rootent	struct
->	O
size	int
)	O
;	O
bp	pointer
+=	O
rootent	struct
->	O
size	int
;	O
}	O
if	O
(	O
rootlsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
rootlsn	struct
,	O
sizeof	O
(	O
*	O
rootlsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
rootlsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
rootlsn	struct
)	O
;	O
DB_ASSERT	O
(	O
(	O
u_int32_t	int
)	O
(	O
bp	pointer
-	O
(	O
u_int8_t	char
*	O
)	O
logrec	struct
.	O
data	pointer
)	O
==	O
logrec	struct
.	O
size	int
)	O
;	O
ret	int
=	O
CDB_log_put	function
(	O
dbenv	pointer
,	O
ret_lsnp	pointer
,	O
(	O
DBT	struct
*	O
)	O
&	O
logrec	struct
,	O
flags	int
)	O
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
)	O
txnid	int
->	O
last_lsn	struct
=	O
*	O
ret_lsnp	pointer
;	O
CDB___os_free	function
(	O
logrec	struct
.	O
data	pointer
,	O
logrec	struct
.	O
size	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___bam_rsplit_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
)	O
{	O
}	O
if	O
(	O
notused3	pointer
)	O
{	O
}	O
__bam_rsplit_args	struct
*	O
argp	pointer
;	O
u_int32_t	int
i	int
;	O
u_int	int
ch	int
;	O
int	O
ret	int
;	O
i	int
=	O
0	int
;	O
ch	int
=	O
0	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___bam_rsplit_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]bam_rsplit: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tpgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pgno	int
)	O
;	O
printf	function
(	O
"\tpgdbt: "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argp	pointer
->	O
pgdbt	struct
.	O
size	int
;	O
i	int
++	O
)	O
{	O
ch	int
=	O
(	O
(	O
u_int8_t	char
*	O
)	O
argp	pointer
->	O
pgdbt	struct
.	O
data	pointer
)	O
[	O
i	int
]	O
;	O
if	O
(	O
isprint	function
(	O
ch	int
)	O
||	O
ch	int
==	O
0xa	int
)	O
putchar	function
(	O
ch	int
)	O
;	O
else	O
printf	function
(	O
"%#x "	pointer
,	O
ch	int
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"\troot_pgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
root_pgno	int
)	O
;	O
printf	function
(	O
"\tnrec: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
nrec	int
)	O
;	O
printf	function
(	O
"\trootent: "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argp	pointer
->	O
rootent	struct
.	O
size	int
;	O
i	int
++	O
)	O
{	O
ch	int
=	O
(	O
(	O
u_int8_t	char
*	O
)	O
argp	pointer
->	O
rootent	struct
.	O
data	pointer
)	O
[	O
i	int
]	O
;	O
if	O
(	O
isprint	function
(	O
ch	int
)	O
||	O
ch	int
==	O
0xa	int
)	O
putchar	function
(	O
ch	int
)	O
;	O
else	O
printf	function
(	O
"%#x "	pointer
,	O
ch	int
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"\trootlsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
rootlsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
rootlsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_rsplit_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__bam_rsplit_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__bam_rsplit_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__bam_rsplit_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
;	O
memset	function
(	O
&	O
argp	pointer
->	O
pgdbt	struct
,	O
0	int
,	O
sizeof	O
(	O
argp	pointer
->	O
pgdbt	struct
)	O
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pgdbt	struct
.	O
size	int
,	O
bp	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
argp	pointer
->	O
pgdbt	struct
.	O
data	pointer
=	O
bp	pointer
;	O
bp	pointer
+=	O
argp	pointer
->	O
pgdbt	struct
.	O
size	int
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
root_pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
root_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
root_pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
nrec	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
nrec	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
nrec	int
)	O
;	O
memset	function
(	O
&	O
argp	pointer
->	O
rootent	struct
,	O
0	int
,	O
sizeof	O
(	O
argp	pointer
->	O
rootent	struct
)	O
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
rootent	struct
.	O
size	int
,	O
bp	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
argp	pointer
->	O
rootent	struct
.	O
data	pointer
=	O
bp	pointer
;	O
bp	pointer
+=	O
argp	pointer
->	O
rootent	struct
.	O
size	int
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
rootlsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
rootlsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
rootlsn	struct
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_adj_log	function
(	O
dbenv	pointer
,	O
txnid	int
,	O
ret_lsnp	pointer
,	O
flags	int
,	O
fileid	array
,	O
pgno	int
,	O
lsn	struct
,	O
indx	short
,	O
indx_copy	int
,	O
is_insert	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_TXN	struct
*	O
txnid	int
;	O
DB_LSN	struct
*	O
ret_lsnp	pointer
;	O
u_int32_t	int
flags	int
;	O
int32_t	int
fileid	array
;	O
db_pgno_t	int
pgno	int
;	O
DB_LSN	struct
*	O
lsn	struct
;	O
u_int32_t	int
indx	short
;	O
u_int32_t	int
indx_copy	int
;	O
u_int32_t	int
is_insert	int
;	O
{	O
DBT	struct
logrec	struct
;	O
DB_LSN	struct
*	O
lsnp	pointer
,	O
null_lsn	struct
;	O
u_int32_t	int
rectype	int
,	O
txn_num	int
;	O
int	O
ret	int
;	O
u_int8_t	char
*	O
bp	pointer
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
&&	O
TAILQ_FIRST	O
(	O
&	O
txnid	int
->	O
kids	struct
)	O
!=	O
NULL	O
&&	O
CDB___txn_activekids	function
(	O
txnid	int
)	O
!=	O
0	int
)	O
return	O
(	O
CDB___db_child_active_err	function
(	O
dbenv	pointer
)	O
)	O
;	O
rectype	int
=	O
DB_bam_adj	int
;	O
txn_num	int
=	O
txnid	int
==	O
NULL	O
?	O
0	int
:	O
txnid	int
->	O
txnid	int
;	O
if	O
(	O
txnid	int
==	O
NULL	O
)	O
{	O
ZERO_LSN	O
(	O
null_lsn	struct
)	O
;	O
lsnp	pointer
=	O
&	O
null_lsn	struct
;	O
}	O
else	O
lsnp	pointer
=	O
&	O
txnid	int
->	O
last_lsn	struct
;	O
logrec	struct
.	O
size	int
=	O
sizeof	O
(	O
rectype	int
)	O
+	O
sizeof	O
(	O
txn_num	int
)	O
+	O
sizeof	O
(	O
DB_LSN	struct
)	O
+	O
sizeof	O
(	O
fileid	array
)	O
+	O
sizeof	O
(	O
pgno	int
)	O
+	O
sizeof	O
(	O
*	O
lsn	struct
)	O
+	O
sizeof	O
(	O
indx	short
)	O
+	O
sizeof	O
(	O
indx_copy	int
)	O
+	O
sizeof	O
(	O
is_insert	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
logrec	struct
.	O
size	int
,	O
NULL	O
,	O
&	O
logrec	struct
.	O
data	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
bp	pointer
=	O
logrec	struct
.	O
data	pointer
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
rectype	int
,	O
sizeof	O
(	O
rectype	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
rectype	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
txn_num	int
,	O
sizeof	O
(	O
txn_num	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
txn_num	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
lsnp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
fileid	array
,	O
sizeof	O
(	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
fileid	array
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
pgno	int
,	O
sizeof	O
(	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
pgno	int
)	O
;	O
if	O
(	O
lsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
lsn	struct
,	O
sizeof	O
(	O
*	O
lsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
lsn	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
indx	short
,	O
sizeof	O
(	O
indx	short
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
indx	short
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
indx_copy	int
,	O
sizeof	O
(	O
indx_copy	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
indx_copy	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
is_insert	int
,	O
sizeof	O
(	O
is_insert	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
is_insert	int
)	O
;	O
DB_ASSERT	O
(	O
(	O
u_int32_t	int
)	O
(	O
bp	pointer
-	O
(	O
u_int8_t	char
*	O
)	O
logrec	struct
.	O
data	pointer
)	O
==	O
logrec	struct
.	O
size	int
)	O
;	O
ret	int
=	O
CDB_log_put	function
(	O
dbenv	pointer
,	O
ret_lsnp	pointer
,	O
(	O
DBT	struct
*	O
)	O
&	O
logrec	struct
,	O
flags	int
)	O
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
)	O
txnid	int
->	O
last_lsn	struct
=	O
*	O
ret_lsnp	pointer
;	O
CDB___os_free	function
(	O
logrec	struct
.	O
data	pointer
,	O
logrec	struct
.	O
size	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___bam_adj_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
)	O
{	O
}	O
if	O
(	O
notused3	pointer
)	O
{	O
}	O
__bam_adj_args	struct
*	O
argp	pointer
;	O
int	O
ret	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___bam_adj_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]bam_adj: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tpgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pgno	int
)	O
;	O
printf	function
(	O
"\tlsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tindx: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
indx	short
)	O
;	O
printf	function
(	O
"\tindx_copy: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
indx_copy	int
)	O
;	O
printf	function
(	O
"\tis_insert: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
is_insert	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_adj_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__bam_adj_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__bam_adj_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__bam_adj_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
lsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
indx	short
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
indx	short
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
indx	short
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
indx_copy	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
indx_copy	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
indx_copy	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
is_insert	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
is_insert	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
is_insert	int
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_cadjust_log	function
(	O
dbenv	pointer
,	O
txnid	int
,	O
ret_lsnp	pointer
,	O
flags	int
,	O
fileid	array
,	O
pgno	int
,	O
lsn	struct
,	O
indx	short
,	O
adjust	int
,	O
opflags	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_TXN	struct
*	O
txnid	int
;	O
DB_LSN	struct
*	O
ret_lsnp	pointer
;	O
u_int32_t	int
flags	int
;	O
int32_t	int
fileid	array
;	O
db_pgno_t	int
pgno	int
;	O
DB_LSN	struct
*	O
lsn	struct
;	O
u_int32_t	int
indx	short
;	O
int32_t	int
adjust	int
;	O
u_int32_t	int
opflags	int
;	O
{	O
DBT	struct
logrec	struct
;	O
DB_LSN	struct
*	O
lsnp	pointer
,	O
null_lsn	struct
;	O
u_int32_t	int
rectype	int
,	O
txn_num	int
;	O
int	O
ret	int
;	O
u_int8_t	char
*	O
bp	pointer
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
&&	O
TAILQ_FIRST	O
(	O
&	O
txnid	int
->	O
kids	struct
)	O
!=	O
NULL	O
&&	O
CDB___txn_activekids	function
(	O
txnid	int
)	O
!=	O
0	int
)	O
return	O
(	O
CDB___db_child_active_err	function
(	O
dbenv	pointer
)	O
)	O
;	O
rectype	int
=	O
DB_bam_cadjust	int
;	O
txn_num	int
=	O
txnid	int
==	O
NULL	O
?	O
0	int
:	O
txnid	int
->	O
txnid	int
;	O
if	O
(	O
txnid	int
==	O
NULL	O
)	O
{	O
ZERO_LSN	O
(	O
null_lsn	struct
)	O
;	O
lsnp	pointer
=	O
&	O
null_lsn	struct
;	O
}	O
else	O
lsnp	pointer
=	O
&	O
txnid	int
->	O
last_lsn	struct
;	O
logrec	struct
.	O
size	int
=	O
sizeof	O
(	O
rectype	int
)	O
+	O
sizeof	O
(	O
txn_num	int
)	O
+	O
sizeof	O
(	O
DB_LSN	struct
)	O
+	O
sizeof	O
(	O
fileid	array
)	O
+	O
sizeof	O
(	O
pgno	int
)	O
+	O
sizeof	O
(	O
*	O
lsn	struct
)	O
+	O
sizeof	O
(	O
indx	short
)	O
+	O
sizeof	O
(	O
adjust	int
)	O
+	O
sizeof	O
(	O
opflags	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
logrec	struct
.	O
size	int
,	O
NULL	O
,	O
&	O
logrec	struct
.	O
data	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
bp	pointer
=	O
logrec	struct
.	O
data	pointer
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
rectype	int
,	O
sizeof	O
(	O
rectype	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
rectype	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
txn_num	int
,	O
sizeof	O
(	O
txn_num	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
txn_num	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
lsnp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
fileid	array
,	O
sizeof	O
(	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
fileid	array
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
pgno	int
,	O
sizeof	O
(	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
pgno	int
)	O
;	O
if	O
(	O
lsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
lsn	struct
,	O
sizeof	O
(	O
*	O
lsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
lsn	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
indx	short
,	O
sizeof	O
(	O
indx	short
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
indx	short
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
adjust	int
,	O
sizeof	O
(	O
adjust	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
adjust	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
opflags	int
,	O
sizeof	O
(	O
opflags	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
opflags	int
)	O
;	O
DB_ASSERT	O
(	O
(	O
u_int32_t	int
)	O
(	O
bp	pointer
-	O
(	O
u_int8_t	char
*	O
)	O
logrec	struct
.	O
data	pointer
)	O
==	O
logrec	struct
.	O
size	int
)	O
;	O
ret	int
=	O
CDB_log_put	function
(	O
dbenv	pointer
,	O
ret_lsnp	pointer
,	O
(	O
DBT	struct
*	O
)	O
&	O
logrec	struct
,	O
flags	int
)	O
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
)	O
txnid	int
->	O
last_lsn	struct
=	O
*	O
ret_lsnp	pointer
;	O
CDB___os_free	function
(	O
logrec	struct
.	O
data	pointer
,	O
logrec	struct
.	O
size	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___bam_cadjust_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
)	O
{	O
}	O
if	O
(	O
notused3	pointer
)	O
{	O
}	O
__bam_cadjust_args	struct
*	O
argp	pointer
;	O
int	O
ret	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___bam_cadjust_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]bam_cadjust: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tpgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pgno	int
)	O
;	O
printf	function
(	O
"\tlsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tindx: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
indx	short
)	O
;	O
printf	function
(	O
"\tadjust: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
adjust	int
)	O
;	O
printf	function
(	O
"\topflags: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
opflags	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_cadjust_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__bam_cadjust_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__bam_cadjust_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__bam_cadjust_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
lsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
indx	short
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
indx	short
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
indx	short
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
adjust	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
adjust	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
adjust	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
opflags	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
opflags	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
opflags	int
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_cdel_log	function
(	O
dbenv	pointer
,	O
txnid	int
,	O
ret_lsnp	pointer
,	O
flags	int
,	O
fileid	array
,	O
pgno	int
,	O
lsn	struct
,	O
indx	short
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_TXN	struct
*	O
txnid	int
;	O
DB_LSN	struct
*	O
ret_lsnp	pointer
;	O
u_int32_t	int
flags	int
;	O
int32_t	int
fileid	array
;	O
db_pgno_t	int
pgno	int
;	O
DB_LSN	struct
*	O
lsn	struct
;	O
u_int32_t	int
indx	short
;	O
{	O
DBT	struct
logrec	struct
;	O
DB_LSN	struct
*	O
lsnp	pointer
,	O
null_lsn	struct
;	O
u_int32_t	int
rectype	int
,	O
txn_num	int
;	O
int	O
ret	int
;	O
u_int8_t	char
*	O
bp	pointer
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
&&	O
TAILQ_FIRST	O
(	O
&	O
txnid	int
->	O
kids	struct
)	O
!=	O
NULL	O
&&	O
CDB___txn_activekids	function
(	O
txnid	int
)	O
!=	O
0	int
)	O
return	O
(	O
CDB___db_child_active_err	function
(	O
dbenv	pointer
)	O
)	O
;	O
rectype	int
=	O
DB_bam_cdel	int
;	O
txn_num	int
=	O
txnid	int
==	O
NULL	O
?	O
0	int
:	O
txnid	int
->	O
txnid	int
;	O
if	O
(	O
txnid	int
==	O
NULL	O
)	O
{	O
ZERO_LSN	O
(	O
null_lsn	struct
)	O
;	O
lsnp	pointer
=	O
&	O
null_lsn	struct
;	O
}	O
else	O
lsnp	pointer
=	O
&	O
txnid	int
->	O
last_lsn	struct
;	O
logrec	struct
.	O
size	int
=	O
sizeof	O
(	O
rectype	int
)	O
+	O
sizeof	O
(	O
txn_num	int
)	O
+	O
sizeof	O
(	O
DB_LSN	struct
)	O
+	O
sizeof	O
(	O
fileid	array
)	O
+	O
sizeof	O
(	O
pgno	int
)	O
+	O
sizeof	O
(	O
*	O
lsn	struct
)	O
+	O
sizeof	O
(	O
indx	short
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
logrec	struct
.	O
size	int
,	O
NULL	O
,	O
&	O
logrec	struct
.	O
data	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
bp	pointer
=	O
logrec	struct
.	O
data	pointer
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
rectype	int
,	O
sizeof	O
(	O
rectype	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
rectype	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
txn_num	int
,	O
sizeof	O
(	O
txn_num	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
txn_num	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
lsnp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
fileid	array
,	O
sizeof	O
(	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
fileid	array
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
pgno	int
,	O
sizeof	O
(	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
pgno	int
)	O
;	O
if	O
(	O
lsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
lsn	struct
,	O
sizeof	O
(	O
*	O
lsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
lsn	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
indx	short
,	O
sizeof	O
(	O
indx	short
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
indx	short
)	O
;	O
DB_ASSERT	O
(	O
(	O
u_int32_t	int
)	O
(	O
bp	pointer
-	O
(	O
u_int8_t	char
*	O
)	O
logrec	struct
.	O
data	pointer
)	O
==	O
logrec	struct
.	O
size	int
)	O
;	O
ret	int
=	O
CDB_log_put	function
(	O
dbenv	pointer
,	O
ret_lsnp	pointer
,	O
(	O
DBT	struct
*	O
)	O
&	O
logrec	struct
,	O
flags	int
)	O
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
)	O
txnid	int
->	O
last_lsn	struct
=	O
*	O
ret_lsnp	pointer
;	O
CDB___os_free	function
(	O
logrec	struct
.	O
data	pointer
,	O
logrec	struct
.	O
size	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___bam_cdel_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
)	O
{	O
}	O
if	O
(	O
notused3	pointer
)	O
{	O
}	O
__bam_cdel_args	struct
*	O
argp	pointer
;	O
int	O
ret	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___bam_cdel_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]bam_cdel: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tpgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pgno	int
)	O
;	O
printf	function
(	O
"\tlsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tindx: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
indx	short
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_cdel_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__bam_cdel_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__bam_cdel_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__bam_cdel_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
lsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
indx	short
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
indx	short
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
indx	short
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_repl_log	function
(	O
dbenv	pointer
,	O
txnid	int
,	O
ret_lsnp	pointer
,	O
flags	int
,	O
fileid	array
,	O
pgno	int
,	O
lsn	struct
,	O
indx	short
,	O
isdeleted	int
,	O
orig	struct
,	O
repl	struct
,	O
prefix	int
,	O
suffix	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_TXN	struct
*	O
txnid	int
;	O
DB_LSN	struct
*	O
ret_lsnp	pointer
;	O
u_int32_t	int
flags	int
;	O
int32_t	int
fileid	array
;	O
db_pgno_t	int
pgno	int
;	O
DB_LSN	struct
*	O
lsn	struct
;	O
u_int32_t	int
indx	short
;	O
u_int32_t	int
isdeleted	int
;	O
const	O
DBT	struct
*	O
orig	struct
;	O
const	O
DBT	struct
*	O
repl	struct
;	O
u_int32_t	int
prefix	int
;	O
u_int32_t	int
suffix	int
;	O
{	O
DBT	struct
logrec	struct
;	O
DB_LSN	struct
*	O
lsnp	pointer
,	O
null_lsn	struct
;	O
u_int32_t	int
zero	int
;	O
u_int32_t	int
rectype	int
,	O
txn_num	int
;	O
int	O
ret	int
;	O
u_int8_t	char
*	O
bp	pointer
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
&&	O
TAILQ_FIRST	O
(	O
&	O
txnid	int
->	O
kids	struct
)	O
!=	O
NULL	O
&&	O
CDB___txn_activekids	function
(	O
txnid	int
)	O
!=	O
0	int
)	O
return	O
(	O
CDB___db_child_active_err	function
(	O
dbenv	pointer
)	O
)	O
;	O
rectype	int
=	O
DB_bam_repl	int
;	O
txn_num	int
=	O
txnid	int
==	O
NULL	O
?	O
0	int
:	O
txnid	int
->	O
txnid	int
;	O
if	O
(	O
txnid	int
==	O
NULL	O
)	O
{	O
ZERO_LSN	O
(	O
null_lsn	struct
)	O
;	O
lsnp	pointer
=	O
&	O
null_lsn	struct
;	O
}	O
else	O
lsnp	pointer
=	O
&	O
txnid	int
->	O
last_lsn	struct
;	O
logrec	struct
.	O
size	int
=	O
sizeof	O
(	O
rectype	int
)	O
+	O
sizeof	O
(	O
txn_num	int
)	O
+	O
sizeof	O
(	O
DB_LSN	struct
)	O
+	O
sizeof	O
(	O
fileid	array
)	O
+	O
sizeof	O
(	O
pgno	int
)	O
+	O
sizeof	O
(	O
*	O
lsn	struct
)	O
+	O
sizeof	O
(	O
indx	short
)	O
+	O
sizeof	O
(	O
isdeleted	int
)	O
+	O
sizeof	O
(	O
u_int32_t	int
)	O
+	O
(	O
orig	struct
==	O
NULL	O
?	O
0	int
:	O
orig	struct
->	O
size	int
)	O
+	O
sizeof	O
(	O
u_int32_t	int
)	O
+	O
(	O
repl	struct
==	O
NULL	O
?	O
0	int
:	O
repl	struct
->	O
size	int
)	O
+	O
sizeof	O
(	O
prefix	int
)	O
+	O
sizeof	O
(	O
suffix	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
logrec	struct
.	O
size	int
,	O
NULL	O
,	O
&	O
logrec	struct
.	O
data	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
bp	pointer
=	O
logrec	struct
.	O
data	pointer
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
rectype	int
,	O
sizeof	O
(	O
rectype	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
rectype	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
txn_num	int
,	O
sizeof	O
(	O
txn_num	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
txn_num	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
lsnp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
fileid	array
,	O
sizeof	O
(	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
fileid	array
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
pgno	int
,	O
sizeof	O
(	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
pgno	int
)	O
;	O
if	O
(	O
lsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
lsn	struct
,	O
sizeof	O
(	O
*	O
lsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
lsn	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
indx	short
,	O
sizeof	O
(	O
indx	short
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
indx	short
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
isdeleted	int
,	O
sizeof	O
(	O
isdeleted	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
isdeleted	int
)	O
;	O
if	O
(	O
orig	struct
==	O
NULL	O
)	O
{	O
zero	int
=	O
0	int
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
zero	int
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
}	O
else	O
{	O
memcpy	function
(	O
bp	pointer
,	O
&	O
orig	struct
->	O
size	int
,	O
sizeof	O
(	O
orig	struct
->	O
size	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
orig	struct
->	O
size	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
orig	struct
->	O
data	pointer
,	O
orig	struct
->	O
size	int
)	O
;	O
bp	pointer
+=	O
orig	struct
->	O
size	int
;	O
}	O
if	O
(	O
repl	struct
==	O
NULL	O
)	O
{	O
zero	int
=	O
0	int
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
zero	int
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
}	O
else	O
{	O
memcpy	function
(	O
bp	pointer
,	O
&	O
repl	struct
->	O
size	int
,	O
sizeof	O
(	O
repl	struct
->	O
size	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
repl	struct
->	O
size	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
repl	struct
->	O
data	pointer
,	O
repl	struct
->	O
size	int
)	O
;	O
bp	pointer
+=	O
repl	struct
->	O
size	int
;	O
}	O
memcpy	function
(	O
bp	pointer
,	O
&	O
prefix	int
,	O
sizeof	O
(	O
prefix	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
prefix	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
suffix	int
,	O
sizeof	O
(	O
suffix	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
suffix	int
)	O
;	O
DB_ASSERT	O
(	O
(	O
u_int32_t	int
)	O
(	O
bp	pointer
-	O
(	O
u_int8_t	char
*	O
)	O
logrec	struct
.	O
data	pointer
)	O
==	O
logrec	struct
.	O
size	int
)	O
;	O
ret	int
=	O
CDB_log_put	function
(	O
dbenv	pointer
,	O
ret_lsnp	pointer
,	O
(	O
DBT	struct
*	O
)	O
&	O
logrec	struct
,	O
flags	int
)	O
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
)	O
txnid	int
->	O
last_lsn	struct
=	O
*	O
ret_lsnp	pointer
;	O
CDB___os_free	function
(	O
logrec	struct
.	O
data	pointer
,	O
logrec	struct
.	O
size	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___bam_repl_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
)	O
{	O
}	O
if	O
(	O
notused3	pointer
)	O
{	O
}	O
__bam_repl_args	struct
*	O
argp	pointer
;	O
u_int32_t	int
i	int
;	O
u_int	int
ch	int
;	O
int	O
ret	int
;	O
i	int
=	O
0	int
;	O
ch	int
=	O
0	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___bam_repl_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]bam_repl: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tpgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pgno	int
)	O
;	O
printf	function
(	O
"\tlsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tindx: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
indx	short
)	O
;	O
printf	function
(	O
"\tisdeleted: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
isdeleted	int
)	O
;	O
printf	function
(	O
"\torig: "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argp	pointer
->	O
orig	struct
.	O
size	int
;	O
i	int
++	O
)	O
{	O
ch	int
=	O
(	O
(	O
u_int8_t	char
*	O
)	O
argp	pointer
->	O
orig	struct
.	O
data	pointer
)	O
[	O
i	int
]	O
;	O
if	O
(	O
isprint	function
(	O
ch	int
)	O
||	O
ch	int
==	O
0xa	int
)	O
putchar	function
(	O
ch	int
)	O
;	O
else	O
printf	function
(	O
"%#x "	pointer
,	O
ch	int
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"\trepl: "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argp	pointer
->	O
repl	struct
.	O
size	int
;	O
i	int
++	O
)	O
{	O
ch	int
=	O
(	O
(	O
u_int8_t	char
*	O
)	O
argp	pointer
->	O
repl	struct
.	O
data	pointer
)	O
[	O
i	int
]	O
;	O
if	O
(	O
isprint	function
(	O
ch	int
)	O
||	O
ch	int
==	O
0xa	int
)	O
putchar	function
(	O
ch	int
)	O
;	O
else	O
printf	function
(	O
"%#x "	pointer
,	O
ch	int
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"\tprefix: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prefix	int
)	O
;	O
printf	function
(	O
"\tsuffix: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
suffix	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_repl_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__bam_repl_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__bam_repl_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__bam_repl_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
lsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
indx	short
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
indx	short
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
indx	short
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
isdeleted	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
isdeleted	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
isdeleted	int
)	O
;	O
memset	function
(	O
&	O
argp	pointer
->	O
orig	struct
,	O
0	int
,	O
sizeof	O
(	O
argp	pointer
->	O
orig	struct
)	O
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
orig	struct
.	O
size	int
,	O
bp	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
argp	pointer
->	O
orig	struct
.	O
data	pointer
=	O
bp	pointer
;	O
bp	pointer
+=	O
argp	pointer
->	O
orig	struct
.	O
size	int
;	O
memset	function
(	O
&	O
argp	pointer
->	O
repl	struct
,	O
0	int
,	O
sizeof	O
(	O
argp	pointer
->	O
repl	struct
)	O
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
repl	struct
.	O
size	int
,	O
bp	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
argp	pointer
->	O
repl	struct
.	O
data	pointer
=	O
bp	pointer
;	O
bp	pointer
+=	O
argp	pointer
->	O
repl	struct
.	O
size	int
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prefix	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
prefix	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
prefix	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
suffix	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
suffix	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
suffix	int
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_root_log	function
(	O
dbenv	pointer
,	O
txnid	int
,	O
ret_lsnp	pointer
,	O
flags	int
,	O
fileid	array
,	O
meta_pgno	int
,	O
root_pgno	int
,	O
meta_lsn	struct
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_TXN	struct
*	O
txnid	int
;	O
DB_LSN	struct
*	O
ret_lsnp	pointer
;	O
u_int32_t	int
flags	int
;	O
int32_t	int
fileid	array
;	O
db_pgno_t	int
meta_pgno	int
;	O
db_pgno_t	int
root_pgno	int
;	O
DB_LSN	struct
*	O
meta_lsn	struct
;	O
{	O
DBT	struct
logrec	struct
;	O
DB_LSN	struct
*	O
lsnp	pointer
,	O
null_lsn	struct
;	O
u_int32_t	int
rectype	int
,	O
txn_num	int
;	O
int	O
ret	int
;	O
u_int8_t	char
*	O
bp	pointer
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
&&	O
TAILQ_FIRST	O
(	O
&	O
txnid	int
->	O
kids	struct
)	O
!=	O
NULL	O
&&	O
CDB___txn_activekids	function
(	O
txnid	int
)	O
!=	O
0	int
)	O
return	O
(	O
CDB___db_child_active_err	function
(	O
dbenv	pointer
)	O
)	O
;	O
rectype	int
=	O
DB_bam_root	int
;	O
txn_num	int
=	O
txnid	int
==	O
NULL	O
?	O
0	int
:	O
txnid	int
->	O
txnid	int
;	O
if	O
(	O
txnid	int
==	O
NULL	O
)	O
{	O
ZERO_LSN	O
(	O
null_lsn	struct
)	O
;	O
lsnp	pointer
=	O
&	O
null_lsn	struct
;	O
}	O
else	O
lsnp	pointer
=	O
&	O
txnid	int
->	O
last_lsn	struct
;	O
logrec	struct
.	O
size	int
=	O
sizeof	O
(	O
rectype	int
)	O
+	O
sizeof	O
(	O
txn_num	int
)	O
+	O
sizeof	O
(	O
DB_LSN	struct
)	O
+	O
sizeof	O
(	O
fileid	array
)	O
+	O
sizeof	O
(	O
meta_pgno	int
)	O
+	O
sizeof	O
(	O
root_pgno	int
)	O
+	O
sizeof	O
(	O
*	O
meta_lsn	struct
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
logrec	struct
.	O
size	int
,	O
NULL	O
,	O
&	O
logrec	struct
.	O
data	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
bp	pointer
=	O
logrec	struct
.	O
data	pointer
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
rectype	int
,	O
sizeof	O
(	O
rectype	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
rectype	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
txn_num	int
,	O
sizeof	O
(	O
txn_num	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
txn_num	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
lsnp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
fileid	array
,	O
sizeof	O
(	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
fileid	array
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
meta_pgno	int
,	O
sizeof	O
(	O
meta_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
meta_pgno	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
root_pgno	int
,	O
sizeof	O
(	O
root_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
root_pgno	int
)	O
;	O
if	O
(	O
meta_lsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
meta_lsn	struct
,	O
sizeof	O
(	O
*	O
meta_lsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
meta_lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
meta_lsn	struct
)	O
;	O
DB_ASSERT	O
(	O
(	O
u_int32_t	int
)	O
(	O
bp	pointer
-	O
(	O
u_int8_t	char
*	O
)	O
logrec	struct
.	O
data	pointer
)	O
==	O
logrec	struct
.	O
size	int
)	O
;	O
ret	int
=	O
CDB_log_put	function
(	O
dbenv	pointer
,	O
ret_lsnp	pointer
,	O
(	O
DBT	struct
*	O
)	O
&	O
logrec	struct
,	O
flags	int
)	O
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
)	O
txnid	int
->	O
last_lsn	struct
=	O
*	O
ret_lsnp	pointer
;	O
CDB___os_free	function
(	O
logrec	struct
.	O
data	pointer
,	O
logrec	struct
.	O
size	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___bam_root_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
)	O
{	O
}	O
if	O
(	O
notused3	pointer
)	O
{	O
}	O
__bam_root_args	struct
*	O
argp	pointer
;	O
int	O
ret	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___bam_root_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]bam_root: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tmeta_pgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
meta_pgno	int
)	O
;	O
printf	function
(	O
"\troot_pgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
root_pgno	int
)	O
;	O
printf	function
(	O
"\tmeta_lsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
meta_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
meta_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_root_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__bam_root_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__bam_root_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__bam_root_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
meta_pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
meta_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
meta_pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
root_pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
root_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
root_pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
meta_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
meta_lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
meta_lsn	struct
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_init_print	function
(	O
dbenv	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
{	O
int	O
ret	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___bam_pg_alloc1_print	function
,	O
DB_bam_pg_alloc1	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___bam_pg_alloc_print	function
,	O
DB_bam_pg_alloc	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___bam_pg_free1_print	function
,	O
DB_bam_pg_free1	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___bam_pg_free_print	function
,	O
DB_bam_pg_free	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___bam_split1_print	function
,	O
DB_bam_split1	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___bam_split_print	function
,	O
DB_bam_split	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___bam_rsplit1_print	function
,	O
DB_bam_rsplit1	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___bam_rsplit_print	function
,	O
DB_bam_rsplit	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___bam_adj_print	function
,	O
DB_bam_adj	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___bam_cadjust_print	function
,	O
DB_bam_cadjust	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___bam_cdel_print	function
,	O
DB_bam_cdel	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___bam_repl_print	function
,	O
DB_bam_repl	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___bam_root_print	function
,	O
DB_bam_root	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_init_recover	function
(	O
dbenv	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
{	O
int	O
ret	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___deprecated_recover	function
,	O
DB_bam_pg_alloc1	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___bam_pg_alloc_recover	function
,	O
DB_bam_pg_alloc	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___deprecated_recover	function
,	O
DB_bam_pg_free1	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___bam_pg_free_recover	function
,	O
DB_bam_pg_free	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___deprecated_recover	function
,	O
DB_bam_split1	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___bam_split_recover	function
,	O
DB_bam_split	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___deprecated_recover	function
,	O
DB_bam_rsplit1	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___bam_rsplit_recover	function
,	O
DB_bam_rsplit	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___bam_adj_recover	function
,	O
DB_bam_adj	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___bam_cadjust_recover	function
,	O
DB_bam_cadjust	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___bam_cdel_recover	function
,	O
DB_bam_cdel	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___bam_repl_recover	function
,	O
DB_bam_repl	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___bam_root_recover	function
,	O
DB_bam_root	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O