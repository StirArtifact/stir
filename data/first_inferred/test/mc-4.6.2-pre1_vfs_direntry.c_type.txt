static	O
volatile	O
int	O
total_inodes	int
=	O
0	int
,	O
total_entries	int
=	O
0	int
;	O
struct	O
vfs_s_inode	struct
*	O
vfs_s_new_inode	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
struct	O
vfs_s_super	struct
*	O
super	pointer
,	O
struct	O
stat	struct
*	O
initstat	pointer
)	O
{	O
struct	O
vfs_s_inode	struct
*	O
ino	pointer
;	O
ino	pointer
=	O
g_new0	O
(	O
struct	O
vfs_s_inode	struct
,	O
1	int
)	O
;	O
if	O
(	O
!	O
ino	pointer
)	O
return	O
NULL	O
;	O
if	O
(	O
initstat	pointer
)	O
ino	pointer
->	O
st	pointer
=	O
*	O
initstat	pointer
;	O
ino	pointer
->	O
super	pointer
=	O
super	pointer
;	O
ino	pointer
->	O
st	pointer
.	O
st_nlink	long
=	O
0	int
;	O
ino	pointer
->	O
st	pointer
.	O
st_ino	long
=	O
MEDATA	O
->	O
inode_counter	int
++	O
;	O
ino	pointer
->	O
st	pointer
.	O
st_dev	long
=	O
MEDATA	O
->	O
rdev	long
;	O
super	pointer
->	O
ino_usage	int
++	O
;	O
total_inodes	int
++	O
;	O
CALL	O
(	O
init_inode	pointer
)	O
(	O
me	pointer
,	O
ino	pointer
)	O
;	O
return	O
ino	pointer
;	O
}	O
struct	O
vfs_s_entry	struct
*	O
vfs_s_new_entry	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
struct	O
vfs_s_inode	struct
*	O
inode	pointer
)	O
{	O
struct	O
vfs_s_entry	struct
*	O
entry	pointer
;	O
entry	pointer
=	O
g_new0	O
(	O
struct	O
vfs_s_entry	struct
,	O
1	int
)	O
;	O
total_entries	int
++	O
;	O
if	O
(	O
name	pointer
)	O
entry	pointer
->	O
name	pointer
=	O
g_strdup	function
(	O
name	pointer
)	O
;	O
entry	pointer
->	O
ino	pointer
=	O
inode	pointer
;	O
entry	pointer
->	O
ino	pointer
->	O
ent	pointer
=	O
entry	pointer
;	O
CALL	O
(	O
init_entry	pointer
)	O
(	O
me	pointer
,	O
entry	pointer
)	O
;	O
return	O
entry	pointer
;	O
}	O
static	O
void	O
vfs_s_free_inode	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
struct	O
vfs_s_inode	struct
*	O
ino	pointer
)	O
{	O
if	O
(	O
!	O
ino	pointer
)	O
vfs_die	function
(	O
"Don't pass NULL to me"	pointer
)	O
;	O
if	O
(	O
ino	pointer
->	O
st	pointer
.	O
st_nlink	long
<=	O
1	int
)	O
{	O
while	O
(	O
ino	pointer
->	O
subdir	pointer
)	O
{	O
vfs_s_free_entry	function
(	O
me	pointer
,	O
ino	pointer
->	O
subdir	pointer
)	O
;	O
}	O
CALL	O
(	O
free_inode	pointer
)	O
(	O
me	pointer
,	O
ino	pointer
)	O
;	O
g_free	function
(	O
ino	pointer
->	O
linkname	pointer
)	O
;	O
if	O
(	O
ino	pointer
->	O
localname	pointer
)	O
{	O
unlink	function
(	O
ino	pointer
->	O
localname	pointer
)	O
;	O
g_free	function
(	O
ino	pointer
->	O
localname	pointer
)	O
;	O
}	O
total_inodes	int
--	O
;	O
ino	pointer
->	O
super	pointer
->	O
ino_usage	int
--	O
;	O
g_free	function
(	O
ino	pointer
)	O
;	O
}	O
else	O
ino	pointer
->	O
st	pointer
.	O
st_nlink	long
--	O
;	O
}	O
void	O
vfs_s_free_entry	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
struct	O
vfs_s_entry	struct
*	O
ent	pointer
)	O
{	O
if	O
(	O
ent	pointer
->	O
prevp	pointer
)	O
{	O
*	O
ent	pointer
->	O
prevp	pointer
=	O
ent	pointer
->	O
next	pointer
;	O
if	O
(	O
ent	pointer
->	O
next	pointer
)	O
ent	pointer
->	O
next	pointer
->	O
prevp	pointer
=	O
ent	pointer
->	O
prevp	pointer
;	O
}	O
g_free	function
(	O
ent	pointer
->	O
name	pointer
)	O
;	O
ent	pointer
->	O
name	pointer
=	O
NULL	O
;	O
if	O
(	O
ent	pointer
->	O
ino	pointer
)	O
{	O
ent	pointer
->	O
ino	pointer
->	O
ent	pointer
=	O
NULL	O
;	O
vfs_s_free_inode	function
(	O
me	pointer
,	O
ent	pointer
->	O
ino	pointer
)	O
;	O
ent	pointer
->	O
ino	pointer
=	O
NULL	O
;	O
}	O
total_entries	int
--	O
;	O
g_free	function
(	O
ent	pointer
)	O
;	O
}	O
void	O
vfs_s_insert_entry	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
struct	O
vfs_s_inode	struct
*	O
dir	pointer
,	O
struct	O
vfs_s_entry	struct
*	O
ent	pointer
)	O
{	O
struct	O
vfs_s_entry	struct
*	O
*	O
ep	pointer
;	O
(	O
void	O
)	O
me	pointer
;	O
for	O
(	O
ep	pointer
=	O
&	O
dir	pointer
->	O
subdir	pointer
;	O
*	O
ep	pointer
!=	O
NULL	O
;	O
ep	pointer
=	O
&	O
(	O
(	O
*	O
ep	pointer
)	O
->	O
next	pointer
)	O
)	O
;	O
ent	pointer
->	O
prevp	pointer
=	O
ep	pointer
;	O
ent	pointer
->	O
next	pointer
=	O
NULL	O
;	O
ent	pointer
->	O
dir	pointer
=	O
dir	pointer
;	O
*	O
ep	pointer
=	O
ent	pointer
;	O
ent	pointer
->	O
ino	pointer
->	O
st	pointer
.	O
st_nlink	long
++	O
;	O
}	O
struct	O
stat	struct
*	O
vfs_s_default_stat	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
mode_t	int
mode	int
)	O
{	O
static	O
struct	O
stat	struct
st	pointer
;	O
int	O
myumask	int
;	O
(	O
void	O
)	O
me	pointer
;	O
myumask	int
=	O
umask	function
(	O
022	int
)	O
;	O
umask	function
(	O
myumask	int
)	O
;	O
mode	int
&=	O
~	O
myumask	int
;	O
st	pointer
.	O
st_mode	int
=	O
mode	int
;	O
st	pointer
.	O
st_ino	long
=	O
0	int
;	O
st	pointer
.	O
st_dev	long
=	O
0	int
;	O
st	pointer
.	O
st_rdev	long
=	O
0	int
;	O
st	pointer
.	O
st_uid	int
=	O
getuid	function
(	O
)	O
;	O
st	pointer
.	O
st_gid	int
=	O
getgid	function
(	O
)	O
;	O
st	pointer
.	O
st_size	long
=	O
0	int
;	O
st	pointer
.	O
st_mtime	O
=	O
st	pointer
.	O
st_atime	O
=	O
st	pointer
.	O
st_ctime	O
=	O
time	long
(	O
NULL	O
)	O
;	O
return	O
&	O
st	pointer
;	O
}	O
struct	O
vfs_s_entry	struct
*	O
vfs_s_generate_entry	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
struct	O
vfs_s_inode	struct
*	O
parent	pointer
,	O
mode_t	int
mode	int
)	O
{	O
struct	O
vfs_s_inode	struct
*	O
inode	pointer
;	O
struct	O
stat	struct
*	O
st	pointer
;	O
st	pointer
=	O
vfs_s_default_stat	function
(	O
me	pointer
,	O
mode	int
)	O
;	O
inode	pointer
=	O
vfs_s_new_inode	function
(	O
me	pointer
,	O
parent	pointer
->	O
super	pointer
,	O
st	pointer
)	O
;	O
return	O
vfs_s_new_entry	function
(	O
me	pointer
,	O
name	pointer
,	O
inode	pointer
)	O
;	O
}	O
static	O
struct	O
vfs_s_entry	struct
*	O
vfs_s_automake	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
struct	O
vfs_s_inode	struct
*	O
dir	pointer
,	O
char	O
*	O
path	pointer
,	O
int	O
flags	enum
)	O
{	O
struct	O
vfs_s_entry	struct
*	O
res	pointer
;	O
char	O
*	O
sep	pointer
=	O
strchr	function
(	O
path	pointer
,	O
PATH_SEP	char
)	O
;	O
if	O
(	O
sep	pointer
)	O
*	O
sep	pointer
=	O
0	int
;	O
res	pointer
=	O
vfs_s_generate_entry	function
(	O
me	pointer
,	O
path	pointer
,	O
dir	pointer
,	O
flags	enum
&	O
FL_MKDIR	int
?	O
(	O
0777	int
|	O
S_IFDIR	O
)	O
:	O
0777	int
)	O
;	O
vfs_s_insert_entry	function
(	O
me	pointer
,	O
dir	pointer
,	O
res	pointer
)	O
;	O
if	O
(	O
sep	pointer
)	O
*	O
sep	pointer
=	O
PATH_SEP	char
;	O
return	O
res	pointer
;	O
}	O
static	O
struct	O
vfs_s_entry	struct
*	O
vfs_s_resolve_symlink	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
struct	O
vfs_s_entry	struct
*	O
entry	pointer
,	O
int	O
follow	int
)	O
{	O
char	O
*	O
linkname	pointer
;	O
char	O
*	O
fullname	pointer
=	O
NULL	O
;	O
struct	O
vfs_s_entry	struct
*	O
target	pointer
;	O
if	O
(	O
follow	int
==	O
LINK_NO_FOLLOW	O
)	O
return	O
entry	pointer
;	O
if	O
(	O
follow	int
==	O
0	int
)	O
ERRNOR	O
(	O
ELOOP	int
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
entry	pointer
)	O
ERRNOR	O
(	O
ENOENT	int
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
S_ISLNK	O
(	O
entry	pointer
->	O
ino	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
)	O
return	O
entry	pointer
;	O
linkname	pointer
=	O
entry	pointer
->	O
ino	pointer
->	O
linkname	pointer
;	O
if	O
(	O
linkname	pointer
==	O
NULL	O
)	O
ERRNOR	O
(	O
EFAULT	int
,	O
NULL	O
)	O
;	O
if	O
(	O
*	O
linkname	pointer
!=	O
PATH_SEP	char
)	O
{	O
char	O
*	O
fullpath	pointer
=	O
vfs_s_fullpath	function
(	O
me	pointer
,	O
entry	pointer
->	O
dir	pointer
)	O
;	O
if	O
(	O
fullpath	pointer
)	O
{	O
fullname	pointer
=	O
g_strconcat	function
(	O
fullpath	pointer
,	O
"/"	pointer
,	O
linkname	pointer
,	O
NULL	O
)	O
;	O
linkname	pointer
=	O
fullname	pointer
;	O
g_free	function
(	O
fullpath	pointer
)	O
;	O
}	O
}	O
target	pointer
=	O
(	O
MEDATA	O
->	O
find_entry	pointer
)	O
(	O
me	pointer
,	O
entry	pointer
->	O
dir	pointer
->	O
super	pointer
->	O
root	pointer
,	O
linkname	pointer
,	O
follow	int
-	O
1	int
,	O
0	int
)	O
;	O
g_free	function
(	O
fullname	pointer
)	O
;	O
return	O
target	pointer
;	O
}	O
static	O
struct	O
vfs_s_entry	struct
*	O
vfs_s_find_entry_tree	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
struct	O
vfs_s_inode	struct
*	O
root	pointer
,	O
const	O
char	O
*	O
a_path	pointer
,	O
int	O
follow	int
,	O
int	O
flags	enum
)	O
{	O
size_t	long
pseg	long
;	O
struct	O
vfs_s_entry	struct
*	O
ent	pointer
=	O
NULL	O
;	O
char	O
*	O
const	O
pathref	pointer
=	O
g_strdup	function
(	O
a_path	pointer
)	O
;	O
char	O
*	O
path	pointer
=	O
pathref	pointer
;	O
canonicalize_pathname	function
(	O
path	pointer
)	O
;	O
while	O
(	O
root	pointer
)	O
{	O
while	O
(	O
*	O
path	pointer
==	O
PATH_SEP	char
)	O
path	pointer
++	O
;	O
if	O
(	O
!	O
path	pointer
[	O
0	int
]	O
)	O
{	O
g_free	function
(	O
pathref	pointer
)	O
;	O
return	O
ent	pointer
;	O
}	O
for	O
(	O
pseg	long
=	O
0	int
;	O
path	pointer
[	O
pseg	long
]	O
&&	O
path	pointer
[	O
pseg	long
]	O
!=	O
PATH_SEP	char
;	O
pseg	long
++	O
)	O
;	O
for	O
(	O
ent	pointer
=	O
root	pointer
->	O
subdir	pointer
;	O
ent	pointer
!=	O
NULL	O
;	O
ent	pointer
=	O
ent	pointer
->	O
next	pointer
)	O
if	O
(	O
strlen	function
(	O
ent	pointer
->	O
name	pointer
)	O
==	O
pseg	long
&&	O
(	O
!	O
strncmp	function
(	O
ent	pointer
->	O
name	pointer
,	O
path	pointer
,	O
pseg	long
)	O
)	O
)	O
break	O
;	O
if	O
(	O
!	O
ent	pointer
&&	O
(	O
flags	enum
&	O
(	O
FL_MKFILE	int
|	O
FL_MKDIR	int
)	O
)	O
)	O
ent	pointer
=	O
vfs_s_automake	function
(	O
me	pointer
,	O
root	pointer
,	O
path	pointer
,	O
flags	enum
)	O
;	O
if	O
(	O
!	O
ent	pointer
)	O
{	O
me	pointer
->	O
verrno	int
=	O
ENOENT	int
;	O
goto	O
cleanup	O
;	O
}	O
path	pointer
+=	O
pseg	long
;	O
ent	pointer
=	O
vfs_s_resolve_symlink	function
(	O
me	pointer
,	O
ent	pointer
,	O
strchr	function
(	O
path	pointer
,	O
PATH_SEP	char
)	O
?	O
LINK_FOLLOW	int
:	O
follow	int
)	O
;	O
if	O
(	O
!	O
ent	pointer
)	O
goto	O
cleanup	O
;	O
root	pointer
=	O
ent	pointer
->	O
ino	pointer
;	O
}	O
cleanup	O
:	O
g_free	function
(	O
pathref	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
static	O
void	O
split_dir_name	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
char	O
*	O
path	pointer
,	O
char	O
*	O
*	O
dir	pointer
,	O
char	O
*	O
*	O
name	pointer
,	O
char	O
*	O
*	O
save	pointer
)	O
{	O
char	O
*	O
s	pointer
;	O
(	O
void	O
)	O
me	pointer
;	O
s	pointer
=	O
strrchr	function
(	O
path	pointer
,	O
PATH_SEP	char
)	O
;	O
if	O
(	O
s	pointer
==	O
NULL	O
)	O
{	O
*	O
save	pointer
=	O
NULL	O
;	O
*	O
name	pointer
=	O
path	pointer
;	O
*	O
dir	pointer
=	O
path	pointer
+	O
strlen	function
(	O
path	pointer
)	O
;	O
}	O
else	O
{	O
*	O
save	pointer
=	O
s	pointer
;	O
*	O
dir	pointer
=	O
path	pointer
;	O
*	O
s	pointer
++	O
=	O
'\0'	O
;	O
*	O
name	pointer
=	O
s	pointer
;	O
}	O
}	O
static	O
struct	O
vfs_s_entry	struct
*	O
vfs_s_find_entry_linear	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
struct	O
vfs_s_inode	struct
*	O
root	pointer
,	O
const	O
char	O
*	O
a_path	pointer
,	O
int	O
follow	int
,	O
int	O
flags	enum
)	O
{	O
struct	O
vfs_s_entry	struct
*	O
ent	pointer
=	O
NULL	O
;	O
char	O
*	O
const	O
path	pointer
=	O
g_strdup	function
(	O
a_path	pointer
)	O
;	O
struct	O
vfs_s_entry	struct
*	O
retval	pointer
=	O
NULL	O
;	O
if	O
(	O
root	pointer
->	O
super	pointer
->	O
root	pointer
!=	O
root	pointer
)	O
vfs_die	function
(	O
"We have to use _real_ root. Always. Sorry."	pointer
)	O
;	O
canonicalize_pathname	function
(	O
path	pointer
)	O
;	O
if	O
(	O
!	O
(	O
flags	enum
&	O
FL_DIR	int
)	O
)	O
{	O
char	O
*	O
dirname	pointer
,	O
*	O
name	pointer
,	O
*	O
save	pointer
;	O
struct	O
vfs_s_inode	struct
*	O
ino	pointer
;	O
split_dir_name	function
(	O
me	pointer
,	O
path	pointer
,	O
&	O
dirname	pointer
,	O
&	O
name	pointer
,	O
&	O
save	pointer
)	O
;	O
ino	pointer
=	O
vfs_s_find_inode	function
(	O
me	pointer
,	O
root	pointer
->	O
super	pointer
,	O
dirname	pointer
,	O
follow	int
,	O
flags	enum
|	O
FL_DIR	int
)	O
;	O
if	O
(	O
save	pointer
)	O
*	O
save	pointer
=	O
PATH_SEP	char
;	O
retval	pointer
=	O
vfs_s_find_entry_tree	function
(	O
me	pointer
,	O
ino	pointer
,	O
name	pointer
,	O
follow	int
,	O
flags	enum
)	O
;	O
g_free	function
(	O
path	pointer
)	O
;	O
return	O
retval	pointer
;	O
}	O
for	O
(	O
ent	pointer
=	O
root	pointer
->	O
subdir	pointer
;	O
ent	pointer
!=	O
NULL	O
;	O
ent	pointer
=	O
ent	pointer
->	O
next	pointer
)	O
if	O
(	O
!	O
strcmp	function
(	O
ent	pointer
->	O
name	pointer
,	O
path	pointer
)	O
)	O
break	O
;	O
if	O
(	O
ent	pointer
&&	O
(	O
!	O
(	O
MEDATA	O
->	O
dir_uptodate	pointer
)	O
(	O
me	pointer
,	O
ent	pointer
->	O
ino	pointer
)	O
)	O
)	O
{	O
print_vfs_message	function
(	O
_	O
(	O
"Directory cache expired for %s"	pointer
)	O
,	O
path	pointer
)	O
;	O
vfs_s_free_entry	function
(	O
me	pointer
,	O
ent	pointer
)	O
;	O
ent	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
!	O
ent	pointer
)	O
{	O
struct	O
vfs_s_inode	struct
*	O
ino	pointer
;	O
ino	pointer
=	O
vfs_s_new_inode	function
(	O
me	pointer
,	O
root	pointer
->	O
super	pointer
,	O
vfs_s_default_stat	function
(	O
me	pointer
,	O
S_IFDIR	O
|	O
0755	int
)	O
)	O
;	O
ent	pointer
=	O
vfs_s_new_entry	function
(	O
me	pointer
,	O
path	pointer
,	O
ino	pointer
)	O
;	O
if	O
(	O
(	O
MEDATA	O
->	O
dir_load	pointer
)	O
(	O
me	pointer
,	O
ino	pointer
,	O
path	pointer
)	O
==	O
-	O
1	int
)	O
{	O
vfs_s_free_entry	function
(	O
me	pointer
,	O
ent	pointer
)	O
;	O
g_free	function
(	O
path	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
vfs_s_insert_entry	function
(	O
me	pointer
,	O
root	pointer
,	O
ent	pointer
)	O
;	O
for	O
(	O
ent	pointer
=	O
root	pointer
->	O
subdir	pointer
;	O
ent	pointer
!=	O
NULL	O
;	O
ent	pointer
=	O
ent	pointer
->	O
next	pointer
)	O
if	O
(	O
!	O
strcmp	function
(	O
ent	pointer
->	O
name	pointer
,	O
path	pointer
)	O
)	O
break	O
;	O
}	O
if	O
(	O
!	O
ent	pointer
)	O
vfs_die	function
(	O
"find_linear: success but directory is not there\n"	pointer
)	O
;	O
g_free	function
(	O
path	pointer
)	O
;	O
return	O
ent	pointer
;	O
}	O
struct	O
vfs_s_inode	struct
*	O
vfs_s_find_inode	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
struct	O
vfs_s_super	struct
*	O
super	pointer
,	O
const	O
char	O
*	O
path	pointer
,	O
int	O
follow	int
,	O
int	O
flags	enum
)	O
{	O
struct	O
vfs_s_entry	struct
*	O
ent	pointer
;	O
if	O
(	O
!	O
(	O
MEDATA	O
->	O
flags	enum
&	O
VFS_S_REMOTE	int
)	O
&&	O
(	O
!	O
*	O
path	pointer
)	O
)	O
return	O
super	pointer
->	O
root	pointer
;	O
ent	pointer
=	O
(	O
MEDATA	O
->	O
find_entry	pointer
)	O
(	O
me	pointer
,	O
super	pointer
->	O
root	pointer
,	O
path	pointer
,	O
follow	int
,	O
flags	enum
)	O
;	O
if	O
(	O
!	O
ent	pointer
)	O
return	O
NULL	O
;	O
return	O
ent	pointer
->	O
ino	pointer
;	O
}	O
static	O
struct	O
vfs_s_super	struct
*	O
vfs_s_new_super	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
)	O
{	O
struct	O
vfs_s_super	struct
*	O
super	pointer
;	O
super	pointer
=	O
g_new0	O
(	O
struct	O
vfs_s_super	struct
,	O
1	int
)	O
;	O
super	pointer
->	O
me	pointer
=	O
me	pointer
;	O
return	O
super	pointer
;	O
}	O
static	O
void	O
vfs_s_insert_super	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
struct	O
vfs_s_super	struct
*	O
super	pointer
)	O
{	O
super	pointer
->	O
next	pointer
=	O
MEDATA	O
->	O
supers	pointer
;	O
super	pointer
->	O
prevp	pointer
=	O
&	O
MEDATA	O
->	O
supers	pointer
;	O
if	O
(	O
MEDATA	O
->	O
supers	pointer
!=	O
NULL	O
)	O
MEDATA	O
->	O
supers	pointer
->	O
prevp	pointer
=	O
&	O
super	pointer
->	O
next	pointer
;	O
MEDATA	O
->	O
supers	pointer
=	O
super	pointer
;	O
}	O
static	O
void	O
vfs_s_free_super	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
struct	O
vfs_s_super	struct
*	O
super	pointer
)	O
{	O
if	O
(	O
super	pointer
->	O
root	pointer
)	O
{	O
vfs_s_free_inode	function
(	O
me	pointer
,	O
super	pointer
->	O
root	pointer
)	O
;	O
super	pointer
->	O
root	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
super	pointer
->	O
prevp	pointer
)	O
{	O
*	O
super	pointer
->	O
prevp	pointer
=	O
super	pointer
->	O
next	pointer
;	O
if	O
(	O
super	pointer
->	O
next	pointer
)	O
super	pointer
->	O
next	pointer
->	O
prevp	pointer
=	O
super	pointer
->	O
prevp	pointer
;	O
}	O
CALL	O
(	O
free_archive	pointer
)	O
(	O
me	pointer
,	O
super	pointer
)	O
;	O
g_free	function
(	O
super	pointer
->	O
name	pointer
)	O
;	O
super	pointer
->	O
name	pointer
=	O
NULL	O
;	O
g_free	function
(	O
super	pointer
)	O
;	O
}	O
const	O
char	O
*	O
vfs_s_get_path_mangle	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
char	O
*	O
inname	pointer
,	O
struct	O
vfs_s_super	struct
*	O
*	O
archive	pointer
,	O
int	O
flags	enum
)	O
{	O
const	O
char	O
*	O
retval	pointer
;	O
char	O
*	O
local	pointer
,	O
*	O
op	pointer
;	O
const	O
char	O
*	O
archive_name	pointer
;	O
int	O
result	long
=	O
-	O
1	int
;	O
struct	O
vfs_s_super	struct
*	O
super	pointer
;	O
void	O
*	O
cookie	pointer
=	O
NULL	O
;	O
archive_name	pointer
=	O
inname	pointer
;	O
vfs_split	function
(	O
inname	pointer
,	O
&	O
local	pointer
,	O
&	O
op	pointer
)	O
;	O
retval	pointer
=	O
(	O
local	pointer
)	O
?	O
local	pointer
:	O
""	pointer
;	O
if	O
(	O
MEDATA	O
->	O
archive_check	pointer
)	O
if	O
(	O
!	O
(	O
cookie	pointer
=	O
MEDATA	O
->	O
archive_check	pointer
(	O
me	pointer
,	O
archive_name	pointer
,	O
op	pointer
)	O
)	O
)	O
return	O
NULL	O
;	O
for	O
(	O
super	pointer
=	O
MEDATA	O
->	O
supers	pointer
;	O
super	pointer
!=	O
NULL	O
;	O
super	pointer
=	O
super	pointer
->	O
next	pointer
)	O
{	O
int	O
i	array
;	O
if	O
(	O
(	O
i	array
=	O
MEDATA	O
->	O
archive_same	pointer
(	O
me	pointer
,	O
super	pointer
,	O
archive_name	pointer
,	O
op	pointer
,	O
cookie	pointer
)	O
)	O
)	O
{	O
if	O
(	O
i	array
==	O
1	int
)	O
goto	O
return_success	O
;	O
else	O
break	O
;	O
}	O
}	O
if	O
(	O
flags	enum
&	O
FL_NO_OPEN	int
)	O
ERRNOR	O
(	O
EIO	int
,	O
NULL	O
)	O
;	O
super	pointer
=	O
vfs_s_new_super	function
(	O
me	pointer
)	O
;	O
result	long
=	O
MEDATA	O
->	O
open_archive	pointer
(	O
me	pointer
,	O
super	pointer
,	O
archive_name	pointer
,	O
op	pointer
)	O
;	O
if	O
(	O
result	long
==	O
-	O
1	int
)	O
{	O
vfs_s_free_super	function
(	O
me	pointer
,	O
super	pointer
)	O
;	O
ERRNOR	O
(	O
EIO	int
,	O
NULL	O
)	O
;	O
}	O
if	O
(	O
!	O
super	pointer
->	O
name	pointer
)	O
vfs_die	function
(	O
"You have to fill name\n"	pointer
)	O
;	O
if	O
(	O
!	O
super	pointer
->	O
root	pointer
)	O
vfs_die	function
(	O
"You have to fill root inode\n"	pointer
)	O
;	O
vfs_s_insert_super	function
(	O
me	pointer
,	O
super	pointer
)	O
;	O
vfs_stamp_create	function
(	O
me	pointer
,	O
super	pointer
)	O
;	O
return_success	O
:	O
*	O
archive	pointer
=	O
super	pointer
;	O
return	O
retval	pointer
;	O
}	O
static	O
char	O
*	O
vfs_s_get_path	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
inname	pointer
,	O
struct	O
vfs_s_super	struct
*	O
*	O
archive	pointer
,	O
int	O
flags	enum
)	O
{	O
char	O
*	O
buf	pointer
,	O
*	O
retval	pointer
;	O
buf	pointer
=	O
g_strdup	function
(	O
inname	pointer
)	O
;	O
retval	pointer
=	O
g_strdup	function
(	O
vfs_s_get_path_mangle	function
(	O
me	pointer
,	O
buf	pointer
,	O
archive	pointer
,	O
flags	enum
)	O
)	O
;	O
g_free	function
(	O
buf	pointer
)	O
;	O
return	O
retval	pointer
;	O
}	O
void	O
vfs_s_invalidate	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
struct	O
vfs_s_super	struct
*	O
super	pointer
)	O
{	O
if	O
(	O
!	O
super	pointer
->	O
want_stale	int
)	O
{	O
vfs_s_free_inode	function
(	O
me	pointer
,	O
super	pointer
->	O
root	pointer
)	O
;	O
super	pointer
->	O
root	pointer
=	O
vfs_s_new_inode	function
(	O
me	pointer
,	O
super	pointer
,	O
vfs_s_default_stat	function
(	O
me	pointer
,	O
S_IFDIR	O
|	O
0755	int
)	O
)	O
;	O
}	O
}	O
char	O
*	O
vfs_s_fullpath	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
struct	O
vfs_s_inode	struct
*	O
ino	pointer
)	O
{	O
if	O
(	O
!	O
ino	pointer
->	O
ent	pointer
)	O
ERRNOR	O
(	O
EAGAIN	int
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
(	O
MEDATA	O
->	O
flags	enum
&	O
VFS_S_REMOTE	int
)	O
)	O
{	O
char	O
*	O
newpath	pointer
;	O
char	O
*	O
path	pointer
=	O
g_strdup	function
(	O
ino	pointer
->	O
ent	pointer
->	O
name	pointer
)	O
;	O
while	O
(	O
1	int
)	O
{	O
ino	pointer
=	O
ino	pointer
->	O
ent	pointer
->	O
dir	pointer
;	O
if	O
(	O
ino	pointer
==	O
ino	pointer
->	O
super	pointer
->	O
root	pointer
)	O
break	O
;	O
newpath	pointer
=	O
g_strconcat	function
(	O
ino	pointer
->	O
ent	pointer
->	O
name	pointer
,	O
"/"	pointer
,	O
path	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
g_free	function
(	O
path	pointer
)	O
;	O
path	pointer
=	O
newpath	pointer
;	O
}	O
return	O
path	pointer
;	O
}	O
if	O
(	O
(	O
!	O
ino	pointer
->	O
ent	pointer
->	O
dir	pointer
)	O
||	O
(	O
!	O
ino	pointer
->	O
ent	pointer
->	O
dir	pointer
->	O
ent	pointer
)	O
)	O
return	O
g_strdup	function
(	O
ino	pointer
->	O
ent	pointer
->	O
name	pointer
)	O
;	O
return	O
g_strconcat	function
(	O
ino	pointer
->	O
ent	pointer
->	O
dir	pointer
->	O
ent	pointer
->	O
name	pointer
,	O
PATH_SEP_STR	pointer
,	O
ino	pointer
->	O
ent	pointer
->	O
name	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
static	O
struct	O
vfs_s_inode	struct
*	O
vfs_s_inode_from_path	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
int	O
flags	enum
)	O
{	O
struct	O
vfs_s_super	struct
*	O
super	pointer
;	O
struct	O
vfs_s_inode	struct
*	O
ino	pointer
;	O
char	O
*	O
q	pointer
;	O
if	O
(	O
!	O
(	O
q	pointer
=	O
vfs_s_get_path	function
(	O
me	pointer
,	O
name	pointer
,	O
&	O
super	pointer
,	O
0	int
)	O
)	O
)	O
return	O
NULL	O
;	O
ino	pointer
=	O
vfs_s_find_inode	function
(	O
me	pointer
,	O
super	pointer
,	O
q	pointer
,	O
flags	enum
&	O
FL_FOLLOW	int
?	O
LINK_FOLLOW	int
:	O
LINK_NO_FOLLOW	O
,	O
flags	enum
&	O
~	O
FL_FOLLOW	int
)	O
;	O
if	O
(	O
(	O
!	O
ino	pointer
)	O
&&	O
(	O
!	O
*	O
q	pointer
)	O
)	O
ino	pointer
=	O
vfs_s_find_inode	function
(	O
me	pointer
,	O
super	pointer
,	O
q	pointer
,	O
flags	enum
&	O
FL_FOLLOW	int
?	O
LINK_FOLLOW	int
:	O
LINK_NO_FOLLOW	O
,	O
FL_DIR	int
|	O
(	O
flags	enum
&	O
~	O
FL_FOLLOW	int
)	O
)	O
;	O
g_free	function
(	O
q	pointer
)	O
;	O
return	O
ino	pointer
;	O
}	O
struct	O
dirhandle	struct
{	O
struct	O
vfs_s_entry	struct
*	O
cur	pointer
;	O
struct	O
vfs_s_inode	struct
*	O
dir	pointer
;	O
}	O
;	O
static	O
void	O
*	O
vfs_s_opendir	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
dirname	pointer
)	O
{	O
struct	O
vfs_s_inode	struct
*	O
dir	pointer
;	O
struct	O
dirhandle	struct
*	O
info	pointer
;	O
dir	pointer
=	O
vfs_s_inode_from_path	function
(	O
me	pointer
,	O
dirname	pointer
,	O
FL_DIR	int
|	O
FL_FOLLOW	int
)	O
;	O
if	O
(	O
!	O
dir	pointer
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
S_ISDIR	O
(	O
dir	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
)	O
ERRNOR	O
(	O
ENOTDIR	int
,	O
NULL	O
)	O
;	O
dir	pointer
->	O
st	pointer
.	O
st_nlink	long
++	O
;	O
info	pointer
=	O
g_new	O
(	O
struct	O
dirhandle	struct
,	O
1	int
)	O
;	O
info	pointer
->	O
cur	pointer
=	O
dir	pointer
->	O
subdir	pointer
;	O
info	pointer
->	O
dir	pointer
=	O
dir	pointer
;	O
return	O
info	pointer
;	O
}	O
static	O
void	O
*	O
vfs_s_readdir	function
(	O
void	O
*	O
data	pointer
)	O
{	O
static	O
union	O
vfs_dirent	union
dir	pointer
;	O
struct	O
dirhandle	struct
*	O
info	pointer
=	O
(	O
struct	O
dirhandle	struct
*	O
)	O
data	pointer
;	O
if	O
(	O
!	O
(	O
info	pointer
->	O
cur	pointer
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
info	pointer
->	O
cur	pointer
->	O
name	pointer
)	O
{	O
g_strlcpy	function
(	O
dir	pointer
.	O
dent	pointer
.	O
d_name	array
,	O
info	pointer
->	O
cur	pointer
->	O
name	pointer
,	O
MC_MAXPATHLEN	O
)	O
;	O
}	O
else	O
{	O
vfs_die	function
(	O
"Null in structure-cannot happen"	pointer
)	O
;	O
}	O
compute_namelen	function
(	O
&	O
dir	pointer
.	O
dent	pointer
)	O
;	O
info	pointer
->	O
cur	pointer
=	O
info	pointer
->	O
cur	pointer
->	O
next	pointer
;	O
return	O
(	O
void	O
*	O
)	O
&	O
dir	pointer
;	O
}	O
static	O
int	O
vfs_s_closedir	function
(	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
dirhandle	struct
*	O
info	pointer
=	O
(	O
struct	O
dirhandle	struct
*	O
)	O
data	pointer
;	O
struct	O
vfs_s_inode	struct
*	O
dir	pointer
=	O
info	pointer
->	O
dir	pointer
;	O
vfs_s_free_inode	function
(	O
dir	pointer
->	O
super	pointer
->	O
me	pointer
,	O
dir	pointer
)	O
;	O
g_free	function
(	O
data	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
vfs_s_chdir	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
path	pointer
)	O
{	O
void	O
*	O
data	pointer
;	O
if	O
(	O
!	O
(	O
data	pointer
=	O
vfs_s_opendir	function
(	O
me	pointer
,	O
path	pointer
)	O
)	O
)	O
return	O
-	O
1	int
;	O
vfs_s_closedir	function
(	O
data	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
vfs_s_internal_stat	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
path	pointer
,	O
struct	O
stat	struct
*	O
buf	pointer
,	O
int	O
flag	int
)	O
{	O
struct	O
vfs_s_inode	struct
*	O
ino	pointer
;	O
if	O
(	O
!	O
(	O
ino	pointer
=	O
vfs_s_inode_from_path	function
(	O
me	pointer
,	O
path	pointer
,	O
flag	int
)	O
)	O
)	O
return	O
-	O
1	int
;	O
*	O
buf	pointer
=	O
ino	pointer
->	O
st	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
vfs_s_stat	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
path	pointer
,	O
struct	O
stat	struct
*	O
buf	pointer
)	O
{	O
return	O
vfs_s_internal_stat	function
(	O
me	pointer
,	O
path	pointer
,	O
buf	pointer
,	O
FL_FOLLOW	int
)	O
;	O
}	O
static	O
int	O
vfs_s_lstat	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
path	pointer
,	O
struct	O
stat	struct
*	O
buf	pointer
)	O
{	O
return	O
vfs_s_internal_stat	function
(	O
me	pointer
,	O
path	pointer
,	O
buf	pointer
,	O
FL_NONE	int
)	O
;	O
}	O
static	O
int	O
vfs_s_fstat	function
(	O
void	O
*	O
fh	pointer
,	O
struct	O
stat	struct
*	O
buf	pointer
)	O
{	O
*	O
buf	pointer
=	O
FH	O
->	O
ino	pointer
->	O
st	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
vfs_s_readlink	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
path	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
size	long
)	O
{	O
struct	O
vfs_s_inode	struct
*	O
ino	pointer
;	O
size_t	long
len	int
;	O
ino	pointer
=	O
vfs_s_inode_from_path	function
(	O
me	pointer
,	O
path	pointer
,	O
0	int
)	O
;	O
if	O
(	O
!	O
ino	pointer
)	O
return	O
-	O
1	int
;	O
if	O
(	O
!	O
S_ISLNK	O
(	O
ino	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
)	O
ERRNOR	O
(	O
EINVAL	int
,	O
-	O
1	int
)	O
;	O
if	O
(	O
ino	pointer
->	O
linkname	pointer
==	O
NULL	O
)	O
ERRNOR	O
(	O
EFAULT	int
,	O
-	O
1	int
)	O
;	O
len	int
=	O
strlen	function
(	O
ino	pointer
->	O
linkname	pointer
)	O
;	O
if	O
(	O
size	long
<	O
len	int
)	O
len	int
=	O
size	long
;	O
memcpy	function
(	O
buf	pointer
,	O
ino	pointer
->	O
linkname	pointer
,	O
len	int
)	O
;	O
return	O
len	int
;	O
}	O
static	O
void	O
*	O
vfs_s_open	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
file	pointer
,	O
int	O
flags	enum
,	O
int	O
mode	int
)	O
{	O
int	O
was_changed	int
=	O
0	int
;	O
struct	O
vfs_s_fh	struct
*	O
fh	pointer
;	O
struct	O
vfs_s_super	struct
*	O
super	pointer
;	O
char	O
*	O
q	pointer
;	O
struct	O
vfs_s_inode	struct
*	O
ino	pointer
;	O
if	O
(	O
(	O
q	pointer
=	O
vfs_s_get_path	function
(	O
me	pointer
,	O
file	pointer
,	O
&	O
super	pointer
,	O
0	int
)	O
)	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
ino	pointer
=	O
vfs_s_find_inode	function
(	O
me	pointer
,	O
super	pointer
,	O
q	pointer
,	O
LINK_FOLLOW	int
,	O
FL_NONE	int
)	O
;	O
if	O
(	O
ino	pointer
&&	O
(	O
(	O
flags	enum
&	O
(	O
O_CREAT	int
|	O
O_EXCL	int
)	O
)	O
==	O
(	O
O_CREAT	int
|	O
O_EXCL	int
)	O
)	O
)	O
{	O
g_free	function
(	O
q	pointer
)	O
;	O
ERRNOR	O
(	O
EEXIST	int
,	O
NULL	O
)	O
;	O
}	O
if	O
(	O
!	O
ino	pointer
)	O
{	O
char	O
*	O
dirname	pointer
,	O
*	O
name	pointer
,	O
*	O
save	pointer
;	O
struct	O
vfs_s_entry	struct
*	O
ent	pointer
;	O
struct	O
vfs_s_inode	struct
*	O
dir	pointer
;	O
int	O
tmp_handle	int
;	O
if	O
(	O
!	O
(	O
flags	enum
&	O
O_CREAT	int
)	O
||	O
!	O
(	O
me	pointer
->	O
write	function
)	O
)	O
{	O
g_free	function
(	O
q	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
split_dir_name	function
(	O
me	pointer
,	O
q	pointer
,	O
&	O
dirname	pointer
,	O
&	O
name	pointer
,	O
&	O
save	pointer
)	O
;	O
dir	pointer
=	O
vfs_s_find_inode	function
(	O
me	pointer
,	O
super	pointer
,	O
dirname	pointer
,	O
LINK_FOLLOW	int
,	O
FL_DIR	int
)	O
;	O
if	O
(	O
save	pointer
)	O
*	O
save	pointer
=	O
PATH_SEP	char
;	O
ent	pointer
=	O
vfs_s_generate_entry	function
(	O
me	pointer
,	O
name	pointer
,	O
dir	pointer
,	O
0755	int
)	O
;	O
ino	pointer
=	O
ent	pointer
->	O
ino	pointer
;	O
vfs_s_insert_entry	function
(	O
me	pointer
,	O
dir	pointer
,	O
ent	pointer
)	O
;	O
tmp_handle	int
=	O
vfs_mkstemps	function
(	O
&	O
ino	pointer
->	O
localname	pointer
,	O
me	pointer
->	O
name	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
tmp_handle	int
==	O
-	O
1	int
)	O
{	O
g_free	function
(	O
q	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
close	function
(	O
tmp_handle	int
)	O
;	O
was_changed	int
=	O
1	int
;	O
}	O
g_free	function
(	O
q	pointer
)	O
;	O
if	O
(	O
S_ISDIR	O
(	O
ino	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
)	O
ERRNOR	O
(	O
EISDIR	int
,	O
NULL	O
)	O
;	O
fh	pointer
=	O
g_new	O
(	O
struct	O
vfs_s_fh	struct
,	O
1	int
)	O
;	O
fh	pointer
->	O
pos	pointer
=	O
0	int
;	O
fh	pointer
->	O
ino	pointer
=	O
ino	pointer
;	O
fh	pointer
->	O
handle	int
=	O
-	O
1	int
;	O
fh	pointer
->	O
changed	int
=	O
was_changed	int
;	O
fh	pointer
->	O
linear	int
=	O
0	int
;	O
if	O
(	O
IS_LINEAR	O
(	O
flags	enum
)	O
)	O
{	O
if	O
(	O
MEDATA	O
->	O
linear_start	pointer
)	O
{	O
print_vfs_message	function
(	O
_	O
(	O
"Starting linear transfer..."	pointer
)	O
)	O
;	O
fh	pointer
->	O
linear	int
=	O
LS_LINEAR_PREOPEN	int
;	O
}	O
}	O
else	O
if	O
(	O
(	O
MEDATA	O
->	O
fh_open	pointer
)	O
&&	O
(	O
MEDATA	O
->	O
fh_open	pointer
(	O
me	pointer
,	O
fh	pointer
,	O
flags	enum
,	O
mode	int
)	O
)	O
)	O
{	O
g_free	function
(	O
fh	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
fh	pointer
->	O
ino	pointer
->	O
localname	pointer
)	O
{	O
fh	pointer
->	O
handle	int
=	O
open	function
(	O
fh	pointer
->	O
ino	pointer
->	O
localname	pointer
,	O
NO_LINEAR	O
(	O
flags	enum
)	O
,	O
mode	int
)	O
;	O
if	O
(	O
fh	pointer
->	O
handle	int
==	O
-	O
1	int
)	O
{	O
g_free	function
(	O
fh	pointer
)	O
;	O
ERRNOR	O
(	O
errno	O
,	O
NULL	O
)	O
;	O
}	O
}	O
vfs_rmstamp	function
(	O
me	pointer
,	O
(	O
vfsid	pointer
)	O
super	pointer
)	O
;	O
super	pointer
->	O
fd_usage	int
++	O
;	O
fh	pointer
->	O
ino	pointer
->	O
st	pointer
.	O
st_nlink	long
++	O
;	O
return	O
fh	pointer
;	O
}	O
static	O
int	O
vfs_s_read	function
(	O
void	O
*	O
fh	pointer
,	O
char	O
*	O
buffer	pointer
,	O
int	O
count	int
)	O
{	O
int	O
n	long
;	O
struct	O
vfs_class	struct
*	O
me	pointer
=	O
FH_SUPER	O
->	O
me	pointer
;	O
if	O
(	O
FH	O
->	O
linear	int
==	O
LS_LINEAR_PREOPEN	int
)	O
{	O
if	O
(	O
!	O
MEDATA	O
->	O
linear_start	pointer
(	O
me	pointer
,	O
FH	O
,	O
FH	O
->	O
pos	pointer
)	O
)	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
FH	O
->	O
linear	int
==	O
LS_LINEAR_CLOSED	int
)	O
vfs_die	function
(	O
"linear_start() did not set linear_state!"	pointer
)	O
;	O
if	O
(	O
FH	O
->	O
linear	int
==	O
LS_LINEAR_OPEN	int
)	O
return	O
MEDATA	O
->	O
linear_read	pointer
(	O
me	pointer
,	O
FH	O
,	O
buffer	pointer
,	O
count	int
)	O
;	O
if	O
(	O
FH	O
->	O
handle	int
!=	O
-	O
1	int
)	O
{	O
n	long
=	O
read	function
(	O
FH	O
->	O
handle	int
,	O
buffer	pointer
,	O
count	int
)	O
;	O
if	O
(	O
n	long
<	O
0	int
)	O
me	pointer
->	O
verrno	int
=	O
errno	O
;	O
return	O
n	long
;	O
}	O
vfs_die	function
(	O
"vfs_s_read: This should not happen\n"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
vfs_s_write	function
(	O
void	O
*	O
fh	pointer
,	O
const	O
char	O
*	O
buffer	pointer
,	O
int	O
count	int
)	O
{	O
int	O
n	long
;	O
struct	O
vfs_class	struct
*	O
me	pointer
=	O
FH_SUPER	O
->	O
me	pointer
;	O
if	O
(	O
FH	O
->	O
linear	int
)	O
vfs_die	function
(	O
"no writing to linear files, please"	pointer
)	O
;	O
FH	O
->	O
changed	int
=	O
1	int
;	O
if	O
(	O
FH	O
->	O
handle	int
!=	O
-	O
1	int
)	O
{	O
n	long
=	O
write	function
(	O
FH	O
->	O
handle	int
,	O
buffer	pointer
,	O
count	int
)	O
;	O
if	O
(	O
n	long
<	O
0	int
)	O
me	pointer
->	O
verrno	int
=	O
errno	O
;	O
return	O
n	long
;	O
}	O
vfs_die	function
(	O
"vfs_s_write: This should not happen\n"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
vfs_s_lseek	function
(	O
void	O
*	O
fh	pointer
,	O
off_t	long
offset	long
,	O
int	O
whence	int
)	O
{	O
off_t	long
size	long
=	O
FH	O
->	O
ino	pointer
->	O
st	pointer
.	O
st_size	long
;	O
if	O
(	O
FH	O
->	O
linear	int
==	O
LS_LINEAR_OPEN	int
)	O
vfs_die	function
(	O
"cannot lseek() after linear_read!"	pointer
)	O
;	O
if	O
(	O
FH	O
->	O
handle	int
!=	O
-	O
1	int
)	O
{	O
int	O
retval	pointer
=	O
lseek	function
(	O
FH	O
->	O
handle	int
,	O
offset	long
,	O
whence	int
)	O
;	O
if	O
(	O
retval	pointer
==	O
-	O
1	int
)	O
FH	O
->	O
ino	pointer
->	O
super	pointer
->	O
me	pointer
->	O
verrno	int
=	O
errno	O
;	O
return	O
retval	pointer
;	O
}	O
switch	O
(	O
whence	int
)	O
{	O
case	O
SEEK_CUR	int
:	O
offset	long
+=	O
FH	O
->	O
pos	pointer
;	O
break	O
;	O
case	O
SEEK_END	int
:	O
offset	long
+=	O
size	long
;	O
break	O
;	O
}	O
if	O
(	O
offset	long
<	O
0	int
)	O
FH	O
->	O
pos	pointer
=	O
0	int
;	O
else	O
if	O
(	O
offset	long
<	O
size	long
)	O
FH	O
->	O
pos	pointer
=	O
offset	long
;	O
else	O
FH	O
->	O
pos	pointer
=	O
size	long
;	O
return	O
FH	O
->	O
pos	pointer
;	O
}	O
static	O
int	O
vfs_s_close	function
(	O
void	O
*	O
fh	pointer
)	O
{	O
int	O
res	pointer
=	O
0	int
;	O
struct	O
vfs_class	struct
*	O
me	pointer
=	O
FH_SUPER	O
->	O
me	pointer
;	O
FH_SUPER	O
->	O
fd_usage	int
--	O
;	O
if	O
(	O
!	O
FH_SUPER	O
->	O
fd_usage	int
)	O
vfs_stamp_create	function
(	O
me	pointer
,	O
FH_SUPER	O
)	O
;	O
if	O
(	O
FH	O
->	O
linear	int
==	O
LS_LINEAR_OPEN	int
)	O
MEDATA	O
->	O
linear_close	pointer
(	O
me	pointer
,	O
fh	pointer
)	O
;	O
if	O
(	O
MEDATA	O
->	O
fh_close	pointer
)	O
res	pointer
=	O
MEDATA	O
->	O
fh_close	pointer
(	O
me	pointer
,	O
fh	pointer
)	O
;	O
if	O
(	O
FH	O
->	O
changed	int
&&	O
MEDATA	O
->	O
file_store	pointer
)	O
{	O
char	O
*	O
s	pointer
=	O
vfs_s_fullpath	function
(	O
me	pointer
,	O
FH	O
->	O
ino	pointer
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
res	pointer
=	O
-	O
1	int
;	O
else	O
{	O
res	pointer
=	O
MEDATA	O
->	O
file_store	pointer
(	O
me	pointer
,	O
fh	pointer
,	O
s	pointer
,	O
FH	O
->	O
ino	pointer
->	O
localname	pointer
)	O
;	O
g_free	function
(	O
s	pointer
)	O
;	O
}	O
vfs_s_invalidate	function
(	O
me	pointer
,	O
FH_SUPER	O
)	O
;	O
}	O
if	O
(	O
FH	O
->	O
handle	int
!=	O
-	O
1	int
)	O
close	function
(	O
FH	O
->	O
handle	int
)	O
;	O
vfs_s_free_inode	function
(	O
me	pointer
,	O
FH	O
->	O
ino	pointer
)	O
;	O
g_free	function
(	O
fh	pointer
)	O
;	O
return	O
res	pointer
;	O
}	O
static	O
void	O
vfs_s_print_stats	function
(	O
const	O
char	O
*	O
fs_name	pointer
,	O
const	O
char	O
*	O
action	int
,	O
const	O
char	O
*	O
file_name	pointer
,	O
off_t	long
have	long
,	O
off_t	long
need	long
)	O
{	O
static	O
const	O
char	O
*	O
i18n_percent_transf_format	pointer
=	O
NULL	O
;	O
static	O
const	O
char	O
*	O
i18n_transf_format	pointer
=	O
NULL	O
;	O
if	O
(	O
i18n_percent_transf_format	pointer
==	O
NULL	O
)	O
{	O
i18n_percent_transf_format	pointer
=	O
_	O
(	O
"%s: %s: %s %3d%% (%lu bytes transferred)"	pointer
)	O
;	O
i18n_transf_format	pointer
=	O
_	O
(	O
"%s: %s: %s %lu bytes transferred"	pointer
)	O
;	O
}	O
if	O
(	O
need	long
)	O
print_vfs_message	function
(	O
i18n_percent_transf_format	pointer
,	O
fs_name	pointer
,	O
action	int
,	O
file_name	pointer
,	O
(	O
int	O
)	O
(	O
(	O
double	O
)	O
have	long
*	O
100	int
/	O
need	long
)	O
,	O
(	O
unsigned	O
long	O
)	O
have	long
)	O
;	O
else	O
print_vfs_message	function
(	O
i18n_transf_format	pointer
,	O
fs_name	pointer
,	O
action	int
,	O
file_name	pointer
,	O
(	O
unsigned	O
long	O
)	O
have	long
)	O
;	O
}	O
int	O
vfs_s_retrieve_file	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
struct	O
vfs_s_inode	struct
*	O
ino	pointer
)	O
{	O
off_t	long
total	double
=	O
0	int
;	O
char	O
buffer	pointer
[	O
8192	int
]	O
;	O
int	O
handle	int
,	O
n	long
;	O
off_t	long
stat_size	long
=	O
ino	pointer
->	O
st	pointer
.	O
st_size	long
;	O
struct	O
vfs_s_fh	struct
fh	pointer
;	O
memset	function
(	O
&	O
fh	pointer
,	O
0	int
,	O
sizeof	O
(	O
fh	pointer
)	O
)	O
;	O
fh	pointer
.	O
ino	pointer
=	O
ino	pointer
;	O
fh	pointer
.	O
handle	int
=	O
-	O
1	int
;	O
handle	int
=	O
vfs_mkstemps	function
(	O
&	O
ino	pointer
->	O
localname	pointer
,	O
me	pointer
->	O
name	pointer
,	O
ino	pointer
->	O
ent	pointer
->	O
name	pointer
)	O
;	O
if	O
(	O
handle	int
==	O
-	O
1	int
)	O
{	O
me	pointer
->	O
verrno	int
=	O
errno	O
;	O
goto	O
error_4	O
;	O
}	O
if	O
(	O
!	O
MEDATA	O
->	O
linear_start	pointer
(	O
me	pointer
,	O
&	O
fh	pointer
,	O
0	int
)	O
)	O
goto	O
error_3	O
;	O
got_interrupt	O
(	O
)	O
;	O
enable_interrupt_key	O
(	O
)	O
;	O
while	O
(	O
(	O
n	long
=	O
MEDATA	O
->	O
linear_read	pointer
(	O
me	pointer
,	O
&	O
fh	pointer
,	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
)	O
)	O
)	O
{	O
int	O
t	long
;	O
if	O
(	O
n	long
<	O
0	int
)	O
goto	O
error_1	O
;	O
total	double
+=	O
n	long
;	O
vfs_s_print_stats	function
(	O
me	pointer
->	O
name	pointer
,	O
_	O
(	O
"Getting file"	pointer
)	O
,	O
ino	pointer
->	O
ent	pointer
->	O
name	pointer
,	O
total	double
,	O
stat_size	long
)	O
;	O
if	O
(	O
got_interrupt	O
(	O
)	O
)	O
goto	O
error_1	O
;	O
t	long
=	O
write	function
(	O
handle	int
,	O
buffer	pointer
,	O
n	long
)	O
;	O
if	O
(	O
t	long
!=	O
n	long
)	O
{	O
if	O
(	O
t	long
==	O
-	O
1	int
)	O
me	pointer
->	O
verrno	int
=	O
errno	O
;	O
goto	O
error_1	O
;	O
}	O
}	O
MEDATA	O
->	O
linear_close	pointer
(	O
me	pointer
,	O
&	O
fh	pointer
)	O
;	O
close	function
(	O
handle	int
)	O
;	O
disable_interrupt_key	O
(	O
)	O
;	O
return	O
0	int
;	O
error_1	O
:	O
MEDATA	O
->	O
linear_close	pointer
(	O
me	pointer
,	O
&	O
fh	pointer
)	O
;	O
error_3	O
:	O
disable_interrupt_key	O
(	O
)	O
;	O
close	function
(	O
handle	int
)	O
;	O
unlink	function
(	O
ino	pointer
->	O
localname	pointer
)	O
;	O
error_4	O
:	O
g_free	function
(	O
ino	pointer
->	O
localname	pointer
)	O
;	O
ino	pointer
->	O
localname	pointer
=	O
NULL	O
;	O
return	O
-	O
1	int
;	O
}	O
static	O
void	O
vfs_s_fill_names	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
fill_names_f	pointer
func	pointer
)	O
{	O
struct	O
vfs_s_super	struct
*	O
a	pointer
=	O
MEDATA	O
->	O
supers	pointer
;	O
char	O
*	O
name	pointer
;	O
while	O
(	O
a	pointer
)	O
{	O
name	pointer
=	O
g_strconcat	function
(	O
a	pointer
->	O
name	pointer
,	O
"#"	pointer
,	O
me	pointer
->	O
prefix	pointer
,	O
"/"	pointer
,	O
NULL	O
)	O
;	O
(	O
*	O
func	pointer
)	O
(	O
name	pointer
)	O
;	O
g_free	function
(	O
name	pointer
)	O
;	O
a	pointer
=	O
a	pointer
->	O
next	pointer
;	O
}	O
}	O
static	O
int	O
vfs_s_ferrno	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
)	O
{	O
return	O
me	pointer
->	O
verrno	int
;	O
}	O
static	O
char	O
*	O
vfs_s_getlocalcopy	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
path	pointer
)	O
{	O
struct	O
vfs_s_fh	struct
*	O
fh	pointer
;	O
char	O
*	O
local	pointer
;	O
fh	pointer
=	O
vfs_s_open	function
(	O
me	pointer
,	O
path	pointer
,	O
O_RDONLY	int
,	O
0	int
)	O
;	O
if	O
(	O
!	O
fh	pointer
||	O
!	O
fh	pointer
->	O
ino	pointer
||	O
!	O
fh	pointer
->	O
ino	pointer
->	O
localname	pointer
)	O
return	O
NULL	O
;	O
local	pointer
=	O
g_strdup	function
(	O
fh	pointer
->	O
ino	pointer
->	O
localname	pointer
)	O
;	O
vfs_s_close	function
(	O
fh	pointer
)	O
;	O
return	O
local	pointer
;	O
}	O
static	O
int	O
vfs_s_ungetlocalcopy	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
path	pointer
,	O
const	O
char	O
*	O
local	pointer
,	O
int	O
has_changed	int
)	O
{	O
(	O
void	O
)	O
me	pointer
;	O
(	O
void	O
)	O
path	pointer
;	O
(	O
void	O
)	O
local	pointer
;	O
(	O
void	O
)	O
has_changed	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
vfs_s_setctl	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
path	pointer
,	O
int	O
ctlop	int
,	O
void	O
*	O
arg	pointer
)	O
{	O
switch	O
(	O
ctlop	int
)	O
{	O
case	O
VFS_SETCTL_STALE_DATA	int
:	O
{	O
struct	O
vfs_s_inode	struct
*	O
ino	pointer
=	O
vfs_s_inode_from_path	function
(	O
me	pointer
,	O
path	pointer
,	O
0	int
)	O
;	O
if	O
(	O
!	O
ino	pointer
)	O
return	O
0	int
;	O
if	O
(	O
arg	pointer
)	O
ino	pointer
->	O
super	pointer
->	O
want_stale	int
=	O
1	int
;	O
else	O
{	O
ino	pointer
->	O
super	pointer
->	O
want_stale	int
=	O
0	int
;	O
vfs_s_invalidate	function
(	O
me	pointer
,	O
ino	pointer
->	O
super	pointer
)	O
;	O
}	O
return	O
1	int
;	O
}	O
case	O
VFS_SETCTL_LOGFILE	int
:	O
MEDATA	O
->	O
logfile	pointer
=	O
fopen	function
(	O
(	O
char	O
*	O
)	O
arg	pointer
,	O
"w"	pointer
)	O
;	O
return	O
1	int
;	O
case	O
VFS_SETCTL_FLUSH	int
:	O
MEDATA	O
->	O
flush	int
=	O
1	int
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
vfsid	pointer
vfs_s_getid	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
path	pointer
)	O
{	O
struct	O
vfs_s_super	struct
*	O
archive	pointer
;	O
char	O
*	O
p	pointer
;	O
if	O
(	O
!	O
(	O
p	pointer
=	O
vfs_s_get_path	function
(	O
me	pointer
,	O
path	pointer
,	O
&	O
archive	pointer
,	O
FL_NO_OPEN	int
)	O
)	O
)	O
return	O
NULL	O
;	O
g_free	function
(	O
p	pointer
)	O
;	O
return	O
(	O
vfsid	pointer
)	O
archive	pointer
;	O
}	O
static	O
int	O
vfs_s_nothingisopen	function
(	O
vfsid	pointer
id	int
)	O
{	O
(	O
void	O
)	O
id	int
;	O
return	O
1	int
;	O
}	O
static	O
void	O
vfs_s_free	function
(	O
vfsid	pointer
id	int
)	O
{	O
vfs_s_free_super	function
(	O
(	O
(	O
struct	O
vfs_s_super	struct
*	O
)	O
id	int
)	O
->	O
me	pointer
,	O
(	O
struct	O
vfs_s_super	struct
*	O
)	O
id	int
)	O
;	O
}	O
static	O
int	O
vfs_s_dir_uptodate	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
struct	O
vfs_s_inode	struct
*	O
ino	pointer
)	O
{	O
struct	O
timeval	struct
tim	struct
;	O
if	O
(	O
MEDATA	O
->	O
flush	int
)	O
{	O
MEDATA	O
->	O
flush	int
=	O
0	int
;	O
return	O
0	int
;	O
}	O
gettimeofday	function
(	O
&	O
tim	struct
,	O
NULL	O
)	O
;	O
if	O
(	O
tim	struct
.	O
tv_sec	long
<	O
ino	pointer
->	O
timestamp	struct
.	O
tv_sec	long
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
void	O
vfs_s_init_class	function
(	O
struct	O
vfs_class	struct
*	O
vclass	pointer
,	O
struct	O
vfs_s_subclass	struct
*	O
sub	pointer
)	O
{	O
vclass	pointer
->	O
data	pointer
=	O
sub	pointer
;	O
vclass	pointer
->	O
fill_names	pointer
=	O
vfs_s_fill_names	function
;	O
vclass	pointer
->	O
open	function
=	O
vfs_s_open	function
;	O
vclass	pointer
->	O
close	function
=	O
vfs_s_close	function
;	O
vclass	pointer
->	O
read	function
=	O
vfs_s_read	function
;	O
if	O
(	O
!	O
(	O
sub	pointer
->	O
flags	enum
&	O
VFS_S_READONLY	int
)	O
)	O
{	O
vclass	pointer
->	O
write	function
=	O
vfs_s_write	function
;	O
}	O
vclass	pointer
->	O
opendir	function
=	O
vfs_s_opendir	function
;	O
vclass	pointer
->	O
readdir	function
=	O
vfs_s_readdir	function
;	O
vclass	pointer
->	O
closedir	function
=	O
vfs_s_closedir	function
;	O
vclass	pointer
->	O
stat	struct
=	O
vfs_s_stat	function
;	O
vclass	pointer
->	O
lstat	function
=	O
vfs_s_lstat	function
;	O
vclass	pointer
->	O
fstat	function
=	O
vfs_s_fstat	function
;	O
vclass	pointer
->	O
readlink	function
=	O
vfs_s_readlink	function
;	O
vclass	pointer
->	O
chdir	function
=	O
vfs_s_chdir	function
;	O
vclass	pointer
->	O
ferrno	pointer
=	O
vfs_s_ferrno	function
;	O
vclass	pointer
->	O
lseek	function
=	O
vfs_s_lseek	function
;	O
vclass	pointer
->	O
getid	pointer
=	O
vfs_s_getid	function
;	O
vclass	pointer
->	O
nothingisopen	pointer
=	O
vfs_s_nothingisopen	function
;	O
vclass	pointer
->	O
free	function
=	O
vfs_s_free	function
;	O
if	O
(	O
sub	pointer
->	O
flags	enum
&	O
VFS_S_REMOTE	int
)	O
{	O
vclass	pointer
->	O
getlocalcopy	pointer
=	O
vfs_s_getlocalcopy	function
;	O
vclass	pointer
->	O
ungetlocalcopy	pointer
=	O
vfs_s_ungetlocalcopy	function
;	O
sub	pointer
->	O
find_entry	pointer
=	O
vfs_s_find_entry_linear	function
;	O
}	O
else	O
{	O
sub	pointer
->	O
find_entry	pointer
=	O
vfs_s_find_entry_tree	function
;	O
}	O
vclass	pointer
->	O
setctl	pointer
=	O
vfs_s_setctl	function
;	O
sub	pointer
->	O
dir_uptodate	pointer
=	O
vfs_s_dir_uptodate	function
;	O
}	O
int	O
vfs_s_select_on_two	function
(	O
int	O
fd1	int
,	O
int	O
fd2	int
)	O
{	O
fd_set	struct
set	int
;	O
struct	O
timeval	struct
timeout	long
;	O
int	O
v	pointer
;	O
int	O
maxfd	int
=	O
(	O
fd1	int
>	O
fd2	int
?	O
fd1	int
:	O
fd2	int
)	O
+	O
1	int
;	O
timeout	long
.	O
tv_sec	long
=	O
1	int
;	O
timeout	long
.	O
tv_usec	long
=	O
0	int
;	O
FD_ZERO	O
(	O
&	O
set	int
)	O
;	O
FD_SET	O
(	O
fd1	int
,	O
&	O
set	int
)	O
;	O
FD_SET	O
(	O
fd2	int
,	O
&	O
set	int
)	O
;	O
v	pointer
=	O
select	function
(	O
maxfd	int
,	O
&	O
set	int
,	O
0	int
,	O
0	int
,	O
&	O
timeout	long
)	O
;	O
if	O
(	O
v	pointer
<=	O
0	int
)	O
return	O
v	pointer
;	O
if	O
(	O
FD_ISSET	O
(	O
fd1	int
,	O
&	O
set	int
)	O
)	O
return	O
1	int
;	O
if	O
(	O
FD_ISSET	O
(	O
fd2	int
,	O
&	O
set	int
)	O
)	O
return	O
2	int
;	O
return	O
-	O
1	int
;	O
}	O
int	O
vfs_s_get_line	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
int	O
sock	int
,	O
char	O
*	O
buf	pointer
,	O
int	O
buf_len	int
,	O
char	O
term	char
)	O
{	O
FILE	struct
*	O
logfile	pointer
=	O
MEDATA	O
->	O
logfile	pointer
;	O
int	O
i	array
;	O
char	O
c	int
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
buf_len	int
-	O
1	int
;	O
i	array
++	O
,	O
buf	pointer
++	O
)	O
{	O
if	O
(	O
read	function
(	O
sock	int
,	O
buf	pointer
,	O
sizeof	O
(	O
char	O
)	O
)	O
<=	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
logfile	pointer
)	O
{	O
fwrite	function
(	O
buf	pointer
,	O
1	int
,	O
1	int
,	O
logfile	pointer
)	O
;	O
fflush	function
(	O
logfile	pointer
)	O
;	O
}	O
if	O
(	O
*	O
buf	pointer
==	O
term	char
)	O
{	O
*	O
buf	pointer
=	O
0	int
;	O
return	O
1	int
;	O
}	O
}	O
*	O
buf	pointer
=	O
0	int
;	O
while	O
(	O
read	function
(	O
sock	int
,	O
&	O
c	int
,	O
sizeof	O
(	O
c	int
)	O
)	O
>	O
0	int
)	O
{	O
if	O
(	O
logfile	pointer
)	O
{	O
fwrite	function
(	O
&	O
c	int
,	O
1	int
,	O
1	int
,	O
logfile	pointer
)	O
;	O
fflush	function
(	O
logfile	pointer
)	O
;	O
}	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
vfs_s_get_line_interruptible	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
char	O
*	O
buffer	pointer
,	O
int	O
size	long
,	O
int	O
fd	int
)	O
{	O
int	O
n	long
;	O
int	O
i	array
;	O
(	O
void	O
)	O
me	pointer
;	O
enable_interrupt_key	O
(	O
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
size	long
-	O
1	int
;	O
i	array
++	O
)	O
{	O
n	long
=	O
read	function
(	O
fd	int
,	O
buffer	pointer
+	O
i	array
,	O
1	int
)	O
;	O
disable_interrupt_key	O
(	O
)	O
;	O
if	O
(	O
n	long
==	O
-	O
1	int
&&	O
errno	O
==	O
EINTR	int
)	O
{	O
buffer	pointer
[	O
i	array
]	O
=	O
0	int
;	O
return	O
EINTR	int
;	O
}	O
if	O
(	O
n	long
==	O
0	int
)	O
{	O
buffer	pointer
[	O
i	array
]	O
=	O
0	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
buffer	pointer
[	O
i	array
]	O
==	O
'\n'	O
)	O
{	O
buffer	pointer
[	O
i	array
]	O
=	O
0	int
;	O
return	O
1	int
;	O
}	O
}	O
buffer	pointer
[	O
size	long
-	O
1	int
]	O
=	O
0	int
;	O
return	O
0	int
;	O
}	O