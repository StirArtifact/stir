extern	O
int	O
screen_trashed	int
;	O
extern	O
IFILE	O
curr_ifile	*
;	O
public	O
void	O
lsystem	function
(	O
cmd	int
,	O
donemsg	*
)	O
char	O
*	O
cmd	*
;	O
char	O
*	O
donemsg	*
;	O
{	O
int	O
inp	int
;	O
char	O
*	O
shell	*
;	O
char	O
*	O
p	*
;	O
IFILE	O
save_ifile	*
;	O
if	O
(	O
cmd	*
[	O
0	int
]	O
==	O
'-'	O
)	O
cmd	int
++	O
;	O
else	O
{	O
clear_bot	function
(	O
)	O
;	O
putstr	function
(	O
"!"	*
)	O
;	O
putstr	function
(	O
cmd	*
)	O
;	O
putstr	function
(	O
"\n"	*
)	O
;	O
}	O
save_ifile	*
=	O
save_curr_ifile	function
(	O
)	O
;	O
(	O
void	O
)	O
edit_ifile	function
(	O
NULL_IFILE	*
)	O
;	O
deinit	function
(	O
)	O
;	O
flush	function
(	O
)	O
;	O
raw_mode	function
(	O
0	int
)	O
;	O
init_signals	function
(	O
0	int
)	O
;	O
inp	*
=	O
dup	function
(	O
0	int
)	O
;	O
close	*
(	O
0	int
)	O
;	O
if	O
(	O
open	function
(	O
"/dev/tty"	*
,	O
OPEN_READ	O
)	O
<	O
0	int
)	O
dup	function
(	O
inp	*
)	O
;	O
p	*
=	O
NULL	O
;	O
if	O
(	O
(	O
shell	*
=	O
lgetenv	function
(	O
"SHELL"	*
)	O
)	O
!=	O
NULL	O
&&	O
*	O
shell	*
!=	O
'\0'	O
)	O
{	O
if	O
(	O
*	O
cmd	*
==	O
'\0'	O
)	O
p	*
=	O
save	O
(	O
shell	*
)	O
;	O
else	O
{	O
char	O
*	O
esccmd	*
=	O
shell_quote	function
(	O
cmd	*
)	O
;	O
if	O
(	O
esccmd	*
!=	O
NULL	O
)	O
{	O
int	O
len	int
=	O
(	O
int	O
)	O
(	O
strlen	function
(	O
shell	*
)	O
+	O
strlen	function
(	O
esccmd	*
)	O
+	O
5	int
)	O
;	O
p	*
=	O
(	O
char	O
*	O
)	O
ecalloc	function
(	O
len	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
SNPRINTF3	function
(	O
p	*
,	O
len	int
,	O
"%s %s %s"	*
,	O
shell	*
,	O
shell_coption	function
(	O
)	O
,	O
esccmd	*
)	O
;	O
free	function
(	O
esccmd	*
)	O
;	O
}	O
}	O
}	O
if	O
(	O
p	*
==	O
NULL	O
)	O
{	O
if	O
(	O
*	O
cmd	*
==	O
'\0'	O
)	O
p	*
=	O
save	function
(	O
"sh"	*
)	O
;	O
else	O
p	*
=	O
save	O
(	O
cmd	*
)	O
;	O
}	O
system	function
(	O
p	*
)	O
;	O
free	function
(	O
p	*
)	O
;	O
close	*
(	O
0	int
)	O
;	O
dup	function
(	O
inp	*
)	O
;	O
close	*
(	O
inp	*
)	O
;	O
init_signals	function
(	O
1	int
)	O
;	O
raw_mode	function
(	O
1	int
)	O
;	O
if	O
(	O
donemsg	*
!=	O
NULL	O
)	O
{	O
putstr	function
(	O
donemsg	*
)	O
;	O
putstr	function
(	O
"  (press RETURN)"	*
)	O
;	O
get_return	function
(	O
)	O
;	O
putchr	function
(	O
'\n'	O
)	O
;	O
flush	function
(	O
)	O
;	O
}	O
init	function
(	O
)	O
;	O
screen_trashed	int
=	O
1	int
;	O
reedit_ifile	function
(	O
save_ifile	*
)	O
;	O
winch	function
(	O
0	int
)	O
;	O
}	O
public	O
int	O
pipe_mark	function
(	O
c	int
,	O
cmd	int
)	O
int	O
c	int
;	O
char	O
*	O
cmd	*
;	O
{	O
POSITION	long
mpos	long
,	O
tpos	long
,	O
bpos	long
;	O
mpos	int
=	O
markpos	function
(	O
c	int
)	O
;	O
if	O
(	O
mpos	*
==	O
NULL_POSITION	O
)	O
return	O
(	O
-	O
1	int
)	O
;	O
tpos	long
=	O
position	function
(	O
TOP	O
)	O
;	O
if	O
(	O
tpos	long
==	O
NULL_POSITION	O
)	O
tpos	long
=	O
ch_zero	O
(	O
)	O
;	O
bpos	long
=	O
position	function
(	O
BOTTOM	*
)	O
;	O
if	O
(	O
c	int
==	O
'.'	O
)	O
return	O
(	O
pipe_data	function
(	O
cmd	int
,	O
tpos	long
,	O
bpos	long
)	O
)	O
;	O
else	O
if	O
(	O
mpos	long
<=	O
tpos	long
)	O
return	O
(	O
pipe_data	function
(	O
cmd	int
,	O
mpos	*
,	O
bpos	long
)	O
)	O
;	O
else	O
if	O
(	O
bpos	long
==	O
NULL_POSITION	O
)	O
return	O
(	O
pipe_data	function
(	O
cmd	int
,	O
tpos	long
,	O
bpos	long
)	O
)	O
;	O
else	O
return	O
(	O
pipe_data	function
(	O
cmd	int
,	O
tpos	long
,	O
mpos	*
)	O
)	O
;	O
}	O
public	O
int	O
pipe_data	function
(	O
cmd	int
,	O
spos	*
,	O
epos	*
)	O
char	O
*	O
cmd	*
;	O
POSITION	long
spos	long
;	O
POSITION	long
epos	long
;	O
{	O
FILE	struct
*	O
f	*
;	O
int	O
c	int
;	O
extern	O
FILE	struct
*	O
popen	function
(	O
)	O
;	O
if	O
(	O
ch_seek	function
(	O
spos	*
)	O
!=	O
0	int
)	O
{	O
error	function
(	O
"Cannot seek to start position"	*
,	O
NULL_PARG	O
)	O
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
if	O
(	O
(	O
f	*
=	O
popen	function
(	O
cmd	*
,	O
"w"	*
)	O
)	O
==	O
NULL	O
)	O
{	O
error	function
(	O
"Cannot create pipe"	*
,	O
NULL_PARG	O
)	O
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
clear_bot	function
(	O
)	O
;	O
putstr	function
(	O
"!"	*
)	O
;	O
putstr	function
(	O
cmd	*
)	O
;	O
putstr	function
(	O
"\n"	*
)	O
;	O
deinit	function
(	O
)	O
;	O
flush	function
(	O
)	O
;	O
raw_mode	function
(	O
0	int
)	O
;	O
init_signals	function
(	O
0	int
)	O
;	O
LSIGNAL	O
(	O
SIGPIPE	int
,	O
SIG_IGN	O
)	O
;	O
c	int
=	O
EOI	O
;	O
while	O
(	O
epos	O
==	O
NULL_POSITION	O
||	O
spos	int
++	O
<=	O
epos	int
)	O
{	O
c	int
=	O
ch_forw_get	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOI	O
)	O
break	O
;	O
if	O
(	O
putc	function
(	O
c	int
,	O
f	*
)	O
==	O
EOF	O
)	O
break	O
;	O
}	O
while	O
(	O
c	int
!=	O
'\n'	O
&&	O
c	int
!=	O
EOI	O
)	O
{	O
c	int
=	O
ch_forw_get	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOI	O
)	O
break	O
;	O
if	O
(	O
putc	function
(	O
c	int
,	O
f	*
)	O
==	O
EOF	O
)	O
break	O
;	O
}	O
pclose	function
(	O
f	*
)	O
;	O
LSIGNAL	O
(	O
SIGPIPE	int
,	O
SIG_DFL	O
)	O
;	O
init_signals	function
(	O
1	int
)	O
;	O
raw_mode	function
(	O
1	int
)	O
;	O
init	function
(	O
)	O
;	O
screen_trashed	int
=	O
1	int
;	O
winch	function
(	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O