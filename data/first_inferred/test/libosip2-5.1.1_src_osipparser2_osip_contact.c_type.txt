int	O
osip_message_set_contact	function
(	O
osip_message_t	struct
*	O
sip	*
,	O
const	O
char	O
*	O
hvalue	*
)	O
{	O
int	O
i	int
;	O
osip_contact_t	struct
*	O
contact	*
;	O
if	O
(	O
hvalue	*
==	O
NULL	O
||	O
hvalue	*
[	O
0	int
]	O
==	O
'\0'	O
)	O
return	O
OSIP_SUCCESS	int
;	O
i	int
=	O
osip_contact_init	function
(	O
&	O
contact	*
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
i	int
=	O
osip_contact_parse	function
(	O
contact	*
,	O
hvalue	*
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_contact_free	function
(	O
contact	*
)	O
;	O
return	O
i	int
;	O
}	O
sip	*
->	O
message_property	int
=	O
2	int
;	O
osip_list_add	function
(	O
&	O
sip	*
->	O
contacts	struct
,	O
contact	*
,	O
-	O
1	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_contact_parse	function
(	O
osip_contact_t	struct
*	O
contact	*
,	O
const	O
char	O
*	O
hvalue	*
)	O
{	O
if	O
(	O
contact	*
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
strncmp	function
(	O
hvalue	*
,	O
"*"	*
,	O
1	int
)	O
==	O
0	int
)	O
{	O
contact	*
->	O
displayname	*
=	O
osip_strdup	function
(	O
hvalue	*
)	O
;	O
if	O
(	O
contact	*
->	O
displayname	*
==	O
NULL	O
)	O
{	O
return	O
OSIP_NOMEM	O
;	O
}	O
return	O
OSIP_SUCCESS	int
;	O
}	O
return	O
osip_from_parse	function
(	O
(	O
osip_from_t	struct
*	O
)	O
contact	*
,	O
hvalue	*
)	O
;	O
}	O
int	O
osip_contact_init	function
(	O
osip_contact_t	struct
*	O
*	O
contact	*
)	O
{	O
return	O
osip_from_init	function
(	O
(	O
osip_from_t	struct
*	O
*	O
)	O
contact	*
)	O
;	O
}	O
int	O
osip_message_get_contact	function
(	O
const	O
osip_message_t	struct
*	O
sip	*
,	O
int	O
pos	int
,	O
osip_contact_t	struct
*	O
*	O
dest	*
)	O
{	O
*	O
dest	*
=	O
NULL	O
;	O
if	O
(	O
sip	*
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
osip_list_size	function
(	O
&	O
sip	*
->	O
contacts	struct
)	O
<=	O
pos	int
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
*	O
dest	*
=	O
(	O
osip_contact_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
sip	*
->	O
contacts	struct
,	O
pos	int
)	O
;	O
return	O
pos	int
;	O
}	O
int	O
osip_contact_to_str	function
(	O
const	O
osip_contact_t	struct
*	O
contact	*
,	O
char	O
*	O
*	O
dest	*
)	O
{	O
if	O
(	O
contact	*
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
contact	*
->	O
displayname	*
!=	O
NULL	O
)	O
{	O
if	O
(	O
strncmp	function
(	O
contact	*
->	O
displayname	*
,	O
"*"	*
,	O
1	int
)	O
==	O
0	int
)	O
{	O
*	O
dest	*
=	O
osip_strdup	function
(	O
"*"	*
)	O
;	O
if	O
(	O
*	O
dest	*
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
}	O
return	O
osip_from_to_str	function
(	O
(	O
osip_from_t	struct
*	O
)	O
contact	*
,	O
dest	*
)	O
;	O
}	O
void	O
osip_contact_free	function
(	O
osip_contact_t	struct
*	O
contact	*
)	O
{	O
osip_from_free	function
(	O
(	O
osip_from_t	struct
*	O
)	O
contact	*
)	O
;	O
}	O
int	O
osip_contact_clone	function
(	O
const	O
osip_contact_t	struct
*	O
contact	*
,	O
osip_contact_t	struct
*	O
*	O
dest	*
)	O
{	O
return	O
osip_from_clone	function
(	O
(	O
osip_from_t	struct
*	O
)	O
contact	*
,	O
(	O
osip_from_t	struct
*	O
*	O
)	O
dest	*
)	O
;	O
}	O