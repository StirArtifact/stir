static	O
int	O
t_from_type	function
(	O
object	O
)	O
;	O
DEFVAR	function
(	O
"*AFTER-GBC-HOOK*"	pointer
,	O
sSAafter_gbc_hookA	O
,	O
SI	O
,	O
sLnil	O
,	O
""	pointer
)	O
;	O
DEFVAR	function
(	O
"*IGNORE-MAXIMUM-PAGES*"	pointer
,	O
sSAignore_maximum_pagesA	O
,	O
SI	O
,	O
sLt	O
,	O
""	pointer
)	O
;	O
static	O
void	O
call_after_gbc_hook	function
(	O
int	O
t	int
)	O
;	O
long	O
starting_hole_div	long
=	O
10	int
;	O
long	O
starting_relb_heap_mult	long
=	O
2	int
;	O
long	O
new_holepage	long
;	O
long	O
resv_pages	long
=	O
40	int
;	O
inline	O
void	O
add_page_to_contblock_list	function
(	O
void	O
*	O
p	pointer
,	O
fixnum	int
m	int
)	O
{	O
struct	O
pageinfo	function
*	O
pp	pointer
=	O
pageinfo	function
(	O
p	pointer
)	O
;	O
bzero	function
(	O
pp	pointer
,	O
sizeof	O
(	O
*	O
pp	pointer
)	O
)	O
;	O
pp	pointer
->	O
type	int
=	O
t_contiguous	O
;	O
pp	pointer
->	O
in_use	O
=	O
m	int
;	O
massert	function
(	O
pp	pointer
->	O
in_use	O
==	O
m	int
)	O
;	O
pp	pointer
->	O
magic	O
=	O
PAGE_MAGIC	O
;	O
if	O
(	O
contblock_list_head	pointer
==	O
NULL	O
)	O
contblock_list_tail	pointer
=	O
contblock_list_head	pointer
=	O
p	pointer
;	O
else	O
if	O
(	O
pp	pointer
>	O
contblock_list_tail	pointer
)	O
{	O
contblock_list_tail	pointer
->	O
next	O
=	O
p	pointer
;	O
contblock_list_tail	pointer
=	O
p	pointer
;	O
}	O
bzero	function
(	O
pagetochar	function
(	O
page	function
(	O
pp	pointer
)	O
)	O
,	O
CB_DATA_START	function
(	O
pp	pointer
)	O
-	O
(	O
void	O
*	O
)	O
pagetochar	function
(	O
page	function
(	O
pp	pointer
)	O
)	O
)	O
;	O
ncbpage	O
+=	O
m	int
;	O
insert_contblock	function
(	O
CB_DATA_START	function
(	O
pp	pointer
)	O
,	O
CB_DATA_END	function
(	O
pp	pointer
)	O
-	O
CB_DATA_START	function
(	O
pp	pointer
)	O
)	O
;	O
}	O
int	O
icomp	function
(	O
const	O
void	O
*	O
v1	pointer
,	O
const	O
void	O
*	O
v2	pointer
)	O
{	O
const	O
fixnum	int
*	O
f1	pointer
=	O
v1	pointer
,	O
*	O
f2	O
=	O
v2	pointer
;	O
return	O
*	O
f1	pointer
<	O
*	O
f2	O
?	O
-	O
1	int
:	O
*	O
f1	pointer
==	O
*	O
f2	O
?	O
0	int
:	O
+	O
1	int
;	O
}	O
inline	O
void	O
maybe_reallocate_page	function
(	O
struct	O
typemanager	O
*	O
ntm	pointer
,	O
ufixnum	O
count	int
)	O
{	O
void	O
*	O
*	O
y	pointer
,	O
*	O
*	O
n	pointer
;	O
fixnum	int
*	O
pp	pointer
,	O
*	O
pp1	O
,	O
*	O
ppe	O
,	O
yp	O
;	O
struct	O
typemanager	O
*	O
tm	pointer
;	O
fixnum	int
i	long
,	O
j	int
,	O
e	pointer
[	O
t_end	O
]	O
;	O
struct	O
pageinfo	function
*	O
v	pointer
;	O
massert	function
(	O
pp1	O
=	O
pp	pointer
=	O
alloca	function
(	O
count	int
*	O
sizeof	O
(	O
*	O
pp1	O
)	O
)	O
)	O
;	O
ppe	O
=	O
pp1	O
+	O
count	int
;	O
for	O
(	O
v	pointer
=	O
cell_list_head	pointer
;	O
v	pointer
&&	O
pp	pointer
<	O
ppe	O
;	O
v	pointer
=	O
v	pointer
->	O
next	O
)	O
{	O
if	O
(	O
v	pointer
->	O
type	int
>=	O
t_end	O
||	O
(	O
tm	pointer
=	O
tm_of	function
(	O
v	pointer
->	O
type	int
)	O
)	O
==	O
ntm	pointer
||	O
v	pointer
->	O
in_use	O
)	O
continue	O
;	O
count	int
--	O
;	O
*	O
pp	pointer
++	O
=	O
page	function
(	O
v	pointer
)	O
;	O
}	O
ppe	O
=	O
pp	pointer
;	O
bzero	function
(	O
e	pointer
,	O
sizeof	O
(	O
e	pointer
)	O
)	O
;	O
for	O
(	O
pp	pointer
=	O
pp1	O
;	O
pp	pointer
<	O
ppe	O
;	O
pp	pointer
++	O
)	O
e	pointer
[	O
pagetoinfo	function
(	O
*	O
pp	pointer
)	O
->	O
type	int
]	O
++	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
sizeof	O
(	O
e	pointer
)	O
/	O
sizeof	O
(	O
*	O
e	pointer
)	O
;	O
i	long
++	O
)	O
{	O
if	O
(	O
!	O
e	pointer
[	O
i	long
]	O
)	O
continue	O
;	O
tm	pointer
=	O
tm_of	function
(	O
i	long
)	O
;	O
tm	pointer
->	O
tm_nfree	O
-=	O
(	O
j	int
=	O
tm	pointer
->	O
tm_nppage	O
*	O
e	pointer
[	O
i	long
]	O
)	O
;	O
tm	pointer
->	O
tm_npage	O
-=	O
e	pointer
[	O
i	long
]	O
;	O
set_tm_maxpage	function
(	O
tm	pointer
,	O
tm	pointer
->	O
tm_maxpage	O
-	O
e	pointer
[	O
i	long
]	O
)	O
;	O
set_tm_maxpage	function
(	O
ntm	pointer
,	O
ntm	pointer
->	O
tm_maxpage	O
+	O
e	pointer
[	O
i	long
]	O
)	O
;	O
for	O
(	O
y	pointer
=	O
(	O
void	O
*	O
)	O
&	O
tm	pointer
->	O
tm_free	O
;	O
*	O
y	pointer
!=	O
OBJNULL	O
&&	O
j	int
;	O
)	O
{	O
for	O
(	O
;	O
*	O
y	pointer
!=	O
OBJNULL	O
&&	O
(	O
yp	O
=	O
page	function
(	O
*	O
y	pointer
)	O
)	O
&&	O
!	O
FREE_PAGE_P	O
(	O
yp	O
)	O
;	O
y	pointer
=	O
NEXT_LINK	O
(	O
y	pointer
)	O
)	O
;	O
if	O
(	O
*	O
y	pointer
!=	O
OBJNULL	O
)	O
{	O
for	O
(	O
n	pointer
=	O
NEXT_LINK	O
(	O
y	pointer
)	O
,	O
j	int
--	O
;	O
*	O
n	pointer
!=	O
OBJNULL	O
&&	O
(	O
yp	O
=	O
page	function
(	O
*	O
n	pointer
)	O
)	O
&&	O
FREE_PAGE_P	O
(	O
yp	O
)	O
;	O
n	pointer
=	O
NEXT_LINK	O
(	O
n	pointer
)	O
,	O
j	int
--	O
)	O
;	O
*	O
y	pointer
=	O
*	O
n	pointer
;	O
}	O
}	O
massert	function
(	O
!	O
j	int
)	O
;	O
}	O
for	O
(	O
pp	pointer
=	O
pp1	O
;	O
pp	pointer
<	O
ppe	O
;	O
pp	pointer
++	O
)	O
{	O
struct	O
pageinfo	function
*	O
pn	pointer
=	O
pagetoinfo	function
(	O
*	O
pp	pointer
)	O
->	O
next	O
;	O
add_page_to_freelist	function
(	O
pagetochar	function
(	O
*	O
pp	pointer
)	O
,	O
ntm	pointer
)	O
;	O
pagetoinfo	function
(	O
*	O
pp	pointer
)	O
->	O
next	O
=	O
pn	pointer
;	O
}	O
}	O
int	O
reserve_pages_for_signal_handler	int
=	O
30	int
;	O
inline	O
void	O
*	O
alloc_page	function
(	O
long	O
n	pointer
)	O
{	O
void	O
*	O
e	pointer
=	O
heap_end	O
;	O
fixnum	int
d	int
,	O
m	int
;	O
if	O
(	O
n	pointer
>=	O
0	int
)	O
{	O
if	O
(	O
n	pointer
>	O
(	O
holepage	O
-	O
(	O
in_signal_handler	O
?	O
0	int
:	O
available_pages	O
-	O
n	pointer
<=	O
reserve_pages_for_signal_handler	int
?	O
0	int
:	O
reserve_pages_for_signal_handler	int
)	O
)	O
)	O
{	O
if	O
(	O
in_signal_handler	O
)	O
{	O
fprintf	function
(	O
stderr	O
,	O
"Cant do relocatable gc in signal handler. Try to allocate more space to save for allocation during signals: eg to add 20 more do (si::set-hole-size %ld %d)\n...start over "	pointer
,	O
new_holepage	long
,	O
20	int
+	O
reserve_pages_for_signal_handler	int
)	O
;	O
fflush	function
(	O
stderr	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
d	int
=	O
available_pages	O
-	O
n	pointer
;	O
d	int
*=	O
0.2	int
;	O
d	int
=	O
d	int
<	O
0.01	int
*	O
real_maxpage	O
?	O
available_pages	O
-	O
n	pointer
:	O
d	int
;	O
d	int
=	O
d	int
<	O
0	int
?	O
0	int
:	O
d	int
;	O
d	int
=	O
new_holepage	long
<	O
d	int
?	O
new_holepage	long
:	O
d	int
;	O
holepage	O
=	O
d	int
+	O
n	pointer
;	O
GBC	function
(	O
t_relocatable	O
)	O
;	O
tm_table	O
[	O
t_relocatable	O
]	O
.	O
tm_adjgbccnt	O
--	O
;	O
}	O
holepage	O
-=	O
n	pointer
;	O
if	O
(	O
heap_end	O
==	O
core_end	O
)	O
{	O
sbrk	function
(	O
PAGESIZE	O
*	O
n	pointer
)	O
;	O
core_end	O
+=	O
PAGESIZE	O
*	O
n	pointer
;	O
}	O
heap_end	O
+=	O
PAGESIZE	O
*	O
n	pointer
;	O
return	O
(	O
e	pointer
)	O
;	O
}	O
n	pointer
=	O
-	O
n	pointer
;	O
m	int
=	O
(	O
core_end	O
-	O
heap_end	O
)	O
/	O
PAGESIZE	O
;	O
if	O
(	O
n	pointer
<=	O
m	int
)	O
return	O
(	O
e	pointer
)	O
;	O
IF_ALLOCATE_ERR	O
error	O
(	O
"Can't allocate.  Good-bye!"	pointer
)	O
;	O
core_end	O
+=	O
PAGESIZE	O
*	O
(	O
n	pointer
-	O
m	int
)	O
;	O
return	O
(	O
e	pointer
)	O
;	O
}	O
struct	O
pageinfo	function
*	O
cell_list_head	pointer
=	O
NULL	O
,	O
*	O
cell_list_tail	pointer
=	O
NULL	O
;	O
;	O
inline	O
fixnum	int
set_tm_maxpage	function
(	O
struct	O
typemanager	O
*	O
tm	pointer
,	O
fixnum	int
n	pointer
)	O
{	O
fixnum	int
r	double
=	O
tm	pointer
->	O
tm_type	O
==	O
t_relocatable	O
,	O
j	int
=	O
tm	pointer
->	O
tm_maxpage	O
,	O
z	double
=	O
(	O
n	pointer
-	O
j	int
)	O
*	O
(	O
r	double
?	O
2	int
:	O
1	int
)	O
;	O
if	O
(	O
z	double
>	O
available_pages	O
)	O
return	O
0	int
;	O
if	O
(	O
r	double
&&	O
2	int
*	O
n	pointer
+	O
page	function
(	O
REAL_RB_START	O
)	O
>	O
real_maxpage	O
)	O
return	O
0	int
;	O
available_pages	O
-=	O
z	double
;	O
tm	pointer
->	O
tm_adjgbccnt	O
*=	O
(	O
(	O
double	O
)	O
j	int
)	O
/	O
n	pointer
;	O
tm	pointer
->	O
tm_maxpage	O
=	O
n	pointer
;	O
return	O
n	pointer
;	O
}	O
inline	O
void	O
add_page_to_freelist	function
(	O
char	O
*	O
p	pointer
,	O
struct	O
typemanager	O
*	O
tm	pointer
)	O
{	O
short	O
t	int
,	O
size	short
;	O
long	O
i	long
=	O
tm	pointer
->	O
tm_nppage	O
,	O
fw	long
;	O
object	O
x	double
,	O
f	O
;	O
struct	O
pageinfo	function
*	O
pp	pointer
;	O
t	int
=	O
tm	pointer
->	O
tm_type	O
;	O
size	short
=	O
tm	pointer
->	O
tm_size	O
;	O
f	O
=	O
tm	pointer
->	O
tm_free	O
;	O
pp	pointer
=	O
pageinfo	function
(	O
p	pointer
)	O
;	O
bzero	function
(	O
pp	pointer
,	O
sizeof	O
(	O
*	O
pp	pointer
)	O
)	O
;	O
pp	pointer
->	O
type	int
=	O
t	int
;	O
pp	pointer
->	O
magic	O
=	O
PAGE_MAGIC	O
;	O
if	O
(	O
cell_list_head	pointer
==	O
NULL	O
)	O
cell_list_tail	pointer
=	O
cell_list_head	pointer
=	O
pp	pointer
;	O
else	O
if	O
(	O
pp	pointer
>	O
cell_list_tail	pointer
)	O
{	O
cell_list_tail	pointer
->	O
next	O
=	O
pp	pointer
;	O
cell_list_tail	pointer
=	O
pp	pointer
;	O
}	O
x	double
=	O
(	O
object	O
)	O
pagetochar	function
(	O
page	function
(	O
p	pointer
)	O
)	O
;	O
make_free	function
(	O
x	double
)	O
;	O
fw	long
=	O
*	O
(	O
fixnum	int
*	O
)	O
x	double
;	O
while	O
(	O
--	O
i	long
>=	O
0	int
)	O
{	O
*	O
(	O
fixnum	int
*	O
)	O
x	double
=	O
fw	long
;	O
SET_LINK	function
(	O
x	double
,	O
f	O
)	O
;	O
f	O
=	O
x	double
;	O
x	double
=	O
(	O
object	O
)	O
(	O
(	O
char	O
*	O
)	O
x	double
+	O
size	short
)	O
;	O
}	O
tm	pointer
->	O
tm_free	O
=	O
f	O
;	O
tm	pointer
->	O
tm_nfree	O
+=	O
tm	pointer
->	O
tm_nppage	O
;	O
tm	pointer
->	O
tm_npage	O
++	O
;	O
}	O
object	O
type_name	function
(	O
int	O
t	int
)	O
{	O
return	O
make_simple_string	function
(	O
tm_table	O
[	O
(	O
int	O
)	O
t	int
]	O
.	O
tm_name	O
+	O
1	int
)	O
;	O
}	O
static	O
void	O
call_after_gbc_hook	function
(	O
t	int
)	O
{	O
if	O
(	O
sSAafter_gbc_hookA	O
&&	O
sSAafter_gbc_hookA	O
->	O
s	int
.	O
s_dbind	O
!=	O
Cnil	O
)	O
{	O
set_up_string_register	function
(	O
tm_table	O
[	O
(	O
int	O
)	O
t	int
]	O
.	O
tm_name	O
+	O
1	int
)	O
;	O
ifuncall1	function
(	O
sSAafter_gbc_hookA	O
->	O
s	int
.	O
s_dbind	O
,	O
intern	function
(	O
string_register	O
,	O
system_package	O
)	O
)	O
;	O
}	O
}	O
static	O
fixnum	int
grow_linear	function
(	O
fixnum	int
old	int
,	O
fixnum	int
fract	int
,	O
fixnum	int
grow_min	int
,	O
fixnum	int
grow_max	int
,	O
fixnum	int
max_delt	int
)	O
{	O
fixnum	int
delt	O
;	O
delt	O
=	O
(	O
old	int
*	O
(	O
fract	int
?	O
fract	int
:	O
50	int
)	O
)	O
/	O
100	int
;	O
delt	O
=	O
(	O
grow_min	int
&&	O
delt	O
<	O
grow_min	int
?	O
grow_min	int
:	O
grow_max	int
&&	O
delt	O
>	O
grow_max	int
?	O
grow_max	int
:	O
delt	O
)	O
;	O
delt	O
=	O
delt	O
>	O
max_delt	int
?	O
max_delt	int
:	O
delt	O
;	O
return	O
old	int
+	O
delt	O
;	O
}	O
DEFVAR	function
(	O
"*OPTIMIZE-MAXIMUM-PAGES*"	pointer
,	O
sSAoptimize_maximum_pagesA	O
,	O
SI	O
,	O
sLnil	O
,	O
""	pointer
)	O
;	O
DEFVAR	function
(	O
"*NOTIFY-OPTIMIZE-MAXIMUM-PAGES*"	pointer
,	O
sSAnotify_optimize_maximum_pagesA	O
,	O
SI	O
,	O
sLnil	O
,	O
""	pointer
)	O
;	O
inline	O
long	O
opt_maxpage	function
(	O
struct	O
typemanager	O
*	O
my_tm	pointer
)	O
{	O
double	O
x	double
=	O
0.0	int
,	O
y	pointer
=	O
0.0	int
,	O
z	double
,	O
r	double
;	O
long	O
mmax_page	long
;	O
struct	O
typemanager	O
*	O
tm	pointer
,	O
*	O
tme	pointer
;	O
long	O
mro	long
=	O
0	int
,	O
tro	long
=	O
0	int
;	O
if	O
(	O
phys_pages	O
>	O
0	int
&&	O
page	function
(	O
heap_end	O
)	O
-	O
first_data_page	O
+	O
nrbpage	O
>=	O
phys_pages	O
)	O
return	O
0	int
;	O
if	O
(	O
page	function
(	O
core_end	O
)	O
>	O
0.8	int
*	O
real_maxpage	O
)	O
return	O
0	int
;	O
for	O
(	O
tm	pointer
=	O
tm_table	O
,	O
tme	pointer
=	O
tm	pointer
+	O
sizeof	O
(	O
tm_table	O
)	O
/	O
sizeof	O
(	O
*	O
tm_table	O
)	O
;	O
tm	pointer
<	O
tme	pointer
;	O
tm	pointer
++	O
)	O
{	O
x	double
+=	O
tm	pointer
->	O
tm_adjgbccnt	O
;	O
y	pointer
+=	O
MMAX_PG	O
(	O
tm	pointer
)	O
;	O
}	O
mmax_page	long
=	O
MMAX_PG	O
(	O
my_tm	pointer
)	O
;	O
z	double
=	O
my_tm	pointer
->	O
tm_adjgbccnt	O
-	O
1	int
;	O
z	double
/=	O
(	O
1	int
+	O
x	double
-	O
0.9	int
*	O
my_tm	pointer
->	O
tm_adjgbccnt	O
)	O
;	O
z	double
*=	O
(	O
y	pointer
-	O
mmax_page	long
)	O
*	O
mmax_page	long
;	O
z	double
=	O
sqrt	O
(	O
z	double
)	O
;	O
z	double
=	O
z	double
-	O
mmax_page	long
>	O
available_pages	O
?	O
mmax_page	long
+	O
available_pages	O
:	O
z	double
;	O
my_tm	pointer
->	O
tm_opt_maxpage	O
=	O
(	O
long	O
)	O
z	double
>	O
my_tm	pointer
->	O
tm_opt_maxpage	O
?	O
(	O
long	O
)	O
z	double
:	O
my_tm	pointer
->	O
tm_opt_maxpage	O
;	O
if	O
(	O
z	double
<=	O
mmax_page	long
)	O
return	O
0	int
;	O
r	double
=	O
(	O
(	O
x	double
-	O
my_tm	pointer
->	O
tm_adjgbccnt	O
)	O
+	O
my_tm	pointer
->	O
tm_adjgbccnt	O
*	O
mmax_page	long
/	O
z	double
)	O
*	O
(	O
y	pointer
-	O
mmax_page	long
+	O
z	double
)	O
;	O
r	double
/=	O
x	double
*	O
y	pointer
;	O
if	O
(	O
sSAnotify_optimize_maximum_pagesA	O
->	O
s	int
.	O
s_dbind	O
!=	O
sLnil	O
)	O
printf	O
(	O
"[type %u max %lu(%lu) opt %lu   y %lu(%lu) gbcrat %f sav %f]\n"	pointer
,	O
my_tm	pointer
->	O
tm_type	O
,	O
mmax_page	long
,	O
mro	long
,	O
(	O
long	O
)	O
z	double
,	O
(	O
long	O
)	O
y	pointer
,	O
tro	long
,	O
(	O
my_tm	pointer
->	O
tm_adjgbccnt	O
-	O
1	int
)	O
/	O
(	O
1	int
+	O
x	double
-	O
0.9	int
*	O
my_tm	pointer
->	O
tm_adjgbccnt	O
)	O
,	O
r	double
)	O
;	O
return	O
r	double
<=	O
0.95	int
&&	O
set_tm_maxpage	function
(	O
my_tm	pointer
,	O
z	double
+	O
mro	long
)	O
?	O
1	int
:	O
0	int
;	O
}	O
static	O
object	O
exhausted_report	function
(	O
enum	O
type	int
t	int
,	O
struct	O
typemanager	O
*	O
tm	pointer
)	O
{	O
available_pages	O
+=	O
resv_pages	long
;	O
resv_pages	long
=	O
0	int
;	O
vs_push	function
(	O
type_name	function
(	O
t	int
)	O
)	O
;	O
vs_push	function
(	O
make_fixnum	function
(	O
tm	pointer
->	O
tm_npage	O
)	O
)	O
;	O
CEerror	function
(	O
"The storage for ~A is exhausted.~%Currently, ~D pages are allocated.~%	     Use ALLOCATE to expand the space."	pointer
,	O
"Continues execution."	pointer
,	O
2	int
,	O
vs_top	O
[	O
-	O
2	int
]	O
,	O
vs_top	O
[	O
-	O
1	int
]	O
,	O
Cnil	O
,	O
Cnil	O
)	O
;	O
vs_popp	O
;	O
vs_popp	O
;	O
call_after_gbc_hook	function
(	O
t	int
)	O
;	O
return	O
alloc_object	function
(	O
t	int
)	O
;	O
}	O
bool	O
prefer_low_mem_contblock	int
=	O
FALSE	O
;	O
inline	O
void	O
*	O
alloc_from_freelist	function
(	O
struct	O
typemanager	O
*	O
tm	pointer
,	O
fixnum	int
n	pointer
)	O
{	O
void	O
*	O
p	pointer
,	O
*	O
v	pointer
,	O
*	O
vp	pointer
;	O
struct	O
contblock	O
*	O
*	O
cbpp	pointer
;	O
fixnum	int
i	long
;	O
switch	O
(	O
tm	pointer
->	O
tm_type	O
)	O
{	O
case	O
t_contiguous	O
:	O
for	O
(	O
cbpp	pointer
=	O
&	O
cb_pointer	O
,	O
v	pointer
=	O
(	O
void	O
*	O
)	O
-	O
1	int
,	O
vp	pointer
=	O
NULL	O
;	O
(	O
*	O
cbpp	pointer
)	O
!=	O
NULL	O
;	O
cbpp	pointer
=	O
&	O
(	O
*	O
cbpp	pointer
)	O
->	O
cb_link	O
)	O
if	O
(	O
(	O
*	O
cbpp	pointer
)	O
->	O
cb_size	O
>=	O
n	pointer
)	O
{	O
if	O
(	O
!	O
prefer_low_mem_contblock	int
)	O
{	O
vp	pointer
=	O
cbpp	pointer
;	O
break	O
;	O
}	O
else	O
if	O
(	O
(	O
void	O
*	O
)	O
(	O
*	O
cbpp	pointer
)	O
<	O
v	pointer
)	O
{	O
v	pointer
=	O
*	O
cbpp	pointer
;	O
vp	pointer
=	O
cbpp	pointer
;	O
}	O
}	O
if	O
(	O
vp	pointer
)	O
{	O
cbpp	pointer
=	O
vp	pointer
;	O
p	pointer
=	O
(	O
void	O
*	O
)	O
(	O
*	O
cbpp	pointer
)	O
;	O
i	long
=	O
(	O
*	O
cbpp	pointer
)	O
->	O
cb_size	O
-	O
n	pointer
;	O
*	O
cbpp	pointer
=	O
(	O
*	O
cbpp	pointer
)	O
->	O
cb_link	O
;	O
--	O
ncb	O
;	O
insert_contblock	function
(	O
p	pointer
+	O
n	pointer
,	O
i	long
)	O
;	O
return	O
(	O
p	pointer
)	O
;	O
}	O
break	O
;	O
case	O
t_relocatable	O
:	O
if	O
(	O
rb_limit	O
-	O
rb_pointer	O
>=	O
n	pointer
)	O
return	O
(	O
(	O
rb_pointer	O
+=	O
n	pointer
)	O
-	O
n	pointer
)	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
(	O
p	pointer
=	O
tm	pointer
->	O
tm_free	O
)	O
!=	O
OBJNULL	O
)	O
{	O
tm	pointer
->	O
tm_free	O
=	O
OBJ_LINK	function
(	O
p	pointer
)	O
;	O
tm	pointer
->	O
tm_nfree	O
--	O
;	O
return	O
(	O
p	pointer
)	O
;	O
}	O
break	O
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
inline	O
void	O
grow_linear1	function
(	O
struct	O
typemanager	O
*	O
tm	pointer
)	O
{	O
fixnum	int
maxgro	O
=	O
resv_pages	long
?	O
available_pages	O
:	O
0	int
;	O
if	O
(	O
tm	pointer
->	O
tm_type	O
==	O
t_relocatable	O
)	O
maxgro	O
>>=	O
1	int
;	O
set_tm_maxpage	function
(	O
tm	pointer
,	O
grow_linear	function
(	O
tm	pointer
->	O
tm_npage	O
,	O
tm	pointer
->	O
tm_growth_percent	O
,	O
tm	pointer
->	O
tm_min_grow	O
,	O
tm	pointer
->	O
tm_max_grow	O
,	O
maxgro	O
)	O
)	O
;	O
}	O
static	O
inline	O
int	O
too_full_p	function
(	O
struct	O
typemanager	O
*	O
tm	pointer
)	O
{	O
fixnum	int
j	int
,	O
k	O
,	O
pf	O
=	O
tm	pointer
->	O
tm_percent_free	O
?	O
tm	pointer
->	O
tm_percent_free	O
:	O
30	int
;	O
struct	O
contblock	O
*	O
cbp	pointer
;	O
struct	O
pageinfo	function
*	O
pi	pointer
;	O
switch	O
(	O
tm	pointer
->	O
tm_type	O
)	O
{	O
case	O
t_relocatable	O
:	O
return	O
100	int
*	O
(	O
rb_limit	O
-	O
rb_pointer	O
)	O
<	O
pf	O
*	O
(	O
rb_limit	O
-	O
rb_start	O
)	O
;	O
break	O
;	O
case	O
t_contiguous	O
:	O
for	O
(	O
cbp	pointer
=	O
cb_pointer	O
,	O
k	O
=	O
0	int
;	O
cbp	pointer
;	O
cbp	pointer
=	O
cbp	pointer
->	O
cb_link	O
)	O
k	O
+=	O
cbp	pointer
->	O
cb_size	O
;	O
for	O
(	O
pi	pointer
=	O
contblock_list_head	pointer
,	O
j	int
=	O
0	int
;	O
pi	pointer
;	O
pi	pointer
=	O
pi	pointer
->	O
next	O
)	O
j	int
+=	O
pi	pointer
->	O
in_use	O
;	O
return	O
100	int
*	O
k	O
<	O
pf	O
*	O
j	int
*	O
PAGESIZE	O
;	O
break	O
;	O
default	O
:	O
return	O
100	int
*	O
tm	pointer
->	O
tm_nfree	O
<	O
pf	O
*	O
TOTAL_THIS_TYPE	O
(	O
tm	pointer
)	O
;	O
break	O
;	O
}	O
}	O
inline	O
void	O
*	O
alloc_after_gc	function
(	O
struct	O
typemanager	O
*	O
tm	pointer
,	O
fixnum	int
n	pointer
)	O
{	O
if	O
(	O
tm	pointer
->	O
tm_npage	O
+	O
tpage	function
(	O
tm	pointer
,	O
n	pointer
)	O
>=	O
tm	pointer
->	O
tm_maxpage	O
&&	O
GBC_enable	O
)	O
{	O
switch	O
(	O
jmp_gmp	O
)	O
{	O
case	O
0	int
:	O
GBC	function
(	O
tm	pointer
->	O
tm_type	O
)	O
;	O
break	O
;	O
case	O
1	int
:	O
longjmp	function
(	O
gmp_jmp	O
,	O
tm	pointer
->	O
tm_type	O
)	O
;	O
break	O
;	O
case	O
-	O
1	int
:	O
jmp_gmp	O
=	O
-	O
tm	pointer
->	O
tm_type	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
if	O
(	O
IGNORE_MAX_PAGES	O
&&	O
too_full_p	function
(	O
tm	pointer
)	O
)	O
grow_linear1	function
(	O
tm	pointer
)	O
;	O
call_after_gbc_hook	function
(	O
tm	pointer
->	O
tm_type	O
)	O
;	O
return	O
alloc_from_freelist	function
(	O
tm	pointer
,	O
n	pointer
)	O
;	O
}	O
else	O
return	O
NULL	O
;	O
}	O
struct	O
pageinfo	function
*	O
contblock_list_head	pointer
=	O
NULL	O
,	O
*	O
contblock_list_tail	pointer
=	O
NULL	O
;	O
inline	O
void	O
add_pages	function
(	O
struct	O
typemanager	O
*	O
tm	pointer
,	O
fixnum	int
m	int
)	O
{	O
switch	O
(	O
tm	pointer
->	O
tm_type	O
)	O
{	O
case	O
t_contiguous	O
:	O
add_page_to_contblock_list	function
(	O
alloc_page	function
(	O
m	int
)	O
,	O
m	int
)	O
;	O
break	O
;	O
case	O
t_relocatable	O
:	O
nrbpage	O
+=	O
m	int
;	O
rb_end	O
=	O
heap_end	O
+	O
(	O
holepage	O
+	O
nrbpage	O
)	O
*	O
PAGESIZE	O
;	O
rb_limit	O
=	O
rb_end	O
-	O
2	int
*	O
RB_GETA	O
;	O
alloc_page	function
(	O
-	O
(	O
nrbpage	O
+	O
holepage	O
)	O
)	O
;	O
break	O
;	O
default	O
:	O
{	O
void	O
*	O
p	pointer
=	O
alloc_page	function
(	O
m	int
)	O
,	O
*	O
pe	pointer
=	O
p	pointer
+	O
m	int
*	O
PAGESIZE	O
;	O
for	O
(	O
;	O
p	pointer
<	O
pe	pointer
;	O
p	pointer
+=	O
PAGESIZE	O
)	O
add_page_to_freelist	function
(	O
p	pointer
,	O
tm	pointer
)	O
;	O
}	O
break	O
;	O
}	O
}	O
inline	O
void	O
*	O
alloc_after_adding_pages	function
(	O
struct	O
typemanager	O
*	O
tm	pointer
,	O
fixnum	int
n	pointer
)	O
{	O
fixnum	int
m	int
=	O
tpage	function
(	O
tm	pointer
,	O
n	pointer
)	O
;	O
if	O
(	O
tm	pointer
->	O
tm_npage	O
+	O
m	int
>	O
tm	pointer
->	O
tm_maxpage	O
)	O
{	O
if	O
(	O
!	O
IGNORE_MAX_PAGES	O
)	O
return	O
NULL	O
;	O
grow_linear1	function
(	O
tm	pointer
)	O
;	O
if	O
(	O
tm	pointer
->	O
tm_npage	O
+	O
m	int
>	O
tm	pointer
->	O
tm_maxpage	O
&&	O
!	O
set_tm_maxpage	function
(	O
tm	pointer
,	O
tm	pointer
->	O
tm_npage	O
+	O
m	int
)	O
)	O
return	O
NULL	O
;	O
}	O
m	int
=	O
tm	pointer
->	O
tm_maxpage	O
-	O
tm	pointer
->	O
tm_npage	O
;	O
add_pages	function
(	O
tm	pointer
,	O
m	int
)	O
;	O
return	O
alloc_from_freelist	function
(	O
tm	pointer
,	O
n	pointer
)	O
;	O
}	O
inline	O
void	O
*	O
alloc_after_reclaiming_pages	function
(	O
struct	O
typemanager	O
*	O
tm	pointer
,	O
fixnum	int
n	pointer
)	O
{	O
fixnum	int
m	int
=	O
tpage	function
(	O
tm	pointer
,	O
n	pointer
)	O
,	O
reloc_min	O
;	O
if	O
(	O
tm	pointer
->	O
tm_type	O
>=	O
t_end	O
)	O
return	O
NULL	O
;	O
reloc_min	O
=	O
npage	function
(	O
rb_pointer	O
-	O
REAL_RB_START	O
)	O
;	O
if	O
(	O
m	int
<	O
2	int
*	O
(	O
nrbpage	O
-	O
reloc_min	O
)	O
)	O
{	O
set_tm_maxpage	function
(	O
tm_table	O
+	O
t_relocatable	O
,	O
reloc_min	O
)	O
;	O
nrbpage	O
=	O
reloc_min	O
;	O
GBC	function
(	O
t_relocatable	O
)	O
;	O
tm_table	O
[	O
t_relocatable	O
]	O
.	O
tm_adjgbccnt	O
--	O
;	O
return	O
alloc_after_adding_pages	function
(	O
tm	pointer
,	O
n	pointer
)	O
;	O
}	O
maybe_reallocate_page	function
(	O
tm	pointer
,	O
tm	pointer
->	O
tm_percent_free	O
*	O
tm	pointer
->	O
tm_npage	O
)	O
;	O
return	O
alloc_from_freelist	function
(	O
tm	pointer
,	O
n	pointer
)	O
;	O
}	O
inline	O
void	O
*	O
alloc_mem	function
(	O
struct	O
typemanager	O
*	O
,	O
fixnum	int
)	O
;	O
inline	O
void	O
*	O
alloc_mem	function
(	O
struct	O
typemanager	O
*	O
tm	pointer
,	O
fixnum	int
n	pointer
)	O
{	O
void	O
*	O
p	pointer
;	O
CHECK_INTERRUPT	O
;	O
if	O
(	O
(	O
p	pointer
=	O
alloc_from_freelist	function
(	O
tm	pointer
,	O
n	pointer
)	O
)	O
)	O
return	O
p	pointer
;	O
if	O
(	O
(	O
p	pointer
=	O
alloc_after_gc	function
(	O
tm	pointer
,	O
n	pointer
)	O
)	O
)	O
return	O
p	pointer
;	O
if	O
(	O
(	O
p	pointer
=	O
alloc_after_adding_pages	function
(	O
tm	pointer
,	O
n	pointer
)	O
)	O
)	O
return	O
p	pointer
;	O
if	O
(	O
(	O
p	pointer
=	O
alloc_after_reclaiming_pages	function
(	O
tm	pointer
,	O
n	pointer
)	O
)	O
)	O
return	O
p	pointer
;	O
return	O
exhausted_report	function
(	O
tm	pointer
->	O
tm_type	O
,	O
tm	pointer
)	O
;	O
}	O
inline	O
object	O
alloc_object	function
(	O
enum	O
type	int
t	int
)	O
{	O
object	O
obj	O
;	O
struct	O
typemanager	O
*	O
tm	pointer
=	O
tm_of	function
(	O
t	int
)	O
;	O
obj	O
=	O
alloc_mem	function
(	O
tm	pointer
,	O
tm	pointer
->	O
tm_size	O
)	O
;	O
set_type_of	function
(	O
obj	O
,	O
t	int
)	O
;	O
pageinfo	function
(	O
obj	O
)	O
->	O
in_use	O
++	O
;	O
return	O
(	O
obj	O
)	O
;	O
}	O
inline	O
void	O
*	O
alloc_contblock	function
(	O
size_t	long
n	pointer
)	O
{	O
return	O
alloc_mem	function
(	O
tm_of	function
(	O
t_contiguous	O
)	O
,	O
ROUND_UP_PTR_CONT	function
(	O
n	pointer
)	O
)	O
;	O
}	O
inline	O
void	O
*	O
alloc_relblock	function
(	O
size_t	long
n	pointer
)	O
{	O
return	O
alloc_mem	function
(	O
tm_of	function
(	O
t_relocatable	O
)	O
,	O
ROUND_UP_PTR	function
(	O
n	pointer
)	O
)	O
;	O
}	O
static	O
inline	O
void	O
load_cons	function
(	O
object	O
p	pointer
,	O
object	O
a	int
,	O
object	O
d	int
)	O
{	O
p	pointer
->	O
c	O
.	O
c_cdr	O
=	O
SAFE_CDR	function
(	O
d	int
)	O
;	O
p	pointer
->	O
c	O
.	O
c_car	O
=	O
a	int
;	O
}	O
inline	O
object	O
make_cons	function
(	O
object	O
a	int
,	O
object	O
d	int
)	O
{	O
static	O
struct	O
typemanager	O
*	O
tm	pointer
=	O
tm_table	O
+	O
t_cons	O
;	O
object	O
obj	O
=	O
alloc_mem	function
(	O
tm	pointer
,	O
tm	pointer
->	O
tm_size	O
)	O
;	O
load_cons	function
(	O
obj	O
,	O
a	int
,	O
d	int
)	O
;	O
pageinfo	function
(	O
obj	O
)	O
->	O
in_use	O
++	O
;	O
return	O
(	O
obj	O
)	O
;	O
}	O
inline	O
object	O
on_stack_cons	function
(	O
object	O
x	double
,	O
object	O
y	pointer
)	O
{	O
object	O
p	pointer
=	O
(	O
object	O
)	O
alloca_val	O
;	O
load_cons	function
(	O
p	pointer
,	O
x	double
,	O
y	pointer
)	O
;	O
return	O
p	pointer
;	O
}	O
DEFUNM_NEW	function
(	O
"ALLOCATED"	pointer
,	O
object	O
,	O
fSallocated	O
,	O
SI	O
,	O
1	int
,	O
1	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
object	O
typ	O
)	O
,	O
""	pointer
)	O
{	O
struct	O
typemanager	O
*	O
tm	pointer
=	O
(	O
&	O
tm_table	O
[	O
t_from_type	function
(	O
typ	O
)	O
]	O
)	O
;	O
tm	pointer
=	O
&	O
tm_table	O
[	O
tm	pointer
->	O
tm_type	O
]	O
;	O
if	O
(	O
tm	pointer
->	O
tm_type	O
==	O
t_relocatable	O
)	O
{	O
tm	pointer
->	O
tm_npage	O
=	O
(	O
rb_end	O
-	O
rb_start	O
)	O
/	O
PAGESIZE	O
;	O
tm	pointer
->	O
tm_nfree	O
=	O
rb_end	O
-	O
rb_pointer	O
;	O
}	O
else	O
if	O
(	O
tm	pointer
->	O
tm_type	O
==	O
t_contiguous	O
)	O
{	O
int	O
cbfree	int
=	O
0	int
;	O
struct	O
contblock	O
*	O
*	O
cbpp	pointer
;	O
for	O
(	O
cbpp	pointer
=	O
&	O
cb_pointer	O
;	O
(	O
*	O
cbpp	pointer
)	O
!=	O
NULL	O
;	O
cbpp	pointer
=	O
&	O
(	O
*	O
cbpp	pointer
)	O
->	O
cb_link	O
)	O
cbfree	int
+=	O
(	O
*	O
cbpp	pointer
)	O
->	O
cb_size	O
;	O
tm	pointer
->	O
tm_nfree	O
=	O
cbfree	int
;	O
}	O
RETURN	function
(	O
6	int
,	O
object	O
,	O
make_fixnum	function
(	O
tm	pointer
->	O
tm_nfree	O
)	O
,	O
(	O
RV	function
(	O
make_fixnum	function
(	O
tm	pointer
->	O
tm_npage	O
)	O
)	O
,	O
RV	function
(	O
make_fixnum	function
(	O
tm	pointer
->	O
tm_maxpage	O
)	O
)	O
,	O
RV	function
(	O
make_fixnum	function
(	O
tm	pointer
->	O
tm_nppage	O
)	O
)	O
,	O
RV	function
(	O
make_fixnum	function
(	O
tm	pointer
->	O
tm_gbccount	O
)	O
)	O
,	O
RV	function
(	O
make_fixnum	function
(	O
tm	pointer
->	O
tm_npage	O
*	O
tm	pointer
->	O
tm_nppage	O
-	O
tm	pointer
->	O
tm_nfree	O
)	O
)	O
)	O
)	O
;	O
}	O
DEFUN_NEW	function
(	O
"PRINT-FREE-CONTBLOCK-LIST"	pointer
,	O
object	O
,	O
fSprint_free_contblock_list	O
,	O
SI	O
,	O
0	int
,	O
0	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
void	O
)	O
,	O
""	pointer
)	O
{	O
struct	O
contblock	O
*	O
cbp	pointer
,	O
*	O
cbp1	pointer
;	O
for	O
(	O
cbp	pointer
=	O
cb_pointer	O
;	O
cbp	pointer
;	O
cbp	pointer
=	O
cbp	pointer
->	O
cb_link	O
)	O
{	O
printf	O
(	O
"%p %d\n"	pointer
,	O
cbp	pointer
,	O
cbp	pointer
->	O
cb_size	O
)	O
;	O
for	O
(	O
cbp1	pointer
=	O
cbp	pointer
;	O
cbp1	pointer
;	O
cbp1	pointer
=	O
cbp1	pointer
->	O
cb_link	O
)	O
if	O
(	O
(	O
void	O
*	O
)	O
cbp	pointer
+	O
cbp	pointer
->	O
cb_size	O
==	O
(	O
void	O
*	O
)	O
cbp1	pointer
||	O
(	O
void	O
*	O
)	O
cbp1	pointer
+	O
cbp1	pointer
->	O
cb_size	O
==	O
(	O
void	O
*	O
)	O
cbp	pointer
)	O
printf	O
(	O
"  adjacent to %p %d\n"	pointer
,	O
cbp1	pointer
,	O
cbp1	pointer
->	O
cb_size	O
)	O
;	O
}	O
return	O
Cnil	O
;	O
}	O
void	O
insert_contblock	function
(	O
char	O
*	O
p	pointer
,	O
int	O
s	int
)	O
{	O
struct	O
contblock	O
*	O
*	O
cbpp	pointer
,	O
*	O
cbp	pointer
;	O
if	O
(	O
s	int
<=	O
0	int
)	O
return	O
;	O
ncb	O
++	O
;	O
cbp	pointer
=	O
(	O
struct	O
contblock	O
*	O
)	O
p	pointer
;	O
cbp	pointer
->	O
cb_size	O
=	O
ROUND_UP_PTR_CONT	function
(	O
s	int
)	O
;	O
for	O
(	O
cbpp	pointer
=	O
&	O
cb_pointer	O
;	O
*	O
cbpp	pointer
;	O
)	O
{	O
if	O
(	O
(	O
void	O
*	O
)	O
(	O
*	O
cbpp	pointer
)	O
+	O
(	O
*	O
cbpp	pointer
)	O
->	O
cb_size	O
==	O
(	O
void	O
*	O
)	O
cbp	pointer
)	O
{	O
(	O
*	O
cbpp	pointer
)	O
->	O
cb_size	O
+=	O
cbp	pointer
->	O
cb_size	O
;	O
cbp	pointer
=	O
*	O
cbpp	pointer
;	O
*	O
cbpp	pointer
=	O
(	O
*	O
cbpp	pointer
)	O
->	O
cb_link	O
;	O
}	O
else	O
if	O
(	O
(	O
void	O
*	O
)	O
(	O
*	O
cbpp	pointer
)	O
==	O
(	O
void	O
*	O
)	O
cbp	pointer
+	O
cbp	pointer
->	O
cb_size	O
)	O
{	O
cbp	pointer
->	O
cb_size	O
+=	O
(	O
*	O
cbpp	pointer
)	O
->	O
cb_size	O
;	O
*	O
cbpp	pointer
=	O
(	O
*	O
cbpp	pointer
)	O
->	O
cb_link	O
;	O
}	O
else	O
cbpp	pointer
=	O
&	O
(	O
*	O
cbpp	pointer
)	O
->	O
cb_link	O
;	O
}	O
s	int
=	O
cbp	pointer
->	O
cb_size	O
;	O
for	O
(	O
cbpp	pointer
=	O
&	O
cb_pointer	O
;	O
*	O
cbpp	pointer
;	O
cbpp	pointer
=	O
&	O
(	O
(	O
*	O
cbpp	pointer
)	O
->	O
cb_link	O
)	O
)	O
if	O
(	O
(	O
*	O
cbpp	pointer
)	O
->	O
cb_size	O
>=	O
s	int
)	O
{	O
cbp	pointer
->	O
cb_link	O
=	O
*	O
cbpp	pointer
;	O
*	O
cbpp	pointer
=	O
cbp	pointer
;	O
return	O
;	O
}	O
cbp	pointer
->	O
cb_link	O
=	O
NULL	O
;	O
*	O
cbpp	pointer
=	O
cbp	pointer
;	O
}	O
static	O
void	O
init_tm	function
(	O
enum	O
type	int
t	int
,	O
char	O
*	O
name	pointer
,	O
int	O
elsize	int
,	O
int	O
nelts	int
,	O
int	O
sgc	int
,	O
int	O
distinct	int
)	O
{	O
int	O
i	long
,	O
j	int
;	O
int	O
maxpage	int
;	O
maxpage	int
=	O
(	O
(	O
(	O
nelts	int
*	O
elsize	int
)	O
+	O
PAGESIZE	O
-	O
1	int
)	O
/	O
PAGESIZE	O
)	O
;	O
tm_table	O
[	O
(	O
int	O
)	O
t	int
]	O
.	O
tm_name	O
=	O
name	pointer
;	O
j	int
=	O
-	O
1	int
;	O
if	O
(	O
!	O
distinct	int
)	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
t_end	O
;	O
i	long
++	O
)	O
if	O
(	O
tm_table	O
[	O
i	long
]	O
.	O
tm_size	O
!=	O
0	int
&&	O
tm_table	O
[	O
i	long
]	O
.	O
tm_size	O
>=	O
elsize	int
&&	O
!	O
tm_table	O
[	O
i	long
]	O
.	O
tm_distinct	O
&&	O
(	O
j	int
<	O
0	int
||	O
tm_table	O
[	O
j	int
]	O
.	O
tm_size	O
>	O
tm_table	O
[	O
i	long
]	O
.	O
tm_size	O
)	O
)	O
j	int
=	O
i	long
;	O
if	O
(	O
j	int
>=	O
0	int
)	O
{	O
tm_table	O
[	O
(	O
int	O
)	O
t	int
]	O
.	O
tm_type	O
=	O
(	O
enum	O
type	int
)	O
j	int
;	O
set_tm_maxpage	function
(	O
tm_table	O
+	O
j	int
,	O
tm_table	O
[	O
j	int
]	O
.	O
tm_maxpage	O
+	O
maxpage	int
)	O
;	O
return	O
;	O
}	O
tm_table	O
[	O
(	O
int	O
)	O
t	int
]	O
.	O
tm_type	O
=	O
t	int
;	O
tm_table	O
[	O
(	O
int	O
)	O
t	int
]	O
.	O
tm_size	O
=	O
elsize	int
?	O
ROUND_UP_PTR	function
(	O
elsize	int
)	O
:	O
1	int
;	O
tm_table	O
[	O
(	O
int	O
)	O
t	int
]	O
.	O
tm_nppage	O
=	O
(	O
PAGESIZE	O
-	O
sizeof	O
(	O
struct	O
pageinfo	function
)	O
)	O
/	O
tm_table	O
[	O
(	O
int	O
)	O
t	int
]	O
.	O
tm_size	O
;	O
tm_table	O
[	O
(	O
int	O
)	O
t	int
]	O
.	O
tm_free	O
=	O
OBJNULL	O
;	O
tm_table	O
[	O
(	O
int	O
)	O
t	int
]	O
.	O
tm_nfree	O
=	O
0	int
;	O
set_tm_maxpage	function
(	O
tm_table	O
+	O
t	int
,	O
maxpage	int
)	O
;	O
tm_table	O
[	O
(	O
int	O
)	O
t	int
]	O
.	O
tm_gbccount	O
=	O
0	int
;	O
tm_table	O
[	O
(	O
int	O
)	O
t	int
]	O
.	O
tm_adjgbccnt	O
=	O
0	int
;	O
tm_table	O
[	O
(	O
int	O
)	O
t	int
]	O
.	O
tm_opt_maxpage	O
=	O
0	int
;	O
tm_table	O
[	O
(	O
int	O
)	O
t	int
]	O
.	O
tm_distinct	O
=	O
distinct	int
;	O
}	O
static	O
int	O
gcl_alloc_initialized	int
;	O
object	O
malloc_list	int
=	O
Cnil	O
;	O
void	O
gcl_init_alloc	function
(	O
void	O
*	O
cs_start	pointer
)	O
{	O
fixnum	int
cssize	O
=	O
(	O
1L	int
<<	O
23	int
)	O
;	O
prelink_init	function
(	O
)	O
;	O
cs_org	O
=	O
cs_base	O
=	O
cs_start	pointer
;	O
cs_limit	O
=	O
cs_org	O
+	O
CSTACK_DIRECTION	O
*	O
cssize	O
;	O
install_segmentation_catcher	function
(	O
)	O
;	O
update_real_maxpage	function
(	O
)	O
;	O
if	O
(	O
gcl_alloc_initialized	int
)	O
return	O
;	O
data_start	O
=	O
heap_end	O
;	O
first_data_page	O
=	O
page	function
(	O
data_start	O
)	O
;	O
holepage	O
=	O
new_holepage	long
;	O
init_tm	function
(	O
t_cons	O
,	O
".CONS"	pointer
,	O
sizeof	O
(	O
struct	O
cons	O
)	O
,	O
65536	int
,	O
50	int
,	O
0	int
)	O
;	O
init_tm	function
(	O
t_fixnum	O
,	O
"NFIXNUM"	pointer
,	O
sizeof	O
(	O
struct	O
fixnum_struct	O
)	O
,	O
8192	int
,	O
20	int
,	O
0	int
)	O
;	O
init_tm	function
(	O
t_structure	O
,	O
"SSTRUCTURE"	pointer
,	O
sizeof	O
(	O
struct	O
structure	O
)	O
,	O
5461	int
,	O
1	int
,	O
0	int
)	O
;	O
init_tm	function
(	O
t_cfun	O
,	O
"fCFUN"	pointer
,	O
sizeof	O
(	O
struct	O
cfun	O
)	O
,	O
4096	int
,	O
1	int
,	O
0	int
)	O
;	O
init_tm	function
(	O
t_sfun	O
,	O
"gSFUN"	pointer
,	O
sizeof	O
(	O
struct	O
sfun	O
)	O
,	O
409	int
,	O
1	int
,	O
0	int
)	O
;	O
init_tm	function
(	O
t_string	O
,	O
"\"STRING"	pointer
,	O
sizeof	O
(	O
struct	O
string	O
)	O
,	O
5461	int
,	O
1	int
,	O
0	int
)	O
;	O
init_tm	function
(	O
t_array	O
,	O
"aARRAY"	pointer
,	O
sizeof	O
(	O
struct	O
array	O
)	O
,	O
4681	int
,	O
1	int
,	O
0	int
)	O
;	O
init_tm	function
(	O
t_symbol	O
,	O
"|SYMBOL"	pointer
,	O
sizeof	O
(	O
struct	O
symbol	O
)	O
,	O
3640	int
,	O
1	int
,	O
0	int
)	O
;	O
init_tm	function
(	O
t_bignum	O
,	O
"BBIGNUM"	pointer
,	O
sizeof	O
(	O
struct	O
bignum	O
)	O
,	O
2730	int
,	O
1	int
,	O
0	int
)	O
;	O
init_tm	function
(	O
t_ratio	O
,	O
"RRATIONAL"	pointer
,	O
sizeof	O
(	O
struct	O
ratio	O
)	O
,	O
170	int
,	O
1	int
,	O
0	int
)	O
;	O
init_tm	function
(	O
t_shortfloat	O
,	O
"FSHORT-FLOAT"	pointer
,	O
sizeof	O
(	O
struct	O
shortfloat_struct	O
)	O
,	O
256	int
,	O
1	int
,	O
0	int
)	O
;	O
init_tm	function
(	O
t_longfloat	O
,	O
"LLONG-FLOAT"	pointer
,	O
sizeof	O
(	O
struct	O
longfloat_struct	O
)	O
,	O
170	int
,	O
1	int
,	O
0	int
)	O
;	O
init_tm	function
(	O
t_complex	O
,	O
"CCOMPLEX"	pointer
,	O
sizeof	O
(	O
struct	O
ocomplex	O
)	O
,	O
170	int
,	O
1	int
,	O
0	int
)	O
;	O
init_tm	function
(	O
t_character	O
,	O
"#CHARACTER"	pointer
,	O
sizeof	O
(	O
struct	O
character	O
)	O
,	O
256	int
,	O
1	int
,	O
0	int
)	O
;	O
init_tm	function
(	O
t_package	O
,	O
":PACKAGE"	pointer
,	O
sizeof	O
(	O
struct	O
package	O
)	O
,	O
2	int
*	O
PAGESIZE	O
/	O
sizeof	O
(	O
struct	O
package	O
)	O
,	O
1	int
,	O
0	int
)	O
;	O
init_tm	function
(	O
t_hashtable	O
,	O
"hHASH-TABLE"	pointer
,	O
sizeof	O
(	O
struct	O
hashtable	O
)	O
,	O
78	int
,	O
1	int
,	O
0	int
)	O
;	O
init_tm	function
(	O
t_vector	O
,	O
"vVECTOR"	pointer
,	O
sizeof	O
(	O
struct	O
vector	O
)	O
,	O
146	int
,	O
1	int
,	O
0	int
)	O
;	O
init_tm	function
(	O
t_bitvector	O
,	O
"bBIT-VECTOR"	pointer
,	O
sizeof	O
(	O
struct	O
bitvector	O
)	O
,	O
73	int
,	O
1	int
,	O
0	int
)	O
;	O
init_tm	function
(	O
t_stream	O
,	O
"sSTREAM"	pointer
,	O
sizeof	O
(	O
struct	O
stream	O
)	O
,	O
78	int
,	O
1	int
,	O
0	int
)	O
;	O
init_tm	function
(	O
t_random	O
,	O
"$RANDOM-STATE"	pointer
,	O
sizeof	O
(	O
struct	O
random	function
)	O
,	O
256	int
,	O
1	int
,	O
0	int
)	O
;	O
init_tm	function
(	O
t_readtable	O
,	O
"rREADTABLE"	pointer
,	O
sizeof	O
(	O
struct	O
readtable	O
)	O
,	O
256	int
,	O
1	int
,	O
0	int
)	O
;	O
init_tm	function
(	O
t_pathname	O
,	O
"pPATHNAME"	pointer
,	O
sizeof	O
(	O
struct	O
pathname	O
)	O
,	O
73	int
,	O
1	int
,	O
0	int
)	O
;	O
init_tm	function
(	O
t_cclosure	O
,	O
"cCCLOSURE"	pointer
,	O
sizeof	O
(	O
struct	O
cclosure	O
)	O
,	O
85	int
,	O
1	int
,	O
0	int
)	O
;	O
init_tm	function
(	O
t_closure	O
,	O
"cCLOSURE"	pointer
,	O
sizeof	O
(	O
struct	O
cclosure	O
)	O
,	O
85	int
,	O
1	int
,	O
0	int
)	O
;	O
init_tm	function
(	O
t_vfun	O
,	O
"VVFUN"	pointer
,	O
sizeof	O
(	O
struct	O
vfun	O
)	O
,	O
102	int
,	O
1	int
,	O
0	int
)	O
;	O
init_tm	function
(	O
t_gfun	O
,	O
"gGFUN"	pointer
,	O
sizeof	O
(	O
struct	O
sfun	O
)	O
,	O
0	int
,	O
1	int
,	O
0	int
)	O
;	O
init_tm	function
(	O
t_afun	O
,	O
"AAFUN"	pointer
,	O
sizeof	O
(	O
struct	O
sfun	O
)	O
,	O
0	int
,	O
1	int
,	O
0	int
)	O
;	O
init_tm	function
(	O
t_cfdata	O
,	O
"cCFDATA"	pointer
,	O
sizeof	O
(	O
struct	O
cfdata	O
)	O
,	O
102	int
,	O
1	int
,	O
0	int
)	O
;	O
init_tm	function
(	O
t_spice	O
,	O
"!SPICE"	pointer
,	O
sizeof	O
(	O
struct	O
spice	O
)	O
,	O
4096	int
,	O
1	int
,	O
0	int
)	O
;	O
init_tm	function
(	O
t_relocatable	O
,	O
"%RELOCATABLE-BLOCKS"	pointer
,	O
0	int
,	O
0	int
,	O
20	int
,	O
1	int
)	O
;	O
init_tm	function
(	O
t_contiguous	O
,	O
"_CONTIGUOUS-BLOCKS"	pointer
,	O
0	int
,	O
0	int
,	O
20	int
,	O
1	int
)	O
;	O
ncb	O
=	O
0	int
;	O
ncbpage	O
=	O
0	int
;	O
set_tm_maxpage	function
(	O
tm_table	O
+	O
t_contiguous	O
,	O
1	int
)	O
;	O
set_tm_maxpage	function
(	O
tm_table	O
+	O
t_relocatable	O
,	O
1	int
)	O
;	O
nrbpage	O
=	O
0	int
;	O
alloc_page	function
(	O
-	O
(	O
holepage	O
+	O
nrbpage	O
)	O
)	O
;	O
rb_start	O
=	O
rb_pointer	O
=	O
heap_end	O
+	O
PAGESIZE	O
*	O
holepage	O
;	O
rb_end	O
=	O
rb_start	O
+	O
PAGESIZE	O
*	O
nrbpage	O
;	O
rb_limit	O
=	O
rb_end	O
-	O
2	int
*	O
RB_GETA	O
;	O
gcl_alloc_initialized	int
=	O
1	int
;	O
}	O
DEFUN_NEW	function
(	O
"STATICP"	pointer
,	O
object	O
,	O
fSstaticp	O
,	O
SI	O
,	O
1	int
,	O
1	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
object	O
x	double
)	O
,	O
"Tell if the string or vector is static"	pointer
)	O
{	O
RETURN1	function
(	O
(	O
inheap	function
(	O
x	double
->	O
ust	O
.	O
ust_self	O
)	O
?	O
sLt	O
:	O
sLnil	O
)	O
)	O
;	O
}	O
static	O
int	O
t_from_type	function
(	O
object	O
type	int
)	O
{	O
int	O
i	long
;	O
check_type_or_symbol_string	function
(	O
&	O
type	int
)	O
;	O
for	O
(	O
i	long
=	O
t_start	O
;	O
i	long
<	O
t_other	O
;	O
i	long
++	O
)	O
{	O
struct	O
typemanager	O
*	O
tm	pointer
=	O
&	O
tm_table	O
[	O
i	long
]	O
;	O
if	O
(	O
tm	pointer
->	O
tm_name	O
&&	O
0	int
==	O
strncmp	function
(	O
(	O
tm	pointer
->	O
tm_name	O
)	O
+	O
1	int
,	O
type	int
->	O
st	O
.	O
st_self	O
,	O
type	int
->	O
st	O
.	O
st_fillp	O
)	O
)	O
return	O
i	long
;	O
}	O
FEerror	function
(	O
"Unrecognized type"	pointer
,	O
0	int
)	O
;	O
return	O
i	long
;	O
}	O
DEFUN_NEW	function
(	O
"ALLOCATE-SGC"	pointer
,	O
object	O
,	O
fSallocate_sgc	O
,	O
SI	O
,	O
4	int
,	O
4	int
,	O
NONE	O
,	O
OO	O
,	O
II	O
,	O
II	O
,	O
OO	O
,	O
(	O
object	O
type	int
,	O
fixnum	int
min	O
,	O
fixnum	int
max	O
,	O
fixnum	int
free_percent	O
)	O
,	O
""	pointer
)	O
{	O
int	O
t	int
=	O
t_from_type	function
(	O
type	int
)	O
;	O
struct	O
typemanager	O
*	O
tm	pointer
;	O
object	O
res	O
,	O
x	double
,	O
x1	O
,	O
x2	O
;	O
tm	pointer
=	O
tm_of	function
(	O
t	int
)	O
;	O
x	double
=	O
make_fixnum	function
(	O
tm	pointer
->	O
tm_sgc	O
)	O
;	O
x1	O
=	O
make_fixnum	function
(	O
tm	pointer
->	O
tm_sgc_max	O
)	O
;	O
x2	O
=	O
make_fixnum	function
(	O
(	O
100	int
*	O
tm	pointer
->	O
tm_sgc_minfree	O
)	O
/	O
tm	pointer
->	O
tm_nppage	O
)	O
;	O
res	O
=	O
list	function
(	O
3	int
,	O
x	double
,	O
x1	O
,	O
x2	O
)	O
;	O
if	O
(	O
min	O
<	O
0	int
||	O
max	O
<	O
min	O
||	O
free_percent	O
<	O
0	int
||	O
free_percent	O
>	O
100	int
)	O
goto	O
END	O
;	O
tm	pointer
->	O
tm_sgc_max	O
=	O
max	O
;	O
tm	pointer
->	O
tm_sgc	O
=	O
min	O
;	O
tm	pointer
->	O
tm_sgc_minfree	O
=	O
(	O
tm	pointer
->	O
tm_nppage	O
*	O
free_percent	O
)	O
/	O
100	int
;	O
END	O
:	O
RETURN1	function
(	O
res	O
)	O
;	O
}	O
DEFUN_NEW	function
(	O
"ALLOCATE-GROWTH"	pointer
,	O
object	O
,	O
fSallocate_growth	O
,	O
SI	O
,	O
5	int
,	O
5	int
,	O
NONE	O
,	O
OO	O
,	O
II	O
,	O
II	O
,	O
OO	O
,	O
(	O
object	O
type	int
,	O
fixnum	int
min	O
,	O
fixnum	int
max	O
,	O
fixnum	int
percent	O
,	O
fixnum	int
percent_free	O
)	O
,	O
""	pointer
)	O
{	O
int	O
t	int
=	O
t_from_type	function
(	O
type	int
)	O
;	O
struct	O
typemanager	O
*	O
tm	pointer
=	O
tm_of	function
(	O
t	int
)	O
;	O
object	O
res	O
,	O
x	double
,	O
x1	O
,	O
x2	O
,	O
x3	O
;	O
x	double
=	O
make_fixnum	function
(	O
tm	pointer
->	O
tm_min_grow	O
)	O
;	O
x1	O
=	O
make_fixnum	function
(	O
tm	pointer
->	O
tm_max_grow	O
)	O
;	O
x2	O
=	O
make_fixnum	function
(	O
tm	pointer
->	O
tm_growth_percent	O
)	O
;	O
x3	O
=	O
make_fixnum	function
(	O
tm	pointer
->	O
tm_percent_free	O
)	O
;	O
res	O
=	O
list	function
(	O
4	int
,	O
x	double
,	O
x1	O
,	O
x2	O
,	O
x3	O
)	O
;	O
if	O
(	O
min	O
<	O
0	int
||	O
max	O
<	O
min	O
||	O
min	O
>	O
3000	int
||	O
percent	O
<	O
0	int
||	O
percent	O
>	O
500	int
||	O
percent_free	O
<	O
0	int
||	O
percent_free	O
>	O
100	int
)	O
goto	O
END	O
;	O
tm	pointer
->	O
tm_max_grow	O
=	O
max	O
;	O
tm	pointer
->	O
tm_min_grow	O
=	O
min	O
;	O
tm	pointer
->	O
tm_growth_percent	O
=	O
percent	O
;	O
tm	pointer
->	O
tm_percent_free	O
=	O
percent_free	O
;	O
END	O
:	O
RETURN1	function
(	O
res	O
)	O
;	O
}	O
DEFUN_NEW	function
(	O
"ALLOCATE-CONTIGUOUS-PAGES"	pointer
,	O
object	O
,	O
fSallocate_contiguous_pages	O
,	O
SI	O
,	O
1	int
,	O
2	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
object	O
onpages	O
,	O
...	O
)	O
,	O
""	pointer
)	O
{	O
int	O
nargs	int
=	O
VFUN_NARGS	O
;	O
object	O
really_do	O
;	O
va_list	O
ap	O
;	O
fixnum	int
npages	O
=	O
fixint	O
(	O
onpages	O
)	O
;	O
really_do	O
=	O
Cnil	O
;	O
if	O
(	O
nargs	int
>=	O
2	int
)	O
{	O
va_start	O
(	O
ap	O
,	O
onpages	O
)	O
;	O
really_do	O
=	O
va_arg	function
(	O
ap	O
,	O
object	O
)	O
;	O
va_end	O
(	O
ap	O
)	O
;	O
}	O
CHECK_ARG_RANGE	function
(	O
1	int
,	O
2	int
)	O
;	O
if	O
(	O
npages	O
<	O
0	int
)	O
FEerror	function
(	O
"Allocate requires positive argument."	pointer
,	O
0	int
)	O
;	O
if	O
(	O
ncbpage	O
>	O
npages	O
)	O
npages	O
=	O
ncbpage	O
;	O
if	O
(	O
!	O
set_tm_maxpage	function
(	O
tm_table	O
+	O
t_contiguous	O
,	O
npages	O
)	O
)	O
FEerror	function
(	O
"Can't allocate ~D pages for contiguous blocks."	pointer
,	O
1	int
,	O
make_fixnum	function
(	O
npages	O
)	O
)	O
;	O
if	O
(	O
really_do	O
==	O
Cnil	O
)	O
RETURN1	function
(	O
Ct	O
)	O
;	O
add_pages	function
(	O
tm_of	function
(	O
t_contiguous	O
)	O
,	O
npages	O
-	O
ncbpage	O
)	O
;	O
RETURN1	function
(	O
make_fixnum	function
(	O
npages	O
)	O
)	O
;	O
}	O
DEFUN_NEW	function
(	O
"ALLOCATED-CONTIGUOUS-PAGES"	pointer
,	O
object	O
,	O
fSallocated_contiguous_pages	O
,	O
SI	O
,	O
0	int
,	O
0	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
void	O
)	O
,	O
""	pointer
)	O
{	O
RETURN1	function
(	O
(	O
make_fixnum	function
(	O
ncbpage	O
)	O
)	O
)	O
;	O
}	O
DEFUN_NEW	function
(	O
"MAXIMUM-CONTIGUOUS-PAGES"	pointer
,	O
object	O
,	O
fSmaximum_contiguous_pages	O
,	O
SI	O
,	O
0	int
,	O
0	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
void	O
)	O
,	O
""	pointer
)	O
{	O
RETURN1	function
(	O
(	O
make_fixnum	function
(	O
maxcbpage	O
)	O
)	O
)	O
;	O
}	O
DEFUN_NEW	function
(	O
"ALLOCATE-RELOCATABLE-PAGES"	pointer
,	O
object	O
,	O
fSallocate_relocatable_pages	O
,	O
SI	O
,	O
1	int
,	O
2	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
object	O
onpages	O
,	O
...	O
)	O
,	O
""	pointer
)	O
{	O
int	O
nargs	int
=	O
VFUN_NARGS	O
;	O
object	O
really_do	O
;	O
va_list	O
ap	O
;	O
fixnum	int
npages	O
=	O
fixint	O
(	O
onpages	O
)	O
;	O
really_do	O
=	O
Cnil	O
;	O
if	O
(	O
nargs	int
>=	O
2	int
)	O
{	O
va_start	O
(	O
ap	O
,	O
onpages	O
)	O
;	O
really_do	O
=	O
va_arg	function
(	O
ap	O
,	O
object	O
)	O
;	O
va_end	O
(	O
ap	O
)	O
;	O
}	O
CHECK_ARG_RANGE	function
(	O
1	int
,	O
2	int
)	O
;	O
if	O
(	O
npages	O
<=	O
0	int
)	O
FEerror	function
(	O
"Requires positive arg"	pointer
,	O
0	int
)	O
;	O
if	O
(	O
npages	O
<	O
nrbpage	O
)	O
npages	O
=	O
nrbpage	O
;	O
if	O
(	O
!	O
set_tm_maxpage	function
(	O
tm_table	O
+	O
t_relocatable	O
,	O
npages	O
)	O
)	O
FEerror	function
(	O
"Can't set the limit for relocatable blocks to ~D."	pointer
,	O
1	int
,	O
make_fixnum	function
(	O
npages	O
)	O
)	O
;	O
if	O
(	O
really_do	O
==	O
Cnil	O
)	O
RETURN1	function
(	O
Ct	O
)	O
;	O
add_pages	function
(	O
tm_of	function
(	O
t_relocatable	O
)	O
,	O
npages	O
-	O
nrbpage	O
)	O
;	O
RETURN1	function
(	O
make_fixnum	function
(	O
npages	O
)	O
)	O
;	O
}	O
DEFUN_NEW	function
(	O
"ALLOCATE"	pointer
,	O
object	O
,	O
fSallocate	O
,	O
SI	O
,	O
2	int
,	O
3	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
object	O
type	int
,	O
object	O
onpages	O
,	O
...	O
)	O
,	O
""	pointer
)	O
{	O
int	O
nargs	int
=	O
VFUN_NARGS	O
;	O
object	O
really_do	O
;	O
va_list	O
ap	O
;	O
struct	O
typemanager	O
*	O
tm	pointer
;	O
fixnum	int
npages	O
=	O
fixint	O
(	O
onpages	O
)	O
;	O
int	O
t	int
;	O
really_do	O
=	O
Cnil	O
;	O
if	O
(	O
nargs	int
>=	O
3	int
)	O
{	O
va_start	O
(	O
ap	O
,	O
onpages	O
)	O
;	O
really_do	O
=	O
va_arg	function
(	O
ap	O
,	O
object	O
)	O
;	O
va_end	O
(	O
ap	O
)	O
;	O
}	O
CHECK_ARG_RANGE	function
(	O
2	int
,	O
3	int
)	O
;	O
t	int
=	O
t_from_type	function
(	O
type	int
)	O
;	O
if	O
(	O
t	int
==	O
t_contiguous	O
)	O
RETURN1	function
(	O
FUNCALL	function
(	O
2	int
,	O
FFN	function
(	O
fSallocate_contiguous_pages	O
)	O
(	O
make_fixnum	function
(	O
npages	O
)	O
,	O
really_do	O
)	O
)	O
)	O
;	O
else	O
if	O
(	O
t	int
==	O
t_relocatable	O
)	O
RETURN1	function
(	O
FUNCALL	function
(	O
2	int
,	O
FFN	function
(	O
fSallocate_relocatable_pages	O
)	O
(	O
make_fixnum	function
(	O
npages	O
)	O
,	O
really_do	O
)	O
)	O
)	O
;	O
if	O
(	O
npages	O
<=	O
0	int
)	O
FEerror	function
(	O
"Allocate takes positive argument."	pointer
,	O
1	int
,	O
make_fixnum	function
(	O
npages	O
)	O
)	O
;	O
tm	pointer
=	O
tm_of	function
(	O
t	int
)	O
;	O
if	O
(	O
tm	pointer
->	O
tm_npage	O
>	O
npages	O
)	O
{	O
npages	O
=	O
tm	pointer
->	O
tm_npage	O
;	O
}	O
if	O
(	O
!	O
set_tm_maxpage	function
(	O
tm	pointer
,	O
npages	O
)	O
)	O
FEerror	function
(	O
"Can't allocate ~D pages for ~A."	pointer
,	O
2	int
,	O
make_fixnum	function
(	O
npages	O
)	O
,	O
(	O
make_simple_string	function
(	O
tm	pointer
->	O
tm_name	O
+	O
1	int
)	O
)	O
)	O
;	O
if	O
(	O
really_do	O
==	O
Cnil	O
)	O
RETURN1	function
(	O
Ct	O
)	O
;	O
add_pages	function
(	O
tm	pointer
,	O
npages	O
-	O
tm	pointer
->	O
tm_npage	O
)	O
;	O
RETURN1	function
(	O
make_fixnum	function
(	O
npages	O
)	O
)	O
;	O
}	O
DEFUN_NEW	function
(	O
"ALLOCATED-RELOCATABLE-PAGES"	pointer
,	O
object	O
,	O
fSallocated_relocatable_pages	O
,	O
SI	O
,	O
0	int
,	O
0	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
void	O
)	O
,	O
""	pointer
)	O
{	O
RETURN1	function
(	O
make_fixnum	function
(	O
nrbpage	O
)	O
)	O
;	O
}	O
DEFUN_NEW	function
(	O
"GET-HOLE-SIZE"	pointer
,	O
object	O
,	O
fSget_hole_size	O
,	O
SI	O
,	O
0	int
,	O
0	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
void	O
)	O
,	O
""	pointer
)	O
{	O
RETURN1	function
(	O
(	O
make_fixnum	function
(	O
new_holepage	long
)	O
)	O
)	O
;	O
}	O
DEFUN_NEW	function
(	O
"SET-STARTING-HOLE-DIVISOR"	pointer
,	O
object	O
,	O
fSset_starting_hole_divisor	O
,	O
SI	O
,	O
1	int
,	O
1	int
,	O
NONE	O
,	O
II	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
fixnum	int
div	function
)	O
,	O
""	pointer
)	O
{	O
if	O
(	O
div	function
>	O
0	int
&&	O
div	function
<	O
100	int
)	O
starting_hole_div	long
=	O
div	function
;	O
return	O
(	O
object	O
)	O
starting_hole_div	long
;	O
}	O
DEFUN_NEW	function
(	O
"SET-STARTING-RELBLOCK-HEAP-MULTIPLE"	pointer
,	O
object	O
,	O
fSset_starting_relb_heap_multiple	O
,	O
SI	O
,	O
1	int
,	O
1	int
,	O
NONE	O
,	O
II	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
fixnum	int
mult	O
)	O
,	O
""	pointer
)	O
{	O
if	O
(	O
mult	O
>=	O
0	int
)	O
starting_relb_heap_mult	long
=	O
mult	O
;	O
return	O
(	O
object	O
)	O
starting_relb_heap_mult	long
;	O
}	O
DEFUNM_NEW	function
(	O
"SET-HOLE-SIZE"	pointer
,	O
object	O
,	O
fSset_hole_size	O
,	O
SI	O
,	O
1	int
,	O
2	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
object	O
onpages	O
,	O
...	O
)	O
,	O
""	pointer
)	O
{	O
printf	O
(	O
"This function is obsolete -- use SET-STARTING-HOLE-DIVISOR instead\n"	pointer
)	O
;	O
RETURN2	function
(	O
make_fixnum	function
(	O
new_holepage	long
)	O
,	O
make_fixnum	function
(	O
reserve_pages_for_signal_handler	int
)	O
)	O
;	O
}	O
void	O
gcl_init_alloc_function	function
(	O
void	O
)	O
{	O
enter_mark_origin	function
(	O
&	O
malloc_list	int
)	O
;	O
}	O
bool	O
writable_malloc	int
=	O
0	int
;	O
void	O
*	O
malloc	function
(	O
size_t	long
size	short
)	O
{	O
static	O
bool	O
in_malloc	int
;	O
if	O
(	O
in_malloc	int
)	O
return	O
NULL	O
;	O
in_malloc	int
=	O
1	int
;	O
if	O
(	O
!	O
gcl_alloc_initialized	int
)	O
gcl_init_alloc	function
(	O
&	O
size	short
)	O
;	O
CHECK_INTERRUPT	O
;	O
malloc_list	int
=	O
make_cons	function
(	O
alloc_simple_string	function
(	O
size	short
)	O
,	O
malloc_list	int
)	O
;	O
malloc_list	int
->	O
c	O
.	O
c_car	O
->	O
st	O
.	O
st_self	O
=	O
alloc_contblock	function
(	O
size	short
)	O
;	O
malloc_list	int
->	O
c	O
.	O
c_car	O
->	O
st	O
.	O
st_adjustable	O
=	O
writable_malloc	int
;	O
in_malloc	int
=	O
0	int
;	O
return	O
(	O
malloc_list	int
->	O
c	O
.	O
c_car	O
->	O
st	O
.	O
st_self	O
)	O
;	O
}	O
void	O
free	function
(	O
void	O
*	O
ptr	pointer
)	O
{	O
object	O
*	O
p	pointer
,	O
pp	pointer
;	O
if	O
(	O
ptr	pointer
==	O
0	int
)	O
return	O
;	O
for	O
(	O
p	pointer
=	O
&	O
malloc_list	int
,	O
pp	pointer
=	O
*	O
p	pointer
;	O
pp	pointer
&&	O
!	O
endp	function
(	O
pp	pointer
)	O
;	O
p	pointer
=	O
&	O
(	O
(	O
pp	pointer
)	O
->	O
c	O
.	O
c_cdr	O
)	O
,	O
pp	pointer
=	O
pp	pointer
->	O
c	O
.	O
c_cdr	O
)	O
if	O
(	O
(	O
pp	pointer
)	O
->	O
c	O
.	O
c_car	O
->	O
st	O
.	O
st_self	O
==	O
ptr	pointer
)	O
{	O
insert_contblock	function
(	O
(	O
pp	pointer
)	O
->	O
c	O
.	O
c_car	O
->	O
st	O
.	O
st_self	O
,	O
(	O
pp	pointer
)	O
->	O
c	O
.	O
c_car	O
->	O
st	O
.	O
st_dim	O
)	O
;	O
(	O
pp	pointer
)	O
->	O
c	O
.	O
c_car	O
->	O
st	O
.	O
st_self	O
=	O
NULL	O
;	O
*	O
p	pointer
=	O
pp	pointer
->	O
c	O
.	O
c_cdr	O
;	O
return	O
;	O
}	O
if	O
(	O
core_end	O
-	O
heap_end	O
<	O
sizeof	O
(	O
ptr	pointer
)	O
||	O
ptr	pointer
!=	O
*	O
(	O
void	O
*	O
*	O
)	O
heap_end	O
)	O
{	O
static	O
void	O
*	O
old_ptr	pointer
;	O
if	O
(	O
old_ptr	pointer
==	O
ptr	pointer
)	O
return	O
;	O
old_ptr	pointer
=	O
ptr	pointer
;	O
FEerror	function
(	O
"free(3) error."	pointer
,	O
0	int
)	O
;	O
}	O
return	O
;	O
}	O
void	O
*	O
realloc	function
(	O
void	O
*	O
ptr	pointer
,	O
size_t	long
size	short
)	O
{	O
object	O
x	double
;	O
int	O
i	long
,	O
j	int
;	O
if	O
(	O
ptr	pointer
==	O
NULL	O
)	O
return	O
malloc	function
(	O
size	short
)	O
;	O
for	O
(	O
x	double
=	O
malloc_list	int
;	O
!	O
endp	function
(	O
x	double
)	O
;	O
x	double
=	O
x	double
->	O
c	O
.	O
c_cdr	O
)	O
if	O
(	O
x	double
->	O
c	O
.	O
c_car	O
->	O
st	O
.	O
st_self	O
==	O
ptr	pointer
)	O
{	O
x	double
=	O
x	double
->	O
c	O
.	O
c_car	O
;	O
if	O
(	O
x	double
->	O
st	O
.	O
st_dim	O
>=	O
size	short
)	O
{	O
x	double
->	O
st	O
.	O
st_fillp	O
=	O
size	short
;	O
return	O
(	O
ptr	pointer
)	O
;	O
}	O
else	O
{	O
j	int
=	O
x	double
->	O
st	O
.	O
st_dim	O
;	O
x	double
->	O
st	O
.	O
st_self	O
=	O
alloc_contblock	function
(	O
size	short
)	O
;	O
x	double
->	O
st	O
.	O
st_fillp	O
=	O
x	double
->	O
st	O
.	O
st_dim	O
=	O
size	short
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
size	short
;	O
i	long
++	O
)	O
x	double
->	O
st	O
.	O
st_self	O
[	O
i	long
]	O
=	O
(	O
(	O
char	O
*	O
)	O
ptr	pointer
)	O
[	O
i	long
]	O
;	O
insert_contblock	function
(	O
ptr	pointer
,	O
j	int
)	O
;	O
return	O
(	O
x	double
->	O
st	O
.	O
st_self	O
)	O
;	O
}	O
}	O
FEerror	function
(	O
"realloc(3) error."	pointer
,	O
0	int
)	O
;	O
return	O
NULL	O
;	O
}	O
void	O
*	O
calloc	function
(	O
size_t	long
nelem	long
,	O
size_t	long
elsize	int
)	O
{	O
char	O
*	O
ptr	pointer
;	O
long	O
i	long
;	O
ptr	pointer
=	O
malloc	function
(	O
i	long
=	O
nelem	long
*	O
elsize	int
)	O
;	O
while	O
(	O
--	O
i	long
>=	O
0	int
)	O
ptr	pointer
[	O
i	long
]	O
=	O
0	int
;	O
return	O
(	O
ptr	pointer
)	O
;	O
}	O
void	O
cfree	function
(	O
void	O
*	O
ptr	pointer
)	O
{	O
free	function
(	O
ptr	pointer
)	O
;	O
}	O