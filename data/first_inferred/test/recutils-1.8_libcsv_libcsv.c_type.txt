static	O
char	O
*	O
csv_errors	array
[	O
]	O
=	O
{	O
"success"	pointer
,	O
"error parsing data while strict checking enabled"	pointer
,	O
"memory exhausted while increasing buffer size"	pointer
,	O
"data size too large"	pointer
,	O
"invalid status code"	pointer
}	O
;	O
int	O
csv_error	function
(	O
struct	O
csv_parser	struct
*	O
p	pointer
)	O
{	O
return	O
p	pointer
->	O
status	int
;	O
}	O
char	O
*	O
csv_strerror	function
(	O
int	O
status	int
)	O
{	O
if	O
(	O
status	int
>=	O
CSV_EINVALID	int
||	O
status	int
<	O
0	int
)	O
return	O
csv_errors	array
[	O
CSV_EINVALID	int
]	O
;	O
else	O
return	O
csv_errors	array
[	O
status	int
]	O
;	O
}	O
int	O
csv_get_opts	function
(	O
struct	O
csv_parser	struct
*	O
p	pointer
)	O
{	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
return	O
p	pointer
->	O
options	char
;	O
}	O
int	O
csv_set_opts	function
(	O
struct	O
csv_parser	struct
*	O
p	pointer
,	O
unsigned	O
char	O
options	char
)	O
{	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
p	pointer
->	O
options	char
=	O
options	char
;	O
return	O
0	int
;	O
}	O
int	O
csv_init	function
(	O
struct	O
csv_parser	struct
*	O
p	pointer
,	O
unsigned	O
char	O
options	char
)	O
{	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
p	pointer
->	O
entry_buf	pointer
=	O
NULL	O
;	O
p	pointer
->	O
pstate	int
=	O
ROW_NOT_BEGUN	int
;	O
p	pointer
->	O
quoted	int
=	O
0	int
;	O
p	pointer
->	O
spaces	long
=	O
0	int
;	O
p	pointer
->	O
entry_pos	long
=	O
0	int
;	O
p	pointer
->	O
entry_size	long
=	O
0	int
;	O
p	pointer
->	O
status	int
=	O
0	int
;	O
p	pointer
->	O
options	char
=	O
options	char
;	O
p	pointer
->	O
quote_char	char
=	O
CSV_QUOTE	int
;	O
p	pointer
->	O
delim_char	char
=	O
CSV_COMMA	int
;	O
p	pointer
->	O
is_space	pointer
=	O
NULL	O
;	O
p	pointer
->	O
is_term	pointer
=	O
NULL	O
;	O
p	pointer
->	O
blk_size	long
=	O
MEM_BLK_SIZE	int
;	O
p	pointer
->	O
malloc_func	pointer
=	O
NULL	O
;	O
p	pointer
->	O
realloc_func	pointer
=	O
realloc	function
;	O
p	pointer
->	O
free_func	pointer
=	O
free	function
;	O
return	O
0	int
;	O
}	O
void	O
csv_free	function
(	O
struct	O
csv_parser	struct
*	O
p	pointer
)	O
{	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
p	pointer
->	O
entry_buf	pointer
)	O
p	pointer
->	O
free_func	pointer
(	O
p	pointer
->	O
entry_buf	pointer
)	O
;	O
p	pointer
->	O
entry_buf	pointer
=	O
NULL	O
;	O
p	pointer
->	O
entry_size	long
=	O
0	int
;	O
return	O
;	O
}	O
int	O
csv_fini	function
(	O
struct	O
csv_parser	struct
*	O
p	pointer
,	O
void	O
(	O
*	O
cb1	pointer
)	O
(	O
void	O
*	O
,	O
size_t	long
,	O
void	O
*	O
)	O
,	O
void	O
(	O
*	O
cb2	pointer
)	O
(	O
int	O
c	char
,	O
void	O
*	O
)	O
,	O
void	O
*	O
data	pointer
)	O
{	O
int	O
quoted	int
=	O
p	pointer
->	O
quoted	int
;	O
int	O
pstate	int
=	O
p	pointer
->	O
pstate	int
;	O
size_t	long
spaces	long
=	O
p	pointer
->	O
spaces	long
;	O
size_t	long
entry_pos	long
=	O
p	pointer
->	O
entry_pos	long
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
p	pointer
->	O
pstate	int
==	O
FIELD_BEGUN	int
&&	O
p	pointer
->	O
quoted	int
&&	O
p	pointer
->	O
options	char
&	O
CSV_STRICT	int
&&	O
p	pointer
->	O
options	char
&	O
CSV_STRICT_FINI	int
)	O
{	O
p	pointer
->	O
status	int
=	O
CSV_EPARSE	int
;	O
return	O
-	O
1	int
;	O
}	O
switch	O
(	O
p	pointer
->	O
pstate	int
)	O
{	O
case	O
FIELD_MIGHT_HAVE_ENDED	int
:	O
p	pointer
->	O
entry_pos	long
-=	O
p	pointer
->	O
spaces	long
+	O
1	int
;	O
case	O
FIELD_NOT_BEGUN	int
:	O
case	O
FIELD_BEGUN	int
:	O
quoted	int
=	O
p	pointer
->	O
quoted	int
,	O
pstate	int
=	O
p	pointer
->	O
pstate	int
;	O
spaces	long
=	O
p	pointer
->	O
spaces	long
,	O
entry_pos	long
=	O
p	pointer
->	O
entry_pos	long
;	O
SUBMIT_FIELD	O
(	O
p	pointer
)	O
;	O
SUBMIT_ROW	O
(	O
p	pointer
,	O
-	O
1	int
)	O
;	O
case	O
ROW_NOT_BEGUN	int
:	O
;	O
}	O
p	pointer
->	O
spaces	long
=	O
p	pointer
->	O
quoted	int
=	O
p	pointer
->	O
entry_pos	long
=	O
p	pointer
->	O
status	int
=	O
0	int
;	O
p	pointer
->	O
pstate	int
=	O
ROW_NOT_BEGUN	int
;	O
return	O
0	int
;	O
}	O
void	O
csv_set_delim	function
(	O
struct	O
csv_parser	struct
*	O
p	pointer
,	O
unsigned	O
char	O
c	char
)	O
{	O
if	O
(	O
p	pointer
)	O
p	pointer
->	O
delim_char	char
=	O
c	char
;	O
}	O
void	O
csv_set_quote	function
(	O
struct	O
csv_parser	struct
*	O
p	pointer
,	O
unsigned	O
char	O
c	char
)	O
{	O
if	O
(	O
p	pointer
)	O
p	pointer
->	O
quote_char	char
=	O
c	char
;	O
}	O
unsigned	O
char	O
csv_get_delim	function
(	O
struct	O
csv_parser	struct
*	O
p	pointer
)	O
{	O
return	O
p	pointer
->	O
delim_char	char
;	O
}	O
unsigned	O
char	O
csv_get_quote	function
(	O
struct	O
csv_parser	struct
*	O
p	pointer
)	O
{	O
return	O
p	pointer
->	O
quote_char	char
;	O
}	O
void	O
csv_set_space_func	function
(	O
struct	O
csv_parser	struct
*	O
p	pointer
,	O
int	O
(	O
*	O
f	pointer
)	O
(	O
unsigned	O
char	O
)	O
)	O
{	O
if	O
(	O
p	pointer
)	O
p	pointer
->	O
is_space	pointer
=	O
f	pointer
;	O
}	O
void	O
csv_set_term_func	function
(	O
struct	O
csv_parser	struct
*	O
p	pointer
,	O
int	O
(	O
*	O
f	pointer
)	O
(	O
unsigned	O
char	O
)	O
)	O
{	O
if	O
(	O
p	pointer
)	O
p	pointer
->	O
is_term	pointer
=	O
f	pointer
;	O
}	O
void	O
csv_set_realloc_func	function
(	O
struct	O
csv_parser	struct
*	O
p	pointer
,	O
void	O
*	O
(	O
*	O
f	pointer
)	O
(	O
void	O
*	O
,	O
size_t	long
)	O
)	O
{	O
if	O
(	O
p	pointer
&&	O
f	pointer
)	O
p	pointer
->	O
realloc_func	pointer
=	O
f	pointer
;	O
}	O
void	O
csv_set_free_func	function
(	O
struct	O
csv_parser	struct
*	O
p	pointer
,	O
void	O
(	O
*	O
f	pointer
)	O
(	O
void	O
*	O
)	O
)	O
{	O
if	O
(	O
p	pointer
&&	O
f	pointer
)	O
p	pointer
->	O
free_func	pointer
=	O
f	pointer
;	O
}	O
void	O
csv_set_blk_size	function
(	O
struct	O
csv_parser	struct
*	O
p	pointer
,	O
size_t	long
size	long
)	O
{	O
if	O
(	O
p	pointer
)	O
p	pointer
->	O
blk_size	long
=	O
size	long
;	O
}	O
size_t	long
csv_get_buffer_size	function
(	O
struct	O
csv_parser	struct
*	O
p	pointer
)	O
{	O
if	O
(	O
p	pointer
)	O
return	O
p	pointer
->	O
entry_size	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
csv_increase_buffer	function
(	O
struct	O
csv_parser	struct
*	O
p	pointer
)	O
{	O
size_t	long
to_add	long
=	O
p	pointer
->	O
blk_size	long
;	O
void	O
*	O
vp	pointer
;	O
if	O
(	O
p	pointer
->	O
entry_size	long
>=	O
SIZE_MAX	O
-	O
to_add	long
)	O
to_add	long
=	O
SIZE_MAX	O
-	O
p	pointer
->	O
entry_size	long
;	O
if	O
(	O
!	O
to_add	long
)	O
{	O
p	pointer
->	O
status	int
=	O
CSV_ETOOBIG	int
;	O
return	O
-	O
1	int
;	O
}	O
while	O
(	O
(	O
vp	pointer
=	O
p	pointer
->	O
realloc_func	pointer
(	O
p	pointer
->	O
entry_buf	pointer
,	O
p	pointer
->	O
entry_size	long
+	O
to_add	long
)	O
)	O
==	O
NULL	O
)	O
{	O
to_add	long
/=	O
2	int
;	O
if	O
(	O
!	O
to_add	long
)	O
{	O
p	pointer
->	O
status	int
=	O
CSV_ENOMEM	int
;	O
return	O
-	O
1	int
;	O
}	O
}	O
p	pointer
->	O
entry_buf	pointer
=	O
vp	pointer
;	O
p	pointer
->	O
entry_size	long
+=	O
to_add	long
;	O
return	O
0	int
;	O
}	O
size_t	long
csv_parse	function
(	O
struct	O
csv_parser	struct
*	O
p	pointer
,	O
const	O
void	O
*	O
s	pointer
,	O
size_t	long
len	long
,	O
void	O
(	O
*	O
cb1	pointer
)	O
(	O
void	O
*	O
,	O
size_t	long
,	O
void	O
*	O
)	O
,	O
void	O
(	O
*	O
cb2	pointer
)	O
(	O
int	O
c	char
,	O
void	O
*	O
)	O
,	O
void	O
*	O
data	pointer
)	O
{	O
unsigned	O
const	O
char	O
*	O
us	pointer
=	O
s	pointer
;	O
unsigned	O
char	O
c	char
;	O
size_t	long
pos	long
=	O
0	int
;	O
unsigned	O
char	O
delim	char
=	O
p	pointer
->	O
delim_char	char
;	O
unsigned	O
char	O
quote	char
=	O
p	pointer
->	O
quote_char	char
;	O
int	O
(	O
*	O
is_space	pointer
)	O
(	O
unsigned	O
char	O
)	O
=	O
p	pointer
->	O
is_space	pointer
;	O
int	O
(	O
*	O
is_term	pointer
)	O
(	O
unsigned	O
char	O
)	O
=	O
p	pointer
->	O
is_term	pointer
;	O
int	O
quoted	int
=	O
p	pointer
->	O
quoted	int
;	O
int	O
pstate	int
=	O
p	pointer
->	O
pstate	int
;	O
size_t	long
spaces	long
=	O
p	pointer
->	O
spaces	long
;	O
size_t	long
entry_pos	long
=	O
p	pointer
->	O
entry_pos	long
;	O
if	O
(	O
!	O
p	pointer
->	O
entry_buf	pointer
&&	O
pos	long
<	O
len	long
)	O
{	O
if	O
(	O
csv_increase_buffer	function
(	O
p	pointer
)	O
!=	O
0	int
)	O
{	O
p	pointer
->	O
quoted	int
=	O
quoted	int
,	O
p	pointer
->	O
pstate	int
=	O
pstate	int
,	O
p	pointer
->	O
spaces	long
=	O
spaces	long
,	O
p	pointer
->	O
entry_pos	long
=	O
entry_pos	long
;	O
return	O
pos	long
;	O
}	O
}	O
while	O
(	O
pos	long
<	O
len	long
)	O
{	O
if	O
(	O
entry_pos	long
==	O
(	O
(	O
p	pointer
->	O
options	char
&	O
CSV_APPEND_NULL	int
)	O
?	O
p	pointer
->	O
entry_size	long
-	O
1	int
:	O
p	pointer
->	O
entry_size	long
)	O
)	O
{	O
if	O
(	O
csv_increase_buffer	function
(	O
p	pointer
)	O
!=	O
0	int
)	O
{	O
p	pointer
->	O
quoted	int
=	O
quoted	int
,	O
p	pointer
->	O
pstate	int
=	O
pstate	int
,	O
p	pointer
->	O
spaces	long
=	O
spaces	long
,	O
p	pointer
->	O
entry_pos	long
=	O
entry_pos	long
;	O
return	O
pos	long
;	O
}	O
}	O
c	char
=	O
us	pointer
[	O
pos	long
++	O
]	O
;	O
switch	O
(	O
pstate	int
)	O
{	O
case	O
ROW_NOT_BEGUN	int
:	O
case	O
FIELD_NOT_BEGUN	int
:	O
if	O
(	O
is_space	pointer
?	O
is_space	pointer
(	O
c	char
)	O
:	O
c	char
==	O
CSV_SPACE	int
||	O
c	char
==	O
CSV_TAB	int
)	O
{	O
continue	O
;	O
}	O
else	O
if	O
(	O
is_term	pointer
?	O
is_term	pointer
(	O
c	char
)	O
:	O
c	char
==	O
CSV_CR	int
||	O
c	char
==	O
CSV_LF	int
)	O
{	O
if	O
(	O
pstate	int
==	O
FIELD_NOT_BEGUN	int
)	O
{	O
SUBMIT_FIELD	O
(	O
p	pointer
)	O
;	O
SUBMIT_ROW	O
(	O
p	pointer
,	O
(	O
unsigned	O
char	O
)	O
c	char
)	O
;	O
}	O
else	O
{	O
if	O
(	O
p	pointer
->	O
options	char
&	O
CSV_REPALL_NL	int
)	O
{	O
SUBMIT_ROW	O
(	O
p	pointer
,	O
(	O
unsigned	O
char	O
)	O
c	char
)	O
;	O
}	O
}	O
continue	O
;	O
}	O
else	O
if	O
(	O
c	char
==	O
delim	char
)	O
{	O
SUBMIT_FIELD	O
(	O
p	pointer
)	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
c	char
==	O
quote	char
)	O
{	O
pstate	int
=	O
FIELD_BEGUN	int
;	O
quoted	int
=	O
1	int
;	O
}	O
else	O
{	O
pstate	int
=	O
FIELD_BEGUN	int
;	O
quoted	int
=	O
0	int
;	O
SUBMIT_CHAR	O
(	O
p	pointer
,	O
c	char
)	O
;	O
}	O
break	O
;	O
case	O
FIELD_BEGUN	int
:	O
if	O
(	O
c	char
==	O
quote	char
)	O
{	O
if	O
(	O
quoted	int
)	O
{	O
SUBMIT_CHAR	O
(	O
p	pointer
,	O
c	char
)	O
;	O
pstate	int
=	O
FIELD_MIGHT_HAVE_ENDED	int
;	O
}	O
else	O
{	O
if	O
(	O
p	pointer
->	O
options	char
&	O
CSV_STRICT	int
)	O
{	O
p	pointer
->	O
status	int
=	O
CSV_EPARSE	int
;	O
p	pointer
->	O
quoted	int
=	O
quoted	int
,	O
p	pointer
->	O
pstate	int
=	O
pstate	int
,	O
p	pointer
->	O
spaces	long
=	O
spaces	long
,	O
p	pointer
->	O
entry_pos	long
=	O
entry_pos	long
;	O
return	O
pos	long
-	O
1	int
;	O
}	O
SUBMIT_CHAR	O
(	O
p	pointer
,	O
c	char
)	O
;	O
spaces	long
=	O
0	int
;	O
}	O
}	O
else	O
if	O
(	O
c	char
==	O
delim	char
)	O
{	O
if	O
(	O
quoted	int
)	O
{	O
SUBMIT_CHAR	O
(	O
p	pointer
,	O
c	char
)	O
;	O
}	O
else	O
{	O
SUBMIT_FIELD	O
(	O
p	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
is_term	pointer
?	O
is_term	pointer
(	O
c	char
)	O
:	O
c	char
==	O
CSV_CR	int
||	O
c	char
==	O
CSV_LF	int
)	O
{	O
if	O
(	O
!	O
quoted	int
)	O
{	O
SUBMIT_FIELD	O
(	O
p	pointer
)	O
;	O
SUBMIT_ROW	O
(	O
p	pointer
,	O
(	O
unsigned	O
char	O
)	O
c	char
)	O
;	O
}	O
else	O
{	O
SUBMIT_CHAR	O
(	O
p	pointer
,	O
c	char
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
quoted	int
&&	O
(	O
is_space	pointer
?	O
is_space	pointer
(	O
c	char
)	O
:	O
c	char
==	O
CSV_SPACE	int
||	O
c	char
==	O
CSV_TAB	int
)	O
)	O
{	O
SUBMIT_CHAR	O
(	O
p	pointer
,	O
c	char
)	O
;	O
spaces	long
++	O
;	O
}	O
else	O
{	O
SUBMIT_CHAR	O
(	O
p	pointer
,	O
c	char
)	O
;	O
spaces	long
=	O
0	int
;	O
}	O
break	O
;	O
case	O
FIELD_MIGHT_HAVE_ENDED	int
:	O
if	O
(	O
c	char
==	O
delim	char
)	O
{	O
entry_pos	long
-=	O
spaces	long
+	O
1	int
;	O
SUBMIT_FIELD	O
(	O
p	pointer
)	O
;	O
}	O
else	O
if	O
(	O
is_term	pointer
?	O
is_term	pointer
(	O
c	char
)	O
:	O
c	char
==	O
CSV_CR	int
||	O
c	char
==	O
CSV_LF	int
)	O
{	O
entry_pos	long
-=	O
spaces	long
+	O
1	int
;	O
SUBMIT_FIELD	O
(	O
p	pointer
)	O
;	O
SUBMIT_ROW	O
(	O
p	pointer
,	O
(	O
unsigned	O
char	O
)	O
c	char
)	O
;	O
}	O
else	O
if	O
(	O
is_space	pointer
?	O
is_space	pointer
(	O
c	char
)	O
:	O
c	char
==	O
CSV_SPACE	int
||	O
c	char
==	O
CSV_TAB	int
)	O
{	O
SUBMIT_CHAR	O
(	O
p	pointer
,	O
c	char
)	O
;	O
spaces	long
++	O
;	O
}	O
else	O
if	O
(	O
c	char
==	O
quote	char
)	O
{	O
if	O
(	O
spaces	long
)	O
{	O
if	O
(	O
p	pointer
->	O
options	char
&	O
CSV_STRICT	int
)	O
{	O
p	pointer
->	O
status	int
=	O
CSV_EPARSE	int
;	O
p	pointer
->	O
quoted	int
=	O
quoted	int
,	O
p	pointer
->	O
pstate	int
=	O
pstate	int
,	O
p	pointer
->	O
spaces	long
=	O
spaces	long
,	O
p	pointer
->	O
entry_pos	long
=	O
entry_pos	long
;	O
return	O
pos	long
-	O
1	int
;	O
}	O
spaces	long
=	O
0	int
;	O
SUBMIT_CHAR	O
(	O
p	pointer
,	O
c	char
)	O
;	O
}	O
else	O
{	O
pstate	int
=	O
FIELD_BEGUN	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
p	pointer
->	O
options	char
&	O
CSV_STRICT	int
)	O
{	O
p	pointer
->	O
status	int
=	O
CSV_EPARSE	int
;	O
p	pointer
->	O
quoted	int
=	O
quoted	int
,	O
p	pointer
->	O
pstate	int
=	O
pstate	int
,	O
p	pointer
->	O
spaces	long
=	O
spaces	long
,	O
p	pointer
->	O
entry_pos	long
=	O
entry_pos	long
;	O
return	O
pos	long
-	O
1	int
;	O
}	O
pstate	int
=	O
FIELD_BEGUN	int
;	O
spaces	long
=	O
0	int
;	O
SUBMIT_CHAR	O
(	O
p	pointer
,	O
c	char
)	O
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
p	pointer
->	O
quoted	int
=	O
quoted	int
,	O
p	pointer
->	O
pstate	int
=	O
pstate	int
,	O
p	pointer
->	O
spaces	long
=	O
spaces	long
,	O
p	pointer
->	O
entry_pos	long
=	O
entry_pos	long
;	O
return	O
pos	long
;	O
}	O
size_t	long
csv_write	function
(	O
void	O
*	O
dest	pointer
,	O
size_t	long
dest_size	long
,	O
const	O
void	O
*	O
src	pointer
,	O
size_t	long
src_size	long
)	O
{	O
unsigned	O
char	O
*	O
cdest	pointer
=	O
dest	pointer
;	O
const	O
unsigned	O
char	O
*	O
csrc	pointer
=	O
src	pointer
;	O
size_t	long
chars	long
=	O
0	int
;	O
if	O
(	O
src	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
if	O
(	O
cdest	pointer
==	O
NULL	O
)	O
dest_size	long
=	O
0	int
;	O
if	O
(	O
dest_size	long
>	O
0	int
)	O
*	O
cdest	pointer
++	O
=	O
'"'	O
;	O
chars	long
++	O
;	O
while	O
(	O
src_size	long
)	O
{	O
if	O
(	O
*	O
csrc	pointer
==	O
'"'	O
)	O
{	O
if	O
(	O
dest_size	long
>	O
chars	long
)	O
*	O
cdest	pointer
++	O
=	O
'"'	O
;	O
if	O
(	O
chars	long
<	O
SIZE_MAX	O
)	O
chars	long
++	O
;	O
}	O
if	O
(	O
dest_size	long
>	O
chars	long
)	O
*	O
cdest	pointer
++	O
=	O
*	O
csrc	pointer
;	O
if	O
(	O
chars	long
<	O
SIZE_MAX	O
)	O
chars	long
++	O
;	O
src_size	long
--	O
;	O
csrc	pointer
++	O
;	O
}	O
if	O
(	O
dest_size	long
>	O
chars	long
)	O
*	O
cdest	pointer
=	O
'"'	O
;	O
if	O
(	O
chars	long
<	O
SIZE_MAX	O
)	O
chars	long
++	O
;	O
return	O
chars	long
;	O
}	O
int	O
csv_fwrite	function
(	O
FILE	struct
*	O
fp	pointer
,	O
const	O
void	O
*	O
src	pointer
,	O
size_t	long
src_size	long
)	O
{	O
const	O
unsigned	O
char	O
*	O
csrc	pointer
=	O
src	pointer
;	O
if	O
(	O
fp	pointer
==	O
NULL	O
||	O
src	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
if	O
(	O
fputc	function
(	O
'"'	O
,	O
fp	pointer
)	O
==	O
EOF	O
)	O
return	O
EOF	O
;	O
while	O
(	O
src_size	long
)	O
{	O
if	O
(	O
*	O
csrc	pointer
==	O
'"'	O
)	O
{	O
if	O
(	O
fputc	function
(	O
'"'	O
,	O
fp	pointer
)	O
==	O
EOF	O
)	O
return	O
EOF	O
;	O
}	O
if	O
(	O
fputc	function
(	O
*	O
csrc	pointer
,	O
fp	pointer
)	O
==	O
EOF	O
)	O
return	O
EOF	O
;	O
src_size	long
--	O
;	O
csrc	pointer
++	O
;	O
}	O
if	O
(	O
fputc	function
(	O
'"'	O
,	O
fp	pointer
)	O
==	O
EOF	O
)	O
{	O
return	O
EOF	O
;	O
}	O
return	O
0	int
;	O
}	O
size_t	long
csv_write2	function
(	O
void	O
*	O
dest	pointer
,	O
size_t	long
dest_size	long
,	O
const	O
void	O
*	O
src	pointer
,	O
size_t	long
src_size	long
,	O
unsigned	O
char	O
quote	char
)	O
{	O
unsigned	O
char	O
*	O
cdest	pointer
=	O
dest	pointer
;	O
const	O
unsigned	O
char	O
*	O
csrc	pointer
=	O
src	pointer
;	O
size_t	long
chars	long
=	O
0	int
;	O
if	O
(	O
src	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
if	O
(	O
dest	pointer
==	O
NULL	O
)	O
dest_size	long
=	O
0	int
;	O
if	O
(	O
dest_size	long
>	O
0	int
)	O
*	O
cdest	pointer
++	O
=	O
quote	char
;	O
chars	long
++	O
;	O
while	O
(	O
src_size	long
)	O
{	O
if	O
(	O
*	O
csrc	pointer
==	O
quote	char
)	O
{	O
if	O
(	O
dest_size	long
>	O
chars	long
)	O
*	O
cdest	pointer
++	O
=	O
quote	char
;	O
if	O
(	O
chars	long
<	O
SIZE_MAX	O
)	O
chars	long
++	O
;	O
}	O
if	O
(	O
dest_size	long
>	O
chars	long
)	O
*	O
cdest	pointer
++	O
=	O
*	O
csrc	pointer
;	O
if	O
(	O
chars	long
<	O
SIZE_MAX	O
)	O
chars	long
++	O
;	O
src_size	long
--	O
;	O
csrc	pointer
++	O
;	O
}	O
if	O
(	O
dest_size	long
>	O
chars	long
)	O
*	O
cdest	pointer
=	O
quote	char
;	O
if	O
(	O
chars	long
<	O
SIZE_MAX	O
)	O
chars	long
++	O
;	O
return	O
chars	long
;	O
}	O
int	O
csv_fwrite2	function
(	O
FILE	struct
*	O
fp	pointer
,	O
const	O
void	O
*	O
src	pointer
,	O
size_t	long
src_size	long
,	O
unsigned	O
char	O
quote	char
)	O
{	O
const	O
unsigned	O
char	O
*	O
csrc	pointer
=	O
src	pointer
;	O
if	O
(	O
fp	pointer
==	O
NULL	O
||	O
src	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
if	O
(	O
fputc	function
(	O
quote	char
,	O
fp	pointer
)	O
==	O
EOF	O
)	O
return	O
EOF	O
;	O
while	O
(	O
src_size	long
)	O
{	O
if	O
(	O
*	O
csrc	pointer
==	O
quote	char
)	O
{	O
if	O
(	O
fputc	function
(	O
quote	char
,	O
fp	pointer
)	O
==	O
EOF	O
)	O
return	O
EOF	O
;	O
}	O
if	O
(	O
fputc	function
(	O
*	O
csrc	pointer
,	O
fp	pointer
)	O
==	O
EOF	O
)	O
return	O
EOF	O
;	O
src_size	long
--	O
;	O
csrc	pointer
++	O
;	O
}	O
if	O
(	O
fputc	function
(	O
quote	char
,	O
fp	pointer
)	O
==	O
EOF	O
)	O
{	O
return	O
EOF	O
;	O
}	O
return	O
0	int
;	O
}	O