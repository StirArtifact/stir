void	O
mpn_toom22_mul	O
(	O
mp_ptr	*
pp	*
,	O
mp_srcptr	*
ap	*
,	O
mp_size_t	long
an	long
,	O
mp_srcptr	*
bp	*
,	O
mp_size_t	long
bn	long
,	O
mp_ptr	*
scratch	*
)	O
{	O
const	O
int	O
__gmpn_cpuvec_initialized	int
=	O
1	int
;	O
mp_size_t	long
n	long
,	O
s	array
,	O
t	long
;	O
int	O
vm1_neg	int
;	O
mp_limb_t	long
cy	long
,	O
cy2	long
;	O
mp_ptr	*
asm1	*
;	O
mp_ptr	*
bsm1	*
;	O
s	array
=	O
an	long
>>	O
1	int
;	O
n	long
=	O
an	long
-	O
s	array
;	O
t	long
=	O
bn	long
-	O
n	long
;	O
ASSERT	O
(	O
an	long
>=	O
bn	long
)	O
;	O
ASSERT	O
(	O
0	int
<	O
s	array
&&	O
s	array
<=	O
n	long
)	O
;	O
ASSERT	O
(	O
0	int
<	O
t	long
&&	O
t	long
<=	O
s	array
)	O
;	O
asm1	*
=	O
pp	*
;	O
bsm1	*
=	O
pp	*
+	O
n	long
;	O
vm1_neg	int
=	O
0	int
;	O
if	O
(	O
s	array
==	O
n	long
)	O
{	O
if	O
(	O
mpn_cmp	O
(	O
a0	O
,	O
a1	O
,	O
n	long
)	O
<	O
0	int
)	O
{	O
mpn_sub_n	O
(	O
asm1	*
,	O
a1	O
,	O
a0	O
,	O
n	long
)	O
;	O
vm1_neg	int
=	O
1	int
;	O
}	O
else	O
{	O
mpn_sub_n	O
(	O
asm1	*
,	O
a0	O
,	O
a1	O
,	O
n	long
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
mpn_zero_p	function
(	O
a0	O
+	O
s	array
,	O
n	long
-	O
s	array
)	O
&&	O
mpn_cmp	O
(	O
a0	O
,	O
a1	O
,	O
s	array
)	O
<	O
0	int
)	O
{	O
mpn_sub_n	O
(	O
asm1	*
,	O
a1	O
,	O
a0	O
,	O
s	array
)	O
;	O
MPN_ZERO	O
(	O
asm1	*
+	O
s	array
,	O
n	long
-	O
s	array
)	O
;	O
vm1_neg	int
=	O
1	int
;	O
}	O
else	O
{	O
mpn_sub	O
(	O
asm1	*
,	O
a0	O
,	O
n	long
,	O
a1	O
,	O
s	array
)	O
;	O
}	O
}	O
if	O
(	O
t	long
==	O
n	long
)	O
{	O
if	O
(	O
mpn_cmp	O
(	O
b0	O
,	O
b1	O
,	O
n	long
)	O
<	O
0	int
)	O
{	O
mpn_sub_n	O
(	O
bsm1	*
,	O
b1	O
,	O
b0	O
,	O
n	long
)	O
;	O
vm1_neg	int
^=	O
1	int
;	O
}	O
else	O
{	O
mpn_sub_n	O
(	O
bsm1	*
,	O
b0	O
,	O
b1	O
,	O
n	long
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
mpn_zero_p	function
(	O
b0	O
+	O
t	long
,	O
n	long
-	O
t	long
)	O
&&	O
mpn_cmp	O
(	O
b0	O
,	O
b1	O
,	O
t	long
)	O
<	O
0	int
)	O
{	O
mpn_sub_n	O
(	O
bsm1	*
,	O
b1	O
,	O
b0	O
,	O
t	long
)	O
;	O
MPN_ZERO	O
(	O
bsm1	*
+	O
t	long
,	O
n	long
-	O
t	long
)	O
;	O
vm1_neg	int
^=	O
1	int
;	O
}	O
else	O
{	O
mpn_sub	O
(	O
bsm1	*
,	O
b0	O
,	O
n	long
,	O
b1	O
,	O
t	long
)	O
;	O
}	O
}	O
TOOM22_MUL_N_REC	O
(	O
vm1	O
,	O
asm1	*
,	O
bsm1	*
,	O
n	long
,	O
scratch_out	O
)	O
;	O
if	O
(	O
s	array
>	O
t	long
)	O
TOOM22_MUL_REC	function
(	O
vinf	O
,	O
a1	O
,	O
s	array
,	O
b1	O
,	O
t	long
,	O
scratch_out	O
)	O
;	O
else	O
TOOM22_MUL_N_REC	function
(	O
vinf	O
,	O
a1	O
,	O
b1	O
,	O
s	long
,	O
scratch_out	O
)	O
;	O
TOOM22_MUL_N_REC	O
(	O
v0	O
,	O
ap	*
,	O
bp	*
,	O
n	long
,	O
scratch_out	O
)	O
;	O
cy	long
=	O
mpn_add_n	O
(	O
pp	*
+	O
2	int
*	O
n	long
,	O
v0	O
+	O
n	long
,	O
vinf	O
,	O
n	long
)	O
;	O
cy2	long
=	O
cy	long
+	O
mpn_add_n	O
(	O
pp	*
+	O
n	long
,	O
pp	*
+	O
2	int
*	O
n	long
,	O
v0	O
,	O
n	long
)	O
;	O
cy	long
+=	O
mpn_add	O
(	O
pp	*
+	O
2	int
*	O
n	long
,	O
pp	*
+	O
2	int
*	O
n	long
,	O
n	long
,	O
vinf	O
+	O
n	long
,	O
s	array
+	O
t	long
-	O
n	long
)	O
;	O
if	O
(	O
vm1_neg	int
)	O
cy	long
+=	O
mpn_add_n	O
(	O
pp	*
+	O
n	long
,	O
pp	*
+	O
n	long
,	O
vm1	O
,	O
2	int
*	O
n	long
)	O
;	O
else	O
cy	long
-=	O
mpn_sub_n	O
(	O
pp	*
+	O
n	long
,	O
pp	*
+	O
n	long
,	O
vm1	O
,	O
2	int
*	O
n	long
)	O
;	O
ASSERT	O
(	O
cy	long
+	O
1	int
<=	O
3	int
)	O
;	O
ASSERT	O
(	O
cy2	long
<=	O
2	int
)	O
;	O
mpn_incr_u	O
(	O
pp	*
+	O
2	int
*	O
n	long
,	O
cy2	long
)	O
;	O
if	O
(	O
LIKELY	O
(	O
cy	long
<=	O
2	int
)	O
)	O
mpn_incr_u	O
(	O
pp	*
+	O
3	int
*	O
n	long
,	O
cy	long
)	O
;	O
else	O
mpn_decr_u	O
(	O
pp	*
+	O
3	int
*	O
n	long
,	O
1	int
)	O
;	O
}	O