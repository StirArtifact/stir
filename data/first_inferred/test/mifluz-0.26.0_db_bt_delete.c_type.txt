static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: bt_delete.c,v 1.3 2000/06/28 16:47:00 loic Exp $"	pointer
;	O
int	O
CDB___bam_delete	function
(	O
dbp	pointer
,	O
txn	pointer
,	O
key	struct
,	O
flags	int
)	O
DB	struct
*	O
dbp	pointer
;	O
DB_TXN	struct
*	O
txn	pointer
;	O
DBT	struct
*	O
key	struct
;	O
u_int32_t	int
flags	int
;	O
{	O
DBC	struct
*	O
dbc	pointer
;	O
DBT	struct
lkey	struct
;	O
DBT	struct
data	pointer
;	O
u_int32_t	int
f_init	int
,	O
f_next	int
;	O
int	O
ret	int
,	O
t_ret	int
;	O
PANIC_CHECK	O
(	O
dbp	pointer
->	O
dbenv	pointer
)	O
;	O
DB_ILLEGAL_BEFORE_OPEN	O
(	O
dbp	pointer
,	O
"DB->del"	pointer
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_delchk	function
(	O
dbp	pointer
,	O
key	struct
,	O
flags	int
,	O
F_ISSET	O
(	O
dbp	pointer
,	O
DB_AM_RDONLY	int
)	O
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
dbp	pointer
->	O
cursor	pointer
(	O
dbp	pointer
,	O
txn	pointer
,	O
&	O
dbc	pointer
,	O
DB_WRITELOCK	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
DEBUG_LWRITE	O
(	O
dbc	pointer
,	O
txn	pointer
,	O
"bam_delete"	pointer
,	O
key	struct
,	O
NULL	O
,	O
flags	int
)	O
;	O
memset	function
(	O
&	O
lkey	struct
,	O
0	int
,	O
sizeof	O
(	O
lkey	struct
)	O
)	O
;	O
F_SET	O
(	O
&	O
lkey	struct
,	O
DB_DBT_USERMEM	int
|	O
DB_DBT_PARTIAL	int
)	O
;	O
memset	function
(	O
&	O
data	pointer
,	O
0	int
,	O
sizeof	O
(	O
data	pointer
)	O
)	O
;	O
F_SET	O
(	O
&	O
data	pointer
,	O
DB_DBT_USERMEM	int
|	O
DB_DBT_PARTIAL	int
)	O
;	O
f_init	int
=	O
DB_SET	int
;	O
f_next	int
=	O
DB_NEXT_DUP	int
;	O
if	O
(	O
STD_LOCKING	O
(	O
dbc	pointer
)	O
)	O
{	O
f_init	int
|=	O
DB_RMW	int
;	O
f_next	int
|=	O
DB_RMW	int
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
dbc	pointer
->	O
c_get	pointer
(	O
dbc	pointer
,	O
key	struct
,	O
&	O
data	pointer
,	O
f_init	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
dbc	pointer
->	O
c_del	pointer
(	O
dbc	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
dbc	pointer
->	O
c_get	pointer
(	O
dbc	pointer
,	O
&	O
lkey	struct
,	O
&	O
data	pointer
,	O
f_next	int
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
ret	int
==	O
DB_NOTFOUND	O
)	O
{	O
ret	int
=	O
0	int
;	O
break	O
;	O
}	O
goto	O
err	pointer
;	O
}	O
}	O
err	pointer
:	O
if	O
(	O
(	O
t_ret	int
=	O
dbc	pointer
->	O
c_close	pointer
(	O
dbc	pointer
)	O
)	O
!=	O
0	int
&&	O
ret	int
==	O
0	int
)	O
ret	int
=	O
t_ret	int
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___bam_ditem	function
(	O
dbc	pointer
,	O
h	pointer
,	O
indx	short
)	O
DBC	struct
*	O
dbc	pointer
;	O
PAGE	struct
*	O
h	pointer
;	O
u_int32_t	int
indx	short
;	O
{	O
BINTERNAL	struct
*	O
bi	pointer
;	O
BKEYDATA	struct
*	O
bk	pointer
;	O
DB	struct
*	O
dbp	pointer
;	O
u_int32_t	int
nbytes	long
;	O
int	O
ret	int
;	O
dbp	pointer
=	O
dbc	pointer
->	O
dbp	pointer
;	O
switch	O
(	O
TYPE	O
(	O
h	pointer
)	O
)	O
{	O
case	O
P_IBTREE	int
:	O
bi	pointer
=	O
GET_BINTERNAL	O
(	O
h	pointer
,	O
indx	short
)	O
;	O
switch	O
(	O
B_TYPE	O
(	O
bi	pointer
->	O
type	enum
)	O
)	O
{	O
case	O
B_DUPLICATE	int
:	O
case	O
B_KEYDATA	int
:	O
nbytes	long
=	O
BINTERNAL_SIZE	O
(	O
bi	pointer
->	O
len	short
)	O
;	O
break	O
;	O
case	O
B_OVERFLOW	int
:	O
nbytes	long
=	O
BINTERNAL_SIZE	O
(	O
bi	pointer
->	O
len	short
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_doff	function
(	O
dbc	pointer
,	O
(	O
(	O
BOVERFLOW	struct
*	O
)	O
bi	pointer
->	O
data	pointer
)	O
->	O
pgno	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
break	O
;	O
default	O
:	O
return	O
(	O
CDB___db_pgfmt	function
(	O
dbp	pointer
,	O
PGNO	O
(	O
h	pointer
)	O
)	O
)	O
;	O
}	O
break	O
;	O
case	O
P_IRECNO	int
:	O
nbytes	long
=	O
RINTERNAL_SIZE	O
;	O
break	O
;	O
case	O
P_LBTREE	int
:	O
if	O
(	O
(	O
indx	short
%	O
2	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
indx	short
+	O
P_INDX	int
<	O
(	O
u_int32_t	int
)	O
NUM_ENT	O
(	O
h	pointer
)	O
&&	O
h	pointer
->	O
inp	array
[	O
indx	short
]	O
==	O
h	pointer
->	O
inp	array
[	O
indx	short
+	O
P_INDX	int
]	O
)	O
return	O
(	O
CDB___bam_adjindx	function
(	O
dbc	pointer
,	O
h	pointer
,	O
indx	short
,	O
indx	short
+	O
O_INDX	int
,	O
0	int
)	O
)	O
;	O
if	O
(	O
indx	short
>	O
0	int
&&	O
h	pointer
->	O
inp	array
[	O
indx	short
]	O
==	O
h	pointer
->	O
inp	array
[	O
indx	short
-	O
P_INDX	int
]	O
)	O
return	O
(	O
CDB___bam_adjindx	function
(	O
dbc	pointer
,	O
h	pointer
,	O
indx	short
,	O
indx	short
-	O
P_INDX	int
,	O
0	int
)	O
)	O
;	O
}	O
case	O
P_LDUP	int
:	O
case	O
P_LRECNO	int
:	O
bk	pointer
=	O
GET_BKEYDATA	O
(	O
h	pointer
,	O
indx	short
)	O
;	O
switch	O
(	O
B_TYPE	O
(	O
bk	pointer
->	O
type	enum
)	O
)	O
{	O
case	O
B_DUPLICATE	int
:	O
nbytes	long
=	O
BOVERFLOW_SIZE	O
;	O
break	O
;	O
case	O
B_OVERFLOW	int
:	O
nbytes	long
=	O
BOVERFLOW_SIZE	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_doff	function
(	O
dbc	pointer
,	O
(	O
GET_BOVERFLOW	O
(	O
h	pointer
,	O
indx	short
)	O
)	O
->	O
pgno	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
break	O
;	O
case	O
B_KEYDATA	int
:	O
nbytes	long
=	O
BKEYDATA_SIZE	O
(	O
bk	pointer
->	O
len	short
)	O
;	O
break	O
;	O
default	O
:	O
return	O
(	O
CDB___db_pgfmt	function
(	O
dbp	pointer
,	O
PGNO	O
(	O
h	pointer
)	O
)	O
)	O
;	O
}	O
break	O
;	O
default	O
:	O
return	O
(	O
CDB___db_pgfmt	function
(	O
dbp	pointer
,	O
PGNO	O
(	O
h	pointer
)	O
)	O
)	O
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_ditem	function
(	O
dbc	pointer
,	O
h	pointer
,	O
indx	short
,	O
nbytes	long
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fset	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
h	pointer
,	O
DB_MPOOL_DIRTY	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_adjindx	function
(	O
dbc	pointer
,	O
h	pointer
,	O
indx	short
,	O
indx_copy	int
,	O
is_insert	int
)	O
DBC	struct
*	O
dbc	pointer
;	O
PAGE	struct
*	O
h	pointer
;	O
u_int32_t	int
indx	short
,	O
indx_copy	int
;	O
int	O
is_insert	int
;	O
{	O
DB	struct
*	O
dbp	pointer
;	O
db_indx_t	short
copy	short
;	O
int	O
ret	int
;	O
dbp	pointer
=	O
dbc	pointer
->	O
dbp	pointer
;	O
if	O
(	O
DB_LOGGING	O
(	O
dbc	pointer
)	O
&&	O
(	O
ret	int
=	O
CDB___bam_adj_log	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
dbc	pointer
->	O
txn	pointer
,	O
&	O
LSN	O
(	O
h	pointer
)	O
,	O
0	int
,	O
dbp	pointer
->	O
log_fileid	int
,	O
PGNO	O
(	O
h	pointer
)	O
,	O
&	O
LSN	O
(	O
h	pointer
)	O
,	O
indx	short
,	O
indx_copy	int
,	O
(	O
u_int32_t	int
)	O
is_insert	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
is_insert	int
)	O
{	O
copy	short
=	O
h	pointer
->	O
inp	array
[	O
indx_copy	int
]	O
;	O
if	O
(	O
indx	short
!=	O
NUM_ENT	O
(	O
h	pointer
)	O
)	O
memmove	function
(	O
&	O
h	pointer
->	O
inp	array
[	O
indx	short
+	O
O_INDX	int
]	O
,	O
&	O
h	pointer
->	O
inp	array
[	O
indx	short
]	O
,	O
sizeof	O
(	O
db_indx_t	short
)	O
*	O
(	O
NUM_ENT	O
(	O
h	pointer
)	O
-	O
indx	short
)	O
)	O
;	O
h	pointer
->	O
inp	array
[	O
indx	short
]	O
=	O
copy	short
;	O
++	O
NUM_ENT	O
(	O
h	pointer
)	O
;	O
}	O
else	O
{	O
--	O
NUM_ENT	O
(	O
h	pointer
)	O
;	O
if	O
(	O
indx	short
!=	O
NUM_ENT	O
(	O
h	pointer
)	O
)	O
memmove	function
(	O
&	O
h	pointer
->	O
inp	array
[	O
indx	short
]	O
,	O
&	O
h	pointer
->	O
inp	array
[	O
indx	short
+	O
O_INDX	int
]	O
,	O
sizeof	O
(	O
db_indx_t	short
)	O
*	O
(	O
NUM_ENT	O
(	O
h	pointer
)	O
-	O
indx	short
)	O
)	O
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fset	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
h	pointer
,	O
DB_MPOOL_DIRTY	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_dpages	function
(	O
dbc	pointer
,	O
stack_epg	pointer
)	O
DBC	struct
*	O
dbc	pointer
;	O
EPG	struct
*	O
stack_epg	pointer
;	O
{	O
BTREE_CURSOR	struct
*	O
cp	pointer
;	O
DB	struct
*	O
dbp	pointer
;	O
DBT	struct
a	struct
,	O
b	struct
;	O
DB_LOCK	struct
c_lock	struct
,	O
p_lock	struct
;	O
EPG	struct
*	O
epg	pointer
;	O
PAGE	struct
*	O
child	pointer
,	O
*	O
parent	pointer
;	O
db_indx_t	short
nitems	short
;	O
db_pgno_t	int
pgno	int
,	O
root_pgno	int
;	O
db_recno_t	int
rcnt	int
;	O
int	O
done	int
,	O
ret	int
,	O
t_ret	int
;	O
dbp	pointer
=	O
dbc	pointer
->	O
dbp	pointer
;	O
cp	pointer
=	O
(	O
BTREE_CURSOR	struct
*	O
)	O
dbc	pointer
->	O
internal	pointer
;	O
ret	int
=	O
0	int
;	O
for	O
(	O
epg	pointer
=	O
cp	pointer
->	O
sp	pointer
;	O
epg	pointer
<	O
stack_epg	pointer
;	O
++	O
epg	pointer
)	O
{	O
if	O
(	O
(	O
t_ret	int
=	O
CDB_memp_fput	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
epg	pointer
->	O
page	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
&&	O
ret	int
==	O
0	int
)	O
ret	int
=	O
t_ret	int
;	O
(	O
void	O
)	O
__TLPUT	O
(	O
dbc	pointer
,	O
epg	pointer
->	O
lock	struct
)	O
;	O
}	O
if	O
(	O
ret	int
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_relink	function
(	O
dbc	pointer
,	O
DB_REM_PAGE	int
,	O
cp	pointer
->	O
csp	pointer
->	O
page	pointer
,	O
NULL	O
,	O
1	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___bam_ditem	function
(	O
dbc	pointer
,	O
epg	pointer
->	O
page	pointer
,	O
epg	pointer
->	O
indx	short
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
CDB___bam_ca_di	function
(	O
dbp	pointer
,	O
PGNO	O
(	O
epg	pointer
->	O
page	pointer
)	O
,	O
epg	pointer
->	O
indx	short
,	O
-	O
1	int
)	O
;	O
pgno	int
=	O
PGNO	O
(	O
epg	pointer
->	O
page	pointer
)	O
;	O
nitems	short
=	O
NUM_ENT	O
(	O
epg	pointer
->	O
page	pointer
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
epg	pointer
->	O
page	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err_inc	O
;	O
(	O
void	O
)	O
__TLPUT	O
(	O
dbc	pointer
,	O
epg	pointer
->	O
lock	struct
)	O
;	O
while	O
(	O
++	O
epg	pointer
<=	O
cp	pointer
->	O
csp	pointer
)	O
{	O
if	O
(	O
NUM_ENT	O
(	O
epg	pointer
->	O
page	pointer
)	O
!=	O
0	int
)	O
{	O
DB_ASSERT	O
(	O
NUM_ENT	O
(	O
epg	pointer
->	O
page	pointer
)	O
==	O
1	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___bam_ditem	function
(	O
dbc	pointer
,	O
epg	pointer
->	O
page	pointer
,	O
epg	pointer
->	O
indx	short
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_free	function
(	O
dbc	pointer
,	O
epg	pointer
->	O
page	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err_inc	O
;	O
(	O
void	O
)	O
__TLPUT	O
(	O
dbc	pointer
,	O
epg	pointer
->	O
lock	struct
)	O
;	O
}	O
if	O
(	O
0	int
)	O
{	O
err_inc	O
:	O
++	O
epg	pointer
;	O
err	pointer
:	O
for	O
(	O
;	O
epg	pointer
<=	O
cp	pointer
->	O
csp	pointer
;	O
++	O
epg	pointer
)	O
{	O
(	O
void	O
)	O
CDB_memp_fput	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
epg	pointer
->	O
page	pointer
,	O
0	int
)	O
;	O
(	O
void	O
)	O
__TLPUT	O
(	O
dbc	pointer
,	O
epg	pointer
->	O
lock	struct
)	O
;	O
}	O
BT_STK_CLR	O
(	O
cp	pointer
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
BT_STK_CLR	O
(	O
cp	pointer
)	O
;	O
root_pgno	int
=	O
cp	pointer
->	O
root	int
;	O
if	O
(	O
pgno	int
!=	O
root_pgno	int
||	O
nitems	short
!=	O
1	int
)	O
return	O
(	O
0	int
)	O
;	O
for	O
(	O
done	int
=	O
0	int
;	O
!	O
done	int
;	O
)	O
{	O
parent	pointer
=	O
child	pointer
=	O
NULL	O
;	O
p_lock	struct
.	O
off	long
=	O
c_lock	struct
.	O
off	long
=	O
LOCK_INVALID	O
;	O
pgno	int
=	O
root_pgno	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_lget	function
(	O
dbc	pointer
,	O
0	int
,	O
pgno	int
,	O
DB_LOCK_WRITE	int
,	O
0	int
,	O
&	O
p_lock	struct
)	O
)	O
!=	O
0	int
)	O
goto	O
stop	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
&	O
pgno	int
,	O
0	int
,	O
&	O
parent	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
stop	O
;	O
if	O
(	O
NUM_ENT	O
(	O
parent	pointer
)	O
!=	O
1	int
)	O
goto	O
stop	O
;	O
switch	O
(	O
TYPE	O
(	O
parent	pointer
)	O
)	O
{	O
case	O
P_IBTREE	int
:	O
pgno	int
=	O
GET_BINTERNAL	O
(	O
parent	pointer
,	O
0	int
)	O
->	O
pgno	int
;	O
break	O
;	O
case	O
P_IRECNO	int
:	O
pgno	int
=	O
GET_RINTERNAL	O
(	O
parent	pointer
,	O
0	int
)	O
->	O
pgno	int
;	O
break	O
;	O
default	O
:	O
goto	O
stop	O
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_lget	function
(	O
dbc	pointer
,	O
0	int
,	O
pgno	int
,	O
DB_LOCK_WRITE	int
,	O
0	int
,	O
&	O
c_lock	struct
)	O
)	O
!=	O
0	int
)	O
goto	O
stop	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
&	O
pgno	int
,	O
0	int
,	O
&	O
child	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
stop	O
;	O
if	O
(	O
DB_LOGGING	O
(	O
dbc	pointer
)	O
)	O
{	O
memset	function
(	O
&	O
a	struct
,	O
0	int
,	O
sizeof	O
(	O
a	struct
)	O
)	O
;	O
a	struct
.	O
data	pointer
=	O
child	pointer
;	O
a	struct
.	O
size	int
=	O
dbp	pointer
->	O
pgsize	int
;	O
memset	function
(	O
&	O
b	struct
,	O
0	int
,	O
sizeof	O
(	O
b	struct
)	O
)	O
;	O
b	struct
.	O
data	pointer
=	O
P_ENTRY	O
(	O
parent	pointer
,	O
0	int
)	O
;	O
b	struct
.	O
size	int
=	O
BINTERNAL_SIZE	O
(	O
(	O
(	O
BINTERNAL	struct
*	O
)	O
b	struct
.	O
data	pointer
)	O
->	O
len	short
)	O
;	O
CDB___bam_rsplit_log	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
dbc	pointer
->	O
txn	pointer
,	O
&	O
child	pointer
->	O
lsn	struct
,	O
0	int
,	O
dbp	pointer
->	O
log_fileid	int
,	O
PGNO	O
(	O
child	pointer
)	O
,	O
&	O
a	struct
,	O
PGNO	O
(	O
parent	pointer
)	O
,	O
RE_NREC	O
(	O
parent	pointer
)	O
,	O
&	O
b	struct
,	O
&	O
parent	pointer
->	O
lsn	struct
)	O
;	O
}	O
COMPQUIET	O
(	O
rcnt	int
,	O
0	int
)	O
;	O
if	O
(	O
F_ISSET	O
(	O
cp	pointer
,	O
C_RECNUM	int
)	O
&&	O
LEVEL	O
(	O
child	pointer
)	O
>	O
LEAFLEVEL	int
)	O
rcnt	int
=	O
RE_NREC	O
(	O
parent	pointer
)	O
;	O
memcpy	function
(	O
parent	pointer
,	O
child	pointer
,	O
dbp	pointer
->	O
pgsize	int
)	O
;	O
PGNO	O
(	O
parent	pointer
)	O
=	O
root_pgno	int
;	O
if	O
(	O
F_ISSET	O
(	O
cp	pointer
,	O
C_RECNUM	int
)	O
&&	O
LEVEL	O
(	O
child	pointer
)	O
>	O
LEAFLEVEL	int
)	O
RE_NREC_SET	O
(	O
parent	pointer
,	O
rcnt	int
)	O
;	O
CDB_memp_fset	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
parent	pointer
,	O
DB_MPOOL_DIRTY	int
)	O
;	O
CDB_memp_fset	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
child	pointer
,	O
DB_MPOOL_DIRTY	int
)	O
;	O
CDB___bam_ca_rsplit	function
(	O
dbp	pointer
,	O
PGNO	O
(	O
child	pointer
)	O
,	O
root_pgno	int
)	O
;	O
(	O
void	O
)	O
CDB___db_free	function
(	O
dbc	pointer
,	O
child	pointer
)	O
;	O
child	pointer
=	O
NULL	O
;	O
if	O
(	O
0	int
)	O
{	O
stop	O
:	O
done	int
=	O
1	int
;	O
}	O
if	O
(	O
p_lock	struct
.	O
off	long
!=	O
LOCK_INVALID	O
)	O
(	O
void	O
)	O
__TLPUT	O
(	O
dbc	pointer
,	O
p_lock	struct
)	O
;	O
if	O
(	O
parent	pointer
!=	O
NULL	O
)	O
CDB_memp_fput	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
parent	pointer
,	O
0	int
)	O
;	O
if	O
(	O
c_lock	struct
.	O
off	long
!=	O
LOCK_INVALID	O
)	O
(	O
void	O
)	O
__TLPUT	O
(	O
dbc	pointer
,	O
c_lock	struct
)	O
;	O
if	O
(	O
child	pointer
!=	O
NULL	O
)	O
CDB_memp_fput	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
child	pointer
,	O
0	int
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
