void	O
_pl_a_paint_path	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pen_type	int
==	O
0	int
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_type	int
==	O
0	int
)	O
return	O
;	O
switch	O
(	O
(	O
int	O
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
type	enum
)	O
{	O
case	O
(	O
int	O
)	O
PATH_SEGMENT_LIST	int
:	O
{	O
int	O
i	int
,	O
numpoints	int
;	O
bool	enum
closed	enum
;	O
double	O
linewidth	double
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
==	O
0	int
)	O
break	O
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
==	O
1	int
)	O
break	O
;	O
if	O
(	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
>=	O
3	int
)	O
&&	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
-	O
1	int
]	O
.	O
p	struct
.	O
x	double
==	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
0	int
]	O
.	O
p	struct
.	O
x	double
)	O
&&	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
-	O
1	int
]	O
.	O
p	struct
.	O
y	double
==	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
0	int
]	O
.	O
p	struct
.	O
y	double
)	O
)	O
closed	enum
=	O
true	int
;	O
else	O
closed	enum
=	O
false	int
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_type	int
)	O
_pl_a_set_fill_color	function
(	O
R___	O
(	O
_plotter	pointer
)	O
false	int
)	O
;	O
else	O
_pl_a_set_fill_color	function
(	O
R___	O
(	O
_plotter	pointer
)	O
true	int
)	O
;	O
_pl_a_set_pen_color	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_pl_a_set_attributes	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
linewidth	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_width	double
;	O
numpoints	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
numpoints	int
;	O
i	int
++	O
)	O
{	O
bool	enum
smooth_join_point	enum
;	O
if	O
(	O
!	O
closed	enum
&&	O
(	O
i	int
==	O
0	int
||	O
i	int
==	O
numpoints	int
-	O
1	int
)	O
)	O
{	O
double	O
xcurrent	double
,	O
ycurrent	double
,	O
xother	double
,	O
yother	double
;	O
smooth_join_point	enum
=	O
false	int
;	O
xcurrent	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
x	double
;	O
ycurrent	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
y	double
;	O
if	O
(	O
i	int
==	O
0	int
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
+	O
1	int
]	O
.	O
type	enum
==	O
S_CUBIC	int
)	O
{	O
xother	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
+	O
1	int
]	O
.	O
pc	struct
.	O
x	double
;	O
yother	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
+	O
1	int
]	O
.	O
pc	struct
.	O
y	double
;	O
}	O
else	O
{	O
xother	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
+	O
1	int
]	O
.	O
p	struct
.	O
x	double
;	O
yother	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
+	O
1	int
]	O
.	O
p	struct
.	O
y	double
;	O
}	O
}	O
else	O
{	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
type	enum
==	O
S_CUBIC	int
)	O
{	O
xother	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
pd	struct
.	O
x	double
;	O
yother	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
pd	struct
.	O
y	double
;	O
}	O
else	O
{	O
xother	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
-	O
1	int
]	O
.	O
p	struct
.	O
x	double
;	O
yother	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
-	O
1	int
]	O
.	O
p	struct
.	O
y	double
;	O
}	O
}	O
_set_line_end_bbox	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
xcurrent	double
,	O
ycurrent	double
,	O
xother	double
,	O
yother	double
,	O
linewidth	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
cap_type	int
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
m	array
)	O
;	O
}	O
else	O
{	O
int	O
a	int
,	O
b	int
,	O
c	char
;	O
double	O
xcurrent	double
,	O
ycurrent	double
,	O
xleft	double
,	O
yleft	double
,	O
xright	double
,	O
yright	double
;	O
if	O
(	O
closed	enum
&&	O
(	O
i	int
==	O
0	int
||	O
i	int
==	O
numpoints	int
-	O
1	int
)	O
)	O
{	O
a	int
=	O
numpoints	int
-	O
2	int
;	O
b	int
=	O
numpoints	int
-	O
1	int
;	O
c	char
=	O
1	int
;	O
}	O
else	O
{	O
a	int
=	O
i	int
-	O
1	int
;	O
b	int
=	O
i	int
;	O
c	char
=	O
i	int
+	O
1	int
;	O
}	O
xcurrent	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
b	int
]	O
.	O
p	struct
.	O
x	double
;	O
ycurrent	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
b	int
]	O
.	O
p	struct
.	O
y	double
;	O
switch	O
(	O
(	O
int	O
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
b	int
]	O
.	O
type	enum
)	O
{	O
case	O
(	O
int	O
)	O
S_LINE	int
:	O
default	O
:	O
xleft	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
a	int
]	O
.	O
p	struct
.	O
x	double
;	O
yleft	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
a	int
]	O
.	O
p	struct
.	O
y	double
;	O
break	O
;	O
case	O
(	O
int	O
)	O
S_CUBIC	int
:	O
xleft	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
b	int
]	O
.	O
pd	struct
.	O
x	double
;	O
yleft	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
b	int
]	O
.	O
pd	struct
.	O
y	double
;	O
break	O
;	O
}	O
switch	O
(	O
(	O
int	O
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
c	char
]	O
.	O
type	enum
)	O
{	O
case	O
(	O
int	O
)	O
S_LINE	int
:	O
default	O
:	O
xright	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
c	char
]	O
.	O
p	struct
.	O
x	double
;	O
yright	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
c	char
]	O
.	O
p	struct
.	O
y	double
;	O
break	O
;	O
case	O
(	O
int	O
)	O
S_CUBIC	int
:	O
xright	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
c	char
]	O
.	O
pc	struct
.	O
x	double
;	O
yright	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
c	char
]	O
.	O
pc	struct
.	O
y	double
;	O
break	O
;	O
}	O
_set_line_join_bbox	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
xleft	double
,	O
yleft	double
,	O
xcurrent	double
,	O
ycurrent	double
,	O
xright	double
,	O
yright	double
,	O
linewidth	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
join_type	int
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
miter_limit	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
m	array
)	O
;	O
{	O
double	O
ux	double
,	O
uy	double
,	O
vx	double
,	O
vy	double
,	O
cross	double
,	O
dot	double
,	O
uselfdot	double
,	O
vselfdot	double
;	O
ux	double
=	O
xleft	double
-	O
xcurrent	double
;	O
uy	double
=	O
yleft	double
-	O
ycurrent	double
;	O
vx	double
=	O
xright	double
-	O
xcurrent	double
;	O
vy	double
=	O
yright	double
-	O
ycurrent	double
;	O
cross	double
=	O
ux	double
*	O
vy	double
-	O
uy	double
*	O
vx	double
;	O
dot	double
=	O
ux	double
*	O
vx	double
+	O
uy	double
*	O
vy	double
;	O
uselfdot	double
=	O
ux	double
*	O
ux	double
+	O
uy	double
*	O
uy	double
;	O
vselfdot	double
=	O
vx	double
*	O
vx	double
+	O
vy	double
*	O
vy	double
;	O
if	O
(	O
cross	double
*	O
cross	double
<	O
MAX_SQUARED_SINE	O
*	O
uselfdot	double
*	O
vselfdot	double
&&	O
dot	double
<	O
0.0	int
)	O
smooth_join_point	enum
=	O
true	int
;	O
else	O
smooth_join_point	enum
=	O
false	int
;	O
}	O
}	O
if	O
(	O
i	int
!=	O
0	int
&&	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
)	O
[	O
i	int
]	O
.	O
type	enum
==	O
S_CUBIC	int
)	O
{	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"%.4f %.4f %.4f %.4f "	pointer
,	O
XD	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
pc	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
pc	struct
.	O
y	double
)	O
,	O
YD	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
pc	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
pc	struct
.	O
y	double
)	O
,	O
XD	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
pd	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
pd	struct
.	O
y	double
)	O
,	O
YD	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
pd	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
pd	struct
.	O
y	double
)	O
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
_set_bezier3_bbox	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
-	O
1	int
]	O
.	O
p	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
-	O
1	int
]	O
.	O
p	struct
.	O
y	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
pc	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
pc	struct
.	O
y	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
pd	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
pd	struct
.	O
y	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
y	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
device_line_width	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
m	array
)	O
;	O
}	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"%.4f %.4f "	pointer
,	O
XD	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
y	double
)	O
,	O
YD	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
y	double
)	O
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
if	O
(	O
i	int
==	O
0	int
)	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"m\n"	pointer
)	O
;	O
else	O
switch	O
(	O
(	O
int	O
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
.	O
type	enum
)	O
{	O
case	O
(	O
int	O
)	O
S_LINE	int
:	O
default	O
:	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
smooth_join_point	enum
?	O
"l\n"	pointer
:	O
"L\n"	pointer
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
S_CUBIC	int
:	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
smooth_join_point	enum
?	O
"c\n"	pointer
:	O
"C\n"	pointer
)	O
;	O
break	O
;	O
}	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pen_type	int
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_type	int
)	O
{	O
if	O
(	O
closed	enum
)	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"b\n"	pointer
)	O
;	O
else	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"B\n"	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
closed	enum
)	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"s\n"	pointer
)	O
;	O
else	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"S\n"	pointer
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_type	int
)	O
{	O
if	O
(	O
closed	enum
)	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"f\n"	pointer
)	O
;	O
else	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"F\n"	pointer
)	O
;	O
}	O
}	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
bool	enum
_pl_a_paint_paths	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
return	O
false	int
;	O
}	O