void	O
umac64_set_key	function
(	O
struct	O
umac64_ctx	struct
*	O
ctx	pointer
,	O
const	O
uint8_t	char
*	O
key	pointer
)	O
{	O
_umac_set_key	O
(	O
ctx	pointer
->	O
l1_key	array
,	O
ctx	pointer
->	O
l2_key	array
,	O
ctx	pointer
->	O
l3_key1	array
,	O
ctx	pointer
->	O
l3_key2	array
,	O
&	O
ctx	pointer
->	O
pdf_key	struct
,	O
key	pointer
,	O
2	int
)	O
;	O
memset	function
(	O
ctx	pointer
->	O
nonce	array
,	O
0	int
,	O
sizeof	O
(	O
ctx	pointer
->	O
nonce	array
)	O
)	O
;	O
ctx	pointer
->	O
nonce_low	short
=	O
0	int
;	O
ctx	pointer
->	O
nonce_length	short
=	O
sizeof	O
(	O
ctx	pointer
->	O
nonce	array
)	O
;	O
ctx	pointer
->	O
count	long
=	O
ctx	pointer
->	O
index	function
=	O
0	int
;	O
}	O
void	O
umac64_set_nonce	O
(	O
struct	O
umac64_ctx	struct
*	O
ctx	pointer
,	O
size_t	long
nonce_length	long
,	O
const	O
uint8_t	char
*	O
nonce	pointer
)	O
{	O
assert	O
(	O
nonce_length	short
>	O
0	int
)	O
;	O
assert	O
(	O
nonce_length	short
<=	O
AES_BLOCK_SIZE	int
)	O
;	O
memcpy	function
(	O
ctx	pointer
->	O
nonce	array
,	O
nonce	array
,	O
nonce_length	short
)	O
;	O
memset	function
(	O
ctx	pointer
->	O
nonce	array
+	O
nonce_length	short
,	O
0	int
,	O
AES_BLOCK_SIZE	int
-	O
nonce_length	short
)	O
;	O
ctx	pointer
->	O
nonce_low	short
=	O
ctx	pointer
->	O
nonce	array
[	O
nonce_length	short
-	O
1	int
]	O
&	O
1	int
;	O
ctx	pointer
->	O
nonce	array
[	O
nonce_length	short
-	O
1	int
]	O
&=	O
~	O
1	int
;	O
ctx	pointer
->	O
nonce_length	short
=	O
nonce_length	short
;	O
}	O
void	O
umac64_update	O
(	O
struct	O
umac64_ctx	struct
*	O
ctx	pointer
,	O
size_t	long
length	long
,	O
const	O
uint8_t	char
*	O
data	pointer
)	O
{	O
MD_UPDATE	O
(	O
ctx	pointer
,	O
length	long
,	O
data	pointer
,	O
UMAC64_BLOCK	pointer
,	O
(	O
void	O
)	O
0	int
)	O
;	O
}	O
void	O
umac64_digest	O
(	O
struct	O
umac64_ctx	struct
*	O
ctx	pointer
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
digest	pointer
)	O
{	O
uint32_t	int
tag	array
[	O
2	int
]	O
;	O
uint32_t	int
*	O
pad	pointer
;	O
assert	O
(	O
length	long
>	O
0	int
)	O
;	O
assert	O
(	O
length	long
<=	O
8	int
)	O
;	O
if	O
(	O
ctx	pointer
->	O
index	function
>	O
0	int
||	O
ctx	pointer
->	O
count	long
==	O
0	int
)	O
{	O
uint64_t	long
y	long
[	O
2	int
]	O
;	O
unsigned	O
pad	pointer
=	O
(	O
ctx	pointer
->	O
index	function
>	O
0	int
)	O
?	O
31	int
&	O
-	O
ctx	pointer
->	O
index	function
:	O
32	int
;	O
memset	function
(	O
ctx	pointer
->	O
block	array
+	O
ctx	pointer
->	O
index	function
,	O
0	int
,	O
pad	pointer
)	O
;	O
_umac_nh_n	O
(	O
y	long
,	O
2	int
,	O
ctx	pointer
->	O
l1_key	array
,	O
ctx	pointer
->	O
index	function
+	O
pad	pointer
,	O
ctx	pointer
->	O
block	array
)	O
;	O
y	long
[	O
0	int
]	O
+=	O
8	int
*	O
ctx	pointer
->	O
index	function
;	O
y	long
[	O
1	int
]	O
+=	O
8	int
*	O
ctx	pointer
->	O
index	function
;	O
_umac_l2	O
(	O
ctx	pointer
->	O
l2_key	array
,	O
ctx	pointer
->	O
l2_state	array
,	O
2	int
,	O
ctx	pointer
->	O
count	long
++	O
,	O
y	long
)	O
;	O
}	O
assert	O
(	O
ctx	pointer
->	O
count	long
>	O
0	int
)	O
;	O
if	O
(	O
!	O
(	O
ctx	pointer
->	O
nonce_low	short
&	O
_UMAC_NONCE_CACHED	int
)	O
)	O
{	O
aes128_encrypt	O
(	O
&	O
ctx	pointer
->	O
pdf_key	struct
,	O
AES_BLOCK_SIZE	int
,	O
(	O
uint8_t	char
*	O
)	O
ctx	pointer
->	O
pad_cache	array
,	O
ctx	pointer
->	O
nonce	array
)	O
;	O
ctx	pointer
->	O
nonce_low	short
|=	O
_UMAC_NONCE_CACHED	int
;	O
}	O
pad	pointer
=	O
ctx	pointer
->	O
pad_cache	array
+	O
2	int
*	O
(	O
ctx	pointer
->	O
nonce_low	short
&	O
1	int
)	O
;	O
ctx	pointer
->	O
nonce_low	short
++	O
;	O
if	O
(	O
!	O
(	O
ctx	pointer
->	O
nonce_low	short
&	O
1	int
)	O
)	O
{	O
unsigned	O
i	int
=	O
ctx	pointer
->	O
nonce_length	short
-	O
1	int
;	O
ctx	pointer
->	O
nonce_low	short
=	O
0	int
;	O
ctx	pointer
->	O
nonce	array
[	O
i	int
]	O
+=	O
2	int
;	O
if	O
(	O
ctx	pointer
->	O
nonce	array
[	O
i	int
]	O
==	O
0	int
&&	O
i	int
>	O
0	int
)	O
INCREMENT	O
(	O
i	int
,	O
ctx	pointer
->	O
nonce	array
)	O
;	O
}	O
_umac_l2_final	O
(	O
ctx	pointer
->	O
l2_key	array
,	O
ctx	pointer
->	O
l2_state	array
,	O
2	int
,	O
ctx	pointer
->	O
count	long
)	O
;	O
tag	array
[	O
0	int
]	O
=	O
pad	pointer
[	O
0	int
]	O
^	O
ctx	pointer
->	O
l3_key2	array
[	O
0	int
]	O
^	O
_umac_l3	O
(	O
ctx	pointer
->	O
l3_key1	array
,	O
ctx	pointer
->	O
l2_state	array
)	O
;	O
tag	array
[	O
1	int
]	O
=	O
pad	pointer
[	O
1	int
]	O
^	O
ctx	pointer
->	O
l3_key2	array
[	O
1	int
]	O
^	O
_umac_l3	O
(	O
ctx	pointer
->	O
l3_key1	array
+	O
8	int
,	O
ctx	pointer
->	O
l2_state	array
+	O
2	int
)	O
;	O
memcpy	function
(	O
digest	pointer
,	O
tag	array
,	O
length	long
)	O
;	O
ctx	pointer
->	O
count	long
=	O
ctx	pointer
->	O
index	function
=	O
0	int
;	O
}	O