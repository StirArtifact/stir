local	O
file_t	O
zfile	O
;	O
local	O
unsigned	O
short	O
bi_buf	int
;	O
local	O
int	O
bi_valid	int
;	O
int	O
(	O
*	O
read_buf	pointer
)	O
(	O
char	O
*	O
buf	pointer
,	O
unsigned	O
size	int
)	O
;	O
void	O
bi_init	function
(	O
zipfile	int
)	O
file_t	O
zipfile	int
;	O
{	O
zfile	pointer
=	O
zipfile	int
;	O
bi_buf	int
=	O
0	int
;	O
bi_valid	int
=	O
0	int
;	O
if	O
(	O
zfile	pointer
!=	O
NO_FILE	int
)	O
{	O
read_buf	int
=	O
file_read	int
;	O
}	O
}	O
void	O
send_bits	function
(	O
value	pointer
,	O
length	int
)	O
int	O
value	int
;	O
int	O
length	int
;	O
{	O
if	O
(	O
bi_valid	int
>	O
(	O
int	O
)	O
Buf_size	int
-	O
length	int
)	O
{	O
bi_buf	int
|=	O
(	O
value	int
<<	O
bi_valid	int
)	O
;	O
put_short	function
(	O
bi_buf	int
)	O
;	O
bi_buf	int
=	O
(	O
ush	int
)	O
value	int
>>	O
(	O
Buf_size	int
-	O
bi_valid	int
)	O
;	O
bi_valid	int
+=	O
length	int
-	O
Buf_size	int
;	O
}	O
else	O
{	O
bi_buf	int
|=	O
value	int
<<	O
bi_valid	int
;	O
bi_valid	int
+=	O
length	int
;	O
}	O
}	O
unsigned	O
bi_reverse	function
(	O
code	int
,	O
len	int
)	O
unsigned	O
code	int
;	O
int	O
len	int
;	O
{	O
register	O
unsigned	O
res	int
=	O
0	int
;	O
do	O
{	O
res	int
|=	O
code	int
&	O
1	int
;	O
code	int
>>=	O
1	int
,	O
res	int
<<=	O
1	int
;	O
}	O
while	O
(	O
--	O
len	int
>	O
0	int
)	O
;	O
return	O
res	int
>>	O
1	int
;	O
}	O
void	O
bi_windup	function
(	O
)	O
{	O
if	O
(	O
bi_valid	int
>	O
8	int
)	O
{	O
put_short	function
(	O
bi_buf	pointer
)	O
;	O
}	O
else	O
if	O
(	O
bi_valid	int
>	O
0	int
)	O
{	O
put_byte	O
(	O
bi_buf	pointer
)	O
;	O
}	O
bi_buf	int
=	O
0	int
;	O
bi_valid	int
=	O
0	int
;	O
}	O
void	O
copy_block	function
(	O
buf	pointer
,	O
len	int
,	O
header	pointer
)	O
char	O
*	O
buf	pointer
;	O
unsigned	O
len	int
;	O
int	O
header	pointer
;	O
{	O
bi_windup	function
(	O
)	O
;	O
if	O
(	O
header	pointer
)	O
{	O
put_short	function
(	O
(	O
ush	int
)	O
len	int
)	O
;	O
put_short	function
(	O
(	O
ush	int
)	O
~	O
len	int
)	O
;	O
}	O
while	O
(	O
len	int
--	O
)	O
{	O
put_byte	O
(	O
*	O
buf	pointer
++	O
)	O
;	O
}	O
}	O