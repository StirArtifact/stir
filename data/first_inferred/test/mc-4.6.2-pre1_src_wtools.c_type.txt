Listbox	struct
*	O
create_listbox_window	function
(	O
int	O
cols	int
,	O
int	O
lines	pointer
,	O
const	O
char	O
*	O
title	pointer
,	O
const	O
char	O
*	O
help	pointer
)	O
{	O
int	O
xpos	int
,	O
ypos	int
,	O
len	int
;	O
Listbox	struct
*	O
listbox	pointer
=	O
g_new	O
(	O
Listbox	struct
,	O
1	int
)	O
;	O
const	O
char	O
*	O
cancel_string	pointer
=	O
_	O
(	O
"&Cancel"	pointer
)	O
;	O
lines	pointer
=	O
(	O
lines	pointer
>	O
LINES	O
-	O
6	int
)	O
?	O
LINES	O
-	O
6	int
:	O
lines	pointer
;	O
if	O
(	O
title	pointer
&&	O
(	O
cols	int
<	O
(	O
len	int
=	O
strlen	function
(	O
title	pointer
)	O
+	O
2	int
)	O
)	O
)	O
cols	int
=	O
len	int
;	O
if	O
(	O
cols	int
<	O
(	O
len	int
=	O
strlen	function
(	O
cancel_string	pointer
)	O
+	O
3	int
)	O
)	O
cols	int
=	O
len	int
;	O
cols	int
=	O
cols	int
>	O
COLS	O
-	O
6	int
?	O
COLS	O
-	O
6	int
:	O
cols	int
;	O
xpos	int
=	O
(	O
COLS	O
-	O
cols	int
)	O
/	O
2	int
;	O
ypos	int
=	O
(	O
LINES	O
-	O
lines	pointer
)	O
/	O
2	int
-	O
2	int
;	O
listbox	pointer
->	O
dlg	pointer
=	O
create_dlg	function
(	O
ypos	int
,	O
xpos	int
,	O
lines	pointer
+	O
6	int
,	O
cols	int
+	O
4	int
,	O
dialog_colors	array
,	O
NULL	O
,	O
help	pointer
,	O
title	pointer
,	O
DLG_CENTER	O
|	O
DLG_REVERSE	O
)	O
;	O
listbox	pointer
->	O
list	pointer
=	O
listbox_new	function
(	O
2	int
,	O
2	int
,	O
cols	int
,	O
lines	pointer
,	O
0	int
)	O
;	O
add_widget	function
(	O
listbox	pointer
->	O
dlg	pointer
,	O
button_new	function
(	O
lines	pointer
+	O
3	int
,	O
(	O
cols	int
/	O
2	int
+	O
2	int
)	O
-	O
len	int
/	O
2	int
,	O
B_CANCEL	int
,	O
NORMAL_BUTTON	int
,	O
cancel_string	pointer
,	O
0	int
)	O
)	O
;	O
add_widget	function
(	O
listbox	pointer
->	O
dlg	pointer
,	O
listbox	pointer
->	O
list	pointer
)	O
;	O
return	O
listbox	pointer
;	O
}	O
int	O
run_listbox	function
(	O
Listbox	struct
*	O
l	pointer
)	O
{	O
int	O
val	int
;	O
run_dlg	function
(	O
l	pointer
->	O
dlg	pointer
)	O
;	O
if	O
(	O
l	pointer
->	O
dlg	pointer
->	O
ret_value	int
==	O
B_CANCEL	int
)	O
val	int
=	O
-	O
1	int
;	O
else	O
val	int
=	O
l	pointer
->	O
list	pointer
->	O
pos	pointer
;	O
destroy_dlg	function
(	O
l	pointer
->	O
dlg	pointer
)	O
;	O
g_free	function
(	O
l	pointer
)	O
;	O
return	O
val	int
;	O
}	O
static	O
Dlg_head	struct
*	O
last_query_dlg	pointer
;	O
static	O
int	O
sel_pos	int
=	O
0	int
;	O
int	O
query_dialog	function
(	O
const	O
char	O
*	O
header	pointer
,	O
const	O
char	O
*	O
text	pointer
,	O
int	O
flags	enum
,	O
int	O
count	int
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
Dlg_head	struct
*	O
query_dlg	pointer
;	O
WButton	struct
*	O
button	pointer
;	O
WButton	struct
*	O
defbutton	pointer
=	O
NULL	O
;	O
int	O
win_len	int
=	O
0	int
;	O
int	O
i	array
;	O
int	O
result	long
=	O
-	O
1	int
;	O
int	O
xpos	int
,	O
ypos	int
;	O
int	O
cols	int
,	O
lines	pointer
;	O
char	O
*	O
cur_name	pointer
;	O
static	O
const	O
int	O
*	O
query_colors	pointer
;	O
if	O
(	O
flags	enum
&	O
D_ERROR	int
)	O
query_colors	pointer
=	O
alarm_colors	array
;	O
else	O
query_colors	pointer
=	O
dialog_colors	array
;	O
if	O
(	O
header	pointer
==	O
MSG_ERROR	O
)	O
header	pointer
=	O
_	O
(	O
"Error"	pointer
)	O
;	O
if	O
(	O
count	int
>	O
0	int
)	O
{	O
va_start	O
(	O
ap	array
,	O
count	int
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
count	int
;	O
i	array
++	O
)	O
{	O
char	O
*	O
cp	pointer
=	O
va_arg	O
(	O
ap	array
,	O
char	O
*	O
)	O
;	O
win_len	int
+=	O
strlen	function
(	O
cp	pointer
)	O
+	O
6	int
;	O
if	O
(	O
strchr	function
(	O
cp	pointer
,	O
'&'	O
)	O
!=	O
NULL	O
)	O
win_len	int
--	O
;	O
}	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
msglen	function
(	O
text	pointer
,	O
&	O
lines	pointer
,	O
&	O
cols	int
)	O
;	O
cols	int
=	O
6	int
+	O
max	long
(	O
win_len	int
,	O
max	long
(	O
(	O
int	O
)	O
strlen	function
(	O
header	pointer
)	O
,	O
cols	int
)	O
)	O
;	O
lines	pointer
+=	O
4	int
+	O
(	O
count	int
>	O
0	int
?	O
2	int
:	O
0	int
)	O
;	O
xpos	int
=	O
COLS	O
/	O
2	int
-	O
cols	int
/	O
2	int
;	O
ypos	int
=	O
LINES	O
/	O
3	int
-	O
(	O
lines	pointer
-	O
3	int
)	O
/	O
2	int
;	O
query_dlg	pointer
=	O
create_dlg	function
(	O
ypos	int
,	O
xpos	int
,	O
lines	pointer
,	O
cols	int
,	O
query_colors	pointer
,	O
NULL	O
,	O
"[QueryBox]"	pointer
,	O
header	pointer
,	O
DLG_NONE	O
)	O
;	O
if	O
(	O
count	int
>	O
0	int
)	O
{	O
cols	int
=	O
(	O
cols	int
-	O
win_len	int
-	O
2	int
)	O
/	O
2	int
+	O
2	int
;	O
va_start	O
(	O
ap	array
,	O
count	int
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
count	int
;	O
i	array
++	O
)	O
{	O
cur_name	pointer
=	O
va_arg	O
(	O
ap	array
,	O
char	O
*	O
)	O
;	O
xpos	int
=	O
strlen	function
(	O
cur_name	pointer
)	O
+	O
6	int
;	O
if	O
(	O
strchr	function
(	O
cur_name	pointer
,	O
'&'	O
)	O
!=	O
NULL	O
)	O
xpos	int
--	O
;	O
button	pointer
=	O
button_new	function
(	O
lines	pointer
-	O
3	int
,	O
cols	int
,	O
B_USER	int
+	O
i	array
,	O
NORMAL_BUTTON	int
,	O
cur_name	pointer
,	O
0	int
)	O
;	O
add_widget	function
(	O
query_dlg	pointer
,	O
button	pointer
)	O
;	O
cols	int
+=	O
xpos	int
;	O
if	O
(	O
i	array
==	O
sel_pos	int
)	O
defbutton	pointer
=	O
button	pointer
;	O
}	O
va_end	O
(	O
ap	array
)	O
;	O
add_widget	function
(	O
query_dlg	pointer
,	O
label_new	function
(	O
2	int
,	O
3	int
,	O
text	pointer
)	O
)	O
;	O
if	O
(	O
defbutton	pointer
)	O
dlg_select_widget	function
(	O
defbutton	pointer
)	O
;	O
run_dlg	function
(	O
query_dlg	pointer
)	O
;	O
switch	O
(	O
query_dlg	pointer
->	O
ret_value	int
)	O
{	O
case	O
B_CANCEL	int
:	O
break	O
;	O
default	O
:	O
result	long
=	O
query_dlg	pointer
->	O
ret_value	int
-	O
B_USER	int
;	O
}	O
destroy_dlg	function
(	O
query_dlg	pointer
)	O
;	O
}	O
else	O
{	O
add_widget	function
(	O
query_dlg	pointer
,	O
label_new	function
(	O
2	int
,	O
3	int
,	O
text	pointer
)	O
)	O
;	O
add_widget	function
(	O
query_dlg	pointer
,	O
button_new	function
(	O
0	int
,	O
0	int
,	O
0	int
,	O
HIDDEN_BUTTON	int
,	O
"-"	pointer
,	O
0	int
)	O
)	O
;	O
last_query_dlg	pointer
=	O
query_dlg	pointer
;	O
}	O
sel_pos	int
=	O
0	int
;	O
return	O
result	long
;	O
}	O
void	O
query_set_sel	function
(	O
int	O
new_sel	int
)	O
{	O
sel_pos	int
=	O
new_sel	int
;	O
}	O
static	O
struct	O
Dlg_head	struct
*	O
do_create_message	function
(	O
int	O
flags	enum
,	O
const	O
char	O
*	O
title	pointer
,	O
const	O
char	O
*	O
text	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
Dlg_head	struct
*	O
d	double
;	O
p	pointer
=	O
g_strconcat	function
(	O
"\n"	pointer
,	O
text	pointer
,	O
"\n"	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
query_dialog	function
(	O
title	pointer
,	O
p	pointer
,	O
flags	enum
,	O
0	int
)	O
;	O
d	double
=	O
last_query_dlg	pointer
;	O
init_dlg	function
(	O
d	double
)	O
;	O
g_free	function
(	O
p	pointer
)	O
;	O
return	O
d	double
;	O
}	O
struct	O
Dlg_head	struct
*	O
create_message	function
(	O
int	O
flags	enum
,	O
const	O
char	O
*	O
title	pointer
,	O
const	O
char	O
*	O
text	pointer
,	O
...	O
)	O
{	O
va_list	array
args	array
;	O
Dlg_head	struct
*	O
d	double
;	O
char	O
*	O
p	pointer
;	O
va_start	O
(	O
args	array
,	O
text	pointer
)	O
;	O
p	pointer
=	O
g_strdup_vprintf	function
(	O
text	pointer
,	O
args	array
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
d	double
=	O
do_create_message	function
(	O
flags	enum
,	O
title	pointer
,	O
p	pointer
)	O
;	O
g_free	function
(	O
p	pointer
)	O
;	O
return	O
d	double
;	O
}	O
static	O
void	O
fg_message	function
(	O
int	O
flags	enum
,	O
const	O
char	O
*	O
title	pointer
,	O
const	O
char	O
*	O
text	pointer
)	O
{	O
Dlg_head	struct
*	O
d	double
;	O
d	double
=	O
do_create_message	function
(	O
flags	enum
,	O
title	pointer
,	O
text	pointer
)	O
;	O
mi_getch	function
(	O
)	O
;	O
dlg_run_done	function
(	O
d	double
)	O
;	O
destroy_dlg	function
(	O
d	double
)	O
;	O
}	O
static	O
void	O
bg_message	function
(	O
int	O
dummy	array
,	O
int	O
*	O
flags	enum
,	O
char	O
*	O
title	pointer
,	O
const	O
char	O
*	O
text	pointer
)	O
{	O
(	O
void	O
)	O
dummy	array
;	O
title	pointer
=	O
g_strconcat	function
(	O
_	O
(	O
"Background process:"	pointer
)	O
,	O
" "	pointer
,	O
title	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
fg_message	function
(	O
*	O
flags	enum
,	O
title	pointer
,	O
text	pointer
)	O
;	O
g_free	function
(	O
title	pointer
)	O
;	O
}	O
void	O
message	pointer
(	O
int	O
flags	enum
,	O
const	O
char	O
*	O
title	pointer
,	O
const	O
char	O
*	O
text	pointer
,	O
...	O
)	O
{	O
char	O
*	O
p	pointer
;	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
text	pointer
)	O
;	O
p	pointer
=	O
g_strdup_vprintf	function
(	O
text	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
if	O
(	O
title	pointer
==	O
MSG_ERROR	O
)	O
title	pointer
=	O
_	O
(	O
"Error"	pointer
)	O
;	O
if	O
(	O
we_are_background	int
)	O
{	O
parent_call	function
(	O
(	O
void	O
*	O
)	O
bg_message	function
,	O
NULL	O
,	O
3	int
,	O
sizeof	O
(	O
flags	enum
)	O
,	O
&	O
flags	enum
,	O
strlen	function
(	O
title	pointer
)	O
,	O
title	pointer
,	O
strlen	function
(	O
p	pointer
)	O
,	O
p	pointer
)	O
;	O
}	O
else	O
fg_message	function
(	O
flags	enum
,	O
title	pointer
,	O
p	pointer
)	O
;	O
g_free	function
(	O
p	pointer
)	O
;	O
}	O
int	O
quick_dialog_skip	function
(	O
QuickDialog	struct
*	O
qd	pointer
,	O
int	O
nskip	int
)	O
{	O
Dlg_head	struct
*	O
dd	pointer
;	O
void	O
*	O
widget	pointer
;	O
WRadio	struct
*	O
r	pointer
;	O
int	O
xpos	int
;	O
int	O
ypos	int
;	O
int	O
return_val	int
;	O
WInput	struct
*	O
input	pointer
;	O
QuickWidget	struct
*	O
qw	pointer
;	O
int	O
do_int	int
;	O
int	O
count	int
=	O
0	int
;	O
int	O
curr_widget	int
;	O
Widget	struct
*	O
*	O
widgets	pointer
;	O
if	O
(	O
!	O
qd	pointer
->	O
i18n	int
)	O
{	O
qd	pointer
->	O
i18n	int
=	O
1	int
;	O
do_int	int
=	O
1	int
;	O
if	O
(	O
*	O
qd	pointer
->	O
title	pointer
)	O
qd	pointer
->	O
title	pointer
=	O
_	O
(	O
qd	pointer
->	O
title	pointer
)	O
;	O
}	O
else	O
do_int	int
=	O
0	int
;	O
if	O
(	O
qd	pointer
->	O
xpos	int
==	O
-	O
1	int
)	O
dd	pointer
=	O
create_dlg	function
(	O
0	int
,	O
0	int
,	O
qd	pointer
->	O
ylen	int
,	O
qd	pointer
->	O
xlen	int
,	O
dialog_colors	array
,	O
NULL	O
,	O
qd	pointer
->	O
help	pointer
,	O
qd	pointer
->	O
title	pointer
,	O
DLG_CENTER	O
|	O
DLG_TRYUP	O
|	O
DLG_REVERSE	O
)	O
;	O
else	O
dd	pointer
=	O
create_dlg	function
(	O
qd	pointer
->	O
ypos	int
,	O
qd	pointer
->	O
xpos	int
,	O
qd	pointer
->	O
ylen	int
,	O
qd	pointer
->	O
xlen	int
,	O
dialog_colors	array
,	O
NULL	O
,	O
qd	pointer
->	O
help	pointer
,	O
qd	pointer
->	O
title	pointer
,	O
DLG_REVERSE	O
)	O
;	O
for	O
(	O
qw	pointer
=	O
qd	pointer
->	O
widgets	pointer
;	O
qw	pointer
->	O
widget_type	int
;	O
qw	pointer
++	O
)	O
{	O
count	int
++	O
;	O
}	O
widgets	pointer
=	O
(	O
Widget	struct
*	O
*	O
)	O
g_new	O
(	O
Widget	struct
*	O
,	O
count	int
)	O
;	O
for	O
(	O
curr_widget	int
=	O
0	int
,	O
qw	pointer
=	O
qd	pointer
->	O
widgets	pointer
;	O
qw	pointer
->	O
widget_type	int
;	O
qw	pointer
++	O
)	O
{	O
xpos	int
=	O
(	O
qd	pointer
->	O
xlen	int
*	O
qw	pointer
->	O
relative_x	int
)	O
/	O
qw	pointer
->	O
x_divisions	int
;	O
ypos	int
=	O
(	O
qd	pointer
->	O
ylen	int
*	O
qw	pointer
->	O
relative_y	int
)	O
/	O
qw	pointer
->	O
y_divisions	int
;	O
switch	O
(	O
qw	pointer
->	O
widget_type	int
)	O
{	O
case	O
quick_checkbox	int
:	O
widget	pointer
=	O
check_new	function
(	O
ypos	int
,	O
xpos	int
,	O
*	O
qw	pointer
->	O
result	long
,	O
I18N	O
(	O
qw	pointer
->	O
text	pointer
)	O
)	O
;	O
break	O
;	O
case	O
quick_radio	int
:	O
r	pointer
=	O
radio_new	function
(	O
ypos	int
,	O
xpos	int
,	O
qw	pointer
->	O
hotkey_pos	int
,	O
const_cast	O
(	O
const	O
char	O
*	O
*	O
,	O
qw	pointer
->	O
str_result	pointer
)	O
)	O
;	O
r	pointer
->	O
pos	pointer
=	O
r	pointer
->	O
sel	int
=	O
qw	pointer
->	O
value	pointer
;	O
widget	pointer
=	O
r	pointer
;	O
break	O
;	O
case	O
quick_button	int
:	O
widget	pointer
=	O
button_new	function
(	O
ypos	int
,	O
xpos	int
,	O
qw	pointer
->	O
value	pointer
,	O
(	O
qw	pointer
->	O
value	pointer
==	O
B_ENTER	int
)	O
?	O
DEFPUSH_BUTTON	int
:	O
NORMAL_BUTTON	int
,	O
I18N	O
(	O
qw	pointer
->	O
text	pointer
)	O
,	O
0	int
)	O
;	O
break	O
;	O
case	O
quick_input	int
:	O
input	pointer
=	O
input_new	function
(	O
ypos	int
,	O
xpos	int
,	O
INPUT_COLOR	O
,	O
qw	pointer
->	O
hotkey_pos	int
,	O
qw	pointer
->	O
text	pointer
,	O
qw	pointer
->	O
histname	pointer
)	O
;	O
input	pointer
->	O
is_password	int
=	O
qw	pointer
->	O
value	pointer
==	O
1	int
;	O
input	pointer
->	O
point	int
=	O
0	int
;	O
if	O
(	O
qw	pointer
->	O
value	pointer
&	O
2	int
)	O
input	pointer
->	O
completion_flags	int
|=	O
INPUT_COMPLETE_CD	int
;	O
widget	pointer
=	O
input	pointer
;	O
break	O
;	O
case	O
quick_label	int
:	O
widget	pointer
=	O
label_new	function
(	O
ypos	int
,	O
xpos	int
,	O
I18N	O
(	O
qw	pointer
->	O
text	pointer
)	O
)	O
;	O
break	O
;	O
default	O
:	O
widget	pointer
=	O
0	int
;	O
fprintf	function
(	O
stderr	pointer
,	O
"QuickWidget: unknown widget type\n"	pointer
)	O
;	O
break	O
;	O
}	O
widgets	pointer
[	O
curr_widget	int
++	O
]	O
=	O
widget	pointer
;	O
add_widget	function
(	O
dd	pointer
,	O
widget	pointer
)	O
;	O
}	O
while	O
(	O
nskip	int
--	O
)	O
dd	pointer
->	O
current	pointer
=	O
dd	pointer
->	O
current	pointer
->	O
next	pointer
;	O
run_dlg	function
(	O
dd	pointer
)	O
;	O
if	O
(	O
dd	pointer
->	O
ret_value	int
!=	O
B_CANCEL	int
)	O
{	O
for	O
(	O
curr_widget	int
=	O
0	int
,	O
qw	pointer
=	O
qd	pointer
->	O
widgets	pointer
;	O
qw	pointer
->	O
widget_type	int
;	O
qw	pointer
++	O
)	O
{	O
Widget	struct
*	O
w	pointer
=	O
widgets	pointer
[	O
curr_widget	int
++	O
]	O
;	O
switch	O
(	O
qw	pointer
->	O
widget_type	int
)	O
{	O
case	O
quick_checkbox	int
:	O
*	O
qw	pointer
->	O
result	long
=	O
(	O
(	O
WCheck	struct
*	O
)	O
w	pointer
)	O
->	O
state	pointer
&	O
C_BOOL	int
;	O
break	O
;	O
case	O
quick_radio	int
:	O
*	O
qw	pointer
->	O
result	long
=	O
(	O
(	O
WRadio	struct
*	O
)	O
w	pointer
)	O
->	O
sel	int
;	O
break	O
;	O
case	O
quick_input	int
:	O
if	O
(	O
qw	pointer
->	O
value	pointer
&	O
2	int
)	O
*	O
qw	pointer
->	O
str_result	pointer
=	O
tilde_expand	function
(	O
(	O
(	O
WInput	struct
*	O
)	O
w	pointer
)	O
->	O
buffer	pointer
)	O
;	O
else	O
*	O
qw	pointer
->	O
str_result	pointer
=	O
g_strdup	function
(	O
(	O
(	O
WInput	struct
*	O
)	O
w	pointer
)	O
->	O
buffer	pointer
)	O
;	O
break	O
;	O
}	O
}	O
}	O
return_val	int
=	O
dd	pointer
->	O
ret_value	int
;	O
destroy_dlg	function
(	O
dd	pointer
)	O
;	O
g_free	function
(	O
widgets	pointer
)	O
;	O
return	O
return_val	int
;	O
}	O
int	O
quick_dialog	function
(	O
QuickDialog	struct
*	O
qd	pointer
)	O
{	O
return	O
quick_dialog_skip	function
(	O
qd	pointer
,	O
0	int
)	O
;	O
}	O
static	O
char	O
*	O
fg_input_dialog_help	function
(	O
const	O
char	O
*	O
header	pointer
,	O
const	O
char	O
*	O
text	pointer
,	O
const	O
char	O
*	O
help	pointer
,	O
const	O
char	O
*	O
def_text	pointer
)	O
{	O
QuickDialog	struct
Quick_input	struct
;	O
QuickWidget	struct
quick_widgets	array
[	O
]	O
=	O
{	O
{	O
quick_button	int
,	O
6	int
,	O
10	int
,	O
1	int
,	O
0	int
,	O
N_	O
(	O
"&Cancel"	pointer
)	O
,	O
0	int
,	O
B_CANCEL	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_button	int
,	O
3	int
,	O
10	int
,	O
1	int
,	O
0	int
,	O
N_	O
(	O
"&OK"	pointer
)	O
,	O
0	int
,	O
B_ENTER	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_input	int
,	O
4	int
,	O
80	int
,	O
0	int
,	O
0	int
,	O
""	pointer
,	O
58	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_label	int
,	O
4	int
,	O
80	int
,	O
2	int
,	O
0	int
,	O
""	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
NULL_QuickWidget	O
}	O
;	O
int	O
len	int
;	O
int	O
i	array
;	O
int	O
lines	pointer
,	O
cols	int
;	O
int	O
ret	int
;	O
char	O
*	O
my_str	pointer
;	O
char	O
histname	pointer
[	O
64	int
]	O
=	O
"inp|"	pointer
;	O
char	O
*	O
p_text	pointer
;	O
g_strlcpy	function
(	O
histname	pointer
+	O
3	int
,	O
header	pointer
,	O
61	int
)	O
;	O
quick_widgets	array
[	O
2	int
]	O
.	O
histname	pointer
=	O
histname	pointer
;	O
msglen	function
(	O
text	pointer
,	O
&	O
lines	pointer
,	O
&	O
cols	int
)	O
;	O
len	int
=	O
max	long
(	O
(	O
int	O
)	O
strlen	function
(	O
header	pointer
)	O
,	O
cols	int
)	O
+	O
4	int
;	O
len	int
=	O
max	long
(	O
len	int
,	O
64	int
)	O
;	O
if	O
(	O
def_text	pointer
==	O
INPUT_PASSWORD	O
)	O
{	O
quick_widgets	array
[	O
INPUT_INDEX	int
]	O
.	O
value	pointer
=	O
1	int
;	O
histname	pointer
[	O
3	int
]	O
=	O
0	int
;	O
def_text	pointer
=	O
""	pointer
;	O
}	O
else	O
{	O
quick_widgets	array
[	O
INPUT_INDEX	int
]	O
.	O
value	pointer
=	O
0	int
;	O
}	O
quick_widgets	array
[	O
0	int
]	O
.	O
text	pointer
=	O
_	O
(	O
quick_widgets	array
[	O
0	int
]	O
.	O
text	pointer
)	O
;	O
quick_widgets	array
[	O
1	int
]	O
.	O
text	pointer
=	O
_	O
(	O
quick_widgets	array
[	O
1	int
]	O
.	O
text	pointer
)	O
;	O
quick_widgets	array
[	O
0	int
]	O
.	O
relative_x	int
=	O
len	int
/	O
2	int
+	O
4	int
;	O
quick_widgets	array
[	O
1	int
]	O
.	O
relative_x	int
=	O
len	int
/	O
2	int
-	O
(	O
strlen	function
(	O
quick_widgets	array
[	O
1	int
]	O
.	O
text	pointer
)	O
+	O
9	int
)	O
;	O
quick_widgets	array
[	O
0	int
]	O
.	O
x_divisions	int
=	O
quick_widgets	array
[	O
1	int
]	O
.	O
x_divisions	int
=	O
len	int
;	O
Quick_input	struct
.	O
xlen	int
=	O
len	int
;	O
Quick_input	struct
.	O
xpos	int
=	O
-	O
1	int
;	O
Quick_input	struct
.	O
title	pointer
=	O
header	pointer
;	O
Quick_input	struct
.	O
help	pointer
=	O
help	pointer
;	O
Quick_input	struct
.	O
i18n	int
=	O
1	int
;	O
p_text	pointer
=	O
g_strstrip	O
(	O
g_strdup	function
(	O
text	pointer
)	O
)	O
;	O
quick_widgets	array
[	O
INPUT_INDEX	int
+	O
1	int
]	O
.	O
text	pointer
=	O
p_text	pointer
;	O
quick_widgets	array
[	O
INPUT_INDEX	int
]	O
.	O
text	pointer
=	O
def_text	pointer
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
4	int
;	O
i	array
++	O
)	O
quick_widgets	array
[	O
i	array
]	O
.	O
y_divisions	int
=	O
lines	pointer
+	O
6	int
;	O
Quick_input	struct
.	O
ylen	int
=	O
lines	pointer
+	O
6	int
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
3	int
;	O
i	array
++	O
)	O
quick_widgets	array
[	O
i	array
]	O
.	O
relative_y	int
+=	O
2	int
+	O
lines	pointer
;	O
quick_widgets	array
[	O
INPUT_INDEX	int
]	O
.	O
str_result	pointer
=	O
&	O
my_str	pointer
;	O
Quick_input	struct
.	O
widgets	pointer
=	O
quick_widgets	array
;	O
ret	int
=	O
quick_dialog	function
(	O
&	O
Quick_input	struct
)	O
;	O
g_free	function
(	O
p_text	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
B_CANCEL	int
)	O
{	O
return	O
my_str	pointer
;	O
}	O
else	O
return	O
0	int
;	O
}	O
char	O
*	O
input_dialog_help	function
(	O
const	O
char	O
*	O
header	pointer
,	O
const	O
char	O
*	O
text	pointer
,	O
const	O
char	O
*	O
help	pointer
,	O
const	O
char	O
*	O
def_text	pointer
)	O
{	O
if	O
(	O
we_are_background	int
)	O
return	O
parent_call_string	function
(	O
(	O
void	O
*	O
)	O
fg_input_dialog_help	function
,	O
4	int
,	O
strlen	function
(	O
header	pointer
)	O
,	O
header	pointer
,	O
strlen	function
(	O
text	pointer
)	O
,	O
text	pointer
,	O
strlen	function
(	O
help	pointer
)	O
,	O
help	pointer
,	O
strlen	function
(	O
def_text	pointer
)	O
,	O
def_text	pointer
)	O
;	O
else	O
return	O
fg_input_dialog_help	function
(	O
header	pointer
,	O
text	pointer
,	O
help	pointer
,	O
def_text	pointer
)	O
;	O
}	O
char	O
*	O
input_dialog	function
(	O
const	O
char	O
*	O
header	pointer
,	O
const	O
char	O
*	O
text	pointer
,	O
const	O
char	O
*	O
def_text	pointer
)	O
{	O
return	O
input_dialog_help	function
(	O
header	pointer
,	O
text	pointer
,	O
"[Input Line Keys]"	pointer
,	O
def_text	pointer
)	O
;	O
}	O
char	O
*	O
input_expand_dialog	function
(	O
const	O
char	O
*	O
header	pointer
,	O
const	O
char	O
*	O
text	pointer
,	O
const	O
char	O
*	O
def_text	pointer
)	O
{	O
char	O
*	O
result	long
;	O
char	O
*	O
expanded	pointer
;	O
result	long
=	O
input_dialog	function
(	O
header	pointer
,	O
text	pointer
,	O
def_text	pointer
)	O
;	O
if	O
(	O
result	long
)	O
{	O
expanded	pointer
=	O
tilde_expand	function
(	O
result	long
)	O
;	O
g_free	function
(	O
result	long
)	O
;	O
return	O
expanded	pointer
;	O
}	O
return	O
result	long
;	O
}	O