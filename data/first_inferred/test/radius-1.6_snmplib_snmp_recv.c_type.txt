void	O
snmp_read	function
(	O
)	O
;	O
int	O
snmp_query	function
(	O
struct	O
snmp_session	struct
*	O
sess	*
,	O
struct	O
snmp_pdu	struct
*	O
pdu	*
)	O
{	O
if	O
(	O
snmp_send	function
(	O
sess	*
,	O
pdu	*
)	O
)	O
return	O
-	O
1	int
;	O
snmp_poll	function
(	O
sess	*
)	O
;	O
return	O
0	int
;	O
}	O
void	O
snmp_poll	function
(	O
struct	O
snmp_session	struct
*	O
sess	*
)	O
{	O
int	O
rc	int
;	O
int	O
numfds	int
;	O
fd_set	struct
fdset	struct
;	O
struct	O
timeval	struct
timeout	struct
;	O
while	O
(	O
numfds	int
=	O
snmp_fdset	function
(	O
sess	*
,	O
&	O
fdset	*
)	O
)	O
{	O
timeout	struct
.	O
tv_usec	long
=	O
0	int
;	O
timeout	struct
.	O
tv_sec	long
=	O
1	int
;	O
rc	int
=	O
select	function
(	O
numfds	*
,	O
&	O
fdset	struct
,	O
NULL	O
,	O
NULL	O
,	O
&	O
timeout	int
)	O
;	O
if	O
(	O
rc	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
continue	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
snmp_timeout	function
(	O
sess	*
)	O
;	O
}	O
else	O
{	O
snmp_read	function
(	O
sess	*
,	O
&	O
fdset	*
)	O
;	O
}	O
}	O
}	O
void	O
snmp_timeout	function
(	O
struct	O
snmp_session	struct
*	O
sess	*
)	O
{	O
struct	O
snmp_session	struct
*	O
sp	*
;	O
struct	O
snmp_request	struct
*	O
req	*
,	O
*	O
preq	*
;	O
struct	O
timeval	struct
now	struct
;	O
gettimeofday	function
(	O
&	O
now	struct
,	O
(	O
struct	O
timezone	struct
*	O
)	O
0	int
)	O
;	O
for	O
(	O
sp	*
=	O
sess	*
;	O
sp	*
;	O
sp	*
=	O
sp	*
->	O
next	*
)	O
{	O
if	O
(	O
sp	*
->	O
sd	int
<	O
0	int
)	O
continue	O
;	O
preq	*
=	O
NULL	O
;	O
req	*
=	O
sp	*
->	O
request_list	*
;	O
while	O
(	O
req	*
)	O
{	O
if	O
(	O
timercmp	function
(	O
&	O
req	*
->	O
expire	O
,	O
&	O
now	O
,	O
<	O
)	O
)	O
{	O
if	O
(	O
req	*
->	O
retries	int
>	O
sp	*
->	O
retries	int
)	O
{	O
sp	*
->	O
converse	function
(	O
SNMP_CONV_TIMEOUT	*
,	O
sp	*
,	O
req	*
->	O
pdu	*
,	O
sp	*
->	O
app_closure	*
)	O
;	O
if	O
(	O
preq	int
)	O
{	O
preq	*
->	O
next	*
=	O
req	*
->	O
next	*
;	O
snmp_request_free	function
(	O
req	*
)	O
;	O
req	*
=	O
preq	*
->	O
next	*
;	O
}	O
else	O
{	O
sp	*
->	O
request_list	*
=	O
req	*
->	O
next	*
;	O
snmp_request_free	function
(	O
req	*
)	O
;	O
req	*
=	O
sp	*
->	O
request_list	*
;	O
}	O
continue	O
;	O
}	O
else	O
{	O
req	*
->	O
retries	int
++	O
;	O
req	*
->	O
timeout	int
<<=	O
1	int
;	O
snmp_request_xmit	function
(	O
sp	*
,	O
req	*
)	O
;	O
}	O
}	O
preq	*
=	O
req	*
;	O
req	*
=	O
req	*
->	O
next	*
;	O
}	O
}	O
}	O
void	O
snmp_read	function
(	O
struct	O
snmp_session	struct
*	O
sess	*
,	O
fd_set	struct
*	O
fdset	*
)	O
{	O
struct	O
snmp_session	struct
*	O
sp	*
;	O
struct	O
snmp_request	struct
*	O
req	*
,	O
*	O
prev	*
;	O
struct	O
snmp_pdu	struct
*	O
pdu	*
;	O
u_char	char
packet	*
[	O
SNMP_PACKET_LENGTH	int
]	O
;	O
struct	O
sockaddr_in	struct
sin	*
;	O
int	O
salen	int
;	O
int	O
length	int
;	O
char	O
comm	array
[	O
128	int
]	O
;	O
int	O
comm_len	int
;	O
for	O
(	O
sp	*
=	O
sess	*
;	O
sp	*
;	O
sp	*
=	O
sp	*
->	O
next	*
)	O
{	O
if	O
(	O
sp	*
->	O
sd	int
<	O
0	int
||	O
!	O
FD_ISSET	O
(	O
sp	*
->	O
sd	int
,	O
fdset	*
)	O
)	O
continue	O
;	O
salen	int
=	O
sizeof	O
(	O
sin	int
)	O
;	O
length	int
=	O
recvfrom	function
(	O
sp	*
->	O
sd	*
,	O
(	O
char	O
*	O
)	O
packet	struct
,	O
sizeof	O
(	O
packet	struct
)	O
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
sin	int
,	O
&	O
salen	int
)	O
;	O
if	O
(	O
length	int
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"recvfrom"	*
)	O
;	O
continue	O
;	O
}	O
pdu	struct
=	O
snmp_pdu_create	function
(	O
0	int
)	O
;	O
if	O
(	O
!	O
pdu	*
)	O
{	O
continue	O
;	O
}	O
pdu	*
->	O
peer_sin	int
=	O
sin	int
;	O
pdu	*
->	O
req_id	int
=	O
0	int
;	O
comm_len	int
=	O
sizeof	O
(	O
comm	*
)	O
-	O
1	int
;	O
if	O
(	O
snmp_decode_request	function
(	O
sp	*
,	O
pdu	*
,	O
packet	struct
,	O
length	int
,	O
comm	*
,	O
&	O
comm_len	*
)	O
)	O
{	O
snmp_pdu_free	function
(	O
pdu	*
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
pdu	*
->	O
type	enum
==	O
SNMP_PDU_RESPONSE	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
sp	*
->	O
community	struct
.	O
str	*
,	O
comm	*
)	O
)	O
{	O
if	O
(	O
sp	*
->	O
converse	*
(	O
SNMP_CONV_COMMUNITY_MISMATCH	*
,	O
sp	*
,	O
pdu	struct
,	O
sp	*
->	O
app_closure	*
)	O
)	O
{	O
snmp_pdu_free	function
(	O
pdu	struct
)	O
;	O
continue	O
;	O
}	O
}	O
}	O
else	O
{	O
char	O
*	O
p	*
=	O
snmp_alloc	function
(	O
comm_len	*
+	O
1	int
)	O
;	O
if	O
(	O
!	O
p	*
)	O
{	O
SNMP_SET_ERRNO	O
(	O
E_SNMP_NOMEM	int
)	O
;	O
snmp_pdu_free	function
(	O
pdu	*
)	O
;	O
continue	O
;	O
}	O
strcpy	function
(	O
sp	*
->	O
community	struct
.	O
str	*
,	O
comm	*
)	O
;	O
if	O
(	O
sp	*
->	O
community	struct
.	O
str	*
)	O
snmp_free	function
(	O
sp	*
->	O
community	struct
.	O
str	*
)	O
;	O
sp	*
->	O
community	struct
.	O
str	*
=	O
p	int
;	O
sp	*
->	O
community	struct
.	O
len	int
=	O
comm_len	*
;	O
}	O
switch	O
(	O
pdu	*
->	O
type	enum
)	O
{	O
case	O
SNMP_PDU_RESPONSE	O
:	O
prev	*
=	O
NULL	O
;	O
for	O
(	O
req	*
=	O
sp	*
->	O
request_list	*
;	O
req	*
&&	O
req	*
->	O
pdu	*
->	O
req_id	int
!=	O
pdu	*
->	O
req_id	int
;	O
req	*
=	O
req	*
->	O
next	*
)	O
prev	*
=	O
req	*
;	O
if	O
(	O
!	O
req	*
)	O
{	O
snmp_pdu_free	function
(	O
pdu	*
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
sp	*
->	O
converse	function
(	O
SNMP_CONV_RECV_MSG	*
,	O
sp	*
,	O
pdu	*
,	O
sp	*
->	O
app_closure	*
)	O
)	O
{	O
if	O
(	O
!	O
prev	*
)	O
sp	*
->	O
request_list	*
=	O
req	*
->	O
next	*
;	O
else	O
prev	*
->	O
next	*
=	O
req	*
->	O
next	*
;	O
snmp_request_free	function
(	O
req	*
)	O
;	O
}	O
break	O
;	O
case	O
SNMP_PDU_GET	O
:	O
case	O
SNMP_PDU_GETNEXT	O
:	O
case	O
SNMP_PDU_SET	O
:	O
sp	*
->	O
converse	function
(	O
SNMP_CONV_RECV_MSG	*
,	O
sp	*
,	O
pdu	struct
,	O
sp	*
->	O
app_closure	*
)	O
;	O
break	O
;	O
default	O
:	O
;	O
}	O
snmp_pdu_free	function
(	O
pdu	*
)	O
;	O
}	O
}	O