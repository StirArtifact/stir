static	O
int	O
_fig_pseudocolor	function
(	O
int	O
red	int
,	O
int	O
green	int
,	O
int	O
blue	int
,	O
const	O
long	O
int	O
*	O
fig_usercolors	pointer
,	O
int	O
fig_num_usercolors	int
)	O
;	O
int	O
_pl_f_fig_color	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
int	O
red	int
,	O
int	O
green	int
,	O
int	O
blue	int
)	O
{	O
int	O
fig_fgcolor_red	int
,	O
fig_fgcolor_green	int
,	O
fig_fgcolor_blue	int
;	O
long	O
int	O
fig_fgcolor_rgb	int
;	O
int	O
i	int
;	O
fig_fgcolor_red	int
=	O
(	O
red	int
>>	O
8	int
)	O
&	O
ONEBYTE	int
;	O
fig_fgcolor_green	int
=	O
(	O
green	int
>>	O
8	int
)	O
&	O
ONEBYTE	int
;	O
fig_fgcolor_blue	int
=	O
(	O
blue	int
>>	O
8	int
)	O
&	O
ONEBYTE	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
FIG_NUM_STD_COLORS	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
(	O
_pl_f_fig_stdcolors	array
[	O
i	int
]	O
.	O
red	int
==	O
fig_fgcolor_red	int
)	O
&&	O
(	O
_pl_f_fig_stdcolors	pointer
[	O
i	int
]	O
.	O
green	int
==	O
fig_fgcolor_green	int
)	O
&&	O
(	O
_pl_f_fig_stdcolors	pointer
[	O
i	int
]	O
.	O
blue	int
==	O
fig_fgcolor_blue	int
)	O
)	O
return	O
i	int
;	O
}	O
fig_fgcolor_rgb	int
=	O
(	O
fig_fgcolor_red	int
<<	O
16	int
)	O
+	O
(	O
fig_fgcolor_green	int
<<	O
8	int
)	O
+	O
(	O
fig_fgcolor_blue	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
_plotter	pointer
->	O
fig_num_usercolors	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
fig_usercolors	array
[	O
i	int
]	O
==	O
fig_fgcolor_rgb	int
)	O
return	O
FIG_USER_COLOR_MIN	int
+	O
i	int
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
fig_num_usercolors	int
==	O
FIG_MAX_NUM_USER_COLORS	int
-	O
1	int
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
fig_colormap_warning_issued	enum
==	O
false	int
)	O
{	O
_plotter	pointer
->	O
warning	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"supply of user-defined colors is exhausted"	int
)	O
;	O
_plotter	pointer
->	O
fig_colormap_warning_issued	enum
=	O
true	int
;	O
}	O
return	O
_fig_pseudocolor	function
(	O
fig_fgcolor_red	int
,	O
fig_fgcolor_green	int
,	O
fig_fgcolor_blue	int
,	O
_plotter	pointer
->	O
fig_usercolors	int
,	O
FIG_MAX_NUM_USER_COLORS	int
-	O
1	int
)	O
;	O
}	O
else	O
{	O
_plotter	pointer
->	O
fig_usercolors	array
[	O
_plotter	pointer
->	O
fig_num_usercolors	int
]	O
=	O
fig_fgcolor_rgb	int
;	O
_plotter	pointer
->	O
fig_num_usercolors	int
++	O
;	O
return	O
FIG_USER_COLOR_MIN	int
+	O
_plotter	pointer
->	O
fig_num_usercolors	int
-	O
1	int
;	O
}	O
}	O
static	O
int	O
_fig_pseudocolor	function
(	O
int	O
red	int
,	O
int	O
green	int
,	O
int	O
blue	int
,	O
const	O
long	O
int	O
*	O
fig_usercolors	pointer
,	O
int	O
fig_num_usercolors	int
)	O
{	O
unsigned	O
long	O
int	O
difference	long
=	O
INT_MAX	O
;	O
int	O
i	int
;	O
int	O
best	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
FIG_NUM_STD_COLORS	int
;	O
i	int
++	O
)	O
{	O
unsigned	O
long	O
int	O
newdifference	long
;	O
if	O
(	O
_pl_f_fig_stdcolors	pointer
[	O
i	int
]	O
.	O
red	int
==	O
0xff	int
&&	O
_pl_f_fig_stdcolors	array
[	O
i	int
]	O
.	O
green	int
==	O
0xff	int
&&	O
_pl_f_fig_stdcolors	array
[	O
i	int
]	O
.	O
blue	int
==	O
0xff	int
)	O
{	O
if	O
(	O
red	int
==	O
0xff	int
&&	O
green	int
==	O
0xff	int
&&	O
blue	int
==	O
0xff	int
)	O
{	O
difference	long
=	O
0	int
;	O
best	int
=	O
i	int
;	O
}	O
continue	O
;	O
}	O
newdifference	long
=	O
(	O
(	O
(	O
_pl_f_fig_stdcolors	array
[	O
i	int
]	O
.	O
red	int
-	O
red	int
)	O
*	O
(	O
_pl_f_fig_stdcolors	pointer
[	O
i	int
]	O
.	O
red	int
-	O
red	int
)	O
)	O
+	O
(	O
(	O
_pl_f_fig_stdcolors	array
[	O
i	int
]	O
.	O
green	int
-	O
green	int
)	O
*	O
(	O
_pl_f_fig_stdcolors	pointer
[	O
i	int
]	O
.	O
green	int
-	O
green	int
)	O
)	O
+	O
(	O
(	O
_pl_f_fig_stdcolors	pointer
[	O
i	int
]	O
.	O
blue	int
-	O
blue	int
)	O
*	O
(	O
_pl_f_fig_stdcolors	pointer
[	O
i	int
]	O
.	O
blue	int
-	O
blue	int
)	O
)	O
)	O
;	O
if	O
(	O
newdifference	long
<	O
difference	long
)	O
{	O
difference	long
=	O
newdifference	long
;	O
best	int
=	O
i	int
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
fig_num_usercolors	int
;	O
i	int
++	O
)	O
{	O
unsigned	O
long	O
int	O
newdifference	long
;	O
plColor	struct
usercolor	int
;	O
usercolor	struct
.	O
red	int
=	O
(	O
fig_usercolors	array
[	O
i	int
]	O
>>	O
16	int
)	O
&	O
ONEBYTE	int
;	O
usercolor	struct
.	O
green	int
=	O
(	O
fig_usercolors	array
[	O
i	int
]	O
>>	O
8	int
)	O
&	O
ONEBYTE	int
;	O
usercolor	struct
.	O
blue	int
=	O
(	O
fig_usercolors	array
[	O
i	int
]	O
>>	O
0	int
)	O
&	O
ONEBYTE	O
;	O
newdifference	long
=	O
(	O
(	O
usercolor	struct
.	O
red	int
-	O
red	int
)	O
*	O
(	O
usercolor	struct
.	O
red	int
-	O
red	int
)	O
+	O
(	O
usercolor	struct
.	O
green	int
-	O
green	int
)	O
*	O
(	O
usercolor	struct
.	O
green	int
-	O
green	int
)	O
+	O
(	O
usercolor	struct
.	O
blue	int
-	O
blue	int
)	O
*	O
(	O
usercolor	struct
.	O
blue	int
-	O
blue	int
)	O
)	O
;	O
if	O
(	O
newdifference	long
<	O
difference	long
)	O
{	O
difference	long
=	O
newdifference	long
;	O
best	int
=	O
i	int
+	O
FIG_USER_COLOR_MIN	int
;	O
}	O
}	O
return	O
best	int
;	O
}	O
void	O
_pl_f_set_pen_color	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
if	O
(	O
(	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
)	O
.	O
red	int
>	O
0xffff	int
)	O
||	O
(	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
)	O
.	O
green	int
>	O
0xffff	int
)	O
||	O
(	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
)	O
.	O
blue	int
>	O
0xffff	int
)	O
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fig_fgcolor	int
=	O
_default_drawstate	struct
.	O
fig_fgcolor	int
;	O
else	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fig_fgcolor	int
=	O
_pl_f_fig_color	function
(	O
R___	O
(	O
_plotter	pointer
)	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
)	O
.	O
red	int
,	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
)	O
.	O
green	int
,	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
)	O
.	O
blue	int
)	O
;	O
return	O
;	O
}	O
void	O
_pl_f_set_fill_color	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
double	O
fill_level	double
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fillcolor_base	struct
.	O
red	int
>	O
0xffff	int
||	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fillcolor_base	struct
.	O
green	int
>	O
0xffff	int
||	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fillcolor_base	struct
.	O
blue	int
>	O
0xffff	int
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fig_fillcolor	pointer
=	O
_default_drawstate	struct
.	O
fig_fillcolor	int
;	O
else	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fig_fillcolor	pointer
=	O
_pl_f_fig_color	function
(	O
R___	O
(	O
_plotter	pointer
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fillcolor_base	struct
.	O
red	int
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fillcolor_base	struct
.	O
green	int
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fillcolor_base	struct
.	O
blue	int
)	O
;	O
fill_level	double
=	O
(	O
(	O
double	O
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_type	int
-	O
1.	int
)	O
/	O
0xFFFE	int
;	O
if	O
(	O
fill_level	int
>	O
1.	int
)	O
fill_level	int
=	O
(	O
(	O
double	O
)	O
_default_drawstate	struct
.	O
fill_type	int
-	O
1.	int
)	O
/	O
0xFFFE	int
;	O
else	O
if	O
(	O
fill_level	double
<	O
0.	int
)	O
fill_level	double
=	O
-	O
1.0	int
;	O
if	O
(	O
fill_level	double
==	O
-	O
1.0	int
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fig_fill_level	int
=	O
-	O
1	int
;	O
else	O
{	O
switch	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fig_fillcolor	enum
)	O
{	O
case	O
FIG_C_WHITE	int
:	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fig_fill_level	enum
=	O
20	int
;	O
break	O
;	O
case	O
FIG_C_BLACK	int
:	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fig_fill_level	int
=	O
IROUND	O
(	O
20.0	int
-	O
20.0	int
*	O
fill_level	pointer
)	O
;	O
break	O
;	O
default	O
:	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fig_fill_level	double
=	O
IROUND	O
(	O
20.0	int
+	O
20.0	int
*	O
fill_level	pointer
)	O
;	O
break	O
;	O
}	O
}	O
return	O
;	O
}	O