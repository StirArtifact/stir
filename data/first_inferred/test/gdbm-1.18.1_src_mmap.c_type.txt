static	O
inline	O
off_t	long
SUM_FILE_SIZE	function
(	O
GDBM_FILE	pointer
dbf	pointer
,	O
off_t	long
delta	long
)	O
{	O
if	O
(	O
delta	long
>=	O
0	int
&&	O
off_t_sum_ok	function
(	O
dbf	pointer
->	O
mapped_off	long
,	O
dbf	pointer
->	O
mapped_size	long
)	O
&&	O
off_t_sum_ok	function
(	O
dbf	pointer
->	O
mapped_off	long
+	O
dbf	pointer
->	O
mapped_size	long
,	O
delta	long
)	O
)	O
return	O
dbf	pointer
->	O
mapped_off	long
+	O
dbf	pointer
->	O
mapped_size	long
+	O
delta	long
;	O
return	O
-	O
1	int
;	O
}	O
int	O
_gdbm_file_size	function
(	O
GDBM_FILE	pointer
dbf	pointer
,	O
off_t	long
*	O
psize	pointer
)	O
{	O
struct	O
stat	struct
sb	struct
;	O
if	O
(	O
fstat	function
(	O
dbf	pointer
->	O
desc	int
,	O
&	O
sb	struct
)	O
)	O
{	O
GDBM_SET_ERRNO	O
(	O
dbf	pointer
,	O
GDBM_FILE_STAT_ERROR	int
,	O
FALSE	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
*	O
psize	pointer
=	O
sb	struct
.	O
st_size	long
;	O
return	O
0	int
;	O
}	O
void	O
_gdbm_mapped_unmap	function
(	O
GDBM_FILE	pointer
dbf	pointer
)	O
{	O
if	O
(	O
dbf	pointer
->	O
mapped_region	pointer
)	O
{	O
munmap	function
(	O
dbf	pointer
->	O
mapped_region	pointer
,	O
dbf	pointer
->	O
mapped_size	long
)	O
;	O
dbf	pointer
->	O
mapped_region	pointer
=	O
NULL	O
;	O
dbf	pointer
->	O
mapped_size	long
=	O
0	int
;	O
dbf	pointer
->	O
mapped_pos	long
=	O
0	int
;	O
dbf	pointer
->	O
mapped_off	long
=	O
0	int
;	O
}	O
}	O
int	O
_gdbm_internal_remap	function
(	O
GDBM_FILE	pointer
dbf	pointer
,	O
size_t	long
size	int
)	O
{	O
void	O
*	O
p	pointer
;	O
int	O
flags	int
=	O
PROT_READ	int
;	O
size_t	long
page_size	long
=	O
sysconf	function
(	O
_SC_PAGESIZE	int
)	O
;	O
if	O
(	O
dbf	pointer
->	O
mapped_region	pointer
)	O
{	O
munmap	function
(	O
dbf	pointer
->	O
mapped_region	pointer
,	O
dbf	pointer
->	O
mapped_size	long
)	O
;	O
dbf	pointer
->	O
mapped_region	pointer
=	O
NULL	O
;	O
}	O
dbf	pointer
->	O
mapped_size	long
=	O
size	int
;	O
if	O
(	O
size	int
==	O
0	int
)	O
return	O
0	int
;	O
dbf	pointer
->	O
mapped_pos	long
+=	O
dbf	pointer
->	O
mapped_off	long
%	O
page_size	long
;	O
dbf	pointer
->	O
mapped_off	long
=	O
(	O
dbf	pointer
->	O
mapped_off	long
/	O
page_size	long
)	O
*	O
page_size	long
;	O
if	O
(	O
dbf	pointer
->	O
read_write	int
)	O
flags	int
|=	O
PROT_WRITE	int
;	O
p	pointer
=	O
mmap	function
(	O
NULL	O
,	O
dbf	pointer
->	O
mapped_size	long
,	O
flags	int
,	O
MAP_SHARED	int
,	O
dbf	pointer
->	O
desc	int
,	O
dbf	pointer
->	O
mapped_off	long
)	O
;	O
if	O
(	O
p	pointer
==	O
MAP_FAILED	O
)	O
{	O
dbf	pointer
->	O
mapped_region	pointer
=	O
NULL	O
;	O
GDBM_SET_ERRNO	O
(	O
dbf	pointer
,	O
GDBM_MALLOC_ERROR	int
,	O
FALSE	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
dbf	pointer
->	O
mapped_region	pointer
=	O
p	pointer
;	O
return	O
0	int
;	O
}	O
int	O
_gdbm_mapped_remap	function
(	O
GDBM_FILE	pointer
dbf	pointer
,	O
off_t	long
size	int
,	O
int	O
flag	int
)	O
{	O
off_t	long
file_size	long
,	O
pos	long
;	O
if	O
(	O
size	int
<	O
0	int
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
GDBM_SET_ERRNO	O
(	O
dbf	pointer
,	O
GDBM_FILE_SEEK_ERROR	int
,	O
TRUE	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
size	int
<	O
dbf	pointer
->	O
mapped_size	long
)	O
return	O
0	int
;	O
if	O
(	O
_gdbm_file_size	function
(	O
dbf	pointer
,	O
&	O
file_size	long
)	O
)	O
{	O
SAVE_ERRNO	O
(	O
_gdbm_mapped_unmap	function
(	O
dbf	pointer
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
flag	int
==	O
_REMAP_END	int
&&	O
size	int
<	O
file_size	long
)	O
size	int
=	O
file_size	long
;	O
if	O
(	O
dbf	pointer
->	O
read_write	int
)	O
{	O
if	O
(	O
size	int
>	O
file_size	long
)	O
{	O
if	O
(	O
flag	int
!=	O
_REMAP_DEFAULT	int
)	O
{	O
if	O
(	O
size	int
<	O
dbf	pointer
->	O
header	pointer
->	O
next_block	long
)	O
size	int
=	O
dbf	pointer
->	O
header	pointer
->	O
next_block	long
;	O
if	O
(	O
_gdbm_file_extend	function
(	O
dbf	pointer
,	O
size	int
)	O
)	O
return	O
-	O
1	int
;	O
file_size	long
=	O
size	int
;	O
}	O
else	O
{	O
return	O
0	int
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
size	int
>	O
file_size	long
)	O
size	int
=	O
file_size	long
;	O
if	O
(	O
size	int
==	O
SUM_FILE_SIZE	function
(	O
dbf	pointer
,	O
0	int
)	O
)	O
return	O
0	int
;	O
}	O
pos	long
=	O
_GDBM_MMAPPED_POS	O
(	O
dbf	pointer
)	O
;	O
if	O
(	O
size	int
>	O
dbf	pointer
->	O
mapped_size_max	long
)	O
{	O
dbf	pointer
->	O
mapped_off	long
=	O
pos	long
;	O
dbf	pointer
->	O
mapped_pos	long
=	O
0	int
;	O
size	int
=	O
dbf	pointer
->	O
mapped_size_max	long
;	O
if	O
(	O
dbf	pointer
->	O
mapped_off	long
+	O
size	int
>	O
file_size	long
)	O
size	int
=	O
file_size	long
-	O
dbf	pointer
->	O
mapped_off	long
;	O
}	O
else	O
{	O
dbf	pointer
->	O
mapped_pos	long
+=	O
dbf	pointer
->	O
mapped_off	long
;	O
dbf	pointer
->	O
mapped_off	long
=	O
0	int
;	O
}	O
if	O
(	O
pos	long
>	O
file_size	long
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
GDBM_SET_ERRNO	O
(	O
dbf	pointer
,	O
GDBM_FILE_SEEK_ERROR	int
,	O
TRUE	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
_gdbm_internal_remap	function
(	O
dbf	pointer
,	O
size	int
)	O
;	O
}	O
int	O
_gdbm_mapped_init	function
(	O
GDBM_FILE	pointer
dbf	pointer
)	O
{	O
if	O
(	O
dbf	pointer
->	O
mapped_size_max	long
==	O
0	int
)	O
dbf	pointer
->	O
mapped_size_max	long
=	O
SIZE_T_MAX	O
;	O
return	O
_gdbm_mapped_remap	function
(	O
dbf	pointer
,	O
0	int
,	O
_REMAP_END	int
)	O
;	O
}	O
ssize_t	long
_gdbm_mapped_read	function
(	O
GDBM_FILE	pointer
dbf	pointer
,	O
void	O
*	O
buffer	pointer
,	O
size_t	long
len	long
)	O
{	O
if	O
(	O
dbf	pointer
->	O
memory_mapping	int
)	O
{	O
ssize_t	long
total	long
=	O
0	int
;	O
char	O
*	O
cbuf	pointer
=	O
buffer	pointer
;	O
while	O
(	O
len	long
)	O
{	O
size_t	long
nbytes	long
;	O
if	O
(	O
_GDBM_NEED_REMAP	O
(	O
dbf	pointer
)	O
)	O
{	O
off_t	long
pos	long
=	O
_GDBM_MMAPPED_POS	O
(	O
dbf	pointer
)	O
;	O
if	O
(	O
_gdbm_mapped_remap	function
(	O
dbf	pointer
,	O
SUM_FILE_SIZE	function
(	O
dbf	pointer
,	O
len	long
)	O
,	O
_REMAP_DEFAULT	int
)	O
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
dbf	pointer
->	O
need_recovery	int
)	O
return	O
-	O
1	int
;	O
dbf	pointer
->	O
memory_mapping	int
=	O
FALSE	int
;	O
if	O
(	O
lseek	function
(	O
dbf	pointer
->	O
desc	int
,	O
pos	long
,	O
SEEK_SET	int
)	O
!=	O
pos	long
)	O
return	O
total	long
>	O
0	int
?	O
total	long
:	O
-	O
1	int
;	O
rc	int
=	O
read	function
(	O
dbf	pointer
->	O
desc	int
,	O
cbuf	pointer
,	O
len	long
)	O
;	O
if	O
(	O
rc	int
==	O
-	O
1	int
)	O
return	O
total	long
>	O
0	int
?	O
total	long
:	O
-	O
1	int
;	O
return	O
total	long
+	O
rc	int
;	O
}	O
}	O
nbytes	long
=	O
dbf	pointer
->	O
mapped_size	long
-	O
dbf	pointer
->	O
mapped_pos	long
;	O
if	O
(	O
nbytes	long
==	O
0	int
)	O
break	O
;	O
if	O
(	O
nbytes	long
>	O
len	long
)	O
nbytes	long
=	O
len	long
;	O
memcpy	function
(	O
cbuf	pointer
,	O
(	O
char	O
*	O
)	O
dbf	pointer
->	O
mapped_region	pointer
+	O
dbf	pointer
->	O
mapped_pos	long
,	O
nbytes	long
)	O
;	O
cbuf	pointer
+=	O
nbytes	long
;	O
dbf	pointer
->	O
mapped_pos	long
+=	O
nbytes	long
;	O
total	long
+=	O
nbytes	long
;	O
len	long
-=	O
nbytes	long
;	O
}	O
return	O
total	long
;	O
}	O
return	O
read	function
(	O
dbf	pointer
->	O
desc	int
,	O
buffer	pointer
,	O
len	long
)	O
;	O
}	O
ssize_t	long
_gdbm_mapped_write	function
(	O
GDBM_FILE	pointer
dbf	pointer
,	O
void	O
*	O
buffer	pointer
,	O
size_t	long
len	long
)	O
{	O
if	O
(	O
dbf	pointer
->	O
memory_mapping	int
)	O
{	O
ssize_t	long
total	long
=	O
0	int
;	O
char	O
*	O
cbuf	pointer
=	O
buffer	pointer
;	O
while	O
(	O
len	long
)	O
{	O
size_t	long
nbytes	long
;	O
if	O
(	O
_GDBM_NEED_REMAP	O
(	O
dbf	pointer
)	O
)	O
{	O
off_t	long
pos	long
=	O
_GDBM_MMAPPED_POS	O
(	O
dbf	pointer
)	O
;	O
if	O
(	O
_gdbm_mapped_remap	function
(	O
dbf	pointer
,	O
SUM_FILE_SIZE	function
(	O
dbf	pointer
,	O
len	long
)	O
,	O
_REMAP_EXTEND	int
)	O
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
dbf	pointer
->	O
need_recovery	int
)	O
return	O
-	O
1	int
;	O
dbf	pointer
->	O
memory_mapping	int
=	O
FALSE	int
;	O
if	O
(	O
lseek	function
(	O
dbf	pointer
->	O
desc	int
,	O
pos	long
,	O
SEEK_SET	int
)	O
!=	O
pos	long
)	O
return	O
total	long
>	O
0	int
?	O
total	long
:	O
-	O
1	int
;	O
rc	int
=	O
write	function
(	O
dbf	pointer
->	O
desc	int
,	O
cbuf	pointer
,	O
len	long
)	O
;	O
if	O
(	O
rc	int
==	O
-	O
1	int
)	O
return	O
total	long
>	O
0	int
?	O
total	long
:	O
-	O
1	int
;	O
return	O
total	long
+	O
rc	int
;	O
}	O
}	O
nbytes	long
=	O
dbf	pointer
->	O
mapped_size	long
-	O
dbf	pointer
->	O
mapped_pos	long
;	O
if	O
(	O
nbytes	long
==	O
0	int
)	O
break	O
;	O
if	O
(	O
nbytes	long
>	O
len	long
)	O
nbytes	long
=	O
len	long
;	O
memcpy	function
(	O
(	O
char	O
*	O
)	O
dbf	pointer
->	O
mapped_region	pointer
+	O
dbf	pointer
->	O
mapped_pos	long
,	O
cbuf	pointer
,	O
nbytes	long
)	O
;	O
cbuf	pointer
+=	O
nbytes	long
;	O
dbf	pointer
->	O
mapped_pos	long
+=	O
nbytes	long
;	O
total	long
+=	O
nbytes	long
;	O
len	long
-=	O
nbytes	long
;	O
}	O
return	O
total	long
;	O
}	O
return	O
write	function
(	O
dbf	pointer
->	O
desc	int
,	O
buffer	pointer
,	O
len	long
)	O
;	O
}	O
off_t	long
_gdbm_mapped_lseek	function
(	O
GDBM_FILE	pointer
dbf	pointer
,	O
off_t	long
offset	pointer
,	O
int	O
whence	int
)	O
{	O
if	O
(	O
dbf	pointer
->	O
memory_mapping	int
)	O
{	O
off_t	long
needle	long
;	O
switch	O
(	O
whence	int
)	O
{	O
case	O
SEEK_SET	int
:	O
needle	long
=	O
offset	pointer
;	O
break	O
;	O
case	O
SEEK_CUR	int
:	O
needle	long
=	O
offset	pointer
+	O
_GDBM_MMAPPED_POS	O
(	O
dbf	pointer
)	O
;	O
break	O
;	O
case	O
SEEK_END	int
:	O
{	O
off_t	long
file_size	long
;	O
if	O
(	O
_gdbm_file_size	function
(	O
dbf	pointer
,	O
&	O
file_size	long
)	O
)	O
return	O
-	O
1	int
;	O
needle	long
=	O
file_size	long
-	O
offset	pointer
;	O
break	O
;	O
}	O
default	O
:	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
needle	long
<	O
0	int
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
!	O
_GDBM_IN_MAPPED_REGION_P	O
(	O
dbf	pointer
,	O
needle	long
)	O
)	O
{	O
_gdbm_mapped_unmap	function
(	O
dbf	pointer
)	O
;	O
dbf	pointer
->	O
mapped_off	long
=	O
needle	long
;	O
dbf	pointer
->	O
mapped_pos	long
=	O
0	int
;	O
}	O
else	O
dbf	pointer
->	O
mapped_pos	long
=	O
needle	long
-	O
dbf	pointer
->	O
mapped_off	long
;	O
return	O
needle	long
;	O
}	O
return	O
lseek	function
(	O
dbf	pointer
->	O
desc	int
,	O
offset	pointer
,	O
whence	int
)	O
;	O
}	O
int	O
_gdbm_mapped_sync	function
(	O
GDBM_FILE	pointer
dbf	pointer
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
dbf	pointer
->	O
mapped_region	pointer
)	O
rc	int
=	O
msync	function
(	O
dbf	pointer
->	O
mapped_region	pointer
,	O
dbf	pointer
->	O
mapped_size	long
,	O
MS_SYNC	int
|	O
MS_INVALIDATE	int
)	O
;	O
else	O
rc	int
=	O
fsync	function
(	O
dbf	pointer
->	O
desc	int
)	O
;	O
if	O
(	O
rc	int
)	O
GDBM_SET_ERRNO	O
(	O
dbf	pointer
,	O
GDBM_FILE_SYNC_ERROR	int
,	O
TRUE	int
)	O
;	O
return	O
rc	int
;	O
}	O
