static	O
bfd_boolean	int
binary_mkobject	function
(	O
bfd	struct
*	O
abfd	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
TRUE	int
;	O
}	O
static	O
const	O
bfd_target	struct
*	O
binary_object_p	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
struct	O
stat	struct
statbuf	struct
;	O
asection	struct
*	O
sec	pointer
;	O
flagword	int
flags	int
;	O
if	O
(	O
abfd	pointer
->	O
target_defaulted	int
)	O
{	O
bfd_set_error	function
(	O
bfd_error_wrong_format	int
)	O
;	O
return	O
NULL	O
;	O
}	O
abfd	pointer
->	O
symcount	int
=	O
BIN_SYMS	int
;	O
if	O
(	O
bfd_stat	function
(	O
abfd	pointer
,	O
&	O
statbuf	struct
)	O
<	O
0	int
)	O
{	O
bfd_set_error	function
(	O
bfd_error_system_call	int
)	O
;	O
return	O
NULL	O
;	O
}	O
flags	int
=	O
SEC_ALLOC	int
|	O
SEC_LOAD	int
|	O
SEC_DATA	int
|	O
SEC_HAS_CONTENTS	int
;	O
sec	pointer
=	O
bfd_make_section_with_flags	function
(	O
abfd	pointer
,	O
".data"	pointer
,	O
flags	int
)	O
;	O
if	O
(	O
sec	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
sec	pointer
->	O
vma	long
=	O
0	int
;	O
sec	pointer
->	O
size	long
=	O
statbuf	struct
.	O
st_size	long
;	O
sec	pointer
->	O
filepos	long
=	O
0	int
;	O
abfd	pointer
->	O
tdata	union
.	O
any	pointer
=	O
(	O
void	O
*	O
)	O
sec	pointer
;	O
return	O
abfd	pointer
->	O
xvec	pointer
;	O
}	O
static	O
bfd_boolean	int
binary_get_section_contents	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
asection	struct
*	O
section	pointer
ATTRIBUTE_UNUSED	O
,	O
void	O
*	O
location	pointer
,	O
file_ptr	long
offset	long
,	O
bfd_size_type	long
count	int
)	O
{	O
if	O
(	O
bfd_seek	function
(	O
abfd	pointer
,	O
offset	long
,	O
SEEK_SET	int
)	O
!=	O
0	int
||	O
bfd_bread	function
(	O
location	pointer
,	O
count	int
,	O
abfd	pointer
)	O
!=	O
count	int
)	O
return	O
FALSE	int
;	O
return	O
TRUE	int
;	O
}	O
static	O
long	O
binary_get_symtab_upper_bound	function
(	O
bfd	struct
*	O
abfd	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
(	O
BIN_SYMS	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
asymbol	struct
*	O
)	O
;	O
}	O
static	O
char	O
*	O
mangle_name	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
char	O
*	O
suffix	pointer
)	O
{	O
bfd_size_type	long
size	long
;	O
char	O
*	O
buf	pointer
;	O
char	O
*	O
p	pointer
;	O
size	long
=	O
(	O
strlen	function
(	O
bfd_get_filename	function
(	O
abfd	pointer
)	O
)	O
+	O
strlen	function
(	O
suffix	pointer
)	O
+	O
sizeof	O
"_binary__"	pointer
)	O
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
bfd_alloc	function
(	O
abfd	pointer
,	O
size	long
)	O
;	O
if	O
(	O
buf	pointer
==	O
NULL	O
)	O
return	O
""	pointer
;	O
sprintf	function
(	O
buf	pointer
,	O
"_binary_%s_%s"	pointer
,	O
bfd_get_filename	function
(	O
abfd	pointer
)	O
,	O
suffix	pointer
)	O
;	O
for	O
(	O
p	pointer
=	O
buf	pointer
;	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
if	O
(	O
!	O
ISALNUM	O
(	O
*	O
p	pointer
)	O
)	O
*	O
p	pointer
=	O
'_'	O
;	O
return	O
buf	pointer
;	O
}	O
static	O
long	O
binary_canonicalize_symtab	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
asymbol	struct
*	O
*	O
alocation	pointer
)	O
{	O
asection	struct
*	O
sec	pointer
=	O
(	O
asection	struct
*	O
)	O
abfd	pointer
->	O
tdata	union
.	O
any	pointer
;	O
asymbol	struct
*	O
syms	pointer
;	O
unsigned	O
int	O
i	pointer
;	O
bfd_size_type	long
amt	long
=	O
BIN_SYMS	int
*	O
sizeof	O
(	O
asymbol	struct
)	O
;	O
syms	pointer
=	O
(	O
asymbol	struct
*	O
)	O
bfd_alloc	function
(	O
abfd	pointer
,	O
amt	long
)	O
;	O
if	O
(	O
syms	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
syms	pointer
[	O
0	int
]	O
.	O
the_bfd	pointer
=	O
abfd	pointer
;	O
syms	pointer
[	O
0	int
]	O
.	O
name	pointer
=	O
mangle_name	function
(	O
abfd	pointer
,	O
"start"	pointer
)	O
;	O
syms	pointer
[	O
0	int
]	O
.	O
value	long
=	O
0	int
;	O
syms	pointer
[	O
0	int
]	O
.	O
flags	int
=	O
BSF_GLOBAL	O
;	O
syms	pointer
[	O
0	int
]	O
.	O
section	pointer
=	O
sec	pointer
;	O
syms	pointer
[	O
0	int
]	O
.	O
udata	union
.	O
p	pointer
=	O
NULL	O
;	O
syms	pointer
[	O
1	int
]	O
.	O
the_bfd	pointer
=	O
abfd	pointer
;	O
syms	pointer
[	O
1	int
]	O
.	O
name	pointer
=	O
mangle_name	function
(	O
abfd	pointer
,	O
"end"	pointer
)	O
;	O
syms	pointer
[	O
1	int
]	O
.	O
value	long
=	O
sec	pointer
->	O
size	long
;	O
syms	pointer
[	O
1	int
]	O
.	O
flags	int
=	O
BSF_GLOBAL	O
;	O
syms	pointer
[	O
1	int
]	O
.	O
section	pointer
=	O
sec	pointer
;	O
syms	pointer
[	O
1	int
]	O
.	O
udata	union
.	O
p	pointer
=	O
NULL	O
;	O
syms	pointer
[	O
2	int
]	O
.	O
the_bfd	pointer
=	O
abfd	pointer
;	O
syms	pointer
[	O
2	int
]	O
.	O
name	pointer
=	O
mangle_name	function
(	O
abfd	pointer
,	O
"size"	pointer
)	O
;	O
syms	pointer
[	O
2	int
]	O
.	O
value	long
=	O
sec	pointer
->	O
size	long
;	O
syms	pointer
[	O
2	int
]	O
.	O
flags	int
=	O
BSF_GLOBAL	O
;	O
syms	pointer
[	O
2	int
]	O
.	O
section	pointer
=	O
bfd_abs_section_ptr	O
;	O
syms	pointer
[	O
2	int
]	O
.	O
udata	union
.	O
p	pointer
=	O
NULL	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
BIN_SYMS	int
;	O
i	pointer
++	O
)	O
*	O
alocation	pointer
++	O
=	O
syms	pointer
++	O
;	O
*	O
alocation	pointer
=	O
NULL	O
;	O
return	O
BIN_SYMS	int
;	O
}	O
static	O
void	O
binary_get_symbol_info	function
(	O
bfd	struct
*	O
ignore_abfd	pointer
ATTRIBUTE_UNUSED	O
,	O
asymbol	struct
*	O
symbol	pointer
,	O
symbol_info	struct
*	O
ret	pointer
)	O
{	O
bfd_symbol_info	function
(	O
symbol	pointer
,	O
ret	pointer
)	O
;	O
}	O
static	O
bfd_boolean	int
binary_set_section_contents	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
asection	struct
*	O
sec	pointer
,	O
const	O
void	O
*	O
data	pointer
,	O
file_ptr	long
offset	long
,	O
bfd_size_type	long
size	long
)	O
{	O
if	O
(	O
size	long
==	O
0	int
)	O
return	O
TRUE	int
;	O
if	O
(	O
!	O
abfd	pointer
->	O
output_has_begun	int
)	O
{	O
bfd_boolean	int
found_low	int
;	O
bfd_vma	long
low	long
;	O
asection	struct
*	O
s	pointer
;	O
found_low	int
=	O
FALSE	int
;	O
low	long
=	O
0	int
;	O
for	O
(	O
s	pointer
=	O
abfd	pointer
->	O
sections	pointer
;	O
s	pointer
!=	O
NULL	O
;	O
s	pointer
=	O
s	pointer
->	O
next	pointer
)	O
if	O
(	O
(	O
(	O
s	pointer
->	O
flags	int
&	O
(	O
SEC_HAS_CONTENTS	int
|	O
SEC_LOAD	int
|	O
SEC_ALLOC	int
|	O
SEC_NEVER_LOAD	int
)	O
)	O
==	O
(	O
SEC_HAS_CONTENTS	int
|	O
SEC_LOAD	int
|	O
SEC_ALLOC	int
)	O
)	O
&&	O
(	O
s	pointer
->	O
size	long
>	O
0	int
)	O
&&	O
(	O
!	O
found_low	int
||	O
s	pointer
->	O
lma	long
<	O
low	long
)	O
)	O
{	O
low	long
=	O
s	pointer
->	O
lma	long
;	O
found_low	int
=	O
TRUE	int
;	O
}	O
for	O
(	O
s	pointer
=	O
abfd	pointer
->	O
sections	pointer
;	O
s	pointer
!=	O
NULL	O
;	O
s	pointer
=	O
s	pointer
->	O
next	pointer
)	O
{	O
unsigned	O
int	O
opb	int
=	O
bfd_octets_per_byte	function
(	O
abfd	pointer
,	O
s	pointer
)	O
;	O
s	pointer
->	O
filepos	long
=	O
(	O
s	pointer
->	O
lma	long
-	O
low	long
)	O
*	O
opb	int
;	O
if	O
(	O
(	O
s	pointer
->	O
flags	int
&	O
(	O
SEC_HAS_CONTENTS	int
|	O
SEC_ALLOC	int
|	O
SEC_NEVER_LOAD	int
)	O
)	O
!=	O
(	O
SEC_HAS_CONTENTS	int
|	O
SEC_ALLOC	int
)	O
||	O
(	O
s	pointer
->	O
size	long
==	O
0	int
)	O
)	O
continue	O
;	O
if	O
(	O
s	pointer
->	O
filepos	long
<	O
0	int
)	O
_bfd_error_handler	function
(	O
_	O
(	O
"warning: writing section `%pA' at huge (ie negative) "	pointer
"file offset"	pointer
)	O
,	O
s	pointer
)	O
;	O
}	O
abfd	pointer
->	O
output_has_begun	int
=	O
TRUE	int
;	O
}	O
if	O
(	O
(	O
sec	pointer
->	O
flags	int
&	O
(	O
SEC_LOAD	int
|	O
SEC_ALLOC	int
)	O
)	O
==	O
0	int
)	O
return	O
TRUE	int
;	O
if	O
(	O
(	O
sec	pointer
->	O
flags	int
&	O
SEC_NEVER_LOAD	int
)	O
!=	O
0	int
)	O
return	O
TRUE	int
;	O
return	O
_bfd_generic_set_section_contents	function
(	O
abfd	pointer
,	O
sec	pointer
,	O
data	pointer
,	O
offset	long
,	O
size	long
)	O
;	O
}	O
static	O
int	O
binary_sizeof_headers	function
(	O
bfd	struct
*	O
abfd	pointer
ATTRIBUTE_UNUSED	O
,	O
struct	O
bfd_link_info	O
*	O
info	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
0	int
;	O
}	O
const	O
bfd_target	struct
binary_vec	struct
=	O
{	O
"binary"	pointer
,	O
bfd_target_unknown_flavour	int
,	O
BFD_ENDIAN_UNKNOWN	int
,	O
BFD_ENDIAN_UNKNOWN	int
,	O
EXEC_P	int
,	O
(	O
SEC_ALLOC	int
|	O
SEC_LOAD	int
|	O
SEC_READONLY	int
|	O
SEC_CODE	int
|	O
SEC_DATA	int
|	O
SEC_ROM	int
|	O
SEC_HAS_CONTENTS	int
)	O
,	O
0	int
,	O
' '	O
,	O
16	int
,	O
255	int
,	O
bfd_getb64	function
,	O
bfd_getb_signed_64	function
,	O
bfd_putb64	function
,	O
bfd_getb32	function
,	O
bfd_getb_signed_32	function
,	O
bfd_putb32	function
,	O
bfd_getb16	function
,	O
bfd_getb_signed_16	function
,	O
bfd_putb16	function
,	O
bfd_getb64	function
,	O
bfd_getb_signed_64	function
,	O
bfd_putb64	function
,	O
bfd_getb32	function
,	O
bfd_getb_signed_32	function
,	O
bfd_putb32	function
,	O
bfd_getb16	function
,	O
bfd_getb_signed_16	function
,	O
bfd_putb16	function
,	O
{	O
_bfd_dummy_target	function
,	O
binary_object_p	function
,	O
_bfd_dummy_target	function
,	O
_bfd_dummy_target	function
,	O
}	O
,	O
{	O
_bfd_bool_bfd_false_error	function
,	O
binary_mkobject	function
,	O
_bfd_bool_bfd_false_error	function
,	O
_bfd_bool_bfd_false_error	function
,	O
}	O
,	O
{	O
_bfd_bool_bfd_false_error	function
,	O
_bfd_bool_bfd_true	function
,	O
_bfd_bool_bfd_false_error	function
,	O
_bfd_bool_bfd_false_error	function
,	O
}	O
,	O
BFD_JUMP_TABLE_GENERIC	O
(	O
binary	O
)	O
,	O
BFD_JUMP_TABLE_COPY	O
(	O
_bfd_generic	O
)	O
,	O
BFD_JUMP_TABLE_CORE	O
(	O
_bfd_nocore	O
)	O
,	O
BFD_JUMP_TABLE_ARCHIVE	O
(	O
_bfd_noarchive	O
)	O
,	O
BFD_JUMP_TABLE_SYMBOLS	O
(	O
binary	O
)	O
,	O
BFD_JUMP_TABLE_RELOCS	O
(	O
_bfd_norelocs	O
)	O
,	O
BFD_JUMP_TABLE_WRITE	O
(	O
binary	O
)	O
,	O
BFD_JUMP_TABLE_LINK	O
(	O
binary	O
)	O
,	O
BFD_JUMP_TABLE_DYNAMIC	O
(	O
_bfd_nodynamic	O
)	O
,	O
NULL	O
,	O
NULL	O
}	O
;	O
