unsigned	O
char	O
*	O
dwg_sentinel	function
(	O
Dwg_Sentinel	enum
s	pointer
)	O
{	O
static	O
unsigned	O
char	O
sentinels	array
[	O
9	int
]	O
[	O
16	int
]	O
=	O
{	O
{	O
0x95	int
,	O
0xA0	int
,	O
0x4E	int
,	O
0x28	int
,	O
0x99	int
,	O
0x82	int
,	O
0x1A	int
,	O
0xE5	int
,	O
0x5E	int
,	O
0x41	int
,	O
0xE0	int
,	O
0x5F	int
,	O
0x9D	int
,	O
0x3A	int
,	O
0x4D	int
,	O
0x00	int
}	O
,	O
{	O
0x1F	int
,	O
0x25	int
,	O
0x6D	int
,	O
0x07	int
,	O
0xD4	int
,	O
0x36	int
,	O
0x28	int
,	O
0x28	int
,	O
0x9D	int
,	O
0x57	int
,	O
0xCA	int
,	O
0x3F	int
,	O
0x9D	int
,	O
0x44	int
,	O
0x10	int
,	O
0x2B	int
}	O
,	O
{	O
0xE0	int
,	O
0xDA	int
,	O
0x92	int
,	O
0xF8	int
,	O
0x2B	int
,	O
0xc9	int
,	O
0xD7	int
,	O
0xD7	int
,	O
0x62	int
,	O
0xA8	int
,	O
0x35	int
,	O
0xC0	int
,	O
0x62	int
,	O
0xBB	int
,	O
0xEF	int
,	O
0xD4	int
}	O
,	O
{	O
0xCF	int
,	O
0x7B	int
,	O
0x1F	int
,	O
0x23	int
,	O
0xFD	int
,	O
0xDE	int
,	O
0x38	int
,	O
0xA9	int
,	O
0x5F	int
,	O
0x7C	int
,	O
0x68	int
,	O
0xB8	int
,	O
0x4E	int
,	O
0x6D	int
,	O
0x33	int
,	O
0x5F	int
}	O
,	O
{	O
0x30	int
,	O
0x84	int
,	O
0xE0	int
,	O
0xDC	int
,	O
0x02	int
,	O
0x21	int
,	O
0xC7	int
,	O
0x56	int
,	O
0xA0	int
,	O
0x83	int
,	O
0x97	int
,	O
0x47	int
,	O
0xB1	int
,	O
0x92	int
,	O
0xCC	int
,	O
0xA0	int
}	O
,	O
{	O
0x8D	int
,	O
0xA1	int
,	O
0xC4	int
,	O
0xB8	int
,	O
0xC4	int
,	O
0xA9	int
,	O
0xF8	int
,	O
0xC5	int
,	O
0xC0	int
,	O
0xDC	int
,	O
0xF4	int
,	O
0x5F	int
,	O
0xE7	int
,	O
0xCF	int
,	O
0xB6	int
,	O
0x8A	int
}	O
,	O
{	O
0x72	int
,	O
0x5E	int
,	O
0x3B	int
,	O
0x47	int
,	O
0x3B	int
,	O
0x56	int
,	O
0x07	int
,	O
0x3A	int
,	O
0x3F	int
,	O
0x23	int
,	O
0x0B	int
,	O
0xA0	int
,	O
0x18	int
,	O
0x30	int
,	O
0x49	int
,	O
0x75	int
}	O
,	O
{	O
0xD4	int
,	O
0x7B	int
,	O
0x21	int
,	O
0xCE	int
,	O
0x28	int
,	O
0x93	int
,	O
0x9F	int
,	O
0xBF	int
,	O
0x53	int
,	O
0x24	int
,	O
0x40	int
,	O
0x09	int
,	O
0x12	int
,	O
0x3C	int
,	O
0xAA	int
,	O
0x01	int
}	O
,	O
{	O
0x2B	int
,	O
0x84	int
,	O
0xDE	int
,	O
0x31	int
,	O
0xD7	int
,	O
0x6C	int
,	O
0x60	int
,	O
0x40	int
,	O
0xAC	int
,	O
0xDB	int
,	O
0xBF	int
,	O
0xF6	int
,	O
0xED	int
,	O
0xC3	int
,	O
0x55	int
,	O
0xFE	int
}	O
,	O
}	O
;	O
return	O
(	O
sentinels	array
[	O
s	pointer
]	O
)	O
;	O
}	O
const	O
char	O
version_codes	array
[	O
DWG_VERSIONS	O
]	O
[	O
7	int
]	O
=	O
{	O
"INVALI"	pointer
,	O
"MC0.0"	pointer
,	O
"AC1.2"	pointer
,	O
"AC1.4"	pointer
,	O
"AC1.50"	pointer
,	O
"AC2.10"	pointer
,	O
"AC1002"	pointer
,	O
"AC1003"	pointer
,	O
"AC1004"	pointer
,	O
"AC1006"	pointer
,	O
"AC1009"	pointer
,	O
"AC1012"	pointer
,	O
"AC1014"	pointer
,	O
"AC1015"	pointer
,	O
"AC1018"	pointer
,	O
"AC1021"	pointer
,	O
"AC1024"	pointer
,	O
"AC1027"	pointer
,	O
"AC1032"	pointer
,	O
"------"	pointer
}	O
;	O
const	O
char	O
*	O
dwg_bits_name	array
[	O
]	O
=	O
{	O
"UNKNOWN"	pointer
,	O
"RC"	pointer
,	O
"RS"	pointer
,	O
"RL"	pointer
,	O
"B"	pointer
,	O
"BB"	pointer
,	O
"3B"	pointer
,	O
"4BITS"	pointer
,	O
"BS"	pointer
,	O
"BL"	pointer
,	O
"BLd"	pointer
,	O
"RLL"	pointer
,	O
"RD"	pointer
,	O
"BD"	pointer
,	O
"MC"	pointer
,	O
"UMC"	pointer
,	O
"MS"	pointer
,	O
"TV"	pointer
,	O
"TU"	pointer
,	O
"T"	pointer
,	O
"TF"	pointer
,	O
"HANDLE"	pointer
,	O
"BE"	pointer
,	O
"DD"	pointer
,	O
"BT"	pointer
,	O
"BOT"	pointer
,	O
"BLL"	pointer
,	O
"TIMEBLL"	pointer
,	O
"CMC"	pointer
,	O
"ENC"	pointer
,	O
"2RD"	pointer
,	O
"3RD"	pointer
,	O
"2BD"	pointer
,	O
"3BD"	pointer
,	O
"2DD"	pointer
,	O
"3DD"	pointer
,	O
"CRC"	pointer
,	O
"CRC64"	pointer
,	O
}	O
;	O
const	O
unsigned	O
char	O
dwg_bits_size	array
[	O
]	O
=	O
{	O
0	int
,	O
8	int
,	O
16	int
,	O
32	int
,	O
1	int
,	O
2	int
,	O
3	int
,	O
4	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
64	int
,	O
64	int
,	O
2	int
,	O
1	int
,	O
1	int
,	O
16	int
,	O
2	int
,	O
18	int
,	O
2	int
,	O
1	int
,	O
8	int
,	O
1	int
,	O
2	int
,	O
1	int
,	O
10	int
,	O
3	int
,	O
4	int
,	O
2	int
,	O
4	int
,	O
128	int
,	O
196	int
,	O
4	int
,	O
6	int
,	O
4	int
,	O
6	int
,	O
8	int
,	O
64	int
,	O
}	O
;	O
EXPORT	O
Dwg_Version_Type	enum
dwg_version_as	function
(	O
const	O
char	O
*	O
version	short
)	O
{	O
if	O
(	O
strEQc	O
(	O
version	short
,	O
"r2000"	pointer
)	O
)	O
return	O
R_2000	int
;	O
else	O
if	O
(	O
strEQc	O
(	O
version	short
,	O
"r2004"	pointer
)	O
)	O
return	O
R_2004	int
;	O
else	O
if	O
(	O
strEQc	O
(	O
version	short
,	O
"r2007"	pointer
)	O
)	O
return	O
R_2007	int
;	O
else	O
if	O
(	O
strEQc	O
(	O
version	short
,	O
"r2010"	pointer
)	O
)	O
return	O
R_2010	int
;	O
else	O
if	O
(	O
strEQc	O
(	O
version	short
,	O
"r2013"	pointer
)	O
)	O
return	O
R_2013	int
;	O
else	O
if	O
(	O
strEQc	O
(	O
version	short
,	O
"r2018"	pointer
)	O
)	O
return	O
R_2018	int
;	O
else	O
if	O
(	O
strEQc	O
(	O
version	short
,	O
"r14"	pointer
)	O
)	O
return	O
R_14	int
;	O
else	O
if	O
(	O
strEQc	O
(	O
version	short
,	O
"r13"	pointer
)	O
)	O
return	O
R_13	int
;	O
else	O
if	O
(	O
strEQc	O
(	O
version	short
,	O
"r11"	pointer
)	O
||	O
strEQc	O
(	O
version	short
,	O
"r12"	pointer
)	O
)	O
return	O
R_11	int
;	O
else	O
if	O
(	O
strEQc	O
(	O
version	short
,	O
"r10"	pointer
)	O
)	O
return	O
R_10	int
;	O
else	O
if	O
(	O
strEQc	O
(	O
version	short
,	O
"r9"	pointer
)	O
)	O
return	O
R_9	int
;	O
else	O
if	O
(	O
strEQc	O
(	O
version	short
,	O
"r2.6"	pointer
)	O
)	O
return	O
R_2_6	int
;	O
else	O
if	O
(	O
strEQc	O
(	O
version	short
,	O
"r2.5"	pointer
)	O
)	O
return	O
R_2_5	int
;	O
else	O
if	O
(	O
strEQc	O
(	O
version	short
,	O
"r2.1"	pointer
)	O
)	O
return	O
R_2_1	int
;	O
else	O
if	O
(	O
strEQc	O
(	O
version	short
,	O
"r2.0"	pointer
)	O
)	O
return	O
R_2_0	int
;	O
else	O
if	O
(	O
strEQc	O
(	O
version	short
,	O
"r1.4"	pointer
)	O
)	O
return	O
R_1_4	int
;	O
else	O
if	O
(	O
strEQc	O
(	O
version	short
,	O
"r1.2"	pointer
)	O
)	O
return	O
R_1_2	int
;	O
else	O
if	O
(	O
strEQc	O
(	O
version	short
,	O
"r1.1"	pointer
)	O
)	O
return	O
R_1_1	int
;	O
else	O
return	O
R_INVALID	int
;	O
}	O
const	O
char	O
*	O
dwg_version_type	function
(	O
const	O
Dwg_Version_Type	enum
version	short
)	O
{	O
switch	O
(	O
version	short
)	O
{	O
case	O
R_INVALID	int
:	O
return	O
"invalid version"	pointer
;	O
case	O
R_1_1	int
:	O
return	O
"r1.1"	pointer
;	O
case	O
R_1_2	int
:	O
return	O
"r1.2"	pointer
;	O
case	O
R_1_4	int
:	O
return	O
"r1.4"	pointer
;	O
case	O
R_2_0	int
:	O
return	O
"r2.0"	pointer
;	O
case	O
R_2_1	int
:	O
return	O
"r2.1"	pointer
;	O
case	O
R_2_5	int
:	O
return	O
"r2.5"	pointer
;	O
case	O
R_2_6	int
:	O
return	O
"r2.6"	pointer
;	O
case	O
R_9	int
:	O
return	O
"r9"	pointer
;	O
case	O
R_10	int
:	O
return	O
"r10"	pointer
;	O
case	O
R_11	int
:	O
return	O
"r11"	pointer
;	O
case	O
R_13	int
:	O
return	O
"r13"	pointer
;	O
case	O
R_14	int
:	O
return	O
"r14"	pointer
;	O
case	O
R_2000	int
:	O
return	O
"r2000"	pointer
;	O
case	O
R_2004	int
:	O
return	O
"r2004"	pointer
;	O
case	O
R_2007	int
:	O
return	O
"r2007"	pointer
;	O
case	O
R_2010	int
:	O
return	O
"r2010"	pointer
;	O
case	O
R_2013	int
:	O
return	O
"r2013"	pointer
;	O
case	O
R_2018	int
:	O
return	O
"r2018"	pointer
;	O
case	O
R_AFTER	int
:	O
return	O
"invalid after"	pointer
;	O
default	O
:	O
return	O
""	pointer
;	O
}	O
}	O
char	O
*	O
strrplc	function
(	O
const	O
char	O
*	O
s	pointer
,	O
const	O
char	O
*	O
from	int
,	O
const	O
char	O
*	O
to	int
)	O
{	O
char	O
*	O
p	pointer
=	O
strstr	function
(	O
s	pointer
,	O
from	int
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
int	O
len	int
=	O
strlen	function
(	O
s	pointer
)	O
-	O
(	O
strlen	function
(	O
from	int
)	O
-	O
strlen	function
(	O
to	int
)	O
)	O
;	O
char	O
*	O
dest	pointer
=	O
(	O
char	O
*	O
)	O
calloc	function
(	O
1	int
,	O
80	int
)	O
;	O
int	O
i	int
=	O
p	pointer
-	O
s	pointer
;	O
assert	O
(	O
len	int
<	O
80	int
)	O
;	O
memcpy	function
(	O
dest	pointer
,	O
s	pointer
,	O
i	int
)	O
;	O
strcat	function
(	O
dest	pointer
,	O
to	int
)	O
;	O
strcat	function
(	O
dest	pointer
,	O
s	pointer
+	O
i	int
+	O
strlen	function
(	O
from	int
)	O
)	O
;	O
return	O
dest	pointer
;	O
}	O
else	O
return	O
NULL	O
;	O
}	O
EXPORT	O
void	O
dwg_errstrings	function
(	O
int	O
error	int
)	O
{	O
if	O
(	O
error	int
&	O
1	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"WRONGCRC "	pointer
)	O
;	O
if	O
(	O
error	int
&	O
2	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"NOTYETSUPPORTED "	pointer
)	O
;	O
if	O
(	O
error	int
&	O
4	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"UNHANDLEDCLASS "	pointer
)	O
;	O
if	O
(	O
error	int
&	O
8	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"INVALIDTYPE "	pointer
)	O
;	O
if	O
(	O
error	int
&	O
16	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"INVALIDHANDLE "	pointer
)	O
;	O
if	O
(	O
error	int
&	O
32	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"INVALIDEED "	pointer
)	O
;	O
if	O
(	O
error	int
&	O
64	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"VALUEOUTOFBOUNDS "	pointer
)	O
;	O
if	O
(	O
error	int
>	O
127	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"\nCritical: "	pointer
)	O
;	O
if	O
(	O
error	int
&	O
128	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"CLASSESNOTFOUND "	pointer
)	O
;	O
if	O
(	O
error	int
&	O
256	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"SECTIONNOTFOUND "	pointer
)	O
;	O
if	O
(	O
error	int
&	O
512	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"PAGENOTFOUND "	pointer
)	O
;	O
if	O
(	O
error	int
&	O
1024	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"INTERNALERROR "	pointer
)	O
;	O
if	O
(	O
error	int
&	O
2048	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"INVALIDDWG "	pointer
)	O
;	O
if	O
(	O
error	int
&	O
4096	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"IOERROR "	pointer
)	O
;	O
if	O
(	O
error	int
&	O
8192	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"OUTOFMEM "	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
}	O