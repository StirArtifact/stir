static	O
int	O
url_reconstruct_to_pool	function
(	O
mu_url_t	*
url	*
,	O
mu_opool_t	*
pool	*
)	O
{	O
if	O
(	O
url	*
->	O
flags	int
&	O
MU_URL_SCHEME	int
)	O
{	O
int	O
i	int
;	O
mu_opool_appendz	function
(	O
pool	*
,	O
url	*
->	O
scheme	*
)	O
;	O
mu_opool_append	function
(	O
pool	*
,	O
"://"	*
,	O
3	int
)	O
;	O
if	O
(	O
url	*
->	O
flags	int
&	O
MU_URL_USER	int
)	O
mu_opool_appendz	function
(	O
pool	*
,	O
url	*
->	O
user	*
)	O
;	O
if	O
(	O
url	*
->	O
flags	int
&	O
MU_URL_SECRET	int
)	O
mu_opool_append	function
(	O
pool	*
,	O
":***"	*
,	O
4	int
)	O
;	O
if	O
(	O
url	*
->	O
flags	int
&	O
MU_URL_AUTH	int
)	O
{	O
mu_opool_append	function
(	O
pool	array
,	O
AUTH_PFX	int
,	O
sizeof	O
AUTH_PFX	int
-	O
1	int
)	O
;	O
mu_opool_appendz	function
(	O
pool	*
,	O
url	*
->	O
auth	*
)	O
;	O
}	O
if	O
(	O
url	*
->	O
flags	int
&	O
MU_URL_HOST	int
)	O
{	O
if	O
(	O
url	*
->	O
flags	int
&	O
(	O
MU_URL_USER	int
|	O
MU_URL_SECRET	int
|	O
MU_URL_AUTH	int
)	O
)	O
mu_opool_append_char	function
(	O
pool	array
,	O
'@'	O
)	O
;	O
mu_opool_appendz	function
(	O
pool	*
,	O
url	*
->	O
host	*
)	O
;	O
if	O
(	O
url	*
->	O
flags	int
&	O
MU_URL_PORT	int
)	O
{	O
mu_opool_append_char	function
(	O
pool	array
,	O
':'	O
)	O
;	O
mu_opool_appendz	function
(	O
pool	*
,	O
url	*
->	O
portstr	*
)	O
;	O
}	O
}	O
else	O
if	O
(	O
url	*
->	O
flags	int
&	O
(	O
MU_URL_USER	int
|	O
MU_URL_SECRET	int
|	O
MU_URL_AUTH	int
)	O
)	O
return	O
MU_ERR_URL_MISS_PARTS	int
;	O
if	O
(	O
url	*
->	O
flags	int
&	O
MU_URL_PATH	int
)	O
{	O
if	O
(	O
url	*
->	O
flags	int
&	O
MU_URL_HOST	int
)	O
mu_opool_append_char	function
(	O
pool	array
,	O
'/'	O
)	O
;	O
mu_opool_appendz	function
(	O
pool	*
,	O
url	*
->	O
path	*
)	O
;	O
}	O
if	O
(	O
url	*
->	O
flags	int
&	O
MU_URL_PARAM	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
url	*
->	O
fvcount	int
;	O
i	int
++	O
)	O
{	O
mu_opool_append_char	function
(	O
pool	array
,	O
';'	O
)	O
;	O
mu_opool_append	function
(	O
pool	array
,	O
url	*
->	O
fvpairs	*
[	O
i	int
]	O
,	O
strlen	function
(	O
url	*
->	O
fvpairs	*
[	O
i	int
]	O
)	O
)	O
;	O
}	O
}	O
if	O
(	O
url	*
->	O
flags	int
&	O
MU_URL_QUERY	int
)	O
{	O
mu_opool_append_char	function
(	O
pool	array
,	O
'?'	O
)	O
;	O
mu_opool_append	function
(	O
pool	array
,	O
url	*
->	O
qargv	*
[	O
0	int
]	O
,	O
strlen	function
(	O
url	*
->	O
qargv	*
[	O
0	int
]	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
url	*
->	O
qargc	int
;	O
i	int
++	O
)	O
{	O
mu_opool_append_char	function
(	O
pool	array
,	O
'&'	O
)	O
;	O
mu_opool_append	function
(	O
pool	array
,	O
url	*
->	O
qargv	*
[	O
i	int
]	O
,	O
strlen	function
(	O
url	*
->	O
qargv	*
[	O
i	int
]	O
)	O
)	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
url	*
->	O
flags	int
==	O
MU_URL_PATH	int
)	O
{	O
mu_opool_appendz	function
(	O
pool	*
,	O
url	*
->	O
path	*
)	O
;	O
return	O
0	int
;	O
}	O
return	O
MU_ERR_URL_MISS_PARTS	int
;	O
}	O
int	O
mu_url_sget_name	function
(	O
const	O
mu_url_t	*
url	*
,	O
const	O
char	O
*	O
*	O
retptr	*
)	O
{	O
if	O
(	O
!	O
url	*
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
url	*
->	O
name	*
)	O
{	O
mu_opool_t	*
pool	*
;	O
int	O
rc	int
;	O
char	O
*	O
ptr	*
,	O
*	O
newname	*
;	O
size_t	long
size	long
;	O
rc	int
=	O
mu_opool_create	function
(	O
&	O
pool	*
,	O
MU_OPOOL_DEFAULT	*
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
url_reconstruct_to_pool	function
(	O
url	*
,	O
pool	*
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_opool_destroy	function
(	O
&	O
pool	*
)	O
;	O
return	O
rc	int
;	O
}	O
ptr	*
=	O
mu_opool_finish	function
(	O
pool	*
,	O
&	O
size	int
)	O
;	O
newname	*
=	O
realloc	function
(	O
url	*
->	O
name	*
,	O
size	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
newname	*
)	O
{	O
mu_opool_destroy	function
(	O
&	O
pool	*
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
memcpy	function
(	O
newname	*
,	O
ptr	*
,	O
size	long
)	O
;	O
newname	*
[	O
size	int
]	O
=	O
0	int
;	O
url	*
->	O
name	*
=	O
newname	*
;	O
mu_opool_destroy	function
(	O
&	O
pool	*
)	O
;	O
}	O
if	O
(	O
retptr	int
)	O
*	O
retptr	*
=	O
url	*
->	O
name	*
;	O
return	O
0	int
;	O
}	O
int	O
mu_url_aget_name	function
(	O
const	O
mu_url_t	*
url	*
,	O
char	O
*	O
*	O
ret	*
)	O
{	O
char	O
*	O
s	*
;	O
const	O
char	O
*	O
ptr	*
;	O
int	O
rc	int
=	O
mu_url_sget_name	function
(	O
url	*
,	O
&	O
ptr	*
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
s	*
=	O
strdup	function
(	O
ptr	*
)	O
;	O
if	O
(	O
!	O
s	*
)	O
return	O
errno	O
;	O
*	O
ret	*
=	O
s	*
;	O
return	O
0	int
;	O
}	O
int	O
mu_url_get_name	function
(	O
const	O
mu_url_t	*
url	*
,	O
char	O
*	O
buf	*
,	O
size_t	long
size	long
,	O
size_t	long
*	O
n	*
)	O
{	O
size_t	long
i	*
;	O
const	O
char	O
*	O
ptr	*
;	O
int	O
rc	int
=	O
mu_url_sget_name	function
(	O
url	*
,	O
&	O
ptr	*
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
i	int
=	O
mu_cpystr	function
(	O
buf	*
,	O
ptr	*
,	O
size	long
)	O
;	O
if	O
(	O
n	int
)	O
*	O
n	*
=	O
i	int
;	O
return	O
0	int
;	O
}	O
const	O
char	O
*	O
mu_url_to_string	function
(	O
const	O
mu_url_t	*
url	*
)	O
{	O
const	O
char	O
*	O
ptr	*
;	O
if	O
(	O
mu_url_sget_name	function
(	O
url	*
,	O
&	O
ptr	*
)	O
)	O
return	O
""	*
;	O
return	O
ptr	*
;	O
}	O