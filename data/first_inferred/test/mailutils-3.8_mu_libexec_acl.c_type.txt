char	O
acl_docstring	array
[	O
]	O
=	O
N_	O
(	O
"test access control lists"	*
)	O
;	O
static	O
char	O
acl_args_doc	array
[	O
]	O
=	O
N_	O
(	O
"ADDRESS [ADDRESS...]"	*
)	O
;	O
static	O
char	O
*	O
input_file_name	*
;	O
static	O
struct	O
mu_sockaddr	struct
*	O
target_sa	*
;	O
static	O
mu_acl_t	*
acl	*
;	O
static	O
const	O
char	O
*	O
path	*
=	O
"acl"	*
;	O
static	O
struct	O
mu_option	struct
acl_options	array
[	O
]	O
=	O
{	O
{	O
"file"	*
,	O
'f'	O
,	O
N_	O
(	O
"FILE"	*
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"read ACLs from FILE"	*
)	O
,	O
mu_c_string	int
,	O
&	O
input_file_name	int
}	O
,	O
{	O
"path"	*
,	O
'p'	O
,	O
N_	O
(	O
"PATH"	*
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"path to the ACL in the configuration tree"	*
)	O
,	O
mu_c_string	int
,	O
&	O
path	*
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
struct	O
mu_cfg_param	struct
acl_cfg_param	array
[	O
]	O
=	O
{	O
{	O
"acl"	*
,	O
mu_cfg_section	int
,	O
&	O
acl	*
,	O
0	int
,	O
NULL	O
,	O
"access control list"	function
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*
)	O
{	O
int	O
rc	int
;	O
mu_acl_result_t	enum
result	enum
;	O
mu_cfg_tree_t	struct
*	O
tree	*
=	O
NULL	O
,	O
*	O
temp_tree	*
=	O
NULL	O
;	O
mu_cfg_node_t	struct
*	O
node	*
;	O
struct	O
mu_cfg_parse_hints	struct
hints	*
;	O
mu_action_getopt	function
(	O
&	O
argc	long
,	O
&	O
argv	*
,	O
acl_options	*
,	O
acl_docstring	*
,	O
acl_args_doc	*
)	O
;	O
if	O
(	O
argc	long
==	O
0	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"not enough arguments"	*
)	O
)	O
;	O
return	O
1	int
;	O
}	O
memset	function
(	O
&	O
hints	*
,	O
0	int
,	O
sizeof	O
(	O
hints	*
)	O
)	O
;	O
hints	*
.	O
flags	int
=	O
MU_CFHINT_CUSTOM_FILE	int
;	O
hints	*
.	O
custom_file	*
=	O
input_file_name	*
;	O
mu_acl_cfg_init	function
(	O
)	O
;	O
if	O
(	O
mu_cfg_parse_config	function
(	O
&	O
tree	*
,	O
&	O
hints	*
)	O
)	O
exit	function
(	O
EX_CONFIG	*
)	O
;	O
if	O
(	O
!	O
tree	*
)	O
return	O
0	int
;	O
if	O
(	O
mu_cfg_find_node	function
(	O
tree	*
,	O
path	*
,	O
&	O
node	*
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot find node: %s"	*
)	O
,	O
path	*
)	O
;	O
return	O
1	int
;	O
}	O
mu_cfg_tree_create	function
(	O
&	O
temp_tree	struct
)	O
;	O
mu_cfg_tree_add_node	function
(	O
temp_tree	*
,	O
node	*
)	O
;	O
rc	int
=	O
mu_cfg_tree_reduce	function
(	O
temp_tree	*
,	O
NULL	O
,	O
acl_cfg_param	*
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
1	int
;	O
if	O
(	O
!	O
acl	*
)	O
{	O
mu_error	function
(	O
_	O
(	O
"No ACL found in config"	*
)	O
)	O
;	O
return	O
1	int
;	O
}	O
while	O
(	O
argc	int
--	O
)	O
{	O
const	O
char	O
*	O
ap	*
=	O
*	O
argv	*
++	O
;	O
rc	int
=	O
mu_sockaddr_from_node	function
(	O
&	O
target_sa	*
,	O
ap	*
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
"mu_sockaddr_from_node: %s"	*
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
mu_printf	function
(	O
"Testing %s:\n"	*
,	O
ap	*
)	O
;	O
rc	int
=	O
mu_acl_check_sockaddr	function
(	O
acl	*
,	O
target_sa	*
->	O
addr	int
,	O
target_sa	*
->	O
addrlen	int
,	O
&	O
result	*
)	O
;	O
mu_sockaddr_free_list	function
(	O
target_sa	*
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
"mu_acl_check_sockaddr failed: %s"	*
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
switch	O
(	O
result	*
)	O
{	O
case	O
mu_acl_result_undefined	int
:	O
mu_printf	function
(	O
"%s: undefined\n"	*
,	O
ap	*
)	O
;	O
break	O
;	O
case	O
mu_acl_result_accept	int
:	O
mu_printf	function
(	O
"%s: accept\n"	*
,	O
ap	*
)	O
;	O
break	O
;	O
case	O
mu_acl_result_deny	int
:	O
mu_printf	function
(	O
"%s: deny\n"	*
,	O
ap	*
)	O
;	O
break	O
;	O
}	O
}	O
mu_cfg_destroy_tree	function
(	O
&	O
tree	*
)	O
;	O
mu_cfg_destroy_tree	function
(	O
&	O
temp_tree	*
)	O
;	O
return	O
0	int
;	O
}	O