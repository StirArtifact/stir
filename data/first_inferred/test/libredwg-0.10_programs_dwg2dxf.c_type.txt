static	O
int	O
opts	int
=	O
1	int
;	O
int	O
minimal	int
=	O
0	int
;	O
int	O
binary	int
=	O
0	int
;	O
int	O
overwrite	int
=	O
0	int
;	O
char	O
buf	array
[	O
4096	int
]	O
;	O
static	O
unsigned	O
int	O
cur_ver	int
=	O
0	int
;	O
static	O
int	O
usage	function
(	O
void	O
)	O
{	O
printf	function
(	O
"\nUsage: dwg2dxf [-v[N]] [--as rNNNN] [-m|--minimal] [-b|--binary] "	pointer
"DWGFILES...\n"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
static	O
int	O
opt_version	function
(	O
void	O
)	O
{	O
printf	function
(	O
"dwg2dxf %s\n"	pointer
,	O
PACKAGE_VERSION	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
help	function
(	O
void	O
)	O
{	O
printf	function
(	O
"\nUsage: dwg2dxf [OPTION]... DWGFILES...\n"	pointer
)	O
;	O
printf	function
(	O
"Converts DWG files to DXF.\n"	pointer
)	O
;	O
printf	function
(	O
"Default DXFFILE: DWGFILE with .dxf extension in the current "	pointer
"directory.\n"	pointer
"Existing files are not overwritten, unless -y is given.\n"	pointer
"\n"	pointer
)	O
;	O
printf	function
(	O
"  -v[0-9], --verbose [0-9]  verbosity\n"	pointer
)	O
;	O
printf	function
(	O
"  --as rNNNN                save as version\n"	pointer
)	O
;	O
printf	function
(	O
"           Valid versions:\n"	pointer
)	O
;	O
printf	function
(	O
"             r12, r14, r2000, r2004, r2007, r2010, r2013\n"	pointer
)	O
;	O
printf	function
(	O
"           Planned versions:\n"	pointer
)	O
;	O
printf	function
(	O
"             r9, r10, r11, r2018\n"	pointer
)	O
;	O
printf	function
(	O
"  -m, --minimal             only $ACADVER, HANDSEED and "	pointer
"ENTITIES\n"	pointer
)	O
;	O
printf	function
(	O
"  -b, --binary              save as binary DXF\n"	pointer
)	O
;	O
printf	function
(	O
"  -y, --overwrite           overwrite existing files\n"	pointer
)	O
;	O
printf	function
(	O
"  -o outfile, --file        optional, only valid with one single "	pointer
"DWGFILE\n"	pointer
)	O
;	O
printf	function
(	O
"      --help                display this help and exit\n"	pointer
)	O
;	O
printf	function
(	O
"      --version             output version information and exit\n"	pointer
"\n"	pointer
)	O
;	O
printf	function
(	O
"GNU LibreDWG online manual: "	pointer
"<https://www.gnu.org/software/libredwg/>\n"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
int	O
i	int
=	O
1	int
;	O
int	O
error	int
=	O
0	int
;	O
Dwg_Data	struct
dwg	pointer
;	O
char	O
*	O
filename_in	pointer
;	O
const	O
char	O
*	O
version	short
=	O
NULL	O
;	O
char	O
*	O
filename_out	pointer
=	O
NULL	O
;	O
Dwg_Version_Type	enum
dwg_version	int
=	O
R_2000	int
;	O
Bit_Chain	struct
dat	pointer
=	O
{	O
0	int
}	O
;	O
int	O
do_free	int
;	O
int	O
need_free	int
=	O
0	int
;	O
int	O
c	int
;	O
int	O
option_index	int
=	O
0	int
;	O
static	O
struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
"verbose"	pointer
,	O
1	int
,	O
&	O
opts	int
,	O
1	int
}	O
,	O
{	O
"file"	pointer
,	O
1	int
,	O
0	int
,	O
'o'	O
}	O
,	O
{	O
"as"	pointer
,	O
1	int
,	O
0	int
,	O
'a'	O
}	O
,	O
{	O
"minimal"	pointer
,	O
0	int
,	O
0	int
,	O
'm'	O
}	O
,	O
{	O
"binary"	pointer
,	O
0	int
,	O
0	int
,	O
'b'	O
}	O
,	O
{	O
"overwrite"	pointer
,	O
0	int
,	O
0	int
,	O
'y'	O
}	O
,	O
{	O
"help"	pointer
,	O
0	int
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"version"	pointer
,	O
0	int
,	O
0	int
,	O
0	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
if	O
(	O
argc	int
<	O
2	int
)	O
return	O
usage	function
(	O
)	O
;	O
while	O
(	O
(	O
c	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	array
,	O
"mbya:v::o:h"	pointer
,	O
long_options	array
,	O
&	O
option_index	int
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
if	O
(	O
c	int
==	O
-	O
1	int
)	O
break	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
':'	O
:	O
if	O
(	O
optarg	pointer
&&	O
!	O
strcmp	function
(	O
optarg	pointer
,	O
"v"	pointer
)	O
)	O
{	O
opts	int
=	O
1	int
;	O
break	O
;	O
}	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: option '-%c' requires an argument\n"	pointer
,	O
argv	array
[	O
0	int
]	O
,	O
optopt	int
)	O
;	O
break	O
;	O
case	O
0	int
:	O
if	O
(	O
!	O
strcmp	function
(	O
long_options	array
[	O
option_index	int
]	O
.	O
name	pointer
,	O
"verbose"	pointer
)	O
)	O
{	O
if	O
(	O
opts	int
<	O
0	int
||	O
opts	int
>	O
9	int
)	O
return	O
usage	function
(	O
)	O
;	O
break	O
;	O
}	O
if	O
(	O
!	O
strcmp	function
(	O
long_options	array
[	O
option_index	int
]	O
.	O
name	pointer
,	O
"version"	pointer
)	O
)	O
return	O
opt_version	function
(	O
)	O
;	O
if	O
(	O
!	O
strcmp	function
(	O
long_options	array
[	O
option_index	int
]	O
.	O
name	pointer
,	O
"help"	pointer
)	O
)	O
return	O
help	function
(	O
)	O
;	O
break	O
;	O
case	O
'm'	O
:	O
minimal	int
=	O
1	int
;	O
break	O
;	O
case	O
'b'	O
:	O
binary	int
=	O
1	int
;	O
break	O
;	O
case	O
'y'	O
:	O
overwrite	int
=	O
1	int
;	O
break	O
;	O
case	O
'o'	O
:	O
filename_out	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
'a'	O
:	O
dwg_version	int
=	O
dwg_version_as	function
(	O
optarg	pointer
)	O
;	O
if	O
(	O
dwg_version	int
==	O
R_INVALID	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Invalid version '%s'\n"	pointer
,	O
argv	array
[	O
1	int
]	O
)	O
;	O
return	O
usage	function
(	O
)	O
;	O
}	O
version	short
=	O
optarg	pointer
;	O
break	O
;	O
case	O
'v'	O
:	O
i	int
=	O
(	O
optind	int
>	O
0	int
&&	O
optind	int
<	O
argc	int
)	O
?	O
optind	int
-	O
1	int
:	O
1	int
;	O
if	O
(	O
!	O
memcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-v"	pointer
,	O
2	int
)	O
)	O
{	O
opts	int
=	O
argv	array
[	O
i	int
]	O
[	O
2	int
]	O
?	O
argv	array
[	O
i	int
]	O
[	O
2	int
]	O
-	O
'0'	O
:	O
1	int
;	O
}	O
if	O
(	O
opts	int
<	O
0	int
||	O
opts	int
>	O
9	int
)	O
return	O
usage	function
(	O
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
return	O
help	function
(	O
)	O
;	O
case	O
'?'	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: invalid option '-%c' ignored\n"	pointer
,	O
argv	array
[	O
0	int
]	O
,	O
optopt	int
)	O
;	O
break	O
;	O
default	O
:	O
return	O
usage	function
(	O
)	O
;	O
}	O
}	O
i	int
=	O
optind	int
;	O
if	O
(	O
filename_out	pointer
&&	O
i	int
+	O
1	int
<	O
argc	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: no -o with multiple input files\n"	pointer
,	O
argv	array
[	O
0	int
]	O
)	O
;	O
return	O
usage	function
(	O
)	O
;	O
}	O
do_free	int
=	O
i	int
+	O
1	int
<	O
argc	int
;	O
while	O
(	O
i	int
<	O
argc	int
)	O
{	O
filename_in	pointer
=	O
argv	array
[	O
i	int
]	O
;	O
i	int
++	O
;	O
if	O
(	O
!	O
filename_out	pointer
)	O
{	O
need_free	int
=	O
1	int
;	O
filename_out	pointer
=	O
suffix	function
(	O
filename_in	pointer
,	O
"dxf"	pointer
)	O
;	O
}	O
if	O
(	O
strEQ	O
(	O
filename_in	pointer
,	O
filename_out	pointer
)	O
)	O
{	O
if	O
(	O
need_free	int
)	O
free	function
(	O
filename_out	pointer
)	O
;	O
return	O
usage	function
(	O
)	O
;	O
}	O
memset	function
(	O
&	O
dwg	pointer
,	O
0	int
,	O
sizeof	O
(	O
Dwg_Data	struct
)	O
)	O
;	O
dwg	pointer
.	O
opts	int
=	O
opts	int
;	O
printf	function
(	O
"Reading DWG file %s\n"	pointer
,	O
filename_in	pointer
)	O
;	O
error	int
=	O
dwg_read_file	function
(	O
filename_in	pointer
,	O
&	O
dwg	pointer
)	O
;	O
if	O
(	O
error	int
>=	O
DWG_ERR_CRITICAL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"READ ERROR 0x%x\n"	pointer
,	O
error	int
)	O
;	O
goto	O
final	O
;	O
}	O
printf	function
(	O
"Writing DXF file %s"	pointer
,	O
filename_out	pointer
)	O
;	O
if	O
(	O
version	short
)	O
{	O
printf	function
(	O
" as %s\n"	pointer
,	O
version	short
)	O
;	O
if	O
(	O
dwg	pointer
.	O
header	struct
.	O
from_version	enum
!=	O
dwg	pointer
.	O
header	struct
.	O
version	short
)	O
dwg	pointer
.	O
header	struct
.	O
from_version	enum
=	O
dwg	pointer
.	O
header	struct
.	O
version	short
;	O
dwg	pointer
.	O
header	struct
.	O
version	short
=	O
dwg_version	int
;	O
}	O
else	O
{	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
dat	pointer
.	O
version	short
=	O
dwg	pointer
.	O
header	struct
.	O
version	short
;	O
dat	pointer
.	O
from_version	enum
=	O
dwg	pointer
.	O
header	struct
.	O
from_version	enum
;	O
if	O
(	O
minimal	int
)	O
dwg	pointer
.	O
opts	int
|=	O
0x10	int
;	O
{	O
struct	O
stat	struct
attrib	struct
;	O
if	O
(	O
!	O
stat	struct
(	O
filename_out	pointer
,	O
&	O
attrib	struct
)	O
)	O
{	O
if	O
(	O
!	O
overwrite	int
)	O
{	O
LOG_ERROR	O
(	O
"File not overwritten: %s, use -y.\n"	pointer
,	O
filename_out	pointer
)	O
;	O
error	int
|=	O
DWG_ERR_IOERROR	int
;	O
}	O
else	O
{	O
if	O
(	O
S_ISREG	O
(	O
attrib	struct
.	O
st_mode	int
)	O
&&	O
(	O
access	function
(	O
filename_out	pointer
,	O
W_OK	int
)	O
==	O
0	int
)	O
&&	O
!	O
S_ISLNK	O
(	O
attrib	struct
.	O
st_mode	int
)	O
)	O
{	O
unlink	function
(	O
filename_out	pointer
)	O
;	O
dat	pointer
.	O
fh	pointer
=	O
fopen	function
(	O
filename_out	pointer
,	O
"wb"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
strEQc	O
(	O
filename_out	pointer
,	O
"/dev/null"	pointer
)	O
)	O
{	O
dat	pointer
.	O
fh	pointer
=	O
fopen	function
(	O
filename_out	pointer
,	O
"wb"	pointer
)	O
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"Not writable file or symlink: %s\n"	pointer
,	O
filename_out	pointer
)	O
;	O
error	int
|=	O
DWG_ERR_IOERROR	int
;	O
}	O
}	O
}	O
else	O
dat	pointer
.	O
fh	pointer
=	O
fopen	function
(	O
filename_out	pointer
,	O
"wb"	pointer
)	O
;	O
}	O
if	O
(	O
!	O
dat	pointer
.	O
fh	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"WRITE ERROR %s\n"	pointer
,	O
filename_out	pointer
)	O
;	O
error	int
=	O
DWG_ERR_IOERROR	int
;	O
}	O
else	O
{	O
error	int
=	O
binary	int
?	O
dwg_write_dxfb	function
(	O
&	O
dat	pointer
,	O
&	O
dwg	pointer
)	O
:	O
dwg_write_dxf	function
(	O
&	O
dat	pointer
,	O
&	O
dwg	pointer
)	O
;	O
}	O
if	O
(	O
error	int
>=	O
DWG_ERR_CRITICAL	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"WRITE ERROR %s\n"	pointer
,	O
filename_out	pointer
)	O
;	O
if	O
(	O
dat	pointer
.	O
fh	pointer
)	O
fclose	function
(	O
dat	pointer
.	O
fh	pointer
)	O
;	O
final	O
:	O
if	O
(	O
do_free	int
)	O
{	O
dwg_free	function
(	O
&	O
dwg	pointer
)	O
;	O
if	O
(	O
need_free	int
)	O
free	function
(	O
filename_out	pointer
)	O
;	O
}	O
filename_out	pointer
=	O
NULL	O
;	O
}	O
return	O
error	int
>=	O
DWG_ERR_CRITICAL	O
?	O
1	int
:	O
0	int
;	O
}	O