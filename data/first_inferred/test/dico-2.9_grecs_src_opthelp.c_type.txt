static	O
void	O
indent	function
(	O
size_t	long
start	long
,	O
size_t	long
col	int
)	O
{	O
for	O
(	O
;	O
start	long
<	O
col	int
;	O
start	long
++	O
)	O
putchar	function
(	O
' '	O
)	O
;	O
}	O
static	O
void	O
print_option_descr	function
(	O
const	O
char	O
*	O
descr	pointer
,	O
size_t	long
lmargin	long
,	O
size_t	long
rmargin	long
)	O
{	O
while	O
(	O
*	O
descr	pointer
)	O
{	O
int	O
i	int
,	O
s	pointer
=	O
0	int
;	O
size_t	long
width	long
=	O
rmargin	long
-	O
lmargin	long
;	O
for	O
(	O
i	int
=	O
0	int
;	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
descr	pointer
[	O
i	int
]	O
==	O
0	int
||	O
descr	pointer
[	O
i	int
]	O
==	O
' '	O
||	O
descr	pointer
[	O
i	int
]	O
==	O
'\t'	O
)	O
{	O
if	O
(	O
i	int
>	O
width	long
)	O
break	O
;	O
s	pointer
=	O
i	int
;	O
if	O
(	O
descr	pointer
[	O
i	int
]	O
==	O
0	int
)	O
break	O
;	O
}	O
}	O
printf	function
(	O
"%*.*s\n"	pointer
,	O
s	pointer
,	O
s	pointer
,	O
descr	pointer
)	O
;	O
descr	pointer
+=	O
s	pointer
;	O
if	O
(	O
*	O
descr	pointer
)	O
{	O
indent	function
(	O
0	int
,	O
lmargin	long
)	O
;	O
descr	pointer
++	O
;	O
}	O
}	O
}	O
static	O
int	O
optcmp	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
struct	O
grecs_opthelp	struct
const	O
*	O
ap	array
=	O
(	O
struct	O
grecs_opthelp	struct
const	O
*	O
)	O
a	pointer
;	O
struct	O
grecs_opthelp	struct
const	O
*	O
bp	pointer
=	O
(	O
struct	O
grecs_opthelp	struct
const	O
*	O
)	O
b	pointer
;	O
const	O
char	O
*	O
opta	pointer
,	O
*	O
optb	pointer
;	O
size_t	long
alen	long
,	O
blen	long
;	O
for	O
(	O
opta	pointer
=	O
ap	array
->	O
opt	pointer
;	O
*	O
opta	pointer
==	O
'-'	O
;	O
opta	pointer
++	O
)	O
;	O
alen	long
=	O
strcspn	function
(	O
opta	pointer
,	O
","	pointer
)	O
;	O
for	O
(	O
optb	pointer
=	O
bp	pointer
->	O
opt	pointer
;	O
*	O
optb	pointer
==	O
'-'	O
;	O
optb	pointer
++	O
)	O
;	O
blen	long
=	O
strcspn	function
(	O
optb	pointer
,	O
","	pointer
)	O
;	O
if	O
(	O
alen	long
>	O
blen	long
)	O
blen	long
=	O
alen	long
;	O
return	O
strncmp	function
(	O
opta	pointer
,	O
optb	pointer
,	O
blen	long
)	O
;	O
}	O
static	O
void	O
sort_options	function
(	O
struct	O
grecs_opthelp	struct
*	O
opthelp	pointer
,	O
int	O
start	long
,	O
int	O
count	long
)	O
{	O
qsort	function
(	O
opthelp	pointer
+	O
start	long
,	O
count	long
,	O
sizeof	O
(	O
opthelp	pointer
[	O
0	int
]	O
)	O
,	O
optcmp	function
)	O
;	O
}	O
static	O
int	O
sort_group	function
(	O
struct	O
grecs_opthelp	struct
*	O
opthelp	pointer
,	O
size_t	long
optcount	long
,	O
int	O
start	long
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
start	long
;	O
i	int
<	O
optcount	long
&&	O
opthelp	pointer
[	O
i	int
]	O
.	O
opt	pointer
;	O
i	int
++	O
)	O
;	O
sort_options	function
(	O
opthelp	pointer
,	O
start	long
,	O
i	int
-	O
start	long
)	O
;	O
return	O
i	int
+	O
1	int
;	O
}	O
static	O
void	O
sort_opthelp	function
(	O
struct	O
grecs_opthelp	struct
*	O
opthelp	pointer
,	O
size_t	long
optcount	long
)	O
{	O
int	O
start	long
;	O
for	O
(	O
start	long
=	O
0	int
;	O
start	long
<	O
optcount	long
;	O
)	O
{	O
if	O
(	O
!	O
opthelp	pointer
[	O
start	long
]	O
.	O
opt	pointer
)	O
start	long
=	O
sort_group	function
(	O
opthelp	pointer
,	O
optcount	long
,	O
start	long
+	O
1	int
)	O
;	O
else	O
start	long
=	O
sort_group	function
(	O
opthelp	pointer
,	O
optcount	long
,	O
start	long
)	O
;	O
}	O
}	O
void	O
grecs_print_help	function
(	O
struct	O
grecs_proginfo	struct
*	O
pinfo	pointer
)	O
{	O
unsigned	O
i	int
;	O
int	O
argsused	int
=	O
0	int
;	O
struct	O
grecs_opthelp	struct
*	O
opthelp	pointer
;	O
size_t	long
optcount	long
;	O
printf	function
(	O
"%s %s "	pointer
,	O
_	O
(	O
"Usage:"	pointer
)	O
,	O
pinfo	pointer
->	O
progname	pointer
)	O
;	O
if	O
(	O
pinfo	pointer
->	O
subcmd	pointer
)	O
printf	function
(	O
"%s "	pointer
,	O
pinfo	pointer
->	O
subcmd	pointer
[	O
0	int
]	O
)	O
;	O
printf	function
(	O
"[%s]... %s\n"	pointer
,	O
_	O
(	O
"OPTION"	pointer
)	O
,	O
!	O
ISEMPTY	O
(	O
pinfo	pointer
->	O
args_doc	pointer
)	O
?	O
gettext	function
(	O
pinfo	pointer
->	O
args_doc	pointer
)	O
:	O
""	pointer
)	O
;	O
if	O
(	O
pinfo	pointer
->	O
subcmd	pointer
&&	O
pinfo	pointer
->	O
subcmd	pointer
[	O
1	int
]	O
)	O
{	O
char	O
*	O
*	O
p	pointer
;	O
printf	function
(	O
"%s: "	pointer
,	O
pinfo	pointer
->	O
subcmd	pointer
[	O
2	int
]	O
?	O
_	O
(	O
"Aliases"	pointer
)	O
:	O
_	O
(	O
"Alias"	pointer
)	O
)	O
;	O
for	O
(	O
p	pointer
=	O
pinfo	pointer
->	O
subcmd	pointer
+	O
1	int
;	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
printf	function
(	O
"%s%c"	pointer
,	O
*	O
p	pointer
,	O
p	pointer
[	O
1	int
]	O
?	O
' '	O
:	O
'\n'	O
)	O
;	O
}	O
if	O
(	O
!	O
ISEMPTY	O
(	O
pinfo	pointer
->	O
docstring	pointer
)	O
)	O
print_option_descr	function
(	O
gettext	function
(	O
pinfo	pointer
->	O
docstring	pointer
)	O
,	O
0	int
,	O
RMARGIN	int
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
opthelp	pointer
=	O
pinfo	pointer
->	O
opthelp	pointer
;	O
optcount	long
=	O
pinfo	pointer
->	O
optcount	long
;	O
sort_opthelp	function
(	O
opthelp	pointer
,	O
optcount	long
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
optcount	long
;	O
i	int
++	O
)	O
{	O
unsigned	O
n	long
;	O
if	O
(	O
opthelp	pointer
[	O
i	int
]	O
.	O
opt	pointer
)	O
{	O
n	long
=	O
printf	function
(	O
"  %s"	pointer
,	O
opthelp	pointer
[	O
i	int
]	O
.	O
opt	pointer
)	O
;	O
if	O
(	O
opthelp	pointer
[	O
i	int
]	O
.	O
arg	struct
)	O
{	O
char	O
*	O
cb	pointer
,	O
*	O
ce	pointer
;	O
argsused	int
=	O
1	int
;	O
if	O
(	O
strlen	function
(	O
opthelp	pointer
[	O
i	int
]	O
.	O
opt	pointer
)	O
==	O
2	int
)	O
{	O
if	O
(	O
!	O
opthelp	pointer
[	O
i	int
]	O
.	O
is_optional	int
)	O
{	O
putchar	function
(	O
' '	O
)	O
;	O
n	long
++	O
;	O
}	O
}	O
else	O
{	O
putchar	function
(	O
'='	O
)	O
;	O
n	long
++	O
;	O
}	O
if	O
(	O
opthelp	pointer
[	O
i	int
]	O
.	O
is_optional	int
)	O
{	O
cb	pointer
=	O
"["	pointer
;	O
ce	pointer
=	O
"]"	pointer
;	O
}	O
else	O
cb	pointer
=	O
ce	pointer
=	O
""	pointer
;	O
n	long
+=	O
printf	function
(	O
"%s%s%s"	pointer
,	O
cb	pointer
,	O
gettext	function
(	O
opthelp	pointer
[	O
i	int
]	O
.	O
arg	struct
)	O
,	O
ce	pointer
)	O
;	O
}	O
if	O
(	O
n	long
>=	O
DESCRCOLUMN	int
)	O
{	O
putchar	function
(	O
'\n'	O
)	O
;	O
n	long
=	O
0	int
;	O
}	O
indent	function
(	O
n	long
,	O
DESCRCOLUMN	int
)	O
;	O
print_option_descr	function
(	O
gettext	function
(	O
opthelp	pointer
[	O
i	int
]	O
.	O
descr	pointer
)	O
,	O
DESCRCOLUMN	int
,	O
RMARGIN	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
i	int
)	O
putchar	function
(	O
'\n'	O
)	O
;	O
indent	function
(	O
0	int
,	O
GROUPCOLUMN	int
)	O
;	O
print_option_descr	function
(	O
gettext	function
(	O
opthelp	pointer
[	O
i	int
]	O
.	O
descr	pointer
)	O
,	O
GROUPCOLUMN	int
,	O
RMARGIN	int
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
}	O
}	O
putchar	function
(	O
'\n'	O
)	O
;	O
if	O
(	O
argsused	int
)	O
{	O
print_option_descr	function
(	O
_	O
(	O
"Mandatory or optional arguments to "	pointer
"long options are also mandatory or "	pointer
"optional for any corresponding short "	pointer
"options."	pointer
)	O
,	O
0	int
,	O
RMARGIN	int
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
}	O
if	O
(	O
pinfo	pointer
->	O
print_help_hook	pointer
)	O
pinfo	pointer
->	O
print_help_hook	pointer
(	O
stdout	pointer
)	O
;	O
if	O
(	O
!	O
ISEMPTY	O
(	O
pinfo	pointer
->	O
bug_address	pointer
)	O
)	O
printf	function
(	O
_	O
(	O
"Report bugs to %s.\n"	pointer
)	O
,	O
pinfo	pointer
->	O
bug_address	pointer
)	O
;	O
if	O
(	O
!	O
ISEMPTY	O
(	O
pinfo	pointer
->	O
url	pointer
)	O
)	O
printf	function
(	O
_	O
(	O
"%s home page: <%s>\n"	pointer
)	O
,	O
pinfo	pointer
->	O
package	pointer
,	O
pinfo	pointer
->	O
url	pointer
)	O
;	O
if	O
(	O
!	O
ISEMPTY	O
(	O
pinfo	pointer
->	O
epilogue	pointer
)	O
)	O
printf	function
(	O
"%s"	pointer
,	O
gettext	function
(	O
pinfo	pointer
->	O
epilogue	pointer
)	O
)	O
;	O
}	O
static	O
int	O
cmpidx_short	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
struct	O
grecs_opthelp	struct
const	O
*	O
*	O
opta	pointer
=	O
(	O
struct	O
grecs_opthelp	struct
const	O
*	O
*	O
)	O
a	pointer
;	O
struct	O
grecs_opthelp	struct
const	O
*	O
*	O
optb	pointer
=	O
(	O
struct	O
grecs_opthelp	struct
const	O
*	O
*	O
)	O
b	pointer
;	O
return	O
(	O
*	O
opta	pointer
)	O
->	O
opt	pointer
[	O
1	int
]	O
-	O
(	O
*	O
optb	pointer
)	O
->	O
opt	pointer
[	O
1	int
]	O
;	O
}	O
static	O
int	O
cmpidx_long	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
struct	O
grecs_opthelp	struct
const	O
*	O
*	O
ap	array
=	O
(	O
struct	O
grecs_opthelp	struct
const	O
*	O
*	O
)	O
a	pointer
;	O
struct	O
grecs_opthelp	struct
const	O
*	O
*	O
bp	pointer
=	O
(	O
struct	O
grecs_opthelp	struct
const	O
*	O
*	O
)	O
b	pointer
;	O
char	O
const	O
*	O
opta	pointer
,	O
*	O
optb	pointer
;	O
size_t	long
lena	long
,	O
lenb	long
;	O
if	O
(	O
(	O
*	O
ap	array
)	O
->	O
opt	pointer
[	O
1	int
]	O
==	O
'-'	O
)	O
opta	pointer
=	O
(	O
*	O
ap	array
)	O
->	O
opt	pointer
;	O
else	O
opta	pointer
=	O
(	O
*	O
ap	array
)	O
->	O
opt	pointer
+	O
4	int
;	O
lena	long
=	O
strcspn	function
(	O
opta	pointer
,	O
","	pointer
)	O
;	O
if	O
(	O
(	O
*	O
bp	pointer
)	O
->	O
opt	pointer
[	O
1	int
]	O
==	O
'-'	O
)	O
optb	pointer
=	O
(	O
*	O
bp	pointer
)	O
->	O
opt	pointer
;	O
else	O
optb	pointer
=	O
(	O
*	O
bp	pointer
)	O
->	O
opt	pointer
+	O
4	int
;	O
lenb	long
=	O
strcspn	function
(	O
optb	pointer
,	O
","	pointer
)	O
;	O
return	O
strncmp	function
(	O
opta	pointer
,	O
optb	pointer
,	O
lena	long
>	O
lenb	long
?	O
lenb	long
:	O
lena	long
)	O
;	O
}	O
void	O
grecs_print_usage	function
(	O
struct	O
grecs_proginfo	struct
*	O
pinfo	pointer
)	O
{	O
unsigned	O
i	int
;	O
unsigned	O
n	long
;	O
char	O
*	O
buf	pointer
;	O
size_t	long
bufsize	long
;	O
unsigned	O
nidx	int
;	O
struct	O
grecs_opthelp	struct
*	O
*	O
optidx	pointer
;	O
struct	O
grecs_opthelp	struct
*	O
opthelp	pointer
=	O
pinfo	pointer
->	O
opthelp	pointer
;	O
size_t	long
optcount	long
=	O
pinfo	pointer
->	O
optcount	long
;	O
optidx	pointer
=	O
grecs_calloc	function
(	O
optcount	long
,	O
sizeof	O
(	O
optidx	pointer
[	O
0	int
]	O
)	O
)	O
;	O
bufsize	long
=	O
RMARGIN	int
+	O
1	int
;	O
buf	pointer
=	O
grecs_malloc	function
(	O
bufsize	long
)	O
;	O
n	long
=	O
snprintf	function
(	O
buf	pointer
,	O
bufsize	long
,	O
"%s %s "	pointer
,	O
_	O
(	O
"Usage:"	pointer
)	O
,	O
pinfo	pointer
->	O
progname	pointer
)	O
;	O
if	O
(	O
pinfo	pointer
->	O
subcmd	pointer
)	O
n	long
+=	O
snprintf	function
(	O
buf	pointer
+	O
n	long
,	O
bufsize	long
-	O
n	long
,	O
"%s "	pointer
,	O
pinfo	pointer
->	O
subcmd	pointer
[	O
0	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
nidx	int
=	O
0	int
;	O
i	int
<	O
optcount	long
;	O
i	int
++	O
)	O
if	O
(	O
opthelp	pointer
[	O
i	int
]	O
.	O
opt	pointer
&&	O
opthelp	pointer
[	O
i	int
]	O
.	O
descr	pointer
&&	O
opthelp	pointer
[	O
i	int
]	O
.	O
opt	pointer
[	O
1	int
]	O
!=	O
'-'	O
&&	O
opthelp	pointer
[	O
i	int
]	O
.	O
arg	struct
==	O
NULL	O
)	O
optidx	pointer
[	O
nidx	int
++	O
]	O
=	O
opthelp	pointer
+	O
i	int
;	O
if	O
(	O
nidx	int
)	O
{	O
qsort	function
(	O
optidx	pointer
,	O
nidx	int
,	O
sizeof	O
(	O
optidx	pointer
[	O
0	int
]	O
)	O
,	O
cmpidx_short	function
)	O
;	O
ADDC	O
(	O
'['	O
)	O
;	O
ADDC	O
(	O
'-'	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nidx	int
;	O
i	int
++	O
)	O
{	O
ADDC	O
(	O
optidx	pointer
[	O
i	int
]	O
->	O
opt	pointer
[	O
1	int
]	O
)	O
;	O
}	O
ADDC	O
(	O
']'	O
)	O
;	O
}	O
for	O
(	O
i	int
=	O
nidx	int
=	O
0	int
;	O
i	int
<	O
optcount	long
;	O
i	int
++	O
)	O
{	O
if	O
(	O
opthelp	pointer
[	O
i	int
]	O
.	O
opt	pointer
&&	O
opthelp	pointer
[	O
i	int
]	O
.	O
descr	pointer
&&	O
opthelp	pointer
[	O
i	int
]	O
.	O
opt	pointer
[	O
1	int
]	O
!=	O
'-'	O
&&	O
opthelp	pointer
[	O
i	int
]	O
.	O
arg	struct
)	O
optidx	pointer
[	O
nidx	int
++	O
]	O
=	O
opthelp	pointer
+	O
i	int
;	O
}	O
if	O
(	O
nidx	int
)	O
{	O
qsort	function
(	O
optidx	pointer
,	O
nidx	int
,	O
sizeof	O
(	O
optidx	pointer
[	O
0	int
]	O
)	O
,	O
cmpidx_short	function
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nidx	int
;	O
i	int
++	O
)	O
{	O
struct	O
grecs_opthelp	struct
*	O
opt	pointer
=	O
optidx	pointer
[	O
i	int
]	O
;	O
size_t	long
len	long
=	O
5	int
+	O
strlen	function
(	O
opt	pointer
->	O
arg	struct
)	O
+	O
(	O
opt	pointer
->	O
is_optional	int
?	O
2	int
:	O
1	int
)	O
;	O
if	O
(	O
n	long
+	O
len	long
>	O
RMARGIN	int
)	O
FLUSH	O
;	O
buf	pointer
[	O
n	long
++	O
]	O
=	O
' '	O
;	O
buf	pointer
[	O
n	long
++	O
]	O
=	O
'['	O
;	O
buf	pointer
[	O
n	long
++	O
]	O
=	O
'-'	O
;	O
buf	pointer
[	O
n	long
++	O
]	O
=	O
opt	pointer
->	O
opt	pointer
[	O
1	int
]	O
;	O
if	O
(	O
opt	pointer
->	O
is_optional	int
)	O
{	O
buf	pointer
[	O
n	long
++	O
]	O
=	O
'['	O
;	O
strcpy	function
(	O
&	O
buf	pointer
[	O
n	long
]	O
,	O
opt	pointer
->	O
arg	struct
)	O
;	O
n	long
+=	O
strlen	function
(	O
opt	pointer
->	O
arg	struct
)	O
;	O
buf	pointer
[	O
n	long
++	O
]	O
=	O
']'	O
;	O
}	O
else	O
{	O
buf	pointer
[	O
n	long
++	O
]	O
=	O
' '	O
;	O
strcpy	function
(	O
&	O
buf	pointer
[	O
n	long
]	O
,	O
opt	pointer
->	O
arg	struct
)	O
;	O
n	long
+=	O
strlen	function
(	O
opt	pointer
->	O
arg	struct
)	O
;	O
}	O
buf	pointer
[	O
n	long
++	O
]	O
=	O
']'	O
;	O
}	O
}	O
for	O
(	O
i	int
=	O
nidx	int
=	O
0	int
;	O
i	int
<	O
optcount	long
;	O
i	int
++	O
)	O
{	O
if	O
(	O
opthelp	pointer
[	O
i	int
]	O
.	O
opt	pointer
&&	O
opthelp	pointer
[	O
i	int
]	O
.	O
descr	pointer
&&	O
(	O
opthelp	pointer
[	O
i	int
]	O
.	O
opt	pointer
[	O
1	int
]	O
==	O
'-'	O
||	O
opthelp	pointer
[	O
i	int
]	O
.	O
opt	pointer
[	O
2	int
]	O
==	O
','	O
)	O
)	O
optidx	pointer
[	O
nidx	int
++	O
]	O
=	O
opthelp	pointer
+	O
i	int
;	O
}	O
if	O
(	O
nidx	int
)	O
{	O
qsort	function
(	O
optidx	pointer
,	O
nidx	int
,	O
sizeof	O
(	O
optidx	pointer
[	O
0	int
]	O
)	O
,	O
cmpidx_long	function
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nidx	int
;	O
i	int
++	O
)	O
{	O
struct	O
grecs_opthelp	struct
*	O
opt	pointer
=	O
optidx	pointer
[	O
i	int
]	O
;	O
size_t	long
len	long
;	O
const	O
char	O
*	O
longopt	pointer
;	O
if	O
(	O
opt	pointer
->	O
opt	pointer
[	O
1	int
]	O
==	O
'-'	O
)	O
longopt	pointer
=	O
opt	pointer
->	O
opt	pointer
;	O
else	O
if	O
(	O
opt	pointer
->	O
opt	pointer
[	O
2	int
]	O
==	O
','	O
)	O
longopt	pointer
=	O
opt	pointer
->	O
opt	pointer
+	O
4	int
;	O
else	O
continue	O
;	O
len	long
=	O
3	int
+	O
strlen	function
(	O
longopt	pointer
)	O
+	O
(	O
opt	pointer
->	O
arg	struct
?	O
1	int
+	O
strlen	function
(	O
opt	pointer
->	O
arg	struct
)	O
+	O
(	O
opt	pointer
->	O
is_optional	int
?	O
2	int
:	O
0	int
)	O
:	O
0	int
)	O
;	O
if	O
(	O
n	long
+	O
len	long
>	O
RMARGIN	int
)	O
{	O
FLUSH	O
;	O
if	O
(	O
n	long
+	O
len	long
>	O
bufsize	long
)	O
{	O
bufsize	long
=	O
n	long
+	O
len	long
;	O
buf	pointer
=	O
grecs_realloc	function
(	O
buf	pointer
,	O
bufsize	long
)	O
;	O
}	O
}	O
buf	pointer
[	O
n	long
++	O
]	O
=	O
' '	O
;	O
buf	pointer
[	O
n	long
++	O
]	O
=	O
'['	O
;	O
strcpy	function
(	O
&	O
buf	pointer
[	O
n	long
]	O
,	O
longopt	pointer
)	O
;	O
n	long
+=	O
strlen	function
(	O
longopt	pointer
)	O
;	O
if	O
(	O
opt	pointer
->	O
arg	struct
)	O
{	O
buf	pointer
[	O
n	long
++	O
]	O
=	O
'='	O
;	O
if	O
(	O
opt	pointer
->	O
is_optional	int
)	O
{	O
buf	pointer
[	O
n	long
++	O
]	O
=	O
'['	O
;	O
strcpy	function
(	O
&	O
buf	pointer
[	O
n	long
]	O
,	O
opt	pointer
->	O
arg	struct
)	O
;	O
n	long
+=	O
strlen	function
(	O
opt	pointer
->	O
arg	struct
)	O
;	O
buf	pointer
[	O
n	long
++	O
]	O
=	O
']'	O
;	O
}	O
else	O
{	O
strcpy	function
(	O
&	O
buf	pointer
[	O
n	long
]	O
,	O
opt	pointer
->	O
arg	struct
)	O
;	O
n	long
+=	O
strlen	function
(	O
opt	pointer
->	O
arg	struct
)	O
;	O
}	O
}	O
buf	pointer
[	O
n	long
++	O
]	O
=	O
']'	O
;	O
}	O
}	O
if	O
(	O
pinfo	pointer
->	O
args_doc	pointer
)	O
{	O
size_t	long
len	long
=	O
strlen	function
(	O
pinfo	pointer
->	O
args_doc	pointer
)	O
+	O
1	int
;	O
if	O
(	O
n	long
+	O
len	long
<=	O
RMARGIN	int
)	O
{	O
buf	pointer
[	O
n	long
++	O
]	O
=	O
' '	O
;	O
strcpy	function
(	O
buf	pointer
+	O
n	long
,	O
pinfo	pointer
->	O
args_doc	pointer
)	O
;	O
n	long
+=	O
len	long
;	O
}	O
else	O
{	O
struct	O
wordsplit	struct
ws	pointer
;	O
if	O
(	O
wordsplit	struct
(	O
pinfo	pointer
->	O
args_doc	pointer
,	O
&	O
ws	pointer
,	O
WRDSF_SHOWERR	int
|	O
WRDSF_NOVAR	int
|	O
WRDSF_NOCMD	int
|	O
WRDSF_QUOTE	O
|	O
WRDSF_SQUEEZE_DELIMS	int
)	O
)	O
abort	function
(	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ws	pointer
.	O
ws_wordc	long
;	O
i	int
++	O
)	O
{	O
len	long
=	O
strlen	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
)	O
+	O
1	int
;	O
if	O
(	O
n	long
+	O
len	long
>	O
RMARGIN	int
)	O
{	O
FLUSH	O
;	O
if	O
(	O
n	long
+	O
len	long
>	O
bufsize	long
)	O
{	O
bufsize	long
=	O
n	long
+	O
len	long
;	O
buf	pointer
=	O
grecs_realloc	function
(	O
buf	pointer
,	O
bufsize	long
)	O
;	O
}	O
}	O
buf	pointer
[	O
n	long
++	O
]	O
=	O
' '	O
;	O
strcpy	function
(	O
buf	pointer
+	O
n	long
,	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
)	O
;	O
n	long
+=	O
len	long
;	O
}	O
}	O
}	O
FLUSH	O
;	O
if	O
(	O
pinfo	pointer
->	O
subcmd	pointer
&&	O
pinfo	pointer
->	O
subcmd	pointer
[	O
1	int
]	O
)	O
{	O
char	O
*	O
*	O
p	pointer
;	O
printf	function
(	O
"%s: %s"	pointer
,	O
pinfo	pointer
->	O
subcmd	pointer
[	O
2	int
]	O
?	O
_	O
(	O
"Aliases"	pointer
)	O
:	O
_	O
(	O
"Alias"	pointer
)	O
,	O
pinfo	pointer
->	O
progname	pointer
)	O
;	O
for	O
(	O
p	pointer
=	O
pinfo	pointer
->	O
subcmd	pointer
+	O
1	int
;	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
printf	function
(	O
" %s"	pointer
,	O
*	O
p	pointer
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
}	O
free	function
(	O
optidx	pointer
)	O
;	O
free	function
(	O
buf	pointer
)	O
;	O
}	O
const	O
char	O
version_etc_copyright	array
[	O
]	O
=	O
"Copyright %s %s %s"	pointer
;	O
void	O
grecs_print_version_only	function
(	O
struct	O
grecs_proginfo	struct
*	O
pinfo	pointer
,	O
FILE	struct
*	O
stream	pointer
)	O
{	O
fprintf	function
(	O
stream	pointer
,	O
"%s"	pointer
,	O
pinfo	pointer
->	O
progname	pointer
)	O
;	O
if	O
(	O
!	O
ISEMPTY	O
(	O
pinfo	pointer
->	O
package	pointer
)	O
)	O
fprintf	function
(	O
stream	pointer
,	O
" (%s)"	pointer
,	O
pinfo	pointer
->	O
package	pointer
)	O
;	O
if	O
(	O
!	O
ISEMPTY	O
(	O
pinfo	pointer
->	O
version	pointer
)	O
)	O
fprintf	function
(	O
stream	pointer
,	O
" %s"	pointer
,	O
pinfo	pointer
->	O
version	pointer
)	O
;	O
fputc	function
(	O
'\n'	O
,	O
stream	pointer
)	O
;	O
fprintf	function
(	O
stream	pointer
,	O
version_etc_copyright	array
,	O
_	O
(	O
"(C)"	pointer
)	O
,	O
ISEMPTY	O
(	O
pinfo	pointer
->	O
copyright_year	pointer
)	O
?	O
"2012"	pointer
:	O
pinfo	pointer
->	O
copyright_year	pointer
,	O
ISEMPTY	O
(	O
pinfo	pointer
->	O
copyright_holder	pointer
)	O
?	O
"Free Software Foundation, inc."	pointer
:	O
pinfo	pointer
->	O
copyright_holder	pointer
)	O
;	O
fputc	function
(	O
'\n'	O
,	O
stream	pointer
)	O
;	O
}	O
static	O
const	O
char	O
gplv3	array
[	O
]	O
=	O
N_	O
(	O
"License GPLv3+: GNU GPL version 3 or later "	pointer
"<http://gnu.org/licenses/gpl.html>\n"	pointer
"This is free software: you are free to change and redistribute it.\n"	pointer
"There is NO WARRANTY, to the extent permitted by law.\n\n"	pointer
)	O
;	O
void	O
grecs_print_version	function
(	O
struct	O
grecs_proginfo	struct
*	O
pinfo	pointer
,	O
FILE	struct
*	O
stream	pointer
)	O
{	O
grecs_print_version_only	function
(	O
pinfo	pointer
,	O
stream	pointer
)	O
;	O
fputs	function
(	O
gettext	function
(	O
ISEMPTY	O
(	O
pinfo	pointer
->	O
license	pointer
)	O
?	O
gplv3	array
:	O
pinfo	pointer
->	O
license	pointer
)	O
,	O
stream	pointer
)	O
;	O
if	O
(	O
pinfo	pointer
->	O
print_version_hook	pointer
)	O
pinfo	pointer
->	O
print_version_hook	pointer
(	O
stream	pointer
)	O
;	O
if	O
(	O
pinfo	pointer
->	O
authors	pointer
)	O
{	O
int	O
i	int
;	O
unsigned	O
width	long
;	O
const	O
char	O
*	O
written_by	pointer
=	O
_	O
(	O
"Written by "	pointer
)	O
;	O
const	O
char	O
*	O
middle_delim	pointer
=	O
_	O
(	O
", "	pointer
)	O
;	O
const	O
char	O
*	O
final_delim	pointer
=	O
_	O
(	O
" and "	pointer
)	O
;	O
width	long
=	O
strlen	function
(	O
written_by	pointer
)	O
;	O
fputs	function
(	O
written_by	pointer
,	O
stream	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
;	O
)	O
{	O
const	O
char	O
*	O
author	pointer
=	O
pinfo	pointer
->	O
authors	pointer
[	O
i	int
++	O
]	O
;	O
size_t	long
len	long
=	O
strlen	function
(	O
author	pointer
)	O
;	O
const	O
char	O
*	O
delim	pointer
=	O
NULL	O
;	O
if	O
(	O
pinfo	pointer
->	O
authors	pointer
[	O
i	int
]	O
)	O
{	O
delim	pointer
=	O
pinfo	pointer
->	O
authors	pointer
[	O
i	int
+	O
1	int
]	O
?	O
middle_delim	pointer
:	O
final_delim	pointer
;	O
len	long
+=	O
strlen	function
(	O
delim	pointer
)	O
;	O
}	O
else	O
len	long
++	O
;	O
if	O
(	O
width	long
+	O
len	long
>	O
RMARGIN	int
)	O
{	O
fputc	function
(	O
'\n'	O
,	O
stream	pointer
)	O
;	O
width	long
=	O
0	int
;	O
}	O
fputs	function
(	O
author	pointer
,	O
stream	pointer
)	O
;	O
width	long
+=	O
len	long
;	O
if	O
(	O
delim	pointer
)	O
fputs	function
(	O
delim	pointer
,	O
stream	pointer
)	O
;	O
else	O
break	O
;	O
}	O
fputc	function
(	O
'.'	O
,	O
stream	pointer
)	O
;	O
fputc	function
(	O
'\n'	O
,	O
stream	pointer
)	O
;	O
}	O
}	O