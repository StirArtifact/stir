size_t	long
strlcat	function
(	O
char	O
*	O
dst	pointer
,	O
const	O
char	O
*	O
src	pointer
,	O
size_t	long
siz	long
)	O
;	O
static	O
int	O
can_output	function
(	O
void	O
)	O
;	O
static	O
void	O
format_size	function
(	O
char	O
*	O
,	O
int	O
,	O
uintmax_t	long
)	O
;	O
static	O
void	O
format_rate	function
(	O
char	O
*	O
,	O
int	O
,	O
uintmax_t	long
)	O
;	O
void	O
refresh_progress_meter	function
(	O
void	O
)	O
;	O
static	O
time_t	long
start	long
;	O
static	O
time_t	long
of_start	long
;	O
static	O
time_t	long
last_update	long
;	O
static	O
char	O
*	O
file	pointer
;	O
static	O
uintmax_t	long
end_pos	long
=	O
0	int
;	O
static	O
uintmax_t	long
overcount	long
=	O
0	int
;	O
static	O
uintmax_t	long
over_pos	long
=	O
0	int
;	O
static	O
uintmax_t	long
cur_pos	long
=	O
0	int
;	O
static	O
volatile	O
uintmax_t	long
*	O
counter	pointer
;	O
static	O
long	O
stalled	long
;	O
static	O
uintmax_t	long
bytes_per_second	long
;	O
static	O
int	O
win_size	int
;	O
static	O
uintmax_t	long
oldcur_speed	long
;	O
static	O
uintmax_t	long
avg_speed	long
=	O
0	int
;	O
static	O
int	O
g_ofd	int
=	O
STDOUT_FILENO	int
;	O
static	O
const	O
char	O
unit	array
[	O
]	O
=	O
" KMGT"	pointer
;	O
static	O
int	O
can_output	function
(	O
void	O
)	O
{	O
return	O
(	O
getpgrp	function
(	O
)	O
==	O
tcgetpgrp	function
(	O
g_ofd	int
)	O
)	O
;	O
}	O
static	O
void	O
format_rate	function
(	O
char	O
*	O
buf	pointer
,	O
int	O
size	int
,	O
uintmax_t	long
bytes	long
)	O
{	O
unsigned	O
long	O
dp	long
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
bytes	long
>=	O
10000	int
&&	O
unit	array
[	O
i	int
]	O
!=	O
'T'	O
;	O
i	int
++	O
)	O
bytes	long
=	O
bytes	long
/	O
1024	int
;	O
dp	long
=	O
(	O
unsigned	O
long	O
)	O
(	O
bytes	long
)	O
;	O
snprintf	function
(	O
buf	pointer
,	O
size	int
,	O
"%5lu%c%s"	pointer
,	O
dp	long
,	O
unit	array
[	O
i	int
]	O
,	O
i	int
?	O
"B"	pointer
:	O
"B"	pointer
)	O
;	O
}	O
static	O
void	O
format_size	function
(	O
char	O
*	O
buf	pointer
,	O
int	O
size	int
,	O
uintmax_t	long
bytes	long
)	O
{	O
int	O
i	int
,	O
j	int
;	O
uintmax_t	long
obytes	long
;	O
unsigned	O
long	O
dp	long
;	O
if	O
(	O
over_pos	long
)	O
{	O
obytes	long
=	O
over_pos	long
;	O
for	O
(	O
j	int
=	O
0	int
;	O
obytes	long
>=	O
10000	int
&&	O
unit	array
[	O
j	int
]	O
!=	O
'T'	O
;	O
j	int
++	O
)	O
obytes	long
=	O
(	O
obytes	long
)	O
/	O
1024	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
j	int
;	O
i	int
++	O
)	O
bytes	long
=	O
(	O
bytes	long
)	O
/	O
1024	int
;	O
}	O
else	O
{	O
obytes	long
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
bytes	long
>=	O
10000	int
&&	O
unit	array
[	O
i	int
]	O
!=	O
'T'	O
;	O
i	int
++	O
)	O
bytes	long
=	O
(	O
bytes	long
)	O
/	O
1024	int
;	O
}	O
bytes	long
+=	O
obytes	long
;	O
dp	long
=	O
(	O
unsigned	O
long	O
)	O
(	O
bytes	long
)	O
;	O
snprintf	function
(	O
buf	pointer
,	O
size	int
,	O
"%4lu%c%s"	pointer
,	O
dp	long
,	O
unit	array
[	O
i	int
]	O
,	O
i	int
?	O
"B"	pointer
:	O
"B"	pointer
)	O
;	O
}	O
void	O
set_progress_meter_fd	function
(	O
int	O
fd	int
)	O
{	O
g_ofd	int
=	O
fd	int
;	O
}	O
int	O
get_progress_meter_fd	function
(	O
void	O
)	O
{	O
return	O
g_ofd	int
;	O
}	O
void	O
refresh_progress_meter	function
(	O
void	O
)	O
{	O
char	O
buf	pointer
[	O
MAX_WINSIZE	int
+	O
1	int
]	O
;	O
time_t	long
now	long
;	O
uintmax_t	long
newtransferred	long
;	O
uintmax_t	long
transferred	long
;	O
double	O
elapsed	double
;	O
double	O
of_elapsed	double
;	O
double	O
newelapsed	double
;	O
int	O
percent	int
;	O
uintmax_t	long
cur_speed	long
;	O
int	O
hours	int
,	O
minutes	int
,	O
seconds	int
;	O
int	O
i	int
,	O
len	int
;	O
int	O
file_len	int
;	O
now	long
=	O
time	struct
(	O
NULL	O
)	O
;	O
if	O
(	O
*	O
counter	pointer
<	O
cur_pos	long
)	O
{	O
over_pos	long
=	O
cur_pos	long
;	O
overcount	long
++	O
;	O
of_start	long
=	O
now	long
;	O
}	O
transferred	long
=	O
*	O
counter	pointer
;	O
newtransferred	long
=	O
*	O
counter	pointer
-	O
cur_pos	long
;	O
cur_pos	long
=	O
*	O
counter	pointer
;	O
newelapsed	double
=	O
now	long
-	O
last_update	long
;	O
elapsed	double
=	O
now	long
-	O
start	long
;	O
of_elapsed	double
=	O
now	long
-	O
of_start	long
;	O
if	O
(	O
newelapsed	double
<	O
1	int
||	O
of_elapsed	double
<	O
1	int
)	O
{	O
cur_speed	long
=	O
oldcur_speed	long
;	O
avg_speed	long
=	O
cur_speed	long
;	O
}	O
else	O
{	O
cur_speed	long
=	O
newtransferred	long
/	O
newelapsed	double
;	O
avg_speed	long
=	O
transferred	long
/	O
of_elapsed	double
;	O
}	O
oldcur_speed	long
=	O
cur_speed	long
;	O
bytes_per_second	long
=	O
cur_speed	long
;	O
buf	pointer
[	O
0	int
]	O
=	O
'\0'	O
;	O
file_len	int
=	O
win_size	int
;	O
if	O
(	O
file_len	int
>	O
0	int
)	O
{	O
len	int
=	O
snprintf	function
(	O
buf	pointer
,	O
file_len	int
+	O
1	int
,	O
"\r%s"	pointer
,	O
file	pointer
)	O
;	O
if	O
(	O
len	int
<	O
0	int
)	O
len	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
len	int
;	O
i	int
<	O
file_len	int
;	O
i	int
++	O
)	O
buf	pointer
[	O
i	int
]	O
=	O
' '	O
;	O
buf	pointer
[	O
file_len	int
]	O
=	O
'\0'	O
;	O
}	O
file_len	int
=	O
win_size	int
-	O
54	int
;	O
buf	pointer
[	O
file_len	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
end_pos	long
!=	O
0	int
)	O
{	O
percent	int
=	O
(	O
(	O
float	O
)	O
cur_pos	long
/	O
end_pos	long
)	O
*	O
100	int
;	O
snprintf	function
(	O
buf	pointer
+	O
strlen	function
(	O
buf	pointer
)	O
,	O
win_size	int
-	O
strlen	function
(	O
buf	pointer
)	O
,	O
" %3d%% "	pointer
,	O
percent	int
)	O
;	O
}	O
else	O
{	O
percent	int
=	O
100	int
;	O
snprintf	function
(	O
buf	pointer
+	O
strlen	function
(	O
buf	pointer
)	O
,	O
win_size	int
-	O
strlen	function
(	O
buf	pointer
)	O
,	O
" ---%% "	pointer
)	O
;	O
}	O
format_size	function
(	O
buf	pointer
+	O
strlen	function
(	O
buf	pointer
)	O
,	O
win_size	int
-	O
strlen	function
(	O
buf	pointer
)	O
,	O
cur_pos	long
)	O
;	O
strlcat	function
(	O
buf	pointer
,	O
" @ "	pointer
,	O
win_size	int
)	O
;	O
format_rate	function
(	O
buf	pointer
+	O
strlen	function
(	O
buf	pointer
)	O
,	O
win_size	int
-	O
strlen	function
(	O
buf	pointer
)	O
,	O
avg_speed	long
)	O
;	O
strlcat	function
(	O
buf	pointer
,	O
"/s[Avg]  "	pointer
,	O
win_size	int
)	O
;	O
if	O
(	O
bytes_per_second	long
<	O
10	int
)	O
stalled	long
++	O
;	O
else	O
stalled	long
=	O
0	int
;	O
if	O
(	O
stalled	long
>=	O
STALL_TIME	int
)	O
{	O
strlcat	function
(	O
buf	pointer
,	O
"- stalled -"	pointer
,	O
win_size	int
)	O
;	O
}	O
else	O
{	O
format_rate	function
(	O
buf	pointer
+	O
strlen	function
(	O
buf	pointer
)	O
,	O
win_size	int
-	O
strlen	function
(	O
buf	pointer
)	O
,	O
bytes_per_second	long
)	O
;	O
strlcat	function
(	O
buf	pointer
,	O
"/s "	pointer
,	O
win_size	int
)	O
;	O
}	O
seconds	int
=	O
elapsed	double
;	O
hours	int
=	O
seconds	int
/	O
3600	int
;	O
seconds	int
-=	O
hours	int
*	O
3600	int
;	O
minutes	int
=	O
seconds	int
/	O
60	int
;	O
seconds	int
-=	O
minutes	int
*	O
60	int
;	O
if	O
(	O
hours	int
!=	O
0	int
)	O
snprintf	function
(	O
buf	pointer
+	O
strlen	function
(	O
buf	pointer
)	O
,	O
win_size	int
-	O
strlen	function
(	O
buf	pointer
)	O
,	O
"%d:%02d:%02d"	pointer
,	O
hours	int
,	O
minutes	int
,	O
seconds	int
)	O
;	O
else	O
snprintf	function
(	O
buf	pointer
+	O
strlen	function
(	O
buf	pointer
)	O
,	O
win_size	int
-	O
strlen	function
(	O
buf	pointer
)	O
,	O
"  %02d:%02d"	pointer
,	O
minutes	int
,	O
seconds	int
)	O
;	O
strlcat	function
(	O
buf	pointer
,	O
"    "	pointer
,	O
win_size	int
)	O
;	O
atomicio	function
(	O
vwrite	O
,	O
g_ofd	int
,	O
buf	pointer
,	O
win_size	int
)	O
;	O
last_update	long
=	O
now	long
;	O
}	O
void	O
update_progress_meter	function
(	O
int	O
ignore	int
)	O
{	O
int	O
save_errno	int
;	O
save_errno	int
=	O
errno	O
;	O
if	O
(	O
can_output	function
(	O
)	O
)	O
refresh_progress_meter	function
(	O
)	O
;	O
signal	function
(	O
SIGALRM	int
,	O
update_progress_meter	function
)	O
;	O
alarm	function
(	O
UPDATE_INTERVAL	int
)	O
;	O
errno	O
=	O
save_errno	int
;	O
}	O
void	O
start_progress_meter	function
(	O
int	O
ofd	int
,	O
char	O
*	O
f	pointer
,	O
off_t	long
filesize	long
,	O
uintmax_t	long
*	O
stat	struct
)	O
{	O
struct	O
winsize	struct
winsize	struct
;	O
start	long
=	O
last_update	long
=	O
time	struct
(	O
NULL	O
)	O
;	O
of_start	long
=	O
start	long
;	O
file	pointer
=	O
f	pointer
;	O
end_pos	long
=	O
(	O
uintmax_t	long
)	O
(	O
filesize	long
)	O
;	O
cur_pos	long
=	O
0	int
;	O
counter	pointer
=	O
stat	struct
;	O
stalled	long
=	O
0	int
;	O
g_ofd	int
=	O
ofd	int
;	O
if	O
(	O
ioctl	function
(	O
g_ofd	int
,	O
TIOCGWINSZ	int
,	O
&	O
winsize	struct
)	O
!=	O
-	O
1	int
&&	O
winsize	struct
.	O
ws_col	short
!=	O
0	int
)	O
{	O
if	O
(	O
winsize	struct
.	O
ws_col	short
>	O
MAX_WINSIZE	int
)	O
win_size	int
=	O
MAX_WINSIZE	int
;	O
else	O
win_size	int
=	O
winsize	struct
.	O
ws_col	short
;	O
}	O
else	O
win_size	int
=	O
DEFAULT_WINSIZE	int
;	O
win_size	int
+=	O
1	int
;	O
if	O
(	O
can_output	function
(	O
)	O
)	O
refresh_progress_meter	function
(	O
)	O
;	O
signal	function
(	O
SIGALRM	int
,	O
update_progress_meter	function
)	O
;	O
alarm	function
(	O
UPDATE_INTERVAL	int
)	O
;	O
}	O
void	O
stop_progress_meter	function
(	O
void	O
)	O
{	O
alarm	function
(	O
0	int
)	O
;	O
if	O
(	O
!	O
can_output	function
(	O
)	O
)	O
return	O
;	O
if	O
(	O
cur_pos	long
!=	O
end_pos	long
||	O
end_pos	long
==	O
0	int
)	O
refresh_progress_meter	function
(	O
)	O
;	O
atomicio	function
(	O
vwrite	O
,	O
g_ofd	int
,	O
"\n"	pointer
,	O
1	int
)	O
;	O
}	O