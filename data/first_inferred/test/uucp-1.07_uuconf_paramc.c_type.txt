const	O
char	O
_uuconf_paramc_rcsid	array
[	O
]	O
=	O
"$Id: paramc.c,v 1.6 2002/03/05 19:10:42 ian Rel $"	*
;	O
int	O
_uuconf_iadd_proto_param	function
(	O
qglobal	*
,	O
argc	int
,	O
argv	*
,	O
pqparam	*
,	O
pblock	*
)	O
struct	O
sglobal	struct
*	O
qglobal	*
;	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	*
;	O
struct	O
uuconf_proto_param	struct
*	O
*	O
pqparam	*
;	O
pointer	*
pblock	*
;	O
{	O
struct	O
uuconf_proto_param	struct
*	O
q	*
;	O
size_t	long
c	long
;	O
struct	O
uuconf_proto_param_entry	struct
*	O
qentry	*
;	O
if	O
(	O
argc	int
<	O
2	int
)	O
return	O
UUCONF_SYNTAX_ERROR	O
|	O
UUCONF_CMDTABRET_EXIT	O
;	O
if	O
(	O
argv	*
[	O
0	int
]	O
[	O
1	int
]	O
!=	O
'\0'	O
)	O
return	O
UUCONF_SYNTAX_ERROR	O
|	O
UUCONF_CMDTABRET_EXIT	O
;	O
if	O
(	O
*	O
pqparam	*
==	O
NULL	O
)	O
{	O
*	O
pqparam	*
=	O
(	O
(	O
struct	O
uuconf_proto_param	struct
*	O
)	O
uuconf_malloc	function
(	O
pblock	*
,	O
2	int
*	O
sizeof	O
(	O
struct	O
uuconf_proto_param	struct
)	O
)	O
)	O
;	O
if	O
(	O
*	O
pqparam	*
==	O
NULL	O
)	O
{	O
qglobal	*
->	O
ierrno	int
=	O
errno	O
;	O
return	O
(	O
UUCONF_MALLOC_FAILED	O
|	O
UUCONF_ERROR_ERRNO	O
|	O
UUCONF_CMDTABRET_EXIT	O
)	O
;	O
}	O
(	O
*	O
pqparam	*
)	O
[	O
1	int
]	O
.	O
uuconf_bproto	int
=	O
'\0'	O
;	O
q	*
=	O
*	O
pqparam	*
;	O
q	*
->	O
uuconf_bproto	*
=	O
argv	*
[	O
0	int
]	O
[	O
0	int
]	O
;	O
q	*
->	O
uuconf_qentries	*
=	O
NULL	O
;	O
}	O
else	O
{	O
c	int
=	O
0	int
;	O
for	O
(	O
q	int
=	O
*	O
pqparam	*
;	O
q	*
->	O
uuconf_bproto	int
!=	O
'\0'	O
;	O
q	*
++	O
)	O
{	O
if	O
(	O
q	*
->	O
uuconf_bproto	*
==	O
argv	*
[	O
0	int
]	O
[	O
0	int
]	O
)	O
break	O
;	O
++	O
c	int
;	O
}	O
if	O
(	O
q	*
->	O
uuconf_bproto	char
==	O
'\0'	O
)	O
{	O
struct	O
uuconf_proto_param	struct
*	O
qnew	*
;	O
qnew	*
=	O
(	O
(	O
struct	O
uuconf_proto_param	struct
*	O
)	O
uuconf_malloc	function
(	O
pblock	*
,	O
(	O
(	O
c	int
+	O
2	int
)	O
*	O
sizeof	O
(	O
struct	O
uuconf_proto_param	struct
)	O
)	O
)	O
)	O
;	O
if	O
(	O
qnew	*
==	O
NULL	O
)	O
{	O
qglobal	*
->	O
ierrno	int
=	O
errno	O
;	O
return	O
(	O
UUCONF_MALLOC_FAILED	O
|	O
UUCONF_ERROR_ERRNO	O
|	O
UUCONF_CMDTABRET_EXIT	O
)	O
;	O
}	O
memcpy	function
(	O
(	O
pointer	*
)	O
qnew	*
,	O
(	O
pointer	*
)	O
*	O
pqparam	*
,	O
c	int
*	O
sizeof	O
(	O
struct	O
uuconf_proto_param	struct
)	O
)	O
;	O
qnew	*
[	O
c	int
+	O
1	int
]	O
.	O
uuconf_bproto	int
=	O
'\0'	O
;	O
uuconf_free	function
(	O
pblock	*
,	O
*	O
pqparam	*
)	O
;	O
*	O
pqparam	*
=	O
qnew	*
;	O
q	*
=	O
qnew	*
+	O
c	int
;	O
q	*
->	O
uuconf_bproto	*
=	O
argv	*
[	O
0	int
]	O
[	O
0	int
]	O
;	O
q	*
->	O
uuconf_qentries	*
=	O
NULL	O
;	O
}	O
}	O
if	O
(	O
q	*
->	O
uuconf_qentries	*
==	O
NULL	O
)	O
{	O
qentry	*
=	O
(	O
(	O
struct	O
uuconf_proto_param_entry	struct
*	O
)	O
uuconf_malloc	function
(	O
pblock	*
,	O
2	int
*	O
sizeof	O
(	O
struct	O
uuconf_proto_param_entry	struct
)	O
)	O
)	O
;	O
if	O
(	O
qentry	*
==	O
NULL	O
)	O
{	O
qglobal	*
->	O
ierrno	int
=	O
errno	O
;	O
return	O
(	O
UUCONF_MALLOC_FAILED	O
|	O
UUCONF_ERROR_ERRNO	O
|	O
UUCONF_CMDTABRET_EXIT	O
)	O
;	O
}	O
qentry	*
[	O
1	int
]	O
.	O
uuconf_cargs	int
=	O
0	int
;	O
q	*
->	O
uuconf_qentries	*
=	O
qentry	*
;	O
}	O
else	O
{	O
struct	O
uuconf_proto_param_entry	struct
*	O
qnewent	*
;	O
c	int
=	O
0	int
;	O
for	O
(	O
qentry	*
=	O
q	*
->	O
uuconf_qentries	*
;	O
qentry	*
->	O
uuconf_cargs	int
!=	O
0	int
;	O
qentry	*
++	O
)	O
++	O
c	int
;	O
qnewent	*
=	O
(	O
(	O
struct	O
uuconf_proto_param_entry	struct
*	O
)	O
uuconf_malloc	function
(	O
pblock	*
,	O
(	O
(	O
c	int
+	O
2	int
)	O
*	O
sizeof	O
(	O
struct	O
uuconf_proto_param_entry	struct
)	O
)	O
)	O
)	O
;	O
if	O
(	O
qnewent	*
==	O
NULL	O
)	O
{	O
qglobal	*
->	O
ierrno	int
=	O
errno	O
;	O
return	O
(	O
UUCONF_MALLOC_FAILED	O
|	O
UUCONF_ERROR_ERRNO	O
|	O
UUCONF_CMDTABRET_EXIT	O
)	O
;	O
}	O
memcpy	function
(	O
(	O
pointer	*
)	O
qnewent	*
,	O
(	O
pointer	*
)	O
q	*
->	O
uuconf_qentries	*
,	O
c	int
*	O
sizeof	O
(	O
struct	O
uuconf_proto_param_entry	struct
)	O
)	O
;	O
qnewent	*
[	O
c	int
+	O
1	int
]	O
.	O
uuconf_cargs	int
=	O
0	int
;	O
uuconf_free	function
(	O
pblock	*
,	O
q	*
->	O
uuconf_qentries	*
)	O
;	O
q	*
->	O
uuconf_qentries	int
=	O
qnewent	int
;	O
qentry	*
=	O
qnewent	int
+	O
c	int
;	O
}	O
qentry	*
->	O
uuconf_cargs	int
=	O
argc	int
-	O
1	int
;	O
qentry	*
->	O
uuconf_pzargs	*
=	O
(	O
char	O
*	O
*	O
)	O
uuconf_malloc	function
(	O
pblock	*
,	O
(	O
(	O
argc	int
-	O
1	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
)	O
;	O
if	O
(	O
qentry	*
->	O
uuconf_pzargs	*
==	O
NULL	O
)	O
{	O
qglobal	*
->	O
ierrno	int
=	O
errno	O
;	O
qentry	*
->	O
uuconf_cargs	int
=	O
0	int
;	O
return	O
(	O
UUCONF_MALLOC_FAILED	O
|	O
UUCONF_ERROR_ERRNO	O
|	O
UUCONF_CMDTABRET_EXIT	O
)	O
;	O
}	O
memcpy	function
(	O
(	O
pointer	*
)	O
qentry	*
->	O
uuconf_pzargs	*
,	O
(	O
pointer	*
)	O
(	O
argv	*
+	O
1	int
)	O
,	O
(	O
argc	int
-	O
1	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
return	O
UUCONF_CMDTABRET_KEEP	O
;	O
}	O