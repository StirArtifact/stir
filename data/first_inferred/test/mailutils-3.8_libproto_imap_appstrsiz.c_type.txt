static	O
int	O
get_crlf_stream_size	function
(	O
mu_stream_t	*
str	*
,	O
mu_off_t	long
size	long
,	O
mu_off_t	long
*	O
prealsize	*
)	O
{	O
mu_stream_t	*
null	*
,	O
flt	*
;	O
mu_stream_stat_buffer	array
stat	array
;	O
int	O
rc	int
;	O
mu_off_t	long
needle	*
;	O
rc	int
=	O
mu_nullstream_create	function
(	O
&	O
null	int
,	O
MU_STREAM_WRITE	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_stream_set_stat	function
(	O
null	O
,	O
MU_STREAM_STAT_MASK	O
(	O
MU_STREAM_STAT_OUT	int
)	O
,	O
stat	array
)	O
;	O
rc	int
=	O
mu_filter_create	function
(	O
&	O
flt	*
,	O
null	O
,	O
"CRLF"	*
,	O
MU_FILTER_ENCODE	int
,	O
MU_STREAM_WRITE	int
)	O
;	O
mu_stream_unref	function
(	O
null	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_stream_seek	function
(	O
str	*
,	O
0	int
,	O
MU_SEEK_CUR	int
,	O
&	O
needle	*
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_stream_copy	function
(	O
flt	*
,	O
str	*
,	O
size	long
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
rc	int
=	O
mu_stream_seek	function
(	O
str	*
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
mu_stream_unref	function
(	O
flt	*
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
*	O
prealsize	*
=	O
stat	array
[	O
MU_STREAM_STAT_OUT	int
]	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_imap_append_stream_size	function
(	O
mu_imap_t	*
imap	*
,	O
const	O
char	O
*	O
mailbox	*
,	O
int	O
flags	int
,	O
struct	O
tm	struct
*	O
tm	struct
,	O
struct	O
mu_timezone	struct
*	O
tz	*
,	O
mu_stream_t	*
stream	*
,	O
mu_off_t	long
size	long
)	O
{	O
int	O
status	int
;	O
mu_off_t	long
realsize	long
;	O
if	O
(	O
imap	*
==	O
NULL	O
||	O
!	O
mailbox	*
||	O
!	O
stream	*
||	O
size	long
==	O
0	int
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
imap	*
->	O
io	*
)	O
return	O
MU_ERR_NO_TRANSPORT	O
;	O
if	O
(	O
imap	*
->	O
session_state	enum
<	O
MU_IMAP_SESSION_AUTH	int
)	O
return	O
MU_ERR_SEQ	O
;	O
switch	O
(	O
imap	*
->	O
client_state	enum
)	O
{	O
case	O
MU_IMAP_CLIENT_READY	int
:	O
status	int
=	O
get_crlf_stream_size	function
(	O
stream	*
,	O
size	long
,	O
&	O
realsize	*
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
_mu_imap_tag_next	function
(	O
imap	*
)	O
;	O
MU_IMAP_CHECK_EAGAIN	O
(	O
imap	*
,	O
status	int
)	O
;	O
status	int
=	O
mu_imapio_printf	function
(	O
imap	*
->	O
io	*
,	O
"%s APPEND "	*
,	O
imap	*
->	O
tag_str	*
)	O
;	O
MU_IMAP_CHECK_ERROR	O
(	O
imap	*
,	O
status	int
)	O
;	O
status	int
=	O
mu_imapio_send_qstring	function
(	O
imap	*
->	O
io	*
,	O
mailbox	*
)	O
;	O
MU_IMAP_CHECK_ERROR	O
(	O
imap	*
,	O
status	int
)	O
;	O
if	O
(	O
flags	int
)	O
{	O
status	int
=	O
mu_imapio_send	function
(	O
imap	*
->	O
io	*
,	O
" "	*
,	O
1	int
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
status	int
=	O
mu_imapio_send_flags	function
(	O
imap	*
->	O
io	*
,	O
flags	int
)	O
;	O
MU_IMAP_CHECK_ERROR	O
(	O
imap	*
,	O
status	int
)	O
;	O
}	O
if	O
(	O
tm	struct
)	O
{	O
status	int
=	O
mu_imapio_send	function
(	O
imap	*
->	O
io	*
,	O
" "	*
,	O
1	int
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
status	int
=	O
mu_imapio_send_time	function
(	O
imap	*
->	O
io	*
,	O
tm	struct
,	O
tz	*
)	O
;	O
MU_IMAP_CHECK_ERROR	O
(	O
imap	*
,	O
status	int
)	O
;	O
}	O
status	int
=	O
mu_imapio_send	function
(	O
imap	*
->	O
io	*
,	O
" "	*
,	O
1	int
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
mu_stream_t	*
flt	*
;	O
status	int
=	O
mu_filter_create	function
(	O
&	O
flt	*
,	O
stream	*
,	O
"CRLF"	*
,	O
MU_FILTER_ENCODE	int
,	O
MU_STREAM_READ	int
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
status	int
=	O
mu_imapio_send_literal_stream	function
(	O
imap	*
->	O
io	*
,	O
flt	*
,	O
realsize	*
)	O
;	O
mu_stream_unref	function
(	O
flt	*
)	O
;	O
}	O
}	O
MU_IMAP_CHECK_ERROR	O
(	O
imap	*
,	O
status	int
)	O
;	O
status	int
=	O
mu_imapio_send	function
(	O
imap	*
->	O
io	*
,	O
"\r\n"	*
,	O
2	int
)	O
;	O
MU_IMAP_CHECK_ERROR	O
(	O
imap	*
,	O
status	int
)	O
;	O
MU_IMAP_FCLR	O
(	O
imap	*
,	O
MU_IMAP_RESP	int
)	O
;	O
imap	*
->	O
client_state	enum
=	O
MU_IMAP_CLIENT_APPEND_RX	int
;	O
case	O
MU_IMAP_CLIENT_APPEND_RX	int
:	O
status	int
=	O
_mu_imap_response	function
(	O
imap	*
,	O
NULL	O
,	O
NULL	O
)	O
;	O
MU_IMAP_CHECK_EAGAIN	O
(	O
imap	*
,	O
status	int
)	O
;	O
switch	O
(	O
imap	*
->	O
response	enum
)	O
{	O
case	O
MU_IMAP_OK	int
:	O
status	int
=	O
0	int
;	O
break	O
;	O
case	O
MU_IMAP_NO	int
:	O
status	int
=	O
MU_ERR_FAILURE	O
;	O
break	O
;	O
case	O
MU_IMAP_BAD	int
:	O
status	int
=	O
MU_ERR_BADREPLY	O
;	O
break	O
;	O
}	O
imap	*
->	O
client_state	enum
=	O
MU_IMAP_CLIENT_READY	int
;	O
break	O
;	O
default	O
:	O
status	int
=	O
EINPROGRESS	int
;	O
}	O
return	O
status	int
;	O
}	O