static	O
void	O
stdstream_flushall_setup	function
(	O
void	O
)	O
;	O
static	O
void	O
std_bootstrap	function
(	O
struct	O
_mu_stream	struct
*	O
str	*
,	O
int	O
code	int
,	O
unsigned	O
long	O
lval	long
,	O
void	O
*	O
pval	*
)	O
{	O
struct	O
_mu_file_stream	struct
*	O
fstr	*
=	O
(	O
struct	O
_mu_file_stream	struct
*	O
)	O
str	*
;	O
_mu_file_stream_setup	function
(	O
fstr	*
)	O
;	O
str	*
->	O
event_cb	*
=	O
NULL	O
;	O
str	*
->	O
event_mask	int
=	O
0	int
;	O
str	*
->	O
event_cb_data	*
=	O
0	int
;	O
fstr	*
->	O
stream	*
.	O
flags	int
|=	O
_MU_STR_OPEN	int
;	O
mu_stream_set_buffer	function
(	O
(	O
mu_stream_t	*
)	O
fstr	*
,	O
mu_buffer_line	int
,	O
0	int
)	O
;	O
stdstream_flushall_setup	function
(	O
)	O
;	O
}	O
static	O
void	O
std_log_bootstrap	function
(	O
struct	O
_mu_stream	struct
*	O
str	*
,	O
int	O
code	int
,	O
unsigned	O
long	O
lval	long
,	O
void	O
*	O
pval	*
)	O
{	O
struct	O
_mu_log_stream	struct
*	O
logstr	*
=	O
(	O
struct	O
_mu_log_stream	struct
*	O
)	O
str	*
;	O
int	O
yes	int
=	O
1	int
;	O
mu_stream_t	*
errstr	*
,	O
transport	*
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_stdio_stream_create	function
(	O
&	O
errstr	*
,	O
MU_STDERR_FD	int
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
fprintf	function
(	O
stderr	*
,	O
"%s: cannot open error stream: %s\n"	*
,	O
mu_program_name	*
?	O
mu_program_name	*
:	O
"<unknown>"	*
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
mu_stream_ioctl	function
(	O
errstr	*
,	O
MU_IOCTL_FD	int
,	O
MU_IOCTL_FD_SET_BORROW	int
,	O
&	O
yes	int
)	O
;	O
if	O
(	O
!	O
mu_program_name	*
)	O
transport	*
=	O
errstr	*
;	O
else	O
{	O
char	O
*	O
fltargs	array
[	O
3	int
]	O
=	O
{	O
"INLINE-COMMENT"	*
,	O
}	O
;	O
mu_asprintf	function
(	O
&	O
fltargs	array
[	O
1	int
]	O
,	O
"%s: "	*
,	O
mu_program_name	*
)	O
;	O
fltargs	array
[	O
2	int
]	O
=	O
NULL	O
;	O
rc	int
=	O
mu_filter_create_args	function
(	O
&	O
transport	*
,	O
errstr	*
,	O
"INLINE-COMMENT"	*
,	O
2	int
,	O
(	O
const	O
char	O
*	O
*	O
)	O
fltargs	array
,	O
MU_FILTER_ENCODE	int
,	O
MU_STREAM_WRITE	int
)	O
;	O
mu_stream_unref	function
(	O
errstr	*
)	O
;	O
free	function
(	O
fltargs	array
[	O
1	int
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
fprintf	function
(	O
stderr	*
,	O
"%s: cannot open output filter stream: %s"	*
,	O
mu_program_name	*
?	O
mu_program_name	*
:	O
"<unknown>"	*
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
mu_stream_set_buffer	function
(	O
transport	*
,	O
mu_buffer_line	int
,	O
0	int
)	O
;	O
}	O
str	*
->	O
event_cb	*
=	O
NULL	O
;	O
str	*
->	O
event_mask	int
=	O
0	int
;	O
str	*
->	O
event_cb_data	*
=	O
0	int
;	O
_mu_log_stream_setup	function
(	O
logstr	*
,	O
transport	*
)	O
;	O
stdstream_flushall_setup	function
(	O
)	O
;	O
}	O
static	O
void	O
bootstrap_destroy	function
(	O
struct	O
_mu_stream	struct
*	O
str	*
)	O
{	O
}	O
static	O
struct	O
_mu_file_stream	struct
stdstream	array
[	O
2	int
]	O
=	O
{	O
{	O
.	O
stream	*
=	O
{	O
.	O
ref_count	int
=	O
1	int
,	O
.	O
buftype	char
=	O
mu_buffer_none	O
,	O
.	O
flags	int
=	O
MU_STREAM_READ	int
,	O
.	O
destroy	O
=	O
bootstrap_destroy	*
,	O
.	O
event_cb	*
=	O
std_bootstrap	O
,	O
.	O
event_mask	O
=	O
_MU_STR_EVMASK	O
(	O
_MU_STR_EVENT_BOOTSTRAP	int
)	O
}	O
,	O
.	O
fd	int
=	O
MU_STDIN_FD	int
,	O
.	O
filename	*
=	O
"<stdin>"	*
,	O
.	O
flags	int
=	O
_MU_FILE_STREAM_FD_BORROWED	int
|	O
_MU_FILE_STREAM_STATIC_FILENAME	int
}	O
,	O
{	O
.	O
stream	*
=	O
{	O
.	O
ref_count	int
=	O
1	int
,	O
.	O
buftype	char
=	O
mu_buffer_none	O
,	O
.	O
flags	int
=	O
MU_STREAM_WRITE	int
,	O
.	O
destroy	O
=	O
bootstrap_destroy	*
,	O
.	O
event_cb	*
=	O
std_bootstrap	O
,	O
.	O
event_mask	O
=	O
_MU_STR_EVMASK	O
(	O
_MU_STR_EVENT_BOOTSTRAP	int
)	O
}	O
,	O
.	O
fd	int
=	O
MU_STDOUT_FD	int
,	O
.	O
filename	*
=	O
"<stdout>"	*
,	O
.	O
flags	int
=	O
_MU_FILE_STREAM_FD_BORROWED	int
|	O
_MU_FILE_STREAM_STATIC_FILENAME	int
}	O
}	O
;	O
static	O
struct	O
_mu_log_stream	struct
default_strerr	struct
=	O
{	O
.	O
base	int
=	O
{	O
.	O
ref_count	int
=	O
1	int
,	O
.	O
buftype	char
=	O
mu_buffer_none	*
,	O
.	O
flags	int
=	O
MU_STREAM_WRITE	int
,	O
.	O
destroy	O
=	O
bootstrap_destroy	*
,	O
.	O
event_cb	*
=	O
std_log_bootstrap	O
,	O
.	O
event_mask	O
=	O
_MU_STR_EVMASK	O
(	O
_MU_STR_EVENT_BOOTSTRAP	int
)	O
}	O
}	O
;	O
mu_stream_t	*
mu_strin	*
=	O
(	O
mu_stream_t	*
)	O
&	O
stdstream	array
[	O
MU_STDIN_FD	int
]	O
;	O
mu_stream_t	*
mu_strout	*
=	O
(	O
mu_stream_t	*
)	O
&	O
stdstream	array
[	O
MU_STDOUT_FD	int
]	O
;	O
mu_stream_t	*
mu_strerr	*
=	O
(	O
mu_stream_t	*
)	O
&	O
default_strerr	int
;	O
static	O
void	O
stdstream_flushall	function
(	O
void	O
*	O
data	*
MU_ARG_UNUSED	O
)	O
{	O
mu_stream_flush	function
(	O
mu_strin	*
)	O
;	O
mu_stream_flush	function
(	O
mu_strout	*
)	O
;	O
mu_stream_flush	function
(	O
mu_strerr	*
)	O
;	O
}	O
static	O
void	O
stdstream_flushall_setup	function
(	O
void	O
)	O
{	O
static	O
int	O
_setup	int
=	O
0	int
;	O
if	O
(	O
!	O
_setup	*
)	O
{	O
mu_onexit	function
(	O
stdstream_flushall	*
,	O
NULL	O
)	O
;	O
_setup	int
=	O
1	int
;	O
}	O
}	O
void	O
mu_stdstream_setup	function
(	O
int	O
flags	int
)	O
{	O
int	O
rc	int
;	O
int	O
fd	int
;	O
int	O
yes	int
=	O
1	int
;	O
if	O
(	O
flags	int
&	O
MU_STDSTREAM_RESET_STRIN	int
)	O
mu_stream_destroy	function
(	O
&	O
mu_strin	*
)	O
;	O
if	O
(	O
flags	int
&	O
MU_STDSTREAM_RESET_STROUT	int
)	O
mu_stream_destroy	function
(	O
&	O
mu_strout	*
)	O
;	O
if	O
(	O
flags	int
&	O
MU_STDSTREAM_RESET_STRERR	int
)	O
mu_stream_destroy	function
(	O
&	O
mu_strerr	*
)	O
;	O
fd	int
=	O
open	function
(	O
"/dev/null"	*
,	O
O_RDWR	int
)	O
;	O
switch	O
(	O
fd	int
)	O
{	O
case	O
0	int
:	O
fd	int
=	O
open	function
(	O
"/dev/null"	*
,	O
O_WRONLY	int
)	O
;	O
if	O
(	O
fd	int
!=	O
1	int
)	O
{	O
if	O
(	O
fd	int
>	O
2	int
)	O
close	function
(	O
fd	int
)	O
;	O
break	O
;	O
}	O
case	O
1	int
:	O
fd	int
=	O
open	function
(	O
"/dev/null"	*
,	O
O_WRONLY	int
)	O
;	O
if	O
(	O
fd	int
!=	O
2	int
)	O
close	function
(	O
fd	int
)	O
;	O
break	O
;	O
case	O
2	int
:	O
;	O
break	O
;	O
default	O
:	O
close	function
(	O
fd	int
)	O
;	O
break	O
;	O
}	O
if	O
(	O
!	O
mu_strin	*
)	O
{	O
rc	int
=	O
mu_stdio_stream_create	function
(	O
&	O
mu_strin	*
,	O
MU_STDIN_FD	int
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
fprintf	function
(	O
stderr	*
,	O
"mu_stdio_stream_create(%d): %s\n"	*
,	O
MU_STDIN_FD	int
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
mu_stream_ioctl	function
(	O
mu_strin	*
,	O
MU_IOCTL_FD	int
,	O
MU_IOCTL_FD_SET_BORROW	int
,	O
&	O
yes	int
)	O
;	O
}	O
if	O
(	O
!	O
mu_strout	*
)	O
{	O
rc	int
=	O
mu_stdio_stream_create	function
(	O
&	O
mu_strout	*
,	O
MU_STDOUT_FD	int
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
fprintf	function
(	O
stderr	*
,	O
"mu_stdio_stream_create(%d): %s\n"	*
,	O
MU_STDOUT_FD	int
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
mu_stream_ioctl	function
(	O
mu_strout	*
,	O
MU_IOCTL_FD	int
,	O
MU_IOCTL_FD_SET_BORROW	int
,	O
&	O
yes	int
)	O
;	O
}	O
if	O
(	O
!	O
mu_strerr	*
)	O
{	O
if	O
(	O
mu_stdstream_strerr_create	function
(	O
&	O
mu_strerr	*
,	O
MU_STRERR_STDERR	*
,	O
0	int
,	O
0	int
,	O
mu_program_name	*
,	O
NULL	O
)	O
)	O
abort	function
(	O
)	O
;	O
}	O
stdstream_flushall_setup	function
(	O
)	O
;	O
}	O
int	O
mu_printf	function
(	O
const	O
char	O
*	O
fmt	*
,	O
...	O
)	O
{	O
int	O
rc	int
;	O
va_list	array
ap	*
;	O
va_start	O
(	O
ap	array
,	O
fmt	*
)	O
;	O
rc	int
=	O
mu_stream_vprintf	function
(	O
mu_strout	*
,	O
fmt	*
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
return	O
rc	int
;	O
}	O