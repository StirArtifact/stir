static	O
int	O
excmp	function
(	O
const	O
void	O
*	O
a	*
,	O
const	O
void	O
*	O
b	*
)	O
{	O
return	O
strcmp	function
(	O
*	O
(	O
const	O
char	O
*	O
*	O
)	O
a	*
,	O
*	O
(	O
const	O
char	O
*	O
*	O
)	O
b	*
)	O
;	O
}	O
static	O
char	O
*	O
*	O
make_exclusion_list	function
(	O
char	O
*	O
*	O
names	*
,	O
size_t	long
*	O
pcount	*
,	O
size_t	long
*	O
pmax	*
)	O
{	O
size_t	long
i	long
,	O
j	long
;	O
size_t	long
count	long
=	O
0	int
;	O
size_t	long
max_len	long
=	O
0	int
;	O
char	O
*	O
*	O
exlist	*
;	O
char	O
*	O
p	*
;	O
for	O
(	O
i	long
=	O
0	int
;	O
names	*
[	O
i	long
]	O
;	O
i	long
++	O
)	O
{	O
size_t	long
len	long
=	O
strlen	function
(	O
names	*
[	O
i	long
]	O
)	O
+	O
1	int
;	O
if	O
(	O
len	long
>	O
max_len	int
)	O
max_len	long
=	O
len	long
;	O
}	O
count	long
=	O
i	long
;	O
exlist	*
=	O
calloc	function
(	O
count	long
,	O
sizeof	O
(	O
exlist	array
[	O
0	int
]	O
)	O
+	O
max_len	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
exlist	*
)	O
return	O
NULL	O
;	O
p	*
=	O
(	O
char	O
*	O
)	O
(	O
exlist	*
+	O
count	long
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
names	*
[	O
i	long
]	O
;	O
i	long
++	O
,	O
p	*
+=	O
max_len	long
+	O
1	int
)	O
{	O
exlist	array
[	O
i	long
]	O
=	O
p	*
;	O
for	O
(	O
j	long
=	O
0	int
;	O
names	*
[	O
i	long
]	O
[	O
j	long
]	O
;	O
j	long
++	O
)	O
p	*
[	O
j	long
]	O
=	O
mu_tolower	O
(	O
names	*
[	O
i	long
]	O
[	O
j	long
]	O
)	O
;	O
p	*
[	O
j	long
++	O
]	O
=	O
':'	O
;	O
memset	function
(	O
p	*
+	O
j	long
,	O
0	int
,	O
max_len	int
-	O
j	long
+	O
1	int
)	O
;	O
}	O
qsort	function
(	O
exlist	*
,	O
count	long
,	O
sizeof	O
(	O
exlist	array
[	O
0	int
]	O
)	O
,	O
excmp	*
)	O
;	O
*	O
pcount	*
=	O
count	*
;	O
*	O
pmax	*
=	O
max_len	*
;	O
return	O
exlist	*
;	O
}	O
int	O
mu_stream_header_copy	function
(	O
mu_stream_t	*
dst	*
,	O
mu_stream_t	*
src	*
,	O
char	O
*	O
*	O
exclude_names	*
)	O
{	O
int	O
rc	int
;	O
size_t	long
la_max	long
;	O
char	O
*	O
lookahead	int
;	O
size_t	long
la_idx	long
=	O
0	int
;	O
enum	O
{	O
save_state_init	int
,	O
save_state_expect	int
,	O
save_state_skip	int
,	O
save_state_copy	int
,	O
save_state_stop	int
}	O
state	*
=	O
save_state_init	int
;	O
int	O
i	int
=	O
0	int
;	O
int	O
j	int
=	O
0	int
;	O
char	O
*	O
*	O
exclude	*
;	O
size_t	long
excount	long
;	O
exclude	struct
=	O
make_exclusion_list	function
(	O
exclude_names	*
,	O
&	O
excount	O
,	O
&	O
la_max	struct
)	O
;	O
if	O
(	O
!	O
exclude	O
)	O
return	O
ENOMEM	int
;	O
lookahead	int
=	O
malloc	function
(	O
la_max	*
)	O
;	O
if	O
(	O
!	O
lookahead	int
)	O
{	O
free	function
(	O
exclude	struct
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
while	O
(	O
state	*
!=	O
save_state_stop	int
)	O
{	O
char	O
c	int
;	O
size_t	long
n	long
;	O
rc	int
=	O
mu_stream_read	function
(	O
src	*
,	O
&	O
c	int
,	O
1	int
,	O
&	O
n	long
)	O
;	O
if	O
(	O
rc	int
||	O
n	int
==	O
0	int
)	O
break	O
;	O
if	O
(	O
state	*
==	O
save_state_init	int
||	O
state	*
==	O
save_state_expect	int
)	O
{	O
if	O
(	O
la_idx	int
==	O
la_max	int
)	O
state	*
=	O
save_state_copy	int
;	O
else	O
{	O
lookahead	array
[	O
la_idx	int
++	O
]	O
=	O
c	int
;	O
c	int
=	O
mu_tolower	O
(	O
c	int
)	O
;	O
}	O
}	O
switch	O
(	O
state	*
)	O
{	O
case	O
save_state_init	int
:	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
{	O
state	*
=	O
save_state_stop	int
;	O
break	O
;	O
}	O
j	long
=	O
0	int
;	O
state	*
=	O
save_state_copy	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	int
<	O
excount	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
exclude	struct
[	O
i	long
]	O
[	O
j	int
]	O
==	O
c	int
)	O
{	O
j	long
++	O
;	O
state	*
=	O
save_state_expect	int
;	O
break	O
;	O
}	O
}	O
break	O
;	O
case	O
save_state_expect	int
:	O
if	O
(	O
exclude	struct
[	O
i	long
]	O
[	O
j	int
]	O
!=	O
c	int
)	O
{	O
while	O
(	O
++	O
i	int
<	O
excount	int
)	O
{	O
if	O
(	O
memcmp	function
(	O
exclude	struct
[	O
i	long
-	O
1	int
]	O
,	O
exclude	struct
[	O
i	int
]	O
,	O
j	int
)	O
)	O
{	O
state	*
=	O
save_state_copy	int
;	O
break	O
;	O
}	O
if	O
(	O
exclude	struct
[	O
i	long
]	O
[	O
j	int
]	O
==	O
c	int
)	O
break	O
;	O
}	O
if	O
(	O
i	long
==	O
excount	int
)	O
state	*
=	O
save_state_copy	int
;	O
if	O
(	O
state	*
==	O
save_state_copy	int
)	O
break	O
;	O
}	O
if	O
(	O
c	int
==	O
':'	O
)	O
{	O
la_idx	long
=	O
0	int
;	O
state	*
=	O
save_state_skip	int
;	O
}	O
else	O
{	O
j	long
++	O
;	O
if	O
(	O
exclude	struct
[	O
i	long
]	O
[	O
j	long
]	O
==	O
0	int
)	O
state	*
=	O
save_state_copy	int
;	O
}	O
break	O
;	O
case	O
save_state_copy	int
:	O
if	O
(	O
la_idx	long
>	O
0	int
)	O
{	O
rc	int
=	O
mu_stream_write	function
(	O
dst	*
,	O
lookahead	int
,	O
la_idx	*
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
la_idx	int
=	O
0	int
;	O
}	O
rc	int
=	O
mu_stream_write	function
(	O
dst	*
,	O
&	O
c	int
,	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
state	*
=	O
save_state_init	int
;	O
break	O
;	O
case	O
save_state_skip	int
:	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
state	*
=	O
save_state_init	int
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
la_idx	int
>	O
1	int
)	O
rc	int
=	O
mu_stream_write	function
(	O
dst	*
,	O
lookahead	int
,	O
la_idx	int
-	O
1	int
,	O
NULL	O
)	O
;	O
}	O
free	function
(	O
lookahead	int
)	O
;	O
free	function
(	O
exclude	struct
)	O
;	O
return	O
rc	int
;	O
}	O