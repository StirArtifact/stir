static	O
char	O
*	O
pager	struct
;	O
static	O
char	O
*	O
get_pager_name	function
(	O
void	O
)	O
{	O
if	O
(	O
pager	struct
)	O
{	O
if	O
(	O
strcmp	function
(	O
pager	struct
,	O
"-"	*
)	O
==	O
0	int
)	O
return	O
NULL	O
;	O
return	O
pager	*
;	O
}	O
return	O
getenv	function
(	O
"PAGER"	*
)	O
;	O
}	O
void	O
ds_pager	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*
)	O
{	O
if	O
(	O
argc	int
==	O
1	int
)	O
{	O
char	O
*	O
p	*
=	O
get_pager_name	function
(	O
)	O
;	O
if	O
(	O
p	*
)	O
{	O
printf	function
(	O
"%s\n"	*
,	O
p	*
)	O
;	O
if	O
(	O
!	O
pager	*
)	O
printf	function
(	O
"%s\n"	*
,	O
_	O
(	O
"(Pager set from environment)"	*
)	O
)	O
;	O
}	O
}	O
else	O
xdico_assign_string	function
(	O
&	O
pager	struct
,	O
argv	*
[	O
1	int
]	O
)	O
;	O
}	O
dico_stream_t	*
create_output_stream	function
(	O
void	O
)	O
{	O
return	O
dico_fd_stream_create	function
(	O
fileno	function
(	O
stdout	*
)	O
,	O
DICO_STREAM_WRITE	int
,	O
1	int
)	O
;	O
}	O
static	O
int	O
get_screen_lines	function
(	O
void	O
)	O
{	O
struct	O
winsize	struct
ws	*
;	O
ws	struct
.	O
ws_col	short
=	O
ws	struct
.	O
ws_row	short
=	O
0	int
;	O
if	O
(	O
(	O
ioctl	function
(	O
1	int
,	O
TIOCGWINSZ	int
,	O
(	O
char	O
*	O
)	O
&	O
ws	struct
)	O
<	O
0	int
)	O
||	O
ws	struct
.	O
ws_row	short
==	O
0	int
)	O
{	O
const	O
char	O
*	O
lines	*
=	O
getenv	function
(	O
"LINES"	*
)	O
;	O
if	O
(	O
lines	int
)	O
ws	struct
.	O
ws_row	enum
=	O
strtol	function
(	O
lines	O
,	O
NULL	O
,	O
10	int
)	O
;	O
}	O
return	O
ws	struct
.	O
ws_row	short
;	O
}	O
struct	O
pfile_stream	struct
{	O
FILE	struct
*	O
fp	*
;	O
}	O
;	O
static	O
int	O
fp_write	function
(	O
void	O
*	O
data	*
,	O
const	O
char	O
*	O
buf	*
,	O
size_t	long
size	long
,	O
size_t	long
*	O
pret	*
)	O
{	O
struct	O
pfile_stream	struct
*	O
p	*
=	O
data	*
;	O
*	O
pret	*
=	O
fwrite	function
(	O
buf	*
,	O
1	int
,	O
size	long
,	O
p	*
->	O
fp	*
)	O
;	O
return	O
ferror	function
(	O
p	*
->	O
fp	*
)	O
;	O
}	O
static	O
int	O
fp_close	function
(	O
void	O
*	O
data	*
)	O
{	O
struct	O
pfile_stream	struct
*	O
p	*
=	O
data	*
;	O
pclose	function
(	O
p	*
->	O
fp	*
)	O
;	O
return	O
0	int
;	O
}	O
static	O
dico_stream_t	*
create_pfile_stream	function
(	O
FILE	struct
*	O
fp	*
)	O
{	O
dico_stream_t	*
str	*
;	O
struct	O
pfile_stream	struct
*	O
s	*
;	O
s	*
=	O
xmalloc	function
(	O
sizeof	O
(	O
*	O
s	*
)	O
)	O
;	O
s	*
->	O
fp	*
=	O
fp	*
;	O
if	O
(	O
dico_stream_create	function
(	O
&	O
str	*
,	O
DICO_STREAM_WRITE	int
,	O
s	*
)	O
)	O
xalloc_die	function
(	O
)	O
;	O
dico_stream_set_write	function
(	O
str	*
,	O
fp_write	function
)	O
;	O
dico_stream_set_close	function
(	O
str	*
,	O
fp_close	function
)	O
;	O
return	O
str	*
;	O
}	O
dico_stream_t	*
create_pager_stream	function
(	O
size_t	long
nlines	long
)	O
{	O
char	O
*	O
pager	*
=	O
get_pager_name	function
(	O
)	O
;	O
FILE	struct
*	O
fp	*
;	O
if	O
(	O
!	O
pager	struct
||	O
!	O
pager	*
[	O
0	int
]	O
||	O
!	O
isatty	function
(	O
fileno	function
(	O
stdout	*
)	O
)	O
||	O
nlines	int
<	O
get_screen_lines	function
(	O
)	O
)	O
return	O
create_output_stream	function
(	O
)	O
;	O
fp	*
=	O
popen	function
(	O
pager	struct
,	O
"w"	*
)	O
;	O
if	O
(	O
!	O
fp	*
)	O
return	O
create_output_stream	function
(	O
)	O
;	O
return	O
create_pfile_stream	function
(	O
fp	*
)	O
;	O
}	O