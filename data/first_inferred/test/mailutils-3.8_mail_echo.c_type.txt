static	O
int	O
echo_runcmd	function
(	O
char	O
*	O
*	O
ret	*
,	O
const	O
char	O
*	O
str	*
,	O
size_t	long
len	long
,	O
char	O
*	O
*	O
argv	*
,	O
void	O
*	O
closure	*
)	O
{	O
int	O
rc	int
;	O
mu_stream_t	*
ps	*
;	O
mu_stream_t	*
outs	*
;	O
size_t	long
i	long
;	O
int	O
status	int
=	O
MU_WRDSE_OK	int
;	O
char	O
buf	*
[	O
128	int
]	O
;	O
size_t	long
n	long
;	O
*	O
ret	*
=	O
NULL	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
argv	*
[	O
i	long
]	O
;	O
i	long
++	O
)	O
;	O
rc	int
=	O
mu_prog_stream_create	function
(	O
&	O
ps	*
,	O
argv	*
[	O
0	int
]	O
,	O
i	long
,	O
argv	*
,	O
0	int
,	O
NULL	O
,	O
MU_STREAM_READ	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"Can't run %s: %s"	*
)	O
,	O
argv	*
[	O
0	int
]	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
MU_WRDSE_USERERR	int
;	O
}	O
rc	int
=	O
mu_memory_stream_create	function
(	O
&	O
outs	*
,	O
MU_STREAM_RDWR	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_memory_stream_create"	*
,	O
NULL	O
,	O
rc	int
)	O
;	O
mu_stream_destroy	function
(	O
&	O
ps	*
)	O
;	O
return	O
MU_WRDSE_USERERR	int
;	O
}	O
while	O
(	O
(	O
rc	int
=	O
mu_stream_read	function
(	O
ps	*
,	O
buf	*
,	O
sizeof	O
(	O
buf	*
)	O
,	O
&	O
n	long
)	O
)	O
==	O
0	int
&&	O
n	long
>	O
0	int
)	O
{	O
int	O
wn	int
=	O
mu_stream_write	function
(	O
outs	*
,	O
buf	*
,	O
n	long
,	O
NULL	O
)	O
;	O
if	O
(	O
wn	long
)	O
{	O
mu_error	function
(	O
_	O
(	O
"error writing to temporary stream: %s"	*
)	O
,	O
mu_strerror	function
(	O
wn	long
)	O
)	O
;	O
status	int
=	O
MU_WRDSE_USERERR	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
status	int
==	O
MU_WRDSE_OK	int
&&	O
rc	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"error reading %s output: %s"	*
)	O
,	O
argv	*
[	O
0	int
]	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
status	int
=	O
MU_WRDSE_USERERR	int
;	O
}	O
mu_stream_destroy	function
(	O
&	O
ps	*
)	O
;	O
if	O
(	O
status	int
==	O
MU_WRDSE_OK	int
)	O
{	O
mu_off_t	long
size	long
;	O
char	O
*	O
p	*
;	O
mu_stream_size	function
(	O
outs	*
,	O
&	O
size	long
)	O
;	O
p	*
=	O
malloc	function
(	O
size	long
+	O
1	int
)	O
;	O
if	O
(	O
p	*
)	O
{	O
mu_stream_seek	function
(	O
outs	*
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
rc	int
=	O
mu_stream_read	function
(	O
outs	*
,	O
p	*
,	O
size	long
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
p	*
[	O
size	long
]	O
=	O
0	int
;	O
*	O
ret	*
=	O
p	*
;	O
}	O
else	O
{	O
free	function
(	O
p	*
)	O
;	O
mu_error	function
(	O
_	O
(	O
"error reading from temporary stream: %s"	*
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
status	int
=	O
MU_WRDSE_USERERR	int
;	O
}	O
}	O
else	O
status	int
=	O
MU_WRDSE_NOSPACE	int
;	O
}	O
mu_stream_destroy	function
(	O
&	O
outs	*
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
echo	function
(	O
char	O
*	O
s	*
,	O
int	O
*	O
nl	*
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_wordsplit	struct
ws	*
;	O
int	O
wsflags	int
=	O
MU_WRDSF_NOSPLIT	O
|	O
MU_WRDSF_QUOTE	int
|	O
MU_WRDSF_ENV	int
;	O
size_t	long
len	long
;	O
ws	*
.	O
ws_env	*
=	O
(	O
const	O
char	O
*	O
*	O
)	O
environ	*
;	O
ws	*
.	O
ws_command	int
=	O
echo_runcmd	*
;	O
rc	int
=	O
mu_wordsplit	struct
(	O
s	*
,	O
&	O
ws	*
,	O
wsflags	int
)	O
;	O
switch	O
(	O
rc	int
)	O
{	O
case	O
MU_WRDSE_OK	int
:	O
break	O
;	O
case	O
MU_WRDSE_USERERR	int
:	O
mu_wordsplit_free	function
(	O
&	O
ws	*
)	O
;	O
return	O
1	int
;	O
default	O
:	O
mu_error	function
(	O
"%s"	*
,	O
mu_wordsplit_strerror	function
(	O
&	O
ws	*
)	O
)	O
;	O
mu_wordsplit_free	function
(	O
&	O
ws	*
)	O
;	O
return	O
1	int
;	O
}	O
len	long
=	O
strlen	function
(	O
ws	*
.	O
ws_wordv	*
[	O
0	int
]	O
)	O
;	O
mu_stream_write	function
(	O
mu_strout	*
,	O
ws	*
.	O
ws_wordv	*
[	O
0	int
]	O
,	O
len	long
,	O
NULL	O
)	O
;	O
*	O
nl	*
=	O
len	long
>	O
0	int
&&	O
ws	*
.	O
ws_wordv	*
[	O
0	int
]	O
[	O
len	int
-	O
1	int
]	O
==	O
'\n'	O
;	O
mu_wordsplit_free	function
(	O
&	O
ws	*
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mail_echo	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*
)	O
{	O
if	O
(	O
argc	int
>	O
1	int
)	O
{	O
int	O
i	int
;	O
int	O
nl	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
i	int
>	O
1	int
)	O
mu_printf	function
(	O
" "	*
)	O
;	O
if	O
(	O
echo	function
(	O
argv	*
[	O
i	int
]	O
,	O
&	O
nl	*
)	O
)	O
break	O
;	O
}	O
if	O
(	O
!	O
nl	*
)	O
mu_printf	function
(	O
"\n"	*
)	O
;	O
}	O
return	O
0	int
;	O
}	O