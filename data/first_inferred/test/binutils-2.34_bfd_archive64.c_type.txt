bfd_boolean	int
_bfd_archive_64_bit_slurp_armap	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
struct	O
artdata	struct
*	O
ardata	pointer
=	O
bfd_ardata	O
(	O
abfd	pointer
)	O
;	O
char	O
nextname	array
[	O
17	int
]	O
;	O
bfd_size_type	long
i	pointer
,	O
parsed_size	long
,	O
nsymz	long
,	O
stringsize	long
,	O
carsym_size	long
,	O
ptrsize	long
;	O
struct	O
areltdata	struct
*	O
mapdata	pointer
;	O
bfd_byte	char
int_buf	array
[	O
8	int
]	O
;	O
char	O
*	O
stringbase	pointer
;	O
char	O
*	O
stringend	pointer
;	O
bfd_byte	char
*	O
raw_armap	pointer
=	O
NULL	O
;	O
carsym	struct
*	O
carsyms	pointer
;	O
bfd_size_type	long
amt	long
;	O
ardata	pointer
->	O
symdefs	pointer
=	O
NULL	O
;	O
i	pointer
=	O
bfd_bread	function
(	O
nextname	array
,	O
16	int
,	O
abfd	pointer
)	O
;	O
if	O
(	O
i	pointer
==	O
0	int
)	O
return	O
TRUE	int
;	O
if	O
(	O
i	pointer
!=	O
16	int
)	O
return	O
FALSE	int
;	O
if	O
(	O
bfd_seek	function
(	O
abfd	pointer
,	O
(	O
file_ptr	long
)	O
-	O
16	int
,	O
SEEK_CUR	int
)	O
!=	O
0	int
)	O
return	O
FALSE	int
;	O
if	O
(	O
CONST_STRNEQ	O
(	O
nextname	array
,	O
"/               "	pointer
)	O
)	O
return	O
bfd_slurp_armap	function
(	O
abfd	pointer
)	O
;	O
if	O
(	O
!	O
CONST_STRNEQ	O
(	O
nextname	array
,	O
"/SYM64/         "	pointer
)	O
)	O
{	O
abfd	pointer
->	O
has_armap	int
=	O
FALSE	int
;	O
return	O
TRUE	int
;	O
}	O
mapdata	pointer
=	O
(	O
struct	O
areltdata	struct
*	O
)	O
_bfd_read_ar_hdr	O
(	O
abfd	pointer
)	O
;	O
if	O
(	O
mapdata	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
parsed_size	long
=	O
mapdata	pointer
->	O
parsed_size	long
;	O
free	function
(	O
mapdata	pointer
)	O
;	O
if	O
(	O
bfd_bread	function
(	O
int_buf	array
,	O
8	int
,	O
abfd	pointer
)	O
!=	O
8	int
)	O
{	O
if	O
(	O
bfd_get_error	function
(	O
)	O
!=	O
bfd_error_system_call	int
)	O
bfd_set_error	function
(	O
bfd_error_malformed_archive	int
)	O
;	O
return	O
FALSE	int
;	O
}	O
nsymz	long
=	O
bfd_getb64	function
(	O
int_buf	array
)	O
;	O
stringsize	long
=	O
parsed_size	long
-	O
8	int
*	O
nsymz	long
-	O
8	int
;	O
carsym_size	long
=	O
nsymz	long
*	O
sizeof	O
(	O
carsym	struct
)	O
;	O
ptrsize	long
=	O
8	int
*	O
nsymz	long
;	O
amt	long
=	O
carsym_size	long
+	O
stringsize	long
+	O
1	int
;	O
if	O
(	O
nsymz	long
>=	O
(	O
bfd_size_type	long
)	O
-	O
1	int
/	O
8	int
||	O
stringsize	long
>	O
parsed_size	long
||	O
nsymz	long
>	O
(	O
bfd_size_type	long
)	O
-	O
1	int
/	O
sizeof	O
(	O
carsym	struct
)	O
||	O
amt	long
<=	O
carsym_size	long
||	O
amt	long
<=	O
stringsize	long
)	O
{	O
bfd_set_error	function
(	O
bfd_error_malformed_archive	int
)	O
;	O
return	O
FALSE	int
;	O
}	O
ardata	pointer
->	O
symdefs	pointer
=	O
(	O
struct	O
carsym	struct
*	O
)	O
bfd_zalloc	function
(	O
abfd	pointer
,	O
amt	long
)	O
;	O
if	O
(	O
ardata	pointer
->	O
symdefs	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
carsyms	pointer
=	O
ardata	pointer
->	O
symdefs	pointer
;	O
stringbase	pointer
=	O
(	O
(	O
char	O
*	O
)	O
ardata	pointer
->	O
symdefs	pointer
)	O
+	O
carsym_size	long
;	O
raw_armap	pointer
=	O
(	O
bfd_byte	char
*	O
)	O
bfd_alloc	function
(	O
abfd	pointer
,	O
ptrsize	long
)	O
;	O
if	O
(	O
raw_armap	pointer
==	O
NULL	O
)	O
goto	O
release_symdefs	O
;	O
if	O
(	O
bfd_bread	function
(	O
raw_armap	pointer
,	O
ptrsize	long
,	O
abfd	pointer
)	O
!=	O
ptrsize	long
||	O
bfd_bread	function
(	O
stringbase	pointer
,	O
stringsize	long
,	O
abfd	pointer
)	O
!=	O
stringsize	long
)	O
{	O
if	O
(	O
bfd_get_error	function
(	O
)	O
!=	O
bfd_error_system_call	int
)	O
bfd_set_error	function
(	O
bfd_error_malformed_archive	int
)	O
;	O
goto	O
release_raw_armap	O
;	O
}	O
stringend	pointer
=	O
stringbase	pointer
+	O
stringsize	long
;	O
*	O
stringend	pointer
=	O
0	int
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
nsymz	long
;	O
i	pointer
++	O
)	O
{	O
carsyms	pointer
->	O
file_offset	long
=	O
bfd_getb64	function
(	O
raw_armap	pointer
+	O
i	pointer
*	O
8	int
)	O
;	O
carsyms	pointer
->	O
name	pointer
=	O
stringbase	pointer
;	O
stringbase	pointer
+=	O
strlen	function
(	O
stringbase	pointer
)	O
;	O
if	O
(	O
stringbase	pointer
!=	O
stringend	pointer
)	O
++	O
stringbase	pointer
;	O
++	O
carsyms	pointer
;	O
}	O
ardata	pointer
->	O
symdef_count	long
=	O
nsymz	long
;	O
ardata	pointer
->	O
first_file_filepos	long
=	O
bfd_tell	function
(	O
abfd	pointer
)	O
;	O
ardata	pointer
->	O
first_file_filepos	long
+=	O
(	O
ardata	pointer
->	O
first_file_filepos	long
)	O
%	O
2	int
;	O
abfd	pointer
->	O
has_armap	int
=	O
TRUE	int
;	O
bfd_release	function
(	O
abfd	pointer
,	O
raw_armap	pointer
)	O
;	O
return	O
TRUE	int
;	O
release_raw_armap	O
:	O
bfd_release	function
(	O
abfd	pointer
,	O
raw_armap	pointer
)	O
;	O
release_symdefs	O
:	O
bfd_release	function
(	O
abfd	pointer
,	O
ardata	pointer
->	O
symdefs	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
bfd_boolean	int
_bfd_archive_64_bit_write_armap	function
(	O
bfd	struct
*	O
arch	enum
,	O
unsigned	O
int	O
elength	int
,	O
struct	O
orl	struct
*	O
map	pointer
,	O
unsigned	O
int	O
symbol_count	int
,	O
int	O
stridx	int
)	O
{	O
unsigned	O
int	O
ranlibsize	int
=	O
(	O
symbol_count	int
*	O
8	int
)	O
+	O
8	int
;	O
unsigned	O
int	O
stringsize	long
=	O
stridx	int
;	O
unsigned	O
int	O
mapsize	int
=	O
stringsize	long
+	O
ranlibsize	int
;	O
file_ptr	long
archive_member_file_ptr	long
;	O
bfd	struct
*	O
current	pointer
=	O
arch	enum
->	O
archive_head	pointer
;	O
unsigned	O
int	O
count	int
;	O
struct	O
ar_hdr	struct
hdr	struct
;	O
int	O
padding	int
;	O
bfd_byte	char
buf	pointer
[	O
8	int
]	O
;	O
padding	int
=	O
BFD_ALIGN	O
(	O
mapsize	int
,	O
8	int
)	O
-	O
mapsize	int
;	O
mapsize	int
+=	O
padding	int
;	O
archive_member_file_ptr	long
=	O
(	O
mapsize	int
+	O
elength	int
+	O
sizeof	O
(	O
struct	O
ar_hdr	struct
)	O
+	O
SARMAG	int
)	O
;	O
memset	function
(	O
&	O
hdr	struct
,	O
' '	O
,	O
sizeof	O
(	O
struct	O
ar_hdr	struct
)	O
)	O
;	O
memcpy	function
(	O
hdr	struct
.	O
ar_name	array
,	O
"/SYM64/"	pointer
,	O
strlen	function
(	O
"/SYM64/"	pointer
)	O
)	O
;	O
if	O
(	O
!	O
_bfd_ar_sizepad	function
(	O
hdr	struct
.	O
ar_size	array
,	O
sizeof	O
(	O
hdr	struct
.	O
ar_size	array
)	O
,	O
mapsize	int
)	O
)	O
return	O
FALSE	int
;	O
_bfd_ar_spacepad	function
(	O
hdr	struct
.	O
ar_date	array
,	O
sizeof	O
(	O
hdr	struct
.	O
ar_date	array
)	O
,	O
"%ld"	pointer
,	O
time	struct
(	O
NULL	O
)	O
)	O
;	O
_bfd_ar_spacepad	function
(	O
hdr	struct
.	O
ar_uid	array
,	O
sizeof	O
(	O
hdr	struct
.	O
ar_uid	array
)	O
,	O
"%ld"	pointer
,	O
0	int
)	O
;	O
_bfd_ar_spacepad	function
(	O
hdr	struct
.	O
ar_gid	array
,	O
sizeof	O
(	O
hdr	struct
.	O
ar_gid	array
)	O
,	O
"%ld"	pointer
,	O
0	int
)	O
;	O
_bfd_ar_spacepad	function
(	O
hdr	struct
.	O
ar_mode	array
,	O
sizeof	O
(	O
hdr	struct
.	O
ar_mode	array
)	O
,	O
"%-7lo"	pointer
,	O
0	int
)	O
;	O
memcpy	function
(	O
hdr	struct
.	O
ar_fmag	array
,	O
ARFMAG	pointer
,	O
2	int
)	O
;	O
if	O
(	O
bfd_bwrite	function
(	O
&	O
hdr	struct
,	O
sizeof	O
(	O
struct	O
ar_hdr	struct
)	O
,	O
arch	enum
)	O
!=	O
sizeof	O
(	O
struct	O
ar_hdr	struct
)	O
)	O
return	O
FALSE	int
;	O
bfd_putb64	function
(	O
(	O
bfd_vma	long
)	O
symbol_count	int
,	O
buf	pointer
)	O
;	O
if	O
(	O
bfd_bwrite	function
(	O
buf	pointer
,	O
8	int
,	O
arch	enum
)	O
!=	O
8	int
)	O
return	O
FALSE	int
;	O
count	int
=	O
0	int
;	O
for	O
(	O
current	pointer
=	O
arch	enum
->	O
archive_head	pointer
;	O
current	pointer
!=	O
NULL	O
&&	O
count	int
<	O
symbol_count	int
;	O
current	pointer
=	O
current	pointer
->	O
archive_next	pointer
)	O
{	O
for	O
(	O
;	O
count	int
<	O
symbol_count	int
&&	O
map	pointer
[	O
count	int
]	O
.	O
u	union
.	O
abfd	pointer
==	O
current	pointer
;	O
count	int
++	O
)	O
{	O
bfd_putb64	function
(	O
(	O
bfd_vma	long
)	O
archive_member_file_ptr	long
,	O
buf	pointer
)	O
;	O
if	O
(	O
bfd_bwrite	function
(	O
buf	pointer
,	O
8	int
,	O
arch	enum
)	O
!=	O
8	int
)	O
return	O
FALSE	int
;	O
}	O
archive_member_file_ptr	long
+=	O
sizeof	O
(	O
struct	O
ar_hdr	struct
)	O
;	O
if	O
(	O
!	O
bfd_is_thin_archive	function
(	O
arch	enum
)	O
)	O
archive_member_file_ptr	long
+=	O
arelt_size	O
(	O
current	pointer
)	O
;	O
archive_member_file_ptr	long
+=	O
archive_member_file_ptr	long
%	O
2	int
;	O
}	O
for	O
(	O
count	int
=	O
0	int
;	O
count	int
<	O
symbol_count	int
;	O
count	int
++	O
)	O
{	O
size_t	long
len	long
=	O
strlen	function
(	O
*	O
map	pointer
[	O
count	int
]	O
.	O
name	pointer
)	O
+	O
1	int
;	O
if	O
(	O
bfd_bwrite	function
(	O
*	O
map	pointer
[	O
count	int
]	O
.	O
name	pointer
,	O
len	long
,	O
arch	enum
)	O
!=	O
len	long
)	O
return	O
FALSE	int
;	O
}	O
while	O
(	O
padding	int
!=	O
0	int
)	O
{	O
if	O
(	O
bfd_bwrite	function
(	O
""	pointer
,	O
1	int
,	O
arch	enum
)	O
!=	O
1	int
)	O
return	O
FALSE	int
;	O
--	O
padding	int
;	O
}	O
return	O
TRUE	int
;	O
}	O