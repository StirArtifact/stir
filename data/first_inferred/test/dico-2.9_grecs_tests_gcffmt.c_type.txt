struct	O
list_helper	struct
{	O
FILE	struct
*	O
file	*
;	O
int	O
delim	int
;	O
}	O
;	O
static	O
int	O
list_parser_types	function
(	O
const	O
char	O
*	O
name	*
,	O
grecs_parser_t	*
parser	*
,	O
void	O
*	O
data	*
)	O
{	O
struct	O
list_helper	struct
*	O
p	*
=	O
data	*
;	O
fprintf	function
(	O
p	*
->	O
file	*
,	O
"%c%s"	*
,	O
p	*
->	O
delim	int
,	O
name	*
)	O
;	O
p	*
->	O
delim	int
=	O
'|'	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
usage	function
(	O
const	O
char	O
*	O
arg	struct
,	O
FILE	struct
*	O
fp	*
,	O
int	O
code	int
)	O
{	O
struct	O
list_helper	struct
lh	struct
;	O
fprintf	function
(	O
fp	*
,	O
"usage: %s [-h] [-list[=type]] [-locus] [-delim=char] [-reduce] [-sort]\n"	*
,	O
arg	struct
)	O
;	O
fprintf	function
(	O
fp	*
,	O
"    [-nopath] [-novalue] [-type"	*
)	O
;	O
lh	struct
.	O
file	*
=	O
fp	*
;	O
lh	struct
.	O
delim	int
=	O
'='	O
;	O
grecs_enumerate_parsers	function
(	O
list_parser_types	function
,	O
&	O
lh	struct
)	O
;	O
fprintf	function
(	O
fp	*
,	O
"] [-Idir] [-include=dir] file [file...]\n"	*
)	O
;	O
exit	function
(	O
code	int
)	O
;	O
}	O
static	O
int	O
node_ident_cmp	function
(	O
struct	O
grecs_node	struct
const	O
*	O
a	*
,	O
struct	O
grecs_node	struct
const	O
*	O
b	*
)	O
{	O
return	O
strcmp	function
(	O
a	*
->	O
ident	*
,	O
b	*
->	O
ident	*
)	O
;	O
}	O
int	O
list_parser	function
(	O
const	O
char	O
*	O
name	*
,	O
grecs_parser_t	*
parser	*
,	O
void	O
*	O
data	*
)	O
{	O
printf	function
(	O
"%s\n"	*
,	O
name	*
)	O
;	O
return	O
0	int
;	O
}	O
int	O
find_parser	function
(	O
const	O
char	O
*	O
name	*
,	O
grecs_parser_t	*
parser	*
,	O
void	O
*	O
data	*
)	O
{	O
if	O
(	O
strcasecmp	function
(	O
name	*
,	O
(	O
char	O
*	O
)	O
data	*
)	O
==	O
0	int
)	O
exit	function
(	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
set_parser	function
(	O
const	O
char	O
*	O
arg	struct
)	O
{	O
grecs_parser_t	*
p	*
=	O
grecs_get_parser_by_type	function
(	O
arg	struct
)	O
;	O
if	O
(	O
p	*
)	O
{	O
grecs_parser_fun	*
=	O
p	*
;	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*
)	O
{	O
char	O
*	O
progname	*
=	O
argv	*
[	O
0	int
]	O
;	O
char	O
*	O
file	*
=	O
NULL	O
;	O
struct	O
grecs_node	struct
*	O
tree	*
;	O
int	O
flags	int
=	O
GRECS_NODE_FLAG_DEFAULT	O
;	O
int	O
reduce	int
=	O
0	int
;	O
int	O
sort	int
=	O
0	int
;	O
grecs_parser_options	int
=	O
0	int
;	O
while	O
(	O
--	O
argc	int
)	O
{	O
char	O
*	O
arg	struct
=	O
*	O
++	O
argv	*
;	O
if	O
(	O
strcmp	function
(	O
arg	struct
,	O
"-locus"	*
)	O
==	O
0	int
)	O
flags	int
|=	O
GRECS_NODE_FLAG_LOCUS	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	struct
,	O
"-nopath"	*
)	O
==	O
0	int
)	O
flags	int
&=	O
~	O
GRECS_NODE_FLAG_PATH	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	struct
,	O
"-novalue"	*
)	O
==	O
0	int
)	O
flags	int
&=	O
~	O
GRECS_NODE_FLAG_VALUE	int
;	O
else	O
if	O
(	O
strncmp	function
(	O
arg	struct
,	O
"-delim="	*
,	O
7	int
)	O
==	O
0	int
)	O
flags	int
|=	O
arg	struct
[	O
7	int
]	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	struct
,	O
"-reduce"	*
)	O
==	O
0	int
)	O
reduce	int
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	struct
,	O
"-sort"	*
)	O
==	O
0	int
)	O
sort	int
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	struct
,	O
"-h"	*
)	O
==	O
0	int
)	O
usage	function
(	O
progname	*
,	O
stdout	*
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	struct
,	O
"-list"	*
)	O
==	O
0	int
)	O
{	O
grecs_enumerate_parsers	function
(	O
list_parser	function
,	O
NULL	O
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
arg	struct
,	O
"-list="	*
,	O
6	int
)	O
==	O
0	int
)	O
{	O
grecs_enumerate_parsers	function
(	O
find_parser	function
,	O
arg	struct
+	O
6	int
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
arg	struct
,	O
"-type="	*
,	O
6	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
set_parser	function
(	O
arg	struct
+	O
6	int
)	O
)	O
usage	function
(	O
progname	*
,	O
stderr	*
,	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
arg	struct
,	O
"-I"	*
,	O
2	int
)	O
==	O
0	int
)	O
grecs_preproc_add_include_dir	function
(	O
arg	struct
+	O
2	int
)	O
;	O
else	O
if	O
(	O
strncmp	function
(	O
arg	struct
,	O
"-include="	*
,	O
9	int
)	O
==	O
0	int
)	O
grecs_preproc_add_include_dir	function
(	O
arg	struct
+	O
9	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	struct
,	O
"-x"	*
)	O
==	O
0	int
)	O
grecs_gram_trace	function
(	O
1	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	struct
,	O
"-X"	*
)	O
==	O
0	int
)	O
grecs_lex_trace	function
(	O
1	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	struct
,	O
"-strcat"	*
)	O
==	O
0	int
)	O
grecs_parser_options	int
|=	O
GRECS_OPTION_QUOTED_STRING_CONCAT	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	struct
,	O
"-stradj"	*
)	O
==	O
0	int
)	O
grecs_parser_options	int
|=	O
GRECS_OPTION_ADJUST_STRING_LOCATIONS	int
;	O
else	O
if	O
(	O
arg	struct
[	O
0	int
]	O
==	O
'-'	O
)	O
usage	function
(	O
progname	*
,	O
stderr	*
,	O
1	int
)	O
;	O
else	O
{	O
file	*
=	O
arg	struct
;	O
--	O
argc	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
!	O
grecs_parser_fun	*
)	O
{	O
fprintf	function
(	O
stderr	*
,	O
"%s: requested type not supported"	*
,	O
progname	*
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
if	O
(	O
!	O
file	*
)	O
usage	function
(	O
progname	*
,	O
stderr	*
,	O
1	int
)	O
;	O
tree	*
=	O
grecs_parse	function
(	O
file	*
)	O
;	O
if	O
(	O
!	O
tree	*
)	O
exit	function
(	O
1	int
)	O
;	O
for	O
(	O
;	O
argc	int
;	O
argc	int
--	O
)	O
{	O
char	O
*	O
arg	struct
=	O
*	O
++	O
argv	*
;	O
struct	O
grecs_node	struct
*	O
node	*
=	O
grecs_parse	function
(	O
arg	struct
)	O
;	O
if	O
(	O
!	O
node	*
)	O
exit	function
(	O
1	int
)	O
;	O
if	O
(	O
grecs_tree_join	function
(	O
tree	*
,	O
node	*
)	O
)	O
{	O
fprintf	function
(	O
stderr	*
,	O
"join failed\n"	*
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
grecs_tree_free	function
(	O
node	*
)	O
;	O
}	O
if	O
(	O
reduce	int
)	O
grecs_tree_reduce	function
(	O
tree	*
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
sort	int
)	O
grecs_tree_sort	function
(	O
tree	*
,	O
node_ident_cmp	function
)	O
;	O
grecs_print_node	function
(	O
tree	*
,	O
flags	int
,	O
stdout	*
)	O
;	O
fputc	function
(	O
'\n'	O
,	O
stdout	*
)	O
;	O
grecs_tree_free	function
(	O
tree	*
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O