static	O
int	O
_stream_callback	function
(	O
wget_http_response	struct
*	O
resp	pointer
WGET_GCC_UNUSED	O
,	O
void	O
*	O
user_data	pointer
,	O
const	O
char	O
*	O
data	pointer
,	O
size_t	long
length	long
)	O
{	O
FILE	struct
*	O
stream	pointer
=	O
(	O
FILE	struct
*	O
)	O
user_data	pointer
;	O
size_t	long
nbytes	long
=	O
fwrite	function
(	O
data	pointer
,	O
1	int
,	O
length	long
,	O
stream	pointer
)	O
;	O
if	O
(	O
nbytes	long
!=	O
length	long
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to write %zu bytes of data (%d: %s)\n"	pointer
)	O
,	O
length	long
,	O
errno	O
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
if	O
(	O
feof	function
(	O
stream	pointer
)	O
)	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_fd_callback	function
(	O
wget_http_response	struct
*	O
resp	pointer
WGET_GCC_UNUSED	O
,	O
void	O
*	O
user_data	pointer
,	O
const	O
char	O
*	O
data	pointer
,	O
size_t	long
length	long
)	O
{	O
int	O
fd	array
=	O
*	O
(	O
int	O
*	O
)	O
user_data	pointer
;	O
ssize_t	long
nbytes	long
=	O
write	pointer
(	O
fd	array
,	O
data	pointer
,	O
length	long
)	O
;	O
if	O
(	O
nbytes	long
==	O
-	O
1	int
||	O
(	O
size_t	long
)	O
nbytes	long
!=	O
length	long
)	O
error_printf	O
(	O
_	O
(	O
"Failed to write %zu bytes of data (%d: %s)\n"	pointer
)	O
,	O
length	long
,	O
errno	O
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
0	int
;	O
}	O
wget_http_response	struct
*	O
wget_http_get	function
(	O
int	O
first_key	int
,	O
...	O
)	O
{	O
wget_vector	struct
*	O
headers	pointer
;	O
wget_iri	struct
*	O
uri	pointer
=	O
NULL	O
;	O
wget_http_connection	struct
*	O
conn	pointer
=	O
NULL	O
,	O
*	O
*	O
connp	pointer
=	O
NULL	O
;	O
wget_http_request	struct
*	O
req	pointer
;	O
wget_http_response	struct
*	O
resp	pointer
=	O
NULL	O
;	O
wget_vector	struct
*	O
challenges	pointer
=	O
NULL	O
;	O
wget_cookie_db	struct
*	O
cookie_db	pointer
=	O
NULL	O
;	O
FILE	struct
*	O
saveas_stream	pointer
=	O
NULL	O
;	O
wget_http_body_callback	function
*	O
saveas_callback	pointer
=	O
NULL	O
;	O
int	O
saveas_fd	int
=	O
-	O
1	int
;	O
wget_http_header_callback	function
*	O
header_callback	pointer
=	O
NULL	O
;	O
va_list	array
args	array
;	O
const	O
char	O
*	O
url	pointer
=	O
NULL	O
,	O
*	O
url_encoding	pointer
=	O
NULL	O
,	O
*	O
scheme	enum
=	O
"GET"	pointer
;	O
const	O
char	O
*	O
http_username	pointer
=	O
NULL	O
,	O
*	O
http_password	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
saveas_name	pointer
=	O
NULL	O
;	O
int	O
key	int
,	O
it	int
,	O
max_redirections	int
=	O
5	int
,	O
redirection_level	int
=	O
0	int
;	O
size_t	long
bodylen	long
=	O
0	int
;	O
const	O
void	O
*	O
body	pointer
=	O
NULL	O
;	O
void	O
*	O
header_user_data	pointer
=	O
NULL	O
,	O
*	O
body_user_data	pointer
=	O
NULL	O
;	O
struct	O
{	O
bool	bool
cookies_enabled	bool
:	O
1	int
,	O
keep_header	bool
:	O
1	int
,	O
free_uri	bool
:	O
1	int
;	O
}	O
bits	int
=	O
{	O
.	O
cookies_enabled	bool
=	O
wget_global_get_int	function
(	O
WGET_COOKIES_ENABLED	int
)	O
!=	O
0	int
}	O
;	O
if	O
(	O
!	O
(	O
headers	pointer
=	O
wget_vector_create	function
(	O
8	int
,	O
NULL	O
)	O
)	O
)	O
{	O
debug_printf	O
(	O
"no memory\n"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
va_start	O
(	O
args	array
,	O
first_key	int
)	O
;	O
for	O
(	O
key	int
=	O
first_key	int
;	O
key	int
;	O
key	int
=	O
va_arg	O
(	O
args	array
,	O
int	O
)	O
)	O
{	O
switch	O
(	O
key	int
)	O
{	O
case	O
WGET_HTTP_URL	int
:	O
url	pointer
=	O
va_arg	O
(	O
args	array
,	O
const	O
char	O
*	O
)	O
;	O
break	O
;	O
case	O
WGET_HTTP_URI	int
:	O
uri	pointer
=	O
va_arg	O
(	O
args	array
,	O
wget_iri	struct
*	O
)	O
;	O
break	O
;	O
case	O
WGET_HTTP_URL_ENCODING	int
:	O
url_encoding	pointer
=	O
va_arg	O
(	O
args	array
,	O
const	O
char	O
*	O
)	O
;	O
break	O
;	O
case	O
WGET_HTTP_HEADER_ADD	int
:	O
{	O
wget_http_header_param	struct
param	pointer
=	O
{	O
.	O
name	pointer
=	O
va_arg	O
(	O
args	array
,	O
const	O
char	O
*	O
)	O
,	O
.	O
value	pointer
=	O
va_arg	O
(	O
args	array
,	O
const	O
char	O
*	O
)	O
}	O
;	O
if	O
(	O
wget_vector_add_memdup	function
(	O
headers	pointer
,	O
&	O
param	pointer
,	O
sizeof	O
(	O
param	pointer
)	O
)	O
<	O
0	int
)	O
{	O
va_end	O
(	O
args	array
)	O
;	O
goto	O
out	pointer
;	O
}	O
break	O
;	O
}	O
case	O
WGET_HTTP_CONNECTION_PTR	int
:	O
connp	pointer
=	O
va_arg	O
(	O
args	array
,	O
wget_http_connection	struct
*	O
*	O
)	O
;	O
if	O
(	O
connp	pointer
)	O
conn	pointer
=	O
*	O
connp	pointer
;	O
break	O
;	O
case	O
WGET_HTTP_RESPONSE_KEEPHEADER	int
:	O
bits	int
.	O
keep_header	bool
=	O
va_arg	O
(	O
args	array
,	O
int	O
)	O
;	O
break	O
;	O
case	O
WGET_HTTP_MAX_REDIRECTIONS	int
:	O
max_redirections	int
=	O
va_arg	O
(	O
args	array
,	O
int	O
)	O
;	O
break	O
;	O
case	O
WGET_HTTP_BODY_SAVEAS	int
:	O
saveas_name	pointer
=	O
va_arg	O
(	O
args	array
,	O
const	O
char	O
*	O
)	O
;	O
break	O
;	O
case	O
WGET_HTTP_BODY_SAVEAS_STREAM	int
:	O
saveas_stream	pointer
=	O
va_arg	O
(	O
args	array
,	O
FILE	struct
*	O
)	O
;	O
break	O
;	O
case	O
WGET_HTTP_BODY_SAVEAS_FUNC	int
:	O
saveas_callback	pointer
=	O
va_arg	O
(	O
args	array
,	O
wget_http_body_callback	function
*	O
)	O
;	O
body_user_data	pointer
=	O
va_arg	O
(	O
args	array
,	O
void	O
*	O
)	O
;	O
break	O
;	O
case	O
WGET_HTTP_BODY_SAVEAS_FD	int
:	O
saveas_fd	int
=	O
va_arg	O
(	O
args	array
,	O
int	O
)	O
;	O
break	O
;	O
case	O
WGET_HTTP_HEADER_FUNC	int
:	O
header_callback	pointer
=	O
va_arg	O
(	O
args	array
,	O
wget_http_header_callback	function
*	O
)	O
;	O
header_user_data	pointer
=	O
va_arg	O
(	O
args	array
,	O
void	O
*	O
)	O
;	O
break	O
;	O
case	O
WGET_HTTP_SCHEME	int
:	O
scheme	enum
=	O
va_arg	O
(	O
args	array
,	O
const	O
char	O
*	O
)	O
;	O
break	O
;	O
case	O
WGET_HTTP_BODY	int
:	O
body	pointer
=	O
va_arg	O
(	O
args	array
,	O
const	O
void	O
*	O
)	O
;	O
bodylen	long
=	O
va_arg	O
(	O
args	array
,	O
size_t	long
)	O
;	O
break	O
;	O
default	O
:	O
error_printf	O
(	O
_	O
(	O
"Unknown option %d\n"	pointer
)	O
,	O
key	int
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
goto	O
out	pointer
;	O
}	O
}	O
va_end	O
(	O
args	array
)	O
;	O
if	O
(	O
url	pointer
&&	O
!	O
uri	pointer
)	O
{	O
uri	pointer
=	O
wget_iri_parse	function
(	O
url	pointer
,	O
url_encoding	pointer
)	O
;	O
if	O
(	O
!	O
uri	pointer
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Error parsing URL\n"	pointer
)	O
)	O
;	O
goto	O
out	pointer
;	O
}	O
bits	int
.	O
free_uri	bool
=	O
1	int
;	O
}	O
if	O
(	O
!	O
uri	pointer
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Missing URL/URI\n"	pointer
)	O
)	O
;	O
goto	O
out	pointer
;	O
}	O
if	O
(	O
bits	int
.	O
cookies_enabled	bool
)	O
cookie_db	pointer
=	O
(	O
wget_cookie_db	struct
*	O
)	O
wget_global_get_ptr	function
(	O
WGET_COOKIE_DB	int
)	O
;	O
while	O
(	O
uri	pointer
&&	O
redirection_level	int
<=	O
max_redirections	int
)	O
{	O
req	pointer
=	O
wget_http_create_request	function
(	O
uri	pointer
,	O
scheme	enum
)	O
;	O
if	O
(	O
!	O
req	pointer
)	O
goto	O
out	pointer
;	O
for	O
(	O
it	int
=	O
0	int
;	O
it	int
<	O
wget_vector_size	function
(	O
headers	pointer
)	O
;	O
it	int
++	O
)	O
{	O
wget_http_add_header_param	function
(	O
req	pointer
,	O
wget_vector_get	function
(	O
headers	pointer
,	O
it	int
)	O
)	O
;	O
}	O
if	O
(	O
challenges	pointer
)	O
{	O
wget_http_add_credentials	function
(	O
req	pointer
,	O
wget_vector_get	function
(	O
challenges	pointer
,	O
0	int
)	O
,	O
http_username	pointer
,	O
http_password	pointer
,	O
0	int
)	O
;	O
wget_http_free_challenges	function
(	O
&	O
challenges	pointer
)	O
;	O
}	O
if	O
(	O
cookie_db	pointer
)	O
{	O
const	O
char	O
*	O
cookie_string	pointer
;	O
if	O
(	O
(	O
cookie_string	pointer
=	O
wget_cookie_create_request_header	function
(	O
cookie_db	pointer
,	O
uri	pointer
)	O
)	O
)	O
{	O
wget_http_add_header	function
(	O
req	pointer
,	O
"Cookie"	pointer
,	O
cookie_string	pointer
)	O
;	O
xfree	O
(	O
cookie_string	pointer
)	O
;	O
}	O
}	O
if	O
(	O
connp	pointer
)	O
{	O
wget_http_add_header	function
(	O
req	pointer
,	O
"Connection"	pointer
,	O
"keepalive"	pointer
)	O
;	O
}	O
if	O
(	O
conn	pointer
&&	O
!	O
wget_strcmp	function
(	O
conn	pointer
->	O
esc_host	struct
,	O
uri	pointer
->	O
host	pointer
)	O
&&	O
conn	pointer
->	O
scheme	enum
==	O
uri	pointer
->	O
scheme	enum
&&	O
conn	pointer
->	O
port	short
==	O
uri	pointer
->	O
port	short
)	O
{	O
debug_printf	O
(	O
"reuse connection %s\n"	pointer
,	O
conn	pointer
->	O
esc_host	struct
)	O
;	O
}	O
else	O
{	O
if	O
(	O
conn	pointer
)	O
{	O
debug_printf	O
(	O
"close connection %s\n"	pointer
,	O
conn	pointer
->	O
esc_host	struct
)	O
;	O
wget_http_close	function
(	O
&	O
conn	pointer
)	O
;	O
}	O
if	O
(	O
wget_http_open	function
(	O
&	O
conn	pointer
,	O
uri	pointer
)	O
==	O
WGET_E_SUCCESS	int
)	O
debug_printf	O
(	O
"opened connection %s\n"	pointer
,	O
conn	pointer
->	O
esc_host	struct
)	O
;	O
}	O
if	O
(	O
conn	pointer
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
body	pointer
&&	O
bodylen	long
)	O
wget_http_request_set_body	function
(	O
req	pointer
,	O
NULL	O
,	O
wget_memdup	function
(	O
body	pointer
,	O
bodylen	long
)	O
,	O
bodylen	long
)	O
;	O
rc	int
=	O
wget_http_send_request	function
(	O
conn	pointer
,	O
req	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
wget_http_request_set_header_cb	function
(	O
req	pointer
,	O
header_callback	pointer
,	O
header_user_data	pointer
)	O
;	O
wget_http_request_set_int	function
(	O
req	pointer
,	O
WGET_HTTP_RESPONSE_KEEPHEADER	int
,	O
1	int
)	O
;	O
if	O
(	O
saveas_name	pointer
)	O
{	O
FILE	struct
*	O
fp	pointer
;	O
if	O
(	O
(	O
fp	pointer
=	O
fopen	function
(	O
saveas_name	pointer
,	O
"wb"	pointer
)	O
)	O
)	O
{	O
wget_http_request_set_body_cb	function
(	O
req	pointer
,	O
_stream_callback	function
,	O
fp	pointer
)	O
;	O
resp	pointer
=	O
wget_http_get_response	function
(	O
conn	pointer
)	O
;	O
fclose	function
(	O
fp	pointer
)	O
;	O
}	O
else	O
debug_printf	O
(	O
"Failed to open '%s' for writing\n"	pointer
,	O
saveas_name	pointer
)	O
;	O
}	O
else	O
if	O
(	O
saveas_stream	pointer
)	O
{	O
wget_http_request_set_body_cb	function
(	O
req	pointer
,	O
_stream_callback	function
,	O
saveas_stream	pointer
)	O
;	O
resp	pointer
=	O
wget_http_get_response	function
(	O
conn	pointer
)	O
;	O
}	O
else	O
if	O
(	O
saveas_callback	pointer
)	O
{	O
wget_http_request_set_body_cb	function
(	O
req	pointer
,	O
saveas_callback	pointer
,	O
body_user_data	pointer
)	O
;	O
resp	pointer
=	O
wget_http_get_response	function
(	O
conn	pointer
)	O
;	O
}	O
else	O
if	O
(	O
saveas_fd	int
!=	O
-	O
1	int
)	O
{	O
wget_http_request_set_body_cb	function
(	O
req	pointer
,	O
_fd_callback	function
,	O
&	O
saveas_fd	int
)	O
;	O
resp	pointer
=	O
wget_http_get_response	function
(	O
conn	pointer
)	O
;	O
}	O
else	O
resp	pointer
=	O
wget_http_get_response	function
(	O
conn	pointer
)	O
;	O
}	O
}	O
wget_http_free_request	function
(	O
&	O
req	pointer
)	O
;	O
if	O
(	O
!	O
resp	pointer
)	O
goto	O
out	pointer
;	O
if	O
(	O
!	O
resp	pointer
->	O
keep_alive	char
)	O
wget_http_close	function
(	O
&	O
conn	pointer
)	O
;	O
if	O
(	O
cookie_db	pointer
)	O
{	O
wget_cookie_normalize_cookies	function
(	O
uri	pointer
,	O
resp	pointer
->	O
cookies	pointer
)	O
;	O
wget_cookie_store_cookies	function
(	O
cookie_db	pointer
,	O
resp	pointer
->	O
cookies	pointer
)	O
;	O
}	O
if	O
(	O
resp	pointer
->	O
code	short
==	O
401	int
&&	O
!	O
challenges	pointer
)	O
{	O
if	O
(	O
(	O
challenges	pointer
=	O
resp	pointer
->	O
challenges	pointer
)	O
)	O
{	O
resp	pointer
->	O
challenges	pointer
=	O
NULL	O
;	O
wget_http_free_response	function
(	O
&	O
resp	pointer
)	O
;	O
if	O
(	O
redirection_level	int
==	O
0	int
&&	O
max_redirections	int
)	O
{	O
redirection_level	int
=	O
max_redirections	int
;	O
continue	O
;	O
}	O
}	O
break	O
;	O
}	O
if	O
(	O
resp	pointer
->	O
code	short
/	O
100	int
==	O
2	int
||	O
resp	pointer
->	O
code	short
/	O
100	int
>=	O
4	int
||	O
resp	pointer
->	O
code	short
==	O
304	int
)	O
break	O
;	O
if	O
(	O
resp	pointer
->	O
location	pointer
)	O
{	O
char	O
uri_sbuf	array
[	O
1024	int
]	O
;	O
wget_buffer	struct
uri_buf	struct
;	O
wget_buffer_init	function
(	O
&	O
uri_buf	struct
,	O
uri_sbuf	array
,	O
sizeof	O
(	O
uri_sbuf	array
)	O
)	O
;	O
wget_iri_relative_to_abs	function
(	O
uri	pointer
,	O
resp	pointer
->	O
location	pointer
,	O
-	O
1	int
,	O
&	O
uri_buf	struct
)	O
;	O
if	O
(	O
bits	int
.	O
free_uri	bool
)	O
wget_iri_free	function
(	O
&	O
uri	pointer
)	O
;	O
uri	pointer
=	O
wget_iri_parse	function
(	O
uri_buf	struct
.	O
data	pointer
,	O
NULL	O
)	O
;	O
bits	int
.	O
free_uri	bool
=	O
1	int
;	O
wget_buffer_deinit	function
(	O
&	O
uri_buf	struct
)	O
;	O
redirection_level	int
++	O
;	O
continue	O
;	O
}	O
break	O
;	O
}	O
out	pointer
:	O
if	O
(	O
connp	pointer
)	O
{	O
*	O
connp	pointer
=	O
conn	pointer
;	O
}	O
else	O
{	O
wget_http_close	function
(	O
&	O
conn	pointer
)	O
;	O
}	O
wget_http_free_challenges	function
(	O
&	O
challenges	pointer
)	O
;	O
wget_vector_free	function
(	O
&	O
headers	pointer
)	O
;	O
if	O
(	O
bits	int
.	O
free_uri	bool
)	O
wget_iri_free	function
(	O
&	O
uri	pointer
)	O
;	O
return	O
resp	pointer
;	O
}	O