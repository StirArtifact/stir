static	O
bool	bool
extract_all	bool
=	O
false	int
;	O
static	O
hash_table	struct
keywords	struct
;	O
static	O
bool	bool
default_keywords	bool
=	O
true	int
;	O
void	O
x_lua_extract_all	function
(	O
)	O
{	O
extract_all	bool
=	O
true	int
;	O
}	O
void	O
x_lua_keyword	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
if	O
(	O
name	pointer
==	O
NULL	O
)	O
default_keywords	bool
=	O
false	int
;	O
else	O
{	O
const	O
char	O
*	O
end	pointer
;	O
struct	O
callshape	struct
shape	pointer
;	O
const	O
char	O
*	O
colon	pointer
;	O
if	O
(	O
keywords	struct
.	O
table	pointer
==	O
NULL	O
)	O
hash_init	function
(	O
&	O
keywords	struct
,	O
100	int
)	O
;	O
split_keywordspec	function
(	O
name	pointer
,	O
&	O
end	pointer
,	O
&	O
shape	pointer
)	O
;	O
colon	pointer
=	O
strchr	function
(	O
name	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
colon	pointer
==	O
NULL	O
||	O
colon	pointer
>=	O
end	pointer
)	O
insert_keyword_callshape	function
(	O
&	O
keywords	struct
,	O
name	pointer
,	O
end	pointer
-	O
name	pointer
,	O
&	O
shape	pointer
)	O
;	O
}	O
}	O
static	O
void	O
init_keywords	function
(	O
)	O
{	O
if	O
(	O
default_keywords	bool
)	O
{	O
x_lua_keyword	function
(	O
"_"	pointer
)	O
;	O
x_lua_keyword	function
(	O
"gettext.gettext"	pointer
)	O
;	O
x_lua_keyword	function
(	O
"gettext.dgettext:2"	pointer
)	O
;	O
x_lua_keyword	function
(	O
"gettext.dcgettext:2"	pointer
)	O
;	O
x_lua_keyword	function
(	O
"gettext.ngettext:1,2"	pointer
)	O
;	O
x_lua_keyword	function
(	O
"gettext.dngettext:2,3"	pointer
)	O
;	O
x_lua_keyword	function
(	O
"gettext.dcngettext:2,3"	pointer
)	O
;	O
default_keywords	bool
=	O
false	int
;	O
}	O
}	O
void	O
init_flag_table_lua	function
(	O
)	O
{	O
xgettext_record_flag	function
(	O
"_:1:pass-lua-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"gettext.gettext:1:pass-lua-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"gettext.dgettext:2:pass-lua-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"gettext.dcgettext:2:pass-lua-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"gettext.ngettext:1:pass-lua-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"gettext.ngettext:2:pass-lua-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"gettext.dngettext:2:pass-lua-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"gettext.dngettext:3:pass-lua-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"gettext.dcngettext:2:pass-lua-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"gettext.dcngettext:3:pass-lua-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"string.format:1:lua-format"	pointer
)	O
;	O
}	O
static	O
FILE	struct
*	O
fp	pointer
;	O
static	O
unsigned	O
char	O
phase1_pushback	array
[	O
2	int
]	O
;	O
static	O
int	O
phase1_pushback_length	int
;	O
static	O
int	O
first_character	int
=	O
1	int
;	O
static	O
int	O
phase1_getc	function
(	O
)	O
{	O
int	O
c	int
;	O
if	O
(	O
phase1_pushback_length	int
)	O
c	int
=	O
phase1_pushback	array
[	O
--	O
phase1_pushback_length	int
]	O
;	O
else	O
{	O
c	int
=	O
getc	function
(	O
fp	pointer
)	O
;	O
if	O
(	O
first_character	int
)	O
{	O
first_character	int
=	O
0	int
;	O
if	O
(	O
c	int
==	O
'#'	O
)	O
{	O
while	O
(	O
c	int
!=	O
'\n'	O
&&	O
c	int
!=	O
EOF	O
)	O
c	int
=	O
getc	function
(	O
fp	pointer
)	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
{	O
line_number	long
++	O
;	O
c	int
=	O
getc	function
(	O
fp	pointer
)	O
;	O
}	O
}	O
}	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
if	O
(	O
ferror	function
(	O
fp	pointer
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error while reading \"%s\""	pointer
)	O
,	O
real_file_name	pointer
)	O
;	O
return	O
EOF	O
;	O
}	O
}	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
line_number	long
++	O
;	O
return	O
c	int
;	O
}	O
static	O
void	O
phase1_ungetc	function
(	O
int	O
c	int
)	O
{	O
if	O
(	O
c	int
!=	O
EOF	O
)	O
{	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
--	O
line_number	long
;	O
if	O
(	O
phase1_pushback_length	int
==	O
SIZEOF	O
(	O
phase1_pushback	array
)	O
)	O
abort	function
(	O
)	O
;	O
phase1_pushback	array
[	O
phase1_pushback_length	int
++	O
]	O
=	O
c	int
;	O
}	O
}	O
static	O
int	O
last_comment_line	int
;	O
static	O
int	O
last_non_comment_line	int
;	O
static	O
char	O
*	O
buffer	pointer
;	O
static	O
size_t	long
bufmax	long
;	O
static	O
size_t	long
buflen	long
;	O
static	O
inline	O
void	O
comment_start	function
(	O
)	O
{	O
buflen	long
=	O
0	int
;	O
}	O
static	O
inline	O
void	O
comment_add	function
(	O
int	O
c	int
)	O
{	O
if	O
(	O
buflen	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	pointer
=	O
xrealloc	function
(	O
buffer	pointer
,	O
bufmax	long
)	O
;	O
}	O
buffer	pointer
[	O
buflen	long
++	O
]	O
=	O
c	int
;	O
}	O
static	O
inline	O
void	O
comment_line_end	function
(	O
size_t	long
chars_to_remove	long
)	O
{	O
buflen	long
-=	O
chars_to_remove	long
;	O
while	O
(	O
buflen	long
>=	O
1	int
&&	O
(	O
buffer	pointer
[	O
buflen	long
-	O
1	int
]	O
==	O
' '	O
||	O
buffer	pointer
[	O
buflen	long
-	O
1	int
]	O
==	O
'\t'	O
)	O
)	O
--	O
buflen	long
;	O
if	O
(	O
chars_to_remove	long
==	O
0	int
&&	O
buflen	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	pointer
=	O
xrealloc	function
(	O
buffer	pointer
,	O
bufmax	long
)	O
;	O
}	O
buffer	pointer
[	O
buflen	long
]	O
=	O
'\0'	O
;	O
savable_comment_add	function
(	O
buffer	pointer
)	O
;	O
}	O
static	O
void	O
eat_comment_line	function
(	O
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
EOF	O
)	O
{	O
comment_line_end	function
(	O
0	int
)	O
;	O
break	O
;	O
}	O
if	O
(	O
!	O
(	O
buflen	long
==	O
0	int
&&	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
)	O
)	O
)	O
comment_add	function
(	O
c	int
)	O
;	O
}	O
}	O
static	O
int	O
phase2_getc	function
(	O
)	O
{	O
int	O
c	int
;	O
int	O
lineno	int
;	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'-'	O
)	O
{	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'-'	O
)	O
{	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'['	O
)	O
{	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
int	O
esigns	int
=	O
0	int
;	O
while	O
(	O
c	int
==	O
'='	O
)	O
{	O
esigns	int
++	O
;	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
}	O
if	O
(	O
c	int
==	O
'['	O
)	O
{	O
bool	bool
right_bracket	bool
=	O
false	int
;	O
bool	bool
end	pointer
=	O
false	int
;	O
int	O
esigns2	int
=	O
0	int
;	O
lineno	int
=	O
line_number	long
;	O
comment_start	function
(	O
)	O
;	O
while	O
(	O
!	O
end	pointer
)	O
{	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
buflen	long
==	O
0	int
&&	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
)	O
)	O
continue	O
;	O
comment_add	function
(	O
c	int
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
']'	O
:	O
if	O
(	O
!	O
right_bracket	bool
)	O
{	O
right_bracket	bool
=	O
true	int
;	O
esigns2	int
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
esigns2	int
==	O
esigns	int
)	O
{	O
comment_line_end	function
(	O
2	int
+	O
esigns	int
)	O
;	O
end	pointer
=	O
true	int
;	O
}	O
}	O
break	O
;	O
case	O
'='	O
:	O
if	O
(	O
right_bracket	bool
)	O
esigns2	int
++	O
;	O
break	O
;	O
case	O
'\n'	O
:	O
comment_line_end	function
(	O
1	int
)	O
;	O
comment_start	function
(	O
)	O
;	O
lineno	int
=	O
line_number	long
;	O
default	O
:	O
right_bracket	bool
=	O
false	int
;	O
}	O
}	O
last_comment_line	int
=	O
lineno	int
;	O
return	O
' '	O
;	O
}	O
else	O
{	O
lineno	int
=	O
last_comment_line	int
;	O
comment_start	function
(	O
)	O
;	O
comment_add	function
(	O
'['	O
)	O
;	O
while	O
(	O
esigns	int
--	O
)	O
comment_add	function
(	O
'='	O
)	O
;	O
phase1_ungetc	function
(	O
c	int
)	O
;	O
eat_comment_line	function
(	O
)	O
;	O
last_comment_line	int
=	O
lineno	int
;	O
return	O
'\n'	O
;	O
}	O
}	O
else	O
{	O
lineno	int
=	O
line_number	long
;	O
comment_start	function
(	O
)	O
;	O
phase1_ungetc	function
(	O
c	int
)	O
;	O
eat_comment_line	function
(	O
)	O
;	O
last_comment_line	int
=	O
lineno	int
;	O
return	O
'\n'	O
;	O
}	O
}	O
else	O
{	O
phase1_ungetc	function
(	O
c	int
)	O
;	O
return	O
'-'	O
;	O
}	O
}	O
else	O
return	O
c	int
;	O
}	O
enum	O
token_type_ty	enum
{	O
token_type_eof	int
,	O
token_type_lparen	int
,	O
token_type_rparen	int
,	O
token_type_lbracket	int
,	O
token_type_rbracket	int
,	O
token_type_comma	int
,	O
token_type_dot	int
,	O
token_type_doubledot	int
,	O
token_type_operator1	int
,	O
token_type_operator2	int
,	O
token_type_string	int
,	O
token_type_number	int
,	O
token_type_symbol	int
,	O
token_type_other	int
}	O
;	O
typedef	O
enum	O
token_type_ty	enum
token_type_ty	enum
;	O
typedef	O
struct	O
token_ty	struct
token_ty	struct
;	O
struct	O
token_ty	struct
{	O
token_type_ty	enum
type	char
;	O
char	O
*	O
string	pointer
;	O
refcounted_string_list_ty	struct
*	O
comment	pointer
;	O
int	O
line_number	long
;	O
}	O
;	O
static	O
inline	O
void	O
free_token	function
(	O
token_ty	struct
*	O
tp	pointer
)	O
{	O
if	O
(	O
tp	pointer
->	O
type	char
==	O
token_type_string	int
||	O
tp	pointer
->	O
type	char
==	O
token_type_symbol	int
)	O
free	function
(	O
tp	pointer
->	O
string	pointer
)	O
;	O
if	O
(	O
tp	pointer
->	O
type	char
==	O
token_type_string	int
)	O
drop_reference	function
(	O
tp	pointer
->	O
comment	pointer
)	O
;	O
}	O
static	O
int	O
string_buf_length	int
;	O
static	O
int	O
string_buf_alloc	int
;	O
static	O
char	O
*	O
string_buf	pointer
;	O
static	O
void	O
string_start	function
(	O
)	O
{	O
string_buf_length	int
=	O
0	int
;	O
}	O
static	O
void	O
string_add	function
(	O
int	O
c	int
)	O
{	O
if	O
(	O
string_buf_length	int
>=	O
string_buf_alloc	int
)	O
{	O
string_buf_alloc	int
=	O
2	int
*	O
string_buf_alloc	int
+	O
10	int
;	O
string_buf	pointer
=	O
xrealloc	function
(	O
string_buf	pointer
,	O
string_buf_alloc	int
)	O
;	O
}	O
string_buf	pointer
[	O
string_buf_length	int
++	O
]	O
=	O
c	int
;	O
}	O
static	O
void	O
string_end	function
(	O
)	O
{	O
if	O
(	O
string_buf_length	int
>=	O
string_buf_alloc	int
)	O
{	O
string_buf_alloc	int
=	O
string_buf_alloc	int
+	O
1	int
;	O
string_buf	pointer
=	O
xrealloc	function
(	O
string_buf	pointer
,	O
string_buf_alloc	int
)	O
;	O
}	O
string_buf	pointer
[	O
string_buf_length	int
]	O
=	O
'\0'	O
;	O
}	O
static	O
int	O
phase3_pushback_length	int
;	O
static	O
token_ty	struct
phase3_pushback	array
[	O
3	int
]	O
;	O
static	O
void	O
phase3_unget	function
(	O
token_ty	struct
*	O
tp	pointer
)	O
{	O
if	O
(	O
tp	pointer
->	O
type	char
!=	O
token_type_eof	int
)	O
{	O
if	O
(	O
phase3_pushback_length	int
==	O
SIZEOF	O
(	O
phase3_pushback	array
)	O
)	O
abort	function
(	O
)	O
;	O
phase3_pushback	array
[	O
phase3_pushback_length	int
++	O
]	O
=	O
*	O
tp	pointer
;	O
}	O
}	O
static	O
void	O
phase3_get	function
(	O
token_ty	struct
*	O
tp	pointer
)	O
{	O
int	O
c	int
;	O
int	O
c2	int
;	O
int	O
c_start	int
;	O
if	O
(	O
phase3_pushback_length	int
)	O
{	O
*	O
tp	pointer
=	O
phase3_pushback	array
[	O
--	O
phase3_pushback_length	int
]	O
;	O
return	O
;	O
}	O
tp	pointer
->	O
string	pointer
=	O
NULL	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
tp	pointer
->	O
line_number	long
=	O
line_number	long
;	O
c	int
=	O
phase2_getc	function
(	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
EOF	O
:	O
tp	pointer
->	O
type	char
=	O
token_type_eof	int
;	O
return	O
;	O
case	O
'\n'	O
:	O
if	O
(	O
last_non_comment_line	int
>	O
last_comment_line	int
)	O
savable_comment_reset	function
(	O
)	O
;	O
case	O
' '	O
:	O
case	O
'\t'	O
:	O
case	O
'\f'	O
:	O
continue	O
;	O
case	O
'+'	O
:	O
case	O
'-'	O
:	O
case	O
'*'	O
:	O
case	O
'/'	O
:	O
case	O
'^'	O
:	O
case	O
'%'	O
:	O
case	O
'#'	O
:	O
tp	pointer
->	O
type	char
=	O
token_type_operator1	int
;	O
return	O
;	O
case	O
'<'	O
:	O
case	O
'>'	O
:	O
case	O
'='	O
:	O
c2	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c2	int
!=	O
'='	O
)	O
phase1_ungetc	function
(	O
c2	int
)	O
;	O
tp	pointer
->	O
type	char
=	O
token_type_operator2	int
;	O
return	O
;	O
case	O
'~'	O
:	O
c2	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c2	int
==	O
'='	O
)	O
{	O
tp	pointer
->	O
type	char
=	O
token_type_operator2	int
;	O
return	O
;	O
}	O
else	O
phase1_ungetc	function
(	O
c2	int
)	O
;	O
continue	O
;	O
case	O
'('	O
:	O
tp	pointer
->	O
type	char
=	O
token_type_lparen	int
;	O
return	O
;	O
case	O
')'	O
:	O
tp	pointer
->	O
type	char
=	O
token_type_rparen	int
;	O
return	O
;	O
case	O
','	O
:	O
tp	pointer
->	O
type	char
=	O
token_type_comma	int
;	O
return	O
;	O
case	O
';'	O
:	O
tp	pointer
->	O
type	char
=	O
token_type_other	int
;	O
return	O
;	O
case	O
'.'	O
:	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'.'	O
)	O
{	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'.'	O
)	O
{	O
tp	pointer
->	O
type	char
=	O
token_type_other	int
;	O
return	O
;	O
}	O
else	O
{	O
phase1_ungetc	function
(	O
c	int
)	O
;	O
tp	pointer
->	O
type	char
=	O
token_type_doubledot	int
;	O
return	O
;	O
}	O
}	O
else	O
if	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
{	O
phase1_ungetc	function
(	O
c	int
)	O
;	O
continue	O
;	O
}	O
else	O
{	O
phase1_ungetc	function
(	O
c	int
)	O
;	O
tp	pointer
->	O
type	char
=	O
token_type_dot	int
;	O
return	O
;	O
}	O
case	O
'"'	O
:	O
case	O
'\''	O
:	O
c_start	int
=	O
c	int
;	O
string_start	function
(	O
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'\\'	O
)	O
{	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
'a'	O
:	O
string_add	function
(	O
'\a'	O
)	O
;	O
break	O
;	O
case	O
'b'	O
:	O
string_add	function
(	O
'\b'	O
)	O
;	O
break	O
;	O
case	O
'f'	O
:	O
string_add	function
(	O
'\f'	O
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
string_add	function
(	O
'\n'	O
)	O
;	O
break	O
;	O
case	O
'r'	O
:	O
string_add	function
(	O
'\r'	O
)	O
;	O
break	O
;	O
case	O
't'	O
:	O
string_add	function
(	O
'\t'	O
)	O
;	O
break	O
;	O
case	O
'v'	O
:	O
string_add	function
(	O
'\v'	O
)	O
;	O
break	O
;	O
case	O
'x'	O
:	O
{	O
int	O
num	int
=	O
0	int
;	O
int	O
i	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
2	int
;	O
i	long
++	O
)	O
{	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
num	int
+=	O
c	int
-	O
'0'	O
;	O
else	O
if	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'f'	O
)	O
num	int
+=	O
c	int
-	O
'a'	O
+	O
10	int
;	O
else	O
if	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'F'	O
)	O
num	int
+=	O
c	int
-	O
'A'	O
+	O
10	int
;	O
else	O
{	O
phase1_ungetc	function
(	O
c	int
)	O
;	O
break	O
;	O
}	O
if	O
(	O
i	long
==	O
0	int
)	O
num	int
*=	O
16	int
;	O
}	O
if	O
(	O
i	long
==	O
2	int
)	O
string_add	function
(	O
num	int
)	O
;	O
}	O
break	O
;	O
case	O
'z'	O
:	O
do	O
{	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
}	O
while	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\r'	O
||	O
c	int
==	O
'\f'	O
||	O
c	int
==	O
'\v'	O
)	O
;	O
phase1_ungetc	function
(	O
c	int
)	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
{	O
int	O
num	int
=	O
0	int
;	O
int	O
i	long
=	O
0	int
;	O
while	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
&&	O
i	long
<	O
3	int
)	O
{	O
num	int
*=	O
10	int
;	O
num	int
+=	O
(	O
c	int
-	O
'0'	O
)	O
;	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
i	long
++	O
;	O
}	O
phase1_ungetc	function
(	O
c	int
)	O
;	O
if	O
(	O
num	int
<	O
256	int
)	O
string_add	function
(	O
num	int
)	O
;	O
}	O
else	O
string_add	function
(	O
c	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
c	int
==	O
c_start	int
||	O
c	int
==	O
EOF	O
||	O
c	int
==	O
'\n'	O
)	O
{	O
string_end	function
(	O
)	O
;	O
tp	pointer
->	O
string	pointer
=	O
xstrdup	function
(	O
string_buf	pointer
)	O
;	O
tp	pointer
->	O
comment	pointer
=	O
add_reference	function
(	O
savable_comment	pointer
)	O
;	O
tp	pointer
->	O
type	char
=	O
token_type_string	int
;	O
return	O
;	O
}	O
else	O
string_add	function
(	O
c	int
)	O
;	O
}	O
break	O
;	O
case	O
'['	O
:	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
int	O
esigns	int
=	O
0	int
;	O
while	O
(	O
c	int
==	O
'='	O
)	O
{	O
esigns	int
++	O
;	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
}	O
if	O
(	O
c	int
!=	O
'['	O
)	O
{	O
phase1_ungetc	function
(	O
c	int
)	O
;	O
if	O
(	O
esigns	int
==	O
0	int
)	O
{	O
tp	pointer
->	O
type	char
=	O
token_type_lbracket	int
;	O
return	O
;	O
}	O
else	O
continue	O
;	O
}	O
string_start	function
(	O
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
']'	O
)	O
{	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
int	O
esigns2	int
=	O
0	int
;	O
while	O
(	O
c	int
==	O
'='	O
)	O
{	O
esigns2	int
++	O
;	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
}	O
if	O
(	O
c	int
==	O
']'	O
&&	O
esigns	int
==	O
esigns2	int
)	O
{	O
string_end	function
(	O
)	O
;	O
tp	pointer
->	O
string	pointer
=	O
xstrdup	function
(	O
string_buf	pointer
)	O
;	O
tp	pointer
->	O
comment	pointer
=	O
add_reference	function
(	O
savable_comment	pointer
)	O
;	O
tp	pointer
->	O
type	char
=	O
token_type_string	int
;	O
return	O
;	O
}	O
else	O
{	O
phase1_ungetc	function
(	O
c	int
)	O
;	O
string_add	function
(	O
']'	O
)	O
;	O
while	O
(	O
esigns2	int
--	O
)	O
string_add	function
(	O
'='	O
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
string_end	function
(	O
)	O
;	O
tp	pointer
->	O
string	pointer
=	O
xstrdup	function
(	O
string_buf	pointer
)	O
;	O
tp	pointer
->	O
comment	pointer
=	O
add_reference	function
(	O
savable_comment	pointer
)	O
;	O
tp	pointer
->	O
type	char
=	O
token_type_string	int
;	O
return	O
;	O
}	O
else	O
string_add	function
(	O
c	int
)	O
;	O
}	O
}	O
break	O
;	O
case	O
']'	O
:	O
tp	pointer
->	O
type	char
=	O
token_type_rbracket	int
;	O
return	O
;	O
default	O
:	O
if	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
{	O
while	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'.'	O
)	O
{	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
while	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
}	O
if	O
(	O
c	int
==	O
'e'	O
||	O
c	int
==	O
'E'	O
)	O
{	O
if	O
(	O
c	int
==	O
'+'	O
||	O
c	int
==	O
'-'	O
)	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
while	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
}	O
phase1_ungetc	function
(	O
c	int
)	O
;	O
tp	pointer
->	O
type	char
=	O
token_type_number	int
;	O
return	O
;	O
}	O
else	O
if	O
(	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'z'	O
)	O
||	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'Z'	O
)	O
||	O
c	int
==	O
'_'	O
)	O
{	O
string_start	function
(	O
)	O
;	O
while	O
(	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'z'	O
)	O
||	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'Z'	O
)	O
||	O
c	int
==	O
'_'	O
||	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
)	O
{	O
string_add	function
(	O
c	int
)	O
;	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
}	O
string_end	function
(	O
)	O
;	O
phase1_ungetc	function
(	O
c	int
)	O
;	O
if	O
(	O
strcmp	function
(	O
string_buf	pointer
,	O
"not"	pointer
)	O
==	O
0	int
)	O
tp	pointer
->	O
type	char
=	O
token_type_operator1	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
string_buf	pointer
,	O
"and"	pointer
)	O
==	O
0	int
)	O
tp	pointer
->	O
type	char
=	O
token_type_operator2	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
string_buf	pointer
,	O
"or"	pointer
)	O
==	O
0	int
)	O
tp	pointer
->	O
type	char
=	O
token_type_operator2	int
;	O
else	O
{	O
tp	pointer
->	O
string	pointer
=	O
xstrdup	function
(	O
string_buf	pointer
)	O
;	O
tp	pointer
->	O
type	char
=	O
token_type_symbol	int
;	O
}	O
return	O
;	O
}	O
else	O
tp	pointer
->	O
type	char
=	O
token_type_other	int
;	O
}	O
}	O
}	O
static	O
token_type_ty	enum
phase4_last	enum
;	O
static	O
int	O
phase4_pushback_length	int
;	O
static	O
token_ty	struct
phase4_pushback	array
[	O
3	int
]	O
;	O
static	O
void	O
phase4_unget	function
(	O
token_ty	struct
*	O
tp	pointer
)	O
{	O
if	O
(	O
tp	pointer
->	O
type	char
!=	O
token_type_eof	int
)	O
{	O
if	O
(	O
phase4_pushback_length	int
==	O
SIZEOF	O
(	O
phase4_pushback	array
)	O
)	O
abort	function
(	O
)	O
;	O
phase4_pushback	array
[	O
phase4_pushback_length	int
++	O
]	O
=	O
*	O
tp	pointer
;	O
}	O
}	O
static	O
void	O
phase4_get	function
(	O
token_ty	struct
*	O
tp	pointer
)	O
{	O
if	O
(	O
phase4_pushback_length	int
)	O
{	O
*	O
tp	pointer
=	O
phase4_pushback	array
[	O
--	O
phase4_pushback_length	int
]	O
;	O
phase4_last	enum
=	O
tp	pointer
->	O
type	char
;	O
return	O
;	O
}	O
phase3_get	function
(	O
tp	pointer
)	O
;	O
if	O
(	O
tp	pointer
->	O
type	char
==	O
token_type_string	int
&&	O
!	O
(	O
phase4_last	enum
==	O
token_type_operator1	int
||	O
phase4_last	enum
==	O
token_type_dot	int
||	O
phase4_last	enum
==	O
token_type_symbol	int
||	O
phase4_last	enum
==	O
token_type_doubledot	int
||	O
phase4_last	enum
==	O
token_type_rparen	int
)	O
)	O
{	O
char	O
*	O
sum	pointer
=	O
tp	pointer
->	O
string	pointer
;	O
size_t	long
sum_len	long
=	O
strlen	function
(	O
sum	pointer
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
token_ty	struct
token2	struct
;	O
phase3_get	function
(	O
&	O
token2	struct
)	O
;	O
if	O
(	O
token2	struct
.	O
type	char
==	O
token_type_doubledot	int
)	O
{	O
token_ty	struct
token3	struct
;	O
phase3_get	function
(	O
&	O
token3	struct
)	O
;	O
if	O
(	O
token3	struct
.	O
type	char
==	O
token_type_string	int
)	O
{	O
token_ty	struct
token_after	struct
;	O
phase3_get	function
(	O
&	O
token_after	struct
)	O
;	O
if	O
(	O
token_after	struct
.	O
type	char
!=	O
token_type_operator1	int
)	O
{	O
char	O
*	O
addend	pointer
=	O
token3	struct
.	O
string	pointer
;	O
size_t	long
addend_len	long
=	O
strlen	function
(	O
addend	pointer
)	O
;	O
sum	pointer
=	O
(	O
char	O
*	O
)	O
xrealloc	function
(	O
sum	pointer
,	O
sum_len	long
+	O
addend_len	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
sum	pointer
+	O
sum_len	long
,	O
addend	pointer
,	O
addend_len	long
+	O
1	int
)	O
;	O
sum_len	long
+=	O
addend_len	long
;	O
phase3_unget	function
(	O
&	O
token_after	struct
)	O
;	O
free_token	function
(	O
&	O
token3	struct
)	O
;	O
free_token	function
(	O
&	O
token2	struct
)	O
;	O
continue	O
;	O
}	O
phase3_unget	function
(	O
&	O
token_after	struct
)	O
;	O
}	O
phase3_unget	function
(	O
&	O
token3	struct
)	O
;	O
}	O
phase3_unget	function
(	O
&	O
token2	struct
)	O
;	O
break	O
;	O
}	O
tp	pointer
->	O
string	pointer
=	O
sum	pointer
;	O
}	O
phase4_last	enum
=	O
tp	pointer
->	O
type	char
;	O
}	O
static	O
void	O
phase5_get	function
(	O
token_ty	struct
*	O
tp	pointer
)	O
{	O
phase4_get	function
(	O
tp	pointer
)	O
;	O
if	O
(	O
tp	pointer
->	O
type	char
==	O
token_type_symbol	int
)	O
{	O
char	O
*	O
sum	pointer
=	O
tp	pointer
->	O
string	pointer
;	O
size_t	long
sum_len	long
=	O
strlen	function
(	O
sum	pointer
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
token_ty	struct
token2	struct
;	O
phase4_get	function
(	O
&	O
token2	struct
)	O
;	O
if	O
(	O
token2	struct
.	O
type	char
==	O
token_type_dot	int
)	O
{	O
token_ty	struct
token3	struct
;	O
phase4_get	function
(	O
&	O
token3	struct
)	O
;	O
if	O
(	O
token3	struct
.	O
type	char
==	O
token_type_symbol	int
)	O
{	O
char	O
*	O
addend	pointer
=	O
token3	struct
.	O
string	pointer
;	O
size_t	long
addend_len	long
=	O
strlen	function
(	O
addend	pointer
)	O
;	O
sum	pointer
=	O
(	O
char	O
*	O
)	O
xrealloc	function
(	O
sum	pointer
,	O
sum_len	long
+	O
1	int
+	O
addend_len	long
+	O
1	int
)	O
;	O
sum	pointer
[	O
sum_len	long
]	O
=	O
'.'	O
;	O
memcpy	function
(	O
sum	pointer
+	O
sum_len	long
+	O
1	int
,	O
addend	pointer
,	O
addend_len	long
+	O
1	int
)	O
;	O
sum_len	long
+=	O
1	int
+	O
addend_len	long
;	O
free_token	function
(	O
&	O
token2	struct
)	O
;	O
free_token	function
(	O
&	O
token3	struct
)	O
;	O
continue	O
;	O
}	O
phase4_unget	function
(	O
&	O
token3	struct
)	O
;	O
}	O
phase4_unget	function
(	O
&	O
token2	struct
)	O
;	O
break	O
;	O
}	O
tp	pointer
->	O
string	pointer
=	O
sum	pointer
;	O
}	O
}	O
static	O
void	O
x_lua_lex	function
(	O
token_ty	struct
*	O
tok	pointer
)	O
{	O
phase5_get	function
(	O
tok	pointer
)	O
;	O
}	O
static	O
flag_context_list_table_ty	struct
*	O
flag_context_list_table	pointer
;	O
static	O
bool	bool
extract_balanced	function
(	O
message_list_ty	struct
*	O
mlp	pointer
,	O
token_type_ty	enum
delim	enum
,	O
flag_context_ty	struct
outer_context	struct
,	O
flag_context_list_iterator_ty	struct
context_iter	struct
,	O
struct	O
arglist_parser	struct
*	O
argparser	pointer
)	O
{	O
int	O
arg	int
=	O
1	int
;	O
int	O
state	pointer
;	O
const	O
struct	O
callshapes	struct
*	O
next_shapes	pointer
=	O
NULL	O
;	O
flag_context_list_iterator_ty	struct
next_context_iter	struct
=	O
passthrough_context_list_iterator	struct
;	O
flag_context_ty	struct
inner_context	struct
=	O
inherited_context	function
(	O
outer_context	struct
,	O
flag_context_list_iterator_advance	function
(	O
&	O
context_iter	struct
)	O
)	O
;	O
state	pointer
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
token_ty	struct
token	struct
;	O
x_lua_lex	function
(	O
&	O
token	struct
)	O
;	O
switch	O
(	O
token	struct
.	O
type	char
)	O
{	O
case	O
token_type_symbol	int
:	O
{	O
void	O
*	O
keyword_value	pointer
;	O
if	O
(	O
hash_find_entry	function
(	O
&	O
keywords	struct
,	O
token	struct
.	O
string	pointer
,	O
strlen	function
(	O
token	struct
.	O
string	pointer
)	O
,	O
&	O
keyword_value	pointer
)	O
==	O
0	int
)	O
{	O
next_shapes	pointer
=	O
(	O
const	O
struct	O
callshapes	struct
*	O
)	O
keyword_value	pointer
;	O
state	pointer
=	O
1	int
;	O
}	O
else	O
state	pointer
=	O
0	int
;	O
}	O
next_context_iter	struct
=	O
flag_context_list_iterator	function
(	O
flag_context_list_table_lookup	function
(	O
flag_context_list_table	pointer
,	O
token	struct
.	O
string	pointer
,	O
strlen	function
(	O
token	struct
.	O
string	pointer
)	O
)	O
)	O
;	O
free	function
(	O
token	struct
.	O
string	pointer
)	O
;	O
continue	O
;	O
case	O
token_type_lparen	int
:	O
if	O
(	O
extract_balanced	function
(	O
mlp	pointer
,	O
token_type_rparen	int
,	O
inner_context	struct
,	O
next_context_iter	struct
,	O
arglist_parser_alloc	function
(	O
mlp	pointer
,	O
state	pointer
?	O
next_shapes	pointer
:	O
NULL	O
)	O
)	O
)	O
{	O
arglist_parser_done	function
(	O
argparser	pointer
,	O
arg	int
)	O
;	O
return	O
true	int
;	O
}	O
next_context_iter	struct
=	O
null_context_list_iterator	struct
;	O
state	pointer
=	O
0	int
;	O
break	O
;	O
case	O
token_type_rparen	int
:	O
if	O
(	O
delim	enum
==	O
token_type_rparen	int
||	O
delim	enum
==	O
token_type_eof	int
)	O
{	O
arglist_parser_done	function
(	O
argparser	pointer
,	O
arg	int
)	O
;	O
return	O
false	int
;	O
}	O
next_context_iter	struct
=	O
null_context_list_iterator	struct
;	O
state	pointer
=	O
0	int
;	O
continue	O
;	O
case	O
token_type_lbracket	int
:	O
if	O
(	O
extract_balanced	function
(	O
mlp	pointer
,	O
token_type_rbracket	int
,	O
null_context	struct
,	O
null_context_list_iterator	struct
,	O
arglist_parser_alloc	function
(	O
mlp	pointer
,	O
NULL	O
)	O
)	O
)	O
{	O
arglist_parser_done	function
(	O
argparser	pointer
,	O
arg	int
)	O
;	O
return	O
true	int
;	O
}	O
next_context_iter	struct
=	O
null_context_list_iterator	struct
;	O
state	pointer
=	O
0	int
;	O
break	O
;	O
case	O
token_type_rbracket	int
:	O
if	O
(	O
delim	enum
==	O
token_type_rbracket	int
||	O
delim	enum
==	O
token_type_eof	int
)	O
{	O
arglist_parser_done	function
(	O
argparser	pointer
,	O
arg	int
)	O
;	O
return	O
false	int
;	O
}	O
next_context_iter	struct
=	O
null_context_list_iterator	struct
;	O
state	pointer
=	O
0	int
;	O
continue	O
;	O
case	O
token_type_comma	int
:	O
arg	int
++	O
;	O
inner_context	struct
=	O
inherited_context	function
(	O
outer_context	struct
,	O
flag_context_list_iterator_advance	function
(	O
&	O
context_iter	struct
)	O
)	O
;	O
next_context_iter	struct
=	O
passthrough_context_list_iterator	struct
;	O
state	pointer
=	O
0	int
;	O
continue	O
;	O
case	O
token_type_eof	int
:	O
arglist_parser_done	function
(	O
argparser	pointer
,	O
arg	int
)	O
;	O
return	O
true	int
;	O
case	O
token_type_string	int
:	O
{	O
lex_pos_ty	struct
pos	struct
;	O
pos	struct
.	O
file_name	pointer
=	O
logical_file_name	pointer
;	O
pos	struct
.	O
line_number	long
=	O
token	struct
.	O
line_number	long
;	O
if	O
(	O
extract_all	bool
)	O
remember_a_message	function
(	O
mlp	pointer
,	O
NULL	O
,	O
token	struct
.	O
string	pointer
,	O
false	int
,	O
inner_context	struct
,	O
&	O
pos	struct
,	O
NULL	O
,	O
token	struct
.	O
comment	pointer
,	O
false	int
)	O
;	O
else	O
{	O
mixed_string_ty	struct
*	O
ms	pointer
=	O
mixed_string_alloc_simple	function
(	O
token	struct
.	O
string	pointer
,	O
lc_string	int
,	O
pos	struct
.	O
file_name	pointer
,	O
pos	struct
.	O
line_number	long
)	O
;	O
free	function
(	O
token	struct
.	O
string	pointer
)	O
;	O
if	O
(	O
state	pointer
)	O
{	O
struct	O
arglist_parser	struct
*	O
tmp_argparser	pointer
;	O
tmp_argparser	pointer
=	O
arglist_parser_alloc	function
(	O
mlp	pointer
,	O
next_shapes	pointer
)	O
;	O
arglist_parser_remember	function
(	O
tmp_argparser	pointer
,	O
1	int
,	O
ms	pointer
,	O
inner_context	struct
,	O
pos	struct
.	O
file_name	pointer
,	O
pos	struct
.	O
line_number	long
,	O
token	struct
.	O
comment	pointer
,	O
false	int
)	O
;	O
arglist_parser_done	function
(	O
tmp_argparser	pointer
,	O
1	int
)	O
;	O
}	O
else	O
arglist_parser_remember	function
(	O
argparser	pointer
,	O
arg	int
,	O
ms	pointer
,	O
inner_context	struct
,	O
pos	struct
.	O
file_name	pointer
,	O
pos	struct
.	O
line_number	long
,	O
token	struct
.	O
comment	pointer
,	O
false	int
)	O
;	O
}	O
}	O
drop_reference	function
(	O
token	struct
.	O
comment	pointer
)	O
;	O
next_context_iter	struct
=	O
null_context_list_iterator	struct
;	O
state	pointer
=	O
0	int
;	O
continue	O
;	O
case	O
token_type_dot	int
:	O
case	O
token_type_doubledot	int
:	O
case	O
token_type_operator1	int
:	O
case	O
token_type_operator2	int
:	O
case	O
token_type_number	int
:	O
case	O
token_type_other	int
:	O
next_context_iter	struct
=	O
null_context_list_iterator	struct
;	O
state	pointer
=	O
0	int
;	O
continue	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
}	O
void	O
extract_lua	function
(	O
FILE	struct
*	O
f	pointer
,	O
const	O
char	O
*	O
real_filename	pointer
,	O
const	O
char	O
*	O
logical_filename	pointer
,	O
flag_context_list_table_ty	struct
*	O
flag_table	pointer
,	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
)	O
{	O
message_list_ty	struct
*	O
mlp	pointer
=	O
mdlp	pointer
->	O
item	pointer
[	O
0	int
]	O
->	O
messages	pointer
;	O
fp	pointer
=	O
f	pointer
;	O
real_file_name	pointer
=	O
real_filename	pointer
;	O
logical_file_name	pointer
=	O
xstrdup	function
(	O
logical_filename	pointer
)	O
;	O
line_number	long
=	O
1	int
;	O
last_comment_line	int
=	O
-	O
1	int
;	O
last_non_comment_line	int
=	O
-	O
1	int
;	O
flag_context_list_table	pointer
=	O
flag_table	pointer
;	O
init_keywords	function
(	O
)	O
;	O
while	O
(	O
!	O
extract_balanced	function
(	O
mlp	pointer
,	O
token_type_eof	int
,	O
null_context	struct
,	O
null_context_list_iterator	struct
,	O
arglist_parser_alloc	function
(	O
mlp	pointer
,	O
NULL	O
)	O
)	O
)	O
;	O
fp	pointer
=	O
NULL	O
;	O
real_file_name	pointer
=	O
NULL	O
;	O
logical_file_name	pointer
=	O
NULL	O
;	O
line_number	long
=	O
0	int
;	O
}	O
