char	O
pop_docstring	array
[	O
]	O
=	O
N_	O
(	O
"POP3 client shell"	pointer
)	O
;	O
static	O
mu_pop3_t	pointer
pop3	pointer
;	O
enum	O
pop_session_status	enum
{	O
pop_session_disconnected	int
,	O
pop_session_connected	int
,	O
pop_session_logged_in	int
}	O
;	O
static	O
enum	O
pop_session_status	enum
pop_session_status	enum
;	O
static	O
int	O
connect_argc	int
;	O
static	O
char	O
*	O
*	O
connect_argv	pointer
;	O
static	O
int	O
port	int
=	O
110	int
;	O
static	O
char	O
*	O
username	pointer
;	O
const	O
char	O
*	O
pop_session_str	function
(	O
enum	O
pop_session_status	enum
stat	pointer
)	O
{	O
switch	O
(	O
stat	pointer
)	O
{	O
case	O
pop_session_disconnected	int
:	O
return	O
"disconnected"	pointer
;	O
case	O
pop_session_connected	int
:	O
return	O
"connected"	pointer
;	O
case	O
pop_session_logged_in	int
:	O
return	O
"logged in"	pointer
;	O
}	O
return	O
"unknown"	pointer
;	O
}	O
static	O
void	O
pop_prompt_env	function
(	O
void	O
)	O
{	O
mu_assoc_t	pointer
assoc	pointer
=	O
mutool_shell_prompt_assoc	function
(	O
)	O
;	O
if	O
(	O
pop_session_status	enum
==	O
pop_session_logged_in	int
)	O
mu_assoc_install	function
(	O
assoc	pointer
,	O
"user"	pointer
,	O
username	pointer
)	O
;	O
if	O
(	O
pop_session_status	enum
!=	O
pop_session_disconnected	int
)	O
mu_assoc_install	function
(	O
assoc	pointer
,	O
"host"	pointer
,	O
host	pointer
)	O
;	O
mu_assoc_install	function
(	O
assoc	pointer
,	O
"status"	pointer
,	O
(	O
void	O
*	O
)	O
pop_session_str	function
(	O
pop_session_status	enum
)	O
)	O
;	O
}	O
static	O
void	O
pop_set_verbose	function
(	O
void	O
)	O
{	O
if	O
(	O
pop3	pointer
)	O
{	O
if	O
(	O
QRY_VERBOSE	O
(	O
)	O
)	O
mu_pop3_trace	function
(	O
pop3	pointer
,	O
MU_POP3_TRACE_SET	int
)	O
;	O
else	O
mu_pop3_trace	function
(	O
pop3	pointer
,	O
MU_POP3_TRACE_CLR	int
)	O
;	O
}	O
}	O
static	O
void	O
pop_set_verbose_mask	function
(	O
void	O
)	O
{	O
if	O
(	O
pop3	pointer
)	O
{	O
mu_pop3_trace_mask	function
(	O
pop3	pointer
,	O
QRY_VERBOSE_MASK	O
(	O
MU_XSCRIPT_SECURE	int
)	O
?	O
MU_POP3_TRACE_SET	int
:	O
MU_POP3_TRACE_CLR	int
,	O
MU_XSCRIPT_SECURE	int
)	O
;	O
mu_pop3_trace_mask	function
(	O
pop3	pointer
,	O
QRY_VERBOSE_MASK	O
(	O
MU_XSCRIPT_PAYLOAD	int
)	O
?	O
MU_POP3_TRACE_SET	int
:	O
MU_POP3_TRACE_CLR	int
,	O
MU_XSCRIPT_PAYLOAD	int
)	O
;	O
}	O
}	O
static	O
int	O
com_verbose	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
return	O
shell_verbose	function
(	O
argc	long
,	O
argv	pointer
,	O
pop_set_verbose	function
,	O
pop_set_verbose_mask	function
)	O
;	O
}	O
static	O
int	O
com_user	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
status	int
;	O
status	int
=	O
mu_pop3_user	function
(	O
pop3	pointer
,	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
username	pointer
=	O
mu_strdup	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
pop_prompt_env	function
(	O
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
com_apop	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
status	int
;	O
char	O
*	O
pwd	pointer
,	O
*	O
passbuf	pointer
=	O
NULL	O
;	O
if	O
(	O
argc	long
==	O
3	int
)	O
pwd	pointer
=	O
argv	pointer
[	O
2	int
]	O
;	O
else	O
if	O
(	O
!	O
mutool_shell_interactive	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"apop: password required"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
else	O
{	O
status	int
=	O
mu_getpass	function
(	O
mu_strin	pointer
,	O
mu_strout	pointer
,	O
"Password:"	pointer
,	O
&	O
passbuf	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
pwd	pointer
=	O
passbuf	pointer
;	O
}	O
status	int
=	O
mu_pop3_apop	function
(	O
pop3	pointer
,	O
argv	pointer
[	O
1	int
]	O
,	O
pwd	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
username	pointer
=	O
mu_strdup	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
pop_session_status	enum
=	O
pop_session_logged_in	int
;	O
}	O
free	function
(	O
passbuf	pointer
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
com_capa	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
mu_iterator_t	pointer
iterator	pointer
=	O
NULL	O
;	O
int	O
status	int
=	O
0	int
;	O
int	O
reread	int
=	O
0	int
;	O
int	O
i	long
=	O
1	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"-reread"	pointer
)	O
==	O
0	int
)	O
reread	int
=	O
1	int
;	O
else	O
break	O
;	O
}	O
if	O
(	O
i	long
<	O
argc	long
)	O
{	O
if	O
(	O
reread	int
)	O
{	O
status	int
=	O
mu_pop3_capa	function
(	O
pop3	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
}	O
for	O
(	O
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
const	O
char	O
*	O
elt	pointer
;	O
int	O
rc	int
=	O
mu_pop3_capa_test	function
(	O
pop3	pointer
,	O
argv	pointer
[	O
i	long
]	O
,	O
&	O
elt	pointer
)	O
;	O
switch	O
(	O
rc	int
)	O
{	O
case	O
0	int
:	O
if	O
(	O
*	O
elt	pointer
)	O
mu_printf	function
(	O
"%s: %s\n"	pointer
,	O
argv	pointer
[	O
i	long
]	O
,	O
elt	pointer
)	O
;	O
else	O
mu_printf	function
(	O
"%s is set\n"	pointer
,	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
break	O
;	O
case	O
MU_ERR_NOENT	O
:	O
mu_printf	function
(	O
"%s is not set\n"	pointer
,	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
break	O
;	O
default	O
:	O
return	O
rc	int
;	O
}	O
}	O
}	O
else	O
{	O
status	int
=	O
mu_pop3_capa	function
(	O
pop3	pointer
,	O
reread	int
,	O
&	O
iterator	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
for	O
(	O
mu_iterator_first	function
(	O
iterator	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
iterator	pointer
)	O
;	O
mu_iterator_next	function
(	O
iterator	pointer
)	O
)	O
{	O
char	O
*	O
capa	pointer
=	O
NULL	O
;	O
mu_iterator_current	function
(	O
iterator	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
capa	pointer
)	O
;	O
mu_printf	function
(	O
"CAPA: %s\n"	pointer
,	O
mu_prstr	function
(	O
capa	pointer
)	O
)	O
;	O
}	O
mu_iterator_destroy	function
(	O
&	O
iterator	pointer
)	O
;	O
}	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
com_uidl	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
argc	long
==	O
1	int
)	O
{	O
mu_stream_t	pointer
out	pointer
=	O
mutool_open_pager	function
(	O
)	O
;	O
mu_iterator_t	pointer
uidl_iterator	pointer
=	O
NULL	O
;	O
status	int
=	O
mu_pop3_uidl_all	function
(	O
pop3	pointer
,	O
&	O
uidl_iterator	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
for	O
(	O
mu_iterator_first	function
(	O
uidl_iterator	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
uidl_iterator	pointer
)	O
;	O
mu_iterator_next	function
(	O
uidl_iterator	pointer
)	O
)	O
{	O
char	O
*	O
uidl	array
=	O
NULL	O
;	O
mu_iterator_current	function
(	O
uidl_iterator	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
uidl	array
)	O
;	O
mu_stream_printf	function
(	O
out	pointer
,	O
"UIDL: %s\n"	pointer
,	O
mu_prstr	function
(	O
uidl	array
)	O
)	O
;	O
}	O
mu_iterator_destroy	function
(	O
&	O
uidl_iterator	pointer
)	O
;	O
}	O
mu_stream_destroy	function
(	O
&	O
out	pointer
)	O
;	O
}	O
else	O
{	O
char	O
*	O
uidl	array
=	O
NULL	O
;	O
unsigned	O
int	O
msgno	long
=	O
strtoul	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
NULL	O
,	O
10	int
)	O
;	O
status	int
=	O
mu_pop3_uidl	function
(	O
pop3	pointer
,	O
msgno	long
,	O
&	O
uidl	array
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
mu_printf	function
(	O
"Msg: %d UIDL: %s\n"	pointer
,	O
msgno	long
,	O
mu_prstr	function
(	O
uidl	array
)	O
)	O
;	O
free	function
(	O
uidl	array
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
com_list	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
argc	long
==	O
1	int
)	O
{	O
mu_stream_t	pointer
out	pointer
=	O
mutool_open_pager	function
(	O
)	O
;	O
mu_iterator_t	pointer
list_iterator	pointer
;	O
status	int
=	O
mu_pop3_list_all	function
(	O
pop3	pointer
,	O
&	O
list_iterator	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
for	O
(	O
mu_iterator_first	function
(	O
list_iterator	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
list_iterator	pointer
)	O
;	O
mu_iterator_next	function
(	O
list_iterator	pointer
)	O
)	O
{	O
char	O
*	O
list	pointer
=	O
NULL	O
;	O
mu_iterator_current	function
(	O
list_iterator	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
list	pointer
)	O
;	O
mu_stream_printf	function
(	O
out	pointer
,	O
"LIST: %s\n"	pointer
,	O
mu_prstr	function
(	O
list	pointer
)	O
)	O
;	O
}	O
mu_iterator_destroy	function
(	O
&	O
list_iterator	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
out	pointer
)	O
;	O
}	O
}	O
else	O
{	O
size_t	long
size	long
=	O
0	int
;	O
unsigned	O
int	O
msgno	long
=	O
strtoul	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
NULL	O
,	O
10	int
)	O
;	O
status	int
=	O
mu_pop3_list	function
(	O
pop3	pointer
,	O
msgno	long
,	O
&	O
size	long
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
mu_printf	function
(	O
"Msg: %u Size: %lu\n"	pointer
,	O
msgno	long
,	O
(	O
unsigned	O
long	O
)	O
size	long
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
com_noop	function
(	O
int	O
argc	long
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
argv	pointer
MU_ARG_UNUSED	O
)	O
{	O
return	O
mu_pop3_noop	function
(	O
pop3	pointer
)	O
;	O
}	O
static	O
int	O
com_pass	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
status	int
;	O
char	O
*	O
pwd	pointer
,	O
*	O
passbuf	pointer
=	O
NULL	O
;	O
if	O
(	O
argc	long
==	O
1	int
)	O
{	O
if	O
(	O
!	O
mutool_shell_interactive	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"pass: password required"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
status	int
=	O
mu_getpass	function
(	O
mu_strin	pointer
,	O
mu_strout	pointer
,	O
"Password:"	pointer
,	O
&	O
passbuf	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
pwd	pointer
=	O
passbuf	pointer
;	O
}	O
else	O
pwd	pointer
=	O
argv	pointer
[	O
1	int
]	O
;	O
status	int
=	O
mu_pop3_pass	function
(	O
pop3	pointer
,	O
pwd	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
pop_session_status	enum
=	O
pop_session_logged_in	int
;	O
pop_prompt_env	function
(	O
)	O
;	O
}	O
free	function
(	O
passbuf	pointer
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
com_stat	function
(	O
int	O
argc	long
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
argv	pointer
MU_ARG_UNUSED	O
)	O
{	O
size_t	long
count	long
=	O
0	int
;	O
mu_off_t	long
size	long
=	O
0	int
;	O
int	O
status	int
=	O
0	int
;	O
status	int
=	O
mu_pop3_stat	function
(	O
pop3	pointer
,	O
&	O
count	long
,	O
&	O
size	long
)	O
;	O
mu_printf	function
(	O
"Mesgs: %lu Size %lu\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
count	long
,	O
(	O
unsigned	O
long	O
)	O
size	long
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
com_stls	function
(	O
int	O
argc	long
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
argv	pointer
MU_ARG_UNUSED	O
)	O
{	O
return	O
mu_pop3_stls	function
(	O
pop3	pointer
)	O
;	O
}	O
static	O
int	O
com_dele	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
unsigned	O
msgno	long
;	O
msgno	long
=	O
strtoul	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
NULL	O
,	O
10	int
)	O
;	O
return	O
mu_pop3_dele	function
(	O
pop3	pointer
,	O
msgno	long
)	O
;	O
}	O
static	O
int	O
com_rset	function
(	O
int	O
argc	long
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
argv	pointer
MU_ARG_UNUSED	O
)	O
{	O
return	O
mu_pop3_rset	function
(	O
pop3	pointer
)	O
;	O
}	O
static	O
int	O
com_top	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
mu_stream_t	pointer
stream	pointer
;	O
unsigned	O
int	O
msgno	long
;	O
unsigned	O
int	O
lines	int
;	O
int	O
status	int
;	O
msgno	long
=	O
strtoul	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
argc	long
==	O
3	int
)	O
lines	int
=	O
strtoul	function
(	O
argv	pointer
[	O
2	int
]	O
,	O
NULL	O
,	O
10	int
)	O
;	O
else	O
lines	int
=	O
5	int
;	O
status	int
=	O
mu_pop3_top	function
(	O
pop3	pointer
,	O
msgno	long
,	O
lines	int
,	O
&	O
stream	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
mu_stream_t	pointer
out	pointer
=	O
mutool_open_pager	function
(	O
)	O
;	O
mu_stream_copy	function
(	O
out	pointer
,	O
stream	pointer
,	O
0	int
,	O
NULL	O
)	O
;	O
mu_stream_destroy	function
(	O
&	O
out	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
stream	pointer
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
com_retr	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
mu_stream_t	pointer
stream	pointer
;	O
unsigned	O
int	O
msgno	long
;	O
int	O
status	int
;	O
msgno	long
=	O
strtoul	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
NULL	O
,	O
10	int
)	O
;	O
status	int
=	O
mu_pop3_retr	function
(	O
pop3	pointer
,	O
msgno	long
,	O
&	O
stream	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
mu_stream_t	pointer
out	pointer
=	O
mutool_open_pager	function
(	O
)	O
;	O
mu_stream_copy	function
(	O
out	pointer
,	O
stream	pointer
,	O
0	int
,	O
NULL	O
)	O
;	O
mu_stream_destroy	function
(	O
&	O
out	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
stream	pointer
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
com_disconnect	function
(	O
int	O
argc	long
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
argv	pointer
MU_ARG_UNUSED	O
)	O
{	O
if	O
(	O
pop3	pointer
)	O
{	O
mu_pop3_disconnect	function
(	O
pop3	pointer
)	O
;	O
mu_pop3_destroy	function
(	O
&	O
pop3	pointer
)	O
;	O
pop3	pointer
=	O
NULL	O
;	O
mu_argcv_free	function
(	O
connect_argc	int
,	O
connect_argv	pointer
)	O
;	O
connect_argc	int
=	O
0	int
;	O
connect_argv	pointer
=	O
NULL	O
;	O
pop_session_status	enum
=	O
pop_session_disconnected	int
;	O
pop_prompt_env	function
(	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
com_connect	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
status	int
;	O
int	O
tls	int
=	O
0	int
;	O
int	O
i	long
=	O
1	int
;	O
int	O
n	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"-tls"	pointer
)	O
==	O
0	int
)	O
{	O
mu_error	function
(	O
"TLS not supported"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
else	O
break	O
;	O
}	O
argc	long
-=	O
i	long
;	O
argv	pointer
+=	O
i	long
;	O
if	O
(	O
pop_session_status	enum
!=	O
pop_session_disconnected	int
)	O
com_disconnect	function
(	O
0	int
,	O
NULL	O
)	O
;	O
status	int
=	O
mu_pop3_create	function
(	O
&	O
pop3	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
mu_stream_t	pointer
tcp	pointer
;	O
struct	O
mu_sockaddr	struct
*	O
sa	pointer
;	O
struct	O
mu_sockaddr_hints	struct
hints	pointer
;	O
if	O
(	O
QRY_VERBOSE	O
(	O
)	O
)	O
{	O
pop_set_verbose	function
(	O
)	O
;	O
pop_set_verbose_mask	function
(	O
)	O
;	O
}	O
memset	function
(	O
&	O
hints	pointer
,	O
0	int
,	O
sizeof	O
(	O
hints	pointer
)	O
)	O
;	O
hints	pointer
.	O
flags	int
=	O
MU_AH_DETECT_FAMILY	int
;	O
hints	pointer
.	O
port	int
=	O
tls	int
?	O
MU_POP3_DEFAULT_SSL_PORT	int
:	O
MU_POP3_DEFAULT_PORT	int
;	O
hints	pointer
.	O
protocol	int
=	O
IPPROTO_TCP	int
;	O
hints	pointer
.	O
socktype	int
=	O
SOCK_STREAM	int
;	O
status	int
=	O
mu_sockaddr_from_node	function
(	O
&	O
sa	pointer
,	O
argv	pointer
[	O
0	int
]	O
,	O
argv	pointer
[	O
1	int
]	O
,	O
&	O
hints	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
n	pointer
=	O
port_from_sa	function
(	O
sa	pointer
)	O
;	O
status	int
=	O
mu_tcp_stream_create_from_sa	function
(	O
&	O
tcp	pointer
,	O
sa	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
status	int
)	O
mu_sockaddr_free	function
(	O
sa	pointer
)	O
;	O
}	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
mu_pop3_set_carrier	function
(	O
pop3	pointer
,	O
tcp	pointer
)	O
;	O
status	int
=	O
mu_pop3_connect	function
(	O
pop3	pointer
)	O
;	O
}	O
else	O
{	O
mu_pop3_destroy	function
(	O
&	O
pop3	pointer
)	O
;	O
pop3	pointer
=	O
NULL	O
;	O
}	O
}	O
if	O
(	O
status	int
)	O
mu_error	function
(	O
"Failed to create pop3: %s"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
else	O
{	O
connect_argc	int
=	O
argc	long
;	O
connect_argv	pointer
=	O
mu_calloc	function
(	O
argc	long
+	O
1	int
,	O
sizeof	O
(	O
*	O
connect_argv	pointer
)	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
connect_argv	pointer
[	O
i	long
]	O
=	O
mu_strdup	function
(	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
connect_argv	pointer
[	O
i	long
]	O
=	O
NULL	O
;	O
port	int
=	O
n	pointer
;	O
pop_session_status	enum
=	O
pop_session_connected	int
;	O
pop_prompt_env	function
(	O
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
com_quit	function
(	O
int	O
argc	long
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
argv	pointer
MU_ARG_UNUSED	O
)	O
{	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
pop3	pointer
)	O
{	O
if	O
(	O
mu_pop3_quit	function
(	O
pop3	pointer
)	O
==	O
0	int
)	O
{	O
status	int
=	O
com_disconnect	function
(	O
0	int
,	O
NULL	O
)	O
;	O
}	O
else	O
{	O
mu_printf	function
(	O
"Try 'exit' to leave %s\n"	pointer
,	O
mu_program_name	pointer
)	O
;	O
}	O
}	O
else	O
mu_printf	function
(	O
"Try 'exit' to leave %s\n"	pointer
,	O
mu_program_name	pointer
)	O
;	O
return	O
status	int
;	O
}	O
struct	O
mutool_command	struct
pop_comtab	array
[	O
]	O
=	O
{	O
{	O
"apop"	pointer
,	O
2	int
,	O
3	int
,	O
0	int
,	O
com_apop	function
,	O
N_	O
(	O
"USER [PASS]"	pointer
)	O
,	O
N_	O
(	O
"authenticate with APOP"	pointer
)	O
}	O
,	O
{	O
"capa"	pointer
,	O
1	int
,	O
-	O
1	int
,	O
0	int
,	O
com_capa	function
,	O
N_	O
(	O
"[-reread] [NAME...]"	pointer
)	O
,	O
N_	O
(	O
"list server capabilities"	pointer
)	O
}	O
,	O
{	O
"disconnect"	pointer
,	O
1	int
,	O
1	int
,	O
0	int
,	O
com_disconnect	function
,	O
NULL	O
,	O
N_	O
(	O
"close connection"	pointer
)	O
}	O
,	O
{	O
"dele"	pointer
,	O
2	int
,	O
2	int
,	O
0	int
,	O
com_dele	function
,	O
N_	O
(	O
"NUMBER"	pointer
)	O
,	O
N_	O
(	O
"mark message for deletion"	pointer
)	O
}	O
,	O
{	O
"list"	pointer
,	O
1	int
,	O
2	int
,	O
0	int
,	O
com_list	function
,	O
N_	O
(	O
"[NUMBER]"	pointer
)	O
,	O
N_	O
(	O
"list messages"	pointer
)	O
}	O
,	O
{	O
"noop"	pointer
,	O
1	int
,	O
1	int
,	O
0	int
,	O
com_noop	function
,	O
NULL	O
,	O
N_	O
(	O
"send a \"no operation\""	pointer
)	O
}	O
,	O
{	O
"pass"	pointer
,	O
1	int
,	O
2	int
,	O
0	int
,	O
com_pass	function
,	O
N_	O
(	O
"[PASSWORD]"	pointer
)	O
,	O
N_	O
(	O
"user password"	pointer
)	O
}	O
,	O
{	O
"connect"	pointer
,	O
1	int
,	O
4	int
,	O
0	int
,	O
com_connect	function
,	O
N_	O
(	O
"[-tls] HOSTNAME [PORT]"	pointer
)	O
,	O
N_	O
(	O
"open connection"	pointer
)	O
}	O
,	O
{	O
"quit"	pointer
,	O
1	int
,	O
1	int
,	O
0	int
,	O
com_quit	function
,	O
NULL	O
,	O
N_	O
(	O
"quit pop3 session"	pointer
)	O
}	O
,	O
{	O
"retr"	pointer
,	O
2	int
,	O
2	int
,	O
0	int
,	O
com_retr	function
,	O
"NUMBER"	pointer
,	O
N_	O
(	O
"retrieve a message"	pointer
)	O
}	O
,	O
{	O
"rset"	pointer
,	O
1	int
,	O
1	int
,	O
0	int
,	O
com_rset	function
,	O
NULL	O
,	O
N_	O
(	O
"remove deletion marks"	pointer
)	O
}	O
,	O
{	O
"stat"	pointer
,	O
1	int
,	O
1	int
,	O
0	int
,	O
com_stat	function
,	O
NULL	O
,	O
N_	O
(	O
"get the mailbox size and number of messages in it"	pointer
)	O
}	O
,	O
{	O
"stls"	pointer
,	O
1	int
,	O
1	int
,	O
0	int
,	O
com_stls	function
,	O
NULL	O
,	O
N_	O
(	O
"start TLS negotiation"	pointer
)	O
}	O
,	O
{	O
"top"	pointer
,	O
2	int
,	O
3	int
,	O
0	int
,	O
com_top	function
,	O
"MSGNO [NUMBER]"	pointer
,	O
N_	O
(	O
"display message headers and first NUMBER (default 5) lines of"	pointer
" its body"	pointer
)	O
}	O
,	O
{	O
"uidl"	pointer
,	O
1	int
,	O
2	int
,	O
0	int
,	O
com_uidl	function
,	O
N_	O
(	O
"[NUMBER]"	pointer
)	O
,	O
N_	O
(	O
"show unique message identifiers"	pointer
)	O
}	O
,	O
{	O
"user"	pointer
,	O
2	int
,	O
2	int
,	O
0	int
,	O
com_user	function
,	O
N_	O
(	O
"NAME"	pointer
)	O
,	O
N_	O
(	O
"send login"	pointer
)	O
}	O
,	O
{	O
"verbose"	pointer
,	O
1	int
,	O
4	int
,	O
0	int
,	O
com_verbose	function
,	O
"[on|off|mask|unmask] [secure [payload]]"	pointer
,	O
N_	O
(	O
"control the protocol tracing"	pointer
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
int	O
main	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
mu_registrar_record	function
(	O
mu_pop_record	pointer
)	O
;	O
mu_registrar_record	function
(	O
mu_pops_record	pointer
)	O
;	O
mu_action_getopt	function
(	O
&	O
argc	long
,	O
&	O
argv	pointer
,	O
NULL	O
,	O
pop_docstring	array
,	O
NULL	O
)	O
;	O
if	O
(	O
argc	long
)	O
{	O
mu_error	function
(	O
_	O
(	O
"too many arguments"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
mutool_shell_prompt	pointer
=	O
mu_strdup	function
(	O
"pop> "	pointer
)	O
;	O
pop_prompt_env	function
(	O
)	O
;	O
mutool_shell	function
(	O
"pop"	pointer
,	O
pop_comtab	array
)	O
;	O
return	O
0	int
;	O
}	O
