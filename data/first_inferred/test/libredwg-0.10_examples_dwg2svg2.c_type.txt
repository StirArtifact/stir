static	O
int	O
opts	int
=	O
0	int
;	O
static	O
dwg_data	struct
g_dwg	struct
;	O
static	O
double	O
model_xmin	double
,	O
model_ymin	double
;	O
static	O
double	O
page_width	double
,	O
page_height	double
,	O
scale	struct
;	O
static	O
int	O
usage	function
(	O
void	O
)	O
{	O
printf	function
(	O
"\nUsage: dwg2svg2 [-v[0-9]] DWGFILE\n"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
static	O
int	O
opt_version	function
(	O
void	O
)	O
{	O
printf	function
(	O
"dwg2svg2 %s\n"	pointer
,	O
PACKAGE_VERSION	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
help	function
(	O
void	O
)	O
{	O
printf	function
(	O
"\nUsage: dwg2svg2 [OPTION]... DWGFILE >file.svg\n"	pointer
)	O
;	O
printf	function
(	O
"Example to use the DWG api\n"	pointer
"\n"	pointer
)	O
;	O
printf	function
(	O
"  -v[0-9], --verbose [0-9]  verbosity\n"	pointer
)	O
;	O
printf	function
(	O
"           --help           display this help and exit\n"	pointer
)	O
;	O
printf	function
(	O
"           --version        output version information and exit\n"	pointer
"\n"	pointer
)	O
;	O
printf	function
(	O
"GNU LibreDWG online manual: "	pointer
"<https://www.gnu.org/software/libredwg/>\n"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
double	O
transform_X	function
(	O
double	O
x	double
)	O
{	O
return	O
x	double
-	O
model_xmin	double
;	O
}	O
static	O
double	O
transform_Y	function
(	O
double	O
y	double
)	O
{	O
return	O
page_height	double
-	O
(	O
y	double
-	O
model_ymin	double
)	O
;	O
}	O
static	O
void	O
output_SVG	function
(	O
dwg_data	struct
*	O
dwg	pointer
)	O
;	O
static	O
int	O
test_SVG	function
(	O
char	O
*	O
filename	pointer
)	O
{	O
int	O
error	pointer
;	O
memset	function
(	O
&	O
g_dwg	struct
,	O
0	int
,	O
sizeof	O
(	O
dwg_data	struct
)	O
)	O
;	O
g_dwg	struct
.	O
opts	int
=	O
opts	int
;	O
error	pointer
=	O
dwg_read_file	function
(	O
filename	pointer
,	O
&	O
g_dwg	struct
)	O
;	O
if	O
(	O
error	pointer
<	O
DWG_ERR_CRITICAL	O
)	O
output_SVG	function
(	O
&	O
g_dwg	struct
)	O
;	O
dwg_free	function
(	O
&	O
g_dwg	struct
)	O
;	O
return	O
error	pointer
<	O
DWG_ERR_CRITICAL	O
?	O
0	int
:	O
1	int
;	O
}	O
static	O
void	O
output_TEXT	function
(	O
dwg_object	struct
*	O
obj	pointer
)	O
{	O
int	O
error	pointer
,	O
index	short
;	O
dwg_point_2d	struct
ins_pt	struct
;	O
Dwg_Entity_TEXT	struct
*	O
text	pointer
;	O
char	O
*	O
text_value	pointer
;	O
double	O
fontsize	double
;	O
const	O
Dwg_Version_Type	enum
dwg_version	int
=	O
obj	pointer
->	O
parent	pointer
->	O
header	struct
.	O
version	short
;	O
int	O
isnew	int
=	O
0	int
;	O
index	short
=	O
dwg_object_get_index	function
(	O
obj	pointer
,	O
&	O
error	pointer
)	O
;	O
log_if_error	O
(	O
"object_get_index"	pointer
)	O
;	O
text	pointer
=	O
dwg_object_to_TEXT	function
(	O
obj	pointer
)	O
;	O
if	O
(	O
!	O
text	pointer
)	O
log_error	O
(	O
"dwg_object_to_TEXT"	pointer
)	O
;	O
dynget_utf8	O
(	O
text	pointer
,	O
"TEXT"	pointer
,	O
"text_value"	pointer
,	O
&	O
text_value	pointer
)	O
;	O
dynget	O
(	O
text	pointer
,	O
"TEXT"	pointer
,	O
"insertion_pt"	pointer
,	O
&	O
ins_pt	struct
)	O
;	O
dynget	O
(	O
text	pointer
,	O
"TEXT"	pointer
,	O
"height"	pointer
,	O
&	O
fontsize	double
)	O
;	O
printf	function
(	O
"\t<text id=\"dwg-object-%d\" x=\"%f\" y=\"%f\" "	pointer
"font-family=\"Verdana\" font-size=\"%f\" fill=\"blue\">%s</text>\n"	pointer
,	O
index	short
,	O
transform_X	function
(	O
ins_pt	struct
.	O
x	double
)	O
,	O
transform_Y	function
(	O
ins_pt	struct
.	O
y	double
)	O
,	O
fontsize	double
,	O
text_value	pointer
)	O
;	O
if	O
(	O
text_value	pointer
&&	O
isnew	int
)	O
free	function
(	O
text_value	pointer
)	O
;	O
}	O
static	O
void	O
output_LINE	function
(	O
dwg_object	struct
*	O
obj	pointer
)	O
{	O
int	O
error	pointer
,	O
index	short
;	O
Dwg_Entity_LINE	struct
*	O
line	pointer
;	O
dwg_point_3d	struct
start	struct
,	O
end	struct
;	O
index	short
=	O
dwg_object_get_index	function
(	O
obj	pointer
,	O
&	O
error	pointer
)	O
;	O
log_if_error	O
(	O
"object_get_index"	pointer
)	O
;	O
line	pointer
=	O
dwg_object_to_LINE	function
(	O
obj	pointer
)	O
;	O
if	O
(	O
!	O
line	pointer
)	O
log_error	O
(	O
"dwg_object_to_LINE"	pointer
)	O
;	O
if	O
(	O
!	O
dwg_get_LINE	function
(	O
line	pointer
,	O
"start"	pointer
,	O
&	O
start	struct
)	O
)	O
log_error	O
(	O
"LINE.start"	pointer
)	O
;	O
if	O
(	O
!	O
dwg_get_LINE	function
(	O
line	pointer
,	O
"end"	pointer
,	O
&	O
end	struct
)	O
)	O
log_error	O
(	O
"LINE.end"	pointer
)	O
;	O
printf	function
(	O
"\t<path id=\"dwg-object-%d\" d=\"M %f,%f %f,%f\" "	pointer
"style=\"fill:none;stroke:blue;stroke-width:0.1px\" />\n"	pointer
,	O
index	short
,	O
transform_X	function
(	O
start	struct
.	O
x	double
)	O
,	O
transform_Y	function
(	O
start	struct
.	O
y	double
)	O
,	O
transform_X	function
(	O
end	struct
.	O
x	double
)	O
,	O
transform_Y	function
(	O
end	struct
.	O
y	double
)	O
)	O
;	O
}	O
static	O
void	O
output_CIRCLE	function
(	O
dwg_object	struct
*	O
obj	pointer
)	O
{	O
Dwg_Entity_CIRCLE	struct
*	O
circle	pointer
;	O
int	O
error	pointer
,	O
index	short
;	O
double	O
radius	double
;	O
dwg_point_3d	struct
center	struct
;	O
index	short
=	O
dwg_object_get_index	function
(	O
obj	pointer
,	O
&	O
error	pointer
)	O
;	O
log_if_error	O
(	O
"object_get_index"	pointer
)	O
;	O
circle	pointer
=	O
dwg_object_to_CIRCLE	function
(	O
obj	pointer
)	O
;	O
if	O
(	O
!	O
circle	pointer
)	O
log_error	O
(	O
"dwg_object_to_CIRCLE"	pointer
)	O
;	O
if	O
(	O
!	O
dwg_get_CIRCLE	function
(	O
circle	pointer
,	O
"center"	pointer
,	O
&	O
center	struct
)	O
)	O
log_error	O
(	O
"CIRCLE.center"	pointer
)	O
;	O
if	O
(	O
!	O
dwg_get_CIRCLE	function
(	O
circle	pointer
,	O
"radius"	pointer
,	O
&	O
radius	double
)	O
)	O
log_error	O
(	O
"CIRCLE.radius"	pointer
)	O
;	O
printf	function
(	O
"\t<circle id=\"dwg-object-%d\" cx=\"%f\" cy=\"%f\" r=\"%f\" "	pointer
"fill=\"none\" stroke=\"blue\" stroke-width=\"0.1px\" />\n"	pointer
,	O
index	short
,	O
transform_X	function
(	O
center	struct
.	O
x	double
)	O
,	O
transform_Y	function
(	O
center	struct
.	O
y	double
)	O
,	O
radius	double
)	O
;	O
}	O
static	O
void	O
output_ARC	function
(	O
dwg_object	struct
*	O
obj	pointer
)	O
{	O
Dwg_Entity_ARC	struct
*	O
arc	pointer
;	O
int	O
error	pointer
,	O
index	short
;	O
double	O
radius	double
,	O
start_angle	double
,	O
end_angle	double
;	O
dwg_point_3d	struct
center	struct
;	O
double	O
x_start	double
,	O
y_start	double
,	O
x_end	double
,	O
y_end	double
;	O
int	O
large_arc	int
;	O
index	short
=	O
dwg_object_get_index	function
(	O
obj	pointer
,	O
&	O
error	pointer
)	O
;	O
log_if_error	O
(	O
"object_get_index"	pointer
)	O
;	O
arc	pointer
=	O
dwg_object_to_ARC	function
(	O
obj	pointer
)	O
;	O
if	O
(	O
!	O
arc	pointer
)	O
log_error	O
(	O
"dwg_object_to_ARC"	pointer
)	O
;	O
dynget	O
(	O
arc	pointer
,	O
"ARC"	pointer
,	O
"radius"	pointer
,	O
&	O
radius	double
)	O
;	O
dynget	O
(	O
arc	pointer
,	O
"ARC"	pointer
,	O
"center"	pointer
,	O
&	O
center	struct
)	O
;	O
dynget	O
(	O
arc	pointer
,	O
"ARC"	pointer
,	O
"start_angle"	pointer
,	O
&	O
start_angle	double
)	O
;	O
dynget	O
(	O
arc	pointer
,	O
"ARC"	pointer
,	O
"end_angle"	pointer
,	O
&	O
end_angle	double
)	O
;	O
x_start	double
=	O
center	struct
.	O
x	double
+	O
radius	double
*	O
cos	function
(	O
start_angle	double
)	O
;	O
y_start	double
=	O
center	struct
.	O
y	double
+	O
radius	double
*	O
sin	function
(	O
start_angle	double
)	O
;	O
x_end	double
=	O
center	struct
.	O
x	double
+	O
radius	double
*	O
cos	function
(	O
end_angle	double
)	O
;	O
y_end	double
=	O
center	struct
.	O
y	double
+	O
radius	double
*	O
sin	function
(	O
end_angle	double
)	O
;	O
large_arc	int
=	O
(	O
end_angle	double
-	O
start_angle	double
<	O
M_PI	int
)	O
?	O
0	int
:	O
1	int
;	O
printf	function
(	O
"\t<path id=\"dwg-object-%d\" d=\"M %f,%f A %f,%f 0 %d 0 %f,%f\" "	pointer
"fill=\"none\" stroke=\"blue\" stroke-width=\"%f\" />\n"	pointer
,	O
index	short
,	O
transform_X	function
(	O
x_start	double
)	O
,	O
transform_Y	function
(	O
y_start	double
)	O
,	O
radius	double
,	O
radius	double
,	O
large_arc	int
,	O
transform_X	function
(	O
x_end	double
)	O
,	O
transform_Y	function
(	O
y_end	double
)	O
,	O
0.1	int
)	O
;	O
}	O
static	O
void	O
output_INSERT	function
(	O
dwg_object	struct
*	O
obj	pointer
)	O
{	O
int	O
index	short
,	O
error	pointer
;	O
BITCODE_RL	int
abs_ref	int
;	O
double	O
rotation	double
;	O
dwg_ent_insert	struct
*	O
insert	pointer
;	O
dwg_point_3d	struct
ins_pt	struct
,	O
_scale	struct
;	O
dwg_handle	struct
*	O
obj_handle	pointer
,	O
*	O
ins_handle	pointer
;	O
insert	pointer
=	O
dwg_object_to_INSERT	function
(	O
obj	pointer
)	O
;	O
if	O
(	O
!	O
insert	pointer
)	O
log_error	O
(	O
"dwg_object_to_INSERT"	pointer
)	O
;	O
index	short
=	O
dwg_object_get_index	function
(	O
obj	pointer
,	O
&	O
error	pointer
)	O
;	O
log_if_error	O
(	O
"object_get_index"	pointer
)	O
;	O
dynget	O
(	O
insert	pointer
,	O
"INSERT"	pointer
,	O
"rotation"	pointer
,	O
&	O
rotation	double
)	O
;	O
dynget	O
(	O
insert	pointer
,	O
"INSERT"	pointer
,	O
"ins_pt"	pointer
,	O
&	O
ins_pt	struct
)	O
;	O
dynget	O
(	O
insert	pointer
,	O
"INSERT"	pointer
,	O
"scale"	pointer
,	O
&	O
_scale	struct
)	O
;	O
obj_handle	pointer
=	O
dwg_object_get_handle	function
(	O
obj	pointer
,	O
&	O
error	pointer
)	O
;	O
log_if_error	O
(	O
"get_handle"	pointer
)	O
;	O
if	O
(	O
!	O
insert	pointer
->	O
block_header	pointer
)	O
log_error	O
(	O
"insert->block_header"	pointer
)	O
;	O
abs_ref	int
=	O
insert	pointer
->	O
block_header	pointer
->	O
absolute_ref	long
;	O
if	O
(	O
insert	pointer
->	O
block_header	pointer
->	O
handleref	struct
.	O
code	char
==	O
5	int
)	O
{	O
printf	function
(	O
"\t<use id=\"dwg-object-%d\" transform=\"translate(%f %f) "	pointer
"rotate(%f) scale(%f %f)\" xlink:href=\"#symbol-%X\" /><!-- "	pointer
"block_header->handleref: "	pointer
FORMAT_H	pointer
" -->\n"	pointer
,	O
index	short
,	O
transform_X	function
(	O
ins_pt	struct
.	O
x	double
)	O
,	O
transform_Y	function
(	O
ins_pt	struct
.	O
y	double
)	O
,	O
(	O
180.0	int
/	O
M_PI	int
)	O
*	O
rotation	double
,	O
_scale	struct
.	O
x	double
,	O
_scale	struct
.	O
y	double
,	O
abs_ref	int
,	O
ARGS_H	O
(	O
*	O
obj_handle	pointer
)	O
)	O
;	O
}	O
else	O
{	O
printf	function
(	O
"\n\n<!-- WRONG INSERT("	pointer
FORMAT_H	pointer
") -->\n"	pointer
,	O
ARGS_H	O
(	O
*	O
obj_handle	pointer
)	O
)	O
;	O
}	O
}	O
static	O
void	O
output_object	function
(	O
dwg_object	struct
*	O
obj	pointer
)	O
{	O
if	O
(	O
!	O
obj	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"object is NULL\n"	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
dwg_object_get_type	function
(	O
obj	pointer
)	O
==	O
DWG_TYPE_INSERT	int
)	O
{	O
output_INSERT	function
(	O
obj	pointer
)	O
;	O
}	O
if	O
(	O
dwg_object_get_type	function
(	O
obj	pointer
)	O
==	O
DWG_TYPE_LINE	int
)	O
{	O
output_LINE	function
(	O
obj	pointer
)	O
;	O
}	O
if	O
(	O
dwg_object_get_type	function
(	O
obj	pointer
)	O
==	O
DWG_TYPE_CIRCLE	int
)	O
{	O
output_CIRCLE	function
(	O
obj	pointer
)	O
;	O
}	O
if	O
(	O
dwg_object_get_type	function
(	O
obj	pointer
)	O
==	O
DWG_TYPE_TEXT	int
)	O
{	O
output_TEXT	function
(	O
obj	pointer
)	O
;	O
}	O
if	O
(	O
dwg_object_get_type	function
(	O
obj	pointer
)	O
==	O
DWG_TYPE_ARC	int
)	O
{	O
output_ARC	function
(	O
obj	pointer
)	O
;	O
}	O
}	O
static	O
void	O
output_BLOCK_HEADER	function
(	O
dwg_object_ref	struct
*	O
ref	pointer
)	O
{	O
dwg_object	struct
*	O
hdr	pointer
,	O
*	O
obj	pointer
;	O
dwg_obj_block_header	struct
*	O
_hdr	pointer
;	O
int	O
error	pointer
;	O
BITCODE_RL	int
abs_ref	int
;	O
char	O
*	O
name	pointer
;	O
if	O
(	O
!	O
ref	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Empty BLOCK."	pointer
" Could not output an SVG symbol for this BLOCK_HEADER\n"	pointer
)	O
;	O
return	O
;	O
}	O
hdr	pointer
=	O
dwg_ref_get_object	function
(	O
ref	pointer
,	O
&	O
error	pointer
)	O
;	O
if	O
(	O
!	O
hdr	pointer
||	O
error	pointer
)	O
return	O
;	O
abs_ref	int
=	O
dwg_ref_get_absref	function
(	O
ref	pointer
,	O
&	O
error	pointer
)	O
;	O
_hdr	pointer
=	O
dwg_object_to_BLOCK_HEADER	function
(	O
hdr	pointer
)	O
;	O
if	O
(	O
_hdr	pointer
)	O
{	O
dynget	O
(	O
_hdr	pointer
,	O
"BLOCK_HEADER"	pointer
,	O
"name"	pointer
,	O
&	O
name	pointer
)	O
;	O
printf	function
(	O
"\t<g id=\"symbol-%X\" >\n\t\t<!-- %s -->\n"	pointer
,	O
abs_ref	int
?	O
abs_ref	int
:	O
0	int
,	O
name	pointer
?	O
name	pointer
:	O
""	pointer
)	O
;	O
if	O
(	O
name	pointer
!=	O
NULL	O
&&	O
name	pointer
!=	O
_hdr	pointer
->	O
name	pointer
&&	O
hdr	pointer
->	O
parent	pointer
->	O
header	struct
.	O
version	short
>=	O
R_2007	int
)	O
free	function
(	O
name	pointer
)	O
;	O
}	O
else	O
printf	function
(	O
"\t<g id=\"symbol-%X\" >\n\t\t<!-- ? -->\n"	pointer
,	O
abs_ref	int
?	O
abs_ref	int
:	O
0	int
)	O
;	O
obj	pointer
=	O
get_first_owned_entity	function
(	O
hdr	pointer
)	O
;	O
while	O
(	O
obj	pointer
)	O
{	O
output_object	function
(	O
obj	pointer
)	O
;	O
obj	pointer
=	O
get_next_owned_entity	function
(	O
hdr	pointer
,	O
obj	pointer
)	O
;	O
}	O
printf	function
(	O
"\t</g>\n"	pointer
)	O
;	O
}	O
static	O
void	O
output_SVG	function
(	O
dwg_data	struct
*	O
dwg	pointer
)	O
{	O
unsigned	O
int	O
i	int
,	O
num_hdr_objs	int
;	O
int	O
error	pointer
;	O
dwg_obj_block_control	struct
*	O
_ctrl	pointer
;	O
dwg_object_ref	struct
*	O
*	O
hdr_refs	pointer
;	O
double	O
dx	double
=	O
dwg_model_x_max	function
(	O
dwg	pointer
)	O
-	O
dwg_model_x_min	function
(	O
dwg	pointer
)	O
;	O
double	O
dy	double
=	O
dwg_model_y_max	function
(	O
dwg	pointer
)	O
-	O
dwg_model_y_min	function
(	O
dwg	pointer
)	O
;	O
double	O
pdx	double
=	O
dwg	pointer
->	O
header_vars	struct
.	O
PLIMMAX	struct
.	O
x	double
-	O
dwg	pointer
->	O
header_vars	struct
.	O
PLIMMIN	struct
.	O
x	double
;	O
double	O
pdy	double
=	O
dwg	pointer
->	O
header_vars	struct
.	O
PLIMMAX	struct
.	O
y	double
-	O
dwg	pointer
->	O
header_vars	struct
.	O
PLIMMIN	struct
.	O
y	double
;	O
double	O
scale_x	double
=	O
dx	double
/	O
(	O
pdx	double
==	O
0.0	int
?	O
1.0	int
:	O
pdx	double
)	O
;	O
double	O
scale_y	double
=	O
dy	double
/	O
(	O
pdy	double
==	O
0.0	int
?	O
1.0	int
:	O
pdy	double
)	O
;	O
scale	struct
=	O
25.4	int
/	O
72.0	int
;	O
model_xmin	double
=	O
dwg_model_x_min	function
(	O
dwg	pointer
)	O
;	O
model_ymin	double
=	O
dwg_model_y_min	function
(	O
dwg	pointer
)	O
;	O
page_width	double
=	O
dx	double
;	O
page_height	double
=	O
dy	double
;	O
scale	struct
*=	O
(	O
scale_x	double
>	O
scale_y	double
?	O
scale_x	double
:	O
scale_y	double
)	O
;	O
_ctrl	pointer
=	O
dwg_block_control	function
(	O
dwg	pointer
)	O
;	O
hdr_refs	pointer
=	O
dwg_obj_block_control_get_block_headers	function
(	O
_ctrl	pointer
,	O
&	O
error	pointer
)	O
;	O
log_if_error	O
(	O
"block_control_get_block_headers"	pointer
)	O
;	O
num_hdr_objs	int
=	O
dwg_obj_block_control_get_num_entries	function
(	O
_ctrl	pointer
,	O
&	O
error	pointer
)	O
;	O
log_if_error	O
(	O
"block_control_get_num_entries"	pointer
)	O
;	O
printf	function
(	O
"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n"	pointer
"<svg\n"	pointer
"   xmlns:svg=\"http://www.w3.org/2000/svg\"\n"	pointer
"   xmlns=\"http://www.w3.org/2000/svg\"\n"	pointer
"   xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n"	pointer
"   version=\"1.1\"\n"	pointer
"   width=\"%f\"\n"	pointer
"   height=\"%f\"\n"	pointer
">\n"	pointer
,	O
page_width	double
,	O
page_height	double
)	O
;	O
printf	function
(	O
"\t<defs>\n"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_hdr_objs	int
;	O
i	int
++	O
)	O
{	O
output_BLOCK_HEADER	function
(	O
hdr_refs	pointer
[	O
i	int
]	O
)	O
;	O
}	O
printf	function
(	O
"\t</defs>\n"	pointer
)	O
;	O
output_BLOCK_HEADER	function
(	O
dwg_model_space_ref	function
(	O
dwg	pointer
)	O
)	O
;	O
output_BLOCK_HEADER	function
(	O
dwg_paper_space_ref	function
(	O
dwg	pointer
)	O
)	O
;	O
free	function
(	O
hdr_refs	pointer
)	O
;	O
printf	function
(	O
"</svg>\n"	pointer
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
int	O
i	int
=	O
1	int
;	O
int	O
c	int
;	O
int	O
option_index	int
=	O
0	int
;	O
static	O
struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
"verbose"	pointer
,	O
1	int
,	O
&	O
opts	int
,	O
1	int
}	O
,	O
{	O
"help"	pointer
,	O
0	int
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"version"	pointer
,	O
0	int
,	O
0	int
,	O
0	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
if	O
(	O
argc	int
<	O
2	int
)	O
return	O
usage	function
(	O
)	O
;	O
while	O
(	O
(	O
c	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	array
,	O
":v::h"	pointer
,	O
long_options	array
,	O
&	O
option_index	int
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
if	O
(	O
c	int
==	O
-	O
1	int
)	O
break	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
':'	O
:	O
if	O
(	O
optarg	pointer
&&	O
!	O
strcmp	function
(	O
optarg	pointer
,	O
"v"	pointer
)	O
)	O
{	O
opts	int
=	O
1	int
;	O
break	O
;	O
}	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: option '-%c' requires an argument\n"	pointer
,	O
argv	array
[	O
0	int
]	O
,	O
optopt	int
)	O
;	O
break	O
;	O
case	O
0	int
:	O
if	O
(	O
!	O
strcmp	function
(	O
long_options	array
[	O
option_index	int
]	O
.	O
name	pointer
,	O
"verbose"	pointer
)	O
)	O
{	O
if	O
(	O
opts	int
<	O
0	int
||	O
opts	int
>	O
9	int
)	O
return	O
usage	function
(	O
)	O
;	O
break	O
;	O
}	O
if	O
(	O
!	O
strcmp	function
(	O
long_options	array
[	O
option_index	int
]	O
.	O
name	pointer
,	O
"version"	pointer
)	O
)	O
return	O
opt_version	function
(	O
)	O
;	O
if	O
(	O
!	O
strcmp	function
(	O
long_options	array
[	O
option_index	int
]	O
.	O
name	pointer
,	O
"help"	pointer
)	O
)	O
return	O
help	function
(	O
)	O
;	O
break	O
;	O
case	O
'v'	O
:	O
i	int
=	O
(	O
optind	int
>	O
0	int
&&	O
optind	int
<	O
argc	int
)	O
?	O
optind	int
-	O
1	int
:	O
1	int
;	O
if	O
(	O
!	O
memcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-v"	pointer
,	O
2	int
)	O
)	O
{	O
opts	int
=	O
argv	array
[	O
i	int
]	O
[	O
2	int
]	O
?	O
argv	array
[	O
i	int
]	O
[	O
2	int
]	O
-	O
'0'	O
:	O
1	int
;	O
}	O
if	O
(	O
opts	int
<	O
0	int
||	O
opts	int
>	O
9	int
)	O
return	O
usage	function
(	O
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
return	O
help	function
(	O
)	O
;	O
case	O
'?'	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: invalid option '-%c' ignored\n"	pointer
,	O
argv	array
[	O
0	int
]	O
,	O
optopt	int
)	O
;	O
break	O
;	O
default	O
:	O
return	O
usage	function
(	O
)	O
;	O
}	O
}	O
i	int
=	O
optind	int
;	O
if	O
(	O
i	int
>=	O
argc	int
)	O
return	O
usage	function
(	O
)	O
;	O
return	O
test_SVG	function
(	O
argv	array
[	O
i	int
]	O
)	O
;	O
}	O