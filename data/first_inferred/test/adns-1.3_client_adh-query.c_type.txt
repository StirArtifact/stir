adns_state	pointer
ads	pointer
;	O
struct	O
outstanding_list	struct
outstanding	struct
;	O
static	O
unsigned	O
long	O
idcounter	long
;	O
void	O
ensure_adns_init	function
(	O
void	O
)	O
{	O
adns_initflags	enum
initflags	enum
;	O
int	O
r	int
;	O
if	O
(	O
ads	pointer
)	O
return	O
;	O
if	O
(	O
signal	function
(	O
SIGPIPE	int
,	O
SIG_IGN	O
)	O
==	O
SIG_ERR	O
)	O
sysfail	function
(	O
"ignore SIGPIPE"	pointer
,	O
errno	O
)	O
;	O
initflags	enum
=	O
adns_if_noautosys	int
|	O
adns_if_nosigpipe	int
|	O
ov_verbose	int
;	O
if	O
(	O
!	O
ov_env	int
)	O
initflags	enum
|=	O
adns_if_noenv	int
;	O
if	O
(	O
config_text	pointer
)	O
{	O
r	int
=	O
adns_init_strcfg	function
(	O
&	O
ads	pointer
,	O
initflags	enum
,	O
stderr	pointer
,	O
config_text	pointer
)	O
;	O
}	O
else	O
{	O
r	int
=	O
adns_init	function
(	O
&	O
ads	pointer
,	O
initflags	enum
,	O
0	int
)	O
;	O
}	O
if	O
(	O
r	int
)	O
sysfail	function
(	O
"adns_init"	pointer
,	O
r	int
)	O
;	O
if	O
(	O
ov_format	int
==	O
fmt_default	int
)	O
ov_format	int
=	O
ov_asynch	int
?	O
fmt_asynch	int
:	O
fmt_simple	int
;	O
}	O
void	O
type_info	function
(	O
adns_rrtype	enum
type	enum
,	O
const	O
char	O
*	O
*	O
typename_r	pointer
,	O
const	O
void	O
*	O
datap	pointer
,	O
char	O
*	O
*	O
data_r	pointer
)	O
{	O
static	O
char	O
buf	array
[	O
12	int
]	O
;	O
adns_status	enum
st	enum
;	O
st	enum
=	O
adns_rr_info	function
(	O
type	enum
,	O
typename_r	pointer
,	O
0	int
,	O
0	int
,	O
datap	pointer
,	O
data_r	pointer
)	O
;	O
if	O
(	O
st	enum
==	O
adns_s_nomemory	int
)	O
sysfail	function
(	O
"adns_rr_info failed"	pointer
,	O
ENOMEM	int
)	O
;	O
assert	O
(	O
!	O
st	enum
)	O
;	O
if	O
(	O
typename_r	pointer
&&	O
!	O
*	O
typename_r	pointer
)	O
{	O
sprintf	function
(	O
buf	array
,	O
"TYPE%d"	pointer
,	O
(	O
int	O
)	O
(	O
type	enum
&	O
adns_rrt_typemask	int
)	O
)	O
;	O
*	O
typename_r	pointer
=	O
buf	array
;	O
}	O
}	O
static	O
void	O
prep_query	function
(	O
struct	O
query_node	struct
*	O
*	O
qun_r	pointer
,	O
int	O
*	O
quflags_r	pointer
)	O
{	O
struct	O
query_node	struct
*	O
qun	pointer
;	O
char	O
idbuf	array
[	O
20	int
]	O
;	O
if	O
(	O
ov_pipe	int
&&	O
!	O
ads	pointer
)	O
usageerr	function
(	O
"-f/--pipe not consistent with domains on command line"	pointer
)	O
;	O
ensure_adns_init	function
(	O
)	O
;	O
qun	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
qun	pointer
)	O
)	O
;	O
qun	pointer
->	O
pqfr	struct
=	O
ov_pqfr	struct
;	O
if	O
(	O
ov_id	pointer
)	O
{	O
qun	pointer
->	O
id	pointer
=	O
xstrsave	function
(	O
ov_id	pointer
)	O
;	O
}	O
else	O
{	O
sprintf	function
(	O
idbuf	array
,	O
"%lu"	pointer
,	O
idcounter	long
++	O
)	O
;	O
idcounter	long
&=	O
0x0fffffffflu	int
;	O
qun	pointer
->	O
id	pointer
=	O
xstrsave	function
(	O
idbuf	array
)	O
;	O
}	O
*	O
quflags_r	pointer
=	O
(	O
ov_search	int
?	O
adns_qf_search	int
:	O
0	int
)	O
|	O
(	O
ov_tcp	int
?	O
adns_qf_usevc	int
:	O
0	int
)	O
|	O
(	O
(	O
ov_pqfr	struct
.	O
show_owner	int
||	O
ov_format	int
==	O
fmt_simple	int
)	O
?	O
adns_qf_owner	int
:	O
0	int
)	O
|	O
(	O
ov_qc_query	int
?	O
adns_qf_quoteok_query	int
:	O
0	int
)	O
|	O
(	O
ov_qc_anshost	int
?	O
adns_qf_quoteok_anshost	int
:	O
0	int
)	O
|	O
(	O
ov_qc_cname	int
?	O
0	int
:	O
adns_qf_quoteok_cname	int
)	O
|	O
ov_cname	int
,	O
*	O
qun_r	pointer
=	O
qun	pointer
;	O
}	O
void	O
of_ptr	function
(	O
const	O
struct	O
optioninfo	struct
*	O
oi	pointer
,	O
const	O
char	O
*	O
arg	pointer
,	O
const	O
char	O
*	O
arg2	pointer
)	O
{	O
struct	O
query_node	struct
*	O
qun	pointer
;	O
int	O
quflags	int
,	O
r	int
;	O
struct	O
sockaddr_in	struct
sa	struct
;	O
memset	function
(	O
&	O
sa	struct
,	O
0	int
,	O
sizeof	O
(	O
sa	struct
)	O
)	O
;	O
sa	struct
.	O
sin_family	short
=	O
AF_INET	O
;	O
if	O
(	O
!	O
inet_aton	function
(	O
arg	pointer
,	O
&	O
sa	struct
.	O
sin_addr	struct
)	O
)	O
usageerr	function
(	O
"invalid IP address %s"	pointer
,	O
arg	pointer
)	O
;	O
prep_query	function
(	O
&	O
qun	pointer
,	O
&	O
quflags	int
)	O
;	O
qun	pointer
->	O
owner	pointer
=	O
xstrsave	function
(	O
arg	pointer
)	O
;	O
r	int
=	O
adns_submit_reverse	function
(	O
ads	pointer
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
sa	struct
,	O
ov_type	enum
==	O
adns_r_none	int
?	O
adns_r_ptr	int
:	O
ov_type	enum
,	O
quflags	int
,	O
qun	pointer
,	O
&	O
qun	pointer
->	O
qu	pointer
)	O
;	O
if	O
(	O
r	int
)	O
sysfail	function
(	O
"adns_submit_reverse"	pointer
,	O
r	int
)	O
;	O
LIST_LINK_TAIL	O
(	O
outstanding	struct
,	O
qun	pointer
)	O
;	O
}	O
void	O
of_reverse	function
(	O
const	O
struct	O
optioninfo	struct
*	O
oi	pointer
,	O
const	O
char	O
*	O
arg	pointer
,	O
const	O
char	O
*	O
arg2	pointer
)	O
{	O
struct	O
query_node	struct
*	O
qun	pointer
;	O
int	O
quflags	int
,	O
r	int
;	O
struct	O
sockaddr_in	struct
sa	struct
;	O
memset	function
(	O
&	O
sa	struct
,	O
0	int
,	O
sizeof	O
(	O
sa	struct
)	O
)	O
;	O
sa	struct
.	O
sin_family	short
=	O
AF_INET	O
;	O
if	O
(	O
!	O
inet_aton	function
(	O
arg	pointer
,	O
&	O
sa	struct
.	O
sin_addr	struct
)	O
)	O
usageerr	function
(	O
"invalid IP address %s"	pointer
,	O
arg	pointer
)	O
;	O
prep_query	function
(	O
&	O
qun	pointer
,	O
&	O
quflags	int
)	O
;	O
qun	pointer
->	O
owner	pointer
=	O
xmalloc	function
(	O
strlen	function
(	O
arg	pointer
)	O
+	O
strlen	function
(	O
arg2	pointer
)	O
+	O
2	int
)	O
;	O
sprintf	function
(	O
qun	pointer
->	O
owner	pointer
,	O
"%s %s"	pointer
,	O
arg	pointer
,	O
arg2	pointer
)	O
;	O
r	int
=	O
adns_submit_reverse_any	function
(	O
ads	pointer
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
sa	struct
,	O
arg2	pointer
,	O
ov_type	enum
==	O
adns_r_none	int
?	O
adns_r_txt	int
:	O
ov_type	enum
,	O
quflags	int
,	O
qun	pointer
,	O
&	O
qun	pointer
->	O
qu	pointer
)	O
;	O
if	O
(	O
r	int
)	O
sysfail	function
(	O
"adns_submit_reverse"	pointer
,	O
r	int
)	O
;	O
LIST_LINK_TAIL	O
(	O
outstanding	struct
,	O
qun	pointer
)	O
;	O
}	O
void	O
query_do	function
(	O
const	O
char	O
*	O
domain	pointer
)	O
{	O
struct	O
query_node	struct
*	O
qun	pointer
;	O
int	O
quflags	int
,	O
r	int
;	O
prep_query	function
(	O
&	O
qun	pointer
,	O
&	O
quflags	int
)	O
;	O
qun	pointer
->	O
owner	pointer
=	O
xstrsave	function
(	O
domain	pointer
)	O
;	O
r	int
=	O
adns_submit	function
(	O
ads	pointer
,	O
domain	pointer
,	O
ov_type	enum
==	O
adns_r_none	int
?	O
adns_r_addr	int
:	O
ov_type	enum
,	O
quflags	int
,	O
qun	pointer
,	O
&	O
qun	pointer
->	O
qu	pointer
)	O
;	O
if	O
(	O
r	int
)	O
sysfail	function
(	O
"adns_submit"	pointer
,	O
r	int
)	O
;	O
LIST_LINK_TAIL	O
(	O
outstanding	struct
,	O
qun	pointer
)	O
;	O
}	O
static	O
void	O
dequeue_query	function
(	O
struct	O
query_node	struct
*	O
qun	pointer
)	O
{	O
LIST_UNLINK	O
(	O
outstanding	struct
,	O
qun	pointer
)	O
;	O
free	function
(	O
qun	pointer
->	O
id	pointer
)	O
;	O
free	function
(	O
qun	pointer
->	O
owner	pointer
)	O
;	O
free	function
(	O
qun	pointer
)	O
;	O
}	O
static	O
void	O
print_withspace	function
(	O
const	O
char	O
*	O
str	pointer
)	O
{	O
if	O
(	O
printf	function
(	O
"%s "	pointer
,	O
str	pointer
)	O
==	O
EOF	O
)	O
outerr	function
(	O
)	O
;	O
}	O
static	O
void	O
print_ttl	function
(	O
struct	O
query_node	struct
*	O
qun	pointer
,	O
adns_answer	struct
*	O
answer	pointer
)	O
{	O
unsigned	O
long	O
ttl	int
;	O
time_t	long
now	pointer
;	O
switch	O
(	O
qun	pointer
->	O
pqfr	struct
.	O
ttl	int
)	O
{	O
case	O
tm_none	int
:	O
return	O
;	O
case	O
tm_rel	int
:	O
if	O
(	O
time	function
(	O
&	O
now	pointer
)	O
==	O
(	O
time_t	long
)	O
-	O
1	int
)	O
sysfail	function
(	O
"get current time"	pointer
,	O
errno	O
)	O
;	O
ttl	int
=	O
answer	pointer
->	O
expires	long
<	O
now	pointer
?	O
0	int
:	O
answer	pointer
->	O
expires	long
-	O
now	pointer
;	O
break	O
;	O
case	O
tm_abs	int
:	O
ttl	int
=	O
answer	pointer
->	O
expires	long
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
if	O
(	O
printf	function
(	O
"%lu "	pointer
,	O
ttl	int
)	O
==	O
EOF	O
)	O
outerr	function
(	O
)	O
;	O
}	O
static	O
const	O
char	O
*	O
owner_show	function
(	O
struct	O
query_node	struct
*	O
qun	pointer
,	O
adns_answer	struct
*	O
answer	pointer
)	O
{	O
return	O
answer	pointer
->	O
owner	pointer
?	O
answer	pointer
->	O
owner	pointer
:	O
qun	pointer
->	O
owner	pointer
;	O
}	O
static	O
void	O
print_owner_ttl	function
(	O
struct	O
query_node	struct
*	O
qun	pointer
,	O
adns_answer	struct
*	O
answer	pointer
)	O
{	O
if	O
(	O
qun	pointer
->	O
pqfr	struct
.	O
show_owner	int
)	O
print_withspace	function
(	O
owner_show	function
(	O
qun	pointer
,	O
answer	pointer
)	O
)	O
;	O
print_ttl	function
(	O
qun	pointer
,	O
answer	pointer
)	O
;	O
}	O
static	O
void	O
check_status	function
(	O
adns_status	enum
st	enum
)	O
{	O
static	O
const	O
adns_status	enum
statuspoints	array
[	O
]	O
=	O
{	O
adns_s_ok	int
,	O
adns_s_max_localfail	int
,	O
adns_s_max_remotefail	int
,	O
adns_s_max_tempfail	int
,	O
adns_s_max_misconfig	int
,	O
adns_s_max_misquery	int
}	O
;	O
const	O
adns_status	enum
*	O
spp	pointer
;	O
int	O
minrcode	int
;	O
for	O
(	O
minrcode	int
=	O
0	int
,	O
spp	pointer
=	O
statuspoints	array
;	O
spp	pointer
<	O
statuspoints	array
+	O
(	O
sizeof	O
(	O
statuspoints	array
)	O
/	O
sizeof	O
(	O
statuspoints	array
[	O
0	int
]	O
)	O
)	O
;	O
spp	pointer
++	O
)	O
if	O
(	O
st	enum
>	O
*	O
spp	pointer
)	O
minrcode	int
++	O
;	O
if	O
(	O
rcode	int
<	O
minrcode	int
)	O
rcode	int
=	O
minrcode	int
;	O
}	O
static	O
void	O
print_status	function
(	O
adns_status	enum
st	enum
,	O
struct	O
query_node	struct
*	O
qun	pointer
,	O
adns_answer	struct
*	O
answer	pointer
)	O
{	O
const	O
char	O
*	O
statustypeabbrev	pointer
,	O
*	O
statusabbrev	pointer
,	O
*	O
statusstring	pointer
;	O
statustypeabbrev	pointer
=	O
adns_errtypeabbrev	function
(	O
st	enum
)	O
;	O
statusabbrev	pointer
=	O
adns_errabbrev	function
(	O
st	enum
)	O
;	O
statusstring	pointer
=	O
adns_strerror	function
(	O
st	enum
)	O
;	O
assert	O
(	O
!	O
strchr	function
(	O
statusstring	pointer
,	O
'"'	O
)	O
)	O
;	O
if	O
(	O
printf	function
(	O
"%s %d %s "	pointer
,	O
statustypeabbrev	pointer
,	O
st	enum
,	O
statusabbrev	pointer
)	O
==	O
EOF	O
)	O
outerr	function
(	O
)	O
;	O
print_owner_ttl	function
(	O
qun	pointer
,	O
answer	pointer
)	O
;	O
if	O
(	O
qun	pointer
->	O
pqfr	struct
.	O
show_cname	int
)	O
print_withspace	function
(	O
answer	pointer
->	O
cname	pointer
?	O
answer	pointer
->	O
cname	pointer
:	O
"$"	pointer
)	O
;	O
if	O
(	O
printf	function
(	O
"\"%s\"\n"	pointer
,	O
statusstring	pointer
)	O
==	O
EOF	O
)	O
outerr	function
(	O
)	O
;	O
}	O
static	O
void	O
print_dnsfail	function
(	O
adns_status	enum
st	enum
,	O
struct	O
query_node	struct
*	O
qun	pointer
,	O
adns_answer	struct
*	O
answer	pointer
)	O
{	O
int	O
r	int
;	O
const	O
char	O
*	O
typename	pointer
,	O
*	O
statusstring	pointer
;	O
if	O
(	O
ov_format	int
==	O
fmt_inline	int
)	O
{	O
if	O
(	O
fputs	function
(	O
"; failed "	pointer
,	O
stdout	pointer
)	O
==	O
EOF	O
)	O
outerr	function
(	O
)	O
;	O
print_status	function
(	O
st	enum
,	O
qun	pointer
,	O
answer	pointer
)	O
;	O
return	O
;	O
}	O
assert	O
(	O
ov_format	int
==	O
fmt_simple	int
)	O
;	O
if	O
(	O
st	enum
==	O
adns_s_nxdomain	int
)	O
{	O
r	int
=	O
fprintf	function
(	O
stderr	pointer
,	O
"%s does not exist\n"	pointer
,	O
owner_show	function
(	O
qun	pointer
,	O
answer	pointer
)	O
)	O
;	O
}	O
else	O
{	O
type_info	function
(	O
answer	pointer
->	O
type	enum
,	O
&	O
typename	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
st	enum
==	O
adns_s_nodata	int
)	O
{	O
r	int
=	O
fprintf	function
(	O
stderr	pointer
,	O
"%s has no %s record\n"	pointer
,	O
owner_show	function
(	O
qun	pointer
,	O
answer	pointer
)	O
,	O
typename	pointer
)	O
;	O
}	O
else	O
{	O
statusstring	pointer
=	O
adns_strerror	function
(	O
st	enum
)	O
;	O
r	int
=	O
fprintf	function
(	O
stderr	pointer
,	O
"Error during DNS %s lookup for %s: %s\n"	pointer
,	O
typename	pointer
,	O
owner_show	function
(	O
qun	pointer
,	O
answer	pointer
)	O
,	O
statusstring	pointer
)	O
;	O
}	O
}	O
if	O
(	O
r	int
==	O
EOF	O
)	O
sysfail	function
(	O
"write error message to stderr"	pointer
,	O
errno	O
)	O
;	O
}	O
void	O
query_done	function
(	O
struct	O
query_node	struct
*	O
qun	pointer
,	O
adns_answer	struct
*	O
answer	pointer
)	O
{	O
adns_status	enum
st	enum
;	O
int	O
rrn	int
,	O
nrrs	int
;	O
const	O
char	O
*	O
rrp	pointer
,	O
*	O
realowner	pointer
,	O
*	O
typename	pointer
;	O
char	O
*	O
datastr	pointer
;	O
st	enum
=	O
answer	pointer
->	O
status	enum
;	O
nrrs	int
=	O
answer	pointer
->	O
nrrs	int
;	O
if	O
(	O
ov_format	int
==	O
fmt_asynch	int
)	O
{	O
check_status	function
(	O
st	enum
)	O
;	O
if	O
(	O
printf	function
(	O
"%s %d "	pointer
,	O
qun	pointer
->	O
id	pointer
,	O
nrrs	int
)	O
==	O
EOF	O
)	O
outerr	function
(	O
)	O
;	O
print_status	function
(	O
st	enum
,	O
qun	pointer
,	O
answer	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
qun	pointer
->	O
pqfr	struct
.	O
show_cname	int
&&	O
answer	pointer
->	O
cname	pointer
)	O
{	O
print_owner_ttl	function
(	O
qun	pointer
,	O
answer	pointer
)	O
;	O
if	O
(	O
qun	pointer
->	O
pqfr	struct
.	O
show_type	int
)	O
print_withspace	function
(	O
"CNAME"	pointer
)	O
;	O
if	O
(	O
printf	function
(	O
"%s\n"	pointer
,	O
answer	pointer
->	O
cname	pointer
)	O
==	O
EOF	O
)	O
outerr	function
(	O
)	O
;	O
}	O
if	O
(	O
st	enum
)	O
{	O
check_status	function
(	O
st	enum
)	O
;	O
print_dnsfail	function
(	O
st	enum
,	O
qun	pointer
,	O
answer	pointer
)	O
;	O
}	O
}	O
if	O
(	O
qun	pointer
->	O
pqfr	struct
.	O
show_owner	int
)	O
{	O
realowner	pointer
=	O
answer	pointer
->	O
cname	pointer
?	O
answer	pointer
->	O
cname	pointer
:	O
owner_show	function
(	O
qun	pointer
,	O
answer	pointer
)	O
;	O
assert	O
(	O
realowner	pointer
)	O
;	O
}	O
else	O
{	O
realowner	pointer
=	O
0	int
;	O
}	O
if	O
(	O
nrrs	int
)	O
{	O
for	O
(	O
rrn	int
=	O
0	int
,	O
rrp	pointer
=	O
answer	pointer
->	O
rrs	union
.	O
untyped	pointer
;	O
rrn	int
<	O
nrrs	int
;	O
rrn	int
++	O
,	O
rrp	pointer
+=	O
answer	pointer
->	O
rrsz	int
)	O
{	O
if	O
(	O
realowner	pointer
)	O
print_withspace	function
(	O
realowner	pointer
)	O
;	O
print_ttl	function
(	O
qun	pointer
,	O
answer	pointer
)	O
;	O
type_info	function
(	O
answer	pointer
->	O
type	enum
,	O
&	O
typename	pointer
,	O
rrp	pointer
,	O
&	O
datastr	pointer
)	O
;	O
if	O
(	O
qun	pointer
->	O
pqfr	struct
.	O
show_type	int
)	O
print_withspace	function
(	O
typename	pointer
)	O
;	O
if	O
(	O
printf	function
(	O
"%s\n"	pointer
,	O
datastr	pointer
)	O
==	O
EOF	O
)	O
outerr	function
(	O
)	O
;	O
free	function
(	O
datastr	pointer
)	O
;	O
}	O
}	O
if	O
(	O
fflush	function
(	O
stdout	pointer
)	O
)	O
outerr	function
(	O
)	O
;	O
free	function
(	O
answer	pointer
)	O
;	O
dequeue_query	function
(	O
qun	pointer
)	O
;	O
}	O
void	O
of_asynch_id	function
(	O
const	O
struct	O
optioninfo	struct
*	O
oi	pointer
,	O
const	O
char	O
*	O
arg	pointer
,	O
const	O
char	O
*	O
arg2	pointer
)	O
{	O
free	function
(	O
ov_id	pointer
)	O
;	O
ov_id	pointer
=	O
xstrsave	function
(	O
arg	pointer
)	O
;	O
}	O
void	O
of_cancel_id	function
(	O
const	O
struct	O
optioninfo	struct
*	O
oi	pointer
,	O
const	O
char	O
*	O
arg	pointer
,	O
const	O
char	O
*	O
arg2	pointer
)	O
{	O
struct	O
query_node	struct
*	O
qun	pointer
;	O
for	O
(	O
qun	pointer
=	O
outstanding	struct
.	O
head	pointer
;	O
qun	pointer
&&	O
strcmp	function
(	O
qun	pointer
->	O
id	pointer
,	O
arg	pointer
)	O
;	O
qun	pointer
=	O
qun	pointer
->	O
next	pointer
)	O
;	O
if	O
(	O
!	O
qun	pointer
)	O
return	O
;	O
adns_cancel	function
(	O
qun	pointer
->	O
qu	pointer
)	O
;	O
dequeue_query	function
(	O
qun	pointer
)	O
;	O
}	O