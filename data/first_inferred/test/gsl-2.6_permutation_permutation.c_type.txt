size_t	long
gsl_permutation_size	function
(	O
const	O
gsl_permutation	struct
*	O
p	pointer
)	O
{	O
return	O
p	pointer
->	O
size	long
;	O
}	O
size_t	long
*	O
gsl_permutation_data	function
(	O
const	O
gsl_permutation	struct
*	O
p	pointer
)	O
{	O
return	O
p	pointer
->	O
data	pointer
;	O
}	O
int	O
gsl_permutation_swap	function
(	O
gsl_permutation	struct
*	O
p	pointer
,	O
const	O
size_t	long
i	long
,	O
const	O
size_t	long
j	long
)	O
{	O
const	O
size_t	long
size	long
=	O
p	pointer
->	O
size	long
;	O
if	O
(	O
i	long
>=	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"first index is out of range"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
j	long
>=	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"second index is out of range"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
i	long
!=	O
j	long
)	O
{	O
size_t	long
tmp	long
=	O
p	pointer
->	O
data	pointer
[	O
i	long
]	O
;	O
p	pointer
->	O
data	pointer
[	O
i	long
]	O
=	O
p	pointer
->	O
data	pointer
[	O
j	long
]	O
;	O
p	pointer
->	O
data	pointer
[	O
j	long
]	O
=	O
tmp	long
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_permutation_valid	function
(	O
const	O
gsl_permutation	struct
*	O
p	pointer
)	O
{	O
const	O
size_t	long
size	long
=	O
p	pointer
->	O
size	long
;	O
size_t	long
i	long
,	O
j	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
size	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
p	pointer
->	O
data	pointer
[	O
i	long
]	O
>=	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"permutation index outside range"	pointer
,	O
GSL_FAILURE	int
)	O
;	O
}	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
i	long
;	O
j	long
++	O
)	O
{	O
if	O
(	O
p	pointer
->	O
data	pointer
[	O
i	long
]	O
==	O
p	pointer
->	O
data	pointer
[	O
j	long
]	O
)	O
{	O
GSL_ERROR	O
(	O
"duplicate permutation index"	pointer
,	O
GSL_FAILURE	int
)	O
;	O
}	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
void	O
gsl_permutation_reverse	function
(	O
gsl_permutation	struct
*	O
p	pointer
)	O
{	O
const	O
size_t	long
size	long
=	O
p	pointer
->	O
size	long
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
(	O
size	long
/	O
2	int
)	O
;	O
i	long
++	O
)	O
{	O
size_t	long
j	long
=	O
size	long
-	O
i	long
-	O
1	int
;	O
size_t	long
tmp	long
=	O
p	pointer
->	O
data	pointer
[	O
i	long
]	O
;	O
p	pointer
->	O
data	pointer
[	O
i	long
]	O
=	O
p	pointer
->	O
data	pointer
[	O
j	long
]	O
;	O
p	pointer
->	O
data	pointer
[	O
j	long
]	O
=	O
tmp	long
;	O
}	O
}	O
int	O
gsl_permutation_inverse	function
(	O
gsl_permutation	struct
*	O
inv	pointer
,	O
const	O
gsl_permutation	struct
*	O
p	pointer
)	O
{	O
const	O
size_t	long
size	long
=	O
p	pointer
->	O
size	long
;	O
size_t	long
i	long
;	O
if	O
(	O
inv	pointer
->	O
size	long
!=	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"permutation lengths are not equal"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
size	long
;	O
i	long
++	O
)	O
{	O
inv	pointer
->	O
data	pointer
[	O
p	pointer
->	O
data	pointer
[	O
i	long
]	O
]	O
=	O
i	long
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_permutation_next	function
(	O
gsl_permutation	struct
*	O
p	pointer
)	O
{	O
const	O
size_t	long
size	long
=	O
p	pointer
->	O
size	long
;	O
size_t	long
i	long
,	O
j	long
,	O
k	long
;	O
if	O
(	O
size	long
<	O
2	int
)	O
{	O
return	O
GSL_FAILURE	int
;	O
}	O
i	long
=	O
size	long
-	O
2	int
;	O
while	O
(	O
(	O
p	pointer
->	O
data	pointer
[	O
i	long
]	O
>	O
p	pointer
->	O
data	pointer
[	O
i	long
+	O
1	int
]	O
)	O
&&	O
(	O
i	long
!=	O
0	int
)	O
)	O
{	O
i	long
--	O
;	O
}	O
if	O
(	O
(	O
i	long
==	O
0	int
)	O
&&	O
(	O
p	pointer
->	O
data	pointer
[	O
0	int
]	O
>	O
p	pointer
->	O
data	pointer
[	O
1	int
]	O
)	O
)	O
{	O
return	O
GSL_FAILURE	int
;	O
}	O
k	long
=	O
i	long
+	O
1	int
;	O
for	O
(	O
j	long
=	O
i	long
+	O
2	int
;	O
j	long
<	O
size	long
;	O
j	long
++	O
)	O
{	O
if	O
(	O
(	O
p	pointer
->	O
data	pointer
[	O
j	long
]	O
>	O
p	pointer
->	O
data	pointer
[	O
i	long
]	O
)	O
&&	O
(	O
p	pointer
->	O
data	pointer
[	O
j	long
]	O
<	O
p	pointer
->	O
data	pointer
[	O
k	long
]	O
)	O
)	O
{	O
k	long
=	O
j	long
;	O
}	O
}	O
{	O
size_t	long
tmp	long
=	O
p	pointer
->	O
data	pointer
[	O
i	long
]	O
;	O
p	pointer
->	O
data	pointer
[	O
i	long
]	O
=	O
p	pointer
->	O
data	pointer
[	O
k	long
]	O
;	O
p	pointer
->	O
data	pointer
[	O
k	long
]	O
=	O
tmp	long
;	O
}	O
for	O
(	O
j	long
=	O
i	long
+	O
1	int
;	O
j	long
<=	O
(	O
(	O
size	long
+	O
i	long
)	O
/	O
2	int
)	O
;	O
j	long
++	O
)	O
{	O
size_t	long
tmp	long
=	O
p	pointer
->	O
data	pointer
[	O
j	long
]	O
;	O
p	pointer
->	O
data	pointer
[	O
j	long
]	O
=	O
p	pointer
->	O
data	pointer
[	O
size	long
+	O
i	long
-	O
j	long
]	O
;	O
p	pointer
->	O
data	pointer
[	O
size	long
+	O
i	long
-	O
j	long
]	O
=	O
tmp	long
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_permutation_prev	function
(	O
gsl_permutation	struct
*	O
p	pointer
)	O
{	O
const	O
size_t	long
size	long
=	O
p	pointer
->	O
size	long
;	O
size_t	long
i	long
,	O
j	long
,	O
k	long
;	O
if	O
(	O
size	long
<	O
2	int
)	O
{	O
return	O
GSL_FAILURE	int
;	O
}	O
i	long
=	O
size	long
-	O
2	int
;	O
while	O
(	O
(	O
p	pointer
->	O
data	pointer
[	O
i	long
]	O
<	O
p	pointer
->	O
data	pointer
[	O
i	long
+	O
1	int
]	O
)	O
&&	O
(	O
i	long
!=	O
0	int
)	O
)	O
{	O
i	long
--	O
;	O
}	O
if	O
(	O
(	O
i	long
==	O
0	int
)	O
&&	O
(	O
p	pointer
->	O
data	pointer
[	O
0	int
]	O
<	O
p	pointer
->	O
data	pointer
[	O
1	int
]	O
)	O
)	O
{	O
return	O
GSL_FAILURE	int
;	O
}	O
k	long
=	O
i	long
+	O
1	int
;	O
for	O
(	O
j	long
=	O
i	long
+	O
2	int
;	O
j	long
<	O
size	long
;	O
j	long
++	O
)	O
{	O
if	O
(	O
(	O
p	pointer
->	O
data	pointer
[	O
j	long
]	O
<	O
p	pointer
->	O
data	pointer
[	O
i	long
]	O
)	O
&&	O
(	O
p	pointer
->	O
data	pointer
[	O
j	long
]	O
>	O
p	pointer
->	O
data	pointer
[	O
k	long
]	O
)	O
)	O
{	O
k	long
=	O
j	long
;	O
}	O
}	O
{	O
size_t	long
tmp	long
=	O
p	pointer
->	O
data	pointer
[	O
i	long
]	O
;	O
p	pointer
->	O
data	pointer
[	O
i	long
]	O
=	O
p	pointer
->	O
data	pointer
[	O
k	long
]	O
;	O
p	pointer
->	O
data	pointer
[	O
k	long
]	O
=	O
tmp	long
;	O
}	O
for	O
(	O
j	long
=	O
i	long
+	O
1	int
;	O
j	long
<=	O
(	O
(	O
size	long
+	O
i	long
)	O
/	O
2	int
)	O
;	O
j	long
++	O
)	O
{	O
size_t	long
tmp	long
=	O
p	pointer
->	O
data	pointer
[	O
j	long
]	O
;	O
p	pointer
->	O
data	pointer
[	O
j	long
]	O
=	O
p	pointer
->	O
data	pointer
[	O
size	long
+	O
i	long
-	O
j	long
]	O
;	O
p	pointer
->	O
data	pointer
[	O
size	long
+	O
i	long
-	O
j	long
]	O
=	O
tmp	long
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_permutation_mul	function
(	O
gsl_permutation	struct
*	O
p	pointer
,	O
const	O
gsl_permutation	struct
*	O
pa	pointer
,	O
const	O
gsl_permutation	struct
*	O
pb	pointer
)	O
{	O
size_t	long
i	long
;	O
const	O
size_t	long
size	long
=	O
p	pointer
->	O
size	long
;	O
if	O
(	O
pa	pointer
->	O
size	long
!=	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"size of result does not match size of pa"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
pb	pointer
->	O
size	long
!=	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"size of result does not match size of pb"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
size	long
;	O
i	long
++	O
)	O
{	O
p	pointer
->	O
data	pointer
[	O
i	long
]	O
=	O
pb	pointer
->	O
data	pointer
[	O
pa	pointer
->	O
data	pointer
[	O
i	long
]	O
]	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_permutation_memcpy	function
(	O
gsl_permutation	struct
*	O
dest	pointer
,	O
const	O
gsl_permutation	struct
*	O
src	pointer
)	O
{	O
const	O
size_t	long
src_size	long
=	O
src	pointer
->	O
size	long
;	O
const	O
size_t	long
dest_size	long
=	O
dest	pointer
->	O
size	long
;	O
if	O
(	O
src_size	long
!=	O
dest_size	long
)	O
{	O
GSL_ERROR	O
(	O
"permutation lengths are not equal"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
src_size	long
;	O
j	long
++	O
)	O
{	O
dest	pointer
->	O
data	pointer
[	O
j	long
]	O
=	O
src	pointer
->	O
data	pointer
[	O
j	long
]	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
