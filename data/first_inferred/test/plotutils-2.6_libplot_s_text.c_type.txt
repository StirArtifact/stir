static	O
void	O
write_svg_text_style	function
(	O
plOutbuf	struct
*	O
page	pointer
,	O
const	O
plDrawState	struct
*	O
drawstate	pointer
,	O
int	O
h_just	int
,	O
int	O
v_just	int
)	O
;	O
typedef	O
struct	O
{	O
char	O
c	char
;	O
const	O
char	O
*	O
s	pointer
;	O
}	O
plCharEscape	struct
;	O
static	O
const	O
plCharEscape	struct
_svg_char_escapes	array
[	O
NUM_SVG_CHAR_ESCAPES	int
]	O
=	O
{	O
{	O
'\''	O
,	O
"apos"	pointer
}	O
,	O
{	O
'"'	O
,	O
"quot"	pointer
}	O
,	O
{	O
'&'	O
,	O
"amp"	pointer
}	O
,	O
{	O
'<'	O
,	O
"lt"	pointer
}	O
,	O
{	O
'>'	O
,	O
"gt"	pointer
}	O
}	O
;	O
static	O
const	O
char	O
*	O
const	O
svg_horizontal_alignment_style	array
[	O
PL_NUM_HORIZ_JUST_TYPES	int
]	O
=	O
{	O
"start"	pointer
,	O
"middle"	pointer
,	O
"end"	pointer
}	O
;	O
static	O
const	O
char	O
*	O
const	O
svg_vertical_alignment_style	array
[	O
PL_NUM_VERT_JUST_TYPES	int
]	O
=	O
{	O
"text-before-edge"	pointer
,	O
"central"	pointer
,	O
"alphabetic"	pointer
,	O
"text-after-edge"	pointer
,	O
"hanging"	pointer
}	O
;	O
double	O
_pl_s_paint_text_string	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
const	O
unsigned	O
char	O
*	O
s	pointer
,	O
int	O
h_just	int
,	O
int	O
v_just	int
)	O
{	O
const	O
unsigned	O
char	O
*	O
sp	pointer
=	O
s	pointer
;	O
unsigned	O
char	O
*	O
t	pointer
,	O
*	O
tp	pointer
;	O
int	O
i	int
,	O
n	array
=	O
0	int
;	O
double	O
local_matrix	array
[	O
6	int
]	O
;	O
double	O
angle	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
text_rotation	double
;	O
tp	pointer
=	O
t	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
(	O
2	int
+	O
MAX_SVG_CHAR_ESCAPE_LEN	int
)	O
*	O
strlen	function
(	O
(	O
const	O
char	O
*	O
)	O
s	pointer
)	O
+	O
1	int
)	O
;	O
while	O
(	O
*	O
sp	pointer
&&	O
n	array
<	O
PL_MAX_SVG_STRING_LEN	int
)	O
{	O
bool	enum
matched	enum
;	O
int	O
i	int
;	O
matched	enum
=	O
false	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NUM_SVG_CHAR_ESCAPES	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
*	O
sp	pointer
==	O
(	O
unsigned	O
char	O
)	O
_svg_char_escapes	array
[	O
i	int
]	O
.	O
c	char
)	O
{	O
matched	enum
=	O
true	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
matched	enum
)	O
{	O
*	O
tp	pointer
++	O
=	O
(	O
unsigned	O
char	O
)	O
'&'	O
;	O
strcpy	function
(	O
(	O
char	O
*	O
)	O
tp	pointer
,	O
_svg_char_escapes	array
[	O
i	int
]	O
.	O
s	pointer
)	O
;	O
tp	pointer
+=	O
strlen	function
(	O
_svg_char_escapes	array
[	O
i	int
]	O
.	O
s	pointer
)	O
;	O
*	O
tp	pointer
++	O
=	O
(	O
unsigned	O
char	O
)	O
';'	O
;	O
}	O
else	O
*	O
tp	pointer
++	O
=	O
*	O
sp	pointer
;	O
sp	pointer
++	O
;	O
n	array
++	O
;	O
}	O
*	O
tp	pointer
=	O
'\0'	O
;	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"<text "	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
local_matrix	array
[	O
0	int
]	O
=	O
cos	function
(	O
M_PI	int
*	O
angle	double
/	O
180.0	int
)	O
;	O
local_matrix	array
[	O
1	int
]	O
=	O
sin	function
(	O
M_PI	int
*	O
angle	double
/	O
180.0	int
)	O
;	O
local_matrix	array
[	O
2	int
]	O
=	O
-	O
sin	function
(	O
M_PI	int
*	O
angle	double
/	O
180.0	int
)	O
*	O
(	O
-	O
1	int
)	O
;	O
local_matrix	array
[	O
3	int
]	O
=	O
cos	function
(	O
M_PI	int
*	O
angle	double
/	O
180.0	int
)	O
*	O
(	O
-	O
1	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
)	O
local_matrix	array
[	O
i	int
]	O
*=	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_size	double
/	O
PL_SVG_FONT_SIZE_IN_PX	int
)	O
;	O
local_matrix	array
[	O
4	int
]	O
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
;	O
local_matrix	array
[	O
5	int
]	O
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
;	O
_pl_s_set_matrix	function
(	O
R___	O
(	O
_plotter	pointer
)	O
local_matrix	array
)	O
;	O
write_svg_text_style	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
drawstate	pointer
,	O
h_just	int
,	O
v_just	int
)	O
;	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
">"	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"%s"	pointer
,	O
(	O
char	O
*	O
)	O
t	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"</text>\n"	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
free	function
(	O
t	pointer
)	O
;	O
return	O
_plotter	pointer
->	O
get_text_width	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
s	pointer
)	O
;	O
}	O
static	O
void	O
write_svg_text_style	function
(	O
plOutbuf	struct
*	O
page	pointer
,	O
const	O
plDrawState	struct
*	O
drawstate	pointer
,	O
int	O
h_just	int
,	O
int	O
v_just	int
)	O
{	O
const	O
char	O
*	O
ps_name	pointer
,	O
*	O
css_family	pointer
,	O
*	O
css_generic_family	pointer
;	O
const	O
char	O
*	O
css_style	pointer
,	O
*	O
css_weight	pointer
,	O
*	O
css_stretch	pointer
;	O
bool	enum
css_family_is_ps_name	enum
;	O
char	O
color_buf	array
[	O
8	int
]	O
;	O
switch	O
(	O
drawstate	pointer
->	O
font_type	int
)	O
{	O
int	O
master_font_index	int
;	O
case	O
PL_F_POSTSCRIPT	int
:	O
master_font_index	int
=	O
(	O
_pl_g_ps_typeface_info	array
[	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
)	O
[	O
drawstate	pointer
->	O
font_index	int
]	O
;	O
ps_name	pointer
=	O
_pl_g_ps_font_info	array
[	O
master_font_index	int
]	O
.	O
ps_name	pointer
;	O
css_family	pointer
=	O
_pl_g_ps_font_info	array
[	O
master_font_index	int
]	O
.	O
css_family	pointer
;	O
css_generic_family	pointer
=	O
_pl_g_ps_font_info	array
[	O
master_font_index	int
]	O
.	O
css_generic_family	pointer
;	O
css_style	pointer
=	O
_pl_g_ps_font_info	array
[	O
master_font_index	int
]	O
.	O
css_style	pointer
;	O
css_weight	pointer
=	O
_pl_g_ps_font_info	array
[	O
master_font_index	int
]	O
.	O
css_weight	pointer
;	O
css_stretch	pointer
=	O
_pl_g_ps_font_info	array
[	O
master_font_index	int
]	O
.	O
css_stretch	pointer
;	O
page	pointer
->	O
ps_font_used	array
[	O
master_font_index	int
]	O
=	O
true	int
;	O
break	O
;	O
case	O
PL_F_PCL	int
:	O
master_font_index	int
=	O
(	O
_pl_g_pcl_typeface_info	array
[	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
)	O
[	O
drawstate	pointer
->	O
font_index	int
]	O
;	O
ps_name	pointer
=	O
_pl_g_pcl_font_info	array
[	O
master_font_index	int
]	O
.	O
ps_name	pointer
;	O
css_family	pointer
=	O
_pl_g_pcl_font_info	array
[	O
master_font_index	int
]	O
.	O
css_family	pointer
;	O
css_generic_family	pointer
=	O
_pl_g_pcl_font_info	array
[	O
master_font_index	int
]	O
.	O
css_generic_family	pointer
;	O
css_style	pointer
=	O
_pl_g_pcl_font_info	array
[	O
master_font_index	int
]	O
.	O
css_style	pointer
;	O
css_weight	pointer
=	O
_pl_g_pcl_font_info	array
[	O
master_font_index	int
]	O
.	O
css_weight	pointer
;	O
css_stretch	pointer
=	O
_pl_g_pcl_font_info	array
[	O
master_font_index	int
]	O
.	O
css_stretch	pointer
;	O
page	pointer
->	O
pcl_font_used	array
[	O
master_font_index	int
]	O
=	O
true	int
;	O
break	O
;	O
default	O
:	O
return	O
;	O
break	O
;	O
}	O
if	O
(	O
strcmp	function
(	O
ps_name	pointer
,	O
css_family	pointer
)	O
==	O
0	int
)	O
css_family_is_ps_name	enum
=	O
true	int
;	O
else	O
css_family_is_ps_name	enum
=	O
false	int
;	O
if	O
(	O
css_generic_family	pointer
)	O
{	O
if	O
(	O
css_family_is_ps_name	enum
)	O
sprintf	function
(	O
page	pointer
->	O
point	pointer
,	O
"font-family=\"%s,%s\" "	pointer
,	O
css_family	pointer
,	O
css_generic_family	pointer
)	O
;	O
else	O
sprintf	function
(	O
page	pointer
->	O
point	pointer
,	O
"font-family=\"%s,%s,%s\" "	pointer
,	O
ps_name	pointer
,	O
css_family	pointer
,	O
css_generic_family	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
css_family_is_ps_name	enum
)	O
sprintf	function
(	O
page	pointer
->	O
point	pointer
,	O
"font-family=\"%s\" "	pointer
,	O
css_family	pointer
)	O
;	O
else	O
sprintf	function
(	O
page	pointer
->	O
point	pointer
,	O
"font-family=\"%s,%s\" "	pointer
,	O
ps_name	pointer
,	O
css_family	pointer
)	O
;	O
}	O
_update_buffer	function
(	O
page	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
css_style	pointer
,	O
"normal"	pointer
)	O
!=	O
0	int
)	O
{	O
sprintf	function
(	O
page	pointer
->	O
point	pointer
,	O
"font-style=\"%s\" "	pointer
,	O
css_style	pointer
)	O
;	O
_update_buffer	function
(	O
page	pointer
)	O
;	O
}	O
if	O
(	O
strcmp	function
(	O
css_weight	pointer
,	O
"normal"	pointer
)	O
!=	O
0	int
)	O
{	O
sprintf	function
(	O
page	pointer
->	O
point	pointer
,	O
"font-weight=\"%s\" "	pointer
,	O
css_weight	pointer
)	O
;	O
_update_buffer	function
(	O
page	pointer
)	O
;	O
}	O
if	O
(	O
strcmp	function
(	O
css_stretch	pointer
,	O
"normal"	pointer
)	O
!=	O
0	int
)	O
{	O
sprintf	function
(	O
page	pointer
->	O
point	pointer
,	O
"font-stretch=\"%s\" "	pointer
,	O
css_stretch	pointer
)	O
;	O
_update_buffer	function
(	O
page	pointer
)	O
;	O
}	O
sprintf	function
(	O
page	pointer
->	O
point	pointer
,	O
"font-size=\"%.5gpx\" "	pointer
,	O
PL_SVG_FONT_SIZE_IN_PX	int
)	O
;	O
_update_buffer	function
(	O
page	pointer
)	O
;	O
if	O
(	O
h_just	int
!=	O
PL_JUST_LEFT	int
)	O
{	O
sprintf	function
(	O
page	pointer
->	O
point	pointer
,	O
"text-anchor=\"%s\" "	pointer
,	O
svg_horizontal_alignment_style	array
[	O
h_just	int
]	O
)	O
;	O
_update_buffer	function
(	O
page	pointer
)	O
;	O
}	O
if	O
(	O
v_just	int
!=	O
PL_JUST_BASE	int
)	O
{	O
sprintf	function
(	O
page	pointer
->	O
point	pointer
,	O
"alignment-baseline=\"%s\" "	pointer
,	O
svg_vertical_alignment_style	array
[	O
v_just	int
]	O
)	O
;	O
_update_buffer	function
(	O
page	pointer
)	O
;	O
}	O
sprintf	function
(	O
page	pointer
->	O
point	pointer
,	O
"stroke=\"none\" "	pointer
)	O
;	O
_update_buffer	function
(	O
page	pointer
)	O
;	O
if	O
(	O
drawstate	pointer
->	O
pen_type	int
)	O
{	O
sprintf	function
(	O
page	pointer
->	O
point	pointer
,	O
"fill=\"%s\" "	pointer
,	O
_libplot_color_to_svg_color	function
(	O
drawstate	pointer
->	O
fgcolor	struct
,	O
color_buf	array
)	O
)	O
;	O
_update_buffer	function
(	O
page	pointer
)	O
;	O
}	O
}	O