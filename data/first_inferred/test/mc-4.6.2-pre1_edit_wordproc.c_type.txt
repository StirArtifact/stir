static	O
long	O
line_start	function
(	O
WEdit	struct
*	O
edit	pointer
,	O
long	O
line	int
)	O
{	O
long	O
p	pointer
,	O
l	long
;	O
l	long
=	O
edit	pointer
->	O
curs_line	long
;	O
p	pointer
=	O
edit	pointer
->	O
curs1	long
;	O
if	O
(	O
line	int
<	O
l	long
)	O
p	pointer
=	O
edit_move_backward	function
(	O
edit	pointer
,	O
p	pointer
,	O
l	long
-	O
line	int
)	O
;	O
else	O
if	O
(	O
line	int
>	O
l	long
)	O
p	pointer
=	O
edit_move_forward	function
(	O
edit	pointer
,	O
p	pointer
,	O
line	int
-	O
l	long
,	O
0	int
)	O
;	O
p	pointer
=	O
edit_bol	function
(	O
edit	pointer
,	O
p	pointer
)	O
;	O
while	O
(	O
strchr	function
(	O
"\t "	pointer
,	O
edit_get_byte	function
(	O
edit	pointer
,	O
p	pointer
)	O
)	O
)	O
p	pointer
++	O
;	O
return	O
p	pointer
;	O
}	O
static	O
int	O
bad_line_start	function
(	O
WEdit	struct
*	O
edit	pointer
,	O
long	O
p	pointer
)	O
{	O
int	O
c	int
;	O
c	int
=	O
edit_get_byte	function
(	O
edit	pointer
,	O
p	pointer
)	O
;	O
if	O
(	O
c	int
==	O
'.'	O
)	O
{	O
if	O
(	O
edit_get_byte	function
(	O
edit	pointer
,	O
p	pointer
+	O
1	int
)	O
==	O
'.'	O
)	O
if	O
(	O
edit_get_byte	function
(	O
edit	pointer
,	O
p	pointer
+	O
2	int
)	O
==	O
'.'	O
)	O
return	O
0	int
;	O
return	O
1	int
;	O
}	O
if	O
(	O
c	int
==	O
'-'	O
)	O
{	O
if	O
(	O
edit_get_byte	function
(	O
edit	pointer
,	O
p	pointer
+	O
1	int
)	O
==	O
'-'	O
)	O
if	O
(	O
edit_get_byte	function
(	O
edit	pointer
,	O
p	pointer
+	O
2	int
)	O
==	O
'-'	O
)	O
return	O
0	int
;	O
return	O
1	int
;	O
}	O
if	O
(	O
strchr	function
(	O
NO_FORMAT_CHARS_START	pointer
,	O
c	int
)	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
long	O
begin_paragraph	function
(	O
WEdit	struct
*	O
edit	pointer
,	O
int	O
force	int
)	O
{	O
int	O
i	array
;	O
for	O
(	O
i	array
=	O
edit	pointer
->	O
curs_line	long
-	O
1	int
;	O
i	array
>=	O
0	int
;	O
i	array
--	O
)	O
{	O
if	O
(	O
line_is_blank	function
(	O
edit	pointer
,	O
i	array
)	O
)	O
{	O
i	array
++	O
;	O
break	O
;	O
}	O
if	O
(	O
force	int
)	O
{	O
if	O
(	O
bad_line_start	function
(	O
edit	pointer
,	O
line_start	function
(	O
edit	pointer
,	O
i	array
)	O
)	O
)	O
{	O
i	array
++	O
;	O
break	O
;	O
}	O
}	O
}	O
return	O
edit_move_backward	function
(	O
edit	pointer
,	O
edit_bol	function
(	O
edit	pointer
,	O
edit	pointer
->	O
curs1	long
)	O
,	O
edit	pointer
->	O
curs_line	long
-	O
i	array
)	O
;	O
}	O
static	O
long	O
end_paragraph	function
(	O
WEdit	struct
*	O
edit	pointer
,	O
int	O
force	int
)	O
{	O
int	O
i	array
;	O
for	O
(	O
i	array
=	O
edit	pointer
->	O
curs_line	long
+	O
1	int
;	O
i	array
<=	O
edit	pointer
->	O
total_lines	long
;	O
i	array
++	O
)	O
{	O
if	O
(	O
line_is_blank	function
(	O
edit	pointer
,	O
i	array
)	O
)	O
{	O
i	array
--	O
;	O
break	O
;	O
}	O
if	O
(	O
force	int
)	O
if	O
(	O
bad_line_start	function
(	O
edit	pointer
,	O
line_start	function
(	O
edit	pointer
,	O
i	array
)	O
)	O
)	O
{	O
i	array
--	O
;	O
break	O
;	O
}	O
}	O
return	O
edit_eol	function
(	O
edit	pointer
,	O
edit_move_forward	function
(	O
edit	pointer
,	O
edit_bol	function
(	O
edit	pointer
,	O
edit	pointer
->	O
curs1	long
)	O
,	O
i	array
-	O
edit	pointer
->	O
curs_line	long
,	O
0	int
)	O
)	O
;	O
}	O
static	O
unsigned	O
char	O
*	O
get_paragraph	function
(	O
WEdit	struct
*	O
edit	pointer
,	O
long	O
p	pointer
,	O
long	O
q	long
,	O
int	O
indent	int
,	O
int	O
*	O
size	long
)	O
{	O
unsigned	O
char	O
*	O
s	pointer
,	O
*	O
t	long
;	O
t	long
=	O
g_malloc	function
(	O
2	int
*	O
(	O
q	long
-	O
p	pointer
)	O
+	O
100	int
)	O
;	O
if	O
(	O
!	O
t	long
)	O
return	O
0	int
;	O
for	O
(	O
s	pointer
=	O
t	long
;	O
p	pointer
<	O
q	long
;	O
p	pointer
++	O
,	O
s	pointer
++	O
)	O
{	O
if	O
(	O
indent	int
)	O
if	O
(	O
edit_get_byte	function
(	O
edit	pointer
,	O
p	pointer
-	O
1	int
)	O
==	O
'\n'	O
)	O
while	O
(	O
strchr	function
(	O
"\t "	pointer
,	O
edit_get_byte	function
(	O
edit	pointer
,	O
p	pointer
)	O
)	O
)	O
p	pointer
++	O
;	O
*	O
s	pointer
=	O
edit_get_byte	function
(	O
edit	pointer
,	O
p	pointer
)	O
;	O
}	O
*	O
size	long
=	O
(	O
unsigned	O
long	O
)	O
s	pointer
-	O
(	O
unsigned	O
long	O
)	O
t	long
;	O
t	long
[	O
*	O
size	long
]	O
=	O
'\n'	O
;	O
return	O
t	long
;	O
}	O
static	O
void	O
strip_newlines	function
(	O
unsigned	O
char	O
*	O
t	long
,	O
int	O
size	long
)	O
{	O
unsigned	O
char	O
*	O
p	pointer
=	O
t	long
;	O
while	O
(	O
size	long
--	O
)	O
{	O
*	O
p	pointer
=	O
*	O
p	pointer
==	O
'\n'	O
?	O
' '	O
:	O
*	O
p	pointer
;	O
p	pointer
++	O
;	O
}	O
}	O
static	O
inline	O
int	O
next_tab_pos	function
(	O
int	O
x	array
)	O
{	O
return	O
x	array
+=	O
tab_width	O
-	O
x	array
%	O
tab_width	O
;	O
}	O
static	O
int	O
line_pixel_length	function
(	O
unsigned	O
char	O
*	O
t	long
,	O
long	O
b	pointer
,	O
int	O
l	long
)	O
{	O
int	O
x	array
=	O
0	int
,	O
c	int
,	O
xn	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
t	long
[	O
b	pointer
]	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
'\n'	O
:	O
return	O
b	pointer
;	O
case	O
'\t'	O
:	O
xn	int
=	O
next_tab_pos	function
(	O
x	array
)	O
;	O
break	O
;	O
default	O
:	O
xn	int
=	O
x	array
+	O
1	int
;	O
break	O
;	O
}	O
if	O
(	O
xn	int
>	O
l	long
)	O
break	O
;	O
x	array
=	O
xn	int
;	O
b	pointer
++	O
;	O
}	O
return	O
b	pointer
;	O
}	O
static	O
int	O
next_word_start	function
(	O
unsigned	O
char	O
*	O
t	long
,	O
int	O
q	long
,	O
int	O
size	long
)	O
{	O
int	O
i	array
;	O
int	O
saw_ws	int
=	O
0	int
;	O
for	O
(	O
i	array
=	O
q	long
;	O
i	array
<	O
size	long
;	O
i	array
++	O
)	O
{	O
switch	O
(	O
t	long
[	O
i	array
]	O
)	O
{	O
case	O
'\n'	O
:	O
return	O
-	O
1	int
;	O
case	O
'\t'	O
:	O
case	O
' '	O
:	O
saw_ws	int
=	O
1	int
;	O
break	O
;	O
default	O
:	O
if	O
(	O
saw_ws	int
!=	O
0	int
)	O
return	O
i	array
;	O
break	O
;	O
}	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
word_start	function
(	O
unsigned	O
char	O
*	O
t	long
,	O
int	O
q	long
,	O
int	O
size	long
)	O
{	O
int	O
i	array
=	O
q	long
;	O
if	O
(	O
t	long
[	O
q	long
]	O
==	O
' '	O
||	O
t	long
[	O
q	long
]	O
==	O
'\t'	O
)	O
return	O
next_word_start	function
(	O
t	long
,	O
q	long
,	O
size	long
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
c	int
;	O
if	O
(	O
!	O
i	array
)	O
return	O
-	O
1	int
;	O
c	int
=	O
t	long
[	O
i	array
-	O
1	int
]	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
)	O
return	O
i	array
;	O
i	array
--	O
;	O
}	O
}	O
static	O
void	O
format_this	function
(	O
unsigned	O
char	O
*	O
t	long
,	O
int	O
size	long
,	O
int	O
indent	int
)	O
{	O
int	O
q	long
=	O
0	int
,	O
ww	int
;	O
strip_newlines	function
(	O
t	long
,	O
size	long
)	O
;	O
ww	int
=	O
option_word_wrap_line_length	int
*	O
FONT_MEAN_WIDTH	int
-	O
indent	int
;	O
if	O
(	O
ww	int
<	O
FONT_MEAN_WIDTH	int
*	O
2	int
)	O
ww	int
=	O
FONT_MEAN_WIDTH	int
*	O
2	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
p	pointer
;	O
q	long
=	O
line_pixel_length	function
(	O
t	long
,	O
q	long
,	O
ww	int
)	O
;	O
if	O
(	O
q	long
>	O
size	long
)	O
break	O
;	O
if	O
(	O
t	long
[	O
q	long
]	O
==	O
'\n'	O
)	O
break	O
;	O
p	pointer
=	O
word_start	function
(	O
t	long
,	O
q	long
,	O
size	long
)	O
;	O
if	O
(	O
p	pointer
==	O
-	O
1	int
)	O
q	long
=	O
next_word_start	function
(	O
t	long
,	O
q	long
,	O
size	long
)	O
;	O
else	O
q	long
=	O
p	pointer
;	O
if	O
(	O
q	long
==	O
-	O
1	int
)	O
break	O
;	O
if	O
(	O
q	long
)	O
t	long
[	O
q	long
-	O
1	int
]	O
=	O
'\n'	O
;	O
}	O
}	O
static	O
void	O
replace_at	function
(	O
WEdit	struct
*	O
edit	pointer
,	O
long	O
q	long
,	O
int	O
c	int
)	O
{	O
edit_cursor_move	function
(	O
edit	pointer
,	O
q	long
-	O
edit	pointer
->	O
curs1	long
)	O
;	O
edit_delete	function
(	O
edit	pointer
)	O
;	O
edit_insert_ahead	function
(	O
edit	pointer
,	O
c	int
)	O
;	O
}	O
static	O
void	O
put_paragraph	function
(	O
WEdit	struct
*	O
edit	pointer
,	O
unsigned	O
char	O
*	O
t	long
,	O
long	O
p	pointer
,	O
int	O
indent	int
,	O
int	O
size	long
)	O
{	O
long	O
cursor	long
;	O
int	O
i	array
,	O
c	int
=	O
0	int
;	O
cursor	long
=	O
edit	pointer
->	O
curs1	long
;	O
if	O
(	O
indent	int
)	O
while	O
(	O
strchr	function
(	O
"\t "	pointer
,	O
edit_get_byte	function
(	O
edit	pointer
,	O
p	pointer
)	O
)	O
)	O
p	pointer
++	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
size	long
;	O
i	array
++	O
,	O
p	pointer
++	O
)	O
{	O
if	O
(	O
i	array
&&	O
indent	int
)	O
{	O
if	O
(	O
t	long
[	O
i	array
-	O
1	int
]	O
==	O
'\n'	O
&&	O
c	int
==	O
'\n'	O
)	O
{	O
while	O
(	O
strchr	function
(	O
"\t "	pointer
,	O
edit_get_byte	function
(	O
edit	pointer
,	O
p	pointer
)	O
)	O
)	O
p	pointer
++	O
;	O
}	O
else	O
if	O
(	O
t	long
[	O
i	array
-	O
1	int
]	O
==	O
'\n'	O
)	O
{	O
long	O
curs	long
;	O
edit_cursor_move	function
(	O
edit	pointer
,	O
p	pointer
-	O
edit	pointer
->	O
curs1	long
)	O
;	O
curs	long
=	O
edit	pointer
->	O
curs1	long
;	O
edit_insert_indent	function
(	O
edit	pointer
,	O
indent	int
)	O
;	O
if	O
(	O
cursor	long
>=	O
curs	long
)	O
cursor	long
+=	O
edit	pointer
->	O
curs1	long
-	O
p	pointer
;	O
p	pointer
=	O
edit	pointer
->	O
curs1	long
;	O
}	O
else	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
{	O
edit_cursor_move	function
(	O
edit	pointer
,	O
p	pointer
-	O
edit	pointer
->	O
curs1	long
)	O
;	O
while	O
(	O
strchr	function
(	O
"\t "	pointer
,	O
edit_get_byte	function
(	O
edit	pointer
,	O
p	pointer
)	O
)	O
)	O
{	O
edit_delete	function
(	O
edit	pointer
)	O
;	O
if	O
(	O
cursor	long
>	O
edit	pointer
->	O
curs1	long
)	O
cursor	long
--	O
;	O
}	O
p	pointer
=	O
edit	pointer
->	O
curs1	long
;	O
}	O
}	O
c	int
=	O
edit_get_byte	function
(	O
edit	pointer
,	O
p	pointer
)	O
;	O
if	O
(	O
c	int
!=	O
t	long
[	O
i	array
]	O
)	O
replace_at	function
(	O
edit	pointer
,	O
p	pointer
,	O
t	long
[	O
i	array
]	O
)	O
;	O
}	O
edit_cursor_move	function
(	O
edit	pointer
,	O
cursor	long
-	O
edit	pointer
->	O
curs1	long
)	O
;	O
}	O
static	O
int	O
test_indent	function
(	O
WEdit	struct
*	O
edit	pointer
,	O
long	O
p	pointer
,	O
long	O
q	long
)	O
{	O
int	O
indent	int
;	O
indent	int
=	O
edit_indent_width	function
(	O
edit	pointer
,	O
p	pointer
++	O
)	O
;	O
if	O
(	O
!	O
indent	int
)	O
return	O
0	int
;	O
for	O
(	O
;	O
p	pointer
<	O
q	long
;	O
p	pointer
++	O
)	O
if	O
(	O
edit_get_byte	function
(	O
edit	pointer
,	O
p	pointer
-	O
1	int
)	O
==	O
'\n'	O
)	O
if	O
(	O
indent	int
!=	O
edit_indent_width	function
(	O
edit	pointer
,	O
p	pointer
)	O
)	O
return	O
0	int
;	O
return	O
indent	int
;	O
}	O
void	O
format_paragraph	function
(	O
WEdit	struct
*	O
edit	pointer
,	O
int	O
force	int
)	O
{	O
long	O
p	pointer
,	O
q	long
;	O
int	O
size	long
;	O
unsigned	O
char	O
*	O
t	long
;	O
int	O
indent	int
=	O
0	int
;	O
if	O
(	O
option_word_wrap_line_length	int
<	O
2	int
)	O
return	O
;	O
if	O
(	O
line_is_blank	function
(	O
edit	pointer
,	O
edit	pointer
->	O
curs_line	long
)	O
)	O
return	O
;	O
p	pointer
=	O
begin_paragraph	function
(	O
edit	pointer
,	O
force	int
)	O
;	O
q	long
=	O
end_paragraph	function
(	O
edit	pointer
,	O
force	int
)	O
;	O
indent	int
=	O
test_indent	function
(	O
edit	pointer
,	O
p	pointer
,	O
q	long
)	O
;	O
t	long
=	O
get_paragraph	function
(	O
edit	pointer
,	O
p	pointer
,	O
q	long
,	O
indent	int
,	O
&	O
size	long
)	O
;	O
if	O
(	O
!	O
t	long
)	O
return	O
;	O
if	O
(	O
!	O
force	int
)	O
{	O
int	O
i	array
;	O
if	O
(	O
strchr	function
(	O
NO_FORMAT_CHARS_START	pointer
,	O
*	O
t	long
)	O
)	O
{	O
g_free	function
(	O
t	long
)	O
;	O
return	O
;	O
}	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
size	long
-	O
1	int
;	O
i	array
++	O
)	O
{	O
if	O
(	O
t	long
[	O
i	array
]	O
==	O
'\n'	O
)	O
{	O
if	O
(	O
strchr	function
(	O
NO_FORMAT_CHARS_START	pointer
"\t "	pointer
,	O
t	long
[	O
i	array
+	O
1	int
]	O
)	O
)	O
{	O
g_free	function
(	O
t	long
)	O
;	O
return	O
;	O
}	O
}	O
}	O
}	O
format_this	function
(	O
t	long
,	O
q	long
-	O
p	pointer
,	O
indent	int
)	O
;	O
put_paragraph	function
(	O
edit	pointer
,	O
t	long
,	O
p	pointer
,	O
indent	int
,	O
size	long
)	O
;	O
g_free	function
(	O
t	long
)	O
;	O
edit_scroll_left	function
(	O
edit	pointer
,	O
-	O
edit	pointer
->	O
start_col	long
)	O
;	O
}	O