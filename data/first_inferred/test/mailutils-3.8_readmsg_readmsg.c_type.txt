static	O
void	O
print_unix_header	function
(	O
mu_message_t	pointer
)	O
;	O
static	O
void	O
print_header	function
(	O
mu_message_t	pointer
,	O
int	O
,	O
int	O
,	O
char	O
*	O
*	O
)	O
;	O
static	O
void	O
print_body	function
(	O
mu_message_t	pointer
)	O
;	O
static	O
int	O
string_starts_with	function
(	O
const	O
char	O
*	O
s1	pointer
,	O
const	O
char	O
*	O
s2	pointer
)	O
;	O
int	O
dbug	int
=	O
0	int
;	O
const	O
char	O
*	O
mailbox_name	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
weedlist	pointer
=	O
NULL	O
;	O
int	O
no_header	int
=	O
0	int
;	O
int	O
all_header	int
=	O
0	int
;	O
int	O
form_feed	int
=	O
0	int
;	O
int	O
show_all	int
=	O
0	int
;	O
static	O
struct	O
mu_option	struct
readmsg_options	array
[	O
]	O
=	O
{	O
{	O
"debug"	pointer
,	O
'd'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"display debugging information"	pointer
)	O
,	O
mu_c_incr	int
,	O
&	O
dbug	int
}	O
,	O
{	O
"header"	pointer
,	O
'h'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"display entire headers"	pointer
)	O
,	O
mu_c_bool	int
,	O
&	O
all_header	int
}	O
,	O
{	O
"weedlist"	pointer
,	O
'w'	O
,	O
N_	O
(	O
"LIST"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"list of header names separated by whitespace or commas"	pointer
)	O
,	O
mu_c_string	int
,	O
&	O
weedlist	pointer
}	O
,	O
{	O
"folder"	pointer
,	O
'f'	O
,	O
N_	O
(	O
"FOLDER"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"folder to use"	pointer
)	O
,	O
mu_c_string	int
,	O
&	O
mailbox_name	pointer
}	O
,	O
{	O
"no-header"	pointer
,	O
'n'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"exclude all headers"	pointer
)	O
,	O
mu_c_bool	int
,	O
&	O
no_header	int
}	O
,	O
{	O
"form-feeds"	pointer
,	O
'p'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"output formfeeds between messages"	pointer
)	O
,	O
mu_c_bool	int
,	O
&	O
form_feed	int
}	O
,	O
{	O
"show-all-match"	pointer
,	O
'a'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"print all messages matching pattern, not only the first"	pointer
)	O
,	O
mu_c_bool	int
,	O
&	O
show_all	int
}	O
,	O
MU_OPTION_END	O
}	O
,	O
*	O
options	array
[	O
]	O
=	O
{	O
readmsg_options	array
,	O
NULL	O
}	O
;	O
struct	O
mu_cfg_param	struct
readmsg_cfg_param	array
[	O
]	O
=	O
{	O
{	O
"debug"	pointer
,	O
mu_c_int	int
,	O
&	O
dbug	int
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Set debug verbosity level."	pointer
)	O
}	O
,	O
{	O
"header"	pointer
,	O
mu_c_bool	int
,	O
&	O
all_header	int
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Display entire headers."	pointer
)	O
}	O
,	O
{	O
"weedlist"	pointer
,	O
mu_c_string	int
,	O
&	O
weedlist	pointer
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Display only headers from this list.  Argument is a list of header "	pointer
"names separated by whitespace or commas."	pointer
)	O
,	O
N_	O
(	O
"list"	pointer
)	O
}	O
,	O
{	O
"folder"	pointer
,	O
mu_c_string	int
,	O
&	O
mailbox_name	pointer
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Read messages from this folder."	pointer
)	O
}	O
,	O
{	O
"no-header"	pointer
,	O
mu_c_bool	int
,	O
&	O
no_header	int
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Exclude all headers."	pointer
)	O
}	O
,	O
{	O
"form-feeds"	pointer
,	O
mu_c_bool	int
,	O
&	O
form_feed	int
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Output formfeed character between messages."	pointer
)	O
}	O
,	O
{	O
"show-all-match"	pointer
,	O
mu_c_bool	int
,	O
&	O
show_all	int
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Print all messages matching pattern, not only the first."	pointer
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
struct	O
mu_cli_setup	struct
cli	struct
=	O
{	O
options	array
,	O
readmsg_cfg_param	array
,	O
N_	O
(	O
"GNU readmsg -- print messages."	pointer
)	O
,	O
NULL	O
}	O
;	O
static	O
char	O
*	O
readmsg_capa	array
[	O
]	O
=	O
{	O
"debug"	pointer
,	O
"mailbox"	pointer
,	O
"locking"	pointer
,	O
NULL	O
}	O
;	O
static	O
int	O
string_starts_with	function
(	O
const	O
char	O
*	O
s1	pointer
,	O
const	O
char	O
*	O
s2	pointer
)	O
{	O
const	O
unsigned	O
char	O
*	O
p1	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
s1	pointer
;	O
const	O
unsigned	O
char	O
*	O
p2	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
s2	pointer
;	O
int	O
n	long
=	O
0	int
;	O
if	O
(	O
s1	pointer
==	O
NULL	O
||	O
s2	pointer
==	O
NULL	O
)	O
return	O
n	long
;	O
while	O
(	O
*	O
p1	pointer
&&	O
*	O
p2	pointer
)	O
{	O
if	O
(	O
(	O
n	long
=	O
mu_toupper	O
(	O
*	O
p1	pointer
++	O
)	O
-	O
mu_toupper	O
(	O
*	O
p2	pointer
++	O
)	O
)	O
!=	O
0	int
)	O
break	O
;	O
}	O
return	O
(	O
n	long
==	O
0	int
)	O
;	O
}	O
static	O
void	O
print_unix_header	function
(	O
mu_message_t	pointer
message	pointer
)	O
{	O
const	O
char	O
*	O
buf	pointer
;	O
size_t	long
size	pointer
;	O
mu_envelope_t	pointer
envelope	pointer
=	O
NULL	O
;	O
mu_message_get_envelope	function
(	O
message	pointer
,	O
&	O
envelope	pointer
)	O
;	O
if	O
(	O
mu_envelope_sget_sender	function
(	O
envelope	pointer
,	O
&	O
buf	pointer
)	O
)	O
buf	pointer
=	O
"UNKNOWN"	pointer
;	O
mu_printf	function
(	O
"From %s "	pointer
,	O
buf	pointer
)	O
;	O
if	O
(	O
mu_envelope_sget_date	function
(	O
envelope	pointer
,	O
&	O
buf	pointer
)	O
)	O
{	O
char	O
datebuf	array
[	O
MU_DATETIME_FROM_LENGTH	int
+	O
1	int
]	O
;	O
time_t	long
t	long
;	O
struct	O
tm	struct
*	O
tm	struct
;	O
t	long
=	O
time	struct
(	O
NULL	O
)	O
;	O
tm	struct
=	O
gmtime	function
(	O
&	O
t	long
)	O
;	O
mu_strftime	function
(	O
datebuf	array
,	O
sizeof	O
datebuf	array
,	O
MU_DATETIME_FROM	pointer
,	O
tm	struct
)	O
;	O
buf	pointer
=	O
datebuf	array
;	O
}	O
mu_printf	function
(	O
"%s"	pointer
,	O
buf	pointer
)	O
;	O
size	pointer
=	O
strlen	function
(	O
buf	pointer
)	O
;	O
if	O
(	O
size	pointer
>	O
1	int
&&	O
buf	pointer
[	O
size	pointer
-	O
1	int
]	O
!=	O
'\n'	O
)	O
mu_printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
static	O
void	O
print_header	function
(	O
mu_message_t	pointer
message	pointer
,	O
int	O
unix_header	int
,	O
int	O
weedc	int
,	O
char	O
*	O
*	O
weedv	pointer
)	O
{	O
mu_header_t	pointer
header	pointer
=	O
NULL	O
;	O
mu_message_get_header	function
(	O
message	pointer
,	O
&	O
header	pointer
)	O
;	O
if	O
(	O
weedc	int
==	O
0	int
)	O
{	O
mu_stream_t	pointer
stream	pointer
=	O
NULL	O
;	O
mu_header_get_streamref	function
(	O
header	pointer
,	O
&	O
stream	pointer
)	O
;	O
mu_stream_copy	function
(	O
mu_strout	pointer
,	O
stream	pointer
,	O
0	int
,	O
NULL	O
)	O
;	O
mu_stream_destroy	function
(	O
&	O
stream	pointer
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
size_t	long
count	pointer
;	O
size_t	long
i	long
;	O
status	int
=	O
mu_header_get_field_count	function
(	O
header	pointer
,	O
&	O
count	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot get number of headers: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
return	O
;	O
}	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
count	pointer
;	O
i	long
++	O
)	O
{	O
int	O
j	int
;	O
const	O
char	O
*	O
name	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
value	pointer
=	O
NULL	O
;	O
mu_header_sget_field_name	function
(	O
header	pointer
,	O
i	long
,	O
&	O
name	pointer
)	O
;	O
mu_header_sget_field_value	function
(	O
header	pointer
,	O
i	long
,	O
&	O
value	pointer
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
weedc	int
;	O
j	int
++	O
)	O
{	O
if	O
(	O
weedv	pointer
[	O
j	int
]	O
[	O
0	int
]	O
==	O
'!'	O
)	O
{	O
if	O
(	O
string_starts_with	function
(	O
name	pointer
,	O
weedv	pointer
[	O
j	int
]	O
+	O
1	int
)	O
)	O
break	O
;	O
}	O
else	O
if	O
(	O
string_starts_with	function
(	O
name	pointer
,	O
weedv	pointer
[	O
j	int
]	O
)	O
)	O
{	O
if	O
(	O
value	pointer
&&	O
*	O
value	pointer
)	O
mu_printf	function
(	O
"%s: %s\n"	pointer
,	O
name	pointer
,	O
value	pointer
)	O
;	O
}	O
}	O
}	O
mu_printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
}	O
static	O
void	O
print_body	function
(	O
mu_message_t	pointer
message	pointer
)	O
{	O
int	O
status	int
;	O
mu_body_t	pointer
body	pointer
=	O
NULL	O
;	O
mu_stream_t	pointer
stream	pointer
=	O
NULL	O
;	O
mu_message_get_body	function
(	O
message	pointer
,	O
&	O
body	pointer
)	O
;	O
status	int
=	O
mu_body_get_streamref	function
(	O
body	pointer
,	O
&	O
stream	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot get body stream: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
return	O
;	O
}	O
mu_stream_copy	function
(	O
mu_strout	pointer
,	O
stream	pointer
,	O
0	int
,	O
NULL	O
)	O
;	O
mu_stream_destroy	function
(	O
&	O
stream	pointer
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
status	int
;	O
int	O
*	O
set	pointer
=	O
NULL	O
;	O
int	O
n	long
=	O
0	int
;	O
int	O
i	long
;	O
mu_mailbox_t	pointer
mbox	pointer
=	O
NULL	O
;	O
struct	O
mu_wordsplit	struct
ws	pointer
;	O
char	O
*	O
*	O
weedv	pointer
;	O
int	O
weedc	int
;	O
int	O
unix_header	int
=	O
0	int
;	O
MU_APP_INIT_NLS	O
(	O
)	O
;	O
mu_register_all_mbox_formats	O
(	O
)	O
;	O
mu_register_extra_formats	O
(	O
)	O
;	O
mu_auth_register_module	function
(	O
&	O
mu_auth_tls_module	struct
)	O
;	O
mu_cli	function
(	O
argc	int
,	O
argv	pointer
,	O
&	O
cli	struct
,	O
readmsg_capa	array
,	O
NULL	O
,	O
&	O
argc	int
,	O
&	O
argv	pointer
)	O
;	O
if	O
(	O
argc	int
==	O
0	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"not enough arguments"	pointer
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
status	int
=	O
mu_mailbox_create_default	function
(	O
&	O
mbox	pointer
,	O
mailbox_name	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
{	O
if	O
(	O
mailbox_name	pointer
)	O
mu_error	function
(	O
_	O
(	O
"could not create mailbox `%s': %s"	pointer
)	O
,	O
mailbox_name	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
else	O
mu_error	function
(	O
_	O
(	O
"could not create default mailbox: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
if	O
(	O
dbug	int
)	O
{	O
mu_debug_set_category_level	function
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_LEVEL_UPTO	O
(	O
MU_DEBUG_PROT	int
)	O
)	O
;	O
}	O
status	int
=	O
mu_mailbox_open	function
(	O
mbox	pointer
,	O
MU_STREAM_READ	int
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
{	O
mu_url_t	pointer
url	pointer
=	O
NULL	O
;	O
mu_mailbox_get_url	function
(	O
mbox	pointer
,	O
&	O
url	pointer
)	O
;	O
mu_error	function
(	O
_	O
(	O
"could not open mailbox `%s': %s"	pointer
)	O
,	O
mu_url_to_string	function
(	O
url	pointer
)	O
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
if	O
(	O
weedlist	pointer
==	O
NULL	O
)	O
weedlist	pointer
=	O
"Date To Cc Subject From Apparently-"	pointer
;	O
ws	pointer
.	O
ws_delim	pointer
=	O
WEEDLIST_SEPARATOR	pointer
;	O
status	int
=	O
mu_wordsplit	struct
(	O
weedlist	pointer
,	O
&	O
ws	pointer
,	O
MU_WRDSF_DEFFLAGS	O
|	O
MU_WRDSF_DELIM	O
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot parse weedlist: %s"	pointer
)	O
,	O
mu_wordsplit_strerror	function
(	O
&	O
ws	pointer
)	O
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
if	O
(	O
ws	pointer
.	O
ws_wordc	long
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ws	pointer
.	O
ws_wordc	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
mu_c_strcasecmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	long
]	O
,	O
"From_"	pointer
)	O
==	O
0	int
)	O
{	O
int	O
j	int
;	O
unix_header	int
=	O
1	int
;	O
free	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	long
]	O
)	O
;	O
for	O
(	O
j	int
=	O
i	long
;	O
j	int
<	O
ws	pointer
.	O
ws_wordc	long
;	O
j	int
++	O
)	O
ws	pointer
.	O
ws_wordv	pointer
[	O
j	int
]	O
=	O
ws	pointer
.	O
ws_wordv	pointer
[	O
j	int
+	O
1	int
]	O
;	O
ws	pointer
.	O
ws_wordc	long
--	O
;	O
if	O
(	O
ws	pointer
.	O
ws_wordc	long
==	O
0	int
&&	O
!	O
all_header	int
)	O
no_header	int
=	O
1	int
;	O
}	O
}	O
weedc	int
=	O
ws	pointer
.	O
ws_wordc	long
;	O
weedv	pointer
=	O
ws	pointer
.	O
ws_wordv	pointer
;	O
}	O
if	O
(	O
all_header	int
)	O
{	O
unix_header	int
=	O
1	int
;	O
weedc	int
=	O
0	int
;	O
weedv	pointer
=	O
NULL	O
;	O
}	O
msglist	function
(	O
mbox	pointer
,	O
show_all	int
,	O
argc	int
,	O
argv	pointer
,	O
&	O
set	pointer
,	O
&	O
n	long
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	long
;	O
++	O
i	long
)	O
{	O
mu_message_t	pointer
msg	pointer
=	O
NULL	O
;	O
status	int
=	O
mu_mailbox_get_message	function
(	O
mbox	pointer
,	O
set	pointer
[	O
i	long
]	O
,	O
&	O
msg	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
{	O
mu_error	function
(	O
"mu_mailbox_get_message: %s"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
if	O
(	O
unix_header	int
)	O
print_unix_header	function
(	O
msg	pointer
)	O
;	O
if	O
(	O
!	O
no_header	int
)	O
print_header	function
(	O
msg	pointer
,	O
unix_header	int
,	O
weedc	int
,	O
weedv	pointer
)	O
;	O
print_body	function
(	O
msg	pointer
)	O
;	O
mu_printf	function
(	O
form_feed	int
?	O
"\f"	pointer
:	O
"\n"	pointer
)	O
;	O
}	O
mu_printf	function
(	O
"\n"	pointer
)	O
;	O
mu_mailbox_close	function
(	O
mbox	pointer
)	O
;	O
mu_mailbox_destroy	function
(	O
&	O
mbox	pointer
)	O
;	O
return	O
0	int
;	O
}	O