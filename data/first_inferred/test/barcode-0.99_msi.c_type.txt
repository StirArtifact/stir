static	O
char	O
*	O
patterns	array
[	O
]	O
=	O
{	O
"13"	*
,	O
"31"	*
}	O
;	O
static	O
char	O
*	O
fillers	array
[	O
]	O
=	O
{	O
"031"	*
,	O
"131"	*
}	O
;	O
static	O
int	O
width	int
=	O
16	int
,	O
startpos	int
=	O
6	int
;	O
int	O
Barcode_msi_verify	function
(	O
char	O
*	O
text	*
)	O
{	O
int	O
i	int
;	O
if	O
(	O
!	O
strlen	function
(	O
text	*
)	O
)	O
return	O
-	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
text	*
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
!	O
isdigit	function
(	O
text	*
[	O
i	int
]	O
)	O
)	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
add_one	function
(	O
char	O
*	O
ptr	*
,	O
int	O
code	int
)	O
{	O
sprintf	function
(	O
ptr	*
,	O
"%s%s%s%s"	*
,	O
patterns	array
[	O
(	O
code	int
>>	O
3	int
)	O
&	O
1	int
]	O
,	O
patterns	array
[	O
(	O
code	int
>>	O
2	int
)	O
&	O
1	int
]	O
,	O
patterns	array
[	O
(	O
code	int
>>	O
1	int
)	O
&	O
1	int
]	O
,	O
patterns	array
[	O
code	int
&	O
1	int
]	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
Barcode_msi_encode	function
(	O
struct	O
Barcode_Item	struct
*	O
bc	*
)	O
{	O
static	O
char	O
*	O
text	*
;	O
static	O
char	O
*	O
partial	*
;	O
static	O
char	O
*	O
textinfo	*
;	O
char	O
*	O
ptr	*
,	O
*	O
textptr	*
;	O
int	O
i	int
,	O
code	int
,	O
textpos	int
,	O
usesum	int
,	O
checksum	int
=	O
0	int
;	O
if	O
(	O
bc	*
->	O
partial	*
)	O
free	function
(	O
bc	*
->	O
partial	*
)	O
;	O
if	O
(	O
bc	*
->	O
textinfo	*
)	O
free	function
(	O
bc	*
->	O
textinfo	*
)	O
;	O
bc	*
->	O
partial	*
=	O
bc	*
->	O
textinfo	*
=	O
NULL	O
;	O
if	O
(	O
!	O
bc	*
->	O
encoding	*
)	O
bc	*
->	O
encoding	*
=	O
strdup	function
(	O
"msi"	*
)	O
;	O
if	O
(	O
(	O
bc	*
->	O
flags	int
&	O
BARCODE_NO_CHECKSUM	int
)	O
)	O
usesum	int
=	O
0	int
;	O
else	O
usesum	int
=	O
1	int
;	O
text	*
=	O
bc	*
->	O
ascii	*
;	O
partial	*
=	O
malloc	function
(	O
3	int
+	O
8	int
*	O
(	O
strlen	function
(	O
text	*
)	O
+	O
1	int
)	O
+	O
3	int
+	O
2	int
)	O
;	O
if	O
(	O
!	O
partial	*
)	O
{	O
bc	*
->	O
error	int
=	O
errno	O
;	O
return	O
-	O
1	int
;	O
}	O
textinfo	*
=	O
malloc	function
(	O
10	int
*	O
strlen	function
(	O
text	*
)	O
+	O
2	int
)	O
;	O
if	O
(	O
!	O
textinfo	*
)	O
{	O
bc	*
->	O
error	int
=	O
errno	O
;	O
free	function
(	O
partial	*
)	O
;	O
return	O
-	O
1	int
;	O
}	O
strcpy	function
(	O
partial	*
,	O
fillers	array
[	O
0	int
]	O
)	O
;	O
ptr	*
=	O
partial	*
+	O
strlen	function
(	O
partial	*
)	O
;	O
textptr	*
=	O
textinfo	*
;	O
textpos	int
=	O
startpos	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
strlen	function
(	O
text	*
)	O
;	O
i	int
++	O
)	O
{	O
code	int
=	O
text	*
[	O
i	int
]	O
-	O
'0'	O
;	O
add_one	function
(	O
ptr	*
,	O
code	int
)	O
;	O
sprintf	function
(	O
textptr	*
,	O
"%i:12:%c "	*
,	O
textpos	int
,	O
text	*
[	O
i	int
]	O
)	O
;	O
textpos	int
+=	O
width	int
;	O
textptr	*
+=	O
strlen	function
(	O
textptr	*
)	O
;	O
ptr	*
+=	O
strlen	function
(	O
ptr	*
)	O
;	O
if	O
(	O
usesum	int
)	O
{	O
if	O
(	O
(	O
i	int
^	O
strlen	function
(	O
text	*
)	O
)	O
&	O
1	int
)	O
{	O
checksum	int
+=	O
2	int
*	O
code	int
+	O
(	O
2	int
*	O
code	int
)	O
/	O
10	int
;	O
}	O
else	O
{	O
checksum	int
+=	O
code	int
;	O
}	O
}	O
}	O
if	O
(	O
usesum	int
)	O
{	O
checksum	int
=	O
(	O
checksum	int
+	O
9	int
)	O
/	O
10	int
*	O
10	int
-	O
checksum	int
;	O
add_one	function
(	O
ptr	*
,	O
checksum	int
)	O
;	O
ptr	*
+=	O
strlen	function
(	O
ptr	*
)	O
;	O
}	O
strcpy	function
(	O
ptr	*
,	O
fillers	array
[	O
1	int
]	O
)	O
;	O
bc	*
->	O
partial	*
=	O
partial	*
;	O
bc	*
->	O
textinfo	*
=	O
textinfo	*
;	O
return	O
0	int
;	O
}	O