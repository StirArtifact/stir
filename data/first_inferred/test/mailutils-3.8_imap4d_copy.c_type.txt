int	O
imap4d_copy	function
(	O
struct	O
imap4d_session	struct
*	O
session	pointer
,	O
struct	O
imap4d_command	struct
*	O
command	pointer
,	O
imap4d_tokbuf_t	pointer
tok	pointer
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
text	pointer
;	O
if	O
(	O
imap4d_tokbuf_argc	function
(	O
tok	pointer
)	O
!=	O
4	int
)	O
return	O
io_completion_response	function
(	O
command	pointer
,	O
RESP_BAD	int
,	O
"Invalid arguments"	pointer
)	O
;	O
rc	int
=	O
imap4d_copy0	function
(	O
tok	pointer
,	O
0	int
,	O
&	O
text	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
RESP_NONE	int
)	O
{	O
int	O
new_state	int
=	O
(	O
rc	int
==	O
RESP_OK	int
)	O
?	O
command	pointer
->	O
success	int
:	O
command	pointer
->	O
failure	int
;	O
if	O
(	O
new_state	int
!=	O
STATE_NONE	O
)	O
state	pointer
=	O
new_state	int
;	O
return	O
io_sendf	function
(	O
"%s %s\n"	pointer
,	O
command	pointer
->	O
tag	pointer
,	O
text	pointer
)	O
;	O
}	O
return	O
io_completion_response	function
(	O
command	pointer
,	O
rc	int
,	O
"%s"	pointer
,	O
text	pointer
)	O
;	O
}	O
struct	O
copy_env	struct
{	O
mu_mailbox_t	pointer
dst	pointer
;	O
mu_off_t	long
total	long
;	O
int	O
ret	pointer
;	O
char	O
*	O
*	O
err_text	pointer
;	O
}	O
;	O
static	O
int	O
size_sum	function
(	O
size_t	long
msgno	long
,	O
mu_message_t	pointer
msg	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
copy_env	struct
*	O
env	pointer
=	O
data	pointer
;	O
int	O
rc	int
;	O
size_t	long
size	pointer
;	O
rc	int
=	O
mu_message_size	function
(	O
msg	pointer
,	O
&	O
size	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_message_size"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
env	pointer
->	O
ret	pointer
=	O
RESP_BAD	int
;	O
return	O
MU_ERR_FAILURE	O
;	O
}	O
env	pointer
->	O
total	long
+=	O
size	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
do_copy	function
(	O
size_t	long
msgno	long
,	O
mu_message_t	pointer
msg	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
copy_env	struct
*	O
env	pointer
=	O
data	pointer
;	O
int	O
status	int
;	O
imap4d_enter_critical	function
(	O
)	O
;	O
status	int
=	O
mu_mailbox_append_message	function
(	O
env	pointer
->	O
dst	pointer
,	O
msg	pointer
)	O
;	O
imap4d_leave_critical	function
(	O
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_mailbox_append_message"	pointer
,	O
NULL	O
,	O
status	int
)	O
;	O
env	pointer
->	O
ret	pointer
=	O
RESP_BAD	int
;	O
return	O
MU_ERR_FAILURE	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
try_copy	function
(	O
mu_mailbox_t	pointer
dst	pointer
,	O
mu_msgset_t	pointer
msgset	pointer
,	O
char	O
*	O
*	O
err_text	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
copy_env	struct
env	pointer
;	O
env	pointer
.	O
dst	pointer
=	O
dst	pointer
;	O
env	pointer
.	O
total	long
=	O
0	int
;	O
env	pointer
.	O
ret	pointer
=	O
RESP_OK	int
;	O
env	pointer
.	O
err_text	pointer
=	O
err_text	pointer
;	O
*	O
env	pointer
.	O
err_text	pointer
=	O
"Operation failed"	pointer
;	O
rc	int
=	O
mu_msgset_foreach_message	function
(	O
msgset	pointer
,	O
size_sum	function
,	O
&	O
env	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
RESP_NO	int
;	O
if	O
(	O
env	pointer
.	O
ret	pointer
!=	O
RESP_OK	int
)	O
return	O
env	pointer
.	O
ret	pointer
;	O
rc	int
=	O
quota_check	function
(	O
env	pointer
.	O
total	long
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
*	O
env	pointer
.	O
err_text	pointer
=	O
"Mailbox quota exceeded"	pointer
;	O
return	O
RESP_NO	int
;	O
}	O
env	pointer
.	O
total	long
=	O
0	int
;	O
rc	int
=	O
mu_msgset_foreach_message	function
(	O
msgset	pointer
,	O
do_copy	function
,	O
&	O
env	pointer
)	O
;	O
quota_update	function
(	O
env	pointer
.	O
total	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
RESP_NO	int
;	O
return	O
env	pointer
.	O
ret	pointer
;	O
}	O
static	O
int	O
safe_copy	function
(	O
mu_mailbox_t	pointer
dst	pointer
,	O
mu_msgset_t	pointer
msgset	pointer
,	O
char	O
*	O
*	O
err_text	pointer
)	O
{	O
size_t	long
nmesg	long
;	O
int	O
status	int
;	O
status	int
=	O
mu_mailbox_messages_count	function
(	O
dst	pointer
,	O
&	O
nmesg	long
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_mailbox_messages_count"	pointer
,	O
NULL	O
,	O
status	int
)	O
;	O
*	O
err_text	pointer
=	O
"Operation failed"	pointer
;	O
return	O
RESP_NO	int
;	O
}	O
status	int
=	O
try_copy	function
(	O
dst	pointer
,	O
msgset	pointer
,	O
err_text	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
RESP_OK	int
)	O
{	O
size_t	long
maxmesg	long
;	O
status	int
=	O
mu_mailbox_messages_count	function
(	O
dst	pointer
,	O
&	O
maxmesg	long
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_url_t	pointer
url	pointer
=	O
NULL	O
;	O
mu_mailbox_get_url	function
(	O
dst	pointer
,	O
&	O
url	pointer
)	O
;	O
mu_error	function
(	O
_	O
(	O
"cannot count messages in mailbox %s: %s"	pointer
)	O
,	O
mu_url_to_string	function
(	O
url	pointer
)	O
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
imap4d_bye	function
(	O
ERR_MAILBOX_CORRUPTED	int
)	O
;	O
}	O
for	O
(	O
nmesg	long
++	O
;	O
nmesg	long
<=	O
maxmesg	long
;	O
nmesg	long
++	O
)	O
{	O
mu_message_t	pointer
msg	pointer
;	O
if	O
(	O
mu_mailbox_get_message	function
(	O
dst	pointer
,	O
nmesg	long
,	O
&	O
msg	pointer
)	O
==	O
0	int
)	O
{	O
mu_attribute_t	pointer
attr	pointer
;	O
mu_message_get_attribute	function
(	O
msg	pointer
,	O
&	O
attr	pointer
)	O
;	O
mu_attribute_set_userflag	function
(	O
attr	pointer
,	O
MU_ATTRIBUTE_DELETED	int
)	O
;	O
}	O
}	O
imap4d_enter_critical	function
(	O
)	O
;	O
status	int
=	O
mu_mailbox_flush	function
(	O
dst	pointer
,	O
1	int
)	O
;	O
imap4d_leave_critical	function
(	O
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_url_t	pointer
url	pointer
=	O
NULL	O
;	O
mu_mailbox_get_url	function
(	O
dst	pointer
,	O
&	O
url	pointer
)	O
;	O
mu_error	function
(	O
_	O
(	O
"cannot flush mailbox %s: %s"	pointer
)	O
,	O
mu_url_to_string	function
(	O
url	pointer
)	O
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
imap4d_bye	function
(	O
ERR_MAILBOX_CORRUPTED	int
)	O
;	O
}	O
return	O
RESP_NO	int
;	O
}	O
return	O
RESP_OK	int
;	O
}	O
int	O
imap4d_copy0	function
(	O
imap4d_tokbuf_t	pointer
tok	pointer
,	O
int	O
isuid	int
,	O
char	O
*	O
*	O
err_text	pointer
)	O
{	O
int	O
status	int
;	O
char	O
*	O
msgset_str	pointer
;	O
mu_msgset_t	pointer
msgset	pointer
;	O
char	O
*	O
name	pointer
;	O
char	O
*	O
mailbox_name	pointer
;	O
char	O
*	O
end	struct
;	O
mu_mailbox_t	pointer
cmbox	pointer
=	O
NULL	O
;	O
int	O
arg	pointer
=	O
IMAP4_ARG_1	int
+	O
!	O
!	O
isuid	int
;	O
int	O
mode	int
=	O
0	int
;	O
mu_record_t	pointer
record	pointer
;	O
*	O
err_text	pointer
=	O
NULL	O
;	O
if	O
(	O
imap4d_tokbuf_argc	function
(	O
tok	pointer
)	O
!=	O
arg	pointer
+	O
2	int
)	O
{	O
*	O
err_text	pointer
=	O
"Invalid arguments"	pointer
;	O
return	O
1	int
;	O
}	O
msgset_str	pointer
=	O
imap4d_tokbuf_getarg	function
(	O
tok	pointer
,	O
arg	pointer
)	O
;	O
name	pointer
=	O
imap4d_tokbuf_getarg	function
(	O
tok	pointer
,	O
arg	pointer
+	O
1	int
)	O
;	O
status	int
=	O
mu_msgset_create	function
(	O
&	O
msgset	pointer
,	O
mbox	pointer
,	O
MU_MSGSET_NUM	int
)	O
;	O
if	O
(	O
status	int
)	O
{	O
*	O
err_text	pointer
=	O
"Software error"	pointer
;	O
return	O
RESP_BAD	int
;	O
}	O
status	int
=	O
mu_msgset_parse_imap	function
(	O
msgset	pointer
,	O
isuid	int
?	O
MU_MSGSET_UID	int
:	O
MU_MSGSET_NUM	int
,	O
msgset_str	pointer
,	O
&	O
end	struct
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_msgset_free	function
(	O
msgset	pointer
)	O
;	O
*	O
err_text	pointer
=	O
"Error parsing message set"	pointer
;	O
return	O
RESP_BAD	int
;	O
}	O
mailbox_name	pointer
=	O
namespace_get_name	function
(	O
name	pointer
,	O
&	O
record	pointer
,	O
&	O
mode	int
)	O
;	O
if	O
(	O
!	O
mailbox_name	pointer
)	O
{	O
mu_msgset_free	function
(	O
msgset	pointer
)	O
;	O
*	O
err_text	pointer
=	O
"Copy failed"	pointer
;	O
return	O
RESP_NO	int
;	O
}	O
status	int
=	O
mu_mailbox_create_from_record	function
(	O
&	O
cmbox	pointer
,	O
record	pointer
,	O
mailbox_name	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
status	int
=	O
mu_mailbox_open	function
(	O
cmbox	pointer
,	O
MU_STREAM_RDWR	O
|	O
mode	int
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
mu_list_t	pointer
msglist	pointer
;	O
mu_msgset_get_list	function
(	O
msgset	pointer
,	O
&	O
msglist	pointer
)	O
;	O
if	O
(	O
!	O
mu_list_is_empty	function
(	O
msglist	pointer
)	O
)	O
status	int
=	O
safe_copy	function
(	O
cmbox	pointer
,	O
msgset	pointer
,	O
err_text	pointer
)	O
;	O
mu_mailbox_close	function
(	O
cmbox	pointer
)	O
;	O
}	O
mu_mailbox_destroy	function
(	O
&	O
cmbox	pointer
)	O
;	O
}	O
mu_msgset_free	function
(	O
msgset	pointer
)	O
;	O
free	function
(	O
mailbox_name	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
*	O
err_text	pointer
=	O
"Completed"	pointer
;	O
return	O
RESP_OK	int
;	O
}	O
if	O
(	O
!	O
*	O
err_text	pointer
)	O
*	O
err_text	pointer
=	O
"[TRYCREATE] failed"	pointer
;	O
return	O
RESP_NO	int
;	O
}	O
