enum	O
stringwork	enum
{	O
enter	int
,	O
copy	int
,	O
edit	int
,	O
expand	int
,	O
edit_expand	int
}	O
;	O
static	O
void	O
scandeltatext	function
(	O
struct	O
editstuff	O
*	O
es	pointer
,	O
struct	O
wlink	struct
*	O
*	O
ls	pointer
,	O
struct	O
delta	struct
*	O
delta	struct
,	O
enum	O
stringwork	enum
func	enum
,	O
bool	bool
needlog	bool
)	O
{	O
struct	O
delta	struct
const	O
*	O
nextdelta	pointer
;	O
struct	O
fro	struct
*	O
from	pointer
=	O
FLOW	O
(	O
from	pointer
)	O
;	O
FILE	struct
*	O
to	pointer
=	O
FLOW	O
(	O
to	pointer
)	O
;	O
struct	O
atat	pointer
*	O
log	pointer
,	O
*	O
text	pointer
;	O
struct	O
range	struct
range	struct
;	O
for	O
(	O
;	O
;	O
*	O
ls	pointer
=	O
(	O
*	O
ls	pointer
)	O
->	O
next	pointer
)	O
{	O
nextdelta	pointer
=	O
(	O
*	O
ls	pointer
)	O
->	O
entry	pointer
;	O
log	pointer
=	O
nextdelta	pointer
->	O
log	pointer
;	O
text	pointer
=	O
nextdelta	pointer
->	O
text	pointer
;	O
range	struct
.	O
beg	pointer
=	O
nextdelta	pointer
->	O
neck	long
;	O
range	struct
.	O
end	pointer
=	O
text	pointer
->	O
beg	pointer
;	O
if	O
(	O
needlog	bool
&&	O
delta	struct
==	O
nextdelta	pointer
)	O
{	O
delta	struct
->	O
pretty_log	struct
=	O
string_from_atat	function
(	O
SINGLE	O
,	O
log	pointer
)	O
;	O
delta	struct
->	O
pretty_log	struct
=	O
cleanlogmsg	function
(	O
delta	struct
->	O
pretty_log	struct
.	O
string	pointer
,	O
delta	struct
->	O
pretty_log	struct
.	O
size	long
)	O
;	O
}	O
if	O
(	O
to	pointer
)	O
fro_spew_partial	function
(	O
to	pointer
,	O
from	pointer
,	O
&	O
range	struct
)	O
;	O
if	O
(	O
delta	struct
==	O
nextdelta	pointer
)	O
break	O
;	O
if	O
(	O
to	pointer
)	O
atat_put	function
(	O
to	pointer
,	O
text	pointer
)	O
;	O
}	O
fro_move	function
(	O
from	pointer
,	O
range	struct
.	O
end	pointer
)	O
;	O
switch	O
(	O
func	enum
)	O
{	O
case	O
enter	int
:	O
enterstring	function
(	O
es	pointer
,	O
text	pointer
)	O
;	O
break	O
;	O
case	O
copy	int
:	O
copystring	function
(	O
es	pointer
,	O
text	pointer
)	O
;	O
break	O
;	O
case	O
expand	int
:	O
{	O
int	O
c	int
;	O
struct	O
expctx	struct
ctx	pointer
=	O
EXPCTX	O
(	O
FLOW	O
(	O
res	pointer
)	O
,	O
to	pointer
,	O
from	pointer
,	O
true	int
,	O
true	int
)	O
;	O
GETCHAR	O
(	O
c	int
,	O
from	pointer
)	O
;	O
if	O
(	O
to	pointer
)	O
afputc	function
(	O
c	int
,	O
to	pointer
)	O
;	O
while	O
(	O
1	int
<	O
expandline	function
(	O
&	O
ctx	pointer
)	O
)	O
continue	O
;	O
FINISH_EXPCTX	O
(	O
&	O
ctx	pointer
)	O
;	O
}	O
break	O
;	O
case	O
edit	int
:	O
editstring	function
(	O
es	pointer
,	O
text	pointer
,	O
NULL	O
)	O
;	O
break	O
;	O
case	O
edit_expand	int
:	O
editstring	function
(	O
es	pointer
,	O
text	pointer
,	O
delta	struct
)	O
;	O
break	O
;	O
}	O
}	O
char	O
const	O
*	O
buildrevision	function
(	O
struct	O
wlink	struct
const	O
*	O
deltas	pointer
,	O
struct	O
delta	struct
*	O
target	pointer
,	O
FILE	struct
*	O
outfile	pointer
,	O
bool	bool
expandflag	bool
)	O
{	O
struct	O
editstuff	O
*	O
es	pointer
=	O
make_editstuff	function
(	O
)	O
;	O
struct	O
wlink	struct
*	O
ls	pointer
=	O
GROK	O
(	O
deltas	pointer
)	O
;	O
if	O
(	O
deltas	pointer
->	O
entry	pointer
==	O
target	pointer
)	O
{	O
openfcopy	function
(	O
outfile	pointer
)	O
;	O
scandeltatext	function
(	O
es	pointer
,	O
&	O
ls	pointer
,	O
target	pointer
,	O
expandflag	bool
?	O
expand	int
:	O
copy	int
,	O
true	int
)	O
;	O
}	O
else	O
{	O
scandeltatext	function
(	O
es	pointer
,	O
&	O
ls	pointer
,	O
deltas	pointer
->	O
entry	pointer
,	O
enter	int
,	O
false	int
)	O
;	O
while	O
(	O
ls	pointer
=	O
ls	pointer
->	O
next	pointer
,	O
(	O
deltas	pointer
=	O
deltas	pointer
->	O
next	pointer
)	O
->	O
next	pointer
)	O
{	O
scandeltatext	function
(	O
es	pointer
,	O
&	O
ls	pointer
,	O
deltas	pointer
->	O
entry	pointer
,	O
edit	int
,	O
false	int
)	O
;	O
}	O
if	O
(	O
expandflag	bool
||	O
outfile	pointer
)	O
{	O
finishedit	function
(	O
es	pointer
,	O
NULL	O
,	O
outfile	pointer
,	O
false	int
)	O
;	O
}	O
scandeltatext	function
(	O
es	pointer
,	O
&	O
ls	pointer
,	O
target	pointer
,	O
expandflag	bool
?	O
edit_expand	int
:	O
edit	int
,	O
true	int
)	O
;	O
finishedit	function
(	O
es	pointer
,	O
expandflag	bool
?	O
target	pointer
:	O
NULL	O
,	O
outfile	pointer
,	O
true	int
)	O
;	O
}	O
unmake_editstuff	function
(	O
es	pointer
)	O
;	O
if	O
(	O
outfile	pointer
)	O
return	O
NULL	O
;	O
Ozclose	function
(	O
&	O
FLOW	O
(	O
res	pointer
)	O
)	O
;	O
return	O
FLOW	O
(	O
result	pointer
)	O
;	O
}	O
struct	O
cbuf	struct
cleanlogmsg	function
(	O
char	O
const	O
*	O
m	pointer
,	O
size_t	long
s	pointer
)	O
{	O
struct	O
cbuf	struct
r	pointer
;	O
while	O
(	O
s	pointer
&&	O
WHITESPACEP	O
(	O
*	O
m	pointer
)	O
)	O
s	pointer
--	O
,	O
m	pointer
++	O
;	O
while	O
(	O
s	pointer
&&	O
WHITESPACEP	O
(	O
m	pointer
[	O
s	pointer
-	O
1	int
]	O
)	O
)	O
s	pointer
--	O
;	O
r	pointer
.	O
string	pointer
=	O
m	pointer
;	O
r	pointer
.	O
size	long
=	O
s	pointer
;	O
return	O
r	pointer
;	O
}	O
bool	bool
ttystdin	function
(	O
void	O
)	O
{	O
if	O
(	O
!	O
BE	O
(	O
interactive_valid	bool
)	O
)	O
{	O
if	O
(	O
!	O
BE	O
(	O
interactive	bool
)	O
)	O
BE	O
(	O
interactive	bool
)	O
=	O
isatty	function
(	O
STDIN_FILENO	int
)	O
;	O
BE	O
(	O
interactive_valid	bool
)	O
=	O
true	int
;	O
}	O
return	O
BE	O
(	O
interactive	bool
)	O
;	O
}	O
int	O
getcstdin	function
(	O
void	O
)	O
{	O
register	O
FILE	struct
*	O
in	pointer
;	O
register	O
int	O
c	int
;	O
in	pointer
=	O
stdin	pointer
;	O
if	O
(	O
feof	function
(	O
in	pointer
)	O
&&	O
ttystdin	function
(	O
)	O
)	O
clearerr	function
(	O
in	pointer
)	O
;	O
c	int
=	O
getc	function
(	O
in	pointer
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
testIerror	function
(	O
in	pointer
)	O
;	O
if	O
(	O
feof	function
(	O
in	pointer
)	O
&&	O
ttystdin	function
(	O
)	O
)	O
complain	function
(	O
"\n"	pointer
)	O
;	O
}	O
return	O
c	int
;	O
}	O
bool	bool
yesorno	function
(	O
bool	bool
default_answer	bool
,	O
char	O
const	O
*	O
question	pointer
,	O
...	O
)	O
{	O
va_list	array
args	pointer
;	O
register	O
int	O
c	int
,	O
r	pointer
;	O
if	O
(	O
!	O
BE	O
(	O
quiet	bool
)	O
&&	O
ttystdin	function
(	O
)	O
)	O
{	O
oflush	function
(	O
)	O
;	O
va_start	O
(	O
args	pointer
,	O
question	pointer
)	O
;	O
vcomplain	function
(	O
question	pointer
,	O
args	pointer
)	O
;	O
va_end	O
(	O
args	pointer
)	O
;	O
r	pointer
=	O
c	int
=	O
getcstdin	function
(	O
)	O
;	O
while	O
(	O
c	int
!=	O
'\n'	O
&&	O
!	O
feof	function
(	O
stdin	pointer
)	O
)	O
c	int
=	O
getcstdin	function
(	O
)	O
;	O
if	O
(	O
r	pointer
==	O
'y'	O
||	O
r	pointer
==	O
'Y'	O
)	O
return	O
true	int
;	O
if	O
(	O
r	pointer
==	O
'n'	O
||	O
r	pointer
==	O
'N'	O
)	O
return	O
false	int
;	O
}	O
return	O
default_answer	bool
;	O
}	O
void	O
write_desc_maybe	function
(	O
FILE	struct
*	O
to	pointer
)	O
{	O
struct	O
atat	pointer
*	O
desc	pointer
=	O
GROK	O
(	O
desc	pointer
)	O
;	O
if	O
(	O
to	pointer
)	O
atat_put	function
(	O
to	pointer
,	O
desc	pointer
)	O
;	O
}	O
void	O
putdesc	function
(	O
struct	O
cbuf	struct
*	O
cb	pointer
,	O
bool	bool
textflag	bool
,	O
char	O
*	O
textfile	pointer
)	O
{	O
register	O
FILE	struct
*	O
txt	pointer
;	O
register	O
int	O
c	int
;	O
register	O
FILE	struct
*	O
frew	pointer
;	O
register	O
char	O
*	O
p	pointer
;	O
size_t	long
s	pointer
;	O
struct	O
fro	struct
*	O
from	pointer
=	O
FLOW	O
(	O
from	pointer
)	O
;	O
frew	pointer
=	O
FLOW	O
(	O
rewr	pointer
)	O
;	O
if	O
(	O
from	pointer
&&	O
!	O
textflag	bool
)	O
{	O
aprintf	function
(	O
frew	pointer
,	O
"\n\n%s\n"	pointer
,	O
TINYKS	O
(	O
desc	pointer
)	O
)	O
;	O
write_desc_maybe	function
(	O
frew	pointer
)	O
;	O
}	O
else	O
{	O
FLOW	O
(	O
to	pointer
)	O
=	O
NULL	O
;	O
aprintf	function
(	O
frew	pointer
,	O
"\n\n%s\n%c"	pointer
,	O
TINYKS	O
(	O
desc	pointer
)	O
,	O
SDELIM	char
)	O
;	O
if	O
(	O
!	O
textfile	pointer
)	O
*	O
cb	pointer
=	O
getsstdin	function
(	O
"t-"	pointer
,	O
"description"	pointer
,	O
"NOTE: This is NOT the log message!\n"	pointer
)	O
;	O
else	O
if	O
(	O
!	O
cb	pointer
->	O
string	pointer
)	O
{	O
if	O
(	O
*	O
textfile	pointer
==	O
'-'	O
)	O
{	O
p	pointer
=	O
textfile	pointer
+	O
1	int
;	O
s	pointer
=	O
strlen	function
(	O
p	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
(	O
txt	pointer
=	O
fopen_safer	function
(	O
textfile	pointer
,	O
"r"	pointer
)	O
)	O
)	O
fatal_sys	function
(	O
textfile	pointer
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
(	O
c	int
=	O
getc	function
(	O
txt	pointer
)	O
)	O
==	O
EOF	O
)	O
{	O
testIerror	function
(	O
txt	pointer
)	O
;	O
if	O
(	O
feof	function
(	O
txt	pointer
)	O
)	O
break	O
;	O
}	O
accumulate_byte	function
(	O
PLEXUS	O
,	O
c	int
)	O
;	O
}	O
if	O
(	O
PROB	O
(	O
fclose	function
(	O
txt	pointer
)	O
)	O
)	O
Ierror	function
(	O
)	O
;	O
p	pointer
=	O
finish_string	function
(	O
PLEXUS	O
,	O
&	O
s	pointer
)	O
;	O
}	O
*	O
cb	pointer
=	O
cleanlogmsg	function
(	O
p	pointer
,	O
s	pointer
)	O
;	O
}	O
putstring	function
(	O
frew	pointer
,	O
false	int
,	O
*	O
cb	pointer
,	O
true	int
)	O
;	O
aputc	O
(	O
'\n'	O
,	O
frew	pointer
)	O
;	O
}	O
}	O
struct	O
cbuf	struct
getsstdin	function
(	O
char	O
const	O
*	O
option	pointer
,	O
char	O
const	O
*	O
name	pointer
,	O
char	O
const	O
*	O
note	pointer
)	O
{	O
register	O
int	O
c	int
;	O
register	O
char	O
*	O
p	pointer
;	O
register	O
bool	bool
tty	bool
=	O
ttystdin	function
(	O
)	O
;	O
size_t	long
len	char
,	O
column	long
=	O
0	int
;	O
bool	bool
dot_in_first_column_p	bool
=	O
false	int
,	O
discardp	bool
=	O
false	int
;	O
if	O
(	O
tty	bool
)	O
prompt	O
(	O
"enter %s, terminated with single '.' or end of file:\n%s>> "	pointer
,	O
name	pointer
,	O
note	pointer
)	O
;	O
else	O
if	O
(	O
feof	function
(	O
stdin	pointer
)	O
)	O
RFATAL	O
(	O
"can't reread redirected stdin for %s; use -%s<%s>"	pointer
,	O
name	pointer
,	O
option	pointer
,	O
name	pointer
)	O
;	O
while	O
(	O
c	int
=	O
getcstdin	function
(	O
)	O
,	O
!	O
feof	function
(	O
stdin	pointer
)	O
)	O
{	O
if	O
(	O
!	O
column	long
)	O
dot_in_first_column_p	bool
=	O
(	O
'.'	O
==	O
c	int
)	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
{	O
if	O
(	O
1	int
==	O
column	long
&&	O
dot_in_first_column_p	bool
)	O
{	O
discardp	bool
=	O
true	int
;	O
break	O
;	O
}	O
else	O
if	O
(	O
tty	bool
)	O
prompt	O
(	O
">> "	pointer
)	O
;	O
column	long
=	O
0	int
;	O
}	O
else	O
column	long
++	O
;	O
accumulate_byte	function
(	O
PLEXUS	O
,	O
c	int
)	O
;	O
}	O
p	pointer
=	O
finish_string	function
(	O
PLEXUS	O
,	O
&	O
len	char
)	O
;	O
return	O
cleanlogmsg	function
(	O
p	pointer
,	O
len	char
-	O
(	O
discardp	bool
?	O
1	int
:	O
0	int
)	O
)	O
;	O
}	O
void	O
format_assocs	function
(	O
FILE	struct
*	O
out	pointer
,	O
char	O
const	O
*	O
fmt	pointer
)	O
{	O
for	O
(	O
struct	O
link	function
*	O
ls	pointer
=	O
GROK	O
(	O
symbols	pointer
)	O
;	O
ls	pointer
;	O
ls	pointer
=	O
ls	pointer
->	O
next	pointer
)	O
{	O
struct	O
symdef	struct
const	O
*	O
d	pointer
=	O
ls	pointer
->	O
entry	pointer
;	O
aprintf	function
(	O
out	pointer
,	O
fmt	pointer
,	O
d	pointer
->	O
meaningful	pointer
,	O
d	pointer
->	O
underlying	pointer
)	O
;	O
}	O
}	O
void	O
format_locks	function
(	O
FILE	struct
*	O
out	pointer
,	O
char	O
const	O
*	O
fmt	pointer
)	O
{	O
for	O
(	O
struct	O
link	function
*	O
ls	pointer
=	O
GROK	O
(	O
locks	pointer
)	O
;	O
ls	pointer
;	O
ls	pointer
=	O
ls	pointer
->	O
next	pointer
)	O
{	O
struct	O
rcslock	struct
const	O
*	O
rl	pointer
=	O
ls	pointer
->	O
entry	pointer
;	O
aprintf	function
(	O
out	pointer
,	O
fmt	pointer
,	O
rl	pointer
->	O
login	pointer
,	O
rl	pointer
->	O
delta	struct
->	O
num	pointer
)	O
;	O
}	O
}	O
static	O
char	O
const	O
*	O
semi_lf	pointer
=	O
";\n"	pointer
;	O
void	O
putadmin	function
(	O
void	O
)	O
{	O
register	O
FILE	struct
*	O
fout	pointer
;	O
struct	O
repo	struct
*	O
r	pointer
=	O
REPO	O
(	O
r	pointer
)	O
;	O
struct	O
delta	struct
*	O
tip	pointer
=	O
REPO	O
(	O
tip	pointer
)	O
;	O
char	O
const	O
*	O
defbr	pointer
=	O
r	pointer
?	O
GROK	O
(	O
branch	pointer
)	O
:	O
NULL	O
;	O
int	O
kws	int
=	O
BE	O
(	O
kws	int
)	O
;	O
if	O
(	O
!	O
(	O
fout	pointer
=	O
FLOW	O
(	O
rewr	pointer
)	O
)	O
)	O
{	O
int	O
fo	int
=	O
REPO	O
(	O
fd_lock	int
)	O
;	O
REPO	O
(	O
fd_lock	int
)	O
=	O
-	O
1	int
;	O
fout	pointer
=	O
fdopen	function
(	O
fo	int
,	O
FOPEN_WB	pointer
)	O
;	O
if	O
(	O
!	O
(	O
FLOW	O
(	O
rewr	pointer
)	O
=	O
fout	pointer
)	O
)	O
fatal_sys	function
(	O
REPO	O
(	O
filename	pointer
)	O
)	O
;	O
}	O
aprintf	function
(	O
fout	pointer
,	O
"%s\t%s%s"	pointer
,	O
TINYKS	O
(	O
head	pointer
)	O
,	O
tip	pointer
?	O
tip	pointer
->	O
num	pointer
:	O
""	pointer
,	O
semi_lf	pointer
)	O
;	O
if	O
(	O
defbr	pointer
&&	O
VERSION	O
(	O
4	int
)	O
<=	O
BE	O
(	O
version	int
)	O
)	O
aprintf	function
(	O
fout	pointer
,	O
"%s\t%s%s"	pointer
,	O
TINYKS	O
(	O
branch	pointer
)	O
,	O
defbr	pointer
,	O
semi_lf	pointer
)	O
;	O
aputs	function
(	O
TINYKS	O
(	O
access	pointer
)	O
,	O
fout	pointer
)	O
;	O
for	O
(	O
struct	O
link	function
*	O
ls	pointer
=	O
r	pointer
?	O
GROK	O
(	O
access	pointer
)	O
:	O
NULL	O
;	O
ls	pointer
;	O
ls	pointer
=	O
ls	pointer
->	O
next	pointer
)	O
aprintf	function
(	O
fout	pointer
,	O
"\n\t%s"	pointer
,	O
(	O
char	O
const	O
*	O
)	O
ls	pointer
->	O
entry	pointer
)	O
;	O
SEMI_LF	O
(	O
)	O
;	O
aprintf	function
(	O
fout	pointer
,	O
"%s"	pointer
,	O
TINYKS	O
(	O
symbols	pointer
)	O
)	O
;	O
format_assocs	function
(	O
fout	pointer
,	O
"\n\t%s:%s"	pointer
)	O
;	O
SEMI_LF	O
(	O
)	O
;	O
aprintf	function
(	O
fout	pointer
,	O
"%s"	pointer
,	O
TINYKS	O
(	O
locks	pointer
)	O
)	O
;	O
if	O
(	O
r	pointer
)	O
format_locks	function
(	O
fout	pointer
,	O
"\n\t%s:%s"	pointer
)	O
;	O
if	O
(	O
BE	O
(	O
strictly_locking	bool
)	O
)	O
aprintf	function
(	O
fout	pointer
,	O
"; %s"	pointer
,	O
TINYKS	O
(	O
strict	bool
)	O
)	O
;	O
SEMI_LF	O
(	O
)	O
;	O
if	O
(	O
GROK	O
(	O
integrity	pointer
)	O
)	O
{	O
aprintf	function
(	O
fout	pointer
,	O
"%s\n"	pointer
,	O
TINYKS	O
(	O
integrity	pointer
)	O
)	O
;	O
atat_put	function
(	O
fout	pointer
,	O
GROK	O
(	O
integrity	pointer
)	O
)	O
;	O
SEMI_LF	O
(	O
)	O
;	O
}	O
if	O
(	O
REPO	O
(	O
log_lead	struct
)	O
.	O
size	long
)	O
{	O
aprintf	function
(	O
fout	pointer
,	O
"%s\t"	pointer
,	O
TINYKS	O
(	O
comment	pointer
)	O
)	O
;	O
putstring	function
(	O
fout	pointer
,	O
true	int
,	O
REPO	O
(	O
log_lead	struct
)	O
,	O
false	int
)	O
;	O
SEMI_LF	O
(	O
)	O
;	O
}	O
if	O
(	O
kws	int
!=	O
kwsub_kv	int
)	O
aprintf	function
(	O
fout	pointer
,	O
"%s\t%c%s%c%s"	pointer
,	O
TINYKS	O
(	O
expand	int
)	O
,	O
SDELIM	char
,	O
kwsub_string	function
(	O
kws	int
)	O
,	O
SDELIM	char
,	O
semi_lf	pointer
)	O
;	O
aprintf	function
(	O
fout	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
static	O
void	O
putdelta	function
(	O
register	O
struct	O
delta	struct
const	O
*	O
node	pointer
,	O
register	O
FILE	struct
*	O
fout	pointer
)	O
{	O
if	O
(	O
!	O
node	pointer
)	O
return	O
;	O
aprintf	function
(	O
fout	pointer
,	O
"\n%s\n%s\t%s;\t%s %s;\t%s %s%s%s"	pointer
,	O
node	pointer
->	O
num	pointer
,	O
TINYKS	O
(	O
date	pointer
)	O
,	O
node	pointer
->	O
date	pointer
,	O
TINYKS	O
(	O
author	pointer
)	O
,	O
node	pointer
->	O
author	pointer
,	O
TINYKS	O
(	O
state	pointer
)	O
,	O
node	pointer
->	O
state	pointer
?	O
node	pointer
->	O
state	pointer
:	O
""	pointer
,	O
semi_lf	pointer
,	O
TINYKS	O
(	O
branches	pointer
)	O
)	O
;	O
for	O
(	O
struct	O
wlink	struct
*	O
ls	pointer
=	O
node	pointer
->	O
branches	pointer
;	O
ls	pointer
;	O
ls	pointer
=	O
ls	pointer
->	O
next	pointer
)	O
{	O
struct	O
delta	struct
*	O
delta	struct
=	O
ls	pointer
->	O
entry	pointer
;	O
aprintf	function
(	O
fout	pointer
,	O
"\n\t%s"	pointer
,	O
delta	struct
->	O
num	pointer
)	O
;	O
}	O
SEMI_LF	O
(	O
)	O
;	O
aprintf	function
(	O
fout	pointer
,	O
"%s\t%s"	pointer
,	O
TINYKS	O
(	O
next	pointer
)	O
,	O
node	pointer
->	O
ilk	pointer
?	O
node	pointer
->	O
ilk	pointer
->	O
num	pointer
:	O
""	pointer
)	O
;	O
SEMI_LF	O
(	O
)	O
;	O
if	O
(	O
node	pointer
->	O
commitid	pointer
)	O
aprintf	function
(	O
fout	pointer
,	O
"%s\t%s%s"	pointer
,	O
TINYKS	O
(	O
commitid	pointer
)	O
,	O
node	pointer
->	O
commitid	pointer
,	O
semi_lf	pointer
)	O
;	O
}	O
void	O
puttree	function
(	O
struct	O
delta	struct
const	O
*	O
root	pointer
,	O
register	O
FILE	struct
*	O
fout	pointer
)	O
{	O
if	O
(	O
!	O
root	pointer
)	O
return	O
;	O
if	O
(	O
root	pointer
->	O
selector	bool
)	O
putdelta	function
(	O
root	pointer
,	O
fout	pointer
)	O
;	O
puttree	function
(	O
root	pointer
->	O
ilk	pointer
,	O
fout	pointer
)	O
;	O
for	O
(	O
struct	O
wlink	struct
*	O
ls	pointer
=	O
root	pointer
->	O
branches	pointer
;	O
ls	pointer
;	O
ls	pointer
=	O
ls	pointer
->	O
next	pointer
)	O
puttree	function
(	O
ls	pointer
->	O
entry	pointer
,	O
fout	pointer
)	O
;	O
}	O
bool	bool
putdtext	function
(	O
struct	O
delta	struct
const	O
*	O
delta	struct
,	O
char	O
const	O
*	O
srcname	pointer
,	O
FILE	struct
*	O
fout	pointer
,	O
bool	bool
diffmt	bool
)	O
{	O
struct	O
fro	struct
*	O
fin	pointer
;	O
if	O
(	O
!	O
(	O
fin	pointer
=	O
fro_open	function
(	O
srcname	pointer
,	O
"r"	pointer
,	O
NULL	O
)	O
)	O
)	O
{	O
syserror_errno	O
(	O
srcname	pointer
)	O
;	O
return	O
false	int
;	O
}	O
putdftext	function
(	O
delta	struct
,	O
fin	pointer
,	O
fout	pointer
,	O
diffmt	bool
)	O
;	O
fro_close	function
(	O
fin	pointer
)	O
;	O
return	O
true	int
;	O
}	O
void	O
putstring	function
(	O
register	O
FILE	struct
*	O
out	pointer
,	O
bool	bool
delim	bool
,	O
struct	O
cbuf	struct
s	pointer
,	O
bool	bool
log	pointer
)	O
{	O
register	O
char	O
const	O
*	O
sp	pointer
;	O
register	O
size_t	long
ss	long
;	O
if	O
(	O
delim	bool
)	O
aputc	O
(	O
SDELIM	char
,	O
out	pointer
)	O
;	O
sp	pointer
=	O
s	pointer
.	O
string	pointer
;	O
for	O
(	O
ss	long
=	O
s	pointer
.	O
size	long
;	O
ss	long
;	O
--	O
ss	long
)	O
{	O
if	O
(	O
*	O
sp	pointer
==	O
SDELIM	char
)	O
aputc	O
(	O
SDELIM	char
,	O
out	pointer
)	O
;	O
aputc	O
(	O
*	O
sp	pointer
++	O
,	O
out	pointer
)	O
;	O
}	O
if	O
(	O
s	pointer
.	O
size	long
&&	O
log	pointer
)	O
aputc	O
(	O
'\n'	O
,	O
out	pointer
)	O
;	O
aputc	O
(	O
SDELIM	char
,	O
out	pointer
)	O
;	O
}	O
void	O
putdftext	function
(	O
struct	O
delta	struct
const	O
*	O
delta	struct
,	O
struct	O
fro	struct
*	O
finfile	pointer
,	O
FILE	struct
*	O
foutfile	pointer
,	O
bool	bool
diffmt	bool
)	O
{	O
register	O
FILE	struct
*	O
fout	pointer
;	O
int	O
c	int
;	O
register	O
struct	O
fro	struct
*	O
fin	pointer
;	O
int	O
ed	int
;	O
struct	O
diffcmd	struct
dc	pointer
;	O
fout	pointer
=	O
foutfile	pointer
;	O
aprintf	function
(	O
fout	pointer
,	O
"\n\n%s\n%s\n"	pointer
,	O
delta	struct
->	O
num	pointer
,	O
TINYKS	O
(	O
log	pointer
)	O
)	O
;	O
putstring	function
(	O
fout	pointer
,	O
true	int
,	O
delta	struct
->	O
pretty_log	struct
,	O
true	int
)	O
;	O
aputc	O
(	O
'\n'	O
,	O
fout	pointer
)	O
;	O
aprintf	function
(	O
fout	pointer
,	O
"%s\n%c"	pointer
,	O
TINYKS	O
(	O
text	pointer
)	O
,	O
SDELIM	char
)	O
;	O
fin	pointer
=	O
finfile	pointer
;	O
if	O
(	O
!	O
diffmt	bool
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
GETCHAR_OR	O
(	O
c	int
,	O
fin	pointer
,	O
goto	O
done	bool
)	O
;	O
if	O
(	O
c	int
==	O
SDELIM	char
)	O
aputc	O
(	O
SDELIM	char
,	O
fout	pointer
)	O
;	O
aputc	O
(	O
c	int
,	O
fout	pointer
)	O
;	O
}	O
done	bool
:	O
;	O
}	O
else	O
{	O
initdiffcmd	function
(	O
&	O
dc	pointer
)	O
;	O
while	O
(	O
0	int
<=	O
(	O
ed	int
=	O
getdiffcmd	function
(	O
fin	pointer
,	O
false	int
,	O
fout	pointer
,	O
&	O
dc	pointer
)	O
)	O
)	O
if	O
(	O
ed	int
)	O
{	O
while	O
(	O
dc	pointer
.	O
nlines	long
--	O
)	O
do	O
{	O
GETCHAR_OR	O
(	O
c	int
,	O
fin	pointer
,	O
{	O
if	O
(	O
!	O
dc	pointer
.	O
nlines	long
)	O
goto	O
OK_EOF	O
;	O
unexpected_EOF	function
(	O
)	O
;	O
}	O
)	O
;	O
if	O
(	O
c	int
==	O
SDELIM	char
)	O
aputc	O
(	O
SDELIM	char
,	O
fout	pointer
)	O
;	O
aputc	O
(	O
c	int
,	O
fout	pointer
)	O
;	O
}	O
while	O
(	O
c	int
!=	O
'\n'	O
)	O
;	O
}	O
}	O
OK_EOF	O
:	O
aprintf	function
(	O
fout	pointer
,	O
"%c\n"	pointer
,	O
SDELIM	char
)	O
;	O
}	O
