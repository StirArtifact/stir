static	O
void	O
__gmpz_aorsmul	function
(	O
REGPARM_3_1	O
(	O
mpz_ptr	*
w	*
,	O
mpz_srcptr	*
x	*
,	O
mpz_srcptr	*
y	long
,	O
mp_size_t	long
sub	long
)	O
)	O
REGPARM_ATTR	O
(	O
1	int
)	O
;	O
REGPARM_ATTR	O
(	O
1	int
)	O
static	O
void	O
mpz_aorsmul	O
(	O
mpz_ptr	*
w	*
,	O
mpz_srcptr	*
x	*
,	O
mpz_srcptr	*
y	long
,	O
mp_size_t	long
sub	long
)	O
{	O
mp_size_t	long
xsize	long
,	O
ysize	long
,	O
tsize	long
,	O
wsize	long
,	O
wsize_signed	long
;	O
mp_ptr	*
wp	*
,	O
tp	*
;	O
mp_limb_t	long
c	long
,	O
high	long
;	O
TMP_DECL	O
;	O
xsize	long
=	O
SIZ	O
(	O
x	*
)	O
;	O
ysize	long
=	O
SIZ	O
(	O
y	*
)	O
;	O
if	O
(	O
xsize	long
==	O
0	int
||	O
ysize	long
==	O
0	int
)	O
return	O
;	O
if	O
(	O
ABS	O
(	O
ysize	long
)	O
>	O
ABS	O
(	O
xsize	long
)	O
)	O
{	O
MPZ_SRCPTR_SWAP	O
(	O
x	double
,	O
y	long
)	O
;	O
MP_SIZE_T_SWAP	O
(	O
xsize	long
,	O
ysize	long
)	O
;	O
}	O
sub	long
^=	O
ysize	long
;	O
ysize	long
=	O
ABS	O
(	O
ysize	long
)	O
;	O
if	O
(	O
ysize	long
==	O
1	int
)	O
{	O
mpz_aorsmul_1	O
(	O
w	*
,	O
x	*
,	O
PTR	O
(	O
y	*
)	O
[	O
0	int
]	O
,	O
sub	*
)	O
;	O
return	O
;	O
}	O
sub	long
^=	O
xsize	long
;	O
xsize	long
=	O
ABS	O
(	O
xsize	long
)	O
;	O
wsize_signed	long
=	O
SIZ	O
(	O
w	*
)	O
;	O
sub	long
^=	O
wsize_signed	long
;	O
wsize	long
=	O
ABS	O
(	O
wsize_signed	long
)	O
;	O
tsize	long
=	O
xsize	long
+	O
ysize	long
;	O
wp	*
=	O
MPZ_REALLOC	O
(	O
w	*
,	O
MAX	O
(	O
wsize	long
,	O
tsize	long
)	O
+	O
1	int
)	O
;	O
if	O
(	O
wsize_signed	long
==	O
0	int
)	O
{	O
high	long
=	O
mpn_mul	O
(	O
wp	*
,	O
PTR	O
(	O
x	*
)	O
,	O
xsize	long
,	O
PTR	O
(	O
y	*
)	O
,	O
ysize	long
)	O
;	O
tsize	long
-=	O
(	O
high	long
==	O
0	int
)	O
;	O
SIZ	O
(	O
w	*
)	O
=	O
(	O
sub	long
>=	O
0	int
?	O
tsize	long
:	O
-	O
tsize	long
)	O
;	O
return	O
;	O
}	O
TMP_MARK	O
;	O
tp	*
=	O
TMP_ALLOC_LIMBS	O
(	O
tsize	long
)	O
;	O
high	long
=	O
mpn_mul	O
(	O
tp	*
,	O
PTR	O
(	O
x	*
)	O
,	O
xsize	long
,	O
PTR	O
(	O
y	*
)	O
,	O
ysize	long
)	O
;	O
tsize	long
-=	O
(	O
high	long
==	O
0	int
)	O
;	O
ASSERT	O
(	O
tp	*
[	O
tsize	long
-	O
1	int
]	O
!=	O
0	int
)	O
;	O
if	O
(	O
sub	long
>=	O
0	int
)	O
{	O
mp_srcptr	*
up	*
=	O
wp	*
;	O
mp_size_t	long
usize	*
=	O
wsize	long
;	O
if	O
(	O
usize	*
<	O
tsize	long
)	O
{	O
up	*
=	O
tp	*
;	O
usize	*
=	O
tsize	long
;	O
tp	*
=	O
wp	*
;	O
tsize	long
=	O
wsize	long
;	O
wsize	long
=	O
usize	*
;	O
}	O
c	long
=	O
mpn_add	O
(	O
wp	*
,	O
up	*
,	O
usize	*
,	O
tp	*
,	O
tsize	long
)	O
;	O
wp	*
[	O
wsize	long
]	O
=	O
c	int
;	O
wsize	long
+=	O
(	O
c	int
!=	O
0	int
)	O
;	O
}	O
else	O
{	O
mp_srcptr	*
up	*
=	O
wp	*
;	O
mp_size_t	long
usize	*
=	O
wsize	long
;	O
if	O
(	O
mpn_cmp_twosizes_lt	function
(	O
up	*
,	O
usize	*
,	O
tp	*
,	O
tsize	long
)	O
)	O
{	O
up	*
=	O
tp	*
;	O
usize	*
=	O
tsize	long
;	O
tp	*
=	O
wp	*
;	O
tsize	long
=	O
wsize	long
;	O
wsize	long
=	O
usize	*
;	O
wsize_signed	long
=	O
-	O
wsize_signed	long
;	O
}	O
ASSERT_NOCARRY	O
(	O
mpn_sub	O
(	O
wp	*
,	O
up	*
,	O
usize	*
,	O
tp	*
,	O
tsize	long
)	O
)	O
;	O
wsize	long
=	O
usize	*
;	O
MPN_NORMALIZE	O
(	O
wp	*
,	O
wsize	long
)	O
;	O
}	O
SIZ	O
(	O
w	*
)	O
=	O
(	O
wsize_signed	long
>=	O
0	int
?	O
wsize	long
:	O
-	O
wsize	long
)	O
;	O
TMP_FREE	O
;	O
}	O
void	O
mpz_addmul	O
(	O
mpz_ptr	*
w	*
,	O
mpz_srcptr	*
u	array
,	O
mpz_srcptr	*
v	*
)	O
{	O
mpz_aorsmul	function
(	O
w	*
,	O
u	*
,	O
v	*
,	O
(	O
mp_size_t	long
)	O
0	int
)	O
;	O
}	O
void	O
mpz_submul	O
(	O
mpz_ptr	*
w	*
,	O
mpz_srcptr	*
u	array
,	O
mpz_srcptr	*
v	*
)	O
{	O
mpz_aorsmul	function
(	O
w	*
,	O
u	*
,	O
v	*
,	O
(	O
mp_size_t	long
)	O
-	O
1	int
)	O
;	O
}	O