struct	O
decode_closure	struct
{	O
int	O
select_hdr	int
;	O
}	O
;	O
static	O
int	O
print_stream	function
(	O
mu_stream_t	pointer
,	O
mu_stream_t	pointer
)	O
;	O
static	O
int	O
display_message	function
(	O
mu_message_t	pointer
,	O
msgset_t	struct
*	O
msgset	pointer
,	O
void	O
*	O
closure	pointer
)	O
;	O
static	O
int	O
display_submessage	function
(	O
struct	O
mime_descend_closure	struct
*	O
closure	pointer
,	O
void	O
*	O
data	pointer
)	O
;	O
static	O
int	O
get_content_encoding	function
(	O
mu_header_t	pointer
hdr	pointer
,	O
char	O
*	O
*	O
value	pointer
)	O
;	O
static	O
void	O
run_metamail	function
(	O
const	O
char	O
*	O
mailcap	pointer
,	O
mu_message_t	pointer
mesg	pointer
)	O
;	O
int	O
mail_decode	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
msgset_t	struct
*	O
msgset	pointer
;	O
struct	O
decode_closure	struct
decode_closure	struct
;	O
if	O
(	O
msgset_parse	function
(	O
argc	int
,	O
argv	pointer
,	O
MSG_NODELETED	int
|	O
MSG_SILENT	int
,	O
&	O
msgset	pointer
)	O
)	O
return	O
1	int
;	O
decode_closure	struct
.	O
select_hdr	int
=	O
mu_islower	O
(	O
argv	pointer
[	O
0	int
]	O
[	O
0	int
]	O
)	O
;	O
util_msgset_iterate	function
(	O
msgset	pointer
,	O
display_message	function
,	O
(	O
void	O
*	O
)	O
&	O
decode_closure	struct
)	O
;	O
msgset_free	function
(	O
msgset	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
display_message	function
(	O
mu_message_t	pointer
mesg	pointer
,	O
msgset_t	struct
*	O
msgset	pointer
,	O
void	O
*	O
arg	pointer
)	O
{	O
struct	O
decode_closure	struct
*	O
closure	pointer
=	O
arg	pointer
;	O
mu_attribute_t	pointer
attr	pointer
=	O
NULL	O
;	O
struct	O
mime_descend_closure	struct
mclos	struct
;	O
mu_message_get_attribute	function
(	O
mesg	pointer
,	O
&	O
attr	pointer
)	O
;	O
if	O
(	O
mu_attribute_is_deleted	function
(	O
attr	pointer
)	O
)	O
return	O
1	int
;	O
mclos	struct
.	O
hints	pointer
=	O
closure	pointer
->	O
select_hdr	int
?	O
MDHINT_SELECTED_HEADERS	int
:	O
0	int
;	O
mclos	struct
.	O
msgset	pointer
=	O
msgset	pointer
;	O
mclos	struct
.	O
message	pointer
=	O
mesg	pointer
;	O
mclos	struct
.	O
type	pointer
=	O
NULL	O
;	O
mclos	struct
.	O
encoding	pointer
=	O
NULL	O
;	O
mclos	struct
.	O
parent	pointer
=	O
NULL	O
;	O
mime_descend	function
(	O
&	O
mclos	struct
,	O
display_submessage	function
,	O
NULL	O
)	O
;	O
if	O
(	O
mu_mailbox_get_message	function
(	O
mbox	pointer
,	O
msgset	pointer
->	O
msg_part	pointer
[	O
0	int
]	O
,	O
&	O
mesg	pointer
)	O
==	O
0	int
)	O
util_mark_read	function
(	O
mesg	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
display_headers	function
(	O
mu_stream_t	pointer
out	pointer
,	O
mu_message_t	pointer
mesg	pointer
,	O
const	O
msgset_t	struct
*	O
msgset	pointer
MU_ARG_UNUSED	O
,	O
int	O
select_hdr	int
)	O
{	O
mu_header_t	pointer
hdr	pointer
=	O
NULL	O
;	O
if	O
(	O
select_hdr	int
)	O
{	O
size_t	long
num	long
=	O
0	int
;	O
size_t	long
i	int
=	O
0	int
;	O
const	O
char	O
*	O
sptr	pointer
;	O
mu_message_get_header	function
(	O
mesg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
mu_header_get_field_count	function
(	O
hdr	pointer
,	O
&	O
num	long
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
num	long
;	O
i	int
++	O
)	O
{	O
if	O
(	O
mu_header_sget_field_name	function
(	O
hdr	pointer
,	O
i	int
,	O
&	O
sptr	pointer
)	O
)	O
continue	O
;	O
if	O
(	O
mail_header_is_visible	function
(	O
sptr	pointer
)	O
)	O
{	O
mu_stream_printf	function
(	O
out	pointer
,	O
"%s: "	pointer
,	O
sptr	pointer
)	O
;	O
if	O
(	O
mu_header_sget_field_value	function
(	O
hdr	pointer
,	O
i	int
,	O
&	O
sptr	pointer
)	O
)	O
sptr	pointer
=	O
""	pointer
;	O
mu_stream_printf	function
(	O
out	pointer
,	O
"%s\n"	pointer
,	O
sptr	pointer
)	O
;	O
}	O
}	O
mu_stream_printf	function
(	O
out	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
else	O
{	O
mu_stream_t	pointer
stream	pointer
=	O
NULL	O
;	O
if	O
(	O
mu_message_get_header	function
(	O
mesg	pointer
,	O
&	O
hdr	pointer
)	O
==	O
0	int
&&	O
mu_header_get_streamref	function
(	O
hdr	pointer
,	O
&	O
stream	pointer
)	O
==	O
0	int
)	O
{	O
print_stream	function
(	O
stream	pointer
,	O
out	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
stream	pointer
)	O
;	O
}	O
}	O
}	O
void	O
format_msgset	function
(	O
mu_stream_t	pointer
str	pointer
,	O
const	O
msgset_t	struct
*	O
msgset	pointer
,	O
size_t	long
*	O
count	pointer
)	O
{	O
int	O
i	int
;	O
mu_stream_stat_buffer	array
stat	pointer
;	O
if	O
(	O
count	pointer
)	O
mu_stream_set_stat	function
(	O
str	pointer
,	O
MU_STREAM_STAT_MASK	O
(	O
MU_STREAM_STAT_OUT	int
)	O
,	O
stat	pointer
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"%lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
msgset	pointer
->	O
msg_part	pointer
[	O
0	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
msgset	pointer
->	O
npart	int
;	O
i	int
++	O
)	O
mu_stream_printf	function
(	O
str	pointer
,	O
"[%lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
msgset	pointer
->	O
msg_part	pointer
[	O
i	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
msgset	pointer
->	O
npart	int
;	O
i	int
++	O
)	O
mu_stream_printf	function
(	O
str	pointer
,	O
"]"	pointer
)	O
;	O
if	O
(	O
count	pointer
)	O
{	O
*	O
count	pointer
=	O
stat	pointer
[	O
MU_STREAM_STAT_OUT	int
]	O
;	O
mu_stream_set_stat	function
(	O
str	pointer
,	O
0	int
,	O
NULL	O
)	O
;	O
}	O
}	O
static	O
void	O
display_part_header	function
(	O
mu_stream_t	pointer
str	pointer
,	O
const	O
msgset_t	struct
*	O
msgset	pointer
,	O
const	O
char	O
*	O
type	pointer
,	O
const	O
char	O
*	O
encoding	pointer
)	O
{	O
int	O
size	long
=	O
util_screen_columns	function
(	O
)	O
-	O
3	int
;	O
unsigned	O
int	O
i	int
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"+"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
(	O
int	O
)	O
i	int
<=	O
size	long
;	O
i	int
++	O
)	O
mu_stream_printf	function
(	O
str	pointer
,	O
"-"	pointer
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"+"	pointer
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"\n"	pointer
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"%s"	pointer
,	O
_	O
(	O
"| Message="	pointer
)	O
)	O
;	O
format_msgset	function
(	O
str	pointer
,	O
msgset	pointer
,	O
NULL	O
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"\n"	pointer
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
_	O
(	O
"| Type=%s\n"	pointer
)	O
,	O
type	pointer
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
_	O
(	O
"| Encoding=%s\n"	pointer
)	O
,	O
encoding	pointer
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"+"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
size	long
;	O
i	int
++	O
)	O
mu_stream_printf	function
(	O
str	pointer
,	O
"-"	pointer
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"+"	pointer
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
int	O
mime_descend	function
(	O
struct	O
mime_descend_closure	struct
*	O
closure	pointer
,	O
mime_descend_fn	pointer
fun	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
int	O
status	int
=	O
0	int
;	O
mu_header_t	pointer
hdr	pointer
=	O
NULL	O
;	O
char	O
*	O
type	pointer
;	O
char	O
*	O
encoding	pointer
;	O
int	O
ismime	int
=	O
0	int
;	O
struct	O
mime_descend_closure	struct
subclosure	struct
;	O
mu_message_get_header	function
(	O
closure	pointer
->	O
message	pointer
,	O
&	O
hdr	pointer
)	O
;	O
util_get_hdr_value	function
(	O
hdr	pointer
,	O
MU_HEADER_CONTENT_TYPE	pointer
,	O
&	O
type	pointer
)	O
;	O
if	O
(	O
type	pointer
==	O
NULL	O
)	O
type	pointer
=	O
mu_strdup	function
(	O
"text/plain"	pointer
)	O
;	O
get_content_encoding	function
(	O
hdr	pointer
,	O
&	O
encoding	pointer
)	O
;	O
closure	pointer
->	O
type	pointer
=	O
type	pointer
;	O
closure	pointer
->	O
encoding	pointer
=	O
encoding	pointer
;	O
subclosure	struct
.	O
hints	pointer
=	O
0	int
;	O
subclosure	struct
.	O
parent	pointer
=	O
closure	pointer
;	O
mu_message_is_multipart	function
(	O
closure	pointer
->	O
message	pointer
,	O
&	O
ismime	int
)	O
;	O
if	O
(	O
ismime	int
)	O
{	O
unsigned	O
int	O
j	int
;	O
size_t	long
nparts	pointer
;	O
status	int
=	O
mu_message_get_num_parts	function
(	O
closure	pointer
->	O
message	pointer
,	O
&	O
nparts	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERR	O
,	O
"mu_message_get_num_parts"	pointer
,	O
NULL	O
,	O
status	int
)	O
;	O
}	O
else	O
{	O
for	O
(	O
j	int
=	O
1	int
;	O
j	int
<=	O
nparts	pointer
;	O
j	int
++	O
)	O
{	O
mu_message_t	pointer
message	pointer
=	O
NULL	O
;	O
if	O
(	O
mu_message_get_part	function
(	O
closure	pointer
->	O
message	pointer
,	O
j	int
,	O
&	O
message	pointer
)	O
==	O
0	int
)	O
{	O
msgset_t	struct
*	O
set	int
=	O
msgset_expand	function
(	O
msgset_dup	function
(	O
closure	pointer
->	O
msgset	pointer
)	O
,	O
msgset_make_1	function
(	O
j	int
)	O
)	O
;	O
subclosure	struct
.	O
msgset	pointer
=	O
set	int
;	O
subclosure	struct
.	O
message	pointer
=	O
message	pointer
;	O
status	int
=	O
mime_descend	function
(	O
&	O
subclosure	struct
,	O
fun	pointer
,	O
data	pointer
)	O
;	O
msgset_free	function
(	O
set	int
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
}	O
}	O
}	O
}	O
else	O
if	O
(	O
mu_c_strncasecmp	function
(	O
type	pointer
,	O
"message/rfc822"	pointer
,	O
14	int
)	O
==	O
0	int
)	O
{	O
mu_message_t	pointer
submsg	pointer
=	O
NULL	O
;	O
if	O
(	O
mu_message_unencapsulate	function
(	O
closure	pointer
->	O
message	pointer
,	O
&	O
submsg	pointer
,	O
NULL	O
)	O
==	O
0	int
)	O
{	O
subclosure	struct
.	O
hints	pointer
=	O
MDHINT_SELECTED_HEADERS	int
;	O
subclosure	struct
.	O
msgset	pointer
=	O
closure	pointer
->	O
msgset	pointer
;	O
subclosure	struct
.	O
message	pointer
=	O
submsg	pointer
;	O
status	int
=	O
mime_descend	function
(	O
&	O
subclosure	struct
,	O
fun	pointer
,	O
data	pointer
)	O
;	O
}	O
}	O
else	O
status	int
=	O
fun	pointer
(	O
closure	pointer
,	O
data	pointer
)	O
;	O
closure	pointer
->	O
type	pointer
=	O
NULL	O
;	O
closure	pointer
->	O
encoding	pointer
=	O
NULL	O
;	O
free	function
(	O
type	pointer
)	O
;	O
free	function
(	O
encoding	pointer
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
display_submessage	function
(	O
struct	O
mime_descend_closure	struct
*	O
closure	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
char	O
*	O
tmp	pointer
;	O
if	O
(	O
mailvar_get	function
(	O
&	O
tmp	pointer
,	O
mailvar_name_metamail	pointer
,	O
mailvar_type_string	int
,	O
0	int
)	O
==	O
0	int
)	O
{	O
run_metamail	function
(	O
tmp	pointer
,	O
closure	pointer
->	O
message	pointer
)	O
;	O
}	O
else	O
{	O
int	O
builtin_display	int
=	O
1	int
;	O
mu_body_t	pointer
body	pointer
=	O
NULL	O
;	O
mu_stream_t	pointer
b_stream	pointer
=	O
NULL	O
;	O
mu_stream_t	pointer
d_stream	pointer
=	O
NULL	O
;	O
mu_stream_t	pointer
stream	pointer
=	O
NULL	O
;	O
mu_header_t	pointer
hdr	pointer
=	O
NULL	O
;	O
mu_message_get_body	function
(	O
closure	pointer
->	O
message	pointer
,	O
&	O
body	pointer
)	O
;	O
mu_message_get_header	function
(	O
closure	pointer
->	O
message	pointer
,	O
&	O
hdr	pointer
)	O
;	O
mu_body_get_streamref	function
(	O
body	pointer
,	O
&	O
b_stream	pointer
)	O
;	O
if	O
(	O
mu_filter_create	function
(	O
&	O
d_stream	pointer
,	O
b_stream	pointer
,	O
closure	pointer
->	O
encoding	pointer
,	O
MU_FILTER_DECODE	int
,	O
MU_STREAM_READ	int
)	O
==	O
0	int
)	O
{	O
mu_stream_unref	function
(	O
b_stream	pointer
)	O
;	O
stream	pointer
=	O
d_stream	pointer
;	O
}	O
else	O
stream	pointer
=	O
b_stream	pointer
;	O
display_part_header	function
(	O
mu_strout	pointer
,	O
closure	pointer
->	O
msgset	pointer
,	O
closure	pointer
->	O
type	pointer
,	O
closure	pointer
->	O
encoding	pointer
)	O
;	O
if	O
(	O
mailvar_is_true	function
(	O
mailvar_name_metamail	pointer
)	O
)	O
{	O
char	O
*	O
no_ask	pointer
=	O
NULL	O
;	O
mailvar_get	function
(	O
&	O
no_ask	pointer
,	O
mailvar_name_mimenoask	pointer
,	O
mailvar_type_string	int
,	O
0	int
)	O
;	O
builtin_display	int
=	O
display_stream_mailcap	function
(	O
NULL	O
,	O
stream	pointer
,	O
hdr	pointer
,	O
no_ask	pointer
,	O
interactive	int
,	O
0	int
,	O
MU_DEBCAT_APP	int
)	O
;	O
}	O
if	O
(	O
builtin_display	int
)	O
{	O
size_t	long
lines	long
=	O
0	int
;	O
mu_stream_t	pointer
str	pointer
;	O
mu_message_lines	function
(	O
closure	pointer
->	O
message	pointer
,	O
&	O
lines	long
)	O
;	O
str	pointer
=	O
open_pager	function
(	O
lines	long
)	O
;	O
display_headers	function
(	O
str	pointer
,	O
closure	pointer
->	O
message	pointer
,	O
closure	pointer
->	O
msgset	pointer
,	O
closure	pointer
->	O
hints	pointer
&	O
MDHINT_SELECTED_HEADERS	int
)	O
;	O
print_stream	function
(	O
stream	pointer
,	O
str	pointer
)	O
;	O
mu_stream_unref	function
(	O
str	pointer
)	O
;	O
}	O
mu_stream_destroy	function
(	O
&	O
stream	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
print_stream	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
mu_stream_t	pointer
out	pointer
)	O
{	O
char	O
buffer	pointer
[	O
512	int
]	O
;	O
size_t	long
n	pointer
=	O
0	int
;	O
while	O
(	O
mu_stream_read	function
(	O
stream	pointer
,	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
-	O
1	int
,	O
&	O
n	pointer
)	O
==	O
0	int
&&	O
n	pointer
!=	O
0	int
)	O
{	O
if	O
(	O
ml_got_interrupt	function
(	O
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"\nInterrupt"	pointer
)	O
)	O
;	O
break	O
;	O
}	O
buffer	pointer
[	O
n	pointer
]	O
=	O
'\0'	O
;	O
mu_stream_printf	function
(	O
out	pointer
,	O
"%s"	pointer
,	O
buffer	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
get_content_encoding	function
(	O
mu_header_t	pointer
hdr	pointer
,	O
char	O
*	O
*	O
value	pointer
)	O
{	O
char	O
*	O
encoding	pointer
=	O
NULL	O
;	O
util_get_hdr_value	function
(	O
hdr	pointer
,	O
MU_HEADER_CONTENT_TRANSFER_ENCODING	pointer
,	O
&	O
encoding	pointer
)	O
;	O
if	O
(	O
encoding	pointer
==	O
NULL	O
||	O
*	O
encoding	pointer
==	O
'\0'	O
)	O
{	O
if	O
(	O
encoding	pointer
)	O
free	function
(	O
encoding	pointer
)	O
;	O
encoding	pointer
=	O
mu_strdup	function
(	O
"7bit"	pointer
)	O
;	O
}	O
*	O
value	pointer
=	O
encoding	pointer
;	O
return	O
0	int
;	O
}	O
static	O
void	O
run_metamail	function
(	O
const	O
char	O
*	O
mailcap_cmd	pointer
,	O
mu_message_t	pointer
mesg	pointer
)	O
{	O
pid_t	int
pid	int
;	O
struct	O
sigaction	struct
ignore	struct
;	O
struct	O
sigaction	struct
saveintr	struct
;	O
struct	O
sigaction	struct
savequit	struct
;	O
sigset_t	struct
chldmask	struct
;	O
sigset_t	struct
savemask	struct
;	O
ignore	struct
.	O
sa_handler	pointer
=	O
SIG_IGN	O
;	O
ignore	struct
.	O
sa_flags	int
=	O
0	int
;	O
sigemptyset	function
(	O
&	O
ignore	struct
.	O
sa_mask	struct
)	O
;	O
if	O
(	O
sigaction	struct
(	O
SIGINT	int
,	O
&	O
ignore	struct
,	O
&	O
saveintr	struct
)	O
<	O
0	int
)	O
{	O
mu_error	function
(	O
"sigaction: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
sigaction	struct
(	O
SIGQUIT	int
,	O
&	O
ignore	struct
,	O
&	O
savequit	struct
)	O
<	O
0	int
)	O
{	O
mu_error	function
(	O
"sigaction: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
sigaction	struct
(	O
SIGINT	int
,	O
&	O
saveintr	struct
,	O
NULL	O
)	O
;	O
return	O
;	O
}	O
sigemptyset	function
(	O
&	O
chldmask	struct
)	O
;	O
sigaddset	function
(	O
&	O
chldmask	struct
,	O
SIGCHLD	int
)	O
;	O
if	O
(	O
sigprocmask	function
(	O
SIG_BLOCK	int
,	O
&	O
chldmask	struct
,	O
&	O
savemask	struct
)	O
<	O
0	int
)	O
{	O
sigaction	struct
(	O
SIGINT	int
,	O
&	O
saveintr	struct
,	O
NULL	O
)	O
;	O
sigaction	struct
(	O
SIGQUIT	int
,	O
&	O
savequit	struct
,	O
NULL	O
)	O
;	O
return	O
;	O
}	O
pid	int
=	O
fork	function
(	O
)	O
;	O
if	O
(	O
pid	int
<	O
0	int
)	O
{	O
mu_error	function
(	O
"fork: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
}	O
else	O
if	O
(	O
pid	int
==	O
0	int
)	O
{	O
int	O
status	int
;	O
mu_stream_t	pointer
stream	pointer
=	O
NULL	O
;	O
do	O
{	O
mu_stream_t	pointer
pstr	pointer
;	O
char	O
*	O
no_ask	pointer
;	O
setenv	function
(	O
"METAMAIL_PAGER"	pointer
,	O
getenv	function
(	O
"PAGER"	pointer
)	O
,	O
0	int
)	O
;	O
if	O
(	O
mailvar_get	function
(	O
&	O
no_ask	pointer
,	O
mailvar_name_mimenoask	pointer
,	O
mailvar_type_string	int
,	O
0	int
)	O
)	O
setenv	function
(	O
"MM_NOASK"	pointer
,	O
no_ask	pointer
,	O
1	int
)	O
;	O
status	int
=	O
mu_message_get_streamref	function
(	O
mesg	pointer
,	O
&	O
stream	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_error	function
(	O
"mu_message_get_streamref: %s"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
break	O
;	O
}	O
status	int
=	O
mu_command_stream_create	function
(	O
&	O
pstr	pointer
,	O
mailcap_cmd	pointer
,	O
MU_STREAM_WRITE	int
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_error	function
(	O
"mu_command_stream_create: %s"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
break	O
;	O
}	O
mu_stream_copy	function
(	O
pstr	pointer
,	O
stream	pointer
,	O
0	int
,	O
NULL	O
)	O
;	O
mu_stream_close	function
(	O
pstr	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
pstr	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
while	O
(	O
0	int
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
while	O
(	O
waitpid	function
(	O
pid	int
,	O
&	O
status	int
,	O
0	int
)	O
<	O
0	int
)	O
if	O
(	O
errno	O
!=	O
EINTR	int
)	O
break	O
;	O
}	O
sigaction	struct
(	O
SIGINT	int
,	O
&	O
saveintr	struct
,	O
NULL	O
)	O
;	O
sigaction	struct
(	O
SIGQUIT	int
,	O
&	O
savequit	struct
,	O
NULL	O
)	O
;	O
sigprocmask	function
(	O
SIG_SETMASK	int
,	O
&	O
savemask	struct
,	O
NULL	O
)	O
;	O
}	O
