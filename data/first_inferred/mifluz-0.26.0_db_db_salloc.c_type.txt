static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: db_salloc.c,v 1.4 2000/06/28 16:47:01 loic Exp $"	pointer
;	O
SH_LIST_HEAD	O
(	O
__head	struct
)	O
;	O
struct	O
__data	struct
{	O
size_t	long
len	long
;	O
SH_LIST_ENTRY	O
links	struct
;	O
}	O
;	O
void	O
CDB___db_shalloc_init	function
(	O
area	pointer
,	O
size	int
)	O
void	O
*	O
area	pointer
;	O
size_t	long
size	int
;	O
{	O
struct	O
__data	struct
*	O
elp	pointer
;	O
struct	O
__head	struct
*	O
hp	pointer
;	O
hp	pointer
=	O
area	pointer
;	O
SH_LIST_INIT	O
(	O
hp	pointer
)	O
;	O
elp	pointer
=	O
(	O
struct	O
__data	struct
*	O
)	O
(	O
hp	pointer
+	O
1	int
)	O
;	O
elp	pointer
->	O
len	long
=	O
size	int
-	O
sizeof	O
(	O
struct	O
__head	struct
)	O
-	O
sizeof	O
(	O
elp	pointer
->	O
len	long
)	O
;	O
SH_LIST_INSERT_HEAD	O
(	O
hp	pointer
,	O
elp	pointer
,	O
links	struct
,	O
__data	struct
)	O
;	O
}	O
int	O
CDB___db_shalloc	function
(	O
p	pointer
,	O
len	long
,	O
align	long
,	O
retp	pointer
)	O
void	O
*	O
p	pointer
,	O
*	O
retp	pointer
;	O
size_t	long
len	long
,	O
align	long
;	O
{	O
struct	O
__data	struct
*	O
elp	pointer
;	O
size_t	long
*	O
sp	pointer
;	O
void	O
*	O
rp	pointer
;	O
if	O
(	O
len	long
<	O
sizeof	O
(	O
struct	O
__data	struct
)	O
)	O
len	long
=	O
sizeof	O
(	O
struct	O
__data	struct
)	O
;	O
if	O
(	O
align	long
<=	O
sizeof	O
(	O
db_align_t	long long
)	O
)	O
align	long
=	O
sizeof	O
(	O
db_align_t	long long
)	O
;	O
for	O
(	O
elp	pointer
=	O
SH_LIST_FIRST	O
(	O
(	O
struct	O
__head	struct
*	O
)	O
p	pointer
,	O
__data	struct
)	O
;	O
elp	pointer
!=	O
NULL	O
;	O
elp	pointer
=	O
SH_LIST_NEXT	O
(	O
elp	pointer
,	O
links	struct
,	O
__data	struct
)	O
)	O
{	O
rp	pointer
=	O
(	O
u_int8_t	char
*	O
)	O
elp	pointer
+	O
sizeof	O
(	O
size_t	long
)	O
+	O
elp	pointer
->	O
len	long
;	O
rp	pointer
=	O
(	O
u_int8_t	char
*	O
)	O
rp	pointer
-	O
len	long
;	O
rp	pointer
=	O
(	O
u_int8_t	char
*	O
)	O
(	O
(	O
db_alignp_t	long
)	O
rp	pointer
&	O
~	O
(	O
align	long
-	O
1	int
)	O
)	O
;	O
if	O
(	O
(	O
u_int8_t	char
*	O
)	O
rp	pointer
<	O
(	O
u_int8_t	char
*	O
)	O
&	O
elp	pointer
->	O
links	struct
)	O
continue	O
;	O
*	O
(	O
void	O
*	O
*	O
)	O
retp	pointer
=	O
rp	pointer
;	O
if	O
(	O
(	O
u_int8_t	char
*	O
)	O
rp	pointer
>=	O
(	O
u_int8_t	char
*	O
)	O
&	O
elp	pointer
->	O
links	struct
+	O
SHALLOC_FRAGMENT	int
)	O
{	O
sp	pointer
=	O
rp	pointer
;	O
*	O
--	O
sp	pointer
=	O
elp	pointer
->	O
len	long
-	O
(	O
(	O
u_int8_t	char
*	O
)	O
rp	pointer
-	O
(	O
u_int8_t	char
*	O
)	O
&	O
elp	pointer
->	O
links	struct
)	O
;	O
elp	pointer
->	O
len	long
-=	O
*	O
sp	pointer
+	O
sizeof	O
(	O
size_t	long
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
SH_LIST_REMOVE	O
(	O
elp	pointer
,	O
links	struct
,	O
__data	struct
)	O
;	O
for	O
(	O
sp	pointer
=	O
rp	pointer
;	O
(	O
u_int8_t	char
*	O
)	O
--	O
sp	pointer
>=	O
(	O
u_int8_t	char
*	O
)	O
&	O
elp	pointer
->	O
links	struct
;	O
)	O
*	O
sp	pointer
=	O
ILLEGAL_SIZE	int
;	O
return	O
(	O
0	int
)	O
;	O
}	O
return	O
(	O
ENOMEM	int
)	O
;	O
}	O
void	O
CDB___db_shalloc_free	function
(	O
regionp	pointer
,	O
ptr	pointer
)	O
void	O
*	O
regionp	pointer
,	O
*	O
ptr	pointer
;	O
{	O
struct	O
__data	struct
*	O
elp	pointer
,	O
*	O
lastp	pointer
,	O
*	O
newp	pointer
;	O
struct	O
__head	struct
*	O
hp	pointer
;	O
size_t	long
free_size	long
,	O
*	O
sp	pointer
;	O
int	O
merged	int
;	O
for	O
(	O
sp	pointer
=	O
(	O
size_t	long
*	O
)	O
ptr	pointer
;	O
sp	pointer
[	O
-	O
1	int
]	O
==	O
ILLEGAL_SIZE	int
;	O
--	O
sp	pointer
)	O
;	O
ptr	pointer
=	O
sp	pointer
;	O
newp	pointer
=	O
(	O
struct	O
__data	struct
*	O
)	O
(	O
(	O
u_int8_t	char
*	O
)	O
ptr	pointer
-	O
sizeof	O
(	O
size_t	long
)	O
)	O
;	O
free_size	long
=	O
newp	pointer
->	O
len	long
;	O
hp	pointer
=	O
(	O
struct	O
__head	struct
*	O
)	O
regionp	pointer
;	O
for	O
(	O
elp	pointer
=	O
SH_LIST_FIRST	O
(	O
hp	pointer
,	O
__data	struct
)	O
,	O
lastp	pointer
=	O
NULL	O
;	O
elp	pointer
!=	O
NULL	O
&&	O
(	O
void	O
*	O
)	O
elp	pointer
<	O
(	O
void	O
*	O
)	O
ptr	pointer
;	O
lastp	pointer
=	O
elp	pointer
,	O
elp	pointer
=	O
SH_LIST_NEXT	O
(	O
elp	pointer
,	O
links	struct
,	O
__data	struct
)	O
)	O
;	O
merged	int
=	O
0	int
;	O
if	O
(	O
(	O
u_int8_t	char
*	O
)	O
ptr	pointer
+	O
free_size	long
==	O
(	O
u_int8_t	char
*	O
)	O
elp	pointer
)	O
{	O
newp	pointer
->	O
len	long
+=	O
elp	pointer
->	O
len	long
+	O
sizeof	O
(	O
size_t	long
)	O
;	O
SH_LIST_REMOVE	O
(	O
elp	pointer
,	O
links	struct
,	O
__data	struct
)	O
;	O
if	O
(	O
lastp	pointer
!=	O
NULL	O
)	O
SH_LIST_INSERT_AFTER	O
(	O
lastp	pointer
,	O
newp	pointer
,	O
links	struct
,	O
__data	struct
)	O
;	O
else	O
SH_LIST_INSERT_HEAD	O
(	O
hp	pointer
,	O
newp	pointer
,	O
links	struct
,	O
__data	struct
)	O
;	O
merged	int
=	O
1	int
;	O
}	O
if	O
(	O
lastp	pointer
!=	O
NULL	O
&&	O
(	O
u_int8_t	char
*	O
)	O
lastp	pointer
+	O
lastp	pointer
->	O
len	long
+	O
sizeof	O
(	O
size_t	long
)	O
==	O
(	O
u_int8_t	char
*	O
)	O
newp	pointer
)	O
{	O
lastp	pointer
->	O
len	long
+=	O
newp	pointer
->	O
len	long
+	O
sizeof	O
(	O
size_t	long
)	O
;	O
if	O
(	O
merged	int
)	O
SH_LIST_REMOVE	O
(	O
newp	pointer
,	O
links	struct
,	O
__data	struct
)	O
;	O
merged	int
=	O
1	int
;	O
}	O
if	O
(	O
!	O
merged	int
)	O
{	O
if	O
(	O
lastp	pointer
==	O
NULL	O
)	O
SH_LIST_INSERT_HEAD	O
(	O
hp	pointer
,	O
newp	pointer
,	O
links	struct
,	O
__data	struct
)	O
;	O
else	O
SH_LIST_INSERT_AFTER	O
(	O
lastp	pointer
,	O
newp	pointer
,	O
links	struct
,	O
__data	struct
)	O
;	O
}	O
}	O
size_t	long
CDB___db_shalloc_count	function
(	O
addr	pointer
)	O
void	O
*	O
addr	pointer
;	O
{	O
struct	O
__data	struct
*	O
elp	pointer
;	O
size_t	long
count	long
;	O
count	long
=	O
0	int
;	O
for	O
(	O
elp	pointer
=	O
SH_LIST_FIRST	O
(	O
(	O
struct	O
__head	struct
*	O
)	O
addr	pointer
,	O
__data	struct
)	O
;	O
elp	pointer
!=	O
NULL	O
;	O
elp	pointer
=	O
SH_LIST_NEXT	O
(	O
elp	pointer
,	O
links	struct
,	O
__data	struct
)	O
)	O
count	long
+=	O
elp	pointer
->	O
len	long
;	O
return	O
(	O
count	long
)	O
;	O
}	O
size_t	long
CDB___db_shsizeof	function
(	O
ptr	pointer
)	O
void	O
*	O
ptr	pointer
;	O
{	O
struct	O
__data	struct
*	O
elp	pointer
;	O
size_t	long
*	O
sp	pointer
;	O
for	O
(	O
sp	pointer
=	O
(	O
size_t	long
*	O
)	O
ptr	pointer
;	O
sp	pointer
[	O
-	O
1	int
]	O
==	O
ILLEGAL_SIZE	int
;	O
--	O
sp	pointer
)	O
;	O
elp	pointer
=	O
(	O
struct	O
__data	struct
*	O
)	O
(	O
(	O
u_int8_t	char
*	O
)	O
sp	pointer
-	O
sizeof	O
(	O
size_t	long
)	O
)	O
;	O
return	O
(	O
elp	pointer
->	O
len	long
)	O
;	O
}	O
void	O
CDB___db_shalloc_dump	function
(	O
addr	pointer
,	O
fp	pointer
)	O
void	O
*	O
addr	pointer
;	O
FILE	struct
*	O
fp	pointer
;	O
{	O
struct	O
__data	struct
*	O
elp	pointer
;	O
if	O
(	O
fp	pointer
==	O
NULL	O
)	O
fp	pointer
=	O
stderr	pointer
;	O
fprintf	function
(	O
fp	pointer
,	O
"%s\nMemory free list\n"	pointer
,	O
DB_LINE	pointer
)	O
;	O
for	O
(	O
elp	pointer
=	O
SH_LIST_FIRST	O
(	O
(	O
struct	O
__head	struct
*	O
)	O
addr	pointer
,	O
__data	struct
)	O
;	O
elp	pointer
!=	O
NULL	O
;	O
elp	pointer
=	O
SH_LIST_NEXT	O
(	O
elp	pointer
,	O
links	struct
,	O
__data	struct
)	O
)	O
fprintf	function
(	O
fp	pointer
,	O
"%#lx: %lu\t"	pointer
,	O
(	O
u_long	long
)	O
elp	pointer
,	O
(	O
u_long	long
)	O
elp	pointer
->	O
len	long
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
