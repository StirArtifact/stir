typedef	O
struct	O
{	O
wget_html_parsed_result	struct
result	struct
;	O
wget_vector	struct
*	O
additional_tags	pointer
;	O
wget_vector	struct
*	O
ignore_tags	pointer
;	O
int	O
uri_index	int
;	O
size_t	long
css_start_offset	long
;	O
char	O
found_robots	char
,	O
found_content_type	char
,	O
link_inline	bool
;	O
const	O
char	O
*	O
html	pointer
,	O
*	O
css_attr	pointer
,	O
*	O
css_dir	pointer
;	O
}	O
_html_context_t	struct
;	O
static	O
const	O
char	O
maybe	array
[	O
256	int
]	O
=	O
{	O
[	O
'a'	O
]	O
=	O
1	int
,	O
[	O
'b'	O
]	O
=	O
1	int
,	O
[	O
'c'	O
]	O
=	O
1	int
,	O
[	O
'd'	O
]	O
=	O
1	int
,	O
[	O
'f'	O
]	O
=	O
1	int
,	O
[	O
'h'	O
]	O
=	O
1	int
,	O
[	O
'i'	O
]	O
=	O
1	int
,	O
[	O
'l'	O
]	O
=	O
1	int
,	O
[	O
'm'	O
]	O
=	O
1	int
,	O
[	O
'p'	O
]	O
=	O
1	int
,	O
[	O
's'	O
]	O
=	O
1	int
,	O
[	O
'u'	O
]	O
=	O
1	int
,	O
}	O
;	O
static	O
const	O
char	O
attrs	array
[	O
]	O
[	O
12	int
]	O
=	O
{	O
"action"	pointer
,	O
"archive"	pointer
,	O
"background"	pointer
,	O
"code"	pointer
,	O
"codebase"	pointer
,	O
"cite"	pointer
,	O
"classid"	pointer
,	O
"data"	pointer
,	O
"formaction"	pointer
,	O
"href"	pointer
,	O
"icon"	pointer
,	O
"lowsrc"	pointer
,	O
"longdesc"	pointer
,	O
"manifest"	pointer
,	O
"profile"	pointer
,	O
"poster"	pointer
,	O
"src"	pointer
,	O
"srcset"	pointer
,	O
"usemap"	pointer
}	O
;	O
static	O
void	O
_css_parse_uri	function
(	O
void	O
*	O
context	pointer
,	O
const	O
char	O
*	O
url	pointer
WGET_GCC_UNUSED	O
,	O
size_t	long
len	long
,	O
size_t	long
pos	int
)	O
{	O
_html_context_t	struct
*	O
ctx	pointer
=	O
context	pointer
;	O
wget_html_parsed_result	struct
*	O
res	pointer
=	O
&	O
ctx	pointer
->	O
result	struct
;	O
wget_html_parsed_url	struct
*	O
parsed_url	pointer
;	O
if	O
(	O
!	O
(	O
parsed_url	pointer
=	O
wget_malloc	function
(	O
sizeof	O
(	O
wget_html_parsed_url	struct
)	O
)	O
)	O
)	O
return	O
;	O
parsed_url	pointer
->	O
link_inline	bool
=	O
1	int
;	O
wget_strscpy	function
(	O
parsed_url	pointer
->	O
attr	array
,	O
ctx	pointer
->	O
css_attr	pointer
,	O
sizeof	O
(	O
parsed_url	pointer
->	O
attr	array
)	O
)	O
;	O
wget_strscpy	function
(	O
parsed_url	pointer
->	O
dir	array
,	O
ctx	pointer
->	O
css_dir	pointer
,	O
sizeof	O
(	O
parsed_url	pointer
->	O
dir	array
)	O
)	O
;	O
parsed_url	pointer
->	O
url	pointer
.	O
p	pointer
=	O
(	O
const	O
char	O
*	O
)	O
(	O
ctx	pointer
->	O
html	pointer
+	O
ctx	pointer
->	O
css_start_offset	long
+	O
pos	int
)	O
;	O
parsed_url	pointer
->	O
url	pointer
.	O
len	long
=	O
len	long
;	O
if	O
(	O
!	O
res	pointer
->	O
uris	pointer
)	O
res	pointer
->	O
uris	pointer
=	O
wget_vector_create	function
(	O
32	int
,	O
NULL	O
)	O
;	O
wget_vector_add	function
(	O
res	pointer
->	O
uris	pointer
,	O
parsed_url	pointer
)	O
;	O
}	O
static	O
void	O
_html_get_url	function
(	O
void	O
*	O
context	pointer
,	O
int	O
flags	int
,	O
const	O
char	O
*	O
tag	pointer
,	O
const	O
char	O
*	O
attr	array
,	O
const	O
char	O
*	O
val	pointer
,	O
size_t	long
len	long
,	O
size_t	long
pos	int
WGET_GCC_UNUSED	O
)	O
{	O
_html_context_t	struct
*	O
ctx	pointer
=	O
context	pointer
;	O
if	O
(	O
(	O
flags	int
&	O
XML_FLG_BEGIN	O
)	O
)	O
{	O
if	O
(	O
(	O
*	O
tag	pointer
|	O
0x20	int
)	O
==	O
'm'	O
&&	O
!	O
wget_strcasecmp_ascii	function
(	O
tag	pointer
,	O
"meta"	pointer
)	O
)	O
ctx	pointer
->	O
found_robots	char
=	O
ctx	pointer
->	O
found_content_type	char
=	O
0	int
;	O
else	O
if	O
(	O
(	O
*	O
tag	pointer
|	O
0x20	int
)	O
==	O
'l'	O
&&	O
!	O
wget_strcasecmp_ascii	function
(	O
tag	pointer
,	O
"link"	pointer
)	O
)	O
{	O
ctx	pointer
->	O
link_inline	bool
=	O
0	int
;	O
ctx	pointer
->	O
uri_index	int
=	O
-	O
1	int
;	O
}	O
}	O
if	O
(	O
(	O
flags	int
&	O
XML_FLG_ATTRIBUTE	O
)	O
&&	O
val	pointer
)	O
{	O
wget_html_parsed_result	struct
*	O
res	pointer
=	O
&	O
ctx	pointer
->	O
result	struct
;	O
if	O
(	O
(	O
*	O
tag	pointer
|	O
0x20	int
)	O
==	O
'm'	O
&&	O
!	O
wget_strcasecmp_ascii	function
(	O
tag	pointer
,	O
"meta"	pointer
)	O
)	O
{	O
if	O
(	O
!	O
ctx	pointer
->	O
found_robots	char
)	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
attr	array
,	O
"name"	pointer
)	O
&&	O
!	O
wget_strncasecmp_ascii	function
(	O
val	pointer
,	O
"robots"	pointer
,	O
len	long
)	O
)	O
{	O
ctx	pointer
->	O
found_robots	char
=	O
1	int
;	O
return	O
;	O
}	O
}	O
else	O
if	O
(	O
ctx	pointer
->	O
found_robots	char
&&	O
!	O
wget_strcasecmp_ascii	function
(	O
attr	array
,	O
"content"	pointer
)	O
)	O
{	O
char	O
*	O
p	pointer
;	O
char	O
valbuf	O
[	O
len	long
+	O
1	int
]	O
,	O
*	O
value	pointer
=	O
valbuf	O
;	O
memcpy	function
(	O
value	pointer
,	O
val	pointer
,	O
len	long
)	O
;	O
value	pointer
[	O
len	long
]	O
=	O
0	int
;	O
while	O
(	O
*	O
value	pointer
)	O
{	O
while	O
(	O
c_isspace	function
(	O
*	O
value	pointer
)	O
)	O
value	pointer
++	O
;	O
if	O
(	O
*	O
value	pointer
==	O
','	O
)	O
{	O
value	pointer
++	O
;	O
continue	O
;	O
}	O
for	O
(	O
p	pointer
=	O
value	pointer
;	O
*	O
p	pointer
&&	O
!	O
c_isspace	function
(	O
*	O
p	pointer
)	O
&&	O
*	O
p	pointer
!=	O
','	O
;	O
p	pointer
++	O
)	O
;	O
if	O
(	O
p	pointer
==	O
value	pointer
)	O
break	O
;	O
if	O
(	O
!	O
wget_strncasecmp_ascii	function
(	O
value	pointer
,	O
"all"	pointer
,	O
p	pointer
-	O
value	pointer
)	O
||	O
!	O
wget_strncasecmp_ascii	function
(	O
value	pointer
,	O
"follow"	pointer
,	O
p	pointer
-	O
value	pointer
)	O
)	O
res	pointer
->	O
follow	bool
=	O
1	int
;	O
else	O
if	O
(	O
!	O
wget_strncasecmp_ascii	function
(	O
value	pointer
,	O
"nofollow"	pointer
,	O
p	pointer
-	O
value	pointer
)	O
||	O
!	O
wget_strncasecmp_ascii	function
(	O
value	pointer
,	O
"none"	pointer
,	O
p	pointer
-	O
value	pointer
)	O
)	O
res	pointer
->	O
follow	bool
=	O
0	int
;	O
value	pointer
=	O
*	O
p	pointer
?	O
p	pointer
+	O
1	int
:	O
p	pointer
;	O
}	O
return	O
;	O
}	O
if	O
(	O
ctx	pointer
->	O
found_content_type	char
&&	O
!	O
res	pointer
->	O
encoding	pointer
)	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
attr	array
,	O
"content"	pointer
)	O
)	O
{	O
char	O
valbuf	O
[	O
len	long
+	O
1	int
]	O
,	O
*	O
value	pointer
=	O
valbuf	O
;	O
memcpy	function
(	O
value	pointer
,	O
val	pointer
,	O
len	long
)	O
;	O
value	pointer
[	O
len	long
]	O
=	O
0	int
;	O
wget_http_parse_content_type	function
(	O
value	pointer
,	O
NULL	O
,	O
&	O
res	pointer
->	O
encoding	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
ctx	pointer
->	O
found_content_type	char
&&	O
!	O
res	pointer
->	O
encoding	pointer
)	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
attr	array
,	O
"http-equiv"	pointer
)	O
&&	O
!	O
wget_strncasecmp_ascii	function
(	O
val	pointer
,	O
"Content-Type"	pointer
,	O
len	long
)	O
)	O
{	O
ctx	pointer
->	O
found_content_type	char
=	O
1	int
;	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
attr	array
,	O
"charset"	pointer
)	O
)	O
{	O
res	pointer
->	O
encoding	pointer
=	O
wget_strmemdup	function
(	O
val	pointer
,	O
len	long
)	O
;	O
}	O
}	O
return	O
;	O
}	O
if	O
(	O
ctx	pointer
->	O
ignore_tags	pointer
)	O
{	O
if	O
(	O
wget_vector_find	function
(	O
ctx	pointer
->	O
ignore_tags	pointer
,	O
&	O
(	O
wget_html_tag	struct
)	O
{	O
.	O
name	pointer
=	O
tag	pointer
,	O
.	O
attribute	pointer
=	O
NULL	O
}	O
)	O
!=	O
-	O
1	int
||	O
wget_vector_find	function
(	O
ctx	pointer
->	O
ignore_tags	pointer
,	O
&	O
(	O
wget_html_tag	struct
)	O
{	O
.	O
name	pointer
=	O
tag	pointer
,	O
.	O
attribute	pointer
=	O
attr	array
}	O
)	O
!=	O
-	O
1	int
)	O
return	O
;	O
}	O
if	O
(	O
(	O
*	O
attr	array
|	O
0x20	int
)	O
==	O
's'	O
&&	O
!	O
wget_strcasecmp_ascii	function
(	O
attr	array
,	O
"style"	pointer
)	O
&&	O
len	long
)	O
{	O
ctx	pointer
->	O
css_dir	pointer
=	O
tag	pointer
;	O
ctx	pointer
->	O
css_attr	pointer
=	O
"style"	pointer
;	O
ctx	pointer
->	O
css_start_offset	long
=	O
val	pointer
-	O
ctx	pointer
->	O
html	pointer
;	O
wget_css_parse_buffer	function
(	O
val	pointer
,	O
len	long
,	O
_css_parse_uri	function
,	O
NULL	O
,	O
context	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
(	O
*	O
tag	pointer
|	O
0x20	int
)	O
==	O
'l'	O
&&	O
!	O
wget_strcasecmp_ascii	function
(	O
tag	pointer
,	O
"link"	pointer
)	O
)	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
attr	array
,	O
"rel"	pointer
)	O
)	O
{	O
if	O
(	O
!	O
wget_strncasecmp_ascii	function
(	O
val	pointer
,	O
"shortcut icon"	pointer
,	O
len	long
)	O
||	O
!	O
wget_strncasecmp_ascii	function
(	O
val	pointer
,	O
"stylesheet"	pointer
,	O
len	long
)	O
||	O
!	O
wget_strncasecmp_ascii	function
(	O
val	pointer
,	O
"preload"	pointer
,	O
len	long
)	O
)	O
ctx	pointer
->	O
link_inline	bool
=	O
1	int
;	O
else	O
ctx	pointer
->	O
link_inline	bool
=	O
0	int
;	O
if	O
(	O
ctx	pointer
->	O
uri_index	int
>=	O
0	int
)	O
{	O
wget_html_parsed_url	struct
*	O
url	pointer
=	O
wget_vector_get	function
(	O
res	pointer
->	O
uris	pointer
,	O
ctx	pointer
->	O
uri_index	int
)	O
;	O
url	pointer
->	O
link_inline	bool
=	O
ctx	pointer
->	O
link_inline	bool
;	O
}	O
}	O
}	O
int	O
found	int
=	O
0	int
;	O
if	O
(	O
maybe	array
[	O
(	O
unsigned	O
char	O
)	O
*	O
attr	array
|	O
0x20	int
]	O
&&	O
attr	array
[	O
1	int
]	O
&&	O
attr	array
[	O
2	int
]	O
)	O
found	int
=	O
bsearch	function
(	O
attr	array
,	O
attrs	array
,	O
countof	O
(	O
attrs	array
)	O
,	O
sizeof	O
(	O
attrs	array
[	O
0	int
]	O
)	O
,	O
(	O
int	O
(	O
*	O
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
)	O
)	O
wget_strcasecmp_ascii	function
)	O
!=	O
NULL	O
;	O
if	O
(	O
!	O
found	int
&&	O
ctx	pointer
->	O
additional_tags	pointer
)	O
{	O
if	O
(	O
wget_vector_find	function
(	O
ctx	pointer
->	O
additional_tags	pointer
,	O
&	O
(	O
wget_html_tag	struct
)	O
{	O
.	O
name	pointer
=	O
tag	pointer
,	O
.	O
attribute	pointer
=	O
NULL	O
}	O
)	O
!=	O
-	O
1	int
||	O
wget_vector_find	function
(	O
ctx	pointer
->	O
additional_tags	pointer
,	O
&	O
(	O
wget_html_tag	struct
)	O
{	O
.	O
name	pointer
=	O
tag	pointer
,	O
.	O
attribute	pointer
=	O
attr	array
}	O
)	O
!=	O
-	O
1	int
)	O
found	int
=	O
1	int
;	O
}	O
if	O
(	O
found	int
)	O
{	O
for	O
(	O
;	O
len	long
&&	O
c_isspace	function
(	O
*	O
val	pointer
)	O
;	O
val	pointer
++	O
,	O
len	long
--	O
)	O
;	O
for	O
(	O
;	O
len	long
&&	O
c_isspace	function
(	O
val	pointer
[	O
len	long
-	O
1	int
]	O
)	O
;	O
len	long
--	O
)	O
;	O
if	O
(	O
(	O
*	O
tag	pointer
|	O
0x20	int
)	O
==	O
'b'	O
&&	O
!	O
wget_strcasecmp_ascii	function
(	O
tag	pointer
,	O
"base"	pointer
)	O
)	O
{	O
res	pointer
->	O
base	pointer
.	O
p	pointer
=	O
val	pointer
;	O
res	pointer
->	O
base	pointer
.	O
len	long
=	O
len	long
;	O
return	O
;	O
}	O
if	O
(	O
!	O
res	pointer
->	O
uris	pointer
)	O
res	pointer
->	O
uris	pointer
=	O
wget_vector_create	function
(	O
32	int
,	O
NULL	O
)	O
;	O
wget_html_parsed_url	struct
url	pointer
;	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
attr	array
,	O
"srcset"	pointer
)	O
)	O
{	O
while	O
(	O
len	long
)	O
{	O
const	O
char	O
*	O
p	pointer
;	O
for	O
(	O
;	O
len	long
&&	O
c_isspace	function
(	O
*	O
val	pointer
)	O
;	O
val	pointer
++	O
,	O
len	long
--	O
)	O
;	O
for	O
(	O
p	pointer
=	O
val	pointer
;	O
len	long
&&	O
!	O
c_isspace	function
(	O
*	O
val	pointer
)	O
&&	O
*	O
val	pointer
!=	O
','	O
;	O
val	pointer
++	O
,	O
len	long
--	O
)	O
;	O
if	O
(	O
p	pointer
!=	O
val	pointer
)	O
{	O
url	pointer
.	O
link_inline	bool
=	O
ctx	pointer
->	O
link_inline	bool
;	O
wget_strscpy	function
(	O
url	pointer
.	O
attr	array
,	O
attr	array
,	O
sizeof	O
(	O
url	pointer
.	O
attr	array
)	O
)	O
;	O
wget_strscpy	function
(	O
url	pointer
.	O
dir	array
,	O
tag	pointer
,	O
sizeof	O
(	O
url	pointer
.	O
dir	array
)	O
)	O
;	O
url	pointer
.	O
url	pointer
.	O
p	pointer
=	O
p	pointer
;	O
url	pointer
.	O
url	pointer
.	O
len	long
=	O
val	pointer
-	O
p	pointer
;	O
wget_vector_add_memdup	function
(	O
res	pointer
->	O
uris	pointer
,	O
&	O
url	pointer
,	O
sizeof	O
(	O
url	pointer
)	O
)	O
;	O
}	O
for	O
(	O
;	O
len	long
&&	O
*	O
val	pointer
!=	O
','	O
;	O
val	pointer
++	O
,	O
len	long
--	O
)	O
;	O
if	O
(	O
len	long
&&	O
*	O
val	pointer
==	O
','	O
)	O
{	O
val	pointer
++	O
;	O
len	long
--	O
;	O
}	O
}	O
}	O
else	O
{	O
url	pointer
.	O
link_inline	bool
=	O
ctx	pointer
->	O
link_inline	bool
;	O
wget_strscpy	function
(	O
url	pointer
.	O
attr	array
,	O
attr	array
,	O
sizeof	O
(	O
url	pointer
.	O
attr	array
)	O
)	O
;	O
wget_strscpy	function
(	O
url	pointer
.	O
dir	array
,	O
tag	pointer
,	O
sizeof	O
(	O
url	pointer
.	O
dir	array
)	O
)	O
;	O
url	pointer
.	O
url	pointer
.	O
p	pointer
=	O
val	pointer
;	O
url	pointer
.	O
url	pointer
.	O
len	long
=	O
len	long
;	O
ctx	pointer
->	O
uri_index	int
=	O
wget_vector_add_memdup	function
(	O
res	pointer
->	O
uris	pointer
,	O
&	O
url	pointer
,	O
sizeof	O
(	O
url	pointer
)	O
)	O
;	O
}	O
}	O
}	O
if	O
(	O
flags	int
&	O
XML_FLG_CONTENT	O
&&	O
val	pointer
&&	O
len	long
&&	O
!	O
wget_strcasecmp_ascii	function
(	O
tag	pointer
,	O
"style"	pointer
)	O
)	O
{	O
ctx	pointer
->	O
css_dir	pointer
=	O
"style"	pointer
;	O
ctx	pointer
->	O
css_attr	pointer
=	O
""	pointer
;	O
ctx	pointer
->	O
css_start_offset	long
=	O
val	pointer
-	O
ctx	pointer
->	O
html	pointer
;	O
wget_css_parse_buffer	function
(	O
val	pointer
,	O
len	long
,	O
_css_parse_uri	function
,	O
NULL	O
,	O
context	pointer
)	O
;	O
}	O
}	O
void	O
wget_html_free_urls_inline	function
(	O
wget_html_parsed_result	struct
*	O
*	O
res	pointer
)	O
{	O
if	O
(	O
res	pointer
&&	O
*	O
res	pointer
)	O
{	O
xfree	O
(	O
(	O
*	O
res	pointer
)	O
->	O
encoding	pointer
)	O
;	O
wget_vector_free	function
(	O
&	O
(	O
*	O
res	pointer
)	O
->	O
uris	pointer
)	O
;	O
xfree	O
(	O
*	O
res	pointer
)	O
;	O
}	O
}	O
wget_html_parsed_result	struct
*	O
wget_html_get_urls_inline	function
(	O
const	O
char	O
*	O
html	pointer
,	O
wget_vector	struct
*	O
additional_tags	pointer
,	O
wget_vector	struct
*	O
ignore_tags	pointer
)	O
{	O
_html_context_t	struct
context	pointer
=	O
{	O
.	O
result	struct
.	O
follow	bool
=	O
1	int
,	O
.	O
additional_tags	pointer
=	O
additional_tags	pointer
,	O
.	O
ignore_tags	pointer
=	O
ignore_tags	pointer
,	O
.	O
html	pointer
=	O
html	pointer
,	O
}	O
;	O
wget_html_parse_buffer	function
(	O
html	pointer
,	O
_html_get_url	function
,	O
&	O
context	pointer
,	O
HTML_HINT_REMOVE_EMPTY_CONTENT	O
)	O
;	O
return	O
wget_memdup	function
(	O
&	O
context	pointer
.	O
result	struct
,	O
sizeof	O
(	O
context	pointer
.	O
result	struct
)	O
)	O
;	O
}	O
