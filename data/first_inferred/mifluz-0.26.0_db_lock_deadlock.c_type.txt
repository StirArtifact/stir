static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: lock_deadlock.c,v 1.3 2000/06/28 16:47:02 loic Exp $"	pointer
;	O
typedef	O
struct	O
{	O
int	O
valid	int
;	O
u_int32_t	int
id	int
;	O
u_int32_t	int
last_lock	int
;	O
u_int32_t	int
last_locker_id	int
;	O
db_pgno_t	int
pgno	int
;	O
}	O
locker_info	struct
;	O
static	O
int	O
__dd_abort	function
__P	O
(	O
(	O
DB_ENV	struct
*	O
,	O
locker_info	struct
*	O
)	O
)	O
;	O
static	O
int	O
__dd_build	function
__P	O
(	O
(	O
DB_ENV	struct
*	O
,	O
u_int32_t	int
*	O
*	O
,	O
u_int32_t	int
*	O
,	O
locker_info	struct
*	O
*	O
)	O
)	O
;	O
static	O
int	O
__dd_find	function
__P	O
(	O
(	O
DB_ENV	struct
*	O
,	O
u_int32_t	int
*	O
,	O
locker_info	struct
*	O
,	O
u_int32_t	int
,	O
u_int32_t	int
*	O
*	O
*	O
)	O
)	O
;	O
int	O
CDB_lock_detect	function
(	O
dbenv	pointer
,	O
flags	int
,	O
atype	int
,	O
abortp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
u_int32_t	int
flags	int
,	O
atype	int
;	O
int	O
*	O
abortp	pointer
;	O
{	O
DB_LOCKREGION	struct
*	O
region	pointer
;	O
DB_LOCKTAB	struct
*	O
lt	pointer
;	O
locker_info	struct
*	O
idmap	pointer
;	O
u_int32_t	int
*	O
bitmap	pointer
,	O
*	O
*	O
deadp	pointer
,	O
*	O
*	O
free_me	pointer
,	O
i	int
,	O
killid	int
,	O
nentries	int
,	O
nlockers	int
;	O
int	O
do_pass	int
,	O
ret	int
;	O
PANIC_CHECK	O
(	O
dbenv	pointer
)	O
;	O
ENV_REQUIRES_CONFIG	O
(	O
dbenv	pointer
,	O
dbenv	pointer
->	O
lk_handle	pointer
,	O
DB_INIT_LOCK	int
)	O
;	O
lt	pointer
=	O
dbenv	pointer
->	O
lk_handle	pointer
;	O
if	O
(	O
abortp	pointer
!=	O
NULL	O
)	O
*	O
abortp	pointer
=	O
0	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_fchk	function
(	O
dbenv	pointer
,	O
"CDB_lock_detect"	pointer
,	O
flags	int
,	O
DB_LOCK_CONFLICT	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
LOCKREGION	O
(	O
dbenv	pointer
,	O
lt	pointer
)	O
;	O
if	O
(	O
LF_ISSET	O
(	O
DB_LOCK_CONFLICT	int
)	O
)	O
{	O
region	pointer
=	O
lt	pointer
->	O
reginfo	pointer
.	O
primary	int
;	O
do_pass	int
=	O
region	pointer
->	O
need_dd	int
!=	O
0	int
;	O
if	O
(	O
!	O
do_pass	int
)	O
{	O
UNLOCKREGION	O
(	O
dbenv	pointer
,	O
lt	pointer
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
}	O
ret	int
=	O
__dd_build	function
(	O
dbenv	pointer
,	O
&	O
bitmap	pointer
,	O
&	O
nlockers	int
,	O
&	O
idmap	pointer
)	O
;	O
UNLOCKREGION	O
(	O
dbenv	pointer
,	O
lt	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
nlockers	int
==	O
0	int
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
__dd_find	function
(	O
dbenv	pointer
,	O
bitmap	pointer
,	O
idmap	pointer
,	O
nlockers	int
,	O
&	O
deadp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
nentries	int
=	O
ALIGN	O
(	O
nlockers	int
,	O
32	int
)	O
/	O
32	int
;	O
killid	int
=	O
BAD_KILLID	int
;	O
free_me	pointer
=	O
deadp	pointer
;	O
for	O
(	O
;	O
*	O
deadp	pointer
!=	O
NULL	O
;	O
deadp	pointer
++	O
)	O
{	O
if	O
(	O
abortp	pointer
!=	O
NULL	O
)	O
++	O
*	O
abortp	pointer
;	O
switch	O
(	O
atype	int
)	O
{	O
case	O
DB_LOCK_OLDEST	int
:	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nlockers	int
;	O
i	int
++	O
)	O
if	O
(	O
ISSET_MAP	O
(	O
*	O
deadp	pointer
,	O
i	int
)	O
)	O
{	O
killid	int
=	O
i	int
;	O
break	O
;	O
}	O
if	O
(	O
killid	int
==	O
BAD_KILLID	int
)	O
break	O
;	O
for	O
(	O
i	int
=	O
killid	int
+	O
1	int
;	O
i	int
<	O
nlockers	int
;	O
i	int
++	O
)	O
if	O
(	O
ISSET_MAP	O
(	O
*	O
deadp	pointer
,	O
i	int
)	O
&&	O
idmap	pointer
[	O
i	int
]	O
.	O
id	int
<	O
idmap	pointer
[	O
killid	int
]	O
.	O
id	int
)	O
killid	int
=	O
i	int
;	O
break	O
;	O
case	O
DB_LOCK_DEFAULT	int
:	O
case	O
DB_LOCK_RANDOM	int
:	O
killid	int
=	O
(	O
*	O
deadp	pointer
-	O
bitmap	pointer
)	O
/	O
nentries	int
;	O
break	O
;	O
case	O
DB_LOCK_YOUNGEST	int
:	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nlockers	int
;	O
i	int
++	O
)	O
if	O
(	O
ISSET_MAP	O
(	O
*	O
deadp	pointer
,	O
i	int
)	O
)	O
{	O
killid	int
=	O
i	int
;	O
break	O
;	O
}	O
if	O
(	O
killid	int
==	O
BAD_KILLID	int
)	O
break	O
;	O
for	O
(	O
i	int
=	O
killid	int
+	O
1	int
;	O
i	int
<	O
nlockers	int
;	O
i	int
++	O
)	O
if	O
(	O
ISSET_MAP	O
(	O
*	O
deadp	pointer
,	O
i	int
)	O
&&	O
idmap	pointer
[	O
i	int
]	O
.	O
id	int
>	O
idmap	pointer
[	O
killid	int
]	O
.	O
id	int
)	O
killid	int
=	O
i	int
;	O
break	O
;	O
default	O
:	O
killid	int
=	O
BAD_KILLID	int
;	O
ret	int
=	O
EINVAL	int
;	O
}	O
if	O
(	O
killid	int
==	O
BAD_KILLID	int
)	O
continue	O
;	O
if	O
(	O
(	O
ret	int
=	O
__dd_abort	function
(	O
dbenv	pointer
,	O
&	O
idmap	pointer
[	O
killid	int
]	O
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
ret	int
==	O
EINVAL	int
)	O
ret	int
=	O
0	int
;	O
else	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"warning: unable to abort locker %lx"	pointer
,	O
(	O
u_long	long
)	O
idmap	pointer
[	O
killid	int
]	O
.	O
id	int
)	O
;	O
}	O
else	O
if	O
(	O
FLD_ISSET	O
(	O
dbenv	pointer
->	O
verbose	int
,	O
DB_VERB_DEADLOCK	int
)	O
)	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"Aborting locker %lx"	pointer
,	O
(	O
u_long	long
)	O
idmap	pointer
[	O
killid	int
]	O
.	O
id	int
)	O
;	O
}	O
CDB___os_free	function
(	O
free_me	pointer
,	O
0	int
)	O
;	O
CDB___os_free	function
(	O
bitmap	pointer
,	O
0	int
)	O
;	O
CDB___os_free	function
(	O
idmap	pointer
,	O
0	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
static	O
int	O
__dd_build	function
(	O
dbenv	pointer
,	O
bmp	pointer
,	O
nlockers	int
,	O
idmap	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
u_int32_t	int
*	O
*	O
bmp	pointer
,	O
*	O
nlockers	int
;	O
locker_info	struct
*	O
*	O
idmap	pointer
;	O
{	O
struct	O
__db_lock	struct
*	O
lp	pointer
;	O
DB_LOCKER	struct
*	O
lip	pointer
,	O
*	O
lockerp	pointer
,	O
*	O
child	pointer
;	O
DB_LOCKOBJ	struct
*	O
op	enum
,	O
*	O
lo	pointer
;	O
DB_LOCKREGION	struct
*	O
region	pointer
;	O
DB_LOCKTAB	struct
*	O
lt	pointer
;	O
locker_info	struct
*	O
id_array	pointer
;	O
u_int32_t	int
*	O
bitmap	pointer
,	O
count	int
,	O
dd	int
,	O
*	O
entryp	pointer
,	O
i	int
,	O
id	int
,	O
ndx	int
,	O
nentries	int
,	O
*	O
tmpmap	pointer
;	O
u_int8_t	char
*	O
pptr	pointer
;	O
int	O
is_first	int
,	O
ret	int
;	O
lt	pointer
=	O
dbenv	pointer
->	O
lk_handle	pointer
;	O
region	pointer
=	O
lt	pointer
->	O
reginfo	pointer
.	O
primary	int
;	O
retry	O
:	O
count	int
=	O
region	pointer
->	O
nlockers	int
;	O
region	pointer
->	O
need_dd	int
=	O
0	int
;	O
if	O
(	O
count	int
==	O
0	int
)	O
{	O
*	O
nlockers	int
=	O
0	int
;	O
return	O
(	O
0	int
)	O
;	O
}	O
if	O
(	O
FLD_ISSET	O
(	O
dbenv	pointer
->	O
verbose	int
,	O
DB_VERB_DEADLOCK	int
)	O
)	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%lu lockers"	pointer
,	O
(	O
u_long	long
)	O
count	int
)	O
;	O
count	int
+=	O
40	int
;	O
nentries	int
=	O
ALIGN	O
(	O
count	int
,	O
32	int
)	O
/	O
32	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_calloc	function
(	O
dbenv	pointer
,	O
(	O
size_t	long
)	O
count	int
,	O
sizeof	O
(	O
u_int32_t	int
)	O
*	O
nentries	int
,	O
&	O
bitmap	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_calloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
,	O
nentries	int
,	O
&	O
tmpmap	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
CDB___os_free	function
(	O
bitmap	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
*	O
nentries	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_calloc	function
(	O
dbenv	pointer
,	O
(	O
size_t	long
)	O
count	int
,	O
sizeof	O
(	O
locker_info	struct
)	O
,	O
&	O
id_array	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
CDB___os_free	function
(	O
bitmap	pointer
,	O
count	int
*	O
sizeof	O
(	O
u_int32_t	int
)	O
*	O
nentries	int
)	O
;	O
CDB___os_free	function
(	O
tmpmap	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
*	O
nentries	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
if	O
(	O
region	pointer
->	O
nlockers	int
>	O
count	int
)	O
{	O
CDB___os_free	function
(	O
bitmap	pointer
,	O
count	int
*	O
sizeof	O
(	O
u_int32_t	int
)	O
*	O
nentries	int
)	O
;	O
CDB___os_free	function
(	O
tmpmap	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
*	O
nentries	int
)	O
;	O
CDB___os_free	function
(	O
id_array	pointer
,	O
count	int
*	O
sizeof	O
(	O
locker_info	struct
)	O
)	O
;	O
goto	O
retry	O
;	O
}	O
for	O
(	O
id	int
=	O
0	int
,	O
i	int
=	O
0	int
;	O
i	int
<	O
region	pointer
->	O
table_size	int
;	O
i	int
++	O
)	O
{	O
for	O
(	O
lip	pointer
=	O
SH_TAILQ_FIRST	O
(	O
&	O
lt	pointer
->	O
locker_tab	pointer
[	O
i	int
]	O
,	O
__db_locker	struct
)	O
;	O
lip	pointer
!=	O
NULL	O
;	O
lip	pointer
=	O
SH_TAILQ_NEXT	O
(	O
lip	pointer
,	O
links	struct
,	O
__db_locker	struct
)	O
)	O
if	O
(	O
lip	pointer
->	O
master_locker	long
==	O
INVALID_ROFF	int
)	O
{	O
lip	pointer
->	O
dd_id	int
=	O
id	int
++	O
;	O
id_array	pointer
[	O
lip	pointer
->	O
dd_id	int
]	O
.	O
id	int
=	O
lip	pointer
->	O
id	int
;	O
}	O
else	O
lip	pointer
->	O
dd_id	int
=	O
DD_INVALID_ID	O
;	O
}	O
for	O
(	O
op	enum
=	O
SH_TAILQ_FIRST	O
(	O
&	O
region	pointer
->	O
dd_objs	struct
,	O
__db_lockobj	struct
)	O
;	O
op	enum
!=	O
NULL	O
;	O
op	enum
=	O
SH_TAILQ_NEXT	O
(	O
op	enum
,	O
dd_links	struct
,	O
__db_lockobj	struct
)	O
)	O
{	O
CLEAR_MAP	O
(	O
tmpmap	pointer
,	O
nentries	int
)	O
;	O
for	O
(	O
lp	pointer
=	O
SH_TAILQ_FIRST	O
(	O
&	O
op	enum
->	O
holders	struct
,	O
__db_lock	struct
)	O
;	O
lp	pointer
!=	O
NULL	O
;	O
lp	pointer
=	O
SH_TAILQ_NEXT	O
(	O
lp	pointer
,	O
links	struct
,	O
__db_lock	struct
)	O
)	O
{	O
ndx	int
=	O
CDB___lock_locker_hash	function
(	O
lp	pointer
->	O
holder	int
)	O
%	O
region	pointer
->	O
table_size	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___lock_getlocker	function
(	O
lt	pointer
,	O
lp	pointer
->	O
holder	int
,	O
ndx	int
,	O
0	int
,	O
&	O
lockerp	pointer
)	O
)	O
!=	O
0	int
)	O
continue	O
;	O
if	O
(	O
lockerp	pointer
->	O
dd_id	int
==	O
DD_INVALID_ID	O
)	O
dd	int
=	O
(	O
(	O
DB_LOCKER	struct
*	O
)	O
R_ADDR	O
(	O
&	O
lt	pointer
->	O
reginfo	pointer
,	O
lockerp	pointer
->	O
master_locker	long
)	O
)	O
->	O
dd_id	int
;	O
else	O
dd	int
=	O
lockerp	pointer
->	O
dd_id	int
;	O
id_array	pointer
[	O
dd	int
]	O
.	O
valid	int
=	O
1	int
;	O
if	O
(	O
lp	pointer
->	O
status	int
==	O
DB_LSTAT_HELD	int
)	O
SET_MAP	O
(	O
tmpmap	pointer
,	O
dd	int
)	O
;	O
}	O
for	O
(	O
is_first	int
=	O
1	int
,	O
lp	pointer
=	O
SH_TAILQ_FIRST	O
(	O
&	O
op	enum
->	O
waiters	struct
,	O
__db_lock	struct
)	O
;	O
lp	pointer
!=	O
NULL	O
;	O
is_first	int
=	O
0	int
,	O
lp	pointer
=	O
SH_TAILQ_NEXT	O
(	O
lp	pointer
,	O
links	struct
,	O
__db_lock	struct
)	O
)	O
{	O
ndx	int
=	O
CDB___lock_locker_hash	function
(	O
lp	pointer
->	O
holder	int
)	O
%	O
region	pointer
->	O
table_size	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___lock_getlocker	function
(	O
lt	pointer
,	O
lp	pointer
->	O
holder	int
,	O
ndx	int
,	O
0	int
,	O
&	O
lockerp	pointer
)	O
)	O
!=	O
0	int
)	O
continue	O
;	O
if	O
(	O
lockerp	pointer
->	O
dd_id	int
==	O
DD_INVALID_ID	O
)	O
dd	int
=	O
(	O
(	O
DB_LOCKER	struct
*	O
)	O
R_ADDR	O
(	O
&	O
lt	pointer
->	O
reginfo	pointer
,	O
lockerp	pointer
->	O
master_locker	long
)	O
)	O
->	O
dd_id	int
;	O
else	O
dd	int
=	O
lockerp	pointer
->	O
dd_id	int
;	O
id_array	pointer
[	O
dd	int
]	O
.	O
valid	int
=	O
1	int
;	O
if	O
(	O
lp	pointer
->	O
status	int
!=	O
DB_LSTAT_WAITING	int
)	O
continue	O
;	O
entryp	pointer
=	O
bitmap	pointer
+	O
(	O
nentries	int
*	O
dd	int
)	O
;	O
OR_MAP	O
(	O
entryp	pointer
,	O
tmpmap	pointer
,	O
nentries	int
)	O
;	O
if	O
(	O
is_first	int
)	O
CLR_MAP	O
(	O
entryp	pointer
,	O
dd	int
)	O
;	O
}	O
}	O
for	O
(	O
id	int
=	O
0	int
;	O
id	int
<	O
count	int
;	O
id	int
++	O
)	O
{	O
if	O
(	O
!	O
id_array	pointer
[	O
id	int
]	O
.	O
valid	int
)	O
continue	O
;	O
ndx	int
=	O
CDB___lock_locker_hash	function
(	O
id_array	pointer
[	O
id	int
]	O
.	O
id	int
)	O
%	O
region	pointer
->	O
table_size	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___lock_getlocker	function
(	O
lt	pointer
,	O
id_array	pointer
[	O
id	int
]	O
.	O
id	int
,	O
ndx	int
,	O
0	int
,	O
&	O
lockerp	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"No locks for locker %lu"	pointer
,	O
(	O
u_long	long
)	O
id_array	pointer
[	O
id	int
]	O
.	O
id	int
)	O
;	O
continue	O
;	O
}	O
child	pointer
=	O
SH_LIST_FIRST	O
(	O
&	O
lockerp	pointer
->	O
child_locker	struct
,	O
__db_locker	struct
)	O
;	O
if	O
(	O
child	pointer
!=	O
NULL	O
)	O
{	O
do	O
{	O
lp	pointer
=	O
SH_LIST_FIRST	O
(	O
&	O
child	pointer
->	O
heldby	struct
,	O
__db_lock	struct
)	O
;	O
if	O
(	O
lp	pointer
!=	O
NULL	O
&&	O
lp	pointer
->	O
status	int
==	O
DB_LSTAT_WAITING	int
)	O
{	O
id_array	pointer
[	O
id	int
]	O
.	O
last_locker_id	int
=	O
child	pointer
->	O
id	int
;	O
goto	O
get_lock	O
;	O
}	O
child	pointer
=	O
SH_LIST_NEXT	O
(	O
child	pointer
,	O
child_link	struct
,	O
__db_locker	struct
)	O
;	O
}	O
while	O
(	O
child	pointer
!=	O
NULL	O
)	O
;	O
}	O
lp	pointer
=	O
SH_LIST_FIRST	O
(	O
&	O
lockerp	pointer
->	O
heldby	struct
,	O
__db_lock	struct
)	O
;	O
if	O
(	O
lp	pointer
!=	O
NULL	O
)	O
{	O
id_array	pointer
[	O
id	int
]	O
.	O
last_locker_id	int
=	O
lockerp	pointer
->	O
id	int
;	O
get_lock	O
:	O
id_array	pointer
[	O
id	int
]	O
.	O
last_lock	int
=	O
R_OFFSET	O
(	O
&	O
lt	pointer
->	O
reginfo	pointer
,	O
lp	pointer
)	O
;	O
lo	pointer
=	O
(	O
DB_LOCKOBJ	struct
*	O
)	O
(	O
(	O
u_int8_t	char
*	O
)	O
lp	pointer
+	O
lp	pointer
->	O
obj	pointer
)	O
;	O
pptr	pointer
=	O
SH_DBT_PTR	O
(	O
&	O
lo	pointer
->	O
lockobj	struct
)	O
;	O
if	O
(	O
lo	pointer
->	O
lockobj	struct
.	O
size	int
>=	O
sizeof	O
(	O
db_pgno_t	int
)	O
)	O
memcpy	function
(	O
&	O
id_array	pointer
[	O
id	int
]	O
.	O
pgno	int
,	O
pptr	pointer
,	O
sizeof	O
(	O
db_pgno_t	int
)	O
)	O
;	O
else	O
id_array	pointer
[	O
id	int
]	O
.	O
pgno	int
=	O
0	int
;	O
}	O
}	O
region	pointer
->	O
need_dd	int
=	O
0	int
;	O
*	O
nlockers	int
=	O
id	int
;	O
*	O
idmap	pointer
=	O
id_array	pointer
;	O
*	O
bmp	pointer
=	O
bitmap	pointer
;	O
CDB___os_free	function
(	O
tmpmap	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
*	O
nentries	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
int	O
__dd_find	function
(	O
dbenv	pointer
,	O
bmp	pointer
,	O
idmap	pointer
,	O
nlockers	int
,	O
deadp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
u_int32_t	int
*	O
bmp	pointer
,	O
nlockers	int
;	O
locker_info	struct
*	O
idmap	pointer
;	O
u_int32_t	int
*	O
*	O
*	O
deadp	pointer
;	O
{	O
u_int32_t	int
i	int
,	O
j	int
,	O
k	int
,	O
nentries	int
,	O
*	O
mymap	pointer
,	O
*	O
tmpmap	pointer
;	O
u_int32_t	int
*	O
*	O
retp	pointer
;	O
int	O
ndead	int
,	O
ndeadalloc	int
,	O
ret	int
;	O
ndeadalloc	int
=	O
INITIAL_DEAD_ALLOC	int
;	O
ndead	int
=	O
0	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
ndeadalloc	int
*	O
sizeof	O
(	O
u_int32_t	int
*	O
)	O
,	O
NULL	O
,	O
&	O
retp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
nentries	int
=	O
ALIGN	O
(	O
nlockers	int
,	O
32	int
)	O
/	O
32	int
;	O
for	O
(	O
mymap	pointer
=	O
bmp	pointer
,	O
i	int
=	O
0	int
;	O
i	int
<	O
nlockers	int
;	O
i	int
++	O
,	O
mymap	pointer
+=	O
nentries	int
)	O
{	O
if	O
(	O
!	O
idmap	pointer
[	O
i	int
]	O
.	O
valid	int
)	O
continue	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
nlockers	int
;	O
j	int
++	O
)	O
{	O
if	O
(	O
!	O
ISSET_MAP	O
(	O
mymap	pointer
,	O
j	int
)	O
)	O
continue	O
;	O
tmpmap	pointer
=	O
bmp	pointer
+	O
(	O
nentries	int
*	O
j	int
)	O
;	O
OR_MAP	O
(	O
mymap	pointer
,	O
tmpmap	pointer
,	O
nentries	int
)	O
;	O
if	O
(	O
!	O
ISSET_MAP	O
(	O
mymap	pointer
,	O
i	int
)	O
)	O
continue	O
;	O
if	O
(	O
ndead	int
+	O
2	int
>=	O
ndeadalloc	int
)	O
{	O
ndeadalloc	int
<<=	O
1	int
;	O
if	O
(	O
CDB___os_realloc	function
(	O
dbenv	pointer
,	O
ndeadalloc	int
*	O
sizeof	O
(	O
u_int32_t	int
)	O
,	O
NULL	O
,	O
&	O
retp	pointer
)	O
!=	O
0	int
)	O
{	O
retp	pointer
[	O
ndead	int
]	O
=	O
NULL	O
;	O
*	O
deadp	pointer
=	O
retp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
}	O
retp	pointer
[	O
ndead	int
++	O
]	O
=	O
mymap	pointer
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
nlockers	int
;	O
k	int
++	O
)	O
if	O
(	O
ISSET_MAP	O
(	O
mymap	pointer
,	O
k	int
)	O
)	O
idmap	pointer
[	O
k	int
]	O
.	O
valid	int
=	O
0	int
;	O
break	O
;	O
}	O
}	O
retp	pointer
[	O
ndead	int
]	O
=	O
NULL	O
;	O
*	O
deadp	pointer
=	O
retp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
int	O
__dd_abort	function
(	O
dbenv	pointer
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
locker_info	struct
*	O
info	pointer
;	O
{	O
struct	O
__db_lock	struct
*	O
lockp	pointer
;	O
DB_LOCKER	struct
*	O
lockerp	pointer
;	O
DB_LOCKOBJ	struct
*	O
sh_obj	pointer
;	O
DB_LOCKREGION	struct
*	O
region	pointer
;	O
DB_LOCKTAB	struct
*	O
lt	pointer
;	O
u_int32_t	int
ndx	int
;	O
int	O
ret	int
;	O
lt	pointer
=	O
dbenv	pointer
->	O
lk_handle	pointer
;	O
region	pointer
=	O
lt	pointer
->	O
reginfo	pointer
.	O
primary	int
;	O
LOCKREGION	O
(	O
dbenv	pointer
,	O
lt	pointer
)	O
;	O
ndx	int
=	O
CDB___lock_locker_hash	function
(	O
info	pointer
->	O
last_locker_id	int
)	O
%	O
region	pointer
->	O
table_size	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___lock_getlocker	function
(	O
lt	pointer
,	O
info	pointer
->	O
last_locker_id	int
,	O
ndx	int
,	O
0	int
,	O
&	O
lockerp	pointer
)	O
)	O
!=	O
0	int
||	O
lockerp	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
ret	int
==	O
0	int
)	O
ret	int
=	O
EINVAL	int
;	O
goto	O
out	O
;	O
}	O
lockp	pointer
=	O
SH_LIST_FIRST	O
(	O
&	O
lockerp	pointer
->	O
heldby	struct
,	O
__db_lock	struct
)	O
;	O
if	O
(	O
lockp	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
LOCKER_FREEABLE	O
(	O
lockerp	pointer
)	O
)	O
{	O
CDB___lock_freelocker	function
(	O
lt	pointer
,	O
region	pointer
,	O
lockerp	pointer
,	O
ndx	int
)	O
;	O
goto	O
out	O
;	O
}	O
}	O
else	O
if	O
(	O
R_OFFSET	O
(	O
&	O
lt	pointer
->	O
reginfo	pointer
,	O
lockp	pointer
)	O
!=	O
info	pointer
->	O
last_lock	int
||	O
lockp	pointer
->	O
status	int
!=	O
DB_LSTAT_WAITING	int
)	O
{	O
ret	int
=	O
EINVAL	int
;	O
goto	O
out	O
;	O
}	O
sh_obj	pointer
=	O
(	O
DB_LOCKOBJ	struct
*	O
)	O
(	O
(	O
u_int8_t	char
*	O
)	O
lockp	pointer
+	O
lockp	pointer
->	O
obj	pointer
)	O
;	O
SH_LIST_REMOVE	O
(	O
lockp	pointer
,	O
locker_links	struct
,	O
__db_lock	struct
)	O
;	O
SHOBJECT_LOCK	O
(	O
lt	pointer
,	O
region	pointer
,	O
sh_obj	pointer
,	O
ndx	int
)	O
;	O
lockp	pointer
->	O
status	int
=	O
DB_LSTAT_ABORTED	int
;	O
SH_TAILQ_REMOVE	O
(	O
&	O
sh_obj	pointer
->	O
waiters	struct
,	O
lockp	pointer
,	O
links	struct
,	O
__db_lock	struct
)	O
;	O
if	O
(	O
SH_TAILQ_FIRST	O
(	O
&	O
sh_obj	pointer
->	O
waiters	struct
,	O
__db_lock	struct
)	O
==	O
NULL	O
)	O
SH_TAILQ_REMOVE	O
(	O
&	O
region	pointer
->	O
dd_objs	struct
,	O
sh_obj	pointer
,	O
dd_links	struct
,	O
__db_lockobj	struct
)	O
;	O
else	O
ret	int
=	O
CDB___lock_promote	function
(	O
lt	pointer
,	O
sh_obj	pointer
)	O
;	O
MUTEX_UNLOCK	O
(	O
&	O
lockp	pointer
->	O
mutex	union
)	O
;	O
region	pointer
->	O
ndeadlocks	int
++	O
;	O
UNLOCKREGION	O
(	O
dbenv	pointer
,	O
lt	pointer
)	O
;	O
return	O
(	O
0	int
)	O
;	O
out	O
:	O
UNLOCKREGION	O
(	O
dbenv	pointer
,	O
lt	pointer
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
