static	O
int	O
discardkeyval	function
(	O
int	O
c	int
,	O
register	O
struct	O
fro	struct
*	O
f	pointer
)	O
{	O
for	O
(	O
;	O
;	O
)	O
switch	O
(	O
c	int
)	O
{	O
case	O
KDELIM	char
:	O
case	O
'\n'	O
:	O
return	O
c	int
;	O
default	O
:	O
GETCHAR_OR	O
(	O
c	int
,	O
f	pointer
,	O
return	O
EOF	O
)	O
;	O
break	O
;	O
}	O
}	O
int	O
rcsfcmp	function
(	O
register	O
struct	O
fro	struct
*	O
xfp	pointer
,	O
struct	O
stat	struct
const	O
*	O
xstatp	pointer
,	O
char	O
const	O
*	O
uname	pointer
,	O
struct	O
delta	struct
const	O
*	O
delta	struct
)	O
{	O
int	O
xc	int
,	O
uc	int
;	O
char	O
xkeyword	array
[	O
keylength	int
+	O
2	int
]	O
;	O
bool	bool
eqkeyvals	bool
;	O
register	O
struct	O
fro	struct
*	O
ufp	pointer
;	O
register	O
bool	bool
xeof	bool
,	O
ueof	bool
;	O
register	O
char	O
*	O
tp	pointer
;	O
register	O
char	O
const	O
*	O
sp	pointer
;	O
register	O
size_t	long
leaderlen	long
;	O
int	O
result	pointer
;	O
struct	O
pool_found	struct
match1	struct
;	O
struct	O
stat	struct
ustat	struct
;	O
if	O
(	O
!	O
(	O
ufp	pointer
=	O
fro_open	function
(	O
uname	pointer
,	O
FOPEN_R_WORK	pointer
,	O
&	O
ustat	struct
)	O
)	O
)	O
{	O
fatal_sys	function
(	O
uname	pointer
)	O
;	O
}	O
xeof	bool
=	O
ueof	bool
=	O
false	int
;	O
if	O
(	O
MIN_UNEXPAND	O
<=	O
BE	O
(	O
kws	int
)	O
)	O
{	O
if	O
(	O
!	O
(	O
result	pointer
=	O
xstatp	pointer
->	O
st_size	long
!=	O
ustat	struct
.	O
st_size	long
)	O
)	O
{	O
if	O
(	O
RM_STDIO	int
!=	O
xfp	pointer
->	O
rm	enum
&&	O
RM_STDIO	int
!=	O
ufp	pointer
->	O
rm	enum
)	O
result	pointer
=	O
MEM_DIFF	O
(	O
xstatp	pointer
->	O
st_size	long
,	O
xfp	pointer
->	O
base	pointer
,	O
ufp	pointer
->	O
base	pointer
)	O
;	O
else	O
for	O
(	O
;	O
;	O
)	O
{	O
GETCHAR_OR	O
(	O
xc	int
,	O
xfp	pointer
,	O
xeof	bool
=	O
true	int
)	O
;	O
GETCHAR_OR	O
(	O
uc	int
,	O
ufp	pointer
,	O
ueof	bool
=	O
true	int
)	O
;	O
if	O
(	O
xeof	bool
|	O
ueof	bool
)	O
goto	O
eof	O
;	O
if	O
(	O
xc	int
!=	O
uc	int
)	O
goto	O
return1	O
;	O
}	O
}	O
}	O
else	O
{	O
xc	int
=	O
0	int
;	O
uc	int
=	O
0	int
;	O
leaderlen	long
=	O
0	int
;	O
result	pointer
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
xc	int
!=	O
KDELIM	char
)	O
{	O
GETCHAR_OR	O
(	O
xc	int
,	O
xfp	pointer
,	O
xeof	bool
=	O
true	int
)	O
;	O
GETCHAR_OR	O
(	O
uc	int
,	O
ufp	pointer
,	O
ueof	bool
=	O
true	int
)	O
;	O
if	O
(	O
xeof	bool
|	O
ueof	bool
)	O
goto	O
eof	O
;	O
}	O
else	O
{	O
tp	pointer
=	O
xkeyword	array
;	O
for	O
(	O
;	O
;	O
)	O
{	O
GETCHAR_OR	O
(	O
xc	int
,	O
xfp	pointer
,	O
xeof	bool
=	O
true	int
)	O
;	O
GETCHAR_OR	O
(	O
uc	int
,	O
ufp	pointer
,	O
ueof	bool
=	O
true	int
)	O
;	O
if	O
(	O
xeof	bool
|	O
ueof	bool
)	O
goto	O
eof	O
;	O
if	O
(	O
xc	int
!=	O
uc	int
)	O
break	O
;	O
switch	O
(	O
xc	int
)	O
{	O
default	O
:	O
if	O
(	O
xkeyword	array
+	O
keylength	int
<=	O
tp	pointer
)	O
break	O
;	O
*	O
tp	pointer
++	O
=	O
xc	int
;	O
continue	O
;	O
case	O
'\n'	O
:	O
case	O
KDELIM	char
:	O
case	O
VDELIM	char
:	O
break	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
(	O
xc	int
==	O
KDELIM	char
||	O
xc	int
==	O
VDELIM	char
)	O
&&	O
(	O
uc	int
==	O
KDELIM	char
||	O
uc	int
==	O
VDELIM	char
)	O
&&	O
(	O
*	O
tp	pointer
=	O
xc	int
,	O
recognize_keyword	function
(	O
xkeyword	array
,	O
&	O
match1	struct
)	O
)	O
)	O
{	O
result	pointer
=	O
-	O
1	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
xc	int
!=	O
uc	int
)	O
{	O
xc	int
=	O
discardkeyval	function
(	O
xc	int
,	O
xfp	pointer
)	O
;	O
uc	int
=	O
discardkeyval	function
(	O
uc	int
,	O
ufp	pointer
)	O
;	O
if	O
(	O
(	O
xeof	bool
=	O
xc	int
==	O
EOF	O
)	O
|	O
(	O
ueof	bool
=	O
uc	int
==	O
EOF	O
)	O
)	O
goto	O
eof	O
;	O
eqkeyvals	bool
=	O
false	int
;	O
break	O
;	O
}	O
switch	O
(	O
xc	int
)	O
{	O
default	O
:	O
GETCHAR_OR	O
(	O
xc	int
,	O
xfp	pointer
,	O
xeof	bool
=	O
true	int
)	O
;	O
GETCHAR_OR	O
(	O
uc	int
,	O
ufp	pointer
,	O
ueof	bool
=	O
true	int
)	O
;	O
if	O
(	O
xeof	bool
|	O
ueof	bool
)	O
goto	O
eof	O
;	O
continue	O
;	O
case	O
'\n'	O
:	O
case	O
KDELIM	char
:	O
eqkeyvals	bool
=	O
true	int
;	O
break	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
xc	int
!=	O
uc	int
)	O
goto	O
return1	O
;	O
if	O
(	O
xc	int
==	O
KDELIM	char
)	O
{	O
GETCHAR_OR	O
(	O
xc	int
,	O
xfp	pointer
,	O
xeof	bool
=	O
true	int
)	O
;	O
GETCHAR_OR	O
(	O
uc	int
,	O
ufp	pointer
,	O
ueof	bool
=	O
true	int
)	O
;	O
if	O
(	O
xeof	bool
|	O
ueof	bool
)	O
goto	O
eof	O
;	O
if	O
(	O
match1	struct
.	O
i	int
==	O
Log	int
)	O
{	O
int	O
lncnt	int
;	O
size_t	long
ls	long
,	O
ccnt	long
;	O
sp	pointer
=	O
delta	struct
->	O
pretty_log	struct
.	O
string	pointer
;	O
ls	long
=	O
delta	struct
->	O
pretty_log	struct
.	O
size	long
;	O
if	O
(	O
!	O
looking_at	function
(	O
&	O
TINY	O
(	O
ciklog	O
)	O
,	O
delta	struct
->	O
pretty_log	struct
.	O
string	pointer
)	O
)	O
{	O
int	O
c1	int
=	O
1	int
;	O
for	O
(	O
ccnt	long
=	O
REPO	O
(	O
log_lead	struct
)	O
.	O
size	long
;	O
ccnt	long
--	O
;	O
)	O
c1	int
+=	O
REPO	O
(	O
log_lead	struct
)	O
.	O
string	pointer
[	O
ccnt	long
]	O
==	O
'\n'	O
;	O
lncnt	int
=	O
2	int
*	O
c1	int
+	O
1	int
;	O
while	O
(	O
ls	long
--	O
)	O
if	O
(	O
*	O
sp	pointer
++	O
==	O
'\n'	O
)	O
lncnt	int
+=	O
c1	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
xc	int
==	O
'\n'	O
)	O
if	O
(	O
--	O
lncnt	int
==	O
0	int
)	O
break	O
;	O
GETCHAR_OR	O
(	O
xc	int
,	O
xfp	pointer
,	O
goto	O
returnresult	O
)	O
;	O
}	O
ccnt	long
=	O
BE	O
(	O
version	int
)	O
<	O
VERSION	O
(	O
5	int
)	O
?	O
REPO	O
(	O
log_lead	struct
)	O
.	O
size	long
:	O
leaderlen	long
;	O
do	O
{	O
GETCHAR_OR	O
(	O
xc	int
,	O
xfp	pointer
,	O
goto	O
returnresult	O
)	O
;	O
}	O
while	O
(	O
ccnt	long
--	O
&&	O
(	O
xc	int
!=	O
'\n'	O
||	O
--	O
c1	int
)	O
)	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
!	O
eqkeyvals	bool
)	O
goto	O
return1	O
;	O
}	O
}	O
}	O
if	O
(	O
xc	int
!=	O
uc	int
)	O
goto	O
return1	O
;	O
if	O
(	O
xc	int
==	O
'\n'	O
)	O
leaderlen	long
=	O
0	int
;	O
else	O
leaderlen	long
++	O
;	O
}	O
}	O
eof	O
:	O
if	O
(	O
xeof	bool
==	O
ueof	bool
)	O
goto	O
returnresult	O
;	O
return1	O
:	O
result	pointer
=	O
1	int
;	O
returnresult	O
:	O
fro_close	function
(	O
ufp	pointer
)	O
;	O
return	O
result	pointer
;	O
}	O
