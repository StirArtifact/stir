static	O
struct	O
event	struct
*	O
evs	pointer
;	O
static	O
struct	O
event	struct
*	O
tevs	pointer
;	O
static	O
struct	O
event	struct
*	O
nextev	pointer
;	O
static	O
int	O
calctimeout	int
;	O
static	O
struct	O
event	struct
*	O
calctimo	function
__P	O
(	O
(	O
void	O
)	O
)	O
;	O
void	O
evenq	function
(	O
ev	pointer
)	O
struct	O
event	struct
*	O
ev	pointer
;	O
{	O
struct	O
event	struct
*	O
evp	pointer
,	O
*	O
*	O
evpp	pointer
;	O
debug3	O
(	O
"New event fd %d type %d queued %d\n"	pointer
,	O
ev	pointer
->	O
fd	int
,	O
ev	pointer
->	O
type	int
,	O
ev	pointer
->	O
queued	int
)	O
;	O
if	O
(	O
ev	pointer
->	O
queued	int
)	O
return	O
;	O
evpp	pointer
=	O
&	O
evs	pointer
;	O
if	O
(	O
ev	pointer
->	O
type	int
==	O
EV_TIMEOUT	int
)	O
{	O
calctimeout	int
=	O
1	int
;	O
evpp	pointer
=	O
&	O
tevs	pointer
;	O
}	O
for	O
(	O
;	O
(	O
evp	pointer
=	O
*	O
evpp	pointer
)	O
;	O
evpp	pointer
=	O
&	O
evp	pointer
->	O
next	pointer
)	O
if	O
(	O
ev	pointer
->	O
pri	int
>	O
evp	pointer
->	O
pri	int
)	O
break	O
;	O
ev	pointer
->	O
next	pointer
=	O
evp	pointer
;	O
*	O
evpp	pointer
=	O
ev	pointer
;	O
ev	pointer
->	O
queued	int
=	O
1	int
;	O
}	O
void	O
evdeq	function
(	O
ev	pointer
)	O
struct	O
event	struct
*	O
ev	pointer
;	O
{	O
struct	O
event	struct
*	O
evp	pointer
,	O
*	O
*	O
evpp	pointer
;	O
debug3	O
(	O
"Deq event fd %d type %d queued %d\n"	pointer
,	O
ev	pointer
->	O
fd	int
,	O
ev	pointer
->	O
type	int
,	O
ev	pointer
->	O
queued	int
)	O
;	O
if	O
(	O
!	O
ev	pointer
->	O
queued	int
)	O
return	O
;	O
evpp	pointer
=	O
&	O
evs	pointer
;	O
if	O
(	O
ev	pointer
->	O
type	int
==	O
EV_TIMEOUT	int
)	O
{	O
calctimeout	int
=	O
1	int
;	O
evpp	pointer
=	O
&	O
tevs	pointer
;	O
}	O
for	O
(	O
;	O
(	O
evp	pointer
=	O
*	O
evpp	pointer
)	O
;	O
evpp	pointer
=	O
&	O
evp	pointer
->	O
next	pointer
)	O
if	O
(	O
evp	pointer
==	O
ev	pointer
)	O
break	O
;	O
ASSERT	O
(	O
evp	pointer
)	O
;	O
*	O
evpp	pointer
=	O
ev	pointer
->	O
next	pointer
;	O
ev	pointer
->	O
queued	int
=	O
0	int
;	O
if	O
(	O
ev	pointer
==	O
nextev	pointer
)	O
nextev	pointer
=	O
nextev	pointer
->	O
next	pointer
;	O
}	O
static	O
struct	O
event	struct
*	O
calctimo	function
(	O
)	O
{	O
struct	O
event	struct
*	O
ev	pointer
,	O
*	O
min	pointer
;	O
long	O
mins	long
;	O
if	O
(	O
(	O
min	pointer
=	O
tevs	pointer
)	O
==	O
0	int
)	O
return	O
0	int
;	O
mins	long
=	O
min	pointer
->	O
timeout	struct
.	O
tv_sec	long
;	O
for	O
(	O
ev	pointer
=	O
tevs	pointer
->	O
next	pointer
;	O
ev	pointer
;	O
ev	pointer
=	O
ev	pointer
->	O
next	pointer
)	O
{	O
ASSERT	O
(	O
ev	pointer
->	O
type	int
==	O
EV_TIMEOUT	int
)	O
;	O
if	O
(	O
mins	long
<	O
ev	pointer
->	O
timeout	struct
.	O
tv_sec	long
)	O
continue	O
;	O
if	O
(	O
mins	long
>	O
ev	pointer
->	O
timeout	struct
.	O
tv_sec	long
||	O
min	pointer
->	O
timeout	struct
.	O
tv_usec	long
>	O
ev	pointer
->	O
timeout	struct
.	O
tv_usec	long
)	O
{	O
min	pointer
=	O
ev	pointer
;	O
mins	long
=	O
ev	pointer
->	O
timeout	struct
.	O
tv_sec	long
;	O
}	O
}	O
return	O
min	pointer
;	O
}	O
void	O
sched	function
(	O
)	O
{	O
struct	O
event	struct
*	O
ev	pointer
;	O
fd_set	struct
r	struct
,	O
w	struct
,	O
*	O
set	pointer
;	O
struct	O
event	struct
*	O
timeoutev	pointer
=	O
0	int
;	O
struct	O
timeval	struct
timeout	struct
;	O
int	O
nsel	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
calctimeout	int
)	O
timeoutev	pointer
=	O
calctimo	function
(	O
)	O
;	O
if	O
(	O
timeoutev	pointer
)	O
{	O
gettimeofday	function
(	O
&	O
timeout	struct
,	O
NULL	O
)	O
;	O
timeout	struct
.	O
tv_sec	long
=	O
timeoutev	pointer
->	O
timeout	struct
.	O
tv_sec	long
-	O
timeout	struct
.	O
tv_sec	long
;	O
timeout	struct
.	O
tv_usec	long
=	O
timeoutev	pointer
->	O
timeout	struct
.	O
tv_usec	long
-	O
timeout	struct
.	O
tv_usec	long
;	O
if	O
(	O
timeout	struct
.	O
tv_usec	long
<	O
0	int
)	O
{	O
timeout	struct
.	O
tv_usec	long
+=	O
1000000	int
;	O
timeout	struct
.	O
tv_sec	long
--	O
;	O
}	O
if	O
(	O
timeout	struct
.	O
tv_sec	long
<	O
0	int
)	O
{	O
timeout	struct
.	O
tv_usec	long
=	O
0	int
;	O
timeout	struct
.	O
tv_sec	long
=	O
0	int
;	O
}	O
}	O
FD_ZERO	O
(	O
&	O
r	struct
)	O
;	O
FD_ZERO	O
(	O
&	O
w	struct
)	O
;	O
for	O
(	O
ev	pointer
=	O
evs	pointer
;	O
ev	pointer
;	O
ev	pointer
=	O
ev	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
ev	pointer
->	O
condpos	pointer
&&	O
*	O
ev	pointer
->	O
condpos	pointer
<=	O
(	O
ev	pointer
->	O
condneg	pointer
?	O
*	O
ev	pointer
->	O
condneg	pointer
:	O
0	int
)	O
)	O
{	O
debug2	O
(	O
" - cond ev fd %d type %d failed\n"	pointer
,	O
ev	pointer
->	O
fd	int
,	O
ev	pointer
->	O
type	int
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
ev	pointer
->	O
type	int
==	O
EV_READ	int
)	O
FD_SET	O
(	O
ev	pointer
->	O
fd	int
,	O
&	O
r	struct
)	O
;	O
else	O
if	O
(	O
ev	pointer
->	O
type	int
==	O
EV_WRITE	int
)	O
FD_SET	O
(	O
ev	pointer
->	O
fd	int
,	O
&	O
w	struct
)	O
;	O
}	O
nsel	int
=	O
select	function
(	O
FD_SETSIZE	O
,	O
&	O
r	struct
,	O
&	O
w	struct
,	O
(	O
fd_set	struct
*	O
)	O
0	int
,	O
timeoutev	pointer
?	O
&	O
timeout	struct
:	O
(	O
struct	O
timeval	struct
*	O
)	O
0	int
)	O
;	O
if	O
(	O
nsel	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
!=	O
EINTR	int
)	O
{	O
Panic	function
(	O
errno	O
,	O
"select"	pointer
)	O
;	O
}	O
nsel	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
nsel	int
==	O
0	int
)	O
{	O
debug	O
(	O
"TIMEOUT!\n"	pointer
)	O
;	O
ASSERT	O
(	O
timeoutev	pointer
)	O
;	O
evdeq	function
(	O
timeoutev	pointer
)	O
;	O
timeoutev	pointer
->	O
handler	pointer
(	O
timeoutev	pointer
,	O
timeoutev	pointer
->	O
data	pointer
)	O
;	O
}	O
for	O
(	O
ev	pointer
=	O
evs	pointer
;	O
ev	pointer
;	O
ev	pointer
=	O
nextev	pointer
)	O
{	O
nextev	pointer
=	O
ev	pointer
->	O
next	pointer
;	O
if	O
(	O
ev	pointer
->	O
type	int
!=	O
EV_ALWAYS	int
)	O
{	O
set	pointer
=	O
ev	pointer
->	O
type	int
==	O
EV_READ	int
?	O
&	O
r	struct
:	O
&	O
w	struct
;	O
if	O
(	O
nsel	int
==	O
0	int
||	O
!	O
FD_ISSET	O
(	O
ev	pointer
->	O
fd	int
,	O
set	pointer
)	O
)	O
continue	O
;	O
nsel	int
--	O
;	O
}	O
if	O
(	O
ev	pointer
->	O
condpos	pointer
&&	O
*	O
ev	pointer
->	O
condpos	pointer
<=	O
(	O
ev	pointer
->	O
condneg	pointer
?	O
*	O
ev	pointer
->	O
condneg	pointer
:	O
0	int
)	O
)	O
continue	O
;	O
debug2	O
(	O
" + hit ev fd %d type %d!\n"	pointer
,	O
ev	pointer
->	O
fd	int
,	O
ev	pointer
->	O
type	int
)	O
;	O
ev	pointer
->	O
handler	pointer
(	O
ev	pointer
,	O
ev	pointer
->	O
data	pointer
)	O
;	O
}	O
}	O
}	O
void	O
SetTimeout	function
(	O
ev	pointer
,	O
timo	int
)	O
struct	O
event	struct
*	O
ev	pointer
;	O
int	O
timo	int
;	O
{	O
ASSERT	O
(	O
ev	pointer
->	O
type	int
==	O
EV_TIMEOUT	int
)	O
;	O
debug2	O
(	O
"event %x new timeout %d ms\n"	pointer
,	O
ev	pointer
,	O
timo	int
)	O
;	O
gettimeofday	function
(	O
&	O
ev	pointer
->	O
timeout	struct
,	O
NULL	O
)	O
;	O
ev	pointer
->	O
timeout	struct
.	O
tv_sec	long
+=	O
timo	int
/	O
1000	int
;	O
ev	pointer
->	O
timeout	struct
.	O
tv_usec	long
+=	O
(	O
timo	int
%	O
1000	int
)	O
*	O
1000	int
;	O
if	O
(	O
ev	pointer
->	O
timeout	struct
.	O
tv_usec	long
>	O
1000000	int
)	O
{	O
ev	pointer
->	O
timeout	struct
.	O
tv_usec	long
-=	O
1000000	int
;	O
ev	pointer
->	O
timeout	struct
.	O
tv_sec	long
++	O
;	O
}	O
if	O
(	O
ev	pointer
->	O
queued	int
)	O
calctimeout	int
=	O
1	int
;	O
}	O
