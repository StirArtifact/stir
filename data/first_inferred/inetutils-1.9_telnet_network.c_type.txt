Ring	struct
netoring	struct
,	O
netiring	struct
;	O
unsigned	O
char	O
netobuf	array
[	O
2	int
*	O
BUFSIZ	int
]	O
,	O
netibuf	array
[	O
BUFSIZ	int
]	O
;	O
void	O
init_network	function
(	O
void	O
)	O
{	O
if	O
(	O
ring_init	function
(	O
&	O
netoring	struct
,	O
netobuf	array
,	O
sizeof	O
netobuf	array
)	O
!=	O
1	int
)	O
{	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
ring_init	function
(	O
&	O
netiring	struct
,	O
netibuf	array
,	O
sizeof	O
netibuf	array
)	O
!=	O
1	int
)	O
{	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
NetTrace	pointer
=	O
stdout	pointer
;	O
}	O
int	O
stilloob	function
(	O
void	O
)	O
{	O
static	O
struct	O
timeval	struct
timeout	struct
=	O
{	O
0	int
}	O
;	O
fd_set	struct
excepts	struct
;	O
int	O
value	int
;	O
do	O
{	O
FD_ZERO	O
(	O
&	O
excepts	struct
)	O
;	O
FD_SET	O
(	O
net	int
,	O
&	O
excepts	struct
)	O
;	O
value	int
=	O
select	function
(	O
net	int
+	O
1	int
,	O
(	O
fd_set	struct
*	O
)	O
0	int
,	O
(	O
fd_set	struct
*	O
)	O
0	int
,	O
&	O
excepts	struct
,	O
&	O
timeout	struct
)	O
;	O
}	O
while	O
(	O
(	O
value	int
==	O
-	O
1	int
)	O
&&	O
(	O
errno	O
==	O
EINTR	int
)	O
)	O
;	O
if	O
(	O
value	int
<	O
0	int
)	O
{	O
perror	function
(	O
"select"	pointer
)	O
;	O
(	O
void	O
)	O
quit	function
(	O
)	O
;	O
}	O
if	O
(	O
FD_ISSET	O
(	O
net	int
,	O
&	O
excepts	struct
)	O
)	O
{	O
return	O
1	int
;	O
}	O
else	O
{	O
return	O
0	int
;	O
}	O
}	O
void	O
setneturg	function
(	O
void	O
)	O
{	O
ring_mark	function
(	O
&	O
netoring	struct
)	O
;	O
}	O
int	O
netflush	function
(	O
void	O
)	O
{	O
register	O
int	O
n	int
,	O
n1	int
;	O
if	O
(	O
(	O
n1	int
=	O
n	int
=	O
ring_full_consecutive	function
(	O
&	O
netoring	struct
)	O
)	O
>	O
0	int
)	O
{	O
if	O
(	O
!	O
ring_at_mark	function
(	O
&	O
netoring	struct
)	O
)	O
{	O
n	int
=	O
send	function
(	O
net	int
,	O
(	O
char	O
*	O
)	O
netoring	struct
.	O
consume	pointer
,	O
n	int
,	O
0	int
)	O
;	O
}	O
else	O
{	O
n	int
=	O
send	function
(	O
net	int
,	O
(	O
char	O
*	O
)	O
netoring	struct
.	O
consume	pointer
,	O
1	int
,	O
MSG_OOB	int
)	O
;	O
}	O
}	O
if	O
(	O
n	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
!=	O
ENOBUFS	int
&&	O
errno	O
!=	O
EWOULDBLOCK	O
)	O
{	O
setcommandmode	function
(	O
)	O
;	O
perror	function
(	O
hostname	pointer
)	O
;	O
(	O
void	O
)	O
NetClose	function
(	O
net	int
)	O
;	O
ring_clear_mark	function
(	O
&	O
netoring	struct
)	O
;	O
longjmp	function
(	O
peerdied	array
,	O
-	O
1	int
)	O
;	O
}	O
n	int
=	O
0	int
;	O
}	O
if	O
(	O
netdata	int
&&	O
n	int
)	O
{	O
Dump	function
(	O
'>'	O
,	O
netoring	struct
.	O
consume	pointer
,	O
n	int
)	O
;	O
}	O
if	O
(	O
n	int
)	O
{	O
ring_consumed	function
(	O
&	O
netoring	struct
,	O
n	int
)	O
;	O
if	O
(	O
(	O
n1	int
==	O
n	int
)	O
&&	O
ring_full_consecutive	function
(	O
&	O
netoring	struct
)	O
)	O
{	O
(	O
void	O
)	O
netflush	function
(	O
)	O
;	O
}	O
return	O
1	int
;	O
}	O
else	O
{	O
return	O
0	int
;	O
}	O
}	O
