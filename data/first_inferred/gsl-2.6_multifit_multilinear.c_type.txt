static	O
int	O
multifit_linear_svd	function
(	O
const	O
gsl_matrix	struct
*	O
X	pointer
,	O
const	O
int	O
balance	int
,	O
gsl_multifit_linear_workspace	struct
*	O
work	pointer
)	O
;	O
int	O
gsl_multifit_linear	function
(	O
const	O
gsl_matrix	struct
*	O
X	pointer
,	O
const	O
gsl_vector	struct
*	O
y	double
,	O
gsl_vector	struct
*	O
c	pointer
,	O
gsl_matrix	struct
*	O
cov	pointer
,	O
double	O
*	O
chisq	pointer
,	O
gsl_multifit_linear_workspace	struct
*	O
work	pointer
)	O
{	O
size_t	long
rank	pointer
;	O
int	O
status	int
=	O
gsl_multifit_linear_tsvd	function
(	O
X	pointer
,	O
y	double
,	O
GSL_DBL_EPSILON	int
,	O
c	pointer
,	O
cov	pointer
,	O
chisq	pointer
,	O
&	O
rank	pointer
,	O
work	pointer
)	O
;	O
return	O
status	int
;	O
}	O
int	O
gsl_multifit_linear_tsvd	function
(	O
const	O
gsl_matrix	struct
*	O
X	pointer
,	O
const	O
gsl_vector	struct
*	O
y	double
,	O
const	O
double	O
tol	double
,	O
gsl_vector	struct
*	O
c	pointer
,	O
gsl_matrix	struct
*	O
cov	pointer
,	O
double	O
*	O
chisq	pointer
,	O
size_t	long
*	O
rank	pointer
,	O
gsl_multifit_linear_workspace	struct
*	O
work	pointer
)	O
{	O
const	O
size_t	long
n	int
=	O
X	pointer
->	O
size1	long
;	O
const	O
size_t	long
p	int
=	O
X	pointer
->	O
size2	long
;	O
if	O
(	O
y	double
->	O
size	long
!=	O
n	int
)	O
{	O
GSL_ERROR	O
(	O
"number of observations in y does not match matrix"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
p	int
!=	O
c	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"number of parameters c does not match matrix"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
tol	double
<=	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"tolerance must be positive"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
double	O
rnorm	pointer
=	O
0.0	int
,	O
snorm	pointer
;	O
status	int
=	O
gsl_multifit_linear_bsvd	function
(	O
X	pointer
,	O
work	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
multifit_linear_solve	function
(	O
X	pointer
,	O
y	double
,	O
tol	double
,	O
-	O
1.0	int
,	O
rank	pointer
,	O
c	pointer
,	O
&	O
rnorm	pointer
,	O
&	O
snorm	pointer
,	O
work	pointer
)	O
;	O
*	O
chisq	pointer
=	O
rnorm	pointer
*	O
rnorm	pointer
;	O
{	O
double	O
r2	double
=	O
rnorm	pointer
*	O
rnorm	pointer
;	O
double	O
s2	double
=	O
r2	double
/	O
(	O
double	O
)	O
(	O
n	int
-	O
*	O
rank	pointer
)	O
;	O
size_t	long
i	long
,	O
j	long
;	O
gsl_matrix_view	struct
QSI	pointer
=	O
gsl_matrix_submatrix	function
(	O
work	pointer
->	O
QSI	pointer
,	O
0	int
,	O
0	int
,	O
p	int
,	O
p	int
)	O
;	O
gsl_vector_view	struct
D	pointer
=	O
gsl_vector_subvector	function
(	O
work	pointer
->	O
D	pointer
,	O
0	int
,	O
p	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
p	int
;	O
i	long
++	O
)	O
{	O
gsl_vector_view	struct
row_i	struct
=	O
gsl_matrix_row	function
(	O
&	O
QSI	pointer
.	O
matrix	struct
,	O
i	long
)	O
;	O
double	O
d_i	double
=	O
gsl_vector_get	function
(	O
&	O
D	pointer
.	O
vector	struct
,	O
i	long
)	O
;	O
for	O
(	O
j	long
=	O
i	long
;	O
j	long
<	O
p	int
;	O
j	long
++	O
)	O
{	O
gsl_vector_view	struct
row_j	struct
=	O
gsl_matrix_row	function
(	O
&	O
QSI	pointer
.	O
matrix	struct
,	O
j	long
)	O
;	O
double	O
d_j	double
=	O
gsl_vector_get	function
(	O
&	O
D	pointer
.	O
vector	struct
,	O
j	long
)	O
;	O
double	O
s	pointer
;	O
gsl_blas_ddot	function
(	O
&	O
row_i	struct
.	O
vector	struct
,	O
&	O
row_j	struct
.	O
vector	struct
,	O
&	O
s	pointer
)	O
;	O
gsl_matrix_set	function
(	O
cov	pointer
,	O
i	long
,	O
j	long
,	O
s	pointer
*	O
s2	double
/	O
(	O
d_i	double
*	O
d_j	double
)	O
)	O
;	O
gsl_matrix_set	function
(	O
cov	pointer
,	O
j	long
,	O
i	long
,	O
s	pointer
*	O
s2	double
/	O
(	O
d_i	double
*	O
d_j	double
)	O
)	O
;	O
}	O
}	O
}	O
return	O
status	int
;	O
}	O
}	O
int	O
gsl_multifit_linear_svd	function
(	O
const	O
gsl_matrix	struct
*	O
X	pointer
,	O
gsl_multifit_linear_workspace	struct
*	O
work	pointer
)	O
{	O
int	O
status	int
=	O
multifit_linear_svd	function
(	O
X	pointer
,	O
0	int
,	O
work	pointer
)	O
;	O
return	O
status	int
;	O
}	O
int	O
gsl_multifit_linear_bsvd	function
(	O
const	O
gsl_matrix	struct
*	O
X	pointer
,	O
gsl_multifit_linear_workspace	struct
*	O
work	pointer
)	O
{	O
int	O
status	int
=	O
multifit_linear_svd	function
(	O
X	pointer
,	O
1	int
,	O
work	pointer
)	O
;	O
return	O
status	int
;	O
}	O
size_t	long
gsl_multifit_linear_rank	function
(	O
const	O
double	O
tol	double
,	O
const	O
gsl_multifit_linear_workspace	struct
*	O
work	pointer
)	O
{	O
double	O
s0	double
=	O
gsl_vector_get	function
(	O
work	pointer
->	O
S	pointer
,	O
0	int
)	O
;	O
size_t	long
rank	pointer
=	O
0	int
;	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
work	pointer
->	O
p	int
;	O
j	long
++	O
)	O
{	O
double	O
sj	double
=	O
gsl_vector_get	function
(	O
work	pointer
->	O
S	pointer
,	O
j	long
)	O
;	O
if	O
(	O
sj	double
>	O
tol	double
*	O
s0	double
)	O
++	O
rank	pointer
;	O
}	O
return	O
rank	pointer
;	O
}	O
int	O
gsl_multifit_linear_est	function
(	O
const	O
gsl_vector	struct
*	O
x	double
,	O
const	O
gsl_vector	struct
*	O
c	pointer
,	O
const	O
gsl_matrix	struct
*	O
cov	pointer
,	O
double	O
*	O
y	double
,	O
double	O
*	O
y_err	pointer
)	O
{	O
if	O
(	O
x	double
->	O
size	long
!=	O
c	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"number of parameters c does not match number of observations x"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
cov	pointer
->	O
size1	long
!=	O
cov	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"covariance matrix is not square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
c	pointer
->	O
size	long
!=	O
cov	pointer
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"number of parameters c does not match size of covariance matrix cov"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
,	O
j	long
;	O
double	O
var	double
=	O
0	int
;	O
gsl_blas_ddot	function
(	O
x	double
,	O
c	pointer
,	O
y	double
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
x	double
->	O
size	long
;	O
i	long
++	O
)	O
{	O
const	O
double	O
xi	double
=	O
gsl_vector_get	function
(	O
x	double
,	O
i	long
)	O
;	O
var	double
+=	O
xi	double
*	O
xi	double
*	O
gsl_matrix_get	function
(	O
cov	pointer
,	O
i	long
,	O
i	long
)	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
i	long
;	O
j	long
++	O
)	O
{	O
const	O
double	O
xj	double
=	O
gsl_vector_get	function
(	O
x	double
,	O
j	long
)	O
;	O
var	double
+=	O
2	int
*	O
xi	double
*	O
xj	double
*	O
gsl_matrix_get	function
(	O
cov	pointer
,	O
i	long
,	O
j	long
)	O
;	O
}	O
}	O
*	O
y_err	pointer
=	O
sqrt	function
(	O
var	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
double	O
gsl_multifit_linear_rcond	function
(	O
const	O
gsl_multifit_linear_workspace	struct
*	O
w	pointer
)	O
{	O
return	O
w	pointer
->	O
rcond	double
;	O
}	O
int	O
gsl_multifit_linear_residuals	function
(	O
const	O
gsl_matrix	struct
*	O
X	pointer
,	O
const	O
gsl_vector	struct
*	O
y	double
,	O
const	O
gsl_vector	struct
*	O
c	pointer
,	O
gsl_vector	struct
*	O
r	pointer
)	O
{	O
if	O
(	O
X	pointer
->	O
size1	long
!=	O
y	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"number of observations in y does not match rows of matrix X"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
X	pointer
->	O
size2	long
!=	O
c	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"number of parameters c does not match columns of matrix X"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
y	double
->	O
size	long
!=	O
r	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"number of observations in y does not match number of residuals"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_vector_memcpy	function
(	O
r	pointer
,	O
y	double
)	O
;	O
gsl_blas_dgemv	function
(	O
CblasNoTrans	int
,	O
-	O
1.0	int
,	O
X	pointer
,	O
c	pointer
,	O
1.0	int
,	O
r	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
multifit_linear_svd	function
(	O
const	O
gsl_matrix	struct
*	O
X	pointer
,	O
const	O
int	O
balance	int
,	O
gsl_multifit_linear_workspace	struct
*	O
work	pointer
)	O
{	O
const	O
size_t	long
n	int
=	O
X	pointer
->	O
size1	long
;	O
const	O
size_t	long
p	int
=	O
X	pointer
->	O
size2	long
;	O
if	O
(	O
n	int
>	O
work	pointer
->	O
nmax	long
||	O
p	int
>	O
work	pointer
->	O
pmax	long
)	O
{	O
GSL_ERROR	O
(	O
"observation matrix larger than workspace"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_matrix_view	struct
A	pointer
=	O
gsl_matrix_submatrix	function
(	O
work	pointer
->	O
A	pointer
,	O
0	int
,	O
0	int
,	O
n	int
,	O
p	int
)	O
;	O
gsl_matrix_view	struct
Q	pointer
=	O
gsl_matrix_submatrix	function
(	O
work	pointer
->	O
Q	pointer
,	O
0	int
,	O
0	int
,	O
p	int
,	O
p	int
)	O
;	O
gsl_matrix_view	struct
QSI	pointer
=	O
gsl_matrix_submatrix	function
(	O
work	pointer
->	O
QSI	pointer
,	O
0	int
,	O
0	int
,	O
p	int
,	O
p	int
)	O
;	O
gsl_vector_view	struct
S	pointer
=	O
gsl_vector_subvector	function
(	O
work	pointer
->	O
S	pointer
,	O
0	int
,	O
p	int
)	O
;	O
gsl_vector_view	struct
xt	pointer
=	O
gsl_vector_subvector	function
(	O
work	pointer
->	O
xt	pointer
,	O
0	int
,	O
p	int
)	O
;	O
gsl_vector_view	struct
D	pointer
=	O
gsl_vector_subvector	function
(	O
work	pointer
->	O
D	pointer
,	O
0	int
,	O
p	int
)	O
;	O
gsl_matrix_memcpy	function
(	O
&	O
A	pointer
.	O
matrix	struct
,	O
X	pointer
)	O
;	O
if	O
(	O
balance	int
)	O
{	O
gsl_linalg_balance_columns	function
(	O
&	O
A	pointer
.	O
matrix	struct
,	O
&	O
D	pointer
.	O
vector	struct
)	O
;	O
}	O
else	O
{	O
gsl_vector_set_all	function
(	O
&	O
D	pointer
.	O
vector	struct
,	O
1.0	int
)	O
;	O
}	O
gsl_linalg_SV_decomp_mod	function
(	O
&	O
A	pointer
.	O
matrix	struct
,	O
&	O
QSI	pointer
.	O
matrix	struct
,	O
&	O
Q	pointer
.	O
matrix	struct
,	O
&	O
S	pointer
.	O
vector	struct
,	O
&	O
xt	pointer
.	O
vector	struct
)	O
;	O
{	O
double	O
smin	double
,	O
smax	double
;	O
gsl_vector_minmax	function
(	O
&	O
S	pointer
.	O
vector	struct
,	O
&	O
smin	double
,	O
&	O
smax	double
)	O
;	O
work	pointer
->	O
rcond	double
=	O
smin	double
/	O
smax	double
;	O
}	O
work	pointer
->	O
n	int
=	O
n	int
;	O
work	pointer
->	O
p	int
=	O
p	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
