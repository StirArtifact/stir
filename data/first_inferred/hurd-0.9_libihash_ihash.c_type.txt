static	O
inline	O
hurd_ihash_key_t	long
hash	function
(	O
hurd_ihash_t	pointer
ht	pointer
,	O
hurd_ihash_key_t	long
k	long
)	O
{	O
return	O
ht	pointer
->	O
fct_hash	pointer
?	O
ht	pointer
->	O
fct_hash	pointer
(	O
(	O
const	O
void	O
*	O
)	O
k	long
)	O
:	O
k	long
;	O
}	O
static	O
inline	O
int	O
compare	function
(	O
hurd_ihash_t	pointer
ht	pointer
,	O
hurd_ihash_key_t	long
a	long
,	O
hurd_ihash_key_t	long
b	long
)	O
{	O
return	O
ht	pointer
->	O
fct_cmp	pointer
?	O
(	O
a	long
&&	O
ht	pointer
->	O
fct_cmp	pointer
(	O
(	O
const	O
void	O
*	O
)	O
a	long
,	O
(	O
const	O
void	O
*	O
)	O
b	long
)	O
)	O
:	O
a	long
==	O
b	long
;	O
}	O
static	O
inline	O
int	O
index_empty	function
(	O
hurd_ihash_t	pointer
ht	pointer
,	O
unsigned	O
int	O
idx	int
)	O
{	O
return	O
!	O
hurd_ihash_value_valid	function
(	O
ht	pointer
->	O
items	pointer
[	O
idx	int
]	O
.	O
value	pointer
)	O
;	O
}	O
static	O
inline	O
int	O
index_valid	function
(	O
hurd_ihash_t	pointer
ht	pointer
,	O
unsigned	O
int	O
idx	int
,	O
hurd_ihash_key_t	long
key	long
)	O
{	O
return	O
!	O
index_empty	function
(	O
ht	pointer
,	O
idx	int
)	O
&&	O
compare	function
(	O
ht	pointer
,	O
ht	pointer
->	O
items	pointer
[	O
idx	int
]	O
.	O
key	long
,	O
key	long
)	O
;	O
}	O
static	O
inline	O
int	O
find_index	function
(	O
hurd_ihash_t	pointer
ht	pointer
,	O
hurd_ihash_key_t	long
key	long
)	O
{	O
unsigned	O
int	O
idx	int
;	O
unsigned	O
int	O
up_idx	int
;	O
unsigned	O
int	O
first_deleted	int
=	O
0	int
;	O
int	O
first_deleted_set	int
=	O
0	int
;	O
unsigned	O
int	O
mask	int
=	O
ht	pointer
->	O
size	long
-	O
1	int
;	O
idx	int
=	O
hash	function
(	O
ht	pointer
,	O
key	long
)	O
&	O
mask	int
;	O
up_idx	int
=	O
idx	int
;	O
do	O
{	O
if	O
(	O
ht	pointer
->	O
items	pointer
[	O
up_idx	int
]	O
.	O
value	pointer
==	O
_HURD_IHASH_EMPTY	O
)	O
return	O
first_deleted_set	int
?	O
first_deleted	int
:	O
up_idx	int
;	O
if	O
(	O
compare	function
(	O
ht	pointer
,	O
ht	pointer
->	O
items	pointer
[	O
up_idx	int
]	O
.	O
key	long
,	O
key	long
)	O
)	O
return	O
up_idx	int
;	O
if	O
(	O
!	O
first_deleted_set	int
&&	O
ht	pointer
->	O
items	pointer
[	O
up_idx	int
]	O
.	O
value	pointer
==	O
_HURD_IHASH_DELETED	O
)	O
first_deleted	int
=	O
up_idx	int
,	O
first_deleted_set	int
=	O
1	int
;	O
up_idx	int
=	O
(	O
up_idx	int
+	O
1	int
)	O
&	O
mask	int
;	O
}	O
while	O
(	O
up_idx	int
!=	O
idx	int
)	O
;	O
return	O
first_deleted	int
;	O
}	O
static	O
inline	O
void	O
locp_remove	function
(	O
hurd_ihash_t	pointer
ht	pointer
,	O
hurd_ihash_locp_t	pointer
locp	pointer
)	O
{	O
struct	O
_hurd_ihash_item	struct
*	O
item	pointer
=	O
(	O
struct	O
_hurd_ihash_item	struct
*	O
)	O
locp	pointer
;	O
if	O
(	O
ht	pointer
->	O
cleanup	pointer
)	O
(	O
*	O
ht	pointer
->	O
cleanup	pointer
)	O
(	O
item	pointer
->	O
value	pointer
,	O
ht	pointer
->	O
cleanup_data	pointer
)	O
;	O
item	pointer
->	O
value	pointer
=	O
_HURD_IHASH_DELETED	O
;	O
item	pointer
->	O
key	long
=	O
0	int
;	O
ht	pointer
->	O
nr_items	long
--	O
;	O
}	O
void	O
hurd_ihash_init	function
(	O
hurd_ihash_t	pointer
ht	pointer
,	O
intptr_t	long
locp_offs	long
)	O
{	O
ht	pointer
->	O
nr_items	long
=	O
0	int
;	O
ht	pointer
->	O
size	long
=	O
0	int
;	O
ht	pointer
->	O
locp_offset	long
=	O
locp_offs	long
;	O
ht	pointer
->	O
max_load	int
=	O
HURD_IHASH_MAX_LOAD_DEFAULT	int
;	O
ht	pointer
->	O
cleanup	pointer
=	O
0	int
;	O
ht	pointer
->	O
fct_hash	pointer
=	O
NULL	O
;	O
ht	pointer
->	O
fct_cmp	pointer
=	O
NULL	O
;	O
ht	pointer
->	O
nr_free	long
=	O
0	int
;	O
}	O
void	O
hurd_ihash_destroy	function
(	O
hurd_ihash_t	pointer
ht	pointer
)	O
{	O
if	O
(	O
ht	pointer
->	O
cleanup	pointer
)	O
{	O
hurd_ihash_cleanup_t	pointer
cleanup	pointer
=	O
ht	pointer
->	O
cleanup	pointer
;	O
void	O
*	O
cleanup_data	pointer
=	O
ht	pointer
->	O
cleanup_data	pointer
;	O
HURD_IHASH_ITERATE	O
(	O
ht	pointer
,	O
value	pointer
)	O
(	O
*	O
cleanup	pointer
)	O
(	O
value	pointer
,	O
cleanup_data	pointer
)	O
;	O
}	O
if	O
(	O
ht	pointer
->	O
size	long
>	O
0	int
)	O
free	function
(	O
ht	pointer
->	O
items	pointer
)	O
;	O
}	O
error_t	int
hurd_ihash_create	function
(	O
hurd_ihash_t	pointer
*	O
ht	pointer
,	O
intptr_t	long
locp_offs	long
)	O
{	O
*	O
ht	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
hurd_ihash	struct
)	O
)	O
;	O
if	O
(	O
*	O
ht	pointer
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
hurd_ihash_init	function
(	O
*	O
ht	pointer
,	O
locp_offs	long
)	O
;	O
return	O
0	int
;	O
}	O
void	O
hurd_ihash_free	function
(	O
hurd_ihash_t	pointer
ht	pointer
)	O
{	O
hurd_ihash_destroy	function
(	O
ht	pointer
)	O
;	O
free	function
(	O
ht	pointer
)	O
;	O
}	O
void	O
hurd_ihash_set_cleanup	function
(	O
hurd_ihash_t	pointer
ht	pointer
,	O
hurd_ihash_cleanup_t	pointer
cleanup	pointer
,	O
void	O
*	O
cleanup_data	pointer
)	O
{	O
ht	pointer
->	O
cleanup	pointer
=	O
cleanup	pointer
;	O
ht	pointer
->	O
cleanup_data	pointer
=	O
cleanup_data	pointer
;	O
}	O
void	O
hurd_ihash_set_gki	function
(	O
hurd_ihash_t	pointer
ht	pointer
,	O
hurd_ihash_fct_hash_t	pointer
fct_hash	pointer
,	O
hurd_ihash_fct_cmp_t	pointer
fct_cmp	pointer
)	O
{	O
assert	O
(	O
ht	pointer
->	O
size	long
==	O
0	int
||	O
!	O
"called after insertion"	pointer
)	O
;	O
assert	O
(	O
fct_hash	pointer
)	O
;	O
assert	O
(	O
fct_cmp	pointer
)	O
;	O
ht	pointer
->	O
fct_hash	pointer
=	O
fct_hash	pointer
;	O
ht	pointer
->	O
fct_cmp	pointer
=	O
fct_cmp	pointer
;	O
}	O
void	O
hurd_ihash_set_max_load	function
(	O
hurd_ihash_t	pointer
ht	pointer
,	O
unsigned	O
int	O
max_load	int
)	O
{	O
ht	pointer
->	O
max_load	int
=	O
max_load	int
;	O
}	O
static	O
inline	O
int	O
add_one	function
(	O
hurd_ihash_t	pointer
ht	pointer
,	O
hurd_ihash_key_t	long
key	long
,	O
hurd_ihash_value_t	pointer
value	pointer
)	O
{	O
unsigned	O
int	O
idx	int
;	O
idx	int
=	O
find_index	function
(	O
ht	pointer
,	O
key	long
)	O
;	O
if	O
(	O
index_valid	function
(	O
ht	pointer
,	O
idx	int
,	O
key	long
)	O
)	O
locp_remove	function
(	O
ht	pointer
,	O
&	O
ht	pointer
->	O
items	pointer
[	O
idx	int
]	O
.	O
value	pointer
)	O
;	O
if	O
(	O
index_empty	function
(	O
ht	pointer
,	O
idx	int
)	O
)	O
{	O
ht	pointer
->	O
nr_items	long
++	O
;	O
if	O
(	O
ht	pointer
->	O
items	pointer
[	O
idx	int
]	O
.	O
value	pointer
==	O
_HURD_IHASH_EMPTY	O
)	O
{	O
assert	O
(	O
ht	pointer
->	O
nr_free	long
>	O
0	int
)	O
;	O
ht	pointer
->	O
nr_free	long
--	O
;	O
}	O
ht	pointer
->	O
items	pointer
[	O
idx	int
]	O
.	O
value	pointer
=	O
value	pointer
;	O
ht	pointer
->	O
items	pointer
[	O
idx	int
]	O
.	O
key	long
=	O
key	long
;	O
if	O
(	O
ht	pointer
->	O
locp_offset	long
!=	O
HURD_IHASH_NO_LOCP	O
)	O
*	O
(	O
(	O
hurd_ihash_locp_t	pointer
*	O
)	O
(	O
(	O
(	O
char	O
*	O
)	O
value	pointer
)	O
+	O
ht	pointer
->	O
locp_offset	long
)	O
)	O
=	O
&	O
ht	pointer
->	O
items	pointer
[	O
idx	int
]	O
.	O
value	pointer
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
error_t	int
hurd_ihash_locp_add	function
(	O
hurd_ihash_t	pointer
ht	pointer
,	O
hurd_ihash_locp_t	pointer
locp	pointer
,	O
hurd_ihash_key_t	long
key	long
,	O
hurd_ihash_value_t	pointer
value	pointer
)	O
{	O
struct	O
_hurd_ihash_item	struct
*	O
item	pointer
=	O
(	O
struct	O
_hurd_ihash_item	struct
*	O
)	O
locp	pointer
;	O
if	O
(	O
ht	pointer
->	O
size	long
==	O
0	int
||	O
item	pointer
==	O
NULL	O
||	O
(	O
hurd_ihash_value_valid	function
(	O
item	pointer
->	O
value	pointer
)	O
&&	O
!	O
compare	function
(	O
ht	pointer
,	O
item	pointer
->	O
key	long
,	O
key	long
)	O
)	O
||	O
hurd_ihash_get_effective_load	function
(	O
ht	pointer
)	O
>	O
ht	pointer
->	O
max_load	int
)	O
return	O
hurd_ihash_add	function
(	O
ht	pointer
,	O
key	long
,	O
value	pointer
)	O
;	O
if	O
(	O
!	O
hurd_ihash_value_valid	function
(	O
item	pointer
->	O
value	pointer
)	O
)	O
{	O
item	pointer
->	O
key	long
=	O
key	long
;	O
ht	pointer
->	O
nr_items	long
+=	O
1	int
;	O
if	O
(	O
item	pointer
->	O
value	pointer
==	O
_HURD_IHASH_EMPTY	O
)	O
{	O
assert	O
(	O
ht	pointer
->	O
nr_free	long
>	O
0	int
)	O
;	O
ht	pointer
->	O
nr_free	long
-=	O
1	int
;	O
}	O
}	O
else	O
{	O
assert	O
(	O
compare	function
(	O
ht	pointer
,	O
item	pointer
->	O
key	long
,	O
key	long
)	O
)	O
;	O
if	O
(	O
ht	pointer
->	O
cleanup	pointer
)	O
(	O
*	O
ht	pointer
->	O
cleanup	pointer
)	O
(	O
locp	pointer
,	O
ht	pointer
->	O
cleanup_data	pointer
)	O
;	O
}	O
item	pointer
->	O
value	pointer
=	O
value	pointer
;	O
if	O
(	O
ht	pointer
->	O
locp_offset	long
!=	O
HURD_IHASH_NO_LOCP	O
)	O
*	O
(	O
(	O
hurd_ihash_locp_t	pointer
*	O
)	O
(	O
(	O
(	O
char	O
*	O
)	O
value	pointer
)	O
+	O
ht	pointer
->	O
locp_offset	long
)	O
)	O
=	O
locp	pointer
;	O
return	O
0	int
;	O
}	O
error_t	int
hurd_ihash_add	function
(	O
hurd_ihash_t	pointer
ht	pointer
,	O
hurd_ihash_key_t	long
key	long
,	O
hurd_ihash_value_t	pointer
item	pointer
)	O
{	O
struct	O
hurd_ihash	struct
old_ht	struct
=	O
*	O
ht	pointer
;	O
int	O
was_added	int
;	O
int	O
fatal	int
=	O
0	int
;	O
unsigned	O
int	O
i	int
;	O
if	O
(	O
ht	pointer
->	O
size	long
)	O
{	O
if	O
(	O
hurd_ihash_get_effective_load	function
(	O
ht	pointer
)	O
<=	O
ht	pointer
->	O
max_load	int
)	O
add_one	function
:	O
if	O
(	O
add_one	function
(	O
ht	pointer
,	O
key	long
,	O
item	pointer
)	O
)	O
return	O
0	int
;	O
}	O
ht	pointer
->	O
nr_items	long
=	O
0	int
;	O
if	O
(	O
ht	pointer
->	O
size	long
==	O
0	int
)	O
ht	pointer
->	O
size	long
=	O
HURD_IHASH_MIN_SIZE	int
;	O
else	O
if	O
(	O
hurd_ihash_get_load	function
(	O
&	O
old_ht	struct
)	O
>	O
ht	pointer
->	O
max_load	int
)	O
ht	pointer
->	O
size	long
<<=	O
1	int
;	O
ht	pointer
->	O
nr_free	long
=	O
ht	pointer
->	O
size	long
;	O
ht	pointer
->	O
items	pointer
=	O
calloc	function
(	O
ht	pointer
->	O
size	long
,	O
sizeof	O
(	O
struct	O
_hurd_ihash_item	struct
)	O
)	O
;	O
if	O
(	O
ht	pointer
->	O
items	pointer
==	O
NULL	O
)	O
{	O
*	O
ht	pointer
=	O
old_ht	struct
;	O
if	O
(	O
fatal	int
||	O
ht	pointer
->	O
size	long
==	O
0	int
)	O
return	O
ENOMEM	int
;	O
fatal	int
=	O
1	int
;	O
goto	O
add_one	function
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
old_ht	struct
.	O
size	long
;	O
i	int
++	O
)	O
if	O
(	O
!	O
index_empty	function
(	O
&	O
old_ht	struct
,	O
i	int
)	O
)	O
{	O
was_added	int
=	O
add_one	function
(	O
ht	pointer
,	O
old_ht	struct
.	O
items	pointer
[	O
i	int
]	O
.	O
key	long
,	O
old_ht	struct
.	O
items	pointer
[	O
i	int
]	O
.	O
value	pointer
)	O
;	O
assert	O
(	O
was_added	int
)	O
;	O
}	O
was_added	int
=	O
add_one	function
(	O
ht	pointer
,	O
key	long
,	O
item	pointer
)	O
;	O
assert	O
(	O
was_added	int
)	O
;	O
if	O
(	O
old_ht	struct
.	O
size	long
>	O
0	int
)	O
free	function
(	O
old_ht	struct
.	O
items	pointer
)	O
;	O
return	O
0	int
;	O
}	O
hurd_ihash_value_t	pointer
hurd_ihash_find	function
(	O
hurd_ihash_t	pointer
ht	pointer
,	O
hurd_ihash_key_t	long
key	long
)	O
{	O
if	O
(	O
ht	pointer
->	O
size	long
==	O
0	int
)	O
return	O
NULL	O
;	O
else	O
{	O
int	O
idx	int
=	O
find_index	function
(	O
ht	pointer
,	O
key	long
)	O
;	O
return	O
index_valid	function
(	O
ht	pointer
,	O
idx	int
,	O
key	long
)	O
?	O
ht	pointer
->	O
items	pointer
[	O
idx	int
]	O
.	O
value	pointer
:	O
NULL	O
;	O
}	O
}	O
hurd_ihash_value_t	pointer
hurd_ihash_locp_find	function
(	O
hurd_ihash_t	pointer
ht	pointer
,	O
hurd_ihash_key_t	long
key	long
,	O
hurd_ihash_locp_t	pointer
*	O
slot	pointer
)	O
{	O
int	O
idx	int
;	O
if	O
(	O
ht	pointer
->	O
size	long
==	O
0	int
)	O
{	O
*	O
slot	pointer
=	O
NULL	O
;	O
return	O
NULL	O
;	O
}	O
idx	int
=	O
find_index	function
(	O
ht	pointer
,	O
key	long
)	O
;	O
*	O
slot	pointer
=	O
&	O
ht	pointer
->	O
items	pointer
[	O
idx	int
]	O
.	O
value	pointer
;	O
return	O
index_valid	function
(	O
ht	pointer
,	O
idx	int
,	O
key	long
)	O
?	O
ht	pointer
->	O
items	pointer
[	O
idx	int
]	O
.	O
value	pointer
:	O
NULL	O
;	O
}	O
int	O
hurd_ihash_remove	function
(	O
hurd_ihash_t	pointer
ht	pointer
,	O
hurd_ihash_key_t	long
key	long
)	O
{	O
if	O
(	O
ht	pointer
->	O
size	long
!=	O
0	int
)	O
{	O
int	O
idx	int
=	O
find_index	function
(	O
ht	pointer
,	O
key	long
)	O
;	O
if	O
(	O
index_valid	function
(	O
ht	pointer
,	O
idx	int
,	O
key	long
)	O
)	O
{	O
locp_remove	function
(	O
ht	pointer
,	O
&	O
ht	pointer
->	O
items	pointer
[	O
idx	int
]	O
.	O
value	pointer
)	O
;	O
return	O
1	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
void	O
hurd_ihash_locp_remove	function
(	O
hurd_ihash_t	pointer
ht	pointer
,	O
hurd_ihash_locp_t	pointer
locp	pointer
)	O
{	O
locp_remove	function
(	O
ht	pointer
,	O
locp	pointer
)	O
;	O
}	O
