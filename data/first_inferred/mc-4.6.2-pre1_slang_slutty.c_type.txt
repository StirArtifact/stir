int	O
SLang_TT_Read_FD	int
=	O
-	O
1	int
;	O
int	O
SLang_TT_Baud_Rate	int
;	O
typedef	O
struct	O
termios	struct
TTY_Termio_Type	struct
;	O
static	O
TTY_Termio_Type	struct
Old_TTY	struct
;	O
typedef	O
SLCONST	O
struct	O
{	O
unsigned	O
int	O
key	pointer
;	O
unsigned	O
int	O
value	short
;	O
}	O
Baud_Rate_Type	struct
;	O
static	O
Baud_Rate_Type	struct
Baud_Rates	array
[	O
]	O
=	O
{	O
{	O
B0	int
,	O
0	int
}	O
,	O
{	O
B50	int
,	O
50	int
}	O
,	O
{	O
B75	int
,	O
75	int
}	O
,	O
{	O
B110	int
,	O
110	int
}	O
,	O
{	O
B134	int
,	O
134	int
}	O
,	O
{	O
B150	int
,	O
150	int
}	O
,	O
{	O
B200	int
,	O
200	int
}	O
,	O
{	O
B300	int
,	O
300	int
}	O
,	O
{	O
B600	int
,	O
600	int
}	O
,	O
{	O
B1200	int
,	O
1200	int
}	O
,	O
{	O
B1800	int
,	O
1800	int
}	O
,	O
{	O
B2400	int
,	O
2400	int
}	O
,	O
{	O
B4800	int
,	O
4800	int
}	O
,	O
{	O
B9600	int
,	O
9600	int
}	O
,	O
{	O
B19200	int
,	O
19200	int
}	O
,	O
{	O
B38400	int
,	O
38400	int
}	O
,	O
{	O
B57600	int
,	O
57600	int
}	O
,	O
{	O
B115200	int
,	O
115200	int
}	O
,	O
{	O
B230400	int
,	O
230400	int
}	O
,	O
{	O
0	int
,	O
0	int
}	O
}	O
;	O
static	O
void	O
set_baud_rate	function
(	O
TTY_Termio_Type	struct
*	O
tty	pointer
)	O
{	O
unsigned	O
int	O
speed	int
;	O
Baud_Rate_Type	struct
*	O
b	pointer
,	O
*	O
bmax	pointer
;	O
if	O
(	O
SLang_TT_Baud_Rate	int
)	O
return	O
;	O
speed	int
=	O
(	O
unsigned	O
int	O
)	O
cfgetospeed	function
(	O
tty	pointer
)	O
;	O
b	pointer
=	O
Baud_Rates	array
;	O
bmax	pointer
=	O
b	pointer
+	O
(	O
sizeof	O
(	O
Baud_Rates	array
)	O
/	O
sizeof	O
(	O
Baud_Rates	array
[	O
0	int
]	O
)	O
)	O
;	O
while	O
(	O
b	pointer
<	O
bmax	pointer
)	O
{	O
if	O
(	O
b	pointer
->	O
key	pointer
==	O
speed	int
)	O
{	O
SLang_TT_Baud_Rate	int
=	O
b	pointer
->	O
value	short
;	O
return	O
;	O
}	O
b	pointer
++	O
;	O
}	O
}	O
static	O
int	O
TTY_Inited	int
=	O
0	int
;	O
static	O
int	O
TTY_Open	int
=	O
0	int
;	O
int	O
SLang_init_tty	function
(	O
int	O
abort_char	int
,	O
int	O
no_flow_control	int
,	O
int	O
opost	int
)	O
{	O
TTY_Termio_Type	struct
newtty	struct
;	O
SLsig_block_signals	function
(	O
)	O
;	O
if	O
(	O
TTY_Inited	int
)	O
{	O
SLsig_unblock_signals	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
TTY_Open	int
=	O
0	int
;	O
if	O
(	O
(	O
SLang_TT_Read_FD	int
==	O
-	O
1	int
)	O
||	O
(	O
1	int
!=	O
isatty	function
(	O
SLang_TT_Read_FD	int
)	O
)	O
)	O
{	O
if	O
(	O
(	O
SLang_TT_Read_FD	int
=	O
open	function
(	O
"/dev/tty"	pointer
,	O
O_RDWR	int
)	O
)	O
>=	O
0	int
)	O
{	O
TTY_Open	int
=	O
1	int
;	O
}	O
if	O
(	O
TTY_Open	int
==	O
0	int
)	O
{	O
SLang_TT_Read_FD	int
=	O
fileno	function
(	O
stderr	pointer
)	O
;	O
if	O
(	O
1	int
!=	O
isatty	function
(	O
SLang_TT_Read_FD	int
)	O
)	O
{	O
SLang_TT_Read_FD	int
=	O
fileno	function
(	O
stdin	pointer
)	O
;	O
if	O
(	O
1	int
!=	O
isatty	function
(	O
SLang_TT_Read_FD	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Failed to open terminal."	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
}	O
SLang_Abort_Char	int
=	O
abort_char	int
;	O
while	O
(	O
-	O
1	int
==	O
GET_TERMIOS	O
(	O
SLang_TT_Read_FD	int
,	O
&	O
Old_TTY	struct
)	O
)	O
{	O
if	O
(	O
errno	O
!=	O
EINTR	int
)	O
{	O
SLsig_unblock_signals	function
(	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
while	O
(	O
-	O
1	int
==	O
GET_TERMIOS	O
(	O
SLang_TT_Read_FD	int
,	O
&	O
newtty	struct
)	O
)	O
{	O
if	O
(	O
errno	O
!=	O
EINTR	int
)	O
{	O
SLsig_unblock_signals	function
(	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
newtty	struct
.	O
c_iflag	short
&=	O
~	O
(	O
ECHO	int
|	O
INLCR	int
|	O
ICRNL	int
)	O
;	O
if	O
(	O
opost	int
==	O
0	int
)	O
newtty	struct
.	O
c_oflag	short
&=	O
~	O
OPOST	int
;	O
set_baud_rate	function
(	O
&	O
newtty	struct
)	O
;	O
if	O
(	O
no_flow_control	int
)	O
newtty	struct
.	O
c_iflag	short
&=	O
~	O
IXON	int
;	O
else	O
newtty	struct
.	O
c_iflag	short
|=	O
IXON	int
;	O
newtty	struct
.	O
c_cc	array
[	O
VEOF	int
]	O
=	O
1	int
;	O
newtty	struct
.	O
c_cc	array
[	O
VMIN	int
]	O
=	O
1	int
;	O
newtty	struct
.	O
c_cc	array
[	O
VTIME	int
]	O
=	O
0	int
;	O
newtty	struct
.	O
c_lflag	short
=	O
ISIG	int
|	O
NOFLSH	int
;	O
if	O
(	O
abort_char	int
==	O
-	O
1	int
)	O
SLang_Abort_Char	int
=	O
newtty	struct
.	O
c_cc	array
[	O
VINTR	int
]	O
;	O
newtty	struct
.	O
c_cc	array
[	O
VINTR	int
]	O
=	O
SLang_Abort_Char	int
;	O
newtty	struct
.	O
c_cc	array
[	O
VQUIT	int
]	O
=	O
NULL_VALUE	O
;	O
newtty	struct
.	O
c_cc	array
[	O
VSUSP	int
]	O
=	O
NULL_VALUE	O
;	O
newtty	struct
.	O
c_cc	array
[	O
VLNEXT	int
]	O
=	O
NULL_VALUE	O
;	O
while	O
(	O
-	O
1	int
==	O
SET_TERMIOS	O
(	O
SLang_TT_Read_FD	int
,	O
&	O
newtty	struct
)	O
)	O
{	O
if	O
(	O
errno	O
!=	O
EINTR	int
)	O
{	O
SLsig_unblock_signals	function
(	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
TTY_Inited	int
=	O
1	int
;	O
SLsig_unblock_signals	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
void	O
SLtty_set_suspend_state	function
(	O
int	O
mode	int
)	O
{	O
TTY_Termio_Type	struct
newtty	struct
;	O
SLsig_block_signals	function
(	O
)	O
;	O
if	O
(	O
TTY_Inited	int
==	O
0	int
)	O
{	O
SLsig_unblock_signals	function
(	O
)	O
;	O
return	O
;	O
}	O
while	O
(	O
(	O
-	O
1	int
==	O
GET_TERMIOS	O
(	O
SLang_TT_Read_FD	int
,	O
&	O
newtty	struct
)	O
)	O
&&	O
(	O
errno	O
==	O
EINTR	int
)	O
)	O
;	O
if	O
(	O
mode	int
==	O
0	int
)	O
{	O
newtty	struct
.	O
c_cc	array
[	O
VSUSP	int
]	O
=	O
NULL_VALUE	O
;	O
}	O
else	O
{	O
newtty	struct
.	O
c_cc	array
[	O
VSUSP	int
]	O
=	O
Old_TTY	struct
.	O
c_cc	array
[	O
VSUSP	int
]	O
;	O
}	O
while	O
(	O
(	O
-	O
1	int
==	O
SET_TERMIOS	O
(	O
SLang_TT_Read_FD	int
,	O
&	O
newtty	struct
)	O
)	O
&&	O
(	O
errno	O
==	O
EINTR	int
)	O
)	O
;	O
SLsig_unblock_signals	function
(	O
)	O
;	O
}	O
void	O
SLang_reset_tty	function
(	O
void	O
)	O
{	O
SLsig_block_signals	function
(	O
)	O
;	O
if	O
(	O
TTY_Inited	int
==	O
0	int
)	O
{	O
SLsig_unblock_signals	function
(	O
)	O
;	O
return	O
;	O
}	O
while	O
(	O
(	O
-	O
1	int
==	O
SET_TERMIOS	O
(	O
SLang_TT_Read_FD	int
,	O
&	O
Old_TTY	struct
)	O
)	O
&&	O
(	O
errno	O
==	O
EINTR	int
)	O
)	O
;	O
if	O
(	O
TTY_Open	int
)	O
{	O
while	O
(	O
(	O
-	O
1	int
==	O
close	pointer
(	O
SLang_TT_Read_FD	int
)	O
)	O
&&	O
(	O
errno	O
==	O
EINTR	int
)	O
)	O
;	O
TTY_Open	int
=	O
0	int
;	O
SLang_TT_Read_FD	int
=	O
-	O
1	int
;	O
}	O
TTY_Inited	int
=	O
0	int
;	O
SLsig_unblock_signals	function
(	O
)	O
;	O
}	O
static	O
void	O
default_sigint	function
(	O
int	O
sig	int
)	O
{	O
sig	int
=	O
errno	O
;	O
SLKeyBoard_Quit	int
=	O
1	int
;	O
if	O
(	O
SLang_Ignore_User_Abort	int
==	O
0	int
)	O
SLang_set_error	function
(	O
SL_USER_BREAK	O
)	O
;	O
SLsignal_intr	function
(	O
SIGINT	int
,	O
default_sigint	function
)	O
;	O
errno	O
=	O
sig	int
;	O
}	O
int	O
SLang_set_abort_signal	function
(	O
void	O
(	O
*	O
hand	pointer
)	O
(	O
int	O
)	O
)	O
{	O
int	O
save_errno	int
=	O
errno	O
;	O
SLSig_Fun_Type	function
*	O
f	float
;	O
if	O
(	O
hand	pointer
==	O
NULL	O
)	O
hand	pointer
=	O
default_sigint	function
;	O
f	float
=	O
SLsignal_intr	function
(	O
SIGINT	int
,	O
hand	pointer
)	O
;	O
errno	O
=	O
save_errno	int
;	O
if	O
(	O
f	float
==	O
(	O
SLSig_Fun_Type	function
*	O
)	O
SIG_ERR	O
)	O
return	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
fd_set	struct
Read_FD_Set	struct
;	O
int	O
_pSLsys_input_pending	function
(	O
int	O
tsecs	int
)	O
{	O
struct	O
timeval	struct
wait	struct
;	O
long	O
usecs	long
,	O
secs	long
;	O
if	O
(	O
(	O
TTY_Inited	int
==	O
0	int
)	O
||	O
(	O
SLang_TT_Read_FD	int
<	O
0	int
)	O
)	O
{	O
errno	O
=	O
EBADF	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
tsecs	int
>=	O
0	int
)	O
{	O
secs	long
=	O
tsecs	int
/	O
10	int
;	O
usecs	long
=	O
(	O
tsecs	int
%	O
10	int
)	O
*	O
100000	int
;	O
}	O
else	O
{	O
tsecs	int
=	O
-	O
tsecs	int
;	O
secs	long
=	O
tsecs	int
/	O
1000	int
;	O
usecs	long
=	O
(	O
tsecs	int
%	O
1000	int
)	O
*	O
1000	int
;	O
}	O
wait	struct
.	O
tv_sec	long
=	O
secs	long
;	O
wait	struct
.	O
tv_usec	long
=	O
usecs	long
;	O
FD_ZERO	O
(	O
&	O
Read_FD_Set	struct
)	O
;	O
FD_SET	O
(	O
SLang_TT_Read_FD	int
,	O
&	O
Read_FD_Set	struct
)	O
;	O
return	O
select	function
(	O
SLang_TT_Read_FD	int
+	O
1	int
,	O
&	O
Read_FD_Set	struct
,	O
NULL	O
,	O
NULL	O
,	O
&	O
wait	struct
)	O
;	O
}	O
int	O
(	O
*	O
SLang_getkey_intr_hook	pointer
)	O
(	O
void	O
)	O
;	O
static	O
int	O
handle_interrupt	function
(	O
void	O
)	O
{	O
if	O
(	O
SLang_getkey_intr_hook	pointer
!=	O
NULL	O
)	O
{	O
int	O
save_tty_fd	int
=	O
SLang_TT_Read_FD	int
;	O
if	O
(	O
-	O
1	int
==	O
(	O
*	O
SLang_getkey_intr_hook	pointer
)	O
(	O
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
save_tty_fd	int
!=	O
SLang_TT_Read_FD	int
)	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
unsigned	O
int	O
_pSLsys_getkey	function
(	O
void	O
)	O
{	O
unsigned	O
char	O
c	int
;	O
if	O
(	O
TTY_Inited	int
==	O
0	int
)	O
{	O
int	O
ic	int
=	O
fgetc	function
(	O
stdin	pointer
)	O
;	O
if	O
(	O
ic	int
==	O
EOF	O
)	O
return	O
SLANG_GETKEY_ERROR	int
;	O
return	O
(	O
unsigned	O
int	O
)	O
ic	int
;	O
}	O
while	O
(	O
1	int
)	O
{	O
int	O
ret	int
;	O
if	O
(	O
SLKeyBoard_Quit	int
)	O
return	O
SLang_Abort_Char	int
;	O
if	O
(	O
0	int
==	O
(	O
ret	int
=	O
_pSLsys_input_pending	function
(	O
100	int
)	O
)	O
)	O
continue	O
;	O
if	O
(	O
ret	int
!=	O
-	O
1	int
)	O
break	O
;	O
if	O
(	O
SLKeyBoard_Quit	int
)	O
return	O
SLang_Abort_Char	int
;	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
{	O
if	O
(	O
-	O
1	int
==	O
handle_interrupt	function
(	O
)	O
)	O
return	O
SLANG_GETKEY_ERROR	int
;	O
continue	O
;	O
}	O
break	O
;	O
}	O
while	O
(	O
1	int
)	O
{	O
int	O
status	int
=	O
read	pointer
(	O
SLang_TT_Read_FD	int
,	O
(	O
char	O
*	O
)	O
&	O
c	int
,	O
1	int
)	O
;	O
if	O
(	O
status	int
>	O
0	int
)	O
break	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
return	O
SLANG_GETKEY_ERROR	int
;	O
}	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
{	O
if	O
(	O
-	O
1	int
==	O
handle_interrupt	function
(	O
)	O
)	O
return	O
SLANG_GETKEY_ERROR	int
;	O
if	O
(	O
SLKeyBoard_Quit	int
)	O
return	O
SLang_Abort_Char	int
;	O
continue	O
;	O
}	O
if	O
(	O
errno	O
==	O
EAGAIN	int
)	O
{	O
sleep	function
(	O
1	int
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
errno	O
==	O
EWOULDBLOCK	O
)	O
{	O
sleep	function
(	O
1	int
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
errno	O
==	O
EIO	int
)	O
{	O
SLang_verror	function
(	O
SL_Read_Error	int
,	O
"_pSLsys_getkey: EIO error"	pointer
)	O
;	O
}	O
return	O
SLANG_GETKEY_ERROR	int
;	O
}	O
return	O
(	O
(	O
unsigned	O
int	O
)	O
c	int
)	O
;	O
}	O
