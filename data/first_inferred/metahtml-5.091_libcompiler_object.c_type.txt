bc_string_t	pointer
bc_object_empty	pointer
=	O
""	pointer
;	O
bc_string_t	pointer
bc_object_true	pointer
=	O
"true"	pointer
;	O
bc_string_t	pointer
bc_object_false	pointer
=	O
"false"	pointer
;	O
bc_symbol_t	pointer
bc_list_of_symbols	pointer
=	O
(	O
bc_symbol_t	pointer
)	O
NULL	O
;	O
bc_symbol_t	pointer
bc_symbol_find	function
(	O
bc_string_t	pointer
string	pointer
)	O
{	O
bc_symbol_t	pointer
symbol	pointer
;	O
for	O
(	O
symbol	pointer
=	O
bc_list_of_symbols	pointer
;	O
symbol	pointer
;	O
symbol	pointer
=	O
BC_SYMBOL_NEXT	O
(	O
symbol	pointer
)	O
)	O
if	O
(	O
0	int
==	O
strcmp	function
(	O
string	pointer
,	O
BC_SYMBOL_NAME	O
(	O
symbol	pointer
)	O
)	O
)	O
return	O
(	O
symbol	pointer
)	O
;	O
return	O
(	O
(	O
bc_symbol_t	pointer
)	O
NULL	O
)	O
;	O
}	O
bc_symbol_t	pointer
bc_symbol_intern	function
(	O
bc_string_t	pointer
string	pointer
)	O
{	O
bc_symbol_t	pointer
symbol	pointer
=	O
bc_symbol_find	function
(	O
string	pointer
)	O
;	O
if	O
(	O
!	O
symbol	pointer
)	O
{	O
symbol	pointer
=	O
(	O
bc_symbol_t	pointer
)	O
xmalloc	function
(	O
sizeof	O
(	O
struct	O
bc_symbol	struct
)	O
)	O
;	O
BC_SYMBOL_NAME	O
(	O
symbol	pointer
)	O
=	O
string	pointer
;	O
BC_SYMBOL_VALUE	O
(	O
symbol	pointer
)	O
=	O
"no value"	pointer
;	O
BC_SYMBOL_TYPE	int
(	O
symbol	pointer
)	O
=	O
BC_STRING_TYPE	int
;	O
BC_SYMBOL_HASH	O
(	O
symbol	pointer
)	O
=	O
0	int
;	O
BC_SYMBOL_NEXT	O
(	O
symbol	pointer
)	O
=	O
bc_list_of_symbols	pointer
;	O
bc_list_of_symbols	pointer
=	O
symbol	pointer
;	O
}	O
return	O
(	O
symbol	pointer
)	O
;	O
}	O
bc_package_t	pointer
bc_package_list	pointer
=	O
(	O
bc_package_t	pointer
)	O
NULL	O
;	O
bc_package_t	pointer
bc_current_package	pointer
=	O
(	O
bc_package_t	pointer
)	O
NULL	O
;	O
bc_package_t	pointer
bc_function_package	pointer
=	O
(	O
bc_package_t	pointer
)	O
NULL	O
;	O
extern	O
bc_function_t	pointer
bc_function_new	function
(	O
bc_string_t	pointer
name	pointer
,	O
bc_byte_code_t	char
*	O
code	pointer
,	O
unsigned	O
int	O
code_count	int
,	O
struct	O
bc_tagged_object	struct
*	O
constants	pointer
,	O
unsigned	O
int	O
constants_count	int
,	O
unsigned	O
int	O
stack_size	int
)	O
{	O
bc_function_t	pointer
function	pointer
=	O
(	O
bc_function_t	pointer
)	O
xmalloc	function
(	O
sizeof	O
(	O
struct	O
bc_function	struct
)	O
)	O
;	O
BC_FUNCTION_NAME	O
(	O
function	pointer
)	O
=	O
name	pointer
;	O
BC_FUNCTION_CODE	O
(	O
function	pointer
)	O
=	O
code	pointer
;	O
BC_FUNCTION_CODE_COUNT	O
(	O
function	pointer
)	O
=	O
code_count	int
;	O
BC_FUNCTION_CONSTANTS	O
(	O
function	pointer
)	O
=	O
constants	pointer
;	O
BC_FUNCTION_CONSTANTS_COUNT	O
(	O
function	pointer
)	O
=	O
constants_count	int
;	O
BC_FUNCTION_STACK_SIZE	O
(	O
function	pointer
)	O
=	O
stack_size	int
;	O
return	O
(	O
function	pointer
)	O
;	O
}	O
void	O
bc_function_free	function
(	O
bc_function_t	pointer
function	pointer
)	O
{	O
free	function
(	O
BC_FUNCTION_CODE	O
(	O
function	pointer
)	O
)	O
;	O
free	function
(	O
BC_FUNCTION_CONSTANTS	O
(	O
function	pointer
)	O
)	O
;	O
free	function
(	O
function	pointer
)	O
;	O
}	O
extern	O
void	O
bc_format_print	function
(	O
bc_format_t	pointer
format	pointer
)	O
{	O
for	O
(	O
;	O
format	pointer
;	O
format	pointer
=	O
BC_FORMAT_NEXT	O
(	O
format	pointer
)	O
)	O
{	O
switch	O
(	O
BC_FORMAT_TYPE	int
(	O
format	pointer
)	O
)	O
{	O
case	O
BC_STRING_TYPE	int
:	O
printf	function
(	O
"\"%s\""	pointer
,	O
(	O
bc_string_t	pointer
)	O
BC_FORMAT_OBJECT	O
(	O
format	pointer
)	O
)	O
;	O
break	O
;	O
case	O
BC_INDEX_TYPE	int
:	O
printf	function
(	O
"%d"	pointer
,	O
(	O
bc_index_t	int
)	O
BC_FORMAT_OBJECT	O
(	O
format	pointer
)	O
)	O
;	O
break	O
;	O
default	O
:	O
printf	function
(	O
"***"	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
BC_FORMAT_NEXT	O
(	O
format	pointer
)	O
)	O
printf	function
(	O
" "	pointer
)	O
;	O
}	O
}	O
