const	O
char	O
chat_rcsid	array
[	O
]	O
=	O
"$Id: chat.c,v 1.50 2002/03/05 19:10:41 ian Rel $"	pointer
;	O
static	O
int	O
icexpect	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
int	O
cstrings	int
,	O
char	O
*	O
*	O
azstrings	pointer
,	O
size_t	long
*	O
aclens	pointer
,	O
int	O
ctimeout	int
,	O
boolean	int
fstrip	int
)	O
)	O
;	O
static	O
boolean	int
fcsend	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
pointer	pointer
puuconf	pointer
,	O
const	O
char	O
*	O
zsend	pointer
,	O
const	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
,	O
const	O
struct	O
uuconf_dialer	struct
*	O
qdial	pointer
,	O
const	O
char	O
*	O
zphone	pointer
,	O
boolean	int
ftranslate	int
,	O
boolean	int
fstrip	int
)	O
)	O
;	O
static	O
boolean	int
fcecho_send_strip	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
const	O
char	O
*	O
z	pointer
,	O
size_t	long
clen	long
)	O
)	O
;	O
static	O
boolean	int
fcecho_send_nostrip	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
const	O
char	O
*	O
z	pointer
,	O
size_t	long
clen	long
)	O
)	O
;	O
static	O
boolean	int
fcecho_send	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
const	O
char	O
*	O
z	pointer
,	O
size_t	long
clen	long
,	O
boolean	int
fstrip	int
)	O
)	O
;	O
static	O
boolean	int
fcphone	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
pointer	pointer
puuconf	pointer
,	O
const	O
struct	O
uuconf_dialer	struct
*	O
qdial	pointer
,	O
const	O
char	O
*	O
zphone	pointer
,	O
boolean	int
(	O
*	O
pfwrite	pointer
)	O
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qc	pointer
,	O
const	O
char	O
*	O
zwrite	pointer
,	O
size_t	long
cwrite	long
)	O
)	O
,	O
boolean	int
ftranslate	int
,	O
boolean	int
*	O
pfquote	pointer
)	O
)	O
;	O
static	O
boolean	int
fctranslate	function
P	O
(	O
(	O
pointer	pointer
puuconf	pointer
,	O
const	O
char	O
*	O
zphone	pointer
,	O
const	O
char	O
*	O
*	O
pzprefix	pointer
,	O
const	O
char	O
*	O
*	O
pzsuffix	pointer
)	O
)	O
;	O
static	O
boolean	int
fcprogram	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
pointer	pointer
puuconf	pointer
,	O
char	O
*	O
*	O
pzprogram	pointer
,	O
const	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
,	O
const	O
struct	O
uuconf_dialer	struct
*	O
qdial	pointer
,	O
const	O
char	O
*	O
zphone	pointer
,	O
const	O
char	O
*	O
zport	pointer
,	O
long	O
ibaud	long
)	O
)	O
;	O
boolean	int
fchat	function
(	O
qconn	pointer
,	O
puuconf	pointer
,	O
qchat	pointer
,	O
qsys	pointer
,	O
qdial	pointer
,	O
zphone	pointer
,	O
ftranslate	int
,	O
zport	pointer
,	O
ibaud	long
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
pointer	pointer
puuconf	pointer
;	O
const	O
struct	O
uuconf_chat	struct
*	O
qchat	pointer
;	O
const	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
;	O
const	O
struct	O
uuconf_dialer	struct
*	O
qdial	pointer
;	O
const	O
char	O
*	O
zphone	pointer
;	O
boolean	int
ftranslate	int
;	O
const	O
char	O
*	O
zport	pointer
;	O
long	O
ibaud	long
;	O
{	O
int	O
cstrings	int
;	O
char	O
*	O
*	O
azstrings	pointer
;	O
size_t	long
*	O
aclens	pointer
;	O
char	O
*	O
*	O
pzchat	pointer
;	O
char	O
*	O
zbuf	pointer
;	O
size_t	long
cbuflen	long
;	O
boolean	int
fret	int
;	O
int	O
i	int
;	O
if	O
(	O
qchat	pointer
->	O
uuconf_pzprogram	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
fcprogram	function
(	O
qconn	pointer
,	O
puuconf	pointer
,	O
qchat	pointer
->	O
uuconf_pzprogram	pointer
,	O
qsys	pointer
,	O
qdial	pointer
,	O
zphone	pointer
,	O
zport	pointer
,	O
ibaud	long
)	O
)	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
qchat	pointer
->	O
uuconf_pzchat	pointer
==	O
NULL	O
)	O
return	O
TRUE	O
;	O
if	O
(	O
qchat	pointer
->	O
uuconf_pzfail	pointer
==	O
NULL	O
)	O
{	O
cstrings	int
=	O
1	int
;	O
azstrings	pointer
=	O
(	O
char	O
*	O
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
aclens	pointer
=	O
(	O
size_t	long
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
size_t	long
)	O
)	O
;	O
}	O
else	O
{	O
char	O
*	O
*	O
pz	pointer
;	O
cstrings	int
=	O
1	int
;	O
for	O
(	O
pz	pointer
=	O
qchat	pointer
->	O
uuconf_pzfail	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
++	O
cstrings	int
;	O
azstrings	pointer
=	O
(	O
char	O
*	O
*	O
)	O
xmalloc	function
(	O
cstrings	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
aclens	pointer
=	O
(	O
size_t	long
*	O
)	O
xmalloc	function
(	O
cstrings	int
*	O
sizeof	O
(	O
size_t	long
)	O
)	O
;	O
for	O
(	O
cstrings	int
=	O
1	int
,	O
pz	pointer
=	O
qchat	pointer
->	O
uuconf_pzfail	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
cstrings	int
++	O
,	O
pz	pointer
++	O
)	O
{	O
azstrings	pointer
[	O
cstrings	int
]	O
=	O
zbufcpy	function
(	O
*	O
pz	pointer
)	O
;	O
aclens	pointer
[	O
cstrings	int
]	O
=	O
cescape	function
(	O
azstrings	pointer
[	O
cstrings	int
]	O
)	O
;	O
}	O
}	O
cbuflen	long
=	O
0	int
;	O
zbuf	pointer
=	O
NULL	O
;	O
fret	int
=	O
TRUE	O
;	O
pzchat	pointer
=	O
qchat	pointer
->	O
uuconf_pzchat	pointer
;	O
while	O
(	O
*	O
pzchat	pointer
!=	O
NULL	O
)	O
{	O
size_t	long
clen	long
;	O
while	O
(	O
TRUE	O
)	O
{	O
char	O
*	O
ztimeout	pointer
;	O
int	O
ctimeout	int
;	O
clen	long
=	O
strlen	function
(	O
*	O
pzchat	pointer
)	O
;	O
if	O
(	O
clen	long
>=	O
cbuflen	long
)	O
{	O
ubuffree	function
(	O
zbuf	pointer
)	O
;	O
zbuf	pointer
=	O
zbufalc	function
(	O
clen	long
+	O
1	int
)	O
;	O
cbuflen	long
=	O
clen	long
;	O
}	O
memcpy	function
(	O
zbuf	pointer
,	O
*	O
pzchat	pointer
,	O
clen	long
+	O
1	int
)	O
;	O
azstrings	pointer
[	O
0	int
]	O
=	O
zbuf	pointer
;	O
if	O
(	O
azstrings	pointer
[	O
0	int
]	O
[	O
0	int
]	O
==	O
'-'	O
)	O
++	O
azstrings	pointer
[	O
0	int
]	O
;	O
ctimeout	int
=	O
qchat	pointer
->	O
uuconf_ctimeout	int
;	O
ztimeout	pointer
=	O
strrchr	function
(	O
azstrings	pointer
[	O
0	int
]	O
,	O
'\\'	O
)	O
;	O
if	O
(	O
ztimeout	pointer
!=	O
NULL	O
&&	O
ztimeout	pointer
[	O
1	int
]	O
==	O
'W'	O
)	O
{	O
char	O
*	O
zend	pointer
;	O
int	O
cval	int
;	O
cval	int
=	O
(	O
int	O
)	O
strtol	function
(	O
ztimeout	pointer
+	O
2	int
,	O
&	O
zend	pointer
,	O
10	int
)	O
;	O
if	O
(	O
zend	pointer
!=	O
ztimeout	pointer
+	O
2	int
&&	O
*	O
zend	pointer
==	O
'\0'	O
)	O
{	O
ctimeout	int
=	O
cval	int
;	O
*	O
ztimeout	pointer
=	O
'\0'	O
;	O
}	O
}	O
aclens	pointer
[	O
0	int
]	O
=	O
cescape	function
(	O
azstrings	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
aclens	pointer
[	O
0	int
]	O
==	O
0	int
||	O
(	O
aclens	pointer
[	O
0	int
]	O
==	O
2	int
&&	O
strcmp	function
(	O
azstrings	pointer
[	O
0	int
]	O
,	O
"\"\""	pointer
)	O
==	O
0	int
)	O
)	O
{	O
if	O
(	O
pzchat	pointer
[	O
1	int
]	O
==	O
NULL	O
||	O
pzchat	pointer
[	O
1	int
]	O
[	O
0	int
]	O
!=	O
'-'	O
)	O
break	O
;	O
}	O
else	O
{	O
int	O
istr	int
;	O
istr	int
=	O
icexpect	function
(	O
qconn	pointer
,	O
cstrings	int
,	O
azstrings	pointer
,	O
aclens	pointer
,	O
ctimeout	int
,	O
qchat	pointer
->	O
uuconf_fstrip	int
)	O
;	O
if	O
(	O
istr	int
==	O
0	int
)	O
break	O
;	O
if	O
(	O
istr	int
<	O
-	O
1	int
)	O
{	O
fret	int
=	O
FALSE	O
;	O
break	O
;	O
}	O
if	O
(	O
istr	int
>	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Chat script failed: Got \"%s\""	pointer
,	O
qchat	pointer
->	O
uuconf_pzfail	pointer
[	O
istr	int
-	O
1	int
]	O
)	O
;	O
fret	int
=	O
FALSE	O
;	O
break	O
;	O
}	O
if	O
(	O
pzchat	pointer
[	O
1	int
]	O
==	O
NULL	O
||	O
pzchat	pointer
[	O
1	int
]	O
[	O
0	int
]	O
!=	O
'-'	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Timed out in chat script"	pointer
)	O
;	O
fret	int
=	O
FALSE	O
;	O
break	O
;	O
}	O
}	O
++	O
pzchat	pointer
;	O
if	O
(	O
!	O
fcsend	function
(	O
qconn	pointer
,	O
puuconf	pointer
,	O
*	O
pzchat	pointer
+	O
1	int
,	O
qsys	pointer
,	O
qdial	pointer
,	O
zphone	pointer
,	O
ftranslate	int
,	O
qchat	pointer
->	O
uuconf_fstrip	int
)	O
)	O
{	O
fret	int
=	O
FALSE	O
;	O
break	O
;	O
}	O
if	O
(	O
pzchat	pointer
[	O
1	int
]	O
==	O
NULL	O
||	O
pzchat	pointer
[	O
1	int
]	O
[	O
0	int
]	O
!=	O
'-'	O
)	O
break	O
;	O
++	O
pzchat	pointer
;	O
}	O
if	O
(	O
!	O
fret	int
)	O
break	O
;	O
do	O
{	O
++	O
pzchat	pointer
;	O
}	O
while	O
(	O
*	O
pzchat	pointer
!=	O
NULL	O
&&	O
(	O
*	O
pzchat	pointer
)	O
[	O
0	int
]	O
==	O
'-'	O
)	O
;	O
if	O
(	O
*	O
pzchat	pointer
==	O
NULL	O
)	O
break	O
;	O
if	O
(	O
*	O
*	O
pzchat	pointer
!=	O
'\0'	O
)	O
{	O
if	O
(	O
!	O
fcsend	function
(	O
qconn	pointer
,	O
puuconf	pointer
,	O
*	O
pzchat	pointer
,	O
qsys	pointer
,	O
qdial	pointer
,	O
zphone	pointer
,	O
ftranslate	int
,	O
qchat	pointer
->	O
uuconf_fstrip	int
)	O
)	O
{	O
fret	int
=	O
FALSE	O
;	O
break	O
;	O
}	O
}	O
++	O
pzchat	pointer
;	O
}	O
ubuffree	function
(	O
zbuf	pointer
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
cstrings	int
;	O
i	int
++	O
)	O
ubuffree	function
(	O
azstrings	pointer
[	O
i	int
]	O
)	O
;	O
xfree	function
(	O
(	O
pointer	pointer
)	O
azstrings	pointer
)	O
;	O
xfree	function
(	O
(	O
pointer	pointer
)	O
aclens	pointer
)	O
;	O
return	O
fret	int
;	O
}	O
static	O
int	O
icexpect	function
(	O
qconn	pointer
,	O
cstrings	int
,	O
azstrings	pointer
,	O
aclens	pointer
,	O
ctimeout	int
,	O
fstrip	int
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
int	O
cstrings	int
;	O
char	O
*	O
*	O
azstrings	pointer
;	O
size_t	long
*	O
aclens	pointer
;	O
int	O
ctimeout	int
;	O
boolean	int
fstrip	int
;	O
{	O
int	O
i	int
;	O
size_t	long
cmax	int
;	O
char	O
*	O
zhave	pointer
;	O
size_t	long
chave	long
;	O
long	O
iendtime	long
;	O
int	O
cchars	int
;	O
int	O
iolddebug	int
;	O
cmax	int
=	O
aclens	pointer
[	O
0	int
]	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
cstrings	int
;	O
i	int
++	O
)	O
if	O
(	O
cmax	int
<	O
aclens	pointer
[	O
i	int
]	O
)	O
cmax	int
=	O
aclens	pointer
[	O
i	int
]	O
;	O
zhave	pointer
=	O
zbufalc	function
(	O
cmax	int
)	O
;	O
chave	long
=	O
0	int
;	O
iendtime	long
=	O
ixsysdep_time	function
(	O
(	O
long	O
*	O
)	O
NULL	O
)	O
+	O
ctimeout	int
;	O
cchars	int
=	O
0	int
;	O
iolddebug	int
=	O
iDebug	int
;	O
if	O
(	O
FDEBUGGING	O
(	O
DEBUG_CHAT	O
)	O
)	O
{	O
udebug_buffer	function
(	O
"icexpect: Looking for"	pointer
,	O
azstrings	pointer
[	O
0	int
]	O
,	O
aclens	pointer
[	O
0	int
]	O
)	O
;	O
ulog	function
(	O
LOG_DEBUG_START	int
,	O
"icexpect: Got \""	pointer
)	O
;	O
iDebug	int
&=	O
~	O
(	O
DEBUG_INCOMING	O
|	O
DEBUG_PORT	O
)	O
;	O
}	O
while	O
(	O
TRUE	O
)	O
{	O
int	O
bchar	int
;	O
if	O
(	O
ctimeout	int
<=	O
0	int
)	O
{	O
if	O
(	O
FDEBUGGING	O
(	O
DEBUG_CHAT	O
)	O
)	O
{	O
ulog	function
(	O
LOG_DEBUG_END	int
,	O
"\" (timed out)"	pointer
)	O
;	O
iDebug	int
=	O
iolddebug	int
;	O
}	O
ubuffree	function
(	O
zhave	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
chave	long
>=	O
cmax	int
)	O
{	O
size_t	long
imove	long
;	O
for	O
(	O
imove	long
=	O
0	int
;	O
imove	long
<	O
cmax	int
-	O
1	int
;	O
imove	long
++	O
)	O
zhave	pointer
[	O
imove	long
]	O
=	O
zhave	pointer
[	O
imove	long
+	O
1	int
]	O
;	O
--	O
chave	long
;	O
}	O
bchar	int
=	O
breceive_char	function
(	O
qconn	pointer
,	O
ctimeout	int
,	O
TRUE	O
)	O
;	O
if	O
(	O
bchar	int
<	O
0	int
)	O
{	O
if	O
(	O
FDEBUGGING	O
(	O
DEBUG_CHAT	O
)	O
)	O
{	O
ulog	function
(	O
LOG_DEBUG_END	int
,	O
"\" (%s)"	pointer
,	O
bchar	int
==	O
-	O
1	int
?	O
"timed out"	pointer
:	O
"error"	pointer
)	O
;	O
iDebug	int
=	O
iolddebug	int
;	O
}	O
ubuffree	function
(	O
zhave	pointer
)	O
;	O
return	O
bchar	int
;	O
}	O
if	O
(	O
fstrip	int
)	O
bchar	int
&=	O
0x7f	int
;	O
zhave	pointer
[	O
chave	long
]	O
=	O
(	O
char	O
)	O
bchar	int
;	O
++	O
chave	long
;	O
if	O
(	O
FDEBUGGING	O
(	O
DEBUG_CHAT	O
)	O
)	O
{	O
char	O
ab	array
[	O
5	int
]	O
;	O
++	O
cchars	int
;	O
if	O
(	O
cchars	int
>	O
60	int
)	O
{	O
ulog	function
(	O
LOG_DEBUG_END	int
,	O
"\""	pointer
)	O
;	O
ulog	function
(	O
LOG_DEBUG_START	int
,	O
"icexpect: Got \""	pointer
)	O
;	O
cchars	int
=	O
0	int
;	O
}	O
(	O
void	O
)	O
cdebug_char	function
(	O
ab	array
,	O
bchar	int
)	O
;	O
ulog	function
(	O
LOG_DEBUG_CONTINUE	int
,	O
"%s"	pointer
,	O
ab	array
)	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
cstrings	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
aclens	pointer
[	O
i	int
]	O
<=	O
chave	long
&&	O
memcmp	function
(	O
zhave	pointer
+	O
chave	long
-	O
aclens	pointer
[	O
i	int
]	O
,	O
azstrings	pointer
[	O
i	int
]	O
,	O
aclens	pointer
[	O
i	int
]	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
FDEBUGGING	O
(	O
DEBUG_CHAT	O
)	O
)	O
{	O
if	O
(	O
i	int
==	O
0	int
)	O
ulog	function
(	O
LOG_DEBUG_END	int
,	O
"\" (found it)"	pointer
)	O
;	O
else	O
{	O
ulog	function
(	O
LOG_DEBUG_END	int
,	O
"\""	pointer
)	O
;	O
udebug_buffer	function
(	O
"icexpect: Found"	pointer
,	O
azstrings	pointer
[	O
i	int
]	O
,	O
aclens	pointer
[	O
i	int
]	O
)	O
;	O
}	O
iDebug	int
=	O
iolddebug	int
;	O
}	O
ubuffree	function
(	O
zhave	pointer
)	O
;	O
return	O
i	int
;	O
}	O
}	O
ctimeout	int
=	O
(	O
int	O
)	O
(	O
iendtime	long
-	O
ixsysdep_time	function
(	O
(	O
long	O
*	O
)	O
NULL	O
)	O
)	O
;	O
}	O
}	O
static	O
size_t	long
cCsend_chars	long
;	O
static	O
int	O
iColddebug	int
;	O
static	O
boolean	int
fcsend_debug	function
P	O
(	O
(	O
boolean	int
,	O
size_t	long
,	O
const	O
char	O
*	O
)	O
)	O
;	O
static	O
boolean	int
fcsend_debug	function
(	O
fquote	int
,	O
clen	long
,	O
zbuf	pointer
)	O
boolean	int
fquote	int
;	O
size_t	long
clen	long
;	O
const	O
char	O
*	O
zbuf	pointer
;	O
{	O
size_t	long
cwas	long
;	O
if	O
(	O
!	O
FDEBUGGING	O
(	O
DEBUG_CHAT	O
)	O
)	O
return	O
TRUE	O
;	O
cwas	long
=	O
cCsend_chars	long
;	O
if	O
(	O
clen	long
>	O
0	int
)	O
cCsend_chars	long
+=	O
clen	long
;	O
else	O
cCsend_chars	long
+=	O
strlen	function
(	O
zbuf	pointer
)	O
;	O
if	O
(	O
cCsend_chars	long
>	O
60	int
&&	O
cwas	long
>	O
10	int
)	O
{	O
ulog	function
(	O
LOG_DEBUG_END	int
,	O
"%s"	pointer
,	O
fquote	int
?	O
"\""	pointer
:	O
""	pointer
)	O
;	O
fquote	int
=	O
FALSE	O
;	O
ulog	function
(	O
LOG_DEBUG_START	int
,	O
"fcsend: Writing"	pointer
)	O
;	O
cCsend_chars	long
=	O
0	int
;	O
}	O
if	O
(	O
clen	long
==	O
0	int
)	O
{	O
ulog	function
(	O
LOG_DEBUG_CONTINUE	int
,	O
"%s %s"	pointer
,	O
fquote	int
?	O
"\""	pointer
:	O
""	pointer
,	O
zbuf	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
else	O
{	O
size_t	long
i	int
;	O
if	O
(	O
!	O
fquote	int
)	O
ulog	function
(	O
LOG_DEBUG_CONTINUE	int
,	O
" \""	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
clen	long
;	O
i	int
++	O
)	O
{	O
char	O
ab	array
[	O
5	int
]	O
;	O
(	O
void	O
)	O
cdebug_char	function
(	O
ab	array
,	O
zbuf	pointer
[	O
i	int
]	O
)	O
;	O
ulog	function
(	O
LOG_DEBUG_CONTINUE	int
,	O
"%s"	pointer
,	O
ab	array
)	O
;	O
}	O
return	O
TRUE	O
;	O
}	O
}	O
static	O
void	O
ucsend_debug_end	function
P	O
(	O
(	O
boolean	int
,	O
boolean	int
)	O
)	O
;	O
static	O
void	O
ucsend_debug_end	function
(	O
fquote	int
,	O
ferr	int
)	O
boolean	int
fquote	int
;	O
boolean	int
ferr	int
;	O
{	O
if	O
(	O
!	O
FDEBUGGING	O
(	O
DEBUG_CHAT	O
)	O
)	O
return	O
;	O
if	O
(	O
fquote	int
)	O
ulog	function
(	O
LOG_DEBUG_CONTINUE	int
,	O
"\""	pointer
)	O
;	O
if	O
(	O
ferr	int
)	O
ulog	function
(	O
LOG_DEBUG_CONTINUE	int
,	O
" (error)"	pointer
)	O
;	O
ulog	function
(	O
LOG_DEBUG_END	int
,	O
"%s"	pointer
,	O
""	pointer
)	O
;	O
iDebug	int
=	O
iColddebug	int
;	O
}	O
static	O
boolean	int
fcsend	function
(	O
qconn	pointer
,	O
puuconf	pointer
,	O
z	pointer
,	O
qsys	pointer
,	O
qdial	pointer
,	O
zphone	pointer
,	O
ftranslate	int
,	O
fstrip	int
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
pointer	pointer
puuconf	pointer
;	O
const	O
char	O
*	O
z	pointer
;	O
const	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
;	O
const	O
struct	O
uuconf_dialer	struct
*	O
qdial	pointer
;	O
const	O
char	O
*	O
zphone	pointer
;	O
boolean	int
ftranslate	int
;	O
boolean	int
fstrip	int
;	O
{	O
boolean	int
fnocr	int
;	O
boolean	int
(	O
*	O
pfwrite	pointer
)	O
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
,	O
const	O
char	O
*	O
,	O
size_t	long
)	O
)	O
;	O
char	O
*	O
zcallout_login	pointer
;	O
char	O
*	O
zcallout_pass	pointer
;	O
boolean	int
fquote	int
;	O
if	O
(	O
strcmp	function
(	O
z	pointer
,	O
"\"\""	pointer
)	O
==	O
0	int
)	O
return	O
TRUE	O
;	O
fnocr	int
=	O
FALSE	O
;	O
pfwrite	pointer
=	O
fconn_write	function
;	O
zcallout_login	pointer
=	O
NULL	O
;	O
zcallout_pass	pointer
=	O
NULL	O
;	O
if	O
(	O
FDEBUGGING	O
(	O
DEBUG_CHAT	O
)	O
)	O
{	O
ulog	function
(	O
LOG_DEBUG_START	int
,	O
"fcsend: Writing"	pointer
)	O
;	O
fquote	int
=	O
FALSE	O
;	O
cCsend_chars	long
=	O
0	int
;	O
iColddebug	int
=	O
iDebug	int
;	O
iDebug	int
&=	O
~	O
(	O
DEBUG_OUTGOING	O
|	O
DEBUG_PORT	O
)	O
;	O
}	O
while	O
(	O
*	O
z	pointer
!=	O
'\0'	O
)	O
{	O
const	O
char	O
*	O
zlook	pointer
;	O
boolean	int
fsend	int
;	O
char	O
bsend	char
;	O
zlook	pointer
=	O
z	pointer
+	O
strcspn	function
(	O
(	O
char	O
*	O
)	O
z	pointer
,	O
"\\BE"	pointer
)	O
;	O
if	O
(	O
zlook	pointer
>	O
z	pointer
)	O
{	O
size_t	long
c	long
;	O
c	long
=	O
zlook	pointer
-	O
z	pointer
;	O
fquote	int
=	O
fcsend_debug	function
(	O
fquote	int
,	O
c	long
,	O
z	pointer
)	O
;	O
if	O
(	O
!	O
(	O
*	O
pfwrite	pointer
)	O
(	O
qconn	pointer
,	O
z	pointer
,	O
c	long
)	O
)	O
{	O
ucsend_debug_end	function
(	O
fquote	int
,	O
TRUE	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
if	O
(	O
*	O
zlook	pointer
==	O
'\0'	O
)	O
break	O
;	O
z	pointer
=	O
zlook	pointer
;	O
fsend	int
=	O
FALSE	O
;	O
switch	O
(	O
*	O
z	pointer
)	O
{	O
case	O
'B'	O
:	O
if	O
(	O
strncmp	function
(	O
z	pointer
,	O
"BREAK"	pointer
,	O
5	int
)	O
==	O
0	int
)	O
{	O
fquote	int
=	O
fcsend_debug	function
(	O
fquote	int
,	O
(	O
size_t	long
)	O
0	int
,	O
"break"	pointer
)	O
;	O
if	O
(	O
!	O
fconn_break	function
(	O
qconn	pointer
)	O
)	O
{	O
ucsend_debug_end	function
(	O
fquote	int
,	O
TRUE	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
fnocr	int
=	O
TRUE	O
;	O
z	pointer
+=	O
5	int
;	O
}	O
else	O
{	O
fsend	int
=	O
TRUE	O
;	O
bsend	char
=	O
'B'	O
;	O
++	O
z	pointer
;	O
}	O
break	O
;	O
case	O
'E'	O
:	O
if	O
(	O
strncmp	function
(	O
z	pointer
,	O
"EOT"	pointer
,	O
3	int
)	O
==	O
0	int
)	O
{	O
fsend	int
=	O
TRUE	O
;	O
bsend	char
=	O
'\004'	O
;	O
fnocr	int
=	O
TRUE	O
;	O
z	pointer
+=	O
3	int
;	O
}	O
else	O
{	O
fsend	int
=	O
TRUE	O
;	O
bsend	char
=	O
'E'	O
;	O
++	O
z	pointer
;	O
}	O
break	O
;	O
case	O
'\\'	O
:	O
++	O
z	pointer
;	O
switch	O
(	O
*	O
z	pointer
)	O
{	O
case	O
'-'	O
:	O
fsend	int
=	O
TRUE	O
;	O
bsend	char
=	O
'-'	O
;	O
break	O
;	O
case	O
'b'	O
:	O
fsend	int
=	O
TRUE	O
;	O
bsend	char
=	O
'\b'	O
;	O
break	O
;	O
case	O
'c'	O
:	O
fnocr	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'd'	O
:	O
fquote	int
=	O
fcsend_debug	function
(	O
fquote	int
,	O
(	O
size_t	long
)	O
0	int
,	O
"sleep"	pointer
)	O
;	O
usysdep_sleep	function
(	O
1	int
)	O
;	O
break	O
;	O
case	O
'e'	O
:	O
fquote	int
=	O
fcsend_debug	function
(	O
fquote	int
,	O
(	O
size_t	long
)	O
0	int
,	O
"echo-check-off"	pointer
)	O
;	O
pfwrite	pointer
=	O
fconn_write	function
;	O
break	O
;	O
case	O
'E'	O
:	O
fquote	int
=	O
fcsend_debug	function
(	O
fquote	int
,	O
(	O
size_t	long
)	O
0	int
,	O
"echo-check-on"	pointer
)	O
;	O
if	O
(	O
fstrip	int
)	O
pfwrite	pointer
=	O
fcecho_send_strip	function
;	O
else	O
pfwrite	pointer
=	O
fcecho_send_nostrip	function
;	O
break	O
;	O
case	O
'K'	O
:	O
fquote	int
=	O
fcsend_debug	function
(	O
fquote	int
,	O
(	O
size_t	long
)	O
0	int
,	O
"break"	pointer
)	O
;	O
if	O
(	O
!	O
fconn_break	function
(	O
qconn	pointer
)	O
)	O
{	O
ucsend_debug_end	function
(	O
fquote	int
,	O
TRUE	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
break	O
;	O
case	O
'n'	O
:	O
fsend	int
=	O
TRUE	O
;	O
bsend	char
=	O
'\n'	O
;	O
break	O
;	O
case	O
'N'	O
:	O
fsend	int
=	O
TRUE	O
;	O
bsend	char
=	O
'\0'	O
;	O
break	O
;	O
case	O
'p'	O
:	O
fquote	int
=	O
fcsend_debug	function
(	O
fquote	int
,	O
(	O
size_t	long
)	O
0	int
,	O
"pause"	pointer
)	O
;	O
usysdep_pause	function
(	O
)	O
;	O
break	O
;	O
case	O
'r'	O
:	O
fsend	int
=	O
TRUE	O
;	O
bsend	char
=	O
'\r'	O
;	O
break	O
;	O
case	O
's'	O
:	O
fsend	int
=	O
TRUE	O
;	O
bsend	char
=	O
' '	O
;	O
break	O
;	O
case	O
't'	O
:	O
fsend	int
=	O
TRUE	O
;	O
bsend	char
=	O
'\t'	O
;	O
break	O
;	O
case	O
'\0'	O
:	O
--	O
z	pointer
;	O
case	O
'\\'	O
:	O
fsend	int
=	O
TRUE	O
;	O
bsend	char
=	O
'\\'	O
;	O
break	O
;	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
fsend	int
=	O
TRUE	O
;	O
bsend	char
=	O
*	O
z	pointer
-	O
'0'	O
;	O
if	O
(	O
z	pointer
[	O
1	int
]	O
>=	O
'0'	O
&&	O
z	pointer
[	O
1	int
]	O
<=	O
'7'	O
)	O
bsend	char
=	O
(	O
char	O
)	O
(	O
8	int
*	O
bsend	char
+	O
*	O
++	O
z	pointer
-	O
'0'	O
)	O
;	O
if	O
(	O
z	pointer
[	O
1	int
]	O
>=	O
'0'	O
&&	O
z	pointer
[	O
1	int
]	O
<=	O
'7'	O
)	O
bsend	char
=	O
(	O
char	O
)	O
(	O
8	int
*	O
bsend	char
+	O
*	O
++	O
z	pointer
-	O
'0'	O
)	O
;	O
break	O
;	O
case	O
'x'	O
:	O
fsend	int
=	O
TRUE	O
;	O
bsend	char
=	O
0	int
;	O
while	O
(	O
isxdigit	function
(	O
BUCHAR	O
(	O
z	pointer
[	O
1	int
]	O
)	O
)	O
)	O
{	O
if	O
(	O
isdigit	function
(	O
BUCHAR	O
(	O
z	pointer
[	O
1	int
]	O
)	O
)	O
)	O
bsend	char
=	O
(	O
char	O
)	O
(	O
16	int
*	O
bsend	char
+	O
*	O
++	O
z	pointer
-	O
'0'	O
)	O
;	O
else	O
if	O
(	O
isupper	function
(	O
BUCHAR	O
(	O
z	pointer
[	O
1	int
]	O
)	O
)	O
)	O
bsend	char
=	O
(	O
char	O
)	O
(	O
16	int
*	O
bsend	char
+	O
*	O
++	O
z	pointer
-	O
'A'	O
+	O
10	int
)	O
;	O
else	O
bsend	char
=	O
(	O
char	O
)	O
(	O
16	int
*	O
bsend	char
+	O
*	O
++	O
z	pointer
-	O
'a'	O
+	O
10	int
)	O
;	O
}	O
break	O
;	O
case	O
'L'	O
:	O
{	O
const	O
char	O
*	O
zlog	pointer
;	O
char	O
*	O
zcopy	pointer
;	O
size_t	long
clen	long
;	O
if	O
(	O
qsys	pointer
==	O
NULL	O
)	O
{	O
ucsend_debug_end	function
(	O
fquote	int
,	O
TRUE	O
)	O
;	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Illegal use of \\L"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
zlog	pointer
=	O
qsys	pointer
->	O
uuconf_zcall_login	pointer
;	O
if	O
(	O
zlog	pointer
==	O
NULL	O
)	O
{	O
ucsend_debug_end	function
(	O
fquote	int
,	O
TRUE	O
)	O
;	O
ulog	function
(	O
LOG_ERROR	int
,	O
"No login defined"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
zlog	pointer
[	O
0	int
]	O
==	O
'*'	O
&&	O
zlog	pointer
[	O
1	int
]	O
==	O
'\0'	O
)	O
{	O
if	O
(	O
zcallout_login	pointer
==	O
NULL	O
)	O
{	O
int	O
iuuconf	int
;	O
iuuconf	int
=	O
uuconf_callout	function
(	O
puuconf	pointer
,	O
qsys	pointer
,	O
&	O
zcallout_login	pointer
,	O
&	O
zcallout_pass	pointer
)	O
;	O
if	O
(	O
iuuconf	int
==	O
UUCONF_NOT_FOUND	O
||	O
zcallout_login	pointer
==	O
NULL	O
)	O
{	O
ucsend_debug_end	function
(	O
fquote	int
,	O
TRUE	O
)	O
;	O
ulog	function
(	O
LOG_ERROR	int
,	O
"No login defined"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
else	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
{	O
ucsend_debug_end	function
(	O
fquote	int
,	O
TRUE	O
)	O
;	O
ulog_uuconf	function
(	O
LOG_ERROR	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
zlog	pointer
=	O
zcallout_login	pointer
;	O
}	O
zcopy	pointer
=	O
zbufcpy	function
(	O
zlog	pointer
)	O
;	O
clen	long
=	O
cescape	function
(	O
zcopy	pointer
)	O
;	O
fquote	int
=	O
fcsend_debug	function
(	O
fquote	int
,	O
(	O
size_t	long
)	O
0	int
,	O
"login"	pointer
)	O
;	O
fquote	int
=	O
fcsend_debug	function
(	O
fquote	int
,	O
clen	long
,	O
zcopy	pointer
)	O
;	O
if	O
(	O
!	O
(	O
*	O
pfwrite	pointer
)	O
(	O
qconn	pointer
,	O
zcopy	pointer
,	O
clen	long
)	O
)	O
{	O
ubuffree	function
(	O
zcopy	pointer
)	O
;	O
ucsend_debug_end	function
(	O
fquote	int
,	O
TRUE	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
ubuffree	function
(	O
zcopy	pointer
)	O
;	O
}	O
break	O
;	O
case	O
'P'	O
:	O
{	O
const	O
char	O
*	O
zpass	pointer
;	O
char	O
*	O
zcopy	pointer
;	O
size_t	long
clen	long
;	O
if	O
(	O
qsys	pointer
==	O
NULL	O
)	O
{	O
ucsend_debug_end	function
(	O
fquote	int
,	O
TRUE	O
)	O
;	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Illegal use of \\P"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
zpass	pointer
=	O
qsys	pointer
->	O
uuconf_zcall_password	pointer
;	O
if	O
(	O
zpass	pointer
==	O
NULL	O
)	O
{	O
ucsend_debug_end	function
(	O
fquote	int
,	O
TRUE	O
)	O
;	O
ulog	function
(	O
LOG_ERROR	int
,	O
"No password defined"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
zpass	pointer
[	O
0	int
]	O
==	O
'*'	O
&&	O
zpass	pointer
[	O
1	int
]	O
==	O
'\0'	O
)	O
{	O
if	O
(	O
zcallout_pass	pointer
==	O
NULL	O
)	O
{	O
int	O
iuuconf	int
;	O
iuuconf	int
=	O
uuconf_callout	function
(	O
puuconf	pointer
,	O
qsys	pointer
,	O
&	O
zcallout_login	pointer
,	O
&	O
zcallout_pass	pointer
)	O
;	O
if	O
(	O
iuuconf	int
==	O
UUCONF_NOT_FOUND	O
||	O
zcallout_pass	pointer
==	O
NULL	O
)	O
{	O
ucsend_debug_end	function
(	O
fquote	int
,	O
TRUE	O
)	O
;	O
ulog	function
(	O
LOG_ERROR	int
,	O
"No password defined"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
else	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
{	O
ucsend_debug_end	function
(	O
fquote	int
,	O
TRUE	O
)	O
;	O
ulog_uuconf	function
(	O
LOG_ERROR	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
zpass	pointer
=	O
zcallout_pass	pointer
;	O
}	O
zcopy	pointer
=	O
zbufcpy	function
(	O
zpass	pointer
)	O
;	O
clen	long
=	O
cescape	function
(	O
zcopy	pointer
)	O
;	O
fquote	int
=	O
fcsend_debug	function
(	O
fquote	int
,	O
(	O
size_t	long
)	O
0	int
,	O
"password"	pointer
)	O
;	O
fquote	int
=	O
fcsend_debug	function
(	O
fquote	int
,	O
clen	long
,	O
zcopy	pointer
)	O
;	O
if	O
(	O
!	O
(	O
*	O
pfwrite	pointer
)	O
(	O
qconn	pointer
,	O
zcopy	pointer
,	O
clen	long
)	O
)	O
{	O
ubuffree	function
(	O
zcopy	pointer
)	O
;	O
ucsend_debug_end	function
(	O
fquote	int
,	O
TRUE	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
ubuffree	function
(	O
zcopy	pointer
)	O
;	O
}	O
break	O
;	O
case	O
'D'	O
:	O
if	O
(	O
qdial	pointer
==	O
NULL	O
||	O
zphone	pointer
==	O
NULL	O
)	O
{	O
ucsend_debug_end	function
(	O
fquote	int
,	O
TRUE	O
)	O
;	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Illegal use of \\D"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
fquote	int
=	O
fcsend_debug	function
(	O
fquote	int
,	O
(	O
size_t	long
)	O
0	int
,	O
"\\D"	pointer
)	O
;	O
if	O
(	O
!	O
fcphone	function
(	O
qconn	pointer
,	O
puuconf	pointer
,	O
qdial	pointer
,	O
zphone	pointer
,	O
pfwrite	pointer
,	O
ftranslate	int
,	O
&	O
fquote	int
)	O
)	O
{	O
ucsend_debug_end	function
(	O
fquote	int
,	O
TRUE	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
break	O
;	O
case	O
'T'	O
:	O
if	O
(	O
qdial	pointer
==	O
NULL	O
||	O
zphone	pointer
==	O
NULL	O
)	O
{	O
ucsend_debug_end	function
(	O
fquote	int
,	O
TRUE	O
)	O
;	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Illegal use of \\T"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
fquote	int
=	O
fcsend_debug	function
(	O
fquote	int
,	O
(	O
size_t	long
)	O
0	int
,	O
"\\T"	pointer
)	O
;	O
if	O
(	O
!	O
fcphone	function
(	O
qconn	pointer
,	O
puuconf	pointer
,	O
qdial	pointer
,	O
zphone	pointer
,	O
pfwrite	pointer
,	O
TRUE	O
,	O
&	O
fquote	int
)	O
)	O
{	O
ucsend_debug_end	function
(	O
fquote	int
,	O
TRUE	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
break	O
;	O
case	O
'M'	O
:	O
fquote	int
=	O
fcsend_debug	function
(	O
fquote	int
,	O
(	O
size_t	long
)	O
0	int
,	O
"ignore-carrier"	pointer
)	O
;	O
if	O
(	O
!	O
fconn_carrier	function
(	O
qconn	pointer
,	O
FALSE	O
)	O
)	O
{	O
ucsend_debug_end	function
(	O
fquote	int
,	O
TRUE	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
break	O
;	O
case	O
'm'	O
:	O
if	O
(	O
qdial	pointer
==	O
NULL	O
||	O
qdial	pointer
->	O
uuconf_fcarrier	int
)	O
{	O
fquote	int
=	O
fcsend_debug	function
(	O
fquote	int
,	O
(	O
size_t	long
)	O
0	int
,	O
"need-carrier"	pointer
)	O
;	O
if	O
(	O
!	O
fconn_carrier	function
(	O
qconn	pointer
,	O
TRUE	O
)	O
)	O
{	O
ucsend_debug_end	function
(	O
fquote	int
,	O
TRUE	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
break	O
;	O
default	O
:	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Unrecognized escape sequence \\%c in send string"	pointer
,	O
*	O
z	pointer
)	O
;	O
fsend	int
=	O
TRUE	O
;	O
bsend	char
=	O
*	O
z	pointer
;	O
break	O
;	O
}	O
++	O
z	pointer
;	O
break	O
;	O
default	O
:	O
ulog	function
(	O
LOG_FATAL	int
,	O
"fcsend: Can't happen"	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
fsend	int
)	O
{	O
fquote	int
=	O
fcsend_debug	function
(	O
fquote	int
,	O
(	O
size_t	long
)	O
1	int
,	O
&	O
bsend	char
)	O
;	O
if	O
(	O
!	O
(	O
*	O
pfwrite	pointer
)	O
(	O
qconn	pointer
,	O
&	O
bsend	char
,	O
(	O
size_t	long
)	O
1	int
)	O
)	O
{	O
ucsend_debug_end	function
(	O
fquote	int
,	O
TRUE	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
}	O
xfree	function
(	O
(	O
pointer	pointer
)	O
zcallout_login	pointer
)	O
;	O
xfree	function
(	O
(	O
pointer	pointer
)	O
zcallout_pass	pointer
)	O
;	O
if	O
(	O
!	O
fnocr	int
)	O
{	O
char	O
b	char
;	O
b	char
=	O
'\r'	O
;	O
fquote	int
=	O
fcsend_debug	function
(	O
fquote	int
,	O
(	O
size_t	long
)	O
1	int
,	O
&	O
b	char
)	O
;	O
if	O
(	O
!	O
fconn_write	function
(	O
qconn	pointer
,	O
&	O
b	char
,	O
(	O
size_t	long
)	O
1	int
)	O
)	O
{	O
ucsend_debug_end	function
(	O
fquote	int
,	O
TRUE	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
ucsend_debug_end	function
(	O
fquote	int
,	O
FALSE	O
)	O
;	O
return	O
TRUE	O
;	O
}	O
static	O
boolean	int
fcphone	function
(	O
qconn	pointer
,	O
puuconf	pointer
,	O
qdial	pointer
,	O
zphone	pointer
,	O
pfwrite	pointer
,	O
ftranslate	int
,	O
pfquote	pointer
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
pointer	pointer
puuconf	pointer
;	O
const	O
struct	O
uuconf_dialer	struct
*	O
qdial	pointer
;	O
const	O
char	O
*	O
zphone	pointer
;	O
boolean	int
(	O
*	O
pfwrite	pointer
)	O
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qc	pointer
,	O
const	O
char	O
*	O
zwrite	pointer
,	O
size_t	long
cwrite	long
)	O
)	O
;	O
boolean	int
ftranslate	int
;	O
boolean	int
*	O
pfquote	pointer
;	O
{	O
const	O
char	O
*	O
zprefix	pointer
,	O
*	O
zsuffix	pointer
;	O
if	O
(	O
ftranslate	int
)	O
{	O
if	O
(	O
!	O
fctranslate	function
(	O
puuconf	pointer
,	O
zphone	pointer
,	O
&	O
zprefix	pointer
,	O
&	O
zsuffix	pointer
)	O
)	O
return	O
FALSE	O
;	O
}	O
else	O
{	O
zprefix	pointer
=	O
zphone	pointer
;	O
zsuffix	pointer
=	O
NULL	O
;	O
}	O
while	O
(	O
zprefix	pointer
!=	O
NULL	O
)	O
{	O
while	O
(	O
TRUE	O
)	O
{	O
const	O
char	O
*	O
z	pointer
;	O
const	O
char	O
*	O
zstr	pointer
;	O
z	pointer
=	O
zprefix	pointer
+	O
strcspn	function
(	O
(	O
char	O
*	O
)	O
zprefix	pointer
,	O
"=-"	pointer
)	O
;	O
if	O
(	O
z	pointer
>	O
zprefix	pointer
)	O
{	O
size_t	long
clen	long
;	O
clen	long
=	O
z	pointer
-	O
zprefix	pointer
;	O
*	O
pfquote	pointer
=	O
fcsend_debug	function
(	O
*	O
pfquote	pointer
,	O
clen	long
,	O
zprefix	pointer
)	O
;	O
if	O
(	O
!	O
(	O
*	O
pfwrite	pointer
)	O
(	O
qconn	pointer
,	O
zprefix	pointer
,	O
clen	long
)	O
)	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
*	O
z	pointer
==	O
'='	O
)	O
zstr	pointer
=	O
qdial	pointer
->	O
uuconf_zdialtone	pointer
;	O
else	O
if	O
(	O
*	O
z	pointer
==	O
'-'	O
)	O
zstr	pointer
=	O
qdial	pointer
->	O
uuconf_zpause	pointer
;	O
else	O
break	O
;	O
if	O
(	O
zstr	pointer
!=	O
NULL	O
)	O
{	O
*	O
pfquote	pointer
=	O
fcsend_debug	function
(	O
*	O
pfquote	pointer
,	O
strlen	function
(	O
zstr	pointer
)	O
,	O
zstr	pointer
)	O
;	O
if	O
(	O
!	O
(	O
*	O
pfwrite	pointer
)	O
(	O
qconn	pointer
,	O
zstr	pointer
,	O
strlen	function
(	O
zstr	pointer
)	O
)	O
)	O
return	O
FALSE	O
;	O
}	O
zprefix	pointer
=	O
z	pointer
+	O
1	int
;	O
}	O
zprefix	pointer
=	O
zsuffix	pointer
;	O
zsuffix	pointer
=	O
NULL	O
;	O
}	O
return	O
TRUE	O
;	O
}	O
static	O
boolean	int
fctranslate	function
(	O
puuconf	pointer
,	O
zphone	pointer
,	O
pzprefix	pointer
,	O
pzsuffix	pointer
)	O
pointer	pointer
puuconf	pointer
;	O
const	O
char	O
*	O
zphone	pointer
;	O
const	O
char	O
*	O
*	O
pzprefix	pointer
;	O
const	O
char	O
*	O
*	O
pzsuffix	pointer
;	O
{	O
int	O
iuuconf	int
;	O
char	O
*	O
zdialcode	pointer
,	O
*	O
zto	pointer
;	O
const	O
char	O
*	O
zfrom	pointer
;	O
char	O
*	O
ztrans	pointer
;	O
*	O
pzprefix	pointer
=	O
zphone	pointer
;	O
*	O
pzsuffix	pointer
=	O
NULL	O
;	O
zdialcode	pointer
=	O
zbufalc	function
(	O
strlen	function
(	O
zphone	pointer
)	O
+	O
1	int
)	O
;	O
zfrom	pointer
=	O
zphone	pointer
;	O
zto	pointer
=	O
zdialcode	pointer
;	O
while	O
(	O
*	O
zfrom	pointer
!=	O
'\0'	O
&&	O
isalpha	function
(	O
BUCHAR	O
(	O
*	O
zfrom	pointer
)	O
)	O
)	O
*	O
zto	pointer
++	O
=	O
*	O
zfrom	pointer
++	O
;	O
*	O
zto	pointer
=	O
'\0'	O
;	O
if	O
(	O
*	O
zdialcode	pointer
==	O
'\0'	O
)	O
{	O
ubuffree	function
(	O
zdialcode	pointer
)	O
;	O
return	O
TRUE	O
;	O
}	O
iuuconf	int
=	O
uuconf_dialcode	function
(	O
puuconf	pointer
,	O
zdialcode	pointer
,	O
&	O
ztrans	pointer
)	O
;	O
ubuffree	function
(	O
zdialcode	pointer
)	O
;	O
if	O
(	O
iuuconf	int
==	O
UUCONF_NOT_FOUND	O
)	O
return	O
TRUE	O
;	O
else	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
{	O
ulog_uuconf	function
(	O
LOG_ERROR	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
return	O
FALSE	O
;	O
}	O
else	O
{	O
*	O
pzprefix	pointer
=	O
ztrans	pointer
;	O
*	O
pzsuffix	pointer
=	O
zfrom	pointer
;	O
return	O
TRUE	O
;	O
}	O
}	O
static	O
boolean	int
fcecho_send_strip	function
(	O
qconn	pointer
,	O
zwrite	pointer
,	O
cwrite	long
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
const	O
char	O
*	O
zwrite	pointer
;	O
size_t	long
cwrite	long
;	O
{	O
return	O
fcecho_send	function
(	O
qconn	pointer
,	O
zwrite	pointer
,	O
cwrite	long
,	O
TRUE	O
)	O
;	O
}	O
static	O
boolean	int
fcecho_send_nostrip	function
(	O
qconn	pointer
,	O
zwrite	pointer
,	O
cwrite	long
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
const	O
char	O
*	O
zwrite	pointer
;	O
size_t	long
cwrite	long
;	O
{	O
return	O
fcecho_send	function
(	O
qconn	pointer
,	O
zwrite	pointer
,	O
cwrite	long
,	O
FALSE	O
)	O
;	O
}	O
static	O
boolean	int
fcecho_send	function
(	O
qconn	pointer
,	O
zwrite	pointer
,	O
cwrite	long
,	O
fstrip	int
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
const	O
char	O
*	O
zwrite	pointer
;	O
size_t	long
cwrite	long
;	O
boolean	int
fstrip	int
;	O
{	O
const	O
char	O
*	O
zend	pointer
;	O
zend	pointer
=	O
zwrite	pointer
+	O
cwrite	long
;	O
for	O
(	O
;	O
zwrite	pointer
<	O
zend	pointer
;	O
zwrite	pointer
++	O
)	O
{	O
int	O
b	char
;	O
char	O
bwrite	char
;	O
bwrite	char
=	O
*	O
zwrite	pointer
;	O
if	O
(	O
!	O
fconn_write	function
(	O
qconn	pointer
,	O
&	O
bwrite	char
,	O
(	O
size_t	long
)	O
1	int
)	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
fstrip	int
)	O
bwrite	char
&=	O
0x7f	int
;	O
do	O
{	O
b	char
=	O
breceive_char	function
(	O
qconn	pointer
,	O
5	int
,	O
TRUE	O
)	O
;	O
if	O
(	O
b	char
<	O
0	int
)	O
{	O
if	O
(	O
b	char
==	O
-	O
1	int
)	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Character not echoed"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
fstrip	int
)	O
b	char
&=	O
0x7f	int
;	O
}	O
while	O
(	O
b	char
!=	O
BUCHAR	O
(	O
bwrite	char
)	O
)	O
;	O
}	O
return	O
TRUE	O
;	O
}	O
static	O
boolean	int
fcprogram	function
(	O
qconn	pointer
,	O
puuconf	pointer
,	O
pzprogram	pointer
,	O
qsys	pointer
,	O
qdial	pointer
,	O
zphone	pointer
,	O
zport	pointer
,	O
ibaud	long
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
pointer	pointer
puuconf	pointer
;	O
char	O
*	O
*	O
pzprogram	pointer
;	O
const	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
;	O
const	O
struct	O
uuconf_dialer	struct
*	O
qdial	pointer
;	O
const	O
char	O
*	O
zphone	pointer
;	O
const	O
char	O
*	O
zport	pointer
;	O
long	O
ibaud	long
;	O
{	O
size_t	long
cargs	long
;	O
char	O
*	O
*	O
pzpass	pointer
,	O
*	O
*	O
pzarg	pointer
;	O
char	O
*	O
*	O
pz	pointer
;	O
char	O
*	O
zcallout_login	pointer
;	O
char	O
*	O
zcallout_pass	pointer
;	O
boolean	int
fret	int
;	O
cargs	long
=	O
1	int
;	O
for	O
(	O
pz	pointer
=	O
pzprogram	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
++	O
cargs	long
;	O
pzpass	pointer
=	O
(	O
char	O
*	O
*	O
)	O
xmalloc	function
(	O
cargs	long
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
zcallout_login	pointer
=	O
NULL	O
;	O
zcallout_pass	pointer
=	O
NULL	O
;	O
fret	int
=	O
TRUE	O
;	O
for	O
(	O
pz	pointer
=	O
pzprogram	pointer
,	O
pzarg	pointer
=	O
pzpass	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
,	O
pzarg	pointer
++	O
)	O
{	O
const	O
char	O
*	O
zfrom	pointer
;	O
size_t	long
calc	long
,	O
clen	long
;	O
char	O
*	O
zto	pointer
;	O
if	O
(	O
strchr	function
(	O
*	O
pz	pointer
,	O
'\\'	O
)	O
==	O
NULL	O
)	O
{	O
*	O
pzarg	pointer
=	O
zbufcpy	function
(	O
*	O
pz	pointer
)	O
;	O
continue	O
;	O
}	O
*	O
pzarg	pointer
=	O
NULL	O
;	O
zto	pointer
=	O
NULL	O
;	O
calc	long
=	O
0	int
;	O
clen	long
=	O
0	int
;	O
for	O
(	O
zfrom	pointer
=	O
*	O
pz	pointer
;	O
*	O
zfrom	pointer
!=	O
'\0'	O
;	O
zfrom	pointer
++	O
)	O
{	O
const	O
char	O
*	O
zadd	pointer
=	O
NULL	O
;	O
char	O
*	O
zfree	pointer
=	O
NULL	O
;	O
size_t	long
cadd	long
;	O
char	O
abadd	array
[	O
15	int
]	O
;	O
if	O
(	O
*	O
zfrom	pointer
!=	O
'\\'	O
)	O
{	O
if	O
(	O
clen	long
+	O
2	int
>	O
calc	long
)	O
{	O
char	O
*	O
znew	pointer
;	O
calc	long
=	O
clen	long
+	O
50	int
;	O
znew	pointer
=	O
zbufalc	function
(	O
calc	long
)	O
;	O
memcpy	function
(	O
znew	pointer
,	O
*	O
pzarg	pointer
,	O
clen	long
)	O
;	O
ubuffree	function
(	O
*	O
pzarg	pointer
)	O
;	O
*	O
pzarg	pointer
=	O
znew	pointer
;	O
zto	pointer
=	O
znew	pointer
+	O
clen	long
;	O
}	O
*	O
zto	pointer
++	O
=	O
*	O
zfrom	pointer
;	O
++	O
clen	long
;	O
continue	O
;	O
}	O
++	O
zfrom	pointer
;	O
switch	O
(	O
*	O
zfrom	pointer
)	O
{	O
case	O
'\0'	O
:	O
--	O
zfrom	pointer
;	O
case	O
'\\'	O
:	O
zadd	pointer
=	O
"\\"	pointer
;	O
break	O
;	O
case	O
'L'	O
:	O
{	O
const	O
char	O
*	O
zlog	pointer
;	O
if	O
(	O
qsys	pointer
==	O
NULL	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"chat-program: Illegal use of \\L"	pointer
)	O
;	O
fret	int
=	O
FALSE	O
;	O
break	O
;	O
}	O
zlog	pointer
=	O
qsys	pointer
->	O
uuconf_zcall_login	pointer
;	O
if	O
(	O
zlog	pointer
==	O
NULL	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"chat-program: No login defined"	pointer
)	O
;	O
fret	int
=	O
FALSE	O
;	O
break	O
;	O
}	O
if	O
(	O
zlog	pointer
[	O
0	int
]	O
==	O
'*'	O
&&	O
zlog	pointer
[	O
1	int
]	O
==	O
'\0'	O
)	O
{	O
if	O
(	O
zcallout_login	pointer
==	O
NULL	O
)	O
{	O
int	O
iuuconf	int
;	O
iuuconf	int
=	O
uuconf_callout	function
(	O
puuconf	pointer
,	O
qsys	pointer
,	O
&	O
zcallout_login	pointer
,	O
&	O
zcallout_pass	pointer
)	O
;	O
if	O
(	O
iuuconf	int
==	O
UUCONF_NOT_FOUND	O
||	O
zcallout_login	pointer
==	O
NULL	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"chat-program: No login defined"	pointer
)	O
;	O
fret	int
=	O
FALSE	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
{	O
ulog_uuconf	function
(	O
LOG_ERROR	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
fret	int
=	O
FALSE	O
;	O
break	O
;	O
}	O
}	O
zlog	pointer
=	O
zcallout_login	pointer
;	O
}	O
zfree	pointer
=	O
zbufcpy	function
(	O
zlog	pointer
)	O
;	O
(	O
void	O
)	O
cescape	function
(	O
zfree	pointer
)	O
;	O
zadd	pointer
=	O
zfree	pointer
;	O
}	O
break	O
;	O
case	O
'P'	O
:	O
{	O
const	O
char	O
*	O
zpass	pointer
;	O
if	O
(	O
qsys	pointer
==	O
NULL	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"chat-program: Illegal use of \\P"	pointer
)	O
;	O
fret	int
=	O
FALSE	O
;	O
break	O
;	O
}	O
zpass	pointer
=	O
qsys	pointer
->	O
uuconf_zcall_password	pointer
;	O
if	O
(	O
zpass	pointer
==	O
NULL	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"chat-program: No password defined"	pointer
)	O
;	O
fret	int
=	O
FALSE	O
;	O
break	O
;	O
}	O
if	O
(	O
zpass	pointer
[	O
0	int
]	O
==	O
'*'	O
&&	O
zpass	pointer
[	O
1	int
]	O
==	O
'\0'	O
)	O
{	O
if	O
(	O
zcallout_pass	pointer
==	O
NULL	O
)	O
{	O
int	O
iuuconf	int
;	O
iuuconf	int
=	O
uuconf_callout	function
(	O
puuconf	pointer
,	O
qsys	pointer
,	O
&	O
zcallout_login	pointer
,	O
&	O
zcallout_pass	pointer
)	O
;	O
if	O
(	O
iuuconf	int
==	O
UUCONF_NOT_FOUND	O
||	O
zcallout_pass	pointer
==	O
NULL	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"chat-program: No password defined"	pointer
)	O
;	O
fret	int
=	O
FALSE	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
{	O
ulog_uuconf	function
(	O
LOG_ERROR	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
fret	int
=	O
FALSE	O
;	O
break	O
;	O
}	O
}	O
zpass	pointer
=	O
zcallout_pass	pointer
;	O
}	O
zfree	pointer
=	O
zbufcpy	function
(	O
zpass	pointer
)	O
;	O
(	O
void	O
)	O
cescape	function
(	O
zfree	pointer
)	O
;	O
zadd	pointer
=	O
zfree	pointer
;	O
}	O
break	O
;	O
case	O
'D'	O
:	O
if	O
(	O
qdial	pointer
==	O
NULL	O
||	O
zphone	pointer
==	O
NULL	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"chat-program: Illegal use of \\D"	pointer
)	O
;	O
fret	int
=	O
FALSE	O
;	O
break	O
;	O
}	O
zadd	pointer
=	O
zphone	pointer
;	O
break	O
;	O
case	O
'T'	O
:	O
{	O
const	O
char	O
*	O
zprefix	pointer
,	O
*	O
zsuffix	pointer
;	O
if	O
(	O
qdial	pointer
==	O
NULL	O
||	O
zphone	pointer
==	O
NULL	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"chat-program: Illegal use of \\T"	pointer
)	O
;	O
fret	int
=	O
FALSE	O
;	O
break	O
;	O
}	O
if	O
(	O
!	O
fctranslate	function
(	O
puuconf	pointer
,	O
zphone	pointer
,	O
&	O
zprefix	pointer
,	O
&	O
zsuffix	pointer
)	O
)	O
{	O
fret	int
=	O
FALSE	O
;	O
break	O
;	O
}	O
if	O
(	O
zsuffix	pointer
==	O
NULL	O
)	O
zadd	pointer
=	O
zprefix	pointer
;	O
else	O
{	O
size_t	long
cprefix	long
;	O
cprefix	long
=	O
strlen	function
(	O
zprefix	pointer
)	O
;	O
if	O
(	O
clen	long
+	O
cprefix	long
+	O
1	int
>	O
calc	long
)	O
{	O
char	O
*	O
znew	pointer
;	O
calc	long
=	O
clen	long
+	O
cprefix	long
+	O
20	int
;	O
znew	pointer
=	O
zbufalc	function
(	O
calc	long
)	O
;	O
memcpy	function
(	O
znew	pointer
,	O
*	O
pzarg	pointer
,	O
clen	long
)	O
;	O
ubuffree	function
(	O
*	O
pzarg	pointer
)	O
;	O
*	O
pzarg	pointer
=	O
znew	pointer
;	O
zto	pointer
=	O
znew	pointer
+	O
clen	long
;	O
}	O
memcpy	function
(	O
zto	pointer
,	O
zprefix	pointer
,	O
cprefix	long
)	O
;	O
zto	pointer
+=	O
cprefix	long
;	O
clen	long
+=	O
cprefix	long
;	O
zadd	pointer
=	O
zsuffix	pointer
;	O
}	O
}	O
break	O
;	O
case	O
'Y'	O
:	O
if	O
(	O
zLdevice	pointer
==	O
NULL	O
&&	O
zport	pointer
==	O
NULL	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"chat-program: Illegal use of \\Y"	pointer
)	O
;	O
fret	int
=	O
FALSE	O
;	O
break	O
;	O
}	O
zadd	pointer
=	O
zLdevice	pointer
;	O
if	O
(	O
zadd	pointer
==	O
NULL	O
)	O
zadd	pointer
=	O
zport	pointer
;	O
break	O
;	O
case	O
'Z'	O
:	O
if	O
(	O
qsys	pointer
==	O
NULL	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"chat-program: Illegal use of \\Z"	pointer
)	O
;	O
fret	int
=	O
FALSE	O
;	O
break	O
;	O
}	O
zadd	pointer
=	O
qsys	pointer
->	O
uuconf_zname	pointer
;	O
break	O
;	O
case	O
'S'	O
:	O
{	O
if	O
(	O
ibaud	long
==	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"chat-program: Illegal use of \\S"	pointer
)	O
;	O
fret	int
=	O
FALSE	O
;	O
break	O
;	O
}	O
sprintf	function
(	O
abadd	array
,	O
"%ld"	pointer
,	O
ibaud	long
)	O
;	O
zadd	pointer
=	O
abadd	array
;	O
}	O
break	O
;	O
default	O
:	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"chat-program: Unrecognized escape sequence \\%c"	pointer
,	O
*	O
zfrom	pointer
)	O
;	O
abadd	array
[	O
0	int
]	O
=	O
*	O
zfrom	pointer
;	O
abadd	array
[	O
1	int
]	O
=	O
'\0'	O
;	O
zadd	pointer
=	O
abadd	array
;	O
}	O
break	O
;	O
}	O
if	O
(	O
!	O
fret	int
)	O
break	O
;	O
cadd	long
=	O
strlen	function
(	O
zadd	pointer
)	O
;	O
if	O
(	O
clen	long
+	O
cadd	long
+	O
1	int
>	O
calc	long
)	O
{	O
char	O
*	O
znew	pointer
;	O
calc	long
=	O
clen	long
+	O
cadd	long
+	O
20	int
;	O
znew	pointer
=	O
zbufalc	function
(	O
calc	long
)	O
;	O
memcpy	function
(	O
znew	pointer
,	O
*	O
pzarg	pointer
,	O
clen	long
)	O
;	O
ubuffree	function
(	O
*	O
pzarg	pointer
)	O
;	O
*	O
pzarg	pointer
=	O
znew	pointer
;	O
zto	pointer
=	O
znew	pointer
+	O
clen	long
;	O
}	O
memcpy	function
(	O
zto	pointer
,	O
zadd	pointer
,	O
cadd	long
+	O
1	int
)	O
;	O
zto	pointer
+=	O
cadd	long
;	O
clen	long
+=	O
cadd	long
;	O
ubuffree	function
(	O
zfree	pointer
)	O
;	O
}	O
if	O
(	O
!	O
fret	int
)	O
break	O
;	O
*	O
zto	pointer
++	O
=	O
'\0'	O
;	O
++	O
clen	long
;	O
}	O
*	O
pzarg	pointer
=	O
NULL	O
;	O
if	O
(	O
fret	int
)	O
fret	int
=	O
fconn_run_chat	function
(	O
qconn	pointer
,	O
pzpass	pointer
)	O
;	O
for	O
(	O
pz	pointer
=	O
pzpass	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
ubuffree	function
(	O
*	O
pz	pointer
)	O
;	O
xfree	function
(	O
(	O
pointer	pointer
)	O
pzpass	pointer
)	O
;	O
xfree	function
(	O
(	O
pointer	pointer
)	O
zcallout_login	pointer
)	O
;	O
xfree	function
(	O
(	O
pointer	pointer
)	O
zcallout_pass	pointer
)	O
;	O
return	O
fret	int
;	O
}	O
