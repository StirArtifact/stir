struct	O
string_hash_entry	struct
{	O
struct	O
bfd_hash_entry	struct
root	struct
;	O
struct	O
string_hash_entry	struct
*	O
next	pointer
;	O
long	O
index	function
;	O
unsigned	O
int	O
size	int
;	O
}	O
;	O
struct	O
string_hash_table	struct
{	O
struct	O
bfd_hash_table	struct
table	pointer
;	O
}	O
;	O
struct	O
stab_type_stack	struct
{	O
struct	O
stab_type_stack	struct
*	O
next	pointer
;	O
char	O
*	O
string	pointer
;	O
long	O
index	function
;	O
unsigned	O
int	O
size	int
;	O
bfd_boolean	int
definition	int
;	O
char	O
*	O
fields	pointer
;	O
char	O
*	O
*	O
baseclasses	pointer
;	O
char	O
*	O
methods	pointer
;	O
char	O
*	O
vtable	pointer
;	O
}	O
;	O
struct	O
stab_tag	struct
{	O
long	O
index	function
;	O
const	O
char	O
*	O
tag	pointer
;	O
enum	O
debug_type_kind	enum
kind	enum
;	O
unsigned	O
int	O
size	int
;	O
}	O
;	O
struct	O
stab_type_cache	struct
{	O
long	O
void_type	pointer
;	O
long	O
signed_integer_types	array
[	O
8	int
]	O
;	O
long	O
unsigned_integer_types	array
[	O
8	int
]	O
;	O
long	O
float_types	array
[	O
16	int
]	O
;	O
long	O
*	O
pointer_types	pointer
;	O
size_t	long
pointer_types_alloc	long
;	O
long	O
*	O
function_types	pointer
;	O
size_t	long
function_types_alloc	long
;	O
long	O
*	O
reference_types	pointer
;	O
size_t	long
reference_types_alloc	long
;	O
struct	O
stab_tag	struct
*	O
struct_types	pointer
;	O
size_t	long
struct_types_alloc	long
;	O
}	O
;	O
struct	O
stab_write_handle	struct
{	O
bfd	struct
*	O
abfd	pointer
;	O
bfd_byte	char
*	O
symbols	pointer
;	O
size_t	long
symbols_size	long
;	O
size_t	long
symbols_alloc	long
;	O
struct	O
string_hash_entry	struct
*	O
strings	pointer
;	O
struct	O
string_hash_entry	struct
*	O
last_string	pointer
;	O
size_t	long
strings_size	long
;	O
struct	O
string_hash_table	struct
strhash	struct
;	O
struct	O
stab_type_stack	struct
*	O
type_stack	pointer
;	O
long	O
type_index	long
;	O
struct	O
stab_type_cache	struct
type_cache	struct
;	O
struct	O
string_hash_table	struct
typedef_hash	struct
;	O
long	O
so_offset	long
;	O
long	O
fun_offset	long
;	O
bfd_vma	long
last_text_address	long
;	O
unsigned	O
int	O
nesting	int
;	O
bfd_vma	long
fnaddr	long
;	O
bfd_vma	long
pending_lbrac	long
;	O
const	O
char	O
*	O
lineno_filename	pointer
;	O
}	O
;	O
static	O
struct	O
bfd_hash_entry	struct
*	O
string_hash_newfunc	function
(	O
struct	O
bfd_hash_entry	struct
*	O
,	O
struct	O
bfd_hash_table	struct
*	O
,	O
const	O
char	O
*	O
)	O
;	O
static	O
bfd_boolean	int
stab_write_symbol	function
(	O
struct	O
stab_write_handle	struct
*	O
,	O
int	O
,	O
int	O
,	O
bfd_vma	long
,	O
const	O
char	O
*	O
)	O
;	O
static	O
bfd_boolean	int
stab_push_string	function
(	O
struct	O
stab_write_handle	struct
*	O
,	O
const	O
char	O
*	O
,	O
long	O
,	O
bfd_boolean	int
,	O
unsigned	O
int	O
)	O
;	O
static	O
bfd_boolean	int
stab_push_defined_type	function
(	O
struct	O
stab_write_handle	struct
*	O
,	O
long	O
,	O
unsigned	O
int	O
)	O
;	O
static	O
char	O
*	O
stab_pop_type	function
(	O
struct	O
stab_write_handle	struct
*	O
)	O
;	O
static	O
bfd_boolean	int
stab_modify_type	function
(	O
struct	O
stab_write_handle	struct
*	O
,	O
int	O
,	O
unsigned	O
int	O
,	O
long	O
*	O
*	O
,	O
size_t	long
*	O
)	O
;	O
static	O
long	O
stab_get_struct_index	function
(	O
struct	O
stab_write_handle	struct
*	O
,	O
const	O
char	O
*	O
,	O
unsigned	O
int	O
,	O
enum	O
debug_type_kind	enum
,	O
unsigned	O
int	O
*	O
)	O
;	O
static	O
bfd_boolean	int
stab_class_method_var	function
(	O
struct	O
stab_write_handle	struct
*	O
,	O
const	O
char	O
*	O
,	O
enum	O
debug_visibility	enum
,	O
bfd_boolean	int
,	O
bfd_boolean	int
,	O
bfd_boolean	int
,	O
bfd_vma	long
,	O
bfd_boolean	int
)	O
;	O
static	O
bfd_boolean	int
stab_start_compilation_unit	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
)	O
;	O
static	O
bfd_boolean	int
stab_start_source	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
)	O
;	O
static	O
bfd_boolean	int
stab_empty_type	function
(	O
void	O
*	O
)	O
;	O
static	O
bfd_boolean	int
stab_void_type	function
(	O
void	O
*	O
)	O
;	O
static	O
bfd_boolean	int
stab_int_type	function
(	O
void	O
*	O
,	O
unsigned	O
int	O
,	O
bfd_boolean	int
)	O
;	O
static	O
bfd_boolean	int
stab_float_type	function
(	O
void	O
*	O
,	O
unsigned	O
int	O
)	O
;	O
static	O
bfd_boolean	int
stab_complex_type	function
(	O
void	O
*	O
,	O
unsigned	O
int	O
)	O
;	O
static	O
bfd_boolean	int
stab_bool_type	function
(	O
void	O
*	O
,	O
unsigned	O
int	O
)	O
;	O
static	O
bfd_boolean	int
stab_enum_type	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
const	O
char	O
*	O
*	O
,	O
bfd_signed_vma	long
*	O
)	O
;	O
static	O
bfd_boolean	int
stab_pointer_type	function
(	O
void	O
*	O
)	O
;	O
static	O
bfd_boolean	int
stab_function_type	function
(	O
void	O
*	O
,	O
int	O
,	O
bfd_boolean	int
)	O
;	O
static	O
bfd_boolean	int
stab_reference_type	function
(	O
void	O
*	O
)	O
;	O
static	O
bfd_boolean	int
stab_range_type	function
(	O
void	O
*	O
,	O
bfd_signed_vma	long
,	O
bfd_signed_vma	long
)	O
;	O
static	O
bfd_boolean	int
stab_array_type	function
(	O
void	O
*	O
,	O
bfd_signed_vma	long
,	O
bfd_signed_vma	long
,	O
bfd_boolean	int
)	O
;	O
static	O
bfd_boolean	int
stab_set_type	function
(	O
void	O
*	O
,	O
bfd_boolean	int
)	O
;	O
static	O
bfd_boolean	int
stab_offset_type	function
(	O
void	O
*	O
)	O
;	O
static	O
bfd_boolean	int
stab_method_type	function
(	O
void	O
*	O
,	O
bfd_boolean	int
,	O
int	O
,	O
bfd_boolean	int
)	O
;	O
static	O
bfd_boolean	int
stab_const_type	function
(	O
void	O
*	O
)	O
;	O
static	O
bfd_boolean	int
stab_volatile_type	function
(	O
void	O
*	O
)	O
;	O
static	O
bfd_boolean	int
stab_start_struct_type	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
unsigned	O
int	O
,	O
bfd_boolean	int
,	O
unsigned	O
int	O
)	O
;	O
static	O
bfd_boolean	int
stab_struct_field	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
bfd_vma	long
,	O
bfd_vma	long
,	O
enum	O
debug_visibility	enum
)	O
;	O
static	O
bfd_boolean	int
stab_end_struct_type	function
(	O
void	O
*	O
)	O
;	O
static	O
bfd_boolean	int
stab_start_class_type	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
unsigned	O
int	O
,	O
bfd_boolean	int
,	O
unsigned	O
int	O
,	O
bfd_boolean	int
,	O
bfd_boolean	int
)	O
;	O
static	O
bfd_boolean	int
stab_class_static_member	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
const	O
char	O
*	O
,	O
enum	O
debug_visibility	enum
)	O
;	O
static	O
bfd_boolean	int
stab_class_baseclass	function
(	O
void	O
*	O
,	O
bfd_vma	long
,	O
bfd_boolean	int
,	O
enum	O
debug_visibility	enum
)	O
;	O
static	O
bfd_boolean	int
stab_class_start_method	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
)	O
;	O
static	O
bfd_boolean	int
stab_class_method_variant	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
enum	O
debug_visibility	enum
,	O
bfd_boolean	int
,	O
bfd_boolean	int
,	O
bfd_vma	long
,	O
bfd_boolean	int
)	O
;	O
static	O
bfd_boolean	int
stab_class_static_method_variant	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
enum	O
debug_visibility	enum
,	O
bfd_boolean	int
,	O
bfd_boolean	int
)	O
;	O
static	O
bfd_boolean	int
stab_class_end_method	function
(	O
void	O
*	O
)	O
;	O
static	O
bfd_boolean	int
stab_end_class_type	function
(	O
void	O
*	O
)	O
;	O
static	O
bfd_boolean	int
stab_typedef_type	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
)	O
;	O
static	O
bfd_boolean	int
stab_tag_type	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
unsigned	O
int	O
,	O
enum	O
debug_type_kind	enum
)	O
;	O
static	O
bfd_boolean	int
stab_typdef	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
)	O
;	O
static	O
bfd_boolean	int
stab_tag	struct
(	O
void	O
*	O
,	O
const	O
char	O
*	O
)	O
;	O
static	O
bfd_boolean	int
stab_int_constant	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
bfd_vma	long
)	O
;	O
static	O
bfd_boolean	int
stab_float_constant	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
double	O
)	O
;	O
static	O
bfd_boolean	int
stab_typed_constant	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
bfd_vma	long
)	O
;	O
static	O
bfd_boolean	int
stab_variable	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
enum	O
debug_var_kind	enum
,	O
bfd_vma	long
)	O
;	O
static	O
bfd_boolean	int
stab_start_function	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
bfd_boolean	int
)	O
;	O
static	O
bfd_boolean	int
stab_function_parameter	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
enum	O
debug_parm_kind	enum
,	O
bfd_vma	long
)	O
;	O
static	O
bfd_boolean	int
stab_start_block	function
(	O
void	O
*	O
,	O
bfd_vma	long
)	O
;	O
static	O
bfd_boolean	int
stab_end_block	function
(	O
void	O
*	O
,	O
bfd_vma	long
)	O
;	O
static	O
bfd_boolean	int
stab_end_function	function
(	O
void	O
*	O
)	O
;	O
static	O
bfd_boolean	int
stab_lineno	function
(	O
void	O
*	O
,	O
const	O
char	O
*	O
,	O
unsigned	O
long	O
,	O
bfd_vma	long
)	O
;	O
static	O
const	O
struct	O
debug_write_fns	struct
stab_fns	struct
=	O
{	O
stab_start_compilation_unit	function
,	O
stab_start_source	function
,	O
stab_empty_type	function
,	O
stab_void_type	function
,	O
stab_int_type	function
,	O
stab_float_type	function
,	O
stab_complex_type	function
,	O
stab_bool_type	function
,	O
stab_enum_type	function
,	O
stab_pointer_type	function
,	O
stab_function_type	function
,	O
stab_reference_type	function
,	O
stab_range_type	function
,	O
stab_array_type	function
,	O
stab_set_type	function
,	O
stab_offset_type	function
,	O
stab_method_type	function
,	O
stab_const_type	function
,	O
stab_volatile_type	function
,	O
stab_start_struct_type	function
,	O
stab_struct_field	function
,	O
stab_end_struct_type	function
,	O
stab_start_class_type	function
,	O
stab_class_static_member	function
,	O
stab_class_baseclass	function
,	O
stab_class_start_method	function
,	O
stab_class_method_variant	function
,	O
stab_class_static_method_variant	function
,	O
stab_class_end_method	function
,	O
stab_end_class_type	function
,	O
stab_typedef_type	function
,	O
stab_tag_type	function
,	O
stab_typdef	function
,	O
stab_tag	struct
,	O
stab_int_constant	function
,	O
stab_float_constant	function
,	O
stab_typed_constant	function
,	O
stab_variable	function
,	O
stab_start_function	function
,	O
stab_function_parameter	function
,	O
stab_start_block	function
,	O
stab_end_block	function
,	O
stab_end_function	function
,	O
stab_lineno	function
}	O
;	O
static	O
struct	O
bfd_hash_entry	struct
*	O
string_hash_newfunc	function
(	O
struct	O
bfd_hash_entry	struct
*	O
entry	pointer
,	O
struct	O
bfd_hash_table	struct
*	O
table	pointer
,	O
const	O
char	O
*	O
string	pointer
)	O
{	O
struct	O
string_hash_entry	struct
*	O
ret	pointer
=	O
(	O
struct	O
string_hash_entry	struct
*	O
)	O
entry	pointer
;	O
if	O
(	O
ret	pointer
==	O
(	O
struct	O
string_hash_entry	struct
*	O
)	O
NULL	O
)	O
ret	pointer
=	O
(	O
(	O
struct	O
string_hash_entry	struct
*	O
)	O
bfd_hash_allocate	function
(	O
table	pointer
,	O
sizeof	O
(	O
struct	O
string_hash_entry	struct
)	O
)	O
)	O
;	O
if	O
(	O
ret	pointer
==	O
(	O
struct	O
string_hash_entry	struct
*	O
)	O
NULL	O
)	O
return	O
NULL	O
;	O
ret	pointer
=	O
(	O
(	O
struct	O
string_hash_entry	struct
*	O
)	O
bfd_hash_newfunc	function
(	O
(	O
struct	O
bfd_hash_entry	struct
*	O
)	O
ret	pointer
,	O
table	pointer
,	O
string	pointer
)	O
)	O
;	O
if	O
(	O
ret	pointer
)	O
{	O
ret	pointer
->	O
next	pointer
=	O
NULL	O
;	O
ret	pointer
->	O
index	function
=	O
-	O
1	int
;	O
ret	pointer
->	O
size	int
=	O
0	int
;	O
}	O
return	O
(	O
struct	O
bfd_hash_entry	struct
*	O
)	O
ret	pointer
;	O
}	O
static	O
bfd_boolean	int
stab_write_symbol	function
(	O
struct	O
stab_write_handle	struct
*	O
info	pointer
,	O
int	O
type	enum
,	O
int	O
desc	int
,	O
bfd_vma	long
value	long
,	O
const	O
char	O
*	O
string	pointer
)	O
{	O
bfd_size_type	long
strx	long
;	O
bfd_byte	char
sym	pointer
[	O
STAB_SYMBOL_SIZE	O
]	O
;	O
if	O
(	O
string	pointer
==	O
NULL	O
)	O
strx	long
=	O
0	int
;	O
else	O
{	O
struct	O
string_hash_entry	struct
*	O
h	pointer
;	O
h	pointer
=	O
string_hash_lookup	O
(	O
&	O
info	pointer
->	O
strhash	struct
,	O
string	pointer
,	O
TRUE	int
,	O
TRUE	int
)	O
;	O
if	O
(	O
h	pointer
==	O
NULL	O
)	O
{	O
non_fatal	function
(	O
_	O
(	O
"string_hash_lookup failed: %s"	pointer
)	O
,	O
bfd_errmsg	function
(	O
bfd_get_error	function
(	O
)	O
)	O
)	O
;	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
h	pointer
->	O
index	function
!=	O
-	O
1	int
)	O
strx	long
=	O
h	pointer
->	O
index	function
;	O
else	O
{	O
strx	long
=	O
info	pointer
->	O
strings_size	long
;	O
h	pointer
->	O
index	function
=	O
strx	long
;	O
if	O
(	O
info	pointer
->	O
last_string	pointer
==	O
NULL	O
)	O
info	pointer
->	O
strings	pointer
=	O
h	pointer
;	O
else	O
info	pointer
->	O
last_string	pointer
->	O
next	pointer
=	O
h	pointer
;	O
info	pointer
->	O
last_string	pointer
=	O
h	pointer
;	O
info	pointer
->	O
strings_size	long
+=	O
strlen	function
(	O
string	pointer
)	O
+	O
1	int
;	O
}	O
}	O
bfd_put_32	O
(	O
info	pointer
->	O
abfd	pointer
,	O
strx	long
,	O
sym	pointer
)	O
;	O
bfd_put_8	O
(	O
info	pointer
->	O
abfd	pointer
,	O
type	enum
,	O
sym	pointer
+	O
4	int
)	O
;	O
bfd_put_8	O
(	O
info	pointer
->	O
abfd	pointer
,	O
0	int
,	O
sym	pointer
+	O
5	int
)	O
;	O
bfd_put_16	O
(	O
info	pointer
->	O
abfd	pointer
,	O
desc	int
,	O
sym	pointer
+	O
6	int
)	O
;	O
bfd_put_32	O
(	O
info	pointer
->	O
abfd	pointer
,	O
value	long
,	O
sym	pointer
+	O
8	int
)	O
;	O
if	O
(	O
info	pointer
->	O
symbols_size	long
+	O
STAB_SYMBOL_SIZE	O
>	O
info	pointer
->	O
symbols_alloc	long
)	O
{	O
info	pointer
->	O
symbols_alloc	long
*=	O
2	int
;	O
info	pointer
->	O
symbols	pointer
=	O
(	O
bfd_byte	char
*	O
)	O
xrealloc	function
(	O
info	pointer
->	O
symbols	pointer
,	O
info	pointer
->	O
symbols_alloc	long
)	O
;	O
}	O
memcpy	function
(	O
info	pointer
->	O
symbols	pointer
+	O
info	pointer
->	O
symbols_size	long
,	O
sym	pointer
,	O
STAB_SYMBOL_SIZE	O
)	O
;	O
info	pointer
->	O
symbols_size	long
+=	O
STAB_SYMBOL_SIZE	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_push_string	function
(	O
struct	O
stab_write_handle	struct
*	O
info	pointer
,	O
const	O
char	O
*	O
string	pointer
,	O
long	O
tindex	long
,	O
bfd_boolean	int
definition	int
,	O
unsigned	O
int	O
size	int
)	O
{	O
struct	O
stab_type_stack	struct
*	O
s	pointer
;	O
s	pointer
=	O
(	O
struct	O
stab_type_stack	struct
*	O
)	O
xmalloc	function
(	O
sizeof	O
*	O
s	pointer
)	O
;	O
s	pointer
->	O
string	pointer
=	O
xstrdup	function
(	O
string	pointer
)	O
;	O
s	pointer
->	O
index	function
=	O
tindex	long
;	O
s	pointer
->	O
definition	int
=	O
definition	int
;	O
s	pointer
->	O
size	int
=	O
size	int
;	O
s	pointer
->	O
fields	pointer
=	O
NULL	O
;	O
s	pointer
->	O
baseclasses	pointer
=	O
NULL	O
;	O
s	pointer
->	O
methods	pointer
=	O
NULL	O
;	O
s	pointer
->	O
vtable	pointer
=	O
NULL	O
;	O
s	pointer
->	O
next	pointer
=	O
info	pointer
->	O
type_stack	pointer
;	O
info	pointer
->	O
type_stack	pointer
=	O
s	pointer
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_push_defined_type	function
(	O
struct	O
stab_write_handle	struct
*	O
info	pointer
,	O
long	O
tindex	long
,	O
unsigned	O
int	O
size	int
)	O
{	O
char	O
buf	pointer
[	O
20	int
]	O
;	O
sprintf	function
(	O
buf	pointer
,	O
"%ld"	pointer
,	O
tindex	long
)	O
;	O
return	O
stab_push_string	function
(	O
info	pointer
,	O
buf	pointer
,	O
tindex	long
,	O
FALSE	int
,	O
size	int
)	O
;	O
}	O
static	O
char	O
*	O
stab_pop_type	function
(	O
struct	O
stab_write_handle	struct
*	O
info	pointer
)	O
{	O
struct	O
stab_type_stack	struct
*	O
s	pointer
;	O
char	O
*	O
ret	pointer
;	O
s	pointer
=	O
info	pointer
->	O
type_stack	pointer
;	O
assert	O
(	O
s	pointer
!=	O
NULL	O
)	O
;	O
info	pointer
->	O
type_stack	pointer
=	O
s	pointer
->	O
next	pointer
;	O
ret	pointer
=	O
s	pointer
->	O
string	pointer
;	O
free	function
(	O
s	pointer
)	O
;	O
return	O
ret	pointer
;	O
}	O
bfd_boolean	int
write_stabs_in_sections_debugging_info	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
void	O
*	O
dhandle	pointer
,	O
bfd_byte	char
*	O
*	O
psyms	pointer
,	O
bfd_size_type	long
*	O
psymsize	pointer
,	O
bfd_byte	char
*	O
*	O
pstrings	pointer
,	O
bfd_size_type	long
*	O
pstringsize	pointer
)	O
{	O
struct	O
stab_write_handle	struct
info	pointer
;	O
struct	O
string_hash_entry	struct
*	O
h	pointer
;	O
bfd_byte	char
*	O
p	pointer
;	O
info	pointer
.	O
abfd	pointer
=	O
abfd	pointer
;	O
info	pointer
.	O
symbols_size	long
=	O
0	int
;	O
info	pointer
.	O
symbols_alloc	long
=	O
500	int
;	O
info	pointer
.	O
symbols	pointer
=	O
(	O
bfd_byte	char
*	O
)	O
xmalloc	function
(	O
info	pointer
.	O
symbols_alloc	long
)	O
;	O
info	pointer
.	O
strings	pointer
=	O
NULL	O
;	O
info	pointer
.	O
last_string	pointer
=	O
NULL	O
;	O
info	pointer
.	O
strings_size	long
=	O
1	int
;	O
if	O
(	O
!	O
bfd_hash_table_init	function
(	O
&	O
info	pointer
.	O
strhash	struct
.	O
table	pointer
,	O
string_hash_newfunc	function
,	O
sizeof	O
(	O
struct	O
string_hash_entry	struct
)	O
)	O
||	O
!	O
bfd_hash_table_init	function
(	O
&	O
info	pointer
.	O
typedef_hash	struct
.	O
table	pointer
,	O
string_hash_newfunc	function
,	O
sizeof	O
(	O
struct	O
string_hash_entry	struct
)	O
)	O
)	O
{	O
non_fatal	function
(	O
"bfd_hash_table_init_failed: %s"	pointer
,	O
bfd_errmsg	function
(	O
bfd_get_error	function
(	O
)	O
)	O
)	O
;	O
return	O
FALSE	int
;	O
}	O
info	pointer
.	O
type_stack	pointer
=	O
NULL	O
;	O
info	pointer
.	O
type_index	long
=	O
1	int
;	O
memset	function
(	O
&	O
info	pointer
.	O
type_cache	struct
,	O
0	int
,	O
sizeof	O
info	pointer
.	O
type_cache	struct
)	O
;	O
info	pointer
.	O
so_offset	long
=	O
-	O
1	int
;	O
info	pointer
.	O
fun_offset	long
=	O
-	O
1	int
;	O
info	pointer
.	O
last_text_address	long
=	O
0	int
;	O
info	pointer
.	O
nesting	int
=	O
0	int
;	O
info	pointer
.	O
fnaddr	long
=	O
0	int
;	O
info	pointer
.	O
pending_lbrac	long
=	O
(	O
bfd_vma	long
)	O
-	O
1	int
;	O
if	O
(	O
!	O
stab_write_symbol	function
(	O
&	O
info	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
)	O
return	O
FALSE	int
;	O
info	pointer
.	O
so_offset	long
=	O
info	pointer
.	O
symbols_size	long
;	O
if	O
(	O
!	O
stab_write_symbol	function
(	O
&	O
info	pointer
,	O
N_SO	int
,	O
0	int
,	O
0	int
,	O
bfd_get_filename	function
(	O
abfd	pointer
)	O
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
!	O
debug_write	function
(	O
dhandle	pointer
,	O
&	O
stab_fns	struct
,	O
(	O
void	O
*	O
)	O
&	O
info	pointer
)	O
)	O
return	O
FALSE	int
;	O
assert	O
(	O
info	pointer
.	O
pending_lbrac	long
==	O
(	O
bfd_vma	long
)	O
-	O
1	int
)	O
;	O
if	O
(	O
!	O
stab_write_symbol	function
(	O
&	O
info	pointer
,	O
N_SO	int
,	O
0	int
,	O
info	pointer
.	O
last_text_address	long
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
)	O
return	O
FALSE	int
;	O
bfd_put_32	O
(	O
abfd	pointer
,	O
info	pointer
.	O
strings_size	long
,	O
info	pointer
.	O
symbols	pointer
+	O
8	int
)	O
;	O
*	O
psyms	pointer
=	O
info	pointer
.	O
symbols	pointer
;	O
*	O
psymsize	pointer
=	O
info	pointer
.	O
symbols_size	long
;	O
*	O
pstringsize	pointer
=	O
info	pointer
.	O
strings_size	long
;	O
*	O
pstrings	pointer
=	O
(	O
bfd_byte	char
*	O
)	O
xmalloc	function
(	O
info	pointer
.	O
strings_size	long
)	O
;	O
p	pointer
=	O
*	O
pstrings	pointer
;	O
*	O
p	pointer
++	O
=	O
'\0'	O
;	O
for	O
(	O
h	pointer
=	O
info	pointer
.	O
strings	pointer
;	O
h	pointer
!=	O
NULL	O
;	O
h	pointer
=	O
h	pointer
->	O
next	pointer
)	O
{	O
strcpy	function
(	O
(	O
char	O
*	O
)	O
p	pointer
,	O
h	pointer
->	O
root	struct
.	O
string	pointer
)	O
;	O
p	pointer
+=	O
strlen	function
(	O
(	O
char	O
*	O
)	O
p	pointer
)	O
+	O
1	int
;	O
}	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_start_compilation_unit	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
info	pointer
->	O
lineno_filename	pointer
=	O
filename	pointer
;	O
return	O
stab_write_symbol	function
(	O
info	pointer
,	O
N_SOL	int
,	O
0	int
,	O
0	int
,	O
filename	pointer
)	O
;	O
}	O
static	O
bfd_boolean	int
stab_start_source	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
info	pointer
->	O
lineno_filename	pointer
=	O
filename	pointer
;	O
return	O
stab_write_symbol	function
(	O
info	pointer
,	O
N_SOL	int
,	O
0	int
,	O
0	int
,	O
filename	pointer
)	O
;	O
}	O
static	O
bfd_boolean	int
stab_empty_type	function
(	O
void	O
*	O
p	pointer
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
if	O
(	O
info	pointer
->	O
type_cache	struct
.	O
void_type	pointer
!=	O
0	int
)	O
return	O
stab_push_defined_type	function
(	O
info	pointer
,	O
info	pointer
->	O
type_cache	struct
.	O
void_type	pointer
,	O
0	int
)	O
;	O
else	O
{	O
long	O
tindex	long
;	O
char	O
buf	pointer
[	O
40	int
]	O
;	O
tindex	long
=	O
info	pointer
->	O
type_index	long
;	O
++	O
info	pointer
->	O
type_index	long
;	O
sprintf	function
(	O
buf	pointer
,	O
"%ld=%ld"	pointer
,	O
tindex	long
,	O
tindex	long
)	O
;	O
return	O
stab_push_string	function
(	O
info	pointer
,	O
buf	pointer
,	O
tindex	long
,	O
FALSE	int
,	O
0	int
)	O
;	O
}	O
}	O
static	O
bfd_boolean	int
stab_void_type	function
(	O
void	O
*	O
p	pointer
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
if	O
(	O
info	pointer
->	O
type_cache	struct
.	O
void_type	pointer
!=	O
0	int
)	O
return	O
stab_push_defined_type	function
(	O
info	pointer
,	O
info	pointer
->	O
type_cache	struct
.	O
void_type	pointer
,	O
0	int
)	O
;	O
else	O
{	O
long	O
tindex	long
;	O
char	O
buf	pointer
[	O
40	int
]	O
;	O
tindex	long
=	O
info	pointer
->	O
type_index	long
;	O
++	O
info	pointer
->	O
type_index	long
;	O
info	pointer
->	O
type_cache	struct
.	O
void_type	pointer
=	O
tindex	long
;	O
sprintf	function
(	O
buf	pointer
,	O
"%ld=%ld"	pointer
,	O
tindex	long
,	O
tindex	long
)	O
;	O
return	O
stab_push_string	function
(	O
info	pointer
,	O
buf	pointer
,	O
tindex	long
,	O
TRUE	int
,	O
0	int
)	O
;	O
}	O
}	O
static	O
bfd_boolean	int
stab_int_type	function
(	O
void	O
*	O
p	pointer
,	O
unsigned	O
int	O
size	int
,	O
bfd_boolean	int
unsignedp	int
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
long	O
*	O
cache	pointer
;	O
if	O
(	O
size	int
<=	O
0	int
||	O
(	O
size	int
>	O
sizeof	O
(	O
long	O
)	O
&&	O
size	int
!=	O
8	int
)	O
)	O
{	O
non_fatal	function
(	O
_	O
(	O
"stab_int_type: bad size %u"	pointer
)	O
,	O
size	int
)	O
;	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
unsignedp	int
)	O
cache	pointer
=	O
info	pointer
->	O
type_cache	struct
.	O
signed_integer_types	array
;	O
else	O
cache	pointer
=	O
info	pointer
->	O
type_cache	struct
.	O
unsigned_integer_types	array
;	O
if	O
(	O
cache	pointer
[	O
size	int
-	O
1	int
]	O
!=	O
0	int
)	O
return	O
stab_push_defined_type	function
(	O
info	pointer
,	O
cache	pointer
[	O
size	int
-	O
1	int
]	O
,	O
size	int
)	O
;	O
else	O
{	O
long	O
tindex	long
;	O
char	O
buf	pointer
[	O
100	int
]	O
;	O
tindex	long
=	O
info	pointer
->	O
type_index	long
;	O
++	O
info	pointer
->	O
type_index	long
;	O
cache	pointer
[	O
size	int
-	O
1	int
]	O
=	O
tindex	long
;	O
sprintf	function
(	O
buf	pointer
,	O
"%ld=r%ld;"	pointer
,	O
tindex	long
,	O
tindex	long
)	O
;	O
if	O
(	O
unsignedp	int
)	O
{	O
strcat	function
(	O
buf	pointer
,	O
"0;"	pointer
)	O
;	O
if	O
(	O
size	int
<	O
sizeof	O
(	O
long	O
)	O
)	O
sprintf	function
(	O
buf	pointer
+	O
strlen	function
(	O
buf	pointer
)	O
,	O
"%ld;"	pointer
,	O
(	O
(	O
long	O
)	O
1	int
<<	O
(	O
size	int
*	O
8	int
)	O
)	O
-	O
1	int
)	O
;	O
else	O
if	O
(	O
size	int
==	O
sizeof	O
(	O
long	O
)	O
)	O
strcat	function
(	O
buf	pointer
,	O
"-1;"	pointer
)	O
;	O
else	O
if	O
(	O
size	int
==	O
8	int
)	O
strcat	function
(	O
buf	pointer
,	O
"01777777777777777777777;"	pointer
)	O
;	O
else	O
abort	function
(	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
size	int
<=	O
sizeof	O
(	O
long	O
)	O
)	O
sprintf	function
(	O
buf	pointer
+	O
strlen	function
(	O
buf	pointer
)	O
,	O
"%ld;%ld;"	pointer
,	O
(	O
long	O
)	O
-	O
(	O
(	O
unsigned	O
long	O
)	O
1	int
<<	O
(	O
size	int
*	O
8	int
-	O
1	int
)	O
)	O
,	O
(	O
long	O
)	O
(	O
(	O
(	O
unsigned	O
long	O
)	O
1	int
<<	O
(	O
size	int
*	O
8	int
-	O
1	int
)	O
)	O
-	O
1	int
)	O
)	O
;	O
else	O
if	O
(	O
size	int
==	O
8	int
)	O
strcat	function
(	O
buf	pointer
,	O
"01000000000000000000000;0777777777777777777777;"	pointer
)	O
;	O
else	O
abort	function
(	O
)	O
;	O
}	O
return	O
stab_push_string	function
(	O
info	pointer
,	O
buf	pointer
,	O
tindex	long
,	O
TRUE	int
,	O
size	int
)	O
;	O
}	O
}	O
static	O
bfd_boolean	int
stab_float_type	function
(	O
void	O
*	O
p	pointer
,	O
unsigned	O
int	O
size	int
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
if	O
(	O
size	int
>	O
0	int
&&	O
size	int
-	O
1	int
<	O
(	O
sizeof	O
info	pointer
->	O
type_cache	struct
.	O
float_types	array
/	O
sizeof	O
info	pointer
->	O
type_cache	struct
.	O
float_types	array
[	O
0	int
]	O
)	O
&&	O
info	pointer
->	O
type_cache	struct
.	O
float_types	array
[	O
size	int
-	O
1	int
]	O
!=	O
0	int
)	O
return	O
stab_push_defined_type	function
(	O
info	pointer
,	O
info	pointer
->	O
type_cache	struct
.	O
float_types	array
[	O
size	int
-	O
1	int
]	O
,	O
size	int
)	O
;	O
else	O
{	O
long	O
tindex	long
;	O
char	O
*	O
int_type	pointer
;	O
char	O
buf	pointer
[	O
50	int
]	O
;	O
if	O
(	O
!	O
stab_int_type	function
(	O
info	pointer
,	O
4	int
,	O
FALSE	int
)	O
)	O
return	O
FALSE	int
;	O
int_type	pointer
=	O
stab_pop_type	function
(	O
info	pointer
)	O
;	O
tindex	long
=	O
info	pointer
->	O
type_index	long
;	O
++	O
info	pointer
->	O
type_index	long
;	O
if	O
(	O
size	int
>	O
0	int
&&	O
size	int
-	O
1	int
<	O
(	O
sizeof	O
info	pointer
->	O
type_cache	struct
.	O
float_types	array
/	O
sizeof	O
info	pointer
->	O
type_cache	struct
.	O
float_types	array
[	O
0	int
]	O
)	O
)	O
info	pointer
->	O
type_cache	struct
.	O
float_types	array
[	O
size	int
-	O
1	int
]	O
=	O
tindex	long
;	O
sprintf	function
(	O
buf	pointer
,	O
"%ld=r%s;%u;0;"	pointer
,	O
tindex	long
,	O
int_type	pointer
,	O
size	int
)	O
;	O
free	function
(	O
int_type	pointer
)	O
;	O
return	O
stab_push_string	function
(	O
info	pointer
,	O
buf	pointer
,	O
tindex	long
,	O
TRUE	int
,	O
size	int
)	O
;	O
}	O
}	O
static	O
bfd_boolean	int
stab_complex_type	function
(	O
void	O
*	O
p	pointer
,	O
unsigned	O
int	O
size	int
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
char	O
buf	pointer
[	O
50	int
]	O
;	O
long	O
tindex	long
;	O
tindex	long
=	O
info	pointer
->	O
type_index	long
;	O
++	O
info	pointer
->	O
type_index	long
;	O
sprintf	function
(	O
buf	pointer
,	O
"%ld=r%ld;%u;0;"	pointer
,	O
tindex	long
,	O
tindex	long
,	O
size	int
)	O
;	O
return	O
stab_push_string	function
(	O
info	pointer
,	O
buf	pointer
,	O
tindex	long
,	O
TRUE	int
,	O
size	int
*	O
2	int
)	O
;	O
}	O
static	O
bfd_boolean	int
stab_bool_type	function
(	O
void	O
*	O
p	pointer
,	O
unsigned	O
int	O
size	int
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
long	O
tindex	long
;	O
switch	O
(	O
size	int
)	O
{	O
case	O
1	int
:	O
tindex	long
=	O
-	O
21	int
;	O
break	O
;	O
case	O
2	int
:	O
tindex	long
=	O
-	O
22	int
;	O
break	O
;	O
default	O
:	O
case	O
4	int
:	O
tindex	long
=	O
-	O
16	int
;	O
break	O
;	O
case	O
8	int
:	O
tindex	long
=	O
-	O
33	int
;	O
break	O
;	O
}	O
return	O
stab_push_defined_type	function
(	O
info	pointer
,	O
tindex	long
,	O
size	int
)	O
;	O
}	O
static	O
bfd_boolean	int
stab_enum_type	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
tag	pointer
,	O
const	O
char	O
*	O
*	O
names	pointer
,	O
bfd_signed_vma	long
*	O
vals	pointer
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
size_t	long
len	long
;	O
const	O
char	O
*	O
*	O
pn	pointer
;	O
char	O
*	O
buf	pointer
;	O
long	O
tindex	long
=	O
0	int
;	O
bfd_signed_vma	long
*	O
pv	pointer
;	O
if	O
(	O
names	pointer
==	O
NULL	O
)	O
{	O
assert	O
(	O
tag	pointer
!=	O
NULL	O
)	O
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
10	int
+	O
strlen	function
(	O
tag	pointer
)	O
)	O
;	O
sprintf	function
(	O
buf	pointer
,	O
"xe%s:"	pointer
,	O
tag	pointer
)	O
;	O
if	O
(	O
!	O
stab_push_string	function
(	O
info	pointer
,	O
buf	pointer
,	O
0	int
,	O
FALSE	int
,	O
4	int
)	O
)	O
return	O
FALSE	int
;	O
free	function
(	O
buf	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
len	long
=	O
10	int
;	O
if	O
(	O
tag	pointer
!=	O
NULL	O
)	O
len	long
+=	O
strlen	function
(	O
tag	pointer
)	O
;	O
for	O
(	O
pn	pointer
=	O
names	pointer
;	O
*	O
pn	pointer
!=	O
NULL	O
;	O
pn	pointer
++	O
)	O
len	long
+=	O
strlen	function
(	O
*	O
pn	pointer
)	O
+	O
20	int
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
len	long
)	O
;	O
if	O
(	O
tag	pointer
==	O
NULL	O
)	O
strcpy	function
(	O
buf	pointer
,	O
"e"	pointer
)	O
;	O
else	O
{	O
tindex	long
=	O
info	pointer
->	O
type_index	long
;	O
++	O
info	pointer
->	O
type_index	long
;	O
sprintf	function
(	O
buf	pointer
,	O
"%s:T%ld=e"	pointer
,	O
tag	pointer
,	O
tindex	long
)	O
;	O
}	O
for	O
(	O
pn	pointer
=	O
names	pointer
,	O
pv	pointer
=	O
vals	pointer
;	O
*	O
pn	pointer
!=	O
NULL	O
;	O
pn	pointer
++	O
,	O
pv	pointer
++	O
)	O
sprintf	function
(	O
buf	pointer
+	O
strlen	function
(	O
buf	pointer
)	O
,	O
"%s:%ld,"	pointer
,	O
*	O
pn	pointer
,	O
(	O
long	O
)	O
*	O
pv	pointer
)	O
;	O
strcat	function
(	O
buf	pointer
,	O
";"	pointer
)	O
;	O
if	O
(	O
tag	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
!	O
stab_push_string	function
(	O
info	pointer
,	O
buf	pointer
,	O
0	int
,	O
FALSE	int
,	O
4	int
)	O
)	O
return	O
FALSE	int
;	O
}	O
else	O
{	O
if	O
(	O
!	O
stab_write_symbol	function
(	O
info	pointer
,	O
N_LSYM	int
,	O
0	int
,	O
0	int
,	O
buf	pointer
)	O
||	O
!	O
stab_push_defined_type	function
(	O
info	pointer
,	O
tindex	long
,	O
4	int
)	O
)	O
return	O
FALSE	int
;	O
}	O
free	function
(	O
buf	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_modify_type	function
(	O
struct	O
stab_write_handle	struct
*	O
info	pointer
,	O
int	O
mod	int
,	O
unsigned	O
int	O
size	int
,	O
long	O
*	O
*	O
cache	pointer
,	O
size_t	long
*	O
cache_alloc	pointer
)	O
{	O
long	O
targindex	long
;	O
long	O
tindex	long
;	O
char	O
*	O
s	pointer
,	O
*	O
buf	pointer
;	O
assert	O
(	O
info	pointer
->	O
type_stack	pointer
!=	O
NULL	O
)	O
;	O
targindex	long
=	O
info	pointer
->	O
type_stack	pointer
->	O
index	function
;	O
if	O
(	O
targindex	long
<=	O
0	int
||	O
cache	pointer
==	O
NULL	O
)	O
{	O
bfd_boolean	int
definition	int
;	O
definition	int
=	O
info	pointer
->	O
type_stack	pointer
->	O
definition	int
;	O
s	pointer
=	O
stab_pop_type	function
(	O
info	pointer
)	O
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
s	pointer
)	O
+	O
2	int
)	O
;	O
sprintf	function
(	O
buf	pointer
,	O
"%c%s"	pointer
,	O
mod	int
,	O
s	pointer
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
if	O
(	O
!	O
stab_push_string	function
(	O
info	pointer
,	O
buf	pointer
,	O
0	int
,	O
definition	int
,	O
size	int
)	O
)	O
return	O
FALSE	int
;	O
free	function
(	O
buf	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
(	O
size_t	long
)	O
targindex	long
>=	O
*	O
cache_alloc	pointer
)	O
{	O
size_t	long
alloc	long
;	O
alloc	long
=	O
*	O
cache_alloc	pointer
;	O
if	O
(	O
alloc	long
==	O
0	int
)	O
alloc	long
=	O
10	int
;	O
while	O
(	O
(	O
size_t	long
)	O
targindex	long
>=	O
alloc	long
)	O
alloc	long
*=	O
2	int
;	O
*	O
cache	pointer
=	O
(	O
long	O
*	O
)	O
xrealloc	function
(	O
*	O
cache	pointer
,	O
alloc	long
*	O
sizeof	O
(	O
long	O
)	O
)	O
;	O
memset	function
(	O
*	O
cache	pointer
+	O
*	O
cache_alloc	pointer
,	O
0	int
,	O
(	O
alloc	long
-	O
*	O
cache_alloc	pointer
)	O
*	O
sizeof	O
(	O
long	O
)	O
)	O
;	O
*	O
cache_alloc	pointer
=	O
alloc	long
;	O
}	O
tindex	long
=	O
(	O
*	O
cache	pointer
)	O
[	O
targindex	long
]	O
;	O
if	O
(	O
tindex	long
!=	O
0	int
&&	O
!	O
info	pointer
->	O
type_stack	pointer
->	O
definition	int
)	O
{	O
free	function
(	O
stab_pop_type	function
(	O
info	pointer
)	O
)	O
;	O
if	O
(	O
!	O
stab_push_defined_type	function
(	O
info	pointer
,	O
tindex	long
,	O
size	int
)	O
)	O
return	O
FALSE	int
;	O
}	O
else	O
{	O
tindex	long
=	O
info	pointer
->	O
type_index	long
;	O
++	O
info	pointer
->	O
type_index	long
;	O
s	pointer
=	O
stab_pop_type	function
(	O
info	pointer
)	O
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
s	pointer
)	O
+	O
20	int
)	O
;	O
sprintf	function
(	O
buf	pointer
,	O
"%ld=%c%s"	pointer
,	O
tindex	long
,	O
mod	int
,	O
s	pointer
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
(	O
*	O
cache	pointer
)	O
[	O
targindex	long
]	O
=	O
tindex	long
;	O
if	O
(	O
!	O
stab_push_string	function
(	O
info	pointer
,	O
buf	pointer
,	O
tindex	long
,	O
TRUE	int
,	O
size	int
)	O
)	O
return	O
FALSE	int
;	O
free	function
(	O
buf	pointer
)	O
;	O
}	O
}	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_pointer_type	function
(	O
void	O
*	O
p	pointer
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
return	O
stab_modify_type	function
(	O
info	pointer
,	O
'*'	O
,	O
4	int
,	O
&	O
info	pointer
->	O
type_cache	struct
.	O
pointer_types	pointer
,	O
&	O
info	pointer
->	O
type_cache	struct
.	O
pointer_types_alloc	long
)	O
;	O
}	O
static	O
bfd_boolean	int
stab_function_type	function
(	O
void	O
*	O
p	pointer
,	O
int	O
argcount	int
,	O
bfd_boolean	int
varargs	int
ATTRIBUTE_UNUSED	O
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
int	O
i	pointer
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
argcount	int
;	O
i	pointer
++	O
)	O
{	O
if	O
(	O
!	O
info	pointer
->	O
type_stack	pointer
->	O
definition	int
)	O
free	function
(	O
stab_pop_type	function
(	O
info	pointer
)	O
)	O
;	O
else	O
{	O
char	O
*	O
s	pointer
,	O
*	O
buf	pointer
;	O
s	pointer
=	O
stab_pop_type	function
(	O
info	pointer
)	O
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
s	pointer
)	O
+	O
3	int
)	O
;	O
sprintf	function
(	O
buf	pointer
,	O
":t%s"	pointer
,	O
s	pointer
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
if	O
(	O
!	O
stab_write_symbol	function
(	O
info	pointer
,	O
N_LSYM	int
,	O
0	int
,	O
0	int
,	O
buf	pointer
)	O
)	O
return	O
FALSE	int
;	O
free	function
(	O
buf	pointer
)	O
;	O
}	O
}	O
return	O
stab_modify_type	function
(	O
info	pointer
,	O
'f'	O
,	O
0	int
,	O
&	O
info	pointer
->	O
type_cache	struct
.	O
function_types	pointer
,	O
&	O
info	pointer
->	O
type_cache	struct
.	O
function_types_alloc	long
)	O
;	O
}	O
static	O
bfd_boolean	int
stab_reference_type	function
(	O
void	O
*	O
p	pointer
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
return	O
stab_modify_type	function
(	O
info	pointer
,	O
'&'	O
,	O
4	int
,	O
&	O
info	pointer
->	O
type_cache	struct
.	O
reference_types	pointer
,	O
&	O
info	pointer
->	O
type_cache	struct
.	O
reference_types_alloc	long
)	O
;	O
}	O
static	O
bfd_boolean	int
stab_range_type	function
(	O
void	O
*	O
p	pointer
,	O
bfd_signed_vma	long
low	long
,	O
bfd_signed_vma	long
high	long
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
bfd_boolean	int
definition	int
;	O
unsigned	O
int	O
size	int
;	O
char	O
*	O
s	pointer
,	O
*	O
buf	pointer
;	O
definition	int
=	O
info	pointer
->	O
type_stack	pointer
->	O
definition	int
;	O
size	int
=	O
info	pointer
->	O
type_stack	pointer
->	O
size	int
;	O
s	pointer
=	O
stab_pop_type	function
(	O
info	pointer
)	O
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
s	pointer
)	O
+	O
100	int
)	O
;	O
sprintf	function
(	O
buf	pointer
,	O
"r%s;%ld;%ld;"	pointer
,	O
s	pointer
,	O
(	O
long	O
)	O
low	long
,	O
(	O
long	O
)	O
high	long
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
if	O
(	O
!	O
stab_push_string	function
(	O
info	pointer
,	O
buf	pointer
,	O
0	int
,	O
definition	int
,	O
size	int
)	O
)	O
return	O
FALSE	int
;	O
free	function
(	O
buf	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_array_type	function
(	O
void	O
*	O
p	pointer
,	O
bfd_signed_vma	long
low	long
,	O
bfd_signed_vma	long
high	long
,	O
bfd_boolean	int
stringp	int
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
bfd_boolean	int
definition	int
;	O
unsigned	O
int	O
element_size	int
;	O
char	O
*	O
range	pointer
,	O
*	O
element	pointer
,	O
*	O
buf	pointer
;	O
long	O
tindex	long
;	O
unsigned	O
int	O
size	int
;	O
definition	int
=	O
info	pointer
->	O
type_stack	pointer
->	O
definition	int
;	O
range	pointer
=	O
stab_pop_type	function
(	O
info	pointer
)	O
;	O
definition	int
=	O
definition	int
||	O
info	pointer
->	O
type_stack	pointer
->	O
definition	int
;	O
element_size	int
=	O
info	pointer
->	O
type_stack	pointer
->	O
size	int
;	O
element	pointer
=	O
stab_pop_type	function
(	O
info	pointer
)	O
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
range	pointer
)	O
+	O
strlen	function
(	O
element	pointer
)	O
+	O
100	int
)	O
;	O
if	O
(	O
!	O
stringp	int
)	O
{	O
tindex	long
=	O
0	int
;	O
*	O
buf	pointer
=	O
'\0'	O
;	O
}	O
else	O
{	O
tindex	long
=	O
info	pointer
->	O
type_index	long
;	O
++	O
info	pointer
->	O
type_index	long
;	O
definition	int
=	O
TRUE	int
;	O
sprintf	function
(	O
buf	pointer
,	O
"%ld=@S;"	pointer
,	O
tindex	long
)	O
;	O
}	O
sprintf	function
(	O
buf	pointer
+	O
strlen	function
(	O
buf	pointer
)	O
,	O
"ar%s;%ld;%ld;%s"	pointer
,	O
range	pointer
,	O
(	O
long	O
)	O
low	long
,	O
(	O
long	O
)	O
high	long
,	O
element	pointer
)	O
;	O
free	function
(	O
range	pointer
)	O
;	O
free	function
(	O
element	pointer
)	O
;	O
if	O
(	O
high	long
<	O
low	long
)	O
size	int
=	O
0	int
;	O
else	O
size	int
=	O
element_size	int
*	O
(	O
(	O
high	long
-	O
low	long
)	O
+	O
1	int
)	O
;	O
if	O
(	O
!	O
stab_push_string	function
(	O
info	pointer
,	O
buf	pointer
,	O
tindex	long
,	O
definition	int
,	O
size	int
)	O
)	O
return	O
FALSE	int
;	O
free	function
(	O
buf	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_set_type	function
(	O
void	O
*	O
p	pointer
,	O
bfd_boolean	int
bitstringp	int
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
bfd_boolean	int
definition	int
;	O
char	O
*	O
s	pointer
,	O
*	O
buf	pointer
;	O
long	O
tindex	long
;	O
definition	int
=	O
info	pointer
->	O
type_stack	pointer
->	O
definition	int
;	O
s	pointer
=	O
stab_pop_type	function
(	O
info	pointer
)	O
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
s	pointer
)	O
+	O
30	int
)	O
;	O
if	O
(	O
!	O
bitstringp	int
)	O
{	O
*	O
buf	pointer
=	O
'\0'	O
;	O
tindex	long
=	O
0	int
;	O
}	O
else	O
{	O
tindex	long
=	O
info	pointer
->	O
type_index	long
;	O
++	O
info	pointer
->	O
type_index	long
;	O
definition	int
=	O
TRUE	int
;	O
sprintf	function
(	O
buf	pointer
,	O
"%ld=@S;"	pointer
,	O
tindex	long
)	O
;	O
}	O
sprintf	function
(	O
buf	pointer
+	O
strlen	function
(	O
buf	pointer
)	O
,	O
"S%s"	pointer
,	O
s	pointer
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
if	O
(	O
!	O
stab_push_string	function
(	O
info	pointer
,	O
buf	pointer
,	O
tindex	long
,	O
definition	int
,	O
0	int
)	O
)	O
return	O
FALSE	int
;	O
free	function
(	O
buf	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_offset_type	function
(	O
void	O
*	O
p	pointer
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
bfd_boolean	int
definition	int
;	O
char	O
*	O
target	pointer
,	O
*	O
base	int
,	O
*	O
buf	pointer
;	O
definition	int
=	O
info	pointer
->	O
type_stack	pointer
->	O
definition	int
;	O
target	pointer
=	O
stab_pop_type	function
(	O
info	pointer
)	O
;	O
definition	int
=	O
definition	int
||	O
info	pointer
->	O
type_stack	pointer
->	O
definition	int
;	O
base	int
=	O
stab_pop_type	function
(	O
info	pointer
)	O
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
target	pointer
)	O
+	O
strlen	function
(	O
base	int
)	O
+	O
3	int
)	O
;	O
sprintf	function
(	O
buf	pointer
,	O
"@%s,%s"	pointer
,	O
base	int
,	O
target	pointer
)	O
;	O
free	function
(	O
base	int
)	O
;	O
free	function
(	O
target	pointer
)	O
;	O
if	O
(	O
!	O
stab_push_string	function
(	O
info	pointer
,	O
buf	pointer
,	O
0	int
,	O
definition	int
,	O
0	int
)	O
)	O
return	O
FALSE	int
;	O
free	function
(	O
buf	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_method_type	function
(	O
void	O
*	O
p	pointer
,	O
bfd_boolean	int
domainp	int
,	O
int	O
argcount	int
,	O
bfd_boolean	int
varargs	int
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
bfd_boolean	int
definition	int
;	O
char	O
*	O
domain	pointer
,	O
*	O
return_type	pointer
,	O
*	O
buf	pointer
;	O
char	O
*	O
*	O
args	pointer
;	O
int	O
i	pointer
;	O
size_t	long
len	long
;	O
if	O
(	O
!	O
domainp	int
)	O
{	O
if	O
(	O
!	O
stab_empty_type	function
(	O
p	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
definition	int
=	O
info	pointer
->	O
type_stack	pointer
->	O
definition	int
;	O
domain	pointer
=	O
stab_pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
argcount	int
<	O
0	int
)	O
{	O
args	pointer
=	O
NULL	O
;	O
argcount	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
argcount	int
==	O
0	int
)	O
{	O
if	O
(	O
varargs	int
)	O
args	pointer
=	O
NULL	O
;	O
else	O
{	O
args	pointer
=	O
(	O
char	O
*	O
*	O
)	O
xmalloc	function
(	O
1	int
*	O
sizeof	O
(	O
*	O
args	pointer
)	O
)	O
;	O
if	O
(	O
!	O
stab_empty_type	function
(	O
p	pointer
)	O
)	O
return	O
FALSE	int
;	O
definition	int
=	O
definition	int
||	O
info	pointer
->	O
type_stack	pointer
->	O
definition	int
;	O
args	pointer
[	O
0	int
]	O
=	O
stab_pop_type	function
(	O
info	pointer
)	O
;	O
argcount	int
=	O
1	int
;	O
}	O
}	O
else	O
{	O
args	pointer
=	O
(	O
char	O
*	O
*	O
)	O
xmalloc	function
(	O
(	O
argcount	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
*	O
args	pointer
)	O
)	O
;	O
for	O
(	O
i	pointer
=	O
argcount	int
-	O
1	int
;	O
i	pointer
>=	O
0	int
;	O
i	pointer
--	O
)	O
{	O
definition	int
=	O
definition	int
||	O
info	pointer
->	O
type_stack	pointer
->	O
definition	int
;	O
args	pointer
[	O
i	pointer
]	O
=	O
stab_pop_type	function
(	O
info	pointer
)	O
;	O
}	O
if	O
(	O
!	O
varargs	int
)	O
{	O
if	O
(	O
!	O
stab_empty_type	function
(	O
p	pointer
)	O
)	O
return	O
FALSE	int
;	O
definition	int
=	O
definition	int
||	O
info	pointer
->	O
type_stack	pointer
->	O
definition	int
;	O
args	pointer
[	O
argcount	int
]	O
=	O
stab_pop_type	function
(	O
info	pointer
)	O
;	O
++	O
argcount	int
;	O
}	O
}	O
definition	int
=	O
definition	int
||	O
info	pointer
->	O
type_stack	pointer
->	O
definition	int
;	O
return_type	pointer
=	O
stab_pop_type	function
(	O
info	pointer
)	O
;	O
len	long
=	O
strlen	function
(	O
domain	pointer
)	O
+	O
strlen	function
(	O
return_type	pointer
)	O
+	O
10	int
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
argcount	int
;	O
i	pointer
++	O
)	O
len	long
+=	O
strlen	function
(	O
args	pointer
[	O
i	pointer
]	O
)	O
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
len	long
)	O
;	O
sprintf	function
(	O
buf	pointer
,	O
"#%s,%s"	pointer
,	O
domain	pointer
,	O
return_type	pointer
)	O
;	O
free	function
(	O
domain	pointer
)	O
;	O
free	function
(	O
return_type	pointer
)	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
argcount	int
;	O
i	pointer
++	O
)	O
{	O
strcat	function
(	O
buf	pointer
,	O
","	pointer
)	O
;	O
strcat	function
(	O
buf	pointer
,	O
args	pointer
[	O
i	pointer
]	O
)	O
;	O
free	function
(	O
args	pointer
[	O
i	pointer
]	O
)	O
;	O
}	O
strcat	function
(	O
buf	pointer
,	O
";"	pointer
)	O
;	O
if	O
(	O
args	pointer
!=	O
NULL	O
)	O
free	function
(	O
args	pointer
)	O
;	O
if	O
(	O
!	O
stab_push_string	function
(	O
info	pointer
,	O
buf	pointer
,	O
0	int
,	O
definition	int
,	O
0	int
)	O
)	O
return	O
FALSE	int
;	O
free	function
(	O
buf	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_const_type	function
(	O
void	O
*	O
p	pointer
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
return	O
stab_modify_type	function
(	O
info	pointer
,	O
'k'	O
,	O
info	pointer
->	O
type_stack	pointer
->	O
size	int
,	O
(	O
long	O
*	O
*	O
)	O
NULL	O
,	O
(	O
size_t	long
*	O
)	O
NULL	O
)	O
;	O
}	O
static	O
bfd_boolean	int
stab_volatile_type	function
(	O
void	O
*	O
p	pointer
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
return	O
stab_modify_type	function
(	O
info	pointer
,	O
'B'	O
,	O
info	pointer
->	O
type_stack	pointer
->	O
size	int
,	O
(	O
long	O
*	O
*	O
)	O
NULL	O
,	O
(	O
size_t	long
*	O
)	O
NULL	O
)	O
;	O
}	O
static	O
long	O
stab_get_struct_index	function
(	O
struct	O
stab_write_handle	struct
*	O
info	pointer
,	O
const	O
char	O
*	O
tag	pointer
,	O
unsigned	O
int	O
id	int
,	O
enum	O
debug_type_kind	enum
kind	enum
,	O
unsigned	O
int	O
*	O
psize	pointer
)	O
{	O
if	O
(	O
id	int
>=	O
info	pointer
->	O
type_cache	struct
.	O
struct_types_alloc	long
)	O
{	O
size_t	long
alloc	long
;	O
alloc	long
=	O
info	pointer
->	O
type_cache	struct
.	O
struct_types_alloc	long
;	O
if	O
(	O
alloc	long
==	O
0	int
)	O
alloc	long
=	O
10	int
;	O
while	O
(	O
id	int
>=	O
alloc	long
)	O
alloc	long
*=	O
2	int
;	O
info	pointer
->	O
type_cache	struct
.	O
struct_types	pointer
=	O
(	O
struct	O
stab_tag	struct
*	O
)	O
xrealloc	function
(	O
info	pointer
->	O
type_cache	struct
.	O
struct_types	pointer
,	O
alloc	long
*	O
sizeof	O
(	O
struct	O
stab_tag	struct
)	O
)	O
;	O
memset	function
(	O
(	O
info	pointer
->	O
type_cache	struct
.	O
struct_types	pointer
+	O
info	pointer
->	O
type_cache	struct
.	O
struct_types_alloc	long
)	O
,	O
0	int
,	O
(	O
(	O
alloc	long
-	O
info	pointer
->	O
type_cache	struct
.	O
struct_types_alloc	long
)	O
*	O
sizeof	O
(	O
struct	O
stab_tag	struct
)	O
)	O
)	O
;	O
info	pointer
->	O
type_cache	struct
.	O
struct_types_alloc	long
=	O
alloc	long
;	O
}	O
if	O
(	O
info	pointer
->	O
type_cache	struct
.	O
struct_types	pointer
[	O
id	int
]	O
.	O
index	function
==	O
0	int
)	O
{	O
info	pointer
->	O
type_cache	struct
.	O
struct_types	pointer
[	O
id	int
]	O
.	O
index	function
=	O
info	pointer
->	O
type_index	long
;	O
++	O
info	pointer
->	O
type_index	long
;	O
info	pointer
->	O
type_cache	struct
.	O
struct_types	pointer
[	O
id	int
]	O
.	O
tag	pointer
=	O
tag	pointer
;	O
info	pointer
->	O
type_cache	struct
.	O
struct_types	pointer
[	O
id	int
]	O
.	O
kind	enum
=	O
kind	enum
;	O
}	O
if	O
(	O
kind	enum
==	O
DEBUG_KIND_ILLEGAL	int
)	O
{	O
info	pointer
->	O
type_cache	struct
.	O
struct_types	pointer
[	O
id	int
]	O
.	O
kind	enum
=	O
kind	enum
;	O
info	pointer
->	O
type_cache	struct
.	O
struct_types	pointer
[	O
id	int
]	O
.	O
size	int
=	O
*	O
psize	pointer
;	O
}	O
else	O
*	O
psize	pointer
=	O
info	pointer
->	O
type_cache	struct
.	O
struct_types	pointer
[	O
id	int
]	O
.	O
size	int
;	O
return	O
info	pointer
->	O
type_cache	struct
.	O
struct_types	pointer
[	O
id	int
]	O
.	O
index	function
;	O
}	O
static	O
bfd_boolean	int
stab_start_struct_type	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
tag	pointer
,	O
unsigned	O
int	O
id	int
,	O
bfd_boolean	int
structp	int
,	O
unsigned	O
int	O
size	int
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
long	O
tindex	long
;	O
bfd_boolean	int
definition	int
;	O
char	O
buf	pointer
[	O
40	int
]	O
;	O
if	O
(	O
id	int
==	O
0	int
)	O
{	O
tindex	long
=	O
0	int
;	O
*	O
buf	pointer
=	O
'\0'	O
;	O
definition	int
=	O
FALSE	int
;	O
}	O
else	O
{	O
tindex	long
=	O
stab_get_struct_index	function
(	O
info	pointer
,	O
tag	pointer
,	O
id	int
,	O
DEBUG_KIND_ILLEGAL	int
,	O
&	O
size	int
)	O
;	O
if	O
(	O
tindex	long
<	O
0	int
)	O
return	O
FALSE	int
;	O
sprintf	function
(	O
buf	pointer
,	O
"%ld="	pointer
,	O
tindex	long
)	O
;	O
definition	int
=	O
TRUE	int
;	O
}	O
sprintf	function
(	O
buf	pointer
+	O
strlen	function
(	O
buf	pointer
)	O
,	O
"%c%u"	pointer
,	O
structp	int
?	O
's'	O
:	O
'u'	O
,	O
size	int
)	O
;	O
if	O
(	O
!	O
stab_push_string	function
(	O
info	pointer
,	O
buf	pointer
,	O
tindex	long
,	O
definition	int
,	O
size	int
)	O
)	O
return	O
FALSE	int
;	O
info	pointer
->	O
type_stack	pointer
->	O
fields	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
1	int
)	O
;	O
info	pointer
->	O
type_stack	pointer
->	O
fields	pointer
[	O
0	int
]	O
=	O
'\0'	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_struct_field	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
bfd_vma	long
bitpos	int
,	O
bfd_vma	long
bitsize	int
,	O
enum	O
debug_visibility	enum
visibility	enum
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
bfd_boolean	int
definition	int
;	O
unsigned	O
int	O
size	int
;	O
char	O
*	O
s	pointer
,	O
*	O
n	long
;	O
const	O
char	O
*	O
vis	pointer
;	O
definition	int
=	O
info	pointer
->	O
type_stack	pointer
->	O
definition	int
;	O
size	int
=	O
info	pointer
->	O
type_stack	pointer
->	O
size	int
;	O
s	pointer
=	O
stab_pop_type	function
(	O
info	pointer
)	O
;	O
assert	O
(	O
info	pointer
->	O
type_stack	pointer
->	O
fields	pointer
!=	O
NULL	O
)	O
;	O
n	long
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
info	pointer
->	O
type_stack	pointer
->	O
fields	pointer
)	O
+	O
strlen	function
(	O
name	pointer
)	O
+	O
strlen	function
(	O
s	pointer
)	O
+	O
50	int
)	O
;	O
switch	O
(	O
visibility	enum
)	O
{	O
default	O
:	O
abort	function
(	O
)	O
;	O
case	O
DEBUG_VISIBILITY_PUBLIC	int
:	O
vis	pointer
=	O
""	pointer
;	O
break	O
;	O
case	O
DEBUG_VISIBILITY_PRIVATE	int
:	O
vis	pointer
=	O
"/0"	pointer
;	O
break	O
;	O
case	O
DEBUG_VISIBILITY_PROTECTED	int
:	O
vis	pointer
=	O
"/1"	pointer
;	O
break	O
;	O
}	O
if	O
(	O
bitsize	int
==	O
0	int
)	O
{	O
bitsize	int
=	O
size	int
*	O
8	int
;	O
if	O
(	O
bitsize	int
==	O
0	int
)	O
non_fatal	function
(	O
_	O
(	O
"%s: warning: unknown size for field `%s' in struct"	pointer
)	O
,	O
bfd_get_filename	function
(	O
info	pointer
->	O
abfd	pointer
)	O
,	O
name	pointer
)	O
;	O
}	O
sprintf	function
(	O
n	long
,	O
"%s%s:%s%s,%ld,%ld;"	pointer
,	O
info	pointer
->	O
type_stack	pointer
->	O
fields	pointer
,	O
name	pointer
,	O
vis	pointer
,	O
s	pointer
,	O
(	O
long	O
)	O
bitpos	int
,	O
(	O
long	O
)	O
bitsize	int
)	O
;	O
free	function
(	O
info	pointer
->	O
type_stack	pointer
->	O
fields	pointer
)	O
;	O
info	pointer
->	O
type_stack	pointer
->	O
fields	pointer
=	O
n	long
;	O
if	O
(	O
definition	int
)	O
info	pointer
->	O
type_stack	pointer
->	O
definition	int
=	O
TRUE	int
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_end_struct_type	function
(	O
void	O
*	O
p	pointer
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
bfd_boolean	int
definition	int
;	O
long	O
tindex	long
;	O
unsigned	O
int	O
size	int
;	O
char	O
*	O
fields	pointer
,	O
*	O
first	pointer
,	O
*	O
buf	pointer
;	O
assert	O
(	O
info	pointer
->	O
type_stack	pointer
!=	O
NULL	O
&&	O
info	pointer
->	O
type_stack	pointer
->	O
fields	pointer
!=	O
NULL	O
)	O
;	O
definition	int
=	O
info	pointer
->	O
type_stack	pointer
->	O
definition	int
;	O
tindex	long
=	O
info	pointer
->	O
type_stack	pointer
->	O
index	function
;	O
size	int
=	O
info	pointer
->	O
type_stack	pointer
->	O
size	int
;	O
fields	pointer
=	O
info	pointer
->	O
type_stack	pointer
->	O
fields	pointer
;	O
first	pointer
=	O
stab_pop_type	function
(	O
info	pointer
)	O
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
first	pointer
)	O
+	O
strlen	function
(	O
fields	pointer
)	O
+	O
2	int
)	O
;	O
sprintf	function
(	O
buf	pointer
,	O
"%s%s;"	pointer
,	O
first	pointer
,	O
fields	pointer
)	O
;	O
free	function
(	O
first	pointer
)	O
;	O
free	function
(	O
fields	pointer
)	O
;	O
if	O
(	O
!	O
stab_push_string	function
(	O
info	pointer
,	O
buf	pointer
,	O
tindex	long
,	O
definition	int
,	O
size	int
)	O
)	O
return	O
FALSE	int
;	O
free	function
(	O
buf	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_start_class_type	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
tag	pointer
,	O
unsigned	O
int	O
id	int
,	O
bfd_boolean	int
structp	int
,	O
unsigned	O
int	O
size	int
,	O
bfd_boolean	int
vptr	int
,	O
bfd_boolean	int
ownvptr	int
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
bfd_boolean	int
definition	int
=	O
FALSE	int
;	O
char	O
*	O
vstring	pointer
=	O
NULL	O
;	O
if	O
(	O
vptr	int
&&	O
!	O
ownvptr	int
)	O
{	O
definition	int
=	O
info	pointer
->	O
type_stack	pointer
->	O
definition	int
;	O
vstring	pointer
=	O
stab_pop_type	function
(	O
info	pointer
)	O
;	O
}	O
if	O
(	O
!	O
stab_start_struct_type	function
(	O
p	pointer
,	O
tag	pointer
,	O
id	int
,	O
structp	int
,	O
size	int
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
vptr	int
)	O
{	O
char	O
*	O
vtable	pointer
;	O
if	O
(	O
ownvptr	int
)	O
{	O
assert	O
(	O
info	pointer
->	O
type_stack	pointer
->	O
index	function
>	O
0	int
)	O
;	O
vtable	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
20	int
)	O
;	O
sprintf	function
(	O
vtable	pointer
,	O
"~%%%ld"	pointer
,	O
info	pointer
->	O
type_stack	pointer
->	O
index	function
)	O
;	O
}	O
else	O
{	O
assert	O
(	O
vstring	pointer
)	O
;	O
vtable	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
vstring	pointer
)	O
+	O
3	int
)	O
;	O
sprintf	function
(	O
vtable	pointer
,	O
"~%%%s"	pointer
,	O
vstring	pointer
)	O
;	O
free	function
(	O
vstring	pointer
)	O
;	O
if	O
(	O
definition	int
)	O
info	pointer
->	O
type_stack	pointer
->	O
definition	int
=	O
TRUE	int
;	O
}	O
info	pointer
->	O
type_stack	pointer
->	O
vtable	pointer
=	O
vtable	pointer
;	O
}	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_class_static_member	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
const	O
char	O
*	O
physname	pointer
,	O
enum	O
debug_visibility	enum
visibility	enum
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
bfd_boolean	int
definition	int
;	O
char	O
*	O
s	pointer
,	O
*	O
n	long
;	O
const	O
char	O
*	O
vis	pointer
;	O
definition	int
=	O
info	pointer
->	O
type_stack	pointer
->	O
definition	int
;	O
s	pointer
=	O
stab_pop_type	function
(	O
info	pointer
)	O
;	O
assert	O
(	O
info	pointer
->	O
type_stack	pointer
->	O
fields	pointer
!=	O
NULL	O
)	O
;	O
n	long
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
info	pointer
->	O
type_stack	pointer
->	O
fields	pointer
)	O
+	O
strlen	function
(	O
name	pointer
)	O
+	O
strlen	function
(	O
s	pointer
)	O
+	O
strlen	function
(	O
physname	pointer
)	O
+	O
10	int
)	O
;	O
switch	O
(	O
visibility	enum
)	O
{	O
default	O
:	O
abort	function
(	O
)	O
;	O
case	O
DEBUG_VISIBILITY_PUBLIC	int
:	O
vis	pointer
=	O
""	pointer
;	O
break	O
;	O
case	O
DEBUG_VISIBILITY_PRIVATE	int
:	O
vis	pointer
=	O
"/0"	pointer
;	O
break	O
;	O
case	O
DEBUG_VISIBILITY_PROTECTED	int
:	O
vis	pointer
=	O
"/1"	pointer
;	O
break	O
;	O
}	O
sprintf	function
(	O
n	long
,	O
"%s%s:%s%s:%s;"	pointer
,	O
info	pointer
->	O
type_stack	pointer
->	O
fields	pointer
,	O
name	pointer
,	O
vis	pointer
,	O
s	pointer
,	O
physname	pointer
)	O
;	O
free	function
(	O
info	pointer
->	O
type_stack	pointer
->	O
fields	pointer
)	O
;	O
info	pointer
->	O
type_stack	pointer
->	O
fields	pointer
=	O
n	long
;	O
if	O
(	O
definition	int
)	O
info	pointer
->	O
type_stack	pointer
->	O
definition	int
=	O
TRUE	int
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_class_baseclass	function
(	O
void	O
*	O
p	pointer
,	O
bfd_vma	long
bitpos	int
,	O
bfd_boolean	int
is_virtual	int
,	O
enum	O
debug_visibility	enum
visibility	enum
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
bfd_boolean	int
definition	int
;	O
char	O
*	O
s	pointer
;	O
char	O
*	O
buf	pointer
;	O
unsigned	O
int	O
c	int
;	O
char	O
*	O
*	O
baseclasses	pointer
;	O
definition	int
=	O
info	pointer
->	O
type_stack	pointer
->	O
definition	int
;	O
s	pointer
=	O
stab_pop_type	function
(	O
info	pointer
)	O
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
s	pointer
)	O
+	O
25	int
)	O
;	O
buf	pointer
[	O
0	int
]	O
=	O
is_virtual	int
?	O
'1'	O
:	O
'0'	O
;	O
switch	O
(	O
visibility	enum
)	O
{	O
default	O
:	O
abort	function
(	O
)	O
;	O
case	O
DEBUG_VISIBILITY_PRIVATE	int
:	O
buf	pointer
[	O
1	int
]	O
=	O
'0'	O
;	O
break	O
;	O
case	O
DEBUG_VISIBILITY_PROTECTED	int
:	O
buf	pointer
[	O
1	int
]	O
=	O
'1'	O
;	O
break	O
;	O
case	O
DEBUG_VISIBILITY_PUBLIC	int
:	O
buf	pointer
[	O
1	int
]	O
=	O
'2'	O
;	O
break	O
;	O
}	O
sprintf	function
(	O
buf	pointer
+	O
2	int
,	O
"%ld,%s;"	pointer
,	O
(	O
long	O
)	O
bitpos	int
,	O
s	pointer
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
assert	O
(	O
info	pointer
->	O
type_stack	pointer
!=	O
NULL	O
&&	O
info	pointer
->	O
type_stack	pointer
->	O
fields	pointer
!=	O
NULL	O
)	O
;	O
if	O
(	O
info	pointer
->	O
type_stack	pointer
->	O
baseclasses	pointer
==	O
NULL	O
)	O
c	int
=	O
0	int
;	O
else	O
{	O
c	int
=	O
0	int
;	O
while	O
(	O
info	pointer
->	O
type_stack	pointer
->	O
baseclasses	pointer
[	O
c	int
]	O
!=	O
NULL	O
)	O
++	O
c	int
;	O
}	O
baseclasses	pointer
=	O
(	O
char	O
*	O
*	O
)	O
xrealloc	function
(	O
info	pointer
->	O
type_stack	pointer
->	O
baseclasses	pointer
,	O
(	O
c	int
+	O
2	int
)	O
*	O
sizeof	O
(	O
*	O
baseclasses	pointer
)	O
)	O
;	O
baseclasses	pointer
[	O
c	int
]	O
=	O
buf	pointer
;	O
baseclasses	pointer
[	O
c	int
+	O
1	int
]	O
=	O
NULL	O
;	O
info	pointer
->	O
type_stack	pointer
->	O
baseclasses	pointer
=	O
baseclasses	pointer
;	O
if	O
(	O
definition	int
)	O
info	pointer
->	O
type_stack	pointer
->	O
definition	int
=	O
TRUE	int
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_class_start_method	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
m	pointer
;	O
assert	O
(	O
info	pointer
->	O
type_stack	pointer
!=	O
NULL	O
&&	O
info	pointer
->	O
type_stack	pointer
->	O
fields	pointer
!=	O
NULL	O
)	O
;	O
if	O
(	O
info	pointer
->	O
type_stack	pointer
->	O
methods	pointer
==	O
NULL	O
)	O
{	O
m	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
name	pointer
)	O
+	O
3	int
)	O
;	O
*	O
m	pointer
=	O
'\0'	O
;	O
}	O
else	O
{	O
m	pointer
=	O
(	O
char	O
*	O
)	O
xrealloc	function
(	O
info	pointer
->	O
type_stack	pointer
->	O
methods	pointer
,	O
(	O
strlen	function
(	O
info	pointer
->	O
type_stack	pointer
->	O
methods	pointer
)	O
+	O
strlen	function
(	O
name	pointer
)	O
+	O
4	int
)	O
)	O
;	O
}	O
sprintf	function
(	O
m	pointer
+	O
strlen	function
(	O
m	pointer
)	O
,	O
"%s::"	pointer
,	O
name	pointer
)	O
;	O
info	pointer
->	O
type_stack	pointer
->	O
methods	pointer
=	O
m	pointer
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_class_method_var	function
(	O
struct	O
stab_write_handle	struct
*	O
info	pointer
,	O
const	O
char	O
*	O
physname	pointer
,	O
enum	O
debug_visibility	enum
visibility	enum
,	O
bfd_boolean	int
staticp	int
,	O
bfd_boolean	int
constp	int
,	O
bfd_boolean	int
volatilep	int
,	O
bfd_vma	long
voffset	long
,	O
bfd_boolean	int
contextp	int
)	O
{	O
bfd_boolean	int
definition	int
;	O
char	O
*	O
type	enum
;	O
char	O
*	O
context	pointer
=	O
NULL	O
;	O
char	O
visc	char
,	O
qualc	char
,	O
typec	char
;	O
definition	int
=	O
info	pointer
->	O
type_stack	pointer
->	O
definition	int
;	O
type	enum
=	O
stab_pop_type	function
(	O
info	pointer
)	O
;	O
if	O
(	O
contextp	int
)	O
{	O
definition	int
=	O
definition	int
||	O
info	pointer
->	O
type_stack	pointer
->	O
definition	int
;	O
context	pointer
=	O
stab_pop_type	function
(	O
info	pointer
)	O
;	O
}	O
assert	O
(	O
info	pointer
->	O
type_stack	pointer
!=	O
NULL	O
&&	O
info	pointer
->	O
type_stack	pointer
->	O
methods	pointer
!=	O
NULL	O
)	O
;	O
switch	O
(	O
visibility	enum
)	O
{	O
default	O
:	O
abort	function
(	O
)	O
;	O
case	O
DEBUG_VISIBILITY_PRIVATE	int
:	O
visc	char
=	O
'0'	O
;	O
break	O
;	O
case	O
DEBUG_VISIBILITY_PROTECTED	int
:	O
visc	char
=	O
'1'	O
;	O
break	O
;	O
case	O
DEBUG_VISIBILITY_PUBLIC	int
:	O
visc	char
=	O
'2'	O
;	O
break	O
;	O
}	O
if	O
(	O
constp	int
)	O
{	O
if	O
(	O
volatilep	int
)	O
qualc	char
=	O
'D'	O
;	O
else	O
qualc	char
=	O
'B'	O
;	O
}	O
else	O
{	O
if	O
(	O
volatilep	int
)	O
qualc	char
=	O
'C'	O
;	O
else	O
qualc	char
=	O
'A'	O
;	O
}	O
if	O
(	O
staticp	int
)	O
typec	char
=	O
'?'	O
;	O
else	O
if	O
(	O
!	O
contextp	int
)	O
typec	char
=	O
'.'	O
;	O
else	O
typec	char
=	O
'*'	O
;	O
info	pointer
->	O
type_stack	pointer
->	O
methods	pointer
=	O
(	O
char	O
*	O
)	O
xrealloc	function
(	O
info	pointer
->	O
type_stack	pointer
->	O
methods	pointer
,	O
(	O
strlen	function
(	O
info	pointer
->	O
type_stack	pointer
->	O
methods	pointer
)	O
+	O
strlen	function
(	O
type	enum
)	O
+	O
strlen	function
(	O
physname	pointer
)	O
+	O
(	O
contextp	int
?	O
strlen	function
(	O
context	pointer
)	O
:	O
0	int
)	O
+	O
40	int
)	O
)	O
;	O
sprintf	function
(	O
info	pointer
->	O
type_stack	pointer
->	O
methods	pointer
+	O
strlen	function
(	O
info	pointer
->	O
type_stack	pointer
->	O
methods	pointer
)	O
,	O
"%s:%s;%c%c%c"	pointer
,	O
type	enum
,	O
physname	pointer
,	O
visc	char
,	O
qualc	char
,	O
typec	char
)	O
;	O
free	function
(	O
type	enum
)	O
;	O
if	O
(	O
contextp	int
)	O
{	O
sprintf	function
(	O
info	pointer
->	O
type_stack	pointer
->	O
methods	pointer
+	O
strlen	function
(	O
info	pointer
->	O
type_stack	pointer
->	O
methods	pointer
)	O
,	O
"%ld;%s;"	pointer
,	O
(	O
long	O
)	O
voffset	long
,	O
context	pointer
)	O
;	O
free	function
(	O
context	pointer
)	O
;	O
}	O
if	O
(	O
definition	int
)	O
info	pointer
->	O
type_stack	pointer
->	O
definition	int
=	O
TRUE	int
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_class_method_variant	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
physname	pointer
,	O
enum	O
debug_visibility	enum
visibility	enum
,	O
bfd_boolean	int
constp	int
,	O
bfd_boolean	int
volatilep	int
,	O
bfd_vma	long
voffset	long
,	O
bfd_boolean	int
contextp	int
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
return	O
stab_class_method_var	function
(	O
info	pointer
,	O
physname	pointer
,	O
visibility	enum
,	O
FALSE	int
,	O
constp	int
,	O
volatilep	int
,	O
voffset	long
,	O
contextp	int
)	O
;	O
}	O
static	O
bfd_boolean	int
stab_class_static_method_variant	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
physname	pointer
,	O
enum	O
debug_visibility	enum
visibility	enum
,	O
bfd_boolean	int
constp	int
,	O
bfd_boolean	int
volatilep	int
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
return	O
stab_class_method_var	function
(	O
info	pointer
,	O
physname	pointer
,	O
visibility	enum
,	O
TRUE	int
,	O
constp	int
,	O
volatilep	int
,	O
0	int
,	O
FALSE	int
)	O
;	O
}	O
static	O
bfd_boolean	int
stab_class_end_method	function
(	O
void	O
*	O
p	pointer
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
assert	O
(	O
info	pointer
->	O
type_stack	pointer
!=	O
NULL	O
&&	O
info	pointer
->	O
type_stack	pointer
->	O
methods	pointer
!=	O
NULL	O
)	O
;	O
strcat	function
(	O
info	pointer
->	O
type_stack	pointer
->	O
methods	pointer
,	O
";"	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_end_class_type	function
(	O
void	O
*	O
p	pointer
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
size_t	long
len	long
;	O
unsigned	O
int	O
i	pointer
=	O
0	int
;	O
char	O
*	O
buf	pointer
;	O
assert	O
(	O
info	pointer
->	O
type_stack	pointer
!=	O
NULL	O
&&	O
info	pointer
->	O
type_stack	pointer
->	O
fields	pointer
!=	O
NULL	O
)	O
;	O
len	long
=	O
(	O
strlen	function
(	O
info	pointer
->	O
type_stack	pointer
->	O
string	pointer
)	O
+	O
strlen	function
(	O
info	pointer
->	O
type_stack	pointer
->	O
fields	pointer
)	O
+	O
10	int
)	O
;	O
if	O
(	O
info	pointer
->	O
type_stack	pointer
->	O
baseclasses	pointer
!=	O
NULL	O
)	O
{	O
len	long
+=	O
20	int
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
info	pointer
->	O
type_stack	pointer
->	O
baseclasses	pointer
[	O
i	pointer
]	O
!=	O
NULL	O
;	O
i	pointer
++	O
)	O
len	long
+=	O
strlen	function
(	O
info	pointer
->	O
type_stack	pointer
->	O
baseclasses	pointer
[	O
i	pointer
]	O
)	O
;	O
}	O
if	O
(	O
info	pointer
->	O
type_stack	pointer
->	O
methods	pointer
!=	O
NULL	O
)	O
len	long
+=	O
strlen	function
(	O
info	pointer
->	O
type_stack	pointer
->	O
methods	pointer
)	O
;	O
if	O
(	O
info	pointer
->	O
type_stack	pointer
->	O
vtable	pointer
!=	O
NULL	O
)	O
len	long
+=	O
strlen	function
(	O
info	pointer
->	O
type_stack	pointer
->	O
vtable	pointer
)	O
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
len	long
)	O
;	O
strcpy	function
(	O
buf	pointer
,	O
info	pointer
->	O
type_stack	pointer
->	O
string	pointer
)	O
;	O
if	O
(	O
info	pointer
->	O
type_stack	pointer
->	O
baseclasses	pointer
!=	O
NULL	O
)	O
{	O
sprintf	function
(	O
buf	pointer
+	O
strlen	function
(	O
buf	pointer
)	O
,	O
"!%u,"	pointer
,	O
i	pointer
)	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
info	pointer
->	O
type_stack	pointer
->	O
baseclasses	pointer
[	O
i	pointer
]	O
!=	O
NULL	O
;	O
i	pointer
++	O
)	O
{	O
strcat	function
(	O
buf	pointer
,	O
info	pointer
->	O
type_stack	pointer
->	O
baseclasses	pointer
[	O
i	pointer
]	O
)	O
;	O
free	function
(	O
info	pointer
->	O
type_stack	pointer
->	O
baseclasses	pointer
[	O
i	pointer
]	O
)	O
;	O
}	O
free	function
(	O
info	pointer
->	O
type_stack	pointer
->	O
baseclasses	pointer
)	O
;	O
info	pointer
->	O
type_stack	pointer
->	O
baseclasses	pointer
=	O
NULL	O
;	O
}	O
strcat	function
(	O
buf	pointer
,	O
info	pointer
->	O
type_stack	pointer
->	O
fields	pointer
)	O
;	O
free	function
(	O
info	pointer
->	O
type_stack	pointer
->	O
fields	pointer
)	O
;	O
info	pointer
->	O
type_stack	pointer
->	O
fields	pointer
=	O
NULL	O
;	O
if	O
(	O
info	pointer
->	O
type_stack	pointer
->	O
methods	pointer
!=	O
NULL	O
)	O
{	O
strcat	function
(	O
buf	pointer
,	O
info	pointer
->	O
type_stack	pointer
->	O
methods	pointer
)	O
;	O
free	function
(	O
info	pointer
->	O
type_stack	pointer
->	O
methods	pointer
)	O
;	O
info	pointer
->	O
type_stack	pointer
->	O
methods	pointer
=	O
NULL	O
;	O
}	O
strcat	function
(	O
buf	pointer
,	O
";"	pointer
)	O
;	O
if	O
(	O
info	pointer
->	O
type_stack	pointer
->	O
vtable	pointer
!=	O
NULL	O
)	O
{	O
strcat	function
(	O
buf	pointer
,	O
info	pointer
->	O
type_stack	pointer
->	O
vtable	pointer
)	O
;	O
free	function
(	O
info	pointer
->	O
type_stack	pointer
->	O
vtable	pointer
)	O
;	O
info	pointer
->	O
type_stack	pointer
->	O
vtable	pointer
=	O
NULL	O
;	O
}	O
free	function
(	O
info	pointer
->	O
type_stack	pointer
->	O
string	pointer
)	O
;	O
info	pointer
->	O
type_stack	pointer
->	O
string	pointer
=	O
buf	pointer
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_typedef_type	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
struct	O
string_hash_entry	struct
*	O
h	pointer
;	O
h	pointer
=	O
string_hash_lookup	O
(	O
&	O
info	pointer
->	O
typedef_hash	struct
,	O
name	pointer
,	O
FALSE	int
,	O
FALSE	int
)	O
;	O
assert	O
(	O
h	pointer
!=	O
NULL	O
&&	O
h	pointer
->	O
index	function
>	O
0	int
)	O
;	O
return	O
stab_push_defined_type	function
(	O
info	pointer
,	O
h	pointer
->	O
index	function
,	O
h	pointer
->	O
size	int
)	O
;	O
}	O
static	O
bfd_boolean	int
stab_tag_type	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
unsigned	O
int	O
id	int
,	O
enum	O
debug_type_kind	enum
kind	enum
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
long	O
tindex	long
;	O
unsigned	O
int	O
size	int
=	O
0	int
;	O
tindex	long
=	O
stab_get_struct_index	function
(	O
info	pointer
,	O
name	pointer
,	O
id	int
,	O
kind	enum
,	O
&	O
size	int
)	O
;	O
if	O
(	O
tindex	long
<	O
0	int
)	O
return	O
FALSE	int
;	O
return	O
stab_push_defined_type	function
(	O
info	pointer
,	O
tindex	long
,	O
size	int
)	O
;	O
}	O
static	O
bfd_boolean	int
stab_typdef	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
long	O
tindex	long
;	O
unsigned	O
int	O
size	int
;	O
char	O
*	O
s	pointer
,	O
*	O
buf	pointer
;	O
struct	O
string_hash_entry	struct
*	O
h	pointer
;	O
tindex	long
=	O
info	pointer
->	O
type_stack	pointer
->	O
index	function
;	O
size	int
=	O
info	pointer
->	O
type_stack	pointer
->	O
size	int
;	O
s	pointer
=	O
stab_pop_type	function
(	O
info	pointer
)	O
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
name	pointer
)	O
+	O
strlen	function
(	O
s	pointer
)	O
+	O
20	int
)	O
;	O
if	O
(	O
tindex	long
>	O
0	int
)	O
sprintf	function
(	O
buf	pointer
,	O
"%s:t%s"	pointer
,	O
name	pointer
,	O
s	pointer
)	O
;	O
else	O
{	O
tindex	long
=	O
info	pointer
->	O
type_index	long
;	O
++	O
info	pointer
->	O
type_index	long
;	O
sprintf	function
(	O
buf	pointer
,	O
"%s:t%ld=%s"	pointer
,	O
name	pointer
,	O
tindex	long
,	O
s	pointer
)	O
;	O
}	O
free	function
(	O
s	pointer
)	O
;	O
if	O
(	O
!	O
stab_write_symbol	function
(	O
info	pointer
,	O
N_LSYM	int
,	O
0	int
,	O
0	int
,	O
buf	pointer
)	O
)	O
return	O
FALSE	int
;	O
free	function
(	O
buf	pointer
)	O
;	O
h	pointer
=	O
string_hash_lookup	O
(	O
&	O
info	pointer
->	O
typedef_hash	struct
,	O
name	pointer
,	O
TRUE	int
,	O
FALSE	int
)	O
;	O
if	O
(	O
h	pointer
==	O
NULL	O
)	O
{	O
non_fatal	function
(	O
_	O
(	O
"string_hash_lookup failed: %s"	pointer
)	O
,	O
bfd_errmsg	function
(	O
bfd_get_error	function
(	O
)	O
)	O
)	O
;	O
return	O
FALSE	int
;	O
}	O
h	pointer
->	O
index	function
=	O
tindex	long
;	O
h	pointer
->	O
size	int
=	O
size	int
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_tag	struct
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
tag	pointer
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
s	pointer
,	O
*	O
buf	pointer
;	O
s	pointer
=	O
stab_pop_type	function
(	O
info	pointer
)	O
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
tag	pointer
)	O
+	O
strlen	function
(	O
s	pointer
)	O
+	O
3	int
)	O
;	O
sprintf	function
(	O
buf	pointer
,	O
"%s:T%s"	pointer
,	O
tag	pointer
,	O
s	pointer
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
if	O
(	O
!	O
stab_write_symbol	function
(	O
info	pointer
,	O
N_LSYM	int
,	O
0	int
,	O
0	int
,	O
buf	pointer
)	O
)	O
return	O
FALSE	int
;	O
free	function
(	O
buf	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_int_constant	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
bfd_vma	long
val	array
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
buf	pointer
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
name	pointer
)	O
+	O
20	int
)	O
;	O
sprintf	function
(	O
buf	pointer
,	O
"%s:c=i%ld"	pointer
,	O
name	pointer
,	O
(	O
long	O
)	O
val	array
)	O
;	O
if	O
(	O
!	O
stab_write_symbol	function
(	O
info	pointer
,	O
N_LSYM	int
,	O
0	int
,	O
0	int
,	O
buf	pointer
)	O
)	O
return	O
FALSE	int
;	O
free	function
(	O
buf	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_float_constant	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
double	O
val	array
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
buf	pointer
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
name	pointer
)	O
+	O
20	int
)	O
;	O
sprintf	function
(	O
buf	pointer
,	O
"%s:c=f%g"	pointer
,	O
name	pointer
,	O
val	array
)	O
;	O
if	O
(	O
!	O
stab_write_symbol	function
(	O
info	pointer
,	O
N_LSYM	int
,	O
0	int
,	O
0	int
,	O
buf	pointer
)	O
)	O
return	O
FALSE	int
;	O
free	function
(	O
buf	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_typed_constant	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
bfd_vma	long
val	array
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
s	pointer
,	O
*	O
buf	pointer
;	O
s	pointer
=	O
stab_pop_type	function
(	O
info	pointer
)	O
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
name	pointer
)	O
+	O
strlen	function
(	O
s	pointer
)	O
+	O
20	int
)	O
;	O
sprintf	function
(	O
buf	pointer
,	O
"%s:c=e%s,%ld"	pointer
,	O
name	pointer
,	O
s	pointer
,	O
(	O
long	O
)	O
val	array
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
if	O
(	O
!	O
stab_write_symbol	function
(	O
info	pointer
,	O
N_LSYM	int
,	O
0	int
,	O
0	int
,	O
buf	pointer
)	O
)	O
return	O
FALSE	int
;	O
free	function
(	O
buf	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_variable	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
enum	O
debug_var_kind	enum
kind	enum
,	O
bfd_vma	long
val	array
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
s	pointer
,	O
*	O
buf	pointer
;	O
int	O
stab_type	char
;	O
const	O
char	O
*	O
kindstr	pointer
;	O
s	pointer
=	O
stab_pop_type	function
(	O
info	pointer
)	O
;	O
switch	O
(	O
kind	enum
)	O
{	O
default	O
:	O
abort	function
(	O
)	O
;	O
case	O
DEBUG_GLOBAL	int
:	O
stab_type	char
=	O
N_GSYM	int
;	O
kindstr	pointer
=	O
"G"	pointer
;	O
break	O
;	O
case	O
DEBUG_STATIC	int
:	O
stab_type	char
=	O
N_STSYM	int
;	O
kindstr	pointer
=	O
"S"	pointer
;	O
break	O
;	O
case	O
DEBUG_LOCAL_STATIC	int
:	O
stab_type	char
=	O
N_STSYM	int
;	O
kindstr	pointer
=	O
"V"	pointer
;	O
break	O
;	O
case	O
DEBUG_LOCAL	int
:	O
stab_type	char
=	O
N_LSYM	int
;	O
kindstr	pointer
=	O
""	pointer
;	O
if	O
(	O
!	O
ISDIGIT	O
(	O
*	O
s	pointer
)	O
)	O
{	O
char	O
*	O
n	long
;	O
long	O
tindex	long
;	O
tindex	long
=	O
info	pointer
->	O
type_index	long
;	O
++	O
info	pointer
->	O
type_index	long
;	O
n	long
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
s	pointer
)	O
+	O
20	int
)	O
;	O
sprintf	function
(	O
n	long
,	O
"%ld=%s"	pointer
,	O
tindex	long
,	O
s	pointer
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
s	pointer
=	O
n	long
;	O
}	O
break	O
;	O
case	O
DEBUG_REGISTER	int
:	O
stab_type	char
=	O
N_RSYM	int
;	O
kindstr	pointer
=	O
"r"	pointer
;	O
break	O
;	O
}	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
name	pointer
)	O
+	O
strlen	function
(	O
s	pointer
)	O
+	O
3	int
)	O
;	O
sprintf	function
(	O
buf	pointer
,	O
"%s:%s%s"	pointer
,	O
name	pointer
,	O
kindstr	pointer
,	O
s	pointer
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
if	O
(	O
!	O
stab_write_symbol	function
(	O
info	pointer
,	O
stab_type	char
,	O
0	int
,	O
val	array
,	O
buf	pointer
)	O
)	O
return	O
FALSE	int
;	O
free	function
(	O
buf	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_start_function	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
bfd_boolean	int
globalp	int
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
rettype	pointer
,	O
*	O
buf	pointer
;	O
assert	O
(	O
info	pointer
->	O
nesting	int
==	O
0	int
&&	O
info	pointer
->	O
fun_offset	long
==	O
-	O
1	int
)	O
;	O
rettype	pointer
=	O
stab_pop_type	function
(	O
info	pointer
)	O
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
name	pointer
)	O
+	O
strlen	function
(	O
rettype	pointer
)	O
+	O
3	int
)	O
;	O
sprintf	function
(	O
buf	pointer
,	O
"%s:%c%s"	pointer
,	O
name	pointer
,	O
globalp	int
?	O
'F'	O
:	O
'f'	O
,	O
rettype	pointer
)	O
;	O
info	pointer
->	O
fun_offset	long
=	O
info	pointer
->	O
symbols_size	long
;	O
if	O
(	O
!	O
stab_write_symbol	function
(	O
info	pointer
,	O
N_FUN	int
,	O
0	int
,	O
0	int
,	O
buf	pointer
)	O
)	O
return	O
FALSE	int
;	O
free	function
(	O
buf	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_function_parameter	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
enum	O
debug_parm_kind	enum
kind	enum
,	O
bfd_vma	long
val	array
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
char	O
*	O
s	pointer
,	O
*	O
buf	pointer
;	O
int	O
stab_type	char
;	O
char	O
kindc	char
;	O
s	pointer
=	O
stab_pop_type	function
(	O
info	pointer
)	O
;	O
switch	O
(	O
kind	enum
)	O
{	O
default	O
:	O
abort	function
(	O
)	O
;	O
case	O
DEBUG_PARM_STACK	int
:	O
stab_type	char
=	O
N_PSYM	int
;	O
kindc	char
=	O
'p'	O
;	O
break	O
;	O
case	O
DEBUG_PARM_REG	int
:	O
stab_type	char
=	O
N_RSYM	int
;	O
kindc	char
=	O
'P'	O
;	O
break	O
;	O
case	O
DEBUG_PARM_REFERENCE	int
:	O
stab_type	char
=	O
N_PSYM	int
;	O
kindc	char
=	O
'v'	O
;	O
break	O
;	O
case	O
DEBUG_PARM_REF_REG	int
:	O
stab_type	char
=	O
N_RSYM	int
;	O
kindc	char
=	O
'a'	O
;	O
break	O
;	O
}	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
name	pointer
)	O
+	O
strlen	function
(	O
s	pointer
)	O
+	O
3	int
)	O
;	O
sprintf	function
(	O
buf	pointer
,	O
"%s:%c%s"	pointer
,	O
name	pointer
,	O
kindc	char
,	O
s	pointer
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
if	O
(	O
!	O
stab_write_symbol	function
(	O
info	pointer
,	O
stab_type	char
,	O
0	int
,	O
val	array
,	O
buf	pointer
)	O
)	O
return	O
FALSE	int
;	O
free	function
(	O
buf	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_start_block	function
(	O
void	O
*	O
p	pointer
,	O
bfd_vma	long
addr	pointer
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
if	O
(	O
info	pointer
->	O
so_offset	long
!=	O
-	O
1	int
)	O
{	O
bfd_put_32	O
(	O
info	pointer
->	O
abfd	pointer
,	O
addr	pointer
,	O
info	pointer
->	O
symbols	pointer
+	O
info	pointer
->	O
so_offset	long
+	O
8	int
)	O
;	O
info	pointer
->	O
so_offset	long
=	O
-	O
1	int
;	O
}	O
if	O
(	O
info	pointer
->	O
fun_offset	long
!=	O
-	O
1	int
)	O
{	O
bfd_put_32	O
(	O
info	pointer
->	O
abfd	pointer
,	O
addr	pointer
,	O
info	pointer
->	O
symbols	pointer
+	O
info	pointer
->	O
fun_offset	long
+	O
8	int
)	O
;	O
info	pointer
->	O
fun_offset	long
=	O
-	O
1	int
;	O
}	O
++	O
info	pointer
->	O
nesting	int
;	O
if	O
(	O
info	pointer
->	O
nesting	int
==	O
1	int
)	O
{	O
info	pointer
->	O
fnaddr	long
=	O
addr	pointer
;	O
return	O
TRUE	int
;	O
}	O
if	O
(	O
info	pointer
->	O
pending_lbrac	long
!=	O
(	O
bfd_vma	long
)	O
-	O
1	int
)	O
{	O
if	O
(	O
!	O
stab_write_symbol	function
(	O
info	pointer
,	O
N_LBRAC	int
,	O
0	int
,	O
info	pointer
->	O
pending_lbrac	long
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
)	O
return	O
FALSE	int
;	O
}	O
info	pointer
->	O
pending_lbrac	long
=	O
addr	pointer
-	O
info	pointer
->	O
fnaddr	long
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_end_block	function
(	O
void	O
*	O
p	pointer
,	O
bfd_vma	long
addr	pointer
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
if	O
(	O
addr	pointer
>	O
info	pointer
->	O
last_text_address	long
)	O
info	pointer
->	O
last_text_address	long
=	O
addr	pointer
;	O
if	O
(	O
info	pointer
->	O
pending_lbrac	long
!=	O
(	O
bfd_vma	long
)	O
-	O
1	int
)	O
{	O
if	O
(	O
!	O
stab_write_symbol	function
(	O
info	pointer
,	O
N_LBRAC	int
,	O
0	int
,	O
info	pointer
->	O
pending_lbrac	long
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
)	O
return	O
FALSE	int
;	O
info	pointer
->	O
pending_lbrac	long
=	O
(	O
bfd_vma	long
)	O
-	O
1	int
;	O
}	O
assert	O
(	O
info	pointer
->	O
nesting	int
>	O
0	int
)	O
;	O
--	O
info	pointer
->	O
nesting	int
;	O
if	O
(	O
info	pointer
->	O
nesting	int
==	O
0	int
)	O
return	O
TRUE	int
;	O
return	O
stab_write_symbol	function
(	O
info	pointer
,	O
N_RBRAC	int
,	O
0	int
,	O
addr	pointer
-	O
info	pointer
->	O
fnaddr	long
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
static	O
bfd_boolean	int
stab_end_function	function
(	O
void	O
*	O
p	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
stab_lineno	function
(	O
void	O
*	O
p	pointer
,	O
const	O
char	O
*	O
file	pointer
,	O
unsigned	O
long	O
lineno	pointer
,	O
bfd_vma	long
addr	pointer
)	O
{	O
struct	O
stab_write_handle	struct
*	O
info	pointer
=	O
(	O
struct	O
stab_write_handle	struct
*	O
)	O
p	pointer
;	O
assert	O
(	O
info	pointer
->	O
lineno_filename	pointer
!=	O
NULL	O
)	O
;	O
if	O
(	O
addr	pointer
>	O
info	pointer
->	O
last_text_address	long
)	O
info	pointer
->	O
last_text_address	long
=	O
addr	pointer
;	O
if	O
(	O
filename_cmp	function
(	O
file	pointer
,	O
info	pointer
->	O
lineno_filename	pointer
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
!	O
stab_write_symbol	function
(	O
info	pointer
,	O
N_SOL	int
,	O
0	int
,	O
addr	pointer
,	O
file	pointer
)	O
)	O
return	O
FALSE	int
;	O
info	pointer
->	O
lineno_filename	pointer
=	O
file	pointer
;	O
}	O
return	O
stab_write_symbol	function
(	O
info	pointer
,	O
N_SLINE	int
,	O
lineno	pointer
,	O
addr	pointer
-	O
info	pointer
->	O
fnaddr	long
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
