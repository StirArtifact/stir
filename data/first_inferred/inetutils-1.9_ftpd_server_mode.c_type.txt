static	O
void	O
reapchild	function
(	O
int	O
)	O
;	O
static	O
void	O
reapchild	function
(	O
int	O
signo	int
_GL_UNUSED_PARAMETER	O
)	O
{	O
int	O
save_errno	int
=	O
errno	O
;	O
while	O
(	O
waitpid	function
(	O
-	O
1	int
,	O
NULL	O
,	O
WNOHANG	int
)	O
>	O
0	int
)	O
;	O
errno	O
=	O
save_errno	int
;	O
}	O
int	O
server_mode	function
(	O
const	O
char	O
*	O
pidfile	pointer
,	O
struct	O
sockaddr_in	struct
*	O
phis_addr	pointer
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
int	O
ctl_sock	int
,	O
fd	int
;	O
struct	O
servent	struct
*	O
sv	pointer
;	O
int	O
port	int
;	O
static	O
struct	O
sockaddr_in	struct
server_addr	struct
;	O
if	O
(	O
daemon	function
(	O
1	int
,	O
1	int
)	O
<	O
0	int
)	O
{	O
syslog	function
(	O
LOG_ERR	int
,	O
"failed to become a daemon"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
signal	function
(	O
SIGCHLD	int
,	O
reapchild	function
)	O
;	O
sv	pointer
=	O
getservbyname	function
(	O
"ftp"	pointer
,	O
"tcp"	pointer
)	O
;	O
port	int
=	O
(	O
sv	pointer
==	O
NULL	O
)	O
?	O
DEFPORT	int
:	O
ntohs	function
(	O
sv	pointer
->	O
s_port	int
)	O
;	O
ctl_sock	int
=	O
socket	function
(	O
AF_INET	O
,	O
SOCK_STREAM	int
,	O
0	int
)	O
;	O
if	O
(	O
ctl_sock	int
<	O
0	int
)	O
{	O
syslog	function
(	O
LOG_ERR	int
,	O
"control socket: %m"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
{	O
int	O
on	int
=	O
1	int
;	O
if	O
(	O
setsockopt	function
(	O
ctl_sock	int
,	O
SOL_SOCKET	int
,	O
SO_REUSEADDR	int
,	O
(	O
char	O
*	O
)	O
&	O
on	int
,	O
sizeof	O
(	O
on	int
)	O
)	O
<	O
0	int
)	O
syslog	function
(	O
LOG_ERR	int
,	O
"control setsockopt: %m"	pointer
)	O
;	O
}	O
memset	function
(	O
&	O
server_addr	struct
,	O
0	int
,	O
sizeof	O
server_addr	struct
)	O
;	O
server_addr	struct
.	O
sin_family	short
=	O
AF_INET	O
;	O
server_addr	struct
.	O
sin_port	short
=	O
htons	function
(	O
port	int
)	O
;	O
if	O
(	O
bind	function
(	O
ctl_sock	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
server_addr	struct
,	O
sizeof	O
server_addr	struct
)	O
)	O
{	O
syslog	function
(	O
LOG_ERR	int
,	O
"control bind: %m"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
listen	function
(	O
ctl_sock	int
,	O
32	int
)	O
<	O
0	int
)	O
{	O
syslog	function
(	O
LOG_ERR	int
,	O
"control listen: %m"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
{	O
FILE	struct
*	O
pid_fp	pointer
=	O
fopen	function
(	O
pidfile	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
pid_fp	pointer
==	O
NULL	O
)	O
syslog	function
(	O
LOG_ERR	int
,	O
"can't open %s: %m"	pointer
,	O
PATH_FTPDPID	O
)	O
;	O
else	O
{	O
fprintf	function
(	O
pid_fp	pointer
,	O
"%d\n"	pointer
,	O
getpid	function
(	O
)	O
)	O
;	O
fchmod	function
(	O
fileno	function
(	O
pid_fp	pointer
)	O
,	O
S_IRUSR	O
|	O
S_IWUSR	O
|	O
S_IRGRP	O
|	O
S_IROTH	O
)	O
;	O
fclose	function
(	O
pid_fp	pointer
)	O
;	O
}	O
}	O
while	O
(	O
1	int
)	O
{	O
socklen_t	int
addrlen	int
=	O
sizeof	O
(	O
*	O
phis_addr	pointer
)	O
;	O
fd	int
=	O
accept	function
(	O
ctl_sock	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
phis_addr	pointer
,	O
&	O
addrlen	int
)	O
;	O
if	O
(	O
fork	function
(	O
)	O
==	O
0	int
)	O
{	O
dup2	function
(	O
fd	int
,	O
0	int
)	O
;	O
dup2	function
(	O
fd	int
,	O
1	int
)	O
;	O
close	pointer
(	O
ctl_sock	int
)	O
;	O
break	O
;	O
}	O
close	pointer
(	O
fd	int
)	O
;	O
}	O
return	O
fd	int
;	O
}	O
