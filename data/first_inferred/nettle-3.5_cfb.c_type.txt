void	O
cfb_encrypt	O
(	O
const	O
void	O
*	O
ctx	pointer
,	O
nettle_cipher_func	function
*	O
f	pointer
,	O
size_t	long
block_size	long
,	O
uint8_t	char
*	O
iv	pointer
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
dst	pointer
,	O
const	O
uint8_t	char
*	O
src	pointer
)	O
{	O
uint8_t	char
*	O
p	pointer
;	O
TMP_DECL	O
(	O
buffer	pointer
,	O
uint8_t	char
,	O
NETTLE_MAX_CIPHER_BLOCK_SIZE	O
)	O
;	O
TMP_ALLOC	O
(	O
buffer	pointer
,	O
block_size	long
)	O
;	O
if	O
(	O
src	pointer
!=	O
dst	pointer
)	O
{	O
for	O
(	O
p	pointer
=	O
iv	pointer
;	O
length	long
>=	O
block_size	long
;	O
p	pointer
=	O
dst	pointer
,	O
dst	pointer
+=	O
block_size	long
,	O
src	pointer
+=	O
block_size	long
,	O
length	long
-=	O
block_size	long
)	O
{	O
f	pointer
(	O
ctx	pointer
,	O
block_size	long
,	O
dst	pointer
,	O
p	pointer
)	O
;	O
memxor	O
(	O
dst	pointer
,	O
src	pointer
,	O
block_size	long
)	O
;	O
}	O
}	O
else	O
{	O
for	O
(	O
p	pointer
=	O
iv	pointer
;	O
length	long
>=	O
block_size	long
;	O
p	pointer
=	O
dst	pointer
,	O
dst	pointer
+=	O
block_size	long
,	O
src	pointer
+=	O
block_size	long
,	O
length	long
-=	O
block_size	long
)	O
{	O
f	pointer
(	O
ctx	pointer
,	O
block_size	long
,	O
buffer	pointer
,	O
p	pointer
)	O
;	O
memxor	O
(	O
dst	pointer
,	O
buffer	pointer
,	O
block_size	long
)	O
;	O
}	O
}	O
if	O
(	O
p	pointer
!=	O
iv	pointer
)	O
memcpy	function
(	O
iv	pointer
,	O
p	pointer
,	O
block_size	long
)	O
;	O
if	O
(	O
length	long
)	O
{	O
f	pointer
(	O
ctx	pointer
,	O
block_size	long
,	O
buffer	pointer
,	O
iv	pointer
)	O
;	O
memxor3	O
(	O
dst	pointer
,	O
buffer	pointer
,	O
src	pointer
,	O
length	long
)	O
;	O
}	O
}	O
void	O
cfb_decrypt	O
(	O
const	O
void	O
*	O
ctx	pointer
,	O
nettle_cipher_func	function
*	O
f	pointer
,	O
size_t	long
block_size	long
,	O
uint8_t	char
*	O
iv	pointer
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
dst	pointer
,	O
const	O
uint8_t	char
*	O
src	pointer
)	O
{	O
if	O
(	O
src	pointer
!=	O
dst	pointer
)	O
{	O
size_t	long
left	long
=	O
length	long
%	O
block_size	long
;	O
length	long
-=	O
left	long
;	O
if	O
(	O
length	long
>	O
0	int
)	O
{	O
f	pointer
(	O
ctx	pointer
,	O
block_size	long
,	O
dst	pointer
,	O
iv	pointer
)	O
;	O
f	pointer
(	O
ctx	pointer
,	O
length	long
-	O
block_size	long
,	O
dst	pointer
+	O
block_size	long
,	O
src	pointer
)	O
;	O
memcpy	function
(	O
iv	pointer
,	O
src	pointer
+	O
length	long
-	O
block_size	long
,	O
block_size	long
)	O
;	O
memxor	O
(	O
dst	pointer
,	O
src	pointer
,	O
length	long
)	O
;	O
}	O
if	O
(	O
left	long
>	O
0	int
)	O
{	O
TMP_DECL	O
(	O
buffer	pointer
,	O
uint8_t	char
,	O
NETTLE_MAX_CIPHER_BLOCK_SIZE	O
)	O
;	O
TMP_ALLOC	O
(	O
buffer	pointer
,	O
block_size	long
)	O
;	O
f	pointer
(	O
ctx	pointer
,	O
block_size	long
,	O
buffer	pointer
,	O
iv	pointer
)	O
;	O
memxor3	O
(	O
dst	pointer
+	O
length	long
,	O
src	pointer
+	O
length	long
,	O
buffer	pointer
,	O
left	long
)	O
;	O
}	O
}	O
else	O
{	O
TMP_DECL	O
(	O
buffer	pointer
,	O
uint8_t	char
,	O
CFB_BUFFER_LIMIT	int
)	O
;	O
TMP_DECL	O
(	O
initial_iv	pointer
,	O
uint8_t	char
,	O
NETTLE_MAX_CIPHER_BLOCK_SIZE	O
)	O
;	O
size_t	long
buffer_size	long
;	O
size_t	long
left	long
;	O
buffer_size	long
=	O
CFB_BUFFER_LIMIT	int
-	O
(	O
CFB_BUFFER_LIMIT	int
%	O
block_size	long
)	O
;	O
TMP_ALLOC	O
(	O
buffer	pointer
,	O
buffer_size	long
)	O
;	O
TMP_ALLOC	O
(	O
initial_iv	pointer
,	O
block_size	long
)	O
;	O
left	long
=	O
length	long
%	O
block_size	long
;	O
length	long
-=	O
left	long
;	O
while	O
(	O
length	long
>	O
0	int
)	O
{	O
size_t	long
part	long
=	O
length	long
>	O
buffer_size	long
?	O
buffer_size	long
:	O
length	long
;	O
f	pointer
(	O
ctx	pointer
,	O
block_size	long
,	O
buffer	pointer
,	O
iv	pointer
)	O
;	O
f	pointer
(	O
ctx	pointer
,	O
part	long
-	O
block_size	long
,	O
buffer	pointer
+	O
block_size	long
,	O
dst	pointer
)	O
;	O
memcpy	function
(	O
iv	pointer
,	O
dst	pointer
+	O
part	long
-	O
block_size	long
,	O
block_size	long
)	O
;	O
memxor	O
(	O
dst	pointer
,	O
buffer	pointer
,	O
part	long
)	O
;	O
length	long
-=	O
part	long
;	O
dst	pointer
+=	O
part	long
;	O
}	O
if	O
(	O
left	long
>	O
0	int
)	O
{	O
f	pointer
(	O
ctx	pointer
,	O
block_size	long
,	O
buffer	pointer
,	O
iv	pointer
)	O
;	O
memxor	O
(	O
dst	pointer
,	O
buffer	pointer
,	O
left	long
)	O
;	O
}	O
}	O
}	O
void	O
cfb8_encrypt	O
(	O
const	O
void	O
*	O
ctx	pointer
,	O
nettle_cipher_func	function
*	O
f	pointer
,	O
size_t	long
block_size	long
,	O
uint8_t	char
*	O
iv	pointer
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
dst	pointer
,	O
const	O
uint8_t	char
*	O
src	pointer
)	O
{	O
TMP_DECL	O
(	O
buffer	pointer
,	O
uint8_t	char
,	O
NETTLE_MAX_CIPHER_BLOCK_SIZE	O
*	O
2	int
)	O
;	O
TMP_DECL	O
(	O
outbuf	pointer
,	O
uint8_t	char
,	O
NETTLE_MAX_CIPHER_BLOCK_SIZE	O
)	O
;	O
TMP_ALLOC	O
(	O
buffer	pointer
,	O
block_size	long
*	O
2	int
)	O
;	O
TMP_ALLOC	O
(	O
outbuf	pointer
,	O
block_size	long
)	O
;	O
uint8_t	char
pos	char
;	O
memcpy	function
(	O
buffer	pointer
,	O
iv	pointer
,	O
block_size	long
)	O
;	O
pos	char
=	O
0	int
;	O
while	O
(	O
length	long
)	O
{	O
uint8_t	char
t	char
;	O
if	O
(	O
pos	char
==	O
block_size	long
)	O
{	O
memcpy	function
(	O
buffer	pointer
,	O
buffer	pointer
+	O
block_size	long
,	O
block_size	long
)	O
;	O
pos	char
=	O
0	int
;	O
}	O
f	pointer
(	O
ctx	pointer
,	O
block_size	long
,	O
outbuf	pointer
,	O
buffer	pointer
+	O
pos	char
)	O
;	O
t	char
=	O
*	O
(	O
dst	pointer
++	O
)	O
=	O
*	O
(	O
src	pointer
++	O
)	O
^	O
outbuf	pointer
[	O
0	int
]	O
;	O
buffer	pointer
[	O
pos	char
+	O
block_size	long
]	O
=	O
t	char
;	O
length	long
--	O
;	O
pos	char
++	O
;	O
}	O
memcpy	function
(	O
iv	pointer
,	O
buffer	pointer
+	O
pos	char
,	O
block_size	long
)	O
;	O
}	O
void	O
cfb8_decrypt	O
(	O
const	O
void	O
*	O
ctx	pointer
,	O
nettle_cipher_func	function
*	O
f	pointer
,	O
size_t	long
block_size	long
,	O
uint8_t	char
*	O
iv	pointer
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
dst	pointer
,	O
const	O
uint8_t	char
*	O
src	pointer
)	O
{	O
TMP_DECL	O
(	O
buffer	pointer
,	O
uint8_t	char
,	O
NETTLE_MAX_CIPHER_BLOCK_SIZE	O
*	O
2	int
)	O
;	O
TMP_DECL	O
(	O
outbuf	pointer
,	O
uint8_t	char
,	O
NETTLE_MAX_CIPHER_BLOCK_SIZE	O
*	O
2	int
)	O
;	O
TMP_ALLOC	O
(	O
buffer	pointer
,	O
block_size	long
*	O
2	int
)	O
;	O
TMP_ALLOC	O
(	O
outbuf	pointer
,	O
block_size	long
*	O
2	int
)	O
;	O
uint8_t	char
i	char
=	O
0	int
;	O
memcpy	function
(	O
buffer	pointer
,	O
iv	pointer
,	O
block_size	long
)	O
;	O
memcpy	function
(	O
buffer	pointer
+	O
block_size	long
,	O
src	pointer
,	O
length	long
<	O
block_size	long
?	O
length	long
:	O
block_size	long
)	O
;	O
while	O
(	O
length	long
)	O
{	O
for	O
(	O
i	char
=	O
0	int
;	O
i	char
<	O
length	long
&&	O
i	char
<	O
block_size	long
;	O
i	char
++	O
)	O
f	pointer
(	O
ctx	pointer
,	O
block_size	long
,	O
outbuf	pointer
+	O
i	char
,	O
buffer	pointer
+	O
i	char
)	O
;	O
memxor3	O
(	O
dst	pointer
,	O
src	pointer
,	O
outbuf	pointer
,	O
i	char
)	O
;	O
length	long
-=	O
i	char
;	O
src	pointer
+=	O
i	char
;	O
dst	pointer
+=	O
i	char
;	O
memcpy	function
(	O
buffer	pointer
,	O
buffer	pointer
+	O
block_size	long
,	O
block_size	long
)	O
;	O
memcpy	function
(	O
buffer	pointer
+	O
block_size	long
,	O
src	pointer
,	O
length	long
<	O
block_size	long
?	O
length	long
:	O
block_size	long
)	O
;	O
}	O
memcpy	function
(	O
iv	pointer
,	O
buffer	pointer
+	O
i	char
,	O
block_size	long
)	O
;	O
}	O
