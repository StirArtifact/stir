void	O
poptSetExecPath	function
(	O
poptContext	pointer
con	pointer
,	O
const	O
char	O
*	O
path	pointer
,	O
int	O
allowAbsolute	int
)	O
{	O
if	O
(	O
con	pointer
->	O
execPath	pointer
)	O
free	function
(	O
con	pointer
->	O
execPath	pointer
)	O
;	O
con	pointer
->	O
execPath	pointer
=	O
strdup	function
(	O
path	pointer
)	O
;	O
con	pointer
->	O
execAbsolute	int
=	O
allowAbsolute	int
;	O
}	O
static	O
void	O
invokeCallbacks	function
(	O
poptContext	pointer
con	pointer
,	O
const	O
struct	O
poptOption	struct
*	O
table	pointer
,	O
int	O
post	int
)	O
{	O
const	O
struct	O
poptOption	struct
*	O
opt	pointer
=	O
table	pointer
;	O
poptCallbackType	pointer
cb	pointer
;	O
while	O
(	O
opt	pointer
->	O
longName	pointer
||	O
opt	pointer
->	O
shortName	char
||	O
opt	pointer
->	O
arg	pointer
)	O
{	O
if	O
(	O
(	O
opt	pointer
->	O
argInfo	int
&	O
POPT_ARG_MASK	int
)	O
==	O
POPT_ARG_INCLUDE_TABLE	int
)	O
{	O
invokeCallbacks	function
(	O
con	pointer
,	O
opt	pointer
->	O
arg	pointer
,	O
post	int
)	O
;	O
}	O
else	O
if	O
(	O
(	O
(	O
opt	pointer
->	O
argInfo	int
&	O
POPT_ARG_MASK	int
)	O
==	O
POPT_ARG_CALLBACK	int
)	O
&&	O
(	O
(	O
!	O
post	int
&&	O
(	O
opt	pointer
->	O
argInfo	int
&	O
POPT_CBFLAG_PRE	int
)	O
)	O
||	O
(	O
post	int
&&	O
(	O
opt	pointer
->	O
argInfo	int
&	O
POPT_CBFLAG_POST	int
)	O
)	O
)	O
)	O
{	O
cb	pointer
=	O
(	O
poptCallbackType	pointer
)	O
opt	pointer
->	O
arg	pointer
;	O
cb	pointer
(	O
con	pointer
,	O
post	int
?	O
POPT_CALLBACK_REASON_POST	int
:	O
POPT_CALLBACK_REASON_PRE	int
,	O
NULL	O
,	O
NULL	O
,	O
opt	pointer
->	O
descrip	pointer
)	O
;	O
}	O
opt	pointer
++	O
;	O
}	O
}	O
poptContext	pointer
poptGetContext	function
(	O
const	O
char	O
*	O
name	pointer
,	O
int	O
argc	pointer
,	O
char	O
*	O
*	O
argv	pointer
,	O
const	O
struct	O
poptOption	struct
*	O
options	pointer
,	O
int	O
flags	enum
)	O
{	O
poptContext	pointer
con	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
con	pointer
)	O
)	O
;	O
memset	function
(	O
con	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
con	pointer
)	O
)	O
;	O
con	pointer
->	O
os	pointer
=	O
con	pointer
->	O
optionStack	array
;	O
con	pointer
->	O
os	pointer
->	O
argc	pointer
=	O
argc	pointer
;	O
con	pointer
->	O
os	pointer
->	O
argv	pointer
=	O
argv	pointer
;	O
if	O
(	O
!	O
(	O
flags	enum
&	O
POPT_CONTEXT_KEEP_FIRST	O
)	O
)	O
con	pointer
->	O
os	pointer
->	O
next	pointer
=	O
1	int
;	O
con	pointer
->	O
leftovers	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
char	O
*	O
)	O
*	O
(	O
argc	pointer
+	O
1	int
)	O
)	O
;	O
con	pointer
->	O
options	pointer
=	O
options	pointer
;	O
con	pointer
->	O
finalArgv	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
con	pointer
->	O
finalArgv	pointer
)	O
*	O
(	O
argc	pointer
*	O
2	int
)	O
)	O
;	O
con	pointer
->	O
finalArgvAlloced	int
=	O
argc	pointer
*	O
2	int
;	O
con	pointer
->	O
flags	enum
=	O
flags	enum
;	O
con	pointer
->	O
execAbsolute	int
=	O
1	int
;	O
if	O
(	O
getenv	function
(	O
"POSIXLY_CORRECT"	pointer
)	O
||	O
getenv	function
(	O
"POSIX_ME_HARDER"	pointer
)	O
)	O
con	pointer
->	O
flags	enum
|=	O
POPT_CONTEXT_POSIXMEHARDER	O
;	O
if	O
(	O
name	pointer
)	O
con	pointer
->	O
appName	pointer
=	O
strcpy	function
(	O
malloc	function
(	O
strlen	function
(	O
name	pointer
)	O
+	O
1	int
)	O
,	O
name	pointer
)	O
;	O
invokeCallbacks	function
(	O
con	pointer
,	O
con	pointer
->	O
options	pointer
,	O
0	int
)	O
;	O
return	O
con	pointer
;	O
}	O
void	O
poptResetContext	function
(	O
poptContext	pointer
con	pointer
)	O
{	O
int	O
i	array
;	O
con	pointer
->	O
os	pointer
=	O
con	pointer
->	O
optionStack	array
;	O
con	pointer
->	O
os	pointer
->	O
currAlias	pointer
=	O
NULL	O
;	O
con	pointer
->	O
os	pointer
->	O
nextCharArg	pointer
=	O
NULL	O
;	O
con	pointer
->	O
os	pointer
->	O
nextArg	pointer
=	O
NULL	O
;	O
con	pointer
->	O
os	pointer
->	O
next	pointer
=	O
1	int
;	O
con	pointer
->	O
numLeftovers	int
=	O
0	int
;	O
con	pointer
->	O
nextLeftover	int
=	O
0	int
;	O
con	pointer
->	O
restLeftover	int
=	O
0	int
;	O
con	pointer
->	O
doExec	pointer
=	O
NULL	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
con	pointer
->	O
finalArgvCount	int
;	O
i	array
++	O
)	O
free	function
(	O
con	pointer
->	O
finalArgv	pointer
[	O
i	array
]	O
)	O
;	O
con	pointer
->	O
finalArgvCount	int
=	O
0	int
;	O
}	O
static	O
int	O
handleExec	function
(	O
poptContext	pointer
con	pointer
,	O
char	O
*	O
longName	pointer
,	O
char	O
shortName	char
)	O
{	O
int	O
i	array
;	O
i	array
=	O
con	pointer
->	O
numExecs	int
-	O
1	int
;	O
if	O
(	O
longName	pointer
)	O
{	O
while	O
(	O
i	array
>=	O
0	int
&&	O
(	O
!	O
con	pointer
->	O
execs	pointer
[	O
i	array
]	O
.	O
longName	pointer
||	O
strcmp	function
(	O
con	pointer
->	O
execs	pointer
[	O
i	array
]	O
.	O
longName	pointer
,	O
longName	pointer
)	O
)	O
)	O
i	array
--	O
;	O
}	O
else	O
{	O
while	O
(	O
i	array
>=	O
0	int
&&	O
con	pointer
->	O
execs	pointer
[	O
i	array
]	O
.	O
shortName	char
!=	O
shortName	char
)	O
i	array
--	O
;	O
}	O
if	O
(	O
i	array
<	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
con	pointer
->	O
flags	enum
&	O
POPT_CONTEXT_NO_EXEC	O
)	O
return	O
1	int
;	O
if	O
(	O
!	O
con	pointer
->	O
doExec	pointer
)	O
{	O
con	pointer
->	O
doExec	pointer
=	O
con	pointer
->	O
execs	pointer
+	O
i	array
;	O
return	O
1	int
;	O
}	O
if	O
(	O
(	O
con	pointer
->	O
finalArgvCount	int
+	O
1	int
)	O
>=	O
(	O
con	pointer
->	O
finalArgvAlloced	int
)	O
)	O
{	O
con	pointer
->	O
finalArgvAlloced	int
+=	O
10	int
;	O
con	pointer
->	O
finalArgv	pointer
=	O
realloc	function
(	O
con	pointer
->	O
finalArgv	pointer
,	O
sizeof	O
(	O
*	O
con	pointer
->	O
finalArgv	pointer
)	O
*	O
con	pointer
->	O
finalArgvAlloced	int
)	O
;	O
}	O
i	array
=	O
con	pointer
->	O
finalArgvCount	int
++	O
;	O
con	pointer
->	O
finalArgv	pointer
[	O
i	array
]	O
=	O
malloc	function
(	O
(	O
longName	pointer
?	O
strlen	function
(	O
longName	pointer
)	O
:	O
0	int
)	O
+	O
3	int
)	O
;	O
if	O
(	O
longName	pointer
)	O
sprintf	function
(	O
con	pointer
->	O
finalArgv	pointer
[	O
i	array
]	O
,	O
"--%s"	pointer
,	O
longName	pointer
)	O
;	O
else	O
sprintf	function
(	O
con	pointer
->	O
finalArgv	pointer
[	O
i	array
]	O
,	O
"-%c"	pointer
,	O
shortName	char
)	O
;	O
return	O
1	int
;	O
}	O
static	O
int	O
handleAlias	function
(	O
poptContext	pointer
con	pointer
,	O
char	O
*	O
longName	pointer
,	O
char	O
shortName	char
,	O
char	O
*	O
nextCharArg	pointer
)	O
{	O
int	O
i	array
;	O
if	O
(	O
con	pointer
->	O
os	pointer
->	O
currAlias	pointer
&&	O
con	pointer
->	O
os	pointer
->	O
currAlias	pointer
->	O
longName	pointer
&&	O
longName	pointer
&&	O
!	O
strcmp	function
(	O
con	pointer
->	O
os	pointer
->	O
currAlias	pointer
->	O
longName	pointer
,	O
longName	pointer
)	O
)	O
return	O
0	int
;	O
if	O
(	O
con	pointer
->	O
os	pointer
->	O
currAlias	pointer
&&	O
shortName	char
&&	O
shortName	char
==	O
con	pointer
->	O
os	pointer
->	O
currAlias	pointer
->	O
shortName	char
)	O
return	O
0	int
;	O
i	array
=	O
con	pointer
->	O
numAliases	int
-	O
1	int
;	O
if	O
(	O
longName	pointer
)	O
{	O
while	O
(	O
i	array
>=	O
0	int
&&	O
(	O
!	O
con	pointer
->	O
aliases	pointer
[	O
i	array
]	O
.	O
longName	pointer
||	O
strcmp	function
(	O
con	pointer
->	O
aliases	pointer
[	O
i	array
]	O
.	O
longName	pointer
,	O
longName	pointer
)	O
)	O
)	O
i	array
--	O
;	O
}	O
else	O
{	O
while	O
(	O
i	array
>=	O
0	int
&&	O
con	pointer
->	O
aliases	pointer
[	O
i	array
]	O
.	O
shortName	char
!=	O
shortName	char
)	O
i	array
--	O
;	O
}	O
if	O
(	O
i	array
<	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
(	O
con	pointer
->	O
os	pointer
-	O
con	pointer
->	O
optionStack	array
+	O
1	int
)	O
==	O
POPT_OPTION_DEPTH	int
)	O
return	O
POPT_ERROR_OPTSTOODEEP	O
;	O
if	O
(	O
nextCharArg	pointer
&&	O
*	O
nextCharArg	pointer
)	O
con	pointer
->	O
os	pointer
->	O
nextCharArg	pointer
=	O
nextCharArg	pointer
;	O
con	pointer
->	O
os	pointer
++	O
;	O
con	pointer
->	O
os	pointer
->	O
next	pointer
=	O
0	int
;	O
con	pointer
->	O
os	pointer
->	O
stuffed	int
=	O
0	int
;	O
con	pointer
->	O
os	pointer
->	O
nextArg	pointer
=	O
con	pointer
->	O
os	pointer
->	O
nextCharArg	pointer
=	O
NULL	O
;	O
con	pointer
->	O
os	pointer
->	O
currAlias	pointer
=	O
con	pointer
->	O
aliases	pointer
+	O
i	array
;	O
con	pointer
->	O
os	pointer
->	O
argc	pointer
=	O
con	pointer
->	O
os	pointer
->	O
currAlias	pointer
->	O
argc	pointer
;	O
con	pointer
->	O
os	pointer
->	O
argv	pointer
=	O
con	pointer
->	O
os	pointer
->	O
currAlias	pointer
->	O
argv	pointer
;	O
return	O
1	int
;	O
}	O
static	O
void	O
execCommand	function
(	O
poptContext	pointer
con	pointer
)	O
{	O
(	O
void	O
)	O
con	pointer
;	O
abort	function
(	O
)	O
;	O
}	O
static	O
const	O
struct	O
poptOption	struct
*	O
findOption	function
(	O
const	O
struct	O
poptOption	struct
*	O
table	pointer
,	O
const	O
char	O
*	O
longName	pointer
,	O
char	O
shortName	char
,	O
poptCallbackType	pointer
*	O
callback	pointer
,	O
void	O
*	O
*	O
callbackData	pointer
,	O
int	O
singleDash	int
)	O
{	O
const	O
struct	O
poptOption	struct
*	O
opt	pointer
=	O
table	pointer
;	O
const	O
struct	O
poptOption	struct
*	O
opt2	pointer
;	O
const	O
struct	O
poptOption	struct
*	O
cb	pointer
=	O
NULL	O
;	O
if	O
(	O
singleDash	int
&&	O
!	O
shortName	char
&&	O
!	O
*	O
longName	pointer
)	O
shortName	char
=	O
'-'	O
;	O
while	O
(	O
opt	pointer
->	O
longName	pointer
||	O
opt	pointer
->	O
shortName	char
||	O
opt	pointer
->	O
arg	pointer
)	O
{	O
if	O
(	O
(	O
opt	pointer
->	O
argInfo	int
&	O
POPT_ARG_MASK	int
)	O
==	O
POPT_ARG_INCLUDE_TABLE	int
)	O
{	O
opt2	pointer
=	O
findOption	function
(	O
opt	pointer
->	O
arg	pointer
,	O
longName	pointer
,	O
shortName	char
,	O
callback	pointer
,	O
callbackData	pointer
,	O
singleDash	int
)	O
;	O
if	O
(	O
opt2	pointer
)	O
{	O
if	O
(	O
*	O
callback	pointer
&&	O
!	O
*	O
callbackData	pointer
)	O
*	O
callbackData	pointer
=	O
opt	pointer
->	O
descrip	pointer
;	O
return	O
opt2	pointer
;	O
}	O
}	O
else	O
if	O
(	O
(	O
opt	pointer
->	O
argInfo	int
&	O
POPT_ARG_MASK	int
)	O
==	O
POPT_ARG_CALLBACK	int
)	O
{	O
cb	pointer
=	O
opt	pointer
;	O
}	O
else	O
if	O
(	O
longName	pointer
&&	O
opt	pointer
->	O
longName	pointer
&&	O
(	O
!	O
singleDash	int
||	O
(	O
opt	pointer
->	O
argInfo	int
&	O
POPT_ARGFLAG_ONEDASH	int
)	O
)	O
&&	O
!	O
strcmp	function
(	O
longName	pointer
,	O
opt	pointer
->	O
longName	pointer
)	O
)	O
{	O
break	O
;	O
}	O
else	O
if	O
(	O
shortName	char
&&	O
shortName	char
==	O
opt	pointer
->	O
shortName	char
)	O
{	O
break	O
;	O
}	O
opt	pointer
++	O
;	O
}	O
if	O
(	O
!	O
opt	pointer
->	O
longName	pointer
&&	O
!	O
opt	pointer
->	O
shortName	char
)	O
return	O
NULL	O
;	O
*	O
callbackData	pointer
=	O
NULL	O
;	O
*	O
callback	pointer
=	O
NULL	O
;	O
if	O
(	O
cb	pointer
)	O
{	O
*	O
callback	pointer
=	O
(	O
poptCallbackType	pointer
)	O
cb	pointer
->	O
arg	pointer
;	O
if	O
(	O
!	O
(	O
cb	pointer
->	O
argInfo	int
&	O
POPT_CBFLAG_INC_DATA	int
)	O
)	O
*	O
callbackData	pointer
=	O
cb	pointer
->	O
descrip	pointer
;	O
}	O
return	O
opt	pointer
;	O
}	O
int	O
poptGetNextOpt	function
(	O
poptContext	pointer
con	pointer
)	O
{	O
char	O
*	O
optString	pointer
,	O
*	O
chptr	pointer
,	O
*	O
localOptString	pointer
;	O
char	O
*	O
longArg	pointer
=	O
NULL	O
;	O
char	O
*	O
origOptString	pointer
;	O
long	O
aLong	long
;	O
char	O
*	O
end	pointer
;	O
const	O
struct	O
poptOption	struct
*	O
opt	pointer
=	O
NULL	O
;	O
int	O
done	int
=	O
0	int
;	O
int	O
i	array
;	O
poptCallbackType	pointer
cb	pointer
;	O
void	O
*	O
cbData	pointer
;	O
int	O
singleDash	int
;	O
while	O
(	O
!	O
done	int
)	O
{	O
while	O
(	O
!	O
con	pointer
->	O
os	pointer
->	O
nextCharArg	pointer
&&	O
con	pointer
->	O
os	pointer
->	O
next	pointer
==	O
con	pointer
->	O
os	pointer
->	O
argc	pointer
&&	O
con	pointer
->	O
os	pointer
>	O
con	pointer
->	O
optionStack	array
)	O
con	pointer
->	O
os	pointer
--	O
;	O
if	O
(	O
!	O
con	pointer
->	O
os	pointer
->	O
nextCharArg	pointer
&&	O
con	pointer
->	O
os	pointer
->	O
next	pointer
==	O
con	pointer
->	O
os	pointer
->	O
argc	pointer
)	O
{	O
invokeCallbacks	function
(	O
con	pointer
,	O
con	pointer
->	O
options	pointer
,	O
1	int
)	O
;	O
if	O
(	O
con	pointer
->	O
doExec	pointer
)	O
execCommand	function
(	O
con	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
!	O
con	pointer
->	O
os	pointer
->	O
nextCharArg	pointer
)	O
{	O
origOptString	pointer
=	O
con	pointer
->	O
os	pointer
->	O
argv	pointer
[	O
con	pointer
->	O
os	pointer
->	O
next	pointer
++	O
]	O
;	O
if	O
(	O
con	pointer
->	O
restLeftover	int
||	O
*	O
origOptString	pointer
!=	O
'-'	O
)	O
{	O
con	pointer
->	O
leftovers	pointer
[	O
con	pointer
->	O
numLeftovers	int
++	O
]	O
=	O
origOptString	pointer
;	O
if	O
(	O
con	pointer
->	O
flags	enum
&	O
POPT_CONTEXT_POSIXMEHARDER	O
)	O
con	pointer
->	O
restLeftover	int
=	O
1	int
;	O
continue	O
;	O
}	O
localOptString	pointer
=	O
optString	pointer
=	O
strcpy	function
(	O
alloca	function
(	O
strlen	function
(	O
origOptString	pointer
)	O
+	O
1	int
)	O
,	O
origOptString	pointer
)	O
;	O
if	O
(	O
!	O
optString	pointer
[	O
0	int
]	O
)	O
return	O
POPT_ERROR_BADOPT	O
;	O
if	O
(	O
optString	pointer
[	O
1	int
]	O
==	O
'-'	O
&&	O
!	O
optString	pointer
[	O
2	int
]	O
)	O
{	O
con	pointer
->	O
restLeftover	int
=	O
1	int
;	O
continue	O
;	O
}	O
else	O
{	O
optString	pointer
++	O
;	O
if	O
(	O
*	O
optString	pointer
==	O
'-'	O
)	O
singleDash	int
=	O
0	int
,	O
optString	pointer
++	O
;	O
else	O
singleDash	int
=	O
1	int
;	O
if	O
(	O
handleAlias	function
(	O
con	pointer
,	O
optString	pointer
,	O
'\0'	O
,	O
NULL	O
)	O
)	O
continue	O
;	O
if	O
(	O
handleExec	function
(	O
con	pointer
,	O
optString	pointer
,	O
'\0'	O
)	O
)	O
continue	O
;	O
chptr	pointer
=	O
optString	pointer
;	O
while	O
(	O
*	O
chptr	pointer
&&	O
*	O
chptr	pointer
!=	O
'='	O
)	O
chptr	pointer
++	O
;	O
if	O
(	O
*	O
chptr	pointer
==	O
'='	O
)	O
{	O
longArg	pointer
=	O
origOptString	pointer
+	O
(	O
chptr	pointer
-	O
localOptString	pointer
)	O
+	O
1	int
;	O
*	O
chptr	pointer
=	O
'\0'	O
;	O
}	O
opt	pointer
=	O
findOption	function
(	O
con	pointer
->	O
options	pointer
,	O
optString	pointer
,	O
'\0'	O
,	O
&	O
cb	pointer
,	O
&	O
cbData	pointer
,	O
singleDash	int
)	O
;	O
if	O
(	O
!	O
opt	pointer
&&	O
!	O
singleDash	int
)	O
return	O
POPT_ERROR_BADOPT	O
;	O
}	O
if	O
(	O
!	O
opt	pointer
)	O
con	pointer
->	O
os	pointer
->	O
nextCharArg	pointer
=	O
origOptString	pointer
+	O
1	int
;	O
}	O
if	O
(	O
con	pointer
->	O
os	pointer
->	O
nextCharArg	pointer
)	O
{	O
origOptString	pointer
=	O
con	pointer
->	O
os	pointer
->	O
nextCharArg	pointer
;	O
con	pointer
->	O
os	pointer
->	O
nextCharArg	pointer
=	O
NULL	O
;	O
if	O
(	O
handleAlias	function
(	O
con	pointer
,	O
NULL	O
,	O
*	O
origOptString	pointer
,	O
origOptString	pointer
+	O
1	int
)	O
)	O
{	O
origOptString	pointer
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
handleExec	function
(	O
con	pointer
,	O
NULL	O
,	O
*	O
origOptString	pointer
)	O
)	O
continue	O
;	O
opt	pointer
=	O
findOption	function
(	O
con	pointer
->	O
options	pointer
,	O
NULL	O
,	O
*	O
origOptString	pointer
,	O
&	O
cb	pointer
,	O
&	O
cbData	pointer
,	O
0	int
)	O
;	O
if	O
(	O
!	O
opt	pointer
)	O
return	O
POPT_ERROR_BADOPT	O
;	O
origOptString	pointer
++	O
;	O
if	O
(	O
*	O
origOptString	pointer
)	O
con	pointer
->	O
os	pointer
->	O
nextCharArg	pointer
=	O
origOptString	pointer
;	O
}	O
if	O
(	O
opt	pointer
->	O
arg	pointer
&&	O
(	O
opt	pointer
->	O
argInfo	int
&	O
POPT_ARG_MASK	int
)	O
==	O
POPT_ARG_NONE	int
)	O
{	O
*	O
(	O
(	O
int	O
*	O
)	O
opt	pointer
->	O
arg	pointer
)	O
=	O
1	int
;	O
}	O
else	O
if	O
(	O
(	O
opt	pointer
->	O
argInfo	int
&	O
POPT_ARG_MASK	int
)	O
==	O
POPT_ARG_VAL	int
)	O
{	O
if	O
(	O
opt	pointer
->	O
arg	pointer
)	O
*	O
(	O
(	O
int	O
*	O
)	O
opt	pointer
->	O
arg	pointer
)	O
=	O
opt	pointer
->	O
val	int
;	O
}	O
else	O
if	O
(	O
(	O
opt	pointer
->	O
argInfo	int
&	O
POPT_ARG_MASK	int
)	O
!=	O
POPT_ARG_NONE	int
)	O
{	O
if	O
(	O
longArg	pointer
)	O
{	O
con	pointer
->	O
os	pointer
->	O
nextArg	pointer
=	O
longArg	pointer
;	O
}	O
else	O
if	O
(	O
con	pointer
->	O
os	pointer
->	O
nextCharArg	pointer
)	O
{	O
con	pointer
->	O
os	pointer
->	O
nextArg	pointer
=	O
con	pointer
->	O
os	pointer
->	O
nextCharArg	pointer
;	O
con	pointer
->	O
os	pointer
->	O
nextCharArg	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
while	O
(	O
con	pointer
->	O
os	pointer
->	O
next	pointer
==	O
con	pointer
->	O
os	pointer
->	O
argc	pointer
&&	O
con	pointer
->	O
os	pointer
>	O
con	pointer
->	O
optionStack	array
)	O
con	pointer
->	O
os	pointer
--	O
;	O
if	O
(	O
con	pointer
->	O
os	pointer
->	O
next	pointer
==	O
con	pointer
->	O
os	pointer
->	O
argc	pointer
)	O
return	O
POPT_ERROR_NOARG	O
;	O
con	pointer
->	O
os	pointer
->	O
nextArg	pointer
=	O
con	pointer
->	O
os	pointer
->	O
argv	pointer
[	O
con	pointer
->	O
os	pointer
->	O
next	pointer
++	O
]	O
;	O
}	O
if	O
(	O
opt	pointer
->	O
arg	pointer
)	O
{	O
switch	O
(	O
opt	pointer
->	O
argInfo	int
&	O
POPT_ARG_MASK	int
)	O
{	O
case	O
POPT_ARG_STRING	int
:	O
*	O
(	O
(	O
char	O
*	O
*	O
)	O
opt	pointer
->	O
arg	pointer
)	O
=	O
con	pointer
->	O
os	pointer
->	O
nextArg	pointer
;	O
break	O
;	O
case	O
POPT_ARG_INT	int
:	O
case	O
POPT_ARG_LONG	int
:	O
aLong	long
=	O
strtol	function
(	O
con	pointer
->	O
os	pointer
->	O
nextArg	pointer
,	O
&	O
end	pointer
,	O
0	int
)	O
;	O
if	O
(	O
!	O
(	O
end	pointer
&&	O
*	O
end	pointer
==	O
'\0'	O
)	O
)	O
return	O
POPT_ERROR_BADNUMBER	O
;	O
if	O
(	O
aLong	long
==	O
LONG_MIN	O
||	O
aLong	long
==	O
LONG_MAX	O
)	O
return	O
POPT_ERROR_OVERFLOW	O
;	O
if	O
(	O
(	O
opt	pointer
->	O
argInfo	int
&	O
POPT_ARG_MASK	int
)	O
==	O
POPT_ARG_LONG	int
)	O
{	O
*	O
(	O
(	O
long	O
*	O
)	O
opt	pointer
->	O
arg	pointer
)	O
=	O
aLong	long
;	O
}	O
else	O
{	O
if	O
(	O
aLong	long
>	O
INT_MAX	O
||	O
aLong	long
<	O
INT_MIN	O
)	O
return	O
POPT_ERROR_OVERFLOW	O
;	O
*	O
(	O
(	O
int	O
*	O
)	O
opt	pointer
->	O
arg	pointer
)	O
=	O
aLong	long
;	O
}	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stdout	pointer
,	O
POPT_	O
(	O
"option type (%d) not implemented in popt\n"	pointer
)	O
,	O
opt	pointer
->	O
argInfo	int
&	O
POPT_ARG_MASK	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
}	O
if	O
(	O
cb	pointer
)	O
cb	pointer
(	O
con	pointer
,	O
POPT_CALLBACK_REASON_OPTION	int
,	O
opt	pointer
,	O
con	pointer
->	O
os	pointer
->	O
nextArg	pointer
,	O
cbData	pointer
)	O
;	O
else	O
if	O
(	O
opt	pointer
->	O
val	int
&&	O
(	O
(	O
opt	pointer
->	O
argInfo	int
&	O
POPT_ARG_MASK	int
)	O
!=	O
POPT_ARG_VAL	int
)	O
)	O
done	int
=	O
1	int
;	O
if	O
(	O
(	O
con	pointer
->	O
finalArgvCount	int
+	O
2	int
)	O
>=	O
(	O
con	pointer
->	O
finalArgvAlloced	int
)	O
)	O
{	O
con	pointer
->	O
finalArgvAlloced	int
+=	O
10	int
;	O
con	pointer
->	O
finalArgv	pointer
=	O
realloc	function
(	O
con	pointer
->	O
finalArgv	pointer
,	O
sizeof	O
(	O
*	O
con	pointer
->	O
finalArgv	pointer
)	O
*	O
con	pointer
->	O
finalArgvAlloced	int
)	O
;	O
}	O
i	array
=	O
con	pointer
->	O
finalArgvCount	int
++	O
;	O
con	pointer
->	O
finalArgv	pointer
[	O
i	array
]	O
=	O
malloc	function
(	O
(	O
opt	pointer
->	O
longName	pointer
?	O
strlen	function
(	O
opt	pointer
->	O
longName	pointer
)	O
:	O
0	int
)	O
+	O
3	int
)	O
;	O
if	O
(	O
opt	pointer
->	O
longName	pointer
)	O
sprintf	function
(	O
con	pointer
->	O
finalArgv	pointer
[	O
i	array
]	O
,	O
"--%s"	pointer
,	O
opt	pointer
->	O
longName	pointer
)	O
;	O
else	O
sprintf	function
(	O
con	pointer
->	O
finalArgv	pointer
[	O
i	array
]	O
,	O
"-%c"	pointer
,	O
opt	pointer
->	O
shortName	char
)	O
;	O
if	O
(	O
opt	pointer
->	O
arg	pointer
&&	O
(	O
opt	pointer
->	O
argInfo	int
&	O
POPT_ARG_MASK	int
)	O
!=	O
POPT_ARG_NONE	int
&&	O
(	O
opt	pointer
->	O
argInfo	int
&	O
POPT_ARG_MASK	int
)	O
!=	O
POPT_ARG_VAL	int
)	O
con	pointer
->	O
finalArgv	pointer
[	O
con	pointer
->	O
finalArgvCount	int
++	O
]	O
=	O
strdup	function
(	O
con	pointer
->	O
os	pointer
->	O
nextArg	pointer
)	O
;	O
}	O
return	O
opt	pointer
->	O
val	int
;	O
}	O
char	O
*	O
poptGetOptArg	function
(	O
poptContext	pointer
con	pointer
)	O
{	O
char	O
*	O
ret	pointer
=	O
con	pointer
->	O
os	pointer
->	O
nextArg	pointer
;	O
con	pointer
->	O
os	pointer
->	O
nextArg	pointer
=	O
NULL	O
;	O
return	O
ret	pointer
;	O
}	O
char	O
*	O
poptGetArg	function
(	O
poptContext	pointer
con	pointer
)	O
{	O
if	O
(	O
con	pointer
->	O
numLeftovers	int
==	O
con	pointer
->	O
nextLeftover	int
)	O
return	O
NULL	O
;	O
return	O
(	O
con	pointer
->	O
leftovers	pointer
[	O
con	pointer
->	O
nextLeftover	int
++	O
]	O
)	O
;	O
}	O
char	O
*	O
poptPeekArg	function
(	O
poptContext	pointer
con	pointer
)	O
{	O
if	O
(	O
con	pointer
->	O
numLeftovers	int
==	O
con	pointer
->	O
nextLeftover	int
)	O
return	O
NULL	O
;	O
return	O
(	O
con	pointer
->	O
leftovers	pointer
[	O
con	pointer
->	O
nextLeftover	int
]	O
)	O
;	O
}	O
char	O
*	O
*	O
poptGetArgs	function
(	O
poptContext	pointer
con	pointer
)	O
{	O
if	O
(	O
con	pointer
->	O
numLeftovers	int
==	O
con	pointer
->	O
nextLeftover	int
)	O
return	O
NULL	O
;	O
con	pointer
->	O
leftovers	pointer
[	O
con	pointer
->	O
numLeftovers	int
]	O
=	O
NULL	O
;	O
return	O
(	O
con	pointer
->	O
leftovers	pointer
+	O
con	pointer
->	O
nextLeftover	int
)	O
;	O
}	O
void	O
poptFreeContext	function
(	O
poptContext	pointer
con	pointer
)	O
{	O
int	O
i	array
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
con	pointer
->	O
numAliases	int
;	O
i	array
++	O
)	O
{	O
if	O
(	O
con	pointer
->	O
aliases	pointer
[	O
i	array
]	O
.	O
longName	pointer
)	O
free	function
(	O
con	pointer
->	O
aliases	pointer
[	O
i	array
]	O
.	O
longName	pointer
)	O
;	O
free	function
(	O
con	pointer
->	O
aliases	pointer
[	O
i	array
]	O
.	O
argv	pointer
)	O
;	O
}	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
con	pointer
->	O
numExecs	int
;	O
i	array
++	O
)	O
{	O
if	O
(	O
con	pointer
->	O
execs	pointer
[	O
i	array
]	O
.	O
longName	pointer
)	O
free	function
(	O
con	pointer
->	O
execs	pointer
[	O
i	array
]	O
.	O
longName	pointer
)	O
;	O
free	function
(	O
con	pointer
->	O
execs	pointer
[	O
i	array
]	O
.	O
script	enum
)	O
;	O
}	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
con	pointer
->	O
finalArgvCount	int
;	O
i	array
++	O
)	O
free	function
(	O
con	pointer
->	O
finalArgv	pointer
[	O
i	array
]	O
)	O
;	O
free	function
(	O
con	pointer
->	O
leftovers	pointer
)	O
;	O
free	function
(	O
con	pointer
->	O
finalArgv	pointer
)	O
;	O
if	O
(	O
con	pointer
->	O
appName	pointer
)	O
free	function
(	O
con	pointer
->	O
appName	pointer
)	O
;	O
if	O
(	O
con	pointer
->	O
aliases	pointer
)	O
free	function
(	O
con	pointer
->	O
aliases	pointer
)	O
;	O
if	O
(	O
con	pointer
->	O
otherHelp	pointer
)	O
free	function
(	O
con	pointer
->	O
otherHelp	pointer
)	O
;	O
if	O
(	O
con	pointer
->	O
execPath	pointer
)	O
free	function
(	O
con	pointer
->	O
execPath	pointer
)	O
;	O
free	function
(	O
con	pointer
)	O
;	O
}	O
int	O
poptAddAlias	function
(	O
poptContext	pointer
con	pointer
,	O
struct	O
poptAlias	struct
newAlias	struct
,	O
int	O
flags	enum
)	O
{	O
int	O
aliasNum	int
=	O
con	pointer
->	O
numAliases	int
++	O
;	O
struct	O
poptAlias	struct
*	O
alias	struct
;	O
(	O
void	O
)	O
flags	enum
;	O
if	O
(	O
!	O
con	pointer
->	O
aliases	pointer
)	O
con	pointer
->	O
aliases	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
newAlias	struct
)	O
*	O
con	pointer
->	O
numAliases	int
)	O
;	O
else	O
con	pointer
->	O
aliases	pointer
=	O
realloc	function
(	O
con	pointer
->	O
aliases	pointer
,	O
sizeof	O
(	O
newAlias	struct
)	O
*	O
con	pointer
->	O
numAliases	int
)	O
;	O
alias	struct
=	O
con	pointer
->	O
aliases	pointer
+	O
aliasNum	int
;	O
*	O
alias	struct
=	O
newAlias	struct
;	O
if	O
(	O
alias	struct
->	O
longName	pointer
)	O
alias	struct
->	O
longName	pointer
=	O
strcpy	function
(	O
malloc	function
(	O
strlen	function
(	O
alias	struct
->	O
longName	pointer
)	O
+	O
1	int
)	O
,	O
alias	struct
->	O
longName	pointer
)	O
;	O
else	O
alias	struct
->	O
longName	pointer
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
char	O
*	O
poptBadOption	function
(	O
poptContext	pointer
con	pointer
,	O
int	O
flags	enum
)	O
{	O
struct	O
optionStackEntry	struct
*	O
os	pointer
;	O
if	O
(	O
flags	enum
&	O
POPT_BADOPTION_NOALIAS	O
)	O
os	pointer
=	O
con	pointer
->	O
optionStack	array
;	O
else	O
os	pointer
=	O
con	pointer
->	O
os	pointer
;	O
return	O
os	pointer
->	O
argv	pointer
[	O
os	pointer
->	O
next	pointer
-	O
1	int
]	O
;	O
}	O
const	O
char	O
*	O
poptStrerror	function
(	O
const	O
int	O
error	pointer
)	O
{	O
switch	O
(	O
error	pointer
)	O
{	O
case	O
POPT_ERROR_NOARG	O
:	O
return	O
_	O
(	O
"missing argument"	pointer
)	O
;	O
case	O
POPT_ERROR_BADOPT	O
:	O
return	O
_	O
(	O
"unknown option"	pointer
)	O
;	O
case	O
POPT_ERROR_OPTSTOODEEP	O
:	O
return	O
POPT_	O
(	O
"aliases nested too deeply"	pointer
)	O
;	O
case	O
POPT_ERROR_BADQUOTE	O
:	O
return	O
POPT_	O
(	O
"error in parameter quoting"	pointer
)	O
;	O
case	O
POPT_ERROR_BADNUMBER	O
:	O
return	O
_	O
(	O
"invalid numeric value"	pointer
)	O
;	O
case	O
POPT_ERROR_OVERFLOW	O
:	O
return	O
POPT_	O
(	O
"number too large or too small"	pointer
)	O
;	O
case	O
POPT_ERROR_ERRNO	O
:	O
return	O
strerror	function
(	O
errno	O
)	O
;	O
default	O
:	O
return	O
POPT_	O
(	O
"unknown error"	pointer
)	O
;	O
}	O
}	O
int	O
poptStuffArgs	function
(	O
poptContext	pointer
con	pointer
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
i	array
;	O
if	O
(	O
(	O
con	pointer
->	O
os	pointer
-	O
con	pointer
->	O
optionStack	array
)	O
==	O
POPT_OPTION_DEPTH	int
)	O
return	O
POPT_ERROR_OPTSTOODEEP	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
argv	pointer
[	O
i	array
]	O
;	O
i	array
++	O
)	O
;	O
con	pointer
->	O
os	pointer
++	O
;	O
con	pointer
->	O
os	pointer
->	O
next	pointer
=	O
0	int
;	O
con	pointer
->	O
os	pointer
->	O
nextArg	pointer
=	O
con	pointer
->	O
os	pointer
->	O
nextCharArg	pointer
=	O
NULL	O
;	O
con	pointer
->	O
os	pointer
->	O
currAlias	pointer
=	O
NULL	O
;	O
con	pointer
->	O
os	pointer
->	O
argc	pointer
=	O
i	array
;	O
con	pointer
->	O
os	pointer
->	O
argv	pointer
=	O
argv	pointer
;	O
con	pointer
->	O
os	pointer
->	O
stuffed	int
=	O
1	int
;	O
return	O
0	int
;	O
}	O
const	O
char	O
*	O
poptGetInvocationName	function
(	O
poptContext	pointer
con	pointer
)	O
{	O
return	O
con	pointer
->	O
os	pointer
->	O
argv	pointer
[	O
0	int
]	O
;	O
}	O
