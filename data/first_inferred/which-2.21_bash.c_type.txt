static	O
char	O
*	O
extract_colon_unit	function
(	O
char	O
const	O
*	O
string	pointer
,	O
int	O
*	O
p_index	pointer
)	O
;	O
struct	O
user_info	struct
{	O
uid_t	int
uid	int
,	O
euid	int
;	O
GID_T	O
gid	int
,	O
egid	int
;	O
char	O
*	O
user_name	pointer
;	O
char	O
*	O
shell	pointer
;	O
char	O
*	O
home_dir	pointer
;	O
}	O
;	O
struct	O
user_info	struct
current_user	struct
=	O
{	O
(	O
uid_t	int
)	O
-	O
1	int
,	O
(	O
uid_t	int
)	O
-	O
1	int
,	O
(	O
GID_T	O
)	O
-	O
1	int
,	O
(	O
GID_T	O
)	O
-	O
1	int
,	O
(	O
char	O
*	O
)	O
NULL	O
,	O
(	O
char	O
*	O
)	O
NULL	O
,	O
(	O
char	O
*	O
)	O
NULL	O
}	O
;	O
int	O
uidget	function
(	O
)	O
{	O
uid_t	int
u	int
;	O
u	int
=	O
getuid	function
(	O
)	O
;	O
if	O
(	O
current_user	struct
.	O
uid	int
!=	O
u	int
)	O
{	O
FREE	O
(	O
current_user	struct
.	O
user_name	pointer
)	O
;	O
FREE	O
(	O
current_user	struct
.	O
shell	pointer
)	O
;	O
FREE	O
(	O
current_user	struct
.	O
home_dir	pointer
)	O
;	O
current_user	struct
.	O
user_name	pointer
=	O
current_user	struct
.	O
shell	pointer
=	O
current_user	struct
.	O
home_dir	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
current_user	struct
.	O
uid	int
=	O
u	int
;	O
current_user	struct
.	O
gid	int
=	O
getgid	function
(	O
)	O
;	O
current_user	struct
.	O
euid	int
=	O
geteuid	function
(	O
)	O
;	O
current_user	struct
.	O
egid	int
=	O
getegid	function
(	O
)	O
;	O
return	O
(	O
current_user	struct
.	O
uid	int
!=	O
current_user	struct
.	O
euid	int
)	O
||	O
(	O
current_user	struct
.	O
gid	int
!=	O
current_user	struct
.	O
egid	int
)	O
;	O
}	O
static	O
int	O
ngroups	int
,	O
maxgroups	int
;	O
static	O
GETGROUPS_T	O
*	O
group_array	pointer
=	O
(	O
GETGROUPS_T	O
*	O
)	O
NULL	O
;	O
int	O
getmaxgroups	function
(	O
)	O
{	O
static	O
int	O
maxgroups	int
=	O
-	O
1	int
;	O
if	O
(	O
maxgroups	int
>	O
0	int
)	O
return	O
maxgroups	int
;	O
maxgroups	int
=	O
sysconf	function
(	O
_SC_NGROUPS_MAX	int
)	O
;	O
if	O
(	O
maxgroups	int
<=	O
0	int
)	O
maxgroups	int
=	O
DEFAULT_MAXGROUPS	int
;	O
return	O
maxgroups	int
;	O
}	O
static	O
void	O
initialize_group_array	function
(	O
)	O
{	O
register	O
int	O
i	int
;	O
if	O
(	O
maxgroups	int
==	O
0	int
)	O
maxgroups	int
=	O
getmaxgroups	function
(	O
)	O
;	O
ngroups	int
=	O
0	int
;	O
group_array	pointer
=	O
(	O
GETGROUPS_T	O
*	O
)	O
xrealloc	function
(	O
group_array	pointer
,	O
maxgroups	int
*	O
sizeof	O
(	O
GETGROUPS_T	O
)	O
)	O
;	O
ngroups	int
=	O
getgroups	function
(	O
maxgroups	int
,	O
group_array	pointer
)	O
;	O
if	O
(	O
ngroups	int
==	O
0	int
)	O
{	O
group_array	pointer
[	O
0	int
]	O
=	O
current_user	struct
.	O
gid	int
;	O
ngroups	int
=	O
1	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ngroups	int
;	O
i	int
++	O
)	O
if	O
(	O
current_user	struct
.	O
gid	int
==	O
(	O
GID_T	O
)	O
group_array	pointer
[	O
i	int
]	O
)	O
break	O
;	O
if	O
(	O
i	int
==	O
ngroups	int
&&	O
ngroups	int
<	O
maxgroups	int
)	O
{	O
for	O
(	O
i	int
=	O
ngroups	int
;	O
i	int
>	O
0	int
;	O
i	int
--	O
)	O
group_array	pointer
[	O
i	int
]	O
=	O
group_array	pointer
[	O
i	int
-	O
1	int
]	O
;	O
group_array	pointer
[	O
0	int
]	O
=	O
current_user	struct
.	O
gid	int
;	O
ngroups	int
++	O
;	O
}	O
if	O
(	O
group_array	pointer
[	O
0	int
]	O
!=	O
current_user	struct
.	O
gid	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ngroups	int
;	O
i	int
++	O
)	O
if	O
(	O
group_array	pointer
[	O
i	int
]	O
==	O
current_user	struct
.	O
gid	int
)	O
break	O
;	O
if	O
(	O
i	int
<	O
ngroups	int
)	O
{	O
group_array	pointer
[	O
i	int
]	O
=	O
group_array	pointer
[	O
0	int
]	O
;	O
group_array	pointer
[	O
0	int
]	O
=	O
current_user	struct
.	O
gid	int
;	O
}	O
}	O
}	O
int	O
group_member	function
(	O
GID_T	O
gid	int
)	O
{	O
register	O
int	O
i	int
;	O
if	O
(	O
gid	int
==	O
current_user	struct
.	O
gid	int
||	O
gid	int
==	O
current_user	struct
.	O
egid	int
)	O
return	O
(	O
1	int
)	O
;	O
if	O
(	O
ngroups	int
==	O
0	int
)	O
initialize_group_array	function
(	O
)	O
;	O
if	O
(	O
ngroups	int
<=	O
0	int
)	O
return	O
(	O
0	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ngroups	int
;	O
i	int
++	O
)	O
if	O
(	O
gid	int
==	O
(	O
GID_T	O
)	O
group_array	pointer
[	O
i	int
]	O
)	O
return	O
(	O
1	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
file_status	function
(	O
char	O
const	O
*	O
name	pointer
)	O
{	O
struct	O
stat	struct
finfo	struct
;	O
int	O
r	int
;	O
if	O
(	O
stat	struct
(	O
name	pointer
,	O
&	O
finfo	struct
)	O
<	O
0	int
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
S_ISDIR	O
(	O
finfo	struct
.	O
st_mode	int
)	O
)	O
return	O
(	O
FS_EXISTS	int
|	O
FS_DIRECTORY	int
)	O
;	O
r	int
=	O
FS_EXISTS	int
;	O
if	O
(	O
eaccess	function
(	O
name	pointer
,	O
X_OK	int
)	O
==	O
0	int
)	O
r	int
|=	O
FS_EXECABLE	int
;	O
if	O
(	O
eaccess	function
(	O
name	pointer
,	O
R_OK	int
)	O
==	O
0	int
)	O
r	int
|=	O
FS_READABLE	int
;	O
return	O
r	int
;	O
}	O
int	O
absolute_program	function
(	O
char	O
const	O
*	O
string	pointer
)	O
{	O
return	O
(	O
(	O
char	O
*	O
)	O
strchr	function
(	O
string	pointer
,	O
'/'	O
)	O
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
char	O
*	O
substring	function
(	O
char	O
const	O
*	O
string	pointer
,	O
int	O
start	int
,	O
int	O
end	int
)	O
{	O
register	O
int	O
len	int
;	O
register	O
char	O
*	O
result	pointer
;	O
len	int
=	O
end	int
-	O
start	int
;	O
result	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
len	int
+	O
1	int
)	O
;	O
memcpy	function
(	O
result	pointer
,	O
string	pointer
+	O
start	int
,	O
len	int
)	O
;	O
result	pointer
[	O
len	int
]	O
=	O
'\0'	O
;	O
return	O
(	O
result	pointer
)	O
;	O
}	O
char	O
*	O
extract_colon_unit	function
(	O
char	O
const	O
*	O
string	pointer
,	O
int	O
*	O
p_index	pointer
)	O
{	O
int	O
i	int
,	O
start	int
,	O
len	int
;	O
char	O
*	O
value	pointer
;	O
if	O
(	O
string	pointer
==	O
0	int
)	O
return	O
NULL	O
;	O
len	int
=	O
strlen	function
(	O
string	pointer
)	O
;	O
if	O
(	O
*	O
p_index	pointer
>=	O
len	int
)	O
return	O
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
i	int
=	O
*	O
p_index	pointer
;	O
if	O
(	O
i	int
&&	O
string	pointer
[	O
i	int
]	O
==	O
':'	O
)	O
i	int
++	O
;	O
for	O
(	O
start	int
=	O
i	int
;	O
string	pointer
[	O
i	int
]	O
&&	O
string	pointer
[	O
i	int
]	O
!=	O
':'	O
;	O
i	int
++	O
)	O
;	O
*	O
p_index	pointer
=	O
i	int
;	O
if	O
(	O
i	int
==	O
start	int
)	O
{	O
if	O
(	O
string	pointer
[	O
i	int
]	O
)	O
(	O
*	O
p_index	pointer
)	O
++	O
;	O
value	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
1	int
)	O
;	O
value	pointer
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
else	O
value	pointer
=	O
substring	function
(	O
string	pointer
,	O
start	int
,	O
i	int
)	O
;	O
return	O
(	O
value	pointer
)	O
;	O
}	O
char	O
*	O
get_next_path_element	function
(	O
char	O
const	O
*	O
path_list	pointer
,	O
int	O
*	O
path_index_pointer	pointer
)	O
{	O
char	O
*	O
path	pointer
;	O
path	pointer
=	O
extract_colon_unit	function
(	O
path_list	pointer
,	O
path_index_pointer	pointer
)	O
;	O
if	O
(	O
path	pointer
==	O
0	int
)	O
return	O
(	O
path	pointer
)	O
;	O
if	O
(	O
*	O
path	pointer
==	O
'\0'	O
)	O
{	O
free	function
(	O
path	pointer
)	O
;	O
path	pointer
=	O
savestring	O
(	O
"."	pointer
)	O
;	O
}	O
return	O
(	O
path	pointer
)	O
;	O
}	O
char	O
*	O
make_full_pathname	function
(	O
const	O
char	O
*	O
path	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
int	O
name_len	int
)	O
{	O
char	O
*	O
full_path	pointer
;	O
int	O
path_len	int
;	O
path_len	int
=	O
strlen	function
(	O
path	pointer
)	O
;	O
full_path	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
2	int
+	O
path_len	int
+	O
name_len	int
)	O
;	O
strcpy	function
(	O
full_path	pointer
,	O
path	pointer
)	O
;	O
full_path	pointer
[	O
path_len	int
]	O
=	O
'/'	O
;	O
strcpy	function
(	O
full_path	pointer
+	O
path_len	int
+	O
1	int
,	O
name	pointer
)	O
;	O
return	O
(	O
full_path	pointer
)	O
;	O
}	O
void	O
get_current_user_info	function
(	O
)	O
{	O
struct	O
passwd	struct
*	O
entry	pointer
;	O
if	O
(	O
current_user	struct
.	O
user_name	pointer
==	O
0	int
)	O
{	O
entry	pointer
=	O
getpwuid	function
(	O
current_user	struct
.	O
uid	int
)	O
;	O
if	O
(	O
entry	pointer
)	O
{	O
current_user	struct
.	O
user_name	pointer
=	O
savestring	O
(	O
entry	pointer
->	O
pw_name	pointer
)	O
;	O
current_user	struct
.	O
shell	pointer
=	O
(	O
entry	pointer
->	O
pw_shell	pointer
&&	O
entry	pointer
->	O
pw_shell	pointer
[	O
0	int
]	O
)	O
?	O
savestring	O
(	O
entry	pointer
->	O
pw_shell	pointer
)	O
:	O
savestring	O
(	O
"/bin/sh"	pointer
)	O
;	O
current_user	struct
.	O
home_dir	pointer
=	O
savestring	O
(	O
entry	pointer
->	O
pw_dir	pointer
)	O
;	O
}	O
else	O
{	O
current_user	struct
.	O
user_name	pointer
=	O
"I have no name!"	pointer
;	O
current_user	struct
.	O
user_name	pointer
=	O
savestring	O
(	O
current_user	struct
.	O
user_name	pointer
)	O
;	O
current_user	struct
.	O
shell	pointer
=	O
savestring	O
(	O
"/bin/sh"	pointer
)	O
;	O
current_user	struct
.	O
home_dir	pointer
=	O
savestring	O
(	O
"/"	pointer
)	O
;	O
}	O
endpwent	function
(	O
)	O
;	O
}	O
}	O
char	O
*	O
sh_get_env_value	function
(	O
const	O
char	O
*	O
v	pointer
)	O
{	O
return	O
getenv	function
(	O
v	pointer
)	O
;	O
}	O
char	O
*	O
sh_get_home_dir	function
(	O
void	O
)	O
{	O
if	O
(	O
current_user	struct
.	O
home_dir	pointer
==	O
NULL	O
)	O
get_current_user_info	function
(	O
)	O
;	O
return	O
current_user	struct
.	O
home_dir	pointer
;	O
}	O
