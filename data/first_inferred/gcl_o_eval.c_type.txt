static	O
void	O
call_applyhook	function
(	O
object	O
)	O
;	O
struct	O
nil3	struct
{	O
object	O
nil3_self	array
[	O
3	int
]	O
;	O
}	O
three_nils	struct
;	O
object	O
sSAbreak_pointsA	int
;	O
object	O
sSAbreak_stepA	int
;	O
static	O
void	O
quick_call_sfun	function
(	O
object	O
fun	int
)	O
{	O
DEBUG_AVMA	O
int	O
i	int
=	O
fun	int
->	O
sfn	O
.	O
sfn_argd	O
,	O
n	int
=	O
SFUN_NARGS	function
(	O
i	int
)	O
;	O
enum	O
ftype	O
restype	enum
;	O
object	O
*	O
x	enum
,	O
res	O
,	O
*	O
base	pointer
;	O
object	O
*	O
temp_ar	O
=	O
alloca	O
(	O
n	int
*	O
sizeof	O
(	O
object	O
)	O
)	O
;	O
base	pointer
=	O
vs_base	O
;	O
if	O
(	O
n	int
!=	O
vs_top	O
-	O
base	pointer
)	O
{	O
check_arg_failed	function
(	O
n	int
)	O
;	O
}	O
restype	enum
=	O
SFUN_RETURN_TYPE	function
(	O
i	int
)	O
;	O
SFUN_START_ARG_TYPES	function
(	O
i	int
)	O
;	O
if	O
(	O
i	int
==	O
0	int
)	O
x	enum
=	O
vs_base	O
;	O
else	O
{	O
int	O
j	int
;	O
x	enum
=	O
temp_ar	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
n	int
;	O
j	int
++	O
)	O
{	O
enum	O
ftype	O
typ	enum
=	O
SFUN_NEXT_TYPE	function
(	O
i	int
)	O
;	O
x	enum
[	O
j	int
]	O
=	O
COERCE_ARG	O
(	O
vs_base	O
[	O
j	int
]	O
,	O
typ	enum
)	O
;	O
}	O
}	O
res	O
=	O
c_apply_n_fun	function
(	O
fun	int
,	O
n	int
,	O
x	enum
)	O
;	O
base	pointer
[	O
0	int
]	O
=	O
(	O
restype	enum
==	O
f_object	O
?	O
res	O
:	O
restype	enum
==	O
f_fixnum	O
?	O
make_fixnum	function
(	O
(	O
long	O
)	O
res	O
)	O
:	O
(	O
object	O
)	O
(	O
FEerror	function
(	O
"Bad result type"	pointer
,	O
0	int
)	O
,	O
Cnil	O
)	O
)	O
;	O
vs_base	O
=	O
base	pointer
;	O
vs_top	O
=	O
base	pointer
+	O
1	int
;	O
CHECK_AVMA	O
;	O
return	O
;	O
}	O
static	O
void	O
call_sfun_no_check	function
(	O
object	O
fun	int
)	O
{	O
DEBUG_AVMA	O
int	O
n	int
;	O
object	O
*	O
base	pointer
=	O
vs_base	O
;	O
n	int
=	O
vs_top	O
-	O
base	pointer
;	O
base	pointer
[	O
0	int
]	O
=	O
c_apply_n_fun	function
(	O
fun	int
,	O
n	int
,	O
base	pointer
)	O
;	O
vs_top	O
=	O
(	O
vs_base	O
=	O
base	pointer
)	O
+	O
1	int
;	O
CHECK_AVMA	O
;	O
return	O
;	O
}	O
static	O
void	O
call_vfun	function
(	O
object	O
fun	int
)	O
{	O
DEBUG_AVMA	O
int	O
n	int
;	O
object	O
*	O
base	pointer
=	O
vs_base	O
;	O
n	int
=	O
vs_top	O
-	O
base	pointer
;	O
if	O
(	O
n	int
<	O
fun	int
->	O
vfn	O
.	O
vfn_minargs	O
)	O
{	O
FEtoo_few_arguments	function
(	O
base	pointer
,	O
vs_top	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
n	int
>	O
fun	int
->	O
vfn	O
.	O
vfn_maxargs	O
)	O
{	O
FEtoo_many_arguments	function
(	O
base	pointer
,	O
vs_top	O
)	O
;	O
return	O
;	O
}	O
VFUN_NARGS	O
=	O
n	int
;	O
base	pointer
[	O
0	int
]	O
=	O
c_apply_n_fun	function
(	O
fun	int
,	O
n	int
,	O
base	pointer
)	O
;	O
vs_top	O
=	O
(	O
vs_base	O
=	O
base	pointer
)	O
+	O
1	int
;	O
CHECK_AVMA	O
;	O
return	O
;	O
}	O
void	O
funcall	function
(	O
object	O
fun	int
)	O
{	O
object	O
temporary	O
;	O
object	O
x	enum
;	O
object	O
*	O
VOL	O
top	O
;	O
object	O
*	O
lex	O
;	O
bds_ptr	O
old_bds_top	O
;	O
VOL	O
bool	O
b	O
;	O
bool	O
c	O
;	O
DEBUG_AVMA	O
TOP	O
:	O
if	O
(	O
fun	int
==	O
OBJNULL	O
)	O
FEerror	function
(	O
"Undefined function."	pointer
,	O
0	int
)	O
;	O
switch	O
(	O
type_of	function
(	O
fun	int
)	O
)	O
{	O
case	O
t_cfun	O
:	O
MMcall	function
(	O
fun	int
)	O
;	O
CHECK_AVMA	O
;	O
return	O
;	O
case	O
t_gfun	O
:	O
case	O
t_sfun	O
:	O
{	O
extern	O
int	O
Rset	int
;	O
int	O
rset	int
=	O
Rset	int
;	O
if	O
(	O
!	O
rset	int
)	O
{	O
ihs_check	O
;	O
ihs_push	function
(	O
fun	int
)	O
;	O
}	O
quick_call_sfun	function
(	O
fun	int
)	O
;	O
if	O
(	O
!	O
rset	int
)	O
ihs_pop	function
(	O
)	O
;	O
}	O
return	O
;	O
case	O
t_vfun	O
:	O
{	O
extern	O
int	O
Rset	int
;	O
int	O
rset	int
=	O
Rset	int
;	O
if	O
(	O
!	O
rset	int
)	O
{	O
ihs_check	O
;	O
ihs_push	function
(	O
fun	int
)	O
;	O
}	O
call_vfun	function
(	O
fun	int
)	O
;	O
if	O
(	O
!	O
rset	int
)	O
ihs_pop	function
(	O
)	O
;	O
}	O
return	O
;	O
case	O
t_afun	O
:	O
case	O
t_closure	O
:	O
{	O
object	O
res	O
,	O
*	O
b	O
=	O
vs_base	O
;	O
int	O
n	int
=	O
vs_top	O
-	O
b	O
;	O
res	O
=	O
(	O
object	O
)	O
IapplyVector	function
(	O
fun	int
,	O
n	int
,	O
b	O
)	O
;	O
n	int
=	O
fcall	O
.	O
nvalues	O
;	O
vs_base	O
=	O
b	O
;	O
vs_top	O
=	O
b	O
+	O
n	int
;	O
while	O
(	O
--	O
n	int
>	O
0	int
)	O
b	O
[	O
n	int
]	O
=	O
fcall	O
.	O
values	O
[	O
n	int
]	O
;	O
b	O
[	O
0	int
]	O
=	O
res	O
;	O
return	O
;	O
}	O
case	O
t_cclosure	O
:	O
MMccall	function
(	O
fun	int
)	O
;	O
CHECK_AVMA	O
;	O
return	O
;	O
case	O
t_symbol	O
:	O
{	O
object	O
x	enum
=	O
fun	int
->	O
s	O
.	O
s_gfdef	O
;	O
if	O
(	O
x	enum
)	O
{	O
fun	int
=	O
x	enum
;	O
goto	O
TOP	O
;	O
}	O
else	O
FEundefined_function	function
(	O
fun	int
)	O
;	O
}	O
case	O
t_cons	O
:	O
break	O
;	O
default	O
:	O
FEinvalid_function	function
(	O
fun	int
)	O
;	O
}	O
{	O
VOL	O
int	O
not_pushed	O
=	O
0	int
;	O
if	O
(	O
vs_base	O
!=	O
ihs_top	O
->	O
ihs_base	O
)	O
{	O
ihs_check	O
;	O
ihs_push	function
(	O
fun	int
)	O
;	O
}	O
else	O
not_pushed	O
=	O
1	int
;	O
ihs_top	O
->	O
ihs_base	O
=	O
lex_env	O
;	O
x	enum
=	O
MMcar	function
(	O
fun	int
)	O
;	O
top	O
=	O
vs_top	O
;	O
lex	O
=	O
lex_env	O
;	O
old_bds_top	O
=	O
bds_top	O
;	O
if	O
(	O
x	enum
==	O
sSlambda_block_expanded	O
)	O
{	O
b	O
=	O
TRUE	O
;	O
c	O
=	O
FALSE	O
;	O
fun	int
=	O
fun	int
->	O
c	O
.	O
c_cdr	O
;	O
}	O
else	O
if	O
(	O
x	enum
==	O
sLlambda_block	O
)	O
{	O
b	O
=	O
TRUE	O
;	O
c	O
=	O
FALSE	O
;	O
if	O
(	O
sSlambda_block_expanded	O
->	O
s	O
.	O
s_dbind	O
!=	O
OBJNULL	O
)	O
fun	int
=	O
ifuncall1	function
(	O
sSlambda_block_expanded	O
->	O
s	O
.	O
s_dbind	O
,	O
fun	int
)	O
;	O
fun	int
=	O
fun	int
->	O
c	O
.	O
c_cdr	O
;	O
}	O
else	O
if	O
(	O
x	enum
==	O
sLlambda_closure	O
)	O
{	O
b	O
=	O
FALSE	O
;	O
c	O
=	O
TRUE	O
;	O
fun	int
=	O
fun	int
->	O
c	O
.	O
c_cdr	O
;	O
}	O
else	O
if	O
(	O
x	enum
==	O
sLlambda	O
)	O
{	O
b	O
=	O
c	O
=	O
FALSE	O
;	O
fun	int
=	O
fun	int
->	O
c	O
.	O
c_cdr	O
;	O
}	O
else	O
if	O
(	O
x	enum
==	O
sLlambda_block_closure	O
)	O
{	O
b	O
=	O
c	O
=	O
TRUE	O
;	O
fun	int
=	O
fun	int
->	O
c	O
.	O
c_cdr	O
;	O
}	O
else	O
b	O
=	O
c	O
=	O
TRUE	O
;	O
if	O
(	O
c	O
)	O
{	O
vs_push	function
(	O
kar	function
(	O
fun	int
)	O
)	O
;	O
fun	int
=	O
fun	int
->	O
c	O
.	O
c_cdr	O
;	O
vs_push	function
(	O
kar	function
(	O
fun	int
)	O
)	O
;	O
fun	int
=	O
fun	int
->	O
c	O
.	O
c_cdr	O
;	O
vs_push	function
(	O
kar	function
(	O
fun	int
)	O
)	O
;	O
fun	int
=	O
fun	int
->	O
c	O
.	O
c_cdr	O
;	O
}	O
else	O
{	O
*	O
(	O
struct	O
nil3	struct
*	O
)	O
vs_top	O
=	O
three_nils	struct
;	O
vs_top	O
+=	O
3	int
;	O
}	O
if	O
(	O
b	O
)	O
{	O
x	enum
=	O
kar	function
(	O
fun	int
)	O
;	O
fun	int
=	O
fun	int
->	O
c	O
.	O
c_cdr	O
;	O
}	O
lex_env	O
=	O
top	O
;	O
vs_push	function
(	O
fun	int
)	O
;	O
lambda_bind	function
(	O
top	O
)	O
;	O
ihs_top	O
->	O
ihs_base	O
=	O
lex_env	O
;	O
if	O
(	O
b	O
)	O
{	O
fun	int
=	O
temporary	O
=	O
alloc_frame_id	function
(	O
)	O
;	O
temporary	O
=	O
MMcons	function
(	O
temporary	O
,	O
Cnil	O
)	O
;	O
temporary	O
=	O
MMcons	function
(	O
sLblock	O
,	O
temporary	O
)	O
;	O
temporary	O
=	O
MMcons	function
(	O
x	enum
,	O
temporary	O
)	O
;	O
lex_env	O
[	O
2	int
]	O
=	O
MMcons	function
(	O
temporary	O
,	O
lex_env	O
[	O
2	int
]	O
)	O
;	O
frs_push	function
(	O
FRS_CATCH	O
,	O
fun	int
)	O
;	O
if	O
(	O
nlj_active	O
)	O
{	O
nlj_active	O
=	O
FALSE	O
;	O
goto	O
END	O
;	O
}	O
}	O
x	enum
=	O
top	O
[	O
3	int
]	O
;	O
if	O
(	O
endp	function
(	O
x	enum
)	O
)	O
{	O
vs_base	O
=	O
vs_top	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
}	O
else	O
{	O
top	O
=	O
vs_top	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
eval	function
(	O
MMcar	function
(	O
x	enum
)	O
)	O
;	O
x	enum
=	O
MMcdr	function
(	O
x	enum
)	O
;	O
if	O
(	O
endp	function
(	O
x	enum
)	O
)	O
break	O
;	O
vs_top	O
=	O
top	O
;	O
}	O
}	O
END	O
:	O
if	O
(	O
b	O
)	O
frs_pop	function
(	O
)	O
;	O
bds_unwind	function
(	O
old_bds_top	O
)	O
;	O
lex_env	O
=	O
lex	O
;	O
if	O
(	O
not_pushed	O
==	O
0	int
)	O
{	O
ihs_pop	function
(	O
)	O
;	O
}	O
CHECK_AVMA	O
;	O
}	O
}	O
void	O
funcall_no_event	function
(	O
object	O
fun	int
)	O
{	O
DEBUG_AVMA	O
if	O
(	O
fun	int
==	O
OBJNULL	O
)	O
FEerror	function
(	O
"Undefined function."	pointer
,	O
0	int
)	O
;	O
switch	O
(	O
type_of	function
(	O
fun	int
)	O
)	O
{	O
case	O
t_cfun	O
:	O
(	O
*	O
fun	int
->	O
cf	O
.	O
cf_self	O
)	O
(	O
)	O
;	O
break	O
;	O
case	O
t_cclosure	O
:	O
(	O
*	O
fun	int
->	O
cc	O
.	O
cc_self	O
)	O
(	O
fun	int
)	O
;	O
break	O
;	O
case	O
t_sfun	O
:	O
case	O
t_gfun	O
:	O
quick_call_sfun	function
(	O
fun	int
)	O
;	O
return	O
;	O
case	O
t_vfun	O
:	O
call_vfun	function
(	O
fun	int
)	O
;	O
return	O
;	O
default	O
:	O
funcall	function
(	O
fun	int
)	O
;	O
}	O
}	O
void	O
lispcall	function
(	O
object	O
*	O
funp	pointer
,	O
int	O
narg	int
)	O
{	O
DEBUG_AVMA	O
object	O
fun	int
=	O
*	O
funp	pointer
;	O
vs_base	O
=	O
funp	pointer
+	O
1	int
;	O
vs_top	O
=	O
vs_base	O
+	O
narg	int
;	O
if	O
(	O
fun	int
==	O
OBJNULL	O
)	O
FEerror	function
(	O
"Undefined function."	pointer
,	O
0	int
)	O
;	O
switch	O
(	O
type_of	function
(	O
fun	int
)	O
)	O
{	O
case	O
t_cfun	O
:	O
MMcall	function
(	O
fun	int
)	O
;	O
break	O
;	O
case	O
t_cclosure	O
:	O
MMccall	function
(	O
fun	int
)	O
;	O
break	O
;	O
default	O
:	O
funcall	function
(	O
fun	int
)	O
;	O
}	O
CHECK_AVMA	O
;	O
}	O
void	O
lispcall_no_event	function
(	O
object	O
*	O
funp	pointer
,	O
int	O
narg	int
)	O
{	O
DEBUG_AVMA	O
object	O
fun	int
=	O
*	O
funp	pointer
;	O
vs_base	O
=	O
funp	pointer
+	O
1	int
;	O
vs_top	O
=	O
vs_base	O
+	O
narg	int
;	O
if	O
(	O
fun	int
==	O
OBJNULL	O
)	O
FEerror	function
(	O
"Undefined function."	pointer
,	O
0	int
)	O
;	O
switch	O
(	O
type_of	function
(	O
fun	int
)	O
)	O
{	O
case	O
t_cfun	O
:	O
(	O
*	O
fun	int
->	O
cf	O
.	O
cf_self	O
)	O
(	O
)	O
;	O
break	O
;	O
case	O
t_cclosure	O
:	O
(	O
*	O
fun	int
->	O
cc	O
.	O
cc_self	O
)	O
(	O
fun	int
)	O
;	O
break	O
;	O
default	O
:	O
funcall	function
(	O
fun	int
)	O
;	O
}	O
CHECK_AVMA	O
;	O
}	O
void	O
symlispcall	function
(	O
object	O
sym	int
,	O
object	O
*	O
base	pointer
,	O
int	O
narg	int
)	O
{	O
DEBUG_AVMA	O
object	O
fun	int
=	O
symbol_function	O
(	O
sym	int
)	O
;	O
vs_base	O
=	O
base	pointer
;	O
vs_top	O
=	O
vs_base	O
+	O
narg	int
;	O
if	O
(	O
fun	int
==	O
OBJNULL	O
)	O
FEerror	function
(	O
"Undefined function."	pointer
,	O
0	int
)	O
;	O
switch	O
(	O
type_of	function
(	O
fun	int
)	O
)	O
{	O
case	O
t_cfun	O
:	O
MMcall	function
(	O
fun	int
)	O
;	O
break	O
;	O
case	O
t_cclosure	O
:	O
MMccall	function
(	O
fun	int
)	O
;	O
break	O
;	O
default	O
:	O
funcall	function
(	O
fun	int
)	O
;	O
}	O
CHECK_AVMA	O
;	O
}	O
void	O
symlispcall_no_event	function
(	O
object	O
sym	int
,	O
object	O
*	O
base	pointer
,	O
int	O
narg	int
)	O
{	O
DEBUG_AVMA	O
object	O
fun	int
=	O
symbol_function	O
(	O
sym	int
)	O
;	O
vs_base	O
=	O
base	pointer
;	O
vs_top	O
=	O
vs_base	O
+	O
narg	int
;	O
if	O
(	O
fun	int
==	O
OBJNULL	O
)	O
FEerror	function
(	O
"Undefined function."	pointer
,	O
0	int
)	O
;	O
switch	O
(	O
type_of	function
(	O
fun	int
)	O
)	O
{	O
case	O
t_cfun	O
:	O
(	O
*	O
fun	int
->	O
cf	O
.	O
cf_self	O
)	O
(	O
)	O
;	O
break	O
;	O
case	O
t_cclosure	O
:	O
(	O
*	O
fun	int
->	O
cc	O
.	O
cc_self	O
)	O
(	O
fun	int
)	O
;	O
break	O
;	O
default	O
:	O
funcall	function
(	O
fun	int
)	O
;	O
}	O
CHECK_AVMA	O
;	O
}	O
object	O
simple_lispcall	function
(	O
object	O
*	O
funp	pointer
,	O
int	O
narg	int
)	O
{	O
DEBUG_AVMA	O
object	O
fun	int
=	O
*	O
funp	pointer
;	O
object	O
*	O
sup	O
=	O
vs_top	O
;	O
vs_base	O
=	O
funp	pointer
+	O
1	int
;	O
vs_top	O
=	O
vs_base	O
+	O
narg	int
;	O
if	O
(	O
fun	int
==	O
OBJNULL	O
)	O
FEerror	function
(	O
"Undefined function."	pointer
,	O
0	int
)	O
;	O
switch	O
(	O
type_of	function
(	O
fun	int
)	O
)	O
{	O
case	O
t_cfun	O
:	O
MMcall	function
(	O
fun	int
)	O
;	O
break	O
;	O
case	O
t_cclosure	O
:	O
MMccall	function
(	O
fun	int
)	O
;	O
break	O
;	O
default	O
:	O
funcall	function
(	O
fun	int
)	O
;	O
}	O
vs_top	O
=	O
sup	O
;	O
CHECK_AVMA	O
;	O
return	O
(	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
}	O
object	O
simple_symlispcall	function
(	O
object	O
sym	int
,	O
object	O
*	O
base	pointer
,	O
int	O
narg	int
)	O
{	O
DEBUG_AVMA	O
object	O
fun	int
=	O
symbol_function	O
(	O
sym	int
)	O
;	O
object	O
*	O
sup	O
=	O
vs_top	O
;	O
vs_base	O
=	O
base	pointer
;	O
vs_top	O
=	O
vs_base	O
+	O
narg	int
;	O
if	O
(	O
fun	int
==	O
OBJNULL	O
)	O
FEerror	function
(	O
"Undefined function."	pointer
,	O
0	int
)	O
;	O
switch	O
(	O
type_of	function
(	O
fun	int
)	O
)	O
{	O
case	O
t_cfun	O
:	O
MMcall	function
(	O
fun	int
)	O
;	O
break	O
;	O
case	O
t_cclosure	O
:	O
MMccall	function
(	O
fun	int
)	O
;	O
break	O
;	O
default	O
:	O
funcall	function
(	O
fun	int
)	O
;	O
}	O
vs_top	O
=	O
sup	O
;	O
CHECK_AVMA	O
;	O
return	O
(	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
}	O
void	O
super_funcall	function
(	O
object	O
fun	int
)	O
{	O
if	O
(	O
type_of	function
(	O
fun	int
)	O
==	O
t_symbol	O
)	O
{	O
if	O
(	O
fun	int
->	O
s	O
.	O
s_sfdef	O
!=	O
NOT_SPECIAL	O
||	O
fun	int
->	O
s	O
.	O
s_mflag	O
)	O
FEinvalid_function	function
(	O
fun	int
)	O
;	O
if	O
(	O
fun	int
->	O
s	O
.	O
s_gfdef	O
==	O
OBJNULL	O
)	O
FEundefined_function	function
(	O
fun	int
)	O
;	O
fun	int
=	O
fun	int
->	O
s	O
.	O
s_gfdef	O
;	O
}	O
funcall	function
(	O
fun	int
)	O
;	O
}	O
void	O
super_funcall_no_event	function
(	O
object	O
fun	int
)	O
{	O
if	O
(	O
type_of	function
(	O
fun	int
)	O
==	O
t_cfun	O
)	O
{	O
(	O
*	O
fun	int
->	O
cf	O
.	O
cf_self	O
)	O
(	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
type_of	function
(	O
fun	int
)	O
==	O
t_sfun	O
)	O
{	O
call_sfun_no_check	function
(	O
fun	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
type_of	function
(	O
fun	int
)	O
==	O
t_gfun	O
)	O
{	O
quick_call_sfun	function
(	O
fun	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
type_of	function
(	O
fun	int
)	O
==	O
t_vfun	O
)	O
{	O
call_vfun	function
(	O
fun	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
type_of	function
(	O
fun	int
)	O
==	O
t_symbol	O
)	O
{	O
if	O
(	O
fun	int
->	O
s	O
.	O
s_sfdef	O
!=	O
NOT_SPECIAL	O
||	O
fun	int
->	O
s	O
.	O
s_mflag	O
)	O
FEinvalid_function	function
(	O
fun	int
)	O
;	O
if	O
(	O
fun	int
->	O
s	O
.	O
s_gfdef	O
==	O
OBJNULL	O
)	O
FEundefined_function	function
(	O
fun	int
)	O
;	O
fun	int
=	O
fun	int
->	O
s	O
.	O
s_gfdef	O
;	O
if	O
(	O
type_of	function
(	O
fun	int
)	O
==	O
t_cfun	O
)	O
{	O
(	O
*	O
fun	int
->	O
cf	O
.	O
cf_self	O
)	O
(	O
)	O
;	O
return	O
;	O
}	O
}	O
funcall_no_event	function
(	O
fun	int
)	O
;	O
}	O
object	O
Ieval	function
(	O
object	O
form	int
)	O
{	O
eval	function
(	O
form	int
)	O
;	O
return	O
Ivs_values	function
(	O
)	O
;	O
}	O
void	O
eval	function
(	O
object	O
form	int
)	O
{	O
object	O
temporary	O
;	O
DEBUG_AVMA	O
object	O
fun	int
,	O
x	enum
;	O
object	O
*	O
top	O
;	O
object	O
*	O
base	pointer
;	O
cs_check	function
(	O
form	int
)	O
;	O
EVAL	O
:	O
vs_check	O
;	O
if	O
(	O
Vevalhook	O
->	O
s	O
.	O
s_dbind	O
!=	O
Cnil	O
&&	O
eval1	O
==	O
0	int
)	O
{	O
bds_ptr	O
old_bds_top	O
=	O
bds_top	O
;	O
object	O
hookfun	O
=	O
symbol_value	function
(	O
Vevalhook	O
)	O
;	O
bds_bind	function
(	O
Vevalhook	O
,	O
Cnil	O
)	O
;	O
vs_base	O
=	O
vs_top	O
;	O
vs_push	function
(	O
form	int
)	O
;	O
vs_push	function
(	O
lex_env	O
[	O
0	int
]	O
)	O
;	O
vs_push	function
(	O
lex_env	O
[	O
1	int
]	O
)	O
;	O
vs_push	function
(	O
lex_env	O
[	O
2	int
]	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
stack_cons	function
(	O
)	O
;	O
stack_cons	function
(	O
)	O
;	O
stack_cons	function
(	O
)	O
;	O
super_funcall	function
(	O
hookfun	O
)	O
;	O
bds_unwind	function
(	O
old_bds_top	O
)	O
;	O
return	O
;	O
}	O
else	O
eval1	O
=	O
0	int
;	O
if	O
(	O
type_of	function
(	O
form	int
)	O
==	O
t_cons	O
)	O
goto	O
APPLICATION	O
;	O
if	O
(	O
type_of	function
(	O
form	int
)	O
!=	O
t_symbol	O
)	O
{	O
vs_base	O
=	O
vs_top	O
;	O
vs_push	function
(	O
form	int
)	O
;	O
return	O
;	O
}	O
switch	O
(	O
form	int
->	O
s	O
.	O
s_stype	O
)	O
{	O
case	O
stp_constant	O
:	O
vs_base	O
=	O
vs_top	O
;	O
vs_push	function
(	O
form	int
->	O
s	O
.	O
s_dbind	O
)	O
;	O
return	O
;	O
case	O
stp_special	O
:	O
if	O
(	O
form	int
->	O
s	O
.	O
s_dbind	O
==	O
OBJNULL	O
)	O
FEunbound_variable	function
(	O
form	int
)	O
;	O
vs_base	O
=	O
vs_top	O
;	O
vs_push	function
(	O
form	int
->	O
s	O
.	O
s_dbind	O
)	O
;	O
return	O
;	O
default	O
:	O
for	O
(	O
x	enum
=	O
lex_env	O
[	O
0	int
]	O
;	O
type_of	function
(	O
x	enum
)	O
==	O
t_cons	O
;	O
x	enum
=	O
x	enum
->	O
c	O
.	O
c_cdr	O
)	O
if	O
(	O
x	enum
->	O
c	O
.	O
c_car	O
->	O
c	O
.	O
c_car	O
==	O
form	int
)	O
{	O
x	enum
=	O
x	enum
->	O
c	O
.	O
c_car	O
->	O
c	O
.	O
c_cdr	O
;	O
if	O
(	O
endp	function
(	O
x	enum
)	O
)	O
break	O
;	O
vs_base	O
=	O
vs_top	O
;	O
vs_push	function
(	O
x	enum
->	O
c	O
.	O
c_car	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
form	int
->	O
s	O
.	O
s_dbind	O
==	O
OBJNULL	O
)	O
FEunbound_variable	function
(	O
form	int
)	O
;	O
vs_base	O
=	O
vs_top	O
;	O
vs_push	function
(	O
form	int
->	O
s	O
.	O
s_dbind	O
)	O
;	O
return	O
;	O
}	O
APPLICATION	O
:	O
if	O
(	O
sSAbreak_pointsA	int
->	O
s	O
.	O
s_dbind	O
!=	O
Cnil	O
)	O
{	O
if	O
(	O
sSAbreak_stepA	int
->	O
s	O
.	O
s_dbind	O
==	O
Cnil	O
||	O
ifuncall2	function
(	O
sSAbreak_stepA	int
->	O
s	O
.	O
s_dbind	O
,	O
form	int
,	O
list	function
(	O
3	int
,	O
lex_env	O
[	O
0	int
]	O
,	O
lex_env	O
[	O
1	int
]	O
,	O
lex_env	O
[	O
2	int
]	O
)	O
)	O
==	O
Cnil	O
)	O
{	O
object	O
*	O
bpts	O
=	O
sSAbreak_pointsA	int
->	O
s	O
.	O
s_dbind	O
->	O
v	O
.	O
v_self	O
;	O
int	O
i	int
=	O
sSAbreak_pointsA	int
->	O
s	O
.	O
s_dbind	O
->	O
v	O
.	O
v_fillp	O
;	O
while	O
(	O
--	O
i	int
>=	O
0	int
)	O
{	O
if	O
(	O
(	O
*	O
bpts	O
)	O
->	O
c	O
.	O
c_car	O
==	O
form	int
)	O
{	O
ifuncall2	function
(	O
sSAbreak_pointsA	int
->	O
s	O
.	O
s_gfdef	O
,	O
form	int
,	O
list	function
(	O
3	int
,	O
lex_env	O
[	O
0	int
]	O
,	O
lex_env	O
[	O
1	int
]	O
,	O
lex_env	O
[	O
2	int
]	O
)	O
)	O
;	O
break	O
;	O
}	O
bpts	O
++	O
;	O
}	O
}	O
}	O
fun	int
=	O
MMcar	function
(	O
form	int
)	O
;	O
if	O
(	O
type_of	function
(	O
fun	int
)	O
!=	O
t_symbol	O
)	O
goto	O
LAMBDA	O
;	O
if	O
(	O
fun	int
->	O
s	O
.	O
s_sfdef	O
!=	O
NOT_SPECIAL	O
)	O
{	O
ihs_check	O
;	O
ihs_push	function
(	O
form	int
)	O
;	O
ihs_top	O
->	O
ihs_base	O
=	O
lex_env	O
;	O
(	O
*	O
fun	int
->	O
s	O
.	O
s_sfdef	O
)	O
(	O
MMcdr	function
(	O
form	int
)	O
)	O
;	O
CHECK_AVMA	O
;	O
ihs_pop	function
(	O
)	O
;	O
return	O
;	O
}	O
for	O
(	O
x	enum
=	O
lex_env	O
[	O
1	int
]	O
;	O
type_of	function
(	O
x	enum
)	O
==	O
t_cons	O
;	O
x	enum
=	O
x	enum
->	O
c	O
.	O
c_cdr	O
)	O
if	O
(	O
x	enum
->	O
c	O
.	O
c_car	O
->	O
c	O
.	O
c_car	O
==	O
fun	int
)	O
{	O
x	enum
=	O
x	enum
->	O
c	O
.	O
c_car	O
;	O
if	O
(	O
MMcadr	function
(	O
x	enum
)	O
==	O
sLmacro	O
)	O
{	O
x	enum
=	O
MMcaddr	function
(	O
x	enum
)	O
;	O
goto	O
EVAL_MACRO	O
;	O
}	O
x	enum
=	O
MMcaddr	function
(	O
x	enum
)	O
;	O
goto	O
EVAL_ARGS	O
;	O
}	O
if	O
(	O
(	O
x	enum
=	O
fun	int
->	O
s	O
.	O
s_gfdef	O
)	O
==	O
OBJNULL	O
)	O
FEundefined_function	function
(	O
fun	int
)	O
;	O
if	O
(	O
fun	int
->	O
s	O
.	O
s_mflag	O
)	O
{	O
EVAL_MACRO	O
:	O
top	O
=	O
vs_top	O
;	O
form	int
=	O
Imacro_expand1	function
(	O
x	enum
,	O
form	int
)	O
;	O
vs_top	O
=	O
top	O
;	O
vs_push	function
(	O
form	int
)	O
;	O
goto	O
EVAL	O
;	O
}	O
EVAL_ARGS	O
:	O
vs_push	function
(	O
x	enum
)	O
;	O
ihs_check	O
;	O
ihs_push	function
(	O
form	int
)	O
;	O
ihs_top	O
->	O
ihs_base	O
=	O
lex_env	O
;	O
form	int
=	O
form	int
->	O
c	O
.	O
c_cdr	O
;	O
base	pointer
=	O
vs_top	O
;	O
top	O
=	O
vs_top	O
;	O
while	O
(	O
!	O
endp	function
(	O
form	int
)	O
)	O
{	O
eval	function
(	O
MMcar	function
(	O
form	int
)	O
)	O
;	O
top	O
[	O
0	int
]	O
=	O
vs_base	O
[	O
0	int
]	O
;	O
vs_top	O
=	O
++	O
top	O
;	O
form	int
=	O
MMcdr	function
(	O
form	int
)	O
;	O
}	O
vs_base	O
=	O
base	pointer
;	O
if	O
(	O
Vapplyhook	O
->	O
s	O
.	O
s_dbind	O
!=	O
Cnil	O
)	O
{	O
call_applyhook	function
(	O
fun	int
)	O
;	O
return	O
;	O
}	O
ihs_top	O
->	O
ihs_function	O
=	O
x	enum
;	O
ihs_top	O
->	O
ihs_base	O
=	O
vs_base	O
;	O
if	O
(	O
type_of	function
(	O
x	enum
)	O
==	O
t_cfun	O
)	O
(	O
*	O
(	O
x	enum
)	O
->	O
cf	O
.	O
cf_self	O
)	O
(	O
)	O
;	O
else	O
funcall_no_event	function
(	O
x	enum
)	O
;	O
CHECK_AVMA	O
;	O
ihs_pop	function
(	O
)	O
;	O
return	O
;	O
LAMBDA	O
:	O
if	O
(	O
type_of	function
(	O
fun	int
)	O
==	O
t_cons	O
&&	O
MMcar	function
(	O
fun	int
)	O
==	O
sLlambda	O
)	O
{	O
temporary	O
=	O
make_cons	function
(	O
lex_env	O
[	O
2	int
]	O
,	O
fun	int
->	O
c	O
.	O
c_cdr	O
)	O
;	O
temporary	O
=	O
make_cons	function
(	O
lex_env	O
[	O
1	int
]	O
,	O
temporary	O
)	O
;	O
temporary	O
=	O
make_cons	function
(	O
lex_env	O
[	O
0	int
]	O
,	O
temporary	O
)	O
;	O
x	enum
=	O
make_cons	function
(	O
sLlambda_closure	O
,	O
temporary	O
)	O
;	O
vs_push	function
(	O
x	enum
)	O
;	O
goto	O
EVAL_ARGS	O
;	O
}	O
FEinvalid_function	function
(	O
fun	int
)	O
;	O
}	O
static	O
void	O
call_applyhook	function
(	O
object	O
fun	int
)	O
{	O
object	O
ah	O
;	O
object	O
*	O
v	O
;	O
ah	O
=	O
symbol_value	function
(	O
Vapplyhook	O
)	O
;	O
v	O
=	O
vs_base	O
+	O
1	int
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
while	O
(	O
vs_top	O
>	O
v	O
)	O
stack_cons	function
(	O
)	O
;	O
vs_push	function
(	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
vs_base	O
[	O
0	int
]	O
=	O
fun	int
;	O
vs_push	function
(	O
lex_env	O
[	O
0	int
]	O
)	O
;	O
vs_push	function
(	O
lex_env	O
[	O
1	int
]	O
)	O
;	O
vs_push	function
(	O
lex_env	O
[	O
2	int
]	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
stack_cons	function
(	O
)	O
;	O
stack_cons	function
(	O
)	O
;	O
stack_cons	function
(	O
)	O
;	O
super_funcall	function
(	O
ah	O
)	O
;	O
}	O
DEFUNOM_NEW	function
(	O
"FUNCALL"	pointer
,	O
object	O
,	O
fLfuncall	O
,	O
LISP	O
,	O
1	int
,	O
MAX_ARGS	O
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
void	O
,	O
Lfuncall	O
,	O
(	O
object	O
fun	int
,	O
...	O
)	O
,	O
""	pointer
)	O
{	O
va_list	O
ap	int
;	O
object	O
*	O
new	O
;	O
int	O
n	int
=	O
VFUN_NARGS	O
;	O
va_start	O
(	O
ap	int
,	O
fun	int
)	O
;	O
{	O
COERCE_VA_LIST	function
(	O
new	O
,	O
ap	int
,	O
n	int
)	O
;	O
return	O
IapplyVector	function
(	O
fun	int
,	O
n	int
-	O
1	int
,	O
new	O
)	O
;	O
va_end	O
(	O
ap	int
)	O
;	O
}	O
}	O
DEFUNOM_NEW	function
(	O
"APPLY"	pointer
,	O
object	O
,	O
fLapply	O
,	O
LISP	O
,	O
2	int
,	O
MAX_ARGS	O
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
void	O
,	O
Lapply	O
,	O
(	O
object	O
fun	int
,	O
...	O
)	O
,	O
""	pointer
)	O
{	O
int	O
m	int
,	O
n	int
=	O
VFUN_NARGS	O
;	O
object	O
l	O
;	O
object	O
buf	O
[	O
MAX_ARGS	O
]	O
;	O
object	O
*	O
base	pointer
=	O
buf	O
;	O
va_list	O
ap	int
;	O
va_start	O
(	O
ap	int
,	O
fun	int
)	O
;	O
m	int
=	O
n	int
-	O
1	int
;	O
while	O
(	O
--	O
m	int
>	O
0	int
)	O
{	O
*	O
base	pointer
++	O
=	O
va_arg	function
(	O
ap	int
,	O
object	O
)	O
;	O
}	O
m	int
=	O
n	int
-	O
2	int
;	O
l	O
=	O
va_arg	function
(	O
ap	int
,	O
object	O
)	O
;	O
va_end	O
(	O
ap	int
)	O
;	O
while	O
(	O
!	O
endp	function
(	O
l	O
)	O
)	O
{	O
if	O
(	O
m	int
>=	O
MAX_ARGS	O
)	O
FEerror	function
(	O
" Lisps arglist maximum surpassed"	pointer
,	O
0	int
)	O
;	O
*	O
base	pointer
++	O
=	O
Mcar	function
(	O
l	O
)	O
;	O
l	O
=	O
Mcdr	function
(	O
l	O
)	O
;	O
m	int
++	O
;	O
}	O
return	O
IapplyVector	function
(	O
fun	int
,	O
m	int
,	O
buf	O
)	O
;	O
}	O
DEFUNOM_NEW	function
(	O
"EVAL"	pointer
,	O
object	O
,	O
fLeval	O
,	O
LISP	O
,	O
1	int
,	O
1	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
void	O
,	O
Leval	O
,	O
(	O
object	O
x0	O
)	O
,	O
""	pointer
)	O
{	O
object	O
*	O
lex	O
=	O
lex_env	O
;	O
lex_new	function
(	O
)	O
;	O
eval	function
(	O
x0	O
)	O
;	O
lex_env	O
=	O
lex	O
;	O
return	O
Ivs_values	function
(	O
)	O
;	O
}	O
LFD	function
(	O
Levalhook	int
)	O
(	O
void	O
)	O
{	O
object	O
env	O
;	O
bds_ptr	O
old_bds_top	O
=	O
bds_top	O
;	O
object	O
*	O
lex	O
=	O
lex_env	O
;	O
int	O
n	int
=	O
vs_top	O
-	O
vs_base	O
;	O
lex_env	O
=	O
vs_top	O
;	O
if	O
(	O
n	int
<	O
3	int
)	O
too_few_arguments	function
(	O
)	O
;	O
else	O
if	O
(	O
n	int
==	O
3	int
)	O
{	O
*	O
(	O
struct	O
nil3	struct
*	O
)	O
vs_top	O
=	O
three_nils	struct
;	O
vs_top	O
+=	O
3	int
;	O
}	O
else	O
if	O
(	O
n	int
==	O
4	int
)	O
{	O
env	O
=	O
vs_base	O
[	O
3	int
]	O
;	O
vs_push	function
(	O
car	function
(	O
env	O
)	O
)	O
;	O
env	O
=	O
cdr	function
(	O
env	O
)	O
;	O
vs_push	function
(	O
car	function
(	O
env	O
)	O
)	O
;	O
env	O
=	O
cdr	function
(	O
env	O
)	O
;	O
vs_push	function
(	O
car	function
(	O
env	O
)	O
)	O
;	O
}	O
else	O
too_many_arguments	function
(	O
)	O
;	O
bds_bind	function
(	O
Vevalhook	O
,	O
vs_base	O
[	O
1	int
]	O
)	O
;	O
bds_bind	function
(	O
Vapplyhook	O
,	O
vs_base	O
[	O
2	int
]	O
)	O
;	O
eval1	O
=	O
1	int
;	O
eval	function
(	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
lex_env	O
=	O
lex	O
;	O
bds_unwind	function
(	O
old_bds_top	O
)	O
;	O
}	O
LFD	function
(	O
Lapplyhook	int
)	O
(	O
void	O
)	O
{	O
object	O
env	O
;	O
bds_ptr	O
old_bds_top	O
=	O
bds_top	O
;	O
object	O
*	O
lex	O
=	O
lex_env	O
;	O
int	O
n	int
=	O
vs_top	O
-	O
vs_base	O
;	O
object	O
l	O
,	O
*	O
z	O
;	O
lex_env	O
=	O
vs_top	O
;	O
if	O
(	O
n	int
<	O
4	int
)	O
too_few_arguments	function
(	O
)	O
;	O
else	O
if	O
(	O
n	int
==	O
4	int
)	O
{	O
*	O
(	O
struct	O
nil3	struct
*	O
)	O
vs_top	O
=	O
three_nils	struct
;	O
vs_top	O
+=	O
3	int
;	O
}	O
else	O
if	O
(	O
n	int
==	O
5	int
)	O
{	O
env	O
=	O
vs_base	O
[	O
4	int
]	O
;	O
vs_push	function
(	O
car	function
(	O
env	O
)	O
)	O
;	O
env	O
=	O
cdr	function
(	O
env	O
)	O
;	O
vs_push	function
(	O
car	function
(	O
env	O
)	O
)	O
;	O
env	O
=	O
cdr	function
(	O
env	O
)	O
;	O
vs_push	function
(	O
car	function
(	O
env	O
)	O
)	O
;	O
}	O
else	O
too_many_arguments	function
(	O
)	O
;	O
bds_bind	function
(	O
Vevalhook	O
,	O
vs_base	O
[	O
2	int
]	O
)	O
;	O
bds_bind	function
(	O
Vapplyhook	O
,	O
vs_base	O
[	O
3	int
]	O
)	O
;	O
z	O
=	O
vs_top	O
;	O
for	O
(	O
l	O
=	O
vs_base	O
[	O
1	int
]	O
;	O
!	O
endp	function
(	O
l	O
)	O
;	O
l	O
=	O
l	O
->	O
c	O
.	O
c_cdr	O
)	O
vs_push	function
(	O
l	O
->	O
c	O
.	O
c_car	O
)	O
;	O
l	O
=	O
vs_base	O
[	O
0	int
]	O
;	O
vs_base	O
=	O
z	O
;	O
super_funcall	function
(	O
l	O
)	O
;	O
lex_env	O
=	O
lex	O
;	O
bds_unwind	function
(	O
old_bds_top	O
)	O
;	O
}	O
DEFUNO_NEW	function
(	O
"CONSTANTP"	pointer
,	O
object	O
,	O
fLconstantp	O
,	O
LISP	O
,	O
1	int
,	O
1	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
void	O
,	O
Lconstantp	O
,	O
(	O
object	O
x0	O
)	O
,	O
""	pointer
)	O
{	O
enum	O
type	O
x	enum
;	O
x	enum
=	O
type_of	function
(	O
x0	O
)	O
;	O
if	O
(	O
x	enum
==	O
t_cons	O
)	O
if	O
(	O
x0	O
->	O
c	O
.	O
c_car	O
==	O
sLquote	O
)	O
x0	O
=	O
Ct	O
;	O
else	O
x0	O
=	O
Cnil	O
;	O
else	O
if	O
(	O
x	enum
==	O
t_symbol	O
)	O
if	O
(	O
(	O
enum	O
stype	O
)	O
x0	O
->	O
s	O
.	O
s_stype	O
==	O
stp_constant	O
)	O
x0	O
=	O
Ct	O
;	O
else	O
x0	O
=	O
Cnil	O
;	O
else	O
x0	O
=	O
Ct	O
;	O
RETURN1	function
(	O
x0	O
)	O
;	O
}	O
object	O
ieval	function
(	O
object	O
x	enum
)	O
{	O
object	O
*	O
old_vs_base	O
;	O
object	O
*	O
old_vs_top	O
;	O
old_vs_base	O
=	O
vs_base	O
;	O
old_vs_top	O
=	O
vs_top	O
;	O
eval	function
(	O
x	enum
)	O
;	O
x	enum
=	O
vs_base	O
[	O
0	int
]	O
;	O
vs_base	O
=	O
old_vs_base	O
;	O
vs_top	O
=	O
old_vs_top	O
;	O
return	O
(	O
x	enum
)	O
;	O
}	O
object	O
ifuncall1	function
(	O
object	O
fun	int
,	O
object	O
arg1	int
)	O
{	O
object	O
*	O
old_vs_base	O
;	O
object	O
*	O
old_vs_top	O
;	O
object	O
x	enum
;	O
old_vs_base	O
=	O
vs_base	O
;	O
old_vs_top	O
=	O
vs_top	O
;	O
vs_base	O
=	O
vs_top	O
;	O
vs_push	function
(	O
arg1	int
)	O
;	O
super_funcall	function
(	O
fun	int
)	O
;	O
x	enum
=	O
vs_base	O
[	O
0	int
]	O
;	O
vs_top	O
=	O
old_vs_top	O
;	O
vs_base	O
=	O
old_vs_base	O
;	O
return	O
(	O
x	enum
)	O
;	O
}	O
object	O
ifuncall2	function
(	O
object	O
fun	int
,	O
object	O
arg1	int
,	O
object	O
arg2	int
)	O
{	O
object	O
*	O
old_vs_base	O
;	O
object	O
*	O
old_vs_top	O
;	O
object	O
x	enum
;	O
old_vs_base	O
=	O
vs_base	O
;	O
old_vs_top	O
=	O
vs_top	O
;	O
vs_base	O
=	O
vs_top	O
;	O
vs_push	function
(	O
arg1	int
)	O
;	O
vs_push	function
(	O
arg2	int
)	O
;	O
super_funcall	function
(	O
fun	int
)	O
;	O
x	enum
=	O
vs_base	O
[	O
0	int
]	O
;	O
vs_top	O
=	O
old_vs_top	O
;	O
vs_base	O
=	O
old_vs_base	O
;	O
return	O
(	O
x	enum
)	O
;	O
}	O
object	O
ifuncall3	function
(	O
object	O
fun	int
,	O
object	O
arg1	int
,	O
object	O
arg2	int
,	O
object	O
arg3	int
)	O
{	O
object	O
*	O
old_vs_base	O
;	O
object	O
*	O
old_vs_top	O
;	O
object	O
x	enum
;	O
old_vs_base	O
=	O
vs_base	O
;	O
old_vs_top	O
=	O
vs_top	O
;	O
vs_base	O
=	O
vs_top	O
;	O
vs_push	function
(	O
arg1	int
)	O
;	O
vs_push	function
(	O
arg2	int
)	O
;	O
vs_push	function
(	O
arg3	int
)	O
;	O
super_funcall	function
(	O
fun	int
)	O
;	O
x	enum
=	O
vs_base	O
[	O
0	int
]	O
;	O
vs_top	O
=	O
old_vs_top	O
;	O
vs_base	O
=	O
old_vs_base	O
;	O
return	O
(	O
x	enum
)	O
;	O
}	O
void	O
funcall_with_catcher	function
(	O
object	O
fname	int
,	O
object	O
fun	int
)	O
{	O
int	O
n	int
=	O
vs_top	O
-	O
vs_base	O
;	O
if	O
(	O
n	int
>	O
64	int
)	O
n	int
=	O
64	int
;	O
frs_push	function
(	O
FRS_CATCH	O
,	O
make_cons	function
(	O
fname	int
,	O
make_fixnum	function
(	O
n	int
)	O
)	O
)	O
;	O
if	O
(	O
nlj_active	O
)	O
nlj_active	O
=	O
FALSE	O
;	O
else	O
funcall	function
(	O
fun	int
)	O
;	O
frs_pop	function
(	O
)	O
;	O
}	O
static	O
object	O
fcalln_cclosure	function
(	O
object	O
first	int
,	O
va_list	O
ap	int
)	O
{	O
int	O
i	int
=	O
fcall	O
.	O
argd	O
;	O
{	O
object	O
*	O
base	pointer
=	O
vs_top	O
,	O
*	O
old_base	O
=	O
base	pointer
;	O
DEBUG_AVMA	O
vs_base	O
=	O
base	pointer
;	O
if	O
(	O
i	int
)	O
{	O
*	O
(	O
base	pointer
++	O
)	O
=	O
first	int
;	O
i	int
--	O
;	O
}	O
switch	O
(	O
i	int
)	O
{	O
case	O
10	int
:	O
*	O
(	O
base	pointer
++	O
)	O
=	O
va_arg	function
(	O
ap	int
,	O
object	O
)	O
;	O
case	O
9	int
:	O
*	O
(	O
base	pointer
++	O
)	O
=	O
va_arg	function
(	O
ap	int
,	O
object	O
)	O
;	O
case	O
8	int
:	O
*	O
(	O
base	pointer
++	O
)	O
=	O
va_arg	function
(	O
ap	int
,	O
object	O
)	O
;	O
case	O
7	int
:	O
*	O
(	O
base	pointer
++	O
)	O
=	O
va_arg	function
(	O
ap	int
,	O
object	O
)	O
;	O
case	O
6	int
:	O
*	O
(	O
base	pointer
++	O
)	O
=	O
va_arg	function
(	O
ap	int
,	O
object	O
)	O
;	O
case	O
5	int
:	O
*	O
(	O
base	pointer
++	O
)	O
=	O
va_arg	function
(	O
ap	int
,	O
object	O
)	O
;	O
case	O
4	int
:	O
*	O
(	O
base	pointer
++	O
)	O
=	O
va_arg	function
(	O
ap	int
,	O
object	O
)	O
;	O
case	O
3	int
:	O
*	O
(	O
base	pointer
++	O
)	O
=	O
va_arg	function
(	O
ap	int
,	O
object	O
)	O
;	O
case	O
2	int
:	O
*	O
(	O
base	pointer
++	O
)	O
=	O
va_arg	function
(	O
ap	int
,	O
object	O
)	O
;	O
case	O
1	int
:	O
*	O
(	O
base	pointer
++	O
)	O
=	O
va_arg	function
(	O
ap	int
,	O
object	O
)	O
;	O
case	O
0	int
:	O
break	O
;	O
default	O
:	O
FEerror	function
(	O
"bad args"	pointer
,	O
0	int
)	O
;	O
}	O
vs_top	O
=	O
base	pointer
;	O
base	pointer
=	O
old_base	O
;	O
do	O
{	O
object	O
fun	int
=	O
fcall	O
.	O
fun	int
;	O
object	O
*	O
top	O
,	O
*	O
base	pointer
,	O
l	O
;	O
massert	function
(	O
fun	int
->	O
cc	O
.	O
cc_turbo	O
)	O
;	O
if	O
(	O
fun	int
->	O
cc	O
.	O
cc_turbo	O
!=	O
NULL	O
)	O
{	O
(	O
*	O
fun	int
->	O
cc	O
.	O
cc_self	O
)	O
(	O
fun	int
)	O
;	O
break	O
;	O
}	O
top	O
=	O
vs_top	O
;	O
base	pointer
=	O
vs_base	O
;	O
for	O
(	O
l	O
=	O
fun	int
->	O
cc	O
.	O
cc_env	O
;	O
!	O
endp	function
(	O
l	O
)	O
;	O
l	O
=	O
l	O
->	O
c	O
.	O
c_cdr	O
)	O
vs_push	function
(	O
l	O
)	O
;	O
vs_base	O
=	O
vs_top	O
;	O
while	O
(	O
base	pointer
<	O
top	O
)	O
vs_push	function
(	O
*	O
base	pointer
++	O
)	O
;	O
(	O
*	O
fcall	O
.	O
fun	int
->	O
cc	O
.	O
cc_self	O
)	O
(	O
top	O
)	O
;	O
break	O
;	O
}	O
while	O
(	O
0	int
)	O
;	O
vs_top	O
=	O
base	pointer
;	O
CHECK_AVMA	O
;	O
return	O
(	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
}	O
}	O
static	O
object	O
fcalln_general	function
(	O
object	O
first	int
,	O
va_list	O
ap	int
)	O
{	O
int	O
i	int
=	O
fcall	O
.	O
argd	O
;	O
{	O
int	O
n	int
=	O
SFUN_NARGS	function
(	O
i	int
)	O
;	O
object	O
*	O
old_vs_top	O
=	O
vs_top	O
;	O
object	O
x	enum
;	O
enum	O
ftype	O
typ	enum
,	O
restype	enum
=	O
SFUN_RETURN_TYPE	function
(	O
i	int
)	O
;	O
vs_top	O
=	O
vs_base	O
=	O
old_vs_top	O
;	O
SFUN_START_ARG_TYPES	function
(	O
i	int
)	O
;	O
if	O
(	O
i	int
==	O
0	int
)	O
{	O
int	O
jj	int
=	O
0	int
;	O
while	O
(	O
n	int
--	O
>	O
0	int
)	O
{	O
typ	enum
=	O
SFUN_NEXT_TYPE	function
(	O
i	int
)	O
;	O
x	enum
=	O
(	O
typ	enum
==	O
f_object	O
?	O
(	O
jj	int
?	O
va_arg	function
(	O
ap	int
,	O
object	O
)	O
:	O
first	int
)	O
:	O
typ	enum
==	O
f_fixnum	O
?	O
make_fixnum	function
(	O
(	O
jj	int
?	O
va_arg	function
(	O
ap	int
,	O
fixnum	O
)	O
:	O
(	O
fixnum	O
)	O
first	int
)	O
)	O
:	O
(	O
object	O
)	O
(	O
FEerror	function
(	O
"bad type"	pointer
,	O
0	int
)	O
,	O
Cnil	O
)	O
)	O
;	O
*	O
(	O
vs_top	O
++	O
)	O
=	O
x	enum
;	O
jj	int
++	O
;	O
}	O
}	O
else	O
{	O
object	O
*	O
base	pointer
=	O
vs_top	O
;	O
*	O
(	O
base	pointer
++	O
)	O
=	O
first	int
;	O
n	int
--	O
;	O
while	O
(	O
n	int
--	O
>	O
0	int
)	O
*	O
(	O
base	pointer
++	O
)	O
=	O
va_arg	function
(	O
ap	int
,	O
object	O
)	O
;	O
vs_top	O
=	O
base	pointer
;	O
}	O
funcall	function
(	O
fcall	O
.	O
fun	int
)	O
;	O
x	enum
=	O
vs_base	O
[	O
0	int
]	O
;	O
vs_top	O
=	O
old_vs_top	O
;	O
return	O
(	O
restype	enum
==	O
f_object	O
?	O
x	enum
:	O
restype	enum
==	O
f_fixnum	O
?	O
(	O
object	O
)	O
(	O
fix	function
(	O
x	enum
)	O
)	O
:	O
(	O
object	O
)	O
(	O
FEerror	function
(	O
"bad type"	pointer
,	O
0	int
)	O
,	O
Cnil	O
)	O
)	O
;	O
}	O
}	O
static	O
object	O
fcalln_vfun	function
(	O
object	O
first	int
,	O
va_list	O
vl	int
)	O
{	O
object	O
*	O
new	O
,	O
res	O
;	O
DEBUG_AVMA	O
COERCE_VA_LIST_NEW	function
(	O
new	O
,	O
first	int
,	O
vl	int
,	O
fcall	O
.	O
argd	O
)	O
;	O
res	O
=	O
c_apply_n_fun	function
(	O
fcall	O
.	O
fun	int
,	O
fcall	O
.	O
argd	O
,	O
new	O
)	O
;	O
CHECK_AVMA	O
;	O
return	O
res	O
;	O
}	O
object	O
fcalln1	function
(	O
object	O
first	int
,	O
...	O
)	O
{	O
va_list	O
ap	int
;	O
object	O
fun	int
=	O
fcall	O
.	O
fun	int
;	O
DEBUG_AVMA	O
va_start	O
(	O
ap	int
,	O
first	int
)	O
;	O
if	O
(	O
type_of	function
(	O
fun	int
)	O
==	O
t_cfun	O
)	O
{	O
object	O
*	O
base	pointer
=	O
vs_top	O
,	O
*	O
old_base	O
=	O
base	pointer
;	O
int	O
i	int
=	O
fcall	O
.	O
argd	O
;	O
vs_base	O
=	O
base	pointer
;	O
if	O
(	O
i	int
)	O
{	O
*	O
(	O
base	pointer
++	O
)	O
=	O
first	int
;	O
i	int
--	O
;	O
}	O
switch	O
(	O
i	int
)	O
{	O
case	O
10	int
:	O
*	O
(	O
base	pointer
++	O
)	O
=	O
va_arg	function
(	O
ap	int
,	O
object	O
)	O
;	O
case	O
9	int
:	O
*	O
(	O
base	pointer
++	O
)	O
=	O
va_arg	function
(	O
ap	int
,	O
object	O
)	O
;	O
case	O
8	int
:	O
*	O
(	O
base	pointer
++	O
)	O
=	O
va_arg	function
(	O
ap	int
,	O
object	O
)	O
;	O
case	O
7	int
:	O
*	O
(	O
base	pointer
++	O
)	O
=	O
va_arg	function
(	O
ap	int
,	O
object	O
)	O
;	O
case	O
6	int
:	O
*	O
(	O
base	pointer
++	O
)	O
=	O
va_arg	function
(	O
ap	int
,	O
object	O
)	O
;	O
case	O
5	int
:	O
*	O
(	O
base	pointer
++	O
)	O
=	O
va_arg	function
(	O
ap	int
,	O
object	O
)	O
;	O
case	O
4	int
:	O
*	O
(	O
base	pointer
++	O
)	O
=	O
va_arg	function
(	O
ap	int
,	O
object	O
)	O
;	O
case	O
3	int
:	O
*	O
(	O
base	pointer
++	O
)	O
=	O
va_arg	function
(	O
ap	int
,	O
object	O
)	O
;	O
case	O
2	int
:	O
*	O
(	O
base	pointer
++	O
)	O
=	O
va_arg	function
(	O
ap	int
,	O
object	O
)	O
;	O
case	O
1	int
:	O
*	O
(	O
base	pointer
++	O
)	O
=	O
va_arg	function
(	O
ap	int
,	O
object	O
)	O
;	O
case	O
0	int
:	O
break	O
;	O
default	O
:	O
FEerror	function
(	O
"bad args"	pointer
,	O
0	int
)	O
;	O
}	O
vs_top	O
=	O
base	pointer
;	O
base	pointer
=	O
old_base	O
;	O
(	O
*	O
fcall	O
.	O
fun	int
->	O
cf	O
.	O
cf_self	O
)	O
(	O
)	O
;	O
vs_top	O
=	O
base	pointer
;	O
CHECK_AVMA	O
;	O
return	O
(	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
}	O
if	O
(	O
type_of	function
(	O
fun	int
)	O
==	O
t_cclosure	O
)	O
return	O
(	O
fcalln_cclosure	function
(	O
first	int
,	O
ap	int
)	O
)	O
;	O
if	O
(	O
type_of	function
(	O
fun	int
)	O
==	O
t_vfun	O
)	O
return	O
(	O
fcalln_vfun	function
(	O
first	int
,	O
ap	int
)	O
)	O
;	O
return	O
(	O
fcalln_general	function
(	O
first	int
,	O
ap	int
)	O
)	O
;	O
va_end	O
(	O
ap	int
)	O
;	O
}	O
object	O
funcall_cfun	function
(	O
funcvoid	O
fn	int
,	O
int	O
n	int
,	O
...	O
)	O
{	O
object	O
*	O
old_top	O
=	O
vs_top	O
;	O
object	O
*	O
old_base	O
=	O
vs_base	O
;	O
object	O
result	O
;	O
va_list	O
ap	int
;	O
DEBUG_AVMA	O
vs_base	O
=	O
vs_top	O
;	O
va_start	O
(	O
ap	int
,	O
n	int
)	O
;	O
while	O
(	O
n	int
--	O
>	O
0	int
)	O
vs_push	function
(	O
va_arg	function
(	O
ap	int
,	O
object	O
)	O
)	O
;	O
va_end	O
(	O
ap	int
)	O
;	O
(	O
*	O
fn	int
)	O
(	O
)	O
;	O
if	O
(	O
vs_top	O
>	O
vs_base	O
)	O
result	O
=	O
vs_base	O
[	O
0	int
]	O
;	O
else	O
result	O
=	O
Cnil	O
;	O
vs_top	O
=	O
old_top	O
;	O
vs_base	O
=	O
old_base	O
;	O
CHECK_AVMA	O
;	O
return	O
result	O
;	O
}	O
DEF_ORDINARY	function
(	O
"LAMBDA-BLOCK-EXPANDED"	pointer
,	O
sSlambda_block_expanded	O
,	O
SI	O
,	O
""	pointer
)	O
;	O
DEFVAR	function
(	O
"*BREAK-POINTS*"	pointer
,	O
sSAbreak_pointsA	int
,	O
SI	O
,	O
Cnil	O
,	O
""	pointer
)	O
;	O
DEFVAR	function
(	O
"*BREAK-STEP*"	pointer
,	O
sSAbreak_stepA	int
,	O
SI	O
,	O
Cnil	O
,	O
""	pointer
)	O
;	O
void	O
gcl_init_eval	function
(	O
void	O
)	O
{	O
make_constant	function
(	O
"CALL-ARGUMENTS-LIMIT"	pointer
,	O
make_fixnum	function
(	O
64	int
)	O
)	O
;	O
Vevalhook	O
=	O
make_special	function
(	O
"*EVALHOOK*"	pointer
,	O
Cnil	O
)	O
;	O
Vapplyhook	O
=	O
make_special	function
(	O
"*APPLYHOOK*"	pointer
,	O
Cnil	O
)	O
;	O
three_nils	struct
.	O
nil3_self	array
[	O
0	int
]	O
=	O
Cnil	O
;	O
three_nils	struct
.	O
nil3_self	array
[	O
1	int
]	O
=	O
Cnil	O
;	O
three_nils	struct
.	O
nil3_self	array
[	O
2	int
]	O
=	O
Cnil	O
;	O
make_function	function
(	O
"EVALHOOK"	pointer
,	O
Levalhook	int
)	O
;	O
make_function	function
(	O
"APPLYHOOK"	pointer
,	O
Lapplyhook	int
)	O
;	O
}	O
