typedef	O
struct	O
{	O
EUint32	long
nElems	long
;	O
EDMAT_BUFFER	struct
List	struct
;	O
}	O
DtID	struct
;	O
typedef	O
struct	O
{	O
EChar	char
ClassName	pointer
[	O
80	int
]	O
;	O
EChar	char
StringId	array
[	O
80	int
]	O
;	O
EChar	char
ByteId	array
[	O
80	int
]	O
;	O
EChar	char
Description	array
[	O
80	int
]	O
;	O
EUint32	long
Offset	long
;	O
}	O
ID_LIST	struct
;	O
EUint32	long
EDMAPROC	O
IDborn	function
(	O
OBJID	int
IdObj	int
)	O
{	O
DtID	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtID	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
IDrip	function
(	O
OBJID	int
IdObj	int
)	O
{	O
DtID	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtID	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
edma_buffer_free	function
(	O
&	O
m	pointer
->	O
List	struct
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
IDGetClassZsZ	function
(	O
OBJID	int
IdObj	int
,	O
EPChar	pointer
Id	int
,	O
EPChar	pointer
*	O
Result	pointer
)	O
{	O
DtID	struct
*	O
m	pointer
;	O
EUint32	long
i	int
;	O
ID_LIST	struct
*	O
Aux	pointer
;	O
m	pointer
=	O
(	O
DtID	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
Aux	pointer
=	O
(	O
ID_LIST	struct
*	O
)	O
(	O
m	pointer
->	O
List	struct
.	O
dat	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
m	pointer
->	O
nElems	long
;	O
i	int
++	O
)	O
{	O
if	O
(	O
strncmp	function
(	O
Aux	pointer
[	O
i	int
]	O
.	O
StringId	array
,	O
Id	int
,	O
80	int
)	O
==	O
0	int
)	O
break	O
;	O
}	O
if	O
(	O
i	int
!=	O
m	pointer
->	O
nElems	long
)	O
*	O
Result	pointer
=	O
Aux	pointer
[	O
i	int
]	O
.	O
ClassName	pointer
;	O
else	O
{	O
*	O
Result	pointer
=	O
NULL	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"No class matches %s"	pointer
,	O
Id	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
IDGetClassExZZsZ	function
(	O
OBJID	int
IdObj	int
,	O
EPChar	pointer
Id	int
,	O
EPChar	pointer
Id1	pointer
,	O
EPChar	pointer
*	O
Result	pointer
)	O
{	O
DtID	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtID	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"%s"	pointer
,	O
"GetClassEx not implemented"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
IDSetDBZ	function
(	O
OBJID	int
IdObj	int
,	O
EPChar	pointer
Name	pointer
)	O
{	O
DtID	struct
*	O
m	pointer
;	O
FILE	struct
*	O
f	pointer
;	O
EUint32	long
i	int
,	O
n	long
;	O
ID_LIST	struct
*	O
Aux	pointer
;	O
EChar	char
temp	array
[	O
1024	int
]	O
,	O
*	O
aux	pointer
;	O
m	pointer
=	O
(	O
DtID	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
edma_buffer_alloc	function
(	O
&	O
m	pointer
->	O
List	struct
,	O
sizeof	O
(	O
ID_LIST	struct
)	O
*	O
MAX_ID	int
)	O
;	O
if	O
(	O
m	pointer
->	O
List	struct
.	O
h	long
==	O
0	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"%s"	pointer
,	O
"Can't create shared memory block"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
f	pointer
=	O
fopen	function
(	O
Name	pointer
,	O
"rt"	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Can't open config file %s"	pointer
,	O
Name	pointer
)	O
;	O
edma_buffer_free	function
(	O
&	O
m	pointer
->	O
List	struct
)	O
;	O
return	O
-	O
1	int
;	O
}	O
fscanf	function
(	O
f	pointer
,	O
"%ld\n"	pointer
,	O
&	O
n	long
)	O
;	O
m	pointer
->	O
nElems	long
=	O
n	long
;	O
Aux	pointer
=	O
(	O
ID_LIST	struct
*	O
)	O
(	O
m	pointer
->	O
List	struct
.	O
dat	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	long
;	O
i	int
++	O
)	O
{	O
memset	function
(	O
temp	array
,	O
0	int
,	O
1024	int
)	O
;	O
fgets	function
(	O
temp	array
,	O
1024	int
,	O
f	pointer
)	O
;	O
aux	pointer
=	O
temp	array
;	O
while	O
(	O
*	O
++	O
aux	pointer
!=	O
0	int
)	O
if	O
(	O
*	O
aux	pointer
==	O
'\n'	O
||	O
*	O
aux	pointer
==	O
'\r'	O
)	O
*	O
aux	pointer
=	O
0	int
;	O
strcpy	function
(	O
Aux	pointer
[	O
i	int
]	O
.	O
ClassName	pointer
,	O
strtok	function
(	O
temp	array
,	O
":"	pointer
)	O
)	O
;	O
strcpy	function
(	O
Aux	pointer
[	O
i	int
]	O
.	O
StringId	array
,	O
strtok	function
(	O
NULL	O
,	O
":"	pointer
)	O
)	O
;	O
strcpy	function
(	O
Aux	pointer
[	O
i	int
]	O
.	O
Description	array
,	O
strtok	function
(	O
NULL	O
,	O
":"	pointer
)	O
)	O
;	O
printf	function
(	O
"(%s)(%s)(%s)\n"	pointer
,	O
Aux	pointer
[	O
i	int
]	O
.	O
ClassName	pointer
,	O
Aux	pointer
[	O
i	int
]	O
.	O
StringId	array
,	O
Aux	pointer
[	O
i	int
]	O
.	O
Description	array
)	O
;	O
}	O
fclose	function
(	O
f	pointer
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
IDGetItemU32sZsZsZ	function
(	O
OBJID	int
IdObj	int
,	O
EUint32	long
i	int
,	O
EPChar	pointer
cn	pointer
,	O
EPChar	pointer
sid	pointer
,	O
EPChar	pointer
des	pointer
)	O
{	O
DtID	struct
*	O
m	pointer
;	O
ID_LIST	struct
*	O
Aux	pointer
;	O
m	pointer
=	O
(	O
DtID	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
Aux	pointer
=	O
(	O
ID_LIST	struct
*	O
)	O
(	O
m	pointer
->	O
List	struct
.	O
dat	pointer
)	O
;	O
strcpy	function
(	O
cn	pointer
,	O
Aux	pointer
[	O
i	int
]	O
.	O
ClassName	pointer
)	O
;	O
strcpy	function
(	O
sid	pointer
,	O
Aux	pointer
[	O
i	int
]	O
.	O
StringId	array
)	O
;	O
strcpy	function
(	O
des	pointer
,	O
Aux	pointer
[	O
i	int
]	O
.	O
Description	array
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
IDAddItemZZZ	function
(	O
OBJID	int
IdObj	int
)	O
{	O
DtID	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtID	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"%s"	pointer
,	O
"AddItem not implemented"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
IDDeleteItemZZ	function
(	O
OBJID	int
IdObj	int
)	O
{	O
DtID	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtID	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"%s"	pointer
,	O
"DeleteItem not implemented"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
