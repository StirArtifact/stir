static	O
int	O
interactive	int
;	O
void	O
lperror	function
(	O
char	O
*	O
text	pointer
,	O
int	O
rc	int
)	O
{	O
mu_error	function
(	O
"%s: %s"	pointer
,	O
text	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
struct	O
listop_closure	struct
{	O
mu_list_t	pointer
lst	pointer
;	O
mu_iterator_t	pointer
itr	pointer
[	O
NITR	int
]	O
;	O
int	O
num	long
;	O
}	O
;	O
static	O
void	O
listop_invalidate_iterators	function
(	O
struct	O
listop_closure	struct
*	O
cls	pointer
)	O
{	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NITR	int
;	O
i	long
++	O
)	O
mu_iterator_destroy	function
(	O
&	O
cls	pointer
->	O
itr	pointer
[	O
i	long
]	O
)	O
;	O
}	O
void	O
print_list	function
(	O
mu_list_t	pointer
list	pointer
)	O
{	O
mu_iterator_t	pointer
itr	pointer
;	O
size_t	long
count	long
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_list_get_iterator	function
(	O
list	pointer
,	O
&	O
itr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
lperror	function
(	O
"mu_list_get_iterator"	pointer
,	O
rc	int
)	O
;	O
rc	int
=	O
mu_list_count	function
(	O
list	pointer
,	O
&	O
count	long
)	O
;	O
if	O
(	O
rc	int
)	O
lperror	function
(	O
"mu_iterator_current"	pointer
,	O
rc	int
)	O
;	O
mu_printf	function
(	O
"# items: %lu\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
count	long
)	O
;	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
char	O
*	O
text	pointer
;	O
rc	int
=	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
text	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
lperror	function
(	O
"mu_iterator_current"	pointer
,	O
rc	int
)	O
;	O
mu_printf	function
(	O
"%s\n"	pointer
,	O
text	pointer
)	O
;	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
}	O
int	O
com_print	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
struct	O
listop_closure	struct
*	O
cls	pointer
=	O
env	pointer
;	O
print_list	function
(	O
cls	pointer
->	O
lst	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
com_count	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
struct	O
listop_closure	struct
*	O
cls	pointer
=	O
env	pointer
;	O
size_t	long
n	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_list_count	function
(	O
cls	pointer
->	O
lst	pointer
,	O
&	O
n	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
lperror	function
(	O
"mu_iterator_current"	pointer
,	O
rc	int
)	O
;	O
else	O
mu_printf	function
(	O
"%lu\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
n	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
com_next	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
struct	O
listop_closure	struct
*	O
cls	pointer
=	O
env	pointer
;	O
int	O
skip	int
=	O
argc	long
==	O
2	int
?	O
strtoul	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
NULL	O
,	O
0	int
)	O
:	O
1	int
;	O
if	O
(	O
skip	int
==	O
0	int
)	O
{	O
mu_error	function
(	O
"next arg?"	pointer
)	O
;	O
}	O
else	O
{	O
while	O
(	O
skip	int
--	O
)	O
mu_iterator_next	function
(	O
cls	pointer
->	O
itr	pointer
[	O
cls	pointer
->	O
num	long
]	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
com_delete	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
struct	O
listop_closure	struct
*	O
cls	pointer
=	O
env	pointer
;	O
mu_list_t	pointer
list	pointer
=	O
cls	pointer
->	O
lst	pointer
;	O
int	O
rc	int
;	O
while	O
(	O
--	O
argc	long
)	O
{	O
rc	int
=	O
mu_list_remove	function
(	O
list	pointer
,	O
*	O
++	O
argv	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_remove"	pointer
,	O
*	O
argv	pointer
,	O
rc	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
com_add	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
struct	O
listop_closure	struct
*	O
cls	pointer
=	O
env	pointer
;	O
mu_list_t	pointer
list	pointer
=	O
cls	pointer
->	O
lst	pointer
;	O
int	O
rc	int
;	O
while	O
(	O
--	O
argc	long
)	O
{	O
rc	int
=	O
mu_list_append	function
(	O
list	pointer
,	O
strdup	function
(	O
*	O
++	O
argv	pointer
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_append"	pointer
,	O
*	O
argv	pointer
,	O
rc	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
com_prep	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
struct	O
listop_closure	struct
*	O
cls	pointer
=	O
env	pointer
;	O
mu_list_t	pointer
list	pointer
=	O
cls	pointer
->	O
lst	pointer
;	O
int	O
rc	int
;	O
while	O
(	O
--	O
argc	long
)	O
{	O
rc	int
=	O
mu_list_prepend	function
(	O
list	pointer
,	O
strdup	function
(	O
*	O
++	O
argv	pointer
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_prepend"	pointer
,	O
*	O
argv	pointer
,	O
rc	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
mu_list_t	pointer
read_list	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
rc	int
;	O
mu_list_t	pointer
list	pointer
;	O
rc	int
=	O
mu_list_create	function
(	O
&	O
list	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_create"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
return	O
NULL	O
;	O
}	O
mu_list_set_destroy_item	function
(	O
list	pointer
,	O
mu_list_free_item	function
)	O
;	O
for	O
(	O
;	O
argc	long
;	O
argc	long
--	O
,	O
argv	pointer
++	O
)	O
{	O
rc	int
=	O
mu_list_append	function
(	O
list	pointer
,	O
strdup	function
(	O
*	O
argv	pointer
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_append"	pointer
,	O
*	O
argv	pointer
,	O
rc	int
)	O
;	O
mu_list_destroy	function
(	O
&	O
list	pointer
)	O
;	O
break	O
;	O
}	O
}	O
return	O
list	pointer
;	O
}	O
int	O
com_ins	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
struct	O
listop_closure	struct
*	O
cls	pointer
=	O
env	pointer
;	O
mu_list_t	pointer
list	pointer
=	O
cls	pointer
->	O
lst	pointer
;	O
int	O
rc	int
;	O
char	O
*	O
item	pointer
;	O
int	O
insert_before	int
=	O
0	int
;	O
if	O
(	O
mu_assoc_lookup	function
(	O
options	pointer
,	O
"before"	pointer
,	O
NULL	O
)	O
==	O
0	int
)	O
insert_before	int
=	O
1	int
;	O
item	pointer
=	O
argv	pointer
[	O
1	int
]	O
;	O
if	O
(	O
3	int
==	O
argc	long
)	O
rc	int
=	O
mu_list_insert	function
(	O
list	pointer
,	O
item	pointer
,	O
strdup	function
(	O
argv	pointer
[	O
2	int
]	O
)	O
,	O
insert_before	int
)	O
;	O
else	O
{	O
mu_list_t	pointer
tmp	pointer
=	O
read_list	function
(	O
argc	long
-	O
2	int
,	O
argv	pointer
+	O
2	int
)	O
;	O
if	O
(	O
!	O
tmp	pointer
)	O
return	O
0	int
;	O
rc	int
=	O
mu_list_insert_list	function
(	O
list	pointer
,	O
item	pointer
,	O
tmp	pointer
,	O
insert_before	int
)	O
;	O
mu_list_destroy	function
(	O
&	O
tmp	pointer
)	O
;	O
}	O
if	O
(	O
rc	int
)	O
lperror	function
(	O
"mu_list_insert"	pointer
,	O
rc	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
com_repl	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
struct	O
listop_closure	struct
*	O
cls	pointer
=	O
env	pointer
;	O
mu_list_t	pointer
list	pointer
=	O
cls	pointer
->	O
lst	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_list_replace	function
(	O
list	pointer
,	O
argv	pointer
[	O
1	int
]	O
,	O
strdup	function
(	O
argv	pointer
[	O
2	int
]	O
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_replace"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
return	O
0	int
;	O
}	O
void	O
ictl_tell	function
(	O
mu_iterator_t	pointer
itr	pointer
,	O
int	O
argc	long
)	O
{	O
size_t	long
pos	long
;	O
int	O
rc	int
;	O
if	O
(	O
argc	long
)	O
{	O
mu_error	function
(	O
"ictl tell?"	pointer
)	O
;	O
return	O
;	O
}	O
rc	int
=	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_tell	int
,	O
&	O
pos	long
)	O
;	O
if	O
(	O
rc	int
)	O
lperror	function
(	O
"mu_iterator_ctl"	pointer
,	O
rc	int
)	O
;	O
mu_printf	function
(	O
"%lu\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
pos	long
)	O
;	O
}	O
void	O
ictl_del	function
(	O
mu_iterator_t	pointer
itr	pointer
,	O
int	O
argc	long
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
argc	long
)	O
{	O
mu_error	function
(	O
"ictl del?"	pointer
)	O
;	O
return	O
;	O
}	O
rc	int
=	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_delete	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
lperror	function
(	O
"mu_iterator_ctl"	pointer
,	O
rc	int
)	O
;	O
}	O
int	O
ictl_repl	function
(	O
mu_iterator_t	pointer
itr	pointer
,	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
argc	long
!=	O
1	int
)	O
{	O
mu_error	function
(	O
"ictl repl item?"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
rc	int
=	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_replace	int
,	O
strdup	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
lperror	function
(	O
"mu_iterator_ctl"	pointer
,	O
rc	int
)	O
;	O
return	O
0	int
;	O
}	O
void	O
ictl_dir	function
(	O
mu_iterator_t	pointer
itr	pointer
,	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
rc	int
;	O
int	O
dir	pointer
;	O
if	O
(	O
argc	long
>	O
1	int
)	O
{	O
mu_error	function
(	O
"ictl dir [backwards|forwards]?"	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
argc	long
==	O
1	int
)	O
{	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
"backwards"	pointer
)	O
==	O
0	int
)	O
dir	pointer
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
"forwards"	pointer
)	O
==	O
0	int
)	O
dir	pointer
=	O
0	int
;	O
else	O
{	O
mu_error	function
(	O
"ictl dir [backwards|forwards]?"	pointer
)	O
;	O
return	O
;	O
}	O
rc	int
=	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_set_direction	int
,	O
&	O
dir	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
lperror	function
(	O
"mu_iterator_ctl"	pointer
,	O
rc	int
)	O
;	O
}	O
else	O
{	O
rc	int
=	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_qry_direction	int
,	O
&	O
dir	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
lperror	function
(	O
"mu_iterator_ctl"	pointer
,	O
rc	int
)	O
;	O
mu_printf	function
(	O
"%s\n"	pointer
,	O
dir	pointer
?	O
"backwards"	pointer
:	O
"forwards"	pointer
)	O
;	O
}	O
return	O
;	O
}	O
void	O
ictl_ins	function
(	O
mu_iterator_t	pointer
itr	pointer
,	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
argc	long
<	O
1	int
)	O
{	O
mu_error	function
(	O
"ictl ins item [item*]?"	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
argc	long
==	O
1	int
)	O
rc	int
=	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_insert	int
,	O
strdup	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
)	O
;	O
else	O
{	O
mu_list_t	pointer
tmp	pointer
=	O
read_list	function
(	O
argc	long
,	O
argv	pointer
)	O
;	O
if	O
(	O
!	O
tmp	pointer
)	O
return	O
;	O
rc	int
=	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_insert_list	int
,	O
tmp	pointer
)	O
;	O
mu_list_destroy	function
(	O
&	O
tmp	pointer
)	O
;	O
}	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_iterator_ctl"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
return	O
;	O
}	O
int	O
com_ictl	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
struct	O
listop_closure	struct
*	O
cls	pointer
=	O
env	pointer
;	O
mu_iterator_t	pointer
itr	pointer
=	O
cls	pointer
->	O
itr	pointer
[	O
cls	pointer
->	O
num	long
]	O
;	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"tell"	pointer
)	O
==	O
0	int
)	O
ictl_tell	function
(	O
itr	pointer
,	O
argc	long
-	O
2	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"del"	pointer
)	O
==	O
0	int
)	O
ictl_del	function
(	O
itr	pointer
,	O
argc	long
-	O
2	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"repl"	pointer
)	O
==	O
0	int
)	O
ictl_repl	function
(	O
itr	pointer
,	O
argc	long
-	O
2	int
,	O
argv	pointer
+	O
2	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"ins"	pointer
)	O
==	O
0	int
)	O
ictl_ins	function
(	O
itr	pointer
,	O
argc	long
-	O
2	int
,	O
argv	pointer
+	O
2	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"dir"	pointer
)	O
==	O
0	int
)	O
ictl_dir	function
(	O
itr	pointer
,	O
argc	long
-	O
2	int
,	O
argv	pointer
+	O
2	int
)	O
;	O
else	O
mu_error	function
(	O
"unknown subcommand"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
com_iter	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
struct	O
listop_closure	struct
*	O
cls	pointer
=	O
env	pointer
;	O
int	O
n	pointer
;	O
n	pointer
=	O
strtoul	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
n	pointer
<	O
0	int
||	O
n	pointer
>=	O
NITR	int
)	O
{	O
mu_error	function
(	O
"iter [0-3]?"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
!	O
cls	pointer
->	O
itr	pointer
[	O
n	pointer
]	O
)	O
{	O
int	O
rc	int
=	O
mu_list_get_iterator	function
(	O
cls	pointer
->	O
lst	pointer
,	O
&	O
cls	pointer
->	O
itr	pointer
[	O
n	pointer
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
lperror	function
(	O
"mu_list_get_iterator"	pointer
,	O
rc	int
)	O
;	O
mu_iterator_first	function
(	O
cls	pointer
->	O
itr	pointer
[	O
n	pointer
]	O
)	O
;	O
}	O
cls	pointer
->	O
num	long
=	O
n	pointer
;	O
return	O
0	int
;	O
}	O
int	O
com_find	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
struct	O
listop_closure	struct
*	O
cls	pointer
=	O
env	pointer
;	O
mu_iterator_t	pointer
itr	pointer
=	O
cls	pointer
->	O
itr	pointer
[	O
cls	pointer
->	O
num	long
]	O
;	O
char	O
*	O
text	pointer
;	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
text	pointer
)	O
;	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
char	O
*	O
item	pointer
;	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
item	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
item	pointer
)	O
==	O
0	int
)	O
return	O
0	int
;	O
}	O
mu_error	function
(	O
"%s not in list"	pointer
,	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
com_cur	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
struct	O
listop_closure	struct
*	O
cls	pointer
=	O
env	pointer
;	O
mu_iterator_t	pointer
itr	pointer
=	O
cls	pointer
->	O
itr	pointer
[	O
cls	pointer
->	O
num	long
]	O
;	O
char	O
*	O
text	pointer
;	O
size_t	long
pos	long
;	O
int	O
rc	int
;	O
mu_printf	function
(	O
"%lu:"	pointer
,	O
(	O
unsigned	O
long	O
)	O
cls	pointer
->	O
num	long
)	O
;	O
rc	int
=	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_tell	int
,	O
&	O
pos	long
)	O
;	O
if	O
(	O
rc	int
==	O
MU_ERR_NOENT	O
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_iterator_ctl"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
rc	int
)	O
lperror	function
(	O
"mu_iterator_ctl"	pointer
,	O
rc	int
)	O
;	O
mu_printf	function
(	O
"%lu:"	pointer
,	O
(	O
unsigned	O
long	O
)	O
pos	long
)	O
;	O
rc	int
=	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
text	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
lperror	function
(	O
"mu_iterator_current"	pointer
,	O
rc	int
)	O
;	O
mu_printf	function
(	O
"%s\n"	pointer
,	O
text	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
com_first	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
struct	O
listop_closure	struct
*	O
cls	pointer
=	O
env	pointer
;	O
mu_iterator_first	function
(	O
cls	pointer
->	O
itr	pointer
[	O
cls	pointer
->	O
num	long
]	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
map_even	function
(	O
void	O
*	O
*	O
itmv	pointer
,	O
size_t	long
itmc	long
,	O
void	O
*	O
call_data	pointer
)	O
{	O
int	O
*	O
num	long
=	O
call_data	pointer
,	O
n	pointer
=	O
*	O
num	long
;	O
*	O
num	long
=	O
!	O
*	O
num	long
;	O
if	O
(	O
(	O
n	pointer
%	O
2	int
)	O
==	O
0	int
)	O
{	O
itmv	pointer
[	O
0	int
]	O
=	O
strdup	function
(	O
itmv	pointer
[	O
0	int
]	O
)	O
;	O
return	O
MU_LIST_MAP_OK	int
;	O
}	O
return	O
MU_LIST_MAP_SKIP	int
;	O
}	O
static	O
int	O
map_odd	function
(	O
void	O
*	O
*	O
itmv	pointer
,	O
size_t	long
itmc	long
,	O
void	O
*	O
call_data	pointer
)	O
{	O
int	O
*	O
num	long
=	O
call_data	pointer
,	O
n	pointer
=	O
*	O
num	long
;	O
*	O
num	long
=	O
!	O
*	O
num	long
;	O
if	O
(	O
n	pointer
%	O
2	int
)	O
{	O
itmv	pointer
[	O
0	int
]	O
=	O
strdup	function
(	O
itmv	pointer
[	O
0	int
]	O
)	O
;	O
return	O
MU_LIST_MAP_OK	int
;	O
}	O
return	O
MU_LIST_MAP_SKIP	int
;	O
}	O
static	O
int	O
map_concat	function
(	O
void	O
*	O
*	O
itmv	pointer
,	O
size_t	long
itmc	long
,	O
void	O
*	O
call_data	pointer
)	O
{	O
char	O
*	O
delim	pointer
=	O
call_data	pointer
;	O
size_t	long
dlen	long
=	O
strlen	function
(	O
delim	pointer
)	O
;	O
size_t	long
i	long
;	O
size_t	long
len	long
=	O
0	int
;	O
char	O
*	O
res	pointer
,	O
*	O
p	pointer
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
itmc	long
;	O
i	long
++	O
)	O
len	long
+=	O
strlen	function
(	O
itmv	pointer
[	O
i	long
]	O
)	O
;	O
len	long
+=	O
(	O
itmc	long
-	O
1	int
)	O
*	O
dlen	long
+	O
1	int
;	O
res	pointer
=	O
malloc	function
(	O
len	long
)	O
;	O
if	O
(	O
!	O
res	pointer
)	O
abort	function
(	O
)	O
;	O
p	pointer
=	O
res	pointer
;	O
for	O
(	O
i	long
=	O
0	int
;	O
;	O
)	O
{	O
p	pointer
=	O
mu_stpcpy	function
(	O
p	pointer
,	O
itmv	pointer
[	O
i	long
++	O
]	O
)	O
;	O
if	O
(	O
i	long
==	O
itmc	long
)	O
break	O
;	O
p	pointer
=	O
mu_stpcpy	function
(	O
p	pointer
,	O
delim	pointer
)	O
;	O
}	O
itmv	pointer
[	O
0	int
]	O
=	O
res	pointer
;	O
return	O
MU_LIST_MAP_OK	int
;	O
}	O
struct	O
trim_data	struct
{	O
size_t	long
n	pointer
;	O
size_t	long
lim	long
;	O
}	O
;	O
static	O
int	O
map_skip	function
(	O
void	O
*	O
*	O
itmv	pointer
,	O
size_t	long
itmc	long
,	O
void	O
*	O
call_data	pointer
)	O
{	O
struct	O
trim_data	struct
*	O
td	pointer
=	O
call_data	pointer
;	O
if	O
(	O
td	pointer
->	O
n	pointer
++	O
<	O
td	pointer
->	O
lim	long
)	O
return	O
MU_LIST_MAP_SKIP	int
;	O
itmv	pointer
[	O
0	int
]	O
=	O
strdup	function
(	O
itmv	pointer
[	O
0	int
]	O
)	O
;	O
return	O
MU_LIST_MAP_OK	int
;	O
}	O
static	O
int	O
map_trim	function
(	O
void	O
*	O
*	O
itmv	pointer
,	O
size_t	long
itmc	long
,	O
void	O
*	O
call_data	pointer
)	O
{	O
struct	O
trim_data	struct
*	O
td	pointer
=	O
call_data	pointer
;	O
if	O
(	O
td	pointer
->	O
n	pointer
++	O
<	O
td	pointer
->	O
lim	long
)	O
{	O
itmv	pointer
[	O
0	int
]	O
=	O
strdup	function
(	O
itmv	pointer
[	O
0	int
]	O
)	O
;	O
return	O
MU_LIST_MAP_OK	int
;	O
}	O
return	O
MU_LIST_MAP_STOP	int
|	O
MU_LIST_MAP_SKIP	int
;	O
}	O
int	O
com_map	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
struct	O
listop_closure	struct
*	O
cls	pointer
=	O
env	pointer
;	O
mu_list_t	pointer
list	pointer
=	O
cls	pointer
->	O
lst	pointer
;	O
mu_list_t	pointer
result	pointer
;	O
int	O
rc	int
;	O
int	O
replace	int
=	O
0	int
;	O
if	O
(	O
mu_assoc_lookup	function
(	O
options	pointer
,	O
"replace"	pointer
,	O
NULL	O
)	O
==	O
0	int
)	O
replace	int
=	O
1	int
;	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"even"	pointer
)	O
==	O
0	int
)	O
{	O
int	O
n	pointer
=	O
0	int
;	O
rc	int
=	O
mu_list_map	function
(	O
list	pointer
,	O
map_even	function
,	O
&	O
n	pointer
,	O
1	int
,	O
&	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"odd"	pointer
)	O
==	O
0	int
)	O
{	O
int	O
n	pointer
=	O
0	int
;	O
rc	int
=	O
mu_list_map	function
(	O
list	pointer
,	O
map_odd	function
,	O
&	O
n	pointer
,	O
1	int
,	O
&	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"concat"	pointer
)	O
==	O
0	int
)	O
{	O
size_t	long
num	long
;	O
char	O
*	O
delim	pointer
=	O
""	pointer
;	O
if	O
(	O
argc	long
<	O
3	int
||	O
argc	long
>	O
4	int
)	O
{	O
mu_error	function
(	O
"map concat NUM [DELIM]"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
num	long
=	O
atoi	function
(	O
argv	pointer
[	O
2	int
]	O
)	O
;	O
if	O
(	O
argc	long
==	O
4	int
)	O
delim	pointer
=	O
argv	pointer
[	O
3	int
]	O
;	O
rc	int
=	O
mu_list_map	function
(	O
list	pointer
,	O
map_concat	function
,	O
delim	pointer
,	O
num	long
,	O
&	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"skip"	pointer
)	O
==	O
0	int
)	O
{	O
struct	O
trim_data	struct
td	pointer
;	O
if	O
(	O
argc	long
<	O
3	int
||	O
argc	long
>	O
4	int
)	O
{	O
mu_error	function
(	O
"map skip NUM"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
td	pointer
.	O
n	pointer
=	O
0	int
;	O
td	pointer
.	O
lim	long
=	O
atoi	function
(	O
argv	pointer
[	O
2	int
]	O
)	O
;	O
rc	int
=	O
mu_list_map	function
(	O
list	pointer
,	O
map_skip	function
,	O
&	O
td	pointer
,	O
1	int
,	O
&	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"trim"	pointer
)	O
==	O
0	int
)	O
{	O
struct	O
trim_data	struct
td	pointer
;	O
if	O
(	O
argc	long
<	O
3	int
||	O
argc	long
>	O
4	int
)	O
{	O
mu_error	function
(	O
"map trim NUM"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
td	pointer
.	O
n	pointer
=	O
0	int
;	O
td	pointer
.	O
lim	long
=	O
atoi	function
(	O
argv	pointer
[	O
2	int
]	O
)	O
;	O
rc	int
=	O
mu_list_map	function
(	O
list	pointer
,	O
map_trim	function
,	O
&	O
td	pointer
,	O
1	int
,	O
&	O
result	pointer
)	O
;	O
}	O
else	O
{	O
mu_error	function
(	O
"unknown map name"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_map"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
return	O
0	int
;	O
}	O
mu_list_set_destroy_item	function
(	O
result	pointer
,	O
mu_list_free_item	function
)	O
;	O
if	O
(	O
replace	int
)	O
{	O
size_t	long
count	long
[	O
2	int
]	O
;	O
mu_list_count	function
(	O
list	pointer
,	O
&	O
count	long
[	O
0	int
]	O
)	O
;	O
mu_list_count	function
(	O
result	pointer
,	O
&	O
count	long
[	O
1	int
]	O
)	O
;	O
mu_printf	function
(	O
"%lu in, %lu out\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
count	long
[	O
0	int
]	O
,	O
(	O
unsigned	O
long	O
)	O
count	long
[	O
1	int
]	O
)	O
;	O
mu_list_destroy	function
(	O
&	O
list	pointer
)	O
;	O
cls	pointer
->	O
lst	pointer
=	O
result	pointer
;	O
listop_invalidate_iterators	function
(	O
cls	pointer
)	O
;	O
}	O
else	O
{	O
print_list	function
(	O
result	pointer
)	O
;	O
mu_list_destroy	function
(	O
&	O
result	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
dup_string	function
(	O
void	O
*	O
*	O
res	pointer
,	O
void	O
*	O
itm	pointer
,	O
void	O
*	O
closure	pointer
)	O
{	O
*	O
res	pointer
=	O
strdup	function
(	O
itm	pointer
)	O
;	O
return	O
*	O
res	pointer
?	O
0	int
:	O
ENOMEM	int
;	O
}	O
int	O
com_slice	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
struct	O
listop_closure	struct
*	O
cls	pointer
=	O
env	pointer
;	O
mu_list_t	pointer
list	pointer
=	O
cls	pointer
->	O
lst	pointer
;	O
mu_list_t	pointer
result	pointer
;	O
int	O
rc	int
,	O
i	long
;	O
int	O
replace	int
=	O
0	int
;	O
size_t	long
*	O
buf	pointer
;	O
if	O
(	O
mu_assoc_lookup	function
(	O
options	pointer
,	O
"replace"	pointer
,	O
NULL	O
)	O
==	O
0	int
)	O
replace	int
=	O
1	int
;	O
argc	long
--	O
;	O
argv	pointer
++	O
;	O
buf	pointer
=	O
calloc	function
(	O
argc	long
,	O
sizeof	O
(	O
buf	pointer
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
buf	pointer
)	O
abort	function
(	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
buf	pointer
[	O
i	long
]	O
=	O
atoi	function
(	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
rc	int
=	O
mu_list_slice_dup	function
(	O
&	O
result	pointer
,	O
list	pointer
,	O
buf	pointer
,	O
argc	long
,	O
dup_string	function
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_slice_dup"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
replace	int
)	O
{	O
size_t	long
count	long
[	O
2	int
]	O
;	O
mu_list_count	function
(	O
list	pointer
,	O
&	O
count	long
[	O
0	int
]	O
)	O
;	O
mu_list_count	function
(	O
result	pointer
,	O
&	O
count	long
[	O
1	int
]	O
)	O
;	O
mu_printf	function
(	O
"%lu in, %lu out\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
count	long
[	O
0	int
]	O
,	O
(	O
unsigned	O
long	O
)	O
count	long
[	O
1	int
]	O
)	O
;	O
mu_list_destroy	function
(	O
&	O
list	pointer
)	O
;	O
cls	pointer
->	O
lst	pointer
=	O
result	pointer
;	O
listop_invalidate_iterators	function
(	O
cls	pointer
)	O
;	O
}	O
else	O
{	O
print_list	function
(	O
result	pointer
)	O
;	O
mu_list_destroy	function
(	O
&	O
result	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
com_head	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
struct	O
listop_closure	struct
*	O
cls	pointer
=	O
env	pointer
;	O
int	O
rc	int
;	O
char	O
*	O
text	pointer
;	O
rc	int
=	O
mu_list_head	function
(	O
cls	pointer
->	O
lst	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
text	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_head"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
else	O
mu_printf	function
(	O
"%s\n"	pointer
,	O
text	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
com_tail	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
struct	O
listop_closure	struct
*	O
cls	pointer
=	O
env	pointer
;	O
int	O
rc	int
;	O
const	O
char	O
*	O
text	pointer
;	O
rc	int
=	O
mu_list_tail	function
(	O
cls	pointer
->	O
lst	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
text	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_tail"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
else	O
mu_printf	function
(	O
"%s\n"	pointer
,	O
text	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
fold_concat	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
,	O
void	O
*	O
prev	pointer
,	O
void	O
*	O
*	O
ret	pointer
)	O
{	O
char	O
*	O
s	pointer
;	O
size_t	long
len	long
=	O
strlen	function
(	O
item	pointer
)	O
;	O
size_t	long
prevlen	long
=	O
0	int
;	O
if	O
(	O
prev	pointer
)	O
prevlen	long
=	O
strlen	function
(	O
prev	pointer
)	O
;	O
s	pointer
=	O
realloc	function
(	O
prev	pointer
,	O
len	long
+	O
prevlen	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
abort	function
(	O
)	O
;	O
strcpy	function
(	O
s	pointer
+	O
prevlen	long
,	O
item	pointer
)	O
;	O
*	O
ret	pointer
=	O
s	pointer
;	O
return	O
0	int
;	O
}	O
int	O
com_fold	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
struct	O
listop_closure	struct
*	O
cls	pointer
=	O
env	pointer
;	O
char	O
*	O
text	pointer
=	O
NULL	O
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_list_fold	function
(	O
cls	pointer
->	O
lst	pointer
,	O
fold_concat	function
,	O
NULL	O
,	O
NULL	O
,	O
&	O
text	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_fold"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
else	O
if	O
(	O
text	pointer
)	O
{	O
mu_printf	function
(	O
"%s\n"	pointer
,	O
text	pointer
)	O
;	O
free	function
(	O
text	pointer
)	O
;	O
}	O
else	O
mu_printf	function
(	O
"NULL\n"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
com_rfold	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
struct	O
listop_closure	struct
*	O
cls	pointer
=	O
env	pointer
;	O
char	O
*	O
text	pointer
=	O
NULL	O
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_list_rfold	function
(	O
cls	pointer
->	O
lst	pointer
,	O
fold_concat	function
,	O
NULL	O
,	O
NULL	O
,	O
&	O
text	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_fold"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
else	O
if	O
(	O
text	pointer
)	O
{	O
mu_printf	function
(	O
"%s\n"	pointer
,	O
text	pointer
)	O
;	O
free	function
(	O
text	pointer
)	O
;	O
}	O
else	O
mu_printf	function
(	O
"NULL\n"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
com_sort	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
struct	O
listop_closure	struct
*	O
cls	pointer
=	O
env	pointer
;	O
mu_list_sort	function
(	O
cls	pointer
->	O
lst	pointer
,	O
NULL	O
)	O
;	O
listop_invalidate_iterators	function
(	O
cls	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
com_push	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
struct	O
listop_closure	struct
*	O
cls	pointer
=	O
env	pointer
;	O
while	O
(	O
--	O
argc	long
)	O
{	O
int	O
rc	int
=	O
mu_list_push	function
(	O
cls	pointer
->	O
lst	pointer
,	O
strdup	function
(	O
*	O
++	O
argv	pointer
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_push"	pointer
,	O
*	O
argv	pointer
,	O
rc	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
com_pop	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
struct	O
listop_closure	struct
*	O
cls	pointer
=	O
env	pointer
;	O
char	O
*	O
text	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_list_pop	function
(	O
cls	pointer
->	O
lst	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
text	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_pop"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
else	O
mu_printf	function
(	O
"%s\n"	pointer
,	O
text	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
envinit	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
struct	O
listop_closure	struct
*	O
cls	pointer
=	O
env	pointer
;	O
if	O
(	O
!	O
cls	pointer
->	O
itr	pointer
[	O
cls	pointer
->	O
num	long
]	O
)	O
{	O
int	O
rc	int
=	O
mu_list_get_iterator	function
(	O
cls	pointer
->	O
lst	pointer
,	O
&	O
cls	pointer
->	O
itr	pointer
[	O
cls	pointer
->	O
num	long
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
lperror	function
(	O
"mu_list_get_iterator"	pointer
,	O
rc	int
)	O
;	O
mu_iterator_first	function
(	O
cls	pointer
->	O
itr	pointer
[	O
cls	pointer
->	O
num	long
]	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
get	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
struct	O
listop_closure	struct
*	O
cls	pointer
=	O
env	pointer
;	O
char	O
*	O
p	pointer
;	O
size_t	long
n	pointer
;	O
errno	O
=	O
0	int
;	O
n	pointer
=	O
strtoul	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
&	O
p	pointer
,	O
0	int
)	O
;	O
if	O
(	O
errno	O
||	O
*	O
p	pointer
!=	O
0	int
)	O
return	O
MU_ERR_PARSE	O
;	O
else	O
{	O
char	O
*	O
text	pointer
;	O
int	O
rc	int
=	O
mu_list_get	function
(	O
cls	pointer
->	O
lst	pointer
,	O
n	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
text	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_get"	pointer
,	O
argv	pointer
[	O
0	int
]	O
,	O
rc	int
)	O
;	O
else	O
mu_printf	function
(	O
"%s\n"	pointer
,	O
text	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
static	O
struct	O
mu_tesh_command	struct
comtab	array
[	O
]	O
=	O
{	O
{	O
"__ENVINIT__"	pointer
,	O
""	pointer
,	O
envinit	function
}	O
,	O
{	O
"__NOCMD__"	pointer
,	O
""	pointer
,	O
get	function
}	O
,	O
{	O
"print"	pointer
,	O
""	pointer
,	O
com_print	function
}	O
,	O
{	O
"count"	pointer
,	O
""	pointer
,	O
com_count	function
}	O
,	O
{	O
"next"	pointer
,	O
"[COUNT]"	pointer
,	O
com_next	function
}	O
,	O
{	O
"del"	pointer
,	O
"ITEM ..."	pointer
,	O
com_delete	function
}	O
,	O
{	O
"add"	pointer
,	O
"ITEM ..."	pointer
,	O
com_add	function
}	O
,	O
{	O
"prep"	pointer
,	O
"ITEM ..."	pointer
,	O
com_prep	function
}	O
,	O
{	O
"ins"	pointer
,	O
"[-before] [-after] ITEM NEW_ITEM ..."	pointer
,	O
com_ins	function
}	O
,	O
{	O
"repl"	pointer
,	O
"OLD_ITEM NEW_ITEM"	pointer
,	O
com_repl	function
}	O
,	O
{	O
"ictl"	pointer
,	O
"tell|del|repl|ins|dir [ARG...]"	pointer
,	O
com_ictl	function
}	O
,	O
{	O
"iter"	pointer
,	O
"NUM"	pointer
,	O
com_iter	function
}	O
,	O
{	O
"find"	pointer
,	O
"ITEM"	pointer
,	O
com_find	function
}	O
,	O
{	O
"cur"	pointer
,	O
""	pointer
,	O
com_cur	function
}	O
,	O
{	O
"map"	pointer
,	O
"[-replace] NAME [ARG...]"	pointer
,	O
com_map	function
}	O
,	O
{	O
"slice"	pointer
,	O
"[-replace] NUM ..."	pointer
,	O
com_slice	function
}	O
,	O
{	O
"first"	pointer
,	O
""	pointer
,	O
com_first	function
}	O
,	O
{	O
"head"	pointer
,	O
""	pointer
,	O
com_head	function
}	O
,	O
{	O
"tail"	pointer
,	O
""	pointer
,	O
com_tail	function
}	O
,	O
{	O
"fold"	pointer
,	O
""	pointer
,	O
com_fold	function
}	O
,	O
{	O
"rfold"	pointer
,	O
""	pointer
,	O
com_rfold	function
}	O
,	O
{	O
"sort"	pointer
,	O
""	pointer
,	O
com_sort	function
}	O
,	O
{	O
"push"	pointer
,	O
"ITEM ..."	pointer
,	O
com_push	function
}	O
,	O
{	O
"pop"	pointer
,	O
""	pointer
,	O
com_pop	function
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
int	O
string_comp	function
(	O
const	O
void	O
*	O
item	pointer
,	O
const	O
void	O
*	O
value	pointer
)	O
{	O
return	O
strcmp	function
(	O
item	pointer
,	O
value	pointer
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
struct	O
listop_closure	struct
cls	pointer
;	O
int	O
rc	int
;	O
mu_tesh_init	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
interactive	int
=	O
isatty	function
(	O
0	int
)	O
;	O
memset	function
(	O
&	O
cls	pointer
,	O
0	int
,	O
sizeof	O
cls	pointer
)	O
;	O
rc	int
=	O
mu_list_create	function
(	O
&	O
cls	pointer
.	O
lst	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
lperror	function
(	O
"mu_list_create"	pointer
,	O
rc	int
)	O
;	O
mu_list_set_comparator	function
(	O
cls	pointer
.	O
lst	pointer
,	O
string_comp	function
)	O
;	O
mu_list_set_destroy_item	function
(	O
cls	pointer
.	O
lst	pointer
,	O
mu_list_free_item	function
)	O
;	O
while	O
(	O
--	O
argc	long
)	O
{	O
rc	int
=	O
mu_list_append	function
(	O
cls	pointer
.	O
lst	pointer
,	O
strdup	function
(	O
*	O
++	O
argv	pointer
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
lperror	function
(	O
"mu_list_append"	pointer
,	O
rc	int
)	O
;	O
}	O
mu_tesh_read_and_eval	function
(	O
argc	long
,	O
argv	pointer
,	O
comtab	array
,	O
&	O
cls	pointer
)	O
;	O
return	O
0	int
;	O
}	O
