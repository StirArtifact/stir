static	O
uint32_t	int
read_for_checksum	function
(	O
int	O
in_file_des	int
,	O
int	O
file_size	int
,	O
char	O
*	O
file_name	pointer
)	O
{	O
uint32_t	int
crc	int
;	O
char	O
buf	pointer
[	O
BUFSIZ	int
]	O
;	O
int	O
bytes_left	int
;	O
int	O
bytes_read	int
;	O
int	O
i	int
;	O
crc	int
=	O
0	int
;	O
for	O
(	O
bytes_left	int
=	O
file_size	int
;	O
bytes_left	int
>	O
0	int
;	O
bytes_left	int
-=	O
bytes_read	int
)	O
{	O
bytes_read	int
=	O
read	function
(	O
in_file_des	int
,	O
buf	pointer
,	O
BUFSIZ	int
)	O
;	O
if	O
(	O
bytes_read	int
<	O
0	int
)	O
error	function
(	O
PAXEXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"cannot read checksum for %s"	pointer
)	O
,	O
file_name	pointer
)	O
;	O
if	O
(	O
bytes_read	int
==	O
0	int
)	O
break	O
;	O
if	O
(	O
bytes_left	int
<	O
bytes_read	int
)	O
bytes_read	int
=	O
bytes_left	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
bytes_read	int
;	O
++	O
i	int
)	O
crc	int
+=	O
buf	pointer
[	O
i	int
]	O
&	O
0xff	int
;	O
}	O
if	O
(	O
lseek	function
(	O
in_file_des	int
,	O
0L	int
,	O
SEEK_SET	int
)	O
)	O
error	function
(	O
PAXEXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"cannot read checksum for %s"	pointer
)	O
,	O
file_name	pointer
)	O
;	O
return	O
crc	int
;	O
}	O
static	O
void	O
tape_clear_rest_of_block	function
(	O
int	O
out_file_des	int
)	O
{	O
write_nuls_to_file	function
(	O
io_block_size	int
-	O
output_size	long
,	O
out_file_des	int
,	O
tape_buffered_write	function
)	O
;	O
}	O
static	O
void	O
tape_pad_output	function
(	O
int	O
out_file_des	int
,	O
int	O
offset	long
)	O
{	O
size_t	long
pad	long
;	O
if	O
(	O
archive_format	enum
==	O
arf_newascii	int
||	O
archive_format	enum
==	O
arf_crcascii	int
)	O
pad	long
=	O
(	O
4	int
-	O
(	O
offset	long
%	O
4	int
)	O
)	O
%	O
4	int
;	O
else	O
if	O
(	O
archive_format	enum
==	O
arf_tar	int
||	O
archive_format	enum
==	O
arf_ustar	int
)	O
pad	long
=	O
(	O
512	int
-	O
(	O
offset	long
%	O
512	int
)	O
)	O
%	O
512	int
;	O
else	O
if	O
(	O
archive_format	enum
!=	O
arf_oldascii	int
&&	O
archive_format	enum
!=	O
arf_hpoldascii	int
)	O
pad	long
=	O
(	O
2	int
-	O
(	O
offset	long
%	O
2	int
)	O
)	O
%	O
2	int
;	O
else	O
pad	long
=	O
0	int
;	O
if	O
(	O
pad	long
!=	O
0	int
)	O
write_nuls_to_file	function
(	O
pad	long
,	O
out_file_des	int
,	O
tape_buffered_write	function
)	O
;	O
}	O
struct	O
deferment	struct
*	O
deferouts	pointer
=	O
NULL	O
;	O
static	O
size_t	long
count_defered_links_to_dev_ino	function
(	O
struct	O
cpio_file_stat	struct
*	O
file_hdr	pointer
)	O
{	O
struct	O
deferment	struct
*	O
d	pointer
;	O
ino_t	long
ino	long
=	O
file_hdr	pointer
->	O
c_ino	short
;	O
long	O
maj	long
=	O
file_hdr	pointer
->	O
c_dev_maj	array
;	O
long	O
min	long
=	O
file_hdr	pointer
->	O
c_dev_min	array
;	O
size_t	long
count	int
=	O
0	int
;	O
for	O
(	O
d	pointer
=	O
deferouts	pointer
;	O
d	pointer
!=	O
NULL	O
;	O
d	pointer
=	O
d	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
d	pointer
->	O
header	pointer
.	O
c_ino	short
==	O
ino	long
&&	O
d	pointer
->	O
header	pointer
.	O
c_dev_maj	array
==	O
maj	long
&&	O
d	pointer
->	O
header	pointer
.	O
c_dev_min	array
==	O
min	long
)	O
++	O
count	int
;	O
}	O
return	O
count	int
;	O
}	O
static	O
int	O
last_link	function
(	O
struct	O
cpio_file_stat	struct
*	O
file_hdr	pointer
)	O
{	O
return	O
file_hdr	pointer
->	O
c_nlink	short
==	O
count_defered_links_to_dev_ino	function
(	O
file_hdr	pointer
)	O
+	O
1	int
;	O
}	O
static	O
void	O
add_link_defer	function
(	O
struct	O
cpio_file_stat	struct
*	O
file_hdr	pointer
)	O
{	O
struct	O
deferment	struct
*	O
d	pointer
;	O
d	pointer
=	O
create_deferment	function
(	O
file_hdr	pointer
)	O
;	O
d	pointer
->	O
next	pointer
=	O
deferouts	pointer
;	O
deferouts	pointer
=	O
d	pointer
;	O
}	O
static	O
void	O
writeout_other_defers	function
(	O
struct	O
cpio_file_stat	struct
*	O
file_hdr	pointer
,	O
int	O
out_des	int
)	O
{	O
struct	O
deferment	struct
*	O
d	pointer
;	O
struct	O
deferment	struct
*	O
d_prev	pointer
;	O
ino_t	long
ino	long
;	O
int	O
maj	long
;	O
int	O
min	long
;	O
ino	long
=	O
file_hdr	pointer
->	O
c_ino	short
;	O
maj	long
=	O
file_hdr	pointer
->	O
c_dev_maj	array
;	O
min	long
=	O
file_hdr	pointer
->	O
c_dev_min	array
;	O
d_prev	pointer
=	O
NULL	O
;	O
d	pointer
=	O
deferouts	pointer
;	O
while	O
(	O
d	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
(	O
d	pointer
->	O
header	pointer
.	O
c_ino	short
==	O
ino	long
)	O
&&	O
(	O
d	pointer
->	O
header	pointer
.	O
c_dev_maj	array
==	O
maj	long
)	O
&&	O
(	O
d	pointer
->	O
header	pointer
.	O
c_dev_min	array
==	O
min	long
)	O
)	O
{	O
struct	O
deferment	struct
*	O
d_free	pointer
;	O
d	pointer
->	O
header	pointer
.	O
c_filesize	array
=	O
0	int
;	O
write_out_header	function
(	O
&	O
d	pointer
->	O
header	pointer
,	O
out_des	int
)	O
;	O
if	O
(	O
d_prev	pointer
!=	O
NULL	O
)	O
d_prev	pointer
->	O
next	pointer
=	O
d	pointer
->	O
next	pointer
;	O
else	O
deferouts	pointer
=	O
d	pointer
->	O
next	pointer
;	O
d_free	pointer
=	O
d	pointer
;	O
d	pointer
=	O
d	pointer
->	O
next	pointer
;	O
free_deferment	function
(	O
d_free	pointer
)	O
;	O
}	O
else	O
{	O
d_prev	pointer
=	O
d	pointer
;	O
d	pointer
=	O
d	pointer
->	O
next	pointer
;	O
}	O
}	O
return	O
;	O
}	O
static	O
void	O
writeout_defered_file	function
(	O
struct	O
cpio_file_stat	struct
*	O
header	pointer
,	O
int	O
out_file_des	int
)	O
{	O
int	O
in_file_des	int
;	O
struct	O
cpio_file_stat	struct
file_hdr	pointer
;	O
file_hdr	pointer
=	O
*	O
header	pointer
;	O
in_file_des	int
=	O
open	function
(	O
header	pointer
->	O
c_name	pointer
,	O
O_RDONLY	int
|	O
O_BINARY	int
,	O
0	int
)	O
;	O
if	O
(	O
in_file_des	int
<	O
0	int
)	O
{	O
open_error	function
(	O
header	pointer
->	O
c_name	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
archive_format	enum
==	O
arf_crcascii	int
)	O
file_hdr	pointer
.	O
c_chksum	array
=	O
read_for_checksum	function
(	O
in_file_des	int
,	O
file_hdr	pointer
.	O
c_filesize	array
,	O
header	pointer
->	O
c_name	pointer
)	O
;	O
if	O
(	O
write_out_header	function
(	O
&	O
file_hdr	pointer
,	O
out_file_des	int
)	O
)	O
return	O
;	O
copy_files_disk_to_tape	function
(	O
in_file_des	int
,	O
out_file_des	int
,	O
file_hdr	pointer
.	O
c_filesize	array
,	O
header	pointer
->	O
c_name	pointer
)	O
;	O
warn_if_file_changed	function
(	O
header	pointer
->	O
c_name	pointer
,	O
file_hdr	pointer
.	O
c_filesize	array
,	O
file_hdr	pointer
.	O
c_mtime	array
)	O
;	O
if	O
(	O
archive_format	enum
==	O
arf_tar	int
||	O
archive_format	enum
==	O
arf_ustar	int
)	O
add_inode	function
(	O
file_hdr	pointer
.	O
c_ino	short
,	O
file_hdr	pointer
.	O
c_name	pointer
,	O
file_hdr	pointer
.	O
c_dev_maj	array
,	O
file_hdr	pointer
.	O
c_dev_min	array
)	O
;	O
tape_pad_output	function
(	O
out_file_des	int
,	O
file_hdr	pointer
.	O
c_filesize	array
)	O
;	O
if	O
(	O
reset_time_flag	int
)	O
set_file_times	function
(	O
in_file_des	int
,	O
file_hdr	pointer
.	O
c_name	pointer
,	O
file_hdr	pointer
.	O
c_mtime	array
,	O
file_hdr	pointer
.	O
c_mtime	array
)	O
;	O
if	O
(	O
close	function
(	O
in_file_des	int
)	O
<	O
0	int
)	O
close_error	function
(	O
header	pointer
->	O
c_name	pointer
)	O
;	O
}	O
static	O
void	O
writeout_final_defers	function
(	O
int	O
out_des	int
)	O
{	O
struct	O
deferment	struct
*	O
d	pointer
;	O
int	O
other_count	int
;	O
while	O
(	O
deferouts	pointer
!=	O
NULL	O
)	O
{	O
d	pointer
=	O
deferouts	pointer
;	O
other_count	int
=	O
count_defered_links_to_dev_ino	function
(	O
&	O
d	pointer
->	O
header	pointer
)	O
;	O
if	O
(	O
other_count	int
==	O
1	int
)	O
{	O
writeout_defered_file	function
(	O
&	O
d	pointer
->	O
header	pointer
,	O
out_des	int
)	O
;	O
}	O
else	O
{	O
struct	O
cpio_file_stat	struct
file_hdr	pointer
;	O
file_hdr	pointer
=	O
d	pointer
->	O
header	pointer
;	O
file_hdr	pointer
.	O
c_filesize	array
=	O
0	int
;	O
write_out_header	function
(	O
&	O
file_hdr	pointer
,	O
out_des	int
)	O
;	O
}	O
deferouts	pointer
=	O
deferouts	pointer
->	O
next	pointer
;	O
}	O
}	O
int	O
to_ascii	function
(	O
char	O
*	O
where	pointer
,	O
uintmax_t	long
v	long
,	O
size_t	long
digits	long
,	O
unsigned	O
logbase	int
,	O
bool	bool
nul	bool
)	O
{	O
static	O
char	O
codetab	array
[	O
]	O
=	O
"0123456789ABCDEF"	pointer
;	O
if	O
(	O
nul	bool
)	O
where	pointer
[	O
--	O
digits	long
]	O
=	O
0	int
;	O
while	O
(	O
digits	long
>	O
0	int
)	O
{	O
where	pointer
[	O
--	O
digits	long
]	O
=	O
codetab	array
[	O
(	O
v	long
&	O
(	O
(	O
1	int
<<	O
logbase	int
)	O
-	O
1	int
)	O
)	O
]	O
;	O
v	long
>>=	O
logbase	int
;	O
}	O
return	O
v	long
!=	O
0	int
;	O
}	O
void	O
field_width_error	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
const	O
char	O
*	O
fieldname	pointer
,	O
uintmax_t	long
value	long
,	O
size_t	long
width	long
,	O
bool	bool
nul	bool
)	O
{	O
char	O
valbuf	array
[	O
UINTMAX_STRSIZE_BOUND	O
+	O
1	int
]	O
;	O
char	O
maxbuf	array
[	O
UINTMAX_STRSIZE_BOUND	O
+	O
1	int
]	O
;	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s: value %s %s out of allowed range 0..%s"	pointer
)	O
,	O
filename	pointer
,	O
fieldname	pointer
,	O
STRINGIFY_BIGINT	O
(	O
value	long
,	O
valbuf	array
)	O
,	O
STRINGIFY_BIGINT	O
(	O
MAX_VAL_WITH_DIGITS	O
(	O
width	long
-	O
nul	bool
,	O
LG_8	int
)	O
,	O
maxbuf	array
)	O
)	O
;	O
}	O
static	O
void	O
field_width_warning	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
const	O
char	O
*	O
fieldname	pointer
)	O
{	O
if	O
(	O
warn_option	int
&	O
CPIO_WARN_TRUNCATE	int
)	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s: truncating %s"	pointer
)	O
,	O
filename	pointer
,	O
fieldname	pointer
)	O
;	O
}	O
void	O
to_ascii_or_warn	function
(	O
char	O
*	O
where	pointer
,	O
uintmax_t	long
n	long
,	O
size_t	long
digits	long
,	O
unsigned	O
logbase	int
,	O
const	O
char	O
*	O
filename	pointer
,	O
const	O
char	O
*	O
fieldname	pointer
)	O
{	O
if	O
(	O
to_ascii	function
(	O
where	pointer
,	O
n	long
,	O
digits	long
,	O
logbase	int
,	O
false	int
)	O
)	O
field_width_warning	function
(	O
filename	pointer
,	O
fieldname	pointer
)	O
;	O
}	O
int	O
to_ascii_or_error	function
(	O
char	O
*	O
where	pointer
,	O
uintmax_t	long
n	long
,	O
size_t	long
digits	long
,	O
unsigned	O
logbase	int
,	O
const	O
char	O
*	O
filename	pointer
,	O
const	O
char	O
*	O
fieldname	pointer
)	O
{	O
if	O
(	O
to_ascii	function
(	O
where	pointer
,	O
n	long
,	O
digits	long
,	O
logbase	int
,	O
false	int
)	O
)	O
{	O
field_width_error	function
(	O
filename	pointer
,	O
fieldname	pointer
,	O
n	long
,	O
digits	long
,	O
false	int
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
write_out_new_ascii_header	function
(	O
const	O
char	O
*	O
magic_string	pointer
,	O
struct	O
cpio_file_stat	struct
*	O
file_hdr	pointer
,	O
int	O
out_des	int
)	O
{	O
char	O
ascii_header	array
[	O
110	int
]	O
;	O
char	O
*	O
p	pointer
;	O
p	pointer
=	O
stpcpy	function
(	O
ascii_header	array
,	O
magic_string	pointer
)	O
;	O
to_ascii_or_warn	function
(	O
p	pointer
,	O
file_hdr	pointer
->	O
c_ino	short
,	O
8	int
,	O
LG_16	int
,	O
file_hdr	pointer
->	O
c_name	pointer
,	O
_	O
(	O
"inode number"	pointer
)	O
)	O
;	O
p	pointer
+=	O
8	int
;	O
to_ascii_or_warn	function
(	O
p	pointer
,	O
file_hdr	pointer
->	O
c_mode	short
,	O
8	int
,	O
LG_16	int
,	O
file_hdr	pointer
->	O
c_name	pointer
,	O
_	O
(	O
"file mode"	pointer
)	O
)	O
;	O
p	pointer
+=	O
8	int
;	O
to_ascii_or_warn	function
(	O
p	pointer
,	O
file_hdr	pointer
->	O
c_uid	short
,	O
8	int
,	O
LG_16	int
,	O
file_hdr	pointer
->	O
c_name	pointer
,	O
_	O
(	O
"uid"	pointer
)	O
)	O
;	O
p	pointer
+=	O
8	int
;	O
to_ascii_or_warn	function
(	O
p	pointer
,	O
file_hdr	pointer
->	O
c_gid	short
,	O
8	int
,	O
LG_16	int
,	O
file_hdr	pointer
->	O
c_name	pointer
,	O
_	O
(	O
"gid"	pointer
)	O
)	O
;	O
p	pointer
+=	O
8	int
;	O
to_ascii_or_warn	function
(	O
p	pointer
,	O
file_hdr	pointer
->	O
c_nlink	short
,	O
8	int
,	O
LG_16	int
,	O
file_hdr	pointer
->	O
c_name	pointer
,	O
_	O
(	O
"number of links"	pointer
)	O
)	O
;	O
p	pointer
+=	O
8	int
;	O
to_ascii_or_warn	function
(	O
p	pointer
,	O
file_hdr	pointer
->	O
c_mtime	array
,	O
8	int
,	O
LG_16	int
,	O
file_hdr	pointer
->	O
c_name	pointer
,	O
_	O
(	O
"modification time"	pointer
)	O
)	O
;	O
p	pointer
+=	O
8	int
;	O
if	O
(	O
to_ascii_or_error	function
(	O
p	pointer
,	O
file_hdr	pointer
->	O
c_filesize	array
,	O
8	int
,	O
LG_16	int
,	O
file_hdr	pointer
->	O
c_name	pointer
,	O
_	O
(	O
"file size"	pointer
)	O
)	O
)	O
return	O
1	int
;	O
p	pointer
+=	O
8	int
;	O
if	O
(	O
to_ascii_or_error	function
(	O
p	pointer
,	O
file_hdr	pointer
->	O
c_dev_maj	array
,	O
8	int
,	O
LG_16	int
,	O
file_hdr	pointer
->	O
c_name	pointer
,	O
_	O
(	O
"device major number"	pointer
)	O
)	O
)	O
return	O
1	int
;	O
p	pointer
+=	O
8	int
;	O
if	O
(	O
to_ascii_or_error	function
(	O
p	pointer
,	O
file_hdr	pointer
->	O
c_dev_min	array
,	O
8	int
,	O
LG_16	int
,	O
file_hdr	pointer
->	O
c_name	pointer
,	O
_	O
(	O
"device minor number"	pointer
)	O
)	O
)	O
return	O
1	int
;	O
p	pointer
+=	O
8	int
;	O
if	O
(	O
to_ascii_or_error	function
(	O
p	pointer
,	O
file_hdr	pointer
->	O
c_rdev_maj	array
,	O
8	int
,	O
LG_16	int
,	O
file_hdr	pointer
->	O
c_name	pointer
,	O
_	O
(	O
"rdev major"	pointer
)	O
)	O
)	O
return	O
1	int
;	O
p	pointer
+=	O
8	int
;	O
if	O
(	O
to_ascii_or_error	function
(	O
p	pointer
,	O
file_hdr	pointer
->	O
c_rdev_min	array
,	O
8	int
,	O
LG_16	int
,	O
file_hdr	pointer
->	O
c_name	pointer
,	O
_	O
(	O
"rdev minor"	pointer
)	O
)	O
)	O
return	O
1	int
;	O
p	pointer
+=	O
8	int
;	O
if	O
(	O
to_ascii_or_error	function
(	O
p	pointer
,	O
file_hdr	pointer
->	O
c_namesize	short
,	O
8	int
,	O
LG_16	int
,	O
file_hdr	pointer
->	O
c_name	pointer
,	O
_	O
(	O
"name size"	pointer
)	O
)	O
)	O
return	O
1	int
;	O
p	pointer
+=	O
8	int
;	O
to_ascii	function
(	O
p	pointer
,	O
file_hdr	pointer
->	O
c_chksum	array
&	O
0xffffffff	int
,	O
8	int
,	O
LG_16	int
,	O
false	int
)	O
;	O
tape_buffered_write	function
(	O
ascii_header	array
,	O
out_des	int
,	O
sizeof	O
ascii_header	array
)	O
;	O
tape_buffered_write	function
(	O
file_hdr	pointer
->	O
c_name	pointer
,	O
out_des	int
,	O
(	O
long	O
)	O
file_hdr	pointer
->	O
c_namesize	short
)	O
;	O
tape_pad_output	function
(	O
out_des	int
,	O
file_hdr	pointer
->	O
c_namesize	short
+	O
sizeof	O
ascii_header	array
)	O
;	O
return	O
0	int
;	O
}	O
int	O
write_out_old_ascii_header	function
(	O
dev_t	long
dev	long
,	O
dev_t	long
rdev	long
,	O
struct	O
cpio_file_stat	struct
*	O
file_hdr	pointer
,	O
int	O
out_des	int
)	O
{	O
char	O
ascii_header	array
[	O
76	int
]	O
;	O
char	O
*	O
p	pointer
=	O
ascii_header	array
;	O
to_ascii	function
(	O
p	pointer
,	O
file_hdr	pointer
->	O
c_magic	short
,	O
6	int
,	O
LG_8	int
,	O
false	int
)	O
;	O
p	pointer
+=	O
6	int
;	O
to_ascii_or_warn	function
(	O
p	pointer
,	O
dev	long
,	O
6	int
,	O
LG_8	int
,	O
file_hdr	pointer
->	O
c_name	pointer
,	O
_	O
(	O
"device number"	pointer
)	O
)	O
;	O
p	pointer
+=	O
6	int
;	O
to_ascii_or_warn	function
(	O
p	pointer
,	O
file_hdr	pointer
->	O
c_ino	short
,	O
6	int
,	O
LG_8	int
,	O
file_hdr	pointer
->	O
c_name	pointer
,	O
_	O
(	O
"inode number"	pointer
)	O
)	O
;	O
p	pointer
+=	O
6	int
;	O
to_ascii_or_warn	function
(	O
p	pointer
,	O
file_hdr	pointer
->	O
c_mode	short
,	O
6	int
,	O
LG_8	int
,	O
file_hdr	pointer
->	O
c_name	pointer
,	O
_	O
(	O
"file mode"	pointer
)	O
)	O
;	O
p	pointer
+=	O
6	int
;	O
to_ascii_or_warn	function
(	O
p	pointer
,	O
file_hdr	pointer
->	O
c_uid	short
,	O
6	int
,	O
LG_8	int
,	O
file_hdr	pointer
->	O
c_name	pointer
,	O
_	O
(	O
"uid"	pointer
)	O
)	O
;	O
p	pointer
+=	O
6	int
;	O
to_ascii_or_warn	function
(	O
p	pointer
,	O
file_hdr	pointer
->	O
c_gid	short
,	O
6	int
,	O
LG_8	int
,	O
file_hdr	pointer
->	O
c_name	pointer
,	O
_	O
(	O
"gid"	pointer
)	O
)	O
;	O
p	pointer
+=	O
6	int
;	O
to_ascii_or_warn	function
(	O
p	pointer
,	O
file_hdr	pointer
->	O
c_nlink	short
,	O
6	int
,	O
LG_8	int
,	O
file_hdr	pointer
->	O
c_name	pointer
,	O
_	O
(	O
"number of links"	pointer
)	O
)	O
;	O
p	pointer
+=	O
6	int
;	O
to_ascii_or_warn	function
(	O
p	pointer
,	O
rdev	long
,	O
6	int
,	O
LG_8	int
,	O
file_hdr	pointer
->	O
c_name	pointer
,	O
_	O
(	O
"rdev"	pointer
)	O
)	O
;	O
p	pointer
+=	O
6	int
;	O
to_ascii_or_warn	function
(	O
p	pointer
,	O
file_hdr	pointer
->	O
c_mtime	array
,	O
11	int
,	O
LG_8	int
,	O
file_hdr	pointer
->	O
c_name	pointer
,	O
_	O
(	O
"modification time"	pointer
)	O
)	O
;	O
p	pointer
+=	O
11	int
;	O
if	O
(	O
to_ascii_or_error	function
(	O
p	pointer
,	O
file_hdr	pointer
->	O
c_namesize	short
,	O
6	int
,	O
LG_8	int
,	O
file_hdr	pointer
->	O
c_name	pointer
,	O
_	O
(	O
"name size"	pointer
)	O
)	O
)	O
return	O
1	int
;	O
p	pointer
+=	O
6	int
;	O
if	O
(	O
to_ascii_or_error	function
(	O
p	pointer
,	O
file_hdr	pointer
->	O
c_filesize	array
,	O
11	int
,	O
LG_8	int
,	O
file_hdr	pointer
->	O
c_name	pointer
,	O
_	O
(	O
"file size"	pointer
)	O
)	O
)	O
return	O
1	int
;	O
tape_buffered_write	function
(	O
ascii_header	array
,	O
out_des	int
,	O
sizeof	O
ascii_header	array
)	O
;	O
tape_buffered_write	function
(	O
file_hdr	pointer
->	O
c_name	pointer
,	O
out_des	int
,	O
file_hdr	pointer
->	O
c_namesize	short
)	O
;	O
return	O
0	int
;	O
}	O
void	O
hp_compute_dev	function
(	O
struct	O
cpio_file_stat	struct
*	O
file_hdr	pointer
,	O
dev_t	long
*	O
pdev	pointer
,	O
dev_t	long
*	O
prdev	pointer
)	O
{	O
switch	O
(	O
file_hdr	pointer
->	O
c_mode	short
&	O
CP_IFMT	int
)	O
{	O
case	O
CP_IFCHR	int
:	O
case	O
CP_IFBLK	int
:	O
case	O
CP_IFSOCK	int
:	O
case	O
CP_IFIFO	int
:	O
file_hdr	pointer
->	O
c_filesize	array
=	O
makedev	O
(	O
file_hdr	pointer
->	O
c_rdev_maj	array
,	O
file_hdr	pointer
->	O
c_rdev_min	array
)	O
;	O
*	O
pdev	pointer
=	O
*	O
prdev	pointer
=	O
makedev	O
(	O
0	int
,	O
1	int
)	O
;	O
break	O
;	O
default	O
:	O
*	O
pdev	pointer
=	O
makedev	O
(	O
file_hdr	pointer
->	O
c_dev_maj	array
,	O
file_hdr	pointer
->	O
c_dev_min	array
)	O
;	O
*	O
prdev	pointer
=	O
makedev	O
(	O
file_hdr	pointer
->	O
c_rdev_maj	array
,	O
file_hdr	pointer
->	O
c_rdev_min	array
)	O
;	O
break	O
;	O
}	O
}	O
int	O
write_out_binary_header	function
(	O
dev_t	long
rdev	long
,	O
struct	O
cpio_file_stat	struct
*	O
file_hdr	pointer
,	O
int	O
out_des	int
)	O
{	O
struct	O
old_cpio_header	struct
short_hdr	pointer
;	O
short_hdr	pointer
.	O
c_magic	short
=	O
070707	int
;	O
short_hdr	pointer
.	O
c_dev	short
=	O
makedev	O
(	O
file_hdr	pointer
->	O
c_dev_maj	array
,	O
file_hdr	pointer
->	O
c_dev_min	array
)	O
;	O
if	O
(	O
(	O
warn_option	int
&	O
CPIO_WARN_TRUNCATE	int
)	O
&&	O
(	O
file_hdr	pointer
->	O
c_ino	short
>>	O
16	int
)	O
!=	O
0	int
)	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s: truncating inode number"	pointer
)	O
,	O
file_hdr	pointer
->	O
c_name	pointer
)	O
;	O
short_hdr	pointer
.	O
c_ino	short
=	O
file_hdr	pointer
->	O
c_ino	short
&	O
0xFFFF	int
;	O
if	O
(	O
short_hdr	pointer
.	O
c_ino	short
!=	O
file_hdr	pointer
->	O
c_ino	short
)	O
field_width_warning	function
(	O
file_hdr	pointer
->	O
c_name	pointer
,	O
_	O
(	O
"inode number"	pointer
)	O
)	O
;	O
short_hdr	pointer
.	O
c_mode	short
=	O
file_hdr	pointer
->	O
c_mode	short
&	O
0xFFFF	int
;	O
if	O
(	O
short_hdr	pointer
.	O
c_mode	short
!=	O
file_hdr	pointer
->	O
c_mode	short
)	O
field_width_warning	function
(	O
file_hdr	pointer
->	O
c_name	pointer
,	O
_	O
(	O
"file mode"	pointer
)	O
)	O
;	O
short_hdr	pointer
.	O
c_uid	short
=	O
file_hdr	pointer
->	O
c_uid	short
&	O
0xFFFF	int
;	O
if	O
(	O
short_hdr	pointer
.	O
c_uid	short
!=	O
file_hdr	pointer
->	O
c_uid	short
)	O
field_width_warning	function
(	O
file_hdr	pointer
->	O
c_name	pointer
,	O
_	O
(	O
"uid"	pointer
)	O
)	O
;	O
short_hdr	pointer
.	O
c_gid	short
=	O
file_hdr	pointer
->	O
c_gid	short
&	O
0xFFFF	int
;	O
if	O
(	O
short_hdr	pointer
.	O
c_gid	short
!=	O
file_hdr	pointer
->	O
c_gid	short
)	O
field_width_warning	function
(	O
file_hdr	pointer
->	O
c_name	pointer
,	O
_	O
(	O
"gid"	pointer
)	O
)	O
;	O
short_hdr	pointer
.	O
c_nlink	short
=	O
file_hdr	pointer
->	O
c_nlink	short
&	O
0xFFFF	int
;	O
if	O
(	O
short_hdr	pointer
.	O
c_nlink	short
!=	O
file_hdr	pointer
->	O
c_nlink	short
)	O
field_width_warning	function
(	O
file_hdr	pointer
->	O
c_name	pointer
,	O
_	O
(	O
"number of links"	pointer
)	O
)	O
;	O
short_hdr	pointer
.	O
c_rdev	short
=	O
rdev	long
;	O
short_hdr	pointer
.	O
c_mtimes	array
[	O
0	int
]	O
=	O
file_hdr	pointer
->	O
c_mtime	array
>>	O
16	int
;	O
short_hdr	pointer
.	O
c_mtimes	array
[	O
1	int
]	O
=	O
file_hdr	pointer
->	O
c_mtime	array
&	O
0xFFFF	int
;	O
short_hdr	pointer
.	O
c_namesize	short
=	O
file_hdr	pointer
->	O
c_namesize	short
&	O
0xFFFF	int
;	O
if	O
(	O
short_hdr	pointer
.	O
c_namesize	short
!=	O
file_hdr	pointer
->	O
c_namesize	short
)	O
{	O
char	O
maxbuf	array
[	O
UINTMAX_STRSIZE_BOUND	O
+	O
1	int
]	O
;	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s: value %s %s out of allowed range 0..%u"	pointer
)	O
,	O
file_hdr	pointer
->	O
c_name	pointer
,	O
_	O
(	O
"name size"	pointer
)	O
,	O
STRINGIFY_BIGINT	O
(	O
file_hdr	pointer
->	O
c_namesize	short
,	O
maxbuf	array
)	O
,	O
0xFFFFu	int
)	O
;	O
return	O
1	int
;	O
}	O
short_hdr	pointer
.	O
c_filesizes	array
[	O
0	int
]	O
=	O
file_hdr	pointer
->	O
c_filesize	array
>>	O
16	int
;	O
short_hdr	pointer
.	O
c_filesizes	array
[	O
1	int
]	O
=	O
file_hdr	pointer
->	O
c_filesize	array
&	O
0xFFFF	int
;	O
if	O
(	O
(	O
(	O
off_t	long
)	O
short_hdr	pointer
.	O
c_filesizes	array
[	O
0	int
]	O
<<	O
16	int
)	O
+	O
short_hdr	pointer
.	O
c_filesizes	array
[	O
1	int
]	O
!=	O
file_hdr	pointer
->	O
c_filesize	array
)	O
{	O
char	O
maxbuf	array
[	O
UINTMAX_STRSIZE_BOUND	O
+	O
1	int
]	O
;	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s: value %s %s out of allowed range 0..%lu"	pointer
)	O
,	O
file_hdr	pointer
->	O
c_name	pointer
,	O
_	O
(	O
"file size"	pointer
)	O
,	O
STRINGIFY_BIGINT	O
(	O
file_hdr	pointer
->	O
c_namesize	short
,	O
maxbuf	array
)	O
,	O
0xFFFFFFFFlu	int
)	O
;	O
return	O
1	int
;	O
}	O
tape_buffered_write	function
(	O
(	O
char	O
*	O
)	O
&	O
short_hdr	pointer
,	O
out_des	int
,	O
26	int
)	O
;	O
tape_buffered_write	function
(	O
file_hdr	pointer
->	O
c_name	pointer
,	O
out_des	int
,	O
file_hdr	pointer
->	O
c_namesize	short
)	O
;	O
tape_pad_output	function
(	O
out_des	int
,	O
file_hdr	pointer
->	O
c_namesize	short
+	O
26	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
write_out_header	function
(	O
struct	O
cpio_file_stat	struct
*	O
file_hdr	pointer
,	O
int	O
out_des	int
)	O
{	O
dev_t	long
dev	long
;	O
dev_t	long
rdev	long
;	O
switch	O
(	O
archive_format	enum
)	O
{	O
case	O
arf_newascii	int
:	O
return	O
write_out_new_ascii_header	function
(	O
"070701"	pointer
,	O
file_hdr	pointer
,	O
out_des	int
)	O
;	O
case	O
arf_crcascii	int
:	O
return	O
write_out_new_ascii_header	function
(	O
"070702"	pointer
,	O
file_hdr	pointer
,	O
out_des	int
)	O
;	O
case	O
arf_oldascii	int
:	O
return	O
write_out_old_ascii_header	function
(	O
makedev	O
(	O
file_hdr	pointer
->	O
c_dev_maj	array
,	O
file_hdr	pointer
->	O
c_dev_min	array
)	O
,	O
makedev	O
(	O
file_hdr	pointer
->	O
c_rdev_maj	array
,	O
file_hdr	pointer
->	O
c_rdev_min	array
)	O
,	O
file_hdr	pointer
,	O
out_des	int
)	O
;	O
case	O
arf_hpoldascii	int
:	O
hp_compute_dev	function
(	O
file_hdr	pointer
,	O
&	O
dev	long
,	O
&	O
rdev	long
)	O
;	O
return	O
write_out_old_ascii_header	function
(	O
dev	long
,	O
rdev	long
,	O
file_hdr	pointer
,	O
out_des	int
)	O
;	O
case	O
arf_tar	int
:	O
case	O
arf_ustar	int
:	O
if	O
(	O
is_tar_filename_too_long	function
(	O
file_hdr	pointer
->	O
c_name	pointer
)	O
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s: file name too long"	pointer
)	O
,	O
file_hdr	pointer
->	O
c_name	pointer
)	O
;	O
return	O
1	int
;	O
}	O
return	O
write_out_tar_header	function
(	O
file_hdr	pointer
,	O
out_des	int
)	O
;	O
case	O
arf_binary	int
:	O
return	O
write_out_binary_header	function
(	O
makedev	O
(	O
file_hdr	pointer
->	O
c_rdev_maj	array
,	O
file_hdr	pointer
->	O
c_rdev_min	array
)	O
,	O
file_hdr	pointer
,	O
out_des	int
)	O
;	O
case	O
arf_hpbinary	int
:	O
hp_compute_dev	function
(	O
file_hdr	pointer
,	O
&	O
dev	long
,	O
&	O
rdev	long
)	O
;	O
return	O
write_out_binary_header	function
(	O
rdev	long
,	O
file_hdr	pointer
,	O
out_des	int
)	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
static	O
void	O
assign_string	function
(	O
char	O
*	O
*	O
pvar	pointer
,	O
char	O
*	O
value	long
)	O
{	O
char	O
*	O
p	pointer
=	O
xrealloc	function
(	O
*	O
pvar	pointer
,	O
strlen	function
(	O
value	long
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
p	pointer
,	O
value	long
)	O
;	O
*	O
pvar	pointer
=	O
p	pointer
;	O
}	O
void	O
process_copy_out	function
(	O
)	O
{	O
dynamic_string	struct
input_name	struct
;	O
struct	O
stat	struct
file_stat	pointer
;	O
struct	O
cpio_file_stat	struct
file_hdr	pointer
=	O
CPIO_FILE_STAT_INITIALIZER	O
;	O
int	O
in_file_des	int
;	O
int	O
out_file_des	int
;	O
char	O
*	O
orig_file_name	pointer
=	O
NULL	O
;	O
ds_init	function
(	O
&	O
input_name	struct
,	O
128	int
)	O
;	O
file_hdr	pointer
.	O
c_magic	short
=	O
070707	int
;	O
out_file_des	int
=	O
archive_des	int
;	O
if	O
(	O
_isrmt	O
(	O
out_file_des	int
)	O
)	O
{	O
output_is_special	char
=	O
1	int
;	O
output_is_seekable	char
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
fstat	function
(	O
out_file_des	int
,	O
&	O
file_stat	pointer
)	O
)	O
error	function
(	O
PAXEXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"standard output is closed"	pointer
)	O
)	O
;	O
output_is_special	char
=	O
S_ISBLK	O
(	O
file_stat	pointer
.	O
st_mode	int
)	O
||	O
S_ISCHR	O
(	O
file_stat	pointer
.	O
st_mode	int
)	O
;	O
output_is_seekable	char
=	O
S_ISREG	O
(	O
file_stat	pointer
.	O
st_mode	int
)	O
;	O
}	O
change_dir	function
(	O
)	O
;	O
if	O
(	O
append_flag	int
)	O
{	O
process_copy_in	function
(	O
)	O
;	O
prepare_append	function
(	O
out_file_des	int
)	O
;	O
}	O
while	O
(	O
ds_fgetstr	function
(	O
stdin	pointer
,	O
&	O
input_name	struct
,	O
name_end	char
)	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
input_name	struct
.	O
ds_string	pointer
[	O
0	int
]	O
==	O
0	int
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"blank line ignored"	pointer
)	O
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
(	O
*	O
xstat	pointer
)	O
(	O
input_name	struct
.	O
ds_string	pointer
,	O
&	O
file_stat	pointer
)	O
<	O
0	int
)	O
stat_error	function
(	O
input_name	struct
.	O
ds_string	pointer
)	O
;	O
else	O
{	O
stat_to_cpio	function
(	O
&	O
file_hdr	pointer
,	O
&	O
file_stat	pointer
)	O
;	O
if	O
(	O
archive_format	enum
==	O
arf_tar	int
||	O
archive_format	enum
==	O
arf_ustar	int
)	O
{	O
if	O
(	O
file_hdr	pointer
.	O
c_mode	short
&	O
CP_IFDIR	int
)	O
{	O
int	O
len	long
=	O
strlen	function
(	O
input_name	struct
.	O
ds_string	pointer
)	O
;	O
if	O
(	O
input_name	struct
.	O
ds_string	pointer
[	O
len	long
-	O
1	int
]	O
!=	O
'/'	O
)	O
{	O
ds_resize	function
(	O
&	O
input_name	struct
,	O
len	long
+	O
2	int
)	O
;	O
input_name	struct
.	O
ds_string	pointer
[	O
len	long
]	O
=	O
'/'	O
;	O
input_name	struct
.	O
ds_string	pointer
[	O
len	long
+	O
1	int
]	O
=	O
0	int
;	O
}	O
}	O
}	O
assign_string	function
(	O
&	O
orig_file_name	pointer
,	O
input_name	struct
.	O
ds_string	pointer
)	O
;	O
cpio_safer_name_suffix	function
(	O
input_name	struct
.	O
ds_string	pointer
,	O
false	int
,	O
!	O
no_abs_paths_flag	int
,	O
true	int
)	O
;	O
cpio_set_c_name	function
(	O
&	O
file_hdr	pointer
,	O
input_name	struct
.	O
ds_string	pointer
)	O
;	O
switch	O
(	O
file_hdr	pointer
.	O
c_mode	short
&	O
CP_IFMT	int
)	O
{	O
case	O
CP_IFREG	int
:	O
if	O
(	O
archive_format	enum
==	O
arf_tar	int
||	O
archive_format	enum
==	O
arf_ustar	int
)	O
{	O
char	O
*	O
otherfile	pointer
;	O
if	O
(	O
(	O
otherfile	pointer
=	O
find_inode_file	function
(	O
file_hdr	pointer
.	O
c_ino	short
,	O
file_hdr	pointer
.	O
c_dev_maj	array
,	O
file_hdr	pointer
.	O
c_dev_min	array
)	O
)	O
)	O
{	O
file_hdr	pointer
.	O
c_tar_linkname	pointer
=	O
otherfile	pointer
;	O
if	O
(	O
write_out_header	function
(	O
&	O
file_hdr	pointer
,	O
out_file_des	int
)	O
)	O
continue	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
(	O
archive_format	enum
==	O
arf_newascii	int
||	O
archive_format	enum
==	O
arf_crcascii	int
)	O
&&	O
(	O
file_hdr	pointer
.	O
c_nlink	short
>	O
1	int
)	O
)	O
{	O
if	O
(	O
last_link	function
(	O
&	O
file_hdr	pointer
)	O
)	O
{	O
writeout_other_defers	function
(	O
&	O
file_hdr	pointer
,	O
out_file_des	int
)	O
;	O
}	O
else	O
{	O
add_link_defer	function
(	O
&	O
file_hdr	pointer
)	O
;	O
break	O
;	O
}	O
}	O
in_file_des	int
=	O
open	function
(	O
orig_file_name	pointer
,	O
O_RDONLY	int
|	O
O_BINARY	int
,	O
0	int
)	O
;	O
if	O
(	O
in_file_des	int
<	O
0	int
)	O
{	O
open_error	function
(	O
orig_file_name	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
archive_format	enum
==	O
arf_crcascii	int
)	O
file_hdr	pointer
.	O
c_chksum	array
=	O
read_for_checksum	function
(	O
in_file_des	int
,	O
file_hdr	pointer
.	O
c_filesize	array
,	O
orig_file_name	pointer
)	O
;	O
if	O
(	O
write_out_header	function
(	O
&	O
file_hdr	pointer
,	O
out_file_des	int
)	O
)	O
continue	O
;	O
copy_files_disk_to_tape	function
(	O
in_file_des	int
,	O
out_file_des	int
,	O
file_hdr	pointer
.	O
c_filesize	array
,	O
orig_file_name	pointer
)	O
;	O
warn_if_file_changed	function
(	O
orig_file_name	pointer
,	O
file_hdr	pointer
.	O
c_filesize	array
,	O
file_hdr	pointer
.	O
c_mtime	array
)	O
;	O
if	O
(	O
archive_format	enum
==	O
arf_tar	int
||	O
archive_format	enum
==	O
arf_ustar	int
)	O
add_inode	function
(	O
file_hdr	pointer
.	O
c_ino	short
,	O
orig_file_name	pointer
,	O
file_hdr	pointer
.	O
c_dev_maj	array
,	O
file_hdr	pointer
.	O
c_dev_min	array
)	O
;	O
tape_pad_output	function
(	O
out_file_des	int
,	O
file_hdr	pointer
.	O
c_filesize	array
)	O
;	O
if	O
(	O
reset_time_flag	int
)	O
set_file_times	function
(	O
in_file_des	int
,	O
orig_file_name	pointer
,	O
file_stat	pointer
.	O
st_atime	O
,	O
file_stat	pointer
.	O
st_mtime	O
)	O
;	O
if	O
(	O
close	function
(	O
in_file_des	int
)	O
<	O
0	int
)	O
close_error	function
(	O
orig_file_name	pointer
)	O
;	O
break	O
;	O
case	O
CP_IFDIR	int
:	O
file_hdr	pointer
.	O
c_filesize	array
=	O
0	int
;	O
if	O
(	O
write_out_header	function
(	O
&	O
file_hdr	pointer
,	O
out_file_des	int
)	O
)	O
continue	O
;	O
break	O
;	O
case	O
CP_IFCHR	int
:	O
case	O
CP_IFBLK	int
:	O
case	O
CP_IFSOCK	int
:	O
case	O
CP_IFIFO	int
:	O
if	O
(	O
archive_format	enum
==	O
arf_tar	int
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s not dumped: not a regular file"	pointer
)	O
,	O
orig_file_name	pointer
)	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
archive_format	enum
==	O
arf_ustar	int
)	O
{	O
char	O
*	O
otherfile	pointer
;	O
if	O
(	O
(	O
otherfile	pointer
=	O
find_inode_file	function
(	O
file_hdr	pointer
.	O
c_ino	short
,	O
file_hdr	pointer
.	O
c_dev_maj	array
,	O
file_hdr	pointer
.	O
c_dev_min	array
)	O
)	O
)	O
{	O
file_hdr	pointer
.	O
c_mode	short
=	O
(	O
file_stat	pointer
.	O
st_mode	int
&	O
07777	int
)	O
;	O
file_hdr	pointer
.	O
c_mode	short
|=	O
CP_IFREG	int
;	O
file_hdr	pointer
.	O
c_tar_linkname	pointer
=	O
otherfile	pointer
;	O
if	O
(	O
write_out_header	function
(	O
&	O
file_hdr	pointer
,	O
out_file_des	int
)	O
)	O
continue	O
;	O
break	O
;	O
}	O
add_inode	function
(	O
file_hdr	pointer
.	O
c_ino	short
,	O
orig_file_name	pointer
,	O
file_hdr	pointer
.	O
c_dev_maj	array
,	O
file_hdr	pointer
.	O
c_dev_min	array
)	O
;	O
}	O
file_hdr	pointer
.	O
c_filesize	array
=	O
0	int
;	O
if	O
(	O
write_out_header	function
(	O
&	O
file_hdr	pointer
,	O
out_file_des	int
)	O
)	O
continue	O
;	O
break	O
;	O
case	O
CP_IFLNK	int
:	O
{	O
char	O
*	O
link_name	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
file_stat	pointer
.	O
st_size	long
+	O
1	int
)	O
;	O
int	O
link_size	int
;	O
link_size	int
=	O
readlink	function
(	O
orig_file_name	pointer
,	O
link_name	pointer
,	O
file_stat	pointer
.	O
st_size	long
)	O
;	O
if	O
(	O
link_size	int
<	O
0	int
)	O
{	O
readlink_warn	function
(	O
orig_file_name	pointer
)	O
;	O
free	function
(	O
link_name	pointer
)	O
;	O
continue	O
;	O
}	O
link_name	pointer
[	O
link_size	int
]	O
=	O
0	int
;	O
cpio_safer_name_suffix	function
(	O
link_name	pointer
,	O
false	int
,	O
!	O
no_abs_paths_flag	int
,	O
true	int
)	O
;	O
link_size	int
=	O
strlen	function
(	O
link_name	pointer
)	O
;	O
file_hdr	pointer
.	O
c_filesize	array
=	O
link_size	int
;	O
if	O
(	O
archive_format	enum
==	O
arf_tar	int
||	O
archive_format	enum
==	O
arf_ustar	int
)	O
{	O
if	O
(	O
link_size	int
+	O
1	int
>	O
100	int
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s: symbolic link too long"	pointer
)	O
,	O
file_hdr	pointer
.	O
c_name	pointer
)	O
;	O
}	O
else	O
{	O
link_name	pointer
[	O
link_size	int
]	O
=	O
'\0'	O
;	O
file_hdr	pointer
.	O
c_tar_linkname	pointer
=	O
link_name	pointer
;	O
if	O
(	O
write_out_header	function
(	O
&	O
file_hdr	pointer
,	O
out_file_des	int
)	O
)	O
continue	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
write_out_header	function
(	O
&	O
file_hdr	pointer
,	O
out_file_des	int
)	O
)	O
continue	O
;	O
tape_buffered_write	function
(	O
link_name	pointer
,	O
out_file_des	int
,	O
link_size	int
)	O
;	O
tape_pad_output	function
(	O
out_file_des	int
,	O
link_size	int
)	O
;	O
}	O
free	function
(	O
link_name	pointer
)	O
;	O
}	O
break	O
;	O
default	O
:	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s: unknown file type"	pointer
)	O
,	O
orig_file_name	pointer
)	O
;	O
}	O
if	O
(	O
verbose_flag	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s\n"	pointer
,	O
orig_file_name	pointer
)	O
;	O
if	O
(	O
dot_flag	int
)	O
fputc	function
(	O
'.'	O
,	O
stderr	pointer
)	O
;	O
}	O
}	O
free	function
(	O
orig_file_name	pointer
)	O
;	O
writeout_final_defers	function
(	O
out_file_des	int
)	O
;	O
file_hdr	pointer
.	O
c_ino	short
=	O
0	int
;	O
file_hdr	pointer
.	O
c_mode	short
=	O
0	int
;	O
file_hdr	pointer
.	O
c_uid	short
=	O
0	int
;	O
file_hdr	pointer
.	O
c_gid	short
=	O
0	int
;	O
file_hdr	pointer
.	O
c_nlink	short
=	O
1	int
;	O
file_hdr	pointer
.	O
c_dev_maj	array
=	O
0	int
;	O
file_hdr	pointer
.	O
c_dev_min	array
=	O
0	int
;	O
file_hdr	pointer
.	O
c_rdev_maj	array
=	O
0	int
;	O
file_hdr	pointer
.	O
c_rdev_min	array
=	O
0	int
;	O
file_hdr	pointer
.	O
c_mtime	array
=	O
0	int
;	O
file_hdr	pointer
.	O
c_chksum	array
=	O
0	int
;	O
file_hdr	pointer
.	O
c_filesize	array
=	O
0	int
;	O
cpio_set_c_name	function
(	O
&	O
file_hdr	pointer
,	O
CPIO_TRAILER_NAME	pointer
)	O
;	O
if	O
(	O
archive_format	enum
!=	O
arf_tar	int
&&	O
archive_format	enum
!=	O
arf_ustar	int
)	O
write_out_header	function
(	O
&	O
file_hdr	pointer
,	O
out_file_des	int
)	O
;	O
else	O
write_nuls_to_file	function
(	O
1024	int
,	O
out_file_des	int
,	O
tape_buffered_write	function
)	O
;	O
tape_clear_rest_of_block	function
(	O
out_file_des	int
)	O
;	O
tape_empty_output_buffer	function
(	O
out_file_des	int
)	O
;	O
if	O
(	O
dot_flag	int
)	O
fputc	function
(	O
'\n'	O
,	O
stderr	pointer
)	O
;	O
if	O
(	O
!	O
quiet_flag	int
)	O
{	O
size_t	long
blocks	long
=	O
(	O
output_bytes	long
+	O
io_block_size	int
-	O
1	int
)	O
/	O
io_block_size	int
;	O
fprintf	function
(	O
stderr	pointer
,	O
ngettext	function
(	O
"%lu block\n"	pointer
,	O
"%lu blocks\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
blocks	long
)	O
,	O
(	O
unsigned	O
long	O
)	O
blocks	long
)	O
;	O
}	O
cpio_file_stat_free	function
(	O
&	O
file_hdr	pointer
)	O
;	O
}	O
