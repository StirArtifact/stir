static	O
struct	O
{	O
int	O
n	int
;	O
double	O
f	pointer
;	O
long	O
i	long
;	O
}	O
fact_table	array
[	O
GSL_SF_FACT_NMAX	int
+	O
1	int
]	O
=	O
{	O
{	O
0	int
,	O
1.0	int
,	O
1L	int
}	O
,	O
{	O
1	int
,	O
1.0	int
,	O
1L	int
}	O
,	O
{	O
2	int
,	O
2.0	int
,	O
2L	int
}	O
,	O
{	O
3	int
,	O
6.0	int
,	O
6L	int
}	O
,	O
{	O
4	int
,	O
24.0	int
,	O
24L	int
}	O
,	O
{	O
5	int
,	O
120.0	int
,	O
120L	int
}	O
,	O
{	O
6	int
,	O
720.0	int
,	O
720L	int
}	O
,	O
{	O
7	int
,	O
5040.0	int
,	O
5040L	int
}	O
,	O
{	O
8	int
,	O
40320.0	int
,	O
40320L	int
}	O
,	O
{	O
9	int
,	O
362880.0	int
,	O
362880L	int
}	O
,	O
{	O
10	int
,	O
3628800.0	int
,	O
3628800L	int
}	O
,	O
{	O
11	int
,	O
39916800.0	int
,	O
39916800L	int
}	O
,	O
{	O
12	int
,	O
479001600.0	int
,	O
479001600L	int
}	O
,	O
{	O
13	int
,	O
6227020800.0	int
,	O
0	int
}	O
,	O
{	O
14	int
,	O
87178291200.0	int
,	O
0	int
}	O
,	O
{	O
15	int
,	O
1307674368000.0	int
,	O
0	int
}	O
,	O
{	O
16	int
,	O
20922789888000.0	int
,	O
0	int
}	O
,	O
{	O
17	int
,	O
355687428096000.0	int
,	O
0	int
}	O
,	O
{	O
18	int
,	O
6402373705728000.0	int
,	O
0	int
}	O
,	O
{	O
19	int
,	O
121645100408832000.0	int
,	O
0	int
}	O
,	O
{	O
20	int
,	O
2432902008176640000.0	int
,	O
0	int
}	O
,	O
{	O
21	int
,	O
51090942171709440000.0	int
,	O
0	int
}	O
,	O
{	O
22	int
,	O
1124000727777607680000.0	int
,	O
0	int
}	O
,	O
{	O
23	int
,	O
25852016738884976640000.0	int
,	O
0	int
}	O
,	O
{	O
24	int
,	O
620448401733239439360000.0	int
,	O
0	int
}	O
,	O
{	O
25	int
,	O
15511210043330985984000000.0	int
,	O
0	int
}	O
,	O
{	O
26	int
,	O
403291461126605635584000000.0	int
,	O
0	int
}	O
,	O
{	O
27	int
,	O
10888869450418352160768000000.0	int
,	O
0	int
}	O
,	O
{	O
28	int
,	O
304888344611713860501504000000.0	int
,	O
0	int
}	O
,	O
{	O
29	int
,	O
8841761993739701954543616000000.0	int
,	O
0	int
}	O
,	O
{	O
30	int
,	O
265252859812191058636308480000000.0	int
,	O
0	int
}	O
,	O
{	O
31	int
,	O
8222838654177922817725562880000000.0	int
,	O
0	int
}	O
,	O
{	O
32	int
,	O
263130836933693530167218012160000000.0	int
,	O
0	int
}	O
,	O
{	O
33	int
,	O
8683317618811886495518194401280000000.0	int
,	O
0	int
}	O
,	O
{	O
34	int
,	O
2.95232799039604140847618609644e38	int
,	O
0	int
}	O
,	O
{	O
35	int
,	O
1.03331479663861449296666513375e40	int
,	O
0	int
}	O
,	O
{	O
36	int
,	O
3.71993326789901217467999448151e41	int
,	O
0	int
}	O
,	O
{	O
37	int
,	O
1.37637530912263450463159795816e43	int
,	O
0	int
}	O
,	O
{	O
38	int
,	O
5.23022617466601111760007224100e44	int
,	O
0	int
}	O
,	O
{	O
39	int
,	O
2.03978820811974433586402817399e46	int
,	O
0	int
}	O
,	O
{	O
40	int
,	O
8.15915283247897734345611269600e47	int
,	O
0	int
}	O
,	O
{	O
41	int
,	O
3.34525266131638071081700620534e49	int
,	O
0	int
}	O
,	O
{	O
42	int
,	O
1.40500611775287989854314260624e51	int
,	O
0	int
}	O
,	O
{	O
43	int
,	O
6.04152630633738356373551320685e52	int
,	O
0	int
}	O
,	O
{	O
44	int
,	O
2.65827157478844876804362581101e54	int
,	O
0	int
}	O
,	O
{	O
45	int
,	O
1.19622220865480194561963161496e56	int
,	O
0	int
}	O
,	O
{	O
46	int
,	O
5.50262215981208894985030542880e57	int
,	O
0	int
}	O
,	O
{	O
47	int
,	O
2.58623241511168180642964355154e59	int
,	O
0	int
}	O
,	O
{	O
48	int
,	O
1.24139155925360726708622890474e61	int
,	O
0	int
}	O
,	O
{	O
49	int
,	O
6.08281864034267560872252163321e62	int
,	O
0	int
}	O
,	O
{	O
50	int
,	O
3.04140932017133780436126081661e64	int
,	O
0	int
}	O
,	O
{	O
51	int
,	O
1.55111875328738228022424301647e66	int
,	O
0	int
}	O
,	O
{	O
52	int
,	O
8.06581751709438785716606368564e67	int
,	O
0	int
}	O
,	O
{	O
53	int
,	O
4.27488328406002556429801375339e69	int
,	O
0	int
}	O
,	O
{	O
54	int
,	O
2.30843697339241380472092742683e71	int
,	O
0	int
}	O
,	O
{	O
55	int
,	O
1.26964033536582759259651008476e73	int
,	O
0	int
}	O
,	O
{	O
56	int
,	O
7.10998587804863451854045647464e74	int
,	O
0	int
}	O
,	O
{	O
57	int
,	O
4.05269195048772167556806019054e76	int
,	O
0	int
}	O
,	O
{	O
58	int
,	O
2.35056133128287857182947491052e78	int
,	O
0	int
}	O
,	O
{	O
59	int
,	O
1.38683118545689835737939019720e80	int
,	O
0	int
}	O
,	O
{	O
60	int
,	O
8.32098711274139014427634118320e81	int
,	O
0	int
}	O
,	O
{	O
61	int
,	O
5.07580213877224798800856812177e83	int
,	O
0	int
}	O
,	O
{	O
62	int
,	O
3.14699732603879375256531223550e85	int
,	O
0	int
}	O
,	O
{	O
63	int
,	O
1.982608315404440064116146708360e87	int
,	O
0	int
}	O
,	O
{	O
64	int
,	O
1.268869321858841641034333893350e89	int
,	O
0	int
}	O
,	O
{	O
65	int
,	O
8.247650592082470666723170306800e90	int
,	O
0	int
}	O
,	O
{	O
66	int
,	O
5.443449390774430640037292402480e92	int
,	O
0	int
}	O
,	O
{	O
67	int
,	O
3.647111091818868528824985909660e94	int
,	O
0	int
}	O
,	O
{	O
68	int
,	O
2.480035542436830599600990418570e96	int
,	O
0	int
}	O
,	O
{	O
69	int
,	O
1.711224524281413113724683388810e98	int
,	O
0	int
}	O
,	O
{	O
70	int
,	O
1.197857166996989179607278372170e100	int
,	O
0	int
}	O
,	O
{	O
71	int
,	O
8.504785885678623175211676442400e101	int
,	O
0	int
}	O
,	O
{	O
72	int
,	O
6.123445837688608686152407038530e103	int
,	O
0	int
}	O
,	O
{	O
73	int
,	O
4.470115461512684340891257138130e105	int
,	O
0	int
}	O
,	O
{	O
74	int
,	O
3.307885441519386412259530282210e107	int
,	O
0	int
}	O
,	O
{	O
75	int
,	O
2.480914081139539809194647711660e109	int
,	O
0	int
}	O
,	O
{	O
76	int
,	O
1.885494701666050254987932260860e111	int
,	O
0	int
}	O
,	O
{	O
77	int
,	O
1.451830920282858696340707840860e113	int
,	O
0	int
}	O
,	O
{	O
78	int
,	O
1.132428117820629783145752115870e115	int
,	O
0	int
}	O
,	O
{	O
79	int
,	O
8.946182130782975286851441715400e116	int
,	O
0	int
}	O
,	O
{	O
80	int
,	O
7.156945704626380229481153372320e118	int
,	O
0	int
}	O
,	O
{	O
81	int
,	O
5.797126020747367985879734231580e120	int
,	O
0	int
}	O
,	O
{	O
82	int
,	O
4.753643337012841748421382069890e122	int
,	O
0	int
}	O
,	O
{	O
83	int
,	O
3.945523969720658651189747118010e124	int
,	O
0	int
}	O
,	O
{	O
84	int
,	O
3.314240134565353266999387579130e126	int
,	O
0	int
}	O
,	O
{	O
85	int
,	O
2.817104114380550276949479442260e128	int
,	O
0	int
}	O
,	O
{	O
86	int
,	O
2.422709538367273238176552320340e130	int
,	O
0	int
}	O
,	O
{	O
87	int
,	O
2.107757298379527717213600518700e132	int
,	O
0	int
}	O
,	O
{	O
88	int
,	O
1.854826422573984391147968456460e134	int
,	O
0	int
}	O
,	O
{	O
89	int
,	O
1.650795516090846108121691926250e136	int
,	O
0	int
}	O
,	O
{	O
90	int
,	O
1.485715964481761497309522733620e138	int
,	O
0	int
}	O
,	O
{	O
91	int
,	O
1.352001527678402962551665687590e140	int
,	O
0	int
}	O
,	O
{	O
92	int
,	O
1.243841405464130725547532432590e142	int
,	O
0	int
}	O
,	O
{	O
93	int
,	O
1.156772507081641574759205162310e144	int
,	O
0	int
}	O
,	O
{	O
94	int
,	O
1.087366156656743080273652852570e146	int
,	O
0	int
}	O
,	O
{	O
95	int
,	O
1.032997848823905926259970209940e148	int
,	O
0	int
}	O
,	O
{	O
96	int
,	O
9.916779348709496892095714015400e149	int
,	O
0	int
}	O
,	O
{	O
97	int
,	O
9.619275968248211985332842594960e151	int
,	O
0	int
}	O
,	O
{	O
98	int
,	O
9.426890448883247745626185743100e153	int
,	O
0	int
}	O
,	O
{	O
99	int
,	O
9.332621544394415268169923885600e155	int
,	O
0	int
}	O
,	O
{	O
100	int
,	O
9.33262154439441526816992388563e157	int
,	O
0	int
}	O
,	O
{	O
101	int
,	O
9.42594775983835942085162312450e159	int
,	O
0	int
}	O
,	O
{	O
102	int
,	O
9.61446671503512660926865558700e161	int
,	O
0	int
}	O
,	O
{	O
103	int
,	O
9.90290071648618040754671525458e163	int
,	O
0	int
}	O
,	O
{	O
104	int
,	O
1.02990167451456276238485838648e166	int
,	O
0	int
}	O
,	O
{	O
105	int
,	O
1.08139675824029090050410130580e168	int
,	O
0	int
}	O
,	O
{	O
106	int
,	O
1.146280563734708354534347384148e170	int
,	O
0	int
}	O
,	O
{	O
107	int
,	O
1.226520203196137939351751701040e172	int
,	O
0	int
}	O
,	O
{	O
108	int
,	O
1.324641819451828974499891837120e174	int
,	O
0	int
}	O
,	O
{	O
109	int
,	O
1.443859583202493582204882102460e176	int
,	O
0	int
}	O
,	O
{	O
110	int
,	O
1.588245541522742940425370312710e178	int
,	O
0	int
}	O
,	O
{	O
111	int
,	O
1.762952551090244663872161047110e180	int
,	O
0	int
}	O
,	O
{	O
112	int
,	O
1.974506857221074023536820372760e182	int
,	O
0	int
}	O
,	O
{	O
113	int
,	O
2.231192748659813646596607021220e184	int
,	O
0	int
}	O
,	O
{	O
114	int
,	O
2.543559733472187557120132004190e186	int
,	O
0	int
}	O
,	O
{	O
115	int
,	O
2.925093693493015690688151804820e188	int
,	O
0	int
}	O
,	O
{	O
116	int
,	O
3.393108684451898201198256093590e190	int
,	O
0	int
}	O
,	O
{	O
117	int
,	O
3.96993716080872089540195962950e192	int
,	O
0	int
}	O
,	O
{	O
118	int
,	O
4.68452584975429065657431236281e194	int
,	O
0	int
}	O
,	O
{	O
119	int
,	O
5.57458576120760588132343171174e196	int
,	O
0	int
}	O
,	O
{	O
120	int
,	O
6.68950291344912705758811805409e198	int
,	O
0	int
}	O
,	O
{	O
121	int
,	O
8.09429852527344373968162284545e200	int
,	O
0	int
}	O
,	O
{	O
122	int
,	O
9.87504420083360136241157987140e202	int
,	O
0	int
}	O
,	O
{	O
123	int
,	O
1.21463043670253296757662432419e205	int
,	O
0	int
}	O
,	O
{	O
124	int
,	O
1.50614174151114087979501416199e207	int
,	O
0	int
}	O
,	O
{	O
125	int
,	O
1.88267717688892609974376770249e209	int
,	O
0	int
}	O
,	O
{	O
126	int
,	O
2.37217324288004688567714730514e211	int
,	O
0	int
}	O
,	O
{	O
127	int
,	O
3.01266001845765954480997707753e213	int
,	O
0	int
}	O
,	O
{	O
128	int
,	O
3.85620482362580421735677065923e215	int
,	O
0	int
}	O
,	O
{	O
129	int
,	O
4.97450422247728744039023415041e217	int
,	O
0	int
}	O
,	O
{	O
130	int
,	O
6.46685548922047367250730439554e219	int
,	O
0	int
}	O
,	O
{	O
131	int
,	O
8.47158069087882051098456875820e221	int
,	O
0	int
}	O
,	O
{	O
132	int
,	O
1.11824865119600430744996307608e224	int
,	O
0	int
}	O
,	O
{	O
133	int
,	O
1.48727070609068572890845089118e226	int
,	O
0	int
}	O
,	O
{	O
134	int
,	O
1.99294274616151887673732419418e228	int
,	O
0	int
}	O
,	O
{	O
135	int
,	O
2.69047270731805048359538766215e230	int
,	O
0	int
}	O
,	O
{	O
136	int
,	O
3.65904288195254865768972722052e232	int
,	O
0	int
}	O
,	O
{	O
137	int
,	O
5.01288874827499166103492629211e234	int
,	O
0	int
}	O
,	O
{	O
138	int
,	O
6.91778647261948849222819828311e236	int
,	O
0	int
}	O
,	O
{	O
139	int
,	O
9.61572319694108900419719561353e238	int
,	O
0	int
}	O
,	O
{	O
140	int
,	O
1.34620124757175246058760738589e241	int
,	O
0	int
}	O
,	O
{	O
141	int
,	O
1.89814375907617096942852641411e243	int
,	O
0	int
}	O
,	O
{	O
142	int
,	O
2.69536413788816277658850750804e245	int
,	O
0	int
}	O
,	O
{	O
143	int
,	O
3.85437071718007277052156573649e247	int
,	O
0	int
}	O
,	O
{	O
144	int
,	O
5.55029383273930478955105466055e249	int
,	O
0	int
}	O
,	O
{	O
145	int
,	O
8.04792605747199194484902925780e251	int
,	O
0	int
}	O
,	O
{	O
146	int
,	O
1.17499720439091082394795827164e254	int
,	O
0	int
}	O
,	O
{	O
147	int
,	O
1.72724589045463891120349865931e256	int
,	O
0	int
}	O
,	O
{	O
148	int
,	O
2.55632391787286558858117801578e258	int
,	O
0	int
}	O
,	O
{	O
149	int
,	O
3.80892263763056972698595524351e260	int
,	O
0	int
}	O
,	O
{	O
150	int
,	O
5.71338395644585459047893286526e262	int
,	O
0	int
}	O
,	O
{	O
151	int
,	O
8.62720977423324043162318862650e264	int
,	O
0	int
}	O
,	O
{	O
152	int
,	O
1.31133588568345254560672467123e267	int
,	O
0	int
}	O
,	O
{	O
153	int
,	O
2.00634390509568239477828874699e269	int
,	O
0	int
}	O
,	O
{	O
154	int
,	O
3.08976961384735088795856467036e271	int
,	O
0	int
}	O
,	O
{	O
155	int
,	O
4.78914290146339387633577523906e273	int
,	O
0	int
}	O
,	O
{	O
156	int
,	O
7.47106292628289444708380937294e275	int
,	O
0	int
}	O
,	O
{	O
157	int
,	O
1.17295687942641442819215807155e278	int
,	O
0	int
}	O
,	O
{	O
158	int
,	O
1.85327186949373479654360975305e280	int
,	O
0	int
}	O
,	O
{	O
159	int
,	O
2.94670227249503832650433950735e282	int
,	O
0	int
}	O
,	O
{	O
160	int
,	O
4.71472363599206132240694321176e284	int
,	O
0	int
}	O
,	O
{	O
161	int
,	O
7.59070505394721872907517857094e286	int
,	O
0	int
}	O
,	O
{	O
162	int
,	O
1.22969421873944943411017892849e289	int
,	O
0	int
}	O
,	O
{	O
163	int
,	O
2.00440157654530257759959165344e291	int
,	O
0	int
}	O
,	O
{	O
164	int
,	O
3.28721858553429622726333031164e293	int
,	O
0	int
}	O
,	O
{	O
165	int
,	O
5.42391066613158877498449501421e295	int
,	O
0	int
}	O
,	O
{	O
166	int
,	O
9.00369170577843736647426172359e297	int
,	O
0	int
}	O
,	O
{	O
167	int
,	O
1.50361651486499904020120170784e300	int
,	O
0	int
}	O
,	O
{	O
168	int
,	O
2.52607574497319838753801886917e302	int
,	O
0	int
}	O
,	O
{	O
169	int
,	O
4.26906800900470527493925188890e304	int
,	O
0	int
}	O
,	O
{	O
170	int
,	O
7.25741561530799896739672821113e306	int
,	O
0	int
}	O
,	O
}	O
;	O
static	O
struct	O
{	O
int	O
n	int
;	O
double	O
f	pointer
;	O
long	O
i	long
;	O
}	O
doub_fact_table	array
[	O
GSL_SF_DOUBLEFACT_NMAX	int
+	O
1	int
]	O
=	O
{	O
{	O
0	int
,	O
1.000000000000000000000000000	int
,	O
1L	int
}	O
,	O
{	O
1	int
,	O
1.000000000000000000000000000	int
,	O
1L	int
}	O
,	O
{	O
2	int
,	O
2.000000000000000000000000000	int
,	O
2L	int
}	O
,	O
{	O
3	int
,	O
3.000000000000000000000000000	int
,	O
3L	int
}	O
,	O
{	O
4	int
,	O
8.000000000000000000000000000	int
,	O
8L	int
}	O
,	O
{	O
5	int
,	O
15.00000000000000000000000000	int
,	O
15L	int
}	O
,	O
{	O
6	int
,	O
48.00000000000000000000000000	int
,	O
48L	int
}	O
,	O
{	O
7	int
,	O
105.0000000000000000000000000	int
,	O
105L	int
}	O
,	O
{	O
8	int
,	O
384.0000000000000000000000000	int
,	O
384L	int
}	O
,	O
{	O
9	int
,	O
945.0000000000000000000000000	int
,	O
945L	int
}	O
,	O
{	O
10	int
,	O
3840.000000000000000000000000	int
,	O
3840L	int
}	O
,	O
{	O
11	int
,	O
10395.00000000000000000000000	int
,	O
10395L	int
}	O
,	O
{	O
12	int
,	O
46080.00000000000000000000000	int
,	O
46080L	int
}	O
,	O
{	O
13	int
,	O
135135.0000000000000000000000	int
,	O
135135L	int
}	O
,	O
{	O
14	int
,	O
645120.00000000000000000000000	int
,	O
645120L	int
}	O
,	O
{	O
15	int
,	O
2.02702500000000000000000000000e6	int
,	O
2027025L	int
}	O
,	O
{	O
16	int
,	O
1.03219200000000000000000000000e7	int
,	O
10321920L	int
}	O
,	O
{	O
17	int
,	O
3.4459425000000000000000000000e7	int
,	O
34459425L	int
}	O
,	O
{	O
18	int
,	O
1.85794560000000000000000000000e8	int
,	O
185794560L	int
}	O
,	O
{	O
19	int
,	O
6.5472907500000000000000000000e8	int
,	O
0	int
}	O
,	O
{	O
20	int
,	O
3.7158912000000000000000000000e9	int
,	O
0	int
}	O
,	O
{	O
21	int
,	O
1.37493105750000000000000000000e10	int
,	O
0	int
}	O
,	O
{	O
22	int
,	O
8.1749606400000000000000000000e10	int
,	O
0	int
}	O
,	O
{	O
23	int
,	O
3.1623414322500000000000000000e11	int
,	O
0	int
}	O
,	O
{	O
24	int
,	O
1.96199055360000000000000000000e12	int
,	O
0	int
}	O
,	O
{	O
25	int
,	O
7.9058535806250000000000000000e12	int
,	O
0	int
}	O
,	O
{	O
26	int
,	O
5.1011754393600000000000000000e13	int
,	O
0	int
}	O
,	O
{	O
27	int
,	O
2.13458046676875000000000000000e14	int
,	O
0	int
}	O
,	O
{	O
28	int
,	O
1.42832912302080000000000000000e15	int
,	O
0	int
}	O
,	O
{	O
29	int
,	O
6.1902833536293750000000000000e15	int
,	O
0	int
}	O
,	O
{	O
30	int
,	O
4.2849873690624000000000000000e16	int
,	O
0	int
}	O
,	O
{	O
31	int
,	O
1.91898783962510625000000000000e17	int
,	O
0	int
}	O
,	O
{	O
32	int
,	O
1.37119595809996800000000000000e18	int
,	O
0	int
}	O
,	O
{	O
33	int
,	O
6.3326598707628506250000000000e18	int
,	O
0	int
}	O
,	O
{	O
34	int
,	O
4.6620662575398912000000000000e19	int
,	O
0	int
}	O
,	O
{	O
35	int
,	O
2.21643095476699771875000000000e20	int
,	O
0	int
}	O
,	O
{	O
36	int
,	O
1.67834385271436083200000000000e21	int
,	O
0	int
}	O
,	O
{	O
37	int
,	O
8.2007945326378915593750000000e21	int
,	O
0	int
}	O
,	O
{	O
38	int
,	O
6.3777066403145711616000000000e22	int
,	O
0	int
}	O
,	O
{	O
39	int
,	O
3.1983098677287777081562500000e23	int
,	O
0	int
}	O
,	O
{	O
40	int
,	O
2.55108265612582846464000000000e24	int
,	O
0	int
}	O
,	O
{	O
41	int
,	O
1.31130704576879886034406250000e25	int
,	O
0	int
}	O
,	O
{	O
42	int
,	O
1.07145471557284795514880000000e26	int
,	O
0	int
}	O
,	O
{	O
43	int
,	O
5.6386202968058350994794687500e26	int
,	O
0	int
}	O
,	O
{	O
44	int
,	O
4.7144007485205310026547200000e27	int
,	O
0	int
}	O
,	O
{	O
45	int
,	O
2.53737913356262579476576093750e28	int
,	O
0	int
}	O
,	O
{	O
46	int
,	O
2.16862434431944426122117120000e29	int
,	O
0	int
}	O
,	O
{	O
47	int
,	O
1.19256819277443412353990764062e30	int
,	O
0	int
}	O
,	O
{	O
48	int
,	O
1.04093968527333324538616217600e31	int
,	O
0	int
}	O
,	O
{	O
49	int
,	O
5.8435841445947272053455474391e31	int
,	O
0	int
}	O
,	O
{	O
50	int
,	O
5.2046984263666662269308108800e32	int
,	O
0	int
}	O
,	O
{	O
51	int
,	O
2.98022791374331087472622919392e33	int
,	O
0	int
}	O
,	O
{	O
52	int
,	O
2.70644318171066643800402165760e34	int
,	O
0	int
}	O
,	O
{	O
53	int
,	O
1.57952079428395476360490147278e35	int
,	O
0	int
}	O
,	O
{	O
54	int
,	O
1.46147931812375987652217169510e36	int
,	O
0	int
}	O
,	O
{	O
55	int
,	O
8.6873643685617511998269581003e36	int
,	O
0	int
}	O
,	O
{	O
56	int
,	O
8.1842841814930553085241614926e37	int
,	O
0	int
}	O
,	O
{	O
57	int
,	O
4.9517976900801981839013661172e38	int
,	O
0	int
}	O
,	O
{	O
58	int
,	O
4.7468848252659720789440136657e39	int
,	O
0	int
}	O
,	O
{	O
59	int
,	O
2.92156063714731692850180600912e40	int
,	O
0	int
}	O
,	O
{	O
60	int
,	O
2.84813089515958324736640819942e41	int
,	O
0	int
}	O
,	O
{	O
61	int
,	O
1.78215198865986332638610166557e42	int
,	O
0	int
}	O
,	O
{	O
62	int
,	O
1.76584115499894161336717308364e43	int
,	O
0	int
}	O
,	O
{	O
63	int
,	O
1.12275575285571389562324404931e44	int
,	O
0	int
}	O
,	O
{	O
64	int
,	O
1.13013833919932263255499077353e45	int
,	O
0	int
}	O
,	O
{	O
65	int
,	O
7.2979123935621403215510863205e45	int
,	O
0	int
}	O
,	O
{	O
66	int
,	O
7.4589130387155293748629391053e46	int
,	O
0	int
}	O
,	O
{	O
67	int
,	O
4.8896013036866340154392278347e47	int
,	O
0	int
}	O
,	O
{	O
68	int
,	O
5.0720608663265599749067985916e48	int
,	O
0	int
}	O
,	O
{	O
69	int
,	O
3.3738248995437774706530672060e49	int
,	O
0	int
}	O
,	O
{	O
70	int
,	O
3.5504426064285919824347590141e50	int
,	O
0	int
}	O
,	O
{	O
71	int
,	O
2.39541567867608200416367771623e51	int
,	O
0	int
}	O
,	O
{	O
72	int
,	O
2.55631867662858622735302649017e52	int
,	O
0	int
}	O
,	O
{	O
73	int
,	O
1.74865344543353986303948473285e53	int
,	O
0	int
}	O
,	O
{	O
74	int
,	O
1.89167582070515380824123960272e54	int
,	O
0	int
}	O
,	O
{	O
75	int
,	O
1.31149008407515489727961354964e55	int
,	O
0	int
}	O
,	O
{	O
76	int
,	O
1.43767362373591689426334209807e56	int
,	O
0	int
}	O
,	O
{	O
77	int
,	O
1.00984736473786927090530243322e57	int
,	O
0	int
}	O
,	O
{	O
78	int
,	O
1.12138542651401517752540683649e58	int
,	O
0	int
}	O
,	O
{	O
79	int
,	O
7.9777941814291672401518892225e58	int
,	O
0	int
}	O
,	O
{	O
80	int
,	O
8.9710834121121214202032546920e59	int
,	O
0	int
}	O
,	O
{	O
81	int
,	O
6.4620132869576254645230302702e60	int
,	O
0	int
}	O
,	O
{	O
82	int
,	O
7.3562883979319395645666688474e61	int
,	O
0	int
}	O
,	O
{	O
83	int
,	O
5.3634710281748291355541151243e62	int
,	O
0	int
}	O
,	O
{	O
84	int
,	O
6.1792822542628292342360018318e63	int
,	O
0	int
}	O
,	O
{	O
85	int
,	O
4.5589503739486047652209978556e64	int
,	O
0	int
}	O
,	O
{	O
86	int
,	O
5.3141827386660331414429615754e65	int
,	O
0	int
}	O
,	O
{	O
87	int
,	O
3.9662868253352861457422681344e66	int
,	O
0	int
}	O
,	O
{	O
88	int
,	O
4.6764808100261091644698061863e67	int
,	O
0	int
}	O
,	O
{	O
89	int
,	O
3.5299952745484046697106186396e68	int
,	O
0	int
}	O
,	O
{	O
90	int
,	O
4.2088327290234982480228255677e69	int
,	O
0	int
}	O
,	O
{	O
91	int
,	O
3.2122956998390482494366629620e70	int
,	O
0	int
}	O
,	O
{	O
92	int
,	O
3.8721261107016183881809995223e71	int
,	O
0	int
}	O
,	O
{	O
93	int
,	O
2.98743500085031487197609655470e72	int
,	O
0	int
}	O
,	O
{	O
94	int
,	O
3.6397985440595212848901395509e73	int
,	O
0	int
}	O
,	O
{	O
95	int
,	O
2.83806325080779912837729172696e74	int
,	O
0	int
}	O
,	O
{	O
96	int
,	O
3.4942066022971404334945339689e75	int
,	O
0	int
}	O
,	O
{	O
97	int
,	O
2.75292135328356515452597297515e76	int
,	O
0	int
}	O
,	O
{	O
98	int
,	O
3.4243224702511976248246432895e77	int
,	O
0	int
}	O
,	O
{	O
99	int
,	O
2.72539213975072950298071324540e78	int
,	O
0	int
}	O
,	O
{	O
100	int
,	O
3.4243224702511976248246432895e79	int
,	O
0	int
}	O
,	O
{	O
101	int
,	O
2.75264606114823679801052037785e80	int
,	O
0	int
}	O
,	O
{	O
102	int
,	O
3.4928089196562215773211361553e81	int
,	O
0	int
}	O
,	O
{	O
103	int
,	O
2.83522544298268390195083598919e82	int
,	O
0	int
}	O
,	O
{	O
104	int
,	O
3.6325212764424704404139816015e83	int
,	O
0	int
}	O
,	O
{	O
105	int
,	O
2.97698671513181809704837778865e84	int
,	O
0	int
}	O
,	O
{	O
106	int
,	O
3.8504725530290186668388204976e85	int
,	O
0	int
}	O
,	O
{	O
107	int
,	O
3.1853757851910453638417642339e86	int
,	O
0	int
}	O
,	O
{	O
108	int
,	O
4.1585103572713401601859261374e87	int
,	O
0	int
}	O
,	O
{	O
109	int
,	O
3.4720596058582394465875230149e88	int
,	O
0	int
}	O
,	O
{	O
110	int
,	O
4.5743613929984741762045187512e89	int
,	O
0	int
}	O
,	O
{	O
111	int
,	O
3.8539861625026457857121505465e90	int
,	O
0	int
}	O
,	O
{	O
112	int
,	O
5.1232847601582910773490610013e91	int
,	O
0	int
}	O
,	O
{	O
113	int
,	O
4.3550043636279897378547301176e92	int
,	O
0	int
}	O
,	O
{	O
114	int
,	O
5.8405446265804518281779295415e93	int
,	O
0	int
}	O
,	O
{	O
115	int
,	O
5.0082550181721881985329396352e94	int
,	O
0	int
}	O
,	O
{	O
116	int
,	O
6.7750317668333241206863982681e95	int
,	O
0	int
}	O
,	O
{	O
117	int
,	O
5.8596583712614601922835393732e96	int
,	O
0	int
}	O
,	O
{	O
118	int
,	O
7.9945374848633224624099499564e97	int
,	O
0	int
}	O
,	O
{	O
119	int
,	O
6.9729934618011376288174118541e98	int
,	O
0	int
}	O
,	O
{	O
120	int
,	O
9.5934449818359869548919399477e99	int
,	O
0	int
}	O
,	O
{	O
121	int
,	O
8.4373220887793765308690683435e100	int
,	O
0	int
}	O
,	O
{	O
122	int
,	O
1.17040028778399040849681667362e102	int
,	O
0	int
}	O
,	O
{	O
123	int
,	O
1.03779061691986331329689540625e103	int
,	O
0	int
}	O
,	O
{	O
124	int
,	O
1.45129635685214810653605267528e104	int
,	O
0	int
}	O
,	O
{	O
125	int
,	O
1.29723827114982914162111925781e105	int
,	O
0	int
}	O
,	O
{	O
126	int
,	O
1.82863340963370661423542637086e106	int
,	O
0	int
}	O
,	O
{	O
127	int
,	O
1.64749260436028300985882145742e107	int
,	O
0	int
}	O
,	O
{	O
128	int
,	O
2.34065076433114446622134575470e108	int
,	O
0	int
}	O
,	O
{	O
129	int
,	O
2.12526545962476508271787968008e109	int
,	O
0	int
}	O
,	O
{	O
130	int
,	O
3.04284599363048780608774948111e110	int
,	O
0	int
}	O
,	O
{	O
131	int
,	O
2.78409775210844225836042238090e111	int
,	O
0	int
}	O
,	O
{	O
132	int
,	O
4.0165567115922439040358293151e112	int
,	O
0	int
}	O
,	O
{	O
133	int
,	O
3.7028500103042282036193617666e113	int
,	O
0	int
}	O
,	O
{	O
134	int
,	O
5.3821859935336068314080112822e114	int
,	O
0	int
}	O
,	O
{	O
135	int
,	O
4.9988475139107080748861383849e115	int
,	O
0	int
}	O
,	O
{	O
136	int
,	O
7.3197729512057052907148953438e116	int
,	O
0	int
}	O
,	O
{	O
137	int
,	O
6.8484210940576700625940095873e117	int
,	O
0	int
}	O
,	O
{	O
138	int
,	O
1.01012866726638733011865555744e119	int
,	O
0	int
}	O
,	O
{	O
139	int
,	O
9.5193053207401613870056733264e119	int
,	O
0	int
}	O
,	O
{	O
140	int
,	O
1.41418013417294226216611778042e121	int
,	O
0	int
}	O
,	O
{	O
141	int
,	O
1.34222205022436275556779993902e122	int
,	O
0	int
}	O
,	O
{	O
142	int
,	O
2.00813579052557801227588724819e123	int
,	O
0	int
}	O
,	O
{	O
143	int
,	O
1.91937753182083874046195391280e124	int
,	O
0	int
}	O
,	O
{	O
144	int
,	O
2.89171553835683233767727763739e125	int
,	O
0	int
}	O
,	O
{	O
145	int
,	O
2.78309742114021617366983317355e126	int
,	O
0	int
}	O
,	O
{	O
146	int
,	O
4.2219046860009752130088253506e127	int
,	O
0	int
}	O
,	O
{	O
147	int
,	O
4.0911532090761177752946547651e128	int
,	O
0	int
}	O
,	O
{	O
148	int
,	O
6.2484189352814433152530615189e129	int
,	O
0	int
}	O
,	O
{	O
149	int
,	O
6.0958182815234154851890356000e130	int
,	O
0	int
}	O
,	O
{	O
150	int
,	O
9.3726284029221649728795922783e131	int
,	O
0	int
}	O
,	O
{	O
151	int
,	O
9.2046856051003573826354437561e132	int
,	O
0	int
}	O
,	O
{	O
152	int
,	O
1.42463951724416907587769802630e134	int
,	O
0	int
}	O
,	O
{	O
153	int
,	O
1.40831689758035467954322289468e135	int
,	O
0	int
}	O
,	O
{	O
154	int
,	O
2.19394485655602037685165496051e136	int
,	O
0	int
}	O
,	O
{	O
155	int
,	O
2.18289119124954975329199548675e137	int
,	O
0	int
}	O
,	O
{	O
156	int
,	O
3.4225539762273917878885817384e138	int
,	O
0	int
}	O
,	O
{	O
157	int
,	O
3.4271391702617931126684329142e139	int
,	O
0	int
}	O
,	O
{	O
158	int
,	O
5.4076352824392790248639591467e140	int
,	O
0	int
}	O
,	O
{	O
159	int
,	O
5.4491512807162510491428083336e141	int
,	O
0	int
}	O
,	O
{	O
160	int
,	O
8.6522164519028464397823346347e142	int
,	O
0	int
}	O
,	O
{	O
161	int
,	O
8.7731335619531641891199214170e143	int
,	O
0	int
}	O
,	O
{	O
162	int
,	O
1.40165906520826112324473821082e145	int
,	O
0	int
}	O
,	O
{	O
163	int
,	O
1.43002077059836576282654719098e146	int
,	O
0	int
}	O
,	O
{	O
164	int
,	O
2.29872086694154824212137066574e147	int
,	O
0	int
}	O
,	O
{	O
165	int
,	O
2.35953427148730350866380286512e148	int
,	O
0	int
}	O
,	O
{	O
166	int
,	O
3.8158766391229700819214753051e149	int
,	O
0	int
}	O
,	O
{	O
167	int
,	O
3.9404222333837968594685507847e150	int
,	O
0	int
}	O
,	O
{	O
168	int
,	O
6.4106727537265897376280785126e151	int
,	O
0	int
}	O
,	O
{	O
169	int
,	O
6.6593135744186166925018508262e152	int
,	O
0	int
}	O
,	O
{	O
170	int
,	O
1.08981436813352025539677334714e154	int
,	O
0	int
}	O
,	O
{	O
171	int
,	O
1.13874262122558345441781649128e155	int
,	O
0	int
}	O
,	O
{	O
172	int
,	O
1.87448071318965483928245015709e156	int
,	O
0	int
}	O
,	O
{	O
173	int
,	O
1.97002473472025937614282252992e157	int
,	O
0	int
}	O
,	O
{	O
174	int
,	O
3.2615964409499994203514632733e158	int
,	O
0	int
}	O
,	O
{	O
175	int
,	O
3.4475432857604539082499394274e159	int
,	O
0	int
}	O
,	O
{	O
176	int
,	O
5.7404097360719989798185753611e160	int
,	O
0	int
}	O
,	O
{	O
177	int
,	O
6.1021516157960034176023927864e161	int
,	O
0	int
}	O
,	O
{	O
178	int
,	O
1.02179293302081581840770641427e163	int
,	O
0	int
}	O
,	O
{	O
179	int
,	O
1.09228513922748461175082830877e164	int
,	O
0	int
}	O
,	O
{	O
180	int
,	O
1.83922727943746847313387154568e165	int
,	O
0	int
}	O
,	O
{	O
181	int
,	O
1.97703610200174714726899923887e166	int
,	O
0	int
}	O
,	O
{	O
182	int
,	O
3.3473936485761926211036462131e167	int
,	O
0	int
}	O
,	O
{	O
183	int
,	O
3.6179760666631972795022686071e168	int
,	O
0	int
}	O
,	O
{	O
184	int
,	O
6.1592043133801944228307090322e169	int
,	O
0	int
}	O
,	O
{	O
185	int
,	O
6.6932557233269149670791969232e170	int
,	O
0	int
}	O
,	O
{	O
186	int
,	O
1.14561200228871616264651187999e172	int
,	O
0	int
}	O
,	O
{	O
187	int
,	O
1.25163882026213309884380982464e173	int
,	O
0	int
}	O
,	O
{	O
188	int
,	O
2.15375056430278638577544233437e174	int
,	O
0	int
}	O
,	O
{	O
189	int
,	O
2.36559737029543155681480056857e175	int
,	O
0	int
}	O
,	O
{	O
190	int
,	O
4.0921260721752941329733404353e176	int
,	O
0	int
}	O
,	O
{	O
191	int
,	O
4.5182909772642742735162690860e177	int
,	O
0	int
}	O
,	O
{	O
192	int
,	O
7.8568820585765647353088136358e178	int
,	O
0	int
}	O
,	O
{	O
193	int
,	O
8.7203015861200493478863993359e179	int
,	O
0	int
}	O
,	O
{	O
194	int
,	O
1.52423511936385355864990984535e181	int
,	O
0	int
}	O
,	O
{	O
195	int
,	O
1.70045880929340962283784787050e182	int
,	O
0	int
}	O
,	O
{	O
196	int
,	O
2.98750083395315297495382329688e183	int
,	O
0	int
}	O
,	O
{	O
197	int
,	O
3.3499038543080169569905603049e184	int
,	O
0	int
}	O
,	O
{	O
198	int
,	O
5.9152516512272428904085701278e185	int
,	O
0	int
}	O
,	O
{	O
199	int
,	O
6.6663086700729537444112150067e186	int
,	O
0	int
}	O
,	O
{	O
200	int
,	O
1.18305033024544857808171402556e188	int
,	O
0	int
}	O
,	O
{	O
201	int
,	O
1.33992804268466370262665421635e189	int
,	O
0	int
}	O
,	O
{	O
202	int
,	O
2.38976166709580612772506233164e190	int
,	O
0	int
}	O
,	O
{	O
203	int
,	O
2.72005392664986731633210805920e191	int
,	O
0	int
}	O
,	O
{	O
204	int
,	O
4.8751138008754445005591271565e192	int
,	O
0	int
}	O
,	O
{	O
205	int
,	O
5.5761105496322279984808215214e193	int
,	O
0	int
}	O
,	O
{	O
206	int
,	O
1.00427344298034156711518019425e195	int
,	O
0	int
}	O
,	O
{	O
207	int
,	O
1.15425488377387119568553005492e196	int
,	O
0	int
}	O
,	O
{	O
208	int
,	O
2.08888876139911045959957480403e197	int
,	O
0	int
}	O
,	O
{	O
209	int
,	O
2.41239270708739079898275781478e198	int
,	O
0	int
}	O
,	O
{	O
210	int
,	O
4.3866663989381319651591070885e199	int
,	O
0	int
}	O
,	O
{	O
211	int
,	O
5.0901486119543945858536189892e200	int
,	O
0	int
}	O
,	O
{	O
212	int
,	O
9.2997327657488397661373070276e201	int
,	O
0	int
}	O
,	O
{	O
213	int
,	O
1.08420165434628604678682084470e203	int
,	O
0	int
}	O
,	O
{	O
214	int
,	O
1.99014281187025170995338370390e204	int
,	O
0	int
}	O
,	O
{	O
215	int
,	O
2.33103355684451500059166481610e205	int
,	O
0	int
}	O
,	O
{	O
216	int
,	O
4.2987084736397436934993088004e206	int
,	O
0	int
}	O
,	O
{	O
217	int
,	O
5.0583428183525975512839126509e207	int
,	O
0	int
}	O
,	O
{	O
218	int
,	O
9.3711844725346412518284931849e208	int
,	O
0	int
}	O
,	O
{	O
219	int
,	O
1.10777707721921886373117687056e210	int
,	O
0	int
}	O
,	O
{	O
220	int
,	O
2.06166058395762107540226850068e211	int
,	O
0	int
}	O
,	O
{	O
221	int
,	O
2.44818734065447368884590088393e212	int
,	O
0	int
}	O
,	O
{	O
222	int
,	O
4.5768864963859187873930360715e213	int
,	O
0	int
}	O
,	O
{	O
223	int
,	O
5.4594577696594763261263589712e214	int
,	O
0	int
}	O
,	O
{	O
224	int
,	O
1.02522257519044580837604008002e216	int
,	O
0	int
}	O
,	O
{	O
225	int
,	O
1.22837799817338217337843076851e217	int
,	O
0	int
}	O
,	O
{	O
226	int
,	O
2.31700301993040752692985058084e218	int
,	O
0	int
}	O
,	O
{	O
227	int
,	O
2.78841805585357753356903784452e219	int
,	O
0	int
}	O
,	O
{	O
228	int
,	O
5.2827668854413291614000593243e220	int
,	O
0	int
}	O
,	O
{	O
229	int
,	O
6.3854773479046925518730966640e221	int
,	O
0	int
}	O
,	O
{	O
230	int
,	O
1.21503638365150570712201364459e223	int
,	O
0	int
}	O
,	O
{	O
231	int
,	O
1.47504526736598397948268532937e224	int
,	O
0	int
}	O
,	O
{	O
232	int
,	O
2.81888441007149324052307165546e225	int
,	O
0	int
}	O
,	O
{	O
233	int
,	O
3.4368554729627426721946568174e226	int
,	O
0	int
}	O
,	O
{	O
234	int
,	O
6.5961895195672941828239876738e227	int
,	O
0	int
}	O
,	O
{	O
235	int
,	O
8.0766103614624452796574435210e228	int
,	O
0	int
}	O
,	O
{	O
236	int
,	O
1.55670072661788142714646109101e230	int
,	O
0	int
}	O
,	O
{	O
237	int
,	O
1.91415665566659953127881411447e231	int
,	O
0	int
}	O
,	O
{	O
238	int
,	O
3.7049477293505577966085773966e232	int
,	O
0	int
}	O
,	O
{	O
239	int
,	O
4.5748344070431728797563657336e233	int
,	O
0	int
}	O
,	O
{	O
240	int
,	O
8.8918745504413387118605857518e234	int
,	O
0	int
}	O
,	O
{	O
241	int
,	O
1.10253509209740466402128414180e236	int
,	O
0	int
}	O
,	O
{	O
242	int
,	O
2.15183364120680396827026175195e237	int
,	O
0	int
}	O
,	O
{	O
243	int
,	O
2.67916027379669333357172046456e238	int
,	O
0	int
}	O
,	O
{	O
244	int
,	O
5.2504740845446016825794386748e239	int
,	O
0	int
}	O
,	O
{	O
245	int
,	O
6.5639426708018986672507151382e240	int
,	O
0	int
}	O
,	O
{	O
246	int
,	O
1.29161662479797201391454191399e242	int
,	O
0	int
}	O
,	O
{	O
247	int
,	O
1.62129383968806897081092663913e243	int
,	O
0	int
}	O
,	O
{	O
248	int
,	O
3.2032092294989705945080639467e244	int
,	O
0	int
}	O
,	O
{	O
249	int
,	O
4.0370216608232917373192073314e245	int
,	O
0	int
}	O
,	O
{	O
250	int
,	O
8.0080230737474264862701598667e246	int
,	O
0	int
}	O
,	O
{	O
251	int
,	O
1.01329243686664622606712104019e248	int
,	O
0	int
}	O
,	O
{	O
252	int
,	O
2.01802181458435147454008028642e249	int
,	O
0	int
}	O
,	O
{	O
253	int
,	O
2.56362986527261495194981623168e250	int
,	O
0	int
}	O
,	O
{	O
254	int
,	O
5.1257754090442527453318039275e251	int
,	O
0	int
}	O
,	O
{	O
255	int
,	O
6.5372561564451681274720313908e252	int
,	O
0	int
}	O
,	O
{	O
256	int
,	O
1.31219850471532870280494180544e254	int
,	O
0	int
}	O
,	O
{	O
257	int
,	O
1.68007483220640820876031206743e255	int
,	O
0	int
}	O
,	O
{	O
258	int
,	O
3.3854721421655480532367498580e256	int
,	O
0	int
}	O
,	O
{	O
259	int
,	O
4.3513938154145972606892082546e257	int
,	O
0	int
}	O
,	O
{	O
260	int
,	O
8.8022275696304249384155496309e258	int
,	O
0	int
}	O
,	O
{	O
261	int
,	O
1.13571378582320988503988335446e260	int
,	O
0	int
}	O
,	O
{	O
262	int
,	O
2.30618362324317133386487400329e261	int
,	O
0	int
}	O
,	O
{	O
263	int
,	O
2.98692725671504199765489322224e262	int
,	O
0	int
}	O
,	O
{	O
264	int
,	O
6.0883247653619723214032673687e263	int
,	O
0	int
}	O
,	O
{	O
265	int
,	O
7.9153572302948612937854670389e264	int
,	O
0	int
}	O
,	O
{	O
266	int
,	O
1.61949438758628463749326912007e266	int
,	O
0	int
}	O
,	O
{	O
267	int
,	O
2.11340038048872796544071969939e267	int
,	O
0	int
}	O
,	O
{	O
268	int
,	O
4.3402449587312428284819612418e268	int
,	O
0	int
}	O
,	O
{	O
269	int
,	O
5.6850470235146782270355359914e269	int
,	O
0	int
}	O
,	O
{	O
270	int
,	O
1.17186613885743556369012953528e271	int
,	O
0	int
}	O
,	O
{	O
271	int
,	O
1.54064774337247779952663025366e272	int
,	O
0	int
}	O
,	O
{	O
272	int
,	O
3.1874758976922247332371523360e273	int
,	O
0	int
}	O
,	O
{	O
273	int
,	O
4.2059683394068643927077005925e274	int
,	O
0	int
}	O
,	O
{	O
274	int
,	O
8.7336839596766957690697974006e275	int
,	O
0	int
}	O
,	O
{	O
275	int
,	O
1.15664129333688770799461766294e277	int
,	O
0	int
}	O
,	O
{	O
276	int
,	O
2.41049677287076803226326408256e278	int
,	O
0	int
}	O
,	O
{	O
277	int
,	O
3.2038963825431789511450909263e279	int
,	O
0	int
}	O
,	O
{	O
278	int
,	O
6.7011810285807351296918741495e280	int
,	O
0	int
}	O
,	O
{	O
279	int
,	O
8.9388709072954692736948036845e281	int
,	O
0	int
}	O
,	O
{	O
280	int
,	O
1.87633068800260583631372476186e283	int
,	O
0	int
}	O
,	O
{	O
281	int
,	O
2.51182272495002686590823983534e284	int
,	O
0	int
}	O
,	O
{	O
282	int
,	O
5.2912525401673484584047038284e285	int
,	O
0	int
}	O
,	O
{	O
283	int
,	O
7.1084583116085760305203187340e286	int
,	O
0	int
}	O
,	O
{	O
284	int
,	O
1.50271572140752696218693588728e288	int
,	O
0	int
}	O
,	O
{	O
285	int
,	O
2.02591061880844416869829083919e289	int
,	O
0	int
}	O
,	O
{	O
286	int
,	O
4.2977669632255271118546366376e290	int
,	O
0	int
}	O
,	O
{	O
287	int
,	O
5.8143634759802347641640947085e291	int
,	O
0	int
}	O
,	O
{	O
288	int
,	O
1.23775688540895180821413535163e293	int
,	O
0	int
}	O
,	O
{	O
289	int
,	O
1.68035104455828784684342337075e294	int
,	O
0	int
}	O
,	O
{	O
290	int
,	O
3.5894949676859602438209925197e295	int
,	O
0	int
}	O
,	O
{	O
291	int
,	O
4.8898215396646176343143620089e296	int
,	O
0	int
}	O
,	O
{	O
292	int
,	O
1.04813253056430039119572981576e298	int
,	O
0	int
}	O
,	O
{	O
293	int
,	O
1.43271771112173296685410806860e299	int
,	O
0	int
}	O
,	O
{	O
294	int
,	O
3.08150963985904315011544565835e300	int
,	O
0	int
}	O
,	O
{	O
295	int
,	O
4.2265172478091122522196188024e301	int
,	O
0	int
}	O
,	O
{	O
296	int
,	O
9.1212685339827677243417191487e302	int
,	O
0	int
}	O
,	O
{	O
297	int
,	O
1.25527562259930633890922678431e304	int
,	O
0	int
}	O
,	O
}	O
;	O
static	O
double	O
gstar_a_data	array
[	O
30	int
]	O
=	O
{	O
2.16786447866463034423060819465	int
,	O
-	O
0.05533249018745584258035832802	int
,	O
0.01800392431460719960888319748	int
,	O
-	O
0.00580919269468937714480019814	int
,	O
0.00186523689488400339978881560	int
,	O
-	O
0.00059746524113955531852595159	int
,	O
0.00019125169907783353925426722	int
,	O
-	O
0.00006124996546944685735909697	int
,	O
0.00001963889633130842586440945	int
,	O
-	O
6.3067741254637180272515795142e-06	int
,	O
2.0288698405861392526872789863e-06	int
,	O
-	O
6.5384896660838465981983750582e-07	int
,	O
2.1108698058908865476480734911e-07	int
,	O
-	O
6.8260714912274941677892994580e-08	int
,	O
2.2108560875880560555583978510e-08	int
,	O
-	O
7.1710331930255456643627187187e-09	int
,	O
2.3290892983985406754602564745e-09	int
,	O
-	O
7.5740371598505586754890405359e-10	int
,	O
2.4658267222594334398525312084e-10	int
,	O
-	O
8.0362243171659883803428749516e-11	int
,	O
2.6215616826341594653521346229e-11	int
,	O
-	O
8.5596155025948750540420068109e-12	int
,	O
2.7970831499487963614315315444e-12	int
,	O
-	O
9.1471771211886202805502562414e-13	int
,	O
2.9934720198063397094916415927e-13	int
,	O
-	O
9.8026575909753445931073620469e-14	int
,	O
3.2116773667767153777571410671e-14	int
,	O
-	O
1.0518035333878147029650507254e-14	int
,	O
3.4144405720185253938994854173e-15	int
,	O
-	O
1.0115153943081187052322643819e-15	int
}	O
;	O
static	O
cheb_series	struct
gstar_a_cs	struct
=	O
{	O
gstar_a_data	array
,	O
29	int
,	O
-	O
1	int
,	O
1	int
,	O
17	int
}	O
;	O
static	O
double	O
gstar_b_data	array
[	O
]	O
=	O
{	O
0.0057502277273114339831606096782	int
,	O
0.0004496689534965685038254147807	int
,	O
-	O
0.0001672763153188717308905047405	int
,	O
0.0000615137014913154794776670946	int
,	O
-	O
0.0000223726551711525016380862195	int
,	O
8.0507405356647954540694800545e-06	int
,	O
-	O
2.8671077107583395569766746448e-06	int
,	O
1.0106727053742747568362254106e-06	int
,	O
-	O
3.5265558477595061262310873482e-07	int
,	O
1.2179216046419401193247254591e-07	int
,	O
-	O
4.1619640180795366971160162267e-08	int
,	O
1.4066283500795206892487241294e-08	int
,	O
-	O
4.6982570380537099016106141654e-09	int
,	O
1.5491248664620612686423108936e-09	int
,	O
-	O
5.0340936319394885789686867772e-10	int
,	O
1.6084448673736032249959475006e-10	int
,	O
-	O
5.0349733196835456497619787559e-11	int
,	O
1.5357154939762136997591808461e-11	int
,	O
-	O
4.5233809655775649997667176224e-12	int
,	O
1.2664429179254447281068538964e-12	int
,	O
-	O
3.2648287937449326771785041692e-13	int
,	O
7.1528272726086133795579071407e-14	int
,	O
-	O
9.4831735252566034505739531258e-15	int
,	O
-	O
2.3124001991413207293120906691e-15	int
,	O
2.8406613277170391482590129474e-15	int
,	O
-	O
1.7245370321618816421281770927e-15	int
,	O
8.6507923128671112154695006592e-16	int
,	O
-	O
3.9506563665427555895391869919e-16	int
,	O
1.6779342132074761078792361165e-16	int
,	O
-	O
6.0483153034414765129837716260e-17	int
}	O
;	O
static	O
cheb_series	struct
gstar_b_cs	struct
=	O
{	O
gstar_b_data	array
,	O
29	int
,	O
-	O
1	int
,	O
1	int
,	O
18	int
}	O
;	O
static	O
double	O
lanczos_7_c	array
[	O
9	int
]	O
=	O
{	O
0.99999999999980993227684700473478	int
,	O
676.520368121885098567009190444019	int
,	O
-	O
1259.13921672240287047156078755283	int
,	O
771.3234287776530788486528258894	int
,	O
-	O
176.61502916214059906584551354	int
,	O
12.507343278686904814458936853	int
,	O
-	O
0.13857109526572011689554707	int
,	O
9.984369578019570859563e-6	int
,	O
1.50563273514931155834e-7	int
}	O
;	O
static	O
int	O
lngamma_lanczos_complex	function
(	O
double	O
zr	double
,	O
double	O
zi	double
,	O
gsl_sf_result	struct
*	O
yr	pointer
,	O
gsl_sf_result	struct
*	O
yi	pointer
)	O
{	O
int	O
k	int
;	O
gsl_sf_result	struct
log1_r	struct
,	O
log1_i	struct
;	O
gsl_sf_result	struct
logAg_r	struct
,	O
logAg_i	struct
;	O
double	O
Ag_r	double
,	O
Ag_i	double
;	O
double	O
yi_tmp_val	double
,	O
yi_tmp_err	double
;	O
zr	double
-=	O
1.0	int
;	O
Ag_r	double
=	O
lanczos_7_c	array
[	O
0	int
]	O
;	O
Ag_i	double
=	O
0.0	int
;	O
for	O
(	O
k	int
=	O
1	int
;	O
k	int
<=	O
8	int
;	O
k	int
++	O
)	O
{	O
double	O
R	double
=	O
zr	double
+	O
k	int
;	O
double	O
I	double
=	O
zi	double
;	O
double	O
a	double
=	O
lanczos_7_c	array
[	O
k	int
]	O
/	O
(	O
R	double
*	O
R	double
+	O
I	double
*	O
I	double
)	O
;	O
Ag_r	double
+=	O
a	double
*	O
R	double
;	O
Ag_i	double
-=	O
a	double
*	O
I	double
;	O
}	O
gsl_sf_complex_log_e	function
(	O
zr	double
+	O
7.5	int
,	O
zi	double
,	O
&	O
log1_r	struct
,	O
&	O
log1_i	struct
)	O
;	O
gsl_sf_complex_log_e	function
(	O
Ag_r	double
,	O
Ag_i	double
,	O
&	O
logAg_r	struct
,	O
&	O
logAg_i	struct
)	O
;	O
yr	pointer
->	O
val	double
=	O
(	O
zr	double
+	O
0.5	int
)	O
*	O
log1_r	struct
.	O
val	double
-	O
zi	double
*	O
log1_i	struct
.	O
val	double
-	O
(	O
zr	double
+	O
7.5	int
)	O
+	O
LogRootTwoPi_	int
+	O
logAg_r	struct
.	O
val	double
;	O
yi	pointer
->	O
val	double
=	O
zi	double
*	O
log1_r	struct
.	O
val	double
+	O
(	O
zr	double
+	O
0.5	int
)	O
*	O
log1_i	struct
.	O
val	double
-	O
zi	double
+	O
logAg_i	struct
.	O
val	double
;	O
yr	pointer
->	O
err	double
=	O
4.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
yr	pointer
->	O
val	double
)	O
;	O
yi	pointer
->	O
err	double
=	O
4.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
yi	pointer
->	O
val	double
)	O
;	O
yi_tmp_val	double
=	O
yi	pointer
->	O
val	double
;	O
yi_tmp_err	double
=	O
yi	pointer
->	O
err	double
;	O
gsl_sf_angle_restrict_symm_err_e	function
(	O
yi_tmp_val	double
,	O
yi	pointer
)	O
;	O
yi	pointer
->	O
err	double
+=	O
yi_tmp_err	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
lngamma_lanczos	function
(	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
int	O
k	int
;	O
double	O
Ag	double
;	O
double	O
term1	double
,	O
term2	double
;	O
x	double
-=	O
1.0	int
;	O
Ag	double
=	O
lanczos_7_c	array
[	O
0	int
]	O
;	O
for	O
(	O
k	int
=	O
1	int
;	O
k	int
<=	O
8	int
;	O
k	int
++	O
)	O
{	O
Ag	double
+=	O
lanczos_7_c	array
[	O
k	int
]	O
/	O
(	O
x	double
+	O
k	int
)	O
;	O
}	O
term1	double
=	O
(	O
x	double
+	O
0.5	int
)	O
*	O
log	function
(	O
(	O
x	double
+	O
7.5	int
)	O
/	O
M_E	int
)	O
;	O
term2	double
=	O
LogRootTwoPi_	int
+	O
log	function
(	O
Ag	double
)	O
;	O
result	pointer
->	O
val	double
=	O
term1	double
+	O
(	O
term2	double
-	O
7.0	int
)	O
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
term1	double
)	O
+	O
fabs	function
(	O
term2	double
)	O
+	O
7.0	int
)	O
;	O
result	pointer
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
lngamma_sgn_0	function
(	O
double	O
eps	double
,	O
gsl_sf_result	struct
*	O
lng	pointer
,	O
double	O
*	O
sgn	pointer
)	O
{	O
const	O
double	O
c1	double
=	O
-	O
0.07721566490153286061	int
;	O
const	O
double	O
c2	double
=	O
-	O
0.01094400467202744461	int
;	O
const	O
double	O
c3	double
=	O
0.09252092391911371098	int
;	O
const	O
double	O
c4	double
=	O
-	O
0.01827191316559981266	int
;	O
const	O
double	O
c5	double
=	O
0.01800493109685479790	int
;	O
const	O
double	O
c6	double
=	O
-	O
0.00685088537872380685	int
;	O
const	O
double	O
c7	double
=	O
0.00399823955756846603	int
;	O
const	O
double	O
c8	double
=	O
-	O
0.00189430621687107802	int
;	O
const	O
double	O
c9	double
=	O
0.00097473237804513221	int
;	O
const	O
double	O
c10	double
=	O
-	O
0.00048434392722255893	int
;	O
const	O
double	O
g6	double
=	O
c6	double
+	O
eps	double
*	O
(	O
c7	double
+	O
eps	double
*	O
(	O
c8	double
+	O
eps	double
*	O
(	O
c9	double
+	O
eps	double
*	O
c10	double
)	O
)	O
)	O
;	O
const	O
double	O
g	double
=	O
eps	double
*	O
(	O
c1	double
+	O
eps	double
*	O
(	O
c2	double
+	O
eps	double
*	O
(	O
c3	double
+	O
eps	double
*	O
(	O
c4	double
+	O
eps	double
*	O
(	O
c5	double
+	O
eps	double
*	O
g6	double
)	O
)	O
)	O
)	O
)	O
;	O
const	O
double	O
gee	double
=	O
g	double
+	O
1.0	int
/	O
(	O
1.0	int
+	O
eps	double
)	O
+	O
0.5	int
*	O
eps	double
;	O
lng	pointer
->	O
val	double
=	O
log	function
(	O
gee	double
/	O
fabs	function
(	O
eps	double
)	O
)	O
;	O
lng	pointer
->	O
err	double
=	O
4.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
lng	pointer
->	O
val	double
)	O
;	O
*	O
sgn	pointer
=	O
GSL_SIGN	O
(	O
eps	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
lngamma_sgn_sing	function
(	O
int	O
N	int
,	O
double	O
eps	double
,	O
gsl_sf_result	struct
*	O
lng	pointer
,	O
double	O
*	O
sgn	pointer
)	O
{	O
if	O
(	O
eps	double
==	O
0.0	int
)	O
{	O
lng	pointer
->	O
val	double
=	O
0.0	int
;	O
lng	pointer
->	O
err	double
=	O
0.0	int
;	O
*	O
sgn	pointer
=	O
0.0	int
;	O
GSL_ERROR	O
(	O
"error"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
==	O
1	int
)	O
{	O
const	O
double	O
c0	double
=	O
0.07721566490153286061	int
;	O
const	O
double	O
c1	double
=	O
0.08815966957356030521	int
;	O
const	O
double	O
c2	double
=	O
-	O
0.00436125434555340577	int
;	O
const	O
double	O
c3	double
=	O
0.01391065882004640689	int
;	O
const	O
double	O
c4	double
=	O
-	O
0.00409427227680839100	int
;	O
const	O
double	O
c5	double
=	O
0.00275661310191541584	int
;	O
const	O
double	O
c6	double
=	O
-	O
0.00124162645565305019	int
;	O
const	O
double	O
c7	double
=	O
0.00065267976121802783	int
;	O
const	O
double	O
c8	double
=	O
-	O
0.00032205261682710437	int
;	O
const	O
double	O
c9	double
=	O
0.00016229131039545456	int
;	O
const	O
double	O
g5	double
=	O
c5	double
+	O
eps	double
*	O
(	O
c6	double
+	O
eps	double
*	O
(	O
c7	double
+	O
eps	double
*	O
(	O
c8	double
+	O
eps	double
*	O
c9	double
)	O
)	O
)	O
;	O
const	O
double	O
g	double
=	O
eps	double
*	O
(	O
c0	double
+	O
eps	double
*	O
(	O
c1	double
+	O
eps	double
*	O
(	O
c2	double
+	O
eps	double
*	O
(	O
c3	double
+	O
eps	double
*	O
(	O
c4	double
+	O
eps	double
*	O
g5	double
)	O
)	O
)	O
)	O
)	O
;	O
const	O
double	O
gam_e	double
=	O
g	double
-	O
1.0	int
-	O
0.5	int
*	O
eps	double
*	O
(	O
1.0	int
+	O
3.0	int
*	O
eps	double
)	O
/	O
(	O
1.0	int
-	O
eps	double
*	O
eps	double
)	O
;	O
lng	pointer
->	O
val	double
=	O
log	function
(	O
fabs	function
(	O
gam_e	double
)	O
/	O
fabs	function
(	O
eps	double
)	O
)	O
;	O
lng	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
lng	pointer
->	O
val	double
)	O
;	O
*	O
sgn	pointer
=	O
(	O
eps	double
>	O
0.0	int
?	O
-	O
1.0	int
:	O
1.0	int
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
double	O
g	double
;	O
const	O
double	O
cs1	double
=	O
-	O
1.6449340668482264365	int
;	O
const	O
double	O
cs2	double
=	O
0.8117424252833536436	int
;	O
const	O
double	O
cs3	double
=	O
-	O
0.1907518241220842137	int
;	O
const	O
double	O
cs4	double
=	O
0.0261478478176548005	int
;	O
const	O
double	O
cs5	double
=	O
-	O
0.0023460810354558236	int
;	O
const	O
double	O
e2	double
=	O
eps	double
*	O
eps	double
;	O
const	O
double	O
sin_ser	double
=	O
1.0	int
+	O
e2	double
*	O
(	O
cs1	double
+	O
e2	double
*	O
(	O
cs2	double
+	O
e2	double
*	O
(	O
cs3	double
+	O
e2	double
*	O
(	O
cs4	double
+	O
e2	double
*	O
cs5	double
)	O
)	O
)	O
)	O
;	O
double	O
aeps	double
=	O
fabs	function
(	O
eps	double
)	O
;	O
double	O
c1	double
,	O
c2	double
,	O
c3	double
,	O
c4	double
,	O
c5	double
,	O
c6	double
,	O
c7	double
;	O
double	O
lng_ser	double
;	O
gsl_sf_result	struct
c0	double
;	O
gsl_sf_result	struct
psi_0	struct
;	O
gsl_sf_result	struct
psi_1	struct
;	O
gsl_sf_result	struct
psi_2	struct
;	O
gsl_sf_result	struct
psi_3	struct
;	O
gsl_sf_result	struct
psi_4	struct
;	O
gsl_sf_result	struct
psi_5	struct
;	O
gsl_sf_result	struct
psi_6	struct
;	O
psi_2	struct
.	O
val	double
=	O
0.0	int
;	O
psi_3	struct
.	O
val	double
=	O
0.0	int
;	O
psi_4	struct
.	O
val	double
=	O
0.0	int
;	O
psi_5	struct
.	O
val	double
=	O
0.0	int
;	O
psi_6	struct
.	O
val	double
=	O
0.0	int
;	O
gsl_sf_lnfact_e	function
(	O
N	int
,	O
&	O
c0	double
)	O
;	O
gsl_sf_psi_int_e	function
(	O
N	int
+	O
1	int
,	O
&	O
psi_0	struct
)	O
;	O
gsl_sf_psi_1_int_e	function
(	O
N	int
+	O
1	int
,	O
&	O
psi_1	struct
)	O
;	O
if	O
(	O
aeps	double
>	O
0.00001	int
)	O
gsl_sf_psi_n_e	function
(	O
2	int
,	O
N	int
+	O
1.0	int
,	O
&	O
psi_2	struct
)	O
;	O
if	O
(	O
aeps	double
>	O
0.0002	int
)	O
gsl_sf_psi_n_e	function
(	O
3	int
,	O
N	int
+	O
1.0	int
,	O
&	O
psi_3	struct
)	O
;	O
if	O
(	O
aeps	double
>	O
0.001	int
)	O
gsl_sf_psi_n_e	function
(	O
4	int
,	O
N	int
+	O
1.0	int
,	O
&	O
psi_4	struct
)	O
;	O
if	O
(	O
aeps	double
>	O
0.005	int
)	O
gsl_sf_psi_n_e	function
(	O
5	int
,	O
N	int
+	O
1.0	int
,	O
&	O
psi_5	struct
)	O
;	O
if	O
(	O
aeps	double
>	O
0.01	int
)	O
gsl_sf_psi_n_e	function
(	O
6	int
,	O
N	int
+	O
1.0	int
,	O
&	O
psi_6	struct
)	O
;	O
c1	double
=	O
psi_0	struct
.	O
val	double
;	O
c2	double
=	O
psi_1	struct
.	O
val	double
/	O
2.0	int
;	O
c3	double
=	O
psi_2	struct
.	O
val	double
/	O
6.0	int
;	O
c4	double
=	O
psi_3	struct
.	O
val	double
/	O
24.0	int
;	O
c5	double
=	O
psi_4	struct
.	O
val	double
/	O
120.0	int
;	O
c6	double
=	O
psi_5	struct
.	O
val	double
/	O
720.0	int
;	O
c7	double
=	O
psi_6	struct
.	O
val	double
/	O
5040.0	int
;	O
lng_ser	double
=	O
c0	double
.	O
val	double
-	O
eps	double
*	O
(	O
c1	double
-	O
eps	double
*	O
(	O
c2	double
-	O
eps	double
*	O
(	O
c3	double
-	O
eps	double
*	O
(	O
c4	double
-	O
eps	double
*	O
(	O
c5	double
-	O
eps	double
*	O
(	O
c6	double
-	O
eps	double
*	O
c7	double
)	O
)	O
)	O
)	O
)	O
)	O
;	O
g	double
=	O
-	O
lng_ser	double
-	O
log	function
(	O
sin_ser	double
)	O
;	O
lng	pointer
->	O
val	double
=	O
g	double
-	O
log	function
(	O
fabs	function
(	O
eps	double
)	O
)	O
;	O
lng	pointer
->	O
err	double
=	O
c0	double
.	O
err	double
+	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
g	double
)	O
+	O
fabs	function
(	O
lng	pointer
->	O
val	double
)	O
)	O
;	O
*	O
sgn	pointer
=	O
(	O
GSL_IS_ODD	O
(	O
N	int
)	O
?	O
-	O
1.0	int
:	O
1.0	int
)	O
*	O
(	O
eps	double
>	O
0.0	int
?	O
1.0	int
:	O
-	O
1.0	int
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
inline	O
static	O
int	O
lngamma_1_pade	function
(	O
const	O
double	O
eps	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
double	O
n1	double
=	O
-	O
1.0017419282349508699871138440	int
;	O
const	O
double	O
n2	double
=	O
1.7364839209922879823280541733	int
;	O
const	O
double	O
d1	double
=	O
1.2433006018858751556055436011	int
;	O
const	O
double	O
d2	double
=	O
5.0456274100274010152489597514	int
;	O
const	O
double	O
num	double
=	O
(	O
eps	double
+	O
n1	double
)	O
*	O
(	O
eps	double
+	O
n2	double
)	O
;	O
const	O
double	O
den	double
=	O
(	O
eps	double
+	O
d1	double
)	O
*	O
(	O
eps	double
+	O
d2	double
)	O
;	O
const	O
double	O
pade	double
=	O
2.0816265188662692474880210318	int
*	O
num	double
/	O
den	double
;	O
const	O
double	O
c0	double
=	O
0.004785324257581753	int
;	O
const	O
double	O
c1	double
=	O
-	O
0.01192457083645441	int
;	O
const	O
double	O
c2	double
=	O
0.01931961413960498	int
;	O
const	O
double	O
c3	double
=	O
-	O
0.02594027398725020	int
;	O
const	O
double	O
c4	double
=	O
0.03141928755021455	int
;	O
const	O
double	O
eps5	double
=	O
eps	double
*	O
eps	double
*	O
eps	double
*	O
eps	double
*	O
eps	double
;	O
const	O
double	O
corr	double
=	O
eps5	double
*	O
(	O
c0	double
+	O
eps	double
*	O
(	O
c1	double
+	O
eps	double
*	O
(	O
c2	double
+	O
eps	double
*	O
(	O
c3	double
+	O
c4	double
*	O
eps	double
)	O
)	O
)	O
)	O
;	O
result	pointer
->	O
val	double
=	O
eps	double
*	O
(	O
pade	double
+	O
corr	double
)	O
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
inline	O
static	O
int	O
lngamma_2_pade	function
(	O
const	O
double	O
eps	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
double	O
n1	double
=	O
1.000895834786669227164446568	int
;	O
const	O
double	O
n2	double
=	O
4.209376735287755081642901277	int
;	O
const	O
double	O
d1	double
=	O
2.618851904903217274682578255	int
;	O
const	O
double	O
d2	double
=	O
10.85766559900983515322922936	int
;	O
const	O
double	O
num	double
=	O
(	O
eps	double
+	O
n1	double
)	O
*	O
(	O
eps	double
+	O
n2	double
)	O
;	O
const	O
double	O
den	double
=	O
(	O
eps	double
+	O
d1	double
)	O
*	O
(	O
eps	double
+	O
d2	double
)	O
;	O
const	O
double	O
pade	double
=	O
2.85337998765781918463568869	int
*	O
num	double
/	O
den	double
;	O
const	O
double	O
c0	double
=	O
0.0001139406357036744	int
;	O
const	O
double	O
c1	double
=	O
-	O
0.0001365435269792533	int
;	O
const	O
double	O
c2	double
=	O
0.0001067287169183665	int
;	O
const	O
double	O
c3	double
=	O
-	O
0.0000693271800931282	int
;	O
const	O
double	O
c4	double
=	O
0.0000407220927867950	int
;	O
const	O
double	O
eps5	double
=	O
eps	double
*	O
eps	double
*	O
eps	double
*	O
eps	double
*	O
eps	double
;	O
const	O
double	O
corr	double
=	O
eps5	double
*	O
(	O
c0	double
+	O
eps	double
*	O
(	O
c1	double
+	O
eps	double
*	O
(	O
c2	double
+	O
eps	double
*	O
(	O
c3	double
+	O
c4	double
*	O
eps	double
)	O
)	O
)	O
)	O
;	O
result	pointer
->	O
val	double
=	O
eps	double
*	O
(	O
pade	double
+	O
corr	double
)	O
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
gammastar_ser	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
double	O
y	double
=	O
1.0	int
/	O
(	O
x	double
*	O
x	double
)	O
;	O
const	O
double	O
c0	double
=	O
1.0	int
/	O
12.0	int
;	O
const	O
double	O
c1	double
=	O
-	O
1.0	int
/	O
360.0	int
;	O
const	O
double	O
c2	double
=	O
1.0	int
/	O
1260.0	int
;	O
const	O
double	O
c3	double
=	O
-	O
1.0	int
/	O
1680.0	int
;	O
const	O
double	O
c4	double
=	O
1.0	int
/	O
1188.0	int
;	O
const	O
double	O
c5	double
=	O
-	O
691.0	int
/	O
360360.0	int
;	O
const	O
double	O
c6	double
=	O
1.0	int
/	O
156.0	int
;	O
const	O
double	O
c7	double
=	O
-	O
3617.0	int
/	O
122400.0	int
;	O
const	O
double	O
ser	double
=	O
c0	double
+	O
y	double
*	O
(	O
c1	double
+	O
y	double
*	O
(	O
c2	double
+	O
y	double
*	O
(	O
c3	double
+	O
y	double
*	O
(	O
c4	double
+	O
y	double
*	O
(	O
c5	double
+	O
y	double
*	O
(	O
c6	double
+	O
y	double
*	O
c7	double
)	O
)	O
)	O
)	O
)	O
)	O
;	O
result	pointer
->	O
val	double
=	O
exp	function
(	O
ser	double
/	O
x	double
)	O
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
result	pointer
->	O
val	double
*	O
GSL_MAX_DBL	function
(	O
1.0	int
,	O
ser	double
/	O
x	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
double	O
gamma_5_10_data	array
[	O
24	int
]	O
=	O
{	O
-	O
1.5285594096661578881275075214	int
,	O
4.8259152300595906319768555035	int
,	O
0.2277712320977614992970601978	int
,	O
-	O
0.0138867665685617873604917300	int
,	O
0.0012704876495201082588139723	int
,	O
-	O
0.0001393841240254993658962470	int
,	O
0.0000169709242992322702260663	int
,	O
-	O
2.2108528820210580075775889168e-06	int
,	O
3.0196602854202309805163918716e-07	int
,	O
-	O
4.2705675000079118380587357358e-08	int
,	O
6.2026423818051402794663551945e-09	int
,	O
-	O
9.1993973208880910416311405656e-10	int
,	O
1.3875551258028145778301211638e-10	int
,	O
-	O
2.1218861491906788718519522978e-11	int
,	O
3.2821736040381439555133562600e-12	int
,	O
-	O
5.1260001009953791220611135264e-13	int
,	O
8.0713532554874636696982146610e-14	int
,	O
-	O
1.2798522376569209083811628061e-14	int
,	O
2.0417711600852502310258808643e-15	int
,	O
-	O
3.2745239502992355776882614137e-16	int
,	O
5.2759418422036579482120897453e-17	int
,	O
-	O
8.5354147151695233960425725513e-18	int
,	O
1.3858639703888078291599886143e-18	int
,	O
-	O
2.2574398807738626571560124396e-19	int
}	O
;	O
static	O
const	O
cheb_series	struct
gamma_5_10_cs	struct
=	O
{	O
gamma_5_10_data	array
,	O
23	int
,	O
-	O
1	int
,	O
1	int
,	O
11	int
}	O
;	O
static	O
int	O
gamma_xgthalf	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
==	O
0.5	int
)	O
{	O
result	pointer
->	O
val	double
=	O
1.77245385090551602729817	int
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
result	pointer
->	O
val	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<=	O
(	O
GSL_SF_FACT_NMAX	int
+	O
1.0	int
)	O
&&	O
x	double
==	O
floor	function
(	O
x	double
)	O
)	O
{	O
int	O
n	int
=	O
(	O
int	O
)	O
floor	function
(	O
x	double
)	O
;	O
result	pointer
->	O
val	double
=	O
fact_table	array
[	O
n	int
-	O
1	int
]	O
.	O
f	pointer
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
result	pointer
->	O
val	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
fabs	function
(	O
x	double
-	O
1.0	int
)	O
<	O
0.01	int
)	O
{	O
const	O
double	O
eps	double
=	O
x	double
-	O
1.0	int
;	O
const	O
double	O
c1	double
=	O
0.4227843350984671394	int
;	O
const	O
double	O
c2	double
=	O
-	O
0.01094400467202744461	int
;	O
const	O
double	O
c3	double
=	O
0.09252092391911371098	int
;	O
const	O
double	O
c4	double
=	O
-	O
0.018271913165599812664	int
;	O
const	O
double	O
c5	double
=	O
0.018004931096854797895	int
;	O
const	O
double	O
c6	double
=	O
-	O
0.006850885378723806846	int
;	O
const	O
double	O
c7	double
=	O
0.003998239557568466030	int
;	O
result	pointer
->	O
val	double
=	O
1.0	int
/	O
x	double
+	O
eps	double
*	O
(	O
c1	double
+	O
eps	double
*	O
(	O
c2	double
+	O
eps	double
*	O
(	O
c3	double
+	O
eps	double
*	O
(	O
c4	double
+	O
eps	double
*	O
(	O
c5	double
+	O
eps	double
*	O
(	O
c6	double
+	O
eps	double
*	O
c7	double
)	O
)	O
)	O
)	O
)	O
)	O
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
fabs	function
(	O
x	double
-	O
2.0	int
)	O
<	O
0.01	int
)	O
{	O
const	O
double	O
eps	double
=	O
x	double
-	O
2.0	int
;	O
const	O
double	O
c1	double
=	O
0.4227843350984671394	int
;	O
const	O
double	O
c2	double
=	O
0.4118403304264396948	int
;	O
const	O
double	O
c3	double
=	O
0.08157691924708626638	int
;	O
const	O
double	O
c4	double
=	O
0.07424901075351389832	int
;	O
const	O
double	O
c5	double
=	O
-	O
0.00026698206874501476832	int
;	O
const	O
double	O
c6	double
=	O
0.011154045718130991049	int
;	O
const	O
double	O
c7	double
=	O
-	O
0.002852645821155340816	int
;	O
const	O
double	O
c8	double
=	O
0.0021039333406973880085	int
;	O
result	pointer
->	O
val	double
=	O
1.0	int
+	O
eps	double
*	O
(	O
c1	double
+	O
eps	double
*	O
(	O
c2	double
+	O
eps	double
*	O
(	O
c3	double
+	O
eps	double
*	O
(	O
c4	double
+	O
eps	double
*	O
(	O
c5	double
+	O
eps	double
*	O
(	O
c6	double
+	O
eps	double
*	O
(	O
c7	double
+	O
eps	double
*	O
c8	double
)	O
)	O
)	O
)	O
)	O
)	O
)	O
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
5.0	int
)	O
{	O
gsl_sf_result	struct
lg	struct
;	O
lngamma_lanczos	function
(	O
x	double
,	O
&	O
lg	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
exp	function
(	O
lg	struct
.	O
val	double
)	O
;	O
result	pointer
->	O
err	double
=	O
result	pointer
->	O
val	double
*	O
(	O
lg	struct
.	O
err	double
+	O
2.0	int
*	O
GSL_DBL_EPSILON	int
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
10.0	int
)	O
{	O
const	O
double	O
gamma_8	double
=	O
5040.0	int
;	O
const	O
double	O
t	double
=	O
(	O
2.0	int
*	O
x	double
-	O
15.0	int
)	O
/	O
5.0	int
;	O
gsl_sf_result	struct
c	pointer
;	O
cheb_eval_e	function
(	O
&	O
gamma_5_10_cs	struct
,	O
t	double
,	O
&	O
c	pointer
)	O
;	O
result	pointer
->	O
val	double
=	O
exp	function
(	O
c	pointer
.	O
val	double
)	O
*	O
gamma_8	double
;	O
result	pointer
->	O
err	double
=	O
result	pointer
->	O
val	double
*	O
c	pointer
.	O
err	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
result	pointer
->	O
val	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
GSL_SF_GAMMA_XMAX	int
)	O
{	O
double	O
p	double
=	O
pow	function
(	O
x	double
,	O
0.5	int
*	O
x	double
)	O
;	O
double	O
e	int
=	O
exp	function
(	O
-	O
x	double
)	O
;	O
double	O
q	double
=	O
(	O
p	double
*	O
e	int
)	O
*	O
p	double
;	O
double	O
pre	double
=	O
M_SQRT2	int
*	O
M_SQRTPI	int
*	O
q	double
/	O
sqrt	function
(	O
x	double
)	O
;	O
gsl_sf_result	struct
gstar	struct
;	O
int	O
stat_gs	int
=	O
gammastar_ser	function
(	O
x	double
,	O
&	O
gstar	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
pre	double
*	O
gstar	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
(	O
x	double
+	O
2.5	int
)	O
*	O
GSL_DBL_EPSILON	int
*	O
result	pointer
->	O
val	double
;	O
return	O
stat_gs	int
;	O
}	O
else	O
{	O
OVERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
}	O
int	O
gsl_sf_lngamma_e	function
(	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
fabs	function
(	O
x	double
-	O
1.0	int
)	O
<	O
0.01	int
)	O
{	O
int	O
stat	int
=	O
lngamma_1_pade	function
(	O
x	double
-	O
1.0	int
,	O
result	pointer
)	O
;	O
result	pointer
->	O
err	double
*=	O
1.0	int
/	O
(	O
GSL_DBL_EPSILON	int
+	O
fabs	function
(	O
x	double
-	O
1.0	int
)	O
)	O
;	O
return	O
stat	int
;	O
}	O
else	O
if	O
(	O
fabs	function
(	O
x	double
-	O
2.0	int
)	O
<	O
0.01	int
)	O
{	O
int	O
stat	int
=	O
lngamma_2_pade	function
(	O
x	double
-	O
2.0	int
,	O
result	pointer
)	O
;	O
result	pointer
->	O
err	double
*=	O
1.0	int
/	O
(	O
GSL_DBL_EPSILON	int
+	O
fabs	function
(	O
x	double
-	O
2.0	int
)	O
)	O
;	O
return	O
stat	int
;	O
}	O
else	O
if	O
(	O
x	double
>=	O
0.5	int
)	O
{	O
return	O
lngamma_lanczos	function
(	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
fabs	function
(	O
x	double
)	O
<	O
0.02	int
)	O
{	O
double	O
sgn	pointer
;	O
return	O
lngamma_sgn_0	function
(	O
x	double
,	O
result	pointer
,	O
&	O
sgn	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
>	O
-	O
0.5	int
/	O
(	O
GSL_DBL_EPSILON	int
*	O
M_PI	int
)	O
)	O
{	O
double	O
z	double
=	O
1.0	int
-	O
x	double
;	O
double	O
s	double
=	O
sin	function
(	O
M_PI	int
*	O
z	double
)	O
;	O
double	O
as	double
=	O
fabs	function
(	O
s	double
)	O
;	O
if	O
(	O
s	double
==	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
as	double
<	O
M_PI	int
*	O
0.015	int
)	O
{	O
if	O
(	O
x	double
<	O
INT_MIN	O
+	O
2.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
GSL_ERROR	O
(	O
"error"	pointer
,	O
GSL_EROUND	int
)	O
;	O
}	O
else	O
{	O
int	O
N	int
=	O
-	O
(	O
int	O
)	O
(	O
x	double
-	O
0.5	int
)	O
;	O
double	O
eps	double
=	O
x	double
+	O
N	int
;	O
double	O
sgn	pointer
;	O
return	O
lngamma_sgn_sing	function
(	O
N	int
,	O
eps	double
,	O
result	pointer
,	O
&	O
sgn	pointer
)	O
;	O
}	O
}	O
else	O
{	O
gsl_sf_result	struct
lg_z	struct
;	O
lngamma_lanczos	function
(	O
z	double
,	O
&	O
lg_z	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
M_LNPI	int
-	O
(	O
log	function
(	O
as	double
)	O
+	O
lg_z	struct
.	O
val	double
)	O
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
+	O
lg_z	struct
.	O
err	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
else	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
GSL_ERROR	O
(	O
"error"	pointer
,	O
GSL_EROUND	int
)	O
;	O
}	O
}	O
int	O
gsl_sf_lngamma_sgn_e	function
(	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result_lg	pointer
,	O
double	O
*	O
sgn	pointer
)	O
{	O
if	O
(	O
fabs	function
(	O
x	double
-	O
1.0	int
)	O
<	O
0.01	int
)	O
{	O
int	O
stat	int
=	O
lngamma_1_pade	function
(	O
x	double
-	O
1.0	int
,	O
result_lg	pointer
)	O
;	O
result_lg	pointer
->	O
err	double
*=	O
1.0	int
/	O
(	O
GSL_DBL_EPSILON	int
+	O
fabs	function
(	O
x	double
-	O
1.0	int
)	O
)	O
;	O
*	O
sgn	pointer
=	O
1.0	int
;	O
return	O
stat	int
;	O
}	O
else	O
if	O
(	O
fabs	function
(	O
x	double
-	O
2.0	int
)	O
<	O
0.01	int
)	O
{	O
int	O
stat	int
=	O
lngamma_2_pade	function
(	O
x	double
-	O
2.0	int
,	O
result_lg	pointer
)	O
;	O
result_lg	pointer
->	O
err	double
*=	O
1.0	int
/	O
(	O
GSL_DBL_EPSILON	int
+	O
fabs	function
(	O
x	double
-	O
2.0	int
)	O
)	O
;	O
*	O
sgn	pointer
=	O
1.0	int
;	O
return	O
stat	int
;	O
}	O
else	O
if	O
(	O
x	double
>=	O
0.5	int
)	O
{	O
*	O
sgn	pointer
=	O
1.0	int
;	O
return	O
lngamma_lanczos	function
(	O
x	double
,	O
result_lg	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
*	O
sgn	pointer
=	O
0.0	int
;	O
DOMAIN_ERROR	O
(	O
result_lg	pointer
)	O
;	O
}	O
else	O
if	O
(	O
fabs	function
(	O
x	double
)	O
<	O
0.02	int
)	O
{	O
return	O
lngamma_sgn_0	function
(	O
x	double
,	O
result_lg	pointer
,	O
sgn	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
>	O
-	O
0.5	int
/	O
(	O
GSL_DBL_EPSILON	int
*	O
M_PI	int
)	O
)	O
{	O
double	O
z	double
=	O
1.0	int
-	O
x	double
;	O
double	O
s	double
=	O
sin	function
(	O
M_PI	int
*	O
x	double
)	O
;	O
double	O
as	double
=	O
fabs	function
(	O
s	double
)	O
;	O
if	O
(	O
s	double
==	O
0.0	int
)	O
{	O
*	O
sgn	pointer
=	O
0.0	int
;	O
DOMAIN_ERROR	O
(	O
result_lg	pointer
)	O
;	O
}	O
else	O
if	O
(	O
as	double
<	O
M_PI	int
*	O
0.015	int
)	O
{	O
if	O
(	O
x	double
<	O
INT_MIN	O
+	O
2.0	int
)	O
{	O
result_lg	pointer
->	O
val	double
=	O
0.0	int
;	O
result_lg	pointer
->	O
err	double
=	O
0.0	int
;	O
*	O
sgn	pointer
=	O
0.0	int
;	O
GSL_ERROR	O
(	O
"error"	pointer
,	O
GSL_EROUND	int
)	O
;	O
}	O
else	O
{	O
int	O
N	int
=	O
-	O
(	O
int	O
)	O
(	O
x	double
-	O
0.5	int
)	O
;	O
double	O
eps	double
=	O
x	double
+	O
N	int
;	O
return	O
lngamma_sgn_sing	function
(	O
N	int
,	O
eps	double
,	O
result_lg	pointer
,	O
sgn	pointer
)	O
;	O
}	O
}	O
else	O
{	O
gsl_sf_result	struct
lg_z	struct
;	O
lngamma_lanczos	function
(	O
z	double
,	O
&	O
lg_z	struct
)	O
;	O
*	O
sgn	pointer
=	O
(	O
s	double
>	O
0.0	int
?	O
1.0	int
:	O
-	O
1.0	int
)	O
;	O
result_lg	pointer
->	O
val	double
=	O
M_LNPI	int
-	O
(	O
log	function
(	O
as	double
)	O
+	O
lg_z	struct
.	O
val	double
)	O
;	O
result_lg	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result_lg	pointer
->	O
val	double
)	O
+	O
lg_z	struct
.	O
err	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
else	O
{	O
result_lg	pointer
->	O
val	double
=	O
0.0	int
;	O
result_lg	pointer
->	O
err	double
=	O
0.0	int
;	O
*	O
sgn	pointer
=	O
0.0	int
;	O
GSL_ERROR	O
(	O
"x too large to extract fraction part"	pointer
,	O
GSL_EROUND	int
)	O
;	O
}	O
}	O
int	O
gsl_sf_gamma_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
<	O
0.5	int
)	O
{	O
int	O
rint_x	int
=	O
(	O
int	O
)	O
floor	function
(	O
x	double
+	O
0.5	int
)	O
;	O
double	O
f_x	double
=	O
x	double
-	O
rint_x	int
;	O
double	O
sgn_gamma	double
=	O
(	O
GSL_IS_EVEN	O
(	O
rint_x	int
)	O
?	O
1.0	int
:	O
-	O
1.0	int
)	O
;	O
double	O
sin_term	double
=	O
sgn_gamma	double
*	O
sin	function
(	O
M_PI	int
*	O
f_x	double
)	O
/	O
M_PI	int
;	O
if	O
(	O
sin_term	double
==	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
>	O
-	O
169.0	int
)	O
{	O
gsl_sf_result	struct
g	double
;	O
gamma_xgthalf	function
(	O
1.0	int
-	O
x	double
,	O
&	O
g	double
)	O
;	O
if	O
(	O
fabs	function
(	O
sin_term	double
)	O
*	O
g	double
.	O
val	double
*	O
GSL_DBL_MIN	int
<	O
1.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
/	O
(	O
sin_term	double
*	O
g	double
.	O
val	double
)	O
;	O
result	pointer
->	O
err	double
=	O
fabs	function
(	O
g	double
.	O
err	double
/	O
g	double
.	O
val	double
)	O
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
UNDERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
}	O
else	O
{	O
gsl_sf_result	struct
lng	pointer
;	O
double	O
sgn	pointer
;	O
int	O
stat_lng	int
=	O
gsl_sf_lngamma_sgn_e	function
(	O
x	double
,	O
&	O
lng	pointer
,	O
&	O
sgn	pointer
)	O
;	O
int	O
stat_e	int
=	O
gsl_sf_exp_mult_err_e	function
(	O
lng	pointer
.	O
val	double
,	O
lng	pointer
.	O
err	double
,	O
sgn	pointer
,	O
0.0	int
,	O
result	pointer
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_e	int
,	O
stat_lng	int
)	O
;	O
}	O
}	O
else	O
{	O
return	O
gamma_xgthalf	function
(	O
x	double
,	O
result	pointer
)	O
;	O
}	O
}	O
int	O
gsl_sf_gammastar_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
<=	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
0.5	int
)	O
{	O
gsl_sf_result	struct
lg	struct
;	O
const	O
int	O
stat_lg	int
=	O
gsl_sf_lngamma_e	function
(	O
x	double
,	O
&	O
lg	struct
)	O
;	O
const	O
double	O
lx	double
=	O
log	function
(	O
x	double
)	O
;	O
const	O
double	O
c	pointer
=	O
0.5	int
*	O
(	O
M_LN2	int
+	O
M_LNPI	int
)	O
;	O
const	O
double	O
lnr_val	double
=	O
lg	struct
.	O
val	double
-	O
(	O
x	double
-	O
0.5	int
)	O
*	O
lx	double
+	O
x	double
-	O
c	pointer
;	O
const	O
double	O
lnr_err	double
=	O
lg	struct
.	O
err	double
+	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
(	O
x	double
+	O
0.5	int
)	O
*	O
fabs	function
(	O
lx	double
)	O
+	O
c	pointer
)	O
;	O
const	O
int	O
stat_e	int
=	O
gsl_sf_exp_err_e	function
(	O
lnr_val	double
,	O
lnr_err	double
,	O
result	pointer
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_lg	int
,	O
stat_e	int
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
2.0	int
)	O
{	O
const	O
double	O
t	double
=	O
4.0	int
/	O
3.0	int
*	O
(	O
x	double
-	O
0.5	int
)	O
-	O
1.0	int
;	O
return	O
cheb_eval_e	function
(	O
&	O
gstar_a_cs	struct
,	O
t	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
10.0	int
)	O
{	O
const	O
double	O
t	double
=	O
0.25	int
*	O
(	O
x	double
-	O
2.0	int
)	O
-	O
1.0	int
;	O
gsl_sf_result	struct
c	pointer
;	O
cheb_eval_e	function
(	O
&	O
gstar_b_cs	struct
,	O
t	double
,	O
&	O
c	pointer
)	O
;	O
result	pointer
->	O
val	double
=	O
c	pointer
.	O
val	double
/	O
(	O
x	double
*	O
x	double
)	O
+	O
1.0	int
+	O
1.0	int
/	O
(	O
12.0	int
*	O
x	double
)	O
;	O
result	pointer
->	O
err	double
=	O
c	pointer
.	O
err	double
/	O
(	O
x	double
*	O
x	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
1.0	int
/	O
GSL_ROOT4_DBL_EPSILON	int
)	O
{	O
return	O
gammastar_ser	function
(	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
1.0	int
/	O
GSL_DBL_EPSILON	int
)	O
{	O
const	O
double	O
xi	double
=	O
1.0	int
/	O
x	double
;	O
result	pointer
->	O
val	double
=	O
1.0	int
+	O
xi	double
/	O
12.0	int
*	O
(	O
1.0	int
+	O
xi	double
/	O
24.0	int
*	O
(	O
1.0	int
-	O
xi	double
*	O
(	O
139.0	int
/	O
180.0	int
+	O
571.0	int
/	O
8640.0	int
*	O
xi	double
)	O
)	O
)	O
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
;	O
result	pointer
->	O
err	double
=	O
1.0	int
/	O
x	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_gammainv_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
<=	O
0.0	int
&&	O
x	double
==	O
floor	function
(	O
x	double
)	O
)	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
0.5	int
)	O
{	O
gsl_sf_result	struct
lng	pointer
;	O
double	O
sgn	pointer
;	O
int	O
stat_lng	int
=	O
gsl_sf_lngamma_sgn_e	function
(	O
x	double
,	O
&	O
lng	pointer
,	O
&	O
sgn	pointer
)	O
;	O
if	O
(	O
stat_lng	int
==	O
GSL_EDOM	int
)	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
stat_lng	int
!=	O
GSL_SUCCESS	int
)	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
stat_lng	int
;	O
}	O
else	O
{	O
return	O
gsl_sf_exp_mult_err_e	function
(	O
-	O
lng	pointer
.	O
val	double
,	O
lng	pointer
.	O
err	double
,	O
sgn	pointer
,	O
0.0	int
,	O
result	pointer
)	O
;	O
}	O
}	O
else	O
{	O
gsl_sf_result	struct
g	double
;	O
int	O
stat_g	int
=	O
gamma_xgthalf	function
(	O
x	double
,	O
&	O
g	double
)	O
;	O
if	O
(	O
stat_g	int
==	O
GSL_EOVRFLW	int
)	O
{	O
UNDERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
/	O
g	double
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
fabs	function
(	O
g	double
.	O
err	double
/	O
g	double
.	O
val	double
)	O
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
CHECK_UNDERFLOW	O
(	O
result	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
}	O
int	O
gsl_sf_lngamma_complex_e	function
(	O
double	O
zr	double
,	O
double	O
zi	double
,	O
gsl_sf_result	struct
*	O
lnr	pointer
,	O
gsl_sf_result	struct
*	O
arg	pointer
)	O
{	O
if	O
(	O
zr	double
<=	O
0.5	int
)	O
{	O
double	O
x	double
=	O
1.0	int
-	O
zr	double
;	O
double	O
y	double
=	O
-	O
zi	double
;	O
gsl_sf_result	struct
a	double
,	O
b	double
;	O
gsl_sf_result	struct
lnsin_r	struct
,	O
lnsin_i	struct
;	O
int	O
stat_l	int
=	O
lngamma_lanczos_complex	function
(	O
x	double
,	O
y	double
,	O
&	O
a	double
,	O
&	O
b	double
)	O
;	O
int	O
stat_s	int
=	O
gsl_sf_complex_logsin_e	function
(	O
M_PI	int
*	O
zr	double
,	O
M_PI	int
*	O
zi	double
,	O
&	O
lnsin_r	struct
,	O
&	O
lnsin_i	struct
)	O
;	O
if	O
(	O
stat_s	int
==	O
GSL_SUCCESS	int
)	O
{	O
int	O
stat_r	int
;	O
lnr	pointer
->	O
val	double
=	O
M_LNPI	int
-	O
lnsin_r	struct
.	O
val	double
-	O
a	double
.	O
val	double
;	O
lnr	pointer
->	O
err	double
=	O
lnsin_r	struct
.	O
err	double
+	O
a	double
.	O
err	double
+	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
lnr	pointer
->	O
val	double
)	O
;	O
arg	pointer
->	O
val	double
=	O
-	O
lnsin_i	struct
.	O
val	double
-	O
b	double
.	O
val	double
;	O
arg	pointer
->	O
err	double
=	O
lnsin_i	struct
.	O
err	double
+	O
b	double
.	O
err	double
+	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
arg	pointer
->	O
val	double
)	O
;	O
stat_r	int
=	O
gsl_sf_angle_restrict_symm_e	function
(	O
&	O
(	O
arg	pointer
->	O
val	double
)	O
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_r	int
,	O
stat_l	int
)	O
;	O
}	O
else	O
{	O
DOMAIN_ERROR_2	O
(	O
lnr	pointer
,	O
arg	pointer
)	O
;	O
}	O
}	O
else	O
{	O
return	O
lngamma_lanczos_complex	function
(	O
zr	double
,	O
zi	double
,	O
lnr	pointer
,	O
arg	pointer
)	O
;	O
}	O
}	O
int	O
gsl_sf_taylorcoeff_e	function
(	O
const	O
int	O
n	int
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
<	O
0.0	int
||	O
n	int
<	O
0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
n	int
==	O
0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
n	int
==	O
1	int
)	O
{	O
result	pointer
->	O
val	double
=	O
x	double
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
const	O
double	O
log2pi	double
=	O
M_LNPI	int
+	O
M_LN2	int
;	O
const	O
double	O
ln_test	double
=	O
n	int
*	O
(	O
log	function
(	O
x	double
)	O
+	O
1.0	int
)	O
+	O
1.0	int
-	O
(	O
n	int
+	O
0.5	int
)	O
*	O
log	function
(	O
n	int
+	O
1.0	int
)	O
+	O
0.5	int
*	O
log2pi	double
;	O
if	O
(	O
ln_test	double
<	O
GSL_LOG_DBL_MIN	O
+	O
1.0	int
)	O
{	O
UNDERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
ln_test	double
>	O
GSL_LOG_DBL_MAX	int
-	O
1.0	int
)	O
{	O
OVERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
{	O
double	O
product	double
=	O
1.0	int
;	O
int	O
k	int
;	O
for	O
(	O
k	int
=	O
1	int
;	O
k	int
<=	O
n	int
;	O
k	int
++	O
)	O
{	O
product	double
*=	O
(	O
x	double
/	O
k	int
)	O
;	O
}	O
result	pointer
->	O
val	double
=	O
product	double
;	O
result	pointer
->	O
err	double
=	O
n	int
*	O
GSL_DBL_EPSILON	int
*	O
product	double
;	O
CHECK_UNDERFLOW	O
(	O
result	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
}	O
int	O
gsl_sf_fact_e	function
(	O
const	O
unsigned	O
int	O
n	int
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
n	int
<	O
18	int
)	O
{	O
result	pointer
->	O
val	double
=	O
fact_table	array
[	O
n	int
]	O
.	O
f	pointer
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
n	int
<=	O
GSL_SF_FACT_NMAX	int
)	O
{	O
result	pointer
->	O
val	double
=	O
fact_table	array
[	O
n	int
]	O
.	O
f	pointer
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
OVERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
}	O
int	O
gsl_sf_doublefact_e	function
(	O
const	O
unsigned	O
int	O
n	int
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
n	int
<	O
26	int
)	O
{	O
result	pointer
->	O
val	double
=	O
doub_fact_table	array
[	O
n	int
]	O
.	O
f	pointer
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
n	int
<=	O
GSL_SF_DOUBLEFACT_NMAX	int
)	O
{	O
result	pointer
->	O
val	double
=	O
doub_fact_table	array
[	O
n	int
]	O
.	O
f	pointer
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
OVERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
}	O
int	O
gsl_sf_lnfact_e	function
(	O
const	O
unsigned	O
int	O
n	int
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
n	int
<=	O
GSL_SF_FACT_NMAX	int
)	O
{	O
result	pointer
->	O
val	double
=	O
log	function
(	O
fact_table	array
[	O
n	int
]	O
.	O
f	pointer
)	O
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
gsl_sf_lngamma_e	function
(	O
n	int
+	O
1.0	int
,	O
result	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_lndoublefact_e	function
(	O
const	O
unsigned	O
int	O
n	int
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
n	int
<=	O
GSL_SF_DOUBLEFACT_NMAX	int
)	O
{	O
result	pointer
->	O
val	double
=	O
log	function
(	O
doub_fact_table	array
[	O
n	int
]	O
.	O
f	pointer
)	O
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
GSL_IS_ODD	O
(	O
n	int
)	O
)	O
{	O
gsl_sf_result	struct
lg	struct
;	O
gsl_sf_lngamma_e	function
(	O
0.5	int
*	O
(	O
n	int
+	O
2.0	int
)	O
,	O
&	O
lg	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
0.5	int
*	O
(	O
n	int
+	O
1.0	int
)	O
*	O
M_LN2	int
-	O
0.5	int
*	O
M_LNPI	int
+	O
lg	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
+	O
lg	struct
.	O
err	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct
lg	struct
;	O
gsl_sf_lngamma_e	function
(	O
0.5	int
*	O
n	int
+	O
1.0	int
,	O
&	O
lg	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
0.5	int
*	O
n	int
*	O
M_LN2	int
+	O
lg	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
+	O
lg	struct
.	O
err	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_lnchoose_e	function
(	O
unsigned	O
int	O
n	int
,	O
unsigned	O
int	O
m	int
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
m	int
>	O
n	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
m	int
==	O
n	int
||	O
m	int
==	O
0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct
nf	struct
;	O
gsl_sf_result	struct
mf	struct
;	O
gsl_sf_result	struct
nmmf	struct
;	O
if	O
(	O
m	int
*	O
2	int
>	O
n	int
)	O
m	int
=	O
n	int
-	O
m	int
;	O
gsl_sf_lnfact_e	function
(	O
n	int
,	O
&	O
nf	struct
)	O
;	O
gsl_sf_lnfact_e	function
(	O
m	int
,	O
&	O
mf	struct
)	O
;	O
gsl_sf_lnfact_e	function
(	O
n	int
-	O
m	int
,	O
&	O
nmmf	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
nf	struct
.	O
val	double
-	O
mf	struct
.	O
val	double
-	O
nmmf	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
nf	struct
.	O
err	double
+	O
mf	struct
.	O
err	double
+	O
nmmf	struct
.	O
err	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_choose_e	function
(	O
unsigned	O
int	O
n	int
,	O
unsigned	O
int	O
m	int
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
m	int
>	O
n	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
m	int
==	O
n	int
||	O
m	int
==	O
0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
n	int
<=	O
GSL_SF_FACT_NMAX	int
)	O
{	O
result	pointer
->	O
val	double
=	O
(	O
fact_table	array
[	O
n	int
]	O
.	O
f	pointer
/	O
fact_table	array
[	O
m	int
]	O
.	O
f	pointer
)	O
/	O
fact_table	array
[	O
n	int
-	O
m	int
]	O
.	O
f	pointer
;	O
result	pointer
->	O
err	double
=	O
6.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
if	O
(	O
m	int
*	O
2	int
<	O
n	int
)	O
m	int
=	O
n	int
-	O
m	int
;	O
if	O
(	O
n	int
-	O
m	int
<	O
64	int
)	O
{	O
double	O
prod	double
=	O
1.0	int
;	O
unsigned	O
int	O
k	int
;	O
for	O
(	O
k	int
=	O
n	int
;	O
k	int
>=	O
m	int
+	O
1	int
;	O
k	int
--	O
)	O
{	O
double	O
tk	double
=	O
(	O
double	O
)	O
k	int
/	O
(	O
double	O
)	O
(	O
k	int
-	O
m	int
)	O
;	O
if	O
(	O
tk	double
>	O
GSL_DBL_MAX	int
/	O
prod	double
)	O
{	O
OVERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
prod	double
*=	O
tk	double
;	O
}	O
result	pointer
->	O
val	double
=	O
prod	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
prod	double
*	O
fabs	function
(	O
n	int
-	O
m	int
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct
lc	struct
;	O
const	O
int	O
stat_lc	int
=	O
gsl_sf_lnchoose_e	function
(	O
n	int
,	O
m	int
,	O
&	O
lc	struct
)	O
;	O
const	O
int	O
stat_e	int
=	O
gsl_sf_exp_err_e	function
(	O
lc	struct
.	O
val	double
,	O
lc	struct
.	O
err	double
,	O
result	pointer
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_lc	int
,	O
stat_e	int
)	O
;	O
}	O
}	O
}	O
double	O
gsl_sf_fact	function
(	O
const	O
unsigned	O
int	O
n	int
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_fact_e	function
(	O
n	int
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_lnfact	function
(	O
const	O
unsigned	O
int	O
n	int
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_lnfact_e	function
(	O
n	int
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_doublefact	function
(	O
const	O
unsigned	O
int	O
n	int
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_doublefact_e	function
(	O
n	int
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_lndoublefact	function
(	O
const	O
unsigned	O
int	O
n	int
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_lndoublefact_e	function
(	O
n	int
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_lngamma	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_lngamma_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_gamma	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_gamma_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_gammastar	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_gammastar_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_gammainv	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_gammainv_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_taylorcoeff	function
(	O
const	O
int	O
n	int
,	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_taylorcoeff_e	function
(	O
n	int
,	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_choose	function
(	O
unsigned	O
int	O
n	int
,	O
unsigned	O
int	O
m	int
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_choose_e	function
(	O
n	int
,	O
m	int
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_lnchoose	function
(	O
unsigned	O
int	O
n	int
,	O
unsigned	O
int	O
m	int
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_lnchoose_e	function
(	O
n	int
,	O
m	int
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
