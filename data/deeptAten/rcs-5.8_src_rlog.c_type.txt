struct	O
top	struct
*	O
top	struct
;	O
struct	O
revrange	struct
{	O
char	O
const	O
*	O
beg	pointer
;	O
char	O
const	O
*	O
end	pointer
;	O
int	O
nfield	int
;	O
}	O
;	O
struct	O
daterange	struct
{	O
char	O
beg	pointer
[	O
datesize	O
]	O
;	O
char	O
end	pointer
[	O
datesize	O
]	O
;	O
bool	bool
oep	bool
;	O
}	O
;	O
static	O
char	O
const	O
*	O
insDelFormat	pointer
;	O
static	O
bool	bool
branchflag	bool
;	O
static	O
bool	bool
lockflag	bool
;	O
static	O
struct	O
link	struct
*	O
datelist	pointer
,	O
*	O
duelst	pointer
;	O
static	O
struct	O
link	struct
*	O
revlist	pointer
,	O
*	O
Revlst	pointer
;	O
static	O
struct	O
link	struct
*	O
authorlist	pointer
;	O
static	O
struct	O
link	struct
*	O
lockerlist	pointer
;	O
static	O
struct	O
link	struct
*	O
statelist	pointer
;	O
static	O
int	O
exitstatus	int
;	O
static	O
void	O
cleanup	function
(	O
void	O
)	O
{	O
if	O
(	O
FLOW	O
(	O
erroneousp	bool
)	O
)	O
exitstatus	int
=	O
EXIT_FAILURE	int
;	O
fro_zclose	function
(	O
&	O
FLOW	O
(	O
from	pointer
)	O
)	O
;	O
}	O
static	O
exiting	O
void	O
exiterr	pointer
(	O
void	O
)	O
{	O
exit_failurefully	function
(	O
)	O
;	O
}	O
static	O
void	O
getlocker	function
(	O
char	O
*	O
argv	pointer
)	O
{	O
register	O
char	O
c	int
;	O
struct	O
link	struct
box	pointer
,	O
*	O
tp	pointer
;	O
argv	pointer
--	O
;	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
argv	pointer
)	O
==	O
','	O
||	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
';'	O
)	O
continue	O
;	O
if	O
(	O
c	int
==	O
'\0'	O
)	O
{	O
lockerlist	pointer
=	O
NULL	O
;	O
return	O
;	O
}	O
box	pointer
.	O
next	pointer
=	O
lockerlist	pointer
;	O
tp	pointer
=	O
&	O
box	pointer
;	O
while	O
(	O
c	int
!=	O
'\0'	O
)	O
{	O
tp	pointer
=	O
extend	function
(	O
tp	pointer
,	O
argv	pointer
,	O
PLEXUS	O
)	O
;	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
argv	pointer
)	O
&&	O
c	int
!=	O
','	O
&&	O
c	int
!=	O
' '	O
&&	O
c	int
!=	O
'\t'	O
&&	O
c	int
!=	O
'\n'	O
&&	O
c	int
!=	O
';'	O
)	O
continue	O
;	O
*	O
argv	pointer
=	O
'\0'	O
;	O
if	O
(	O
c	int
==	O
'\0'	O
)	O
{	O
lockerlist	pointer
=	O
box	pointer
.	O
next	pointer
;	O
return	O
;	O
}	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
argv	pointer
)	O
==	O
','	O
||	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
';'	O
)	O
continue	O
;	O
}	O
}	O
static	O
long	O
read_positive_integer	function
(	O
char	O
const	O
*	O
*	O
p	pointer
)	O
{	O
long	O
rv	long
;	O
char	O
*	O
end	pointer
;	O
errno	O
=	O
0	int
;	O
if	O
(	O
1	int
>	O
(	O
rv	long
=	O
strtol	function
(	O
*	O
p	pointer
,	O
&	O
end	pointer
,	O
10	int
)	O
)	O
)	O
RFATAL	O
(	O
"non-positive integer"	pointer
)	O
;	O
if	O
(	O
ERANGE	int
==	O
errno	O
)	O
RFATAL	O
(	O
"bad integer"	pointer
)	O
;	O
*	O
p	pointer
=	O
end	pointer
;	O
return	O
rv	long
;	O
}	O
static	O
void	O
count_a_d	function
(	O
long	O
*	O
a	pointer
,	O
long	O
*	O
d	pointer
,	O
struct	O
atat	pointer
*	O
edits	pointer
)	O
{	O
struct	O
cbuf	struct
s	pointer
=	O
string_from_atat	function
(	O
SINGLE	O
,	O
edits	pointer
)	O
;	O
long	O
*	O
totals	pointer
=	O
zlloc	function
(	O
SINGLE	O
,	O
__func__	O
,	O
2	int
*	O
sizeof	O
(	O
long	O
)	O
)	O
;	O
for	O
(	O
char	O
const	O
*	O
p	pointer
=	O
s	pointer
.	O
string	pointer
;	O
p	pointer
<	O
s	pointer
.	O
string	pointer
+	O
s	pointer
.	O
size	long
;	O
p	pointer
++	O
)	O
{	O
bool	bool
addp	bool
=	O
(	O
'a'	O
==	O
*	O
p	pointer
++	O
)	O
;	O
long	O
count	long
;	O
p	pointer
=	O
strchr	function
(	O
p	pointer
,	O
' '	O
)	O
;	O
count	long
=	O
read_positive_integer	function
(	O
&	O
p	pointer
)	O
;	O
totals	pointer
[	O
addp	bool
]	O
+=	O
count	long
;	O
if	O
(	O
addp	bool
)	O
while	O
(	O
count	long
--	O
)	O
if	O
(	O
!	O
(	O
p	pointer
=	O
strchr	function
(	O
++	O
p	pointer
,	O
'\n'	O
)	O
)	O
)	O
goto	O
done	bool
;	O
}	O
done	bool
:	O
*	O
a	pointer
=	O
totals	pointer
[	O
1	int
]	O
;	O
*	O
d	pointer
=	O
totals	pointer
[	O
0	int
]	O
;	O
brush_off	function
(	O
SINGLE	O
,	O
totals	pointer
)	O
;	O
}	O
static	O
void	O
putadelta	function
(	O
register	O
struct	O
delta	struct
const	O
*	O
node	pointer
,	O
register	O
struct	O
delta	struct
const	O
*	O
editscript	pointer
,	O
bool	bool
trunk	bool
)	O
{	O
register	O
FILE	struct
*	O
out	pointer
;	O
char	O
datebuf	array
[	O
datesize	O
+	O
zonelenmax	int
]	O
;	O
bool	bool
pre5	bool
=	O
BE	O
(	O
version	int
)	O
<	O
VERSION	O
(	O
5	int
)	O
;	O
struct	O
atat	pointer
*	O
log	pointer
;	O
if	O
(	O
!	O
node	pointer
->	O
selector	bool
)	O
return	O
;	O
out	pointer
=	O
stdout	pointer
;	O
aprintf	function
(	O
out	pointer
,	O
"----------------------------\nrevision %s%s"	pointer
,	O
node	pointer
->	O
num	pointer
,	O
pre5	bool
?	O
"        "	pointer
:	O
""	pointer
)	O
;	O
if	O
(	O
node	pointer
->	O
lockedby	pointer
)	O
aprintf	function
(	O
out	pointer
,	O
pre5	bool
+	O
"\tlocked by: %s;"	pointer
,	O
node	pointer
->	O
lockedby	pointer
)	O
;	O
aprintf	function
(	O
out	pointer
,	O
"\ndate: %s;  author: %s;  state: %s;"	pointer
,	O
date2str	function
(	O
node	pointer
->	O
date	pointer
,	O
datebuf	array
)	O
,	O
node	pointer
->	O
author	pointer
,	O
node	pointer
->	O
state	pointer
)	O
;	O
if	O
(	O
editscript	pointer
&&	O
editscript	pointer
!=	O
REPO	O
(	O
tip	pointer
)	O
)	O
{	O
long	O
a	pointer
,	O
d	pointer
;	O
count_a_d	function
(	O
trunk	bool
?	O
&	O
d	pointer
:	O
&	O
a	pointer
,	O
trunk	bool
?	O
&	O
a	pointer
:	O
&	O
d	pointer
,	O
editscript	pointer
->	O
text	pointer
)	O
;	O
aprintf	function
(	O
out	pointer
,	O
insDelFormat	pointer
,	O
a	pointer
,	O
d	pointer
)	O
;	O
}	O
if	O
(	O
node	pointer
->	O
branches	pointer
)	O
{	O
aputs	function
(	O
"\nbranches:"	pointer
,	O
out	pointer
)	O
;	O
for	O
(	O
struct	O
wlink	struct
*	O
ls	pointer
=	O
node	pointer
->	O
branches	pointer
;	O
ls	pointer
;	O
ls	pointer
=	O
ls	pointer
->	O
next	pointer
)	O
{	O
struct	O
delta	struct
*	O
delta	struct
=	O
ls	pointer
->	O
entry	pointer
;	O
aprintf	function
(	O
out	pointer
,	O
"  %s;"	pointer
,	O
BRANCHNO	O
(	O
delta	struct
->	O
num	pointer
)	O
)	O
;	O
}	O
}	O
if	O
(	O
node	pointer
->	O
commitid	pointer
)	O
aprintf	function
(	O
out	pointer
,	O
"%s commitid: %s"	pointer
,	O
editscript	pointer
?	O
";"	pointer
:	O
""	pointer
,	O
node	pointer
->	O
commitid	pointer
)	O
;	O
afputc	function
(	O
'\n'	O
,	O
out	pointer
)	O
;	O
if	O
(	O
(	O
log	pointer
=	O
node	pointer
->	O
log	pointer
)	O
&&	O
log	pointer
->	O
beg	pointer
+	O
1	int
<	O
ATAT_END	O
(	O
log	pointer
)	O
)	O
atat_display	function
(	O
out	pointer
,	O
log	pointer
,	O
true	int
)	O
;	O
else	O
awrite	function
(	O
EMPTYLOG	pointer
"\n"	pointer
,	O
sizeof	O
(	O
EMPTYLOG	pointer
)	O
,	O
out	pointer
)	O
;	O
}	O
static	O
void	O
putrunk	function
(	O
void	O
)	O
{	O
register	O
struct	O
delta	struct
const	O
*	O
ptr	pointer
;	O
for	O
(	O
ptr	pointer
=	O
REPO	O
(	O
tip	pointer
)	O
;	O
ptr	pointer
;	O
ptr	pointer
=	O
ptr	pointer
->	O
ilk	pointer
)	O
putadelta	function
(	O
ptr	pointer
,	O
ptr	pointer
->	O
ilk	pointer
,	O
true	int
)	O
;	O
}	O
static	O
void	O
putforest	function
(	O
struct	O
wlink	struct
const	O
*	O
branchroot	pointer
)	O
;	O
static	O
void	O
putree	function
(	O
struct	O
delta	struct
const	O
*	O
root	pointer
)	O
{	O
if	O
(	O
!	O
root	pointer
)	O
return	O
;	O
putree	function
(	O
root	pointer
->	O
ilk	pointer
)	O
;	O
putforest	function
(	O
root	pointer
->	O
branches	pointer
)	O
;	O
}	O
static	O
void	O
putabranch	function
(	O
struct	O
delta	struct
const	O
*	O
root	pointer
)	O
{	O
if	O
(	O
!	O
root	pointer
)	O
return	O
;	O
putabranch	function
(	O
root	pointer
->	O
ilk	pointer
)	O
;	O
putadelta	function
(	O
root	pointer
,	O
root	pointer
,	O
false	int
)	O
;	O
}	O
static	O
void	O
putforest	function
(	O
struct	O
wlink	struct
const	O
*	O
branchroot	pointer
)	O
{	O
if	O
(	O
!	O
branchroot	pointer
)	O
return	O
;	O
putforest	function
(	O
branchroot	pointer
->	O
next	pointer
)	O
;	O
putabranch	function
(	O
branchroot	pointer
->	O
entry	pointer
)	O
;	O
putree	function
(	O
branchroot	pointer
->	O
entry	pointer
)	O
;	O
}	O
static	O
char	O
extractdelta	function
(	O
struct	O
delta	struct
const	O
*	O
pdelta	pointer
)	O
{	O
struct	O
link	struct
const	O
*	O
pstate	pointer
;	O
struct	O
link	struct
const	O
*	O
pauthor	pointer
;	O
int	O
length	int
;	O
if	O
(	O
(	O
pauthor	pointer
=	O
authorlist	pointer
)	O
)	O
while	O
(	O
STR_DIFF	O
(	O
pauthor	pointer
->	O
entry	pointer
,	O
pdelta	pointer
->	O
author	pointer
)	O
)	O
if	O
(	O
!	O
(	O
pauthor	pointer
=	O
pauthor	pointer
->	O
next	pointer
)	O
)	O
return	O
false	int
;	O
if	O
(	O
(	O
pstate	pointer
=	O
statelist	pointer
)	O
)	O
while	O
(	O
STR_DIFF	O
(	O
pstate	pointer
->	O
entry	pointer
,	O
pdelta	pointer
->	O
state	pointer
)	O
)	O
if	O
(	O
!	O
(	O
pstate	pointer
=	O
pstate	pointer
->	O
next	pointer
)	O
)	O
return	O
false	int
;	O
if	O
(	O
lockflag	bool
&&	O
!	O
lock_on	function
(	O
pdelta	pointer
)	O
)	O
return	O
false	int
;	O
for	O
(	O
struct	O
link	struct
*	O
ls	pointer
=	O
Revlst	pointer
;	O
ls	pointer
;	O
)	O
{	O
struct	O
revrange	struct
const	O
*	O
rr	pointer
=	O
ls	pointer
->	O
entry	pointer
;	O
length	int
=	O
rr	pointer
->	O
nfield	int
;	O
if	O
(	O
countnumflds	function
(	O
pdelta	pointer
->	O
num	pointer
)	O
==	O
length	int
+	O
(	O
length	int
&	O
1	int
)	O
&&	O
0	int
<=	O
compartial	function
(	O
pdelta	pointer
->	O
num	pointer
,	O
rr	pointer
->	O
beg	pointer
,	O
length	int
)	O
&&	O
0	int
<=	O
compartial	function
(	O
rr	pointer
->	O
end	pointer
,	O
pdelta	pointer
->	O
num	pointer
,	O
length	int
)	O
)	O
break	O
;	O
if	O
(	O
!	O
(	O
ls	pointer
=	O
ls	pointer
->	O
next	pointer
)	O
)	O
return	O
false	int
;	O
}	O
return	O
true	int
;	O
}	O
static	O
void	O
exttree	function
(	O
struct	O
delta	struct
*	O
root	pointer
)	O
{	O
if	O
(	O
!	O
root	pointer
)	O
return	O
;	O
root	pointer
->	O
selector	bool
=	O
extractdelta	function
(	O
root	pointer
)	O
;	O
root	pointer
->	O
pretty_log	struct
.	O
string	pointer
=	O
NULL	O
;	O
exttree	function
(	O
root	pointer
->	O
ilk	pointer
)	O
;	O
for	O
(	O
struct	O
wlink	struct
*	O
ls	pointer
=	O
root	pointer
->	O
branches	pointer
;	O
ls	pointer
;	O
ls	pointer
=	O
ls	pointer
->	O
next	pointer
)	O
exttree	function
(	O
ls	pointer
->	O
entry	pointer
)	O
;	O
}	O
static	O
void	O
getauthor	function
(	O
char	O
*	O
argv	pointer
)	O
{	O
register	O
int	O
c	int
;	O
struct	O
link	struct
box	pointer
,	O
*	O
tp	pointer
;	O
argv	pointer
--	O
;	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
argv	pointer
)	O
==	O
','	O
||	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
';'	O
)	O
continue	O
;	O
box	pointer
.	O
next	pointer
=	O
authorlist	pointer
;	O
tp	pointer
=	O
&	O
box	pointer
;	O
if	O
(	O
c	int
==	O
'\0'	O
)	O
{	O
tp	pointer
=	O
extend	function
(	O
tp	pointer
,	O
getusername	function
(	O
false	int
)	O
,	O
PLEXUS	O
)	O
;	O
return	O
;	O
}	O
while	O
(	O
c	int
!=	O
'\0'	O
)	O
{	O
tp	pointer
=	O
extend	function
(	O
tp	pointer
,	O
argv	pointer
,	O
PLEXUS	O
)	O
;	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
argv	pointer
)	O
&&	O
c	int
!=	O
','	O
&&	O
c	int
!=	O
' '	O
&&	O
c	int
!=	O
'\t'	O
&&	O
c	int
!=	O
'\n'	O
&&	O
c	int
!=	O
';'	O
)	O
continue	O
;	O
*	O
argv	pointer
=	O
'\0'	O
;	O
if	O
(	O
c	int
==	O
'\0'	O
)	O
{	O
authorlist	pointer
=	O
box	pointer
.	O
next	pointer
;	O
return	O
;	O
}	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
argv	pointer
)	O
==	O
','	O
||	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
';'	O
)	O
continue	O
;	O
}	O
}	O
static	O
void	O
getstate	function
(	O
char	O
*	O
argv	pointer
)	O
{	O
register	O
char	O
c	int
;	O
struct	O
link	struct
box	pointer
,	O
*	O
tp	pointer
;	O
argv	pointer
--	O
;	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
argv	pointer
)	O
==	O
','	O
||	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
';'	O
)	O
continue	O
;	O
if	O
(	O
c	int
==	O
'\0'	O
)	O
{	O
PERR	O
(	O
"missing state attributes after -s options"	pointer
)	O
;	O
return	O
;	O
}	O
box	pointer
.	O
next	pointer
=	O
statelist	pointer
;	O
tp	pointer
=	O
&	O
box	pointer
;	O
while	O
(	O
c	int
!=	O
'\0'	O
)	O
{	O
tp	pointer
=	O
extend	function
(	O
tp	pointer
,	O
argv	pointer
,	O
PLEXUS	O
)	O
;	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
argv	pointer
)	O
&&	O
c	int
!=	O
','	O
&&	O
c	int
!=	O
' '	O
&&	O
c	int
!=	O
'\t'	O
&&	O
c	int
!=	O
'\n'	O
&&	O
c	int
!=	O
';'	O
)	O
continue	O
;	O
*	O
argv	pointer
=	O
'\0'	O
;	O
if	O
(	O
c	int
==	O
'\0'	O
)	O
{	O
statelist	pointer
=	O
box	pointer
.	O
next	pointer
;	O
return	O
;	O
}	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
argv	pointer
)	O
==	O
','	O
||	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
';'	O
)	O
continue	O
;	O
}	O
}	O
static	O
void	O
trunclocks	function
(	O
void	O
)	O
{	O
struct	O
link	struct
const	O
*	O
plocker	pointer
;	O
struct	O
link	struct
box	pointer
,	O
*	O
tp	pointer
;	O
if	O
(	O
!	O
lockerlist	pointer
)	O
return	O
;	O
for	O
(	O
box	pointer
.	O
next	pointer
=	O
GROK	O
(	O
locks	pointer
)	O
,	O
tp	pointer
=	O
&	O
box	pointer
;	O
tp	pointer
->	O
next	pointer
;	O
)	O
{	O
struct	O
rcslock	struct
const	O
*	O
rl	pointer
=	O
tp	pointer
->	O
next	pointer
->	O
entry	pointer
;	O
for	O
(	O
plocker	pointer
=	O
lockerlist	pointer
;	O
;	O
)	O
if	O
(	O
STR_SAME	O
(	O
plocker	pointer
->	O
entry	pointer
,	O
rl	pointer
->	O
login	pointer
)	O
)	O
{	O
tp	pointer
=	O
tp	pointer
->	O
next	pointer
;	O
break	O
;	O
}	O
else	O
if	O
(	O
!	O
(	O
plocker	pointer
=	O
plocker	pointer
->	O
next	pointer
)	O
)	O
{	O
tp	pointer
->	O
next	pointer
=	O
tp	pointer
->	O
next	pointer
->	O
next	pointer
;	O
GROK	O
(	O
locks	pointer
)	O
=	O
box	pointer
.	O
next	pointer
;	O
break	O
;	O
}	O
}	O
}	O
static	O
void	O
recentdate	function
(	O
struct	O
delta	struct
const	O
*	O
root	pointer
,	O
struct	O
daterange	struct
*	O
r	pointer
)	O
{	O
if	O
(	O
!	O
root	pointer
)	O
return	O
;	O
if	O
(	O
root	pointer
->	O
selector	bool
)	O
{	O
if	O
(	O
!	O
DATE_LT	O
(	O
root	pointer
->	O
date	pointer
,	O
r	pointer
->	O
beg	pointer
)	O
&&	O
!	O
DATE_GT	O
(	O
root	pointer
->	O
date	pointer
,	O
r	pointer
->	O
end	pointer
)	O
)	O
{	O
strncpy	function
(	O
r	pointer
->	O
beg	pointer
,	O
root	pointer
->	O
date	pointer
,	O
datesize	O
)	O
;	O
r	pointer
->	O
beg	pointer
[	O
datesize	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
}	O
recentdate	function
(	O
root	pointer
->	O
ilk	pointer
,	O
r	pointer
)	O
;	O
for	O
(	O
struct	O
wlink	struct
*	O
ls	pointer
=	O
root	pointer
->	O
branches	pointer
;	O
ls	pointer
;	O
ls	pointer
=	O
ls	pointer
->	O
next	pointer
)	O
recentdate	function
(	O
ls	pointer
->	O
entry	pointer
,	O
r	pointer
)	O
;	O
}	O
static	O
int	O
extdate	function
(	O
struct	O
delta	struct
*	O
root	pointer
)	O
{	O
int	O
revno	pointer
;	O
if	O
(	O
!	O
root	pointer
)	O
return	O
0	int
;	O
if	O
(	O
datelist	pointer
||	O
duelst	pointer
)	O
{	O
struct	O
daterange	struct
const	O
*	O
r	pointer
;	O
bool	bool
oep	bool
,	O
sel	bool
=	O
false	int
;	O
for	O
(	O
struct	O
link	struct
*	O
ls	pointer
=	O
datelist	pointer
;	O
ls	pointer
;	O
ls	pointer
=	O
ls	pointer
->	O
next	pointer
)	O
{	O
r	pointer
=	O
ls	pointer
->	O
entry	pointer
;	O
oep	bool
=	O
r	pointer
->	O
oep	bool
;	O
complain	function
(	O
"HEY: %d [%s] [%s] [%s] => "	pointer
,	O
oep	bool
,	O
r	pointer
->	O
beg	pointer
,	O
root	pointer
->	O
date	pointer
,	O
r	pointer
->	O
end	pointer
)	O
;	O
if	O
(	O
(	O
sel	bool
=	O
(	O
(	O
!	O
r	pointer
->	O
beg	pointer
[	O
0	int
]	O
||	O
(	O
oep	bool
?	O
DATE_LT	O
(	O
r	pointer
->	O
beg	pointer
,	O
root	pointer
->	O
date	pointer
)	O
:	O
!	O
DATE_GT	O
(	O
r	pointer
->	O
beg	pointer
,	O
root	pointer
->	O
date	pointer
)	O
)	O
)	O
&&	O
(	O
!	O
r	pointer
->	O
end	pointer
[	O
0	int
]	O
||	O
(	O
oep	bool
?	O
DATE_LT	O
(	O
root	pointer
->	O
date	pointer
,	O
r	pointer
->	O
end	pointer
)	O
:	O
!	O
DATE_GT	O
(	O
root	pointer
->	O
date	pointer
,	O
r	pointer
->	O
end	pointer
)	O
)	O
)	O
)	O
)	O
)	O
{	O
complain	function
(	O
"yes!\n"	pointer
)	O
;	O
break	O
;	O
}	O
complain	function
(	O
"no\n"	pointer
)	O
;	O
}	O
if	O
(	O
!	O
sel	bool
)	O
{	O
for	O
(	O
struct	O
link	struct
*	O
ls	pointer
=	O
duelst	pointer
;	O
ls	pointer
;	O
ls	pointer
=	O
ls	pointer
->	O
next	pointer
)	O
{	O
r	pointer
=	O
ls	pointer
->	O
entry	pointer
;	O
if	O
(	O
(	O
sel	bool
=	O
DATE_EQ	O
(	O
root	pointer
->	O
date	pointer
,	O
r	pointer
->	O
beg	pointer
)	O
)	O
)	O
break	O
;	O
}	O
if	O
(	O
!	O
sel	bool
)	O
root	pointer
->	O
selector	bool
=	O
false	int
;	O
}	O
}	O
revno	pointer
=	O
root	pointer
->	O
selector	bool
+	O
extdate	function
(	O
root	pointer
->	O
ilk	pointer
)	O
;	O
for	O
(	O
struct	O
wlink	struct
*	O
ls	pointer
=	O
root	pointer
->	O
branches	pointer
;	O
ls	pointer
;	O
ls	pointer
=	O
ls	pointer
->	O
next	pointer
)	O
revno	pointer
+=	O
extdate	function
(	O
ls	pointer
->	O
entry	pointer
)	O
;	O
return	O
revno	pointer
;	O
}	O
static	O
void	O
getdatepair	function
(	O
char	O
*	O
argv	pointer
)	O
{	O
register	O
char	O
c	int
;	O
struct	O
daterange	struct
*	O
r	pointer
;	O
char	O
const	O
*	O
rawdate	pointer
;	O
bool	bool
switchflag	bool
;	O
argv	pointer
--	O
;	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
argv	pointer
)	O
==	O
','	O
||	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
';'	O
)	O
continue	O
;	O
if	O
(	O
c	int
==	O
'\0'	O
)	O
{	O
PERR	O
(	O
"missing date/time after -d"	pointer
)	O
;	O
return	O
;	O
}	O
while	O
(	O
c	int
!=	O
'\0'	O
)	O
{	O
switchflag	bool
=	O
false	int
;	O
r	pointer
=	O
ZLLOC	O
(	O
1	int
,	O
struct	O
daterange	struct
)	O
;	O
if	O
(	O
c	int
==	O
'<'	O
)	O
{	O
c	int
=	O
*	O
++	O
argv	pointer
;	O
if	O
(	O
!	O
(	O
r	pointer
->	O
oep	bool
=	O
c	int
!=	O
'='	O
)	O
)	O
c	int
=	O
*	O
++	O
argv	pointer
;	O
r	pointer
->	O
beg	pointer
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
'>'	O
)	O
{	O
c	int
=	O
*	O
++	O
argv	pointer
;	O
if	O
(	O
!	O
(	O
r	pointer
->	O
oep	bool
=	O
c	int
!=	O
'='	O
)	O
)	O
c	int
=	O
*	O
++	O
argv	pointer
;	O
r	pointer
->	O
end	pointer
[	O
0	int
]	O
=	O
'\0'	O
;	O
switchflag	bool
=	O
true	int
;	O
}	O
else	O
{	O
rawdate	pointer
=	O
argv	pointer
;	O
while	O
(	O
c	int
!=	O
'<'	O
&&	O
c	int
!=	O
'>'	O
&&	O
c	int
!=	O
';'	O
&&	O
c	int
!=	O
'\0'	O
)	O
c	int
=	O
*	O
++	O
argv	pointer
;	O
*	O
argv	pointer
=	O
'\0'	O
;	O
if	O
(	O
c	int
==	O
'>'	O
)	O
switchflag	bool
=	O
true	int
;	O
str2date	function
(	O
rawdate	pointer
,	O
switchflag	bool
?	O
r	pointer
->	O
end	pointer
:	O
r	pointer
->	O
beg	pointer
)	O
;	O
if	O
(	O
c	int
==	O
';'	O
||	O
c	int
==	O
'\0'	O
)	O
{	O
strncpy	function
(	O
r	pointer
->	O
end	pointer
,	O
r	pointer
->	O
beg	pointer
,	O
datesize	O
)	O
;	O
PUSH	O
(	O
r	pointer
,	O
duelst	pointer
)	O
;	O
goto	O
end	pointer
;	O
}	O
else	O
{	O
bool	bool
eq	bool
=	O
argv	pointer
[	O
1	int
]	O
==	O
'='	O
;	O
r	pointer
->	O
oep	bool
=	O
!	O
eq	bool
;	O
argv	pointer
+=	O
eq	bool
;	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
argv	pointer
)	O
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
)	O
continue	O
;	O
if	O
(	O
c	int
==	O
';'	O
||	O
c	int
==	O
'\0'	O
)	O
{	O
(	O
switchflag	bool
?	O
r	pointer
->	O
beg	pointer
:	O
r	pointer
->	O
end	pointer
)	O
[	O
0	int
]	O
=	O
'\0'	O
;	O
PUSH	O
(	O
r	pointer
,	O
datelist	pointer
)	O
;	O
goto	O
end	pointer
;	O
}	O
}	O
}	O
rawdate	pointer
=	O
argv	pointer
;	O
while	O
(	O
c	int
!=	O
'>'	O
&&	O
c	int
!=	O
'<'	O
&&	O
c	int
!=	O
';'	O
&&	O
c	int
!=	O
'\0'	O
)	O
c	int
=	O
*	O
++	O
argv	pointer
;	O
*	O
argv	pointer
=	O
'\0'	O
;	O
str2date	function
(	O
rawdate	pointer
,	O
switchflag	bool
?	O
r	pointer
->	O
beg	pointer
:	O
r	pointer
->	O
end	pointer
)	O
;	O
PUSH	O
(	O
r	pointer
,	O
datelist	pointer
)	O
;	O
end	pointer
:	O
if	O
(	O
BE	O
(	O
version	int
)	O
<	O
VERSION	O
(	O
5	int
)	O
)	O
r	pointer
->	O
oep	bool
=	O
false	int
;	O
if	O
(	O
c	int
==	O
'\0'	O
)	O
return	O
;	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
argv	pointer
)	O
==	O
';'	O
||	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
)	O
continue	O
;	O
}	O
}	O
static	O
bool	bool
checkrevpair	function
(	O
char	O
const	O
*	O
num1	pointer
,	O
char	O
const	O
*	O
num2	pointer
)	O
{	O
int	O
length	int
=	O
countnumflds	function
(	O
num1	pointer
)	O
;	O
if	O
(	O
countnumflds	function
(	O
num2	pointer
)	O
!=	O
length	int
||	O
(	O
2	int
<	O
length	int
&&	O
compartial	function
(	O
num1	pointer
,	O
num2	pointer
,	O
length	int
-	O
1	int
)	O
!=	O
0	int
)	O
)	O
{	O
RERR	O
(	O
"invalid branch or revision pair %s : %s"	pointer
,	O
num1	pointer
,	O
num2	pointer
)	O
;	O
return	O
false	int
;	O
}	O
return	O
true	int
;	O
}	O
static	O
bool	bool
getnumericrev	function
(	O
void	O
)	O
{	O
struct	O
link	struct
*	O
ls	pointer
;	O
struct	O
revrange	struct
*	O
rr	pointer
;	O
int	O
n	int
;	O
struct	O
cbuf	struct
s	pointer
,	O
e	pointer
;	O
char	O
const	O
*	O
lrev	pointer
;	O
struct	O
cbuf	struct
const	O
*	O
rstart	pointer
,	O
*	O
rend	pointer
;	O
struct	O
delta	struct
*	O
tip	pointer
=	O
REPO	O
(	O
tip	pointer
)	O
;	O
char	O
const	O
*	O
defbr	pointer
=	O
GROK	O
(	O
branch	pointer
)	O
;	O
Revlst	pointer
=	O
NULL	O
;	O
for	O
(	O
ls	pointer
=	O
revlist	pointer
;	O
ls	pointer
;	O
ls	pointer
=	O
ls	pointer
->	O
next	pointer
)	O
{	O
struct	O
revrange	struct
const	O
*	O
from	pointer
=	O
ls	pointer
->	O
entry	pointer
;	O
n	int
=	O
0	int
;	O
rstart	pointer
=	O
&	O
s	pointer
;	O
rend	pointer
=	O
&	O
e	pointer
;	O
switch	O
(	O
from	pointer
->	O
nfield	int
)	O
{	O
case	O
1	int
:	O
if	O
(	O
!	O
fully_numeric_no_k	O
(	O
&	O
s	pointer
,	O
from	pointer
->	O
beg	pointer
)	O
)	O
goto	O
freebufs	O
;	O
rend	pointer
=	O
&	O
s	pointer
;	O
n	int
=	O
countnumflds	function
(	O
s	pointer
.	O
string	pointer
)	O
;	O
if	O
(	O
!	O
n	int
&&	O
(	O
lrev	pointer
=	O
tiprev	function
(	O
)	O
)	O
)	O
{	O
s	pointer
.	O
string	pointer
=	O
lrev	pointer
;	O
n	int
=	O
countnumflds	function
(	O
lrev	pointer
)	O
;	O
}	O
break	O
;	O
case	O
2	int
:	O
if	O
(	O
!	O
fully_numeric_no_k	O
(	O
&	O
s	pointer
,	O
from	pointer
->	O
beg	pointer
)	O
)	O
goto	O
freebufs	O
;	O
if	O
(	O
2	int
>	O
(	O
n	int
=	O
countnumflds	function
(	O
s	pointer
.	O
string	pointer
)	O
)	O
)	O
e	pointer
.	O
string	pointer
=	O
""	pointer
;	O
else	O
e	pointer
.	O
string	pointer
=	O
SHSNIP	O
(	O
&	O
e	pointer
.	O
size	long
,	O
s	pointer
.	O
string	pointer
,	O
strrchr	function
(	O
s	pointer
.	O
string	pointer
,	O
'.'	O
)	O
)	O
;	O
break	O
;	O
case	O
3	int
:	O
if	O
(	O
!	O
fully_numeric_no_k	O
(	O
&	O
e	pointer
,	O
from	pointer
->	O
end	pointer
)	O
)	O
goto	O
freebufs	O
;	O
if	O
(	O
(	O
n	int
=	O
countnumflds	function
(	O
e	pointer
.	O
string	pointer
)	O
)	O
<	O
2	int
)	O
s	pointer
.	O
string	pointer
=	O
".0"	pointer
;	O
else	O
{	O
SHACCR	O
(	O
e	pointer
.	O
string	pointer
,	O
strrchr	function
(	O
e	pointer
.	O
string	pointer
,	O
'.'	O
)	O
)	O
;	O
accf	function
(	O
PLEXUS	O
,	O
".0"	pointer
)	O
;	O
s	pointer
.	O
string	pointer
=	O
SHSTR	O
(	O
&	O
s	pointer
.	O
size	long
)	O
;	O
}	O
break	O
;	O
default	O
:	O
if	O
(	O
!	O
(	O
fully_numeric_no_k	O
(	O
&	O
s	pointer
,	O
from	pointer
->	O
beg	pointer
)	O
&&	O
fully_numeric_no_k	O
(	O
&	O
e	pointer
,	O
from	pointer
->	O
end	pointer
)	O
&&	O
checkrevpair	function
(	O
s	pointer
.	O
string	pointer
,	O
e	pointer
.	O
string	pointer
)	O
)	O
)	O
goto	O
freebufs	O
;	O
n	int
=	O
countnumflds	function
(	O
s	pointer
.	O
string	pointer
)	O
;	O
if	O
(	O
compartial	function
(	O
s	pointer
.	O
string	pointer
,	O
e	pointer
.	O
string	pointer
,	O
n	int
)	O
>	O
0	int
)	O
{	O
rstart	pointer
=	O
&	O
e	pointer
;	O
rend	pointer
=	O
&	O
s	pointer
;	O
}	O
break	O
;	O
}	O
if	O
(	O
n	int
)	O
{	O
rr	pointer
=	O
FALLOC	O
(	O
struct	O
revrange	struct
)	O
;	O
rr	pointer
->	O
nfield	int
=	O
n	int
;	O
rr	pointer
->	O
beg	pointer
=	O
rstart	pointer
->	O
string	pointer
;	O
rr	pointer
->	O
end	pointer
=	O
rend	pointer
->	O
string	pointer
;	O
PUSH	O
(	O
rr	pointer
,	O
Revlst	pointer
)	O
;	O
}	O
}	O
if	O
(	O
branchflag	bool
&&	O
(	O
defbr	pointer
||	O
tip	pointer
)	O
)	O
{	O
rr	pointer
=	O
FALLOC	O
(	O
struct	O
revrange	struct
)	O
;	O
rr	pointer
->	O
beg	pointer
=	O
rr	pointer
->	O
end	pointer
=	O
defbr	pointer
?	O
defbr	pointer
:	O
TAKE	O
(	O
1	int
,	O
tip	pointer
->	O
num	pointer
)	O
;	O
rr	pointer
->	O
nfield	int
=	O
countnumflds	function
(	O
rr	pointer
->	O
beg	pointer
)	O
;	O
PUSH	O
(	O
rr	pointer
,	O
Revlst	pointer
)	O
;	O
}	O
freebufs	O
:	O
return	O
!	O
ls	pointer
;	O
}	O
static	O
void	O
putrevpairs	function
(	O
char	O
const	O
*	O
b	pointer
,	O
char	O
const	O
*	O
e	pointer
,	O
bool	bool
sawsep	bool
)	O
{	O
struct	O
revrange	struct
*	O
rr	pointer
=	O
ZLLOC	O
(	O
1	int
,	O
struct	O
revrange	struct
)	O
;	O
rr	pointer
->	O
beg	pointer
=	O
b	pointer
;	O
rr	pointer
->	O
end	pointer
=	O
e	pointer
;	O
rr	pointer
->	O
nfield	int
=	O
(	O
!	O
sawsep	bool
?	O
1	int
:	O
(	O
!	O
e	pointer
[	O
0	int
]	O
?	O
2	int
:	O
(	O
!	O
b	pointer
[	O
0	int
]	O
?	O
3	int
:	O
4	int
)	O
)	O
)	O
;	O
PUSH	O
(	O
rr	pointer
,	O
revlist	pointer
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
FILE	struct
*	O
out	pointer
;	O
char	O
*	O
a	pointer
,	O
*	O
*	O
newargv	pointer
;	O
char	O
const	O
*	O
accessListString	pointer
,	O
*	O
accessFormat	pointer
;	O
char	O
const	O
*	O
headFormat	pointer
,	O
*	O
symbolFormat	pointer
;	O
bool	bool
descflag	bool
,	O
selectflag	bool
;	O
bool	bool
onlylockflag	bool
;	O
bool	bool
onlyRCSflag	bool
;	O
bool	bool
pre5	bool
;	O
bool	bool
shownames	bool
;	O
int	O
revno	pointer
;	O
const	O
struct	O
program	struct
program	struct
=	O
{	O
.	O
invoke	pointer
=	O
argv	pointer
[	O
0	int
]	O
,	O
.	O
name	pointer
=	O
"rlog"	pointer
,	O
.	O
help	pointer
=	O
help	pointer
,	O
.	O
exiterr	pointer
=	O
exiterr	pointer
}	O
;	O
CHECK_HV	O
(	O
)	O
;	O
gnurcs_init	function
(	O
&	O
program	struct
)	O
;	O
descflag	bool
=	O
selectflag	bool
=	O
shownames	bool
=	O
true	int
;	O
onlylockflag	bool
=	O
onlyRCSflag	bool
=	O
false	int
;	O
out	pointer
=	O
stdout	pointer
;	O
BE	O
(	O
pe	pointer
)	O
=	O
X_DEFAULT	pointer
;	O
argc	int
=	O
getRCSINIT	function
(	O
argc	int
,	O
argv	pointer
,	O
&	O
newargv	pointer
)	O
;	O
argv	pointer
=	O
newargv	pointer
;	O
while	O
(	O
a	pointer
=	O
*	O
++	O
argv	pointer
,	O
0	int
<	O
--	O
argc	int
&&	O
*	O
a	pointer
++	O
==	O
'-'	O
)	O
{	O
switch	O
(	O
*	O
a	pointer
++	O
)	O
{	O
case	O
'L'	O
:	O
onlylockflag	bool
=	O
true	int
;	O
break	O
;	O
case	O
'N'	O
:	O
shownames	bool
=	O
false	int
;	O
break	O
;	O
case	O
'R'	O
:	O
onlyRCSflag	bool
=	O
true	int
;	O
break	O
;	O
case	O
'l'	O
:	O
lockflag	bool
=	O
true	int
;	O
getlocker	function
(	O
a	pointer
)	O
;	O
break	O
;	O
case	O
'b'	O
:	O
branchflag	bool
=	O
true	int
;	O
break	O
;	O
case	O
'r'	O
:	O
parse_revpairs	function
(	O
'r'	O
,	O
a	pointer
,	O
putrevpairs	function
)	O
;	O
break	O
;	O
case	O
'd'	O
:	O
getdatepair	function
(	O
a	pointer
)	O
;	O
break	O
;	O
case	O
's'	O
:	O
getstate	function
(	O
a	pointer
)	O
;	O
break	O
;	O
case	O
'w'	O
:	O
getauthor	function
(	O
a	pointer
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
descflag	bool
=	O
false	int
;	O
break	O
;	O
case	O
't'	O
:	O
selectflag	bool
=	O
false	int
;	O
break	O
;	O
case	O
'q'	O
:	O
BE	O
(	O
quiet	bool
)	O
=	O
true	int
;	O
break	O
;	O
case	O
'x'	O
:	O
BE	O
(	O
pe	pointer
)	O
=	O
a	pointer
;	O
break	O
;	O
case	O
'z'	O
:	O
zone_set	function
(	O
a	pointer
)	O
;	O
break	O
;	O
case	O
'T'	O
:	O
if	O
(	O
*	O
a	pointer
)	O
goto	O
unknown	O
;	O
break	O
;	O
case	O
'V'	O
:	O
setRCSversion	function
(	O
*	O
argv	pointer
)	O
;	O
break	O
;	O
default	O
:	O
unknown	O
:	O
bad_option	function
(	O
*	O
argv	pointer
)	O
;	O
}	O
;	O
}	O
if	O
(	O
!	O
(	O
descflag	bool
|	O
selectflag	bool
)	O
)	O
{	O
PWARN	O
(	O
"-t overrides -h."	pointer
)	O
;	O
descflag	bool
=	O
true	int
;	O
}	O
pre5	bool
=	O
BE	O
(	O
version	int
)	O
<	O
VERSION	O
(	O
5	int
)	O
;	O
if	O
(	O
pre5	bool
)	O
{	O
accessListString	pointer
=	O
"\naccess list:   "	pointer
;	O
accessFormat	pointer
=	O
"  %s"	pointer
;	O
headFormat	pointer
=	O
"\nRCS file:        %s;   Working file:    %s\nhead:           %s%s\nbranch:         %s%s\nlocks:         "	pointer
;	O
insDelFormat	pointer
=	O
"  lines added/del: %ld/%ld"	pointer
;	O
symbolFormat	pointer
=	O
"  %s: %s;"	pointer
;	O
}	O
else	O
{	O
accessListString	pointer
=	O
"\naccess list:"	pointer
;	O
accessFormat	pointer
=	O
"\n\t%s"	pointer
;	O
headFormat	pointer
=	O
"\nRCS file: %s\nWorking file: %s\nhead:%s%s\nbranch:%s%s\nlocks:%s"	pointer
;	O
insDelFormat	pointer
=	O
"  lines: +%ld -%ld"	pointer
;	O
symbolFormat	pointer
=	O
"\n\t%s: %s"	pointer
;	O
}	O
if	O
(	O
FLOW	O
(	O
erroneousp	bool
)	O
)	O
cleanup	function
(	O
)	O
;	O
else	O
if	O
(	O
argc	int
<	O
1	int
)	O
PFATAL	O
(	O
"no input file"	pointer
)	O
;	O
else	O
for	O
(	O
;	O
0	int
<	O
argc	int
;	O
cleanup	function
(	O
)	O
,	O
++	O
argv	pointer
,	O
--	O
argc	int
)	O
{	O
char	O
const	O
*	O
repo_filename	pointer
;	O
struct	O
delta	struct
*	O
tip	pointer
;	O
char	O
const	O
*	O
defbr	pointer
;	O
bool	bool
strictly_locking	bool
;	O
int	O
kws	int
;	O
struct	O
link	struct
*	O
locks	pointer
;	O
ffree	function
(	O
)	O
;	O
if	O
(	O
pairnames	function
(	O
argc	int
,	O
argv	pointer
,	O
rcsreadopen	function
,	O
true	int
,	O
false	int
)	O
<=	O
0	int
)	O
continue	O
;	O
repo_filename	pointer
=	O
REPO	O
(	O
filename	pointer
)	O
;	O
tip	pointer
=	O
REPO	O
(	O
tip	pointer
)	O
;	O
defbr	pointer
=	O
GROK	O
(	O
branch	pointer
)	O
;	O
locks	pointer
=	O
GROK	O
(	O
locks	pointer
)	O
;	O
strictly_locking	bool
=	O
BE	O
(	O
strictly_locking	bool
)	O
;	O
kws	int
=	O
BE	O
(	O
kws	int
)	O
;	O
if	O
(	O
lockflag	bool
)	O
trunclocks	function
(	O
)	O
;	O
if	O
(	O
onlylockflag	bool
&&	O
!	O
locks	pointer
)	O
continue	O
;	O
if	O
(	O
onlyRCSflag	bool
)	O
{	O
aprintf	function
(	O
out	pointer
,	O
"%s\n"	pointer
,	O
repo_filename	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
!	O
getnumericrev	function
(	O
)	O
)	O
continue	O
;	O
aprintf	function
(	O
out	pointer
,	O
headFormat	pointer
,	O
repo_filename	pointer
,	O
MANI	O
(	O
filename	pointer
)	O
,	O
tip	pointer
?	O
" "	pointer
:	O
""	pointer
,	O
tip	pointer
?	O
tip	pointer
->	O
num	pointer
:	O
""	pointer
,	O
defbr	pointer
?	O
" "	pointer
:	O
""	pointer
,	O
defbr	pointer
?	O
defbr	pointer
:	O
""	pointer
,	O
strictly_locking	bool
?	O
" strict"	pointer
:	O
""	pointer
)	O
;	O
format_locks	function
(	O
out	pointer
,	O
symbolFormat	pointer
)	O
;	O
if	O
(	O
strictly_locking	bool
&&	O
pre5	bool
)	O
aputs	function
(	O
"  ;  strict"	pointer
+	O
(	O
locks	pointer
?	O
3	int
:	O
0	int
)	O
,	O
out	pointer
)	O
;	O
aputs	function
(	O
accessListString	pointer
,	O
out	pointer
)	O
;	O
for	O
(	O
struct	O
link	struct
*	O
ls	pointer
=	O
GROK	O
(	O
access	pointer
)	O
;	O
ls	pointer
;	O
ls	pointer
=	O
ls	pointer
->	O
next	pointer
)	O
aprintf	function
(	O
out	pointer
,	O
accessFormat	pointer
,	O
ls	pointer
->	O
entry	pointer
)	O
;	O
if	O
(	O
shownames	bool
)	O
{	O
aputs	function
(	O
"\nsymbolic names:"	pointer
,	O
out	pointer
)	O
;	O
format_assocs	function
(	O
out	pointer
,	O
symbolFormat	pointer
)	O
;	O
}	O
if	O
(	O
pre5	bool
)	O
{	O
aputs	function
(	O
"\ncomment leader:  \""	pointer
,	O
out	pointer
)	O
;	O
awrite	function
(	O
REPO	O
(	O
log_lead	struct
)	O
.	O
string	pointer
,	O
REPO	O
(	O
log_lead	struct
)	O
.	O
size	long
,	O
out	pointer
)	O
;	O
afputc	function
(	O
'\"'	O
,	O
out	pointer
)	O
;	O
}	O
if	O
(	O
!	O
pre5	bool
||	O
kws	int
!=	O
kwsub_kv	int
)	O
aprintf	function
(	O
out	pointer
,	O
"\nkeyword substitution: %s"	pointer
,	O
kwsub_string	function
(	O
kws	int
)	O
)	O
;	O
aprintf	function
(	O
out	pointer
,	O
"\ntotal revisions: %zu"	pointer
,	O
GROK	O
(	O
deltas_count	long
)	O
)	O
;	O
revno	pointer
=	O
0	int
;	O
if	O
(	O
tip	pointer
&&	O
selectflag	bool
&	O
descflag	bool
)	O
{	O
exttree	function
(	O
tip	pointer
)	O
;	O
for	O
(	O
struct	O
link	struct
*	O
ls	pointer
=	O
duelst	pointer
;	O
ls	pointer
;	O
ls	pointer
=	O
ls	pointer
->	O
next	pointer
)	O
{	O
struct	O
daterange	struct
const	O
*	O
incomplete	pointer
=	O
ls	pointer
->	O
entry	pointer
;	O
struct	O
daterange	struct
*	O
r	pointer
=	O
ZLLOC	O
(	O
1	int
,	O
struct	O
daterange	struct
)	O
;	O
*	O
r	pointer
=	O
*	O
incomplete	pointer
;	O
KSTRCPY	O
(	O
r	pointer
->	O
beg	pointer
,	O
"0.0.0.0.0.0"	pointer
)	O
;	O
ls	pointer
->	O
entry	pointer
=	O
r	pointer
;	O
recentdate	function
(	O
tip	pointer
,	O
r	pointer
)	O
;	O
}	O
revno	pointer
=	O
extdate	function
(	O
tip	pointer
)	O
;	O
aprintf	function
(	O
out	pointer
,	O
";\tselected revisions: %d"	pointer
,	O
revno	pointer
)	O
;	O
}	O
afputc	function
(	O
'\n'	O
,	O
out	pointer
)	O
;	O
if	O
(	O
descflag	bool
)	O
{	O
struct	O
atat	pointer
*	O
desc	pointer
=	O
GROK	O
(	O
desc	pointer
)	O
;	O
aputs	function
(	O
"description:\n"	pointer
,	O
out	pointer
)	O
;	O
atat_display	function
(	O
out	pointer
,	O
desc	pointer
,	O
true	int
)	O
;	O
}	O
if	O
(	O
revno	pointer
)	O
{	O
putrunk	function
(	O
)	O
;	O
putree	function
(	O
tip	pointer
)	O
;	O
}	O
aputs	function
(	O
equal_line	array
,	O
out	pointer
)	O
;	O
}	O
Ozclose	function
(	O
&	O
out	pointer
)	O
;	O
gnurcs_goodbye	function
(	O
)	O
;	O
return	O
exitstatus	int
;	O
}	O
