ATTR_NO_RETRUN	O
static	O
void	O
usage	function
(	O
int	O
status	int
)	O
{	O
if	O
(	O
status	int
!=	O
EXIT_SUCCESS	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Try `%s --help' for more information.\n"	pointer
,	O
program_name	pointer
)	O
;	O
else	O
{	O
printf	function
(	O
"Usage: %s [OPTION] FILE\n"	pointer
,	O
program_name	pointer
)	O
;	O
printf	function
(	O
"Read FILE with ASN.1 definitions and generate\na C array that is used with libtasn1 functions.\n\n"	pointer
)	O
;	O
printf	function
(	O
"Mandatory arguments to long options are mandatory for short options too.\n  -c, --check           checks the syntax only\n  -o, --output=FILE     output file\n  -n, --name=NAME       array name\n  -h, --help            display this help and exit\n  -v, --version         output version information and exit\n"	pointer
)	O
;	O
printf	function
(	O
"Report bugs to "	pointer
PACKAGE_BUGREPORT	pointer
)	O
;	O
}	O
exit	function
(	O
status	int
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
static	O
const	O
struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'h'	O
}	O
,	O
{	O
"version"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'v'	O
}	O
,	O
{	O
"check"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'c'	O
}	O
,	O
{	O
"output"	pointer
,	O
required_argument	int
,	O
0	int
,	O
'o'	O
}	O
,	O
{	O
"name"	pointer
,	O
required_argument	int
,	O
0	int
,	O
'n'	O
}	O
,	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
int	O
option_index	int
=	O
0	int
;	O
int	O
option_result	int
;	O
char	O
*	O
outputFileName	pointer
=	O
NULL	O
;	O
char	O
*	O
inputFileName	pointer
=	O
NULL	O
;	O
char	O
*	O
vectorName	pointer
=	O
NULL	O
;	O
int	O
checkSyntaxOnly	int
=	O
0	int
;	O
asn1_node	pointer
pointer	pointer
=	O
NULL	O
;	O
char	O
errorDescription	pointer
[	O
ASN1_MAX_ERROR_DESCRIPTION_SIZE	int
]	O
;	O
int	O
parse_result	int
=	O
ASN1_SUCCESS	int
;	O
opterr	int
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
option_result	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	array
,	O
"hvco:n:"	pointer
,	O
long_options	array
,	O
&	O
option_index	int
)	O
;	O
if	O
(	O
option_result	int
==	O
-	O
1	int
)	O
break	O
;	O
switch	O
(	O
option_result	int
)	O
{	O
case	O
0	int
:	O
fprintf	function
(	O
stderr	pointer
,	O
"option %s"	pointer
,	O
long_options	array
[	O
option_index	int
]	O
.	O
name	pointer
)	O
;	O
if	O
(	O
optarg	pointer
)	O
fprintf	function
(	O
stderr	pointer
,	O
" with arg %s"	pointer
,	O
optarg	pointer
)	O
;	O
putc	function
(	O
'\n'	O
,	O
stderr	pointer
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
free	function
(	O
outputFileName	pointer
)	O
;	O
free	function
(	O
vectorName	pointer
)	O
;	O
usage	function
(	O
EXIT_SUCCESS	int
)	O
;	O
break	O
;	O
case	O
'v'	O
:	O
printf	function
(	O
program_name	pointer
" "	pointer
PACKAGE	pointer
" "	pointer
VERSION	pointer
"\n"	pointer
)	O
;	O
printf	function
(	O
"Copyright (C) 2017-2019 Free Software Foundation, Inc.\n\n"	pointer
)	O
;	O
printf	function
(	O
"Written by Fabio Fiorina\n"	pointer
)	O
;	O
free	function
(	O
outputFileName	pointer
)	O
;	O
free	function
(	O
vectorName	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
break	O
;	O
case	O
'c'	O
:	O
checkSyntaxOnly	int
=	O
1	int
;	O
break	O
;	O
case	O
'o'	O
:	O
assert	O
(	O
optarg	pointer
!=	O
NULL	O
)	O
;	O
outputFileName	pointer
=	O
strdup	function
(	O
optarg	pointer
)	O
;	O
if	O
(	O
outputFileName	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Memory error\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
break	O
;	O
case	O
'n'	O
:	O
assert	O
(	O
optarg	pointer
!=	O
NULL	O
)	O
;	O
vectorName	pointer
=	O
strdup	function
(	O
optarg	pointer
)	O
;	O
if	O
(	O
vectorName	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Memory error\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
break	O
;	O
case	O
'?'	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"asn1Parser: option '%s' not recognized or without argument.\n\n"	pointer
,	O
argv	array
[	O
optind	int
-	O
1	int
]	O
)	O
;	O
free	function
(	O
outputFileName	pointer
)	O
;	O
free	function
(	O
vectorName	pointer
)	O
;	O
usage	function
(	O
EXIT_FAILURE	int
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"asn1Parser: ?? getopt returned character code Ox%x ??\n"	pointer
,	O
(	O
unsigned	O
)	O
option_result	int
)	O
;	O
}	O
}	O
if	O
(	O
optind	int
==	O
argc	int
)	O
{	O
free	function
(	O
outputFileName	pointer
)	O
;	O
free	function
(	O
vectorName	pointer
)	O
;	O
usage	function
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
else	O
{	O
inputFileName	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
strlen	function
(	O
argv	array
[	O
optind	int
]	O
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
inputFileName	pointer
,	O
argv	array
[	O
optind	int
]	O
)	O
;	O
}	O
if	O
(	O
checkSyntaxOnly	int
==	O
1	int
)	O
{	O
parse_result	int
=	O
asn1_parser2tree	function
(	O
inputFileName	pointer
,	O
&	O
pointer	pointer
,	O
errorDescription	pointer
)	O
;	O
asn1_delete_structure	function
(	O
&	O
pointer	pointer
)	O
;	O
}	O
else	O
parse_result	int
=	O
asn1_parser2array	function
(	O
inputFileName	pointer
,	O
outputFileName	pointer
,	O
vectorName	pointer
,	O
errorDescription	pointer
)	O
;	O
switch	O
(	O
parse_result	int
)	O
{	O
case	O
ASN1_SUCCESS	int
:	O
fputs	function
(	O
"Done.\n"	pointer
,	O
stderr	pointer
)	O
;	O
break	O
;	O
case	O
ASN1_FILE_NOT_FOUND	int
:	O
fprintf	function
(	O
stderr	pointer
,	O
"asn1Parser: file %s was not found\n"	pointer
,	O
inputFileName	pointer
)	O
;	O
break	O
;	O
case	O
ASN1_SYNTAX_ERROR	int
:	O
case	O
ASN1_IDENTIFIER_NOT_FOUND	int
:	O
case	O
ASN1_NAME_TOO_LONG	int
:	O
fprintf	function
(	O
stderr	pointer
,	O
"asn1Parser: %s\n"	pointer
,	O
errorDescription	pointer
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"libtasn1 ERROR: %s\n"	pointer
,	O
asn1_strerror	function
(	O
parse_result	int
)	O
)	O
;	O
}	O
free	function
(	O
inputFileName	pointer
)	O
;	O
free	function
(	O
outputFileName	pointer
)	O
;	O
free	function
(	O
vectorName	pointer
)	O
;	O
if	O
(	O
parse_result	int
!=	O
ASN1_SUCCESS	int
)	O
exit	function
(	O
1	int
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
