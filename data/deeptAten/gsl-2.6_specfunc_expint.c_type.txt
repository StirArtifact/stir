static	O
double	O
AE11_data	array
[	O
39	int
]	O
=	O
{	O
0.121503239716065790	int
,	O
-	O
0.065088778513550150	int
,	O
0.004897651357459670	int
,	O
-	O
0.000649237843027216	int
,	O
0.000093840434587471	int
,	O
0.000000420236380882	int
,	O
-	O
0.000008113374735904	int
,	O
0.000002804247688663	int
,	O
0.000000056487164441	int
,	O
-	O
0.000000344809174450	int
,	O
0.000000058209273578	int
,	O
0.000000038711426349	int
,	O
-	O
0.000000012453235014	int
,	O
-	O
0.000000005118504888	int
,	O
0.000000002148771527	int
,	O
0.000000000868459898	int
,	O
-	O
0.000000000343650105	int
,	O
-	O
0.000000000179796603	int
,	O
0.000000000047442060	int
,	O
0.000000000040423282	int
,	O
-	O
0.000000000003543928	int
,	O
-	O
0.000000000008853444	int
,	O
-	O
0.000000000000960151	int
,	O
0.000000000001692921	int
,	O
0.000000000000607990	int
,	O
-	O
0.000000000000224338	int
,	O
-	O
0.000000000000200327	int
,	O
-	O
0.000000000000006246	int
,	O
0.000000000000045571	int
,	O
0.000000000000016383	int
,	O
-	O
0.000000000000005561	int
,	O
-	O
0.000000000000006074	int
,	O
-	O
0.000000000000000862	int
,	O
0.000000000000001223	int
,	O
0.000000000000000716	int
,	O
-	O
0.000000000000000024	int
,	O
-	O
0.000000000000000201	int
,	O
-	O
0.000000000000000082	int
,	O
0.000000000000000017	int
}	O
;	O
static	O
cheb_series	struct
AE11_cs	struct
=	O
{	O
AE11_data	array
,	O
38	int
,	O
-	O
1	int
,	O
1	int
,	O
20	int
}	O
;	O
static	O
double	O
AE12_data	array
[	O
25	int
]	O
=	O
{	O
0.582417495134726740	int
,	O
-	O
0.158348850905782750	int
,	O
-	O
0.006764275590323141	int
,	O
0.005125843950185725	int
,	O
0.000435232492169391	int
,	O
-	O
0.000143613366305483	int
,	O
-	O
0.000041801320556301	int
,	O
-	O
0.000002713395758640	int
,	O
0.000001151381913647	int
,	O
0.000000420650022012	int
,	O
0.000000066581901391	int
,	O
0.000000000662143777	int
,	O
-	O
0.000000002844104870	int
,	O
-	O
0.000000000940724197	int
,	O
-	O
0.000000000177476602	int
,	O
-	O
0.000000000015830222	int
,	O
0.000000000002905732	int
,	O
0.000000000001769356	int
,	O
0.000000000000492735	int
,	O
0.000000000000093709	int
,	O
0.000000000000010707	int
,	O
-	O
0.000000000000000537	int
,	O
-	O
0.000000000000000716	int
,	O
-	O
0.000000000000000244	int
,	O
-	O
0.000000000000000058	int
}	O
;	O
static	O
cheb_series	struct
AE12_cs	struct
=	O
{	O
AE12_data	array
,	O
24	int
,	O
-	O
1	int
,	O
1	int
,	O
15	int
}	O
;	O
static	O
double	O
E11_data	array
[	O
19	int
]	O
=	O
{	O
-	O
16.11346165557149402600	int
,	O
7.79407277874268027690	int
,	O
-	O
1.95540581886314195070	int
,	O
0.37337293866277945612	int
,	O
-	O
0.05692503191092901938	int
,	O
0.00721107776966009185	int
,	O
-	O
0.00078104901449841593	int
,	O
0.00007388093356262168	int
,	O
-	O
0.00000620286187580820	int
,	O
0.00000046816002303176	int
,	O
-	O
0.00000003209288853329	int
,	O
0.00000000201519974874	int
,	O
-	O
0.00000000011673686816	int
,	O
0.00000000000627627066	int
,	O
-	O
0.00000000000031481541	int
,	O
0.00000000000001479904	int
,	O
-	O
0.00000000000000065457	int
,	O
0.00000000000000002733	int
,	O
-	O
0.00000000000000000108	int
}	O
;	O
static	O
cheb_series	struct
E11_cs	struct
=	O
{	O
E11_data	array
,	O
18	int
,	O
-	O
1	int
,	O
1	int
,	O
13	int
}	O
;	O
static	O
double	O
E12_data	array
[	O
16	int
]	O
=	O
{	O
-	O
0.03739021479220279500	int
,	O
0.04272398606220957700	int
,	O
-	O
0.13031820798497005440	int
,	O
0.01441912402469889073	int
,	O
-	O
0.00134617078051068022	int
,	O
0.00010731029253063780	int
,	O
-	O
0.00000742999951611943	int
,	O
0.00000045377325690753	int
,	O
-	O
0.00000002476417211390	int
,	O
0.00000000122076581374	int
,	O
-	O
0.00000000005485141480	int
,	O
0.00000000000226362142	int
,	O
-	O
0.00000000000008635897	int
,	O
0.00000000000000306291	int
,	O
-	O
0.00000000000000010148	int
,	O
0.00000000000000000315	int
}	O
;	O
static	O
cheb_series	struct
E12_cs	struct
=	O
{	O
E12_data	array
,	O
15	int
,	O
-	O
1	int
,	O
1	int
,	O
10	int
}	O
;	O
static	O
double	O
AE13_data	array
[	O
25	int
]	O
=	O
{	O
-	O
0.605773246640603460	int
,	O
-	O
0.112535243483660900	int
,	O
0.013432266247902779	int
,	O
-	O
0.001926845187381145	int
,	O
0.000309118337720603	int
,	O
-	O
0.000053564132129618	int
,	O
0.000009827812880247	int
,	O
-	O
0.000001885368984916	int
,	O
0.000000374943193568	int
,	O
-	O
0.000000076823455870	int
,	O
0.000000016143270567	int
,	O
-	O
0.000000003466802211	int
,	O
0.000000000758754209	int
,	O
-	O
0.000000000168864333	int
,	O
0.000000000038145706	int
,	O
-	O
0.000000000008733026	int
,	O
0.000000000002023672	int
,	O
-	O
0.000000000000474132	int
,	O
0.000000000000112211	int
,	O
-	O
0.000000000000026804	int
,	O
0.000000000000006457	int
,	O
-	O
0.000000000000001568	int
,	O
0.000000000000000383	int
,	O
-	O
0.000000000000000094	int
,	O
0.000000000000000023	int
}	O
;	O
static	O
cheb_series	struct
AE13_cs	struct
=	O
{	O
AE13_data	array
,	O
24	int
,	O
-	O
1	int
,	O
1	int
,	O
15	int
}	O
;	O
static	O
double	O
AE14_data	array
[	O
26	int
]	O
=	O
{	O
-	O
0.18929180007530170	int
,	O
-	O
0.08648117855259871	int
,	O
0.00722410154374659	int
,	O
-	O
0.00080975594575573	int
,	O
0.00010999134432661	int
,	O
-	O
0.00001717332998937	int
,	O
0.00000298562751447	int
,	O
-	O
0.00000056596491457	int
,	O
0.00000011526808397	int
,	O
-	O
0.00000002495030440	int
,	O
0.00000000569232420	int
,	O
-	O
0.00000000135995766	int
,	O
0.00000000033846628	int
,	O
-	O
0.00000000008737853	int
,	O
0.00000000002331588	int
,	O
-	O
0.00000000000641148	int
,	O
0.00000000000181224	int
,	O
-	O
0.00000000000052538	int
,	O
0.00000000000015592	int
,	O
-	O
0.00000000000004729	int
,	O
0.00000000000001463	int
,	O
-	O
0.00000000000000461	int
,	O
0.00000000000000148	int
,	O
-	O
0.00000000000000048	int
,	O
0.00000000000000016	int
,	O
-	O
0.00000000000000005	int
}	O
;	O
static	O
cheb_series	struct
AE14_cs	struct
=	O
{	O
AE14_data	array
,	O
25	int
,	O
-	O
1	int
,	O
1	int
,	O
13	int
}	O
;	O
static	O
int	O
expint_E1_impl	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
,	O
const	O
int	O
scale	int
)	O
{	O
const	O
double	O
xmaxt	double
=	O
-	O
GSL_LOG_DBL_MIN	O
;	O
const	O
double	O
xmax	double
=	O
xmaxt	double
-	O
log	function
(	O
xmaxt	double
)	O
;	O
if	O
(	O
x	double
<	O
-	O
xmax	double
&&	O
!	O
scale	int
)	O
{	O
OVERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<=	O
-	O
10.0	int
)	O
{	O
const	O
double	O
s	double
=	O
1.0	int
/	O
x	double
*	O
(	O
scale	int
?	O
1.0	int
:	O
exp	function
(	O
-	O
x	double
)	O
)	O
;	O
gsl_sf_result	struct
result_c	struct
;	O
cheb_eval_e	function
(	O
&	O
AE11_cs	struct
,	O
20.0	int
/	O
x	double
+	O
1.0	int
,	O
&	O
result_c	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
s	double
*	O
(	O
1.0	int
+	O
result_c	struct
.	O
val	double
)	O
;	O
result	pointer
->	O
err	double
=	O
s	double
*	O
result_c	struct
.	O
err	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
x	double
)	O
+	O
1.0	int
)	O
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<=	O
-	O
4.0	int
)	O
{	O
const	O
double	O
s	double
=	O
1.0	int
/	O
x	double
*	O
(	O
scale	int
?	O
1.0	int
:	O
exp	function
(	O
-	O
x	double
)	O
)	O
;	O
gsl_sf_result	struct
result_c	struct
;	O
cheb_eval_e	function
(	O
&	O
AE12_cs	struct
,	O
(	O
40.0	int
/	O
x	double
+	O
7.0	int
)	O
/	O
3.0	int
,	O
&	O
result_c	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
s	double
*	O
(	O
1.0	int
+	O
result_c	struct
.	O
val	double
)	O
;	O
result	pointer
->	O
err	double
=	O
s	double
*	O
result_c	struct
.	O
err	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<=	O
-	O
1.0	int
)	O
{	O
const	O
double	O
ln_term	double
=	O
-	O
log	function
(	O
fabs	function
(	O
x	double
)	O
)	O
;	O
const	O
double	O
scale_factor	double
=	O
(	O
scale	int
?	O
exp	function
(	O
x	double
)	O
:	O
1.0	int
)	O
;	O
gsl_sf_result	struct
result_c	struct
;	O
cheb_eval_e	function
(	O
&	O
E11_cs	struct
,	O
(	O
2.0	int
*	O
x	double
+	O
5.0	int
)	O
/	O
3.0	int
,	O
&	O
result_c	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
scale_factor	double
*	O
(	O
ln_term	double
+	O
result_c	struct
.	O
val	double
)	O
;	O
result	pointer
->	O
err	double
=	O
scale_factor	double
*	O
(	O
result_c	struct
.	O
err	double
+	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
ln_term	double
)	O
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<=	O
1.0	int
)	O
{	O
const	O
double	O
ln_term	double
=	O
-	O
log	function
(	O
fabs	function
(	O
x	double
)	O
)	O
;	O
const	O
double	O
scale_factor	double
=	O
(	O
scale	int
?	O
exp	function
(	O
x	double
)	O
:	O
1.0	int
)	O
;	O
gsl_sf_result	struct
result_c	struct
;	O
cheb_eval_e	function
(	O
&	O
E12_cs	struct
,	O
x	double
,	O
&	O
result_c	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
scale_factor	double
*	O
(	O
ln_term	double
-	O
0.6875	int
+	O
x	double
+	O
result_c	struct
.	O
val	double
)	O
;	O
result	pointer
->	O
err	double
=	O
scale_factor	double
*	O
(	O
result_c	struct
.	O
err	double
+	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
ln_term	double
)	O
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<=	O
4.0	int
)	O
{	O
const	O
double	O
s	double
=	O
1.0	int
/	O
x	double
*	O
(	O
scale	int
?	O
1.0	int
:	O
exp	function
(	O
-	O
x	double
)	O
)	O
;	O
gsl_sf_result	struct
result_c	struct
;	O
cheb_eval_e	function
(	O
&	O
AE13_cs	struct
,	O
(	O
8.0	int
/	O
x	double
-	O
5.0	int
)	O
/	O
3.0	int
,	O
&	O
result_c	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
s	double
*	O
(	O
1.0	int
+	O
result_c	struct
.	O
val	double
)	O
;	O
result	pointer
->	O
err	double
=	O
s	double
*	O
result_c	struct
.	O
err	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<=	O
xmax	double
||	O
scale	int
)	O
{	O
const	O
double	O
s	double
=	O
1.0	int
/	O
x	double
*	O
(	O
scale	int
?	O
1.0	int
:	O
exp	function
(	O
-	O
x	double
)	O
)	O
;	O
gsl_sf_result	struct
result_c	struct
;	O
cheb_eval_e	function
(	O
&	O
AE14_cs	struct
,	O
8.0	int
/	O
x	double
-	O
1.0	int
,	O
&	O
result_c	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
s	double
*	O
(	O
1.0	int
+	O
result_c	struct
.	O
val	double
)	O
;	O
result	pointer
->	O
err	double
=	O
s	double
*	O
(	O
GSL_DBL_EPSILON	int
+	O
result_c	struct
.	O
err	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
(	O
x	double
+	O
1.0	int
)	O
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
if	O
(	O
result	pointer
->	O
val	double
==	O
0.0	int
)	O
UNDERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
else	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
UNDERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
}	O
static	O
int	O
expint_E2_impl	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
,	O
const	O
int	O
scale	int
)	O
{	O
const	O
double	O
xmaxt	double
=	O
-	O
GSL_LOG_DBL_MIN	O
;	O
const	O
double	O
xmax	double
=	O
xmaxt	double
-	O
log	function
(	O
xmaxt	double
)	O
;	O
if	O
(	O
x	double
<	O
-	O
xmax	double
&&	O
!	O
scale	int
)	O
{	O
OVERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
100.0	int
)	O
{	O
const	O
double	O
ex	double
=	O
(	O
scale	int
?	O
1.0	int
:	O
exp	function
(	O
-	O
x	double
)	O
)	O
;	O
gsl_sf_result	struct
result_E1	struct
;	O
int	O
stat_E1	int
=	O
expint_E1_impl	function
(	O
x	double
,	O
&	O
result_E1	struct
,	O
scale	int
)	O
;	O
result	pointer
->	O
val	double
=	O
ex	double
-	O
x	double
*	O
result_E1	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
ex	double
+	O
fabs	function
(	O
x	double
)	O
*	O
result_E1	struct
.	O
err	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
stat_E1	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
xmax	double
||	O
scale	int
)	O
{	O
const	O
double	O
s	double
=	O
(	O
scale	int
?	O
1.0	int
:	O
exp	function
(	O
-	O
x	double
)	O
)	O
;	O
const	O
double	O
c1	double
=	O
-	O
2.0	int
;	O
const	O
double	O
c2	double
=	O
6.0	int
;	O
const	O
double	O
c3	double
=	O
-	O
24.0	int
;	O
const	O
double	O
c4	double
=	O
120.0	int
;	O
const	O
double	O
c5	double
=	O
-	O
720.0	int
;	O
const	O
double	O
c6	double
=	O
5040.0	int
;	O
const	O
double	O
c7	double
=	O
-	O
40320.0	int
;	O
const	O
double	O
c8	double
=	O
362880.0	int
;	O
const	O
double	O
c9	double
=	O
-	O
3628800.0	int
;	O
const	O
double	O
c10	double
=	O
39916800.0	int
;	O
const	O
double	O
c11	double
=	O
-	O
479001600.0	int
;	O
const	O
double	O
c12	double
=	O
6227020800.0	int
;	O
const	O
double	O
c13	double
=	O
-	O
87178291200.0	int
;	O
const	O
double	O
y	double
=	O
1.0	int
/	O
x	double
;	O
const	O
double	O
sum6	double
=	O
c6	double
+	O
y	double
*	O
(	O
c7	double
+	O
y	double
*	O
(	O
c8	double
+	O
y	double
*	O
(	O
c9	double
+	O
y	double
*	O
(	O
c10	double
+	O
y	double
*	O
(	O
c11	double
+	O
y	double
*	O
(	O
c12	double
+	O
y	double
*	O
c13	double
)	O
)	O
)	O
)	O
)	O
)	O
;	O
const	O
double	O
sum	double
=	O
y	double
*	O
(	O
c1	double
+	O
y	double
*	O
(	O
c2	double
+	O
y	double
*	O
(	O
c3	double
+	O
y	double
*	O
(	O
c4	double
+	O
y	double
*	O
(	O
c5	double
+	O
y	double
*	O
sum6	double
)	O
)	O
)	O
)	O
)	O
;	O
result	pointer
->	O
val	double
=	O
s	double
*	O
(	O
1.0	int
+	O
sum	double
)	O
/	O
x	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
(	O
x	double
+	O
1.0	int
)	O
*	O
GSL_DBL_EPSILON	int
*	O
result	pointer
->	O
val	double
;	O
if	O
(	O
result	pointer
->	O
val	double
==	O
0.0	int
)	O
UNDERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
else	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
UNDERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
}	O
static	O
int	O
expint_En_impl	function
(	O
const	O
int	O
n	int
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
,	O
const	O
int	O
scale	int
)	O
{	O
if	O
(	O
n	int
<	O
0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
n	int
==	O
0	int
)	O
{	O
if	O
(	O
x	double
==	O
0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
{	O
result	pointer
->	O
val	double
=	O
(	O
scale	int
?	O
1.0	int
:	O
exp	function
(	O
-	O
x	double
)	O
)	O
/	O
x	double
;	O
result	pointer
->	O
err	double
=	O
2	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
CHECK_UNDERFLOW	O
(	O
result	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
else	O
if	O
(	O
n	int
==	O
1	int
)	O
{	O
return	O
expint_E1_impl	function
(	O
x	double
,	O
result	pointer
,	O
scale	int
)	O
;	O
}	O
else	O
if	O
(	O
n	int
==	O
2	int
)	O
{	O
return	O
expint_E2_impl	function
(	O
x	double
,	O
result	pointer
,	O
scale	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
x	double
<	O
0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
if	O
(	O
x	double
==	O
0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
(	O
scale	int
?	O
exp	function
(	O
x	double
)	O
:	O
1	int
)	O
*	O
(	O
1	int
/	O
(	O
n	int
-	O
1.0	int
)	O
)	O
;	O
result	pointer
->	O
err	double
=	O
2	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
CHECK_UNDERFLOW	O
(	O
result	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct
result_g	struct
;	O
double	O
prefactor	double
=	O
pow	function
(	O
x	double
,	O
n	int
-	O
1	int
)	O
;	O
int	O
status	int
=	O
gsl_sf_gamma_inc_e	function
(	O
1	int
-	O
n	int
,	O
x	double
,	O
&	O
result_g	struct
)	O
;	O
double	O
scale_factor	double
=	O
(	O
scale	int
?	O
exp	function
(	O
x	double
)	O
:	O
1.0	int
)	O
;	O
result	pointer
->	O
val	double
=	O
scale_factor	double
*	O
prefactor	double
*	O
result_g	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
2	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
2	int
*	O
fabs	function
(	O
scale_factor	double
*	O
prefactor	double
*	O
result_g	struct
.	O
err	double
)	O
;	O
if	O
(	O
status	int
==	O
GSL_SUCCESS	int
)	O
CHECK_UNDERFLOW	O
(	O
result	pointer
)	O
;	O
return	O
status	int
;	O
}	O
}	O
}	O
int	O
gsl_sf_expint_E1_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
return	O
expint_E1_impl	function
(	O
x	double
,	O
result	pointer
,	O
0	int
)	O
;	O
}	O
int	O
gsl_sf_expint_E1_scaled_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
return	O
expint_E1_impl	function
(	O
x	double
,	O
result	pointer
,	O
1	int
)	O
;	O
}	O
int	O
gsl_sf_expint_E2_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
return	O
expint_E2_impl	function
(	O
x	double
,	O
result	pointer
,	O
0	int
)	O
;	O
}	O
int	O
gsl_sf_expint_E2_scaled_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
return	O
expint_E2_impl	function
(	O
x	double
,	O
result	pointer
,	O
1	int
)	O
;	O
}	O
int	O
gsl_sf_expint_En_e	function
(	O
const	O
int	O
n	int
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
return	O
expint_En_impl	function
(	O
n	int
,	O
x	double
,	O
result	pointer
,	O
0	int
)	O
;	O
}	O
int	O
gsl_sf_expint_En_scaled_e	function
(	O
const	O
int	O
n	int
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
return	O
expint_En_impl	function
(	O
n	int
,	O
x	double
,	O
result	pointer
,	O
1	int
)	O
;	O
}	O
int	O
gsl_sf_expint_Ei_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
{	O
int	O
status	int
=	O
gsl_sf_expint_E1_e	function
(	O
-	O
x	double
,	O
result	pointer
)	O
;	O
result	pointer
->	O
val	double
=	O
-	O
result	pointer
->	O
val	double
;	O
return	O
status	int
;	O
}	O
}	O
int	O
gsl_sf_expint_Ei_scaled_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
{	O
int	O
status	int
=	O
gsl_sf_expint_E1_scaled_e	function
(	O
-	O
x	double
,	O
result	pointer
)	O
;	O
result	pointer
->	O
val	double
=	O
-	O
result	pointer
->	O
val	double
;	O
return	O
status	int
;	O
}	O
}	O
double	O
gsl_sf_expint_E1	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_expint_E1_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_expint_E1_scaled	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_expint_E1_scaled_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_expint_E2	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_expint_E2_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_expint_E2_scaled	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_expint_E2_scaled_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_expint_En	function
(	O
const	O
int	O
n	int
,	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_expint_En_e	function
(	O
n	int
,	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_expint_En_scaled	function
(	O
const	O
int	O
n	int
,	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_expint_En_scaled_e	function
(	O
n	int
,	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_expint_Ei	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_expint_Ei_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_expint_Ei_scaled	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_expint_Ei_scaled_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
