const	O
unsigned	O
char	O
jacobi_table	O
[	O
208	int
]	O
=	O
{	O
}	O
;	O
static	O
void	O
jacobi_hook	function
(	O
void	O
*	O
p	pointer
,	O
mp_srcptr	pointer
gp	pointer
,	O
mp_size_t	long
gn	long
,	O
mp_srcptr	pointer
qp	pointer
,	O
mp_size_t	long
qn	long
,	O
int	O
d	long
)	O
{	O
unsigned	O
*	O
bitsp	pointer
=	O
(	O
unsigned	O
*	O
)	O
p	pointer
;	O
if	O
(	O
gp	pointer
)	O
{	O
ASSERT	O
(	O
gn	long
>	O
0	int
)	O
;	O
if	O
(	O
gn	long
!=	O
1	int
||	O
gp	pointer
[	O
0	int
]	O
!=	O
1	int
)	O
{	O
*	O
bitsp	pointer
=	O
BITS_FAIL	int
;	O
return	O
;	O
}	O
}	O
if	O
(	O
qp	pointer
)	O
{	O
ASSERT	O
(	O
qn	long
>	O
0	int
)	O
;	O
ASSERT	O
(	O
d	long
>=	O
0	int
)	O
;	O
*	O
bitsp	pointer
=	O
mpn_jacobi_update	function
(	O
*	O
bitsp	pointer
,	O
d	long
,	O
qp	pointer
[	O
0	int
]	O
&	O
3	int
)	O
;	O
}	O
}	O
int	O
mpn_jacobi_n	O
(	O
mp_ptr	pointer
ap	pointer
,	O
mp_ptr	pointer
bp	pointer
,	O
mp_size_t	long
n	long
,	O
unsigned	O
bits	int
)	O
{	O
mp_size_t	long
scratch	long
;	O
mp_size_t	long
matrix_scratch	long
;	O
mp_ptr	pointer
tp	pointer
;	O
TMP_DECL	O
;	O
ASSERT	O
(	O
n	long
>	O
0	int
)	O
;	O
ASSERT	O
(	O
(	O
ap	pointer
[	O
n	long
-	O
1	int
]	O
|	O
bp	pointer
[	O
n	long
-	O
1	int
]	O
)	O
>	O
0	int
)	O
;	O
ASSERT	O
(	O
(	O
bp	pointer
[	O
0	int
]	O
|	O
ap	pointer
[	O
0	int
]	O
)	O
&	O
1	int
)	O
;	O
scratch	long
=	O
MPN_GCD_SUBDIV_STEP_ITCH	O
(	O
n	long
)	O
;	O
if	O
(	O
ABOVE_THRESHOLD	O
(	O
n	long
,	O
GCD_DC_THRESHOLD	int
)	O
)	O
{	O
mp_size_t	long
hgcd_scratch	long
;	O
mp_size_t	long
update_scratch	long
;	O
mp_size_t	long
p	pointer
=	O
CHOOSE_P	O
(	O
n	long
)	O
;	O
mp_size_t	long
dc_scratch	long
;	O
matrix_scratch	long
=	O
MPN_HGCD_MATRIX_INIT_ITCH	O
(	O
n	long
-	O
p	pointer
)	O
;	O
hgcd_scratch	long
=	O
mpn_hgcd_itch	O
(	O
n	long
-	O
p	pointer
)	O
;	O
update_scratch	long
=	O
p	pointer
+	O
n	long
-	O
1	int
;	O
dc_scratch	long
=	O
matrix_scratch	long
+	O
MAX	O
(	O
hgcd_scratch	long
,	O
update_scratch	long
)	O
;	O
if	O
(	O
dc_scratch	long
>	O
scratch	long
)	O
scratch	long
=	O
dc_scratch	long
;	O
}	O
TMP_MARK	O
;	O
tp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
scratch	long
)	O
;	O
while	O
(	O
ABOVE_THRESHOLD	O
(	O
n	long
,	O
JACOBI_DC_THRESHOLD	O
)	O
)	O
{	O
struct	O
hgcd_matrix	struct
M	struct
;	O
mp_size_t	long
p	pointer
=	O
2	int
*	O
n	long
/	O
3	int
;	O
mp_size_t	long
matrix_scratch	long
=	O
MPN_HGCD_MATRIX_INIT_ITCH	O
(	O
n	long
-	O
p	pointer
)	O
;	O
mp_size_t	long
nn	long
;	O
mpn_hgcd_matrix_init	O
(	O
&	O
M	struct
,	O
n	long
-	O
p	pointer
,	O
tp	pointer
)	O
;	O
nn	long
=	O
mpn_hgcd_jacobi	O
(	O
ap	pointer
+	O
p	pointer
,	O
bp	pointer
+	O
p	pointer
,	O
n	long
-	O
p	pointer
,	O
&	O
M	struct
,	O
&	O
bits	int
,	O
tp	pointer
+	O
matrix_scratch	long
)	O
;	O
if	O
(	O
nn	long
>	O
0	int
)	O
{	O
ASSERT	O
(	O
M	struct
.	O
n	long
<=	O
(	O
n	long
-	O
p	pointer
-	O
1	int
)	O
/	O
2	int
)	O
;	O
ASSERT	O
(	O
M	struct
.	O
n	long
+	O
p	pointer
<=	O
(	O
p	pointer
+	O
n	long
-	O
1	int
)	O
/	O
2	int
)	O
;	O
n	long
=	O
mpn_hgcd_matrix_adjust	O
(	O
&	O
M	struct
,	O
p	pointer
+	O
nn	long
,	O
ap	pointer
,	O
bp	pointer
,	O
p	pointer
,	O
tp	pointer
+	O
matrix_scratch	long
)	O
;	O
}	O
else	O
{	O
n	long
=	O
mpn_gcd_subdiv_step	O
(	O
ap	pointer
,	O
bp	pointer
,	O
n	long
,	O
0	int
,	O
jacobi_hook	function
,	O
&	O
bits	int
,	O
tp	pointer
)	O
;	O
if	O
(	O
!	O
n	long
)	O
{	O
TMP_FREE	O
;	O
return	O
bits	int
==	O
BITS_FAIL	int
?	O
0	int
:	O
mpn_jacobi_finish	function
(	O
bits	int
)	O
;	O
}	O
}	O
}	O
while	O
(	O
n	long
>	O
2	int
)	O
{	O
struct	O
hgcd_matrix1	struct
M	struct
;	O
mp_limb_t	long
ah	long
,	O
al	long
,	O
bh	long
,	O
bl	long
;	O
mp_limb_t	long
mask	long
;	O
mask	long
=	O
ap	pointer
[	O
n	long
-	O
1	int
]	O
|	O
bp	pointer
[	O
n	long
-	O
1	int
]	O
;	O
ASSERT	O
(	O
mask	long
>	O
0	int
)	O
;	O
if	O
(	O
mask	long
&	O
GMP_NUMB_HIGHBIT	O
)	O
{	O
ah	long
=	O
ap	pointer
[	O
n	long
-	O
1	int
]	O
;	O
al	long
=	O
ap	pointer
[	O
n	long
-	O
2	int
]	O
;	O
bh	long
=	O
bp	pointer
[	O
n	long
-	O
1	int
]	O
;	O
bl	long
=	O
bp	pointer
[	O
n	long
-	O
2	int
]	O
;	O
}	O
else	O
{	O
int	O
shift	long
;	O
count_leading_zeros	O
(	O
shift	long
,	O
mask	long
)	O
;	O
ah	long
=	O
MPN_EXTRACT_NUMB	O
(	O
shift	long
,	O
ap	pointer
[	O
n	long
-	O
1	int
]	O
,	O
ap	pointer
[	O
n	long
-	O
2	int
]	O
)	O
;	O
al	long
=	O
MPN_EXTRACT_NUMB	O
(	O
shift	long
,	O
ap	pointer
[	O
n	long
-	O
2	int
]	O
,	O
ap	pointer
[	O
n	long
-	O
3	int
]	O
)	O
;	O
bh	long
=	O
MPN_EXTRACT_NUMB	O
(	O
shift	long
,	O
bp	pointer
[	O
n	long
-	O
1	int
]	O
,	O
bp	pointer
[	O
n	long
-	O
2	int
]	O
)	O
;	O
bl	long
=	O
MPN_EXTRACT_NUMB	O
(	O
shift	long
,	O
bp	pointer
[	O
n	long
-	O
2	int
]	O
,	O
bp	pointer
[	O
n	long
-	O
3	int
]	O
)	O
;	O
}	O
if	O
(	O
mpn_hgcd2_jacobi	O
(	O
ah	long
,	O
al	long
,	O
bh	long
,	O
bl	long
,	O
&	O
M	struct
,	O
&	O
bits	int
)	O
)	O
{	O
n	long
=	O
mpn_matrix22_mul1_inverse_vector	O
(	O
&	O
M	struct
,	O
tp	pointer
,	O
ap	pointer
,	O
bp	pointer
,	O
n	long
)	O
;	O
MP_PTR_SWAP	O
(	O
ap	pointer
,	O
tp	pointer
)	O
;	O
}	O
else	O
{	O
n	long
=	O
mpn_gcd_subdiv_step	O
(	O
ap	pointer
,	O
bp	pointer
,	O
n	long
,	O
0	int
,	O
&	O
jacobi_hook	function
,	O
&	O
bits	int
,	O
tp	pointer
)	O
;	O
if	O
(	O
!	O
n	long
)	O
{	O
TMP_FREE	O
;	O
return	O
bits	int
==	O
BITS_FAIL	int
?	O
0	int
:	O
mpn_jacobi_finish	function
(	O
bits	int
)	O
;	O
}	O
}	O
}	O
if	O
(	O
bits	int
>=	O
16	int
)	O
MP_PTR_SWAP	O
(	O
ap	pointer
,	O
bp	pointer
)	O
;	O
ASSERT	O
(	O
bp	pointer
[	O
0	int
]	O
&	O
1	int
)	O
;	O
if	O
(	O
n	long
==	O
1	int
)	O
{	O
mp_limb_t	long
al	long
,	O
bl	long
;	O
al	long
=	O
ap	pointer
[	O
0	int
]	O
;	O
bl	long
=	O
bp	pointer
[	O
0	int
]	O
;	O
TMP_FREE	O
;	O
if	O
(	O
bl	long
==	O
1	int
)	O
return	O
1	int
-	O
2	int
*	O
(	O
bits	int
&	O
1	int
)	O
;	O
else	O
return	O
mpn_jacobi_base	O
(	O
al	long
,	O
bl	long
,	O
bits	int
<<	O
1	int
)	O
;	O
}	O
else	O
{	O
int	O
res	int
=	O
mpn_jacobi_2	O
(	O
ap	pointer
,	O
bp	pointer
,	O
bits	int
&	O
1	int
)	O
;	O
TMP_FREE	O
;	O
return	O
res	int
;	O
}	O
}	O
