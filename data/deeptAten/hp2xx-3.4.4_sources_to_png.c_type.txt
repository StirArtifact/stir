int	O
pdImageColorAllocate	function
(	O
pdImagePtr	pointer
,	O
int	O
,	O
int	O
,	O
int	O
)	O
;	O
int	O
PicBuf_to_PNG	function
(	O
const	O
GEN_PAR	struct
*	O
pg	pointer
,	O
const	O
OUT_PAR	struct
*	O
po	pointer
)	O
{	O
FILE	struct
*	O
fd	pointer
;	O
int	O
row_c	int
,	O
x	int
;	O
const	O
RowBuf	struct
*	O
row	pointer
;	O
const	O
PicBuf	struct
*	O
pb	pointer
;	O
int	O
ppm	array
[	O
]	O
[	O
3	int
]	O
=	O
{	O
{	O
255	int
,	O
255	int
,	O
255	int
}	O
,	O
{	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
int	O
colour	int
;	O
pdImagePtr	pointer
im	pointer
;	O
int	O
pdcol	int
;	O
if	O
(	O
pg	pointer
==	O
NULL	O
||	O
po	pointer
==	O
NULL	O
)	O
return	O
ERROR	O
;	O
pb	pointer
=	O
po	pointer
->	O
picbuf	pointer
;	O
if	O
(	O
pb	pointer
==	O
NULL	O
)	O
return	O
ERROR	O
;	O
if	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
Eprintf	function
(	O
"\nWriting PNG output: %s\n"	pointer
,	O
po	pointer
->	O
outfile	pointer
)	O
;	O
if	O
(	O
*	O
po	pointer
->	O
outfile	pointer
!=	O
'-'	O
)	O
{	O
if	O
(	O
(	O
fd	pointer
=	O
fopen	function
(	O
po	pointer
->	O
outfile	pointer
,	O
WRITE_BIN	pointer
)	O
)	O
==	O
NULL	O
)	O
goto	O
ERROR_EXIT	O
;	O
}	O
else	O
fd	pointer
=	O
stdout	pointer
;	O
im	pointer
=	O
pdImageCreate	function
(	O
pb	pointer
->	O
nc	int
,	O
pb	pointer
->	O
nr	int
)	O
;	O
if	O
(	O
pb	pointer
->	O
depth	int
>	O
1	int
)	O
{	O
for	O
(	O
colour	int
=	O
0	int
;	O
colour	int
<	O
PDNCOL	int
;	O
colour	int
++	O
)	O
pdcol	int
=	O
pdImageColorAllocate	function
(	O
im	pointer
,	O
pt	struct
.	O
clut	array
[	O
colour	int
]	O
[	O
0	int
]	O
,	O
pt	struct
.	O
clut	array
[	O
colour	int
]	O
[	O
1	int
]	O
,	O
pt	struct
.	O
clut	array
[	O
colour	int
]	O
[	O
2	int
]	O
)	O
;	O
for	O
(	O
row_c	int
=	O
0	int
;	O
row_c	int
<	O
pb	pointer
->	O
nr	int
;	O
row_c	int
++	O
)	O
{	O
row	pointer
=	O
get_RowBuf	function
(	O
pb	pointer
,	O
pb	pointer
->	O
nr	int
-	O
row_c	int
-	O
1	int
)	O
;	O
if	O
(	O
row	pointer
==	O
NULL	O
)	O
continue	O
;	O
for	O
(	O
x	int
=	O
0	int
;	O
x	int
<	O
pb	pointer
->	O
nc	int
;	O
x	int
++	O
)	O
{	O
colour	int
=	O
index_from_RowBuf	function
(	O
row	pointer
,	O
x	int
,	O
pb	pointer
)	O
;	O
pdImageSetPixel	function
(	O
im	pointer
,	O
x	int
,	O
row_c	int
,	O
colour	int
)	O
;	O
}	O
if	O
(	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
&&	O
(	O
row_c	int
%	O
10	int
==	O
0	int
)	O
)	O
Eprintf	function
(	O
"."	pointer
)	O
;	O
}	O
}	O
else	O
{	O
for	O
(	O
colour	int
=	O
0	int
;	O
colour	int
<	O
2	int
;	O
colour	int
++	O
)	O
pdcol	int
=	O
pdImageColorAllocate	function
(	O
im	pointer
,	O
ppm	array
[	O
colour	int
]	O
[	O
0	int
]	O
,	O
ppm	array
[	O
colour	int
]	O
[	O
1	int
]	O
,	O
ppm	array
[	O
colour	int
]	O
[	O
2	int
]	O
)	O
;	O
for	O
(	O
row_c	int
=	O
0	int
;	O
row_c	int
<	O
pb	pointer
->	O
nr	int
;	O
row_c	int
++	O
)	O
{	O
row	pointer
=	O
get_RowBuf	function
(	O
pb	pointer
,	O
pb	pointer
->	O
nr	int
-	O
row_c	int
-	O
1	int
)	O
;	O
if	O
(	O
row	pointer
==	O
NULL	O
)	O
continue	O
;	O
for	O
(	O
x	int
=	O
0	int
;	O
x	int
<	O
pb	pointer
->	O
nc	int
;	O
x	int
++	O
)	O
{	O
colour	int
=	O
index_from_RowBuf	function
(	O
row	pointer
,	O
x	int
,	O
pb	pointer
)	O
;	O
pdImageSetPixel	function
(	O
im	pointer
,	O
x	int
,	O
row_c	int
,	O
colour	int
)	O
;	O
}	O
if	O
(	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
&&	O
(	O
row_c	int
%	O
10	int
==	O
0	int
)	O
)	O
Eprintf	function
(	O
"."	pointer
)	O
;	O
}	O
}	O
pdImagePNG	function
(	O
im	pointer
,	O
fd	pointer
)	O
;	O
pdImageDestroy	function
(	O
im	pointer
)	O
;	O
fflush	function
(	O
fd	pointer
)	O
;	O
if	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
Eprintf	function
(	O
"\n"	pointer
)	O
;	O
if	O
(	O
fd	pointer
!=	O
stdout	pointer
)	O
fclose	function
(	O
fd	pointer
)	O
;	O
return	O
0	int
;	O
ERROR_EXIT	O
:	O
PError	function
(	O
"write_PNG"	pointer
)	O
;	O
return	O
ERROR	O
;	O
}	O
pdImagePtr	pointer
pdImageCreate	function
(	O
sx	int
,	O
sy	int
)	O
int	O
sx	int
;	O
int	O
sy	int
;	O
{	O
int	O
i	int
;	O
pdImagePtr	pointer
im	pointer
;	O
im	pointer
=	O
(	O
pdImage	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
pdImage	struct
)	O
)	O
;	O
im	pointer
->	O
pixels	pointer
=	O
(	O
unsigned	O
char	O
*	O
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
unsigned	O
char	O
*	O
)	O
*	O
sy	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
(	O
i	int
<	O
sy	int
)	O
;	O
i	int
++	O
)	O
{	O
im	pointer
->	O
pixels	pointer
[	O
i	int
]	O
=	O
(	O
unsigned	O
char	O
*	O
)	O
calloc	function
(	O
(	O
size_t	long
)	O
sx	int
,	O
sizeof	O
(	O
unsigned	O
char	O
)	O
)	O
;	O
}	O
im	pointer
->	O
sx	int
=	O
sx	int
;	O
im	pointer
->	O
sy	int
=	O
sy	int
;	O
im	pointer
->	O
colorsTotal	int
=	O
0	int
;	O
im	pointer
->	O
transparent	int
=	O
(	O
-	O
1	int
)	O
;	O
return	O
im	pointer
;	O
}	O
void	O
pdImageDestroy	function
(	O
im	pointer
)	O
pdImagePtr	pointer
im	pointer
;	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
(	O
i	int
<	O
im	pointer
->	O
sy	int
)	O
;	O
i	int
++	O
)	O
{	O
free	function
(	O
im	pointer
->	O
pixels	pointer
[	O
i	int
]	O
)	O
;	O
}	O
free	function
(	O
im	pointer
->	O
pixels	pointer
)	O
;	O
free	function
(	O
im	pointer
)	O
;	O
}	O
int	O
pdImageColorAllocate	function
(	O
im	pointer
,	O
r	char
,	O
g	char
,	O
b	char
)	O
pdImagePtr	pointer
im	pointer
;	O
int	O
r	char
;	O
int	O
g	char
;	O
int	O
b	char
;	O
{	O
int	O
i	int
;	O
int	O
ct	int
=	O
(	O
-	O
1	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
(	O
i	int
<	O
(	O
im	pointer
->	O
colorsTotal	int
)	O
)	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
im	pointer
->	O
open	array
[	O
i	int
]	O
)	O
{	O
ct	int
=	O
i	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
ct	int
==	O
(	O
-	O
1	int
)	O
)	O
{	O
ct	int
=	O
im	pointer
->	O
colorsTotal	int
;	O
if	O
(	O
ct	int
==	O
pdMaxColors	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
im	pointer
->	O
colorsTotal	int
++	O
;	O
}	O
im	pointer
->	O
red	int
[	O
ct	int
]	O
=	O
r	char
;	O
im	pointer
->	O
green	int
[	O
ct	int
]	O
=	O
g	char
;	O
im	pointer
->	O
blue	int
[	O
ct	int
]	O
=	O
b	char
;	O
im	pointer
->	O
open	array
[	O
ct	int
]	O
=	O
0	int
;	O
return	O
ct	int
;	O
}	O
void	O
pdImageColorTransparent	function
(	O
im	pointer
,	O
color	array
)	O
pdImagePtr	pointer
im	pointer
;	O
unsigned	O
char	O
color	array
;	O
{	O
im	pointer
->	O
transparent	int
=	O
color	array
;	O
}	O
void	O
pdImageSetPixel	function
(	O
im	pointer
,	O
x	int
,	O
y	int
,	O
color	array
)	O
pdImagePtr	pointer
im	pointer
;	O
int	O
x	int
;	O
int	O
y	int
;	O
unsigned	O
char	O
color	array
;	O
{	O
if	O
(	O
pdImageBoundsSafe	function
(	O
im	pointer
,	O
x	int
,	O
y	int
)	O
)	O
{	O
im	pointer
->	O
pixels	pointer
[	O
y	int
]	O
[	O
x	int
]	O
=	O
color	array
;	O
}	O
}	O
int	O
pdImageGetPixel	function
(	O
im	pointer
,	O
x	int
,	O
y	int
)	O
pdImagePtr	pointer
im	pointer
;	O
int	O
x	int
;	O
int	O
y	int
;	O
{	O
if	O
(	O
pdImageBoundsSafe	function
(	O
im	pointer
,	O
x	int
,	O
y	int
)	O
)	O
{	O
return	O
im	pointer
->	O
pixels	pointer
[	O
y	int
]	O
[	O
x	int
]	O
;	O
}	O
else	O
{	O
return	O
0	int
;	O
}	O
}	O
int	O
pdImageBoundsSafe	function
(	O
im	pointer
,	O
x	int
,	O
y	int
)	O
pdImagePtr	pointer
im	pointer
;	O
int	O
x	int
;	O
int	O
y	int
;	O
{	O
return	O
(	O
!	O
(	O
(	O
(	O
y	int
<	O
0	int
)	O
||	O
(	O
y	int
>=	O
im	pointer
->	O
sy	int
)	O
)	O
||	O
(	O
(	O
x	int
<	O
0	int
)	O
||	O
(	O
x	int
>=	O
im	pointer
->	O
sx	int
)	O
)	O
)	O
)	O
;	O
}	O
