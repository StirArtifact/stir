char	O
*	O
g_program	pointer
;	O
void	O
usage	function
(	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s file1 [file2 [...]]\n"	pointer
,	O
g_program	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
off64_t	long
file_length	function
(	O
fd	int
)	O
int	O
fd	int
;	O
{	O
off64_t	long
current	long
,	O
length	long
;	O
current	long
=	O
lseek64	function
(	O
fd	int
,	O
0	int
,	O
SEEK_CUR	int
)	O
;	O
length	long
=	O
lseek64	function
(	O
fd	int
,	O
0	int
,	O
SEEK_END	int
)	O
;	O
lseek64	function
(	O
fd	int
,	O
current	long
,	O
SEEK_SET	int
)	O
;	O
return	O
length	long
;	O
}	O
int	O
wipe	function
(	O
file	pointer
)	O
char	O
*	O
file	pointer
;	O
{	O
int	O
fd	int
;	O
unsigned	O
char	O
*	O
buf	pointer
;	O
off64_t	long
len	long
,	O
i	long
;	O
ssize_t	long
j	long
,	O
bytes_to_write	long
;	O
fd	int
=	O
open64	function
(	O
file	pointer
,	O
O_RDWR	int
|	O
O_BINARY	int
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: can't open file '%s'.\n"	pointer
,	O
g_program	pointer
,	O
file	pointer
)	O
;	O
return	O
1	int
;	O
}	O
len	long
=	O
file_length	function
(	O
fd	int
)	O
;	O
if	O
(	O
len	long
==	O
0	int
)	O
return	O
0	int
;	O
buf	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
malloc	function
(	O
WIPE_BUFFER_SIZE	O
)	O
;	O
if	O
(	O
buf	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: virtual memory exhausted.\n"	pointer
,	O
g_program	pointer
)	O
;	O
return	O
1	int
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
len	long
;	O
i	long
+=	O
WIPE_BUFFER_SIZE	O
)	O
{	O
bytes_to_write	long
=	O
min	O
(	O
len	long
-	O
i	long
,	O
WIPE_BUFFER_SIZE	O
)	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
bytes_to_write	long
;	O
j	long
++	O
)	O
buf	pointer
[	O
j	long
]	O
=	O
rand	function
(	O
)	O
%	O
0xFF	int
;	O
if	O
(	O
write	pointer
(	O
fd	int
,	O
buf	pointer
,	O
bytes_to_write	long
)	O
!=	O
bytes_to_write	long
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: can't write to file %s.\n"	pointer
,	O
g_program	pointer
,	O
file	pointer
)	O
;	O
return	O
1	int
;	O
}	O
}	O
close	pointer
(	O
fd	int
)	O
;	O
sync	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
main	function
(	O
argc	int
,	O
argv	array
)	O
int	O
argc	int
;	O
char	O
*	O
argv	array
[	O
]	O
;	O
{	O
int	O
i	long
,	O
errors	int
=	O
0	int
;	O
g_program	pointer
=	O
argv	array
[	O
0	int
]	O
;	O
if	O
(	O
argc	int
<	O
2	int
)	O
usage	function
(	O
)	O
;	O
srand	function
(	O
time	struct
(	O
NULL	O
)	O
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	int
;	O
i	long
++	O
)	O
errors	int
+=	O
wipe	function
(	O
argv	array
[	O
i	long
]	O
)	O
;	O
return	O
(	O
errors	int
!=	O
0	int
)	O
;	O
}	O
