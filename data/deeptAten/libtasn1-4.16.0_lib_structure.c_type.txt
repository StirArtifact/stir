extern	O
char	O
_asn1_identifierMissing	array
[	O
]	O
;	O
asn1_node	pointer
_asn1_add_single_node	function
(	O
unsigned	O
int	O
type	int
)	O
{	O
asn1_node	pointer
punt	pointer
;	O
punt	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
struct	O
asn1_node_st	struct
)	O
)	O
;	O
if	O
(	O
punt	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
punt	pointer
->	O
type	int
=	O
type	int
;	O
return	O
punt	pointer
;	O
}	O
asn1_node	pointer
_asn1_find_left	function
(	O
asn1_node_const	pointer
node	pointer
)	O
{	O
if	O
(	O
(	O
node	pointer
==	O
NULL	O
)	O
||	O
(	O
node	pointer
->	O
left	pointer
==	O
NULL	O
)	O
||	O
(	O
node	pointer
->	O
left	pointer
->	O
down	pointer
==	O
node	pointer
)	O
)	O
return	O
NULL	O
;	O
return	O
node	pointer
->	O
left	pointer
;	O
}	O
int	O
_asn1_create_static_structure	function
(	O
asn1_node_const	pointer
pointer	pointer
,	O
char	O
*	O
output_file_name	pointer
,	O
char	O
*	O
vector_name	pointer
)	O
{	O
FILE	struct
*	O
file	pointer
;	O
asn1_node_const	pointer
p	pointer
;	O
unsigned	O
long	O
t	long
;	O
file	pointer
=	O
fopen	function
(	O
output_file_name	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
file	pointer
==	O
NULL	O
)	O
return	O
ASN1_FILE_NOT_FOUND	int
;	O
fprintf	function
(	O
file	pointer
,	O
"#if HAVE_CONFIG_H\n"	pointer
)	O
;	O
fprintf	function
(	O
file	pointer
,	O
"# include \"config.h\"\n"	pointer
)	O
;	O
fprintf	function
(	O
file	pointer
,	O
"#endif\n\n"	pointer
)	O
;	O
fprintf	function
(	O
file	pointer
,	O
"#include <libtasn1.h>\n\n"	pointer
)	O
;	O
fprintf	function
(	O
file	pointer
,	O
"const asn1_static_node %s[] = {\n"	pointer
,	O
vector_name	pointer
)	O
;	O
p	pointer
=	O
pointer	pointer
;	O
while	O
(	O
p	pointer
)	O
{	O
fprintf	function
(	O
file	pointer
,	O
"  { "	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
name	pointer
[	O
0	int
]	O
!=	O
0	int
)	O
fprintf	function
(	O
file	pointer
,	O
"\"%s\", "	pointer
,	O
p	pointer
->	O
name	pointer
)	O
;	O
else	O
fprintf	function
(	O
file	pointer
,	O
"NULL, "	pointer
)	O
;	O
t	long
=	O
p	pointer
->	O
type	int
;	O
if	O
(	O
p	pointer
->	O
down	pointer
)	O
t	long
|=	O
CONST_DOWN	O
;	O
if	O
(	O
p	pointer
->	O
right	pointer
)	O
t	long
|=	O
CONST_RIGHT	O
;	O
fprintf	function
(	O
file	pointer
,	O
"%lu, "	pointer
,	O
t	long
)	O
;	O
if	O
(	O
p	pointer
->	O
value	pointer
)	O
fprintf	function
(	O
file	pointer
,	O
"\"%s\"},\n"	pointer
,	O
p	pointer
->	O
value	pointer
)	O
;	O
else	O
fprintf	function
(	O
file	pointer
,	O
"NULL },\n"	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
down	pointer
)	O
{	O
p	pointer
=	O
p	pointer
->	O
down	pointer
;	O
}	O
else	O
if	O
(	O
p	pointer
->	O
right	pointer
)	O
{	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
}	O
else	O
{	O
while	O
(	O
1	int
)	O
{	O
p	pointer
=	O
_asn1_find_up	function
(	O
p	pointer
)	O
;	O
if	O
(	O
p	pointer
==	O
pointer	pointer
)	O
{	O
p	pointer
=	O
NULL	O
;	O
break	O
;	O
}	O
if	O
(	O
p	pointer
->	O
right	pointer
)	O
{	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
break	O
;	O
}	O
}	O
}	O
}	O
fprintf	function
(	O
file	pointer
,	O
"  { NULL, 0, NULL }\n};\n"	pointer
)	O
;	O
fclose	function
(	O
file	pointer
)	O
;	O
return	O
ASN1_SUCCESS	int
;	O
}	O
int	O
asn1_array2tree	function
(	O
const	O
asn1_static_node	struct
*	O
array	pointer
,	O
asn1_node	pointer
*	O
definitions	pointer
,	O
char	O
*	O
errorDescription	pointer
)	O
{	O
asn1_node	pointer
p	pointer
,	O
p_last	pointer
=	O
NULL	O
;	O
unsigned	O
long	O
k	long
;	O
int	O
move	int
;	O
int	O
result	int
;	O
unsigned	O
int	O
type	int
;	O
list_type	struct
*	O
e_list	pointer
=	O
NULL	O
;	O
if	O
(	O
errorDescription	pointer
)	O
errorDescription	pointer
[	O
0	int
]	O
=	O
0	int
;	O
if	O
(	O
*	O
definitions	pointer
!=	O
NULL	O
)	O
return	O
ASN1_ELEMENT_NOT_EMPTY	int
;	O
move	int
=	O
UP	int
;	O
for	O
(	O
k	long
=	O
0	int
;	O
array	pointer
[	O
k	long
]	O
.	O
value	pointer
||	O
array	pointer
[	O
k	long
]	O
.	O
type	int
||	O
array	pointer
[	O
k	long
]	O
.	O
name	pointer
;	O
k	long
++	O
)	O
{	O
type	int
=	O
convert_old_type	function
(	O
array	pointer
[	O
k	long
]	O
.	O
type	int
)	O
;	O
p	pointer
=	O
_asn1_add_static_node	function
(	O
&	O
e_list	pointer
,	O
type	int
&	O
(	O
~	O
CONST_DOWN	O
)	O
)	O
;	O
if	O
(	O
array	pointer
[	O
k	long
]	O
.	O
name	pointer
)	O
_asn1_set_name	function
(	O
p	pointer
,	O
array	pointer
[	O
k	long
]	O
.	O
name	pointer
)	O
;	O
if	O
(	O
array	pointer
[	O
k	long
]	O
.	O
value	pointer
)	O
_asn1_set_value	function
(	O
p	pointer
,	O
array	pointer
[	O
k	long
]	O
.	O
value	pointer
,	O
strlen	function
(	O
array	pointer
[	O
k	long
]	O
.	O
value	pointer
)	O
+	O
1	int
)	O
;	O
if	O
(	O
*	O
definitions	pointer
==	O
NULL	O
)	O
*	O
definitions	pointer
=	O
p	pointer
;	O
if	O
(	O
move	int
==	O
DOWN	int
)	O
{	O
if	O
(	O
p_last	pointer
&&	O
p_last	pointer
->	O
down	pointer
)	O
_asn1_delete_structure	function
(	O
e_list	pointer
,	O
&	O
p_last	pointer
->	O
down	pointer
,	O
0	int
)	O
;	O
_asn1_set_down	function
(	O
p_last	pointer
,	O
p	pointer
)	O
;	O
}	O
else	O
if	O
(	O
move	int
==	O
RIGHT	int
)	O
{	O
if	O
(	O
p_last	pointer
&&	O
p_last	pointer
->	O
right	pointer
)	O
_asn1_delete_structure	function
(	O
e_list	pointer
,	O
&	O
p_last	pointer
->	O
right	pointer
,	O
0	int
)	O
;	O
_asn1_set_right	function
(	O
p_last	pointer
,	O
p	pointer
)	O
;	O
}	O
p_last	pointer
=	O
p	pointer
;	O
if	O
(	O
type	int
&	O
CONST_DOWN	O
)	O
move	int
=	O
DOWN	int
;	O
else	O
if	O
(	O
type	int
&	O
CONST_RIGHT	O
)	O
move	int
=	O
RIGHT	int
;	O
else	O
{	O
while	O
(	O
p_last	pointer
!=	O
*	O
definitions	pointer
)	O
{	O
p_last	pointer
=	O
_asn1_find_up	function
(	O
p_last	pointer
)	O
;	O
if	O
(	O
p_last	pointer
==	O
NULL	O
)	O
break	O
;	O
if	O
(	O
p_last	pointer
->	O
type	int
&	O
CONST_RIGHT	O
)	O
{	O
p_last	pointer
->	O
type	int
&=	O
~	O
CONST_RIGHT	O
;	O
move	int
=	O
RIGHT	int
;	O
break	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
p_last	pointer
==	O
*	O
definitions	pointer
)	O
{	O
result	int
=	O
_asn1_check_identifier	function
(	O
*	O
definitions	pointer
)	O
;	O
if	O
(	O
result	int
==	O
ASN1_SUCCESS	int
)	O
{	O
_asn1_change_integer_value	function
(	O
*	O
definitions	pointer
)	O
;	O
result	int
=	O
_asn1_expand_object_id	function
(	O
&	O
e_list	pointer
,	O
*	O
definitions	pointer
)	O
;	O
}	O
}	O
else	O
{	O
result	int
=	O
ASN1_ARRAY_ERROR	int
;	O
}	O
if	O
(	O
errorDescription	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
result	int
==	O
ASN1_IDENTIFIER_NOT_FOUND	int
)	O
{	O
Estrcpy	O
(	O
errorDescription	pointer
,	O
":: identifier '"	pointer
)	O
;	O
Estrcat	O
(	O
errorDescription	pointer
,	O
_asn1_identifierMissing	array
)	O
;	O
Estrcat	O
(	O
errorDescription	pointer
,	O
"' not found"	pointer
)	O
;	O
}	O
else	O
errorDescription	pointer
[	O
0	int
]	O
=	O
0	int
;	O
}	O
if	O
(	O
result	int
!=	O
ASN1_SUCCESS	int
)	O
{	O
_asn1_delete_list_and_nodes	function
(	O
e_list	pointer
)	O
;	O
*	O
definitions	pointer
=	O
NULL	O
;	O
}	O
else	O
_asn1_delete_list	function
(	O
e_list	pointer
)	O
;	O
return	O
result	int
;	O
}	O
int	O
asn1_delete_structure	function
(	O
asn1_node	pointer
*	O
structure	pointer
)	O
{	O
return	O
_asn1_delete_structure	function
(	O
NULL	O
,	O
structure	pointer
,	O
0	int
)	O
;	O
}	O
int	O
asn1_delete_structure2	function
(	O
asn1_node	pointer
*	O
structure	pointer
,	O
unsigned	O
int	O
flags	int
)	O
{	O
return	O
_asn1_delete_structure	function
(	O
NULL	O
,	O
structure	pointer
,	O
flags	int
)	O
;	O
}	O
int	O
_asn1_delete_structure	function
(	O
list_type	struct
*	O
e_list	pointer
,	O
asn1_node	pointer
*	O
structure	pointer
,	O
unsigned	O
int	O
flags	int
)	O
{	O
asn1_node	pointer
p	pointer
,	O
p2	pointer
,	O
p3	pointer
;	O
if	O
(	O
*	O
structure	pointer
==	O
NULL	O
)	O
return	O
ASN1_ELEMENT_NOT_FOUND	int
;	O
p	pointer
=	O
*	O
structure	pointer
;	O
while	O
(	O
p	pointer
)	O
{	O
if	O
(	O
p	pointer
->	O
down	pointer
)	O
{	O
p	pointer
=	O
p	pointer
->	O
down	pointer
;	O
}	O
else	O
{	O
p2	pointer
=	O
p	pointer
->	O
right	pointer
;	O
if	O
(	O
p	pointer
!=	O
*	O
structure	pointer
)	O
{	O
p3	pointer
=	O
_asn1_find_up	function
(	O
p	pointer
)	O
;	O
_asn1_set_down	function
(	O
p3	pointer
,	O
p2	pointer
)	O
;	O
if	O
(	O
e_list	pointer
)	O
_asn1_delete_node_from_list	function
(	O
e_list	pointer
,	O
p	pointer
)	O
;	O
_asn1_remove_node	function
(	O
p	pointer
,	O
flags	int
)	O
;	O
p	pointer
=	O
p3	pointer
;	O
}	O
else	O
{	O
p3	pointer
=	O
_asn1_find_left	function
(	O
p	pointer
)	O
;	O
if	O
(	O
!	O
p3	pointer
)	O
{	O
p3	pointer
=	O
_asn1_find_up	function
(	O
p	pointer
)	O
;	O
if	O
(	O
p3	pointer
)	O
_asn1_set_down	function
(	O
p3	pointer
,	O
p2	pointer
)	O
;	O
else	O
{	O
if	O
(	O
p	pointer
->	O
right	pointer
)	O
p	pointer
->	O
right	pointer
->	O
left	pointer
=	O
NULL	O
;	O
}	O
}	O
else	O
_asn1_set_right	function
(	O
p3	pointer
,	O
p2	pointer
)	O
;	O
if	O
(	O
e_list	pointer
)	O
_asn1_delete_node_from_list	function
(	O
e_list	pointer
,	O
p	pointer
)	O
;	O
_asn1_remove_node	function
(	O
p	pointer
,	O
flags	int
)	O
;	O
p	pointer
=	O
NULL	O
;	O
}	O
}	O
}	O
*	O
structure	pointer
=	O
NULL	O
;	O
return	O
ASN1_SUCCESS	int
;	O
}	O
int	O
asn1_delete_element	function
(	O
asn1_node	pointer
structure	pointer
,	O
const	O
char	O
*	O
element_name	pointer
)	O
{	O
asn1_node	pointer
p2	pointer
,	O
p3	pointer
,	O
source_node	pointer
;	O
source_node	pointer
=	O
asn1_find_node	function
(	O
structure	pointer
,	O
element_name	pointer
)	O
;	O
if	O
(	O
source_node	pointer
==	O
NULL	O
)	O
return	O
ASN1_ELEMENT_NOT_FOUND	int
;	O
p2	pointer
=	O
source_node	pointer
->	O
right	pointer
;	O
p3	pointer
=	O
_asn1_find_left	function
(	O
source_node	pointer
)	O
;	O
if	O
(	O
!	O
p3	pointer
)	O
{	O
p3	pointer
=	O
_asn1_find_up	function
(	O
source_node	pointer
)	O
;	O
if	O
(	O
p3	pointer
)	O
_asn1_set_down	function
(	O
p3	pointer
,	O
p2	pointer
)	O
;	O
else	O
if	O
(	O
source_node	pointer
->	O
right	pointer
)	O
source_node	pointer
->	O
right	pointer
->	O
left	pointer
=	O
NULL	O
;	O
}	O
else	O
_asn1_set_right	function
(	O
p3	pointer
,	O
p2	pointer
)	O
;	O
return	O
asn1_delete_structure	function
(	O
&	O
source_node	pointer
)	O
;	O
}	O
asn1_node	pointer
_asn1_copy_structure3	function
(	O
asn1_node_const	pointer
source_node	pointer
)	O
{	O
asn1_node_const	pointer
p_s	pointer
;	O
asn1_node	pointer
dest_node	pointer
,	O
p_d	pointer
,	O
p_d_prev	pointer
;	O
int	O
move	int
;	O
if	O
(	O
source_node	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
dest_node	pointer
=	O
_asn1_add_single_node	function
(	O
source_node	pointer
->	O
type	int
)	O
;	O
p_s	pointer
=	O
source_node	pointer
;	O
p_d	pointer
=	O
dest_node	pointer
;	O
move	int
=	O
DOWN	int
;	O
do	O
{	O
if	O
(	O
move	int
!=	O
UP	int
)	O
{	O
if	O
(	O
p_s	pointer
->	O
name	pointer
[	O
0	int
]	O
!=	O
0	int
)	O
_asn1_cpy_name	function
(	O
p_d	pointer
,	O
p_s	pointer
)	O
;	O
if	O
(	O
p_s	pointer
->	O
value	pointer
)	O
_asn1_set_value	function
(	O
p_d	pointer
,	O
p_s	pointer
->	O
value	pointer
,	O
p_s	pointer
->	O
value_len	int
)	O
;	O
if	O
(	O
p_s	pointer
->	O
down	pointer
)	O
{	O
p_s	pointer
=	O
p_s	pointer
->	O
down	pointer
;	O
p_d_prev	pointer
=	O
p_d	pointer
;	O
p_d	pointer
=	O
_asn1_add_single_node	function
(	O
p_s	pointer
->	O
type	int
)	O
;	O
_asn1_set_down	function
(	O
p_d_prev	pointer
,	O
p_d	pointer
)	O
;	O
continue	O
;	O
}	O
p_d	pointer
->	O
start	pointer
=	O
p_s	pointer
->	O
start	pointer
;	O
p_d	pointer
->	O
end	pointer
=	O
p_s	pointer
->	O
end	pointer
;	O
}	O
if	O
(	O
p_s	pointer
==	O
source_node	pointer
)	O
break	O
;	O
if	O
(	O
p_s	pointer
->	O
right	pointer
)	O
{	O
move	int
=	O
RIGHT	int
;	O
p_s	pointer
=	O
p_s	pointer
->	O
right	pointer
;	O
p_d_prev	pointer
=	O
p_d	pointer
;	O
p_d	pointer
=	O
_asn1_add_single_node	function
(	O
p_s	pointer
->	O
type	int
)	O
;	O
_asn1_set_right	function
(	O
p_d_prev	pointer
,	O
p_d	pointer
)	O
;	O
}	O
else	O
{	O
move	int
=	O
UP	int
;	O
p_s	pointer
=	O
_asn1_find_up	function
(	O
p_s	pointer
)	O
;	O
p_d	pointer
=	O
_asn1_find_up	function
(	O
p_d	pointer
)	O
;	O
}	O
}	O
while	O
(	O
p_s	pointer
!=	O
source_node	pointer
)	O
;	O
return	O
dest_node	pointer
;	O
}	O
static	O
asn1_node	pointer
_asn1_copy_structure2	function
(	O
asn1_node_const	pointer
root	pointer
,	O
const	O
char	O
*	O
source_name	pointer
)	O
{	O
asn1_node	pointer
source_node	pointer
;	O
source_node	pointer
=	O
asn1_find_node	function
(	O
root	pointer
,	O
source_name	pointer
)	O
;	O
return	O
_asn1_copy_structure3	function
(	O
source_node	pointer
)	O
;	O
}	O
static	O
int	O
_asn1_type_choice_config	function
(	O
asn1_node	pointer
node	pointer
)	O
{	O
asn1_node	pointer
p	pointer
,	O
p2	pointer
,	O
p3	pointer
,	O
p4	pointer
;	O
int	O
move	int
,	O
tlen	int
;	O
if	O
(	O
node	pointer
==	O
NULL	O
)	O
return	O
ASN1_ELEMENT_NOT_FOUND	int
;	O
p	pointer
=	O
node	pointer
;	O
move	int
=	O
DOWN	int
;	O
while	O
(	O
!	O
(	O
(	O
p	pointer
==	O
node	pointer
)	O
&&	O
(	O
move	int
==	O
UP	int
)	O
)	O
)	O
{	O
if	O
(	O
move	int
!=	O
UP	int
)	O
{	O
if	O
(	O
(	O
type_field	function
(	O
p	pointer
->	O
type	int
)	O
==	O
ASN1_ETYPE_CHOICE	int
)	O
&&	O
(	O
p	pointer
->	O
type	int
&	O
CONST_TAG	O
)	O
)	O
{	O
p2	pointer
=	O
p	pointer
->	O
down	pointer
;	O
while	O
(	O
p2	pointer
)	O
{	O
if	O
(	O
type_field	function
(	O
p2	pointer
->	O
type	int
)	O
!=	O
ASN1_ETYPE_TAG	int
)	O
{	O
p2	pointer
->	O
type	int
|=	O
CONST_TAG	O
;	O
p3	pointer
=	O
_asn1_find_left	function
(	O
p2	pointer
)	O
;	O
while	O
(	O
p3	pointer
)	O
{	O
if	O
(	O
type_field	function
(	O
p3	pointer
->	O
type	int
)	O
==	O
ASN1_ETYPE_TAG	int
)	O
{	O
p4	pointer
=	O
_asn1_add_single_node	function
(	O
p3	pointer
->	O
type	int
)	O
;	O
tlen	int
=	O
_asn1_strlen	O
(	O
p3	pointer
->	O
value	pointer
)	O
;	O
if	O
(	O
tlen	int
>	O
0	int
)	O
_asn1_set_value	function
(	O
p4	pointer
,	O
p3	pointer
->	O
value	pointer
,	O
tlen	int
+	O
1	int
)	O
;	O
_asn1_set_right	function
(	O
p4	pointer
,	O
p2	pointer
->	O
down	pointer
)	O
;	O
_asn1_set_down	function
(	O
p2	pointer
,	O
p4	pointer
)	O
;	O
}	O
p3	pointer
=	O
_asn1_find_left	function
(	O
p3	pointer
)	O
;	O
}	O
}	O
p2	pointer
=	O
p2	pointer
->	O
right	pointer
;	O
}	O
p	pointer
->	O
type	int
&=	O
~	O
(	O
CONST_TAG	O
)	O
;	O
p2	pointer
=	O
p	pointer
->	O
down	pointer
;	O
while	O
(	O
p2	pointer
)	O
{	O
p3	pointer
=	O
p2	pointer
->	O
right	pointer
;	O
if	O
(	O
type_field	function
(	O
p2	pointer
->	O
type	int
)	O
==	O
ASN1_ETYPE_TAG	int
)	O
asn1_delete_structure	function
(	O
&	O
p2	pointer
)	O
;	O
p2	pointer
=	O
p3	pointer
;	O
}	O
}	O
move	int
=	O
DOWN	int
;	O
}	O
else	O
move	int
=	O
RIGHT	int
;	O
if	O
(	O
move	int
==	O
DOWN	int
)	O
{	O
if	O
(	O
p	pointer
->	O
down	pointer
)	O
p	pointer
=	O
p	pointer
->	O
down	pointer
;	O
else	O
move	int
=	O
RIGHT	int
;	O
}	O
if	O
(	O
p	pointer
==	O
node	pointer
)	O
{	O
move	int
=	O
UP	int
;	O
continue	O
;	O
}	O
if	O
(	O
move	int
==	O
RIGHT	int
)	O
{	O
if	O
(	O
p	pointer
->	O
right	pointer
)	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
else	O
move	int
=	O
UP	int
;	O
}	O
if	O
(	O
move	int
==	O
UP	int
)	O
p	pointer
=	O
_asn1_find_up	function
(	O
p	pointer
)	O
;	O
}	O
return	O
ASN1_SUCCESS	int
;	O
}	O
static	O
int	O
_asn1_expand_identifier	function
(	O
asn1_node	pointer
*	O
node	pointer
,	O
asn1_node_const	pointer
root	pointer
)	O
{	O
asn1_node	pointer
p	pointer
,	O
p2	pointer
,	O
p3	pointer
;	O
char	O
name2	array
[	O
ASN1_MAX_NAME_SIZE	int
+	O
2	int
]	O
;	O
int	O
move	int
;	O
if	O
(	O
node	pointer
==	O
NULL	O
)	O
return	O
ASN1_ELEMENT_NOT_FOUND	int
;	O
p	pointer
=	O
*	O
node	pointer
;	O
move	int
=	O
DOWN	int
;	O
while	O
(	O
!	O
(	O
(	O
p	pointer
==	O
*	O
node	pointer
)	O
&&	O
(	O
move	int
==	O
UP	int
)	O
)	O
)	O
{	O
if	O
(	O
move	int
!=	O
UP	int
)	O
{	O
if	O
(	O
type_field	function
(	O
p	pointer
->	O
type	int
)	O
==	O
ASN1_ETYPE_IDENTIFIER	int
)	O
{	O
snprintf	function
(	O
name2	array
,	O
sizeof	O
(	O
name2	array
)	O
,	O
"%s.%s"	pointer
,	O
root	pointer
->	O
name	pointer
,	O
p	pointer
->	O
value	pointer
)	O
;	O
p2	pointer
=	O
_asn1_copy_structure2	function
(	O
root	pointer
,	O
name2	array
)	O
;	O
if	O
(	O
p2	pointer
==	O
NULL	O
)	O
{	O
return	O
ASN1_IDENTIFIER_NOT_FOUND	int
;	O
}	O
_asn1_cpy_name	function
(	O
p2	pointer
,	O
p	pointer
)	O
;	O
p2	pointer
->	O
right	pointer
=	O
p	pointer
->	O
right	pointer
;	O
p2	pointer
->	O
left	pointer
=	O
p	pointer
->	O
left	pointer
;	O
if	O
(	O
p	pointer
->	O
right	pointer
)	O
p	pointer
->	O
right	pointer
->	O
left	pointer
=	O
p2	pointer
;	O
p3	pointer
=	O
p	pointer
->	O
down	pointer
;	O
if	O
(	O
p3	pointer
)	O
{	O
while	O
(	O
p3	pointer
->	O
right	pointer
)	O
p3	pointer
=	O
p3	pointer
->	O
right	pointer
;	O
_asn1_set_right	function
(	O
p3	pointer
,	O
p2	pointer
->	O
down	pointer
)	O
;	O
_asn1_set_down	function
(	O
p2	pointer
,	O
p	pointer
->	O
down	pointer
)	O
;	O
}	O
p3	pointer
=	O
_asn1_find_left	function
(	O
p	pointer
)	O
;	O
if	O
(	O
p3	pointer
)	O
_asn1_set_right	function
(	O
p3	pointer
,	O
p2	pointer
)	O
;	O
else	O
{	O
p3	pointer
=	O
_asn1_find_up	function
(	O
p	pointer
)	O
;	O
if	O
(	O
p3	pointer
)	O
_asn1_set_down	function
(	O
p3	pointer
,	O
p2	pointer
)	O
;	O
else	O
{	O
p2	pointer
->	O
left	pointer
=	O
NULL	O
;	O
}	O
}	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_SIZE	O
)	O
p2	pointer
->	O
type	int
|=	O
CONST_SIZE	O
;	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_TAG	O
)	O
p2	pointer
->	O
type	int
|=	O
CONST_TAG	O
;	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_OPTION	O
)	O
p2	pointer
->	O
type	int
|=	O
CONST_OPTION	O
;	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_DEFAULT	O
)	O
p2	pointer
->	O
type	int
|=	O
CONST_DEFAULT	O
;	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_SET	O
)	O
p2	pointer
->	O
type	int
|=	O
CONST_SET	O
;	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_NOT_USED	O
)	O
p2	pointer
->	O
type	int
|=	O
CONST_NOT_USED	O
;	O
if	O
(	O
p	pointer
==	O
*	O
node	pointer
)	O
*	O
node	pointer
=	O
p2	pointer
;	O
_asn1_remove_node	function
(	O
p	pointer
,	O
0	int
)	O
;	O
p	pointer
=	O
p2	pointer
;	O
move	int
=	O
DOWN	int
;	O
continue	O
;	O
}	O
move	int
=	O
DOWN	int
;	O
}	O
else	O
move	int
=	O
RIGHT	int
;	O
if	O
(	O
move	int
==	O
DOWN	int
)	O
{	O
if	O
(	O
p	pointer
->	O
down	pointer
)	O
p	pointer
=	O
p	pointer
->	O
down	pointer
;	O
else	O
move	int
=	O
RIGHT	int
;	O
}	O
if	O
(	O
p	pointer
==	O
*	O
node	pointer
)	O
{	O
move	int
=	O
UP	int
;	O
continue	O
;	O
}	O
if	O
(	O
move	int
==	O
RIGHT	int
)	O
{	O
if	O
(	O
p	pointer
->	O
right	pointer
)	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
else	O
move	int
=	O
UP	int
;	O
}	O
if	O
(	O
move	int
==	O
UP	int
)	O
p	pointer
=	O
_asn1_find_up	function
(	O
p	pointer
)	O
;	O
}	O
return	O
ASN1_SUCCESS	int
;	O
}	O
int	O
asn1_create_element	function
(	O
asn1_node_const	pointer
definitions	pointer
,	O
const	O
char	O
*	O
source_name	pointer
,	O
asn1_node	pointer
*	O
element	pointer
)	O
{	O
asn1_node	pointer
dest_node	pointer
;	O
int	O
res	int
;	O
dest_node	pointer
=	O
_asn1_copy_structure2	function
(	O
definitions	pointer
,	O
source_name	pointer
)	O
;	O
if	O
(	O
dest_node	pointer
==	O
NULL	O
)	O
return	O
ASN1_ELEMENT_NOT_FOUND	int
;	O
_asn1_set_name	function
(	O
dest_node	pointer
,	O
""	pointer
)	O
;	O
res	int
=	O
_asn1_expand_identifier	function
(	O
&	O
dest_node	pointer
,	O
definitions	pointer
)	O
;	O
_asn1_type_choice_config	function
(	O
dest_node	pointer
)	O
;	O
*	O
element	pointer
=	O
dest_node	pointer
;	O
return	O
res	int
;	O
}	O
void	O
asn1_print_structure	function
(	O
FILE	struct
*	O
out	pointer
,	O
asn1_node_const	pointer
structure	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
int	O
mode	int
)	O
{	O
asn1_node_const	pointer
p	pointer
,	O
root	pointer
;	O
int	O
k	long
,	O
indent	int
=	O
0	int
,	O
len	int
,	O
len2	int
,	O
len3	int
;	O
if	O
(	O
out	pointer
==	O
NULL	O
)	O
return	O
;	O
root	pointer
=	O
asn1_find_node	function
(	O
structure	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
root	pointer
==	O
NULL	O
)	O
return	O
;	O
p	pointer
=	O
root	pointer
;	O
while	O
(	O
p	pointer
)	O
{	O
if	O
(	O
mode	int
==	O
ASN1_PRINT_ALL	int
)	O
{	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
indent	int
;	O
k	long
++	O
)	O
fprintf	function
(	O
out	pointer
,	O
" "	pointer
)	O
;	O
fprintf	function
(	O
out	pointer
,	O
"name:"	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
name	pointer
[	O
0	int
]	O
!=	O
0	int
)	O
fprintf	function
(	O
out	pointer
,	O
"%s  "	pointer
,	O
p	pointer
->	O
name	pointer
)	O
;	O
else	O
fprintf	function
(	O
out	pointer
,	O
"NULL  "	pointer
)	O
;	O
}	O
else	O
{	O
switch	O
(	O
type_field	function
(	O
p	pointer
->	O
type	int
)	O
)	O
{	O
case	O
ASN1_ETYPE_CONSTANT	int
:	O
case	O
ASN1_ETYPE_TAG	int
:	O
case	O
ASN1_ETYPE_SIZE	int
:	O
break	O
;	O
default	O
:	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
indent	int
;	O
k	long
++	O
)	O
fprintf	function
(	O
out	pointer
,	O
" "	pointer
)	O
;	O
fprintf	function
(	O
out	pointer
,	O
"name:"	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
name	pointer
[	O
0	int
]	O
!=	O
0	int
)	O
fprintf	function
(	O
out	pointer
,	O
"%s  "	pointer
,	O
p	pointer
->	O
name	pointer
)	O
;	O
else	O
fprintf	function
(	O
out	pointer
,	O
"NULL  "	pointer
)	O
;	O
}	O
}	O
if	O
(	O
mode	int
!=	O
ASN1_PRINT_NAME	int
)	O
{	O
unsigned	O
type	int
=	O
type_field	function
(	O
p	pointer
->	O
type	int
)	O
;	O
switch	O
(	O
type	int
)	O
{	O
case	O
ASN1_ETYPE_CONSTANT	int
:	O
if	O
(	O
mode	int
==	O
ASN1_PRINT_ALL	int
)	O
fprintf	function
(	O
out	pointer
,	O
"type:CONST"	pointer
)	O
;	O
break	O
;	O
case	O
ASN1_ETYPE_TAG	int
:	O
if	O
(	O
mode	int
==	O
ASN1_PRINT_ALL	int
)	O
fprintf	function
(	O
out	pointer
,	O
"type:TAG"	pointer
)	O
;	O
break	O
;	O
case	O
ASN1_ETYPE_SIZE	int
:	O
if	O
(	O
mode	int
==	O
ASN1_PRINT_ALL	int
)	O
fprintf	function
(	O
out	pointer
,	O
"type:SIZE"	pointer
)	O
;	O
break	O
;	O
case	O
ASN1_ETYPE_DEFAULT	int
:	O
fprintf	function
(	O
out	pointer
,	O
"type:DEFAULT"	pointer
)	O
;	O
break	O
;	O
case	O
ASN1_ETYPE_IDENTIFIER	int
:	O
fprintf	function
(	O
out	pointer
,	O
"type:IDENTIFIER"	pointer
)	O
;	O
break	O
;	O
case	O
ASN1_ETYPE_ANY	int
:	O
fprintf	function
(	O
out	pointer
,	O
"type:ANY"	pointer
)	O
;	O
break	O
;	O
case	O
ASN1_ETYPE_CHOICE	int
:	O
fprintf	function
(	O
out	pointer
,	O
"type:CHOICE"	pointer
)	O
;	O
break	O
;	O
case	O
ASN1_ETYPE_DEFINITIONS	int
:	O
fprintf	function
(	O
out	pointer
,	O
"type:DEFINITIONS"	pointer
)	O
;	O
break	O
;	O
CASE_HANDLED_ETYPES	O
:	O
fprintf	function
(	O
out	pointer
,	O
"%s"	pointer
,	O
_asn1_tags	array
[	O
type	int
]	O
.	O
desc	pointer
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
if	O
(	O
(	O
mode	int
==	O
ASN1_PRINT_NAME_TYPE_VALUE	int
)	O
||	O
(	O
mode	int
==	O
ASN1_PRINT_ALL	int
)	O
)	O
{	O
switch	O
(	O
type_field	function
(	O
p	pointer
->	O
type	int
)	O
)	O
{	O
case	O
ASN1_ETYPE_CONSTANT	int
:	O
if	O
(	O
mode	int
==	O
ASN1_PRINT_ALL	int
)	O
if	O
(	O
p	pointer
->	O
value	pointer
)	O
fprintf	function
(	O
out	pointer
,	O
"  value:%s"	pointer
,	O
p	pointer
->	O
value	pointer
)	O
;	O
break	O
;	O
case	O
ASN1_ETYPE_TAG	int
:	O
if	O
(	O
mode	int
==	O
ASN1_PRINT_ALL	int
)	O
if	O
(	O
p	pointer
->	O
value	pointer
)	O
fprintf	function
(	O
out	pointer
,	O
"  value:%s"	pointer
,	O
p	pointer
->	O
value	pointer
)	O
;	O
break	O
;	O
case	O
ASN1_ETYPE_SIZE	int
:	O
if	O
(	O
mode	int
==	O
ASN1_PRINT_ALL	int
)	O
if	O
(	O
p	pointer
->	O
value	pointer
)	O
fprintf	function
(	O
out	pointer
,	O
"  value:%s"	pointer
,	O
p	pointer
->	O
value	pointer
)	O
;	O
break	O
;	O
case	O
ASN1_ETYPE_DEFAULT	int
:	O
if	O
(	O
p	pointer
->	O
value	pointer
)	O
fprintf	function
(	O
out	pointer
,	O
"  value:%s"	pointer
,	O
p	pointer
->	O
value	pointer
)	O
;	O
else	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_TRUE	O
)	O
fprintf	function
(	O
out	pointer
,	O
"  value:TRUE"	pointer
)	O
;	O
else	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_FALSE	O
)	O
fprintf	function
(	O
out	pointer
,	O
"  value:FALSE"	pointer
)	O
;	O
break	O
;	O
case	O
ASN1_ETYPE_IDENTIFIER	int
:	O
if	O
(	O
p	pointer
->	O
value	pointer
)	O
fprintf	function
(	O
out	pointer
,	O
"  value:%s"	pointer
,	O
p	pointer
->	O
value	pointer
)	O
;	O
break	O
;	O
case	O
ASN1_ETYPE_INTEGER	int
:	O
if	O
(	O
p	pointer
->	O
value	pointer
)	O
{	O
len2	int
=	O
-	O
1	int
;	O
len	int
=	O
asn1_get_length_der	function
(	O
p	pointer
->	O
value	pointer
,	O
p	pointer
->	O
value_len	int
,	O
&	O
len2	int
)	O
;	O
fprintf	function
(	O
out	pointer
,	O
"  value:0x"	pointer
)	O
;	O
if	O
(	O
len	int
>	O
0	int
)	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
len	int
;	O
k	long
++	O
)	O
fprintf	function
(	O
out	pointer
,	O
"%02x"	pointer
,	O
(	O
unsigned	O
)	O
(	O
p	pointer
->	O
value	pointer
)	O
[	O
k	long
+	O
len2	int
]	O
)	O
;	O
}	O
break	O
;	O
case	O
ASN1_ETYPE_ENUMERATED	int
:	O
if	O
(	O
p	pointer
->	O
value	pointer
)	O
{	O
len2	int
=	O
-	O
1	int
;	O
len	int
=	O
asn1_get_length_der	function
(	O
p	pointer
->	O
value	pointer
,	O
p	pointer
->	O
value_len	int
,	O
&	O
len2	int
)	O
;	O
fprintf	function
(	O
out	pointer
,	O
"  value:0x"	pointer
)	O
;	O
if	O
(	O
len	int
>	O
0	int
)	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
len	int
;	O
k	long
++	O
)	O
fprintf	function
(	O
out	pointer
,	O
"%02x"	pointer
,	O
(	O
unsigned	O
)	O
(	O
p	pointer
->	O
value	pointer
)	O
[	O
k	long
+	O
len2	int
]	O
)	O
;	O
}	O
break	O
;	O
case	O
ASN1_ETYPE_BOOLEAN	int
:	O
if	O
(	O
p	pointer
->	O
value	pointer
)	O
{	O
if	O
(	O
p	pointer
->	O
value	pointer
[	O
0	int
]	O
==	O
'T'	O
)	O
fprintf	function
(	O
out	pointer
,	O
"  value:TRUE"	pointer
)	O
;	O
else	O
if	O
(	O
p	pointer
->	O
value	pointer
[	O
0	int
]	O
==	O
'F'	O
)	O
fprintf	function
(	O
out	pointer
,	O
"  value:FALSE"	pointer
)	O
;	O
}	O
break	O
;	O
case	O
ASN1_ETYPE_BIT_STRING	int
:	O
if	O
(	O
p	pointer
->	O
value	pointer
)	O
{	O
len2	int
=	O
-	O
1	int
;	O
len	int
=	O
asn1_get_length_der	function
(	O
p	pointer
->	O
value	pointer
,	O
p	pointer
->	O
value_len	int
,	O
&	O
len2	int
)	O
;	O
if	O
(	O
len	int
>	O
0	int
)	O
{	O
fprintf	function
(	O
out	pointer
,	O
"  value(%i):"	pointer
,	O
(	O
len	int
-	O
1	int
)	O
*	O
8	int
-	O
(	O
p	pointer
->	O
value	pointer
[	O
len2	int
]	O
)	O
)	O
;	O
for	O
(	O
k	long
=	O
1	int
;	O
k	long
<	O
len	int
;	O
k	long
++	O
)	O
fprintf	function
(	O
out	pointer
,	O
"%02x"	pointer
,	O
(	O
unsigned	O
)	O
(	O
p	pointer
->	O
value	pointer
)	O
[	O
k	long
+	O
len2	int
]	O
)	O
;	O
}	O
}	O
break	O
;	O
case	O
ASN1_ETYPE_GENERALIZED_TIME	int
:	O
case	O
ASN1_ETYPE_UTC_TIME	int
:	O
if	O
(	O
p	pointer
->	O
value	pointer
)	O
{	O
fprintf	function
(	O
out	pointer
,	O
"  value:"	pointer
)	O
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
p	pointer
->	O
value_len	int
;	O
k	long
++	O
)	O
fprintf	function
(	O
out	pointer
,	O
"%c"	pointer
,	O
(	O
p	pointer
->	O
value	pointer
)	O
[	O
k	long
]	O
)	O
;	O
}	O
break	O
;	O
case	O
ASN1_ETYPE_GENERALSTRING	int
:	O
case	O
ASN1_ETYPE_NUMERIC_STRING	int
:	O
case	O
ASN1_ETYPE_IA5_STRING	int
:	O
case	O
ASN1_ETYPE_TELETEX_STRING	int
:	O
case	O
ASN1_ETYPE_PRINTABLE_STRING	int
:	O
case	O
ASN1_ETYPE_UNIVERSAL_STRING	int
:	O
case	O
ASN1_ETYPE_UTF8_STRING	int
:	O
case	O
ASN1_ETYPE_VISIBLE_STRING	int
:	O
if	O
(	O
p	pointer
->	O
value	pointer
)	O
{	O
len2	int
=	O
-	O
1	int
;	O
len	int
=	O
asn1_get_length_der	function
(	O
p	pointer
->	O
value	pointer
,	O
p	pointer
->	O
value_len	int
,	O
&	O
len2	int
)	O
;	O
fprintf	function
(	O
out	pointer
,	O
"  value:"	pointer
)	O
;	O
if	O
(	O
len	int
>	O
0	int
)	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
len	int
;	O
k	long
++	O
)	O
fprintf	function
(	O
out	pointer
,	O
"%c"	pointer
,	O
(	O
p	pointer
->	O
value	pointer
)	O
[	O
k	long
+	O
len2	int
]	O
)	O
;	O
}	O
break	O
;	O
case	O
ASN1_ETYPE_BMP_STRING	int
:	O
case	O
ASN1_ETYPE_OCTET_STRING	int
:	O
if	O
(	O
p	pointer
->	O
value	pointer
)	O
{	O
len2	int
=	O
-	O
1	int
;	O
len	int
=	O
asn1_get_length_der	function
(	O
p	pointer
->	O
value	pointer
,	O
p	pointer
->	O
value_len	int
,	O
&	O
len2	int
)	O
;	O
fprintf	function
(	O
out	pointer
,	O
"  value:"	pointer
)	O
;	O
if	O
(	O
len	int
>	O
0	int
)	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
len	int
;	O
k	long
++	O
)	O
fprintf	function
(	O
out	pointer
,	O
"%02x"	pointer
,	O
(	O
unsigned	O
)	O
(	O
p	pointer
->	O
value	pointer
)	O
[	O
k	long
+	O
len2	int
]	O
)	O
;	O
}	O
break	O
;	O
case	O
ASN1_ETYPE_OBJECT_ID	int
:	O
if	O
(	O
p	pointer
->	O
value	pointer
)	O
fprintf	function
(	O
out	pointer
,	O
"  value:%s"	pointer
,	O
p	pointer
->	O
value	pointer
)	O
;	O
break	O
;	O
case	O
ASN1_ETYPE_ANY	int
:	O
if	O
(	O
p	pointer
->	O
value	pointer
)	O
{	O
len3	int
=	O
-	O
1	int
;	O
len2	int
=	O
asn1_get_length_der	function
(	O
p	pointer
->	O
value	pointer
,	O
p	pointer
->	O
value_len	int
,	O
&	O
len3	int
)	O
;	O
fprintf	function
(	O
out	pointer
,	O
"  value:"	pointer
)	O
;	O
if	O
(	O
len2	int
>	O
0	int
)	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
len2	int
;	O
k	long
++	O
)	O
fprintf	function
(	O
out	pointer
,	O
"%02x"	pointer
,	O
(	O
unsigned	O
)	O
(	O
p	pointer
->	O
value	pointer
)	O
[	O
k	long
+	O
len3	int
]	O
)	O
;	O
}	O
break	O
;	O
case	O
ASN1_ETYPE_SET	int
:	O
case	O
ASN1_ETYPE_SET_OF	int
:	O
case	O
ASN1_ETYPE_CHOICE	int
:	O
case	O
ASN1_ETYPE_DEFINITIONS	int
:	O
case	O
ASN1_ETYPE_SEQUENCE_OF	int
:	O
case	O
ASN1_ETYPE_SEQUENCE	int
:	O
case	O
ASN1_ETYPE_NULL	int
:	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
if	O
(	O
mode	int
==	O
ASN1_PRINT_ALL	int
)	O
{	O
if	O
(	O
p	pointer
->	O
type	int
&	O
0x1FFFFF00	int
)	O
{	O
fprintf	function
(	O
out	pointer
,	O
"  attr:"	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_UNIVERSAL	O
)	O
fprintf	function
(	O
out	pointer
,	O
"UNIVERSAL,"	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_PRIVATE	O
)	O
fprintf	function
(	O
out	pointer
,	O
"PRIVATE,"	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_APPLICATION	O
)	O
fprintf	function
(	O
out	pointer
,	O
"APPLICATION,"	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_EXPLICIT	O
)	O
fprintf	function
(	O
out	pointer
,	O
"EXPLICIT,"	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_IMPLICIT	O
)	O
fprintf	function
(	O
out	pointer
,	O
"IMPLICIT,"	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_TAG	O
)	O
fprintf	function
(	O
out	pointer
,	O
"TAG,"	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_DEFAULT	O
)	O
fprintf	function
(	O
out	pointer
,	O
"DEFAULT,"	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_TRUE	O
)	O
fprintf	function
(	O
out	pointer
,	O
"TRUE,"	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_FALSE	O
)	O
fprintf	function
(	O
out	pointer
,	O
"FALSE,"	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_LIST	O
)	O
fprintf	function
(	O
out	pointer
,	O
"LIST,"	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_MIN_MAX	O
)	O
fprintf	function
(	O
out	pointer
,	O
"MIN_MAX,"	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_OPTION	O
)	O
fprintf	function
(	O
out	pointer
,	O
"OPTION,"	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_1_PARAM	O
)	O
fprintf	function
(	O
out	pointer
,	O
"1_PARAM,"	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_SIZE	O
)	O
fprintf	function
(	O
out	pointer
,	O
"SIZE,"	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_DEFINED_BY	O
)	O
fprintf	function
(	O
out	pointer
,	O
"DEF_BY,"	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_GENERALIZED	O
)	O
fprintf	function
(	O
out	pointer
,	O
"GENERALIZED,"	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_UTC	O
)	O
fprintf	function
(	O
out	pointer
,	O
"UTC,"	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_SET	O
)	O
fprintf	function
(	O
out	pointer
,	O
"SET,"	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_NOT_USED	O
)	O
fprintf	function
(	O
out	pointer
,	O
"NOT_USED,"	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_ASSIGN	O
)	O
fprintf	function
(	O
out	pointer
,	O
"ASSIGNMENT,"	pointer
)	O
;	O
}	O
}	O
if	O
(	O
mode	int
==	O
ASN1_PRINT_ALL	int
)	O
{	O
fprintf	function
(	O
out	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
else	O
{	O
switch	O
(	O
type_field	function
(	O
p	pointer
->	O
type	int
)	O
)	O
{	O
case	O
ASN1_ETYPE_CONSTANT	int
:	O
case	O
ASN1_ETYPE_TAG	int
:	O
case	O
ASN1_ETYPE_SIZE	int
:	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
out	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
}	O
if	O
(	O
p	pointer
->	O
down	pointer
)	O
{	O
p	pointer
=	O
p	pointer
->	O
down	pointer
;	O
indent	int
+=	O
2	int
;	O
}	O
else	O
if	O
(	O
p	pointer
==	O
root	pointer
)	O
{	O
p	pointer
=	O
NULL	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
p	pointer
->	O
right	pointer
)	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
else	O
{	O
while	O
(	O
1	int
)	O
{	O
p	pointer
=	O
_asn1_find_up	function
(	O
p	pointer
)	O
;	O
if	O
(	O
p	pointer
==	O
root	pointer
)	O
{	O
p	pointer
=	O
NULL	O
;	O
break	O
;	O
}	O
indent	int
-=	O
2	int
;	O
if	O
(	O
p	pointer
->	O
right	pointer
)	O
{	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
break	O
;	O
}	O
}	O
}	O
}	O
}	O
int	O
asn1_number_of_elements	function
(	O
asn1_node_const	pointer
element	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
int	O
*	O
num	pointer
)	O
{	O
asn1_node_const	pointer
node	pointer
,	O
p	pointer
;	O
if	O
(	O
num	pointer
==	O
NULL	O
)	O
return	O
ASN1_GENERIC_ERROR	int
;	O
*	O
num	pointer
=	O
0	int
;	O
node	pointer
=	O
asn1_find_node	function
(	O
element	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
node	pointer
==	O
NULL	O
)	O
return	O
ASN1_ELEMENT_NOT_FOUND	int
;	O
p	pointer
=	O
node	pointer
->	O
down	pointer
;	O
while	O
(	O
p	pointer
)	O
{	O
if	O
(	O
p	pointer
->	O
name	pointer
[	O
0	int
]	O
==	O
'?'	O
)	O
(	O
*	O
num	pointer
)	O
++	O
;	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
}	O
return	O
ASN1_SUCCESS	int
;	O
}	O
const	O
char	O
*	O
asn1_find_structure_from_oid	function
(	O
asn1_node_const	pointer
definitions	pointer
,	O
const	O
char	O
*	O
oidValue	pointer
)	O
{	O
char	O
name	pointer
[	O
2	int
*	O
ASN1_MAX_NAME_SIZE	int
+	O
2	int
]	O
;	O
char	O
value	pointer
[	O
ASN1_MAX_NAME_SIZE	int
]	O
;	O
asn1_node	pointer
p	pointer
;	O
int	O
len	int
;	O
int	O
result	int
;	O
const	O
char	O
*	O
definitionsName	pointer
;	O
if	O
(	O
(	O
definitions	pointer
==	O
NULL	O
)	O
||	O
(	O
oidValue	pointer
==	O
NULL	O
)	O
)	O
return	O
NULL	O
;	O
definitionsName	pointer
=	O
definitions	pointer
->	O
name	pointer
;	O
p	pointer
=	O
definitions	pointer
->	O
down	pointer
;	O
while	O
(	O
p	pointer
)	O
{	O
if	O
(	O
(	O
type_field	function
(	O
p	pointer
->	O
type	int
)	O
==	O
ASN1_ETYPE_OBJECT_ID	int
)	O
&&	O
(	O
p	pointer
->	O
type	int
&	O
CONST_ASSIGN	O
)	O
)	O
{	O
snprintf	function
(	O
name	pointer
,	O
sizeof	O
(	O
name	pointer
)	O
,	O
"%s.%s"	pointer
,	O
definitionsName	pointer
,	O
p	pointer
->	O
name	pointer
)	O
;	O
len	int
=	O
ASN1_MAX_NAME_SIZE	int
;	O
result	int
=	O
asn1_read_value	function
(	O
definitions	pointer
,	O
name	pointer
,	O
value	pointer
,	O
&	O
len	int
)	O
;	O
if	O
(	O
(	O
result	int
==	O
ASN1_SUCCESS	int
)	O
&&	O
(	O
!	O
strcmp	function
(	O
oidValue	pointer
,	O
value	pointer
)	O
)	O
)	O
{	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
p	pointer
->	O
name	pointer
;	O
}	O
}	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
int	O
asn1_copy_node	function
(	O
asn1_node	pointer
dst	pointer
,	O
const	O
char	O
*	O
dst_name	pointer
,	O
asn1_node_const	pointer
src	pointer
,	O
const	O
char	O
*	O
src_name	pointer
)	O
{	O
int	O
result	int
;	O
asn1_node	pointer
dst_node	pointer
;	O
void	O
*	O
data	pointer
=	O
NULL	O
;	O
int	O
size	long
=	O
0	int
;	O
result	int
=	O
asn1_der_coding	function
(	O
src	pointer
,	O
src_name	pointer
,	O
NULL	O
,	O
&	O
size	long
,	O
NULL	O
)	O
;	O
if	O
(	O
result	int
!=	O
ASN1_MEM_ERROR	int
)	O
return	O
result	int
;	O
data	pointer
=	O
malloc	function
(	O
size	long
)	O
;	O
if	O
(	O
data	pointer
==	O
NULL	O
)	O
return	O
ASN1_MEM_ERROR	int
;	O
result	int
=	O
asn1_der_coding	function
(	O
src	pointer
,	O
src_name	pointer
,	O
data	pointer
,	O
&	O
size	long
,	O
NULL	O
)	O
;	O
if	O
(	O
result	int
!=	O
ASN1_SUCCESS	int
)	O
{	O
free	function
(	O
data	pointer
)	O
;	O
return	O
result	int
;	O
}	O
dst_node	pointer
=	O
asn1_find_node	function
(	O
dst	pointer
,	O
dst_name	pointer
)	O
;	O
if	O
(	O
dst_node	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
data	pointer
)	O
;	O
return	O
ASN1_ELEMENT_NOT_FOUND	int
;	O
}	O
result	int
=	O
asn1_der_decoding	function
(	O
&	O
dst_node	pointer
,	O
data	pointer
,	O
size	long
,	O
NULL	O
)	O
;	O
free	function
(	O
data	pointer
)	O
;	O
return	O
result	int
;	O
}	O
asn1_node	pointer
asn1_dup_node	function
(	O
asn1_node_const	pointer
src	pointer
,	O
const	O
char	O
*	O
src_name	pointer
)	O
{	O
return	O
_asn1_copy_structure2	function
(	O
src	pointer
,	O
src_name	pointer
)	O
;	O
}	O
