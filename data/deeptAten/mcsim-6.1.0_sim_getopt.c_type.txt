char	O
*	O
optarg	pointer
=	O
0	int
;	O
int	O
optind	int
=	O
0	int
;	O
static	O
char	O
*	O
nextchar	pointer
;	O
int	O
opterr	int
=	O
1	int
;	O
static	O
enum	O
{	O
REQUIRE_ORDER	int
,	O
PERMUTE	int
,	O
RETURN_IN_ORDER	int
}	O
ordering	enum
;	O
static	O
char	O
*	O
my_index	function
(	O
char	O
*	O
string	pointer
,	O
int	O
chr	int
)	O
{	O
while	O
(	O
*	O
string	pointer
)	O
{	O
if	O
(	O
*	O
string	pointer
==	O
chr	int
)	O
return	O
string	pointer
;	O
string	pointer
++	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
my_bcopy	function
(	O
char	O
*	O
from	pointer
,	O
char	O
*	O
to	pointer
,	O
int	O
size	int
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
size	int
;	O
i	int
++	O
)	O
to	pointer
[	O
i	int
]	O
=	O
from	pointer
[	O
i	int
]	O
;	O
}	O
static	O
int	O
first_nonopt	int
;	O
static	O
int	O
last_nonopt	int
;	O
static	O
void	O
exchange	function
(	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
nonopts_size	int
=	O
(	O
last_nonopt	int
-	O
first_nonopt	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
;	O
char	O
*	O
*	O
temp	pointer
;	O
if	O
(	O
nonopts_size	int
==	O
0	int
)	O
{	O
printf	function
(	O
"Error: zero length array allocation in exchange - Exiting\n"	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
temp	pointer
=	O
(	O
char	O
*	O
*	O
)	O
malloc	function
(	O
nonopts_size	int
)	O
;	O
if	O
(	O
temp	pointer
==	O
NULL	O
)	O
ReportError	function
(	O
NULL	O
,	O
RE_OUTOFMEM	int
|	O
RE_FATAL	int
,	O
"exchange"	pointer
,	O
NULL	O
)	O
;	O
my_bcopy	function
(	O
&	O
argv	pointer
[	O
first_nonopt	int
]	O
[	O
0	int
]	O
,	O
temp	pointer
[	O
0	int
]	O
,	O
nonopts_size	int
)	O
;	O
my_bcopy	function
(	O
&	O
argv	pointer
[	O
last_nonopt	int
]	O
[	O
0	int
]	O
,	O
&	O
argv	pointer
[	O
first_nonopt	int
]	O
[	O
0	int
]	O
,	O
(	O
optind	int
-	O
last_nonopt	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
my_bcopy	function
(	O
temp	pointer
[	O
0	int
]	O
,	O
&	O
argv	pointer
[	O
first_nonopt	int
+	O
optind	int
-	O
last_nonopt	int
]	O
[	O
0	int
]	O
,	O
nonopts_size	int
)	O
;	O
first_nonopt	int
+=	O
(	O
optind	int
-	O
last_nonopt	int
)	O
;	O
last_nonopt	int
=	O
optind	int
;	O
}	O
int	O
_getopt_internal	function
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	pointer
,	O
const	O
char	O
*	O
optstring	pointer
,	O
const	O
struct	O
option	struct
*	O
longopts	pointer
,	O
int	O
*	O
longind	pointer
,	O
int	O
long_only	int
)	O
{	O
int	O
option_index	int
;	O
optarg	pointer
=	O
0	int
;	O
if	O
(	O
optind	int
==	O
0	int
)	O
{	O
first_nonopt	int
=	O
last_nonopt	int
=	O
optind	int
=	O
1	int
;	O
nextchar	pointer
=	O
NULL	O
;	O
if	O
(	O
optstring	pointer
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
ordering	enum
=	O
RETURN_IN_ORDER	int
;	O
++	O
optstring	pointer
;	O
}	O
else	O
if	O
(	O
optstring	pointer
[	O
0	int
]	O
==	O
'+'	O
)	O
{	O
ordering	enum
=	O
REQUIRE_ORDER	int
;	O
++	O
optstring	pointer
;	O
}	O
else	O
if	O
(	O
getenv	function
(	O
"POSIXLY_CORRECT"	pointer
)	O
!=	O
NULL	O
)	O
ordering	enum
=	O
REQUIRE_ORDER	int
;	O
else	O
ordering	enum
=	O
PERMUTE	int
;	O
}	O
if	O
(	O
nextchar	pointer
==	O
NULL	O
||	O
*	O
nextchar	pointer
==	O
'\0'	O
)	O
{	O
if	O
(	O
ordering	enum
==	O
PERMUTE	int
)	O
{	O
if	O
(	O
first_nonopt	int
!=	O
last_nonopt	int
&&	O
last_nonopt	int
!=	O
optind	int
)	O
exchange	function
(	O
(	O
char	O
*	O
*	O
)	O
argv	pointer
)	O
;	O
else	O
if	O
(	O
last_nonopt	int
!=	O
optind	int
)	O
first_nonopt	int
=	O
optind	int
;	O
while	O
(	O
optind	int
<	O
argc	int
&&	O
(	O
argv	pointer
[	O
optind	int
]	O
[	O
0	int
]	O
!=	O
'-'	O
||	O
argv	pointer
[	O
optind	int
]	O
[	O
1	int
]	O
==	O
'\0'	O
)	O
)	O
optind	int
++	O
;	O
last_nonopt	int
=	O
optind	int
;	O
}	O
if	O
(	O
optind	int
!=	O
argc	int
&&	O
!	O
strcmp	function
(	O
argv	pointer
[	O
optind	int
]	O
,	O
"--"	pointer
)	O
)	O
{	O
optind	int
++	O
;	O
if	O
(	O
first_nonopt	int
!=	O
last_nonopt	int
&&	O
last_nonopt	int
!=	O
optind	int
)	O
exchange	function
(	O
(	O
char	O
*	O
*	O
)	O
argv	pointer
)	O
;	O
else	O
if	O
(	O
first_nonopt	int
==	O
last_nonopt	int
)	O
first_nonopt	int
=	O
optind	int
;	O
last_nonopt	int
=	O
argc	int
;	O
optind	int
=	O
argc	int
;	O
}	O
if	O
(	O
optind	int
==	O
argc	int
)	O
{	O
if	O
(	O
first_nonopt	int
!=	O
last_nonopt	int
)	O
optind	int
=	O
first_nonopt	int
;	O
return	O
EOF	O
;	O
}	O
if	O
(	O
(	O
argv	pointer
[	O
optind	int
]	O
[	O
0	int
]	O
!=	O
'-'	O
||	O
argv	pointer
[	O
optind	int
]	O
[	O
1	int
]	O
==	O
'\0'	O
)	O
)	O
{	O
if	O
(	O
ordering	enum
==	O
REQUIRE_ORDER	int
)	O
return	O
EOF	O
;	O
optarg	pointer
=	O
argv	pointer
[	O
optind	int
++	O
]	O
;	O
return	O
1	int
;	O
}	O
nextchar	pointer
=	O
(	O
argv	pointer
[	O
optind	int
]	O
+	O
1	int
+	O
(	O
longopts	pointer
!=	O
NULL	O
&&	O
argv	pointer
[	O
optind	int
]	O
[	O
1	int
]	O
==	O
'-'	O
)	O
)	O
;	O
}	O
if	O
(	O
longopts	pointer
!=	O
NULL	O
&&	O
(	O
(	O
argv	pointer
[	O
optind	int
]	O
[	O
0	int
]	O
==	O
'-'	O
&&	O
(	O
argv	pointer
[	O
optind	int
]	O
[	O
1	int
]	O
==	O
'-'	O
||	O
long_only	int
)	O
)	O
)	O
)	O
{	O
const	O
struct	O
option	struct
*	O
p	double
;	O
char	O
*	O
s	pointer
=	O
nextchar	pointer
;	O
int	O
exact	int
=	O
0	int
;	O
int	O
ambig	int
=	O
0	int
;	O
const	O
struct	O
option	struct
*	O
pfound	pointer
=	O
NULL	O
;	O
int	O
indfound	int
=	O
0	int
;	O
while	O
(	O
*	O
s	pointer
&&	O
*	O
s	pointer
!=	O
'='	O
)	O
s	pointer
++	O
;	O
for	O
(	O
p	double
=	O
longopts	pointer
,	O
option_index	int
=	O
0	int
;	O
p	double
->	O
name	pointer
;	O
p	double
++	O
,	O
option_index	int
++	O
)	O
if	O
(	O
!	O
strncmp	function
(	O
p	double
->	O
name	pointer
,	O
nextchar	pointer
,	O
s	pointer
-	O
nextchar	pointer
)	O
)	O
{	O
if	O
(	O
s	pointer
-	O
nextchar	pointer
==	O
strlen	function
(	O
p	double
->	O
name	pointer
)	O
)	O
{	O
pfound	pointer
=	O
p	double
;	O
indfound	int
=	O
option_index	int
;	O
exact	int
=	O
1	int
;	O
break	O
;	O
}	O
else	O
if	O
(	O
pfound	pointer
==	O
NULL	O
)	O
{	O
pfound	pointer
=	O
p	double
;	O
indfound	int
=	O
option_index	int
;	O
}	O
else	O
ambig	int
=	O
1	int
;	O
}	O
if	O
(	O
ambig	int
&&	O
!	O
exact	int
)	O
{	O
if	O
(	O
opterr	int
)	O
printf	function
(	O
"%s: option `%s' is ambiguous\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
,	O
argv	pointer
[	O
optind	int
]	O
)	O
;	O
nextchar	pointer
+=	O
strlen	function
(	O
nextchar	pointer
)	O
;	O
optind	int
++	O
;	O
return	O
'?'	O
;	O
}	O
if	O
(	O
pfound	pointer
!=	O
NULL	O
)	O
{	O
option_index	int
=	O
indfound	int
;	O
optind	int
++	O
;	O
if	O
(	O
*	O
s	pointer
)	O
{	O
if	O
(	O
pfound	pointer
->	O
has_arg	int
)	O
optarg	pointer
=	O
s	pointer
+	O
1	int
;	O
else	O
{	O
if	O
(	O
opterr	int
)	O
{	O
if	O
(	O
argv	pointer
[	O
optind	int
-	O
1	int
]	O
[	O
1	int
]	O
==	O
'-'	O
)	O
printf	function
(	O
"%s: option `--%s' doesn't allow an argument\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
,	O
pfound	pointer
->	O
name	pointer
)	O
;	O
else	O
printf	function
(	O
"%s: option `%c%s' doesn't allow an argument\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
,	O
argv	pointer
[	O
optind	int
-	O
1	int
]	O
[	O
0	int
]	O
,	O
pfound	pointer
->	O
name	pointer
)	O
;	O
}	O
nextchar	pointer
+=	O
strlen	function
(	O
nextchar	pointer
)	O
;	O
return	O
'?'	O
;	O
}	O
}	O
else	O
if	O
(	O
pfound	pointer
->	O
has_arg	int
==	O
1	int
)	O
{	O
if	O
(	O
optind	int
<	O
argc	int
)	O
optarg	pointer
=	O
argv	pointer
[	O
optind	int
++	O
]	O
;	O
else	O
{	O
if	O
(	O
opterr	int
)	O
printf	function
(	O
"%s: option `%s' requires an argument\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
,	O
argv	pointer
[	O
optind	int
-	O
1	int
]	O
)	O
;	O
nextchar	pointer
+=	O
strlen	function
(	O
nextchar	pointer
)	O
;	O
return	O
'?'	O
;	O
}	O
}	O
nextchar	pointer
+=	O
strlen	function
(	O
nextchar	pointer
)	O
;	O
if	O
(	O
longind	pointer
!=	O
NULL	O
)	O
*	O
longind	pointer
=	O
option_index	int
;	O
if	O
(	O
pfound	pointer
->	O
flag	pointer
)	O
{	O
*	O
(	O
pfound	pointer
->	O
flag	pointer
)	O
=	O
pfound	pointer
->	O
val	int
;	O
return	O
0	int
;	O
}	O
return	O
pfound	pointer
->	O
val	int
;	O
}	O
if	O
(	O
!	O
long_only	int
||	O
argv	pointer
[	O
optind	int
]	O
[	O
1	int
]	O
==	O
'-'	O
||	O
my_index	function
(	O
(	O
char	O
*	O
)	O
optstring	pointer
,	O
*	O
nextchar	pointer
)	O
==	O
NULL	O
)	O
{	O
if	O
(	O
opterr	int
)	O
{	O
if	O
(	O
argv	pointer
[	O
optind	int
]	O
[	O
1	int
]	O
==	O
'-'	O
)	O
printf	function
(	O
"%s: unrecognized option `--%s'\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
,	O
nextchar	pointer
)	O
;	O
else	O
printf	function
(	O
"%s: unrecognized option `%c%s'\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
,	O
argv	pointer
[	O
optind	int
]	O
[	O
0	int
]	O
,	O
nextchar	pointer
)	O
;	O
}	O
nextchar	pointer
+=	O
strlen	function
(	O
nextchar	pointer
)	O
;	O
optind	int
++	O
;	O
return	O
'?'	O
;	O
}	O
}	O
{	O
char	O
c	char
=	O
*	O
nextchar	pointer
++	O
;	O
char	O
*	O
temp	pointer
=	O
my_index	function
(	O
(	O
char	O
*	O
)	O
optstring	pointer
,	O
c	char
)	O
;	O
if	O
(	O
*	O
nextchar	pointer
==	O
'\0'	O
)	O
optind	int
++	O
;	O
if	O
(	O
temp	pointer
==	O
NULL	O
||	O
c	char
==	O
':'	O
)	O
{	O
if	O
(	O
opterr	int
)	O
{	O
if	O
(	O
c	char
<	O
040	int
||	O
c	char
>=	O
0177	int
)	O
printf	function
(	O
"%s: unrecognized option, character code 0%o\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
,	O
c	char
)	O
;	O
else	O
printf	function
(	O
"%s: unrecognized option `-%c'\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
,	O
c	char
)	O
;	O
}	O
return	O
'?'	O
;	O
}	O
if	O
(	O
temp	pointer
[	O
1	int
]	O
==	O
':'	O
)	O
{	O
if	O
(	O
temp	pointer
[	O
2	int
]	O
==	O
':'	O
)	O
{	O
if	O
(	O
*	O
nextchar	pointer
!=	O
'\0'	O
)	O
{	O
optarg	pointer
=	O
nextchar	pointer
;	O
optind	int
++	O
;	O
}	O
else	O
optarg	pointer
=	O
0	int
;	O
nextchar	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
if	O
(	O
*	O
nextchar	pointer
!=	O
0	int
)	O
{	O
optarg	pointer
=	O
nextchar	pointer
;	O
optind	int
++	O
;	O
}	O
else	O
if	O
(	O
optind	int
==	O
argc	int
)	O
{	O
if	O
(	O
opterr	int
)	O
printf	function
(	O
"%s: option `-%c' requires an argument\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
,	O
c	char
)	O
;	O
c	char
=	O
'?'	O
;	O
}	O
else	O
optarg	pointer
=	O
argv	pointer
[	O
optind	int
++	O
]	O
;	O
nextchar	pointer
=	O
NULL	O
;	O
}	O
}	O
return	O
c	char
;	O
}	O
}	O
int	O
_getopt	function
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	pointer
,	O
const	O
char	O
*	O
optstring	pointer
)	O
{	O
return	O
_getopt_internal	function
(	O
argc	int
,	O
argv	pointer
,	O
optstring	pointer
,	O
(	O
const	O
struct	O
option	struct
*	O
)	O
0	int
,	O
(	O
int	O
*	O
)	O
0	int
,	O
0	int
)	O
;	O
}	O
