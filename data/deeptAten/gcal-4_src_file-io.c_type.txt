__BEGIN_DECLARATIONS	O
static	O
void	O
make_absolute_filename	function
__P_	O
(	O
(	O
char	O
*	O
*	O
absolute_filename	pointer
,	O
const	O
char	O
*	O
directory	pointer
,	O
const	O
char	O
*	O
filename	pointer
)	O
)	O
;	O
static	O
FILE	struct
*	O
get_file_ptr	function
__P_	O
(	O
(	O
FILE	struct
*	O
fp	pointer
,	O
const	O
char	O
*	O
filename	pointer
,	O
const	O
int	O
level	int
,	O
const	O
Fmode_enum	enum
mode	enum
,	O
Bool	int
*	O
is_first	pointer
)	O
)	O
;	O
__END_DECLARATIONS	O
FILE	struct
*	O
file_open	function
(	O
filename	pointer
,	O
level	int
,	O
mode	enum
,	O
bad_sys_include	pointer
)	O
char	O
*	O
*	O
filename	pointer
;	O
const	O
int	O
level	int
;	O
const	O
Fmode_enum	enum
mode	enum
;	O
Bool	int
*	O
bad_sys_include	pointer
;	O
{	O
auto	O
FILE	struct
*	O
fp	pointer
=	O
(	O
FILE	struct
*	O
)	O
NULL	O
;	O
register	O
int	O
len	int
;	O
auto	O
char	O
*	O
ptr_env	pointer
;	O
auto	O
char	O
*	O
ptr_char	pointer
;	O
auto	O
Bool	int
is_absolute_filename	int
=	O
FALSE	O
;	O
auto	O
Bool	int
is_root_based_filename	int
=	O
FALSE	O
;	O
auto	O
Bool	int
is_disk_given	int
=	O
FALSE	O
;	O
auto	O
Bool	int
is_first	pointer
=	O
(	O
Bool	int
)	O
(	O
(	O
mode	enum
==	O
REsource	int
)	O
?	O
TRUE	O
:	O
FALSE	O
)	O
;	O
len	int
=	O
(	O
int	O
)	O
strlen	function
(	O
*	O
filename	pointer
)	O
;	O
if	O
(	O
(	O
Uint	int
)	O
len	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
len	int
+	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
strcpy	function
(	O
s1	pointer
,	O
*	O
filename	pointer
)	O
;	O
ptr_char	pointer
=	O
*	O
filename	pointer
;	O
if	O
(	O
*	O
ptr_char	pointer
==	O
*	O
DIR_SEP	pointer
||	O
*	O
ptr_char	pointer
==	O
*	O
ACTUAL_DIR	pointer
)	O
{	O
if	O
(	O
*	O
ptr_char	pointer
==	O
*	O
ACTUAL_DIR	pointer
)	O
{	O
while	O
(	O
*	O
ptr_char	pointer
==	O
*	O
ACTUAL_DIR	pointer
)	O
ptr_char	pointer
++	O
;	O
if	O
(	O
*	O
ptr_char	pointer
==	O
*	O
DIR_SEP	pointer
)	O
{	O
is_absolute_filename	int
=	O
TRUE	O
;	O
ptr_char	pointer
--	O
;	O
}	O
}	O
else	O
is_absolute_filename	int
=	O
TRUE	O
;	O
}	O
else	O
if	O
(	O
(	O
*	O
ptr_char	pointer
==	O
'-'	O
)	O
&&	O
(	O
len	int
==	O
1	int
)	O
)	O
is_absolute_filename	int
=	O
TRUE	O
;	O
if	O
(	O
*	O
ptr_char	pointer
==	O
*	O
DIR_SEP	pointer
)	O
is_root_based_filename	int
=	O
TRUE	O
;	O
if	O
(	O
(	O
is_disk_given	int
||	O
is_root_based_filename	int
)	O
&&	O
(	O
mode	enum
==	O
SYs_include	int
)	O
)	O
{	O
*	O
bad_sys_include	pointer
=	O
TRUE	O
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
*	O
bad_sys_include	pointer
=	O
FALSE	O
;	O
if	O
(	O
mode	enum
!=	O
SYs_include	int
)	O
{	O
if	O
(	O
mode	enum
!=	O
COmmon	int
)	O
{	O
if	O
(	O
is_absolute_filename	int
||	O
mode	enum
==	O
USr_include	int
||	O
mode	enum
==	O
HEre	int
)	O
{	O
fp	pointer
=	O
get_file_ptr	function
(	O
fp	pointer
,	O
*	O
filename	pointer
,	O
level	int
,	O
mode	enum
,	O
&	O
is_first	pointer
)	O
;	O
if	O
(	O
fp	pointer
!=	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
return	O
(	O
fp	pointer
)	O
;	O
else	O
if	O
(	O
is_absolute_filename	int
||	O
mode	enum
==	O
HEre	int
)	O
{	O
if	O
(	O
(	O
fp	pointer
==	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
&&	O
(	O
warning_level	int
>=	O
WARN_LVL_MAX	int
)	O
)	O
my_error	function
(	O
ERR_FILE_NOT_FOUND	int
,	O
*	O
filename	pointer
,	O
0L	int
,	O
*	O
filename	pointer
,	O
0	int
)	O
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
}	O
}	O
if	O
(	O
fp	pointer
==	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
{	O
if	O
(	O
mode	enum
==	O
COmmon	int
)	O
ptr_env	pointer
=	O
getenv	function
(	O
ENV_VAR_PATH	pointer
)	O
;	O
else	O
ptr_env	pointer
=	O
getenv	function
(	O
ENV_VAR_GCALPATH	pointer
)	O
;	O
if	O
(	O
ptr_env	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
if	O
(	O
*	O
ptr_env	pointer
)	O
{	O
auto	O
Bool	int
ok	int
=	O
FALSE	O
;	O
len	int
=	O
(	O
int	O
)	O
strlen	function
(	O
ptr_env	pointer
)	O
;	O
if	O
(	O
(	O
Uint	int
)	O
len	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
len	int
+	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
strcpy	function
(	O
s2	pointer
,	O
ptr_env	pointer
)	O
;	O
while	O
(	O
!	O
ok	int
&&	O
(	O
fp	pointer
==	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
)	O
{	O
ok	int
=	O
(	O
Bool	int
)	O
(	O
(	O
ptr_char	pointer
=	O
strchr	function
(	O
s2	pointer
,	O
*	O
PATH_SEP	pointer
)	O
)	O
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
ok	int
)	O
len	int
=	O
(	O
int	O
)	O
strlen	function
(	O
s2	pointer
)	O
;	O
else	O
len	int
=	O
(	O
int	O
)	O
strlen	function
(	O
s2	pointer
)	O
-	O
strlen	function
(	O
ptr_char	pointer
)	O
;	O
strncpy	function
(	O
s1	pointer
,	O
s2	pointer
,	O
len	int
)	O
;	O
s1	pointer
[	O
len	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
len	int
)	O
if	O
(	O
s1	pointer
[	O
len	int
-	O
1	int
]	O
!=	O
*	O
DIR_SEP	pointer
)	O
strcat	function
(	O
s1	pointer
,	O
DIR_SEP	pointer
)	O
;	O
strcat	function
(	O
s1	pointer
,	O
*	O
filename	pointer
)	O
;	O
if	O
(	O
*	O
s1	pointer
)	O
fp	pointer
=	O
get_file_ptr	function
(	O
fp	pointer
,	O
s1	pointer
,	O
level	int
,	O
mode	enum
,	O
&	O
is_first	pointer
)	O
;	O
if	O
(	O
ok	int
)	O
break	O
;	O
ptr_char	pointer
=	O
s2	pointer
+	O
len	int
+	O
1	int
;	O
if	O
(	O
!	O
*	O
ptr_char	pointer
)	O
break	O
;	O
strcpy	function
(	O
s2	pointer
,	O
ptr_char	pointer
)	O
;	O
}	O
if	O
(	O
(	O
fp	pointer
==	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
&&	O
(	O
*	O
(	O
ptr_env	pointer
+	O
strlen	function
(	O
ptr_env	pointer
)	O
-	O
1	int
)	O
==	O
*	O
PATH_SEP	pointer
)	O
)	O
fp	pointer
=	O
get_file_ptr	function
(	O
fp	pointer
,	O
*	O
filename	pointer
,	O
level	int
,	O
mode	enum
,	O
&	O
is_first	pointer
)	O
;	O
}	O
}	O
if	O
(	O
mode	enum
!=	O
COmmon	int
)	O
{	O
if	O
(	O
fp	pointer
==	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
{	O
ptr_env	pointer
=	O
getenv	function
(	O
ENV_VAR_HOME	pointer
)	O
;	O
if	O
(	O
ptr_env	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
if	O
(	O
*	O
ptr_env	pointer
)	O
{	O
make_absolute_filename	function
(	O
&	O
s1	pointer
,	O
ptr_env	pointer
,	O
*	O
filename	pointer
)	O
;	O
fp	pointer
=	O
get_file_ptr	function
(	O
fp	pointer
,	O
s1	pointer
,	O
level	int
,	O
mode	enum
,	O
&	O
is_first	pointer
)	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
mode	enum
==	O
COmmon	int
)	O
return	O
(	O
fp	pointer
)	O
;	O
if	O
(	O
fp	pointer
==	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
{	O
ptr_env	pointer
=	O
getenv	function
(	O
ENV_VAR_HOME	pointer
)	O
;	O
if	O
(	O
ptr_env	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
if	O
(	O
*	O
ptr_env	pointer
)	O
{	O
ptr_char	pointer
=	O
getenv	function
(	O
ENV_VAR_USR_DATADIR	pointer
)	O
;	O
if	O
(	O
ptr_char	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
if	O
(	O
*	O
ptr_char	pointer
)	O
{	O
make_absolute_filename	function
(	O
&	O
s1	pointer
,	O
ptr_env	pointer
,	O
ptr_char	pointer
)	O
;	O
strcpy	function
(	O
s2	pointer
,	O
s1	pointer
)	O
;	O
make_absolute_filename	function
(	O
&	O
s1	pointer
,	O
s2	pointer
,	O
*	O
filename	pointer
)	O
;	O
fp	pointer
=	O
get_file_ptr	function
(	O
fp	pointer
,	O
s1	pointer
,	O
level	int
,	O
mode	enum
,	O
&	O
is_first	pointer
)	O
;	O
}	O
}	O
else	O
{	O
make_absolute_filename	function
(	O
&	O
s1	pointer
,	O
ptr_env	pointer
,	O
GCAL_USR_DATADIR	O
)	O
;	O
strcpy	function
(	O
s2	pointer
,	O
s1	pointer
)	O
;	O
make_absolute_filename	function
(	O
&	O
s1	pointer
,	O
s2	pointer
,	O
*	O
filename	pointer
)	O
;	O
fp	pointer
=	O
get_file_ptr	function
(	O
fp	pointer
,	O
s1	pointer
,	O
level	int
,	O
mode	enum
,	O
&	O
is_first	pointer
)	O
;	O
}	O
}	O
}	O
if	O
(	O
fp	pointer
==	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
{	O
ptr_env	pointer
=	O
getenv	function
(	O
ENV_VAR_SYS_DATADIR	pointer
)	O
;	O
if	O
(	O
ptr_env	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
if	O
(	O
*	O
ptr_env	pointer
)	O
{	O
make_absolute_filename	function
(	O
&	O
s1	pointer
,	O
ptr_env	pointer
,	O
*	O
filename	pointer
)	O
;	O
fp	pointer
=	O
get_file_ptr	function
(	O
fp	pointer
,	O
s1	pointer
,	O
level	int
,	O
mode	enum
,	O
&	O
is_first	pointer
)	O
;	O
}	O
}	O
else	O
{	O
make_absolute_filename	function
(	O
&	O
s1	pointer
,	O
GCAL_SYS_DATADIR	O
,	O
*	O
filename	pointer
)	O
;	O
fp	pointer
=	O
get_file_ptr	function
(	O
fp	pointer
,	O
s1	pointer
,	O
level	int
,	O
mode	enum
,	O
&	O
is_first	pointer
)	O
;	O
}	O
}	O
if	O
(	O
fp	pointer
!=	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
{	O
len	int
=	O
(	O
int	O
)	O
strlen	function
(	O
s1	pointer
)	O
;	O
if	O
(	O
(	O
int	O
)	O
strlen	function
(	O
*	O
filename	pointer
)	O
<	O
len	int
)	O
*	O
filename	pointer
=	O
(	O
char	O
*	O
)	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
*	O
filename	pointer
,	O
len	int
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"*filename"	pointer
,	O
0	int
)	O
;	O
strcpy	function
(	O
*	O
filename	pointer
,	O
s1	pointer
)	O
;	O
}	O
else	O
if	O
(	O
warning_level	int
>=	O
WARN_LVL_MAX	int
)	O
my_error	function
(	O
ERR_FILE_NOT_FOUND	int
,	O
*	O
filename	pointer
,	O
0L	int
,	O
*	O
filename	pointer
,	O
0	int
)	O
;	O
return	O
(	O
fp	pointer
)	O
;	O
}	O
char	O
*	O
file_read_line	function
(	O
fp	pointer
,	O
line_buffer	pointer
,	O
in_pool	int
,	O
pool	pointer
,	O
ptr_pool	pointer
,	O
filename	pointer
,	O
line_number	long
,	O
line_length	pointer
,	O
mode	enum
,	O
is_include	pointer
,	O
is_dvar	pointer
,	O
is_tvar	pointer
)	O
FILE	struct
*	O
fp	pointer
;	O
char	O
*	O
*	O
line_buffer	pointer
;	O
int	O
*	O
in_pool	int
;	O
char	O
*	O
pool	pointer
;	O
char	O
*	O
ptr_pool	pointer
;	O
const	O
char	O
*	O
filename	pointer
;	O
long	O
*	O
line_number	long
;	O
int	O
*	O
line_length	pointer
;	O
const	O
Fmode_enum	enum
mode	enum
;	O
Bool	int
*	O
is_include	pointer
;	O
Bool	int
*	O
is_dvar	pointer
;	O
Bool	int
*	O
is_tvar	pointer
;	O
{	O
static	O
Uint	int
lbuf_max	int
=	O
MAXLEN_MAX	int
;	O
register	O
int	O
i	int
=	O
1	int
;	O
auto	O
char	O
*	O
ptr_char	pointer
;	O
auto	O
char	O
ch	char
;	O
auto	O
Bool	int
is_error	int
=	O
FALSE	O
;	O
auto	O
Bool	int
is_rem	int
=	O
FALSE	O
;	O
if	O
(	O
lbuf_max	int
<	O
maxlen_max	int
)	O
{	O
*	O
line_buffer	pointer
=	O
(	O
char	O
*	O
)	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
*	O
line_buffer	pointer
,	O
maxlen_max	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"*line_buffer"	pointer
,	O
maxlen_max	int
)	O
;	O
lbuf_max	int
=	O
maxlen_max	int
;	O
}	O
*	O
*	O
line_buffer	pointer
=	O
'\0'	O
;	O
*	O
line_length	pointer
=	O
0	int
;	O
ptr_char	pointer
=	O
*	O
line_buffer	pointer
;	O
(	O
*	O
is_include	pointer
)	O
=	O
(	O
*	O
is_dvar	pointer
)	O
=	O
(	O
*	O
is_tvar	pointer
)	O
=	O
FALSE	O
;	O
if	O
(	O
!	O
*	O
in_pool	int
)	O
{	O
*	O
in_pool	int
=	O
read	function
(	O
fileno	function
(	O
fp	pointer
)	O
,	O
(	O
char	O
*	O
)	O
pool	pointer
,	O
BUF_LEN	int
)	O
;	O
if	O
(	O
!	O
*	O
in_pool	int
)	O
return	O
(	O
NULL	O
)	O
;	O
else	O
if	O
(	O
*	O
in_pool	int
<	O
0	int
)	O
my_error	function
(	O
ERR_READ_FILE	int
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
,	O
filename	pointer
,	O
0	int
)	O
;	O
ptr_pool	pointer
=	O
pool	pointer
;	O
}	O
if	O
(	O
*	O
ptr_pool	pointer
==	O
'\n'	O
)	O
(	O
*	O
line_number	long
)	O
++	O
;	O
while	O
(	O
(	O
*	O
ptr_pool	pointer
!=	O
REM_CHAR	char
)	O
&&	O
(	O
(	O
(	O
mode	enum
==	O
REsource	int
)	O
&&	O
(	O
*	O
ptr_pool	pointer
!=	O
*	O
RC_INCL_STMENT	pointer
)	O
&&	O
(	O
*	O
ptr_pool	pointer
!=	O
RC_TVAR_CHAR	char
)	O
&&	O
!	O
isalnum	function
(	O
*	O
ptr_pool	pointer
)	O
)	O
||	O
(	O
(	O
mode	enum
==	O
REsponse	int
)	O
&&	O
(	O
*	O
ptr_pool	pointer
!=	O
*	O
MONTH3_LIT	pointer
)	O
&&	O
(	O
*	O
ptr_pool	pointer
!=	O
*	O
FYEAR_SEP	pointer
)	O
&&	O
(	O
*	O
ptr_pool	pointer
!=	O
RSP_CHAR	char
)	O
&&	O
!	O
isalnum	function
(	O
*	O
ptr_pool	pointer
)	O
&&	O
(	O
*	O
ptr_pool	pointer
!=	O
RC_ADATE_CHAR	char
)	O
&&	O
(	O
*	O
ptr_pool	pointer
!=	O
*	O
SWITCH	pointer
)	O
&&	O
(	O
*	O
ptr_pool	pointer
!=	O
*	O
SWITCH2	pointer
)	O
)	O
)	O
)	O
{	O
if	O
(	O
(	O
!	O
*	O
*	O
line_buffer	pointer
&&	O
!	O
isspace	function
(	O
*	O
ptr_pool	pointer
)	O
)	O
||	O
*	O
*	O
line_buffer	pointer
)	O
{	O
if	O
(	O
(	O
Uint	int
)	O
i	int
>=	O
maxlen_max	int
)	O
{	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
TRUE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
ptr_char	pointer
=	O
*	O
line_buffer	pointer
+	O
i	int
-	O
1	int
;	O
}	O
i	int
++	O
;	O
*	O
ptr_char	pointer
++	O
=	O
*	O
ptr_pool	pointer
++	O
;	O
}	O
else	O
ptr_pool	pointer
++	O
;	O
(	O
*	O
in_pool	int
)	O
--	O
;	O
if	O
(	O
!	O
*	O
in_pool	int
)	O
{	O
*	O
in_pool	int
=	O
read	function
(	O
fileno	function
(	O
fp	pointer
)	O
,	O
(	O
char	O
*	O
)	O
pool	pointer
,	O
BUF_LEN	int
)	O
;	O
if	O
(	O
!	O
*	O
in_pool	int
)	O
{	O
if	O
(	O
i	int
>	O
1	int
)	O
break	O
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
else	O
if	O
(	O
*	O
in_pool	int
<	O
0	int
)	O
my_error	function
(	O
ERR_READ_FILE	int
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
,	O
filename	pointer
,	O
0	int
)	O
;	O
ptr_pool	pointer
=	O
pool	pointer
;	O
}	O
if	O
(	O
*	O
ptr_pool	pointer
==	O
'\n'	O
)	O
{	O
if	O
(	O
i	int
>	O
1	int
)	O
{	O
if	O
(	O
(	O
Uint	int
)	O
i	int
<	O
maxlen_max	int
)	O
i	int
--	O
;	O
(	O
*	O
in_pool	int
)	O
++	O
;	O
ptr_pool	pointer
--	O
;	O
ptr_char	pointer
--	O
;	O
break	O
;	O
}	O
(	O
*	O
line_number	long
)	O
++	O
;	O
}	O
}	O
(	O
*	O
line_number	long
)	O
++	O
;	O
if	O
(	O
(	O
mode	enum
!=	O
COmmon	int
)	O
&&	O
(	O
*	O
ptr_pool	pointer
==	O
REM_CHAR	char
)	O
)	O
{	O
is_rem	int
=	O
TRUE	O
;	O
LOOP	O
{	O
ch	char
=	O
'\0'	O
;	O
while	O
(	O
*	O
ptr_pool	pointer
!=	O
'\n'	O
)	O
{	O
if	O
(	O
!	O
*	O
in_pool	int
)	O
{	O
*	O
in_pool	int
=	O
read	function
(	O
fileno	function
(	O
fp	pointer
)	O
,	O
(	O
char	O
*	O
)	O
pool	pointer
,	O
BUF_LEN	int
)	O
;	O
if	O
(	O
!	O
*	O
in_pool	int
)	O
return	O
(	O
NULL	O
)	O
;	O
else	O
if	O
(	O
*	O
in_pool	int
<	O
0	int
)	O
my_error	function
(	O
ERR_READ_FILE	int
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
,	O
filename	pointer
,	O
0	int
)	O
;	O
ptr_pool	pointer
=	O
pool	pointer
;	O
}	O
else	O
{	O
ch	char
=	O
*	O
ptr_pool	pointer
++	O
;	O
(	O
*	O
in_pool	int
)	O
--	O
;	O
}	O
}	O
ptr_pool	pointer
++	O
;	O
if	O
(	O
*	O
in_pool	int
)	O
(	O
*	O
in_pool	int
)	O
--	O
;	O
if	O
(	O
ch	char
==	O
QUOTE_CHAR	char
)	O
{	O
if	O
(	O
!	O
*	O
in_pool	int
)	O
{	O
*	O
in_pool	int
=	O
read	function
(	O
fileno	function
(	O
fp	pointer
)	O
,	O
(	O
char	O
*	O
)	O
pool	pointer
,	O
BUF_LEN	int
)	O
;	O
if	O
(	O
!	O
*	O
in_pool	int
)	O
return	O
(	O
NULL	O
)	O
;	O
else	O
if	O
(	O
*	O
in_pool	int
<	O
0	int
)	O
my_error	function
(	O
ERR_READ_FILE	int
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
,	O
filename	pointer
,	O
0	int
)	O
;	O
ptr_pool	pointer
=	O
pool	pointer
;	O
}	O
(	O
*	O
line_number	long
)	O
++	O
;	O
}	O
else	O
break	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
i	int
>	O
1	int
)	O
is_error	int
=	O
TRUE	O
;	O
else	O
if	O
(	O
mode	enum
==	O
REsource	int
)	O
{	O
if	O
(	O
*	O
ptr_pool	pointer
==	O
*	O
RC_INCL_STMENT	pointer
)	O
*	O
is_include	pointer
=	O
TRUE	O
;	O
else	O
if	O
(	O
isalpha	function
(	O
*	O
ptr_pool	pointer
)	O
)	O
*	O
is_dvar	pointer
=	O
TRUE	O
;	O
else	O
if	O
(	O
*	O
ptr_pool	pointer
==	O
RC_TVAR_CHAR	char
)	O
*	O
is_tvar	pointer
=	O
TRUE	O
;	O
else	O
if	O
(	O
!	O
isdigit	function
(	O
*	O
ptr_pool	pointer
)	O
)	O
is_error	int
=	O
TRUE	O
;	O
}	O
ch	char
=	O
(	O
*	O
ptr_char	pointer
++	O
)	O
=	O
*	O
ptr_pool	pointer
++	O
;	O
(	O
*	O
in_pool	int
)	O
--	O
;	O
LOOP	O
{	O
if	O
(	O
*	O
in_pool	int
)	O
{	O
if	O
(	O
(	O
Uint	int
)	O
i	int
<	O
maxlen_max	int
)	O
i	int
++	O
;	O
else	O
{	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
TRUE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
ptr_char	pointer
=	O
*	O
line_buffer	pointer
+	O
i	int
++	O
;	O
}	O
if	O
(	O
(	O
*	O
ptr_pool	pointer
==	O
'\n'	O
)	O
&&	O
(	O
ch	char
==	O
QUOTE_CHAR	char
)	O
)	O
{	O
if	O
(	O
is_error	int
)	O
{	O
(	O
*	O
in_pool	int
)	O
--	O
;	O
break	O
;	O
}	O
if	O
(	O
(	O
Uint	int
)	O
i	int
>=	O
maxlen_max	int
)	O
{	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
TRUE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
ptr_char	pointer
=	O
*	O
line_buffer	pointer
+	O
i	int
-	O
1	int
;	O
}	O
ptr_char	pointer
--	O
;	O
i	int
-=	O
2	int
;	O
(	O
*	O
line_number	long
)	O
++	O
;	O
ch	char
=	O
*	O
ptr_pool	pointer
;	O
if	O
(	O
*	O
in_pool	int
)	O
ptr_pool	pointer
++	O
;	O
}	O
else	O
{	O
ch	char
=	O
*	O
ptr_pool	pointer
++	O
;	O
if	O
(	O
ch	char
==	O
'\n'	O
)	O
{	O
(	O
*	O
in_pool	int
)	O
--	O
;	O
break	O
;	O
}	O
else	O
{	O
if	O
(	O
(	O
Uint	int
)	O
i	int
>=	O
maxlen_max	int
)	O
{	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
TRUE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
ptr_char	pointer
=	O
*	O
line_buffer	pointer
+	O
i	int
-	O
1	int
;	O
}	O
*	O
ptr_char	pointer
++	O
=	O
ch	char
;	O
}	O
}	O
if	O
(	O
*	O
in_pool	int
)	O
(	O
*	O
in_pool	int
)	O
--	O
;	O
}	O
if	O
(	O
!	O
*	O
in_pool	int
)	O
{	O
*	O
in_pool	int
=	O
read	function
(	O
fileno	function
(	O
fp	pointer
)	O
,	O
(	O
char	O
*	O
)	O
pool	pointer
,	O
BUF_LEN	int
)	O
;	O
if	O
(	O
!	O
*	O
in_pool	int
)	O
{	O
if	O
(	O
!	O
*	O
*	O
line_buffer	pointer
)	O
return	O
(	O
NULL	O
)	O
;	O
else	O
break	O
;	O
}	O
else	O
if	O
(	O
*	O
in_pool	int
<	O
0	int
)	O
my_error	function
(	O
ERR_READ_FILE	int
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
,	O
filename	pointer
,	O
0	int
)	O
;	O
ptr_pool	pointer
=	O
pool	pointer
;	O
}	O
}	O
}	O
*	O
ptr_char	pointer
=	O
'\0'	O
;	O
if	O
(	O
!	O
is_error	int
&&	O
!	O
is_rem	int
&&	O
(	O
mode	enum
==	O
REsource	int
)	O
)	O
{	O
if	O
(	O
*	O
is_tvar	pointer
)	O
{	O
if	O
(	O
i	int
>	O
2	int
)	O
{	O
if	O
(	O
(	O
isalpha	function
(	O
*	O
(	O
*	O
line_buffer	pointer
+	O
1	int
)	O
)	O
&&	O
(	O
*	O
(	O
*	O
line_buffer	pointer
+	O
2	int
)	O
!=	O
*	O
RC_VAR_ASSIGN	pointer
)	O
&&	O
(	O
*	O
(	O
*	O
line_buffer	pointer
+	O
2	int
)	O
!=	O
*	O
RC_TVAR_ICMD_ASSIGN	pointer
)	O
&&	O
(	O
*	O
(	O
*	O
line_buffer	pointer
+	O
2	int
)	O
!=	O
*	O
RC_TVAR_UCMD_ASSIGN	pointer
)	O
&&	O
(	O
*	O
(	O
*	O
line_buffer	pointer
+	O
2	int
)	O
!=	O
*	O
RC_VAR_ADD	pointer
)	O
&&	O
(	O
*	O
(	O
*	O
line_buffer	pointer
+	O
2	int
)	O
!=	O
*	O
RC_VAR_SUB	pointer
)	O
)	O
||	O
*	O
(	O
*	O
line_buffer	pointer
+	O
1	int
)	O
==	O
FLEFT_CHAR	char
||	O
*	O
(	O
*	O
line_buffer	pointer
+	O
1	int
)	O
==	O
FCENTER_CHAR	char
||	O
*	O
(	O
*	O
line_buffer	pointer
+	O
1	int
)	O
==	O
FRIGHT_CHAR	char
)	O
*	O
is_tvar	pointer
=	O
FALSE	O
;	O
}	O
else	O
*	O
is_tvar	pointer
=	O
FALSE	O
;	O
}	O
if	O
(	O
!	O
*	O
is_tvar	pointer
)	O
{	O
register	O
int	O
len	int
;	O
register	O
int	O
n	long
;	O
register	O
int	O
k	int
;	O
register	O
int	O
x	int
;	O
register	O
int	O
l	int
;	O
register	O
int	O
flen	int
=	O
1	int
;	O
auto	O
int	O
fstyle	pointer
=	O
FSTYLE_NONE	O
;	O
auto	O
int	O
fwidth	pointer
=	O
SPECIAL_VALUE	O
;	O
auto	O
char	O
*	O
ptr_tvar	pointer
;	O
static	O
char	O
tvar	array
[	O
2	int
]	O
;	O
static	O
char	O
the_tvar	char
;	O
auto	O
Bool	int
is_quoted	int
=	O
FALSE	O
;	O
auto	O
Bool	int
restore_tvar	int
=	O
FALSE	O
;	O
auto	O
Bool	int
ok	int
=	O
FALSE	O
;	O
auto	O
Bool	int
is_cformat	pointer
=	O
FALSE	O
;	O
auto	O
Bool	int
is_lformat	pointer
=	O
FALSE	O
;	O
auto	O
Bool	int
is_sign	pointer
=	O
FALSE	O
;	O
auto	O
Bool	int
is_lzero	pointer
=	O
FALSE	O
;	O
auto	O
Bool	int
is_fformat	pointer
=	O
FALSE	O
;	O
auto	O
Bool	int
is_suffix	pointer
=	O
FALSE	O
;	O
do	O
{	O
ptr_char	pointer
=	O
*	O
line_buffer	pointer
;	O
ptr_tvar	pointer
=	O
strchr	function
(	O
ptr_char	pointer
,	O
RC_TVAR_CHAR	char
)	O
;	O
if	O
(	O
ptr_tvar	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
n	long
=	O
flen	int
;	O
while	O
(	O
*	O
(	O
ptr_tvar	pointer
+	O
n	long
)	O
&&	O
!	O
isalpha	function
(	O
*	O
(	O
ptr_tvar	pointer
+	O
n	long
)	O
)	O
)	O
n	long
++	O
;	O
the_tvar	char
=	O
*	O
(	O
ptr_tvar	pointer
+	O
n	long
)	O
;	O
*	O
tvar	array
=	O
tvar	array
[	O
1	int
]	O
=	O
'\0'	O
;	O
n	long
=	O
k	int
=	O
0	int
;	O
do	O
{	O
flen	int
=	O
decode_format	function
(	O
ptr_tvar	pointer
,	O
flen	int
,	O
&	O
is_cformat	pointer
,	O
&	O
is_lformat	pointer
,	O
&	O
is_sign	pointer
,	O
&	O
is_lzero	pointer
,	O
&	O
is_suffix	pointer
,	O
&	O
is_fformat	pointer
,	O
&	O
fstyle	pointer
,	O
&	O
fwidth	pointer
)	O
;	O
if	O
(	O
fwidth	pointer
==	O
SPECIAL_VALUE	O
)	O
flen	int
=	O
1	int
;	O
*	O
tvar	array
=	O
*	O
(	O
ptr_tvar	pointer
+	O
flen	int
)	O
;	O
tvar	array
[	O
1	int
]	O
=	O
*	O
(	O
ptr_tvar	pointer
+	O
flen	int
+	O
1	int
)	O
;	O
len	int
=	O
(	O
int	O
)	O
(	O
ptr_tvar	pointer
-	O
ptr_char	pointer
)	O
;	O
if	O
(	O
len	int
)	O
{	O
while	O
(	O
(	O
Uint	int
)	O
len	int
+	O
k	int
>=	O
maxlen_max	int
)	O
{	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
TRUE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
ptr_char	pointer
=	O
*	O
line_buffer	pointer
+	O
n	long
;	O
}	O
strncpy	function
(	O
s5	pointer
+	O
k	int
,	O
ptr_char	pointer
,	O
len	int
)	O
;	O
k	int
+=	O
len	int
;	O
}	O
s5	pointer
[	O
k	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
k	int
)	O
if	O
(	O
s5	pointer
[	O
k	int
-	O
1	int
]	O
==	O
QUOTE_CHAR	char
)	O
is_quoted	int
=	O
TRUE	O
;	O
if	O
(	O
!	O
is_quoted	int
&&	O
isalpha	function
(	O
*	O
tvar	array
)	O
)	O
{	O
register	O
int	O
j	int
=	O
0	int
;	O
register	O
int	O
j_buf	int
;	O
if	O
(	O
rc_tvar	array
[	O
IDX	O
(	O
*	O
tvar	array
)	O
]	O
.	O
tvar_local	struct
.	O
tvar_text	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
||	O
rc_tvar	array
[	O
IDX	O
(	O
*	O
tvar	array
)	O
]	O
.	O
tvar_global	struct
.	O
tvar_text	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
auto	O
char	O
*	O
buf	pointer
;	O
if	O
(	O
rc_tvar	array
[	O
IDX	O
(	O
*	O
tvar	array
)	O
]	O
.	O
tvar_local	struct
.	O
tvar_text	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
if	O
(	O
!	O
*	O
rc_tvar	array
[	O
IDX	O
(	O
*	O
tvar	array
)	O
]	O
.	O
tvar_local	struct
.	O
tvar_text	pointer
)	O
{	O
if	O
(	O
rc_tvar	array
[	O
IDX	O
(	O
*	O
tvar	array
)	O
]	O
.	O
tvar_global	struct
.	O
tvar_text	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
buf	pointer
=	O
rc_tvar	array
[	O
IDX	O
(	O
*	O
tvar	array
)	O
]	O
.	O
tvar_global	struct
.	O
tvar_text	pointer
;	O
else	O
buf	pointer
=	O
rc_tvar	array
[	O
IDX	O
(	O
*	O
tvar	array
)	O
]	O
.	O
tvar_local	struct
.	O
tvar_text	pointer
;	O
}	O
else	O
buf	pointer
=	O
rc_tvar	array
[	O
IDX	O
(	O
*	O
tvar	array
)	O
]	O
.	O
tvar_local	struct
.	O
tvar_text	pointer
;	O
}	O
else	O
buf	pointer
=	O
rc_tvar	array
[	O
IDX	O
(	O
*	O
tvar	array
)	O
]	O
.	O
tvar_global	struct
.	O
tvar_text	pointer
;	O
j_buf	int
=	O
(	O
int	O
)	O
strlen	function
(	O
buf	pointer
)	O
;	O
if	O
(	O
fwidth	pointer
!=	O
SPECIAL_VALUE	O
)	O
{	O
if	O
(	O
is_fformat	pointer
)	O
j	int
=	O
fwidth	pointer
;	O
else	O
{	O
register	O
int	O
num_hls	int
=	O
0	int
;	O
auto	O
char	O
*	O
ptr_buf	pointer
=	O
buf	pointer
;	O
auto	O
char	O
*	O
tvar_text	pointer
;	O
auto	O
Bool	int
quote	int
=	O
FALSE	O
;	O
tvar_text	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
j_buf	int
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"tvar_text"	pointer
,	O
0	int
)	O
;	O
l	int
=	O
x	int
=	O
0	int
;	O
LOOP	O
{	O
if	O
(	O
*	O
(	O
ptr_buf	pointer
+	O
l	int
)	O
)	O
{	O
if	O
(	O
*	O
(	O
ptr_buf	pointer
+	O
l	int
)	O
==	O
RC_SPECIAL_TEXT_CHAR	O
)	O
{	O
l	int
++	O
;	O
switch	O
(	O
*	O
(	O
ptr_buf	pointer
+	O
l	int
)	O
)	O
{	O
case	O
RC_HLS1S_CHAR	O
:	O
case	O
RC_HLS1E_CHAR	O
:	O
case	O
RC_HLS2S_CHAR	char
:	O
case	O
RC_HLS2E_CHAR	char
:	O
case	O
RC_HLS3S_CHAR	char
:	O
case	O
RC_HLS3E_CHAR	char
:	O
case	O
RC_HLS4S_CHAR	char
:	O
case	O
RC_HLS4E_CHAR	char
:	O
case	O
RC_HLS5S_CHAR	char
:	O
case	O
RC_HLS5E_CHAR	char
:	O
if	O
(	O
quote	int
)	O
{	O
quote	int
=	O
FALSE	O
;	O
x	int
--	O
;	O
tvar_text	pointer
[	O
x	int
++	O
]	O
=	O
*	O
(	O
ptr_buf	pointer
+	O
l	int
-	O
1	int
)	O
;	O
tvar_text	pointer
[	O
x	int
++	O
]	O
=	O
*	O
(	O
ptr_buf	pointer
+	O
l	int
)	O
;	O
}	O
else	O
num_hls	int
++	O
;	O
break	O
;	O
default	O
:	O
tvar_text	pointer
[	O
x	int
++	O
]	O
=	O
*	O
(	O
ptr_buf	pointer
+	O
l	int
-	O
1	int
)	O
;	O
tvar_text	pointer
[	O
x	int
++	O
]	O
=	O
*	O
(	O
ptr_buf	pointer
+	O
l	int
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
*	O
(	O
ptr_buf	pointer
+	O
l	int
)	O
==	O
QUOTE_CHAR	char
)	O
quote	int
=	O
TRUE	O
;	O
else	O
quote	int
=	O
FALSE	O
;	O
tvar_text	pointer
[	O
x	int
++	O
]	O
=	O
*	O
(	O
ptr_buf	pointer
+	O
l	int
)	O
;	O
}	O
l	int
++	O
;	O
}	O
else	O
{	O
tvar_text	pointer
[	O
x	int
]	O
=	O
'\0'	O
;	O
break	O
;	O
}	O
}	O
free	function
(	O
tvar_text	pointer
)	O
;	O
if	O
(	O
highlight_flag	int
&&	O
(	O
ehls1s	struct
.	O
len	int
==	O
1	int
)	O
)	O
{	O
fwidth	pointer
+=	O
num_hls	int
;	O
j	int
=	O
MAX	O
(	O
fwidth	pointer
,	O
j_buf	int
)	O
;	O
}	O
else	O
{	O
j_buf	int
=	O
x	int
;	O
j	int
=	O
MAX	O
(	O
fwidth	pointer
,	O
j_buf	int
)	O
;	O
j	int
+=	O
(	O
num_hls	int
<<	O
1	int
)	O
;	O
}	O
}	O
}	O
else	O
j	int
=	O
j_buf	int
;	O
if	O
(	O
j	int
)	O
{	O
while	O
(	O
(	O
Uint	int
)	O
k	int
+	O
j	int
>=	O
maxlen_max	int
)	O
{	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
TRUE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
ptr_char	pointer
=	O
*	O
line_buffer	pointer
+	O
n	long
;	O
}	O
if	O
(	O
fwidth	pointer
!=	O
SPECIAL_VALUE	O
)	O
(	O
void	O
)	O
use_format	function
(	O
&	O
s5	pointer
,	O
k	int
,	O
buf	pointer
,	O
atol	function
(	O
buf	pointer
)	O
,	O
is_sign	pointer
|	O
is_lzero	pointer
|	O
is_suffix	pointer
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
j_buf	int
)	O
;	O
else	O
strcat	function
(	O
s5	pointer
,	O
buf	pointer
)	O
;	O
}	O
len	int
+=	O
(	O
flen	int
+	O
1	int
)	O
;	O
if	O
(	O
j	int
)	O
k	int
+=	O
j	int
;	O
else	O
if	O
(	O
isspace	function
(	O
s5	pointer
[	O
k	int
-	O
1	int
]	O
)	O
&&	O
isspace	function
(	O
tvar	array
[	O
1	int
]	O
)	O
)	O
s5	pointer
[	O
--	O
k	int
]	O
=	O
'\0'	O
;	O
}	O
else	O
restore_tvar	int
=	O
TRUE	O
;	O
}	O
else	O
restore_tvar	int
=	O
TRUE	O
;	O
if	O
(	O
restore_tvar	int
)	O
{	O
if	O
(	O
(	O
Uint	int
)	O
k	int
+	O
1	int
>=	O
maxlen_max	int
)	O
{	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
TRUE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
ptr_char	pointer
=	O
*	O
line_buffer	pointer
+	O
n	long
;	O
}	O
s5	pointer
[	O
k	int
++	O
]	O
=	O
RC_TVAR_CHAR	char
;	O
len	int
++	O
;	O
if	O
(	O
*	O
tvar	array
&&	O
(	O
flen	int
==	O
1	int
)	O
)	O
{	O
if	O
(	O
(	O
Uint	int
)	O
k	int
+	O
1	int
>=	O
maxlen_max	int
)	O
{	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
TRUE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
ptr_char	pointer
=	O
*	O
line_buffer	pointer
+	O
n	long
;	O
}	O
s5	pointer
[	O
k	int
++	O
]	O
=	O
*	O
tvar	array
;	O
len	int
++	O
;	O
}	O
s5	pointer
[	O
k	int
]	O
=	O
'\0'	O
;	O
}	O
n	long
+=	O
len	int
;	O
ptr_char	pointer
+=	O
len	int
;	O
ptr_tvar	pointer
=	O
strchr	function
(	O
ptr_char	pointer
,	O
RC_TVAR_CHAR	char
)	O
;	O
flen	int
=	O
1	int
;	O
restore_tvar	int
=	O
is_quoted	int
=	O
FALSE	O
;	O
}	O
while	O
(	O
ptr_tvar	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
*	O
ptr_char	pointer
)	O
{	O
k	int
+=	O
(	O
int	O
)	O
strlen	function
(	O
ptr_char	pointer
)	O
;	O
while	O
(	O
(	O
Uint	int
)	O
k	int
>=	O
maxlen_max	int
)	O
{	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
TRUE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
ptr_char	pointer
=	O
*	O
line_buffer	pointer
+	O
n	long
;	O
}	O
strcat	function
(	O
s5	pointer
,	O
ptr_char	pointer
)	O
;	O
}	O
i	int
=	O
k	int
++	O
;	O
strcpy	function
(	O
*	O
line_buffer	pointer
,	O
s5	pointer
)	O
;	O
if	O
(	O
(	O
*	O
*	O
line_buffer	pointer
==	O
RC_TVAR_CHAR	char
)	O
&&	O
isalpha	function
(	O
*	O
(	O
*	O
line_buffer	pointer
+	O
1	int
)	O
)	O
&&	O
(	O
*	O
(	O
*	O
line_buffer	pointer
+	O
2	int
)	O
==	O
*	O
RC_VAR_ASSIGN	pointer
||	O
*	O
(	O
*	O
line_buffer	pointer
+	O
2	int
)	O
==	O
*	O
RC_TVAR_ICMD_ASSIGN	pointer
||	O
*	O
(	O
*	O
line_buffer	pointer
+	O
2	int
)	O
==	O
*	O
RC_TVAR_UCMD_ASSIGN	pointer
||	O
*	O
(	O
*	O
line_buffer	pointer
+	O
2	int
)	O
==	O
*	O
RC_VAR_ADD	pointer
||	O
*	O
(	O
*	O
line_buffer	pointer
+	O
2	int
)	O
==	O
*	O
RC_VAR_SUB	pointer
)	O
)	O
*	O
is_tvar	pointer
=	O
ok	int
=	O
TRUE	O
;	O
n	long
=	O
0	int
;	O
ptr_tvar	pointer
=	O
strchr	function
(	O
*	O
line_buffer	pointer
,	O
RC_TVAR_CHAR	char
)	O
;	O
if	O
(	O
ptr_tvar	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
do	O
{	O
if	O
(	O
!	O
n	long
&&	O
(	O
*	O
*	O
line_buffer	pointer
!=	O
RC_TVAR_CHAR	char
)	O
)	O
ptr_tvar	pointer
--	O
;	O
else	O
if	O
(	O
n	long
)	O
ptr_tvar	pointer
--	O
;	O
*	O
tvar	array
=	O
*	O
ptr_tvar	pointer
;	O
if	O
(	O
!	O
n	long
&&	O
(	O
*	O
*	O
line_buffer	pointer
!=	O
RC_TVAR_CHAR	char
)	O
)	O
ptr_tvar	pointer
++	O
;	O
else	O
if	O
(	O
n	long
)	O
ptr_tvar	pointer
++	O
;	O
ptr_tvar	pointer
++	O
;	O
flen	int
=	O
decode_format	function
(	O
ptr_tvar	pointer
,	O
0	int
,	O
&	O
is_cformat	pointer
,	O
&	O
is_lformat	pointer
,	O
&	O
is_sign	pointer
,	O
&	O
is_lzero	pointer
,	O
&	O
is_suffix	pointer
,	O
&	O
is_fformat	pointer
,	O
&	O
fstyle	pointer
,	O
&	O
fwidth	pointer
)	O
;	O
if	O
(	O
fwidth	pointer
!=	O
SPECIAL_VALUE	O
)	O
ptr_tvar	pointer
+=	O
flen	int
;	O
if	O
(	O
(	O
*	O
tvar	array
!=	O
QUOTE_CHAR	char
)	O
&&	O
isalpha	function
(	O
*	O
ptr_tvar	pointer
)	O
&&	O
(	O
rc_tvar	array
[	O
IDX	O
(	O
*	O
ptr_tvar	pointer
)	O
]	O
.	O
tvar_local	struct
.	O
tvar_text	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
||	O
rc_tvar	array
[	O
IDX	O
(	O
*	O
ptr_tvar	pointer
)	O
]	O
.	O
tvar_global	struct
.	O
tvar_text	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
)	O
{	O
if	O
(	O
*	O
ptr_tvar	pointer
==	O
the_tvar	char
)	O
ok	int
=	O
TRUE	O
;	O
else	O
flen	int
=	O
1	int
;	O
break	O
;	O
}	O
n	long
=	O
1	int
;	O
while	O
(	O
*	O
ptr_tvar	pointer
==	O
RC_TVAR_CHAR	char
)	O
ptr_tvar	pointer
++	O
;	O
if	O
(	O
*	O
ptr_tvar	pointer
)	O
ptr_tvar	pointer
=	O
strchr	function
(	O
ptr_tvar	pointer
,	O
RC_TVAR_CHAR	char
)	O
;	O
else	O
ptr_tvar	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
while	O
(	O
ptr_tvar	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
ptr_tvar	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
ok	int
=	O
TRUE	O
;	O
}	O
else	O
ok	int
=	O
TRUE	O
;	O
}	O
else	O
ok	int
=	O
TRUE	O
;	O
if	O
(	O
*	O
*	O
line_buffer	pointer
==	O
*	O
RC_INCL_STMENT	pointer
)	O
*	O
is_include	pointer
=	O
ok	int
=	O
TRUE	O
;	O
else	O
if	O
(	O
isalpha	function
(	O
*	O
*	O
line_buffer	pointer
)	O
)	O
*	O
is_dvar	pointer
=	O
ok	int
=	O
TRUE	O
;	O
}	O
while	O
(	O
!	O
ok	int
)	O
;	O
}	O
if	O
(	O
*	O
is_dvar	pointer
)	O
set_dvar	function
(	O
*	O
line_buffer	pointer
,	O
lptrs3	pointer
,	O
filename	pointer
,	O
*	O
line_number	long
,	O
LOcal	int
)	O
;	O
if	O
(	O
*	O
is_tvar	pointer
)	O
set_tvar	function
(	O
*	O
line_buffer	pointer
,	O
filename	pointer
,	O
*	O
line_number	long
,	O
LOcal	int
)	O
;	O
}	O
if	O
(	O
is_error	int
)	O
{	O
if	O
(	O
mode	enum
==	O
REsource	int
)	O
i	int
=	O
ERR_INVALID_DATE_FIELD	int
;	O
else	O
i	int
=	O
ERR_ILLEGAL_CHAR_IN_FILE	int
;	O
my_error	function
(	O
i	int
,	O
filename	pointer
,	O
*	O
line_number	long
,	O
*	O
line_buffer	pointer
,	O
0	int
)	O
;	O
}	O
if	O
(	O
ch	char
==	O
'\n'	O
)	O
*	O
line_length	pointer
=	O
i	int
-	O
1	int
;	O
else	O
*	O
line_length	pointer
=	O
i	int
;	O
return	O
(	O
ptr_pool	pointer
)	O
;	O
}	O
char	O
*	O
*	O
insert_response_file	function
(	O
fp	pointer
,	O
filename	pointer
,	O
opt_list	pointer
,	O
my_argc_max	pointer
,	O
my_argc	pointer
,	O
my_argv	array
)	O
FILE	struct
*	O
fp	pointer
;	O
char	O
*	O
filename	pointer
;	O
const	O
char	O
*	O
opt_list	pointer
;	O
Uint	int
*	O
my_argc_max	pointer
;	O
int	O
*	O
my_argc	pointer
;	O
char	O
*	O
my_argv	array
[	O
]	O
;	O
{	O
auto	O
long	O
line_number	long
=	O
0L	int
;	O
auto	O
int	O
line_length	pointer
;	O
auto	O
int	O
in_pool	int
=	O
0	int
;	O
auto	O
char	O
*	O
pool	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
auto	O
char	O
*	O
ptr_pool	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
auto	O
Bool	int
b_dummy	int
;	O
pool	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
BUF_LEN	int
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
1L	int
,	O
"pool"	pointer
,	O
0	int
)	O
;	O
while	O
(	O
(	O
ptr_pool	pointer
=	O
file_read_line	function
(	O
fp	pointer
,	O
&	O
s1	pointer
,	O
&	O
in_pool	int
,	O
pool	pointer
,	O
ptr_pool	pointer
,	O
filename	pointer
,	O
&	O
line_number	long
,	O
&	O
line_length	pointer
,	O
REsponse	int
,	O
&	O
b_dummy	int
,	O
&	O
b_dummy	int
,	O
&	O
b_dummy	int
)	O
)	O
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
if	O
(	O
*	O
s1	pointer
)	O
{	O
if	O
(	O
(	O
*	O
s1	pointer
==	O
*	O
SWITCH	pointer
||	O
*	O
s1	pointer
==	O
*	O
SWITCH2	pointer
)	O
&&	O
s1	pointer
[	O
1	int
]	O
&&	O
(	O
s1	pointer
[	O
1	int
]	O
!=	O
*	O
SWITCH	pointer
)	O
)	O
if	O
(	O
(	O
strchr	function
(	O
opt_list	pointer
,	O
s1	pointer
[	O
1	int
]	O
)	O
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
&&	O
isspace	function
(	O
s1	pointer
[	O
2	int
]	O
)	O
)	O
{	O
register	O
int	O
spaces	int
=	O
1	int
;	O
line_length	pointer
=	O
2	int
;	O
while	O
(	O
s1	pointer
[	O
line_length	pointer
+	O
spaces	int
]	O
&&	O
isspace	function
(	O
s1	pointer
[	O
line_length	pointer
+	O
spaces	int
]	O
)	O
)	O
spaces	int
++	O
;	O
while	O
(	O
s1	pointer
[	O
line_length	pointer
+	O
spaces	int
]	O
)	O
{	O
s1	pointer
[	O
line_length	pointer
]	O
=	O
s1	pointer
[	O
line_length	pointer
+	O
spaces	int
]	O
;	O
line_length	pointer
++	O
;	O
}	O
s1	pointer
[	O
line_length	pointer
]	O
=	O
'\0'	O
;	O
}	O
if	O
(	O
(	O
(	O
line_length	pointer
==	O
1	int
)	O
&&	O
(	O
*	O
s1	pointer
==	O
*	O
SWITCH	pointer
||	O
*	O
s1	pointer
==	O
RC_ADATE_CHAR	char
||	O
*	O
s1	pointer
==	O
*	O
SWITCH2	pointer
)	O
)	O
||	O
(	O
(	O
line_length	pointer
==	O
2	int
)	O
&&	O
(	O
*	O
s1	pointer
==	O
*	O
SWITCH	pointer
||	O
*	O
s1	pointer
==	O
RC_ADATE_CHAR	char
||	O
*	O
s1	pointer
==	O
*	O
SWITCH2	pointer
)	O
&&	O
(	O
s1	pointer
[	O
1	int
]	O
==	O
*	O
SWITCH	pointer
||	O
s1	pointer
[	O
1	int
]	O
==	O
RC_ADATE_CHAR	char
||	O
s1	pointer
[	O
1	int
]	O
==	O
*	O
SWITCH2	pointer
)	O
)	O
)	O
;	O
else	O
{	O
if	O
(	O
(	O
Uint	int
)	O
*	O
my_argc	pointer
>=	O
*	O
my_argc_max	pointer
)	O
{	O
*	O
my_argc_max	pointer
<<=	O
1	int
;	O
if	O
(	O
*	O
my_argc_max	pointer
*	O
sizeof	O
(	O
char	O
*	O
)	O
>	O
testval	int
)	O
(	O
*	O
my_argc_max	pointer
)	O
--	O
;	O
my_argv	array
=	O
(	O
char	O
*	O
*	O
)	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
my_argv	array
,	O
*	O
my_argc_max	pointer
*	O
sizeof	O
(	O
char	O
*	O
)	O
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"my_argv[my_argc_max]"	pointer
,	O
*	O
my_argc_max	pointer
)	O
;	O
}	O
my_argv	array
[	O
*	O
my_argc	pointer
]	O
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
line_length	pointer
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"my_argv[my_argc]"	pointer
,	O
*	O
my_argc	pointer
)	O
;	O
strcpy	function
(	O
my_argv	array
[	O
(	O
*	O
my_argc	pointer
)	O
++	O
]	O
,	O
s1	pointer
)	O
;	O
}	O
}	O
free	function
(	O
pool	pointer
)	O
;	O
return	O
(	O
my_argv	array
)	O
;	O
}	O
void	O
write_log_file	function
(	O
filename	pointer
,	O
mode	enum
,	O
mode_txt	pointer
,	O
created_txt	pointer
,	O
argc	int
,	O
argv	array
)	O
const	O
char	O
*	O
filename	pointer
;	O
const	O
Fmode_enum	enum
mode	enum
;	O
const	O
char	O
*	O
mode_txt	pointer
;	O
const	O
char	O
*	O
created_txt	pointer
;	O
const	O
int	O
argc	int
;	O
char	O
*	O
argv	array
[	O
]	O
;	O
{	O
auto	O
FILE	struct
*	O
fp	pointer
=	O
(	O
FILE	struct
*	O
)	O
NULL	O
;	O
auto	O
int	O
len	int
=	O
0	int
;	O
register	O
int	O
i	int
=	O
0	int
;	O
fp	pointer
=	O
fopen	function
(	O
filename	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
fp	pointer
!=	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
{	O
switch	O
(	O
mode	enum
)	O
{	O
case	O
REsponse	int
:	O
len	int
=	O
fprintf	function
(	O
fp	pointer
,	O
"%c `%s' %s `%s' --- %s %02d-%s-%04d %02d%s%02d%s%02d"	pointer
,	O
REM_CHAR	char
,	O
prgr_name	pointer
,	O
mode_txt	pointer
,	O
filename	pointer
,	O
created_txt	pointer
,	O
true_day	int
,	O
short_month_name	function
(	O
true_month	int
)	O
,	O
true_year	int
,	O
act_hour	int
,	O
time_sep	pointer
,	O
act_min	int
,	O
time_sep	pointer
,	O
act_sec	int
)	O
;	O
if	O
(	O
tz	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
len	int
=	O
fprintf	function
(	O
fp	pointer
,	O
" %s"	pointer
,	O
tz	pointer
)	O
;	O
len	int
=	O
fprintf	function
(	O
fp	pointer
,	O
"\n%c\n"	pointer
,	O
REM_CHAR	char
)	O
;	O
break	O
;	O
case	O
SCript	int
:	O
len	int
=	O
fprintf	function
(	O
fp	pointer
,	O
"%c%s\n%c\n%c `%s' %s `%s' --- %s %02d-%s-%04d %02d%s%02d%s%02d"	pointer
,	O
*	O
SHL_REM	pointer
,	O
SHELL	pointer
,	O
*	O
SHL_REM	pointer
,	O
*	O
SHL_REM	pointer
,	O
prgr_name	pointer
,	O
mode_txt	pointer
,	O
filename	pointer
,	O
created_txt	pointer
,	O
true_day	int
,	O
short_month_name	function
(	O
true_month	int
)	O
,	O
true_year	int
,	O
act_hour	int
,	O
time_sep	pointer
,	O
act_min	int
,	O
time_sep	pointer
,	O
act_sec	int
)	O
;	O
if	O
(	O
tz	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
len	int
=	O
fprintf	function
(	O
fp	pointer
,	O
" %s"	pointer
,	O
tz	pointer
)	O
;	O
len	int
=	O
fprintf	function
(	O
fp	pointer
,	O
"\n%c\n%s %c\n"	pointer
,	O
*	O
SHL_REM	pointer
,	O
prgr_name	pointer
,	O
*	O
SHL_ESC	pointer
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
if	O
(	O
len	int
!=	O
EOF	O
)	O
{	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
*	O
argv	array
[	O
i	int
]	O
==	O
*	O
SWITCH	pointer
||	O
*	O
argv	array
[	O
i	int
]	O
==	O
*	O
SWITCH2	pointer
)	O
{	O
if	O
(	O
*	O
(	O
argv	array
[	O
i	int
]	O
+	O
1	int
)	O
==	O
'R'	O
||	O
*	O
(	O
argv	array
[	O
i	int
]	O
+	O
1	int
)	O
==	O
'S'	O
)	O
continue	O
;	O
if	O
(	O
*	O
(	O
argv	array
[	O
i	int
]	O
+	O
1	int
)	O
==	O
*	O
SWITCH	pointer
)	O
{	O
strcpy	function
(	O
s4	pointer
,	O
argv	array
[	O
i	int
]	O
+	O
2	int
)	O
;	O
(	O
void	O
)	O
eval_longopt	function
(	O
s4	pointer
,	O
&	O
len	int
)	O
;	O
if	O
(	O
len	int
==	O
SYM_RESPONSE_FILE	int
)	O
continue	O
;	O
if	O
(	O
len	int
==	O
SYM_SCRIPT_FILE	int
)	O
continue	O
;	O
}	O
}	O
if	O
(	O
*	O
argv	array
[	O
i	int
]	O
==	O
RSP_CHAR	char
)	O
continue	O
;	O
switch	O
(	O
mode	enum
)	O
{	O
case	O
REsponse	int
:	O
len	int
=	O
fprintf	function
(	O
fp	pointer
,	O
"%s\n"	pointer
,	O
argv	array
[	O
i	int
]	O
)	O
;	O
break	O
;	O
case	O
SCript	int
:	O
len	int
=	O
fprintf	function
(	O
fp	pointer
,	O
"'%s' %c\n"	pointer
,	O
argv	array
[	O
i	int
]	O
,	O
*	O
SHL_ESC	pointer
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
if	O
(	O
len	int
==	O
EOF	O
)	O
break	O
;	O
}	O
if	O
(	O
mode	enum
==	O
SCript	int
)	O
len	int
=	O
fprintf	function
(	O
fp	pointer
,	O
" $*\n"	pointer
)	O
;	O
i	int
=	O
fclose	function
(	O
fp	pointer
)	O
;	O
}	O
}	O
else	O
len	int
=	O
EOF	O
;	O
if	O
(	O
i	int
==	O
EOF	O
)	O
len	int
=	O
EOF	O
;	O
if	O
(	O
(	O
(	O
len	int
!=	O
EOF	O
)	O
&&	O
(	O
warning_level	int
==	O
1	int
)	O
)	O
||	O
(	O
(	O
len	int
==	O
EOF	O
)	O
&&	O
(	O
warning_level	int
==	O
2	int
)	O
)	O
||	O
warning_level	int
>	O
2	int
)	O
{	O
i	int
=	O
(	O
int	O
)	O
strlen	function
(	O
filename	pointer
)	O
+	O
MAX	O
(	O
ehls1s	struct
.	O
len	int
,	O
ehls2s	struct
.	O
len	int
)	O
+	O
MAX	O
(	O
ehls1e	struct
.	O
len	int
,	O
ehls2e	struct
.	O
len	int
)	O
+	O
LEN_SINGLE_LINE	int
;	O
if	O
(	O
(	O
Uint	int
)	O
i	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
i	int
+	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
sprintf	function
(	O
s4	pointer
,	O
_	O
(	O
"Try to write %s `%s'... %s%s%s"	pointer
)	O
,	O
mode_txt	pointer
,	O
filename	pointer
,	O
(	O
ehls1s	struct
.	O
len	int
!=	O
1	int
)	O
?	O
(	O
(	O
len	int
==	O
EOF	O
)	O
?	O
ehls2s	struct
.	O
seq	pointer
:	O
ehls1s	struct
.	O
seq	pointer
)	O
:	O
""	pointer
,	O
(	O
len	int
==	O
EOF	O
)	O
?	O
_	O
(	O
"failed"	pointer
)	O
:	O
_	O
(	O
"success"	pointer
)	O
,	O
(	O
ehls1s	struct
.	O
len	int
!=	O
1	int
)	O
?	O
(	O
(	O
len	int
==	O
EOF	O
)	O
?	O
ehls2e	struct
.	O
seq	pointer
:	O
ehls1e	struct
.	O
seq	pointer
)	O
:	O
""	pointer
)	O
;	O
print_text	function
(	O
stderr	pointer
,	O
s4	pointer
)	O
;	O
if	O
(	O
(	O
len	int
==	O
EOF	O
)	O
&&	O
(	O
warning_level	int
>=	O
WARN_LVL_MAX	int
)	O
)	O
my_error	function
(	O
ERR_WRITE_FILE	int
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
,	O
filename	pointer
,	O
0	int
)	O
;	O
}	O
if	O
(	O
(	O
mode	enum
==	O
SCript	int
)	O
&&	O
(	O
len	int
!=	O
EOF	O
)	O
)	O
{	O
i	int
=	O
(	O
int	O
)	O
strlen	function
(	O
filename	pointer
)	O
+	O
strlen	function
(	O
CHMOD_PRGR	pointer
)	O
+	O
strlen	function
(	O
CHMOD_OPTS	pointer
)	O
+	O
2	int
;	O
if	O
(	O
(	O
Uint	int
)	O
i	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
i	int
+	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
sprintf	function
(	O
s4	pointer
,	O
"%s %s %s"	pointer
,	O
CHMOD_PRGR	pointer
,	O
CHMOD_OPTS	pointer
,	O
filename	pointer
)	O
;	O
(	O
void	O
)	O
my_system	function
(	O
s4	pointer
)	O
;	O
}	O
}	O
static	O
void	O
make_absolute_filename	function
(	O
absolute_filename	pointer
,	O
directory	pointer
,	O
filename	pointer
)	O
char	O
*	O
*	O
absolute_filename	pointer
;	O
const	O
char	O
*	O
directory	pointer
;	O
const	O
char	O
*	O
filename	pointer
;	O
{	O
register	O
int	O
dir_len	int
=	O
(	O
int	O
)	O
strlen	function
(	O
directory	pointer
)	O
;	O
register	O
int	O
fil_len	int
=	O
(	O
int	O
)	O
strlen	function
(	O
filename	pointer
)	O
;	O
if	O
(	O
directory	pointer
[	O
dir_len	int
-	O
1	int
]	O
!=	O
*	O
DIR_SEP	pointer
)	O
dir_len	int
++	O
;	O
if	O
(	O
(	O
Uint	int
)	O
dir_len	int
+	O
fil_len	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
dir_len	int
+	O
fil_len	int
+	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
strcpy	function
(	O
*	O
absolute_filename	pointer
,	O
directory	pointer
)	O
;	O
if	O
(	O
directory	pointer
[	O
dir_len	int
-	O
1	int
]	O
!=	O
*	O
DIR_SEP	pointer
)	O
strcat	function
(	O
*	O
absolute_filename	pointer
,	O
DIR_SEP	pointer
)	O
;	O
strcat	function
(	O
*	O
absolute_filename	pointer
,	O
filename	pointer
)	O
;	O
}	O
static	O
FILE	struct
*	O
get_file_ptr	function
(	O
fp	pointer
,	O
filename	pointer
,	O
level	int
,	O
mode	enum
,	O
is_first	pointer
)	O
FILE	struct
*	O
fp	pointer
;	O
const	O
char	O
*	O
filename	pointer
;	O
const	O
int	O
level	int
;	O
const	O
Fmode_enum	enum
mode	enum
;	O
Bool	int
*	O
is_first	pointer
;	O
{	O
auto	O
struct	O
stat	struct
statbuf	struct
;	O
fp	pointer
=	O
(	O
FILE	struct
*	O
)	O
NULL	O
;	O
if	O
(	O
(	O
*	O
filename	pointer
==	O
'-'	O
)	O
&&	O
(	O
strlen	function
(	O
filename	pointer
)	O
==	O
1	int
)	O
)	O
fp	pointer
=	O
stdin	pointer
;	O
else	O
if	O
(	O
!	O
stat	struct
(	O
filename	pointer
,	O
&	O
statbuf	struct
)	O
)	O
if	O
(	O
(	O
statbuf	struct
.	O
st_mode	int
&	O
S_IFMT	O
)	O
==	O
S_IFREG	O
)	O
fp	pointer
=	O
fopen	function
(	O
filename	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
(	O
warning_level	int
>=	O
0	int
)	O
&&	O
(	O
mode	enum
!=	O
REsponse	int
)	O
&&	O
(	O
mode	enum
!=	O
COmmon	int
)	O
)	O
{	O
if	O
(	O
(	O
(	O
fp	pointer
!=	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
&&	O
(	O
warning_level	int
==	O
1	int
)	O
)	O
||	O
(	O
(	O
fp	pointer
==	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
&&	O
(	O
warning_level	int
==	O
2	int
)	O
)	O
||	O
warning_level	int
>	O
2	int
)	O
{	O
register	O
int	O
i	int
;	O
if	O
(	O
*	O
is_first	pointer
)	O
{	O
*	O
is_first	pointer
=	O
FALSE	O
;	O
*	O
s4	pointer
=	O
'\0'	O
;	O
print_text	function
(	O
stderr	pointer
,	O
s4	pointer
)	O
;	O
}	O
i	int
=	O
(	O
int	O
)	O
strlen	function
(	O
filename	pointer
)	O
+	O
MAX	O
(	O
ehls1s	struct
.	O
len	int
,	O
ehls2s	struct
.	O
len	int
)	O
+	O
MAX	O
(	O
ehls1e	struct
.	O
len	int
,	O
ehls2e	struct
.	O
len	int
)	O
+	O
LEN_SINGLE_LINE	int
;	O
if	O
(	O
(	O
Uint	int
)	O
i	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
i	int
+	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
if	O
(	O
mode	enum
==	O
REsource	int
||	O
mode	enum
==	O
HEre	int
)	O
sprintf	function
(	O
s4	pointer
,	O
_	O
(	O
"Try to open%sresource file `%s'... %s%s%s"	pointer
)	O
,	O
(	O
mode	enum
==	O
REsource	int
)	O
?	O
" "	pointer
:	O
_	O
(	O
" `HERE' "	pointer
)	O
,	O
filename	pointer
,	O
(	O
ehls1s	struct
.	O
len	int
!=	O
1	int
)	O
?	O
(	O
(	O
fp	pointer
==	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
?	O
ehls2s	struct
.	O
seq	pointer
:	O
ehls1s	struct
.	O
seq	pointer
)	O
:	O
""	pointer
,	O
(	O
fp	pointer
==	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
?	O
_	O
(	O
"failed"	pointer
)	O
:	O
_	O
(	O
"success"	pointer
)	O
,	O
(	O
ehls1s	struct
.	O
len	int
!=	O
1	int
)	O
?	O
(	O
(	O
fp	pointer
==	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
?	O
ehls2e	struct
.	O
seq	pointer
:	O
ehls1e	struct
.	O
seq	pointer
)	O
:	O
""	pointer
)	O
;	O
else	O
sprintf	function
(	O
s4	pointer
,	O
_	O
(	O
"Try to open (level: %02d) include file `%s'... %s%s%s"	pointer
)	O
,	O
level	int
,	O
filename	pointer
,	O
(	O
ehls1s	struct
.	O
len	int
!=	O
1	int
)	O
?	O
(	O
(	O
fp	pointer
==	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
?	O
ehls2s	struct
.	O
seq	pointer
:	O
ehls1s	struct
.	O
seq	pointer
)	O
:	O
""	pointer
,	O
(	O
fp	pointer
==	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
?	O
_	O
(	O
"failed"	pointer
)	O
:	O
_	O
(	O
"success"	pointer
)	O
,	O
(	O
ehls1s	struct
.	O
len	int
!=	O
1	int
)	O
?	O
(	O
(	O
fp	pointer
==	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
?	O
ehls2e	struct
.	O
seq	pointer
:	O
ehls1e	struct
.	O
seq	pointer
)	O
:	O
""	pointer
)	O
;	O
print_text	function
(	O
stderr	pointer
,	O
s4	pointer
)	O
;	O
}	O
}	O
return	O
(	O
fp	pointer
)	O
;	O
}	O
