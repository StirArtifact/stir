extern	O
int	O
caseless	int
;	O
static	O
int	O
compile_pattern2	function
(	O
pattern	pointer
,	O
search_type	int
,	O
comp_pattern	pointer
,	O
show_error	int
)	O
char	O
*	O
pattern	pointer
;	O
int	O
search_type	int
;	O
PATTERN_TYPE	O
*	O
comp_pattern	pointer
;	O
int	O
show_error	int
;	O
{	O
if	O
(	O
search_type	int
&	O
SRCH_NO_REGEX	O
)	O
return	O
(	O
0	int
)	O
;	O
{	O
regex_t	struct
*	O
comp	pointer
=	O
(	O
regex_t	struct
*	O
)	O
ecalloc	function
(	O
1	int
,	O
sizeof	O
(	O
regex_t	struct
)	O
)	O
;	O
if	O
(	O
regcomp	function
(	O
comp	pointer
,	O
pattern	pointer
,	O
REGCOMP_FLAG	O
)	O
)	O
{	O
free	function
(	O
comp	pointer
)	O
;	O
if	O
(	O
show_error	int
)	O
error	function
(	O
"Invalid pattern"	pointer
,	O
NULL_PARG	O
)	O
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
if	O
(	O
*	O
comp_pattern	pointer
!=	O
NULL	O
)	O
{	O
regfree	function
(	O
*	O
comp_pattern	pointer
)	O
;	O
free	function
(	O
*	O
comp_pattern	pointer
)	O
;	O
}	O
*	O
comp_pattern	pointer
=	O
comp	pointer
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
public	O
int	O
compile_pattern	function
(	O
pattern	pointer
,	O
search_type	int
,	O
comp_pattern	pointer
)	O
char	O
*	O
pattern	pointer
;	O
int	O
search_type	int
;	O
PATTERN_TYPE	O
*	O
comp_pattern	pointer
;	O
{	O
char	O
*	O
cvt_pattern	pointer
;	O
int	O
result	int
;	O
if	O
(	O
caseless	int
!=	O
OPT_ONPLUS	int
)	O
cvt_pattern	pointer
=	O
pattern	pointer
;	O
else	O
{	O
cvt_pattern	pointer
=	O
(	O
char	O
*	O
)	O
ecalloc	function
(	O
1	int
,	O
cvt_length	function
(	O
strlen	function
(	O
pattern	pointer
)	O
,	O
CVT_TO_LC	int
)	O
)	O
;	O
cvt_text	function
(	O
cvt_pattern	pointer
,	O
pattern	pointer
,	O
(	O
int	O
*	O
)	O
NULL	O
,	O
(	O
int	O
*	O
)	O
NULL	O
,	O
CVT_TO_LC	int
)	O
;	O
}	O
result	int
=	O
compile_pattern2	function
(	O
cvt_pattern	pointer
,	O
search_type	int
,	O
comp_pattern	pointer
,	O
1	int
)	O
;	O
if	O
(	O
cvt_pattern	pointer
!=	O
pattern	pointer
)	O
free	function
(	O
cvt_pattern	pointer
)	O
;	O
return	O
(	O
result	int
)	O
;	O
}	O
public	O
void	O
uncompile_pattern	function
(	O
pattern	pointer
)	O
PATTERN_TYPE	O
*	O
pattern	pointer
;	O
{	O
if	O
(	O
*	O
pattern	pointer
!=	O
NULL	O
)	O
{	O
regfree	function
(	O
*	O
pattern	pointer
)	O
;	O
free	function
(	O
*	O
pattern	pointer
)	O
;	O
}	O
*	O
pattern	pointer
=	O
NULL	O
;	O
}	O
public	O
int	O
valid_pattern	function
(	O
pattern	pointer
)	O
char	O
*	O
pattern	pointer
;	O
{	O
PATTERN_TYPE	O
comp_pattern	pointer
;	O
int	O
result	int
;	O
CLEAR_PATTERN	O
(	O
comp_pattern	pointer
)	O
;	O
result	int
=	O
compile_pattern2	function
(	O
pattern	pointer
,	O
0	int
,	O
&	O
comp_pattern	pointer
,	O
0	int
)	O
;	O
if	O
(	O
result	int
!=	O
0	int
)	O
return	O
(	O
0	int
)	O
;	O
uncompile_pattern	function
(	O
&	O
comp_pattern	pointer
)	O
;	O
return	O
(	O
1	int
)	O
;	O
}	O
public	O
int	O
is_null_pattern	function
(	O
pattern	pointer
)	O
PATTERN_TYPE	O
pattern	pointer
;	O
{	O
return	O
(	O
pattern	pointer
==	O
NULL	O
)	O
;	O
}	O
static	O
int	O
match	function
(	O
pattern	pointer
,	O
pattern_len	int
,	O
buf	pointer
,	O
buf_len	int
,	O
pfound	pointer
,	O
pend	pointer
)	O
char	O
*	O
pattern	pointer
;	O
int	O
pattern_len	int
;	O
char	O
*	O
buf	pointer
;	O
int	O
buf_len	int
;	O
char	O
*	O
*	O
pfound	pointer
,	O
*	O
*	O
pend	pointer
;	O
{	O
char	O
*	O
pp	pointer
,	O
*	O
lp	pointer
;	O
char	O
*	O
pattern_end	pointer
=	O
pattern	pointer
+	O
pattern_len	int
;	O
char	O
*	O
buf_end	pointer
=	O
buf	pointer
+	O
buf_len	int
;	O
for	O
(	O
;	O
buf	pointer
<	O
buf_end	pointer
;	O
buf	pointer
++	O
)	O
{	O
for	O
(	O
pp	pointer
=	O
pattern	pointer
,	O
lp	pointer
=	O
buf	pointer
;	O
;	O
pp	pointer
++	O
,	O
lp	pointer
++	O
)	O
{	O
char	O
cp	char
=	O
*	O
pp	pointer
;	O
char	O
cl	char
=	O
*	O
lp	pointer
;	O
if	O
(	O
caseless	int
==	O
OPT_ONPLUS	int
&&	O
ASCII_IS_UPPER	O
(	O
cp	char
)	O
)	O
cp	char
=	O
ASCII_TO_LOWER	O
(	O
cp	char
)	O
;	O
if	O
(	O
cp	char
!=	O
cl	char
)	O
break	O
;	O
if	O
(	O
pp	pointer
==	O
pattern_end	pointer
||	O
lp	pointer
==	O
buf_end	pointer
)	O
break	O
;	O
}	O
if	O
(	O
pp	pointer
==	O
pattern_end	pointer
)	O
{	O
if	O
(	O
pfound	pointer
!=	O
NULL	O
)	O
*	O
pfound	pointer
=	O
buf	pointer
;	O
if	O
(	O
pend	pointer
!=	O
NULL	O
)	O
*	O
pend	pointer
=	O
lp	pointer
;	O
return	O
(	O
1	int
)	O
;	O
}	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
public	O
int	O
match_pattern	function
(	O
pattern	pointer
,	O
tpattern	pointer
,	O
line	pointer
,	O
line_len	int
,	O
sp	pointer
,	O
ep	pointer
,	O
notbol	int
,	O
search_type	int
)	O
PATTERN_TYPE	O
pattern	pointer
;	O
char	O
*	O
tpattern	pointer
;	O
char	O
*	O
line	pointer
;	O
int	O
line_len	int
;	O
char	O
*	O
*	O
sp	pointer
;	O
char	O
*	O
*	O
ep	pointer
;	O
int	O
notbol	int
;	O
int	O
search_type	int
;	O
{	O
int	O
matched	int
;	O
*	O
sp	pointer
=	O
*	O
ep	pointer
=	O
NULL	O
;	O
if	O
(	O
search_type	int
&	O
SRCH_NO_REGEX	O
)	O
matched	int
=	O
match	function
(	O
tpattern	pointer
,	O
strlen	function
(	O
tpattern	pointer
)	O
,	O
line	pointer
,	O
line_len	int
,	O
sp	pointer
,	O
ep	pointer
)	O
;	O
else	O
{	O
{	O
regmatch_t	struct
rm	struct
;	O
int	O
flags	int
=	O
(	O
notbol	int
)	O
?	O
REG_NOTBOL	int
:	O
0	int
;	O
flags	int
|=	O
REG_STARTEND	O
;	O
rm	struct
.	O
rm_so	int
=	O
0	int
;	O
rm	struct
.	O
rm_eo	int
=	O
line_len	int
;	O
matched	int
=	O
!	O
regexec	function
(	O
pattern	pointer
,	O
line	pointer
,	O
1	int
,	O
&	O
rm	struct
,	O
flags	int
)	O
;	O
if	O
(	O
matched	int
)	O
{	O
*	O
sp	pointer
=	O
line	pointer
+	O
rm	struct
.	O
rm_so	int
;	O
*	O
ep	pointer
=	O
line	pointer
+	O
rm	struct
.	O
rm_eo	int
;	O
}	O
}	O
}	O
matched	int
=	O
(	O
!	O
(	O
search_type	int
&	O
SRCH_NO_MATCH	O
)	O
&&	O
matched	int
)	O
||	O
(	O
(	O
search_type	int
&	O
SRCH_NO_MATCH	O
)	O
&&	O
!	O
matched	int
)	O
;	O
return	O
(	O
matched	int
)	O
;	O
}	O
