struct	O
rec_mset_elem_s	struct
{	O
rec_mset_type_t	int
type	enum
;	O
void	O
*	O
data	pointer
;	O
gl_list_node_t	pointer
list_node	pointer
;	O
rec_mset_t	pointer
mset	pointer
;	O
}	O
;	O
struct	O
rec_mset_s	struct
{	O
int	O
ntypes	int
;	O
char	O
*	O
name	pointer
[	O
MAX_NTYPES	int
]	O
;	O
rec_mset_disp_fn_t	pointer
disp_fn	pointer
[	O
MAX_NTYPES	int
]	O
;	O
rec_mset_equal_fn_t	pointer
equal_fn	pointer
[	O
MAX_NTYPES	int
]	O
;	O
rec_mset_dup_fn_t	pointer
dup_fn	pointer
[	O
MAX_NTYPES	int
]	O
;	O
rec_mset_compare_fn_t	pointer
compare_fn	pointer
[	O
MAX_NTYPES	int
]	O
;	O
size_t	long
count	long
[	O
MAX_NTYPES	int
]	O
;	O
gl_list_t	pointer
elem_list	pointer
;	O
}	O
;	O
static	O
void	O
rec_mset_init	function
(	O
rec_mset_t	pointer
mset	pointer
)	O
;	O
static	O
bool	bool
rec_mset_elem_equal_fn	function
(	O
const	O
void	O
*	O
e1	pointer
,	O
const	O
void	O
*	O
e2	pointer
)	O
;	O
static	O
void	O
rec_mset_elem_dispose_fn	function
(	O
const	O
void	O
*	O
e	pointer
)	O
;	O
static	O
int	O
rec_mset_elem_compare_fn	function
(	O
const	O
void	O
*	O
e1	pointer
,	O
const	O
void	O
*	O
e2	pointer
)	O
;	O
static	O
rec_mset_list_iter_t	struct
rec_mset_iter_gl2mset	function
(	O
gl_list_iterator_t	struct
list_iter	struct
)	O
;	O
static	O
gl_list_iterator_t	struct
rec_mset_iter_mset2gl	function
(	O
rec_mset_list_iter_t	struct
mset_iter	struct
)	O
;	O
static	O
rec_mset_elem_t	pointer
rec_mset_elem_new	function
(	O
rec_mset_t	pointer
mset	pointer
,	O
rec_mset_type_t	int
type	enum
,	O
void	O
*	O
data	pointer
)	O
;	O
static	O
void	O
rec_mset_elem_destroy	function
(	O
rec_mset_elem_t	pointer
elem	pointer
)	O
;	O
rec_mset_t	pointer
rec_mset_new	function
(	O
void	O
)	O
{	O
rec_mset_t	pointer
new	pointer
;	O
int	O
i	long
;	O
new	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
rec_mset_s	struct
)	O
)	O
;	O
if	O
(	O
new	pointer
)	O
{	O
rec_mset_init	function
(	O
new	pointer
)	O
;	O
new	pointer
->	O
ntypes	int
=	O
1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
MAX_NTYPES	int
;	O
i	long
++	O
)	O
{	O
new	pointer
->	O
count	long
[	O
i	long
]	O
=	O
0	int
;	O
new	pointer
->	O
name	pointer
[	O
i	long
]	O
=	O
NULL	O
;	O
new	pointer
->	O
equal_fn	pointer
[	O
i	long
]	O
=	O
NULL	O
;	O
new	pointer
->	O
disp_fn	pointer
[	O
i	long
]	O
=	O
NULL	O
;	O
new	pointer
->	O
dup_fn	pointer
[	O
i	long
]	O
=	O
NULL	O
;	O
new	pointer
->	O
compare_fn	pointer
[	O
i	long
]	O
=	O
NULL	O
;	O
}	O
new	pointer
->	O
elem_list	pointer
=	O
gl_list_nx_create_empty	function
(	O
GL_ARRAY_LIST	O
,	O
rec_mset_elem_equal_fn	function
,	O
NULL	O
,	O
rec_mset_elem_dispose_fn	function
,	O
true	int
)	O
;	O
if	O
(	O
new	pointer
->	O
elem_list	pointer
==	O
NULL	O
)	O
{	O
rec_mset_destroy	function
(	O
new	pointer
)	O
;	O
new	pointer
=	O
NULL	O
;	O
}	O
}	O
return	O
new	pointer
;	O
}	O
void	O
rec_mset_destroy	function
(	O
rec_mset_t	pointer
mset	pointer
)	O
{	O
if	O
(	O
mset	pointer
)	O
{	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mset	pointer
->	O
ntypes	int
;	O
i	long
++	O
)	O
free	function
(	O
mset	pointer
->	O
name	pointer
[	O
i	long
]	O
)	O
;	O
gl_list_free	function
(	O
mset	pointer
->	O
elem_list	pointer
)	O
;	O
free	function
(	O
mset	pointer
)	O
;	O
}	O
}	O
rec_mset_t	pointer
rec_mset_dup	function
(	O
rec_mset_t	pointer
mset	pointer
)	O
{	O
rec_mset_t	pointer
new	pointer
;	O
rec_mset_elem_t	pointer
elem	pointer
;	O
gl_list_iterator_t	struct
iter	struct
;	O
int	O
i	long
;	O
new	pointer
=	O
rec_mset_new	function
(	O
)	O
;	O
if	O
(	O
new	pointer
)	O
{	O
new	pointer
->	O
ntypes	int
=	O
mset	pointer
->	O
ntypes	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
new	pointer
->	O
ntypes	int
;	O
i	long
++	O
)	O
{	O
new	pointer
->	O
count	long
[	O
i	long
]	O
=	O
0	int
;	O
if	O
(	O
mset	pointer
->	O
name	pointer
[	O
i	long
]	O
)	O
{	O
new	pointer
->	O
name	pointer
[	O
i	long
]	O
=	O
strdup	function
(	O
mset	pointer
->	O
name	pointer
[	O
i	long
]	O
)	O
;	O
if	O
(	O
!	O
new	pointer
->	O
name	pointer
[	O
i	long
]	O
)	O
{	O
rec_mset_destroy	function
(	O
new	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
new	pointer
->	O
disp_fn	pointer
[	O
i	long
]	O
=	O
mset	pointer
->	O
disp_fn	pointer
[	O
i	long
]	O
;	O
new	pointer
->	O
equal_fn	pointer
[	O
i	long
]	O
=	O
mset	pointer
->	O
equal_fn	pointer
[	O
i	long
]	O
;	O
new	pointer
->	O
dup_fn	pointer
[	O
i	long
]	O
=	O
mset	pointer
->	O
dup_fn	pointer
[	O
i	long
]	O
;	O
new	pointer
->	O
compare_fn	pointer
[	O
i	long
]	O
=	O
mset	pointer
->	O
compare_fn	pointer
[	O
i	long
]	O
;	O
}	O
iter	struct
=	O
gl_list_iterator	function
(	O
mset	pointer
->	O
elem_list	pointer
)	O
;	O
while	O
(	O
gl_list_iterator_next	function
(	O
&	O
iter	struct
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
elem	pointer
,	O
NULL	O
)	O
)	O
{	O
void	O
*	O
data	pointer
=	O
NULL	O
;	O
if	O
(	O
new	pointer
->	O
dup_fn	pointer
[	O
elem	pointer
->	O
type	enum
]	O
)	O
{	O
data	pointer
=	O
(	O
new	pointer
->	O
dup_fn	pointer
[	O
elem	pointer
->	O
type	enum
]	O
)	O
(	O
elem	pointer
->	O
data	pointer
)	O
;	O
if	O
(	O
!	O
data	pointer
)	O
{	O
rec_mset_destroy	function
(	O
new	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
else	O
{	O
data	pointer
=	O
elem	pointer
->	O
data	pointer
;	O
}	O
rec_mset_append	function
(	O
new	pointer
,	O
elem	pointer
->	O
type	enum
,	O
data	pointer
,	O
MSET_ANY	int
)	O
;	O
}	O
gl_list_iterator_free	function
(	O
&	O
iter	struct
)	O
;	O
}	O
return	O
new	pointer
;	O
}	O
rec_mset_t	pointer
rec_mset_sort	function
(	O
rec_mset_t	pointer
mset	pointer
)	O
{	O
rec_mset_elem_t	pointer
elem	pointer
;	O
gl_list_iterator_t	struct
iter	struct
;	O
gl_list_t	pointer
list	pointer
;	O
list	pointer
=	O
mset	pointer
->	O
elem_list	pointer
;	O
mset	pointer
->	O
elem_list	pointer
=	O
gl_list_nx_create_empty	function
(	O
GL_ARRAY_LIST	O
,	O
rec_mset_elem_equal_fn	function
,	O
NULL	O
,	O
rec_mset_elem_dispose_fn	function
,	O
true	int
)	O
;	O
if	O
(	O
!	O
mset	pointer
->	O
elem_list	pointer
)	O
{	O
return	O
NULL	O
;	O
}	O
iter	struct
=	O
gl_list_iterator	function
(	O
list	pointer
)	O
;	O
while	O
(	O
gl_list_iterator_next	function
(	O
&	O
iter	struct
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
elem	pointer
,	O
NULL	O
)	O
)	O
{	O
if	O
(	O
!	O
rec_mset_add_sorted	function
(	O
mset	pointer
,	O
elem	pointer
->	O
type	enum
,	O
elem	pointer
->	O
data	pointer
)	O
)	O
{	O
gl_list_free	function
(	O
mset	pointer
->	O
elem_list	pointer
)	O
;	O
mset	pointer
->	O
elem_list	pointer
=	O
list	pointer
;	O
return	O
NULL	O
;	O
}	O
elem	pointer
->	O
data	pointer
=	O
NULL	O
;	O
}	O
gl_list_iterator_free	function
(	O
&	O
iter	struct
)	O
;	O
gl_list_free	function
(	O
list	pointer
)	O
;	O
return	O
mset	pointer
;	O
}	O
bool	bool
rec_mset_type_p	function
(	O
rec_mset_t	pointer
mset	pointer
,	O
rec_mset_type_t	int
type	enum
)	O
{	O
return	O
type	enum
<	O
mset	pointer
->	O
ntypes	int
;	O
}	O
rec_mset_type_t	int
rec_mset_register_type	function
(	O
rec_mset_t	pointer
mset	pointer
,	O
char	O
*	O
name	pointer
,	O
rec_mset_disp_fn_t	pointer
disp_fn	pointer
,	O
rec_mset_equal_fn_t	pointer
equal_fn	pointer
,	O
rec_mset_dup_fn_t	pointer
dup_fn	pointer
,	O
rec_mset_compare_fn_t	pointer
compare_fn	pointer
)	O
{	O
rec_mset_type_t	int
new_type	int
;	O
new_type	int
=	O
mset	pointer
->	O
ntypes	int
++	O
;	O
mset	pointer
->	O
count	long
[	O
new_type	int
]	O
=	O
0	int
;	O
mset	pointer
->	O
name	pointer
[	O
new_type	int
]	O
=	O
strdup	function
(	O
name	pointer
)	O
;	O
mset	pointer
->	O
disp_fn	pointer
[	O
new_type	int
]	O
=	O
disp_fn	pointer
;	O
mset	pointer
->	O
equal_fn	pointer
[	O
new_type	int
]	O
=	O
equal_fn	pointer
;	O
mset	pointer
->	O
dup_fn	pointer
[	O
new_type	int
]	O
=	O
dup_fn	pointer
;	O
mset	pointer
->	O
compare_fn	pointer
[	O
new_type	int
]	O
=	O
compare_fn	pointer
;	O
return	O
new_type	int
;	O
}	O
size_t	long
rec_mset_count	function
(	O
rec_mset_t	pointer
mset	pointer
,	O
rec_mset_type_t	int
type	enum
)	O
{	O
return	O
mset	pointer
->	O
count	long
[	O
type	enum
]	O
;	O
}	O
void	O
*	O
rec_mset_get_at	function
(	O
rec_mset_t	pointer
mset	pointer
,	O
rec_mset_type_t	int
type	enum
,	O
size_t	long
position	long
)	O
{	O
void	O
*	O
result	pointer
;	O
rec_mset_elem_t	pointer
elem	pointer
;	O
if	O
(	O
(	O
position	long
<	O
0	int
)	O
||	O
(	O
position	long
>=	O
mset	pointer
->	O
count	long
[	O
type	enum
]	O
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
if	O
(	O
type	enum
==	O
MSET_ANY	int
)	O
{	O
elem	pointer
=	O
(	O
rec_mset_elem_t	pointer
)	O
gl_list_get_at	function
(	O
mset	pointer
->	O
elem_list	pointer
,	O
position	long
)	O
;	O
}	O
else	O
{	O
rec_mset_elem_t	pointer
cur_elem	pointer
;	O
gl_list_node_t	pointer
node	pointer
;	O
gl_list_iterator_t	struct
iter	struct
;	O
int	O
count	long
[	O
MAX_NTYPES	int
]	O
;	O
int	O
i	long
=	O
0	int
;	O
elem	pointer
=	O
NULL	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
MAX_NTYPES	int
;	O
i	long
++	O
)	O
{	O
count	long
[	O
i	long
]	O
=	O
0	int
;	O
}	O
iter	struct
=	O
gl_list_iterator	function
(	O
mset	pointer
->	O
elem_list	pointer
)	O
;	O
while	O
(	O
gl_list_iterator_next	function
(	O
&	O
iter	struct
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
cur_elem	pointer
,	O
&	O
node	pointer
)	O
)	O
{	O
if	O
(	O
(	O
type	enum
==	O
MSET_ANY	int
)	O
||	O
(	O
(	O
type	enum
==	O
cur_elem	pointer
->	O
type	enum
)	O
&&	O
(	O
count	long
[	O
cur_elem	pointer
->	O
type	enum
]	O
==	O
position	long
)	O
)	O
)	O
{	O
elem	pointer
=	O
cur_elem	pointer
;	O
break	O
;	O
}	O
else	O
{	O
count	long
[	O
cur_elem	pointer
->	O
type	enum
]	O
++	O
;	O
count	long
[	O
0	int
]	O
++	O
;	O
}	O
}	O
}	O
if	O
(	O
elem	pointer
)	O
{	O
result	pointer
=	O
elem	pointer
->	O
data	pointer
;	O
}	O
else	O
{	O
result	pointer
=	O
NULL	O
;	O
}	O
return	O
result	pointer
;	O
}	O
bool	bool
rec_mset_remove_at	function
(	O
rec_mset_t	pointer
mset	pointer
,	O
rec_mset_type_t	int
type	enum
,	O
size_t	long
position	long
)	O
{	O
rec_mset_elem_t	pointer
elem	pointer
;	O
void	O
*	O
data	pointer
;	O
bool	bool
removed	bool
=	O
false	int
;	O
if	O
(	O
mset	pointer
->	O
count	long
[	O
type	enum
]	O
>	O
0	int
)	O
{	O
if	O
(	O
position	long
<	O
0	int
)	O
{	O
position	long
=	O
0	int
;	O
}	O
if	O
(	O
position	long
>=	O
mset	pointer
->	O
count	long
[	O
type	enum
]	O
)	O
{	O
position	long
=	O
mset	pointer
->	O
count	long
[	O
type	enum
]	O
-	O
1	int
;	O
}	O
data	pointer
=	O
rec_mset_get_at	function
(	O
mset	pointer
,	O
type	enum
,	O
position	long
)	O
;	O
elem	pointer
=	O
rec_mset_search	function
(	O
mset	pointer
,	O
data	pointer
)	O
;	O
if	O
(	O
rec_mset_remove_elem	function
(	O
mset	pointer
,	O
elem	pointer
)	O
)	O
{	O
removed	bool
=	O
true	int
;	O
}	O
}	O
return	O
removed	bool
;	O
}	O
rec_mset_elem_t	pointer
rec_mset_insert_at	function
(	O
rec_mset_t	pointer
mset	pointer
,	O
rec_mset_type_t	int
type	enum
,	O
void	O
*	O
data	pointer
,	O
size_t	long
position	long
)	O
{	O
rec_mset_elem_t	pointer
elem	pointer
=	O
NULL	O
;	O
gl_list_node_t	pointer
node	pointer
;	O
node	pointer
=	O
NULL	O
;	O
elem	pointer
=	O
rec_mset_elem_new	function
(	O
mset	pointer
,	O
type	enum
,	O
data	pointer
)	O
;	O
if	O
(	O
!	O
elem	pointer
)	O
{	O
return	O
NULL	O
;	O
}	O
if	O
(	O
position	long
<	O
0	int
)	O
{	O
node	pointer
=	O
gl_list_nx_add_first	function
(	O
mset	pointer
->	O
elem_list	pointer
,	O
(	O
void	O
*	O
)	O
elem	pointer
)	O
;	O
}	O
else	O
if	O
(	O
position	long
>=	O
mset	pointer
->	O
count	long
[	O
0	int
]	O
)	O
{	O
node	pointer
=	O
gl_list_nx_add_last	function
(	O
mset	pointer
->	O
elem_list	pointer
,	O
(	O
void	O
*	O
)	O
elem	pointer
)	O
;	O
}	O
else	O
{	O
node	pointer
=	O
gl_list_nx_add_at	function
(	O
mset	pointer
->	O
elem_list	pointer
,	O
position	long
,	O
(	O
void	O
*	O
)	O
elem	pointer
)	O
;	O
}	O
if	O
(	O
node	pointer
==	O
NULL	O
)	O
{	O
rec_mset_elem_destroy	function
(	O
elem	pointer
)	O
;	O
elem	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
elem	pointer
->	O
list_node	pointer
=	O
node	pointer
;	O
mset	pointer
->	O
count	long
[	O
0	int
]	O
++	O
;	O
if	O
(	O
elem	pointer
->	O
type	enum
!=	O
MSET_ANY	int
)	O
{	O
mset	pointer
->	O
count	long
[	O
elem	pointer
->	O
type	enum
]	O
++	O
;	O
}	O
}	O
return	O
elem	pointer
;	O
}	O
rec_mset_elem_t	pointer
rec_mset_append	function
(	O
rec_mset_t	pointer
mset	pointer
,	O
rec_mset_type_t	int
elem_type	int
,	O
void	O
*	O
data	pointer
,	O
rec_mset_type_t	int
type	enum
)	O
{	O
return	O
rec_mset_insert_at	function
(	O
mset	pointer
,	O
elem_type	int
,	O
data	pointer
,	O
rec_mset_count	function
(	O
mset	pointer
,	O
type	enum
)	O
)	O
;	O
}	O
bool	bool
rec_mset_remove_elem	function
(	O
rec_mset_t	pointer
mset	pointer
,	O
rec_mset_elem_t	pointer
elem	pointer
)	O
{	O
rec_mset_type_t	int
type	enum
=	O
elem	pointer
->	O
type	enum
;	O
bool	bool
res	bool
=	O
gl_list_remove_node	function
(	O
mset	pointer
->	O
elem_list	pointer
,	O
elem	pointer
->	O
list_node	pointer
)	O
;	O
if	O
(	O
res	bool
)	O
{	O
mset	pointer
->	O
count	long
[	O
type	enum
]	O
--	O
;	O
if	O
(	O
type	enum
!=	O
MSET_ANY	int
)	O
{	O
mset	pointer
->	O
count	long
[	O
MSET_ANY	int
]	O
--	O
;	O
}	O
}	O
return	O
res	bool
;	O
}	O
rec_mset_elem_t	pointer
rec_mset_insert_after	function
(	O
rec_mset_t	pointer
mset	pointer
,	O
rec_mset_type_t	int
type	enum
,	O
void	O
*	O
data	pointer
,	O
rec_mset_elem_t	pointer
elem	pointer
)	O
{	O
rec_mset_elem_t	pointer
new_elem	pointer
;	O
gl_list_node_t	pointer
node	pointer
;	O
new_elem	pointer
=	O
rec_mset_elem_new	function
(	O
mset	pointer
,	O
type	enum
,	O
data	pointer
)	O
;	O
if	O
(	O
!	O
new_elem	pointer
)	O
{	O
return	O
NULL	O
;	O
}	O
node	pointer
=	O
gl_list_search	function
(	O
mset	pointer
->	O
elem_list	pointer
,	O
(	O
void	O
*	O
)	O
elem	pointer
)	O
;	O
if	O
(	O
node	pointer
)	O
{	O
node	pointer
=	O
gl_list_nx_add_after	function
(	O
mset	pointer
->	O
elem_list	pointer
,	O
node	pointer
,	O
(	O
void	O
*	O
)	O
new_elem	pointer
)	O
;	O
if	O
(	O
!	O
node	pointer
)	O
{	O
rec_mset_elem_destroy	function
(	O
new_elem	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
new_elem	pointer
->	O
list_node	pointer
=	O
node	pointer
;	O
mset	pointer
->	O
count	long
[	O
0	int
]	O
++	O
;	O
if	O
(	O
new_elem	pointer
->	O
type	enum
!=	O
MSET_ANY	int
)	O
{	O
mset	pointer
->	O
count	long
[	O
new_elem	pointer
->	O
type	enum
]	O
++	O
;	O
}	O
}	O
else	O
{	O
node	pointer
=	O
gl_list_nx_add_last	function
(	O
mset	pointer
->	O
elem_list	pointer
,	O
(	O
void	O
*	O
)	O
elem	pointer
)	O
;	O
if	O
(	O
!	O
node	pointer
)	O
{	O
rec_mset_elem_destroy	function
(	O
new_elem	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
new_elem	pointer
->	O
list_node	pointer
=	O
node	pointer
;	O
}	O
return	O
new_elem	pointer
;	O
}	O
rec_mset_elem_t	pointer
rec_mset_search	function
(	O
rec_mset_t	pointer
mset	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
rec_mset_elem_t	pointer
result	pointer
=	O
NULL	O
;	O
rec_mset_elem_t	pointer
elem	pointer
;	O
gl_list_iterator_t	struct
iter	struct
;	O
iter	struct
=	O
gl_list_iterator	function
(	O
mset	pointer
->	O
elem_list	pointer
)	O
;	O
while	O
(	O
gl_list_iterator_next	function
(	O
&	O
iter	struct
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
elem	pointer
,	O
NULL	O
)	O
)	O
{	O
if	O
(	O
elem	pointer
->	O
data	pointer
==	O
data	pointer
)	O
{	O
result	pointer
=	O
elem	pointer
;	O
break	O
;	O
}	O
}	O
gl_list_iterator_free	function
(	O
&	O
iter	struct
)	O
;	O
return	O
result	pointer
;	O
}	O
rec_mset_iterator_t	struct
rec_mset_iterator	function
(	O
rec_mset_t	pointer
mset	pointer
)	O
{	O
gl_list_iterator_t	struct
list_iter	struct
;	O
rec_mset_iterator_t	struct
mset_iter	struct
;	O
mset_iter	struct
.	O
mset	pointer
=	O
mset	pointer
;	O
list_iter	struct
=	O
gl_list_iterator	function
(	O
mset	pointer
->	O
elem_list	pointer
)	O
;	O
mset_iter	struct
.	O
list_iter	struct
=	O
rec_mset_iter_gl2mset	function
(	O
list_iter	struct
)	O
;	O
return	O
mset_iter	struct
;	O
}	O
bool	bool
rec_mset_iterator_next	function
(	O
rec_mset_iterator_t	struct
*	O
iterator	pointer
,	O
rec_mset_type_t	int
type	enum
,	O
const	O
void	O
*	O
*	O
data	pointer
,	O
rec_mset_elem_t	pointer
*	O
elem	pointer
)	O
{	O
bool	bool
found	bool
=	O
true	int
;	O
rec_mset_elem_t	pointer
mset_elem	pointer
;	O
gl_list_iterator_t	struct
list_iter	struct
;	O
gl_list_node_t	pointer
list_node	pointer
;	O
list_iter	struct
=	O
rec_mset_iter_mset2gl	function
(	O
iterator	pointer
->	O
list_iter	struct
)	O
;	O
while	O
(	O
(	O
found	bool
=	O
gl_list_iterator_next	function
(	O
&	O
list_iter	struct
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
mset_elem	pointer
,	O
&	O
list_node	pointer
)	O
)	O
&&	O
(	O
type	enum
!=	O
0	int
)	O
&&	O
(	O
mset_elem	pointer
->	O
type	enum
!=	O
type	enum
)	O
)	O
;	O
if	O
(	O
found	bool
)	O
{	O
iterator	pointer
->	O
list_iter	struct
=	O
rec_mset_iter_gl2mset	function
(	O
list_iter	struct
)	O
;	O
if	O
(	O
data	pointer
)	O
*	O
data	pointer
=	O
mset_elem	pointer
->	O
data	pointer
;	O
if	O
(	O
elem	pointer
)	O
{	O
mset_elem	pointer
->	O
list_node	pointer
=	O
list_node	pointer
;	O
*	O
elem	pointer
=	O
mset_elem	pointer
;	O
}	O
}	O
return	O
found	bool
;	O
}	O
void	O
rec_mset_iterator_free	function
(	O
rec_mset_iterator_t	struct
*	O
iterator	pointer
)	O
{	O
gl_list_iterator_t	struct
list_iter	struct
;	O
list_iter	struct
=	O
rec_mset_iter_mset2gl	function
(	O
iterator	pointer
->	O
list_iter	struct
)	O
;	O
gl_list_iterator_free	function
(	O
&	O
list_iter	struct
)	O
;	O
iterator	pointer
->	O
list_iter	struct
=	O
rec_mset_iter_gl2mset	function
(	O
list_iter	struct
)	O
;	O
}	O
int	O
rec_mset_elem_type	function
(	O
rec_mset_elem_t	pointer
elem	pointer
)	O
{	O
return	O
elem	pointer
->	O
type	enum
;	O
}	O
void	O
rec_mset_elem_set_type	function
(	O
rec_mset_elem_t	pointer
elem	pointer
,	O
rec_mset_type_t	int
type	enum
)	O
{	O
elem	pointer
->	O
mset	pointer
->	O
count	long
[	O
elem	pointer
->	O
type	enum
]	O
--	O
;	O
elem	pointer
->	O
type	enum
=	O
type	enum
;	O
elem	pointer
->	O
mset	pointer
->	O
count	long
[	O
type	enum
]	O
++	O
;	O
}	O
void	O
*	O
rec_mset_elem_data	function
(	O
rec_mset_elem_t	pointer
elem	pointer
)	O
{	O
return	O
elem	pointer
->	O
data	pointer
;	O
}	O
void	O
rec_mset_elem_set_data	function
(	O
rec_mset_elem_t	pointer
elem	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
elem	pointer
->	O
data	pointer
=	O
data	pointer
;	O
}	O
bool	bool
rec_mset_elem_equal_p	function
(	O
rec_mset_elem_t	pointer
elem1	pointer
,	O
rec_mset_elem_t	pointer
elem2	pointer
)	O
{	O
return	O
rec_mset_elem_equal_fn	function
(	O
(	O
void	O
*	O
)	O
elem1	pointer
,	O
(	O
void	O
*	O
)	O
elem2	pointer
)	O
;	O
}	O
void	O
*	O
rec_mset_elem_dup_data	function
(	O
rec_mset_elem_t	pointer
elem	pointer
)	O
{	O
return	O
elem	pointer
->	O
mset	pointer
->	O
dup_fn	pointer
[	O
elem	pointer
->	O
type	enum
]	O
(	O
elem	pointer
->	O
data	pointer
)	O
;	O
}	O
void	O
rec_mset_dump	function
(	O
rec_mset_t	pointer
mset	pointer
)	O
{	O
gl_list_iterator_t	struct
iter	struct
;	O
gl_list_node_t	pointer
node	pointer
;	O
rec_mset_elem_t	pointer
elem	pointer
;	O
int	O
i	long
;	O
printf	function
(	O
"MSET:\n"	pointer
)	O
;	O
printf	function
(	O
"  ntypes: %d\n"	pointer
,	O
mset	pointer
->	O
ntypes	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mset	pointer
->	O
ntypes	int
;	O
i	long
++	O
)	O
{	O
printf	function
(	O
"  type %d:\n"	pointer
,	O
i	long
)	O
;	O
printf	function
(	O
"    count:     %zd\n"	pointer
,	O
mset	pointer
->	O
count	long
[	O
i	long
]	O
)	O
;	O
printf	function
(	O
"    disp_fn:   %p\n"	pointer
,	O
mset	pointer
->	O
disp_fn	pointer
[	O
i	long
]	O
)	O
;	O
printf	function
(	O
"    equal_fn:  %p\n"	pointer
,	O
mset	pointer
->	O
equal_fn	pointer
[	O
i	long
]	O
)	O
;	O
printf	function
(	O
"    dup_fn:    %p\n"	pointer
,	O
mset	pointer
->	O
dup_fn	pointer
[	O
i	long
]	O
)	O
;	O
}	O
printf	function
(	O
"  nodes:\n"	pointer
)	O
;	O
iter	struct
=	O
gl_list_iterator	function
(	O
mset	pointer
->	O
elem_list	pointer
)	O
;	O
while	O
(	O
gl_list_iterator_next	function
(	O
&	O
iter	struct
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
elem	pointer
,	O
&	O
node	pointer
)	O
)	O
{	O
printf	function
(	O
"    node=%p elem=%p elem->type=%d elem->data=%p contained=%p\n"	pointer
,	O
node	pointer
,	O
elem	pointer
,	O
elem	pointer
->	O
type	enum
,	O
elem	pointer
->	O
data	pointer
,	O
elem	pointer
->	O
mset	pointer
)	O
;	O
i	long
++	O
;	O
}	O
printf	function
(	O
"END MSET\n"	pointer
)	O
;	O
}	O
rec_mset_elem_t	pointer
rec_mset_add_sorted	function
(	O
rec_mset_t	pointer
mset	pointer
,	O
rec_mset_type_t	int
type	enum
,	O
void	O
*	O
data	pointer
)	O
{	O
rec_mset_elem_t	pointer
elem	pointer
;	O
gl_list_node_t	pointer
node	pointer
;	O
elem	pointer
=	O
rec_mset_elem_new	function
(	O
mset	pointer
,	O
type	enum
,	O
data	pointer
)	O
;	O
if	O
(	O
!	O
elem	pointer
)	O
{	O
return	O
NULL	O
;	O
}	O
node	pointer
=	O
gl_sortedlist_nx_add	function
(	O
mset	pointer
->	O
elem_list	pointer
,	O
rec_mset_elem_compare_fn	function
,	O
(	O
void	O
*	O
)	O
elem	pointer
)	O
;	O
if	O
(	O
!	O
node	pointer
)	O
{	O
rec_mset_elem_destroy	function
(	O
elem	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
elem	pointer
->	O
list_node	pointer
=	O
node	pointer
;	O
mset	pointer
->	O
count	long
[	O
0	int
]	O
++	O
;	O
if	O
(	O
elem	pointer
->	O
type	enum
!=	O
MSET_ANY	int
)	O
{	O
mset	pointer
->	O
count	long
[	O
elem	pointer
->	O
type	enum
]	O
++	O
;	O
}	O
return	O
elem	pointer
;	O
}	O
static	O
void	O
rec_mset_init	function
(	O
rec_mset_t	pointer
mset	pointer
)	O
{	O
memset	function
(	O
mset	pointer
,	O
0	int
,	O
sizeof	O
(	O
struct	O
rec_mset_s	struct
)	O
)	O
;	O
}	O
static	O
bool	bool
rec_mset_elem_equal_fn	function
(	O
const	O
void	O
*	O
e1	pointer
,	O
const	O
void	O
*	O
e2	pointer
)	O
{	O
rec_mset_elem_t	pointer
elem1	pointer
;	O
rec_mset_elem_t	pointer
elem2	pointer
;	O
elem1	pointer
=	O
(	O
rec_mset_elem_t	pointer
)	O
e1	pointer
;	O
elem2	pointer
=	O
(	O
rec_mset_elem_t	pointer
)	O
e2	pointer
;	O
if	O
(	O
(	O
elem1	pointer
->	O
mset	pointer
!=	O
elem2	pointer
->	O
mset	pointer
)	O
||	O
(	O
elem1	pointer
->	O
type	enum
!=	O
elem2	pointer
->	O
type	enum
)	O
)	O
{	O
return	O
false	int
;	O
}	O
return	O
(	O
elem1	pointer
->	O
mset	pointer
->	O
equal_fn	pointer
[	O
elem1	pointer
->	O
type	enum
]	O
)	O
(	O
elem1	pointer
->	O
data	pointer
,	O
elem2	pointer
->	O
data	pointer
)	O
;	O
}	O
static	O
void	O
rec_mset_elem_dispose_fn	function
(	O
const	O
void	O
*	O
e	pointer
)	O
{	O
rec_mset_elem_t	pointer
elem	pointer
;	O
elem	pointer
=	O
(	O
rec_mset_elem_t	pointer
)	O
e	pointer
;	O
rec_mset_elem_destroy	function
(	O
elem	pointer
)	O
;	O
}	O
static	O
int	O
rec_mset_elem_compare_fn	function
(	O
const	O
void	O
*	O
e1	pointer
,	O
const	O
void	O
*	O
e2	pointer
)	O
{	O
int	O
result	pointer
=	O
0	int
;	O
rec_mset_elem_t	pointer
elem1	pointer
;	O
rec_mset_elem_t	pointer
elem2	pointer
;	O
elem1	pointer
=	O
(	O
rec_mset_elem_t	pointer
)	O
e1	pointer
;	O
elem2	pointer
=	O
(	O
rec_mset_elem_t	pointer
)	O
e2	pointer
;	O
if	O
(	O
elem1	pointer
->	O
mset	pointer
->	O
compare_fn	pointer
)	O
{	O
result	pointer
=	O
(	O
elem1	pointer
->	O
mset	pointer
->	O
compare_fn	pointer
[	O
elem1	pointer
->	O
type	enum
]	O
)	O
(	O
elem1	pointer
->	O
data	pointer
,	O
elem2	pointer
->	O
data	pointer
,	O
elem2	pointer
->	O
type	enum
)	O
;	O
}	O
return	O
result	pointer
;	O
}	O
static	O
rec_mset_list_iter_t	struct
rec_mset_iter_gl2mset	function
(	O
gl_list_iterator_t	struct
list_iter	struct
)	O
{	O
rec_mset_list_iter_t	struct
mset_iter	struct
;	O
mset_iter	struct
.	O
vtable	pointer
=	O
(	O
void	O
*	O
)	O
list_iter	struct
.	O
vtable	pointer
;	O
mset_iter	struct
.	O
list	pointer
=	O
(	O
void	O
*	O
)	O
list_iter	struct
.	O
list	pointer
;	O
mset_iter	struct
.	O
count	long
=	O
list_iter	struct
.	O
count	long
;	O
mset_iter	struct
.	O
p	pointer
=	O
list_iter	struct
.	O
p	pointer
;	O
mset_iter	struct
.	O
q	pointer
=	O
list_iter	struct
.	O
q	pointer
;	O
mset_iter	struct
.	O
i	long
=	O
list_iter	struct
.	O
i	long
;	O
mset_iter	struct
.	O
j	long
=	O
list_iter	struct
.	O
j	long
;	O
return	O
mset_iter	struct
;	O
}	O
static	O
gl_list_iterator_t	struct
rec_mset_iter_mset2gl	function
(	O
rec_mset_list_iter_t	struct
mset_iter	struct
)	O
{	O
gl_list_iterator_t	struct
list_iter	struct
;	O
list_iter	struct
.	O
vtable	pointer
=	O
(	O
const	O
struct	O
gl_list_implementation	struct
*	O
)	O
mset_iter	struct
.	O
vtable	pointer
;	O
list_iter	struct
.	O
list	pointer
=	O
(	O
gl_list_t	pointer
)	O
mset_iter	struct
.	O
list	pointer
;	O
list_iter	struct
.	O
count	long
=	O
mset_iter	struct
.	O
count	long
;	O
list_iter	struct
.	O
p	pointer
=	O
mset_iter	struct
.	O
p	pointer
;	O
list_iter	struct
.	O
q	pointer
=	O
mset_iter	struct
.	O
q	pointer
;	O
list_iter	struct
.	O
i	long
=	O
mset_iter	struct
.	O
i	long
;	O
list_iter	struct
.	O
j	long
=	O
mset_iter	struct
.	O
j	long
;	O
return	O
list_iter	struct
;	O
}	O
static	O
rec_mset_elem_t	pointer
rec_mset_elem_new	function
(	O
rec_mset_t	pointer
mset	pointer
,	O
rec_mset_type_t	int
type	enum
,	O
void	O
*	O
data	pointer
)	O
{	O
rec_mset_elem_t	pointer
new	pointer
;	O
if	O
(	O
type	enum
>=	O
mset	pointer
->	O
ntypes	int
)	O
{	O
return	O
NULL	O
;	O
}	O
new	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
rec_mset_elem_s	struct
)	O
)	O
;	O
if	O
(	O
new	pointer
)	O
{	O
new	pointer
->	O
type	enum
=	O
type	enum
;	O
new	pointer
->	O
data	pointer
=	O
data	pointer
;	O
new	pointer
->	O
mset	pointer
=	O
mset	pointer
;	O
new	pointer
->	O
list_node	pointer
=	O
NULL	O
;	O
}	O
return	O
new	pointer
;	O
}	O
static	O
void	O
rec_mset_elem_destroy	function
(	O
rec_mset_elem_t	pointer
elem	pointer
)	O
{	O
if	O
(	O
elem	pointer
)	O
{	O
if	O
(	O
elem	pointer
->	O
data	pointer
&&	O
elem	pointer
->	O
mset	pointer
->	O
disp_fn	pointer
[	O
elem	pointer
->	O
type	enum
]	O
)	O
{	O
elem	pointer
->	O
mset	pointer
->	O
disp_fn	pointer
[	O
elem	pointer
->	O
type	enum
]	O
(	O
elem	pointer
->	O
data	pointer
)	O
;	O
}	O
free	function
(	O
elem	pointer
)	O
;	O
}	O
}	O
