rec_writer_mode_t	enum
recinf_write_mode	enum
=	O
REC_WRITER_NORMAL	int
;	O
enum	O
{	O
COMMON_ARGS	O
,	O
DESCRIPTOR_ARG	int
,	O
NAMES_ARG	int
,	O
TYPE_ARG	int
,	O
PRINT_SEXPS_ARG	int
}	O
;	O
static	O
const	O
struct	O
option	struct
GNU_longOptions	array
[	O
]	O
=	O
{	O
COMMON_LONG_ARGS	O
,	O
{	O
"descriptor"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
DESCRIPTOR_ARG	int
}	O
,	O
{	O
"names-only"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
NAMES_ARG	int
}	O
,	O
{	O
"type"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
TYPE_ARG	int
}	O
,	O
{	O
"print-sexps"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
PRINT_SEXPS_ARG	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
bool	bool
recinf_descriptor	bool
=	O
false	int
;	O
bool	bool
recinf_names_only	bool
=	O
false	int
;	O
char	O
*	O
recinf_type	pointer
=	O
NULL	O
;	O
void	O
recutl_print_help	function
(	O
void	O
)	O
{	O
printf	function
(	O
_	O
(	O
"Usage: recinf [OPTION]... [FILE]...\n"	pointer
)	O
)	O
;	O
fputs	function
(	O
_	O
(	O
"Print information about the types of records stored in the input.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
puts	function
(	O
""	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"  -t, --type=RECORD_TYPE          print information on the records having the\n                                    specified type.\n  -d, --descriptor                include the full record descriptors.\n  -n, --names-only                output just the names of the record files\n                                    found in the input.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
recutl_print_help_common	function
(	O
)	O
;	O
puts	function
(	O
""	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"Special options:\n  -S, --print-sexps                   print the data in sexps instead of rec format.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
puts	function
(	O
""	pointer
)	O
;	O
recutl_print_help_footer	function
(	O
)	O
;	O
}	O
bool	bool
print_info_file	function
(	O
FILE	struct
*	O
in	pointer
,	O
char	O
*	O
file_name	pointer
)	O
{	O
bool	bool
ret	bool
;	O
rec_db_t	pointer
db	pointer
;	O
rec_rset_t	pointer
rset	pointer
;	O
rec_record_t	pointer
descriptor	pointer
;	O
rec_parser_t	pointer
parser	pointer
;	O
int	O
position	long
;	O
ret	bool
=	O
true	int
;	O
parser	pointer
=	O
rec_parser_new	function
(	O
in	pointer
,	O
file_name	pointer
)	O
;	O
ret	bool
=	O
rec_parse_db	function
(	O
parser	pointer
,	O
&	O
db	pointer
)	O
;	O
if	O
(	O
ret	bool
)	O
{	O
for	O
(	O
position	long
=	O
0	int
;	O
position	long
<	O
rec_db_size	function
(	O
db	pointer
)	O
;	O
position	long
++	O
)	O
{	O
rset	pointer
=	O
rec_db_get_rset	function
(	O
db	pointer
,	O
position	long
)	O
;	O
descriptor	pointer
=	O
rec_rset_descriptor	function
(	O
rset	pointer
)	O
;	O
if	O
(	O
recinf_type	pointer
&&	O
descriptor	pointer
&&	O
(	O
strcmp	function
(	O
rec_rset_type	function
(	O
rset	pointer
)	O
,	O
recinf_type	pointer
)	O
!=	O
0	int
)	O
)	O
{	O
continue	O
;	O
}	O
if	O
(	O
recinf_descriptor	bool
)	O
{	O
rec_writer_t	pointer
writer	pointer
;	O
if	O
(	O
descriptor	pointer
)	O
{	O
writer	pointer
=	O
rec_writer_new	function
(	O
stdout	pointer
)	O
;	O
rec_writer_set_mode	function
(	O
writer	pointer
,	O
recinf_write_mode	enum
)	O
;	O
rec_write_record	function
(	O
writer	pointer
,	O
descriptor	pointer
)	O
;	O
rec_write_string	function
(	O
writer	pointer
,	O
"\n"	pointer
)	O
;	O
rec_writer_destroy	function
(	O
writer	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
recinf_write_mode	enum
==	O
REC_WRITER_NORMAL	int
)	O
{	O
printf	function
(	O
"unknown\n"	pointer
)	O
;	O
}	O
}	O
if	O
(	O
position	long
<	O
(	O
rec_db_size	function
(	O
db	pointer
)	O
-	O
1	int
)	O
)	O
{	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
descriptor	pointer
)	O
{	O
if	O
(	O
!	O
recinf_names_only	bool
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"%zd "	pointer
,	O
rec_rset_num_records	function
(	O
rset	pointer
)	O
)	O
;	O
}	O
fprintf	function
(	O
stdout	pointer
,	O
"%s\n"	pointer
,	O
rec_rset_type	function
(	O
rset	pointer
)	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
recinf_names_only	bool
)	O
{	O
printf	function
(	O
"%zd\n"	pointer
,	O
rec_rset_num_records	function
(	O
rset	pointer
)	O
)	O
;	O
}	O
}	O
}	O
}	O
}	O
if	O
(	O
rec_parser_error	function
(	O
parser	pointer
)	O
)	O
{	O
rec_parser_perror	function
(	O
parser	pointer
,	O
file_name	pointer
)	O
;	O
}	O
rec_parser_destroy	function
(	O
parser	pointer
)	O
;	O
return	O
ret	bool
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	pointer
[	O
]	O
)	O
{	O
char	O
c	int
;	O
int	O
ret	bool
;	O
char	O
*	O
file_name	pointer
;	O
FILE	struct
*	O
in	pointer
;	O
recutl_init	function
(	O
"recinf"	pointer
)	O
;	O
while	O
(	O
(	O
ret	bool
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"Sdnt:"	pointer
,	O
GNU_longOptions	array
,	O
NULL	O
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
c	int
=	O
ret	bool
;	O
switch	O
(	O
c	int
)	O
{	O
COMMON_ARGS_CASES	O
case	O
PRINT_SEXPS_ARG	int
:	O
case	O
'S'	O
:	O
{	O
recinf_write_mode	enum
=	O
REC_WRITER_SEXP	int
;	O
break	O
;	O
}	O
case	O
DESCRIPTOR_ARG	int
:	O
case	O
'd'	O
:	O
{	O
recinf_descriptor	bool
=	O
true	int
;	O
break	O
;	O
}	O
case	O
NAMES_ARG	int
:	O
case	O
'n'	O
:	O
{	O
recinf_names_only	bool
=	O
true	int
;	O
break	O
;	O
}	O
case	O
TYPE_ARG	int
:	O
case	O
't'	O
:	O
{	O
recinf_type	pointer
=	O
xstrdup	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
}	O
default	O
:	O
{	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
}	O
if	O
(	O
optind	int
<	O
argc	int
)	O
{	O
while	O
(	O
optind	int
<	O
argc	int
)	O
{	O
file_name	pointer
=	O
argv	pointer
[	O
optind	int
++	O
]	O
;	O
if	O
(	O
!	O
(	O
in	pointer
=	O
fopen	function
(	O
file_name	pointer
,	O
"r"	pointer
)	O
)	O
)	O
{	O
printf	function
(	O
_	O
(	O
"error: cannot read file %s\n"	pointer
)	O
,	O
file_name	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
print_info_file	function
(	O
in	pointer
,	O
file_name	pointer
)	O
)	O
{	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
fclose	function
(	O
in	pointer
)	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
!	O
print_info_file	function
(	O
stdin	pointer
,	O
"stdin"	pointer
)	O
)	O
{	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
return	O
EXIT_SUCCESS	int
;	O
}	O
