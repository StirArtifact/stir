int	O
config_file_checks	int
=	O
RUSH_CHK_DEFAULT	O
;	O
static	O
int	O
check_nonroot_owner	function
(	O
struct	O
stat	struct
*	O
filest	pointer
,	O
struct	O
stat	struct
*	O
dirst	pointer
)	O
{	O
return	O
filest	pointer
->	O
st_uid	int
!=	O
0	int
;	O
}	O
static	O
int	O
check_iwgrp	function
(	O
struct	O
stat	struct
*	O
filest	pointer
,	O
struct	O
stat	struct
*	O
dirst	pointer
)	O
{	O
return	O
filest	pointer
->	O
st_mode	int
&	O
S_IWGRP	O
;	O
}	O
static	O
int	O
check_iwoth	function
(	O
struct	O
stat	struct
*	O
filest	pointer
,	O
struct	O
stat	struct
*	O
dirst	pointer
)	O
{	O
return	O
filest	pointer
->	O
st_mode	int
&	O
S_IWOTH	O
;	O
}	O
static	O
int	O
check_linked_wrdir	function
(	O
struct	O
stat	struct
*	O
filest	pointer
,	O
struct	O
stat	struct
*	O
dirst	pointer
)	O
{	O
return	O
(	O
(	O
filest	pointer
->	O
st_mode	int
&	O
S_IFMT	O
)	O
==	O
S_IFLNK	O
)	O
&&	O
(	O
dirst	pointer
->	O
st_mode	int
&	O
(	O
S_IWGRP	O
|	O
S_IWOTH	O
)	O
)	O
;	O
}	O
static	O
int	O
check_dir_iwgrp	function
(	O
struct	O
stat	struct
*	O
filest	pointer
,	O
struct	O
stat	struct
*	O
dirst	pointer
)	O
{	O
return	O
dirst	pointer
->	O
st_mode	int
&	O
S_IWGRP	O
;	O
}	O
static	O
int	O
check_dir_iwoth	function
(	O
struct	O
stat	struct
*	O
filest	pointer
,	O
struct	O
stat	struct
*	O
dirst	pointer
)	O
{	O
return	O
dirst	pointer
->	O
st_mode	int
&	O
S_IWOTH	O
;	O
}	O
struct	O
perm_checker	struct
{	O
int	O
flag	pointer
;	O
char	O
*	O
descr	pointer
;	O
int	O
(	O
*	O
fun	pointer
)	O
(	O
struct	O
stat	struct
*	O
filest	pointer
,	O
struct	O
stat	struct
*	O
dirst	pointer
)	O
;	O
}	O
;	O
static	O
struct	O
perm_checker	struct
perm_check_tab	array
[	O
]	O
=	O
{	O
{	O
RUSH_CHK_OWNER	int
,	O
N_	O
(	O
"file not owned by root"	pointer
)	O
,	O
check_nonroot_owner	function
}	O
,	O
{	O
RUSH_CHK_IWGRP	int
,	O
N_	O
(	O
"group writable configuration file"	pointer
)	O
,	O
check_iwgrp	function
}	O
,	O
{	O
RUSH_CHK_IWOTH	int
,	O
N_	O
(	O
"world writable configuration file"	pointer
)	O
,	O
check_iwoth	function
}	O
,	O
{	O
RUSH_CHK_LINK	int
,	O
N_	O
(	O
"linked configuration file in writable dir"	pointer
)	O
,	O
check_linked_wrdir	function
}	O
,	O
{	O
RUSH_CHK_DIR_IWGRP	int
,	O
N_	O
(	O
"configuration file in group writable directory"	pointer
)	O
,	O
check_dir_iwgrp	function
}	O
,	O
{	O
RUSH_CHK_DIR_IWOTH	int
,	O
N_	O
(	O
"configuration file in world writable directory"	pointer
)	O
,	O
check_dir_iwoth	function
}	O
,	O
{	O
0	int
}	O
}	O
;	O
int	O
check_config_permissions	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
struct	O
stat	struct
*	O
st	pointer
)	O
{	O
int	O
i	int
;	O
struct	O
stat	struct
dirst	pointer
;	O
char	O
*	O
dirname	pointer
;	O
dirname	pointer
=	O
dir_name	function
(	O
filename	pointer
)	O
;	O
if	O
(	O
stat	struct
(	O
dirname	pointer
,	O
&	O
dirst	pointer
)	O
)	O
{	O
logmsg	function
(	O
LOG_NOTICE	int
,	O
_	O
(	O
"%s: cannot stat directory: %s"	pointer
)	O
,	O
dirname	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
free	function
(	O
dirname	pointer
)	O
;	O
return	O
1	int
;	O
}	O
free	function
(	O
dirname	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
perm_check_tab	array
[	O
i	int
]	O
.	O
flag	pointer
;	O
i	int
++	O
)	O
if	O
(	O
(	O
config_file_checks	int
&	O
perm_check_tab	array
[	O
i	int
]	O
.	O
flag	pointer
)	O
&&	O
perm_check_tab	array
[	O
i	int
]	O
.	O
fun	pointer
(	O
st	pointer
,	O
&	O
dirst	pointer
)	O
)	O
{	O
logmsg	function
(	O
LOG_NOTICE	int
,	O
"%s: %s"	pointer
,	O
filename	pointer
,	O
gettext	function
(	O
perm_check_tab	array
[	O
i	int
]	O
.	O
descr	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
check_kw	struct
{	O
int	O
bits	int
;	O
char	O
const	O
*	O
keyword	pointer
;	O
}	O
chk_args	array
[	O
]	O
=	O
{	O
{	O
RUSH_CHK_ALL	O
,	O
"all"	pointer
}	O
,	O
{	O
RUSH_CHK_OWNER	int
,	O
"owner"	pointer
}	O
,	O
{	O
RUSH_CHK_IWGRP	int
,	O
"iwgrp"	pointer
}	O
,	O
{	O
RUSH_CHK_IWGRP	int
,	O
"groupwritablefile"	pointer
}	O
,	O
{	O
RUSH_CHK_IWOTH	int
,	O
"iwoth"	pointer
}	O
,	O
{	O
RUSH_CHK_IWOTH	int
,	O
"worldwritablefile"	pointer
}	O
,	O
{	O
RUSH_CHK_LINK	int
,	O
"link"	pointer
}	O
,	O
{	O
RUSH_CHK_DIR_IWGRP	int
,	O
"dir_iwgrp"	pointer
}	O
,	O
{	O
RUSH_CHK_DIR_IWGRP	int
,	O
"groupwritabledir"	pointer
}	O
,	O
{	O
RUSH_CHK_DIR_IWOTH	int
,	O
"dir_iwoth"	pointer
}	O
,	O
{	O
RUSH_CHK_DIR_IWOTH	int
,	O
"worldwritabledir"	pointer
}	O
,	O
{	O
0	int
,	O
NULL	O
}	O
}	O
;	O
int	O
cfck_keyword	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
int	O
negate	int
=	O
0	int
;	O
char	O
*	O
str	pointer
;	O
char	O
*	O
kw	pointer
;	O
int	O
i	int
;	O
str	pointer
=	O
xstrdup	function
(	O
name	pointer
)	O
;	O
for	O
(	O
kw	pointer
=	O
str	pointer
;	O
*	O
kw	pointer
;	O
kw	pointer
++	O
)	O
*	O
kw	pointer
=	O
tolower	function
(	O
*	O
kw	pointer
)	O
;	O
kw	pointer
=	O
str	pointer
;	O
if	O
(	O
strcmp	function
(	O
kw	pointer
,	O
"none"	pointer
)	O
==	O
0	int
)	O
{	O
negate	int
=	O
1	int
;	O
kw	pointer
=	O
"all"	pointer
;	O
}	O
else	O
if	O
(	O
strlen	function
(	O
kw	pointer
)	O
>	O
2	int
&&	O
strncmp	function
(	O
kw	pointer
,	O
"no"	pointer
,	O
2	int
)	O
==	O
0	int
)	O
{	O
negate	int
=	O
1	int
;	O
kw	pointer
+=	O
2	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
chk_args	array
[	O
i	int
]	O
.	O
keyword	pointer
;	O
i	int
++	O
)	O
if	O
(	O
strcmp	function
(	O
chk_args	array
[	O
i	int
]	O
.	O
keyword	pointer
,	O
kw	pointer
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
chk_args	array
[	O
i	int
]	O
.	O
keyword	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
negate	int
)	O
config_file_checks	int
&=	O
~	O
chk_args	array
[	O
i	int
]	O
.	O
bits	int
;	O
else	O
config_file_checks	int
|=	O
chk_args	array
[	O
i	int
]	O
.	O
bits	int
;	O
return	O
0	int
;	O
}	O
