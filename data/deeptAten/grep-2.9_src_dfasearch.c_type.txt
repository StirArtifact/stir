static	O
kwset_t	pointer
kwset	pointer
;	O
static	O
struct	O
dfa	pointer
*	O
dfa	pointer
;	O
static	O
struct	O
patterns	struct
{	O
struct	O
re_pattern_buffer	struct
regexbuf	struct
;	O
struct	O
re_registers	struct
regs	struct
;	O
}	O
patterns0	struct
;	O
static	O
struct	O
patterns	struct
*	O
patterns	struct
;	O
static	O
size_t	long
pcount	long
;	O
void	O
dfaerror	function
(	O
char	O
const	O
*	O
mesg	pointer
)	O
{	O
error	function
(	O
EXIT_TROUBLE	int
,	O
0	int
,	O
"%s"	pointer
,	O
mesg	pointer
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
void	O
dfawarn	function
(	O
char	O
const	O
*	O
mesg	pointer
)	O
{	O
static	O
enum	O
{	O
DW_NONE	int
=	O
0	int
,	O
DW_POSIX	int
,	O
DW_GNU	int
}	O
mode	enum
;	O
if	O
(	O
mode	enum
==	O
DW_NONE	int
)	O
mode	enum
=	O
(	O
getenv	function
(	O
"POSIXLY_CORRECT"	pointer
)	O
?	O
DW_POSIX	int
:	O
DW_GNU	int
)	O
;	O
if	O
(	O
mode	enum
==	O
DW_GNU	int
)	O
dfaerror	function
(	O
mesg	pointer
)	O
;	O
}	O
static	O
int	O
kwset_exact_matches	int
;	O
static	O
char	O
const	O
*	O
kwsincr_case	function
(	O
const	O
char	O
*	O
must	pointer
)	O
{	O
const	O
char	O
*	O
buf	pointer
;	O
size_t	long
n	long
;	O
n	long
=	O
strlen	function
(	O
must	pointer
)	O
;	O
if	O
(	O
match_icase	int
&&	O
MB_CUR_MAX	O
>	O
1	int
)	O
buf	pointer
=	O
mbtolower	function
(	O
must	pointer
,	O
&	O
n	long
)	O
;	O
else	O
buf	pointer
=	O
must	pointer
;	O
return	O
kwsincr	function
(	O
kwset	pointer
,	O
buf	pointer
,	O
n	long
)	O
;	O
}	O
static	O
void	O
kwsmusts	function
(	O
void	O
)	O
{	O
struct	O
dfamust	struct
const	O
*	O
dm	pointer
;	O
char	O
const	O
*	O
err	long
;	O
dm	pointer
=	O
dfamusts	function
(	O
dfa	pointer
)	O
;	O
if	O
(	O
dm	pointer
)	O
{	O
kwsinit	function
(	O
&	O
kwset	pointer
)	O
;	O
for	O
(	O
;	O
dm	pointer
;	O
dm	pointer
=	O
dm	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
!	O
dm	pointer
->	O
exact	int
)	O
continue	O
;	O
++	O
kwset_exact_matches	int
;	O
if	O
(	O
(	O
err	long
=	O
kwsincr_case	function
(	O
dm	pointer
->	O
must	pointer
)	O
)	O
!=	O
NULL	O
)	O
error	function
(	O
EXIT_TROUBLE	int
,	O
0	int
,	O
"%s"	pointer
,	O
err	long
)	O
;	O
}	O
for	O
(	O
dm	pointer
=	O
dfamusts	function
(	O
dfa	pointer
)	O
;	O
dm	pointer
;	O
dm	pointer
=	O
dm	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
dm	pointer
->	O
exact	int
)	O
continue	O
;	O
if	O
(	O
(	O
err	long
=	O
kwsincr_case	function
(	O
dm	pointer
->	O
must	pointer
)	O
)	O
!=	O
NULL	O
)	O
error	function
(	O
EXIT_TROUBLE	int
,	O
0	int
,	O
"%s"	pointer
,	O
err	long
)	O
;	O
}	O
if	O
(	O
(	O
err	long
=	O
kwsprep	function
(	O
kwset	pointer
)	O
)	O
!=	O
NULL	O
)	O
error	function
(	O
EXIT_TROUBLE	int
,	O
0	int
,	O
"%s"	pointer
,	O
err	long
)	O
;	O
}	O
}	O
void	O
GEAcompile	function
(	O
char	O
const	O
*	O
pattern	pointer
,	O
size_t	long
size	array
,	O
reg_syntax_t	long
syntax_bits	long
)	O
{	O
const	O
char	O
*	O
err	long
;	O
const	O
char	O
*	O
p	pointer
,	O
*	O
sep	pointer
;	O
size_t	long
total	long
=	O
size	array
;	O
char	O
*	O
motif	pointer
;	O
if	O
(	O
match_icase	int
)	O
syntax_bits	long
|=	O
RE_ICASE	O
;	O
re_set_syntax	function
(	O
syntax_bits	long
)	O
;	O
dfasyntax	function
(	O
syntax_bits	long
,	O
match_icase	int
,	O
eolbyte	char
)	O
;	O
p	pointer
=	O
pattern	pointer
;	O
do	O
{	O
size_t	long
len	long
;	O
sep	pointer
=	O
memchr	function
(	O
p	pointer
,	O
'\n'	O
,	O
total	long
)	O
;	O
if	O
(	O
sep	pointer
)	O
{	O
len	long
=	O
sep	pointer
-	O
p	pointer
;	O
sep	pointer
++	O
;	O
total	long
-=	O
(	O
len	long
+	O
1	int
)	O
;	O
}	O
else	O
{	O
len	long
=	O
total	long
;	O
total	long
=	O
0	int
;	O
}	O
patterns	struct
=	O
xnrealloc	function
(	O
patterns	struct
,	O
pcount	long
+	O
1	int
,	O
sizeof	O
*	O
patterns	struct
)	O
;	O
patterns	struct
[	O
pcount	long
]	O
=	O
patterns0	struct
;	O
if	O
(	O
(	O
err	long
=	O
re_compile_pattern	function
(	O
p	pointer
,	O
len	long
,	O
&	O
(	O
patterns	struct
[	O
pcount	long
]	O
.	O
regexbuf	struct
)	O
)	O
)	O
!=	O
NULL	O
)	O
error	function
(	O
EXIT_TROUBLE	int
,	O
0	int
,	O
"%s"	pointer
,	O
err	long
)	O
;	O
pcount	long
++	O
;	O
p	pointer
=	O
sep	pointer
;	O
}	O
while	O
(	O
sep	pointer
&&	O
total	long
!=	O
0	int
)	O
;	O
if	O
(	O
match_words	int
||	O
match_lines	int
)	O
{	O
static	O
char	O
const	O
line_beg_no_bk	array
[	O
]	O
=	O
"^("	pointer
;	O
static	O
char	O
const	O
line_end_no_bk	array
[	O
]	O
=	O
")$"	pointer
;	O
static	O
char	O
const	O
word_beg_no_bk	array
[	O
]	O
=	O
"(^|[^[:alnum:]_])("	pointer
;	O
static	O
char	O
const	O
word_end_no_bk	array
[	O
]	O
=	O
")([^[:alnum:]_]|$)"	pointer
;	O
static	O
char	O
const	O
line_beg_bk	array
[	O
]	O
=	O
"^\\("	pointer
;	O
static	O
char	O
const	O
line_end_bk	array
[	O
]	O
=	O
"\\)$"	pointer
;	O
static	O
char	O
const	O
word_beg_bk	array
[	O
]	O
=	O
"\\(^\\|[^[:alnum:]_]\\)\\("	pointer
;	O
static	O
char	O
const	O
word_end_bk	array
[	O
]	O
=	O
"\\)\\([^[:alnum:]_]\\|$\\)"	pointer
;	O
int	O
bk	int
=	O
!	O
(	O
syntax_bits	long
&	O
RE_NO_BK_PARENS	O
)	O
;	O
char	O
*	O
n	long
=	O
xmalloc	function
(	O
sizeof	O
word_beg_bk	array
-	O
1	int
+	O
size	array
+	O
sizeof	O
word_end_bk	array
)	O
;	O
strcpy	function
(	O
n	long
,	O
match_lines	int
?	O
(	O
bk	int
?	O
line_beg_bk	array
:	O
line_beg_no_bk	array
)	O
:	O
(	O
bk	int
?	O
word_beg_bk	array
:	O
word_beg_no_bk	array
)	O
)	O
;	O
total	long
=	O
strlen	function
(	O
n	long
)	O
;	O
memcpy	function
(	O
n	long
+	O
total	long
,	O
pattern	pointer
,	O
size	array
)	O
;	O
total	long
+=	O
size	array
;	O
strcpy	function
(	O
n	long
+	O
total	long
,	O
match_lines	int
?	O
(	O
bk	int
?	O
line_end_bk	array
:	O
line_end_no_bk	array
)	O
:	O
(	O
bk	int
?	O
word_end_bk	array
:	O
word_end_no_bk	array
)	O
)	O
;	O
total	long
+=	O
strlen	function
(	O
n	long
+	O
total	long
)	O
;	O
pattern	pointer
=	O
motif	pointer
=	O
n	long
;	O
size	array
=	O
total	long
;	O
}	O
else	O
motif	pointer
=	O
NULL	O
;	O
dfa	pointer
=	O
dfaalloc	function
(	O
)	O
;	O
dfacomp	function
(	O
pattern	pointer
,	O
size	array
,	O
dfa	pointer
,	O
1	int
)	O
;	O
kwsmusts	function
(	O
)	O
;	O
free	function
(	O
motif	pointer
)	O
;	O
}	O
size_t	long
EGexecute	function
(	O
char	O
const	O
*	O
buf	pointer
,	O
size_t	long
size	array
,	O
size_t	long
*	O
match_size	pointer
,	O
char	O
const	O
*	O
start_ptr	pointer
)	O
{	O
char	O
const	O
*	O
buflim	pointer
,	O
*	O
beg	pointer
,	O
*	O
end	pointer
,	O
*	O
match	pointer
,	O
*	O
best_match	pointer
,	O
*	O
mb_start	pointer
;	O
char	O
eol	char
=	O
eolbyte	char
;	O
int	O
backref	pointer
,	O
start	pointer
,	O
len	long
,	O
best_len	int
;	O
struct	O
kwsmatch	struct
kwsm	struct
;	O
size_t	long
i	long
,	O
ret_val	long
;	O
if	O
(	O
MB_CUR_MAX	O
>	O
1	int
)	O
{	O
if	O
(	O
match_icase	int
)	O
{	O
char	O
*	O
case_buf	pointer
=	O
mbtolower	function
(	O
buf	pointer
,	O
&	O
size	array
)	O
;	O
if	O
(	O
start_ptr	pointer
)	O
start_ptr	pointer
=	O
case_buf	pointer
+	O
(	O
start_ptr	pointer
-	O
buf	pointer
)	O
;	O
buf	pointer
=	O
case_buf	pointer
;	O
}	O
}	O
mb_start	pointer
=	O
buf	pointer
;	O
buflim	pointer
=	O
buf	pointer
+	O
size	array
;	O
for	O
(	O
beg	pointer
=	O
end	pointer
=	O
buf	pointer
;	O
end	pointer
<	O
buflim	pointer
;	O
beg	pointer
=	O
end	pointer
)	O
{	O
if	O
(	O
!	O
start_ptr	pointer
)	O
{	O
if	O
(	O
kwset	pointer
)	O
{	O
size_t	long
offset	long
=	O
kwsexec	function
(	O
kwset	pointer
,	O
beg	pointer
,	O
buflim	pointer
-	O
beg	pointer
,	O
&	O
kwsm	struct
)	O
;	O
if	O
(	O
offset	long
==	O
(	O
size_t	long
)	O
-	O
1	int
)	O
goto	O
failure	O
;	O
beg	pointer
+=	O
offset	long
;	O
if	O
(	O
(	O
end	pointer
=	O
memchr	function
(	O
beg	pointer
,	O
eol	char
,	O
buflim	pointer
-	O
beg	pointer
)	O
)	O
!=	O
NULL	O
)	O
end	pointer
++	O
;	O
else	O
end	pointer
=	O
buflim	pointer
;	O
match	pointer
=	O
beg	pointer
;	O
while	O
(	O
beg	pointer
>	O
buf	pointer
&&	O
beg	pointer
[	O
-	O
1	int
]	O
!=	O
eol	char
)	O
--	O
beg	pointer
;	O
if	O
(	O
kwsm	struct
.	O
index	function
<	O
kwset_exact_matches	int
)	O
{	O
if	O
(	O
mb_start	pointer
<	O
beg	pointer
)	O
mb_start	pointer
=	O
beg	pointer
;	O
if	O
(	O
MB_CUR_MAX	O
==	O
1	int
||	O
!	O
is_mb_middle	function
(	O
&	O
mb_start	pointer
,	O
match	pointer
,	O
buflim	pointer
,	O
kwsm	struct
.	O
size	array
[	O
0	int
]	O
)	O
)	O
goto	O
success	O
;	O
}	O
if	O
(	O
dfaexec	function
(	O
dfa	pointer
,	O
beg	pointer
,	O
(	O
char	O
*	O
)	O
end	pointer
,	O
0	int
,	O
NULL	O
,	O
&	O
backref	pointer
)	O
==	O
NULL	O
)	O
continue	O
;	O
}	O
else	O
{	O
char	O
const	O
*	O
next_beg	pointer
=	O
dfaexec	function
(	O
dfa	pointer
,	O
beg	pointer
,	O
(	O
char	O
*	O
)	O
buflim	pointer
,	O
0	int
,	O
NULL	O
,	O
&	O
backref	pointer
)	O
;	O
if	O
(	O
next_beg	pointer
==	O
NULL	O
)	O
break	O
;	O
beg	pointer
=	O
next_beg	pointer
;	O
if	O
(	O
(	O
end	pointer
=	O
memchr	function
(	O
beg	pointer
,	O
eol	char
,	O
buflim	pointer
-	O
beg	pointer
)	O
)	O
!=	O
NULL	O
)	O
end	pointer
++	O
;	O
else	O
end	pointer
=	O
buflim	pointer
;	O
while	O
(	O
beg	pointer
>	O
buf	pointer
&&	O
beg	pointer
[	O
-	O
1	int
]	O
!=	O
eol	char
)	O
--	O
beg	pointer
;	O
}	O
if	O
(	O
!	O
backref	pointer
)	O
goto	O
success	O
;	O
}	O
else	O
{	O
beg	pointer
=	O
start_ptr	pointer
;	O
end	pointer
=	O
buflim	pointer
;	O
}	O
best_match	pointer
=	O
end	pointer
;	O
best_len	int
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
pcount	long
;	O
i	long
++	O
)	O
{	O
patterns	struct
[	O
i	long
]	O
.	O
regexbuf	struct
.	O
not_eol	int
=	O
0	int
;	O
if	O
(	O
0	int
<=	O
(	O
start	pointer
=	O
re_search	function
(	O
&	O
(	O
patterns	struct
[	O
i	long
]	O
.	O
regexbuf	struct
)	O
,	O
buf	pointer
,	O
end	pointer
-	O
buf	pointer
-	O
1	int
,	O
beg	pointer
-	O
buf	pointer
,	O
end	pointer
-	O
beg	pointer
-	O
1	int
,	O
&	O
(	O
patterns	struct
[	O
i	long
]	O
.	O
regs	struct
)	O
)	O
)	O
)	O
{	O
len	long
=	O
patterns	struct
[	O
i	long
]	O
.	O
regs	struct
.	O
end	pointer
[	O
0	int
]	O
-	O
start	pointer
;	O
match	pointer
=	O
buf	pointer
+	O
start	pointer
;	O
if	O
(	O
match	pointer
>	O
best_match	pointer
)	O
continue	O
;	O
if	O
(	O
start_ptr	pointer
&&	O
!	O
match_words	int
)	O
goto	O
assess_pattern_match	O
;	O
if	O
(	O
(	O
!	O
match_lines	int
&&	O
!	O
match_words	int
)	O
||	O
(	O
match_lines	int
&&	O
len	long
==	O
end	pointer
-	O
beg	pointer
-	O
1	int
)	O
)	O
{	O
match	pointer
=	O
beg	pointer
;	O
len	long
=	O
end	pointer
-	O
beg	pointer
;	O
goto	O
assess_pattern_match	O
;	O
}	O
if	O
(	O
match_words	int
)	O
while	O
(	O
match	pointer
<=	O
best_match	pointer
)	O
{	O
if	O
(	O
(	O
match	pointer
==	O
buf	pointer
||	O
!	O
WCHAR	O
(	O
(	O
unsigned	O
char	O
)	O
match	pointer
[	O
-	O
1	int
]	O
)	O
)	O
&&	O
(	O
start	pointer
+	O
len	long
==	O
end	pointer
-	O
buf	pointer
-	O
1	int
||	O
!	O
WCHAR	O
(	O
(	O
unsigned	O
char	O
)	O
match	pointer
[	O
len	long
]	O
)	O
)	O
)	O
goto	O
assess_pattern_match	O
;	O
if	O
(	O
len	long
>	O
0	int
)	O
{	O
--	O
len	long
;	O
patterns	struct
[	O
i	long
]	O
.	O
regexbuf	struct
.	O
not_eol	int
=	O
1	int
;	O
len	long
=	O
re_match	function
(	O
&	O
(	O
patterns	struct
[	O
i	long
]	O
.	O
regexbuf	struct
)	O
,	O
buf	pointer
,	O
match	pointer
+	O
len	long
-	O
beg	pointer
,	O
match	pointer
-	O
buf	pointer
,	O
&	O
(	O
patterns	struct
[	O
i	long
]	O
.	O
regs	struct
)	O
)	O
;	O
}	O
if	O
(	O
len	long
<=	O
0	int
)	O
{	O
if	O
(	O
match	pointer
==	O
end	pointer
-	O
1	int
)	O
break	O
;	O
match	pointer
++	O
;	O
patterns	struct
[	O
i	long
]	O
.	O
regexbuf	struct
.	O
not_eol	int
=	O
0	int
;	O
start	pointer
=	O
re_search	function
(	O
&	O
(	O
patterns	struct
[	O
i	long
]	O
.	O
regexbuf	struct
)	O
,	O
buf	pointer
,	O
end	pointer
-	O
buf	pointer
-	O
1	int
,	O
match	pointer
-	O
buf	pointer
,	O
end	pointer
-	O
match	pointer
-	O
1	int
,	O
&	O
(	O
patterns	struct
[	O
i	long
]	O
.	O
regs	struct
)	O
)	O
;	O
if	O
(	O
start	pointer
<	O
0	int
)	O
break	O
;	O
len	long
=	O
patterns	struct
[	O
i	long
]	O
.	O
regs	struct
.	O
end	pointer
[	O
0	int
]	O
-	O
start	pointer
;	O
match	pointer
=	O
buf	pointer
+	O
start	pointer
;	O
}	O
}	O
continue	O
;	O
assess_pattern_match	O
:	O
if	O
(	O
!	O
start_ptr	pointer
)	O
{	O
goto	O
success	O
;	O
}	O
if	O
(	O
match	pointer
<	O
best_match	pointer
||	O
(	O
match	pointer
==	O
best_match	pointer
&&	O
len	long
>	O
best_len	int
)	O
)	O
{	O
best_match	pointer
=	O
match	pointer
;	O
best_len	int
=	O
len	long
;	O
}	O
}	O
}	O
if	O
(	O
best_match	pointer
<	O
end	pointer
)	O
{	O
beg	pointer
=	O
best_match	pointer
;	O
len	long
=	O
best_len	int
;	O
goto	O
success_in_len	O
;	O
}	O
}	O
failure	O
:	O
ret_val	long
=	O
-	O
1	int
;	O
goto	O
out	O
;	O
success	O
:	O
len	long
=	O
end	pointer
-	O
beg	pointer
;	O
success_in_len	O
:	O
*	O
match_size	pointer
=	O
len	long
;	O
ret_val	long
=	O
beg	pointer
-	O
buf	pointer
;	O
out	O
:	O
return	O
ret_val	long
;	O
}	O
