extern	O
osip_statemachine_t	struct
ict_fsm	struct
;	O
extern	O
osip_statemachine_t	struct
ist_fsm	struct
;	O
extern	O
osip_statemachine_t	struct
nict_fsm	struct
;	O
extern	O
osip_statemachine_t	struct
nist_fsm	struct
;	O
int	O
osip_id_mutex_lock	function
(	O
osip_t	struct
*	O
osip	struct
)	O
;	O
int	O
osip_id_mutex_unlock	function
(	O
osip_t	struct
*	O
osip	struct
)	O
;	O
static	O
int	O
__osip_transaction_set_topvia	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
,	O
osip_via_t	struct
*	O
topvia	pointer
)	O
;	O
static	O
int	O
__osip_transaction_set_from	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
,	O
osip_from_t	struct
*	O
from	pointer
)	O
;	O
static	O
int	O
__osip_transaction_set_to	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
,	O
osip_to_t	struct
*	O
to	pointer
)	O
;	O
static	O
int	O
__osip_transaction_set_call_id	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
,	O
osip_call_id_t	struct
*	O
call_id	pointer
)	O
;	O
static	O
int	O
__osip_transaction_set_cseq	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
,	O
osip_cseq_t	struct
*	O
cseq	pointer
)	O
;	O
static	O
int	O
__osip_transaction_set_topvia	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
,	O
osip_via_t	struct
*	O
topvia	pointer
)	O
{	O
int	O
i	int
;	O
if	O
(	O
transaction	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_via_clone	function
(	O
topvia	pointer
,	O
&	O
(	O
transaction	pointer
->	O
topvia	pointer
)	O
)	O
;	O
if	O
(	O
i	int
==	O
0	int
)	O
return	O
OSIP_SUCCESS	int
;	O
transaction	pointer
->	O
topvia	pointer
=	O
NULL	O
;	O
return	O
i	int
;	O
}	O
static	O
int	O
__osip_transaction_set_from	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
,	O
osip_from_t	struct
*	O
from	pointer
)	O
{	O
int	O
i	int
;	O
if	O
(	O
transaction	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_from_clone	function
(	O
from	pointer
,	O
&	O
(	O
transaction	pointer
->	O
from	pointer
)	O
)	O
;	O
if	O
(	O
i	int
==	O
0	int
)	O
return	O
OSIP_SUCCESS	int
;	O
transaction	pointer
->	O
from	pointer
=	O
NULL	O
;	O
return	O
i	int
;	O
}	O
static	O
int	O
__osip_transaction_set_to	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
,	O
osip_to_t	struct
*	O
to	pointer
)	O
{	O
int	O
i	int
;	O
if	O
(	O
transaction	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_to_clone	function
(	O
to	pointer
,	O
&	O
(	O
transaction	pointer
->	O
to	pointer
)	O
)	O
;	O
if	O
(	O
i	int
==	O
0	int
)	O
return	O
OSIP_SUCCESS	int
;	O
transaction	pointer
->	O
to	pointer
=	O
NULL	O
;	O
return	O
i	int
;	O
}	O
static	O
int	O
__osip_transaction_set_call_id	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
,	O
osip_call_id_t	struct
*	O
call_id	pointer
)	O
{	O
int	O
i	int
;	O
if	O
(	O
transaction	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_call_id_clone	function
(	O
call_id	pointer
,	O
&	O
(	O
transaction	pointer
->	O
callid	pointer
)	O
)	O
;	O
if	O
(	O
i	int
==	O
0	int
)	O
return	O
OSIP_SUCCESS	int
;	O
transaction	pointer
->	O
callid	pointer
=	O
NULL	O
;	O
return	O
i	int
;	O
}	O
static	O
int	O
__osip_transaction_set_cseq	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
,	O
osip_cseq_t	struct
*	O
cseq	pointer
)	O
{	O
int	O
i	int
;	O
if	O
(	O
transaction	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_cseq_clone	function
(	O
cseq	pointer
,	O
&	O
(	O
transaction	pointer
->	O
cseq	pointer
)	O
)	O
;	O
if	O
(	O
i	int
==	O
0	int
)	O
return	O
OSIP_SUCCESS	int
;	O
transaction	pointer
->	O
cseq	pointer
=	O
NULL	O
;	O
return	O
i	int
;	O
}	O
int	O
osip_transaction_init	function
(	O
osip_transaction_t	struct
*	O
*	O
transaction	pointer
,	O
osip_fsm_type_t	enum
ctx_type	enum
,	O
osip_t	struct
*	O
osip	struct
,	O
osip_message_t	struct
*	O
request	pointer
)	O
{	O
osip_via_t	struct
*	O
topvia	pointer
;	O
int	O
i	int
;	O
*	O
transaction	pointer
=	O
NULL	O
;	O
if	O
(	O
request	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
request	pointer
->	O
call_id	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
request	pointer
->	O
call_id	pointer
->	O
number	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
*	O
transaction	pointer
=	O
(	O
osip_transaction_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
osip_transaction_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
transaction	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
memset	function
(	O
*	O
transaction	pointer
,	O
0	int
,	O
sizeof	O
(	O
osip_transaction_t	struct
)	O
)	O
;	O
(	O
*	O
transaction	pointer
)	O
->	O
birth_time	long
=	O
osip_getsystemtime	function
(	O
NULL	O
)	O
;	O
osip_id_mutex_lock	function
(	O
osip	struct
)	O
;	O
(	O
*	O
transaction	pointer
)	O
->	O
transactionid	int
=	O
osip	struct
->	O
transactionid	int
++	O
;	O
osip_id_mutex_unlock	function
(	O
osip	struct
)	O
;	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_INFO2	O
,	O
NULL	O
,	O
"allocating transaction resource %i %s\n"	pointer
,	O
(	O
*	O
transaction	pointer
)	O
->	O
transactionid	int
,	O
request	pointer
->	O
call_id	pointer
->	O
number	pointer
)	O
)	O
;	O
(	O
*	O
transaction	pointer
)	O
->	O
ctx_type	enum
=	O
ctx_type	enum
;	O
(	O
*	O
transaction	pointer
)	O
->	O
ict_context	pointer
=	O
NULL	O
;	O
(	O
*	O
transaction	pointer
)	O
->	O
ist_context	pointer
=	O
NULL	O
;	O
(	O
*	O
transaction	pointer
)	O
->	O
nict_context	pointer
=	O
NULL	O
;	O
(	O
*	O
transaction	pointer
)	O
->	O
nist_context	pointer
=	O
NULL	O
;	O
(	O
*	O
transaction	pointer
)	O
->	O
config	pointer
=	O
osip	struct
;	O
topvia	pointer
=	O
osip_list_get	function
(	O
&	O
request	pointer
->	O
vias	struct
,	O
0	int
)	O
;	O
if	O
(	O
topvia	pointer
==	O
NULL	O
)	O
{	O
osip_transaction_free	function
(	O
*	O
transaction	pointer
)	O
;	O
*	O
transaction	pointer
=	O
NULL	O
;	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
i	int
=	O
__osip_transaction_set_topvia	function
(	O
*	O
transaction	pointer
,	O
topvia	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_transaction_free	function
(	O
*	O
transaction	pointer
)	O
;	O
*	O
transaction	pointer
=	O
NULL	O
;	O
return	O
i	int
;	O
}	O
i	int
=	O
__osip_transaction_set_from	function
(	O
*	O
transaction	pointer
,	O
request	pointer
->	O
from	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_transaction_free	function
(	O
*	O
transaction	pointer
)	O
;	O
*	O
transaction	pointer
=	O
NULL	O
;	O
return	O
i	int
;	O
}	O
i	int
=	O
__osip_transaction_set_to	function
(	O
*	O
transaction	pointer
,	O
request	pointer
->	O
to	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_transaction_free	function
(	O
*	O
transaction	pointer
)	O
;	O
*	O
transaction	pointer
=	O
NULL	O
;	O
return	O
i	int
;	O
}	O
i	int
=	O
__osip_transaction_set_call_id	function
(	O
*	O
transaction	pointer
,	O
request	pointer
->	O
call_id	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_transaction_free	function
(	O
*	O
transaction	pointer
)	O
;	O
*	O
transaction	pointer
=	O
NULL	O
;	O
return	O
i	int
;	O
}	O
i	int
=	O
__osip_transaction_set_cseq	function
(	O
*	O
transaction	pointer
,	O
request	pointer
->	O
cseq	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_transaction_free	function
(	O
*	O
transaction	pointer
)	O
;	O
*	O
transaction	pointer
=	O
NULL	O
;	O
return	O
i	int
;	O
}	O
(	O
*	O
transaction	pointer
)	O
->	O
orig_request	pointer
=	O
NULL	O
;	O
(	O
*	O
transaction	pointer
)	O
->	O
transactionff	pointer
=	O
(	O
osip_fifo_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
osip_fifo_t	struct
)	O
)	O
;	O
if	O
(	O
(	O
*	O
transaction	pointer
)	O
->	O
transactionff	pointer
==	O
NULL	O
)	O
{	O
osip_transaction_free	function
(	O
*	O
transaction	pointer
)	O
;	O
*	O
transaction	pointer
=	O
NULL	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
osip_fifo_init	function
(	O
(	O
*	O
transaction	pointer
)	O
->	O
transactionff	pointer
)	O
;	O
if	O
(	O
ctx_type	enum
==	O
ICT	int
)	O
{	O
(	O
*	O
transaction	pointer
)	O
->	O
state	pointer
=	O
ICT_PRE_CALLING	int
;	O
i	int
=	O
__osip_ict_init	function
(	O
&	O
(	O
(	O
*	O
transaction	pointer
)	O
->	O
ict_context	pointer
)	O
,	O
osip	struct
,	O
request	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_transaction_free	function
(	O
*	O
transaction	pointer
)	O
;	O
*	O
transaction	pointer
=	O
NULL	O
;	O
return	O
i	int
;	O
}	O
__osip_add_ict	function
(	O
osip	struct
,	O
*	O
transaction	pointer
)	O
;	O
}	O
else	O
if	O
(	O
ctx_type	enum
==	O
IST	int
)	O
{	O
(	O
*	O
transaction	pointer
)	O
->	O
state	pointer
=	O
IST_PRE_PROCEEDING	int
;	O
i	int
=	O
__osip_ist_init	function
(	O
&	O
(	O
(	O
*	O
transaction	pointer
)	O
->	O
ist_context	pointer
)	O
,	O
osip	struct
,	O
request	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_transaction_free	function
(	O
*	O
transaction	pointer
)	O
;	O
*	O
transaction	pointer
=	O
NULL	O
;	O
return	O
i	int
;	O
}	O
__osip_add_ist	function
(	O
osip	struct
,	O
*	O
transaction	pointer
)	O
;	O
}	O
else	O
if	O
(	O
ctx_type	enum
==	O
NICT	int
)	O
{	O
(	O
*	O
transaction	pointer
)	O
->	O
state	pointer
=	O
NICT_PRE_TRYING	int
;	O
i	int
=	O
__osip_nict_init	function
(	O
&	O
(	O
(	O
*	O
transaction	pointer
)	O
->	O
nict_context	pointer
)	O
,	O
osip	struct
,	O
request	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_transaction_free	function
(	O
*	O
transaction	pointer
)	O
;	O
*	O
transaction	pointer
=	O
NULL	O
;	O
return	O
i	int
;	O
}	O
__osip_add_nict	function
(	O
osip	struct
,	O
*	O
transaction	pointer
)	O
;	O
}	O
else	O
{	O
(	O
*	O
transaction	pointer
)	O
->	O
state	pointer
=	O
NIST_PRE_TRYING	int
;	O
i	int
=	O
__osip_nist_init	function
(	O
&	O
(	O
(	O
*	O
transaction	pointer
)	O
->	O
nist_context	pointer
)	O
,	O
osip	struct
,	O
request	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_transaction_free	function
(	O
*	O
transaction	pointer
)	O
;	O
*	O
transaction	pointer
=	O
NULL	O
;	O
return	O
i	int
;	O
}	O
__osip_add_nist	function
(	O
osip	struct
,	O
*	O
transaction	pointer
)	O
;	O
}	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_transaction_free	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
)	O
{	O
int	O
i	int
;	O
if	O
(	O
transaction	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_remove_transaction	function
(	O
transaction	pointer
->	O
config	pointer
,	O
transaction	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_INFO4	O
,	O
NULL	O
,	O
"transaction already removed from list %i!\n"	pointer
,	O
transaction	pointer
->	O
transactionid	int
)	O
)	O
;	O
}	O
return	O
osip_transaction_free2	function
(	O
transaction	pointer
)	O
;	O
}	O
int	O
osip_transaction_free2	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
)	O
{	O
osip_event_t	struct
*	O
evt	pointer
;	O
if	O
(	O
transaction	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
transaction	pointer
->	O
orig_request	pointer
!=	O
NULL	O
&&	O
transaction	pointer
->	O
orig_request	pointer
->	O
call_id	pointer
!=	O
NULL	O
&&	O
transaction	pointer
->	O
orig_request	pointer
->	O
call_id	pointer
->	O
number	pointer
!=	O
NULL	O
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_INFO2	O
,	O
NULL	O
,	O
"free transaction resource %i %s\n"	pointer
,	O
transaction	pointer
->	O
transactionid	int
,	O
transaction	pointer
->	O
orig_request	pointer
->	O
call_id	pointer
->	O
number	pointer
)	O
)	O
;	O
}	O
if	O
(	O
transaction	pointer
->	O
ctx_type	enum
==	O
ICT	int
)	O
{	O
__osip_ict_free	function
(	O
transaction	pointer
->	O
ict_context	pointer
)	O
;	O
}	O
else	O
if	O
(	O
transaction	pointer
->	O
ctx_type	enum
==	O
IST	int
)	O
{	O
__osip_ist_free	function
(	O
transaction	pointer
->	O
ist_context	pointer
)	O
;	O
}	O
else	O
if	O
(	O
transaction	pointer
->	O
ctx_type	enum
==	O
NICT	int
)	O
{	O
__osip_nict_free	function
(	O
transaction	pointer
->	O
nict_context	pointer
)	O
;	O
}	O
else	O
{	O
__osip_nist_free	function
(	O
transaction	pointer
->	O
nist_context	pointer
)	O
;	O
}	O
if	O
(	O
transaction	pointer
->	O
transactionff	pointer
!=	O
NULL	O
)	O
{	O
evt	pointer
=	O
osip_fifo_tryget	function
(	O
transaction	pointer
->	O
transactionff	pointer
)	O
;	O
while	O
(	O
evt	pointer
!=	O
NULL	O
)	O
{	O
osip_message_free	function
(	O
evt	pointer
->	O
sip	pointer
)	O
;	O
osip_free	O
(	O
evt	pointer
)	O
;	O
evt	pointer
=	O
osip_fifo_tryget	function
(	O
transaction	pointer
->	O
transactionff	pointer
)	O
;	O
}	O
osip_fifo_free	function
(	O
transaction	pointer
->	O
transactionff	pointer
)	O
;	O
}	O
osip_message_free	function
(	O
transaction	pointer
->	O
orig_request	pointer
)	O
;	O
osip_message_free	function
(	O
transaction	pointer
->	O
last_response	pointer
)	O
;	O
osip_message_free	function
(	O
transaction	pointer
->	O
ack	pointer
)	O
;	O
osip_via_free	function
(	O
transaction	pointer
->	O
topvia	pointer
)	O
;	O
osip_from_free	function
(	O
transaction	pointer
->	O
from	pointer
)	O
;	O
osip_to_free	function
(	O
transaction	pointer
->	O
to	pointer
)	O
;	O
osip_call_id_free	function
(	O
transaction	pointer
->	O
callid	pointer
)	O
;	O
osip_cseq_free	function
(	O
transaction	pointer
->	O
cseq	pointer
)	O
;	O
osip_free	O
(	O
transaction	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_transaction_add_event	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
,	O
osip_event_t	struct
*	O
evt	pointer
)	O
{	O
if	O
(	O
evt	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
transaction	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
evt	pointer
->	O
transactionid	int
=	O
transaction	pointer
->	O
transactionid	int
;	O
osip_fifo_add	function
(	O
transaction	pointer
->	O
transactionff	pointer
,	O
evt	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_transaction_execute	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
,	O
osip_event_t	struct
*	O
evt	pointer
)	O
{	O
osip_statemachine_t	struct
*	O
statemachine	pointer
;	O
if	O
(	O
EVT_IS_KILL_TRANSACTION	O
(	O
evt	pointer
)	O
)	O
{	O
osip_free	O
(	O
evt	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_INFO4	O
,	O
NULL	O
,	O
"sipevent tr->transactionid: %i\n"	pointer
,	O
transaction	pointer
->	O
transactionid	int
)	O
)	O
;	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_INFO4	O
,	O
NULL	O
,	O
"sipevent tr->state: %i\n"	pointer
,	O
transaction	pointer
->	O
state	pointer
)	O
)	O
;	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_INFO4	O
,	O
NULL	O
,	O
"sipevent evt->type: %i\n"	pointer
,	O
evt	pointer
->	O
type	pointer
)	O
)	O
;	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_INFO4	O
,	O
NULL	O
,	O
"sipevent evt->sip: %x\n"	pointer
,	O
evt	pointer
->	O
sip	pointer
)	O
)	O
;	O
if	O
(	O
transaction	pointer
->	O
ctx_type	enum
==	O
ICT	int
)	O
statemachine	pointer
=	O
&	O
ict_fsm	struct
;	O
else	O
if	O
(	O
transaction	pointer
->	O
ctx_type	enum
==	O
IST	int
)	O
statemachine	pointer
=	O
&	O
ist_fsm	struct
;	O
else	O
if	O
(	O
transaction	pointer
->	O
ctx_type	enum
==	O
NICT	int
)	O
statemachine	pointer
=	O
&	O
nict_fsm	struct
;	O
else	O
statemachine	pointer
=	O
&	O
nist_fsm	struct
;	O
if	O
(	O
0	int
!=	O
fsm_callmethod	function
(	O
evt	pointer
->	O
type	pointer
,	O
transaction	pointer
->	O
state	pointer
,	O
statemachine	pointer
,	O
evt	pointer
,	O
transaction	pointer
)	O
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_INFO3	O
,	O
NULL	O
,	O
"USELESS event!\n"	pointer
)	O
)	O
;	O
if	O
(	O
EVT_IS_MSG	O
(	O
evt	pointer
)	O
)	O
{	O
if	O
(	O
evt	pointer
->	O
sip	pointer
!=	O
NULL	O
)	O
{	O
osip_message_free	function
(	O
evt	pointer
->	O
sip	pointer
)	O
;	O
}	O
}	O
}	O
else	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_INFO4	O
,	O
NULL	O
,	O
"sipevent evt: method called!\n"	pointer
)	O
)	O
;	O
}	O
osip_free	O
(	O
evt	pointer
)	O
;	O
return	O
1	int
;	O
}	O
int	O
osip_transaction_get_destination	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
,	O
char	O
*	O
*	O
ip	pointer
,	O
int	O
*	O
port	pointer
)	O
{	O
*	O
ip	pointer
=	O
NULL	O
;	O
*	O
port	pointer
=	O
0	int
;	O
if	O
(	O
transaction	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
transaction	pointer
->	O
ict_context	pointer
!=	O
NULL	O
)	O
{	O
*	O
ip	pointer
=	O
transaction	pointer
->	O
ict_context	pointer
->	O
destination	pointer
;	O
*	O
port	pointer
=	O
transaction	pointer
->	O
ict_context	pointer
->	O
port	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
transaction	pointer
->	O
nict_context	pointer
!=	O
NULL	O
)	O
{	O
*	O
ip	pointer
=	O
transaction	pointer
->	O
nict_context	pointer
->	O
destination	pointer
;	O
*	O
port	pointer
=	O
transaction	pointer
->	O
nict_context	pointer
->	O
port	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
}	O
int	O
osip_transaction_set_srv_record	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
,	O
osip_srv_record_t	struct
*	O
record	struct
)	O
{	O
if	O
(	O
transaction	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
memcpy	function
(	O
&	O
transaction	pointer
->	O
record	struct
,	O
record	struct
,	O
sizeof	O
(	O
osip_srv_record_t	struct
)	O
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_transaction_set_naptr_record	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
,	O
osip_naptr_t	struct
*	O
record	struct
)	O
{	O
if	O
(	O
transaction	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
transaction	pointer
->	O
naptr_record	pointer
=	O
record	struct
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_transaction_set_your_instance	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
,	O
void	O
*	O
ptr	pointer
)	O
{	O
if	O
(	O
transaction	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
transaction	pointer
->	O
reserved1	pointer
=	O
ptr	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_transaction_set_reserved1	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
,	O
void	O
*	O
ptr	pointer
)	O
{	O
if	O
(	O
transaction	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
transaction	pointer
->	O
reserved1	pointer
=	O
ptr	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_transaction_set_reserved2	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
,	O
void	O
*	O
ptr	pointer
)	O
{	O
if	O
(	O
transaction	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
transaction	pointer
->	O
reserved2	pointer
=	O
ptr	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_transaction_set_reserved3	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
,	O
void	O
*	O
ptr	pointer
)	O
{	O
if	O
(	O
transaction	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
transaction	pointer
->	O
reserved3	pointer
=	O
ptr	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_transaction_set_reserved4	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
,	O
void	O
*	O
ptr	pointer
)	O
{	O
if	O
(	O
transaction	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
transaction	pointer
->	O
reserved4	pointer
=	O
ptr	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_transaction_set_reserved5	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
,	O
void	O
*	O
ptr	pointer
)	O
{	O
if	O
(	O
transaction	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
transaction	pointer
->	O
reserved5	pointer
=	O
ptr	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_transaction_set_reserved6	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
,	O
void	O
*	O
ptr	pointer
)	O
{	O
if	O
(	O
transaction	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
transaction	pointer
->	O
reserved6	pointer
=	O
ptr	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
*	O
osip_transaction_get_your_instance	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
)	O
{	O
if	O
(	O
transaction	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
transaction	pointer
->	O
reserved1	pointer
;	O
}	O
void	O
*	O
osip_transaction_get_reserved1	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
)	O
{	O
if	O
(	O
transaction	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
transaction	pointer
->	O
reserved1	pointer
;	O
}	O
void	O
*	O
osip_transaction_get_reserved2	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
)	O
{	O
if	O
(	O
transaction	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
transaction	pointer
->	O
reserved2	pointer
;	O
}	O
void	O
*	O
osip_transaction_get_reserved3	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
)	O
{	O
if	O
(	O
transaction	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
transaction	pointer
->	O
reserved3	pointer
;	O
}	O
void	O
*	O
osip_transaction_get_reserved4	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
)	O
{	O
if	O
(	O
transaction	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
transaction	pointer
->	O
reserved4	pointer
;	O
}	O
void	O
*	O
osip_transaction_get_reserved5	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
)	O
{	O
if	O
(	O
transaction	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
transaction	pointer
->	O
reserved5	pointer
;	O
}	O
void	O
*	O
osip_transaction_get_reserved6	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
)	O
{	O
if	O
(	O
transaction	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
transaction	pointer
->	O
reserved6	pointer
;	O
}	O
int	O
__osip_transaction_set_state	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
,	O
state_t	enum
state	pointer
)	O
{	O
if	O
(	O
transaction	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
transaction	pointer
->	O
state	pointer
=	O
state	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_transaction_set_in_socket	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
,	O
int	O
sock	int
)	O
{	O
if	O
(	O
transaction	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
transaction	pointer
->	O
in_socket	int
=	O
sock	int
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_transaction_set_out_socket	function
(	O
osip_transaction_t	struct
*	O
transaction	pointer
,	O
int	O
sock	int
)	O
{	O
if	O
(	O
transaction	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
transaction	pointer
->	O
out_socket	int
=	O
sock	int
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
__osip_transaction_matching_response_osip_to_xict_17_1_3	function
(	O
osip_transaction_t	struct
*	O
tr	pointer
,	O
osip_message_t	struct
*	O
response	pointer
)	O
{	O
osip_generic_param_t	struct
*	O
b_request	pointer
;	O
osip_generic_param_t	struct
*	O
b_response	pointer
;	O
osip_via_t	struct
*	O
topvia_response	pointer
;	O
if	O
(	O
tr	pointer
==	O
NULL	O
||	O
(	O
tr	pointer
->	O
ict_context	pointer
==	O
NULL	O
&&	O
tr	pointer
->	O
nict_context	pointer
==	O
NULL	O
)	O
||	O
response	pointer
==	O
NULL	O
||	O
response	pointer
->	O
cseq	pointer
==	O
NULL	O
||	O
response	pointer
->	O
cseq	pointer
->	O
method	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
topvia_response	pointer
=	O
osip_list_get	function
(	O
&	O
response	pointer
->	O
vias	struct
,	O
0	int
)	O
;	O
if	O
(	O
topvia_response	pointer
==	O
NULL	O
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_ERROR	O
,	O
NULL	O
,	O
"Remote UA is not compliant: missing a Via header!\n"	pointer
)	O
)	O
;	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
osip_via_param_get_byname	O
(	O
tr	pointer
->	O
topvia	pointer
,	O
"branch"	pointer
,	O
&	O
b_request	pointer
)	O
;	O
if	O
(	O
b_request	pointer
==	O
NULL	O
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_BUG	O
,	O
NULL	O
,	O
"You created a transaction without any branch! THIS IS NOT ALLOWED\n"	pointer
)	O
)	O
;	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
osip_via_param_get_byname	O
(	O
topvia_response	pointer
,	O
"branch"	pointer
,	O
&	O
b_response	pointer
)	O
;	O
if	O
(	O
b_response	pointer
==	O
NULL	O
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_BUG	O
,	O
NULL	O
,	O
"Remote UA is not compliant: missing a branch parameter in  Via header!\n"	pointer
)	O
)	O
;	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
if	O
(	O
(	O
b_request	pointer
->	O
gvalue	pointer
==	O
NULL	O
)	O
||	O
(	O
b_response	pointer
->	O
gvalue	pointer
==	O
NULL	O
)	O
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_BUG	O
,	O
NULL	O
,	O
"Remote UA is not compliant: missing a branch parameter in  Via header!\n"	pointer
)	O
)	O
;	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
if	O
(	O
0	int
!=	O
strcmp	function
(	O
b_request	pointer
->	O
gvalue	pointer
,	O
b_response	pointer
->	O
gvalue	pointer
)	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
if	O
(	O
0	int
==	O
strcmp	function
(	O
response	pointer
->	O
cseq	pointer
->	O
method	pointer
,	O
tr	pointer
->	O
cseq	pointer
->	O
method	pointer
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
}	O
int	O
__osip_transaction_matching_request_osip_to_xist_17_2_3	function
(	O
osip_transaction_t	struct
*	O
tr	pointer
,	O
osip_message_t	struct
*	O
request	pointer
)	O
{	O
osip_generic_param_t	struct
*	O
b_origrequest	pointer
;	O
osip_generic_param_t	struct
*	O
b_request	pointer
;	O
osip_via_t	struct
*	O
topvia_request	pointer
;	O
size_t	long
length_br	long
;	O
size_t	long
length_br2	long
;	O
if	O
(	O
tr	pointer
==	O
NULL	O
||	O
(	O
tr	pointer
->	O
ist_context	pointer
==	O
NULL	O
&&	O
tr	pointer
->	O
nist_context	pointer
==	O
NULL	O
)	O
||	O
request	pointer
==	O
NULL	O
||	O
request	pointer
->	O
cseq	pointer
==	O
NULL	O
||	O
request	pointer
->	O
cseq	pointer
->	O
method	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
topvia_request	pointer
=	O
osip_list_get	function
(	O
&	O
request	pointer
->	O
vias	struct
,	O
0	int
)	O
;	O
if	O
(	O
topvia_request	pointer
==	O
NULL	O
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_ERROR	O
,	O
NULL	O
,	O
"Remote UA is not compliant: missing a Via header!\n"	pointer
)	O
)	O
;	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
osip_via_param_get_byname	O
(	O
topvia_request	pointer
,	O
"branch"	pointer
,	O
&	O
b_request	pointer
)	O
;	O
osip_via_param_get_byname	O
(	O
tr	pointer
->	O
topvia	pointer
,	O
"branch"	pointer
,	O
&	O
b_origrequest	pointer
)	O
;	O
if	O
(	O
(	O
b_origrequest	pointer
==	O
NULL	O
&&	O
b_request	pointer
!=	O
NULL	O
)	O
||	O
(	O
b_origrequest	pointer
!=	O
NULL	O
&&	O
b_request	pointer
==	O
NULL	O
)	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
if	O
(	O
b_origrequest	pointer
!=	O
NULL	O
&&	O
b_request	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
b_origrequest	pointer
->	O
gvalue	pointer
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
if	O
(	O
!	O
b_request	pointer
->	O
gvalue	pointer
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
length_br	long
=	O
strlen	function
(	O
b_origrequest	pointer
->	O
gvalue	pointer
)	O
;	O
length_br2	long
=	O
strlen	function
(	O
b_request	pointer
->	O
gvalue	pointer
)	O
;	O
if	O
(	O
length_br	long
!=	O
length_br2	long
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
if	O
(	O
0	int
==	O
strncmp	function
(	O
b_origrequest	pointer
->	O
gvalue	pointer
,	O
"z9hG4bK"	pointer
,	O
7	int
)	O
&&	O
0	int
==	O
strncmp	function
(	O
b_request	pointer
->	O
gvalue	pointer
,	O
"z9hG4bK"	pointer
,	O
7	int
)	O
)	O
{	O
if	O
(	O
0	int
!=	O
strcmp	function
(	O
b_origrequest	pointer
->	O
gvalue	pointer
,	O
b_request	pointer
->	O
gvalue	pointer
)	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
{	O
char	O
*	O
b_port	pointer
=	O
via_get_port	function
(	O
topvia_request	pointer
)	O
;	O
char	O
*	O
b_origport	pointer
=	O
via_get_port	function
(	O
tr	pointer
->	O
topvia	pointer
)	O
;	O
char	O
*	O
b_host	pointer
=	O
via_get_host	function
(	O
topvia_request	pointer
)	O
;	O
char	O
*	O
b_orighost	pointer
=	O
via_get_host	function
(	O
tr	pointer
->	O
topvia	pointer
)	O
;	O
if	O
(	O
(	O
b_host	pointer
==	O
NULL	O
||	O
b_orighost	pointer
==	O
NULL	O
)	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
if	O
(	O
0	int
!=	O
strcmp	function
(	O
b_orighost	pointer
,	O
b_host	pointer
)	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
if	O
(	O
b_port	pointer
!=	O
NULL	O
&&	O
b_origport	pointer
==	O
NULL	O
&&	O
0	int
!=	O
strcmp	function
(	O
b_port	pointer
,	O
"5060"	pointer
)	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
else	O
if	O
(	O
b_origport	pointer
!=	O
NULL	O
&&	O
b_port	pointer
==	O
NULL	O
&&	O
0	int
!=	O
strcmp	function
(	O
b_origport	pointer
,	O
"5060"	pointer
)	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
else	O
if	O
(	O
b_origport	pointer
!=	O
NULL	O
&&	O
b_port	pointer
!=	O
NULL	O
&&	O
0	int
!=	O
strcmp	function
(	O
b_origport	pointer
,	O
b_port	pointer
)	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
}	O
if	O
(	O
(	O
!	O
(	O
0	int
==	O
strcmp	function
(	O
tr	pointer
->	O
cseq	pointer
->	O
method	pointer
,	O
"INVITE"	pointer
)	O
&&	O
0	int
==	O
strcmp	function
(	O
request	pointer
->	O
cseq	pointer
->	O
method	pointer
,	O
"ACK"	pointer
)	O
)	O
)	O
&&	O
0	int
!=	O
strcmp	function
(	O
tr	pointer
->	O
cseq	pointer
->	O
method	pointer
,	O
request	pointer
->	O
cseq	pointer
->	O
method	pointer
)	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
}	O
if	O
(	O
0	int
!=	O
osip_call_id_match	function
(	O
tr	pointer
->	O
callid	pointer
,	O
request	pointer
->	O
call_id	pointer
)	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
if	O
(	O
MSG_IS_ACK	O
(	O
request	pointer
)	O
)	O
{	O
osip_generic_param_t	struct
*	O
tag_from1	pointer
;	O
osip_generic_param_t	struct
*	O
tag_from2	pointer
;	O
osip_from_param_get_byname	O
(	O
tr	pointer
->	O
to	pointer
,	O
"tag"	pointer
,	O
&	O
tag_from1	pointer
)	O
;	O
osip_from_param_get_byname	O
(	O
request	pointer
->	O
to	pointer
,	O
"tag"	pointer
,	O
&	O
tag_from2	pointer
)	O
;	O
if	O
(	O
tag_from1	pointer
==	O
NULL	O
&&	O
tag_from2	pointer
!=	O
NULL	O
)	O
{	O
}	O
else	O
if	O
(	O
tag_from1	pointer
!=	O
NULL	O
&&	O
tag_from2	pointer
==	O
NULL	O
)	O
{	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
}	O
else	O
{	O
if	O
(	O
0	int
!=	O
osip_to_tag_match	function
(	O
tr	pointer
->	O
to	pointer
,	O
request	pointer
->	O
to	pointer
)	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
tr	pointer
->	O
orig_request	pointer
==	O
NULL	O
||	O
tr	pointer
->	O
orig_request	pointer
->	O
to	pointer
==	O
NULL	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
if	O
(	O
0	int
!=	O
osip_to_tag_match	function
(	O
tr	pointer
->	O
orig_request	pointer
->	O
to	pointer
,	O
request	pointer
->	O
to	pointer
)	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
}	O
if	O
(	O
0	int
!=	O
osip_from_tag_match	function
(	O
tr	pointer
->	O
from	pointer
,	O
request	pointer
->	O
from	pointer
)	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
if	O
(	O
0	int
!=	O
osip_cseq_match	function
(	O
tr	pointer
->	O
cseq	pointer
,	O
request	pointer
->	O
cseq	pointer
)	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
if	O
(	O
0	int
!=	O
osip_via_match	function
(	O
tr	pointer
->	O
topvia	pointer
,	O
topvia_request	pointer
)	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
osip_event_t	struct
*	O
__osip_transaction_need_timer_x_event	function
(	O
void	O
*	O
xixt	pointer
,	O
struct	O
timeval	struct
*	O
timer	pointer
,	O
int	O
cond_state	int
,	O
int	O
transactionid	int
,	O
int	O
TIMER_VAL	int
)	O
{	O
struct	O
timeval	struct
now	struct
;	O
osip_gettimeofday	function
(	O
&	O
now	struct
,	O
NULL	O
)	O
;	O
if	O
(	O
xixt	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
cond_state	int
)	O
{	O
if	O
(	O
timer	pointer
->	O
tv_sec	long
==	O
-	O
1	int
)	O
return	O
NULL	O
;	O
if	O
(	O
osip_timercmp	O
(	O
&	O
now	struct
,	O
timer	pointer
,	O
>	O
)	O
)	O
return	O
__osip_event_new	function
(	O
TIMER_VAL	int
,	O
transactionid	int
)	O
;	O
}	O
return	O
NULL	O
;	O
}	O
int	O
__osip_transaction_snd_xxx	function
(	O
osip_transaction_t	struct
*	O
ist	pointer
,	O
osip_message_t	struct
*	O
msg	pointer
)	O
{	O
osip_t	struct
*	O
osip	struct
=	O
(	O
osip_t	struct
*	O
)	O
ist	pointer
->	O
config	pointer
;	O
osip_via_t	struct
*	O
via	pointer
;	O
char	O
*	O
host	pointer
;	O
int	O
port	pointer
;	O
osip_generic_param_t	struct
*	O
maddr	pointer
;	O
osip_generic_param_t	struct
*	O
received	pointer
;	O
osip_generic_param_t	struct
*	O
rport	pointer
;	O
via	pointer
=	O
(	O
osip_via_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
msg	pointer
->	O
vias	struct
,	O
0	int
)	O
;	O
if	O
(	O
!	O
via	pointer
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
osip_via_param_get_byname	O
(	O
via	pointer
,	O
"maddr"	pointer
,	O
&	O
maddr	pointer
)	O
;	O
osip_via_param_get_byname	O
(	O
via	pointer
,	O
"received"	pointer
,	O
&	O
received	pointer
)	O
;	O
osip_via_param_get_byname	O
(	O
via	pointer
,	O
"rport"	pointer
,	O
&	O
rport	pointer
)	O
;	O
if	O
(	O
maddr	pointer
!=	O
NULL	O
)	O
host	pointer
=	O
maddr	pointer
->	O
gvalue	pointer
;	O
else	O
if	O
(	O
received	pointer
!=	O
NULL	O
)	O
host	pointer
=	O
received	pointer
->	O
gvalue	pointer
;	O
else	O
host	pointer
=	O
via	pointer
->	O
host	pointer
;	O
if	O
(	O
rport	pointer
==	O
NULL	O
||	O
rport	pointer
->	O
gvalue	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
via	pointer
->	O
port	pointer
!=	O
NULL	O
)	O
port	pointer
=	O
osip_atoi	function
(	O
via	pointer
->	O
port	pointer
)	O
;	O
else	O
port	pointer
=	O
5060	int
;	O
}	O
else	O
port	pointer
=	O
osip_atoi	function
(	O
rport	pointer
->	O
gvalue	pointer
)	O
;	O
return	O
osip	struct
->	O
cb_send_message	pointer
(	O
ist	pointer
,	O
msg	pointer
,	O
host	pointer
,	O
port	pointer
,	O
ist	pointer
->	O
out_socket	int
)	O
;	O
}	O
