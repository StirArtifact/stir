static	O
size_t	long
_GL_ATTRIBUTE_PURE	O
string_hash	function
(	O
const	O
void	O
*	O
x	pointer
)	O
{	O
const	O
char	O
*	O
s	pointer
=	O
(	O
const	O
char	O
*	O
)	O
x	pointer
;	O
size_t	long
h	long
=	O
0	int
;	O
for	O
(	O
;	O
*	O
s	pointer
;	O
s	pointer
++	O
)	O
h	long
=	O
*	O
s	pointer
+	O
(	O
(	O
h	long
<<	O
9	int
)	O
|	O
(	O
h	long
>>	O
(	O
SIZE_BITS	O
-	O
9	int
)	O
)	O
)	O
;	O
return	O
h	long
;	O
}	O
struct	O
struniq_hash_node	struct
{	O
struct	O
struniq_hash_node	struct
*	O
volatile	O
next	pointer
;	O
char	O
contents	array
[	O
FLEXIBLE_ARRAY_MEMBER	O
]	O
;	O
}	O
;	O
static	O
struct	O
struniq_hash_node	struct
*	O
volatile	O
struniq_hash_table	array
[	O
STRUNIQ_HASH_TABLE_SIZE	int
]	O
;	O
gl_lock_define_initialized	O
(	O
static	O
,	O
struniq_lock	union
)	O
static	O
const	O
char	O
*	O
struniq	function
(	O
const	O
char	O
*	O
string	pointer
)	O
{	O
size_t	long
hashcode	long
=	O
string_hash	function
(	O
string	pointer
)	O
;	O
size_t	long
slot	long
=	O
hashcode	long
%	O
STRUNIQ_HASH_TABLE_SIZE	int
;	O
size_t	long
size	long
;	O
struct	O
struniq_hash_node	struct
*	O
new_node	pointer
;	O
struct	O
struniq_hash_node	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
struniq_hash_table	array
[	O
slot	long
]	O
;	O
p	pointer
!=	O
NULL	O
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
if	O
(	O
strcmp	function
(	O
p	pointer
->	O
contents	array
,	O
string	pointer
)	O
==	O
0	int
)	O
return	O
p	pointer
->	O
contents	array
;	O
size	long
=	O
strlen	function
(	O
string	pointer
)	O
+	O
1	int
;	O
new_node	pointer
=	O
(	O
struct	O
struniq_hash_node	struct
*	O
)	O
malloc	function
(	O
FLEXSIZEOF	O
(	O
struct	O
struniq_hash_node	struct
,	O
contents	array
,	O
size	long
)	O
)	O
;	O
if	O
(	O
new_node	pointer
==	O
NULL	O
)	O
return	O
"C"	pointer
;	O
memcpy	function
(	O
new_node	pointer
->	O
contents	array
,	O
string	pointer
,	O
size	long
)	O
;	O
gl_lock_lock	O
(	O
struniq_lock	union
)	O
;	O
for	O
(	O
p	pointer
=	O
struniq_hash_table	array
[	O
slot	long
]	O
;	O
p	pointer
!=	O
NULL	O
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
if	O
(	O
strcmp	function
(	O
p	pointer
->	O
contents	array
,	O
string	pointer
)	O
==	O
0	int
)	O
{	O
free	function
(	O
new_node	pointer
)	O
;	O
new_node	pointer
=	O
p	pointer
;	O
goto	O
done	O
;	O
}	O
new_node	pointer
->	O
next	pointer
=	O
struniq_hash_table	array
[	O
slot	long
]	O
;	O
struniq_hash_table	array
[	O
slot	long
]	O
=	O
new_node	pointer
;	O
done	O
:	O
gl_lock_unlock	O
(	O
struniq_lock	union
)	O
;	O
return	O
new_node	pointer
->	O
contents	array
;	O
}	O
static	O
const	O
char	O
*	O
gl_locale_name_thread_unsafe	function
(	O
int	O
category	int
,	O
const	O
char	O
*	O
categoryname	pointer
)	O
{	O
{	O
locale_t	pointer
thread_locale	pointer
=	O
uselocale	function
(	O
NULL	O
)	O
;	O
if	O
(	O
thread_locale	pointer
!=	O
LC_GLOBAL_LOCALE	O
)	O
{	O
const	O
char	O
*	O
name	pointer
=	O
nl_langinfo	function
(	O
_NL_ITEM	O
(	O
(	O
category	int
)	O
,	O
_NL_ITEM_INDEX	O
(	O
-	O
1	int
)	O
)	O
)	O
;	O
if	O
(	O
name	pointer
[	O
0	int
]	O
==	O
'\0'	O
)	O
name	pointer
=	O
thread_locale	pointer
->	O
__names	array
[	O
category	int
]	O
;	O
return	O
name	pointer
;	O
}	O
}	O
return	O
NULL	O
;	O
}	O
const	O
char	O
*	O
gl_locale_name_thread	function
(	O
int	O
category	int
,	O
const	O
char	O
*	O
categoryname	pointer
)	O
{	O
const	O
char	O
*	O
name	pointer
=	O
gl_locale_name_thread_unsafe	function
(	O
category	int
,	O
categoryname	pointer
)	O
;	O
if	O
(	O
name	pointer
!=	O
NULL	O
)	O
return	O
struniq	function
(	O
name	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
const	O
char	O
*	O
gl_locale_name_posix	function
(	O
int	O
category	int
,	O
const	O
char	O
*	O
categoryname	pointer
)	O
{	O
{	O
const	O
char	O
*	O
locname	pointer
;	O
locname	pointer
=	O
setlocale	function
(	O
category	int
,	O
NULL	O
)	O
;	O
return	O
locname	pointer
;	O
}	O
}	O
const	O
char	O
*	O
gl_locale_name_environ	function
(	O
int	O
category	int
,	O
const	O
char	O
*	O
categoryname	pointer
)	O
{	O
const	O
char	O
*	O
retval	pointer
;	O
retval	pointer
=	O
getenv	function
(	O
"LC_ALL"	pointer
)	O
;	O
if	O
(	O
retval	pointer
!=	O
NULL	O
&&	O
retval	pointer
[	O
0	int
]	O
!=	O
'\0'	O
)	O
return	O
retval	pointer
;	O
retval	pointer
=	O
getenv	function
(	O
categoryname	pointer
)	O
;	O
if	O
(	O
retval	pointer
!=	O
NULL	O
&&	O
retval	pointer
[	O
0	int
]	O
!=	O
'\0'	O
)	O
return	O
retval	pointer
;	O
retval	pointer
=	O
getenv	function
(	O
"LANG"	pointer
)	O
;	O
if	O
(	O
retval	pointer
!=	O
NULL	O
&&	O
retval	pointer
[	O
0	int
]	O
!=	O
'\0'	O
)	O
{	O
return	O
retval	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
const	O
char	O
*	O
gl_locale_name_default	function
(	O
void	O
)	O
{	O
return	O
"C"	pointer
;	O
}	O
const	O
char	O
*	O
gl_locale_name	function
(	O
int	O
category	int
,	O
const	O
char	O
*	O
categoryname	pointer
)	O
{	O
const	O
char	O
*	O
retval	pointer
;	O
retval	pointer
=	O
gl_locale_name_thread	function
(	O
category	int
,	O
categoryname	pointer
)	O
;	O
if	O
(	O
retval	pointer
!=	O
NULL	O
)	O
return	O
retval	pointer
;	O
retval	pointer
=	O
gl_locale_name_posix	function
(	O
category	int
,	O
categoryname	pointer
)	O
;	O
if	O
(	O
retval	pointer
!=	O
NULL	O
)	O
return	O
retval	pointer
;	O
return	O
gl_locale_name_default	function
(	O
)	O
;	O
}	O
