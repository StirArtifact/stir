void	O
mmount	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
type	enum
UNUSEDP	O
)	O
NORETURN	O
;	O
void	O
mmount	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
type	enum
UNUSEDP	O
)	O
{	O
char	O
drive	char
;	O
int	O
pid	int
;	O
int	O
status	int
;	O
struct	O
device	struct
dev	pointer
;	O
char	O
name	pointer
[	O
EXPAND_BUF	int
]	O
;	O
int	O
media	char
;	O
union	O
bootsector	union
boot	struct
;	O
Stream_t	struct
*	O
Stream	pointer
;	O
if	O
(	O
argc	int
<	O
2	int
||	O
!	O
argv	pointer
[	O
1	int
]	O
[	O
0	int
]	O
||	O
argv	pointer
[	O
1	int
]	O
[	O
1	int
]	O
!=	O
':'	O
||	O
argv	pointer
[	O
1	int
]	O
[	O
2	int
]	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Usage: %s -V drive:\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
drive	char
=	O
ch_toupper	function
(	O
argv	pointer
[	O
1	int
]	O
[	O
0	int
]	O
)	O
;	O
Stream	pointer
=	O
find_device	function
(	O
drive	char
,	O
O_RDONLY	int
,	O
&	O
dev	pointer
,	O
&	O
boot	struct
,	O
name	pointer
,	O
&	O
media	char
,	O
0	int
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
Stream	pointer
)	O
exit	function
(	O
1	int
)	O
;	O
FREE	O
(	O
&	O
Stream	pointer
)	O
;	O
destroy_privs	function
(	O
)	O
;	O
if	O
(	O
dev	pointer
.	O
partition	int
)	O
{	O
char	O
part_name	array
[	O
4	int
]	O
;	O
sprintf	function
(	O
part_name	array
,	O
"%d"	pointer
,	O
dev	pointer
.	O
partition	int
%	O
1000	int
)	O
;	O
strcat	function
(	O
name	pointer
,	O
part_name	array
)	O
;	O
}	O
switch	O
(	O
(	O
pid	int
=	O
fork	function
(	O
)	O
)	O
)	O
{	O
case	O
-	O
1	int
:	O
fprintf	function
(	O
stderr	pointer
,	O
"fork failed\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
case	O
0	int
:	O
close	pointer
(	O
2	int
)	O
;	O
open	function
(	O
"/dev/null"	pointer
,	O
O_RDWR	int
|	O
O_BINARY	int
|	O
O_LARGEFILE	O
)	O
;	O
argv	pointer
[	O
1	int
]	O
=	O
strdup	function
(	O
"mount"	pointer
)	O
;	O
if	O
(	O
argc	int
>	O
2	int
)	O
execvp	function
(	O
"mount"	pointer
,	O
argv	pointer
+	O
1	int
)	O
;	O
else	O
execlp	function
(	O
"mount"	pointer
,	O
"mount"	pointer
,	O
name	pointer
,	O
NULL	O
)	O
;	O
perror	function
(	O
"exec mount"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
default	O
:	O
while	O
(	O
wait	function
(	O
&	O
status	int
)	O
!=	O
pid	int
)	O
;	O
}	O
if	O
(	O
WEXITSTATUS	O
(	O
status	int
)	O
==	O
0	int
)	O
exit	function
(	O
0	int
)	O
;	O
argv	pointer
[	O
0	int
]	O
=	O
strdup	function
(	O
"mount"	pointer
)	O
;	O
argv	pointer
[	O
1	int
]	O
=	O
strdup	function
(	O
"-r"	pointer
)	O
;	O
if	O
(	O
!	O
argv	pointer
[	O
0	int
]	O
||	O
!	O
argv	pointer
[	O
1	int
]	O
)	O
{	O
printOom	function
(	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
argc	int
>	O
2	int
)	O
execvp	function
(	O
"mount"	pointer
,	O
argv	pointer
)	O
;	O
else	O
execlp	function
(	O
"mount"	pointer
,	O
"mount"	pointer
,	O
"-r"	pointer
,	O
name	pointer
,	O
NULL	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
