void	O
vgprintf	function
(	O
FILE	struct
*	O
outputfile	pointer
,	O
const	O
char	O
*	O
fmt	pointer
,	O
va_list	array
ap	array
)	O
{	O
if	O
(	O
fmt	pointer
[	O
0	int
]	O
==	O
'%'	O
&&	O
fmt	pointer
[	O
1	int
]	O
==	O
'o'	O
)	O
fmt	pointer
+=	O
2	int
;	O
else	O
if	O
(	O
stackp	int
>	O
0	int
)	O
fprintf	function
(	O
outputfile	pointer
,	O
"%.*s"	pointer
,	O
stackp	int
*	O
2	int
,	O
"                                "	pointer
)	O
;	O
for	O
(	O
;	O
*	O
fmt	pointer
;	O
++	O
fmt	pointer
)	O
{	O
if	O
(	O
*	O
fmt	pointer
==	O
'%'	O
)	O
{	O
switch	O
(	O
*	O
++	O
fmt	pointer
)	O
{	O
case	O
'c'	O
:	O
{	O
int	O
c	char
=	O
va_arg	O
(	O
ap	array
,	O
int	O
)	O
;	O
putc	function
(	O
c	char
,	O
outputfile	pointer
)	O
;	O
break	O
;	O
}	O
case	O
'd'	O
:	O
{	O
int	O
d	int
=	O
va_arg	O
(	O
ap	array
,	O
int	O
)	O
;	O
fprintf	function
(	O
outputfile	pointer
,	O
"%d"	pointer
,	O
d	int
)	O
;	O
break	O
;	O
}	O
case	O
'x'	O
:	O
{	O
unsigned	O
int	O
d	int
=	O
va_arg	O
(	O
ap	array
,	O
unsigned	O
int	O
)	O
;	O
fprintf	function
(	O
outputfile	pointer
,	O
"%x"	pointer
,	O
d	int
)	O
;	O
break	O
;	O
}	O
case	O
'f'	O
:	O
{	O
double	O
f	pointer
=	O
va_arg	O
(	O
ap	array
,	O
double	O
)	O
;	O
fprintf	function
(	O
outputfile	pointer
,	O
"%.2f"	pointer
,	O
f	pointer
)	O
;	O
break	O
;	O
}	O
case	O
's'	O
:	O
{	O
char	O
*	O
s	pointer
=	O
va_arg	O
(	O
ap	array
,	O
char	O
*	O
)	O
;	O
fputs	function
(	O
s	pointer
,	O
outputfile	pointer
)	O
;	O
break	O
;	O
}	O
case	O
'2'	O
:	O
fmt	pointer
++	O
;	O
if	O
(	O
*	O
fmt	pointer
!=	O
'm'	O
&&	O
*	O
fmt	pointer
!=	O
'M'	O
)	O
{	O
fprintf	function
(	O
outputfile	pointer
,	O
"\n\nUnknown format string '2%c'\n"	pointer
,	O
*	O
fmt	pointer
)	O
;	O
break	O
;	O
}	O
case	O
'm'	O
:	O
case	O
'M'	O
:	O
{	O
char	O
movename	array
[	O
4	int
]	O
;	O
int	O
m	int
=	O
va_arg	O
(	O
ap	array
,	O
int	O
)	O
;	O
int	O
n	int
=	O
va_arg	O
(	O
ap	array
,	O
int	O
)	O
;	O
if	O
(	O
m	int
==	O
-	O
1	int
&&	O
n	int
==	O
-	O
1	int
)	O
fputs	function
(	O
"PASS"	pointer
,	O
outputfile	pointer
)	O
;	O
else	O
if	O
(	O
!	O
ON_BOARD2	O
(	O
m	int
,	O
n	int
)	O
)	O
fprintf	function
(	O
outputfile	pointer
,	O
"[%d,%d]"	pointer
,	O
m	int
,	O
n	int
)	O
;	O
else	O
{	O
if	O
(	O
n	int
<	O
8	int
)	O
movename	array
[	O
0	int
]	O
=	O
n	int
+	O
65	int
;	O
else	O
movename	array
[	O
0	int
]	O
=	O
n	int
+	O
66	int
;	O
if	O
(	O
*	O
fmt	pointer
==	O
'm'	O
)	O
sprintf	function
(	O
movename	array
+	O
1	int
,	O
"%d"	pointer
,	O
board_size	int
-	O
m	int
)	O
;	O
else	O
sprintf	function
(	O
movename	array
+	O
1	int
,	O
"%-2d"	pointer
,	O
board_size	int
-	O
m	int
)	O
;	O
fputs	function
(	O
movename	array
,	O
outputfile	pointer
)	O
;	O
}	O
break	O
;	O
}	O
case	O
'1'	O
:	O
fmt	pointer
++	O
;	O
if	O
(	O
*	O
fmt	pointer
!=	O
'm'	O
&&	O
*	O
fmt	pointer
!=	O
'M'	O
)	O
{	O
fprintf	function
(	O
outputfile	pointer
,	O
"\n\nUnknown format string '1%c'\n"	pointer
,	O
*	O
fmt	pointer
)	O
;	O
break	O
;	O
}	O
else	O
{	O
char	O
movename	array
[	O
4	int
]	O
;	O
int	O
pos	int
=	O
va_arg	O
(	O
ap	array
,	O
int	O
)	O
;	O
int	O
m	int
=	O
I	O
(	O
pos	int
)	O
;	O
int	O
n	int
=	O
J	O
(	O
pos	int
)	O
;	O
if	O
(	O
pos	int
==	O
NO_MOVE	O
)	O
fputs	function
(	O
"PASS"	pointer
,	O
outputfile	pointer
)	O
;	O
else	O
if	O
(	O
!	O
ON_BOARD1	O
(	O
pos	int
)	O
)	O
fprintf	function
(	O
outputfile	pointer
,	O
"[%d]"	pointer
,	O
pos	int
)	O
;	O
else	O
{	O
if	O
(	O
n	int
<	O
8	int
)	O
movename	array
[	O
0	int
]	O
=	O
n	int
+	O
65	int
;	O
else	O
movename	array
[	O
0	int
]	O
=	O
n	int
+	O
66	int
;	O
if	O
(	O
*	O
fmt	pointer
==	O
'm'	O
)	O
sprintf	function
(	O
movename	array
+	O
1	int
,	O
"%d"	pointer
,	O
board_size	int
-	O
m	int
)	O
;	O
else	O
sprintf	function
(	O
movename	array
+	O
1	int
,	O
"%-2d"	pointer
,	O
board_size	int
-	O
m	int
)	O
;	O
fputs	function
(	O
movename	array
,	O
outputfile	pointer
)	O
;	O
}	O
break	O
;	O
}	O
case	O
'H'	O
:	O
{	O
unsigned	O
long	O
h	long
=	O
va_arg	O
(	O
ap	array
,	O
unsigned	O
long	O
)	O
;	O
fprintf	function
(	O
outputfile	pointer
,	O
"%lx"	pointer
,	O
h	long
)	O
;	O
break	O
;	O
}	O
case	O
'C'	O
:	O
{	O
int	O
color	int
=	O
va_arg	O
(	O
ap	array
,	O
int	O
)	O
;	O
fputs	function
(	O
color_to_string	function
(	O
color	int
)	O
,	O
outputfile	pointer
)	O
;	O
break	O
;	O
}	O
default	O
:	O
fprintf	function
(	O
outputfile	pointer
,	O
"\n\nUnknown format character '%c'\n"	pointer
,	O
*	O
fmt	pointer
)	O
;	O
break	O
;	O
}	O
}	O
else	O
putc	function
(	O
*	O
fmt	pointer
,	O
outputfile	pointer
)	O
;	O
}	O
}	O
void	O
gfprintf	function
(	O
FILE	struct
*	O
outfile	pointer
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
vgprintf	function
(	O
outfile	pointer
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
int	O
gprintf	function
(	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
vgprintf	function
(	O
stderr	pointer
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
return	O
1	int
;	O
}	O
void	O
mprintf	function
(	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
vgprintf	function
(	O
stdout	pointer
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
static	O
void	O
dump_board_sgf	function
(	O
void	O
)	O
{	O
int	O
pos	int
;	O
int	O
initial_colors_found	int
=	O
EMPTY	int
;	O
int	O
color	int
;	O
int	O
k	int
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
if	O
(	O
ON_BOARD	O
(	O
pos	int
)	O
)	O
initial_colors_found	int
|=	O
initial_board	array
[	O
pos	int
]	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"(;GM[1]FF[4]SZ[%d]KM[%.1f]HA[%d]GN[GNU Go %s stepped on a bug]\n"	pointer
,	O
board_size	int
,	O
komi	float
,	O
handicap	int
,	O
gg_version	function
(	O
)	O
)	O
;	O
for	O
(	O
color	int
=	O
WHITE	int
;	O
color	int
<=	O
BLACK	int
;	O
color	int
++	O
)	O
{	O
if	O
(	O
initial_colors_found	int
&	O
color	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"A%s"	pointer
,	O
color	int
==	O
WHITE	int
?	O
"W"	pointer
:	O
"B"	pointer
)	O
;	O
for	O
(	O
k	int
=	O
0	int
,	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
ON_BOARD	O
(	O
pos	int
)	O
&&	O
initial_board	array
[	O
pos	int
]	O
==	O
color	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"[%c%c]"	pointer
,	O
'a'	O
+	O
J	O
(	O
pos	int
)	O
,	O
'a'	O
+	O
I	O
(	O
pos	int
)	O
)	O
;	O
k	int
++	O
;	O
if	O
(	O
k	int
%	O
16	int
==	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
}	O
if	O
(	O
k	int
%	O
16	int
!=	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
}	O
if	O
(	O
move_history_pointer	int
>	O
0	int
)	O
{	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
move_history_pointer	int
;	O
k	int
++	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
";%s"	pointer
,	O
move_history_color	array
[	O
k	int
]	O
==	O
WHITE	int
?	O
"W"	pointer
:	O
"B"	pointer
)	O
;	O
if	O
(	O
move_history_pos	array
[	O
k	int
]	O
==	O
PASS_MOVE	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"[]"	pointer
)	O
;	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
"[%c%c]"	pointer
,	O
'a'	O
+	O
J	O
(	O
move_history_pos	array
[	O
k	int
]	O
)	O
,	O
'a'	O
+	O
I	O
(	O
move_history_pos	array
[	O
k	int
]	O
)	O
)	O
;	O
if	O
(	O
k	int
%	O
12	int
==	O
11	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
if	O
(	O
k	int
%	O
12	int
!=	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
fprintf	function
(	O
stderr	pointer
,	O
")\n"	pointer
)	O
;	O
}	O
void	O
abortgo	function
(	O
const	O
char	O
*	O
file	pointer
,	O
int	O
line	int
,	O
const	O
char	O
*	O
msg	pointer
,	O
int	O
pos	int
)	O
{	O
gprintf	function
(	O
"%o\n\n***assertion failure:\n%s:%d - %s near %1m***\n\n"	pointer
,	O
file	pointer
,	O
line	int
,	O
msg	pointer
,	O
pos	int
)	O
;	O
dump_stack	function
(	O
)	O
;	O
simple_showboard	function
(	O
stderr	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
dump_board_sgf	function
(	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"gnugo %s (seed %d): You stepped on a bug.\n"	pointer
,	O
gg_version	function
(	O
)	O
,	O
get_random_seed	function
(	O
)	O
)	O
;	O
if	O
(	O
board_size	int
>=	O
9	int
&&	O
board_size	int
<=	O
19	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Please mail this message, including the debug output above, to gnugo@gnu.org\n"	pointer
)	O
;	O
}	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
fflush	function
(	O
stderr	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
static	O
const	O
char	O
*	O
color_names	array
[	O
]	O
=	O
{	O
COLOR_NAMES	O
}	O
;	O
const	O
char	O
*	O
color_to_string	function
(	O
int	O
color	int
)	O
{	O
gg_assert	O
(	O
color	int
<	O
NUM_KOMASTER_STATES	int
)	O
;	O
return	O
color_names	array
[	O
color	int
]	O
;	O
}	O
const	O
char	O
*	O
location_to_string	function
(	O
int	O
pos	int
)	O
{	O
static	O
int	O
init	int
=	O
0	int
;	O
static	O
char	O
buf	pointer
[	O
BOARDSIZE	O
]	O
[	O
5	int
]	O
;	O
if	O
(	O
!	O
init	int
)	O
{	O
int	O
pos	int
;	O
for	O
(	O
pos	int
=	O
0	int
;	O
pos	int
<	O
BOARDSIZE	O
;	O
pos	int
++	O
)	O
location_to_buffer	function
(	O
pos	int
,	O
buf	pointer
[	O
pos	int
]	O
)	O
;	O
init	int
=	O
1	int
;	O
}	O
ASSERT1	O
(	O
pos	int
>=	O
0	int
&&	O
pos	int
<	O
BOARDSIZE	O
,	O
pos	int
)	O
;	O
return	O
buf	pointer
[	O
pos	int
]	O
;	O
}	O
void	O
location_to_buffer	function
(	O
int	O
pos	int
,	O
char	O
*	O
buf	pointer
)	O
{	O
char	O
*	O
bufp	pointer
=	O
buf	pointer
;	O
int	O
i	int
=	O
I	O
(	O
pos	int
)	O
;	O
int	O
j	int
=	O
J	O
(	O
pos	int
)	O
;	O
if	O
(	O
pos	int
==	O
NO_MOVE	O
)	O
{	O
strcpy	function
(	O
buf	pointer
,	O
"Pass"	pointer
)	O
;	O
return	O
;	O
}	O
*	O
bufp	pointer
=	O
'A'	O
+	O
j	int
;	O
if	O
(	O
*	O
bufp	pointer
>=	O
'I'	O
)	O
(	O
*	O
bufp	pointer
)	O
++	O
;	O
bufp	pointer
++	O
;	O
i	int
=	O
board_size	int
-	O
i	int
;	O
if	O
(	O
i	int
>	O
9	int
)	O
*	O
bufp	pointer
++	O
=	O
'0'	O
+	O
i	int
/	O
10	int
;	O
*	O
bufp	pointer
++	O
=	O
'0'	O
+	O
i	int
%	O
10	int
;	O
*	O
bufp	pointer
=	O
0	int
;	O
}	O
int	O
string_to_location	function
(	O
int	O
boardsize	int
,	O
const	O
char	O
*	O
str	int
)	O
{	O
int	O
m	int
,	O
n	int
;	O
if	O
(	O
*	O
str	int
==	O
'\0'	O
)	O
return	O
NO_MOVE	O
;	O
if	O
(	O
!	O
isalpha	function
(	O
(	O
int	O
)	O
*	O
str	int
)	O
)	O
return	O
NO_MOVE	O
;	O
n	int
=	O
tolower	function
(	O
(	O
int	O
)	O
*	O
str	int
)	O
-	O
'a'	O
;	O
if	O
(	O
tolower	function
(	O
(	O
int	O
)	O
*	O
str	int
)	O
>=	O
'i'	O
)	O
--	O
n	int
;	O
if	O
(	O
n	int
<	O
0	int
||	O
n	int
>	O
boardsize	int
-	O
1	int
)	O
return	O
NO_MOVE	O
;	O
if	O
(	O
!	O
isdigit	function
(	O
(	O
int	O
)	O
*	O
(	O
str	int
+	O
1	int
)	O
)	O
)	O
return	O
NO_MOVE	O
;	O
m	int
=	O
boardsize	int
-	O
atoi	function
(	O
str	int
+	O
1	int
)	O
;	O
if	O
(	O
m	int
<	O
0	int
||	O
m	int
>	O
boardsize	int
-	O
1	int
)	O
return	O
NO_MOVE	O
;	O
return	O
POS	O
(	O
m	int
,	O
n	int
)	O
;	O
}	O
int	O
is_hoshi_point	function
(	O
int	O
m	int
,	O
int	O
n	int
)	O
{	O
int	O
hoshi	int
;	O
int	O
middle	int
;	O
if	O
(	O
board_size	int
==	O
2	int
||	O
board_size	int
==	O
4	int
)	O
return	O
0	int
;	O
if	O
(	O
board_size	int
==	O
3	int
)	O
{	O
if	O
(	O
m	int
==	O
1	int
&&	O
n	int
==	O
1	int
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
board_size	int
==	O
5	int
)	O
{	O
if	O
(	O
m	int
==	O
1	int
&&	O
(	O
n	int
==	O
1	int
||	O
n	int
==	O
3	int
)	O
)	O
return	O
1	int
;	O
if	O
(	O
m	int
==	O
2	int
&&	O
n	int
==	O
2	int
)	O
return	O
1	int
;	O
if	O
(	O
m	int
==	O
3	int
&&	O
(	O
n	int
==	O
1	int
||	O
n	int
==	O
3	int
)	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
board_size	int
<=	O
11	int
)	O
hoshi	int
=	O
2	int
;	O
else	O
hoshi	int
=	O
3	int
;	O
middle	int
=	O
board_size	int
/	O
2	int
;	O
if	O
(	O
m	int
>=	O
middle	int
)	O
m	int
=	O
board_size	int
-	O
1	int
-	O
m	int
;	O
if	O
(	O
n	int
>=	O
middle	int
)	O
n	int
=	O
board_size	int
-	O
1	int
-	O
n	int
;	O
if	O
(	O
m	int
==	O
hoshi	int
&&	O
n	int
==	O
hoshi	int
)	O
return	O
1	int
;	O
if	O
(	O
board_size	int
%	O
2	int
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
board_size	int
<	O
12	int
)	O
{	O
if	O
(	O
m	int
==	O
middle	int
&&	O
n	int
==	O
middle	int
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
(	O
m	int
==	O
hoshi	int
||	O
m	int
==	O
middle	int
)	O
&&	O
(	O
n	int
==	O
hoshi	int
||	O
n	int
==	O
middle	int
)	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
void	O
draw_letter_coordinates	function
(	O
FILE	struct
*	O
outfile	pointer
)	O
{	O
int	O
i	int
;	O
int	O
ch	int
;	O
fprintf	function
(	O
outfile	pointer
,	O
"  "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
,	O
ch	int
=	O
'A'	O
;	O
i	int
<	O
board_size	int
;	O
i	int
++	O
,	O
ch	int
++	O
)	O
{	O
if	O
(	O
ch	int
==	O
'I'	O
)	O
ch	int
++	O
;	O
fprintf	function
(	O
outfile	pointer
,	O
" %c"	pointer
,	O
ch	int
)	O
;	O
}	O
}	O
void	O
simple_showboard	function
(	O
FILE	struct
*	O
outfile	pointer
)	O
{	O
int	O
i	int
,	O
j	int
;	O
draw_letter_coordinates	function
(	O
outfile	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
board_size	int
;	O
i	int
++	O
)	O
{	O
fprintf	function
(	O
outfile	pointer
,	O
"\n%2d"	pointer
,	O
board_size	int
-	O
i	int
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
board_size	int
;	O
j	int
++	O
)	O
{	O
if	O
(	O
BOARD	O
(	O
i	int
,	O
j	int
)	O
==	O
EMPTY	int
)	O
fprintf	function
(	O
outfile	pointer
,	O
" %c"	pointer
,	O
is_hoshi_point	function
(	O
i	int
,	O
j	int
)	O
?	O
'+'	O
:	O
'.'	O
)	O
;	O
else	O
fprintf	function
(	O
outfile	pointer
,	O
" %c"	pointer
,	O
BOARD	O
(	O
i	int
,	O
j	int
)	O
==	O
BLACK	int
?	O
'X'	O
:	O
'O'	O
)	O
;	O
}	O
fprintf	function
(	O
outfile	pointer
,	O
" %d"	pointer
,	O
board_size	int
-	O
i	int
)	O
;	O
if	O
(	O
(	O
board_size	int
<	O
10	int
&&	O
i	int
==	O
board_size	int
-	O
2	int
)	O
||	O
(	O
board_size	int
>=	O
10	int
&&	O
i	int
==	O
8	int
)	O
)	O
fprintf	function
(	O
outfile	pointer
,	O
"     WHITE (O) has captured %d stones"	pointer
,	O
black_captured	int
)	O
;	O
if	O
(	O
(	O
board_size	int
<	O
10	int
&&	O
i	int
==	O
board_size	int
-	O
1	int
)	O
||	O
(	O
board_size	int
>=	O
10	int
&&	O
i	int
==	O
9	int
)	O
)	O
fprintf	function
(	O
outfile	pointer
,	O
"     BLACK (X) has captured %d stones"	pointer
,	O
white_captured	int
)	O
;	O
}	O
fprintf	function
(	O
outfile	pointer
,	O
"\n"	pointer
)	O
;	O
draw_letter_coordinates	function
(	O
outfile	pointer
)	O
;	O
}	O
void	O
mark_goal_in_sgf	function
(	O
signed	O
char	O
goal	pointer
[	O
BOARDMAX	O
]	O
)	O
{	O
int	O
pos	int
;	O
SGFNode	struct
*	O
node	pointer
;	O
if	O
(	O
!	O
sgf_dumptree	pointer
)	O
return	O
;	O
node	pointer
=	O
sgftreeNodeCheck	function
(	O
sgf_dumptree	pointer
)	O
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
if	O
(	O
ON_BOARD	O
(	O
pos	int
)	O
&&	O
goal	pointer
[	O
pos	int
]	O
)	O
sgfSquare	function
(	O
node	pointer
,	O
I	O
(	O
pos	int
)	O
,	O
J	O
(	O
pos	int
)	O
)	O
;	O
}	O
