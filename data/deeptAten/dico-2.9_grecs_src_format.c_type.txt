const	O
char	O
*	O
grecs_data_type_string	function
(	O
enum	O
grecs_data_type	enum
type	int
)	O
{	O
switch	O
(	O
type	int
)	O
{	O
case	O
grecs_type_void	int
:	O
return	O
"void"	pointer
;	O
case	O
grecs_type_string	int
:	O
return	O
"string"	pointer
;	O
case	O
grecs_type_short	int
:	O
case	O
grecs_type_ushort	int
:	O
case	O
grecs_type_int	int
:	O
case	O
grecs_type_uint	int
:	O
case	O
grecs_type_long	int
:	O
case	O
grecs_type_ulong	int
:	O
case	O
grecs_type_size	int
:	O
return	O
"number"	pointer
;	O
case	O
grecs_type_time	int
:	O
return	O
"time"	pointer
;	O
case	O
grecs_type_bool	int
:	O
return	O
"boolean"	pointer
;	O
case	O
grecs_type_ipv4	int
:	O
return	O
"IPv4"	pointer
;	O
case	O
grecs_type_cidr	int
:	O
return	O
"CIDR"	pointer
;	O
case	O
grecs_type_host	int
:	O
return	O
"hostname"	pointer
;	O
case	O
grecs_type_sockaddr	int
:	O
return	O
"sockaddr"	pointer
;	O
case	O
grecs_type_section	int
:	O
return	O
"section"	pointer
;	O
case	O
grecs_type_null	int
:	O
return	O
"null"	pointer
;	O
}	O
return	O
"UNKNOWN?"	pointer
;	O
}	O
static	O
void	O
format_level	function
(	O
unsigned	O
level	int
,	O
FILE	struct
*	O
stream	pointer
)	O
{	O
while	O
(	O
level	int
--	O
)	O
fprintf	function
(	O
stream	pointer
,	O
"  "	pointer
)	O
;	O
}	O
void	O
grecs_print_docstring	function
(	O
const	O
char	O
*	O
docstring	pointer
,	O
unsigned	O
level	int
,	O
FILE	struct
*	O
stream	pointer
)	O
{	O
size_t	long
len	long
=	O
strlen	function
(	O
docstring	pointer
)	O
;	O
int	O
width	int
=	O
78	int
-	O
level	int
*	O
2	int
;	O
if	O
(	O
width	int
<	O
0	int
)	O
{	O
width	int
=	O
78	int
;	O
level	int
=	O
0	int
;	O
}	O
while	O
(	O
len	long
)	O
{	O
size_t	long
seglen	long
;	O
const	O
char	O
*	O
p	pointer
;	O
for	O
(	O
seglen	long
=	O
0	int
,	O
p	pointer
=	O
docstring	pointer
;	O
p	pointer
<	O
docstring	pointer
+	O
width	int
&&	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
'\n'	O
)	O
{	O
seglen	long
=	O
p	pointer
-	O
docstring	pointer
;	O
break	O
;	O
}	O
if	O
(	O
isspace	function
(	O
*	O
p	pointer
)	O
)	O
seglen	long
=	O
p	pointer
-	O
docstring	pointer
;	O
}	O
if	O
(	O
seglen	long
==	O
0	int
||	O
*	O
p	pointer
==	O
0	int
)	O
seglen	long
=	O
p	pointer
-	O
docstring	pointer
;	O
format_level	function
(	O
level	int
,	O
stream	pointer
)	O
;	O
fprintf	function
(	O
stream	pointer
,	O
"# "	pointer
)	O
;	O
fwrite	function
(	O
docstring	pointer
,	O
seglen	long
,	O
1	int
,	O
stream	pointer
)	O
;	O
fputc	function
(	O
'\n'	O
,	O
stream	pointer
)	O
;	O
len	long
-=	O
seglen	long
;	O
docstring	pointer
+=	O
seglen	long
;	O
if	O
(	O
*	O
docstring	pointer
==	O
'\n'	O
)	O
{	O
docstring	pointer
++	O
;	O
len	long
--	O
;	O
}	O
else	O
while	O
(	O
*	O
docstring	pointer
&&	O
isspace	function
(	O
*	O
docstring	pointer
)	O
)	O
{	O
docstring	pointer
++	O
;	O
len	long
--	O
;	O
}	O
}	O
}	O
void	O
grecs_print_simple_statement	function
(	O
struct	O
grecs_keyword	struct
*	O
kwp	pointer
,	O
unsigned	O
level	int
,	O
FILE	struct
*	O
stream	pointer
)	O
{	O
const	O
char	O
*	O
argstr	pointer
;	O
if	O
(	O
kwp	pointer
->	O
flags	int
&	O
GRECS_INAC	int
)	O
grecs_print_docstring	function
(	O
N_	O
(	O
"Disabled;"	pointer
)	O
,	O
level	int
,	O
stream	pointer
)	O
;	O
if	O
(	O
kwp	pointer
->	O
docstring	pointer
)	O
grecs_print_docstring	function
(	O
kwp	pointer
->	O
docstring	pointer
,	O
level	int
,	O
stream	pointer
)	O
;	O
format_level	function
(	O
level	int
,	O
stream	pointer
)	O
;	O
if	O
(	O
kwp	pointer
->	O
argname	pointer
)	O
argstr	pointer
=	O
kwp	pointer
->	O
argname	pointer
;	O
else	O
argstr	pointer
=	O
N_	O
(	O
"arg"	pointer
)	O
;	O
if	O
(	O
strchr	function
(	O
"<["	pointer
,	O
argstr	pointer
[	O
0	int
]	O
)	O
)	O
fprintf	function
(	O
stream	pointer
,	O
"%s %s;\n"	pointer
,	O
kwp	pointer
->	O
ident	pointer
,	O
gettext	function
(	O
argstr	pointer
)	O
)	O
;	O
else	O
if	O
(	O
argstr	pointer
[	O
0	int
]	O
==	O
'\''	O
)	O
fprintf	function
(	O
stream	pointer
,	O
"%s %s;\n"	pointer
,	O
kwp	pointer
->	O
ident	pointer
,	O
argstr	pointer
+	O
1	int
)	O
;	O
else	O
if	O
(	O
strchr	function
(	O
argstr	pointer
,	O
':'	O
)	O
)	O
fprintf	function
(	O
stream	pointer
,	O
"%s <%s>;\n"	pointer
,	O
kwp	pointer
->	O
ident	pointer
,	O
gettext	function
(	O
argstr	pointer
)	O
)	O
;	O
else	O
{	O
fprintf	function
(	O
stream	pointer
,	O
"%s <%s: "	pointer
,	O
kwp	pointer
->	O
ident	pointer
,	O
gettext	function
(	O
argstr	pointer
)	O
)	O
;	O
if	O
(	O
kwp	pointer
->	O
flags	int
&	O
GRECS_LIST	int
)	O
fprintf	function
(	O
stream	pointer
,	O
"list of %s"	pointer
,	O
gettext	function
(	O
grecs_data_type_string	function
(	O
kwp	pointer
->	O
type	int
)	O
)	O
)	O
;	O
else	O
fprintf	function
(	O
stream	pointer
,	O
"%s"	pointer
,	O
gettext	function
(	O
grecs_data_type_string	function
(	O
kwp	pointer
->	O
type	int
)	O
)	O
)	O
;	O
fprintf	function
(	O
stream	pointer
,	O
">;\n"	pointer
)	O
;	O
}	O
}	O
void	O
grecs_print_block_statement	function
(	O
struct	O
grecs_keyword	struct
*	O
kwp	pointer
,	O
unsigned	O
level	int
,	O
FILE	struct
*	O
stream	pointer
)	O
{	O
if	O
(	O
kwp	pointer
->	O
docstring	pointer
)	O
grecs_print_docstring	function
(	O
kwp	pointer
->	O
docstring	pointer
,	O
level	int
,	O
stream	pointer
)	O
;	O
format_level	function
(	O
level	int
,	O
stream	pointer
)	O
;	O
fprintf	function
(	O
stream	pointer
,	O
"%s"	pointer
,	O
kwp	pointer
->	O
ident	pointer
)	O
;	O
if	O
(	O
kwp	pointer
->	O
argname	pointer
)	O
{	O
if	O
(	O
kwp	pointer
->	O
argname	pointer
[	O
0	int
]	O
==	O
'\''	O
)	O
fprintf	function
(	O
stream	pointer
,	O
" %s"	pointer
,	O
kwp	pointer
->	O
argname	pointer
+	O
1	int
)	O
;	O
else	O
fprintf	function
(	O
stream	pointer
,	O
" <%s>"	pointer
,	O
gettext	function
(	O
kwp	pointer
->	O
argname	pointer
)	O
)	O
;	O
}	O
fprintf	function
(	O
stream	pointer
,	O
" {\n"	pointer
)	O
;	O
grecs_print_statement_array	function
(	O
kwp	pointer
->	O
kwd	pointer
,	O
0	int
,	O
level	int
+	O
1	int
,	O
stream	pointer
)	O
;	O
format_level	function
(	O
level	int
,	O
stream	pointer
)	O
;	O
fprintf	function
(	O
stream	pointer
,	O
"}\n"	pointer
)	O
;	O
}	O
void	O
grecs_print_statement_array	function
(	O
struct	O
grecs_keyword	struct
*	O
kwp	pointer
,	O
unsigned	O
n	long
,	O
unsigned	O
level	int
,	O
FILE	struct
*	O
stream	pointer
)	O
{	O
if	O
(	O
!	O
kwp	pointer
)	O
{	O
return	O
;	O
}	O
for	O
(	O
;	O
kwp	pointer
->	O
ident	pointer
;	O
kwp	pointer
++	O
,	O
n	long
++	O
)	O
{	O
if	O
(	O
kwp	pointer
->	O
flags	int
&	O
GRECS_HIDDEN	int
)	O
continue	O
;	O
if	O
(	O
n	long
)	O
fputc	function
(	O
'\n'	O
,	O
stream	pointer
)	O
;	O
if	O
(	O
kwp	pointer
->	O
type	int
==	O
grecs_type_section	int
)	O
grecs_print_block_statement	function
(	O
kwp	pointer
,	O
level	int
,	O
stream	pointer
)	O
;	O
else	O
grecs_print_simple_statement	function
(	O
kwp	pointer
,	O
level	int
,	O
stream	pointer
)	O
;	O
}	O
}	O
void	O
grecs_format_locus	function
(	O
grecs_locus_t	struct
*	O
locus	struct
,	O
struct	O
grecs_format_closure	struct
*	O
clos	pointer
)	O
{	O
if	O
(	O
locus	struct
)	O
{	O
char	O
*	O
str	pointer
=	O
NULL	O
;	O
size_t	long
size	pointer
=	O
0	int
;	O
if	O
(	O
locus	struct
->	O
beg	struct
.	O
col	int
==	O
0	int
)	O
grecs_asprintf	function
(	O
&	O
str	pointer
,	O
&	O
size	pointer
,	O
"%s:%u"	pointer
,	O
locus	struct
->	O
beg	struct
.	O
file	pointer
,	O
locus	struct
->	O
beg	struct
.	O
line	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
locus	struct
->	O
beg	struct
.	O
file	pointer
,	O
locus	struct
->	O
end	struct
.	O
file	pointer
)	O
)	O
grecs_asprintf	function
(	O
&	O
str	pointer
,	O
&	O
size	pointer
,	O
"%s:%u.%u-%s:%u.%u"	pointer
,	O
locus	struct
->	O
beg	struct
.	O
file	pointer
,	O
locus	struct
->	O
beg	struct
.	O
line	int
,	O
locus	struct
->	O
beg	struct
.	O
col	int
,	O
locus	struct
->	O
end	struct
.	O
file	pointer
,	O
locus	struct
->	O
end	struct
.	O
line	int
,	O
locus	struct
->	O
end	struct
.	O
col	int
)	O
;	O
else	O
if	O
(	O
locus	struct
->	O
beg	struct
.	O
line	int
!=	O
locus	struct
->	O
end	struct
.	O
line	int
)	O
grecs_asprintf	function
(	O
&	O
str	pointer
,	O
&	O
size	pointer
,	O
"%s:%u.%u-%u.%u"	pointer
,	O
locus	struct
->	O
beg	struct
.	O
file	pointer
,	O
locus	struct
->	O
beg	struct
.	O
line	int
,	O
locus	struct
->	O
beg	struct
.	O
col	int
,	O
locus	struct
->	O
end	struct
.	O
line	int
,	O
locus	struct
->	O
end	struct
.	O
col	int
)	O
;	O
else	O
if	O
(	O
locus	struct
->	O
beg	struct
.	O
col	int
!=	O
locus	struct
->	O
end	struct
.	O
col	int
)	O
grecs_asprintf	function
(	O
&	O
str	pointer
,	O
&	O
size	pointer
,	O
"%s:%u.%u-%u"	pointer
,	O
locus	struct
->	O
beg	struct
.	O
file	pointer
,	O
locus	struct
->	O
beg	struct
.	O
line	int
,	O
locus	struct
->	O
beg	struct
.	O
col	int
,	O
locus	struct
->	O
end	struct
.	O
col	int
)	O
;	O
else	O
grecs_asprintf	function
(	O
&	O
str	pointer
,	O
&	O
size	pointer
,	O
"%s:%u.%u"	pointer
,	O
locus	struct
->	O
beg	struct
.	O
file	pointer
,	O
locus	struct
->	O
beg	struct
.	O
line	int
,	O
locus	struct
->	O
beg	struct
.	O
col	int
)	O
;	O
clos	pointer
->	O
fmtfun	pointer
(	O
str	pointer
,	O
clos	pointer
->	O
data	pointer
)	O
;	O
free	function
(	O
str	pointer
)	O
;	O
}	O
}	O
void	O
grecs_format_node_path	function
(	O
struct	O
grecs_node	struct
*	O
node	pointer
,	O
int	O
flags	int
,	O
struct	O
grecs_format_closure	struct
*	O
clos	pointer
)	O
{	O
char	O
delim	array
[	O
2	int
]	O
=	O
"."	pointer
;	O
if	O
(	O
!	O
node	pointer
)	O
{	O
clos	pointer
->	O
fmtfun	pointer
(	O
"NULL"	pointer
,	O
clos	pointer
->	O
data	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
node	pointer
->	O
up	pointer
)	O
grecs_format_node_path	function
(	O
node	pointer
->	O
up	pointer
,	O
flags	int
,	O
clos	pointer
)	O
;	O
if	O
(	O
node	pointer
->	O
type	int
==	O
grecs_node_root	int
)	O
return	O
;	O
if	O
(	O
flags	int
&	O
_GRECS_NODE_MASK_DELIM	int
)	O
delim	array
[	O
0	int
]	O
=	O
flags	int
&	O
_GRECS_NODE_MASK_DELIM	int
;	O
clos	pointer
->	O
fmtfun	pointer
(	O
delim	array
,	O
clos	pointer
->	O
data	pointer
)	O
;	O
clos	pointer
->	O
fmtfun	pointer
(	O
node	pointer
->	O
ident	pointer
,	O
clos	pointer
->	O
data	pointer
)	O
;	O
if	O
(	O
node	pointer
->	O
type	int
==	O
grecs_node_block	int
&&	O
!	O
GRECS_VALUE_EMPTY_P	O
(	O
node	pointer
->	O
v	pointer
.	O
value	pointer
)	O
)	O
{	O
clos	pointer
->	O
fmtfun	pointer
(	O
"="	pointer
,	O
clos	pointer
->	O
data	pointer
)	O
;	O
grecs_format_value	function
(	O
node	pointer
->	O
v	pointer
.	O
value	pointer
,	O
flags	int
|	O
GRECS_NODE_FLAG_QUOTE	int
,	O
clos	pointer
)	O
;	O
}	O
}	O
void	O
grecs_format_value	function
(	O
struct	O
grecs_value	struct
*	O
val	pointer
,	O
int	O
flags	int
,	O
struct	O
grecs_format_closure	struct
*	O
clos	pointer
)	O
{	O
int	O
i	int
;	O
struct	O
grecs_list_entry	struct
*	O
ep	pointer
;	O
size_t	long
clen	long
;	O
int	O
need_quote	int
;	O
if	O
(	O
!	O
val	pointer
)	O
return	O
;	O
switch	O
(	O
val	pointer
->	O
type	int
)	O
{	O
case	O
GRECS_TYPE_STRING	int
:	O
clen	long
=	O
wordsplit_c_quoted_length	function
(	O
val	pointer
->	O
v	pointer
.	O
string	pointer
,	O
flags	int
&	O
GRECS_NODE_FLAG_QUOTE_HEX	int
,	O
&	O
need_quote	int
)	O
;	O
if	O
(	O
flags	int
&	O
GRECS_NODE_FLAG_QUOTE	int
)	O
need_quote	int
=	O
1	int
;	O
else	O
if	O
(	O
flags	int
&	O
GRECS_NODE_FLAG_NOQUOTE	int
)	O
need_quote	int
=	O
0	int
;	O
if	O
(	O
need_quote	int
)	O
{	O
char	O
*	O
cbuf	pointer
=	O
grecs_malloc	function
(	O
clen	long
+	O
1	int
)	O
;	O
wordsplit_c_quote_copy	function
(	O
cbuf	pointer
,	O
val	pointer
->	O
v	pointer
.	O
string	pointer
,	O
flags	int
&	O
GRECS_NODE_FLAG_QUOTE_HEX	int
)	O
;	O
cbuf	pointer
[	O
clen	long
]	O
=	O
0	int
;	O
clos	pointer
->	O
fmtfun	pointer
(	O
"\""	pointer
,	O
clos	pointer
->	O
data	pointer
)	O
;	O
clos	pointer
->	O
fmtfun	pointer
(	O
cbuf	pointer
,	O
clos	pointer
->	O
data	pointer
)	O
;	O
clos	pointer
->	O
fmtfun	pointer
(	O
"\""	pointer
,	O
clos	pointer
->	O
data	pointer
)	O
;	O
grecs_free	function
(	O
cbuf	pointer
)	O
;	O
}	O
else	O
clos	pointer
->	O
fmtfun	pointer
(	O
val	pointer
->	O
v	pointer
.	O
string	pointer
,	O
clos	pointer
->	O
data	pointer
)	O
;	O
break	O
;	O
case	O
GRECS_TYPE_LIST	int
:	O
clos	pointer
->	O
fmtfun	pointer
(	O
"("	pointer
,	O
clos	pointer
->	O
data	pointer
)	O
;	O
for	O
(	O
ep	pointer
=	O
val	pointer
->	O
v	pointer
.	O
list	pointer
->	O
head	pointer
;	O
ep	pointer
;	O
ep	pointer
=	O
ep	pointer
->	O
next	pointer
)	O
{	O
grecs_format_value	function
(	O
ep	pointer
->	O
data	pointer
,	O
flags	int
,	O
clos	pointer
)	O
;	O
if	O
(	O
ep	pointer
->	O
next	pointer
)	O
clos	pointer
->	O
fmtfun	pointer
(	O
", "	pointer
,	O
clos	pointer
->	O
data	pointer
)	O
;	O
}	O
clos	pointer
->	O
fmtfun	pointer
(	O
")"	pointer
,	O
clos	pointer
->	O
data	pointer
)	O
;	O
break	O
;	O
case	O
GRECS_TYPE_ARRAY	int
:	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
val	pointer
->	O
v	pointer
.	O
arg	struct
.	O
c	long
;	O
i	int
++	O
)	O
{	O
if	O
(	O
i	int
)	O
clos	pointer
->	O
fmtfun	pointer
(	O
" "	pointer
,	O
clos	pointer
->	O
data	pointer
)	O
;	O
grecs_format_value	function
(	O
val	pointer
->	O
v	pointer
.	O
arg	struct
.	O
v	pointer
[	O
i	int
]	O
,	O
flags	int
,	O
clos	pointer
)	O
;	O
}	O
}	O
}	O
int	O
grecs_format_node	function
(	O
struct	O
grecs_node	struct
*	O
node	pointer
,	O
int	O
flags	int
,	O
struct	O
grecs_format_closure	struct
*	O
clos	pointer
)	O
{	O
const	O
char	O
*	O
delim_str	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
_GRECS_NODE_MASK_OUTPUT	int
)	O
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
1	int
;	O
}	O
if	O
(	O
!	O
node	pointer
)	O
{	O
clos	pointer
->	O
fmtfun	pointer
(	O
"NULL"	pointer
,	O
clos	pointer
->	O
data	pointer
)	O
;	O
return	O
0	int
;	O
}	O
switch	O
(	O
node	pointer
->	O
type	int
)	O
{	O
case	O
grecs_node_root	int
:	O
case	O
grecs_node_block	int
:	O
if	O
(	O
flags	int
&	O
GRECS_NODE_FLAG_DESCEND	int
)	O
{	O
for	O
(	O
node	pointer
=	O
node	pointer
->	O
down	pointer
;	O
node	pointer
;	O
node	pointer
=	O
node	pointer
->	O
next	pointer
)	O
{	O
grecs_format_node	function
(	O
node	pointer
,	O
flags	int
,	O
clos	pointer
)	O
;	O
if	O
(	O
node	pointer
->	O
next	pointer
)	O
clos	pointer
->	O
fmtfun	pointer
(	O
"\n"	pointer
,	O
clos	pointer
->	O
data	pointer
)	O
;	O
}	O
break	O
;	O
}	O
case	O
grecs_node_stmt	int
:	O
if	O
(	O
flags	int
&	O
GRECS_NODE_FLAG_LOCUS	int
)	O
{	O
grecs_locus_t	struct
*	O
locus	struct
;	O
if	O
(	O
flags	int
&	O
GRECS_NODE_FLAG_PATH	int
)	O
{	O
if	O
(	O
flags	int
&	O
GRECS_NODE_FLAG_VALUE	int
)	O
locus	struct
=	O
&	O
node	pointer
->	O
locus	struct
;	O
else	O
locus	struct
=	O
&	O
node	pointer
->	O
idloc	struct
;	O
}	O
else	O
if	O
(	O
flags	int
&	O
GRECS_NODE_FLAG_VALUE	int
)	O
locus	struct
=	O
&	O
node	pointer
->	O
v	pointer
.	O
value	pointer
->	O
locus	struct
;	O
else	O
locus	struct
=	O
&	O
node	pointer
->	O
locus	struct
;	O
grecs_format_locus	function
(	O
locus	struct
,	O
clos	pointer
)	O
;	O
delim_str	pointer
=	O
": "	pointer
;	O
}	O
if	O
(	O
flags	int
&	O
GRECS_NODE_FLAG_PATH	int
)	O
{	O
if	O
(	O
delim_str	pointer
)	O
clos	pointer
->	O
fmtfun	pointer
(	O
delim_str	pointer
,	O
clos	pointer
->	O
data	pointer
)	O
;	O
grecs_format_node_path	function
(	O
node	pointer
,	O
flags	int
,	O
clos	pointer
)	O
;	O
delim_str	pointer
=	O
": "	pointer
;	O
}	O
if	O
(	O
flags	int
&	O
GRECS_NODE_FLAG_VALUE	int
)	O
{	O
if	O
(	O
delim_str	pointer
)	O
clos	pointer
->	O
fmtfun	pointer
(	O
delim_str	pointer
,	O
clos	pointer
->	O
data	pointer
)	O
;	O
grecs_format_value	function
(	O
node	pointer
->	O
v	pointer
.	O
value	pointer
,	O
flags	int
,	O
clos	pointer
)	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
txtacc_fmt	function
(	O
const	O
char	O
*	O
str	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
grecs_txtacc	O
*	O
acc	pointer
=	O
data	pointer
;	O
grecs_txtacc_grow	function
(	O
acc	pointer
,	O
str	pointer
,	O
strlen	function
(	O
str	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
void	O
grecs_txtacc_format_value	function
(	O
struct	O
grecs_value	struct
*	O
val	pointer
,	O
int	O
flags	int
,	O
struct	O
grecs_txtacc	O
*	O
acc	pointer
)	O
{	O
struct	O
grecs_format_closure	struct
clos	pointer
=	O
{	O
txtacc_fmt	function
,	O
acc	pointer
}	O
;	O
grecs_format_value	function
(	O
val	pointer
,	O
flags	int
,	O
&	O
clos	pointer
)	O
;	O
}	O
static	O
int	O
file_fmt	function
(	O
const	O
char	O
*	O
str	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
fputs	function
(	O
str	pointer
,	O
(	O
FILE	struct
*	O
)	O
data	pointer
)	O
;	O
return	O
0	int
;	O
}	O
void	O
grecs_print_locus	function
(	O
grecs_locus_t	struct
*	O
locus	struct
,	O
FILE	struct
*	O
fp	pointer
)	O
{	O
struct	O
grecs_format_closure	struct
clos	pointer
=	O
{	O
file_fmt	function
,	O
fp	pointer
}	O
;	O
grecs_format_locus	function
(	O
locus	struct
,	O
&	O
clos	pointer
)	O
;	O
}	O
void	O
grecs_print_node_path	function
(	O
struct	O
grecs_node	struct
*	O
node	pointer
,	O
int	O
flag	int
,	O
FILE	struct
*	O
fp	pointer
)	O
{	O
struct	O
grecs_format_closure	struct
clos	pointer
=	O
{	O
file_fmt	function
,	O
fp	pointer
}	O
;	O
grecs_format_node_path	function
(	O
node	pointer
,	O
flag	int
,	O
&	O
clos	pointer
)	O
;	O
}	O
void	O
grecs_print_value	function
(	O
struct	O
grecs_value	struct
*	O
val	pointer
,	O
int	O
flags	int
,	O
FILE	struct
*	O
fp	pointer
)	O
{	O
struct	O
grecs_format_closure	struct
clos	pointer
=	O
{	O
file_fmt	function
,	O
fp	pointer
}	O
;	O
grecs_format_value	function
(	O
val	pointer
,	O
flags	int
,	O
&	O
clos	pointer
)	O
;	O
}	O
int	O
grecs_print_node	function
(	O
struct	O
grecs_node	struct
*	O
node	pointer
,	O
int	O
flags	int
,	O
FILE	struct
*	O
fp	pointer
)	O
{	O
struct	O
grecs_format_closure	struct
clos	pointer
=	O
{	O
file_fmt	function
,	O
fp	pointer
}	O
;	O
return	O
grecs_format_node	function
(	O
node	pointer
,	O
flags	int
,	O
&	O
clos	pointer
)	O
;	O
}	O
