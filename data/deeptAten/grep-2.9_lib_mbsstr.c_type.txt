static	O
bool	bool
knuth_morris_pratt_multibyte	function
(	O
const	O
char	O
*	O
haystack	pointer
,	O
const	O
char	O
*	O
needle	pointer
,	O
const	O
char	O
*	O
*	O
resultp	pointer
)	O
{	O
size_t	long
m	long
=	O
mbslen	function
(	O
needle	pointer
)	O
;	O
mbchar_t	struct
*	O
needle_mbchars	pointer
;	O
size_t	long
*	O
table	pointer
;	O
char	O
*	O
memory	pointer
=	O
(	O
char	O
*	O
)	O
nmalloca	O
(	O
m	long
,	O
sizeof	O
(	O
mbchar_t	struct
)	O
+	O
sizeof	O
(	O
size_t	long
)	O
)	O
;	O
if	O
(	O
memory	pointer
==	O
NULL	O
)	O
return	O
false	int
;	O
needle_mbchars	pointer
=	O
(	O
mbchar_t	struct
*	O
)	O
memory	pointer
;	O
table	pointer
=	O
(	O
size_t	long
*	O
)	O
(	O
memory	pointer
+	O
m	long
*	O
sizeof	O
(	O
mbchar_t	struct
)	O
)	O
;	O
{	O
mbui_iterator_t	struct
iter	pointer
;	O
size_t	long
j	long
;	O
j	long
=	O
0	int
;	O
for	O
(	O
mbui_init	O
(	O
iter	pointer
,	O
needle	pointer
)	O
;	O
mbui_avail	O
(	O
iter	pointer
)	O
;	O
mbui_advance	O
(	O
iter	pointer
)	O
,	O
j	long
++	O
)	O
mb_copy	function
(	O
&	O
needle_mbchars	pointer
[	O
j	long
]	O
,	O
&	O
mbui_cur	O
(	O
iter	pointer
)	O
)	O
;	O
}	O
{	O
size_t	long
i	long
,	O
j	long
;	O
table	pointer
[	O
1	int
]	O
=	O
1	int
;	O
j	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
2	int
;	O
i	long
<	O
m	long
;	O
i	long
++	O
)	O
{	O
mbchar_t	struct
*	O
b	char
=	O
&	O
needle_mbchars	pointer
[	O
i	long
-	O
1	int
]	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
mb_equal	O
(	O
*	O
b	char
,	O
needle_mbchars	pointer
[	O
j	long
]	O
)	O
)	O
{	O
table	pointer
[	O
i	long
]	O
=	O
i	long
-	O
++	O
j	long
;	O
break	O
;	O
}	O
if	O
(	O
j	long
==	O
0	int
)	O
{	O
table	pointer
[	O
i	long
]	O
=	O
i	long
;	O
break	O
;	O
}	O
j	long
=	O
j	long
-	O
table	pointer
[	O
j	long
]	O
;	O
}	O
}	O
}	O
{	O
size_t	long
j	long
;	O
mbui_iterator_t	struct
rhaystack	pointer
;	O
mbui_iterator_t	struct
phaystack	pointer
;	O
*	O
resultp	pointer
=	O
NULL	O
;	O
j	long
=	O
0	int
;	O
mbui_init	O
(	O
rhaystack	pointer
,	O
haystack	pointer
)	O
;	O
mbui_init	O
(	O
phaystack	pointer
,	O
haystack	pointer
)	O
;	O
while	O
(	O
mbui_avail	O
(	O
phaystack	pointer
)	O
)	O
if	O
(	O
mb_equal	O
(	O
needle_mbchars	pointer
[	O
j	long
]	O
,	O
mbui_cur	O
(	O
phaystack	pointer
)	O
)	O
)	O
{	O
j	long
++	O
;	O
mbui_advance	O
(	O
phaystack	pointer
)	O
;	O
if	O
(	O
j	long
==	O
m	long
)	O
{	O
*	O
resultp	pointer
=	O
mbui_cur_ptr	O
(	O
rhaystack	pointer
)	O
;	O
break	O
;	O
}	O
}	O
else	O
if	O
(	O
j	long
>	O
0	int
)	O
{	O
size_t	long
count	long
=	O
table	pointer
[	O
j	long
]	O
;	O
j	long
-=	O
count	long
;	O
for	O
(	O
;	O
count	long
>	O
0	int
;	O
count	long
--	O
)	O
{	O
if	O
(	O
!	O
mbui_avail	O
(	O
rhaystack	pointer
)	O
)	O
abort	function
(	O
)	O
;	O
mbui_advance	O
(	O
rhaystack	pointer
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
!	O
mbui_avail	O
(	O
rhaystack	pointer
)	O
)	O
abort	function
(	O
)	O
;	O
mbui_advance	O
(	O
rhaystack	pointer
)	O
;	O
mbui_advance	O
(	O
phaystack	pointer
)	O
;	O
}	O
}	O
freea	function
(	O
memory	pointer
)	O
;	O
return	O
true	int
;	O
}	O
char	O
*	O
mbsstr	function
(	O
const	O
char	O
*	O
haystack	pointer
,	O
const	O
char	O
*	O
needle	pointer
)	O
{	O
if	O
(	O
MB_CUR_MAX	O
>	O
1	int
)	O
{	O
mbui_iterator_t	struct
iter_needle	struct
;	O
mbui_init	O
(	O
iter_needle	struct
,	O
needle	pointer
)	O
;	O
if	O
(	O
mbui_avail	O
(	O
iter_needle	struct
)	O
)	O
{	O
bool	bool
try_kmp	bool
=	O
true	int
;	O
size_t	long
outer_loop_count	long
=	O
0	int
;	O
size_t	long
comparison_count	long
=	O
0	int
;	O
size_t	long
last_ccount	long
=	O
0	int
;	O
mbui_iterator_t	struct
iter_needle_last_ccount	struct
;	O
mbui_iterator_t	struct
iter_haystack	struct
;	O
mbui_init	O
(	O
iter_needle_last_ccount	struct
,	O
needle	pointer
)	O
;	O
mbui_init	O
(	O
iter_haystack	struct
,	O
haystack	pointer
)	O
;	O
for	O
(	O
;	O
;	O
mbui_advance	O
(	O
iter_haystack	struct
)	O
)	O
{	O
if	O
(	O
!	O
mbui_avail	O
(	O
iter_haystack	struct
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
try_kmp	bool
&&	O
outer_loop_count	long
>=	O
10	int
&&	O
comparison_count	long
>=	O
5	int
*	O
outer_loop_count	long
)	O
{	O
size_t	long
count	long
=	O
comparison_count	long
-	O
last_ccount	long
;	O
for	O
(	O
;	O
count	long
>	O
0	int
&&	O
mbui_avail	O
(	O
iter_needle_last_ccount	struct
)	O
;	O
count	long
--	O
)	O
mbui_advance	O
(	O
iter_needle_last_ccount	struct
)	O
;	O
last_ccount	long
=	O
comparison_count	long
;	O
if	O
(	O
!	O
mbui_avail	O
(	O
iter_needle_last_ccount	struct
)	O
)	O
{	O
const	O
char	O
*	O
result	pointer
;	O
bool	bool
success	bool
=	O
knuth_morris_pratt_multibyte	function
(	O
haystack	pointer
,	O
needle	pointer
,	O
&	O
result	pointer
)	O
;	O
if	O
(	O
success	bool
)	O
return	O
(	O
char	O
*	O
)	O
result	pointer
;	O
try_kmp	bool
=	O
false	int
;	O
}	O
}	O
outer_loop_count	long
++	O
;	O
comparison_count	long
++	O
;	O
if	O
(	O
mb_equal	O
(	O
mbui_cur	O
(	O
iter_haystack	struct
)	O
,	O
mbui_cur	O
(	O
iter_needle	struct
)	O
)	O
)	O
{	O
mbui_iterator_t	struct
rhaystack	pointer
;	O
mbui_iterator_t	struct
rneedle	struct
;	O
memcpy	function
(	O
&	O
rhaystack	pointer
,	O
&	O
iter_haystack	struct
,	O
sizeof	O
(	O
mbui_iterator_t	struct
)	O
)	O
;	O
mbui_advance	O
(	O
rhaystack	pointer
)	O
;	O
mbui_init	O
(	O
rneedle	struct
,	O
needle	pointer
)	O
;	O
if	O
(	O
!	O
mbui_avail	O
(	O
rneedle	struct
)	O
)	O
abort	function
(	O
)	O
;	O
mbui_advance	O
(	O
rneedle	struct
)	O
;	O
for	O
(	O
;	O
;	O
mbui_advance	O
(	O
rhaystack	pointer
)	O
,	O
mbui_advance	O
(	O
rneedle	struct
)	O
)	O
{	O
if	O
(	O
!	O
mbui_avail	O
(	O
rneedle	struct
)	O
)	O
return	O
(	O
char	O
*	O
)	O
mbui_cur_ptr	O
(	O
iter_haystack	struct
)	O
;	O
if	O
(	O
!	O
mbui_avail	O
(	O
rhaystack	pointer
)	O
)	O
return	O
NULL	O
;	O
comparison_count	long
++	O
;	O
if	O
(	O
!	O
mb_equal	O
(	O
mbui_cur	O
(	O
rhaystack	pointer
)	O
,	O
mbui_cur	O
(	O
rneedle	struct
)	O
)	O
)	O
break	O
;	O
}	O
}	O
}	O
}	O
else	O
return	O
(	O
char	O
*	O
)	O
haystack	pointer
;	O
}	O
else	O
{	O
if	O
(	O
*	O
needle	pointer
!=	O
'\0'	O
)	O
{	O
bool	bool
try_kmp	bool
=	O
true	int
;	O
size_t	long
outer_loop_count	long
=	O
0	int
;	O
size_t	long
comparison_count	long
=	O
0	int
;	O
size_t	long
last_ccount	long
=	O
0	int
;	O
const	O
char	O
*	O
needle_last_ccount	pointer
=	O
needle	pointer
;	O
char	O
b	char
=	O
*	O
needle	pointer
++	O
;	O
for	O
(	O
;	O
;	O
haystack	pointer
++	O
)	O
{	O
if	O
(	O
*	O
haystack	pointer
==	O
'\0'	O
)	O
return	O
NULL	O
;	O
if	O
(	O
try_kmp	bool
&&	O
outer_loop_count	long
>=	O
10	int
&&	O
comparison_count	long
>=	O
5	int
*	O
outer_loop_count	long
)	O
{	O
if	O
(	O
needle_last_ccount	pointer
!=	O
NULL	O
)	O
{	O
needle_last_ccount	pointer
+=	O
strnlen	function
(	O
needle_last_ccount	pointer
,	O
comparison_count	long
-	O
last_ccount	long
)	O
;	O
if	O
(	O
*	O
needle_last_ccount	pointer
==	O
'\0'	O
)	O
needle_last_ccount	pointer
=	O
NULL	O
;	O
last_ccount	long
=	O
comparison_count	long
;	O
}	O
if	O
(	O
needle_last_ccount	pointer
==	O
NULL	O
)	O
{	O
const	O
unsigned	O
char	O
*	O
result	pointer
;	O
bool	bool
success	bool
=	O
knuth_morris_pratt	function
(	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
haystack	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
(	O
needle	pointer
-	O
1	int
)	O
,	O
strlen	function
(	O
needle	pointer
-	O
1	int
)	O
,	O
&	O
result	pointer
)	O
;	O
if	O
(	O
success	bool
)	O
return	O
(	O
char	O
*	O
)	O
result	pointer
;	O
try_kmp	bool
=	O
false	int
;	O
}	O
}	O
outer_loop_count	long
++	O
;	O
comparison_count	long
++	O
;	O
if	O
(	O
*	O
haystack	pointer
==	O
b	char
)	O
{	O
const	O
char	O
*	O
rhaystack	pointer
=	O
haystack	pointer
+	O
1	int
;	O
const	O
char	O
*	O
rneedle	struct
=	O
needle	pointer
;	O
for	O
(	O
;	O
;	O
rhaystack	pointer
++	O
,	O
rneedle	struct
++	O
)	O
{	O
if	O
(	O
*	O
rneedle	struct
==	O
'\0'	O
)	O
return	O
(	O
char	O
*	O
)	O
haystack	pointer
;	O
if	O
(	O
*	O
rhaystack	pointer
==	O
'\0'	O
)	O
return	O
NULL	O
;	O
comparison_count	long
++	O
;	O
if	O
(	O
*	O
rhaystack	pointer
!=	O
*	O
rneedle	struct
)	O
break	O
;	O
}	O
}	O
}	O
}	O
else	O
return	O
(	O
char	O
*	O
)	O
haystack	pointer
;	O
}	O
}	O
