__BEGIN_DECLARATIONS	O
static	O
Bool	int
is_correct_date_format	function
__P_	O
(	O
(	O
char	O
*	O
format_txt	pointer
,	O
Bool	int
*	O
use_day_suffix	pointer
,	O
Bool	int
*	O
use_short3_day_name	int
,	O
Bool	int
*	O
use_day_zeroleaded	int
,	O
Bool	int
*	O
use_year_zeroleaded	int
)	O
)	O
;	O
static	O
void	O
rearrange_argv	function
__P_	O
(	O
(	O
const	O
char	O
*	O
opt_list	pointer
,	O
int	O
*	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
)	O
;	O
static	O
void	O
check_command_line	function
__P_	O
(	O
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
)	O
;	O
static	O
void	O
build_month_list	function
__P_	O
(	O
(	O
char	O
*	O
argv	array
[	O
]	O
)	O
)	O
;	O
static	O
void	O
eliminate_invalid_data	function
__P_	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
void	O
pseudo_blank_conversion	function
__P_	O
(	O
(	O
char	O
*	O
*	O
text	pointer
)	O
)	O
;	O
static	O
int	O
further_check	function
__P_	O
(	O
(	O
char	O
*	O
*	O
option	pointer
)	O
)	O
;	O
__END_DECLARATIONS	O
const	O
int	O
dvec	array
[	O
]	O
=	O
{	O
31	int
,	O
28	int
,	O
31	int
,	O
30	int
,	O
31	int
,	O
30	int
,	O
31	int
,	O
31	int
,	O
30	int
,	O
31	int
,	O
30	int
,	O
31	int
}	O
;	O
const	O
int	O
mvec	array
[	O
]	O
=	O
{	O
0	int
,	O
31	int
,	O
59	int
,	O
90	int
,	O
120	int
,	O
151	int
,	O
181	int
,	O
212	int
,	O
243	int
,	O
273	int
,	O
304	int
,	O
334	int
}	O
;	O
const	O
Lopt_struct	struct
lopt	array
[	O
]	O
=	O
{	O
{	O
SYM_ADJUST_VALUE	int
,	O
"adjust-value"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_ALTERNATIVE_FORMAT	int
,	O
"alternative-format"	pointer
,	O
{	O
"A"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_ASTRONOMICAL_HDY	int
,	O
"astronomical-holidays"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_ATMOSPHERE	int
,	O
"atmosphere"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_BAHAI_HDY	int
,	O
"bahai-holidays"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_BAHAI_MTH	int
,	O
"bahai-months"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_BIORHYTHM_AXIS_LEN	int
,	O
"biorhythm-axis"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_BLOCKS	int
,	O
"blocks"	pointer
,	O
{	O
"b"	pointer
,	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_CALENDAR_DATES	int
,	O
"calendar-dates"	pointer
,	O
{	O
"j"	pointer
,	O
"jb"	pointer
,	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
"special"	pointer
,	O
"both"	pointer
,	O
NULL	O
}	O
}	O
,	O
{	O
SYM_CC_HDY	int
,	O
"cc-holidays"	pointer
,	O
{	O
"q"	pointer
,	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_CELTIC_HDY	int
,	O
"celtic-holidays"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_CHINESE_FLEXIBLE_HDY	int
,	O
"chinese-flexible-holidays"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_CHINESE_FLEXIBLE_MTH	int
,	O
"chinese-flexible-months"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_CHINESE_HDY	int
,	O
"chinese-holidays"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_CHINESE_MTH	int
,	O
"chinese-months"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_CHRISTIAN_HDY	int
,	O
"christian-holidays"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_COPTIC_MTH	int
,	O
"coptic-months"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_LICENSE2	int
,	O
"copyleft"	pointer
,	O
{	O
"L"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_LICENSE3	int
,	O
"copyright"	pointer
,	O
{	O
"L"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_CYCLE_END	int
,	O
"cycle-end"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_CYCLE_STEP	int
,	O
"cycle-step"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_DATE_FORMAT	int
,	O
"date-format"	pointer
,	O
{	O
"!\001"	pointer
,	O
"!\002"	pointer
,	O
"!\003"	pointer
,	O
"!"	pointer
,	O
NULL	O
}	O
,	O
LARG_ONE_OR_ARG	int
,	O
{	O
CC_DE	pointer
,	O
CC_US	pointer
,	O
CC_GB	pointer
,	O
N_	O
(	O
"ARG"	pointer
)	O
,	O
NULL	O
}	O
}	O
,	O
{	O
SYM_DATE_VARIABLE	int
,	O
"date-variable"	pointer
,	O
{	O
"v"	pointer
,	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_DEBUG	int
,	O
"debug"	pointer
,	O
{	O
"0"	pointer
,	O
"1"	pointer
,	O
"2"	pointer
,	O
"3"	pointer
,	O
"4"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO_OR_ONE	int
,	O
{	O
"internal"	pointer
,	O
"handled"	pointer
,	O
"unhandled"	pointer
,	O
"all"	pointer
,	O
"abort"	pointer
,	O
NULL	O
}	O
}	O
,	O
{	O
SYM_DESC_FIXED_DATES_LIST	int
,	O
"descending-fixed-dates"	pointer
,	O
{	O
"c-"	pointer
,	O
"C-"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO_OR_ONE	int
,	O
{	O
"short"	pointer
,	O
"long"	pointer
,	O
NULL	O
}	O
}	O
,	O
{	O
SYM_DESC_HOLIDAY_LIST	int
,	O
"descending-holiday-list"	pointer
,	O
{	O
"n-"	pointer
,	O
"N-"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO_OR_ONE	int
,	O
{	O
"long"	pointer
,	O
"short"	pointer
,	O
NULL	O
}	O
}	O
,	O
{	O
SYM_DISABLE_HIGHLIGHTING	int
,	O
"disable-highlighting"	pointer
,	O
{	O
"Hno"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_END_OF_MONTH	int
,	O
"end-of-month"	pointer
,	O
{	O
"m+"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_END_OF_WEEK	int
,	O
"end-of-week"	pointer
,	O
{	O
"w+"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_END_OF_YEAR	int
,	O
"end-of-year"	pointer
,	O
{	O
"y+"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_ETHIOPIC_MTH	int
,	O
"ethiopic-months"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_EXCLUDE_RC_TITLE	int
,	O
"exclude-fixed-dates-list-title"	pointer
,	O
{	O
"x"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_EXCLUDE_HD_TITLE	int
,	O
"exclude-holiday-list-title"	pointer
,	O
{	O
"X"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_EXECUTE_COMMAND	int
,	O
"execute-command"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_EXIT_STAT_HELP_NON_ZERO	int
,	O
"exit-status-help-non-zero"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_extern_static_DVARS	int
,	O
"export-date-variables"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_extern_static_TVARS	int
,	O
"export-text-variables"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_FILTER_DAY	int
,	O
"filter-day"	pointer
,	O
{	O
"D"	pointer
,	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_FILTER_PERIOD	int
,	O
"filter-period"	pointer
,	O
{	O
"P"	pointer
,	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_FILTER_TEXT	int
,	O
"filter-text"	pointer
,	O
{	O
"I"	pointer
,	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_FIXED_DATES	int
,	O
"fixed-dates"	pointer
,	O
{	O
"jc"	pointer
,	O
"jcb"	pointer
,	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
"special"	pointer
,	O
"both"	pointer
,	O
NULL	O
}	O
}	O
,	O
{	O
SYM_FORCE_HIGHLIGHTING	int
,	O
"force-highlighting"	pointer
,	O
{	O
"Hyes"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_FRENCH_REVOLUTIONARY_MTH	int
,	O
"french-revolutionary-months"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_GREG_REFORM	int
,	O
"gregorian-reform"	pointer
,	O
{	O
"$\001"	pointer
,	O
"$\002"	pointer
,	O
"$\003"	pointer
,	O
"$\004"	pointer
,	O
"$"	pointer
,	O
NULL	O
}	O
,	O
LARG_ONE_OR_ARG	int
,	O
{	O
"1582"	pointer
,	O
"1700"	pointer
,	O
"1752"	pointer
,	O
"1753"	pointer
,	O
N_	O
(	O
"ARG"	pointer
)	O
,	O
NULL	O
}	O
}	O
,	O
{	O
SYM_GROUPING_TEXT	int
,	O
"grouping-text"	pointer
,	O
{	O
"g"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO_OR_ONE	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_HEADING_TEXT	int
,	O
"heading-text"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_HEBREW_HDY	int
,	O
"hebrew-holidays"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_HEBREW_MTH	int
,	O
"hebrew-months"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_LONG_HELP1	int
,	O
"help"	pointer
,	O
{	O
"h"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_HERE_FILE	int
,	O
"here"	pointer
,	O
{	O
"#"	pointer
,	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_HIGHLIGHTING	int
,	O
"highlighting"	pointer
,	O
{	O
"H"	pointer
,	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_HOLIDAY_DATES	int
,	O
"holiday-dates"	pointer
,	O
{	O
"jn"	pointer
,	O
"jnb"	pointer
,	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
"special"	pointer
,	O
"both"	pointer
,	O
NULL	O
}	O
}	O
,	O
{	O
SYM_HOLIDAY_LIST	int
,	O
"holiday-list"	pointer
,	O
{	O
"n"	pointer
,	O
"N"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO_OR_ONE	int
,	O
{	O
"long"	pointer
,	O
"short"	pointer
,	O
NULL	O
}	O
}	O
,	O
{	O
SYM_IGNORE_CASE	int
,	O
"ignore-case"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_INCLUDE_CONS_NUMBER	int
,	O
"include-consecutive-number"	pointer
,	O
{	O
"z"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_INCLUDE_HOLIDAY	int
,	O
"include-holidays"	pointer
,	O
{	O
"e"	pointer
,	O
"E"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO_OR_ONE	int
,	O
{	O
"long"	pointer
,	O
"short"	pointer
,	O
NULL	O
}	O
}	O
,	O
{	O
SYM_INCLUDE_FILENAME	int
,	O
"include-resource-file-name"	pointer
,	O
{	O
"a"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_INCLUDE_TODAY	int
,	O
"include-today"	pointer
,	O
{	O
"d"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_INCLUDE_WEEK_NUMBER	int
,	O
"include-week-number"	pointer
,	O
{	O
"k"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_INDIAN_CIVIL_MTH	int
,	O
"indian-civil-months"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_ISLAMIC_HDY	int
,	O
"islamic-civil-holidays"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_ISLAMIC_MTH	int
,	O
"islamic-civil-months"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_ISO_WEEK_NUMBER	int
,	O
"iso-week-number"	pointer
,	O
{	O
"y"	pointer
,	O
"n"	pointer
,	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
"yes"	pointer
,	O
"no"	pointer
,	O
NULL	O
}	O
}	O
,	O
{	O
SYM_JAPANESE_FLEXIBLE_HDY	int
,	O
"japanese-flexible-holidays"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_JAPANESE_FLEXIBLE_MTH	int
,	O
"japanese-flexible-months"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_JAPANESE_HDY	int
,	O
"japanese-holidays"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_JAPANESE_MTH	int
,	O
"japanese-months"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_LEAP_DAY	int
,	O
"leap-day"	pointer
,	O
{	O
"f"	pointer
,	O
"m"	pointer
,	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
"february"	pointer
,	O
"march"	pointer
,	O
NULL	O
}	O
}	O
,	O
{	O
SYM_LICENSE1	int
,	O
"license"	pointer
,	O
{	O
"L"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_LIMIT	int
,	O
"limit"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_LIST_MODE	int
,	O
"list-mode"	pointer
,	O
{	O
"l"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_FIXED_DATES_LIST	int
,	O
"list-of-fixed-dates"	pointer
,	O
{	O
"c"	pointer
,	O
"C"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO_OR_ONE	int
,	O
{	O
"short"	pointer
,	O
"long"	pointer
,	O
NULL	O
}	O
}	O
,	O
{	O
SYM_LONG_HELP1	int
,	O
"long-help"	pointer
,	O
{	O
"hh"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO_OR_ONE	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_MAIL	int
,	O
"mail"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO_OR_ONE	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_MONTH	int
,	O
"month"	pointer
,	O
{	O
"m"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_MOONIMAGE_LINES	int
,	O
"moonimage-lines"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_MULTICULTURAL_NEW_YEAR_HDY	int
,	O
"multicultural-new-year-holidays"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_OLD_ARMENIC_MTH	int
,	O
"old-armenic-months"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_OLD_EGYPTIC_MTH	int
,	O
"old-egyptic-months"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_OMIT_DATE_PART	int
,	O
"omit-multiple-date-part"	pointer
,	O
{	O
"o"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_ORTHODOX_CALENDAR	int
,	O
"orthodox-calendar"	pointer
,	O
{	O
"O"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_ORTHODOX_NEW_HDY	int
,	O
"orthodox-new-holidays"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_ORTHODOX_OLD_HDY	int
,	O
"orthodox-old-holidays"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_PAGER	int
,	O
"pager"	pointer
,	O
{	O
"p"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_PERIOD	int
,	O
"period-of-fixed-dates"	pointer
,	O
{	O
"c"	pointer
,	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_PERSIAN_HDY	int
,	O
"persian-jalaali-holidays"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_PERSIAN_MTH	int
,	O
"persian-jalaali-months"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_PRECISE	int
,	O
"precise"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_RESOURCE_FILE	int
,	O
"resource-file"	pointer
,	O
{	O
"f"	pointer
,	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_RESPONSE_FILE	int
,	O
"response-file"	pointer
,	O
{	O
"R"	pointer
,	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_REVERT_MATCH	int
,	O
"revert-match"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_SCRIPT_FILE	int
,	O
"shell-script"	pointer
,	O
{	O
"S"	pointer
,	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_START_OF_MONTH	int
,	O
"start-of-month"	pointer
,	O
{	O
"m-"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_START_OF_WEEK	int
,	O
"start-of-week"	pointer
,	O
{	O
"w-"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_START_OF_YEAR	int
,	O
"start-of-year"	pointer
,	O
{	O
"y-"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_STARTING_DAY	int
,	O
"starting-day"	pointer
,	O
{	O
"s"	pointer
,	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_SUPPRESS_CALENDAR	int
,	O
"suppress-calendar"	pointer
,	O
{	O
"u"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_SUPPRESS_DATE_PART	int
,	O
"suppress-date-part"	pointer
,	O
{	O
"U"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_SUPPRESS_FDLIST_SEP	int
,	O
"suppress-fixed-dates-list-separator"	pointer
,	O
{	O
"Q"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_SUPPRESS_HDLIST_SEP	int
,	O
"suppress-holiday-list-separator"	pointer
,	O
{	O
"G"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_SUPPRESS_TEXT_PART	int
,	O
"suppress-text-part"	pointer
,	O
{	O
"J"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_TEXT_VARIABLE	int
,	O
"text-variable"	pointer
,	O
{	O
"r"	pointer
,	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_TIME_OFFSET	int
,	O
"time-offset"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_TODAY	int
,	O
"today"	pointer
,	O
{	O
"c"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_TOMORROW	int
,	O
"tomorrow"	pointer
,	O
{	O
"t"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_TRANSFORM_YEAR	int
,	O
"transform-year"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_TRANSLATE_STRING	int
,	O
"translate-string"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_TYPE_OF_CALENDAR	int
,	O
"type"	pointer
,	O
{	O
"i"	pointer
,	O
"i-"	pointer
,	O
NULL	O
}	O
,	O
LARG_ONE	int
,	O
{	O
"special"	pointer
,	O
"standard"	pointer
,	O
NULL	O
}	O
}	O
,	O
{	O
SYM_LONG_HELP2	int
,	O
"usage"	pointer
,	O
{	O
"hh"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO_OR_ONE	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_VERSION	int
,	O
"version"	pointer
,	O
{	O
"V"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_WEEK	int
,	O
"week"	pointer
,	O
{	O
"w"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_CALENDAR_WITH_WEEK_NUMBER	int
,	O
"with-week-number"	pointer
,	O
{	O
"K"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_YEAR	int
,	O
"year"	pointer
,	O
{	O
"y"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_ZERO_DATES	int
,	O
"zero-dates-only"	pointer
,	O
{	O
"Z"	pointer
,	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_ZODIACAL_MARKER_HDY	int
,	O
"zodiacal-marker-holidays"	pointer
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
,	O
{	O
SYM_NIL	int
,	O
NULL	O
,	O
{	O
NULL	O
}	O
,	O
LARG_NO	int
,	O
{	O
NULL	O
}	O
}	O
}	O
;	O
Df_struct	struct
supported_date_format	array
[	O
LARG_MAX	int
-	O
1	int
]	O
=	O
{	O
{	O
CC_DE	pointer
,	O
N_	O
(	O
"Germany"	pointer
)	O
,	O
"%<2#K,  %1%>2*D%2 %<3#U %>04*Y"	pointer
}	O
,	O
{	O
CC_US	pointer
,	O
N_	O
(	O
"U.S.A."	pointer
)	O
,	O
"%<3#K,  %<3#U %1%>2&*D%2 %>04*Y"	pointer
}	O
,	O
{	O
CC_GB	pointer
,	O
N_	O
(	O
"Great Britain"	pointer
)	O
,	O
"%<3#K,  %1%>2&*D%2 %<3#U %>04*Y"	pointer
}	O
,	O
{	O
NULL	O
,	O
NULL	O
,	O
NULL	O
}	O
,	O
{	O
NULL	O
,	O
NULL	O
,	O
NULL	O
}	O
}	O
;	O
Df_struct	struct
*	O
date_format	pointer
=	O
supported_date_format	array
;	O
Greg_struct	struct
greg_reform_date	array
[	O
LARG_MAX	int
-	O
1	int
]	O
=	O
{	O
{	O
1582	int
,	O
10	int
,	O
5	int
,	O
14	int
}	O
,	O
{	O
1700	int
,	O
2	int
,	O
19	int
,	O
28	int
}	O
,	O
{	O
1752	int
,	O
9	int
,	O
3	int
,	O
13	int
}	O
,	O
{	O
1753	int
,	O
2	int
,	O
18	int
,	O
28	int
}	O
,	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
Greg_struct	struct
*	O
greg	pointer
=	O
greg_reform_date	array
;	O
Greg_struct	struct
users_greg	struct
;	O
FILE	struct
*	O
tfp	pointer
=	O
(	O
FILE	struct
*	O
)	O
NULL	O
;	O
Ml_struct	struct
*	O
month_list	pointer
=	O
(	O
Ml_struct	struct
*	O
)	O
NULL	O
;	O
Hls_struct	struct
ehls1s	struct
;	O
Hls_struct	struct
ehls1e	struct
;	O
Hls_struct	struct
ehls2s	struct
;	O
Hls_struct	struct
ehls2e	struct
;	O
Uint	int
testval	int
=	O
(	O
Uint	int
)	O
0	int
;	O
Uint	int
maxlen_max	int
=	O
MAXLEN_MAX	int
;	O
int	O
len_year_max	int
=	O
0	int
;	O
int	O
len_dayname_max	int
=	O
0	int
;	O
int	O
len_monthname_max	int
=	O
0	int
;	O
int	O
len_suffix_max	int
=	O
0	int
;	O
int	O
warning_level	int
=	O
SPECIAL_VALUE	O
;	O
int	O
start_day	int
=	O
0	int
;	O
int	O
transform_year	int
=	O
0	int
;	O
int	O
time_hour_offset	int
=	O
0	int
;	O
int	O
time_min_offset	int
=	O
0	int
;	O
int	O
day	int
=	O
0	int
;	O
int	O
month	int
=	O
0	int
;	O
int	O
year	int
=	O
0	int
;	O
int	O
act_sec	int
=	O
0	int
;	O
int	O
act_min	int
=	O
0	int
;	O
int	O
act_hour	int
=	O
0	int
;	O
int	O
act_day	int
=	O
0	int
;	O
int	O
act_month	int
=	O
0	int
;	O
int	O
act_year	int
=	O
0	int
;	O
int	O
buf_ad	int
=	O
0	int
;	O
int	O
buf_am	int
=	O
0	int
;	O
int	O
buf_ay	int
=	O
0	int
;	O
int	O
true_day	int
=	O
0	int
;	O
int	O
true_month	int
=	O
0	int
;	O
int	O
true_year	int
=	O
0	int
;	O
int	O
fiscal_month	int
=	O
MONTH_MIN	int
;	O
int	O
is_tty	int
=	O
0	int
;	O
int	O
is_tty1	int
=	O
0	int
;	O
int	O
is_tty2	int
=	O
0	int
;	O
int	O
tty_rows	int
=	O
SPECIAL_VALUE	O
;	O
int	O
tty_cols	int
=	O
SPECIAL_VALUE	O
;	O
int	O
out_rows	int
=	O
0	int
;	O
int	O
out_cols	int
=	O
0	int
;	O
int	O
format_len	int
=	O
0	int
;	O
int	O
is_leap_year	int
=	O
0	int
;	O
char	O
*	O
tfn	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
email_adr	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
cc	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
yy_lit	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
yyyy_lit	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
mm_lit	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
www_lit	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
dd_lit	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
larg_lit	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
s1	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
s2	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
s3	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
s4	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
prgr_name	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
time_sep	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
translate_string	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
tz	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
ext_pager	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
Bool	int
use_day_suffix	pointer
=	O
FALSE	O
;	O
Bool	int
use_short3_day_name	int
=	O
FALSE	O
;	O
Bool	int
use_day_zeroleaded	int
=	O
FALSE	O
;	O
Bool	int
use_year_zeroleaded	int
=	O
FALSE	O
;	O
Bool	int
hdy_astronomical	int
=	O
FALSE	O
;	O
Bool	int
hdy_bahai	int
=	O
FALSE	O
;	O
Bool	int
hdy_celtic	int
=	O
FALSE	O
;	O
Bool	int
hdy_chinese	int
=	O
FALSE	O
;	O
Bool	int
hdy_chinese_flexible	int
=	O
FALSE	O
;	O
Bool	int
hdy_christian	int
=	O
FALSE	O
;	O
Bool	int
hdy_hebrew	int
=	O
FALSE	O
;	O
Bool	int
hdy_islamic	int
=	O
FALSE	O
;	O
Bool	int
hdy_japanese	int
=	O
FALSE	O
;	O
Bool	int
hdy_japanese_flexible	int
=	O
FALSE	O
;	O
Bool	int
hdy_multicultural_new_year	int
=	O
FALSE	O
;	O
Bool	int
hdy_orthodox_new	int
=	O
FALSE	O
;	O
Bool	int
hdy_orthodox_old	int
=	O
FALSE	O
;	O
Bool	int
hdy_persian	int
=	O
FALSE	O
;	O
Bool	int
hdy_zodiacal_marker	int
=	O
FALSE	O
;	O
Bool	int
mth_bahai	int
=	O
FALSE	O
;	O
Bool	int
mth_chinese	int
=	O
FALSE	O
;	O
Bool	int
mth_chinese_flexible	int
=	O
FALSE	O
;	O
Bool	int
mth_coptic	int
=	O
FALSE	O
;	O
Bool	int
mth_ethiopic	int
=	O
FALSE	O
;	O
Bool	int
mth_french_revolutionary	int
=	O
FALSE	O
;	O
Bool	int
mth_hebrew	int
=	O
FALSE	O
;	O
Bool	int
mth_indian_civil	int
=	O
FALSE	O
;	O
Bool	int
mth_islamic	int
=	O
FALSE	O
;	O
Bool	int
mth_japanese	int
=	O
FALSE	O
;	O
Bool	int
mth_japanese_flexible	int
=	O
FALSE	O
;	O
Bool	int
mth_old_armenic	int
=	O
FALSE	O
;	O
Bool	int
mth_old_egyptic	int
=	O
FALSE	O
;	O
Bool	int
mth_persian	int
=	O
FALSE	O
;	O
Bool	int
orthodox_calendar	int
=	O
FALSE	O
;	O
Bool	int
suppr_cal_flag	int
=	O
FALSE	O
;	O
Bool	int
highlight_flag	int
=	O
TRUE	O
;	O
Bool	int
iso_week_number	int
=	O
FALSE	O
;	O
Bool	int
cal_with_week_number	int
=	O
FALSE	O
;	O
Bool	int
cal_special_flag	int
=	O
FALSE	O
;	O
Bool	int
cal_both_dates_flag	int
=	O
FALSE	O
;	O
Bool	int
holiday_flag	int
=	O
FALSE	O
;	O
Bool	int
hd_legal_days_only	int
=	O
FALSE	O
;	O
Bool	int
hd_sort_des_flag	int
=	O
FALSE	O
;	O
Bool	int
hd_special_flag	int
=	O
FALSE	O
;	O
Bool	int
hd_both_dates_flag	int
=	O
FALSE	O
;	O
Bool	int
hd_suppr_list_sep_flag	int
=	O
FALSE	O
;	O
Bool	int
hd_title_flag	int
=	O
TRUE	O
;	O
Bool	int
is_fiscal_year	int
=	O
FALSE	O
;	O
Bool	int
is_3month_mode	int
=	O
FALSE	O
;	O
Bool	int
is_3month_mode2	int
=	O
FALSE	O
;	O
Bool	int
is_ext_year	int
=	O
FALSE	O
;	O
Bool	int
is_ext_list	int
=	O
FALSE	O
;	O
Bool	int
is_ext_range	int
=	O
FALSE	O
;	O
Bool	int
is_special_range	int
=	O
FALSE	O
;	O
Bool	int
is_multi_range	int
=	O
FALSE	O
;	O
Bool	int
is_en	int
=	O
FALSE	O
;	O
Bool	int
special_calsheet_flag	int
=	O
FALSE	O
;	O
Bool	int
emu_hls	int
=	O
FALSE	O
;	O
Bool	int
pager_flag	int
=	O
FALSE	O
;	O
static	O
pid_t	int
child_pid	int
;	O
static	O
int	O
pipe_fd	array
[	O
2	int
]	O
;	O
static	O
int	O
sys_fd	array
[	O
2	int
]	O
;	O
static	O
Df_struct	struct
users_date_format	struct
;	O
static	O
Uint	int
month_list_max	int
=	O
MONTH_MAX	int
+	O
1	int
;	O
static	O
int	O
lopt_id	int
=	O
0	int
;	O
static	O
int	O
exit_stat_help	int
=	O
EXIT_STAT_HELP	O
;	O
static	O
int	O
buf_start_day	int
=	O
0	int
;	O
static	O
char	O
*	O
*	O
pg_argv	pointer
=	O
(	O
char	O
*	O
*	O
)	O
NULL	O
;	O
static	O
char	O
*	O
pagers	array
[	O
]	O
=	O
{	O
PAGER1_PROG	pointer
,	O
PAGER2_PROG	pointer
,	O
PAGER3_PROG	pointer
,	O
NULL	O
}	O
;	O
static	O
char	O
*	O
shl_filename	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
static	O
char	O
*	O
rsp_filename	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
static	O
char	O
*	O
hl_seq	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
static	O
char	O
*	O
errtxt_dformat	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
static	O
Bool	int
year_flag	int
=	O
FALSE	O
;	O
int	O
main	function
(	O
argc	int
,	O
argv	array
)	O
int	O
argc	int
;	O
char	O
*	O
argv	array
[	O
]	O
;	O
{	O
auto	O
FILE	struct
*	O
fp	pointer
=	O
(	O
FILE	struct
*	O
)	O
NULL	O
;	O
auto	O
Uint	int
my_argc_max	pointer
=	O
MY_ARGC_MAX	int
;	O
auto	O
int	O
my_argc	pointer
=	O
1	int
;	O
auto	O
int	O
i	int
;	O
register	O
int	O
j	int
;	O
auto	O
char	O
*	O
*	O
my_argv	array
=	O
(	O
char	O
*	O
*	O
)	O
NULL	O
;	O
static	O
const	O
char	O
*	O
these_short_opts_need_args	pointer
=	O
"#DFHIPRSbfqrsv"	pointer
;	O
auto	O
char	O
*	O
ptr_char	pointer
;	O
auto	O
char	O
*	O
y_txt	pointer
;	O
auto	O
char	O
*	O
m_txt	pointer
;	O
auto	O
char	O
*	O
w_txt	pointer
;	O
auto	O
char	O
*	O
d_txt	pointer
;	O
auto	O
Bool	int
show_calendar	int
=	O
TRUE	O
;	O
auto	O
Bool	int
b_dummy	int
;	O
testval	int
=	O
INT_MAX	O
;	O
assert	O
(	O
MAXLEN_MAX	int
>=	O
1024	int
)	O
;	O
assert	O
(	O
(	O
Uint	int
)	O
MAXLEN_MAX	int
<=	O
testval	int
)	O
;	O
allocate_all_strings	function
(	O
MAXLEN_MAX	int
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
sprintf	function
(	O
s1	pointer
,	O
"%d"	pointer
,	O
YEAR_MAX	int
)	O
;	O
len_year_max	int
=	O
(	O
int	O
)	O
strlen	function
(	O
s1	pointer
)	O
;	O
assert	O
(	O
my_argc_max	pointer
>	O
0	int
)	O
;	O
assert	O
(	O
my_argc_max	pointer
<=	O
testval	int
)	O
;	O
assert	O
(	O
len_year_max	int
<	O
11	int
)	O
;	O
assert	O
(	O
len_year_max	int
>	O
0	int
)	O
;	O
assert	O
(	O
YEAR_MAX	int
>=	O
YEAR_MIN	int
)	O
;	O
assert	O
(	O
MONTH_MAX	int
==	O
12	int
)	O
;	O
assert	O
(	O
CENTURY	int
==	O
1900	int
)	O
;	O
assert	O
(	O
BUF_LEN	int
>=	O
1	int
)	O
;	O
assert	O
(	O
(	O
Uint	int
)	O
BUF_LEN	int
<	O
testval	int
)	O
;	O
assert	O
(	O
strlen	function
(	O
PACKAGE_NAME	pointer
)	O
>	O
0	int
)	O
;	O
assert	O
(	O
strlen	function
(	O
PACKAGE_VERSION	pointer
)	O
>	O
0	int
)	O
;	O
assert	O
(	O
MY_ARGC_MAX	int
>	O
1	int
)	O
;	O
assert	O
(	O
(	O
Uint	int
)	O
MY_ARGC_MAX	int
<=	O
testval	int
)	O
;	O
assert	O
(	O
HD_ELEMS_MAX	int
>	O
0	int
)	O
;	O
assert	O
(	O
(	O
Uint	int
)	O
HD_ELEMS_MAX	int
<=	O
testval	int
)	O
;	O
assert	O
(	O
FWIDTH_MAX	int
>	O
0	int
)	O
;	O
setlocale	function
(	O
LC_ALL	O
,	O
""	pointer
)	O
;	O
bindtextdomain	function
(	O
PACKAGE	pointer
,	O
LOCALEDIR	O
)	O
;	O
textdomain	function
(	O
PACKAGE	pointer
)	O
;	O
ptr_char	pointer
=	O
getenv	function
(	O
ENV_VAR_LANGUAGE	pointer
)	O
;	O
if	O
(	O
ptr_char	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
if	O
(	O
!	O
*	O
ptr_char	pointer
)	O
ptr_char	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
if	O
(	O
ptr_char	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
ptr_char	pointer
=	O
getenv	function
(	O
ENV_VAR_LC_ALL	pointer
)	O
;	O
if	O
(	O
ptr_char	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
if	O
(	O
!	O
*	O
ptr_char	pointer
)	O
ptr_char	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
if	O
(	O
ptr_char	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
ptr_char	pointer
=	O
getenv	function
(	O
ENV_VAR_LANG	pointer
)	O
;	O
if	O
(	O
ptr_char	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
if	O
(	O
!	O
*	O
ptr_char	pointer
)	O
ptr_char	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
if	O
(	O
ptr_char	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
if	O
(	O
*	O
ptr_char	pointer
)	O
{	O
strncpy	function
(	O
s1	pointer
,	O
ptr_char	pointer
,	O
6	int
)	O
;	O
s1	pointer
[	O
5	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
strncasecmp	function
(	O
s1	pointer
,	O
"de"	pointer
,	O
2	int
)	O
)	O
is_en	int
=	O
FALSE	O
;	O
else	O
if	O
(	O
!	O
strncasecmp	function
(	O
s1	pointer
,	O
"en"	pointer
,	O
2	int
)	O
)	O
is_en	int
=	O
TRUE	O
;	O
else	O
if	O
(	O
!	O
strncasecmp	function
(	O
s1	pointer
,	O
"posix"	pointer
,	O
5	int
)	O
||	O
!	O
strcasecmp	function
(	O
s1	pointer
,	O
"c"	pointer
)	O
)	O
is_en	int
=	O
TRUE	O
;	O
}	O
else	O
is_en	int
=	O
TRUE	O
;	O
}	O
else	O
is_en	int
=	O
TRUE	O
;	O
if	O
(	O
is_en	int
)	O
{	O
special_calsheet_flag	int
=	O
TRUE	O
;	O
iso_week_number	int
=	O
FALSE	O
;	O
out_rows	int
=	O
J_OUT_ROWS	int
;	O
greg	pointer
+=	O
2	int
;	O
date_format	pointer
++	O
;	O
if	O
(	O
ptr_char	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
if	O
(	O
*	O
ptr_char	pointer
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
3	int
;	O
i	int
++	O
)	O
if	O
(	O
*	O
ptr_char	pointer
)	O
ptr_char	pointer
++	O
;	O
if	O
(	O
*	O
ptr_char	pointer
)	O
{	O
strncpy	function
(	O
s1	pointer
,	O
ptr_char	pointer
,	O
3	int
)	O
;	O
s1	pointer
[	O
2	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
strcasecmp	function
(	O
s1	pointer
,	O
CC_GB	pointer
)	O
)	O
date_format	pointer
++	O
;	O
}	O
}	O
}	O
else	O
{	O
special_calsheet_flag	int
=	O
FALSE	O
;	O
iso_week_number	int
=	O
TRUE	O
;	O
out_rows	int
=	O
S_OUT_ROWS	int
;	O
}	O
if	O
(	O
!	O
is_correct_date_format	function
(	O
date_format	pointer
->	O
df_format	pointer
,	O
&	O
use_day_suffix	pointer
,	O
&	O
use_short3_day_name	int
,	O
&	O
use_day_zeroleaded	int
,	O
&	O
use_year_zeroleaded	int
)	O
)	O
errtxt_dformat	pointer
=	O
_	O
(	O
"default"	pointer
)	O
;	O
is_tty1	int
=	O
isatty	function
(	O
1	int
)	O
;	O
is_tty2	int
=	O
isatty	function
(	O
2	int
)	O
;	O
is_tty	int
=	O
(	O
is_tty1	int
&&	O
is_tty2	int
)	O
;	O
if	O
(	O
is_tty	int
)	O
{	O
dup2	function
(	O
0	int
,	O
sys_fd	array
[	O
0	int
]	O
)	O
;	O
dup2	function
(	O
1	int
,	O
sys_fd	array
[	O
1	int
]	O
)	O
;	O
}	O
i	int
=	O
(	O
int	O
)	O
strlen	function
(	O
*	O
argv	array
)	O
;	O
if	O
(	O
(	O
Uint	int
)	O
i	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
i	int
+	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
if	O
(	O
!	O
i	int
)	O
strcpy	function
(	O
s3	pointer
,	O
PACKAGE_NAME	pointer
)	O
;	O
else	O
strcpy	function
(	O
s3	pointer
,	O
*	O
argv	array
)	O
;	O
i	int
=	O
(	O
int	O
)	O
strlen	function
(	O
s3	pointer
)	O
;	O
ptr_char	pointer
=	O
strrchr	function
(	O
s3	pointer
,	O
*	O
DIR_SEP	pointer
)	O
;	O
if	O
(	O
ptr_char	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
ptr_char	pointer
++	O
;	O
i	int
=	O
(	O
int	O
)	O
strlen	function
(	O
ptr_char	pointer
)	O
;	O
}	O
else	O
ptr_char	pointer
=	O
s3	pointer
;	O
if	O
(	O
tolower	function
(	O
'A'	O
)	O
==	O
'a'	O
)	O
{	O
auto	O
char	O
*	O
buf_ptr_char	pointer
=	O
ptr_char	pointer
;	O
for	O
(	O
;	O
*	O
ptr_char	pointer
;	O
ptr_char	pointer
++	O
)	O
*	O
ptr_char	pointer
=	O
(	O
char	O
)	O
tolower	function
(	O
*	O
ptr_char	pointer
)	O
;	O
ptr_char	pointer
=	O
buf_ptr_char	pointer
;	O
}	O
if	O
(	O
(	O
i	int
>	O
4	int
)	O
&&	O
!	O
strcmp	function
(	O
ptr_char	pointer
+	O
i	int
-	O
4	int
,	O
".exe"	pointer
)	O
)	O
{	O
i	int
-=	O
4	int
;	O
*	O
(	O
ptr_char	pointer
+	O
i	int
)	O
=	O
'\0'	O
;	O
}	O
prgr_name	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
i	int
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
1L	int
,	O
"prgr_name"	pointer
,	O
0	int
)	O
;	O
strcpy	function
(	O
prgr_name	pointer
,	O
ptr_char	pointer
)	O
;	O
if	O
(	O
signal	function
(	O
SIGINT	int
,	O
SIG_IGN	O
)	O
!=	O
SIG_IGN	O
)	O
(	O
void	O
)	O
signal	function
(	O
SIGINT	int
,	O
(	O
Sig_type	pointer
)	O
handle_signal	function
)	O
;	O
if	O
(	O
signal	function
(	O
SIGTERM	int
,	O
SIG_IGN	O
)	O
!=	O
SIG_IGN	O
)	O
(	O
void	O
)	O
signal	function
(	O
SIGTERM	int
,	O
(	O
Sig_type	pointer
)	O
handle_signal	function
)	O
;	O
if	O
(	O
signal	function
(	O
SIGHUP	int
,	O
SIG_IGN	O
)	O
!=	O
SIG_IGN	O
)	O
(	O
void	O
)	O
signal	function
(	O
SIGHUP	int
,	O
(	O
Sig_type	pointer
)	O
handle_signal	function
)	O
;	O
time_sep	pointer
=	O
_	O
(	O
":"	pointer
)	O
;	O
y_txt	pointer
=	O
_	O
(	O
"Y"	pointer
)	O
;	O
m_txt	pointer
=	O
_	O
(	O
"M"	pointer
)	O
;	O
w_txt	pointer
=	O
_	O
(	O
"W"	pointer
)	O
;	O
d_txt	pointer
=	O
_	O
(	O
"D"	pointer
)	O
;	O
yy_lit	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
3	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
1L	int
,	O
"yy_lit"	pointer
,	O
0	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
2	int
;	O
i	int
++	O
)	O
yy_lit	pointer
[	O
i	int
]	O
=	O
(	O
char	O
)	O
toupper	function
(	O
*	O
y_txt	pointer
)	O
;	O
yy_lit	pointer
[	O
i	int
]	O
=	O
'\0'	O
;	O
yyyy_lit	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
len_year_max	int
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
1L	int
,	O
"yyyy_lit"	pointer
,	O
0	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len_year_max	int
;	O
i	int
++	O
)	O
yyyy_lit	pointer
[	O
i	int
]	O
=	O
(	O
char	O
)	O
toupper	function
(	O
*	O
y_txt	pointer
)	O
;	O
yyyy_lit	pointer
[	O
i	int
]	O
=	O
'\0'	O
;	O
mm_lit	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
3	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
1L	int
,	O
"mm_lit"	pointer
,	O
0	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
2	int
;	O
i	int
++	O
)	O
mm_lit	pointer
[	O
i	int
]	O
=	O
(	O
char	O
)	O
toupper	function
(	O
*	O
m_txt	pointer
)	O
;	O
mm_lit	pointer
[	O
i	int
]	O
=	O
'\0'	O
;	O
www_lit	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
4	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
1L	int
,	O
"www_lit"	pointer
,	O
0	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
3	int
;	O
i	int
++	O
)	O
www_lit	pointer
[	O
i	int
]	O
=	O
(	O
char	O
)	O
toupper	function
(	O
*	O
w_txt	pointer
)	O
;	O
www_lit	pointer
[	O
i	int
]	O
=	O
'\0'	O
;	O
dd_lit	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
3	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
1L	int
,	O
"dd_lit"	pointer
,	O
0	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
2	int
;	O
i	int
++	O
)	O
dd_lit	pointer
[	O
i	int
]	O
=	O
(	O
char	O
)	O
toupper	function
(	O
*	O
d_txt	pointer
)	O
;	O
dd_lit	pointer
[	O
i	int
]	O
=	O
'\0'	O
;	O
larg_lit	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
4	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
1L	int
,	O
"larg_lit"	pointer
,	O
0	int
)	O
;	O
strncpy	function
(	O
larg_lit	pointer
,	O
_	O
(	O
"ARG"	pointer
)	O
,	O
4	int
)	O
;	O
larg_lit	pointer
[	O
3	int
]	O
=	O
'\0'	O
;	O
my_argv	array
=	O
(	O
char	O
*	O
*	O
)	O
my_malloc	function
(	O
MY_ARGC_MAX	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"my_argv[MY_ARGC_MAX]"	pointer
,	O
MY_ARGC_MAX	int
)	O
;	O
month_list	pointer
=	O
(	O
Ml_struct	struct
*	O
)	O
my_malloc	function
(	O
(	O
MONTH_MAX	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
Ml_struct	struct
)	O
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"month_list[MONTH_MAX+1]"	pointer
,	O
MONTH_MAX	int
+	O
1	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
MONTH_MAX	int
;	O
i	int
++	O
)	O
month_list	pointer
[	O
i	int
]	O
.	O
ml_year	int
=	O
month_list	pointer
[	O
i	int
]	O
.	O
ml_month	int
=	O
0	int
;	O
lineptrs	pointer
=	O
(	O
Line_struct	struct
*	O
)	O
my_malloc	function
(	O
sizeof	O
(	O
Line_struct	struct
)	O
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"lineptrs"	pointer
,	O
0	int
)	O
;	O
lptrs3	pointer
=	O
(	O
Line_struct	struct
*	O
)	O
my_malloc	function
(	O
sizeof	O
(	O
Line_struct	struct
)	O
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"lptrs3"	pointer
,	O
0	int
)	O
;	O
ptr_char	pointer
=	O
_	O
(	O
"Fixed date list:"	pointer
)	O
;	O
rc_heading_text	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
strlen	function
(	O
ptr_char	pointer
)	O
+	O
1	int
+	O
2	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"rc_heading_text"	pointer
,	O
0	int
)	O
;	O
strcpy	function
(	O
rc_heading_text	pointer
,	O
"0 "	pointer
)	O
;	O
strcat	function
(	O
rc_heading_text	pointer
,	O
ptr_char	pointer
)	O
;	O
ptr_char	pointer
=	O
getenv	function
(	O
ENV_VAR_GCAL_DATE_FORMAT	pointer
)	O
;	O
if	O
(	O
ptr_char	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
if	O
(	O
*	O
ptr_char	pointer
)	O
{	O
users_date_format	struct
.	O
df_info	pointer
=	O
_	O
(	O
"environment variable"	pointer
)	O
;	O
users_date_format	struct
.	O
df_format	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
strlen	function
(	O
ptr_char	pointer
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"users_date_format.df_format"	pointer
,	O
0	int
)	O
;	O
strcpy	function
(	O
users_date_format	struct
.	O
df_format	pointer
,	O
ptr_char	pointer
)	O
;	O
date_format	pointer
=	O
&	O
users_date_format	struct
;	O
if	O
(	O
!	O
is_correct_date_format	function
(	O
date_format	pointer
->	O
df_format	pointer
,	O
&	O
use_day_suffix	pointer
,	O
&	O
use_short3_day_name	int
,	O
&	O
use_day_zeroleaded	int
,	O
&	O
use_year_zeroleaded	int
)	O
)	O
errtxt_dformat	pointer
=	O
_	O
(	O
"environment variable"	pointer
)	O
;	O
else	O
errtxt_dformat	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
tz	pointer
=	O
getenv	function
(	O
ENV_VAR_TZ	pointer
)	O
;	O
if	O
(	O
tz	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
if	O
(	O
!	O
*	O
tz	pointer
)	O
tz	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
ptr_char	pointer
=	O
getenv	function
(	O
ENV_VAR_GCAL	pointer
)	O
;	O
if	O
(	O
ptr_char	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
if	O
(	O
*	O
ptr_char	pointer
)	O
{	O
while	O
(	O
isspace	function
(	O
*	O
ptr_char	pointer
)	O
)	O
ptr_char	pointer
++	O
;	O
i	int
=	O
0	int
;	O
while	O
(	O
*	O
ptr_char	pointer
)	O
{	O
if	O
(	O
(	O
Uint	int
)	O
i	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
s1	pointer
[	O
i	int
++	O
]	O
=	O
*	O
ptr_char	pointer
++	O
;	O
if	O
(	O
!	O
*	O
ptr_char	pointer
||	O
isspace	function
(	O
*	O
ptr_char	pointer
)	O
)	O
{	O
s1	pointer
[	O
i	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
*	O
s1	pointer
==	O
*	O
SWITCH	pointer
||	O
*	O
s1	pointer
==	O
*	O
SWITCH2	pointer
||	O
*	O
s1	pointer
==	O
RC_ADATE_CHAR	char
||	O
*	O
s1	pointer
==	O
RSP_CHAR	char
)	O
{	O
if	O
(	O
i	int
==	O
1	int
||	O
(	O
(	O
i	int
==	O
2	int
)	O
&&	O
(	O
s1	pointer
[	O
1	int
]	O
==	O
*	O
SWITCH	pointer
||	O
s1	pointer
[	O
1	int
]	O
==	O
RC_ADATE_CHAR	char
||	O
s1	pointer
[	O
1	int
]	O
==	O
*	O
SWITCH2	pointer
)	O
)	O
)	O
;	O
else	O
{	O
if	O
(	O
*	O
s1	pointer
==	O
RSP_CHAR	char
)	O
{	O
rsp_filename	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
strlen	function
(	O
s1	pointer
)	O
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"rsp_filename"	pointer
,	O
0	int
)	O
;	O
strcpy	function
(	O
rsp_filename	pointer
,	O
s1	pointer
+	O
1	int
)	O
;	O
fp	pointer
=	O
file_open	function
(	O
&	O
rsp_filename	pointer
,	O
0	int
,	O
REsponse	int
,	O
&	O
b_dummy	int
)	O
;	O
if	O
(	O
fp	pointer
!=	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
{	O
my_argv	array
=	O
insert_response_file	function
(	O
fp	pointer
,	O
rsp_filename	pointer
,	O
these_short_opts_need_args	pointer
,	O
&	O
my_argc_max	pointer
,	O
&	O
my_argc	pointer
,	O
my_argv	array
)	O
;	O
(	O
void	O
)	O
fclose	function
(	O
fp	pointer
)	O
;	O
}	O
free	function
(	O
rsp_filename	pointer
)	O
;	O
rsp_filename	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
else	O
{	O
if	O
(	O
(	O
*	O
s1	pointer
==	O
*	O
SWITCH	pointer
||	O
*	O
s1	pointer
==	O
*	O
SWITCH2	pointer
)	O
&&	O
(	O
s1	pointer
[	O
1	int
]	O
!=	O
*	O
SWITCH	pointer
)	O
)	O
{	O
if	O
(	O
(	O
strchr	function
(	O
these_short_opts_need_args	pointer
,	O
s1	pointer
[	O
1	int
]	O
)	O
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
&&	O
!	O
s1	pointer
[	O
2	int
]	O
)	O
{	O
while	O
(	O
isspace	function
(	O
*	O
ptr_char	pointer
)	O
)	O
ptr_char	pointer
++	O
;	O
while	O
(	O
*	O
ptr_char	pointer
&&	O
!	O
isspace	function
(	O
*	O
ptr_char	pointer
)	O
)	O
{	O
if	O
(	O
(	O
Uint	int
)	O
i	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
s1	pointer
[	O
i	int
++	O
]	O
=	O
*	O
ptr_char	pointer
++	O
;	O
}	O
s1	pointer
[	O
i	int
]	O
=	O
'\0'	O
;	O
}	O
}	O
if	O
(	O
(	O
Uint	int
)	O
my_argc	pointer
>=	O
my_argc_max	pointer
)	O
{	O
my_argc_max	pointer
<<=	O
1	int
;	O
if	O
(	O
my_argc_max	pointer
*	O
sizeof	O
(	O
char	O
*	O
)	O
>	O
testval	int
)	O
my_argc_max	pointer
--	O
;	O
my_argv	array
=	O
(	O
char	O
*	O
*	O
)	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
my_argv	array
,	O
my_argc_max	pointer
*	O
sizeof	O
(	O
char	O
*	O
)	O
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"my_argv[my_argc_max]"	pointer
,	O
my_argc_max	pointer
)	O
;	O
}	O
my_argv	array
[	O
my_argc	pointer
]	O
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
i	int
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"my_argv[my_argc]"	pointer
,	O
my_argc	pointer
)	O
;	O
strcpy	function
(	O
my_argv	array
[	O
my_argc	pointer
++	O
]	O
,	O
s1	pointer
)	O
;	O
}	O
}	O
while	O
(	O
isspace	function
(	O
*	O
ptr_char	pointer
)	O
)	O
ptr_char	pointer
++	O
;	O
i	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
i	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: command in environment variable `%s' found -- %s\n%s\n%s\n"	pointer
)	O
,	O
prgr_name	pointer
,	O
ENV_VAR_GCAL	pointer
,	O
s1	pointer
,	O
usage_msg	function
(	O
)	O
,	O
lopt_msg	function
(	O
)	O
)	O
;	O
exit	function
(	O
ERR_INVALID_OPTION	int
)	O
;	O
}	O
}	O
}	O
}	O
}	O
while	O
(	O
argc	int
>	O
1	int
)	O
{	O
argv	array
++	O
;	O
if	O
(	O
*	O
*	O
argv	array
==	O
RSP_CHAR	char
)	O
{	O
rsp_filename	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
strlen	function
(	O
*	O
argv	array
)	O
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"rsp_filename"	pointer
,	O
0	int
)	O
;	O
strcpy	function
(	O
rsp_filename	pointer
,	O
*	O
argv	array
+	O
1	int
)	O
;	O
fp	pointer
=	O
file_open	function
(	O
&	O
rsp_filename	pointer
,	O
0	int
,	O
REsponse	int
,	O
&	O
b_dummy	int
)	O
;	O
if	O
(	O
fp	pointer
!=	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
{	O
my_argv	array
=	O
insert_response_file	function
(	O
fp	pointer
,	O
rsp_filename	pointer
,	O
these_short_opts_need_args	pointer
,	O
&	O
my_argc_max	pointer
,	O
&	O
my_argc	pointer
,	O
my_argv	array
)	O
;	O
(	O
void	O
)	O
fclose	function
(	O
fp	pointer
)	O
;	O
}	O
free	function
(	O
rsp_filename	pointer
)	O
;	O
rsp_filename	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
else	O
{	O
register	O
int	O
len	int
=	O
(	O
int	O
)	O
strlen	function
(	O
*	O
argv	array
)	O
;	O
if	O
(	O
(	O
(	O
len	int
==	O
1	int
)	O
&&	O
(	O
*	O
*	O
argv	array
==	O
*	O
SWITCH	pointer
||	O
*	O
*	O
argv	array
==	O
RC_ADATE_CHAR	char
||	O
*	O
*	O
argv	array
==	O
*	O
SWITCH2	pointer
)	O
)	O
||	O
(	O
(	O
len	int
==	O
2	int
)	O
&&	O
(	O
*	O
*	O
argv	array
==	O
*	O
SWITCH	pointer
||	O
*	O
*	O
argv	array
==	O
RC_ADATE_CHAR	char
||	O
*	O
*	O
argv	array
==	O
*	O
SWITCH2	pointer
)	O
&&	O
(	O
*	O
(	O
*	O
argv	array
+	O
1	int
)	O
==	O
*	O
SWITCH	pointer
||	O
*	O
(	O
*	O
argv	array
+	O
1	int
)	O
==	O
RC_ADATE_CHAR	char
||	O
*	O
(	O
*	O
argv	array
+	O
1	int
)	O
==	O
*	O
SWITCH2	pointer
)	O
)	O
)	O
;	O
else	O
{	O
if	O
(	O
(	O
Uint	int
)	O
my_argc	pointer
>=	O
my_argc_max	pointer
)	O
{	O
my_argc_max	pointer
<<=	O
1	int
;	O
if	O
(	O
my_argc_max	pointer
*	O
sizeof	O
(	O
char	O
*	O
)	O
>	O
testval	int
)	O
my_argc_max	pointer
--	O
;	O
my_argv	array
=	O
(	O
char	O
*	O
*	O
)	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
my_argv	array
,	O
my_argc_max	pointer
*	O
sizeof	O
(	O
char	O
*	O
)	O
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"my_argv[my_argc_max]"	pointer
,	O
my_argc_max	pointer
)	O
;	O
}	O
my_argv	array
[	O
my_argc	pointer
]	O
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
len	int
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"my_argv[my_argc]"	pointer
,	O
my_argc	pointer
)	O
;	O
strcpy	function
(	O
my_argv	array
[	O
my_argc	pointer
++	O
]	O
,	O
*	O
argv	array
)	O
;	O
}	O
}	O
argc	int
--	O
;	O
}	O
if	O
(	O
my_argc	pointer
>	O
1	int
)	O
{	O
rearrange_argv	function
(	O
these_short_opts_need_args	pointer
,	O
&	O
my_argc	pointer
,	O
my_argv	array
)	O
;	O
i	int
=	O
1	int
;	O
while	O
(	O
i	int
<	O
my_argc	pointer
)	O
{	O
ptr_char	pointer
=	O
my_argv	array
[	O
i	int
]	O
;	O
if	O
(	O
*	O
ptr_char	pointer
==	O
*	O
SWITCH	pointer
||	O
*	O
ptr_char	pointer
==	O
*	O
SWITCH2	pointer
)	O
{	O
ptr_char	pointer
++	O
;	O
if	O
(	O
*	O
ptr_char	pointer
==	O
*	O
SWITCH	pointer
)	O
{	O
ptr_char	pointer
++	O
;	O
j	int
=	O
(	O
int	O
)	O
strlen	function
(	O
ptr_char	pointer
)	O
;	O
if	O
(	O
(	O
Uint	int
)	O
j	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
j	int
+	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
strcpy	function
(	O
s3	pointer
,	O
ptr_char	pointer
)	O
;	O
if	O
(	O
!	O
eval_longopt	function
(	O
s3	pointer
,	O
&	O
lopt_id	int
)	O
)	O
ptr_char	pointer
=	O
s3	pointer
;	O
else	O
ptr_char	pointer
=	O
s3	pointer
+	O
strlen	function
(	O
s3	pointer
)	O
;	O
}	O
else	O
lopt_id	int
=	O
SYM_NIL	int
;	O
if	O
(	O
lopt_id	int
==	O
SYM_DEBUG	int
)	O
warning_level	int
=	O
my_atoi	function
(	O
ptr_char	pointer
)	O
;	O
else	O
if	O
(	O
lopt_id	int
==	O
SYM_EXECUTE_COMMAND	int
)	O
rc_execute_command	int
=	O
TRUE	O
;	O
else	O
if	O
(	O
*	O
ptr_char	pointer
==	O
'r'	O
)	O
{	O
ptr_char	pointer
++	O
;	O
while	O
(	O
*	O
ptr_char	pointer
)	O
{	O
j	int
=	O
0	int
;	O
while	O
(	O
*	O
ptr_char	pointer
&&	O
(	O
*	O
ptr_char	pointer
!=	O
*	O
SEP	pointer
)	O
)	O
{	O
if	O
(	O
(	O
Uint	int
)	O
j	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
s1	pointer
[	O
j	int
++	O
]	O
=	O
*	O
ptr_char	pointer
++	O
;	O
if	O
(	O
(	O
*	O
ptr_char	pointer
==	O
*	O
SEP	pointer
)	O
&&	O
(	O
s1	pointer
[	O
j	int
-	O
1	int
]	O
==	O
QUOTE_CHAR	char
)	O
)	O
s1	pointer
[	O
j	int
-	O
1	int
]	O
=	O
*	O
ptr_char	pointer
++	O
;	O
}	O
s1	pointer
[	O
j	int
]	O
=	O
'\0'	O
;	O
pseudo_blank_conversion	function
(	O
&	O
s1	pointer
)	O
;	O
set_tvar	function
(	O
s1	pointer
,	O
_	O
(	O
"Internal"	pointer
)	O
,	O
0L	int
,	O
GLobal	int
)	O
;	O
if	O
(	O
*	O
ptr_char	pointer
)	O
ptr_char	pointer
++	O
;	O
}	O
}	O
else	O
if	O
(	O
*	O
ptr_char	pointer
==	O
'v'	O
)	O
{	O
ptr_char	pointer
++	O
;	O
while	O
(	O
*	O
ptr_char	pointer
)	O
{	O
j	int
=	O
0	int
;	O
while	O
(	O
*	O
ptr_char	pointer
&&	O
(	O
*	O
ptr_char	pointer
!=	O
*	O
SEP	pointer
)	O
)	O
{	O
if	O
(	O
(	O
Uint	int
)	O
j	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
s1	pointer
[	O
j	int
++	O
]	O
=	O
*	O
ptr_char	pointer
++	O
;	O
}	O
s1	pointer
[	O
j	int
]	O
=	O
'\0'	O
;	O
set_dvar	function
(	O
s1	pointer
,	O
lineptrs	pointer
,	O
_	O
(	O
"Internal"	pointer
)	O
,	O
0L	int
,	O
GLobal	int
)	O
;	O
if	O
(	O
*	O
ptr_char	pointer
)	O
ptr_char	pointer
++	O
;	O
}	O
}	O
}	O
if	O
(	O
(	O
*	O
my_argv	array
[	O
i	int
]	O
!=	O
*	O
SWITCH	pointer
)	O
&&	O
(	O
*	O
my_argv	array
[	O
i	int
]	O
!=	O
*	O
SWITCH2	pointer
)	O
&&	O
(	O
*	O
my_argv	array
[	O
i	int
]	O
!=	O
RC_ADATE_CHAR	char
)	O
&&	O
(	O
*	O
my_argv	array
[	O
i	int
]	O
!=	O
RSP_CHAR	char
)	O
)	O
break	O
;	O
i	int
++	O
;	O
}	O
}	O
if	O
(	O
my_argc	pointer
>	O
1	int
)	O
{	O
i	int
=	O
1	int
;	O
while	O
(	O
i	int
<	O
my_argc	pointer
)	O
{	O
if	O
(	O
*	O
my_argv	array
[	O
i	int
]	O
==	O
RC_ADATE_CHAR	char
)	O
rc_adate	pointer
=	O
my_argv	array
[	O
i	int
]	O
+	O
1	int
;	O
if	O
(	O
(	O
*	O
my_argv	array
[	O
i	int
]	O
!=	O
*	O
SWITCH	pointer
)	O
&&	O
(	O
*	O
my_argv	array
[	O
i	int
]	O
!=	O
*	O
SWITCH2	pointer
)	O
&&	O
(	O
*	O
my_argv	array
[	O
i	int
]	O
!=	O
RC_ADATE_CHAR	char
)	O
)	O
break	O
;	O
i	int
++	O
;	O
}	O
}	O
if	O
(	O
is_tty	int
)	O
{	O
ptr_char	pointer
=	O
getenv	function
(	O
ENV_VAR_PAGER	pointer
)	O
;	O
if	O
(	O
ptr_char	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
if	O
(	O
*	O
ptr_char	pointer
)	O
{	O
while	O
(	O
isspace	function
(	O
*	O
ptr_char	pointer
)	O
)	O
ptr_char	pointer
++	O
;	O
i	int
=	O
(	O
int	O
)	O
strlen	function
(	O
ptr_char	pointer
)	O
;	O
if	O
(	O
(	O
Uint	int
)	O
i	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
i	int
+	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
strcpy	function
(	O
s3	pointer
,	O
ptr_char	pointer
)	O
;	O
if	O
(	O
*	O
ptr_char	pointer
!=	O
*	O
DIR_SEP	pointer
)	O
{	O
ptr_char	pointer
=	O
strrchr	function
(	O
s3	pointer
,	O
*	O
DIR_SEP	pointer
)	O
;	O
if	O
(	O
ptr_char	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
ptr_char	pointer
++	O
;	O
else	O
ptr_char	pointer
=	O
s3	pointer
;	O
}	O
j	int
=	O
strlen	function
(	O
ptr_char	pointer
)	O
;	O
ext_pager	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
j	int
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"ext_pager"	pointer
,	O
0	int
)	O
;	O
strcpy	function
(	O
ext_pager	pointer
,	O
ptr_char	pointer
)	O
;	O
i	int
=	O
0	int
;	O
while	O
(	O
ext_pager	pointer
[	O
i	int
]	O
&&	O
!	O
isspace	function
(	O
ext_pager	pointer
[	O
i	int
]	O
)	O
)	O
i	int
++	O
;	O
ext_pager	pointer
[	O
i	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
*	O
ext_pager	pointer
==	O
*	O
DIR_SEP	pointer
)	O
{	O
auto	O
struct	O
stat	struct
statbuf	struct
;	O
if	O
(	O
!	O
stat	struct
(	O
ext_pager	pointer
,	O
&	O
statbuf	struct
)	O
)	O
if	O
(	O
(	O
statbuf	struct
.	O
st_mode	int
&	O
S_IFMT	O
)	O
==	O
S_IFREG	O
)	O
fp	pointer
=	O
fopen	function
(	O
ext_pager	pointer
,	O
"r"	pointer
)	O
;	O
}	O
else	O
fp	pointer
=	O
file_open	function
(	O
&	O
ext_pager	pointer
,	O
0	int
,	O
COmmon	int
,	O
&	O
b_dummy	int
)	O
;	O
if	O
(	O
fp	pointer
==	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
{	O
free	function
(	O
ext_pager	pointer
)	O
;	O
ext_pager	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
else	O
{	O
(	O
void	O
)	O
fclose	function
(	O
fp	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
j	int
)	O
{	O
register	O
Uint	int
pg_argc_max	int
=	O
MY_ARGC_MAX	int
;	O
register	O
int	O
pg_argc	int
=	O
0	int
;	O
register	O
int	O
k	int
=	O
j	int
;	O
pg_argv	pointer
=	O
(	O
char	O
*	O
*	O
)	O
my_malloc	function
(	O
MY_ARGC_MAX	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"pg_argv[MY_ARGC_MAX]"	pointer
,	O
MY_ARGC_MAX	int
)	O
;	O
pg_argv	pointer
[	O
pg_argc	int
]	O
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
i	int
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"pg_argv[pg_argc]"	pointer
,	O
pg_argc	int
)	O
;	O
strcpy	function
(	O
pg_argv	pointer
[	O
pg_argc	int
++	O
]	O
,	O
ext_pager	pointer
)	O
;	O
j	int
=	O
i	int
+	O
1	int
;	O
LOOP	O
{	O
if	O
(	O
(	O
Uint	int
)	O
pg_argc	int
>=	O
pg_argc_max	int
)	O
{	O
pg_argc_max	int
<<=	O
1	int
;	O
if	O
(	O
pg_argc_max	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
>	O
testval	int
)	O
pg_argc_max	int
--	O
;	O
pg_argv	pointer
=	O
(	O
char	O
*	O
*	O
)	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
pg_argv	pointer
,	O
pg_argc_max	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"pg_argv[pg_argc_max]"	pointer
,	O
pg_argc_max	int
)	O
;	O
}	O
while	O
(	O
isspace	function
(	O
ext_pager	pointer
[	O
j	int
]	O
)	O
)	O
j	int
++	O
;	O
if	O
(	O
!	O
ext_pager	pointer
[	O
j	int
]	O
)	O
break	O
;	O
ptr_char	pointer
=	O
ext_pager	pointer
+	O
j	int
;	O
while	O
(	O
*	O
ptr_char	pointer
&&	O
!	O
isspace	function
(	O
*	O
ptr_char	pointer
)	O
)	O
ptr_char	pointer
++	O
;	O
if	O
(	O
!	O
*	O
ptr_char	pointer
)	O
ptr_char	pointer
=	O
ext_pager	pointer
+	O
k	int
;	O
i	int
=	O
ptr_char	pointer
-	O
(	O
ext_pager	pointer
+	O
j	int
)	O
;	O
if	O
(	O
!	O
i	int
)	O
break	O
;	O
*	O
ptr_char	pointer
=	O
'\0'	O
;	O
pg_argv	pointer
[	O
pg_argc	int
]	O
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
i	int
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"pg_argv[pg_argc]"	pointer
,	O
pg_argc	int
)	O
;	O
strcpy	function
(	O
pg_argv	pointer
[	O
pg_argc	int
++	O
]	O
,	O
ext_pager	pointer
+	O
j	int
)	O
;	O
j	int
+=	O
i	int
;	O
if	O
(	O
j	int
>=	O
k	int
)	O
break	O
;	O
j	int
++	O
;	O
}	O
if	O
(	O
(	O
Uint	int
)	O
pg_argc	int
>=	O
pg_argc_max	int
)	O
{	O
pg_argc_max	int
<<=	O
1	int
;	O
if	O
(	O
pg_argc_max	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
>	O
testval	int
)	O
pg_argc_max	int
--	O
;	O
pg_argv	pointer
=	O
(	O
char	O
*	O
*	O
)	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
pg_argv	pointer
,	O
pg_argc_max	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"pg_argv[pg_argc_max]"	pointer
,	O
pg_argc_max	int
)	O
;	O
}	O
pg_argv	pointer
[	O
pg_argc	int
]	O
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
ext_pager	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
i	int
=	O
0	int
;	O
while	O
(	O
pagers	array
[	O
i	int
]	O
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
ext_pager	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
strlen	function
(	O
pagers	array
[	O
i	int
]	O
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"ext_pager"	pointer
,	O
0	int
)	O
;	O
strcpy	function
(	O
ext_pager	pointer
,	O
pagers	array
[	O
i	int
]	O
)	O
;	O
fp	pointer
=	O
file_open	function
(	O
&	O
ext_pager	pointer
,	O
0	int
,	O
COmmon	int
,	O
&	O
b_dummy	int
)	O
;	O
if	O
(	O
fp	pointer
!=	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
{	O
(	O
void	O
)	O
fclose	function
(	O
fp	pointer
)	O
;	O
break	O
;	O
}	O
free	function
(	O
ext_pager	pointer
)	O
;	O
ext_pager	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
i	int
++	O
;	O
}	O
}	O
if	O
(	O
ext_pager	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
fflush	function
(	O
stdout	pointer
)	O
;	O
if	O
(	O
pipe	function
(	O
pipe_fd	array
)	O
<	O
0	int
)	O
my_error	function
(	O
ERR_INTERNAL_C_FUNC_FAILURE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
4L	int
,	O
"pipe()<"	pointer
,	O
0	int
)	O
;	O
(	O
void	O
)	O
signal	function
(	O
SIGPIPE	int
,	O
SIG_IGN	O
)	O
;	O
}	O
}	O
check_command_line	function
(	O
my_argc	pointer
,	O
my_argv	array
)	O
;	O
if	O
(	O
errtxt_dformat	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
my_error	function
(	O
ERR_INVALID_DATE_FORMAT	int
,	O
errtxt_dformat	pointer
,	O
0	int
,	O
date_format	pointer
->	O
df_format	pointer
,	O
0	int
)	O
;	O
if	O
(	O
email_adr	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
ptr_char	pointer
=	O
TMPFILENAME	O
;	O
if	O
(	O
ptr_char	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
my_error	function
(	O
ERR_INTERNAL_C_FUNC_FAILURE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"tmpnam()="	pointer
,	O
0	int
)	O
;	O
tfn	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
strlen	function
(	O
ptr_char	pointer
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"tfn"	pointer
,	O
0	int
)	O
;	O
strcpy	function
(	O
tfn	pointer
,	O
ptr_char	pointer
)	O
;	O
tfp	pointer
=	O
fopen	function
(	O
tfn	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
tfp	pointer
==	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
my_error	function
(	O
ERR_WRITE_FILE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
tfn	pointer
,	O
0	int
)	O
;	O
is_tty	int
=	O
(	O
int	O
)	O
FALSE	O
;	O
}	O
if	O
(	O
!	O
year	int
&&	O
!	O
month	int
&&	O
(	O
holiday_flag	int
||	O
rc_use_flag	int
)	O
&&	O
!	O
year_flag	int
)	O
show_calendar	int
=	O
FALSE	O
;	O
else	O
if	O
(	O
suppr_cal_flag	int
&&	O
!	O
rc_use_flag	int
&&	O
!	O
holiday_flag	int
)	O
show_calendar	int
=	O
FALSE	O
;	O
is_date_given	int
=	O
(	O
Bool	int
)	O
(	O
month	int
||	O
year	int
||	O
is_fiscal_year	int
)	O
;	O
if	O
(	O
rc_use_flag	int
&&	O
(	O
(	O
!	O
month	int
&&	O
year	int
)	O
||	O
is_fiscal_year	int
)	O
)	O
date_enables_year	int
=	O
TRUE	O
;	O
if	O
(	O
rc_filename	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
pseudo_blank_conversion	function
(	O
&	O
rc_filename	pointer
)	O
;	O
if	O
(	O
rc_filter_text	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
pseudo_blank_conversion	function
(	O
&	O
rc_filter_text	pointer
)	O
;	O
eliminate_invalid_data	function
(	O
)	O
;	O
get_tty_hls	function
(	O
hl_seq	pointer
)	O
;	O
if	O
(	O
is_tty1	int
&&	O
is_tty2	int
&&	O
(	O
ext_pager	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
&&	O
pager_flag	int
)	O
{	O
setbuf	function
(	O
stdout	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
setbuf	function
(	O
stdin	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
get_tty_scr_size	function
(	O
&	O
tty_rows	int
,	O
&	O
tty_cols	int
)	O
;	O
}	O
if	O
(	O
rc_here_fn	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
if	O
(	O
fclose	function
(	O
rc_here_fp	pointer
)	O
==	O
EOF	O
)	O
my_error	function
(	O
ERR_WRITE_FILE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
1L	int
,	O
rc_here_fn	pointer
,	O
0	int
)	O
;	O
if	O
(	O
rsp_filename	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
write_log_file	function
(	O
rsp_filename	pointer
,	O
REsponse	int
,	O
_	O
(	O
"response file"	pointer
)	O
,	O
_	O
(	O
"Created"	pointer
)	O
,	O
my_argc	pointer
,	O
my_argv	array
)	O
;	O
if	O
(	O
shl_filename	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
write_log_file	function
(	O
shl_filename	pointer
,	O
SCript	int
,	O
_	O
(	O
"shell script"	pointer
)	O
,	O
_	O
(	O
"Created"	pointer
)	O
,	O
my_argc	pointer
,	O
my_argv	array
)	O
;	O
if	O
(	O
is_tty1	int
&&	O
is_tty2	int
&&	O
pager_flag	int
&&	O
(	O
ext_pager	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
&&	O
(	O
email_adr	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
)	O
{	O
child_pid	int
=	O
fork	function
(	O
)	O
;	O
switch	O
(	O
child_pid	int
)	O
{	O
case	O
-	O
1	int
:	O
my_error	function
(	O
ERR_INTERNAL_C_FUNC_FAILURE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
7L	int
,	O
"fork() child_pid="	pointer
,	O
child_pid	int
)	O
;	O
case	O
0	int
:	O
close	function
(	O
pipe_fd	array
[	O
1	int
]	O
)	O
;	O
if	O
(	O
pipe_fd	array
[	O
0	int
]	O
)	O
{	O
close	function
(	O
0	int
)	O
;	O
dup	function
(	O
pipe_fd	array
[	O
0	int
]	O
)	O
;	O
close	function
(	O
pipe_fd	array
[	O
0	int
]	O
)	O
;	O
}	O
if	O
(	O
pg_argv	pointer
==	O
(	O
char	O
*	O
*	O
)	O
NULL	O
)	O
{	O
i	int
=	O
execlp	function
(	O
ext_pager	pointer
,	O
ext_pager	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
j	int
=	O
(	O
int	O
)	O
strlen	function
(	O
ext_pager	pointer
)	O
+	O
LEN_SINGLE_LINE	int
;	O
if	O
(	O
(	O
Uint	int
)	O
j	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
j	int
+	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
sprintf	function
(	O
s1	pointer
,	O
"execlp(%s)="	pointer
,	O
ext_pager	pointer
)	O
;	O
my_error	function
(	O
ERR_INTERNAL_C_FUNC_FAILURE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
9L	int
,	O
s1	pointer
,	O
i	int
)	O
;	O
}	O
else	O
{	O
i	int
=	O
execvp	function
(	O
ext_pager	pointer
,	O
pg_argv	pointer
)	O
;	O
j	int
=	O
(	O
int	O
)	O
strlen	function
(	O
ext_pager	pointer
)	O
+	O
LEN_SINGLE_LINE	int
;	O
if	O
(	O
(	O
Uint	int
)	O
j	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
j	int
+	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
sprintf	function
(	O
s1	pointer
,	O
"execvp(%s)="	pointer
,	O
ext_pager	pointer
)	O
;	O
my_error	function
(	O
ERR_INTERNAL_C_FUNC_FAILURE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
9L	int
,	O
s1	pointer
,	O
i	int
)	O
;	O
}	O
default	O
:	O
close	function
(	O
pipe_fd	array
[	O
0	int
]	O
)	O
;	O
if	O
(	O
pipe_fd	array
[	O
1	int
]	O
!=	O
1	int
)	O
{	O
close	function
(	O
1	int
)	O
;	O
if	O
(	O
!	O
dup	function
(	O
pipe_fd	array
[	O
1	int
]	O
)	O
)	O
{	O
dup	function
(	O
pipe_fd	array
[	O
1	int
]	O
)	O
;	O
close	function
(	O
0	int
)	O
;	O
}	O
close	function
(	O
pipe_fd	array
[	O
1	int
]	O
)	O
;	O
}	O
}	O
}	O
if	O
(	O
show_calendar	int
)	O
print_calendar	function
(	O
)	O
;	O
else	O
if	O
(	O
holiday_flag	int
||	O
rc_use_flag	int
)	O
{	O
register	O
int	O
tmp_ad	int
=	O
act_day	int
;	O
is_leap_year	int
=	O
(	O
days_of_february	function
(	O
year	int
)	O
==	O
29	int
)	O
;	O
if	O
(	O
is_fiscal_year	int
)	O
fiscal_month	int
=	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_month	int
;	O
if	O
(	O
cal_special_flag	int
)	O
act_day	int
=	O
day_of_year	function
(	O
tmp_ad	int
,	O
act_month	int
,	O
act_year	int
)	O
;	O
if	O
(	O
(	O
(	O
year	int
==	O
EASTER_MIN	int
-	O
1	int
)	O
&&	O
(	O
fiscal_month	int
>	O
MONTH_MIN	int
)	O
)	O
||	O
(	O
(	O
year	int
>=	O
EASTER_MIN	int
)	O
&&	O
(	O
year	int
<=	O
EASTER_MAX	O
)	O
)	O
)	O
print_all_holidays	function
(	O
FALSE	O
,	O
TRUE	O
)	O
;	O
if	O
(	O
cal_special_flag	int
)	O
act_day	int
=	O
tmp_ad	int
;	O
}	O
if	O
(	O
!	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_month	int
)	O
{	O
if	O
(	O
is_fiscal_year	int
||	O
(	O
holiday_flag	int
&&	O
!	O
show_calendar	int
)	O
)	O
month	int
=	O
0	int
;	O
if	O
(	O
rc_use_flag	int
)	O
rc_use	function
(	O
)	O
;	O
if	O
(	O
holiday_flag	int
)	O
{	O
if	O
(	O
(	O
(	O
year	int
==	O
EASTER_MIN	int
-	O
1	int
)	O
&&	O
(	O
fiscal_month	int
==	O
1	int
)	O
)	O
||	O
year	int
<	O
EASTER_MIN	int
-	O
1	int
||	O
year	int
>	O
EASTER_MAX	O
)	O
my_error	function
(	O
ERR_INVALID_EASTER_DATE	int
,	O
""	pointer
,	O
0L	int
,	O
""	pointer
,	O
0	int
)	O
;	O
print_all_holidays	function
(	O
FALSE	O
,	O
FALSE	O
)	O
;	O
}	O
}	O
if	O
(	O
is_tty1	int
&&	O
is_tty2	int
&&	O
pager_flag	int
&&	O
(	O
ext_pager	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
&&	O
(	O
email_adr	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
)	O
{	O
fflush	function
(	O
stdout	pointer
)	O
;	O
close	function
(	O
0	int
)	O
;	O
dup	function
(	O
sys_fd	array
[	O
0	int
]	O
)	O
;	O
close	function
(	O
1	int
)	O
;	O
dup	function
(	O
sys_fd	array
[	O
1	int
]	O
)	O
;	O
while	O
(	O
wait	function
(	O
(	O
int	O
*	O
)	O
NULL	O
)	O
!=	O
child_pid	int
)	O
;	O
(	O
void	O
)	O
signal	function
(	O
SIGPIPE	int
,	O
SIG_DFL	O
)	O
;	O
}	O
if	O
(	O
email_adr	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
if	O
(	O
fclose	function
(	O
tfp	pointer
)	O
==	O
EOF	O
)	O
my_error	function
(	O
ERR_WRITE_FILE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
1L	int
,	O
tfn	pointer
,	O
0	int
)	O
;	O
else	O
{	O
auto	O
struct	O
stat	struct
statbuf	struct
;	O
tfp	pointer
=	O
(	O
FILE	struct
*	O
)	O
NULL	O
;	O
if	O
(	O
!	O
stat	struct
(	O
tfn	pointer
,	O
&	O
statbuf	struct
)	O
)	O
i	int
=	O
(	O
statbuf	struct
.	O
st_size	long
>	O
0	int
)	O
;	O
else	O
my_error	function
(	O
ERR_READ_FILE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
tfn	pointer
,	O
0	int
)	O
;	O
}	O
if	O
(	O
i	int
)	O
{	O
sprintf	function
(	O
s2	pointer
,	O
_	O
(	O
"Mail from \\`%s' (%02d-%s-%04d %02d%s%02d%s%02d"	pointer
)	O
,	O
prgr_name	pointer
,	O
true_day	int
,	O
short_month_name	function
(	O
true_month	int
)	O
,	O
true_year	int
,	O
act_hour	int
,	O
time_sep	pointer
,	O
act_min	int
,	O
time_sep	pointer
,	O
act_sec	int
)	O
;	O
if	O
(	O
tz	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
sprintf	function
(	O
s1	pointer
,	O
" %s"	pointer
,	O
tz	pointer
)	O
;	O
strcat	function
(	O
s2	pointer
,	O
s1	pointer
)	O
;	O
}	O
strcat	function
(	O
s2	pointer
,	O
")"	pointer
)	O
;	O
ptr_char	pointer
=	O
getenv	function
(	O
ENV_VAR_MAILPROG	pointer
)	O
;	O
if	O
(	O
ptr_char	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
if	O
(	O
!	O
*	O
ptr_char	pointer
)	O
ptr_char	pointer
=	O
MAIL_PRGR	pointer
;	O
}	O
else	O
ptr_char	pointer
=	O
MAIL_PRGR	pointer
;	O
i	int
=	O
(	O
int	O
)	O
strlen	function
(	O
ptr_char	pointer
)	O
+	O
strlen	function
(	O
s2	pointer
)	O
+	O
strlen	function
(	O
email_adr	pointer
)	O
+	O
strlen	function
(	O
REDIRECT_IN	pointer
)	O
+	O
9	int
;	O
if	O
(	O
(	O
Uint	int
)	O
i	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
i	int
+	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
sprintf	function
(	O
s1	pointer
,	O
"%s -s \"%s\" %s %s %s"	pointer
,	O
ptr_char	pointer
,	O
s2	pointer
,	O
email_adr	pointer
,	O
REDIRECT_IN	pointer
,	O
tfn	pointer
)	O
;	O
if	O
(	O
my_system	function
(	O
s1	pointer
)	O
)	O
{	O
i	int
=	O
unlink	function
(	O
tfn	pointer
)	O
;	O
if	O
(	O
i	int
)	O
my_error	function
(	O
ERR_INTERNAL_C_FUNC_FAILURE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"unlink(tfn)="	pointer
,	O
i	int
)	O
;	O
my_error	function
(	O
ERR_EMAIL_SEND_FAILURE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
13L	int
,	O
email_adr	pointer
,	O
0	int
)	O
;	O
}	O
}	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: warning, eMail with empty message body not sent to <%s>.\n"	pointer
)	O
,	O
prgr_name	pointer
,	O
email_adr	pointer
)	O
;	O
i	int
=	O
unlink	function
(	O
tfn	pointer
)	O
;	O
if	O
(	O
i	int
)	O
my_error	function
(	O
ERR_INTERNAL_C_FUNC_FAILURE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
9L	int
,	O
"unlink(tfn)="	pointer
,	O
i	int
)	O
;	O
}	O
if	O
(	O
rc_here_fn	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
i	int
=	O
unlink	function
(	O
rc_here_fn	pointer
)	O
;	O
if	O
(	O
i	int
)	O
my_error	function
(	O
ERR_INTERNAL_C_FUNC_FAILURE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
8L	int
,	O
"unlink(rc_here_fn)="	pointer
,	O
i	int
)	O
;	O
}	O
if	O
(	O
rc_use_flag	int
&&	O
!	O
shell_escape_done	int
&&	O
(	O
!	O
rc_elems	int
||	O
(	O
rc_zero_dates_flag	int
&&	O
!	O
(	O
rc_elems	int
-	O
rc_zero_pos	int
)	O
)	O
)	O
)	O
exit	function
(	O
ERR_NO_FIXED_DATES_LISTED	int
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
int	O
eval_longopt	function
(	O
longopt	pointer
,	O
longopt_symbolic	int
)	O
char	O
*	O
longopt	pointer
;	O
int	O
*	O
longopt_symbolic	int
;	O
{	O
auto	O
const	O
Lopt_struct	struct
*	O
ptr_lopt	pointer
=	O
lopt	array
;	O
*	O
longopt_symbolic	int
=	O
SYM_NIL	int
;	O
if	O
(	O
tolower	function
(	O
*	O
longopt	pointer
)	O
>=	O
tolower	function
(	O
*	O
ptr_lopt	pointer
->	O
long_name	pointer
)	O
)	O
{	O
while	O
(	O
tolower	function
(	O
*	O
ptr_lopt	pointer
->	O
long_name	pointer
)	O
<	O
tolower	function
(	O
*	O
longopt	pointer
)	O
)	O
{	O
ptr_lopt	pointer
++	O
;	O
if	O
(	O
ptr_lopt	pointer
->	O
long_name	pointer
==	O
NULL	O
)	O
break	O
;	O
}	O
if	O
(	O
ptr_lopt	pointer
->	O
long_name	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
tolower	function
(	O
*	O
ptr_lopt	pointer
->	O
long_name	pointer
)	O
==	O
tolower	function
(	O
*	O
longopt	pointer
)	O
)	O
{	O
auto	O
const	O
Lopt_struct	struct
*	O
ptr2_lopt	pointer
=	O
ptr_lopt	pointer
+	O
1	int
;	O
register	O
int	O
len_longopt	int
=	O
(	O
int	O
)	O
strlen	function
(	O
longopt	pointer
)	O
;	O
auto	O
Bool	int
larg_sep_found	int
;	O
auto	O
Bool	int
ok	int
=	O
FALSE	O
;	O
if	O
(	O
strchr	function
(	O
longopt	pointer
,	O
*	O
LARG_SEP	pointer
)	O
!=	O
NULL	O
)	O
len_longopt	int
-=	O
(	O
int	O
)	O
strlen	function
(	O
strchr	function
(	O
longopt	pointer
,	O
*	O
LARG_SEP	pointer
)	O
)	O
;	O
while	O
(	O
!	O
ok	int
&&	O
(	O
ptr_lopt	pointer
->	O
long_name	pointer
!=	O
NULL	O
)	O
)	O
{	O
if	O
(	O
ptr2_lopt	pointer
->	O
long_name	pointer
!=	O
NULL	O
)	O
if	O
(	O
!	O
strncasecmp	function
(	O
ptr_lopt	pointer
->	O
long_name	pointer
,	O
longopt	pointer
,	O
len_longopt	int
)	O
&&	O
!	O
strncasecmp	function
(	O
ptr2_lopt	pointer
->	O
long_name	pointer
,	O
longopt	pointer
,	O
len_longopt	int
)	O
)	O
return	O
(	O
1	int
)	O
;	O
if	O
(	O
strncasecmp	function
(	O
ptr_lopt	pointer
->	O
long_name	pointer
,	O
longopt	pointer
,	O
len_longopt	int
)	O
)	O
{	O
ptr_lopt	pointer
++	O
;	O
if	O
(	O
ptr_lopt	pointer
->	O
long_name	pointer
!=	O
NULL	O
)	O
ptr2_lopt	pointer
++	O
;	O
if	O
(	O
(	O
ptr_lopt	pointer
->	O
long_name	pointer
!=	O
NULL	O
)	O
&&	O
(	O
ptr2_lopt	pointer
->	O
long_name	pointer
==	O
NULL	O
)	O
)	O
if	O
(	O
!	O
strncasecmp	function
(	O
ptr_lopt	pointer
->	O
long_name	pointer
,	O
longopt	pointer
,	O
len_longopt	int
)	O
)	O
ok	int
=	O
TRUE	O
;	O
}	O
else	O
ok	int
=	O
TRUE	O
;	O
}	O
if	O
(	O
!	O
ok	int
)	O
return	O
(	O
2	int
)	O
;	O
larg_sep_found	int
=	O
(	O
Bool	int
)	O
(	O
(	O
(	O
int	O
)	O
strlen	function
(	O
longopt	pointer
)	O
-	O
len_longopt	int
)	O
?	O
TRUE	O
:	O
FALSE	O
)	O
;	O
if	O
(	O
larg_sep_found	int
&&	O
(	O
ptr_lopt	pointer
->	O
larg_mode	int
==	O
LARG_NO	int
)	O
)	O
{	O
strcpy	function
(	O
longopt	pointer
,	O
ptr_lopt	pointer
->	O
long_name	pointer
)	O
;	O
*	O
longopt_symbolic	int
=	O
ptr_lopt	pointer
->	O
symbolic_name	int
;	O
return	O
(	O
3	int
)	O
;	O
}	O
if	O
(	O
!	O
larg_sep_found	int
&&	O
(	O
ptr_lopt	pointer
->	O
larg_mode	int
>	O
LARG_NO_OR_ONE	int
)	O
)	O
{	O
*	O
longopt_symbolic	int
=	O
ptr_lopt	pointer
->	O
symbolic_name	int
;	O
return	O
(	O
4	int
)	O
;	O
}	O
if	O
(	O
ptr_lopt	pointer
->	O
larg_mode	int
==	O
LARG_NO	int
||	O
(	O
(	O
ptr_lopt	pointer
->	O
larg_mode	int
==	O
LARG_NO_OR_ONE	int
)	O
&&	O
!	O
larg_sep_found	int
)	O
)	O
{	O
if	O
(	O
ptr_lopt	pointer
->	O
short_name	array
[	O
0	int
]	O
==	O
NULL	O
)	O
{	O
strcpy	function
(	O
longopt	pointer
,	O
ptr_lopt	pointer
->	O
long_name	pointer
)	O
;	O
*	O
longopt_symbolic	int
=	O
ptr_lopt	pointer
->	O
symbolic_name	int
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
strcpy	function
(	O
longopt	pointer
,	O
ptr_lopt	pointer
->	O
short_name	array
[	O
0	int
]	O
)	O
;	O
}	O
else	O
{	O
auto	O
char	O
*	O
ptr_char	pointer
=	O
longopt	pointer
+	O
len_longopt	int
+	O
1	int
;	O
auto	O
char	O
*	O
larg_longopt	pointer
;	O
if	O
(	O
!	O
*	O
ptr_char	pointer
)	O
{	O
*	O
longopt_symbolic	int
=	O
ptr_lopt	pointer
->	O
symbolic_name	int
;	O
return	O
(	O
4	int
)	O
;	O
}	O
larg_longopt	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
strlen	function
(	O
longopt	pointer
)	O
-	O
len_longopt	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"larg_longopt"	pointer
,	O
0	int
)	O
;	O
strcpy	function
(	O
larg_longopt	pointer
,	O
ptr_char	pointer
)	O
;	O
if	O
(	O
ptr_lopt	pointer
->	O
largs	array
[	O
0	int
]	O
==	O
NULL	O
)	O
{	O
if	O
(	O
ptr_lopt	pointer
->	O
short_name	array
[	O
0	int
]	O
==	O
NULL	O
)	O
{	O
strcpy	function
(	O
longopt	pointer
,	O
ptr_lopt	pointer
->	O
long_name	pointer
)	O
;	O
strcat	function
(	O
longopt	pointer
,	O
LARG_SEP	pointer
)	O
;	O
strcat	function
(	O
longopt	pointer
,	O
larg_longopt	pointer
)	O
;	O
*	O
longopt_symbolic	int
=	O
ptr_lopt	pointer
->	O
symbolic_name	int
;	O
free	function
(	O
larg_longopt	pointer
)	O
;	O
return	O
(	O
-	O
2	int
)	O
;	O
}	O
if	O
(	O
ptr_lopt	pointer
->	O
larg_mode	int
==	O
LARG_ONE_OR_ARG	int
)	O
abort	function
(	O
)	O
;	O
strcpy	function
(	O
longopt	pointer
,	O
ptr_lopt	pointer
->	O
short_name	array
[	O
0	int
]	O
)	O
;	O
strcat	function
(	O
longopt	pointer
,	O
larg_longopt	pointer
)	O
;	O
}	O
else	O
{	O
register	O
int	O
i	int
=	O
0	int
;	O
ok	int
=	O
FALSE	O
;	O
i	int
=	O
0	int
;	O
ptr_char	pointer
=	O
ptr_lopt	pointer
->	O
largs	array
[	O
i	int
++	O
]	O
;	O
while	O
(	O
!	O
ok	int
&&	O
(	O
ptr_char	pointer
!=	O
NULL	O
)	O
)	O
{	O
if	O
(	O
tolower	function
(	O
*	O
ptr_char	pointer
)	O
==	O
tolower	function
(	O
*	O
larg_longopt	pointer
)	O
)	O
{	O
register	O
int	O
j	int
=	O
i	int
-	O
1	int
;	O
register	O
int	O
len_larg	int
=	O
(	O
int	O
)	O
strlen	function
(	O
larg_longopt	pointer
)	O
;	O
if	O
(	O
!	O
strncasecmp	function
(	O
ptr_lopt	pointer
->	O
largs	array
[	O
j	int
]	O
,	O
larg_longopt	pointer
,	O
len_larg	int
)	O
)	O
{	O
if	O
(	O
len_larg	int
==	O
(	O
int	O
)	O
strlen	function
(	O
ptr_lopt	pointer
->	O
largs	array
[	O
j	int
]	O
)	O
)	O
ok	int
=	O
TRUE	O
;	O
else	O
{	O
while	O
(	O
!	O
ok	int
&&	O
(	O
ptr_lopt	pointer
->	O
largs	array
[	O
i	int
]	O
!=	O
NULL	O
)	O
)	O
{	O
if	O
(	O
!	O
strncasecmp	function
(	O
ptr_lopt	pointer
->	O
largs	array
[	O
i	int
]	O
,	O
larg_longopt	pointer
,	O
len_larg	int
)	O
&&	O
(	O
len_larg	int
==	O
(	O
int	O
)	O
strlen	function
(	O
ptr_lopt	pointer
->	O
largs	array
[	O
i	int
]	O
)	O
)	O
)	O
ok	int
=	O
TRUE	O
;	O
i	int
++	O
;	O
}	O
}	O
if	O
(	O
!	O
ok	int
)	O
{	O
auto	O
Bool	int
ambig	int
=	O
FALSE	O
;	O
i	int
=	O
j	int
+	O
1	int
;	O
while	O
(	O
!	O
ambig	int
&&	O
(	O
ptr_lopt	pointer
->	O
largs	array
[	O
i	int
]	O
!=	O
NULL	O
)	O
)	O
{	O
if	O
(	O
!	O
strncasecmp	function
(	O
ptr_lopt	pointer
->	O
largs	array
[	O
i	int
]	O
,	O
larg_longopt	pointer
,	O
len_larg	int
)	O
)	O
ambig	int
=	O
TRUE	O
;	O
i	int
++	O
;	O
}	O
if	O
(	O
ambig	int
)	O
{	O
*	O
longopt_symbolic	int
=	O
ptr_lopt	pointer
->	O
symbolic_name	int
;	O
return	O
(	O
6	int
)	O
;	O
}	O
else	O
{	O
ok	int
=	O
TRUE	O
;	O
i	int
=	O
j	int
+	O
1	int
;	O
}	O
}	O
}	O
else	O
ptr_char	pointer
=	O
ptr_lopt	pointer
->	O
largs	array
[	O
i	int
++	O
]	O
;	O
}	O
else	O
ptr_char	pointer
=	O
ptr_lopt	pointer
->	O
largs	array
[	O
i	int
++	O
]	O
;	O
}	O
if	O
(	O
!	O
ok	int
&&	O
(	O
ptr_lopt	pointer
->	O
larg_mode	int
!=	O
LARG_ONE_OR_ARG	int
)	O
)	O
{	O
*	O
longopt_symbolic	int
=	O
ptr_lopt	pointer
->	O
symbolic_name	int
;	O
return	O
(	O
5	int
)	O
;	O
}	O
i	int
--	O
;	O
if	O
(	O
ptr_lopt	pointer
->	O
short_name	array
[	O
0	int
]	O
==	O
NULL	O
)	O
{	O
strcpy	function
(	O
longopt	pointer
,	O
ptr_lopt	pointer
->	O
long_name	pointer
)	O
;	O
strcat	function
(	O
longopt	pointer
,	O
LARG_SEP	pointer
)	O
;	O
if	O
(	O
ptr_lopt	pointer
->	O
larg_mode	int
==	O
LARG_ONE_OR_ARG	int
)	O
strcat	function
(	O
longopt	pointer
,	O
larg_longopt	pointer
)	O
;	O
else	O
strcat	function
(	O
longopt	pointer
,	O
ptr_lopt	pointer
->	O
largs	array
[	O
i	int
]	O
)	O
;	O
*	O
longopt_symbolic	int
=	O
ptr_lopt	pointer
->	O
symbolic_name	int
;	O
free	function
(	O
larg_longopt	pointer
)	O
;	O
return	O
(	O
-	O
2	int
)	O
;	O
}	O
if	O
(	O
!	O
ok	int
&&	O
(	O
ptr_lopt	pointer
->	O
larg_mode	int
==	O
LARG_ONE_OR_ARG	int
)	O
)	O
{	O
strcpy	function
(	O
larg_longopt	pointer
,	O
longopt	pointer
+	O
len_longopt	int
+	O
1	int
)	O
;	O
strcpy	function
(	O
longopt	pointer
,	O
ptr_lopt	pointer
->	O
short_name	array
[	O
--	O
i	int
]	O
)	O
;	O
strcat	function
(	O
longopt	pointer
,	O
larg_longopt	pointer
)	O
;	O
}	O
else	O
{	O
strcpy	function
(	O
longopt	pointer
,	O
ptr_lopt	pointer
->	O
short_name	array
[	O
i	int
]	O
)	O
;	O
if	O
(	O
!	O
strcmp	function
(	O
ptr_lopt	pointer
->	O
largs	array
[	O
i	int
]	O
,	O
larg_lit	pointer
)	O
)	O
strcat	function
(	O
longopt	pointer
,	O
larg_longopt	pointer
)	O
;	O
}	O
}	O
free	function
(	O
larg_longopt	pointer
)	O
;	O
}	O
}	O
else	O
return	O
(	O
2	int
)	O
;	O
}	O
else	O
return	O
(	O
2	int
)	O
;	O
}	O
else	O
return	O
(	O
2	int
)	O
;	O
*	O
longopt_symbolic	int
=	O
ptr_lopt	pointer
->	O
symbolic_name	int
;	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
Bool	int
is_correct_date_format	function
(	O
format_txt	pointer
,	O
use_day_suffix	pointer
,	O
use_short3_day_name	int
,	O
use_day_zeroleaded	int
,	O
use_year_zeroleaded	int
)	O
char	O
*	O
format_txt	pointer
;	O
Bool	int
*	O
use_day_suffix	pointer
;	O
Bool	int
*	O
use_short3_day_name	int
;	O
Bool	int
*	O
use_day_zeroleaded	int
;	O
Bool	int
*	O
use_year_zeroleaded	int
;	O
{	O
register	O
int	O
start_highlighting	int
=	O
2	int
;	O
register	O
int	O
end_highlighting	int
=	O
2	int
;	O
register	O
int	O
weekday_name_group	int
=	O
2	int
;	O
register	O
int	O
day_group	int
=	O
2	int
;	O
register	O
int	O
month_group	int
=	O
2	int
;	O
register	O
int	O
year_group	int
=	O
2	int
;	O
register	O
int	O
pos	int
;	O
auto	O
int	O
fstyle	pointer
=	O
FSTYLE_NONE	O
;	O
auto	O
int	O
fwidth	pointer
=	O
SPECIAL_VALUE	O
;	O
auto	O
Bool	int
is_cformat	pointer
=	O
FALSE	O
;	O
auto	O
Bool	int
is_lformat	pointer
=	O
FALSE	O
;	O
auto	O
Bool	int
is_sign	pointer
=	O
FALSE	O
;	O
auto	O
Bool	int
is_lzero	pointer
=	O
FALSE	O
;	O
auto	O
Bool	int
is_fformat	pointer
=	O
FALSE	O
;	O
auto	O
Bool	int
is_suffix	pointer
=	O
FALSE	O
;	O
*	O
use_day_suffix	pointer
=	O
(	O
*	O
use_short3_day_name	int
)	O
=	O
(	O
*	O
use_day_zeroleaded	int
)	O
=	O
(	O
*	O
use_year_zeroleaded	int
)	O
=	O
FALSE	O
;	O
if	O
(	O
!	O
*	O
format_txt	pointer
)	O
return	O
(	O
FALSE	O
)	O
;	O
do	O
{	O
while	O
(	O
*	O
format_txt	pointer
&&	O
(	O
*	O
format_txt	pointer
!=	O
DFORMAT_CHAR	char
)	O
&&	O
(	O
*	O
format_txt	pointer
!=	O
QUOTE_CHAR	char
)	O
)	O
format_txt	pointer
++	O
;	O
if	O
(	O
*	O
format_txt	pointer
)	O
{	O
if	O
(	O
*	O
format_txt	pointer
==	O
DFORMAT_CHAR	char
)	O
{	O
pos	int
=	O
decode_format	function
(	O
format_txt	pointer
,	O
1	int
,	O
&	O
is_cformat	pointer
,	O
&	O
is_lformat	pointer
,	O
&	O
is_sign	pointer
,	O
&	O
is_lzero	pointer
,	O
&	O
is_suffix	pointer
,	O
&	O
is_fformat	pointer
,	O
&	O
fstyle	pointer
,	O
&	O
fwidth	pointer
)	O
;	O
format_txt	pointer
+=	O
pos	int
;	O
switch	O
(	O
*	O
format_txt	pointer
)	O
{	O
case	O
HLS1S_CHAR	char
:	O
if	O
(	O
end_highlighting	int
==	O
2	int
)	O
if	O
(	O
start_highlighting	int
)	O
start_highlighting	int
--	O
;	O
break	O
;	O
case	O
HLS1E_CHAR	char
:	O
if	O
(	O
start_highlighting	int
==	O
1	int
)	O
if	O
(	O
end_highlighting	int
)	O
end_highlighting	int
--	O
;	O
break	O
;	O
case	O
DAYNR_CHAR	char
:	O
if	O
(	O
is_lzero	pointer
)	O
*	O
use_day_zeroleaded	int
=	O
TRUE	O
;	O
if	O
(	O
is_suffix	pointer
)	O
*	O
use_day_suffix	pointer
=	O
TRUE	O
;	O
if	O
(	O
day_group	int
)	O
day_group	int
--	O
;	O
break	O
;	O
case	O
WDNAME_CHAR	char
:	O
if	O
(	O
fwidth	pointer
==	O
3	int
)	O
*	O
use_short3_day_name	int
=	O
TRUE	O
;	O
if	O
(	O
weekday_name_group	int
)	O
weekday_name_group	int
--	O
;	O
break	O
;	O
case	O
MONTHNAME_CHAR	char
:	O
case	O
MONTHNR_CHAR	char
:	O
if	O
(	O
month_group	int
)	O
month_group	int
--	O
;	O
break	O
;	O
case	O
YEARNR_CHAR	char
:	O
if	O
(	O
is_lzero	pointer
)	O
*	O
use_year_zeroleaded	int
=	O
TRUE	O
;	O
if	O
(	O
year_group	int
)	O
year_group	int
--	O
;	O
break	O
;	O
default	O
:	O
return	O
(	O
FALSE	O
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
*	O
++	O
format_txt	pointer
)	O
format_txt	pointer
--	O
;	O
format_txt	pointer
++	O
;	O
}	O
else	O
break	O
;	O
}	O
while	O
(	O
*	O
format_txt	pointer
)	O
;	O
if	O
(	O
start_highlighting	int
!=	O
1	int
||	O
end_highlighting	int
!=	O
1	int
||	O
day_group	int
!=	O
1	int
||	O
month_group	int
!=	O
1	int
||	O
year_group	int
!=	O
1	int
)	O
return	O
(	O
FALSE	O
)	O
;	O
if	O
(	O
weekday_name_group	int
<	O
1	int
)	O
return	O
(	O
FALSE	O
)	O
;	O
return	O
(	O
TRUE	O
)	O
;	O
}	O
static	O
void	O
rearrange_argv	function
(	O
opt_list	pointer
,	O
argc	int
,	O
argv	array
)	O
const	O
char	O
*	O
opt_list	pointer
;	O
int	O
*	O
argc	int
;	O
char	O
*	O
argv	array
[	O
]	O
;	O
{	O
register	O
int	O
i	int
=	O
(	O
*	O
argc	int
-	O
1	int
)	O
;	O
register	O
int	O
n	long
=	O
1	int
;	O
auto	O
char	O
*	O
*	O
ptr_argv	pointer
=	O
argv	array
;	O
auto	O
char	O
*	O
*	O
ptr2_argv	pointer
;	O
auto	O
Bool	int
is_modified	int
;	O
while	O
(	O
i	int
)	O
{	O
ptr_argv	pointer
++	O
;	O
is_modified	int
=	O
FALSE	O
;	O
if	O
(	O
*	O
*	O
ptr_argv	pointer
==	O
*	O
SWITCH	pointer
||	O
*	O
*	O
ptr_argv	pointer
==	O
*	O
SWITCH2	pointer
)	O
{	O
(	O
*	O
ptr_argv	pointer
)	O
++	O
;	O
if	O
(	O
*	O
*	O
ptr_argv	pointer
&&	O
(	O
*	O
*	O
ptr_argv	pointer
!=	O
*	O
SWITCH	pointer
)	O
)	O
{	O
if	O
(	O
strchr	function
(	O
opt_list	pointer
,	O
*	O
*	O
ptr_argv	pointer
)	O
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
if	O
(	O
i	int
>	O
1	int
)	O
{	O
(	O
*	O
ptr_argv	pointer
)	O
++	O
;	O
if	O
(	O
!	O
*	O
*	O
ptr_argv	pointer
)	O
{	O
(	O
*	O
ptr_argv	pointer
)	O
-=	O
2	int
;	O
ptr2_argv	pointer
=	O
ptr_argv	pointer
;	O
ptr2_argv	pointer
++	O
;	O
if	O
(	O
(	O
*	O
*	O
ptr2_argv	pointer
!=	O
RSP_CHAR	char
)	O
&&	O
(	O
*	O
*	O
ptr2_argv	pointer
!=	O
RC_ADATE_CHAR	char
)	O
)	O
{	O
if	O
(	O
(	O
*	O
*	O
ptr2_argv	pointer
==	O
*	O
SWITCH	pointer
||	O
*	O
*	O
ptr2_argv	pointer
==	O
*	O
SWITCH2	pointer
)	O
&&	O
(	O
strlen	function
(	O
*	O
ptr2_argv	pointer
)	O
<=	O
2	int
)	O
)	O
(	O
*	O
ptr_argv	pointer
)	O
++	O
;	O
else	O
{	O
i	int
--	O
;	O
argv	array
[	O
n	long
]	O
=	O
(	O
char	O
*	O
)	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
(	O
argv	array
[	O
n	long
]	O
)	O
,	O
strlen	function
(	O
*	O
ptr_argv	pointer
)	O
+	O
strlen	function
(	O
*	O
ptr2_argv	pointer
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"argv[n]"	pointer
,	O
n	long
)	O
;	O
strcpy	function
(	O
argv	array
[	O
n	long
]	O
,	O
*	O
ptr_argv	pointer
)	O
;	O
strcat	function
(	O
argv	array
[	O
n	long
]	O
,	O
*	O
ptr2_argv	pointer
)	O
;	O
ptr_argv	pointer
++	O
;	O
is_modified	int
=	O
TRUE	O
;	O
}	O
}	O
else	O
(	O
*	O
ptr_argv	pointer
)	O
++	O
;	O
}	O
else	O
(	O
*	O
ptr_argv	pointer
)	O
--	O
;	O
}	O
}	O
}	O
}	O
else	O
(	O
*	O
ptr_argv	pointer
)	O
++	O
;	O
if	O
(	O
!	O
is_modified	int
)	O
{	O
(	O
*	O
ptr_argv	pointer
)	O
--	O
;	O
argv	array
[	O
n	long
]	O
=	O
(	O
char	O
*	O
)	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
(	O
argv	array
[	O
n	long
]	O
)	O
,	O
strlen	function
(	O
*	O
ptr_argv	pointer
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"argv[n]"	pointer
,	O
n	long
)	O
;	O
strcpy	function
(	O
argv	array
[	O
n	long
]	O
,	O
*	O
ptr_argv	pointer
)	O
;	O
}	O
n	long
++	O
;	O
i	int
--	O
;	O
}	O
*	O
argc	int
=	O
n	long
;	O
}	O
static	O
void	O
check_command_line	function
(	O
argc	int
,	O
argv	array
)	O
int	O
argc	int
;	O
char	O
*	O
argv	array
[	O
]	O
;	O
{	O
register	O
int	O
opt_error	int
=	O
0	int
;	O
register	O
int	O
len	int
;	O
auto	O
int	O
i	int
;	O
auto	O
int	O
lopt_help	int
;	O
auto	O
char	O
rel_time_offset	char
=	O
'\0'	O
;	O
auto	O
char	O
rel_loop_end	char
=	O
'\0'	O
;	O
auto	O
char	O
*	O
ptr_char	pointer
;	O
auto	O
char	O
*	O
option	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
auto	O
char	O
*	O
rc_period_argv	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
auto	O
char	O
*	O
rc_period_option	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
auto	O
Bool	int
set_loop_end	int
=	O
FALSE	O
;	O
auto	O
Bool	int
rc_period_is_longopt	int
=	O
FALSE	O
;	O
auto	O
Bool	int
is_longopt	int
=	O
FALSE	O
;	O
auto	O
Bool	int
license_flag	int
=	O
FALSE	O
;	O
auto	O
Bool	int
version_flag	int
=	O
FALSE	O
;	O
auto	O
Bool	int
help_flag	int
=	O
FALSE	O
;	O
auto	O
Bool	int
ext_help_flag	int
=	O
FALSE	O
;	O
auto	O
Bool	int
help_on_help_flag	int
=	O
FALSE	O
;	O
auto	O
Bool	int
skip_option	int
=	O
FALSE	O
;	O
auto	O
Bool	int
lopt_ambig	int
=	O
FALSE	O
;	O
while	O
(	O
argc	int
>	O
1	int
)	O
{	O
option	pointer
=	O
*	O
++	O
argv	array
;	O
if	O
(	O
*	O
option	pointer
==	O
*	O
SWITCH	pointer
||	O
*	O
option	pointer
==	O
*	O
SWITCH2	pointer
)	O
{	O
is_longopt	int
=	O
FALSE	O
;	O
for	O
(	O
option	pointer
++	O
;	O
*	O
option	pointer
;	O
option	pointer
++	O
)	O
{	O
skip_option	int
=	O
FALSE	O
;	O
if	O
(	O
*	O
option	pointer
==	O
*	O
SWITCH	pointer
)	O
{	O
option	pointer
--	O
;	O
if	O
(	O
*	O
option	pointer
==	O
*	O
SWITCH	pointer
)	O
{	O
is_longopt	int
=	O
TRUE	O
;	O
option	pointer
+=	O
2	int
;	O
}	O
if	O
(	O
*	O
option	pointer
&&	O
is_longopt	int
)	O
{	O
len	int
=	O
(	O
int	O
)	O
strlen	function
(	O
option	pointer
)	O
;	O
if	O
(	O
(	O
Uint	int
)	O
len	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
len	int
+	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
strcpy	function
(	O
s2	pointer
,	O
option	pointer
)	O
;	O
opt_error	int
=	O
eval_longopt	function
(	O
s2	pointer
,	O
&	O
lopt_id	int
)	O
;	O
if	O
(	O
opt_error	int
<	O
1	int
)	O
{	O
opt_error	int
=	O
0	int
;	O
switch	O
(	O
lopt_id	int
)	O
{	O
case	O
SYM_ADJUST_VALUE	int
:	O
option	pointer
=	O
strchr	function
(	O
s2	pointer
,	O
*	O
LARG_SEP	pointer
)	O
+	O
1	int
;	O
(	O
void	O
)	O
sscanf	function
(	O
option	pointer
,	O
"%lf"	pointer
,	O
&	O
adjust_value	double
)	O
;	O
if	O
(	O
abs	function
(	O
adjust_value	double
)	O
>	O
DEGS_PER_06_HOURS	int
)	O
opt_error	int
=	O
5	int
;	O
break	O
;	O
case	O
SYM_ATMOSPHERE	int
:	O
option	pointer
=	O
strchr	function
(	O
s2	pointer
,	O
*	O
LARG_SEP	pointer
)	O
+	O
1	int
;	O
ptr_char	pointer
=	O
strchr	function
(	O
option	pointer
,	O
*	O
SPLIT_SEP	pointer
)	O
;	O
if	O
(	O
ptr_char	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
opt_error	int
=	O
5	int
;	O
else	O
*	O
ptr_char	pointer
=	O
'\0'	O
;	O
(	O
void	O
)	O
sscanf	function
(	O
option	pointer
,	O
"%lf"	pointer
,	O
&	O
atm_pressure	double
)	O
;	O
if	O
(	O
atm_pressure	double
>	O
0.0	int
)	O
{	O
if	O
(	O
atm_pressure	double
>	O
1200.0	int
)	O
opt_error	int
=	O
5	int
;	O
else	O
{	O
atm_pressure	double
*=	O
100.0	int
;	O
ptr_char	pointer
++	O
;	O
if	O
(	O
*	O
ptr_char	pointer
)	O
{	O
(	O
void	O
)	O
sscanf	function
(	O
ptr_char	pointer
,	O
"%lf"	pointer
,	O
&	O
atm_temperature	double
)	O
;	O
if	O
(	O
abs	function
(	O
atm_temperature	double
)	O
>	O
100.0	int
)	O
opt_error	int
=	O
5	int
;	O
}	O
else	O
opt_error	int
=	O
5	int
;	O
}	O
}	O
else	O
opt_error	int
=	O
0	int
;	O
break	O
;	O
case	O
SYM_EXECUTE_COMMAND	int
:	O
rc_execute_command	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_extern_static_DVARS	int
:	O
rc_export_ldvar_flag	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_extern_static_TVARS	int
:	O
rc_export_ltvar_flag	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_HEADING_TEXT	int
:	O
option	pointer
=	O
strchr	function
(	O
s2	pointer
,	O
*	O
LARG_SEP	pointer
)	O
+	O
1	int
;	O
rc_heading_text	pointer
=	O
(	O
char	O
*	O
)	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
rc_heading_text	pointer
,	O
strlen	function
(	O
option	pointer
)	O
+	O
1	int
+	O
2	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"rc_heading_text"	pointer
,	O
0	int
)	O
;	O
strcpy	function
(	O
rc_heading_text	pointer
,	O
"0 "	pointer
)	O
;	O
strcat	function
(	O
rc_heading_text	pointer
,	O
option	pointer
)	O
;	O
pseudo_blank_conversion	function
(	O
&	O
rc_heading_text	pointer
)	O
;	O
break	O
;	O
case	O
SYM_IGNORE_CASE	int
:	O
rc_ignore_case_flag	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_LIMIT	int
:	O
rc_limit	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_LEAP_DAY	int
:	O
rc_feb_29_to_feb_28	int
=	O
rc_feb_29_to_mar_01	int
=	O
FALSE	O
;	O
if	O
(	O
tolower	function
(	O
*	O
s2	pointer
)	O
==	O
'f'	O
)	O
rc_feb_29_to_feb_28	int
=	O
TRUE	O
;	O
else	O
rc_feb_29_to_mar_01	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_PRECISE	int
:	O
rc_precise	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_REVERT_MATCH	int
:	O
rc_revert_match_flag	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_BIORHYTHM_AXIS_LEN	int
:	O
option	pointer
=	O
strchr	function
(	O
s2	pointer
,	O
*	O
LARG_SEP	pointer
)	O
+	O
1	int
;	O
if	O
(	O
*	O
option	pointer
==	O
'0'	O
)	O
{	O
while	O
(	O
*	O
option	pointer
==	O
'0'	O
)	O
option	pointer
++	O
;	O
if	O
(	O
!	O
*	O
option	pointer
)	O
option	pointer
--	O
;	O
}	O
rc_bio_axis_len	int
=	O
my_atoi	function
(	O
option	pointer
)	O
;	O
if	O
(	O
rc_bio_axis_len	int
>	O
BIO_AXIS_MAX	int
||	O
rc_bio_axis_len	int
<	O
BIO_AXIS_MIN	int
)	O
opt_error	int
=	O
5	int
;	O
else	O
while	O
(	O
BIO_AXIS_MAX	int
%	O
rc_bio_axis_len	int
)	O
rc_bio_axis_len	int
--	O
;	O
break	O
;	O
case	O
SYM_MOONIMAGE_LINES	int
:	O
option	pointer
=	O
strchr	function
(	O
s2	pointer
,	O
*	O
LARG_SEP	pointer
)	O
+	O
1	int
;	O
if	O
(	O
*	O
option	pointer
==	O
'0'	O
)	O
{	O
while	O
(	O
*	O
option	pointer
==	O
'0'	O
)	O
option	pointer
++	O
;	O
if	O
(	O
!	O
*	O
option	pointer
)	O
option	pointer
--	O
;	O
}	O
rc_moonimage_lines	int
=	O
my_atoi	function
(	O
option	pointer
)	O
;	O
if	O
(	O
rc_moonimage_lines	int
>	O
MOONIMAGE_MAX	int
||	O
rc_moonimage_lines	int
<	O
MOONIMAGE_MIN	int
)	O
opt_error	int
=	O
5	int
;	O
break	O
;	O
case	O
SYM_MAIL	int
:	O
option	pointer
=	O
strchr	function
(	O
s2	pointer
,	O
*	O
LARG_SEP	pointer
)	O
;	O
if	O
(	O
option	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
ptr_char	pointer
=	O
getenv	function
(	O
ENV_VAR_MAILTO	pointer
)	O
;	O
if	O
(	O
ptr_char	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
if	O
(	O
*	O
ptr_char	pointer
)	O
option	pointer
=	O
ptr_char	pointer
;	O
if	O
(	O
option	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
ptr_char	pointer
=	O
getenv	function
(	O
ENV_VAR_USER	pointer
)	O
;	O
if	O
(	O
ptr_char	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
if	O
(	O
*	O
ptr_char	pointer
)	O
option	pointer
=	O
ptr_char	pointer
;	O
if	O
(	O
option	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
ptr_char	pointer
=	O
getenv	function
(	O
ENV_VAR_LOGNAME	pointer
)	O
;	O
if	O
(	O
ptr_char	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
if	O
(	O
*	O
ptr_char	pointer
)	O
option	pointer
=	O
ptr_char	pointer
;	O
}	O
}	O
}	O
else	O
option	pointer
++	O
;	O
if	O
(	O
option	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
if	O
(	O
*	O
option	pointer
)	O
{	O
if	O
(	O
email_adr	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
email_adr	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
strlen	function
(	O
option	pointer
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"email_adr"	pointer
,	O
0	int
)	O
;	O
else	O
email_adr	pointer
=	O
(	O
char	O
*	O
)	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
email_adr	pointer
,	O
strlen	function
(	O
option	pointer
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"email_adr"	pointer
,	O
0	int
)	O
;	O
strcpy	function
(	O
email_adr	pointer
,	O
option	pointer
)	O
;	O
}	O
break	O
;	O
case	O
SYM_DEBUG	int
:	O
break	O
;	O
case	O
SYM_EXIT_STAT_HELP_NON_ZERO	int
:	O
exit_stat_help	int
=	O
ERR_EXIT_INFO_TEXTS_NON_ZERO	int
;	O
break	O
;	O
case	O
SYM_ISO_WEEK_NUMBER	int
:	O
if	O
(	O
tolower	function
(	O
*	O
s2	pointer
)	O
==	O
'y'	O
)	O
iso_week_number	int
=	O
TRUE	O
;	O
else	O
iso_week_number	int
=	O
FALSE	O
;	O
break	O
;	O
case	O
SYM_CYCLE_END	int
:	O
case	O
SYM_CYCLE_STEP	int
:	O
case	O
SYM_TIME_OFFSET	int
:	O
{	O
register	O
int	O
sign	int
=	O
0	int
;	O
register	O
int	O
state	pointer
=	O
1	int
;	O
register	O
int	O
digits	int
=	O
0	int
;	O
auto	O
Bool	int
skip	int
=	O
FALSE	O
;	O
auto	O
Bool	int
is_last	int
=	O
FALSE	O
;	O
auto	O
Bool	int
time_sep_found	int
=	O
FALSE	O
;	O
auto	O
Bool	int
is_leading_zero	int
=	O
TRUE	O
;	O
i	int
=	O
0	int
;	O
switch	O
(	O
lopt_id	int
)	O
{	O
case	O
SYM_TIME_OFFSET	int
:	O
time_hour_offset	int
=	O
time_min_offset	int
=	O
0	int
;	O
break	O
;	O
case	O
SYM_CYCLE_END	int
:	O
loop_end	int
=	O
SPECIAL_VALUE	O
;	O
set_loop_end	int
=	O
FALSE	O
;	O
break	O
;	O
case	O
SYM_CYCLE_STEP	int
:	O
loop_step	int
=	O
DEFAULT_CYCLE_STEP	int
;	O
}	O
option	pointer
=	O
strchr	function
(	O
s2	pointer
,	O
*	O
LARG_SEP	pointer
)	O
+	O
1	int
;	O
if	O
(	O
*	O
option	pointer
==	O
RC_TIME_CHAR	char
||	O
*	O
option	pointer
==	O
RC_GMTIME_CHAR	char
)	O
{	O
if	O
(	O
lopt_id	int
==	O
SYM_TIME_OFFSET	int
)	O
rel_time_offset	char
=	O
*	O
option	pointer
;	O
else	O
if	O
(	O
lopt_id	int
==	O
SYM_CYCLE_END	int
)	O
rel_loop_end	char
=	O
*	O
option	pointer
;	O
option	pointer
++	O
;	O
}	O
else	O
if	O
(	O
lopt_id	int
==	O
SYM_TIME_OFFSET	int
)	O
rel_time_offset	char
=	O
'\0'	O
;	O
else	O
if	O
(	O
lopt_id	int
==	O
SYM_CYCLE_END	int
)	O
rel_loop_end	char
=	O
'\0'	O
;	O
if	O
(	O
*	O
option	pointer
)	O
{	O
while	O
(	O
*	O
option	pointer
)	O
{	O
skip	int
=	O
FALSE	O
;	O
switch	O
(	O
state	pointer
)	O
{	O
case	O
1	int
:	O
if	O
(	O
!	O
isdigit	function
(	O
*	O
option	pointer
)	O
)	O
{	O
if	O
(	O
*	O
option	pointer
==	O
*	O
ASC_LIT	pointer
||	O
*	O
option	pointer
==	O
*	O
DES_LIT	pointer
)	O
{	O
if	O
(	O
sign	int
||	O
time_sep_found	int
)	O
state	pointer
=	O
0	int
;	O
else	O
sign	int
++	O
;	O
break	O
;	O
}	O
else	O
state	pointer
++	O
;	O
}	O
else	O
{	O
if	O
(	O
*	O
option	pointer
==	O
'0'	O
)	O
{	O
if	O
(	O
is_leading_zero	int
)	O
{	O
skip	int
=	O
TRUE	O
;	O
break	O
;	O
}	O
digits	int
++	O
;	O
}	O
else	O
digits	int
++	O
;	O
is_leading_zero	int
=	O
FALSE	O
;	O
break	O
;	O
}	O
case	O
2	int
:	O
if	O
(	O
!	O
digits	int
&&	O
!	O
is_leading_zero	int
)	O
state	pointer
=	O
0	int
;	O
else	O
if	O
(	O
!	O
time_sep_found	int
)	O
{	O
if	O
(	O
*	O
option	pointer
==	O
*	O
time_sep	pointer
||	O
*	O
option	pointer
==	O
*	O
DEFAULT_TIME_SEP	pointer
)	O
{	O
if	O
(	O
digits	int
>	O
2	int
)	O
state	pointer
=	O
0	int
;	O
else	O
{	O
time_sep_found	int
=	O
TRUE	O
;	O
digits	int
=	O
0	int
;	O
state	pointer
--	O
;	O
}	O
}	O
else	O
state	pointer
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
digits	int
>	O
4	int
)	O
state	pointer
=	O
0	int
;	O
else	O
is_last	int
=	O
TRUE	O
;	O
}	O
break	O
;	O
default	O
:	O
state	pointer
=	O
0	int
;	O
}	O
if	O
(	O
state	pointer
&&	O
!	O
skip	int
)	O
s3	pointer
[	O
i	int
++	O
]	O
=	O
*	O
option	pointer
;	O
option	pointer
++	O
;	O
}	O
if	O
(	O
!	O
state	pointer
||	O
is_last	int
||	O
(	O
i	int
&&	O
!	O
time_sep_found	int
&&	O
!	O
is_leading_zero	int
&&	O
!	O
digits	int
)	O
||	O
(	O
time_sep_found	int
&&	O
(	O
digits	int
>	O
2	int
)	O
)	O
||	O
(	O
(	O
state	pointer
==	O
1	int
)	O
&&	O
(	O
digits	int
>	O
4	int
)	O
)	O
)	O
opt_error	int
=	O
5	int
;	O
if	O
(	O
i	int
&&	O
!	O
opt_error	int
)	O
{	O
s3	pointer
[	O
i	int
]	O
=	O
'\0'	O
;	O
i	int
=	O
atoi	function
(	O
s3	pointer
)	O
;	O
if	O
(	O
time_sep_found	int
)	O
{	O
i	int
*=	O
MINS_PER_HOUR	int
;	O
ptr_char	pointer
=	O
strchr	function
(	O
s3	pointer
,	O
*	O
time_sep	pointer
)	O
;	O
if	O
(	O
ptr_char	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
ptr_char	pointer
=	O
strchr	function
(	O
s3	pointer
,	O
*	O
DEFAULT_TIME_SEP	pointer
)	O
;	O
if	O
(	O
*	O
++	O
ptr_char	pointer
)	O
{	O
state	pointer
=	O
atoi	function
(	O
ptr_char	pointer
)	O
;	O
if	O
(	O
abs	function
(	O
state	pointer
)	O
>=	O
MINS_PER_HOUR	int
)	O
opt_error	int
=	O
5	int
;	O
else	O
if	O
(	O
!	O
i	int
)	O
{	O
if	O
(	O
*	O
s3	pointer
==	O
*	O
DES_LIT	pointer
)	O
i	int
=	O
-	O
state	pointer
;	O
else	O
i	int
=	O
state	pointer
;	O
}	O
else	O
if	O
(	O
SGN	O
(	O
i	int
)	O
<	O
0	int
)	O
i	int
-=	O
state	pointer
;	O
else	O
i	int
+=	O
state	pointer
;	O
}	O
}	O
if	O
(	O
!	O
opt_error	int
)	O
switch	O
(	O
lopt_id	int
)	O
{	O
case	O
SYM_TIME_OFFSET	int
:	O
time_hour_offset	int
=	O
MM2HH	O
(	O
abs	function
(	O
i	int
)	O
)	O
;	O
time_min_offset	int
=	O
abs	function
(	O
i	int
)	O
%	O
MINS_PER_HOUR	int
;	O
if	O
(	O
i	int
<	O
0	int
)	O
{	O
time_hour_offset	int
=	O
-	O
time_hour_offset	int
;	O
time_min_offset	int
=	O
-	O
time_min_offset	int
;	O
}	O
break	O
;	O
case	O
SYM_CYCLE_END	int
:	O
loop_end	int
=	O
i	int
;	O
set_loop_end	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_CYCLE_STEP	int
:	O
if	O
(	O
i	int
<=	O
0	int
)	O
loop_step	int
=	O
DEFAULT_CYCLE_STEP	int
;	O
else	O
if	O
(	O
i	int
>=	O
MINS_PER_DAY	int
)	O
loop_step	int
=	O
MINS_PER_DAY	int
-	O
1	int
;	O
else	O
loop_step	int
=	O
i	int
;	O
}	O
}	O
}	O
break	O
;	O
}	O
case	O
SYM_TRANSFORM_YEAR	int
:	O
option	pointer
=	O
strchr	function
(	O
s2	pointer
,	O
*	O
LARG_SEP	pointer
)	O
+	O
1	int
;	O
if	O
(	O
*	O
option	pointer
==	O
'0'	O
)	O
{	O
while	O
(	O
*	O
option	pointer
==	O
'0'	O
)	O
option	pointer
++	O
;	O
if	O
(	O
!	O
*	O
option	pointer
)	O
option	pointer
--	O
;	O
}	O
transform_year	int
=	O
atoi	function
(	O
option	pointer
)	O
;	O
if	O
(	O
transform_year	int
>	O
YEAR_MAX	int
||	O
transform_year	int
<	O
-	O
YEAR_MAX	int
)	O
opt_error	int
=	O
5	int
;	O
break	O
;	O
case	O
SYM_TRANSLATE_STRING	int
:	O
option	pointer
=	O
strchr	function
(	O
s2	pointer
,	O
*	O
LARG_SEP	pointer
)	O
+	O
1	int
;	O
len	int
=	O
strlen	function
(	O
option	pointer
)	O
;	O
if	O
(	O
len	int
&	O
1	int
)	O
opt_error	int
=	O
5	int
;	O
else	O
{	O
if	O
(	O
translate_string	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
translate_string	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
len	int
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"translate_string"	pointer
,	O
0	int
)	O
;	O
else	O
translate_string	pointer
=	O
(	O
char	O
*	O
)	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
translate_string	pointer
,	O
len	int
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"translate_string"	pointer
,	O
0	int
)	O
;	O
strcpy	function
(	O
translate_string	pointer
,	O
option	pointer
)	O
;	O
}	O
break	O
;	O
case	O
SYM_ASTRONOMICAL_HDY	int
:	O
hdy_astronomical	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_MULTICULTURAL_NEW_YEAR_HDY	int
:	O
hdy_multicultural_new_year	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_ZODIACAL_MARKER_HDY	int
:	O
hdy_zodiacal_marker	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_BAHAI_HDY	int
:	O
hdy_bahai	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_CELTIC_HDY	int
:	O
hdy_celtic	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_CHINESE_FLEXIBLE_HDY	int
:	O
hdy_chinese_flexible	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_CHINESE_HDY	int
:	O
hdy_chinese	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_CHRISTIAN_HDY	int
:	O
hdy_christian	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_HEBREW_HDY	int
:	O
hdy_hebrew	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_ISLAMIC_HDY	int
:	O
hdy_islamic	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_JAPANESE_FLEXIBLE_HDY	int
:	O
hdy_japanese_flexible	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_JAPANESE_HDY	int
:	O
hdy_japanese	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_ORTHODOX_NEW_HDY	int
:	O
hdy_orthodox_new	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_ORTHODOX_OLD_HDY	int
:	O
hdy_orthodox_old	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_PERSIAN_HDY	int
:	O
hdy_persian	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_BAHAI_MTH	int
:	O
mth_bahai	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_CHINESE_FLEXIBLE_MTH	int
:	O
mth_chinese_flexible	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_CHINESE_MTH	int
:	O
mth_chinese	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_COPTIC_MTH	int
:	O
mth_coptic	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_ETHIOPIC_MTH	int
:	O
mth_ethiopic	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_FRENCH_REVOLUTIONARY_MTH	int
:	O
mth_french_revolutionary	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_HEBREW_MTH	int
:	O
mth_hebrew	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_INDIAN_CIVIL_MTH	int
:	O
mth_indian_civil	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_ISLAMIC_MTH	int
:	O
mth_islamic	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_JAPANESE_FLEXIBLE_MTH	int
:	O
mth_japanese_flexible	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_JAPANESE_MTH	int
:	O
mth_japanese	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_OLD_ARMENIC_MTH	int
:	O
mth_old_armenic	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_OLD_EGYPTIC_MTH	int
:	O
mth_old_egyptic	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
SYM_PERSIAN_MTH	int
:	O
mth_persian	int
=	O
TRUE	O
;	O
break	O
;	O
default	O
:	O
option	pointer
=	O
s2	pointer
;	O
goto	O
LABEL_short_option	O
;	O
}	O
}	O
else	O
option	pointer
=	O
s2	pointer
;	O
}	O
else	O
opt_error	int
=	O
5	int
;	O
skip_option	int
=	O
TRUE	O
;	O
}	O
else	O
LABEL_short_option	O
:	O
switch	O
(	O
*	O
option	pointer
)	O
{	O
case	O
'?'	O
:	O
case	O
'h'	O
:	O
skip_option	int
=	O
help_flag	int
=	O
TRUE	O
;	O
option	pointer
++	O
;	O
if	O
(	O
*	O
option	pointer
)	O
{	O
if	O
(	O
*	O
option	pointer
==	O
'?'	O
||	O
*	O
option	pointer
==	O
'h'	O
)	O
{	O
ext_help_flag	int
=	O
TRUE	O
;	O
lopt_help	int
=	O
SYM_NIL	int
;	O
option	pointer
++	O
;	O
if	O
(	O
*	O
option	pointer
&&	O
is_longopt	int
)	O
{	O
len	int
=	O
(	O
int	O
)	O
strlen	function
(	O
option	pointer
)	O
;	O
if	O
(	O
(	O
Uint	int
)	O
len	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
len	int
+	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
strcpy	function
(	O
s3	pointer
,	O
option	pointer
)	O
;	O
lopt_ambig	int
=	O
(	O
Bool	int
)	O
(	O
eval_longopt	function
(	O
s3	pointer
,	O
&	O
lopt_help	int
)	O
==	O
1	int
)	O
;	O
if	O
(	O
lopt_help	int
==	O
SYM_NIL	int
)	O
help_on_help_flag	int
=	O
TRUE	O
;	O
}	O
else	O
if	O
(	O
*	O
option	pointer
)	O
opt_error	int
=	O
2	int
;	O
}	O
else	O
opt_error	int
=	O
2	int
;	O
}	O
break	O
;	O
case	O
'G'	O
:	O
case	O
'K'	O
:	O
case	O
'L'	O
:	O
case	O
'O'	O
:	O
case	O
'V'	O
:	O
case	O
'X'	O
:	O
case	O
'p'	O
:	O
case	O
'u'	O
:	O
option	pointer
++	O
;	O
if	O
(	O
!	O
*	O
option	pointer
)	O
{	O
option	pointer
--	O
;	O
switch	O
(	O
*	O
option	pointer
)	O
{	O
case	O
'G'	O
:	O
hd_suppr_list_sep_flag	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'K'	O
:	O
cal_with_week_number	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'L'	O
:	O
license_flag	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'O'	O
:	O
orthodox_calendar	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'V'	O
:	O
version_flag	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'X'	O
:	O
hd_title_flag	int
=	O
FALSE	O
;	O
break	O
;	O
case	O
'p'	O
:	O
pager_flag	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'u'	O
:	O
suppr_cal_flag	int
=	O
TRUE	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
skip_option	int
=	O
TRUE	O
;	O
}	O
else	O
opt_error	int
=	O
2	int
;	O
break	O
;	O
case	O
'R'	O
:	O
option	pointer
++	O
;	O
if	O
(	O
!	O
*	O
option	pointer
)	O
opt_error	int
=	O
4	int
;	O
else	O
{	O
if	O
(	O
rsp_filename	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
rsp_filename	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
strlen	function
(	O
option	pointer
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"rsp_filename"	pointer
,	O
0	int
)	O
;	O
else	O
rsp_filename	pointer
=	O
(	O
char	O
*	O
)	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
rsp_filename	pointer
,	O
strlen	function
(	O
option	pointer
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"rsp_filename"	pointer
,	O
0	int
)	O
;	O
strcpy	function
(	O
rsp_filename	pointer
,	O
option	pointer
)	O
;	O
skip_option	int
=	O
TRUE	O
;	O
}	O
break	O
;	O
case	O
'S'	O
:	O
option	pointer
++	O
;	O
if	O
(	O
!	O
*	O
option	pointer
)	O
opt_error	int
=	O
4	int
;	O
else	O
{	O
if	O
(	O
shl_filename	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
shl_filename	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
strlen	function
(	O
option	pointer
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"shl_filename"	pointer
,	O
0	int
)	O
;	O
else	O
shl_filename	pointer
=	O
(	O
char	O
*	O
)	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
shl_filename	pointer
,	O
strlen	function
(	O
option	pointer
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"shl_filename"	pointer
,	O
0	int
)	O
;	O
strcpy	function
(	O
shl_filename	pointer
,	O
option	pointer
)	O
;	O
skip_option	int
=	O
TRUE	O
;	O
}	O
break	O
;	O
case	O
'H'	O
:	O
option	pointer
++	O
;	O
if	O
(	O
!	O
*	O
option	pointer
)	O
opt_error	int
=	O
4	int
;	O
else	O
{	O
len	int
=	O
(	O
int	O
)	O
strlen	function
(	O
option	pointer
)	O
;	O
if	O
(	O
(	O
len	int
==	O
2	int
)	O
&&	O
(	O
tolower	function
(	O
*	O
option	pointer
)	O
==	O
'n'	O
)	O
&&	O
(	O
tolower	function
(	O
*	O
(	O
option	pointer
+	O
1	int
)	O
)	O
==	O
'o'	O
)	O
)	O
highlight_flag	int
=	O
FALSE	O
;	O
else	O
if	O
(	O
(	O
len	int
==	O
3	int
)	O
&&	O
(	O
tolower	function
(	O
*	O
option	pointer
)	O
==	O
'y'	O
)	O
&&	O
(	O
tolower	function
(	O
*	O
(	O
option	pointer
+	O
1	int
)	O
)	O
==	O
'e'	O
)	O
&&	O
(	O
tolower	function
(	O
*	O
(	O
option	pointer
+	O
2	int
)	O
)	O
==	O
's'	O
)	O
)	O
{	O
highlight_flag	int
=	O
TRUE	O
;	O
is_tty	int
=	O
(	O
int	O
)	O
TRUE	O
;	O
}	O
else	O
{	O
if	O
(	O
hl_seq	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
hl_seq	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
strlen	function
(	O
option	pointer
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"hl_seq"	pointer
,	O
0	int
)	O
;	O
else	O
hl_seq	pointer
=	O
(	O
char	O
*	O
)	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
hl_seq	pointer
,	O
strlen	function
(	O
option	pointer
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"hl_seq"	pointer
,	O
0	int
)	O
;	O
strcpy	function
(	O
hl_seq	pointer
,	O
option	pointer
)	O
;	O
highlight_flag	int
=	O
TRUE	O
;	O
}	O
}	O
skip_option	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'i'	O
:	O
option	pointer
++	O
;	O
if	O
(	O
is_en	int
)	O
{	O
special_calsheet_flag	int
=	O
FALSE	O
;	O
if	O
(	O
!	O
year_flag	int
)	O
out_rows	int
=	O
S_OUT_ROWS	int
;	O
}	O
else	O
{	O
special_calsheet_flag	int
=	O
TRUE	O
;	O
if	O
(	O
!	O
year_flag	int
)	O
out_rows	int
=	O
J_OUT_ROWS	int
;	O
}	O
if	O
(	O
*	O
option	pointer
)	O
{	O
if	O
(	O
*	O
option	pointer
==	O
'-'	O
)	O
{	O
option	pointer
++	O
;	O
if	O
(	O
*	O
option	pointer
)	O
opt_error	int
=	O
5	int
;	O
}	O
else	O
opt_error	int
=	O
5	int
;	O
}	O
option	pointer
--	O
;	O
break	O
;	O
case	O
'n'	O
:	O
case	O
'N'	O
:	O
skip_option	int
=	O
holiday_flag	int
=	O
TRUE	O
;	O
hd_sort_des_flag	int
=	O
FALSE	O
;	O
hd_legal_days_only	int
=	O
(	O
Bool	int
)	O
(	O
(	O
*	O
option	pointer
==	O
'N'	O
)	O
?	O
TRUE	O
:	O
FALSE	O
)	O
;	O
option	pointer
++	O
;	O
if	O
(	O
*	O
option	pointer
)	O
{	O
if	O
(	O
*	O
option	pointer
==	O
*	O
DES_LIT	pointer
)	O
hd_sort_des_flag	int
=	O
TRUE	O
;	O
else	O
opt_error	int
=	O
5	int
;	O
}	O
break	O
;	O
case	O
'q'	O
:	O
option	pointer
++	O
;	O
if	O
(	O
!	O
*	O
option	pointer
)	O
opt_error	int
=	O
4	int
;	O
else	O
{	O
auto	O
const	O
Cc_struct	struct
*	O
ptr_cc	pointer
;	O
*	O
s1	pointer
=	O
'\0'	O
;	O
ptr_char	pointer
=	O
option	pointer
;	O
while	O
(	O
*	O
ptr_char	pointer
&&	O
!	O
opt_error	int
)	O
do	O
{	O
i	int
=	O
0	int
;	O
while	O
(	O
*	O
ptr_char	pointer
&&	O
(	O
*	O
ptr_char	pointer
!=	O
*	O
CONNECT_SEP	pointer
)	O
)	O
s2	pointer
[	O
i	int
++	O
]	O
=	O
(	O
char	O
)	O
toupper	function
(	O
*	O
ptr_char	pointer
++	O
)	O
;	O
s2	pointer
[	O
i	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
*	O
ptr_char	pointer
)	O
ptr_char	pointer
++	O
;	O
ptr_cc	pointer
=	O
binsearch_cc_id	function
(	O
s2	pointer
)	O
;	O
if	O
(	O
ptr_cc	pointer
==	O
(	O
Cc_struct	struct
*	O
)	O
NULL	O
)	O
{	O
opt_error	int
=	O
5	int
;	O
break	O
;	O
}	O
else	O
if	O
(	O
strstr	function
(	O
s1	pointer
,	O
s2	pointer
)	O
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
strcat	function
(	O
s1	pointer
,	O
s2	pointer
)	O
;	O
if	O
(	O
*	O
ptr_char	pointer
)	O
strcat	function
(	O
s1	pointer
,	O
CONNECT_SEP	pointer
)	O
;	O
}	O
}	O
while	O
(	O
*	O
ptr_char	pointer
)	O
;	O
if	O
(	O
!	O
opt_error	int
)	O
{	O
if	O
(	O
cc	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
cc	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
strlen	function
(	O
s1	pointer
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"cc"	pointer
,	O
0	int
)	O
;	O
else	O
cc	pointer
=	O
(	O
char	O
*	O
)	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
cc	pointer
,	O
strlen	function
(	O
s1	pointer
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"cc"	pointer
,	O
0	int
)	O
;	O
strcpy	function
(	O
cc	pointer
,	O
s1	pointer
)	O
;	O
}	O
}	O
skip_option	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'!'	O
:	O
if	O
(	O
!	O
is_longopt	int
)	O
opt_error	int
=	O
2	int
;	O
else	O
{	O
option	pointer
++	O
;	O
if	O
(	O
(	O
Uint	int
)	O
*	O
option	pointer
<	O
LARG_MAX	int
-	O
1	int
)	O
{	O
date_format	pointer
=	O
supported_date_format	array
;	O
date_format	pointer
+=	O
(	O
(	O
Uint	int
)	O
*	O
option	pointer
-	O
1	int
)	O
;	O
if	O
(	O
date_format	pointer
->	O
df_id	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
opt_error	int
=	O
5	int
;	O
}	O
else	O
{	O
users_date_format	struct
.	O
df_info	pointer
=	O
_	O
(	O
"command line"	pointer
)	O
;	O
if	O
(	O
users_date_format	struct
.	O
df_format	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
users_date_format	struct
.	O
df_format	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
strlen	function
(	O
option	pointer
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"users_date_format.df_format"	pointer
,	O
0	int
)	O
;	O
else	O
users_date_format	struct
.	O
df_format	pointer
=	O
(	O
char	O
*	O
)	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
users_date_format	struct
.	O
df_format	pointer
,	O
strlen	function
(	O
option	pointer
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"users_date_format.df_format"	pointer
,	O
0	int
)	O
;	O
strcpy	function
(	O
users_date_format	struct
.	O
df_format	pointer
,	O
option	pointer
)	O
;	O
date_format	pointer
=	O
&	O
users_date_format	struct
;	O
}	O
if	O
(	O
!	O
opt_error	int
)	O
{	O
if	O
(	O
!	O
is_correct_date_format	function
(	O
date_format	pointer
->	O
df_format	pointer
,	O
&	O
use_day_suffix	pointer
,	O
&	O
use_short3_day_name	int
,	O
&	O
use_day_zeroleaded	int
,	O
&	O
use_year_zeroleaded	int
)	O
)	O
errtxt_dformat	pointer
=	O
_	O
(	O
"command line"	pointer
)	O
;	O
else	O
errtxt_dformat	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
skip_option	int
=	O
TRUE	O
;	O
}	O
break	O
;	O
case	O
'$'	O
:	O
if	O
(	O
!	O
is_longopt	int
)	O
opt_error	int
=	O
2	int
;	O
else	O
{	O
option	pointer
++	O
;	O
if	O
(	O
(	O
Uint	int
)	O
*	O
option	pointer
<	O
LARG_MAX	int
-	O
1	int
)	O
{	O
greg	pointer
=	O
greg_reform_date	array
;	O
greg	pointer
+=	O
(	O
(	O
Uint	int
)	O
*	O
option	pointer
-	O
1	int
)	O
;	O
if	O
(	O
!	O
greg	pointer
->	O
year	int
)	O
opt_error	int
=	O
5	int
;	O
}	O
else	O
{	O
auto	O
Bool	int
ok	int
=	O
FALSE	O
;	O
users_greg	struct
.	O
year	int
=	O
users_greg	struct
.	O
month	int
=	O
users_greg	struct
.	O
first_day	int
=	O
users_greg	struct
.	O
last_day	int
=	O
0	int
;	O
ptr_char	pointer
=	O
option	pointer
;	O
do	O
{	O
i	int
=	O
0	int
;	O
while	O
(	O
!	O
ok	int
&&	O
!	O
opt_error	int
)	O
{	O
if	O
(	O
isdigit	function
(	O
*	O
ptr_char	pointer
)	O
&&	O
(	O
i	int
<=	O
len_year_max	int
)	O
)	O
s1	pointer
[	O
i	int
++	O
]	O
=	O
*	O
ptr_char	pointer
;	O
else	O
{	O
if	O
(	O
isdigit	function
(	O
*	O
ptr_char	pointer
)	O
)	O
opt_error	int
=	O
5	int
;	O
else	O
if	O
(	O
i	int
&&	O
(	O
*	O
ptr_char	pointer
==	O
*	O
SPLIT_SEP	pointer
)	O
)	O
{	O
ptr_char	pointer
++	O
;	O
if	O
(	O
*	O
ptr_char	pointer
==	O
*	O
SPLIT_SEP	pointer
)	O
opt_error	int
=	O
5	int
;	O
else	O
break	O
;	O
}	O
else	O
if	O
(	O
!	O
i	int
&&	O
*	O
ptr_char	pointer
)	O
opt_error	int
=	O
5	int
;	O
else	O
ok	int
=	O
TRUE	O
;	O
}	O
if	O
(	O
*	O
ptr_char	pointer
)	O
ptr_char	pointer
++	O
;	O
}	O
if	O
(	O
!	O
opt_error	int
)	O
{	O
s1	pointer
[	O
i	int
]	O
=	O
'\0'	O
;	O
len	int
=	O
i	int
;	O
i	int
=	O
atoi	function
(	O
s1	pointer
)	O
;	O
if	O
(	O
i	int
)	O
{	O
if	O
(	O
!	O
users_greg	struct
.	O
year	int
)	O
{	O
if	O
(	O
len	int
>	O
len_year_max	int
)	O
if	O
(	O
atol	function
(	O
s1	pointer
)	O
>	O
YEAR_MAX	int
+	O
3	int
)	O
opt_error	int
=	O
5	int
;	O
users_greg	struct
.	O
year	int
=	O
i	int
;	O
}	O
else	O
if	O
(	O
!	O
users_greg	struct
.	O
month	int
)	O
users_greg	struct
.	O
month	int
=	O
i	int
;	O
else	O
if	O
(	O
!	O
users_greg	struct
.	O
first_day	int
)	O
users_greg	struct
.	O
first_day	int
=	O
i	int
;	O
else	O
if	O
(	O
!	O
users_greg	struct
.	O
last_day	int
)	O
users_greg	struct
.	O
last_day	int
=	O
i	int
;	O
else	O
opt_error	int
=	O
5	int
;	O
}	O
else	O
opt_error	int
=	O
5	int
;	O
}	O
}	O
while	O
(	O
!	O
ok	int
&&	O
!	O
opt_error	int
)	O
;	O
if	O
(	O
!	O
opt_error	int
)	O
{	O
if	O
(	O
users_greg	struct
.	O
month	int
&&	O
users_greg	struct
.	O
first_day	int
&&	O
users_greg	struct
.	O
last_day	int
&&	O
(	O
users_greg	struct
.	O
year	int
<=	O
YEAR_MAX	int
+	O
3	int
)	O
&&	O
(	O
users_greg	struct
.	O
month	int
<=	O
MONTH_MAX	int
)	O
&&	O
(	O
users_greg	struct
.	O
last_day	int
>=	O
users_greg	struct
.	O
first_day	int
)	O
&&	O
(	O
(	O
(	O
users_greg	struct
.	O
month	int
==	O
2	int
)	O
&&	O
(	O
users_greg	struct
.	O
last_day	int
<=	O
(	O
(	O
users_greg	struct
.	O
year	int
&	O
3	int
)	O
?	O
28	int
:	O
29	int
)	O
)	O
)	O
||	O
(	O
(	O
users_greg	struct
.	O
month	int
!=	O
2	int
)	O
&&	O
(	O
users_greg	struct
.	O
last_day	int
<=	O
dvec	array
[	O
users_greg	struct
.	O
month	int
-	O
1	int
]	O
)	O
)	O
)	O
)	O
greg	pointer
=	O
&	O
users_greg	struct
;	O
else	O
opt_error	int
=	O
5	int
;	O
}	O
}	O
skip_option	int
=	O
TRUE	O
;	O
}	O
break	O
;	O
case	O
'j'	O
:	O
option	pointer
++	O
;	O
if	O
(	O
!	O
*	O
option	pointer
)	O
{	O
cal_special_flag	int
=	O
TRUE	O
;	O
cal_both_dates_flag	int
=	O
FALSE	O
;	O
}	O
else	O
{	O
if	O
(	O
*	O
option	pointer
==	O
'b'	O
)	O
{	O
option	pointer
++	O
;	O
if	O
(	O
!	O
*	O
option	pointer
)	O
{	O
cal_special_flag	int
=	O
FALSE	O
;	O
cal_both_dates_flag	int
=	O
TRUE	O
;	O
}	O
else	O
opt_error	int
=	O
5	int
;	O
}	O
else	O
{	O
switch	O
(	O
*	O
option	pointer
)	O
{	O
case	O
'n'	O
:	O
option	pointer
++	O
;	O
if	O
(	O
!	O
*	O
option	pointer
)	O
{	O
hd_special_flag	int
=	O
TRUE	O
;	O
hd_both_dates_flag	int
=	O
FALSE	O
;	O
}	O
else	O
if	O
(	O
*	O
option	pointer
==	O
'b'	O
)	O
{	O
hd_special_flag	int
=	O
FALSE	O
;	O
hd_both_dates_flag	int
=	O
TRUE	O
;	O
}	O
else	O
opt_error	int
=	O
5	int
;	O
break	O
;	O
case	O
'c'	O
:	O
option	pointer
++	O
;	O
if	O
(	O
!	O
*	O
option	pointer
)	O
{	O
rc_special_flag	int
=	O
TRUE	O
;	O
rc_both_dates_flag	int
=	O
FALSE	O
;	O
}	O
else	O
if	O
(	O
*	O
option	pointer
==	O
'b'	O
)	O
{	O
rc_special_flag	int
=	O
FALSE	O
;	O
rc_both_dates_flag	int
=	O
TRUE	O
;	O
}	O
else	O
opt_error	int
=	O
5	int
;	O
break	O
;	O
default	O
:	O
opt_error	int
=	O
5	int
;	O
}	O
}	O
}	O
if	O
(	O
!	O
*	O
option	pointer
)	O
option	pointer
--	O
;	O
break	O
;	O
case	O
'b'	O
:	O
skip_option	int
=	O
year_flag	int
=	O
TRUE	O
;	O
option	pointer
++	O
;	O
if	O
(	O
*	O
option	pointer
==	O
'0'	O
)	O
{	O
while	O
(	O
*	O
option	pointer
==	O
'0'	O
)	O
option	pointer
++	O
;	O
if	O
(	O
!	O
*	O
option	pointer
)	O
option	pointer
--	O
;	O
}	O
out_rows	int
=	O
my_atoi	function
(	O
option	pointer
)	O
;	O
if	O
(	O
out_rows	int
>	O
MONTH_MAX	int
||	O
out_rows	int
<	O
MONTH_MIN	int
||	O
out_rows	int
==	O
5	int
||	O
(	O
(	O
out_rows	int
>	O
6	int
)	O
&&	O
(	O
out_rows	int
<	O
MONTH_MAX	int
)	O
)	O
)	O
{	O
if	O
(	O
!	O
*	O
option	pointer
)	O
opt_error	int
=	O
4	int
;	O
else	O
opt_error	int
=	O
5	int
;	O
}	O
break	O
;	O
case	O
's'	O
:	O
option	pointer
++	O
;	O
if	O
(	O
!	O
*	O
option	pointer
)	O
opt_error	int
=	O
4	int
;	O
else	O
{	O
start_day	int
=	O
my_atoi	function
(	O
option	pointer
)	O
;	O
if	O
(	O
!	O
start_day	int
)	O
start_day	int
=	O
compare_d_m_name	function
(	O
option	pointer
,	O
DAy	int
)	O
;	O
if	O
(	O
!	O
start_day	int
)	O
{	O
len	int
=	O
(	O
int	O
)	O
strlen	function
(	O
option	pointer
)	O
;	O
if	O
(	O
(	O
Uint	int
)	O
len	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
len	int
+	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
strcpy	function
(	O
s1	pointer
,	O
option	pointer
)	O
;	O
if	O
(	O
strlen	function
(	O
s1	pointer
)	O
>	O
strlen	function
(	O
"today"	pointer
)	O
)	O
opt_error	int
=	O
5	int
;	O
else	O
if	O
(	O
isdigit	function
(	O
*	O
option	pointer
)	O
||	O
!	O
strncasecmp	function
(	O
s1	pointer
,	O
"today"	pointer
,	O
len	int
)	O
)	O
start_day	int
=	O
SPECIAL_VALUE	O
;	O
else	O
opt_error	int
=	O
5	int
;	O
}	O
else	O
if	O
(	O
start_day	int
>	O
DAY_MAX	int
||	O
start_day	int
<	O
DAY_MIN	int
)	O
opt_error	int
=	O
5	int
;	O
}	O
skip_option	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'r'	O
:	O
case	O
'v'	O
:	O
option	pointer
++	O
;	O
if	O
(	O
!	O
*	O
option	pointer
)	O
opt_error	int
=	O
4	int
;	O
skip_option	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'f'	O
:	O
case	O
'F'	O
:	O
if	O
(	O
isupper	function
(	O
*	O
option	pointer
)	O
)	O
rc_all_dates_flag	int
=	O
TRUE	O
;	O
option	pointer
++	O
;	O
if	O
(	O
!	O
*	O
option	pointer
)	O
opt_error	int
=	O
4	int
;	O
else	O
{	O
len	int
=	O
(	O
int	O
)	O
strlen	function
(	O
option	pointer
)	O
;	O
if	O
(	O
*	O
option	pointer
==	O
*	O
CONNECT_SEP	pointer
)	O
opt_error	int
=	O
5	int
;	O
else	O
{	O
if	O
(	O
len	int
>	O
1	int
)	O
{	O
if	O
(	O
(	O
*	O
(	O
option	pointer
+	O
(	O
len	int
-	O
1	int
)	O
)	O
==	O
*	O
CONNECT_SEP	pointer
)	O
&&	O
(	O
*	O
(	O
option	pointer
+	O
(	O
len	int
-	O
2	int
)	O
)	O
!=	O
QUOTE_CHAR	char
)	O
)	O
opt_error	int
=	O
5	int
;	O
else	O
{	O
ptr_char	pointer
=	O
strchr	function
(	O
option	pointer
,	O
*	O
CONNECT_SEP	pointer
)	O
;	O
if	O
(	O
ptr_char	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
ptr_char	pointer
--	O
;	O
if	O
(	O
*	O
ptr_char	pointer
==	O
QUOTE_CHAR	char
)	O
ptr_char	pointer
++	O
;	O
ptr_char	pointer
++	O
;	O
while	O
(	O
*	O
ptr_char	pointer
&&	O
!	O
opt_error	int
)	O
{	O
if	O
(	O
*	O
ptr_char	pointer
==	O
QUOTE_CHAR	char
)	O
ptr_char	pointer
++	O
;	O
else	O
if	O
(	O
*	O
ptr_char	pointer
==	O
*	O
CONNECT_SEP	pointer
)	O
{	O
ptr_char	pointer
++	O
;	O
if	O
(	O
*	O
ptr_char	pointer
==	O
QUOTE_CHAR	char
)	O
ptr_char	pointer
++	O
;	O
else	O
if	O
(	O
*	O
ptr_char	pointer
==	O
*	O
CONNECT_SEP	pointer
)	O
opt_error	int
=	O
5	int
;	O
}	O
if	O
(	O
*	O
ptr_char	pointer
)	O
ptr_char	pointer
++	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
!	O
opt_error	int
)	O
{	O
if	O
(	O
rc_filename	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
rc_filename	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
len	int
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"rc_filename"	pointer
,	O
0	int
)	O
;	O
else	O
rc_filename	pointer
=	O
(	O
char	O
*	O
)	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
rc_filename	pointer
,	O
len	int
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"rc_filename"	pointer
,	O
0	int
)	O
;	O
strcpy	function
(	O
rc_filename	pointer
,	O
option	pointer
)	O
;	O
skip_option	int
=	O
rc_use_flag	int
=	O
TRUE	O
;	O
}	O
}	O
}	O
break	O
;	O
case	O
'#'	O
:	O
option	pointer
++	O
;	O
if	O
(	O
!	O
*	O
option	pointer
)	O
opt_error	int
=	O
4	int
;	O
else	O
{	O
if	O
(	O
rc_here_fn	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
ptr_char	pointer
=	O
TMPFILENAME	O
;	O
if	O
(	O
ptr_char	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
my_error	function
(	O
ERR_INTERNAL_C_FUNC_FAILURE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"tmpnam()="	pointer
,	O
0	int
)	O
;	O
rc_here_fn	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
strlen	function
(	O
ptr_char	pointer
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"rc_here_fn"	pointer
,	O
0	int
)	O
;	O
strcpy	function
(	O
rc_here_fn	pointer
,	O
ptr_char	pointer
)	O
;	O
rc_here_fp	pointer
=	O
fopen	function
(	O
rc_here_fn	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
rc_here_fp	pointer
==	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
my_error	function
(	O
ERR_WRITE_FILE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
rc_here_fn	pointer
,	O
0	int
)	O
;	O
}	O
len	int
=	O
(	O
int	O
)	O
strlen	function
(	O
option	pointer
)	O
;	O
if	O
(	O
(	O
Uint	int
)	O
len	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
len	int
+	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
strcpy	function
(	O
s2	pointer
,	O
option	pointer
)	O
;	O
pseudo_blank_conversion	function
(	O
&	O
s2	pointer
)	O
;	O
i	int
=	O
fprintf	function
(	O
rc_here_fp	pointer
,	O
"%s\n"	pointer
,	O
s2	pointer
)	O
;	O
if	O
(	O
i	int
==	O
EOF	O
)	O
my_error	function
(	O
ERR_WRITE_FILE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
rc_here_fn	pointer
,	O
0	int
)	O
;	O
}	O
skip_option	int
=	O
rc_use_flag	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'D'	O
:	O
option	pointer
++	O
;	O
if	O
(	O
!	O
*	O
option	pointer
)	O
opt_error	int
=	O
4	int
;	O
else	O
{	O
ptr_char	pointer
=	O
option	pointer
;	O
while	O
(	O
*	O
ptr_char	pointer
&&	O
!	O
opt_error	int
)	O
if	O
(	O
*	O
ptr_char	pointer
==	O
RC_EX_LHDY_CHAR	char
||	O
*	O
ptr_char	pointer
==	O
RC_EX_NLHDY_CHAR	char
||	O
*	O
ptr_char	pointer
==	O
RC_EX_AHDY_CHAR	char
||	O
*	O
ptr_char	pointer
==	O
RC_EX_NAHDY_CHAR	char
||	O
*	O
ptr_char	pointer
==	O
RC_EX_MON_CHAR	char
||	O
*	O
ptr_char	pointer
==	O
RC_EX_NMON_CHAR	char
||	O
*	O
ptr_char	pointer
==	O
RC_EX_TUE_CHAR	char
||	O
*	O
ptr_char	pointer
==	O
RC_EX_NTUE_CHAR	char
||	O
*	O
ptr_char	pointer
==	O
RC_EX_WED_CHAR	char
||	O
*	O
ptr_char	pointer
==	O
RC_EX_NWED_CHAR	char
||	O
*	O
ptr_char	pointer
==	O
RC_EX_THU_CHAR	char
||	O
*	O
ptr_char	pointer
==	O
RC_EX_NTHU_CHAR	char
||	O
*	O
ptr_char	pointer
==	O
RC_EX_FRI_CHAR	char
||	O
*	O
ptr_char	pointer
==	O
RC_EX_NFRI_CHAR	char
||	O
*	O
ptr_char	pointer
==	O
RC_EX_SAT_CHAR	char
||	O
*	O
ptr_char	pointer
==	O
RC_EX_NSAT_CHAR	char
||	O
*	O
ptr_char	pointer
==	O
RC_EX_SUN_CHAR	char
||	O
*	O
ptr_char	pointer
==	O
RC_EX_NSUN_CHAR	char
||	O
*	O
ptr_char	pointer
==	O
RC_EX_MON_2_THU_CHAR	char
||	O
*	O
ptr_char	pointer
==	O
RC_EX_NMON_2_THU_CHAR	char
||	O
*	O
ptr_char	pointer
==	O
RC_EX_MON_2_FRI_CHAR	char
||	O
*	O
ptr_char	pointer
==	O
RC_EX_NMON_2_FRI_CHAR	char
)	O
ptr_char	pointer
++	O
;	O
else	O
opt_error	int
=	O
5	int
;	O
if	O
(	O
!	O
opt_error	int
)	O
{	O
if	O
(	O
rc_filter_day	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
rc_filter_day	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
strlen	function
(	O
option	pointer
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"rc_filter_day"	pointer
,	O
0	int
)	O
;	O
else	O
rc_filter_day	pointer
=	O
(	O
char	O
*	O
)	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
rc_filter_day	pointer
,	O
strlen	function
(	O
option	pointer
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"rc_filter_day"	pointer
,	O
0	int
)	O
;	O
strcpy	function
(	O
rc_filter_day	pointer
,	O
option	pointer
)	O
;	O
}	O
}	O
skip_option	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'P'	O
:	O
option	pointer
++	O
;	O
if	O
(	O
!	O
*	O
option	pointer
)	O
opt_error	int
=	O
4	int
;	O
else	O
{	O
ptr_char	pointer
=	O
option	pointer
;	O
while	O
(	O
*	O
ptr_char	pointer
&&	O
!	O
opt_error	int
)	O
if	O
(	O
*	O
ptr_char	pointer
==	O
RC_IDATE_CHAR	char
||	O
*	O
ptr_char	pointer
==	O
RC_EDATE_CHAR	char
)	O
{	O
ptr_char	pointer
++	O
;	O
while	O
(	O
*	O
ptr_char	pointer
&&	O
(	O
*	O
ptr_char	pointer
!=	O
*	O
SPLIT_SEP	pointer
)	O
)	O
ptr_char	pointer
++	O
;	O
if	O
(	O
!	O
*	O
ptr_char	pointer
||	O
*	O
ptr_char	pointer
==	O
*	O
SPLIT_SEP	pointer
)	O
{	O
if	O
(	O
*	O
ptr_char	pointer
)	O
ptr_char	pointer
++	O
;	O
}	O
else	O
opt_error	int
=	O
5	int
;	O
}	O
else	O
opt_error	int
=	O
5	int
;	O
if	O
(	O
!	O
opt_error	int
)	O
{	O
if	O
(	O
rc_filter_period	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
rc_filter_period	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
strlen	function
(	O
option	pointer
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"rc_filter_period"	pointer
,	O
0	int
)	O
;	O
else	O
rc_filter_period	pointer
=	O
(	O
char	O
*	O
)	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
rc_filter_period	pointer
,	O
strlen	function
(	O
option	pointer
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"rc_filter_period"	pointer
,	O
0	int
)	O
;	O
strcpy	function
(	O
rc_filter_period	pointer
,	O
option	pointer
)	O
;	O
}	O
}	O
skip_option	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'I'	O
:	O
option	pointer
++	O
;	O
if	O
(	O
!	O
*	O
option	pointer
)	O
opt_error	int
=	O
4	int
;	O
else	O
{	O
if	O
(	O
rc_filter_text	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
rc_filter_text	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
strlen	function
(	O
option	pointer
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"rc_filter_text"	pointer
,	O
0	int
)	O
;	O
else	O
rc_filter_text	pointer
=	O
(	O
char	O
*	O
)	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
rc_filter_text	pointer
,	O
strlen	function
(	O
option	pointer
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"rc_filter_text"	pointer
,	O
0	int
)	O
;	O
strcpy	function
(	O
rc_filter_text	pointer
,	O
option	pointer
)	O
;	O
}	O
skip_option	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'g'	O
:	O
option	pointer
++	O
;	O
if	O
(	O
*	O
option	pointer
)	O
{	O
if	O
(	O
rc_grp_sep	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
rc_grp_sep	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
strlen	function
(	O
option	pointer
)	O
+	O
1	int
+	O
2	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"rc_grp_sep"	pointer
,	O
0	int
)	O
;	O
else	O
rc_grp_sep	pointer
=	O
(	O
char	O
*	O
)	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
rc_grp_sep	pointer
,	O
strlen	function
(	O
option	pointer
)	O
+	O
1	int
+	O
2	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"rc_grp_sep"	pointer
,	O
0	int
)	O
;	O
strcpy	function
(	O
rc_grp_sep	pointer
,	O
"0 "	pointer
)	O
;	O
strcat	function
(	O
rc_grp_sep	pointer
,	O
option	pointer
)	O
;	O
pseudo_blank_conversion	function
(	O
&	O
rc_grp_sep	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
rc_grp_sep	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
rc_grp_sep	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
strlen	function
(	O
RC_GROUP_SEP	pointer
)	O
+	O
1	int
+	O
2	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"rc_grp_sep"	pointer
,	O
0	int
)	O
;	O
else	O
rc_grp_sep	pointer
=	O
(	O
char	O
*	O
)	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
rc_grp_sep	pointer
,	O
strlen	function
(	O
RC_GROUP_SEP	pointer
)	O
+	O
1	int
+	O
2	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"rc_grp_sep"	pointer
,	O
0	int
)	O
;	O
strcpy	function
(	O
rc_grp_sep	pointer
,	O
"0 "	pointer
)	O
;	O
strcat	function
(	O
rc_grp_sep	pointer
,	O
RC_GROUP_SEP	pointer
)	O
;	O
}	O
skip_option	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'a'	O
:	O
rc_enable_fn_flag	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'A'	O
:	O
rc_alternative_format_flag	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'd'	O
:	O
rc_have_today_in_list	int
=	O
1	int
;	O
break	O
;	O
case	O
'e'	O
:	O
case	O
'E'	O
:	O
if	O
(	O
isupper	function
(	O
*	O
option	pointer
)	O
)	O
{	O
rc_enable_hdl_flag	int
=	O
TRUE	O
;	O
rc_enable_hda_flag	int
=	O
FALSE	O
;	O
}	O
else	O
{	O
rc_enable_hdl_flag	int
=	O
FALSE	O
;	O
rc_enable_hda_flag	int
=	O
TRUE	O
;	O
}	O
break	O
;	O
case	O
'o'	O
:	O
rc_omit_date_flag	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'l'	O
:	O
rc_period_list	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'k'	O
:	O
rc_week_number_flag	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'U'	O
:	O
rc_suppr_date_part_flag	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'Q'	O
:	O
rc_suppr_list_sep_flag	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'J'	O
:	O
rc_suppr_text_part_flag	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'x'	O
:	O
rc_title_flag	int
=	O
FALSE	O
;	O
break	O
;	O
case	O
'z'	O
:	O
rc_count_flag	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'Z'	O
:	O
rc_zero_dates_flag	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'c'	O
:	O
case	O
'C'	O
:	O
rc_use_flag	int
=	O
TRUE	O
;	O
if	O
(	O
isupper	function
(	O
*	O
option	pointer
)	O
)	O
rc_all_dates_flag	int
=	O
TRUE	O
;	O
option	pointer
++	O
;	O
if	O
(	O
*	O
option	pointer
==	O
*	O
DES_LIT	pointer
)	O
{	O
rc_sort_des_flag	int
=	O
TRUE	O
;	O
while	O
(	O
*	O
option	pointer
==	O
*	O
DES_LIT	pointer
)	O
option	pointer
++	O
;	O
}	O
option	pointer
--	O
;	O
break	O
;	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
case	O
RC_HDY_CHAR	char
:	O
case	O
RC_NWD_CHAR	char
:	O
skip_option	int
=	O
rc_period_flag	int
=	O
TRUE	O
;	O
if	O
(	O
rc_period_argv	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
rc_period_argv	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
strlen	function
(	O
*	O
argv	array
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"rc_period_argv"	pointer
,	O
0	int
)	O
;	O
else	O
rc_period_argv	pointer
=	O
(	O
char	O
*	O
)	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
rc_period_argv	pointer
,	O
strlen	function
(	O
*	O
argv	array
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"rc_period_argv"	pointer
,	O
0	int
)	O
;	O
strcpy	function
(	O
rc_period_argv	pointer
,	O
*	O
argv	array
)	O
;	O
if	O
(	O
rc_period_option	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
rc_period_option	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
strlen	function
(	O
option	pointer
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"rc_period_option"	pointer
,	O
0	int
)	O
;	O
else	O
rc_period_option	pointer
=	O
(	O
char	O
*	O
)	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
rc_period_option	pointer
,	O
strlen	function
(	O
option	pointer
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"rc_period_option"	pointer
,	O
0	int
)	O
;	O
strcpy	function
(	O
rc_period_option	pointer
,	O
option	pointer
)	O
;	O
rc_period_is_longopt	int
=	O
is_longopt	int
;	O
break	O
;	O
case	O
't'	O
:	O
case	O
'T'	O
:	O
rc_clean_flags	function
(	O
)	O
;	O
skip_option	int
=	O
rc_use_flag	int
=	O
rc_tomorrow_flag	int
=	O
TRUE	O
;	O
if	O
(	O
isupper	function
(	O
*	O
option	pointer
)	O
)	O
rc_all_dates_flag	int
=	O
TRUE	O
;	O
option	pointer
++	O
;	O
if	O
(	O
*	O
option	pointer
)	O
opt_error	int
=	O
5	int
;	O
break	O
;	O
case	O
'w'	O
:	O
case	O
'W'	O
:	O
case	O
'm'	O
:	O
case	O
'M'	O
:	O
case	O
'y'	O
:	O
case	O
'Y'	O
:	O
rc_clean_flags	function
(	O
)	O
;	O
switch	O
(	O
*	O
option	pointer
)	O
{	O
case	O
'w'	O
:	O
case	O
'W'	O
:	O
rc_week_flag	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
'm'	O
:	O
case	O
'M'	O
:	O
rc_month_flag	int
=	O
TRUE	O
;	O
break	O
;	O
default	O
:	O
rc_year_flag	int
=	O
TRUE	O
;	O
}	O
skip_option	int
=	O
rc_use_flag	int
=	O
TRUE	O
;	O
if	O
(	O
isupper	function
(	O
*	O
option	pointer
)	O
)	O
rc_all_dates_flag	int
=	O
TRUE	O
;	O
opt_error	int
=	O
further_check	function
(	O
&	O
option	pointer
)	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
is_longopt	int
)	O
opt_error	int
=	O
5	int
;	O
else	O
opt_error	int
=	O
2	int
;	O
}	O
if	O
(	O
opt_error	int
)	O
{	O
ptr_char	pointer
=	O
*	O
argv	array
;	O
LABEL_option_error	O
:	O
if	O
(	O
!	O
is_longopt	int
)	O
while	O
(	O
*	O
ptr_char	pointer
==	O
*	O
SWITCH	pointer
)	O
ptr_char	pointer
++	O
;	O
if	O
(	O
*	O
ptr_char	pointer
==	O
*	O
SWITCH2	pointer
)	O
if	O
(	O
*	O
(	O
ptr_char	pointer
+	O
1	int
)	O
!=	O
*	O
SWITCH2	pointer
)	O
ptr_char	pointer
++	O
;	O
switch	O
(	O
opt_error	int
)	O
{	O
case	O
1	int
:	O
case	O
2	int
:	O
case	O
3	int
:	O
case	O
4	int
:	O
case	O
5	int
:	O
case	O
6	int
:	O
if	O
(	O
is_longopt	int
&&	O
(	O
opt_error	int
==	O
3	int
)	O
)	O
len	int
=	O
(	O
int	O
)	O
strlen	function
(	O
option	pointer
)	O
+	O
LEN_SINGLE_LINE	int
;	O
else	O
len	int
=	O
(	O
int	O
)	O
strlen	function
(	O
ptr_char	pointer
)	O
+	O
LEN_SINGLE_LINE	int
;	O
if	O
(	O
(	O
Uint	int
)	O
len	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
len	int
+	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
break	O
;	O
default	O
:	O
;	O
}	O
switch	O
(	O
opt_error	int
)	O
{	O
case	O
1	int
:	O
sprintf	function
(	O
s1	pointer
,	O
_	O
(	O
"%s: option `%s' is ambiguous"	pointer
)	O
,	O
prgr_name	pointer
,	O
ptr_char	pointer
)	O
;	O
break	O
;	O
case	O
2	int
:	O
if	O
(	O
is_longopt	int
)	O
sprintf	function
(	O
s1	pointer
,	O
_	O
(	O
"%s: unrecognized option `%s'"	pointer
)	O
,	O
prgr_name	pointer
,	O
ptr_char	pointer
)	O
;	O
else	O
sprintf	function
(	O
s1	pointer
,	O
_	O
(	O
"%s: invalid option -- %s"	pointer
)	O
,	O
prgr_name	pointer
,	O
ptr_char	pointer
)	O
;	O
break	O
;	O
case	O
3	int
:	O
if	O
(	O
is_longopt	int
)	O
sprintf	function
(	O
s1	pointer
,	O
_	O
(	O
"%s: option `--%s' doesn't allow an argument"	pointer
)	O
,	O
prgr_name	pointer
,	O
option	pointer
)	O
;	O
else	O
sprintf	function
(	O
s1	pointer
,	O
_	O
(	O
"%s: option `%s' doesn't allow an argument"	pointer
)	O
,	O
prgr_name	pointer
,	O
ptr_char	pointer
)	O
;	O
break	O
;	O
case	O
4	int
:	O
if	O
(	O
is_longopt	int
)	O
sprintf	function
(	O
s1	pointer
,	O
_	O
(	O
"%s: option `%s' requires an argument"	pointer
)	O
,	O
prgr_name	pointer
,	O
ptr_char	pointer
)	O
;	O
else	O
sprintf	function
(	O
s1	pointer
,	O
_	O
(	O
"%s: option requires an argument -- %s"	pointer
)	O
,	O
prgr_name	pointer
,	O
ptr_char	pointer
)	O
;	O
break	O
;	O
case	O
5	int
:	O
sprintf	function
(	O
s1	pointer
,	O
_	O
(	O
"%s: option with invalid argument -- %s"	pointer
)	O
,	O
prgr_name	pointer
,	O
ptr_char	pointer
)	O
;	O
break	O
;	O
case	O
6	int
:	O
sprintf	function
(	O
s1	pointer
,	O
_	O
(	O
"%s: option with ambiguous argument -- %s"	pointer
)	O
,	O
prgr_name	pointer
,	O
ptr_char	pointer
)	O
;	O
break	O
;	O
default	O
:	O
my_error	function
(	O
opt_error	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
4L	int
,	O
""	pointer
,	O
0	int
)	O
;	O
}	O
fprintf	function
(	O
stderr	pointer
,	O
"%s\n%s\n%s\n"	pointer
,	O
s1	pointer
,	O
usage_msg	function
(	O
)	O
,	O
lopt_msg	function
(	O
)	O
)	O
;	O
my_exit	function
(	O
ERR_INVALID_OPTION	int
)	O
;	O
}	O
if	O
(	O
skip_option	int
)	O
{	O
while	O
(	O
*	O
option	pointer
)	O
option	pointer
++	O
;	O
option	pointer
--	O
;	O
}	O
}	O
argc	int
--	O
;	O
}	O
else	O
{	O
if	O
(	O
*	O
*	O
argv	array
==	O
RC_ADATE_CHAR	char
)	O
argc	int
--	O
;	O
else	O
if	O
(	O
*	O
*	O
argv	array
==	O
RSP_CHAR	char
)	O
argc	int
--	O
;	O
else	O
break	O
;	O
}	O
}	O
if	O
(	O
!	O
get_actual_date	function
(	O
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: invalid date given -- %c%s\n%s\n%s\n"	pointer
)	O
,	O
prgr_name	pointer
,	O
RC_ADATE_CHAR	char
,	O
rc_adate	pointer
,	O
usage_msg	function
(	O
)	O
,	O
lopt_msg	function
(	O
)	O
)	O
;	O
my_exit	function
(	O
ERR_INVALID_OPTION	int
)	O
;	O
}	O
is_leap_year	int
=	O
(	O
days_of_february	function
(	O
act_year	int
)	O
==	O
29	int
)	O
;	O
buf_start_day	int
=	O
start_day	int
;	O
if	O
(	O
start_day	int
==	O
SPECIAL_VALUE	O
)	O
start_day	int
=	O
weekday_of_date	function
(	O
act_day	int
,	O
act_month	int
,	O
act_year	int
)	O
;	O
else	O
if	O
(	O
!	O
start_day	int
)	O
{	O
start_day	int
=	O
(	O
nl_langinfo	function
(	O
_NL_TIME_FIRST_WEEKDAY	int
)	O
[	O
0	int
]	O
+	O
5	int
)	O
%	O
7	int
+	O
1	int
;	O
}	O
if	O
(	O
rel_time_offset	char
)	O
{	O
if	O
(	O
!	O
time_hour_offset	int
&&	O
!	O
time_min_offset	int
)	O
{	O
if	O
(	O
rel_time_offset	char
==	O
RC_GMTIME_CHAR	char
)	O
{	O
time_hour_offset	int
=	O
gmt_hour	int
;	O
time_min_offset	int
=	O
gmt_min	int
;	O
}	O
else	O
{	O
time_hour_offset	int
=	O
act_hour	int
;	O
time_min_offset	int
=	O
act_min	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
rel_time_offset	char
==	O
RC_GMTIME_CHAR	char
)	O
i	int
=	O
HHMM2MM	O
(	O
gmt_hour	int
,	O
gmt_min	int
)	O
+	O
HHMM2MM	O
(	O
time_hour_offset	int
,	O
time_min_offset	int
)	O
;	O
else	O
i	int
=	O
HHMM2MM	O
(	O
act_hour	int
,	O
act_min	int
)	O
+	O
HHMM2MM	O
(	O
time_hour_offset	int
,	O
time_min_offset	int
)	O
;	O
time_hour_offset	int
=	O
MM2HH	O
(	O
abs	function
(	O
i	int
)	O
)	O
;	O
time_min_offset	int
=	O
abs	function
(	O
i	int
)	O
%	O
MINS_PER_HOUR	int
;	O
if	O
(	O
i	int
<	O
0	int
)	O
{	O
time_hour_offset	int
=	O
-	O
time_hour_offset	int
;	O
time_min_offset	int
=	O
-	O
time_min_offset	int
;	O
}	O
}	O
}	O
time_offset	double
=	O
HHMM2DAY	O
(	O
time_hour_offset	int
,	O
time_min_offset	int
)	O
;	O
if	O
(	O
rel_loop_end	char
)	O
{	O
if	O
(	O
rel_loop_end	char
==	O
RC_GMTIME_CHAR	char
)	O
i	int
=	O
HHMM2MM	O
(	O
gmt_hour	int
,	O
gmt_min	int
)	O
;	O
else	O
i	int
=	O
HHMM2MM	O
(	O
act_hour	int
,	O
act_min	int
)	O
;	O
if	O
(	O
!	O
set_loop_end	int
&&	O
(	O
loop_end	int
==	O
SPECIAL_VALUE	O
)	O
)	O
loop_end	int
=	O
i	int
;	O
else	O
loop_end	int
=	O
i	int
+	O
loop_end	int
;	O
set_loop_end	int
=	O
TRUE	O
;	O
}	O
if	O
(	O
set_loop_end	int
)	O
{	O
if	O
(	O
loop_end	int
<	O
0	int
)	O
loop_end	int
=	O
0	int
;	O
else	O
if	O
(	O
loop_end	int
>=	O
MINS_PER_DAY	int
)	O
loop_end	int
=	O
MINS_PER_DAY	int
-	O
1	int
;	O
}	O
if	O
(	O
rc_period_flag	int
)	O
{	O
if	O
(	O
!	O
rc_use_flag	int
)	O
opt_error	int
=	O
2	int
;	O
else	O
{	O
register	O
int	O
act_is_leap_year	int
=	O
(	O
days_of_february	function
(	O
act_year	int
)	O
==	O
29	int
)	O
;	O
auto	O
int	O
wmax	int
=	O
WEEK_MAX	int
;	O
auto	O
char	O
dvar	char
=	O
'\0'	O
;	O
auto	O
Bool	int
nth_day_of_year_flag	int
=	O
FALSE	O
;	O
if	O
(	O
act_year	int
==	O
greg	pointer
->	O
year	int
)	O
wmax	int
=	O
(	O
(	O
DAY_LAST	int
+	O
(	O
days_of_february	function
(	O
greg	pointer
->	O
year	int
)	O
==	O
29	int
)	O
-	O
(	O
greg	pointer
->	O
last_day	int
-	O
greg	pointer
->	O
first_day	int
+	O
1	int
)	O
)	O
/	O
DAY_MAX	int
)	O
+	O
1	int
;	O
rc_clean_flags	function
(	O
)	O
;	O
i	int
=	O
0	int
;	O
rc_period	int
=	O
0	int
;	O
rc_period_flag	int
=	O
TRUE	O
;	O
option	pointer
=	O
rc_period_option	pointer
;	O
if	O
(	O
*	O
option	pointer
==	O
RC_HDY_CHAR	char
||	O
*	O
option	pointer
==	O
RC_NWD_CHAR	char
)	O
dvar	char
=	O
*	O
option	pointer
;	O
else	O
rc_period	int
=	O
atoi	function
(	O
option	pointer
)	O
;	O
if	O
(	O
!	O
dvar	char
)	O
{	O
rc_fwdf_buffer	int
=	O
rc_forwards_flag	int
=	O
(	O
Bool	int
)	O
(	O
strchr	function
(	O
option	pointer
,	O
*	O
ASC_LIT	pointer
)	O
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
rc_bwdf_buffer	int
=	O
rc_backwards_flag	int
=	O
(	O
Bool	int
)	O
(	O
strchr	function
(	O
option	pointer
,	O
*	O
DES_LIT	pointer
)	O
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
ptr_char	pointer
=	O
strrchr	function
(	O
option	pointer
,	O
'w'	O
)	O
;	O
if	O
(	O
ptr_char	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
ptr_char	pointer
=	O
strrchr	function
(	O
option	pointer
,	O
'W'	O
)	O
;	O
if	O
(	O
ptr_char	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
ptr_char	pointer
++	O
;	O
if	O
(	O
!	O
*	O
ptr_char	pointer
)	O
rc_week_year_flag	int
=	O
TRUE	O
;	O
}	O
ptr_char	pointer
=	O
strrchr	function
(	O
option	pointer
,	O
'd'	O
)	O
;	O
if	O
(	O
ptr_char	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
ptr_char	pointer
=	O
strrchr	function
(	O
option	pointer
,	O
'D'	O
)	O
;	O
if	O
(	O
ptr_char	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
ptr_char	pointer
++	O
;	O
if	O
(	O
!	O
*	O
ptr_char	pointer
)	O
nth_day_of_year_flag	int
=	O
TRUE	O
;	O
}	O
i	int
=	O
(	O
int	O
)	O
rc_forwards_flag	int
+	O
rc_backwards_flag	int
+	O
rc_week_year_flag	int
+	O
nth_day_of_year_flag	int
;	O
}	O
if	O
(	O
rc_period	int
==	O
999	int
)	O
rc_period	int
=	O
DAY_LAST	int
+	O
act_is_leap_year	int
;	O
if	O
(	O
!	O
dvar	char
&&	O
(	O
i	int
>	O
1	int
||	O
(	O
(	O
rc_period	int
>	O
DAY_LAST	int
+	O
act_is_leap_year	int
)	O
&&	O
(	O
rc_forwards_flag	int
||	O
rc_backwards_flag	int
||	O
nth_day_of_year_flag	int
)	O
)	O
||	O
(	O
rc_week_year_flag	int
&&	O
(	O
rc_period	int
>	O
wmax	int
+	O
1	int
)	O
&&	O
(	O
rc_period	int
!=	O
99	int
)	O
)	O
)	O
)	O
opt_error	int
=	O
5	int
;	O
else	O
{	O
if	O
(	O
!	O
rc_week_year_flag	int
&&	O
!	O
rc_forwards_flag	int
&&	O
!	O
rc_backwards_flag	int
)	O
{	O
auto	O
int	O
y	int
=	O
act_year	int
;	O
auto	O
int	O
n	long
;	O
auto	O
char	O
hc	char
;	O
auto	O
Bool	int
is_weekday_mode	pointer
;	O
if	O
(	O
!	O
nth_day_of_year_flag	int
)	O
{	O
len	int
=	O
(	O
int	O
)	O
strlen	function
(	O
option	pointer
)	O
+	O
len_year_max	int
;	O
if	O
(	O
(	O
Uint	int
)	O
len	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
len	int
+	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
sprintf	function
(	O
s2	pointer
,	O
"%0*d%s"	pointer
,	O
len_year_max	int
,	O
y	int
,	O
option	pointer
)	O
;	O
(	O
void	O
)	O
rc_get_date	function
(	O
s2	pointer
,	O
lineptrs	pointer
,	O
FALSE	O
,	O
&	O
is_weekday_mode	pointer
,	O
&	O
day	int
,	O
&	O
month	int
,	O
&	O
y	int
,	O
&	O
n	long
,	O
&	O
wmax	int
,	O
&	O
hc	char
,	O
&	O
i	int
,	O
&	O
i	int
,	O
_	O
(	O
"Internal"	pointer
)	O
,	O
-	O
1L	int
,	O
s2	pointer
,	O
FALSE	O
)	O
;	O
if	O
(	O
y	int
!=	O
SPECIAL_VALUE	O
)	O
{	O
if	O
(	O
!	O
dvar	char
)	O
{	O
if	O
(	O
!	O
month	int
)	O
month	int
=	O
act_month	int
;	O
if	O
(	O
month	int
<	O
MONTH_MIN	int
||	O
month	int
>	O
MONTH_MAX	int
)	O
opt_error	int
=	O
5	int
;	O
else	O
{	O
i	int
=	O
dvec	array
[	O
month	int
-	O
1	int
]	O
;	O
if	O
(	O
month	int
==	O
2	int
)	O
i	int
+=	O
act_is_leap_year	int
;	O
if	O
(	O
is_weekday_mode	pointer
)	O
{	O
if	O
(	O
n	long
==	O
9	int
)	O
day	int
=	O
eval_holiday	function
(	O
i	int
,	O
month	int
,	O
act_year	int
,	O
day	int
,	O
FALSE	O
)	O
;	O
else	O
{	O
day	int
=	O
eval_holiday	function
(	O
DAY_MIN	int
,	O
month	int
,	O
act_year	int
,	O
day	int
,	O
TRUE	O
)	O
;	O
day	int
+=	O
(	O
DAY_MAX	int
*	O
(	O
n	long
-	O
1	int
)	O
)	O
;	O
if	O
(	O
day	int
>	O
i	int
)	O
opt_error	int
=	O
5	int
;	O
else	O
{	O
if	O
(	O
!	O
day	int
||	O
!	O
valid_date	function
(	O
day	int
,	O
month	int
,	O
act_year	int
)	O
)	O
opt_error	int
=	O
5	int
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
day	int
==	O
99	int
)	O
day	int
=	O
i	int
;	O
if	O
(	O
!	O
day	int
)	O
day	int
=	O
act_day	int
;	O
if	O
(	O
day	int
<	O
DAY_MIN	int
||	O
day	int
>	O
i	int
)	O
opt_error	int
=	O
5	int
;	O
}	O
}	O
}	O
else	O
if	O
(	O
!	O
day	int
||	O
!	O
month	int
)	O
opt_error	int
=	O
5	int
;	O
if	O
(	O
!	O
opt_error	int
)	O
rc_period	int
=	O
day_of_year	function
(	O
day	int
,	O
month	int
,	O
act_year	int
)	O
;	O
}	O
else	O
opt_error	int
=	O
5	int
;	O
}	O
else	O
if	O
(	O
!	O
rc_period	int
)	O
opt_error	int
=	O
5	int
;	O
if	O
(	O
!	O
opt_error	int
)	O
{	O
i	int
=	O
day_of_year	function
(	O
act_day	int
,	O
act_month	int
,	O
act_year	int
)	O
;	O
if	O
(	O
rc_period	int
>=	O
i	int
)	O
{	O
rc_period	int
-=	O
i	int
;	O
if	O
(	O
!	O
rc_period	int
)	O
rc_period_flag	int
=	O
FALSE	O
;	O
else	O
rc_forwards_flag	int
=	O
TRUE	O
;	O
}	O
else	O
{	O
rc_period	int
=	O
i	int
-	O
rc_period	int
;	O
rc_backwards_flag	int
=	O
TRUE	O
;	O
}	O
}	O
}	O
else	O
{	O
i	int
=	O
0	int
;	O
while	O
(	O
isdigit	function
(	O
*	O
option	pointer
)	O
)	O
{	O
i	int
++	O
;	O
option	pointer
++	O
;	O
}	O
option	pointer
--	O
;	O
if	O
(	O
!	O
rc_period	int
&&	O
!	O
rc_week_year_flag	int
)	O
opt_error	int
=	O
5	int
;	O
else	O
opt_error	int
=	O
further_check	function
(	O
&	O
option	pointer
)	O
;	O
}	O
}	O
}	O
if	O
(	O
opt_error	int
)	O
{	O
ptr_char	pointer
=	O
rc_period_argv	pointer
;	O
is_longopt	int
=	O
rc_period_is_longopt	int
;	O
goto	O
LABEL_option_error	O
;	O
}	O
else	O
{	O
free	function
(	O
rc_period_argv	pointer
)	O
;	O
free	function
(	O
rc_period_option	pointer
)	O
;	O
}	O
}	O
if	O
(	O
help_flag	int
||	O
license_flag	int
||	O
version_flag	int
)	O
{	O
if	O
(	O
is_tty1	int
&&	O
(	O
ext_pager	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
&&	O
is_tty2	int
)	O
{	O
setbuf	function
(	O
stdout	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
setbuf	function
(	O
stdin	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
get_tty_scr_size	function
(	O
&	O
tty_rows	int
,	O
&	O
tty_cols	int
)	O
;	O
}	O
else	O
if	O
(	O
help_on_help_flag	int
)	O
get_tty_scr_size	function
(	O
&	O
tty_rows	int
,	O
&	O
tty_cols	int
)	O
;	O
get_tty_hls	function
(	O
hl_seq	pointer
)	O
;	O
if	O
(	O
is_tty1	int
&&	O
is_tty2	int
&&	O
pager_flag	int
&&	O
(	O
ext_pager	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
&&	O
(	O
email_adr	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
)	O
{	O
child_pid	int
=	O
fork	function
(	O
)	O
;	O
switch	O
(	O
child_pid	int
)	O
{	O
case	O
-	O
1	int
:	O
my_error	function
(	O
ERR_INTERNAL_C_FUNC_FAILURE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
7L	int
,	O
"fork() child_pid="	pointer
,	O
child_pid	int
)	O
;	O
case	O
0	int
:	O
close	function
(	O
pipe_fd	array
[	O
1	int
]	O
)	O
;	O
if	O
(	O
pipe_fd	array
[	O
0	int
]	O
)	O
{	O
close	function
(	O
0	int
)	O
;	O
dup	function
(	O
pipe_fd	array
[	O
0	int
]	O
)	O
;	O
close	function
(	O
pipe_fd	array
[	O
0	int
]	O
)	O
;	O
}	O
if	O
(	O
pg_argv	pointer
==	O
(	O
char	O
*	O
*	O
)	O
NULL	O
)	O
{	O
i	int
=	O
execlp	function
(	O
ext_pager	pointer
,	O
ext_pager	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
len	int
=	O
(	O
int	O
)	O
strlen	function
(	O
ext_pager	pointer
)	O
+	O
LEN_SINGLE_LINE	int
;	O
if	O
(	O
(	O
Uint	int
)	O
len	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
len	int
+	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
sprintf	function
(	O
s1	pointer
,	O
"execlp(%s)="	pointer
,	O
ext_pager	pointer
)	O
;	O
my_error	function
(	O
ERR_INTERNAL_C_FUNC_FAILURE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
9L	int
,	O
s1	pointer
,	O
i	int
)	O
;	O
}	O
else	O
{	O
i	int
=	O
execvp	function
(	O
ext_pager	pointer
,	O
pg_argv	pointer
)	O
;	O
len	int
=	O
(	O
int	O
)	O
strlen	function
(	O
ext_pager	pointer
)	O
+	O
LEN_SINGLE_LINE	int
;	O
if	O
(	O
(	O
Uint	int
)	O
len	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
len	int
+	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
sprintf	function
(	O
s1	pointer
,	O
"execvp(%s)="	pointer
,	O
ext_pager	pointer
)	O
;	O
my_error	function
(	O
ERR_INTERNAL_C_FUNC_FAILURE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
9L	int
,	O
s1	pointer
,	O
i	int
)	O
;	O
}	O
default	O
:	O
close	function
(	O
pipe_fd	array
[	O
0	int
]	O
)	O
;	O
if	O
(	O
pipe_fd	array
[	O
1	int
]	O
!=	O
1	int
)	O
{	O
close	function
(	O
1	int
)	O
;	O
if	O
(	O
!	O
dup	function
(	O
pipe_fd	array
[	O
1	int
]	O
)	O
)	O
{	O
dup	function
(	O
pipe_fd	array
[	O
1	int
]	O
)	O
;	O
close	function
(	O
0	int
)	O
;	O
}	O
close	function
(	O
pipe_fd	array
[	O
1	int
]	O
)	O
;	O
}	O
}	O
}	O
if	O
(	O
help_flag	int
)	O
{	O
if	O
(	O
help_on_help_flag	int
)	O
my_help_on_help	function
(	O
stdout	pointer
,	O
s3	pointer
,	O
lopt_ambig	int
,	O
tty_cols	int
)	O
;	O
else	O
if	O
(	O
ext_help_flag	int
)	O
my_extended_help	function
(	O
stdout	pointer
,	O
lopt_help	int
)	O
;	O
else	O
my_basic_help	function
(	O
stdout	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
license_flag	int
)	O
my_license	function
(	O
stdout	pointer
)	O
;	O
else	O
if	O
(	O
version_flag	int
)	O
my_version	function
(	O
stdout	pointer
)	O
;	O
}	O
if	O
(	O
is_tty1	int
&&	O
is_tty2	int
&&	O
pager_flag	int
&&	O
(	O
ext_pager	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
&&	O
(	O
email_adr	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
)	O
{	O
fflush	function
(	O
stdout	pointer
)	O
;	O
close	function
(	O
0	int
)	O
;	O
dup	function
(	O
sys_fd	array
[	O
0	int
]	O
)	O
;	O
close	function
(	O
1	int
)	O
;	O
dup	function
(	O
sys_fd	array
[	O
1	int
]	O
)	O
;	O
while	O
(	O
wait	function
(	O
(	O
int	O
*	O
)	O
NULL	O
)	O
!=	O
child_pid	int
)	O
;	O
(	O
void	O
)	O
signal	function
(	O
SIGPIPE	int
,	O
SIG_DFL	O
)	O
;	O
}	O
my_exit	function
(	O
exit_stat_help	int
)	O
;	O
}	O
month	int
=	O
0	int
;	O
if	O
(	O
argc	int
>	O
1	int
)	O
{	O
auto	O
Bool	int
is_list	int
=	O
FALSE	O
;	O
auto	O
Bool	int
is_range	int
=	O
FALSE	O
;	O
auto	O
Bool	int
month_set	int
=	O
FALSE	O
;	O
auto	O
Bool	int
year_sep_found	int
=	O
FALSE	O
;	O
for	O
(	O
;	O
argc	int
>	O
1	int
;	O
argc	int
--	O
,	O
argv	array
++	O
)	O
{	O
if	O
(	O
!	O
month	int
)	O
{	O
option	pointer
=	O
*	O
argv	array
;	O
if	O
(	O
*	O
option	pointer
==	O
*	O
MONTH3_LIT	pointer
)	O
break	O
;	O
else	O
while	O
(	O
*	O
option	pointer
)	O
{	O
if	O
(	O
*	O
option	pointer
==	O
*	O
MLIST_SEP	pointer
||	O
*	O
option	pointer
==	O
*	O
YLIST_SEP	pointer
)	O
is_list	int
=	O
TRUE	O
;	O
else	O
if	O
(	O
*	O
option	pointer
==	O
*	O
MRANGE_SEP	pointer
||	O
*	O
option	pointer
==	O
*	O
YRANGE_SEP	pointer
)	O
is_range	int
=	O
TRUE	O
;	O
else	O
if	O
(	O
*	O
option	pointer
==	O
*	O
YEAR_SEP	pointer
)	O
year_sep_found	int
=	O
TRUE	O
;	O
else	O
if	O
(	O
*	O
option	pointer
==	O
*	O
FYEAR_SEP	pointer
)	O
is_fiscal_year	int
=	O
TRUE	O
;	O
option	pointer
++	O
;	O
}	O
option	pointer
=	O
*	O
argv	array
;	O
if	O
(	O
!	O
is_list	int
&&	O
!	O
is_range	int
&&	O
!	O
year_sep_found	int
&&	O
!	O
is_fiscal_year	int
&&	O
!	O
my_atoi	function
(	O
option	pointer
)	O
)	O
{	O
month	int
=	O
compare_d_m_name	function
(	O
option	pointer
,	O
MOnth	int
)	O
;	O
if	O
(	O
month	int
)	O
{	O
month_set	int
=	O
TRUE	O
;	O
continue	O
;	O
}	O
}	O
}	O
if	O
(	O
!	O
month	int
)	O
{	O
build_month_list	function
(	O
argv	array
)	O
;	O
if	O
(	O
!	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_month	int
)	O
month	int
=	O
atoi	function
(	O
*	O
argv	array
)	O
;	O
else	O
month	int
=	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_month	int
;	O
if	O
(	O
month	int
<	O
MONTH_MIN	int
||	O
month	int
>	O
MONTH_MAX	int
)	O
{	O
if	O
(	O
!	O
is_fiscal_year	int
)	O
year	int
=	O
month	int
;	O
month	int
=	O
0	int
;	O
break	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
year	int
)	O
{	O
if	O
(	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_year	int
&&	O
(	O
is_list	int
||	O
is_range	int
)	O
)	O
year	int
=	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_year	int
;	O
else	O
year	int
=	O
my_atoi	function
(	O
*	O
argv	array
)	O
;	O
if	O
(	O
month	int
&&	O
isdigit	function
(	O
*	O
*	O
argv	array
)	O
&&	O
(	O
strchr	function
(	O
*	O
argv	array
,	O
*	O
MRANGE_SEP	pointer
)	O
!=	O
(	O
char	O
*	O
)	O
NULL	O
||	O
strchr	function
(	O
*	O
argv	array
,	O
*	O
YRANGE_SEP	pointer
)	O
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
)	O
{	O
i	int
=	O
0	int
;	O
while	O
(	O
isdigit	function
(	O
*	O
(	O
*	O
(	O
argv	array
)	O
+	O
i	int
)	O
)	O
)	O
{	O
s2	pointer
[	O
i	int
]	O
=	O
*	O
(	O
*	O
(	O
argv	array
)	O
+	O
i	int
)	O
;	O
i	int
++	O
;	O
}	O
if	O
(	O
*	O
(	O
*	O
(	O
argv	array
)	O
+	O
i	int
)	O
==	O
*	O
MRANGE_SEP	pointer
||	O
*	O
(	O
*	O
(	O
argv	array
)	O
+	O
i	int
)	O
==	O
*	O
YRANGE_SEP	pointer
)	O
{	O
s2	pointer
[	O
i	int
++	O
]	O
=	O
'\0'	O
;	O
year	int
=	O
my_atoi	function
(	O
s2	pointer
)	O
;	O
if	O
(	O
!	O
year	int
)	O
year	int
=	O
act_year	int
;	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_year	int
=	O
year	int
;	O
year	int
=	O
my_atoi	function
(	O
*	O
(	O
argv	array
)	O
+	O
i	int
)	O
;	O
if	O
(	O
!	O
year	int
)	O
year	int
=	O
act_year	int
;	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_year	int
=	O
year	int
;	O
if	O
(	O
*	O
(	O
*	O
(	O
argv	array
)	O
+	O
i	int
-	O
1	int
)	O
==	O
*	O
MRANGE_SEP	pointer
)	O
{	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_month	int
=	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_month	int
=	O
month	int
;	O
is_special_range	int
=	O
TRUE	O
;	O
}	O
else	O
{	O
i	int
=	O
0	int
;	O
while	O
(	O
month_list	pointer
[	O
i	int
]	O
.	O
ml_month	int
)	O
i	int
++	O
;	O
if	O
(	O
!	O
i	int
)	O
{	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_month	int
=	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_month	int
=	O
month	int
;	O
is_special_range	int
=	O
TRUE	O
;	O
}	O
else	O
{	O
i	int
--	O
;	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_month	int
=	O
month_list	pointer
[	O
i	int
]	O
.	O
ml_month	int
;	O
is_multi_range	int
=	O
TRUE	O
;	O
}	O
}	O
}	O
else	O
{	O
year	int
=	O
month	int
;	O
month	int
=	O
0	int
;	O
}	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
*	O
option	pointer
==	O
*	O
MONTH3_LIT	pointer
)	O
{	O
len	int
=	O
(	O
int	O
)	O
strlen	function
(	O
option	pointer
)	O
;	O
if	O
(	O
len	int
<=	O
2	int
)	O
{	O
if	O
(	O
*	O
(	O
option	pointer
+	O
1	int
)	O
==	O
*	O
MONTH3_LIT	pointer
)	O
is_3month_mode2	int
=	O
TRUE	O
;	O
else	O
is_3month_mode	int
=	O
TRUE	O
;	O
is_fiscal_year	int
=	O
TRUE	O
;	O
year_flag	int
=	O
FALSE	O
;	O
month	int
=	O
act_month	int
;	O
if	O
(	O
argc	int
>	O
2	int
)	O
{	O
argv	array
++	O
;	O
year	int
=	O
atoi	function
(	O
*	O
argv	array
)	O
;	O
if	O
(	O
!	O
year	int
)	O
year	int
=	O
act_year	int
;	O
}	O
else	O
year	int
=	O
act_year	int
;	O
if	O
(	O
is_3month_mode	int
)	O
{	O
if	O
(	O
!	O
*	O
(	O
option	pointer
+	O
1	int
)	O
)	O
{	O
month	int
--	O
;	O
if	O
(	O
!	O
month	int
)	O
{	O
month	int
=	O
MONTH_MAX	int
;	O
year	int
--	O
;	O
}	O
}	O
else	O
if	O
(	O
*	O
(	O
option	pointer
+	O
1	int
)	O
==	O
*	O
DES_LIT	pointer
)	O
{	O
month	int
-=	O
2	int
;	O
if	O
(	O
month	int
<	O
MONTH_MIN	int
)	O
{	O
month	int
=	O
MONTH_MAX	int
+	O
month	int
;	O
year	int
--	O
;	O
}	O
}	O
else	O
if	O
(	O
*	O
(	O
option	pointer
+	O
1	int
)	O
==	O
*	O
ASC_LIT	pointer
)	O
;	O
else	O
{	O
is_fiscal_year	int
=	O
FALSE	O
;	O
year	int
=	O
act_year	int
;	O
month	int
=	O
act_month	int
;	O
}	O
if	O
(	O
year	int
<	O
YEAR_MIN	int
)	O
{	O
year	int
=	O
YEAR_MIN	int
;	O
month	int
=	O
act_month	int
;	O
}	O
}	O
else	O
month	int
=	O
(	O
(	O
month	int
+	O
1	int
)	O
-	O
(	O
(	O
month	int
-	O
1	int
)	O
%	O
3	int
)	O
)	O
-	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
!	O
month	int
&&	O
!	O
year	int
&&	O
!	O
month_set	int
&&	O
!	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_month	int
&&	O
!	O
is_fiscal_year	int
)	O
{	O
year	int
=	O
month	int
;	O
month	int
=	O
0	int
;	O
}	O
}	O
}	O
static	O
void	O
build_month_list	function
(	O
argv	array
)	O
char	O
*	O
argv	array
[	O
]	O
;	O
{	O
register	O
int	O
i	int
;	O
register	O
int	O
j	int
;	O
register	O
int	O
k	int
;	O
auto	O
const	O
char	O
*	O
option	pointer
;	O
auto	O
Bool	int
is_list	int
=	O
FALSE	O
;	O
auto	O
Bool	int
is_range	int
=	O
FALSE	O
;	O
auto	O
Bool	int
year_sep_found	int
=	O
FALSE	O
;	O
auto	O
Bool	int
buf_is_ext_year	int
;	O
option	pointer
=	O
*	O
argv	array
;	O
for	O
(	O
;	O
*	O
option	pointer
&&	O
!	O
is_list	int
&&	O
!	O
is_range	int
;	O
option	pointer
++	O
)	O
if	O
(	O
*	O
option	pointer
==	O
*	O
MLIST_SEP	pointer
||	O
*	O
option	pointer
==	O
*	O
YLIST_SEP	pointer
)	O
{	O
is_list	int
=	O
TRUE	O
;	O
if	O
(	O
*	O
option	pointer
==	O
*	O
YLIST_SEP	pointer
)	O
is_ext_list	int
=	O
is_ext_year	int
=	O
TRUE	O
;	O
}	O
else	O
if	O
(	O
*	O
option	pointer
==	O
*	O
MRANGE_SEP	pointer
||	O
*	O
option	pointer
==	O
*	O
YRANGE_SEP	pointer
)	O
{	O
is_range	int
=	O
TRUE	O
;	O
if	O
(	O
*	O
option	pointer
==	O
*	O
YRANGE_SEP	pointer
)	O
is_ext_range	int
=	O
is_ext_year	int
=	O
TRUE	O
;	O
}	O
else	O
if	O
(	O
*	O
option	pointer
==	O
*	O
YEAR_SEP	pointer
)	O
year_sep_found	int
=	O
TRUE	O
;	O
buf_is_ext_year	int
=	O
is_ext_year	int
;	O
if	O
(	O
year_sep_found	int
||	O
(	O
is_fiscal_year	int
&&	O
(	O
is_ext_list	int
||	O
is_ext_year	int
||	O
(	O
!	O
is_list	int
&&	O
!	O
is_range	int
)	O
)	O
)	O
||	O
(	O
!	O
is_fiscal_year	int
&&	O
(	O
is_list	int
||	O
is_range	int
)	O
)	O
)	O
{	O
i	int
=	O
0	int
;	O
option	pointer
=	O
*	O
argv	array
;	O
while	O
(	O
*	O
option	pointer
)	O
{	O
year_sep_found	int
=	O
FALSE	O
;	O
j	int
=	O
0	int
;	O
while	O
(	O
*	O
option	pointer
&&	O
!	O
year_sep_found	int
&&	O
(	O
(	O
!	O
is_list	int
&&	O
!	O
is_range	int
)	O
||	O
(	O
(	O
is_list	int
&&	O
(	O
(	O
*	O
option	pointer
!=	O
*	O
MLIST_SEP	pointer
)	O
&&	O
(	O
*	O
option	pointer
!=	O
*	O
YLIST_SEP	pointer
)	O
)	O
)	O
||	O
(	O
is_range	int
&&	O
(	O
(	O
*	O
option	pointer
!=	O
*	O
MRANGE_SEP	pointer
)	O
&&	O
(	O
*	O
option	pointer
!=	O
*	O
YRANGE_SEP	pointer
)	O
)	O
)	O
)	O
)	O
)	O
{	O
year_sep_found	int
=	O
(	O
Bool	int
)	O
(	O
*	O
option	pointer
==	O
*	O
YEAR_SEP	pointer
||	O
*	O
option	pointer
==	O
*	O
FYEAR_SEP	pointer
)	O
;	O
s1	pointer
[	O
j	int
++	O
]	O
=	O
*	O
option	pointer
++	O
;	O
}	O
if	O
(	O
year_sep_found	int
)	O
s1	pointer
[	O
j	int
-	O
1	int
]	O
=	O
'\0'	O
;	O
else	O
s1	pointer
[	O
j	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
*	O
s1	pointer
)	O
{	O
if	O
(	O
is_fiscal_year	int
)	O
{	O
j	int
=	O
atoi	function
(	O
option	pointer
)	O
;	O
if	O
(	O
j	int
)	O
{	O
is_ext_year	int
=	O
FALSE	O
;	O
month_list	pointer
[	O
i	int
++	O
]	O
.	O
ml_month	int
=	O
act_month	int
;	O
}	O
}	O
else	O
{	O
j	int
=	O
0	int
;	O
while	O
(	O
*	O
option	pointer
)	O
option	pointer
++	O
;	O
}	O
}	O
else	O
j	int
=	O
my_atoi	function
(	O
s1	pointer
)	O
;	O
if	O
(	O
is_ext_year	int
)	O
{	O
if	O
(	O
is_fiscal_year	int
)	O
{	O
if	O
(	O
(	O
j	int
>=	O
MONTH_MIN	int
)	O
&&	O
(	O
j	int
<=	O
MONTH_MAX	int
)	O
)	O
month_list	pointer
[	O
i	int
++	O
]	O
.	O
ml_month	int
=	O
j	int
;	O
else	O
{	O
j	int
=	O
compare_d_m_name	function
(	O
s1	pointer
,	O
MOnth	int
)	O
;	O
if	O
(	O
j	int
)	O
month_list	pointer
[	O
i	int
++	O
]	O
.	O
ml_month	int
=	O
j	int
;	O
else	O
if	O
(	O
!	O
*	O
option	pointer
)	O
{	O
if	O
(	O
is_ext_list	int
||	O
is_ext_range	int
)	O
{	O
if	O
(	O
!	O
is_ext_list	int
)	O
month_list	pointer
[	O
i	int
]	O
.	O
ml_month	int
=	O
month_list	pointer
[	O
i	int
-	O
1	int
]	O
.	O
ml_month	int
;	O
else	O
month_list	pointer
[	O
i	int
]	O
.	O
ml_month	int
=	O
MONTH_MIN	int
;	O
j	int
=	O
my_atoi	function
(	O
s1	pointer
)	O
;	O
if	O
(	O
j	int
)	O
month_list	pointer
[	O
i	int
++	O
]	O
.	O
ml_year	int
=	O
j	int
;	O
else	O
month_list	pointer
[	O
i	int
]	O
.	O
ml_month	int
=	O
0	int
;	O
}	O
}	O
else	O
if	O
(	O
!	O
year_sep_found	int
)	O
{	O
j	int
=	O
my_atoi	function
(	O
s1	pointer
)	O
;	O
if	O
(	O
j	int
)	O
month_list	pointer
[	O
i	int
++	O
]	O
.	O
ml_month	int
=	O
j	int
;	O
}	O
else	O
year_sep_found	int
=	O
FALSE	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
year_sep_found	int
)	O
{	O
j	int
=	O
0	int
;	O
while	O
(	O
*	O
option	pointer
&&	O
(	O
(	O
is_list	int
&&	O
(	O
*	O
option	pointer
!=	O
*	O
YLIST_SEP	pointer
)	O
)	O
||	O
(	O
is_range	int
&&	O
(	O
*	O
option	pointer
!=	O
*	O
YRANGE_SEP	pointer
)	O
)	O
)	O
)	O
s1	pointer
[	O
j	int
++	O
]	O
=	O
*	O
option	pointer
++	O
;	O
s1	pointer
[	O
j	int
]	O
=	O
'\0'	O
;	O
j	int
=	O
my_atoi	function
(	O
s1	pointer
)	O
;	O
}	O
if	O
(	O
j	int
)	O
month_list	pointer
[	O
i	int
++	O
]	O
.	O
ml_month	int
=	O
j	int
;	O
else	O
if	O
(	O
is_list	int
)	O
month_list	pointer
[	O
i	int
++	O
]	O
.	O
ml_month	int
=	O
act_year	int
;	O
}	O
if	O
(	O
year_sep_found	int
)	O
{	O
while	O
(	O
*	O
option	pointer
==	O
*	O
YEAR_SEP	pointer
||	O
*	O
option	pointer
==	O
*	O
FYEAR_SEP	pointer
)	O
option	pointer
++	O
;	O
if	O
(	O
!	O
is_fiscal_year	int
)	O
{	O
year_sep_found	int
=	O
FALSE	O
;	O
while	O
(	O
*	O
option	pointer
&&	O
(	O
(	O
is_list	int
&&	O
(	O
*	O
option	pointer
!=	O
*	O
YLIST_SEP	pointer
)	O
)	O
||	O
(	O
is_range	int
&&	O
(	O
*	O
option	pointer
!=	O
*	O
YRANGE_SEP	pointer
)	O
)	O
)	O
)	O
option	pointer
++	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
*	O
s1	pointer
)	O
{	O
if	O
(	O
(	O
j	int
>=	O
MONTH_MIN	int
)	O
&&	O
(	O
j	int
<=	O
MONTH_MAX	int
)	O
)	O
month_list	pointer
[	O
i	int
++	O
]	O
.	O
ml_month	int
=	O
j	int
;	O
else	O
{	O
j	int
=	O
compare_d_m_name	function
(	O
s1	pointer
,	O
MOnth	int
)	O
;	O
if	O
(	O
j	int
)	O
month_list	pointer
[	O
i	int
++	O
]	O
.	O
ml_month	int
=	O
j	int
;	O
}	O
if	O
(	O
i	int
&&	O
is_range	int
&&	O
!	O
year_sep_found	int
&&	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_year	int
&&	O
!	O
*	O
option	pointer
)	O
{	O
if	O
(	O
j	int
)	O
i	int
--	O
;	O
else	O
j	int
=	O
my_atoi	function
(	O
s1	pointer
)	O
;	O
if	O
(	O
j	int
)	O
{	O
month_list	pointer
[	O
i	int
]	O
.	O
ml_month	int
=	O
month_list	pointer
[	O
i	int
-	O
1	int
]	O
.	O
ml_month	int
;	O
month_list	pointer
[	O
i	int
++	O
]	O
.	O
ml_year	int
=	O
j	int
;	O
is_ext_range	int
=	O
FALSE	O
;	O
is_special_range	int
=	O
TRUE	O
;	O
}	O
}	O
}	O
if	O
(	O
year_sep_found	int
)	O
{	O
if	O
(	O
j	int
)	O
{	O
j	int
=	O
0	int
;	O
while	O
(	O
*	O
option	pointer
==	O
*	O
YEAR_SEP	pointer
||	O
*	O
option	pointer
==	O
*	O
FYEAR_SEP	pointer
)	O
option	pointer
++	O
;	O
if	O
(	O
!	O
is_list	int
&&	O
!	O
is_range	int
)	O
while	O
(	O
*	O
option	pointer
)	O
s1	pointer
[	O
j	int
++	O
]	O
=	O
*	O
option	pointer
++	O
;	O
else	O
if	O
(	O
is_fiscal_year	int
&&	O
(	O
is_ext_list	int
||	O
is_ext_range	int
)	O
)	O
while	O
(	O
*	O
option	pointer
&&	O
(	O
(	O
is_list	int
&&	O
(	O
*	O
option	pointer
!=	O
*	O
YLIST_SEP	pointer
)	O
)	O
||	O
(	O
is_range	int
&&	O
(	O
*	O
option	pointer
!=	O
*	O
YRANGE_SEP	pointer
)	O
)	O
)	O
)	O
s1	pointer
[	O
j	int
++	O
]	O
=	O
*	O
option	pointer
++	O
;	O
else	O
while	O
(	O
*	O
option	pointer
&&	O
(	O
(	O
is_list	int
&&	O
(	O
*	O
option	pointer
!=	O
*	O
MLIST_SEP	pointer
)	O
)	O
||	O
(	O
is_range	int
&&	O
(	O
*	O
option	pointer
!=	O
*	O
MRANGE_SEP	pointer
)	O
)	O
)	O
)	O
s1	pointer
[	O
j	int
++	O
]	O
=	O
*	O
option	pointer
++	O
;	O
s1	pointer
[	O
j	int
]	O
=	O
'\0'	O
;	O
j	int
=	O
my_atoi	function
(	O
s1	pointer
)	O
;	O
if	O
(	O
j	int
)	O
{	O
month_list	pointer
[	O
i	int
-	O
1	int
]	O
.	O
ml_year	int
=	O
j	int
;	O
if	O
(	O
is_list	int
&&	O
!	O
is_ext_range	int
)	O
is_ext_list	int
=	O
TRUE	O
;	O
else	O
if	O
(	O
is_range	int
&&	O
!	O
is_ext_list	int
)	O
is_ext_range	int
=	O
TRUE	O
;	O
}	O
else	O
if	O
(	O
is_fiscal_year	int
)	O
month_list	pointer
[	O
i	int
-	O
1	int
]	O
.	O
ml_year	int
=	O
act_year	int
;	O
}	O
else	O
{	O
if	O
(	O
is_fiscal_year	int
)	O
while	O
(	O
*	O
option	pointer
&&	O
(	O
(	O
is_list	int
&&	O
(	O
*	O
option	pointer
!=	O
*	O
YLIST_SEP	pointer
)	O
)	O
||	O
(	O
is_range	int
&&	O
(	O
*	O
option	pointer
!=	O
*	O
YRANGE_SEP	pointer
)	O
)	O
)	O
)	O
option	pointer
++	O
;	O
else	O
while	O
(	O
*	O
option	pointer
&&	O
(	O
(	O
is_list	int
&&	O
(	O
*	O
option	pointer
!=	O
*	O
MLIST_SEP	pointer
)	O
)	O
||	O
(	O
is_range	int
&&	O
(	O
*	O
option	pointer
!=	O
*	O
MRANGE_SEP	pointer
)	O
)	O
)	O
)	O
option	pointer
++	O
;	O
}	O
}	O
while	O
(	O
*	O
option	pointer
==	O
*	O
MLIST_SEP	pointer
||	O
*	O
option	pointer
==	O
*	O
MRANGE_SEP	pointer
||	O
*	O
option	pointer
==	O
*	O
YLIST_SEP	pointer
||	O
*	O
option	pointer
==	O
*	O
YRANGE_SEP	pointer
)	O
option	pointer
++	O
;	O
if	O
(	O
i	int
&&	O
is_fiscal_year	int
&&	O
!	O
month_list	pointer
[	O
i	int
-	O
1	int
]	O
.	O
ml_year	int
)	O
{	O
month_list	pointer
[	O
i	int
-	O
1	int
]	O
.	O
ml_year	int
=	O
month_list	pointer
[	O
i	int
-	O
1	int
]	O
.	O
ml_month	int
;	O
month_list	pointer
[	O
i	int
-	O
1	int
]	O
.	O
ml_month	int
=	O
MONTH_MIN	int
;	O
}	O
is_ext_year	int
=	O
buf_is_ext_year	int
;	O
if	O
(	O
(	O
Uint	int
)	O
i	int
>=	O
month_list_max	int
)	O
{	O
month_list_max	int
<<=	O
1	int
;	O
if	O
(	O
month_list_max	int
*	O
sizeof	O
(	O
Ml_struct	struct
)	O
>	O
testval	int
)	O
month_list_max	int
--	O
;	O
month_list	pointer
=	O
(	O
Ml_struct	struct
*	O
)	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
month_list	pointer
,	O
month_list_max	int
*	O
sizeof	O
(	O
Ml_struct	struct
)	O
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
3L	int
,	O
"month_list[month_list_max]"	pointer
,	O
month_list_max	int
)	O
;	O
for	O
(	O
k	int
=	O
i	int
;	O
k	int
<	O
(	O
int	O
)	O
month_list_max	int
;	O
k	int
++	O
)	O
month_list	pointer
[	O
k	int
]	O
.	O
ml_year	int
=	O
month_list	pointer
[	O
k	int
]	O
.	O
ml_month	int
=	O
0	int
;	O
}	O
}	O
if	O
(	O
is_range	int
&&	O
!	O
is_ext_range	int
&&	O
!	O
is_special_range	int
)	O
{	O
if	O
(	O
is_fiscal_year	int
)	O
is_ext_year	int
=	O
TRUE	O
;	O
else	O
{	O
j	int
=	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_month	int
;	O
k	int
=	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_month	int
;	O
i	int
=	O
0	int
;	O
while	O
(	O
month_list	pointer
[	O
i	int
]	O
.	O
ml_month	int
)	O
month_list	pointer
[	O
i	int
++	O
]	O
.	O
ml_month	int
=	O
0	int
;	O
if	O
(	O
!	O
j	int
&&	O
!	O
k	int
)	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_month	int
=	O
act_month	int
;	O
else	O
{	O
if	O
(	O
!	O
j	int
)	O
j	int
=	O
MONTH_MIN	int
;	O
if	O
(	O
!	O
k	int
)	O
k	int
=	O
MONTH_MAX	int
;	O
i	int
=	O
0	int
;	O
if	O
(	O
j	int
>	O
k	int
)	O
for	O
(	O
;	O
j	int
>=	O
k	int
;	O
i	int
++	O
,	O
j	int
--	O
)	O
month_list	pointer
[	O
i	int
]	O
.	O
ml_month	int
=	O
j	int
;	O
else	O
for	O
(	O
;	O
j	int
<=	O
k	int
;	O
i	int
++	O
,	O
j	int
++	O
)	O
month_list	pointer
[	O
i	int
]	O
.	O
ml_month	int
=	O
j	int
;	O
}	O
}	O
}	O
if	O
(	O
is_ext_range	int
&&	O
month_list	pointer
[	O
2	int
]	O
.	O
ml_month	int
)	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_month	int
=	O
0	int
;	O
if	O
(	O
!	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_month	int
&&	O
(	O
is_ext_list	int
||	O
is_ext_range	int
||	O
is_special_range	int
||	O
is_ext_year	int
)	O
)	O
{	O
is_ext_list	int
=	O
is_ext_range	int
=	O
is_special_range	int
=	O
is_ext_year	int
=	O
FALSE	O
;	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_month	int
=	O
act_month	int
;	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_year	int
=	O
act_year	int
;	O
}	O
}	O
}	O
static	O
void	O
eliminate_invalid_data	function
(	O
)	O
{	O
register	O
int	O
i	int
;	O
register	O
int	O
len	int
;	O
if	O
(	O
!	O
month	int
&&	O
!	O
year	int
)	O
{	O
month	int
=	O
act_month	int
;	O
year	int
=	O
act_year	int
;	O
}	O
else	O
if	O
(	O
year	int
<	O
YEAR_MIN	int
||	O
year	int
>	O
YEAR_MAX	int
)	O
{	O
if	O
(	O
month	int
&&	O
year	int
)	O
month	int
=	O
act_month	int
;	O
year	int
=	O
act_year	int
;	O
}	O
if	O
(	O
year_flag	int
&&	O
month	int
)	O
month	int
=	O
0	int
;	O
if	O
(	O
month	int
&&	O
!	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_month	int
)	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_month	int
=	O
month	int
;	O
if	O
(	O
year	int
&&	O
!	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_year	int
)	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_year	int
=	O
year	int
;	O
if	O
(	O
is_3month_mode	int
||	O
is_3month_mode2	int
)	O
{	O
if	O
(	O
special_calsheet_flag	int
)	O
{	O
if	O
(	O
cal_special_flag	int
)	O
{	O
out_rows	int
=	O
JI3_OUT_ROWS	O
;	O
out_cols	int
=	O
JI3_OUT_COLS	O
;	O
}	O
else	O
if	O
(	O
cal_both_dates_flag	int
)	O
{	O
out_rows	int
=	O
BI3_OUT_ROWS	O
;	O
out_cols	int
=	O
BI3_OUT_COLS	O
;	O
}	O
else	O
{	O
out_rows	int
=	O
SI3_OUT_ROWS	O
;	O
out_cols	int
=	O
SI3_OUT_COLS	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
cal_special_flag	int
)	O
{	O
out_rows	int
=	O
J3_OUT_ROWS	O
;	O
out_cols	int
=	O
J3_OUT_COLS	O
;	O
}	O
else	O
if	O
(	O
cal_both_dates_flag	int
)	O
{	O
out_rows	int
=	O
B3_OUT_ROWS	int
;	O
out_cols	int
=	O
B3_OUT_COLS	int
;	O
}	O
else	O
{	O
out_rows	int
=	O
S3_OUT_ROWS	int
;	O
out_cols	int
=	O
S3_OUT_COLS	int
;	O
}	O
}	O
}	O
else	O
{	O
switch	O
(	O
out_rows	int
)	O
{	O
case	O
MONTH_MIN	int
:	O
out_cols	int
=	O
MONTH_MAX	int
;	O
break	O
;	O
case	O
2	int
:	O
out_cols	int
=	O
6	int
;	O
break	O
;	O
case	O
3	int
:	O
out_cols	int
=	O
S_OUT_COLS	int
;	O
break	O
;	O
case	O
4	int
:	O
out_cols	int
=	O
J_OUT_COLS	int
;	O
break	O
;	O
case	O
6	int
:	O
out_cols	int
=	O
2	int
;	O
break	O
;	O
case	O
MONTH_MAX	int
:	O
out_cols	int
=	O
MONTH_MIN	int
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
if	O
(	O
!	O
year_flag	int
)	O
{	O
if	O
(	O
special_calsheet_flag	int
)	O
{	O
if	O
(	O
cal_special_flag	int
)	O
{	O
out_rows	int
=	O
JI_OUT_ROWS	int
;	O
out_cols	int
=	O
JI_OUT_COLS	int
;	O
}	O
else	O
if	O
(	O
cal_both_dates_flag	int
)	O
{	O
out_rows	int
=	O
BI_OUT_ROWS	O
;	O
out_cols	int
=	O
BI_OUT_COLS	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
cal_special_flag	int
)	O
{	O
out_rows	int
=	O
J_OUT_ROWS	int
;	O
out_cols	int
=	O
J_OUT_COLS	int
;	O
}	O
else	O
if	O
(	O
cal_both_dates_flag	int
)	O
{	O
out_rows	int
=	O
B_OUT_ROWS	int
;	O
out_cols	int
=	O
B_OUT_COLS	int
;	O
}	O
}	O
}	O
}	O
if	O
(	O
cal_special_flag	int
)	O
format_len	int
=	O
FORMAT_LEN_MIN	int
+	O
1	int
;	O
else	O
if	O
(	O
cal_both_dates_flag	int
)	O
format_len	int
=	O
FORMAT_LEN_MIN	int
+	O
5	int
;	O
else	O
format_len	int
=	O
FORMAT_LEN_MIN	int
;	O
len_dayname_max	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
DAY_MIN	int
;	O
i	int
<=	O
DAY_MAX	int
;	O
i	int
++	O
)	O
{	O
len	int
=	O
(	O
int	O
)	O
strlen	function
(	O
day_name	function
(	O
i	int
)	O
)	O
;	O
if	O
(	O
len	int
>	O
len_dayname_max	int
)	O
len_dayname_max	int
=	O
len	int
;	O
}	O
len_monthname_max	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
MONTH_MIN	int
;	O
i	int
<=	O
MONTH_MAX	int
;	O
i	int
++	O
)	O
{	O
len	int
=	O
(	O
int	O
)	O
strlen	function
(	O
month_name	function
(	O
i	int
)	O
)	O
;	O
if	O
(	O
len	int
>	O
len_monthname_max	int
)	O
len_monthname_max	int
=	O
len	int
;	O
}	O
len_suffix_max	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
DAY_MIN	int
;	O
i	int
<=	O
4	int
;	O
i	int
++	O
)	O
{	O
len	int
=	O
(	O
int	O
)	O
strlen	function
(	O
day_suffix	function
(	O
i	int
)	O
)	O
;	O
if	O
(	O
len	int
>	O
len_suffix_max	int
)	O
len_suffix_max	int
=	O
len	int
;	O
}	O
}	O
static	O
void	O
pseudo_blank_conversion	function
(	O
text	pointer
)	O
char	O
*	O
*	O
text	pointer
;	O
{	O
if	O
(	O
strchr	function
(	O
*	O
text	pointer
,	O
PSEUDO_BLANK	char
)	O
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
auto	O
char	O
*	O
ptr_char	pointer
;	O
auto	O
char	O
*	O
ptr2_char	pointer
;	O
ptr_char	pointer
=	O
ptr2_char	pointer
=	O
*	O
text	pointer
;	O
while	O
(	O
*	O
ptr2_char	pointer
)	O
{	O
if	O
(	O
*	O
ptr2_char	pointer
==	O
PSEUDO_BLANK	char
)	O
{	O
ptr2_char	pointer
++	O
;	O
*	O
ptr_char	pointer
++	O
=	O
' '	O
;	O
}	O
else	O
if	O
(	O
*	O
ptr2_char	pointer
==	O
QUOTE_CHAR	char
)	O
{	O
ptr2_char	pointer
++	O
;	O
if	O
(	O
*	O
ptr2_char	pointer
==	O
PSEUDO_BLANK	char
)	O
*	O
ptr_char	pointer
++	O
=	O
*	O
ptr2_char	pointer
++	O
;	O
else	O
*	O
ptr_char	pointer
++	O
=	O
QUOTE_CHAR	char
;	O
}	O
else	O
*	O
ptr_char	pointer
++	O
=	O
*	O
ptr2_char	pointer
++	O
;	O
}	O
*	O
ptr_char	pointer
=	O
'\0'	O
;	O
}	O
}	O
static	O
int	O
further_check	function
(	O
option	pointer
)	O
char	O
*	O
*	O
option	pointer
;	O
{	O
register	O
int	O
opt_error	int
=	O
0	int
;	O
(	O
*	O
option	pointer
)	O
++	O
;	O
if	O
(	O
*	O
*	O
option	pointer
)	O
{	O
rc_week_year_flag	int
=	O
(	O
Bool	int
)	O
(	O
tolower	function
(	O
*	O
*	O
option	pointer
)	O
==	O
'w'	O
)	O
;	O
rc_forwards_flag	int
=	O
(	O
Bool	int
)	O
(	O
*	O
*	O
option	pointer
==	O
*	O
ASC_LIT	pointer
)	O
;	O
rc_backwards_flag	int
=	O
(	O
Bool	int
)	O
(	O
*	O
*	O
option	pointer
==	O
*	O
DES_LIT	pointer
)	O
;	O
(	O
*	O
option	pointer
)	O
++	O
;	O
if	O
(	O
*	O
*	O
option	pointer
||	O
(	O
!	O
rc_week_year_flag	int
&&	O
!	O
rc_forwards_flag	int
&&	O
!	O
rc_backwards_flag	int
)	O
)	O
opt_error	int
=	O
5	int
;	O
}	O
return	O
(	O
opt_error	int
)	O
;	O
}	O
