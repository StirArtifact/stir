struct	O
json_dumper	struct
{	O
FILE	struct
*	O
fp	pointer
;	O
int	O
indent	int
;	O
int	O
level	int
;	O
int	O
first	int
;	O
}	O
;	O
static	O
void	O
dumper_init	function
(	O
struct	O
json_dumper	struct
*	O
dmp	pointer
,	O
FILE	struct
*	O
fp	pointer
,	O
int	O
indent	int
)	O
{	O
dmp	pointer
->	O
fp	pointer
=	O
fp	pointer
;	O
dmp	pointer
->	O
indent	int
=	O
indent	int
;	O
dmp	pointer
->	O
level	int
=	O
1	int
;	O
dmp	pointer
->	O
first	int
=	O
1	int
;	O
}	O
static	O
void	O
dumper_copy	function
(	O
struct	O
json_dumper	struct
*	O
dst	pointer
,	O
struct	O
json_dumper	struct
*	O
src	pointer
)	O
{	O
dst	pointer
->	O
fp	pointer
=	O
src	pointer
->	O
fp	pointer
;	O
dst	pointer
->	O
indent	int
=	O
src	pointer
->	O
indent	int
;	O
dst	pointer
->	O
level	int
=	O
src	pointer
->	O
level	int
+	O
1	int
;	O
dst	pointer
->	O
first	int
=	O
1	int
;	O
}	O
static	O
void	O
dump_indent	function
(	O
struct	O
json_dumper	struct
*	O
dmp	pointer
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
dmp	pointer
->	O
indent	int
*	O
dmp	pointer
->	O
level	int
;	O
i	int
++	O
)	O
fputc	function
(	O
' '	O
,	O
dmp	pointer
->	O
fp	pointer
)	O
;	O
}	O
static	O
void	O
dump_separator	function
(	O
struct	O
json_dumper	struct
*	O
dmp	pointer
)	O
{	O
if	O
(	O
dmp	pointer
->	O
indent	int
)	O
{	O
fputc	function
(	O
'\n'	O
,	O
dmp	pointer
->	O
fp	pointer
)	O
;	O
dump_indent	function
(	O
dmp	pointer
)	O
;	O
}	O
else	O
fputc	function
(	O
' '	O
,	O
dmp	pointer
->	O
fp	pointer
)	O
;	O
}	O
static	O
void	O
dump_delim	function
(	O
struct	O
json_dumper	struct
*	O
dmp	pointer
)	O
{	O
fputc	function
(	O
','	O
,	O
dmp	pointer
->	O
fp	pointer
)	O
;	O
dump_separator	function
(	O
dmp	pointer
)	O
;	O
}	O
static	O
void	O
dump_id	function
(	O
char	O
const	O
*	O
id	pointer
,	O
struct	O
json_dumper	struct
*	O
dmp	pointer
)	O
{	O
if	O
(	O
dmp	pointer
->	O
first	int
)	O
dmp	pointer
->	O
first	int
=	O
0	int
;	O
else	O
dump_delim	function
(	O
dmp	pointer
)	O
;	O
fprintf	function
(	O
dmp	pointer
->	O
fp	pointer
,	O
"\"%s\":"	pointer
,	O
id	pointer
)	O
;	O
}	O
static	O
void	O
dump_null	function
(	O
char	O
const	O
*	O
id	pointer
,	O
struct	O
json_dumper	struct
*	O
dmp	pointer
)	O
{	O
dump_id	function
(	O
id	pointer
,	O
dmp	pointer
)	O
;	O
fputs	function
(	O
"null"	pointer
,	O
dmp	pointer
->	O
fp	pointer
)	O
;	O
}	O
void	O
dumpstr	function
(	O
char	O
const	O
*	O
string	pointer
,	O
FILE	struct
*	O
fp	pointer
)	O
{	O
int	O
c	int
;	O
fputc	function
(	O
'\"'	O
,	O
fp	pointer
)	O
;	O
for	O
(	O
;	O
(	O
c	int
=	O
*	O
string	pointer
)	O
!=	O
0	int
;	O
string	pointer
++	O
)	O
{	O
int	O
ec	int
;	O
if	O
(	O
c	int
==	O
'\\'	O
||	O
c	int
==	O
'\"'	O
)	O
{	O
fputc	function
(	O
'\\'	O
,	O
fp	pointer
)	O
;	O
fputc	function
(	O
c	int
,	O
fp	pointer
)	O
;	O
}	O
else	O
if	O
(	O
c_isprint	function
(	O
c	int
)	O
)	O
fputc	function
(	O
c	int
,	O
fp	pointer
)	O
;	O
else	O
if	O
(	O
(	O
ec	int
=	O
wordsplit_c_quote_char	function
(	O
c	int
)	O
)	O
!=	O
0	int
)	O
{	O
fputc	function
(	O
'\\'	O
,	O
fp	pointer
)	O
;	O
fputc	function
(	O
ec	int
,	O
fp	pointer
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
fp	pointer
,	O
"\\%03o"	pointer
,	O
c	int
)	O
;	O
}	O
}	O
fputc	function
(	O
'\"'	O
,	O
fp	pointer
)	O
;	O
}	O
static	O
void	O
dump_string_data	function
(	O
char	O
const	O
*	O
string	pointer
,	O
struct	O
json_dumper	struct
*	O
dmp	pointer
)	O
{	O
if	O
(	O
!	O
string	pointer
)	O
{	O
fputs	function
(	O
"null"	pointer
,	O
dmp	pointer
->	O
fp	pointer
)	O
;	O
return	O
;	O
}	O
dumpstr	function
(	O
string	pointer
,	O
dmp	pointer
->	O
fp	pointer
)	O
;	O
}	O
static	O
void	O
dump_string	function
(	O
char	O
const	O
*	O
string	pointer
,	O
char	O
const	O
*	O
id	pointer
,	O
struct	O
json_dumper	struct
*	O
dmp	pointer
)	O
{	O
dump_id	function
(	O
id	pointer
,	O
dmp	pointer
)	O
;	O
dump_string_data	function
(	O
string	pointer
,	O
dmp	pointer
)	O
;	O
}	O
static	O
void	O
dump_raw_argv	function
(	O
char	O
*	O
*	O
argv	pointer
,	O
struct	O
json_dumper	struct
*	O
dmp	pointer
)	O
{	O
size_t	long
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
argv	pointer
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
i	int
)	O
dump_delim	function
(	O
dmp	pointer
)	O
;	O
dump_string_data	function
(	O
argv	pointer
[	O
i	int
]	O
,	O
dmp	pointer
)	O
;	O
}	O
}	O
static	O
int	O
cmp_ptr	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
char	O
*	O
*	O
const	O
aptr	pointer
=	O
(	O
char	O
*	O
*	O
const	O
)	O
a	pointer
;	O
char	O
*	O
*	O
const	O
bptr	pointer
=	O
(	O
char	O
*	O
*	O
const	O
)	O
b	pointer
;	O
return	O
strcmp	function
(	O
*	O
aptr	pointer
,	O
*	O
bptr	pointer
)	O
;	O
}	O
static	O
void	O
dump_argv	function
(	O
char	O
*	O
*	O
argv	pointer
,	O
char	O
const	O
*	O
id	pointer
,	O
int	O
sort	int
,	O
struct	O
json_dumper	struct
*	O
dmp	pointer
)	O
{	O
size_t	long
i	int
;	O
struct	O
json_dumper	struct
nest_dmp	struct
;	O
dump_id	function
(	O
id	pointer
,	O
dmp	pointer
)	O
;	O
if	O
(	O
!	O
argv	pointer
)	O
{	O
fputs	function
(	O
"null"	pointer
,	O
dmp	pointer
->	O
fp	pointer
)	O
;	O
return	O
;	O
}	O
fputc	function
(	O
'['	O
,	O
dmp	pointer
->	O
fp	pointer
)	O
;	O
if	O
(	O
!	O
argv	pointer
[	O
0	int
]	O
)	O
{	O
fputc	function
(	O
']'	O
,	O
dmp	pointer
->	O
fp	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
dmp	pointer
->	O
indent	int
)	O
fputc	function
(	O
'\n'	O
,	O
dmp	pointer
->	O
fp	pointer
)	O
;	O
dumper_copy	function
(	O
&	O
nest_dmp	struct
,	O
dmp	pointer
)	O
;	O
dump_indent	function
(	O
&	O
nest_dmp	struct
)	O
;	O
if	O
(	O
sort	int
)	O
{	O
char	O
*	O
*	O
newargv	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
argv	pointer
[	O
i	int
]	O
;	O
i	int
++	O
)	O
;	O
newargv	pointer
=	O
xcalloc	function
(	O
i	int
+	O
1	int
,	O
sizeof	O
(	O
newargv	pointer
[	O
0	int
]	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
(	O
newargv	pointer
[	O
i	int
]	O
=	O
argv	pointer
[	O
i	int
]	O
)	O
!=	O
NULL	O
;	O
i	int
++	O
)	O
;	O
qsort	function
(	O
newargv	pointer
,	O
i	int
,	O
sizeof	O
(	O
newargv	pointer
[	O
0	int
]	O
)	O
,	O
cmp_ptr	function
)	O
;	O
dump_raw_argv	function
(	O
newargv	pointer
,	O
&	O
nest_dmp	struct
)	O
;	O
free	function
(	O
newargv	pointer
)	O
;	O
}	O
else	O
{	O
dump_raw_argv	function
(	O
argv	pointer
,	O
&	O
nest_dmp	struct
)	O
;	O
}	O
dump_separator	function
(	O
dmp	pointer
)	O
;	O
fputc	function
(	O
']'	O
,	O
dmp	pointer
->	O
fp	pointer
)	O
;	O
}	O
static	O
void	O
dump_umax	function
(	O
uintmax_t	long
val	array
,	O
char	O
const	O
*	O
id	pointer
,	O
struct	O
json_dumper	struct
*	O
dmp	pointer
)	O
{	O
char	O
buf	array
[	O
INT_BUFSIZE_BOUND	O
(	O
uintmax_t	long
)	O
]	O
;	O
dump_id	function
(	O
id	pointer
,	O
dmp	pointer
)	O
;	O
fputs	function
(	O
umaxtostr	function
(	O
val	array
,	O
buf	array
)	O
,	O
dmp	pointer
->	O
fp	pointer
)	O
;	O
}	O
static	O
void	O
dump_octal	function
(	O
unsigned	O
val	array
,	O
char	O
const	O
*	O
id	pointer
,	O
struct	O
json_dumper	struct
*	O
dmp	pointer
)	O
{	O
dump_id	function
(	O
id	pointer
,	O
dmp	pointer
)	O
;	O
fprintf	function
(	O
dmp	pointer
->	O
fp	pointer
,	O
"%03o"	pointer
,	O
val	array
)	O
;	O
}	O
static	O
void	O
dump_int	function
(	O
int	O
val	array
,	O
char	O
const	O
*	O
id	pointer
,	O
struct	O
json_dumper	struct
*	O
dmp	pointer
)	O
{	O
dump_id	function
(	O
id	pointer
,	O
dmp	pointer
)	O
;	O
fprintf	function
(	O
dmp	pointer
->	O
fp	pointer
,	O
"%d"	pointer
,	O
val	array
)	O
;	O
}	O
static	O
char	O
*	O
*	O
kv_ar	pointer
;	O
static	O
int	O
cmp_idx	function
(	O
void	O
const	O
*	O
a	pointer
,	O
void	O
const	O
*	O
b	pointer
)	O
{	O
size_t	long
const	O
*	O
ai	pointer
=	O
a	pointer
;	O
size_t	long
const	O
*	O
bi	pointer
=	O
b	pointer
;	O
return	O
strcmp	function
(	O
kv_ar	pointer
[	O
*	O
ai	pointer
]	O
,	O
kv_ar	pointer
[	O
*	O
bi	pointer
]	O
)	O
;	O
}	O
static	O
void	O
dump_vars	function
(	O
struct	O
rush_request	struct
*	O
req	pointer
,	O
char	O
const	O
*	O
id	pointer
,	O
struct	O
json_dumper	struct
*	O
dmp	pointer
)	O
{	O
dump_id	function
(	O
id	pointer
,	O
dmp	pointer
)	O
;	O
fputc	function
(	O
'{'	O
,	O
dmp	pointer
->	O
fp	pointer
)	O
;	O
if	O
(	O
req	pointer
->	O
var_count	long
)	O
{	O
size_t	long
i	int
,	O
ic	long
;	O
size_t	long
*	O
iv	pointer
;	O
struct	O
json_dumper	struct
nest_dmp	struct
;	O
ic	long
=	O
req	pointer
->	O
var_count	long
/	O
2	int
;	O
iv	pointer
=	O
xcalloc	function
(	O
ic	long
,	O
sizeof	O
(	O
iv	pointer
[	O
0	int
]	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ic	long
;	O
i	int
++	O
)	O
{	O
iv	pointer
[	O
i	int
]	O
=	O
2	int
*	O
i	int
;	O
}	O
kv_ar	pointer
=	O
req	pointer
->	O
var_kv	pointer
;	O
qsort	function
(	O
iv	pointer
,	O
ic	long
,	O
sizeof	O
(	O
iv	pointer
[	O
0	int
]	O
)	O
,	O
cmp_idx	function
)	O
;	O
dumper_copy	function
(	O
&	O
nest_dmp	struct
,	O
dmp	pointer
)	O
;	O
dump_separator	function
(	O
&	O
nest_dmp	struct
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ic	long
;	O
i	int
++	O
)	O
{	O
dump_id	function
(	O
req	pointer
->	O
var_kv	pointer
[	O
iv	pointer
[	O
i	int
]	O
]	O
,	O
&	O
nest_dmp	struct
)	O
;	O
dump_string_data	function
(	O
req	pointer
->	O
var_kv	pointer
[	O
iv	pointer
[	O
i	int
]	O
+	O
1	int
]	O
,	O
&	O
nest_dmp	struct
)	O
;	O
}	O
dump_separator	function
(	O
dmp	pointer
)	O
;	O
}	O
fputc	function
(	O
'}'	O
,	O
dmp	pointer
->	O
fp	pointer
)	O
;	O
}	O
static	O
char	O
allkw	array
[	O
]	O
=	O
"cmdline,"	pointer
"argv,"	pointer
"prog,"	pointer
"interactive,"	pointer
"pw_name,"	pointer
"pw_uid,"	pointer
"pw_gid,"	pointer
"pw_dir,"	pointer
"umask,"	pointer
"chroot_dir,"	pointer
"home_dir,"	pointer
"gid,"	pointer
"fork,"	pointer
"acct,"	pointer
"text_domain,"	pointer
"localedir,"	pointer
"locale,"	pointer
"environ,"	pointer
"vars"	pointer
;	O
void	O
dump_request	function
(	O
struct	O
rush_request	struct
*	O
req	pointer
,	O
FILE	struct
*	O
fp	pointer
)	O
{	O
size_t	long
i	int
;	O
struct	O
json_dumper	struct
dmp	pointer
;	O
struct	O
wordsplit	struct
ws	pointer
;	O
ws	pointer
.	O
ws_delim	pointer
=	O
","	pointer
;	O
if	O
(	O
strcmp	function
(	O
dump_option	pointer
,	O
"all"	pointer
)	O
==	O
0	int
)	O
dump_option	pointer
=	O
allkw	array
;	O
if	O
(	O
wordsplit	struct
(	O
dump_option	pointer
,	O
&	O
ws	pointer
,	O
WRDSF_DELIM	int
|	O
WRDSF_WS	int
|	O
WRDSF_SQUEEZE_DELIMS	int
|	O
WRDSF_NOVAR	int
|	O
WRDSF_NOCMD	int
|	O
WRDSF_SHOWERR	int
)	O
)	O
abort	function
(	O
)	O
;	O
dumper_init	function
(	O
&	O
dmp	pointer
,	O
fp	pointer
,	O
4	int
)	O
;	O
fputc	function
(	O
'{'	O
,	O
fp	pointer
)	O
;	O
dump_separator	function
(	O
&	O
dmp	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ws	pointer
.	O
ws_wordc	long
;	O
i	int
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
,	O
"cmdline"	pointer
)	O
==	O
0	int
)	O
dump_string	function
(	O
req	pointer
->	O
cmdline	pointer
,	O
"cmdline"	pointer
,	O
&	O
dmp	pointer
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
,	O
"argv"	pointer
)	O
==	O
0	int
)	O
dump_argv	function
(	O
req	pointer
->	O
argv	pointer
,	O
"argv"	pointer
,	O
0	int
,	O
&	O
dmp	pointer
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
,	O
"prog"	pointer
)	O
==	O
0	int
)	O
dump_string	function
(	O
req	pointer
->	O
prog	pointer
,	O
"prog"	pointer
,	O
&	O
dmp	pointer
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
,	O
"interactive"	pointer
)	O
==	O
0	int
)	O
dump_int	function
(	O
req	pointer
->	O
interactive	int
,	O
"interactive"	pointer
,	O
&	O
dmp	pointer
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
,	O
"pw_name"	pointer
)	O
==	O
0	int
)	O
dump_string	function
(	O
req	pointer
->	O
pw	pointer
->	O
pw_name	pointer
,	O
"pw_name"	pointer
,	O
&	O
dmp	pointer
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
,	O
"pw_uid"	pointer
)	O
==	O
0	int
)	O
dump_umax	function
(	O
req	pointer
->	O
pw	pointer
->	O
pw_uid	int
,	O
"pw_uid"	pointer
,	O
&	O
dmp	pointer
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
,	O
"pw_gid"	pointer
)	O
==	O
0	int
)	O
dump_umax	function
(	O
req	pointer
->	O
pw	pointer
->	O
pw_gid	int
,	O
"pw_gid"	pointer
,	O
&	O
dmp	pointer
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
,	O
"pw_dir"	pointer
)	O
==	O
0	int
)	O
dump_string	function
(	O
req	pointer
->	O
pw	pointer
->	O
pw_dir	pointer
,	O
"pw_dir"	pointer
,	O
&	O
dmp	pointer
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
,	O
"umask"	pointer
)	O
==	O
0	int
)	O
dump_octal	function
(	O
req	pointer
->	O
umask	function
,	O
"umask"	pointer
,	O
&	O
dmp	pointer
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
,	O
"chroot_dir"	pointer
)	O
==	O
0	int
)	O
dump_string	function
(	O
req	pointer
->	O
chroot_dir	pointer
,	O
"chroot_dir"	pointer
,	O
&	O
dmp	pointer
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
,	O
"home_dir"	pointer
)	O
==	O
0	int
)	O
dump_string	function
(	O
req	pointer
->	O
home_dir	pointer
,	O
"home_dir"	pointer
,	O
&	O
dmp	pointer
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
,	O
"gid"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
req	pointer
->	O
gid	int
==	O
NO_GID	O
)	O
dump_null	function
(	O
"gid"	pointer
,	O
&	O
dmp	pointer
)	O
;	O
else	O
dump_umax	function
(	O
req	pointer
->	O
gid	int
,	O
"gid"	pointer
,	O
&	O
dmp	pointer
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
,	O
"fork"	pointer
)	O
==	O
0	int
)	O
dump_int	function
(	O
req	pointer
->	O
fork	function
,	O
"fork"	pointer
,	O
&	O
dmp	pointer
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
,	O
"acct"	pointer
)	O
==	O
0	int
)	O
dump_int	function
(	O
req	pointer
->	O
acct	function
,	O
"acct"	pointer
,	O
&	O
dmp	pointer
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
,	O
"text_domain"	pointer
)	O
==	O
0	int
)	O
dump_string	function
(	O
req	pointer
->	O
i18n	struct
.	O
text_domain	pointer
,	O
"text_domain"	pointer
,	O
&	O
dmp	pointer
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
,	O
"localedir"	pointer
)	O
==	O
0	int
)	O
dump_string	function
(	O
req	pointer
->	O
i18n	struct
.	O
localedir	pointer
,	O
"localedir"	pointer
,	O
&	O
dmp	pointer
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
,	O
"locale"	pointer
)	O
==	O
0	int
)	O
dump_string	function
(	O
req	pointer
->	O
i18n	struct
.	O
locale	pointer
,	O
"locale"	pointer
,	O
&	O
dmp	pointer
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
,	O
"environ"	pointer
)	O
==	O
0	int
)	O
dump_argv	function
(	O
req	pointer
->	O
env	pointer
,	O
"environ"	pointer
,	O
1	int
,	O
&	O
dmp	pointer
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
,	O
"vars"	pointer
)	O
==	O
0	int
)	O
dump_vars	function
(	O
req	pointer
,	O
"vars"	pointer
,	O
&	O
dmp	pointer
)	O
;	O
else	O
logmsg	function
(	O
LOG_ERR	int
,	O
_	O
(	O
"unknown keyword: %s"	pointer
)	O
,	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
)	O
;	O
}	O
if	O
(	O
dmp	pointer
.	O
indent	int
)	O
fputc	function
(	O
'\n'	O
,	O
fp	pointer
)	O
;	O
fputc	function
(	O
'}'	O
,	O
fp	pointer
)	O
;	O
fputc	function
(	O
'\n'	O
,	O
fp	pointer
)	O
;	O
wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
}	O
