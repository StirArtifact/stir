int	O
gsl_movstat_apply_accum	function
(	O
const	O
gsl_movstat_end_t	enum
endtype	enum
,	O
const	O
gsl_vector	struct
*	O
x	double
,	O
const	O
gsl_movstat_accum	struct
*	O
accum	pointer
,	O
void	O
*	O
accum_params	pointer
,	O
gsl_vector	struct
*	O
y	double
,	O
gsl_vector	struct
*	O
z	double
,	O
gsl_movstat_workspace	struct
*	O
w	pointer
)	O
{	O
if	O
(	O
x	double
->	O
size	long
!=	O
y	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"input and output vectors must have same length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
z	double
!=	O
NULL	O
&&	O
x	double
->	O
size	long
!=	O
z	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"input and output vectors must have same length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
const	O
int	O
n	int
=	O
(	O
int	O
)	O
x	double
->	O
size	long
;	O
const	O
int	O
H	long
=	O
w	pointer
->	O
H	long
;	O
const	O
int	O
J	long
=	O
w	pointer
->	O
J	long
;	O
int	O
i	long
;	O
double	O
x1	double
=	O
0.0	int
;	O
double	O
xN	double
=	O
0.0	int
;	O
double	O
result	pointer
[	O
2	int
]	O
;	O
(	O
accum	pointer
->	O
init	pointer
)	O
(	O
w	pointer
->	O
K	long
,	O
w	pointer
->	O
state	pointer
)	O
;	O
if	O
(	O
endtype	enum
!=	O
GSL_MOVSTAT_END_TRUNCATE	int
)	O
{	O
if	O
(	O
endtype	enum
==	O
GSL_MOVSTAT_END_PADZERO	int
)	O
{	O
x1	double
=	O
0.0	int
;	O
xN	double
=	O
0.0	int
;	O
}	O
else	O
if	O
(	O
endtype	enum
==	O
GSL_MOVSTAT_END_PADVALUE	int
)	O
{	O
x1	double
=	O
gsl_vector_get	function
(	O
x	double
,	O
0	int
)	O
;	O
xN	double
=	O
gsl_vector_get	function
(	O
x	double
,	O
n	int
-	O
1	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
H	long
;	O
++	O
i	long
)	O
(	O
accum	pointer
->	O
insert	pointer
)	O
(	O
x1	double
,	O
w	pointer
->	O
state	pointer
)	O
;	O
}	O
else	O
if	O
(	O
accum	pointer
->	O
delete_oldest	pointer
==	O
NULL	O
)	O
{	O
int	O
idx1	int
=	O
GSL_MAX	O
(	O
n	int
-	O
J	long
-	O
H	long
,	O
0	int
)	O
;	O
int	O
idx2	int
=	O
n	int
-	O
1	int
;	O
for	O
(	O
i	long
=	O
idx1	int
;	O
i	long
<=	O
idx2	int
;	O
++	O
i	long
)	O
w	pointer
->	O
work	pointer
[	O
i	long
-	O
idx1	int
]	O
=	O
gsl_vector_get	function
(	O
x	double
,	O
i	long
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
double	O
xi	double
=	O
gsl_vector_get	function
(	O
x	double
,	O
i	long
)	O
;	O
int	O
idx	long
=	O
i	long
-	O
J	long
;	O
(	O
accum	pointer
->	O
insert	pointer
)	O
(	O
xi	double
,	O
w	pointer
->	O
state	pointer
)	O
;	O
if	O
(	O
idx	long
>=	O
0	int
)	O
{	O
(	O
accum	pointer
->	O
get	pointer
)	O
(	O
accum_params	pointer
,	O
result	pointer
,	O
w	pointer
->	O
state	pointer
)	O
;	O
gsl_vector_set	function
(	O
y	double
,	O
idx	long
,	O
result	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
z	double
!=	O
NULL	O
)	O
gsl_vector_set	function
(	O
z	double
,	O
idx	long
,	O
result	pointer
[	O
1	int
]	O
)	O
;	O
}	O
}	O
if	O
(	O
endtype	enum
==	O
GSL_MOVSTAT_END_TRUNCATE	int
)	O
{	O
int	O
idx1	int
=	O
GSL_MAX	O
(	O
n	int
-	O
J	long
,	O
0	int
)	O
;	O
int	O
idx2	int
=	O
n	int
-	O
1	int
;	O
if	O
(	O
accum	pointer
->	O
delete_oldest	pointer
==	O
NULL	O
)	O
{	O
int	O
wsize	int
=	O
n	int
-	O
GSL_MAX	O
(	O
n	int
-	O
J	long
-	O
H	long
,	O
0	int
)	O
;	O
for	O
(	O
i	long
=	O
idx1	int
;	O
i	long
<=	O
idx2	int
;	O
++	O
i	long
)	O
{	O
int	O
nsamp	int
=	O
n	int
-	O
GSL_MAX	O
(	O
i	long
-	O
H	long
,	O
0	int
)	O
;	O
int	O
j	long
;	O
(	O
accum	pointer
->	O
init	pointer
)	O
(	O
w	pointer
->	O
K	long
,	O
w	pointer
->	O
state	pointer
)	O
;	O
for	O
(	O
j	long
=	O
wsize	int
-	O
nsamp	int
;	O
j	long
<	O
wsize	int
;	O
++	O
j	long
)	O
(	O
accum	pointer
->	O
insert	pointer
)	O
(	O
w	pointer
->	O
work	pointer
[	O
j	long
]	O
,	O
w	pointer
->	O
state	pointer
)	O
;	O
(	O
accum	pointer
->	O
get	pointer
)	O
(	O
accum_params	pointer
,	O
result	pointer
,	O
w	pointer
->	O
state	pointer
)	O
;	O
gsl_vector_set	function
(	O
y	double
,	O
i	long
,	O
result	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
z	double
!=	O
NULL	O
)	O
gsl_vector_set	function
(	O
z	double
,	O
i	long
,	O
result	pointer
[	O
1	int
]	O
)	O
;	O
}	O
}	O
else	O
{	O
for	O
(	O
i	long
=	O
idx1	int
;	O
i	long
<=	O
idx2	int
;	O
++	O
i	long
)	O
{	O
if	O
(	O
i	long
-	O
H	long
>	O
0	int
)	O
{	O
(	O
accum	pointer
->	O
delete_oldest	pointer
)	O
(	O
w	pointer
->	O
state	pointer
)	O
;	O
}	O
(	O
accum	pointer
->	O
get	pointer
)	O
(	O
accum_params	pointer
,	O
result	pointer
,	O
w	pointer
->	O
state	pointer
)	O
;	O
gsl_vector_set	function
(	O
y	double
,	O
i	long
,	O
result	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
z	double
!=	O
NULL	O
)	O
gsl_vector_set	function
(	O
z	double
,	O
i	long
,	O
result	pointer
[	O
1	int
]	O
)	O
;	O
}	O
}	O
}	O
else	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
J	long
;	O
++	O
i	long
)	O
{	O
int	O
idx	long
=	O
n	int
-	O
J	long
+	O
i	long
;	O
(	O
accum	pointer
->	O
insert	pointer
)	O
(	O
xN	double
,	O
w	pointer
->	O
state	pointer
)	O
;	O
if	O
(	O
idx	long
>=	O
0	int
)	O
{	O
(	O
accum	pointer
->	O
get	pointer
)	O
(	O
accum_params	pointer
,	O
result	pointer
,	O
w	pointer
->	O
state	pointer
)	O
;	O
gsl_vector_set	function
(	O
y	double
,	O
idx	long
,	O
result	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
z	double
!=	O
NULL	O
)	O
gsl_vector_set	function
(	O
z	double
,	O
idx	long
,	O
result	pointer
[	O
1	int
]	O
)	O
;	O
}	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_movstat_apply	function
(	O
const	O
gsl_movstat_end_t	enum
endtype	enum
,	O
const	O
gsl_movstat_function	struct
*	O
F	pointer
,	O
const	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
y	double
,	O
gsl_movstat_workspace	struct
*	O
w	pointer
)	O
{	O
int	O
status	int
=	O
gsl_movstat_apply_accum	function
(	O
endtype	enum
,	O
x	double
,	O
gsl_movstat_accum_userfunc	pointer
,	O
(	O
void	O
*	O
)	O
F	pointer
,	O
y	double
,	O
NULL	O
,	O
w	pointer
)	O
;	O
return	O
status	int
;	O
}	O
