struct	O
_mu_ip_server	struct
{	O
char	O
*	O
ident	pointer
;	O
struct	O
mu_sockaddr	struct
*	O
addr	int
;	O
int	O
fd	int
;	O
int	O
type	int
;	O
mu_acl_t	pointer
acl	pointer
;	O
mu_ip_server_conn_fp	pointer
f_conn	pointer
;	O
mu_ip_server_intr_fp	pointer
f_intr	pointer
;	O
mu_ip_server_free_fp	pointer
f_free	pointer
;	O
void	O
*	O
data	pointer
;	O
union	O
{	O
struct	O
{	O
int	O
backlog	int
;	O
}	O
tcp_data	struct
;	O
struct	O
{	O
char	O
*	O
buf	pointer
;	O
size_t	long
bufsize	long
;	O
ssize_t	long
rdsize	long
;	O
}	O
udp_data	struct
;	O
}	O
v	union
;	O
}	O
;	O
int	O
mu_ip_server_create	function
(	O
mu_ip_server_t	pointer
*	O
psrv	pointer
,	O
struct	O
mu_sockaddr	struct
*	O
addr	int
,	O
int	O
type	int
)	O
{	O
struct	O
_mu_ip_server	struct
*	O
srv	pointer
;	O
switch	O
(	O
type	int
)	O
{	O
case	O
MU_IP_UDP	int
:	O
case	O
MU_IP_TCP	int
:	O
break	O
;	O
default	O
:	O
return	O
EINVAL	int
;	O
}	O
srv	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
*	O
srv	pointer
)	O
;	O
if	O
(	O
!	O
srv	pointer
)	O
return	O
ENOMEM	int
;	O
srv	pointer
->	O
addr	int
=	O
addr	int
;	O
srv	pointer
->	O
type	int
=	O
type	int
;	O
srv	pointer
->	O
fd	int
=	O
-	O
1	int
;	O
switch	O
(	O
type	int
)	O
{	O
case	O
MU_IP_UDP	int
:	O
srv	pointer
->	O
v	union
.	O
udp_data	struct
.	O
bufsize	long
=	O
4096	int
;	O
break	O
;	O
case	O
MU_IP_TCP	int
:	O
srv	pointer
->	O
v	union
.	O
tcp_data	struct
.	O
backlog	int
=	O
4	int
;	O
}	O
*	O
psrv	pointer
=	O
srv	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_ip_server_destroy	function
(	O
mu_ip_server_t	pointer
*	O
psrv	pointer
)	O
{	O
mu_ip_server_t	pointer
srv	pointer
;	O
if	O
(	O
!	O
psrv	pointer
)	O
return	O
EINVAL	int
;	O
srv	pointer
=	O
*	O
psrv	pointer
;	O
if	O
(	O
!	O
srv	pointer
)	O
return	O
0	int
;	O
if	O
(	O
srv	pointer
->	O
f_free	pointer
)	O
srv	pointer
->	O
f_free	pointer
(	O
srv	pointer
->	O
data	pointer
)	O
;	O
close	function
(	O
srv	pointer
->	O
fd	int
)	O
;	O
mu_sockaddr_free	function
(	O
srv	pointer
->	O
addr	int
)	O
;	O
free	function
(	O
srv	pointer
->	O
ident	pointer
)	O
;	O
if	O
(	O
srv	pointer
->	O
type	int
==	O
MU_IP_UDP	int
&&	O
srv	pointer
->	O
v	union
.	O
udp_data	struct
.	O
buf	pointer
)	O
free	function
(	O
srv	pointer
->	O
v	union
.	O
udp_data	struct
.	O
buf	pointer
)	O
;	O
free	function
(	O
srv	pointer
)	O
;	O
*	O
psrv	pointer
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_ip_server_get_type	function
(	O
mu_ip_server_t	pointer
srv	pointer
,	O
int	O
*	O
ptype	pointer
)	O
{	O
if	O
(	O
!	O
srv	pointer
)	O
return	O
EINVAL	int
;	O
*	O
ptype	pointer
=	O
srv	pointer
->	O
type	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_tcp_server_set_backlog	function
(	O
mu_ip_server_t	pointer
srv	pointer
,	O
int	O
backlog	int
)	O
{	O
if	O
(	O
!	O
srv	pointer
||	O
srv	pointer
->	O
type	int
!=	O
MU_IP_TCP	int
)	O
return	O
EINVAL	int
;	O
srv	pointer
->	O
v	union
.	O
tcp_data	struct
.	O
backlog	int
=	O
backlog	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_udp_server_get_bufsize	function
(	O
mu_ip_server_t	pointer
srv	pointer
,	O
size_t	long
*	O
psize	pointer
)	O
{	O
if	O
(	O
!	O
srv	pointer
||	O
srv	pointer
->	O
type	int
!=	O
MU_IP_UDP	int
)	O
return	O
EINVAL	int
;	O
*	O
psize	pointer
=	O
srv	pointer
->	O
v	union
.	O
udp_data	struct
.	O
bufsize	long
;	O
return	O
0	int
;	O
}	O
int	O
mu_udp_server_set_bufsize	function
(	O
mu_ip_server_t	pointer
srv	pointer
,	O
size_t	long
size	long
)	O
{	O
if	O
(	O
!	O
srv	pointer
||	O
srv	pointer
->	O
type	int
!=	O
MU_IP_UDP	int
)	O
return	O
EINVAL	int
;	O
srv	pointer
->	O
v	union
.	O
udp_data	struct
.	O
bufsize	long
=	O
size	long
;	O
if	O
(	O
srv	pointer
->	O
v	union
.	O
udp_data	struct
.	O
buf	pointer
)	O
{	O
char	O
*	O
p	pointer
=	O
realloc	function
(	O
srv	pointer
->	O
v	union
.	O
udp_data	struct
.	O
buf	pointer
,	O
size	long
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
ENOMEM	int
;	O
srv	pointer
->	O
v	union
.	O
udp_data	struct
.	O
buf	pointer
=	O
p	pointer
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_ip_server_set_ident	function
(	O
mu_ip_server_t	pointer
srv	pointer
,	O
const	O
char	O
*	O
ident	pointer
)	O
{	O
if	O
(	O
!	O
srv	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
srv	pointer
->	O
ident	pointer
)	O
free	function
(	O
srv	pointer
->	O
ident	pointer
)	O
;	O
srv	pointer
->	O
ident	pointer
=	O
strdup	function
(	O
ident	pointer
)	O
;	O
if	O
(	O
!	O
srv	pointer
->	O
ident	pointer
)	O
return	O
ENOMEM	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_ip_server_set_acl	function
(	O
mu_ip_server_t	pointer
srv	pointer
,	O
mu_acl_t	pointer
acl	pointer
)	O
{	O
if	O
(	O
!	O
srv	pointer
)	O
return	O
EINVAL	int
;	O
srv	pointer
->	O
acl	pointer
=	O
acl	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_ip_server_set_conn	function
(	O
mu_ip_server_t	pointer
srv	pointer
,	O
mu_ip_server_conn_fp	pointer
conn	pointer
)	O
{	O
if	O
(	O
!	O
srv	pointer
)	O
return	O
EINVAL	int
;	O
srv	pointer
->	O
f_conn	pointer
=	O
conn	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_ip_server_set_intr	function
(	O
mu_ip_server_t	pointer
srv	pointer
,	O
mu_ip_server_intr_fp	pointer
intr	pointer
)	O
{	O
if	O
(	O
!	O
srv	pointer
)	O
return	O
EINVAL	int
;	O
srv	pointer
->	O
f_intr	pointer
=	O
intr	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_ip_server_set_data	function
(	O
mu_ip_server_t	pointer
srv	pointer
,	O
void	O
*	O
data	pointer
,	O
mu_ip_server_free_fp	pointer
free	function
)	O
{	O
if	O
(	O
!	O
srv	pointer
)	O
return	O
EINVAL	int
;	O
srv	pointer
->	O
data	pointer
=	O
data	pointer
;	O
srv	pointer
->	O
f_free	pointer
=	O
free	function
;	O
return	O
0	int
;	O
}	O
void	O
*	O
mu_ip_server_get_data	function
(	O
mu_ip_server_t	pointer
tcpsrv	pointer
)	O
{	O
return	O
tcpsrv	pointer
->	O
data	pointer
;	O
}	O
int	O
mu_address_family_to_domain	function
(	O
int	O
family	int
)	O
{	O
switch	O
(	O
family	int
)	O
{	O
case	O
AF_UNIX	O
:	O
return	O
PF_UNIX	O
;	O
case	O
AF_INET	O
:	O
return	O
PF_INET	int
;	O
case	O
AF_INET6	O
:	O
return	O
PF_INET6	int
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
int	O
mu_ip_server_open	function
(	O
mu_ip_server_t	pointer
srv	pointer
)	O
{	O
int	O
fd	int
;	O
if	O
(	O
!	O
srv	pointer
||	O
srv	pointer
->	O
fd	int
!=	O
-	O
1	int
)	O
return	O
EINVAL	int
;	O
mu_debug	O
(	O
MU_DEBCAT_SERVER	int
,	O
MU_DEBUG_TRACE0	int
,	O
(	O
"opening server \"%s\" %s"	pointer
,	O
IDENTSTR	O
(	O
srv	pointer
)	O
,	O
mu_sockaddr_str	function
(	O
srv	pointer
->	O
addr	int
)	O
)	O
)	O
;	O
fd	int
=	O
socket	function
(	O
mu_address_family_to_domain	function
(	O
srv	pointer
->	O
addr	int
->	O
addr	int
->	O
sa_family	short
)	O
,	O
(	O
(	O
srv	pointer
->	O
type	int
==	O
MU_IP_UDP	int
)	O
?	O
SOCK_DGRAM	int
:	O
SOCK_STREAM	int
)	O
,	O
0	int
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_SERVER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s: socket: %s"	pointer
,	O
IDENTSTR	O
(	O
srv	pointer
)	O
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
)	O
;	O
return	O
errno	O
;	O
}	O
switch	O
(	O
srv	pointer
->	O
addr	int
->	O
addr	int
->	O
sa_family	short
)	O
{	O
case	O
AF_UNIX	O
:	O
{	O
struct	O
stat	struct
st	pointer
;	O
struct	O
sockaddr_un	struct
*	O
s_un	pointer
=	O
(	O
struct	O
sockaddr_un	struct
*	O
)	O
srv	pointer
->	O
addr	int
;	O
if	O
(	O
stat	struct
(	O
s_un	pointer
->	O
sun_path	array
,	O
&	O
st	pointer
)	O
)	O
{	O
if	O
(	O
errno	O
!=	O
ENOENT	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_SERVER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s: file %s exists but cannot be stat'd: %s"	pointer
,	O
IDENTSTR	O
(	O
srv	pointer
)	O
,	O
s_un	pointer
->	O
sun_path	array
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
)	O
;	O
return	O
EAGAIN	int
;	O
}	O
}	O
else	O
if	O
(	O
!	O
S_ISSOCK	O
(	O
st	pointer
.	O
st_mode	int
)	O
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_SERVER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s: file %s is not a socket"	pointer
,	O
IDENTSTR	O
(	O
srv	pointer
)	O
,	O
s_un	pointer
->	O
sun_path	array
)	O
)	O
;	O
return	O
EAGAIN	int
;	O
}	O
else	O
if	O
(	O
unlink	function
(	O
s_un	pointer
->	O
sun_path	array
)	O
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_SERVER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s: cannot unlink file %s: %s"	pointer
,	O
IDENTSTR	O
(	O
srv	pointer
)	O
,	O
s_un	pointer
->	O
sun_path	array
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
)	O
;	O
return	O
EAGAIN	int
;	O
}	O
}	O
break	O
;	O
default	O
:	O
{	O
int	O
t	long
;	O
t	long
=	O
1	int
;	O
setsockopt	function
(	O
fd	int
,	O
SOL_SOCKET	int
,	O
SO_REUSEADDR	int
,	O
&	O
t	long
,	O
sizeof	O
(	O
t	long
)	O
)	O
;	O
}	O
}	O
if	O
(	O
bind	function
(	O
fd	int
,	O
srv	pointer
->	O
addr	int
->	O
addr	int
,	O
srv	pointer
->	O
addr	int
->	O
addrlen	int
)	O
==	O
-	O
1	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_SERVER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s: bind: %s"	pointer
,	O
IDENTSTR	O
(	O
srv	pointer
)	O
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
)	O
;	O
close	function
(	O
fd	int
)	O
;	O
return	O
errno	O
;	O
}	O
if	O
(	O
srv	pointer
->	O
type	int
==	O
MU_IP_TCP	int
)	O
{	O
if	O
(	O
listen	function
(	O
fd	int
,	O
srv	pointer
->	O
v	union
.	O
tcp_data	struct
.	O
backlog	int
)	O
==	O
-	O
1	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_SERVER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s: listen: %s"	pointer
,	O
IDENTSTR	O
(	O
srv	pointer
)	O
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
)	O
;	O
close	function
(	O
fd	int
)	O
;	O
return	O
errno	O
;	O
}	O
}	O
srv	pointer
->	O
fd	int
=	O
fd	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_ip_server_shutdown	function
(	O
mu_ip_server_t	pointer
srv	pointer
)	O
{	O
if	O
(	O
!	O
srv	pointer
||	O
srv	pointer
->	O
fd	int
!=	O
-	O
1	int
)	O
return	O
EINVAL	int
;	O
mu_debug	O
(	O
MU_DEBCAT_SERVER	int
,	O
MU_DEBUG_TRACE0	int
,	O
(	O
"closing server \"%s\" %s"	pointer
,	O
IDENTSTR	O
(	O
srv	pointer
)	O
,	O
mu_sockaddr_str	function
(	O
srv	pointer
->	O
addr	int
)	O
)	O
)	O
;	O
close	function
(	O
srv	pointer
->	O
fd	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_ip_tcp_accept	function
(	O
mu_ip_server_t	pointer
srv	pointer
,	O
void	O
*	O
call_data	pointer
)	O
{	O
int	O
rc	int
;	O
int	O
connfd	int
;	O
union	O
{	O
struct	O
sockaddr	struct
sa	pointer
;	O
struct	O
sockaddr_in	struct
s_in	struct
;	O
struct	O
sockaddr_un	struct
s_un	pointer
;	O
struct	O
sockaddr_in6	struct
s_in6	struct
;	O
}	O
client	union
;	O
socklen_t	int
size	long
=	O
sizeof	O
(	O
client	union
)	O
;	O
if	O
(	O
!	O
srv	pointer
||	O
srv	pointer
->	O
fd	int
==	O
-	O
1	int
||	O
srv	pointer
->	O
type	int
==	O
MU_IP_UDP	int
)	O
return	O
EINVAL	int
;	O
connfd	int
=	O
accept	function
(	O
srv	pointer
->	O
fd	int
,	O
&	O
client	union
.	O
sa	pointer
,	O
&	O
size	long
)	O
;	O
if	O
(	O
connfd	int
==	O
-	O
1	int
)	O
{	O
int	O
ec	int
=	O
errno	O
;	O
switch	O
(	O
ec	int
)	O
{	O
case	O
EINTR	int
:	O
if	O
(	O
srv	pointer
->	O
f_intr	pointer
&&	O
srv	pointer
->	O
f_intr	pointer
(	O
srv	pointer
->	O
data	pointer
,	O
call_data	pointer
)	O
)	O
break	O
;	O
case	O
EAGAIN	int
:	O
case	O
ECONNABORTED	int
:	O
ec	int
=	O
0	int
;	O
}	O
return	O
ec	int
;	O
}	O
if	O
(	O
srv	pointer
->	O
acl	pointer
)	O
{	O
mu_acl_result_t	enum
res	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_acl_check_sockaddr	function
(	O
srv	pointer
->	O
acl	pointer
,	O
&	O
client	union
.	O
sa	pointer
,	O
size	long
,	O
&	O
res	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_debug	O
(	O
MU_DEBCAT_SERVER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s: mu_acl_check_sockaddr: %s"	pointer
,	O
IDENTSTR	O
(	O
srv	pointer
)	O
,	O
strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
if	O
(	O
res	pointer
==	O
mu_acl_result_deny	int
)	O
{	O
char	O
*	O
p	pointer
=	O
mu_sys_sockaddr_to_astr	function
(	O
&	O
client	union
.	O
sa	pointer
,	O
size	long
)	O
;	O
mu_diag_output	function
(	O
MU_DIAG_INFO	O
,	O
"Denying connection from %s"	pointer
,	O
p	pointer
)	O
;	O
free	function
(	O
p	pointer
)	O
;	O
close	function
(	O
connfd	int
)	O
;	O
return	O
0	int
;	O
}	O
}	O
rc	int
=	O
srv	pointer
->	O
f_conn	pointer
(	O
connfd	int
,	O
&	O
client	union
.	O
sa	pointer
,	O
size	long
,	O
srv	pointer
->	O
data	pointer
,	O
call_data	pointer
,	O
srv	pointer
)	O
;	O
close	function
(	O
connfd	int
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_ip_udp_accept	function
(	O
mu_ip_server_t	pointer
srv	pointer
,	O
void	O
*	O
call_data	pointer
)	O
{	O
int	O
rc	int
;	O
union	O
{	O
struct	O
sockaddr	struct
sa	pointer
;	O
struct	O
sockaddr_in	struct
s_in	struct
;	O
struct	O
sockaddr_un	struct
s_un	pointer
;	O
struct	O
sockaddr_in6	struct
s_in6	struct
;	O
}	O
client	union
;	O
fd_set	struct
rdset	struct
;	O
socklen_t	int
salen	int
=	O
sizeof	O
(	O
client	union
)	O
;	O
ssize_t	long
size	long
;	O
if	O
(	O
!	O
srv	pointer
->	O
v	union
.	O
udp_data	struct
.	O
buf	pointer
)	O
{	O
srv	pointer
->	O
v	union
.	O
udp_data	struct
.	O
buf	pointer
=	O
malloc	function
(	O
srv	pointer
->	O
v	union
.	O
udp_data	struct
.	O
bufsize	long
)	O
;	O
if	O
(	O
!	O
srv	pointer
->	O
v	union
.	O
udp_data	struct
.	O
buf	pointer
)	O
return	O
ENOMEM	int
;	O
}	O
FD_ZERO	O
(	O
&	O
rdset	struct
)	O
;	O
FD_SET	O
(	O
srv	pointer
->	O
fd	int
,	O
&	O
rdset	struct
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
rc	int
=	O
select	function
(	O
srv	pointer
->	O
fd	int
+	O
1	int
,	O
&	O
rdset	struct
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
{	O
if	O
(	O
srv	pointer
->	O
f_intr	pointer
&&	O
srv	pointer
->	O
f_intr	pointer
(	O
srv	pointer
->	O
data	pointer
,	O
call_data	pointer
)	O
)	O
break	O
;	O
else	O
continue	O
;	O
}	O
}	O
else	O
break	O
;	O
}	O
if	O
(	O
rc	int
==	O
-	O
1	int
)	O
return	O
errno	O
;	O
size	long
=	O
recvfrom	function
(	O
srv	pointer
->	O
fd	int
,	O
srv	pointer
->	O
v	union
.	O
udp_data	struct
.	O
buf	pointer
,	O
srv	pointer
->	O
v	union
.	O
udp_data	struct
.	O
bufsize	long
,	O
0	int
,	O
&	O
client	union
.	O
sa	pointer
,	O
&	O
salen	int
)	O
;	O
if	O
(	O
size	long
<	O
0	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_SERVER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s: recvfrom: %s"	pointer
,	O
IDENTSTR	O
(	O
srv	pointer
)	O
,	O
strerror	function
(	O
errno	O
)	O
)	O
)	O
;	O
return	O
MU_ERR_FAILURE	O
;	O
}	O
srv	pointer
->	O
v	union
.	O
udp_data	struct
.	O
rdsize	long
=	O
size	long
;	O
if	O
(	O
srv	pointer
->	O
acl	pointer
)	O
{	O
mu_acl_result_t	enum
res	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_acl_check_sockaddr	function
(	O
srv	pointer
->	O
acl	pointer
,	O
&	O
client	union
.	O
sa	pointer
,	O
size	long
,	O
&	O
res	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_debug	O
(	O
MU_DEBCAT_SERVER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s: mu_acl_check_sockaddr: %s\n"	pointer
,	O
IDENTSTR	O
(	O
srv	pointer
)	O
,	O
strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
if	O
(	O
res	pointer
==	O
mu_acl_result_deny	int
)	O
{	O
char	O
*	O
p	pointer
=	O
mu_sys_sockaddr_to_astr	function
(	O
&	O
client	union
.	O
sa	pointer
,	O
salen	int
)	O
;	O
mu_diag_output	function
(	O
MU_DIAG_INFO	O
,	O
"Denying connection from %s"	pointer
,	O
p	pointer
)	O
;	O
free	function
(	O
p	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
rc	int
=	O
srv	pointer
->	O
f_conn	pointer
(	O
-	O
1	int
,	O
&	O
client	union
.	O
sa	pointer
,	O
size	long
,	O
srv	pointer
->	O
data	pointer
,	O
call_data	pointer
,	O
srv	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
set_strerr_flt	function
(	O
void	O
)	O
{	O
mu_stream_t	pointer
flt	pointer
,	O
trans	array
[	O
2	int
]	O
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
mu_log_session_id	int
)	O
return	O
ENOSYS	int
;	O
rc	int
=	O
mu_stream_ioctl	function
(	O
mu_strerr	pointer
,	O
MU_IOCTL_TOPSTREAM	int
,	O
MU_IOCTL_OP_GET	int
,	O
trans	array
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
char	O
*	O
sid	pointer
;	O
char	O
*	O
argv	pointer
[	O
]	O
=	O
{	O
"inline-comment"	pointer
,	O
NULL	O
,	O
"-S"	pointer
,	O
NULL	O
}	O
;	O
rc	int
=	O
mu_sid	function
(	O
&	O
sid	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERR	O
,	O
"mu_sid"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
return	O
0	int
;	O
}	O
argv	pointer
[	O
1	int
]	O
=	O
sid	pointer
;	O
rc	int
=	O
mu_filter_create_args	function
(	O
&	O
flt	pointer
,	O
trans	array
[	O
0	int
]	O
,	O
"inline-comment"	pointer
,	O
3	int
,	O
(	O
const	O
char	O
*	O
*	O
)	O
argv	pointer
,	O
MU_FILTER_ENCODE	int
,	O
MU_STREAM_WRITE	int
)	O
;	O
free	function
(	O
sid	pointer
)	O
;	O
mu_stream_unref	function
(	O
trans	array
[	O
0	int
]	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_stream_set_buffer	function
(	O
flt	pointer
,	O
mu_buffer_line	int
,	O
0	int
)	O
;	O
trans	array
[	O
0	int
]	O
=	O
flt	pointer
;	O
trans	array
[	O
1	int
]	O
=	O
NULL	O
;	O
rc	int
=	O
mu_stream_ioctl	function
(	O
mu_strerr	pointer
,	O
MU_IOCTL_TOPSTREAM	int
,	O
MU_IOCTL_OP_SET	int
,	O
trans	array
)	O
;	O
mu_stream_unref	function
(	O
trans	array
[	O
0	int
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	function
(	O
_	O
(	O
"%s failed: %s"	pointer
)	O
,	O
"MU_IOCTL_SET_STREAM"	pointer
,	O
mu_stream_strerror	function
(	O
mu_strerr	pointer
,	O
rc	int
)	O
)	O
;	O
}	O
else	O
mu_error	function
(	O
_	O
(	O
"cannot create log filter stream: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
}	O
else	O
{	O
mu_error	function
(	O
_	O
(	O
"%s failed: %s"	pointer
)	O
,	O
"MU_IOCTL_GET_STREAM"	pointer
,	O
mu_stream_strerror	function
(	O
mu_strerr	pointer
,	O
rc	int
)	O
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
void	O
clr_strerr_flt	function
(	O
void	O
)	O
{	O
mu_stream_t	pointer
flt	pointer
,	O
trans	array
[	O
2	int
]	O
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_stream_ioctl	function
(	O
mu_strerr	pointer
,	O
MU_IOCTL_TOPSTREAM	int
,	O
MU_IOCTL_OP_GET	int
,	O
trans	array
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
flt	pointer
=	O
trans	array
[	O
0	int
]	O
;	O
rc	int
=	O
mu_stream_ioctl	function
(	O
flt	pointer
,	O
MU_IOCTL_TOPSTREAM	int
,	O
MU_IOCTL_OP_GET	int
,	O
trans	array
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_stream_unref	function
(	O
trans	array
[	O
0	int
]	O
)	O
;	O
rc	int
=	O
mu_stream_ioctl	function
(	O
mu_strerr	pointer
,	O
MU_IOCTL_TOPSTREAM	int
,	O
MU_IOCTL_OP_SET	int
,	O
trans	array
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
mu_stream_unref	function
(	O
flt	pointer
)	O
;	O
}	O
}	O
}	O
int	O
mu_ip_server_accept	function
(	O
mu_ip_server_t	pointer
srv	pointer
,	O
void	O
*	O
call_data	pointer
)	O
{	O
int	O
rc	int
;	O
int	O
flt	pointer
;	O
if	O
(	O
!	O
srv	pointer
||	O
srv	pointer
->	O
fd	int
==	O
-	O
1	int
)	O
return	O
EINVAL	int
;	O
flt	pointer
=	O
set_strerr_flt	function
(	O
)	O
;	O
switch	O
(	O
srv	pointer
->	O
type	int
)	O
{	O
case	O
MU_IP_UDP	int
:	O
rc	int
=	O
mu_ip_udp_accept	function
(	O
srv	pointer
,	O
call_data	pointer
)	O
;	O
break	O
;	O
case	O
MU_IP_TCP	int
:	O
rc	int
=	O
mu_ip_tcp_accept	function
(	O
srv	pointer
,	O
call_data	pointer
)	O
;	O
}	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"socket error on \"%s\": %s"	pointer
)	O
,	O
IDENTSTR	O
(	O
srv	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_ip_server_shutdown	function
(	O
srv	pointer
)	O
;	O
}	O
if	O
(	O
flt	pointer
==	O
0	int
)	O
clr_strerr_flt	function
(	O
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_ip_server_get_fd	function
(	O
mu_ip_server_t	pointer
srv	pointer
)	O
{	O
return	O
srv	pointer
->	O
fd	int
;	O
}	O
int	O
mu_udp_server_get_rdata	function
(	O
mu_ip_server_t	pointer
srv	pointer
,	O
char	O
*	O
*	O
pbuf	pointer
,	O
size_t	long
*	O
pbufsize	pointer
)	O
{	O
if	O
(	O
!	O
srv	pointer
||	O
srv	pointer
->	O
type	int
!=	O
MU_IP_UDP	int
)	O
return	O
EINVAL	int
;	O
*	O
pbuf	pointer
=	O
srv	pointer
->	O
v	union
.	O
udp_data	struct
.	O
buf	pointer
;	O
*	O
pbufsize	pointer
=	O
srv	pointer
->	O
v	union
.	O
udp_data	struct
.	O
rdsize	long
;	O
return	O
0	int
;	O
}	O
int	O
mu_ip_server_get_sockaddr	function
(	O
mu_ip_server_t	pointer
srv	pointer
,	O
struct	O
mu_sockaddr	struct
*	O
*	O
psa	pointer
)	O
{	O
if	O
(	O
!	O
srv	pointer
||	O
!	O
psa	pointer
)	O
return	O
EINVAL	int
;	O
return	O
mu_sockaddr_copy	function
(	O
psa	pointer
,	O
srv	pointer
->	O
addr	int
)	O
;	O
}	O
const	O
char	O
*	O
mu_ip_server_addrstr	function
(	O
mu_ip_server_t	pointer
srv	pointer
)	O
{	O
return	O
mu_sockaddr_str	function
(	O
srv	pointer
->	O
addr	int
)	O
;	O
}	O
