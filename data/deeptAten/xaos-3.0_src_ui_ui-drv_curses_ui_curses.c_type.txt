static	O
int	O
width	float
=	O
640	int
,	O
height	float
=	O
480	int
;	O
static	O
int	O
currentbuff	int
=	O
0	int
;	O
static	O
int	O
ncolors	int
=	O
0	int
;	O
static	O
int	O
buttons	int
,	O
mousex	int
,	O
mousey	int
,	O
keys	int
;	O
static	O
int	O
supportedon	array
[	O
NATTRS	int
]	O
,	O
supportedoff	array
[	O
NATTRS	int
]	O
;	O
static	O
char	O
*	O
buffers	array
[	O
4	int
]	O
;	O
static	O
int	O
palette	pointer
;	O
static	O
int	O
resized	int
,	O
iswaiting	int
;	O
static	O
int	O
fontwidth	int
;	O
static	O
int	O
rotation	int
;	O
static	O
jmp_buf	array
buf	array
;	O
static	O
void	O
curses_print	function
(	O
int	O
x	int
,	O
int	O
y	int
,	O
char	O
*	O
text	pointer
)	O
{	O
mvprintw	function
(	O
y	int
/	O
2	int
,	O
x	int
/	O
2	int
,	O
text	pointer
)	O
;	O
}	O
static	O
void	O
curses_refresh	function
(	O
void	O
)	O
{	O
refresh	function
(	O
)	O
;	O
}	O
const	O
char	O
*	O
tags	array
[	O
NATTRS	int
-	O
1	int
]	O
=	O
{	O
"<FONT COLOR=\"808080\">"	pointer
,	O
"<B><FONT COLOR=\"ffffff\">"	pointer
,	O
"<A HREF=A>"	pointer
,	O
"<B>"	pointer
,	O
}	O
;	O
const	O
char	O
*	O
endtags	array
[	O
NATTRS	int
-	O
1	int
]	O
=	O
{	O
"</FONT>"	pointer
,	O
"</FONT></B>"	pointer
,	O
"</A>"	pointer
,	O
"</B>"	pointer
,	O
}	O
;	O
char	O
*	O
writetxt	function
(	O
void	O
)	O
{	O
static	O
char	O
name	pointer
[	O
256	int
]	O
;	O
static	O
int	O
nimage	int
=	O
0	int
;	O
int	O
x	int
,	O
y	int
,	O
c	int
;	O
struct	O
stat	struct
sb	struct
;	O
FILE	struct
*	O
f	pointer
;	O
do	O
{	O
sprintf	function
(	O
name	pointer
,	O
"fract%i.txt"	pointer
,	O
nimage	int
++	O
)	O
;	O
}	O
while	O
(	O
stat	struct
(	O
name	pointer
,	O
&	O
sb	struct
)	O
!=	O
-	O
1	int
)	O
;	O
f	pointer
=	O
fopen	function
(	O
name	pointer
,	O
"wt"	pointer
)	O
;	O
nodelay	function
(	O
stdscr	pointer
,	O
FALSE	int
)	O
;	O
mvprintw	function
(	O
0	int
,	O
0	int
,	O
"Select attribute encoding:          "	pointer
)	O
;	O
mvprintw	function
(	O
1	int
,	O
0	int
,	O
"1 - for more and less               "	pointer
)	O
;	O
mvprintw	function
(	O
2	int
,	O
0	int
,	O
"2 - html                            "	pointer
)	O
;	O
mvprintw	function
(	O
3	int
,	O
0	int
,	O
"3 - ansi escape sequences           "	pointer
)	O
;	O
refresh	function
(	O
)	O
;	O
while	O
(	O
(	O
c	int
=	O
tolower	function
(	O
getch	function
(	O
)	O
)	O
)	O
<	O
'1'	O
||	O
c	int
>	O
'3'	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
'1'	O
:	O
for	O
(	O
y	int
=	O
0	int
;	O
y	int
<	O
height	float
;	O
y	int
++	O
)	O
{	O
for	O
(	O
x	int
=	O
0	int
;	O
x	int
<	O
width	float
;	O
x	int
++	O
)	O
{	O
if	O
(	O
buffers	array
[	O
3	int
]	O
[	O
y	int
*	O
width	float
+	O
x	int
]	O
==	O
BOLD	int
||	O
buffers	array
[	O
3	int
]	O
[	O
y	int
*	O
width	float
+	O
x	int
]	O
==	O
BOLDFONT	int
)	O
{	O
putc	function
(	O
buffers	array
[	O
2	int
]	O
[	O
y	int
*	O
width	float
+	O
x	int
]	O
,	O
f	pointer
)	O
;	O
if	O
(	O
buffers	array
[	O
2	int
]	O
[	O
y	int
*	O
width	float
+	O
x	int
]	O
!=	O
' '	O
)	O
{	O
putc	function
(	O
8	int
,	O
f	pointer
)	O
;	O
putc	function
(	O
buffers	array
[	O
2	int
]	O
[	O
y	int
*	O
width	float
+	O
x	int
]	O
,	O
f	pointer
)	O
;	O
}	O
}	O
else	O
putc	function
(	O
buffers	array
[	O
2	int
]	O
[	O
y	int
*	O
width	float
+	O
x	int
]	O
,	O
f	pointer
)	O
;	O
}	O
putc	function
(	O
'\n'	O
,	O
f	pointer
)	O
;	O
}	O
break	O
;	O
case	O
'3'	O
:	O
{	O
int	O
lastmode	int
=	O
NORMAL	int
,	O
mode	int
;	O
for	O
(	O
y	int
=	O
0	int
;	O
y	int
<	O
height	float
;	O
y	int
++	O
)	O
{	O
for	O
(	O
x	int
=	O
0	int
;	O
x	int
<	O
width	float
;	O
x	int
++	O
)	O
{	O
mode	int
=	O
buffers	array
[	O
3	int
]	O
[	O
y	int
*	O
width	float
+	O
x	int
]	O
;	O
if	O
(	O
mode	int
!=	O
lastmode	int
)	O
{	O
if	O
(	O
lastmode	int
!=	O
NORMAL	int
)	O
fprintf	function
(	O
f	pointer
,	O
"%c[0;10m"	pointer
,	O
27	int
)	O
;	O
switch	O
(	O
mode	int
)	O
{	O
case	O
BOLD	int
:	O
case	O
BOLDFONT	int
:	O
fprintf	function
(	O
f	pointer
,	O
"%c[1m"	pointer
,	O
27	int
)	O
;	O
break	O
;	O
case	O
REVERSE	int
:	O
fprintf	function
(	O
f	pointer
,	O
"%c[7m"	pointer
,	O
27	int
)	O
;	O
break	O
;	O
case	O
DIM	int
:	O
fprintf	function
(	O
f	pointer
,	O
"%c[8m"	pointer
,	O
27	int
)	O
;	O
break	O
;	O
}	O
lastmode	int
=	O
mode	int
;	O
}	O
putc	function
(	O
buffers	array
[	O
2	int
]	O
[	O
y	int
*	O
width	float
+	O
x	int
]	O
,	O
f	pointer
)	O
;	O
}	O
putc	function
(	O
'\n'	O
,	O
f	pointer
)	O
;	O
}	O
if	O
(	O
lastmode	int
!=	O
NORMAL	int
)	O
fprintf	function
(	O
f	pointer
,	O
"%c[0;10m"	pointer
,	O
27	int
)	O
;	O
}	O
break	O
;	O
case	O
'2'	O
:	O
{	O
int	O
lasttag	int
=	O
-	O
1	int
;	O
fprintf	function
(	O
f	pointer
,	O
"<HTML>\n <HEAD> <TITLE>Fractal generated by XaoS</TITLE>\n</HEAD>\n<BODY BGCOLOR=\"#000000\" TEXT=\"#dddddd\" LINK=\"#FFFFFF\">\n<FONT SIZE=2><PRE>\n"	pointer
)	O
;	O
for	O
(	O
y	int
=	O
0	int
;	O
y	int
<	O
height	float
;	O
y	int
++	O
)	O
{	O
for	O
(	O
x	int
=	O
0	int
;	O
x	int
<	O
width	float
;	O
x	int
++	O
)	O
{	O
char	O
cc	char
;	O
if	O
(	O
(	O
char	O
)	O
buffers	array
[	O
3	int
]	O
[	O
y	int
*	O
width	float
+	O
x	int
]	O
-	O
1	int
!=	O
lasttag	int
)	O
{	O
if	O
(	O
lasttag	int
>=	O
0	int
)	O
fprintf	function
(	O
f	pointer
,	O
"%s"	pointer
,	O
endtags	array
[	O
lasttag	int
]	O
)	O
;	O
lasttag	int
=	O
(	O
char	O
)	O
buffers	array
[	O
3	int
]	O
[	O
y	int
*	O
width	float
+	O
x	int
]	O
-	O
1	int
;	O
if	O
(	O
lasttag	int
>=	O
0	int
)	O
fprintf	function
(	O
f	pointer
,	O
"%s"	pointer
,	O
tags	array
[	O
lasttag	int
]	O
)	O
;	O
}	O
cc	char
=	O
buffers	array
[	O
2	int
]	O
[	O
y	int
*	O
width	float
+	O
x	int
]	O
;	O
switch	O
(	O
cc	char
)	O
{	O
case	O
'<'	O
:	O
fprintf	function
(	O
f	pointer
,	O
"&lt;"	pointer
)	O
;	O
break	O
;	O
case	O
'>'	O
:	O
fprintf	function
(	O
f	pointer
,	O
"&gt;"	pointer
)	O
;	O
break	O
;	O
case	O
'&'	O
:	O
fprintf	function
(	O
f	pointer
,	O
"&amp;"	pointer
)	O
;	O
break	O
;	O
default	O
:	O
putc	function
(	O
buffers	array
[	O
2	int
]	O
[	O
y	int
*	O
width	float
+	O
x	int
]	O
,	O
f	pointer
)	O
;	O
}	O
}	O
putc	function
(	O
'\n'	O
,	O
f	pointer
)	O
;	O
}	O
fprintf	function
(	O
f	pointer
,	O
"</PRE></FONT></BODY>\n</HTML>\n"	pointer
)	O
;	O
break	O
;	O
}	O
}	O
curses_print	function
(	O
0	int
,	O
0	int
,	O
"Saved.\n"	pointer
)	O
;	O
fclose	function
(	O
f	pointer
)	O
;	O
return	O
name	pointer
;	O
}	O
static	O
void	O
curses_display	function
(	O
void	O
)	O
{	O
int	O
x	int
,	O
y	int
;	O
int	O
nattrs	int
=	O
0	int
;	O
for	O
(	O
y	int
=	O
0	int
;	O
y	int
<	O
NATTRS	int
;	O
y	int
++	O
)	O
nattrs	int
+=	O
supported	array
[	O
y	int
]	O
;	O
for	O
(	O
y	int
=	O
0	int
;	O
y	int
<	O
height	float
;	O
y	int
++	O
)	O
{	O
for	O
(	O
x	int
=	O
0	int
;	O
x	int
<	O
width	float
;	O
x	int
++	O
)	O
{	O
int	O
c1	int
,	O
c2	int
,	O
c3	int
,	O
c4	int
,	O
c	int
=	O
0	int
;	O
int	O
pos	int
=	O
x	int
*	O
2	int
+	O
width	float
*	O
4	int
*	O
y	int
;	O
c1	int
=	O
(	O
unsigned	O
char	O
)	O
(	O
buffers	array
[	O
currentbuff	int
]	O
[	O
pos	int
+	O
1	int
]	O
)	O
;	O
c2	int
=	O
(	O
unsigned	O
char	O
)	O
(	O
buffers	array
[	O
currentbuff	int
]	O
[	O
pos	int
]	O
)	O
;	O
c3	int
=	O
(	O
unsigned	O
char	O
)	O
(	O
buffers	array
[	O
currentbuff	int
]	O
[	O
pos	int
+	O
1	int
+	O
width	float
+	O
width	float
]	O
)	O
;	O
c4	int
=	O
(	O
unsigned	O
char	O
)	O
(	O
buffers	array
[	O
currentbuff	int
]	O
[	O
pos	int
+	O
width	float
+	O
width	float
]	O
)	O
;	O
if	O
(	O
c1	int
)	O
c1	int
=	O
(	O
unsigned	O
char	O
)	O
(	O
(	O
int	O
)	O
c1	int
+	O
rotation	int
)	O
;	O
if	O
(	O
c2	int
)	O
c2	int
=	O
(	O
unsigned	O
char	O
)	O
(	O
(	O
int	O
)	O
c2	int
+	O
rotation	int
)	O
;	O
if	O
(	O
c3	int
)	O
c3	int
=	O
(	O
unsigned	O
char	O
)	O
(	O
(	O
int	O
)	O
c3	int
+	O
rotation	int
)	O
;	O
if	O
(	O
c4	int
)	O
c4	int
=	O
(	O
unsigned	O
char	O
)	O
(	O
(	O
int	O
)	O
c4	int
+	O
rotation	int
)	O
;	O
switch	O
(	O
palette	pointer
)	O
{	O
case	O
0	int
:	O
c	int
=	O
(	O
(	O
int	O
)	O
c1	int
&	O
15	int
)	O
*	O
16	int
*	O
16	int
*	O
16	int
+	O
(	O
(	O
int	O
)	O
c2	int
&	O
15	int
)	O
*	O
16	int
*	O
16	int
+	O
(	O
(	O
int	O
)	O
c3	int
&	O
15	int
)	O
*	O
16	int
+	O
(	O
(	O
int	O
)	O
c4	int
&	O
15	int
)	O
;	O
break	O
;	O
case	O
1	int
:	O
c	int
=	O
(	O
(	O
int	O
)	O
c1	int
&	O
1	int
)	O
*	O
16	int
*	O
16	int
*	O
16	int
*	O
15	int
+	O
(	O
(	O
int	O
)	O
c2	int
&	O
1	int
)	O
*	O
16	int
*	O
16	int
*	O
15	int
+	O
(	O
(	O
int	O
)	O
c3	int
&	O
1	int
)	O
*	O
16	int
*	O
15	int
+	O
(	O
(	O
int	O
)	O
c4	int
&	O
1	int
)	O
*	O
15	int
;	O
break	O
;	O
case	O
2	int
:	O
c	int
=	O
min	O
(	O
(	O
(	O
int	O
)	O
c1	int
%	O
5	int
)	O
*	O
16	int
*	O
16	int
*	O
16	int
*	O
4	int
,	O
16	int
*	O
16	int
*	O
16	int
*	O
15	int
)	O
+	O
min	O
(	O
(	O
(	O
int	O
)	O
c2	int
%	O
5	int
)	O
*	O
16	int
*	O
16	int
*	O
4	int
,	O
16	int
*	O
16	int
*	O
15	int
)	O
+	O
min	O
(	O
(	O
(	O
int	O
)	O
c3	int
%	O
5	int
)	O
*	O
16	int
*	O
4	int
,	O
16	int
*	O
15	int
)	O
+	O
min	O
(	O
(	O
(	O
int	O
)	O
c4	int
%	O
5	int
)	O
*	O
4	int
,	O
15	int
)	O
;	O
break	O
;	O
case	O
3	int
:	O
c	int
=	O
(	O
(	O
int	O
)	O
c1	int
&	O
~	O
15	int
)	O
*	O
16	int
*	O
16	int
+	O
(	O
(	O
int	O
)	O
c2	int
&	O
~	O
15	int
)	O
*	O
16	int
+	O
(	O
(	O
int	O
)	O
c3	int
&	O
~	O
15	int
)	O
+	O
(	O
(	O
int	O
)	O
c4	int
&	O
~	O
15	int
)	O
/	O
16	int
;	O
break	O
;	O
case	O
4	int
:	O
c	int
=	O
(	O
(	O
int	O
)	O
c1	int
!=	O
0	int
)	O
*	O
16	int
*	O
16	int
*	O
16	int
*	O
15	int
+	O
(	O
(	O
int	O
)	O
c2	int
!=	O
0	int
)	O
*	O
16	int
*	O
16	int
*	O
15	int
+	O
(	O
(	O
int	O
)	O
c3	int
!=	O
0	int
)	O
*	O
16	int
*	O
15	int
+	O
(	O
(	O
int	O
)	O
c4	int
!=	O
0	int
)	O
*	O
15	int
;	O
break	O
;	O
}	O
if	O
(	O
c	int
>=	O
65534	int
)	O
c	int
=	O
65534	int
;	O
if	O
(	O
c	int
<	O
0	int
)	O
c	int
=	O
0	int
;	O
c	int
=	O
table	pointer
[	O
c	int
]	O
;	O
if	O
(	O
nattrs	int
!=	O
1	int
)	O
{	O
switch	O
(	O
c	int
/	O
128	int
)	O
{	O
case	O
NORMAL	int
:	O
attrset	function
(	O
A_NORMAL	O
)	O
;	O
break	O
;	O
case	O
REVERSE	int
:	O
attrset	function
(	O
A_REVERSE	O
)	O
;	O
break	O
;	O
case	O
DIM	int
:	O
attrset	function
(	O
A_DIM	O
)	O
;	O
break	O
;	O
case	O
BOLD	int
:	O
attrset	function
(	O
A_BOLD	O
)	O
;	O
break	O
;	O
case	O
BOLDFONT	int
:	O
attrset	function
(	O
A_BOLD	O
)	O
;	O
break	O
;	O
}	O
mvaddch	function
(	O
y	int
,	O
x	int
,	O
c	int
%	O
128	int
)	O
;	O
}	O
buffers	array
[	O
2	int
]	O
[	O
x	int
+	O
y	int
*	O
width	float
]	O
=	O
c	int
%	O
128	int
;	O
buffers	array
[	O
3	int
]	O
[	O
x	int
+	O
y	int
*	O
width	float
]	O
=	O
c	int
/	O
128	int
;	O
}	O
if	O
(	O
nattrs	int
==	O
1	int
)	O
{	O
buffers	array
[	O
2	int
]	O
[	O
(	O
y	int
+	O
1	int
)	O
*	O
width	float
]	O
=	O
0	int
;	O
switch	O
(	O
buffers	array
[	O
3	int
]	O
[	O
0	int
]	O
)	O
{	O
case	O
NORMAL	int
:	O
attrset	function
(	O
A_NORMAL	O
)	O
;	O
break	O
;	O
case	O
REVERSE	int
:	O
attrset	function
(	O
A_REVERSE	O
)	O
;	O
break	O
;	O
case	O
DIM	int
:	O
attrset	function
(	O
A_DIM	O
)	O
;	O
break	O
;	O
case	O
BOLD	int
:	O
attrset	function
(	O
A_BOLD	O
)	O
;	O
break	O
;	O
case	O
BOLDFONT	int
:	O
attrset	function
(	O
A_BOLD	O
)	O
;	O
break	O
;	O
}	O
mvaddstr	function
(	O
y	int
,	O
0	int
,	O
buffers	array
[	O
2	int
]	O
+	O
y	int
*	O
width	float
)	O
;	O
}	O
}	O
attrset	function
(	O
A_NORMAL	O
)	O
;	O
move	function
(	O
mousey	int
/	O
2	int
,	O
mousex	int
/	O
2	int
)	O
;	O
}	O
static	O
int	O
curses_set_color	function
(	O
int	O
r	int
,	O
int	O
g	int
,	O
int	O
b	int
,	O
int	O
init	pointer
)	O
{	O
if	O
(	O
init	pointer
)	O
ncolors	int
=	O
0	int
;	O
if	O
(	O
ncolors	int
>=	O
256	int
)	O
return	O
(	O
-	O
1	int
)	O
;	O
rotation	int
=	O
0	int
;	O
return	O
(	O
ncolors	int
++	O
)	O
;	O
}	O
static	O
int	O
getkey	function
(	O
void	O
)	O
{	O
int	O
key	int
=	O
getch	function
(	O
)	O
;	O
if	O
(	O
mousey	int
<	O
0	int
)	O
mousey	int
=	O
0	int
;	O
if	O
(	O
mousey	int
>	O
2	int
*	O
height	float
-	O
1	int
)	O
mousey	int
=	O
2	int
*	O
height	float
-	O
1	int
;	O
if	O
(	O
mousex	int
<	O
0	int
)	O
mousex	int
=	O
0	int
;	O
if	O
(	O
mousex	int
>	O
2	int
*	O
width	float
-	O
1	int
)	O
mousex	int
=	O
2	int
*	O
width	float
-	O
1	int
;	O
move	function
(	O
mousey	int
/	O
2	int
,	O
mousex	int
/	O
2	int
)	O
;	O
refresh	function
(	O
)	O
;	O
if	O
(	O
resized	int
)	O
ui_resize	function
(	O
)	O
;	O
if	O
(	O
key	int
==	O
1	int
)	O
mousex	int
-=	O
2	int
;	O
else	O
if	O
(	O
key	int
==	O
4	int
)	O
mousex	int
+=	O
2	int
;	O
else	O
if	O
(	O
key	int
==	O
23	int
)	O
mousey	int
-=	O
2	int
;	O
else	O
if	O
(	O
key	int
==	O
24	int
)	O
mousey	int
+=	O
2	int
;	O
else	O
if	O
(	O
key	int
==	O
18	int
)	O
buttons	int
^=	O
BUTTON1	int
;	O
else	O
if	O
(	O
key	int
==	O
20	int
)	O
buttons	int
^=	O
BUTTON2	int
;	O
else	O
if	O
(	O
key	int
==	O
25	int
)	O
buttons	int
^=	O
BUTTON3	int
;	O
else	O
if	O
(	O
key	int
==	O
'E'	O
)	O
{	O
ui_tbreak	function
(	O
)	O
;	O
nodelay	function
(	O
stdscr	pointer
,	O
FALSE	int
)	O
;	O
echo	function
(	O
)	O
;	O
nocbreak	function
(	O
)	O
;	O
mvprintw	function
(	O
0	int
,	O
0	int
,	O
"Resolution is:%ix%i. Your coordinates sir:"	pointer
,	O
width	float
*	O
2	int
,	O
height	float
*	O
2	int
)	O
;	O
scanw	function
(	O
"%i,%i"	pointer
,	O
&	O
mousex	int
,	O
&	O
mousey	int
)	O
;	O
mvprintw	function
(	O
0	int
,	O
0	int
,	O
"Button 1:%i,2:%i,3:%i. Your button mask sir:"	pointer
,	O
BUTTON1	int
,	O
BUTTON2	int
,	O
BUTTON3	int
)	O
;	O
scanw	function
(	O
"%i,%i"	pointer
,	O
&	O
buttons	int
)	O
;	O
cbreak	function
(	O
)	O
;	O
noecho	function
(	O
)	O
;	O
nodelay	function
(	O
stdscr	pointer
,	O
TRUE	int
)	O
;	O
}	O
else	O
if	O
(	O
key	int
==	O
'G'	O
)	O
{	O
char	O
c	int
;	O
int	O
nones	int
=	O
0	int
;	O
ui_tbreak	function
(	O
)	O
;	O
nodelay	function
(	O
stdscr	pointer
,	O
FALSE	int
)	O
;	O
mvprintw	function
(	O
0	int
,	O
0	int
,	O
"May I use normal text?          "	pointer
)	O
;	O
refresh	function
(	O
)	O
;	O
while	O
(	O
(	O
c	int
=	O
tolower	function
(	O
getch	function
(	O
)	O
)	O
)	O
!=	O
'y'	O
&&	O
c	int
!=	O
'n'	O
)	O
;	O
nones	int
+=	O
(	O
supported	array
[	O
0	int
]	O
=	O
c	int
==	O
'y'	O
)	O
;	O
mvprintw	function
(	O
1	int
,	O
0	int
,	O
"May I use half bright(dim)?     "	pointer
)	O
;	O
refresh	function
(	O
)	O
;	O
while	O
(	O
(	O
c	int
=	O
tolower	function
(	O
getch	function
(	O
)	O
)	O
)	O
!=	O
'y'	O
&&	O
c	int
!=	O
'n'	O
)	O
;	O
nones	int
+=	O
(	O
supported	array
[	O
1	int
]	O
=	O
c	int
==	O
'y'	O
)	O
;	O
mvprintw	function
(	O
2	int
,	O
0	int
,	O
"May I use bold as double bright?"	pointer
)	O
;	O
refresh	function
(	O
)	O
;	O
while	O
(	O
(	O
c	int
=	O
tolower	function
(	O
getch	function
(	O
)	O
)	O
)	O
!=	O
'y'	O
&&	O
c	int
!=	O
'n'	O
)	O
;	O
nones	int
+=	O
(	O
supported	array
[	O
2	int
]	O
=	O
c	int
==	O
'y'	O
)	O
;	O
mvprintw	function
(	O
3	int
,	O
0	int
,	O
"May I use bold as bold font?    "	pointer
)	O
;	O
refresh	function
(	O
)	O
;	O
while	O
(	O
(	O
c	int
=	O
tolower	function
(	O
getch	function
(	O
)	O
)	O
)	O
!=	O
'y'	O
&&	O
c	int
!=	O
'n'	O
)	O
;	O
nones	int
+=	O
(	O
supported	array
[	O
4	int
]	O
=	O
c	int
==	O
'y'	O
)	O
;	O
mvprintw	function
(	O
4	int
,	O
0	int
,	O
"May I use reversed text?        "	pointer
)	O
;	O
refresh	function
(	O
)	O
;	O
while	O
(	O
(	O
c	int
=	O
tolower	function
(	O
getch	function
(	O
)	O
)	O
)	O
!=	O
'y'	O
&&	O
c	int
!=	O
'n'	O
)	O
;	O
nones	int
+=	O
(	O
supported	array
[	O
3	int
]	O
=	O
c	int
==	O
'y'	O
)	O
;	O
mvprintw	function
(	O
5	int
,	O
0	int
,	O
"1=8x16font 2=8x8font            "	pointer
)	O
;	O
refresh	function
(	O
)	O
;	O
while	O
(	O
(	O
c	int
=	O
tolower	function
(	O
getch	function
(	O
)	O
)	O
)	O
!=	O
'1'	O
&&	O
c	int
!=	O
'2'	O
)	O
;	O
if	O
(	O
c	int
==	O
'1'	O
)	O
setheight	function
(	O
16	int
)	O
;	O
else	O
setheight	function
(	O
8	int
)	O
;	O
if	O
(	O
!	O
nones	int
)	O
supported	array
[	O
0	int
]	O
=	O
1	int
;	O
if	O
(	O
supported	array
[	O
2	int
]	O
&&	O
supported	array
[	O
4	int
]	O
)	O
supported	array
[	O
4	int
]	O
=	O
0	int
;	O
mvprintw	function
(	O
6	int
,	O
0	int
,	O
"rendering aproximation tables   "	pointer
)	O
;	O
refresh	function
(	O
)	O
;	O
mktable	function
(	O
)	O
;	O
curses_display	function
(	O
)	O
;	O
nodelay	function
(	O
stdscr	pointer
,	O
TRUE	int
)	O
;	O
refresh	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
key	int
==	O
KEY_LEFT	int
)	O
keys	int
^=	O
1	int
;	O
else	O
if	O
(	O
key	int
==	O
KEY_RIGHT	int
)	O
keys	int
^=	O
2	int
;	O
else	O
if	O
(	O
key	int
==	O
KEY_UP	int
)	O
keys	int
^=	O
4	int
;	O
else	O
if	O
(	O
key	int
==	O
KEY_DOWN	int
)	O
keys	int
^=	O
8	int
;	O
else	O
if	O
(	O
key	int
==	O
12	int
)	O
{	O
wclear	function
(	O
stdscr	pointer
)	O
;	O
refresh	function
(	O
)	O
;	O
redrawwin	function
(	O
stdscr	pointer
)	O
;	O
curses_display	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
tolower	function
(	O
key	int
)	O
==	O
'T'	O
)	O
writetxt	function
(	O
)	O
;	O
else	O
if	O
(	O
tolower	function
(	O
key	int
)	O
==	O
'p'	O
)	O
{	O
palette	pointer
=	O
(	O
palette	pointer
+	O
1	int
)	O
%	O
NPALETTES	O
;	O
curses_display	function
(	O
)	O
;	O
}	O
else	O
return	O
(	O
key	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
void	O
curses_clear	function
(	O
void	O
)	O
{	O
wclear	function
(	O
stdscr	pointer
)	O
;	O
}	O
static	O
void	O
curses_flip_buffers	function
(	O
void	O
)	O
{	O
currentbuff	int
^=	O
1	int
;	O
}	O
void	O
curses_free	function
(	O
char	O
*	O
b1	pointer
,	O
char	O
*	O
b2	pointer
)	O
{	O
free	function
(	O
buffers	array
[	O
0	int
]	O
)	O
;	O
free	function
(	O
buffers	array
[	O
1	int
]	O
)	O
;	O
free	function
(	O
buffers	array
[	O
2	int
]	O
)	O
;	O
free	function
(	O
buffers	array
[	O
3	int
]	O
)	O
;	O
}	O
int	O
curses_alloc	function
(	O
char	O
*	O
*	O
b1	pointer
,	O
char	O
*	O
*	O
b2	pointer
)	O
{	O
buffers	array
[	O
0	int
]	O
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
width	float
*	O
height	float
*	O
4	int
)	O
;	O
buffers	array
[	O
1	int
]	O
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
width	float
*	O
height	float
*	O
4	int
)	O
;	O
buffers	array
[	O
2	int
]	O
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
width	float
*	O
height	float
+	O
1	int
)	O
;	O
buffers	array
[	O
3	int
]	O
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
width	float
*	O
height	float
+	O
1	int
)	O
;	O
currentbuff	int
=	O
0	int
;	O
*	O
b1	pointer
=	O
buffers	array
[	O
0	int
]	O
;	O
*	O
b2	pointer
=	O
buffers	array
[	O
1	int
]	O
;	O
return	O
width	float
*	O
2	int
;	O
}	O
static	O
void	O
curses_processevents	function
(	O
volatile	O
int	O
wait	int
,	O
volatile	O
int	O
*	O
x	int
,	O
volatile	O
int	O
*	O
y	int
,	O
volatile	O
int	O
*	O
b	int
,	O
volatile	O
int	O
*	O
k	pointer
)	O
{	O
volatile	O
int	O
c	int
;	O
if	O
(	O
wait	int
)	O
{	O
nodelay	function
(	O
stdscr	pointer
,	O
FALSE	int
)	O
;	O
setjmp	function
(	O
buf	array
)	O
;	O
iswaiting	int
=	O
1	int
;	O
if	O
(	O
resized	int
)	O
ui_resize	function
(	O
)	O
;	O
}	O
else	O
nodelay	function
(	O
stdscr	pointer
,	O
TRUE	int
)	O
;	O
while	O
(	O
(	O
c	int
=	O
getkey	function
(	O
)	O
)	O
!=	O
ERR	O
)	O
{	O
if	O
(	O
wait	int
)	O
nodelay	function
(	O
stdscr	pointer
,	O
TRUE	int
)	O
,	O
wait	int
=	O
0	int
,	O
iswaiting	int
=	O
0	int
;	O
if	O
(	O
ui_key	function
(	O
c	int
)	O
==	O
2	int
)	O
return	O
;	O
}	O
if	O
(	O
wait	int
)	O
nodelay	function
(	O
stdscr	pointer
,	O
TRUE	int
)	O
,	O
wait	int
=	O
0	int
;	O
*	O
x	int
=	O
0	int
,	O
*	O
y	int
=	O
0	int
,	O
*	O
b	int
=	O
0	int
,	O
*	O
k	pointer
=	O
0	int
;	O
*	O
x	int
=	O
mousex	int
;	O
*	O
y	int
=	O
mousey	int
;	O
*	O
b	int
=	O
buttons	int
;	O
*	O
k	pointer
=	O
keys	int
;	O
}	O
static	O
void	O
curses_getmouse	function
(	O
int	O
*	O
x	int
,	O
int	O
*	O
y	int
,	O
int	O
*	O
b	int
)	O
{	O
*	O
x	int
=	O
0	int
,	O
*	O
y	int
=	O
0	int
,	O
*	O
b	int
=	O
0	int
;	O
*	O
x	int
=	O
mousex	int
;	O
*	O
y	int
=	O
mousey	int
;	O
*	O
b	int
=	O
buttons	int
;	O
}	O
void	O
handler	function
(	O
int	O
i	int
)	O
{	O
resized	int
=	O
1	int
;	O
if	O
(	O
iswaiting	int
)	O
longjmp	function
(	O
buf	array
,	O
1	int
)	O
;	O
}	O
int	O
curses_init	function
(	O
void	O
)	O
{	O
fflush	function
(	O
stdout	pointer
)	O
;	O
if	O
(	O
initscr	function
(	O
)	O
==	O
NULL	O
)	O
return	O
0	int
;	O
if	O
(	O
table	pointer
==	O
NULL	O
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NATTRS	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
supportedon	array
[	O
i	int
]	O
)	O
supported	array
[	O
i	int
]	O
=	O
1	int
;	O
else	O
if	O
(	O
supportedoff	array
[	O
i	int
]	O
)	O
supported	array
[	O
i	int
]	O
=	O
0	int
;	O
else	O
{	O
int	O
a	int
=	O
0	int
;	O
if	O
(	O
i	int
==	O
NORMAL	int
)	O
continue	O
;	O
switch	O
(	O
i	int
)	O
{	O
case	O
DIM	int
:	O
a	int
=	O
A_DIM	O
;	O
break	O
;	O
case	O
BOLD	int
:	O
a	int
=	O
A_BOLD	O
;	O
break	O
;	O
case	O
BOLDFONT	int
:	O
a	int
=	O
A_BOLD	O
;	O
break	O
;	O
case	O
REVERSE	int
:	O
a	int
=	O
A_REVERSE	O
;	O
break	O
;	O
}	O
if	O
(	O
!	O
(	O
a	int
)	O
)	O
supported	array
[	O
i	int
]	O
=	O
0	int
;	O
}	O
}	O
if	O
(	O
fontwidth	int
==	O
8	int
)	O
setheight	function
(	O
8	int
)	O
;	O
if	O
(	O
fontwidth	int
==	O
16	int
)	O
setheight	function
(	O
16	int
)	O
;	O
printf	function
(	O
"Please wait..rendering aproximation table.."	pointer
)	O
;	O
mktable	function
(	O
)	O
;	O
printf	function
(	O
"ok\n"	pointer
)	O
;	O
}	O
cbreak	function
(	O
)	O
;	O
nodelay	function
(	O
stdscr	pointer
,	O
TRUE	int
)	O
;	O
noecho	function
(	O
)	O
;	O
nonl	function
(	O
)	O
;	O
intrflush	function
(	O
stdscr	pointer
,	O
FALSE	int
)	O
;	O
keypad	function
(	O
stdscr	pointer
,	O
TRUE	int
)	O
;	O
signal	function
(	O
SIGFPE	int
,	O
SIG_IGN	O
)	O
;	O
signal	function
(	O
SIGWINCH	int
,	O
handler	function
)	O
;	O
return	O
(	O
1	int
)	O
;	O
}	O
static	O
void	O
curses_uninitialise	function
(	O
void	O
)	O
{	O
wclear	function
(	O
stdscr	pointer
)	O
;	O
intrflush	function
(	O
stdscr	pointer
,	O
TRUE	int
)	O
;	O
keypad	function
(	O
stdscr	pointer
,	O
FALSE	int
)	O
;	O
nodelay	function
(	O
stdscr	pointer
,	O
FALSE	int
)	O
;	O
signal	function
(	O
SIGWINCH	int
,	O
SIG_IGN	O
)	O
;	O
nocbreak	function
(	O
)	O
;	O
echo	function
(	O
)	O
;	O
nl	function
(	O
)	O
;	O
refresh	function
(	O
)	O
;	O
endwin	function
(	O
)	O
;	O
}	O
static	O
void	O
curses_get_size	function
(	O
int	O
*	O
wi	pointer
,	O
int	O
*	O
he	pointer
)	O
{	O
if	O
(	O
resized	int
)	O
curses_uninitialise	function
(	O
)	O
,	O
curses_init	function
(	O
)	O
,	O
resized	int
=	O
0	int
;	O
*	O
wi	pointer
=	O
stdscr	pointer
->	O
_maxx	short
;	O
*	O
he	pointer
=	O
stdscr	pointer
->	O
_maxy	short
;	O
width	float
=	O
*	O
wi	pointer
;	O
height	float
=	O
*	O
he	pointer
;	O
*	O
wi	pointer
*=	O
2	int
;	O
*	O
he	pointer
*=	O
2	int
;	O
}	O
static	O
char	O
*	O
helptext	array
[	O
]	O
=	O
{	O
"(N)CURSES DRIVER VERSION 1.1           "	pointer
,	O
"============================           "	pointer
,	O
" This driver used to be one of the     "	pointer
,	O
" most powerfull drivers for XaoS       "	pointer
,	O
" It supports all XaoS features:        "	pointer
,	O
"  o 256 colors                         "	pointer
,	O
"  o smooth animations                  "	pointer
,	O
"  o much more                          "	pointer
,	O
" But currently it is obsoletted by new "	pointer
,	O
" AA driver. If you like text mode,     "	pointer
,	O
" please update to AA driver. You should"	pointer
,	O
" download AA-lib from AA-project       "	pointer
,	O
" homepage at http://www.ta.jcu.cz/aa   "	pointer
,	O
" Recompiling of XaoS with AAlib        "	pointer
,	O
" installed will automatically enable   "	pointer
,	O
" AA driver (if it is not already in -  "	pointer
,	O
" try xaos -driver aa)                  "	pointer
,	O
"                                       "	pointer
,	O
" This driver was left in XaoS because  "	pointer
,	O
" there is still many user's without    "	pointer
,	O
" AAlib installed, but once it will be  "	pointer
,	O
" removed. It is no longer maitained and"	pointer
,	O
" updated so it does not conforms latest"	pointer
,	O
" XaoS driver coding standards (Xdcs)   "	pointer
,	O
" and should not be fully functional    "	pointer
,	O
" in recent releases of XaoS.           "	pointer
,	O
"                                       "	pointer
,	O
" Use it at your own's risk!            "	pointer
,	O
"                                       "	pointer
,	O
" And has also many extended features   "	pointer
,	O
"  o Doubling of resolution with        "	pointer
,	O
"     anti-aliasing                     "	pointer
,	O
"  o Mouse emulation                    "	pointer
,	O
"     because mouse is still not        "	pointer
,	O
"     standard in terminals XaoS uses   "	pointer
,	O
"     its emulation with is yet more    "	pointer
,	O
"     powerfull than normal mouse.      "	pointer
,	O
"     Press shift+'E' to try it!        "	pointer
,	O
"     Also you may move mouse by keys:  "	pointer
,	O
"      C-w = up                         "	pointer
,	O
"      C-a = left                       "	pointer
,	O
"      C-d = right                      "	pointer
,	O
"      C-x = down                       "	pointer
,	O
"      C-r = button1 (first pres presses"	pointer
,	O
"             button, second releases it"	pointer
,	O
"             Same behaviour is used for"	pointer
,	O
"             arrows keys, because text "	pointer
,	O
"             terminals does not sends  "	pointer
,	O
"             informations about        "	pointer
,	O
"             releasing of keys.)       "	pointer
,	O
"      C-t = button2                    "	pointer
,	O
"      C-y = button3                    "	pointer
,	O
"  o Special handling of attributes.    "	pointer
,	O
"     can be configured by shift+'G'    "	pointer
,	O
"     It will ask you following         "	pointer
,	O
"     questions:                        "	pointer
,	O
"     May I use normal text             "	pointer
,	O
"      Many terminals supports various  "	pointer
,	O
"      attributes. Using this questions "	pointer
,	O
"      you may configure XaoS to use    "	pointer
,	O
"      them. Normal text is text w/o any"	pointer
,	O
"      special attributes.              "	pointer
,	O
"     May I use half bright(dim)        "	pointer
,	O
"      Some terminals supports          "	pointer
,	O
"      atribute dim for half bright.    "	pointer
,	O
"      this is untested, because no     "	pointer
,	O
"      xterm nor linux console does this"	pointer
,	O
"     May I use bold as double bright   "	pointer
,	O
"      some terminals(like linux console"	pointer
,	O
"      makes bold character by lighter  "	pointer
,	O
"      color.                           "	pointer
,	O
"     May I use bold as bold font?      "	pointer
,	O
"      other terminals uses another font"	pointer
,	O
"      for bold characters(like rvxt)   "	pointer
,	O
"     May I use reversed text           "	pointer
,	O
"      This produces good results just  "	pointer
,	O
"      really hi-res terminals(more than"	pointer
,	O
"      100x40) Nice with fullscreen     "	pointer
,	O
"      xterm and tiny font.             "	pointer
,	O
"     1=8x16font 2=8x8font              "	pointer
,	O
"      most terminals uses 8x16 font.   "	pointer
,	O
"      But some terminals with square   "	pointer
,	O
"      letters(ie vga with 80x50 mode or"	pointer
,	O
"      xterm with tiny font) uses 8x8   "	pointer
,	O
"      one. You may try both of them and"	pointer
,	O
"      use better one.                  "	pointer
,	O
"  o Mouse support                      "	pointer
,	O
"     driver also supports mouse        "	pointer
,	O
"     interface included in ncurses.    "	pointer
,	O
"     but it is bit buggy, and have some"	pointer
,	O
"     limitations.                      "	pointer
,	O
"  o Ascii-art images saving.           "	pointer
,	O
"     normally XaoS does not support    "	pointer
,	O
"     saving of ascii arted images and  "	pointer
,	O
"     uses poor gif file instead.       "	pointer
,	O
"     press shift+'T' to save images.   "	pointer
,	O
"  o Uses 65535 bytes long lookup table "	pointer
,	O
"     to make ultra fast aproximation   "	pointer
,	O
"     by letters                        "	pointer
,	O
"  o Specialized palettes for text mode "	pointer
,	O
"  o Special top speed aproximation     "	pointer
,	O
"     table renderer that takes         "	pointer
,	O
"     advantage of attributes and       "	pointer
,	O
"     supports dithering, antialiasing  "	pointer
,	O
"     8x8 or 8x16 vga font.             "	pointer
,	O
"  o Handles resizing on the fly        "	pointer
,	O
"                                       "	pointer
,	O
"                                       "	pointer
,	O
" NCURSES driver was done by Jan Hubicka"	pointer
,	O
"              (C) 1997                 "	pointer
,	O
}	O
;	O
static	O
struct	O
params	struct
params	struct
[	O
]	O
=	O
{	O
{	O
"-normal"	pointer
,	O
P_SWITCH	int
,	O
supportedon	array
+	O
NORMAL	int
,	O
"Enable use of normal text"	pointer
}	O
,	O
{	O
"-nonormal"	pointer
,	O
P_SWITCH	int
,	O
supportedoff	array
+	O
NORMAL	int
,	O
"Disable use of normal text"	pointer
}	O
,	O
{	O
"-dim"	pointer
,	O
P_SWITCH	int
,	O
supportedon	array
+	O
DIM	int
,	O
"Enable use of dim attribute(hlaf bright)"	pointer
}	O
,	O
{	O
"-nodim"	pointer
,	O
P_SWITCH	int
,	O
supportedon	array
+	O
DIM	int
,	O
"Disable use of dim attribute(hlaf bright)"	pointer
}	O
,	O
{	O
"-bold"	pointer
,	O
P_SWITCH	int
,	O
supportedon	array
+	O
BOLD	int
,	O
"Enable use of bold attribute(double bright)"	pointer
}	O
,	O
{	O
"-nobold"	pointer
,	O
P_SWITCH	int
,	O
supportedon	array
+	O
BOLD	int
,	O
"Disable use of bold attribute(double bright)"	pointer
}	O
,	O
{	O
"-boldfont"	pointer
,	O
P_SWITCH	int
,	O
supportedon	array
+	O
BOLDFONT	int
,	O
"Enable use of bold attribute(bold font)"	pointer
}	O
,	O
{	O
"-noboldfont"	pointer
,	O
P_SWITCH	int
,	O
supportedon	array
+	O
BOLDFONT	int
,	O
"Disable use of bold attribute(bold font)"	pointer
}	O
,	O
{	O
"-reverse"	pointer
,	O
P_SWITCH	int
,	O
supportedon	array
+	O
REVERSE	int
,	O
"Enable use of reversed text"	pointer
}	O
,	O
{	O
"-noreverse"	pointer
,	O
P_SWITCH	int
,	O
supportedoff	array
+	O
REVERSE	int
,	O
"Disable use of reversed text"	pointer
}	O
,	O
{	O
"-fontheight"	pointer
,	O
P_NUMBER	int
,	O
&	O
fontwidth	int
,	O
"Set font height(8 or 16)"	pointer
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
NULL	O
}	O
}	O
;	O
struct	O
ui_driver	struct
curses_driver	struct
=	O
{	O
"curses"	pointer
,	O
curses_init	function
,	O
curses_get_size	function
,	O
(	O
void	O
(	O
*	O
)	O
(	O
int	O
,	O
int	O
*	O
,	O
int	O
*	O
,	O
int	O
*	O
,	O
int	O
*	O
)	O
)	O
curses_processevents	function
,	O
curses_getmouse	function
,	O
curses_uninitialise	function
,	O
curses_set_color	function
,	O
NULL	O
,	O
curses_print	function
,	O
curses_display	function
,	O
curses_alloc	function
,	O
curses_free	function
,	O
curses_flip_buffers	function
,	O
curses_clear	function
,	O
NULL	O
,	O
NULL	O
,	O
curses_refresh	function
,	O
2	int
,	O
2	int
,	O
helptext	array
,	O
UGLYTEXTSIZE	O
,	O
params	struct
,	O
FULLSCREEN	int
|	O
UPDATE_AFTER_RESIZE	int
|	O
PALETTE_ROTATION	int
|	O
PALETTE_REDISPLAYS	int
,	O
0.0	int
,	O
0.0	int
,	O
0	int
,	O
0	int
,	O
UI_C256	int
,	O
1	int
,	O
254	int
,	O
253	int
}	O
;	O
