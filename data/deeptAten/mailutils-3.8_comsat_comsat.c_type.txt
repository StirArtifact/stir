typedef	O
struct	O
utmpx	struct
UTMP	struct
;	O
const	O
char	O
*	O
program_version	pointer
=	O
"comsatd ("	pointer
PACKAGE_STRING	pointer
")"	pointer
;	O
char	O
*	O
test_mode	pointer
;	O
char	O
*	O
biffrc	pointer
=	O
BIFF_RC	pointer
;	O
mu_m_server_t	pointer
server	int
;	O
static	O
void	O
set_inetd_mode	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
mu_m_server_set_mode	function
(	O
server	int
,	O
MODE_INTERACTIVE	int
)	O
;	O
}	O
static	O
void	O
set_test_mode	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
if	O
(	O
arg	pointer
)	O
{	O
if	O
(	O
arg	pointer
[	O
0	int
]	O
!=	O
'/'	O
)	O
{	O
test_mode	pointer
=	O
mu_make_file_name	O
(	O
mu_getcwd	function
(	O
)	O
,	O
arg	pointer
)	O
;	O
if	O
(	O
!	O
test_mode	pointer
)	O
mu_alloc_die	function
(	O
)	O
;	O
}	O
else	O
test_mode	pointer
=	O
mu_strdup	function
(	O
arg	pointer
)	O
;	O
}	O
else	O
test_mode	pointer
=	O
mu_strdup	function
(	O
"/dev/tty"	pointer
)	O
;	O
}	O
static	O
void	O
set_daemon_mode	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
mu_m_server_set_mode	function
(	O
server	int
,	O
MODE_DAEMON	int
)	O
;	O
if	O
(	O
arg	pointer
)	O
{	O
size_t	long
max_children	long
;	O
char	O
*	O
errmsg	pointer
;	O
int	O
rc	int
=	O
mu_str_to_c	function
(	O
arg	pointer
,	O
mu_c_size	int
,	O
&	O
max_children	long
,	O
&	O
errmsg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_parseopt_error	function
(	O
po	pointer
,	O
_	O
(	O
"%s: bad argument"	pointer
)	O
,	O
arg	pointer
)	O
;	O
exit	function
(	O
po	pointer
->	O
po_exit_error	int
)	O
;	O
}	O
mu_m_server_set_max_children	function
(	O
server	int
,	O
max_children	long
)	O
;	O
}	O
}	O
static	O
void	O
set_foreground	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
mu_m_server_set_foreground	function
(	O
server	int
,	O
1	int
)	O
;	O
}	O
static	O
struct	O
mu_option	struct
comsat_options	array
[	O
]	O
=	O
{	O
{	O
"test"	pointer
,	O
't'	O
,	O
N_	O
(	O
"FILE"	pointer
)	O
,	O
MU_OPTION_ARG_OPTIONAL	int
,	O
N_	O
(	O
"run in test mode; use FILE as tty (default: /dev/tty)"	pointer
)	O
,	O
mu_c_string	int
,	O
&	O
test_mode	pointer
,	O
set_test_mode	function
}	O
,	O
{	O
"foreground"	pointer
,	O
0	int
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"remain in foreground"	pointer
)	O
,	O
mu_c_bool	int
,	O
NULL	O
,	O
set_foreground	function
}	O
,	O
{	O
"inetd"	pointer
,	O
'i'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"run in inetd mode"	pointer
)	O
,	O
mu_c_bool	int
,	O
NULL	O
,	O
set_inetd_mode	function
}	O
,	O
{	O
"daemon"	pointer
,	O
'd'	O
,	O
N_	O
(	O
"NUMBER"	pointer
)	O
,	O
MU_OPTION_ARG_OPTIONAL	int
,	O
N_	O
(	O
"runs in daemon mode with a maximum of NUMBER children"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
set_daemon_mode	function
}	O
,	O
{	O
"file"	pointer
,	O
'f'	O
,	O
N_	O
(	O
"FILE"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"read FILE instead of .biffrc"	pointer
)	O
,	O
mu_c_string	int
,	O
&	O
biffrc	pointer
}	O
,	O
MU_OPTION_END	O
}	O
,	O
*	O
options	array
[	O
]	O
=	O
{	O
comsat_options	array
,	O
NULL	O
}	O
;	O
int	O
maxlines	int
=	O
5	int
;	O
char	O
*	O
hostname	pointer
;	O
const	O
char	O
*	O
username	pointer
;	O
int	O
require_tty	int
;	O
int	O
biffrc_errors	int
=	O
BIFFRC_ERRORS_TO_TTY	int
|	O
BIFFRC_ERRORS_TO_ERR	int
;	O
static	O
void	O
comsat_init	function
(	O
void	O
)	O
;	O
static	O
int	O
comsat_main	function
(	O
int	O
fd	int
)	O
;	O
static	O
void	O
notify_user	function
(	O
const	O
char	O
*	O
user	pointer
,	O
const	O
char	O
*	O
device	pointer
,	O
const	O
char	O
*	O
path	pointer
,	O
mu_message_qid_t	pointer
qid	pointer
)	O
;	O
static	O
int	O
find_user	function
(	O
const	O
char	O
*	O
name	pointer
,	O
char	O
*	O
tty	pointer
)	O
;	O
static	O
char	O
*	O
mailbox_path	function
(	O
const	O
char	O
*	O
user	pointer
)	O
;	O
static	O
int	O
change_user	function
(	O
const	O
char	O
*	O
user	pointer
)	O
;	O
static	O
int	O
reload	int
=	O
0	int
;	O
static	O
int	O
biffrc_error_ctl	function
(	O
mu_config_value_t	struct
*	O
val	array
,	O
int	O
flag	int
)	O
{	O
int	O
res	pointer
;	O
if	O
(	O
mu_cfg_assert_value_type	function
(	O
val	array
,	O
MU_CFG_STRING	int
)	O
)	O
return	O
1	int
;	O
if	O
(	O
mu_str_to_c	function
(	O
val	array
->	O
v	union
.	O
string	pointer
,	O
mu_c_bool	int
,	O
&	O
res	pointer
,	O
NULL	O
)	O
)	O
mu_diag_output	function
(	O
MU_LOG_ERROR	int
,	O
_	O
(	O
"not a boolean"	pointer
)	O
)	O
;	O
else	O
if	O
(	O
res	pointer
)	O
biffrc_errors	int
|=	O
flag	int
;	O
else	O
biffrc_errors	int
&=	O
~	O
flag	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
cb_biffrc_errors_to_tty	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	array
)	O
{	O
return	O
biffrc_error_ctl	function
(	O
val	array
,	O
BIFFRC_ERRORS_TO_TTY	int
)	O
;	O
}	O
static	O
int	O
cb_biffrc_errors_to_err	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	array
)	O
{	O
return	O
biffrc_error_ctl	function
(	O
val	array
,	O
BIFFRC_ERRORS_TO_ERR	int
)	O
;	O
}	O
struct	O
mu_cfg_param	struct
comsat_cfg_param	array
[	O
]	O
=	O
{	O
{	O
"allow-biffrc"	pointer
,	O
mu_c_bool	int
,	O
&	O
allow_biffrc	int
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Read .biffrc file from the user home directory."	pointer
)	O
}	O
,	O
{	O
"require-tty"	pointer
,	O
mu_c_bool	int
,	O
&	O
require_tty	int
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Notify only if the user is logged on one of the ttys."	pointer
)	O
}	O
,	O
{	O
"biffrc-errors-to-tty"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_biffrc_errors_to_tty	function
,	O
N_	O
(	O
"Send biffrc errors to user's tty."	pointer
)	O
,	O
N_	O
(	O
"arg: bool"	pointer
)	O
}	O
,	O
{	O
"biffrc-errors-to-err"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_biffrc_errors_to_err	function
,	O
N_	O
(	O
"Send biffrc errors to Mailutils error output."	pointer
)	O
,	O
N_	O
(	O
"arg: bool"	pointer
)	O
}	O
,	O
{	O
"max-lines"	pointer
,	O
mu_c_int	int
,	O
&	O
maxlines	int
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Maximum number of message body lines to be output."	pointer
)	O
}	O
,	O
{	O
"max-requests"	pointer
,	O
mu_c_uint	int
,	O
&	O
maxrequests	int
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Maximum number of incoming requests per request control interval."	pointer
)	O
}	O
,	O
{	O
"request-control-interval"	pointer
,	O
mu_c_time	int
,	O
&	O
request_control_interval	long
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Set control interval."	pointer
)	O
}	O
,	O
{	O
"overflow-control-interval"	pointer
,	O
mu_c_time	int
,	O
&	O
overflow_control_interval	long
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Set overflow control interval."	pointer
)	O
}	O
,	O
{	O
"overflow-delay-time"	pointer
,	O
mu_c_time	int
,	O
&	O
overflow_delay_time	long
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Time to sleep after the first overflow occurs."	pointer
)	O
}	O
,	O
{	O
".server"	pointer
,	O
mu_cfg_section	int
,	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Server configuration."	pointer
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
char	O
const	O
*	O
alt_args	array
[	O
]	O
=	O
{	O
N_	O
(	O
"--test MBOX-URL MSG-QID"	pointer
)	O
,	O
NULL	O
}	O
;	O
static	O
struct	O
mu_cli_setup	struct
cli	struct
=	O
{	O
.	O
optv	pointer
=	O
options	array
,	O
.	O
cfg	pointer
=	O
comsat_cfg_param	array
,	O
.	O
prog_doc	pointer
=	O
N_	O
(	O
"GNU comsatd -- notify users about incoming mail"	pointer
)	O
,	O
.	O
prog_alt_args	pointer
=	O
alt_args	array
,	O
.	O
server	int
=	O
1	int
}	O
;	O
static	O
char	O
*	O
capa	pointer
[	O
]	O
=	O
{	O
"debug"	pointer
,	O
"logging"	pointer
,	O
"mailbox"	pointer
,	O
"locking"	pointer
,	O
NULL	O
}	O
;	O
static	O
RETSIGTYPE	void
sig_hup	function
(	O
int	O
sig	int
)	O
{	O
mu_m_server_stop	function
(	O
1	int
)	O
;	O
reload	int
=	O
1	int
;	O
}	O
void	O
comsat_init	function
(	O
)	O
{	O
int	O
rc	int
;	O
mu_register_all_mbox_formats	O
(	O
)	O
;	O
rc	int
=	O
mu_get_host_name	function
(	O
&	O
hostname	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_get_host_name"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
signal	function
(	O
SIGTTOU	int
,	O
SIG_IGN	O
)	O
;	O
signal	function
(	O
SIGCHLD	int
,	O
SIG_IGN	O
)	O
;	O
signal	function
(	O
SIGHUP	int
,	O
SIG_IGN	O
)	O
;	O
}	O
int	O
allow_biffrc	int
=	O
1	int
;	O
unsigned	O
maxrequests	int
=	O
16	int
;	O
time_t	long
request_control_interval	long
=	O
10	int
;	O
time_t	long
overflow_control_interval	long
=	O
10	int
;	O
time_t	long
overflow_delay_time	long
=	O
5	int
;	O
void	O
comsat_process	function
(	O
char	O
*	O
buffer	pointer
,	O
size_t	long
rdlen	long
)	O
{	O
char	O
tty	pointer
[	O
MAX_TTY_SIZE	O
]	O
;	O
char	O
*	O
p	pointer
;	O
char	O
*	O
path	pointer
=	O
NULL	O
;	O
mu_message_qid_t	pointer
qid	pointer
;	O
p	pointer
=	O
strchr	function
(	O
buffer	pointer
,	O
'@'	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
mu_diag_output	function
(	O
MU_DIAG_ERROR	O
,	O
_	O
(	O
"malformed input: %s"	pointer
)	O
,	O
buffer	pointer
)	O
;	O
return	O
;	O
}	O
*	O
p	pointer
++	O
=	O
0	int
;	O
qid	pointer
=	O
p	pointer
;	O
p	pointer
=	O
strchr	function
(	O
qid	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
*	O
p	pointer
++	O
=	O
0	int
;	O
path	pointer
=	O
p	pointer
;	O
}	O
if	O
(	O
find_user	function
(	O
buffer	pointer
,	O
tty	pointer
)	O
!=	O
SUCCESS	int
)	O
{	O
if	O
(	O
require_tty	int
)	O
return	O
;	O
tty	pointer
[	O
0	int
]	O
=	O
0	int
;	O
}	O
notify_user	function
(	O
buffer	pointer
,	O
tty	pointer
,	O
path	pointer
,	O
qid	pointer
)	O
;	O
}	O
int	O
comsat_main	function
(	O
int	O
fd	int
)	O
{	O
int	O
rdlen	long
;	O
socklen_t	int
len	int
;	O
struct	O
sockaddr	struct
fromaddr	struct
;	O
char	O
buffer	pointer
[	O
216	int
]	O
;	O
len	int
=	O
sizeof	O
fromaddr	struct
;	O
rdlen	long
=	O
recvfrom	function
(	O
fd	int
,	O
buffer	pointer
,	O
sizeof	O
buffer	pointer
,	O
0	int
,	O
&	O
fromaddr	struct
,	O
&	O
len	int
)	O
;	O
if	O
(	O
rdlen	long
<=	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
return	O
0	int
;	O
mu_diag_output	function
(	O
MU_DIAG_ERROR	O
,	O
"recvfrom: %m"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
buffer	pointer
[	O
rdlen	long
]	O
=	O
0	int
;	O
if	O
(	O
mu_m_server_check_acl	function
(	O
server	int
,	O
&	O
fromaddr	struct
,	O
len	int
)	O
)	O
return	O
0	int
;	O
comsat_process	function
(	O
buffer	pointer
,	O
rdlen	long
)	O
;	O
return	O
0	int
;	O
}	O
static	O
time_t	long
last_request_time	long
;	O
static	O
unsigned	O
reqcount	int
=	O
0	int
;	O
static	O
time_t	long
last_overflow_time	long
;	O
static	O
unsigned	O
overflow_count	int
=	O
0	int
;	O
int	O
comsat_prefork	function
(	O
int	O
fd	int
,	O
struct	O
sockaddr	struct
*	O
s	pointer
,	O
int	O
size	pointer
,	O
struct	O
mu_srv_config	struct
*	O
pconf	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
int	O
retval	pointer
=	O
0	int
;	O
time_t	long
now	pointer
;	O
if	O
(	O
maxrequests	int
!=	O
0	int
)	O
{	O
now	pointer
=	O
time	struct
(	O
NULL	O
)	O
;	O
if	O
(	O
reqcount	int
>	O
maxrequests	int
)	O
{	O
unsigned	O
delay	int
;	O
delay	int
=	O
overflow_delay_time	long
<<	O
(	O
overflow_count	int
+	O
1	int
)	O
;	O
mu_diag_output	function
(	O
MU_DIAG_NOTICE	O
,	O
ngettext	function
(	O
"too many requests: pausing for %u second"	pointer
,	O
"too many requests: pausing for %u seconds"	pointer
,	O
delay	int
)	O
,	O
delay	int
)	O
;	O
sleep	function
(	O
delay	int
)	O
;	O
reqcount	int
=	O
0	int
;	O
if	O
(	O
now	pointer
-	O
last_overflow_time	long
<=	O
overflow_control_interval	long
)	O
{	O
if	O
(	O
(	O
overflow_delay_time	long
<<	O
(	O
overflow_count	int
+	O
2	int
)	O
)	O
>	O
overflow_delay_time	long
)	O
++	O
overflow_count	int
;	O
}	O
else	O
overflow_count	int
=	O
0	int
;	O
last_overflow_time	long
=	O
time	struct
(	O
NULL	O
)	O
;	O
retval	pointer
=	O
1	int
;	O
}	O
if	O
(	O
now	pointer
-	O
last_request_time	long
<=	O
request_control_interval	long
)	O
reqcount	int
++	O
;	O
else	O
{	O
last_request_time	long
=	O
now	pointer
;	O
reqcount	int
=	O
1	int
;	O
}	O
}	O
return	O
retval	pointer
;	O
}	O
int	O
comsat_connection	function
(	O
int	O
fd	int
,	O
struct	O
sockaddr	struct
*	O
sa	pointer
,	O
int	O
salen	int
,	O
struct	O
mu_srv_config	struct
*	O
pconf	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
char	O
*	O
buffer	pointer
;	O
size_t	long
rdlen	long
,	O
size	pointer
;	O
if	O
(	O
mu_udp_server_get_rdata	function
(	O
pconf	pointer
->	O
tcpsrv	pointer
,	O
&	O
buffer	pointer
,	O
&	O
rdlen	long
)	O
)	O
return	O
0	int
;	O
if	O
(	O
pconf	pointer
->	O
transcript	int
)	O
{	O
char	O
*	O
p	pointer
=	O
mu_sys_sockaddr_to_astr	function
(	O
sa	pointer
,	O
salen	int
)	O
;	O
mu_diag_output	function
(	O
MU_DIAG_INFO	O
,	O
ngettext	function
(	O
"received %lu byte from %s"	pointer
,	O
"received %lu bytes from %s"	pointer
,	O
(	O
unsigned	O
long	O
)	O
rdlen	long
)	O
,	O
(	O
unsigned	O
long	O
)	O
rdlen	long
,	O
p	pointer
)	O
;	O
mu_diag_output	function
(	O
MU_DIAG_INFO	O
,	O
"string: %s"	pointer
,	O
buffer	pointer
)	O
;	O
free	function
(	O
p	pointer
)	O
;	O
}	O
mu_udp_server_get_bufsize	function
(	O
pconf	pointer
->	O
tcpsrv	pointer
,	O
&	O
size	pointer
)	O
;	O
if	O
(	O
size	pointer
<	O
rdlen	long
+	O
1	int
)	O
{	O
int	O
rc	int
=	O
mu_udp_server_set_bufsize	function
(	O
pconf	pointer
->	O
tcpsrv	pointer
,	O
rdlen	long
+	O
1	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot resize buffer: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
0	int
;	O
}	O
}	O
buffer	pointer
[	O
rdlen	long
]	O
=	O
0	int
;	O
comsat_process	function
(	O
buffer	pointer
,	O
rdlen	long
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
notify_user	function
(	O
const	O
char	O
*	O
user	pointer
,	O
const	O
char	O
*	O
device	pointer
,	O
const	O
char	O
*	O
path	pointer
,	O
mu_message_qid_t	pointer
qid	pointer
)	O
{	O
mu_mailbox_t	pointer
mbox	pointer
=	O
NULL	O
;	O
mu_message_t	pointer
msg	pointer
;	O
int	O
status	int
;	O
if	O
(	O
change_user	function
(	O
user	pointer
)	O
)	O
return	O
;	O
if	O
(	O
!	O
path	pointer
)	O
{	O
path	pointer
=	O
mailbox_path	function
(	O
user	pointer
)	O
;	O
if	O
(	O
!	O
path	pointer
)	O
return	O
;	O
}	O
if	O
(	O
(	O
status	int
=	O
mu_mailbox_create	function
(	O
&	O
mbox	pointer
,	O
path	pointer
)	O
)	O
!=	O
0	int
||	O
(	O
status	int
=	O
mu_mailbox_open	function
(	O
mbox	pointer
,	O
MU_STREAM_READ	int
|	O
MU_STREAM_QACCESS	int
)	O
)	O
!=	O
0	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot open mailbox %s: %s"	pointer
)	O
,	O
path	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
return	O
;	O
}	O
status	int
=	O
mu_mailbox_quick_get_message	function
(	O
mbox	pointer
,	O
qid	pointer
,	O
&	O
msg	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot get message (mailbox %s, qid %s): %s"	pointer
)	O
,	O
path	pointer
,	O
qid	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
return	O
;	O
}	O
run_user_action	function
(	O
device	pointer
,	O
msg	pointer
)	O
;	O
}	O
static	O
int	O
find_user	function
(	O
const	O
char	O
*	O
name	pointer
,	O
char	O
*	O
tty	pointer
)	O
{	O
UTMP	struct
*	O
uptr	pointer
;	O
int	O
status	int
;	O
struct	O
stat	struct
statb	struct
;	O
char	O
ftty	array
[	O
MAX_TTY_SIZE	O
]	O
;	O
time_t	long
last_time	long
=	O
0	int
;	O
status	int
=	O
NOT_HERE	int
;	O
sprintf	function
(	O
ftty	array
,	O
"%s/"	pointer
,	O
PATH_TTY_PFX	O
)	O
;	O
SETUTENT	O
(	O
)	O
;	O
while	O
(	O
(	O
uptr	pointer
=	O
GETUTENT	O
(	O
)	O
)	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
uptr	pointer
->	O
ut_type	short
!=	O
USER_PROCESS	int
)	O
continue	O
;	O
if	O
(	O
!	O
strncmp	function
(	O
uptr	pointer
->	O
ut_user	array
,	O
name	pointer
,	O
sizeof	O
(	O
uptr	pointer
->	O
ut_user	array
)	O
)	O
)	O
{	O
strncpy	function
(	O
ftty	array
+	O
sizeof	O
(	O
PATH_DEV	O
)	O
,	O
uptr	pointer
->	O
ut_line	array
,	O
sizeof	O
(	O
ftty	array
)	O
-	O
sizeof	O
(	O
PATH_DEV	O
)	O
-	O
2	int
)	O
;	O
ftty	array
[	O
sizeof	O
(	O
ftty	array
)	O
-	O
1	int
]	O
=	O
0	int
;	O
mu_normalize_path	function
(	O
ftty	array
)	O
;	O
if	O
(	O
strncmp	function
(	O
ftty	array
,	O
PATH_TTY_PFX	O
,	O
strlen	function
(	O
PATH_TTY_PFX	O
)	O
)	O
)	O
{	O
mu_diag_output	function
(	O
MU_DIAG_ALERT	O
,	O
_	O
(	O
"bad line name in utmp record: %s"	pointer
)	O
,	O
ftty	array
)	O
;	O
return	O
NOT_HERE	int
;	O
}	O
if	O
(	O
stat	struct
(	O
ftty	array
,	O
&	O
statb	struct
)	O
==	O
0	int
)	O
{	O
if	O
(	O
!	O
S_ISCHR	O
(	O
statb	struct
.	O
st_mode	int
)	O
)	O
{	O
mu_diag_output	function
(	O
MU_DIAG_ALERT	O
,	O
_	O
(	O
"not a character device: %s"	pointer
)	O
,	O
ftty	array
)	O
;	O
return	O
NOT_HERE	int
;	O
}	O
if	O
(	O
!	O
(	O
statb	struct
.	O
st_mode	int
&	O
S_IEXEC	O
)	O
)	O
{	O
if	O
(	O
status	int
!=	O
SUCCESS	int
)	O
status	int
=	O
PERMISSION_DENIED	int
;	O
continue	O
;	O
}	O
if	O
(	O
statb	struct
.	O
st_atime	O
>	O
last_time	long
)	O
{	O
last_time	long
=	O
statb	struct
.	O
st_atime	O
;	O
strcpy	function
(	O
tty	pointer
,	O
ftty	array
)	O
;	O
status	int
=	O
SUCCESS	int
;	O
}	O
continue	O
;	O
}	O
}	O
}	O
ENDUTENT	O
(	O
)	O
;	O
return	O
status	int
;	O
}	O
int	O
change_user	function
(	O
const	O
char	O
*	O
user	pointer
)	O
{	O
struct	O
passwd	struct
*	O
pw	pointer
;	O
pw	pointer
=	O
getpwnam	function
(	O
user	pointer
)	O
;	O
if	O
(	O
!	O
pw	pointer
)	O
{	O
mu_diag_output	function
(	O
MU_DIAG_CRIT	O
,	O
_	O
(	O
"no such user: %s"	pointer
)	O
,	O
user	pointer
)	O
;	O
return	O
1	int
;	O
}	O
setgid	function
(	O
pw	pointer
->	O
pw_gid	int
)	O
;	O
setuid	function
(	O
pw	pointer
->	O
pw_uid	int
)	O
;	O
chdir	function
(	O
pw	pointer
->	O
pw_dir	pointer
)	O
;	O
username	pointer
=	O
user	pointer
;	O
return	O
0	int
;	O
}	O
char	O
*	O
mailbox_path	function
(	O
const	O
char	O
*	O
user	pointer
)	O
{	O
struct	O
mu_auth_data	struct
*	O
auth	pointer
;	O
char	O
*	O
mailbox_name	pointer
;	O
auth	pointer
=	O
mu_get_auth_by_name	function
(	O
user	pointer
)	O
;	O
if	O
(	O
!	O
auth	pointer
)	O
{	O
mu_diag_output	function
(	O
MU_DIAG_ALERT	O
,	O
_	O
(	O
"user nonexistent: %s"	pointer
)	O
,	O
user	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
mailbox_name	pointer
=	O
strdup	function
(	O
auth	pointer
->	O
mailbox	pointer
)	O
;	O
mu_auth_data_free	function
(	O
auth	pointer
)	O
;	O
return	O
mailbox_name	pointer
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
c	char
;	O
char	O
*	O
*	O
save_argv	pointer
;	O
MU_APP_INIT_NLS	O
(	O
)	O
;	O
comsat_init	function
(	O
)	O
;	O
mu_acl_cfg_init	function
(	O
)	O
;	O
mu_m_server_create	function
(	O
&	O
server	int
,	O
program_version	pointer
)	O
;	O
mu_m_server_set_type	function
(	O
server	int
,	O
MU_IP_UDP	int
)	O
;	O
mu_m_server_set_conn	function
(	O
server	int
,	O
comsat_connection	function
)	O
;	O
mu_m_server_set_prefork	function
(	O
server	int
,	O
comsat_prefork	function
)	O
;	O
mu_m_server_set_mode	function
(	O
server	int
,	O
MODE_INTERACTIVE	int
)	O
;	O
mu_m_server_set_max_children	function
(	O
server	int
,	O
20	int
)	O
;	O
mu_m_server_set_default_port	function
(	O
server	int
,	O
512	int
)	O
;	O
mu_m_server_cfg_init	function
(	O
server	int
,	O
NULL	O
)	O
;	O
mu_log_syslog	int
=	O
1	int
;	O
save_argv	pointer
=	O
argv	pointer
;	O
mu_cli	function
(	O
argc	int
,	O
argv	pointer
,	O
&	O
cli	struct
,	O
capa	pointer
,	O
server	int
,	O
&	O
argc	int
,	O
&	O
argv	pointer
)	O
;	O
if	O
(	O
test_mode	pointer
)	O
{	O
struct	O
passwd	struct
*	O
pw	pointer
;	O
char	O
*	O
user	pointer
;	O
mu_stdstream_strerr_setup	function
(	O
MU_STRERR_STDERR	int
)	O
;	O
biffrc_errors	int
=	O
BIFFRC_ERRORS_TO_ERR	int
;	O
if	O
(	O
argc	int
<	O
2	int
||	O
argc	int
>	O
2	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"mailbox URL and message QID are required in test mode"	pointer
)	O
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
pw	pointer
=	O
getpwuid	function
(	O
getuid	function
(	O
)	O
)	O
;	O
if	O
(	O
!	O
pw	pointer
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot determine user name"	pointer
)	O
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
user	pointer
=	O
pw	pointer
->	O
pw_name	pointer
;	O
if	O
(	O
biffrc	pointer
[	O
0	int
]	O
==	O
'.'	O
&&	O
(	O
biffrc	pointer
[	O
1	int
]	O
==	O
'/'	O
||	O
(	O
biffrc	pointer
[	O
1	int
]	O
==	O
'.'	O
&&	O
biffrc	pointer
[	O
2	int
]	O
==	O
'/'	O
)	O
)	O
)	O
{	O
char	O
*	O
cwd	short
=	O
mu_getcwd	function
(	O
)	O
;	O
biffrc	pointer
=	O
mu_make_file_name	O
(	O
cwd	short
,	O
biffrc	pointer
)	O
;	O
if	O
(	O
!	O
biffrc	pointer
)	O
{	O
mu_error	function
(	O
"%s"	pointer
,	O
mu_strerror	function
(	O
ENOMEM	int
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
mu_normalize_path	function
(	O
biffrc	pointer
)	O
;	O
free	function
(	O
cwd	short
)	O
;	O
}	O
notify_user	function
(	O
user	pointer
,	O
test_mode	pointer
,	O
argv	pointer
[	O
0	int
]	O
,	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
mu_stdstream_strerr_setup	function
(	O
mu_log_syslog	int
?	O
MU_STRERR_SYSLOG	int
:	O
MU_STRERR_STDERR	int
)	O
;	O
if	O
(	O
mu_m_server_mode	function
(	O
server	int
)	O
==	O
MODE_DAEMON	int
)	O
{	O
if	O
(	O
save_argv	pointer
[	O
0	int
]	O
[	O
0	int
]	O
!=	O
'/'	O
)	O
mu_diag_output	function
(	O
MU_DIAG_NOTICE	O
,	O
_	O
(	O
"program name is not absolute; reloading will not "	pointer
"be possible"	pointer
)	O
)	O
;	O
else	O
{	O
sigset_t	struct
set	struct
;	O
mu_m_server_get_sigset	function
(	O
server	int
,	O
&	O
set	struct
)	O
;	O
sigdelset	function
(	O
&	O
set	struct
,	O
SIGHUP	int
)	O
;	O
mu_m_server_set_sigset	function
(	O
server	int
,	O
&	O
set	struct
)	O
;	O
signal	function
(	O
SIGHUP	int
,	O
sig_hup	function
)	O
;	O
}	O
mu_m_server_begin	function
(	O
server	int
)	O
;	O
c	char
=	O
mu_m_server_run	function
(	O
server	int
)	O
;	O
mu_m_server_end	function
(	O
server	int
)	O
;	O
mu_m_server_destroy	function
(	O
&	O
server	int
)	O
;	O
if	O
(	O
reload	int
)	O
{	O
mu_diag_output	function
(	O
MU_DIAG_NOTICE	O
,	O
_	O
(	O
"restarting"	pointer
)	O
)	O
;	O
execvp	function
(	O
save_argv	pointer
[	O
0	int
]	O
,	O
save_argv	pointer
)	O
;	O
}	O
}	O
else	O
{	O
chdir	function
(	O
"/"	pointer
)	O
;	O
c	char
=	O
comsat_main	function
(	O
0	int
)	O
;	O
}	O
return	O
c	char
!=	O
0	int
;	O
}	O
