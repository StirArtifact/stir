void	O
MHD_connection_set_timeout	function
(	O
struct	O
MHD_Connection	struct
*	O
connection	pointer
,	O
unsigned	O
int	O
timeout_s	int
)	O
{	O
struct	O
MHD_Daemon	struct
*	O
daemon	function
=	O
connection	pointer
->	O
daemon	function
;	O
connection	pointer
->	O
last_activity	long
=	O
MHD_monotonic_sec_counter	function
(	O
)	O
;	O
if	O
(	O
MHD_TM_THREAD_PER_CONNECTION	int
==	O
daemon	function
->	O
threading_mode	enum
)	O
{	O
connection	pointer
->	O
connection_timeout	int
=	O
(	O
time_t	long
)	O
timeout_s	int
;	O
return	O
;	O
}	O
MHD_mutex_lock_chk_	O
(	O
&	O
daemon	function
->	O
cleanup_connection_mutex	union
)	O
;	O
if	O
(	O
!	O
connection	pointer
->	O
suspended	enum
)	O
{	O
if	O
(	O
connection	pointer
->	O
connection_timeout	int
==	O
daemon	function
->	O
connection_default_timeout	long
)	O
XDLL_remove	O
(	O
daemon	function
->	O
normal_timeout_head	pointer
,	O
daemon	function
->	O
normal_timeout_tail	pointer
,	O
connection	pointer
)	O
;	O
else	O
XDLL_remove	O
(	O
daemon	function
->	O
manual_timeout_head	pointer
,	O
daemon	function
->	O
manual_timeout_tail	pointer
,	O
connection	pointer
)	O
;	O
}	O
connection	pointer
->	O
connection_timeout	int
=	O
(	O
time_t	long
)	O
timeout_s	int
;	O
if	O
(	O
!	O
connection	pointer
->	O
suspended	enum
)	O
{	O
if	O
(	O
connection	pointer
->	O
connection_timeout	int
==	O
daemon	function
->	O
connection_default_timeout	long
)	O
XDLL_insert	O
(	O
daemon	function
->	O
normal_timeout_head	pointer
,	O
daemon	function
->	O
normal_timeout_tail	pointer
,	O
connection	pointer
)	O
;	O
else	O
XDLL_insert	O
(	O
daemon	function
->	O
manual_timeout_head	pointer
,	O
daemon	function
->	O
manual_timeout_tail	pointer
,	O
connection	pointer
)	O
;	O
}	O
MHD_mutex_unlock_chk_	O
(	O
&	O
daemon	function
->	O
cleanup_connection_mutex	union
)	O
;	O
}	O
void	O
MHD_update_last_activity_	function
(	O
struct	O
MHD_Connection	struct
*	O
connection	pointer
)	O
{	O
struct	O
MHD_Daemon	struct
*	O
daemon	function
=	O
connection	pointer
->	O
daemon	function
;	O
if	O
(	O
0	int
==	O
connection	pointer
->	O
connection_timeout	int
)	O
return	O
;	O
if	O
(	O
connection	pointer
->	O
suspended	enum
)	O
return	O
;	O
connection	pointer
->	O
last_activity	long
=	O
MHD_monotonic_sec_counter	function
(	O
)	O
;	O
if	O
(	O
MHD_TM_THREAD_PER_CONNECTION	int
==	O
daemon	function
->	O
threading_mode	enum
)	O
return	O
;	O
if	O
(	O
connection	pointer
->	O
connection_timeout	int
!=	O
daemon	function
->	O
connection_default_timeout	long
)	O
return	O
;	O
MHD_mutex_lock_chk_	O
(	O
&	O
daemon	function
->	O
cleanup_connection_mutex	union
)	O
;	O
XDLL_remove	O
(	O
daemon	function
->	O
normal_timeout_head	pointer
,	O
daemon	function
->	O
normal_timeout_tail	pointer
,	O
connection	pointer
)	O
;	O
XDLL_insert	O
(	O
daemon	function
->	O
normal_timeout_head	pointer
,	O
daemon	function
->	O
normal_timeout_tail	pointer
,	O
connection	pointer
)	O
;	O
MHD_mutex_unlock_chk_	O
(	O
&	O
daemon	function
->	O
cleanup_connection_mutex	union
)	O
;	O
}	O
