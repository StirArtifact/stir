void	O
_pl_m_paint_path	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
const	O
plPath	struct
*	O
path	pointer
;	O
bool	enum
explicit_endpath	enum
,	O
sync_miter_limit	enum
=	O
false	int
;	O
_pl_m_set_attributes	function
(	O
R___	O
(	O
_plotter	pointer
)	O
PL_ATTR_TRANSFORMATION_MATRIX	O
|	O
PL_ATTR_PEN_COLOR	O
|	O
PL_ATTR_PEN_TYPE	O
|	O
PL_ATTR_LINE_STYLE	O
|	O
PL_ATTR_LINE_WIDTH	O
|	O
PL_ATTR_JOIN_STYLE	O
|	O
PL_ATTR_CAP_STYLE	O
|	O
PL_ATTR_FILL_COLOR	O
|	O
PL_ATTR_FILL_TYPE	O
|	O
PL_ATTR_FILL_RULE	O
)	O
;	O
path	pointer
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
join_type	int
==	O
PL_JOIN_MITER	int
&&	O
(	O
path	pointer
->	O
type	enum
==	O
PATH_SEGMENT_LIST	int
||	O
path	pointer
->	O
type	enum
==	O
PATH_BOX	int
)	O
)	O
sync_miter_limit	enum
=	O
true	int
;	O
if	O
(	O
sync_miter_limit	enum
)	O
_pl_m_set_attributes	function
(	O
R___	O
(	O
_plotter	pointer
)	O
PL_ATTR_MITER_LIMIT	O
)	O
;	O
if	O
(	O
path	pointer
->	O
type	enum
==	O
PATH_SEGMENT_LIST	int
)	O
explicit_endpath	enum
=	O
true	int
;	O
else	O
explicit_endpath	enum
=	O
false	int
;	O
_pl_m_paint_path_internal	function
(	O
R___	O
(	O
_plotter	pointer
)	O
path	pointer
)	O
;	O
if	O
(	O
explicit_endpath	enum
)	O
{	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_ENDPATH	int
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
}	O
}	O
bool	enum
_pl_m_paint_paths	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
const	O
plPath	struct
*	O
path	pointer
;	O
bool	enum
sync_miter_limit	enum
=	O
false	int
;	O
int	O
i	int
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
num_paths	int
==	O
0	int
)	O
return	O
true	int
;	O
_pl_m_set_attributes	function
(	O
R___	O
(	O
_plotter	pointer
)	O
PL_ATTR_TRANSFORMATION_MATRIX	O
|	O
PL_ATTR_PEN_COLOR	O
|	O
PL_ATTR_PEN_TYPE	O
|	O
PL_ATTR_LINE_STYLE	O
|	O
PL_ATTR_LINE_WIDTH	O
|	O
PL_ATTR_JOIN_STYLE	O
|	O
PL_ATTR_CAP_STYLE	O
|	O
PL_ATTR_FILL_COLOR	O
|	O
PL_ATTR_FILL_TYPE	O
|	O
PL_ATTR_FILL_RULE	O
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
join_type	int
==	O
PL_JOIN_MITER	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
_plotter	pointer
->	O
drawstate	pointer
->	O
num_paths	int
;	O
i	int
++	O
)	O
{	O
path	pointer
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
paths	pointer
[	O
i	int
]	O
;	O
if	O
(	O
path	pointer
->	O
type	enum
==	O
PATH_SEGMENT_LIST	int
||	O
path	pointer
->	O
type	enum
==	O
PATH_BOX	int
)	O
{	O
sync_miter_limit	enum
=	O
true	int
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
sync_miter_limit	enum
)	O
_pl_m_set_attributes	function
(	O
R___	O
(	O
_plotter	pointer
)	O
PL_ATTR_MITER_LIMIT	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
_plotter	pointer
->	O
drawstate	pointer
->	O
num_paths	int
;	O
i	int
++	O
)	O
{	O
path	pointer
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
paths	pointer
[	O
i	int
]	O
;	O
_pl_m_paint_path_internal	function
(	O
R___	O
(	O
_plotter	pointer
)	O
path	pointer
)	O
;	O
if	O
(	O
i	int
<	O
_plotter	pointer
->	O
drawstate	pointer
->	O
num_paths	int
-	O
1	int
)	O
{	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_ENDSUBPATH	int
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
}	O
}	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
paths	pointer
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
num_paths	int
-	O
1	int
]	O
->	O
type	enum
==	O
PATH_SEGMENT_LIST	int
)	O
{	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_ENDPATH	int
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
}	O
return	O
true	int
;	O
}	O
void	O
_pl_m_paint_path_internal	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
const	O
plPath	struct
*	O
path	pointer
)	O
{	O
if	O
(	O
path	pointer
->	O
type	enum
==	O
PATH_BOX	int
||	O
path	pointer
->	O
type	enum
==	O
PATH_CIRCLE	int
||	O
path	pointer
->	O
type	enum
==	O
PATH_ELLIPSE	int
)	O
{	O
int	O
orientation	int
=	O
(	O
path	pointer
->	O
clockwise	enum
?	O
-	O
1	int
:	O
1	int
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
meta_orientation	int
!=	O
orientation	int
)	O
{	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_ORIENTATION	int
)	O
;	O
_pl_m_emit_integer	function
(	O
R___	O
(	O
_plotter	pointer
)	O
orientation	int
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
meta_orientation	int
=	O
orientation	int
;	O
}	O
}	O
switch	O
(	O
(	O
int	O
)	O
path	pointer
->	O
type	enum
)	O
{	O
case	O
(	O
int	O
)	O
PATH_SEGMENT_LIST	int
:	O
{	O
plPathSegment	struct
segment	struct
;	O
int	O
i	int
;	O
if	O
(	O
path	pointer
->	O
num_segments	int
==	O
0	int
)	O
break	O
;	O
if	O
(	O
path	pointer
->	O
num_segments	int
==	O
1	int
)	O
break	O
;	O
segment	struct
=	O
path	pointer
->	O
segments	pointer
[	O
0	int
]	O
;	O
if	O
(	O
_plotter	pointer
->	O
meta_pos	struct
.	O
x	double
!=	O
segment	struct
.	O
p	struct
.	O
x	double
||	O
_plotter	pointer
->	O
meta_pos	struct
.	O
y	double
!=	O
segment	struct
.	O
p	struct
.	O
y	double
)	O
{	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_FMOVE	int
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
segment	struct
.	O
p	struct
.	O
x	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
segment	struct
.	O
p	struct
.	O
y	double
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
meta_pos	struct
=	O
segment	struct
.	O
p	struct
;	O
}	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
path	pointer
->	O
num_segments	int
;	O
i	int
++	O
)	O
{	O
plPathSegment	struct
prev_segment	struct
;	O
prev_segment	struct
=	O
segment	struct
;	O
segment	struct
=	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
;	O
switch	O
(	O
(	O
int	O
)	O
segment	struct
.	O
type	enum
)	O
{	O
case	O
(	O
int	O
)	O
S_LINE	int
:	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_FCONT	int
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
segment	struct
.	O
p	struct
.	O
x	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
segment	struct
.	O
p	struct
.	O
y	double
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
meta_pos	struct
=	O
segment	struct
.	O
p	struct
;	O
break	O
;	O
case	O
(	O
int	O
)	O
S_ARC	int
:	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_FARC	int
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
segment	struct
.	O
pc	struct
.	O
x	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
segment	struct
.	O
pc	struct
.	O
y	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
prev_segment	struct
.	O
p	struct
.	O
x	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
prev_segment	struct
.	O
p	struct
.	O
y	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
segment	struct
.	O
p	struct
.	O
x	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
segment	struct
.	O
p	struct
.	O
y	double
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
meta_pos	struct
=	O
segment	struct
.	O
p	struct
;	O
break	O
;	O
case	O
(	O
int	O
)	O
S_ELLARC	int
:	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_FELLARC	int
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
segment	struct
.	O
pc	struct
.	O
x	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
segment	struct
.	O
pc	struct
.	O
y	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
prev_segment	struct
.	O
p	struct
.	O
x	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
prev_segment	struct
.	O
p	struct
.	O
y	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
segment	struct
.	O
p	struct
.	O
x	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
segment	struct
.	O
p	struct
.	O
y	double
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
meta_pos	struct
=	O
segment	struct
.	O
p	struct
;	O
break	O
;	O
case	O
(	O
int	O
)	O
S_QUAD	int
:	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_FBEZIER2	int
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
prev_segment	struct
.	O
p	struct
.	O
x	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
prev_segment	struct
.	O
p	struct
.	O
y	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
segment	struct
.	O
pc	struct
.	O
x	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
segment	struct
.	O
pc	struct
.	O
y	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
segment	struct
.	O
p	struct
.	O
x	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
segment	struct
.	O
p	struct
.	O
y	double
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
meta_pos	struct
=	O
segment	struct
.	O
p	struct
;	O
break	O
;	O
case	O
(	O
int	O
)	O
S_CUBIC	int
:	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_FBEZIER3	int
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
prev_segment	struct
.	O
p	struct
.	O
x	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
prev_segment	struct
.	O
p	struct
.	O
y	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
segment	struct
.	O
pc	struct
.	O
x	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
segment	struct
.	O
pc	struct
.	O
y	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
segment	struct
.	O
pd	struct
.	O
x	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
segment	struct
.	O
pd	struct
.	O
y	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
segment	struct
.	O
p	struct
.	O
x	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
segment	struct
.	O
p	struct
.	O
y	double
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
meta_pos	struct
=	O
segment	struct
.	O
p	struct
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
}	O
break	O
;	O
case	O
(	O
int	O
)	O
PATH_BOX	int
:	O
{	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_FBOX	int
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
path	pointer
->	O
p0	struct
.	O
x	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
path	pointer
->	O
p0	struct
.	O
y	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
path	pointer
->	O
p1	struct
.	O
x	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
path	pointer
->	O
p1	struct
.	O
y	double
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
meta_pos	struct
.	O
x	double
=	O
0.5	int
*	O
(	O
path	pointer
->	O
p0	struct
.	O
x	double
+	O
path	pointer
->	O
p1	struct
.	O
x	double
)	O
;	O
_plotter	pointer
->	O
meta_pos	struct
.	O
y	double
=	O
0.5	int
*	O
(	O
path	pointer
->	O
p0	struct
.	O
y	double
+	O
path	pointer
->	O
p1	struct
.	O
y	double
)	O
;	O
}	O
break	O
;	O
case	O
(	O
int	O
)	O
PATH_CIRCLE	int
:	O
{	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_FCIRCLE	int
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
path	pointer
->	O
pc	struct
.	O
x	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
path	pointer
->	O
pc	struct
.	O
y	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
path	pointer
->	O
radius	double
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
meta_pos	struct
=	O
path	pointer
->	O
pc	struct
;	O
}	O
break	O
;	O
case	O
(	O
int	O
)	O
PATH_ELLIPSE	int
:	O
{	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_FELLIPSE	int
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
path	pointer
->	O
pc	struct
.	O
x	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
path	pointer
->	O
pc	struct
.	O
y	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
path	pointer
->	O
rx	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
path	pointer
->	O
ry	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
path	pointer
->	O
angle	double
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
meta_pos	struct
=	O
path	pointer
->	O
pc	struct
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
bool	enum
_pl_m_path_is_flushable	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
return	O
true	int
;	O
}	O
void	O
_pl_m_maybe_prepaint_segments	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
int	O
prev_num_segments	int
)	O
{	O
return	O
;	O
}	O
