static	O
void	O
movelist_sort_points	function
(	O
int	O
max_points	int
,	O
int	O
points	array
[	O
]	O
,	O
int	O
codes	array
[	O
]	O
)	O
;	O
static	O
void	O
swap_points_and_codes	function
(	O
int	O
points	array
[	O
]	O
,	O
int	O
codes	array
[	O
]	O
,	O
int	O
m	int
,	O
int	O
n	int
)	O
;	O
int	O
movelist_move_known	function
(	O
int	O
move	pointer
,	O
int	O
max_points	int
,	O
int	O
points	array
[	O
]	O
,	O
int	O
codes	array
[	O
]	O
)	O
{	O
int	O
k	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
max_points	int
;	O
k	int
++	O
)	O
{	O
if	O
(	O
codes	array
[	O
k	int
]	O
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
points	array
[	O
k	int
]	O
==	O
move	pointer
)	O
return	O
codes	array
[	O
k	int
]	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
movelist_change_point	function
(	O
int	O
move	pointer
,	O
int	O
code	int
,	O
int	O
max_points	int
,	O
int	O
points	array
[	O
]	O
,	O
int	O
codes	array
[	O
]	O
)	O
{	O
int	O
k	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
max_points	int
;	O
k	int
++	O
)	O
if	O
(	O
points	array
[	O
k	int
]	O
==	O
move	pointer
)	O
break	O
;	O
if	O
(	O
k	int
<	O
max_points	int
)	O
{	O
if	O
(	O
codes	array
[	O
k	int
]	O
<=	O
code	int
)	O
return	O
;	O
codes	array
[	O
k	int
]	O
=	O
code	int
;	O
movelist_sort_points	function
(	O
max_points	int
,	O
points	array
,	O
codes	array
)	O
;	O
return	O
;	O
}	O
if	O
(	O
code	int
>	O
codes	array
[	O
max_points	int
-	O
1	int
]	O
)	O
{	O
points	array
[	O
max_points	int
-	O
1	int
]	O
=	O
move	pointer
;	O
codes	array
[	O
max_points	int
-	O
1	int
]	O
=	O
code	int
;	O
movelist_sort_points	function
(	O
max_points	int
,	O
points	array
,	O
codes	array
)	O
;	O
}	O
}	O
static	O
void	O
movelist_sort_points	function
(	O
int	O
max_points	int
,	O
int	O
points	array
[	O
]	O
,	O
int	O
codes	array
[	O
]	O
)	O
{	O
int	O
start	int
=	O
0	int
;	O
int	O
end	int
=	O
max_points	int
-	O
1	int
;	O
int	O
new_start	int
;	O
int	O
new_end	int
;	O
int	O
k	int
;	O
while	O
(	O
start	int
<	O
end	int
)	O
{	O
new_start	int
=	O
end	int
;	O
for	O
(	O
k	int
=	O
end	int
;	O
k	int
>	O
start	int
;	O
k	int
--	O
)	O
if	O
(	O
codes	array
[	O
k	int
]	O
>	O
codes	array
[	O
k	int
-	O
1	int
]	O
)	O
{	O
swap_points_and_codes	function
(	O
points	array
,	O
codes	array
,	O
k	int
,	O
k	int
-	O
1	int
)	O
;	O
new_start	int
=	O
k	int
;	O
}	O
start	int
=	O
new_start	int
;	O
new_end	int
=	O
start	int
;	O
for	O
(	O
k	int
=	O
start	int
;	O
k	int
<	O
end	int
-	O
1	int
;	O
k	int
++	O
)	O
if	O
(	O
codes	array
[	O
k	int
]	O
<	O
codes	array
[	O
k	int
+	O
1	int
]	O
)	O
{	O
swap_points_and_codes	function
(	O
points	array
,	O
codes	array
,	O
k	int
,	O
k	int
+	O
1	int
)	O
;	O
new_end	int
=	O
k	int
;	O
}	O
end	int
=	O
new_end	int
;	O
}	O
}	O
static	O
void	O
swap_points_and_codes	function
(	O
int	O
points	array
[	O
]	O
,	O
int	O
codes	array
[	O
]	O
,	O
int	O
m	int
,	O
int	O
n	int
)	O
{	O
int	O
tmp	int
=	O
points	array
[	O
m	int
]	O
;	O
points	array
[	O
m	int
]	O
=	O
points	array
[	O
n	int
]	O
;	O
points	array
[	O
n	int
]	O
=	O
tmp	int
;	O
tmp	int
=	O
codes	array
[	O
m	int
]	O
;	O
codes	array
[	O
m	int
]	O
=	O
codes	array
[	O
n	int
]	O
;	O
codes	array
[	O
n	int
]	O
=	O
tmp	int
;	O
}	O
