static	O
void	O
gcm_gf_add	function
(	O
union	O
nettle_block16	union
*	O
r	pointer
,	O
const	O
union	O
nettle_block16	union
*	O
x	union
,	O
const	O
union	O
nettle_block16	union
*	O
y	pointer
)	O
{	O
r	pointer
->	O
w	array
[	O
0	int
]	O
=	O
x	union
->	O
w	array
[	O
0	int
]	O
^	O
y	pointer
->	O
w	array
[	O
0	int
]	O
;	O
r	pointer
->	O
w	array
[	O
1	int
]	O
=	O
x	union
->	O
w	array
[	O
1	int
]	O
^	O
y	pointer
->	O
w	array
[	O
1	int
]	O
;	O
}	O
static	O
void	O
gcm_gf_shift	function
(	O
union	O
nettle_block16	union
*	O
r	pointer
,	O
const	O
union	O
nettle_block16	union
*	O
x	union
)	O
{	O
long	O
mask	long
;	O
mask	long
=	O
-	O
(	O
(	O
x	union
->	O
w	array
[	O
1	int
]	O
>>	O
56	int
)	O
&	O
1	int
)	O
;	O
r	pointer
->	O
w	array
[	O
1	int
]	O
=	O
RSHIFT_WORD	O
(	O
x	union
->	O
w	array
[	O
1	int
]	O
)	O
|	O
(	O
(	O
x	union
->	O
w	array
[	O
0	int
]	O
>>	O
49	int
)	O
&	O
0x80	int
)	O
;	O
r	pointer
->	O
w	array
[	O
0	int
]	O
=	O
RSHIFT_WORD	O
(	O
x	union
->	O
w	array
[	O
0	int
]	O
)	O
^	O
(	O
mask	long
&	O
GHASH_POLYNOMIAL	int
)	O
;	O
}	O
void	O
_nettle_gcm_hash8	function
(	O
const	O
struct	O
gcm_key	struct
*	O
key	pointer
,	O
union	O
nettle_block16	union
*	O
x	union
,	O
size_t	long
length	long
,	O
const	O
uint8_t	char
*	O
data	pointer
)	O
;	O
void	O
gcm_set_key	O
(	O
struct	O
gcm_key	struct
*	O
key	pointer
,	O
const	O
void	O
*	O
cipher	pointer
,	O
nettle_cipher_func	function
*	O
f	pointer
)	O
{	O
unsigned	O
i	int
=	O
(	O
1	int
<<	O
GCM_TABLE_BITS	int
)	O
/	O
2	int
;	O
memset	function
(	O
key	pointer
->	O
h	array
[	O
0	int
]	O
.	O
b	array
,	O
0	int
,	O
GCM_BLOCK_SIZE	int
)	O
;	O
f	pointer
(	O
cipher	pointer
,	O
GCM_BLOCK_SIZE	int
,	O
key	pointer
->	O
h	array
[	O
i	int
]	O
.	O
b	array
,	O
key	pointer
->	O
h	array
[	O
0	int
]	O
.	O
b	array
)	O
;	O
while	O
(	O
i	int
/=	O
2	int
)	O
gcm_gf_shift	function
(	O
&	O
key	pointer
->	O
h	array
[	O
i	int
]	O
,	O
&	O
key	pointer
->	O
h	array
[	O
2	int
*	O
i	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
2	int
;	O
i	int
<	O
1	int
<<	O
GCM_TABLE_BITS	int
;	O
i	int
*=	O
2	int
)	O
{	O
unsigned	O
j	int
;	O
for	O
(	O
j	int
=	O
1	int
;	O
j	int
<	O
i	int
;	O
j	int
++	O
)	O
gcm_gf_add	function
(	O
&	O
key	pointer
->	O
h	array
[	O
i	int
+	O
j	int
]	O
,	O
&	O
key	pointer
->	O
h	array
[	O
i	int
]	O
,	O
&	O
key	pointer
->	O
h	array
[	O
j	int
]	O
)	O
;	O
}	O
}	O
static	O
void	O
gcm_hash_sizes	function
(	O
const	O
struct	O
gcm_key	struct
*	O
key	pointer
,	O
union	O
nettle_block16	union
*	O
x	union
,	O
uint64_t	long
auth_size	long
,	O
uint64_t	long
data_size	long
)	O
{	O
uint8_t	char
buffer	pointer
[	O
GCM_BLOCK_SIZE	int
]	O
;	O
data_size	long
*=	O
8	int
;	O
auth_size	long
*=	O
8	int
;	O
WRITE_UINT64	O
(	O
buffer	pointer
,	O
auth_size	long
)	O
;	O
WRITE_UINT64	O
(	O
buffer	pointer
+	O
8	int
,	O
data_size	long
)	O
;	O
gcm_hash	O
(	O
key	pointer
,	O
x	union
,	O
GCM_BLOCK_SIZE	int
,	O
buffer	pointer
)	O
;	O
}	O
void	O
gcm_set_iv	O
(	O
struct	O
gcm_ctx	struct
*	O
ctx	pointer
,	O
const	O
struct	O
gcm_key	struct
*	O
key	pointer
,	O
size_t	long
length	long
,	O
const	O
uint8_t	char
*	O
iv	union
)	O
{	O
if	O
(	O
length	long
==	O
GCM_IV_SIZE	O
)	O
{	O
memcpy	function
(	O
ctx	pointer
->	O
iv	union
.	O
b	array
,	O
iv	union
,	O
GCM_BLOCK_SIZE	int
-	O
4	int
)	O
;	O
ctx	pointer
->	O
iv	union
.	O
b	array
[	O
GCM_BLOCK_SIZE	int
-	O
4	int
]	O
=	O
0	int
;	O
ctx	pointer
->	O
iv	union
.	O
b	array
[	O
GCM_BLOCK_SIZE	int
-	O
3	int
]	O
=	O
0	int
;	O
ctx	pointer
->	O
iv	union
.	O
b	array
[	O
GCM_BLOCK_SIZE	int
-	O
2	int
]	O
=	O
0	int
;	O
ctx	pointer
->	O
iv	union
.	O
b	array
[	O
GCM_BLOCK_SIZE	int
-	O
1	int
]	O
=	O
1	int
;	O
}	O
else	O
{	O
memset	function
(	O
ctx	pointer
->	O
iv	union
.	O
b	array
,	O
0	int
,	O
GCM_BLOCK_SIZE	int
)	O
;	O
gcm_hash	O
(	O
key	pointer
,	O
&	O
ctx	pointer
->	O
iv	union
,	O
length	long
,	O
iv	union
)	O
;	O
gcm_hash_sizes	function
(	O
key	pointer
,	O
&	O
ctx	pointer
->	O
iv	union
,	O
0	int
,	O
length	long
)	O
;	O
}	O
memcpy	function
(	O
ctx	pointer
->	O
ctr	union
.	O
b	array
,	O
ctx	pointer
->	O
iv	union
.	O
b	array
,	O
GCM_BLOCK_SIZE	int
)	O
;	O
INC32	O
(	O
ctx	pointer
->	O
ctr	union
)	O
;	O
memset	function
(	O
ctx	pointer
->	O
x	union
.	O
b	array
,	O
0	int
,	O
sizeof	O
(	O
ctx	pointer
->	O
x	union
)	O
)	O
;	O
ctx	pointer
->	O
auth_size	long
=	O
ctx	pointer
->	O
data_size	long
=	O
0	int
;	O
}	O
void	O
gcm_update	O
(	O
struct	O
gcm_ctx	struct
*	O
ctx	pointer
,	O
const	O
struct	O
gcm_key	struct
*	O
key	pointer
,	O
size_t	long
length	long
,	O
const	O
uint8_t	char
*	O
data	pointer
)	O
{	O
assert	O
(	O
ctx	pointer
->	O
auth_size	long
%	O
GCM_BLOCK_SIZE	int
==	O
0	int
)	O
;	O
assert	O
(	O
ctx	pointer
->	O
data_size	long
==	O
0	int
)	O
;	O
gcm_hash	O
(	O
key	pointer
,	O
&	O
ctx	pointer
->	O
x	union
,	O
length	long
,	O
data	pointer
)	O
;	O
ctx	pointer
->	O
auth_size	long
+=	O
length	long
;	O
}	O
static	O
nettle_fill16_func	function
gcm_fill	function
;	O
static	O
void	O
gcm_fill	function
(	O
uint8_t	char
*	O
ctr	union
,	O
size_t	long
blocks	long
,	O
union	O
nettle_block16	union
*	O
buffer	pointer
)	O
{	O
uint32_t	int
c	int
;	O
c	int
=	O
READ_UINT32	O
(	O
ctr	union
+	O
GCM_BLOCK_SIZE	int
-	O
4	int
)	O
;	O
for	O
(	O
;	O
blocks	long
--	O
>	O
0	int
;	O
buffer	pointer
++	O
,	O
c	int
++	O
)	O
{	O
memcpy	function
(	O
buffer	pointer
->	O
b	array
,	O
ctr	union
,	O
GCM_BLOCK_SIZE	int
-	O
4	int
)	O
;	O
WRITE_UINT32	O
(	O
buffer	pointer
->	O
b	array
+	O
GCM_BLOCK_SIZE	int
-	O
4	int
,	O
c	int
)	O
;	O
}	O
WRITE_UINT32	O
(	O
ctr	union
+	O
GCM_BLOCK_SIZE	int
-	O
4	int
,	O
c	int
)	O
;	O
}	O
void	O
gcm_encrypt	O
(	O
struct	O
gcm_ctx	struct
*	O
ctx	pointer
,	O
const	O
struct	O
gcm_key	struct
*	O
key	pointer
,	O
const	O
void	O
*	O
cipher	pointer
,	O
nettle_cipher_func	function
*	O
f	pointer
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
dst	pointer
,	O
const	O
uint8_t	char
*	O
src	pointer
)	O
{	O
assert	O
(	O
ctx	pointer
->	O
data_size	long
%	O
GCM_BLOCK_SIZE	int
==	O
0	int
)	O
;	O
_ctr_crypt16	O
(	O
cipher	pointer
,	O
f	pointer
,	O
gcm_fill	function
,	O
ctx	pointer
->	O
ctr	union
.	O
b	array
,	O
length	long
,	O
dst	pointer
,	O
src	pointer
)	O
;	O
gcm_hash	O
(	O
key	pointer
,	O
&	O
ctx	pointer
->	O
x	union
,	O
length	long
,	O
dst	pointer
)	O
;	O
ctx	pointer
->	O
data_size	long
+=	O
length	long
;	O
}	O
void	O
gcm_decrypt	O
(	O
struct	O
gcm_ctx	struct
*	O
ctx	pointer
,	O
const	O
struct	O
gcm_key	struct
*	O
key	pointer
,	O
const	O
void	O
*	O
cipher	pointer
,	O
nettle_cipher_func	function
*	O
f	pointer
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
dst	pointer
,	O
const	O
uint8_t	char
*	O
src	pointer
)	O
{	O
assert	O
(	O
ctx	pointer
->	O
data_size	long
%	O
GCM_BLOCK_SIZE	int
==	O
0	int
)	O
;	O
gcm_hash	O
(	O
key	pointer
,	O
&	O
ctx	pointer
->	O
x	union
,	O
length	long
,	O
src	pointer
)	O
;	O
_ctr_crypt16	O
(	O
cipher	pointer
,	O
f	pointer
,	O
gcm_fill	function
,	O
ctx	pointer
->	O
ctr	union
.	O
b	array
,	O
length	long
,	O
dst	pointer
,	O
src	pointer
)	O
;	O
ctx	pointer
->	O
data_size	long
+=	O
length	long
;	O
}	O
void	O
gcm_digest	O
(	O
struct	O
gcm_ctx	struct
*	O
ctx	pointer
,	O
const	O
struct	O
gcm_key	struct
*	O
key	pointer
,	O
const	O
void	O
*	O
cipher	pointer
,	O
nettle_cipher_func	function
*	O
f	pointer
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
digest	pointer
)	O
{	O
uint8_t	char
buffer	pointer
[	O
GCM_BLOCK_SIZE	int
]	O
;	O
assert	O
(	O
length	long
<=	O
GCM_BLOCK_SIZE	int
)	O
;	O
gcm_hash_sizes	function
(	O
key	pointer
,	O
&	O
ctx	pointer
->	O
x	union
,	O
ctx	pointer
->	O
auth_size	long
,	O
ctx	pointer
->	O
data_size	long
)	O
;	O
f	pointer
(	O
cipher	pointer
,	O
GCM_BLOCK_SIZE	int
,	O
buffer	pointer
,	O
ctx	pointer
->	O
iv	union
.	O
b	array
)	O
;	O
memxor3	O
(	O
digest	pointer
,	O
ctx	pointer
->	O
x	union
.	O
b	array
,	O
buffer	pointer
,	O
length	long
)	O
;	O
return	O
;	O
}	O
