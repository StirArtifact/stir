static	O
void	O
usage	function
(	O
int	O
)	O
M4_GNUC_NORETURN	O
;	O
int	O
sync_output	int
=	O
0	int
;	O
int	O
debug_level	int
=	O
0	int
;	O
size_t	long
hash_table_size	long
=	O
HASHMAX	int
;	O
int	O
no_gnu_extensions	int
=	O
0	int
;	O
int	O
prefix_all_builtins	int
=	O
0	int
;	O
int	O
max_debug_argument_length	int
=	O
0	int
;	O
int	O
suppress_warnings	int
=	O
0	int
;	O
static	O
bool	bool
fatal_warnings	bool
=	O
false	int
;	O
int	O
warning_status	int
=	O
0	int
;	O
int	O
nesting_limit	int
=	O
1024	int
;	O
int	O
retcode	int
;	O
struct	O
macro_definition	struct
{	O
struct	O
macro_definition	struct
*	O
next	pointer
;	O
int	O
code	int
;	O
const	O
char	O
*	O
arg	pointer
;	O
}	O
;	O
typedef	O
struct	O
macro_definition	struct
macro_definition	struct
;	O
void	O
m4_error	function
(	O
int	O
status	int
,	O
int	O
errnum	int
,	O
const	O
char	O
*	O
format	pointer
,	O
...	O
)	O
{	O
va_list	array
args	array
;	O
va_start	O
(	O
args	array
,	O
format	pointer
)	O
;	O
verror_at_line	function
(	O
status	int
,	O
errnum	int
,	O
current_line	int
?	O
current_file	pointer
:	O
NULL	O
,	O
current_line	int
,	O
format	pointer
,	O
args	array
)	O
;	O
if	O
(	O
fatal_warnings	bool
&&	O
!	O
retcode	int
)	O
retcode	int
=	O
EXIT_FAILURE	int
;	O
va_end	O
(	O
args	array
)	O
;	O
}	O
void	O
m4_error_at_line	function
(	O
int	O
status	int
,	O
int	O
errnum	int
,	O
const	O
char	O
*	O
file	pointer
,	O
int	O
line	int
,	O
const	O
char	O
*	O
format	pointer
,	O
...	O
)	O
{	O
va_list	array
args	array
;	O
va_start	O
(	O
args	array
,	O
format	pointer
)	O
;	O
verror_at_line	function
(	O
status	int
,	O
errnum	int
,	O
line	int
?	O
file	pointer
:	O
NULL	O
,	O
line	int
,	O
format	pointer
,	O
args	array
)	O
;	O
if	O
(	O
fatal_warnings	bool
&&	O
!	O
retcode	int
)	O
retcode	int
=	O
EXIT_FAILURE	int
;	O
va_end	O
(	O
args	array
)	O
;	O
}	O
static	O
const	O
char	O
*	O
volatile	O
program_error_message	pointer
;	O
static	O
const	O
char	O
*	O
volatile	O
signal_message	array
[	O
NSIG	O
]	O
;	O
static	O
void	O
M4_GNUC_PURE	O
fault_handler	function
(	O
int	O
signo	int
)	O
{	O
if	O
(	O
signo	int
)	O
{	O
WRITE	O
(	O
STDERR_FILENO	int
,	O
program_name	pointer
,	O
strlen	function
(	O
program_name	pointer
)	O
)	O
;	O
WRITE	O
(	O
STDERR_FILENO	int
,	O
": "	pointer
,	O
2	int
)	O
;	O
WRITE	O
(	O
STDERR_FILENO	int
,	O
program_error_message	pointer
,	O
strlen	function
(	O
program_error_message	pointer
)	O
)	O
;	O
if	O
(	O
signal_message	array
[	O
signo	int
]	O
)	O
{	O
WRITE	O
(	O
STDERR_FILENO	int
,	O
": "	pointer
,	O
2	int
)	O
;	O
WRITE	O
(	O
STDERR_FILENO	int
,	O
signal_message	array
[	O
signo	int
]	O
,	O
strlen	function
(	O
signal_message	array
[	O
signo	int
]	O
)	O
)	O
;	O
}	O
WRITE	O
(	O
STDERR_FILENO	int
,	O
"\n"	pointer
,	O
1	int
)	O
;	O
_exit	function
(	O
EXIT_INTERNAL_ERROR	int
)	O
;	O
}	O
}	O
static	O
void	O
usage	function
(	O
int	O
status	int
)	O
{	O
if	O
(	O
status	int
!=	O
EXIT_SUCCESS	int
)	O
xfprintf	function
(	O
stderr	pointer
,	O
"Try `%s --help' for more information.\n"	pointer
,	O
program_name	pointer
)	O
;	O
else	O
{	O
xprintf	function
(	O
"Usage: %s [OPTION]... [FILE]...\n"	pointer
,	O
program_name	pointer
)	O
;	O
fputs	function
(	O
"Process macros in FILEs.  If no FILE or if FILE is `-', standard input\nis read.\n"	pointer
,	O
stdout	pointer
)	O
;	O
fputs	function
(	O
"\nMandatory or optional arguments to long options are mandatory or optional\nfor short options too.\n\nOperation modes:\n      --help                   display this help and exit\n      --version                output version information and exit\n"	pointer
,	O
stdout	pointer
)	O
;	O
xprintf	function
(	O
"  -E, --fatal-warnings         once: warnings become errors, twice: stop\n                                 execution at first error\n  -i, --interactive            unbuffer output, ignore interrupts\n  -P, --prefix-builtins        force a `m4_' prefix to all builtins\n  -Q, --quiet, --silent        suppress some warnings for builtins\n      --warn-macro-sequence[=REGEXP]\n                               warn if macro definition matches REGEXP,\n                                 default %s\n"	pointer
,	O
DEFAULT_MACRO_SEQUENCE	pointer
)	O
;	O
fputs	function
(	O
"\nPreprocessor features:\n  -D, --define=NAME[=VALUE]    define NAME as having VALUE, or empty\n  -I, --include=DIRECTORY      append DIRECTORY to include path\n  -s, --synclines              generate `#line NUM \"FILE\"' lines\n  -U, --undefine=NAME          undefine NAME\n"	pointer
,	O
stdout	pointer
)	O
;	O
puts	function
(	O
""	pointer
)	O
;	O
xprintf	function
(	O
_	O
(	O
"Limits control:\n  -g, --gnu                    override -G to re-enable GNU extensions\n  -G, --traditional            suppress all GNU extensions\n  -H, --hashsize=PRIME         set symbol lookup hash table size [509]\n  -L, --nesting-limit=NUMBER   change nesting limit, 0 for unlimited [%d]\n"	pointer
)	O
,	O
nesting_limit	int
)	O
;	O
puts	function
(	O
""	pointer
)	O
;	O
fputs	function
(	O
"Frozen state files:\n  -F, --freeze-state=FILE      produce a frozen state on FILE at end\n  -R, --reload-state=FILE      reload a frozen state from FILE at start\n"	pointer
,	O
stdout	pointer
)	O
;	O
fputs	function
(	O
"\nDebugging:\n  -d, --debug[=FLAGS]          set debug level (no FLAGS implies `aeq')\n      --debugfile[=FILE]       redirect debug and trace output to FILE\n                                 (default stderr, discard if empty string)\n  -l, --arglength=NUM          restrict macro tracing size\n  -t, --trace=NAME             trace NAME when it is defined\n"	pointer
,	O
stdout	pointer
)	O
;	O
fputs	function
(	O
"\nFLAGS is any of:\n  a   show actual arguments\n  c   show before collect, after collect and after call\n  e   show expansion\n  f   say current input file name\n  i   show changes in input files\n  l   say current input line number\n  p   show results of path searches\n  q   quote values as necessary, with a or e flag\n  t   trace for all macro calls, not only traceon'ed\n  x   add a unique macro call id, useful with c flag\n  V   shorthand for all of the above flags\n"	pointer
,	O
stdout	pointer
)	O
;	O
fputs	function
(	O
"\nIf defined, the environment variable `M4PATH' is a colon-separated list\nof directories included after any specified by `-I'.\n"	pointer
,	O
stdout	pointer
)	O
;	O
fputs	function
(	O
"\nExit status is 0 for success, 1 for failure, 63 for frozen file version\nmismatch, or whatever value was passed to the m4exit macro.\n"	pointer
,	O
stdout	pointer
)	O
;	O
emit_bug_reporting_address	function
(	O
)	O
;	O
}	O
exit	function
(	O
status	int
)	O
;	O
}	O
enum	O
{	O
DEBUGFILE_OPTION	int
=	O
CHAR_MAX	O
+	O
1	int
,	O
DIVERSIONS_OPTION	int
,	O
WARN_MACRO_SEQUENCE_OPTION	int
,	O
HELP_OPTION	int
,	O
VERSION_OPTION	int
}	O
;	O
static	O
const	O
struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
"arglength"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'l'	O
}	O
,	O
{	O
"debug"	pointer
,	O
optional_argument	int
,	O
NULL	O
,	O
'd'	O
}	O
,	O
{	O
"define"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'D'	O
}	O
,	O
{	O
"error-output"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'o'	O
}	O
,	O
{	O
"fatal-warnings"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'E'	O
}	O
,	O
{	O
"freeze-state"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'F'	O
}	O
,	O
{	O
"gnu"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'g'	O
}	O
,	O
{	O
"hashsize"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'H'	O
}	O
,	O
{	O
"include"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'I'	O
}	O
,	O
{	O
"interactive"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'i'	O
}	O
,	O
{	O
"nesting-limit"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'L'	O
}	O
,	O
{	O
"prefix-builtins"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'P'	O
}	O
,	O
{	O
"quiet"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'Q'	O
}	O
,	O
{	O
"reload-state"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'R'	O
}	O
,	O
{	O
"silent"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'Q'	O
}	O
,	O
{	O
"synclines"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
's'	O
}	O
,	O
{	O
"trace"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
't'	O
}	O
,	O
{	O
"traditional"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'G'	O
}	O
,	O
{	O
"undefine"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'U'	O
}	O
,	O
{	O
"word-regexp"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'W'	O
}	O
,	O
{	O
"debugfile"	pointer
,	O
optional_argument	int
,	O
NULL	O
,	O
DEBUGFILE_OPTION	int
}	O
,	O
{	O
"diversions"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
DIVERSIONS_OPTION	int
}	O
,	O
{	O
"warn-macro-sequence"	pointer
,	O
optional_argument	int
,	O
NULL	O
,	O
WARN_MACRO_SEQUENCE_OPTION	int
}	O
,	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
HELP_OPTION	int
}	O
,	O
{	O
"version"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
VERSION_OPTION	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
,	O
}	O
;	O
static	O
void	O
process_file	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
if	O
(	O
STREQ	O
(	O
name	pointer
,	O
"-"	pointer
)	O
)	O
{	O
push_file	function
(	O
stdin	pointer
,	O
"stdin"	pointer
,	O
false	int
)	O
;	O
}	O
else	O
{	O
char	O
*	O
full_name	pointer
;	O
FILE	struct
*	O
fp	pointer
=	O
m4_path_search	function
(	O
name	pointer
,	O
&	O
full_name	pointer
)	O
;	O
if	O
(	O
fp	pointer
==	O
NULL	O
)	O
{	O
error	function
(	O
0	int
,	O
errno	O
,	O
_	O
(	O
"cannot open `%s'"	pointer
)	O
,	O
name	pointer
)	O
;	O
retcode	int
=	O
EXIT_FAILURE	int
;	O
return	O
;	O
}	O
push_file	function
(	O
fp	pointer
,	O
full_name	pointer
,	O
true	int
)	O
;	O
free	function
(	O
full_name	pointer
)	O
;	O
}	O
expand_input	function
(	O
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	pointer
)	O
{	O
struct	O
sigaction	struct
act	struct
;	O
macro_definition	struct
*	O
head	pointer
;	O
macro_definition	struct
*	O
tail	pointer
;	O
macro_definition	struct
*	O
defn	pointer
;	O
int	O
optchar	int
;	O
macro_definition	struct
*	O
defines	pointer
;	O
bool	bool
interactive	bool
=	O
false	int
;	O
bool	bool
seen_file	bool
=	O
false	int
;	O
const	O
char	O
*	O
debugfile	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
frozen_file_to_read	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
frozen_file_to_write	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
macro_sequence	pointer
=	O
""	pointer
;	O
set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
retcode	int
=	O
EXIT_SUCCESS	int
;	O
atexit	function
(	O
close_stdin	function
)	O
;	O
include_init	function
(	O
)	O
;	O
debug_init	function
(	O
)	O
;	O
program_error_message	pointer
=	O
xasprintf	function
(	O
_	O
(	O
"internal error detected; please report this bug to <%s>"	pointer
)	O
,	O
PACKAGE_BUGREPORT	pointer
)	O
;	O
signal_message	array
[	O
SIGSEGV	int
]	O
=	O
xstrdup	function
(	O
strsignal	function
(	O
SIGSEGV	int
)	O
)	O
;	O
signal_message	array
[	O
SIGABRT	int
]	O
=	O
xstrdup	function
(	O
strsignal	function
(	O
SIGABRT	int
)	O
)	O
;	O
signal_message	array
[	O
SIGILL	int
]	O
=	O
xstrdup	function
(	O
strsignal	function
(	O
SIGILL	int
)	O
)	O
;	O
signal_message	array
[	O
SIGFPE	int
]	O
=	O
xstrdup	function
(	O
strsignal	function
(	O
SIGFPE	int
)	O
)	O
;	O
if	O
(	O
SIGBUS	int
!=	O
SIGILL	int
&&	O
SIGBUS	int
!=	O
SIGSEGV	int
)	O
signal_message	array
[	O
SIGBUS	int
]	O
=	O
xstrdup	function
(	O
strsignal	function
(	O
SIGBUS	int
)	O
)	O
;	O
sigemptyset	function
(	O
&	O
act	struct
.	O
sa_mask	struct
)	O
;	O
act	struct
.	O
sa_flags	int
=	O
SA_NODEFER	int
|	O
SA_RESETHAND	int
;	O
act	struct
.	O
sa_handler	pointer
=	O
fault_handler	function
;	O
sigaction	struct
(	O
SIGSEGV	int
,	O
&	O
act	struct
,	O
NULL	O
)	O
;	O
sigaction	struct
(	O
SIGABRT	int
,	O
&	O
act	struct
,	O
NULL	O
)	O
;	O
sigaction	struct
(	O
SIGILL	int
,	O
&	O
act	struct
,	O
NULL	O
)	O
;	O
sigaction	struct
(	O
SIGFPE	int
,	O
&	O
act	struct
,	O
NULL	O
)	O
;	O
sigaction	struct
(	O
SIGBUS	int
,	O
&	O
act	struct
,	O
NULL	O
)	O
;	O
if	O
(	O
c_stack_action	function
(	O
fault_handler	function
)	O
==	O
0	int
)	O
nesting_limit	int
=	O
0	int
;	O
head	pointer
=	O
tail	pointer
=	O
NULL	O
;	O
while	O
(	O
(	O
optchar	int
=	O
getopt_long	function
(	O
argc	int
,	O
(	O
char	O
*	O
*	O
)	O
argv	pointer
,	O
OPTSTRING	pointer
,	O
long_options	array
,	O
NULL	O
)	O
)	O
!=	O
-	O
1	int
)	O
switch	O
(	O
optchar	int
)	O
{	O
default	O
:	O
usage	function
(	O
EXIT_FAILURE	int
)	O
;	O
case	O
'B'	O
:	O
case	O
'S'	O
:	O
case	O
'T'	O
:	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"warning: `m4 -%c' may be removed in a future release"	pointer
)	O
,	O
optchar	int
)	O
;	O
break	O
;	O
case	O
'N'	O
:	O
case	O
DIVERSIONS_OPTION	int
:	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"warning: `m4 %s' is deprecated"	pointer
)	O
,	O
optchar	int
==	O
'N'	O
?	O
"-N"	pointer
:	O
"--diversions"	pointer
)	O
;	O
break	O
;	O
case	O
'D'	O
:	O
case	O
'U'	O
:	O
case	O
's'	O
:	O
case	O
't'	O
:	O
case	O
'\1'	O
:	O
case	O
DEBUGFILE_OPTION	int
:	O
defn	pointer
=	O
(	O
macro_definition	struct
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
macro_definition	struct
)	O
)	O
;	O
defn	pointer
->	O
code	int
=	O
optchar	int
;	O
defn	pointer
->	O
arg	pointer
=	O
optarg	pointer
;	O
defn	pointer
->	O
next	pointer
=	O
NULL	O
;	O
if	O
(	O
head	pointer
==	O
NULL	O
)	O
head	pointer
=	O
defn	pointer
;	O
else	O
tail	pointer
->	O
next	pointer
=	O
defn	pointer
;	O
tail	pointer
=	O
defn	pointer
;	O
break	O
;	O
case	O
'E'	O
:	O
if	O
(	O
!	O
fatal_warnings	bool
)	O
fatal_warnings	bool
=	O
true	int
;	O
else	O
warning_status	int
=	O
EXIT_FAILURE	int
;	O
break	O
;	O
case	O
'F'	O
:	O
frozen_file_to_write	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
'G'	O
:	O
no_gnu_extensions	int
=	O
1	int
;	O
break	O
;	O
case	O
'H'	O
:	O
hash_table_size	long
=	O
strtol	function
(	O
optarg	pointer
,	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
hash_table_size	long
==	O
0	int
)	O
hash_table_size	long
=	O
HASHMAX	int
;	O
break	O
;	O
case	O
'I'	O
:	O
add_include_directory	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'L'	O
:	O
nesting_limit	int
=	O
strtol	function
(	O
optarg	pointer
,	O
NULL	O
,	O
10	int
)	O
;	O
break	O
;	O
case	O
'P'	O
:	O
prefix_all_builtins	int
=	O
1	int
;	O
break	O
;	O
case	O
'Q'	O
:	O
suppress_warnings	int
=	O
1	int
;	O
break	O
;	O
case	O
'R'	O
:	O
frozen_file_to_read	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
'd'	O
:	O
debug_level	int
=	O
debug_decode	function
(	O
optarg	pointer
)	O
;	O
if	O
(	O
debug_level	int
<	O
0	int
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"bad debug flags: `%s'"	pointer
)	O
,	O
optarg	pointer
)	O
;	O
debug_level	int
=	O
0	int
;	O
}	O
break	O
;	O
case	O
'e'	O
:	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"warning: `m4 -e' is deprecated, use `-i' instead"	pointer
)	O
)	O
;	O
case	O
'i'	O
:	O
interactive	bool
=	O
true	int
;	O
break	O
;	O
case	O
'g'	O
:	O
no_gnu_extensions	int
=	O
0	int
;	O
break	O
;	O
case	O
'l'	O
:	O
max_debug_argument_length	int
=	O
strtol	function
(	O
optarg	pointer
,	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
max_debug_argument_length	int
<=	O
0	int
)	O
max_debug_argument_length	int
=	O
0	int
;	O
break	O
;	O
case	O
'o'	O
:	O
debugfile	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
WARN_MACRO_SEQUENCE_OPTION	int
:	O
macro_sequence	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
VERSION_OPTION	int
:	O
version_etc	function
(	O
stdout	pointer
,	O
PACKAGE	pointer
,	O
PACKAGE_NAME	pointer
,	O
VERSION	pointer
,	O
AUTHORS	pointer
,	O
NULL	O
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
break	O
;	O
case	O
HELP_OPTION	int
:	O
usage	function
(	O
EXIT_SUCCESS	int
)	O
;	O
break	O
;	O
}	O
defines	pointer
=	O
head	pointer
;	O
if	O
(	O
debugfile	pointer
&&	O
!	O
debug_set_output	function
(	O
debugfile	pointer
)	O
)	O
M4ERROR	O
(	O
(	O
warning_status	int
,	O
errno	O
,	O
"cannot set debug file `%s'"	pointer
,	O
debugfile	pointer
)	O
)	O
;	O
input_init	function
(	O
)	O
;	O
output_init	function
(	O
)	O
;	O
symtab_init	function
(	O
)	O
;	O
set_macro_sequence	function
(	O
macro_sequence	pointer
)	O
;	O
include_env_init	function
(	O
)	O
;	O
if	O
(	O
frozen_file_to_read	pointer
)	O
reload_frozen_state	function
(	O
frozen_file_to_read	pointer
)	O
;	O
else	O
builtin_init	function
(	O
)	O
;	O
if	O
(	O
interactive	bool
)	O
{	O
signal	function
(	O
SIGINT	int
,	O
SIG_IGN	O
)	O
;	O
setbuf	function
(	O
stdout	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
while	O
(	O
defines	pointer
!=	O
NULL	O
)	O
{	O
macro_definition	struct
*	O
next	pointer
;	O
symbol	struct
*	O
sym	pointer
;	O
switch	O
(	O
defines	pointer
->	O
code	int
)	O
{	O
case	O
'D'	O
:	O
{	O
char	O
*	O
macro_name	pointer
=	O
xstrdup	function
(	O
defines	pointer
->	O
arg	pointer
)	O
;	O
char	O
*	O
macro_value	pointer
=	O
strchr	function
(	O
macro_name	pointer
,	O
'='	O
)	O
;	O
if	O
(	O
macro_value	pointer
)	O
*	O
macro_value	pointer
++	O
=	O
'\0'	O
;	O
define_user_macro	function
(	O
macro_name	pointer
,	O
macro_value	pointer
,	O
SYMBOL_INSERT	int
)	O
;	O
free	function
(	O
macro_name	pointer
)	O
;	O
}	O
break	O
;	O
case	O
'U'	O
:	O
lookup_symbol	function
(	O
defines	pointer
->	O
arg	pointer
,	O
SYMBOL_DELETE	int
)	O
;	O
break	O
;	O
case	O
't'	O
:	O
sym	pointer
=	O
lookup_symbol	function
(	O
defines	pointer
->	O
arg	pointer
,	O
SYMBOL_INSERT	int
)	O
;	O
SYMBOL_TRACED	O
(	O
sym	pointer
)	O
=	O
true	int
;	O
break	O
;	O
case	O
's'	O
:	O
sync_output	int
=	O
1	int
;	O
break	O
;	O
case	O
'\1'	O
:	O
seen_file	bool
=	O
true	int
;	O
process_file	function
(	O
defines	pointer
->	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
DEBUGFILE_OPTION	int
:	O
if	O
(	O
!	O
debug_set_output	function
(	O
defines	pointer
->	O
arg	pointer
)	O
)	O
M4ERROR	O
(	O
(	O
warning_status	int
,	O
errno	O
,	O
"cannot set debug file `%s'"	pointer
,	O
debugfile	pointer
?	O
debugfile	pointer
:	O
_	O
(	O
"stderr"	pointer
)	O
)	O
)	O
;	O
break	O
;	O
default	O
:	O
M4ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
"INTERNAL ERROR: bad code in deferred arguments"	pointer
)	O
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
next	pointer
=	O
defines	pointer
->	O
next	pointer
;	O
free	function
(	O
defines	pointer
)	O
;	O
defines	pointer
=	O
next	pointer
;	O
}	O
if	O
(	O
optind	int
==	O
argc	int
&&	O
!	O
seen_file	bool
)	O
process_file	function
(	O
"-"	pointer
)	O
;	O
else	O
for	O
(	O
;	O
optind	int
<	O
argc	int
;	O
optind	int
++	O
)	O
process_file	function
(	O
argv	pointer
[	O
optind	int
]	O
)	O
;	O
while	O
(	O
pop_wrapup	function
(	O
)	O
)	O
expand_input	function
(	O
)	O
;	O
debug_set_output	function
(	O
NULL	O
)	O
;	O
if	O
(	O
frozen_file_to_write	pointer
)	O
produce_frozen_state	function
(	O
frozen_file_to_write	pointer
)	O
;	O
else	O
{	O
make_diversion	function
(	O
0	int
)	O
;	O
undivert_all	function
(	O
)	O
;	O
}	O
output_exit	function
(	O
)	O
;	O
free_macro_sequence	function
(	O
)	O
;	O
exit	function
(	O
retcode	int
)	O
;	O
}	O
