struct	O
cachedfile	struct
{	O
char	O
*	O
name	pointer
,	O
*	O
cache	pointer
;	O
struct	O
cachedfile	struct
*	O
next	pointer
;	O
}	O
;	O
static	O
struct	O
cachedfile	struct
*	O
head	pointer
;	O
static	O
struct	O
vfs_class	struct
vfs_sfs_ops	struct
;	O
static	O
int	O
sfs_no	int
=	O
0	int
;	O
static	O
char	O
*	O
sfs_prefix	array
[	O
MAXFS	int
]	O
;	O
static	O
char	O
*	O
sfs_command	array
[	O
MAXFS	int
]	O
;	O
static	O
int	O
sfs_flags	array
[	O
MAXFS	int
]	O
;	O
static	O
int	O
sfs_vfmake	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
char	O
*	O
cache	pointer
)	O
{	O
char	O
*	O
inpath	pointer
,	O
*	O
op	pointer
;	O
int	O
w	pointer
;	O
char	O
pad	array
[	O
10240	int
]	O
;	O
char	O
*	O
s	pointer
,	O
*	O
t	long
=	O
pad	array
;	O
int	O
was_percent	int
=	O
0	int
;	O
char	O
*	O
pname	pointer
;	O
char	O
*	O
pqname	pointer
;	O
pname	pointer
=	O
g_strdup	function
(	O
name	pointer
)	O
;	O
vfs_split	function
(	O
pname	pointer
,	O
&	O
inpath	pointer
,	O
&	O
op	pointer
)	O
;	O
if	O
(	O
(	O
w	pointer
=	O
(	O
*	O
me	pointer
->	O
which	pointer
)	O
(	O
me	pointer
,	O
op	pointer
)	O
)	O
==	O
-	O
1	int
)	O
vfs_die	function
(	O
"This cannot happen... Hopefully.\n"	pointer
)	O
;	O
if	O
(	O
!	O
(	O
sfs_flags	array
[	O
w	pointer
]	O
&	O
F_1	int
)	O
&&	O
strcmp	function
(	O
pname	pointer
,	O
"/"	pointer
)	O
)	O
{	O
g_free	function
(	O
pname	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
!	O
(	O
sfs_flags	array
[	O
w	pointer
]	O
&	O
F_NOLOCALCOPY	int
)	O
)	O
{	O
s	pointer
=	O
mc_getlocalcopy	function
(	O
pname	pointer
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
{	O
g_free	function
(	O
pname	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
pqname	pointer
=	O
name_quote	function
(	O
s	pointer
,	O
0	int
)	O
;	O
g_free	function
(	O
s	pointer
)	O
;	O
}	O
else	O
{	O
pqname	pointer
=	O
name_quote	function
(	O
pname	pointer
,	O
0	int
)	O
;	O
}	O
g_free	function
(	O
pname	pointer
)	O
;	O
for	O
(	O
s	pointer
=	O
sfs_command	array
[	O
w	pointer
]	O
;	O
*	O
s	pointer
;	O
s	pointer
++	O
)	O
{	O
if	O
(	O
was_percent	int
)	O
{	O
const	O
char	O
*	O
ptr	pointer
=	O
NULL	O
;	O
was_percent	int
=	O
0	int
;	O
switch	O
(	O
*	O
s	pointer
)	O
{	O
case	O
'1'	O
:	O
ptr	pointer
=	O
pqname	pointer
;	O
break	O
;	O
case	O
'2'	O
:	O
ptr	pointer
=	O
op	pointer
+	O
strlen	function
(	O
sfs_prefix	array
[	O
w	pointer
]	O
)	O
;	O
break	O
;	O
case	O
'3'	O
:	O
ptr	pointer
=	O
cache	pointer
;	O
break	O
;	O
case	O
'%'	O
:	O
COPY_CHAR	O
;	O
continue	O
;	O
}	O
COPY_STRING	O
(	O
ptr	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
*	O
s	pointer
==	O
'%'	O
)	O
was_percent	int
=	O
1	int
;	O
else	O
COPY_CHAR	O
;	O
}	O
}	O
g_free	function
(	O
pqname	pointer
)	O
;	O
open_error_pipe	function
(	O
)	O
;	O
if	O
(	O
my_system	function
(	O
EXECUTE_AS_SHELL	O
,	O
"/bin/sh"	pointer
,	O
pad	array
)	O
)	O
{	O
close_error_pipe	function
(	O
1	int
,	O
NULL	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
close_error_pipe	function
(	O
0	int
,	O
NULL	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
const	O
char	O
*	O
sfs_redirect	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
cachedfile	struct
*	O
cur	pointer
=	O
head	pointer
;	O
char	O
*	O
cache	pointer
;	O
int	O
handle	int
;	O
while	O
(	O
cur	pointer
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
name	pointer
,	O
cur	pointer
->	O
name	pointer
)	O
)	O
{	O
vfs_stamp	function
(	O
&	O
vfs_sfs_ops	struct
,	O
cur	pointer
)	O
;	O
return	O
cur	pointer
->	O
cache	pointer
;	O
}	O
cur	pointer
=	O
cur	pointer
->	O
next	pointer
;	O
}	O
handle	int
=	O
vfs_mkstemps	function
(	O
&	O
cache	pointer
,	O
"sfs"	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
handle	int
==	O
-	O
1	int
)	O
{	O
return	O
"/SOMEONE_PLAYING_DIRTY_TMP_TRICKS_ON_US"	pointer
;	O
}	O
close	function
(	O
handle	int
)	O
;	O
if	O
(	O
!	O
sfs_vfmake	function
(	O
me	pointer
,	O
name	pointer
,	O
cache	pointer
)	O
)	O
{	O
cur	pointer
=	O
g_new	O
(	O
struct	O
cachedfile	struct
,	O
1	int
)	O
;	O
cur	pointer
->	O
name	pointer
=	O
g_strdup	function
(	O
name	pointer
)	O
;	O
cur	pointer
->	O
cache	pointer
=	O
cache	pointer
;	O
cur	pointer
->	O
next	pointer
=	O
head	pointer
;	O
head	pointer
=	O
cur	pointer
;	O
vfs_stamp_create	function
(	O
&	O
vfs_sfs_ops	struct
,	O
head	pointer
)	O
;	O
return	O
cache	pointer
;	O
}	O
unlink	function
(	O
cache	pointer
)	O
;	O
g_free	function
(	O
cache	pointer
)	O
;	O
return	O
"/I_MUST_NOT_EXIST"	pointer
;	O
}	O
static	O
void	O
*	O
sfs_open	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
path	pointer
,	O
int	O
flags	enum
,	O
int	O
mode	int
)	O
{	O
int	O
*	O
sfs_info	pointer
;	O
int	O
fd	int
;	O
path	pointer
=	O
sfs_redirect	function
(	O
me	pointer
,	O
path	pointer
)	O
;	O
fd	int
=	O
open	function
(	O
path	pointer
,	O
NO_LINEAR	O
(	O
flags	enum
)	O
,	O
mode	int
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
return	O
0	int
;	O
sfs_info	pointer
=	O
g_new	O
(	O
int	O
,	O
1	int
)	O
;	O
*	O
sfs_info	pointer
=	O
fd	int
;	O
return	O
sfs_info	pointer
;	O
}	O
static	O
int	O
sfs_stat	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
path	pointer
,	O
struct	O
stat	struct
*	O
buf	pointer
)	O
{	O
path	pointer
=	O
sfs_redirect	function
(	O
me	pointer
,	O
path	pointer
)	O
;	O
return	O
stat	struct
(	O
path	pointer
,	O
buf	pointer
)	O
;	O
}	O
static	O
int	O
sfs_lstat	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
path	pointer
,	O
struct	O
stat	struct
*	O
buf	pointer
)	O
{	O
path	pointer
=	O
sfs_redirect	function
(	O
me	pointer
,	O
path	pointer
)	O
;	O
return	O
lstat	function
(	O
path	pointer
,	O
buf	pointer
)	O
;	O
}	O
static	O
int	O
sfs_chmod	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
path	pointer
,	O
int	O
mode	int
)	O
{	O
path	pointer
=	O
sfs_redirect	function
(	O
me	pointer
,	O
path	pointer
)	O
;	O
return	O
chmod	function
(	O
path	pointer
,	O
mode	int
)	O
;	O
}	O
static	O
int	O
sfs_chown	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
path	pointer
,	O
int	O
owner	long
,	O
int	O
group	struct
)	O
{	O
path	pointer
=	O
sfs_redirect	function
(	O
me	pointer
,	O
path	pointer
)	O
;	O
return	O
chown	function
(	O
path	pointer
,	O
owner	long
,	O
group	struct
)	O
;	O
}	O
static	O
int	O
sfs_utime	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
path	pointer
,	O
struct	O
utimbuf	struct
*	O
times	pointer
)	O
{	O
path	pointer
=	O
sfs_redirect	function
(	O
me	pointer
,	O
path	pointer
)	O
;	O
return	O
utime	function
(	O
path	pointer
,	O
times	pointer
)	O
;	O
}	O
static	O
int	O
sfs_readlink	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
path	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
size	long
)	O
{	O
path	pointer
=	O
sfs_redirect	function
(	O
me	pointer
,	O
path	pointer
)	O
;	O
return	O
readlink	function
(	O
path	pointer
,	O
buf	pointer
,	O
size	long
)	O
;	O
}	O
static	O
vfsid	pointer
sfs_getid	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
path	pointer
)	O
{	O
struct	O
cachedfile	struct
*	O
cur	pointer
=	O
head	pointer
;	O
(	O
void	O
)	O
me	pointer
;	O
while	O
(	O
cur	pointer
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
path	pointer
,	O
cur	pointer
->	O
name	pointer
)	O
)	O
break	O
;	O
cur	pointer
=	O
cur	pointer
->	O
next	pointer
;	O
}	O
return	O
(	O
vfsid	pointer
)	O
cur	pointer
;	O
}	O
static	O
void	O
sfs_free	function
(	O
vfsid	pointer
id	int
)	O
{	O
struct	O
cachedfile	struct
*	O
which	pointer
=	O
(	O
struct	O
cachedfile	struct
*	O
)	O
id	int
;	O
struct	O
cachedfile	struct
*	O
cur	pointer
,	O
*	O
prev	pointer
;	O
for	O
(	O
cur	pointer
=	O
head	pointer
,	O
prev	pointer
=	O
0	int
;	O
cur	pointer
&&	O
cur	pointer
!=	O
which	pointer
;	O
prev	pointer
=	O
cur	pointer
,	O
cur	pointer
=	O
cur	pointer
->	O
next	pointer
)	O
;	O
if	O
(	O
!	O
cur	pointer
)	O
vfs_die	function
(	O
"Free of thing which is unknown to me\n"	pointer
)	O
;	O
unlink	function
(	O
cur	pointer
->	O
cache	pointer
)	O
;	O
if	O
(	O
prev	pointer
)	O
prev	pointer
->	O
next	pointer
=	O
cur	pointer
->	O
next	pointer
;	O
else	O
head	pointer
=	O
cur	pointer
->	O
next	pointer
;	O
g_free	function
(	O
cur	pointer
->	O
cache	pointer
)	O
;	O
g_free	function
(	O
cur	pointer
->	O
name	pointer
)	O
;	O
g_free	function
(	O
cur	pointer
)	O
;	O
}	O
static	O
void	O
sfs_fill_names	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
fill_names_f	pointer
func	pointer
)	O
{	O
struct	O
cachedfile	struct
*	O
cur	pointer
=	O
head	pointer
;	O
(	O
void	O
)	O
me	pointer
;	O
while	O
(	O
cur	pointer
)	O
{	O
(	O
*	O
func	pointer
)	O
(	O
cur	pointer
->	O
name	pointer
)	O
;	O
cur	pointer
=	O
cur	pointer
->	O
next	pointer
;	O
}	O
}	O
static	O
int	O
sfs_nothingisopen	function
(	O
vfsid	pointer
id	int
)	O
{	O
(	O
void	O
)	O
id	int
;	O
return	O
1	int
;	O
}	O
static	O
char	O
*	O
sfs_getlocalcopy	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
path	pointer
)	O
{	O
path	pointer
=	O
sfs_redirect	function
(	O
me	pointer
,	O
path	pointer
)	O
;	O
return	O
g_strdup	function
(	O
path	pointer
)	O
;	O
}	O
static	O
int	O
sfs_ungetlocalcopy	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
path	pointer
,	O
const	O
char	O
*	O
local	pointer
,	O
int	O
has_changed	int
)	O
{	O
(	O
void	O
)	O
me	pointer
;	O
(	O
void	O
)	O
path	pointer
;	O
(	O
void	O
)	O
local	pointer
;	O
(	O
void	O
)	O
has_changed	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
sfs_init	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
)	O
{	O
char	O
*	O
mc_sfsini	pointer
;	O
FILE	struct
*	O
cfg	pointer
;	O
char	O
key	pointer
[	O
256	int
]	O
;	O
(	O
void	O
)	O
me	pointer
;	O
mc_sfsini	pointer
=	O
concat_dir_and_file	function
(	O
mc_home	pointer
,	O
"extfs"	pointer
PATH_SEP_STR	pointer
"sfs.ini"	pointer
)	O
;	O
cfg	pointer
=	O
fopen	function
(	O
mc_sfsini	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
!	O
cfg	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"Warning: file %s not found\n"	pointer
)	O
,	O
mc_sfsini	pointer
)	O
;	O
g_free	function
(	O
mc_sfsini	pointer
)	O
;	O
return	O
0	int
;	O
}	O
g_free	function
(	O
mc_sfsini	pointer
)	O
;	O
sfs_no	int
=	O
0	int
;	O
while	O
(	O
sfs_no	int
<	O
MAXFS	int
&&	O
fgets	function
(	O
key	pointer
,	O
sizeof	O
(	O
key	pointer
)	O
,	O
cfg	pointer
)	O
)	O
{	O
char	O
*	O
c	int
,	O
*	O
semi	pointer
=	O
NULL	O
,	O
flags	enum
=	O
0	int
;	O
if	O
(	O
*	O
key	pointer
==	O
'#'	O
||	O
*	O
key	pointer
==	O
'\n'	O
)	O
continue	O
;	O
for	O
(	O
c	int
=	O
key	pointer
;	O
*	O
c	int
;	O
c	int
++	O
)	O
if	O
(	O
(	O
*	O
c	int
==	O
':'	O
)	O
||	O
(	O
*	O
c	int
==	O
'/'	O
)	O
)	O
{	O
semi	pointer
=	O
c	int
;	O
if	O
(	O
*	O
c	int
==	O
'/'	O
)	O
{	O
*	O
c	int
=	O
0	int
;	O
flags	enum
|=	O
F_FULLMATCH	int
;	O
}	O
break	O
;	O
}	O
if	O
(	O
!	O
semi	pointer
)	O
{	O
invalid_line	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"Warning: Invalid line in %s:\n%s\n"	pointer
)	O
,	O
"sfs.ini"	pointer
,	O
key	pointer
)	O
;	O
continue	O
;	O
}	O
c	int
=	O
semi	pointer
+	O
1	int
;	O
while	O
(	O
*	O
c	int
&&	O
(	O
*	O
c	int
!=	O
' '	O
)	O
&&	O
(	O
*	O
c	int
!=	O
'\t'	O
)	O
)	O
{	O
switch	O
(	O
*	O
c	int
)	O
{	O
case	O
'1'	O
:	O
flags	enum
|=	O
F_1	int
;	O
break	O
;	O
case	O
'2'	O
:	O
flags	enum
|=	O
F_2	int
;	O
break	O
;	O
case	O
'R'	O
:	O
flags	enum
|=	O
F_NOLOCALCOPY	int
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"Warning: Invalid flag %c in %s:\n%s\n"	pointer
)	O
,	O
*	O
c	int
,	O
"sfs.ini"	pointer
,	O
key	pointer
)	O
;	O
}	O
c	int
++	O
;	O
}	O
if	O
(	O
!	O
*	O
c	int
)	O
goto	O
invalid_line	O
;	O
c	int
++	O
;	O
*	O
(	O
semi	pointer
+	O
1	int
)	O
=	O
0	int
;	O
if	O
(	O
(	O
semi	pointer
=	O
strchr	function
(	O
c	int
,	O
'\n'	O
)	O
)	O
)	O
*	O
semi	pointer
=	O
0	int
;	O
sfs_prefix	array
[	O
sfs_no	int
]	O
=	O
g_strdup	function
(	O
key	pointer
)	O
;	O
sfs_command	array
[	O
sfs_no	int
]	O
=	O
g_strdup	function
(	O
c	int
)	O
;	O
sfs_flags	array
[	O
sfs_no	int
]	O
=	O
flags	enum
;	O
sfs_no	int
++	O
;	O
}	O
fclose	function
(	O
cfg	pointer
)	O
;	O
return	O
1	int
;	O
}	O
static	O
void	O
sfs_done	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
)	O
{	O
int	O
i	array
;	O
(	O
void	O
)	O
me	pointer
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
sfs_no	int
;	O
i	array
++	O
)	O
{	O
g_free	function
(	O
sfs_prefix	array
[	O
i	array
]	O
)	O
;	O
g_free	function
(	O
sfs_command	array
[	O
i	array
]	O
)	O
;	O
sfs_prefix	array
[	O
i	array
]	O
=	O
sfs_command	array
[	O
i	array
]	O
=	O
NULL	O
;	O
}	O
sfs_no	int
=	O
0	int
;	O
}	O
static	O
int	O
sfs_which	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
path	pointer
)	O
{	O
int	O
i	array
;	O
(	O
void	O
)	O
me	pointer
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
sfs_no	int
;	O
i	array
++	O
)	O
if	O
(	O
sfs_flags	array
[	O
i	array
]	O
&	O
F_FULLMATCH	int
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
path	pointer
,	O
sfs_prefix	array
[	O
i	array
]	O
)	O
)	O
return	O
i	array
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
path	pointer
,	O
sfs_prefix	array
[	O
i	array
]	O
,	O
strlen	function
(	O
sfs_prefix	array
[	O
i	array
]	O
)	O
)	O
)	O
return	O
i	array
;	O
return	O
-	O
1	int
;	O
}	O
void	O
init_sfs	function
(	O
void	O
)	O
{	O
vfs_sfs_ops	struct
.	O
name	pointer
=	O
"sfs"	pointer
;	O
vfs_sfs_ops	struct
.	O
init	pointer
=	O
sfs_init	function
;	O
vfs_sfs_ops	struct
.	O
done	pointer
=	O
sfs_done	function
;	O
vfs_sfs_ops	struct
.	O
fill_names	pointer
=	O
sfs_fill_names	function
;	O
vfs_sfs_ops	struct
.	O
which	pointer
=	O
sfs_which	function
;	O
vfs_sfs_ops	struct
.	O
open	function
=	O
sfs_open	function
;	O
vfs_sfs_ops	struct
.	O
close	function
=	O
local_close	function
;	O
vfs_sfs_ops	struct
.	O
read	function
=	O
local_read	function
;	O
vfs_sfs_ops	struct
.	O
stat	struct
=	O
sfs_stat	function
;	O
vfs_sfs_ops	struct
.	O
lstat	function
=	O
sfs_lstat	function
;	O
vfs_sfs_ops	struct
.	O
fstat	function
=	O
local_fstat	function
;	O
vfs_sfs_ops	struct
.	O
chmod	function
=	O
sfs_chmod	function
;	O
vfs_sfs_ops	struct
.	O
chown	function
=	O
sfs_chown	function
;	O
vfs_sfs_ops	struct
.	O
utime	function
=	O
sfs_utime	function
;	O
vfs_sfs_ops	struct
.	O
readlink	function
=	O
sfs_readlink	function
;	O
vfs_sfs_ops	struct
.	O
ferrno	pointer
=	O
local_errno	function
;	O
vfs_sfs_ops	struct
.	O
lseek	function
=	O
local_lseek	function
;	O
vfs_sfs_ops	struct
.	O
getid	pointer
=	O
sfs_getid	function
;	O
vfs_sfs_ops	struct
.	O
nothingisopen	pointer
=	O
sfs_nothingisopen	function
;	O
vfs_sfs_ops	struct
.	O
free	function
=	O
sfs_free	function
;	O
vfs_sfs_ops	struct
.	O
getlocalcopy	pointer
=	O
sfs_getlocalcopy	function
;	O
vfs_sfs_ops	struct
.	O
ungetlocalcopy	pointer
=	O
sfs_ungetlocalcopy	function
;	O
vfs_register_class	function
(	O
&	O
vfs_sfs_ops	struct
)	O
;	O
}	O
