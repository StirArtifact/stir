static	O
PyObject	O
*	O
_repr	function
(	O
PyObject	O
*	O
self	pointer
)	O
{	O
char	O
buf	pointer
[	O
80	int
]	O
;	O
sprintf	O
(	O
buf	pointer
,	O
"<"	pointer
PY_MODULE	pointer
"."	pointer
PY_CSNAME	pointer
" instance at %p>"	pointer
,	O
self	pointer
)	O
;	O
return	O
PyUnicode_FromString	function
(	O
buf	pointer
)	O
;	O
}	O
static	O
PyTypeObject	O
PyAttributeType	int
=	O
{	O
.	O
ob_base	O
=	O
{	O
PyObject_HEAD_INIT	function
(	O
NULL	O
)	O
}	O
,	O
.	O
tp_name	O
=	O
PY_MODULE	pointer
"."	pointer
PY_CSNAME	pointer
,	O
.	O
tp_basicsize	O
=	O
sizeof	O
(	O
PyAttribute	O
)	O
,	O
.	O
tp_dealloc	O
=	O
(	O
destructor	O
)	O
_py_dealloc	function
,	O
.	O
tp_repr	O
=	O
_repr	function
,	O
.	O
tp_str	O
=	O
_repr	function
,	O
.	O
tp_flags	O
=	O
Py_TPFLAGS_DEFAULT	O
,	O
.	O
tp_doc	O
=	O
""	pointer
,	O
}	O
;	O
PyAttribute	O
*	O
PyAttribute_NEW	function
(	O
)	O
{	O
return	O
(	O
PyAttribute	O
*	O
)	O
PyObject_NEW	O
(	O
PyAttribute	O
,	O
&	O
PyAttributeType	int
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_attribute_create	function
(	O
PyObject	O
*	O
self	pointer
,	O
PyObject	O
*	O
args	pointer
)	O
{	O
int	O
status	int
;	O
PyAttribute	O
*	O
py_attr	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	function
(	O
args	pointer
,	O
"O!"	pointer
,	O
&	O
PyAttributeType	int
,	O
&	O
py_attr	O
)	O
)	O
return	O
NULL	O
;	O
status	int
=	O
mu_attribute_create	function
(	O
&	O
py_attr	O
->	O
attr	O
,	O
NULL	O
)	O
;	O
return	O
_ro	function
(	O
PyLong_FromLong	function
(	O
status	int
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_attribute_destroy	function
(	O
PyObject	O
*	O
self	pointer
,	O
PyObject	O
*	O
args	pointer
)	O
{	O
PyAttribute	O
*	O
py_attr	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	function
(	O
args	pointer
,	O
"O!"	pointer
,	O
&	O
PyAttributeType	int
,	O
&	O
py_attr	O
)	O
)	O
return	O
NULL	O
;	O
mu_attribute_destroy	function
(	O
&	O
py_attr	O
->	O
attr	O
,	O
NULL	O
)	O
;	O
return	O
_ro	function
(	O
Py_None	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_attribute_is_modified	function
(	O
PyObject	O
*	O
self	pointer
,	O
PyObject	O
*	O
args	pointer
)	O
{	O
int	O
state	int
;	O
PyAttribute	O
*	O
py_attr	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	function
(	O
args	pointer
,	O
"O!"	pointer
,	O
&	O
PyAttributeType	int
,	O
&	O
py_attr	O
)	O
)	O
return	O
NULL	O
;	O
state	int
=	O
mu_attribute_is_modified	function
(	O
py_attr	O
->	O
attr	O
)	O
;	O
return	O
_ro	function
(	O
PyBool_FromLong	function
(	O
state	int
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_attribute_clear_modified	function
(	O
PyObject	O
*	O
self	pointer
,	O
PyObject	O
*	O
args	pointer
)	O
{	O
PyAttribute	O
*	O
py_attr	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	function
(	O
args	pointer
,	O
"O!"	pointer
,	O
&	O
PyAttributeType	int
,	O
&	O
py_attr	O
)	O
)	O
return	O
NULL	O
;	O
mu_attribute_clear_modified	function
(	O
py_attr	O
->	O
attr	O
)	O
;	O
return	O
_ro	function
(	O
Py_None	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_attribute_set_modified	function
(	O
PyObject	O
*	O
self	pointer
,	O
PyObject	O
*	O
args	pointer
)	O
{	O
PyAttribute	O
*	O
py_attr	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	function
(	O
args	pointer
,	O
"O!"	pointer
,	O
&	O
PyAttributeType	int
,	O
&	O
py_attr	O
)	O
)	O
return	O
NULL	O
;	O
mu_attribute_set_modified	function
(	O
py_attr	O
->	O
attr	O
)	O
;	O
return	O
_ro	function
(	O
Py_None	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_attribute_get_flags	function
(	O
PyObject	O
*	O
self	pointer
,	O
PyObject	O
*	O
args	pointer
)	O
{	O
int	O
status	int
,	O
flags	int
=	O
0	int
;	O
PyAttribute	O
*	O
py_attr	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	function
(	O
args	pointer
,	O
"O!"	pointer
,	O
&	O
PyAttributeType	int
,	O
&	O
py_attr	O
)	O
)	O
return	O
NULL	O
;	O
status	int
=	O
mu_attribute_get_flags	function
(	O
py_attr	O
->	O
attr	O
,	O
&	O
flags	int
)	O
;	O
return	O
status_object	function
(	O
status	int
,	O
PyLong_FromLong	function
(	O
flags	int
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_attribute_set_flags	function
(	O
PyObject	O
*	O
self	pointer
,	O
PyObject	O
*	O
args	pointer
)	O
{	O
int	O
status	int
,	O
flags	int
;	O
PyAttribute	O
*	O
py_attr	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	function
(	O
args	pointer
,	O
"O!i"	pointer
,	O
&	O
PyAttributeType	int
,	O
&	O
py_attr	O
,	O
&	O
flags	int
)	O
)	O
return	O
NULL	O
;	O
status	int
=	O
mu_attribute_set_flags	function
(	O
py_attr	O
->	O
attr	O
,	O
flags	int
)	O
;	O
return	O
_ro	function
(	O
PyLong_FromLong	function
(	O
status	int
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_attribute_unset_flags	function
(	O
PyObject	O
*	O
self	pointer
,	O
PyObject	O
*	O
args	pointer
)	O
{	O
int	O
status	int
,	O
flags	int
;	O
PyAttribute	O
*	O
py_attr	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	function
(	O
args	pointer
,	O
"O!i"	pointer
,	O
&	O
PyAttributeType	int
,	O
&	O
py_attr	O
,	O
&	O
flags	int
)	O
)	O
return	O
NULL	O
;	O
status	int
=	O
mu_attribute_unset_flags	function
(	O
py_attr	O
->	O
attr	O
,	O
flags	int
)	O
;	O
return	O
_ro	function
(	O
PyLong_FromLong	function
(	O
status	int
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_attribute_is_userflag	function
(	O
PyObject	O
*	O
self	pointer
,	O
PyObject	O
*	O
args	pointer
)	O
{	O
int	O
state	int
,	O
flag	int
;	O
PyAttribute	O
*	O
py_attr	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	function
(	O
args	pointer
,	O
"O!i"	pointer
,	O
&	O
PyAttributeType	int
,	O
&	O
py_attr	O
,	O
&	O
flag	int
)	O
)	O
return	O
NULL	O
;	O
state	int
=	O
mu_attribute_is_userflag	function
(	O
py_attr	O
->	O
attr	O
,	O
flag	int
)	O
;	O
return	O
_ro	function
(	O
PyBool_FromLong	function
(	O
state	int
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_attribute_set_userflag	function
(	O
PyObject	O
*	O
self	pointer
,	O
PyObject	O
*	O
args	pointer
)	O
{	O
int	O
status	int
,	O
flag	int
;	O
PyAttribute	O
*	O
py_attr	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	function
(	O
args	pointer
,	O
"O!i"	pointer
,	O
&	O
PyAttributeType	int
,	O
&	O
py_attr	O
,	O
&	O
flag	int
)	O
)	O
return	O
NULL	O
;	O
status	int
=	O
mu_attribute_set_userflag	function
(	O
py_attr	O
->	O
attr	O
,	O
flag	int
)	O
;	O
return	O
_ro	function
(	O
PyLong_FromLong	function
(	O
status	int
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_attribute_unset_userflag	function
(	O
PyObject	O
*	O
self	pointer
,	O
PyObject	O
*	O
args	pointer
)	O
{	O
int	O
status	int
,	O
flag	int
;	O
PyAttribute	O
*	O
py_attr	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	function
(	O
args	pointer
,	O
"O!i"	pointer
,	O
&	O
PyAttributeType	int
,	O
&	O
py_attr	O
,	O
&	O
flag	int
)	O
)	O
return	O
NULL	O
;	O
status	int
=	O
mu_attribute_unset_userflag	function
(	O
py_attr	O
->	O
attr	O
,	O
flag	int
)	O
;	O
return	O
_ro	function
(	O
PyLong_FromLong	function
(	O
status	int
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_attribute_to_string	function
(	O
PyObject	O
*	O
self	pointer
,	O
PyObject	O
*	O
args	pointer
)	O
{	O
char	O
buf	pointer
[	O
MU_STATUS_BUF_SIZE	O
]	O
;	O
size_t	int
na	O
=	O
0	int
;	O
PyAttribute	O
*	O
py_attr	O
;	O
memset	O
(	O
buf	pointer
,	O
0	int
,	O
sizeof	O
(	O
buf	pointer
)	O
)	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	function
(	O
args	pointer
,	O
"O!"	pointer
,	O
&	O
PyAttributeType	int
,	O
&	O
py_attr	O
)	O
)	O
return	O
NULL	O
;	O
mu_attribute_to_string	function
(	O
py_attr	O
->	O
attr	O
,	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
&	O
na	O
)	O
;	O
return	O
_ro	function
(	O
PyUnicode_FromString	function
(	O
buf	pointer
)	O
)	O
;	O
}	O
static	O
PyMethodDef	O
methods	array
[	O
]	O
=	O
{	O
{	O
"create"	pointer
,	O
(	O
PyCFunction	O
)	O
api_attribute_create	function
,	O
METH_VARARGS	O
,	O
""	pointer
}	O
,	O
{	O
"destroy"	pointer
,	O
(	O
PyCFunction	O
)	O
api_attribute_destroy	function
,	O
METH_VARARGS	O
,	O
""	pointer
}	O
,	O
{	O
"is_modified"	pointer
,	O
(	O
PyCFunction	O
)	O
api_attribute_is_modified	function
,	O
METH_VARARGS	O
,	O
"Return True or False whether attribute has been modified."	pointer
}	O
,	O
{	O
"clear_modified"	pointer
,	O
(	O
PyCFunction	O
)	O
api_attribute_clear_modified	function
,	O
METH_VARARGS	O
,	O
""	pointer
}	O
,	O
{	O
"set_modified"	pointer
,	O
(	O
PyCFunction	O
)	O
api_attribute_set_modified	function
,	O
METH_VARARGS	O
,	O
""	pointer
}	O
,	O
{	O
"get_flags"	pointer
,	O
(	O
PyCFunction	O
)	O
api_attribute_get_flags	function
,	O
METH_VARARGS	O
,	O
""	pointer
}	O
,	O
{	O
"set_flags"	pointer
,	O
(	O
PyCFunction	O
)	O
api_attribute_set_flags	function
,	O
METH_VARARGS	O
,	O
""	pointer
}	O
,	O
{	O
"unset_flags"	pointer
,	O
(	O
PyCFunction	O
)	O
api_attribute_unset_flags	function
,	O
METH_VARARGS	O
,	O
""	pointer
}	O
,	O
{	O
"is_userflag"	pointer
,	O
(	O
PyCFunction	O
)	O
api_attribute_is_userflag	function
,	O
METH_VARARGS	O
,	O
""	pointer
}	O
,	O
{	O
"set_userflag"	pointer
,	O
(	O
PyCFunction	O
)	O
api_attribute_set_userflag	function
,	O
METH_VARARGS	O
,	O
""	pointer
}	O
,	O
{	O
"unset_userflag"	pointer
,	O
(	O
PyCFunction	O
)	O
api_attribute_unset_userflag	function
,	O
METH_VARARGS	O
,	O
""	pointer
}	O
,	O
{	O
"to_string"	pointer
,	O
(	O
PyCFunction	O
)	O
api_attribute_to_string	function
,	O
METH_VARARGS	O
,	O
""	pointer
}	O
,	O
{	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
NULL	O
}	O
}	O
;	O
static	O
struct	O
PyModuleDef	O
moduledef	struct
=	O
{	O
PyModuleDef_HEAD_INIT	O
,	O
PY_MODULE	pointer
,	O
NULL	O
,	O
-	O
1	int
,	O
methods	array
}	O
;	O
int	O
mu_py_init_attribute	function
(	O
void	O
)	O
{	O
PyAttributeType	int
.	O
tp_new	O
=	O
PyType_GenericNew	O
;	O
return	O
PyType_Ready	function
(	O
&	O
PyAttributeType	int
)	O
;	O
}	O
void	O
_mu_py_attach_attribute	function
(	O
void	O
)	O
{	O
PyObject	O
*	O
m	O
;	O
if	O
(	O
(	O
m	O
=	O
_mu_py_attach_module	function
(	O
&	O
moduledef	struct
)	O
)	O
)	O
{	O
Py_INCREF	function
(	O
&	O
PyAttributeType	int
)	O
;	O
PyModule_AddObject	function
(	O
m	O
,	O
PY_CSNAME	pointer
,	O
(	O
PyObject	O
*	O
)	O
&	O
PyAttributeType	int
)	O
;	O
}	O
}	O
