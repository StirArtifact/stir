int	O
fish_directory_timeout	int
=	O
900	int
;	O
static	O
char	O
reply_str	array
[	O
80	int
]	O
;	O
static	O
struct	O
vfs_class	struct
vfs_fish_ops	struct
;	O
static	O
int	O
fish_command	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
struct	O
vfs_s_super	struct
*	O
super	pointer
,	O
int	O
wait_reply	int
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
__attribute__	O
(	O
(	O
format	pointer
(	O
__printf__	O
,	O
4	int
,	O
5	int
)	O
)	O
)	O
;	O
static	O
int	O
fish_decode_reply	function
(	O
char	O
*	O
s	pointer
,	O
int	O
was_garbage	int
)	O
{	O
int	O
code	int
;	O
if	O
(	O
!	O
sscanf	function
(	O
s	pointer
,	O
"%d"	pointer
,	O
&	O
code	int
)	O
)	O
{	O
code	int
=	O
500	int
;	O
return	O
5	int
;	O
}	O
if	O
(	O
code	int
<	O
100	int
)	O
return	O
was_garbage	int
?	O
ERROR	int
:	O
(	O
!	O
code	int
?	O
COMPLETE	int
:	O
PRELIM	int
)	O
;	O
return	O
code	int
/	O
100	int
;	O
}	O
static	O
int	O
fish_get_reply	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
int	O
sock	int
,	O
char	O
*	O
string_buf	pointer
,	O
int	O
string_len	long
)	O
{	O
char	O
answer	array
[	O
1024	int
]	O
;	O
int	O
was_garbage	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
!	O
vfs_s_get_line	function
(	O
me	pointer
,	O
sock	int
,	O
answer	array
,	O
sizeof	O
(	O
answer	array
)	O
,	O
'\n'	O
)	O
)	O
{	O
if	O
(	O
string_buf	pointer
)	O
*	O
string_buf	pointer
=	O
0	int
;	O
return	O
4	int
;	O
}	O
if	O
(	O
strncmp	function
(	O
answer	array
,	O
"### "	pointer
,	O
4	int
)	O
)	O
{	O
was_garbage	int
=	O
1	int
;	O
if	O
(	O
string_buf	pointer
)	O
g_strlcpy	function
(	O
string_buf	pointer
,	O
answer	array
,	O
string_len	long
)	O
;	O
}	O
else	O
return	O
fish_decode_reply	function
(	O
answer	array
+	O
4	int
,	O
was_garbage	int
)	O
;	O
}	O
}	O
static	O
int	O
fish_command	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
struct	O
vfs_s_super	struct
*	O
super	pointer
,	O
int	O
wait_reply	int
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
char	O
*	O
str	pointer
;	O
int	O
status	int
;	O
FILE	struct
*	O
logfile	pointer
=	O
MEDATA	O
->	O
logfile	pointer
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
str	pointer
=	O
g_strdup_vprintf	function
(	O
fmt	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
if	O
(	O
logfile	pointer
)	O
{	O
fwrite	function
(	O
str	pointer
,	O
strlen	function
(	O
str	pointer
)	O
,	O
1	int
,	O
logfile	pointer
)	O
;	O
fflush	function
(	O
logfile	pointer
)	O
;	O
}	O
enable_interrupt_key	O
(	O
)	O
;	O
status	int
=	O
write	function
(	O
SUP	O
.	O
sockw	int
,	O
str	pointer
,	O
strlen	function
(	O
str	pointer
)	O
)	O
;	O
g_free	function
(	O
str	pointer
)	O
;	O
disable_interrupt_key	O
(	O
)	O
;	O
if	O
(	O
status	int
<	O
0	int
)	O
return	O
TRANSIENT	int
;	O
if	O
(	O
wait_reply	int
)	O
return	O
fish_get_reply	function
(	O
me	pointer
,	O
SUP	O
.	O
sockr	int
,	O
(	O
wait_reply	int
&	O
WANT_STRING	int
)	O
?	O
reply_str	array
:	O
NULL	O
,	O
sizeof	O
(	O
reply_str	array
)	O
-	O
1	int
)	O
;	O
return	O
COMPLETE	int
;	O
}	O
static	O
void	O
fish_free_archive	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
struct	O
vfs_s_super	struct
*	O
super	pointer
)	O
{	O
if	O
(	O
(	O
SUP	O
.	O
sockw	int
!=	O
-	O
1	int
)	O
||	O
(	O
SUP	O
.	O
sockr	int
!=	O
-	O
1	int
)	O
)	O
{	O
print_vfs_message	function
(	O
_	O
(	O
"fish: Disconnecting from %s"	pointer
)	O
,	O
super	pointer
->	O
name	pointer
?	O
super	pointer
->	O
name	pointer
:	O
"???"	pointer
)	O
;	O
fish_command	function
(	O
me	pointer
,	O
super	pointer
,	O
NONE	int
,	O
"#BYE\nexit\n"	pointer
)	O
;	O
close	function
(	O
SUP	O
.	O
sockw	int
)	O
;	O
close	function
(	O
SUP	O
.	O
sockr	int
)	O
;	O
SUP	O
.	O
sockw	int
=	O
SUP	O
.	O
sockr	int
=	O
-	O
1	int
;	O
}	O
g_free	function
(	O
SUP	O
.	O
host	pointer
)	O
;	O
g_free	function
(	O
SUP	O
.	O
user	pointer
)	O
;	O
g_free	function
(	O
SUP	O
.	O
cwdir	pointer
)	O
;	O
g_free	function
(	O
SUP	O
.	O
password	pointer
)	O
;	O
}	O
static	O
void	O
fish_pipeopen	function
(	O
struct	O
vfs_s_super	struct
*	O
super	pointer
,	O
const	O
char	O
*	O
path	pointer
,	O
const	O
char	O
*	O
argv	pointer
[	O
]	O
)	O
{	O
int	O
fileset1	array
[	O
2	int
]	O
,	O
fileset2	array
[	O
2	int
]	O
;	O
int	O
res	int
;	O
if	O
(	O
(	O
pipe	function
(	O
fileset1	array
)	O
<	O
0	int
)	O
||	O
(	O
pipe	function
(	O
fileset2	array
)	O
<	O
0	int
)	O
)	O
vfs_die	function
(	O
"Cannot pipe(): %m."	pointer
)	O
;	O
if	O
(	O
(	O
res	int
=	O
fork	function
(	O
)	O
)	O
)	O
{	O
if	O
(	O
res	int
<	O
0	int
)	O
vfs_die	function
(	O
"Cannot fork(): %m."	pointer
)	O
;	O
close	function
(	O
fileset1	array
[	O
0	int
]	O
)	O
;	O
SUP	O
.	O
sockw	int
=	O
fileset1	array
[	O
1	int
]	O
;	O
close	function
(	O
fileset2	array
[	O
1	int
]	O
)	O
;	O
SUP	O
.	O
sockr	int
=	O
fileset2	array
[	O
0	int
]	O
;	O
}	O
else	O
{	O
close	function
(	O
0	int
)	O
;	O
dup	function
(	O
fileset1	array
[	O
0	int
]	O
)	O
;	O
close	function
(	O
fileset1	array
[	O
0	int
]	O
)	O
;	O
close	function
(	O
fileset1	array
[	O
1	int
]	O
)	O
;	O
close	function
(	O
1	int
)	O
;	O
close	function
(	O
2	int
)	O
;	O
dup	function
(	O
fileset2	array
[	O
1	int
]	O
)	O
;	O
open	function
(	O
"/dev/null"	pointer
,	O
O_WRONLY	int
)	O
;	O
close	function
(	O
fileset2	array
[	O
0	int
]	O
)	O
;	O
close	function
(	O
fileset2	array
[	O
1	int
]	O
)	O
;	O
execvp	function
(	O
path	pointer
,	O
const_cast	O
(	O
char	O
*	O
*	O
,	O
argv	pointer
)	O
)	O
;	O
_exit	function
(	O
3	int
)	O
;	O
}	O
}	O
static	O
char	O
*	O
fish_getcwd	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
struct	O
vfs_s_super	struct
*	O
super	pointer
)	O
{	O
if	O
(	O
fish_command	function
(	O
me	pointer
,	O
super	pointer
,	O
WANT_STRING	int
,	O
"#PWD\npwd; echo '### 200'\n"	pointer
)	O
==	O
COMPLETE	int
)	O
return	O
g_strconcat	function
(	O
reply_str	array
,	O
"/"	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
ERRNOR	O
(	O
EIO	int
,	O
NULL	O
)	O
;	O
}	O
static	O
int	O
fish_open_archive_int	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
struct	O
vfs_s_super	struct
*	O
super	pointer
)	O
{	O
{	O
const	O
char	O
*	O
argv	pointer
[	O
10	int
]	O
;	O
const	O
char	O
*	O
xsh	pointer
=	O
(	O
SUP	O
.	O
flags	enum
==	O
FISH_FLAG_RSH	int
?	O
"rsh"	pointer
:	O
"ssh"	pointer
)	O
;	O
int	O
i	array
=	O
0	int
;	O
argv	pointer
[	O
i	array
++	O
]	O
=	O
xsh	pointer
;	O
if	O
(	O
SUP	O
.	O
flags	enum
==	O
FISH_FLAG_COMPRESSED	int
)	O
argv	pointer
[	O
i	array
++	O
]	O
=	O
"-C"	pointer
;	O
argv	pointer
[	O
i	array
++	O
]	O
=	O
"-l"	pointer
;	O
argv	pointer
[	O
i	array
++	O
]	O
=	O
SUP	O
.	O
user	pointer
;	O
argv	pointer
[	O
i	array
++	O
]	O
=	O
SUP	O
.	O
host	pointer
;	O
argv	pointer
[	O
i	array
++	O
]	O
=	O
"echo FISH:; /bin/sh"	pointer
;	O
argv	pointer
[	O
i	array
++	O
]	O
=	O
NULL	O
;	O
fish_pipeopen	function
(	O
super	pointer
,	O
xsh	pointer
,	O
argv	pointer
)	O
;	O
}	O
{	O
char	O
answer	array
[	O
2048	int
]	O
;	O
print_vfs_message	function
(	O
_	O
(	O
"fish: Waiting for initial line..."	pointer
)	O
)	O
;	O
if	O
(	O
!	O
vfs_s_get_line	function
(	O
me	pointer
,	O
SUP	O
.	O
sockr	int
,	O
answer	array
,	O
sizeof	O
(	O
answer	array
)	O
,	O
':'	O
)	O
)	O
ERRNOR	O
(	O
E_PROTO	O
,	O
-	O
1	int
)	O
;	O
print_vfs_message	function
(	O
"%s"	pointer
,	O
answer	array
)	O
;	O
if	O
(	O
strstr	function
(	O
answer	array
,	O
"assword"	pointer
)	O
)	O
{	O
message	pointer
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
"Sorry, we cannot do password authenticated connections for now."	pointer
)	O
)	O
;	O
ERRNOR	O
(	O
EPERM	int
,	O
-	O
1	int
)	O
;	O
if	O
(	O
!	O
SUP	O
.	O
password	pointer
)	O
{	O
char	O
*	O
p	pointer
,	O
*	O
op	pointer
;	O
p	pointer
=	O
g_strconcat	function
(	O
_	O
(	O
" fish: Password required for "	pointer
)	O
,	O
SUP	O
.	O
user	pointer
,	O
" "	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
op	pointer
=	O
vfs_get_password	function
(	O
p	pointer
)	O
;	O
g_free	function
(	O
p	pointer
)	O
;	O
if	O
(	O
op	pointer
==	O
NULL	O
)	O
ERRNOR	O
(	O
EPERM	int
,	O
-	O
1	int
)	O
;	O
SUP	O
.	O
password	pointer
=	O
op	pointer
;	O
}	O
print_vfs_message	function
(	O
_	O
(	O
"fish: Sending password..."	pointer
)	O
)	O
;	O
write	function
(	O
SUP	O
.	O
sockw	int
,	O
SUP	O
.	O
password	pointer
,	O
strlen	function
(	O
SUP	O
.	O
password	pointer
)	O
)	O
;	O
write	function
(	O
SUP	O
.	O
sockw	int
,	O
"\n"	pointer
,	O
1	int
)	O
;	O
}	O
}	O
print_vfs_message	function
(	O
_	O
(	O
"fish: Sending initial line..."	pointer
)	O
)	O
;	O
if	O
(	O
fish_command	function
(	O
me	pointer
,	O
super	pointer
,	O
WAIT_REPLY	int
,	O
"#FISH\necho; start_fish_server 2>&1; echo '### 200'\n"	pointer
)	O
!=	O
COMPLETE	int
)	O
ERRNOR	O
(	O
E_PROTO	O
,	O
-	O
1	int
)	O
;	O
print_vfs_message	function
(	O
_	O
(	O
"fish: Handshaking version..."	pointer
)	O
)	O
;	O
if	O
(	O
fish_command	function
(	O
me	pointer
,	O
super	pointer
,	O
WAIT_REPLY	int
,	O
"#VER 0.0.0\necho '### 000'\n"	pointer
)	O
!=	O
COMPLETE	int
)	O
ERRNOR	O
(	O
E_PROTO	O
,	O
-	O
1	int
)	O
;	O
if	O
(	O
fish_command	function
(	O
me	pointer
,	O
super	pointer
,	O
WAIT_REPLY	int
,	O
"LANG=C; LC_ALL=C; LC_TIME=C\n"	pointer
"export LANG; export LC_ALL; export LC_TIME\n"	pointer
"echo '### 200'\n"	pointer
)	O
!=	O
COMPLETE	int
)	O
ERRNOR	O
(	O
E_PROTO	O
,	O
-	O
1	int
)	O
;	O
print_vfs_message	function
(	O
_	O
(	O
"fish: Setting up current directory..."	pointer
)	O
)	O
;	O
SUP	O
.	O
cwdir	pointer
=	O
fish_getcwd	function
(	O
me	pointer
,	O
super	pointer
)	O
;	O
print_vfs_message	function
(	O
_	O
(	O
"fish: Connected, home %s."	pointer
)	O
,	O
SUP	O
.	O
cwdir	pointer
)	O
;	O
super	pointer
->	O
name	pointer
=	O
g_strdup	function
(	O
PATH_SEP_STR	pointer
)	O
;	O
super	pointer
->	O
root	pointer
=	O
vfs_s_new_inode	function
(	O
me	pointer
,	O
super	pointer
,	O
vfs_s_default_stat	function
(	O
me	pointer
,	O
S_IFDIR	O
|	O
0755	int
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
fish_open_archive	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
struct	O
vfs_s_super	struct
*	O
super	pointer
,	O
const	O
char	O
*	O
archive_name	pointer
,	O
char	O
*	O
op	pointer
)	O
{	O
char	O
*	O
host	pointer
,	O
*	O
user	pointer
,	O
*	O
password	pointer
,	O
*	O
p	pointer
;	O
int	O
flags	enum
;	O
(	O
void	O
)	O
archive_name	pointer
;	O
p	pointer
=	O
vfs_split_url	function
(	O
strchr	function
(	O
op	pointer
,	O
':'	O
)	O
+	O
1	int
,	O
&	O
host	pointer
,	O
&	O
user	pointer
,	O
&	O
flags	enum
,	O
&	O
password	pointer
,	O
0	int
,	O
URL_NOSLASH	int
)	O
;	O
g_free	function
(	O
p	pointer
)	O
;	O
SUP	O
.	O
host	pointer
=	O
host	pointer
;	O
SUP	O
.	O
user	pointer
=	O
user	pointer
;	O
SUP	O
.	O
flags	enum
=	O
flags	enum
;	O
if	O
(	O
!	O
strncmp	function
(	O
op	pointer
,	O
"rsh:"	pointer
,	O
4	int
)	O
)	O
SUP	O
.	O
flags	enum
|=	O
FISH_FLAG_RSH	int
;	O
SUP	O
.	O
cwdir	pointer
=	O
NULL	O
;	O
if	O
(	O
password	pointer
)	O
SUP	O
.	O
password	pointer
=	O
password	pointer
;	O
return	O
fish_open_archive_int	function
(	O
me	pointer
,	O
super	pointer
)	O
;	O
}	O
static	O
int	O
fish_archive_same	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
struct	O
vfs_s_super	struct
*	O
super	pointer
,	O
const	O
char	O
*	O
archive_name	pointer
,	O
char	O
*	O
op	pointer
,	O
void	O
*	O
cookie	pointer
)	O
{	O
char	O
*	O
host	pointer
,	O
*	O
user	pointer
;	O
int	O
flags	enum
;	O
(	O
void	O
)	O
me	pointer
;	O
(	O
void	O
)	O
archive_name	pointer
;	O
(	O
void	O
)	O
cookie	pointer
;	O
op	pointer
=	O
vfs_split_url	function
(	O
strchr	function
(	O
op	pointer
,	O
':'	O
)	O
+	O
1	int
,	O
&	O
host	pointer
,	O
&	O
user	pointer
,	O
&	O
flags	enum
,	O
0	int
,	O
0	int
,	O
URL_NOSLASH	int
)	O
;	O
g_free	function
(	O
op	pointer
)	O
;	O
flags	enum
=	O
(	O
(	O
strcmp	function
(	O
host	pointer
,	O
SUP	O
.	O
host	pointer
)	O
==	O
0	int
)	O
&&	O
(	O
strcmp	function
(	O
user	pointer
,	O
SUP	O
.	O
user	pointer
)	O
==	O
0	int
)	O
&&	O
(	O
flags	enum
==	O
SUP	O
.	O
flags	enum
)	O
)	O
;	O
g_free	function
(	O
host	pointer
)	O
;	O
g_free	function
(	O
user	pointer
)	O
;	O
return	O
flags	enum
;	O
}	O
static	O
int	O
fish_dir_load	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
struct	O
vfs_s_inode	struct
*	O
dir	pointer
,	O
char	O
*	O
remote_path	pointer
)	O
{	O
struct	O
vfs_s_super	struct
*	O
super	pointer
=	O
dir	pointer
->	O
super	pointer
;	O
char	O
buffer	pointer
[	O
8192	int
]	O
;	O
struct	O
vfs_s_entry	struct
*	O
ent	pointer
=	O
NULL	O
;	O
FILE	struct
*	O
logfile	pointer
;	O
char	O
*	O
quoted_path	pointer
;	O
logfile	pointer
=	O
MEDATA	O
->	O
logfile	pointer
;	O
print_vfs_message	function
(	O
_	O
(	O
"fish: Reading directory %s..."	pointer
)	O
,	O
remote_path	pointer
)	O
;	O
gettimeofday	function
(	O
&	O
dir	pointer
->	O
timestamp	struct
,	O
NULL	O
)	O
;	O
dir	pointer
->	O
timestamp	struct
.	O
tv_sec	long
+=	O
fish_directory_timeout	int
;	O
quoted_path	pointer
=	O
name_quote	function
(	O
remote_path	pointer
,	O
0	int
)	O
;	O
fish_command	function
(	O
me	pointer
,	O
super	pointer
,	O
NONE	int
,	O
"#LIST /%s\n"	pointer
"ls -lLan /%s 2>/dev/null | grep '^[^cbt]' | (\n"	pointer
"while read p l u g s m d y n; do\n"	pointer
"echo \"P$p $u.$g\nS$s\nd$m $d $y\n:$n\n\"\n"	pointer
"done\n"	pointer
")\n"	pointer
"ls -lan /%s 2>/dev/null | grep '^[cb]' | (\n"	pointer
"while read p l u g a i m d y n; do\n"	pointer
"echo \"P$p $u.$g\nE$a$i\nd$m $d $y\n:$n\n\"\n"	pointer
"done\n"	pointer
")\n"	pointer
"echo '### 200'\n"	pointer
,	O
remote_path	pointer
,	O
quoted_path	pointer
,	O
quoted_path	pointer
)	O
;	O
g_free	function
(	O
quoted_path	pointer
)	O
;	O
ent	pointer
=	O
vfs_s_generate_entry	function
(	O
me	pointer
,	O
NULL	O
,	O
dir	pointer
,	O
0	int
)	O
;	O
while	O
(	O
1	int
)	O
{	O
int	O
res	int
=	O
vfs_s_get_line_interruptible	function
(	O
me	pointer
,	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
SUP	O
.	O
sockr	int
)	O
;	O
if	O
(	O
(	O
!	O
res	int
)	O
||	O
(	O
res	int
==	O
EINTR	int
)	O
)	O
{	O
vfs_s_free_entry	function
(	O
me	pointer
,	O
ent	pointer
)	O
;	O
me	pointer
->	O
verrno	int
=	O
ECONNRESET	int
;	O
goto	O
error	pointer
;	O
}	O
if	O
(	O
logfile	pointer
)	O
{	O
fputs	function
(	O
buffer	pointer
,	O
logfile	pointer
)	O
;	O
fputs	function
(	O
"\n"	pointer
,	O
logfile	pointer
)	O
;	O
fflush	function
(	O
logfile	pointer
)	O
;	O
}	O
if	O
(	O
!	O
strncmp	function
(	O
buffer	pointer
,	O
"### "	pointer
,	O
4	int
)	O
)	O
break	O
;	O
if	O
(	O
(	O
!	O
buffer	pointer
[	O
0	int
]	O
)	O
)	O
{	O
if	O
(	O
ent	pointer
->	O
name	pointer
)	O
{	O
vfs_s_insert_entry	function
(	O
me	pointer
,	O
dir	pointer
,	O
ent	pointer
)	O
;	O
ent	pointer
=	O
vfs_s_generate_entry	function
(	O
me	pointer
,	O
NULL	O
,	O
dir	pointer
,	O
0	int
)	O
;	O
}	O
continue	O
;	O
}	O
switch	O
(	O
buffer	pointer
[	O
0	int
]	O
)	O
{	O
case	O
':'	O
:	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
buffer	pointer
+	O
1	int
,	O
"."	pointer
)	O
||	O
!	O
strcmp	function
(	O
buffer	pointer
+	O
1	int
,	O
".."	pointer
)	O
)	O
break	O
;	O
ent	pointer
->	O
name	pointer
=	O
g_strdup	function
(	O
buffer	pointer
+	O
1	int
)	O
;	O
break	O
;	O
}	O
case	O
'S'	O
:	O
ST	O
.	O
st_size	long
=	O
(	O
off_t	long
)	O
atoll	function
(	O
buffer	pointer
+	O
1	int
)	O
;	O
break	O
;	O
case	O
'P'	O
:	O
{	O
size_t	long
skipped	long
;	O
if	O
(	O
vfs_parse_filemode	function
(	O
buffer	pointer
+	O
1	int
,	O
&	O
skipped	long
,	O
&	O
ST	O
.	O
st_mode	int
)	O
)	O
{	O
if	O
(	O
S_ISLNK	O
(	O
ST	O
.	O
st_mode	int
)	O
)	O
ST	O
.	O
st_mode	int
=	O
0	int
;	O
}	O
break	O
;	O
}	O
case	O
'd'	O
:	O
{	O
vfs_split_text	function
(	O
buffer	pointer
+	O
1	int
)	O
;	O
if	O
(	O
!	O
vfs_parse_filedate	function
(	O
0	int
,	O
&	O
ST	O
.	O
st_ctime	O
)	O
)	O
break	O
;	O
ST	O
.	O
st_atime	O
=	O
ST	O
.	O
st_mtime	O
=	O
ST	O
.	O
st_ctime	O
;	O
}	O
break	O
;	O
case	O
'D'	O
:	O
{	O
struct	O
tm	struct
tim	struct
;	O
if	O
(	O
sscanf	function
(	O
buffer	pointer
+	O
1	int
,	O
"%d %d %d %d %d %d"	pointer
,	O
&	O
tim	struct
.	O
tm_year	int
,	O
&	O
tim	struct
.	O
tm_mon	int
,	O
&	O
tim	struct
.	O
tm_mday	int
,	O
&	O
tim	struct
.	O
tm_hour	int
,	O
&	O
tim	struct
.	O
tm_min	int
,	O
&	O
tim	struct
.	O
tm_sec	int
)	O
!=	O
6	int
)	O
break	O
;	O
ST	O
.	O
st_atime	O
=	O
ST	O
.	O
st_mtime	O
=	O
ST	O
.	O
st_ctime	O
=	O
mktime	function
(	O
&	O
tim	struct
)	O
;	O
}	O
break	O
;	O
case	O
'E'	O
:	O
{	O
int	O
maj	int
,	O
min	long
;	O
if	O
(	O
sscanf	function
(	O
buffer	pointer
+	O
1	int
,	O
"%d,%d"	pointer
,	O
&	O
maj	int
,	O
&	O
min	long
)	O
!=	O
2	int
)	O
break	O
;	O
ST	O
.	O
st_rdev	long
=	O
makedev	O
(	O
maj	int
,	O
min	long
)	O
;	O
}	O
case	O
'L'	O
:	O
ent	pointer
->	O
ino	pointer
->	O
linkname	pointer
=	O
g_strdup	function
(	O
buffer	pointer
+	O
1	int
)	O
;	O
break	O
;	O
}	O
}	O
vfs_s_free_entry	function
(	O
me	pointer
,	O
ent	pointer
)	O
;	O
me	pointer
->	O
verrno	int
=	O
E_REMOTE	O
;	O
if	O
(	O
fish_decode_reply	function
(	O
buffer	pointer
+	O
4	int
,	O
0	int
)	O
==	O
COMPLETE	int
)	O
{	O
g_free	function
(	O
SUP	O
.	O
cwdir	pointer
)	O
;	O
SUP	O
.	O
cwdir	pointer
=	O
g_strdup	function
(	O
remote_path	pointer
)	O
;	O
print_vfs_message	function
(	O
_	O
(	O
"%s: done."	pointer
)	O
,	O
me	pointer
->	O
name	pointer
)	O
;	O
return	O
0	int
;	O
}	O
error	pointer
:	O
print_vfs_message	function
(	O
_	O
(	O
"%s: failure"	pointer
)	O
,	O
me	pointer
->	O
name	pointer
)	O
;	O
return	O
1	int
;	O
}	O
static	O
int	O
fish_file_store	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
struct	O
vfs_s_fh	struct
*	O
fh	pointer
,	O
char	O
*	O
name	pointer
,	O
char	O
*	O
localname	pointer
)	O
{	O
struct	O
vfs_s_super	struct
*	O
super	pointer
=	O
FH_SUPER	O
;	O
int	O
n	long
,	O
total	double
;	O
char	O
buffer	pointer
[	O
8192	int
]	O
;	O
struct	O
stat	struct
s	pointer
;	O
int	O
was_error	int
=	O
0	int
;	O
int	O
h	pointer
;	O
char	O
*	O
quoted_name	pointer
;	O
h	pointer
=	O
open	function
(	O
localname	pointer
,	O
O_RDONLY	int
)	O
;	O
if	O
(	O
h	pointer
==	O
-	O
1	int
)	O
ERRNOR	O
(	O
EIO	int
,	O
-	O
1	int
)	O
;	O
if	O
(	O
fstat	function
(	O
h	pointer
,	O
&	O
s	pointer
)	O
<	O
0	int
)	O
{	O
close	function
(	O
h	pointer
)	O
;	O
ERRNOR	O
(	O
EIO	int
,	O
-	O
1	int
)	O
;	O
}	O
print_vfs_message	function
(	O
_	O
(	O
"fish: store %s: sending command..."	pointer
)	O
,	O
name	pointer
)	O
;	O
quoted_name	pointer
=	O
name_quote	function
(	O
name	pointer
,	O
0	int
)	O
;	O
if	O
(	O
!	O
fh	pointer
->	O
u	union
.	O
fish	struct
.	O
append	int
)	O
n	long
=	O
fish_command	function
(	O
me	pointer
,	O
super	pointer
,	O
WAIT_REPLY	int
,	O
"#STOR %lu /%s\n"	pointer
"echo '### 001'\n"	pointer
"file=/%s\n"	pointer
"res=`exec 3>&1\n"	pointer
"(\n"	pointer
"head -c %lu -q - || echo DD >&3\n"	pointer
") 2>/dev/null | (\n"	pointer
"cat > \"$file\"\n"	pointer
"cat > /dev/null\n"	pointer
")`; [ \"$res\" = DD ] && {\n"	pointer
"> \"$file\"\n"	pointer
"rest=%lu\n"	pointer
"while [ $rest -gt 0 ]\n"	pointer
"do\n"	pointer
"    cnt=`expr \\( $rest + 255 \\) / 256`\n"	pointer
"    n=`dd bs=256 count=$cnt | tee -a \"$file\" | wc -c`\n"	pointer
"    rest=`expr $rest - $n`\n"	pointer
"done\n"	pointer
"}; echo '### 200'\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
s	pointer
.	O
st_size	long
,	O
name	pointer
,	O
quoted_name	pointer
,	O
(	O
unsigned	O
long	O
)	O
s	pointer
.	O
st_size	long
,	O
(	O
unsigned	O
long	O
)	O
s	pointer
.	O
st_size	long
)	O
;	O
else	O
n	long
=	O
fish_command	function
(	O
me	pointer
,	O
super	pointer
,	O
WAIT_REPLY	int
,	O
"#STOR %lu /%s\n"	pointer
"echo '### 001'\n"	pointer
"{\n"	pointer
"file=/%s\n"	pointer
"rest=%lu\n"	pointer
"while [ $rest -gt 0 ]\n"	pointer
"do\n"	pointer
"    cnt=`expr \\( $rest + 255 \\) / 256`\n"	pointer
"    n=`dd bs=256 count=$cnt | tee -a \"$file\" | wc -c`\n"	pointer
"    rest=`expr $rest - $n`\n"	pointer
"done\n"	pointer
"}; echo '### 200'\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
s	pointer
.	O
st_size	long
,	O
name	pointer
,	O
quoted_name	pointer
,	O
(	O
unsigned	O
long	O
)	O
s	pointer
.	O
st_size	long
)	O
;	O
g_free	function
(	O
quoted_name	pointer
)	O
;	O
if	O
(	O
n	long
!=	O
PRELIM	int
)	O
{	O
close	function
(	O
h	pointer
)	O
;	O
ERRNOR	O
(	O
E_REMOTE	O
,	O
-	O
1	int
)	O
;	O
}	O
total	double
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
int	O
t	long
;	O
while	O
(	O
(	O
n	long
=	O
read	function
(	O
h	pointer
,	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
)	O
)	O
<	O
0	int
)	O
{	O
if	O
(	O
(	O
errno	O
==	O
EINTR	int
)	O
&&	O
got_interrupt	O
(	O
)	O
)	O
continue	O
;	O
print_vfs_message	function
(	O
_	O
(	O
"fish: Local read failed, sending zeros"	pointer
)	O
)	O
;	O
close	function
(	O
h	pointer
)	O
;	O
h	pointer
=	O
open	function
(	O
"/dev/zero"	pointer
,	O
O_RDONLY	int
)	O
;	O
}	O
if	O
(	O
n	long
==	O
0	int
)	O
break	O
;	O
if	O
(	O
(	O
t	long
=	O
write	function
(	O
SUP	O
.	O
sockw	int
,	O
buffer	pointer
,	O
n	long
)	O
)	O
!=	O
n	long
)	O
{	O
if	O
(	O
t	long
==	O
-	O
1	int
)	O
{	O
me	pointer
->	O
verrno	int
=	O
errno	O
;	O
}	O
else	O
{	O
me	pointer
->	O
verrno	int
=	O
EIO	int
;	O
}	O
goto	O
error_return	O
;	O
}	O
disable_interrupt_key	O
(	O
)	O
;	O
total	double
+=	O
n	long
;	O
print_vfs_message	function
(	O
_	O
(	O
"fish: storing %s %d (%lu)"	pointer
)	O
,	O
was_error	int
?	O
_	O
(	O
"zeros"	pointer
)	O
:	O
_	O
(	O
"file"	pointer
)	O
,	O
total	double
,	O
(	O
unsigned	O
long	O
)	O
s	pointer
.	O
st_size	long
)	O
;	O
}	O
close	function
(	O
h	pointer
)	O
;	O
if	O
(	O
(	O
fish_get_reply	function
(	O
me	pointer
,	O
SUP	O
.	O
sockr	int
,	O
NULL	O
,	O
0	int
)	O
!=	O
COMPLETE	int
)	O
||	O
was_error	int
)	O
ERRNOR	O
(	O
E_REMOTE	O
,	O
-	O
1	int
)	O
;	O
return	O
0	int
;	O
error_return	O
:	O
close	function
(	O
h	pointer
)	O
;	O
fish_get_reply	function
(	O
me	pointer
,	O
SUP	O
.	O
sockr	int
,	O
NULL	O
,	O
0	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
fish_linear_start	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
struct	O
vfs_s_fh	struct
*	O
fh	pointer
,	O
off_t	long
offset	long
)	O
{	O
char	O
*	O
name	pointer
;	O
char	O
*	O
quoted_name	pointer
;	O
if	O
(	O
offset	long
)	O
ERRNOR	O
(	O
E_NOTSUPP	O
,	O
0	int
)	O
;	O
name	pointer
=	O
vfs_s_fullpath	function
(	O
me	pointer
,	O
fh	pointer
->	O
ino	pointer
)	O
;	O
if	O
(	O
!	O
name	pointer
)	O
return	O
0	int
;	O
quoted_name	pointer
=	O
name_quote	function
(	O
name	pointer
,	O
0	int
)	O
;	O
g_free	function
(	O
name	pointer
)	O
;	O
name	pointer
=	O
quoted_name	pointer
;	O
fh	pointer
->	O
u	union
.	O
fish	struct
.	O
append	int
=	O
0	int
;	O
offset	long
=	O
fish_command	function
(	O
me	pointer
,	O
FH_SUPER	O
,	O
WANT_STRING	int
,	O
"#RETR /%s\n"	pointer
"ls -ln /%s 2>/dev/null | (\n"	pointer
"read p l u g s r\n"	pointer
"echo \"$s\"\n"	pointer
")\n"	pointer
"echo '### 100'\n"	pointer
"cat /%s\n"	pointer
"echo '### 200'\n"	pointer
,	O
name	pointer
,	O
name	pointer
,	O
name	pointer
)	O
;	O
g_free	function
(	O
name	pointer
)	O
;	O
if	O
(	O
offset	long
!=	O
PRELIM	int
)	O
ERRNOR	O
(	O
E_REMOTE	O
,	O
0	int
)	O
;	O
fh	pointer
->	O
linear	int
=	O
LS_LINEAR_OPEN	int
;	O
fh	pointer
->	O
u	union
.	O
fish	struct
.	O
got	long
=	O
0	int
;	O
if	O
(	O
sscanf	function
(	O
reply_str	array
,	O
"%u"	pointer
,	O
&	O
fh	pointer
->	O
u	union
.	O
fish	struct
.	O
total	double
)	O
!=	O
1	int
)	O
ERRNOR	O
(	O
E_REMOTE	O
,	O
0	int
)	O
;	O
return	O
1	int
;	O
}	O
static	O
void	O
fish_linear_abort	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
struct	O
vfs_s_fh	struct
*	O
fh	pointer
)	O
{	O
struct	O
vfs_s_super	struct
*	O
super	pointer
=	O
FH_SUPER	O
;	O
char	O
buffer	pointer
[	O
8192	int
]	O
;	O
int	O
n	long
;	O
print_vfs_message	function
(	O
_	O
(	O
"Aborting transfer..."	pointer
)	O
)	O
;	O
do	O
{	O
n	long
=	O
MIN	O
(	O
8192	int
,	O
fh	pointer
->	O
u	union
.	O
fish	struct
.	O
total	double
-	O
fh	pointer
->	O
u	union
.	O
fish	struct
.	O
got	long
)	O
;	O
if	O
(	O
n	long
)	O
{	O
if	O
(	O
(	O
n	long
=	O
read	function
(	O
SUP	O
.	O
sockr	int
,	O
buffer	pointer
,	O
n	long
)	O
)	O
<	O
0	int
)	O
return	O
;	O
fh	pointer
->	O
u	union
.	O
fish	struct
.	O
got	long
+=	O
n	long
;	O
}	O
}	O
while	O
(	O
n	long
)	O
;	O
if	O
(	O
fish_get_reply	function
(	O
me	pointer
,	O
SUP	O
.	O
sockr	int
,	O
NULL	O
,	O
0	int
)	O
!=	O
COMPLETE	int
)	O
print_vfs_message	function
(	O
_	O
(	O
"Error reported after abort."	pointer
)	O
)	O
;	O
else	O
print_vfs_message	function
(	O
_	O
(	O
"Aborted transfer would be successful."	pointer
)	O
)	O
;	O
}	O
static	O
int	O
fish_linear_read	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
struct	O
vfs_s_fh	struct
*	O
fh	pointer
,	O
void	O
*	O
buf	pointer
,	O
int	O
len	int
)	O
{	O
struct	O
vfs_s_super	struct
*	O
super	pointer
=	O
FH_SUPER	O
;	O
int	O
n	long
=	O
0	int
;	O
len	int
=	O
MIN	O
(	O
fh	pointer
->	O
u	union
.	O
fish	struct
.	O
total	double
-	O
fh	pointer
->	O
u	union
.	O
fish	struct
.	O
got	long
,	O
len	int
)	O
;	O
disable_interrupt_key	O
(	O
)	O
;	O
while	O
(	O
len	int
&&	O
(	O
(	O
n	long
=	O
read	function
(	O
SUP	O
.	O
sockr	int
,	O
buf	pointer
,	O
len	int
)	O
)	O
<	O
0	int
)	O
)	O
{	O
if	O
(	O
(	O
errno	O
==	O
EINTR	int
)	O
&&	O
!	O
got_interrupt	O
(	O
)	O
)	O
continue	O
;	O
break	O
;	O
}	O
enable_interrupt_key	O
(	O
)	O
;	O
if	O
(	O
n	long
>	O
0	int
)	O
fh	pointer
->	O
u	union
.	O
fish	struct
.	O
got	long
+=	O
n	long
;	O
if	O
(	O
n	long
<	O
0	int
)	O
fish_linear_abort	function
(	O
me	pointer
,	O
fh	pointer
)	O
;	O
if	O
(	O
(	O
!	O
n	long
)	O
&&	O
(	O
(	O
fish_get_reply	function
(	O
me	pointer
,	O
SUP	O
.	O
sockr	int
,	O
NULL	O
,	O
0	int
)	O
!=	O
COMPLETE	int
)	O
)	O
)	O
ERRNOR	O
(	O
E_REMOTE	O
,	O
-	O
1	int
)	O
;	O
ERRNOR	O
(	O
errno	O
,	O
n	long
)	O
;	O
}	O
static	O
void	O
fish_linear_close	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
struct	O
vfs_s_fh	struct
*	O
fh	pointer
)	O
{	O
if	O
(	O
fh	pointer
->	O
u	union
.	O
fish	struct
.	O
total	double
!=	O
fh	pointer
->	O
u	union
.	O
fish	struct
.	O
got	long
)	O
fish_linear_abort	function
(	O
me	pointer
,	O
fh	pointer
)	O
;	O
}	O
static	O
int	O
fish_ctl	function
(	O
void	O
*	O
fh	pointer
,	O
int	O
ctlop	int
,	O
void	O
*	O
arg	pointer
)	O
{	O
(	O
void	O
)	O
arg	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
fish_send_command	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
struct	O
vfs_s_super	struct
*	O
super	pointer
,	O
const	O
char	O
*	O
cmd	pointer
,	O
int	O
flags	enum
)	O
{	O
int	O
r	pointer
;	O
r	pointer
=	O
fish_command	function
(	O
me	pointer
,	O
super	pointer
,	O
WAIT_REPLY	int
,	O
"%s"	pointer
,	O
cmd	pointer
)	O
;	O
vfs_stamp_create	function
(	O
&	O
vfs_fish_ops	struct
,	O
super	pointer
)	O
;	O
if	O
(	O
r	pointer
!=	O
COMPLETE	int
)	O
ERRNOR	O
(	O
E_REMOTE	O
,	O
-	O
1	int
)	O
;	O
if	O
(	O
flags	enum
&	O
OPT_FLUSH	int
)	O
vfs_s_invalidate	function
(	O
me	pointer
,	O
super	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
fish_chmod	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
path	pointer
,	O
int	O
mode	int
)	O
{	O
PREFIX	O
g_snprintf	function
(	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
"#CHMOD %4.4o /%s\n"	pointer
"chmod %4.4o \"/%s\" 2>/dev/null\n"	pointer
"echo '### 000'\n"	pointer
,	O
mode	int
&	O
07777	int
,	O
rpath	pointer
,	O
mode	int
&	O
07777	int
,	O
rpath	pointer
)	O
;	O
POSTFIX	O
(	O
OPT_FLUSH	int
)	O
;	O
}	O
FISH_OP	O
(	O
rename	function
,	O
XTEST	O
,	O
"#RENAME /%s /%s\n"	pointer
"mv /%s /%s 2>/dev/null\n"	pointer
"echo '### 000'"	pointer
)	O
FISH_OP	O
(	O
link	function
,	O
XTEST	O
,	O
"#LINK /%s /%s\n"	pointer
"ln /%s /%s 2>/dev/null\n"	pointer
"echo '### 000'"	pointer
)	O
static	O
int	O
fish_symlink	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
setto	pointer
,	O
const	O
char	O
*	O
path	pointer
)	O
{	O
char	O
*	O
qsetto	pointer
;	O
PREFIX	O
qsetto	pointer
=	O
name_quote	function
(	O
setto	pointer
,	O
0	int
)	O
;	O
g_snprintf	function
(	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
"#SYMLINK %s /%s\n"	pointer
"ln -s %s /%s 2>/dev/null\n"	pointer
"echo '### 000'\n"	pointer
,	O
qsetto	pointer
,	O
rpath	pointer
,	O
qsetto	pointer
,	O
rpath	pointer
)	O
;	O
g_free	function
(	O
qsetto	pointer
)	O
;	O
POSTFIX	O
(	O
OPT_FLUSH	int
)	O
;	O
}	O
static	O
int	O
fish_chown	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
path	pointer
,	O
int	O
owner	long
,	O
int	O
group	struct
)	O
{	O
char	O
*	O
sowner	pointer
,	O
*	O
sgroup	pointer
;	O
struct	O
passwd	struct
*	O
pw	pointer
;	O
struct	O
group	struct
*	O
gr	pointer
;	O
if	O
(	O
(	O
pw	pointer
=	O
getpwuid	function
(	O
owner	long
)	O
)	O
==	O
NULL	O
)	O
return	O
0	int
;	O
if	O
(	O
(	O
gr	pointer
=	O
getgrgid	function
(	O
group	struct
)	O
)	O
==	O
NULL	O
)	O
return	O
0	int
;	O
sowner	pointer
=	O
pw	pointer
->	O
pw_name	pointer
;	O
sgroup	pointer
=	O
gr	pointer
->	O
gr_name	pointer
;	O
{	O
PREFIX	O
g_snprintf	function
(	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
"#CHOWN /%s /%s\n"	pointer
"chown %s /%s 2>/dev/null\n"	pointer
"echo '### 000'\n"	pointer
,	O
sowner	pointer
,	O
rpath	pointer
,	O
sowner	pointer
,	O
rpath	pointer
)	O
;	O
fish_send_command	function
(	O
me	pointer
,	O
super	pointer
,	O
buf	pointer
,	O
OPT_FLUSH	int
)	O
;	O
g_snprintf	function
(	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
"#CHGRP /%s /%s\n"	pointer
"chgrp %s /%s 2>/dev/null\n"	pointer
"echo '### 000'\n"	pointer
,	O
sgroup	pointer
,	O
rpath	pointer
,	O
sgroup	pointer
,	O
rpath	pointer
)	O
;	O
POSTFIX	O
(	O
OPT_FLUSH	int
)	O
}	O
}	O
static	O
int	O
fish_unlink	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
path	pointer
)	O
{	O
PREFIX	O
g_snprintf	function
(	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
"#DELE /%s\n"	pointer
"rm -f /%s 2>/dev/null\n"	pointer
"echo '### 000'\n"	pointer
,	O
rpath	pointer
,	O
rpath	pointer
)	O
;	O
POSTFIX	O
(	O
OPT_FLUSH	int
)	O
;	O
}	O
static	O
int	O
fish_mkdir	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
path	pointer
,	O
mode_t	int
mode	int
)	O
{	O
PREFIX	O
(	O
void	O
)	O
mode	int
;	O
g_snprintf	function
(	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
"#MKD /%s\n"	pointer
"mkdir /%s 2>/dev/null\n"	pointer
"echo '### 000'\n"	pointer
,	O
rpath	pointer
,	O
rpath	pointer
)	O
;	O
POSTFIX	O
(	O
OPT_FLUSH	int
)	O
;	O
}	O
static	O
int	O
fish_rmdir	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
const	O
char	O
*	O
path	pointer
)	O
{	O
PREFIX	O
g_snprintf	function
(	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
"#RMD /%s\n"	pointer
"rmdir /%s 2>/dev/null\n"	pointer
"echo '### 000'\n"	pointer
,	O
rpath	pointer
,	O
rpath	pointer
)	O
;	O
POSTFIX	O
(	O
OPT_FLUSH	int
)	O
;	O
}	O
static	O
int	O
fish_fh_open	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
struct	O
vfs_s_fh	struct
*	O
fh	pointer
,	O
int	O
flags	enum
,	O
int	O
mode	int
)	O
{	O
(	O
void	O
)	O
mode	int
;	O
fh	pointer
->	O
u	union
.	O
fish	struct
.	O
append	int
=	O
0	int
;	O
if	O
(	O
(	O
(	O
flags	enum
&	O
O_WRONLY	int
)	O
==	O
O_WRONLY	int
)	O
&&	O
!	O
(	O
flags	enum
&	O
(	O
O_RDONLY	int
|	O
O_RDWR	int
)	O
)	O
)	O
{	O
fh	pointer
->	O
u	union
.	O
fish	struct
.	O
append	int
=	O
flags	enum
&	O
O_APPEND	int
;	O
if	O
(	O
!	O
fh	pointer
->	O
ino	pointer
->	O
localname	pointer
)	O
{	O
int	O
tmp_handle	int
=	O
vfs_mkstemps	function
(	O
&	O
fh	pointer
->	O
ino	pointer
->	O
localname	pointer
,	O
me	pointer
->	O
name	pointer
,	O
fh	pointer
->	O
ino	pointer
->	O
ent	pointer
->	O
name	pointer
)	O
;	O
if	O
(	O
tmp_handle	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
close	function
(	O
tmp_handle	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
if	O
(	O
!	O
fh	pointer
->	O
ino	pointer
->	O
localname	pointer
)	O
if	O
(	O
vfs_s_retrieve_file	function
(	O
me	pointer
,	O
fh	pointer
->	O
ino	pointer
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
!	O
fh	pointer
->	O
ino	pointer
->	O
localname	pointer
)	O
vfs_die	function
(	O
"retrieve_file failed to fill in localname"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
fish_fill_names	function
(	O
struct	O
vfs_class	struct
*	O
me	pointer
,	O
fill_names_f	pointer
func	pointer
)	O
{	O
struct	O
vfs_s_super	struct
*	O
super	pointer
=	O
MEDATA	O
->	O
supers	pointer
;	O
const	O
char	O
*	O
flags	enum
;	O
char	O
*	O
name	pointer
;	O
while	O
(	O
super	pointer
)	O
{	O
switch	O
(	O
SUP	O
.	O
flags	enum
&	O
(	O
FISH_FLAG_RSH	int
|	O
FISH_FLAG_COMPRESSED	int
)	O
)	O
{	O
case	O
FISH_FLAG_RSH	int
:	O
flags	enum
=	O
":r"	pointer
;	O
break	O
;	O
case	O
FISH_FLAG_COMPRESSED	int
:	O
flags	enum
=	O
":C"	pointer
;	O
break	O
;	O
case	O
FISH_FLAG_RSH	int
|	O
FISH_FLAG_COMPRESSED	int
:	O
flags	enum
=	O
""	pointer
;	O
break	O
;	O
default	O
:	O
flags	enum
=	O
""	pointer
;	O
break	O
;	O
}	O
name	pointer
=	O
g_strconcat	function
(	O
"/#sh:"	pointer
,	O
SUP	O
.	O
user	pointer
,	O
"@"	pointer
,	O
SUP	O
.	O
host	pointer
,	O
flags	enum
,	O
"/"	pointer
,	O
SUP	O
.	O
cwdir	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
(	O
*	O
func	pointer
)	O
(	O
name	pointer
)	O
;	O
g_free	function
(	O
name	pointer
)	O
;	O
super	pointer
=	O
super	pointer
->	O
next	pointer
;	O
}	O
}	O
void	O
init_fish	function
(	O
void	O
)	O
{	O
static	O
struct	O
vfs_s_subclass	struct
fish_subclass	struct
;	O
fish_subclass	struct
.	O
flags	enum
=	O
VFS_S_REMOTE	int
;	O
fish_subclass	struct
.	O
archive_same	pointer
=	O
fish_archive_same	function
;	O
fish_subclass	struct
.	O
open_archive	pointer
=	O
fish_open_archive	function
;	O
fish_subclass	struct
.	O
free_archive	pointer
=	O
fish_free_archive	function
;	O
fish_subclass	struct
.	O
fh_open	pointer
=	O
fish_fh_open	function
;	O
fish_subclass	struct
.	O
dir_load	pointer
=	O
fish_dir_load	function
;	O
fish_subclass	struct
.	O
file_store	pointer
=	O
fish_file_store	function
;	O
fish_subclass	struct
.	O
linear_start	pointer
=	O
fish_linear_start	function
;	O
fish_subclass	struct
.	O
linear_read	pointer
=	O
fish_linear_read	function
;	O
fish_subclass	struct
.	O
linear_close	pointer
=	O
fish_linear_close	function
;	O
vfs_s_init_class	function
(	O
&	O
vfs_fish_ops	struct
,	O
&	O
fish_subclass	struct
)	O
;	O
vfs_fish_ops	struct
.	O
name	pointer
=	O
"fish"	pointer
;	O
vfs_fish_ops	struct
.	O
prefix	pointer
=	O
"sh:"	pointer
;	O
vfs_fish_ops	struct
.	O
fill_names	pointer
=	O
fish_fill_names	function
;	O
vfs_fish_ops	struct
.	O
chmod	function
=	O
fish_chmod	function
;	O
vfs_fish_ops	struct
.	O
chown	function
=	O
fish_chown	function
;	O
vfs_fish_ops	struct
.	O
symlink	function
=	O
fish_symlink	function
;	O
vfs_fish_ops	struct
.	O
link	function
=	O
fish_link	function
;	O
vfs_fish_ops	struct
.	O
unlink	function
=	O
fish_unlink	function
;	O
vfs_fish_ops	struct
.	O
rename	function
=	O
fish_rename	function
;	O
vfs_fish_ops	struct
.	O
mkdir	function
=	O
fish_mkdir	function
;	O
vfs_fish_ops	struct
.	O
rmdir	function
=	O
fish_rmdir	function
;	O
vfs_fish_ops	struct
.	O
ctl	pointer
=	O
fish_ctl	function
;	O
vfs_register_class	function
(	O
&	O
vfs_fish_ops	struct
)	O
;	O
}	O
