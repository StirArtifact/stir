int	O
CDB___ham_insdel_log	function
(	O
dbenv	pointer
,	O
txnid	int
,	O
ret_lsnp	pointer
,	O
flags	int
,	O
opcode	int
,	O
fileid	array
,	O
pgno	int
,	O
ndx	int
,	O
pagelsn	struct
,	O
key	struct
,	O
data	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_TXN	struct
*	O
txnid	int
;	O
DB_LSN	struct
*	O
ret_lsnp	pointer
;	O
u_int32_t	int
flags	int
;	O
u_int32_t	int
opcode	int
;	O
int32_t	int
fileid	array
;	O
db_pgno_t	int
pgno	int
;	O
u_int32_t	int
ndx	int
;	O
DB_LSN	struct
*	O
pagelsn	struct
;	O
const	O
DBT	struct
*	O
key	struct
;	O
const	O
DBT	struct
*	O
data	pointer
;	O
{	O
DBT	struct
logrec	struct
;	O
DB_LSN	struct
*	O
lsnp	pointer
,	O
null_lsn	struct
;	O
u_int32_t	int
zero	int
;	O
u_int32_t	int
rectype	int
,	O
txn_num	int
;	O
int	O
ret	int
;	O
u_int8_t	char
*	O
bp	pointer
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
&&	O
TAILQ_FIRST	O
(	O
&	O
txnid	int
->	O
kids	struct
)	O
!=	O
NULL	O
&&	O
CDB___txn_activekids	function
(	O
txnid	int
)	O
!=	O
0	int
)	O
return	O
(	O
CDB___db_child_active_err	function
(	O
dbenv	pointer
)	O
)	O
;	O
rectype	int
=	O
DB_ham_insdel	int
;	O
txn_num	int
=	O
txnid	int
==	O
NULL	O
?	O
0	int
:	O
txnid	int
->	O
txnid	int
;	O
if	O
(	O
txnid	int
==	O
NULL	O
)	O
{	O
ZERO_LSN	O
(	O
null_lsn	struct
)	O
;	O
lsnp	pointer
=	O
&	O
null_lsn	struct
;	O
}	O
else	O
lsnp	pointer
=	O
&	O
txnid	int
->	O
last_lsn	struct
;	O
logrec	struct
.	O
size	int
=	O
sizeof	O
(	O
rectype	int
)	O
+	O
sizeof	O
(	O
txn_num	int
)	O
+	O
sizeof	O
(	O
DB_LSN	struct
)	O
+	O
sizeof	O
(	O
opcode	int
)	O
+	O
sizeof	O
(	O
fileid	array
)	O
+	O
sizeof	O
(	O
pgno	int
)	O
+	O
sizeof	O
(	O
ndx	int
)	O
+	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
+	O
sizeof	O
(	O
u_int32_t	int
)	O
+	O
(	O
key	struct
==	O
NULL	O
?	O
0	int
:	O
key	struct
->	O
size	int
)	O
+	O
sizeof	O
(	O
u_int32_t	int
)	O
+	O
(	O
data	pointer
==	O
NULL	O
?	O
0	int
:	O
data	pointer
->	O
size	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
logrec	struct
.	O
size	int
,	O
NULL	O
,	O
&	O
logrec	struct
.	O
data	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
bp	pointer
=	O
logrec	struct
.	O
data	pointer
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
rectype	int
,	O
sizeof	O
(	O
rectype	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
rectype	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
txn_num	int
,	O
sizeof	O
(	O
txn_num	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
txn_num	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
lsnp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
opcode	int
,	O
sizeof	O
(	O
opcode	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
opcode	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
fileid	array
,	O
sizeof	O
(	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
fileid	array
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
pgno	int
,	O
sizeof	O
(	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
pgno	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
ndx	int
,	O
sizeof	O
(	O
ndx	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
ndx	int
)	O
;	O
if	O
(	O
pagelsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
pagelsn	struct
,	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
;	O
if	O
(	O
key	struct
==	O
NULL	O
)	O
{	O
zero	int
=	O
0	int
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
zero	int
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
}	O
else	O
{	O
memcpy	function
(	O
bp	pointer
,	O
&	O
key	struct
->	O
size	int
,	O
sizeof	O
(	O
key	struct
->	O
size	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
key	struct
->	O
size	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
key	struct
->	O
data	pointer
,	O
key	struct
->	O
size	int
)	O
;	O
bp	pointer
+=	O
key	struct
->	O
size	int
;	O
}	O
if	O
(	O
data	pointer
==	O
NULL	O
)	O
{	O
zero	int
=	O
0	int
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
zero	int
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
}	O
else	O
{	O
memcpy	function
(	O
bp	pointer
,	O
&	O
data	pointer
->	O
size	int
,	O
sizeof	O
(	O
data	pointer
->	O
size	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
data	pointer
->	O
size	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
data	pointer
->	O
data	pointer
,	O
data	pointer
->	O
size	int
)	O
;	O
bp	pointer
+=	O
data	pointer
->	O
size	int
;	O
}	O
DB_ASSERT	O
(	O
(	O
u_int32_t	int
)	O
(	O
bp	pointer
-	O
(	O
u_int8_t	char
*	O
)	O
logrec	struct
.	O
data	pointer
)	O
==	O
logrec	struct
.	O
size	int
)	O
;	O
ret	int
=	O
CDB_log_put	function
(	O
dbenv	pointer
,	O
ret_lsnp	pointer
,	O
(	O
DBT	struct
*	O
)	O
&	O
logrec	struct
,	O
flags	int
)	O
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
)	O
txnid	int
->	O
last_lsn	struct
=	O
*	O
ret_lsnp	pointer
;	O
CDB___os_free	function
(	O
logrec	struct
.	O
data	pointer
,	O
logrec	struct
.	O
size	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___ham_insdel_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
||	O
notused3	pointer
)	O
{	O
}	O
__ham_insdel_args	struct
*	O
argp	pointer
;	O
u_int32_t	int
i	int
;	O
u_int	int
ch	int
;	O
int	O
ret	int
;	O
i	int
=	O
0	int
;	O
ch	int
=	O
0	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_insdel_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]ham_insdel: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\topcode: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
opcode	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tpgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pgno	int
)	O
;	O
printf	function
(	O
"\tndx: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
ndx	int
)	O
;	O
printf	function
(	O
"\tpagelsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pagelsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pagelsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tkey: "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argp	pointer
->	O
key	struct
.	O
size	int
;	O
i	int
++	O
)	O
{	O
ch	int
=	O
(	O
(	O
u_int8_t	char
*	O
)	O
argp	pointer
->	O
key	struct
.	O
data	pointer
)	O
[	O
i	int
]	O
;	O
if	O
(	O
isprint	function
(	O
ch	int
)	O
||	O
ch	int
==	O
0xa	int
)	O
putchar	function
(	O
ch	int
)	O
;	O
else	O
printf	function
(	O
"%#x "	pointer
,	O
ch	int
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"\tdata: "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argp	pointer
->	O
data	pointer
.	O
size	int
;	O
i	int
++	O
)	O
{	O
ch	int
=	O
(	O
(	O
u_int8_t	char
*	O
)	O
argp	pointer
->	O
data	pointer
.	O
data	pointer
)	O
[	O
i	int
]	O
;	O
if	O
(	O
isprint	function
(	O
ch	int
)	O
||	O
ch	int
==	O
0xa	int
)	O
putchar	function
(	O
ch	int
)	O
;	O
else	O
printf	function
(	O
"%#x "	pointer
,	O
ch	int
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___ham_insdel_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__ham_insdel_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__ham_insdel_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__ham_insdel_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
opcode	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
opcode	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
opcode	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
ndx	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
ndx	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
ndx	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pagelsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pagelsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pagelsn	struct
)	O
;	O
memset	function
(	O
&	O
argp	pointer
->	O
key	struct
,	O
0	int
,	O
sizeof	O
(	O
argp	pointer
->	O
key	struct
)	O
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
key	struct
.	O
size	int
,	O
bp	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
argp	pointer
->	O
key	struct
.	O
data	pointer
=	O
bp	pointer
;	O
bp	pointer
+=	O
argp	pointer
->	O
key	struct
.	O
size	int
;	O
memset	function
(	O
&	O
argp	pointer
->	O
data	pointer
,	O
0	int
,	O
sizeof	O
(	O
argp	pointer
->	O
data	pointer
)	O
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
data	pointer
.	O
size	int
,	O
bp	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
argp	pointer
->	O
data	pointer
.	O
data	pointer
=	O
bp	pointer
;	O
bp	pointer
+=	O
argp	pointer
->	O
data	pointer
.	O
size	int
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___ham_newpage_log	function
(	O
dbenv	pointer
,	O
txnid	int
,	O
ret_lsnp	pointer
,	O
flags	int
,	O
opcode	int
,	O
fileid	array
,	O
prev_pgno	int
,	O
prevlsn	struct
,	O
new_pgno	int
,	O
pagelsn	struct
,	O
next_pgno	int
,	O
nextlsn	struct
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_TXN	struct
*	O
txnid	int
;	O
DB_LSN	struct
*	O
ret_lsnp	pointer
;	O
u_int32_t	int
flags	int
;	O
u_int32_t	int
opcode	int
;	O
int32_t	int
fileid	array
;	O
db_pgno_t	int
prev_pgno	int
;	O
DB_LSN	struct
*	O
prevlsn	struct
;	O
db_pgno_t	int
new_pgno	int
;	O
DB_LSN	struct
*	O
pagelsn	struct
;	O
db_pgno_t	int
next_pgno	int
;	O
DB_LSN	struct
*	O
nextlsn	struct
;	O
{	O
DBT	struct
logrec	struct
;	O
DB_LSN	struct
*	O
lsnp	pointer
,	O
null_lsn	struct
;	O
u_int32_t	int
rectype	int
,	O
txn_num	int
;	O
int	O
ret	int
;	O
u_int8_t	char
*	O
bp	pointer
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
&&	O
TAILQ_FIRST	O
(	O
&	O
txnid	int
->	O
kids	struct
)	O
!=	O
NULL	O
&&	O
CDB___txn_activekids	function
(	O
txnid	int
)	O
!=	O
0	int
)	O
return	O
(	O
CDB___db_child_active_err	function
(	O
dbenv	pointer
)	O
)	O
;	O
rectype	int
=	O
DB_ham_newpage	int
;	O
txn_num	int
=	O
txnid	int
==	O
NULL	O
?	O
0	int
:	O
txnid	int
->	O
txnid	int
;	O
if	O
(	O
txnid	int
==	O
NULL	O
)	O
{	O
ZERO_LSN	O
(	O
null_lsn	struct
)	O
;	O
lsnp	pointer
=	O
&	O
null_lsn	struct
;	O
}	O
else	O
lsnp	pointer
=	O
&	O
txnid	int
->	O
last_lsn	struct
;	O
logrec	struct
.	O
size	int
=	O
sizeof	O
(	O
rectype	int
)	O
+	O
sizeof	O
(	O
txn_num	int
)	O
+	O
sizeof	O
(	O
DB_LSN	struct
)	O
+	O
sizeof	O
(	O
opcode	int
)	O
+	O
sizeof	O
(	O
fileid	array
)	O
+	O
sizeof	O
(	O
prev_pgno	int
)	O
+	O
sizeof	O
(	O
*	O
prevlsn	struct
)	O
+	O
sizeof	O
(	O
new_pgno	int
)	O
+	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
+	O
sizeof	O
(	O
next_pgno	int
)	O
+	O
sizeof	O
(	O
*	O
nextlsn	struct
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
logrec	struct
.	O
size	int
,	O
NULL	O
,	O
&	O
logrec	struct
.	O
data	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
bp	pointer
=	O
logrec	struct
.	O
data	pointer
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
rectype	int
,	O
sizeof	O
(	O
rectype	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
rectype	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
txn_num	int
,	O
sizeof	O
(	O
txn_num	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
txn_num	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
lsnp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
opcode	int
,	O
sizeof	O
(	O
opcode	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
opcode	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
fileid	array
,	O
sizeof	O
(	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
fileid	array
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
prev_pgno	int
,	O
sizeof	O
(	O
prev_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
prev_pgno	int
)	O
;	O
if	O
(	O
prevlsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
prevlsn	struct
,	O
sizeof	O
(	O
*	O
prevlsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
prevlsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
prevlsn	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
new_pgno	int
,	O
sizeof	O
(	O
new_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
new_pgno	int
)	O
;	O
if	O
(	O
pagelsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
pagelsn	struct
,	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
next_pgno	int
,	O
sizeof	O
(	O
next_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
next_pgno	int
)	O
;	O
if	O
(	O
nextlsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
nextlsn	struct
,	O
sizeof	O
(	O
*	O
nextlsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
nextlsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
nextlsn	struct
)	O
;	O
DB_ASSERT	O
(	O
(	O
u_int32_t	int
)	O
(	O
bp	pointer
-	O
(	O
u_int8_t	char
*	O
)	O
logrec	struct
.	O
data	pointer
)	O
==	O
logrec	struct
.	O
size	int
)	O
;	O
ret	int
=	O
CDB_log_put	function
(	O
dbenv	pointer
,	O
ret_lsnp	pointer
,	O
(	O
DBT	struct
*	O
)	O
&	O
logrec	struct
,	O
flags	int
)	O
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
)	O
txnid	int
->	O
last_lsn	struct
=	O
*	O
ret_lsnp	pointer
;	O
CDB___os_free	function
(	O
logrec	struct
.	O
data	pointer
,	O
logrec	struct
.	O
size	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___ham_newpage_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
||	O
notused3	pointer
)	O
{	O
}	O
__ham_newpage_args	struct
*	O
argp	pointer
;	O
int	O
ret	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_newpage_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]ham_newpage: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\topcode: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
opcode	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tprev_pgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_pgno	int
)	O
;	O
printf	function
(	O
"\tprevlsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prevlsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prevlsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tnew_pgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
new_pgno	int
)	O
;	O
printf	function
(	O
"\tpagelsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pagelsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pagelsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tnext_pgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
next_pgno	int
)	O
;	O
printf	function
(	O
"\tnextlsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
nextlsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
nextlsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___ham_newpage_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__ham_newpage_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__ham_newpage_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__ham_newpage_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
opcode	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
opcode	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
opcode	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
prev_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
prev_pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prevlsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
prevlsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
prevlsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
new_pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
new_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
new_pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pagelsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pagelsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pagelsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
next_pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
next_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
next_pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
nextlsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
nextlsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
nextlsn	struct
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___ham_splitmeta_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
||	O
notused3	pointer
)	O
{	O
}	O
__ham_splitmeta_args	struct
*	O
argp	pointer
;	O
int	O
ret	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_splitmeta_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]ham_splitmeta: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tbucket: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
bucket	int
)	O
;	O
printf	function
(	O
"\tovflpoint: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
ovflpoint	int
)	O
;	O
printf	function
(	O
"\tspares: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
spares	array
)	O
;	O
printf	function
(	O
"\tmetalsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
metalsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
metalsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___ham_splitmeta_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__ham_splitmeta_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__ham_splitmeta_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__ham_splitmeta_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
bucket	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
bucket	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
bucket	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
ovflpoint	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
ovflpoint	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
ovflpoint	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
spares	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
spares	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
spares	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
metalsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
metalsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
metalsn	struct
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___ham_splitdata_log	function
(	O
dbenv	pointer
,	O
txnid	int
,	O
ret_lsnp	pointer
,	O
flags	int
,	O
fileid	array
,	O
opcode	int
,	O
pgno	int
,	O
pageimage	struct
,	O
pagelsn	struct
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_TXN	struct
*	O
txnid	int
;	O
DB_LSN	struct
*	O
ret_lsnp	pointer
;	O
u_int32_t	int
flags	int
;	O
int32_t	int
fileid	array
;	O
u_int32_t	int
opcode	int
;	O
db_pgno_t	int
pgno	int
;	O
const	O
DBT	struct
*	O
pageimage	struct
;	O
DB_LSN	struct
*	O
pagelsn	struct
;	O
{	O
DBT	struct
logrec	struct
;	O
DB_LSN	struct
*	O
lsnp	pointer
,	O
null_lsn	struct
;	O
u_int32_t	int
zero	int
;	O
u_int32_t	int
rectype	int
,	O
txn_num	int
;	O
int	O
ret	int
;	O
u_int8_t	char
*	O
bp	pointer
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
&&	O
TAILQ_FIRST	O
(	O
&	O
txnid	int
->	O
kids	struct
)	O
!=	O
NULL	O
&&	O
CDB___txn_activekids	function
(	O
txnid	int
)	O
!=	O
0	int
)	O
return	O
(	O
CDB___db_child_active_err	function
(	O
dbenv	pointer
)	O
)	O
;	O
rectype	int
=	O
DB_ham_splitdata	int
;	O
txn_num	int
=	O
txnid	int
==	O
NULL	O
?	O
0	int
:	O
txnid	int
->	O
txnid	int
;	O
if	O
(	O
txnid	int
==	O
NULL	O
)	O
{	O
ZERO_LSN	O
(	O
null_lsn	struct
)	O
;	O
lsnp	pointer
=	O
&	O
null_lsn	struct
;	O
}	O
else	O
lsnp	pointer
=	O
&	O
txnid	int
->	O
last_lsn	struct
;	O
logrec	struct
.	O
size	int
=	O
sizeof	O
(	O
rectype	int
)	O
+	O
sizeof	O
(	O
txn_num	int
)	O
+	O
sizeof	O
(	O
DB_LSN	struct
)	O
+	O
sizeof	O
(	O
fileid	array
)	O
+	O
sizeof	O
(	O
opcode	int
)	O
+	O
sizeof	O
(	O
pgno	int
)	O
+	O
sizeof	O
(	O
u_int32_t	int
)	O
+	O
(	O
pageimage	struct
==	O
NULL	O
?	O
0	int
:	O
pageimage	struct
->	O
size	int
)	O
+	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
logrec	struct
.	O
size	int
,	O
NULL	O
,	O
&	O
logrec	struct
.	O
data	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
bp	pointer
=	O
logrec	struct
.	O
data	pointer
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
rectype	int
,	O
sizeof	O
(	O
rectype	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
rectype	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
txn_num	int
,	O
sizeof	O
(	O
txn_num	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
txn_num	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
lsnp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
fileid	array
,	O
sizeof	O
(	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
fileid	array
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
opcode	int
,	O
sizeof	O
(	O
opcode	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
opcode	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
pgno	int
,	O
sizeof	O
(	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
pgno	int
)	O
;	O
if	O
(	O
pageimage	struct
==	O
NULL	O
)	O
{	O
zero	int
=	O
0	int
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
zero	int
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
}	O
else	O
{	O
memcpy	function
(	O
bp	pointer
,	O
&	O
pageimage	struct
->	O
size	int
,	O
sizeof	O
(	O
pageimage	struct
->	O
size	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
pageimage	struct
->	O
size	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
pageimage	struct
->	O
data	pointer
,	O
pageimage	struct
->	O
size	int
)	O
;	O
bp	pointer
+=	O
pageimage	struct
->	O
size	int
;	O
}	O
if	O
(	O
pagelsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
pagelsn	struct
,	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
;	O
DB_ASSERT	O
(	O
(	O
u_int32_t	int
)	O
(	O
bp	pointer
-	O
(	O
u_int8_t	char
*	O
)	O
logrec	struct
.	O
data	pointer
)	O
==	O
logrec	struct
.	O
size	int
)	O
;	O
ret	int
=	O
CDB_log_put	function
(	O
dbenv	pointer
,	O
ret_lsnp	pointer
,	O
(	O
DBT	struct
*	O
)	O
&	O
logrec	struct
,	O
flags	int
)	O
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
)	O
txnid	int
->	O
last_lsn	struct
=	O
*	O
ret_lsnp	pointer
;	O
CDB___os_free	function
(	O
logrec	struct
.	O
data	pointer
,	O
logrec	struct
.	O
size	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___ham_splitdata_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
||	O
notused3	pointer
)	O
{	O
}	O
__ham_splitdata_args	struct
*	O
argp	pointer
;	O
u_int32_t	int
i	int
;	O
u_int	int
ch	int
;	O
int	O
ret	int
;	O
i	int
=	O
0	int
;	O
ch	int
=	O
0	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_splitdata_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]ham_splitdata: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\topcode: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
opcode	int
)	O
;	O
printf	function
(	O
"\tpgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pgno	int
)	O
;	O
printf	function
(	O
"\tpageimage: "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argp	pointer
->	O
pageimage	struct
.	O
size	int
;	O
i	int
++	O
)	O
{	O
ch	int
=	O
(	O
(	O
u_int8_t	char
*	O
)	O
argp	pointer
->	O
pageimage	struct
.	O
data	pointer
)	O
[	O
i	int
]	O
;	O
if	O
(	O
isprint	function
(	O
ch	int
)	O
||	O
ch	int
==	O
0xa	int
)	O
putchar	function
(	O
ch	int
)	O
;	O
else	O
printf	function
(	O
"%#x "	pointer
,	O
ch	int
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"\tpagelsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pagelsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pagelsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___ham_splitdata_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__ham_splitdata_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__ham_splitdata_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__ham_splitdata_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
opcode	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
opcode	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
opcode	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
;	O
memset	function
(	O
&	O
argp	pointer
->	O
pageimage	struct
,	O
0	int
,	O
sizeof	O
(	O
argp	pointer
->	O
pageimage	struct
)	O
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pageimage	struct
.	O
size	int
,	O
bp	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
argp	pointer
->	O
pageimage	struct
.	O
data	pointer
=	O
bp	pointer
;	O
bp	pointer
+=	O
argp	pointer
->	O
pageimage	struct
.	O
size	int
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pagelsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pagelsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pagelsn	struct
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___ham_replace_log	function
(	O
dbenv	pointer
,	O
txnid	int
,	O
ret_lsnp	pointer
,	O
flags	int
,	O
fileid	array
,	O
pgno	int
,	O
ndx	int
,	O
pagelsn	struct
,	O
off	long
,	O
olditem	struct
,	O
newitem	struct
,	O
makedup	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_TXN	struct
*	O
txnid	int
;	O
DB_LSN	struct
*	O
ret_lsnp	pointer
;	O
u_int32_t	int
flags	int
;	O
int32_t	int
fileid	array
;	O
db_pgno_t	int
pgno	int
;	O
u_int32_t	int
ndx	int
;	O
DB_LSN	struct
*	O
pagelsn	struct
;	O
int32_t	int
off	long
;	O
const	O
DBT	struct
*	O
olditem	struct
;	O
const	O
DBT	struct
*	O
newitem	struct
;	O
u_int32_t	int
makedup	int
;	O
{	O
DBT	struct
logrec	struct
;	O
DB_LSN	struct
*	O
lsnp	pointer
,	O
null_lsn	struct
;	O
u_int32_t	int
zero	int
;	O
u_int32_t	int
rectype	int
,	O
txn_num	int
;	O
int	O
ret	int
;	O
u_int8_t	char
*	O
bp	pointer
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
&&	O
TAILQ_FIRST	O
(	O
&	O
txnid	int
->	O
kids	struct
)	O
!=	O
NULL	O
&&	O
CDB___txn_activekids	function
(	O
txnid	int
)	O
!=	O
0	int
)	O
return	O
(	O
CDB___db_child_active_err	function
(	O
dbenv	pointer
)	O
)	O
;	O
rectype	int
=	O
DB_ham_replace	int
;	O
txn_num	int
=	O
txnid	int
==	O
NULL	O
?	O
0	int
:	O
txnid	int
->	O
txnid	int
;	O
if	O
(	O
txnid	int
==	O
NULL	O
)	O
{	O
ZERO_LSN	O
(	O
null_lsn	struct
)	O
;	O
lsnp	pointer
=	O
&	O
null_lsn	struct
;	O
}	O
else	O
lsnp	pointer
=	O
&	O
txnid	int
->	O
last_lsn	struct
;	O
logrec	struct
.	O
size	int
=	O
sizeof	O
(	O
rectype	int
)	O
+	O
sizeof	O
(	O
txn_num	int
)	O
+	O
sizeof	O
(	O
DB_LSN	struct
)	O
+	O
sizeof	O
(	O
fileid	array
)	O
+	O
sizeof	O
(	O
pgno	int
)	O
+	O
sizeof	O
(	O
ndx	int
)	O
+	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
+	O
sizeof	O
(	O
off	long
)	O
+	O
sizeof	O
(	O
u_int32_t	int
)	O
+	O
(	O
olditem	struct
==	O
NULL	O
?	O
0	int
:	O
olditem	struct
->	O
size	int
)	O
+	O
sizeof	O
(	O
u_int32_t	int
)	O
+	O
(	O
newitem	struct
==	O
NULL	O
?	O
0	int
:	O
newitem	struct
->	O
size	int
)	O
+	O
sizeof	O
(	O
makedup	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
logrec	struct
.	O
size	int
,	O
NULL	O
,	O
&	O
logrec	struct
.	O
data	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
bp	pointer
=	O
logrec	struct
.	O
data	pointer
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
rectype	int
,	O
sizeof	O
(	O
rectype	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
rectype	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
txn_num	int
,	O
sizeof	O
(	O
txn_num	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
txn_num	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
lsnp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
fileid	array
,	O
sizeof	O
(	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
fileid	array
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
pgno	int
,	O
sizeof	O
(	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
pgno	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
ndx	int
,	O
sizeof	O
(	O
ndx	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
ndx	int
)	O
;	O
if	O
(	O
pagelsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
pagelsn	struct
,	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
off	long
,	O
sizeof	O
(	O
off	long
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
off	long
)	O
;	O
if	O
(	O
olditem	struct
==	O
NULL	O
)	O
{	O
zero	int
=	O
0	int
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
zero	int
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
}	O
else	O
{	O
memcpy	function
(	O
bp	pointer
,	O
&	O
olditem	struct
->	O
size	int
,	O
sizeof	O
(	O
olditem	struct
->	O
size	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
olditem	struct
->	O
size	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
olditem	struct
->	O
data	pointer
,	O
olditem	struct
->	O
size	int
)	O
;	O
bp	pointer
+=	O
olditem	struct
->	O
size	int
;	O
}	O
if	O
(	O
newitem	struct
==	O
NULL	O
)	O
{	O
zero	int
=	O
0	int
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
zero	int
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
}	O
else	O
{	O
memcpy	function
(	O
bp	pointer
,	O
&	O
newitem	struct
->	O
size	int
,	O
sizeof	O
(	O
newitem	struct
->	O
size	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
newitem	struct
->	O
size	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
newitem	struct
->	O
data	pointer
,	O
newitem	struct
->	O
size	int
)	O
;	O
bp	pointer
+=	O
newitem	struct
->	O
size	int
;	O
}	O
memcpy	function
(	O
bp	pointer
,	O
&	O
makedup	int
,	O
sizeof	O
(	O
makedup	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
makedup	int
)	O
;	O
DB_ASSERT	O
(	O
(	O
u_int32_t	int
)	O
(	O
bp	pointer
-	O
(	O
u_int8_t	char
*	O
)	O
logrec	struct
.	O
data	pointer
)	O
==	O
logrec	struct
.	O
size	int
)	O
;	O
ret	int
=	O
CDB_log_put	function
(	O
dbenv	pointer
,	O
ret_lsnp	pointer
,	O
(	O
DBT	struct
*	O
)	O
&	O
logrec	struct
,	O
flags	int
)	O
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
)	O
txnid	int
->	O
last_lsn	struct
=	O
*	O
ret_lsnp	pointer
;	O
CDB___os_free	function
(	O
logrec	struct
.	O
data	pointer
,	O
logrec	struct
.	O
size	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___ham_replace_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
||	O
notused3	pointer
)	O
{	O
}	O
__ham_replace_args	struct
*	O
argp	pointer
;	O
u_int32_t	int
i	int
;	O
u_int	int
ch	int
;	O
int	O
ret	int
;	O
i	int
=	O
0	int
;	O
ch	int
=	O
0	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_replace_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]ham_replace: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tpgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pgno	int
)	O
;	O
printf	function
(	O
"\tndx: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
ndx	int
)	O
;	O
printf	function
(	O
"\tpagelsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pagelsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pagelsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\toff: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
off	long
)	O
;	O
printf	function
(	O
"\tolditem: "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argp	pointer
->	O
olditem	struct
.	O
size	int
;	O
i	int
++	O
)	O
{	O
ch	int
=	O
(	O
(	O
u_int8_t	char
*	O
)	O
argp	pointer
->	O
olditem	struct
.	O
data	pointer
)	O
[	O
i	int
]	O
;	O
if	O
(	O
isprint	function
(	O
ch	int
)	O
||	O
ch	int
==	O
0xa	int
)	O
putchar	function
(	O
ch	int
)	O
;	O
else	O
printf	function
(	O
"%#x "	pointer
,	O
ch	int
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"\tnewitem: "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argp	pointer
->	O
newitem	struct
.	O
size	int
;	O
i	int
++	O
)	O
{	O
ch	int
=	O
(	O
(	O
u_int8_t	char
*	O
)	O
argp	pointer
->	O
newitem	struct
.	O
data	pointer
)	O
[	O
i	int
]	O
;	O
if	O
(	O
isprint	function
(	O
ch	int
)	O
||	O
ch	int
==	O
0xa	int
)	O
putchar	function
(	O
ch	int
)	O
;	O
else	O
printf	function
(	O
"%#x "	pointer
,	O
ch	int
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"\tmakedup: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
makedup	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___ham_replace_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__ham_replace_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__ham_replace_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__ham_replace_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
ndx	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
ndx	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
ndx	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pagelsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pagelsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pagelsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
off	long
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
off	long
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
off	long
)	O
;	O
memset	function
(	O
&	O
argp	pointer
->	O
olditem	struct
,	O
0	int
,	O
sizeof	O
(	O
argp	pointer
->	O
olditem	struct
)	O
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
olditem	struct
.	O
size	int
,	O
bp	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
argp	pointer
->	O
olditem	struct
.	O
data	pointer
=	O
bp	pointer
;	O
bp	pointer
+=	O
argp	pointer
->	O
olditem	struct
.	O
size	int
;	O
memset	function
(	O
&	O
argp	pointer
->	O
newitem	struct
,	O
0	int
,	O
sizeof	O
(	O
argp	pointer
->	O
newitem	struct
)	O
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
newitem	struct
.	O
size	int
,	O
bp	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
argp	pointer
->	O
newitem	struct
.	O
data	pointer
=	O
bp	pointer
;	O
bp	pointer
+=	O
argp	pointer
->	O
newitem	struct
.	O
size	int
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
makedup	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
makedup	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
makedup	int
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___ham_newpgno_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
||	O
notused3	pointer
)	O
{	O
}	O
__ham_newpgno_args	struct
*	O
argp	pointer
;	O
int	O
ret	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_newpgno_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]ham_newpgno: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\topcode: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
opcode	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tpgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pgno	int
)	O
;	O
printf	function
(	O
"\tfree_pgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
free_pgno	int
)	O
;	O
printf	function
(	O
"\told_type: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
old_type	int
)	O
;	O
printf	function
(	O
"\told_pgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
old_pgno	int
)	O
;	O
printf	function
(	O
"\tnew_type: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
new_type	int
)	O
;	O
printf	function
(	O
"\tpagelsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pagelsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pagelsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tmetalsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
metalsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
metalsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___ham_newpgno_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__ham_newpgno_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__ham_newpgno_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__ham_newpgno_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
opcode	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
opcode	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
opcode	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
free_pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
free_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
free_pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
old_type	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
old_type	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
old_type	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
old_pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
old_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
old_pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
new_type	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
new_type	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
new_type	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pagelsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pagelsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pagelsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
metalsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
metalsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
metalsn	struct
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___ham_ovfl_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
||	O
notused3	pointer
)	O
{	O
}	O
__ham_ovfl_args	struct
*	O
argp	pointer
;	O
int	O
ret	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_ovfl_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]ham_ovfl: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tstart_pgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
start_pgno	int
)	O
;	O
printf	function
(	O
"\tnpages: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
npages	int
)	O
;	O
printf	function
(	O
"\tfree_pgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
free_pgno	int
)	O
;	O
printf	function
(	O
"\tovflpoint: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
ovflpoint	int
)	O
;	O
printf	function
(	O
"\tmetalsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
metalsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
metalsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___ham_ovfl_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__ham_ovfl_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__ham_ovfl_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__ham_ovfl_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
start_pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
start_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
start_pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
npages	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
npages	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
npages	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
free_pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
free_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
free_pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
ovflpoint	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
ovflpoint	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
ovflpoint	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
metalsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
metalsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
metalsn	struct
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___ham_copypage_log	function
(	O
dbenv	pointer
,	O
txnid	int
,	O
ret_lsnp	pointer
,	O
flags	int
,	O
fileid	array
,	O
pgno	int
,	O
pagelsn	struct
,	O
next_pgno	int
,	O
nextlsn	struct
,	O
nnext_pgno	int
,	O
nnextlsn	struct
,	O
page	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_TXN	struct
*	O
txnid	int
;	O
DB_LSN	struct
*	O
ret_lsnp	pointer
;	O
u_int32_t	int
flags	int
;	O
int32_t	int
fileid	array
;	O
db_pgno_t	int
pgno	int
;	O
DB_LSN	struct
*	O
pagelsn	struct
;	O
db_pgno_t	int
next_pgno	int
;	O
DB_LSN	struct
*	O
nextlsn	struct
;	O
db_pgno_t	int
nnext_pgno	int
;	O
DB_LSN	struct
*	O
nnextlsn	struct
;	O
const	O
DBT	struct
*	O
page	pointer
;	O
{	O
DBT	struct
logrec	struct
;	O
DB_LSN	struct
*	O
lsnp	pointer
,	O
null_lsn	struct
;	O
u_int32_t	int
zero	int
;	O
u_int32_t	int
rectype	int
,	O
txn_num	int
;	O
int	O
ret	int
;	O
u_int8_t	char
*	O
bp	pointer
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
&&	O
TAILQ_FIRST	O
(	O
&	O
txnid	int
->	O
kids	struct
)	O
!=	O
NULL	O
&&	O
CDB___txn_activekids	function
(	O
txnid	int
)	O
!=	O
0	int
)	O
return	O
(	O
CDB___db_child_active_err	function
(	O
dbenv	pointer
)	O
)	O
;	O
rectype	int
=	O
DB_ham_copypage	int
;	O
txn_num	int
=	O
txnid	int
==	O
NULL	O
?	O
0	int
:	O
txnid	int
->	O
txnid	int
;	O
if	O
(	O
txnid	int
==	O
NULL	O
)	O
{	O
ZERO_LSN	O
(	O
null_lsn	struct
)	O
;	O
lsnp	pointer
=	O
&	O
null_lsn	struct
;	O
}	O
else	O
lsnp	pointer
=	O
&	O
txnid	int
->	O
last_lsn	struct
;	O
logrec	struct
.	O
size	int
=	O
sizeof	O
(	O
rectype	int
)	O
+	O
sizeof	O
(	O
txn_num	int
)	O
+	O
sizeof	O
(	O
DB_LSN	struct
)	O
+	O
sizeof	O
(	O
fileid	array
)	O
+	O
sizeof	O
(	O
pgno	int
)	O
+	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
+	O
sizeof	O
(	O
next_pgno	int
)	O
+	O
sizeof	O
(	O
*	O
nextlsn	struct
)	O
+	O
sizeof	O
(	O
nnext_pgno	int
)	O
+	O
sizeof	O
(	O
*	O
nnextlsn	struct
)	O
+	O
sizeof	O
(	O
u_int32_t	int
)	O
+	O
(	O
page	pointer
==	O
NULL	O
?	O
0	int
:	O
page	pointer
->	O
size	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
logrec	struct
.	O
size	int
,	O
NULL	O
,	O
&	O
logrec	struct
.	O
data	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
bp	pointer
=	O
logrec	struct
.	O
data	pointer
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
rectype	int
,	O
sizeof	O
(	O
rectype	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
rectype	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
txn_num	int
,	O
sizeof	O
(	O
txn_num	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
txn_num	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
lsnp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
fileid	array
,	O
sizeof	O
(	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
fileid	array
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
pgno	int
,	O
sizeof	O
(	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
pgno	int
)	O
;	O
if	O
(	O
pagelsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
pagelsn	struct
,	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
next_pgno	int
,	O
sizeof	O
(	O
next_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
next_pgno	int
)	O
;	O
if	O
(	O
nextlsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
nextlsn	struct
,	O
sizeof	O
(	O
*	O
nextlsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
nextlsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
nextlsn	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
nnext_pgno	int
,	O
sizeof	O
(	O
nnext_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
nnext_pgno	int
)	O
;	O
if	O
(	O
nnextlsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
nnextlsn	struct
,	O
sizeof	O
(	O
*	O
nnextlsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
nnextlsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
nnextlsn	struct
)	O
;	O
if	O
(	O
page	pointer
==	O
NULL	O
)	O
{	O
zero	int
=	O
0	int
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
zero	int
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
}	O
else	O
{	O
memcpy	function
(	O
bp	pointer
,	O
&	O
page	pointer
->	O
size	int
,	O
sizeof	O
(	O
page	pointer
->	O
size	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
page	pointer
->	O
size	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
page	pointer
->	O
data	pointer
,	O
page	pointer
->	O
size	int
)	O
;	O
bp	pointer
+=	O
page	pointer
->	O
size	int
;	O
}	O
DB_ASSERT	O
(	O
(	O
u_int32_t	int
)	O
(	O
bp	pointer
-	O
(	O
u_int8_t	char
*	O
)	O
logrec	struct
.	O
data	pointer
)	O
==	O
logrec	struct
.	O
size	int
)	O
;	O
ret	int
=	O
CDB_log_put	function
(	O
dbenv	pointer
,	O
ret_lsnp	pointer
,	O
(	O
DBT	struct
*	O
)	O
&	O
logrec	struct
,	O
flags	int
)	O
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
)	O
txnid	int
->	O
last_lsn	struct
=	O
*	O
ret_lsnp	pointer
;	O
CDB___os_free	function
(	O
logrec	struct
.	O
data	pointer
,	O
logrec	struct
.	O
size	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___ham_copypage_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
||	O
notused3	pointer
)	O
{	O
}	O
__ham_copypage_args	struct
*	O
argp	pointer
;	O
u_int32_t	int
i	int
;	O
u_int	int
ch	int
;	O
int	O
ret	int
;	O
i	int
=	O
0	int
;	O
ch	int
=	O
0	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_copypage_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]ham_copypage: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tpgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pgno	int
)	O
;	O
printf	function
(	O
"\tpagelsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pagelsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pagelsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tnext_pgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
next_pgno	int
)	O
;	O
printf	function
(	O
"\tnextlsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
nextlsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
nextlsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tnnext_pgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
nnext_pgno	int
)	O
;	O
printf	function
(	O
"\tnnextlsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
nnextlsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
nnextlsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tpage: "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argp	pointer
->	O
page	pointer
.	O
size	int
;	O
i	int
++	O
)	O
{	O
ch	int
=	O
(	O
(	O
u_int8_t	char
*	O
)	O
argp	pointer
->	O
page	pointer
.	O
data	pointer
)	O
[	O
i	int
]	O
;	O
if	O
(	O
isprint	function
(	O
ch	int
)	O
||	O
ch	int
==	O
0xa	int
)	O
putchar	function
(	O
ch	int
)	O
;	O
else	O
printf	function
(	O
"%#x "	pointer
,	O
ch	int
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___ham_copypage_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__ham_copypage_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__ham_copypage_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__ham_copypage_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pagelsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pagelsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pagelsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
next_pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
next_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
next_pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
nextlsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
nextlsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
nextlsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
nnext_pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
nnext_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
nnext_pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
nnextlsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
nnextlsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
nnextlsn	struct
)	O
;	O
memset	function
(	O
&	O
argp	pointer
->	O
page	pointer
,	O
0	int
,	O
sizeof	O
(	O
argp	pointer
->	O
page	pointer
)	O
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
page	pointer
.	O
size	int
,	O
bp	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
argp	pointer
->	O
page	pointer
.	O
data	pointer
=	O
bp	pointer
;	O
bp	pointer
+=	O
argp	pointer
->	O
page	pointer
.	O
size	int
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___ham_metagroup_log	function
(	O
dbenv	pointer
,	O
txnid	int
,	O
ret_lsnp	pointer
,	O
flags	int
,	O
fileid	array
,	O
bucket	int
,	O
pgno	int
,	O
metalsn	struct
,	O
pagelsn	struct
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_TXN	struct
*	O
txnid	int
;	O
DB_LSN	struct
*	O
ret_lsnp	pointer
;	O
u_int32_t	int
flags	int
;	O
int32_t	int
fileid	array
;	O
u_int32_t	int
bucket	int
;	O
db_pgno_t	int
pgno	int
;	O
DB_LSN	struct
*	O
metalsn	struct
;	O
DB_LSN	struct
*	O
pagelsn	struct
;	O
{	O
DBT	struct
logrec	struct
;	O
DB_LSN	struct
*	O
lsnp	pointer
,	O
null_lsn	struct
;	O
u_int32_t	int
rectype	int
,	O
txn_num	int
;	O
int	O
ret	int
;	O
u_int8_t	char
*	O
bp	pointer
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
&&	O
TAILQ_FIRST	O
(	O
&	O
txnid	int
->	O
kids	struct
)	O
!=	O
NULL	O
&&	O
CDB___txn_activekids	function
(	O
txnid	int
)	O
!=	O
0	int
)	O
return	O
(	O
CDB___db_child_active_err	function
(	O
dbenv	pointer
)	O
)	O
;	O
rectype	int
=	O
DB_ham_metagroup	int
;	O
txn_num	int
=	O
txnid	int
==	O
NULL	O
?	O
0	int
:	O
txnid	int
->	O
txnid	int
;	O
if	O
(	O
txnid	int
==	O
NULL	O
)	O
{	O
ZERO_LSN	O
(	O
null_lsn	struct
)	O
;	O
lsnp	pointer
=	O
&	O
null_lsn	struct
;	O
}	O
else	O
lsnp	pointer
=	O
&	O
txnid	int
->	O
last_lsn	struct
;	O
logrec	struct
.	O
size	int
=	O
sizeof	O
(	O
rectype	int
)	O
+	O
sizeof	O
(	O
txn_num	int
)	O
+	O
sizeof	O
(	O
DB_LSN	struct
)	O
+	O
sizeof	O
(	O
fileid	array
)	O
+	O
sizeof	O
(	O
bucket	int
)	O
+	O
sizeof	O
(	O
pgno	int
)	O
+	O
sizeof	O
(	O
*	O
metalsn	struct
)	O
+	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
logrec	struct
.	O
size	int
,	O
NULL	O
,	O
&	O
logrec	struct
.	O
data	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
bp	pointer
=	O
logrec	struct
.	O
data	pointer
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
rectype	int
,	O
sizeof	O
(	O
rectype	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
rectype	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
txn_num	int
,	O
sizeof	O
(	O
txn_num	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
txn_num	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
lsnp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
fileid	array
,	O
sizeof	O
(	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
fileid	array
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
bucket	int
,	O
sizeof	O
(	O
bucket	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
bucket	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
pgno	int
,	O
sizeof	O
(	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
pgno	int
)	O
;	O
if	O
(	O
metalsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
metalsn	struct
,	O
sizeof	O
(	O
*	O
metalsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
metalsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
metalsn	struct
)	O
;	O
if	O
(	O
pagelsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
pagelsn	struct
,	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
pagelsn	struct
)	O
;	O
DB_ASSERT	O
(	O
(	O
u_int32_t	int
)	O
(	O
bp	pointer
-	O
(	O
u_int8_t	char
*	O
)	O
logrec	struct
.	O
data	pointer
)	O
==	O
logrec	struct
.	O
size	int
)	O
;	O
ret	int
=	O
CDB_log_put	function
(	O
dbenv	pointer
,	O
ret_lsnp	pointer
,	O
(	O
DBT	struct
*	O
)	O
&	O
logrec	struct
,	O
flags	int
)	O
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
)	O
txnid	int
->	O
last_lsn	struct
=	O
*	O
ret_lsnp	pointer
;	O
CDB___os_free	function
(	O
logrec	struct
.	O
data	pointer
,	O
logrec	struct
.	O
size	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___ham_metagroup_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
||	O
notused3	pointer
)	O
{	O
}	O
__ham_metagroup_args	struct
*	O
argp	pointer
;	O
int	O
ret	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_metagroup_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]ham_metagroup: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tbucket: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
bucket	int
)	O
;	O
printf	function
(	O
"\tpgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pgno	int
)	O
;	O
printf	function
(	O
"\tmetalsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
metalsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
metalsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tpagelsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pagelsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pagelsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___ham_metagroup_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__ham_metagroup_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__ham_metagroup_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__ham_metagroup_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
bucket	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
bucket	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
bucket	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
metalsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
metalsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
metalsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pagelsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pagelsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pagelsn	struct
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___ham_groupalloc1_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
||	O
notused3	pointer
)	O
{	O
}	O
__ham_groupalloc1_args	struct
*	O
argp	pointer
;	O
int	O
ret	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_groupalloc1_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]ham_groupalloc1: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tpgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
pgno	int
)	O
;	O
printf	function
(	O
"\tmetalsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
metalsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
metalsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tmmetalsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
mmetalsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
mmetalsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tstart_pgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
start_pgno	int
)	O
;	O
printf	function
(	O
"\tnum: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
num	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___ham_groupalloc1_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__ham_groupalloc1_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__ham_groupalloc1_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__ham_groupalloc1_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
metalsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
metalsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
metalsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
mmetalsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
mmetalsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
mmetalsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
start_pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
start_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
start_pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
num	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
num	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
num	int
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___ham_groupalloc_log	function
(	O
dbenv	pointer
,	O
txnid	int
,	O
ret_lsnp	pointer
,	O
flags	int
,	O
fileid	array
,	O
meta_lsn	struct
,	O
alloc_lsn	struct
,	O
start_pgno	int
,	O
num	int
,	O
free	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_TXN	struct
*	O
txnid	int
;	O
DB_LSN	struct
*	O
ret_lsnp	pointer
;	O
u_int32_t	int
flags	int
;	O
int32_t	int
fileid	array
;	O
DB_LSN	struct
*	O
meta_lsn	struct
;	O
DB_LSN	struct
*	O
alloc_lsn	struct
;	O
db_pgno_t	int
start_pgno	int
;	O
u_int32_t	int
num	int
;	O
db_pgno_t	int
free	int
;	O
{	O
DBT	struct
logrec	struct
;	O
DB_LSN	struct
*	O
lsnp	pointer
,	O
null_lsn	struct
;	O
u_int32_t	int
rectype	int
,	O
txn_num	int
;	O
int	O
ret	int
;	O
u_int8_t	char
*	O
bp	pointer
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
&&	O
TAILQ_FIRST	O
(	O
&	O
txnid	int
->	O
kids	struct
)	O
!=	O
NULL	O
&&	O
CDB___txn_activekids	function
(	O
txnid	int
)	O
!=	O
0	int
)	O
return	O
(	O
CDB___db_child_active_err	function
(	O
dbenv	pointer
)	O
)	O
;	O
rectype	int
=	O
DB_ham_groupalloc	int
;	O
txn_num	int
=	O
txnid	int
==	O
NULL	O
?	O
0	int
:	O
txnid	int
->	O
txnid	int
;	O
if	O
(	O
txnid	int
==	O
NULL	O
)	O
{	O
ZERO_LSN	O
(	O
null_lsn	struct
)	O
;	O
lsnp	pointer
=	O
&	O
null_lsn	struct
;	O
}	O
else	O
lsnp	pointer
=	O
&	O
txnid	int
->	O
last_lsn	struct
;	O
logrec	struct
.	O
size	int
=	O
sizeof	O
(	O
rectype	int
)	O
+	O
sizeof	O
(	O
txn_num	int
)	O
+	O
sizeof	O
(	O
DB_LSN	struct
)	O
+	O
sizeof	O
(	O
fileid	array
)	O
+	O
sizeof	O
(	O
*	O
meta_lsn	struct
)	O
+	O
sizeof	O
(	O
*	O
alloc_lsn	struct
)	O
+	O
sizeof	O
(	O
start_pgno	int
)	O
+	O
sizeof	O
(	O
num	int
)	O
+	O
sizeof	O
(	O
free	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
logrec	struct
.	O
size	int
,	O
NULL	O
,	O
&	O
logrec	struct
.	O
data	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
bp	pointer
=	O
logrec	struct
.	O
data	pointer
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
rectype	int
,	O
sizeof	O
(	O
rectype	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
rectype	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
txn_num	int
,	O
sizeof	O
(	O
txn_num	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
txn_num	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
lsnp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
fileid	array
,	O
sizeof	O
(	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
fileid	array
)	O
;	O
if	O
(	O
meta_lsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
meta_lsn	struct
,	O
sizeof	O
(	O
*	O
meta_lsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
meta_lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
meta_lsn	struct
)	O
;	O
if	O
(	O
alloc_lsn	struct
!=	O
NULL	O
)	O
memcpy	function
(	O
bp	pointer
,	O
alloc_lsn	struct
,	O
sizeof	O
(	O
*	O
alloc_lsn	struct
)	O
)	O
;	O
else	O
memset	function
(	O
bp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
alloc_lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
*	O
alloc_lsn	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
start_pgno	int
,	O
sizeof	O
(	O
start_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
start_pgno	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
num	int
,	O
sizeof	O
(	O
num	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
num	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
free	int
,	O
sizeof	O
(	O
free	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
free	int
)	O
;	O
DB_ASSERT	O
(	O
(	O
u_int32_t	int
)	O
(	O
bp	pointer
-	O
(	O
u_int8_t	char
*	O
)	O
logrec	struct
.	O
data	pointer
)	O
==	O
logrec	struct
.	O
size	int
)	O
;	O
ret	int
=	O
CDB_log_put	function
(	O
dbenv	pointer
,	O
ret_lsnp	pointer
,	O
(	O
DBT	struct
*	O
)	O
&	O
logrec	struct
,	O
flags	int
)	O
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
)	O
txnid	int
->	O
last_lsn	struct
=	O
*	O
ret_lsnp	pointer
;	O
CDB___os_free	function
(	O
logrec	struct
.	O
data	pointer
,	O
logrec	struct
.	O
size	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___ham_groupalloc_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
||	O
notused3	pointer
)	O
{	O
}	O
__ham_groupalloc_args	struct
*	O
argp	pointer
;	O
int	O
ret	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_groupalloc_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]ham_groupalloc: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tmeta_lsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
meta_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
meta_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\talloc_lsn: [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
alloc_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
alloc_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\tstart_pgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
start_pgno	int
)	O
;	O
printf	function
(	O
"\tnum: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
num	int
)	O
;	O
printf	function
(	O
"\tfree: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
free	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___ham_groupalloc_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__ham_groupalloc_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__ham_groupalloc_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__ham_groupalloc_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
meta_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
meta_lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
meta_lsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
alloc_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
alloc_lsn	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
alloc_lsn	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
start_pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
start_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
start_pgno	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
num	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
num	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
num	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
free	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
free	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
free	int
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___ham_init_print	function
(	O
dbenv	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
{	O
int	O
ret	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___ham_insdel_print	function
,	O
DB_ham_insdel	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___ham_newpage_print	function
,	O
DB_ham_newpage	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___ham_splitmeta_print	function
,	O
DB_ham_splitmeta	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___ham_splitdata_print	function
,	O
DB_ham_splitdata	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___ham_replace_print	function
,	O
DB_ham_replace	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___ham_newpgno_print	function
,	O
DB_ham_newpgno	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___ham_ovfl_print	function
,	O
DB_ham_ovfl	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___ham_copypage_print	function
,	O
DB_ham_copypage	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___ham_metagroup_print	function
,	O
DB_ham_metagroup	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___ham_groupalloc1_print	function
,	O
DB_ham_groupalloc1	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___ham_groupalloc_print	function
,	O
DB_ham_groupalloc	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___ham_init_recover	function
(	O
dbenv	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
{	O
int	O
ret	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___ham_insdel_recover	function
,	O
DB_ham_insdel	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___ham_newpage_recover	function
,	O
DB_ham_newpage	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___deprecated_recover	function
,	O
DB_ham_splitmeta	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___ham_splitdata_recover	function
,	O
DB_ham_splitdata	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___ham_replace_recover	function
,	O
DB_ham_replace	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___deprecated_recover	function
,	O
DB_ham_newpgno	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___deprecated_recover	function
,	O
DB_ham_ovfl	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___ham_copypage_recover	function
,	O
DB_ham_copypage	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___ham_metagroup_recover	function
,	O
DB_ham_metagroup	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___deprecated_recover	function
,	O
DB_ham_groupalloc1	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___ham_groupalloc_recover	function
,	O
DB_ham_groupalloc	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
