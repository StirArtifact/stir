uintptr_t	long
page	long
;	O
volatile	O
int	O
handler_called	int
=	O
0	int
;	O
int	O
handler	pointer
(	O
void	O
*	O
fault_address	pointer
,	O
int	O
serious	int
)	O
{	O
handler_called	int
++	O
;	O
if	O
(	O
handler_called	int
>	O
10	int
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
fault_address	pointer
!=	O
(	O
void	O
*	O
)	O
(	O
(	O
page	long
+	O
0x678	int
)	O
&	O
~	O
SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS	int
)	O
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
mprotect	function
(	O
(	O
void	O
*	O
)	O
page	long
,	O
0x4000	int
,	O
PROT_READ_WRITE	O
)	O
==	O
0	int
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
void	O
crasher	function
(	O
uintptr_t	long
p	long
)	O
{	O
*	O
(	O
volatile	O
int	O
*	O
)	O
(	O
p	long
+	O
0x678	int
)	O
=	O
42	int
;	O
}	O
int	O
main	function
(	O
)	O
{	O
int	O
prot_unwritable	int
;	O
void	O
*	O
p	long
;	O
prot_unwritable	int
=	O
PROT_READ	int
;	O
p	long
=	O
mmap_zeromap	function
(	O
(	O
void	O
*	O
)	O
0x12340000	int
,	O
0x4000	int
)	O
;	O
if	O
(	O
p	long
==	O
(	O
void	O
*	O
)	O
(	O
-	O
1	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"mmap_zeromap failed.\n"	pointer
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
page	long
=	O
(	O
uintptr_t	long
)	O
p	long
;	O
if	O
(	O
mprotect	function
(	O
(	O
void	O
*	O
)	O
page	long
,	O
0x4000	int
,	O
prot_unwritable	int
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"mprotect failed.\n"	pointer
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
if	O
(	O
mprotect	function
(	O
(	O
void	O
*	O
)	O
page	long
,	O
0x4000	int
,	O
PROT_READ_WRITE	O
)	O
<	O
0	int
||	O
mprotect	function
(	O
(	O
void	O
*	O
)	O
page	long
,	O
0x4000	int
,	O
prot_unwritable	int
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"mprotect failed.\n"	pointer
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
sigsegv_install_handler	function
(	O
&	O
handler	pointer
)	O
;	O
crasher	function
(	O
page	long
)	O
;	O
crasher	function
(	O
page	long
)	O
;	O
if	O
(	O
handler_called	int
!=	O
1	int
)	O
exit	function
(	O
1	int
)	O
;	O
printf	function
(	O
"Test passed.\n"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
