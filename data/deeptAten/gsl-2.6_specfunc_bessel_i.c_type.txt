static	O
int	O
bessel_il_CF1	function
(	O
const	O
int	O
l	int
,	O
const	O
double	O
x	double
,	O
const	O
double	O
threshold	double
,	O
double	O
*	O
ratio	pointer
)	O
{	O
const	O
int	O
kmax	int
=	O
2000	int
;	O
double	O
tk	double
=	O
1.0	int
;	O
double	O
sum	double
=	O
1.0	int
;	O
double	O
rhok	double
=	O
0.0	int
;	O
int	O
k	int
;	O
for	O
(	O
k	int
=	O
1	int
;	O
k	int
<=	O
kmax	int
;	O
k	int
++	O
)	O
{	O
double	O
ak	double
=	O
(	O
x	double
/	O
(	O
2.0	int
*	O
l	int
+	O
1.0	int
+	O
2.0	int
*	O
k	int
)	O
)	O
*	O
(	O
x	double
/	O
(	O
2.0	int
*	O
l	int
+	O
3.0	int
+	O
2.0	int
*	O
k	int
)	O
)	O
;	O
rhok	double
=	O
-	O
ak	double
*	O
(	O
1.0	int
+	O
rhok	double
)	O
/	O
(	O
1.0	int
+	O
ak	double
*	O
(	O
1.0	int
+	O
rhok	double
)	O
)	O
;	O
tk	double
*=	O
rhok	double
;	O
sum	double
+=	O
tk	double
;	O
if	O
(	O
fabs	function
(	O
tk	double
/	O
sum	double
)	O
<	O
threshold	double
)	O
break	O
;	O
}	O
*	O
ratio	pointer
=	O
x	double
/	O
(	O
2.0	int
*	O
l	int
+	O
3.0	int
)	O
*	O
sum	double
;	O
if	O
(	O
k	int
==	O
kmax	int
)	O
GSL_ERROR	O
(	O
"error"	pointer
,	O
GSL_EMAXITER	int
)	O
;	O
else	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_sf_bessel_i0_scaled_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
double	O
ax	double
=	O
fabs	function
(	O
x	double
)	O
;	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
ax	double
<	O
0.2	int
)	O
{	O
const	O
double	O
eax	double
=	O
exp	function
(	O
-	O
ax	double
)	O
;	O
const	O
double	O
y	double
=	O
ax	double
*	O
ax	double
;	O
const	O
double	O
c1	double
=	O
1.0	int
/	O
6.0	int
;	O
const	O
double	O
c2	double
=	O
1.0	int
/	O
120.0	int
;	O
const	O
double	O
c3	double
=	O
1.0	int
/	O
5040.0	int
;	O
const	O
double	O
c4	double
=	O
1.0	int
/	O
362880.0	int
;	O
const	O
double	O
c5	double
=	O
1.0	int
/	O
39916800.0	int
;	O
const	O
double	O
sum	double
=	O
1.0	int
+	O
y	double
*	O
(	O
c1	double
+	O
y	double
*	O
(	O
c2	double
+	O
y	double
*	O
(	O
c3	double
+	O
y	double
*	O
(	O
c4	double
+	O
y	double
*	O
c5	double
)	O
)	O
)	O
)	O
;	O
result	pointer
->	O
val	double
=	O
eax	double
*	O
sum	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
result	pointer
->	O
val	double
;	O
}	O
else	O
if	O
(	O
ax	double
<	O
-	O
0.5	int
*	O
GSL_LOG_DBL_EPSILON	O
)	O
{	O
result	pointer
->	O
val	double
=	O
(	O
1.0	int
-	O
exp	function
(	O
-	O
2.0	int
*	O
ax	double
)	O
)	O
/	O
(	O
2.0	int
*	O
ax	double
)	O
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
result	pointer
->	O
val	double
;	O
}	O
else	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
/	O
(	O
2.0	int
*	O
ax	double
)	O
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
result	pointer
->	O
val	double
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_sf_bessel_i1_scaled_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
double	O
ax	double
=	O
fabs	function
(	O
x	double
)	O
;	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
ax	double
<	O
3.0	int
*	O
GSL_DBL_MIN	int
)	O
{	O
UNDERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
ax	double
<	O
0.25	int
)	O
{	O
const	O
double	O
eax	double
=	O
exp	function
(	O
-	O
ax	double
)	O
;	O
const	O
double	O
y	double
=	O
x	double
*	O
x	double
;	O
const	O
double	O
c1	double
=	O
1.0	int
/	O
10.0	int
;	O
const	O
double	O
c2	double
=	O
1.0	int
/	O
280.0	int
;	O
const	O
double	O
c3	double
=	O
1.0	int
/	O
15120.0	int
;	O
const	O
double	O
c4	double
=	O
1.0	int
/	O
1330560.0	int
;	O
const	O
double	O
c5	double
=	O
1.0	int
/	O
172972800.0	int
;	O
const	O
double	O
sum	double
=	O
1.0	int
+	O
y	double
*	O
(	O
c1	double
+	O
y	double
*	O
(	O
c2	double
+	O
y	double
*	O
(	O
c3	double
+	O
y	double
*	O
(	O
c4	double
+	O
y	double
*	O
c5	double
)	O
)	O
)	O
)	O
;	O
result	pointer
->	O
val	double
=	O
eax	double
*	O
x	double
/	O
3.0	int
*	O
sum	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
double	O
ex	double
=	O
exp	function
(	O
-	O
2.0	int
*	O
ax	double
)	O
;	O
result	pointer
->	O
val	double
=	O
0.5	int
*	O
(	O
ax	double
*	O
(	O
1.0	int
+	O
ex	double
)	O
-	O
(	O
1.0	int
-	O
ex	double
)	O
)	O
/	O
(	O
ax	double
*	O
ax	double
)	O
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
if	O
(	O
x	double
<	O
0.0	int
)	O
result	pointer
->	O
val	double
=	O
-	O
result	pointer
->	O
val	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_bessel_i2_scaled_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
double	O
ax	double
=	O
fabs	function
(	O
x	double
)	O
;	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
ax	double
<	O
4.0	int
*	O
GSL_SQRT_DBL_MIN	int
)	O
{	O
UNDERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
ax	double
<	O
0.25	int
)	O
{	O
const	O
double	O
y	double
=	O
x	double
*	O
x	double
;	O
const	O
double	O
c1	double
=	O
1.0	int
/	O
14.0	int
;	O
const	O
double	O
c2	double
=	O
1.0	int
/	O
504.0	int
;	O
const	O
double	O
c3	double
=	O
1.0	int
/	O
33264.0	int
;	O
const	O
double	O
c4	double
=	O
1.0	int
/	O
3459456.0	int
;	O
const	O
double	O
c5	double
=	O
1.0	int
/	O
518918400.0	int
;	O
const	O
double	O
sum	double
=	O
1.0	int
+	O
y	double
*	O
(	O
c1	double
+	O
y	double
*	O
(	O
c2	double
+	O
y	double
*	O
(	O
c3	double
+	O
y	double
*	O
(	O
c4	double
+	O
y	double
*	O
c5	double
)	O
)	O
)	O
)	O
;	O
const	O
double	O
pre	double
=	O
exp	function
(	O
-	O
ax	double
)	O
*	O
x	double
*	O
x	double
/	O
15.0	int
;	O
result	pointer
->	O
val	double
=	O
pre	double
*	O
sum	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
double	O
ex	double
=	O
exp	function
(	O
-	O
2.0	int
*	O
ax	double
)	O
;	O
double	O
x2	double
=	O
x	double
*	O
x	double
;	O
result	pointer
->	O
val	double
=	O
0.5	int
*	O
(	O
(	O
3.0	int
+	O
x2	double
)	O
*	O
(	O
1.0	int
-	O
ex	double
)	O
-	O
3.0	int
*	O
ax	double
*	O
(	O
1.0	int
+	O
ex	double
)	O
)	O
/	O
(	O
ax	double
*	O
ax	double
*	O
ax	double
)	O
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_bessel_il_scaled_e	function
(	O
const	O
int	O
l	int
,	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
double	O
sgn	pointer
=	O
1.0	int
;	O
double	O
ax	double
=	O
fabs	function
(	O
x	double
)	O
;	O
if	O
(	O
x	double
<	O
0.0	int
)	O
{	O
sgn	pointer
=	O
(	O
GSL_IS_ODD	O
(	O
l	int
)	O
?	O
-	O
1.0	int
:	O
1.0	int
)	O
;	O
x	double
=	O
-	O
x	double
;	O
}	O
if	O
(	O
l	int
<	O
0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
(	O
l	int
==	O
0	int
?	O
1.0	int
:	O
0.0	int
)	O
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
l	int
==	O
0	int
)	O
{	O
gsl_sf_result	struct
il	struct
;	O
int	O
stat_il	int
=	O
gsl_sf_bessel_i0_scaled_e	function
(	O
x	double
,	O
&	O
il	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
sgn	pointer
*	O
il	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
il	struct
.	O
err	double
;	O
return	O
stat_il	int
;	O
}	O
else	O
if	O
(	O
l	int
==	O
1	int
)	O
{	O
gsl_sf_result	struct
il	struct
;	O
int	O
stat_il	int
=	O
gsl_sf_bessel_i1_scaled_e	function
(	O
x	double
,	O
&	O
il	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
sgn	pointer
*	O
il	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
il	struct
.	O
err	double
;	O
return	O
stat_il	int
;	O
}	O
else	O
if	O
(	O
l	int
==	O
2	int
)	O
{	O
gsl_sf_result	struct
il	struct
;	O
int	O
stat_il	int
=	O
gsl_sf_bessel_i2_scaled_e	function
(	O
x	double
,	O
&	O
il	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
sgn	pointer
*	O
il	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
il	struct
.	O
err	double
;	O
return	O
stat_il	int
;	O
}	O
else	O
if	O
(	O
x	double
*	O
x	double
<	O
10.0	int
*	O
(	O
l	int
+	O
1.5	int
)	O
/	O
M_E	int
)	O
{	O
gsl_sf_result	struct
b	double
;	O
int	O
stat	int
=	O
gsl_sf_bessel_IJ_taylor_e	function
(	O
l	int
+	O
0.5	int
,	O
x	double
,	O
1	int
,	O
50	int
,	O
GSL_DBL_EPSILON	int
,	O
&	O
b	double
)	O
;	O
double	O
pre	double
=	O
exp	function
(	O
-	O
ax	double
)	O
*	O
sqrt	function
(	O
(	O
0.5	int
*	O
M_PI	int
)	O
/	O
x	double
)	O
;	O
result	pointer
->	O
val	double
=	O
sgn	pointer
*	O
pre	double
*	O
b	double
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
pre	double
*	O
b	double
.	O
err	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
stat	int
;	O
}	O
else	O
if	O
(	O
l	int
<	O
150	int
)	O
{	O
gsl_sf_result	struct
i0_scaled	struct
;	O
int	O
stat_i0	int
=	O
gsl_sf_bessel_i0_scaled_e	function
(	O
ax	double
,	O
&	O
i0_scaled	struct
)	O
;	O
double	O
rat	double
;	O
int	O
stat_CF1	int
=	O
bessel_il_CF1	function
(	O
l	int
,	O
ax	double
,	O
GSL_DBL_EPSILON	int
,	O
&	O
rat	double
)	O
;	O
double	O
iellp1	double
=	O
rat	double
*	O
GSL_SQRT_DBL_MIN	int
;	O
double	O
iell	double
=	O
GSL_SQRT_DBL_MIN	int
;	O
double	O
iellm1	double
;	O
int	O
ell	int
;	O
for	O
(	O
ell	int
=	O
l	int
;	O
ell	int
>=	O
1	int
;	O
ell	int
--	O
)	O
{	O
iellm1	double
=	O
iellp1	double
+	O
(	O
2	int
*	O
ell	int
+	O
1	int
)	O
/	O
x	double
*	O
iell	double
;	O
iellp1	double
=	O
iell	double
;	O
iell	double
=	O
iellm1	double
;	O
}	O
result	pointer
->	O
val	double
=	O
sgn	pointer
*	O
i0_scaled	struct
.	O
val	double
*	O
(	O
GSL_SQRT_DBL_MIN	int
/	O
iell	double
)	O
;	O
result	pointer
->	O
err	double
=	O
i0_scaled	struct
.	O
err	double
*	O
(	O
GSL_SQRT_DBL_MIN	int
/	O
iell	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_i0	int
,	O
stat_CF1	int
)	O
;	O
}	O
else	O
if	O
(	O
GSL_MIN	O
(	O
0.29	int
/	O
(	O
l	int
*	O
l	int
+	O
1.0	int
)	O
,	O
0.5	int
/	O
(	O
l	int
*	O
l	int
+	O
1.0	int
+	O
x	double
*	O
x	double
)	O
)	O
<	O
0.5	int
*	O
GSL_ROOT3_DBL_EPSILON	int
)	O
{	O
int	O
status	int
=	O
gsl_sf_bessel_Inu_scaled_asymp_unif_e	function
(	O
l	int
+	O
0.5	int
,	O
x	double
,	O
result	pointer
)	O
;	O
double	O
pre	double
=	O
sqrt	function
(	O
(	O
0.5	int
*	O
M_PI	int
)	O
/	O
x	double
)	O
;	O
result	pointer
->	O
val	double
*=	O
sgn	pointer
*	O
pre	double
;	O
result	pointer
->	O
err	double
*=	O
pre	double
;	O
return	O
status	int
;	O
}	O
else	O
{	O
double	O
rt_term	double
=	O
sqrt	function
(	O
(	O
0.5	int
*	O
M_PI	int
)	O
/	O
x	double
)	O
;	O
const	O
int	O
LMAX	int
=	O
2	int
+	O
(	O
int	O
)	O
(	O
1.2	int
/	O
GSL_ROOT6_DBL_EPSILON	int
)	O
;	O
gsl_sf_result	struct
r_iellp1	struct
;	O
gsl_sf_result	struct
r_iell	struct
;	O
int	O
stat_a1	int
=	O
gsl_sf_bessel_Inu_scaled_asymp_unif_e	function
(	O
LMAX	int
+	O
1	int
+	O
0.5	int
,	O
x	double
,	O
&	O
r_iellp1	struct
)	O
;	O
int	O
stat_a2	int
=	O
gsl_sf_bessel_Inu_scaled_asymp_unif_e	function
(	O
LMAX	int
+	O
0.5	int
,	O
x	double
,	O
&	O
r_iell	struct
)	O
;	O
double	O
iellp1	double
=	O
r_iellp1	struct
.	O
val	double
;	O
double	O
iell	double
=	O
r_iell	struct
.	O
val	double
;	O
double	O
iellm1	double
=	O
0.0	int
;	O
int	O
ell	int
;	O
iellp1	double
*=	O
rt_term	double
;	O
iell	double
*=	O
rt_term	double
;	O
for	O
(	O
ell	int
=	O
LMAX	int
;	O
ell	int
>=	O
l	int
+	O
1	int
;	O
ell	int
--	O
)	O
{	O
iellm1	double
=	O
iellp1	double
+	O
(	O
2	int
*	O
ell	int
+	O
1	int
)	O
/	O
x	double
*	O
iell	double
;	O
iellp1	double
=	O
iell	double
;	O
iell	double
=	O
iellm1	double
;	O
}	O
result	pointer
->	O
val	double
=	O
sgn	pointer
*	O
iellm1	double
;	O
result	pointer
->	O
err	double
=	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
*	O
(	O
GSL_DBL_EPSILON	int
+	O
fabs	function
(	O
r_iellp1	struct
.	O
err	double
/	O
r_iellp1	struct
.	O
val	double
)	O
+	O
fabs	function
(	O
r_iell	struct
.	O
err	double
/	O
r_iell	struct
.	O
val	double
)	O
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_a1	int
,	O
stat_a2	int
)	O
;	O
}	O
}	O
int	O
gsl_sf_bessel_il_scaled_array	function
(	O
const	O
int	O
lmax	int
,	O
const	O
double	O
x	double
,	O
double	O
*	O
result_array	pointer
)	O
{	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
int	O
ell	int
;	O
result_array	pointer
[	O
0	int
]	O
=	O
1.0	int
;	O
for	O
(	O
ell	int
=	O
lmax	int
;	O
ell	int
>=	O
1	int
;	O
ell	int
--	O
)	O
{	O
result_array	pointer
[	O
ell	int
]	O
=	O
0.0	int
;	O
}	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
int	O
ell	int
;	O
gsl_sf_result	struct
r_iellp1	struct
;	O
gsl_sf_result	struct
r_iell	struct
;	O
int	O
stat_0	int
=	O
gsl_sf_bessel_il_scaled_e	function
(	O
lmax	int
+	O
1	int
,	O
x	double
,	O
&	O
r_iellp1	struct
)	O
;	O
int	O
stat_1	int
=	O
gsl_sf_bessel_il_scaled_e	function
(	O
lmax	int
,	O
x	double
,	O
&	O
r_iell	struct
)	O
;	O
double	O
iellp1	double
=	O
r_iellp1	struct
.	O
val	double
;	O
double	O
iell	double
=	O
r_iell	struct
.	O
val	double
;	O
double	O
iellm1	double
;	O
result_array	pointer
[	O
lmax	int
]	O
=	O
iell	double
;	O
for	O
(	O
ell	int
=	O
lmax	int
;	O
ell	int
>=	O
1	int
;	O
ell	int
--	O
)	O
{	O
iellm1	double
=	O
iellp1	double
+	O
(	O
2	int
*	O
ell	int
+	O
1	int
)	O
/	O
x	double
*	O
iell	double
;	O
iellp1	double
=	O
iell	double
;	O
iell	double
=	O
iellm1	double
;	O
result_array	pointer
[	O
ell	int
-	O
1	int
]	O
=	O
iellm1	double
;	O
}	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_0	int
,	O
stat_1	int
)	O
;	O
}	O
}	O
double	O
gsl_sf_bessel_i0_scaled	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_i0_scaled_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_bessel_i1_scaled	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_i1_scaled_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_bessel_i2_scaled	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_i2_scaled_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_bessel_il_scaled	function
(	O
const	O
int	O
l	int
,	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_il_scaled_e	function
(	O
l	int
,	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
