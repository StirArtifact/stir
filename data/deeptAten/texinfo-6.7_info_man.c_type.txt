static	O
char	O
const	O
*	O
const	O
exec_extensions	array
[	O
]	O
=	O
{	O
""	pointer
,	O
NULL	O
}	O
;	O
static	O
REFERENCE	struct
*	O
*	O
xrefs_of_manpage	function
(	O
NODE	struct
*	O
node	pointer
)	O
;	O
static	O
char	O
*	O
read_from_fd	function
(	O
int	O
fd	int
)	O
;	O
static	O
char	O
*	O
get_manpage_contents	function
(	O
char	O
*	O
pagename	pointer
)	O
;	O
static	O
NODE	struct
*	O
*	O
manpage_nodes	pointer
=	O
0	int
;	O
size_t	long
manpage_node_index	long
=	O
0	int
;	O
size_t	long
manpage_node_slots	long
=	O
0	int
;	O
NODE	struct
*	O
get_manpage_node	function
(	O
char	O
*	O
pagename	pointer
)	O
{	O
NODE	struct
*	O
node	pointer
=	O
0	int
,	O
*	O
*	O
n	long
,	O
*	O
node2	pointer
=	O
0	int
;	O
char	O
*	O
page	pointer
;	O
if	O
(	O
manpage_node_index	long
>	O
0	int
)	O
for	O
(	O
n	long
=	O
manpage_nodes	pointer
;	O
(	O
node	pointer
=	O
*	O
n	long
)	O
;	O
n	long
++	O
)	O
if	O
(	O
!	O
strcmp	function
(	O
node	pointer
->	O
nodename	pointer
,	O
pagename	pointer
)	O
)	O
break	O
;	O
if	O
(	O
!	O
node	pointer
)	O
{	O
node	pointer
=	O
info_create_node	function
(	O
)	O
;	O
node	pointer
->	O
fullpath	pointer
=	O
MANPAGE_FILE_BUFFER_NAME	pointer
;	O
node	pointer
->	O
nodename	pointer
=	O
xstrdup	function
(	O
pagename	pointer
)	O
;	O
node	pointer
->	O
flags	int
|=	O
N_HasTagsTable	int
|	O
N_IsManPage	int
;	O
add_pointer_to_array	O
(	O
node	pointer
,	O
manpage_node_index	long
,	O
manpage_nodes	pointer
,	O
manpage_node_slots	long
,	O
100	int
)	O
;	O
}	O
if	O
(	O
!	O
node	pointer
->	O
contents	pointer
)	O
{	O
int	O
plen	pointer
;	O
page	pointer
=	O
get_manpage_contents	function
(	O
pagename	pointer
)	O
;	O
if	O
(	O
!	O
page	pointer
)	O
return	O
0	int
;	O
plen	pointer
=	O
strlen	function
(	O
page	pointer
)	O
;	O
node	pointer
->	O
contents	pointer
=	O
page	pointer
;	O
node	pointer
->	O
nodelen	long
=	O
plen	pointer
;	O
node	pointer
->	O
body_start	long
=	O
0	int
;	O
node	pointer
->	O
references	pointer
=	O
xrefs_of_manpage	function
(	O
node	pointer
)	O
;	O
node	pointer
->	O
up	pointer
=	O
"(dir)"	pointer
;	O
}	O
node2	pointer
=	O
xmalloc	function
(	O
sizeof	O
(	O
NODE	struct
)	O
)	O
;	O
*	O
node2	pointer
=	O
*	O
node	pointer
;	O
return	O
node2	pointer
;	O
}	O
static	O
char	O
*	O
executable_file_in_path	function
(	O
char	O
*	O
filename	pointer
,	O
char	O
*	O
path	pointer
)	O
{	O
struct	O
stat	struct
finfo	struct
;	O
char	O
*	O
temp_dirname	pointer
;	O
int	O
statable	int
,	O
dirname_index	int
;	O
dirname_index	int
=	O
0	int
;	O
while	O
(	O
(	O
temp_dirname	pointer
=	O
extract_colon_unit	function
(	O
path	pointer
,	O
&	O
dirname_index	int
)	O
)	O
)	O
{	O
char	O
*	O
temp	pointer
;	O
char	O
*	O
temp_end	pointer
;	O
int	O
i	int
;	O
if	O
(	O
*	O
temp_dirname	pointer
==	O
'~'	O
)	O
{	O
char	O
*	O
expanded_dirname	pointer
;	O
expanded_dirname	pointer
=	O
tilde_expand_word	function
(	O
temp_dirname	pointer
)	O
;	O
free	function
(	O
temp_dirname	pointer
)	O
;	O
temp_dirname	pointer
=	O
expanded_dirname	pointer
;	O
}	O
temp	pointer
=	O
xmalloc	function
(	O
34	int
+	O
strlen	function
(	O
temp_dirname	pointer
)	O
+	O
strlen	function
(	O
filename	pointer
)	O
)	O
;	O
strcpy	function
(	O
temp	pointer
,	O
temp_dirname	pointer
)	O
;	O
if	O
(	O
!	O
IS_SLASH	O
(	O
temp	pointer
[	O
(	O
strlen	function
(	O
temp	pointer
)	O
)	O
-	O
1	int
]	O
)	O
)	O
strcat	function
(	O
temp	pointer
,	O
"/"	pointer
)	O
;	O
strcat	function
(	O
temp	pointer
,	O
filename	pointer
)	O
;	O
temp_end	pointer
=	O
temp	pointer
+	O
strlen	function
(	O
temp	pointer
)	O
;	O
free	function
(	O
temp_dirname	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
exec_extensions	array
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
exec_extensions	array
[	O
i	int
]	O
[	O
0	int
]	O
)	O
strcpy	function
(	O
temp_end	pointer
,	O
exec_extensions	array
[	O
i	int
]	O
)	O
;	O
statable	int
=	O
(	O
stat	struct
(	O
temp	pointer
,	O
&	O
finfo	struct
)	O
==	O
0	int
)	O
;	O
if	O
(	O
(	O
statable	int
)	O
&&	O
(	O
S_ISREG	O
(	O
finfo	struct
.	O
st_mode	int
)	O
)	O
&&	O
(	O
access	function
(	O
temp	pointer
,	O
X_OK	int
)	O
==	O
0	int
)	O
)	O
return	O
temp	pointer
;	O
}	O
free	function
(	O
temp	pointer
)	O
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
char	O
*	O
find_man_formatter	function
(	O
void	O
)	O
{	O
char	O
*	O
man_command	pointer
=	O
getenv	function
(	O
"INFO_MAN_COMMAND"	pointer
)	O
;	O
return	O
man_command	pointer
?	O
man_command	pointer
:	O
executable_file_in_path	function
(	O
"man"	pointer
,	O
getenv	function
(	O
"PATH"	pointer
)	O
)	O
;	O
}	O
static	O
char	O
*	O
manpage_pagename	pointer
=	O
NULL	O
;	O
static	O
char	O
*	O
manpage_section	pointer
=	O
NULL	O
;	O
static	O
void	O
get_page_and_section	function
(	O
char	O
*	O
pagename	pointer
)	O
{	O
register	O
int	O
i	int
;	O
if	O
(	O
manpage_pagename	pointer
)	O
free	function
(	O
manpage_pagename	pointer
)	O
;	O
if	O
(	O
manpage_section	pointer
)	O
free	function
(	O
manpage_section	pointer
)	O
;	O
manpage_pagename	pointer
=	O
NULL	O
;	O
manpage_section	pointer
=	O
NULL	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
pagename	pointer
[	O
i	int
]	O
!=	O
'\0'	O
&&	O
pagename	pointer
[	O
i	int
]	O
!=	O
'('	O
;	O
i	int
++	O
)	O
;	O
manpage_pagename	pointer
=	O
xmalloc	function
(	O
1	int
+	O
i	int
)	O
;	O
strncpy	function
(	O
manpage_pagename	pointer
,	O
pagename	pointer
,	O
i	int
)	O
;	O
manpage_pagename	pointer
[	O
i	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
pagename	pointer
[	O
i	int
]	O
==	O
'('	O
)	O
{	O
int	O
start	int
;	O
start	int
=	O
i	int
+	O
1	int
;	O
for	O
(	O
i	int
=	O
start	int
;	O
pagename	pointer
[	O
i	int
]	O
!=	O
'\0'	O
&&	O
pagename	pointer
[	O
i	int
]	O
!=	O
')'	O
;	O
i	int
++	O
)	O
;	O
manpage_section	pointer
=	O
xmalloc	function
(	O
1	int
+	O
(	O
i	int
-	O
start	int
)	O
)	O
;	O
strncpy	function
(	O
manpage_section	pointer
,	O
pagename	pointer
+	O
start	int
,	O
(	O
i	int
-	O
start	int
)	O
)	O
;	O
manpage_section	pointer
[	O
i	int
-	O
start	int
]	O
=	O
'\0'	O
;	O
}	O
}	O
void	O
clean_manpage	function
(	O
char	O
*	O
manpage	pointer
)	O
{	O
mbi_iterator_t	struct
iter	pointer
;	O
size_t	long
len	long
=	O
strlen	function
(	O
manpage	pointer
)	O
;	O
char	O
*	O
newpage	pointer
=	O
xmalloc	function
(	O
len	long
+	O
1	int
)	O
;	O
char	O
*	O
np	pointer
=	O
newpage	pointer
;	O
int	O
prev_len	int
=	O
0	int
;	O
for	O
(	O
mbi_init	O
(	O
iter	pointer
,	O
manpage	pointer
,	O
len	long
)	O
;	O
mbi_avail	O
(	O
iter	pointer
)	O
;	O
mbi_advance	O
(	O
iter	pointer
)	O
)	O
{	O
const	O
char	O
*	O
cur_ptr	pointer
=	O
mbi_cur_ptr	O
(	O
iter	pointer
)	O
;	O
size_t	long
cur_len	long
=	O
mb_len	O
(	O
mbi_cur	O
(	O
iter	pointer
)	O
)	O
;	O
if	O
(	O
cur_len	long
==	O
1	int
)	O
{	O
if	O
(	O
*	O
cur_ptr	pointer
==	O
'\b'	O
||	O
*	O
cur_ptr	pointer
==	O
'\f'	O
)	O
{	O
if	O
(	O
np	pointer
>=	O
newpage	pointer
+	O
prev_len	int
)	O
np	pointer
-=	O
prev_len	int
;	O
}	O
else	O
if	O
(	O
ansi_escape	function
(	O
iter	pointer
,	O
&	O
cur_len	long
)	O
)	O
{	O
memcpy	function
(	O
np	pointer
,	O
cur_ptr	pointer
,	O
cur_len	long
)	O
;	O
np	pointer
+=	O
cur_len	long
;	O
ITER_SETBYTES	O
(	O
iter	pointer
,	O
cur_len	long
)	O
;	O
}	O
else	O
if	O
(	O
show_malformed_multibyte_p	int
||	O
mbi_cur	O
(	O
iter	pointer
)	O
.	O
wc_valid	bool
)	O
*	O
np	pointer
++	O
=	O
*	O
cur_ptr	pointer
;	O
}	O
else	O
{	O
memcpy	function
(	O
np	pointer
,	O
cur_ptr	pointer
,	O
cur_len	long
)	O
;	O
np	pointer
+=	O
cur_len	long
;	O
}	O
prev_len	int
=	O
cur_len	long
;	O
}	O
*	O
np	pointer
=	O
0	int
;	O
strcpy	function
(	O
manpage	pointer
,	O
newpage	pointer
)	O
;	O
free	function
(	O
newpage	pointer
)	O
;	O
}	O
static	O
char	O
*	O
get_manpage_from_formatter	function
(	O
char	O
*	O
formatter_args	array
[	O
]	O
)	O
;	O
static	O
char	O
*	O
get_manpage_contents	function
(	O
char	O
*	O
pagename	pointer
)	O
{	O
static	O
char	O
*	O
formatter_args	array
[	O
4	int
]	O
=	O
{	O
NULL	O
}	O
;	O
char	O
*	O
formatted_page	pointer
;	O
if	O
(	O
formatter_args	array
[	O
0	int
]	O
==	O
NULL	O
)	O
formatter_args	array
[	O
0	int
]	O
=	O
find_man_formatter	function
(	O
)	O
;	O
if	O
(	O
formatter_args	array
[	O
0	int
]	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
get_page_and_section	function
(	O
pagename	pointer
)	O
;	O
if	O
(	O
manpage_section	pointer
)	O
formatter_args	array
[	O
1	int
]	O
=	O
manpage_section	pointer
;	O
else	O
formatter_args	array
[	O
1	int
]	O
=	O
"-a"	pointer
;	O
formatter_args	array
[	O
2	int
]	O
=	O
manpage_pagename	pointer
;	O
formatter_args	array
[	O
3	int
]	O
=	O
NULL	O
;	O
formatted_page	pointer
=	O
get_manpage_from_formatter	function
(	O
formatter_args	array
)	O
;	O
if	O
(	O
!	O
formatted_page	pointer
&&	O
manpage_section	pointer
)	O
{	O
formatter_args	array
[	O
1	int
]	O
=	O
"-a"	pointer
;	O
formatted_page	pointer
=	O
get_manpage_from_formatter	function
(	O
formatter_args	array
)	O
;	O
}	O
return	O
formatted_page	pointer
;	O
}	O
static	O
char	O
*	O
get_manpage_from_formatter	function
(	O
char	O
*	O
formatter_args	array
[	O
]	O
)	O
{	O
char	O
*	O
formatted_page	pointer
=	O
NULL	O
;	O
int	O
pipes	array
[	O
2	int
]	O
;	O
pid_t	int
child	int
;	O
int	O
formatter_status	int
=	O
0	int
;	O
pipe	function
(	O
pipes	array
)	O
;	O
child	int
=	O
fork	function
(	O
)	O
;	O
if	O
(	O
child	int
==	O
-	O
1	int
)	O
return	O
NULL	O
;	O
if	O
(	O
child	int
!=	O
0	int
)	O
{	O
close	pointer
(	O
pipes	array
[	O
1	int
]	O
)	O
;	O
formatted_page	pointer
=	O
read_from_fd	function
(	O
pipes	array
[	O
0	int
]	O
)	O
;	O
close	pointer
(	O
pipes	array
[	O
0	int
]	O
)	O
;	O
wait	function
(	O
&	O
formatter_status	int
)	O
;	O
}	O
else	O
{	O
close	pointer
(	O
pipes	array
[	O
0	int
]	O
)	O
;	O
freopen	function
(	O
NULL_DEVICE	pointer
,	O
"w"	pointer
,	O
stderr	pointer
)	O
;	O
freopen	function
(	O
NULL_DEVICE	pointer
,	O
"r"	pointer
,	O
stdin	pointer
)	O
;	O
dup2	function
(	O
pipes	array
[	O
1	int
]	O
,	O
fileno	function
(	O
stdout	pointer
)	O
)	O
;	O
execv	function
(	O
formatter_args	array
[	O
0	int
]	O
,	O
formatter_args	array
)	O
;	O
close	pointer
(	O
pipes	array
[	O
1	int
]	O
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
if	O
(	O
!	O
formatted_page	pointer
)	O
return	O
0	int
;	O
{	O
int	O
i	int
;	O
char	O
*	O
p	pointer
;	O
p	pointer
=	O
formatted_page	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
3	int
;	O
i	int
++	O
)	O
{	O
p	pointer
=	O
strchr	function
(	O
p	pointer
,	O
'\n'	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
free	function
(	O
formatted_page	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
p	pointer
++	O
;	O
}	O
}	O
clean_manpage	function
(	O
formatted_page	pointer
)	O
;	O
return	O
formatted_page	pointer
;	O
}	O
static	O
char	O
*	O
read_from_fd	function
(	O
int	O
fd	int
)	O
{	O
struct	O
timeval	struct
timeout	struct
;	O
char	O
*	O
buffer	pointer
=	O
NULL	O
;	O
int	O
bsize	int
=	O
0	int
;	O
int	O
bindex	int
=	O
0	int
;	O
int	O
select_result	int
;	O
fd_set	struct
read_fds	struct
;	O
timeout	struct
.	O
tv_sec	long
=	O
15	int
;	O
timeout	struct
.	O
tv_usec	long
=	O
0	int
;	O
FD_ZERO	O
(	O
&	O
read_fds	struct
)	O
;	O
FD_SET	O
(	O
fd	int
,	O
&	O
read_fds	struct
)	O
;	O
select_result	int
=	O
select	function
(	O
fd	int
+	O
1	int
,	O
fd_set_cast	O
(	O
&	O
read_fds	struct
)	O
,	O
0	int
,	O
0	int
,	O
&	O
timeout	struct
)	O
;	O
switch	O
(	O
select_result	int
)	O
{	O
case	O
0	int
:	O
case	O
-	O
1	int
:	O
break	O
;	O
default	O
:	O
{	O
int	O
amount_read	int
;	O
int	O
done	int
=	O
0	int
;	O
while	O
(	O
!	O
done	int
)	O
{	O
while	O
(	O
(	O
bindex	int
+	O
1024	int
)	O
>	O
(	O
bsize	int
)	O
)	O
buffer	pointer
=	O
xrealloc	function
(	O
buffer	pointer
,	O
(	O
bsize	int
+=	O
1024	int
)	O
)	O
;	O
buffer	pointer
[	O
bindex	int
]	O
=	O
'\0'	O
;	O
amount_read	int
=	O
read	pointer
(	O
fd	int
,	O
buffer	pointer
+	O
bindex	int
,	O
1023	int
)	O
;	O
if	O
(	O
amount_read	int
<	O
0	int
)	O
{	O
done	int
=	O
1	int
;	O
}	O
else	O
{	O
bindex	int
+=	O
amount_read	int
;	O
buffer	pointer
[	O
bindex	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
amount_read	int
==	O
0	int
)	O
done	int
=	O
1	int
;	O
}	O
}	O
}	O
}	O
if	O
(	O
(	O
buffer	pointer
!=	O
NULL	O
)	O
&&	O
(	O
*	O
buffer	pointer
==	O
'\0'	O
)	O
)	O
{	O
free	function
(	O
buffer	pointer
)	O
;	O
buffer	pointer
=	O
NULL	O
;	O
}	O
return	O
buffer	pointer
;	O
}	O
static	O
REFERENCE	struct
*	O
*	O
xrefs_of_manpage	function
(	O
NODE	struct
*	O
node	pointer
)	O
{	O
SEARCH_BINDING	struct
s	pointer
;	O
REFERENCE	struct
*	O
*	O
refs	pointer
=	O
NULL	O
;	O
size_t	long
refs_index	long
=	O
0	int
;	O
size_t	long
refs_slots	long
=	O
0	int
;	O
long	O
position	long
;	O
refs	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
REFERENCE	struct
*	O
)	O
)	O
;	O
refs_slots	long
=	O
1	int
;	O
s	pointer
.	O
buffer	pointer
=	O
node	pointer
->	O
contents	pointer
;	O
s	pointer
.	O
start	int
=	O
0	int
;	O
s	pointer
.	O
flags	int
=	O
0	int
;	O
s	pointer
.	O
end	int
=	O
node	pointer
->	O
nodelen	long
;	O
s	pointer
.	O
start	int
=	O
strcspn	function
(	O
node	pointer
->	O
contents	pointer
,	O
"\n"	pointer
)	O
;	O
while	O
(	O
search_forward	function
(	O
"("	pointer
,	O
&	O
s	pointer
,	O
&	O
position	long
)	O
==	O
search_success	int
)	O
{	O
register	O
int	O
name	pointer
,	O
name_end	int
;	O
int	O
section	int
,	O
section_end	int
;	O
name	pointer
=	O
position	long
;	O
if	O
(	O
name	pointer
==	O
0	int
)	O
goto	O
skip	O
;	O
else	O
name	pointer
--	O
;	O
for	O
(	O
;	O
name	pointer
>	O
0	int
;	O
name	pointer
--	O
)	O
if	O
(	O
whitespace_or_newline	O
(	O
s	pointer
.	O
buffer	pointer
[	O
name	pointer
]	O
)	O
||	O
(	O
!	O
isalnum	function
(	O
s	pointer
.	O
buffer	pointer
[	O
name	pointer
]	O
)	O
&&	O
s	pointer
.	O
buffer	pointer
[	O
name	pointer
]	O
!=	O
'_'	O
&&	O
s	pointer
.	O
buffer	pointer
[	O
name	pointer
]	O
!=	O
'.'	O
&&	O
s	pointer
.	O
buffer	pointer
[	O
name	pointer
]	O
!=	O
'-'	O
&&	O
s	pointer
.	O
buffer	pointer
[	O
name	pointer
]	O
!=	O
'\033'	O
&&	O
s	pointer
.	O
buffer	pointer
[	O
name	pointer
]	O
!=	O
'['	O
)	O
)	O
break	O
;	O
if	O
(	O
name	pointer
==	O
0	int
)	O
goto	O
skip	O
;	O
if	O
(	O
!	O
whitespace_or_newline	O
(	O
s	pointer
.	O
buffer	pointer
[	O
name	pointer
]	O
)	O
)	O
goto	O
skip	O
;	O
name	pointer
++	O
;	O
if	O
(	O
name	pointer
==	O
position	long
)	O
goto	O
skip	O
;	O
if	O
(	O
s	pointer
.	O
buffer	pointer
[	O
name	pointer
]	O
==	O
'\033'	O
&&	O
s	pointer
.	O
buffer	pointer
[	O
name	pointer
+	O
1	int
]	O
==	O
'['	O
)	O
{	O
name	pointer
+=	O
2	int
;	O
name	pointer
+=	O
strspn	function
(	O
s	pointer
.	O
buffer	pointer
+	O
name	pointer
,	O
"0123456789;"	pointer
)	O
;	O
if	O
(	O
s	pointer
.	O
buffer	pointer
[	O
name	pointer
]	O
==	O
'm'	O
)	O
name	pointer
++	O
;	O
else	O
goto	O
skip	O
;	O
}	O
for	O
(	O
name_end	int
=	O
name	pointer
;	O
name_end	int
<	O
position	long
;	O
name_end	int
++	O
)	O
if	O
(	O
!	O
isalnum	function
(	O
s	pointer
.	O
buffer	pointer
[	O
name_end	int
]	O
)	O
&&	O
s	pointer
.	O
buffer	pointer
[	O
name_end	int
]	O
!=	O
'_'	O
&&	O
s	pointer
.	O
buffer	pointer
[	O
name_end	int
]	O
!=	O
'.'	O
&&	O
s	pointer
.	O
buffer	pointer
[	O
name_end	int
]	O
!=	O
'-'	O
)	O
break	O
;	O
section	int
=	O
position	long
;	O
section_end	int
=	O
0	int
;	O
if	O
(	O
!	O
isdigit	function
(	O
s	pointer
.	O
buffer	pointer
[	O
section	int
+	O
1	int
]	O
)	O
||	O
s	pointer
.	O
buffer	pointer
[	O
section	int
+	O
1	int
]	O
==	O
'0'	O
)	O
;	O
else	O
if	O
(	O
!	O
s	pointer
.	O
buffer	pointer
[	O
section	int
+	O
2	int
]	O
)	O
;	O
else	O
if	O
(	O
s	pointer
.	O
buffer	pointer
[	O
section	int
+	O
2	int
]	O
==	O
')'	O
)	O
section_end	int
=	O
section	int
+	O
3	int
;	O
else	O
if	O
(	O
!	O
isalpha	function
(	O
s	pointer
.	O
buffer	pointer
[	O
section	int
+	O
2	int
]	O
)	O
)	O
;	O
else	O
if	O
(	O
s	pointer
.	O
buffer	pointer
[	O
section	int
+	O
3	int
]	O
==	O
')'	O
)	O
section_end	int
=	O
section	int
+	O
4	int
;	O
if	O
(	O
section_end	int
)	O
{	O
REFERENCE	struct
*	O
entry	pointer
;	O
int	O
len	long
=	O
name_end	int
-	O
name	pointer
+	O
section_end	int
-	O
section	int
;	O
entry	pointer
=	O
xmalloc	function
(	O
sizeof	O
(	O
REFERENCE	struct
)	O
)	O
;	O
entry	pointer
->	O
label	pointer
=	O
xcalloc	function
(	O
1	int
,	O
1	int
+	O
len	long
)	O
;	O
strncpy	function
(	O
entry	pointer
->	O
label	pointer
,	O
s	pointer
.	O
buffer	pointer
+	O
name	pointer
,	O
name_end	int
-	O
name	pointer
)	O
;	O
strncpy	function
(	O
entry	pointer
->	O
label	pointer
+	O
strlen	function
(	O
entry	pointer
->	O
label	pointer
)	O
,	O
s	pointer
.	O
buffer	pointer
+	O
section	int
,	O
section_end	int
-	O
section	int
)	O
;	O
entry	pointer
->	O
filename	pointer
=	O
xstrdup	function
(	O
MANPAGE_FILE_BUFFER_NAME	pointer
)	O
;	O
entry	pointer
->	O
nodename	pointer
=	O
xstrdup	function
(	O
entry	pointer
->	O
label	pointer
)	O
;	O
entry	pointer
->	O
line_number	long
=	O
0	int
;	O
entry	pointer
->	O
start	int
=	O
name	pointer
;	O
entry	pointer
->	O
end	int
=	O
section_end	int
;	O
entry	pointer
->	O
type	enum
=	O
REFERENCE_XREF	int
;	O
add_pointer_to_array	O
(	O
entry	pointer
,	O
refs_index	long
,	O
refs	pointer
,	O
refs_slots	long
,	O
10	int
)	O
;	O
}	O
skip	O
:	O
s	pointer
.	O
start	int
=	O
position	long
+	O
1	int
;	O
}	O
return	O
refs	pointer
;	O
}	O
