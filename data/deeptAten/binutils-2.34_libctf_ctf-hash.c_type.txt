typedef	O
struct	O
ctf_helem	struct
{	O
void	O
*	O
key	pointer
;	O
void	O
*	O
value	int
;	O
ctf_hash_free_fun	pointer
key_free	pointer
;	O
ctf_hash_free_fun	pointer
value_free	pointer
;	O
}	O
ctf_helem_t	struct
;	O
struct	O
ctf_dynhash	struct
{	O
struct	O
htab	struct
*	O
htab	struct
;	O
ctf_hash_free_fun	pointer
key_free	pointer
;	O
ctf_hash_free_fun	pointer
value_free	pointer
;	O
}	O
;	O
unsigned	O
int	O
ctf_hash_integer	function
(	O
const	O
void	O
*	O
ptr	pointer
)	O
{	O
ctf_helem_t	struct
*	O
hep	pointer
=	O
(	O
ctf_helem_t	struct
*	O
)	O
ptr	pointer
;	O
return	O
htab_hash_pointer	pointer
(	O
hep	pointer
->	O
key	pointer
)	O
;	O
}	O
int	O
ctf_hash_eq_integer	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
ctf_helem_t	struct
*	O
hep_a	pointer
=	O
(	O
ctf_helem_t	struct
*	O
)	O
a	pointer
;	O
ctf_helem_t	struct
*	O
hep_b	pointer
=	O
(	O
ctf_helem_t	struct
*	O
)	O
b	pointer
;	O
return	O
htab_eq_pointer	pointer
(	O
hep_a	pointer
->	O
key	pointer
,	O
hep_b	pointer
->	O
key	pointer
)	O
;	O
}	O
unsigned	O
int	O
ctf_hash_string	function
(	O
const	O
void	O
*	O
ptr	pointer
)	O
{	O
ctf_helem_t	struct
*	O
hep	pointer
=	O
(	O
ctf_helem_t	struct
*	O
)	O
ptr	pointer
;	O
return	O
htab_hash_string	function
(	O
hep	pointer
->	O
key	pointer
)	O
;	O
}	O
int	O
ctf_hash_eq_string	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
ctf_helem_t	struct
*	O
hep_a	pointer
=	O
(	O
ctf_helem_t	struct
*	O
)	O
a	pointer
;	O
ctf_helem_t	struct
*	O
hep_b	pointer
=	O
(	O
ctf_helem_t	struct
*	O
)	O
b	pointer
;	O
return	O
!	O
strcmp	function
(	O
(	O
const	O
char	O
*	O
)	O
hep_a	pointer
->	O
key	pointer
,	O
(	O
const	O
char	O
*	O
)	O
hep_b	pointer
->	O
key	pointer
)	O
;	O
}	O
unsigned	O
int	O
ctf_hash_type_mapping_key	function
(	O
const	O
void	O
*	O
ptr	pointer
)	O
{	O
ctf_helem_t	struct
*	O
hep	pointer
=	O
(	O
ctf_helem_t	struct
*	O
)	O
ptr	pointer
;	O
ctf_link_type_mapping_key_t	struct
*	O
k	pointer
=	O
(	O
ctf_link_type_mapping_key_t	struct
*	O
)	O
hep	pointer
->	O
key	pointer
;	O
return	O
htab_hash_pointer	pointer
(	O
k	pointer
->	O
cltm_fp	pointer
)	O
+	O
59	int
*	O
htab_hash_pointer	pointer
(	O
(	O
void	O
*	O
)	O
k	pointer
->	O
cltm_idx	long
)	O
;	O
}	O
int	O
ctf_hash_eq_type_mapping_key	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
ctf_helem_t	struct
*	O
hep_a	pointer
=	O
(	O
ctf_helem_t	struct
*	O
)	O
a	pointer
;	O
ctf_helem_t	struct
*	O
hep_b	pointer
=	O
(	O
ctf_helem_t	struct
*	O
)	O
b	pointer
;	O
ctf_link_type_mapping_key_t	struct
*	O
key_a	pointer
=	O
(	O
ctf_link_type_mapping_key_t	struct
*	O
)	O
hep_a	pointer
->	O
key	pointer
;	O
ctf_link_type_mapping_key_t	struct
*	O
key_b	pointer
=	O
(	O
ctf_link_type_mapping_key_t	struct
*	O
)	O
hep_b	pointer
->	O
key	pointer
;	O
return	O
(	O
key_a	pointer
->	O
cltm_fp	pointer
==	O
key_b	pointer
->	O
cltm_fp	pointer
)	O
&&	O
(	O
key_a	pointer
->	O
cltm_idx	long
==	O
key_b	pointer
->	O
cltm_idx	long
)	O
;	O
}	O
static	O
void	O
ctf_dynhash_item_free	function
(	O
void	O
*	O
item	pointer
)	O
{	O
ctf_helem_t	struct
*	O
helem	pointer
=	O
item	pointer
;	O
if	O
(	O
helem	pointer
->	O
key_free	pointer
&&	O
helem	pointer
->	O
key	pointer
)	O
helem	pointer
->	O
key_free	pointer
(	O
helem	pointer
->	O
key	pointer
)	O
;	O
if	O
(	O
helem	pointer
->	O
value_free	pointer
&&	O
helem	pointer
->	O
value	int
)	O
helem	pointer
->	O
value_free	pointer
(	O
helem	pointer
->	O
value	int
)	O
;	O
free	function
(	O
helem	pointer
)	O
;	O
}	O
ctf_dynhash_t	struct
*	O
ctf_dynhash_create	function
(	O
ctf_hash_fun	pointer
hash_fun	pointer
,	O
ctf_hash_eq_fun	pointer
eq_fun	pointer
,	O
ctf_hash_free_fun	pointer
key_free	pointer
,	O
ctf_hash_free_fun	pointer
value_free	pointer
)	O
{	O
ctf_dynhash_t	struct
*	O
dynhash	pointer
;	O
dynhash	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
ctf_dynhash_t	struct
)	O
)	O
;	O
if	O
(	O
!	O
dynhash	pointer
)	O
return	O
NULL	O
;	O
if	O
(	O
(	O
dynhash	pointer
->	O
htab	struct
=	O
htab_create_alloc	function
(	O
7	int
,	O
(	O
htab_hash	pointer
)	O
hash_fun	pointer
,	O
eq_fun	pointer
,	O
ctf_dynhash_item_free	function
,	O
xcalloc	function
,	O
free	function
)	O
)	O
==	O
NULL	O
)	O
{	O
free	function
(	O
dynhash	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
dynhash	pointer
->	O
key_free	pointer
=	O
key_free	pointer
;	O
dynhash	pointer
->	O
value_free	pointer
=	O
value_free	pointer
;	O
return	O
dynhash	pointer
;	O
}	O
static	O
ctf_helem_t	struct
*	O
*	O
ctf_hashtab_lookup	function
(	O
struct	O
htab	struct
*	O
htab	struct
,	O
const	O
void	O
*	O
key	pointer
,	O
enum	O
insert_option	enum
insert	enum
)	O
{	O
ctf_helem_t	struct
tmp	struct
=	O
{	O
.	O
key	pointer
=	O
(	O
void	O
*	O
)	O
key	pointer
}	O
;	O
return	O
(	O
ctf_helem_t	struct
*	O
*	O
)	O
htab_find_slot	function
(	O
htab	struct
,	O
&	O
tmp	struct
,	O
insert	enum
)	O
;	O
}	O
static	O
ctf_helem_t	struct
*	O
ctf_hashtab_insert	function
(	O
struct	O
htab	struct
*	O
htab	struct
,	O
void	O
*	O
key	pointer
,	O
void	O
*	O
value	int
,	O
ctf_hash_free_fun	pointer
key_free	pointer
,	O
ctf_hash_free_fun	pointer
value_free	pointer
)	O
{	O
ctf_helem_t	struct
*	O
*	O
slot	pointer
;	O
slot	pointer
=	O
ctf_hashtab_lookup	function
(	O
htab	struct
,	O
key	pointer
,	O
INSERT	int
)	O
;	O
if	O
(	O
!	O
slot	pointer
)	O
{	O
errno	O
=	O
-	O
ENOMEM	int
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
!	O
*	O
slot	pointer
)	O
{	O
*	O
slot	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
ctf_helem_t	struct
)	O
)	O
;	O
if	O
(	O
!	O
*	O
slot	pointer
)	O
return	O
NULL	O
;	O
}	O
else	O
{	O
if	O
(	O
key_free	pointer
)	O
key_free	pointer
(	O
(	O
*	O
slot	pointer
)	O
->	O
key	pointer
)	O
;	O
if	O
(	O
value_free	pointer
)	O
value_free	pointer
(	O
(	O
*	O
slot	pointer
)	O
->	O
value	int
)	O
;	O
}	O
(	O
*	O
slot	pointer
)	O
->	O
key	pointer
=	O
key	pointer
;	O
(	O
*	O
slot	pointer
)	O
->	O
value	int
=	O
value	int
;	O
return	O
*	O
slot	pointer
;	O
}	O
int	O
ctf_dynhash_insert	function
(	O
ctf_dynhash_t	struct
*	O
hp	pointer
,	O
void	O
*	O
key	pointer
,	O
void	O
*	O
value	int
)	O
{	O
ctf_helem_t	struct
*	O
slot	pointer
;	O
slot	pointer
=	O
ctf_hashtab_insert	function
(	O
hp	pointer
->	O
htab	struct
,	O
key	pointer
,	O
value	int
,	O
hp	pointer
->	O
key_free	pointer
,	O
hp	pointer
->	O
value_free	pointer
)	O
;	O
if	O
(	O
!	O
slot	pointer
)	O
return	O
errno	O
;	O
slot	pointer
->	O
key_free	pointer
=	O
hp	pointer
->	O
key_free	pointer
;	O
slot	pointer
->	O
value_free	pointer
=	O
hp	pointer
->	O
value_free	pointer
;	O
return	O
0	int
;	O
}	O
void	O
ctf_dynhash_remove	function
(	O
ctf_dynhash_t	struct
*	O
hp	pointer
,	O
const	O
void	O
*	O
key	pointer
)	O
{	O
ctf_helem_t	struct
hep	pointer
=	O
{	O
(	O
void	O
*	O
)	O
key	pointer
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
}	O
;	O
htab_remove_elt	function
(	O
hp	pointer
->	O
htab	struct
,	O
&	O
hep	pointer
)	O
;	O
}	O
void	O
ctf_dynhash_empty	function
(	O
ctf_dynhash_t	struct
*	O
hp	pointer
)	O
{	O
htab_empty	function
(	O
hp	pointer
->	O
htab	struct
)	O
;	O
}	O
void	O
*	O
ctf_dynhash_lookup	function
(	O
ctf_dynhash_t	struct
*	O
hp	pointer
,	O
const	O
void	O
*	O
key	pointer
)	O
{	O
ctf_helem_t	struct
*	O
*	O
slot	pointer
;	O
slot	pointer
=	O
ctf_hashtab_lookup	function
(	O
hp	pointer
->	O
htab	struct
,	O
key	pointer
,	O
NO_INSERT	int
)	O
;	O
if	O
(	O
slot	pointer
)	O
return	O
(	O
*	O
slot	pointer
)	O
->	O
value	int
;	O
return	O
NULL	O
;	O
}	O
typedef	O
struct	O
ctf_traverse_cb_arg	struct
{	O
ctf_hash_iter_f	pointer
fun	pointer
;	O
void	O
*	O
arg	pointer
;	O
}	O
ctf_traverse_cb_arg_t	struct
;	O
static	O
int	O
ctf_hashtab_traverse	function
(	O
void	O
*	O
*	O
slot	pointer
,	O
void	O
*	O
arg_	pointer
)	O
{	O
ctf_helem_t	struct
*	O
helem	pointer
=	O
*	O
(	O
(	O
ctf_helem_t	struct
*	O
*	O
)	O
slot	pointer
)	O
;	O
ctf_traverse_cb_arg_t	struct
*	O
arg	pointer
=	O
(	O
ctf_traverse_cb_arg_t	struct
*	O
)	O
arg_	pointer
;	O
arg	pointer
->	O
fun	pointer
(	O
helem	pointer
->	O
key	pointer
,	O
helem	pointer
->	O
value	int
,	O
arg	pointer
->	O
arg	pointer
)	O
;	O
return	O
1	int
;	O
}	O
void	O
ctf_dynhash_iter	function
(	O
ctf_dynhash_t	struct
*	O
hp	pointer
,	O
ctf_hash_iter_f	pointer
fun	pointer
,	O
void	O
*	O
arg_	pointer
)	O
{	O
ctf_traverse_cb_arg_t	struct
arg	pointer
=	O
{	O
fun	pointer
,	O
arg_	pointer
}	O
;	O
htab_traverse	function
(	O
hp	pointer
->	O
htab	struct
,	O
ctf_hashtab_traverse	function
,	O
&	O
arg	pointer
)	O
;	O
}	O
typedef	O
struct	O
ctf_traverse_remove_cb_arg	struct
{	O
struct	O
htab	struct
*	O
htab	struct
;	O
ctf_hash_iter_remove_f	pointer
fun	pointer
;	O
void	O
*	O
arg	pointer
;	O
}	O
ctf_traverse_remove_cb_arg_t	struct
;	O
static	O
int	O
ctf_hashtab_traverse_remove	function
(	O
void	O
*	O
*	O
slot	pointer
,	O
void	O
*	O
arg_	pointer
)	O
{	O
ctf_helem_t	struct
*	O
helem	pointer
=	O
*	O
(	O
(	O
ctf_helem_t	struct
*	O
*	O
)	O
slot	pointer
)	O
;	O
ctf_traverse_remove_cb_arg_t	struct
*	O
arg	pointer
=	O
(	O
ctf_traverse_remove_cb_arg_t	struct
*	O
)	O
arg_	pointer
;	O
if	O
(	O
arg	pointer
->	O
fun	pointer
(	O
helem	pointer
->	O
key	pointer
,	O
helem	pointer
->	O
value	int
,	O
arg	pointer
->	O
arg	pointer
)	O
)	O
htab_clear_slot	function
(	O
arg	pointer
->	O
htab	struct
,	O
slot	pointer
)	O
;	O
return	O
1	int
;	O
}	O
void	O
ctf_dynhash_iter_remove	function
(	O
ctf_dynhash_t	struct
*	O
hp	pointer
,	O
ctf_hash_iter_remove_f	pointer
fun	pointer
,	O
void	O
*	O
arg_	pointer
)	O
{	O
ctf_traverse_remove_cb_arg_t	struct
arg	pointer
=	O
{	O
hp	pointer
->	O
htab	struct
,	O
fun	pointer
,	O
arg_	pointer
}	O
;	O
htab_traverse	function
(	O
hp	pointer
->	O
htab	struct
,	O
ctf_hashtab_traverse_remove	function
,	O
&	O
arg	pointer
)	O
;	O
}	O
void	O
ctf_dynhash_destroy	function
(	O
ctf_dynhash_t	struct
*	O
hp	pointer
)	O
{	O
if	O
(	O
hp	pointer
!=	O
NULL	O
)	O
htab_delete	function
(	O
hp	pointer
->	O
htab	struct
)	O
;	O
free	function
(	O
hp	pointer
)	O
;	O
}	O
ctf_hash_t	struct
*	O
ctf_hash_create	function
(	O
unsigned	O
long	O
nelems	long
,	O
ctf_hash_fun	pointer
hash_fun	pointer
,	O
ctf_hash_eq_fun	pointer
eq_fun	pointer
)	O
{	O
return	O
(	O
ctf_hash_t	struct
*	O
)	O
htab_create_alloc	function
(	O
nelems	long
,	O
(	O
htab_hash	pointer
)	O
hash_fun	pointer
,	O
eq_fun	pointer
,	O
free	function
,	O
xcalloc	function
,	O
free	function
)	O
;	O
}	O
uint32_t	int
ctf_hash_size	function
(	O
const	O
ctf_hash_t	struct
*	O
hp	pointer
)	O
{	O
return	O
htab_elements	function
(	O
(	O
struct	O
htab	struct
*	O
)	O
hp	pointer
)	O
;	O
}	O
int	O
ctf_hash_insert_type	function
(	O
ctf_hash_t	struct
*	O
hp	pointer
,	O
ctf_file_t	struct
*	O
fp	pointer
,	O
uint32_t	int
type	long
,	O
uint32_t	int
name	pointer
)	O
{	O
const	O
char	O
*	O
str	pointer
=	O
ctf_strraw	function
(	O
fp	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
type	long
==	O
0	int
)	O
return	O
EINVAL	int
;	O
if	O
(	O
str	pointer
==	O
NULL	O
&&	O
CTF_NAME_STID	O
(	O
name	pointer
)	O
==	O
CTF_STRTAB_1	int
&&	O
fp	pointer
->	O
ctf_syn_ext_strtab	pointer
==	O
NULL	O
&&	O
fp	pointer
->	O
ctf_str	array
[	O
CTF_NAME_STID	O
(	O
name	pointer
)	O
]	O
.	O
cts_strs	pointer
==	O
NULL	O
)	O
return	O
ECTF_STRTAB	int
;	O
if	O
(	O
str	pointer
==	O
NULL	O
)	O
return	O
ECTF_BADNAME	int
;	O
if	O
(	O
str	pointer
[	O
0	int
]	O
==	O
'\0'	O
)	O
return	O
0	int
;	O
if	O
(	O
ctf_hashtab_insert	function
(	O
(	O
struct	O
htab	struct
*	O
)	O
hp	pointer
,	O
(	O
char	O
*	O
)	O
str	pointer
,	O
(	O
void	O
*	O
)	O
(	O
ptrdiff_t	long
)	O
type	long
,	O
NULL	O
,	O
NULL	O
)	O
!=	O
NULL	O
)	O
return	O
0	int
;	O
return	O
errno	O
;	O
}	O
int	O
ctf_hash_define_type	function
(	O
ctf_hash_t	struct
*	O
hp	pointer
,	O
ctf_file_t	struct
*	O
fp	pointer
,	O
uint32_t	int
type	long
,	O
uint32_t	int
name	pointer
)	O
{	O
return	O
ctf_hash_insert_type	function
(	O
hp	pointer
,	O
fp	pointer
,	O
type	long
,	O
name	pointer
)	O
;	O
}	O
ctf_id_t	long
ctf_hash_lookup_type	function
(	O
ctf_hash_t	struct
*	O
hp	pointer
,	O
ctf_file_t	struct
*	O
fp	pointer
__attribute__	O
(	O
(	O
__unused__	O
)	O
)	O
,	O
const	O
char	O
*	O
key	pointer
)	O
{	O
ctf_helem_t	struct
*	O
*	O
slot	pointer
;	O
slot	pointer
=	O
ctf_hashtab_lookup	function
(	O
(	O
struct	O
htab	struct
*	O
)	O
hp	pointer
,	O
key	pointer
,	O
NO_INSERT	int
)	O
;	O
if	O
(	O
slot	pointer
)	O
return	O
(	O
ctf_id_t	long
)	O
(	O
(	O
*	O
slot	pointer
)	O
->	O
value	int
)	O
;	O
return	O
0	int
;	O
}	O
void	O
ctf_hash_destroy	function
(	O
ctf_hash_t	struct
*	O
hp	pointer
)	O
{	O
if	O
(	O
hp	pointer
!=	O
NULL	O
)	O
htab_delete	function
(	O
(	O
struct	O
htab	struct
*	O
)	O
hp	pointer
)	O
;	O
}	O
