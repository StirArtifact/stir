FILE	struct
*	O
searchResultsFile	pointer
;	O
void	O
draw_findFile_buttons	function
(	O
int	O
bx	int
,	O
int	O
by	int
,	O
int	O
selection	int
)	O
{	O
if	O
(	O
selection	int
==	O
4	int
)	O
setScreenColorsI	function
(	O
COLOR_HBUTTONS	int
)	O
;	O
else	O
setScreenColorsI	function
(	O
COLOR_BUTTONS	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\x1b[%d;%dH"	pointer
,	O
bx	int
,	O
by	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"   OK   "	pointer
)	O
;	O
by	int
+=	O
12	int
;	O
if	O
(	O
selection	int
==	O
5	int
)	O
setScreenColorsI	function
(	O
COLOR_HBUTTONS	int
)	O
;	O
else	O
setScreenColorsI	function
(	O
COLOR_BUTTONS	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\x1b[%d;%dH"	pointer
,	O
bx	int
,	O
by	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
" CANCEL "	pointer
)	O
;	O
if	O
(	O
selection	int
==	O
4	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"\x1b[%d;%dH"	pointer
,	O
bx	int
,	O
by	int
-	O
9	int
)	O
;	O
else	O
if	O
(	O
selection	int
==	O
5	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"\x1b[%d;%dH"	pointer
,	O
bx	int
,	O
by	int
+	O
1	int
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
}	O
void	O
findFile	function
(	O
)	O
{	O
int	O
x	int
=	O
5	int
;	O
int	O
w	int
=	O
46	int
;	O
int	O
h	int
=	O
12	int
+	O
x	int
;	O
int	O
y	int
=	O
(	O
SCREEN_W	int
-	O
w	int
)	O
/	O
2	int
;	O
w	int
+=	O
y	int
;	O
int	O
i	int
,	O
sel	int
=	O
0	int
;	O
int	O
osel	int
=	O
0	int
;	O
memset	function
(	O
findFileName	array
,	O
0	int
,	O
sizeof	O
(	O
findFileName	array
)	O
)	O
;	O
memset	function
(	O
findInDir	array
,	O
0	int
,	O
sizeof	O
(	O
findInDir	array
)	O
)	O
;	O
input1_len	int
=	O
0	int
;	O
input2_len	int
=	O
0	int
;	O
highlight1	int
=	O
0	int
;	O
highlight2	int
=	O
0	int
;	O
if	O
(	O
!	O
(	O
searchResultsFile	pointer
=	O
fopen	function
(	O
"/tmp/prime_find"	pointer
,	O
"w+"	pointer
)	O
)	O
)	O
{	O
msgBoxH	function
(	O
"Error opening temporary file. Aborting."	pointer
,	O
OK	int
,	O
ERROR	int
)	O
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
return	O
;	O
}	O
unlink	function
(	O
"/tmp/prime_find"	pointer
)	O
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
drawBox	function
(	O
x	int
,	O
y	int
,	O
h	int
,	O
w	int
,	O
" Find File "	pointer
,	O
YES	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
2	int
,	O
y	int
+	O
2	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"Enter file name to search for:"	pointer
)	O
;	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
3	int
,	O
y	int
+	O
2	int
)	O
;	O
printf	function
(	O
"%*s"	pointer
,	O
MAX_INPUT1_LEN	int
,	O
" "	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
9	int
,	O
y	int
+	O
22	int
)	O
;	O
printf	function
(	O
"%*s"	pointer
,	O
MAX_INPUT2_LEN	int
,	O
" "	pointer
)	O
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
6	int
,	O
y	int
+	O
2	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"Search in:"	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
7	int
,	O
y	int
+	O
2	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"[X] Only current working directory"	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
8	int
,	O
y	int
+	O
2	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"[ ] All the filesystem (slower)"	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
9	int
,	O
y	int
+	O
2	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"[ ] Under this path:"	pointer
)	O
;	O
showCursor	function
(	O
)	O
;	O
int	O
bx	int
,	O
by	int
;	O
bx	int
=	O
h	int
-	O
1	int
;	O
by	int
=	O
y	int
+	O
(	O
(	O
w	int
-	O
y	int
-	O
16	int
)	O
/	O
2	int
)	O
-	O
2	int
;	O
draw_findFile_buttons	function
(	O
bx	int
,	O
by	int
,	O
sel	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
3	int
,	O
y	int
+	O
2	int
)	O
;	O
int	O
ch	pointer
;	O
while	O
(	O
1	int
)	O
{	O
ch	pointer
=	O
getKey	function
(	O
)	O
;	O
switch	O
(	O
ch	pointer
)	O
{	O
case	O
(	O
ESC_KEY	int
)	O
:	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
hideCursor	function
(	O
)	O
;	O
fclose	function
(	O
searchResultsFile	pointer
)	O
;	O
return	O
;	O
case	O
(	O
SPACE_KEY	int
)	O
:	O
if	O
(	O
sel	int
==	O
0	int
||	O
sel	int
==	O
4	int
)	O
{	O
goto	O
enterNewChar	O
;	O
break	O
;	O
}	O
case	O
(	O
ENTER_KEY	int
)	O
:	O
switch	O
(	O
sel	int
)	O
{	O
case	O
1	int
:	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
if	O
(	O
osel	int
!=	O
0	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH "	pointer
,	O
x	int
+	O
7	int
+	O
osel	int
,	O
y	int
+	O
3	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dHX"	pointer
,	O
x	int
+	O
7	int
,	O
y	int
+	O
3	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
7	int
,	O
y	int
+	O
3	int
)	O
;	O
osel	int
=	O
0	int
;	O
break	O
;	O
case	O
2	int
:	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
if	O
(	O
osel	int
!=	O
1	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH "	pointer
,	O
x	int
+	O
7	int
+	O
osel	int
,	O
y	int
+	O
3	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dHX"	pointer
,	O
x	int
+	O
8	int
,	O
y	int
+	O
3	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
8	int
,	O
y	int
+	O
3	int
)	O
;	O
osel	int
=	O
1	int
;	O
break	O
;	O
case	O
3	int
:	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
if	O
(	O
osel	int
!=	O
2	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH "	pointer
,	O
x	int
+	O
7	int
+	O
osel	int
,	O
y	int
+	O
3	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dHX"	pointer
,	O
x	int
+	O
9	int
,	O
y	int
+	O
3	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
9	int
,	O
y	int
+	O
3	int
)	O
;	O
osel	int
=	O
2	int
;	O
break	O
;	O
case	O
0	int
:	O
case	O
4	int
:	O
case	O
5	int
:	O
if	O
(	O
input1_len	int
<=	O
0	int
)	O
{	O
hideCursor	function
(	O
)	O
;	O
fclose	function
(	O
searchResultsFile	pointer
)	O
;	O
return	O
;	O
}	O
findFileName	array
[	O
input1_len	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
strchr	function
(	O
findFileName	array
,	O
'*'	O
)	O
)	O
{	O
i	int
=	O
strchr	function
(	O
findFileName	array
,	O
'*'	O
)	O
-	O
findFileName	array
;	O
if	O
(	O
i	int
==	O
0	int
)	O
{	O
strcpy	function
(	O
startStr	pointer
,	O
"*"	pointer
)	O
;	O
strcpy	function
(	O
middleStr	pointer
,	O
"\0"	pointer
)	O
;	O
strcpy	function
(	O
endStr	pointer
,	O
findFileName	array
+	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
i	int
==	O
strlen	function
(	O
findFileName	array
)	O
-	O
1	int
)	O
{	O
strncpy	function
(	O
startStr	pointer
,	O
findFileName	array
,	O
strlen	function
(	O
findFileName	array
)	O
-	O
1	int
)	O
;	O
strcpy	function
(	O
middleStr	pointer
,	O
"\0"	pointer
)	O
;	O
strcpy	function
(	O
endStr	pointer
,	O
"*"	pointer
)	O
;	O
}	O
else	O
{	O
strncpy	function
(	O
startStr	pointer
,	O
findFileName	array
,	O
i	int
)	O
;	O
strcpy	function
(	O
middleStr	pointer
,	O
"*"	pointer
)	O
;	O
strcpy	function
(	O
endStr	pointer
,	O
findFileName	array
+	O
strlen	function
(	O
findFileName	array
)	O
-	O
i	int
)	O
;	O
}	O
}	O
else	O
{	O
strcpy	function
(	O
startStr	pointer
,	O
findFileName	array
)	O
;	O
strcpy	function
(	O
middleStr	pointer
,	O
"\0"	pointer
)	O
;	O
strcpy	function
(	O
endStr	pointer
,	O
"\0"	pointer
)	O
;	O
}	O
if	O
(	O
osel	int
==	O
0	int
)	O
{	O
scanDirForFile	function
(	O
cwd	short
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
osel	int
==	O
1	int
)	O
{	O
scanDirForFile	function
(	O
"/"	pointer
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
osel	int
==	O
2	int
)	O
{	O
if	O
(	O
input2_len	int
==	O
0	int
)	O
{	O
showErrorMsgBox	function
(	O
"Invalid path:\n"	pointer
,	O
findInDir	array
)	O
;	O
}	O
else	O
{	O
scanDirForFile	function
(	O
findInDir	array
,	O
0	int
)	O
;	O
}	O
}	O
chdir	function
(	O
cwd	short
)	O
;	O
fclose	function
(	O
searchResultsFile	pointer
)	O
;	O
hideCursor	function
(	O
)	O
;	O
return	O
;	O
case	O
6	int
:	O
fclose	function
(	O
searchResultsFile	pointer
)	O
;	O
hideCursor	function
(	O
)	O
;	O
return	O
;	O
}	O
break	O
;	O
case	O
(	O
RIGHT_KEY	int
)	O
:	O
if	O
(	O
sel	int
==	O
0	int
)	O
{	O
if	O
(	O
highlight1	int
>=	O
input1_len	int
)	O
break	O
;	O
if	O
(	O
highlight1	int
==	O
MAX_INPUT1_LEN	int
-	O
1	int
)	O
break	O
;	O
highlight1	int
++	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\x1b[%d;%dH"	pointer
,	O
x	int
+	O
3	int
,	O
y	int
+	O
highlight1	int
+	O
2	int
)	O
;	O
}	O
else	O
if	O
(	O
sel	int
==	O
4	int
)	O
{	O
if	O
(	O
highlight2	int
>=	O
input2_len	int
)	O
break	O
;	O
if	O
(	O
highlight2	int
==	O
MAX_INPUT2_LEN	int
-	O
1	int
)	O
break	O
;	O
highlight2	int
++	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\x1b[%d;%dH"	pointer
,	O
x	int
+	O
9	int
,	O
y	int
+	O
highlight2	int
+	O
22	int
)	O
;	O
}	O
break	O
;	O
case	O
(	O
LEFT_KEY	int
)	O
:	O
if	O
(	O
sel	int
==	O
0	int
)	O
{	O
if	O
(	O
highlight1	int
<=	O
0	int
)	O
break	O
;	O
highlight1	int
--	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\x1b[%d;%dH"	pointer
,	O
x	int
+	O
3	int
,	O
y	int
+	O
highlight1	int
+	O
2	int
)	O
;	O
}	O
else	O
if	O
(	O
sel	int
==	O
4	int
)	O
{	O
if	O
(	O
highlight2	int
<=	O
0	int
)	O
break	O
;	O
highlight2	int
--	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\x1b[%d;%dH"	pointer
,	O
x	int
+	O
9	int
,	O
y	int
+	O
highlight2	int
+	O
22	int
)	O
;	O
}	O
break	O
;	O
case	O
(	O
TAB_KEY	int
)	O
:	O
bx	int
=	O
h	int
-	O
1	int
;	O
by	int
=	O
y	int
+	O
(	O
(	O
w	int
-	O
y	int
-	O
16	int
)	O
/	O
2	int
)	O
-	O
2	int
;	O
switch	O
(	O
sel	int
)	O
{	O
case	O
0	int
:	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
7	int
,	O
y	int
+	O
3	int
)	O
;	O
sel	int
=	O
1	int
;	O
break	O
;	O
case	O
1	int
:	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
8	int
,	O
y	int
+	O
3	int
)	O
;	O
sel	int
=	O
2	int
;	O
break	O
;	O
case	O
2	int
:	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
9	int
,	O
y	int
+	O
3	int
)	O
;	O
sel	int
=	O
3	int
;	O
break	O
;	O
case	O
3	int
:	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
9	int
,	O
y	int
+	O
highlight2	int
+	O
22	int
)	O
;	O
sel	int
=	O
4	int
;	O
break	O
;	O
case	O
4	int
:	O
draw_findFile_buttons	function
(	O
bx	int
,	O
by	int
,	O
sel	int
)	O
;	O
sel	int
=	O
5	int
;	O
break	O
;	O
case	O
5	int
:	O
draw_findFile_buttons	function
(	O
bx	int
,	O
by	int
,	O
sel	int
)	O
;	O
sel	int
=	O
6	int
;	O
break	O
;	O
default	O
:	O
draw_findFile_buttons	function
(	O
bx	int
,	O
by	int
,	O
sel	int
)	O
;	O
sel	int
=	O
0	int
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\x1b[%d;%dH"	pointer
,	O
x	int
+	O
3	int
,	O
y	int
+	O
highlight1	int
+	O
2	int
)	O
;	O
}	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
break	O
;	O
case	O
(	O
BACKSPACE_KEY	int
)	O
:	O
if	O
(	O
sel	int
==	O
0	int
)	O
{	O
if	O
(	O
input1_len	int
==	O
0	int
)	O
break	O
;	O
if	O
(	O
highlight1	int
==	O
0	int
)	O
break	O
;	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
for	O
(	O
i	int
=	O
--	O
highlight1	int
;	O
i	int
<	O
input1_len	int
;	O
i	int
++	O
)	O
findFileName	array
[	O
i	int
]	O
=	O
findFileName	array
[	O
i	int
+	O
1	int
]	O
;	O
findFileName	array
[	O
i	int
]	O
=	O
'\0'	O
;	O
input1_len	int
--	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\x1b[%d;%dH"	pointer
,	O
x	int
+	O
3	int
,	O
y	int
+	O
highlight1	int
+	O
2	int
)	O
;	O
for	O
(	O
i	int
=	O
highlight1	int
;	O
i	int
<	O
input1_len	int
;	O
i	int
++	O
)	O
putchar	function
(	O
findFileName	array
[	O
i	int
]	O
)	O
;	O
putchar	function
(	O
' '	O
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\x1b[%d;%dH"	pointer
,	O
x	int
+	O
3	int
,	O
y	int
+	O
highlight1	int
+	O
2	int
)	O
;	O
}	O
else	O
if	O
(	O
sel	int
==	O
4	int
)	O
{	O
if	O
(	O
input2_len	int
==	O
0	int
)	O
break	O
;	O
if	O
(	O
highlight2	int
==	O
0	int
)	O
break	O
;	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
for	O
(	O
i	int
=	O
--	O
highlight2	int
;	O
i	int
<	O
input2_len	int
;	O
i	int
++	O
)	O
findInDir	array
[	O
i	int
]	O
=	O
findInDir	array
[	O
i	int
+	O
1	int
]	O
;	O
findInDir	array
[	O
i	int
]	O
=	O
'\0'	O
;	O
input2_len	int
--	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\x1b[%d;%dH"	pointer
,	O
x	int
+	O
9	int
,	O
y	int
+	O
highlight2	int
+	O
22	int
)	O
;	O
for	O
(	O
i	int
=	O
highlight2	int
;	O
i	int
<	O
input2_len	int
;	O
i	int
++	O
)	O
putchar	function
(	O
findInDir	array
[	O
i	int
]	O
)	O
;	O
putchar	function
(	O
' '	O
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\x1b[%d;%dH"	pointer
,	O
x	int
+	O
9	int
,	O
y	int
+	O
highlight2	int
+	O
22	int
)	O
;	O
}	O
break	O
;	O
case	O
(	O
DEL_KEY	int
)	O
:	O
if	O
(	O
sel	int
==	O
0	int
)	O
{	O
if	O
(	O
input1_len	int
==	O
0	int
)	O
break	O
;	O
if	O
(	O
highlight1	int
==	O
0	int
)	O
break	O
;	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
for	O
(	O
i	int
=	O
highlight1	int
;	O
i	int
<	O
input1_len	int
-	O
1	int
;	O
i	int
++	O
)	O
findFileName	array
[	O
i	int
]	O
=	O
findFileName	array
[	O
i	int
+	O
1	int
]	O
;	O
findFileName	array
[	O
i	int
]	O
=	O
'\0'	O
;	O
input1_len	int
--	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\x1b[%d;%dH"	pointer
,	O
x	int
+	O
3	int
,	O
y	int
+	O
highlight1	int
+	O
2	int
)	O
;	O
for	O
(	O
i	int
=	O
highlight1	int
;	O
i	int
<	O
input1_len	int
;	O
i	int
++	O
)	O
putchar	function
(	O
findFileName	array
[	O
i	int
]	O
)	O
;	O
putchar	function
(	O
' '	O
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\x1b[%d;%dH"	pointer
,	O
x	int
+	O
3	int
,	O
y	int
+	O
highlight1	int
+	O
2	int
)	O
;	O
}	O
else	O
if	O
(	O
sel	int
==	O
4	int
)	O
{	O
if	O
(	O
input2_len	int
==	O
0	int
)	O
break	O
;	O
if	O
(	O
highlight2	int
==	O
0	int
)	O
break	O
;	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
for	O
(	O
i	int
=	O
highlight2	int
;	O
i	int
<	O
input2_len	int
-	O
1	int
;	O
i	int
++	O
)	O
findInDir	array
[	O
i	int
]	O
=	O
findInDir	array
[	O
i	int
+	O
1	int
]	O
;	O
findInDir	array
[	O
i	int
]	O
=	O
'\0'	O
;	O
input2_len	int
--	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\x1b[%d;%dH"	pointer
,	O
x	int
+	O
9	int
,	O
y	int
+	O
highlight2	int
+	O
22	int
)	O
;	O
for	O
(	O
i	int
=	O
highlight2	int
;	O
i	int
<	O
input2_len	int
;	O
i	int
++	O
)	O
putchar	function
(	O
findInDir	array
[	O
i	int
]	O
)	O
;	O
putchar	function
(	O
' '	O
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\x1b[%d;%dH"	pointer
,	O
x	int
+	O
9	int
,	O
y	int
+	O
highlight2	int
+	O
22	int
)	O
;	O
}	O
break	O
;	O
default	O
:	O
if	O
(	O
(	O
ch	pointer
>=	O
'a'	O
&&	O
ch	pointer
<=	O
'z'	O
)	O
||	O
(	O
ch	pointer
>=	O
'A'	O
&&	O
ch	pointer
<=	O
'Z'	O
)	O
||	O
(	O
ch	pointer
>=	O
32	int
&&	O
ch	pointer
<=	O
64	int
)	O
||	O
(	O
ch	pointer
>=	O
123	int
&&	O
ch	pointer
<=	O
126	int
)	O
)	O
{	O
enterNewChar	O
:	O
if	O
(	O
sel	int
==	O
0	int
)	O
{	O
if	O
(	O
strlen	function
(	O
findFileName	array
)	O
>=	O
MAX_INPUT1_LEN	int
)	O
break	O
;	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
if	O
(	O
findFileName	array
[	O
highlight1	int
]	O
!=	O
'\0'	O
)	O
{	O
for	O
(	O
i	int
=	O
input1_len	int
;	O
i	int
>	O
highlight1	int
;	O
i	int
--	O
)	O
findFileName	array
[	O
i	int
]	O
=	O
findFileName	array
[	O
i	int
-	O
1	int
]	O
;	O
}	O
findFileName	array
[	O
highlight1	int
]	O
=	O
ch	pointer
;	O
input1_len	int
++	O
;	O
putchar	function
(	O
findFileName	array
[	O
highlight1	int
++	O
]	O
)	O
;	O
if	O
(	O
input1_len	int
>	O
highlight1	int
)	O
{	O
for	O
(	O
i	int
=	O
highlight1	int
;	O
i	int
<	O
input1_len	int
;	O
i	int
++	O
)	O
putchar	function
(	O
findFileName	array
[	O
i	int
]	O
)	O
;	O
}	O
if	O
(	O
highlight1	int
>=	O
MAX_INPUT1_LEN	int
)	O
highlight1	int
=	O
MAX_INPUT1_LEN	int
-	O
1	int
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\x1b[%d;%dH"	pointer
,	O
x	int
+	O
3	int
,	O
y	int
+	O
highlight1	int
+	O
2	int
)	O
;	O
}	O
else	O
if	O
(	O
sel	int
==	O
4	int
)	O
{	O
if	O
(	O
osel	int
!=	O
2	int
)	O
{	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH "	pointer
,	O
x	int
+	O
7	int
+	O
osel	int
,	O
y	int
+	O
3	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dHX"	pointer
,	O
x	int
+	O
9	int
,	O
y	int
+	O
3	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
9	int
,	O
y	int
+	O
3	int
)	O
;	O
osel	int
=	O
2	int
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\x1b[%d;%dH"	pointer
,	O
x	int
+	O
9	int
,	O
y	int
+	O
highlight2	int
+	O
22	int
)	O
;	O
}	O
if	O
(	O
strlen	function
(	O
findInDir	array
)	O
>=	O
MAX_INPUT2_LEN	int
)	O
break	O
;	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
if	O
(	O
findInDir	array
[	O
highlight2	int
]	O
!=	O
'\0'	O
)	O
{	O
for	O
(	O
i	int
=	O
input2_len	int
;	O
i	int
>	O
highlight2	int
;	O
i	int
--	O
)	O
findInDir	array
[	O
i	int
]	O
=	O
findInDir	array
[	O
i	int
-	O
1	int
]	O
;	O
}	O
findInDir	array
[	O
highlight2	int
]	O
=	O
ch	pointer
;	O
input2_len	int
++	O
;	O
putchar	function
(	O
findInDir	array
[	O
highlight2	int
++	O
]	O
)	O
;	O
if	O
(	O
input2_len	int
>	O
highlight2	int
)	O
{	O
for	O
(	O
i	int
=	O
highlight2	int
;	O
i	int
<	O
input2_len	int
;	O
i	int
++	O
)	O
putchar	function
(	O
findInDir	array
[	O
i	int
]	O
)	O
;	O
}	O
if	O
(	O
highlight2	int
>=	O
MAX_INPUT2_LEN	int
)	O
highlight2	int
=	O
MAX_INPUT2_LEN	int
-	O
1	int
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\x1b[%d;%dH"	pointer
,	O
x	int
+	O
9	int
,	O
y	int
+	O
highlight2	int
+	O
22	int
)	O
;	O
}	O
}	O
break	O
;	O
}	O
}	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
fclose	function
(	O
searchResultsFile	pointer
)	O
;	O
return	O
;	O
}	O
void	O
scanDirForFile	function
(	O
char	O
*	O
tmp	array
,	O
int	O
level	int
)	O
{	O
static	O
int	O
nf	int
;	O
int	O
n	int
,	O
i	int
,	O
z	int
;	O
struct	O
stat	struct
statbuf	struct
;	O
struct	O
dirent	struct
*	O
*	O
eps	pointer
;	O
int	O
h	int
=	O
SCREEN_H	int
/	O
2	int
;	O
int	O
w	int
=	O
SCREEN_W	int
-	O
12	int
;	O
if	O
(	O
level	int
==	O
0	int
)	O
{	O
nf	int
=	O
0	int
;	O
drawBox	function
(	O
h	int
-	O
2	int
,	O
5	int
,	O
h	int
+	O
2	int
,	O
SCREEN_W	int
-	O
5	int
,	O
NULL	O
,	O
YES	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
1	int
,	O
6	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"Scanning:"	pointer
)	O
;	O
}	O
n	int
=	O
scandir	function
(	O
tmp	array
,	O
&	O
eps	pointer
,	O
one	function
,	O
alphasort	function
)	O
;	O
if	O
(	O
n	int
>=	O
0	int
)	O
{	O
z	int
=	O
chdir	function
(	O
tmp	array
)	O
;	O
if	O
(	O
z	int
==	O
-	O
1	int
)	O
{	O
return	O
;	O
}	O
int	O
cnt	int
;	O
for	O
(	O
cnt	int
=	O
0	int
;	O
cnt	int
<	O
n	int
;	O
++	O
cnt	int
)	O
{	O
char	O
*	O
d	pointer
=	O
eps	pointer
[	O
cnt	int
]	O
->	O
d_name	array
;	O
z	int
=	O
lstat	function
(	O
d	pointer
,	O
&	O
statbuf	struct
)	O
;	O
if	O
(	O
z	int
==	O
-	O
1	int
)	O
{	O
return	O
;	O
}	O
if	O
(	O
S_ISDIR	O
(	O
statbuf	struct
.	O
st_mode	int
)	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
d	pointer
,	O
"."	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
d	pointer
,	O
".."	pointer
)	O
==	O
0	int
)	O
continue	O
;	O
int	O
len	int
=	O
strlen	function
(	O
d	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
,	O
6	int
)	O
;	O
if	O
(	O
len	int
>=	O
w	int
)	O
{	O
char	O
*	O
d2	pointer
=	O
d	pointer
+	O
(	O
len	int
-	O
w	int
+	O
2	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"..%s"	pointer
,	O
d2	pointer
)	O
;	O
}	O
else	O
{	O
len	int
=	O
w	int
-	O
len	int
;	O
fprintf	function
(	O
stdout	pointer
,	O
"%s%*s"	pointer
,	O
d	pointer
,	O
len	int
,	O
" "	pointer
)	O
;	O
}	O
scanDirForFile	function
(	O
d	pointer
,	O
level	int
+	O
1	int
)	O
;	O
}	O
else	O
{	O
char	O
*	O
slash	pointer
=	O
strrchr	function
(	O
d	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
slash	pointer
)	O
i	int
=	O
compareFileName	function
(	O
slash	pointer
+	O
1	int
)	O
;	O
else	O
i	int
=	O
compareFileName	function
(	O
d	pointer
)	O
;	O
if	O
(	O
i	int
)	O
{	O
i	int
=	O
strlen	function
(	O
d	pointer
)	O
;	O
if	O
(	O
(	O
strlen	function
(	O
tmp	array
)	O
+	O
i	int
)	O
>	O
SCREEN_W	int
-	O
19	int
)	O
{	O
int	O
j	int
=	O
SCREEN_W	int
-	O
i	int
-	O
22	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
j	int
;	O
i	int
++	O
)	O
fputc	function
(	O
tmp	array
[	O
i	int
]	O
,	O
searchResultsFile	pointer
)	O
;	O
fputs	function
(	O
"../"	pointer
,	O
searchResultsFile	pointer
)	O
;	O
fputs	function
(	O
d	pointer
,	O
searchResultsFile	pointer
)	O
;	O
fputc	function
(	O
'\n'	O
,	O
searchResultsFile	pointer
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
searchResultsFile	pointer
,	O
"%s/%s\n"	pointer
,	O
tmp	array
,	O
d	pointer
)	O
;	O
}	O
nf	int
++	O
;	O
}	O
}	O
free	function
(	O
eps	pointer
[	O
cnt	int
]	O
)	O
;	O
}	O
free	function
(	O
eps	pointer
)	O
;	O
z	int
=	O
chdir	function
(	O
".."	pointer
)	O
;	O
}	O
if	O
(	O
level	int
==	O
0	int
)	O
{	O
if	O
(	O
nf	int
==	O
0	int
)	O
{	O
msgBoxH	function
(	O
"Search failed. No matches were found."	pointer
,	O
OK	int
,	O
INFO	int
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
searchResultsFile	pointer
,	O
"%06d"	pointer
,	O
nf	int
)	O
;	O
fflush	function
(	O
searchResultsFile	pointer
)	O
;	O
showSearchResults	function
(	O
)	O
;	O
fclose	function
(	O
searchResultsFile	pointer
)	O
;	O
}	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
}	O
}	O
int	O
compareFileName	function
(	O
char	O
*	O
name	pointer
)	O
{	O
int	O
i	int
=	O
0	int
;	O
if	O
(	O
strlen	function
(	O
startStr	pointer
)	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
startStr	pointer
,	O
"*"	pointer
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
(	O
(	O
strstr	function
(	O
name	pointer
,	O
startStr	pointer
)	O
)	O
-	O
name	pointer
)	O
==	O
0	int
)	O
{	O
i	int
=	O
1	int
;	O
}	O
else	O
return	O
0	int
;	O
}	O
}	O
if	O
(	O
strlen	function
(	O
endStr	pointer
)	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
endStr	pointer
,	O
"*"	pointer
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
(	O
(	O
strstr	function
(	O
name	pointer
,	O
endStr	pointer
)	O
-	O
name	pointer
)	O
+	O
strlen	function
(	O
endStr	pointer
)	O
==	O
strlen	function
(	O
name	pointer
)	O
)	O
)	O
{	O
i	int
=	O
1	int
;	O
}	O
else	O
return	O
0	int
;	O
}	O
}	O
if	O
(	O
strlen	function
(	O
middleStr	pointer
)	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
middleStr	pointer
,	O
"*"	pointer
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
(	O
(	O
strstr	function
(	O
name	pointer
,	O
middleStr	pointer
)	O
)	O
-	O
name	pointer
)	O
>	O
0	int
)	O
{	O
i	int
=	O
1	int
;	O
}	O
else	O
i	int
=	O
0	int
;	O
}	O
}	O
return	O
i	int
;	O
}	O
void	O
showSearchResults	function
(	O
)	O
{	O
int	O
lineStart	array
[	O
500	int
]	O
;	O
int	O
i	int
,	O
j	int
,	O
k	int
,	O
l	int
;	O
int	O
buf_size	int
=	O
4096	int
;	O
char	O
buf	O
[	O
buf_size	int
]	O
;	O
int	O
buf_len	int
=	O
0	int
;	O
int	O
moreLines	int
=	O
0	int
;	O
int	O
firstVisLine	int
=	O
0	int
;	O
char	O
totalResultsC	array
[	O
6	int
]	O
;	O
int	O
totalResults	int
;	O
int	O
page_number	int
=	O
0	int
;	O
int	O
firstPageEntry	int
=	O
0	int
;	O
int	O
page_start	array
[	O
100	int
]	O
;	O
page_start	array
[	O
0	int
]	O
=	O
0	int
;	O
int	O
page_firstVisFile	array
[	O
100	int
]	O
;	O
page_firstVisFile	array
[	O
0	int
]	O
=	O
0	int
;	O
fseek	function
(	O
searchResultsFile	pointer
,	O
-	O
6	int
,	O
SEEK_END	int
)	O
;	O
i	int
=	O
fread	function
(	O
totalResultsC	array
,	O
sizeof	O
(	O
char	O
)	O
,	O
6	int
,	O
searchResultsFile	pointer
)	O
;	O
totalResults	int
=	O
atoi	function
(	O
totalResultsC	array
)	O
;	O
drawBox	function
(	O
5	int
,	O
5	int
,	O
SCREEN_H	int
-	O
5	int
,	O
SCREEN_W	int
-	O
5	int
,	O
" Search results: "	pointer
,	O
YES	int
)	O
;	O
fseek	function
(	O
searchResultsFile	pointer
,	O
0	int
,	O
SEEK_SET	int
)	O
;	O
buf_len	int
=	O
fread	function
(	O
buf	O
,	O
sizeof	O
(	O
char	O
)	O
,	O
sizeof	O
(	O
buf	O
)	O
,	O
searchResultsFile	pointer
)	O
;	O
if	O
(	O
!	O
buf_len	int
)	O
return	O
;	O
buf_len	int
-=	O
6	int
;	O
i	int
=	O
0	int
;	O
j	int
=	O
6	int
;	O
k	int
=	O
6	int
;	O
l	int
=	O
1	int
;	O
lineStart	array
[	O
0	int
]	O
=	O
0	int
;	O
int	O
len	int
=	O
0	int
;	O
char	O
t	array
[	O
20	int
]	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
j	int
,	O
k	int
)	O
;	O
sprintf	function
(	O
t	array
,	O
"(%d/%d) "	pointer
,	O
l	int
,	O
totalResults	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"%s"	pointer
,	O
t	array
)	O
;	O
len	int
=	O
strlen	function
(	O
t	array
)	O
;	O
while	O
(	O
i	int
<	O
buf_len	int
)	O
{	O
if	O
(	O
j	int
>	O
SCREEN_H	int
-	O
6	int
)	O
{	O
moreLines	int
=	O
1	int
;	O
break	O
;	O
}	O
if	O
(	O
len	int
>	O
SCREEN_W	int
-	O
12	int
)	O
{	O
k	int
=	O
6	int
;	O
j	int
++	O
;	O
lineStart	array
[	O
l	int
]	O
=	O
i	int
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH   "	pointer
,	O
j	int
,	O
k	int
)	O
;	O
len	int
=	O
3	int
;	O
continue	O
;	O
}	O
if	O
(	O
buf	O
[	O
i	int
]	O
==	O
'\n'	O
)	O
{	O
k	int
=	O
6	int
;	O
j	int
++	O
;	O
lineStart	array
[	O
l	int
]	O
=	O
++	O
i	int
;	O
l	int
++	O
;	O
if	O
(	O
l	int
>	O
totalResults	int
)	O
break	O
;	O
if	O
(	O
j	int
>	O
SCREEN_H	int
-	O
6	int
)	O
{	O
moreLines	int
=	O
1	int
;	O
break	O
;	O
}	O
sprintf	function
(	O
t	array
,	O
"(%d/%d) "	pointer
,	O
l	int
,	O
totalResults	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
j	int
,	O
k	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"%s"	pointer
,	O
t	array
)	O
;	O
len	int
=	O
strlen	function
(	O
t	array
)	O
;	O
continue	O
;	O
}	O
putchar	function
(	O
buf	O
[	O
i	int
++	O
]	O
)	O
;	O
k	int
++	O
;	O
len	int
++	O
;	O
}	O
char	O
c	char
;	O
while	O
(	O
(	O
c	char
=	O
getKey	function
(	O
)	O
)	O
)	O
{	O
switch	O
(	O
c	char
)	O
{	O
case	O
(	O
SPACE_KEY	int
)	O
:	O
case	O
(	O
ENTER_KEY	int
)	O
:	O
case	O
(	O
ESC_KEY	int
)	O
:	O
return	O
;	O
break	O
;	O
case	O
(	O
UP_KEY	int
)	O
:	O
if	O
(	O
firstVisLine	int
>	O
0	int
)	O
{	O
firstVisLine	int
--	O
;	O
goto	O
Refresh	O
;	O
}	O
if	O
(	O
page_number	int
>	O
0	int
)	O
{	O
fseek	function
(	O
searchResultsFile	pointer
,	O
page_start	array
[	O
page_number	int
-	O
1	int
]	O
,	O
SEEK_SET	int
)	O
;	O
buf_len	int
=	O
fread	function
(	O
buf	O
,	O
sizeof	O
(	O
char	O
)	O
,	O
sizeof	O
(	O
buf	O
)	O
,	O
searchResultsFile	pointer
)	O
;	O
if	O
(	O
!	O
buf_len	int
)	O
return	O
;	O
buf_len	int
-=	O
6	int
;	O
firstPageEntry	int
=	O
page_firstVisFile	array
[	O
page_number	int
]	O
;	O
firstVisLine	int
=	O
page_firstVisFile	array
[	O
page_number	int
]	O
-	O
1	int
;	O
page_number	int
--	O
;	O
i	int
=	O
0	int
;	O
j	int
=	O
0	int
;	O
lineStart	array
[	O
0	int
]	O
=	O
0	int
;	O
while	O
(	O
i	int
<	O
buf_len	int
)	O
{	O
if	O
(	O
buf	O
[	O
i	int
]	O
==	O
'\n'	O
)	O
{	O
lineStart	array
[	O
++	O
j	int
]	O
=	O
i	int
;	O
}	O
i	int
++	O
;	O
}	O
goto	O
Refresh	O
;	O
}	O
break	O
;	O
case	O
(	O
DOWN_KEY	int
)	O
:	O
if	O
(	O
moreLines	int
)	O
{	O
firstVisLine	int
++	O
;	O
goto	O
Refresh	O
;	O
}	O
if	O
(	O
firstVisLine	int
+	O
(	O
SCREEN_H	int
-	O
12	int
)	O
<	O
totalResults	int
-	O
1	int
)	O
{	O
fseek	function
(	O
searchResultsFile	pointer
,	O
page_start	array
[	O
page_number	int
]	O
+	O
lineStart	array
[	O
firstVisLine	int
+	O
1	int
]	O
,	O
SEEK_SET	int
)	O
;	O
buf_len	int
=	O
fread	function
(	O
buf	O
,	O
sizeof	O
(	O
char	O
)	O
,	O
sizeof	O
(	O
buf	O
)	O
,	O
searchResultsFile	pointer
)	O
;	O
if	O
(	O
!	O
buf_len	int
)	O
return	O
;	O
buf_len	int
-=	O
6	int
;	O
page_number	int
++	O
;	O
page_start	array
[	O
page_number	int
]	O
=	O
page_start	array
[	O
page_number	int
-	O
1	int
]	O
+	O
lineStart	array
[	O
firstVisLine	int
+	O
1	int
]	O
;	O
firstPageEntry	int
=	O
firstVisLine	int
+	O
1	int
;	O
page_firstVisFile	array
[	O
page_number	int
]	O
=	O
page_firstVisFile	array
[	O
page_number	int
-	O
1	int
]	O
+	O
firstPageEntry	int
-	O
1	int
;	O
firstVisLine	int
=	O
0	int
;	O
lineStart	array
[	O
0	int
]	O
=	O
0	int
;	O
goto	O
Refresh	O
;	O
}	O
break	O
;	O
Refresh	O
:	O
i	int
=	O
lineStart	array
[	O
firstVisLine	int
]	O
;	O
j	int
=	O
6	int
;	O
k	int
=	O
6	int
;	O
moreLines	int
=	O
0	int
;	O
l	int
=	O
firstVisLine	int
+	O
1	int
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
j	int
,	O
k	int
)	O
;	O
sprintf	function
(	O
t	array
,	O
"(%d/%d) "	pointer
,	O
l	int
+	O
page_firstVisFile	array
[	O
page_number	int
]	O
,	O
totalResults	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"%s"	pointer
,	O
t	array
)	O
;	O
len	int
=	O
strlen	function
(	O
t	array
)	O
;	O
while	O
(	O
i	int
<	O
buf_len	int
)	O
{	O
if	O
(	O
j	int
>	O
SCREEN_H	int
-	O
6	int
)	O
{	O
moreLines	int
=	O
1	int
;	O
break	O
;	O
}	O
if	O
(	O
len	int
>	O
SCREEN_W	int
-	O
12	int
)	O
{	O
k	int
=	O
6	int
;	O
j	int
++	O
;	O
lineStart	array
[	O
l	int
]	O
=	O
i	int
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH   "	pointer
,	O
j	int
,	O
k	int
)	O
;	O
len	int
=	O
3	int
;	O
continue	O
;	O
}	O
if	O
(	O
buf	O
[	O
i	int
]	O
==	O
'\n'	O
)	O
{	O
printf	function
(	O
"%*s"	pointer
,	O
SCREEN_W	int
-	O
len	int
-	O
12	int
,	O
" "	pointer
)	O
;	O
k	int
=	O
6	int
;	O
j	int
++	O
;	O
lineStart	array
[	O
l	int
]	O
=	O
++	O
i	int
;	O
l	int
++	O
;	O
if	O
(	O
l	int
+	O
page_firstVisFile	array
[	O
page_number	int
]	O
>	O
totalResults	int
)	O
break	O
;	O
if	O
(	O
j	int
>	O
SCREEN_H	int
-	O
6	int
)	O
{	O
moreLines	int
=	O
1	int
;	O
break	O
;	O
}	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
j	int
,	O
k	int
)	O
;	O
sprintf	function
(	O
t	array
,	O
"(%d/%d) "	pointer
,	O
l	int
+	O
page_firstVisFile	array
[	O
page_number	int
]	O
,	O
totalResults	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"%s"	pointer
,	O
t	array
)	O
;	O
len	int
=	O
strlen	function
(	O
t	array
)	O
;	O
continue	O
;	O
}	O
putchar	function
(	O
buf	O
[	O
i	int
++	O
]	O
)	O
;	O
k	int
++	O
;	O
len	int
++	O
;	O
}	O
}	O
}	O
}	O
