static	O
int	O
argcv_scan	function
(	O
int	O
len	int
,	O
const	O
char	O
*	O
command	pointer
,	O
const	O
char	O
*	O
delim	pointer
,	O
const	O
char	O
*	O
cmnt	pointer
,	O
int	O
*	O
start	pointer
,	O
int	O
*	O
end	pointer
,	O
int	O
*	O
save	pointer
)	O
{	O
int	O
i	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
i	int
=	O
*	O
save	pointer
;	O
if	O
(	O
i	int
>=	O
len	int
)	O
return	O
i	int
+	O
1	int
;	O
while	O
(	O
i	int
<	O
len	int
&&	O
isws	O
(	O
command	pointer
[	O
i	int
]	O
)	O
)	O
i	int
++	O
;	O
*	O
start	pointer
=	O
i	int
;	O
if	O
(	O
!	O
isdelim	O
(	O
command	pointer
[	O
i	int
]	O
,	O
delim	pointer
)	O
)	O
{	O
while	O
(	O
i	int
<	O
len	int
)	O
{	O
if	O
(	O
command	pointer
[	O
i	int
]	O
==	O
'\\'	O
)	O
{	O
if	O
(	O
++	O
i	int
==	O
len	int
)	O
break	O
;	O
i	int
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
command	pointer
[	O
i	int
]	O
==	O
'\''	O
||	O
command	pointer
[	O
i	int
]	O
==	O
'"'	O
)	O
{	O
int	O
j	int
;	O
for	O
(	O
j	int
=	O
i	int
+	O
1	int
;	O
j	int
<	O
len	int
&&	O
command	pointer
[	O
j	int
]	O
!=	O
command	pointer
[	O
i	int
]	O
;	O
j	int
++	O
)	O
if	O
(	O
command	pointer
[	O
j	int
]	O
==	O
'\\'	O
)	O
j	int
++	O
;	O
if	O
(	O
j	int
<	O
len	int
)	O
i	int
=	O
j	int
+	O
1	int
;	O
else	O
i	int
++	O
;	O
}	O
else	O
if	O
(	O
isws	O
(	O
command	pointer
[	O
i	int
]	O
)	O
||	O
isdelim	O
(	O
command	pointer
[	O
i	int
]	O
,	O
delim	pointer
)	O
)	O
break	O
;	O
else	O
i	int
++	O
;	O
}	O
i	int
--	O
;	O
}	O
*	O
end	pointer
=	O
i	int
;	O
*	O
save	pointer
=	O
i	int
+	O
1	int
;	O
if	O
(	O
*	O
save	pointer
<=	O
len	int
)	O
{	O
if	O
(	O
strchr	function
(	O
cmnt	pointer
,	O
command	pointer
[	O
*	O
start	pointer
]	O
)	O
!=	O
NULL	O
)	O
{	O
i	int
=	O
*	O
save	pointer
;	O
while	O
(	O
i	int
<	O
len	int
&&	O
command	pointer
[	O
i	int
]	O
!=	O
'\n'	O
)	O
i	int
++	O
;	O
*	O
save	pointer
=	O
i	int
;	O
continue	O
;	O
}	O
}	O
break	O
;	O
}	O
return	O
*	O
save	pointer
;	O
}	O
static	O
char	O
quote_transtab	array
[	O
]	O
=	O
"\\\\a\ab\bf\fn\nr\rt\t"	pointer
;	O
int	O
argcv_unquote_char	O
(	O
int	O
c	int
)	O
{	O
char	O
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
quote_transtab	array
;	O
*	O
p	pointer
;	O
p	pointer
+=	O
2	int
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
c	int
)	O
return	O
p	pointer
[	O
1	int
]	O
;	O
}	O
return	O
c	int
;	O
}	O
int	O
argcv_quote_char	O
(	O
int	O
c	int
)	O
{	O
char	O
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
quote_transtab	array
+	O
sizeof	O
(	O
quote_transtab	array
)	O
-	O
2	int
;	O
p	pointer
>	O
quote_transtab	array
;	O
p	pointer
-=	O
2	int
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
c	int
)	O
return	O
p	pointer
[	O
-	O
1	int
]	O
;	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
xtonum	function
(	O
int	O
*	O
pval	pointer
,	O
const	O
char	O
*	O
src	pointer
,	O
int	O
base	int
,	O
int	O
cnt	int
)	O
{	O
int	O
i	int
,	O
val	int
;	O
for	O
(	O
i	int
=	O
0	int
,	O
val	int
=	O
0	int
;	O
i	int
<	O
cnt	int
;	O
i	int
++	O
,	O
src	pointer
++	O
)	O
{	O
int	O
n	long
=	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
src	pointer
;	O
if	O
(	O
n	long
>	O
127	int
||	O
(	O
n	long
=	O
to_num	O
(	O
n	long
)	O
)	O
>=	O
base	int
)	O
break	O
;	O
val	int
=	O
val	int
*	O
base	int
+	O
n	long
;	O
}	O
*	O
pval	pointer
=	O
val	int
;	O
return	O
i	int
;	O
}	O
size_t	long
argcv_quoted_length_n	O
(	O
const	O
char	O
*	O
str	pointer
,	O
size_t	long
size	long
,	O
int	O
*	O
quote	pointer
)	O
{	O
size_t	long
len	int
=	O
0	int
;	O
const	O
char	O
*	O
end	pointer
=	O
str	pointer
+	O
size	long
;	O
*	O
quote	pointer
=	O
0	int
;	O
for	O
(	O
;	O
str	pointer
<	O
end	pointer
;	O
str	pointer
++	O
)	O
{	O
if	O
(	O
*	O
str	pointer
==	O
' '	O
)	O
{	O
len	int
++	O
;	O
*	O
quote	pointer
=	O
1	int
;	O
}	O
else	O
if	O
(	O
*	O
str	pointer
==	O
'"'	O
)	O
{	O
len	int
+=	O
2	int
;	O
*	O
quote	pointer
=	O
1	int
;	O
}	O
else	O
if	O
(	O
*	O
str	pointer
!=	O
'\t'	O
&&	O
*	O
str	pointer
!=	O
'\\'	O
&&	O
isprint	function
(	O
*	O
str	pointer
)	O
)	O
len	int
++	O
;	O
else	O
if	O
(	O
argcv_quote_char	O
(	O
*	O
str	pointer
)	O
!=	O
-	O
1	int
)	O
len	int
+=	O
2	int
;	O
else	O
len	int
+=	O
4	int
;	O
}	O
return	O
len	int
;	O
}	O
size_t	long
argcv_quoted_length	O
(	O
const	O
char	O
*	O
str	pointer
,	O
int	O
*	O
quote	pointer
)	O
{	O
return	O
argcv_quoted_length_n	O
(	O
str	pointer
,	O
strlen	function
(	O
str	pointer
)	O
,	O
quote	pointer
)	O
;	O
}	O
void	O
argcv_unquote_copy	O
(	O
char	O
*	O
dst	pointer
,	O
const	O
char	O
*	O
src	pointer
,	O
size_t	long
n	long
)	O
{	O
int	O
i	int
=	O
0	int
;	O
int	O
c	int
;	O
int	O
expect_delim	int
=	O
0	int
;	O
while	O
(	O
i	int
<	O
n	long
)	O
{	O
switch	O
(	O
src	pointer
[	O
i	int
]	O
)	O
{	O
case	O
'\''	O
:	O
case	O
'"'	O
:	O
if	O
(	O
!	O
expect_delim	int
)	O
{	O
const	O
char	O
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
src	pointer
+	O
i	int
+	O
1	int
;	O
*	O
p	pointer
&&	O
*	O
p	pointer
!=	O
src	pointer
[	O
i	int
]	O
;	O
p	pointer
++	O
)	O
if	O
(	O
*	O
p	pointer
==	O
'\\'	O
)	O
p	pointer
++	O
;	O
if	O
(	O
*	O
p	pointer
)	O
expect_delim	int
=	O
src	pointer
[	O
i	int
++	O
]	O
;	O
else	O
*	O
dst	pointer
++	O
=	O
src	pointer
[	O
i	int
++	O
]	O
;	O
}	O
else	O
if	O
(	O
expect_delim	int
==	O
src	pointer
[	O
i	int
]	O
)	O
++	O
i	int
;	O
else	O
*	O
dst	pointer
++	O
=	O
src	pointer
[	O
i	int
++	O
]	O
;	O
break	O
;	O
case	O
'\\'	O
:	O
++	O
i	int
;	O
if	O
(	O
src	pointer
[	O
i	int
]	O
==	O
0	int
)	O
{	O
*	O
dst	pointer
++	O
=	O
'\\'	O
;	O
*	O
dst	pointer
++	O
=	O
src	pointer
[	O
i	int
++	O
]	O
;	O
}	O
else	O
if	O
(	O
src	pointer
[	O
i	int
]	O
==	O
'x'	O
||	O
src	pointer
[	O
i	int
]	O
==	O
'X'	O
)	O
{	O
if	O
(	O
n	long
-	O
i	int
<	O
2	int
)	O
{	O
*	O
dst	pointer
++	O
=	O
'\\'	O
;	O
*	O
dst	pointer
++	O
=	O
src	pointer
[	O
i	int
++	O
]	O
;	O
}	O
else	O
{	O
int	O
off	int
=	O
xtonum	function
(	O
&	O
c	int
,	O
src	pointer
+	O
i	int
+	O
1	int
,	O
16	int
,	O
2	int
)	O
;	O
if	O
(	O
off	int
==	O
0	int
)	O
{	O
*	O
dst	pointer
++	O
=	O
'\\'	O
;	O
*	O
dst	pointer
++	O
=	O
src	pointer
[	O
i	int
++	O
]	O
;	O
}	O
else	O
{	O
*	O
dst	pointer
++	O
=	O
c	int
;	O
i	int
+=	O
off	int
+	O
1	int
;	O
}	O
}	O
}	O
else	O
if	O
(	O
(	O
unsigned	O
char	O
)	O
src	pointer
[	O
i	int
]	O
<	O
128	int
&&	O
isdigit	function
(	O
src	pointer
[	O
i	int
]	O
)	O
)	O
{	O
if	O
(	O
n	long
-	O
i	int
<	O
1	int
)	O
{	O
*	O
dst	pointer
++	O
=	O
'\\'	O
;	O
*	O
dst	pointer
++	O
=	O
src	pointer
[	O
i	int
++	O
]	O
;	O
}	O
else	O
{	O
int	O
off	int
=	O
xtonum	function
(	O
&	O
c	int
,	O
src	pointer
+	O
i	int
,	O
8	int
,	O
3	int
)	O
;	O
if	O
(	O
off	int
==	O
0	int
)	O
{	O
*	O
dst	pointer
++	O
=	O
'\\'	O
;	O
*	O
dst	pointer
++	O
=	O
src	pointer
[	O
i	int
++	O
]	O
;	O
}	O
else	O
{	O
*	O
dst	pointer
++	O
=	O
c	int
;	O
i	int
+=	O
off	int
;	O
}	O
}	O
}	O
else	O
*	O
dst	pointer
++	O
=	O
argcv_unquote_char	O
(	O
src	pointer
[	O
i	int
++	O
]	O
)	O
;	O
break	O
;	O
default	O
:	O
*	O
dst	pointer
++	O
=	O
src	pointer
[	O
i	int
++	O
]	O
;	O
}	O
}	O
*	O
dst	pointer
=	O
0	int
;	O
}	O
void	O
argcv_quote_copy_n	O
(	O
char	O
*	O
dst	pointer
,	O
const	O
char	O
*	O
src	pointer
,	O
size_t	long
size	long
)	O
{	O
const	O
char	O
*	O
end	pointer
=	O
src	pointer
+	O
size	long
;	O
for	O
(	O
;	O
src	pointer
<	O
end	pointer
;	O
src	pointer
++	O
)	O
{	O
if	O
(	O
*	O
src	pointer
==	O
'"'	O
)	O
{	O
*	O
dst	pointer
++	O
=	O
'\\'	O
;	O
*	O
dst	pointer
++	O
=	O
*	O
src	pointer
;	O
}	O
else	O
if	O
(	O
*	O
src	pointer
!=	O
'\t'	O
&&	O
*	O
src	pointer
!=	O
'\\'	O
&&	O
isprint	function
(	O
*	O
src	pointer
)	O
)	O
*	O
dst	pointer
++	O
=	O
*	O
src	pointer
;	O
else	O
{	O
int	O
c	int
=	O
argcv_quote_char	O
(	O
*	O
src	pointer
)	O
;	O
*	O
dst	pointer
++	O
=	O
'\\'	O
;	O
if	O
(	O
c	int
!=	O
-	O
1	int
)	O
*	O
dst	pointer
++	O
=	O
c	int
;	O
else	O
{	O
char	O
tmp	array
[	O
4	int
]	O
;	O
snprintf	function
(	O
tmp	array
,	O
sizeof	O
tmp	array
,	O
"%03o"	pointer
,	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
src	pointer
)	O
;	O
memcpy	function
(	O
dst	pointer
,	O
tmp	array
,	O
3	int
)	O
;	O
dst	pointer
+=	O
3	int
;	O
}	O
}	O
}	O
}	O
void	O
argcv_quote_copy	O
(	O
char	O
*	O
dst	pointer
,	O
const	O
char	O
*	O
src	pointer
)	O
{	O
argcv_quote_copy_n	O
(	O
dst	pointer
,	O
src	pointer
,	O
strlen	function
(	O
src	pointer
)	O
)	O
;	O
}	O
int	O
argcv_get_n	function
(	O
const	O
char	O
*	O
command	pointer
,	O
int	O
len	int
,	O
const	O
char	O
*	O
delim	pointer
,	O
const	O
char	O
*	O
cmnt	pointer
,	O
int	O
*	O
argc	pointer
,	O
char	O
*	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
i	int
=	O
0	int
;	O
int	O
start	pointer
,	O
end	pointer
,	O
save	pointer
;	O
*	O
argv	pointer
=	O
NULL	O
;	O
*	O
argc	pointer
=	O
0	int
;	O
save	pointer
=	O
0	int
;	O
if	O
(	O
!	O
delim	pointer
)	O
delim	pointer
=	O
""	pointer
;	O
if	O
(	O
!	O
cmnt	pointer
)	O
cmnt	pointer
=	O
""	pointer
;	O
while	O
(	O
argcv_scan	function
(	O
len	int
,	O
command	pointer
,	O
delim	pointer
,	O
cmnt	pointer
,	O
&	O
start	pointer
,	O
&	O
end	pointer
,	O
&	O
save	pointer
)	O
<=	O
len	int
)	O
(	O
*	O
argc	pointer
)	O
++	O
;	O
*	O
argv	pointer
=	O
calloc	function
(	O
(	O
*	O
argc	pointer
+	O
1	int
)	O
,	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
if	O
(	O
*	O
argv	pointer
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
i	int
=	O
0	int
;	O
save	pointer
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
*	O
argc	pointer
;	O
i	int
++	O
)	O
{	O
int	O
n	long
;	O
int	O
unquote	int
;	O
argcv_scan	function
(	O
len	int
,	O
command	pointer
,	O
delim	pointer
,	O
cmnt	pointer
,	O
&	O
start	pointer
,	O
&	O
end	pointer
,	O
&	O
save	pointer
)	O
;	O
if	O
(	O
(	O
command	pointer
[	O
start	pointer
]	O
==	O
'"'	O
||	O
command	pointer
[	O
end	pointer
]	O
==	O
'\''	O
)	O
&&	O
command	pointer
[	O
end	pointer
]	O
==	O
command	pointer
[	O
start	pointer
]	O
)	O
{	O
if	O
(	O
start	pointer
<	O
end	pointer
)	O
{	O
start	pointer
++	O
;	O
end	pointer
--	O
;	O
}	O
unquote	int
=	O
0	int
;	O
}	O
else	O
unquote	int
=	O
1	int
;	O
n	long
=	O
end	pointer
-	O
start	pointer
+	O
1	int
;	O
(	O
*	O
argv	pointer
)	O
[	O
i	int
]	O
=	O
calloc	function
(	O
n	long
+	O
1	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
if	O
(	O
(	O
*	O
argv	pointer
)	O
[	O
i	int
]	O
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
unquote	int
)	O
argcv_unquote_copy	O
(	O
(	O
*	O
argv	pointer
)	O
[	O
i	int
]	O
,	O
&	O
command	pointer
[	O
start	pointer
]	O
,	O
n	long
)	O
;	O
else	O
memcpy	function
(	O
(	O
*	O
argv	pointer
)	O
[	O
i	int
]	O
,	O
&	O
command	pointer
[	O
start	pointer
]	O
,	O
n	long
)	O
;	O
(	O
*	O
argv	pointer
)	O
[	O
i	int
]	O
[	O
n	long
]	O
=	O
0	int
;	O
}	O
(	O
*	O
argv	pointer
)	O
[	O
i	int
]	O
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
int	O
argcv_get	O
(	O
const	O
char	O
*	O
command	pointer
,	O
const	O
char	O
*	O
delim	pointer
,	O
const	O
char	O
*	O
cmnt	pointer
,	O
int	O
*	O
argc	pointer
,	O
char	O
*	O
*	O
*	O
argv	pointer
)	O
{	O
return	O
argcv_get_n	function
(	O
command	pointer
,	O
strlen	function
(	O
command	pointer
)	O
,	O
delim	pointer
,	O
cmnt	pointer
,	O
argc	pointer
,	O
argv	pointer
)	O
;	O
}	O
int	O
argcv_free	O
(	O
int	O
argc	pointer
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
while	O
(	O
--	O
argc	pointer
>=	O
0	int
)	O
if	O
(	O
argv	pointer
[	O
argc	pointer
]	O
)	O
free	function
(	O
argv	pointer
[	O
argc	pointer
]	O
)	O
;	O
free	function
(	O
argv	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
argcv_string	O
(	O
int	O
argc	pointer
,	O
char	O
*	O
*	O
argv	pointer
,	O
char	O
*	O
*	O
pstring	pointer
)	O
{	O
size_t	long
i	int
,	O
j	int
,	O
len	int
;	O
char	O
*	O
buffer	pointer
;	O
if	O
(	O
pstring	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
buffer	pointer
=	O
malloc	function
(	O
1	int
)	O
;	O
if	O
(	O
buffer	pointer
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
*	O
buffer	pointer
=	O
'\0'	O
;	O
for	O
(	O
len	int
=	O
i	int
=	O
j	int
=	O
0	int
;	O
i	int
<	O
argc	pointer
;	O
i	int
++	O
)	O
{	O
int	O
quote	pointer
;	O
int	O
toklen	int
;	O
toklen	int
=	O
argcv_quoted_length	O
(	O
argv	pointer
[	O
i	int
]	O
,	O
&	O
quote	pointer
)	O
;	O
len	int
+=	O
toklen	int
+	O
2	int
;	O
if	O
(	O
quote	pointer
)	O
len	int
+=	O
2	int
;	O
buffer	pointer
=	O
realloc	function
(	O
buffer	pointer
,	O
len	int
)	O
;	O
if	O
(	O
buffer	pointer
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
buffer	pointer
[	O
j	int
++	O
]	O
=	O
' '	O
;	O
if	O
(	O
quote	pointer
)	O
buffer	pointer
[	O
j	int
++	O
]	O
=	O
'"'	O
;	O
argcv_quote_copy	O
(	O
buffer	pointer
+	O
j	int
,	O
argv	pointer
[	O
i	int
]	O
)	O
;	O
j	int
+=	O
toklen	int
;	O
if	O
(	O
quote	pointer
)	O
buffer	pointer
[	O
j	int
++	O
]	O
=	O
'"'	O
;	O
}	O
for	O
(	O
;	O
j	int
>	O
0	int
&&	O
isspace	function
(	O
buffer	pointer
[	O
j	int
-	O
1	int
]	O
)	O
;	O
j	int
--	O
)	O
;	O
buffer	pointer
[	O
j	int
]	O
=	O
0	int
;	O
if	O
(	O
pstring	pointer
)	O
*	O
pstring	pointer
=	O
buffer	pointer
;	O
return	O
0	int
;	O
}	O
