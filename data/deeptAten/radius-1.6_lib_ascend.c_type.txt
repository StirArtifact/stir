enum	O
ascend_filter_type	enum
{	O
ascend_filter_generic	int
,	O
ascend_filter_ip	int
,	O
ascend_filter_ipx	int
}	O
;	O
enum	O
ascend_filter_cmp_op	enum
{	O
ascend_cmp_none	int
,	O
ascend_cmp_lt	int
,	O
ascend_cmp_eq	int
,	O
ascend_cmp_gt	int
,	O
ascend_cmp_ne	int
}	O
;	O
typedef	O
struct	O
{	O
grad_uint32_t	int
src_ip	int
;	O
grad_uint32_t	int
dst_ip	int
;	O
u_char	char
src_masklen	char
;	O
u_char	char
dst_masklen	char
;	O
u_char	char
proto	int
;	O
u_char	char
established	char
;	O
u_short	short
src_port	short
;	O
u_short	short
dst_port	short
;	O
u_char	char
src_cmp	char
;	O
u_char	char
dst_cmp	char
;	O
}	O
ASCEND_FILTER_IP	struct
;	O
typedef	O
grad_uint32_t	int
IPXADDR	int
;	O
typedef	O
char	O
IPXNODE	array
[	O
IPX_NODE_ADDR_LEN	int
]	O
;	O
typedef	O
u_short	short
IPXSOCKET	short
;	O
typedef	O
struct	O
{	O
IPXADDR	int
src_addr	int
;	O
IPXNODE	array
src_node	array
;	O
IPXSOCKET	short
src_socket	short
;	O
IPXADDR	int
dst_addr	int
;	O
IPXNODE	array
dst_node	array
;	O
IPXSOCKET	short
dst_socket	short
;	O
u_char	char
src_cmp	char
;	O
u_char	char
dst_cmp	char
;	O
}	O
ASCEND_FILTER_IPX	struct
;	O
typedef	O
struct	O
{	O
u_short	short
offset	long
;	O
u_short	short
len	int
;	O
u_short	short
more	short
;	O
u_char	char
mask	array
[	O
ASCEND_MAX_CMP_LENGTH	int
]	O
;	O
u_char	char
value	pointer
[	O
ASCEND_MAX_CMP_LENGTH	int
]	O
;	O
u_char	char
neq	char
;	O
}	O
ASCEND_FILTER_GENERIC	struct
;	O
typedef	O
struct	O
{	O
u_char	char
type	int
;	O
u_char	char
forward	char
;	O
u_char	char
input	char
;	O
u_char	char
unused	char
;	O
union	O
{	O
ASCEND_FILTER_IP	struct
ip	pointer
;	O
ASCEND_FILTER_IPX	struct
ipx	struct
;	O
ASCEND_FILTER_GENERIC	struct
generic	struct
;	O
u_char	char
fill	array
[	O
26	int
]	O
;	O
}	O
v	union
;	O
}	O
ASCEND_FILTER	struct
;	O
struct	O
ascend_parse_buf	struct
{	O
int	O
tokc	int
;	O
char	O
*	O
*	O
tokv	pointer
;	O
int	O
tokn	int
;	O
ASCEND_FILTER	struct
*	O
flt	pointer
;	O
char	O
*	O
*	O
errmsg	pointer
;	O
}	O
;	O
static	O
void	O
ascend_errprint	function
(	O
struct	O
ascend_parse_buf	struct
*	O
pb	pointer
,	O
const	O
char	O
*	O
msg	pointer
,	O
const	O
char	O
*	O
arg	pointer
)	O
{	O
if	O
(	O
arg	pointer
)	O
grad_astrcat	function
(	O
pb	pointer
->	O
errmsg	pointer
,	O
msg	pointer
,	O
": "	pointer
,	O
arg	pointer
)	O
;	O
else	O
grad_astrcat	function
(	O
pb	pointer
->	O
errmsg	pointer
,	O
msg	pointer
)	O
;	O
}	O
static	O
void	O
ascend_errprints	function
(	O
struct	O
ascend_parse_buf	struct
*	O
pb	pointer
,	O
const	O
char	O
*	O
fmt	pointer
,	O
const	O
char	O
*	O
arg	pointer
)	O
{	O
size_t	long
size	int
=	O
strlen	function
(	O
fmt	pointer
)	O
+	O
strlen	function
(	O
arg	pointer
)	O
+	O
1	int
;	O
*	O
pb	pointer
->	O
errmsg	pointer
=	O
malloc	function
(	O
size	int
)	O
;	O
if	O
(	O
*	O
pb	pointer
->	O
errmsg	pointer
)	O
sprintf	function
(	O
*	O
pb	pointer
->	O
errmsg	pointer
,	O
fmt	pointer
,	O
arg	pointer
)	O
;	O
}	O
static	O
char	O
*	O
_get_token	function
(	O
struct	O
ascend_parse_buf	struct
*	O
pb	pointer
,	O
int	O
require	int
)	O
{	O
if	O
(	O
!	O
_moreinput	O
(	O
pb	pointer
)	O
)	O
{	O
if	O
(	O
require	int
)	O
{	O
ascend_errprint	function
(	O
pb	pointer
,	O
_	O
(	O
"Unexpected end of string"	pointer
)	O
,	O
NULL	O
)	O
;	O
return	O
NULL	O
;	O
}	O
return	O
NULL	O
;	O
}	O
return	O
pb	pointer
->	O
tokv	pointer
[	O
pb	pointer
->	O
tokn	int
++	O
]	O
;	O
}	O
static	O
char	O
*	O
_lookahead	function
(	O
struct	O
ascend_parse_buf	struct
*	O
pb	pointer
)	O
{	O
if	O
(	O
_moreinput	O
(	O
pb	pointer
)	O
)	O
return	O
pb	pointer
->	O
tokv	pointer
[	O
pb	pointer
->	O
tokn	int
]	O
;	O
return	O
NULL	O
;	O
}	O
static	O
int	O
_get_type	function
(	O
struct	O
ascend_parse_buf	struct
*	O
pb	pointer
)	O
{	O
char	O
*	O
tok	int
=	O
_get_token	function
(	O
pb	pointer
,	O
1	int
)	O
;	O
if	O
(	O
!	O
tok	int
)	O
return	O
1	int
;	O
if	O
(	O
strcmp	function
(	O
tok	int
,	O
"ip"	pointer
)	O
==	O
0	int
)	O
pb	pointer
->	O
flt	pointer
->	O
type	int
=	O
ascend_filter_ip	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
tok	int
,	O
"ipx"	pointer
)	O
==	O
0	int
)	O
pb	pointer
->	O
flt	pointer
->	O
type	int
=	O
ascend_filter_ipx	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
tok	int
,	O
"generic"	pointer
)	O
==	O
0	int
)	O
pb	pointer
->	O
flt	pointer
->	O
type	int
=	O
ascend_filter_generic	int
;	O
else	O
{	O
ascend_errprint	function
(	O
pb	pointer
,	O
_	O
(	O
"Unknown filter type"	pointer
)	O
,	O
tok	int
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_get_dir	function
(	O
struct	O
ascend_parse_buf	struct
*	O
pb	pointer
)	O
{	O
char	O
*	O
tok	int
;	O
if	O
(	O
(	O
tok	int
=	O
_get_token	function
(	O
pb	pointer
,	O
1	int
)	O
)	O
==	O
NULL	O
)	O
return	O
1	int
;	O
if	O
(	O
strcmp	function
(	O
tok	int
,	O
"in"	pointer
)	O
==	O
0	int
)	O
pb	pointer
->	O
flt	pointer
->	O
input	char
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
tok	int
,	O
"out"	pointer
)	O
==	O
0	int
)	O
pb	pointer
->	O
flt	pointer
->	O
input	char
=	O
0	int
;	O
else	O
{	O
ascend_errprint	function
(	O
pb	pointer
,	O
_	O
(	O
"Invalid direction"	pointer
)	O
,	O
NULL	O
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_get_action	function
(	O
struct	O
ascend_parse_buf	struct
*	O
pb	pointer
)	O
{	O
char	O
*	O
tok	int
;	O
if	O
(	O
(	O
tok	int
=	O
_get_token	function
(	O
pb	pointer
,	O
1	int
)	O
)	O
==	O
NULL	O
)	O
return	O
1	int
;	O
if	O
(	O
strcmp	function
(	O
tok	int
,	O
"forward"	pointer
)	O
==	O
0	int
)	O
pb	pointer
->	O
flt	pointer
->	O
forward	char
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
tok	int
,	O
"drop"	pointer
)	O
==	O
0	int
)	O
pb	pointer
->	O
flt	pointer
->	O
forward	char
=	O
0	int
;	O
else	O
{	O
ascend_errprint	function
(	O
pb	pointer
,	O
_	O
(	O
"Unknown action"	pointer
)	O
,	O
tok	int
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_get_hex_string	function
(	O
struct	O
ascend_parse_buf	struct
*	O
pb	pointer
,	O
u_char	char
*	O
buf	pointer
)	O
{	O
u_char	char
tmp	array
[	O
2	int
*	O
ASCEND_MAX_CMP_LENGTH	int
]	O
,	O
*	O
p	pointer
;	O
char	O
*	O
tok	int
=	O
_get_token	function
(	O
pb	pointer
,	O
1	int
)	O
;	O
int	O
len	int
,	O
rc	int
,	O
i	int
;	O
if	O
(	O
!	O
tok	int
)	O
return	O
-	O
1	int
;	O
len	int
=	O
strlen	function
(	O
tok	int
)	O
;	O
if	O
(	O
len	int
>	O
2	int
*	O
ASCEND_MAX_CMP_LENGTH	int
)	O
{	O
ascend_errprint	function
(	O
pb	pointer
,	O
_	O
(	O
"Octet string too long"	pointer
)	O
,	O
NULL	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
rc	int
=	O
len	int
/	O
2	int
;	O
if	O
(	O
len	int
%	O
2	int
)	O
rc	int
++	O
;	O
memset	function
(	O
tmp	array
,	O
0	int
,	O
sizeof	O
tmp	array
)	O
;	O
for	O
(	O
p	pointer
=	O
tmp	array
;	O
len	int
;	O
len	int
--	O
,	O
p	pointer
++	O
,	O
tok	int
++	O
)	O
{	O
if	O
(	O
*	O
tok	int
>=	O
0	int
&&	O
*	O
tok	int
<=	O
9	int
)	O
*	O
p	pointer
=	O
*	O
tok	int
-	O
'0'	O
;	O
else	O
if	O
(	O
isxdigit	function
(	O
*	O
tok	int
)	O
)	O
{	O
if	O
(	O
*	O
tok	int
>	O
'Z'	O
)	O
*	O
p	pointer
=	O
*	O
tok	int
-	O
'a'	O
+	O
10	int
;	O
else	O
*	O
p	pointer
=	O
*	O
tok	int
-	O
'A'	O
+	O
10	int
;	O
}	O
else	O
{	O
ascend_errprints	function
(	O
pb	pointer
,	O
_	O
(	O
"Invalid hex character (near %s)"	pointer
)	O
,	O
tok	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
2	int
*	O
ASCEND_MAX_CMP_LENGTH	int
;	O
i	int
++	O
)	O
*	O
buf	pointer
++	O
=	O
(	O
tmp	array
[	O
i	int
]	O
<<	O
4	int
)	O
|	O
tmp	array
[	O
i	int
+	O
1	int
]	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_ascend_parse_generic	function
(	O
struct	O
ascend_parse_buf	struct
*	O
pb	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
int	O
num	int
;	O
char	O
*	O
tok	int
=	O
_get_token	function
(	O
pb	pointer
,	O
1	int
)	O
;	O
int	O
len	int
;	O
if	O
(	O
!	O
tok	int
)	O
return	O
1	int
;	O
num	int
=	O
strtoul	function
(	O
tok	int
,	O
&	O
p	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
{	O
ascend_errprint	function
(	O
pb	pointer
,	O
_	O
(	O
"Invalid offset"	pointer
)	O
,	O
tok	int
)	O
;	O
return	O
1	int
;	O
}	O
pb	pointer
->	O
flt	pointer
->	O
v	union
.	O
generic	struct
.	O
offset	long
=	O
ntohs	function
(	O
num	int
)	O
;	O
if	O
(	O
(	O
len	int
=	O
_get_hex_string	function
(	O
pb	pointer
,	O
pb	pointer
->	O
flt	pointer
->	O
v	union
.	O
generic	struct
.	O
mask	array
)	O
)	O
<	O
0	int
)	O
return	O
1	int
;	O
pb	pointer
->	O
flt	pointer
->	O
v	union
.	O
generic	struct
.	O
len	int
=	O
htons	function
(	O
len	int
)	O
;	O
tok	int
=	O
_lookahead	function
(	O
pb	pointer
)	O
;	O
if	O
(	O
!	O
tok	int
)	O
return	O
1	int
;	O
if	O
(	O
strcmp	function
(	O
tok	int
,	O
"=="	pointer
)	O
==	O
0	int
)	O
{	O
pb	pointer
->	O
flt	pointer
->	O
v	union
.	O
generic	struct
.	O
neq	char
=	O
0	int
;	O
_get_token	function
(	O
pb	pointer
,	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
tok	int
,	O
"!="	pointer
)	O
==	O
0	int
)	O
{	O
pb	pointer
->	O
flt	pointer
->	O
v	union
.	O
generic	struct
.	O
neq	char
=	O
1	int
;	O
_get_token	function
(	O
pb	pointer
,	O
1	int
)	O
;	O
}	O
if	O
(	O
(	O
num	int
=	O
_get_hex_string	function
(	O
pb	pointer
,	O
pb	pointer
->	O
flt	pointer
->	O
v	union
.	O
generic	struct
.	O
value	pointer
)	O
)	O
<	O
0	int
)	O
return	O
1	int
;	O
if	O
(	O
num	int
!=	O
len	int
)	O
{	O
ascend_errprint	function
(	O
pb	pointer
,	O
_	O
(	O
"Value and mask are not of same size"	pointer
)	O
,	O
NULL	O
)	O
;	O
return	O
1	int
;	O
}	O
tok	int
=	O
_get_token	function
(	O
pb	pointer
,	O
0	int
)	O
;	O
if	O
(	O
!	O
tok	int
)	O
return	O
0	int
;	O
if	O
(	O
strcmp	function
(	O
tok	int
,	O
"more"	pointer
)	O
==	O
0	int
)	O
pb	pointer
->	O
flt	pointer
->	O
v	union
.	O
generic	struct
.	O
more	short
=	O
1	int
;	O
else	O
{	O
ascend_errprints	function
(	O
pb	pointer
,	O
_	O
(	O
"Expected `more', but found `%s'"	pointer
)	O
,	O
tok	int
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_get_protocol	function
(	O
struct	O
ascend_parse_buf	struct
*	O
pb	pointer
)	O
{	O
char	O
*	O
tok	int
=	O
_get_token	function
(	O
pb	pointer
,	O
1	int
)	O
;	O
char	O
*	O
p	pointer
;	O
int	O
num	int
;	O
num	int
=	O
strtoul	function
(	O
tok	int
,	O
&	O
p	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
p	pointer
==	O
0	int
)	O
pb	pointer
->	O
flt	pointer
->	O
v	union
.	O
ip	pointer
.	O
proto	int
=	O
num	int
;	O
else	O
{	O
struct	O
protoent	struct
*	O
p	pointer
=	O
getprotobyname	function
(	O
tok	int
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
ascend_errprint	function
(	O
pb	pointer
,	O
_	O
(	O
"Unknown protocol"	pointer
)	O
,	O
tok	int
)	O
;	O
return	O
1	int
;	O
}	O
pb	pointer
->	O
flt	pointer
->	O
v	union
.	O
ip	pointer
.	O
proto	int
=	O
p	pointer
->	O
p_proto	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_get_direction_type	function
(	O
struct	O
ascend_parse_buf	struct
*	O
pb	pointer
,	O
char	O
*	O
suffix	pointer
,	O
int	O
lookahead	int
)	O
{	O
char	O
*	O
tok	int
=	O
lookahead	int
?	O
_lookahead	function
(	O
pb	pointer
)	O
:	O
_get_token	function
(	O
pb	pointer
,	O
1	int
)	O
;	O
if	O
(	O
!	O
tok	int
&&	O
lookahead	int
)	O
return	O
ASCEND_DIR_NONE	O
;	O
if	O
(	O
tok	int
&&	O
strlen	function
(	O
tok	int
)	O
>	O
3	int
&&	O
strcmp	function
(	O
tok	int
+	O
3	int
,	O
suffix	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
strncmp	function
(	O
tok	int
,	O
"dst"	pointer
,	O
3	int
)	O
==	O
0	int
)	O
return	O
ASCEND_DIR_DST	int
;	O
else	O
if	O
(	O
strncmp	function
(	O
tok	int
,	O
"src"	pointer
,	O
3	int
)	O
==	O
0	int
)	O
return	O
ASCEND_DIR_SRC	int
;	O
}	O
if	O
(	O
!	O
lookahead	int
)	O
ascend_errprints	function
(	O
pb	pointer
,	O
_	O
(	O
"Expected `{src|dst}port', but found `%s'"	pointer
)	O
,	O
tok	int
)	O
;	O
return	O
ASCEND_DIR_NONE	O
;	O
}	O
static	O
int	O
_get_ip	function
(	O
struct	O
ascend_parse_buf	struct
*	O
pb	pointer
)	O
{	O
int	O
dir	pointer
=	O
_get_direction_type	function
(	O
pb	pointer
,	O
"ip"	pointer
,	O
0	int
)	O
;	O
char	O
*	O
tok	int
;	O
grad_uint32_t	int
ip	pointer
,	O
mask	array
;	O
if	O
(	O
dir	pointer
==	O
ASCEND_DIR_NONE	O
)	O
return	O
ASCEND_DIR_NONE	O
;	O
tok	int
=	O
_get_token	function
(	O
pb	pointer
,	O
1	int
)	O
;	O
if	O
(	O
!	O
tok	int
)	O
return	O
ASCEND_DIR_NONE	O
;	O
ip	pointer
=	O
grad_ip_strtoip	function
(	O
tok	int
)	O
;	O
if	O
(	O
_moreinput	O
(	O
pb	pointer
)	O
&&	O
_lookahead	function
(	O
pb	pointer
)	O
[	O
0	int
]	O
==	O
'/'	O
)	O
{	O
char	O
*	O
p	pointer
;	O
_get_token	function
(	O
pb	pointer
,	O
1	int
)	O
;	O
tok	int
=	O
_get_token	function
(	O
pb	pointer
,	O
1	int
)	O
;	O
if	O
(	O
!	O
tok	int
)	O
return	O
ASCEND_DIR_NONE	O
;	O
mask	array
=	O
strtoul	function
(	O
tok	int
,	O
&	O
p	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
p	pointer
||	O
mask	array
>	O
32	int
)	O
{	O
ascend_errprint	function
(	O
pb	pointer
,	O
_	O
(	O
"Invalid netmask length"	pointer
)	O
,	O
tok	int
)	O
;	O
return	O
ASCEND_DIR_NONE	O
;	O
}	O
}	O
else	O
mask	array
=	O
32	int
;	O
ip	pointer
=	O
htonl	function
(	O
ip	pointer
)	O
;	O
switch	O
(	O
dir	pointer
)	O
{	O
case	O
ASCEND_DIR_SRC	int
:	O
pb	pointer
->	O
flt	pointer
->	O
v	union
.	O
ip	pointer
.	O
src_ip	int
=	O
ip	pointer
;	O
pb	pointer
->	O
flt	pointer
->	O
v	union
.	O
ip	pointer
.	O
src_masklen	char
=	O
mask	array
;	O
break	O
;	O
case	O
ASCEND_DIR_DST	int
:	O
pb	pointer
->	O
flt	pointer
->	O
v	union
.	O
ip	pointer
.	O
dst_ip	int
=	O
ip	pointer
;	O
pb	pointer
->	O
flt	pointer
->	O
v	union
.	O
ip	pointer
.	O
dst_masklen	char
=	O
mask	array
;	O
break	O
;	O
}	O
return	O
dir	pointer
;	O
}	O
static	O
int	O
_ascend_parse_ip_clause	function
(	O
struct	O
ascend_parse_buf	struct
*	O
pb	pointer
)	O
{	O
int	O
n	long
;	O
if	O
(	O
_get_direction_type	function
(	O
pb	pointer
,	O
"ip"	pointer
,	O
1	int
)	O
==	O
ASCEND_DIR_NONE	O
)	O
return	O
0	int
;	O
n	long
=	O
_get_ip	function
(	O
pb	pointer
)	O
;	O
if	O
(	O
n	long
==	O
ASCEND_DIR_NONE	O
)	O
return	O
1	int
;	O
if	O
(	O
_get_direction_type	function
(	O
pb	pointer
,	O
"ip"	pointer
,	O
1	int
)	O
!=	O
ASCEND_DIR_NONE	O
)	O
{	O
int	O
n1	int
=	O
_get_ip	function
(	O
pb	pointer
)	O
;	O
if	O
(	O
n1	int
==	O
n	long
)	O
{	O
ascend_errprint	function
(	O
pb	pointer
,	O
_	O
(	O
"Duplicate IP specification"	pointer
)	O
,	O
NULL	O
)	O
;	O
return	O
1	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_get_op	function
(	O
struct	O
ascend_parse_buf	struct
*	O
pb	pointer
)	O
{	O
char	O
*	O
s	pointer
=	O
_get_token	function
(	O
pb	pointer
,	O
1	int
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
return	O
ascend_cmp_none	int
;	O
switch	O
(	O
s	pointer
[	O
0	int
]	O
)	O
{	O
case	O
'>'	O
:	O
return	O
ascend_cmp_gt	int
;	O
case	O
'<'	O
:	O
return	O
ascend_cmp_lt	int
;	O
case	O
'='	O
:	O
return	O
ascend_cmp_eq	int
;	O
case	O
'!'	O
:	O
if	O
(	O
s	pointer
[	O
1	int
]	O
==	O
'='	O
)	O
return	O
ascend_cmp_ne	int
;	O
}	O
ascend_errprint	function
(	O
pb	pointer
,	O
_	O
(	O
"Invalid operation"	pointer
)	O
,	O
s	pointer
)	O
;	O
return	O
ascend_cmp_none	int
;	O
}	O
static	O
int	O
_get_port	function
(	O
struct	O
ascend_parse_buf	struct
*	O
pb	pointer
)	O
{	O
int	O
dir	pointer
=	O
_get_direction_type	function
(	O
pb	pointer
,	O
"port"	pointer
,	O
0	int
)	O
;	O
char	O
*	O
tok	int
;	O
char	O
*	O
p	pointer
;	O
int	O
num	int
;	O
int	O
op	enum
;	O
if	O
(	O
dir	pointer
==	O
ASCEND_DIR_NONE	O
)	O
return	O
ASCEND_DIR_NONE	O
;	O
if	O
(	O
(	O
op	enum
=	O
_get_op	function
(	O
pb	pointer
)	O
)	O
==	O
ascend_cmp_none	int
)	O
return	O
ASCEND_DIR_NONE	O
;	O
tok	int
=	O
_get_token	function
(	O
pb	pointer
,	O
1	int
)	O
;	O
if	O
(	O
!	O
tok	int
)	O
return	O
ASCEND_DIR_NONE	O
;	O
num	int
=	O
strtoul	function
(	O
tok	int
,	O
&	O
p	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
p	pointer
==	O
0	int
)	O
num	int
=	O
htons	function
(	O
num	int
)	O
;	O
else	O
{	O
struct	O
servent	struct
*	O
sp	pointer
;	O
struct	O
protoent	struct
*	O
pp	pointer
=	O
getprotobynumber	function
(	O
pb	pointer
->	O
flt	pointer
->	O
v	union
.	O
ip	pointer
.	O
proto	int
)	O
;	O
if	O
(	O
!	O
pp	pointer
)	O
{	O
ascend_errprint	function
(	O
pb	pointer
,	O
_	O
(	O
"Cannot map back the protocol number"	pointer
)	O
,	O
NULL	O
)	O
;	O
return	O
ASCEND_DIR_NONE	O
;	O
}	O
sp	pointer
=	O
getservbyname	function
(	O
tok	int
,	O
pp	pointer
->	O
p_name	pointer
)	O
;	O
if	O
(	O
!	O
sp	pointer
)	O
{	O
ascend_errprint	function
(	O
pb	pointer
,	O
_	O
(	O
"Unknown service"	pointer
)	O
,	O
tok	int
)	O
;	O
return	O
1	int
;	O
}	O
num	int
=	O
sp	pointer
->	O
s_port	int
;	O
}	O
switch	O
(	O
dir	pointer
)	O
{	O
case	O
ASCEND_DIR_SRC	int
:	O
pb	pointer
->	O
flt	pointer
->	O
v	union
.	O
ip	pointer
.	O
src_port	short
=	O
num	int
;	O
pb	pointer
->	O
flt	pointer
->	O
v	union
.	O
ip	pointer
.	O
src_cmp	char
=	O
op	enum
;	O
break	O
;	O
case	O
ASCEND_DIR_DST	int
:	O
pb	pointer
->	O
flt	pointer
->	O
v	union
.	O
ip	pointer
.	O
dst_port	short
=	O
num	int
;	O
pb	pointer
->	O
flt	pointer
->	O
v	union
.	O
ip	pointer
.	O
dst_cmp	char
=	O
op	enum
;	O
break	O
;	O
}	O
return	O
dir	pointer
;	O
}	O
static	O
int	O
_ascend_parse_port_clause	function
(	O
struct	O
ascend_parse_buf	struct
*	O
pb	pointer
)	O
{	O
int	O
n	long
;	O
if	O
(	O
_get_direction_type	function
(	O
pb	pointer
,	O
"port"	pointer
,	O
1	int
)	O
==	O
ASCEND_DIR_NONE	O
)	O
return	O
0	int
;	O
n	long
=	O
_get_port	function
(	O
pb	pointer
)	O
;	O
if	O
(	O
n	long
==	O
ASCEND_DIR_NONE	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
_get_direction_type	function
(	O
pb	pointer
,	O
"port"	pointer
,	O
1	int
)	O
!=	O
ASCEND_DIR_NONE	O
)	O
{	O
int	O
n1	int
=	O
_get_port	function
(	O
pb	pointer
)	O
;	O
if	O
(	O
n1	int
==	O
ASCEND_DIR_NONE	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
n1	int
==	O
n	long
)	O
{	O
ascend_errprint	function
(	O
pb	pointer
,	O
_	O
(	O
"Duplicate port specification"	pointer
)	O
,	O
NULL	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
_ascend_parse_ip	function
(	O
struct	O
ascend_parse_buf	struct
*	O
pb	pointer
)	O
{	O
if	O
(	O
!	O
_moreinput	O
(	O
pb	pointer
)	O
)	O
return	O
0	int
;	O
if	O
(	O
_ascend_parse_ip_clause	function
(	O
pb	pointer
)	O
)	O
return	O
1	int
;	O
if	O
(	O
_moreinput	O
(	O
pb	pointer
)	O
)	O
{	O
if	O
(	O
_get_protocol	function
(	O
pb	pointer
)	O
)	O
return	O
1	int
;	O
if	O
(	O
_moreinput	O
(	O
pb	pointer
)	O
)	O
{	O
char	O
*	O
tok	int
;	O
int	O
have_port	int
=	O
_ascend_parse_port_clause	function
(	O
pb	pointer
)	O
;	O
if	O
(	O
have_port	int
==	O
-	O
1	int
)	O
return	O
1	int
;	O
tok	int
=	O
_get_token	function
(	O
pb	pointer
,	O
0	int
)	O
;	O
if	O
(	O
!	O
tok	int
)	O
return	O
0	int
;	O
if	O
(	O
strcmp	function
(	O
tok	int
,	O
"est"	pointer
)	O
==	O
0	int
)	O
pb	pointer
->	O
flt	pointer
->	O
v	union
.	O
ip	pointer
.	O
established	char
=	O
1	int
;	O
else	O
{	O
ascend_errprints	function
(	O
pb	pointer
,	O
have_port	int
?	O
_	O
(	O
"Expected `est' but found `%s'"	pointer
)	O
:	O
_	O
(	O
"Expected `{src|dst}port' or `est', but found `%s'"	pointer
)	O
,	O
tok	int
)	O
;	O
return	O
1	int
;	O
}	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_ascend_parse_ipx	function
(	O
struct	O
ascend_parse_buf	struct
*	O
pb	pointer
)	O
{	O
ascend_errprint	function
(	O
pb	pointer
,	O
"IPX filters are not yet supported"	pointer
,	O
NULL	O
)	O
;	O
return	O
1	int
;	O
}	O
static	O
int	O
_ascend_parse	function
(	O
struct	O
ascend_parse_buf	struct
*	O
pb	pointer
)	O
{	O
memset	function
(	O
pb	pointer
->	O
flt	pointer
,	O
0	int
,	O
sizeof	O
(	O
pb	pointer
->	O
flt	pointer
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
_get_type	function
(	O
pb	pointer
)	O
||	O
_get_dir	function
(	O
pb	pointer
)	O
||	O
_get_action	function
(	O
pb	pointer
)	O
)	O
return	O
1	int
;	O
switch	O
(	O
pb	pointer
->	O
flt	pointer
->	O
type	int
)	O
{	O
case	O
ascend_filter_generic	int
:	O
return	O
_ascend_parse_generic	function
(	O
pb	pointer
)	O
;	O
case	O
ascend_filter_ip	int
:	O
return	O
_ascend_parse_ip	function
(	O
pb	pointer
)	O
;	O
case	O
ascend_filter_ipx	int
:	O
return	O
_ascend_parse_ipx	function
(	O
pb	pointer
)	O
;	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
_ascend_parse_filter	function
(	O
const	O
char	O
*	O
input	char
,	O
ASCEND_FILTER	struct
*	O
flt	pointer
,	O
char	O
*	O
*	O
errp	pointer
)	O
{	O
struct	O
ascend_parse_buf	struct
pb	pointer
;	O
int	O
rc	int
;	O
*	O
errp	pointer
=	O
NULL	O
;	O
if	O
(	O
grad_argcv_get	function
(	O
input	char
,	O
"/"	pointer
,	O
NULL	O
,	O
&	O
pb	pointer
.	O
tokc	int
,	O
&	O
pb	pointer
.	O
tokv	pointer
)	O
)	O
{	O
grad_argcv_free	function
(	O
pb	pointer
.	O
tokc	int
,	O
pb	pointer
.	O
tokv	pointer
)	O
;	O
ascend_errprint	function
(	O
&	O
pb	pointer
,	O
_	O
(	O
"Failed to tokenize"	pointer
)	O
,	O
NULL	O
)	O
;	O
return	O
1	int
;	O
}	O
pb	pointer
.	O
tokn	int
=	O
0	int
;	O
pb	pointer
.	O
flt	pointer
=	O
flt	pointer
;	O
pb	pointer
.	O
errmsg	pointer
=	O
errp	pointer
;	O
rc	int
=	O
_ascend_parse	function
(	O
&	O
pb	pointer
)	O
;	O
grad_argcv_free	function
(	O
pb	pointer
.	O
tokc	int
,	O
pb	pointer
.	O
tokv	pointer
)	O
;	O
if	O
(	O
rc	int
&&	O
!	O
*	O
errp	pointer
)	O
ascend_errprint	function
(	O
&	O
pb	pointer
,	O
_	O
(	O
"Malformed attribute value"	pointer
)	O
,	O
NULL	O
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
grad_ascend_parse_filter	function
(	O
grad_avp_t	struct
*	O
pair	pointer
,	O
char	O
*	O
*	O
errp	pointer
)	O
{	O
ASCEND_FILTER	struct
flt	pointer
;	O
if	O
(	O
_ascend_parse_filter	function
(	O
pair	pointer
->	O
avp_strvalue	O
,	O
&	O
flt	pointer
,	O
errp	pointer
)	O
)	O
return	O
1	int
;	O
grad_free	function
(	O
pair	pointer
->	O
avp_strvalue	O
)	O
;	O
pair	pointer
->	O
avp_strlength	O
=	O
sizeof	O
(	O
flt	pointer
)	O
;	O
pair	pointer
->	O
avp_strvalue	O
=	O
grad_emalloc	function
(	O
pair	pointer
->	O
avp_strlength	O
)	O
;	O
memcpy	function
(	O
pair	pointer
->	O
avp_strvalue	O
,	O
&	O
flt	pointer
,	O
sizeof	O
(	O
flt	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
