int	O
mu_imap_fetch	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
int	O
uid	int
,	O
mu_msgset_t	pointer
msgset	pointer
,	O
const	O
char	O
*	O
items	pointer
)	O
{	O
char	O
const	O
*	O
argv	pointer
[	O
3	int
]	O
;	O
int	O
i	int
;	O
static	O
struct	O
imap_command	struct
com	struct
;	O
i	int
=	O
0	int
;	O
if	O
(	O
uid	int
)	O
argv	pointer
[	O
i	int
++	O
]	O
=	O
"UID"	pointer
;	O
argv	pointer
[	O
i	int
++	O
]	O
=	O
"FETCH"	pointer
;	O
argv	pointer
[	O
i	int
++	O
]	O
=	O
"\\"	pointer
;	O
com	struct
.	O
session_state	enum
=	O
MU_IMAP_SESSION_SELECTED	int
;	O
com	struct
.	O
capa	pointer
=	O
NULL	O
;	O
com	struct
.	O
rx_state	int
=	O
MU_IMAP_CLIENT_FETCH_RX	int
;	O
com	struct
.	O
argc	int
=	O
i	int
;	O
com	struct
.	O
argv	pointer
=	O
argv	pointer
;	O
com	struct
.	O
extra	pointer
=	O
items	pointer
;	O
com	struct
.	O
msgset	pointer
=	O
msgset	pointer
;	O
com	struct
.	O
tagged_handler	pointer
=	O
NULL	O
;	O
com	struct
.	O
untagged_handler	pointer
=	O
NULL	O
;	O
return	O
mu_imap_gencom	function
(	O
imap	pointer
,	O
&	O
com	struct
)	O
;	O
}	O
static	O
void	O
_free_fetch_response	function
(	O
void	O
*	O
ptr	pointer
)	O
{	O
union	O
mu_imap_fetch_response	union
*	O
resp	pointer
=	O
ptr	pointer
;	O
switch	O
(	O
resp	pointer
->	O
type	int
)	O
{	O
case	O
MU_IMAP_FETCH_BODY	int
:	O
free	function
(	O
resp	pointer
->	O
body	struct
.	O
partv	pointer
)	O
;	O
free	function
(	O
resp	pointer
->	O
body	struct
.	O
section	pointer
)	O
;	O
mu_list_destroy	function
(	O
&	O
resp	pointer
->	O
body	struct
.	O
fields	pointer
)	O
;	O
free	function
(	O
resp	pointer
->	O
body	struct
.	O
text	struct
)	O
;	O
break	O
;	O
case	O
MU_IMAP_FETCH_BODYSTRUCTURE	int
:	O
mu_bodystructure_free	function
(	O
resp	pointer
->	O
bodystructure	struct
.	O
bs	pointer
)	O
;	O
break	O
;	O
case	O
MU_IMAP_FETCH_ENVELOPE	int
:	O
mu_message_imapenvelope_free	function
(	O
resp	pointer
->	O
envelope	struct
.	O
imapenvelope	pointer
)	O
;	O
break	O
;	O
case	O
MU_IMAP_FETCH_FLAGS	int
:	O
case	O
MU_IMAP_FETCH_INTERNALDATE	int
:	O
case	O
MU_IMAP_FETCH_RFC822_SIZE	int
:	O
case	O
MU_IMAP_FETCH_UID	int
:	O
break	O
;	O
}	O
free	function
(	O
resp	pointer
)	O
;	O
}	O
static	O
int	O
alloc_response	function
(	O
union	O
mu_imap_fetch_response	union
*	O
*	O
resp	pointer
,	O
int	O
type	int
)	O
{	O
static	O
size_t	long
sizetab	array
[	O
]	O
=	O
{	O
sizeof	O
(	O
struct	O
mu_imap_fetch_body	struct
)	O
,	O
sizeof	O
(	O
struct	O
mu_imap_fetch_bodystructure	struct
)	O
,	O
sizeof	O
(	O
struct	O
mu_imap_fetch_envelope	struct
)	O
,	O
sizeof	O
(	O
struct	O
mu_imap_fetch_flags	struct
)	O
,	O
sizeof	O
(	O
struct	O
mu_imap_fetch_internaldate	struct
)	O
,	O
sizeof	O
(	O
struct	O
mu_imap_fetch_rfc822_size	struct
)	O
,	O
sizeof	O
(	O
struct	O
mu_imap_fetch_uid	struct
)	O
}	O
;	O
union	O
mu_imap_fetch_response	union
*	O
p	pointer
;	O
if	O
(	O
type	int
<	O
0	int
||	O
type	int
>=	O
MU_ARRAY_SIZE	O
(	O
sizetab	array
)	O
)	O
return	O
EINVAL	int
;	O
p	pointer
=	O
calloc	function
(	O
1	int
,	O
sizetab	array
[	O
type	int
]	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
ENOMEM	int
;	O
p	pointer
->	O
type	int
=	O
type	int
;	O
*	O
resp	pointer
=	O
p	pointer
;	O
return	O
0	int
;	O
}	O
enum	O
parse_response_state	enum
{	O
resp_kw	int
,	O
resp_val	int
,	O
resp_body	int
,	O
resp_body_section	int
,	O
resp_skip	int
,	O
resp_body_hlist	int
,	O
resp_body_end	int
}	O
;	O
struct	O
parse_response_env	struct
;	O
typedef	O
int	O
(	O
*	O
mapper_fn	pointer
)	O
(	O
union	O
mu_imap_fetch_response	union
*	O
resp	pointer
,	O
struct	O
imap_list_element	struct
*	O
elt	pointer
,	O
struct	O
parse_response_env	struct
*	O
env	pointer
)	O
;	O
struct	O
parse_response_env	struct
{	O
mu_list_t	pointer
result	pointer
;	O
struct	O
imap_list_element	struct
*	O
elt	pointer
;	O
enum	O
parse_response_state	enum
state	pointer
;	O
union	O
mu_imap_fetch_response	union
*	O
resp	pointer
;	O
mapper_fn	pointer
mapper	pointer
;	O
const	O
char	O
*	O
section	pointer
;	O
mu_list_t	pointer
hlist	pointer
;	O
int	O
status	int
;	O
}	O
;	O
static	O
int	O
_uid_mapper	function
(	O
union	O
mu_imap_fetch_response	union
*	O
resp	pointer
,	O
struct	O
imap_list_element	struct
*	O
elt	pointer
,	O
struct	O
parse_response_env	struct
*	O
parse_env	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
size_t	long
uid	int
;	O
if	O
(	O
elt	pointer
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
MU_ERR_FAILURE	O
;	O
uid	int
=	O
strtoul	function
(	O
elt	pointer
->	O
v	array
.	O
string	pointer
,	O
&	O
p	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
return	O
MU_ERR_FAILURE	O
;	O
resp	pointer
->	O
uid	int
.	O
uid	int
=	O
uid	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_size_mapper	function
(	O
union	O
mu_imap_fetch_response	union
*	O
resp	pointer
,	O
struct	O
imap_list_element	struct
*	O
elt	pointer
,	O
struct	O
parse_response_env	struct
*	O
parse_env	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
size_t	long
size	long
;	O
if	O
(	O
elt	pointer
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
MU_ERR_FAILURE	O
;	O
size	long
=	O
strtoul	function
(	O
elt	pointer
->	O
v	array
.	O
string	pointer
,	O
&	O
p	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
return	O
MU_ERR_FAILURE	O
;	O
resp	pointer
->	O
rfc822_size	struct
.	O
size	long
=	O
size	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_body_mapper	function
(	O
union	O
mu_imap_fetch_response	union
*	O
resp	pointer
,	O
struct	O
imap_list_element	struct
*	O
elt	pointer
,	O
struct	O
parse_response_env	struct
*	O
parse_env	pointer
)	O
{	O
const	O
char	O
*	O
section	pointer
,	O
*	O
p	pointer
;	O
size_t	long
partc	long
=	O
0	int
;	O
size_t	long
*	O
partv	pointer
=	O
NULL	O
;	O
if	O
(	O
elt	pointer
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
MU_ERR_FAILURE	O
;	O
section	pointer
=	O
parse_env	pointer
->	O
section	pointer
;	O
if	O
(	O
section	pointer
)	O
{	O
p	pointer
=	O
section	pointer
;	O
while	O
(	O
mu_isdigit	O
(	O
*	O
p	pointer
)	O
)	O
{	O
partc	long
++	O
;	O
p	pointer
=	O
strchr	function
(	O
p	pointer
,	O
'.'	O
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
p	pointer
++	O
;	O
continue	O
;	O
}	O
break	O
;	O
}	O
}	O
else	O
p	pointer
=	O
NULL	O
;	O
if	O
(	O
p	pointer
)	O
{	O
resp	pointer
->	O
body	struct
.	O
section	pointer
=	O
strdup	function
(	O
p	pointer
)	O
;	O
if	O
(	O
!	O
resp	pointer
->	O
body	struct
.	O
section	pointer
)	O
{	O
free	function
(	O
resp	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
}	O
if	O
(	O
partc	long
)	O
{	O
size_t	long
i	int
;	O
partv	pointer
=	O
calloc	function
(	O
partc	long
,	O
sizeof	O
(	O
partv	pointer
[	O
0	int
]	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
,	O
p	pointer
=	O
section	pointer
;	O
i	int
<	O
partc	long
;	O
i	int
++	O
)	O
{	O
char	O
*	O
q	pointer
;	O
partv	pointer
[	O
i	int
]	O
=	O
strtoul	function
(	O
p	pointer
,	O
&	O
q	pointer
,	O
10	int
)	O
;	O
p	pointer
=	O
q	pointer
+	O
1	int
;	O
}	O
}	O
resp	pointer
->	O
body	struct
.	O
partc	long
=	O
partc	long
;	O
resp	pointer
->	O
body	struct
.	O
partv	pointer
=	O
partv	pointer
;	O
resp	pointer
->	O
body	struct
.	O
fields	pointer
=	O
parse_env	pointer
->	O
hlist	pointer
;	O
parse_env	pointer
->	O
hlist	pointer
=	O
NULL	O
;	O
resp	pointer
->	O
body	struct
.	O
text	struct
=	O
strdup	function
(	O
elt	pointer
->	O
v	array
.	O
string	pointer
)	O
;	O
if	O
(	O
!	O
resp	pointer
->	O
body	struct
.	O
text	struct
)	O
{	O
free	function
(	O
resp	pointer
->	O
body	struct
.	O
section	pointer
)	O
;	O
free	function
(	O
resp	pointer
->	O
body	struct
.	O
partv	pointer
)	O
;	O
free	function
(	O
resp	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_rfc822_mapper	function
(	O
union	O
mu_imap_fetch_response	union
*	O
resp	pointer
,	O
struct	O
imap_list_element	struct
*	O
elt	pointer
,	O
struct	O
parse_response_env	struct
*	O
parse_env	pointer
)	O
{	O
if	O
(	O
elt	pointer
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
MU_ERR_FAILURE	O
;	O
resp	pointer
->	O
body	struct
.	O
partc	long
=	O
0	int
;	O
resp	pointer
->	O
body	struct
.	O
partv	pointer
=	O
NULL	O
;	O
resp	pointer
->	O
body	struct
.	O
section	pointer
=	O
strdup	function
(	O
parse_env	pointer
->	O
section	pointer
)	O
;	O
if	O
(	O
!	O
resp	pointer
->	O
body	struct
.	O
section	pointer
)	O
{	O
free	function
(	O
resp	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
resp	pointer
->	O
body	struct
.	O
text	struct
=	O
strdup	function
(	O
elt	pointer
->	O
v	array
.	O
string	pointer
)	O
;	O
if	O
(	O
!	O
resp	pointer
->	O
body	struct
.	O
text	struct
)	O
{	O
free	function
(	O
resp	pointer
->	O
body	struct
.	O
section	pointer
)	O
;	O
free	function
(	O
resp	pointer
->	O
body	struct
.	O
partv	pointer
)	O
;	O
free	function
(	O
resp	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_rfc822_header_mapper	function
(	O
union	O
mu_imap_fetch_response	union
*	O
resp	pointer
,	O
struct	O
imap_list_element	struct
*	O
elt	pointer
,	O
struct	O
parse_response_env	struct
*	O
parse_env	pointer
)	O
{	O
parse_env	pointer
->	O
section	pointer
=	O
"HEADER"	pointer
;	O
return	O
_rfc822_mapper	function
(	O
resp	pointer
,	O
elt	pointer
,	O
parse_env	pointer
)	O
;	O
}	O
static	O
int	O
_rfc822_text_mapper	function
(	O
union	O
mu_imap_fetch_response	union
*	O
resp	pointer
,	O
struct	O
imap_list_element	struct
*	O
elt	pointer
,	O
struct	O
parse_response_env	struct
*	O
parse_env	pointer
)	O
{	O
parse_env	pointer
->	O
section	pointer
=	O
"TEXT"	pointer
;	O
return	O
_rfc822_mapper	function
(	O
resp	pointer
,	O
elt	pointer
,	O
parse_env	pointer
)	O
;	O
}	O
static	O
int	O
_flags_mapper	function
(	O
union	O
mu_imap_fetch_response	union
*	O
resp	pointer
,	O
struct	O
imap_list_element	struct
*	O
elt	pointer
,	O
struct	O
parse_response_env	struct
*	O
parse_env	pointer
)	O
{	O
if	O
(	O
elt	pointer
->	O
type	int
!=	O
imap_eltype_list	int
)	O
return	O
MU_ERR_FAILURE	O
;	O
if	O
(	O
_mu_imap_collect_flags	function
(	O
elt	pointer
,	O
&	O
resp	pointer
->	O
flags	int
.	O
flags	int
)	O
)	O
return	O
MU_ERR_FAILURE	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_date_mapper	function
(	O
union	O
mu_imap_fetch_response	union
*	O
resp	pointer
,	O
struct	O
imap_list_element	struct
*	O
elt	pointer
,	O
struct	O
parse_response_env	struct
*	O
parse_env	pointer
)	O
{	O
struct	O
tm	struct
tm	struct
;	O
struct	O
mu_timezone	struct
tz	pointer
;	O
if	O
(	O
elt	pointer
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
MU_ERR_FAILURE	O
;	O
if	O
(	O
mu_scan_datetime	function
(	O
elt	pointer
->	O
v	array
.	O
string	pointer
,	O
MU_DATETIME_INTERNALDATE	pointer
,	O
&	O
tm	struct
,	O
&	O
tz	pointer
,	O
NULL	O
)	O
)	O
return	O
MU_ERR_FAILURE	O
;	O
mu_datetime_tz_utc	function
(	O
&	O
tz	pointer
)	O
;	O
resp	pointer
->	O
internaldate	struct
.	O
tm	struct
=	O
tm	struct
;	O
resp	pointer
->	O
internaldate	struct
.	O
tz	pointer
=	O
tz	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_bodystructure	function
(	O
struct	O
imap_list_element	struct
*	O
elt	pointer
,	O
struct	O
mu_bodystructure	struct
*	O
*	O
pbs	pointer
)	O
;	O
struct	O
body_field_map	struct
{	O
size_t	long
offset	long
;	O
int	O
(	O
*	O
mapper	pointer
)	O
(	O
struct	O
imap_list_element	struct
*	O
,	O
void	O
*	O
)	O
;	O
}	O
;	O
static	O
int	O
parse_bs_list	function
(	O
struct	O
imap_list_element	struct
*	O
elt	pointer
,	O
struct	O
mu_bodystructure	struct
*	O
bs	pointer
,	O
struct	O
body_field_map	struct
*	O
map	pointer
)	O
{	O
int	O
rc	int
;	O
mu_iterator_t	pointer
itr	pointer
;	O
rc	int
=	O
mu_list_get_iterator	function
(	O
elt	pointer
->	O
v	array
.	O
list	pointer
,	O
&	O
itr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
map	pointer
->	O
mapper	pointer
&&	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
,	O
map	pointer
++	O
)	O
{	O
struct	O
imap_list_element	struct
*	O
tok	int
;	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
tok	int
)	O
;	O
rc	int
=	O
map	pointer
->	O
mapper	pointer
(	O
tok	int
,	O
(	O
char	O
*	O
)	O
bs	pointer
+	O
map	pointer
->	O
offset	long
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_map_body_param	function
(	O
void	O
*	O
*	O
itmv	pointer
,	O
size_t	long
itmc	long
,	O
void	O
*	O
call_data	pointer
)	O
{	O
mu_assoc_t	pointer
assoc	pointer
=	O
call_data	pointer
;	O
struct	O
mu_mime_param	struct
*	O
param	pointer
;	O
struct	O
imap_list_element	struct
*	O
key	pointer
,	O
*	O
val	int
;	O
int	O
rc	int
;	O
if	O
(	O
itmc	long
!=	O
2	int
)	O
return	O
MU_ERR_PARSE	O
;	O
key	pointer
=	O
itmv	pointer
[	O
0	int
]	O
;	O
val	int
=	O
itmv	pointer
[	O
1	int
]	O
;	O
if	O
(	O
key	pointer
->	O
type	int
!=	O
imap_eltype_string	int
||	O
val	int
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
MU_ERR_PARSE	O
;	O
rc	int
=	O
mu_rfc2047_decode_param	function
(	O
"UTF-8"	pointer
,	O
val	int
->	O
v	array
.	O
string	pointer
,	O
&	O
param	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
param	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
param	pointer
)	O
)	O
;	O
if	O
(	O
!	O
param	pointer
)	O
return	O
ENOMEM	int
;	O
param	pointer
->	O
lang	pointer
=	O
param	pointer
->	O
cset	pointer
=	O
NULL	O
;	O
param	pointer
->	O
value	pointer
=	O
strdup	function
(	O
val	int
->	O
v	array
.	O
string	pointer
)	O
;	O
if	O
(	O
!	O
param	pointer
->	O
value	pointer
)	O
{	O
free	function
(	O
param	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
}	O
return	O
mu_assoc_install	function
(	O
assoc	pointer
,	O
key	pointer
->	O
v	array
.	O
string	pointer
,	O
param	pointer
)	O
;	O
}	O
static	O
int	O
_body_field_text_mapper	function
(	O
struct	O
imap_list_element	struct
*	O
tok	int
,	O
void	O
*	O
ptr	pointer
)	O
{	O
char	O
*	O
s	pointer
;	O
if	O
(	O
_mu_imap_list_element_is_nil	function
(	O
tok	int
)	O
)	O
s	pointer
=	O
NULL	O
;	O
else	O
if	O
(	O
tok	int
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
MU_ERR_PARSE	O
;	O
else	O
if	O
(	O
!	O
(	O
s	pointer
=	O
strdup	function
(	O
tok	int
->	O
v	array
.	O
string	pointer
)	O
)	O
)	O
return	O
ENOMEM	int
;	O
*	O
(	O
char	O
*	O
*	O
)	O
ptr	pointer
=	O
s	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_body_field_size_mapper	function
(	O
struct	O
imap_list_element	struct
*	O
tok	int
,	O
void	O
*	O
ptr	pointer
)	O
{	O
unsigned	O
long	O
n	pointer
;	O
if	O
(	O
_mu_imap_list_element_is_nil	function
(	O
tok	int
)	O
)	O
n	pointer
=	O
0	int
;	O
else	O
if	O
(	O
tok	int
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
MU_ERR_PARSE	O
;	O
else	O
{	O
char	O
*	O
s	pointer
;	O
errno	O
=	O
0	int
;	O
n	pointer
=	O
strtoul	function
(	O
tok	int
->	O
v	array
.	O
string	pointer
,	O
&	O
s	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
s	pointer
||	O
errno	O
)	O
return	O
MU_ERR_PARSE	O
;	O
}	O
*	O
(	O
size_t	long
*	O
)	O
ptr	pointer
=	O
n	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_body_field_param_mapper	function
(	O
struct	O
imap_list_element	struct
*	O
tok	int
,	O
void	O
*	O
ptr	pointer
)	O
{	O
mu_assoc_t	pointer
param	pointer
;	O
int	O
rc	int
=	O
mu_mime_param_assoc_create	function
(	O
&	O
param	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
*	O
(	O
mu_assoc_t	pointer
*	O
)	O
ptr	pointer
=	O
param	pointer
;	O
if	O
(	O
_mu_imap_list_element_is_nil	function
(	O
tok	int
)	O
)	O
return	O
0	int
;	O
if	O
(	O
tok	int
->	O
type	int
!=	O
imap_eltype_list	int
)	O
return	O
MU_ERR_PARSE	O
;	O
return	O
mu_list_gmap	function
(	O
tok	int
->	O
v	array
.	O
list	pointer
,	O
_map_body_param	function
,	O
2	int
,	O
param	pointer
)	O
;	O
}	O
static	O
int	O
_body_field_disposition_mapper	function
(	O
struct	O
imap_list_element	struct
*	O
tok	int
,	O
void	O
*	O
ptr	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_bodystructure	struct
*	O
bs	pointer
=	O
ptr	pointer
;	O
struct	O
imap_list_element	struct
*	O
elt	pointer
;	O
if	O
(	O
_mu_imap_list_element_is_nil	function
(	O
tok	int
)	O
)	O
return	O
0	int
;	O
if	O
(	O
tok	int
->	O
type	int
!=	O
imap_eltype_list	int
)	O
return	O
MU_ERR_PARSE	O
;	O
elt	pointer
=	O
_mu_imap_list_at	function
(	O
tok	int
->	O
v	array
.	O
list	pointer
,	O
0	int
)	O
;	O
if	O
(	O
_mu_imap_list_element_is_nil	function
(	O
elt	pointer
)	O
)	O
bs	pointer
->	O
body_disposition	pointer
=	O
NULL	O
;	O
else	O
if	O
(	O
elt	pointer
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
MU_ERR_PARSE	O
;	O
else	O
if	O
(	O
(	O
bs	pointer
->	O
body_disposition	pointer
=	O
strdup	function
(	O
elt	pointer
->	O
v	array
.	O
string	pointer
)	O
)	O
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
rc	int
=	O
mu_mime_param_assoc_create	function
(	O
&	O
bs	pointer
->	O
body_disp_param	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
elt	pointer
=	O
_mu_imap_list_at	function
(	O
tok	int
->	O
v	array
.	O
list	pointer
,	O
1	int
)	O
;	O
if	O
(	O
_mu_imap_list_element_is_nil	function
(	O
elt	pointer
)	O
)	O
return	O
0	int
;	O
else	O
if	O
(	O
elt	pointer
->	O
type	int
!=	O
imap_eltype_list	int
)	O
return	O
MU_ERR_PARSE	O
;	O
return	O
mu_list_gmap	function
(	O
elt	pointer
->	O
v	array
.	O
list	pointer
,	O
_map_body_param	function
,	O
2	int
,	O
bs	pointer
->	O
body_disp_param	pointer
)	O
;	O
}	O
static	O
int	O
parse_envelope	function
(	O
struct	O
imap_list_element	struct
*	O
elt	pointer
,	O
struct	O
mu_imapenvelope	struct
*	O
*	O
penv	pointer
)	O
;	O
static	O
int	O
_body_field_imapenvelope_mapper	function
(	O
struct	O
imap_list_element	struct
*	O
tok	int
,	O
void	O
*	O
ptr	pointer
)	O
{	O
return	O
parse_envelope	function
(	O
tok	int
,	O
ptr	pointer
)	O
;	O
}	O
static	O
int	O
_body_field_bodystructure_mapper	function
(	O
struct	O
imap_list_element	struct
*	O
tok	int
,	O
void	O
*	O
ptr	pointer
)	O
{	O
return	O
parse_bodystructure	function
(	O
tok	int
,	O
ptr	pointer
)	O
;	O
}	O
struct	O
body_field_map	struct
base_field_map	array
[	O
]	O
=	O
{	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_type	pointer
)	O
,	O
_body_field_text_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_subtype	pointer
)	O
,	O
_body_field_text_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_param	pointer
)	O
,	O
_body_field_param_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_id	pointer
)	O
,	O
_body_field_text_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_descr	pointer
)	O
,	O
_body_field_text_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_encoding	pointer
)	O
,	O
_body_field_text_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_size	long
)	O
,	O
_body_field_size_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_md5	pointer
)	O
,	O
_body_field_text_mapper	function
}	O
,	O
{	O
0	int
,	O
_body_field_disposition_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_language	pointer
)	O
,	O
_body_field_text_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_location	pointer
)	O
,	O
_body_field_text_mapper	function
}	O
,	O
{	O
0	int
,	O
NULL	O
}	O
}	O
;	O
struct	O
body_field_map	struct
text_field_map	array
[	O
]	O
=	O
{	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_type	pointer
)	O
,	O
_body_field_text_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_subtype	pointer
)	O
,	O
_body_field_text_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_param	pointer
)	O
,	O
_body_field_param_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_id	pointer
)	O
,	O
_body_field_text_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_descr	pointer
)	O
,	O
_body_field_text_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_encoding	pointer
)	O
,	O
_body_field_text_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_size	long
)	O
,	O
_body_field_size_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
v	array
.	O
text	struct
.	O
body_lines	long
)	O
,	O
_body_field_size_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_md5	pointer
)	O
,	O
_body_field_text_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_disposition	pointer
)	O
,	O
_body_field_text_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_language	pointer
)	O
,	O
_body_field_text_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_location	pointer
)	O
,	O
_body_field_text_mapper	function
}	O
,	O
{	O
0	int
,	O
NULL	O
}	O
}	O
;	O
struct	O
body_field_map	struct
message_field_map	array
[	O
]	O
=	O
{	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_type	pointer
)	O
,	O
_body_field_text_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_subtype	pointer
)	O
,	O
_body_field_text_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_param	pointer
)	O
,	O
_body_field_param_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_id	pointer
)	O
,	O
_body_field_text_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_descr	pointer
)	O
,	O
_body_field_text_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_encoding	pointer
)	O
,	O
_body_field_text_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_size	long
)	O
,	O
_body_field_size_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
v	array
.	O
rfc822	struct
.	O
body_env	pointer
)	O
,	O
_body_field_imapenvelope_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
v	array
.	O
rfc822	struct
.	O
body_struct	pointer
)	O
,	O
_body_field_bodystructure_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
v	array
.	O
rfc822	struct
.	O
body_lines	long
)	O
,	O
_body_field_size_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_md5	pointer
)	O
,	O
_body_field_text_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_disposition	pointer
)	O
,	O
_body_field_text_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_language	pointer
)	O
,	O
_body_field_text_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_location	pointer
)	O
,	O
_body_field_text_mapper	function
}	O
,	O
{	O
0	int
,	O
NULL	O
}	O
}	O
;	O
struct	O
body_field_map	struct
multipart_field_map	array
[	O
]	O
=	O
{	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_subtype	pointer
)	O
,	O
_body_field_text_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_param	pointer
)	O
,	O
_body_field_param_mapper	function
}	O
,	O
{	O
0	int
,	O
_body_field_disposition_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_language	pointer
)	O
,	O
_body_field_text_mapper	function
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct
,	O
body_location	pointer
)	O
,	O
_body_field_text_mapper	function
}	O
,	O
{	O
0	int
,	O
NULL	O
}	O
}	O
;	O
static	O
int	O
_parse_bodystructure_simple	function
(	O
struct	O
imap_list_element	struct
*	O
elt	pointer
,	O
struct	O
mu_bodystructure	struct
*	O
bs	pointer
)	O
{	O
size_t	long
n	pointer
;	O
struct	O
imap_list_element	struct
*	O
tok	int
,	O
*	O
subtype	pointer
;	O
struct	O
body_field_map	struct
*	O
map	pointer
;	O
mu_list_count	function
(	O
elt	pointer
->	O
v	array
.	O
list	pointer
,	O
&	O
n	pointer
)	O
;	O
if	O
(	O
n	pointer
<	O
7	int
)	O
return	O
MU_ERR_PARSE	O
;	O
tok	int
=	O
_mu_imap_list_at	function
(	O
elt	pointer
->	O
v	array
.	O
list	pointer
,	O
BSTOK_BODY_TYPE	int
)	O
;	O
if	O
(	O
!	O
tok	int
||	O
tok	int
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
MU_ERR_PARSE	O
;	O
subtype	pointer
=	O
_mu_imap_list_at	function
(	O
elt	pointer
->	O
v	array
.	O
list	pointer
,	O
BSTOK_BODY_SUBTYPE	int
)	O
;	O
if	O
(	O
!	O
subtype	pointer
||	O
subtype	pointer
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
MU_ERR_PARSE	O
;	O
if	O
(	O
mu_c_strcasecmp	function
(	O
tok	int
->	O
v	array
.	O
string	pointer
,	O
"TEXT"	pointer
)	O
==	O
0	int
)	O
{	O
bs	pointer
->	O
body_message_type	enum
=	O
mu_message_text	int
;	O
map	pointer
=	O
text_field_map	array
;	O
}	O
else	O
if	O
(	O
mu_c_strcasecmp	function
(	O
tok	int
->	O
v	array
.	O
string	pointer
,	O
"MESSAGE"	pointer
)	O
==	O
0	int
&&	O
mu_c_strcasecmp	function
(	O
subtype	pointer
->	O
v	array
.	O
string	pointer
,	O
"RFC822"	pointer
)	O
==	O
0	int
)	O
{	O
bs	pointer
->	O
body_message_type	enum
=	O
mu_message_rfc822	int
;	O
map	pointer
=	O
message_field_map	array
;	O
}	O
else	O
{	O
bs	pointer
->	O
body_message_type	enum
=	O
mu_message_other	int
;	O
map	pointer
=	O
base_field_map	array
;	O
}	O
return	O
parse_bs_list	function
(	O
elt	pointer
,	O
bs	pointer
,	O
map	pointer
)	O
;	O
}	O
static	O
int	O
_parse_bodystructure_mixed	function
(	O
struct	O
imap_list_element	struct
*	O
elt	pointer
,	O
struct	O
mu_bodystructure	struct
*	O
bs	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
imap_list_element	struct
*	O
tok	int
;	O
mu_iterator_t	pointer
itr	pointer
;	O
struct	O
body_field_map	struct
*	O
map	pointer
=	O
multipart_field_map	array
;	O
bs	pointer
->	O
body_message_type	enum
=	O
mu_message_multipart	int
;	O
if	O
(	O
!	O
(	O
bs	pointer
->	O
body_type	pointer
=	O
strdup	function
(	O
"MULTIPART"	pointer
)	O
)	O
)	O
return	O
ENOMEM	int
;	O
rc	int
=	O
mu_list_create	function
(	O
&	O
bs	pointer
->	O
v	array
.	O
multipart	struct
.	O
body_parts	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_list_set_destroy_item	function
(	O
bs	pointer
->	O
v	array
.	O
multipart	struct
.	O
body_parts	pointer
,	O
mu_list_free_bodystructure	function
)	O
;	O
rc	int
=	O
mu_list_get_iterator	function
(	O
elt	pointer
->	O
v	array
.	O
list	pointer
,	O
&	O
itr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
struct	O
mu_bodystructure	struct
*	O
bspart	pointer
;	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
tok	int
)	O
;	O
if	O
(	O
!	O
tok	int
)	O
return	O
MU_ERR_PARSE	O
;	O
if	O
(	O
tok	int
->	O
type	int
!=	O
imap_eltype_list	int
)	O
break	O
;	O
rc	int
=	O
parse_bodystructure	function
(	O
tok	int
,	O
&	O
bspart	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_list_append	function
(	O
bs	pointer
->	O
v	array
.	O
multipart	struct
.	O
body_parts	pointer
,	O
bspart	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_bodystructure_free	function
(	O
bspart	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
}	O
if	O
(	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
)	O
return	O
MU_ERR_PARSE	O
;	O
for	O
(	O
;	O
map	pointer
->	O
mapper	pointer
&&	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
,	O
map	pointer
++	O
)	O
{	O
struct	O
imap_list_element	struct
*	O
tok	int
;	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
tok	int
)	O
;	O
rc	int
=	O
map	pointer
->	O
mapper	pointer
(	O
tok	int
,	O
(	O
char	O
*	O
)	O
bs	pointer
+	O
map	pointer
->	O
offset	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_bodystructure	function
(	O
struct	O
imap_list_element	struct
*	O
elt	pointer
,	O
struct	O
mu_bodystructure	struct
*	O
*	O
pbs	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_bodystructure	struct
*	O
bs	pointer
;	O
struct	O
imap_list_element	struct
*	O
tok	int
;	O
if	O
(	O
elt	pointer
->	O
type	int
!=	O
imap_eltype_list	int
)	O
return	O
MU_ERR_FAILURE	O
;	O
bs	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
bs	pointer
)	O
)	O
;	O
if	O
(	O
!	O
bs	pointer
)	O
return	O
ENOMEM	int
;	O
tok	int
=	O
_mu_imap_list_at	function
(	O
elt	pointer
->	O
v	array
.	O
list	pointer
,	O
0	int
)	O
;	O
if	O
(	O
tok	int
->	O
type	int
==	O
imap_eltype_string	int
)	O
rc	int
=	O
_parse_bodystructure_simple	function
(	O
elt	pointer
,	O
bs	pointer
)	O
;	O
else	O
rc	int
=	O
_parse_bodystructure_mixed	function
(	O
elt	pointer
,	O
bs	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_bodystructure_free	function
(	O
bs	pointer
)	O
;	O
else	O
*	O
pbs	pointer
=	O
bs	pointer
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_bodystructure_mapper	function
(	O
union	O
mu_imap_fetch_response	union
*	O
resp	pointer
,	O
struct	O
imap_list_element	struct
*	O
elt	pointer
,	O
struct	O
parse_response_env	struct
*	O
parse_env	pointer
)	O
{	O
return	O
parse_bodystructure	function
(	O
elt	pointer
,	O
&	O
resp	pointer
->	O
bodystructure	struct
.	O
bs	pointer
)	O
;	O
}	O
struct	O
fill_env	struct
{	O
struct	O
mu_imapenvelope	struct
*	O
imapenvelope	pointer
;	O
size_t	long
n	pointer
;	O
}	O
;	O
enum	O
env_index	enum
{	O
env_date	int
,	O
env_subject	int
,	O
env_from	int
,	O
env_sender	int
,	O
env_reply_to	int
,	O
env_to	int
,	O
env_cc	int
,	O
env_bcc	int
,	O
env_in_reply_to	int
,	O
env_message_id	int
}	O
;	O
static	O
int	O
elt_to_string	function
(	O
struct	O
imap_list_element	struct
*	O
elt	pointer
,	O
char	O
*	O
*	O
pstr	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
if	O
(	O
_mu_imap_list_element_is_nil	function
(	O
elt	pointer
)	O
)	O
p	pointer
=	O
NULL	O
;	O
else	O
if	O
(	O
elt	pointer
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
EINVAL	int
;	O
else	O
{	O
p	pointer
=	O
strdup	function
(	O
elt	pointer
->	O
v	array
.	O
string	pointer
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
ENOMEM	int
;	O
}	O
*	O
pstr	pointer
=	O
p	pointer
;	O
return	O
0	int
;	O
}	O
struct	O
addr_env	struct
{	O
mu_address_t	pointer
addr	pointer
;	O
size_t	long
n	pointer
;	O
}	O
;	O
static	O
int	O
_fill_subaddr	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
addr_env	struct
*	O
addr_env	struct
=	O
data	pointer
;	O
struct	O
imap_list_element	struct
*	O
elt	pointer
=	O
item	pointer
,	O
*	O
arg	pointer
;	O
const	O
char	O
*	O
domain	pointer
=	O
NULL	O
,	O
*	O
local	pointer
=	O
NULL	O
,	O
*	O
personal	pointer
=	O
NULL	O
;	O
if	O
(	O
elt	pointer
->	O
type	int
!=	O
imap_eltype_list	int
)	O
return	O
0	int
;	O
arg	pointer
=	O
_mu_imap_list_at	function
(	O
elt	pointer
->	O
v	array
.	O
list	pointer
,	O
0	int
)	O
;	O
if	O
(	O
arg	pointer
&&	O
arg	pointer
->	O
type	int
==	O
imap_eltype_string	int
)	O
personal	pointer
=	O
arg	pointer
->	O
v	array
.	O
string	pointer
;	O
arg	pointer
=	O
_mu_imap_list_at	function
(	O
elt	pointer
->	O
v	array
.	O
list	pointer
,	O
2	int
)	O
;	O
if	O
(	O
arg	pointer
&&	O
arg	pointer
->	O
type	int
==	O
imap_eltype_string	int
)	O
local	pointer
=	O
arg	pointer
->	O
v	array
.	O
string	pointer
;	O
arg	pointer
=	O
_mu_imap_list_at	function
(	O
elt	pointer
->	O
v	array
.	O
list	pointer
,	O
3	int
)	O
;	O
if	O
(	O
arg	pointer
&&	O
arg	pointer
->	O
type	int
==	O
imap_eltype_string	int
)	O
domain	pointer
=	O
arg	pointer
->	O
v	array
.	O
string	pointer
;	O
if	O
(	O
domain	pointer
&&	O
local	pointer
)	O
{	O
if	O
(	O
!	O
addr_env	struct
->	O
addr	pointer
)	O
{	O
int	O
rc	int
=	O
mu_address_create_null	function
(	O
&	O
addr_env	struct
->	O
addr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
mu_address_set_local_part	function
(	O
addr_env	struct
->	O
addr	pointer
,	O
addr_env	struct
->	O
n	pointer
,	O
local	pointer
)	O
;	O
mu_address_set_domain	function
(	O
addr_env	struct
->	O
addr	pointer
,	O
addr_env	struct
->	O
n	pointer
,	O
domain	pointer
)	O
;	O
mu_address_set_personal	function
(	O
addr_env	struct
->	O
addr	pointer
,	O
addr_env	struct
->	O
n	pointer
,	O
personal	pointer
)	O
;	O
addr_env	struct
->	O
n	pointer
++	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
elt_to_address	function
(	O
struct	O
imap_list_element	struct
*	O
elt	pointer
,	O
mu_address_t	pointer
*	O
paddr	pointer
)	O
{	O
if	O
(	O
_mu_imap_list_element_is_nil	function
(	O
elt	pointer
)	O
)	O
*	O
paddr	pointer
=	O
NULL	O
;	O
else	O
if	O
(	O
elt	pointer
->	O
type	int
!=	O
imap_eltype_list	int
)	O
return	O
EINVAL	int
;	O
else	O
{	O
struct	O
addr_env	struct
addr_env	struct
;	O
addr_env	struct
.	O
addr	pointer
=	O
NULL	O
;	O
addr_env	struct
.	O
n	pointer
=	O
1	int
;	O
mu_list_foreach	function
(	O
elt	pointer
->	O
v	array
.	O
list	pointer
,	O
_fill_subaddr	function
,	O
&	O
addr_env	struct
)	O
;	O
*	O
paddr	pointer
=	O
addr_env	struct
.	O
addr	pointer
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_fill_response	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
imap_list_element	struct
*	O
elt	pointer
=	O
item	pointer
;	O
struct	O
fill_env	struct
*	O
env	pointer
=	O
data	pointer
;	O
struct	O
mu_imapenvelope	struct
*	O
imapenvelope	pointer
=	O
env	pointer
->	O
imapenvelope	pointer
;	O
switch	O
(	O
env	pointer
->	O
n	pointer
++	O
)	O
{	O
case	O
env_date	int
:	O
if	O
(	O
elt	pointer
->	O
type	int
!=	O
imap_eltype_string	int
)	O
rc	int
=	O
MU_ERR_FAILURE	O
;	O
else	O
{	O
if	O
(	O
mu_scan_datetime	function
(	O
elt	pointer
->	O
v	array
.	O
string	pointer
,	O
MU_DATETIME_SCAN_RFC822	pointer
,	O
&	O
imapenvelope	pointer
->	O
date	struct
,	O
&	O
imapenvelope	pointer
->	O
tz	pointer
,	O
NULL	O
)	O
)	O
rc	int
=	O
MU_ERR_FAILURE	O
;	O
else	O
rc	int
=	O
0	int
;	O
}	O
break	O
;	O
case	O
env_subject	int
:	O
rc	int
=	O
elt_to_string	function
(	O
elt	pointer
,	O
&	O
imapenvelope	pointer
->	O
subject	pointer
)	O
;	O
break	O
;	O
case	O
env_from	int
:	O
rc	int
=	O
elt_to_address	function
(	O
elt	pointer
,	O
&	O
imapenvelope	pointer
->	O
from	pointer
)	O
;	O
break	O
;	O
case	O
env_sender	int
:	O
rc	int
=	O
elt_to_address	function
(	O
elt	pointer
,	O
&	O
imapenvelope	pointer
->	O
sender	pointer
)	O
;	O
break	O
;	O
case	O
env_reply_to	int
:	O
rc	int
=	O
elt_to_address	function
(	O
elt	pointer
,	O
&	O
imapenvelope	pointer
->	O
reply_to	pointer
)	O
;	O
break	O
;	O
case	O
env_to	int
:	O
rc	int
=	O
elt_to_address	function
(	O
elt	pointer
,	O
&	O
imapenvelope	pointer
->	O
to	pointer
)	O
;	O
break	O
;	O
case	O
env_cc	int
:	O
rc	int
=	O
elt_to_address	function
(	O
elt	pointer
,	O
&	O
imapenvelope	pointer
->	O
cc	pointer
)	O
;	O
break	O
;	O
case	O
env_bcc	int
:	O
rc	int
=	O
elt_to_address	function
(	O
elt	pointer
,	O
&	O
imapenvelope	pointer
->	O
bcc	pointer
)	O
;	O
break	O
;	O
case	O
env_in_reply_to	int
:	O
rc	int
=	O
elt_to_string	function
(	O
elt	pointer
,	O
&	O
imapenvelope	pointer
->	O
in_reply_to	pointer
)	O
;	O
break	O
;	O
case	O
env_message_id	int
:	O
rc	int
=	O
elt_to_string	function
(	O
elt	pointer
,	O
&	O
imapenvelope	pointer
->	O
message_id	pointer
)	O
;	O
break	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
parse_envelope	function
(	O
struct	O
imap_list_element	struct
*	O
elt	pointer
,	O
struct	O
mu_imapenvelope	struct
*	O
*	O
penv	pointer
)	O
{	O
struct	O
fill_env	struct
env	pointer
;	O
if	O
(	O
elt	pointer
->	O
type	int
!=	O
imap_eltype_list	int
)	O
return	O
MU_ERR_FAILURE	O
;	O
env	pointer
.	O
imapenvelope	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
env	pointer
.	O
imapenvelope	pointer
)	O
)	O
;	O
if	O
(	O
!	O
env	pointer
.	O
imapenvelope	pointer
)	O
return	O
ENOMEM	int
;	O
env	pointer
.	O
n	pointer
=	O
0	int
;	O
mu_list_foreach	function
(	O
elt	pointer
->	O
v	array
.	O
list	pointer
,	O
_fill_response	function
,	O
&	O
env	pointer
)	O
;	O
*	O
penv	pointer
=	O
env	pointer
.	O
imapenvelope	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_envelope_mapper	function
(	O
union	O
mu_imap_fetch_response	union
*	O
resp	pointer
,	O
struct	O
imap_list_element	struct
*	O
elt	pointer
,	O
struct	O
parse_response_env	struct
*	O
parse_env	pointer
)	O
{	O
return	O
parse_envelope	function
(	O
elt	pointer
,	O
&	O
resp	pointer
->	O
envelope	struct
.	O
imapenvelope	pointer
)	O
;	O
}	O
struct	O
mapper_tab	struct
{	O
char	O
*	O
name	pointer
;	O
size_t	long
size	long
;	O
int	O
type	int
;	O
mapper_fn	pointer
mapper	pointer
;	O
}	O
;	O
static	O
struct	O
mapper_tab	struct
mapper_tab	struct
[	O
]	O
=	O
{	O
{	O
S	O
(	O
"BODYSTRUCTURE"	pointer
)	O
,	O
MU_IMAP_FETCH_BODYSTRUCTURE	int
,	O
_bodystructure_mapper	function
}	O
,	O
{	O
S	O
(	O
"BODY"	pointer
)	O
,	O
MU_IMAP_FETCH_BODY	int
,	O
_body_mapper	function
}	O
,	O
{	O
S	O
(	O
"ENVELOPE"	pointer
)	O
,	O
MU_IMAP_FETCH_ENVELOPE	int
,	O
_envelope_mapper	function
}	O
,	O
{	O
S	O
(	O
"FLAGS"	pointer
)	O
,	O
MU_IMAP_FETCH_FLAGS	int
,	O
_flags_mapper	function
}	O
,	O
{	O
S	O
(	O
"INTERNALDATE"	pointer
)	O
,	O
MU_IMAP_FETCH_INTERNALDATE	int
,	O
_date_mapper	function
}	O
,	O
{	O
S	O
(	O
"RFC822"	pointer
)	O
,	O
MU_IMAP_FETCH_BODY	int
,	O
_body_mapper	function
}	O
,	O
{	O
S	O
(	O
"RFC822.HEADER"	pointer
)	O
,	O
MU_IMAP_FETCH_BODY	int
,	O
_rfc822_header_mapper	function
}	O
,	O
{	O
S	O
(	O
"RFC822.SIZE"	pointer
)	O
,	O
MU_IMAP_FETCH_RFC822_SIZE	int
,	O
_size_mapper	function
}	O
,	O
{	O
S	O
(	O
"RFC822.TEXT"	pointer
)	O
,	O
MU_IMAP_FETCH_BODY	int
,	O
_rfc822_text_mapper	function
}	O
,	O
{	O
S	O
(	O
"UID"	pointer
)	O
,	O
MU_IMAP_FETCH_UID	int
,	O
_uid_mapper	function
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
int	O
_extract_string	function
(	O
void	O
*	O
*	O
itmv	pointer
,	O
size_t	long
itmc	long
,	O
void	O
*	O
call_data	pointer
)	O
{	O
struct	O
imap_list_element	struct
*	O
elt	pointer
=	O
itmv	pointer
[	O
0	int
]	O
;	O
if	O
(	O
elt	pointer
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
MU_LIST_MAP_SKIP	int
;	O
itmv	pointer
[	O
0	int
]	O
=	O
elt	pointer
->	O
v	array
.	O
string	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_fetch_fold	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
imap_list_element	struct
*	O
elt	pointer
=	O
item	pointer
;	O
struct	O
parse_response_env	struct
*	O
env	pointer
=	O
data	pointer
;	O
switch	O
(	O
env	pointer
->	O
state	pointer
)	O
{	O
case	O
resp_kw	int
:	O
{	O
char	O
*	O
kw	pointer
;	O
size_t	long
kwlen	long
;	O
struct	O
mapper_tab	struct
*	O
mt	pointer
;	O
if	O
(	O
elt	pointer
->	O
type	int
!=	O
imap_eltype_string	int
)	O
{	O
env	pointer
->	O
status	int
=	O
MU_ERR_FAILURE	O
;	O
return	O
MU_ERR_FAILURE	O
;	O
}	O
kw	pointer
=	O
elt	pointer
->	O
v	array
.	O
string	pointer
;	O
kwlen	long
=	O
strlen	function
(	O
kw	pointer
)	O
;	O
for	O
(	O
mt	pointer
=	O
mapper_tab	struct
;	O
mt	pointer
->	O
name	pointer
;	O
mt	pointer
++	O
)	O
{	O
if	O
(	O
mt	pointer
->	O
size	long
==	O
kwlen	long
&&	O
memcmp	function
(	O
mt	pointer
->	O
name	pointer
,	O
kw	pointer
,	O
kwlen	long
)	O
==	O
0	int
)	O
break	O
;	O
}	O
if	O
(	O
!	O
mt	pointer
->	O
name	pointer
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE9	int
,	O
(	O
"ignoring unknown FETCH item '%s'"	pointer
,	O
kw	pointer
)	O
)	O
;	O
env	pointer
->	O
state	pointer
=	O
resp_skip	int
;	O
return	O
0	int
;	O
}	O
env	pointer
->	O
mapper	pointer
=	O
mt	pointer
->	O
mapper	pointer
;	O
rc	int
=	O
alloc_response	function
(	O
&	O
env	pointer
->	O
resp	pointer
,	O
mt	pointer
->	O
type	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
env	pointer
->	O
status	int
=	O
rc	int
;	O
return	O
MU_ERR_FAILURE	O
;	O
}	O
env	pointer
->	O
state	pointer
=	O
mt	pointer
->	O
type	int
==	O
MU_IMAP_FETCH_BODY	int
?	O
resp_body	int
:	O
resp_val	int
;	O
break	O
;	O
}	O
case	O
resp_body	int
:	O
if	O
(	O
_mu_imap_list_element_is_string	function
(	O
elt	pointer
,	O
"["	pointer
)	O
)	O
{	O
env	pointer
->	O
state	pointer
=	O
resp_body_section	int
;	O
break	O
;	O
}	O
else	O
{	O
env	pointer
->	O
mapper	pointer
=	O
_bodystructure_mapper	function
;	O
_free_fetch_response	function
(	O
env	pointer
->	O
resp	pointer
)	O
;	O
rc	int
=	O
alloc_response	function
(	O
&	O
env	pointer
->	O
resp	pointer
,	O
MU_IMAP_FETCH_BODYSTRUCTURE	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
env	pointer
->	O
status	int
=	O
rc	int
;	O
return	O
MU_ERR_FAILURE	O
;	O
}	O
env	pointer
->	O
state	pointer
=	O
resp_val	int
;	O
}	O
case	O
resp_val	int
:	O
if	O
(	O
env	pointer
->	O
mapper	pointer
)	O
{	O
int	O
rc	int
=	O
env	pointer
->	O
mapper	pointer
(	O
env	pointer
->	O
resp	pointer
,	O
elt	pointer
,	O
env	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
_free_fetch_response	function
(	O
env	pointer
->	O
resp	pointer
)	O
;	O
else	O
mu_list_append	function
(	O
env	pointer
->	O
result	pointer
,	O
env	pointer
->	O
resp	pointer
)	O
;	O
}	O
env	pointer
->	O
resp	pointer
=	O
NULL	O
;	O
mu_list_destroy	function
(	O
&	O
env	pointer
->	O
hlist	pointer
)	O
;	O
env	pointer
->	O
state	pointer
=	O
resp_kw	int
;	O
break	O
;	O
case	O
resp_body_section	int
:	O
if	O
(	O
elt	pointer
->	O
type	int
!=	O
imap_eltype_string	int
)	O
{	O
env	pointer
->	O
status	int
=	O
MU_ERR_PARSE	O
;	O
return	O
MU_ERR_FAILURE	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
elt	pointer
->	O
v	array
.	O
string	pointer
,	O
"HEADER.FIELDS"	pointer
,	O
13	int
)	O
==	O
0	int
)	O
env	pointer
->	O
state	pointer
=	O
resp_body_hlist	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
elt	pointer
->	O
v	array
.	O
string	pointer
,	O
"]"	pointer
)	O
==	O
0	int
)	O
{	O
env	pointer
->	O
section	pointer
=	O
NULL	O
;	O
env	pointer
->	O
state	pointer
=	O
resp_val	int
;	O
break	O
;	O
}	O
else	O
env	pointer
->	O
state	pointer
=	O
resp_body_end	int
;	O
env	pointer
->	O
section	pointer
=	O
elt	pointer
->	O
v	array
.	O
string	pointer
;	O
break	O
;	O
case	O
resp_skip	int
:	O
mu_list_destroy	function
(	O
&	O
env	pointer
->	O
hlist	pointer
)	O
;	O
env	pointer
->	O
state	pointer
=	O
resp_kw	int
;	O
break	O
;	O
case	O
resp_body_hlist	int
:	O
if	O
(	O
elt	pointer
->	O
type	int
!=	O
imap_eltype_list	int
)	O
{	O
env	pointer
->	O
status	int
=	O
MU_ERR_PARSE	O
;	O
return	O
MU_ERR_FAILURE	O
;	O
}	O
mu_list_map	function
(	O
elt	pointer
->	O
v	array
.	O
list	pointer
,	O
_extract_string	function
,	O
NULL	O
,	O
1	int
,	O
&	O
env	pointer
->	O
hlist	pointer
)	O
;	O
env	pointer
->	O
state	pointer
=	O
resp_body_end	int
;	O
break	O
;	O
case	O
resp_body_end	int
:	O
if	O
(	O
_mu_imap_list_element_is_string	function
(	O
elt	pointer
,	O
"]"	pointer
)	O
)	O
env	pointer
->	O
state	pointer
=	O
resp_val	int
;	O
else	O
{	O
env	pointer
->	O
status	int
=	O
MU_ERR_PARSE	O
;	O
return	O
MU_ERR_FAILURE	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
_mu_imap_parse_fetch_response	function
(	O
mu_list_t	pointer
input	pointer
,	O
mu_list_t	pointer
*	O
result_list	pointer
)	O
{	O
mu_list_t	pointer
result	pointer
;	O
int	O
status	int
;	O
struct	O
parse_response_env	struct
env	pointer
;	O
status	int
=	O
mu_list_create	function
(	O
&	O
result	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"mu_list_create: %s"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
)	O
;	O
return	O
1	int
;	O
}	O
mu_list_set_destroy_item	function
(	O
result	pointer
,	O
_free_fetch_response	function
)	O
;	O
memset	function
(	O
&	O
env	pointer
,	O
0	int
,	O
sizeof	O
(	O
env	pointer
)	O
)	O
;	O
env	pointer
.	O
result	pointer
=	O
result	pointer
;	O
mu_list_foreach	function
(	O
input	pointer
,	O
_fetch_fold	function
,	O
&	O
env	pointer
)	O
;	O
if	O
(	O
env	pointer
.	O
status	int
)	O
mu_list_destroy	function
(	O
&	O
result	pointer
)	O
;	O
else	O
*	O
result_list	pointer
=	O
result	pointer
;	O
mu_list_destroy	function
(	O
&	O
env	pointer
.	O
hlist	pointer
)	O
;	O
return	O
env	pointer
.	O
status	int
;	O
}	O
