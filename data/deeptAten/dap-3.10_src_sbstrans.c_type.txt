int	O
sbstempnum	int
;	O
char	O
sbstmp	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
int	O
sbslineno	int
;	O
extern	O
int	O
sbshaspicts	int
;	O
static	O
char	O
*	O
keyword	array
[	O
]	O
=	O
{	O
"set"	pointer
,	O
"infile"	pointer
,	O
"input"	pointer
,	O
"length"	pointer
,	O
"merge"	pointer
,	O
"by"	pointer
,	O
"drop"	pointer
,	O
"keep"	pointer
,	O
"output"	pointer
,	O
"do"	pointer
,	O
"end"	pointer
,	O
"if"	pointer
,	O
"then"	pointer
,	O
"else"	pointer
,	O
"while"	pointer
,	O
""	pointer
}	O
;	O
int	O
iskeyword	function
(	O
char	O
*	O
str	pointer
)	O
{	O
int	O
k	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
*	O
keyword	array
[	O
k	int
]	O
;	O
k	int
++	O
)	O
{	O
if	O
(	O
!	O
linecmp	function
(	O
str	pointer
,	O
keyword	array
[	O
k	int
]	O
)	O
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
void	O
namecvt	function
(	O
char	O
*	O
sbsname	pointer
)	O
{	O
int	O
dot	int
;	O
for	O
(	O
dot	int
=	O
0	int
;	O
sbsname	pointer
[	O
dot	int
]	O
;	O
dot	int
++	O
)	O
;	O
while	O
(	O
--	O
dot	int
>=	O
0	int
&&	O
sbsname	pointer
[	O
dot	int
]	O
!=	O
'.'	O
)	O
;	O
if	O
(	O
dot	int
<=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbs: %s not a .sbs file\n"	pointer
,	O
sbsname	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
strcpy	function
(	O
sbsname	pointer
+	O
dot	int
,	O
".c"	pointer
)	O
;	O
}	O
int	O
is_space	function
(	O
int	O
c	int
)	O
{	O
return	O
c	int
==	O
EOF	O
||	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
;	O
}	O
int	O
sbsgetc	function
(	O
FILE	struct
*	O
sbsfile	pointer
)	O
{	O
int	O
c	int
;	O
c	int
=	O
dgetc	function
(	O
sbsfile	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
sbslineno	int
++	O
;	O
return	O
c	int
;	O
}	O
int	O
sbstoken	function
(	O
FILE	struct
*	O
sbsfile	pointer
,	O
char	O
*	O
token	pointer
)	O
{	O
int	O
t	int
;	O
int	O
c	int
;	O
int	O
cprev	int
;	O
int	O
quote	int
;	O
t	int
=	O
0	int
;	O
while	O
(	O
(	O
c	int
=	O
sbsgetc	function
(	O
sbsfile	pointer
)	O
)	O
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
||	O
incomment	int
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
token	pointer
[	O
0	int
]	O
=	O
'\0'	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
(	O
(	O
'a'	O
<=	O
c	int
&&	O
c	int
<=	O
'z'	O
)	O
||	O
(	O
'A'	O
<=	O
c	int
&&	O
c	int
<=	O
'Z'	O
)	O
)	O
||	O
c	int
==	O
'_'	O
)	O
{	O
for	O
(	O
t	int
=	O
0	int
;	O
(	O
'a'	O
<=	O
c	int
&&	O
c	int
<=	O
'z'	O
)	O
||	O
(	O
'A'	O
<=	O
c	int
&&	O
c	int
<=	O
'Z'	O
)	O
||	O
(	O
'0'	O
<=	O
c	int
&&	O
c	int
<=	O
'9'	O
)	O
||	O
c	int
==	O
'_'	O
||	O
c	int
==	O
'.'	O
;	O
c	int
=	O
sbsgetc	function
(	O
sbsfile	pointer
)	O
)	O
{	O
if	O
(	O
t	int
<	O
TOKENLEN	int
)	O
token	pointer
[	O
t	int
++	O
]	O
=	O
c	int
;	O
else	O
{	O
token	pointer
[	O
t	int
]	O
=	O
'\0'	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: token too long: %s\n"	pointer
,	O
sbslineno	int
,	O
token	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
c	int
==	O
'.'	O
||	O
(	O
'0'	O
<=	O
c	int
&&	O
c	int
<=	O
'9'	O
)	O
)	O
{	O
for	O
(	O
t	int
=	O
0	int
;	O
c	int
==	O
'.'	O
||	O
(	O
'0'	O
<=	O
c	int
&&	O
c	int
<=	O
'9'	O
)	O
;	O
c	int
=	O
sbsgetc	function
(	O
sbsfile	pointer
)	O
)	O
{	O
if	O
(	O
t	int
<	O
TOKENLEN	int
)	O
token	pointer
[	O
t	int
++	O
]	O
=	O
c	int
;	O
else	O
{	O
token	pointer
[	O
t	int
]	O
=	O
'\0'	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: token too long: %s\n"	pointer
,	O
sbslineno	int
,	O
token	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
c	int
==	O
'='	O
||	O
c	int
==	O
'+'	O
||	O
c	int
==	O
'-'	O
||	O
c	int
==	O
'*'	O
||	O
c	int
==	O
'/'	O
||	O
c	int
==	O
'>'	O
||	O
c	int
==	O
'<'	O
||	O
c	int
==	O
'^'	O
||	O
c	int
==	O
'~'	O
||	O
c	int
==	O
'!'	O
||	O
c	int
==	O
'&'	O
||	O
c	int
==	O
'|'	O
)	O
{	O
t	int
=	O
0	int
;	O
token	pointer
[	O
t	int
++	O
]	O
=	O
c	int
;	O
cprev	int
=	O
c	int
;	O
c	int
=	O
sbsgetc	function
(	O
sbsfile	pointer
)	O
;	O
if	O
(	O
c	int
==	O
'='	O
||	O
(	O
cprev	int
==	O
c	int
)	O
)	O
{	O
if	O
(	O
t	int
<	O
TOKENLEN	int
)	O
token	pointer
[	O
t	int
++	O
]	O
=	O
c	int
;	O
else	O
{	O
token	pointer
[	O
t	int
]	O
=	O
'\0'	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: token too long: %s\n"	pointer
,	O
sbslineno	int
,	O
token	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
c	int
=	O
sbsgetc	function
(	O
sbsfile	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
c	int
==	O
'"'	O
||	O
c	int
==	O
'\''	O
)	O
{	O
quote	int
=	O
c	int
;	O
t	int
=	O
0	int
;	O
token	pointer
[	O
t	int
++	O
]	O
=	O
c	int
;	O
cprev	int
=	O
c	int
;	O
c	int
=	O
sbsgetc	function
(	O
sbsfile	pointer
)	O
;	O
for	O
(	O
;	O
c	int
!=	O
EOF	O
&&	O
c	int
!=	O
quote	int
;	O
cprev	int
=	O
c	int
,	O
c	int
=	O
sbsgetc	function
(	O
sbsfile	pointer
)	O
)	O
{	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
{	O
if	O
(	O
cprev	int
==	O
'\\'	O
)	O
--	O
t	int
;	O
else	O
break	O
;	O
}	O
else	O
if	O
(	O
t	int
<	O
TOKENLEN	int
)	O
token	pointer
[	O
t	int
++	O
]	O
=	O
c	int
;	O
else	O
{	O
token	pointer
[	O
t	int
]	O
=	O
'\0'	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: token too long: %s\n"	pointer
,	O
sbslineno	int
,	O
token	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
t	int
<	O
TOKENLEN	int
)	O
token	pointer
[	O
t	int
++	O
]	O
=	O
c	int
;	O
else	O
{	O
token	pointer
[	O
t	int
]	O
=	O
'\0'	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: token too long: %s\n"	pointer
,	O
sbslineno	int
,	O
token	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
c	int
=	O
sbsgetc	function
(	O
sbsfile	pointer
)	O
;	O
}	O
else	O
{	O
t	int
=	O
0	int
;	O
token	pointer
[	O
t	int
++	O
]	O
=	O
c	int
;	O
c	int
=	O
sbsgetc	function
(	O
sbsfile	pointer
)	O
;	O
}	O
token	pointer
[	O
t	int
]	O
=	O
'\0'	O
;	O
while	O
(	O
c	int
!=	O
EOF	O
&&	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
||	O
incomment	int
)	O
c	int
=	O
sbsgetc	function
(	O
sbsfile	pointer
)	O
;	O
if	O
(	O
c	int
!=	O
EOF	O
)	O
{	O
unget1c	function
(	O
c	int
,	O
sbsfile	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
c	int
==	O
'\''	O
)	O
inquote1	int
=	O
!	O
inquote1	int
;	O
else	O
if	O
(	O
c	int
==	O
'"'	O
)	O
inquote2	int
=	O
!	O
inquote2	int
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
--	O
sbslineno	int
;	O
}	O
return	O
t	int
;	O
}	O
int	O
lineput	function
(	O
char	O
*	O
line	pointer
,	O
FILE	struct
*	O
dapfile	pointer
)	O
{	O
int	O
l	int
;	O
for	O
(	O
l	int
=	O
0	int
;	O
line	pointer
[	O
l	int
]	O
&&	O
line	pointer
[	O
l	int
]	O
!=	O
'\n'	O
;	O
l	int
++	O
)	O
putc	function
(	O
line	pointer
[	O
l	int
]	O
,	O
dapfile	pointer
)	O
;	O
return	O
l	int
;	O
}	O
int	O
getstatement	function
(	O
FILE	struct
*	O
sbsfile	pointer
,	O
char	O
*	O
statement	pointer
)	O
{	O
int	O
s	int
;	O
static	O
char	O
token	pointer
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
int	O
toklen	int
;	O
for	O
(	O
s	int
=	O
0	int
;	O
(	O
toklen	int
=	O
sbstoken	function
(	O
sbsfile	pointer
,	O
token	pointer
)	O
)	O
&&	O
linecmp	function
(	O
token	pointer
,	O
";"	pointer
)	O
;	O
)	O
{	O
if	O
(	O
s	int
+	O
toklen	int
+	O
1	int
<	O
STATELEN	int
)	O
{	O
strcpy	function
(	O
statement	pointer
+	O
s	int
,	O
token	pointer
)	O
;	O
s	int
+=	O
toklen	int
;	O
statement	pointer
[	O
s	int
++	O
]	O
=	O
'\n'	O
;	O
}	O
}	O
if	O
(	O
!	O
linecmp	function
(	O
token	pointer
,	O
";"	pointer
)	O
)	O
{	O
statement	pointer
[	O
s	int
++	O
]	O
=	O
';'	O
;	O
statement	pointer
[	O
s	int
++	O
]	O
=	O
'\n'	O
;	O
}	O
statement	pointer
[	O
s	int
]	O
=	O
'\0'	O
;	O
return	O
s	int
;	O
}	O
int	O
linecpy	function
(	O
char	O
*	O
l1	pointer
,	O
char	O
*	O
l2	pointer
)	O
{	O
char	O
*	O
start	pointer
;	O
start	pointer
=	O
l2	pointer
;	O
while	O
(	O
*	O
l2	pointer
&&	O
*	O
l2	pointer
!=	O
'\n'	O
)	O
{	O
if	O
(	O
l1	pointer
)	O
*	O
l1	pointer
++	O
=	O
*	O
l2	pointer
++	O
;	O
else	O
l2	pointer
++	O
;	O
}	O
if	O
(	O
l1	pointer
)	O
*	O
l1	pointer
=	O
'\0'	O
;	O
return	O
l2	pointer
-	O
start	pointer
;	O
}	O
int	O
putlines	function
(	O
char	O
*	O
line	pointer
,	O
FILE	struct
*	O
file	pointer
,	O
int	O
term	int
)	O
{	O
char	O
*	O
start	pointer
;	O
for	O
(	O
start	pointer
=	O
line	pointer
;	O
*	O
line	pointer
&&	O
*	O
line	pointer
!=	O
term	int
;	O
line	pointer
++	O
)	O
{	O
if	O
(	O
*	O
line	pointer
==	O
'\n'	O
)	O
putc	function
(	O
' '	O
,	O
file	pointer
)	O
;	O
else	O
putc	function
(	O
*	O
line	pointer
,	O
file	pointer
)	O
;	O
}	O
putc	function
(	O
' '	O
,	O
file	pointer
)	O
;	O
return	O
line	pointer
-	O
start	pointer
;	O
}	O
int	O
lower	function
(	O
int	O
c	int
)	O
{	O
if	O
(	O
'A'	O
<=	O
c	int
&&	O
c	int
<=	O
'Z'	O
)	O
return	O
c	int
+	O
'a'	O
-	O
'A'	O
;	O
else	O
return	O
c	int
;	O
}	O
int	O
linecmp	function
(	O
char	O
*	O
l1	pointer
,	O
char	O
*	O
l2	pointer
)	O
{	O
while	O
(	O
lower	function
(	O
*	O
l1	pointer
)	O
==	O
lower	function
(	O
*	O
l2	pointer
)	O
&&	O
*	O
l1	pointer
&&	O
*	O
l2	pointer
&&	O
*	O
l1	pointer
!=	O
'\n'	O
&&	O
*	O
l2	pointer
!=	O
'\n'	O
)	O
{	O
l1	pointer
++	O
;	O
l2	pointer
++	O
;	O
}	O
return	O
(	O
*	O
l1	pointer
&&	O
*	O
l1	pointer
!=	O
'\n'	O
)	O
||	O
(	O
*	O
l2	pointer
&&	O
*	O
l2	pointer
!=	O
'\n'	O
)	O
;	O
}	O
int	O
getstep	function
(	O
FILE	struct
*	O
sbsfile	pointer
,	O
char	O
*	O
step	pointer
)	O
{	O
static	O
char	O
statement	pointer
[	O
STATELEN	int
+	O
1	int
]	O
;	O
int	O
steptype	int
;	O
int	O
s	int
;	O
static	O
int	O
statelen	int
=	O
-	O
1	int
;	O
if	O
(	O
statelen	int
<	O
0	int
)	O
{	O
if	O
(	O
!	O
(	O
statelen	int
=	O
getstatement	function
(	O
sbsfile	pointer
,	O
statement	pointer
)	O
)	O
)	O
return	O
0	int
;	O
}	O
if	O
(	O
!	O
linecmp	function
(	O
statement	pointer
,	O
"data"	pointer
)	O
)	O
steptype	int
=	O
DATA	int
;	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
statement	pointer
,	O
"proc"	pointer
)	O
)	O
steptype	int
=	O
PROC	int
;	O
else	O
return	O
0	int
;	O
strcpy	function
(	O
step	pointer
,	O
statement	pointer
)	O
;	O
s	int
=	O
statelen	int
;	O
while	O
(	O
(	O
statelen	int
=	O
getstatement	function
(	O
sbsfile	pointer
,	O
statement	pointer
)	O
)	O
)	O
{	O
if	O
(	O
!	O
linecmp	function
(	O
statement	pointer
,	O
"data"	pointer
)	O
&&	O
(	O
alpha	function
(	O
statement	pointer
[	O
5	int
]	O
)	O
||	O
statement	pointer
[	O
5	int
]	O
==	O
';'	O
||	O
statement	pointer
[	O
5	int
]	O
==	O
'('	O
)	O
)	O
break	O
;	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
statement	pointer
,	O
"proc"	pointer
)	O
&&	O
alpha	function
(	O
statement	pointer
[	O
5	int
]	O
)	O
)	O
break	O
;	O
if	O
(	O
s	int
+	O
statelen	int
+	O
1	int
<	O
STEPLEN	int
)	O
{	O
strcpy	function
(	O
step	pointer
+	O
s	int
,	O
statement	pointer
)	O
;	O
s	int
+=	O
statelen	int
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: %s step too long\n"	pointer
,	O
sbslineno	int
,	O
(	O
(	O
steptype	int
==	O
DATA	int
)	O
?	O
"data"	pointer
:	O
"proc"	pointer
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
step	pointer
[	O
s	int
]	O
=	O
'\0'	O
;	O
return	O
steptype	int
;	O
}	O
int	O
findvar	function
(	O
char	O
*	O
varname	pointer
,	O
char	O
var	array
[	O
]	O
[	O
TOKENLEN	int
+	O
1	int
]	O
,	O
int	O
nvars	int
)	O
{	O
int	O
v	int
;	O
for	O
(	O
v	int
=	O
0	int
;	O
v	int
<	O
nvars	int
;	O
v	int
++	O
)	O
{	O
if	O
(	O
!	O
linecmp	function
(	O
varname	pointer
,	O
var	array
[	O
v	int
]	O
)	O
)	O
break	O
;	O
}	O
if	O
(	O
v	int
<	O
MAXVARS	int
-	O
1	int
)	O
strcpy	function
(	O
var	array
[	O
v	int
]	O
,	O
varname	pointer
)	O
;	O
return	O
v	int
;	O
}	O
int	O
opfix	function
(	O
char	O
*	O
token	pointer
,	O
FILE	struct
*	O
dapfile	pointer
)	O
{	O
int	O
t	int
;	O
if	O
(	O
inquote1	int
||	O
inquote2	int
)	O
return	O
lineput	function
(	O
token	pointer
,	O
dapfile	pointer
)	O
+	O
1	int
;	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
token	pointer
,	O
"="	pointer
)	O
)	O
{	O
fputs	function
(	O
"=="	pointer
,	O
dapfile	pointer
)	O
;	O
return	O
2	int
;	O
}	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
token	pointer
,	O
"^="	pointer
)	O
||	O
!	O
linecmp	function
(	O
token	pointer
,	O
"~="	pointer
)	O
)	O
{	O
fputs	function
(	O
"!="	pointer
,	O
dapfile	pointer
)	O
;	O
return	O
3	int
;	O
}	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
token	pointer
,	O
"&"	pointer
)	O
)	O
{	O
fputs	function
(	O
"&&"	pointer
,	O
dapfile	pointer
)	O
;	O
return	O
2	int
;	O
}	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
token	pointer
,	O
"|"	pointer
)	O
)	O
{	O
fputs	function
(	O
"||"	pointer
,	O
dapfile	pointer
)	O
;	O
return	O
2	int
;	O
}	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
token	pointer
,	O
"^"	pointer
)	O
||	O
!	O
linecmp	function
(	O
token	pointer
,	O
"~"	pointer
)	O
)	O
{	O
fputs	function
(	O
"!"	pointer
,	O
dapfile	pointer
)	O
;	O
return	O
2	int
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
token	pointer
,	O
"first."	pointer
,	O
6	int
)	O
)	O
{	O
putc	function
(	O
'_'	O
,	O
dapfile	pointer
)	O
;	O
for	O
(	O
t	int
=	O
6	int
;	O
token	pointer
[	O
t	int
]	O
&&	O
token	pointer
[	O
t	int
]	O
!=	O
'\n'	O
;	O
t	int
++	O
)	O
putc	function
(	O
token	pointer
[	O
t	int
]	O
,	O
dapfile	pointer
)	O
;	O
putc	function
(	O
'_'	O
,	O
dapfile	pointer
)	O
;	O
return	O
t	int
+	O
1	int
;	O
}	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
token	pointer
,	O
"["	pointer
)	O
)	O
{	O
fputs	function
(	O
"[(int)("	pointer
,	O
dapfile	pointer
)	O
;	O
return	O
2	int
;	O
}	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
token	pointer
,	O
"]"	pointer
)	O
)	O
{	O
fputs	function
(	O
")-1]"	pointer
,	O
dapfile	pointer
)	O
;	O
return	O
2	int
;	O
}	O
else	O
return	O
lineput	function
(	O
token	pointer
,	O
dapfile	pointer
)	O
+	O
1	int
;	O
}	O
char	O
*	O
nonaction	function
(	O
char	O
*	O
step	pointer
)	O
{	O
static	O
char	O
type	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
,	O
"set"	pointer
)	O
||	O
!	O
linecmp	function
(	O
step	pointer
,	O
"infile"	pointer
)	O
||	O
!	O
linecmp	function
(	O
step	pointer
,	O
"input"	pointer
)	O
||	O
!	O
linecmp	function
(	O
step	pointer
,	O
"length"	pointer
)	O
||	O
!	O
linecmp	function
(	O
step	pointer
,	O
"merge"	pointer
)	O
||	O
!	O
linecmp	function
(	O
step	pointer
,	O
"by"	pointer
)	O
||	O
!	O
linecmp	function
(	O
step	pointer
,	O
"drop"	pointer
)	O
||	O
!	O
linecmp	function
(	O
step	pointer
,	O
"keep"	pointer
)	O
||	O
!	O
linecmp	function
(	O
step	pointer
,	O
"title"	pointer
)	O
)	O
{	O
linecpy	function
(	O
type	array
,	O
step	pointer
)	O
;	O
return	O
type	array
;	O
}	O
return	O
NULL	O
;	O
}	O
int	O
statementtrans	function
(	O
char	O
*	O
step	pointer
,	O
FILE	struct
*	O
dapfile	pointer
,	O
int	O
*	O
isoutput	pointer
)	O
{	O
int	O
s	int
;	O
char	O
*	O
statementtype	pointer
;	O
s	int
=	O
0	int
;	O
if	O
(	O
(	O
statementtype	pointer
=	O
nonaction	function
(	O
step	pointer
)	O
)	O
)	O
{	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
s	int
++	O
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
';'	O
)	O
return	O
s	int
+	O
2	int
;	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing ; after %s statement in data step\n"	pointer
,	O
sbslineno	int
,	O
statementtype	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
,	O
"output"	pointer
)	O
)	O
{	O
fputs	function
(	O
"output();\n"	pointer
,	O
dapfile	pointer
)	O
;	O
s	int
+=	O
7	int
;	O
*	O
isoutput	pointer
=	O
1	int
;	O
statementtype	pointer
=	O
"output"	pointer
;	O
}	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
,	O
"end"	pointer
)	O
)	O
{	O
fputs	function
(	O
"}\n"	pointer
,	O
dapfile	pointer
)	O
;	O
s	int
+=	O
4	int
;	O
statementtype	pointer
=	O
"end"	pointer
;	O
}	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
,	O
"if"	pointer
)	O
)	O
{	O
s	int
+=	O
3	int
;	O
fputs	function
(	O
"if ("	pointer
,	O
dapfile	pointer
)	O
;	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"then"	pointer
)	O
)	O
s	int
+=	O
opfix	function
(	O
step	pointer
+	O
s	int
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
")\n"	pointer
,	O
dapfile	pointer
)	O
;	O
s	int
+=	O
5	int
;	O
s	int
+=	O
statementtrans	function
(	O
step	pointer
+	O
s	int
,	O
dapfile	pointer
,	O
isoutput	pointer
)	O
-	O
2	int
;	O
statementtype	pointer
=	O
"if"	pointer
;	O
}	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
,	O
"else"	pointer
)	O
)	O
{	O
fputs	function
(	O
"else\n"	pointer
,	O
dapfile	pointer
)	O
;	O
s	int
+=	O
5	int
;	O
return	O
s	int
;	O
}	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"do"	pointer
)	O
)	O
{	O
s	int
+=	O
3	int
;	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"while"	pointer
)	O
)	O
{	O
s	int
+=	O
6	int
;	O
if	O
(	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"("	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing ( after do while\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
s	int
+=	O
2	int
;	O
fputs	function
(	O
"while ("	pointer
,	O
dapfile	pointer
)	O
;	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
")"	pointer
)	O
)	O
s	int
+=	O
opfix	function
(	O
step	pointer
+	O
s	int
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
")\n{\n"	pointer
,	O
dapfile	pointer
)	O
;	O
s	int
+=	O
2	int
;	O
statementtype	pointer
=	O
"do while"	pointer
;	O
}	O
else	O
{	O
fputs	function
(	O
"{\n"	pointer
,	O
dapfile	pointer
)	O
;	O
statementtype	pointer
=	O
"do"	pointer
;	O
}	O
}	O
else	O
{	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'\n'	O
)	O
putc	function
(	O
' '	O
,	O
dapfile	pointer
)	O
;	O
else	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'['	O
)	O
fputs	function
(	O
"[(int)("	pointer
,	O
dapfile	pointer
)	O
;	O
else	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
']'	O
)	O
fputs	function
(	O
")-1]"	pointer
,	O
dapfile	pointer
)	O
;	O
else	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
s	int
++	O
;	O
}	O
putc	function
(	O
';'	O
,	O
dapfile	pointer
)	O
;	O
putc	function
(	O
'\n'	O
,	O
dapfile	pointer
)	O
;	O
statementtype	pointer
=	O
"assignment"	pointer
;	O
}	O
if	O
(	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
";"	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing ; after %s statement in data step\n"	pointer
,	O
sbslineno	int
,	O
statementtype	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
s	int
+=	O
2	int
;	O
return	O
s	int
;	O
}	O
void	O
globaltrans	function
(	O
char	O
*	O
statement	pointer
,	O
FILE	struct
*	O
dapfile	pointer
)	O
{	O
int	O
s	int
;	O
if	O
(	O
!	O
linecmp	function
(	O
statement	pointer
,	O
"title"	pointer
)	O
)	O
{	O
fputs	function
(	O
"title("	pointer
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
statement	pointer
[	O
6	int
]	O
==	O
'"'	O
)	O
{	O
for	O
(	O
s	int
=	O
6	int
;	O
statement	pointer
[	O
s	int
]	O
&&	O
statement	pointer
[	O
s	int
]	O
!=	O
'\n'	O
;	O
s	int
++	O
)	O
putc	function
(	O
statement	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
s	int
++	O
;	O
if	O
(	O
statement	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing ; at end of title statement\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
statement	pointer
[	O
6	int
]	O
==	O
';'	O
)	O
fputs	function
(	O
"NULL"	pointer
,	O
dapfile	pointer
)	O
;	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: title must begin with \"\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
fputs	function
(	O
");\n"	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: unknown global statement: %s\n"	pointer
,	O
sbslineno	int
,	O
statement	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
void	O
datatrans	function
(	O
char	O
*	O
step	pointer
,	O
FILE	struct
*	O
dapfile	pointer
)	O
{	O
static	O
char	O
inputname	array
[	O
TOKENLEN	int
+	O
5	int
]	O
;	O
static	O
char	O
outputname	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
int	O
setnum	int
;	O
static	O
char	O
delim	array
[	O
5	int
]	O
;	O
static	O
char	O
var	array
[	O
MAXVARS	int
]	O
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
static	O
int	O
len	array
[	O
MAXVARS	int
]	O
;	O
int	O
vn	int
;	O
int	O
nvars	int
;	O
static	O
char	O
varname	pointer
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
int	O
v	int
;	O
int	O
s	int
;	O
int	O
sincr	int
;	O
int	O
inputisfile	int
;	O
static	O
char	O
skip	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
int	O
inputisnull	int
;	O
int	O
inputcolumn	int
;	O
int	O
sic	int
;	O
int	O
startcol	int
,	O
endcol	int
;	O
int	O
isdouble	int
;	O
int	O
firstdec	int
;	O
int	O
isoutput	pointer
;	O
int	O
dropping	int
;	O
int	O
keeping	int
;	O
int	O
start	pointer
;	O
int	O
bymark	int
;	O
int	O
nby	int
;	O
int	O
b	int
;	O
int	O
i	int
;	O
nvars	int
=	O
0	int
;	O
dropping	int
=	O
0	int
;	O
keeping	int
=	O
0	int
;	O
fputs	function
(	O
"sbstrans: processing data step...\n"	pointer
,	O
stderr	pointer
)	O
;	O
fflush	function
(	O
stderr	pointer
)	O
;	O
bymark	int
=	O
isby	function
(	O
step	pointer
)	O
;	O
if	O
(	O
(	O
s	int
=	O
findstatement	function
(	O
step	pointer
,	O
"title"	pointer
)	O
)	O
)	O
globaltrans	function
(	O
step	pointer
+	O
s	int
-	O
6	int
,	O
dapfile	pointer
)	O
;	O
inputisnull	int
=	O
0	int
;	O
inputcolumn	int
=	O
0	int
;	O
delim	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
(	O
inputisfile	int
=	O
findstatement	function
(	O
step	pointer
,	O
"infile"	pointer
)	O
)	O
)	O
{	O
s	int
=	O
inputisfile	int
+	O
linecpy	function
(	O
inputname	array
,	O
step	pointer
+	O
inputisfile	int
)	O
+	O
1	int
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"infile(%s, "	pointer
,	O
inputname	array
)	O
;	O
if	O
(	O
(	O
sincr	int
=	O
getoption	function
(	O
step	pointer
+	O
s	int
,	O
"delimiter"	pointer
,	O
delim	array
,	O
1	int
)	O
)	O
||	O
(	O
sincr	int
=	O
getoption	function
(	O
step	pointer
+	O
s	int
,	O
"dlm"	pointer
,	O
delim	array
,	O
1	int
)	O
)	O
)	O
{	O
s	int
+=	O
sincr	int
;	O
fputs	function
(	O
delim	array
,	O
dapfile	pointer
)	O
;	O
}	O
else	O
if	O
(	O
(	O
sic	int
=	O
findstatement	function
(	O
step	pointer
,	O
"input"	pointer
)	O
)	O
)	O
{	O
while	O
(	O
step	pointer
[	O
sic	int
]	O
&&	O
step	pointer
[	O
sic	int
]	O
!=	O
';'	O
)	O
{	O
while	O
(	O
step	pointer
[	O
sic	int
]	O
&&	O
step	pointer
[	O
sic	int
]	O
!=	O
'\n'	O
)	O
sic	int
++	O
;	O
sic	int
++	O
;	O
if	O
(	O
num	function
(	O
step	pointer
[	O
sic	int
]	O
)	O
)	O
{	O
if	O
(	O
!	O
inputcolumn	int
)	O
{	O
inputcolumn	int
=	O
1	int
;	O
putc	function
(	O
'"'	O
,	O
dapfile	pointer
)	O
;	O
endcol	int
=	O
0	int
;	O
}	O
for	O
(	O
startcol	int
=	O
0	int
;	O
step	pointer
[	O
sic	int
]	O
&&	O
num	function
(	O
step	pointer
[	O
sic	int
]	O
)	O
;	O
sic	int
++	O
)	O
startcol	int
=	O
10	int
*	O
startcol	int
+	O
step	pointer
[	O
sic	int
]	O
-	O
'0'	O
;	O
if	O
(	O
step	pointer
[	O
sic	int
]	O
!=	O
'\n'	O
||	O
startcol	int
!=	O
endcol	int
+	O
1	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: bad start column in input statement.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
sic	int
++	O
;	O
if	O
(	O
step	pointer
[	O
sic	int
]	O
==	O
'-'	O
)	O
{	O
for	O
(	O
sic	int
+=	O
2	int
,	O
endcol	int
=	O
0	int
;	O
step	pointer
[	O
sic	int
]	O
&&	O
num	function
(	O
step	pointer
[	O
sic	int
]	O
)	O
;	O
sic	int
++	O
)	O
endcol	int
=	O
10	int
*	O
endcol	int
+	O
step	pointer
[	O
sic	int
]	O
-	O
'0'	O
;	O
if	O
(	O
step	pointer
[	O
sic	int
]	O
!=	O
'\n'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: bad end column in input statement.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
sic	int
++	O
;	O
}	O
else	O
endcol	int
=	O
startcol	int
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"x%d"	pointer
,	O
endcol	int
-	O
startcol	int
+	O
1	int
)	O
;	O
}	O
else	O
break	O
;	O
}	O
}	O
if	O
(	O
inputcolumn	int
)	O
fputs	function
(	O
"\""	pointer
,	O
dapfile	pointer
)	O
;	O
else	O
if	O
(	O
!	O
delim	array
[	O
0	int
]	O
)	O
fputs	function
(	O
"\" \""	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
")\n{\n"	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
else	O
if	O
(	O
(	O
s	int
=	O
findstatement	function
(	O
step	pointer
,	O
"set"	pointer
)	O
)	O
)	O
{	O
s	int
+=	O
linecpy	function
(	O
inputname	array
,	O
step	pointer
+	O
s	int
)	O
+	O
1	int
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"inset (\"%s\")\n{\n"	pointer
,	O
inputname	array
)	O
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing ; or extra characters at end of set statement.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
(	O
s	int
=	O
findstatement	function
(	O
step	pointer
,	O
"merge"	pointer
)	O
)	O
)	O
{	O
fputs	function
(	O
"merge (\""	pointer
,	O
dapfile	pointer
)	O
;	O
for	O
(	O
setnum	int
=	O
0	int
;	O
setnum	int
<	O
2	int
;	O
setnum	int
++	O
)	O
{	O
s	int
+=	O
linecpy	function
(	O
inputname	array
,	O
step	pointer
+	O
s	int
)	O
+	O
1	int
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"%s\", \""	pointer
,	O
inputname	array
)	O
;	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"("	pointer
)	O
)	O
{	O
s	int
+=	O
2	int
;	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"keep"	pointer
)	O
||	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"drop"	pointer
)	O
)	O
{	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'd'	O
)	O
putc	function
(	O
'!'	O
,	O
dapfile	pointer
)	O
;	O
s	int
+=	O
5	int
;	O
if	O
(	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"="	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing = after keep or drop option in merge statement.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
s	int
+=	O
2	int
;	O
s	int
+=	O
putlines	function
(	O
step	pointer
+	O
s	int
,	O
dapfile	pointer
,	O
')'	O
)	O
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
!=	O
')'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing ) after keep or drop option in merge statement.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
s	int
+=	O
2	int
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: invalid dataset option in merge statement.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
if	O
(	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing ; at end of merge statement.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
sprintf	function
(	O
sbstmp	array
,	O
"sbstmp%02d"	pointer
,	O
++	O
sbstempnum	int
)	O
;	O
strcpy	function
(	O
inputname	array
,	O
sbstmp	array
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"\", \"%s\");\n"	pointer
,	O
sbstmp	array
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"inset(\"%s\")\n{\n"	pointer
,	O
sbstmp	array
)	O
;	O
}	O
else	O
{	O
inputisnull	int
=	O
1	int
;	O
fputs	function
(	O
"infile (NULL, NULL)\n{\n"	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
if	O
(	O
(	O
s	int
=	O
findstatement	function
(	O
step	pointer
,	O
"length"	pointer
)	O
)	O
)	O
{	O
fputs	function
(	O
"char "	pointer
,	O
dapfile	pointer
)	O
;	O
firstdec	int
=	O
1	int
;	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
s	int
+=	O
linecpy	function
(	O
varname	pointer
,	O
step	pointer
+	O
s	int
)	O
+	O
1	int
;	O
if	O
(	O
findvar	function
(	O
varname	pointer
,	O
var	array
,	O
nvars	int
)	O
==	O
nvars	int
)	O
{	O
if	O
(	O
firstdec	int
)	O
firstdec	int
=	O
0	int
;	O
else	O
putc	function
(	O
','	O
,	O
dapfile	pointer
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"%s["	pointer
,	O
varname	pointer
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: redeclaration of %s\n"	pointer
,	O
sbslineno	int
,	O
varname	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"$"	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing $ in length statement for %s\n"	pointer
,	O
sbslineno	int
,	O
varname	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
s	int
+=	O
2	int
;	O
s	int
+=	O
linecpy	function
(	O
varname	pointer
,	O
step	pointer
+	O
s	int
)	O
+	O
1	int
;	O
if	O
(	O
!	O
sscanf	function
(	O
varname	pointer
,	O
"%d"	pointer
,	O
len	array
+	O
nvars	int
)	O
||	O
len	array
[	O
nvars	int
]	O
<=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: bad length in length statement: %s\n"	pointer
,	O
sbslineno	int
,	O
varname	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
fprintf	function
(	O
dapfile	pointer
,	O
"%d]"	pointer
,	O
len	array
[	O
nvars	int
]	O
+	O
1	int
)	O
;	O
nvars	int
++	O
;	O
}	O
if	O
(	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing ; or extra characters at end of length statement.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
fputs	function
(	O
";\n"	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
isdouble	int
=	O
0	int
;	O
if	O
(	O
(	O
s	int
=	O
findstatement	function
(	O
step	pointer
,	O
"input"	pointer
)	O
)	O
)	O
{	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
s	int
+=	O
linecpy	function
(	O
varname	pointer
,	O
step	pointer
+	O
s	int
)	O
+	O
1	int
;	O
if	O
(	O
findvar	function
(	O
varname	pointer
,	O
var	array
,	O
nvars	int
)	O
==	O
nvars	int
)	O
{	O
isdouble	int
=	O
1	int
;	O
break	O
;	O
}	O
if	O
(	O
inputcolumn	int
)	O
{	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
num	function
(	O
step	pointer
[	O
s	int
]	O
)	O
)	O
s	int
++	O
;	O
s	int
++	O
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'-'	O
)	O
{	O
for	O
(	O
s	int
+=	O
2	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
num	function
(	O
step	pointer
[	O
s	int
]	O
)	O
;	O
s	int
++	O
)	O
;	O
s	int
++	O
;	O
}	O
}	O
}	O
}	O
for	O
(	O
s	int
=	O
0	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
;	O
s	int
++	O
)	O
;	O
if	O
(	O
!	O
step	pointer
[	O
s	int
]	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: null data step body or missing ; in data statement.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
for	O
(	O
s	int
+=	O
2	int
;	O
!	O
isdouble	int
&&	O
step	pointer
[	O
s	int
]	O
;	O
s	int
+=	O
2	int
)	O
{	O
if	O
(	O
nonaction	function
(	O
step	pointer
+	O
s	int
)	O
)	O
{	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
s	int
++	O
;	O
}	O
else	O
{	O
while	O
(	O
!	O
isdouble	int
&&	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
if	O
(	O
(	O
(	O
'a'	O
<=	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
<=	O
'z'	O
)	O
||	O
step	pointer
[	O
s	int
]	O
==	O
'_'	O
)	O
&&	O
!	O
iskeyword	function
(	O
step	pointer
+	O
s	int
)	O
)	O
{	O
s	int
+=	O
linecpy	function
(	O
varname	pointer
,	O
step	pointer
+	O
s	int
)	O
+	O
1	int
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
!=	O
'('	O
&&	O
strncmp	function
(	O
varname	pointer
,	O
"first."	pointer
,	O
6	int
)	O
&&	O
findvar	function
(	O
varname	pointer
,	O
var	array
,	O
nvars	int
)	O
==	O
nvars	int
)	O
{	O
isdouble	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
else	O
{	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
)	O
s	int
++	O
;	O
s	int
++	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
isdouble	int
)	O
{	O
fputs	function
(	O
"double "	pointer
,	O
dapfile	pointer
)	O
;	O
firstdec	int
=	O
1	int
;	O
if	O
(	O
(	O
s	int
=	O
findstatement	function
(	O
step	pointer
,	O
"input"	pointer
)	O
)	O
)	O
{	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
s	int
+=	O
linecpy	function
(	O
varname	pointer
,	O
step	pointer
+	O
s	int
)	O
+	O
1	int
;	O
if	O
(	O
findvar	function
(	O
varname	pointer
,	O
var	array
,	O
nvars	int
)	O
==	O
nvars	int
)	O
{	O
if	O
(	O
firstdec	int
)	O
firstdec	int
=	O
0	int
;	O
else	O
putc	function
(	O
','	O
,	O
dapfile	pointer
)	O
;	O
len	array
[	O
nvars	int
]	O
=	O
DBL	O
;	O
nvars	int
++	O
;	O
fputs	function
(	O
varname	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
if	O
(	O
inputcolumn	int
)	O
{	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
num	function
(	O
step	pointer
[	O
s	int
]	O
)	O
)	O
s	int
++	O
;	O
s	int
++	O
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'-'	O
)	O
{	O
for	O
(	O
s	int
+=	O
2	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
num	function
(	O
step	pointer
[	O
s	int
]	O
)	O
;	O
s	int
++	O
)	O
;	O
s	int
++	O
;	O
}	O
}	O
}	O
}	O
for	O
(	O
s	int
=	O
0	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
;	O
s	int
++	O
)	O
;	O
if	O
(	O
!	O
step	pointer
[	O
s	int
]	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: null data step body or missing ; in data statement.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
for	O
(	O
s	int
+=	O
2	int
;	O
step	pointer
[	O
s	int
]	O
;	O
s	int
+=	O
2	int
)	O
{	O
if	O
(	O
nonaction	function
(	O
step	pointer
+	O
s	int
)	O
)	O
{	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
s	int
++	O
;	O
}	O
else	O
{	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
if	O
(	O
(	O
(	O
'a'	O
<=	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
<=	O
'z'	O
)	O
||	O
step	pointer
[	O
s	int
]	O
==	O
'_'	O
)	O
&&	O
!	O
iskeyword	function
(	O
step	pointer
+	O
s	int
)	O
)	O
{	O
s	int
+=	O
linecpy	function
(	O
varname	pointer
,	O
step	pointer
+	O
s	int
)	O
+	O
1	int
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
!=	O
'('	O
&&	O
strncmp	function
(	O
varname	pointer
,	O
"first."	pointer
,	O
6	int
)	O
&&	O
findvar	function
(	O
varname	pointer
,	O
var	array
,	O
nvars	int
)	O
==	O
nvars	int
)	O
{	O
if	O
(	O
firstdec	int
)	O
firstdec	int
=	O
0	int
;	O
else	O
putc	function
(	O
','	O
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
varname	pointer
,	O
dapfile	pointer
)	O
;	O
len	array
[	O
nvars	int
]	O
=	O
DBL	O
;	O
nvars	int
++	O
;	O
}	O
}	O
else	O
{	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
)	O
s	int
++	O
;	O
s	int
++	O
;	O
}	O
}	O
}	O
}	O
fputs	function
(	O
";\n"	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
if	O
(	O
bymark	int
>=	O
0	int
)	O
{	O
fputs	function
(	O
"int"	pointer
,	O
dapfile	pointer
)	O
;	O
for	O
(	O
s	int
=	O
bymark	int
,	O
nby	int
=	O
0	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
;	O
nby	int
++	O
)	O
{	O
s	int
+=	O
linecpy	function
(	O
varname	pointer
,	O
step	pointer
+	O
s	int
)	O
+	O
1	int
;	O
if	O
(	O
nby	int
)	O
putc	function
(	O
','	O
,	O
dapfile	pointer
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
" _%s_"	pointer
,	O
varname	pointer
)	O
;	O
}	O
fprintf	function
(	O
dapfile	pointer
,	O
", _partv_[%d], _firstobs_;\n"	pointer
,	O
nby	int
)	O
;	O
}	O
if	O
(	O
inputisfile	int
)	O
{	O
if	O
(	O
(	O
s	int
=	O
findstatement	function
(	O
step	pointer
,	O
"input"	pointer
)	O
)	O
)	O
{	O
fputs	function
(	O
"input(\""	pointer
,	O
dapfile	pointer
)	O
;	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
)	O
{	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
s	int
++	O
;	O
}	O
s	int
++	O
;	O
putc	function
(	O
' '	O
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
inputcolumn	int
)	O
{	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
num	function
(	O
step	pointer
[	O
s	int
]	O
)	O
)	O
s	int
++	O
;	O
s	int
++	O
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'-'	O
)	O
{	O
for	O
(	O
s	int
+=	O
2	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
num	function
(	O
step	pointer
[	O
s	int
]	O
)	O
;	O
s	int
++	O
)	O
;	O
s	int
++	O
;	O
}	O
}	O
}	O
fputs	function
(	O
"\");\n"	pointer
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing ; in input statement.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: infile statement present but missing input statement.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
s	int
=	O
5	int
;	O
if	O
(	O
'a'	O
<=	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
<=	O
'z'	O
)	O
{	O
s	int
+=	O
linecpy	function
(	O
outputname	array
,	O
step	pointer
+	O
s	int
)	O
+	O
1	int
;	O
strcpy	function
(	O
sbstmp	array
,	O
outputname	array
)	O
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
!=	O
'('	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing ; or extra characters at end of data statement.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
else	O
{	O
sprintf	function
(	O
sbstmp	array
,	O
"sbstmp%02d"	pointer
,	O
++	O
sbstempnum	int
)	O
;	O
strcpy	function
(	O
outputname	array
,	O
sbstmp	array
)	O
;	O
}	O
fprintf	function
(	O
dapfile	pointer
,	O
"outset(\"%s\", \""	pointer
,	O
outputname	array
)	O
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'('	O
)	O
{	O
s	int
+=	O
2	int
;	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"drop"	pointer
)	O
)	O
{	O
dropping	int
=	O
1	int
;	O
putc	function
(	O
'!'	O
,	O
dapfile	pointer
)	O
;	O
}	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"keep"	pointer
)	O
)	O
keeping	int
=	O
1	int
;	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: bad option for data statement.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
s	int
+=	O
5	int
;	O
if	O
(	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"="	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing = after option name in data statement.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
s	int
+=	O
2	int
;	O
s	int
+=	O
putlines	function
(	O
step	pointer
+	O
s	int
,	O
dapfile	pointer
,	O
')'	O
)	O
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
!=	O
')'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing ) after option for data statement.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
s	int
+=	O
2	int
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing ; at end of data statement.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
(	O
s	int
=	O
findstatement	function
(	O
step	pointer
,	O
"drop"	pointer
)	O
)	O
)	O
{	O
dropping	int
=	O
1	int
;	O
putc	function
(	O
'!'	O
,	O
dapfile	pointer
)	O
;	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'\n'	O
)	O
putc	function
(	O
' '	O
,	O
dapfile	pointer
)	O
;	O
else	O
if	O
(	O
alphanum	function
(	O
step	pointer
[	O
s	int
]	O
)	O
)	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: invalid character %c in variable name in drop statement.\n"	pointer
,	O
sbslineno	int
,	O
step	pointer
[	O
s	int
]	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
s	int
++	O
;	O
}	O
}	O
else	O
if	O
(	O
(	O
s	int
=	O
findstatement	function
(	O
step	pointer
,	O
"keep"	pointer
)	O
)	O
)	O
{	O
keeping	int
=	O
1	int
;	O
s	int
+=	O
putlines	function
(	O
step	pointer
+	O
s	int
,	O
dapfile	pointer
,	O
';'	O
)	O
;	O
}	O
if	O
(	O
(	O
dropping	int
||	O
!	O
keeping	int
)	O
&&	O
(	O
s	int
=	O
bymark	int
)	O
>=	O
0	int
)	O
{	O
start	pointer
=	O
1	int
;	O
if	O
(	O
!	O
dropping	int
)	O
fputs	function
(	O
"!_firstobs_ _partv_ "	pointer
,	O
dapfile	pointer
)	O
;	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
if	O
(	O
start	pointer
)	O
putc	function
(	O
'_'	O
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'\n'	O
)	O
{	O
fputs	function
(	O
"_ "	pointer
,	O
dapfile	pointer
)	O
;	O
start	pointer
=	O
1	int
;	O
}	O
else	O
{	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
start	pointer
=	O
0	int
;	O
}	O
s	int
++	O
;	O
}	O
}	O
fputs	function
(	O
"\");\n"	pointer
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
(	O
s	int
=	O
bymark	int
)	O
>=	O
0	int
)	O
{	O
fputs	function
(	O
"dap_list(\""	pointer
,	O
dapfile	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"\", _partv_, %d);\n"	pointer
,	O
nby	int
)	O
;	O
fputs	function
(	O
"_firstobs_ = 1;\n"	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
for	O
(	O
v	int
=	O
0	int
;	O
v	int
<	O
nvars	int
;	O
v	int
++	O
)	O
{	O
if	O
(	O
len	array
[	O
v	int
]	O
>	O
0	int
)	O
fprintf	function
(	O
dapfile	pointer
,	O
"%s[%d] = '\\0';\n"	pointer
,	O
var	array
[	O
v	int
]	O
,	O
len	array
[	O
v	int
]	O
)	O
;	O
}	O
if	O
(	O
!	O
inputisnull	int
)	O
{	O
if	O
(	O
inputisfile	int
&&	O
(	O
s	int
=	O
getoption	function
(	O
step	pointer
+	O
inputisfile	int
,	O
"firstobs"	pointer
,	O
skip	array
,	O
1	int
)	O
)	O
)	O
fprintf	function
(	O
dapfile	pointer
,	O
"skip(%s - 1);\n"	pointer
,	O
skip	array
)	O
;	O
fputs	function
(	O
"while (step())\n{\n"	pointer
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
(	O
s	int
=	O
bymark	int
)	O
>=	O
0	int
)	O
{	O
for	O
(	O
b	int
=	O
1	int
;	O
b	int
<=	O
nby	int
;	O
b	int
++	O
)	O
{	O
fprintf	function
(	O
dapfile	pointer
,	O
"if (_firstobs_ || dap_newpart(_partv_, %d))\n"	pointer
,	O
b	int
)	O
;	O
s	int
+=	O
linecpy	function
(	O
varname	pointer
,	O
step	pointer
+	O
s	int
)	O
+	O
1	int
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"_%s_ = 1;\nelse _%s_ = 0;\n"	pointer
,	O
varname	pointer
,	O
varname	pointer
)	O
;	O
}	O
}	O
}	O
for	O
(	O
s	int
=	O
0	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
;	O
s	int
++	O
)	O
;	O
if	O
(	O
!	O
step	pointer
[	O
s	int
]	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: null data step body or missing ; in data statement.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
for	O
(	O
s	int
+=	O
2	int
,	O
isoutput	pointer
=	O
0	int
;	O
step	pointer
[	O
s	int
]	O
;	O
)	O
s	int
+=	O
statementtrans	function
(	O
step	pointer
+	O
s	int
,	O
dapfile	pointer
,	O
&	O
isoutput	pointer
)	O
;	O
if	O
(	O
!	O
isoutput	pointer
)	O
fputs	function
(	O
"output();\n"	pointer
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
!	O
inputisnull	int
)	O
{	O
if	O
(	O
bymark	int
>=	O
0	int
)	O
fputs	function
(	O
"_firstobs_ = 0;\n"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"}\n"	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
fputs	function
(	O
"}\n"	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
void	O
proctrans	function
(	O
char	O
*	O
step	pointer
,	O
FILE	struct
*	O
dapfile	pointer
)	O
{	O
int	O
s	int
;	O
char	O
procname	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
linecpy	function
(	O
procname	array
,	O
step	pointer
+	O
5	int
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: processing proc %s...\n"	pointer
,	O
procname	array
)	O
;	O
fflush	function
(	O
stderr	pointer
)	O
;	O
if	O
(	O
linecmp	function
(	O
step	pointer
+	O
5	int
,	O
"dap"	pointer
)	O
&&	O
(	O
s	int
=	O
findstatement	function
(	O
step	pointer
,	O
"title"	pointer
)	O
)	O
)	O
globaltrans	function
(	O
step	pointer
+	O
s	int
-	O
6	int
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
5	int
,	O
"print"	pointer
)	O
)	O
printtrans	function
(	O
step	pointer
+	O
11	int
,	O
dapfile	pointer
)	O
;	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
5	int
,	O
"means"	pointer
)	O
)	O
meanstrans	function
(	O
step	pointer
+	O
11	int
,	O
dapfile	pointer
)	O
;	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
5	int
,	O
"sort"	pointer
)	O
)	O
sorttrans	function
(	O
step	pointer
+	O
10	int
,	O
dapfile	pointer
)	O
;	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
5	int
,	O
"chart"	pointer
)	O
)	O
charttrans	function
(	O
step	pointer
+	O
11	int
,	O
dapfile	pointer
)	O
;	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
5	int
,	O
"datasets"	pointer
)	O
)	O
datasetstrans	function
(	O
step	pointer
+	O
14	int
,	O
dapfile	pointer
)	O
;	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
5	int
,	O
"freq"	pointer
)	O
)	O
freqtrans	function
(	O
step	pointer
+	O
10	int
,	O
dapfile	pointer
)	O
;	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
5	int
,	O
"tabulate"	pointer
)	O
)	O
tabulatetrans	function
(	O
step	pointer
+	O
14	int
,	O
dapfile	pointer
)	O
;	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
5	int
,	O
"corr"	pointer
)	O
)	O
corrtrans	function
(	O
step	pointer
+	O
10	int
,	O
dapfile	pointer
)	O
;	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
5	int
,	O
"plot"	pointer
)	O
)	O
plottrans	function
(	O
step	pointer
+	O
10	int
,	O
dapfile	pointer
)	O
;	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
5	int
,	O
"rank"	pointer
)	O
)	O
ranktrans	function
(	O
step	pointer
+	O
10	int
,	O
dapfile	pointer
)	O
;	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
5	int
,	O
"univariate"	pointer
)	O
)	O
univariatetrans	function
(	O
step	pointer
+	O
16	int
,	O
dapfile	pointer
)	O
;	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
5	int
,	O
"glm"	pointer
)	O
)	O
glmtrans	function
(	O
step	pointer
+	O
9	int
,	O
dapfile	pointer
)	O
;	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
5	int
,	O
"logistic"	pointer
)	O
)	O
logistictrans	function
(	O
step	pointer
+	O
14	int
,	O
dapfile	pointer
)	O
;	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
5	int
,	O
"npar1way"	pointer
)	O
)	O
npar1waytrans	function
(	O
step	pointer
+	O
14	int
,	O
dapfile	pointer
)	O
;	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
5	int
,	O
"reg"	pointer
)	O
)	O
regtrans	function
(	O
step	pointer
+	O
9	int
,	O
dapfile	pointer
)	O
;	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
5	int
,	O
"dap"	pointer
)	O
)	O
daptrans	function
(	O
step	pointer
+	O
9	int
,	O
dapfile	pointer
)	O
;	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
5	int
,	O
"import"	pointer
)	O
)	O
importtrans	function
(	O
step	pointer
+	O
9	int
,	O
dapfile	pointer
)	O
;	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
5	int
,	O
"surveyselect"	pointer
)	O
)	O
surveyselecttrans	function
(	O
step	pointer
+	O
9	int
,	O
dapfile	pointer
)	O
;	O
else	O
{	O
for	O
(	O
s	int
=	O
5	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
;	O
s	int
++	O
)	O
;	O
step	pointer
[	O
s	int
]	O
=	O
'\0'	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: unknown proc.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
void	O
header	function
(	O
FILE	struct
*	O
dap	pointer
)	O
{	O
fputs	function
(	O
"#include <dap.h>\n"	pointer
,	O
dap	pointer
)	O
;	O
fputs	function
(	O
"void main()\n"	pointer
,	O
dap	pointer
)	O
;	O
fputs	function
(	O
"{\n"	pointer
,	O
dap	pointer
)	O
;	O
fprintf	function
(	O
dap	pointer
,	O
"pict *_sbspict_[%d];\n"	pointer
,	O
MAXPICTS	int
)	O
;	O
fprintf	function
(	O
dap	pointer
,	O
"int _sbspictcnt_[%d];\n"	pointer
,	O
MAXPICTS	int
)	O
;	O
fprintf	function
(	O
dap	pointer
,	O
"int _sbspictpage_[%d];\n"	pointer
,	O
MAXPICTS	int
)	O
;	O
fputs	function
(	O
"int _sbsnpicts_ = 0, _sbspictn_, _sbspictindex_;\n"	pointer
,	O
dap	pointer
)	O
;	O
}	O
void	O
trailer	function
(	O
FILE	struct
*	O
dap	pointer
)	O
{	O
if	O
(	O
sbshaspicts	int
)	O
{	O
fprintf	function
(	O
dap	pointer
,	O
"pict_port(%d);\n"	pointer
,	O
MAXPICTS	int
)	O
;	O
fputs	function
(	O
"for (_sbspictn_ = 0; _sbspictn_ < _sbsnpicts_; _sbspictn_++)\n{\n"	pointer
,	O
dap	pointer
)	O
;	O
fputs	function
(	O
"for (_sbspictindex_ = 0; _sbspictindex_ < _sbspictcnt_[_sbspictn_];"	pointer
,	O
dap	pointer
)	O
;	O
fputs	function
(	O
"_sbspictindex_++)\n{\n"	pointer
,	O
dap	pointer
)	O
;	O
fputs	function
(	O
"pict_page();\n"	pointer
,	O
dap	pointer
)	O
;	O
fputs	function
(	O
"pict_show(_sbspict_[_sbspictn_] + _sbspictindex_ * _sbspictpage_[_sbspictn_]);\n"	pointer
,	O
dap	pointer
)	O
;	O
fputs	function
(	O
"}\n}\npict_end();\n"	pointer
,	O
dap	pointer
)	O
;	O
}	O
fputs	function
(	O
"}\n"	pointer
,	O
dap	pointer
)	O
;	O
}	O
int	O
isby	function
(	O
char	O
*	O
step	pointer
)	O
{	O
int	O
s	int
;	O
for	O
(	O
s	int
=	O
0	int
;	O
step	pointer
[	O
s	int
]	O
;	O
s	int
+=	O
2	int
)	O
{	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"by"	pointer
)	O
)	O
return	O
s	int
+	O
3	int
;	O
else	O
{	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
s	int
++	O
;	O
}	O
}	O
return	O
-	O
1	int
;	O
}	O
int	O
getoption	function
(	O
char	O
*	O
step	pointer
,	O
char	O
*	O
key	pointer
,	O
char	O
*	O
optvalue	pointer
,	O
int	O
equals	int
)	O
{	O
int	O
s	int
;	O
int	O
keylen	int
;	O
keylen	int
=	O
strlen	function
(	O
key	pointer
)	O
;	O
for	O
(	O
s	int
=	O
0	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
;	O
s	int
++	O
)	O
{	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
key	pointer
)	O
)	O
{	O
s	int
+=	O
keylen	int
+	O
1	int
;	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"="	pointer
)	O
)	O
{	O
s	int
+=	O
2	int
;	O
if	O
(	O
optvalue	pointer
)	O
s	int
+=	O
linecpy	function
(	O
optvalue	pointer
,	O
step	pointer
+	O
s	int
)	O
+	O
1	int
;	O
return	O
s	int
;	O
}	O
else	O
if	O
(	O
equals	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing = in option\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
)	O
s	int
++	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
findstatement	function
(	O
char	O
*	O
step	pointer
,	O
char	O
*	O
key	pointer
)	O
{	O
int	O
s	int
;	O
int	O
keylen	int
;	O
keylen	int
=	O
strlen	function
(	O
key	pointer
)	O
;	O
for	O
(	O
s	int
=	O
0	int
;	O
step	pointer
[	O
s	int
]	O
;	O
s	int
+=	O
2	int
)	O
{	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
key	pointer
)	O
)	O
return	O
s	int
+	O
keylen	int
+	O
1	int
;	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
s	int
++	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
countparts	function
(	O
char	O
*	O
step	pointer
,	O
char	O
*	O
setname	pointer
,	O
FILE	struct
*	O
dapfile	pointer
)	O
{	O
char	O
sortname	array
[	O
TOKENLEN	int
+	O
4	int
+	O
1	int
]	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"sort(\"%s\", \""	pointer
,	O
setname	pointer
)	O
;	O
strcpy	function
(	O
sortname	array
,	O
setname	pointer
)	O
;	O
strcat	function
(	O
sortname	array
,	O
".srt"	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\", \"u\");\n"	pointer
,	O
dapfile	pointer
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"inset(\"%s\")\n{\n"	pointer
,	O
sortname	array
)	O
;	O
fputs	function
(	O
"for (_sbspictcnt_[_sbsnpicts_] = 0; step(); _sbspictcnt_[_sbsnpicts_]++)\n;\n}\n"	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
int	O
copylist	function
(	O
char	O
*	O
step	pointer
,	O
char	O
*	O
key	pointer
,	O
FILE	struct
*	O
dapfile	pointer
)	O
{	O
int	O
s	int
;	O
int	O
start	pointer
;	O
for	O
(	O
s	int
=	O
0	int
,	O
start	pointer
=	O
-	O
1	int
;	O
step	pointer
[	O
s	int
]	O
;	O
s	int
+=	O
2	int
)	O
{	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
key	pointer
)	O
)	O
{	O
s	int
+=	O
strlen	function
(	O
key	pointer
)	O
+	O
1	int
;	O
start	pointer
=	O
s	int
;	O
putc	function
(	O
' '	O
,	O
dapfile	pointer
)	O
;	O
s	int
+=	O
putlines	function
(	O
step	pointer
+	O
s	int
,	O
dapfile	pointer
,	O
';'	O
)	O
;	O
}	O
else	O
{	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
s	int
++	O
;	O
}	O
}	O
return	O
start	pointer
;	O
}	O
void	O
sbstrans	function
(	O
char	O
*	O
name	pointer
)	O
{	O
FILE	struct
*	O
sbs	pointer
,	O
*	O
dap	pointer
;	O
static	O
char	O
step	pointer
[	O
STEPLEN	int
+	O
1	int
]	O
;	O
int	O
steptype	int
;	O
if	O
(	O
!	O
(	O
sbs	pointer
=	O
fopen	function
(	O
name	pointer
,	O
"r"	pointer
)	O
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: can't read %s\n"	pointer
,	O
name	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
namecvt	function
(	O
name	pointer
)	O
;	O
if	O
(	O
!	O
(	O
dap	pointer
=	O
fopen	function
(	O
name	pointer
,	O
"w"	pointer
)	O
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: can't write %s\n"	pointer
,	O
name	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
sbstempnum	int
=	O
0	int
;	O
sbslineno	int
=	O
1	int
;	O
sbshaspicts	int
=	O
0	int
;	O
header	function
(	O
dap	pointer
)	O
;	O
sbstmp	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
newline	int
=	O
1	int
;	O
incomment	int
=	O
0	int
;	O
inquote1	int
=	O
0	int
;	O
inquote2	int
=	O
0	int
;	O
escape	int
=	O
0	int
;	O
while	O
(	O
(	O
steptype	int
=	O
getstep	function
(	O
sbs	pointer
,	O
step	pointer
)	O
)	O
)	O
{	O
switch	O
(	O
steptype	int
)	O
{	O
case	O
DATA	int
:	O
datatrans	function
(	O
step	pointer
,	O
dap	pointer
)	O
;	O
break	O
;	O
case	O
PROC	int
:	O
proctrans	function
(	O
step	pointer
,	O
dap	pointer
)	O
;	O
break	O
;	O
}	O
}	O
trailer	function
(	O
dap	pointer
)	O
;	O
fclose	function
(	O
sbs	pointer
)	O
;	O
fclose	function
(	O
dap	pointer
)	O
;	O
}	O
