static	O
struct	O
dico_option	struct
*	O
find_opt	function
(	O
struct	O
dico_option	struct
*	O
opt	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
const	O
char	O
*	O
*	O
value	pointer
)	O
{	O
size_t	long
len	int
=	O
strlen	function
(	O
str	pointer
)	O
;	O
int	O
isbool	int
;	O
if	O
(	O
len	int
>	O
2	int
&&	O
memcmp	function
(	O
str	pointer
,	O
"no"	pointer
,	O
2	int
)	O
==	O
0	int
)	O
{	O
*	O
value	pointer
=	O
NULL	O
;	O
str	pointer
+=	O
2	int
;	O
isbool	int
=	O
1	int
;	O
}	O
else	O
{	O
isbool	int
=	O
0	int
;	O
*	O
value	pointer
=	O
str	pointer
;	O
}	O
for	O
(	O
;	O
opt	pointer
->	O
name	pointer
;	O
opt	pointer
++	O
)	O
{	O
if	O
(	O
len	int
>=	O
opt	pointer
->	O
len	int
&&	O
memcmp	function
(	O
opt	pointer
->	O
name	pointer
,	O
str	pointer
,	O
opt	pointer
->	O
len	int
)	O
==	O
0	int
&&	O
(	O
!	O
isbool	int
||	O
opt	pointer
->	O
type	enum
==	O
dico_opt_bool	int
)	O
)	O
{	O
int	O
eq	int
=	O
str	pointer
[	O
opt	pointer
->	O
len	int
]	O
==	O
'='	O
;	O
switch	O
(	O
opt	pointer
->	O
type	enum
)	O
{	O
case	O
dico_opt_long	int
:	O
case	O
dico_opt_string	int
:	O
case	O
dico_opt_const_string	int
:	O
case	O
dico_opt_enum	int
:	O
if	O
(	O
!	O
eq	int
)	O
continue	O
;	O
*	O
value	pointer
=	O
str	pointer
+	O
opt	pointer
->	O
len	int
+	O
1	int
;	O
break	O
;	O
case	O
dico_opt_null	int
:	O
if	O
(	O
eq	int
)	O
*	O
value	pointer
=	O
str	pointer
+	O
opt	pointer
->	O
len	int
+	O
1	int
;	O
else	O
*	O
value	pointer
=	O
NULL	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
eq	int
)	O
continue	O
;	O
break	O
;	O
}	O
return	O
opt	pointer
;	O
}	O
}	O
return	O
NULL	O
;	O
}	O
int	O
find_value	function
(	O
const	O
char	O
*	O
*	O
enumstr	pointer
,	O
const	O
char	O
*	O
value	pointer
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
*	O
enumstr	pointer
;	O
enumstr	pointer
++	O
,	O
i	int
++	O
)	O
if	O
(	O
strcmp	function
(	O
*	O
enumstr	pointer
,	O
value	pointer
)	O
==	O
0	int
)	O
return	O
i	int
;	O
return	O
-	O
1	int
;	O
}	O
int	O
dico_parseopt	function
(	O
struct	O
dico_option	struct
*	O
opt	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
flags	int
,	O
int	O
*	O
pindex	pointer
)	O
{	O
int	O
i	int
;	O
long	O
n	long
;	O
char	O
*	O
s	pointer
;	O
int	O
rc	int
=	O
0	int
;	O
const	O
char	O
*	O
modname	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
_dico_libi18n_init	function
(	O
)	O
;	O
for	O
(	O
i	int
=	O
(	O
flags	int
&	O
DICO_PARSEOPT_PARSE_ARGV0	int
)	O
?	O
0	int
:	O
1	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
const	O
char	O
*	O
value	pointer
;	O
struct	O
dico_option	struct
*	O
p	pointer
=	O
find_opt	function
(	O
opt	pointer
,	O
argv	pointer
[	O
i	int
]	O
,	O
&	O
value	pointer
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
if	O
(	O
pindex	pointer
)	O
{	O
if	O
(	O
flags	int
&	O
DICO_PARSEOPT_PERMUTE	int
)	O
{	O
int	O
j	int
;	O
for	O
(	O
j	int
=	O
i	int
+	O
1	int
;	O
j	int
<	O
argc	int
;	O
j	int
++	O
)	O
if	O
(	O
(	O
p	pointer
=	O
find_opt	function
(	O
opt	pointer
,	O
argv	pointer
[	O
j	int
]	O
,	O
&	O
value	pointer
)	O
)	O
)	O
break	O
;	O
if	O
(	O
p	pointer
)	O
{	O
char	O
*	O
tmp	pointer
=	O
argv	pointer
[	O
j	int
]	O
;	O
argv	pointer
[	O
j	int
]	O
=	O
argv	pointer
[	O
i	int
]	O
;	O
argv	pointer
[	O
i	int
]	O
=	O
tmp	pointer
;	O
}	O
else	O
break	O
;	O
}	O
else	O
break	O
;	O
}	O
else	O
{	O
dico_log	function
(	O
L_ERR	int
,	O
0	int
,	O
_	O
(	O
"%s: %s: unknown option"	pointer
)	O
,	O
modname	pointer
,	O
argv	pointer
[	O
i	int
]	O
)	O
;	O
rc	int
=	O
1	int
;	O
continue	O
;	O
}	O
}	O
switch	O
(	O
p	pointer
->	O
type	enum
)	O
{	O
case	O
dico_opt_long	int
:	O
n	long
=	O
strtol	function
(	O
value	pointer
,	O
&	O
s	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
s	pointer
)	O
{	O
dico_log	function
(	O
L_ERR	int
,	O
0	int
,	O
_	O
(	O
"%s: %s: %s is not a valid number"	pointer
)	O
,	O
modname	pointer
,	O
p	pointer
->	O
name	pointer
,	O
value	pointer
)	O
;	O
rc	int
=	O
1	int
;	O
continue	O
;	O
}	O
*	O
(	O
long	O
*	O
)	O
p	pointer
->	O
data	pointer
=	O
n	long
;	O
break	O
;	O
case	O
dico_opt_const	int
:	O
*	O
(	O
long	O
*	O
)	O
p	pointer
->	O
data	pointer
=	O
p	pointer
->	O
v	union
.	O
value	pointer
;	O
break	O
;	O
case	O
dico_opt_const_string	int
:	O
*	O
(	O
const	O
char	O
*	O
*	O
)	O
p	pointer
->	O
data	pointer
=	O
value	pointer
;	O
break	O
;	O
case	O
dico_opt_string	int
:	O
*	O
(	O
const	O
char	O
*	O
*	O
)	O
p	pointer
->	O
data	pointer
=	O
strdup	function
(	O
value	pointer
)	O
;	O
break	O
;	O
case	O
dico_opt_bool	int
:	O
if	O
(	O
p	pointer
->	O
v	union
.	O
value	pointer
)	O
{	O
if	O
(	O
value	pointer
)	O
*	O
(	O
int	O
*	O
)	O
p	pointer
->	O
data	pointer
|=	O
p	pointer
->	O
v	union
.	O
value	pointer
;	O
else	O
*	O
(	O
int	O
*	O
)	O
p	pointer
->	O
data	pointer
&=	O
~	O
p	pointer
->	O
v	union
.	O
value	pointer
;	O
}	O
else	O
*	O
(	O
int	O
*	O
)	O
p	pointer
->	O
data	pointer
=	O
value	pointer
!=	O
NULL	O
;	O
break	O
;	O
case	O
dico_opt_bitmask	int
:	O
*	O
(	O
int	O
*	O
)	O
p	pointer
->	O
data	pointer
|=	O
p	pointer
->	O
v	union
.	O
value	pointer
;	O
break	O
;	O
case	O
dico_opt_bitmask_rev	int
:	O
*	O
(	O
int	O
*	O
)	O
p	pointer
->	O
data	pointer
&=	O
~	O
p	pointer
->	O
v	union
.	O
value	pointer
;	O
break	O
;	O
case	O
dico_opt_enum	int
:	O
n	long
=	O
find_value	function
(	O
p	pointer
->	O
v	union
.	O
enumstr	pointer
,	O
value	pointer
)	O
;	O
if	O
(	O
n	long
==	O
-	O
1	int
)	O
{	O
dico_log	function
(	O
L_ERR	int
,	O
0	int
,	O
_	O
(	O
"%s: %s: invalid value %s"	pointer
)	O
,	O
modname	pointer
,	O
p	pointer
->	O
name	pointer
,	O
value	pointer
)	O
;	O
rc	int
=	O
1	int
;	O
continue	O
;	O
}	O
*	O
(	O
int	O
*	O
)	O
p	pointer
->	O
data	pointer
=	O
n	long
;	O
break	O
;	O
case	O
dico_opt_null	int
:	O
break	O
;	O
}	O
if	O
(	O
p	pointer
->	O
func	pointer
&&	O
p	pointer
->	O
func	pointer
(	O
p	pointer
,	O
value	pointer
)	O
)	O
rc	int
=	O
1	int
;	O
}	O
if	O
(	O
pindex	pointer
)	O
*	O
pindex	pointer
=	O
i	int
;	O
return	O
rc	int
;	O
}	O
