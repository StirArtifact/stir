static	O
const	O
int	O
cgm_horizontal_alignment_style	array
[	O
PL_NUM_HORIZ_JUST_TYPES	int
]	O
=	O
{	O
CGM_ALIGN_LEFT	int
,	O
CGM_ALIGN_CENTER	int
,	O
CGM_ALIGN_RIGHT	int
}	O
;	O
static	O
const	O
char	O
*	O
const	O
cgm_horizontal_alignment_style_string	array
[	O
PL_NUM_HORIZ_JUST_TYPES	int
]	O
=	O
{	O
"left"	pointer
,	O
"ctr"	pointer
,	O
"right"	pointer
}	O
;	O
static	O
const	O
int	O
cgm_vertical_alignment_style	array
[	O
PL_NUM_VERT_JUST_TYPES	int
]	O
=	O
{	O
CGM_ALIGN_TOP	int
,	O
CGM_ALIGN_HALF	int
,	O
CGM_ALIGN_BASE	int
,	O
CGM_ALIGN_BOTTOM	int
,	O
CGM_ALIGN_CAP	int
}	O
;	O
static	O
const	O
char	O
*	O
const	O
cgm_vertical_alignment_style_string	array
[	O
PL_NUM_VERT_JUST_TYPES	int
]	O
=	O
{	O
"top"	pointer
,	O
"half"	pointer
,	O
"base"	pointer
,	O
"bottom"	pointer
,	O
"cap"	pointer
}	O
;	O
double	O
_pl_c_paint_text_string	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
const	O
unsigned	O
char	O
*	O
s	pointer
,	O
int	O
h_just	int
,	O
int	O
v_just	int
)	O
{	O
int	O
master_font_index	int
,	O
desired_cgm_font_id	int
;	O
double	O
theta	double
,	O
costheta	double
,	O
sintheta	double
;	O
double	O
user_text_transformation_matrix	array
[	O
6	int
]	O
;	O
double	O
text_transformation_matrix	array
[	O
6	int
]	O
;	O
int	O
desired_char_base_vector_x	int
,	O
desired_char_base_vector_y	int
;	O
int	O
desired_char_up_vector_x	int
,	O
desired_char_up_vector_y	int
;	O
double	O
relative_cap_height	double
,	O
user_cap_height	double
;	O
double	O
up_vector_x	double
,	O
up_vector_y	double
,	O
cap_height	double
;	O
double	O
base_vector_x	double
,	O
base_vector_y	double
,	O
base_width	double
;	O
int	O
desired_char_height	int
,	O
desired_base_width	int
;	O
bool	enum
font_is_symbol	enum
,	O
need_lower_half	enum
,	O
need_upper_half	enum
;	O
bool	enum
set_lower_half_charset	enum
=	O
false	int
,	O
set_upper_half_charset	enum
=	O
false	int
;	O
int	O
lower_half_charset	int
=	O
0	int
,	O
upper_half_charset	int
=	O
0	int
;	O
const	O
unsigned	O
char	O
*	O
t	pointer
;	O
double	O
width	array
;	O
int	O
desired_cgm_h_alignment	int
,	O
desired_cgm_v_alignment	int
;	O
int	O
byte_count	pointer
,	O
data_byte_count	pointer
,	O
data_len	int
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
!=	O
PL_F_POSTSCRIPT	int
)	O
return	O
0.0	int
;	O
if	O
(	O
*	O
s	pointer
==	O
(	O
unsigned	O
char	O
)	O
'\0'	O
)	O
return	O
0.0	int
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
==	O
0.0	int
)	O
return	O
0.0	int
;	O
_pl_c_set_pen_color	function
(	O
R___	O
(	O
_plotter	pointer
)	O
CGM_OBJECT_TEXT	int
)	O
;	O
master_font_index	int
=	O
(	O
_pl_g_ps_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
)	O
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_index	int
]	O
;	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
ps_font_used	array
[	O
master_font_index	int
]	O
=	O
true	int
;	O
desired_cgm_font_id	int
=	O
_pl_g_ps_font_to_cgm_font_id	array
[	O
master_font_index	int
]	O
;	O
if	O
(	O
_plotter	pointer
->	O
cgm_font_id	int
!=	O
desired_cgm_font_id	int
)	O
{	O
data_len	int
=	O
2	int
;	O
byte_count	pointer
=	O
data_byte_count	pointer
=	O
0	int
;	O
_cgm_emit_command_header	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
CGM_ATTRIBUTE_ELEMENT	int
,	O
10	int
,	O
data_len	int
,	O
&	O
byte_count	pointer
,	O
"TEXTFONTINDEX"	pointer
)	O
;	O
_cgm_emit_index	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
desired_cgm_font_id	int
+	O
1	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_command_terminator	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
&	O
byte_count	pointer
)	O
;	O
_plotter	pointer
->	O
cgm_font_id	int
=	O
desired_cgm_font_id	int
;	O
}	O
theta	double
=	O
M_PI	int
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
text_rotation	double
/	O
180.0	int
;	O
sintheta	double
=	O
sin	function
(	O
theta	double
)	O
;	O
costheta	double
=	O
cos	function
(	O
theta	double
)	O
;	O
user_text_transformation_matrix	array
[	O
0	int
]	O
=	O
costheta	double
;	O
user_text_transformation_matrix	array
[	O
1	int
]	O
=	O
sintheta	double
;	O
user_text_transformation_matrix	array
[	O
2	int
]	O
=	O
-	O
sintheta	double
;	O
user_text_transformation_matrix	array
[	O
3	int
]	O
=	O
costheta	double
;	O
user_text_transformation_matrix	array
[	O
4	int
]	O
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
;	O
user_text_transformation_matrix	array
[	O
5	int
]	O
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
;	O
_matrix_product	function
(	O
user_text_transformation_matrix	array
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
m	array
,	O
text_transformation_matrix	array
)	O
;	O
{	O
double	O
base_x	double
=	O
text_transformation_matrix	array
[	O
0	int
]	O
;	O
double	O
base_y	double
=	O
text_transformation_matrix	array
[	O
1	int
]	O
;	O
double	O
up_x	double
=	O
text_transformation_matrix	array
[	O
2	int
]	O
;	O
double	O
up_y	double
=	O
text_transformation_matrix	array
[	O
3	int
]	O
;	O
double	O
base_len	double
=	O
sqrt	function
(	O
base_x	double
*	O
base_x	double
+	O
base_y	double
*	O
base_y	double
)	O
;	O
double	O
up_len	double
=	O
sqrt	function
(	O
up_x	double
*	O
up_x	double
+	O
up_y	double
*	O
up_y	double
)	O
;	O
double	O
max_len	double
=	O
DMAX	O
(	O
base_len	double
,	O
up_len	double
)	O
;	O
if	O
(	O
max_len	double
!=	O
0.0	int
)	O
{	O
base_x	double
/=	O
max_len	double
;	O
base_y	double
/=	O
max_len	double
;	O
up_x	double
/=	O
max_len	double
;	O
up_y	double
/=	O
max_len	double
;	O
}	O
desired_char_base_vector_x	int
=	O
IROUND	O
(	O
QUANTIZATION_FACTOR	int
*	O
base_x	double
)	O
;	O
desired_char_base_vector_y	int
=	O
IROUND	O
(	O
QUANTIZATION_FACTOR	int
*	O
base_y	double
)	O
;	O
desired_char_up_vector_x	int
=	O
IROUND	O
(	O
QUANTIZATION_FACTOR	int
*	O
up_x	double
)	O
;	O
desired_char_up_vector_y	int
=	O
IROUND	O
(	O
QUANTIZATION_FACTOR	int
*	O
up_y	double
)	O
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
cgm_char_base_vector_x	int
!=	O
desired_char_base_vector_x	int
||	O
_plotter	pointer
->	O
cgm_char_base_vector_y	int
!=	O
desired_char_base_vector_y	int
||	O
_plotter	pointer
->	O
cgm_char_up_vector_x	int
!=	O
desired_char_up_vector_x	int
||	O
_plotter	pointer
->	O
cgm_char_up_vector_y	int
!=	O
desired_char_up_vector_y	int
)	O
{	O
data_len	int
=	O
4	int
*	O
CGM_BINARY_BYTES_PER_INTEGER	int
;	O
byte_count	pointer
=	O
data_byte_count	pointer
=	O
0	int
;	O
_cgm_emit_command_header	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
CGM_ATTRIBUTE_ELEMENT	int
,	O
16	int
,	O
data_len	int
,	O
&	O
byte_count	pointer
,	O
"CHARORI"	pointer
)	O
;	O
_cgm_emit_integer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
desired_char_up_vector_x	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_integer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
desired_char_up_vector_y	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_integer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
desired_char_base_vector_x	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_integer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
desired_char_base_vector_y	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_command_terminator	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
&	O
byte_count	pointer
)	O
;	O
_plotter	pointer
->	O
cgm_char_base_vector_x	int
=	O
desired_char_base_vector_x	int
;	O
_plotter	pointer
->	O
cgm_char_base_vector_y	int
=	O
desired_char_base_vector_y	int
;	O
_plotter	pointer
->	O
cgm_char_up_vector_x	int
=	O
desired_char_up_vector_x	int
;	O
_plotter	pointer
->	O
cgm_char_up_vector_y	int
=	O
desired_char_up_vector_y	int
;	O
}	O
relative_cap_height	double
=	O
_pl_g_ps_font_info	array
[	O
master_font_index	int
]	O
.	O
font_cap_height	double
/	O
1000.0	int
;	O
user_cap_height	double
=	O
relative_cap_height	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
;	O
up_vector_x	double
=	O
user_cap_height	double
*	O
text_transformation_matrix	array
[	O
2	int
]	O
;	O
up_vector_y	double
=	O
user_cap_height	double
*	O
text_transformation_matrix	array
[	O
3	int
]	O
;	O
cap_height	double
=	O
sqrt	function
(	O
up_vector_x	double
*	O
up_vector_x	double
+	O
up_vector_y	double
*	O
up_vector_y	double
)	O
;	O
desired_char_height	int
=	O
IROUND	O
(	O
cap_height	double
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
cgm_char_height	int
!=	O
desired_char_height	int
)	O
{	O
data_len	int
=	O
CGM_BINARY_BYTES_PER_INTEGER	int
;	O
byte_count	pointer
=	O
data_byte_count	pointer
=	O
0	int
;	O
_cgm_emit_command_header	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
CGM_ATTRIBUTE_ELEMENT	int
,	O
15	int
,	O
data_len	int
,	O
&	O
byte_count	pointer
,	O
"CHARHEIGHT"	pointer
)	O
;	O
_cgm_emit_integer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
desired_char_height	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_command_terminator	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
&	O
byte_count	pointer
)	O
;	O
_plotter	pointer
->	O
cgm_char_height	int
=	O
desired_char_height	int
;	O
}	O
if	O
(	O
strcmp	function
(	O
_pl_g_ps_font_info	array
[	O
master_font_index	int
]	O
.	O
ps_name	pointer
,	O
"Symbol"	pointer
)	O
==	O
0	int
)	O
font_is_symbol	enum
=	O
true	int
;	O
else	O
font_is_symbol	enum
=	O
false	int
;	O
need_lower_half	enum
=	O
need_upper_half	enum
=	O
false	int
;	O
for	O
(	O
t	pointer
=	O
s	pointer
;	O
*	O
t	pointer
!=	O
(	O
unsigned	O
char	O
)	O
'\0'	O
;	O
t	pointer
++	O
)	O
{	O
if	O
(	O
(	O
*	O
t	pointer
)	O
<=	O
127	int
)	O
need_lower_half	enum
=	O
true	int
;	O
else	O
need_upper_half	enum
=	O
true	int
;	O
}	O
if	O
(	O
font_is_symbol	enum
)	O
{	O
if	O
(	O
need_lower_half	enum
&&	O
_plotter	pointer
->	O
cgm_charset_lower	int
!=	O
3	int
)	O
{	O
set_lower_half_charset	enum
=	O
true	int
;	O
lower_half_charset	int
=	O
3	int
;	O
}	O
if	O
(	O
need_upper_half	enum
&&	O
_plotter	pointer
->	O
cgm_charset_upper	int
!=	O
4	int
)	O
{	O
set_upper_half_charset	enum
=	O
true	int
;	O
upper_half_charset	int
=	O
4	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
need_lower_half	enum
&&	O
_plotter	pointer
->	O
cgm_charset_lower	int
!=	O
1	int
)	O
{	O
set_lower_half_charset	enum
=	O
true	int
;	O
lower_half_charset	int
=	O
1	int
;	O
}	O
if	O
(	O
need_upper_half	enum
&&	O
_plotter	pointer
->	O
cgm_charset_upper	int
!=	O
2	int
)	O
{	O
set_upper_half_charset	enum
=	O
true	int
;	O
upper_half_charset	int
=	O
2	int
;	O
}	O
}	O
if	O
(	O
set_lower_half_charset	enum
)	O
{	O
data_len	int
=	O
2	int
;	O
byte_count	pointer
=	O
data_byte_count	pointer
=	O
0	int
;	O
_cgm_emit_command_header	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
CGM_ATTRIBUTE_ELEMENT	int
,	O
19	int
,	O
data_len	int
,	O
&	O
byte_count	pointer
,	O
"CHARSETINDEX"	pointer
)	O
;	O
_cgm_emit_index	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
lower_half_charset	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_command_terminator	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
&	O
byte_count	pointer
)	O
;	O
_plotter	pointer
->	O
cgm_charset_lower	int
=	O
lower_half_charset	int
;	O
}	O
if	O
(	O
set_upper_half_charset	enum
)	O
{	O
data_len	int
=	O
2	int
;	O
byte_count	pointer
=	O
data_byte_count	pointer
=	O
0	int
;	O
_cgm_emit_command_header	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
CGM_ATTRIBUTE_ELEMENT	int
,	O
20	int
,	O
data_len	int
,	O
&	O
byte_count	pointer
,	O
"ALTCHARSETINDEX"	pointer
)	O
;	O
_cgm_emit_index	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
upper_half_charset	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_command_terminator	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
&	O
byte_count	pointer
)	O
;	O
_plotter	pointer
->	O
cgm_charset_upper	int
=	O
upper_half_charset	int
;	O
}	O
desired_cgm_h_alignment	int
=	O
cgm_horizontal_alignment_style	array
[	O
h_just	int
]	O
;	O
desired_cgm_v_alignment	int
=	O
cgm_vertical_alignment_style	array
[	O
v_just	int
]	O
;	O
if	O
(	O
_plotter	pointer
->	O
cgm_horizontal_text_alignment	int
!=	O
desired_cgm_h_alignment	int
||	O
_plotter	pointer
->	O
cgm_vertical_text_alignment	int
!=	O
desired_cgm_v_alignment	int
)	O
{	O
const	O
char	O
*	O
desired_cgm_h_alignment_string	pointer
,	O
*	O
desired_cgm_v_alignment_string	pointer
;	O
desired_cgm_h_alignment_string	pointer
=	O
cgm_horizontal_alignment_style_string	array
[	O
h_just	int
]	O
;	O
desired_cgm_v_alignment_string	pointer
=	O
cgm_vertical_alignment_style_string	array
[	O
v_just	int
]	O
;	O
data_len	int
=	O
2	int
*	O
2	int
+	O
2	int
*	O
4	int
;	O
byte_count	pointer
=	O
data_byte_count	pointer
=	O
0	int
;	O
_cgm_emit_command_header	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
CGM_ATTRIBUTE_ELEMENT	int
,	O
18	int
,	O
data_len	int
,	O
&	O
byte_count	pointer
,	O
"TEXTALIGN"	pointer
)	O
;	O
_cgm_emit_enum	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
desired_cgm_h_alignment	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
,	O
desired_cgm_h_alignment_string	pointer
)	O
;	O
_cgm_emit_enum	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
desired_cgm_v_alignment	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
,	O
desired_cgm_v_alignment_string	pointer
)	O
;	O
_cgm_emit_real_fixed_point	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
0.0	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_real_fixed_point	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
0.0	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_command_terminator	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
&	O
byte_count	pointer
)	O
;	O
_plotter	pointer
->	O
cgm_horizontal_text_alignment	int
=	O
desired_cgm_h_alignment	int
;	O
_plotter	pointer
->	O
cgm_vertical_text_alignment	int
=	O
desired_cgm_v_alignment	int
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
cgm_max_version	int
>=	O
3	int
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
cgm_restricted_text_type	int
!=	O
CGM_RESTRICTED_TEXT_TYPE_BOXED_CAP	int
)	O
{	O
data_len	int
=	O
2	int
;	O
byte_count	pointer
=	O
data_byte_count	pointer
=	O
0	int
;	O
_cgm_emit_command_header	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
CGM_ATTRIBUTE_ELEMENT	int
,	O
42	int
,	O
data_len	int
,	O
&	O
byte_count	pointer
,	O
"RESTRTEXTTYPE"	pointer
)	O
;	O
_cgm_emit_index	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
CGM_RESTRICTED_TEXT_TYPE_BOXED_CAP	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_command_terminator	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
&	O
byte_count	pointer
)	O
;	O
_plotter	pointer
->	O
cgm_restricted_text_type	int
=	O
CGM_RESTRICTED_TEXT_TYPE_BOXED_CAP	int
;	O
_plotter	pointer
->	O
cgm_page_version	int
=	O
IMAX	O
(	O
3	int
,	O
_plotter	pointer
->	O
cgm_page_version	int
)	O
;	O
}	O
}	O
width	array
=	O
_plotter	pointer
->	O
get_text_width	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
s	pointer
)	O
;	O
base_vector_x	double
=	O
width	array
*	O
text_transformation_matrix	array
[	O
0	int
]	O
;	O
base_vector_y	double
=	O
width	array
*	O
text_transformation_matrix	array
[	O
1	int
]	O
;	O
base_width	double
=	O
sqrt	function
(	O
base_vector_x	double
*	O
base_vector_x	double
+	O
base_vector_y	double
*	O
base_vector_y	double
)	O
;	O
desired_base_width	int
=	O
IROUND	O
(	O
base_width	double
)	O
;	O
{	O
int	O
string_length	int
,	O
encoded_string_length	int
;	O
double	O
xdev	double
,	O
ydev	double
;	O
int	O
xdev_int	int
,	O
ydev_int	int
;	O
string_length	int
=	O
strlen	function
(	O
(	O
const	O
char	O
*	O
)	O
s	pointer
)	O
;	O
encoded_string_length	int
=	O
CGM_BINARY_BYTES_PER_STRING	O
(	O
string_length	int
)	O
;	O
data_len	int
=	O
(	O
4	int
*	O
CGM_BINARY_BYTES_PER_INTEGER	int
)	O
+	O
2	int
+	O
encoded_string_length	int
;	O
byte_count	pointer
=	O
data_byte_count	pointer
=	O
0	int
;	O
xdev	double
=	O
XD	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
)	O
;	O
ydev	double
=	O
YD	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
)	O
;	O
xdev_int	int
=	O
IROUND	O
(	O
xdev	double
)	O
;	O
ydev_int	int
=	O
IROUND	O
(	O
ydev	double
)	O
;	O
_cgm_emit_command_header	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
CGM_GRAPHICAL_PRIMITIVE_ELEMENT	int
,	O
5	int
,	O
data_len	int
,	O
&	O
byte_count	pointer
,	O
"RESTRTEXT"	pointer
)	O
;	O
_cgm_emit_integer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
desired_base_width	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_integer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
desired_char_height	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_point	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
xdev_int	int
,	O
ydev_int	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_enum	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
1	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
,	O
"final"	pointer
)	O
;	O
_cgm_emit_string	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
(	O
const	O
char	O
*	O
)	O
s	pointer
,	O
string_length	int
,	O
true	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_command_terminator	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
&	O
byte_count	pointer
)	O
;	O
if	O
(	O
string_length	int
>	O
254	int
)	O
_plotter	pointer
->	O
cgm_page_profile	int
=	O
IMAX	O
(	O
_plotter	pointer
->	O
cgm_page_profile	int
,	O
CGM_PROFILE_NONE	int
)	O
;	O
}	O
return	O
width	array
;	O
}	O
