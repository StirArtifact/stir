static	O
enum	O
MHD_StatusCode	enum
response_action	function
(	O
void	O
*	O
cls	pointer
,	O
struct	O
MHD_Request	struct
*	O
request	pointer
)	O
{	O
struct	O
MHD_Response	struct
*	O
response	pointer
=	O
cls	pointer
;	O
struct	O
MHD_Daemon	struct
*	O
daemon	function
=	O
request	pointer
->	O
daemon	function
;	O
if	O
(	O
daemon	function
->	O
shutdown	function
)	O
return	O
MHD_SC_DAEMON_ALREADY_SHUTDOWN	int
;	O
if	O
(	O
(	O
NULL	O
!=	O
response	pointer
->	O
upgrade_handler	pointer
)	O
&&	O
daemon	function
->	O
disallow_upgrade	bool
)	O
{	O
MHD_DLOG	function
(	O
daemon	function
,	O
MHD_SC_UPGRADE_ON_DAEMON_WITH_UPGRADE_DISALLOWED	int
,	O
_	O
(	O
"Attempted 'upgrade' connection on daemon without MHD_ALLOW_UPGRADE option!\n"	pointer
)	O
)	O
;	O
return	O
MHD_SC_UPGRADE_ON_DAEMON_WITH_UPGRADE_DISALLOWED	int
;	O
}	O
request	pointer
->	O
response	pointer
=	O
response	pointer
;	O
if	O
(	O
(	O
-	O
1	int
==	O
response	pointer
->	O
fd	int
)	O
)	O
request	pointer
->	O
resp_sender	enum
=	O
MHD_resp_sender_std	int
;	O
else	O
request	pointer
->	O
resp_sender	enum
=	O
MHD_resp_sender_sendfile	int
;	O
if	O
(	O
(	O
MHD_METHOD_HEAD	int
==	O
request	pointer
->	O
method	enum
)	O
||	O
(	O
MHD_HTTP_OK	int
>	O
response	pointer
->	O
status_code	enum
)	O
||	O
(	O
MHD_HTTP_NO_CONTENT	int
==	O
response	pointer
->	O
status_code	enum
)	O
||	O
(	O
MHD_HTTP_NOT_MODIFIED	int
==	O
response	pointer
->	O
status_code	enum
)	O
)	O
{	O
request	pointer
->	O
response_write_position	long
=	O
response	pointer
->	O
total_size	long
;	O
}	O
if	O
(	O
(	O
MHD_REQUEST_HEADERS_PROCESSED	int
==	O
request	pointer
->	O
state	pointer
)	O
&&	O
(	O
(	O
MHD_METHOD_POST	int
==	O
request	pointer
->	O
method	enum
)	O
||	O
(	O
MHD_METHOD_PUT	int
==	O
request	pointer
->	O
method	enum
)	O
)	O
)	O
{	O
request	pointer
->	O
connection	pointer
->	O
read_closed	bool
=	O
true	int
;	O
request	pointer
->	O
state	pointer
=	O
MHD_REQUEST_FOOTERS_RECEIVED	int
;	O
}	O
if	O
(	O
!	O
request	pointer
->	O
in_idle	bool
)	O
(	O
void	O
)	O
MHD_request_handle_idle_	function
(	O
request	pointer
)	O
;	O
return	O
MHD_SC_OK	int
;	O
}	O
_MHD_EXTERN	O
const	O
struct	O
MHD_Action	struct
*	O
MHD_action_from_response	function
(	O
struct	O
MHD_Response	struct
*	O
response	pointer
,	O
enum	O
MHD_Bool	enum
destroy_after_use	enum
)	O
{	O
response	pointer
->	O
action	pointer
.	O
action	pointer
=	O
&	O
response_action	function
;	O
response	pointer
->	O
action	pointer
.	O
action_cls	pointer
=	O
response	pointer
;	O
if	O
(	O
!	O
destroy_after_use	enum
)	O
{	O
MHD_mutex_lock_chk_	O
(	O
&	O
response	pointer
->	O
mutex	union
)	O
;	O
response	pointer
->	O
reference_count	int
++	O
;	O
MHD_mutex_unlock_chk_	O
(	O
&	O
response	pointer
->	O
mutex	union
)	O
;	O
}	O
return	O
&	O
response	pointer
->	O
action	pointer
;	O
}	O
