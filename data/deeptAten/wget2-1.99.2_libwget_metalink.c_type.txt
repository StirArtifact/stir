typedef	O
struct	O
{	O
wget_metalink	struct
*	O
metalink	pointer
;	O
int	O
priority	int
;	O
char	O
hash	pointer
[	O
128	int
]	O
,	O
hash_type	array
[	O
16	int
]	O
,	O
location	pointer
[	O
8	int
]	O
;	O
long	O
long	O
length	long
;	O
}	O
metalink_context	struct
;	O
static	O
void	O
mirror_free	function
(	O
void	O
*	O
mirror	pointer
)	O
{	O
wget_metalink_mirror	struct
*	O
m	pointer
=	O
mirror	pointer
;	O
if	O
(	O
m	pointer
)	O
{	O
wget_iri_free	function
(	O
&	O
m	pointer
->	O
iri	pointer
)	O
;	O
xfree	O
(	O
m	pointer
)	O
;	O
}	O
}	O
static	O
void	O
add_piece	function
(	O
metalink_context	struct
*	O
ctx	pointer
,	O
const	O
char	O
*	O
value	pointer
)	O
{	O
wget_metalink	struct
*	O
metalink	pointer
=	O
ctx	pointer
->	O
metalink	pointer
;	O
sscanf	function
(	O
value	pointer
,	O
"%127s"	pointer
,	O
ctx	pointer
->	O
hash	pointer
)	O
;	O
if	O
(	O
ctx	pointer
->	O
length	long
&&	O
*	O
ctx	pointer
->	O
hash_type	array
&&	O
*	O
ctx	pointer
->	O
hash	pointer
)	O
{	O
wget_metalink_piece	struct
piece	struct
,	O
*	O
piecep	pointer
;	O
if	O
(	O
!	O
metalink	pointer
->	O
pieces	pointer
)	O
metalink	pointer
->	O
pieces	pointer
=	O
wget_vector_create	function
(	O
32	int
,	O
NULL	O
)	O
;	O
piece	struct
.	O
length	long
=	O
ctx	pointer
->	O
length	long
;	O
wget_strscpy	function
(	O
piece	struct
.	O
hash	pointer
.	O
type	pointer
,	O
ctx	pointer
->	O
hash_type	array
,	O
sizeof	O
(	O
piece	struct
.	O
hash	pointer
.	O
type	pointer
)	O
)	O
;	O
wget_strscpy	function
(	O
piece	struct
.	O
hash	pointer
.	O
hash_hex	array
,	O
ctx	pointer
->	O
hash	pointer
,	O
sizeof	O
(	O
piece	struct
.	O
hash	pointer
.	O
hash_hex	array
)	O
)	O
;	O
piecep	pointer
=	O
wget_vector_get	function
(	O
metalink	pointer
->	O
pieces	pointer
,	O
wget_vector_size	function
(	O
metalink	pointer
->	O
pieces	pointer
)	O
-	O
1	int
)	O
;	O
if	O
(	O
piecep	pointer
&&	O
piecep	pointer
->	O
length	long
>	O
0	int
)	O
{	O
if	O
(	O
piecep	pointer
->	O
position	long
<=	O
LONG_MAX	O
-	O
piecep	pointer
->	O
length	long
)	O
piece	struct
.	O
position	long
=	O
piecep	pointer
->	O
position	long
+	O
piecep	pointer
->	O
length	long
;	O
else	O
piece	struct
.	O
position	long
=	O
0	int
;	O
}	O
else	O
piece	struct
.	O
position	long
=	O
0	int
;	O
wget_vector_add_memdup	function
(	O
metalink	pointer
->	O
pieces	pointer
,	O
&	O
piece	struct
,	O
sizeof	O
(	O
wget_metalink_piece	struct
)	O
)	O
;	O
}	O
*	O
ctx	pointer
->	O
hash	pointer
=	O
0	int
;	O
}	O
static	O
void	O
add_file_hash	function
(	O
metalink_context	struct
*	O
ctx	pointer
,	O
const	O
char	O
*	O
value	pointer
)	O
{	O
wget_metalink	struct
*	O
metalink	pointer
=	O
ctx	pointer
->	O
metalink	pointer
;	O
sscanf	function
(	O
value	pointer
,	O
"%127s"	pointer
,	O
ctx	pointer
->	O
hash	pointer
)	O
;	O
if	O
(	O
*	O
ctx	pointer
->	O
hash_type	array
&&	O
*	O
ctx	pointer
->	O
hash	pointer
)	O
{	O
wget_metalink_hash	struct
hash	pointer
;	O
memset	function
(	O
&	O
hash	pointer
,	O
0	int
,	O
sizeof	O
(	O
wget_metalink_hash	struct
)	O
)	O
;	O
wget_strscpy	function
(	O
hash	pointer
.	O
type	pointer
,	O
ctx	pointer
->	O
hash_type	array
,	O
sizeof	O
(	O
hash	pointer
.	O
type	pointer
)	O
)	O
;	O
wget_strscpy	function
(	O
hash	pointer
.	O
hash_hex	array
,	O
ctx	pointer
->	O
hash	pointer
,	O
sizeof	O
(	O
hash	pointer
.	O
hash_hex	array
)	O
)	O
;	O
if	O
(	O
!	O
metalink	pointer
->	O
hashes	pointer
)	O
metalink	pointer
->	O
hashes	pointer
=	O
wget_vector_create	function
(	O
4	int
,	O
NULL	O
)	O
;	O
wget_vector_add_memdup	function
(	O
metalink	pointer
->	O
hashes	pointer
,	O
&	O
hash	pointer
,	O
sizeof	O
(	O
wget_metalink_hash	struct
)	O
)	O
;	O
}	O
*	O
ctx	pointer
->	O
hash_type	array
=	O
*	O
ctx	pointer
->	O
hash	pointer
=	O
0	int
;	O
}	O
static	O
void	O
add_mirror	function
(	O
metalink_context	struct
*	O
ctx	pointer
,	O
const	O
char	O
*	O
value	pointer
)	O
{	O
while	O
(	O
c_isspace	function
(	O
*	O
value	pointer
)	O
)	O
value	pointer
++	O
;	O
if	O
(	O
wget_strncasecmp_ascii	function
(	O
value	pointer
,	O
"http:"	pointer
,	O
5	int
)	O
&&	O
wget_strncasecmp_ascii	function
(	O
value	pointer
,	O
"https:"	pointer
,	O
6	int
)	O
)	O
return	O
;	O
wget_metalink	struct
*	O
metalink	pointer
=	O
ctx	pointer
->	O
metalink	pointer
;	O
wget_metalink_mirror	struct
*	O
mirror	pointer
=	O
wget_calloc	function
(	O
1	int
,	O
sizeof	O
(	O
wget_metalink_mirror	struct
)	O
)	O
;	O
wget_strscpy	function
(	O
mirror	pointer
->	O
location	pointer
,	O
ctx	pointer
->	O
location	pointer
,	O
sizeof	O
(	O
mirror	pointer
->	O
location	pointer
)	O
)	O
;	O
mirror	pointer
->	O
priority	int
=	O
ctx	pointer
->	O
priority	int
;	O
mirror	pointer
->	O
iri	pointer
=	O
wget_iri_parse	function
(	O
value	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
mirror	pointer
->	O
iri	pointer
)	O
{	O
xfree	O
(	O
mirror	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
metalink	pointer
->	O
mirrors	pointer
)	O
{	O
metalink	pointer
->	O
mirrors	pointer
=	O
wget_vector_create	function
(	O
4	int
,	O
NULL	O
)	O
;	O
wget_vector_set_destructor	function
(	O
metalink	pointer
->	O
mirrors	pointer
,	O
mirror_free	function
)	O
;	O
}	O
wget_vector_add	function
(	O
metalink	pointer
->	O
mirrors	pointer
,	O
mirror	pointer
)	O
;	O
*	O
ctx	pointer
->	O
location	pointer
=	O
0	int
;	O
ctx	pointer
->	O
priority	int
=	O
999999	int
;	O
}	O
static	O
void	O
metalink_parse	function
(	O
void	O
*	O
context	pointer
,	O
int	O
flags	int
,	O
const	O
char	O
*	O
dir	array
,	O
const	O
char	O
*	O
attr	array
,	O
const	O
char	O
*	O
val	pointer
,	O
size_t	long
len	long
,	O
size_t	long
pos	int
WGET_GCC_UNUSED	O
)	O
{	O
metalink_context	struct
*	O
ctx	pointer
=	O
context	pointer
;	O
char	O
value	pointer
[	O
len	long
+	O
1	int
]	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
(	O
XML_FLG_CONTENT	O
|	O
XML_FLG_ATTRIBUTE	O
)	O
)	O
)	O
return	O
;	O
if	O
(	O
wget_strncasecmp_ascii	function
(	O
dir	array
,	O
"/metalink/file"	pointer
,	O
14	int
)	O
)	O
return	O
;	O
dir	array
+=	O
14	int
;	O
if	O
(	O
val	pointer
)	O
memcpy	function
(	O
value	pointer
,	O
val	pointer
,	O
len	long
)	O
;	O
value	pointer
[	O
len	long
]	O
=	O
0	int
;	O
if	O
(	O
!	O
wget_strncasecmp_ascii	function
(	O
dir	array
,	O
"s/file"	pointer
,	O
6	int
)	O
)	O
{	O
dir	array
+=	O
6	int
;	O
if	O
(	O
attr	array
)	O
{	O
if	O
(	O
*	O
dir	array
==	O
0	int
)	O
{	O
if	O
(	O
!	O
ctx	pointer
->	O
metalink	pointer
->	O
name	pointer
&&	O
!	O
wget_strcasecmp_ascii	function
(	O
attr	array
,	O
"name"	pointer
)	O
)	O
{	O
ctx	pointer
->	O
metalink	pointer
->	O
name	pointer
=	O
wget_strdup	function
(	O
value	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
dir	array
,	O
"/verification/pieces"	pointer
)	O
)	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
attr	array
,	O
"type"	pointer
)	O
)	O
{	O
sscanf	function
(	O
value	pointer
,	O
"%15s"	pointer
,	O
ctx	pointer
->	O
hash_type	array
)	O
;	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
attr	array
,	O
"length"	pointer
)	O
)	O
{	O
ctx	pointer
->	O
length	long
=	O
atoll	function
(	O
value	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
dir	array
,	O
"/verification/hash"	pointer
)	O
)	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
attr	array
,	O
"type"	pointer
)	O
)	O
{	O
sscanf	function
(	O
value	pointer
,	O
"%15s"	pointer
,	O
ctx	pointer
->	O
hash_type	array
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
dir	array
,	O
"/resources/url"	pointer
)	O
)	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
attr	array
,	O
"location"	pointer
)	O
)	O
{	O
sscanf	function
(	O
value	pointer
,	O
" %2[a-zA-Z]"	pointer
,	O
ctx	pointer
->	O
location	pointer
)	O
;	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
attr	array
,	O
"preference"	pointer
)	O
)	O
{	O
sscanf	function
(	O
value	pointer
,	O
" %6d"	pointer
,	O
&	O
ctx	pointer
->	O
priority	int
)	O
;	O
if	O
(	O
ctx	pointer
->	O
priority	int
<	O
1	int
||	O
ctx	pointer
->	O
priority	int
>	O
999999	int
)	O
ctx	pointer
->	O
priority	int
=	O
999999	int
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
dir	array
,	O
"/verification/pieces/hash"	pointer
)	O
)	O
{	O
add_piece	function
(	O
ctx	pointer
,	O
value	pointer
)	O
;	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
dir	array
,	O
"/verification/hash"	pointer
)	O
)	O
{	O
add_file_hash	function
(	O
ctx	pointer
,	O
value	pointer
)	O
;	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
dir	array
,	O
"/size"	pointer
)	O
)	O
{	O
ctx	pointer
->	O
metalink	pointer
->	O
size	pointer
=	O
atoll	function
(	O
value	pointer
)	O
;	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
dir	array
,	O
"/resources/url"	pointer
)	O
)	O
{	O
add_mirror	function
(	O
ctx	pointer
,	O
value	pointer
)	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
attr	array
)	O
{	O
if	O
(	O
*	O
dir	array
==	O
0	int
)	O
{	O
if	O
(	O
!	O
ctx	pointer
->	O
metalink	pointer
->	O
name	pointer
&&	O
!	O
wget_strcasecmp_ascii	function
(	O
attr	array
,	O
"name"	pointer
)	O
)	O
{	O
ctx	pointer
->	O
metalink	pointer
->	O
name	pointer
=	O
wget_strdup	function
(	O
value	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
dir	array
,	O
"/pieces"	pointer
)	O
)	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
attr	array
,	O
"type"	pointer
)	O
)	O
{	O
sscanf	function
(	O
value	pointer
,	O
"%15s"	pointer
,	O
ctx	pointer
->	O
hash_type	array
)	O
;	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
attr	array
,	O
"length"	pointer
)	O
)	O
{	O
ctx	pointer
->	O
length	long
=	O
atoll	function
(	O
value	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
dir	array
,	O
"/hash"	pointer
)	O
)	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
attr	array
,	O
"type"	pointer
)	O
)	O
{	O
sscanf	function
(	O
value	pointer
,	O
"%15s"	pointer
,	O
ctx	pointer
->	O
hash_type	array
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
dir	array
,	O
"/url"	pointer
)	O
)	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
attr	array
,	O
"location"	pointer
)	O
)	O
{	O
sscanf	function
(	O
value	pointer
,	O
" %2[a-zA-Z]"	pointer
,	O
ctx	pointer
->	O
location	pointer
)	O
;	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
attr	array
,	O
"priority"	pointer
)	O
||	O
!	O
wget_strcasecmp_ascii	function
(	O
attr	array
,	O
"preference"	pointer
)	O
)	O
{	O
sscanf	function
(	O
value	pointer
,	O
" %6d"	pointer
,	O
&	O
ctx	pointer
->	O
priority	int
)	O
;	O
if	O
(	O
ctx	pointer
->	O
priority	int
<	O
1	int
||	O
ctx	pointer
->	O
priority	int
>	O
999999	int
)	O
ctx	pointer
->	O
priority	int
=	O
999999	int
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
dir	array
,	O
"/pieces/hash"	pointer
)	O
)	O
{	O
add_piece	function
(	O
ctx	pointer
,	O
value	pointer
)	O
;	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
dir	array
,	O
"/hash"	pointer
)	O
)	O
{	O
add_file_hash	function
(	O
ctx	pointer
,	O
value	pointer
)	O
;	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
dir	array
,	O
"/size"	pointer
)	O
)	O
{	O
ctx	pointer
->	O
metalink	pointer
->	O
size	pointer
=	O
atoll	function
(	O
value	pointer
)	O
;	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
dir	array
,	O
"/url"	pointer
)	O
)	O
{	O
add_mirror	function
(	O
ctx	pointer
,	O
value	pointer
)	O
;	O
}	O
}	O
}	O
}	O
wget_metalink	struct
*	O
wget_metalink_parse	function
(	O
const	O
char	O
*	O
xml	pointer
)	O
{	O
if	O
(	O
!	O
xml	pointer
)	O
return	O
NULL	O
;	O
wget_metalink	struct
*	O
metalink	pointer
=	O
wget_calloc	function
(	O
1	int
,	O
sizeof	O
(	O
wget_metalink	struct
)	O
)	O
;	O
metalink_context	struct
ctx	pointer
=	O
{	O
.	O
metalink	pointer
=	O
metalink	pointer
,	O
.	O
priority	int
=	O
999999	int
,	O
.	O
location	pointer
=	O
"-"	pointer
}	O
;	O
if	O
(	O
wget_xml_parse_buffer	function
(	O
xml	pointer
,	O
metalink_parse	function
,	O
&	O
ctx	pointer
,	O
0	int
)	O
!=	O
WGET_E_SUCCESS	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Error in parsing XML"	pointer
)	O
)	O
;	O
wget_metalink_free	function
(	O
&	O
metalink	pointer
)	O
;	O
}	O
return	O
metalink	pointer
;	O
}	O
void	O
wget_metalink_free	function
(	O
wget_metalink	struct
*	O
*	O
metalink	pointer
)	O
{	O
if	O
(	O
metalink	pointer
&&	O
*	O
metalink	pointer
)	O
{	O
xfree	O
(	O
(	O
*	O
metalink	pointer
)	O
->	O
name	pointer
)	O
;	O
wget_vector_free	function
(	O
&	O
(	O
*	O
metalink	pointer
)	O
->	O
mirrors	pointer
)	O
;	O
wget_vector_free	function
(	O
&	O
(	O
*	O
metalink	pointer
)	O
->	O
hashes	pointer
)	O
;	O
wget_vector_free	function
(	O
&	O
(	O
*	O
metalink	pointer
)	O
->	O
pieces	pointer
)	O
;	O
xfree	O
(	O
*	O
metalink	pointer
)	O
;	O
}	O
}	O
WGET_GCC_PURE	O
static	O
int	O
compare_mirror	function
(	O
wget_metalink_mirror	struct
*	O
*	O
m1	pointer
,	O
wget_metalink_mirror	struct
*	O
*	O
m2	pointer
)	O
{	O
return	O
(	O
*	O
m1	pointer
)	O
->	O
priority	int
-	O
(	O
*	O
m2	pointer
)	O
->	O
priority	int
;	O
}	O
void	O
wget_metalink_sort_mirrors	function
(	O
wget_metalink	struct
*	O
metalink	pointer
)	O
{	O
if	O
(	O
metalink	pointer
)	O
{	O
wget_vector_setcmpfunc	function
(	O
metalink	pointer
->	O
mirrors	pointer
,	O
(	O
wget_vector_compare_fn	function
*	O
)	O
compare_mirror	function
)	O
;	O
wget_vector_sort	function
(	O
metalink	pointer
->	O
mirrors	pointer
)	O
;	O
}	O
}	O
