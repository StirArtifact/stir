int	O
PicBuf_to_PBM	function
(	O
const	O
GEN_PAR	struct
*	O
pg	pointer
,	O
const	O
OUT_PAR	struct
*	O
po	pointer
)	O
{	O
FILE	struct
*	O
fd	pointer
;	O
int	O
row_c	int
,	O
byte_c	int
,	O
x	int
;	O
const	O
RowBuf	struct
*	O
row	pointer
;	O
const	O
PicBuf	struct
*	O
pb	pointer
;	O
int	O
colour	int
;	O
if	O
(	O
pg	pointer
==	O
NULL	O
||	O
po	pointer
==	O
NULL	O
)	O
return	O
ERROR	O
;	O
pb	pointer
=	O
po	pointer
->	O
picbuf	pointer
;	O
if	O
(	O
pb	pointer
==	O
NULL	O
)	O
return	O
ERROR	O
;	O
if	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
Eprintf	function
(	O
"\nWriting PBM output: %s\n"	pointer
,	O
po	pointer
->	O
outfile	pointer
)	O
;	O
if	O
(	O
*	O
po	pointer
->	O
outfile	pointer
!=	O
'-'	O
)	O
{	O
if	O
(	O
(	O
fd	pointer
=	O
fopen	function
(	O
po	pointer
->	O
outfile	pointer
,	O
WRITE_BIN	pointer
)	O
)	O
==	O
NULL	O
)	O
goto	O
ERROR_EXIT	O
;	O
}	O
else	O
fd	pointer
=	O
stdout	pointer
;	O
if	O
(	O
pb	pointer
->	O
depth	int
>	O
1	int
)	O
{	O
if	O
(	O
fprintf	function
(	O
fd	pointer
,	O
"P6\n"	pointer
)	O
==	O
EOF	O
)	O
goto	O
ERROR_EXIT	O
;	O
if	O
(	O
fprintf	function
(	O
fd	pointer
,	O
"%d %d\n255\n"	pointer
,	O
pb	pointer
->	O
nc	int
,	O
pb	pointer
->	O
nr	int
)	O
==	O
EOF	O
)	O
goto	O
ERROR_EXIT	O
;	O
for	O
(	O
row_c	int
=	O
0	int
;	O
row_c	int
<	O
pb	pointer
->	O
nr	int
;	O
row_c	int
++	O
)	O
{	O
row	pointer
=	O
get_RowBuf	function
(	O
pb	pointer
,	O
pb	pointer
->	O
nr	int
-	O
row_c	int
-	O
1	int
)	O
;	O
if	O
(	O
row	pointer
==	O
NULL	O
)	O
continue	O
;	O
for	O
(	O
x	int
=	O
0	int
;	O
x	int
<	O
pb	pointer
->	O
nc	int
;	O
x	int
++	O
)	O
{	O
colour	int
=	O
index_from_RowBuf	function
(	O
row	pointer
,	O
x	int
,	O
pb	pointer
)	O
;	O
if	O
(	O
fprintf	function
(	O
fd	pointer
,	O
"%c%c%c"	pointer
,	O
pt	struct
.	O
clut	array
[	O
colour	int
]	O
[	O
0	int
]	O
,	O
pt	struct
.	O
clut	array
[	O
colour	int
]	O
[	O
1	int
]	O
,	O
pt	struct
.	O
clut	array
[	O
colour	int
]	O
[	O
2	int
]	O
)	O
==	O
EOF	O
)	O
goto	O
ERROR_EXIT	O
;	O
}	O
if	O
(	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
&&	O
(	O
row_c	int
%	O
10	int
==	O
0	int
)	O
)	O
Eprintf	function
(	O
"."	pointer
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
fprintf	function
(	O
fd	pointer
,	O
"P4\n"	pointer
)	O
==	O
EOF	O
)	O
goto	O
ERROR_EXIT	O
;	O
if	O
(	O
fprintf	function
(	O
fd	pointer
,	O
"%d %d\n"	pointer
,	O
(	O
pb	pointer
->	O
nb	int
)	O
*	O
8	int
,	O
pb	pointer
->	O
nr	int
)	O
==	O
EOF	O
)	O
goto	O
ERROR_EXIT	O
;	O
for	O
(	O
row_c	int
=	O
0	int
;	O
row_c	int
<	O
pb	pointer
->	O
nr	int
;	O
row_c	int
++	O
)	O
{	O
row	pointer
=	O
get_RowBuf	function
(	O
pb	pointer
,	O
pb	pointer
->	O
nr	int
-	O
row_c	int
-	O
1	int
)	O
;	O
if	O
(	O
row	pointer
==	O
NULL	O
)	O
continue	O
;	O
for	O
(	O
byte_c	int
=	O
x	int
=	O
0	int
;	O
byte_c	int
<	O
pb	pointer
->	O
nb	int
;	O
byte_c	int
++	O
)	O
{	O
if	O
(	O
putc	function
(	O
row	pointer
->	O
buf	pointer
[	O
byte_c	int
]	O
,	O
fd	pointer
)	O
==	O
EOF	O
)	O
goto	O
ERROR_EXIT	O
;	O
}	O
if	O
(	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
&&	O
(	O
row_c	int
%	O
10	int
==	O
0	int
)	O
)	O
Eprintf	function
(	O
"."	pointer
)	O
;	O
}	O
}	O
fflush	function
(	O
fd	pointer
)	O
;	O
if	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
Eprintf	function
(	O
"\n"	pointer
)	O
;	O
if	O
(	O
fd	pointer
!=	O
stdout	pointer
)	O
fclose	function
(	O
fd	pointer
)	O
;	O
return	O
0	int
;	O
ERROR_EXIT	O
:	O
PError	function
(	O
"write_PBM"	pointer
)	O
;	O
return	O
ERROR	O
;	O
}	O
