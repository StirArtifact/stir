static	O
void	O
hgcd_hook	function
(	O
void	O
*	O
p	pointer
,	O
mp_srcptr	pointer
gp	pointer
,	O
mp_size_t	long
gn	long
,	O
mp_srcptr	pointer
qp	pointer
,	O
mp_size_t	long
qn	long
,	O
int	O
d	long
)	O
{	O
ASSERT	O
(	O
!	O
gp	pointer
)	O
;	O
ASSERT	O
(	O
d	long
>=	O
0	int
)	O
;	O
ASSERT	O
(	O
d	long
<=	O
1	int
)	O
;	O
MPN_NORMALIZE	O
(	O
qp	pointer
,	O
qn	long
)	O
;	O
if	O
(	O
qn	long
>	O
0	int
)	O
{	O
struct	O
hgcd_matrix	struct
*	O
M	pointer
=	O
(	O
struct	O
hgcd_matrix	struct
*	O
)	O
p	pointer
;	O
mp_ptr	pointer
tp	pointer
=	O
(	O
mp_ptr	pointer
)	O
qp	pointer
+	O
qn	long
;	O
mpn_hgcd_matrix_update_q	O
(	O
M	pointer
,	O
qp	pointer
,	O
qn	long
,	O
d	long
,	O
tp	pointer
)	O
;	O
}	O
}	O
mp_size_t	long
mpn_hgcd_step	O
(	O
mp_size_t	long
n	long
,	O
mp_ptr	pointer
ap	pointer
,	O
mp_ptr	pointer
bp	pointer
,	O
mp_size_t	long
s	array
,	O
struct	O
hgcd_matrix	struct
*	O
M	pointer
,	O
mp_ptr	pointer
tp	pointer
)	O
{	O
struct	O
hgcd_matrix1	struct
M1	struct
;	O
mp_limb_t	long
mask	long
;	O
mp_limb_t	long
ah	long
,	O
al	long
,	O
bh	long
,	O
bl	long
;	O
ASSERT	O
(	O
n	long
>	O
s	array
)	O
;	O
mask	long
=	O
ap	pointer
[	O
n	long
-	O
1	int
]	O
|	O
bp	pointer
[	O
n	long
-	O
1	int
]	O
;	O
ASSERT	O
(	O
mask	long
>	O
0	int
)	O
;	O
if	O
(	O
n	long
==	O
s	array
+	O
1	int
)	O
{	O
if	O
(	O
mask	long
<	O
4	int
)	O
goto	O
subtract	O
;	O
ah	long
=	O
ap	pointer
[	O
n	long
-	O
1	int
]	O
;	O
al	long
=	O
ap	pointer
[	O
n	long
-	O
2	int
]	O
;	O
bh	long
=	O
bp	pointer
[	O
n	long
-	O
1	int
]	O
;	O
bl	long
=	O
bp	pointer
[	O
n	long
-	O
2	int
]	O
;	O
}	O
else	O
if	O
(	O
mask	long
&	O
GMP_NUMB_HIGHBIT	O
)	O
{	O
ah	long
=	O
ap	pointer
[	O
n	long
-	O
1	int
]	O
;	O
al	long
=	O
ap	pointer
[	O
n	long
-	O
2	int
]	O
;	O
bh	long
=	O
bp	pointer
[	O
n	long
-	O
1	int
]	O
;	O
bl	long
=	O
bp	pointer
[	O
n	long
-	O
2	int
]	O
;	O
}	O
else	O
{	O
int	O
shift	long
;	O
count_leading_zeros	O
(	O
shift	long
,	O
mask	long
)	O
;	O
ah	long
=	O
MPN_EXTRACT_NUMB	O
(	O
shift	long
,	O
ap	pointer
[	O
n	long
-	O
1	int
]	O
,	O
ap	pointer
[	O
n	long
-	O
2	int
]	O
)	O
;	O
al	long
=	O
MPN_EXTRACT_NUMB	O
(	O
shift	long
,	O
ap	pointer
[	O
n	long
-	O
2	int
]	O
,	O
ap	pointer
[	O
n	long
-	O
3	int
]	O
)	O
;	O
bh	long
=	O
MPN_EXTRACT_NUMB	O
(	O
shift	long
,	O
bp	pointer
[	O
n	long
-	O
1	int
]	O
,	O
bp	pointer
[	O
n	long
-	O
2	int
]	O
)	O
;	O
bl	long
=	O
MPN_EXTRACT_NUMB	O
(	O
shift	long
,	O
bp	pointer
[	O
n	long
-	O
2	int
]	O
,	O
bp	pointer
[	O
n	long
-	O
3	int
]	O
)	O
;	O
}	O
if	O
(	O
mpn_hgcd2	O
(	O
ah	long
,	O
al	long
,	O
bh	long
,	O
bl	long
,	O
&	O
M1	struct
)	O
)	O
{	O
mpn_hgcd_matrix_mul_1	O
(	O
M	pointer
,	O
&	O
M1	struct
,	O
tp	pointer
)	O
;	O
MPN_COPY	O
(	O
tp	pointer
,	O
ap	pointer
,	O
n	long
)	O
;	O
return	O
mpn_matrix22_mul1_inverse_vector	O
(	O
&	O
M1	struct
,	O
ap	pointer
,	O
tp	pointer
,	O
bp	pointer
,	O
n	long
)	O
;	O
}	O
subtract	O
:	O
return	O
mpn_gcd_subdiv_step	O
(	O
ap	pointer
,	O
bp	pointer
,	O
n	long
,	O
s	array
,	O
hgcd_hook	function
,	O
M	pointer
,	O
tp	pointer
)	O
;	O
}	O
