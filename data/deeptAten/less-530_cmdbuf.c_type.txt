extern	O
int	O
sc_width	int
;	O
extern	O
int	O
utf_mode	int
;	O
static	O
char	O
cmdbuf	array
[	O
CMDBUF_SIZE	int
]	O
;	O
static	O
int	O
cmd_col	int
;	O
static	O
int	O
prompt_col	int
;	O
static	O
char	O
*	O
cp	pointer
;	O
static	O
int	O
cmd_offset	int
;	O
static	O
int	O
literal	int
;	O
static	O
int	O
updown_match	int
=	O
-	O
1	int
;	O
static	O
int	O
cmd_complete	function
(	O
)	O
;	O
static	O
int	O
in_completion	int
=	O
0	int
;	O
static	O
char	O
*	O
tk_text	pointer
;	O
static	O
char	O
*	O
tk_original	pointer
;	O
static	O
char	O
*	O
tk_ipoint	pointer
;	O
static	O
char	O
*	O
tk_trial	pointer
=	O
NULL	O
;	O
static	O
struct	O
textlist	struct
tk_tlist	struct
;	O
static	O
int	O
cmd_left	function
(	O
)	O
;	O
static	O
int	O
cmd_right	function
(	O
)	O
;	O
public	O
char	O
openquote	char
=	O
'"'	O
;	O
public	O
char	O
closequote	char
=	O
'"'	O
;	O
struct	O
mlist	pointer
{	O
struct	O
mlist	pointer
*	O
next	pointer
;	O
struct	O
mlist	pointer
*	O
prev	pointer
;	O
struct	O
mlist	pointer
*	O
curr_mp	pointer
;	O
char	O
*	O
string	pointer
;	O
int	O
modified	int
;	O
}	O
;	O
struct	O
mlist	pointer
mlist_search	struct
=	O
{	O
&	O
mlist_search	struct
,	O
&	O
mlist_search	struct
,	O
&	O
mlist_search	struct
,	O
NULL	O
,	O
0	int
}	O
;	O
public	O
void	O
*	O
ml_search	pointer
=	O
(	O
void	O
*	O
)	O
&	O
mlist_search	struct
;	O
struct	O
mlist	pointer
mlist_examine	struct
=	O
{	O
&	O
mlist_examine	struct
,	O
&	O
mlist_examine	struct
,	O
&	O
mlist_examine	struct
,	O
NULL	O
,	O
0	int
}	O
;	O
public	O
void	O
*	O
ml_examine	pointer
=	O
(	O
void	O
*	O
)	O
&	O
mlist_examine	struct
;	O
struct	O
mlist	pointer
mlist_shell	struct
=	O
{	O
&	O
mlist_shell	struct
,	O
&	O
mlist_shell	struct
,	O
&	O
mlist_shell	struct
,	O
NULL	O
,	O
0	int
}	O
;	O
public	O
void	O
*	O
ml_shell	pointer
=	O
(	O
void	O
*	O
)	O
&	O
mlist_shell	struct
;	O
static	O
struct	O
mlist	pointer
*	O
curr_mlist	pointer
=	O
NULL	O
;	O
static	O
int	O
curr_cmdflags	int
;	O
static	O
char	O
cmd_mbc_buf	array
[	O
MAX_UTF_CHAR_LEN	int
]	O
;	O
static	O
int	O
cmd_mbc_buf_len	int
;	O
static	O
int	O
cmd_mbc_buf_index	int
;	O
public	O
void	O
cmd_reset	function
(	O
)	O
{	O
cp	pointer
=	O
cmdbuf	array
;	O
*	O
cp	pointer
=	O
'\0'	O
;	O
cmd_col	int
=	O
0	int
;	O
cmd_offset	int
=	O
0	int
;	O
literal	int
=	O
0	int
;	O
cmd_mbc_buf_len	int
=	O
0	int
;	O
updown_match	int
=	O
-	O
1	int
;	O
}	O
public	O
void	O
clear_cmd	function
(	O
)	O
{	O
cmd_col	int
=	O
prompt_col	int
=	O
0	int
;	O
cmd_mbc_buf_len	int
=	O
0	int
;	O
updown_match	int
=	O
-	O
1	int
;	O
}	O
public	O
void	O
cmd_putstr	function
(	O
s	pointer
)	O
constant	O
char	O
*	O
s	pointer
;	O
{	O
LWCHAR	long
prev_ch	long
=	O
0	int
;	O
LWCHAR	long
ch	long
;	O
constant	O
char	O
*	O
endline	int
=	O
s	pointer
+	O
strlen	function
(	O
s	pointer
)	O
;	O
while	O
(	O
*	O
s	pointer
!=	O
'\0'	O
)	O
{	O
char	O
*	O
ns	pointer
=	O
(	O
char	O
*	O
)	O
s	pointer
;	O
int	O
width	int
;	O
ch	long
=	O
step_char	function
(	O
&	O
ns	pointer
,	O
+	O
1	int
,	O
endline	int
)	O
;	O
while	O
(	O
s	pointer
<	O
ns	pointer
)	O
putchr	function
(	O
*	O
s	pointer
++	O
)	O
;	O
if	O
(	O
!	O
utf_mode	int
)	O
width	int
=	O
1	int
;	O
else	O
if	O
(	O
is_composing_char	function
(	O
ch	long
)	O
||	O
is_combining_char	function
(	O
prev_ch	long
,	O
ch	long
)	O
)	O
width	int
=	O
0	int
;	O
else	O
width	int
=	O
is_wide_char	function
(	O
ch	long
)	O
?	O
2	int
:	O
1	int
;	O
cmd_col	int
+=	O
width	int
;	O
prompt_col	int
+=	O
width	int
;	O
prev_ch	long
=	O
ch	long
;	O
}	O
}	O
public	O
int	O
len_cmdbuf	function
(	O
)	O
{	O
char	O
*	O
s	pointer
=	O
cmdbuf	array
;	O
char	O
*	O
endline	int
=	O
s	pointer
+	O
strlen	function
(	O
s	pointer
)	O
;	O
int	O
len	int
=	O
0	int
;	O
while	O
(	O
*	O
s	pointer
!=	O
'\0'	O
)	O
{	O
step_char	function
(	O
&	O
s	pointer
,	O
+	O
1	int
,	O
endline	int
)	O
;	O
len	int
++	O
;	O
}	O
return	O
(	O
len	int
)	O
;	O
}	O
static	O
char	O
*	O
cmd_step_common	function
(	O
p	pointer
,	O
ch	long
,	O
len	int
,	O
pwidth	pointer
,	O
bswidth	pointer
)	O
char	O
*	O
p	pointer
;	O
LWCHAR	long
ch	long
;	O
int	O
len	int
;	O
int	O
*	O
pwidth	pointer
;	O
int	O
*	O
bswidth	pointer
;	O
{	O
char	O
*	O
pr	pointer
;	O
int	O
width	int
;	O
if	O
(	O
len	int
==	O
1	int
)	O
{	O
pr	pointer
=	O
prchar	function
(	O
(	O
int	O
)	O
ch	long
)	O
;	O
width	int
=	O
(	O
int	O
)	O
strlen	function
(	O
pr	pointer
)	O
;	O
}	O
else	O
{	O
pr	pointer
=	O
prutfchar	function
(	O
ch	long
)	O
;	O
if	O
(	O
is_composing_char	function
(	O
ch	long
)	O
)	O
width	int
=	O
0	int
;	O
else	O
if	O
(	O
is_ubin_char	function
(	O
ch	long
)	O
)	O
width	int
=	O
(	O
int	O
)	O
strlen	function
(	O
pr	pointer
)	O
;	O
else	O
{	O
LWCHAR	long
prev_ch	long
=	O
step_char	function
(	O
&	O
p	pointer
,	O
-	O
1	int
,	O
cmdbuf	array
)	O
;	O
if	O
(	O
is_combining_char	function
(	O
prev_ch	long
,	O
ch	long
)	O
)	O
width	int
=	O
0	int
;	O
else	O
width	int
=	O
is_wide_char	function
(	O
ch	long
)	O
?	O
2	int
:	O
1	int
;	O
}	O
}	O
if	O
(	O
pwidth	pointer
!=	O
NULL	O
)	O
*	O
pwidth	pointer
=	O
width	int
;	O
if	O
(	O
bswidth	pointer
!=	O
NULL	O
)	O
*	O
bswidth	pointer
=	O
width	int
;	O
return	O
(	O
pr	pointer
)	O
;	O
}	O
static	O
char	O
*	O
cmd_step_right	function
(	O
pp	pointer
,	O
pwidth	pointer
,	O
bswidth	pointer
)	O
char	O
*	O
*	O
pp	pointer
;	O
int	O
*	O
pwidth	pointer
;	O
int	O
*	O
bswidth	pointer
;	O
{	O
char	O
*	O
p	pointer
=	O
*	O
pp	pointer
;	O
LWCHAR	long
ch	long
=	O
step_char	function
(	O
pp	pointer
,	O
+	O
1	int
,	O
p	pointer
+	O
strlen	function
(	O
p	pointer
)	O
)	O
;	O
return	O
cmd_step_common	function
(	O
p	pointer
,	O
ch	long
,	O
*	O
pp	pointer
-	O
p	pointer
,	O
pwidth	pointer
,	O
bswidth	pointer
)	O
;	O
}	O
static	O
char	O
*	O
cmd_step_left	function
(	O
pp	pointer
,	O
pwidth	pointer
,	O
bswidth	pointer
)	O
char	O
*	O
*	O
pp	pointer
;	O
int	O
*	O
pwidth	pointer
;	O
int	O
*	O
bswidth	pointer
;	O
{	O
char	O
*	O
p	pointer
=	O
*	O
pp	pointer
;	O
LWCHAR	long
ch	long
=	O
step_char	function
(	O
pp	pointer
,	O
-	O
1	int
,	O
cmdbuf	array
)	O
;	O
return	O
cmd_step_common	function
(	O
*	O
pp	pointer
,	O
ch	long
,	O
p	pointer
-	O
*	O
pp	pointer
,	O
pwidth	pointer
,	O
bswidth	pointer
)	O
;	O
}	O
static	O
void	O
cmd_repaint	function
(	O
old_cp	pointer
)	O
constant	O
char	O
*	O
old_cp	pointer
;	O
{	O
clear_eol	function
(	O
)	O
;	O
while	O
(	O
*	O
cp	pointer
!=	O
'\0'	O
)	O
{	O
char	O
*	O
np	pointer
=	O
cp	pointer
;	O
int	O
width	int
;	O
char	O
*	O
pr	pointer
=	O
cmd_step_right	function
(	O
&	O
np	pointer
,	O
&	O
width	int
,	O
NULL	O
)	O
;	O
if	O
(	O
cmd_col	int
+	O
width	int
>=	O
sc_width	int
)	O
break	O
;	O
cp	pointer
=	O
np	pointer
;	O
putstr	function
(	O
pr	pointer
)	O
;	O
cmd_col	int
+=	O
width	int
;	O
}	O
while	O
(	O
*	O
cp	pointer
!=	O
'\0'	O
)	O
{	O
char	O
*	O
np	pointer
=	O
cp	pointer
;	O
int	O
width	int
;	O
char	O
*	O
pr	pointer
=	O
cmd_step_right	function
(	O
&	O
np	pointer
,	O
&	O
width	int
,	O
NULL	O
)	O
;	O
if	O
(	O
width	int
>	O
0	int
)	O
break	O
;	O
cp	pointer
=	O
np	pointer
;	O
putstr	function
(	O
pr	pointer
)	O
;	O
}	O
while	O
(	O
cp	pointer
>	O
old_cp	pointer
)	O
cmd_left	function
(	O
)	O
;	O
}	O
static	O
void	O
cmd_home	function
(	O
)	O
{	O
while	O
(	O
cmd_col	int
>	O
prompt_col	int
)	O
{	O
int	O
width	int
,	O
bswidth	pointer
;	O
cmd_step_left	function
(	O
&	O
cp	pointer
,	O
&	O
width	int
,	O
&	O
bswidth	pointer
)	O
;	O
while	O
(	O
bswidth	pointer
--	O
>	O
0	int
)	O
putbs	function
(	O
)	O
;	O
cmd_col	int
-=	O
width	int
;	O
}	O
cp	pointer
=	O
&	O
cmdbuf	array
[	O
cmd_offset	int
]	O
;	O
}	O
static	O
void	O
cmd_lshift	function
(	O
)	O
{	O
char	O
*	O
s	pointer
;	O
char	O
*	O
save_cp	pointer
;	O
int	O
cols	int
;	O
s	pointer
=	O
cmdbuf	array
+	O
cmd_offset	int
;	O
cols	int
=	O
0	int
;	O
while	O
(	O
cols	int
<	O
(	O
sc_width	int
-	O
prompt_col	int
)	O
/	O
2	int
&&	O
*	O
s	pointer
!=	O
'\0'	O
)	O
{	O
int	O
width	int
;	O
cmd_step_right	function
(	O
&	O
s	pointer
,	O
&	O
width	int
,	O
NULL	O
)	O
;	O
cols	int
+=	O
width	int
;	O
}	O
while	O
(	O
*	O
s	pointer
!=	O
'\0'	O
)	O
{	O
int	O
width	int
;	O
char	O
*	O
ns	pointer
=	O
s	pointer
;	O
cmd_step_right	function
(	O
&	O
ns	pointer
,	O
&	O
width	int
,	O
NULL	O
)	O
;	O
if	O
(	O
width	int
>	O
0	int
)	O
break	O
;	O
s	pointer
=	O
ns	pointer
;	O
}	O
cmd_offset	int
=	O
(	O
int	O
)	O
(	O
s	pointer
-	O
cmdbuf	array
)	O
;	O
save_cp	pointer
=	O
cp	pointer
;	O
cmd_home	function
(	O
)	O
;	O
cmd_repaint	function
(	O
save_cp	pointer
)	O
;	O
}	O
static	O
void	O
cmd_rshift	function
(	O
)	O
{	O
char	O
*	O
s	pointer
;	O
char	O
*	O
save_cp	pointer
;	O
int	O
cols	int
;	O
s	pointer
=	O
cmdbuf	array
+	O
cmd_offset	int
;	O
cols	int
=	O
0	int
;	O
while	O
(	O
cols	int
<	O
(	O
sc_width	int
-	O
prompt_col	int
)	O
/	O
2	int
&&	O
s	pointer
>	O
cmdbuf	array
)	O
{	O
int	O
width	int
;	O
cmd_step_left	function
(	O
&	O
s	pointer
,	O
&	O
width	int
,	O
NULL	O
)	O
;	O
cols	int
+=	O
width	int
;	O
}	O
cmd_offset	int
=	O
(	O
int	O
)	O
(	O
s	pointer
-	O
cmdbuf	array
)	O
;	O
save_cp	pointer
=	O
cp	pointer
;	O
cmd_home	function
(	O
)	O
;	O
cmd_repaint	function
(	O
save_cp	pointer
)	O
;	O
}	O
static	O
int	O
cmd_right	function
(	O
)	O
{	O
char	O
*	O
pr	pointer
;	O
char	O
*	O
ncp	pointer
;	O
int	O
width	int
;	O
if	O
(	O
*	O
cp	pointer
==	O
'\0'	O
)	O
{	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
ncp	pointer
=	O
cp	pointer
;	O
pr	pointer
=	O
cmd_step_right	function
(	O
&	O
ncp	pointer
,	O
&	O
width	int
,	O
NULL	O
)	O
;	O
if	O
(	O
cmd_col	int
+	O
width	int
>=	O
sc_width	int
)	O
cmd_lshift	function
(	O
)	O
;	O
else	O
if	O
(	O
cmd_col	int
+	O
width	int
==	O
sc_width	int
-	O
1	int
&&	O
cp	pointer
[	O
1	int
]	O
!=	O
'\0'	O
)	O
cmd_lshift	function
(	O
)	O
;	O
cp	pointer
=	O
ncp	pointer
;	O
cmd_col	int
+=	O
width	int
;	O
putstr	function
(	O
pr	pointer
)	O
;	O
while	O
(	O
*	O
cp	pointer
!=	O
'\0'	O
)	O
{	O
pr	pointer
=	O
cmd_step_right	function
(	O
&	O
ncp	pointer
,	O
&	O
width	int
,	O
NULL	O
)	O
;	O
if	O
(	O
width	int
>	O
0	int
)	O
break	O
;	O
putstr	function
(	O
pr	pointer
)	O
;	O
cp	pointer
=	O
ncp	pointer
;	O
}	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
static	O
int	O
cmd_left	function
(	O
)	O
{	O
char	O
*	O
ncp	pointer
;	O
int	O
width	int
=	O
0	int
;	O
int	O
bswidth	pointer
=	O
0	int
;	O
if	O
(	O
cp	pointer
<=	O
cmdbuf	array
)	O
{	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
ncp	pointer
=	O
cp	pointer
;	O
while	O
(	O
ncp	pointer
>	O
cmdbuf	array
)	O
{	O
cmd_step_left	function
(	O
&	O
ncp	pointer
,	O
&	O
width	int
,	O
&	O
bswidth	pointer
)	O
;	O
if	O
(	O
width	int
>	O
0	int
)	O
break	O
;	O
}	O
if	O
(	O
cmd_col	int
<	O
prompt_col	int
+	O
width	int
)	O
cmd_rshift	function
(	O
)	O
;	O
cp	pointer
=	O
ncp	pointer
;	O
cmd_col	int
-=	O
width	int
;	O
while	O
(	O
bswidth	pointer
--	O
>	O
0	int
)	O
putbs	function
(	O
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
static	O
int	O
cmd_ichar	function
(	O
cs	pointer
,	O
clen	int
)	O
char	O
*	O
cs	pointer
;	O
int	O
clen	int
;	O
{	O
char	O
*	O
s	pointer
;	O
if	O
(	O
strlen	function
(	O
cmdbuf	array
)	O
+	O
clen	int
>=	O
sizeof	O
(	O
cmdbuf	array
)	O
-	O
1	int
)	O
{	O
bell	function
(	O
)	O
;	O
return	O
(	O
CC_ERROR	int
)	O
;	O
}	O
for	O
(	O
s	pointer
=	O
&	O
cmdbuf	array
[	O
strlen	function
(	O
cmdbuf	array
)	O
]	O
;	O
s	pointer
>=	O
cp	pointer
;	O
s	pointer
--	O
)	O
s	pointer
[	O
clen	int
]	O
=	O
s	pointer
[	O
0	int
]	O
;	O
for	O
(	O
s	pointer
=	O
cp	pointer
;	O
s	pointer
<	O
cp	pointer
+	O
clen	int
;	O
s	pointer
++	O
)	O
*	O
s	pointer
=	O
*	O
cs	pointer
++	O
;	O
updown_match	int
=	O
-	O
1	int
;	O
cmd_repaint	function
(	O
cp	pointer
)	O
;	O
cmd_right	function
(	O
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
static	O
int	O
cmd_erase	function
(	O
)	O
{	O
char	O
*	O
s	pointer
;	O
int	O
clen	int
;	O
if	O
(	O
cp	pointer
==	O
cmdbuf	array
)	O
{	O
return	O
(	O
CC_QUIT	int
)	O
;	O
}	O
s	pointer
=	O
cp	pointer
;	O
cmd_left	function
(	O
)	O
;	O
clen	int
=	O
(	O
int	O
)	O
(	O
s	pointer
-	O
cp	pointer
)	O
;	O
for	O
(	O
s	pointer
=	O
cp	pointer
;	O
;	O
s	pointer
++	O
)	O
{	O
s	pointer
[	O
0	int
]	O
=	O
s	pointer
[	O
clen	int
]	O
;	O
if	O
(	O
s	pointer
[	O
0	int
]	O
==	O
'\0'	O
)	O
break	O
;	O
}	O
updown_match	int
=	O
-	O
1	int
;	O
cmd_repaint	function
(	O
cp	pointer
)	O
;	O
if	O
(	O
(	O
curr_cmdflags	int
&	O
CF_QUIT_ON_ERASE	int
)	O
&&	O
cp	pointer
==	O
cmdbuf	array
&&	O
*	O
cp	pointer
==	O
'\0'	O
)	O
return	O
(	O
CC_QUIT	int
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
static	O
int	O
cmd_delete	function
(	O
)	O
{	O
if	O
(	O
*	O
cp	pointer
==	O
'\0'	O
)	O
{	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
cmd_right	function
(	O
)	O
;	O
cmd_erase	function
(	O
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
static	O
int	O
cmd_werase	function
(	O
)	O
{	O
if	O
(	O
cp	pointer
>	O
cmdbuf	array
&&	O
cp	pointer
[	O
-	O
1	int
]	O
==	O
' '	O
)	O
{	O
while	O
(	O
cp	pointer
>	O
cmdbuf	array
&&	O
cp	pointer
[	O
-	O
1	int
]	O
==	O
' '	O
)	O
(	O
void	O
)	O
cmd_erase	function
(	O
)	O
;	O
}	O
else	O
{	O
while	O
(	O
cp	pointer
>	O
cmdbuf	array
&&	O
cp	pointer
[	O
-	O
1	int
]	O
!=	O
' '	O
)	O
(	O
void	O
)	O
cmd_erase	function
(	O
)	O
;	O
}	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
static	O
int	O
cmd_wdelete	function
(	O
)	O
{	O
if	O
(	O
*	O
cp	pointer
==	O
' '	O
)	O
{	O
while	O
(	O
*	O
cp	pointer
==	O
' '	O
)	O
(	O
void	O
)	O
cmd_delete	function
(	O
)	O
;	O
}	O
else	O
{	O
while	O
(	O
*	O
cp	pointer
!=	O
' '	O
&&	O
*	O
cp	pointer
!=	O
'\0'	O
)	O
(	O
void	O
)	O
cmd_delete	function
(	O
)	O
;	O
}	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
static	O
int	O
cmd_kill	function
(	O
)	O
{	O
if	O
(	O
cmdbuf	array
[	O
0	int
]	O
==	O
'\0'	O
)	O
{	O
return	O
(	O
CC_QUIT	int
)	O
;	O
}	O
cmd_offset	int
=	O
0	int
;	O
cmd_home	function
(	O
)	O
;	O
*	O
cp	pointer
=	O
'\0'	O
;	O
updown_match	int
=	O
-	O
1	int
;	O
cmd_repaint	function
(	O
cp	pointer
)	O
;	O
if	O
(	O
curr_cmdflags	int
&	O
CF_QUIT_ON_ERASE	int
)	O
return	O
(	O
CC_QUIT	int
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
public	O
void	O
set_mlist	function
(	O
mlist	pointer
,	O
cmdflags	int
)	O
void	O
*	O
mlist	pointer
;	O
int	O
cmdflags	int
;	O
{	O
curr_mlist	pointer
=	O
(	O
struct	O
mlist	pointer
*	O
)	O
mlist	pointer
;	O
curr_cmdflags	int
=	O
cmdflags	int
;	O
if	O
(	O
curr_mlist	pointer
!=	O
NULL	O
)	O
curr_mlist	pointer
->	O
curr_mp	pointer
=	O
curr_mlist	pointer
;	O
}	O
static	O
int	O
cmd_updown	function
(	O
action	int
)	O
int	O
action	int
;	O
{	O
constant	O
char	O
*	O
s	pointer
;	O
struct	O
mlist	pointer
*	O
ml	pointer
;	O
if	O
(	O
curr_mlist	pointer
==	O
NULL	O
)	O
{	O
bell	function
(	O
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
if	O
(	O
updown_match	int
<	O
0	int
)	O
{	O
updown_match	int
=	O
(	O
int	O
)	O
(	O
cp	pointer
-	O
cmdbuf	array
)	O
;	O
}	O
for	O
(	O
ml	pointer
=	O
curr_mlist	pointer
->	O
curr_mp	pointer
;	O
;	O
)	O
{	O
ml	pointer
=	O
(	O
action	int
==	O
EC_UP	int
)	O
?	O
ml	pointer
->	O
prev	pointer
:	O
ml	pointer
->	O
next	pointer
;	O
if	O
(	O
ml	pointer
==	O
curr_mlist	pointer
)	O
{	O
break	O
;	O
}	O
if	O
(	O
strncmp	function
(	O
cmdbuf	array
,	O
ml	pointer
->	O
string	pointer
,	O
updown_match	int
)	O
==	O
0	int
)	O
{	O
curr_mlist	pointer
->	O
curr_mp	pointer
=	O
ml	pointer
;	O
s	pointer
=	O
ml	pointer
->	O
string	pointer
;	O
if	O
(	O
s	pointer
==	O
NULL	O
)	O
s	pointer
=	O
""	pointer
;	O
cmd_home	function
(	O
)	O
;	O
clear_eol	function
(	O
)	O
;	O
strcpy	function
(	O
cmdbuf	array
,	O
s	pointer
)	O
;	O
for	O
(	O
cp	pointer
=	O
cmdbuf	array
;	O
*	O
cp	pointer
!=	O
'\0'	O
;	O
)	O
cmd_right	function
(	O
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
}	O
bell	function
(	O
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
public	O
void	O
cmd_addhist	function
(	O
mlist	pointer
,	O
cmd	pointer
,	O
modified	int
)	O
struct	O
mlist	pointer
*	O
mlist	pointer
;	O
constant	O
char	O
*	O
cmd	pointer
;	O
int	O
modified	int
;	O
{	O
struct	O
mlist	pointer
*	O
ml	pointer
;	O
if	O
(	O
strlen	function
(	O
cmd	pointer
)	O
==	O
0	int
)	O
return	O
;	O
ml	pointer
=	O
mlist	pointer
->	O
prev	pointer
;	O
if	O
(	O
ml	pointer
==	O
mlist	pointer
||	O
strcmp	function
(	O
ml	pointer
->	O
string	pointer
,	O
cmd	pointer
)	O
!=	O
0	int
)	O
{	O
ml	pointer
=	O
(	O
struct	O
mlist	pointer
*	O
)	O
ecalloc	function
(	O
1	int
,	O
sizeof	O
(	O
struct	O
mlist	pointer
)	O
)	O
;	O
ml	pointer
->	O
string	pointer
=	O
save	function
(	O
cmd	pointer
)	O
;	O
ml	pointer
->	O
modified	int
=	O
modified	int
;	O
ml	pointer
->	O
next	pointer
=	O
mlist	pointer
;	O
ml	pointer
->	O
prev	pointer
=	O
mlist	pointer
->	O
prev	pointer
;	O
mlist	pointer
->	O
prev	pointer
->	O
next	pointer
=	O
ml	pointer
;	O
mlist	pointer
->	O
prev	pointer
=	O
ml	pointer
;	O
}	O
mlist	pointer
->	O
curr_mp	pointer
=	O
ml	pointer
->	O
next	pointer
;	O
}	O
public	O
void	O
cmd_accept	function
(	O
)	O
{	O
if	O
(	O
curr_mlist	pointer
==	O
NULL	O
)	O
return	O
;	O
cmd_addhist	function
(	O
curr_mlist	pointer
,	O
cmdbuf	array
,	O
1	int
)	O
;	O
curr_mlist	pointer
->	O
modified	int
=	O
1	int
;	O
}	O
static	O
int	O
cmd_edit	function
(	O
c	int
)	O
int	O
c	int
;	O
{	O
int	O
action	int
;	O
int	O
flags	int
;	O
flags	int
=	O
0	int
;	O
if	O
(	O
curr_mlist	pointer
==	O
NULL	O
)	O
flags	int
|=	O
EC_NOHISTORY	int
;	O
if	O
(	O
curr_mlist	pointer
==	O
ml_search	pointer
)	O
flags	int
|=	O
EC_NOCOMPLETE	int
;	O
action	int
=	O
editchar	function
(	O
c	int
,	O
flags	int
)	O
;	O
switch	O
(	O
action	int
)	O
{	O
case	O
EC_RIGHT	int
:	O
not_in_completion	O
(	O
)	O
;	O
return	O
(	O
cmd_right	function
(	O
)	O
)	O
;	O
case	O
EC_LEFT	int
:	O
not_in_completion	O
(	O
)	O
;	O
return	O
(	O
cmd_left	function
(	O
)	O
)	O
;	O
case	O
EC_W_RIGHT	int
:	O
not_in_completion	O
(	O
)	O
;	O
while	O
(	O
*	O
cp	pointer
!=	O
'\0'	O
&&	O
*	O
cp	pointer
!=	O
' '	O
)	O
cmd_right	function
(	O
)	O
;	O
while	O
(	O
*	O
cp	pointer
==	O
' '	O
)	O
cmd_right	function
(	O
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
case	O
EC_W_LEFT	int
:	O
not_in_completion	O
(	O
)	O
;	O
while	O
(	O
cp	pointer
>	O
cmdbuf	array
&&	O
cp	pointer
[	O
-	O
1	int
]	O
==	O
' '	O
)	O
cmd_left	function
(	O
)	O
;	O
while	O
(	O
cp	pointer
>	O
cmdbuf	array
&&	O
cp	pointer
[	O
-	O
1	int
]	O
!=	O
' '	O
)	O
cmd_left	function
(	O
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
case	O
EC_HOME	int
:	O
not_in_completion	O
(	O
)	O
;	O
cmd_offset	int
=	O
0	int
;	O
cmd_home	function
(	O
)	O
;	O
cmd_repaint	function
(	O
cp	pointer
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
case	O
EC_END	int
:	O
not_in_completion	O
(	O
)	O
;	O
while	O
(	O
*	O
cp	pointer
!=	O
'\0'	O
)	O
cmd_right	function
(	O
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
case	O
EC_INSERT	int
:	O
not_in_completion	O
(	O
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
case	O
EC_BACKSPACE	int
:	O
not_in_completion	O
(	O
)	O
;	O
return	O
(	O
cmd_erase	function
(	O
)	O
)	O
;	O
case	O
EC_LINEKILL	int
:	O
not_in_completion	O
(	O
)	O
;	O
return	O
(	O
cmd_kill	function
(	O
)	O
)	O
;	O
case	O
EC_ABORT	int
:	O
not_in_completion	O
(	O
)	O
;	O
(	O
void	O
)	O
cmd_kill	function
(	O
)	O
;	O
return	O
(	O
CC_QUIT	int
)	O
;	O
case	O
EC_W_BACKSPACE	int
:	O
not_in_completion	O
(	O
)	O
;	O
return	O
(	O
cmd_werase	function
(	O
)	O
)	O
;	O
case	O
EC_DELETE	int
:	O
not_in_completion	O
(	O
)	O
;	O
return	O
(	O
cmd_delete	function
(	O
)	O
)	O
;	O
case	O
EC_W_DELETE	int
:	O
not_in_completion	O
(	O
)	O
;	O
return	O
(	O
cmd_wdelete	function
(	O
)	O
)	O
;	O
case	O
EC_LITERAL	int
:	O
literal	int
=	O
1	int
;	O
return	O
(	O
CC_OK	int
)	O
;	O
case	O
EC_UP	int
:	O
case	O
EC_DOWN	int
:	O
not_in_completion	O
(	O
)	O
;	O
return	O
(	O
cmd_updown	function
(	O
action	int
)	O
)	O
;	O
case	O
EC_F_COMPLETE	int
:	O
case	O
EC_B_COMPLETE	int
:	O
case	O
EC_EXPAND	int
:	O
return	O
(	O
cmd_complete	function
(	O
action	int
)	O
)	O
;	O
case	O
EC_NOACTION	int
:	O
return	O
(	O
CC_OK	int
)	O
;	O
default	O
:	O
not_in_completion	O
(	O
)	O
;	O
return	O
(	O
CC_PASS	int
)	O
;	O
}	O
}	O
static	O
int	O
cmd_istr	function
(	O
str	pointer
)	O
char	O
*	O
str	pointer
;	O
{	O
char	O
*	O
s	pointer
;	O
int	O
action	int
;	O
char	O
*	O
endline	int
=	O
str	pointer
+	O
strlen	function
(	O
str	pointer
)	O
;	O
for	O
(	O
s	pointer
=	O
str	pointer
;	O
*	O
s	pointer
!=	O
'\0'	O
;	O
)	O
{	O
char	O
*	O
os	pointer
=	O
s	pointer
;	O
step_char	function
(	O
&	O
s	pointer
,	O
+	O
1	int
,	O
endline	int
)	O
;	O
action	int
=	O
cmd_ichar	function
(	O
os	pointer
,	O
s	pointer
-	O
os	pointer
)	O
;	O
if	O
(	O
action	int
!=	O
CC_OK	int
)	O
{	O
bell	function
(	O
)	O
;	O
return	O
(	O
action	int
)	O
;	O
}	O
}	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
static	O
char	O
*	O
delimit_word	function
(	O
)	O
{	O
char	O
*	O
word	pointer
;	O
char	O
*	O
p	pointer
;	O
int	O
delim_quoted	int
=	O
0	int
;	O
int	O
meta_quoted	int
=	O
0	int
;	O
constant	O
char	O
*	O
esc	pointer
=	O
get_meta_escape	function
(	O
)	O
;	O
int	O
esclen	int
=	O
(	O
int	O
)	O
strlen	function
(	O
esc	pointer
)	O
;	O
if	O
(	O
*	O
cp	pointer
!=	O
' '	O
&&	O
*	O
cp	pointer
!=	O
'\0'	O
)	O
{	O
while	O
(	O
*	O
cp	pointer
!=	O
' '	O
&&	O
*	O
cp	pointer
!=	O
'\0'	O
)	O
cmd_right	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
cp	pointer
>	O
cmdbuf	array
&&	O
cp	pointer
[	O
-	O
1	int
]	O
!=	O
' '	O
)	O
{	O
;	O
}	O
if	O
(	O
cp	pointer
==	O
cmdbuf	array
)	O
return	O
(	O
NULL	O
)	O
;	O
for	O
(	O
word	pointer
=	O
cmdbuf	array
;	O
word	pointer
<	O
cp	pointer
;	O
word	pointer
++	O
)	O
if	O
(	O
*	O
word	pointer
!=	O
' '	O
)	O
break	O
;	O
if	O
(	O
word	pointer
>=	O
cp	pointer
)	O
return	O
(	O
cp	pointer
)	O
;	O
for	O
(	O
p	pointer
=	O
cmdbuf	array
;	O
p	pointer
<	O
cp	pointer
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
meta_quoted	int
)	O
{	O
meta_quoted	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
esclen	int
>	O
0	int
&&	O
p	pointer
+	O
esclen	int
<	O
cp	pointer
&&	O
strncmp	function
(	O
p	pointer
,	O
esc	pointer
,	O
esclen	int
)	O
==	O
0	int
)	O
{	O
meta_quoted	int
=	O
1	int
;	O
p	pointer
+=	O
esclen	int
-	O
1	int
;	O
}	O
else	O
if	O
(	O
delim_quoted	int
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
closequote	char
)	O
delim_quoted	int
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
*	O
p	pointer
==	O
openquote	char
)	O
delim_quoted	int
=	O
1	int
;	O
else	O
if	O
(	O
*	O
p	pointer
==	O
' '	O
)	O
word	pointer
=	O
p	pointer
+	O
1	int
;	O
}	O
}	O
return	O
(	O
word	pointer
)	O
;	O
}	O
static	O
void	O
init_compl	function
(	O
)	O
{	O
char	O
*	O
word	pointer
;	O
char	O
c	int
;	O
if	O
(	O
tk_text	pointer
!=	O
NULL	O
)	O
{	O
free	function
(	O
tk_text	pointer
)	O
;	O
tk_text	pointer
=	O
NULL	O
;	O
}	O
word	pointer
=	O
delimit_word	function
(	O
)	O
;	O
if	O
(	O
word	pointer
==	O
NULL	O
)	O
return	O
;	O
tk_ipoint	pointer
=	O
word	pointer
;	O
if	O
(	O
tk_original	pointer
!=	O
NULL	O
)	O
free	function
(	O
tk_original	pointer
)	O
;	O
tk_original	pointer
=	O
(	O
char	O
*	O
)	O
ecalloc	function
(	O
cp	pointer
-	O
word	pointer
+	O
1	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
strncpy	function
(	O
tk_original	pointer
,	O
word	pointer
,	O
cp	pointer
-	O
word	pointer
)	O
;	O
c	int
=	O
*	O
cp	pointer
;	O
*	O
cp	pointer
=	O
'\0'	O
;	O
if	O
(	O
*	O
word	pointer
!=	O
openquote	char
)	O
{	O
tk_text	pointer
=	O
fcomplete	function
(	O
word	pointer
)	O
;	O
}	O
else	O
{	O
char	O
*	O
qword	pointer
=	O
shell_quote	function
(	O
word	pointer
+	O
1	int
)	O
;	O
if	O
(	O
qword	pointer
==	O
NULL	O
)	O
tk_text	pointer
=	O
fcomplete	function
(	O
word	pointer
+	O
1	int
)	O
;	O
else	O
{	O
tk_text	pointer
=	O
fcomplete	function
(	O
qword	pointer
)	O
;	O
free	function
(	O
qword	pointer
)	O
;	O
}	O
}	O
*	O
cp	pointer
=	O
c	int
;	O
}	O
static	O
char	O
*	O
next_compl	function
(	O
action	int
,	O
prev	pointer
)	O
int	O
action	int
;	O
char	O
*	O
prev	pointer
;	O
{	O
switch	O
(	O
action	int
)	O
{	O
case	O
EC_F_COMPLETE	int
:	O
return	O
(	O
forw_textlist	function
(	O
&	O
tk_tlist	struct
,	O
prev	pointer
)	O
)	O
;	O
case	O
EC_B_COMPLETE	int
:	O
return	O
(	O
back_textlist	function
(	O
&	O
tk_tlist	struct
,	O
prev	pointer
)	O
)	O
;	O
}	O
return	O
(	O
"?"	pointer
)	O
;	O
}	O
static	O
int	O
cmd_complete	function
(	O
action	int
)	O
int	O
action	int
;	O
{	O
char	O
*	O
s	pointer
;	O
if	O
(	O
!	O
in_completion	int
||	O
action	int
==	O
EC_EXPAND	int
)	O
{	O
init_compl	function
(	O
)	O
;	O
if	O
(	O
tk_text	pointer
==	O
NULL	O
)	O
{	O
bell	function
(	O
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
if	O
(	O
action	int
==	O
EC_EXPAND	int
)	O
{	O
tk_trial	pointer
=	O
tk_text	pointer
;	O
}	O
else	O
{	O
in_completion	int
=	O
1	int
;	O
init_textlist	function
(	O
&	O
tk_tlist	struct
,	O
tk_text	pointer
)	O
;	O
tk_trial	pointer
=	O
next_compl	function
(	O
action	int
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
}	O
else	O
{	O
tk_trial	pointer
=	O
next_compl	function
(	O
action	int
,	O
tk_trial	pointer
)	O
;	O
}	O
while	O
(	O
cp	pointer
>	O
tk_ipoint	pointer
)	O
(	O
void	O
)	O
cmd_erase	function
(	O
)	O
;	O
if	O
(	O
tk_trial	pointer
==	O
NULL	O
)	O
{	O
in_completion	int
=	O
0	int
;	O
if	O
(	O
cmd_istr	function
(	O
tk_original	pointer
)	O
!=	O
CC_OK	int
)	O
goto	O
fail	O
;	O
}	O
else	O
{	O
if	O
(	O
cmd_istr	function
(	O
tk_trial	pointer
)	O
!=	O
CC_OK	int
)	O
goto	O
fail	O
;	O
if	O
(	O
is_dir	function
(	O
tk_trial	pointer
)	O
)	O
{	O
if	O
(	O
cp	pointer
>	O
cmdbuf	array
&&	O
cp	pointer
[	O
-	O
1	int
]	O
==	O
closequote	char
)	O
(	O
void	O
)	O
cmd_erase	function
(	O
)	O
;	O
s	pointer
=	O
lgetenv	function
(	O
"LESSSEPARATOR"	pointer
)	O
;	O
if	O
(	O
s	pointer
==	O
NULL	O
)	O
s	pointer
=	O
PATHNAME_SEP	pointer
;	O
if	O
(	O
cmd_istr	function
(	O
s	pointer
)	O
!=	O
CC_OK	int
)	O
goto	O
fail	O
;	O
}	O
}	O
return	O
(	O
CC_OK	int
)	O
;	O
fail	O
:	O
in_completion	int
=	O
0	int
;	O
bell	function
(	O
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
public	O
int	O
cmd_char	function
(	O
c	int
)	O
int	O
c	int
;	O
{	O
int	O
action	int
;	O
int	O
len	int
;	O
if	O
(	O
!	O
utf_mode	int
)	O
{	O
cmd_mbc_buf	array
[	O
0	int
]	O
=	O
c	int
;	O
len	int
=	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
cmd_mbc_buf_len	int
==	O
0	int
)	O
{	O
retry	O
:	O
cmd_mbc_buf_index	int
=	O
1	int
;	O
*	O
cmd_mbc_buf	array
=	O
c	int
;	O
if	O
(	O
IS_ASCII_OCTET	O
(	O
c	int
)	O
)	O
cmd_mbc_buf_len	int
=	O
1	int
;	O
else	O
if	O
(	O
IS_UTF8_LEAD	O
(	O
c	int
)	O
)	O
{	O
cmd_mbc_buf_len	int
=	O
utf_len	function
(	O
c	int
)	O
;	O
return	O
(	O
CC_OK	int
)	O
;	O
}	O
else	O
{	O
bell	function
(	O
)	O
;	O
return	O
(	O
CC_ERROR	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
IS_UTF8_TRAIL	O
(	O
c	int
)	O
)	O
{	O
cmd_mbc_buf	array
[	O
cmd_mbc_buf_index	int
++	O
]	O
=	O
c	int
;	O
if	O
(	O
cmd_mbc_buf_index	int
<	O
cmd_mbc_buf_len	int
)	O
return	O
(	O
CC_OK	int
)	O
;	O
if	O
(	O
!	O
is_utf8_well_formed	function
(	O
cmd_mbc_buf	array
,	O
cmd_mbc_buf_index	int
)	O
)	O
{	O
cmd_mbc_buf_len	int
=	O
0	int
;	O
bell	function
(	O
)	O
;	O
return	O
(	O
CC_ERROR	int
)	O
;	O
}	O
}	O
else	O
{	O
cmd_mbc_buf_len	int
=	O
0	int
;	O
bell	function
(	O
)	O
;	O
goto	O
retry	O
;	O
}	O
len	int
=	O
cmd_mbc_buf_len	int
;	O
cmd_mbc_buf_len	int
=	O
0	int
;	O
}	O
if	O
(	O
literal	int
)	O
{	O
literal	int
=	O
0	int
;	O
return	O
(	O
cmd_ichar	function
(	O
cmd_mbc_buf	array
,	O
len	int
)	O
)	O
;	O
}	O
if	O
(	O
in_mca	function
(	O
)	O
&&	O
len	int
==	O
1	int
)	O
{	O
action	int
=	O
cmd_edit	function
(	O
c	int
)	O
;	O
switch	O
(	O
action	int
)	O
{	O
case	O
CC_OK	int
:	O
case	O
CC_QUIT	int
:	O
return	O
(	O
action	int
)	O
;	O
case	O
CC_PASS	int
:	O
break	O
;	O
}	O
}	O
return	O
(	O
cmd_ichar	function
(	O
cmd_mbc_buf	array
,	O
len	int
)	O
)	O
;	O
}	O
public	O
LINENUM	long
cmd_int	function
(	O
frac	pointer
)	O
long	O
*	O
frac	pointer
;	O
{	O
char	O
*	O
p	pointer
;	O
LINENUM	long
n	int
=	O
0	int
;	O
int	O
err	int
;	O
for	O
(	O
p	pointer
=	O
cmdbuf	array
;	O
*	O
p	pointer
>=	O
'0'	O
&&	O
*	O
p	pointer
<=	O
'9'	O
;	O
p	pointer
++	O
)	O
n	int
=	O
(	O
n	int
*	O
10	int
)	O
+	O
(	O
*	O
p	pointer
-	O
'0'	O
)	O
;	O
*	O
frac	pointer
=	O
0	int
;	O
if	O
(	O
*	O
p	pointer
++	O
==	O
'.'	O
)	O
{	O
*	O
frac	pointer
=	O
getfraction	function
(	O
&	O
p	pointer
,	O
NULL	O
,	O
&	O
err	int
)	O
;	O
}	O
return	O
(	O
n	int
)	O
;	O
}	O
public	O
char	O
*	O
get_cmdbuf	function
(	O
)	O
{	O
return	O
(	O
cmdbuf	array
)	O
;	O
}	O
public	O
char	O
*	O
cmd_lastpattern	function
(	O
)	O
{	O
if	O
(	O
curr_mlist	pointer
==	O
NULL	O
)	O
return	O
(	O
NULL	O
)	O
;	O
return	O
(	O
curr_mlist	pointer
->	O
curr_mp	pointer
->	O
prev	pointer
->	O
string	pointer
)	O
;	O
}	O
static	O
int	O
mlist_size	function
(	O
ml	pointer
)	O
struct	O
mlist	pointer
*	O
ml	pointer
;	O
{	O
int	O
size	int
=	O
0	int
;	O
for	O
(	O
ml	pointer
=	O
ml	pointer
->	O
next	pointer
;	O
ml	pointer
->	O
string	pointer
!=	O
NULL	O
;	O
ml	pointer
=	O
ml	pointer
->	O
next	pointer
)	O
++	O
size	int
;	O
return	O
size	int
;	O
}	O
static	O
char	O
*	O
histfile_name	function
(	O
)	O
{	O
char	O
*	O
home	function
;	O
char	O
*	O
name	pointer
;	O
int	O
len	int
;	O
name	pointer
=	O
lgetenv	function
(	O
"LESSHISTFILE"	pointer
)	O
;	O
if	O
(	O
name	pointer
!=	O
NULL	O
&&	O
*	O
name	pointer
!=	O
'\0'	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
"-"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
name	pointer
,	O
"/dev/null"	pointer
)	O
==	O
0	int
)	O
return	O
(	O
NULL	O
)	O
;	O
return	O
(	O
save	function
(	O
name	pointer
)	O
)	O
;	O
}	O
if	O
(	O
strcmp	function
(	O
LESSHISTFILE	pointer
,	O
""	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
LESSHISTFILE	pointer
,	O
"-"	pointer
)	O
==	O
0	int
)	O
return	O
(	O
NULL	O
)	O
;	O
home	function
=	O
lgetenv	function
(	O
"HOME"	pointer
)	O
;	O
if	O
(	O
home	function
==	O
NULL	O
||	O
*	O
home	function
==	O
'\0'	O
)	O
{	O
return	O
(	O
NULL	O
)	O
;	O
}	O
len	int
=	O
(	O
int	O
)	O
(	O
strlen	function
(	O
home	function
)	O
+	O
strlen	function
(	O
LESSHISTFILE	pointer
)	O
+	O
2	int
)	O
;	O
name	pointer
=	O
(	O
char	O
*	O
)	O
ecalloc	function
(	O
len	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
SNPRINTF2	O
(	O
name	pointer
,	O
len	int
,	O
"%s/%s"	pointer
,	O
home	function
,	O
LESSHISTFILE	pointer
)	O
;	O
return	O
(	O
name	pointer
)	O
;	O
}	O
static	O
void	O
read_cmdhist2	function
(	O
action	int
,	O
uparam	pointer
,	O
skip_search	int
,	O
skip_shell	int
)	O
void	O
(	O
*	O
action	int
)	O
(	O
void	O
*	O
,	O
struct	O
mlist	pointer
*	O
,	O
char	O
*	O
)	O
;	O
void	O
*	O
uparam	pointer
;	O
int	O
skip_search	int
;	O
int	O
skip_shell	int
;	O
{	O
struct	O
mlist	pointer
*	O
ml	pointer
=	O
NULL	O
;	O
char	O
line	pointer
[	O
CMDBUF_SIZE	int
]	O
;	O
char	O
*	O
filename	pointer
;	O
FILE	struct
*	O
f	int
;	O
char	O
*	O
p	pointer
;	O
int	O
*	O
skip	pointer
=	O
NULL	O
;	O
filename	pointer
=	O
histfile_name	function
(	O
)	O
;	O
if	O
(	O
filename	pointer
==	O
NULL	O
)	O
return	O
;	O
f	int
=	O
fopen	function
(	O
filename	pointer
,	O
"r"	pointer
)	O
;	O
free	function
(	O
filename	pointer
)	O
;	O
if	O
(	O
f	int
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
fgets	function
(	O
line	pointer
,	O
sizeof	O
(	O
line	pointer
)	O
,	O
f	int
)	O
==	O
NULL	O
||	O
strncmp	function
(	O
line	pointer
,	O
HISTFILE_FIRST_LINE	pointer
,	O
strlen	function
(	O
HISTFILE_FIRST_LINE	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
fclose	function
(	O
f	int
)	O
;	O
return	O
;	O
}	O
while	O
(	O
fgets	function
(	O
line	pointer
,	O
sizeof	O
(	O
line	pointer
)	O
,	O
f	int
)	O
!=	O
NULL	O
)	O
{	O
for	O
(	O
p	pointer
=	O
line	pointer
;	O
*	O
p	pointer
!=	O
'\0'	O
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
'\n'	O
||	O
*	O
p	pointer
==	O
'\r'	O
)	O
{	O
*	O
p	pointer
=	O
'\0'	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
strcmp	function
(	O
line	pointer
,	O
HISTFILE_SEARCH_SECTION	pointer
)	O
==	O
0	int
)	O
{	O
ml	pointer
=	O
&	O
mlist_search	struct
;	O
skip	pointer
=	O
&	O
skip_search	int
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
line	pointer
,	O
HISTFILE_SHELL_SECTION	pointer
)	O
==	O
0	int
)	O
{	O
ml	pointer
=	O
&	O
mlist_shell	struct
;	O
skip	pointer
=	O
&	O
skip_shell	int
;	O
}	O
else	O
if	O
(	O
*	O
line	pointer
==	O
'"'	O
)	O
{	O
if	O
(	O
ml	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
skip	pointer
!=	O
NULL	O
&&	O
*	O
skip	pointer
>	O
0	int
)	O
--	O
(	O
*	O
skip	pointer
)	O
;	O
else	O
(	O
*	O
action	int
)	O
(	O
uparam	pointer
,	O
ml	pointer
,	O
line	pointer
+	O
1	int
)	O
;	O
}	O
}	O
}	O
fclose	function
(	O
f	int
)	O
;	O
}	O
static	O
void	O
read_cmdhist	function
(	O
action	int
,	O
uparam	pointer
,	O
skip_search	int
,	O
skip_shell	int
)	O
void	O
(	O
*	O
action	int
)	O
(	O
void	O
*	O
,	O
struct	O
mlist	pointer
*	O
,	O
char	O
*	O
)	O
;	O
void	O
*	O
uparam	pointer
;	O
int	O
skip_search	int
;	O
int	O
skip_shell	int
;	O
{	O
read_cmdhist2	function
(	O
action	int
,	O
uparam	pointer
,	O
skip_search	int
,	O
skip_shell	int
)	O
;	O
(	O
*	O
action	int
)	O
(	O
uparam	pointer
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
static	O
void	O
addhist_init	function
(	O
void	O
*	O
uparam	pointer
,	O
struct	O
mlist	pointer
*	O
ml	pointer
,	O
char	O
*	O
string	pointer
)	O
{	O
if	O
(	O
ml	pointer
==	O
NULL	O
||	O
string	pointer
==	O
NULL	O
)	O
return	O
;	O
cmd_addhist	function
(	O
ml	pointer
,	O
string	pointer
,	O
0	int
)	O
;	O
}	O
public	O
void	O
init_cmdhist	function
(	O
)	O
{	O
read_cmdhist	function
(	O
&	O
addhist_init	function
,	O
NULL	O
,	O
0	int
,	O
0	int
)	O
;	O
}	O
static	O
void	O
write_mlist_header	function
(	O
ml	pointer
,	O
f	int
)	O
struct	O
mlist	pointer
*	O
ml	pointer
;	O
FILE	struct
*	O
f	int
;	O
{	O
if	O
(	O
ml	pointer
==	O
&	O
mlist_search	struct
)	O
fprintf	function
(	O
f	int
,	O
"%s\n"	pointer
,	O
HISTFILE_SEARCH_SECTION	pointer
)	O
;	O
else	O
if	O
(	O
ml	pointer
==	O
&	O
mlist_shell	struct
)	O
fprintf	function
(	O
f	int
,	O
"%s\n"	pointer
,	O
HISTFILE_SHELL_SECTION	pointer
)	O
;	O
}	O
static	O
void	O
write_mlist	function
(	O
ml	pointer
,	O
f	int
)	O
struct	O
mlist	pointer
*	O
ml	pointer
;	O
FILE	struct
*	O
f	int
;	O
{	O
for	O
(	O
ml	pointer
=	O
ml	pointer
->	O
next	pointer
;	O
ml	pointer
->	O
string	pointer
!=	O
NULL	O
;	O
ml	pointer
=	O
ml	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
!	O
ml	pointer
->	O
modified	int
)	O
continue	O
;	O
fprintf	function
(	O
f	int
,	O
"\"%s\n"	pointer
,	O
ml	pointer
->	O
string	pointer
)	O
;	O
ml	pointer
->	O
modified	int
=	O
0	int
;	O
}	O
ml	pointer
->	O
modified	int
=	O
0	int
;	O
}	O
static	O
char	O
*	O
make_tempname	function
(	O
filename	pointer
)	O
char	O
*	O
filename	pointer
;	O
{	O
char	O
lastch	char
;	O
char	O
*	O
tempname	pointer
=	O
ecalloc	function
(	O
1	int
,	O
strlen	function
(	O
filename	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
tempname	pointer
,	O
filename	pointer
)	O
;	O
lastch	char
=	O
tempname	pointer
[	O
strlen	function
(	O
tempname	pointer
)	O
-	O
1	int
]	O
;	O
tempname	pointer
[	O
strlen	function
(	O
tempname	pointer
)	O
-	O
1	int
]	O
=	O
(	O
lastch	char
==	O
'Q'	O
)	O
?	O
'Z'	O
:	O
'Q'	O
;	O
return	O
tempname	pointer
;	O
}	O
struct	O
save_ctx	struct
{	O
struct	O
mlist	pointer
*	O
mlist	pointer
;	O
FILE	struct
*	O
fout	pointer
;	O
}	O
;	O
static	O
void	O
copy_hist	function
(	O
void	O
*	O
uparam	pointer
,	O
struct	O
mlist	pointer
*	O
ml	pointer
,	O
char	O
*	O
string	pointer
)	O
{	O
struct	O
save_ctx	struct
*	O
ctx	pointer
=	O
(	O
struct	O
save_ctx	struct
*	O
)	O
uparam	pointer
;	O
if	O
(	O
ml	pointer
!=	O
ctx	pointer
->	O
mlist	pointer
)	O
{	O
if	O
(	O
ctx	pointer
->	O
mlist	pointer
)	O
write_mlist	function
(	O
ctx	pointer
->	O
mlist	pointer
,	O
ctx	pointer
->	O
fout	pointer
)	O
;	O
ctx	pointer
->	O
mlist	pointer
=	O
ml	pointer
;	O
write_mlist_header	function
(	O
ctx	pointer
->	O
mlist	pointer
,	O
ctx	pointer
->	O
fout	pointer
)	O
;	O
}	O
if	O
(	O
string	pointer
!=	O
NULL	O
)	O
{	O
fprintf	function
(	O
ctx	pointer
->	O
fout	pointer
,	O
"\"%s\n"	pointer
,	O
string	pointer
)	O
;	O
}	O
if	O
(	O
ml	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
mlist_search	struct
.	O
modified	int
)	O
{	O
write_mlist_header	function
(	O
&	O
mlist_search	struct
,	O
ctx	pointer
->	O
fout	pointer
)	O
;	O
write_mlist	function
(	O
&	O
mlist_search	struct
,	O
ctx	pointer
->	O
fout	pointer
)	O
;	O
}	O
if	O
(	O
mlist_shell	struct
.	O
modified	int
)	O
{	O
write_mlist_header	function
(	O
&	O
mlist_shell	struct
,	O
ctx	pointer
->	O
fout	pointer
)	O
;	O
write_mlist	function
(	O
&	O
mlist_shell	struct
,	O
ctx	pointer
->	O
fout	pointer
)	O
;	O
}	O
}	O
}	O
static	O
void	O
make_file_private	function
(	O
f	int
)	O
FILE	struct
*	O
f	int
;	O
{	O
int	O
do_chmod	int
=	O
1	int
;	O
struct	O
stat	struct
statbuf	struct
;	O
int	O
r	int
=	O
fstat	function
(	O
fileno	function
(	O
f	int
)	O
,	O
&	O
statbuf	struct
)	O
;	O
if	O
(	O
r	int
<	O
0	int
||	O
!	O
S_ISREG	O
(	O
statbuf	struct
.	O
st_mode	int
)	O
)	O
do_chmod	int
=	O
0	int
;	O
if	O
(	O
do_chmod	int
)	O
fchmod	function
(	O
fileno	function
(	O
f	int
)	O
,	O
0600	int
)	O
;	O
}	O
static	O
int	O
histfile_modified	function
(	O
)	O
{	O
if	O
(	O
mlist_search	struct
.	O
modified	int
)	O
return	O
1	int
;	O
if	O
(	O
mlist_shell	struct
.	O
modified	int
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
public	O
void	O
save_cmdhist	function
(	O
)	O
{	O
char	O
*	O
histname	pointer
;	O
char	O
*	O
tempname	pointer
;	O
int	O
skip_search	int
;	O
int	O
skip_shell	int
;	O
struct	O
save_ctx	struct
ctx	pointer
;	O
char	O
*	O
s	pointer
;	O
FILE	struct
*	O
fout	pointer
=	O
NULL	O
;	O
int	O
histsize	int
=	O
0	int
;	O
if	O
(	O
!	O
histfile_modified	function
(	O
)	O
)	O
return	O
;	O
histname	pointer
=	O
histfile_name	function
(	O
)	O
;	O
if	O
(	O
histname	pointer
==	O
NULL	O
)	O
return	O
;	O
tempname	pointer
=	O
make_tempname	function
(	O
histname	pointer
)	O
;	O
fout	pointer
=	O
fopen	function
(	O
tempname	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
fout	pointer
!=	O
NULL	O
)	O
{	O
make_file_private	function
(	O
fout	pointer
)	O
;	O
s	pointer
=	O
lgetenv	function
(	O
"LESSHISTSIZE"	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
NULL	O
)	O
histsize	int
=	O
atoi	function
(	O
s	pointer
)	O
;	O
if	O
(	O
histsize	int
<=	O
0	int
)	O
histsize	int
=	O
100	int
;	O
skip_search	int
=	O
mlist_size	function
(	O
&	O
mlist_search	struct
)	O
-	O
histsize	int
;	O
skip_shell	int
=	O
mlist_size	function
(	O
&	O
mlist_shell	struct
)	O
-	O
histsize	int
;	O
fprintf	function
(	O
fout	pointer
,	O
"%s\n"	pointer
,	O
HISTFILE_FIRST_LINE	pointer
)	O
;	O
ctx	pointer
.	O
fout	pointer
=	O
fout	pointer
;	O
ctx	pointer
.	O
mlist	pointer
=	O
NULL	O
;	O
read_cmdhist	function
(	O
copy_hist	function
,	O
&	O
ctx	pointer
,	O
skip_search	int
,	O
skip_shell	int
)	O
;	O
fclose	function
(	O
fout	pointer
)	O
;	O
rename	function
(	O
tempname	pointer
,	O
histname	pointer
)	O
;	O
}	O
free	function
(	O
tempname	pointer
)	O
;	O
free	function
(	O
histname	pointer
)	O
;	O
}	O
