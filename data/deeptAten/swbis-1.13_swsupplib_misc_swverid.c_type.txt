static	O
int	O
sg_swverid_uuid	int
;	O
static	O
char	O
*	O
rel_op_array	array
[	O
]	O
=	O
{	O
SWVERID_RELOP_NEQ	pointer
,	O
SWVERID_RELOP_LT	pointer
,	O
SWVERID_RELOP_LTE	pointer
,	O
SWVERID_RELOP_EQ2	pointer
,	O
SWVERID_RELOP_EQ	pointer
,	O
SWVERID_RELOP_GTE	pointer
,	O
SWVERID_RELOP_GT	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
}	O
;	O
static	O
int	O
is_fully_qualified	function
(	O
SWVERID	struct
*	O
spec	pointer
)	O
{	O
return	O
0	int
;	O
}	O
static	O
char	O
get_ver_id_char_from_this	function
(	O
struct	O
VER_ID	struct
*	O
this	pointer
)	O
{	O
char	O
*	O
verid	pointer
=	O
this	pointer
->	O
ver_idM	array
;	O
if	O
(	O
strlen	function
(	O
verid	pointer
)	O
>	O
1	int
)	O
{	O
verid	pointer
++	O
;	O
}	O
return	O
*	O
verid	pointer
;	O
}	O
static	O
int	O
determine_rel_op_code	function
(	O
char	O
*	O
rel_op	pointer
)	O
{	O
char	O
*	O
s	pointer
;	O
int	O
index	function
;	O
index	function
=	O
0	int
;	O
s	pointer
=	O
rel_op_array	array
[	O
index	function
]	O
;	O
while	O
(	O
s	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
s	pointer
,	O
rel_op	pointer
)	O
==	O
0	int
)	O
return	O
index	function
;	O
index	function
++	O
;	O
s	pointer
=	O
rel_op_array	array
[	O
index	function
]	O
;	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
compare_relop	function
(	O
int	O
rel	int
,	O
int	O
req	int
)	O
{	O
if	O
(	O
req	int
==	O
SWVERID_CMP_NOT_USED	O
)	O
{	O
return	O
rel	int
;	O
}	O
if	O
(	O
req	int
==	O
SWVERID_CMP_NEQ	int
)	O
{	O
if	O
(	O
rel	int
!=	O
SWVERID_CMP_EQ	int
)	O
{	O
return	O
0	int
;	O
}	O
else	O
{	O
return	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
req	int
==	O
SWVERID_CMP_EQ	int
||	O
req	int
==	O
SWVERID_CMP_EQ2	int
)	O
{	O
if	O
(	O
rel	int
!=	O
SWVERID_CMP_EQ	int
&&	O
rel	int
!=	O
SWVERID_CMP_EQ2	int
)	O
{	O
return	O
1	int
;	O
}	O
else	O
{	O
return	O
0	int
;	O
}	O
}	O
else	O
if	O
(	O
req	int
==	O
SWVERID_CMP_LTE	int
)	O
{	O
if	O
(	O
rel	int
==	O
SWVERID_CMP_EQ	int
||	O
rel	int
==	O
SWVERID_CMP_LTE	int
||	O
rel	int
==	O
SWVERID_CMP_LT	int
||	O
0	int
)	O
{	O
return	O
0	int
;	O
}	O
else	O
{	O
return	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
req	int
==	O
SWVERID_CMP_LT	int
)	O
{	O
if	O
(	O
rel	int
==	O
SWVERID_CMP_LTE	int
||	O
0	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
rel	int
==	O
SWVERID_CMP_LT	int
||	O
0	int
)	O
{	O
return	O
0	int
;	O
}	O
else	O
{	O
return	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
req	int
==	O
SWVERID_CMP_GT	int
)	O
{	O
if	O
(	O
rel	int
==	O
SWVERID_CMP_GTE	int
||	O
0	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
rel	int
==	O
SWVERID_CMP_GT	int
||	O
0	int
)	O
{	O
return	O
0	int
;	O
}	O
else	O
{	O
return	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
req	int
==	O
SWVERID_CMP_GTE	int
)	O
{	O
if	O
(	O
rel	int
==	O
SWVERID_CMP_EQ	int
||	O
rel	int
==	O
SWVERID_CMP_GTE	int
||	O
rel	int
==	O
SWVERID_CMP_GT	int
||	O
0	int
)	O
{	O
return	O
0	int
;	O
}	O
else	O
{	O
return	O
1	int
;	O
}	O
}	O
else	O
{	O
return	O
-	O
1	int
;	O
}	O
}	O
static	O
int	O
swverid_i_rpmvercmp	function
(	O
char	O
*	O
target_list	pointer
,	O
char	O
*	O
candidate_list	pointer
)	O
{	O
int	O
ret	int
;	O
char	O
*	O
target	pointer
;	O
char	O
*	O
candidate	pointer
;	O
target	pointer
=	O
target_list	pointer
;	O
candidate	pointer
=	O
candidate_list	pointer
;	O
if	O
(	O
!	O
target	pointer
||	O
!	O
candidate	pointer
)	O
{	O
return	O
0	int
;	O
}	O
ret	int
=	O
swlib_rpmvercmp	function
(	O
target	pointer
,	O
candidate	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
char	O
*	O
swverid_i_print	function
(	O
SWVERID	struct
*	O
swverid	pointer
,	O
STROB	struct
*	O
buf	pointer
)	O
{	O
char	O
*	O
s	pointer
;	O
int	O
i	int
=	O
0	int
;	O
char	O
*	O
ret	int
;	O
STROB	struct
*	O
version	array
=	O
strob_open	function
(	O
32	int
)	O
;	O
struct	O
VER_ID	struct
*	O
next	pointer
;	O
while	O
(	O
(	O
s	pointer
=	O
cplob_val	function
(	O
swverid	pointer
->	O
taglistM	pointer
,	O
i	int
++	O
)	O
)	O
)	O
{	O
if	O
(	O
i	int
>	O
1	int
)	O
strob_strcat	function
(	O
buf	pointer
,	O
"."	pointer
)	O
;	O
strob_strcat	function
(	O
buf	pointer
,	O
s	pointer
)	O
;	O
}	O
next	pointer
=	O
swverid	pointer
->	O
ver_id_listM	pointer
;	O
swverid_print_ver_id	function
(	O
next	pointer
,	O
version	array
)	O
;	O
if	O
(	O
strob_strlen	function
(	O
version	array
)	O
>	O
0	int
)	O
{	O
strob_strcat	function
(	O
buf	pointer
,	O
","	pointer
)	O
;	O
strob_strcat	function
(	O
buf	pointer
,	O
strob_str	function
(	O
version	array
)	O
)	O
;	O
}	O
ret	int
=	O
strob_str	function
(	O
buf	pointer
)	O
;	O
strob_close	function
(	O
version	array
)	O
;	O
return	O
ret	int
;	O
}	O
static	O
int	O
swverid_i_fnmatch	function
(	O
char	O
*	O
candidate	pointer
,	O
char	O
*	O
target	pointer
,	O
int	O
flags	int
)	O
{	O
int	O
ret	int
;	O
if	O
(	O
!	O
target	pointer
||	O
!	O
candidate	pointer
)	O
{	O
return	O
0	int
;	O
}	O
ret	int
=	O
fnmatch	function
(	O
candidate	pointer
,	O
target	pointer
,	O
flags	int
)	O
;	O
return	O
ret	int
;	O
}	O
static	O
void	O
delete_version_id	function
(	O
struct	O
VER_ID	struct
*	O
verid	pointer
)	O
{	O
free	function
(	O
verid	pointer
)	O
;	O
}	O
static	O
struct	O
VER_ID	struct
*	O
create_version_id	function
(	O
char	O
*	O
version_id_string	pointer
)	O
{	O
struct	O
VER_ID	struct
*	O
ver_id	pointer
=	O
(	O
struct	O
VER_ID	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
struct	O
VER_ID	struct
)	O
)	O
;	O
STROB	struct
*	O
tmp	pointer
;	O
char	O
*	O
s	pointer
=	O
version_id_string	pointer
;	O
char	O
*	O
olds	pointer
;	O
int	O
count	int
;	O
int	O
ret	int
;	O
memset	function
(	O
ver_id	pointer
->	O
ver_idM	array
,	O
'\0'	O
,	O
sizeof	O
(	O
ver_id	pointer
->	O
ver_idM	array
)	O
)	O
;	O
memset	function
(	O
ver_id	pointer
->	O
idM	char
,	O
'\0'	O
,	O
sizeof	O
(	O
ver_id	pointer
->	O
idM	char
)	O
)	O
;	O
memset	function
(	O
ver_id	pointer
->	O
vqM	array
,	O
'\0'	O
,	O
sizeof	O
(	O
ver_id	pointer
->	O
vqM	array
)	O
)	O
;	O
memset	function
(	O
ver_id	pointer
->	O
rel_opM	array
,	O
'\0'	O
,	O
sizeof	O
(	O
ver_id	pointer
->	O
rel_opM	array
)	O
)	O
;	O
ver_id	pointer
->	O
rel_op_codeM	int
=	O
0	int
;	O
ver_id	pointer
->	O
valueM	int
=	O
NULL	O
;	O
ver_id	pointer
->	O
nextM	pointer
=	O
NULL	O
;	O
tmp	pointer
=	O
strob_open	function
(	O
10	int
)	O
;	O
olds	pointer
=	O
s	pointer
;	O
while	O
(	O
isalpha	function
(	O
*	O
s	pointer
)	O
)	O
s	pointer
++	O
;	O
if	O
(	O
(	O
olds	pointer
-	O
s	pointer
)	O
==	O
0	int
||	O
(	O
s	pointer
-	O
olds	pointer
)	O
>	O
2	int
)	O
{	O
swbis_free	O
(	O
ver_id	pointer
)	O
;	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
(	O
s	pointer
-	O
olds	pointer
)	O
==	O
1	int
)	O
{	O
strncpy	function
(	O
ver_id	pointer
->	O
idM	char
,	O
olds	pointer
,	O
1	int
)	O
;	O
if	O
(	O
strpbrk	function
(	O
ver_id	pointer
->	O
idM	char
,	O
SWVERID_VERIDS_POSIX	pointer
SWVERID_VERIDS_SWBIS	pointer
)	O
==	O
NULL	O
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
else	O
if	O
(	O
(	O
s	pointer
-	O
olds	pointer
)	O
==	O
2	int
)	O
{	O
strncpy	function
(	O
ver_id	pointer
->	O
vqM	array
,	O
olds	pointer
,	O
1	int
)	O
;	O
if	O
(	O
strpbrk	function
(	O
ver_id	pointer
->	O
vqM	array
,	O
SWVERID_QUALIFIER	pointer
)	O
==	O
NULL	O
)	O
{	O
return	O
NULL	O
;	O
}	O
strncpy	function
(	O
ver_id	pointer
->	O
idM	char
,	O
olds	pointer
+	O
1	int
,	O
1	int
)	O
;	O
if	O
(	O
strpbrk	function
(	O
ver_id	pointer
->	O
idM	char
,	O
SWVERID_VERIDS_POSIX	pointer
SWVERID_VERIDS_SWBIS	pointer
)	O
==	O
NULL	O
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"swverid fatal error\n"	pointer
)	O
;	O
exit	function
(	O
77	int
)	O
;	O
}	O
strncpy	function
(	O
ver_id	pointer
->	O
ver_idM	array
,	O
olds	pointer
,	O
(	O
int	O
)	O
(	O
s	pointer
-	O
olds	pointer
)	O
)	O
;	O
count	int
=	O
0	int
;	O
olds	pointer
=	O
s	pointer
;	O
while	O
(	O
count	int
<	O
3	int
&&	O
(	O
*	O
s	pointer
==	O
'='	O
||	O
*	O
s	pointer
==	O
'|'	O
||	O
*	O
s	pointer
==	O
'<'	O
||	O
*	O
s	pointer
==	O
'>'	O
)	O
)	O
{	O
s	pointer
++	O
;	O
count	int
++	O
;	O
}	O
if	O
(	O
count	int
>	O
2	int
)	O
{	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
(	O
olds	pointer
-	O
s	pointer
)	O
==	O
0	int
||	O
(	O
s	pointer
-	O
olds	pointer
)	O
>	O
2	int
)	O
{	O
swbis_free	O
(	O
ver_id	pointer
)	O
;	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
strncpy	function
(	O
ver_id	pointer
->	O
rel_opM	array
,	O
olds	pointer
,	O
(	O
int	O
)	O
(	O
s	pointer
-	O
olds	pointer
)	O
)	O
;	O
ver_id	pointer
->	O
rel_opM	array
[	O
(	O
int	O
)	O
(	O
s	pointer
-	O
olds	pointer
)	O
]	O
=	O
'\0'	O
;	O
ret	int
=	O
determine_rel_op_code	function
(	O
ver_id	pointer
->	O
rel_opM	array
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
ver_id	pointer
->	O
rel_op_codeM	int
=	O
ret	int
;	O
if	O
(	O
*	O
(	O
ver_id	pointer
->	O
idM	char
)	O
==	O
SWVERID_VERID_REVISION	O
)	O
{	O
if	O
(	O
ver_id	pointer
->	O
rel_op_codeM	int
==	O
SWVERID_CMP_EQ2	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: invalid use of '=' for revision specs\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
ver_id	pointer
->	O
rel_op_codeM	int
!=	O
SWVERID_CMP_EQ2	int
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
ver_id	pointer
->	O
valueM	int
=	O
NULL	O
;	O
if	O
(	O
strlen	function
(	O
s	pointer
)	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
ver_id	pointer
->	O
idM	char
,	O
SWVERID_VERIDS_LOCATION	pointer
)	O
==	O
0	int
)	O
{	O
swlib_squash_trailing_slash	function
(	O
s	pointer
)	O
;	O
if	O
(	O
*	O
s	pointer
!=	O
'/'	O
)	O
{	O
strob_strcpy	function
(	O
tmp	pointer
,	O
"/"	pointer
)	O
;	O
strob_strcat	function
(	O
tmp	pointer
,	O
s	pointer
)	O
;	O
s	pointer
=	O
strdup	function
(	O
strob_str	function
(	O
tmp	pointer
)	O
)	O
;	O
}	O
else	O
{	O
s	pointer
=	O
strdup	function
(	O
s	pointer
)	O
;	O
}	O
}	O
else	O
{	O
s	pointer
=	O
strdup	function
(	O
s	pointer
)	O
;	O
}	O
}	O
else	O
{	O
s	pointer
=	O
strdup	function
(	O
""	pointer
)	O
;	O
}	O
SWLIB_ASSERT	O
(	O
s	pointer
!=	O
NULL	O
)	O
;	O
ver_id	pointer
->	O
valueM	int
=	O
s	pointer
;	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
return	O
ver_id	pointer
;	O
}	O
static	O
struct	O
VER_ID	struct
*	O
copy_construct_version_id	function
(	O
struct	O
VER_ID	struct
*	O
ver_id	pointer
)	O
{	O
STROB	struct
*	O
buf	pointer
;	O
struct	O
VER_ID	struct
*	O
new_ver_id	pointer
;	O
char	O
*	O
verid	pointer
;	O
char	O
*	O
val	array
;	O
if	O
(	O
ver_id	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
buf	pointer
=	O
strob_open	function
(	O
12	int
)	O
;	O
strob_strcpy	function
(	O
buf	pointer
,	O
ver_id	pointer
->	O
vqM	array
)	O
;	O
strob_strcat	function
(	O
buf	pointer
,	O
ver_id	pointer
->	O
idM	char
)	O
;	O
strob_strcat	function
(	O
buf	pointer
,	O
ver_id	pointer
->	O
rel_opM	array
)	O
;	O
if	O
(	O
(	O
val	array
=	O
ver_id	pointer
->	O
valueM	int
)	O
!=	O
NULL	O
)	O
{	O
strob_strcat	function
(	O
buf	pointer
,	O
val	array
)	O
;	O
}	O
else	O
{	O
;	O
}	O
verid	pointer
=	O
strob_str	function
(	O
buf	pointer
)	O
;	O
new_ver_id	pointer
=	O
create_version_id	function
(	O
verid	pointer
)	O
;	O
strob_close	function
(	O
buf	pointer
)	O
;	O
return	O
new_ver_id	pointer
;	O
}	O
static	O
void	O
ver_ids_copy	function
(	O
SWVERID	struct
*	O
dst	pointer
,	O
SWVERID	struct
*	O
src	pointer
)	O
{	O
struct	O
VER_ID	struct
*	O
vid	pointer
;	O
struct	O
VER_ID	struct
*	O
ver_id	pointer
;	O
struct	O
VER_ID	struct
*	O
last	pointer
;	O
struct	O
VER_ID	struct
*	O
copy_of_last	pointer
;	O
ver_id	pointer
=	O
dst	pointer
->	O
ver_id_listM	pointer
;	O
while	O
(	O
ver_id	pointer
)	O
{	O
vid	pointer
=	O
ver_id	pointer
->	O
nextM	pointer
;	O
swbis_free	O
(	O
ver_id	pointer
)	O
;	O
ver_id	pointer
=	O
vid	pointer
;	O
}	O
dst	pointer
->	O
ver_id_listM	pointer
=	O
NULL	O
;	O
last	pointer
=	O
src	pointer
->	O
ver_id_listM	pointer
;	O
while	O
(	O
last	pointer
)	O
{	O
copy_of_last	pointer
=	O
copy_construct_version_id	function
(	O
last	pointer
)	O
;	O
swverid_add_verid	function
(	O
dst	pointer
,	O
copy_of_last	pointer
)	O
;	O
last	pointer
=	O
last	pointer
->	O
nextM	pointer
;	O
}	O
}	O
static	O
int	O
compare_version_id	function
(	O
struct	O
VER_ID	struct
*	O
id_target	pointer
,	O
struct	O
VER_ID	struct
*	O
id_candidate	pointer
,	O
int	O
req	int
)	O
{	O
int	O
ret	int
=	O
-	O
1	int
;	O
int	O
retval	int
=	O
-	O
1	int
;	O
int	O
flags	int
;	O
char	O
verid_letter	char
;	O
if	O
(	O
!	O
id_target	pointer
||	O
!	O
id_candidate	pointer
)	O
{	O
if	O
(	O
id_candidate	pointer
)	O
id_candidate	pointer
->	O
rel_op_codeM	int
=	O
SWVERID_CMP_NOT_USED	O
;	O
return	O
0	int
;	O
}	O
verid_letter	char
=	O
get_ver_id_char_from_this	function
(	O
id_candidate	pointer
)	O
;	O
if	O
(	O
verid_letter	char
==	O
SWVERID_VERID_REVISION	O
)	O
{	O
ret	int
=	O
swverid_i_rpmvercmp	function
(	O
id_target	pointer
->	O
valueM	int
,	O
id_candidate	pointer
->	O
valueM	int
)	O
;	O
if	O
(	O
ret	int
==	O
1	int
)	O
{	O
id_candidate	pointer
->	O
rel_op_codeM	int
=	O
SWVERID_CMP_LT	int
;	O
}	O
else	O
if	O
(	O
ret	int
==	O
-	O
1	int
)	O
{	O
id_candidate	pointer
->	O
rel_op_codeM	int
=	O
SWVERID_CMP_GT	int
;	O
retval	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
ret	int
==	O
0	int
)	O
{	O
id_candidate	pointer
->	O
rel_op_codeM	int
=	O
SWVERID_CMP_EQ	int
;	O
retval	int
=	O
0	int
;	O
}	O
else	O
{	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
{	O
flags	int
=	O
0	int
;	O
ret	int
=	O
swverid_i_fnmatch	function
(	O
id_candidate	pointer
->	O
valueM	int
,	O
id_target	pointer
->	O
valueM	int
,	O
flags	int
)	O
;	O
if	O
(	O
ret	int
==	O
0	int
)	O
{	O
id_candidate	pointer
->	O
rel_op_codeM	int
=	O
SWVERID_CMP_EQ	int
;	O
retval	int
=	O
0	int
;	O
}	O
else	O
{	O
id_candidate	pointer
->	O
rel_op_codeM	int
=	O
SWVERID_CMP_NEQ	int
;	O
retval	int
=	O
1	int
;	O
}	O
}	O
retval	int
=	O
compare_relop	function
(	O
id_candidate	pointer
->	O
rel_op_codeM	int
,	O
req	int
)	O
;	O
return	O
retval	int
;	O
}	O
static	O
int	O
compare_taglist	function
(	O
SWVERID	struct
*	O
pattern	pointer
,	O
SWVERID	struct
*	O
fq_candidate	pointer
)	O
{	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
compare_all_version_ids	function
(	O
SWVERID	struct
*	O
target	pointer
,	O
SWVERID	struct
*	O
candidate	pointer
)	O
{	O
struct	O
VER_ID	struct
*	O
id_target	pointer
;	O
struct	O
VER_ID	struct
*	O
id_candidate	pointer
;	O
if	O
(	O
is_fully_qualified	function
(	O
target	pointer
)	O
==	O
0	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
id_target	pointer
=	O
swverid_get_verid	function
(	O
target	pointer
,	O
SWVERID_VERIDS_REVISION	pointer
,	O
1	int
)	O
;	O
id_candidate	pointer
=	O
swverid_get_verid	function
(	O
candidate	pointer
,	O
SWVERID_VERIDS_REVISION	pointer
,	O
1	int
)	O
;	O
compare_version_id	function
(	O
id_target	pointer
,	O
id_candidate	pointer
,	O
SWVERID_CMP_NOT_USED	O
)	O
;	O
id_target	pointer
=	O
swverid_get_verid	function
(	O
target	pointer
,	O
SWVERID_VERIDS_ARCHITECTURE	pointer
,	O
1	int
)	O
;	O
id_candidate	pointer
=	O
swverid_get_verid	function
(	O
candidate	pointer
,	O
SWVERID_VERIDS_ARCHITECTURE	pointer
,	O
1	int
)	O
;	O
compare_version_id	function
(	O
id_target	pointer
,	O
id_candidate	pointer
,	O
SWVERID_CMP_NOT_USED	O
)	O
;	O
id_target	pointer
=	O
swverid_get_verid	function
(	O
target	pointer
,	O
SWVERID_VERIDS_VENDOR_TAG	pointer
,	O
1	int
)	O
;	O
id_candidate	pointer
=	O
swverid_get_verid	function
(	O
candidate	pointer
,	O
SWVERID_VERIDS_VENDOR_TAG	pointer
,	O
1	int
)	O
;	O
compare_version_id	function
(	O
id_target	pointer
,	O
id_candidate	pointer
,	O
SWVERID_CMP_NOT_USED	O
)	O
;	O
id_target	pointer
=	O
swverid_get_verid	function
(	O
target	pointer
,	O
SWVERID_VERIDS_LOCATION	pointer
,	O
1	int
)	O
;	O
id_candidate	pointer
=	O
swverid_get_verid	function
(	O
candidate	pointer
,	O
SWVERID_VERIDS_LOCATION	pointer
,	O
1	int
)	O
;	O
compare_version_id	function
(	O
id_target	pointer
,	O
id_candidate	pointer
,	O
SWVERID_CMP_NOT_USED	O
)	O
;	O
id_target	pointer
=	O
swverid_get_verid	function
(	O
target	pointer
,	O
SWVERID_VERIDS_QUALIFIER	pointer
,	O
1	int
)	O
;	O
id_candidate	pointer
=	O
swverid_get_verid	function
(	O
candidate	pointer
,	O
SWVERID_VERIDS_QUALIFIER	pointer
,	O
1	int
)	O
;	O
compare_version_id	function
(	O
id_target	pointer
,	O
id_candidate	pointer
,	O
SWVERID_CMP_NOT_USED	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_version_ids_string	function
(	O
SWVERID	struct
*	O
swverid	pointer
,	O
char	O
*	O
verid_string	pointer
)	O
{	O
struct	O
VER_ID	struct
*	O
verid	pointer
;	O
STROB	struct
*	O
buf	pointer
=	O
strob_open	function
(	O
10	int
)	O
;	O
char	O
*	O
s	pointer
;	O
s	pointer
=	O
strob_strtok	function
(	O
buf	pointer
,	O
verid_string	pointer
,	O
","	pointer
)	O
;	O
while	O
(	O
s	pointer
)	O
{	O
verid	pointer
=	O
create_version_id	function
(	O
s	pointer
)	O
;	O
if	O
(	O
verid	pointer
==	O
(	O
struct	O
VER_ID	struct
*	O
)	O
(	O
NULL	O
)	O
)	O
return	O
-	O
1	int
;	O
swverid_add_verid	function
(	O
swverid	pointer
,	O
verid	pointer
)	O
;	O
s	pointer
=	O
strob_strtok	function
(	O
buf	pointer
,	O
NULL	O
,	O
","	pointer
)	O
;	O
}	O
strob_close	function
(	O
buf	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_swspec_string	function
(	O
SWVERID	struct
*	O
swverid	pointer
)	O
{	O
char	O
*	O
source	pointer
=	O
swverid	pointer
->	O
source_copyM	pointer
;	O
char	O
*	O
tag	pointer
;	O
char	O
*	O
tags	pointer
;	O
char	O
*	O
verids	pointer
;	O
char	O
*	O
verid	pointer
;	O
int	O
ret	int
;	O
STROB	struct
*	O
tmp	pointer
=	O
strob_open	function
(	O
20	int
)	O
;	O
STROB	struct
*	O
tag_tmp2	pointer
=	O
strob_open	function
(	O
20	int
)	O
;	O
STROB	struct
*	O
ver_tmp2	pointer
=	O
strob_open	function
(	O
20	int
)	O
;	O
if	O
(	O
!	O
source	pointer
||	O
strlen	function
(	O
source	pointer
)	O
==	O
0	int
)	O
return	O
-	O
2	int
;	O
cplob_shallow_reset	function
(	O
swverid	pointer
->	O
taglistM	pointer
)	O
;	O
tags	pointer
=	O
strob_strtok	function
(	O
tmp	pointer
,	O
source	pointer
,	O
","	pointer
)	O
;	O
if	O
(	O
tags	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
tag	pointer
=	O
strob_strtok	function
(	O
tag_tmp2	pointer
,	O
tags	pointer
,	O
"."	pointer
)	O
;	O
if	O
(	O
tag	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
strpbrk	function
(	O
tag	pointer
,	O
SWVERID_RELOP_NEQ	pointer
SWVERID_RELOP_LT	pointer
SWVERID_RELOP_LTE	pointer
SWVERID_RELOP_EQ2	pointer
SWVERID_RELOP_EQ	pointer
SWVERID_RELOP_GTE	pointer
SWVERID_RELOP_GT	pointer
)	O
)	O
{	O
strob_strcpy	function
(	O
tag_tmp2	pointer
,	O
"*"	pointer
)	O
;	O
strob_strcat	function
(	O
tag_tmp2	pointer
,	O
","	pointer
)	O
;	O
strob_strcat	function
(	O
tag_tmp2	pointer
,	O
source	pointer
)	O
;	O
tags	pointer
=	O
strob_strtok	function
(	O
tmp	pointer
,	O
strob_str	function
(	O
tag_tmp2	pointer
)	O
,	O
","	pointer
)	O
;	O
tag	pointer
=	O
strob_strtok	function
(	O
tag_tmp2	pointer
,	O
tags	pointer
,	O
"."	pointer
)	O
;	O
}	O
while	O
(	O
tag	pointer
)	O
{	O
cplob_add_nta	function
(	O
swverid	pointer
->	O
taglistM	pointer
,	O
strdup	function
(	O
tag	pointer
)	O
)	O
;	O
tag	pointer
=	O
strob_strtok	function
(	O
tag_tmp2	pointer
,	O
NULL	O
,	O
"."	pointer
)	O
;	O
}	O
verids	pointer
=	O
strob_strtok	function
(	O
tmp	pointer
,	O
NULL	O
,	O
","	pointer
)	O
;	O
if	O
(	O
verids	pointer
)	O
{	O
verid	pointer
=	O
verids	pointer
;	O
while	O
(	O
verid	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
verid	pointer
,	O
"*"	pointer
)	O
==	O
0	int
)	O
{	O
ret	int
=	O
0	int
;	O
}	O
else	O
{	O
ret	int
=	O
parse_version_ids_string	function
(	O
swverid	pointer
,	O
verid	pointer
)	O
;	O
}	O
if	O
(	O
ret	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error parsing version id [%s]\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
verid	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
verid	pointer
=	O
strob_strtok	function
(	O
tmp	pointer
,	O
NULL	O
,	O
","	pointer
)	O
;	O
}	O
}	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
strob_close	function
(	O
tag_tmp2	pointer
)	O
;	O
strob_close	function
(	O
ver_tmp2	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
classify_namespace	function
(	O
char	O
*	O
object_kw	pointer
)	O
{	O
if	O
(	O
!	O
object_kw	pointer
)	O
return	O
SWVERID_NS_NA	O
;	O
if	O
(	O
!	O
strncmp	function
(	O
"fileset"	pointer
,	O
object_kw	pointer
,	O
7	int
)	O
)	O
{	O
return	O
SWVERID_NS_MID	int
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
SW_A_control_file	pointer
,	O
object_kw	pointer
,	O
11	int
)	O
)	O
{	O
return	O
SWVERID_NS_MID	int
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
SW_A_subproduct	pointer
,	O
object_kw	pointer
,	O
10	int
)	O
)	O
{	O
return	O
SWVERID_NS_MID	int
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
SW_A_product	pointer
,	O
object_kw	pointer
,	O
7	int
)	O
)	O
{	O
return	O
SWVERID_NS_TOP	int
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
SW_A_bundle	pointer
,	O
object_kw	pointer
,	O
6	int
)	O
)	O
{	O
return	O
SWVERID_NS_TOP	int
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
SW_A_file	pointer
,	O
object_kw	pointer
,	O
4	int
)	O
)	O
{	O
return	O
SWVERID_NS_LOW	int
;	O
}	O
else	O
{	O
return	O
SWVERID_NS_NA	O
;	O
}	O
}	O
void	O
i_replace_verid	function
(	O
SWVERID	struct
*	O
swverid	pointer
,	O
struct	O
VER_ID	struct
*	O
verid	pointer
,	O
int	O
do_replace	int
)	O
{	O
char	O
new_id	char
;	O
struct	O
VER_ID	struct
*	O
prev	pointer
;	O
struct	O
VER_ID	struct
*	O
last	pointer
;	O
struct	O
VER_ID	struct
*	O
newverid	pointer
;	O
last	pointer
=	O
swverid	pointer
->	O
ver_id_listM	pointer
;	O
verid	pointer
->	O
nextM	pointer
=	O
NULL	O
;	O
prev	pointer
=	O
NULL	O
;	O
new_id	char
=	O
get_ver_id_char_from_this	function
(	O
verid	pointer
)	O
;	O
if	O
(	O
!	O
last	pointer
)	O
{	O
newverid	pointer
=	O
copy_construct_version_id	function
(	O
verid	pointer
)	O
;	O
swverid_add_verid	function
(	O
swverid	pointer
,	O
newverid	pointer
)	O
;	O
return	O
;	O
}	O
while	O
(	O
last	pointer
)	O
{	O
if	O
(	O
get_ver_id_char_from_this	function
(	O
last	pointer
)	O
==	O
new_id	char
&&	O
do_replace	int
)	O
{	O
newverid	pointer
=	O
copy_construct_version_id	function
(	O
verid	pointer
)	O
;	O
if	O
(	O
prev	pointer
)	O
{	O
prev	pointer
->	O
nextM	pointer
=	O
newverid	pointer
;	O
}	O
newverid	pointer
->	O
nextM	pointer
=	O
last	pointer
->	O
nextM	pointer
;	O
return	O
;	O
}	O
else	O
if	O
(	O
get_ver_id_char_from_this	function
(	O
last	pointer
)	O
==	O
new_id	char
&&	O
do_replace	int
==	O
0	int
)	O
{	O
return	O
;	O
}	O
prev	pointer
=	O
last	pointer
;	O
last	pointer
=	O
last	pointer
->	O
nextM	pointer
;	O
}	O
newverid	pointer
=	O
copy_construct_version_id	function
(	O
verid	pointer
)	O
;	O
swverid_add_verid	function
(	O
swverid	pointer
,	O
newverid	pointer
)	O
;	O
}	O
SWVERID	struct
*	O
swverid_copy	function
(	O
SWVERID	struct
*	O
src	pointer
)	O
{	O
SWVERID	struct
*	O
dst	pointer
;	O
char	O
*	O
tag	pointer
;	O
int	O
n	long
;	O
dst	pointer
=	O
swverid_open	function
(	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
src	pointer
->	O
object_nameM	pointer
)	O
{	O
if	O
(	O
dst	pointer
->	O
object_nameM	pointer
)	O
free	function
(	O
dst	pointer
->	O
object_nameM	pointer
)	O
;	O
dst	pointer
->	O
object_nameM	pointer
=	O
strdup	function
(	O
src	pointer
->	O
object_nameM	pointer
)	O
;	O
}	O
else	O
{	O
dst	pointer
->	O
object_nameM	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
src	pointer
->	O
source_copyM	pointer
)	O
{	O
if	O
(	O
dst	pointer
->	O
source_copyM	pointer
)	O
free	function
(	O
dst	pointer
->	O
source_copyM	pointer
)	O
;	O
dst	pointer
->	O
source_copyM	pointer
=	O
strdup	function
(	O
src	pointer
->	O
source_copyM	pointer
)	O
;	O
}	O
else	O
{	O
dst	pointer
->	O
source_copyM	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
src	pointer
->	O
catalogM	pointer
)	O
{	O
if	O
(	O
dst	pointer
->	O
catalogM	pointer
)	O
free	function
(	O
dst	pointer
->	O
catalogM	pointer
)	O
;	O
dst	pointer
->	O
catalogM	pointer
=	O
strdup	function
(	O
src	pointer
->	O
catalogM	pointer
)	O
;	O
}	O
else	O
{	O
dst	pointer
->	O
catalogM	pointer
=	O
NULL	O
;	O
}	O
dst	pointer
->	O
use_path_compareM	int
=	O
src	pointer
->	O
use_path_compareM	int
;	O
dst	pointer
->	O
namespaceM	array
=	O
src	pointer
->	O
namespaceM	array
;	O
dst	pointer
->	O
comparison_codeM	int
=	O
src	pointer
->	O
comparison_codeM	int
;	O
cplob_close	function
(	O
dst	pointer
->	O
taglistM	pointer
)	O
;	O
dst	pointer
->	O
taglistM	pointer
=	O
cplob_open	function
(	O
1	int
)	O
;	O
cplob_add_nta	function
(	O
dst	pointer
->	O
taglistM	pointer
,	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
)	O
;	O
n	long
=	O
0	int
;	O
while	O
(	O
(	O
tag	pointer
=	O
swverid_get_tag	function
(	O
src	pointer
,	O
n	long
++	O
)	O
)	O
!=	O
NULL	O
)	O
{	O
cplob_add_nta	function
(	O
dst	pointer
->	O
taglistM	pointer
,	O
strdup	function
(	O
tag	pointer
)	O
)	O
;	O
}	O
ver_ids_copy	function
(	O
dst	pointer
,	O
src	pointer
)	O
;	O
return	O
dst	pointer
;	O
}	O
void	O
swverid_add_tag	function
(	O
SWVERID	struct
*	O
swverid	pointer
,	O
char	O
*	O
tag	pointer
)	O
{	O
cplob_add_nta	function
(	O
swverid	pointer
->	O
taglistM	pointer
,	O
strdup	function
(	O
tag	pointer
)	O
)	O
;	O
}	O
void	O
swverid_ver_id_set_object_qualifier	function
(	O
SWVERID	struct
*	O
swverid	pointer
,	O
char	O
*	O
objkeyword	pointer
)	O
{	O
struct	O
VER_ID	struct
*	O
last	pointer
;	O
last	pointer
=	O
swverid	pointer
->	O
ver_id_listM	pointer
;	O
while	O
(	O
last	pointer
)	O
{	O
last	pointer
->	O
vqM	array
[	O
0	int
]	O
=	O
*	O
objkeyword	pointer
;	O
last	pointer
->	O
vqM	array
[	O
1	int
]	O
=	O
'\0'	O
;	O
last	pointer
=	O
last	pointer
->	O
nextM	pointer
;	O
}	O
}	O
int	O
swverid_ver_id_unlink	function
(	O
SWVERID	struct
*	O
swverid	pointer
,	O
struct	O
VER_ID	struct
*	O
verid	pointer
)	O
{	O
struct	O
VER_ID	struct
*	O
prev	pointer
;	O
struct	O
VER_ID	struct
*	O
last	pointer
;	O
prev	pointer
=	O
NULL	O
;	O
last	pointer
=	O
swverid	pointer
->	O
ver_id_listM	pointer
;	O
while	O
(	O
last	pointer
)	O
{	O
if	O
(	O
last	pointer
==	O
verid	pointer
)	O
{	O
if	O
(	O
prev	pointer
)	O
{	O
prev	pointer
->	O
nextM	pointer
=	O
last	pointer
->	O
nextM	pointer
;	O
}	O
else	O
{	O
swverid	pointer
->	O
ver_id_listM	pointer
=	O
swverid	pointer
->	O
ver_id_listM	pointer
->	O
nextM	pointer
;	O
}	O
delete_version_id	function
(	O
verid	pointer
)	O
;	O
return	O
0	int
;	O
}	O
prev	pointer
=	O
last	pointer
;	O
last	pointer
=	O
last	pointer
->	O
nextM	pointer
;	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
SWVERID	struct
*	O
swverid_i_open	function
(	O
char	O
*	O
object_keyword	pointer
,	O
char	O
*	O
swversion_string	pointer
)	O
{	O
int	O
ret	int
;	O
SWVERID	struct
*	O
swverid	pointer
;	O
swverid	pointer
=	O
(	O
SWVERID	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
SWVERID	struct
)	O
)	O
;	O
if	O
(	O
!	O
swverid	pointer
)	O
return	O
NULL	O
;	O
swverid	pointer
->	O
object_nameM	pointer
=	O
swlib_strdup	function
(	O
""	pointer
)	O
;	O
swverid	pointer
->	O
taglistM	pointer
=	O
cplob_open	function
(	O
3	int
)	O
;	O
cplob_add_nta	function
(	O
swverid	pointer
->	O
taglistM	pointer
,	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
)	O
;	O
swverid	pointer
->	O
catalogM	pointer
=	O
swlib_strdup	function
(	O
""	pointer
)	O
;	O
swverid	pointer
->	O
comparison_codeM	int
=	O
SWVERID_CMP_EQ	int
;	O
swverid_set_namespace	function
(	O
swverid	pointer
,	O
object_keyword	pointer
)	O
;	O
swverid_set_object_name	function
(	O
swverid	pointer
,	O
object_keyword	pointer
)	O
;	O
swverid	pointer
->	O
ver_id_listM	pointer
=	O
(	O
struct	O
VER_ID	struct
*	O
)	O
(	O
NULL	O
)	O
;	O
swverid	pointer
->	O
source_copyM	pointer
=	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
;	O
swverid	pointer
->	O
use_path_compareM	int
=	O
0	int
;	O
swverid	pointer
->	O
swutsM	pointer
=	O
swuts_create	function
(	O
)	O
;	O
swverid	pointer
->	O
altM	pointer
=	O
NULL	O
;	O
swverid	pointer
->	O
alter_uuidM	int
=	O
0	int
;	O
if	O
(	O
swversion_string	pointer
!=	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
)	O
{	O
swverid	pointer
->	O
source_copyM	pointer
=	O
swlib_strdup	function
(	O
swversion_string	pointer
)	O
;	O
ret	int
=	O
parse_swspec_string	function
(	O
swverid	pointer
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
return	O
swverid	pointer
;	O
}	O
SWVERID	struct
*	O
swverid_open	function
(	O
char	O
*	O
object_keyword	pointer
,	O
char	O
*	O
swversion_string	pointer
)	O
{	O
SWVERID	struct
*	O
swverid	pointer
;	O
SWVERID	struct
*	O
parent	pointer
;	O
SWVERID	struct
*	O
last	pointer
;	O
STROB	struct
*	O
tmp	pointer
;	O
int	O
i	int
;	O
char	O
*	O
s	pointer
;	O
if	O
(	O
swversion_string	pointer
!=	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
)	O
{	O
i	int
=	O
0	int
;	O
last	pointer
=	O
NULL	O
;	O
parent	pointer
=	O
NULL	O
;	O
tmp	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
s	pointer
=	O
strob_strtok	function
(	O
tmp	pointer
,	O
swversion_string	pointer
,	O
"|\n\r"	pointer
)	O
;	O
while	O
(	O
s	pointer
)	O
{	O
swverid	pointer
=	O
swverid_i_open	function
(	O
object_keyword	pointer
,	O
s	pointer
)	O
;	O
if	O
(	O
swverid	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
last	pointer
)	O
last	pointer
->	O
altM	pointer
=	O
swverid	pointer
;	O
last	pointer
=	O
swverid	pointer
;	O
if	O
(	O
i	int
==	O
0	int
)	O
parent	pointer
=	O
swverid	pointer
;	O
s	pointer
=	O
strob_strtok	function
(	O
tmp	pointer
,	O
NULL	O
,	O
"|\n\r"	pointer
)	O
;	O
i	int
++	O
;	O
}	O
if	O
(	O
parent	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
last	pointer
=	O
parent	pointer
;	O
if	O
(	O
sg_swverid_uuid	int
==	O
0	int
)	O
sg_swverid_uuid	int
++	O
;	O
parent	pointer
->	O
alter_uuidM	int
=	O
sg_swverid_uuid	int
++	O
;	O
while	O
(	O
(	O
last	pointer
=	O
swverid_get_alternate	function
(	O
last	pointer
)	O
)	O
)	O
{	O
last	pointer
->	O
alter_uuidM	int
=	O
parent	pointer
->	O
alter_uuidM	int
;	O
}	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
}	O
else	O
{	O
parent	pointer
=	O
swverid_i_open	function
(	O
object_keyword	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
parent	pointer
)	O
parent	pointer
->	O
alter_uuidM	int
=	O
sg_swverid_uuid	int
++	O
;	O
}	O
return	O
parent	pointer
;	O
}	O
void	O
swverid_set_namespace	function
(	O
SWVERID	struct
*	O
swverid	pointer
,	O
char	O
*	O
object_keyword	pointer
)	O
{	O
swverid	pointer
->	O
namespaceM	array
=	O
classify_namespace	function
(	O
object_keyword	pointer
)	O
;	O
swverid_set_object_name	function
(	O
swverid	pointer
,	O
object_keyword	pointer
)	O
;	O
}	O
void	O
swverid_close	function
(	O
SWVERID	struct
*	O
swverid	pointer
)	O
{	O
struct	O
VER_ID	struct
*	O
vid	pointer
,	O
*	O
ver_id	pointer
=	O
swverid	pointer
->	O
ver_id_listM	pointer
;	O
while	O
(	O
ver_id	pointer
)	O
{	O
vid	pointer
=	O
ver_id	pointer
->	O
nextM	pointer
;	O
swbis_free	O
(	O
ver_id	pointer
)	O
;	O
ver_id	pointer
=	O
vid	pointer
;	O
}	O
if	O
(	O
swverid	pointer
->	O
object_nameM	pointer
)	O
{	O
swbis_free	O
(	O
swverid	pointer
->	O
object_nameM	pointer
)	O
;	O
swverid	pointer
->	O
object_nameM	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
swverid	pointer
->	O
source_copyM	pointer
)	O
{	O
swbis_free	O
(	O
swverid	pointer
->	O
source_copyM	pointer
)	O
;	O
swverid	pointer
->	O
source_copyM	pointer
=	O
NULL	O
;	O
}	O
swuts_delete	function
(	O
swverid	pointer
->	O
swutsM	pointer
)	O
;	O
swbis_free	O
(	O
swverid	pointer
)	O
;	O
}	O
o__inline__	O
void	O
swverid_set_object_name	function
(	O
SWVERID	struct
*	O
swverid	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
if	O
(	O
swverid	pointer
->	O
object_nameM	pointer
)	O
swbis_free	O
(	O
swverid	pointer
->	O
object_nameM	pointer
)	O
;	O
if	O
(	O
name	pointer
)	O
swverid	pointer
->	O
object_nameM	pointer
=	O
swlib_strdup	function
(	O
name	pointer
)	O
;	O
else	O
swverid	pointer
->	O
object_nameM	pointer
=	O
swlib_strdup	function
(	O
""	pointer
)	O
;	O
}	O
o__inline__	O
char	O
*	O
swverid_get_object_name	function
(	O
SWVERID	struct
*	O
swverid	pointer
)	O
{	O
return	O
swverid	pointer
->	O
object_nameM	pointer
;	O
}	O
int	O
swverid_verid_compare	function
(	O
SWVERID	struct
*	O
swverid1_target	pointer
,	O
SWVERID	struct
*	O
swverid2_candidate	pointer
)	O
{	O
int	O
ret	int
;	O
ret	int
=	O
compare_all_version_ids	function
(	O
swverid1_target	pointer
,	O
swverid2_candidate	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
swverid_vtagOLD_compare	function
(	O
SWVERID	struct
*	O
swverid1_target	pointer
,	O
SWVERID	struct
*	O
swverid2_candidate	pointer
)	O
{	O
char	O
*	O
tag1	pointer
;	O
if	O
(	O
strcmp	function
(	O
swverid1_target	pointer
->	O
object_nameM	pointer
,	O
swverid2_candidate	pointer
->	O
object_nameM	pointer
)	O
)	O
{	O
return	O
SWVERID_CMP_NEQ	int
;	O
}	O
if	O
(	O
swverid1_target	pointer
->	O
namespaceM	array
!=	O
SWVERID_NS_NA	O
&&	O
swverid1_target	pointer
->	O
namespaceM	array
!=	O
swverid2_candidate	pointer
->	O
namespaceM	array
)	O
{	O
return	O
SWVERID_CMP_NEQ	int
;	O
}	O
tag1	pointer
=	O
cplob_val	function
(	O
swverid1_target	pointer
->	O
taglistM	pointer
,	O
0	int
)	O
;	O
if	O
(	O
!	O
tag1	pointer
||	O
strlen	function
(	O
tag1	pointer
)	O
==	O
0	int
)	O
{	O
return	O
SWVERID_CMP_EQ	int
;	O
}	O
if	O
(	O
strcmp	function
(	O
tag1	pointer
,	O
"*"	pointer
)	O
==	O
0	int
)	O
{	O
return	O
SWVERID_CMP_EQ	int
;	O
}	O
if	O
(	O
swverid1_target	pointer
->	O
use_path_compareM	int
||	O
swverid2_candidate	pointer
->	O
use_path_compareM	int
)	O
{	O
if	O
(	O
!	O
swlib_compare_8859	function
(	O
cplob_val	function
(	O
swverid1_target	pointer
->	O
taglistM	pointer
,	O
0	int
)	O
,	O
cplob_val	function
(	O
swverid2_candidate	pointer
->	O
taglistM	pointer
,	O
0	int
)	O
)	O
)	O
{	O
return	O
SWVERID_CMP_EQ	int
;	O
}	O
else	O
{	O
return	O
SWVERID_CMP_NEQ	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
cplob_val	function
(	O
swverid1_target	pointer
->	O
taglistM	pointer
,	O
0	int
)	O
,	O
cplob_val	function
(	O
swverid2_candidate	pointer
->	O
taglistM	pointer
,	O
0	int
)	O
)	O
)	O
{	O
return	O
SWVERID_CMP_EQ	int
;	O
}	O
else	O
{	O
return	O
SWVERID_CMP_NEQ	int
;	O
}	O
}	O
}	O
int	O
swverid_compare	function
(	O
SWVERID	struct
*	O
swverid1_target	pointer
,	O
SWVERID	struct
*	O
swverid2_candidate	pointer
)	O
{	O
int	O
ret	int
;	O
char	O
*	O
tag1	pointer
;	O
if	O
(	O
strcmp	function
(	O
swverid1_target	pointer
->	O
object_nameM	pointer
,	O
swverid2_candidate	pointer
->	O
object_nameM	pointer
)	O
)	O
{	O
return	O
SWVERID_CMP_NEQ	int
;	O
}	O
if	O
(	O
swverid1_target	pointer
->	O
namespaceM	array
!=	O
SWVERID_NS_NA	O
&&	O
swverid1_target	pointer
->	O
namespaceM	array
!=	O
swverid2_candidate	pointer
->	O
namespaceM	array
)	O
{	O
return	O
SWVERID_CMP_NEQ	int
;	O
}	O
tag1	pointer
=	O
cplob_val	function
(	O
swverid1_target	pointer
->	O
taglistM	pointer
,	O
0	int
)	O
;	O
if	O
(	O
!	O
tag1	pointer
||	O
strlen	function
(	O
tag1	pointer
)	O
==	O
0	int
)	O
{	O
return	O
SWVERID_CMP_EQ	int
;	O
}	O
if	O
(	O
swverid1_target	pointer
->	O
use_path_compareM	int
&&	O
swverid2_candidate	pointer
->	O
use_path_compareM	int
)	O
{	O
if	O
(	O
!	O
swlib_compare_8859	function
(	O
cplob_val	function
(	O
swverid1_target	pointer
->	O
taglistM	pointer
,	O
0	int
)	O
,	O
cplob_val	function
(	O
swverid2_candidate	pointer
->	O
taglistM	pointer
,	O
0	int
)	O
)	O
)	O
{	O
return	O
SWVERID_CMP_EQ	int
;	O
}	O
else	O
{	O
return	O
SWVERID_CMP_NEQ	int
;	O
}	O
}	O
else	O
if	O
(	O
swverid1_target	pointer
->	O
use_path_compareM	int
==	O
0	int
&&	O
swverid2_candidate	pointer
->	O
use_path_compareM	int
==	O
0	int
)	O
{	O
compare_taglist	function
(	O
swverid1_target	pointer
,	O
swverid2_candidate	pointer
)	O
;	O
ret	int
=	O
compare_all_version_ids	function
(	O
swverid1_target	pointer
,	O
swverid2_candidate	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
else	O
{	O
return	O
-	O
1	int
;	O
}	O
}	O
int	O
swverid_add_attribute	function
(	O
SWVERID	struct
*	O
swverid	pointer
,	O
char	O
*	O
object_keyword	pointer
,	O
char	O
*	O
keyword	pointer
,	O
char	O
*	O
value	int
)	O
{	O
char	O
ver_id	pointer
[	O
3	int
]	O
;	O
struct	O
VER_ID	struct
*	O
version_id	pointer
;	O
STROB	struct
*	O
verid_string	pointer
;	O
int	O
c	int
;	O
if	O
(	O
strcmp	function
(	O
object_keyword	pointer
,	O
"file"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
object_keyword	pointer
,	O
"control_file"	pointer
)	O
==	O
0	int
)	O
{	O
swverid	pointer
->	O
use_path_compareM	int
=	O
1	int
;	O
}	O
c	int
=	O
swverid_get_ver_id_char	function
(	O
object_keyword	pointer
,	O
keyword	pointer
)	O
;	O
if	O
(	O
c	int
<	O
0	int
)	O
{	O
swuts_add_attribute	function
(	O
swverid	pointer
->	O
swutsM	pointer
,	O
keyword	pointer
,	O
value	int
)	O
;	O
return	O
0	int
;	O
}	O
ver_id	pointer
[	O
0	int
]	O
=	O
ver_id	pointer
[	O
1	int
]	O
=	O
ver_id	pointer
[	O
2	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
c	int
==	O
0	int
)	O
{	O
if	O
(	O
swverid	pointer
->	O
source_copyM	pointer
)	O
{	O
swbis_free	O
(	O
swverid	pointer
->	O
source_copyM	pointer
)	O
;	O
swverid	pointer
->	O
source_copyM	pointer
=	O
NULL	O
;	O
}	O
swverid	pointer
->	O
source_copyM	pointer
=	O
swlib_strdup	function
(	O
value	int
)	O
;	O
cplob_additem	function
(	O
swverid	pointer
->	O
taglistM	pointer
,	O
0	int
,	O
swverid	pointer
->	O
source_copyM	pointer
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
0	int
&&	O
object_keyword	pointer
)	O
{	O
ver_id	pointer
[	O
0	int
]	O
=	O
*	O
object_keyword	pointer
;	O
ver_id	pointer
[	O
1	int
]	O
=	O
(	O
char	O
)	O
(	O
c	int
)	O
;	O
}	O
else	O
{	O
ver_id	pointer
[	O
0	int
]	O
=	O
(	O
char	O
)	O
(	O
c	int
)	O
;	O
}	O
verid_string	pointer
=	O
strob_open	function
(	O
24	int
)	O
;	O
strob_strcpy	function
(	O
verid_string	pointer
,	O
ver_id	pointer
)	O
;	O
if	O
(	O
ver_id	pointer
[	O
0	int
]	O
==	O
'r'	O
||	O
ver_id	pointer
[	O
1	int
]	O
==	O
'r'	O
)	O
{	O
strob_strcat	function
(	O
verid_string	pointer
,	O
"=="	pointer
)	O
;	O
}	O
else	O
{	O
strob_strcat	function
(	O
verid_string	pointer
,	O
"="	pointer
)	O
;	O
}	O
strob_strcat	function
(	O
verid_string	pointer
,	O
value	int
)	O
;	O
version_id	pointer
=	O
create_version_id	function
(	O
strob_str	function
(	O
verid_string	pointer
)	O
)	O
;	O
if	O
(	O
version_id	pointer
==	O
NULL	O
)	O
{	O
return	O
-	O
1	int
;	O
}	O
swverid_add_verid	function
(	O
swverid	pointer
,	O
version_id	pointer
)	O
;	O
strob_close	function
(	O
verid_string	pointer
)	O
;	O
return	O
1	int
;	O
}	O
int	O
swverid_get_comparison_sense	function
(	O
SWVERID	struct
*	O
swverid1	pointer
,	O
SWVERID	struct
*	O
swverid2	pointer
)	O
{	O
return	O
0	int
;	O
}	O
Swverid_Cmp_Code	int
swverid_get_comparison_code	function
(	O
SWVERID	struct
*	O
swverid	pointer
)	O
{	O
return	O
swverid	pointer
->	O
comparison_codeM	int
;	O
}	O
void	O
swverid_set_comparison_code	function
(	O
SWVERID	struct
*	O
swverid	pointer
,	O
Swverid_Cmp_Code	int
code	int
)	O
{	O
swverid	pointer
->	O
comparison_codeM	int
=	O
code	int
;	O
}	O
char	O
*	O
swverid_get_tag	function
(	O
SWVERID	struct
*	O
swverid	pointer
,	O
int	O
n	long
)	O
{	O
return	O
cplob_val	function
(	O
swverid	pointer
->	O
taglistM	pointer
,	O
n	long
)	O
;	O
}	O
void	O
swverid_set_tag	function
(	O
SWVERID	struct
*	O
swverid	pointer
,	O
char	O
*	O
key	pointer
,	O
char	O
*	O
value	int
)	O
{	O
if	O
(	O
value	int
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
!	O
strcmp	function
(	O
key	pointer
,	O
"catalog"	pointer
)	O
)	O
{	O
if	O
(	O
swverid	pointer
->	O
catalogM	pointer
)	O
{	O
swbis_free	O
(	O
swverid	pointer
->	O
catalogM	pointer
)	O
;	O
swverid	pointer
->	O
catalogM	pointer
=	O
NULL	O
;	O
}	O
swverid	pointer
->	O
catalogM	pointer
=	O
swlib_strdup	function
(	O
value	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
cplob_val	function
(	O
swverid	pointer
->	O
taglistM	pointer
,	O
0	int
)	O
)	O
{	O
swbis_free	O
(	O
cplob_val	function
(	O
swverid	pointer
->	O
taglistM	pointer
,	O
0	int
)	O
)	O
;	O
}	O
cplob_additem	function
(	O
swverid	pointer
->	O
taglistM	pointer
,	O
0	int
,	O
swlib_strdup	function
(	O
value	int
)	O
)	O
;	O
}	O
}	O
int	O
swverid_get_ver_id_char	function
(	O
char	O
*	O
object	pointer
,	O
char	O
*	O
attr_name	pointer
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
attr_name	pointer
,	O
SW_A_revision	pointer
)	O
)	O
{	O
return	O
SWVERID_VERID_REVISION	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
attr_name	pointer
,	O
SW_A_architecture	pointer
)	O
)	O
{	O
return	O
SWVERID_VERID_ARCHITECTURE	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
attr_name	pointer
,	O
SW_A_vendor_tag	pointer
)	O
)	O
{	O
return	O
SWVERID_VERID_VENDOR_TAG	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
attr_name	pointer
,	O
SW_A_location	pointer
)	O
)	O
{	O
return	O
SWVERID_VERID_LOCATION	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
attr_name	pointer
,	O
SW_A_qualifier	pointer
)	O
)	O
{	O
return	O
SWVERID_VERID_QUALIFIER	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
attr_name	pointer
,	O
SW_A_tag	pointer
)	O
)	O
{	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
attr_name	pointer
,	O
SW_A_path	pointer
)	O
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
object	pointer
,	O
"file"	pointer
)	O
||	O
!	O
strcmp	function
(	O
object	pointer
,	O
SW_A_distribution	pointer
)	O
)	O
return	O
0	int
;	O
else	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
return	O
-	O
1	int
;	O
}	O
}	O
struct	O
VER_ID	struct
*	O
swverid_get_verid	function
(	O
SWVERID	struct
*	O
swverid	pointer
,	O
char	O
*	O
fp_verid	pointer
,	O
int	O
occno	int
)	O
{	O
char	O
*	O
verid	pointer
;	O
char	O
*	O
qualifier	pointer
;	O
int	O
occ_count	int
;	O
struct	O
VER_ID	struct
*	O
last	pointer
;	O
verid	pointer
=	O
fp_verid	pointer
;	O
occ_count	int
=	O
0	int
;	O
if	O
(	O
strlen	function
(	O
verid	pointer
)	O
>	O
2	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"invalid version id: %s\n"	pointer
,	O
fp_verid	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
strlen	function
(	O
verid	pointer
)	O
>	O
1	int
)	O
verid	pointer
++	O
;	O
if	O
(	O
strlen	function
(	O
verid	pointer
)	O
>	O
1	int
)	O
qualifier	pointer
=	O
verid	pointer
;	O
else	O
qualifier	pointer
=	O
""	pointer
;	O
last	pointer
=	O
swverid	pointer
->	O
ver_id_listM	pointer
;	O
while	O
(	O
last	pointer
)	O
{	O
if	O
(	O
*	O
(	O
last	pointer
->	O
idM	char
)	O
==	O
*	O
verid	pointer
)	O
{	O
if	O
(	O
strlen	function
(	O
qualifier	pointer
)	O
>	O
0	int
)	O
{	O
if	O
(	O
strlen	function
(	O
last	pointer
->	O
vqM	array
)	O
>	O
0	int
)	O
{	O
if	O
(	O
*	O
(	O
last	pointer
->	O
vqM	array
)	O
==	O
*	O
qualifier	pointer
)	O
{	O
if	O
(	O
occ_count	int
>=	O
occno	int
-	O
1	int
)	O
{	O
return	O
last	pointer
;	O
}	O
occ_count	int
++	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
occ_count	int
>=	O
occno	int
-	O
1	int
)	O
{	O
return	O
last	pointer
;	O
}	O
occ_count	int
++	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
occ_count	int
>=	O
occno	int
-	O
1	int
)	O
{	O
return	O
last	pointer
;	O
}	O
occ_count	int
++	O
;	O
}	O
}	O
last	pointer
=	O
last	pointer
->	O
nextM	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
char	O
*	O
swverid_print_ver_id	function
(	O
struct	O
VER_ID	struct
*	O
next	pointer
,	O
STROB	struct
*	O
buf	pointer
)	O
{	O
int	O
vi	int
;	O
char	O
*	O
val	array
;	O
int	O
n	long
=	O
0	int
;	O
strob_strcpy	function
(	O
buf	pointer
,	O
""	pointer
)	O
;	O
while	O
(	O
next	pointer
)	O
{	O
if	O
(	O
n	long
++	O
)	O
strob_strcat	function
(	O
buf	pointer
,	O
","	pointer
)	O
;	O
strob_strcat	function
(	O
buf	pointer
,	O
next	pointer
->	O
vqM	array
)	O
;	O
strob_strcat	function
(	O
buf	pointer
,	O
next	pointer
->	O
idM	char
)	O
;	O
strob_strcat	function
(	O
buf	pointer
,	O
next	pointer
->	O
rel_opM	array
)	O
;	O
vi	int
=	O
0	int
;	O
if	O
(	O
(	O
val	array
=	O
next	pointer
->	O
valueM	int
)	O
!=	O
NULL	O
)	O
{	O
strob_strcat	function
(	O
buf	pointer
,	O
val	array
)	O
;	O
}	O
else	O
{	O
;	O
}	O
next	pointer
=	O
next	pointer
->	O
nextM	pointer
;	O
}	O
return	O
strob_str	function
(	O
buf	pointer
)	O
;	O
}	O
void	O
swverid_add_verid	function
(	O
SWVERID	struct
*	O
swverid	pointer
,	O
struct	O
VER_ID	struct
*	O
verid	pointer
)	O
{	O
struct	O
VER_ID	struct
*	O
prev	pointer
;	O
struct	O
VER_ID	struct
*	O
last	pointer
;	O
last	pointer
=	O
swverid	pointer
->	O
ver_id_listM	pointer
;	O
if	O
(	O
verid	pointer
)	O
verid	pointer
->	O
nextM	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
last	pointer
)	O
{	O
swverid	pointer
->	O
ver_id_listM	pointer
=	O
verid	pointer
;	O
return	O
;	O
}	O
while	O
(	O
last	pointer
)	O
{	O
prev	pointer
=	O
last	pointer
;	O
last	pointer
=	O
last	pointer
->	O
nextM	pointer
;	O
}	O
prev	pointer
->	O
nextM	pointer
=	O
verid	pointer
;	O
}	O
void	O
swverid_add_verid_if	function
(	O
SWVERID	struct
*	O
swverid	pointer
,	O
struct	O
VER_ID	struct
*	O
verid	pointer
)	O
{	O
i_replace_verid	function
(	O
swverid	pointer
,	O
verid	pointer
,	O
0	int
)	O
;	O
}	O
void	O
swverid_replace_verid	function
(	O
SWVERID	struct
*	O
swverid	pointer
,	O
struct	O
VER_ID	struct
*	O
verid	pointer
)	O
{	O
i_replace_verid	function
(	O
swverid	pointer
,	O
verid	pointer
,	O
1	int
)	O
;	O
}	O
SWVERID	struct
*	O
swverid_get_alternate	function
(	O
SWVERID	struct
*	O
swverid	pointer
)	O
{	O
return	O
swverid	pointer
->	O
altM	pointer
;	O
}	O
void	O
swverid_disconnect_alternates	function
(	O
SWVERID	struct
*	O
swverid	pointer
)	O
{	O
SWVERID	struct
*	O
oldparent	pointer
;	O
SWVERID	struct
*	O
parent	pointer
;	O
parent	pointer
=	O
swverid	pointer
;	O
while	O
(	O
parent	pointer
)	O
{	O
oldparent	pointer
=	O
parent	pointer
;	O
parent	pointer
=	O
parent	pointer
->	O
altM	pointer
;	O
oldparent	pointer
->	O
altM	pointer
=	O
NULL	O
;	O
}	O
}	O
char	O
*	O
swverid_debug_print	function
(	O
SWVERID	struct
*	O
swverid	pointer
,	O
STROB	struct
*	O
buf	pointer
)	O
{	O
STROB	struct
*	O
tmp	pointer
;	O
tmp	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
swverid_print	function
(	O
swverid	pointer
,	O
tmp	pointer
)	O
;	O
strob_strcpy	function
(	O
buf	pointer
,	O
""	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
0	int
,	O
"%d: %s"	pointer
,	O
swverid	pointer
->	O
alter_uuidM	int
,	O
strob_str	function
(	O
tmp	pointer
)	O
)	O
;	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
return	O
strob_str	function
(	O
buf	pointer
)	O
;	O
}	O
char	O
*	O
swverid_print	function
(	O
SWVERID	struct
*	O
swverid	pointer
,	O
STROB	struct
*	O
fp_buf	pointer
)	O
{	O
char	O
*	O
ret	int
;	O
STROB	struct
*	O
buf	pointer
;	O
static	O
STROB	struct
*	O
nb	pointer
;	O
SWVERID	struct
*	O
next	pointer
;	O
if	O
(	O
fp_buf	pointer
)	O
{	O
buf	pointer
=	O
fp_buf	pointer
;	O
}	O
else	O
{	O
if	O
(	O
nb	pointer
==	O
NULL	O
)	O
{	O
nb	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
}	O
buf	pointer
=	O
nb	pointer
;	O
}	O
strob_strcpy	function
(	O
buf	pointer
,	O
""	pointer
)	O
;	O
swverid_i_print	function
(	O
swverid	pointer
,	O
buf	pointer
)	O
;	O
next	pointer
=	O
swverid	pointer
;	O
while	O
(	O
(	O
next	pointer
=	O
swverid_get_alternate	function
(	O
next	pointer
)	O
)	O
)	O
{	O
strob_strcat	function
(	O
buf	pointer
,	O
"|"	pointer
)	O
;	O
swverid_i_print	function
(	O
next	pointer
,	O
buf	pointer
)	O
;	O
}	O
ret	int
=	O
strob_str	function
(	O
buf	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
char	O
*	O
swverid_show_object_debug	function
(	O
SWVERID	struct
*	O
swverid	pointer
,	O
STROB	struct
*	O
fp_buf	pointer
,	O
char	O
*	O
prefix	pointer
)	O
{	O
SWVERID	struct
*	O
xx	pointer
;	O
static	O
STROB	struct
*	O
buf	pointer
;	O
STROB	struct
*	O
buf1	pointer
;	O
char	O
*	O
tag	pointer
;	O
int	O
in	int
;	O
if	O
(	O
fp_buf	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
buf	pointer
==	O
NULL	O
)	O
buf	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
}	O
else	O
{	O
buf	pointer
=	O
fp_buf	pointer
;	O
}	O
xx	pointer
=	O
swverid	pointer
;	O
buf1	pointer
=	O
strob_open	function
(	O
10	int
)	O
;	O
strob_strcpy	function
(	O
buf	pointer
,	O
""	pointer
)	O
;	O
swverid_print	function
(	O
swverid	pointer
,	O
buf1	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p (SWVERID*)\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p swverid_print() = [%s]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
swverid_print	function
(	O
swverid	pointer
,	O
buf1	pointer
)	O
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->object_nameM = [%s]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
object_nameM	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->source_copyM = [%s]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
source_copyM	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->catalogM = [%s]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
catalogM	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->use_path_compareM = [%d]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
use_path_compareM	int
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->comparison_codeM = [%d]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
comparison_codeM	int
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->ver_id_listM = (struct VER_ID*)%p\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
(	O
void	O
*	O
)	O
(	O
xx	pointer
->	O
ver_id_listM	pointer
)	O
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->ver_id_listM = [%s]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
swverid_print_ver_id	function
(	O
xx	pointer
->	O
ver_id_listM	pointer
,	O
buf1	pointer
)	O
)	O
;	O
in	int
=	O
0	int
;	O
strob_strcpy	function
(	O
buf1	pointer
,	O
""	pointer
)	O
;	O
while	O
(	O
(	O
tag	pointer
=	O
cplob_val	function
(	O
swverid	pointer
->	O
taglistM	pointer
,	O
in	int
++	O
)	O
)	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
in	int
>	O
1	int
)	O
strob_sprintf	function
(	O
buf1	pointer
,	O
1	int
,	O
"."	pointer
,	O
tag	pointer
)	O
;	O
strob_sprintf	function
(	O
buf1	pointer
,	O
1	int
,	O
"%s"	pointer
,	O
tag	pointer
)	O
;	O
}	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->taglistM = (CPLOB*)(%p)\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
(	O
void	O
*	O
)	O
(	O
xx	pointer
->	O
taglistM	pointer
)	O
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->taglistM = [%s]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
strob_str	function
(	O
buf1	pointer
)	O
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->namespaceM = [%d]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
xx	pointer
,	O
xx	pointer
->	O
namespaceM	array
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
STROB_DO_APPEND	int
,	O
"os_name=%s\n"	pointer
"os_version=%s\n"	pointer
"os_release=%s\n"	pointer
"machine_type=%s\n"	pointer
,	O
swverid	pointer
->	O
swutsM	pointer
->	O
sysnameM	pointer
,	O
swverid	pointer
->	O
swutsM	pointer
->	O
versionM	pointer
,	O
swverid	pointer
->	O
swutsM	pointer
->	O
releaseM	pointer
,	O
swverid	pointer
->	O
swutsM	pointer
->	O
machineM	pointer
)	O
;	O
return	O
strob_str	function
(	O
buf	pointer
)	O
;	O
}	O
CPLOB	struct
*	O
swverid_u_parse_swspec	function
(	O
SWVERID	struct
*	O
swverid	pointer
,	O
char	O
*	O
swspec	pointer
)	O
{	O
CPLOB	struct
*	O
list	pointer
;	O
CPLOB	struct
*	O
savecplob	pointer
;	O
char	O
*	O
savesource	pointer
;	O
savecplob	pointer
=	O
swverid	pointer
->	O
taglistM	pointer
;	O
list	pointer
=	O
cplob_open	function
(	O
3	int
)	O
;	O
swverid	pointer
->	O
taglistM	pointer
=	O
list	pointer
;	O
savesource	pointer
=	O
swverid	pointer
->	O
source_copyM	pointer
;	O
swverid	pointer
->	O
source_copyM	pointer
=	O
strdup	function
(	O
swspec	pointer
)	O
;	O
parse_swspec_string	function
(	O
swverid	pointer
)	O
;	O
free	function
(	O
swverid	pointer
->	O
source_copyM	pointer
)	O
;	O
swverid	pointer
->	O
taglistM	pointer
=	O
savecplob	pointer
;	O
swverid	pointer
->	O
source_copyM	pointer
=	O
savesource	pointer
;	O
return	O
list	pointer
;	O
}	O
struct	O
VER_ID	struct
*	O
swverid_create_version_id	function
(	O
char	O
*	O
verid_string	pointer
)	O
{	O
struct	O
VER_ID	struct
*	O
ver_id	pointer
;	O
ver_id	pointer
=	O
create_version_id	function
(	O
verid_string	pointer
)	O
;	O
return	O
ver_id	pointer
;	O
}	O
char	O
*	O
swverid_get_verid_value	function
(	O
SWVERID	struct
*	O
swverid	pointer
,	O
char	O
*	O
fp_verid	pointer
,	O
int	O
occno	int
)	O
{	O
char	O
*	O
ret	int
;	O
struct	O
VER_ID	struct
*	O
verid	pointer
;	O
verid	pointer
=	O
swverid_get_verid	function
(	O
swverid	pointer
,	O
fp_verid	pointer
,	O
occno	int
)	O
;	O
if	O
(	O
!	O
verid	pointer
)	O
return	O
(	O
char	O
*	O
)	O
NULL	O
;	O
ret	int
=	O
verid	pointer
->	O
valueM	int
;	O
return	O
ret	int
;	O
}	O
int	O
swverid_delete_non_fully_qualified_verids	function
(	O
SWVERID	struct
*	O
swverid	pointer
)	O
{	O
int	O
retval	int
;	O
struct	O
VER_ID	struct
*	O
tmp	pointer
;	O
struct	O
VER_ID	struct
*	O
last	pointer
;	O
retval	int
=	O
0	int
;	O
last	pointer
=	O
swverid	pointer
->	O
ver_id_listM	pointer
;	O
while	O
(	O
last	pointer
)	O
{	O
if	O
(	O
swlib_is_sh_tainted_string	function
(	O
last	pointer
->	O
valueM	int
)	O
)	O
{	O
tmp	pointer
=	O
last	pointer
;	O
last	pointer
=	O
last	pointer
->	O
nextM	pointer
;	O
swverid_ver_id_unlink	function
(	O
swverid	pointer
,	O
tmp	pointer
)	O
;	O
retval	int
++	O
;	O
}	O
else	O
{	O
last	pointer
=	O
last	pointer
->	O
nextM	pointer
;	O
}	O
}	O
return	O
retval	int
;	O
}	O
