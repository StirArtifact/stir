typedef	O
struct	O
Arg_t	struct
{	O
int	O
all	int
;	O
int	O
inDir	int
;	O
int	O
summary	int
;	O
struct	O
Arg_t	struct
*	O
parent	pointer
;	O
char	O
*	O
target	pointer
;	O
char	O
*	O
path	pointer
;	O
unsigned	O
int	O
blocks	int
;	O
MainParam_t	struct
mp	pointer
;	O
}	O
Arg_t	struct
;	O
static	O
void	O
usage	function
(	O
int	O
ret	int
)	O
NORETURN	O
;	O
static	O
void	O
usage	function
(	O
int	O
ret	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Mtools version %s, dated %s\n"	pointer
,	O
mversion	pointer
,	O
mdate	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Usage: %s: msdosdirectory\n"	pointer
,	O
progname	pointer
)	O
;	O
exit	function
(	O
ret	int
)	O
;	O
}	O
static	O
int	O
file_mdu	function
(	O
direntry_t	struct
*	O
entry	int
,	O
MainParam_t	struct
*	O
mp	pointer
)	O
{	O
unsigned	O
int	O
blocks	int
;	O
Arg_t	struct
*	O
arg	pointer
=	O
(	O
Arg_t	struct
*	O
)	O
(	O
mp	pointer
->	O
arg	pointer
)	O
;	O
blocks	int
=	O
countBlocks	function
(	O
entry	int
->	O
Dir	pointer
,	O
getStart	function
(	O
entry	int
->	O
Dir	pointer
,	O
&	O
entry	int
->	O
dir	pointer
)	O
)	O
;	O
if	O
(	O
arg	pointer
->	O
all	int
||	O
!	O
arg	pointer
->	O
inDir	int
)	O
{	O
fprintPwd	function
(	O
stdout	pointer
,	O
entry	int
,	O
0	int
)	O
;	O
printf	function
(	O
" %d\n"	pointer
,	O
blocks	int
)	O
;	O
}	O
arg	pointer
->	O
blocks	int
+=	O
blocks	int
;	O
return	O
GOT_ONE	int
;	O
}	O
static	O
int	O
dir_mdu	function
(	O
direntry_t	struct
*	O
entry	int
,	O
MainParam_t	struct
*	O
mp	pointer
)	O
{	O
Arg_t	struct
*	O
parentArg	pointer
=	O
(	O
Arg_t	struct
*	O
)	O
(	O
mp	pointer
->	O
arg	pointer
)	O
;	O
Arg_t	struct
arg	pointer
;	O
int	O
ret	int
;	O
arg	pointer
=	O
*	O
parentArg	pointer
;	O
arg	pointer
.	O
mp	pointer
.	O
arg	pointer
=	O
(	O
void	O
*	O
)	O
&	O
arg	pointer
;	O
arg	pointer
.	O
parent	pointer
=	O
parentArg	pointer
;	O
arg	pointer
.	O
inDir	int
=	O
1	int
;	O
if	O
(	O
!	O
isRootDir	function
(	O
entry	int
->	O
Dir	pointer
)	O
)	O
{	O
arg	pointer
.	O
blocks	int
=	O
countBlocks	function
(	O
entry	int
->	O
Dir	pointer
,	O
getStart	function
(	O
entry	int
->	O
Dir	pointer
,	O
&	O
entry	int
->	O
dir	pointer
)	O
)	O
;	O
}	O
else	O
{	O
arg	pointer
.	O
blocks	int
=	O
0	int
;	O
}	O
ret	int
=	O
mp	pointer
->	O
loop	pointer
(	O
mp	pointer
->	O
File	pointer
,	O
&	O
arg	pointer
.	O
mp	pointer
,	O
"*"	pointer
)	O
;	O
if	O
(	O
!	O
arg	pointer
.	O
summary	int
||	O
!	O
parentArg	pointer
->	O
inDir	int
)	O
{	O
fprintPwd	function
(	O
stdout	pointer
,	O
entry	int
,	O
0	int
)	O
;	O
printf	function
(	O
" %d\n"	pointer
,	O
arg	pointer
.	O
blocks	int
)	O
;	O
}	O
arg	pointer
.	O
parent	pointer
->	O
blocks	int
+=	O
arg	pointer
.	O
blocks	int
;	O
return	O
ret	int
;	O
}	O
void	O
mdu	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
type	enum
UNUSEDP	O
)	O
NORETURN	O
;	O
void	O
mdu	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
type	enum
UNUSEDP	O
)	O
{	O
Arg_t	struct
arg	pointer
;	O
int	O
c	char
;	O
arg	pointer
.	O
all	int
=	O
0	int
;	O
arg	pointer
.	O
inDir	int
=	O
0	int
;	O
arg	pointer
.	O
summary	int
=	O
0	int
;	O
if	O
(	O
helpFlag	function
(	O
argc	int
,	O
argv	pointer
)	O
)	O
usage	function
(	O
0	int
)	O
;	O
while	O
(	O
(	O
c	char
=	O
getopt	function
(	O
argc	int
,	O
argv	pointer
,	O
"i:ash"	pointer
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
c	char
)	O
{	O
case	O
'i'	O
:	O
set_cmd_line_image	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'a'	O
:	O
arg	pointer
.	O
all	int
=	O
1	int
;	O
break	O
;	O
case	O
's'	O
:	O
arg	pointer
.	O
summary	int
=	O
1	int
;	O
break	O
;	O
case	O
'h'	O
:	O
usage	function
(	O
0	int
)	O
;	O
case	O
'?'	O
:	O
usage	function
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
optind	int
>=	O
argc	int
)	O
usage	function
(	O
1	int
)	O
;	O
if	O
(	O
arg	pointer
.	O
summary	int
&&	O
arg	pointer
.	O
all	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"-a and -s options are mutually exclusive\n"	pointer
)	O
;	O
usage	function
(	O
1	int
)	O
;	O
}	O
init_mp	function
(	O
&	O
arg	pointer
.	O
mp	pointer
)	O
;	O
arg	pointer
.	O
mp	pointer
.	O
callback	pointer
=	O
file_mdu	function
;	O
arg	pointer
.	O
mp	pointer
.	O
openflags	int
=	O
O_RDONLY	int
;	O
arg	pointer
.	O
mp	pointer
.	O
dirCallback	pointer
=	O
dir_mdu	function
;	O
arg	pointer
.	O
mp	pointer
.	O
arg	pointer
=	O
(	O
void	O
*	O
)	O
&	O
arg	pointer
;	O
arg	pointer
.	O
mp	pointer
.	O
lookupflags	int
=	O
ACCEPT_PLAIN	int
|	O
ACCEPT_DIR	int
|	O
DO_OPEN_DIRS	int
|	O
NO_DOTS	int
;	O
exit	function
(	O
main_loop	function
(	O
&	O
arg	pointer
.	O
mp	pointer
,	O
argv	pointer
+	O
optind	int
,	O
argc	int
-	O
optind	int
)	O
)	O
;	O
}	O
