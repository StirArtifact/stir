enum	O
{	O
CHAN_READ	int
=	O
MU_TRANSPORT_INPUT	int
,	O
CHAN_WRITE	int
=	O
MU_TRANSPORT_OUTPUT	int
}	O
;	O
enum	O
{	O
XST_NORMAL	int
=	O
MU_XSCRIPT_NORMAL	int
,	O
XST_SECURE	int
=	O
MU_XSCRIPT_SECURE	int
,	O
XST_PAYLOAD	int
=	O
MU_XSCRIPT_PAYLOAD	int
,	O
XST_SKIPLEN	int
,	O
XST_DISABLED	int
}	O
;	O
static	O
int	O
word_match	function
(	O
const	O
char	O
*	O
buf	pointer
,	O
size_t	long
len	long
,	O
int	O
n	long
,	O
const	O
char	O
*	O
word	pointer
,	O
size_t	long
*	O
pos	long
)	O
{	O
size_t	long
i	long
=	O
0	int
;	O
size_t	long
wl	long
=	O
strlen	function
(	O
word	pointer
)	O
;	O
for	O
(	O
;	O
;	O
n	long
--	O
)	O
{	O
for	O
(	O
;	O
i	long
<	O
len	long
&&	O
mu_isspace	O
(	O
buf	pointer
[	O
i	long
]	O
)	O
;	O
i	long
++	O
)	O
;	O
if	O
(	O
n	long
==	O
0	int
)	O
break	O
;	O
if	O
(	O
buf	pointer
[	O
i	long
]	O
==	O
'"'	O
)	O
{	O
for	O
(	O
i	long
++	O
;	O
i	long
<	O
len	long
&&	O
buf	pointer
[	O
i	long
]	O
!=	O
'"'	O
;	O
i	long
++	O
)	O
if	O
(	O
buf	pointer
[	O
i	long
]	O
==	O
'\''	O
)	O
i	long
++	O
;	O
}	O
else	O
{	O
for	O
(	O
;	O
i	long
<	O
len	long
&&	O
!	O
mu_isspace	O
(	O
buf	pointer
[	O
i	long
]	O
)	O
;	O
i	long
++	O
)	O
;	O
}	O
}	O
if	O
(	O
i	long
+	O
wl	long
<=	O
len	long
&&	O
mu_c_strncasecmp	function
(	O
buf	pointer
+	O
i	long
,	O
word	pointer
,	O
wl	long
)	O
==	O
0	int
&&	O
mu_isblank	O
(	O
buf	pointer
[	O
i	long
+	O
wl	long
]	O
)	O
)	O
{	O
*	O
pos	long
=	O
i	long
+	O
wl	long
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
print_transcript	function
(	O
struct	O
_mu_xscript_stream	struct
*	O
str	pointer
,	O
int	O
dir	int
,	O
const	O
char	O
*	O
buf	pointer
,	O
size_t	long
size	long
)	O
{	O
while	O
(	O
size	long
)	O
{	O
const	O
char	O
*	O
p	pointer
;	O
size_t	long
len	long
;	O
switch	O
(	O
str	pointer
->	O
channel	array
[	O
dir	int
]	O
.	O
state	pointer
)	O
{	O
case	O
XST_NORMAL	int
:	O
case	O
XST_SECURE	int
:	O
mu_stream_write	function
(	O
str	pointer
->	O
logstr	pointer
,	O
str	pointer
->	O
prefix	array
[	O
dir	int
]	O
,	O
strlen	function
(	O
str	pointer
->	O
prefix	array
[	O
dir	int
]	O
)	O
,	O
NULL	O
)	O
;	O
break	O
;	O
case	O
XST_PAYLOAD	int
:	O
mu_stream_write	function
(	O
str	pointer
->	O
logstr	pointer
,	O
str	pointer
->	O
prefix	array
[	O
dir	int
]	O
,	O
strlen	function
(	O
str	pointer
->	O
prefix	array
[	O
dir	int
]	O
)	O
,	O
NULL	O
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
->	O
logstr	pointer
,	O
"(data...)\n"	pointer
)	O
;	O
if	O
(	O
str	pointer
->	O
channel	array
[	O
dir	int
]	O
.	O
length	long
>	O
0	int
)	O
str	pointer
->	O
channel	array
[	O
dir	int
]	O
.	O
state	pointer
=	O
XST_SKIPLEN	int
;	O
else	O
str	pointer
->	O
channel	array
[	O
dir	int
]	O
.	O
state	pointer
=	O
XST_DISABLED	int
;	O
continue	O
;	O
case	O
XST_SKIPLEN	int
:	O
len	long
=	O
(	O
size	long
<=	O
str	pointer
->	O
channel	array
[	O
dir	int
]	O
.	O
length	long
)	O
?	O
size	long
:	O
str	pointer
->	O
channel	array
[	O
dir	int
]	O
.	O
length	long
;	O
str	pointer
->	O
channel	array
[	O
dir	int
]	O
.	O
length	long
-=	O
len	long
;	O
size	long
-=	O
len	long
;	O
buf	pointer
+=	O
len	long
;	O
if	O
(	O
str	pointer
->	O
channel	array
[	O
dir	int
]	O
.	O
length	long
==	O
0	int
)	O
str	pointer
->	O
channel	array
[	O
dir	int
]	O
.	O
state	pointer
=	O
XST_NORMAL	int
;	O
continue	O
;	O
case	O
XST_DISABLED	int
:	O
return	O
;	O
}	O
p	pointer
=	O
memchr	function
(	O
buf	pointer
,	O
'\n'	O
,	O
size	long
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
len	long
=	O
p	pointer
-	O
buf	pointer
;	O
if	O
(	O
p	pointer
>	O
buf	pointer
&&	O
p	pointer
[	O
-	O
1	int
]	O
==	O
'\r'	O
)	O
len	long
--	O
;	O
if	O
(	O
str	pointer
->	O
channel	array
[	O
dir	int
]	O
.	O
state	pointer
==	O
MU_XSCRIPT_SECURE	int
)	O
{	O
size_t	long
i	long
;	O
if	O
(	O
word_match	function
(	O
buf	pointer
,	O
len	long
,	O
0	int
,	O
"PASS"	pointer
,	O
&	O
i	long
)	O
)	O
mu_stream_printf	function
(	O
str	pointer
->	O
logstr	pointer
,	O
"PASS ***"	pointer
)	O
;	O
else	O
if	O
(	O
word_match	function
(	O
buf	pointer
,	O
len	long
,	O
1	int
,	O
"LOGIN"	pointer
,	O
&	O
i	long
)	O
)	O
{	O
for	O
(	O
;	O
i	long
<	O
len	long
&&	O
mu_isspace	O
(	O
buf	pointer
[	O
i	long
]	O
)	O
;	O
i	long
++	O
)	O
;	O
if	O
(	O
buf	pointer
[	O
i	long
]	O
==	O
'"'	O
)	O
{	O
for	O
(	O
i	long
++	O
;	O
i	long
<	O
len	long
&&	O
buf	pointer
[	O
i	long
]	O
!=	O
'"'	O
;	O
i	long
++	O
)	O
if	O
(	O
buf	pointer
[	O
i	long
]	O
==	O
'\\'	O
)	O
i	long
++	O
;	O
if	O
(	O
i	long
<	O
len	long
&&	O
buf	pointer
[	O
i	long
]	O
==	O
'"'	O
)	O
i	long
++	O
;	O
}	O
else	O
{	O
for	O
(	O
;	O
i	long
<	O
len	long
&&	O
!	O
mu_isspace	O
(	O
buf	pointer
[	O
i	long
]	O
)	O
;	O
i	long
++	O
)	O
;	O
}	O
mu_stream_write	function
(	O
str	pointer
->	O
logstr	pointer
,	O
buf	pointer
,	O
i	long
,	O
NULL	O
)	O
;	O
mu_stream_write	function
(	O
str	pointer
->	O
logstr	pointer
,	O
" \"***\""	pointer
,	O
6	int
,	O
NULL	O
)	O
;	O
}	O
else	O
mu_stream_write	function
(	O
str	pointer
->	O
logstr	pointer
,	O
buf	pointer
,	O
len	long
,	O
NULL	O
)	O
;	O
}	O
else	O
mu_stream_write	function
(	O
str	pointer
->	O
logstr	pointer
,	O
buf	pointer
,	O
len	long
,	O
NULL	O
)	O
;	O
mu_stream_write	function
(	O
str	pointer
->	O
logstr	pointer
,	O
"\n"	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
len	long
=	O
p	pointer
-	O
buf	pointer
+	O
1	int
;	O
buf	pointer
=	O
p	pointer
+	O
1	int
;	O
size	long
-=	O
len	long
;	O
}	O
else	O
{	O
mu_stream_write	function
(	O
str	pointer
->	O
logstr	pointer
,	O
buf	pointer
,	O
size	long
,	O
NULL	O
)	O
;	O
break	O
;	O
}	O
}	O
}	O
static	O
void	O
_xscript_event_cb	function
(	O
mu_stream_t	pointer
str	pointer
,	O
int	O
ev	int
,	O
unsigned	O
long	O
size	long
,	O
void	O
*	O
ptr	pointer
)	O
{	O
struct	O
_mu_xscript_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_xscript_stream	struct
*	O
)	O
str	pointer
;	O
switch	O
(	O
ev	int
)	O
{	O
case	O
_MU_STR_EVENT_FILLBUF	int
:	O
print_transcript	function
(	O
sp	pointer
,	O
CHAN_READ	int
,	O
ptr	pointer
,	O
size	long
)	O
;	O
break	O
;	O
case	O
_MU_STR_EVENT_FLUSHBUF	int
:	O
print_transcript	function
(	O
sp	pointer
,	O
CHAN_WRITE	int
,	O
ptr	pointer
,	O
size	long
)	O
;	O
}	O
}	O
static	O
int	O
_xscript_read	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
bufsize	long
,	O
size_t	long
*	O
pnread	pointer
)	O
{	O
struct	O
_mu_xscript_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_xscript_stream	struct
*	O
)	O
str	pointer
;	O
return	O
mu_stream_read	function
(	O
sp	pointer
->	O
transport	pointer
,	O
buf	pointer
,	O
bufsize	long
,	O
pnread	pointer
)	O
;	O
}	O
static	O
int	O
_xscript_readdelim	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
bufsize	long
,	O
int	O
delim	int
,	O
size_t	long
*	O
pnread	pointer
)	O
{	O
struct	O
_mu_xscript_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_xscript_stream	struct
*	O
)	O
str	pointer
;	O
return	O
mu_stream_readdelim	function
(	O
sp	pointer
->	O
transport	pointer
,	O
buf	pointer
,	O
bufsize	long
,	O
delim	int
,	O
pnread	pointer
)	O
;	O
}	O
static	O
int	O
_xscript_write	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
const	O
char	O
*	O
buf	pointer
,	O
size_t	long
bufsize	long
,	O
size_t	long
*	O
pnwrite	pointer
)	O
{	O
struct	O
_mu_xscript_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_xscript_stream	struct
*	O
)	O
str	pointer
;	O
return	O
mu_stream_write	function
(	O
sp	pointer
->	O
transport	pointer
,	O
buf	pointer
,	O
bufsize	long
,	O
pnwrite	pointer
)	O
;	O
}	O
static	O
int	O
_xscript_flush	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
)	O
{	O
struct	O
_mu_xscript_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_xscript_stream	struct
*	O
)	O
str	pointer
;	O
return	O
mu_stream_flush	function
(	O
sp	pointer
->	O
transport	pointer
)	O
;	O
}	O
static	O
int	O
_xscript_open	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
)	O
{	O
struct	O
_mu_xscript_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_xscript_stream	struct
*	O
)	O
str	pointer
;	O
return	O
mu_stream_open	function
(	O
sp	pointer
->	O
transport	pointer
)	O
;	O
}	O
static	O
int	O
_xscript_close	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
)	O
{	O
struct	O
_mu_xscript_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_xscript_stream	struct
*	O
)	O
str	pointer
;	O
return	O
mu_stream_close	function
(	O
sp	pointer
->	O
transport	pointer
)	O
;	O
}	O
static	O
void	O
_xscript_done	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
)	O
{	O
struct	O
_mu_xscript_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_xscript_stream	struct
*	O
)	O
str	pointer
;	O
free	function
(	O
sp	pointer
->	O
prefix	array
[	O
0	int
]	O
)	O
;	O
free	function
(	O
sp	pointer
->	O
prefix	array
[	O
1	int
]	O
)	O
;	O
mu_stream_unref	function
(	O
sp	pointer
->	O
transport	pointer
)	O
;	O
mu_stream_unref	function
(	O
sp	pointer
->	O
logstr	pointer
)	O
;	O
}	O
static	O
int	O
_xscript_seek	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
mu_off_t	long
off	long
,	O
mu_off_t	long
*	O
ppos	pointer
)	O
{	O
struct	O
_mu_xscript_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_xscript_stream	struct
*	O
)	O
str	pointer
;	O
return	O
mu_stream_seek	function
(	O
sp	pointer
->	O
transport	pointer
,	O
off	long
,	O
MU_SEEK_SET	int
,	O
ppos	pointer
)	O
;	O
}	O
static	O
int	O
_xscript_size	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
mu_off_t	long
*	O
psize	pointer
)	O
{	O
struct	O
_mu_xscript_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_xscript_stream	struct
*	O
)	O
str	pointer
;	O
return	O
mu_stream_size	function
(	O
sp	pointer
->	O
transport	pointer
,	O
psize	pointer
)	O
;	O
}	O
static	O
inline	O
int	O
state_to_level	function
(	O
int	O
s	pointer
)	O
{	O
return	O
s	pointer
>=	O
XST_PAYLOAD	int
?	O
XST_PAYLOAD	int
:	O
s	pointer
;	O
}	O
static	O
int	O
_xscript_ctl	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
int	O
code	int
,	O
int	O
opcode	int
,	O
void	O
*	O
arg	pointer
)	O
{	O
struct	O
_mu_xscript_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_xscript_stream	struct
*	O
)	O
str	pointer
;	O
int	O
status	int
=	O
0	int
;	O
switch	O
(	O
code	int
)	O
{	O
case	O
MU_IOCTL_TRANSPORT	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
else	O
{	O
mu_transport_t	pointer
*	O
ptrans	pointer
=	O
arg	pointer
;	O
switch	O
(	O
opcode	int
)	O
{	O
case	O
MU_IOCTL_OP_GET	int
:	O
ptrans	pointer
[	O
0	int
]	O
=	O
(	O
mu_transport_t	pointer
)	O
sp	pointer
->	O
transport	pointer
;	O
ptrans	pointer
[	O
1	int
]	O
=	O
(	O
mu_transport_t	pointer
)	O
sp	pointer
->	O
logstr	pointer
;	O
break	O
;	O
case	O
MU_IOCTL_OP_SET	int
:	O
ptrans	pointer
=	O
arg	pointer
;	O
if	O
(	O
ptrans	pointer
[	O
0	int
]	O
)	O
sp	pointer
->	O
transport	pointer
=	O
(	O
mu_stream_t	pointer
)	O
ptrans	pointer
[	O
0	int
]	O
;	O
if	O
(	O
ptrans	pointer
[	O
1	int
]	O
)	O
sp	pointer
->	O
logstr	pointer
=	O
(	O
mu_stream_t	pointer
)	O
ptrans	pointer
[	O
1	int
]	O
;	O
break	O
;	O
default	O
:	O
return	O
EINVAL	int
;	O
}	O
}	O
break	O
;	O
case	O
MU_IOCTL_SUBSTREAM	int
:	O
if	O
(	O
sp	pointer
->	O
transport	pointer
&&	O
(	O
(	O
status	int
=	O
mu_stream_ioctl	function
(	O
sp	pointer
->	O
transport	pointer
,	O
code	int
,	O
opcode	int
,	O
arg	pointer
)	O
)	O
==	O
0	int
||	O
status	int
!=	O
ENOSYS	int
)	O
)	O
return	O
status	int
;	O
case	O
MU_IOCTL_TOPSTREAM	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
switch	O
(	O
opcode	int
)	O
{	O
case	O
MU_IOCTL_OP_GET	int
:	O
if	O
(	O
!	O
sp	pointer
->	O
transport	pointer
)	O
status	int
=	O
ENOSYS	int
;	O
else	O
status	int
=	O
mu_stream_ioctl	function
(	O
sp	pointer
->	O
transport	pointer
,	O
code	int
,	O
opcode	int
,	O
arg	pointer
)	O
;	O
if	O
(	O
status	int
==	O
EINVAL	int
||	O
status	int
==	O
ENOSYS	int
)	O
{	O
mu_stream_t	pointer
*	O
pstr	pointer
=	O
arg	pointer
;	O
pstr	pointer
[	O
0	int
]	O
=	O
sp	pointer
->	O
transport	pointer
;	O
mu_stream_ref	function
(	O
pstr	pointer
[	O
0	int
]	O
)	O
;	O
pstr	pointer
[	O
1	int
]	O
=	O
sp	pointer
->	O
transport	pointer
;	O
mu_stream_ref	function
(	O
pstr	pointer
[	O
1	int
]	O
)	O
;	O
status	int
=	O
0	int
;	O
}	O
break	O
;	O
case	O
MU_IOCTL_OP_SET	int
:	O
if	O
(	O
!	O
sp	pointer
->	O
transport	pointer
)	O
status	int
=	O
ENOSYS	int
;	O
else	O
status	int
=	O
mu_stream_ioctl	function
(	O
sp	pointer
->	O
transport	pointer
,	O
code	int
,	O
opcode	int
,	O
arg	pointer
)	O
;	O
if	O
(	O
status	int
==	O
EINVAL	int
||	O
status	int
==	O
ENOSYS	int
)	O
{	O
mu_stream_t	pointer
*	O
pstr	pointer
=	O
arg	pointer
;	O
mu_stream_t	pointer
tmp	pointer
;	O
if	O
(	O
pstr	pointer
[	O
0	int
]	O
!=	O
pstr	pointer
[	O
1	int
]	O
)	O
{	O
status	int
=	O
mu_iostream_create	function
(	O
&	O
tmp	pointer
,	O
pstr	pointer
[	O
0	int
]	O
,	O
pstr	pointer
[	O
1	int
]	O
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
}	O
else	O
{	O
tmp	pointer
=	O
pstr	pointer
[	O
0	int
]	O
;	O
mu_stream_ref	function
(	O
tmp	pointer
)	O
;	O
mu_stream_ref	function
(	O
tmp	pointer
)	O
;	O
status	int
=	O
0	int
;	O
}	O
mu_stream_unref	function
(	O
sp	pointer
->	O
transport	pointer
)	O
;	O
sp	pointer
->	O
transport	pointer
=	O
tmp	pointer
;	O
}	O
}	O
break	O
;	O
case	O
MU_IOCTL_TRANSPORT_BUFFER	int
:	O
if	O
(	O
!	O
sp	pointer
->	O
transport	pointer
)	O
return	O
EINVAL	int
;	O
return	O
mu_stream_ioctl	function
(	O
sp	pointer
->	O
transport	pointer
,	O
code	int
,	O
opcode	int
,	O
arg	pointer
)	O
;	O
case	O
MU_IOCTL_XSCRIPTSTREAM	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
switch	O
(	O
opcode	int
)	O
{	O
case	O
MU_IOCTL_XSCRIPTSTREAM_LEVEL	int
:	O
{	O
int	O
imode	int
=	O
state_to_level	function
(	O
sp	pointer
->	O
channel	array
[	O
CHAN_READ	int
]	O
.	O
state	pointer
)	O
;	O
int	O
omode	int
=	O
state_to_level	function
(	O
sp	pointer
->	O
channel	array
[	O
CHAN_WRITE	int
]	O
.	O
state	pointer
)	O
;	O
int	O
pack	int
=	O
*	O
(	O
int	O
*	O
)	O
arg	pointer
;	O
sp	pointer
->	O
channel	array
[	O
CHAN_READ	int
]	O
.	O
state	pointer
=	O
MU_XSCRIPT_LEVEL_UNPACK	O
(	O
CHAN_READ	int
,	O
pack	int
)	O
;	O
sp	pointer
->	O
channel	array
[	O
CHAN_READ	int
]	O
.	O
length	long
=	O
0	int
;	O
sp	pointer
->	O
channel	array
[	O
CHAN_WRITE	int
]	O
.	O
state	pointer
=	O
MU_XSCRIPT_LEVEL_UNPACK	O
(	O
CHAN_WRITE	int
,	O
pack	int
)	O
;	O
sp	pointer
->	O
channel	array
[	O
CHAN_WRITE	int
]	O
.	O
length	long
=	O
0	int
;	O
*	O
(	O
int	O
*	O
)	O
arg	pointer
=	O
MU_XSCRIPT_LEVEL_PACK	O
(	O
imode	int
,	O
omode	int
)	O
;	O
}	O
break	O
;	O
case	O
MU_IOCTL_XSCRIPTSTREAM_CHANNEL	int
:	O
{	O
struct	O
mu_xscript_channel	struct
ret	struct
;	O
struct	O
mu_xscript_channel	struct
*	O
chp	pointer
=	O
arg	pointer
;	O
if	O
(	O
chp	pointer
->	O
cd	int
<	O
0	int
||	O
chp	pointer
->	O
cd	int
>	O
1	int
||	O
chp	pointer
->	O
level	int
>	O
MU_XSCRIPT_PAYLOAD	int
||	O
(	O
chp	pointer
->	O
level	int
!=	O
MU_XSCRIPT_PAYLOAD	int
&&	O
chp	pointer
->	O
length	long
>	O
0	int
)	O
)	O
return	O
EINVAL	int
;	O
ret	struct
.	O
cd	int
=	O
chp	pointer
->	O
cd	int
;	O
ret	struct
.	O
level	int
=	O
state_to_level	function
(	O
sp	pointer
->	O
channel	array
[	O
chp	pointer
->	O
cd	int
]	O
.	O
state	pointer
)	O
;	O
ret	struct
.	O
length	long
=	O
sp	pointer
->	O
channel	array
[	O
chp	pointer
->	O
cd	int
]	O
.	O
length	long
;	O
sp	pointer
->	O
channel	array
[	O
chp	pointer
->	O
cd	int
]	O
.	O
state	pointer
=	O
chp	pointer
->	O
level	int
;	O
if	O
(	O
chp	pointer
->	O
level	int
==	O
MU_XSCRIPT_PAYLOAD	int
)	O
sp	pointer
->	O
channel	array
[	O
chp	pointer
->	O
cd	int
]	O
.	O
length	long
=	O
chp	pointer
->	O
length	long
;	O
else	O
sp	pointer
->	O
channel	array
[	O
chp	pointer
->	O
cd	int
]	O
.	O
length	long
=	O
0	int
;	O
*	O
chp	pointer
=	O
ret	struct
;	O
}	O
break	O
;	O
default	O
:	O
return	O
EINVAL	int
;	O
}	O
break	O
;	O
default	O
:	O
return	O
mu_stream_ioctl	function
(	O
sp	pointer
->	O
transport	pointer
,	O
code	int
,	O
opcode	int
,	O
arg	pointer
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
_xscript_wait	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
int	O
*	O
pflags	pointer
,	O
struct	O
timeval	struct
*	O
tvp	pointer
)	O
{	O
struct	O
_mu_xscript_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_xscript_stream	struct
*	O
)	O
str	pointer
;	O
return	O
mu_stream_wait	function
(	O
sp	pointer
->	O
transport	pointer
,	O
pflags	pointer
,	O
tvp	pointer
)	O
;	O
}	O
static	O
int	O
_xscript_truncate	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
mu_off_t	long
size	long
)	O
{	O
struct	O
_mu_xscript_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_xscript_stream	struct
*	O
)	O
str	pointer
;	O
return	O
mu_stream_truncate	function
(	O
sp	pointer
->	O
transport	pointer
,	O
size	long
)	O
;	O
}	O
static	O
int	O
_xscript_shutdown	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
int	O
how	int
)	O
{	O
struct	O
_mu_xscript_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_xscript_stream	struct
*	O
)	O
str	pointer
;	O
return	O
mu_stream_shutdown	function
(	O
sp	pointer
->	O
transport	pointer
,	O
how	int
)	O
;	O
}	O
static	O
const	O
char	O
*	O
_xscript_error_string	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
int	O
rc	int
)	O
{	O
struct	O
_mu_xscript_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_xscript_stream	struct
*	O
)	O
str	pointer
;	O
const	O
char	O
*	O
p	pointer
=	O
mu_stream_strerror	function
(	O
sp	pointer
->	O
transport	pointer
,	O
rc	int
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
p	pointer
=	O
mu_strerror	function
(	O
rc	int
)	O
;	O
return	O
p	pointer
;	O
}	O
const	O
char	O
*	O
default_prefix	array
[	O
2	int
]	O
=	O
{	O
"C: "	pointer
,	O
"S: "	pointer
}	O
;	O
int	O
mu_xscript_stream_create	function
(	O
mu_stream_t	pointer
*	O
pref	pointer
,	O
mu_stream_t	pointer
transport	pointer
,	O
mu_stream_t	pointer
logstr	pointer
,	O
const	O
char	O
*	O
prefix	array
[	O
]	O
)	O
{	O
int	O
flags	int
;	O
struct	O
_mu_xscript_stream	struct
*	O
sp	pointer
;	O
mu_stream_get_flags	function
(	O
transport	pointer
,	O
&	O
flags	int
)	O
;	O
sp	pointer
=	O
(	O
struct	O
_mu_xscript_stream	struct
*	O
)	O
_mu_stream_create	function
(	O
sizeof	O
(	O
*	O
sp	pointer
)	O
,	O
flags	int
|	O
_MU_STR_OPEN	int
)	O
;	O
if	O
(	O
!	O
sp	pointer
)	O
return	O
ENOMEM	int
;	O
sp	pointer
->	O
stream	pointer
.	O
read	pointer
=	O
_xscript_read	function
;	O
if	O
(	O
transport	pointer
->	O
readdelim	pointer
)	O
sp	pointer
->	O
stream	pointer
.	O
readdelim	pointer
=	O
_xscript_readdelim	function
;	O
sp	pointer
->	O
stream	pointer
.	O
write	pointer
=	O
_xscript_write	function
;	O
sp	pointer
->	O
stream	pointer
.	O
flush	pointer
=	O
_xscript_flush	function
;	O
sp	pointer
->	O
stream	pointer
.	O
open	pointer
=	O
_xscript_open	function
;	O
sp	pointer
->	O
stream	pointer
.	O
close	pointer
=	O
_xscript_close	function
;	O
sp	pointer
->	O
stream	pointer
.	O
done	pointer
=	O
_xscript_done	function
;	O
sp	pointer
->	O
stream	pointer
.	O
seek	pointer
=	O
_xscript_seek	function
;	O
sp	pointer
->	O
stream	pointer
.	O
size	long
=	O
_xscript_size	function
;	O
sp	pointer
->	O
stream	pointer
.	O
ctl	pointer
=	O
_xscript_ctl	function
;	O
sp	pointer
->	O
stream	pointer
.	O
wait	pointer
=	O
_xscript_wait	function
;	O
sp	pointer
->	O
stream	pointer
.	O
truncate	pointer
=	O
_xscript_truncate	function
;	O
sp	pointer
->	O
stream	pointer
.	O
shutdown	pointer
=	O
_xscript_shutdown	function
;	O
sp	pointer
->	O
stream	pointer
.	O
error_string	pointer
=	O
_xscript_error_string	function
;	O
sp	pointer
->	O
stream	pointer
.	O
event_cb	pointer
=	O
_xscript_event_cb	function
;	O
sp	pointer
->	O
stream	pointer
.	O
event_mask	int
=	O
_MU_STR_EVMASK	O
(	O
_MU_STR_EVENT_FILLBUF	int
)	O
|	O
_MU_STR_EVMASK	O
(	O
_MU_STR_EVENT_FLUSHBUF	int
)	O
;	O
mu_stream_ref	function
(	O
transport	pointer
)	O
;	O
mu_stream_ref	function
(	O
logstr	pointer
)	O
;	O
sp	pointer
->	O
transport	pointer
=	O
transport	pointer
;	O
sp	pointer
->	O
logstr	pointer
=	O
logstr	pointer
;	O
if	O
(	O
prefix	array
)	O
{	O
sp	pointer
->	O
prefix	array
[	O
0	int
]	O
=	O
strdup	function
(	O
prefix	array
[	O
0	int
]	O
?	O
prefix	array
[	O
0	int
]	O
:	O
default_prefix	array
[	O
0	int
]	O
)	O
;	O
sp	pointer
->	O
prefix	array
[	O
1	int
]	O
=	O
strdup	function
(	O
prefix	array
[	O
1	int
]	O
?	O
prefix	array
[	O
1	int
]	O
:	O
default_prefix	array
[	O
1	int
]	O
)	O
;	O
}	O
else	O
{	O
sp	pointer
->	O
prefix	array
[	O
0	int
]	O
=	O
strdup	function
(	O
default_prefix	array
[	O
0	int
]	O
)	O
;	O
sp	pointer
->	O
prefix	array
[	O
1	int
]	O
=	O
strdup	function
(	O
default_prefix	array
[	O
1	int
]	O
)	O
;	O
}	O
if	O
(	O
sp	pointer
->	O
prefix	array
[	O
0	int
]	O
==	O
NULL	O
||	O
sp	pointer
->	O
prefix	array
[	O
1	int
]	O
==	O
0	int
)	O
{	O
free	function
(	O
sp	pointer
->	O
prefix	array
[	O
0	int
]	O
)	O
;	O
free	function
(	O
sp	pointer
->	O
prefix	array
[	O
1	int
]	O
)	O
;	O
free	function
(	O
sp	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
mu_stream_set_buffer	function
(	O
(	O
mu_stream_t	pointer
)	O
sp	pointer
,	O
mu_buffer_line	int
,	O
0	int
)	O
;	O
*	O
pref	pointer
=	O
(	O
mu_stream_t	pointer
)	O
sp	pointer
;	O
return	O
0	int
;	O
}	O
