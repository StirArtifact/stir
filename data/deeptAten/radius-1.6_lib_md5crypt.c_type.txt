static	O
unsigned	O
char	O
itoa64	array
[	O
]	O
=	O
"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"	pointer
;	O
static	O
void	O
to64	function
(	O
char	O
*	O
,	O
unsigned	O
long	O
,	O
int	O
)	O
;	O
static	O
void	O
to64	function
(	O
s	pointer
,	O
v	long
,	O
n	int
)	O
char	O
*	O
s	pointer
;	O
unsigned	O
long	O
v	long
;	O
int	O
n	int
;	O
{	O
while	O
(	O
--	O
n	int
>=	O
0	int
)	O
{	O
*	O
s	pointer
++	O
=	O
itoa64	array
[	O
v	long
&	O
0x3f	int
]	O
;	O
v	long
>>=	O
6	int
;	O
}	O
}	O
LOCK_DECLARE	O
(	O
lock	O
)	O
char	O
*	O
grad_md5crypt	function
(	O
const	O
char	O
*	O
pw	pointer
,	O
const	O
char	O
*	O
salt	pointer
,	O
char	O
*	O
passwd	pointer
,	O
size_t	long
size	long
)	O
{	O
static	O
char	O
magic	array
[	O
]	O
=	O
"$1$"	pointer
;	O
char	O
*	O
p	pointer
;	O
static	O
const	O
char	O
*	O
sp	pointer
,	O
*	O
ep	pointer
;	O
unsigned	O
char	O
final	array
[	O
16	int
]	O
;	O
int	O
sl	int
,	O
pl	int
,	O
i	int
;	O
MD5_CTX	struct
ctx	struct
,	O
ctx1	struct
;	O
unsigned	O
long	O
l	long
;	O
sp	pointer
=	O
salt	pointer
;	O
if	O
(	O
!	O
strncmp	function
(	O
sp	pointer
,	O
magic	array
,	O
strlen	function
(	O
magic	array
)	O
)	O
)	O
sp	pointer
+=	O
strlen	function
(	O
magic	array
)	O
;	O
else	O
{	O
LOCK_SET	O
(	O
lock	O
)	O
;	O
strncpy	function
(	O
passwd	pointer
,	O
crypt	function
(	O
pw	pointer
,	O
salt	pointer
)	O
,	O
size	long
)	O
;	O
LOCK_RELEASE	O
(	O
lock	O
)	O
;	O
return	O
passwd	pointer
;	O
}	O
for	O
(	O
ep	pointer
=	O
sp	pointer
;	O
*	O
ep	pointer
&&	O
*	O
ep	pointer
!=	O
'$'	O
&&	O
ep	pointer
<	O
(	O
sp	pointer
+	O
8	int
)	O
;	O
ep	pointer
++	O
)	O
continue	O
;	O
sl	int
=	O
ep	pointer
-	O
sp	pointer
;	O
if	O
(	O
sizeof	O
(	O
magic	array
)	O
+	O
sl	int
+	O
1	int
+	O
22	int
>	O
size	long
)	O
return	O
NULL	O
;	O
grad_MD5Init	function
(	O
&	O
ctx	struct
)	O
;	O
grad_MD5Update	function
(	O
&	O
ctx	struct
,	O
(	O
unsigned	O
char	O
*	O
)	O
pw	pointer
,	O
strlen	function
(	O
pw	pointer
)	O
)	O
;	O
grad_MD5Update	function
(	O
&	O
ctx	struct
,	O
(	O
unsigned	O
char	O
*	O
)	O
magic	array
,	O
strlen	function
(	O
magic	array
)	O
)	O
;	O
grad_MD5Update	function
(	O
&	O
ctx	struct
,	O
(	O
unsigned	O
char	O
*	O
)	O
sp	pointer
,	O
sl	int
)	O
;	O
grad_MD5Init	function
(	O
&	O
ctx1	struct
)	O
;	O
grad_MD5Update	function
(	O
&	O
ctx1	struct
,	O
(	O
unsigned	O
char	O
*	O
)	O
pw	pointer
,	O
strlen	function
(	O
pw	pointer
)	O
)	O
;	O
grad_MD5Update	function
(	O
&	O
ctx1	struct
,	O
(	O
unsigned	O
char	O
*	O
)	O
sp	pointer
,	O
sl	int
)	O
;	O
grad_MD5Update	function
(	O
&	O
ctx1	struct
,	O
(	O
unsigned	O
char	O
*	O
)	O
pw	pointer
,	O
strlen	function
(	O
pw	pointer
)	O
)	O
;	O
grad_MD5Final	function
(	O
final	array
,	O
&	O
ctx1	struct
)	O
;	O
for	O
(	O
pl	int
=	O
strlen	function
(	O
pw	pointer
)	O
;	O
pl	int
>	O
0	int
;	O
pl	int
-=	O
16	int
)	O
grad_MD5Update	function
(	O
&	O
ctx	struct
,	O
final	array
,	O
pl	int
>	O
16	int
?	O
16	int
:	O
pl	int
)	O
;	O
memset	function
(	O
final	array
,	O
0	int
,	O
sizeof	O
final	array
)	O
;	O
for	O
(	O
i	int
=	O
strlen	function
(	O
pw	pointer
)	O
;	O
i	int
;	O
i	int
>>=	O
1	int
)	O
if	O
(	O
i	int
&	O
1	int
)	O
grad_MD5Update	function
(	O
&	O
ctx	struct
,	O
final	array
,	O
1	int
)	O
;	O
else	O
grad_MD5Update	function
(	O
&	O
ctx	struct
,	O
(	O
unsigned	O
char	O
*	O
)	O
pw	pointer
,	O
1	int
)	O
;	O
strcpy	function
(	O
passwd	pointer
,	O
magic	array
)	O
;	O
strncat	function
(	O
passwd	pointer
,	O
sp	pointer
,	O
sl	int
)	O
;	O
strcat	function
(	O
passwd	pointer
,	O
"$"	pointer
)	O
;	O
grad_MD5Final	function
(	O
final	array
,	O
&	O
ctx	struct
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
1000	int
;	O
i	int
++	O
)	O
{	O
grad_MD5Init	function
(	O
&	O
ctx1	struct
)	O
;	O
if	O
(	O
i	int
&	O
1	int
)	O
grad_MD5Update	function
(	O
&	O
ctx1	struct
,	O
(	O
unsigned	O
char	O
*	O
)	O
pw	pointer
,	O
strlen	function
(	O
pw	pointer
)	O
)	O
;	O
else	O
grad_MD5Update	function
(	O
&	O
ctx1	struct
,	O
final	array
,	O
16	int
)	O
;	O
if	O
(	O
i	int
%	O
3	int
)	O
grad_MD5Update	function
(	O
&	O
ctx1	struct
,	O
(	O
unsigned	O
char	O
*	O
)	O
sp	pointer
,	O
sl	int
)	O
;	O
if	O
(	O
i	int
%	O
7	int
)	O
grad_MD5Update	function
(	O
&	O
ctx1	struct
,	O
(	O
unsigned	O
char	O
*	O
)	O
pw	pointer
,	O
strlen	function
(	O
pw	pointer
)	O
)	O
;	O
if	O
(	O
i	int
&	O
1	int
)	O
grad_MD5Update	function
(	O
&	O
ctx1	struct
,	O
final	array
,	O
16	int
)	O
;	O
else	O
grad_MD5Update	function
(	O
&	O
ctx1	struct
,	O
(	O
unsigned	O
char	O
*	O
)	O
pw	pointer
,	O
strlen	function
(	O
pw	pointer
)	O
)	O
;	O
grad_MD5Final	function
(	O
final	array
,	O
&	O
ctx1	struct
)	O
;	O
}	O
p	pointer
=	O
passwd	pointer
+	O
strlen	function
(	O
passwd	pointer
)	O
;	O
l	long
=	O
(	O
final	array
[	O
0	int
]	O
<<	O
16	int
)	O
|	O
(	O
final	array
[	O
6	int
]	O
<<	O
8	int
)	O
|	O
final	array
[	O
12	int
]	O
;	O
to64	function
(	O
p	pointer
,	O
l	long
,	O
4	int
)	O
;	O
p	pointer
+=	O
4	int
;	O
l	long
=	O
(	O
final	array
[	O
1	int
]	O
<<	O
16	int
)	O
|	O
(	O
final	array
[	O
7	int
]	O
<<	O
8	int
)	O
|	O
final	array
[	O
13	int
]	O
;	O
to64	function
(	O
p	pointer
,	O
l	long
,	O
4	int
)	O
;	O
p	pointer
+=	O
4	int
;	O
l	long
=	O
(	O
final	array
[	O
2	int
]	O
<<	O
16	int
)	O
|	O
(	O
final	array
[	O
8	int
]	O
<<	O
8	int
)	O
|	O
final	array
[	O
14	int
]	O
;	O
to64	function
(	O
p	pointer
,	O
l	long
,	O
4	int
)	O
;	O
p	pointer
+=	O
4	int
;	O
l	long
=	O
(	O
final	array
[	O
3	int
]	O
<<	O
16	int
)	O
|	O
(	O
final	array
[	O
9	int
]	O
<<	O
8	int
)	O
|	O
final	array
[	O
15	int
]	O
;	O
to64	function
(	O
p	pointer
,	O
l	long
,	O
4	int
)	O
;	O
p	pointer
+=	O
4	int
;	O
l	long
=	O
(	O
final	array
[	O
4	int
]	O
<<	O
16	int
)	O
|	O
(	O
final	array
[	O
10	int
]	O
<<	O
8	int
)	O
|	O
final	array
[	O
5	int
]	O
;	O
to64	function
(	O
p	pointer
,	O
l	long
,	O
4	int
)	O
;	O
p	pointer
+=	O
4	int
;	O
l	long
=	O
final	array
[	O
11	int
]	O
;	O
to64	function
(	O
p	pointer
,	O
l	long
,	O
2	int
)	O
;	O
p	pointer
+=	O
2	int
;	O
*	O
p	pointer
=	O
'\0'	O
;	O
memset	function
(	O
final	array
,	O
0	int
,	O
sizeof	O
final	array
)	O
;	O
return	O
passwd	pointer
;	O
}	O
