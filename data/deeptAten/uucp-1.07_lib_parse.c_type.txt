const	O
char	O
parse_rcsid	array
[	O
]	O
=	O
"$Id: parse.c,v 1.11 2002/03/05 19:10:42 ian Rel $"	pointer
;	O
static	O
void	O
ulunquote_cmd	function
P	O
(	O
(	O
struct	O
scmd	struct
*	O
qcmd	pointer
)	O
)	O
;	O
boolean	int
fparse_cmd	function
(	O
zcmd	pointer
,	O
qcmd	pointer
)	O
char	O
*	O
zcmd	pointer
;	O
struct	O
scmd	struct
*	O
qcmd	pointer
;	O
{	O
char	O
*	O
z	pointer
,	O
*	O
zend	pointer
;	O
z	pointer
=	O
strtok	function
(	O
zcmd	pointer
,	O
" \t\n"	pointer
)	O
;	O
if	O
(	O
z	pointer
==	O
NULL	O
)	O
return	O
FALSE	O
;	O
qcmd	pointer
->	O
bcmd	char
=	O
*	O
z	pointer
;	O
if	O
(	O
qcmd	pointer
->	O
bcmd	char
!=	O
'S'	O
&&	O
qcmd	pointer
->	O
bcmd	char
!=	O
'R'	O
&&	O
qcmd	pointer
->	O
bcmd	char
!=	O
'X'	O
&&	O
qcmd	pointer
->	O
bcmd	char
!=	O
'E'	O
&&	O
qcmd	pointer
->	O
bcmd	char
!=	O
'H'	O
&&	O
qcmd	pointer
->	O
bcmd	char
!=	O
'P'	O
)	O
return	O
FALSE	O
;	O
qcmd	pointer
->	O
bgrade	char
=	O
'\0'	O
;	O
qcmd	pointer
->	O
pseq	pointer
=	O
NULL	O
;	O
qcmd	pointer
->	O
zfrom	pointer
=	O
NULL	O
;	O
qcmd	pointer
->	O
zto	pointer
=	O
NULL	O
;	O
qcmd	pointer
->	O
zuser	pointer
=	O
NULL	O
;	O
qcmd	pointer
->	O
zoptions	pointer
=	O
NULL	O
;	O
qcmd	pointer
->	O
ztemp	pointer
=	O
NULL	O
;	O
qcmd	pointer
->	O
imode	int
=	O
0666	int
;	O
qcmd	pointer
->	O
znotify	pointer
=	O
NULL	O
;	O
qcmd	pointer
->	O
cbytes	long
=	O
-	O
1	int
;	O
qcmd	pointer
->	O
zcmd	pointer
=	O
NULL	O
;	O
qcmd	pointer
->	O
ipos	long
=	O
0	int
;	O
if	O
(	O
qcmd	pointer
->	O
bcmd	char
==	O
'H'	O
)	O
{	O
if	O
(	O
z	pointer
[	O
1	int
]	O
!=	O
'\0'	O
)	O
{	O
if	O
(	O
z	pointer
[	O
1	int
]	O
==	O
'Y'	O
)	O
qcmd	pointer
->	O
bcmd	char
=	O
'Y'	O
;	O
else	O
if	O
(	O
z	pointer
[	O
1	int
]	O
==	O
'N'	O
)	O
qcmd	pointer
->	O
bcmd	char
=	O
'N'	O
;	O
else	O
return	O
FALSE	O
;	O
}	O
return	O
TRUE	O
;	O
}	O
if	O
(	O
qcmd	pointer
->	O
bcmd	char
==	O
'P'	O
)	O
return	O
TRUE	O
;	O
if	O
(	O
z	pointer
[	O
1	int
]	O
!=	O
'\0'	O
)	O
return	O
FALSE	O
;	O
z	pointer
=	O
strtok	function
(	O
(	O
char	O
*	O
)	O
NULL	O
,	O
" \t\n"	pointer
)	O
;	O
if	O
(	O
z	pointer
==	O
NULL	O
)	O
return	O
FALSE	O
;	O
qcmd	pointer
->	O
zfrom	pointer
=	O
z	pointer
;	O
z	pointer
=	O
strtok	function
(	O
(	O
char	O
*	O
)	O
NULL	O
,	O
" \t\n"	pointer
)	O
;	O
if	O
(	O
z	pointer
==	O
NULL	O
)	O
return	O
FALSE	O
;	O
qcmd	pointer
->	O
zto	pointer
=	O
z	pointer
;	O
z	pointer
=	O
strtok	function
(	O
(	O
char	O
*	O
)	O
NULL	O
,	O
" \t\n"	pointer
)	O
;	O
if	O
(	O
z	pointer
==	O
NULL	O
)	O
return	O
FALSE	O
;	O
qcmd	pointer
->	O
zuser	pointer
=	O
z	pointer
;	O
z	pointer
=	O
strtok	function
(	O
(	O
char	O
*	O
)	O
NULL	O
,	O
" \t\n"	pointer
)	O
;	O
if	O
(	O
z	pointer
==	O
NULL	O
||	O
*	O
z	pointer
!=	O
'-'	O
)	O
return	O
FALSE	O
;	O
qcmd	pointer
->	O
zoptions	pointer
=	O
z	pointer
+	O
1	int
;	O
if	O
(	O
qcmd	pointer
->	O
bcmd	char
==	O
'X'	O
)	O
{	O
ulunquote_cmd	function
(	O
qcmd	pointer
)	O
;	O
return	O
TRUE	O
;	O
}	O
if	O
(	O
qcmd	pointer
->	O
bcmd	char
==	O
'R'	O
)	O
{	O
z	pointer
=	O
strtok	function
(	O
(	O
char	O
*	O
)	O
NULL	O
,	O
" \t\n"	pointer
)	O
;	O
if	O
(	O
z	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
z	pointer
,	O
"dummy"	pointer
)	O
!=	O
0	int
)	O
{	O
qcmd	pointer
->	O
cbytes	long
=	O
strtol	function
(	O
z	pointer
,	O
&	O
zend	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
zend	pointer
!=	O
'\0'	O
)	O
qcmd	pointer
->	O
cbytes	long
=	O
-	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
strtok	function
(	O
(	O
char	O
*	O
)	O
NULL	O
,	O
" \t\n"	pointer
)	O
!=	O
NULL	O
&&	O
strtok	function
(	O
(	O
char	O
*	O
)	O
NULL	O
,	O
" \t\n"	pointer
)	O
!=	O
NULL	O
&&	O
strtok	function
(	O
(	O
char	O
*	O
)	O
NULL	O
,	O
" \t\n"	pointer
)	O
!=	O
NULL	O
)	O
{	O
z	pointer
=	O
strtok	function
(	O
(	O
char	O
*	O
)	O
NULL	O
,	O
" \t\n"	pointer
)	O
;	O
if	O
(	O
z	pointer
!=	O
NULL	O
)	O
{	O
qcmd	pointer
->	O
ipos	long
=	O
strtol	function
(	O
z	pointer
,	O
&	O
zend	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
zend	pointer
!=	O
'\0'	O
)	O
qcmd	pointer
->	O
ipos	long
=	O
0	int
;	O
}	O
}	O
}	O
}	O
ulunquote_cmd	function
(	O
qcmd	pointer
)	O
;	O
return	O
TRUE	O
;	O
}	O
z	pointer
=	O
strtok	function
(	O
(	O
char	O
*	O
)	O
NULL	O
,	O
" \t\n"	pointer
)	O
;	O
if	O
(	O
z	pointer
==	O
NULL	O
)	O
return	O
FALSE	O
;	O
qcmd	pointer
->	O
ztemp	pointer
=	O
z	pointer
;	O
z	pointer
=	O
strtok	function
(	O
(	O
char	O
*	O
)	O
NULL	O
,	O
" \t\n"	pointer
)	O
;	O
if	O
(	O
z	pointer
==	O
NULL	O
)	O
return	O
FALSE	O
;	O
qcmd	pointer
->	O
imode	int
=	O
(	O
int	O
)	O
strtol	function
(	O
z	pointer
,	O
&	O
zend	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
zend	pointer
!=	O
'\0'	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
qcmd	pointer
->	O
imode	int
==	O
666	int
)	O
qcmd	pointer
->	O
imode	int
=	O
0666	int
;	O
else	O
if	O
(	O
qcmd	pointer
->	O
imode	int
==	O
777	int
)	O
qcmd	pointer
->	O
imode	int
=	O
0777	int
;	O
z	pointer
=	O
strtok	function
(	O
(	O
char	O
*	O
)	O
NULL	O
,	O
" \t\n"	pointer
)	O
;	O
if	O
(	O
qcmd	pointer
->	O
bcmd	char
==	O
'E'	O
&&	O
z	pointer
==	O
NULL	O
)	O
return	O
FALSE	O
;	O
qcmd	pointer
->	O
znotify	pointer
=	O
z	pointer
;	O
if	O
(	O
z	pointer
!=	O
NULL	O
&&	O
strcmp	function
(	O
z	pointer
,	O
"dummy"	pointer
)	O
==	O
0	int
)	O
z	pointer
=	O
strtok	function
(	O
(	O
char	O
*	O
)	O
NULL	O
,	O
" \t\n"	pointer
)	O
;	O
if	O
(	O
z	pointer
!=	O
NULL	O
)	O
{	O
z	pointer
=	O
strtok	function
(	O
(	O
char	O
*	O
)	O
NULL	O
,	O
" \t\n"	pointer
)	O
;	O
if	O
(	O
z	pointer
!=	O
NULL	O
)	O
{	O
qcmd	pointer
->	O
cbytes	long
=	O
strtol	function
(	O
z	pointer
,	O
&	O
zend	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
zend	pointer
!=	O
'\0'	O
)	O
qcmd	pointer
->	O
cbytes	long
=	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
qcmd	pointer
->	O
bcmd	char
==	O
'E'	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
z	pointer
!=	O
NULL	O
)	O
{	O
z	pointer
=	O
strtok	function
(	O
(	O
char	O
*	O
)	O
NULL	O
,	O
""	pointer
)	O
;	O
if	O
(	O
z	pointer
!=	O
NULL	O
)	O
z	pointer
[	O
strcspn	function
(	O
z	pointer
,	O
"\n"	pointer
)	O
]	O
=	O
'\0'	O
;	O
if	O
(	O
qcmd	pointer
->	O
bcmd	char
==	O
'E'	O
&&	O
z	pointer
==	O
NULL	O
)	O
return	O
FALSE	O
;	O
qcmd	pointer
->	O
zcmd	pointer
=	O
z	pointer
;	O
}	O
}	O
ulunquote_cmd	function
(	O
qcmd	pointer
)	O
;	O
return	O
TRUE	O
;	O
}	O
static	O
void	O
ulunquote_cmd	function
(	O
qcmd	pointer
)	O
struct	O
scmd	struct
*	O
qcmd	pointer
;	O
{	O
if	O
(	O
qcmd	pointer
->	O
zoptions	pointer
==	O
NULL	O
||	O
strchr	function
(	O
qcmd	pointer
->	O
zoptions	pointer
,	O
'q'	O
)	O
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
qcmd	pointer
->	O
zfrom	pointer
!=	O
NULL	O
)	O
(	O
void	O
)	O
cescape	function
(	O
(	O
char	O
*	O
)	O
qcmd	pointer
->	O
zfrom	pointer
)	O
;	O
if	O
(	O
qcmd	pointer
->	O
zto	pointer
!=	O
NULL	O
)	O
(	O
void	O
)	O
cescape	function
(	O
(	O
char	O
*	O
)	O
qcmd	pointer
->	O
zto	pointer
)	O
;	O
if	O
(	O
qcmd	pointer
->	O
zuser	pointer
!=	O
NULL	O
)	O
(	O
void	O
)	O
cescape	function
(	O
(	O
char	O
*	O
)	O
qcmd	pointer
->	O
zuser	pointer
)	O
;	O
if	O
(	O
qcmd	pointer
->	O
znotify	pointer
!=	O
NULL	O
)	O
(	O
void	O
)	O
cescape	function
(	O
(	O
char	O
*	O
)	O
qcmd	pointer
->	O
znotify	pointer
)	O
;	O
if	O
(	O
qcmd	pointer
->	O
zcmd	pointer
!=	O
NULL	O
)	O
(	O
void	O
)	O
cescape	function
(	O
(	O
char	O
*	O
)	O
qcmd	pointer
->	O
zcmd	pointer
)	O
;	O
}	O
