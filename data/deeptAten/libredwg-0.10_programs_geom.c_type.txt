void	O
normalize	function
(	O
BITCODE_3DPOINT	struct
*	O
out	pointer
,	O
BITCODE_3DPOINT	struct
pt	array
)	O
{	O
double	O
l	double
=	O
sqrt	function
(	O
(	O
pt	array
.	O
x	double
*	O
pt	array
.	O
x	double
)	O
+	O
(	O
pt	array
.	O
y	double
*	O
pt	array
.	O
y	double
)	O
+	O
(	O
pt	array
.	O
z	double
*	O
pt	array
.	O
z	double
)	O
)	O
;	O
*	O
out	pointer
=	O
pt	array
;	O
if	O
(	O
l	double
!=	O
1.0	int
&&	O
l	double
!=	O
0.0	int
)	O
{	O
out	pointer
->	O
x	double
=	O
pt	array
.	O
x	double
/	O
l	double
;	O
out	pointer
->	O
y	double
=	O
pt	array
.	O
y	double
/	O
l	double
;	O
out	pointer
->	O
z	double
=	O
pt	array
.	O
z	double
/	O
l	double
;	O
}	O
}	O
void	O
cross	function
(	O
BITCODE_3DPOINT	struct
*	O
out	pointer
,	O
BITCODE_3DPOINT	struct
pt1	struct
,	O
BITCODE_3DPOINT	struct
pt2	struct
)	O
{	O
out	pointer
->	O
x	double
=	O
pt1	struct
.	O
y	double
*	O
pt2	struct
.	O
z	double
-	O
pt1	struct
.	O
z	double
*	O
pt2	struct
.	O
y	double
;	O
out	pointer
->	O
y	double
=	O
pt1	struct
.	O
z	double
*	O
pt2	struct
.	O
x	double
-	O
pt1	struct
.	O
x	double
*	O
pt2	struct
.	O
z	double
;	O
out	pointer
->	O
z	double
=	O
pt1	struct
.	O
x	double
*	O
pt2	struct
.	O
y	double
-	O
pt1	struct
.	O
y	double
*	O
pt2	struct
.	O
x	double
;	O
}	O
void	O
transform_OCS_2d	function
(	O
BITCODE_2DPOINT	struct
*	O
out	pointer
,	O
BITCODE_2DPOINT	struct
pt	array
,	O
BITCODE_BE	struct
ext	struct
)	O
{	O
if	O
(	O
ext	struct
.	O
x	double
==	O
0.0	int
&&	O
ext	struct
.	O
y	double
==	O
0.0	int
&&	O
ext	struct
.	O
z	double
==	O
1.0	int
)	O
{	O
*	O
out	pointer
=	O
pt	array
;	O
}	O
else	O
if	O
(	O
ext	struct
.	O
x	double
==	O
0.0	int
&&	O
ext	struct
.	O
y	double
==	O
0.0	int
&&	O
ext	struct
.	O
z	double
==	O
-	O
1.0	int
)	O
{	O
*	O
out	pointer
=	O
pt	array
;	O
out	pointer
->	O
x	double
=	O
-	O
out	pointer
->	O
x	double
;	O
}	O
else	O
{	O
BITCODE_3DPOINT	struct
ax	struct
,	O
ay	struct
,	O
az	struct
,	O
be	struct
;	O
be	struct
=	O
(	O
BITCODE_3DPOINT	struct
)	O
ext	struct
;	O
normalize	function
(	O
&	O
az	struct
,	O
be	struct
)	O
;	O
if	O
(	O
(	O
fabs	function
(	O
az	struct
.	O
x	double
)	O
<	O
1	int
/	O
64.0	int
)	O
&&	O
(	O
fabs	function
(	O
az	struct
.	O
y	double
)	O
<	O
1	int
/	O
64.0	int
)	O
)	O
{	O
BITCODE_3DPOINT	struct
tmp	struct
=	O
{	O
0.0	int
,	O
1.0	int
,	O
0.0	int
}	O
;	O
cross	function
(	O
&	O
tmp	struct
,	O
tmp	struct
,	O
az	struct
)	O
;	O
normalize	function
(	O
&	O
ax	struct
,	O
tmp	struct
)	O
;	O
}	O
else	O
{	O
BITCODE_3DPOINT	struct
tmp	struct
=	O
{	O
0.0	int
,	O
0.0	int
,	O
1.0	int
}	O
;	O
cross	function
(	O
&	O
tmp	struct
,	O
tmp	struct
,	O
az	struct
)	O
;	O
normalize	function
(	O
&	O
ax	struct
,	O
tmp	struct
)	O
;	O
}	O
cross	function
(	O
&	O
ay	struct
,	O
az	struct
,	O
ax	struct
)	O
;	O
normalize	function
(	O
&	O
ay	struct
,	O
ay	struct
)	O
;	O
out	pointer
->	O
x	double
=	O
pt	array
.	O
x	double
*	O
ax	struct
.	O
x	double
+	O
pt	array
.	O
y	double
*	O
ax	struct
.	O
y	double
;	O
out	pointer
->	O
y	double
=	O
pt	array
.	O
x	double
*	O
ay	struct
.	O
x	double
+	O
pt	array
.	O
y	double
*	O
ay	struct
.	O
y	double
;	O
}	O
return	O
;	O
}	O
void	O
transform_OCS	function
(	O
BITCODE_3DPOINT	struct
*	O
out	pointer
,	O
BITCODE_3DPOINT	struct
pt	array
,	O
BITCODE_BE	struct
ext	struct
)	O
{	O
if	O
(	O
ext	struct
.	O
x	double
==	O
0.0	int
&&	O
ext	struct
.	O
y	double
==	O
0.0	int
&&	O
ext	struct
.	O
z	double
==	O
1.0	int
)	O
{	O
*	O
out	pointer
=	O
pt	array
;	O
}	O
else	O
if	O
(	O
ext	struct
.	O
x	double
==	O
0.0	int
&&	O
ext	struct
.	O
y	double
==	O
0.0	int
&&	O
ext	struct
.	O
z	double
==	O
-	O
1.0	int
)	O
{	O
*	O
out	pointer
=	O
pt	array
;	O
out	pointer
->	O
x	double
=	O
-	O
out	pointer
->	O
x	double
;	O
}	O
else	O
{	O
BITCODE_3DPOINT	struct
ax	struct
,	O
ay	struct
,	O
az	struct
,	O
be	struct
;	O
be	struct
=	O
(	O
BITCODE_3DPOINT	struct
)	O
ext	struct
;	O
normalize	function
(	O
&	O
az	struct
,	O
be	struct
)	O
;	O
if	O
(	O
(	O
fabs	function
(	O
az	struct
.	O
x	double
)	O
<	O
1	int
/	O
64.0	int
)	O
&&	O
(	O
fabs	function
(	O
az	struct
.	O
y	double
)	O
<	O
1	int
/	O
64.0	int
)	O
)	O
{	O
BITCODE_3DPOINT	struct
tmp	struct
=	O
{	O
0.0	int
,	O
1.0	int
,	O
0.0	int
}	O
;	O
cross	function
(	O
&	O
tmp	struct
,	O
tmp	struct
,	O
az	struct
)	O
;	O
normalize	function
(	O
&	O
ax	struct
,	O
tmp	struct
)	O
;	O
}	O
else	O
{	O
BITCODE_3DPOINT	struct
tmp	struct
=	O
{	O
0.0	int
,	O
0.0	int
,	O
1.0	int
}	O
;	O
cross	function
(	O
&	O
tmp	struct
,	O
tmp	struct
,	O
az	struct
)	O
;	O
normalize	function
(	O
&	O
ax	struct
,	O
tmp	struct
)	O
;	O
}	O
cross	function
(	O
&	O
ay	struct
,	O
az	struct
,	O
ax	struct
)	O
;	O
normalize	function
(	O
&	O
ay	struct
,	O
ay	struct
)	O
;	O
out	pointer
->	O
x	double
=	O
pt	array
.	O
x	double
*	O
ax	struct
.	O
x	double
+	O
pt	array
.	O
y	double
*	O
ax	struct
.	O
y	double
+	O
pt	array
.	O
z	double
*	O
ax	struct
.	O
z	double
;	O
out	pointer
->	O
y	double
=	O
pt	array
.	O
x	double
*	O
ay	struct
.	O
x	double
+	O
pt	array
.	O
y	double
*	O
ay	struct
.	O
y	double
+	O
pt	array
.	O
z	double
*	O
ay	struct
.	O
z	double
;	O
out	pointer
->	O
z	double
=	O
pt	array
.	O
x	double
*	O
az	struct
.	O
x	double
+	O
pt	array
.	O
y	double
*	O
az	struct
.	O
y	double
+	O
pt	array
.	O
z	double
*	O
az	struct
.	O
z	double
;	O
}	O
return	O
;	O
}	O
