static	O
bfd_boolean	int
decompress_contents	function
(	O
bfd_byte	char
*	O
compressed_buffer	pointer
,	O
bfd_size_type	long
compressed_size	long
,	O
bfd_byte	char
*	O
uncompressed_buffer	pointer
,	O
bfd_size_type	long
uncompressed_size	pointer
)	O
{	O
z_stream	struct
strm	pointer
;	O
int	O
rc	int
;	O
memset	function
(	O
&	O
strm	pointer
,	O
0	int
,	O
sizeof	O
strm	pointer
)	O
;	O
strm	pointer
.	O
avail_in	int
=	O
compressed_size	long
;	O
strm	pointer
.	O
next_in	pointer
=	O
(	O
Bytef	char
*	O
)	O
compressed_buffer	pointer
;	O
strm	pointer
.	O
avail_out	int
=	O
uncompressed_size	pointer
;	O
BFD_ASSERT	O
(	O
Z_OK	int
==	O
0	int
)	O
;	O
rc	int
=	O
inflateInit	O
(	O
&	O
strm	pointer
)	O
;	O
while	O
(	O
strm	pointer
.	O
avail_in	int
>	O
0	int
&&	O
strm	pointer
.	O
avail_out	int
>	O
0	int
)	O
{	O
if	O
(	O
rc	int
!=	O
Z_OK	int
)	O
break	O
;	O
strm	pointer
.	O
next_out	pointer
=	O
(	O
(	O
Bytef	char
*	O
)	O
uncompressed_buffer	pointer
+	O
(	O
uncompressed_size	pointer
-	O
strm	pointer
.	O
avail_out	int
)	O
)	O
;	O
rc	int
=	O
inflate	function
(	O
&	O
strm	pointer
,	O
Z_FINISH	int
)	O
;	O
if	O
(	O
rc	int
!=	O
Z_STREAM_END	int
)	O
break	O
;	O
rc	int
=	O
inflateReset	function
(	O
&	O
strm	pointer
)	O
;	O
}	O
rc	int
|=	O
inflateEnd	function
(	O
&	O
strm	pointer
)	O
;	O
return	O
rc	int
==	O
Z_OK	int
&&	O
strm	pointer
.	O
avail_out	int
==	O
0	int
;	O
}	O
static	O
bfd_size_type	long
bfd_compress_section_contents	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
sec_ptr	pointer
sec	pointer
,	O
bfd_byte	char
*	O
uncompressed_buffer	pointer
,	O
bfd_size_type	long
uncompressed_size	pointer
)	O
{	O
uLong	long
compressed_size	long
;	O
bfd_byte	char
*	O
buffer	pointer
;	O
bfd_size_type	long
buffer_size	long
;	O
bfd_boolean	int
decompress	int
;	O
int	O
zlib_size	int
=	O
0	int
;	O
int	O
orig_compression_header_size	int
;	O
bfd_size_type	long
orig_uncompressed_size	long
;	O
unsigned	O
int	O
orig_uncompressed_alignment_pow	int
;	O
int	O
header_size	int
=	O
bfd_get_compression_header_size	function
(	O
abfd	pointer
,	O
NULL	O
)	O
;	O
bfd_boolean	int
compressed	int
=	O
bfd_is_section_compressed_with_header	function
(	O
abfd	pointer
,	O
sec	pointer
,	O
&	O
orig_compression_header_size	int
,	O
&	O
orig_uncompressed_size	long
,	O
&	O
orig_uncompressed_alignment_pow	int
)	O
;	O
if	O
(	O
!	O
header_size	int
)	O
header_size	int
=	O
12	int
;	O
if	O
(	O
compressed	int
)	O
{	O
if	O
(	O
orig_compression_header_size	int
<	O
0	int
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
orig_compression_header_size	int
==	O
0	int
)	O
{	O
orig_compression_header_size	int
=	O
12	int
;	O
zlib_size	int
=	O
uncompressed_size	pointer
-	O
12	int
;	O
}	O
else	O
{	O
zlib_size	int
=	O
uncompressed_size	pointer
-	O
orig_compression_header_size	int
;	O
}	O
compressed_size	long
=	O
zlib_size	int
+	O
header_size	int
;	O
}	O
else	O
compressed_size	long
=	O
compressBound	function
(	O
uncompressed_size	pointer
)	O
+	O
header_size	int
;	O
if	O
(	O
compressed	int
&&	O
compressed_size	long
>	O
orig_uncompressed_size	long
)	O
{	O
decompress	int
=	O
TRUE	int
;	O
buffer_size	long
=	O
orig_uncompressed_size	long
;	O
}	O
else	O
{	O
decompress	int
=	O
FALSE	int
;	O
buffer_size	long
=	O
compressed_size	long
;	O
}	O
buffer	pointer
=	O
(	O
bfd_byte	char
*	O
)	O
bfd_alloc	function
(	O
abfd	pointer
,	O
buffer_size	long
)	O
;	O
if	O
(	O
buffer	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
if	O
(	O
compressed	int
)	O
{	O
sec	pointer
->	O
size	long
=	O
orig_uncompressed_size	long
;	O
if	O
(	O
decompress	int
)	O
{	O
if	O
(	O
!	O
decompress_contents	function
(	O
uncompressed_buffer	pointer
+	O
orig_compression_header_size	int
,	O
zlib_size	int
,	O
buffer	pointer
,	O
buffer_size	long
)	O
)	O
{	O
bfd_set_error	function
(	O
bfd_error_bad_value	int
)	O
;	O
bfd_release	function
(	O
abfd	pointer
,	O
buffer	pointer
)	O
;	O
return	O
0	int
;	O
}	O
free	function
(	O
uncompressed_buffer	pointer
)	O
;	O
bfd_set_section_alignment	function
(	O
sec	pointer
,	O
orig_uncompressed_alignment_pow	int
)	O
;	O
sec	pointer
->	O
contents	pointer
=	O
buffer	pointer
;	O
sec	pointer
->	O
compress_status	int
=	O
COMPRESS_SECTION_DONE	int
;	O
return	O
orig_uncompressed_size	long
;	O
}	O
else	O
{	O
bfd_update_compression_header	function
(	O
abfd	pointer
,	O
buffer	pointer
,	O
sec	pointer
)	O
;	O
memmove	function
(	O
buffer	pointer
+	O
header_size	int
,	O
uncompressed_buffer	pointer
+	O
orig_compression_header_size	int
,	O
zlib_size	int
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
compress	function
(	O
(	O
Bytef	char
*	O
)	O
buffer	pointer
+	O
header_size	int
,	O
&	O
compressed_size	long
,	O
(	O
const	O
Bytef	char
*	O
)	O
uncompressed_buffer	pointer
,	O
uncompressed_size	pointer
)	O
!=	O
Z_OK	int
)	O
{	O
bfd_release	function
(	O
abfd	pointer
,	O
buffer	pointer
)	O
;	O
bfd_set_error	function
(	O
bfd_error_bad_value	int
)	O
;	O
return	O
0	int
;	O
}	O
compressed_size	long
+=	O
header_size	int
;	O
if	O
(	O
compressed_size	long
<	O
uncompressed_size	pointer
)	O
bfd_update_compression_header	function
(	O
abfd	pointer
,	O
buffer	pointer
,	O
sec	pointer
)	O
;	O
else	O
{	O
bfd_release	function
(	O
abfd	pointer
,	O
buffer	pointer
)	O
;	O
sec	pointer
->	O
contents	pointer
=	O
uncompressed_buffer	pointer
;	O
sec	pointer
->	O
compress_status	int
=	O
COMPRESS_SECTION_NONE	int
;	O
return	O
uncompressed_size	pointer
;	O
}	O
}	O
free	function
(	O
uncompressed_buffer	pointer
)	O
;	O
sec	pointer
->	O
contents	pointer
=	O
buffer	pointer
;	O
sec	pointer
->	O
size	long
=	O
compressed_size	long
;	O
sec	pointer
->	O
compress_status	int
=	O
COMPRESS_SECTION_DONE	int
;	O
return	O
uncompressed_size	pointer
;	O
}	O
bfd_boolean	int
bfd_get_full_section_contents	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
sec_ptr	pointer
sec	pointer
,	O
bfd_byte	char
*	O
*	O
ptr	pointer
)	O
{	O
bfd_size_type	long
sz	long
;	O
bfd_byte	char
*	O
p	pointer
=	O
*	O
ptr	pointer
;	O
bfd_boolean	int
ret	pointer
;	O
bfd_size_type	long
save_size	long
;	O
bfd_size_type	long
save_rawsize	long
;	O
bfd_byte	char
*	O
compressed_buffer	pointer
;	O
unsigned	O
int	O
compression_header_size	int
;	O
if	O
(	O
abfd	pointer
->	O
direction	enum
!=	O
write_direction	int
&&	O
sec	pointer
->	O
rawsize	long
!=	O
0	int
)	O
sz	long
=	O
sec	pointer
->	O
rawsize	long
;	O
else	O
sz	long
=	O
sec	pointer
->	O
size	long
;	O
if	O
(	O
sz	long
==	O
0	int
)	O
{	O
*	O
ptr	pointer
=	O
NULL	O
;	O
return	O
TRUE	int
;	O
}	O
switch	O
(	O
sec	pointer
->	O
compress_status	int
)	O
{	O
case	O
COMPRESS_SECTION_NONE	int
:	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
{	O
ufile_ptr	long
filesize	long
=	O
bfd_get_file_size	function
(	O
abfd	pointer
)	O
;	O
if	O
(	O
filesize	long
>	O
0	int
&&	O
filesize	long
<	O
sz	long
&&	O
(	O
bfd_section_flags	function
(	O
sec	pointer
)	O
&	O
SEC_LINKER_CREATED	int
)	O
==	O
0	int
&&	O
bfd_get_flavour	function
(	O
abfd	pointer
)	O
!=	O
bfd_target_mmo_flavour	int
)	O
{	O
bfd_set_error	function
(	O
bfd_error_no_memory	int
)	O
;	O
_bfd_error_handler	function
(	O
_	O
(	O
"error: %pB(%pA) section size (%#"	pointer
PRIx64	O
" bytes) is larger than file size (%#"	pointer
PRIx64	O
" bytes)"	pointer
)	O
,	O
abfd	pointer
,	O
sec	pointer
,	O
(	O
uint64_t	long
)	O
sz	long
,	O
(	O
uint64_t	long
)	O
filesize	long
)	O
;	O
return	O
FALSE	int
;	O
}	O
p	pointer
=	O
(	O
bfd_byte	char
*	O
)	O
bfd_malloc	function
(	O
sz	long
)	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
bfd_get_error	function
(	O
)	O
==	O
bfd_error_no_memory	int
)	O
_bfd_error_handler	function
(	O
_	O
(	O
"error: %pB(%pA) is too large (%#"	pointer
PRIx64	O
" bytes)"	pointer
)	O
,	O
abfd	pointer
,	O
sec	pointer
,	O
(	O
uint64_t	long
)	O
sz	long
)	O
;	O
return	O
FALSE	int
;	O
}	O
}	O
if	O
(	O
!	O
bfd_get_section_contents	function
(	O
abfd	pointer
,	O
sec	pointer
,	O
p	pointer
,	O
0	int
,	O
sz	long
)	O
)	O
{	O
if	O
(	O
*	O
ptr	pointer
!=	O
p	pointer
)	O
free	function
(	O
p	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
*	O
ptr	pointer
=	O
p	pointer
;	O
return	O
TRUE	int
;	O
case	O
DECOMPRESS_SECTION_SIZED	int
:	O
compressed_buffer	pointer
=	O
(	O
bfd_byte	char
*	O
)	O
bfd_malloc	function
(	O
sec	pointer
->	O
compressed_size	long
)	O
;	O
if	O
(	O
compressed_buffer	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
save_rawsize	long
=	O
sec	pointer
->	O
rawsize	long
;	O
save_size	long
=	O
sec	pointer
->	O
size	long
;	O
sec	pointer
->	O
rawsize	long
=	O
0	int
;	O
sec	pointer
->	O
size	long
=	O
sec	pointer
->	O
compressed_size	long
;	O
sec	pointer
->	O
compress_status	int
=	O
COMPRESS_SECTION_NONE	int
;	O
ret	pointer
=	O
bfd_get_section_contents	function
(	O
abfd	pointer
,	O
sec	pointer
,	O
compressed_buffer	pointer
,	O
0	int
,	O
sec	pointer
->	O
compressed_size	long
)	O
;	O
sec	pointer
->	O
rawsize	long
=	O
save_rawsize	long
;	O
sec	pointer
->	O
size	long
=	O
save_size	long
;	O
sec	pointer
->	O
compress_status	int
=	O
DECOMPRESS_SECTION_SIZED	int
;	O
if	O
(	O
!	O
ret	pointer
)	O
goto	O
fail_compressed	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
p	pointer
=	O
(	O
bfd_byte	char
*	O
)	O
bfd_malloc	function
(	O
sz	long
)	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
goto	O
fail_compressed	O
;	O
compression_header_size	int
=	O
bfd_get_compression_header_size	function
(	O
abfd	pointer
,	O
sec	pointer
)	O
;	O
if	O
(	O
compression_header_size	int
==	O
0	int
)	O
compression_header_size	int
=	O
12	int
;	O
if	O
(	O
!	O
decompress_contents	function
(	O
compressed_buffer	pointer
+	O
compression_header_size	int
,	O
sec	pointer
->	O
compressed_size	long
-	O
compression_header_size	int
,	O
p	pointer
,	O
sz	long
)	O
)	O
{	O
bfd_set_error	function
(	O
bfd_error_bad_value	int
)	O
;	O
if	O
(	O
p	pointer
!=	O
*	O
ptr	pointer
)	O
free	function
(	O
p	pointer
)	O
;	O
fail_compressed	O
:	O
free	function
(	O
compressed_buffer	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
free	function
(	O
compressed_buffer	pointer
)	O
;	O
*	O
ptr	pointer
=	O
p	pointer
;	O
return	O
TRUE	int
;	O
case	O
COMPRESS_SECTION_DONE	int
:	O
if	O
(	O
sec	pointer
->	O
contents	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
{	O
p	pointer
=	O
(	O
bfd_byte	char
*	O
)	O
bfd_malloc	function
(	O
sz	long
)	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
*	O
ptr	pointer
=	O
p	pointer
;	O
}	O
if	O
(	O
p	pointer
!=	O
sec	pointer
->	O
contents	pointer
)	O
memcpy	function
(	O
p	pointer
,	O
sec	pointer
->	O
contents	pointer
,	O
sz	long
)	O
;	O
return	O
TRUE	int
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
void	O
bfd_cache_section_contents	function
(	O
asection	struct
*	O
sec	pointer
,	O
void	O
*	O
contents	pointer
)	O
{	O
if	O
(	O
sec	pointer
->	O
compress_status	int
==	O
DECOMPRESS_SECTION_SIZED	int
)	O
sec	pointer
->	O
compress_status	int
=	O
COMPRESS_SECTION_DONE	int
;	O
sec	pointer
->	O
contents	pointer
=	O
contents	pointer
;	O
sec	pointer
->	O
flags	int
|=	O
SEC_IN_MEMORY	int
;	O
}	O
bfd_boolean	int
bfd_is_section_compressed_with_header	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
sec_ptr	pointer
sec	pointer
,	O
int	O
*	O
compression_header_size_p	pointer
,	O
bfd_size_type	long
*	O
uncompressed_size_p	pointer
,	O
unsigned	O
int	O
*	O
uncompressed_align_pow_p	pointer
)	O
{	O
bfd_byte	char
header	array
[	O
MAX_COMPRESSION_HEADER_SIZE	int
]	O
;	O
int	O
compression_header_size	int
;	O
int	O
header_size	int
;	O
unsigned	O
int	O
saved	int
=	O
sec	pointer
->	O
compress_status	int
;	O
bfd_boolean	int
compressed	int
;	O
*	O
uncompressed_align_pow_p	pointer
=	O
0	int
;	O
compression_header_size	int
=	O
bfd_get_compression_header_size	function
(	O
abfd	pointer
,	O
sec	pointer
)	O
;	O
if	O
(	O
compression_header_size	int
>	O
MAX_COMPRESSION_HEADER_SIZE	int
)	O
abort	function
(	O
)	O
;	O
header_size	int
=	O
compression_header_size	int
?	O
compression_header_size	int
:	O
12	int
;	O
sec	pointer
->	O
compress_status	int
=	O
COMPRESS_SECTION_NONE	int
;	O
if	O
(	O
bfd_get_section_contents	function
(	O
abfd	pointer
,	O
sec	pointer
,	O
header	array
,	O
0	int
,	O
header_size	int
)	O
)	O
{	O
if	O
(	O
compression_header_size	int
==	O
0	int
)	O
compressed	int
=	O
CONST_STRNEQ	O
(	O
(	O
char	O
*	O
)	O
header	array
,	O
"ZLIB"	pointer
)	O
;	O
else	O
compressed	int
=	O
TRUE	int
;	O
}	O
else	O
compressed	int
=	O
FALSE	int
;	O
*	O
uncompressed_size_p	pointer
=	O
sec	pointer
->	O
size	long
;	O
if	O
(	O
compressed	int
)	O
{	O
if	O
(	O
compression_header_size	int
!=	O
0	int
)	O
{	O
if	O
(	O
!	O
bfd_check_compression_header	function
(	O
abfd	pointer
,	O
header	array
,	O
sec	pointer
,	O
uncompressed_size_p	pointer
,	O
uncompressed_align_pow_p	pointer
)	O
)	O
compression_header_size	int
=	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
sec	pointer
->	O
name	pointer
,	O
".debug_str"	pointer
)	O
==	O
0	int
&&	O
ISPRINT	O
(	O
header	array
[	O
4	int
]	O
)	O
)	O
compressed	int
=	O
FALSE	int
;	O
else	O
*	O
uncompressed_size_p	pointer
=	O
bfd_getb64	function
(	O
header	array
+	O
4	int
)	O
;	O
}	O
sec	pointer
->	O
compress_status	int
=	O
saved	int
;	O
*	O
compression_header_size_p	pointer
=	O
compression_header_size	int
;	O
return	O
compressed	int
;	O
}	O
bfd_boolean	int
bfd_is_section_compressed	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
sec_ptr	pointer
sec	pointer
)	O
{	O
int	O
compression_header_size	int
;	O
bfd_size_type	long
uncompressed_size	pointer
;	O
unsigned	O
int	O
uncompressed_align_power	int
;	O
return	O
(	O
bfd_is_section_compressed_with_header	function
(	O
abfd	pointer
,	O
sec	pointer
,	O
&	O
compression_header_size	int
,	O
&	O
uncompressed_size	pointer
,	O
&	O
uncompressed_align_power	int
)	O
&&	O
compression_header_size	int
>=	O
0	int
&&	O
uncompressed_size	pointer
>	O
0	int
)	O
;	O
}	O
bfd_boolean	int
bfd_init_section_decompress_status	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
sec_ptr	pointer
sec	pointer
)	O
{	O
bfd_byte	char
header	array
[	O
MAX_COMPRESSION_HEADER_SIZE	int
]	O
;	O
int	O
compression_header_size	int
;	O
int	O
header_size	int
;	O
bfd_size_type	long
uncompressed_size	pointer
;	O
unsigned	O
int	O
uncompressed_alignment_power	pointer
=	O
0	int
;	O
compression_header_size	int
=	O
bfd_get_compression_header_size	function
(	O
abfd	pointer
,	O
sec	pointer
)	O
;	O
if	O
(	O
compression_header_size	int
>	O
MAX_COMPRESSION_HEADER_SIZE	int
)	O
abort	function
(	O
)	O
;	O
header_size	int
=	O
compression_header_size	int
?	O
compression_header_size	int
:	O
12	int
;	O
if	O
(	O
sec	pointer
->	O
rawsize	long
!=	O
0	int
||	O
sec	pointer
->	O
contents	pointer
!=	O
NULL	O
||	O
sec	pointer
->	O
compress_status	int
!=	O
COMPRESS_SECTION_NONE	int
||	O
!	O
bfd_get_section_contents	function
(	O
abfd	pointer
,	O
sec	pointer
,	O
header	array
,	O
0	int
,	O
header_size	int
)	O
)	O
{	O
bfd_set_error	function
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
compression_header_size	int
==	O
0	int
)	O
{	O
if	O
(	O
!	O
CONST_STRNEQ	O
(	O
(	O
char	O
*	O
)	O
header	array
,	O
"ZLIB"	pointer
)	O
)	O
{	O
bfd_set_error	function
(	O
bfd_error_wrong_format	int
)	O
;	O
return	O
FALSE	int
;	O
}	O
uncompressed_size	pointer
=	O
bfd_getb64	function
(	O
header	array
+	O
4	int
)	O
;	O
}	O
else	O
if	O
(	O
!	O
bfd_check_compression_header	function
(	O
abfd	pointer
,	O
header	array
,	O
sec	pointer
,	O
&	O
uncompressed_size	pointer
,	O
&	O
uncompressed_alignment_power	pointer
)	O
)	O
{	O
bfd_set_error	function
(	O
bfd_error_wrong_format	int
)	O
;	O
return	O
FALSE	int
;	O
}	O
sec	pointer
->	O
compressed_size	long
=	O
sec	pointer
->	O
size	long
;	O
sec	pointer
->	O
size	long
=	O
uncompressed_size	pointer
;	O
bfd_set_section_alignment	function
(	O
sec	pointer
,	O
uncompressed_alignment_power	pointer
)	O
;	O
sec	pointer
->	O
compress_status	int
=	O
DECOMPRESS_SECTION_SIZED	int
;	O
return	O
TRUE	int
;	O
}	O
bfd_boolean	int
bfd_init_section_compress_status	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
sec_ptr	pointer
sec	pointer
)	O
{	O
bfd_size_type	long
uncompressed_size	pointer
;	O
bfd_byte	char
*	O
uncompressed_buffer	pointer
;	O
if	O
(	O
abfd	pointer
->	O
direction	enum
!=	O
read_direction	int
||	O
sec	pointer
->	O
size	long
==	O
0	int
||	O
sec	pointer
->	O
rawsize	long
!=	O
0	int
||	O
sec	pointer
->	O
contents	pointer
!=	O
NULL	O
||	O
sec	pointer
->	O
compress_status	int
!=	O
COMPRESS_SECTION_NONE	int
)	O
{	O
bfd_set_error	function
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
FALSE	int
;	O
}	O
uncompressed_size	pointer
=	O
sec	pointer
->	O
size	long
;	O
uncompressed_buffer	pointer
=	O
(	O
bfd_byte	char
*	O
)	O
bfd_malloc	function
(	O
uncompressed_size	pointer
)	O
;	O
if	O
(	O
uncompressed_buffer	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
!	O
bfd_get_section_contents	function
(	O
abfd	pointer
,	O
sec	pointer
,	O
uncompressed_buffer	pointer
,	O
0	int
,	O
uncompressed_size	pointer
)	O
)	O
return	O
FALSE	int
;	O
uncompressed_size	pointer
=	O
bfd_compress_section_contents	function
(	O
abfd	pointer
,	O
sec	pointer
,	O
uncompressed_buffer	pointer
,	O
uncompressed_size	pointer
)	O
;	O
return	O
uncompressed_size	pointer
!=	O
0	int
;	O
}	O
bfd_boolean	int
bfd_compress_section	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
sec_ptr	pointer
sec	pointer
,	O
bfd_byte	char
*	O
uncompressed_buffer	pointer
)	O
{	O
bfd_size_type	long
uncompressed_size	pointer
=	O
sec	pointer
->	O
size	long
;	O
if	O
(	O
abfd	pointer
->	O
direction	enum
!=	O
write_direction	int
||	O
uncompressed_size	pointer
==	O
0	int
||	O
uncompressed_buffer	pointer
==	O
NULL	O
||	O
sec	pointer
->	O
contents	pointer
!=	O
NULL	O
||	O
sec	pointer
->	O
compressed_size	long
!=	O
0	int
||	O
sec	pointer
->	O
compress_status	int
!=	O
COMPRESS_SECTION_NONE	int
)	O
{	O
bfd_set_error	function
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
FALSE	int
;	O
}	O
return	O
bfd_compress_section_contents	function
(	O
abfd	pointer
,	O
sec	pointer
,	O
uncompressed_buffer	pointer
,	O
uncompressed_size	pointer
)	O
!=	O
0	int
;	O
}	O
