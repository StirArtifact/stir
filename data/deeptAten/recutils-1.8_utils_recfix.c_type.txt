static	O
void	O
recfix_parse_args	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
;	O
static	O
bool	bool
recfix_check_database	function
(	O
rec_db_t	pointer
db	pointer
)	O
;	O
static	O
int	O
recfix_do_check	function
(	O
void	O
)	O
;	O
static	O
int	O
recfix_do_sort	function
(	O
void	O
)	O
;	O
static	O
int	O
recfix_do_auto	function
(	O
void	O
)	O
;	O
enum	O
recfix_op	enum
{	O
RECFIX_OP_INVALID	int
,	O
RECFIX_OP_CHECK	int
,	O
RECFIX_OP_SORT	int
,	O
RECFIX_OP_AUTO	int
}	O
;	O
bool	bool
recfix_external	bool
=	O
true	int
;	O
char	O
*	O
recfix_file	pointer
=	O
NULL	O
;	O
int	O
recfix_op	enum
=	O
RECFIX_OP_INVALID	int
;	O
char	O
*	O
recfix_password	pointer
=	O
NULL	O
;	O
bool	bool
recfix_force	bool
=	O
false	int
;	O
enum	O
{	O
COMMON_ARGS	O
,	O
NO_EXTERNAL_ARG	int
,	O
FORCE_ARG	int
,	O
OP_SORT_ARG	int
,	O
OP_CHECK_ARG	int
,	O
OP_AUTO_ARG	int
}	O
;	O
static	O
const	O
struct	O
option	struct
GNU_longOptions	array
[	O
]	O
=	O
{	O
COMMON_LONG_ARGS	O
,	O
{	O
"no-external"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
NO_EXTERNAL_ARG	int
}	O
,	O
{	O
"force"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
FORCE_ARG	int
}	O
,	O
{	O
"check"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
OP_CHECK_ARG	int
}	O
,	O
{	O
"sort"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
OP_SORT_ARG	int
}	O
,	O
{	O
"auto"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
OP_AUTO_ARG	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
void	O
recutl_print_help	function
(	O
void	O
)	O
{	O
printf	function
(	O
_	O
(	O
"Usage: recfix [OPTION]... [OPERATION] [OP_OPTION]... [FILE]\n"	pointer
)	O
)	O
;	O
fputs	function
(	O
_	O
(	O
"Check and fix rec files.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
puts	function
(	O
""	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"      --no-external                   don't use external descriptors.\n      --force                         force the requested operation.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
recutl_print_help_common	function
(	O
)	O
;	O
puts	function
(	O
""	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"Operations:\n      --check                         check integrity of the specified file.  Default.\n      --sort                          sort the records in the specified file.\n      --auto                          insert auto-generated fields in records missing them.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
puts	function
(	O
""	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"If no FILE is specified then the command acts like a filter, getting\nthe data from standard input and writing the result to standard output.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
puts	function
(	O
""	pointer
)	O
;	O
recutl_print_help_footer	function
(	O
)	O
;	O
}	O
static	O
void	O
recfix_parse_args	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
char	O
c	int
;	O
int	O
ret	int
;	O
while	O
(	O
(	O
ret	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
ENCRYPTION_SHORT_ARGS	pointer
,	O
GNU_longOptions	array
,	O
NULL	O
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
c	int
=	O
ret	int
;	O
switch	O
(	O
c	int
)	O
{	O
COMMON_ARGS_CASES	O
case	O
NO_EXTERNAL_ARG	int
:	O
{	O
recfix_external	bool
=	O
false	int
;	O
break	O
;	O
}	O
case	O
FORCE_ARG	int
:	O
{	O
recfix_force	bool
=	O
true	int
;	O
break	O
;	O
}	O
case	O
OP_CHECK_ARG	int
:	O
{	O
if	O
(	O
recfix_op	enum
!=	O
RECFIX_OP_INVALID	int
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"please specify just one operation.\n"	pointer
)	O
)	O
;	O
}	O
recfix_op	enum
=	O
RECFIX_OP_CHECK	int
;	O
break	O
;	O
}	O
case	O
OP_SORT_ARG	int
:	O
{	O
if	O
(	O
recfix_op	enum
!=	O
RECFIX_OP_INVALID	int
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"please specify just one operation.\n"	pointer
)	O
)	O
;	O
}	O
recfix_op	enum
=	O
RECFIX_OP_SORT	int
;	O
break	O
;	O
}	O
case	O
OP_AUTO_ARG	int
:	O
{	O
if	O
(	O
recfix_op	enum
!=	O
RECFIX_OP_INVALID	int
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"please specify just one operation.\n"	pointer
)	O
)	O
;	O
}	O
recfix_op	enum
=	O
RECFIX_OP_AUTO	int
;	O
break	O
;	O
}	O
default	O
:	O
{	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
}	O
if	O
(	O
recfix_op	enum
==	O
RECFIX_OP_INVALID	int
)	O
{	O
recfix_op	enum
=	O
RECFIX_OP_CHECK	int
;	O
}	O
if	O
(	O
optind	int
<	O
argc	int
)	O
{	O
if	O
(	O
(	O
argc	int
-	O
optind	int
)	O
!=	O
1	int
)	O
{	O
recutl_print_help	function
(	O
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
recfix_file	pointer
=	O
argv	pointer
[	O
optind	int
++	O
]	O
;	O
}	O
}	O
static	O
bool	bool
recfix_check_database	function
(	O
rec_db_t	pointer
db	pointer
)	O
{	O
bool	bool
ret	int
;	O
char	O
*	O
errors	pointer
;	O
size_t	long
errors_size	long
;	O
rec_buf_t	pointer
buf	pointer
;	O
buf	pointer
=	O
rec_buf_new	function
(	O
&	O
errors	pointer
,	O
&	O
errors_size	long
)	O
;	O
ret	int
=	O
(	O
rec_int_check_db	function
(	O
db	pointer
,	O
true	int
,	O
recfix_external	bool
,	O
buf	pointer
)	O
==	O
0	int
)	O
;	O
rec_buf_close	function
(	O
buf	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s"	pointer
,	O
errors	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
static	O
int	O
recfix_do_check	function
(	O
)	O
{	O
rec_db_t	pointer
db	pointer
;	O
db	pointer
=	O
recutl_read_db_from_file	function
(	O
recfix_file	pointer
)	O
;	O
if	O
(	O
!	O
db	pointer
)	O
{	O
return	O
EXIT_FAILURE	int
;	O
}	O
if	O
(	O
!	O
recfix_check_database	function
(	O
db	pointer
)	O
)	O
{	O
return	O
EXIT_FAILURE	int
;	O
}	O
return	O
EXIT_SUCCESS	int
;	O
}	O
static	O
int	O
recfix_do_sort	function
(	O
)	O
{	O
rec_db_t	pointer
db	pointer
=	O
NULL	O
;	O
size_t	long
n_rset	long
=	O
0	int
;	O
rec_rset_t	pointer
rset	pointer
=	O
NULL	O
;	O
db	pointer
=	O
recutl_read_db_from_file	function
(	O
recfix_file	pointer
)	O
;	O
if	O
(	O
!	O
db	pointer
)	O
{	O
return	O
EXIT_FAILURE	int
;	O
}	O
for	O
(	O
n_rset	long
=	O
0	int
;	O
n_rset	long
<	O
rec_db_size	function
(	O
db	pointer
)	O
;	O
n_rset	long
++	O
)	O
{	O
rset	pointer
=	O
rec_db_get_rset	function
(	O
db	pointer
,	O
n_rset	long
)	O
;	O
if	O
(	O
!	O
rec_rset_sort	function
(	O
rset	pointer
,	O
NULL	O
)	O
)	O
recutl_out_of_memory	function
(	O
)	O
;	O
}	O
if	O
(	O
!	O
recfix_check_database	function
(	O
db	pointer
)	O
)	O
{	O
return	O
EXIT_FAILURE	int
;	O
}	O
if	O
(	O
!	O
recutl_file_is_writable	function
(	O
recfix_file	pointer
)	O
)	O
{	O
recutl_error	function
(	O
_	O
(	O
"file %s is not writable.\n"	pointer
)	O
,	O
recfix_file	pointer
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
recutl_write_db_to_file	function
(	O
db	pointer
,	O
recfix_file	pointer
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
static	O
int	O
recfix_do_auto	function
(	O
)	O
{	O
rec_db_t	pointer
db	pointer
=	O
NULL	O
;	O
size_t	long
n_rset	long
=	O
0	int
;	O
db	pointer
=	O
recutl_read_db_from_file	function
(	O
recfix_file	pointer
)	O
;	O
if	O
(	O
!	O
db	pointer
)	O
{	O
return	O
EXIT_FAILURE	int
;	O
}	O
for	O
(	O
n_rset	long
=	O
0	int
;	O
n_rset	long
<	O
rec_db_size	function
(	O
db	pointer
)	O
;	O
n_rset	long
++	O
)	O
{	O
rec_mset_iterator_t	struct
iter	struct
;	O
rec_record_t	pointer
record	pointer
;	O
rec_rset_t	pointer
rset	pointer
=	O
rec_db_get_rset	function
(	O
db	pointer
,	O
n_rset	long
)	O
;	O
iter	struct
=	O
rec_mset_iterator	function
(	O
rec_rset_mset	function
(	O
rset	pointer
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter	struct
,	O
MSET_RECORD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
record	pointer
,	O
NULL	O
)	O
)	O
{	O
if	O
(	O
!	O
rec_rset_add_auto_fields	function
(	O
rset	pointer
,	O
record	pointer
)	O
)	O
recutl_out_of_memory	function
(	O
)	O
;	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter	struct
)	O
;	O
}	O
if	O
(	O
!	O
recfix_check_database	function
(	O
db	pointer
)	O
)	O
{	O
return	O
EXIT_FAILURE	int
;	O
}	O
recutl_write_db_to_file	function
(	O
db	pointer
,	O
recfix_file	pointer
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	pointer
[	O
]	O
)	O
{	O
int	O
res	int
=	O
EXIT_SUCCESS	int
;	O
recutl_init	function
(	O
"recfix"	pointer
)	O
;	O
recfix_parse_args	function
(	O
argc	int
,	O
argv	pointer
)	O
;	O
switch	O
(	O
recfix_op	enum
)	O
{	O
case	O
RECFIX_OP_CHECK	int
:	O
{	O
res	int
=	O
recfix_do_check	function
(	O
)	O
;	O
break	O
;	O
}	O
case	O
RECFIX_OP_SORT	int
:	O
{	O
res	int
=	O
recfix_do_sort	function
(	O
)	O
;	O
break	O
;	O
}	O
case	O
RECFIX_OP_AUTO	int
:	O
{	O
res	int
=	O
recfix_do_auto	function
(	O
)	O
;	O
break	O
;	O
}	O
default	O
:	O
{	O
res	int
=	O
EXIT_FAILURE	int
;	O
recutl_fatal	function
(	O
_	O
(	O
"unknown operation in recfix: please report this as a bug.\n"	pointer
)	O
)	O
;	O
}	O
}	O
return	O
res	int
;	O
}	O
