int	O
CDB___log_register1_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
||	O
notused3	pointer
)	O
{	O
}	O
__log_register1_args	struct
*	O
argp	pointer
;	O
u_int32_t	int
i	int
;	O
u_int	int
ch	int
;	O
int	O
ret	int
;	O
i	int
=	O
0	int
;	O
ch	int
=	O
0	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___log_register1_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]log_register1: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\topcode: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
opcode	int
)	O
;	O
printf	function
(	O
"\tname: "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argp	pointer
->	O
name	pointer
.	O
size	int
;	O
i	int
++	O
)	O
{	O
ch	int
=	O
(	O
(	O
u_int8_t	char
*	O
)	O
argp	pointer
->	O
name	pointer
.	O
data	pointer
)	O
[	O
i	int
]	O
;	O
if	O
(	O
isprint	function
(	O
ch	int
)	O
||	O
ch	int
==	O
0xa	int
)	O
putchar	function
(	O
ch	int
)	O
;	O
else	O
printf	function
(	O
"%#x "	pointer
,	O
ch	int
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"\tuid: "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argp	pointer
->	O
uid	array
.	O
size	int
;	O
i	int
++	O
)	O
{	O
ch	int
=	O
(	O
(	O
u_int8_t	char
*	O
)	O
argp	pointer
->	O
uid	array
.	O
data	pointer
)	O
[	O
i	int
]	O
;	O
if	O
(	O
isprint	function
(	O
ch	int
)	O
||	O
ch	int
==	O
0xa	int
)	O
putchar	function
(	O
ch	int
)	O
;	O
else	O
printf	function
(	O
"%#x "	pointer
,	O
ch	int
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tftype: 0x%lx\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
ftype	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___log_register1_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__log_register1_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__log_register1_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__log_register1_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
opcode	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
opcode	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
opcode	int
)	O
;	O
memset	function
(	O
&	O
argp	pointer
->	O
name	pointer
,	O
0	int
,	O
sizeof	O
(	O
argp	pointer
->	O
name	pointer
)	O
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
name	pointer
.	O
size	int
,	O
bp	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
argp	pointer
->	O
name	pointer
.	O
data	pointer
=	O
bp	pointer
;	O
bp	pointer
+=	O
argp	pointer
->	O
name	pointer
.	O
size	int
;	O
memset	function
(	O
&	O
argp	pointer
->	O
uid	array
,	O
0	int
,	O
sizeof	O
(	O
argp	pointer
->	O
uid	array
)	O
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
uid	array
.	O
size	int
,	O
bp	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
argp	pointer
->	O
uid	array
.	O
data	pointer
=	O
bp	pointer
;	O
bp	pointer
+=	O
argp	pointer
->	O
uid	array
.	O
size	int
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
ftype	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
ftype	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
ftype	int
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___log_register_log	function
(	O
dbenv	pointer
,	O
txnid	int
,	O
ret_lsnp	pointer
,	O
flags	int
,	O
opcode	int
,	O
name	pointer
,	O
uid	array
,	O
fileid	array
,	O
ftype	int
,	O
meta_pgno	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_TXN	struct
*	O
txnid	int
;	O
DB_LSN	struct
*	O
ret_lsnp	pointer
;	O
u_int32_t	int
flags	int
;	O
u_int32_t	int
opcode	int
;	O
const	O
DBT	struct
*	O
name	pointer
;	O
const	O
DBT	struct
*	O
uid	array
;	O
int32_t	int
fileid	array
;	O
DBTYPE	enum
ftype	int
;	O
db_pgno_t	int
meta_pgno	int
;	O
{	O
DBT	struct
logrec	struct
;	O
DB_LSN	struct
*	O
lsnp	pointer
,	O
null_lsn	struct
;	O
u_int32_t	int
zero	int
;	O
u_int32_t	int
rectype	int
,	O
txn_num	int
;	O
int	O
ret	int
;	O
u_int8_t	char
*	O
bp	pointer
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
&&	O
TAILQ_FIRST	O
(	O
&	O
txnid	int
->	O
kids	struct
)	O
!=	O
NULL	O
&&	O
CDB___txn_activekids	function
(	O
txnid	int
)	O
!=	O
0	int
)	O
return	O
(	O
CDB___db_child_active_err	function
(	O
dbenv	pointer
)	O
)	O
;	O
rectype	int
=	O
DB_log_register	int
;	O
txn_num	int
=	O
txnid	int
==	O
NULL	O
?	O
0	int
:	O
txnid	int
->	O
txnid	int
;	O
if	O
(	O
txnid	int
==	O
NULL	O
)	O
{	O
ZERO_LSN	O
(	O
null_lsn	struct
)	O
;	O
lsnp	pointer
=	O
&	O
null_lsn	struct
;	O
}	O
else	O
lsnp	pointer
=	O
&	O
txnid	int
->	O
last_lsn	struct
;	O
logrec	struct
.	O
size	int
=	O
sizeof	O
(	O
rectype	int
)	O
+	O
sizeof	O
(	O
txn_num	int
)	O
+	O
sizeof	O
(	O
DB_LSN	struct
)	O
+	O
sizeof	O
(	O
opcode	int
)	O
+	O
sizeof	O
(	O
u_int32_t	int
)	O
+	O
(	O
name	pointer
==	O
NULL	O
?	O
0	int
:	O
name	pointer
->	O
size	int
)	O
+	O
sizeof	O
(	O
u_int32_t	int
)	O
+	O
(	O
uid	array
==	O
NULL	O
?	O
0	int
:	O
uid	array
->	O
size	int
)	O
+	O
sizeof	O
(	O
fileid	array
)	O
+	O
sizeof	O
(	O
ftype	int
)	O
+	O
sizeof	O
(	O
meta_pgno	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
logrec	struct
.	O
size	int
,	O
NULL	O
,	O
&	O
logrec	struct
.	O
data	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
bp	pointer
=	O
logrec	struct
.	O
data	pointer
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
rectype	int
,	O
sizeof	O
(	O
rectype	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
rectype	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
txn_num	int
,	O
sizeof	O
(	O
txn_num	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
txn_num	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
lsnp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
opcode	int
,	O
sizeof	O
(	O
opcode	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
opcode	int
)	O
;	O
if	O
(	O
name	pointer
==	O
NULL	O
)	O
{	O
zero	int
=	O
0	int
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
zero	int
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
}	O
else	O
{	O
memcpy	function
(	O
bp	pointer
,	O
&	O
name	pointer
->	O
size	int
,	O
sizeof	O
(	O
name	pointer
->	O
size	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
name	pointer
->	O
size	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
name	pointer
->	O
data	pointer
,	O
name	pointer
->	O
size	int
)	O
;	O
bp	pointer
+=	O
name	pointer
->	O
size	int
;	O
}	O
if	O
(	O
uid	array
==	O
NULL	O
)	O
{	O
zero	int
=	O
0	int
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
zero	int
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
}	O
else	O
{	O
memcpy	function
(	O
bp	pointer
,	O
&	O
uid	array
->	O
size	int
,	O
sizeof	O
(	O
uid	array
->	O
size	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
uid	array
->	O
size	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
uid	array
->	O
data	pointer
,	O
uid	array
->	O
size	int
)	O
;	O
bp	pointer
+=	O
uid	array
->	O
size	int
;	O
}	O
memcpy	function
(	O
bp	pointer
,	O
&	O
fileid	array
,	O
sizeof	O
(	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
fileid	array
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
ftype	int
,	O
sizeof	O
(	O
ftype	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
ftype	int
)	O
;	O
memcpy	function
(	O
bp	pointer
,	O
&	O
meta_pgno	int
,	O
sizeof	O
(	O
meta_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
meta_pgno	int
)	O
;	O
DB_ASSERT	O
(	O
(	O
u_int32_t	int
)	O
(	O
bp	pointer
-	O
(	O
u_int8_t	char
*	O
)	O
logrec	struct
.	O
data	pointer
)	O
==	O
logrec	struct
.	O
size	int
)	O
;	O
ret	int
=	O
CDB___log_put	function
(	O
dbenv	pointer
,	O
ret_lsnp	pointer
,	O
(	O
DBT	struct
*	O
)	O
&	O
logrec	struct
,	O
flags	int
)	O
;	O
if	O
(	O
txnid	int
!=	O
NULL	O
)	O
txnid	int
->	O
last_lsn	struct
=	O
*	O
ret_lsnp	pointer
;	O
CDB___os_free	function
(	O
logrec	struct
.	O
data	pointer
,	O
logrec	struct
.	O
size	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___log_register_print	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
notused2	enum
,	O
notused3	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
notused2	enum
;	O
void	O
*	O
notused3	pointer
;	O
{	O
if	O
(	O
notused2	enum
||	O
notused3	pointer
)	O
{	O
}	O
__log_register_args	struct
*	O
argp	pointer
;	O
u_int32_t	int
i	int
;	O
u_int	int
ch	int
;	O
int	O
ret	int
;	O
i	int
=	O
0	int
;	O
ch	int
=	O
0	int
;	O
notused2	enum
=	O
0	int
;	O
notused3	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___log_register_read	function
(	O
dbenv	pointer
,	O
dbtp	pointer
->	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
printf	function
(	O
"[%lu][%lu]CDB_log_register: rec: %lu txnid %lx prevlsn [%lu][%lu]\n"	pointer
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
file	int
,	O
(	O
u_long	long
)	O
lsnp	pointer
->	O
offset	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
type	enum
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
prev_lsn	struct
.	O
offset	int
)	O
;	O
printf	function
(	O
"\topcode: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
opcode	int
)	O
;	O
printf	function
(	O
"\tname: "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argp	pointer
->	O
name	pointer
.	O
size	int
;	O
i	int
++	O
)	O
{	O
ch	int
=	O
(	O
(	O
u_int8_t	char
*	O
)	O
argp	pointer
->	O
name	pointer
.	O
data	pointer
)	O
[	O
i	int
]	O
;	O
if	O
(	O
isprint	function
(	O
ch	int
)	O
||	O
ch	int
==	O
0xa	int
)	O
putchar	function
(	O
ch	int
)	O
;	O
else	O
printf	function
(	O
"%#x "	pointer
,	O
ch	int
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"\tuid: "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argp	pointer
->	O
uid	array
.	O
size	int
;	O
i	int
++	O
)	O
{	O
ch	int
=	O
(	O
(	O
u_int8_t	char
*	O
)	O
argp	pointer
->	O
uid	array
.	O
data	pointer
)	O
[	O
i	int
]	O
;	O
if	O
(	O
isprint	function
(	O
ch	int
)	O
||	O
ch	int
==	O
0xa	int
)	O
putchar	function
(	O
ch	int
)	O
;	O
else	O
printf	function
(	O
"%#x "	pointer
,	O
ch	int
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"\tfileid: %ld\n"	pointer
,	O
(	O
long	O
)	O
argp	pointer
->	O
fileid	array
)	O
;	O
printf	function
(	O
"\tftype: 0x%lx\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
ftype	int
)	O
;	O
printf	function
(	O
"\tmeta_pgno: %lu\n"	pointer
,	O
(	O
u_long	long
)	O
argp	pointer
->	O
meta_pgno	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___log_register_read	function
(	O
dbenv	pointer
,	O
recbuf	pointer
,	O
argpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
recbuf	pointer
;	O
__log_register_args	struct
*	O
*	O
argpp	pointer
;	O
{	O
__log_register_args	struct
*	O
argp	pointer
;	O
u_int8_t	char
*	O
bp	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
__log_register_args	struct
)	O
+	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
NULL	O
,	O
&	O
argp	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
argp	pointer
->	O
txnid	int
=	O
(	O
DB_TXN	struct
*	O
)	O
&	O
argp	pointer
[	O
1	int
]	O
;	O
bp	pointer
=	O
recbuf	pointer
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
type	enum
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
txnid	int
->	O
txnid	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
prev_lsn	struct
,	O
bp	pointer
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
DB_LSN	struct
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
opcode	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
opcode	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
opcode	int
)	O
;	O
memset	function
(	O
&	O
argp	pointer
->	O
name	pointer
,	O
0	int
,	O
sizeof	O
(	O
argp	pointer
->	O
name	pointer
)	O
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
name	pointer
.	O
size	int
,	O
bp	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
argp	pointer
->	O
name	pointer
.	O
data	pointer
=	O
bp	pointer
;	O
bp	pointer
+=	O
argp	pointer
->	O
name	pointer
.	O
size	int
;	O
memset	function
(	O
&	O
argp	pointer
->	O
uid	array
,	O
0	int
,	O
sizeof	O
(	O
argp	pointer
->	O
uid	array
)	O
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
uid	array
.	O
size	int
,	O
bp	pointer
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
argp	pointer
->	O
uid	array
.	O
data	pointer
=	O
bp	pointer
;	O
bp	pointer
+=	O
argp	pointer
->	O
uid	array
.	O
size	int
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
fileid	array
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
fileid	array
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
ftype	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
ftype	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
ftype	int
)	O
;	O
memcpy	function
(	O
&	O
argp	pointer
->	O
meta_pgno	int
,	O
bp	pointer
,	O
sizeof	O
(	O
argp	pointer
->	O
meta_pgno	int
)	O
)	O
;	O
bp	pointer
+=	O
sizeof	O
(	O
argp	pointer
->	O
meta_pgno	int
)	O
;	O
*	O
argpp	pointer
=	O
argp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___log_init_print	function
(	O
dbenv	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
{	O
int	O
ret	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___log_register1_print	function
,	O
DB_log_register1	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___log_register_print	function
,	O
DB_log_register	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___log_init_recover	function
(	O
dbenv	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
{	O
int	O
ret	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___deprecated_recover	function
,	O
DB_log_register1	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
CDB___log_register_recover	function
,	O
DB_log_register	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
