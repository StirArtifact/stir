typedef	O
struct	O
SimpleFile_t	struct
{	O
Class_t	struct
*	O
Class	pointer
;	O
int	O
refs	int
;	O
Stream_t	struct
*	O
Next	pointer
;	O
Stream_t	struct
*	O
Buffer	pointer
;	O
struct	O
MT_STAT	O
statbuf	pointer
;	O
int	O
fd	int
;	O
mt_off_t	long
offset	long
;	O
mt_off_t	long
lastwhere	long
;	O
int	O
seekable	int
;	O
int	O
privileged	int
;	O
int	O
scsi_sector_size	int
;	O
void	O
*	O
extra_data	pointer
;	O
int	O
swap	int
;	O
}	O
SimpleFile_t	struct
;	O
typedef	O
int	O
(	O
*	O
iofn	pointer
)	O
(	O
int	O
,	O
char	O
*	O
,	O
int	O
)	O
;	O
static	O
void	O
swap_buffer	function
(	O
char	O
*	O
buf	pointer
,	O
size_t	long
len	long
)	O
{	O
unsigned	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len	long
;	O
i	int
+=	O
2	int
)	O
{	O
char	O
temp	char
=	O
buf	pointer
[	O
i	int
]	O
;	O
buf	pointer
[	O
i	int
]	O
=	O
buf	pointer
[	O
i	int
+	O
1	int
]	O
;	O
buf	pointer
[	O
i	int
+	O
1	int
]	O
=	O
temp	char
;	O
}	O
}	O
static	O
int	O
file_io	function
(	O
Stream_t	struct
*	O
Stream	pointer
,	O
char	O
*	O
buf	pointer
,	O
mt_off_t	long
where	long
,	O
int	O
len	long
,	O
iofn	pointer
io	pointer
)	O
{	O
DeclareThis	O
(	O
SimpleFile_t	struct
)	O
;	O
int	O
ret	int
;	O
where	long
+=	O
This	pointer
->	O
offset	long
;	O
if	O
(	O
This	pointer
->	O
seekable	int
&&	O
where	long
!=	O
This	pointer
->	O
lastwhere	long
)	O
{	O
if	O
(	O
mt_lseek	function
(	O
This	pointer
->	O
fd	int
,	O
where	long
,	O
SEEK_SET	int
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
"seek"	pointer
)	O
;	O
This	pointer
->	O
lastwhere	long
=	O
(	O
mt_off_t	long
)	O
-	O
1	int
;	O
return	O
-	O
1	int
;	O
}	O
}	O
ret	int
=	O
io	pointer
(	O
This	pointer
->	O
fd	int
,	O
buf	pointer
,	O
len	long
)	O
;	O
if	O
(	O
ret	int
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"plain_io"	pointer
)	O
;	O
This	pointer
->	O
lastwhere	long
=	O
(	O
mt_off_t	long
)	O
-	O
1	int
;	O
return	O
-	O
1	int
;	O
}	O
This	pointer
->	O
lastwhere	long
=	O
where	long
+	O
ret	int
;	O
return	O
ret	int
;	O
}	O
static	O
int	O
file_read	function
(	O
Stream_t	struct
*	O
Stream	pointer
,	O
char	O
*	O
buf	pointer
,	O
mt_off_t	long
where	long
,	O
size_t	long
len	long
)	O
{	O
DeclareThis	O
(	O
SimpleFile_t	struct
)	O
;	O
int	O
result	int
=	O
file_io	function
(	O
Stream	pointer
,	O
buf	pointer
,	O
where	long
,	O
len	long
,	O
(	O
iofn	pointer
)	O
read	pointer
)	O
;	O
if	O
(	O
This	pointer
->	O
swap	int
)	O
swap_buffer	function
(	O
buf	pointer
,	O
len	long
)	O
;	O
return	O
result	int
;	O
}	O
static	O
int	O
file_write	function
(	O
Stream_t	struct
*	O
Stream	pointer
,	O
char	O
*	O
buf	pointer
,	O
mt_off_t	long
where	long
,	O
size_t	long
len	long
)	O
{	O
DeclareThis	O
(	O
SimpleFile_t	struct
)	O
;	O
if	O
(	O
!	O
This	pointer
->	O
swap	int
)	O
return	O
file_io	function
(	O
Stream	pointer
,	O
buf	pointer
,	O
where	long
,	O
len	long
,	O
(	O
iofn	pointer
)	O
write	pointer
)	O
;	O
else	O
{	O
int	O
result	int
;	O
char	O
*	O
swapping	pointer
=	O
malloc	function
(	O
len	long
)	O
;	O
memcpy	function
(	O
swapping	pointer
,	O
buf	pointer
,	O
len	long
)	O
;	O
swap_buffer	function
(	O
swapping	pointer
,	O
len	long
)	O
;	O
result	int
=	O
file_io	function
(	O
Stream	pointer
,	O
swapping	pointer
,	O
where	long
,	O
len	long
,	O
(	O
iofn	pointer
)	O
write	pointer
)	O
;	O
free	function
(	O
swapping	pointer
)	O
;	O
return	O
result	int
;	O
}	O
}	O
static	O
int	O
file_flush	function
(	O
Stream_t	struct
*	O
Stream	pointer
UNUSEDP	O
)	O
{	O
return	O
0	int
;	O
}	O
static	O
int	O
file_free	function
(	O
Stream_t	struct
*	O
Stream	pointer
)	O
{	O
DeclareThis	O
(	O
SimpleFile_t	struct
)	O
;	O
if	O
(	O
This	pointer
->	O
fd	int
>	O
2	int
)	O
return	O
close	pointer
(	O
This	pointer
->	O
fd	int
)	O
;	O
else	O
return	O
0	int
;	O
}	O
static	O
int	O
file_geom	function
(	O
Stream_t	struct
*	O
Stream	pointer
,	O
struct	O
device	struct
*	O
dev	pointer
,	O
struct	O
device	struct
*	O
orig_dev	pointer
,	O
int	O
media	char
,	O
union	O
bootsector	union
*	O
boot	struct
)	O
{	O
int	O
ret	int
;	O
DeclareThis	O
(	O
SimpleFile_t	struct
)	O
;	O
size_t	long
tot_sectors	long
;	O
int	O
BootP	array
,	O
Infp0	array
,	O
InfpX	array
,	O
InfTm	array
;	O
int	O
sectors	short
,	O
j	pointer
;	O
unsigned	O
char	O
sum	char
;	O
int	O
sect_per_track	int
;	O
struct	O
label_blk_t	struct
*	O
labelBlock	struct
;	O
dev	pointer
->	O
ssize	char
=	O
2	int
;	O
dev	pointer
->	O
use_2m	int
=	O
0x80	int
;	O
if	O
(	O
media	char
==	O
0xf0	int
||	O
media	char
>=	O
0x100	int
)	O
{	O
dev	pointer
->	O
heads	short
=	O
WORD	O
(	O
nheads	array
)	O
;	O
dev	pointer
->	O
sectors	short
=	O
WORD	O
(	O
nsect	array
)	O
;	O
tot_sectors	long
=	O
DWORD	O
(	O
bigsect	array
)	O
;	O
SET_INT	O
(	O
tot_sectors	long
,	O
WORD	O
(	O
psect	array
)	O
)	O
;	O
sect_per_track	int
=	O
dev	pointer
->	O
heads	short
*	O
dev	pointer
->	O
sectors	short
;	O
if	O
(	O
sect_per_track	int
==	O
0	int
)	O
{	O
if	O
(	O
mtools_skip_check	int
)	O
{	O
dev	pointer
->	O
heads	short
=	O
1	int
;	O
dev	pointer
->	O
sectors	short
=	O
1	int
;	O
sect_per_track	int
=	O
1	int
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"The devil is in the details: zero number of heads or sectors\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
tot_sectors	long
+=	O
sect_per_track	int
-	O
1	int
;	O
dev	pointer
->	O
tracks	int
=	O
tot_sectors	long
/	O
sect_per_track	int
;	O
BootP	array
=	O
WORD	O
(	O
ext	array
.	O
old	struct
.	O
BootP	array
)	O
;	O
Infp0	array
=	O
WORD	O
(	O
ext	array
.	O
old	struct
.	O
Infp0	array
)	O
;	O
InfpX	array
=	O
WORD	O
(	O
ext	array
.	O
old	struct
.	O
InfpX	array
)	O
;	O
InfTm	array
=	O
WORD	O
(	O
ext	array
.	O
old	struct
.	O
InfTm	array
)	O
;	O
if	O
(	O
WORD	O
(	O
fatlen	array
)	O
)	O
{	O
labelBlock	struct
=	O
&	O
boot	struct
->	O
boot	struct
.	O
ext	array
.	O
old	struct
.	O
labelBlock	struct
;	O
}	O
else	O
{	O
labelBlock	struct
=	O
&	O
boot	struct
->	O
boot	struct
.	O
ext	array
.	O
fat32	struct
.	O
labelBlock	struct
;	O
}	O
if	O
(	O
boot	struct
->	O
boot	struct
.	O
descr	char
>=	O
0xf0	int
&&	O
has_BPB4	O
&&	O
strncmp	function
(	O
boot	struct
->	O
boot	struct
.	O
banner	array
,	O
"2M"	pointer
,	O
2	int
)	O
==	O
0	int
&&	O
BootP	array
<	O
512	int
&&	O
Infp0	array
<	O
512	int
&&	O
InfpX	array
<	O
512	int
&&	O
InfTm	array
<	O
512	int
&&	O
BootP	array
>=	O
InfTm	array
+	O
2	int
&&	O
InfTm	array
>=	O
InfpX	array
&&	O
InfpX	array
>=	O
Infp0	array
&&	O
Infp0	array
>=	O
76	int
)	O
{	O
for	O
(	O
sum	char
=	O
0	int
,	O
j	pointer
=	O
63	int
;	O
j	pointer
<	O
BootP	array
;	O
j	pointer
++	O
)	O
sum	char
+=	O
boot	struct
->	O
bytes	array
[	O
j	pointer
]	O
;	O
dev	pointer
->	O
ssize	char
=	O
boot	struct
->	O
bytes	array
[	O
InfTm	array
]	O
;	O
if	O
(	O
!	O
sum	char
&&	O
dev	pointer
->	O
ssize	char
<=	O
7	int
)	O
{	O
dev	pointer
->	O
use_2m	int
=	O
0xff	int
;	O
dev	pointer
->	O
ssize	char
|=	O
0x80	int
;	O
}	O
}	O
}	O
else	O
if	O
(	O
setDeviceFromOldDos	function
(	O
media	char
,	O
dev	pointer
)	O
<	O
0	int
)	O
exit	function
(	O
1	int
)	O
;	O
sectors	short
=	O
dev	pointer
->	O
sectors	short
;	O
dev	pointer
->	O
sectors	short
=	O
dev	pointer
->	O
sectors	short
*	O
WORD	O
(	O
secsiz	array
)	O
/	O
512	int
;	O
ret	int
=	O
init_geom	function
(	O
This	pointer
->	O
fd	int
,	O
dev	pointer
,	O
orig_dev	pointer
,	O
&	O
This	pointer
->	O
statbuf	pointer
)	O
;	O
dev	pointer
->	O
sectors	short
=	O
sectors	short
;	O
return	O
ret	int
;	O
}	O
static	O
int	O
file_data	function
(	O
Stream_t	struct
*	O
Stream	pointer
,	O
time_t	long
*	O
date	array
,	O
mt_size_t	long
*	O
size	array
,	O
int	O
*	O
type	enum
,	O
int	O
*	O
address	long
)	O
{	O
DeclareThis	O
(	O
SimpleFile_t	struct
)	O
;	O
if	O
(	O
date	array
)	O
*	O
date	array
=	O
This	pointer
->	O
statbuf	pointer
.	O
st_mtime	O
;	O
if	O
(	O
size	array
)	O
*	O
size	array
=	O
This	pointer
->	O
statbuf	pointer
.	O
st_size	long
;	O
if	O
(	O
type	enum
)	O
*	O
type	enum
=	O
S_ISDIR	O
(	O
This	pointer
->	O
statbuf	pointer
.	O
st_mode	int
)	O
;	O
if	O
(	O
address	long
)	O
*	O
address	long
=	O
0	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
file_discard	function
(	O
Stream_t	struct
*	O
Stream	pointer
)	O
{	O
int	O
ret	int
;	O
DeclareThis	O
(	O
SimpleFile_t	struct
)	O
;	O
ret	int
=	O
ioctl	function
(	O
This	pointer
->	O
fd	int
,	O
BLKFLSBUF	O
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
perror	function
(	O
"BLKFLSBUF"	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
static	O
void	O
scsi_init	function
(	O
SimpleFile_t	struct
*	O
This	pointer
)	O
{	O
int	O
fd	int
=	O
This	pointer
->	O
fd	int
;	O
unsigned	O
char	O
cdb	array
[	O
10	int
]	O
,	O
buf	pointer
[	O
8	int
]	O
;	O
memset	function
(	O
cdb	array
,	O
0	int
,	O
sizeof	O
cdb	array
)	O
;	O
memset	function
(	O
buf	pointer
,	O
0	int
,	O
sizeof	O
(	O
buf	pointer
)	O
)	O
;	O
cdb	array
[	O
0	int
]	O
=	O
SCSI_READ_CAPACITY	int
;	O
if	O
(	O
scsi_cmd	function
(	O
fd	int
,	O
(	O
unsigned	O
char	O
*	O
)	O
cdb	array
,	O
sizeof	O
(	O
cdb	array
)	O
,	O
SCSI_IO_READ	int
,	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
This	pointer
->	O
extra_data	pointer
)	O
==	O
0	int
)	O
{	O
This	pointer
->	O
scsi_sector_size	int
=	O
(	O
(	O
unsigned	O
)	O
buf	pointer
[	O
5	int
]	O
<<	O
16	int
)	O
|	O
(	O
(	O
unsigned	O
)	O
buf	pointer
[	O
6	int
]	O
<<	O
8	int
)	O
|	O
(	O
unsigned	O
)	O
buf	pointer
[	O
7	int
]	O
;	O
if	O
(	O
This	pointer
->	O
scsi_sector_size	int
!=	O
512	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"  (scsi_sector_size=%d)\n"	pointer
,	O
This	pointer
->	O
scsi_sector_size	int
)	O
;	O
}	O
}	O
static	O
int	O
scsi_io	function
(	O
Stream_t	struct
*	O
Stream	pointer
,	O
char	O
*	O
buf	pointer
,	O
mt_off_t	long
where	long
,	O
size_t	long
len	long
,	O
int	O
rwcmd	int
)	O
{	O
unsigned	O
int	O
firstblock	int
,	O
nsect	array
;	O
int	O
clen	int
,	O
r	int
;	O
size_t	long
max	long
;	O
off_t	long
offset	long
;	O
unsigned	O
char	O
cdb	array
[	O
10	int
]	O
;	O
DeclareThis	O
(	O
SimpleFile_t	struct
)	O
;	O
firstblock	int
=	O
truncBytes32	function
(	O
(	O
where	long
+	O
This	pointer
->	O
offset	long
)	O
/	O
This	pointer
->	O
scsi_sector_size	int
)	O
;	O
offset	long
=	O
truncBytes32	function
(	O
where	long
+	O
This	pointer
->	O
offset	long
-	O
firstblock	int
*	O
This	pointer
->	O
scsi_sector_size	int
)	O
;	O
nsect	array
=	O
(	O
offset	long
+	O
len	long
+	O
This	pointer
->	O
scsi_sector_size	int
-	O
1	int
)	O
/	O
This	pointer
->	O
scsi_sector_size	int
;	O
if	O
(	O
len	long
>	O
512	int
)	O
{	O
while	O
(	O
nsect	array
*	O
This	pointer
->	O
scsi_sector_size	int
>	O
len	long
)	O
--	O
nsect	array
;	O
if	O
(	O
!	O
nsect	array
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Scsi buffer too small\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
rwcmd	int
==	O
SCSI_IO_WRITE	int
&&	O
offset	long
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Unaligned write\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
max	long
=	O
scsi_max_length	function
(	O
)	O
;	O
if	O
(	O
nsect	array
>	O
max	long
)	O
nsect	array
=	O
max	long
;	O
memset	function
(	O
cdb	array
,	O
0	int
,	O
sizeof	O
cdb	array
)	O
;	O
switch	O
(	O
rwcmd	int
)	O
{	O
case	O
SCSI_IO_READ	int
:	O
cdb	array
[	O
0	int
]	O
=	O
SCSI_READ	int
;	O
break	O
;	O
case	O
SCSI_IO_WRITE	int
:	O
cdb	array
[	O
0	int
]	O
=	O
SCSI_WRITE	int
;	O
break	O
;	O
}	O
cdb	array
[	O
1	int
]	O
=	O
0	int
;	O
if	O
(	O
firstblock	int
>	O
0x1fffff	int
||	O
nsect	array
>	O
0xff	int
)	O
{	O
cdb	array
[	O
0	int
]	O
|=	O
SCSI_GROUP1	int
;	O
clen	int
=	O
10	int
;	O
cdb	array
[	O
2	int
]	O
=	O
(	O
unsigned	O
char	O
)	O
(	O
firstblock	int
>>	O
24	int
)	O
&	O
0xff	int
;	O
cdb	array
[	O
3	int
]	O
=	O
(	O
unsigned	O
char	O
)	O
(	O
firstblock	int
>>	O
16	int
)	O
&	O
0xff	int
;	O
cdb	array
[	O
4	int
]	O
=	O
(	O
unsigned	O
char	O
)	O
(	O
firstblock	int
>>	O
8	int
)	O
&	O
0xff	int
;	O
cdb	array
[	O
5	int
]	O
=	O
(	O
unsigned	O
char	O
)	O
firstblock	int
&	O
0xff	int
;	O
cdb	array
[	O
6	int
]	O
=	O
0	int
;	O
cdb	array
[	O
7	int
]	O
=	O
(	O
unsigned	O
char	O
)	O
(	O
nsect	array
>>	O
8	int
)	O
&	O
0xff	int
;	O
cdb	array
[	O
8	int
]	O
=	O
(	O
unsigned	O
char	O
)	O
nsect	array
&	O
0xff	int
;	O
cdb	array
[	O
9	int
]	O
=	O
0	int
;	O
}	O
else	O
{	O
clen	int
=	O
6	int
;	O
cdb	array
[	O
1	int
]	O
|=	O
(	O
unsigned	O
char	O
)	O
(	O
(	O
firstblock	int
>>	O
16	int
)	O
&	O
0x1f	int
)	O
;	O
cdb	array
[	O
2	int
]	O
=	O
(	O
unsigned	O
char	O
)	O
(	O
(	O
firstblock	int
>>	O
8	int
)	O
&	O
0xff	int
)	O
;	O
cdb	array
[	O
3	int
]	O
=	O
(	O
unsigned	O
char	O
)	O
firstblock	int
&	O
0xff	int
;	O
cdb	array
[	O
4	int
]	O
=	O
(	O
unsigned	O
char	O
)	O
nsect	array
;	O
cdb	array
[	O
5	int
]	O
=	O
0	int
;	O
}	O
if	O
(	O
This	pointer
->	O
privileged	int
)	O
reclaim_privs	function
(	O
)	O
;	O
r	int
=	O
scsi_cmd	function
(	O
This	pointer
->	O
fd	int
,	O
(	O
unsigned	O
char	O
*	O
)	O
cdb	array
,	O
clen	int
,	O
rwcmd	int
,	O
buf	pointer
,	O
nsect	array
*	O
This	pointer
->	O
scsi_sector_size	int
,	O
This	pointer
->	O
extra_data	pointer
)	O
;	O
if	O
(	O
This	pointer
->	O
privileged	int
)	O
drop_privs	function
(	O
)	O
;	O
if	O
(	O
r	int
)	O
{	O
perror	function
(	O
rwcmd	int
==	O
SCSI_IO_READ	int
?	O
"SCMD_READ"	pointer
:	O
"SCMD_WRITE"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
offset	long
>	O
0	int
)	O
memmove	function
(	O
buf	pointer
,	O
buf	pointer
+	O
offset	long
,	O
nsect	array
*	O
This	pointer
->	O
scsi_sector_size	int
-	O
offset	long
)	O
;	O
if	O
(	O
len	long
==	O
256	int
)	O
return	O
256	int
;	O
else	O
if	O
(	O
len	long
==	O
512	int
)	O
return	O
512	int
;	O
else	O
return	O
nsect	array
*	O
This	pointer
->	O
scsi_sector_size	int
-	O
offset	long
;	O
}	O
static	O
int	O
scsi_read	function
(	O
Stream_t	struct
*	O
Stream	pointer
,	O
char	O
*	O
buf	pointer
,	O
mt_off_t	long
where	long
,	O
size_t	long
len	long
)	O
{	O
return	O
scsi_io	function
(	O
Stream	pointer
,	O
buf	pointer
,	O
where	long
,	O
len	long
,	O
SCSI_IO_READ	int
)	O
;	O
}	O
static	O
int	O
scsi_write	function
(	O
Stream_t	struct
*	O
Stream	pointer
,	O
char	O
*	O
buf	pointer
,	O
mt_off_t	long
where	long
,	O
size_t	long
len	long
)	O
{	O
return	O
scsi_io	function
(	O
Stream	pointer
,	O
buf	pointer
,	O
where	long
,	O
len	long
,	O
SCSI_IO_WRITE	int
)	O
;	O
}	O
static	O
Class_t	struct
ScsiClass	struct
=	O
{	O
scsi_read	function
,	O
scsi_write	function
,	O
file_flush	function
,	O
file_free	function
,	O
file_geom	function
,	O
file_data	function
,	O
0	int
,	O
0	int
,	O
file_discard	function
}	O
;	O
static	O
Class_t	struct
SimpleFileClass	struct
=	O
{	O
file_read	function
,	O
file_write	function
,	O
file_flush	function
,	O
file_free	function
,	O
file_geom	function
,	O
file_data	function
,	O
0	int
,	O
0	int
,	O
file_discard	function
}	O
;	O
Stream_t	struct
*	O
SimpleFileOpen	function
(	O
struct	O
device	struct
*	O
dev	pointer
,	O
struct	O
device	struct
*	O
orig_dev	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
int	O
mode	int
,	O
char	O
*	O
errmsg	pointer
,	O
int	O
mode2	int
,	O
int	O
locked	int
,	O
mt_size_t	long
*	O
maxSize	pointer
)	O
{	O
SimpleFile_t	struct
*	O
This	pointer
;	O
This	pointer
=	O
New	O
(	O
SimpleFile_t	struct
)	O
;	O
if	O
(	O
!	O
This	pointer
)	O
{	O
printOom	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
memset	function
(	O
(	O
void	O
*	O
)	O
This	pointer
,	O
0	int
,	O
sizeof	O
(	O
SimpleFile_t	struct
)	O
)	O
;	O
This	pointer
->	O
scsi_sector_size	int
=	O
512	int
;	O
This	pointer
->	O
seekable	int
=	O
1	int
;	O
This	pointer
->	O
Class	pointer
=	O
&	O
SimpleFileClass	struct
;	O
if	O
(	O
!	O
name	pointer
||	O
strcmp	function
(	O
name	pointer
,	O
"-"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
mode	int
==	O
O_RDONLY	int
)	O
This	pointer
->	O
fd	int
=	O
0	int
;	O
else	O
This	pointer
->	O
fd	int
=	O
1	int
;	O
This	pointer
->	O
seekable	int
=	O
0	int
;	O
This	pointer
->	O
refs	int
=	O
1	int
;	O
This	pointer
->	O
Next	pointer
=	O
0	int
;	O
This	pointer
->	O
Buffer	pointer
=	O
0	int
;	O
if	O
(	O
MT_FSTAT	O
(	O
This	pointer
->	O
fd	int
,	O
&	O
This	pointer
->	O
statbuf	pointer
)	O
<	O
0	int
)	O
{	O
Free	O
(	O
This	pointer
)	O
;	O
if	O
(	O
errmsg	pointer
)	O
snprintf	function
(	O
errmsg	pointer
,	O
199	int
,	O
"Can't stat -: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
return	O
(	O
Stream_t	struct
*	O
)	O
This	pointer
;	O
}	O
if	O
(	O
dev	pointer
)	O
{	O
if	O
(	O
!	O
(	O
mode2	int
&	O
NO_PRIV	int
)	O
)	O
This	pointer
->	O
privileged	int
=	O
IS_PRIVILEGED	O
(	O
dev	pointer
)	O
;	O
mode	int
|=	O
dev	pointer
->	O
mode	int
;	O
}	O
precmd	pointer
(	O
dev	pointer
)	O
;	O
if	O
(	O
IS_PRIVILEGED	O
(	O
dev	pointer
)	O
&&	O
!	O
(	O
mode2	int
&	O
NO_PRIV	int
)	O
)	O
reclaim_privs	function
(	O
)	O
;	O
{	O
if	O
(	O
IS_SCSI	O
(	O
dev	pointer
)	O
)	O
This	pointer
->	O
fd	int
=	O
scsi_open	function
(	O
name	pointer
,	O
mode	int
,	O
IS_NOLOCK	O
(	O
dev	pointer
)	O
?	O
0444	int
:	O
0666	int
,	O
&	O
This	pointer
->	O
extra_data	pointer
)	O
;	O
else	O
This	pointer
->	O
fd	int
=	O
open	function
(	O
name	pointer
,	O
mode	int
|	O
O_LARGEFILE	O
|	O
O_BINARY	int
,	O
IS_NOLOCK	O
(	O
dev	pointer
)	O
?	O
0444	int
:	O
0666	int
)	O
;	O
}	O
if	O
(	O
IS_PRIVILEGED	O
(	O
dev	pointer
)	O
&&	O
!	O
(	O
mode2	int
&	O
NO_PRIV	int
)	O
)	O
drop_privs	function
(	O
)	O
;	O
if	O
(	O
This	pointer
->	O
fd	int
<	O
0	int
)	O
{	O
Free	O
(	O
This	pointer
)	O
;	O
if	O
(	O
errmsg	pointer
)	O
snprintf	function
(	O
errmsg	pointer
,	O
199	int
,	O
"Can't open %s: %s"	pointer
,	O
name	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
IS_PRIVILEGED	O
(	O
dev	pointer
)	O
&&	O
!	O
(	O
mode2	int
&	O
NO_PRIV	int
)	O
)	O
closeExec	function
(	O
This	pointer
->	O
fd	int
)	O
;	O
if	O
(	O
MT_FSTAT	O
(	O
This	pointer
->	O
fd	int
,	O
&	O
This	pointer
->	O
statbuf	pointer
)	O
<	O
0	int
)	O
{	O
Free	O
(	O
This	pointer
)	O
;	O
if	O
(	O
errmsg	pointer
)	O
{	O
snprintf	function
(	O
errmsg	pointer
,	O
199	int
,	O
"Can't stat %s: %s"	pointer
,	O
name	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
}	O
return	O
NULL	O
;	O
}	O
if	O
(	O
locked	int
&&	O
lock_dev	function
(	O
This	pointer
->	O
fd	int
,	O
mode	int
==	O
O_RDWR	int
,	O
dev	pointer
)	O
)	O
{	O
if	O
(	O
errmsg	pointer
)	O
snprintf	function
(	O
errmsg	pointer
,	O
199	int
,	O
"plain floppy: device \"%s\" busy (%s):"	pointer
,	O
dev	pointer
?	O
dev	pointer
->	O
name	pointer
:	O
"unknown"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
close	pointer
(	O
This	pointer
->	O
fd	int
)	O
;	O
Free	O
(	O
This	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
dev	pointer
)	O
{	O
if	O
(	O
(	O
!	O
IS_MFORMAT_ONLY	O
(	O
dev	pointer
)	O
&&	O
dev	pointer
->	O
tracks	int
)	O
&&	O
init_geom	function
(	O
This	pointer
->	O
fd	int
,	O
dev	pointer
,	O
orig_dev	pointer
,	O
&	O
This	pointer
->	O
statbuf	pointer
)	O
)	O
{	O
close	pointer
(	O
This	pointer
->	O
fd	int
)	O
;	O
Free	O
(	O
This	pointer
)	O
;	O
if	O
(	O
errmsg	pointer
)	O
sprintf	function
(	O
errmsg	pointer
,	O
"init: set default params"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
This	pointer
->	O
offset	long
=	O
(	O
mt_off_t	long
)	O
dev	pointer
->	O
offset	long
;	O
}	O
else	O
This	pointer
->	O
offset	long
=	O
0	int
;	O
This	pointer
->	O
refs	int
=	O
1	int
;	O
This	pointer
->	O
Next	pointer
=	O
0	int
;	O
This	pointer
->	O
Buffer	pointer
=	O
0	int
;	O
if	O
(	O
maxSize	pointer
)	O
{	O
if	O
(	O
IS_SCSI	O
(	O
dev	pointer
)	O
)	O
{	O
*	O
maxSize	pointer
=	O
MAX_OFF_T_B	O
(	O
31	int
+	O
log_2	function
(	O
This	pointer
->	O
scsi_sector_size	int
)	O
)	O
;	O
}	O
else	O
{	O
*	O
maxSize	pointer
=	O
max_off_t_seek	long
;	O
}	O
if	O
(	O
This	pointer
->	O
offset	long
>	O
(	O
mt_off_t	long
)	O
*	O
maxSize	pointer
)	O
{	O
close	pointer
(	O
This	pointer
->	O
fd	int
)	O
;	O
Free	O
(	O
This	pointer
)	O
;	O
if	O
(	O
errmsg	pointer
)	O
sprintf	function
(	O
errmsg	pointer
,	O
"init: Big disks not supported"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
*	O
maxSize	pointer
-=	O
This	pointer
->	O
offset	long
;	O
}	O
if	O
(	O
IS_SCSI	O
(	O
dev	pointer
)	O
)	O
{	O
This	pointer
->	O
Class	pointer
=	O
&	O
ScsiClass	struct
;	O
if	O
(	O
This	pointer
->	O
privileged	int
)	O
reclaim_privs	function
(	O
)	O
;	O
scsi_init	function
(	O
This	pointer
)	O
;	O
if	O
(	O
This	pointer
->	O
privileged	int
)	O
drop_privs	function
(	O
)	O
;	O
}	O
This	pointer
->	O
swap	int
=	O
DO_SWAP	O
(	O
dev	pointer
)	O
;	O
if	O
(	O
!	O
(	O
mode2	int
&	O
NO_OFFSET	int
)	O
&&	O
dev	pointer
&&	O
(	O
dev	pointer
->	O
partition	int
>	O
4	int
)	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Invalid partition %d (must be between 0 and 4), ignoring it\n"	pointer
,	O
dev	pointer
->	O
partition	int
)	O
;	O
while	O
(	O
!	O
(	O
mode2	int
&	O
NO_OFFSET	int
)	O
&&	O
dev	pointer
&&	O
dev	pointer
->	O
partition	int
&&	O
dev	pointer
->	O
partition	int
<=	O
4	int
)	O
{	O
int	O
has_activated	pointer
;	O
unsigned	O
int	O
last_end	pointer
,	O
j	pointer
;	O
unsigned	O
char	O
buf	pointer
[	O
2048	int
]	O
;	O
struct	O
partition	int
*	O
partTable	pointer
=	O
(	O
struct	O
partition	int
*	O
)	O
(	O
buf	pointer
+	O
0x1ae	int
)	O
;	O
size_t	long
partOff	long
;	O
if	O
(	O
force_read	function
(	O
(	O
Stream_t	struct
*	O
)	O
This	pointer
,	O
(	O
char	O
*	O
)	O
buf	pointer
,	O
0	int
,	O
512	int
)	O
!=	O
512	int
)	O
break	O
;	O
if	O
(	O
_WORD	O
(	O
buf	pointer
+	O
510	int
)	O
!=	O
0xaa55	int
)	O
break	O
;	O
partOff	long
=	O
BEGIN	O
(	O
partTable	pointer
[	O
dev	pointer
->	O
partition	int
]	O
)	O
;	O
if	O
(	O
maxSize	pointer
)	O
{	O
if	O
(	O
partOff	long
>	O
*	O
maxSize	pointer
>>	O
9	int
)	O
{	O
close	pointer
(	O
This	pointer
->	O
fd	int
)	O
;	O
Free	O
(	O
This	pointer
)	O
;	O
if	O
(	O
errmsg	pointer
)	O
sprintf	function
(	O
errmsg	pointer
,	O
"init: Big disks not supported"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
*	O
maxSize	pointer
-=	O
(	O
mt_off_t	long
)	O
partOff	long
<<	O
9	int
;	O
}	O
This	pointer
->	O
offset	long
+=	O
(	O
mt_off_t	long
)	O
partOff	long
<<	O
9	int
;	O
if	O
(	O
!	O
partTable	pointer
[	O
dev	pointer
->	O
partition	int
]	O
.	O
sys_ind	O
)	O
{	O
if	O
(	O
errmsg	pointer
)	O
sprintf	function
(	O
errmsg	pointer
,	O
"init: non-existant partition"	pointer
)	O
;	O
close	pointer
(	O
This	pointer
->	O
fd	int
)	O
;	O
Free	O
(	O
This	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
!	O
dev	pointer
->	O
tracks	int
)	O
{	O
dev	pointer
->	O
heads	short
=	O
head	int
(	O
partTable	pointer
[	O
dev	pointer
->	O
partition	int
]	O
.	O
end	struct
)	O
+	O
1	int
;	O
dev	pointer
->	O
sectors	short
=	O
sector	int
(	O
partTable	pointer
[	O
dev	pointer
->	O
partition	int
]	O
.	O
end	struct
)	O
;	O
dev	pointer
->	O
tracks	int
=	O
cyl	char
(	O
partTable	pointer
[	O
dev	pointer
->	O
partition	int
]	O
.	O
end	struct
)	O
-	O
cyl	char
(	O
partTable	pointer
[	O
dev	pointer
->	O
partition	int
]	O
.	O
start	array
)	O
+	O
1	int
;	O
}	O
dev	pointer
->	O
hidden	int
=	O
dev	pointer
->	O
sectors	short
*	O
head	int
(	O
partTable	pointer
[	O
dev	pointer
->	O
partition	int
]	O
.	O
start	array
)	O
+	O
sector	int
(	O
partTable	pointer
[	O
dev	pointer
->	O
partition	int
]	O
.	O
start	array
)	O
-	O
1	int
;	O
if	O
(	O
!	O
mtools_skip_check	int
&&	O
consistencyCheck	function
(	O
(	O
struct	O
partition	int
*	O
)	O
(	O
buf	pointer
+	O
0x1ae	int
)	O
,	O
0	int
,	O
0	int
,	O
&	O
has_activated	pointer
,	O
&	O
last_end	pointer
,	O
&	O
j	pointer
,	O
dev	pointer
,	O
0	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Warning: inconsistent partition table\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Possibly unpartitioned device\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n*** Maybe try without partition=%d in "	pointer
"device definition ***\n\n"	pointer
,	O
dev	pointer
->	O
partition	int
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"If this is a PCMCIA card, or a disk "	pointer
"partitioned on another computer, this "	pointer
"message may be in error: add "	pointer
"mtools_skip_check=1 to your .mtoolsrc "	pointer
"file to suppress this warning\n"	pointer
)	O
;	O
}	O
break	O
;	O
}	O
This	pointer
->	O
lastwhere	long
=	O
-	O
This	pointer
->	O
offset	long
;	O
return	O
(	O
Stream_t	struct
*	O
)	O
This	pointer
;	O
}	O
int	O
get_fd	function
(	O
Stream_t	struct
*	O
Stream	pointer
)	O
{	O
Class_t	struct
*	O
clazz	pointer
;	O
DeclareThis	O
(	O
SimpleFile_t	struct
)	O
;	O
clazz	pointer
=	O
This	pointer
->	O
Class	pointer
;	O
if	O
(	O
clazz	pointer
!=	O
&	O
ScsiClass	struct
&&	O
clazz	pointer
!=	O
&	O
SimpleFileClass	struct
)	O
return	O
-	O
1	int
;	O
else	O
return	O
This	pointer
->	O
fd	int
;	O
}	O
void	O
*	O
get_extra_data	function
(	O
Stream_t	struct
*	O
Stream	pointer
)	O
{	O
DeclareThis	O
(	O
SimpleFile_t	struct
)	O
;	O
return	O
This	pointer
->	O
extra_data	pointer
;	O
}	O
