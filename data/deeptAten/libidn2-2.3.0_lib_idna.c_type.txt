G_GNUC_IDN2_ATTRIBUTE_PURE	O
static	O
int	O
_isNFC	function
(	O
uint32_t	int
*	O
label	pointer
,	O
size_t	long
len	long
)	O
{	O
int	O
lastCanonicalClass	int
=	O
0	int
;	O
int	O
result	int
=	O
1	int
;	O
size_t	long
it	long
;	O
for	O
(	O
it	long
=	O
0	int
;	O
it	long
<	O
len	long
;	O
it	long
++	O
)	O
{	O
uint32_t	int
ch	int
=	O
label	pointer
[	O
it	long
]	O
;	O
if	O
(	O
ch	int
>=	O
0x10000	int
)	O
it	long
++	O
;	O
int	O
canonicalClass	int
=	O
uc_combining_class	function
(	O
ch	int
)	O
;	O
if	O
(	O
lastCanonicalClass	int
>	O
canonicalClass	int
&&	O
canonicalClass	int
!=	O
0	int
)	O
return	O
0	int
;	O
NFCQCMap	struct
*	O
map	pointer
=	O
get_nfcqc_map	function
(	O
ch	int
)	O
;	O
if	O
(	O
map	pointer
)	O
{	O
if	O
(	O
map	pointer
->	O
check	char
)	O
return	O
0	int
;	O
result	int
=	O
-	O
1	int
;	O
}	O
lastCanonicalClass	int
=	O
canonicalClass	int
;	O
}	O
return	O
result	int
;	O
}	O
int	O
_idn2_u8_to_u32_nfc	function
(	O
const	O
uint8_t	char
*	O
src	pointer
,	O
size_t	long
srclen	long
,	O
uint32_t	int
*	O
*	O
out	pointer
,	O
size_t	long
*	O
outlen	pointer
,	O
int	O
nfc	int
)	O
{	O
uint32_t	int
*	O
p	pointer
;	O
size_t	long
plen	long
;	O
p	pointer
=	O
u8_to_u32	function
(	O
src	pointer
,	O
srclen	long
,	O
NULL	O
,	O
&	O
plen	long
)	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
errno	O
==	O
ENOMEM	int
)	O
return	O
IDN2_MALLOC	int
;	O
return	O
IDN2_ENCODING_ERROR	int
;	O
}	O
if	O
(	O
nfc	int
&&	O
!	O
_isNFC	function
(	O
p	pointer
,	O
plen	long
)	O
)	O
{	O
size_t	long
tmplen	long
;	O
uint32_t	int
*	O
tmp	pointer
=	O
u32_normalize	function
(	O
UNINORM_NFC	O
,	O
p	pointer
,	O
plen	long
,	O
NULL	O
,	O
&	O
tmplen	long
)	O
;	O
free	function
(	O
p	pointer
)	O
;	O
if	O
(	O
tmp	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
errno	O
==	O
ENOMEM	int
)	O
return	O
IDN2_MALLOC	int
;	O
return	O
IDN2_NFC	int
;	O
}	O
p	pointer
=	O
tmp	pointer
;	O
plen	long
=	O
tmplen	long
;	O
}	O
*	O
out	pointer
=	O
p	pointer
;	O
*	O
outlen	pointer
=	O
plen	long
;	O
return	O
IDN2_OK	int
;	O
}	O
bool	bool
_idn2_ascii_p	function
(	O
const	O
uint8_t	char
*	O
src	pointer
,	O
size_t	long
srclen	long
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
srclen	long
;	O
i	long
++	O
)	O
if	O
(	O
src	pointer
[	O
i	long
]	O
>=	O
0x80	int
)	O
return	O
false	int
;	O
return	O
true	int
;	O
}	O
int	O
_idn2_label_test	function
(	O
int	O
what	int
,	O
const	O
uint32_t	int
*	O
label	pointer
,	O
size_t	long
llen	long
)	O
{	O
if	O
(	O
what	int
&	O
TEST_NFC	int
)	O
{	O
size_t	long
plen	long
;	O
uint32_t	int
*	O
p	pointer
=	O
u32_normalize	function
(	O
UNINORM_NFC	O
,	O
label	pointer
,	O
llen	long
,	O
NULL	O
,	O
&	O
plen	long
)	O
;	O
int	O
ok	int
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
errno	O
==	O
ENOMEM	int
)	O
return	O
IDN2_MALLOC	int
;	O
return	O
IDN2_NFC	int
;	O
}	O
ok	int
=	O
llen	long
==	O
plen	long
&&	O
memcmp	function
(	O
label	pointer
,	O
p	pointer
,	O
plen	long
*	O
sizeof	O
(	O
*	O
label	pointer
)	O
)	O
==	O
0	int
;	O
free	function
(	O
p	pointer
)	O
;	O
if	O
(	O
!	O
ok	int
)	O
return	O
IDN2_NOT_NFC	int
;	O
}	O
if	O
(	O
what	int
&	O
TEST_2HYPHEN	int
)	O
{	O
if	O
(	O
llen	long
>=	O
4	int
&&	O
label	pointer
[	O
2	int
]	O
==	O
'-'	O
&&	O
label	pointer
[	O
3	int
]	O
==	O
'-'	O
)	O
return	O
IDN2_2HYPHEN	int
;	O
}	O
if	O
(	O
what	int
&	O
TEST_HYPHEN_STARTEND	int
)	O
{	O
if	O
(	O
llen	long
>	O
0	int
&&	O
(	O
label	pointer
[	O
0	int
]	O
==	O
'-'	O
||	O
label	pointer
[	O
llen	long
-	O
1	int
]	O
==	O
'-'	O
)	O
)	O
return	O
IDN2_HYPHEN_STARTEND	int
;	O
}	O
if	O
(	O
what	int
&	O
TEST_LEADING_COMBINING	int
)	O
{	O
if	O
(	O
llen	long
>	O
0	int
&&	O
uc_is_general_category	function
(	O
label	pointer
[	O
0	int
]	O
,	O
UC_CATEGORY_M	struct
)	O
)	O
return	O
IDN2_LEADING_COMBINING	int
;	O
}	O
if	O
(	O
what	int
&	O
TEST_DISALLOWED	int
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
llen	long
;	O
i	long
++	O
)	O
if	O
(	O
_idn2_disallowed_p	function
(	O
label	pointer
[	O
i	long
]	O
)	O
)	O
{	O
if	O
(	O
(	O
what	int
&	O
(	O
TEST_TRANSITIONAL	int
|	O
TEST_NONTRANSITIONAL	int
)	O
)	O
&&	O
(	O
what	int
&	O
TEST_ALLOW_STD3_DISALLOWED	int
)	O
)	O
{	O
IDNAMap	struct
map	pointer
;	O
get_idna_map	function
(	O
label	pointer
[	O
i	long
]	O
,	O
&	O
map	pointer
)	O
;	O
if	O
(	O
map_is	function
(	O
&	O
map	pointer
,	O
TR46_FLG_DISALLOWED_STD3_VALID	int
)	O
||	O
map_is	function
(	O
&	O
map	pointer
,	O
TR46_FLG_DISALLOWED_STD3_MAPPED	int
)	O
)	O
continue	O
;	O
}	O
return	O
IDN2_DISALLOWED	int
;	O
}	O
}	O
if	O
(	O
what	int
&	O
TEST_CONTEXTJ	int
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
llen	long
;	O
i	long
++	O
)	O
if	O
(	O
_idn2_contextj_p	function
(	O
label	pointer
[	O
i	long
]	O
)	O
)	O
return	O
IDN2_CONTEXTJ	int
;	O
}	O
if	O
(	O
what	int
&	O
TEST_CONTEXTJ_RULE	int
)	O
{	O
size_t	long
i	long
;	O
int	O
rc	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
llen	long
;	O
i	long
++	O
)	O
{	O
rc	int
=	O
_idn2_contextj_rule	function
(	O
label	pointer
,	O
llen	long
,	O
i	long
)	O
;	O
if	O
(	O
rc	int
!=	O
IDN2_OK	int
)	O
return	O
rc	int
;	O
}	O
}	O
if	O
(	O
what	int
&	O
TEST_CONTEXTO	int
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
llen	long
;	O
i	long
++	O
)	O
if	O
(	O
_idn2_contexto_p	function
(	O
label	pointer
[	O
i	long
]	O
)	O
)	O
return	O
IDN2_CONTEXTO	int
;	O
}	O
if	O
(	O
what	int
&	O
TEST_CONTEXTO_WITH_RULE	int
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
llen	long
;	O
i	long
++	O
)	O
if	O
(	O
_idn2_contexto_p	function
(	O
label	pointer
[	O
i	long
]	O
)	O
&&	O
!	O
_idn2_contexto_with_rule	function
(	O
label	pointer
[	O
i	long
]	O
)	O
)	O
return	O
IDN2_CONTEXTO_NO_RULE	int
;	O
}	O
if	O
(	O
what	int
&	O
TEST_CONTEXTO_RULE	int
)	O
{	O
size_t	long
i	long
;	O
int	O
rc	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
llen	long
;	O
i	long
++	O
)	O
{	O
rc	int
=	O
_idn2_contexto_rule	function
(	O
label	pointer
,	O
llen	long
,	O
i	long
)	O
;	O
if	O
(	O
rc	int
!=	O
IDN2_OK	int
)	O
return	O
rc	int
;	O
}	O
}	O
if	O
(	O
what	int
&	O
TEST_UNASSIGNED	int
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
llen	long
;	O
i	long
++	O
)	O
if	O
(	O
_idn2_unassigned_p	function
(	O
label	pointer
[	O
i	long
]	O
)	O
)	O
return	O
IDN2_UNASSIGNED	int
;	O
}	O
if	O
(	O
what	int
&	O
TEST_BIDI	int
)	O
{	O
int	O
rc	int
=	O
_idn2_bidi	function
(	O
label	pointer
,	O
llen	long
)	O
;	O
if	O
(	O
rc	int
!=	O
IDN2_OK	int
)	O
return	O
rc	int
;	O
}	O
if	O
(	O
what	int
&	O
(	O
TEST_TRANSITIONAL	int
|	O
TEST_NONTRANSITIONAL	int
)	O
)	O
{	O
size_t	long
i	long
;	O
int	O
transitional	int
=	O
what	int
&	O
TEST_TRANSITIONAL	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
llen	long
;	O
i	long
++	O
)	O
if	O
(	O
label	pointer
[	O
i	long
]	O
==	O
0x002E	int
)	O
return	O
IDN2_DOT_IN_LABEL	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
llen	long
;	O
i	long
++	O
)	O
{	O
IDNAMap	struct
map	pointer
;	O
get_idna_map	function
(	O
label	pointer
[	O
i	long
]	O
,	O
&	O
map	pointer
)	O
;	O
if	O
(	O
map_is	function
(	O
&	O
map	pointer
,	O
TR46_FLG_VALID	int
)	O
||	O
(	O
!	O
transitional	int
&&	O
map_is	function
(	O
&	O
map	pointer
,	O
TR46_FLG_DEVIATION	int
)	O
)	O
)	O
continue	O
;	O
if	O
(	O
what	int
&	O
TEST_ALLOW_STD3_DISALLOWED	int
&&	O
(	O
map_is	function
(	O
&	O
map	pointer
,	O
TR46_FLG_DISALLOWED_STD3_VALID	int
)	O
||	O
map_is	function
(	O
&	O
map	pointer
,	O
TR46_FLG_DISALLOWED_STD3_MAPPED	int
)	O
)	O
)	O
continue	O
;	O
return	O
transitional	int
?	O
IDN2_INVALID_TRANSITIONAL	int
:	O
IDN2_INVALID_NONTRANSITIONAL	int
;	O
}	O
}	O
return	O
IDN2_OK	int
;	O
}	O
