extern	O
struct	O
option	struct
long_options	array
[	O
]	O
;	O
bool	enum
elementp	function
(	O
int	O
item	int
,	O
const	O
int	O
*	O
list	pointer
)	O
;	O
void	O
display_usage	function
(	O
const	O
char	O
*	O
progname	pointer
,	O
const	O
int	O
*	O
omit_vals	pointer
,	O
const	O
char	O
*	O
appendage	pointer
,	O
int	O
info	int
)	O
;	O
void	O
display_version	function
(	O
const	O
char	O
*	O
progname	pointer
,	O
const	O
char	O
*	O
written	pointer
,	O
const	O
char	O
*	O
copyright	pointer
)	O
;	O
bool	enum
elementp	function
(	O
int	O
item	int
,	O
const	O
int	O
*	O
list	pointer
)	O
{	O
int	O
list_item	int
;	O
while	O
(	O
(	O
list_item	int
=	O
*	O
list	pointer
++	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
item	int
==	O
list_item	int
)	O
return	O
true	int
;	O
}	O
return	O
false	int
;	O
}	O
void	O
display_usage	function
(	O
const	O
char	O
*	O
progname	pointer
,	O
const	O
int	O
*	O
omit_vals	pointer
,	O
const	O
char	O
*	O
appendage	pointer
,	O
int	O
info	int
)	O
{	O
int	O
i	int
;	O
int	O
col	int
=	O
0	int
;	O
fprintf	function
(	O
stdout	pointer
,	O
"Usage: %s"	pointer
,	O
progname	pointer
)	O
;	O
col	int
+=	O
(	O
strlen	function
(	O
progname	pointer
)	O
+	O
7	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
long_options	array
[	O
i	int
]	O
.	O
name	pointer
;	O
i	int
++	O
)	O
{	O
int	O
option_len	int
;	O
if	O
(	O
elementp	function
(	O
long_options	array
[	O
i	int
]	O
.	O
val	int
,	O
omit_vals	pointer
)	O
)	O
continue	O
;	O
option_len	int
=	O
strlen	function
(	O
long_options	array
[	O
i	int
]	O
.	O
name	pointer
)	O
;	O
if	O
(	O
col	int
>=	O
80	int
-	O
(	O
option_len	int
+	O
16	int
)	O
)	O
{	O
fputs	function
(	O
"\n\t"	pointer
,	O
stdout	pointer
)	O
;	O
col	int
=	O
8	int
;	O
}	O
fprintf	function
(	O
stdout	pointer
,	O
" [--%s"	pointer
,	O
long_options	array
[	O
i	int
]	O
.	O
name	pointer
)	O
;	O
col	int
+=	O
(	O
option_len	int
+	O
4	int
)	O
;	O
if	O
(	O
(	O
unsigned	O
int	O
)	O
(	O
long_options	array
[	O
i	int
]	O
.	O
val	int
)	O
<	O
256	int
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
" | -%c"	pointer
,	O
long_options	array
[	O
i	int
]	O
.	O
val	int
)	O
;	O
col	int
+=	O
5	int
;	O
}	O
if	O
(	O
long_options	array
[	O
i	int
]	O
.	O
has_arg	int
==	O
ARG_REQUIRED	int
)	O
{	O
fputs	function
(	O
" arg]"	pointer
,	O
stdout	pointer
)	O
;	O
col	int
+=	O
5	int
;	O
}	O
else	O
if	O
(	O
long_options	array
[	O
i	int
]	O
.	O
has_arg	int
==	O
ARG_OPTIONAL	int
)	O
{	O
fputs	function
(	O
" [arg(s)]]"	pointer
,	O
stdout	pointer
)	O
;	O
col	int
+=	O
10	int
;	O
}	O
else	O
{	O
fputs	function
(	O
"]"	pointer
,	O
stdout	pointer
)	O
;	O
col	int
++	O
;	O
}	O
}	O
if	O
(	O
appendage	pointer
!=	O
NULL	O
)	O
fputs	function
(	O
appendage	pointer
,	O
stdout	pointer
)	O
;	O
else	O
fputs	function
(	O
"\n"	pointer
,	O
stdout	pointer
)	O
;	O
if	O
(	O
info	int
==	O
1	int
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"\nTo specify an output format, type `%s -T \"format\"',\nwhere \"format\" is one of:\n"	pointer
,	O
progname	pointer
)	O
;	O
}	O
else	O
if	O
(	O
info	int
==	O
2	int
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"\nTo list available fonts, type `%s -T \"format\" --help-fonts',\nwhere \"format\" is the output format, and is one of:\n"	pointer
,	O
progname	pointer
)	O
;	O
}	O
if	O
(	O
info	int
==	O
1	int
||	O
info	int
==	O
2	int
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"pnm or gif (bitmap formats), or\nsvg, ps, ai, cgm, fig, pcl, hpgl, regis, or tek (vector formats).\n"	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"The default format is \"meta\", which is probably not what you want.\n"	pointer
)	O
;	O
}	O
if	O
(	O
(	O
appendage	pointer
!=	O
NULL	O
)	O
||	O
info	int
==	O
1	int
||	O
info	int
==	O
2	int
)	O
fputs	function
(	O
"\n"	pointer
,	O
stdout	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"Report bugs to %s.\n"	pointer
,	O
PACKAGE_BUGREPORT	pointer
)	O
;	O
}	O
void	O
display_version	function
(	O
const	O
char	O
*	O
progname	pointer
,	O
const	O
char	O
*	O
written	pointer
,	O
const	O
char	O
*	O
copyright	pointer
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"%s (%s) %s\n"	pointer
,	O
progname	pointer
,	O
PACKAGE_NAME	pointer
,	O
PACKAGE_VERSION	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"%s\n"	pointer
,	O
copyright	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"%s"	pointer
,	O
"This is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n"	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"%s\n"	pointer
,	O
written	pointer
)	O
;	O
}	O
