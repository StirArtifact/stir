static	O
const	O
uint8_t	char
q0	array
[	O
256	int
]	O
=	O
{	O
0xA9	int
,	O
0x67	int
,	O
0xB3	int
,	O
0xE8	int
,	O
0x04	int
,	O
0xFD	int
,	O
0xA3	int
,	O
0x76	int
,	O
0x9A	int
,	O
0x92	int
,	O
0x80	int
,	O
0x78	int
,	O
0xE4	int
,	O
0xDD	int
,	O
0xD1	int
,	O
0x38	int
,	O
0x0D	int
,	O
0xC6	int
,	O
0x35	int
,	O
0x98	int
,	O
0x18	int
,	O
0xF7	int
,	O
0xEC	int
,	O
0x6C	int
,	O
0x43	int
,	O
0x75	int
,	O
0x37	int
,	O
0x26	int
,	O
0xFA	int
,	O
0x13	int
,	O
0x94	int
,	O
0x48	int
,	O
0xF2	int
,	O
0xD0	int
,	O
0x8B	int
,	O
0x30	int
,	O
0x84	int
,	O
0x54	int
,	O
0xDF	int
,	O
0x23	int
,	O
0x19	int
,	O
0x5B	int
,	O
0x3D	int
,	O
0x59	int
,	O
0xF3	int
,	O
0xAE	int
,	O
0xA2	int
,	O
0x82	int
,	O
0x63	int
,	O
0x01	int
,	O
0x83	int
,	O
0x2E	int
,	O
0xD9	int
,	O
0x51	int
,	O
0x9B	int
,	O
0x7C	int
,	O
0xA6	int
,	O
0xEB	int
,	O
0xA5	int
,	O
0xBE	int
,	O
0x16	int
,	O
0x0C	int
,	O
0xE3	int
,	O
0x61	int
,	O
0xC0	int
,	O
0x8C	int
,	O
0x3A	int
,	O
0xF5	int
,	O
0x73	int
,	O
0x2C	int
,	O
0x25	int
,	O
0x0B	int
,	O
0xBB	int
,	O
0x4E	int
,	O
0x89	int
,	O
0x6B	int
,	O
0x53	int
,	O
0x6A	int
,	O
0xB4	int
,	O
0xF1	int
,	O
0xE1	int
,	O
0xE6	int
,	O
0xBD	int
,	O
0x45	int
,	O
0xE2	int
,	O
0xF4	int
,	O
0xB6	int
,	O
0x66	int
,	O
0xCC	int
,	O
0x95	int
,	O
0x03	int
,	O
0x56	int
,	O
0xD4	int
,	O
0x1C	int
,	O
0x1E	int
,	O
0xD7	int
,	O
0xFB	int
,	O
0xC3	int
,	O
0x8E	int
,	O
0xB5	int
,	O
0xE9	int
,	O
0xCF	int
,	O
0xBF	int
,	O
0xBA	int
,	O
0xEA	int
,	O
0x77	int
,	O
0x39	int
,	O
0xAF	int
,	O
0x33	int
,	O
0xC9	int
,	O
0x62	int
,	O
0x71	int
,	O
0x81	int
,	O
0x79	int
,	O
0x09	int
,	O
0xAD	int
,	O
0x24	int
,	O
0xCD	int
,	O
0xF9	int
,	O
0xD8	int
,	O
0xE5	int
,	O
0xC5	int
,	O
0xB9	int
,	O
0x4D	int
,	O
0x44	int
,	O
0x08	int
,	O
0x86	int
,	O
0xE7	int
,	O
0xA1	int
,	O
0x1D	int
,	O
0xAA	int
,	O
0xED	int
,	O
0x06	int
,	O
0x70	int
,	O
0xB2	int
,	O
0xD2	int
,	O
0x41	int
,	O
0x7B	int
,	O
0xA0	int
,	O
0x11	int
,	O
0x31	int
,	O
0xC2	int
,	O
0x27	int
,	O
0x90	int
,	O
0x20	int
,	O
0xF6	int
,	O
0x60	int
,	O
0xFF	int
,	O
0x96	int
,	O
0x5C	int
,	O
0xB1	int
,	O
0xAB	int
,	O
0x9E	int
,	O
0x9C	int
,	O
0x52	int
,	O
0x1B	int
,	O
0x5F	int
,	O
0x93	int
,	O
0x0A	int
,	O
0xEF	int
,	O
0x91	int
,	O
0x85	int
,	O
0x49	int
,	O
0xEE	int
,	O
0x2D	int
,	O
0x4F	int
,	O
0x8F	int
,	O
0x3B	int
,	O
0x47	int
,	O
0x87	int
,	O
0x6D	int
,	O
0x46	int
,	O
0xD6	int
,	O
0x3E	int
,	O
0x69	int
,	O
0x64	int
,	O
0x2A	int
,	O
0xCE	int
,	O
0xCB	int
,	O
0x2F	int
,	O
0xFC	int
,	O
0x97	int
,	O
0x05	int
,	O
0x7A	int
,	O
0xAC	int
,	O
0x7F	int
,	O
0xD5	int
,	O
0x1A	int
,	O
0x4B	int
,	O
0x0E	int
,	O
0xA7	int
,	O
0x5A	int
,	O
0x28	int
,	O
0x14	int
,	O
0x3F	int
,	O
0x29	int
,	O
0x88	int
,	O
0x3C	int
,	O
0x4C	int
,	O
0x02	int
,	O
0xB8	int
,	O
0xDA	int
,	O
0xB0	int
,	O
0x17	int
,	O
0x55	int
,	O
0x1F	int
,	O
0x8A	int
,	O
0x7D	int
,	O
0x57	int
,	O
0xC7	int
,	O
0x8D	int
,	O
0x74	int
,	O
0xB7	int
,	O
0xC4	int
,	O
0x9F	int
,	O
0x72	int
,	O
0x7E	int
,	O
0x15	int
,	O
0x22	int
,	O
0x12	int
,	O
0x58	int
,	O
0x07	int
,	O
0x99	int
,	O
0x34	int
,	O
0x6E	int
,	O
0x50	int
,	O
0xDE	int
,	O
0x68	int
,	O
0x65	int
,	O
0xBC	int
,	O
0xDB	int
,	O
0xF8	int
,	O
0xC8	int
,	O
0xA8	int
,	O
0x2B	int
,	O
0x40	int
,	O
0xDC	int
,	O
0xFE	int
,	O
0x32	int
,	O
0xA4	int
,	O
0xCA	int
,	O
0x10	int
,	O
0x21	int
,	O
0xF0	int
,	O
0xD3	int
,	O
0x5D	int
,	O
0x0F	int
,	O
0x00	int
,	O
0x6F	int
,	O
0x9D	int
,	O
0x36	int
,	O
0x42	int
,	O
0x4A	int
,	O
0x5E	int
,	O
0xC1	int
,	O
0xE0	int
,	O
}	O
;	O
static	O
const	O
uint8_t	char
q1	array
[	O
256	int
]	O
=	O
{	O
0x75	int
,	O
0xF3	int
,	O
0xC6	int
,	O
0xF4	int
,	O
0xDB	int
,	O
0x7B	int
,	O
0xFB	int
,	O
0xC8	int
,	O
0x4A	int
,	O
0xD3	int
,	O
0xE6	int
,	O
0x6B	int
,	O
0x45	int
,	O
0x7D	int
,	O
0xE8	int
,	O
0x4B	int
,	O
0xD6	int
,	O
0x32	int
,	O
0xD8	int
,	O
0xFD	int
,	O
0x37	int
,	O
0x71	int
,	O
0xF1	int
,	O
0xE1	int
,	O
0x30	int
,	O
0x0F	int
,	O
0xF8	int
,	O
0x1B	int
,	O
0x87	int
,	O
0xFA	int
,	O
0x06	int
,	O
0x3F	int
,	O
0x5E	int
,	O
0xBA	int
,	O
0xAE	int
,	O
0x5B	int
,	O
0x8A	int
,	O
0x00	int
,	O
0xBC	int
,	O
0x9D	int
,	O
0x6D	int
,	O
0xC1	int
,	O
0xB1	int
,	O
0x0E	int
,	O
0x80	int
,	O
0x5D	int
,	O
0xD2	int
,	O
0xD5	int
,	O
0xA0	int
,	O
0x84	int
,	O
0x07	int
,	O
0x14	int
,	O
0xB5	int
,	O
0x90	int
,	O
0x2C	int
,	O
0xA3	int
,	O
0xB2	int
,	O
0x73	int
,	O
0x4C	int
,	O
0x54	int
,	O
0x92	int
,	O
0x74	int
,	O
0x36	int
,	O
0x51	int
,	O
0x38	int
,	O
0xB0	int
,	O
0xBD	int
,	O
0x5A	int
,	O
0xFC	int
,	O
0x60	int
,	O
0x62	int
,	O
0x96	int
,	O
0x6C	int
,	O
0x42	int
,	O
0xF7	int
,	O
0x10	int
,	O
0x7C	int
,	O
0x28	int
,	O
0x27	int
,	O
0x8C	int
,	O
0x13	int
,	O
0x95	int
,	O
0x9C	int
,	O
0xC7	int
,	O
0x24	int
,	O
0x46	int
,	O
0x3B	int
,	O
0x70	int
,	O
0xCA	int
,	O
0xE3	int
,	O
0x85	int
,	O
0xCB	int
,	O
0x11	int
,	O
0xD0	int
,	O
0x93	int
,	O
0xB8	int
,	O
0xA6	int
,	O
0x83	int
,	O
0x20	int
,	O
0xFF	int
,	O
0x9F	int
,	O
0x77	int
,	O
0xC3	int
,	O
0xCC	int
,	O
0x03	int
,	O
0x6F	int
,	O
0x08	int
,	O
0xBF	int
,	O
0x40	int
,	O
0xE7	int
,	O
0x2B	int
,	O
0xE2	int
,	O
0x79	int
,	O
0x0C	int
,	O
0xAA	int
,	O
0x82	int
,	O
0x41	int
,	O
0x3A	int
,	O
0xEA	int
,	O
0xB9	int
,	O
0xE4	int
,	O
0x9A	int
,	O
0xA4	int
,	O
0x97	int
,	O
0x7E	int
,	O
0xDA	int
,	O
0x7A	int
,	O
0x17	int
,	O
0x66	int
,	O
0x94	int
,	O
0xA1	int
,	O
0x1D	int
,	O
0x3D	int
,	O
0xF0	int
,	O
0xDE	int
,	O
0xB3	int
,	O
0x0B	int
,	O
0x72	int
,	O
0xA7	int
,	O
0x1C	int
,	O
0xEF	int
,	O
0xD1	int
,	O
0x53	int
,	O
0x3E	int
,	O
0x8F	int
,	O
0x33	int
,	O
0x26	int
,	O
0x5F	int
,	O
0xEC	int
,	O
0x76	int
,	O
0x2A	int
,	O
0x49	int
,	O
0x81	int
,	O
0x88	int
,	O
0xEE	int
,	O
0x21	int
,	O
0xC4	int
,	O
0x1A	int
,	O
0xEB	int
,	O
0xD9	int
,	O
0xC5	int
,	O
0x39	int
,	O
0x99	int
,	O
0xCD	int
,	O
0xAD	int
,	O
0x31	int
,	O
0x8B	int
,	O
0x01	int
,	O
0x18	int
,	O
0x23	int
,	O
0xDD	int
,	O
0x1F	int
,	O
0x4E	int
,	O
0x2D	int
,	O
0xF9	int
,	O
0x48	int
,	O
0x4F	int
,	O
0xF2	int
,	O
0x65	int
,	O
0x8E	int
,	O
0x78	int
,	O
0x5C	int
,	O
0x58	int
,	O
0x19	int
,	O
0x8D	int
,	O
0xE5	int
,	O
0x98	int
,	O
0x57	int
,	O
0x67	int
,	O
0x7F	int
,	O
0x05	int
,	O
0x64	int
,	O
0xAF	int
,	O
0x63	int
,	O
0xB6	int
,	O
0xFE	int
,	O
0xF5	int
,	O
0xB7	int
,	O
0x3C	int
,	O
0xA5	int
,	O
0xCE	int
,	O
0xE9	int
,	O
0x68	int
,	O
0x44	int
,	O
0xE0	int
,	O
0x4D	int
,	O
0x43	int
,	O
0x69	int
,	O
0x29	int
,	O
0x2E	int
,	O
0xAC	int
,	O
0x15	int
,	O
0x59	int
,	O
0xA8	int
,	O
0x0A	int
,	O
0x9E	int
,	O
0x6E	int
,	O
0x47	int
,	O
0xDF	int
,	O
0x34	int
,	O
0x35	int
,	O
0x6A	int
,	O
0xCF	int
,	O
0xDC	int
,	O
0x22	int
,	O
0xC9	int
,	O
0xC0	int
,	O
0x9B	int
,	O
0x89	int
,	O
0xD4	int
,	O
0xED	int
,	O
0xAB	int
,	O
0x12	int
,	O
0xA2	int
,	O
0x0D	int
,	O
0x52	int
,	O
0xBB	int
,	O
0x02	int
,	O
0x2F	int
,	O
0xA9	int
,	O
0xD7	int
,	O
0x61	int
,	O
0x1E	int
,	O
0xB4	int
,	O
0x50	int
,	O
0x04	int
,	O
0xF6	int
,	O
0xC2	int
,	O
0x16	int
,	O
0x25	int
,	O
0x86	int
,	O
0x56	int
,	O
0x55	int
,	O
0x09	int
,	O
0xBE	int
,	O
0x91	int
,	O
}	O
;	O
static	O
uint32_t	int
gf_multiply	function
(	O
uint8_t	char
p	pointer
,	O
uint8_t	char
a	char
,	O
uint8_t	char
b	array
)	O
{	O
uint32_t	int
shift	int
=	O
b	array
;	O
uint8_t	char
result	char
=	O
0	int
;	O
while	O
(	O
a	char
)	O
{	O
if	O
(	O
a	char
&	O
1	int
)	O
result	char
^=	O
shift	int
;	O
a	char
=	O
a	char
>>	O
1	int
;	O
shift	int
=	O
shift	int
<<	O
1	int
;	O
if	O
(	O
shift	int
&	O
0x100	int
)	O
shift	int
^=	O
p	pointer
;	O
}	O
return	O
result	char
;	O
}	O
static	O
const	O
uint8_t	char
rs_matrix	array
[	O
4	int
]	O
[	O
8	int
]	O
=	O
{	O
{	O
0x01	int
,	O
0xA4	int
,	O
0x55	int
,	O
0x87	int
,	O
0x5A	int
,	O
0x58	int
,	O
0xDB	int
,	O
0x9E	int
}	O
,	O
{	O
0xA4	int
,	O
0x56	int
,	O
0x82	int
,	O
0xF3	int
,	O
0x1E	int
,	O
0xC6	int
,	O
0x68	int
,	O
0xE5	int
}	O
,	O
{	O
0x02	int
,	O
0xA1	int
,	O
0xFC	int
,	O
0xC1	int
,	O
0x47	int
,	O
0xAE	int
,	O
0x3D	int
,	O
0x19	int
}	O
,	O
{	O
0xA4	int
,	O
0x55	int
,	O
0x87	int
,	O
0x5A	int
,	O
0x58	int
,	O
0xDB	int
,	O
0x9E	int
,	O
0x03	int
}	O
}	O
;	O
static	O
uint32_t	int
compute_s	function
(	O
uint32_t	int
m1	int
,	O
uint32_t	int
m2	int
)	O
{	O
uint32_t	int
s	int
=	O
0	int
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
)	O
s	int
|=	O
(	O
(	O
gf_multiply	function
(	O
0x4D	int
,	O
m1	int
,	O
rs_matrix	array
[	O
i	int
]	O
[	O
0	int
]	O
)	O
^	O
gf_multiply	function
(	O
0x4D	int
,	O
m1	int
>>	O
8	int
,	O
rs_matrix	array
[	O
i	int
]	O
[	O
1	int
]	O
)	O
^	O
gf_multiply	function
(	O
0x4D	int
,	O
m1	int
>>	O
16	int
,	O
rs_matrix	array
[	O
i	int
]	O
[	O
2	int
]	O
)	O
^	O
gf_multiply	function
(	O
0x4D	int
,	O
m1	int
>>	O
24	int
,	O
rs_matrix	array
[	O
i	int
]	O
[	O
3	int
]	O
)	O
^	O
gf_multiply	function
(	O
0x4D	int
,	O
m2	int
,	O
rs_matrix	array
[	O
i	int
]	O
[	O
4	int
]	O
)	O
^	O
gf_multiply	function
(	O
0x4D	int
,	O
m2	int
>>	O
8	int
,	O
rs_matrix	array
[	O
i	int
]	O
[	O
5	int
]	O
)	O
^	O
gf_multiply	function
(	O
0x4D	int
,	O
m2	int
>>	O
16	int
,	O
rs_matrix	array
[	O
i	int
]	O
[	O
6	int
]	O
)	O
^	O
gf_multiply	function
(	O
0x4D	int
,	O
m2	int
>>	O
24	int
,	O
rs_matrix	array
[	O
i	int
]	O
[	O
7	int
]	O
)	O
)	O
<<	O
(	O
i	int
*	O
8	int
)	O
)	O
;	O
return	O
s	int
;	O
}	O
static	O
const	O
uint8_t	char
*	O
const	O
q_table	array
[	O
4	int
]	O
[	O
5	int
]	O
=	O
{	O
{	O
q1	array
,	O
q1	array
,	O
q0	array
,	O
q0	array
,	O
q1	array
}	O
,	O
{	O
q0	array
,	O
q1	array
,	O
q1	array
,	O
q0	array
,	O
q0	array
}	O
,	O
{	O
q0	array
,	O
q0	array
,	O
q0	array
,	O
q1	array
,	O
q1	array
}	O
,	O
{	O
q1	array
,	O
q0	array
,	O
q1	array
,	O
q1	array
,	O
q0	array
}	O
}	O
;	O
static	O
const	O
uint8_t	char
mds_matrix	array
[	O
4	int
]	O
[	O
4	int
]	O
=	O
{	O
{	O
0x01	int
,	O
0xEF	int
,	O
0x5B	int
,	O
0x5B	int
}	O
,	O
{	O
0x5B	int
,	O
0xEF	int
,	O
0xEF	int
,	O
0x01	int
}	O
,	O
{	O
0xEF	int
,	O
0x5B	int
,	O
0x01	int
,	O
0xEF	int
}	O
,	O
{	O
0xEF	int
,	O
0x01	int
,	O
0xEF	int
,	O
0x5B	int
}	O
}	O
;	O
static	O
uint32_t	int
h_byte	function
(	O
int	O
k	int
,	O
int	O
i	int
,	O
uint8_t	char
x	char
,	O
uint8_t	char
l0	char
,	O
uint8_t	char
l1	char
,	O
uint8_t	char
l2	char
,	O
uint8_t	char
l3	char
)	O
{	O
uint8_t	char
y	char
=	O
q_table	array
[	O
i	int
]	O
[	O
4	int
]	O
[	O
l0	char
^	O
q_table	array
[	O
i	int
]	O
[	O
3	int
]	O
[	O
l1	char
^	O
q_table	array
[	O
i	int
]	O
[	O
2	int
]	O
[	O
k	int
==	O
2	int
?	O
x	char
:	O
l2	char
^	O
q_table	array
[	O
i	int
]	O
[	O
1	int
]	O
[	O
k	int
==	O
3	int
?	O
x	char
:	O
l3	char
^	O
q_table	array
[	O
i	int
]	O
[	O
0	int
]	O
[	O
x	char
]	O
]	O
]	O
]	O
]	O
;	O
return	O
(	O
(	O
gf_multiply	function
(	O
0x69	int
,	O
mds_matrix	array
[	O
0	int
]	O
[	O
i	int
]	O
,	O
y	char
)	O
)	O
|	O
(	O
gf_multiply	function
(	O
0x69	int
,	O
mds_matrix	array
[	O
1	int
]	O
[	O
i	int
]	O
,	O
y	char
)	O
<<	O
8	int
)	O
|	O
(	O
gf_multiply	function
(	O
0x69	int
,	O
mds_matrix	array
[	O
2	int
]	O
[	O
i	int
]	O
,	O
y	char
)	O
<<	O
16	int
)	O
|	O
(	O
gf_multiply	function
(	O
0x69	int
,	O
mds_matrix	array
[	O
3	int
]	O
[	O
i	int
]	O
,	O
y	char
)	O
<<	O
24	int
)	O
)	O
;	O
}	O
static	O
uint32_t	int
h	function
(	O
int	O
k	int
,	O
uint8_t	char
x	char
,	O
uint32_t	int
l0	char
,	O
uint32_t	int
l1	char
,	O
uint32_t	int
l2	char
,	O
uint32_t	int
l3	char
)	O
{	O
return	O
(	O
h_byte	function
(	O
k	int
,	O
0	int
,	O
x	char
,	O
l0	char
,	O
l1	char
,	O
l2	char
,	O
l3	char
)	O
^	O
h_byte	function
(	O
k	int
,	O
1	int
,	O
x	char
,	O
l0	char
>>	O
8	int
,	O
l1	char
>>	O
8	int
,	O
l2	char
>>	O
8	int
,	O
l3	char
>>	O
8	int
)	O
^	O
h_byte	function
(	O
k	int
,	O
2	int
,	O
x	char
,	O
l0	char
>>	O
16	int
,	O
l1	char
>>	O
16	int
,	O
l2	char
>>	O
16	int
,	O
l3	char
>>	O
16	int
)	O
^	O
h_byte	function
(	O
k	int
,	O
3	int
,	O
x	char
,	O
l0	char
>>	O
24	int
,	O
l1	char
>>	O
24	int
,	O
l2	char
>>	O
24	int
,	O
l3	char
>>	O
24	int
)	O
)	O
;	O
}	O
void	O
twofish_set_key	O
(	O
struct	O
twofish_ctx	struct
*	O
context	pointer
,	O
size_t	long
keysize	long
,	O
const	O
uint8_t	char
*	O
key	pointer
)	O
{	O
uint8_t	char
key_copy	array
[	O
32	int
]	O
;	O
uint32_t	int
m	array
[	O
8	int
]	O
,	O
s	int
[	O
4	int
]	O
,	O
t	int
;	O
int	O
i	int
,	O
j	int
,	O
k	int
;	O
assert	O
(	O
keysize	long
<=	O
32	int
)	O
;	O
memset	function
(	O
key_copy	array
,	O
0	int
,	O
32	int
)	O
;	O
memcpy	function
(	O
key_copy	array
,	O
key	pointer
,	O
keysize	long
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
8	int
;	O
i	int
++	O
)	O
m	array
[	O
i	int
]	O
=	O
LE_READ_UINT32	O
(	O
key_copy	array
+	O
i	int
*	O
4	int
)	O
;	O
if	O
(	O
keysize	long
<=	O
16	int
)	O
k	int
=	O
2	int
;	O
else	O
if	O
(	O
keysize	long
<=	O
24	int
)	O
k	int
=	O
3	int
;	O
else	O
k	int
=	O
4	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
20	int
;	O
i	int
++	O
)	O
{	O
t	int
=	O
h	function
(	O
k	int
,	O
2	int
*	O
i	int
+	O
1	int
,	O
m	array
[	O
1	int
]	O
,	O
m	array
[	O
3	int
]	O
,	O
m	array
[	O
5	int
]	O
,	O
m	array
[	O
7	int
]	O
)	O
;	O
t	int
=	O
rol8	O
(	O
t	int
)	O
;	O
t	int
+=	O
(	O
context	pointer
->	O
keys	array
[	O
2	int
*	O
i	int
]	O
=	O
t	int
+	O
h	function
(	O
k	int
,	O
2	int
*	O
i	int
,	O
m	array
[	O
0	int
]	O
,	O
m	array
[	O
2	int
]	O
,	O
m	array
[	O
4	int
]	O
,	O
m	array
[	O
6	int
]	O
)	O
)	O
;	O
t	int
=	O
rol9	O
(	O
t	int
)	O
;	O
context	pointer
->	O
keys	array
[	O
2	int
*	O
i	int
+	O
1	int
]	O
=	O
t	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
k	int
;	O
i	int
++	O
)	O
s	int
[	O
k	int
-	O
1	int
-	O
i	int
]	O
=	O
compute_s	function
(	O
m	array
[	O
2	int
*	O
i	int
]	O
,	O
m	array
[	O
2	int
*	O
i	int
+	O
1	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
)	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
256	int
;	O
j	int
++	O
)	O
context	pointer
->	O
s_box	array
[	O
i	int
]	O
[	O
j	int
]	O
=	O
h_byte	function
(	O
k	int
,	O
i	int
,	O
j	int
,	O
s	int
[	O
0	int
]	O
>>	O
(	O
i	int
*	O
8	int
)	O
,	O
s	int
[	O
1	int
]	O
>>	O
(	O
i	int
*	O
8	int
)	O
,	O
s	int
[	O
2	int
]	O
>>	O
(	O
i	int
*	O
8	int
)	O
,	O
s	int
[	O
3	int
]	O
>>	O
(	O
i	int
*	O
8	int
)	O
)	O
;	O
}	O
void	O
twofish128_set_key	O
(	O
struct	O
twofish_ctx	struct
*	O
context	pointer
,	O
const	O
uint8_t	char
*	O
key	pointer
)	O
{	O
twofish_set_key	O
(	O
context	pointer
,	O
TWOFISH128_KEY_SIZE	int
,	O
key	pointer
)	O
;	O
}	O
void	O
twofish192_set_key	O
(	O
struct	O
twofish_ctx	struct
*	O
context	pointer
,	O
const	O
uint8_t	char
*	O
key	pointer
)	O
{	O
twofish_set_key	O
(	O
context	pointer
,	O
TWOFISH192_KEY_SIZE	int
,	O
key	pointer
)	O
;	O
}	O
void	O
twofish256_set_key	O
(	O
struct	O
twofish_ctx	struct
*	O
context	pointer
,	O
const	O
uint8_t	char
*	O
key	pointer
)	O
{	O
twofish_set_key	O
(	O
context	pointer
,	O
TWOFISH256_KEY_SIZE	int
,	O
key	pointer
)	O
;	O
}	O
void	O
twofish_encrypt	O
(	O
const	O
struct	O
twofish_ctx	struct
*	O
context	pointer
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
ciphertext	pointer
,	O
const	O
uint8_t	char
*	O
plaintext	pointer
)	O
{	O
const	O
uint32_t	int
*	O
keys	array
=	O
context	pointer
->	O
keys	array
;	O
const	O
uint32_t	int
(	O
*	O
s_box	array
)	O
[	O
256	int
]	O
=	O
context	pointer
->	O
s_box	array
;	O
assert	O
(	O
!	O
(	O
length	long
%	O
TWOFISH_BLOCK_SIZE	int
)	O
)	O
;	O
for	O
(	O
;	O
length	long
;	O
length	long
-=	O
TWOFISH_BLOCK_SIZE	int
)	O
{	O
uint32_t	int
words	array
[	O
4	int
]	O
;	O
uint32_t	int
r0	int
,	O
r1	int
,	O
r2	int
,	O
r3	int
,	O
t0	int
,	O
t1	int
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
,	O
plaintext	pointer
+=	O
4	int
)	O
words	array
[	O
i	int
]	O
=	O
LE_READ_UINT32	O
(	O
plaintext	pointer
)	O
;	O
r0	int
=	O
words	array
[	O
0	int
]	O
^	O
keys	array
[	O
0	int
]	O
;	O
r1	int
=	O
words	array
[	O
1	int
]	O
^	O
keys	array
[	O
1	int
]	O
;	O
r2	int
=	O
words	array
[	O
2	int
]	O
^	O
keys	array
[	O
2	int
]	O
;	O
r3	int
=	O
words	array
[	O
3	int
]	O
^	O
keys	array
[	O
3	int
]	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
8	int
;	O
i	int
++	O
)	O
{	O
t1	int
=	O
(	O
s_box	array
[	O
1	int
]	O
[	O
r1	int
&	O
0xFF	int
]	O
^	O
s_box	array
[	O
2	int
]	O
[	O
(	O
r1	int
>>	O
8	int
)	O
&	O
0xFF	int
]	O
^	O
s_box	array
[	O
3	int
]	O
[	O
(	O
r1	int
>>	O
16	int
)	O
&	O
0xFF	int
]	O
^	O
s_box	array
[	O
0	int
]	O
[	O
(	O
r1	int
>>	O
24	int
)	O
&	O
0xFF	int
]	O
)	O
;	O
t0	int
=	O
(	O
s_box	array
[	O
0	int
]	O
[	O
r0	int
&	O
0xFF	int
]	O
^	O
s_box	array
[	O
1	int
]	O
[	O
(	O
r0	int
>>	O
8	int
)	O
&	O
0xFF	int
]	O
^	O
s_box	array
[	O
2	int
]	O
[	O
(	O
r0	int
>>	O
16	int
)	O
&	O
0xFF	int
]	O
^	O
s_box	array
[	O
3	int
]	O
[	O
(	O
r0	int
>>	O
24	int
)	O
&	O
0xFF	int
]	O
)	O
+	O
t1	int
;	O
r3	int
=	O
(	O
t1	int
+	O
t0	int
+	O
keys	array
[	O
4	int
*	O
i	int
+	O
9	int
]	O
)	O
^	O
rol1	O
(	O
r3	int
)	O
;	O
r2	int
=	O
(	O
t0	int
+	O
keys	array
[	O
4	int
*	O
i	int
+	O
8	int
]	O
)	O
^	O
r2	int
;	O
r2	int
=	O
ror1	O
(	O
r2	int
)	O
;	O
t1	int
=	O
(	O
s_box	array
[	O
1	int
]	O
[	O
r3	int
&	O
0xFF	int
]	O
^	O
s_box	array
[	O
2	int
]	O
[	O
(	O
r3	int
>>	O
8	int
)	O
&	O
0xFF	int
]	O
^	O
s_box	array
[	O
3	int
]	O
[	O
(	O
r3	int
>>	O
16	int
)	O
&	O
0xFF	int
]	O
^	O
s_box	array
[	O
0	int
]	O
[	O
(	O
r3	int
>>	O
24	int
)	O
&	O
0xFF	int
]	O
)	O
;	O
t0	int
=	O
(	O
s_box	array
[	O
0	int
]	O
[	O
r2	int
&	O
0xFF	int
]	O
^	O
s_box	array
[	O
1	int
]	O
[	O
(	O
r2	int
>>	O
8	int
)	O
&	O
0xFF	int
]	O
^	O
s_box	array
[	O
2	int
]	O
[	O
(	O
r2	int
>>	O
16	int
)	O
&	O
0xFF	int
]	O
^	O
s_box	array
[	O
3	int
]	O
[	O
(	O
r2	int
>>	O
24	int
)	O
&	O
0xFF	int
]	O
)	O
+	O
t1	int
;	O
r1	int
=	O
(	O
t1	int
+	O
t0	int
+	O
keys	array
[	O
4	int
*	O
i	int
+	O
11	int
]	O
)	O
^	O
rol1	O
(	O
r1	int
)	O
;	O
r0	int
=	O
(	O
t0	int
+	O
keys	array
[	O
4	int
*	O
i	int
+	O
10	int
]	O
)	O
^	O
r0	int
;	O
r0	int
=	O
ror1	O
(	O
r0	int
)	O
;	O
}	O
words	array
[	O
0	int
]	O
=	O
r2	int
^	O
keys	array
[	O
4	int
]	O
;	O
words	array
[	O
1	int
]	O
=	O
r3	int
^	O
keys	array
[	O
5	int
]	O
;	O
words	array
[	O
2	int
]	O
=	O
r0	int
^	O
keys	array
[	O
6	int
]	O
;	O
words	array
[	O
3	int
]	O
=	O
r1	int
^	O
keys	array
[	O
7	int
]	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
,	O
ciphertext	pointer
+=	O
4	int
)	O
LE_WRITE_UINT32	O
(	O
ciphertext	pointer
,	O
words	array
[	O
i	int
]	O
)	O
;	O
}	O
}	O
void	O
twofish_decrypt	O
(	O
const	O
struct	O
twofish_ctx	struct
*	O
context	pointer
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
plaintext	pointer
,	O
const	O
uint8_t	char
*	O
ciphertext	pointer
)	O
{	O
const	O
uint32_t	int
*	O
keys	array
=	O
context	pointer
->	O
keys	array
;	O
const	O
uint32_t	int
(	O
*	O
s_box	array
)	O
[	O
256	int
]	O
=	O
context	pointer
->	O
s_box	array
;	O
assert	O
(	O
!	O
(	O
length	long
%	O
TWOFISH_BLOCK_SIZE	int
)	O
)	O
;	O
for	O
(	O
;	O
length	long
;	O
length	long
-=	O
TWOFISH_BLOCK_SIZE	int
)	O
{	O
uint32_t	int
words	array
[	O
4	int
]	O
;	O
uint32_t	int
r0	int
,	O
r1	int
,	O
r2	int
,	O
r3	int
,	O
t0	int
,	O
t1	int
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
,	O
ciphertext	pointer
+=	O
4	int
)	O
words	array
[	O
i	int
]	O
=	O
LE_READ_UINT32	O
(	O
ciphertext	pointer
)	O
;	O
r0	int
=	O
words	array
[	O
2	int
]	O
^	O
keys	array
[	O
6	int
]	O
;	O
r1	int
=	O
words	array
[	O
3	int
]	O
^	O
keys	array
[	O
7	int
]	O
;	O
r2	int
=	O
words	array
[	O
0	int
]	O
^	O
keys	array
[	O
4	int
]	O
;	O
r3	int
=	O
words	array
[	O
1	int
]	O
^	O
keys	array
[	O
5	int
]	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
8	int
;	O
i	int
++	O
)	O
{	O
t1	int
=	O
(	O
s_box	array
[	O
1	int
]	O
[	O
r3	int
&	O
0xFF	int
]	O
^	O
s_box	array
[	O
2	int
]	O
[	O
(	O
r3	int
>>	O
8	int
)	O
&	O
0xFF	int
]	O
^	O
s_box	array
[	O
3	int
]	O
[	O
(	O
r3	int
>>	O
16	int
)	O
&	O
0xFF	int
]	O
^	O
s_box	array
[	O
0	int
]	O
[	O
(	O
r3	int
>>	O
24	int
)	O
&	O
0xFF	int
]	O
)	O
;	O
t0	int
=	O
(	O
s_box	array
[	O
0	int
]	O
[	O
r2	int
&	O
0xFF	int
]	O
^	O
s_box	array
[	O
1	int
]	O
[	O
(	O
r2	int
>>	O
8	int
)	O
&	O
0xFF	int
]	O
^	O
s_box	array
[	O
2	int
]	O
[	O
(	O
r2	int
>>	O
16	int
)	O
&	O
0xFF	int
]	O
^	O
s_box	array
[	O
3	int
]	O
[	O
(	O
r2	int
>>	O
24	int
)	O
&	O
0xFF	int
]	O
)	O
+	O
t1	int
;	O
r1	int
=	O
(	O
t1	int
+	O
t0	int
+	O
keys	array
[	O
39	int
-	O
4	int
*	O
i	int
]	O
)	O
^	O
r1	int
;	O
r1	int
=	O
ror1	O
(	O
r1	int
)	O
;	O
r0	int
=	O
(	O
t0	int
+	O
keys	array
[	O
38	int
-	O
4	int
*	O
i	int
]	O
)	O
^	O
rol1	O
(	O
r0	int
)	O
;	O
t1	int
=	O
(	O
s_box	array
[	O
1	int
]	O
[	O
r1	int
&	O
0xFF	int
]	O
^	O
s_box	array
[	O
2	int
]	O
[	O
(	O
r1	int
>>	O
8	int
)	O
&	O
0xFF	int
]	O
^	O
s_box	array
[	O
3	int
]	O
[	O
(	O
r1	int
>>	O
16	int
)	O
&	O
0xFF	int
]	O
^	O
s_box	array
[	O
0	int
]	O
[	O
(	O
r1	int
>>	O
24	int
)	O
&	O
0xFF	int
]	O
)	O
;	O
t0	int
=	O
(	O
s_box	array
[	O
0	int
]	O
[	O
r0	int
&	O
0xFF	int
]	O
^	O
s_box	array
[	O
1	int
]	O
[	O
(	O
r0	int
>>	O
8	int
)	O
&	O
0xFF	int
]	O
^	O
s_box	array
[	O
2	int
]	O
[	O
(	O
r0	int
>>	O
16	int
)	O
&	O
0xFF	int
]	O
^	O
s_box	array
[	O
3	int
]	O
[	O
(	O
r0	int
>>	O
24	int
)	O
&	O
0xFF	int
]	O
)	O
+	O
t1	int
;	O
r3	int
=	O
(	O
t1	int
+	O
t0	int
+	O
keys	array
[	O
37	int
-	O
4	int
*	O
i	int
]	O
)	O
^	O
r3	int
;	O
r3	int
=	O
ror1	O
(	O
r3	int
)	O
;	O
r2	int
=	O
(	O
t0	int
+	O
keys	array
[	O
36	int
-	O
4	int
*	O
i	int
]	O
)	O
^	O
rol1	O
(	O
r2	int
)	O
;	O
}	O
words	array
[	O
0	int
]	O
=	O
r0	int
^	O
keys	array
[	O
0	int
]	O
;	O
words	array
[	O
1	int
]	O
=	O
r1	int
^	O
keys	array
[	O
1	int
]	O
;	O
words	array
[	O
2	int
]	O
=	O
r2	int
^	O
keys	array
[	O
2	int
]	O
;	O
words	array
[	O
3	int
]	O
=	O
r3	int
^	O
keys	array
[	O
3	int
]	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
,	O
plaintext	pointer
+=	O
4	int
)	O
LE_WRITE_UINT32	O
(	O
plaintext	pointer
,	O
words	array
[	O
i	int
]	O
)	O
;	O
}	O
}	O
