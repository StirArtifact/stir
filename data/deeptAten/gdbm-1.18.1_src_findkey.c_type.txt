int	O
gdbm_bucket_element_valid_p	function
(	O
GDBM_FILE	pointer
dbf	pointer
,	O
int	O
elem_loc	int
)	O
{	O
return	O
elem_loc	int
<	O
dbf	pointer
->	O
header	pointer
->	O
bucket_elems	int
&&	O
dbf	pointer
->	O
bucket	pointer
->	O
h_table	array
[	O
elem_loc	int
]	O
.	O
hash_value	int
!=	O
-	O
1	int
&&	O
dbf	pointer
->	O
bucket	pointer
->	O
h_table	array
[	O
elem_loc	int
]	O
.	O
key_size	int
>=	O
0	int
&&	O
off_t_sum_ok	function
(	O
dbf	pointer
->	O
bucket	pointer
->	O
h_table	array
[	O
elem_loc	int
]	O
.	O
data_pointer	long
,	O
dbf	pointer
->	O
bucket	pointer
->	O
h_table	array
[	O
elem_loc	int
]	O
.	O
key_size	int
)	O
&&	O
dbf	pointer
->	O
bucket	pointer
->	O
h_table	array
[	O
elem_loc	int
]	O
.	O
data_size	int
>=	O
0	int
&&	O
off_t_sum_ok	function
(	O
dbf	pointer
->	O
bucket	pointer
->	O
h_table	array
[	O
elem_loc	int
]	O
.	O
data_pointer	long
+	O
dbf	pointer
->	O
bucket	pointer
->	O
h_table	array
[	O
elem_loc	int
]	O
.	O
key_size	int
,	O
dbf	pointer
->	O
bucket	pointer
->	O
h_table	array
[	O
elem_loc	int
]	O
.	O
data_size	int
)	O
;	O
}	O
char	O
*	O
_gdbm_read_entry	function
(	O
GDBM_FILE	pointer
dbf	pointer
,	O
int	O
elem_loc	int
)	O
{	O
int	O
rc	int
;	O
int	O
key_size	int
;	O
int	O
data_size	int
;	O
size_t	long
dsize	int
;	O
off_t	long
file_pos	long
;	O
data_cache_elem	struct
*	O
data_ca	pointer
;	O
if	O
(	O
dbf	pointer
->	O
cache_entry	pointer
->	O
ca_data	struct
.	O
elem_loc	int
==	O
elem_loc	int
)	O
return	O
dbf	pointer
->	O
cache_entry	pointer
->	O
ca_data	struct
.	O
dptr	pointer
;	O
if	O
(	O
!	O
gdbm_bucket_element_valid_p	function
(	O
dbf	pointer
,	O
elem_loc	int
)	O
)	O
{	O
GDBM_SET_ERRNO	O
(	O
dbf	pointer
,	O
GDBM_BAD_HASH_TABLE	int
,	O
TRUE	int
)	O
;	O
return	O
NULL	O
;	O
}	O
key_size	int
=	O
dbf	pointer
->	O
bucket	pointer
->	O
h_table	array
[	O
elem_loc	int
]	O
.	O
key_size	int
;	O
data_size	int
=	O
dbf	pointer
->	O
bucket	pointer
->	O
h_table	array
[	O
elem_loc	int
]	O
.	O
data_size	int
;	O
dsize	int
=	O
key_size	int
+	O
data_size	int
;	O
data_ca	pointer
=	O
&	O
dbf	pointer
->	O
cache_entry	pointer
->	O
ca_data	struct
;	O
data_ca	pointer
->	O
key_size	int
=	O
key_size	int
;	O
data_ca	pointer
->	O
data_size	int
=	O
data_size	int
;	O
data_ca	pointer
->	O
elem_loc	int
=	O
elem_loc	int
;	O
data_ca	pointer
->	O
hash_val	int
=	O
dbf	pointer
->	O
bucket	pointer
->	O
h_table	array
[	O
elem_loc	int
]	O
.	O
hash_value	int
;	O
if	O
(	O
dsize	int
<=	O
data_ca	pointer
->	O
dsize	int
)	O
{	O
if	O
(	O
data_ca	pointer
->	O
dsize	int
==	O
0	int
)	O
{	O
data_ca	pointer
->	O
dptr	pointer
=	O
malloc	function
(	O
1	int
)	O
;	O
if	O
(	O
data_ca	pointer
->	O
dptr	pointer
)	O
data_ca	pointer
->	O
dsize	int
=	O
1	int
;	O
else	O
{	O
GDBM_SET_ERRNO2	O
(	O
dbf	pointer
,	O
GDBM_MALLOC_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_LOOKUP	O
)	O
;	O
_gdbm_fatal	function
(	O
dbf	pointer
,	O
_	O
(	O
"malloc error"	pointer
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
}	O
else	O
{	O
char	O
*	O
p	pointer
=	O
realloc	function
(	O
data_ca	pointer
->	O
dptr	pointer
,	O
dsize	int
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
data_ca	pointer
->	O
dptr	pointer
=	O
p	pointer
;	O
data_ca	pointer
->	O
dsize	int
=	O
dsize	int
;	O
}	O
else	O
{	O
GDBM_SET_ERRNO2	O
(	O
dbf	pointer
,	O
GDBM_MALLOC_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_LOOKUP	O
)	O
;	O
_gdbm_fatal	function
(	O
dbf	pointer
,	O
_	O
(	O
"malloc error"	pointer
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
file_pos	long
=	O
gdbm_file_seek	function
(	O
dbf	pointer
,	O
dbf	pointer
->	O
bucket	pointer
->	O
h_table	array
[	O
elem_loc	int
]	O
.	O
data_pointer	long
,	O
SEEK_SET	int
)	O
;	O
if	O
(	O
file_pos	long
!=	O
dbf	pointer
->	O
bucket	pointer
->	O
h_table	array
[	O
elem_loc	int
]	O
.	O
data_pointer	long
)	O
{	O
GDBM_SET_ERRNO2	O
(	O
dbf	pointer
,	O
GDBM_FILE_SEEK_ERROR	int
,	O
TRUE	int
,	O
GDBM_DEBUG_LOOKUP	O
)	O
;	O
_gdbm_fatal	function
(	O
dbf	pointer
,	O
_	O
(	O
"lseek error"	pointer
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
rc	int
=	O
_gdbm_full_read	function
(	O
dbf	pointer
,	O
data_ca	pointer
->	O
dptr	pointer
,	O
key_size	int
+	O
data_size	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_ERR	O
|	O
GDBM_DEBUG_LOOKUP	O
|	O
GDBM_DEBUG_READ	O
,	O
"%s: error reading entry: %s"	pointer
,	O
dbf	pointer
->	O
name	pointer
,	O
gdbm_db_strerror	function
(	O
dbf	pointer
)	O
)	O
;	O
dbf	pointer
->	O
need_recovery	int
=	O
TRUE	int
;	O
_gdbm_fatal	function
(	O
dbf	pointer
,	O
gdbm_db_strerror	function
(	O
dbf	pointer
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
return	O
data_ca	pointer
->	O
dptr	pointer
;	O
}	O
int	O
_gdbm_findkey	function
(	O
GDBM_FILE	pointer
dbf	pointer
,	O
datum	struct
key	struct
,	O
char	O
*	O
*	O
ret_dptr	pointer
,	O
int	O
*	O
ret_hash_val	pointer
)	O
{	O
int	O
bucket_hash_val	int
;	O
int	O
new_hash_val	int
;	O
char	O
*	O
file_key	pointer
;	O
int	O
bucket_dir	int
;	O
int	O
elem_loc	int
;	O
int	O
home_loc	int
;	O
int	O
key_size	int
;	O
GDBM_DEBUG_DATUM	O
(	O
GDBM_DEBUG_LOOKUP	O
,	O
key	struct
,	O
"%s: fetching key:"	pointer
,	O
dbf	pointer
->	O
name	pointer
)	O
;	O
_gdbm_hash_key	function
(	O
dbf	pointer
,	O
key	struct
,	O
&	O
new_hash_val	int
,	O
&	O
bucket_dir	int
,	O
&	O
elem_loc	int
)	O
;	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_LOOKUP	O
,	O
"%s: location = %#4x:%d:%d"	pointer
,	O
dbf	pointer
->	O
name	pointer
,	O
new_hash_val	int
,	O
bucket_dir	int
,	O
elem_loc	int
)	O
;	O
if	O
(	O
ret_hash_val	pointer
)	O
*	O
ret_hash_val	pointer
=	O
new_hash_val	int
;	O
if	O
(	O
_gdbm_get_bucket	function
(	O
dbf	pointer
,	O
bucket_dir	int
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
dbf	pointer
->	O
cache_entry	pointer
->	O
ca_data	struct
.	O
elem_loc	int
!=	O
-	O
1	int
&&	O
new_hash_val	int
==	O
dbf	pointer
->	O
cache_entry	pointer
->	O
ca_data	struct
.	O
hash_val	int
&&	O
dbf	pointer
->	O
cache_entry	pointer
->	O
ca_data	struct
.	O
key_size	int
==	O
key	struct
.	O
dsize	int
&&	O
dbf	pointer
->	O
cache_entry	pointer
->	O
ca_data	struct
.	O
dptr	pointer
!=	O
NULL	O
&&	O
memcmp	function
(	O
dbf	pointer
->	O
cache_entry	pointer
->	O
ca_data	struct
.	O
dptr	pointer
,	O
key	struct
.	O
dptr	pointer
,	O
key	struct
.	O
dsize	int
)	O
==	O
0	int
)	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_LOOKUP	O
,	O
"%s: found in cache"	pointer
,	O
dbf	pointer
->	O
name	pointer
)	O
;	O
if	O
(	O
ret_dptr	pointer
)	O
*	O
ret_dptr	pointer
=	O
dbf	pointer
->	O
cache_entry	pointer
->	O
ca_data	struct
.	O
dptr	pointer
+	O
key	struct
.	O
dsize	int
;	O
return	O
dbf	pointer
->	O
cache_entry	pointer
->	O
ca_data	struct
.	O
elem_loc	int
;	O
}	O
home_loc	int
=	O
elem_loc	int
;	O
bucket_hash_val	int
=	O
dbf	pointer
->	O
bucket	pointer
->	O
h_table	array
[	O
elem_loc	int
]	O
.	O
hash_value	int
;	O
while	O
(	O
bucket_hash_val	int
!=	O
-	O
1	int
)	O
{	O
key_size	int
=	O
dbf	pointer
->	O
bucket	pointer
->	O
h_table	array
[	O
elem_loc	int
]	O
.	O
key_size	int
;	O
if	O
(	O
bucket_hash_val	int
!=	O
new_hash_val	int
||	O
key_size	int
!=	O
key	struct
.	O
dsize	int
||	O
memcmp	function
(	O
dbf	pointer
->	O
bucket	pointer
->	O
h_table	array
[	O
elem_loc	int
]	O
.	O
key_start	array
,	O
key	struct
.	O
dptr	pointer
,	O
(	O
SMALL	int
<	O
key_size	int
?	O
SMALL	int
:	O
key_size	int
)	O
)	O
!=	O
0	int
)	O
{	O
elem_loc	int
=	O
(	O
elem_loc	int
+	O
1	int
)	O
%	O
dbf	pointer
->	O
header	pointer
->	O
bucket_elems	int
;	O
if	O
(	O
elem_loc	int
==	O
home_loc	int
)	O
break	O
;	O
bucket_hash_val	int
=	O
dbf	pointer
->	O
bucket	pointer
->	O
h_table	array
[	O
elem_loc	int
]	O
.	O
hash_value	int
;	O
}	O
else	O
{	O
file_key	pointer
=	O
_gdbm_read_entry	function
(	O
dbf	pointer
,	O
elem_loc	int
)	O
;	O
if	O
(	O
!	O
file_key	pointer
)	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_LOOKUP	O
,	O
"%s: error reading entry: %s"	pointer
,	O
dbf	pointer
->	O
name	pointer
,	O
gdbm_db_strerror	function
(	O
dbf	pointer
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
memcmp	function
(	O
file_key	pointer
,	O
key	struct
.	O
dptr	pointer
,	O
key_size	int
)	O
==	O
0	int
)	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_LOOKUP	O
,	O
"%s: found"	pointer
,	O
dbf	pointer
->	O
name	pointer
)	O
;	O
if	O
(	O
ret_dptr	pointer
)	O
*	O
ret_dptr	pointer
=	O
file_key	pointer
+	O
key	struct
.	O
dsize	int
;	O
return	O
elem_loc	int
;	O
}	O
else	O
{	O
elem_loc	int
=	O
(	O
elem_loc	int
+	O
1	int
)	O
%	O
dbf	pointer
->	O
header	pointer
->	O
bucket_elems	int
;	O
if	O
(	O
elem_loc	int
==	O
home_loc	int
)	O
break	O
;	O
bucket_hash_val	int
=	O
dbf	pointer
->	O
bucket	pointer
->	O
h_table	array
[	O
elem_loc	int
]	O
.	O
hash_value	int
;	O
}	O
}	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_LOOKUP	O
,	O
"%s: next location = %#4x:%d:%d"	pointer
,	O
dbf	pointer
->	O
name	pointer
,	O
bucket_hash_val	int
,	O
bucket_dir	int
,	O
elem_loc	int
)	O
;	O
}	O
GDBM_SET_ERRNO2	O
(	O
dbf	pointer
,	O
GDBM_ITEM_NOT_FOUND	int
,	O
FALSE	int
,	O
GDBM_DEBUG_LOOKUP	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
