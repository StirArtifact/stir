struct	O
obstack	struct
cond_obstack	struct
;	O
struct	O
file_line	struct
{	O
const	O
char	O
*	O
file	pointer
;	O
unsigned	O
int	O
line	int
;	O
}	O
;	O
struct	O
conditional_frame	struct
{	O
struct	O
file_line	struct
if_file_line	struct
;	O
struct	O
file_line	struct
else_file_line	struct
;	O
struct	O
conditional_frame	struct
*	O
previous_cframe	pointer
;	O
int	O
else_seen	int
;	O
int	O
ignoring	int
;	O
int	O
dead_tree	int
;	O
int	O
macro_nest	int
;	O
}	O
;	O
static	O
void	O
initialize_cframe	function
(	O
struct	O
conditional_frame	struct
*	O
cframe	pointer
)	O
;	O
static	O
char	O
*	O
get_mri_string	function
(	O
int	O
,	O
int	O
*	O
)	O
;	O
static	O
struct	O
conditional_frame	struct
*	O
current_cframe	pointer
=	O
NULL	O
;	O
void	O
s_ifdef	function
(	O
int	O
test_defined	int
)	O
{	O
char	O
*	O
name	pointer
;	O
symbolS	struct
*	O
symbolP	pointer
;	O
struct	O
conditional_frame	struct
cframe	pointer
;	O
char	O
c	struct
;	O
SKIP_WHITESPACE	O
(	O
)	O
;	O
name	pointer
=	O
input_line_pointer	pointer
;	O
if	O
(	O
!	O
is_name_beginner	O
(	O
*	O
name	pointer
)	O
&&	O
*	O
name	pointer
!=	O
'"'	O
)	O
{	O
as_bad	function
(	O
_	O
(	O
"invalid identifier for \".ifdef\""	pointer
)	O
)	O
;	O
obstack_1grow	O
(	O
&	O
cond_obstack	struct
,	O
0	int
)	O
;	O
ignore_rest_of_line	function
(	O
)	O
;	O
return	O
;	O
}	O
c	struct
=	O
get_symbol_name	function
(	O
&	O
name	pointer
)	O
;	O
symbolP	pointer
=	O
symbol_find	function
(	O
name	pointer
)	O
;	O
(	O
void	O
)	O
restore_line_pointer	function
(	O
c	struct
)	O
;	O
initialize_cframe	function
(	O
&	O
cframe	pointer
)	O
;	O
if	O
(	O
cframe	pointer
.	O
dead_tree	int
)	O
cframe	pointer
.	O
ignoring	int
=	O
1	int
;	O
else	O
{	O
int	O
is_defined	int
;	O
is_defined	int
=	O
symbolP	pointer
!=	O
NULL	O
&&	O
(	O
S_IS_DEFINED	function
(	O
symbolP	pointer
)	O
||	O
symbol_equated_p	function
(	O
symbolP	pointer
)	O
)	O
&&	O
S_GET_SEGMENT	function
(	O
symbolP	pointer
)	O
!=	O
reg_section	pointer
;	O
cframe	pointer
.	O
ignoring	int
=	O
!	O
(	O
test_defined	int
^	O
is_defined	int
)	O
;	O
}	O
current_cframe	pointer
=	O
(	O
struct	O
conditional_frame	struct
*	O
)	O
obstack_alloc	O
(	O
&	O
cond_obstack	struct
,	O
sizeof	O
cframe	pointer
)	O
;	O
memcpy	function
(	O
current_cframe	pointer
,	O
&	O
cframe	pointer
,	O
sizeof	O
cframe	pointer
)	O
;	O
if	O
(	O
LISTING_SKIP_COND	O
(	O
)	O
&&	O
cframe	pointer
.	O
ignoring	int
&&	O
(	O
cframe	pointer
.	O
previous_cframe	pointer
==	O
NULL	O
||	O
!	O
cframe	pointer
.	O
previous_cframe	pointer
->	O
ignoring	int
)	O
)	O
listing_list	function
(	O
2	int
)	O
;	O
demand_empty_rest_of_line	function
(	O
)	O
;	O
}	O
void	O
s_if	function
(	O
int	O
arg	pointer
)	O
{	O
expressionS	struct
operand	struct
;	O
struct	O
conditional_frame	struct
cframe	pointer
;	O
int	O
t	int
;	O
char	O
*	O
stop	pointer
=	O
NULL	O
;	O
char	O
stopc	char
=	O
0	int
;	O
if	O
(	O
flag_mri	int
)	O
stop	pointer
=	O
mri_comment_field	function
(	O
&	O
stopc	char
)	O
;	O
SKIP_WHITESPACE	O
(	O
)	O
;	O
if	O
(	O
current_cframe	pointer
!=	O
NULL	O
&&	O
current_cframe	pointer
->	O
ignoring	int
)	O
{	O
operand	struct
.	O
X_add_number	long
=	O
0	int
;	O
while	O
(	O
!	O
is_end_of_line	array
[	O
(	O
unsigned	O
char	O
)	O
*	O
input_line_pointer	pointer
]	O
)	O
++	O
input_line_pointer	pointer
;	O
}	O
else	O
{	O
expression_and_evaluate	O
(	O
&	O
operand	struct
)	O
;	O
if	O
(	O
operand	struct
.	O
X_op	enum
!=	O
O_constant	int
)	O
as_bad	function
(	O
_	O
(	O
"non-constant expression in \".if\" statement"	pointer
)	O
)	O
;	O
}	O
switch	O
(	O
(	O
operatorT	enum
)	O
arg	pointer
)	O
{	O
case	O
O_eq	int
:	O
t	int
=	O
operand	struct
.	O
X_add_number	long
==	O
0	int
;	O
break	O
;	O
case	O
O_ne	int
:	O
t	int
=	O
operand	struct
.	O
X_add_number	long
!=	O
0	int
;	O
break	O
;	O
case	O
O_lt	int
:	O
t	int
=	O
operand	struct
.	O
X_add_number	long
<	O
0	int
;	O
break	O
;	O
case	O
O_le	int
:	O
t	int
=	O
operand	struct
.	O
X_add_number	long
<=	O
0	int
;	O
break	O
;	O
case	O
O_ge	int
:	O
t	int
=	O
operand	struct
.	O
X_add_number	long
>=	O
0	int
;	O
break	O
;	O
case	O
O_gt	int
:	O
t	int
=	O
operand	struct
.	O
X_add_number	long
>	O
0	int
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
return	O
;	O
}	O
initialize_cframe	function
(	O
&	O
cframe	pointer
)	O
;	O
cframe	pointer
.	O
ignoring	int
=	O
cframe	pointer
.	O
dead_tree	int
||	O
!	O
t	int
;	O
current_cframe	pointer
=	O
(	O
struct	O
conditional_frame	struct
*	O
)	O
obstack_alloc	O
(	O
&	O
cond_obstack	struct
,	O
sizeof	O
cframe	pointer
)	O
;	O
memcpy	function
(	O
current_cframe	pointer
,	O
&	O
cframe	pointer
,	O
sizeof	O
cframe	pointer
)	O
;	O
if	O
(	O
LISTING_SKIP_COND	O
(	O
)	O
&&	O
cframe	pointer
.	O
ignoring	int
&&	O
(	O
cframe	pointer
.	O
previous_cframe	pointer
==	O
NULL	O
||	O
!	O
cframe	pointer
.	O
previous_cframe	pointer
->	O
ignoring	int
)	O
)	O
listing_list	function
(	O
2	int
)	O
;	O
if	O
(	O
flag_mri	int
)	O
mri_comment_end	function
(	O
stop	pointer
,	O
stopc	char
)	O
;	O
demand_empty_rest_of_line	function
(	O
)	O
;	O
}	O
void	O
s_ifb	function
(	O
int	O
test_blank	int
)	O
{	O
struct	O
conditional_frame	struct
cframe	pointer
;	O
initialize_cframe	function
(	O
&	O
cframe	pointer
)	O
;	O
if	O
(	O
cframe	pointer
.	O
dead_tree	int
)	O
cframe	pointer
.	O
ignoring	int
=	O
1	int
;	O
else	O
{	O
int	O
is_eol	int
;	O
SKIP_WHITESPACE	O
(	O
)	O
;	O
is_eol	int
=	O
is_end_of_line	array
[	O
(	O
unsigned	O
char	O
)	O
*	O
input_line_pointer	pointer
]	O
;	O
cframe	pointer
.	O
ignoring	int
=	O
(	O
test_blank	int
==	O
!	O
is_eol	int
)	O
;	O
}	O
current_cframe	pointer
=	O
(	O
struct	O
conditional_frame	struct
*	O
)	O
obstack_alloc	O
(	O
&	O
cond_obstack	struct
,	O
sizeof	O
cframe	pointer
)	O
;	O
memcpy	function
(	O
current_cframe	pointer
,	O
&	O
cframe	pointer
,	O
sizeof	O
cframe	pointer
)	O
;	O
if	O
(	O
LISTING_SKIP_COND	O
(	O
)	O
&&	O
cframe	pointer
.	O
ignoring	int
&&	O
(	O
cframe	pointer
.	O
previous_cframe	pointer
==	O
NULL	O
||	O
!	O
cframe	pointer
.	O
previous_cframe	pointer
->	O
ignoring	int
)	O
)	O
listing_list	function
(	O
2	int
)	O
;	O
ignore_rest_of_line	function
(	O
)	O
;	O
}	O
static	O
char	O
*	O
get_mri_string	function
(	O
int	O
terminator	int
,	O
int	O
*	O
len	long
)	O
{	O
char	O
*	O
ret	pointer
;	O
char	O
*	O
s	pointer
;	O
SKIP_WHITESPACE	O
(	O
)	O
;	O
s	pointer
=	O
ret	pointer
=	O
input_line_pointer	pointer
;	O
if	O
(	O
*	O
input_line_pointer	pointer
==	O
'\''	O
)	O
{	O
++	O
s	pointer
;	O
++	O
input_line_pointer	pointer
;	O
while	O
(	O
!	O
is_end_of_line	array
[	O
(	O
unsigned	O
char	O
)	O
*	O
input_line_pointer	pointer
]	O
)	O
{	O
*	O
s	pointer
++	O
=	O
*	O
input_line_pointer	pointer
++	O
;	O
if	O
(	O
s	pointer
[	O
-	O
1	int
]	O
==	O
'\''	O
)	O
{	O
if	O
(	O
*	O
input_line_pointer	pointer
!=	O
'\''	O
)	O
break	O
;	O
++	O
input_line_pointer	pointer
;	O
}	O
}	O
SKIP_WHITESPACE	O
(	O
)	O
;	O
}	O
else	O
{	O
while	O
(	O
*	O
input_line_pointer	pointer
!=	O
terminator	int
&&	O
!	O
is_end_of_line	array
[	O
(	O
unsigned	O
char	O
)	O
*	O
input_line_pointer	pointer
]	O
)	O
++	O
input_line_pointer	pointer
;	O
s	pointer
=	O
input_line_pointer	pointer
;	O
while	O
(	O
s	pointer
>	O
ret	pointer
&&	O
(	O
s	pointer
[	O
-	O
1	int
]	O
==	O
' '	O
||	O
s	pointer
[	O
-	O
1	int
]	O
==	O
'\t'	O
)	O
)	O
--	O
s	pointer
;	O
}	O
*	O
len	long
=	O
s	pointer
-	O
ret	pointer
;	O
return	O
ret	pointer
;	O
}	O
void	O
s_ifc	function
(	O
int	O
arg	pointer
)	O
{	O
char	O
*	O
stop	pointer
=	O
NULL	O
;	O
char	O
stopc	char
=	O
0	int
;	O
char	O
*	O
s1	pointer
,	O
*	O
s2	pointer
;	O
int	O
len1	int
,	O
len2	int
;	O
int	O
res	int
;	O
struct	O
conditional_frame	struct
cframe	pointer
;	O
if	O
(	O
flag_mri	int
)	O
stop	pointer
=	O
mri_comment_field	function
(	O
&	O
stopc	char
)	O
;	O
s1	pointer
=	O
get_mri_string	function
(	O
','	O
,	O
&	O
len1	int
)	O
;	O
if	O
(	O
*	O
input_line_pointer	pointer
!=	O
','	O
)	O
as_bad	function
(	O
_	O
(	O
"bad format for ifc or ifnc"	pointer
)	O
)	O
;	O
else	O
++	O
input_line_pointer	pointer
;	O
s2	pointer
=	O
get_mri_string	function
(	O
';'	O
,	O
&	O
len2	int
)	O
;	O
res	int
=	O
len1	int
==	O
len2	int
&&	O
strncmp	function
(	O
s1	pointer
,	O
s2	pointer
,	O
len1	int
)	O
==	O
0	int
;	O
initialize_cframe	function
(	O
&	O
cframe	pointer
)	O
;	O
cframe	pointer
.	O
ignoring	int
=	O
cframe	pointer
.	O
dead_tree	int
||	O
!	O
(	O
res	int
^	O
arg	pointer
)	O
;	O
current_cframe	pointer
=	O
(	O
struct	O
conditional_frame	struct
*	O
)	O
obstack_alloc	O
(	O
&	O
cond_obstack	struct
,	O
sizeof	O
cframe	pointer
)	O
;	O
memcpy	function
(	O
current_cframe	pointer
,	O
&	O
cframe	pointer
,	O
sizeof	O
cframe	pointer
)	O
;	O
if	O
(	O
LISTING_SKIP_COND	O
(	O
)	O
&&	O
cframe	pointer
.	O
ignoring	int
&&	O
(	O
cframe	pointer
.	O
previous_cframe	pointer
==	O
NULL	O
||	O
!	O
cframe	pointer
.	O
previous_cframe	pointer
->	O
ignoring	int
)	O
)	O
listing_list	function
(	O
2	int
)	O
;	O
if	O
(	O
flag_mri	int
)	O
mri_comment_end	function
(	O
stop	pointer
,	O
stopc	char
)	O
;	O
demand_empty_rest_of_line	function
(	O
)	O
;	O
}	O
void	O
s_elseif	function
(	O
int	O
arg	pointer
)	O
{	O
if	O
(	O
current_cframe	pointer
==	O
NULL	O
)	O
{	O
as_bad	function
(	O
_	O
(	O
"\".elseif\" without matching \".if\""	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
current_cframe	pointer
->	O
else_seen	int
)	O
{	O
as_bad	function
(	O
_	O
(	O
"\".elseif\" after \".else\""	pointer
)	O
)	O
;	O
as_bad_where	function
(	O
current_cframe	pointer
->	O
else_file_line	struct
.	O
file	pointer
,	O
current_cframe	pointer
->	O
else_file_line	struct
.	O
line	int
,	O
_	O
(	O
"here is the previous \".else\""	pointer
)	O
)	O
;	O
as_bad_where	function
(	O
current_cframe	pointer
->	O
if_file_line	struct
.	O
file	pointer
,	O
current_cframe	pointer
->	O
if_file_line	struct
.	O
line	int
,	O
_	O
(	O
"here is the previous \".if\""	pointer
)	O
)	O
;	O
}	O
else	O
{	O
current_cframe	pointer
->	O
else_file_line	struct
.	O
file	pointer
=	O
as_where	function
(	O
&	O
current_cframe	pointer
->	O
else_file_line	struct
.	O
line	int
)	O
;	O
current_cframe	pointer
->	O
dead_tree	int
|=	O
!	O
current_cframe	pointer
->	O
ignoring	int
;	O
current_cframe	pointer
->	O
ignoring	int
=	O
current_cframe	pointer
->	O
dead_tree	int
;	O
}	O
if	O
(	O
current_cframe	pointer
==	O
NULL	O
||	O
current_cframe	pointer
->	O
ignoring	int
)	O
{	O
while	O
(	O
!	O
is_end_of_line	array
[	O
(	O
unsigned	O
char	O
)	O
*	O
input_line_pointer	pointer
]	O
)	O
++	O
input_line_pointer	pointer
;	O
if	O
(	O
current_cframe	pointer
==	O
NULL	O
)	O
return	O
;	O
}	O
else	O
{	O
expressionS	struct
operand	struct
;	O
int	O
t	int
;	O
SKIP_WHITESPACE	O
(	O
)	O
;	O
expression_and_evaluate	O
(	O
&	O
operand	struct
)	O
;	O
if	O
(	O
operand	struct
.	O
X_op	enum
!=	O
O_constant	int
)	O
as_bad	function
(	O
_	O
(	O
"non-constant expression in \".elseif\" statement"	pointer
)	O
)	O
;	O
switch	O
(	O
(	O
operatorT	enum
)	O
arg	pointer
)	O
{	O
case	O
O_eq	int
:	O
t	int
=	O
operand	struct
.	O
X_add_number	long
==	O
0	int
;	O
break	O
;	O
case	O
O_ne	int
:	O
t	int
=	O
operand	struct
.	O
X_add_number	long
!=	O
0	int
;	O
break	O
;	O
case	O
O_lt	int
:	O
t	int
=	O
operand	struct
.	O
X_add_number	long
<	O
0	int
;	O
break	O
;	O
case	O
O_le	int
:	O
t	int
=	O
operand	struct
.	O
X_add_number	long
<=	O
0	int
;	O
break	O
;	O
case	O
O_ge	int
:	O
t	int
=	O
operand	struct
.	O
X_add_number	long
>=	O
0	int
;	O
break	O
;	O
case	O
O_gt	int
:	O
t	int
=	O
operand	struct
.	O
X_add_number	long
>	O
0	int
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
return	O
;	O
}	O
current_cframe	pointer
->	O
ignoring	int
=	O
current_cframe	pointer
->	O
dead_tree	int
||	O
!	O
t	int
;	O
}	O
if	O
(	O
LISTING_SKIP_COND	O
(	O
)	O
&&	O
(	O
current_cframe	pointer
->	O
previous_cframe	pointer
==	O
NULL	O
||	O
!	O
current_cframe	pointer
->	O
previous_cframe	pointer
->	O
ignoring	int
)	O
)	O
{	O
if	O
(	O
!	O
current_cframe	pointer
->	O
ignoring	int
)	O
listing_list	function
(	O
1	int
)	O
;	O
else	O
listing_list	function
(	O
2	int
)	O
;	O
}	O
demand_empty_rest_of_line	function
(	O
)	O
;	O
}	O
void	O
s_endif	function
(	O
int	O
arg	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
struct	O
conditional_frame	struct
*	O
hold	pointer
;	O
if	O
(	O
current_cframe	pointer
==	O
NULL	O
)	O
{	O
as_bad	function
(	O
_	O
(	O
"\".endif\" without \".if\""	pointer
)	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
LISTING_SKIP_COND	O
(	O
)	O
&&	O
current_cframe	pointer
->	O
ignoring	int
&&	O
(	O
current_cframe	pointer
->	O
previous_cframe	pointer
==	O
NULL	O
||	O
!	O
current_cframe	pointer
->	O
previous_cframe	pointer
->	O
ignoring	int
)	O
)	O
listing_list	function
(	O
1	int
)	O
;	O
hold	pointer
=	O
current_cframe	pointer
;	O
current_cframe	pointer
=	O
current_cframe	pointer
->	O
previous_cframe	pointer
;	O
obstack_free	O
(	O
&	O
cond_obstack	struct
,	O
hold	pointer
)	O
;	O
}	O
if	O
(	O
flag_mri	int
)	O
{	O
while	O
(	O
!	O
is_end_of_line	array
[	O
(	O
unsigned	O
char	O
)	O
*	O
input_line_pointer	pointer
]	O
)	O
++	O
input_line_pointer	pointer
;	O
}	O
demand_empty_rest_of_line	function
(	O
)	O
;	O
}	O
void	O
s_else	function
(	O
int	O
arg	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
if	O
(	O
current_cframe	pointer
==	O
NULL	O
)	O
{	O
as_bad	function
(	O
_	O
(	O
"\".else\" without matching \".if\""	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
current_cframe	pointer
->	O
else_seen	int
)	O
{	O
as_bad	function
(	O
_	O
(	O
"duplicate \".else\""	pointer
)	O
)	O
;	O
as_bad_where	function
(	O
current_cframe	pointer
->	O
else_file_line	struct
.	O
file	pointer
,	O
current_cframe	pointer
->	O
else_file_line	struct
.	O
line	int
,	O
_	O
(	O
"here is the previous \".else\""	pointer
)	O
)	O
;	O
as_bad_where	function
(	O
current_cframe	pointer
->	O
if_file_line	struct
.	O
file	pointer
,	O
current_cframe	pointer
->	O
if_file_line	struct
.	O
line	int
,	O
_	O
(	O
"here is the previous \".if\""	pointer
)	O
)	O
;	O
}	O
else	O
{	O
current_cframe	pointer
->	O
else_file_line	struct
.	O
file	pointer
=	O
as_where	function
(	O
&	O
current_cframe	pointer
->	O
else_file_line	struct
.	O
line	int
)	O
;	O
current_cframe	pointer
->	O
ignoring	int
=	O
current_cframe	pointer
->	O
dead_tree	int
|	O
!	O
current_cframe	pointer
->	O
ignoring	int
;	O
if	O
(	O
LISTING_SKIP_COND	O
(	O
)	O
&&	O
(	O
current_cframe	pointer
->	O
previous_cframe	pointer
==	O
NULL	O
||	O
!	O
current_cframe	pointer
->	O
previous_cframe	pointer
->	O
ignoring	int
)	O
)	O
{	O
if	O
(	O
!	O
current_cframe	pointer
->	O
ignoring	int
)	O
listing_list	function
(	O
1	int
)	O
;	O
else	O
listing_list	function
(	O
2	int
)	O
;	O
}	O
current_cframe	pointer
->	O
else_seen	int
=	O
1	int
;	O
}	O
if	O
(	O
flag_mri	int
)	O
{	O
while	O
(	O
!	O
is_end_of_line	array
[	O
(	O
unsigned	O
char	O
)	O
*	O
input_line_pointer	pointer
]	O
)	O
++	O
input_line_pointer	pointer
;	O
}	O
demand_empty_rest_of_line	function
(	O
)	O
;	O
}	O
void	O
s_ifeqs	function
(	O
int	O
arg	pointer
)	O
{	O
char	O
*	O
s1	pointer
,	O
*	O
s2	pointer
;	O
int	O
len1	int
,	O
len2	int
;	O
int	O
res	int
;	O
struct	O
conditional_frame	struct
cframe	pointer
;	O
s1	pointer
=	O
demand_copy_C_string	function
(	O
&	O
len1	int
)	O
;	O
SKIP_WHITESPACE	O
(	O
)	O
;	O
if	O
(	O
*	O
input_line_pointer	pointer
!=	O
','	O
)	O
{	O
as_bad	function
(	O
_	O
(	O
".ifeqs syntax error"	pointer
)	O
)	O
;	O
ignore_rest_of_line	function
(	O
)	O
;	O
return	O
;	O
}	O
++	O
input_line_pointer	pointer
;	O
s2	pointer
=	O
demand_copy_C_string	function
(	O
&	O
len2	int
)	O
;	O
res	int
=	O
len1	int
==	O
len2	int
&&	O
strncmp	function
(	O
s1	pointer
,	O
s2	pointer
,	O
len1	int
)	O
==	O
0	int
;	O
initialize_cframe	function
(	O
&	O
cframe	pointer
)	O
;	O
cframe	pointer
.	O
ignoring	int
=	O
cframe	pointer
.	O
dead_tree	int
||	O
!	O
(	O
res	int
^	O
arg	pointer
)	O
;	O
current_cframe	pointer
=	O
(	O
struct	O
conditional_frame	struct
*	O
)	O
obstack_alloc	O
(	O
&	O
cond_obstack	struct
,	O
sizeof	O
cframe	pointer
)	O
;	O
memcpy	function
(	O
current_cframe	pointer
,	O
&	O
cframe	pointer
,	O
sizeof	O
cframe	pointer
)	O
;	O
if	O
(	O
LISTING_SKIP_COND	O
(	O
)	O
&&	O
cframe	pointer
.	O
ignoring	int
&&	O
(	O
cframe	pointer
.	O
previous_cframe	pointer
==	O
NULL	O
||	O
!	O
cframe	pointer
.	O
previous_cframe	pointer
->	O
ignoring	int
)	O
)	O
listing_list	function
(	O
2	int
)	O
;	O
demand_empty_rest_of_line	function
(	O
)	O
;	O
}	O
int	O
ignore_input	function
(	O
void	O
)	O
{	O
char	O
*	O
s	pointer
;	O
s	pointer
=	O
input_line_pointer	pointer
;	O
if	O
(	O
NO_PSEUDO_DOT	int
||	O
flag_m68k_mri	int
)	O
{	O
if	O
(	O
s	pointer
[	O
-	O
1	int
]	O
!=	O
'.'	O
)	O
--	O
s	pointer
;	O
}	O
else	O
{	O
if	O
(	O
s	pointer
[	O
-	O
1	int
]	O
!=	O
'.'	O
)	O
return	O
(	O
current_cframe	pointer
!=	O
NULL	O
)	O
&&	O
(	O
current_cframe	pointer
->	O
ignoring	int
)	O
;	O
}	O
if	O
(	O
(	O
(	O
s	pointer
[	O
0	int
]	O
==	O
'i'	O
||	O
s	pointer
[	O
0	int
]	O
==	O
'I'	O
)	O
&&	O
(	O
!	O
strncasecmp	function
(	O
s	pointer
,	O
"if"	pointer
,	O
2	int
)	O
||	O
!	O
strncasecmp	function
(	O
s	pointer
,	O
"ifdef"	pointer
,	O
5	int
)	O
||	O
!	O
strncasecmp	function
(	O
s	pointer
,	O
"ifndef"	pointer
,	O
6	int
)	O
)	O
)	O
||	O
(	O
(	O
s	pointer
[	O
0	int
]	O
==	O
'e'	O
||	O
s	pointer
[	O
0	int
]	O
==	O
'E'	O
)	O
&&	O
(	O
!	O
strncasecmp	function
(	O
s	pointer
,	O
"else"	pointer
,	O
4	int
)	O
||	O
!	O
strncasecmp	function
(	O
s	pointer
,	O
"endif"	pointer
,	O
5	int
)	O
||	O
!	O
strncasecmp	function
(	O
s	pointer
,	O
"endc"	pointer
,	O
4	int
)	O
)	O
)	O
)	O
return	O
0	int
;	O
return	O
(	O
current_cframe	pointer
!=	O
NULL	O
)	O
&&	O
(	O
current_cframe	pointer
->	O
ignoring	int
)	O
;	O
}	O
static	O
void	O
initialize_cframe	function
(	O
struct	O
conditional_frame	struct
*	O
cframe	pointer
)	O
{	O
memset	function
(	O
cframe	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
cframe	pointer
)	O
)	O
;	O
cframe	pointer
->	O
if_file_line	struct
.	O
file	pointer
=	O
as_where	function
(	O
&	O
cframe	pointer
->	O
if_file_line	struct
.	O
line	int
)	O
;	O
cframe	pointer
->	O
previous_cframe	pointer
=	O
current_cframe	pointer
;	O
cframe	pointer
->	O
dead_tree	int
=	O
current_cframe	pointer
!=	O
NULL	O
&&	O
current_cframe	pointer
->	O
ignoring	int
;	O
cframe	pointer
->	O
macro_nest	int
=	O
macro_nest	int
;	O
}	O
void	O
cond_finish_check	function
(	O
int	O
nest	int
)	O
{	O
if	O
(	O
current_cframe	pointer
!=	O
NULL	O
&&	O
current_cframe	pointer
->	O
macro_nest	int
>=	O
nest	int
)	O
{	O
if	O
(	O
nest	int
>=	O
0	int
)	O
as_bad	function
(	O
_	O
(	O
"end of macro inside conditional"	pointer
)	O
)	O
;	O
else	O
as_bad	function
(	O
_	O
(	O
"end of file inside conditional"	pointer
)	O
)	O
;	O
as_bad_where	function
(	O
current_cframe	pointer
->	O
if_file_line	struct
.	O
file	pointer
,	O
current_cframe	pointer
->	O
if_file_line	struct
.	O
line	int
,	O
_	O
(	O
"here is the start of the unterminated conditional"	pointer
)	O
)	O
;	O
if	O
(	O
current_cframe	pointer
->	O
else_seen	int
)	O
as_bad_where	function
(	O
current_cframe	pointer
->	O
else_file_line	struct
.	O
file	pointer
,	O
current_cframe	pointer
->	O
else_file_line	struct
.	O
line	int
,	O
_	O
(	O
"here is the \"else\" of the unterminated conditional"	pointer
)	O
)	O
;	O
}	O
}	O
void	O
cond_exit_macro	function
(	O
int	O
nest	int
)	O
{	O
while	O
(	O
current_cframe	pointer
!=	O
NULL	O
&&	O
current_cframe	pointer
->	O
macro_nest	int
>=	O
nest	int
)	O
{	O
struct	O
conditional_frame	struct
*	O
hold	pointer
;	O
hold	pointer
=	O
current_cframe	pointer
;	O
current_cframe	pointer
=	O
current_cframe	pointer
->	O
previous_cframe	pointer
;	O
obstack_free	O
(	O
&	O
cond_obstack	struct
,	O
hold	pointer
)	O
;	O
}	O
}	O
