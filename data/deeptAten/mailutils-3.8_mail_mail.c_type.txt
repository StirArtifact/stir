mu_mailbox_t	pointer
mbox	pointer
;	O
size_t	long
total	long
;	O
int	O
interactive	int
;	O
int	O
read_recipients	int
;	O
mu_url_t	pointer
secondary_url	pointer
;	O
static	O
mu_list_t	pointer
command_list	pointer
;	O
const	O
char	O
*	O
program_version	pointer
=	O
"mail ("	pointer
PACKAGE_STRING	pointer
")"	pointer
;	O
int	O
hint	pointer
;	O
char	O
*	O
file	pointer
;	O
char	O
*	O
user	pointer
;	O
int	O
mime_option	int
;	O
int	O
skip_empty_attachments	int
;	O
char	O
*	O
default_encoding	pointer
;	O
char	O
*	O
default_content_type	pointer
;	O
static	O
char	O
*	O
content_name	pointer
;	O
static	O
char	O
*	O
content_filename	pointer
;	O
static	O
void	O
cli_f_option	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
hint	pointer
|=	O
HINT_FILE_OPTION	int
;	O
}	O
static	O
void	O
cli_file_option	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
if	O
(	O
arg	pointer
)	O
file	pointer
=	O
mu_strdup	function
(	O
arg	pointer
)	O
;	O
hint	pointer
|=	O
HINT_FILE_OPTION	int
;	O
}	O
static	O
void	O
cli_command_option	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
switch	O
(	O
opt	pointer
->	O
opt_short	int
)	O
{	O
case	O
'e'	O
:	O
util_cache_command	function
(	O
&	O
command_list	pointer
,	O
"setq mode=exist"	pointer
)	O
;	O
break	O
;	O
case	O
'p'	O
:	O
util_cache_command	function
(	O
&	O
command_list	pointer
,	O
"setq mode=print"	pointer
)	O
;	O
break	O
;	O
case	O
'r'	O
:	O
util_cache_command	function
(	O
&	O
command_list	pointer
,	O
"set return-address=%s"	pointer
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
'q'	O
:	O
util_cache_command	function
(	O
&	O
command_list	pointer
,	O
"set quit"	pointer
)	O
;	O
break	O
;	O
case	O
't'	O
:	O
read_recipients	int
=	O
1	int
;	O
util_cache_command	function
(	O
&	O
command_list	pointer
,	O
"set editheaders"	pointer
)	O
;	O
util_cache_command	function
(	O
&	O
command_list	pointer
,	O
"setq mode=send"	pointer
)	O
;	O
break	O
;	O
case	O
'H'	O
:	O
util_cache_command	function
(	O
&	O
command_list	pointer
,	O
"setq mode=headers"	pointer
)	O
;	O
break	O
;	O
case	O
'i'	O
:	O
util_cache_command	function
(	O
&	O
command_list	pointer
,	O
"set ignore"	pointer
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
util_do_command	function
(	O
"set norc"	pointer
)	O
;	O
break	O
;	O
case	O
'N'	O
:	O
util_cache_command	function
(	O
&	O
command_list	pointer
,	O
"set noheader"	pointer
)	O
;	O
break	O
;	O
case	O
'E'	O
:	O
util_cache_command	function
(	O
&	O
command_list	pointer
,	O
"%s"	pointer
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
'F'	O
:	O
util_cache_command	function
(	O
&	O
command_list	pointer
,	O
"set byname"	pointer
)	O
;	O
break	O
;	O
case	O
0	int
:	O
mu_parseopt_error	function
(	O
po	pointer
,	O
_	O
(	O
"--%s: option should have been recognized"	pointer
)	O
,	O
opt	pointer
->	O
opt_long	pointer
)	O
;	O
exit	function
(	O
po	pointer
->	O
po_exit_error	int
)	O
;	O
default	O
:	O
mu_parseopt_error	function
(	O
po	pointer
,	O
_	O
(	O
"-%c: option should have been recognized"	pointer
)	O
,	O
opt	pointer
->	O
opt_short	int
)	O
;	O
exit	function
(	O
po	pointer
->	O
po_exit_error	int
)	O
;	O
}	O
}	O
static	O
void	O
cli_subject	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
hint	pointer
|=	O
HINT_SEND_MODE	int
;	O
send_append_header2	function
(	O
MU_HEADER_SUBJECT	pointer
,	O
arg	pointer
,	O
COMPOSE_REPLACE	int
)	O
;	O
util_cache_command	function
(	O
&	O
command_list	pointer
,	O
"set noasksub"	pointer
)	O
;	O
}	O
static	O
void	O
cli_append	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
hint	pointer
|=	O
HINT_SEND_MODE	int
;	O
send_append_header	function
(	O
arg	pointer
)	O
;	O
}	O
static	O
void	O
cli_attach	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
int	O
fd	int
=	O
-	O
1	int
;	O
hint	pointer
|=	O
HINT_SEND_MODE	int
;	O
if	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"-"	pointer
)	O
==	O
0	int
)	O
{	O
arg	pointer
=	O
NULL	O
;	O
fd	int
=	O
0	int
;	O
}	O
if	O
(	O
send_attach_file	function
(	O
fd	int
,	O
arg	pointer
,	O
content_filename	pointer
,	O
content_name	pointer
,	O
default_content_type	pointer
,	O
default_encoding	pointer
)	O
)	O
exit	function
(	O
po	pointer
->	O
po_exit_error	int
)	O
;	O
mime_option	int
=	O
1	int
;	O
free	function
(	O
content_name	pointer
)	O
;	O
content_name	pointer
=	O
NULL	O
;	O
free	function
(	O
content_filename	pointer
)	O
;	O
content_filename	pointer
=	O
NULL	O
;	O
}	O
static	O
void	O
cli_attach_fd	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
int	O
rc	int
,	O
fd	int
;	O
hint	pointer
|=	O
HINT_SEND_MODE	int
;	O
rc	int
=	O
mu_str_to_c	function
(	O
arg	pointer
,	O
mu_c_int	int
,	O
&	O
fd	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_parseopt_error	function
(	O
po	pointer
,	O
_	O
(	O
"%s: bad descriptor"	pointer
)	O
,	O
arg	pointer
)	O
;	O
exit	function
(	O
po	pointer
->	O
po_exit_error	int
)	O
;	O
}	O
send_attach_file	function
(	O
fd	int
,	O
NULL	O
,	O
content_filename	pointer
,	O
content_name	pointer
,	O
default_content_type	pointer
,	O
default_encoding	pointer
)	O
;	O
free	function
(	O
content_name	pointer
)	O
;	O
content_name	pointer
=	O
NULL	O
;	O
free	function
(	O
content_filename	pointer
)	O
;	O
content_filename	pointer
=	O
NULL	O
;	O
}	O
static	O
struct	O
mu_option	struct
mail_options	array
[	O
]	O
=	O
{	O
{	O
NULL	O
,	O
'f'	O
,	O
NULL	O
,	O
MU_OPTION_HIDDEN	int
,	O
NULL	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
cli_f_option	function
}	O
,	O
{	O
"file"	pointer
,	O
0	int
,	O
N_	O
(	O
"FILE"	pointer
)	O
,	O
MU_OPTION_ARG_OPTIONAL	int
|	O
MU_OPTION_HIDDEN	int
,	O
NULL	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
cli_file_option	function
}	O
,	O
{	O
"exist"	pointer
,	O
'e'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"return true if mail exists"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
cli_command_option	function
}	O
,	O
{	O
"byname"	pointer
,	O
'F'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"save messages according to sender"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
cli_command_option	function
}	O
,	O
{	O
"headers"	pointer
,	O
'H'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"write a header summary and exit"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
cli_command_option	function
}	O
,	O
{	O
"ignore"	pointer
,	O
'i'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"ignore interrupts"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
cli_command_option	function
}	O
,	O
{	O
"norc"	pointer
,	O
'n'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"do not read the system mailrc file"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
cli_command_option	function
}	O
,	O
{	O
"nosum"	pointer
,	O
'N'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"do not display initial header summary"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
cli_command_option	function
}	O
,	O
{	O
"print"	pointer
,	O
'p'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"print all mail to standard output"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
cli_command_option	function
}	O
,	O
{	O
"read"	pointer
,	O
0	int
,	O
NULL	O
,	O
MU_OPTION_ALIAS	int
}	O
,	O
{	O
"return-address"	pointer
,	O
'r'	O
,	O
N_	O
(	O
"ADDRESS"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"use address as the return address when sending mail"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
cli_command_option	function
}	O
,	O
{	O
"quit"	pointer
,	O
'q'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"cause interrupts to terminate program"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
cli_command_option	function
}	O
,	O
{	O
"subject"	pointer
,	O
's'	O
,	O
N_	O
(	O
"SUBJ"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"send a message with the given SUBJECT"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
cli_subject	function
}	O
,	O
{	O
"to"	pointer
,	O
't'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"read recipients from the message header"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
cli_command_option	function
}	O
,	O
{	O
"user"	pointer
,	O
'u'	O
,	O
N_	O
(	O
"USER"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"operate on USER's mailbox"	pointer
)	O
,	O
mu_c_string	int
,	O
&	O
user	pointer
}	O
,	O
{	O
"append"	pointer
,	O
'a'	O
,	O
N_	O
(	O
"HEADER: VALUE"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"append given header to the message being sent"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
cli_append	function
}	O
,	O
{	O
"alternative"	pointer
,	O
0	int
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"force multipart/alternative content type"	pointer
)	O
,	O
mu_c_bool	int
,	O
&	O
multipart_alternative	int
}	O
,	O
{	O
"skip-empty-attachments"	pointer
,	O
0	int
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"skip attachments with empty body"	pointer
)	O
,	O
mu_c_bool	int
,	O
&	O
skip_empty_attachments	int
}	O
,	O
{	O
"exec"	pointer
,	O
'E'	O
,	O
N_	O
(	O
"COMMAND"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"execute COMMAND"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
cli_command_option	function
}	O
,	O
{	O
"encoding"	pointer
,	O
0	int
,	O
N_	O
(	O
"NAME"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"set encoding for subsequent --attach options"	pointer
)	O
,	O
mu_c_string	int
,	O
&	O
default_encoding	pointer
}	O
,	O
{	O
"content-type"	pointer
,	O
0	int
,	O
N_	O
(	O
"TYPE"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"set content type for subsequent --attach options"	pointer
)	O
,	O
mu_c_string	int
,	O
&	O
default_content_type	pointer
}	O
,	O
{	O
"content-name"	pointer
,	O
0	int
,	O
N_	O
(	O
"NAME"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"set the Content-Type name parameter for the next --attach option"	pointer
)	O
,	O
mu_c_string	int
,	O
&	O
content_name	pointer
}	O
,	O
{	O
"content-filename"	pointer
,	O
0	int
,	O
N_	O
(	O
"NAME"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"set the Content-Disposition filename parameter for the next --attach option"	pointer
)	O
,	O
mu_c_string	int
,	O
&	O
content_filename	pointer
}	O
,	O
{	O
"attach"	pointer
,	O
'A'	O
,	O
N_	O
(	O
"FILE"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"attach FILE"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
cli_attach	function
}	O
,	O
{	O
"attach-fd"	pointer
,	O
0	int
,	O
N_	O
(	O
"FD"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"attach from file descriptor FD"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
cli_attach_fd	function
}	O
,	O
{	O
"mime"	pointer
,	O
'M'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"compose MIME messages"	pointer
)	O
,	O
mu_c_bool	int
,	O
&	O
mime_option	int
}	O
,	O
MU_OPTION_END	O
}	O
,	O
*	O
options	array
[	O
]	O
=	O
{	O
mail_options	array
,	O
NULL	O
}	O
;	O
static	O
const	O
char	O
*	O
alt_args	array
[	O
]	O
=	O
{	O
N_	O
(	O
"[OPTION...] [file]"	pointer
)	O
,	O
N_	O
(	O
"--file [OPTION...] [file]"	pointer
)	O
,	O
N_	O
(	O
"--file=file [OPTION...]"	pointer
)	O
,	O
NULL	O
}	O
;	O
static	O
struct	O
mu_cli_setup	struct
cli	struct
=	O
{	O
options	array
,	O
NULL	O
,	O
N_	O
(	O
"GNU mail -- process mail messages.\n"	pointer
"If -f or --file is given, mail operates on the mailbox named "	pointer
"by the first argument, or the user's mbox, if no argument given."	pointer
)	O
,	O
N_	O
(	O
"[address...]"	pointer
)	O
,	O
alt_args	array
,	O
NULL	O
,	O
1	int
,	O
1	int
}	O
;	O
static	O
char	O
*	O
mail_capa	array
[	O
]	O
=	O
{	O
"address"	pointer
,	O
"debug"	pointer
,	O
"mailbox"	pointer
,	O
"locking"	pointer
,	O
NULL	O
}	O
;	O
static	O
char	O
*	O
mail_cmdline	function
(	O
void	O
*	O
closure	pointer
,	O
int	O
cont	pointer
MU_ARG_UNUSED	O
)	O
{	O
char	O
*	O
prompt	pointer
=	O
(	O
char	O
*	O
)	O
closure	pointer
;	O
char	O
*	O
rc	int
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
mailvar_is_true	function
(	O
mailvar_name_autoinc	pointer
)	O
&&	O
!	O
mu_mailbox_is_updated	function
(	O
mbox	pointer
)	O
)	O
{	O
mu_mailbox_messages_count	function
(	O
mbox	pointer
,	O
&	O
total	long
)	O
;	O
page_invalidate	function
(	O
0	int
)	O
;	O
mu_printf	function
(	O
_	O
(	O
"New mail has arrived.\n"	pointer
)	O
)	O
;	O
}	O
rc	int
=	O
ml_readline	function
(	O
prompt	pointer
)	O
;	O
if	O
(	O
ml_got_interrupt	function
(	O
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"Interrupt"	pointer
)	O
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
!	O
rc	int
&&	O
mailvar_is_true	function
(	O
mailvar_name_ignoreeof	pointer
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"Use \"quit\" to quit."	pointer
)	O
)	O
;	O
continue	O
;	O
}	O
break	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
char	O
*	O
default_setup	array
[	O
]	O
=	O
{	O
"setq append"	pointer
,	O
"set asksub"	pointer
,	O
"set crt"	pointer
,	O
"set noaskbcc"	pointer
,	O
"set askcc"	pointer
,	O
"set noautoprint"	pointer
,	O
"set nobang"	pointer
,	O
"set nocmd"	pointer
,	O
"set nodot"	pointer
,	O
"set escape=~"	pointer
,	O
"set noflipr"	pointer
,	O
"set nofolder"	pointer
,	O
"set header"	pointer
,	O
"set nohold"	pointer
,	O
"set noignore"	pointer
,	O
"set noignoreeof"	pointer
,	O
"set indentprefix=\"\t\""	pointer
,	O
"setq keep"	pointer
,	O
"set nokeepsave"	pointer
,	O
"set nometoo"	pointer
,	O
"set noonehop"	pointer
,	O
"set nooutfolder"	pointer
,	O
"set nopage"	pointer
,	O
"set prompt=\"? \""	pointer
,	O
"set norecord"	pointer
,	O
"set save"	pointer
,	O
"set nosendmail"	pointer
,	O
"set nosendwait"	pointer
,	O
"set noshowto"	pointer
,	O
"set nosign"	pointer
,	O
"set noSign"	pointer
,	O
"set toplines=5"	pointer
,	O
"set autoinc"	pointer
,	O
"set regex"	pointer
,	O
"set replyprefix=\"Re: \""	pointer
,	O
"set charset=auto"	pointer
,	O
"set xmailer"	pointer
,	O
"unfold subject"	pointer
,	O
"sender mail-followup-to reply-to from"	pointer
,	O
"set nocmd"	pointer
,	O
"set metamail"	pointer
,	O
"set recursivealiases"	pointer
,	O
"set noinplacealiases"	pointer
,	O
"set fromfield"	pointer
,	O
"set headline=\"%>%a%4m %18f %16d %3L/%-5o %s\""	pointer
,	O
"unset folder"	pointer
,	O
"setq mode=read"	pointer
,	O
"set noquit"	pointer
,	O
"set rc"	pointer
,	O
"set noflipr"	pointer
,	O
"set noshowto"	pointer
,	O
"set nobang"	pointer
,	O
"set nullbody"	pointer
,	O
"set nullbodymsg=\""	pointer
N_	O
(	O
"Null message body; hope that's ok"	pointer
)	O
"\""	pointer
,	O
"set noonehop"	pointer
,	O
"set nosendwait"	pointer
,	O
}	O
;	O
static	O
void	O
do_and_quit	function
(	O
const	O
char	O
*	O
command	pointer
)	O
{	O
int	O
rc	int
=	O
util_do_command	function
(	O
"%s"	pointer
,	O
command	pointer
)	O
;	O
mu_mailbox_close	function
(	O
mbox	pointer
)	O
;	O
exit	function
(	O
rc	int
!=	O
0	int
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
char	O
*	O
mode	int
=	O
NULL	O
,	O
*	O
prompt	pointer
=	O
NULL	O
,	O
*	O
p	pointer
;	O
int	O
i	int
,	O
rc	int
;	O
mu_stdstream_setup	function
(	O
MU_STDSTREAM_RESET_NONE	int
)	O
;	O
set_cursor	function
(	O
1	int
)	O
;	O
MU_APP_INIT_NLS	O
(	O
)	O
;	O
mu_register_all_formats	O
(	O
)	O
;	O
mu_auth_register_module	function
(	O
&	O
mu_auth_tls_module	struct
)	O
;	O
interactive	int
=	O
isatty	function
(	O
fileno	function
(	O
stdin	pointer
)	O
)	O
;	O
{	O
struct	O
sigaction	struct
act	struct
;	O
act	struct
.	O
sa_handler	pointer
=	O
SIG_IGN	O
;	O
sigemptyset	function
(	O
&	O
act	struct
.	O
sa_mask	struct
)	O
;	O
act	struct
.	O
sa_flags	int
=	O
0	int
;	O
sigaction	struct
(	O
SIGPIPE	int
,	O
&	O
act	struct
,	O
NULL	O
)	O
;	O
}	O
if	O
(	O
!	O
getenv	function
(	O
"HOME"	pointer
)	O
)	O
setenv	function
(	O
"HOME"	pointer
,	O
util_get_homedir	function
(	O
)	O
,	O
0	int
)	O
;	O
setenv	function
(	O
"DEAD"	pointer
,	O
util_fullpath	function
(	O
"~/dead.letter"	pointer
)	O
,	O
0	int
)	O
;	O
setenv	function
(	O
"EDITOR"	pointer
,	O
"ed"	pointer
,	O
0	int
)	O
;	O
setenv	function
(	O
"LISTER"	pointer
,	O
"ls"	pointer
,	O
0	int
)	O
;	O
setenv	function
(	O
"MAILRC"	pointer
,	O
util_fullpath	function
(	O
"~/.mailrc"	pointer
)	O
,	O
0	int
)	O
;	O
setenv	function
(	O
"MBOX"	pointer
,	O
util_fullpath	function
(	O
"~/mbox"	pointer
)	O
,	O
0	int
)	O
;	O
setenv	function
(	O
"PAGER"	pointer
,	O
"more"	pointer
,	O
0	int
)	O
;	O
setenv	function
(	O
"SHELL"	pointer
,	O
"sh"	pointer
,	O
0	int
)	O
;	O
setenv	function
(	O
"VISUAL"	pointer
,	O
"vi"	pointer
,	O
0	int
)	O
;	O
util_do_command	function
(	O
"setq PID=\"%lu\""	pointer
,	O
(	O
unsigned	O
long	O
)	O
getpid	function
(	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
sizeof	O
(	O
default_setup	array
)	O
/	O
sizeof	O
(	O
default_setup	array
[	O
0	int
]	O
)	O
;	O
i	int
++	O
)	O
util_do_command	function
(	O
"%s"	pointer
,	O
default_setup	array
[	O
i	int
]	O
)	O
;	O
p	pointer
=	O
getenv	function
(	O
"LINES"	pointer
)	O
;	O
if	O
(	O
p	pointer
&&	O
p	pointer
[	O
strspn	function
(	O
p	pointer
,	O
"0123456789"	pointer
)	O
]	O
==	O
0	int
)	O
util_do_command	function
(	O
"set screen=%s"	pointer
,	O
p	pointer
)	O
;	O
else	O
util_do_command	function
(	O
"set screen=%d"	pointer
,	O
util_getlines	function
(	O
)	O
)	O
;	O
p	pointer
=	O
getenv	function
(	O
"COLUMNS"	pointer
)	O
;	O
if	O
(	O
p	pointer
&&	O
p	pointer
[	O
strspn	function
(	O
p	pointer
,	O
"0123456789"	pointer
)	O
]	O
==	O
0	int
)	O
util_do_command	function
(	O
"set columns=%s"	pointer
,	O
p	pointer
)	O
;	O
else	O
util_do_command	function
(	O
"set columns=%d"	pointer
,	O
util_getcols	function
(	O
)	O
)	O
;	O
mailvar_set	function
(	O
mailvar_name_sendmail	pointer
,	O
mu_strdup	function
(	O
"sendmail:"	pointer
PATH_SENDMAIL	O
)	O
,	O
mailvar_type_string	int
,	O
MOPTF_OVERWRITE	int
)	O
;	O
mu_cli	function
(	O
argc	int
,	O
argv	pointer
,	O
&	O
cli	struct
,	O
mail_capa	array
,	O
NULL	O
,	O
&	O
argc	int
,	O
&	O
argv	pointer
)	O
;	O
if	O
(	O
default_content_type	pointer
||	O
default_encoding	pointer
)	O
mime_option	int
=	O
1	int
;	O
if	O
(	O
mime_option	int
)	O
util_cache_command	function
(	O
&	O
command_list	pointer
,	O
"set mime"	pointer
)	O
;	O
if	O
(	O
read_recipients	int
)	O
{	O
argv	pointer
+=	O
argc	int
;	O
argc	int
=	O
0	int
;	O
}	O
if	O
(	O
(	O
hint	pointer
&	O
(	O
HINT_SEND_MODE	int
|	O
HINT_FILE_OPTION	int
)	O
)	O
==	O
(	O
HINT_SEND_MODE	int
|	O
HINT_FILE_OPTION	int
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"conflicting options"	pointer
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
hint	pointer
&	O
HINT_FILE_OPTION	int
)	O
{	O
if	O
(	O
file	pointer
)	O
{	O
if	O
(	O
argc	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"-f requires at most one command line argument"	pointer
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
argc	int
)	O
{	O
if	O
(	O
argc	int
>	O
1	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"-f requires at most one command line argument"	pointer
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
file	pointer
=	O
mu_strdup	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
}	O
else	O
if	O
(	O
user	pointer
)	O
mu_asprintf	function
(	O
&	O
file	pointer
,	O
"~/%s/mbox"	pointer
,	O
user	pointer
)	O
;	O
else	O
file	pointer
=	O
mu_strdup	function
(	O
"~/mbox"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
argc	int
||	O
(	O
hint	pointer
&	O
HINT_SEND_MODE	int
)	O
)	O
util_cache_command	function
(	O
&	O
command_list	pointer
,	O
"setq mode=send"	pointer
)	O
;	O
else	O
if	O
(	O
user	pointer
)	O
mu_asprintf	function
(	O
&	O
file	pointer
,	O
"%%%s"	pointer
,	O
user	pointer
)	O
;	O
if	O
(	O
mailvar_is_true	function
(	O
mailvar_name_rc	pointer
)	O
)	O
util_do_command	function
(	O
"source %s"	pointer
,	O
SITE_MAIL_RC	O
)	O
;	O
if	O
(	O
(	O
p	pointer
=	O
getenv	function
(	O
"MAILRC"	pointer
)	O
)	O
&&	O
*	O
p	pointer
)	O
util_do_command	function
(	O
"source %s"	pointer
,	O
getenv	function
(	O
"MAILRC"	pointer
)	O
)	O
;	O
util_run_cached_commands	function
(	O
&	O
command_list	pointer
)	O
;	O
if	O
(	O
interactive	int
)	O
{	O
mu_stream_t	pointer
errstr	pointer
;	O
int	O
rc	int
=	O
mu_stdstream_strerr_create	function
(	O
&	O
errstr	pointer
,	O
MU_STRERR_STDERR	int
,	O
0	int
,	O
0	int
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_stream_destroy	function
(	O
&	O
mu_strerr	pointer
)	O
;	O
mu_strerr	pointer
=	O
errstr	pointer
;	O
}	O
}	O
else	O
{	O
util_do_command	function
(	O
"set nocrt"	pointer
)	O
;	O
util_do_command	function
(	O
"set noasksub"	pointer
)	O
;	O
util_do_command	function
(	O
"set noaskcc"	pointer
)	O
;	O
util_do_command	function
(	O
"set noaskbcc"	pointer
)	O
;	O
}	O
if	O
(	O
mailvar_get	function
(	O
&	O
mode	int
,	O
mailvar_name_mode	pointer
,	O
mailvar_type_string	int
,	O
1	int
)	O
)	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
ml_readline_init	function
(	O
)	O
;	O
mail_set_my_name	function
(	O
user	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
mode	int
,	O
"send"	pointer
)	O
==	O
0	int
)	O
{	O
char	O
*	O
buf	pointer
=	O
NULL	O
;	O
int	O
rc	int
;	O
mu_argcv_string	function
(	O
argc	int
,	O
argv	pointer
,	O
&	O
buf	pointer
)	O
;	O
rc	int
=	O
util_do_command	function
(	O
"mail %s"	pointer
,	O
buf	pointer
)	O
;	O
return	O
mailvar_is_true	function
(	O
mailvar_name_mailx	pointer
)	O
?	O
0	int
:	O
rc	int
;	O
}	O
else	O
{	O
if	O
(	O
(	O
rc	int
=	O
mu_mailbox_create_default	function
(	O
&	O
mbox	pointer
,	O
file	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
file	pointer
)	O
mu_error	function
(	O
_	O
(	O
"Cannot create mailbox %s: %s"	pointer
)	O
,	O
file	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
else	O
mu_error	function
(	O
_	O
(	O
"Cannot create mailbox: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
file	pointer
)	O
{	O
mu_url_t	pointer
url	pointer
;	O
if	O
(	O
mu_mailbox_get_url	function
(	O
mbox	pointer
,	O
&	O
url	pointer
)	O
==	O
0	int
)	O
{	O
rc	int
=	O
mu_url_dup	function
(	O
url	pointer
,	O
&	O
secondary_url	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_url_dup"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
memset	function
(	O
file	pointer
,	O
0	int
,	O
strlen	function
(	O
file	pointer
)	O
)	O
;	O
free	function
(	O
file	pointer
)	O
;	O
}	O
if	O
(	O
(	O
rc	int
=	O
mu_mailbox_open	function
(	O
mbox	pointer
,	O
MU_STREAM_RDWR	O
|	O
MU_STREAM_CREAT	int
)	O
)	O
!=	O
0	int
)	O
{	O
mu_url_t	pointer
url	pointer
=	O
NULL	O
;	O
mu_mailbox_get_url	function
(	O
mbox	pointer
,	O
&	O
url	pointer
)	O
;	O
mu_error	function
(	O
_	O
(	O
"Cannot open mailbox %s: %s"	pointer
)	O
,	O
mu_url_to_string	function
(	O
url	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_mailbox_destroy	function
(	O
&	O
mbox	pointer
)	O
;	O
}	O
if	O
(	O
rc	int
)	O
total	long
=	O
0	int
;	O
else	O
{	O
if	O
(	O
(	O
rc	int
=	O
mu_mailbox_scan	function
(	O
mbox	pointer
,	O
1	int
,	O
&	O
total	long
)	O
)	O
!=	O
0	int
)	O
{	O
mu_url_t	pointer
url	pointer
=	O
NULL	O
;	O
mu_mailbox_get_url	function
(	O
mbox	pointer
,	O
&	O
url	pointer
)	O
;	O
mu_error	function
(	O
_	O
(	O
"Cannot read mailbox %s: %s"	pointer
)	O
,	O
mu_url_to_string	function
(	O
url	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
strcmp	function
(	O
mode	int
,	O
"exist"	pointer
)	O
==	O
0	int
)	O
{	O
mu_mailbox_close	function
(	O
mbox	pointer
)	O
;	O
return	O
(	O
total	long
<	O
1	int
)	O
?	O
1	int
:	O
0	int
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
mode	int
,	O
"print"	pointer
)	O
==	O
0	int
)	O
do_and_quit	function
(	O
"print *"	pointer
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
mode	int
,	O
"headers"	pointer
)	O
==	O
0	int
)	O
do_and_quit	function
(	O
"from *"	pointer
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
mode	int
,	O
"read"	pointer
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"Unknown mode `%s'"	pointer
)	O
,	O
mode	int
)	O
;	O
util_do_command	function
(	O
mailvar_name_quit	pointer
)	O
;	O
return	O
1	int
;	O
}	O
}	O
if	O
(	O
total	long
==	O
0	int
&&	O
(	O
strcmp	function
(	O
mode	int
,	O
"read"	pointer
)	O
||	O
!	O
mailvar_is_true	function
(	O
mailvar_name_emptystart	pointer
)	O
)	O
)	O
{	O
if	O
(	O
secondary_url	pointer
)	O
mail_summary	function
(	O
0	int
,	O
NULL	O
)	O
;	O
else	O
mu_printf	function
(	O
_	O
(	O
"No mail for %s\n"	pointer
)	O
,	O
user	pointer
?	O
user	pointer
:	O
mail_whoami	function
(	O
)	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
mailvar_is_true	function
(	O
mailvar_name_header	pointer
)	O
)	O
{	O
util_do_command	function
(	O
"summary"	pointer
)	O
;	O
util_do_command	function
(	O
"headers"	pointer
)	O
;	O
}	O
mailvar_get	function
(	O
&	O
prompt	pointer
,	O
mailvar_name_prompt	pointer
,	O
mailvar_type_string	int
,	O
0	int
)	O
;	O
mail_mainloop	function
(	O
mail_cmdline	function
,	O
(	O
void	O
*	O
)	O
prompt	pointer
,	O
1	int
)	O
;	O
mu_printf	function
(	O
"\n"	pointer
)	O
;	O
util_do_command	function
(	O
mailvar_name_quit	pointer
)	O
;	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
void	O
mail_mainloop	function
(	O
char	O
*	O
(	O
*	O
input	pointer
)	O
(	O
void	O
*	O
,	O
int	O
)	O
,	O
void	O
*	O
closure	pointer
,	O
int	O
do_history	int
)	O
{	O
char	O
*	O
command	pointer
,	O
*	O
cmd	enum
;	O
while	O
(	O
(	O
command	pointer
=	O
(	O
*	O
input	pointer
)	O
(	O
closure	pointer
,	O
0	int
)	O
)	O
!=	O
NULL	O
)	O
{	O
int	O
len	long
=	O
strlen	function
(	O
command	pointer
)	O
;	O
while	O
(	O
len	long
>	O
0	int
&&	O
command	pointer
[	O
len	long
-	O
1	int
]	O
==	O
'\\'	O
)	O
{	O
char	O
*	O
buf	pointer
;	O
char	O
*	O
command2	pointer
=	O
(	O
*	O
input	pointer
)	O
(	O
closure	pointer
,	O
1	int
)	O
;	O
if	O
(	O
!	O
command2	pointer
)	O
{	O
command	pointer
[	O
len	long
-	O
1	int
]	O
=	O
0	int
;	O
break	O
;	O
}	O
command	pointer
[	O
len	long
-	O
1	int
]	O
=	O
'\0'	O
;	O
buf	pointer
=	O
mu_alloc	function
(	O
(	O
len	long
+	O
strlen	function
(	O
command2	pointer
)	O
)	O
*	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
strcpy	function
(	O
buf	pointer
,	O
command	pointer
)	O
;	O
strcat	function
(	O
buf	pointer
,	O
command2	pointer
)	O
;	O
free	function
(	O
command	pointer
)	O
;	O
command	pointer
=	O
buf	pointer
;	O
len	long
=	O
strlen	function
(	O
command	pointer
)	O
;	O
}	O
cmd	enum
=	O
mu_str_stripws	function
(	O
command	pointer
)	O
;	O
util_do_command	function
(	O
"%s"	pointer
,	O
cmd	enum
)	O
;	O
if	O
(	O
command	pointer
)	O
free	function
(	O
command	pointer
)	O
;	O
}	O
}	O
int	O
mail_warranty	function
(	O
int	O
argc	int
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
argv	pointer
MU_ARG_UNUSED	O
)	O
{	O
mu_printf	function
(	O
_	O
(	O
"GNU Mailutils -- a suite of utilities for electronic mail\n"	pointer
"Copyright (C) 1999-2019 Free Software Foundation, Inc.\n\n"	pointer
)	O
)	O
;	O
mu_printf	function
(	O
_	O
(	O
"   GNU Mailutils is free software; you can redistribute it and/or modify\n"	pointer
"   it under the terms of the GNU General Public License as published by\n"	pointer
"   the Free Software Foundation; either version 3 of the License, or\n"	pointer
"   (at your option) any later version.\n"	pointer
"\n"	pointer
"   GNU Mailutils is distributed in the hope that it will be useful,\n"	pointer
"   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"	pointer
"   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"	pointer
"   GNU General Public License for more details.\n"	pointer
"\n"	pointer
"   You should have received a copy of the GNU General Public License along\n"	pointer
"   with GNU Mailutils.  If not, see <http://www.gnu.org/licenses/>.\n"	pointer
"\n"	pointer
"\n"	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
