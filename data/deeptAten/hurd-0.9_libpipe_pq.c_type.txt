error_t	int
pq_create	function
(	O
struct	O
pq	struct
*	O
*	O
pq	struct
)	O
{	O
*	O
pq	struct
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
pq	struct
)	O
)	O
;	O
if	O
(	O
!	O
*	O
pq	struct
)	O
return	O
ENOMEM	int
;	O
(	O
*	O
pq	struct
)	O
->	O
head	pointer
=	O
(	O
*	O
pq	struct
)	O
->	O
tail	pointer
=	O
0	int
;	O
(	O
*	O
pq	struct
)	O
->	O
free	function
=	O
0	int
;	O
return	O
0	int
;	O
}	O
static	O
void	O
free_packets	function
(	O
struct	O
packet	struct
*	O
head	pointer
)	O
{	O
if	O
(	O
head	pointer
)	O
{	O
struct	O
packet	struct
*	O
next	pointer
=	O
head	pointer
->	O
next	pointer
;	O
if	O
(	O
head	pointer
->	O
ports	pointer
)	O
free	function
(	O
head	pointer
->	O
ports	pointer
)	O
;	O
if	O
(	O
head	pointer
->	O
buf_len	long
>	O
0	int
)	O
{	O
if	O
(	O
head	pointer
->	O
buf_vm_alloced	int
)	O
munmap	function
(	O
head	pointer
->	O
buf	pointer
,	O
head	pointer
->	O
buf_len	long
)	O
;	O
else	O
free	function
(	O
head	pointer
->	O
buf	pointer
)	O
;	O
}	O
free	function
(	O
head	pointer
)	O
;	O
free_packets	function
(	O
next	pointer
)	O
;	O
}	O
}	O
void	O
pq_free	function
(	O
struct	O
pq	struct
*	O
pq	struct
)	O
{	O
pq_drain	function
(	O
pq	struct
)	O
;	O
free_packets	function
(	O
pq	struct
->	O
free	function
)	O
;	O
free	function
(	O
pq	struct
)	O
;	O
}	O
int	O
pq_dequeue	function
(	O
struct	O
pq	struct
*	O
pq	struct
)	O
{	O
extern	O
void	O
pipe_dealloc_addr	function
(	O
void	O
*	O
addr	pointer
)	O
;	O
struct	O
packet	struct
*	O
packet	struct
=	O
pq	struct
->	O
head	pointer
;	O
if	O
(	O
!	O
packet	struct
)	O
return	O
0	int
;	O
if	O
(	O
packet	struct
->	O
num_ports	long
)	O
packet_dealloc_ports	function
(	O
packet	struct
)	O
;	O
if	O
(	O
packet	struct
->	O
source	pointer
)	O
pipe_dealloc_addr	function
(	O
packet	struct
->	O
source	pointer
)	O
;	O
pq	struct
->	O
head	pointer
=	O
packet	struct
->	O
next	pointer
;	O
packet	struct
->	O
next	pointer
=	O
pq	struct
->	O
free	function
;	O
pq	struct
->	O
free	function
=	O
packet	struct
;	O
if	O
(	O
pq	struct
->	O
head	pointer
)	O
pq	struct
->	O
head	pointer
->	O
prev	pointer
=	O
0	int
;	O
else	O
pq	struct
->	O
tail	pointer
=	O
0	int
;	O
return	O
1	int
;	O
}	O
void	O
pq_drain	function
(	O
struct	O
pq	struct
*	O
pq	struct
)	O
{	O
while	O
(	O
pq_dequeue	function
(	O
pq	struct
)	O
)	O
;	O
}	O
struct	O
packet	struct
*	O
pq_queue	function
(	O
struct	O
pq	struct
*	O
pq	struct
,	O
unsigned	O
type	short
,	O
void	O
*	O
source	pointer
)	O
{	O
struct	O
packet	struct
*	O
packet	struct
=	O
pq	struct
->	O
free	function
;	O
if	O
(	O
!	O
packet	struct
)	O
{	O
packet	struct
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
packet	struct
)	O
)	O
;	O
if	O
(	O
!	O
packet	struct
)	O
return	O
0	int
;	O
packet	struct
->	O
buf	pointer
=	O
0	int
;	O
packet	struct
->	O
buf_len	long
=	O
0	int
;	O
packet	struct
->	O
ports	pointer
=	O
0	int
;	O
packet	struct
->	O
ports_alloced	long
=	O
0	int
;	O
packet	struct
->	O
buf_vm_alloced	int
=	O
0	int
;	O
}	O
else	O
pq	struct
->	O
free	function
=	O
packet	struct
->	O
next	pointer
;	O
packet	struct
->	O
num_ports	long
=	O
0	int
;	O
packet	struct
->	O
buf_start	pointer
=	O
packet	struct
->	O
buf_end	pointer
=	O
packet	struct
->	O
buf	pointer
;	O
packet	struct
->	O
type	short
=	O
type	short
;	O
packet	struct
->	O
source	pointer
=	O
source	pointer
;	O
packet	struct
->	O
next	pointer
=	O
0	int
;	O
packet	struct
->	O
prev	pointer
=	O
pq	struct
->	O
tail	pointer
;	O
if	O
(	O
pq	struct
->	O
tail	pointer
)	O
pq	struct
->	O
tail	pointer
->	O
next	pointer
=	O
packet	struct
;	O
pq	struct
->	O
tail	pointer
=	O
packet	struct
;	O
if	O
(	O
!	O
pq	struct
->	O
head	pointer
)	O
pq	struct
->	O
head	pointer
=	O
packet	struct
;	O
return	O
packet	struct
;	O
}	O
size_t	long
packet_new_size	function
(	O
struct	O
packet	struct
*	O
packet	struct
,	O
size_t	long
extra	long
)	O
{	O
size_t	long
new_len	long
=	O
(	O
packet	struct
->	O
buf_end	pointer
-	O
packet	struct
->	O
buf	pointer
)	O
+	O
extra	long
;	O
if	O
(	O
packet	struct
->	O
buf_vm_alloced	int
||	O
new_len	long
>=	O
PACKET_SIZE_LARGE	int
)	O
return	O
round_page	function
(	O
new_len	long
)	O
;	O
else	O
return	O
(	O
new_len	long
+	O
511	int
)	O
&	O
~	O
511	int
;	O
}	O
int	O
packet_extend	function
(	O
struct	O
packet	struct
*	O
packet	struct
,	O
size_t	long
new_len	long
)	O
{	O
size_t	long
old_len	long
=	O
packet	struct
->	O
buf_len	long
;	O
if	O
(	O
old_len	long
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
packet	struct
->	O
buf_vm_alloced	int
)	O
{	O
char	O
*	O
extension	pointer
=	O
packet	struct
->	O
buf	pointer
+	O
old_len	long
;	O
if	O
(	O
vm_allocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
(	O
vm_address_t	O
*	O
)	O
&	O
extension	pointer
,	O
new_len	long
-	O
old_len	long
,	O
0	int
)	O
!=	O
0	int
)	O
return	O
0	int
;	O
}	O
else	O
{	O
char	O
*	O
new_buf	pointer
;	O
char	O
*	O
old_buf	pointer
=	O
packet	struct
->	O
buf	pointer
;	O
if	O
(	O
new_len	long
>=	O
PACKET_SIZE_LARGE	int
)	O
return	O
0	int
;	O
new_buf	pointer
=	O
realloc	function
(	O
old_buf	pointer
,	O
new_len	long
)	O
;	O
if	O
(	O
!	O
new_buf	pointer
)	O
return	O
0	int
;	O
packet	struct
->	O
buf	pointer
=	O
new_buf	pointer
;	O
packet	struct
->	O
buf_start	pointer
=	O
new_buf	pointer
+	O
(	O
packet	struct
->	O
buf_start	pointer
-	O
old_buf	pointer
)	O
;	O
packet	struct
->	O
buf_end	pointer
=	O
new_buf	pointer
+	O
(	O
packet	struct
->	O
buf_end	pointer
-	O
old_buf	pointer
)	O
;	O
}	O
packet	struct
->	O
buf_len	long
=	O
new_len	long
;	O
return	O
1	int
;	O
}	O
error_t	int
packet_realloc	function
(	O
struct	O
packet	struct
*	O
packet	struct
,	O
size_t	long
new_len	long
)	O
{	O
error_t	int
err	int
;	O
char	O
*	O
new_buf	pointer
;	O
char	O
*	O
old_buf	pointer
=	O
packet	struct
->	O
buf	pointer
;	O
int	O
vm_alloc	int
=	O
(	O
new_len	long
>=	O
PACKET_SIZE_LARGE	int
)	O
;	O
if	O
(	O
vm_alloc	int
)	O
{	O
new_buf	pointer
=	O
mmap	function
(	O
0	int
,	O
new_len	long
,	O
PROT_READ	int
|	O
PROT_WRITE	int
,	O
MAP_ANON	O
,	O
0	int
,	O
0	int
)	O
;	O
err	int
=	O
(	O
new_buf	pointer
==	O
(	O
char	O
*	O
)	O
-	O
1	int
)	O
?	O
errno	O
:	O
0	int
;	O
}	O
else	O
{	O
new_buf	pointer
=	O
malloc	function
(	O
new_len	long
)	O
;	O
err	int
=	O
(	O
new_buf	pointer
?	O
0	int
:	O
ENOMEM	int
)	O
;	O
}	O
if	O
(	O
!	O
err	int
)	O
{	O
size_t	long
old_len	long
=	O
packet	struct
->	O
buf_len	long
;	O
char	O
*	O
start	pointer
=	O
packet	struct
->	O
buf_start	pointer
,	O
*	O
end	pointer
=	O
packet	struct
->	O
buf_end	pointer
;	O
if	O
(	O
end	pointer
!=	O
start	pointer
)	O
memcpy	function
(	O
new_buf	pointer
,	O
start	pointer
,	O
end	pointer
-	O
start	pointer
)	O
;	O
if	O
(	O
old_len	long
>	O
0	int
)	O
{	O
if	O
(	O
packet	struct
->	O
buf_vm_alloced	int
)	O
vm_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
(	O
vm_address_t	O
)	O
old_buf	pointer
,	O
old_len	long
)	O
;	O
else	O
free	function
(	O
old_buf	pointer
)	O
;	O
}	O
packet	struct
->	O
buf	pointer
=	O
new_buf	pointer
;	O
packet	struct
->	O
buf_len	long
=	O
new_len	long
;	O
packet	struct
->	O
buf_vm_alloced	int
=	O
vm_alloc	int
;	O
packet	struct
->	O
buf_start	pointer
=	O
new_buf	pointer
;	O
packet	struct
->	O
buf_end	pointer
=	O
new_buf	pointer
+	O
(	O
end	pointer
-	O
start	pointer
)	O
;	O
}	O
return	O
err	int
;	O
}	O
void	O
packet_dealloc_ports	function
(	O
struct	O
packet	struct
*	O
packet	struct
)	O
{	O
unsigned	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
packet	struct
->	O
num_ports	long
;	O
i	int
++	O
)	O
{	O
mach_port_t	O
port	O
=	O
packet	struct
->	O
ports	pointer
[	O
i	int
]	O
;	O
if	O
(	O
port	O
!=	O
MACH_PORT_NULL	O
)	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
port	O
)	O
;	O
}	O
}	O
error_t	int
packet_set_ports	function
(	O
struct	O
packet	struct
*	O
packet	struct
,	O
mach_port_t	O
*	O
ports	pointer
,	O
size_t	long
num_ports	long
)	O
{	O
if	O
(	O
packet	struct
->	O
num_ports	long
>	O
0	int
)	O
packet_dealloc_ports	function
(	O
packet	struct
)	O
;	O
if	O
(	O
num_ports	long
>	O
packet	struct
->	O
ports_alloced	long
)	O
{	O
mach_port_t	O
*	O
new_ports	O
=	O
malloc	function
(	O
sizeof	O
(	O
mach_port_t	O
)	O
*	O
num_ports	long
)	O
;	O
if	O
(	O
!	O
new_ports	O
)	O
return	O
ENOMEM	int
;	O
free	function
(	O
packet	struct
->	O
ports	pointer
)	O
;	O
packet	struct
->	O
ports	pointer
=	O
new_ports	O
;	O
packet	struct
->	O
ports_alloced	long
=	O
num_ports	long
;	O
}	O
memcpy	function
(	O
packet	struct
->	O
ports	pointer
,	O
ports	pointer
,	O
sizeof	O
(	O
mach_port_t	O
)	O
*	O
num_ports	long
)	O
;	O
packet	struct
->	O
num_ports	long
=	O
num_ports	long
;	O
return	O
0	int
;	O
}	O
error_t	int
packet_read_ports	function
(	O
struct	O
packet	struct
*	O
packet	struct
,	O
mach_port_t	O
*	O
*	O
ports	pointer
,	O
size_t	long
*	O
num_ports	long
)	O
{	O
int	O
length	int
=	O
packet	struct
->	O
num_ports	long
*	O
sizeof	O
(	O
mach_port_t	O
)	O
;	O
if	O
(	O
*	O
num_ports	long
<	O
packet	struct
->	O
num_ports	long
)	O
{	O
*	O
ports	pointer
=	O
mmap	function
(	O
0	int
,	O
length	int
,	O
PROT_READ	int
|	O
PROT_WRITE	int
,	O
MAP_ANON	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
*	O
ports	pointer
==	O
(	O
mach_port_t	O
*	O
)	O
-	O
1	int
)	O
return	O
errno	O
;	O
}	O
*	O
num_ports	long
=	O
packet	struct
->	O
num_ports	long
;	O
memcpy	function
(	O
*	O
ports	pointer
,	O
packet	struct
->	O
ports	pointer
,	O
length	int
)	O
;	O
packet	struct
->	O
num_ports	long
=	O
0	int
;	O
return	O
0	int
;	O
}	O
error_t	int
packet_write	function
(	O
struct	O
packet	struct
*	O
packet	struct
,	O
char	O
*	O
data	pointer
,	O
size_t	long
data_len	long
,	O
size_t	long
*	O
amount	pointer
)	O
{	O
error_t	int
err	int
=	O
packet_ensure	function
(	O
packet	struct
,	O
data_len	long
)	O
;	O
if	O
(	O
err	int
)	O
return	O
err	int
;	O
memcpy	function
(	O
packet	struct
->	O
buf_end	pointer
,	O
data	pointer
,	O
data_len	long
)	O
;	O
packet	struct
->	O
buf_end	pointer
+=	O
data_len	long
;	O
if	O
(	O
amount	pointer
!=	O
NULL	O
)	O
*	O
amount	pointer
=	O
data_len	long
;	O
return	O
0	int
;	O
}	O
static	O
error_t	int
packet_fetch	function
(	O
struct	O
packet	struct
*	O
packet	struct
,	O
char	O
*	O
*	O
data	pointer
,	O
size_t	long
*	O
data_len	long
,	O
size_t	long
amount	pointer
,	O
int	O
remove	function
)	O
{	O
char	O
*	O
start	pointer
=	O
packet	struct
->	O
buf_start	pointer
;	O
char	O
*	O
end	pointer
=	O
packet	struct
->	O
buf_end	pointer
;	O
if	O
(	O
amount	pointer
>	O
end	pointer
-	O
start	pointer
)	O
amount	pointer
=	O
end	pointer
-	O
start	pointer
;	O
if	O
(	O
amount	pointer
>	O
0	int
)	O
{	O
char	O
*	O
buf	pointer
=	O
packet	struct
->	O
buf	pointer
;	O
if	O
(	O
remove	function
&&	O
packet	struct
->	O
buf_vm_alloced	int
&&	O
amount	pointer
>=	O
vm_page_size	O
)	O
{	O
if	O
(	O
buf	pointer
+	O
vm_page_size	O
<=	O
start	pointer
)	O
vm_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
(	O
vm_address_t	O
)	O
buf	pointer
,	O
trunc_page	function
(	O
start	pointer
)	O
-	O
(	O
vm_address_t	O
)	O
buf	pointer
)	O
;	O
*	O
data	pointer
=	O
start	pointer
;	O
start	pointer
+=	O
amount	pointer
;	O
if	O
(	O
start	pointer
<	O
end	pointer
)	O
{	O
char	O
*	O
non_aligned_start	pointer
=	O
start	pointer
;	O
start	pointer
=	O
(	O
char	O
*	O
)	O
trunc_page	function
(	O
start	pointer
)	O
;	O
amount	pointer
-=	O
non_aligned_start	pointer
-	O
start	pointer
;	O
}	O
else	O
{	O
start	pointer
=	O
(	O
char	O
*	O
)	O
round_page	function
(	O
start	pointer
)	O
;	O
packet	struct
->	O
buf_end	pointer
=	O
start	pointer
;	O
}	O
packet	struct
->	O
buf	pointer
=	O
start	pointer
;	O
packet	struct
->	O
buf_start	pointer
=	O
start	pointer
;	O
packet	struct
->	O
buf_len	long
-=	O
start	pointer
-	O
buf	pointer
;	O
}	O
else	O
{	O
if	O
(	O
*	O
data_len	long
<	O
amount	pointer
)	O
*	O
data	pointer
=	O
mmap	function
(	O
0	int
,	O
amount	pointer
,	O
PROT_READ	int
|	O
PROT_WRITE	int
,	O
MAP_ANON	O
,	O
0	int
,	O
0	int
)	O
;	O
memcpy	function
(	O
*	O
data	pointer
,	O
start	pointer
,	O
amount	pointer
)	O
;	O
start	pointer
+=	O
amount	pointer
;	O
if	O
(	O
remove	function
&&	O
start	pointer
-	O
buf	pointer
>	O
2	int
*	O
PACKET_SIZE_LARGE	int
)	O
{	O
vm_size_t	O
dealloc	O
=	O
trunc_page	function
(	O
start	pointer
)	O
-	O
(	O
vm_address_t	O
)	O
buf	pointer
;	O
vm_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
(	O
vm_address_t	O
)	O
buf	pointer
,	O
dealloc	O
)	O
;	O
packet	struct
->	O
buf	pointer
=	O
buf	pointer
+	O
dealloc	O
;	O
packet	struct
->	O
buf_len	long
-=	O
dealloc	O
;	O
}	O
if	O
(	O
remove	function
)	O
packet	struct
->	O
buf_start	pointer
=	O
start	pointer
;	O
}	O
}	O
*	O
data_len	long
=	O
amount	pointer
;	O
return	O
0	int
;	O
}	O
error_t	int
packet_read	function
(	O
struct	O
packet	struct
*	O
packet	struct
,	O
char	O
*	O
*	O
data	pointer
,	O
size_t	long
*	O
data_len	long
,	O
size_t	long
amount	pointer
)	O
{	O
return	O
packet_fetch	function
(	O
packet	struct
,	O
data	pointer
,	O
data_len	long
,	O
amount	pointer
,	O
1	int
)	O
;	O
}	O
error_t	int
packet_peek	function
(	O
struct	O
packet	struct
*	O
packet	struct
,	O
char	O
*	O
*	O
data	pointer
,	O
size_t	long
*	O
data_len	long
,	O
size_t	long
amount	pointer
)	O
{	O
return	O
packet_fetch	function
(	O
packet	struct
,	O
data	pointer
,	O
data_len	long
,	O
amount	pointer
,	O
0	int
)	O
;	O
}	O
