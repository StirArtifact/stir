DEFFMT	O
(	O
f_char	function
,	O
char	O
,	O
"%c"	pointer
)	O
DEFFMT	O
(	O
f_short	function
,	O
short	O
,	O
"%hd"	pointer
)	O
DEFFMT	O
(	O
f_ushort	function
,	O
unsigned	O
short	O
,	O
"%hu"	pointer
)	O
DEFFMT	O
(	O
f_int	function
,	O
int	O
,	O
"%d"	pointer
)	O
DEFFMT	O
(	O
f_uint	function
,	O
unsigned	O
,	O
"%u"	pointer
)	O
DEFFMT	O
(	O
f_long	function
,	O
long	O
,	O
"%ld"	pointer
)	O
DEFFMT	O
(	O
f_ulong	function
,	O
unsigned	O
long	O
,	O
"%lu"	pointer
)	O
DEFFMT	O
(	O
f_llong	function
,	O
long	O
long	O
,	O
"%lld"	pointer
)	O
DEFFMT	O
(	O
f_ullong	function
,	O
unsigned	O
long	O
long	O
,	O
"%llu"	pointer
)	O
DEFFMT	O
(	O
f_float	function
,	O
float	O
,	O
"%f"	pointer
)	O
DEFFMT	O
(	O
f_double	function
,	O
double	O
,	O
"%e"	pointer
)	O
static	O
int	O
f_stringz	function
(	O
FILE	struct
*	O
fp	pointer
,	O
void	O
*	O
ptr	pointer
,	O
int	O
size	int
)	O
{	O
int	O
sz	int
;	O
char	O
*	O
s	pointer
;	O
for	O
(	O
sz	int
=	O
1	int
,	O
s	pointer
=	O
ptr	pointer
;	O
*	O
s	pointer
;	O
s	pointer
++	O
,	O
sz	int
++	O
)	O
{	O
int	O
c	int
;	O
if	O
(	O
isprint	function
(	O
*	O
s	pointer
)	O
)	O
fputc	function
(	O
*	O
s	pointer
,	O
fp	pointer
)	O
;	O
else	O
if	O
(	O
(	O
c	int
=	O
escape	function
(	O
*	O
s	pointer
)	O
)	O
)	O
fprintf	function
(	O
fp	pointer
,	O
"\\%c"	pointer
,	O
c	int
)	O
;	O
else	O
fprintf	function
(	O
fp	pointer
,	O
"\\%03o"	pointer
,	O
*	O
s	pointer
)	O
;	O
}	O
return	O
sz	int
;	O
}	O
static	O
int	O
f_string	function
(	O
FILE	struct
*	O
fp	pointer
,	O
void	O
*	O
ptr	pointer
,	O
int	O
size	int
)	O
{	O
int	O
sz	int
;	O
char	O
*	O
s	pointer
;	O
for	O
(	O
sz	int
=	O
0	int
,	O
s	pointer
=	O
ptr	pointer
;	O
sz	int
<	O
size	int
;	O
s	pointer
++	O
,	O
sz	int
++	O
)	O
{	O
int	O
c	int
;	O
if	O
(	O
isprint	function
(	O
*	O
s	pointer
)	O
)	O
fputc	function
(	O
*	O
s	pointer
,	O
fp	pointer
)	O
;	O
else	O
if	O
(	O
(	O
c	int
=	O
escape	function
(	O
*	O
s	pointer
)	O
)	O
)	O
fprintf	function
(	O
fp	pointer
,	O
"\\%c"	pointer
,	O
c	int
)	O
;	O
else	O
fprintf	function
(	O
fp	pointer
,	O
"\\%03o"	pointer
,	O
*	O
s	pointer
)	O
;	O
}	O
return	O
sz	int
;	O
}	O
int	O
s_char	function
(	O
struct	O
xdatum	struct
*	O
xd	pointer
,	O
char	O
*	O
str	pointer
)	O
{	O
xd_store	function
(	O
xd	pointer
,	O
str	pointer
,	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
DEFNSCAN	O
(	O
s_short	function
,	O
short	O
,	O
long	O
,	O
strtol	function
)	O
;	O
DEFNSCAN	O
(	O
s_ushort	function
,	O
unsigned	O
short	O
,	O
unsigned	O
long	O
,	O
strtoul	function
)	O
;	O
DEFNSCAN	O
(	O
s_int	function
,	O
int	O
,	O
long	O
,	O
strtol	function
)	O
DEFNSCAN	O
(	O
s_uint	function
,	O
unsigned	O
,	O
unsigned	O
long	O
,	O
strtol	function
)	O
DEFNSCAN	O
(	O
s_long	function
,	O
long	O
,	O
long	O
,	O
strtoul	function
)	O
DEFNSCAN	O
(	O
s_ulong	function
,	O
unsigned	O
long	O
,	O
unsigned	O
long	O
,	O
strtoul	function
)	O
DEFNSCAN	O
(	O
s_llong	function
,	O
long	O
long	O
,	O
long	O
long	O
,	O
strtoll	function
)	O
DEFNSCAN	O
(	O
s_ullong	function
,	O
unsigned	O
long	O
long	O
,	O
unsigned	O
long	O
long	O
,	O
strtoull	function
)	O
int	O
s_double	function
(	O
struct	O
xdatum	struct
*	O
xd	pointer
,	O
char	O
*	O
str	pointer
)	O
{	O
double	O
d	double
;	O
char	O
*	O
p	pointer
;	O
errno	O
=	O
0	int
;	O
d	double
=	O
strtod	function
(	O
str	pointer
,	O
&	O
p	pointer
)	O
;	O
if	O
(	O
errno	O
||	O
*	O
p	pointer
)	O
return	O
1	int
;	O
xd_store	function
(	O
xd	pointer
,	O
&	O
d	double
,	O
sizeof	O
(	O
d	double
)	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
s_float	function
(	O
struct	O
xdatum	struct
*	O
xd	pointer
,	O
char	O
*	O
str	pointer
)	O
{	O
float	O
d	double
;	O
char	O
*	O
p	pointer
;	O
errno	O
=	O
0	int
;	O
d	double
=	O
strtod	function
(	O
str	pointer
,	O
&	O
p	pointer
)	O
;	O
if	O
(	O
errno	O
||	O
*	O
p	pointer
)	O
return	O
1	int
;	O
xd_store	function
(	O
xd	pointer
,	O
&	O
d	double
,	O
sizeof	O
(	O
d	double
)	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
s_stringz	function
(	O
struct	O
xdatum	struct
*	O
xd	pointer
,	O
char	O
*	O
str	pointer
)	O
{	O
xd_store	function
(	O
xd	pointer
,	O
str	pointer
,	O
strlen	function
(	O
str	pointer
)	O
+	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
s_string	function
(	O
struct	O
xdatum	struct
*	O
xd	pointer
,	O
char	O
*	O
str	pointer
)	O
{	O
xd_store	function
(	O
xd	pointer
,	O
str	pointer
,	O
strlen	function
(	O
str	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
datadef	struct
datatab	array
[	O
]	O
=	O
{	O
{	O
"char"	pointer
,	O
sizeof	O
(	O
char	O
)	O
,	O
f_char	function
,	O
s_char	function
}	O
,	O
{	O
"short"	pointer
,	O
sizeof	O
(	O
short	O
)	O
,	O
f_short	function
,	O
s_short	function
}	O
,	O
{	O
"ushort"	pointer
,	O
sizeof	O
(	O
unsigned	O
short	O
)	O
,	O
f_ushort	function
,	O
s_ushort	function
}	O
,	O
{	O
"int"	pointer
,	O
sizeof	O
(	O
int	O
)	O
,	O
f_int	function
,	O
s_int	function
}	O
,	O
{	O
"unsigned"	pointer
,	O
sizeof	O
(	O
unsigned	O
)	O
,	O
f_uint	function
,	O
s_uint	function
}	O
,	O
{	O
"uint"	pointer
,	O
sizeof	O
(	O
unsigned	O
)	O
,	O
f_uint	function
,	O
s_uint	function
}	O
,	O
{	O
"long"	pointer
,	O
sizeof	O
(	O
long	O
)	O
,	O
f_long	function
,	O
s_long	function
}	O
,	O
{	O
"ulong"	pointer
,	O
sizeof	O
(	O
unsigned	O
long	O
)	O
,	O
f_ulong	function
,	O
s_ulong	function
}	O
,	O
{	O
"llong"	pointer
,	O
sizeof	O
(	O
long	O
long	O
)	O
,	O
f_llong	function
,	O
s_llong	function
}	O
,	O
{	O
"ullong"	pointer
,	O
sizeof	O
(	O
unsigned	O
long	O
long	O
)	O
,	O
f_ullong	function
,	O
s_ullong	function
}	O
,	O
{	O
"float"	pointer
,	O
sizeof	O
(	O
float	O
)	O
,	O
f_float	function
,	O
s_float	function
}	O
,	O
{	O
"double"	pointer
,	O
sizeof	O
(	O
double	O
)	O
,	O
f_double	function
,	O
s_double	function
}	O
,	O
{	O
"stringz"	pointer
,	O
0	int
,	O
f_stringz	function
,	O
s_stringz	function
}	O
,	O
{	O
"string"	pointer
,	O
0	int
,	O
f_string	function
,	O
s_string	function
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
struct	O
datadef	struct
*	O
datadef_lookup	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
datadef	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
datatab	array
;	O
p	pointer
->	O
name	pointer
;	O
p	pointer
++	O
)	O
if	O
(	O
strcmp	function
(	O
p	pointer
->	O
name	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
return	O
p	pointer
;	O
return	O
NULL	O
;	O
}	O
struct	O
dsegm	struct
*	O
dsegm_new	function
(	O
int	O
type	int
)	O
{	O
struct	O
dsegm	struct
*	O
p	pointer
=	O
emalloc	function
(	O
sizeof	O
(	O
*	O
p	pointer
)	O
)	O
;	O
p	pointer
->	O
next	pointer
=	O
NULL	O
;	O
p	pointer
->	O
type	int
=	O
type	int
;	O
return	O
p	pointer
;	O
}	O
struct	O
dsegm	struct
*	O
dsegm_new_field	function
(	O
struct	O
datadef	struct
*	O
type	int
,	O
char	O
*	O
id	pointer
,	O
int	O
dim	int
)	O
{	O
struct	O
dsegm	struct
*	O
p	pointer
=	O
dsegm_new	function
(	O
FDEF_FLD	int
)	O
;	O
p	pointer
->	O
v	union
.	O
field	struct
.	O
type	int
=	O
type	int
;	O
p	pointer
->	O
v	union
.	O
field	struct
.	O
name	pointer
=	O
id	pointer
;	O
p	pointer
->	O
v	union
.	O
field	struct
.	O
dim	int
=	O
dim	int
;	O
return	O
p	pointer
;	O
}	O
void	O
dsegm_free_list	function
(	O
struct	O
dsegm	struct
*	O
dp	pointer
)	O
{	O
while	O
(	O
dp	pointer
)	O
{	O
struct	O
dsegm	struct
*	O
next	pointer
=	O
dp	pointer
->	O
next	pointer
;	O
free	function
(	O
dp	pointer
)	O
;	O
dp	pointer
=	O
next	pointer
;	O
}	O
}	O
void	O
datum_format	function
(	O
FILE	struct
*	O
fp	pointer
,	O
datum	struct
const	O
*	O
dat	struct
,	O
struct	O
dsegm	struct
*	O
ds	pointer
)	O
{	O
int	O
off	long
=	O
0	int
;	O
char	O
*	O
delim	array
[	O
2	int
]	O
;	O
int	O
first_field	int
=	O
1	int
;	O
if	O
(	O
!	O
ds	pointer
)	O
{	O
fprintf	function
(	O
fp	pointer
,	O
"%.*s\n"	pointer
,	O
dat	struct
->	O
dsize	int
,	O
dat	struct
->	O
dptr	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
variable_get	function
(	O
"delim1"	pointer
,	O
VART_STRING	int
,	O
(	O
void	O
*	O
)	O
&	O
delim	array
[	O
0	int
]	O
)	O
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
variable_get	function
(	O
"delim2"	pointer
,	O
VART_STRING	int
,	O
(	O
void	O
*	O
)	O
&	O
delim	array
[	O
1	int
]	O
)	O
)	O
abort	function
(	O
)	O
;	O
for	O
(	O
;	O
ds	pointer
&&	O
off	long
<=	O
dat	struct
->	O
dsize	int
;	O
ds	pointer
=	O
ds	pointer
->	O
next	pointer
)	O
{	O
switch	O
(	O
ds	pointer
->	O
type	int
)	O
{	O
case	O
FDEF_FLD	int
:	O
if	O
(	O
!	O
first_field	int
)	O
fwrite	function
(	O
delim	array
[	O
1	int
]	O
,	O
strlen	function
(	O
delim	array
[	O
1	int
]	O
)	O
,	O
1	int
,	O
fp	pointer
)	O
;	O
if	O
(	O
ds	pointer
->	O
v	union
.	O
field	struct
.	O
name	pointer
)	O
fprintf	function
(	O
fp	pointer
,	O
"%s="	pointer
,	O
ds	pointer
->	O
v	union
.	O
field	struct
.	O
name	pointer
)	O
;	O
if	O
(	O
ds	pointer
->	O
v	union
.	O
field	struct
.	O
dim	int
>	O
1	int
)	O
fprintf	function
(	O
fp	pointer
,	O
"{ "	pointer
)	O
;	O
if	O
(	O
ds	pointer
->	O
v	union
.	O
field	struct
.	O
type	int
->	O
format	pointer
)	O
{	O
int	O
i	int
,	O
n	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ds	pointer
->	O
v	union
.	O
field	struct
.	O
dim	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
i	int
)	O
fwrite	function
(	O
delim	array
[	O
0	int
]	O
,	O
strlen	function
(	O
delim	array
[	O
0	int
]	O
)	O
,	O
1	int
,	O
fp	pointer
)	O
;	O
if	O
(	O
off	long
+	O
ds	pointer
->	O
v	union
.	O
field	struct
.	O
type	int
->	O
size	int
>	O
dat	struct
->	O
dsize	int
)	O
{	O
fprintf	function
(	O
fp	pointer
,	O
_	O
(	O
"(not enough data)"	pointer
)	O
)	O
;	O
off	long
+=	O
dat	struct
->	O
dsize	int
;	O
break	O
;	O
}	O
else	O
{	O
n	int
=	O
ds	pointer
->	O
v	union
.	O
field	struct
.	O
type	int
->	O
format	pointer
(	O
fp	pointer
,	O
(	O
char	O
*	O
)	O
dat	struct
->	O
dptr	pointer
+	O
off	long
,	O
ds	pointer
->	O
v	union
.	O
field	struct
.	O
type	int
->	O
size	int
?	O
ds	pointer
->	O
v	union
.	O
field	struct
.	O
type	int
->	O
size	int
:	O
dat	struct
->	O
dsize	int
-	O
off	long
)	O
;	O
off	long
+=	O
n	int
;	O
}	O
}	O
}	O
if	O
(	O
ds	pointer
->	O
v	union
.	O
field	struct
.	O
dim	int
>	O
1	int
)	O
fprintf	function
(	O
fp	pointer
,	O
" }"	pointer
)	O
;	O
first_field	int
=	O
0	int
;	O
break	O
;	O
case	O
FDEF_OFF	int
:	O
off	long
=	O
ds	pointer
->	O
v	union
.	O
n	int
;	O
break	O
;	O
case	O
FDEF_PAD	int
:	O
off	long
+=	O
ds	pointer
->	O
v	union
.	O
n	int
;	O
break	O
;	O
}	O
}	O
}	O
struct	O
xdatum	struct
{	O
char	O
*	O
dptr	pointer
;	O
size_t	long
dsize	int
;	O
size_t	long
dmax	long
;	O
int	O
off	long
;	O
}	O
;	O
void	O
xd_expand	function
(	O
struct	O
xdatum	struct
*	O
xd	pointer
,	O
size_t	long
size	int
)	O
{	O
if	O
(	O
xd	pointer
->	O
dmax	long
<	O
size	int
)	O
{	O
xd	pointer
->	O
dptr	pointer
=	O
erealloc	function
(	O
xd	pointer
->	O
dptr	pointer
,	O
size	int
)	O
;	O
memset	function
(	O
xd	pointer
->	O
dptr	pointer
+	O
xd	pointer
->	O
dmax	long
,	O
0	int
,	O
size	int
-	O
xd	pointer
->	O
dmax	long
)	O
;	O
xd	pointer
->	O
dmax	long
=	O
size	int
;	O
}	O
}	O
void	O
xd_store	function
(	O
struct	O
xdatum	struct
*	O
xd	pointer
,	O
void	O
*	O
val	union
,	O
size_t	long
size	int
)	O
{	O
xd_expand	function
(	O
xd	pointer
,	O
xd	pointer
->	O
off	long
+	O
size	int
)	O
;	O
memcpy	function
(	O
xd	pointer
->	O
dptr	pointer
+	O
xd	pointer
->	O
off	long
,	O
val	union
,	O
size	int
)	O
;	O
xd	pointer
->	O
off	long
+=	O
size	int
;	O
if	O
(	O
xd	pointer
->	O
off	long
>	O
xd	pointer
->	O
dsize	int
)	O
xd	pointer
->	O
dsize	int
=	O
xd	pointer
->	O
off	long
;	O
}	O
static	O
int	O
datum_scan_notag	function
(	O
datum	struct
*	O
dat	struct
,	O
struct	O
dsegm	struct
*	O
ds	pointer
,	O
struct	O
kvpair	struct
*	O
kv	pointer
)	O
{	O
struct	O
xdatum	struct
xd	pointer
;	O
int	O
i	int
;	O
struct	O
slist	struct
*	O
s	pointer
;	O
int	O
err	int
=	O
0	int
;	O
memset	function
(	O
&	O
xd	pointer
,	O
0	int
,	O
sizeof	O
(	O
xd	pointer
)	O
)	O
;	O
for	O
(	O
;	O
err	int
==	O
0	int
&&	O
ds	pointer
&&	O
kv	pointer
;	O
ds	pointer
=	O
ds	pointer
->	O
next	pointer
,	O
kv	pointer
=	O
kv	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
kv	pointer
->	O
key	struct
)	O
{	O
lerror	function
(	O
&	O
kv	pointer
->	O
loc	pointer
,	O
_	O
(	O
"mixing tagged and untagged values is not allowed"	pointer
)	O
)	O
;	O
err	int
=	O
1	int
;	O
break	O
;	O
}	O
switch	O
(	O
ds	pointer
->	O
type	int
)	O
{	O
case	O
FDEF_FLD	int
:	O
if	O
(	O
!	O
ds	pointer
->	O
v	union
.	O
field	struct
.	O
type	int
->	O
scan	pointer
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
kv	pointer
->	O
type	int
==	O
KV_STRING	int
&&	O
ds	pointer
->	O
v	union
.	O
field	struct
.	O
dim	int
>	O
1	int
)	O
{	O
if	O
(	O
ds	pointer
->	O
v	union
.	O
field	struct
.	O
type	int
->	O
size	int
==	O
1	int
)	O
{	O
struct	O
slist	struct
*	O
head	pointer
=	O
slist_new_l	function
(	O
kv	pointer
->	O
val	union
.	O
s	pointer
,	O
1	int
)	O
;	O
struct	O
slist	struct
*	O
tail	pointer
=	O
head	pointer
;	O
char	O
*	O
s	pointer
;	O
for	O
(	O
s	pointer
=	O
kv	pointer
->	O
val	union
.	O
s	pointer
+	O
1	int
;	O
*	O
s	pointer
;	O
s	pointer
++	O
)	O
slist_insert	function
(	O
&	O
tail	pointer
,	O
slist_new_l	function
(	O
s	pointer
,	O
1	int
)	O
)	O
;	O
free	function
(	O
kv	pointer
->	O
val	union
.	O
s	pointer
)	O
;	O
kv	pointer
->	O
val	union
.	O
l	long
=	O
head	pointer
;	O
kv	pointer
->	O
type	int
=	O
KV_LIST	int
;	O
}	O
}	O
switch	O
(	O
kv	pointer
->	O
type	int
)	O
{	O
case	O
KV_STRING	int
:	O
err	int
=	O
ds	pointer
->	O
v	union
.	O
field	struct
.	O
type	int
->	O
scan	pointer
(	O
&	O
xd	pointer
,	O
kv	pointer
->	O
val	union
.	O
s	pointer
)	O
;	O
if	O
(	O
err	int
)	O
lerror	function
(	O
&	O
kv	pointer
->	O
loc	pointer
,	O
_	O
(	O
"cannot convert"	pointer
)	O
)	O
;	O
break	O
;	O
case	O
KV_LIST	int
:	O
for	O
(	O
i	int
=	O
0	int
,	O
s	pointer
=	O
kv	pointer
->	O
val	union
.	O
l	long
;	O
i	int
<	O
ds	pointer
->	O
v	union
.	O
field	struct
.	O
dim	int
&&	O
s	pointer
;	O
i	int
++	O
,	O
s	pointer
=	O
s	pointer
->	O
next	pointer
)	O
{	O
err	int
=	O
ds	pointer
->	O
v	union
.	O
field	struct
.	O
type	int
->	O
scan	pointer
(	O
&	O
xd	pointer
,	O
s	pointer
->	O
str	pointer
)	O
;	O
if	O
(	O
err	int
)	O
{	O
lerror	function
(	O
&	O
kv	pointer
->	O
loc	pointer
,	O
_	O
(	O
"cannot convert value #%d: %s"	pointer
)	O
,	O
i	int
,	O
s	pointer
->	O
str	pointer
)	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
s	pointer
)	O
{	O
lerror	function
(	O
&	O
kv	pointer
->	O
loc	pointer
,	O
"surplus initializers ignored"	pointer
)	O
;	O
err	int
=	O
1	int
;	O
}	O
}	O
break	O
;	O
case	O
FDEF_OFF	int
:	O
xd_expand	function
(	O
&	O
xd	pointer
,	O
ds	pointer
->	O
v	union
.	O
n	int
)	O
;	O
xd	pointer
.	O
off	long
=	O
ds	pointer
->	O
v	union
.	O
n	int
;	O
break	O
;	O
case	O
FDEF_PAD	int
:	O
xd_expand	function
(	O
&	O
xd	pointer
,	O
xd	pointer
.	O
off	long
+	O
ds	pointer
->	O
v	union
.	O
n	int
)	O
;	O
xd	pointer
.	O
off	long
+=	O
ds	pointer
->	O
v	union
.	O
n	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
err	int
)	O
{	O
free	function
(	O
xd	pointer
.	O
dptr	pointer
)	O
;	O
return	O
1	int
;	O
}	O
dat	struct
->	O
dptr	pointer
=	O
xd	pointer
.	O
dptr	pointer
;	O
dat	struct
->	O
dsize	int
=	O
xd	pointer
.	O
dsize	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
datum_scan_tag	function
(	O
datum	struct
*	O
dat	struct
,	O
struct	O
dsegm	struct
*	O
ds	pointer
,	O
struct	O
kvpair	struct
*	O
kv	pointer
)	O
{	O
lerror	function
(	O
&	O
kv	pointer
->	O
loc	pointer
,	O
"tagged values are not yet supported"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
int	O
datum_scan	function
(	O
datum	struct
*	O
dat	struct
,	O
struct	O
dsegm	struct
*	O
ds	pointer
,	O
struct	O
kvpair	struct
*	O
kv	pointer
)	O
{	O
return	O
(	O
kv	pointer
->	O
key	struct
?	O
datum_scan_tag	function
:	O
datum_scan_notag	function
)	O
(	O
dat	struct
,	O
ds	pointer
,	O
kv	pointer
)	O
;	O
}	O
void	O
dsprint	function
(	O
FILE	struct
*	O
fp	pointer
,	O
int	O
what	pointer
,	O
struct	O
dsegm	struct
*	O
ds	pointer
)	O
{	O
static	O
char	O
*	O
dsstr	array
[	O
]	O
=	O
{	O
"key"	pointer
,	O
"content"	pointer
}	O
;	O
int	O
delim	array
;	O
fprintf	function
(	O
fp	pointer
,	O
"define %s"	pointer
,	O
dsstr	array
[	O
what	pointer
]	O
)	O
;	O
if	O
(	O
ds	pointer
->	O
next	pointer
)	O
{	O
fprintf	function
(	O
fp	pointer
,	O
" {\n"	pointer
)	O
;	O
delim	array
=	O
'\t'	O
;	O
}	O
else	O
delim	array
=	O
' '	O
;	O
for	O
(	O
;	O
ds	pointer
;	O
ds	pointer
=	O
ds	pointer
->	O
next	pointer
)	O
{	O
switch	O
(	O
ds	pointer
->	O
type	int
)	O
{	O
case	O
FDEF_FLD	int
:	O
fprintf	function
(	O
fp	pointer
,	O
"%c%s"	pointer
,	O
delim	array
,	O
ds	pointer
->	O
v	union
.	O
field	struct
.	O
type	int
->	O
name	pointer
)	O
;	O
if	O
(	O
ds	pointer
->	O
v	union
.	O
field	struct
.	O
name	pointer
)	O
fprintf	function
(	O
fp	pointer
,	O
" %s"	pointer
,	O
ds	pointer
->	O
v	union
.	O
field	struct
.	O
name	pointer
)	O
;	O
if	O
(	O
ds	pointer
->	O
v	union
.	O
field	struct
.	O
dim	int
>	O
1	int
)	O
fprintf	function
(	O
fp	pointer
,	O
"[%d]"	pointer
,	O
ds	pointer
->	O
v	union
.	O
field	struct
.	O
dim	int
)	O
;	O
break	O
;	O
case	O
FDEF_OFF	int
:	O
fprintf	function
(	O
fp	pointer
,	O
"%coffset %d"	pointer
,	O
delim	array
,	O
ds	pointer
->	O
v	union
.	O
n	int
)	O
;	O
break	O
;	O
case	O
FDEF_PAD	int
:	O
fprintf	function
(	O
fp	pointer
,	O
"%cpad %d"	pointer
,	O
delim	array
,	O
ds	pointer
->	O
v	union
.	O
n	int
)	O
;	O
break	O
;	O
}	O
if	O
(	O
ds	pointer
->	O
next	pointer
)	O
fputc	function
(	O
','	O
,	O
fp	pointer
)	O
;	O
fputc	function
(	O
'\n'	O
,	O
fp	pointer
)	O
;	O
}	O
if	O
(	O
delim	array
==	O
'\t'	O
)	O
fputs	function
(	O
"}\n"	pointer
,	O
fp	pointer
)	O
;	O
}	O
