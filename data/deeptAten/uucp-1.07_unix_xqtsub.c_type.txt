const	O
char	O
xqtsub_rcsid	array
[	O
]	O
=	O
"$Id: xqtsub.c,v 1.24 2002/03/05 19:10:42 ian Rel $"	pointer
;	O
static	O
boolean	int
fclean_uuxqt_dir	function
P	O
(	O
(	O
const	O
char	O
*	O
zxqtdir	pointer
)	O
)	O
;	O
char	O
*	O
zsysdep_find_command	function
(	O
zcmd	pointer
,	O
pzcmds	pointer
,	O
pzpath	pointer
,	O
pferr	pointer
)	O
const	O
char	O
*	O
zcmd	pointer
;	O
char	O
*	O
*	O
pzcmds	pointer
;	O
char	O
*	O
*	O
pzpath	pointer
;	O
boolean	int
*	O
pferr	pointer
;	O
{	O
char	O
*	O
*	O
pz	pointer
;	O
struct	O
stat	struct
s	struct
;	O
*	O
pferr	pointer
=	O
FALSE	O
;	O
for	O
(	O
pz	pointer
=	O
pzcmds	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
{	O
char	O
*	O
zslash	pointer
;	O
if	O
(	O
strcmp	function
(	O
*	O
pz	pointer
,	O
"ALL"	pointer
)	O
==	O
0	int
)	O
break	O
;	O
zslash	pointer
=	O
strrchr	function
(	O
*	O
pz	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
zslash	pointer
!=	O
NULL	O
)	O
++	O
zslash	pointer
;	O
else	O
zslash	pointer
=	O
*	O
pz	pointer
;	O
if	O
(	O
strcmp	function
(	O
zslash	pointer
,	O
zcmd	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
*	O
pz	pointer
,	O
zcmd	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
*	O
*	O
pz	pointer
==	O
'/'	O
)	O
{	O
if	O
(	O
stat	struct
(	O
*	O
pz	pointer
,	O
&	O
s	struct
)	O
!=	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"%s: %s"	pointer
,	O
*	O
pz	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
*	O
pferr	pointer
=	O
TRUE	O
;	O
return	O
NULL	O
;	O
}	O
return	O
zbufcpy	function
(	O
*	O
pz	pointer
)	O
;	O
}	O
break	O
;	O
}	O
}	O
if	O
(	O
*	O
pz	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
for	O
(	O
pz	pointer
=	O
pzpath	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
{	O
char	O
*	O
zname	pointer
;	O
zname	pointer
=	O
zsysdep_in_dir	function
(	O
*	O
pz	pointer
,	O
zcmd	pointer
)	O
;	O
if	O
(	O
stat	struct
(	O
zname	pointer
,	O
&	O
s	struct
)	O
==	O
0	int
)	O
return	O
zname	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
char	O
*	O
zsysdep_xqt_local_file	function
(	O
qsys	pointer
,	O
zfile	pointer
)	O
const	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
;	O
const	O
char	O
*	O
zfile	pointer
;	O
{	O
if	O
(	O
*	O
zfile	pointer
!=	O
'~'	O
)	O
return	O
NULL	O
;	O
if	O
(	O
zfile	pointer
[	O
1	int
]	O
==	O
'~'	O
)	O
{	O
size_t	long
clen	long
;	O
char	O
*	O
zret	pointer
;	O
clen	long
=	O
strlen	function
(	O
zfile	pointer
)	O
;	O
zret	pointer
=	O
zbufalc	function
(	O
clen	long
)	O
;	O
memcpy	function
(	O
zret	pointer
,	O
zfile	pointer
+	O
1	int
,	O
clen	long
)	O
;	O
return	O
zret	pointer
;	O
}	O
return	O
zsysdep_local_file	function
(	O
zfile	pointer
,	O
qsys	pointer
->	O
uuconf_zpubdir	pointer
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
}	O
boolean	int
fsysdep_execute	function
(	O
qsys	pointer
,	O
zuser	pointer
,	O
pazargs	pointer
,	O
zfullcmd	pointer
,	O
zinput	pointer
,	O
zoutput	pointer
,	O
fshell	int
,	O
iseq	int
,	O
pzerror	pointer
,	O
pftemp	pointer
)	O
const	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
;	O
const	O
char	O
*	O
zuser	pointer
;	O
const	O
char	O
*	O
*	O
pazargs	pointer
;	O
const	O
char	O
*	O
zfullcmd	pointer
ATTRIBUTE_UNUSED	O
;	O
const	O
char	O
*	O
zinput	pointer
;	O
const	O
char	O
*	O
zoutput	pointer
;	O
boolean	int
fshell	int
;	O
int	O
iseq	int
;	O
char	O
*	O
*	O
pzerror	pointer
;	O
boolean	int
*	O
pftemp	pointer
;	O
{	O
int	O
aidescs	pointer
[	O
3	int
]	O
;	O
boolean	int
ferr	int
;	O
pid_t	int
ipid	int
;	O
int	O
ierr	int
;	O
char	O
abxqtdir	array
[	O
sizeof	O
XQTDIR	pointer
+	O
4	int
]	O
;	O
const	O
char	O
*	O
zxqtdir	pointer
;	O
int	O
istat	int
;	O
char	O
*	O
zpath	pointer
;	O
*	O
pzerror	pointer
=	O
NULL	O
;	O
*	O
pftemp	pointer
=	O
FALSE	O
;	O
aidescs	pointer
[	O
0	int
]	O
=	O
SPAWN_NULL	O
;	O
aidescs	pointer
[	O
1	int
]	O
=	O
SPAWN_NULL	O
;	O
aidescs	pointer
[	O
2	int
]	O
=	O
SPAWN_NULL	O
;	O
ferr	int
=	O
FALSE	O
;	O
if	O
(	O
zinput	pointer
!=	O
NULL	O
)	O
{	O
aidescs	pointer
[	O
0	int
]	O
=	O
open	function
(	O
(	O
char	O
*	O
)	O
zinput	pointer
,	O
O_RDONLY	int
|	O
O_NOCTTY	int
,	O
0	int
)	O
;	O
if	O
(	O
aidescs	pointer
[	O
0	int
]	O
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"open (%s): %s"	pointer
,	O
zinput	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
ferr	int
=	O
TRUE	O
;	O
}	O
else	O
if	O
(	O
fcntl	function
(	O
aidescs	pointer
[	O
0	int
]	O
,	O
F_SETFD	int
,	O
fcntl	function
(	O
aidescs	pointer
[	O
0	int
]	O
,	O
F_GETFD	int
,	O
0	int
)	O
|	O
FD_CLOEXEC	int
)	O
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"fcntl (FD_CLOEXEC): %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
ferr	int
=	O
TRUE	O
;	O
}	O
}	O
if	O
(	O
!	O
ferr	int
&&	O
zoutput	pointer
!=	O
NULL	O
)	O
{	O
aidescs	pointer
[	O
1	int
]	O
=	O
creat	function
(	O
(	O
char	O
*	O
)	O
zoutput	pointer
,	O
IPRIVATE_FILE_MODE	O
)	O
;	O
if	O
(	O
aidescs	pointer
[	O
1	int
]	O
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	int
&&	O
zoutput	pointer
[	O
0	int
]	O
!=	O
'/'	O
)	O
{	O
if	O
(	O
!	O
fsysdep_make_dirs	function
(	O
zoutput	pointer
,	O
FALSE	O
)	O
)	O
{	O
*	O
pftemp	pointer
=	O
TRUE	O
;	O
ferr	int
=	O
TRUE	O
;	O
}	O
else	O
aidescs	pointer
[	O
1	int
]	O
=	O
creat	function
(	O
(	O
char	O
*	O
)	O
zoutput	pointer
,	O
IPRIVATE_FILE_MODE	O
)	O
;	O
}	O
if	O
(	O
!	O
ferr	int
&&	O
aidescs	pointer
[	O
1	int
]	O
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"creat (%s): %s"	pointer
,	O
zoutput	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
*	O
pftemp	pointer
=	O
TRUE	O
;	O
ferr	int
=	O
TRUE	O
;	O
}	O
}	O
if	O
(	O
!	O
ferr	int
&&	O
fcntl	function
(	O
aidescs	pointer
[	O
1	int
]	O
,	O
F_SETFD	int
,	O
fcntl	function
(	O
aidescs	pointer
[	O
1	int
]	O
,	O
F_GETFD	int
,	O
0	int
)	O
|	O
FD_CLOEXEC	int
)	O
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"fcntl (FD_CLOEXEC): %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
ferr	int
=	O
TRUE	O
;	O
}	O
}	O
if	O
(	O
!	O
ferr	int
)	O
{	O
*	O
pzerror	pointer
=	O
zstemp_file	function
(	O
qsys	pointer
)	O
;	O
aidescs	pointer
[	O
2	int
]	O
=	O
creat	function
(	O
*	O
pzerror	pointer
,	O
IPRIVATE_FILE_MODE	O
)	O
;	O
if	O
(	O
aidescs	pointer
[	O
2	int
]	O
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	int
)	O
{	O
if	O
(	O
!	O
fsysdep_make_dirs	function
(	O
*	O
pzerror	pointer
,	O
FALSE	O
)	O
)	O
{	O
*	O
pftemp	pointer
=	O
TRUE	O
;	O
ferr	int
=	O
TRUE	O
;	O
}	O
else	O
aidescs	pointer
[	O
2	int
]	O
=	O
creat	function
(	O
*	O
pzerror	pointer
,	O
IPRIVATE_FILE_MODE	O
)	O
;	O
}	O
if	O
(	O
!	O
ferr	int
&&	O
aidescs	pointer
[	O
2	int
]	O
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"creat (%s): %s"	pointer
,	O
*	O
pzerror	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
*	O
pftemp	pointer
=	O
TRUE	O
;	O
ferr	int
=	O
TRUE	O
;	O
}	O
}	O
if	O
(	O
!	O
ferr	int
&&	O
fcntl	function
(	O
aidescs	pointer
[	O
2	int
]	O
,	O
F_SETFD	int
,	O
fcntl	function
(	O
aidescs	pointer
[	O
2	int
]	O
,	O
F_GETFD	int
,	O
0	int
)	O
|	O
FD_CLOEXEC	int
)	O
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"fcntl (FD_CLOEXEC): %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
ferr	int
=	O
TRUE	O
;	O
}	O
}	O
if	O
(	O
iseq	int
==	O
0	int
)	O
zxqtdir	pointer
=	O
XQTDIR	pointer
;	O
else	O
{	O
sprintf	function
(	O
abxqtdir	array
,	O
"%s%04d"	pointer
,	O
XQTDIR	pointer
,	O
iseq	int
)	O
;	O
zxqtdir	pointer
=	O
abxqtdir	array
;	O
}	O
if	O
(	O
ferr	int
)	O
{	O
if	O
(	O
aidescs	pointer
[	O
0	int
]	O
!=	O
SPAWN_NULL	O
)	O
(	O
void	O
)	O
close	function
(	O
aidescs	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
aidescs	pointer
[	O
1	int
]	O
!=	O
SPAWN_NULL	O
)	O
(	O
void	O
)	O
close	function
(	O
aidescs	pointer
[	O
1	int
]	O
)	O
;	O
if	O
(	O
aidescs	pointer
[	O
2	int
]	O
!=	O
SPAWN_NULL	O
)	O
(	O
void	O
)	O
close	function
(	O
aidescs	pointer
[	O
2	int
]	O
)	O
;	O
ubuffree	function
(	O
*	O
pzerror	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
fshell	int
=	O
FALSE	O
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_pzpath	pointer
==	O
NULL	O
)	O
zpath	pointer
=	O
NULL	O
;	O
else	O
{	O
size_t	long
c	long
;	O
char	O
*	O
*	O
pz	pointer
;	O
c	long
=	O
0	int
;	O
for	O
(	O
pz	pointer
=	O
qsys	pointer
->	O
uuconf_pzpath	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
c	long
+=	O
strlen	function
(	O
*	O
pz	pointer
)	O
+	O
1	int
;	O
zpath	pointer
=	O
zbufalc	function
(	O
c	long
)	O
;	O
*	O
zpath	pointer
=	O
'\0'	O
;	O
for	O
(	O
pz	pointer
=	O
qsys	pointer
->	O
uuconf_pzpath	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
{	O
strcat	function
(	O
zpath	pointer
,	O
*	O
pz	pointer
)	O
;	O
if	O
(	O
pz	pointer
[	O
1	int
]	O
!=	O
NULL	O
)	O
strcat	function
(	O
zpath	pointer
,	O
":"	pointer
)	O
;	O
}	O
}	O
ipid	int
=	O
ixsspawn	function
(	O
pazargs	pointer
,	O
aidescs	pointer
,	O
TRUE	O
,	O
FALSE	O
,	O
zxqtdir	pointer
,	O
TRUE	O
,	O
!	O
fshell	int
,	O
zpath	pointer
,	O
qsys	pointer
->	O
uuconf_zname	pointer
,	O
zuser	pointer
)	O
;	O
ierr	int
=	O
errno	O
;	O
ubuffree	function
(	O
zpath	pointer
)	O
;	O
if	O
(	O
aidescs	pointer
[	O
0	int
]	O
!=	O
SPAWN_NULL	O
)	O
(	O
void	O
)	O
close	function
(	O
aidescs	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
aidescs	pointer
[	O
1	int
]	O
!=	O
SPAWN_NULL	O
)	O
(	O
void	O
)	O
close	function
(	O
aidescs	pointer
[	O
1	int
]	O
)	O
;	O
if	O
(	O
aidescs	pointer
[	O
2	int
]	O
!=	O
SPAWN_NULL	O
)	O
(	O
void	O
)	O
close	function
(	O
aidescs	pointer
[	O
2	int
]	O
)	O
;	O
if	O
(	O
ipid	int
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"ixsspawn: %s"	pointer
,	O
strerror	function
(	O
ierr	int
)	O
)	O
;	O
*	O
pftemp	pointer
=	O
TRUE	O
;	O
return	O
FALSE	O
;	O
}	O
istat	int
=	O
ixswait	function
(	O
(	O
unsigned	O
long	O
)	O
ipid	int
,	O
"Execution"	pointer
)	O
;	O
if	O
(	O
istat	int
==	O
EX_TEMPFAIL	int
)	O
*	O
pftemp	pointer
=	O
TRUE	O
;	O
return	O
istat	int
==	O
0	int
;	O
}	O
int	O
ixsysdep_lock_uuxqt	function
(	O
zcmd	pointer
,	O
cmaxuuxqts	int
)	O
const	O
char	O
*	O
zcmd	pointer
;	O
int	O
cmaxuuxqts	int
;	O
{	O
char	O
ab	array
[	O
sizeof	O
"LCK.XQT.9999"	pointer
]	O
;	O
int	O
i	int
;	O
if	O
(	O
cmaxuuxqts	int
<=	O
0	int
||	O
cmaxuuxqts	int
>=	O
10000	int
)	O
cmaxuuxqts	int
=	O
9999	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
cmaxuuxqts	int
;	O
i	int
++	O
)	O
{	O
sprintf	function
(	O
ab	array
,	O
"LCK.XQT.%d"	pointer
,	O
i	int
)	O
;	O
if	O
(	O
fsdo_lock	function
(	O
ab	array
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
)	O
break	O
;	O
}	O
if	O
(	O
i	int
>=	O
cmaxuuxqts	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
zcmd	pointer
!=	O
NULL	O
)	O
{	O
char	O
abcmd	array
[	O
sizeof	O
"LXQ.123456789"	pointer
]	O
;	O
sprintf	function
(	O
abcmd	array
,	O
"LXQ.%.9s"	pointer
,	O
zcmd	pointer
)	O
;	O
abcmd	array
[	O
strcspn	function
(	O
abcmd	array
,	O
" \t/"	pointer
)	O
]	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
fsdo_lock	function
(	O
abcmd	array
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
)	O
{	O
(	O
void	O
)	O
fsdo_unlock	function
(	O
ab	array
,	O
TRUE	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
return	O
i	int
;	O
}	O
boolean	int
fsysdep_unlock_uuxqt	function
(	O
iseq	int
,	O
zcmd	pointer
,	O
cmaxuuxqts	int
)	O
int	O
iseq	int
;	O
const	O
char	O
*	O
zcmd	pointer
;	O
int	O
cmaxuuxqts	int
ATTRIBUTE_UNUSED	O
;	O
{	O
char	O
ab	array
[	O
sizeof	O
"LCK.XQT.9999"	pointer
]	O
;	O
boolean	int
fret	int
;	O
fret	int
=	O
TRUE	O
;	O
sprintf	function
(	O
ab	array
,	O
"LCK.XQT.%d"	pointer
,	O
iseq	int
)	O
;	O
if	O
(	O
!	O
fsdo_unlock	function
(	O
ab	array
,	O
TRUE	O
)	O
)	O
fret	int
=	O
FALSE	O
;	O
if	O
(	O
zcmd	pointer
!=	O
NULL	O
)	O
{	O
char	O
abcmd	array
[	O
sizeof	O
"LXQ.123456789"	pointer
]	O
;	O
sprintf	function
(	O
abcmd	array
,	O
"LXQ.%.9s"	pointer
,	O
zcmd	pointer
)	O
;	O
abcmd	array
[	O
strcspn	function
(	O
abcmd	array
,	O
" \t/"	pointer
)	O
]	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
fsdo_unlock	function
(	O
abcmd	array
,	O
TRUE	O
)	O
)	O
fret	int
=	O
FALSE	O
;	O
}	O
return	O
fret	int
;	O
}	O
boolean	int
fsysdep_uuxqt_locked	function
(	O
zcmd	pointer
)	O
const	O
char	O
*	O
zcmd	pointer
;	O
{	O
char	O
ab	array
[	O
sizeof	O
"LXQ.123456789"	pointer
]	O
;	O
struct	O
stat	struct
s	struct
;	O
sprintf	function
(	O
ab	array
,	O
"LXQ.%.9s"	pointer
,	O
zcmd	pointer
)	O
;	O
return	O
stat	struct
(	O
ab	array
,	O
&	O
s	struct
)	O
==	O
0	int
;	O
}	O
boolean	int
fsysdep_lock_uuxqt_file	function
(	O
zfile	pointer
)	O
const	O
char	O
*	O
zfile	pointer
;	O
{	O
char	O
*	O
zcopy	pointer
,	O
*	O
z	pointer
;	O
boolean	int
fret	int
;	O
zcopy	pointer
=	O
zbufcpy	function
(	O
zfile	pointer
)	O
;	O
z	pointer
=	O
strrchr	function
(	O
zcopy	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
z	pointer
==	O
NULL	O
)	O
*	O
zcopy	pointer
=	O
'L'	O
;	O
else	O
*	O
(	O
z	pointer
+	O
1	int
)	O
=	O
'L'	O
;	O
fret	int
=	O
fsdo_lock	function
(	O
zcopy	pointer
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
ubuffree	function
(	O
zcopy	pointer
)	O
;	O
return	O
fret	int
;	O
}	O
boolean	int
fsysdep_unlock_uuxqt_file	function
(	O
zfile	pointer
)	O
const	O
char	O
*	O
zfile	pointer
;	O
{	O
char	O
*	O
zcopy	pointer
,	O
*	O
z	pointer
;	O
boolean	int
fret	int
;	O
zcopy	pointer
=	O
zbufcpy	function
(	O
zfile	pointer
)	O
;	O
z	pointer
=	O
strrchr	function
(	O
zcopy	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
z	pointer
==	O
NULL	O
)	O
*	O
zcopy	pointer
=	O
'L'	O
;	O
else	O
*	O
(	O
z	pointer
+	O
1	int
)	O
=	O
'L'	O
;	O
fret	int
=	O
fsdo_unlock	function
(	O
zcopy	pointer
,	O
TRUE	O
)	O
;	O
ubuffree	function
(	O
zcopy	pointer
)	O
;	O
return	O
fret	int
;	O
}	O
boolean	int
fsysdep_lock_uuxqt_dir	function
(	O
iseq	int
)	O
int	O
iseq	int
;	O
{	O
const	O
char	O
*	O
zxqtdir	pointer
;	O
char	O
abxqtdir	array
[	O
sizeof	O
XQTDIR	pointer
+	O
4	int
]	O
;	O
if	O
(	O
iseq	int
==	O
0	int
)	O
zxqtdir	pointer
=	O
XQTDIR	pointer
;	O
else	O
{	O
sprintf	function
(	O
abxqtdir	array
,	O
"%s%04d"	pointer
,	O
XQTDIR	pointer
,	O
iseq	int
)	O
;	O
zxqtdir	pointer
=	O
abxqtdir	array
;	O
}	O
if	O
(	O
mkdir	function
(	O
zxqtdir	pointer
,	O
S_IRWXU	O
)	O
<	O
0	int
&&	O
errno	O
!=	O
EEXIST	int
&&	O
errno	O
!=	O
EISDIR	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"mkdir (%s): %s"	pointer
,	O
zxqtdir	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
return	O
fclean_uuxqt_dir	function
(	O
zxqtdir	pointer
)	O
;	O
}	O
boolean	int
fsysdep_unlock_uuxqt_dir	function
(	O
iseq	int
)	O
int	O
iseq	int
;	O
{	O
const	O
char	O
*	O
zxqtdir	pointer
;	O
char	O
abxqtdir	array
[	O
sizeof	O
XQTDIR	pointer
+	O
4	int
]	O
;	O
if	O
(	O
iseq	int
==	O
0	int
)	O
zxqtdir	pointer
=	O
XQTDIR	pointer
;	O
else	O
{	O
sprintf	function
(	O
abxqtdir	array
,	O
"%s%04d"	pointer
,	O
XQTDIR	pointer
,	O
iseq	int
)	O
;	O
zxqtdir	pointer
=	O
abxqtdir	array
;	O
}	O
return	O
fclean_uuxqt_dir	function
(	O
zxqtdir	pointer
)	O
;	O
}	O
static	O
boolean	int
fclean_uuxqt_dir	function
(	O
zxqtdir	pointer
)	O
const	O
char	O
*	O
zxqtdir	pointer
;	O
{	O
DIR	struct
*	O
qdir	pointer
;	O
qdir	pointer
=	O
opendir	function
(	O
(	O
char	O
*	O
)	O
zxqtdir	pointer
)	O
;	O
if	O
(	O
qdir	pointer
!=	O
NULL	O
)	O
{	O
struct	O
dirent	struct
*	O
qentry	pointer
;	O
while	O
(	O
(	O
qentry	pointer
=	O
readdir	function
(	O
qdir	pointer
)	O
)	O
!=	O
NULL	O
)	O
{	O
char	O
*	O
z	pointer
;	O
if	O
(	O
strcmp	function
(	O
qentry	pointer
->	O
d_name	array
,	O
"."	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
qentry	pointer
->	O
d_name	array
,	O
".."	pointer
)	O
==	O
0	int
)	O
continue	O
;	O
z	pointer
=	O
zsysdep_in_dir	function
(	O
zxqtdir	pointer
,	O
qentry	pointer
->	O
d_name	array
)	O
;	O
if	O
(	O
remove	function
(	O
z	pointer
)	O
<	O
0	int
)	O
{	O
int	O
ierr	int
;	O
ierr	int
=	O
errno	O
;	O
if	O
(	O
!	O
fsysdep_directory	function
(	O
z	pointer
)	O
)	O
ulog	function
(	O
LOG_ERROR	int
,	O
"remove (%s): %s"	pointer
,	O
z	pointer
,	O
strerror	function
(	O
ierr	int
)	O
)	O
;	O
else	O
(	O
void	O
)	O
fsysdep_rmdir	function
(	O
z	pointer
)	O
;	O
}	O
ubuffree	function
(	O
z	pointer
)	O
;	O
}	O
closedir	function
(	O
qdir	pointer
)	O
;	O
}	O
return	O
TRUE	O
;	O
}	O
boolean	int
fsysdep_copy_uuxqt_files	function
(	O
cfiles	int
,	O
pzfrom	pointer
,	O
pzto	pointer
,	O
iseq	int
,	O
pzinput	pointer
)	O
int	O
cfiles	int
;	O
const	O
char	O
*	O
const	O
*	O
pzfrom	pointer
;	O
const	O
char	O
*	O
const	O
*	O
pzto	pointer
;	O
int	O
iseq	int
;	O
char	O
*	O
*	O
pzinput	pointer
;	O
{	O
char	O
*	O
zinput	pointer
;	O
const	O
char	O
*	O
zxqtdir	pointer
;	O
char	O
abxqtdir	array
[	O
sizeof	O
XQTDIR	pointer
+	O
4	int
]	O
;	O
int	O
i	int
;	O
if	O
(	O
pzinput	pointer
==	O
NULL	O
)	O
zinput	pointer
=	O
NULL	O
;	O
else	O
zinput	pointer
=	O
*	O
pzinput	pointer
;	O
if	O
(	O
iseq	int
==	O
0	int
)	O
zxqtdir	pointer
=	O
XQTDIR	pointer
;	O
else	O
{	O
sprintf	function
(	O
abxqtdir	array
,	O
"%s%04d"	pointer
,	O
XQTDIR	pointer
,	O
iseq	int
)	O
;	O
zxqtdir	pointer
=	O
abxqtdir	array
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
cfiles	int
;	O
i	int
++	O
)	O
{	O
const	O
char	O
*	O
zfrom	pointer
,	O
*	O
zto	pointer
;	O
char	O
*	O
zfree	pointer
;	O
if	O
(	O
pzto	pointer
[	O
i	int
]	O
==	O
NULL	O
)	O
continue	O
;	O
zfree	pointer
=	O
zsysdep_in_dir	function
(	O
zxqtdir	pointer
,	O
pzto	pointer
[	O
i	int
]	O
)	O
;	O
zfrom	pointer
=	O
pzfrom	pointer
[	O
i	int
]	O
;	O
zto	pointer
=	O
zfree	pointer
;	O
if	O
(	O
zinput	pointer
!=	O
NULL	O
&&	O
strcmp	function
(	O
zinput	pointer
,	O
zfrom	pointer
)	O
==	O
0	int
)	O
{	O
*	O
pzinput	pointer
=	O
zbufcpy	function
(	O
zto	pointer
)	O
;	O
zinput	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
link	function
(	O
zfrom	pointer
,	O
zto	pointer
)	O
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
!=	O
EXDEV	int
&&	O
errno	O
!=	O
EEXIST	int
&&	O
errno	O
!=	O
EMLINK	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"link (%s, %s): %s"	pointer
,	O
zfrom	pointer
,	O
zto	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
ubuffree	function
(	O
zfree	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
!	O
fcopy_file	function
(	O
zfrom	pointer
,	O
zto	pointer
,	O
FALSE	O
,	O
FALSE	O
,	O
FALSE	O
)	O
)	O
{	O
ubuffree	function
(	O
zfree	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
(	O
void	O
)	O
chmod	function
(	O
zto	pointer
,	O
IPUBLIC_FILE_MODE	O
)	O
;	O
ubuffree	function
(	O
zfree	pointer
)	O
;	O
}	O
return	O
TRUE	O
;	O
}	O
