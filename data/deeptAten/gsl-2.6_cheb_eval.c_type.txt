double	O
gsl_cheb_eval	function
(	O
const	O
gsl_cheb_series	struct
*	O
cs	pointer
,	O
const	O
double	O
x	double
)	O
{	O
size_t	long
i	long
;	O
double	O
d1	double
=	O
0.0	int
;	O
double	O
d2	double
=	O
0.0	int
;	O
double	O
y	double
=	O
(	O
2.0	int
*	O
x	double
-	O
cs	pointer
->	O
a	double
-	O
cs	pointer
->	O
b	double
)	O
/	O
(	O
cs	pointer
->	O
b	double
-	O
cs	pointer
->	O
a	double
)	O
;	O
double	O
y2	double
=	O
2.0	int
*	O
y	double
;	O
for	O
(	O
i	long
=	O
cs	pointer
->	O
order	long
;	O
i	long
>=	O
1	int
;	O
i	long
--	O
)	O
{	O
double	O
temp	double
=	O
d1	double
;	O
d1	double
=	O
y2	double
*	O
d1	double
-	O
d2	double
+	O
cs	pointer
->	O
c	pointer
[	O
i	long
]	O
;	O
d2	double
=	O
temp	double
;	O
}	O
return	O
y	double
*	O
d1	double
-	O
d2	double
+	O
0.5	int
*	O
cs	pointer
->	O
c	pointer
[	O
0	int
]	O
;	O
}	O
double	O
gsl_cheb_eval_n	function
(	O
const	O
gsl_cheb_series	struct
*	O
cs	pointer
,	O
const	O
size_t	long
n	int
,	O
const	O
double	O
x	double
)	O
{	O
size_t	long
i	long
;	O
double	O
d1	double
=	O
0.0	int
;	O
double	O
d2	double
=	O
0.0	int
;	O
size_t	long
eval_order	long
=	O
GSL_MIN	O
(	O
n	int
,	O
cs	pointer
->	O
order	long
)	O
;	O
double	O
y	double
=	O
(	O
2.0	int
*	O
x	double
-	O
cs	pointer
->	O
a	double
-	O
cs	pointer
->	O
b	double
)	O
/	O
(	O
cs	pointer
->	O
b	double
-	O
cs	pointer
->	O
a	double
)	O
;	O
double	O
y2	double
=	O
2.0	int
*	O
y	double
;	O
for	O
(	O
i	long
=	O
eval_order	long
;	O
i	long
>=	O
1	int
;	O
i	long
--	O
)	O
{	O
double	O
temp	double
=	O
d1	double
;	O
d1	double
=	O
y2	double
*	O
d1	double
-	O
d2	double
+	O
cs	pointer
->	O
c	pointer
[	O
i	long
]	O
;	O
d2	double
=	O
temp	double
;	O
}	O
return	O
y	double
*	O
d1	double
-	O
d2	double
+	O
0.5	int
*	O
cs	pointer
->	O
c	pointer
[	O
0	int
]	O
;	O
}	O
int	O
gsl_cheb_eval_err	function
(	O
const	O
gsl_cheb_series	struct
*	O
cs	pointer
,	O
const	O
double	O
x	double
,	O
double	O
*	O
result	pointer
,	O
double	O
*	O
abserr	pointer
)	O
{	O
size_t	long
i	long
;	O
double	O
d1	double
=	O
0.0	int
;	O
double	O
d2	double
=	O
0.0	int
;	O
double	O
y	double
=	O
(	O
2.	int
*	O
x	double
-	O
cs	pointer
->	O
a	double
-	O
cs	pointer
->	O
b	double
)	O
/	O
(	O
cs	pointer
->	O
b	double
-	O
cs	pointer
->	O
a	double
)	O
;	O
double	O
y2	double
=	O
2.0	int
*	O
y	double
;	O
double	O
absc	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
cs	pointer
->	O
order	long
;	O
i	long
>=	O
1	int
;	O
i	long
--	O
)	O
{	O
double	O
temp	double
=	O
d1	double
;	O
d1	double
=	O
y2	double
*	O
d1	double
-	O
d2	double
+	O
cs	pointer
->	O
c	pointer
[	O
i	long
]	O
;	O
d2	double
=	O
temp	double
;	O
}	O
*	O
result	pointer
=	O
y	double
*	O
d1	double
-	O
d2	double
+	O
0.5	int
*	O
cs	pointer
->	O
c	pointer
[	O
0	int
]	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<=	O
cs	pointer
->	O
order	long
;	O
i	long
++	O
)	O
{	O
absc	double
+=	O
fabs	function
(	O
cs	pointer
->	O
c	pointer
[	O
i	long
]	O
)	O
;	O
}	O
*	O
abserr	pointer
=	O
fabs	function
(	O
cs	pointer
->	O
c	pointer
[	O
cs	pointer
->	O
order	long
]	O
)	O
+	O
absc	double
*	O
GSL_DBL_EPSILON	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_cheb_eval_n_err	function
(	O
const	O
gsl_cheb_series	struct
*	O
cs	pointer
,	O
const	O
size_t	long
n	int
,	O
const	O
double	O
x	double
,	O
double	O
*	O
result	pointer
,	O
double	O
*	O
abserr	pointer
)	O
{	O
size_t	long
i	long
;	O
double	O
d1	double
=	O
0.0	int
;	O
double	O
d2	double
=	O
0.0	int
;	O
double	O
y	double
=	O
(	O
2.	int
*	O
x	double
-	O
cs	pointer
->	O
a	double
-	O
cs	pointer
->	O
b	double
)	O
/	O
(	O
cs	pointer
->	O
b	double
-	O
cs	pointer
->	O
a	double
)	O
;	O
double	O
y2	double
=	O
2.0	int
*	O
y	double
;	O
double	O
absc	double
=	O
0.0	int
;	O
size_t	long
eval_order	long
=	O
GSL_MIN	O
(	O
n	int
,	O
cs	pointer
->	O
order	long
)	O
;	O
for	O
(	O
i	long
=	O
eval_order	long
;	O
i	long
>=	O
1	int
;	O
i	long
--	O
)	O
{	O
double	O
temp	double
=	O
d1	double
;	O
d1	double
=	O
y2	double
*	O
d1	double
-	O
d2	double
+	O
cs	pointer
->	O
c	pointer
[	O
i	long
]	O
;	O
d2	double
=	O
temp	double
;	O
}	O
*	O
result	pointer
=	O
y	double
*	O
d1	double
-	O
d2	double
+	O
0.5	int
*	O
cs	pointer
->	O
c	pointer
[	O
0	int
]	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<=	O
eval_order	long
;	O
i	long
++	O
)	O
{	O
absc	double
+=	O
fabs	function
(	O
cs	pointer
->	O
c	pointer
[	O
i	long
]	O
)	O
;	O
}	O
*	O
abserr	pointer
=	O
fabs	function
(	O
cs	pointer
->	O
c	pointer
[	O
eval_order	long
]	O
)	O
+	O
absc	double
*	O
GSL_DBL_EPSILON	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_cheb_eval_mode_e	function
(	O
const	O
gsl_cheb_series	struct
*	O
cs	pointer
,	O
const	O
double	O
x	double
,	O
gsl_mode_t	int
mode	int
,	O
double	O
*	O
result	pointer
,	O
double	O
*	O
abserr	pointer
)	O
{	O
size_t	long
i	long
;	O
double	O
d1	double
=	O
0.0	int
;	O
double	O
d2	double
=	O
0.0	int
;	O
double	O
y	double
=	O
(	O
2.	int
*	O
x	double
-	O
cs	pointer
->	O
a	double
-	O
cs	pointer
->	O
b	double
)	O
/	O
(	O
cs	pointer
->	O
b	double
-	O
cs	pointer
->	O
a	double
)	O
;	O
double	O
y2	double
=	O
2.0	int
*	O
y	double
;	O
double	O
absc	double
=	O
0.0	int
;	O
size_t	long
eval_order	long
;	O
if	O
(	O
GSL_MODE_PREC	function
(	O
mode	int
)	O
==	O
GSL_PREC_DOUBLE	int
)	O
eval_order	long
=	O
cs	pointer
->	O
order	long
;	O
else	O
eval_order	long
=	O
cs	pointer
->	O
order_sp	long
;	O
for	O
(	O
i	long
=	O
eval_order	long
;	O
i	long
>=	O
1	int
;	O
i	long
--	O
)	O
{	O
double	O
temp	double
=	O
d1	double
;	O
d1	double
=	O
y2	double
*	O
d1	double
-	O
d2	double
+	O
cs	pointer
->	O
c	pointer
[	O
i	long
]	O
;	O
d2	double
=	O
temp	double
;	O
}	O
*	O
result	pointer
=	O
y	double
*	O
d1	double
-	O
d2	double
+	O
0.5	int
*	O
cs	pointer
->	O
c	pointer
[	O
0	int
]	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<=	O
eval_order	long
;	O
i	long
++	O
)	O
{	O
absc	double
+=	O
fabs	function
(	O
cs	pointer
->	O
c	pointer
[	O
i	long
]	O
)	O
;	O
}	O
*	O
abserr	pointer
=	O
fabs	function
(	O
cs	pointer
->	O
c	pointer
[	O
eval_order	long
]	O
)	O
+	O
absc	double
*	O
GSL_DBL_EPSILON	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
double	O
gsl_cheb_eval_mode	function
(	O
const	O
gsl_cheb_series	struct
*	O
cs	pointer
,	O
const	O
double	O
x	double
,	O
gsl_mode_t	int
mode	int
)	O
{	O
double	O
result	pointer
,	O
abserr	pointer
;	O
int	O
status	int
=	O
gsl_cheb_eval_mode_e	function
(	O
cs	pointer
,	O
x	double
,	O
mode	int
,	O
&	O
result	pointer
,	O
&	O
abserr	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"gsl_cheb_eval_mode"	pointer
,	O
status	int
,	O
result	pointer
)	O
;	O
}	O
;	O
return	O
result	pointer
;	O
}	O
