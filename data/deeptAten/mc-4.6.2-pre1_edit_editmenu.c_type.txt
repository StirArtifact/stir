static	O
void	O
menu_cmd	function
(	O
int	O
command	pointer
)	O
{	O
edit_execute_key_command	function
(	O
wedit	pointer
,	O
command	pointer
,	O
-	O
1	int
)	O
;	O
edit_update_screen	function
(	O
wedit	pointer
)	O
;	O
}	O
static	O
void	O
menu_key	function
(	O
int	O
i	array
)	O
{	O
send_message	function
(	O
(	O
Widget	struct
*	O
)	O
wedit	pointer
,	O
WIDGET_KEY	int
,	O
i	array
)	O
;	O
}	O
static	O
void	O
edit_about_cmd	function
(	O
void	O
)	O
{	O
query_dialog	function
(	O
_	O
(	O
" About "	pointer
)	O
,	O
_	O
(	O
"\n                Cooledit  v3.11.5\n\n"	pointer
" Copyright (C) 1996 the Free Software Foundation\n\n"	pointer
"       A user friendly text editor written\n"	pointer
"           for the Midnight Commander.\n"	pointer
)	O
,	O
D_NORMAL	int
,	O
1	int
,	O
_	O
(	O
"&OK"	pointer
)	O
)	O
;	O
}	O
static	O
void	O
menu_mail_cmd	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_Mail	int
)	O
;	O
}	O
static	O
void	O
menu_load_cmd	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_Load	int
)	O
;	O
}	O
static	O
void	O
menu_new_cmd	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_New	int
)	O
;	O
}	O
static	O
void	O
menu_save_cmd	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_Save	int
)	O
;	O
}	O
static	O
void	O
menu_save_as_cmd	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_Save_As	int
)	O
;	O
}	O
static	O
void	O
menu_insert_file_cmd	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_Insert_File	int
)	O
;	O
}	O
static	O
void	O
menu_quit_cmd	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_Exit	int
)	O
;	O
}	O
static	O
void	O
menu_mark_cmd	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_Mark	int
)	O
;	O
}	O
static	O
void	O
menu_markcol_cmd	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_Column_Mark	int
)	O
;	O
}	O
static	O
void	O
menu_ins_cmd	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_Toggle_Insert	int
)	O
;	O
}	O
static	O
void	O
menu_copy_cmd	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_Copy	int
)	O
;	O
}	O
static	O
void	O
menu_move_cmd	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_Move	int
)	O
;	O
}	O
static	O
void	O
menu_delete_cmd	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_Remove	int
)	O
;	O
}	O
static	O
void	O
menu_cut_cmd	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_Save_Block	int
)	O
;	O
}	O
static	O
void	O
menu_search_cmd	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_Find	int
)	O
;	O
}	O
static	O
void	O
menu_search_again_cmd	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_Find_Again	int
)	O
;	O
}	O
static	O
void	O
menu_replace_cmd	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_Replace	int
)	O
;	O
}	O
static	O
void	O
menu_begin_record_cmd	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_Begin_Record_Macro	int
)	O
;	O
}	O
static	O
void	O
menu_end_record_cmd	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_End_Record_Macro	int
)	O
;	O
}	O
static	O
void	O
menu_exec_macro_cmd	function
(	O
void	O
)	O
{	O
menu_key	function
(	O
XCTRL	O
(	O
'a'	O
)	O
)	O
;	O
}	O
static	O
void	O
menu_exec_macro_delete_cmd	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_Delete_Macro	int
)	O
;	O
}	O
static	O
void	O
menu_c_form_cmd	function
(	O
void	O
)	O
{	O
menu_key	function
(	O
KEY_F	O
(	O
19	int
)	O
)	O
;	O
}	O
static	O
void	O
menu_ispell_cmd	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_Pipe_Block	O
(	O
1	int
)	O
)	O
;	O
}	O
static	O
void	O
menu_sort_cmd	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_Sort	int
)	O
;	O
}	O
static	O
void	O
menu_ext_cmd	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_ExtCmd	int
)	O
;	O
}	O
static	O
void	O
menu_date_cmd	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_Date	int
)	O
;	O
}	O
static	O
void	O
menu_undo_cmd	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_Undo	int
)	O
;	O
}	O
static	O
void	O
menu_beginning_cmd	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_Beginning_Of_Text	int
)	O
;	O
}	O
static	O
void	O
menu_end_cmd	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_End_Of_Text	int
)	O
;	O
}	O
static	O
void	O
menu_refresh_cmd	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_Refresh	int
)	O
;	O
}	O
static	O
void	O
menu_goto_line	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_Goto	int
)	O
;	O
}	O
static	O
void	O
menu_goto_bracket	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_Match_Bracket	int
)	O
;	O
}	O
static	O
void	O
menu_lit_cmd	function
(	O
void	O
)	O
{	O
menu_key	function
(	O
XCTRL	O
(	O
'q'	O
)	O
)	O
;	O
}	O
static	O
void	O
menu_format_paragraph	function
(	O
void	O
)	O
{	O
menu_cmd	function
(	O
CK_Paragraph_Format	int
)	O
;	O
}	O
static	O
void	O
menu_options	function
(	O
void	O
)	O
{	O
edit_options_dialog	function
(	O
)	O
;	O
}	O
static	O
void	O
menu_syntax	function
(	O
void	O
)	O
{	O
edit_syntax_dialog	function
(	O
)	O
;	O
}	O
static	O
void	O
menu_user_menu_cmd	function
(	O
void	O
)	O
{	O
menu_key	function
(	O
KEY_F	O
(	O
11	int
)	O
)	O
;	O
}	O
static	O
menu_entry	struct
FileMenu	array
[	O
]	O
=	O
{	O
{	O
' '	O
,	O
N_	O
(	O
"&Open file..."	pointer
)	O
,	O
'O'	O
,	O
menu_load_cmd	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&New              C-n"	pointer
)	O
,	O
'N'	O
,	O
menu_new_cmd	function
}	O
,	O
{	O
' '	O
,	O
""	pointer
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Save              F2"	pointer
)	O
,	O
'S'	O
,	O
menu_save_cmd	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Save &as...       F12"	pointer
)	O
,	O
'A'	O
,	O
menu_save_as_cmd	function
}	O
,	O
{	O
' '	O
,	O
""	pointer
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Insert file...   F15"	pointer
)	O
,	O
'I'	O
,	O
menu_insert_file_cmd	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Copy to &file...  C-f"	pointer
)	O
,	O
'F'	O
,	O
menu_cut_cmd	function
}	O
,	O
{	O
' '	O
,	O
""	pointer
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&User menu...     F11"	pointer
)	O
,	O
'U'	O
,	O
menu_user_menu_cmd	function
}	O
,	O
{	O
' '	O
,	O
""	pointer
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"A&bout...            "	pointer
)	O
,	O
'B'	O
,	O
edit_about_cmd	function
}	O
,	O
{	O
' '	O
,	O
""	pointer
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Quit             F10"	pointer
)	O
,	O
'Q'	O
,	O
menu_quit_cmd	function
}	O
}	O
;	O
static	O
menu_entry	struct
FileMenuEmacs	array
[	O
]	O
=	O
{	O
{	O
' '	O
,	O
N_	O
(	O
"&Open file..."	pointer
)	O
,	O
'O'	O
,	O
menu_load_cmd	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&New            C-x k"	pointer
)	O
,	O
'N'	O
,	O
menu_new_cmd	function
}	O
,	O
{	O
' '	O
,	O
""	pointer
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Save              F2"	pointer
)	O
,	O
'S'	O
,	O
menu_save_cmd	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Save &as...       F12"	pointer
)	O
,	O
'A'	O
,	O
menu_save_as_cmd	function
}	O
,	O
{	O
' '	O
,	O
""	pointer
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Insert file...   F15"	pointer
)	O
,	O
'I'	O
,	O
menu_insert_file_cmd	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Copy to &file...     "	pointer
)	O
,	O
'F'	O
,	O
menu_cut_cmd	function
}	O
,	O
{	O
' '	O
,	O
""	pointer
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&User menu...     F11"	pointer
)	O
,	O
'U'	O
,	O
menu_user_menu_cmd	function
}	O
,	O
{	O
' '	O
,	O
""	pointer
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"A&bout...            "	pointer
)	O
,	O
'B'	O
,	O
edit_about_cmd	function
}	O
,	O
{	O
' '	O
,	O
""	pointer
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Quit             F10"	pointer
)	O
,	O
'Q'	O
,	O
menu_quit_cmd	function
}	O
}	O
;	O
static	O
menu_entry	struct
EditMenu	array
[	O
]	O
=	O
{	O
{	O
' '	O
,	O
N_	O
(	O
"&Toggle Mark       F3"	pointer
)	O
,	O
'T'	O
,	O
menu_mark_cmd	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Mark Columns    S-F3"	pointer
)	O
,	O
'T'	O
,	O
menu_markcol_cmd	function
}	O
,	O
{	O
' '	O
,	O
""	pointer
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Toggle &ins/overw Ins"	pointer
)	O
,	O
'I'	O
,	O
menu_ins_cmd	function
}	O
,	O
{	O
' '	O
,	O
""	pointer
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Copy              F5"	pointer
)	O
,	O
'C'	O
,	O
menu_copy_cmd	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Move              F6"	pointer
)	O
,	O
'M'	O
,	O
menu_move_cmd	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Delete            F8"	pointer
)	O
,	O
'D'	O
,	O
menu_delete_cmd	function
}	O
,	O
{	O
' '	O
,	O
""	pointer
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Undo             C-u"	pointer
)	O
,	O
'U'	O
,	O
menu_undo_cmd	function
}	O
,	O
{	O
' '	O
,	O
""	pointer
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Beginning     C-PgUp"	pointer
)	O
,	O
'B'	O
,	O
menu_beginning_cmd	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&End           C-PgDn"	pointer
)	O
,	O
'E'	O
,	O
menu_end_cmd	function
}	O
}	O
;	O
static	O
menu_entry	struct
SearReplMenu	array
[	O
]	O
=	O
{	O
{	O
' '	O
,	O
N_	O
(	O
"&Search...         F7"	pointer
)	O
,	O
'S'	O
,	O
menu_search_cmd	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Search &again     F17"	pointer
)	O
,	O
'A'	O
,	O
menu_search_again_cmd	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Replace...        F4"	pointer
)	O
,	O
'R'	O
,	O
menu_replace_cmd	function
}	O
}	O
;	O
static	O
menu_entry	struct
CmdMenu	array
[	O
]	O
=	O
{	O
{	O
' '	O
,	O
N_	O
(	O
"&Go to line...            M-l"	pointer
)	O
,	O
'G'	O
,	O
menu_goto_line	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Go to matching &bracket   M-b"	pointer
)	O
,	O
'B'	O
,	O
menu_goto_bracket	function
}	O
,	O
{	O
' '	O
,	O
""	pointer
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Insert &literal...       C-q"	pointer
)	O
,	O
'L'	O
,	O
menu_lit_cmd	function
}	O
,	O
{	O
' '	O
,	O
""	pointer
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Refresh screen          C-l"	pointer
)	O
,	O
'R'	O
,	O
menu_refresh_cmd	function
}	O
,	O
{	O
' '	O
,	O
""	pointer
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Start record macro      C-r"	pointer
)	O
,	O
'S'	O
,	O
menu_begin_record_cmd	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Finish record macro...  C-r"	pointer
)	O
,	O
'F'	O
,	O
menu_end_record_cmd	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Execute macro...   C-a, KEY"	pointer
)	O
,	O
'E'	O
,	O
menu_exec_macro_cmd	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Delete macr&o...            "	pointer
)	O
,	O
'O'	O
,	O
menu_exec_macro_delete_cmd	function
}	O
,	O
{	O
' '	O
,	O
""	pointer
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Insert &date/time           "	pointer
)	O
,	O
'D'	O
,	O
menu_date_cmd	function
}	O
,	O
{	O
' '	O
,	O
""	pointer
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Format p&aragraph        M-p"	pointer
)	O
,	O
'A'	O
,	O
menu_format_paragraph	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"'ispell' s&pell check    C-p"	pointer
)	O
,	O
'P'	O
,	O
menu_ispell_cmd	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Sor&t...                 M-t"	pointer
)	O
,	O
'T'	O
,	O
menu_sort_cmd	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Paste o&utput of...      M-u"	pointer
)	O
,	O
'U'	O
,	O
menu_ext_cmd	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"E&xternal Formatter      F19"	pointer
)	O
,	O
'C'	O
,	O
menu_c_form_cmd	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Mail...                    "	pointer
)	O
,	O
'M'	O
,	O
menu_mail_cmd	function
}	O
}	O
;	O
static	O
menu_entry	struct
CmdMenuEmacs	array
[	O
]	O
=	O
{	O
{	O
' '	O
,	O
N_	O
(	O
"&Go to line...            M-l"	pointer
)	O
,	O
'G'	O
,	O
menu_goto_line	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Go to matching &bracket   M-b"	pointer
)	O
,	O
'B'	O
,	O
menu_goto_bracket	function
}	O
,	O
{	O
' '	O
,	O
""	pointer
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Insert &literal...       C-q"	pointer
)	O
,	O
'L'	O
,	O
menu_lit_cmd	function
}	O
,	O
{	O
' '	O
,	O
""	pointer
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Refresh screen          C-l"	pointer
)	O
,	O
'R'	O
,	O
menu_refresh_cmd	function
}	O
,	O
{	O
' '	O
,	O
""	pointer
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Start record macro      C-r"	pointer
)	O
,	O
'S'	O
,	O
menu_begin_record_cmd	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Finish record macro...  C-r"	pointer
)	O
,	O
'F'	O
,	O
menu_end_record_cmd	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Execute macro... C-x e, KEY"	pointer
)	O
,	O
'E'	O
,	O
menu_exec_macro_cmd	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Delete macr&o...            "	pointer
)	O
,	O
'o'	O
,	O
menu_exec_macro_delete_cmd	function
}	O
,	O
{	O
' '	O
,	O
""	pointer
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Insert &date/time           "	pointer
)	O
,	O
'D'	O
,	O
menu_date_cmd	function
}	O
,	O
{	O
' '	O
,	O
""	pointer
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Format p&aragraph        M-p"	pointer
)	O
,	O
'a'	O
,	O
menu_format_paragraph	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"'ispell' s&pell check    M-$"	pointer
)	O
,	O
'P'	O
,	O
menu_ispell_cmd	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Sor&t...                 M-t"	pointer
)	O
,	O
'T'	O
,	O
menu_sort_cmd	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Paste o&utput of...      M-u"	pointer
)	O
,	O
'U'	O
,	O
menu_ext_cmd	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"E&xternal Formatter      F19"	pointer
)	O
,	O
'C'	O
,	O
menu_c_form_cmd	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Mail...                    "	pointer
)	O
,	O
'M'	O
,	O
menu_mail_cmd	function
}	O
}	O
;	O
static	O
menu_entry	struct
OptMenu	array
[	O
]	O
=	O
{	O
{	O
' '	O
,	O
N_	O
(	O
"&General...  "	pointer
)	O
,	O
'G'	O
,	O
menu_options	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"&Save mode..."	pointer
)	O
,	O
'S'	O
,	O
menu_save_mode_cmd	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Learn &Keys..."	pointer
)	O
,	O
'K'	O
,	O
learn_keys	function
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Syntax &Highlighting..."	pointer
)	O
,	O
'H'	O
,	O
menu_syntax	function
}	O
,	O
{	O
' '	O
,	O
""	pointer
,	O
' '	O
,	O
0	int
}	O
,	O
{	O
' '	O
,	O
N_	O
(	O
"Save setu&p..."	pointer
)	O
,	O
'p'	O
,	O
save_setup_cmd	function
}	O
}	O
;	O
static	O
void	O
edit_init_menu_normal	function
(	O
struct	O
Menu	struct
*	O
EditMenuBar	array
[	O
]	O
)	O
{	O
EditMenuBar	array
[	O
0	int
]	O
=	O
create_menu	function
(	O
_	O
(	O
" File "	pointer
)	O
,	O
FileMenu	array
,	O
menu_entries	O
(	O
FileMenu	array
)	O
,	O
"[Internal File Editor]"	pointer
)	O
;	O
EditMenuBar	array
[	O
1	int
]	O
=	O
create_menu	function
(	O
_	O
(	O
" Edit "	pointer
)	O
,	O
EditMenu	array
,	O
menu_entries	O
(	O
EditMenu	array
)	O
,	O
"[Internal File Editor]"	pointer
)	O
;	O
EditMenuBar	array
[	O
2	int
]	O
=	O
create_menu	function
(	O
_	O
(	O
" Sear/Repl "	pointer
)	O
,	O
SearReplMenu	array
,	O
menu_entries	O
(	O
SearReplMenu	array
)	O
,	O
"[Internal File Editor]"	pointer
)	O
;	O
EditMenuBar	array
[	O
3	int
]	O
=	O
create_menu	function
(	O
_	O
(	O
" Command "	pointer
)	O
,	O
CmdMenu	array
,	O
menu_entries	O
(	O
CmdMenu	array
)	O
,	O
"[Internal File Editor]"	pointer
)	O
;	O
EditMenuBar	array
[	O
4	int
]	O
=	O
create_menu	function
(	O
_	O
(	O
" Options "	pointer
)	O
,	O
OptMenu	array
,	O
menu_entries	O
(	O
OptMenu	array
)	O
,	O
"[Internal File Editor]"	pointer
)	O
;	O
}	O
static	O
void	O
edit_init_menu_emacs	function
(	O
struct	O
Menu	struct
*	O
EditMenuBar	array
[	O
]	O
)	O
{	O
EditMenuBar	array
[	O
0	int
]	O
=	O
create_menu	function
(	O
_	O
(	O
" File "	pointer
)	O
,	O
FileMenuEmacs	array
,	O
menu_entries	O
(	O
FileMenuEmacs	array
)	O
,	O
"[Internal File Editor]"	pointer
)	O
;	O
EditMenuBar	array
[	O
1	int
]	O
=	O
create_menu	function
(	O
_	O
(	O
" Edit "	pointer
)	O
,	O
EditMenuEmacs	O
,	O
menu_entries	O
(	O
EditMenuEmacs	O
)	O
,	O
"[Internal File Editor]"	pointer
)	O
;	O
EditMenuBar	array
[	O
2	int
]	O
=	O
create_menu	function
(	O
_	O
(	O
" Sear/Repl "	pointer
)	O
,	O
SearReplMenuEmacs	O
,	O
menu_entries	O
(	O
SearReplMenuEmacs	O
)	O
,	O
"[Internal File Editor]"	pointer
)	O
;	O
EditMenuBar	array
[	O
3	int
]	O
=	O
create_menu	function
(	O
_	O
(	O
" Command "	pointer
)	O
,	O
CmdMenuEmacs	array
,	O
menu_entries	O
(	O
CmdMenuEmacs	array
)	O
,	O
"[Internal File Editor]"	pointer
)	O
;	O
EditMenuBar	array
[	O
4	int
]	O
=	O
create_menu	function
(	O
_	O
(	O
" Options "	pointer
)	O
,	O
OptMenuEmacs	O
,	O
menu_entries	O
(	O
OptMenuEmacs	O
)	O
,	O
"[Internal File Editor]"	pointer
)	O
;	O
}	O
struct	O
WMenu	struct
*	O
edit_init_menu	function
(	O
void	O
)	O
{	O
struct	O
Menu	struct
*	O
*	O
EditMenuBar	array
=	O
g_new	O
(	O
struct	O
Menu	struct
*	O
,	O
N_menus	int
)	O
;	O
switch	O
(	O
edit_key_emulation	int
)	O
{	O
default	O
:	O
case	O
EDIT_KEY_EMULATION_NORMAL	int
:	O
edit_init_menu_normal	function
(	O
EditMenuBar	array
)	O
;	O
break	O
;	O
case	O
EDIT_KEY_EMULATION_EMACS	int
:	O
edit_init_menu_emacs	function
(	O
EditMenuBar	array
)	O
;	O
break	O
;	O
}	O
return	O
menubar_new	function
(	O
0	int
,	O
0	int
,	O
COLS	O
,	O
EditMenuBar	array
,	O
N_menus	int
)	O
;	O
}	O
void	O
edit_done_menu	function
(	O
struct	O
WMenu	struct
*	O
wmenu	pointer
)	O
{	O
int	O
i	array
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
N_menus	int
;	O
i	array
++	O
)	O
destroy_menu	function
(	O
wmenu	pointer
->	O
menu	pointer
[	O
i	array
]	O
)	O
;	O
g_free	function
(	O
wmenu	pointer
->	O
menu	pointer
)	O
;	O
}	O
void	O
edit_reload_menu	function
(	O
void	O
)	O
{	O
struct	O
WMenu	struct
*	O
new_edit_menubar	pointer
;	O
new_edit_menubar	pointer
=	O
edit_init_menu	function
(	O
)	O
;	O
dlg_replace_widget	function
(	O
&	O
edit_menubar	pointer
->	O
widget	pointer
,	O
&	O
new_edit_menubar	pointer
->	O
widget	pointer
)	O
;	O
edit_done_menu	function
(	O
edit_menubar	pointer
)	O
;	O
edit_menubar	pointer
=	O
new_edit_menubar	pointer
;	O
}	O
static	O
void	O
edit_drop_menu_cmd	function
(	O
WEdit	struct
*	O
e	pointer
,	O
int	O
which	int
)	O
{	O
if	O
(	O
edit_menubar	pointer
->	O
active	int
)	O
return	O
;	O
edit_menubar	pointer
->	O
active	int
=	O
1	int
;	O
edit_menubar	pointer
->	O
dropped	int
=	O
drop_menus	int
;	O
if	O
(	O
which	int
>=	O
0	int
)	O
{	O
edit_menubar	pointer
->	O
selected	int
=	O
which	int
;	O
}	O
edit_menubar	pointer
->	O
previous_widget	int
=	O
e	pointer
->	O
widget	pointer
.	O
parent	pointer
->	O
current	long
->	O
dlg_id	int
;	O
dlg_select_widget	function
(	O
edit_menubar	pointer
)	O
;	O
}	O
void	O
edit_menu_cmd	function
(	O
WEdit	struct
*	O
e	pointer
)	O
{	O
edit_drop_menu_cmd	function
(	O
e	pointer
,	O
-	O
1	int
)	O
;	O
}	O
int	O
edit_drop_hotkey_menu	function
(	O
WEdit	struct
*	O
e	pointer
,	O
int	O
key	pointer
)	O
{	O
int	O
m	int
=	O
0	int
;	O
switch	O
(	O
key	pointer
)	O
{	O
case	O
ALT	O
(	O
'f'	O
)	O
:	O
if	O
(	O
edit_key_emulation	int
==	O
EDIT_KEY_EMULATION_EMACS	int
)	O
return	O
0	int
;	O
m	int
=	O
0	int
;	O
break	O
;	O
case	O
ALT	O
(	O
'e'	O
)	O
:	O
m	int
=	O
1	int
;	O
break	O
;	O
case	O
ALT	O
(	O
's'	O
)	O
:	O
m	int
=	O
2	int
;	O
break	O
;	O
case	O
ALT	O
(	O
'c'	O
)	O
:	O
m	int
=	O
3	int
;	O
break	O
;	O
case	O
ALT	O
(	O
'o'	O
)	O
:	O
m	int
=	O
4	int
;	O
break	O
;	O
default	O
:	O
return	O
0	int
;	O
}	O
edit_drop_menu_cmd	function
(	O
e	pointer
,	O
m	int
)	O
;	O
return	O
1	int
;	O
}	O
