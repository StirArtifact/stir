static	O
void	O
_label_name	function
(	O
doscp_t	struct
*	O
cp	pointer
,	O
const	O
char	O
*	O
filename	pointer
,	O
int	O
verbose	int
UNUSEDP	O
,	O
int	O
*	O
mangled	pointer
,	O
dos_name_t	struct
*	O
ans	pointer
,	O
int	O
preserve_case	int
)	O
{	O
int	O
len	long
;	O
int	O
i	int
;	O
int	O
have_lower	int
,	O
have_upper	int
;	O
wchar_t	int
wbuffer	array
[	O
12	int
]	O
;	O
memset	function
(	O
ans	pointer
,	O
' '	O
,	O
sizeof	O
(	O
*	O
ans	pointer
)	O
-	O
1	int
)	O
;	O
ans	pointer
->	O
sentinel	char
=	O
'\0'	O
;	O
len	long
=	O
native_to_wchar	function
(	O
filename	pointer
,	O
wbuffer	array
,	O
11	int
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
len	long
>	O
11	int
)	O
{	O
*	O
mangled	pointer
=	O
1	int
;	O
len	long
=	O
11	int
;	O
}	O
else	O
*	O
mangled	pointer
=	O
0	int
;	O
have_lower	int
=	O
have_upper	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len	long
;	O
i	int
++	O
)	O
{	O
if	O
(	O
islower	function
(	O
wbuffer	array
[	O
i	int
]	O
)	O
)	O
have_lower	int
=	O
1	int
;	O
if	O
(	O
isupper	function
(	O
wbuffer	array
[	O
i	int
]	O
)	O
)	O
have_upper	int
=	O
1	int
;	O
if	O
(	O
!	O
preserve_case	int
)	O
wbuffer	array
[	O
i	int
]	O
=	O
ch_towupper	function
(	O
wbuffer	array
[	O
i	int
]	O
)	O
;	O
if	O
(	O
wcschr	function
(	O
L"^+=/[]:,?*\\<>|\"."	O
,	O
wbuffer	array
[	O
i	int
]	O
)	O
)	O
{	O
*	O
mangled	pointer
=	O
1	int
;	O
wbuffer	array
[	O
i	int
]	O
=	O
'~'	O
;	O
}	O
}	O
if	O
(	O
have_lower	int
&&	O
have_upper	int
)	O
*	O
mangled	pointer
=	O
1	int
;	O
wchar_to_dos	function
(	O
cp	pointer
,	O
wbuffer	array
,	O
ans	pointer
->	O
base	int
,	O
len	long
,	O
mangled	pointer
)	O
;	O
}	O
void	O
label_name_uc	function
(	O
doscp_t	struct
*	O
cp	pointer
,	O
const	O
char	O
*	O
filename	pointer
,	O
int	O
verbose	int
,	O
int	O
*	O
mangled	pointer
,	O
dos_name_t	struct
*	O
ans	pointer
)	O
{	O
_label_name	function
(	O
cp	pointer
,	O
filename	pointer
,	O
verbose	int
,	O
mangled	pointer
,	O
ans	pointer
,	O
0	int
)	O
;	O
}	O
void	O
label_name_pc	function
(	O
doscp_t	struct
*	O
cp	pointer
,	O
const	O
char	O
*	O
filename	pointer
,	O
int	O
verbose	int
,	O
int	O
*	O
mangled	pointer
,	O
dos_name_t	struct
*	O
ans	pointer
)	O
{	O
_label_name	function
(	O
cp	pointer
,	O
filename	pointer
,	O
verbose	int
,	O
mangled	pointer
,	O
ans	pointer
,	O
1	int
)	O
;	O
}	O
int	O
labelit	function
(	O
struct	O
dos_name_t	struct
*	O
dosname	pointer
,	O
char	O
*	O
longname	pointer
UNUSEDP	O
,	O
void	O
*	O
arg0	pointer
UNUSEDP	O
,	O
direntry_t	struct
*	O
entry	int
)	O
{	O
time_t	long
now	pointer
;	O
getTimeNow	function
(	O
&	O
now	pointer
)	O
;	O
mk_entry	function
(	O
dosname	pointer
,	O
0x8	int
,	O
0	int
,	O
0	int
,	O
now	pointer
,	O
&	O
entry	int
->	O
dir	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
usage	function
(	O
int	O
ret	int
)	O
NORETURN	O
;	O
static	O
void	O
usage	function
(	O
int	O
ret	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Mtools version %s, dated %s\n"	pointer
,	O
mversion	pointer
,	O
mdate	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Usage: %s [-vscVn] [-N serial] drive:\n"	pointer
,	O
progname	pointer
)	O
;	O
exit	function
(	O
ret	int
)	O
;	O
}	O
void	O
mlabel	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
type	enum
UNUSEDP	O
)	O
NORETURN	O
;	O
void	O
mlabel	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
type	enum
UNUSEDP	O
)	O
{	O
const	O
char	O
*	O
newLabel	pointer
=	O
""	pointer
;	O
int	O
verbose	int
,	O
clear	int
,	O
interactive	int
,	O
show	int
;	O
direntry_t	struct
entry	int
;	O
int	O
result	int
=	O
0	int
;	O
char	O
longname	pointer
[	O
VBUFSIZE	O
]	O
;	O
char	O
shortname	pointer
[	O
45	int
]	O
;	O
ClashHandling_t	struct
ch	char
;	O
struct	O
MainParam_t	struct
mp	pointer
;	O
Stream_t	struct
*	O
RootDir	pointer
;	O
int	O
c	char
;	O
int	O
mangled	pointer
;	O
enum	O
{	O
SER_NONE	int
,	O
SER_RANDOM	int
,	O
SER_SET	int
}	O
set_serial	enum
=	O
SER_NONE	int
;	O
unsigned	O
long	O
serial	array
=	O
0	int
;	O
int	O
need_write_boot	int
=	O
0	int
;	O
int	O
have_boot	int
=	O
0	int
;	O
char	O
*	O
eptr	pointer
;	O
union	O
bootsector	union
boot	struct
;	O
Stream_t	struct
*	O
Fs	pointer
=	O
0	int
;	O
int	O
r	int
;	O
struct	O
label_blk_t	struct
*	O
labelBlock	struct
;	O
int	O
isRo	int
=	O
0	int
;	O
int	O
*	O
isRop	pointer
=	O
NULL	O
;	O
char	O
drive	char
;	O
init_clash_handling	function
(	O
&	O
ch	char
)	O
;	O
ch	char
.	O
name_converter	pointer
=	O
label_name_uc	function
;	O
ch	char
.	O
ignore_entry	int
=	O
-	O
2	int
;	O
ch	char
.	O
is_label	int
=	O
1	int
;	O
verbose	int
=	O
0	int
;	O
clear	int
=	O
0	int
;	O
show	int
=	O
0	int
;	O
if	O
(	O
helpFlag	function
(	O
argc	int
,	O
argv	pointer
)	O
)	O
usage	function
(	O
0	int
)	O
;	O
while	O
(	O
(	O
c	char
=	O
getopt	function
(	O
argc	int
,	O
argv	pointer
,	O
"i:vcsnN:h"	pointer
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
c	char
)	O
{	O
case	O
'i'	O
:	O
set_cmd_line_image	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'v'	O
:	O
verbose	int
=	O
1	int
;	O
break	O
;	O
case	O
'c'	O
:	O
clear	int
=	O
1	int
;	O
break	O
;	O
case	O
's'	O
:	O
show	int
=	O
1	int
;	O
break	O
;	O
case	O
'n'	O
:	O
set_serial	enum
=	O
SER_RANDOM	int
;	O
init_random	function
(	O
)	O
;	O
serial	array
=	O
random	function
(	O
)	O
;	O
break	O
;	O
case	O
'N'	O
:	O
set_serial	enum
=	O
SER_SET	int
;	O
serial	array
=	O
strtoul	function
(	O
optarg	pointer
,	O
&	O
eptr	pointer
,	O
16	int
)	O
;	O
if	O
(	O
*	O
eptr	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s not a valid serial number\n"	pointer
,	O
optarg	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
break	O
;	O
case	O
'h'	O
:	O
usage	function
(	O
0	int
)	O
;	O
default	O
:	O
usage	function
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
argc	int
-	O
optind	int
>	O
1	int
)	O
usage	function
(	O
1	int
)	O
;	O
if	O
(	O
argc	int
-	O
optind	int
==	O
1	int
)	O
{	O
if	O
(	O
!	O
argv	pointer
[	O
optind	int
]	O
[	O
0	int
]	O
||	O
argv	pointer
[	O
optind	int
]	O
[	O
1	int
]	O
!=	O
':'	O
)	O
usage	function
(	O
1	int
)	O
;	O
drive	char
=	O
ch_toupper	function
(	O
argv	pointer
[	O
argc	int
-	O
1	int
]	O
[	O
0	int
]	O
)	O
;	O
newLabel	pointer
=	O
argv	pointer
[	O
optind	int
]	O
+	O
2	int
;	O
}	O
else	O
{	O
drive	char
=	O
get_default_drive	function
(	O
)	O
;	O
}	O
init_mp	function
(	O
&	O
mp	pointer
)	O
;	O
if	O
(	O
strlen	function
(	O
newLabel	pointer
)	O
>	O
VBUFSIZE	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Label too long\n"	pointer
)	O
;	O
FREE	O
(	O
&	O
RootDir	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
interactive	int
=	O
!	O
show	int
&&	O
!	O
clear	int
&&	O
!	O
newLabel	pointer
[	O
0	int
]	O
&&	O
(	O
set_serial	enum
==	O
SER_NONE	int
)	O
;	O
if	O
(	O
!	O
clear	int
&&	O
!	O
newLabel	pointer
[	O
0	int
]	O
)	O
{	O
isRop	pointer
=	O
&	O
isRo	int
;	O
}	O
if	O
(	O
clear	int
&&	O
newLabel	pointer
[	O
0	int
]	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Both clear and new label specified\n"	pointer
)	O
;	O
FREE	O
(	O
&	O
RootDir	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
RootDir	pointer
=	O
open_root_dir	function
(	O
drive	char
,	O
isRop	pointer
?	O
0	int
:	O
O_RDWR	int
,	O
isRop	pointer
)	O
;	O
if	O
(	O
isRo	int
)	O
{	O
show	int
=	O
1	int
;	O
interactive	int
=	O
0	int
;	O
}	O
if	O
(	O
!	O
RootDir	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: Cannot initialize drive\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
initializeDirentry	function
(	O
&	O
entry	int
,	O
RootDir	pointer
)	O
;	O
r	int
=	O
vfat_lookup	function
(	O
&	O
entry	int
,	O
0	int
,	O
0	int
,	O
ACCEPT_LABEL	int
|	O
MATCH_ANY	int
,	O
shortname	pointer
,	O
sizeof	O
(	O
shortname	pointer
)	O
,	O
longname	pointer
,	O
sizeof	O
(	O
longname	pointer
)	O
)	O
;	O
if	O
(	O
r	int
==	O
-	O
2	int
)	O
{	O
FREE	O
(	O
&	O
RootDir	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
show	int
||	O
interactive	int
)	O
{	O
if	O
(	O
isNotFound	function
(	O
&	O
entry	int
)	O
)	O
printf	function
(	O
" Volume has no label\n"	pointer
)	O
;	O
else	O
if	O
(	O
*	O
longname	pointer
)	O
printf	function
(	O
" Volume label is %s (abbr=%s)\n"	pointer
,	O
longname	pointer
,	O
shortname	pointer
)	O
;	O
else	O
printf	function
(	O
" Volume label is %s\n"	pointer
,	O
shortname	pointer
)	O
;	O
}	O
if	O
(	O
interactive	int
)	O
{	O
saved_sig_state	struct
ss	pointer
;	O
newLabel	pointer
=	O
longname	pointer
;	O
allow_interrupts	function
(	O
&	O
ss	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Enter the new volume label : "	pointer
)	O
;	O
if	O
(	O
fgets	function
(	O
longname	pointer
,	O
VBUFSIZE	O
,	O
stdin	pointer
)	O
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
{	O
FREE	O
(	O
&	O
RootDir	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
longname	pointer
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
if	O
(	O
longname	pointer
[	O
0	int
]	O
)	O
longname	pointer
[	O
strlen	function
(	O
newLabel	pointer
)	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
if	O
(	O
strlen	function
(	O
newLabel	pointer
)	O
>	O
11	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"New label too long\n"	pointer
)	O
;	O
FREE	O
(	O
&	O
RootDir	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
(	O
!	O
show	int
||	O
newLabel	pointer
[	O
0	int
]	O
)	O
&&	O
!	O
isNotFound	function
(	O
&	O
entry	int
)	O
)	O
{	O
if	O
(	O
interactive	int
&&	O
newLabel	pointer
[	O
0	int
]	O
==	O
'\0'	O
)	O
if	O
(	O
ask_confirmation	function
(	O
"Delete volume label (y/n): "	pointer
)	O
)	O
{	O
FREE	O
(	O
&	O
RootDir	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
entry	int
.	O
dir	pointer
.	O
attr	char
=	O
0	int
;	O
wipeEntry	function
(	O
&	O
entry	int
)	O
;	O
}	O
if	O
(	O
newLabel	pointer
[	O
0	int
]	O
!=	O
'\0'	O
)	O
{	O
ch	char
.	O
ignore_entry	int
=	O
1	int
;	O
result	int
=	O
mwrite_one	function
(	O
RootDir	pointer
,	O
newLabel	pointer
,	O
0	int
,	O
labelit	function
,	O
NULL	O
,	O
&	O
ch	char
)	O
?	O
0	int
:	O
1	int
;	O
}	O
have_boot	int
=	O
0	int
;	O
if	O
(	O
(	O
!	O
show	int
||	O
newLabel	pointer
[	O
0	int
]	O
)	O
||	O
set_serial	enum
!=	O
SER_NONE	int
)	O
{	O
Fs	pointer
=	O
GetFs	function
(	O
RootDir	pointer
)	O
;	O
have_boot	int
=	O
(	O
force_read	function
(	O
Fs	pointer
,	O
boot	struct
.	O
characters	array
,	O
0	int
,	O
sizeof	O
(	O
boot	struct
)	O
)	O
==	O
sizeof	O
(	O
boot	struct
)	O
)	O
;	O
}	O
if	O
(	O
WORD_S	O
(	O
fatlen	array
)	O
)	O
{	O
labelBlock	struct
=	O
&	O
boot	struct
.	O
boot	struct
.	O
ext	array
.	O
old	struct
.	O
labelBlock	struct
;	O
}	O
else	O
{	O
labelBlock	struct
=	O
&	O
boot	struct
.	O
boot	struct
.	O
ext	array
.	O
fat32	struct
.	O
labelBlock	struct
;	O
}	O
if	O
(	O
!	O
show	int
||	O
newLabel	pointer
[	O
0	int
]	O
)	O
{	O
dos_name_t	struct
dosname	pointer
;	O
const	O
char	O
*	O
shrtLabel	pointer
;	O
doscp_t	struct
*	O
cp	pointer
;	O
if	O
(	O
!	O
newLabel	pointer
[	O
0	int
]	O
)	O
shrtLabel	pointer
=	O
"NO NAME    "	pointer
;	O
else	O
shrtLabel	pointer
=	O
newLabel	pointer
;	O
cp	pointer
=	O
GET_DOSCONVERT	O
(	O
Fs	pointer
)	O
;	O
label_name_pc	function
(	O
cp	pointer
,	O
shrtLabel	pointer
,	O
verbose	int
,	O
&	O
mangled	pointer
,	O
&	O
dosname	pointer
)	O
;	O
if	O
(	O
have_boot	int
&&	O
boot	struct
.	O
boot	struct
.	O
descr	char
>=	O
0xf0	int
&&	O
has_BPB4	O
)	O
{	O
strncpy	function
(	O
labelBlock	struct
->	O
label	array
,	O
dosname	pointer
.	O
base	int
,	O
8	int
)	O
;	O
strncpy	function
(	O
labelBlock	struct
->	O
label	array
+	O
8	int
,	O
dosname	pointer
.	O
ext	array
,	O
3	int
)	O
;	O
need_write_boot	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
(	O
set_serial	enum
!=	O
SER_NONE	int
)	O
&	O
have_boot	int
)	O
{	O
if	O
(	O
have_boot	int
&&	O
boot	struct
.	O
boot	struct
.	O
descr	char
>=	O
0xf0	int
&&	O
has_BPB4	O
)	O
{	O
set_dword	function
(	O
labelBlock	struct
->	O
serial	array
,	O
serial	array
)	O
;	O
need_write_boot	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
need_write_boot	int
)	O
{	O
force_write	function
(	O
Fs	pointer
,	O
(	O
char	O
*	O
)	O
&	O
boot	struct
,	O
0	int
,	O
sizeof	O
(	O
boot	struct
)	O
)	O
;	O
if	O
(	O
!	O
WORD_S	O
(	O
fatlen	array
)	O
)	O
{	O
int	O
backupBoot	array
=	O
WORD_S	O
(	O
ext	array
.	O
fat32	struct
.	O
backupBoot	array
)	O
;	O
force_write	function
(	O
Fs	pointer
,	O
(	O
char	O
*	O
)	O
&	O
boot	struct
,	O
backupBoot	array
*	O
WORD_S	O
(	O
secsiz	array
)	O
,	O
sizeof	O
(	O
boot	struct
)	O
)	O
;	O
}	O
}	O
FREE	O
(	O
&	O
RootDir	pointer
)	O
;	O
exit	function
(	O
result	int
)	O
;	O
}	O
