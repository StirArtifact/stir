void	O
mu_list_free_bodystructure	function
(	O
void	O
*	O
item	pointer
)	O
{	O
mu_bodystructure_free	function
(	O
item	pointer
)	O
;	O
}	O
void	O
mu_bodystructure_free	function
(	O
struct	O
mu_bodystructure	struct
*	O
bs	pointer
)	O
{	O
if	O
(	O
!	O
bs	pointer
)	O
return	O
;	O
free	function
(	O
bs	pointer
->	O
body_type	pointer
)	O
;	O
free	function
(	O
bs	pointer
->	O
body_subtype	pointer
)	O
;	O
mu_assoc_destroy	function
(	O
&	O
bs	pointer
->	O
body_param	pointer
)	O
;	O
free	function
(	O
bs	pointer
->	O
body_id	pointer
)	O
;	O
free	function
(	O
bs	pointer
->	O
body_descr	pointer
)	O
;	O
free	function
(	O
bs	pointer
->	O
body_encoding	pointer
)	O
;	O
free	function
(	O
bs	pointer
->	O
body_md5	pointer
)	O
;	O
free	function
(	O
bs	pointer
->	O
body_disposition	pointer
)	O
;	O
mu_assoc_destroy	function
(	O
&	O
bs	pointer
->	O
body_disp_param	pointer
)	O
;	O
free	function
(	O
bs	pointer
->	O
body_language	pointer
)	O
;	O
free	function
(	O
bs	pointer
->	O
body_location	pointer
)	O
;	O
switch	O
(	O
bs	pointer
->	O
body_message_type	enum
)	O
{	O
case	O
mu_message_other	int
:	O
case	O
mu_message_text	int
:	O
break	O
;	O
case	O
mu_message_rfc822	int
:	O
mu_message_imapenvelope_free	function
(	O
bs	pointer
->	O
v	union
.	O
rfc822	struct
.	O
body_env	pointer
)	O
;	O
mu_bodystructure_free	function
(	O
bs	pointer
->	O
v	union
.	O
rfc822	struct
.	O
body_struct	pointer
)	O
;	O
break	O
;	O
case	O
mu_message_multipart	int
:	O
mu_list_destroy	function
(	O
&	O
bs	pointer
->	O
v	union
.	O
multipart	struct
.	O
body_parts	pointer
)	O
;	O
}	O
free	function
(	O
bs	pointer
)	O
;	O
}	O
static	O
int	O
bodystructure_fill	function
(	O
mu_message_t	pointer
msg	pointer
,	O
struct	O
mu_bodystructure	struct
*	O
bs	pointer
)	O
;	O
static	O
int	O
bodystructure_init	function
(	O
mu_message_t	pointer
msg	pointer
,	O
struct	O
mu_bodystructure	struct
*	O
*	O
pbs	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_bodystructure	struct
*	O
bs	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
bs	pointer
)	O
)	O
;	O
if	O
(	O
!	O
bs	pointer
)	O
return	O
ENOMEM	int
;	O
rc	int
=	O
bodystructure_fill	function
(	O
msg	pointer
,	O
bs	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_bodystructure_free	function
(	O
bs	pointer
)	O
;	O
else	O
*	O
pbs	pointer
=	O
bs	pointer
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
bodystructure_fill	function
(	O
mu_message_t	pointer
msg	pointer
,	O
struct	O
mu_bodystructure	struct
*	O
bs	pointer
)	O
{	O
mu_header_t	pointer
header	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
buffer	pointer
=	O
NULL	O
;	O
mu_body_t	pointer
body	pointer
=	O
NULL	O
;	O
int	O
rc	int
;	O
int	O
is_multipart	int
=	O
0	int
;	O
rc	int
=	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
header	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
mu_header_sget_value	O
(	O
header	pointer
,	O
MU_HEADER_CONTENT_TYPE	pointer
,	O
&	O
buffer	pointer
)	O
==	O
0	int
)	O
{	O
char	O
*	O
value	pointer
;	O
char	O
*	O
p	pointer
;	O
size_t	long
len	long
;	O
rc	int
=	O
mu_mime_header_parse	function
(	O
buffer	pointer
,	O
"UTF-8"	pointer
,	O
&	O
value	pointer
,	O
&	O
bs	pointer
->	O
body_param	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
len	long
=	O
strcspn	function
(	O
value	pointer
,	O
"/"	pointer
)	O
;	O
if	O
(	O
mu_c_strcasecmp	function
(	O
value	pointer
,	O
"MESSAGE/RFC822"	pointer
)	O
==	O
0	int
)	O
bs	pointer
->	O
body_message_type	enum
=	O
mu_message_rfc822	int
;	O
else	O
if	O
(	O
mu_c_strncasecmp	function
(	O
value	pointer
,	O
"TEXT"	pointer
,	O
len	long
)	O
==	O
0	int
)	O
bs	pointer
->	O
body_message_type	enum
=	O
mu_message_text	int
;	O
p	pointer
=	O
malloc	function
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
ENOMEM	int
;	O
memcpy	function
(	O
p	pointer
,	O
value	pointer
,	O
len	long
)	O
;	O
p	pointer
[	O
len	long
]	O
=	O
0	int
;	O
bs	pointer
->	O
body_type	pointer
=	O
p	pointer
;	O
mu_strupper	function
(	O
bs	pointer
->	O
body_type	pointer
)	O
;	O
if	O
(	O
value	pointer
[	O
len	long
]	O
)	O
{	O
bs	pointer
->	O
body_subtype	pointer
=	O
strdup	function
(	O
value	pointer
+	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
bs	pointer
->	O
body_subtype	pointer
)	O
return	O
ENOMEM	int
;	O
mu_strupper	function
(	O
bs	pointer
->	O
body_subtype	pointer
)	O
;	O
}	O
rc	int
=	O
mu_message_is_multipart	function
(	O
msg	pointer
,	O
&	O
is_multipart	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
is_multipart	int
)	O
bs	pointer
->	O
body_message_type	enum
=	O
mu_message_multipart	int
;	O
}	O
else	O
{	O
struct	O
mu_mime_param	struct
param	pointer
;	O
bs	pointer
->	O
body_type	pointer
=	O
strdup	function
(	O
"TEXT"	pointer
)	O
;	O
if	O
(	O
!	O
bs	pointer
->	O
body_type	pointer
)	O
return	O
ENOMEM	int
;	O
bs	pointer
->	O
body_subtype	pointer
=	O
strdup	function
(	O
"PLAIN"	pointer
)	O
;	O
if	O
(	O
!	O
bs	pointer
->	O
body_subtype	pointer
)	O
{	O
free	function
(	O
bs	pointer
->	O
body_type	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
rc	int
=	O
mu_mime_param_assoc_create	function
(	O
&	O
bs	pointer
->	O
body_param	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
memset	function
(	O
&	O
param	pointer
,	O
0	int
,	O
sizeof	O
(	O
param	pointer
)	O
)	O
;	O
param	pointer
.	O
value	pointer
=	O
strdup	function
(	O
"US-ASCII"	pointer
)	O
;	O
if	O
(	O
!	O
param	pointer
.	O
value	pointer
)	O
{	O
free	function
(	O
bs	pointer
->	O
body_type	pointer
)	O
;	O
free	function
(	O
bs	pointer
->	O
body_subtype	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
rc	int
=	O
mu_assoc_install	function
(	O
bs	pointer
->	O
body_param	pointer
,	O
"CHARSET"	pointer
,	O
&	O
param	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	function
(	O
param	pointer
.	O
value	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
bs	pointer
->	O
body_message_type	enum
=	O
mu_message_text	int
;	O
}	O
if	O
(	O
is_multipart	int
)	O
{	O
size_t	long
i	long
,	O
nparts	pointer
;	O
rc	int
=	O
mu_message_get_num_parts	function
(	O
msg	pointer
,	O
&	O
nparts	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_list_create	function
(	O
&	O
bs	pointer
->	O
v	union
.	O
multipart	struct
.	O
body_parts	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_list_set_destroy_item	function
(	O
bs	pointer
->	O
v	union
.	O
multipart	struct
.	O
body_parts	pointer
,	O
mu_list_free_bodystructure	function
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
nparts	pointer
;	O
i	long
++	O
)	O
{	O
mu_message_t	pointer
partmsg	pointer
;	O
struct	O
mu_bodystructure	struct
*	O
partbs	pointer
;	O
rc	int
=	O
mu_message_get_part	function
(	O
msg	pointer
,	O
i	long
,	O
&	O
partmsg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
bodystructure_init	function
(	O
partmsg	pointer
,	O
&	O
partbs	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_list_append	function
(	O
bs	pointer
->	O
v	union
.	O
multipart	struct
.	O
body_parts	pointer
,	O
partbs	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_bodystructure_free	function
(	O
partbs	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
}	O
}	O
else	O
{	O
rc	int
=	O
mu_header_aget_value_unfold	O
(	O
header	pointer
,	O
MU_HEADER_CONTENT_ID	pointer
,	O
&	O
bs	pointer
->	O
body_id	pointer
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_header_aget_value_unfold	O
(	O
header	pointer
,	O
MU_HEADER_CONTENT_DESCRIPTION	pointer
,	O
&	O
bs	pointer
->	O
body_descr	pointer
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_header_aget_value_unfold	O
(	O
header	pointer
,	O
MU_HEADER_CONTENT_TRANSFER_ENCODING	pointer
,	O
&	O
bs	pointer
->	O
body_encoding	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
MU_ERR_NOENT	O
)	O
{	O
bs	pointer
->	O
body_encoding	pointer
=	O
strdup	function
(	O
"7BIT"	pointer
)	O
;	O
if	O
(	O
!	O
bs	pointer
->	O
body_encoding	pointer
)	O
return	O
ENOMEM	int
;	O
}	O
else	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_message_get_body	function
(	O
msg	pointer
,	O
&	O
body	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_body_size	function
(	O
body	pointer
,	O
&	O
bs	pointer
->	O
body_size	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
bs	pointer
->	O
body_message_type	enum
==	O
mu_message_text	int
)	O
{	O
rc	int
=	O
mu_body_lines	function
(	O
body	pointer
,	O
&	O
bs	pointer
->	O
v	union
.	O
text	struct
.	O
body_lines	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
else	O
if	O
(	O
bs	pointer
->	O
body_message_type	enum
==	O
mu_message_rfc822	int
)	O
{	O
mu_message_t	pointer
emsg	pointer
=	O
NULL	O
;	O
rc	int
=	O
mu_message_unencapsulate	function
(	O
msg	pointer
,	O
&	O
emsg	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_message_get_imapenvelope	function
(	O
emsg	pointer
,	O
&	O
bs	pointer
->	O
v	union
.	O
rfc822	struct
.	O
body_env	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
bodystructure_init	function
(	O
emsg	pointer
,	O
&	O
bs	pointer
->	O
v	union
.	O
rfc822	struct
.	O
body_struct	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_message_lines	function
(	O
emsg	pointer
,	O
&	O
bs	pointer
->	O
v	union
.	O
rfc822	struct
.	O
body_lines	long
)	O
;	O
mu_message_destroy	function
(	O
&	O
emsg	pointer
,	O
NULL	O
)	O
;	O
}	O
}	O
rc	int
=	O
mu_header_aget_value_unfold	O
(	O
header	pointer
,	O
MU_HEADER_CONTENT_MD5	pointer
,	O
&	O
bs	pointer
->	O
body_md5	pointer
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_header_sget_value	O
(	O
header	pointer
,	O
MU_HEADER_CONTENT_DISPOSITION	pointer
,	O
&	O
buffer	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
rc	int
=	O
mu_mime_header_parse	function
(	O
buffer	pointer
,	O
"UTF-8"	pointer
,	O
&	O
bs	pointer
->	O
body_disposition	pointer
,	O
&	O
bs	pointer
->	O
body_disp_param	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
else	O
if	O
(	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_header_aget_value_unfold	O
(	O
header	pointer
,	O
MU_HEADER_CONTENT_LANGUAGE	pointer
,	O
&	O
bs	pointer
->	O
body_language	pointer
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_header_aget_value_unfold	O
(	O
header	pointer
,	O
MU_HEADER_CONTENT_LOCATION	pointer
,	O
&	O
bs	pointer
->	O
body_location	pointer
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
return	O
rc	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_message_get_bodystructure	function
(	O
mu_message_t	pointer
msg	pointer
,	O
struct	O
mu_bodystructure	struct
*	O
*	O
pbs	pointer
)	O
{	O
if	O
(	O
msg	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pbs	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
msg	pointer
->	O
_bodystructure	pointer
)	O
return	O
msg	pointer
->	O
_bodystructure	pointer
(	O
msg	pointer
,	O
pbs	pointer
)	O
;	O
return	O
bodystructure_init	function
(	O
msg	pointer
,	O
pbs	pointer
)	O
;	O
}	O
int	O
mu_message_set_bodystructure	function
(	O
mu_message_t	pointer
msg	pointer
,	O
int	O
(	O
*	O
_bodystructure	pointer
)	O
(	O
mu_message_t	pointer
,	O
struct	O
mu_bodystructure	struct
*	O
*	O
)	O
,	O
void	O
*	O
owner	pointer
)	O
{	O
if	O
(	O
msg	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
msg	pointer
->	O
owner	pointer
!=	O
owner	pointer
)	O
return	O
EACCES	int
;	O
msg	pointer
->	O
_bodystructure	pointer
=	O
_bodystructure	pointer
;	O
return	O
0	int
;	O
}	O
