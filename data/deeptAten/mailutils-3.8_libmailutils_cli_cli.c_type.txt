char	O
*	O
mu_site_config_file	function
(	O
void	O
)	O
{	O
char	O
*	O
p	pointer
=	O
getenv	function
(	O
"MU_SITE_CONFIG_FILE"	pointer
)	O
;	O
if	O
(	O
p	pointer
)	O
return	O
p	pointer
;	O
return	O
MU_SITE_CONFIG_FILE	O
;	O
}	O
const	O
char	O
mu_version_copyright	array
[	O
]	O
=	O
"Copyright %s 2007-2019 Free Software Foundation, inc."	pointer
;	O
void	O
mu_version_hook	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
mu_stream_printf	function
(	O
stream	pointer
,	O
"%s (%s) %s\n"	pointer
,	O
mu_program_name	pointer
,	O
PACKAGE_NAME	pointer
,	O
PACKAGE_VERSION	pointer
)	O
;	O
mu_stream_printf	function
(	O
stream	pointer
,	O
mu_version_copyright	array
,	O
_	O
(	O
"(C)"	pointer
)	O
)	O
;	O
mu_stream_printf	function
(	O
stream	pointer
,	O
_	O
(	O
"\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n"	pointer
)	O
)	O
;	O
}	O
const	O
char	O
mu_general_help_text	array
[	O
]	O
=	O
N_	O
(	O
"General help using GNU software: <http://www.gnu.org/gethelp/>"	pointer
)	O
;	O
struct	O
app_data	struct
{	O
struct	O
mu_cli_setup	struct
*	O
setup	pointer
;	O
struct	O
mu_cfg_parse_hints	struct
*	O
hints	pointer
;	O
struct	O
mu_cfg_tree	struct
*	O
append_tree	pointer
;	O
int	O
lint	int
;	O
}	O
;	O
static	O
void	O
extra_help_hook	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
struct	O
app_data	struct
*	O
dp	pointer
=	O
po	pointer
->	O
po_data	pointer
;	O
mu_stream_printf	function
(	O
stream	pointer
,	O
"%s\n"	pointer
,	O
gettext	function
(	O
dp	pointer
->	O
setup	pointer
->	O
prog_extra_doc	pointer
)	O
)	O
;	O
}	O
static	O
void	O
prog_doc_hook	pointer
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
struct	O
app_data	struct
*	O
dp	pointer
=	O
po	pointer
->	O
po_data	pointer
;	O
dp	pointer
->	O
setup	pointer
->	O
prog_doc_hook	pointer
(	O
stream	pointer
)	O
;	O
}	O
static	O
void	O
change_progname	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
po	pointer
->	O
po_prog_name	pointer
=	O
mu_strdup	function
(	O
arg	pointer
)	O
;	O
free	function
(	O
mu_program_name	pointer
)	O
;	O
mu_program_name	pointer
=	O
mu_strdup	function
(	O
arg	pointer
)	O
;	O
}	O
static	O
void	O
no_user_config	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
struct	O
app_data	struct
*	O
dp	pointer
=	O
po	pointer
->	O
po_data	pointer
;	O
dp	pointer
->	O
hints	pointer
->	O
flags	int
&=	O
~	O
MU_CFHINT_PER_USER_FILE	int
;	O
}	O
static	O
void	O
no_site_config	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
struct	O
app_data	struct
*	O
dp	pointer
=	O
po	pointer
->	O
po_data	pointer
;	O
dp	pointer
->	O
hints	pointer
->	O
flags	int
&=	O
~	O
MU_CFHINT_SITE_FILE	int
;	O
}	O
static	O
void	O
no_config	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
struct	O
app_data	struct
*	O
dp	pointer
=	O
po	pointer
->	O
po_data	pointer
;	O
dp	pointer
->	O
hints	pointer
->	O
flags	int
&=	O
~	O
(	O
MU_CFHINT_SITE_FILE	int
|	O
MU_CFHINT_PER_USER_FILE	int
)	O
;	O
}	O
static	O
void	O
config_file	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
struct	O
app_data	struct
*	O
dp	pointer
=	O
po	pointer
->	O
po_data	pointer
;	O
dp	pointer
->	O
hints	pointer
->	O
flags	int
=	O
(	O
dp	pointer
->	O
hints	pointer
->	O
flags	int
&	O
~	O
(	O
MU_CFHINT_SITE_FILE	int
|	O
MU_CFHINT_PROGRAM	int
)	O
)	O
|	O
MU_CFHINT_CUSTOM_FILE	int
;	O
dp	pointer
->	O
hints	pointer
->	O
custom_file	pointer
=	O
mu_strdup	function
(	O
arg	pointer
)	O
;	O
}	O
static	O
void	O
config_verbose	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
struct	O
app_data	struct
*	O
dp	pointer
=	O
po	pointer
->	O
po_data	pointer
;	O
if	O
(	O
dp	pointer
->	O
hints	pointer
->	O
flags	int
&	O
MU_CF_VERBOSE	int
)	O
dp	pointer
->	O
hints	pointer
->	O
flags	int
|=	O
MU_CF_DUMP	int
;	O
else	O
dp	pointer
->	O
hints	pointer
->	O
flags	int
|=	O
MU_CF_VERBOSE	int
;	O
}	O
static	O
void	O
config_lint	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
struct	O
app_data	struct
*	O
dp	pointer
=	O
po	pointer
->	O
po_data	pointer
;	O
dp	pointer
->	O
lint	int
=	O
1	int
;	O
dp	pointer
->	O
hints	pointer
->	O
flags	int
|=	O
MU_CF_VERBOSE	int
;	O
}	O
static	O
void	O
param_set	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
struct	O
app_data	struct
*	O
dp	pointer
=	O
po	pointer
->	O
po_data	pointer
;	O
mu_cfg_node_t	struct
*	O
node	pointer
;	O
int	O
rc	int
=	O
mu_cfg_create_subtree	function
(	O
arg	pointer
,	O
&	O
node	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_parseopt_error	function
(	O
po	pointer
,	O
"%s: cannot create node: %s"	pointer
,	O
arg	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
if	O
(	O
!	O
dp	pointer
->	O
append_tree	pointer
)	O
{	O
mu_cfg_tree_create	function
(	O
&	O
dp	pointer
->	O
append_tree	pointer
)	O
;	O
}	O
mu_cfg_tree_add_node	function
(	O
dp	pointer
->	O
append_tree	pointer
,	O
node	pointer
)	O
;	O
}	O
static	O
void	O
hangproc	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
int	O
n	long
;	O
if	O
(	O
mu_str_to_c	function
(	O
arg	pointer
,	O
mu_c_int	int
,	O
&	O
n	long
,	O
NULL	O
)	O
)	O
{	O
mu_parseopt_error	function
(	O
po	pointer
,	O
_	O
(	O
"%s: bad number"	pointer
)	O
,	O
arg	pointer
)	O
;	O
exit	function
(	O
po	pointer
->	O
po_exit_error	int
)	O
;	O
}	O
mu_wd	function
(	O
n	long
)	O
;	O
}	O
struct	O
mu_option	struct
mu_common_options	array
[	O
]	O
=	O
{	O
{	O
"program-name"	pointer
,	O
0	int
,	O
N_	O
(	O
"NAME"	pointer
)	O
,	O
MU_OPTION_IMMEDIATE	int
|	O
MU_OPTION_HIDDEN	int
,	O
N_	O
(	O
"set program name"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
change_progname	function
}	O
,	O
{	O
"HANG"	pointer
,	O
0	int
,	O
N_	O
(	O
"SECONDS"	pointer
)	O
,	O
MU_OPTION_IMMEDIATE	int
|	O
MU_OPTION_ARG_OPTIONAL	int
|	O
MU_OPTION_HIDDEN	int
,	O
N_	O
(	O
"wait this number of seconds before startup"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
hangproc	function
,	O
"3600"	pointer
}	O
,	O
MU_OPTION_END	O
}	O
;	O
static	O
struct	O
mu_option	struct
mu_config_option_header	struct
=	O
MU_OPTION_GROUP	O
(	O
N_	O
(	O
"Configuration handling"	pointer
)	O
)	O
;	O
static	O
struct	O
mu_option	struct
mu_site_config_options	array
[	O
]	O
=	O
{	O
{	O
"no-site-config"	pointer
,	O
0	int
,	O
NULL	O
,	O
MU_OPTION_IMMEDIATE	int
,	O
N_	O
(	O
"do not load site-wide configuration file"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
no_site_config	function
}	O
,	O
MU_OPTION_END	O
}	O
;	O
static	O
struct	O
mu_option	struct
mu_user_config_options	array
[	O
]	O
=	O
{	O
{	O
"no-user-config"	pointer
,	O
0	int
,	O
NULL	O
,	O
MU_OPTION_IMMEDIATE	int
,	O
N_	O
(	O
"do not load user configuration file"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
no_user_config	function
}	O
,	O
MU_OPTION_END	O
}	O
;	O
static	O
struct	O
mu_option	struct
mu_no_config_option	struct
=	O
{	O
"no-config"	pointer
,	O
0	int
,	O
NULL	O
,	O
MU_OPTION_IMMEDIATE	int
,	O
N_	O
(	O
"do not load site and user configuration files"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
no_config	function
}	O
;	O
static	O
struct	O
mu_option	struct
mu_config_lint_options	array
[	O
]	O
=	O
{	O
{	O
"config-verbose"	pointer
,	O
0	int
,	O
NULL	O
,	O
MU_OPTION_IMMEDIATE	int
,	O
N_	O
(	O
"verbosely log parsing of the configuration files"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
config_verbose	function
}	O
,	O
{	O
"config-lint"	pointer
,	O
0	int
,	O
NULL	O
,	O
MU_OPTION_IMMEDIATE	int
,	O
N_	O
(	O
"check configuration file syntax and exit"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
config_lint	function
}	O
,	O
MU_OPTION_END	O
}	O
;	O
static	O
struct	O
mu_option	struct
mu_config_override_options	array
[	O
]	O
=	O
{	O
{	O
"config-file"	pointer
,	O
0	int
,	O
N_	O
(	O
"FILE"	pointer
)	O
,	O
MU_OPTION_IMMEDIATE	int
,	O
N_	O
(	O
"load this configuration file; implies --no-config"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
config_file	function
}	O
,	O
{	O
"set"	pointer
,	O
0	int
,	O
N_	O
(	O
"PARAM=VALUE"	pointer
)	O
,	O
MU_OPTION_IMMEDIATE	int
,	O
N_	O
(	O
"set configuration parameter"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
param_set	function
}	O
,	O
MU_OPTION_END	O
}	O
;	O
static	O
void	O
show_comp_defaults	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
unused	pointer
)	O
{	O
mu_print_options	function
(	O
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
static	O
void	O
show_config_help	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
unused	pointer
)	O
{	O
struct	O
app_data	struct
*	O
dp	pointer
=	O
po	pointer
->	O
po_data	pointer
;	O
char	O
*	O
comment	pointer
;	O
mu_stream_t	pointer
stream	pointer
;	O
struct	O
mu_cfg_cont	struct
*	O
cont	pointer
;	O
static	O
struct	O
mu_cfg_param	struct
dummy_include_param	array
[	O
]	O
=	O
{	O
{	O
"include"	pointer
,	O
mu_c_string	int
,	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Include contents of the given file.  If a directory is given, "	pointer
"include contents of the file <file>/<program>, where "	pointer
"<program> is the name of the program.  This latter form is "	pointer
"allowed only in the site-wide configuration file."	pointer
)	O
,	O
N_	O
(	O
"file-or-directory"	pointer
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
mu_stdio_stream_create	function
(	O
&	O
stream	pointer
,	O
MU_STDOUT_FD	int
,	O
0	int
)	O
;	O
mu_asprintf	function
(	O
&	O
comment	pointer
,	O
"Configuration file structure for %s utility."	pointer
,	O
po	pointer
->	O
po_prog_name	pointer
)	O
;	O
mu_cfg_format_docstring	function
(	O
stream	pointer
,	O
comment	pointer
,	O
0	int
)	O
;	O
free	function
(	O
comment	pointer
)	O
;	O
mu_asprintf	function
(	O
&	O
comment	pointer
,	O
"For use in global configuration file (%s), enclose it "	pointer
"in `program %s { ... };"	pointer
,	O
mu_site_config_file	function
(	O
)	O
,	O
po	pointer
->	O
po_prog_name	pointer
)	O
;	O
mu_cfg_format_docstring	function
(	O
stream	pointer
,	O
comment	pointer
,	O
0	int
)	O
;	O
free	function
(	O
comment	pointer
)	O
;	O
mu_asprintf	function
(	O
&	O
comment	pointer
,	O
"For more information, use `info %s'."	pointer
,	O
po	pointer
->	O
po_prog_name	pointer
)	O
;	O
mu_cfg_format_docstring	function
(	O
stream	pointer
,	O
comment	pointer
,	O
0	int
)	O
;	O
free	function
(	O
comment	pointer
)	O
;	O
cont	pointer
=	O
mu_config_clone_root_container	function
(	O
)	O
;	O
mu_config_container_register_section	function
(	O
&	O
cont	pointer
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
dummy_include_param	array
,	O
NULL	O
)	O
;	O
if	O
(	O
dp	pointer
->	O
setup	pointer
)	O
{	O
mu_config_container_register_section	function
(	O
&	O
cont	pointer
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
dp	pointer
->	O
setup	pointer
->	O
cfg	pointer
,	O
NULL	O
)	O
;	O
}	O
mu_cfg_format_container	function
(	O
stream	pointer
,	O
cont	pointer
)	O
;	O
mu_config_destroy_container	function
(	O
&	O
cont	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
stream	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
static	O
struct	O
mu_option	struct
mu_extra_help_options	array
[	O
]	O
=	O
{	O
MU_OPTION_GROUP	O
(	O
N_	O
(	O
"Informational options"	pointer
)	O
)	O
,	O
{	O
"show-config-options"	pointer
,	O
0	int
,	O
NULL	O
,	O
MU_OPTION_IMMEDIATE	int
,	O
N_	O
(	O
"show compilation options"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
show_comp_defaults	function
}	O
,	O
MU_OPTION_END	O
}	O
;	O
static	O
struct	O
mu_option	struct
mu_config_help_options	array
[	O
]	O
=	O
{	O
{	O
"config-help"	pointer
,	O
0	int
,	O
NULL	O
,	O
MU_OPTION_IMMEDIATE	int
,	O
N_	O
(	O
"show configuration file summary"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
show_config_help	function
}	O
,	O
MU_OPTION_END	O
}	O
;	O
static	O
int	O
add_opt_group	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
mu_parseopt	struct
*	O
po	pointer
=	O
data	pointer
;	O
struct	O
mu_option	struct
*	O
opt	pointer
=	O
item	pointer
;	O
po	pointer
->	O
po_optv	pointer
[	O
po	pointer
->	O
po_optc	long
++	O
]	O
=	O
opt	pointer
;	O
return	O
0	int
;	O
}	O
static	O
void	O
opool_add_option	function
(	O
mu_opool_t	pointer
pool	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
)	O
{	O
mu_opool_append	function
(	O
pool	pointer
,	O
opt	pointer
,	O
sizeof	O
*	O
opt	pointer
)	O
;	O
}	O
static	O
void	O
opool_add_options	function
(	O
mu_opool_t	pointer
pool	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
)	O
{	O
while	O
(	O
!	O
MU_OPTION_IS_END	O
(	O
opt	pointer
)	O
)	O
{	O
opool_add_option	function
(	O
pool	pointer
,	O
opt	pointer
)	O
;	O
opt	pointer
++	O
;	O
}	O
}	O
static	O
struct	O
mu_option	struct
*	O
opool_end_option	function
(	O
mu_opool_t	pointer
pool	pointer
)	O
{	O
struct	O
mu_option	struct
end	struct
=	O
MU_OPTION_END	O
;	O
opool_add_option	function
(	O
pool	pointer
,	O
&	O
end	struct
)	O
;	O
return	O
mu_opool_finish	function
(	O
pool	pointer
,	O
NULL	O
)	O
;	O
}	O
static	O
struct	O
mu_option	struct
*	O
*	O
init_options	function
(	O
mu_opool_t	pointer
pool	pointer
,	O
char	O
*	O
*	O
capa	pointer
,	O
struct	O
mu_cli_setup	struct
*	O
setup	pointer
,	O
struct	O
mu_cfg_parse_hints	struct
const	O
*	O
hints	pointer
,	O
mu_list_t	pointer
*	O
ret_comlist	pointer
)	O
{	O
size_t	long
i	long
,	O
s	pointer
;	O
mu_list_t	pointer
oplist	pointer
;	O
mu_list_t	pointer
comlist	pointer
;	O
struct	O
mu_parseopt	struct
po	pointer
;	O
mu_list_create	function
(	O
&	O
oplist	pointer
)	O
;	O
if	O
(	O
setup	pointer
->	O
optv	pointer
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
setup	pointer
->	O
optv	pointer
[	O
i	long
]	O
;	O
i	long
++	O
)	O
mu_list_append	function
(	O
oplist	pointer
,	O
setup	pointer
->	O
optv	pointer
[	O
i	long
]	O
)	O
;	O
}	O
mu_list_create	function
(	O
&	O
comlist	pointer
)	O
;	O
mu_auth_extend_settings	function
(	O
oplist	pointer
,	O
comlist	pointer
)	O
;	O
if	O
(	O
capa	pointer
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
capa	pointer
[	O
i	long
]	O
;	O
i	long
++	O
)	O
mu_cli_capa_extend_settings	function
(	O
capa	pointer
[	O
i	long
]	O
,	O
oplist	pointer
,	O
comlist	pointer
)	O
;	O
}	O
*	O
ret_comlist	pointer
=	O
comlist	pointer
;	O
mu_list_append	function
(	O
oplist	pointer
,	O
mu_common_options	array
)	O
;	O
if	O
(	O
hints	pointer
->	O
flags	int
&	O
CONFIG_ENABLED	O
)	O
{	O
opool_add_option	function
(	O
pool	pointer
,	O
&	O
mu_config_option_header	struct
)	O
;	O
opool_add_options	function
(	O
pool	pointer
,	O
mu_config_lint_options	array
)	O
;	O
if	O
(	O
!	O
(	O
hints	pointer
->	O
flags	int
&	O
MU_CFHINT_NO_CONFIG_OVERRIDE	int
)	O
)	O
{	O
opool_add_options	function
(	O
pool	pointer
,	O
mu_config_override_options	array
)	O
;	O
if	O
(	O
hints	pointer
->	O
flags	int
&	O
MU_CFHINT_SITE_FILE	int
)	O
{	O
opool_add_options	function
(	O
pool	pointer
,	O
mu_site_config_options	array
)	O
;	O
if	O
(	O
hints	pointer
->	O
flags	int
&	O
MU_CFHINT_PER_USER_FILE	int
)	O
{	O
opool_add_options	function
(	O
pool	pointer
,	O
mu_user_config_options	array
)	O
;	O
opool_add_option	function
(	O
pool	pointer
,	O
&	O
mu_no_config_option	struct
)	O
;	O
}	O
else	O
{	O
struct	O
mu_option	struct
opt	pointer
=	O
mu_no_config_option	struct
;	O
opt	pointer
.	O
opt_flags	int
=	O
MU_OPTION_ALIAS	int
;	O
opool_add_option	function
(	O
pool	pointer
,	O
&	O
opt	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
hints	pointer
->	O
flags	int
&	O
MU_CFHINT_PER_USER_FILE	int
)	O
{	O
struct	O
mu_option	struct
opt	pointer
=	O
mu_no_config_option	struct
;	O
opool_add_options	function
(	O
pool	pointer
,	O
mu_user_config_options	array
)	O
;	O
opt	pointer
.	O
opt_flags	int
=	O
MU_OPTION_ALIAS	int
;	O
opool_add_option	function
(	O
pool	pointer
,	O
&	O
opt	pointer
)	O
;	O
}	O
}	O
mu_list_append	function
(	O
oplist	pointer
,	O
opool_end_option	function
(	O
pool	pointer
)	O
)	O
;	O
}	O
mu_list_append	function
(	O
oplist	pointer
,	O
mu_extra_help_options	array
)	O
;	O
if	O
(	O
hints	pointer
->	O
flags	int
&	O
CONFIG_ENABLED	O
)	O
mu_list_append	function
(	O
oplist	pointer
,	O
mu_config_help_options	array
)	O
;	O
mu_list_count	function
(	O
oplist	pointer
,	O
&	O
s	pointer
)	O
;	O
po	pointer
.	O
po_optv	pointer
=	O
mu_calloc	function
(	O
s	pointer
+	O
1	int
,	O
sizeof	O
(	O
po	pointer
.	O
po_optv	pointer
[	O
0	int
]	O
)	O
)	O
;	O
po	pointer
.	O
po_optc	long
=	O
0	int
;	O
mu_list_foreach	function
(	O
oplist	pointer
,	O
add_opt_group	function
,	O
&	O
po	pointer
)	O
;	O
if	O
(	O
po	pointer
.	O
po_optc	long
!=	O
s	pointer
)	O
abort	function
(	O
)	O
;	O
po	pointer
.	O
po_optv	pointer
[	O
po	pointer
.	O
po_optc	long
]	O
=	O
NULL	O
;	O
mu_list_destroy	function
(	O
&	O
oplist	pointer
)	O
;	O
return	O
po	pointer
.	O
po_optv	pointer
;	O
}	O
static	O
int	O
run_commit	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
mu_cli_capa_commit_fp	pointer
commit	pointer
=	O
item	pointer
;	O
commit	pointer
(	O
data	pointer
)	O
;	O
return	O
0	int
;	O
}	O
void	O
mu_cli_ext	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
struct	O
mu_cli_setup	struct
*	O
setup	pointer
,	O
struct	O
mu_parseopt	struct
*	O
pohint	pointer
,	O
struct	O
mu_cfg_parse_hints	struct
*	O
cfhint	pointer
,	O
char	O
*	O
*	O
capa	pointer
,	O
void	O
*	O
data	pointer
,	O
int	O
*	O
ret_argc	pointer
,	O
char	O
*	O
*	O
*	O
ret_argv	pointer
)	O
{	O
struct	O
mu_parseopt	struct
po	pointer
;	O
int	O
flags	int
=	O
0	int
;	O
struct	O
mu_cfg_tree	struct
*	O
parse_tree	pointer
=	O
NULL	O
;	O
struct	O
mu_cfg_parse_hints	struct
hints	pointer
;	O
struct	O
mu_option	struct
*	O
*	O
optv	pointer
;	O
mu_list_t	pointer
com_list	pointer
;	O
char	O
const	O
*	O
dfl_args	array
[	O
DFLARGC	int
]	O
;	O
char	O
*	O
*	O
args	pointer
=	O
NULL	O
;	O
size_t	long
argcnt	long
;	O
struct	O
app_data	struct
appd	struct
;	O
mu_opool_t	pointer
pool	pointer
;	O
if	O
(	O
setup	pointer
->	O
ex_usage	int
==	O
0	int
)	O
setup	pointer
->	O
ex_usage	int
=	O
EX_USAGE	int
;	O
if	O
(	O
setup	pointer
->	O
ex_config	int
==	O
0	int
)	O
setup	pointer
->	O
ex_config	int
=	O
EX_CONFIG	int
;	O
hints	pointer
=	O
*	O
cfhint	pointer
;	O
if	O
(	O
setup	pointer
->	O
server	int
)	O
hints	pointer
.	O
flags	int
&=	O
~	O
MU_CFHINT_PER_USER_FILE	int
;	O
if	O
(	O
!	O
(	O
hints	pointer
.	O
flags	int
&	O
MU_CFHINT_PROGRAM	int
)	O
)	O
{	O
if	O
(	O
pohint	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_PROG_NAME	int
)	O
hints	pointer
.	O
program	pointer
=	O
(	O
char	O
*	O
)	O
pohint	pointer
->	O
po_prog_name	pointer
;	O
else	O
{	O
mu_set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
hints	pointer
.	O
program	pointer
=	O
(	O
char	O
*	O
)	O
mu_program_name	pointer
;	O
}	O
hints	pointer
.	O
flags	int
|=	O
MU_CFHINT_PROGRAM	int
;	O
}	O
mu_stdstream_setup	function
(	O
MU_STDSTREAM_RESET_NONE	int
)	O
;	O
mu_cli_capa_init	function
(	O
)	O
;	O
if	O
(	O
setup	pointer
->	O
prog_doc	pointer
)	O
{	O
po	pointer
.	O
po_prog_doc	pointer
=	O
setup	pointer
->	O
prog_doc	pointer
;	O
flags	int
|=	O
MU_PARSEOPT_PROG_DOC	int
;	O
}	O
else	O
if	O
(	O
pohint	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_PROG_DOC	int
)	O
{	O
po	pointer
.	O
po_prog_doc	pointer
=	O
pohint	pointer
->	O
po_prog_doc	pointer
;	O
flags	int
|=	O
MU_PARSEOPT_PROG_DOC	int
;	O
}	O
if	O
(	O
setup	pointer
->	O
prog_args	pointer
)	O
{	O
size_t	long
i	long
;	O
argcnt	long
=	O
1	int
;	O
if	O
(	O
setup	pointer
->	O
prog_alt_args	pointer
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
setup	pointer
->	O
prog_alt_args	pointer
[	O
i	long
]	O
;	O
i	long
++	O
)	O
argcnt	long
++	O
;	O
}	O
if	O
(	O
argcnt	long
<	O
DFLARGC	int
)	O
po	pointer
.	O
po_prog_args	pointer
=	O
dfl_args	array
;	O
else	O
{	O
args	pointer
=	O
mu_calloc	function
(	O
argcnt	long
+	O
1	int
,	O
sizeof	O
(	O
args	pointer
[	O
0	int
]	O
)	O
)	O
;	O
po	pointer
.	O
po_prog_args	pointer
=	O
(	O
char	O
const	O
*	O
*	O
)	O
args	pointer
;	O
}	O
po	pointer
.	O
po_prog_args	pointer
[	O
0	int
]	O
=	O
setup	pointer
->	O
prog_args	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argcnt	long
;	O
i	long
++	O
)	O
po	pointer
.	O
po_prog_args	pointer
[	O
i	long
]	O
=	O
setup	pointer
->	O
prog_alt_args	pointer
[	O
i	long
-	O
1	int
]	O
;	O
po	pointer
.	O
po_prog_args	pointer
[	O
i	long
]	O
=	O
NULL	O
;	O
flags	int
|=	O
MU_PARSEOPT_PROG_ARGS	int
;	O
}	O
else	O
if	O
(	O
pohint	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_PROG_ARGS	int
)	O
{	O
po	pointer
.	O
po_prog_args	pointer
=	O
pohint	pointer
->	O
po_prog_args	pointer
;	O
flags	int
|=	O
MU_PARSEOPT_PROG_ARGS	int
;	O
}	O
if	O
(	O
setup	pointer
->	O
prog_extra_doc	pointer
)	O
{	O
po	pointer
.	O
po_help_hook	pointer
=	O
extra_help_hook	function
;	O
flags	int
|=	O
MU_PARSEOPT_HELP_HOOK	int
;	O
}	O
if	O
(	O
setup	pointer
->	O
prog_doc_hook	pointer
)	O
{	O
po	pointer
.	O
po_prog_doc_hook	pointer
=	O
prog_doc_hook	pointer
;	O
flags	int
|=	O
MU_PARSEOPT_PROG_DOC_HOOK	int
;	O
}	O
else	O
if	O
(	O
pohint	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_PROG_DOC_HOOK	int
)	O
{	O
po	pointer
.	O
po_prog_doc_hook	pointer
=	O
pohint	pointer
->	O
po_prog_doc_hook	pointer
;	O
flags	int
|=	O
MU_PARSEOPT_PROG_DOC_HOOK	int
;	O
}	O
if	O
(	O
setup	pointer
->	O
inorder	int
)	O
flags	int
|=	O
MU_PARSEOPT_IN_ORDER	int
;	O
flags	int
|=	O
pohint	pointer
->	O
po_flags	int
&	O
PRESERVE_FLAGS	O
;	O
if	O
(	O
flags	int
&	O
MU_PARSEOPT_PACKAGE_NAME	int
)	O
po	pointer
.	O
po_package_name	pointer
=	O
pohint	pointer
->	O
po_package_name	pointer
;	O
if	O
(	O
flags	int
&	O
MU_PARSEOPT_PACKAGE_URL	int
)	O
po	pointer
.	O
po_package_url	pointer
=	O
pohint	pointer
->	O
po_package_url	pointer
;	O
if	O
(	O
flags	int
&	O
MU_PARSEOPT_BUG_ADDRESS	int
)	O
po	pointer
.	O
po_bug_address	pointer
=	O
pohint	pointer
->	O
po_bug_address	pointer
;	O
if	O
(	O
flags	int
&	O
MU_PARSEOPT_EXTRA_INFO	int
)	O
po	pointer
.	O
po_extra_info	pointer
=	O
pohint	pointer
->	O
po_extra_info	pointer
;	O
if	O
(	O
flags	int
&	O
MU_PARSEOPT_VERSION_HOOK	int
)	O
po	pointer
.	O
po_version_hook	pointer
=	O
pohint	pointer
->	O
po_version_hook	pointer
;	O
if	O
(	O
flags	int
&	O
MU_PARSEOPT_NEGATION	int
)	O
po	pointer
.	O
po_negation	pointer
=	O
pohint	pointer
->	O
po_negation	pointer
;	O
if	O
(	O
flags	int
&	O
MU_PARSEOPT_PROG_NAME	int
)	O
po	pointer
.	O
po_prog_name	pointer
=	O
pohint	pointer
->	O
po_prog_name	pointer
;	O
appd	struct
.	O
setup	pointer
=	O
setup	pointer
;	O
appd	struct
.	O
hints	pointer
=	O
&	O
hints	pointer
;	O
appd	struct
.	O
append_tree	pointer
=	O
NULL	O
;	O
appd	struct
.	O
lint	int
=	O
0	int
;	O
po	pointer
.	O
po_data	pointer
=	O
&	O
appd	struct
;	O
flags	int
|=	O
MU_PARSEOPT_DATA	int
;	O
po	pointer
.	O
po_exit_error	int
=	O
setup	pointer
->	O
ex_usage	int
;	O
mu_opool_create	function
(	O
&	O
pool	pointer
,	O
MU_OPOOL_ENOMEMABRT	int
)	O
;	O
optv	pointer
=	O
init_options	function
(	O
pool	pointer
,	O
capa	pointer
,	O
setup	pointer
,	O
&	O
hints	pointer
,	O
&	O
com_list	pointer
)	O
;	O
if	O
(	O
mu_parseopt	struct
(	O
&	O
po	pointer
,	O
argc	int
,	O
argv	pointer
,	O
optv	pointer
,	O
flags	int
)	O
)	O
exit	function
(	O
po	pointer
.	O
po_exit_error	int
)	O
;	O
argc	int
-=	O
po	pointer
.	O
po_arg_start	int
;	O
argv	pointer
+=	O
po	pointer
.	O
po_arg_start	int
;	O
if	O
(	O
ret_argc	pointer
)	O
{	O
*	O
ret_argc	pointer
=	O
argc	int
;	O
*	O
ret_argv	pointer
=	O
argv	pointer
;	O
}	O
else	O
if	O
(	O
argc	int
)	O
mu_parseopt_error	function
(	O
&	O
po	pointer
,	O
"%s"	pointer
,	O
_	O
(	O
"unexpected arguments"	pointer
)	O
)	O
;	O
if	O
(	O
(	O
hints	pointer
.	O
flags	int
&	O
MU_CFHINT_SITE_FILE	int
)	O
&&	O
strcmp	function
(	O
hints	pointer
.	O
site_file	pointer
,	O
MU_SITE_CONFIG_FILE	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
access	function
(	O
MU_LEGACY_CONFIG_FILE	O
,	O
F_OK	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
access	function
(	O
hints	pointer
.	O
site_file	pointer
,	O
F_OK	int
)	O
==	O
0	int
)	O
{	O
mu_diag_output	function
(	O
MU_DIAG_WARNING	O
,	O
_	O
(	O
"legacy configuration file %s ignored"	pointer
)	O
,	O
MU_LEGACY_CONFIG_FILE	O
)	O
;	O
}	O
else	O
{	O
mu_diag_output	function
(	O
MU_DIAG_WARNING	O
,	O
_	O
(	O
"using legacy configuration file %s: please rename it to %s"	pointer
)	O
,	O
MU_LEGACY_CONFIG_FILE	O
,	O
MU_SITE_CONFIG_FILE	O
)	O
;	O
hints	pointer
.	O
site_file	pointer
=	O
MU_LEGACY_CONFIG_FILE	O
;	O
}	O
}	O
}	O
if	O
(	O
mu_cfg_parse_config	function
(	O
&	O
parse_tree	pointer
,	O
&	O
hints	pointer
)	O
)	O
exit	function
(	O
setup	pointer
->	O
ex_config	int
)	O
;	O
if	O
(	O
appd	struct
.	O
append_tree	pointer
)	O
mu_cfg_tree_union	function
(	O
&	O
parse_tree	pointer
,	O
&	O
appd	struct
.	O
append_tree	pointer
)	O
;	O
if	O
(	O
mu_cfg_tree_reduce	function
(	O
parse_tree	pointer
,	O
&	O
hints	pointer
,	O
setup	pointer
->	O
cfg	pointer
,	O
data	pointer
)	O
)	O
exit	function
(	O
setup	pointer
->	O
ex_config	int
)	O
;	O
if	O
(	O
mu_cfg_error_count	long
)	O
exit	function
(	O
setup	pointer
->	O
ex_config	int
)	O
;	O
mu_parseopt_apply	function
(	O
&	O
po	pointer
)	O
;	O
mu_list_foreach	function
(	O
com_list	pointer
,	O
run_commit	function
,	O
NULL	O
)	O
;	O
mu_list_destroy	function
(	O
&	O
com_list	pointer
)	O
;	O
mu_cfg_destroy_tree	function
(	O
&	O
parse_tree	pointer
)	O
;	O
free	function
(	O
optv	pointer
)	O
;	O
free	function
(	O
args	pointer
)	O
;	O
mu_parseopt_free	function
(	O
&	O
po	pointer
)	O
;	O
mu_opool_destroy	function
(	O
&	O
pool	pointer
)	O
;	O
if	O
(	O
appd	struct
.	O
lint	int
)	O
exit	function
(	O
0	int
)	O
;	O
}	O
void	O
mu_cli	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
struct	O
mu_cli_setup	struct
*	O
setup	pointer
,	O
char	O
*	O
*	O
capa	pointer
,	O
void	O
*	O
data	pointer
,	O
int	O
*	O
ret_argc	pointer
,	O
char	O
*	O
*	O
*	O
ret_argv	pointer
)	O
{	O
struct	O
mu_parseopt	struct
pohint	pointer
;	O
struct	O
mu_cfg_parse_hints	struct
cfhint	pointer
;	O
pohint	pointer
.	O
po_flags	int
=	O
0	int
;	O
pohint	pointer
.	O
po_package_name	pointer
=	O
PACKAGE_NAME	pointer
;	O
pohint	pointer
.	O
po_flags	int
|=	O
MU_PARSEOPT_PACKAGE_NAME	int
;	O
pohint	pointer
.	O
po_package_url	pointer
=	O
PACKAGE_URL	pointer
;	O
pohint	pointer
.	O
po_flags	int
|=	O
MU_PARSEOPT_PACKAGE_URL	int
;	O
pohint	pointer
.	O
po_bug_address	pointer
=	O
PACKAGE_BUGREPORT	pointer
;	O
pohint	pointer
.	O
po_flags	int
|=	O
MU_PARSEOPT_BUG_ADDRESS	int
;	O
pohint	pointer
.	O
po_extra_info	pointer
=	O
mu_general_help_text	array
;	O
pohint	pointer
.	O
po_flags	int
|=	O
MU_PARSEOPT_EXTRA_INFO	int
;	O
pohint	pointer
.	O
po_version_hook	pointer
=	O
mu_version_hook	function
;	O
pohint	pointer
.	O
po_flags	int
|=	O
MU_PARSEOPT_VERSION_HOOK	int
;	O
pohint	pointer
.	O
po_negation	pointer
=	O
"no-"	pointer
;	O
pohint	pointer
.	O
po_flags	int
|=	O
MU_PARSEOPT_NEGATION	int
;	O
cfhint	pointer
.	O
site_file	pointer
=	O
mu_site_config_file	function
(	O
)	O
;	O
cfhint	pointer
.	O
flags	int
=	O
MU_CFHINT_SITE_FILE	int
|	O
MU_CFHINT_PER_USER_FILE	int
;	O
mu_cli_ext	function
(	O
argc	int
,	O
argv	pointer
,	O
setup	pointer
,	O
&	O
pohint	pointer
,	O
&	O
cfhint	pointer
,	O
capa	pointer
,	O
data	pointer
,	O
ret_argc	pointer
,	O
ret_argv	pointer
)	O
;	O
}	O
