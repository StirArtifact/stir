static	O
int	O
cod_RZ	function
(	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_vector	struct
*	O
tau	double
)	O
;	O
static	O
double	O
cod_householder_transform	function
(	O
double	O
*	O
alpha	long double
,	O
gsl_vector	struct
*	O
v	pointer
)	O
;	O
static	O
int	O
cod_householder_mh	function
(	O
const	O
double	O
tau	double
,	O
const	O
gsl_vector	struct
*	O
v	pointer
,	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_vector	struct
*	O
work	pointer
)	O
;	O
static	O
int	O
cod_householder_hv	function
(	O
const	O
double	O
tau	double
,	O
const	O
gsl_vector	struct
*	O
v	pointer
,	O
gsl_vector	struct
*	O
w	pointer
)	O
;	O
static	O
int	O
cod_householder_Zvec	function
(	O
const	O
gsl_matrix	struct
*	O
QRZT	pointer
,	O
const	O
gsl_vector	struct
*	O
tau_Z	pointer
,	O
const	O
size_t	long
rank	long
,	O
gsl_vector	struct
*	O
v	pointer
)	O
;	O
static	O
int	O
cod_trireg_solve	function
(	O
const	O
gsl_matrix	struct
*	O
R	pointer
,	O
const	O
double	O
lambda	double
,	O
const	O
gsl_vector	struct
*	O
b	double
,	O
gsl_matrix	struct
*	O
S	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
work	pointer
)	O
;	O
int	O
gsl_linalg_COD_decomp_e	function
(	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_vector	struct
*	O
tau_Q	pointer
,	O
gsl_vector	struct
*	O
tau_Z	pointer
,	O
gsl_permutation	struct
*	O
p	int
,	O
double	O
tol	double
,	O
size_t	long
*	O
rank	long
,	O
gsl_vector	struct
*	O
work	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
tau_Q	pointer
->	O
size	long
!=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"size of tau_Q must be MIN(M,N)"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
tau_Z	pointer
->	O
size	long
!=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"size of tau_Z must be MIN(M,N)"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
p	int
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"permutation size must be N"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
work	pointer
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"work size must be N"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
,	O
signum	pointer
;	O
size_t	long
r	pointer
;	O
status	int
=	O
gsl_linalg_QRPT_decomp	function
(	O
A	pointer
,	O
tau_Q	pointer
,	O
p	int
,	O
&	O
signum	pointer
,	O
work	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
r	pointer
=	O
gsl_linalg_QRPT_rank	function
(	O
A	pointer
,	O
tol	double
)	O
;	O
if	O
(	O
r	pointer
<	O
N	int
)	O
{	O
gsl_matrix_view	struct
R_upper	struct
=	O
gsl_matrix_submatrix	function
(	O
A	pointer
,	O
0	int
,	O
0	int
,	O
r	pointer
,	O
N	int
)	O
;	O
gsl_vector_view	struct
t	double
=	O
gsl_vector_subvector	function
(	O
tau_Z	pointer
,	O
0	int
,	O
r	pointer
)	O
;	O
cod_RZ	function
(	O
&	O
R_upper	struct
.	O
matrix	struct
,	O
&	O
t	double
.	O
vector	struct
)	O
;	O
}	O
*	O
rank	long
=	O
r	pointer
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_COD_decomp	function
(	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_vector	struct
*	O
tau_Q	pointer
,	O
gsl_vector	struct
*	O
tau_Z	pointer
,	O
gsl_permutation	struct
*	O
p	int
,	O
size_t	long
*	O
rank	long
,	O
gsl_vector	struct
*	O
work	pointer
)	O
{	O
return	O
gsl_linalg_COD_decomp_e	function
(	O
A	pointer
,	O
tau_Q	pointer
,	O
tau_Z	pointer
,	O
p	int
,	O
-	O
1.0	int
,	O
rank	long
,	O
work	pointer
)	O
;	O
}	O
int	O
gsl_linalg_COD_lssolve	function
(	O
const	O
gsl_matrix	struct
*	O
QRZT	pointer
,	O
const	O
gsl_vector	struct
*	O
tau_Q	pointer
,	O
const	O
gsl_vector	struct
*	O
tau_Z	pointer
,	O
const	O
gsl_permutation	struct
*	O
perm	pointer
,	O
const	O
size_t	long
rank	long
,	O
const	O
gsl_vector	struct
*	O
b	double
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
residual	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
QRZT	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
QRZT	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
<	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"QRZT matrix must have M>=N"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
M	int
!=	O
b	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match b size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
rank	long
>	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"rank must be <= MIN(M,N)"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
M	int
!=	O
residual	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match residual size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_matrix_const_view	struct
R11	struct
=	O
gsl_matrix_const_submatrix	function
(	O
QRZT	pointer
,	O
0	int
,	O
0	int
,	O
rank	long
,	O
rank	long
)	O
;	O
gsl_vector_view	struct
QTb1	struct
=	O
gsl_vector_subvector	function
(	O
residual	pointer
,	O
0	int
,	O
rank	long
)	O
;	O
gsl_vector_view	struct
x1	double
=	O
gsl_vector_subvector	function
(	O
x	double
,	O
0	int
,	O
rank	long
)	O
;	O
gsl_vector_set_zero	function
(	O
x	double
)	O
;	O
gsl_vector_memcpy	function
(	O
residual	pointer
,	O
b	double
)	O
;	O
gsl_linalg_QR_QTvec	function
(	O
QRZT	pointer
,	O
tau_Q	pointer
,	O
residual	pointer
)	O
;	O
gsl_vector_memcpy	function
(	O
&	O
(	O
x1	double
.	O
vector	struct
)	O
,	O
&	O
(	O
QTb1	struct
.	O
vector	struct
)	O
)	O
;	O
gsl_blas_dtrsv	function
(	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
&	O
(	O
R11	struct
.	O
matrix	struct
)	O
,	O
&	O
(	O
x1	double
.	O
vector	struct
)	O
)	O
;	O
cod_householder_Zvec	function
(	O
QRZT	pointer
,	O
tau_Z	pointer
,	O
rank	long
,	O
x	double
)	O
;	O
gsl_permute_vector_inverse	function
(	O
perm	pointer
,	O
x	double
)	O
;	O
gsl_vector_set_zero	function
(	O
&	O
(	O
QTb1	struct
.	O
vector	struct
)	O
)	O
;	O
gsl_linalg_QR_Qvec	function
(	O
QRZT	pointer
,	O
tau_Q	pointer
,	O
residual	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_COD_lssolve2	function
(	O
const	O
double	O
lambda	double
,	O
const	O
gsl_matrix	struct
*	O
QRZT	pointer
,	O
const	O
gsl_vector	struct
*	O
tau_Q	pointer
,	O
const	O
gsl_vector	struct
*	O
tau_Z	pointer
,	O
const	O
gsl_permutation	struct
*	O
perm	pointer
,	O
const	O
size_t	long
rank	long
,	O
const	O
gsl_vector	struct
*	O
b	double
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
residual	pointer
,	O
gsl_matrix	struct
*	O
S	pointer
,	O
gsl_vector	struct
*	O
work	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
QRZT	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
QRZT	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
<	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"QRZT matrix must have M>=N"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
M	int
!=	O
b	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match b size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
rank	long
>	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"rank must be <= MIN(M,N)"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
M	int
!=	O
residual	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match residual size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
S	pointer
->	O
size1	long
!=	O
rank	long
||	O
S	pointer
->	O
size2	long
!=	O
rank	long
)	O
{	O
GSL_ERROR	O
(	O
"S must be rank-by-rank"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
work	pointer
->	O
size	long
!=	O
rank	long
)	O
{	O
GSL_ERROR	O
(	O
"work must be length rank"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_matrix_const_view	struct
R11	struct
=	O
gsl_matrix_const_submatrix	function
(	O
QRZT	pointer
,	O
0	int
,	O
0	int
,	O
rank	long
,	O
rank	long
)	O
;	O
gsl_vector_view	struct
c1	double
=	O
gsl_vector_subvector	function
(	O
residual	pointer
,	O
0	int
,	O
rank	long
)	O
;	O
gsl_vector_view	struct
y1	function
=	O
gsl_vector_subvector	function
(	O
x	double
,	O
0	int
,	O
rank	long
)	O
;	O
gsl_vector_set_zero	function
(	O
x	double
)	O
;	O
gsl_vector_memcpy	function
(	O
residual	pointer
,	O
b	double
)	O
;	O
gsl_linalg_QR_QTvec	function
(	O
QRZT	pointer
,	O
tau_Q	pointer
,	O
residual	pointer
)	O
;	O
cod_trireg_solve	function
(	O
&	O
(	O
R11	struct
.	O
matrix	struct
)	O
,	O
lambda	double
,	O
&	O
(	O
c1	double
.	O
vector	struct
)	O
,	O
S	pointer
,	O
&	O
(	O
y1	function
.	O
vector	struct
)	O
,	O
work	pointer
)	O
;	O
gsl_vector_memcpy	function
(	O
work	pointer
,	O
&	O
(	O
y1	function
.	O
vector	struct
)	O
)	O
;	O
cod_householder_Zvec	function
(	O
QRZT	pointer
,	O
tau_Z	pointer
,	O
rank	long
,	O
x	double
)	O
;	O
gsl_permute_vector_inverse	function
(	O
perm	pointer
,	O
x	double
)	O
;	O
gsl_blas_dtrmv	function
(	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
&	O
(	O
R11	struct
.	O
matrix	struct
)	O
,	O
work	pointer
)	O
;	O
gsl_vector_sub	function
(	O
&	O
(	O
c1	double
.	O
vector	struct
)	O
,	O
work	pointer
)	O
;	O
gsl_linalg_QR_Qvec	function
(	O
QRZT	pointer
,	O
tau_Q	pointer
,	O
residual	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_COD_unpack	function
(	O
const	O
gsl_matrix	struct
*	O
QRZT	pointer
,	O
const	O
gsl_vector	struct
*	O
tau_Q	pointer
,	O
const	O
gsl_vector	struct
*	O
tau_Z	pointer
,	O
const	O
size_t	long
rank	long
,	O
gsl_matrix	struct
*	O
Q	pointer
,	O
gsl_matrix	struct
*	O
R	pointer
,	O
gsl_matrix	struct
*	O
Z	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
QRZT	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
QRZT	pointer
->	O
size2	long
;	O
if	O
(	O
tau_Q	pointer
->	O
size	long
!=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"size of tau_Q must be MIN(M,N)"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
tau_Z	pointer
->	O
size	long
!=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"size of tau_Z must be MIN(M,N)"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
rank	long
>	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"rank must be <= MIN(M,N)"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
Q	pointer
->	O
size1	long
!=	O
M	int
||	O
Q	pointer
->	O
size2	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"Q must by M-by-M"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
R	pointer
->	O
size1	long
!=	O
M	int
||	O
R	pointer
->	O
size2	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"R must by M-by-N"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
Z	pointer
->	O
size1	long
!=	O
N	int
||	O
Z	pointer
->	O
size2	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"Z must by N-by-N"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
gsl_matrix_view	struct
R11	struct
=	O
gsl_matrix_submatrix	function
(	O
R	pointer
,	O
0	int
,	O
0	int
,	O
rank	long
,	O
rank	long
)	O
;	O
gsl_matrix_const_view	struct
QRZT11	struct
=	O
gsl_matrix_const_submatrix	function
(	O
QRZT	pointer
,	O
0	int
,	O
0	int
,	O
rank	long
,	O
rank	long
)	O
;	O
gsl_matrix_set_identity	function
(	O
Q	pointer
)	O
;	O
for	O
(	O
i	long
=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
;	O
i	long
--	O
>	O
0	int
;	O
)	O
{	O
gsl_vector_const_view	struct
h	pointer
=	O
gsl_matrix_const_subcolumn	function
(	O
QRZT	pointer
,	O
i	long
,	O
i	long
,	O
M	int
-	O
i	long
)	O
;	O
gsl_matrix_view	struct
m	pointer
=	O
gsl_matrix_submatrix	function
(	O
Q	pointer
,	O
i	long
,	O
i	long
,	O
M	int
-	O
i	long
,	O
M	int
-	O
i	long
)	O
;	O
gsl_vector_view	struct
work	pointer
=	O
gsl_matrix_subcolumn	function
(	O
R	pointer
,	O
0	int
,	O
0	int
,	O
M	int
-	O
i	long
)	O
;	O
double	O
ti	double
=	O
gsl_vector_get	function
(	O
tau_Q	pointer
,	O
i	long
)	O
;	O
gsl_linalg_householder_left	function
(	O
ti	double
,	O
&	O
h	pointer
.	O
vector	struct
,	O
&	O
m	pointer
.	O
matrix	struct
,	O
&	O
work	pointer
.	O
vector	struct
)	O
;	O
}	O
gsl_matrix_set_identity	function
(	O
Z	pointer
)	O
;	O
if	O
(	O
rank	long
<	O
N	int
)	O
{	O
gsl_vector_view	struct
work	pointer
=	O
gsl_matrix_row	function
(	O
R	pointer
,	O
0	int
)	O
;	O
gsl_linalg_COD_matZ	function
(	O
QRZT	pointer
,	O
tau_Z	pointer
,	O
rank	long
,	O
Z	pointer
,	O
&	O
work	pointer
.	O
vector	struct
)	O
;	O
}	O
gsl_matrix_set_zero	function
(	O
R	pointer
)	O
;	O
gsl_matrix_tricpy	function
(	O
CblasUpper	int
,	O
CblasNonUnit	int
,	O
&	O
R11	struct
.	O
matrix	struct
,	O
&	O
QRZT11	struct
.	O
matrix	struct
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_COD_matZ	function
(	O
const	O
gsl_matrix	struct
*	O
QRZT	pointer
,	O
const	O
gsl_vector	struct
*	O
tau_Z	pointer
,	O
const	O
size_t	long
rank	long
,	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_vector	struct
*	O
work	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
tau_Z	pointer
->	O
size	long
!=	O
GSL_MIN	O
(	O
QRZT	pointer
->	O
size1	long
,	O
QRZT	pointer
->	O
size2	long
)	O
)	O
{	O
GSL_ERROR	O
(	O
"tau_Z must be GSL_MIN(M,N)"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
QRZT	pointer
->	O
size2	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"QRZT must have N columns"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
work	pointer
->	O
size	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"workspace must be length M"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
rank	long
<	O
N	int
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
rank	long
;	O
i	long
>	O
0	int
&&	O
i	long
--	O
;	O
)	O
{	O
gsl_vector_const_view	struct
h	pointer
=	O
gsl_matrix_const_subrow	function
(	O
QRZT	pointer
,	O
i	long
,	O
rank	long
,	O
N	int
-	O
rank	long
)	O
;	O
gsl_matrix_view	struct
m	pointer
=	O
gsl_matrix_submatrix	function
(	O
A	pointer
,	O
0	int
,	O
i	long
,	O
M	int
,	O
N	int
-	O
i	long
)	O
;	O
double	O
ti	double
=	O
gsl_vector_get	function
(	O
tau_Z	pointer
,	O
i	long
)	O
;	O
cod_householder_mh	function
(	O
ti	double
,	O
&	O
h	pointer
.	O
vector	struct
,	O
&	O
m	pointer
.	O
matrix	struct
,	O
work	pointer
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
cod_RZ	function
(	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_vector	struct
*	O
tau	double
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
tau	double
->	O
size	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"tau has wrong size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
<	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"N must be >= M"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
else	O
if	O
(	O
M	int
==	O
N	int
)	O
{	O
gsl_vector_set_all	function
(	O
tau	double
,	O
0.0	int
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
size_t	long
k	long
;	O
for	O
(	O
k	long
=	O
M	int
;	O
k	long
>	O
0	int
&&	O
k	long
--	O
;	O
)	O
{	O
double	O
*	O
alpha	long double
=	O
gsl_matrix_ptr	function
(	O
A	pointer
,	O
k	long
,	O
k	long
)	O
;	O
gsl_vector_view	struct
z	double
=	O
gsl_matrix_subrow	function
(	O
A	pointer
,	O
k	long
,	O
M	int
,	O
N	int
-	O
M	int
)	O
;	O
double	O
tauk	double
;	O
tauk	double
=	O
cod_householder_transform	function
(	O
alpha	long double
,	O
&	O
z	double
.	O
vector	struct
)	O
;	O
gsl_vector_set	function
(	O
tau	double
,	O
k	long
,	O
tauk	double
)	O
;	O
if	O
(	O
(	O
tauk	double
!=	O
0	int
)	O
&&	O
(	O
k	long
>	O
0	int
)	O
)	O
{	O
gsl_vector_view	struct
w	pointer
=	O
gsl_vector_subvector	function
(	O
tau	double
,	O
0	int
,	O
k	long
)	O
;	O
gsl_matrix_view	struct
B	pointer
=	O
gsl_matrix_submatrix	function
(	O
A	pointer
,	O
0	int
,	O
k	long
,	O
k	long
,	O
N	int
-	O
k	long
)	O
;	O
cod_householder_mh	function
(	O
tauk	double
,	O
&	O
z	double
.	O
vector	struct
,	O
&	O
B	pointer
.	O
matrix	struct
,	O
&	O
w	pointer
.	O
vector	struct
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
double	O
cod_householder_transform	function
(	O
double	O
*	O
alpha	long double
,	O
gsl_vector	struct
*	O
v	pointer
)	O
{	O
double	O
beta	long double
,	O
tau	double
;	O
double	O
xnorm	double
=	O
gsl_blas_dnrm2	function
(	O
v	pointer
)	O
;	O
if	O
(	O
xnorm	double
==	O
0	int
)	O
{	O
return	O
0.0	int
;	O
}	O
beta	long double
=	O
-	O
(	O
*	O
alpha	long double
>=	O
0.0	int
?	O
+	O
1.0	int
:	O
-	O
1.0	int
)	O
*	O
gsl_hypot	function
(	O
*	O
alpha	long double
,	O
xnorm	double
)	O
;	O
tau	double
=	O
(	O
beta	long double
-	O
*	O
alpha	long double
)	O
/	O
beta	long double
;	O
{	O
double	O
s	pointer
=	O
(	O
*	O
alpha	long double
-	O
beta	long double
)	O
;	O
if	O
(	O
fabs	function
(	O
s	pointer
)	O
>	O
GSL_DBL_MIN	int
)	O
{	O
gsl_blas_dscal	function
(	O
1.0	int
/	O
s	pointer
,	O
v	pointer
)	O
;	O
}	O
else	O
{	O
gsl_blas_dscal	function
(	O
GSL_DBL_EPSILON	int
/	O
s	pointer
,	O
v	pointer
)	O
;	O
gsl_blas_dscal	function
(	O
1.0	int
/	O
GSL_DBL_EPSILON	int
,	O
v	pointer
)	O
;	O
}	O
*	O
alpha	long double
=	O
beta	long double
;	O
}	O
return	O
tau	double
;	O
}	O
static	O
int	O
cod_householder_hv	function
(	O
const	O
double	O
tau	double
,	O
const	O
gsl_vector	struct
*	O
v	pointer
,	O
gsl_vector	struct
*	O
w	pointer
)	O
{	O
if	O
(	O
tau	double
==	O
0	int
)	O
{	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
const	O
size_t	long
M	int
=	O
w	pointer
->	O
size	long
;	O
const	O
size_t	long
L	pointer
=	O
v	pointer
->	O
size	long
;	O
double	O
w0	double
=	O
gsl_vector_get	function
(	O
w	pointer
,	O
0	int
)	O
;	O
gsl_vector_view	struct
w1	struct
=	O
gsl_vector_subvector	function
(	O
w	pointer
,	O
M	int
-	O
L	pointer
,	O
L	pointer
)	O
;	O
double	O
d1	pointer
,	O
d	double
;	O
gsl_blas_ddot	function
(	O
v	pointer
,	O
&	O
w1	struct
.	O
vector	struct
,	O
&	O
d1	pointer
)	O
;	O
d	double
=	O
w0	double
+	O
d1	pointer
;	O
gsl_vector_set	function
(	O
w	pointer
,	O
0	int
,	O
w0	double
-	O
tau	double
*	O
d	double
)	O
;	O
gsl_blas_daxpy	function
(	O
-	O
tau	double
*	O
d	double
,	O
v	pointer
,	O
&	O
w1	struct
.	O
vector	struct
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
cod_householder_mh	function
(	O
const	O
double	O
tau	double
,	O
const	O
gsl_vector	struct
*	O
v	pointer
,	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_vector	struct
*	O
work	pointer
)	O
{	O
if	O
(	O
tau	double
==	O
0	int
)	O
{	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
const	O
size_t	long
L	pointer
=	O
v	pointer
->	O
size	long
;	O
gsl_vector_view	struct
A1	struct
=	O
gsl_matrix_subcolumn	function
(	O
A	pointer
,	O
0	int
,	O
0	int
,	O
M	int
)	O
;	O
gsl_matrix_view	struct
C	pointer
=	O
gsl_matrix_submatrix	function
(	O
A	pointer
,	O
0	int
,	O
N	int
-	O
L	pointer
,	O
M	int
,	O
L	pointer
)	O
;	O
gsl_vector_memcpy	function
(	O
work	pointer
,	O
&	O
A1	struct
.	O
vector	struct
)	O
;	O
gsl_blas_dgemv	function
(	O
CblasNoTrans	int
,	O
1.0	int
,	O
&	O
C	pointer
.	O
matrix	struct
,	O
v	pointer
,	O
1.0	int
,	O
work	pointer
)	O
;	O
gsl_blas_daxpy	function
(	O
-	O
tau	double
,	O
work	pointer
,	O
&	O
A1	struct
.	O
vector	struct
)	O
;	O
gsl_blas_dger	function
(	O
-	O
tau	double
,	O
work	pointer
,	O
v	pointer
,	O
&	O
C	pointer
.	O
matrix	struct
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
cod_householder_Zvec	function
(	O
const	O
gsl_matrix	struct
*	O
QRZT	pointer
,	O
const	O
gsl_vector	struct
*	O
tau_Z	pointer
,	O
const	O
size_t	long
rank	long
,	O
gsl_vector	struct
*	O
v	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
QRZT	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
QRZT	pointer
->	O
size2	long
;	O
if	O
(	O
tau_Z	pointer
->	O
size	long
!=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"tau_Z must be GSL_MIN(M,N)"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
v	pointer
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"v must be length N"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
rank	long
<	O
N	int
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rank	long
;	O
++	O
i	long
)	O
{	O
gsl_vector_const_view	struct
h	pointer
=	O
gsl_matrix_const_subrow	function
(	O
QRZT	pointer
,	O
i	long
,	O
rank	long
,	O
N	int
-	O
rank	long
)	O
;	O
gsl_vector_view	struct
w	pointer
=	O
gsl_vector_subvector	function
(	O
v	pointer
,	O
i	long
,	O
N	int
-	O
i	long
)	O
;	O
double	O
ti	double
=	O
gsl_vector_get	function
(	O
tau_Z	pointer
,	O
i	long
)	O
;	O
cod_householder_hv	function
(	O
ti	double
,	O
&	O
h	pointer
.	O
vector	struct
,	O
&	O
w	pointer
.	O
vector	struct
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
cod_trireg_solve	function
(	O
const	O
gsl_matrix	struct
*	O
R	pointer
,	O
const	O
double	O
lambda	double
,	O
const	O
gsl_vector	struct
*	O
b	double
,	O
gsl_matrix	struct
*	O
S	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
work	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
R	pointer
->	O
size2	long
;	O
gsl_vector_const_view	struct
diag	pointer
=	O
gsl_matrix_const_diagonal	function
(	O
R	pointer
)	O
;	O
size_t	long
i	long
,	O
j	long
,	O
k	long
;	O
if	O
(	O
lambda	double
<=	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"lambda must be positive"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
gsl_matrix_transpose_tricpy	function
(	O
CblasUpper	int
,	O
CblasUnit	int
,	O
S	pointer
,	O
R	pointer
)	O
;	O
gsl_vector_memcpy	function
(	O
work	pointer
,	O
&	O
diag	pointer
.	O
vector	struct
)	O
;	O
gsl_vector_memcpy	function
(	O
x	double
,	O
b	double
)	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
N	int
;	O
j	long
++	O
)	O
{	O
double	O
bj	double
=	O
0.0	int
;	O
gsl_matrix_set	function
(	O
S	pointer
,	O
j	long
,	O
j	long
,	O
lambda	double
)	O
;	O
for	O
(	O
k	long
=	O
j	long
+	O
1	int
;	O
k	long
<	O
N	int
;	O
k	long
++	O
)	O
{	O
gsl_matrix_set	function
(	O
S	pointer
,	O
k	long
,	O
k	long
,	O
0.0	int
)	O
;	O
}	O
for	O
(	O
k	long
=	O
j	long
;	O
k	long
<	O
N	int
;	O
k	long
++	O
)	O
{	O
double	O
sine	double
,	O
cosine	double
;	O
double	O
xk	double
=	O
gsl_vector_get	function
(	O
x	double
,	O
k	long
)	O
;	O
double	O
rkk	double
=	O
gsl_vector_get	function
(	O
work	pointer
,	O
k	long
)	O
;	O
double	O
skk	double
=	O
gsl_matrix_get	function
(	O
S	pointer
,	O
k	long
,	O
k	long
)	O
;	O
if	O
(	O
skk	double
==	O
0	int
)	O
{	O
continue	O
;	O
}	O
if	O
(	O
fabs	function
(	O
rkk	double
)	O
<	O
fabs	function
(	O
skk	double
)	O
)	O
{	O
double	O
cotangent	double
=	O
rkk	double
/	O
skk	double
;	O
sine	double
=	O
0.5	int
/	O
sqrt	function
(	O
0.25	int
+	O
0.25	int
*	O
cotangent	double
*	O
cotangent	double
)	O
;	O
cosine	double
=	O
sine	double
*	O
cotangent	double
;	O
}	O
else	O
{	O
double	O
tangent	double
=	O
skk	double
/	O
rkk	double
;	O
cosine	double
=	O
0.5	int
/	O
sqrt	function
(	O
0.25	int
+	O
0.25	int
*	O
tangent	double
*	O
tangent	double
)	O
;	O
sine	double
=	O
cosine	double
*	O
tangent	double
;	O
}	O
{	O
double	O
new_rkk	double
=	O
cosine	double
*	O
rkk	double
+	O
sine	double
*	O
skk	double
;	O
double	O
new_xk	double
=	O
cosine	double
*	O
xk	double
+	O
sine	double
*	O
bj	double
;	O
bj	double
=	O
-	O
sine	double
*	O
xk	double
+	O
cosine	double
*	O
bj	double
;	O
gsl_vector_set	function
(	O
work	pointer
,	O
k	long
,	O
new_rkk	double
)	O
;	O
gsl_matrix_set	function
(	O
S	pointer
,	O
k	long
,	O
k	long
,	O
new_rkk	double
)	O
;	O
gsl_vector_set	function
(	O
x	double
,	O
k	long
,	O
new_xk	double
)	O
;	O
}	O
for	O
(	O
i	long
=	O
k	long
+	O
1	int
;	O
i	long
<	O
N	int
;	O
i	long
++	O
)	O
{	O
double	O
sik	double
=	O
gsl_matrix_get	function
(	O
S	pointer
,	O
i	long
,	O
k	long
)	O
;	O
double	O
sii	double
=	O
gsl_matrix_get	function
(	O
S	pointer
,	O
i	long
,	O
i	long
)	O
;	O
double	O
new_sik	double
=	O
cosine	double
*	O
sik	double
+	O
sine	double
*	O
sii	double
;	O
double	O
new_sii	double
=	O
-	O
sine	double
*	O
sik	double
+	O
cosine	double
*	O
sii	double
;	O
gsl_matrix_set	function
(	O
S	pointer
,	O
i	long
,	O
k	long
,	O
new_sik	double
)	O
;	O
gsl_matrix_set	function
(	O
S	pointer
,	O
i	long
,	O
i	long
,	O
new_sii	double
)	O
;	O
}	O
}	O
}	O
gsl_blas_dtrsv	function
(	O
CblasLower	int
,	O
CblasTrans	int
,	O
CblasNonUnit	int
,	O
S	pointer
,	O
x	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
