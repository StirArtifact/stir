char	O
*	O
colors	int
[	O
]	O
=	O
{	O
"black"	pointer
,	O
"red"	pointer
,	O
"yellow"	pointer
,	O
"green"	pointer
,	O
"cyan"	pointer
,	O
"blue"	pointer
,	O
"magenta"	pointer
,	O
"white"	pointer
}	O
;	O
extern	O
VPolygon	struct
*	O
ScalePolygon	function
(	O
VPolygon	struct
*	O
in	pointer
,	O
VPoint	struct
*	O
origin	pointer
,	O
VPoint	struct
*	O
scale	int
,	O
VPoint	struct
*	O
,	O
double	O
)	O
;	O
extern	O
VObject	struct
*	O
VExtrudeObject	function
(	O
VObject	struct
*	O
obj	pointer
,	O
VPoint	struct
*	O
e	pointer
)	O
;	O
VObject	struct
*	O
bobject	array
[	O
BOBJECT_MAX	int
]	O
;	O
int	O
btop	int
=	O
0	int
;	O
int	O
lineno	int
=	O
0	int
;	O
enum	O
_token_id	enum
{	O
DXF_NULL	int
,	O
DXF_EOF	int
,	O
DXF_X_COORD	int
,	O
DXF_Y_COORD	int
,	O
DXF_Z_COORD	int
,	O
DXF_X_SCALE	int
,	O
DXF_Y_SCALE	int
,	O
DXF_Z_SCALE	int
,	O
DXF_ROTATE	int
,	O
DXF_SECTION	int
,	O
DXF_ENDSEC	int
,	O
DXF_SEQEND	int
,	O
DXF_TITLE	int
,	O
DXF_POLYLINE	int
,	O
DXF_3DFACE	int
,	O
DXF_ENTITIES	int
,	O
DXF_VERTEX	int
,	O
DXF_BLOCKS	int
,	O
DXF_INSERT	int
,	O
DXF_X_EXTRUDE	int
,	O
DXF_Y_EXTRUDE	int
,	O
DXF_Z_EXTRUDE	int
,	O
DXF_M_COUNT	int
,	O
DXF_N_COUNT	int
,	O
DXF_THIRD_VERTEX	int
,	O
DXF_FOURTH_VERTEX	int
,	O
DXF_FLAGS	int
,	O
DXF_ITEM	int
,	O
DXF_TABLES	int
,	O
DXF_TABLE	int
,	O
DXF_ENDTAB	int
,	O
DXF_LAYER	int
,	O
DXF_STYLE	int
,	O
DXF_LTYPE	int
,	O
DXF_ATTDEF	int
,	O
DXF_ATTRIB	int
,	O
DXF_DICTIONARY	int
,	O
DXF_MLINESTYLE	int
,	O
DXF_ACAD_GROUP	int
,	O
DXF_ACAD_MLINESTYLE	int
,	O
DXF_APPID	int
,	O
DXF_BLOCK	int
,	O
DXF_ENDBLK	int
,	O
DXF_VPORT	int
,	O
DXF_VIEW	int
,	O
DXF_COLOR_INDEX	int
}	O
;	O
typedef	O
enum	O
_token_id	enum
dxf_token_id	enum
;	O
typedef	O
struct	O
{	O
dxf_token_id	enum
id	enum
;	O
char	O
*	O
name	pointer
;	O
}	O
token_table	struct
;	O
token_table	struct
a	pointer
[	O
]	O
=	O
{	O
{	O
DXF_SECTION	int
,	O
"SECTION"	pointer
}	O
,	O
{	O
DXF_ENDSEC	int
,	O
"ENDSEC"	pointer
}	O
,	O
{	O
DXF_POLYLINE	int
,	O
"POLYLINE"	pointer
}	O
,	O
{	O
DXF_3DFACE	int
,	O
"3DFACE"	pointer
}	O
,	O
{	O
DXF_VERTEX	int
,	O
"VERTEX"	pointer
}	O
,	O
{	O
DXF_SEQEND	int
,	O
"SEQEND"	pointer
}	O
,	O
{	O
DXF_EOF	int
,	O
"EOF"	pointer
}	O
,	O
{	O
DXF_BLOCK	int
,	O
"BLOCK"	pointer
}	O
,	O
{	O
DXF_ENDBLK	int
,	O
"ENDBLK"	pointer
}	O
,	O
{	O
DXF_INSERT	int
,	O
"INSERT"	pointer
}	O
,	O
{	O
DXF_TABLE	int
,	O
"TABLE"	pointer
}	O
,	O
{	O
DXF_ENDTAB	int
,	O
"ENDTAB"	pointer
}	O
,	O
{	O
DXF_LAYER	int
,	O
"LAYER"	pointer
}	O
,	O
{	O
DXF_STYLE	int
,	O
"STYLE"	pointer
}	O
,	O
{	O
DXF_LTYPE	int
,	O
"LTYPE"	pointer
}	O
,	O
{	O
DXF_VPORT	int
,	O
"VPORT"	pointer
}	O
,	O
{	O
DXF_DICTIONARY	int
,	O
"DICTIONARY"	pointer
}	O
,	O
{	O
DXF_MLINESTYLE	int
,	O
"MLINESTYLE"	pointer
}	O
,	O
{	O
DXF_APPID	int
,	O
"APPID"	pointer
}	O
,	O
{	O
DXF_ACAD_GROUP	int
,	O
"ACAD_GROUP"	pointer
}	O
,	O
{	O
DXF_ACAD_MLINESTYLE	int
,	O
"ACAD_MLINESTYLE"	pointer
}	O
,	O
{	O
DXF_ATTDEF	int
,	O
"ATTDEF"	pointer
}	O
,	O
{	O
DXF_ATTRIB	int
,	O
"ATTRIB"	pointer
}	O
,	O
{	O
DXF_EOF	int
,	O
NULL	O
}	O
}	O
;	O
static	O
int	O
int_value	int
;	O
static	O
dxf_token_id	enum
ReadToken	function
(	O
FILE	struct
*	O
f	struct
,	O
double	O
*	O
fp_value	pointer
,	O
char	O
*	O
cp_value	pointer
,	O
int	O
*	O
code	pointer
,	O
char	O
*	O
string	union
)	O
{	O
long	O
i	long
;	O
int	O
len	int
;	O
token_table	struct
*	O
p	pointer
;	O
char	O
buf1	array
[	O
512	int
]	O
,	O
buf2	array
[	O
512	int
]	O
,	O
*	O
r1	pointer
,	O
*	O
r2	pointer
;	O
r1	pointer
=	O
fgets	function
(	O
buf1	array
,	O
sizeof	O
(	O
buf1	array
)	O
,	O
f	struct
)	O
;	O
r2	pointer
=	O
fgets	function
(	O
buf2	array
,	O
sizeof	O
(	O
buf2	array
)	O
,	O
f	struct
)	O
;	O
lineno	int
+=	O
2	int
;	O
len	int
=	O
strlen	function
(	O
buf1	array
)	O
;	O
if	O
(	O
len	int
>	O
0	int
)	O
{	O
buf1	array
[	O
len	int
-	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
if	O
(	O
len	int
>=	O
2	int
&&	O
buf1	array
[	O
len	int
-	O
2	int
]	O
==	O
'\r'	O
)	O
{	O
buf1	array
[	O
len	int
-	O
2	int
]	O
=	O
'\0'	O
;	O
}	O
len	int
=	O
strlen	function
(	O
buf2	array
)	O
;	O
if	O
(	O
len	int
>	O
0	int
)	O
{	O
buf2	array
[	O
len	int
-	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
if	O
(	O
len	int
>=	O
2	int
&&	O
buf2	array
[	O
len	int
-	O
2	int
]	O
==	O
'\r'	O
)	O
{	O
buf2	array
[	O
len	int
-	O
2	int
]	O
=	O
'\0'	O
;	O
}	O
strcpy	function
(	O
cp_value	pointer
,	O
buf2	array
)	O
;	O
strcpy	function
(	O
string	union
,	O
buf2	array
)	O
;	O
if	O
(	O
r1	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
&&	O
r2	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
i	long
=	O
strtol	function
(	O
buf1	array
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
0	int
)	O
;	O
*	O
code	pointer
=	O
i	long
;	O
if	O
(	O
i	long
==	O
0	int
)	O
{	O
for	O
(	O
p	pointer
=	O
a	pointer
;	O
p	pointer
->	O
name	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
++	O
p	pointer
)	O
{	O
if	O
(	O
COMPARE	O
(	O
p	pointer
->	O
name	pointer
,	O
buf2	array
)	O
==	O
0	int
)	O
{	O
return	O
p	pointer
->	O
id	enum
;	O
}	O
}	O
printf	function
(	O
"Warning: unrecognized directive, \"%s\"\n"	pointer
,	O
buf2	array
)	O
;	O
}	O
else	O
if	O
(	O
i	long
==	O
2	int
)	O
{	O
if	O
(	O
COMPARE	O
(	O
"ENTITIES"	pointer
,	O
buf2	array
)	O
==	O
0	int
)	O
{	O
return	O
DXF_ENTITIES	int
;	O
}	O
else	O
if	O
(	O
COMPARE	O
(	O
"BLOCKS"	pointer
,	O
buf2	array
)	O
==	O
0	int
)	O
{	O
return	O
DXF_BLOCKS	int
;	O
}	O
else	O
if	O
(	O
COMPARE	O
(	O
"TABLES"	pointer
,	O
buf2	array
)	O
==	O
0	int
)	O
{	O
return	O
DXF_TABLES	int
;	O
}	O
else	O
{	O
return	O
DXF_TITLE	int
;	O
}	O
}	O
else	O
if	O
(	O
i	long
>=	O
10	int
&&	O
i	long
<=	O
19	int
)	O
{	O
*	O
fp_value	pointer
=	O
strtod	function
(	O
buf2	array
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
)	O
;	O
return	O
DXF_X_COORD	int
;	O
}	O
else	O
if	O
(	O
i	long
>=	O
20	int
&&	O
i	long
<=	O
29	int
)	O
{	O
*	O
fp_value	pointer
=	O
strtod	function
(	O
buf2	array
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
)	O
;	O
return	O
DXF_Y_COORD	int
;	O
}	O
else	O
if	O
(	O
i	long
>=	O
30	int
&&	O
i	long
<=	O
39	int
)	O
{	O
*	O
fp_value	pointer
=	O
strtod	function
(	O
buf2	array
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
)	O
;	O
return	O
DXF_Z_COORD	int
;	O
}	O
else	O
if	O
(	O
i	long
==	O
41	int
)	O
{	O
*	O
fp_value	pointer
=	O
strtod	function
(	O
buf2	array
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
)	O
;	O
return	O
DXF_X_SCALE	int
;	O
}	O
else	O
if	O
(	O
i	long
==	O
42	int
)	O
{	O
*	O
fp_value	pointer
=	O
strtod	function
(	O
buf2	array
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
)	O
;	O
return	O
DXF_Y_SCALE	int
;	O
}	O
else	O
if	O
(	O
i	long
==	O
43	int
)	O
{	O
*	O
fp_value	pointer
=	O
strtod	function
(	O
buf2	array
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
)	O
;	O
return	O
DXF_Z_SCALE	int
;	O
}	O
else	O
if	O
(	O
i	long
==	O
50	int
)	O
{	O
*	O
fp_value	pointer
=	O
strtod	function
(	O
buf2	array
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
)	O
;	O
return	O
DXF_ROTATE	int
;	O
}	O
else	O
if	O
(	O
i	long
==	O
62	int
)	O
{	O
int_value	int
=	O
strtol	function
(	O
buf2	array
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
0	int
)	O
;	O
return	O
DXF_COLOR_INDEX	int
;	O
}	O
else	O
if	O
(	O
i	long
==	O
70	int
)	O
{	O
int_value	int
=	O
strtol	function
(	O
buf2	array
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
0	int
)	O
;	O
return	O
DXF_FLAGS	int
;	O
}	O
else	O
if	O
(	O
i	long
==	O
71	int
)	O
{	O
int_value	int
=	O
strtol	function
(	O
buf2	array
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
0	int
)	O
;	O
return	O
DXF_M_COUNT	int
;	O
}	O
else	O
if	O
(	O
i	long
==	O
72	int
)	O
{	O
int_value	int
=	O
strtol	function
(	O
buf2	array
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
0	int
)	O
;	O
return	O
DXF_N_COUNT	int
;	O
}	O
else	O
if	O
(	O
i	long
==	O
73	int
)	O
{	O
int_value	int
=	O
strtol	function
(	O
buf2	array
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
0	int
)	O
;	O
return	O
DXF_THIRD_VERTEX	int
;	O
}	O
else	O
if	O
(	O
i	long
==	O
74	int
)	O
{	O
int_value	int
=	O
strtol	function
(	O
buf2	array
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
0	int
)	O
;	O
return	O
DXF_FOURTH_VERTEX	int
;	O
}	O
else	O
if	O
(	O
i	long
==	O
210	int
)	O
{	O
*	O
fp_value	pointer
=	O
strtod	function
(	O
buf2	array
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
)	O
;	O
return	O
DXF_X_EXTRUDE	int
;	O
}	O
else	O
if	O
(	O
i	long
==	O
220	int
)	O
{	O
*	O
fp_value	pointer
=	O
strtod	function
(	O
buf2	array
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
)	O
;	O
return	O
DXF_Y_EXTRUDE	int
;	O
}	O
else	O
if	O
(	O
i	long
==	O
230	int
)	O
{	O
*	O
fp_value	pointer
=	O
strtod	function
(	O
buf2	array
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
)	O
;	O
return	O
DXF_Z_EXTRUDE	int
;	O
}	O
else	O
{	O
return	O
DXF_ITEM	int
;	O
}	O
}	O
return	O
DXF_EOF	int
;	O
}	O
static	O
int	O
lookahead_valid	int
=	O
0	int
;	O
static	O
double	O
fp_la	double
;	O
static	O
dxf_token_id	enum
token_id_la	enum
;	O
static	O
char	O
cp_la	array
[	O
256	int
]	O
,	O
string_la	array
[	O
256	int
]	O
;	O
static	O
int	O
code_la	int
;	O
static	O
dxf_token_id	enum
NextToken	function
(	O
FILE	struct
*	O
f	struct
,	O
double	O
*	O
fp_value	pointer
,	O
char	O
*	O
cp_value	pointer
,	O
int	O
*	O
code	pointer
,	O
char	O
*	O
string	union
)	O
{	O
if	O
(	O
lookahead_valid	int
)	O
{	O
lookahead_valid	int
=	O
0	int
;	O
*	O
fp_value	pointer
=	O
fp_la	double
;	O
strcpy	function
(	O
cp_value	pointer
,	O
cp_la	array
)	O
;	O
strcpy	function
(	O
string	union
,	O
string_la	array
)	O
;	O
*	O
code	pointer
=	O
code_la	int
;	O
return	O
token_id_la	enum
;	O
}	O
else	O
{	O
return	O
ReadToken	function
(	O
f	struct
,	O
fp_value	pointer
,	O
cp_value	pointer
,	O
code	pointer
,	O
string	union
)	O
;	O
}	O
}	O
static	O
void	O
PushToken	function
(	O
dxf_token_id	enum
id	enum
,	O
double	O
fp_value	pointer
,	O
char	O
*	O
cp_value	pointer
,	O
int	O
code	pointer
,	O
char	O
*	O
string	union
)	O
{	O
lookahead_valid	int
=	O
1	int
;	O
fp_la	double
=	O
fp_value	pointer
;	O
token_id_la	enum
=	O
id	enum
;	O
strcpy	function
(	O
cp_la	array
,	O
cp_value	pointer
)	O
;	O
strcpy	function
(	O
string_la	array
,	O
string	union
)	O
;	O
code_la	int
=	O
code	pointer
;	O
}	O
static	O
void	O
InsertBlock	function
(	O
char	O
*	O
name	pointer
,	O
VPoint	struct
*	O
o	pointer
,	O
VPoint	struct
*	O
scale	int
,	O
VPoint	struct
*	O
extrude	pointer
,	O
double	O
r	pointer
,	O
VPolygon	struct
*	O
*	O
poly	pointer
,	O
int	O
*	O
ptop	pointer
)	O
{	O
VObject	struct
*	O
*	O
p	pointer
;	O
int	O
i	long
,	O
j	int
,	O
extrusion	int
=	O
0	int
;	O
PDEBUG	O
(	O
(	O
"looking for \"%s\"; offset %g, %g, %g; scale %g, %g, %g; extrude %g, %g, %g; rotate %g\n"	pointer
,	O
name	pointer
,	O
o	pointer
->	O
x	double
,	O
o	pointer
->	O
y	double
,	O
o	pointer
->	O
z	double
,	O
scale	int
->	O
x	double
,	O
scale	int
->	O
y	double
,	O
scale	int
->	O
z	double
,	O
extrude	pointer
->	O
x	double
,	O
extrude	pointer
->	O
y	double
,	O
extrude	pointer
->	O
z	double
,	O
r	pointer
)	O
)	O
;	O
for	O
(	O
p	pointer
=	O
bobject	array
,	O
i	long
=	O
0	int
;	O
i	long
<	O
btop	int
;	O
++	O
i	long
,	O
++	O
p	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
(	O
*	O
p	pointer
)	O
->	O
name	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
{	O
PDEBUG	O
(	O
(	O
"adding %d polygons to %d existing\n"	pointer
,	O
(	O
*	O
p	pointer
)	O
->	O
numPolys	int
,	O
(	O
*	O
ptop	pointer
)	O
)	O
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
(	O
*	O
p	pointer
)	O
->	O
numPolys	int
;	O
++	O
j	int
)	O
{	O
poly	pointer
[	O
(	O
*	O
ptop	pointer
)	O
++	O
]	O
=	O
ScalePolygon	function
(	O
(	O
*	O
p	pointer
)	O
->	O
polygon	pointer
[	O
j	int
]	O
,	O
o	pointer
,	O
scale	int
,	O
extrude	pointer
,	O
r	pointer
)	O
;	O
}	O
if	O
(	O
extrusion	int
)	O
{	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
(	O
*	O
p	pointer
)	O
->	O
numPolys	int
;	O
++	O
j	int
)	O
{	O
VDestroyPolygon	O
(	O
(	O
*	O
p	pointer
)	O
->	O
polygon	pointer
[	O
j	int
]	O
)	O
;	O
free	function
(	O
(	O
char	O
*	O
)	O
(	O
*	O
p	pointer
)	O
)	O
;	O
}	O
}	O
return	O
;	O
}	O
}	O
}	O
VObject	struct
*	O
VReadDXFObject	function
(	O
FILE	struct
*	O
f	struct
)	O
{	O
return	O
VReadDepthCueuedObject	function
(	O
f	struct
,	O
0	int
)	O
;	O
}	O
VObject	struct
*	O
VReadDepthCueuedDXFObject	function
(	O
FILE	struct
*	O
f	struct
,	O
int	O
flag	int
)	O
{	O
double	O
value	pointer
,	O
rotate	double
=	O
0	int
;	O
dxf_token_id	enum
id	enum
,	O
saved_id	enum
=	O
DXF_NULL	int
;	O
int	O
i	long
,	O
j	int
,	O
m0	int
=	O
0	int
,	O
n0	int
=	O
0	int
,	O
vertices_listed_by_index	int
=	O
0	int
;	O
VPoint	struct
temp	array
[	O
POINT_MAX	int
]	O
,	O
temp1	array
[	O
4	int
]	O
,	O
*	O
p	pointer
,	O
scale	int
,	O
pt	pointer
,	O
bpt	struct
,	O
extrude	pointer
;	O
VPolygon	struct
template	struct
;	O
VObject	struct
*	O
object	pointer
;	O
int	O
top	int
=	O
0	int
;	O
int	O
state	int
=	O
STATE_NORMAL	int
,	O
submode	int
=	O
0	int
;	O
char	O
cp	array
[	O
256	int
]	O
,	O
title	array
[	O
256	int
]	O
,	O
insert_title	array
[	O
256	int
]	O
,	O
*	O
stop_block	pointer
=	O
"<none>"	pointer
;	O
int	O
order	pointer
=	O
0	int
;	O
int	O
indices	array
[	O
4	int
]	O
,	O
num_indices	int
=	O
0	int
;	O
VMatrix	struct
m	array
;	O
int	O
code	pointer
,	O
polymode	int
;	O
char	O
string	union
[	O
256	int
]	O
;	O
VColor	struct
*	O
blackColor	pointer
=	O
VAllocColor	function
(	O
"black"	pointer
)	O
;	O
VPolygon	struct
*	O
poly	pointer
[	O
POLY_MAX	O
]	O
;	O
int	O
ptop	pointer
=	O
0	int
;	O
memset	function
(	O
&	O
template	struct
,	O
0	int
,	O
sizeof	O
(	O
VPolygon	struct
)	O
)	O
;	O
template	struct
.	O
color	pointer
=	O
blackColor	pointer
;	O
template	struct
.	O
backColor	pointer
=	O
NULL	O
;	O
if	O
(	O
order	pointer
)	O
{	O
template	struct
.	O
backColor	pointer
=	O
template	struct
.	O
color	pointer
;	O
}	O
template	struct
.	O
flags	short
=	O
0	int
;	O
template	struct
.	O
assignedDepth	short
=	O
-	O
1	int
;	O
p	pointer
=	O
&	O
temp	array
[	O
top	int
]	O
;	O
while	O
(	O
1	int
)	O
{	O
id	enum
=	O
NextToken	function
(	O
f	struct
,	O
&	O
value	pointer
,	O
cp	array
,	O
&	O
code	pointer
,	O
string	union
)	O
;	O
switch	O
(	O
state	int
)	O
{	O
case	O
STATE_NORMAL	int
:	O
switch	O
(	O
id	enum
)	O
{	O
case	O
DXF_ENTITIES	int
:	O
submode	int
=	O
0	int
;	O
state	int
=	O
STATE_ENTITIES	int
;	O
break	O
;	O
case	O
DXF_BLOCKS	int
:	O
submode	int
=	O
1	int
;	O
state	int
=	O
STATE_ENTITIES	int
;	O
break	O
;	O
case	O
DXF_TABLES	int
:	O
state	int
=	O
STATE_TABLES	int
;	O
break	O
;	O
case	O
DXF_EOF	int
:	O
object	pointer
=	O
(	O
VObject	struct
*	O
)	O
Vmalloc	function
(	O
sizeof	O
(	O
VObject	struct
)	O
)	O
;	O
memset	function
(	O
object	pointer
,	O
0	int
,	O
sizeof	O
(	O
VObject	struct
)	O
)	O
;	O
object	pointer
->	O
name	pointer
=	O
strdup	function
(	O
"name"	pointer
)	O
;	O
object	pointer
->	O
numPolys	int
=	O
ptop	pointer
;	O
object	pointer
->	O
polygon	pointer
=	O
(	O
VPolygon	struct
*	O
*	O
)	O
Vmalloc	function
(	O
ptop	pointer
*	O
sizeof	O
(	O
VPolygon	struct
*	O
)	O
)	O
;	O
memcpy	function
(	O
object	pointer
->	O
polygon	pointer
,	O
poly	pointer
,	O
ptop	pointer
*	O
sizeof	O
(	O
VPolygon	struct
*	O
)	O
)	O
;	O
object	pointer
->	O
order	pointer
=	O
(	O
unsigned	O
short	O
*	O
)	O
NULL	O
;	O
VComputeObjectExtent	function
(	O
object	pointer
)	O
;	O
if	O
(	O
VObjectNeedsOrdering	function
(	O
object	pointer
)	O
)	O
{	O
VComputePolygonOrdering	function
(	O
object	pointer
)	O
;	O
}	O
VIdentMatrix	function
(	O
&	O
m	array
)	O
;	O
m	array
.	O
m	array
[	O
2	int
]	O
[	O
2	int
]	O
=	O
-	O
1.0	int
;	O
m	array
.	O
m	array
[	O
1	int
]	O
[	O
1	int
]	O
=	O
-	O
1.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
object	pointer
->	O
numPolys	int
;	O
++	O
i	long
)	O
{	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
object	pointer
->	O
polygon	pointer
[	O
i	long
]	O
->	O
numVtces	short
;	O
++	O
j	int
)	O
{	O
VTransform_	function
(	O
&	O
object	pointer
->	O
polygon	pointer
[	O
i	long
]	O
->	O
vertex	pointer
[	O
j	int
]	O
,	O
&	O
m	array
,	O
&	O
pt	pointer
)	O
;	O
object	pointer
->	O
polygon	pointer
[	O
i	long
]	O
->	O
vertex	pointer
[	O
j	int
]	O
=	O
pt	pointer
;	O
}	O
}	O
return	O
object	pointer
;	O
default	O
:	O
break	O
;	O
}	O
break	O
;	O
case	O
STATE_TABLES	int
:	O
switch	O
(	O
id	enum
)	O
{	O
case	O
DXF_ENDSEC	int
:	O
state	int
=	O
STATE_NORMAL	int
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
break	O
;	O
case	O
STATE_ENTITIES	int
:	O
if	O
(	O
code	pointer
==	O
0	int
)	O
{	O
saved_id	enum
=	O
DXF_NULL	int
;	O
}	O
switch	O
(	O
id	enum
)	O
{	O
case	O
DXF_ATTDEF	int
:	O
case	O
DXF_ATTRIB	int
:	O
saved_id	enum
=	O
id	enum
;	O
state	int
=	O
STATE_GENERAL_ENTITY	int
;	O
break	O
;	O
case	O
DXF_POLYLINE	int
:	O
state	int
=	O
STATE_POLYLINE	int
;	O
p	pointer
=	O
&	O
temp	array
[	O
0	int
]	O
;	O
top	int
=	O
0	int
;	O
m0	int
=	O
n0	int
=	O
0	int
;	O
vertices_listed_by_index	int
=	O
num_indices	int
=	O
0	int
;	O
polymode	int
=	O
0	int
;	O
break	O
;	O
case	O
DXF_3DFACE	int
:	O
state	int
=	O
STATE_3DFACE	int
;	O
p	pointer
=	O
&	O
temp	array
[	O
0	int
]	O
;	O
top	int
=	O
0	int
;	O
break	O
;	O
case	O
DXF_BLOCK	int
:	O
state	int
=	O
STATE_BLOCK	int
;	O
strcpy	function
(	O
title	array
,	O
"*none*"	pointer
)	O
;	O
bpt	struct
.	O
x	double
=	O
bpt	struct
.	O
y	double
=	O
bpt	struct
.	O
z	double
=	O
0.0	int
;	O
break	O
;	O
case	O
DXF_ENDBLK	int
:	O
state	int
=	O
STATE_BLOCK	int
;	O
PushToken	function
(	O
id	enum
,	O
value	pointer
,	O
cp	array
,	O
code	pointer
,	O
string	union
)	O
;	O
break	O
;	O
case	O
DXF_INSERT	int
:	O
pt	pointer
.	O
x	double
=	O
pt	pointer
.	O
y	double
=	O
pt	pointer
.	O
z	double
=	O
0.0	int
;	O
scale	int
.	O
x	double
=	O
1.0	int
;	O
scale	int
.	O
y	double
=	O
1.0	int
;	O
scale	int
.	O
z	double
=	O
1.0	int
;	O
rotate	double
=	O
0.0	int
;	O
extrude	pointer
=	O
pt	pointer
;	O
extrude	pointer
.	O
z	double
=	O
1.0	int
;	O
state	int
=	O
STATE_INSERT	int
;	O
strcpy	function
(	O
insert_title	array
,	O
"*not-specified*"	pointer
)	O
;	O
break	O
;	O
case	O
DXF_ENDSEC	int
:	O
state	int
=	O
STATE_NORMAL	int
;	O
break	O
;	O
default	O
:	O
if	O
(	O
code	pointer
!=	O
0	int
)	O
{	O
printf	function
(	O
"hmm, %d \"%s\"\n"	pointer
,	O
code	pointer
,	O
string	union
)	O
;	O
}	O
else	O
{	O
saved_id	enum
=	O
id	enum
;	O
state	int
=	O
STATE_GENERAL_ENTITY	int
;	O
}	O
break	O
;	O
case	O
DXF_EOF	int
:	O
break	O
;	O
}	O
break	O
;	O
case	O
STATE_POLYLINE	int
:	O
switch	O
(	O
id	enum
)	O
{	O
case	O
DXF_COLOR_INDEX	int
:	O
if	O
(	O
int_value	int
<	O
8	int
)	O
{	O
template	struct
.	O
color	pointer
=	O
VAllocColor	function
(	O
colors	int
[	O
i	long
]	O
)	O
;	O
if	O
(	O
order	pointer
)	O
{	O
template	struct
.	O
backColor	pointer
=	O
template	struct
.	O
color	pointer
;	O
}	O
}	O
else	O
{	O
printf	function
(	O
"color index %d\n"	pointer
,	O
int_value	int
)	O
;	O
}	O
break	O
;	O
case	O
DXF_SEQEND	int
:	O
if	O
(	O
vertices_listed_by_index	int
==	O
0	int
)	O
{	O
if	O
(	O
m0	int
!=	O
0	int
||	O
n0	int
!=	O
0	int
)	O
{	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
m0	int
;	O
++	O
i	long
)	O
{	O
for	O
(	O
j	int
=	O
1	int
;	O
j	int
<	O
n0	int
;	O
++	O
j	int
)	O
{	O
temp1	array
[	O
0	int
]	O
=	O
temp	array
[	O
(	O
i	long
-	O
1	int
)	O
*	O
n0	int
+	O
j	int
-	O
1	int
]	O
;	O
temp1	array
[	O
1	int
]	O
=	O
temp	array
[	O
(	O
i	long
)	O
*	O
n0	int
+	O
j	int
-	O
1	int
]	O
;	O
temp1	array
[	O
2	int
]	O
=	O
temp	array
[	O
(	O
i	long
)	O
*	O
n0	int
+	O
j	int
]	O
;	O
poly	pointer
[	O
ptop	pointer
++	O
]	O
=	O
VCreatePolygonFromTemplate	function
(	O
3	int
,	O
temp1	array
,	O
&	O
template	struct
)	O
;	O
temp1	array
[	O
0	int
]	O
=	O
temp	array
[	O
(	O
i	long
)	O
*	O
n0	int
+	O
j	int
]	O
;	O
temp1	array
[	O
1	int
]	O
=	O
temp	array
[	O
(	O
i	long
-	O
1	int
)	O
*	O
n0	int
+	O
j	int
]	O
;	O
temp1	array
[	O
2	int
]	O
=	O
temp	array
[	O
(	O
i	long
-	O
1	int
)	O
*	O
n0	int
+	O
j	int
-	O
1	int
]	O
;	O
poly	pointer
[	O
ptop	pointer
++	O
]	O
=	O
VCreatePolygonFromTemplate	function
(	O
3	int
,	O
temp1	array
,	O
&	O
template	struct
)	O
;	O
}	O
}	O
PDEBUG	O
(	O
(	O
"mesh %d x %d\n"	pointer
,	O
m0	int
,	O
n0	int
)	O
)	O
;	O
}	O
else	O
{	O
poly	pointer
[	O
ptop	pointer
++	O
]	O
=	O
VCreatePolygonFromTemplate	function
(	O
top	int
,	O
temp	array
,	O
&	O
template	struct
)	O
;	O
}	O
}	O
PDEBUG	O
(	O
(	O
"added POLYLINE polygon number %d\n"	pointer
,	O
ptop	pointer
-	O
1	int
)	O
)	O
;	O
p	pointer
=	O
&	O
temp	array
[	O
0	int
]	O
;	O
top	int
=	O
0	int
;	O
state	int
=	O
STATE_ENTITIES	int
;	O
break	O
;	O
case	O
DXF_FLAGS	int
:	O
if	O
(	O
(	O
int_value	int
&	O
2	int
)	O
||	O
(	O
int_value	int
&	O
4	int
)	O
)	O
{	O
printf	function
(	O
"Warning: POLYLINE splines or curves not supported by Vlib (line %d).\n"	pointer
,	O
lineno	int
)	O
;	O
}	O
if	O
(	O
int_value	int
&	O
64	int
)	O
{	O
polymode	int
=	O
2	int
;	O
}	O
else	O
if	O
(	O
int_value	int
&	O
16	int
)	O
{	O
polymode	int
=	O
1	int
;	O
}	O
break	O
;	O
case	O
DXF_VERTEX	int
:	O
state	int
=	O
STATE_VERTEX	int
;	O
break	O
;	O
case	O
DXF_M_COUNT	int
:	O
m0	int
=	O
int_value	int
;	O
break	O
;	O
case	O
DXF_N_COUNT	int
:	O
n0	int
=	O
int_value	int
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
break	O
;	O
case	O
STATE_3DFACE	int
:	O
switch	O
(	O
id	enum
)	O
{	O
case	O
DXF_COLOR_INDEX	int
:	O
if	O
(	O
int_value	int
<	O
8	int
)	O
{	O
template	struct
.	O
color	pointer
=	O
VAllocColor	function
(	O
colors	int
[	O
int_value	int
]	O
)	O
;	O
if	O
(	O
order	pointer
)	O
{	O
template	struct
.	O
backColor	pointer
=	O
template	struct
.	O
color	pointer
;	O
}	O
}	O
else	O
{	O
printf	function
(	O
"color index %d\n"	pointer
,	O
int_value	int
)	O
;	O
}	O
break	O
;	O
case	O
DXF_ENDBLK	int
:	O
state	int
=	O
STATE_BLOCK	int
;	O
PushToken	function
(	O
id	enum
,	O
value	pointer
,	O
cp	array
,	O
code	pointer
,	O
string	union
)	O
;	O
poly	pointer
[	O
ptop	pointer
++	O
]	O
=	O
VCreatePolygonFromTemplate	function
(	O
top	int
,	O
temp	array
,	O
&	O
template	struct
)	O
;	O
p	pointer
=	O
&	O
temp	array
[	O
0	int
]	O
;	O
top	int
=	O
0	int
;	O
break	O
;	O
case	O
DXF_X_COORD	int
:	O
p	pointer
->	O
x	double
=	O
value	pointer
;	O
if	O
(	O
(	O
id	enum
=	O
NextToken	function
(	O
f	struct
,	O
&	O
p	pointer
->	O
y	double
,	O
cp	array
,	O
&	O
code	pointer
,	O
string	union
)	O
)	O
!=	O
DXF_Y_COORD	int
)	O
{	O
printf	function
(	O
"syntax error4 %d\n"	pointer
,	O
id	enum
)	O
;	O
}	O
if	O
(	O
(	O
id	enum
=	O
NextToken	function
(	O
f	struct
,	O
&	O
p	pointer
->	O
z	double
,	O
cp	array
,	O
&	O
code	pointer
,	O
string	union
)	O
)	O
!=	O
DXF_Z_COORD	int
)	O
{	O
printf	function
(	O
"syntax error5 %d\n"	pointer
,	O
id	enum
)	O
;	O
}	O
++	O
p	pointer
;	O
++	O
top	int
;	O
if	O
(	O
top	int
==	O
POINT_MAX	int
)	O
{	O
printf	function
(	O
"Point overflow, increase POINT_MAX.\n"	pointer
)	O
;	O
}	O
break	O
;	O
case	O
DXF_3DFACE	int
:	O
case	O
DXF_POLYLINE	int
:	O
case	O
DXF_ENDSEC	int
:	O
default	O
:	O
if	O
(	O
code	pointer
==	O
0	int
)	O
{	O
if	O
(	O
temp	array
[	O
top	int
-	O
1	int
]	O
.	O
x	double
==	O
temp	array
[	O
top	int
-	O
2	int
]	O
.	O
x	double
&&	O
temp	array
[	O
top	int
-	O
1	int
]	O
.	O
y	double
==	O
temp	array
[	O
top	int
-	O
2	int
]	O
.	O
y	double
&&	O
temp	array
[	O
top	int
-	O
1	int
]	O
.	O
z	double
==	O
temp	array
[	O
top	int
-	O
2	int
]	O
.	O
z	double
)	O
{	O
--	O
top	int
;	O
}	O
poly	pointer
[	O
ptop	pointer
++	O
]	O
=	O
VCreatePolygonFromTemplate	function
(	O
top	int
,	O
temp	array
,	O
&	O
template	struct
)	O
;	O
p	pointer
=	O
&	O
temp	array
[	O
0	int
]	O
;	O
top	int
=	O
0	int
;	O
PushToken	function
(	O
id	enum
,	O
value	pointer
,	O
cp	array
,	O
code	pointer
,	O
string	union
)	O
;	O
state	int
=	O
STATE_ENTITIES	int
;	O
}	O
break	O
;	O
}	O
break	O
;	O
case	O
STATE_VERTEX	int
:	O
switch	O
(	O
id	enum
)	O
{	O
case	O
DXF_COLOR_INDEX	int
:	O
if	O
(	O
int_value	int
<	O
8	int
)	O
{	O
template	struct
.	O
color	pointer
=	O
VAllocColor	function
(	O
colors	int
[	O
i	long
]	O
)	O
;	O
if	O
(	O
order	pointer
)	O
{	O
template	struct
.	O
backColor	pointer
=	O
template	struct
.	O
color	pointer
;	O
}	O
}	O
else	O
{	O
printf	function
(	O
"color index %d\n"	pointer
,	O
int_value	int
)	O
;	O
}	O
break	O
;	O
case	O
DXF_X_COORD	int
:	O
p	pointer
->	O
x	double
=	O
value	pointer
;	O
break	O
;	O
case	O
DXF_Y_COORD	int
:	O
p	pointer
->	O
y	double
=	O
value	pointer
;	O
break	O
;	O
case	O
DXF_Z_COORD	int
:	O
p	pointer
->	O
z	double
=	O
value	pointer
;	O
break	O
;	O
case	O
DXF_M_COUNT	int
:	O
vertices_listed_by_index	int
=	O
1	int
;	O
if	O
(	O
int_value	int
<	O
0	int
)	O
{	O
int_value	int
=	O
-	O
int_value	int
;	O
}	O
indices	array
[	O
0	int
]	O
=	O
int_value	int
-	O
1	int
;	O
num_indices	int
=	O
1	int
;	O
break	O
;	O
case	O
DXF_N_COUNT	int
:	O
vertices_listed_by_index	int
=	O
1	int
;	O
if	O
(	O
int_value	int
<	O
0	int
)	O
{	O
int_value	int
=	O
-	O
int_value	int
;	O
}	O
indices	array
[	O
1	int
]	O
=	O
int_value	int
-	O
1	int
;	O
num_indices	int
=	O
2	int
;	O
break	O
;	O
case	O
DXF_THIRD_VERTEX	int
:	O
vertices_listed_by_index	int
=	O
1	int
;	O
if	O
(	O
int_value	int
<	O
0	int
)	O
{	O
int_value	int
=	O
-	O
int_value	int
;	O
}	O
indices	array
[	O
2	int
]	O
=	O
int_value	int
-	O
1	int
;	O
num_indices	int
=	O
3	int
;	O
break	O
;	O
case	O
DXF_FOURTH_VERTEX	int
:	O
vertices_listed_by_index	int
=	O
1	int
;	O
if	O
(	O
int_value	int
<	O
0	int
)	O
{	O
int_value	int
=	O
-	O
int_value	int
;	O
}	O
indices	array
[	O
3	int
]	O
=	O
int_value	int
-	O
1	int
;	O
num_indices	int
=	O
4	int
;	O
break	O
;	O
case	O
DXF_SEQEND	int
:	O
case	O
DXF_VERTEX	int
:	O
if	O
(	O
vertices_listed_by_index	int
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
num_indices	int
;	O
++	O
i	long
)	O
{	O
if	O
(	O
indices	array
[	O
i	long
]	O
>=	O
top	int
)	O
{	O
printf	function
(	O
"internal error polygon vertex out of range: %d (max %d) -- %d\n"	pointer
,	O
indices	array
[	O
i	long
]	O
,	O
top	int
,	O
i	long
)	O
;	O
}	O
temp1	array
[	O
i	long
]	O
=	O
temp	array
[	O
indices	array
[	O
i	long
]	O
]	O
;	O
}	O
poly	pointer
[	O
ptop	pointer
++	O
]	O
=	O
VCreatePolygonFromTemplate	function
(	O
num_indices	int
,	O
temp1	array
,	O
&	O
template	struct
)	O
;	O
}	O
else	O
{	O
++	O
p	pointer
;	O
++	O
top	int
;	O
if	O
(	O
top	int
==	O
POINT_MAX	int
)	O
{	O
printf	function
(	O
"Point overflow, increase POINT_MAX.\n"	pointer
)	O
;	O
}	O
}	O
PushToken	function
(	O
id	enum
,	O
value	pointer
,	O
cp	array
,	O
code	pointer
,	O
string	union
)	O
;	O
state	int
=	O
STATE_POLYLINE	int
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
break	O
;	O
case	O
STATE_INSERT	int
:	O
switch	O
(	O
id	enum
)	O
{	O
break	O
;	O
case	O
DXF_ENDBLK	int
:	O
state	int
=	O
STATE_BLOCK	int
;	O
PushToken	function
(	O
id	enum
,	O
value	pointer
,	O
cp	array
,	O
code	pointer
,	O
string	union
)	O
;	O
InsertBlock	function
(	O
insert_title	array
,	O
&	O
pt	pointer
,	O
&	O
scale	int
,	O
&	O
extrude	pointer
,	O
rotate	double
,	O
poly	pointer
,	O
&	O
ptop	pointer
)	O
;	O
break	O
;	O
case	O
DXF_TITLE	int
:	O
strcpy	function
(	O
insert_title	array
,	O
cp	array
)	O
;	O
break	O
;	O
case	O
DXF_X_COORD	int
:	O
pt	pointer
.	O
x	double
=	O
value	pointer
;	O
break	O
;	O
case	O
DXF_Y_COORD	int
:	O
pt	pointer
.	O
y	double
=	O
value	pointer
;	O
break	O
;	O
case	O
DXF_Z_COORD	int
:	O
pt	pointer
.	O
z	double
=	O
value	pointer
;	O
break	O
;	O
case	O
DXF_X_SCALE	int
:	O
scale	int
.	O
x	double
=	O
value	pointer
;	O
break	O
;	O
case	O
DXF_Y_SCALE	int
:	O
scale	int
.	O
y	double
=	O
value	pointer
;	O
break	O
;	O
case	O
DXF_Z_SCALE	int
:	O
scale	int
.	O
z	double
=	O
value	pointer
;	O
break	O
;	O
case	O
DXF_ROTATE	int
:	O
rotate	double
=	O
value	pointer
;	O
break	O
;	O
case	O
DXF_X_EXTRUDE	int
:	O
extrude	pointer
.	O
x	double
=	O
value	pointer
;	O
break	O
;	O
case	O
DXF_Y_EXTRUDE	int
:	O
extrude	pointer
.	O
y	double
=	O
value	pointer
;	O
break	O
;	O
case	O
DXF_Z_EXTRUDE	int
:	O
extrude	pointer
.	O
z	double
=	O
value	pointer
;	O
break	O
;	O
case	O
DXF_INSERT	int
:	O
case	O
DXF_POLYLINE	int
:	O
case	O
DXF_3DFACE	int
:	O
case	O
DXF_ENDSEC	int
:	O
default	O
:	O
if	O
(	O
code	pointer
==	O
0	int
)	O
{	O
state	int
=	O
STATE_ENTITIES	int
;	O
PushToken	function
(	O
id	enum
,	O
value	pointer
,	O
cp	array
,	O
code	pointer
,	O
string	union
)	O
;	O
InsertBlock	function
(	O
insert_title	array
,	O
&	O
pt	pointer
,	O
&	O
scale	int
,	O
&	O
extrude	pointer
,	O
rotate	double
,	O
poly	pointer
,	O
&	O
ptop	pointer
)	O
;	O
}	O
break	O
;	O
}	O
break	O
;	O
case	O
STATE_GENERAL_ENTITY	int
:	O
if	O
(	O
code	pointer
==	O
0	int
)	O
{	O
state	int
=	O
STATE_ENTITIES	int
;	O
PushToken	function
(	O
id	enum
,	O
value	pointer
,	O
cp	array
,	O
code	pointer
,	O
string	union
)	O
;	O
}	O
break	O
;	O
case	O
STATE_BLOCK	int
:	O
PDEBUG	O
(	O
(	O
"BLOCK: %s\n"	pointer
,	O
string	union
)	O
)	O
;	O
switch	O
(	O
id	enum
)	O
{	O
case	O
DXF_ENDBLK	int
:	O
object	pointer
=	O
(	O
VObject	struct
*	O
)	O
Vmalloc	function
(	O
sizeof	O
(	O
VObject	struct
)	O
)	O
;	O
object	pointer
->	O
name	pointer
=	O
malloc	function
(	O
strlen	function
(	O
title	array
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
object	pointer
->	O
name	pointer
,	O
title	array
)	O
;	O
PDEBUG	O
(	O
(	O
"added block \"%s\" %d polygons (line %d)\n"	pointer
,	O
title	array
,	O
ptop	pointer
,	O
lineno	int
)	O
)	O
;	O
object	pointer
->	O
numPolys	int
=	O
ptop	pointer
;	O
object	pointer
->	O
polygon	pointer
=	O
(	O
VPolygon	struct
*	O
*	O
)	O
Vmalloc	function
(	O
ptop	pointer
*	O
sizeof	O
(	O
VPolygon	struct
*	O
)	O
)	O
;	O
memcpy	function
(	O
(	O
char	O
*	O
)	O
object	pointer
->	O
polygon	pointer
,	O
(	O
char	O
*	O
)	O
poly	pointer
,	O
ptop	pointer
*	O
sizeof	O
(	O
VPolygon	struct
*	O
)	O
)	O
;	O
ptop	pointer
=	O
0	int
;	O
object	pointer
->	O
order	pointer
=	O
(	O
unsigned	O
short	O
*	O
)	O
NULL	O
;	O
PDEBUG	O
(	O
(	O
"Block offset %f, %f, %f\n"	pointer
,	O
bpt	struct
.	O
x	double
,	O
bpt	struct
.	O
y	double
,	O
bpt	struct
.	O
z	double
)	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
object	pointer
->	O
numPolys	int
;	O
++	O
i	long
)	O
{	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
object	pointer
->	O
polygon	pointer
[	O
i	long
]	O
->	O
numVtces	short
;	O
++	O
j	int
)	O
{	O
object	pointer
->	O
polygon	pointer
[	O
i	long
]	O
->	O
vertex	pointer
[	O
j	int
]	O
.	O
x	double
+=	O
bpt	struct
.	O
x	double
;	O
object	pointer
->	O
polygon	pointer
[	O
i	long
]	O
->	O
vertex	pointer
[	O
j	int
]	O
.	O
y	double
+=	O
bpt	struct
.	O
y	double
;	O
object	pointer
->	O
polygon	pointer
[	O
i	long
]	O
->	O
vertex	pointer
[	O
j	int
]	O
.	O
z	double
+=	O
bpt	struct
.	O
z	double
;	O
}	O
}	O
bobject	array
[	O
btop	int
++	O
]	O
=	O
object	pointer
;	O
state	int
=	O
STATE_ENTITIES	int
;	O
if	O
(	O
strcmp	function
(	O
stop_block	pointer
,	O
object	pointer
->	O
name	pointer
)	O
==	O
0	int
)	O
{	O
VIdentMatrix	function
(	O
&	O
m	array
)	O
;	O
m	array
.	O
m	array
[	O
2	int
]	O
[	O
2	int
]	O
=	O
-	O
1.0	int
;	O
m	array
.	O
m	array
[	O
1	int
]	O
[	O
1	int
]	O
=	O
-	O
1.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
object	pointer
->	O
numPolys	int
;	O
++	O
i	long
)	O
{	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
object	pointer
->	O
polygon	pointer
[	O
i	long
]	O
->	O
numVtces	short
;	O
++	O
j	int
)	O
{	O
VTransform	function
(	O
&	O
object	pointer
->	O
polygon	pointer
[	O
i	long
]	O
->	O
vertex	pointer
[	O
j	int
]	O
,	O
&	O
m	array
,	O
&	O
pt	pointer
)	O
;	O
object	pointer
->	O
polygon	pointer
[	O
i	long
]	O
->	O
vertex	pointer
[	O
j	int
]	O
=	O
pt	pointer
;	O
}	O
}	O
return	O
object	pointer
;	O
}	O
break	O
;	O
case	O
DXF_TITLE	int
:	O
strcpy	function
(	O
title	array
,	O
cp	array
)	O
;	O
break	O
;	O
case	O
DXF_X_COORD	int
:	O
bpt	struct
.	O
x	double
=	O
value	pointer
;	O
break	O
;	O
case	O
DXF_Y_COORD	int
:	O
bpt	struct
.	O
y	double
=	O
value	pointer
;	O
break	O
;	O
case	O
DXF_Z_COORD	int
:	O
bpt	struct
.	O
z	double
=	O
value	pointer
;	O
break	O
;	O
case	O
DXF_POLYLINE	int
:	O
case	O
DXF_3DFACE	int
:	O
case	O
DXF_INSERT	int
:	O
default	O
:	O
if	O
(	O
code	pointer
==	O
0	int
)	O
{	O
state	int
=	O
STATE_ENTITIES	int
;	O
PushToken	function
(	O
id	enum
,	O
value	pointer
,	O
cp	array
,	O
code	pointer
,	O
string	union
)	O
;	O
}	O
break	O
;	O
}	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
ArbitraryAxis	function
(	O
VPoint	struct
*	O
normal	struct
,	O
VMatrix	struct
*	O
out	pointer
)	O
{	O
double	O
minval	double
=	O
1.0	int
/	O
64.0	int
,	O
d	long
;	O
VPoint	struct
Ax	struct
,	O
Ay	struct
,	O
Az	struct
;	O
d	long
=	O
sqrt	function
(	O
normal	struct
->	O
x	double
*	O
normal	struct
->	O
x	double
+	O
normal	struct
->	O
y	double
*	O
normal	struct
->	O
y	double
+	O
normal	struct
->	O
z	double
*	O
normal	struct
->	O
z	double
)	O
;	O
Az	struct
.	O
x	double
=	O
normal	struct
->	O
x	double
/	O
d	long
;	O
Az	struct
.	O
y	double
=	O
normal	struct
->	O
y	double
/	O
d	long
;	O
Az	struct
.	O
z	double
=	O
normal	struct
->	O
z	double
/	O
d	long
;	O
if	O
(	O
fabs	function
(	O
Az	struct
.	O
x	double
)	O
<	O
minval	double
&&	O
fabs	function
(	O
Az	struct
.	O
y	double
)	O
<	O
minval	double
)	O
{	O
VCrossProd	function
(	O
&	O
_VUnitVectorJ	struct
,	O
&	O
Az	struct
,	O
&	O
Ax	struct
)	O
;	O
}	O
else	O
{	O
VCrossProd	function
(	O
&	O
_VUnitVectorK	struct
,	O
&	O
Az	struct
,	O
&	O
Ax	struct
)	O
;	O
}	O
VCrossProd	function
(	O
&	O
Az	struct
,	O
&	O
Ax	struct
,	O
&	O
Ay	struct
)	O
;	O
out	pointer
->	O
m	array
[	O
0	int
]	O
[	O
0	int
]	O
=	O
Ax	struct
.	O
x	double
;	O
out	pointer
->	O
m	array
[	O
0	int
]	O
[	O
1	int
]	O
=	O
Ax	struct
.	O
y	double
;	O
out	pointer
->	O
m	array
[	O
0	int
]	O
[	O
2	int
]	O
=	O
Ax	struct
.	O
z	double
;	O
out	pointer
->	O
m	array
[	O
1	int
]	O
[	O
0	int
]	O
=	O
Ay	struct
.	O
x	double
;	O
out	pointer
->	O
m	array
[	O
1	int
]	O
[	O
1	int
]	O
=	O
Ay	struct
.	O
y	double
;	O
out	pointer
->	O
m	array
[	O
1	int
]	O
[	O
2	int
]	O
=	O
Ay	struct
.	O
z	double
;	O
out	pointer
->	O
m	array
[	O
2	int
]	O
[	O
0	int
]	O
=	O
Az	struct
.	O
x	double
;	O
out	pointer
->	O
m	array
[	O
2	int
]	O
[	O
1	int
]	O
=	O
Az	struct
.	O
y	double
;	O
out	pointer
->	O
m	array
[	O
2	int
]	O
[	O
2	int
]	O
=	O
Az	struct
.	O
z	double
;	O
out	pointer
->	O
m	array
[	O
3	int
]	O
[	O
0	int
]	O
=	O
out	pointer
->	O
m	array
[	O
3	int
]	O
[	O
1	int
]	O
=	O
out	pointer
->	O
m	array
[	O
3	int
]	O
[	O
2	int
]	O
=	O
0.0	int
;	O
out	pointer
->	O
m	array
[	O
0	int
]	O
[	O
3	int
]	O
=	O
out	pointer
->	O
m	array
[	O
1	int
]	O
[	O
3	int
]	O
=	O
out	pointer
->	O
m	array
[	O
2	int
]	O
[	O
3	int
]	O
=	O
0.0	int
;	O
out	pointer
->	O
m	array
[	O
3	int
]	O
[	O
3	int
]	O
=	O
1.0	int
;	O
}	O
