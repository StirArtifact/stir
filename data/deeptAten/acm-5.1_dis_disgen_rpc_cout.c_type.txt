static	O
char	O
rcsid	array
[	O
]	O
=	O
"$Id: rpc_cout.c,v 1.1.1.1 2005/10/28 14:46:46 k0ro Exp $"	pointer
;	O
static	O
void	O
print_header	function
(	O
)	O
,	O
print_trailer	function
(	O
)	O
,	O
space	function
(	O
)	O
,	O
emit_enum	function
(	O
)	O
,	O
emit_union	function
(	O
)	O
,	O
emit_struct	function
(	O
)	O
,	O
emit_typedef	function
(	O
)	O
,	O
print_stat	function
(	O
)	O
;	O
void	O
emit	function
(	O
def	union
)	O
definition	struct
*	O
def	union
;	O
{	O
if	O
(	O
def	union
->	O
def_kind	enum
==	O
DEF_PROGRAM	int
||	O
def	union
->	O
def_kind	enum
==	O
DEF_CONST	int
)	O
{	O
return	O
;	O
}	O
print_header	function
(	O
def	union
)	O
;	O
switch	O
(	O
def	union
->	O
def_kind	enum
)	O
{	O
case	O
DEF_UNION	int
:	O
emit_union	function
(	O
def	union
)	O
;	O
break	O
;	O
case	O
DEF_ENUM	int
:	O
emit_enum	function
(	O
def	union
)	O
;	O
break	O
;	O
case	O
DEF_STRUCT	int
:	O
emit_struct	function
(	O
def	union
)	O
;	O
break	O
;	O
case	O
DEF_TYPEDEF	int
:	O
emit_typedef	function
(	O
def	union
)	O
;	O
break	O
;	O
}	O
print_trailer	function
(	O
)	O
;	O
}	O
static	O
findtype	function
(	O
def	union
,	O
type	pointer
)	O
definition	struct
*	O
def	union
;	O
char	O
*	O
type	pointer
;	O
{	O
if	O
(	O
def	union
->	O
def_kind	enum
==	O
DEF_PROGRAM	int
||	O
def	union
->	O
def_kind	enum
==	O
DEF_CONST	int
)	O
{	O
return	O
(	O
0	int
)	O
;	O
}	O
else	O
{	O
return	O
(	O
streq	function
(	O
def	union
->	O
def_name	pointer
,	O
type	pointer
)	O
)	O
;	O
}	O
}	O
static	O
undefined	function
(	O
type	pointer
)	O
char	O
*	O
type	pointer
;	O
{	O
definition	struct
*	O
def	union
;	O
def	union
=	O
(	O
definition	struct
*	O
)	O
FINDVAL	O
(	O
defined	pointer
,	O
type	pointer
,	O
findtype	function
)	O
;	O
return	O
(	O
def	union
==	O
NULL	O
)	O
;	O
}	O
static	O
void	O
print_header	function
(	O
def	union
)	O
definition	struct
*	O
def	union
;	O
{	O
space	function
(	O
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"bool_t\n"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"xdr_%s(xdrs, objp)\n"	pointer
,	O
def	union
->	O
def_name	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\tXDR *xdrs;\n"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\t%s "	pointer
,	O
def	union
->	O
def_name	pointer
)	O
;	O
if	O
(	O
def	union
->	O
def_kind	enum
!=	O
DEF_TYPEDEF	int
||	O
!	O
isvectordef	function
(	O
def	union
->	O
def	union
.	O
ty	struct
.	O
old_type	pointer
,	O
def	union
->	O
def	union
.	O
ty	struct
.	O
rel	enum
)	O
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
"*"	pointer
)	O
;	O
}	O
f_print	O
(	O
fout	pointer
,	O
"objp;\n"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"{\n"	pointer
)	O
;	O
}	O
static	O
void	O
print_trailer	function
(	O
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
"\treturn (TRUE);\n"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"}\n"	pointer
)	O
;	O
space	function
(	O
)	O
;	O
}	O
static	O
void	O
print_ifopen	function
(	O
indent	int
,	O
name	pointer
)	O
int	O
indent	int
;	O
char	O
*	O
name	pointer
;	O
{	O
tabify	function
(	O
fout	pointer
,	O
indent	int
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"if (!xdr_%s(xdrs"	pointer
,	O
name	pointer
)	O
;	O
}	O
static	O
void	O
print_ifarg	function
(	O
arg	pointer
)	O
char	O
*	O
arg	pointer
;	O
{	O
f_print	O
(	O
fout	pointer
,	O
", %s"	pointer
,	O
arg	pointer
)	O
;	O
}	O
static	O
void	O
print_ifsizeof	function
(	O
prefix	pointer
,	O
type	pointer
)	O
char	O
*	O
prefix	pointer
;	O
char	O
*	O
type	pointer
;	O
{	O
if	O
(	O
streq	function
(	O
type	pointer
,	O
"bool"	pointer
)	O
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
", sizeof(bool_t), xdr_bool"	pointer
)	O
;	O
}	O
else	O
{	O
f_print	O
(	O
fout	pointer
,	O
", sizeof("	pointer
)	O
;	O
if	O
(	O
undefined	function
(	O
type	pointer
)	O
&&	O
prefix	pointer
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
"%s "	pointer
,	O
prefix	pointer
)	O
;	O
}	O
f_print	O
(	O
fout	pointer
,	O
"%s), xdr_%s"	pointer
,	O
type	pointer
,	O
type	pointer
)	O
;	O
}	O
}	O
static	O
void	O
print_ifclose	function
(	O
indent	int
)	O
int	O
indent	int
;	O
{	O
f_print	O
(	O
fout	pointer
,	O
")) {\n"	pointer
)	O
;	O
tabify	function
(	O
fout	pointer
,	O
indent	int
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\treturn (FALSE);\n"	pointer
)	O
;	O
tabify	function
(	O
fout	pointer
,	O
indent	int
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"}\n"	pointer
)	O
;	O
}	O
static	O
void	O
space	function
(	O
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
"\n\n"	pointer
)	O
;	O
}	O
static	O
void	O
print_ifstat	function
(	O
indent	int
,	O
prefix	pointer
,	O
type	pointer
,	O
rel	enum
,	O
amax	pointer
,	O
objname	pointer
,	O
name	pointer
)	O
int	O
indent	int
;	O
char	O
*	O
prefix	pointer
;	O
char	O
*	O
type	pointer
;	O
relation	enum
rel	enum
;	O
char	O
*	O
amax	pointer
;	O
char	O
*	O
objname	pointer
;	O
char	O
*	O
name	pointer
;	O
{	O
char	O
*	O
alt	pointer
=	O
NULL	O
;	O
switch	O
(	O
rel	enum
)	O
{	O
case	O
REL_POINTER	int
:	O
print_ifopen	function
(	O
indent	int
,	O
"pointer"	pointer
)	O
;	O
print_ifarg	function
(	O
"(char **)"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"%s"	pointer
,	O
objname	pointer
)	O
;	O
print_ifsizeof	function
(	O
prefix	pointer
,	O
type	pointer
)	O
;	O
break	O
;	O
case	O
REL_VECTOR	int
:	O
if	O
(	O
streq	function
(	O
type	pointer
,	O
"string"	pointer
)	O
)	O
{	O
alt	pointer
=	O
"string"	pointer
;	O
}	O
else	O
if	O
(	O
streq	function
(	O
type	pointer
,	O
"opaque"	pointer
)	O
)	O
{	O
alt	pointer
=	O
"opaque"	pointer
;	O
}	O
if	O
(	O
alt	pointer
)	O
{	O
print_ifopen	function
(	O
indent	int
,	O
alt	pointer
)	O
;	O
print_ifarg	function
(	O
objname	pointer
)	O
;	O
}	O
else	O
{	O
print_ifopen	function
(	O
indent	int
,	O
"vector"	pointer
)	O
;	O
print_ifarg	function
(	O
"(char *)"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"%s"	pointer
,	O
objname	pointer
)	O
;	O
}	O
print_ifarg	function
(	O
amax	pointer
)	O
;	O
if	O
(	O
!	O
alt	pointer
)	O
{	O
print_ifsizeof	function
(	O
prefix	pointer
,	O
type	pointer
)	O
;	O
}	O
break	O
;	O
case	O
REL_ARRAY	int
:	O
if	O
(	O
streq	function
(	O
type	pointer
,	O
"string"	pointer
)	O
)	O
{	O
alt	pointer
=	O
"string"	pointer
;	O
}	O
else	O
if	O
(	O
streq	function
(	O
type	pointer
,	O
"opaque"	pointer
)	O
)	O
{	O
alt	pointer
=	O
"bytes"	pointer
;	O
}	O
if	O
(	O
streq	function
(	O
type	pointer
,	O
"string"	pointer
)	O
)	O
{	O
print_ifopen	function
(	O
indent	int
,	O
alt	pointer
)	O
;	O
print_ifarg	function
(	O
objname	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
alt	pointer
)	O
{	O
print_ifopen	function
(	O
indent	int
,	O
alt	pointer
)	O
;	O
}	O
else	O
{	O
print_ifopen	function
(	O
indent	int
,	O
"array"	pointer
)	O
;	O
}	O
print_ifarg	function
(	O
"(char **)"	pointer
)	O
;	O
if	O
(	O
*	O
objname	pointer
==	O
'&'	O
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
"%s.%s_val, (u_int *)%s.%s_len"	pointer
,	O
objname	pointer
,	O
name	pointer
,	O
objname	pointer
,	O
name	pointer
)	O
;	O
}	O
else	O
{	O
f_print	O
(	O
fout	pointer
,	O
"&%s->%s_val, (u_int *)&%s->%s_len"	pointer
,	O
objname	pointer
,	O
name	pointer
,	O
objname	pointer
,	O
name	pointer
)	O
;	O
}	O
}	O
print_ifarg	function
(	O
amax	pointer
)	O
;	O
if	O
(	O
!	O
alt	pointer
)	O
{	O
print_ifsizeof	function
(	O
prefix	pointer
,	O
type	pointer
)	O
;	O
}	O
break	O
;	O
case	O
REL_ARRAY2	int
:	O
if	O
(	O
streq	function
(	O
type	pointer
,	O
"string"	pointer
)	O
)	O
{	O
alt	pointer
=	O
"string"	pointer
;	O
}	O
else	O
if	O
(	O
streq	function
(	O
type	pointer
,	O
"opaque"	pointer
)	O
)	O
{	O
alt	pointer
=	O
"bytes"	pointer
;	O
}	O
if	O
(	O
streq	function
(	O
type	pointer
,	O
"string"	pointer
)	O
)	O
{	O
print_ifopen	function
(	O
indent	int
,	O
alt	pointer
)	O
;	O
print_ifarg	function
(	O
objname	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
alt	pointer
)	O
{	O
print_ifopen	function
(	O
indent	int
,	O
alt	pointer
)	O
;	O
}	O
else	O
{	O
print_ifopen	function
(	O
indent	int
,	O
"var_array"	pointer
)	O
;	O
}	O
print_ifarg	function
(	O
"(char **)"	pointer
)	O
;	O
if	O
(	O
*	O
objname	pointer
==	O
'&'	O
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
"%s,\n\t\tobjp->%s, objp->%s"	pointer
,	O
objname	pointer
,	O
amax	pointer
,	O
amax	pointer
)	O
;	O
}	O
else	O
{	O
f_print	O
(	O
fout	pointer
,	O
"&%s,\n\t\tobjp->%s, objp->%s"	pointer
,	O
objname	pointer
,	O
amax	pointer
,	O
amax	pointer
)	O
;	O
}	O
}	O
if	O
(	O
!	O
alt	pointer
)	O
{	O
print_ifsizeof	function
(	O
prefix	pointer
,	O
type	pointer
)	O
;	O
}	O
break	O
;	O
case	O
REL_ALIAS	int
:	O
print_ifopen	function
(	O
indent	int
,	O
type	pointer
)	O
;	O
print_ifarg	function
(	O
objname	pointer
)	O
;	O
break	O
;	O
}	O
print_ifclose	function
(	O
indent	int
)	O
;	O
}	O
static	O
void	O
emit_enum	function
(	O
def	union
)	O
definition	struct
*	O
def	union
;	O
{	O
print_ifopen	function
(	O
1	int
,	O
"enum"	pointer
)	O
;	O
print_ifarg	function
(	O
"(enum_t *)objp"	pointer
)	O
;	O
print_ifclose	function
(	O
1	int
)	O
;	O
}	O
static	O
void	O
emit_union	function
(	O
def	union
)	O
definition	struct
*	O
def	union
;	O
{	O
declaration	struct
*	O
dflt	pointer
;	O
case_list	struct
*	O
cl	pointer
;	O
declaration	struct
*	O
cs	pointer
;	O
char	O
*	O
object	pointer
;	O
char	O
*	O
format	pointer
=	O
"&objp->%s_u.%s"	pointer
;	O
print_stat	function
(	O
&	O
def	union
->	O
def	union
.	O
un	struct
.	O
enum_decl	struct
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\tswitch (objp->%s) {\n"	pointer
,	O
def	union
->	O
def	union
.	O
un	struct
.	O
enum_decl	struct
.	O
name	pointer
)	O
;	O
for	O
(	O
cl	pointer
=	O
def	union
->	O
def	union
.	O
un	struct
.	O
cases	pointer
;	O
cl	pointer
!=	O
NULL	O
;	O
cl	pointer
=	O
cl	pointer
->	O
next	pointer
)	O
{	O
cs	pointer
=	O
&	O
cl	pointer
->	O
case_decl	struct
;	O
f_print	O
(	O
fout	pointer
,	O
"\tcase %s:\n"	pointer
,	O
cl	pointer
->	O
case_name	pointer
)	O
;	O
if	O
(	O
!	O
streq	function
(	O
cs	pointer
->	O
type	pointer
,	O
"void"	pointer
)	O
)	O
{	O
object	pointer
=	O
alloc	O
(	O
strlen	O
(	O
def	union
->	O
def_name	pointer
)	O
+	O
strlen	O
(	O
format	pointer
)	O
+	O
strlen	O
(	O
cs	pointer
->	O
name	pointer
)	O
+	O
1	int
)	O
;	O
s_print	O
(	O
object	pointer
,	O
format	pointer
,	O
def	union
->	O
def_name	pointer
,	O
cs	pointer
->	O
name	pointer
)	O
;	O
print_ifstat	function
(	O
2	int
,	O
cs	pointer
->	O
prefix	pointer
,	O
cs	pointer
->	O
type	pointer
,	O
cs	pointer
->	O
rel	enum
,	O
cs	pointer
->	O
array_max	pointer
,	O
object	pointer
,	O
cs	pointer
->	O
name	pointer
)	O
;	O
free	function
(	O
object	pointer
)	O
;	O
}	O
f_print	O
(	O
fout	pointer
,	O
"\t\tbreak;\n"	pointer
)	O
;	O
}	O
dflt	pointer
=	O
def	union
->	O
def	union
.	O
un	struct
.	O
default_decl	pointer
;	O
if	O
(	O
dflt	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
streq	function
(	O
dflt	pointer
->	O
type	pointer
,	O
"void"	pointer
)	O
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
"\tdefault:\n"	pointer
)	O
;	O
object	pointer
=	O
alloc	O
(	O
strlen	O
(	O
def	union
->	O
def_name	pointer
)	O
+	O
strlen	O
(	O
format	pointer
)	O
+	O
strlen	O
(	O
dflt	pointer
->	O
name	pointer
)	O
+	O
1	int
)	O
;	O
s_print	O
(	O
object	pointer
,	O
format	pointer
,	O
def	union
->	O
def_name	pointer
,	O
dflt	pointer
->	O
name	pointer
)	O
;	O
print_ifstat	function
(	O
2	int
,	O
dflt	pointer
->	O
prefix	pointer
,	O
dflt	pointer
->	O
type	pointer
,	O
dflt	pointer
->	O
rel	enum
,	O
dflt	pointer
->	O
array_max	pointer
,	O
object	pointer
,	O
dflt	pointer
->	O
name	pointer
)	O
;	O
free	function
(	O
object	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\t\tbreak;\n"	pointer
)	O
;	O
}	O
}	O
else	O
{	O
f_print	O
(	O
fout	pointer
,	O
"\tdefault:\n"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\t\treturn (FALSE);\n"	pointer
)	O
;	O
}	O
f_print	O
(	O
fout	pointer
,	O
"\t}\n"	pointer
)	O
;	O
}	O
static	O
void	O
emit_struct	function
(	O
def	union
)	O
definition	struct
*	O
def	union
;	O
{	O
decl_list	struct
*	O
dl	pointer
;	O
int	O
size	int
=	O
0	int
,	O
szof	int
;	O
definition	struct
*	O
d	pointer
;	O
char	O
buf	array
[	O
128	int
]	O
;	O
for	O
(	O
dl	pointer
=	O
def	union
->	O
def	union
.	O
st	struct
.	O
decls	pointer
;	O
dl	pointer
!=	O
NULL	O
;	O
dl	pointer
=	O
dl	pointer
->	O
next	pointer
)	O
{	O
print_stat	function
(	O
&	O
dl	pointer
->	O
decl	struct
)	O
;	O
if	O
(	O
dl	pointer
->	O
decl	struct
.	O
storage	int
==	O
-	O
1	int
)	O
{	O
d	pointer
=	O
(	O
definition	struct
*	O
)	O
FINDVAL	O
(	O
defined	pointer
,	O
dl	pointer
->	O
decl	struct
.	O
type	pointer
,	O
findtype	function
)	O
;	O
if	O
(	O
d	pointer
)	O
{	O
if	O
(	O
d	pointer
->	O
def_kind	enum
==	O
DEF_TYPEDEF	int
)	O
{	O
szof	int
=	O
d	pointer
->	O
def	union
.	O
ty	struct
.	O
old_storage	int
;	O
}	O
else	O
{	O
szof	int
=	O
d	pointer
->	O
def	union
.	O
st	struct
.	O
storage	int
;	O
}	O
if	O
(	O
szof	int
!=	O
-	O
1	int
)	O
{	O
if	O
(	O
dl	pointer
->	O
decl	struct
.	O
rel	enum
==	O
REL_ARRAY2	int
)	O
{	O
sprintf	function
(	O
buf	array
,	O
"( %s * %d )"	pointer
,	O
dl	pointer
->	O
decl	struct
.	O
array_max	pointer
,	O
szof	int
)	O
;	O
}	O
else	O
{	O
size	int
+=	O
szof	int
;	O
sprintf	function
(	O
buf	array
,	O
"%d"	pointer
,	O
szof	int
)	O
;	O
}	O
fprintf	function
(	O
stderr	pointer
,	O
"  %s %s\n"	pointer
,	O
dl	pointer
->	O
decl	struct
.	O
type	pointer
,	O
buf	array
)	O
;	O
}	O
else	O
{	O
}	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"* could not determine size of \"%s\"\n"	pointer
,	O
dl	pointer
->	O
decl	struct
.	O
type	pointer
)	O
;	O
}	O
}	O
else	O
{	O
size	int
+=	O
dl	pointer
->	O
decl	struct
.	O
storage	int
;	O
fprintf	function
(	O
stderr	pointer
,	O
"  %s %d\n"	pointer
,	O
dl	pointer
->	O
decl	struct
.	O
type	pointer
,	O
dl	pointer
->	O
decl	struct
.	O
storage	int
)	O
;	O
}	O
}	O
fprintf	function
(	O
stderr	pointer
,	O
"%s\t%d\n\n"	pointer
,	O
def	union
->	O
def_name	pointer
,	O
size	int
)	O
;	O
def	union
->	O
def	union
.	O
st	struct
.	O
storage	int
=	O
size	int
;	O
}	O
static	O
void	O
emit_typedef	function
(	O
def	union
)	O
definition	struct
*	O
def	union
;	O
{	O
char	O
*	O
prefix	pointer
=	O
def	union
->	O
def	union
.	O
ty	struct
.	O
old_prefix	pointer
;	O
char	O
*	O
type	pointer
=	O
def	union
->	O
def	union
.	O
ty	struct
.	O
old_type	pointer
;	O
char	O
*	O
amax	pointer
=	O
def	union
->	O
def	union
.	O
ty	struct
.	O
array_max	pointer
;	O
relation	enum
rel	enum
=	O
def	union
->	O
def	union
.	O
ty	struct
.	O
rel	enum
;	O
print_ifstat	function
(	O
1	int
,	O
prefix	pointer
,	O
type	pointer
,	O
rel	enum
,	O
amax	pointer
,	O
"objp"	pointer
,	O
def	union
->	O
def_name	pointer
)	O
;	O
}	O
static	O
void	O
print_stat	function
(	O
dec	pointer
)	O
declaration	struct
*	O
dec	pointer
;	O
{	O
char	O
*	O
prefix	pointer
=	O
dec	pointer
->	O
prefix	pointer
;	O
char	O
*	O
type	pointer
=	O
dec	pointer
->	O
type	pointer
;	O
char	O
*	O
amax	pointer
=	O
dec	pointer
->	O
array_max	pointer
;	O
relation	enum
rel	enum
=	O
dec	pointer
->	O
rel	enum
;	O
char	O
name	pointer
[	O
256	int
]	O
;	O
if	O
(	O
isvectordef	function
(	O
type	pointer
,	O
rel	enum
)	O
)	O
{	O
s_print	O
(	O
name	pointer
,	O
"objp->%s"	pointer
,	O
dec	pointer
->	O
name	pointer
)	O
;	O
}	O
else	O
{	O
s_print	O
(	O
name	pointer
,	O
"&objp->%s"	pointer
,	O
dec	pointer
->	O
name	pointer
)	O
;	O
}	O
print_ifstat	function
(	O
1	int
,	O
prefix	pointer
,	O
type	pointer
,	O
rel	enum
,	O
amax	pointer
,	O
name	pointer
,	O
dec	pointer
->	O
name	pointer
)	O
;	O
}	O
