WInput	struct
*	O
cmdline	pointer
;	O
static	O
int	O
examine_cd	function
(	O
char	O
*	O
path	pointer
)	O
{	O
int	O
result	long
,	O
qlen	int
;	O
char	O
*	O
path_tilde	pointer
;	O
char	O
*	O
p	pointer
,	O
*	O
q	pointer
,	O
*	O
r	pointer
,	O
*	O
s	pointer
,	O
c	int
;	O
const	O
char	O
*	O
t	long
;	O
path_tilde	pointer
=	O
tilde_expand	function
(	O
path	pointer
)	O
;	O
qlen	int
=	O
strlen	function
(	O
path_tilde	pointer
)	O
+	O
MC_MAXPATHLEN	O
;	O
q	pointer
=	O
g_malloc	function
(	O
qlen	int
)	O
;	O
for	O
(	O
p	pointer
=	O
path_tilde	pointer
,	O
r	pointer
=	O
q	pointer
;	O
*	O
p	pointer
&&	O
r	pointer
<	O
q	pointer
+	O
MC_MAXPATHLEN	O
;	O
)	O
{	O
if	O
(	O
*	O
p	pointer
!=	O
'$'	O
||	O
(	O
p	pointer
[	O
1	int
]	O
==	O
'['	O
||	O
p	pointer
[	O
1	int
]	O
==	O
'('	O
)	O
)	O
*	O
(	O
r	pointer
++	O
)	O
=	O
*	O
(	O
p	pointer
++	O
)	O
;	O
else	O
{	O
p	pointer
++	O
;	O
if	O
(	O
*	O
p	pointer
==	O
'{'	O
)	O
{	O
p	pointer
++	O
;	O
s	pointer
=	O
strchr	function
(	O
p	pointer
,	O
'}'	O
)	O
;	O
}	O
else	O
s	pointer
=	O
NULL	O
;	O
if	O
(	O
s	pointer
==	O
NULL	O
)	O
s	pointer
=	O
strchr	function
(	O
p	pointer
,	O
PATH_SEP	char
)	O
;	O
if	O
(	O
s	pointer
==	O
NULL	O
)	O
s	pointer
=	O
strchr	function
(	O
p	pointer
,	O
0	int
)	O
;	O
c	int
=	O
*	O
s	pointer
;	O
*	O
s	pointer
=	O
0	int
;	O
t	long
=	O
getenv	function
(	O
p	pointer
)	O
;	O
*	O
s	pointer
=	O
c	int
;	O
if	O
(	O
t	long
==	O
NULL	O
)	O
{	O
*	O
(	O
r	pointer
++	O
)	O
=	O
'$'	O
;	O
if	O
(	O
*	O
(	O
p	pointer
-	O
1	int
)	O
!=	O
'$'	O
)	O
*	O
(	O
r	pointer
++	O
)	O
=	O
'{'	O
;	O
}	O
else	O
{	O
if	O
(	O
r	pointer
+	O
strlen	function
(	O
t	long
)	O
<	O
q	pointer
+	O
MC_MAXPATHLEN	O
)	O
{	O
strcpy	function
(	O
r	pointer
,	O
t	long
)	O
;	O
r	pointer
=	O
strchr	function
(	O
r	pointer
,	O
0	int
)	O
;	O
}	O
if	O
(	O
*	O
s	pointer
==	O
'}'	O
)	O
p	pointer
=	O
s	pointer
+	O
1	int
;	O
else	O
p	pointer
=	O
s	pointer
;	O
}	O
}	O
}	O
*	O
r	pointer
=	O
0	int
;	O
result	long
=	O
do_cd	function
(	O
q	pointer
,	O
cd_parse_command	int
)	O
;	O
if	O
(	O
*	O
q	pointer
!=	O
PATH_SEP	char
&&	O
!	O
result	long
)	O
{	O
char	O
*	O
const	O
cdpath	pointer
=	O
g_strdup	function
(	O
getenv	function
(	O
"CDPATH"	pointer
)	O
)	O
;	O
char	O
*	O
p	pointer
=	O
cdpath	pointer
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
c	int
=	O
0	int
;	O
else	O
c	int
=	O
':'	O
;	O
while	O
(	O
!	O
result	long
&&	O
c	int
==	O
':'	O
)	O
{	O
s	pointer
=	O
strchr	function
(	O
p	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
s	pointer
==	O
NULL	O
)	O
s	pointer
=	O
strchr	function
(	O
p	pointer
,	O
0	int
)	O
;	O
c	int
=	O
*	O
s	pointer
;	O
*	O
s	pointer
=	O
0	int
;	O
if	O
(	O
*	O
p	pointer
)	O
{	O
r	pointer
=	O
concat_dir_and_file	function
(	O
p	pointer
,	O
q	pointer
)	O
;	O
result	long
=	O
do_cd	function
(	O
r	pointer
,	O
cd_parse_command	int
)	O
;	O
g_free	function
(	O
r	pointer
)	O
;	O
}	O
*	O
s	pointer
=	O
c	int
;	O
p	pointer
=	O
s	pointer
+	O
1	int
;	O
}	O
g_free	function
(	O
cdpath	pointer
)	O
;	O
}	O
g_free	function
(	O
q	pointer
)	O
;	O
g_free	function
(	O
path_tilde	pointer
)	O
;	O
return	O
result	long
;	O
}	O
void	O
do_cd_command	function
(	O
char	O
*	O
cmd	pointer
)	O
{	O
int	O
len	int
;	O
len	int
=	O
strlen	function
(	O
cmd	pointer
)	O
-	O
1	int
;	O
while	O
(	O
len	int
>=	O
0	int
&&	O
(	O
cmd	pointer
[	O
len	int
]	O
==	O
' '	O
||	O
cmd	pointer
[	O
len	int
]	O
==	O
'\t'	O
||	O
cmd	pointer
[	O
len	int
]	O
==	O
'\n'	O
)	O
)	O
{	O
cmd	pointer
[	O
len	int
]	O
=	O
0	int
;	O
len	int
--	O
;	O
}	O
if	O
(	O
cmd	pointer
[	O
2	int
]	O
==	O
0	int
)	O
cmd	pointer
=	O
"cd "	pointer
;	O
if	O
(	O
get_current_type	function
(	O
)	O
==	O
view_tree	int
)	O
{	O
if	O
(	O
cmd	pointer
[	O
0	int
]	O
==	O
0	int
)	O
{	O
sync_tree	function
(	O
home_dir	pointer
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
cmd	pointer
+	O
3	int
,	O
".."	pointer
)	O
==	O
0	int
)	O
{	O
char	O
*	O
dir	pointer
=	O
current_panel	pointer
->	O
cwd	short
;	O
int	O
len	int
=	O
strlen	function
(	O
dir	pointer
)	O
;	O
while	O
(	O
len	int
&&	O
dir	pointer
[	O
--	O
len	int
]	O
!=	O
PATH_SEP	char
)	O
;	O
dir	pointer
[	O
len	int
]	O
=	O
0	int
;	O
if	O
(	O
len	int
)	O
sync_tree	function
(	O
dir	pointer
)	O
;	O
else	O
sync_tree	function
(	O
PATH_SEP_STR	pointer
)	O
;	O
}	O
else	O
if	O
(	O
cmd	pointer
[	O
3	int
]	O
==	O
PATH_SEP	char
)	O
{	O
sync_tree	function
(	O
cmd	pointer
+	O
3	int
)	O
;	O
}	O
else	O
{	O
char	O
*	O
old	pointer
=	O
current_panel	pointer
->	O
cwd	short
;	O
char	O
*	O
new	pointer
;	O
new	pointer
=	O
concat_dir_and_file	function
(	O
old	pointer
,	O
cmd	pointer
+	O
3	int
)	O
;	O
sync_tree	function
(	O
new	pointer
)	O
;	O
g_free	function
(	O
new	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
examine_cd	function
(	O
&	O
cmd	pointer
[	O
3	int
]	O
)	O
)	O
{	O
char	O
*	O
d	double
=	O
strip_password	function
(	O
g_strdup	function
(	O
&	O
cmd	pointer
[	O
3	int
]	O
)	O
,	O
1	int
)	O
;	O
message	pointer
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
" Cannot chdir to \"%s\" \n %s "	pointer
)	O
,	O
d	double
,	O
unix_error_string	function
(	O
errno	O
)	O
)	O
;	O
g_free	function
(	O
d	double
)	O
;	O
return	O
;	O
}	O
}	O
static	O
cb_ret_t	enum
enter	function
(	O
WInput	struct
*	O
cmdline	pointer
)	O
{	O
char	O
*	O
cmd	pointer
=	O
cmdline	pointer
->	O
buffer	pointer
;	O
if	O
(	O
!	O
command_prompt	int
)	O
return	O
MSG_HANDLED	int
;	O
while	O
(	O
*	O
cmd	pointer
==	O
' '	O
||	O
*	O
cmd	pointer
==	O
'\t'	O
||	O
*	O
cmd	pointer
==	O
'\n'	O
)	O
cmd	pointer
++	O
;	O
if	O
(	O
!	O
*	O
cmd	pointer
)	O
return	O
MSG_HANDLED	int
;	O
if	O
(	O
strncmp	function
(	O
cmd	pointer
,	O
"cd "	pointer
,	O
3	int
)	O
==	O
0	int
||	O
strcmp	function
(	O
cmd	pointer
,	O
"cd"	pointer
)	O
==	O
0	int
)	O
{	O
do_cd_command	function
(	O
cmd	pointer
)	O
;	O
new_input	function
(	O
cmdline	pointer
)	O
;	O
return	O
MSG_HANDLED	int
;	O
}	O
else	O
{	O
char	O
*	O
command	pointer
,	O
*	O
s	pointer
;	O
size_t	long
i	array
,	O
j	long
,	O
cmd_len	long
;	O
if	O
(	O
!	O
vfs_current_is_local	function
(	O
)	O
)	O
{	O
message	pointer
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
" Cannot execute commands on non-local filesystems"	pointer
)	O
)	O
;	O
return	O
MSG_NOT_HANDLED	int
;	O
}	O
if	O
(	O
use_subshell	int
&&	O
subshell_state	enum
!=	O
INACTIVE	int
)	O
{	O
message	pointer
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
" The shell is already running a command "	pointer
)	O
)	O
;	O
return	O
MSG_NOT_HANDLED	int
;	O
}	O
cmd_len	long
=	O
strlen	function
(	O
cmd	pointer
)	O
;	O
command	pointer
=	O
g_malloc	function
(	O
cmd_len	long
+	O
1	int
)	O
;	O
command	pointer
[	O
0	int
]	O
=	O
0	int
;	O
for	O
(	O
i	array
=	O
j	long
=	O
0	int
;	O
i	array
<	O
cmd_len	long
;	O
i	array
++	O
)	O
{	O
if	O
(	O
cmd	pointer
[	O
i	array
]	O
==	O
'%'	O
)	O
{	O
i	array
++	O
;	O
s	pointer
=	O
expand_format	function
(	O
NULL	O
,	O
cmd	pointer
[	O
i	array
]	O
,	O
1	int
)	O
;	O
command	pointer
=	O
g_realloc	function
(	O
command	pointer
,	O
j	long
+	O
strlen	function
(	O
s	pointer
)	O
+	O
cmd_len	long
-	O
i	array
+	O
1	int
)	O
;	O
strcpy	function
(	O
command	pointer
+	O
j	long
,	O
s	pointer
)	O
;	O
g_free	function
(	O
s	pointer
)	O
;	O
j	long
=	O
strlen	function
(	O
command	pointer
)	O
;	O
}	O
else	O
{	O
command	pointer
[	O
j	long
]	O
=	O
cmd	pointer
[	O
i	array
]	O
;	O
j	long
++	O
;	O
}	O
command	pointer
[	O
j	long
]	O
=	O
0	int
;	O
}	O
new_input	function
(	O
cmdline	pointer
)	O
;	O
shell_execute	function
(	O
command	pointer
,	O
0	int
)	O
;	O
g_free	function
(	O
command	pointer
)	O
;	O
if	O
(	O
quit	int
&	O
SUBSHELL_EXIT	int
)	O
{	O
quiet_quit_cmd	function
(	O
)	O
;	O
return	O
MSG_HANDLED	int
;	O
}	O
if	O
(	O
use_subshell	int
)	O
load_prompt	function
(	O
0	int
,	O
0	int
)	O
;	O
}	O
return	O
MSG_HANDLED	int
;	O
}	O
static	O
cb_ret_t	enum
command_callback	function
(	O
Widget	struct
*	O
w	pointer
,	O
widget_msg_t	enum
msg	pointer
,	O
int	O
parm	int
)	O
{	O
WInput	struct
*	O
cmd	pointer
=	O
(	O
WInput	struct
*	O
)	O
w	pointer
;	O
switch	O
(	O
msg	pointer
)	O
{	O
case	O
WIDGET_FOCUS	int
:	O
return	O
MSG_NOT_HANDLED	int
;	O
case	O
WIDGET_KEY	int
:	O
if	O
(	O
parm	int
==	O
'\n'	O
)	O
{	O
return	O
enter	function
(	O
cmd	pointer
)	O
;	O
}	O
default	O
:	O
return	O
input_callback	function
(	O
w	pointer
,	O
msg	pointer
,	O
parm	int
)	O
;	O
}	O
}	O
WInput	struct
*	O
command_new	function
(	O
int	O
y	short
,	O
int	O
x	array
,	O
int	O
cols	int
)	O
{	O
WInput	struct
*	O
cmd	pointer
;	O
cmd	pointer
=	O
input_new	function
(	O
y	short
,	O
x	array
,	O
DEFAULT_COLOR	O
,	O
cols	int
,	O
""	pointer
,	O
"cmdline"	pointer
)	O
;	O
cmd	pointer
->	O
widget	pointer
.	O
callback	pointer
=	O
command_callback	function
;	O
cmd	pointer
->	O
completion_flags	int
|=	O
INPUT_COMPLETE_COMMANDS	int
;	O
return	O
cmd	pointer
;	O
}	O
void	O
command_insert	function
(	O
WInput	struct
*	O
in	pointer
,	O
const	O
char	O
*	O
text	pointer
,	O
int	O
insert_extra_space	int
)	O
{	O
char	O
*	O
quoted_text	pointer
;	O
quoted_text	pointer
=	O
name_quote	function
(	O
text	pointer
,	O
1	int
)	O
;	O
stuff	function
(	O
in	pointer
,	O
quoted_text	pointer
,	O
insert_extra_space	int
)	O
;	O
g_free	function
(	O
quoted_text	pointer
)	O
;	O
}	O
