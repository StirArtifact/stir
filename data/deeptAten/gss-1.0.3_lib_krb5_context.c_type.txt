static	O
OM_uint32	int
init_request	function
(	O
OM_uint32	int
*	O
minor_status	pointer
,	O
const	O
gss_cred_id_t	pointer
initiator_cred_handle	pointer
,	O
gss_ctx_id_t	pointer
*	O
context_handle	pointer
,	O
const	O
gss_name_t	pointer
target_name	pointer
,	O
const	O
gss_OID	pointer
mech_type	pointer
,	O
OM_uint32	int
req_flags	int
,	O
OM_uint32	int
time_req	int
,	O
const	O
gss_channel_bindings_t	pointer
input_chan_bindings	pointer
,	O
const	O
gss_buffer_t	pointer
input_token	pointer
,	O
gss_OID	pointer
*	O
actual_mech_type	pointer
,	O
gss_buffer_t	pointer
output_token	pointer
,	O
OM_uint32	int
*	O
ret_flags	pointer
,	O
OM_uint32	int
*	O
time_rec	pointer
)	O
{	O
gss_ctx_id_t	pointer
ctx	pointer
=	O
*	O
context_handle	pointer
;	O
_gss_krb5_ctx_t	pointer
k5	pointer
=	O
ctx	pointer
->	O
krb5	O
;	O
char	O
*	O
cksum	pointer
,	O
*	O
der	pointer
;	O
size_t	long
cksumlen	long
,	O
derlen	long
;	O
int	O
rc	int
;	O
OM_uint32	int
maj_stat	int
;	O
Shishi_tkts_hint	O
hint	O
;	O
maj_stat	int
=	O
gss_krb5_canonicalize_name	function
(	O
minor_status	pointer
,	O
target_name	pointer
,	O
GSS_C_NO_OID	O
,	O
&	O
k5	pointer
->	O
peerptr	pointer
)	O
;	O
if	O
(	O
GSS_ERROR	O
(	O
maj_stat	int
)	O
)	O
return	O
maj_stat	int
;	O
memset	function
(	O
&	O
hint	O
,	O
0	int
,	O
sizeof	O
(	O
hint	O
)	O
)	O
;	O
hint	O
.	O
server	O
=	O
k5	pointer
->	O
peerptr	pointer
->	O
value	pointer
;	O
hint	O
.	O
endtime	O
=	O
time_req	int
;	O
k5	pointer
->	O
tkt	pointer
=	O
shishi_tkts_get	function
(	O
shishi_tkts_default	function
(	O
k5	pointer
->	O
sh	pointer
)	O
,	O
&	O
hint	O
)	O
;	O
if	O
(	O
!	O
k5	pointer
->	O
tkt	pointer
)	O
{	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
GSS_KRB5_S_KG_CCACHE_NOMATCH	O
;	O
return	O
GSS_S_NO_CRED	O
;	O
}	O
maj_stat	int
=	O
_gss_krb5_checksum_pack	function
(	O
minor_status	pointer
,	O
initiator_cred_handle	pointer
,	O
context_handle	pointer
,	O
input_chan_bindings	pointer
,	O
req_flags	int
,	O
&	O
cksum	pointer
,	O
&	O
cksumlen	long
)	O
;	O
if	O
(	O
GSS_ERROR	O
(	O
maj_stat	int
)	O
)	O
return	O
maj_stat	int
;	O
rc	int
=	O
shishi_ap_tktoptionsraw	function
(	O
k5	pointer
->	O
sh	pointer
,	O
&	O
k5	pointer
->	O
ap	pointer
,	O
k5	pointer
->	O
tkt	pointer
,	O
SHISHI_APOPTIONS_MUTUAL_REQUIRED	O
,	O
0x8003	int
,	O
cksum	pointer
,	O
cksumlen	long
)	O
;	O
free	function
(	O
cksum	pointer
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
return	O
GSS_S_FAILURE	O
;	O
rc	int
=	O
shishi_authenticator_seqnumber_get	function
(	O
k5	pointer
->	O
sh	pointer
,	O
shishi_ap_authenticator	function
(	O
k5	pointer
->	O
ap	pointer
)	O
,	O
&	O
k5	pointer
->	O
initseqnr	int
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
return	O
GSS_S_FAILURE	O
;	O
rc	int
=	O
shishi_ap_req_der	function
(	O
k5	pointer
->	O
ap	pointer
,	O
&	O
der	pointer
,	O
&	O
derlen	long
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
return	O
GSS_S_FAILURE	O
;	O
rc	int
=	O
_gss_encapsulate_token_prefix	function
(	O
TOK_AP_REQ	pointer
,	O
TOK_LEN	int
,	O
der	pointer
,	O
derlen	long
,	O
GSS_KRB5	O
->	O
elements	pointer
,	O
GSS_KRB5	O
->	O
length	int
,	O
&	O
output_token	pointer
->	O
value	pointer
,	O
&	O
output_token	pointer
->	O
length	int
)	O
;	O
free	function
(	O
der	pointer
)	O
;	O
if	O
(	O
rc	int
!=	O
0	int
)	O
return	O
GSS_S_FAILURE	O
;	O
if	O
(	O
req_flags	int
&	O
GSS_C_MUTUAL_FLAG	int
)	O
return	O
GSS_S_CONTINUE_NEEDED	O
;	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
static	O
OM_uint32	int
init_reply	function
(	O
OM_uint32	int
*	O
minor_status	pointer
,	O
const	O
gss_cred_id_t	pointer
initiator_cred_handle	pointer
,	O
gss_ctx_id_t	pointer
*	O
context_handle	pointer
,	O
const	O
gss_name_t	pointer
target_name	pointer
,	O
const	O
gss_OID	pointer
mech_type	pointer
,	O
OM_uint32	int
req_flags	int
,	O
OM_uint32	int
time_req	int
,	O
const	O
gss_channel_bindings_t	pointer
input_chan_bindings	pointer
,	O
const	O
gss_buffer_t	pointer
input_token	pointer
,	O
gss_OID	pointer
*	O
actual_mech_type	pointer
,	O
gss_buffer_t	pointer
output_token	pointer
,	O
OM_uint32	int
*	O
ret_flags	pointer
,	O
OM_uint32	int
*	O
time_rec	pointer
)	O
{	O
gss_ctx_id_t	pointer
ctx	pointer
=	O
*	O
context_handle	pointer
;	O
_gss_krb5_ctx_t	pointer
k5	pointer
=	O
ctx	pointer
->	O
krb5	O
;	O
OM_uint32	int
tmp_min_stat	int
;	O
gss_buffer_desc	struct
data	struct
;	O
int	O
rc	int
;	O
if	O
(	O
gss_decapsulate_token	function
(	O
input_token	pointer
,	O
GSS_KRB5	O
,	O
&	O
data	struct
)	O
!=	O
GSS_S_COMPLETE	int
)	O
return	O
GSS_S_DEFECTIVE_TOKEN	O
;	O
if	O
(	O
data	struct
.	O
length	int
<	O
TOK_LEN	int
)	O
{	O
gss_release_buffer	function
(	O
&	O
tmp_min_stat	int
,	O
&	O
data	struct
)	O
;	O
return	O
GSS_S_DEFECTIVE_TOKEN	O
;	O
}	O
if	O
(	O
memcmp	function
(	O
data	struct
.	O
value	pointer
,	O
TOK_AP_REP	pointer
,	O
TOK_LEN	int
)	O
!=	O
0	int
)	O
{	O
gss_release_buffer	function
(	O
&	O
tmp_min_stat	int
,	O
&	O
data	struct
)	O
;	O
return	O
GSS_S_DEFECTIVE_TOKEN	O
;	O
}	O
rc	int
=	O
shishi_ap_rep_der_set	function
(	O
k5	pointer
->	O
ap	pointer
,	O
(	O
char	O
*	O
)	O
data	struct
.	O
value	pointer
+	O
TOK_LEN	int
,	O
data	struct
.	O
length	int
-	O
TOK_LEN	int
)	O
;	O
gss_release_buffer	function
(	O
&	O
tmp_min_stat	int
,	O
&	O
data	struct
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
return	O
GSS_S_DEFECTIVE_TOKEN	O
;	O
rc	int
=	O
shishi_ap_rep_verify	function
(	O
k5	pointer
->	O
ap	pointer
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
return	O
GSS_S_DEFECTIVE_TOKEN	O
;	O
rc	int
=	O
shishi_encapreppart_seqnumber_get	function
(	O
k5	pointer
->	O
sh	pointer
,	O
shishi_ap_encapreppart	function
(	O
k5	pointer
->	O
ap	pointer
)	O
,	O
&	O
k5	pointer
->	O
acceptseqnr	int
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
{	O
k5	pointer
->	O
acceptseqnr	int
=	O
0	int
;	O
}	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
OM_uint32	int
gss_krb5_init_sec_context	function
(	O
OM_uint32	int
*	O
minor_status	pointer
,	O
const	O
gss_cred_id_t	pointer
initiator_cred_handle	pointer
,	O
gss_ctx_id_t	pointer
*	O
context_handle	pointer
,	O
const	O
gss_name_t	pointer
target_name	pointer
,	O
const	O
gss_OID	pointer
mech_type	pointer
,	O
OM_uint32	int
req_flags	int
,	O
OM_uint32	int
time_req	int
,	O
const	O
gss_channel_bindings_t	pointer
input_chan_bindings	pointer
,	O
const	O
gss_buffer_t	pointer
input_token	pointer
,	O
gss_OID	pointer
*	O
actual_mech_type	pointer
,	O
gss_buffer_t	pointer
output_token	pointer
,	O
OM_uint32	int
*	O
ret_flags	pointer
,	O
OM_uint32	int
*	O
time_rec	pointer
)	O
{	O
gss_ctx_id_t	pointer
ctx	pointer
=	O
*	O
context_handle	pointer
;	O
_gss_krb5_ctx_t	pointer
k5	pointer
=	O
ctx	pointer
->	O
krb5	O
;	O
OM_uint32	int
maj_stat	int
;	O
int	O
rc	int
;	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
0	int
;	O
if	O
(	O
initiator_cred_handle	pointer
)	O
{	O
return	O
GSS_S_NO_CRED	O
;	O
}	O
if	O
(	O
target_name	pointer
==	O
NULL	O
)	O
{	O
return	O
GSS_S_BAD_NAME	O
;	O
}	O
if	O
(	O
k5	pointer
==	O
NULL	O
)	O
{	O
k5	pointer
=	O
ctx	pointer
->	O
krb5	O
=	O
calloc	function
(	O
sizeof	O
(	O
*	O
k5	pointer
)	O
,	O
1	int
)	O
;	O
if	O
(	O
!	O
k5	pointer
)	O
{	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
rc	int
=	O
shishi_init	function
(	O
&	O
k5	pointer
->	O
sh	pointer
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
return	O
GSS_S_FAILURE	O
;	O
}	O
if	O
(	O
!	O
k5	pointer
->	O
reqdone	int
)	O
{	O
maj_stat	int
=	O
init_request	function
(	O
minor_status	pointer
,	O
initiator_cred_handle	pointer
,	O
context_handle	pointer
,	O
target_name	pointer
,	O
mech_type	pointer
,	O
req_flags	int
,	O
time_req	int
,	O
input_chan_bindings	pointer
,	O
input_token	pointer
,	O
actual_mech_type	pointer
,	O
output_token	pointer
,	O
ret_flags	pointer
,	O
time_rec	pointer
)	O
;	O
if	O
(	O
GSS_ERROR	O
(	O
maj_stat	int
)	O
)	O
return	O
maj_stat	int
;	O
k5	pointer
->	O
flags	int
=	O
req_flags	int
&	O
(	O
GSS_C_MUTUAL_FLAG	int
|	O
GSS_C_REPLAY_FLAG	int
|	O
GSS_C_SEQUENCE_FLAG	int
|	O
GSS_C_CONF_FLAG	int
|	O
GSS_C_INTEG_FLAG	int
)	O
;	O
k5	pointer
->	O
flags	int
|=	O
GSS_C_PROT_READY_FLAG	int
;	O
if	O
(	O
ret_flags	pointer
)	O
*	O
ret_flags	pointer
=	O
k5	pointer
->	O
flags	int
;	O
k5	pointer
->	O
key	pointer
=	O
shishi_ap_key	function
(	O
k5	pointer
->	O
ap	pointer
)	O
;	O
k5	pointer
->	O
reqdone	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
k5	pointer
->	O
reqdone	int
&&	O
k5	pointer
->	O
flags	int
&	O
GSS_C_MUTUAL_FLAG	int
&&	O
!	O
k5	pointer
->	O
repdone	int
)	O
{	O
maj_stat	int
=	O
init_reply	function
(	O
minor_status	pointer
,	O
initiator_cred_handle	pointer
,	O
context_handle	pointer
,	O
target_name	pointer
,	O
mech_type	pointer
,	O
req_flags	int
,	O
time_req	int
,	O
input_chan_bindings	pointer
,	O
input_token	pointer
,	O
actual_mech_type	pointer
,	O
output_token	pointer
,	O
ret_flags	pointer
,	O
time_rec	pointer
)	O
;	O
if	O
(	O
GSS_ERROR	O
(	O
maj_stat	int
)	O
)	O
return	O
maj_stat	int
;	O
if	O
(	O
ret_flags	pointer
)	O
*	O
ret_flags	pointer
=	O
k5	pointer
->	O
flags	int
;	O
k5	pointer
->	O
repdone	int
=	O
1	int
;	O
}	O
else	O
maj_stat	int
=	O
GSS_S_FAILURE	O
;	O
if	O
(	O
time_rec	pointer
)	O
*	O
time_rec	pointer
=	O
gss_krb5_tktlifetime	function
(	O
k5	pointer
->	O
tkt	pointer
)	O
;	O
return	O
maj_stat	int
;	O
}	O
OM_uint32	int
gss_krb5_accept_sec_context	function
(	O
OM_uint32	int
*	O
minor_status	pointer
,	O
gss_ctx_id_t	pointer
*	O
context_handle	pointer
,	O
const	O
gss_cred_id_t	pointer
acceptor_cred_handle	pointer
,	O
const	O
gss_buffer_t	pointer
input_token_buffer	pointer
,	O
const	O
gss_channel_bindings_t	pointer
input_chan_bindings	pointer
,	O
gss_name_t	pointer
*	O
src_name	pointer
,	O
gss_OID	pointer
*	O
mech_type	pointer
,	O
gss_buffer_t	pointer
output_token	pointer
,	O
OM_uint32	int
*	O
ret_flags	pointer
,	O
OM_uint32	int
*	O
time_rec	pointer
,	O
gss_cred_id_t	pointer
*	O
delegated_cred_handle	pointer
)	O
{	O
gss_buffer_desc	struct
in	pointer
;	O
gss_ctx_id_t	pointer
cx	pointer
;	O
_gss_krb5_ctx_t	pointer
cxk5	pointer
;	O
_gss_krb5_cred_t	pointer
crk5	pointer
;	O
OM_uint32	int
tmp_min_stat	int
;	O
int	O
rc	int
;	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
0	int
;	O
if	O
(	O
ret_flags	pointer
)	O
*	O
ret_flags	pointer
=	O
0	int
;	O
if	O
(	O
!	O
acceptor_cred_handle	pointer
)	O
return	O
GSS_S_NO_CRED	O
;	O
if	O
(	O
*	O
context_handle	pointer
)	O
return	O
GSS_S_FAILURE	O
;	O
crk5	pointer
=	O
acceptor_cred_handle	pointer
->	O
krb5	O
;	O
cx	pointer
=	O
calloc	function
(	O
sizeof	O
(	O
*	O
cx	pointer
)	O
,	O
1	int
)	O
;	O
if	O
(	O
!	O
cx	pointer
)	O
{	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
cxk5	pointer
=	O
calloc	function
(	O
sizeof	O
(	O
*	O
cxk5	pointer
)	O
,	O
1	int
)	O
;	O
if	O
(	O
!	O
cxk5	pointer
)	O
{	O
free	function
(	O
cx	pointer
)	O
;	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
cx	pointer
->	O
mech	pointer
=	O
GSS_KRB5	O
;	O
cx	pointer
->	O
krb5	O
=	O
cxk5	pointer
;	O
*	O
context_handle	pointer
=	O
cx	pointer
;	O
cxk5	pointer
->	O
sh	pointer
=	O
crk5	pointer
->	O
sh	pointer
;	O
cxk5	pointer
->	O
key	pointer
=	O
crk5	pointer
->	O
key	pointer
;	O
cxk5	pointer
->	O
acceptor	int
=	O
1	int
;	O
rc	int
=	O
shishi_ap	function
(	O
cxk5	pointer
->	O
sh	pointer
,	O
&	O
cxk5	pointer
->	O
ap	pointer
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
return	O
GSS_S_FAILURE	O
;	O
rc	int
=	O
gss_decapsulate_token	function
(	O
input_token_buffer	pointer
,	O
GSS_KRB5	O
,	O
&	O
in	pointer
)	O
;	O
if	O
(	O
rc	int
!=	O
GSS_S_COMPLETE	int
)	O
return	O
GSS_S_BAD_MIC	O
;	O
if	O
(	O
in	pointer
.	O
length	int
<	O
TOK_LEN	int
)	O
{	O
gss_release_buffer	function
(	O
&	O
tmp_min_stat	int
,	O
&	O
in	pointer
)	O
;	O
return	O
GSS_S_BAD_MIC	O
;	O
}	O
if	O
(	O
memcmp	function
(	O
in	pointer
.	O
value	pointer
,	O
TOK_AP_REQ	pointer
,	O
TOK_LEN	int
)	O
!=	O
0	int
)	O
{	O
gss_release_buffer	function
(	O
&	O
tmp_min_stat	int
,	O
&	O
in	pointer
)	O
;	O
return	O
GSS_S_BAD_MIC	O
;	O
}	O
rc	int
=	O
shishi_ap_req_der_set	function
(	O
cxk5	pointer
->	O
ap	pointer
,	O
(	O
char	O
*	O
)	O
in	pointer
.	O
value	pointer
+	O
TOK_LEN	int
,	O
in	pointer
.	O
length	int
-	O
TOK_LEN	int
)	O
;	O
gss_release_buffer	function
(	O
&	O
tmp_min_stat	int
,	O
&	O
in	pointer
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
return	O
GSS_S_FAILURE	O
;	O
rc	int
=	O
shishi_ap_req_process	function
(	O
cxk5	pointer
->	O
ap	pointer
,	O
crk5	pointer
->	O
key	pointer
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
{	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
GSS_KRB5_S_G_VALIDATE_FAILED	O
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
rc	int
=	O
shishi_authenticator_seqnumber_get	function
(	O
cxk5	pointer
->	O
sh	pointer
,	O
shishi_ap_authenticator	function
(	O
cxk5	pointer
->	O
ap	pointer
)	O
,	O
&	O
cxk5	pointer
->	O
initseqnr	int
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
return	O
GSS_S_FAILURE	O
;	O
rc	int
=	O
_gss_krb5_checksum_parse	function
(	O
minor_status	pointer
,	O
context_handle	pointer
,	O
input_chan_bindings	pointer
)	O
;	O
if	O
(	O
rc	int
!=	O
GSS_S_COMPLETE	int
)	O
return	O
GSS_S_FAILURE	O
;	O
cxk5	pointer
->	O
tkt	pointer
=	O
shishi_ap_tkt	function
(	O
cxk5	pointer
->	O
ap	pointer
)	O
;	O
cxk5	pointer
->	O
key	pointer
=	O
shishi_ap_key	function
(	O
cxk5	pointer
->	O
ap	pointer
)	O
;	O
if	O
(	O
shishi_apreq_mutual_required_p	function
(	O
crk5	pointer
->	O
sh	pointer
,	O
shishi_ap_req	function
(	O
cxk5	pointer
->	O
ap	pointer
)	O
)	O
)	O
{	O
Shishi_asn1	O
aprep	O
;	O
char	O
*	O
der	pointer
;	O
size_t	long
len	long
;	O
rc	int
=	O
shishi_ap_rep_asn1	function
(	O
cxk5	pointer
->	O
ap	pointer
,	O
&	O
aprep	O
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
{	O
printf	function
(	O
"Error creating AP-REP: %s\n"	pointer
,	O
shishi_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
rc	int
=	O
shishi_encapreppart_seqnumber_get	function
(	O
cxk5	pointer
->	O
sh	pointer
,	O
shishi_ap_encapreppart	function
(	O
cxk5	pointer
->	O
ap	pointer
)	O
,	O
&	O
cxk5	pointer
->	O
acceptseqnr	int
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
{	O
cxk5	pointer
->	O
acceptseqnr	int
=	O
0	int
;	O
}	O
rc	int
=	O
shishi_asn1_to_der	function
(	O
crk5	pointer
->	O
sh	pointer
,	O
aprep	O
,	O
&	O
der	pointer
,	O
&	O
len	long
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
{	O
printf	function
(	O
"Error der encoding aprep: %s\n"	pointer
,	O
shishi_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
rc	int
=	O
_gss_encapsulate_token_prefix	function
(	O
TOK_AP_REP	pointer
,	O
TOK_LEN	int
,	O
der	pointer
,	O
len	long
,	O
GSS_KRB5	O
->	O
elements	pointer
,	O
GSS_KRB5	O
->	O
length	int
,	O
&	O
output_token	pointer
->	O
value	pointer
,	O
&	O
output_token	pointer
->	O
length	int
)	O
;	O
if	O
(	O
rc	int
!=	O
0	int
)	O
return	O
GSS_S_FAILURE	O
;	O
if	O
(	O
ret_flags	pointer
)	O
*	O
ret_flags	pointer
=	O
GSS_C_MUTUAL_FLAG	int
;	O
}	O
else	O
{	O
output_token	pointer
->	O
value	pointer
=	O
NULL	O
;	O
output_token	pointer
->	O
length	int
=	O
0	int
;	O
}	O
if	O
(	O
src_name	pointer
)	O
{	O
gss_name_t	pointer
p	pointer
;	O
p	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
p	pointer
)	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
rc	int
=	O
shishi_encticketpart_client	function
(	O
cxk5	pointer
->	O
sh	pointer
,	O
shishi_tkt_encticketpart	function
(	O
cxk5	pointer
->	O
tkt	pointer
)	O
,	O
&	O
p	pointer
->	O
value	pointer
,	O
&	O
p	pointer
->	O
length	int
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
return	O
GSS_S_FAILURE	O
;	O
p	pointer
->	O
type	pointer
=	O
GSS_KRB5_NT_PRINCIPAL_NAME	O
;	O
*	O
src_name	pointer
=	O
p	pointer
;	O
}	O
if	O
(	O
ret_flags	pointer
)	O
*	O
ret_flags	pointer
|=	O
GSS_C_PROT_READY_FLAG	int
;	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
0	int
;	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
OM_uint32	int
gss_krb5_delete_sec_context	function
(	O
OM_uint32	int
*	O
minor_status	pointer
,	O
gss_ctx_id_t	pointer
*	O
context_handle	pointer
,	O
gss_buffer_t	pointer
output_token	pointer
)	O
{	O
_gss_krb5_ctx_t	pointer
k5	pointer
=	O
(	O
*	O
context_handle	pointer
)	O
->	O
krb5	O
;	O
if	O
(	O
k5	pointer
->	O
peerptr	pointer
!=	O
GSS_C_NO_NAME	O
)	O
gss_release_name	function
(	O
NULL	O
,	O
&	O
k5	pointer
->	O
peerptr	pointer
)	O
;	O
if	O
(	O
k5	pointer
->	O
ap	pointer
)	O
shishi_ap_done	function
(	O
k5	pointer
->	O
ap	pointer
)	O
;	O
if	O
(	O
!	O
k5	pointer
->	O
acceptor	int
)	O
shishi_done	function
(	O
k5	pointer
->	O
sh	pointer
)	O
;	O
free	function
(	O
k5	pointer
)	O
;	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
0	int
;	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
OM_uint32	int
gss_krb5_context_time	function
(	O
OM_uint32	int
*	O
minor_status	pointer
,	O
const	O
gss_ctx_id_t	pointer
context_handle	pointer
,	O
OM_uint32	int
*	O
time_rec	pointer
)	O
{	O
_gss_krb5_ctx_t	pointer
k5	pointer
=	O
context_handle	pointer
->	O
krb5	O
;	O
if	O
(	O
time_rec	pointer
)	O
{	O
*	O
time_rec	pointer
=	O
gss_krb5_tktlifetime	function
(	O
k5	pointer
->	O
tkt	pointer
)	O
;	O
if	O
(	O
*	O
time_rec	pointer
==	O
0	int
)	O
{	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
0	int
;	O
return	O
GSS_S_CONTEXT_EXPIRED	O
;	O
}	O
}	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
0	int
;	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
