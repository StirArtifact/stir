static	O
void	O
_mu_imap_folder_destroy	function
(	O
mu_folder_t	pointer
folder	pointer
)	O
{	O
mu_imap_t	pointer
imap	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
if	O
(	O
imap	pointer
)	O
{	O
mu_folder_close	function
(	O
folder	pointer
)	O
;	O
mu_imap_destroy	function
(	O
&	O
imap	pointer
)	O
;	O
folder	pointer
->	O
data	pointer
=	O
imap	pointer
;	O
}	O
}	O
static	O
void	O
_mu_folder_preauth_callback	function
(	O
void	O
*	O
data	pointer
,	O
int	O
code	int
,	O
size_t	long
sdat	long
,	O
void	O
*	O
pdat	pointer
)	O
{	O
const	O
char	O
*	O
text	pointer
=	O
pdat	pointer
;	O
mu_debug	O
(	O
MU_DEBCAT_FOLDER	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
_	O
(	O
"IMAP server opened in preauth mode: %s"	pointer
)	O
,	O
text	pointer
)	O
)	O
;	O
}	O
static	O
void	O
_mu_folder_bye_callback	function
(	O
void	O
*	O
data	pointer
,	O
int	O
code	int
,	O
size_t	long
sdat	long
,	O
void	O
*	O
pdat	pointer
)	O
{	O
const	O
char	O
*	O
text	pointer
=	O
pdat	pointer
;	O
mu_debug	O
(	O
MU_DEBCAT_FOLDER	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
_	O
(	O
"IMAP server closing connection: %s"	pointer
)	O
,	O
text	pointer
)	O
)	O
;	O
}	O
static	O
void	O
_mu_folder_bad_callback	function
(	O
void	O
*	O
data	pointer
,	O
int	O
code	int
,	O
size_t	long
sdat	long
,	O
void	O
*	O
pdat	pointer
)	O
{	O
const	O
char	O
*	O
text	pointer
=	O
pdat	pointer
;	O
mu_error	function
(	O
_	O
(	O
"IMAP server complains: %s"	pointer
)	O
,	O
text	pointer
)	O
;	O
mu_error	function
(	O
_	O
(	O
"This probably indicates a bug in Mailutils client code."	pointer
)	O
)	O
;	O
mu_error	function
(	O
_	O
(	O
"Please, report that to <%s>."	pointer
)	O
,	O
PACKAGE_BUGREPORT	pointer
)	O
;	O
}	O
static	O
int	O
_mu_imap_folder_open	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
int	O
flags	int
)	O
{	O
int	O
rc	int
;	O
mu_imap_t	pointer
imap	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
struct	O
mu_sockaddr	struct
*	O
sa	pointer
;	O
struct	O
mu_sockaddr_hints	struct
hints	pointer
;	O
char	O
const	O
*	O
s	pointer
;	O
int	O
tls	int
;	O
mu_stream_t	pointer
transport	pointer
;	O
mu_monitor_wrlock	function
(	O
folder	pointer
->	O
monitor	pointer
)	O
;	O
rc	int
=	O
mu_imap_session_state	enum
(	O
imap	pointer
)	O
;	O
mu_monitor_unlock	function
(	O
folder	pointer
->	O
monitor	pointer
)	O
;	O
if	O
(	O
rc	int
!=	O
MU_IMAP_SESSION_INIT	int
)	O
return	O
0	int
;	O
mu_url_sget_scheme	function
(	O
folder	pointer
->	O
url	pointer
,	O
&	O
s	pointer
)	O
;	O
tls	int
=	O
strcmp	function
(	O
s	pointer
,	O
"imaps"	pointer
)	O
==	O
0	int
;	O
memset	function
(	O
&	O
hints	pointer
,	O
0	int
,	O
sizeof	O
(	O
hints	pointer
)	O
)	O
;	O
hints	pointer
.	O
flags	int
=	O
MU_AH_DETECT_FAMILY	int
;	O
hints	pointer
.	O
port	int
=	O
tls	int
?	O
MU_IMAP_DEFAULT_SSL_PORT	int
:	O
MU_IMAP_DEFAULT_PORT	int
;	O
hints	pointer
.	O
protocol	int
=	O
IPPROTO_TCP	int
;	O
hints	pointer
.	O
socktype	int
=	O
SOCK_STREAM	int
;	O
rc	int
=	O
mu_sockaddr_from_url	function
(	O
&	O
sa	pointer
,	O
folder	pointer
->	O
url	pointer
,	O
&	O
hints	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
s	pointer
=	O
mu_url_to_string	function
(	O
folder	pointer
->	O
url	pointer
)	O
;	O
mu_debug	O
(	O
MU_DEBCAT_FOLDER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"cannot create sockaddr from URL %s: %s"	pointer
)	O
,	O
s	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
rc	int
=	O
mu_tcp_stream_create_from_sa	function
(	O
&	O
transport	pointer
,	O
sa	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
s	pointer
=	O
mu_url_to_string	function
(	O
folder	pointer
->	O
url	pointer
)	O
;	O
mu_debug	O
(	O
MU_DEBCAT_FOLDER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"cannot create stream from URL %s: %s"	pointer
)	O
,	O
s	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
mu_sockaddr_free	function
(	O
sa	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
mu_imap_set_carrier	function
(	O
imap	pointer
,	O
transport	pointer
)	O
;	O
if	O
(	O
mu_debug_level_p	function
(	O
MU_DEBCAT_FOLDER	int
,	O
MU_DEBUG_PROT	int
)	O
||	O
mu_debug_level_p	function
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_PROT	int
)	O
)	O
mu_imap_trace	function
(	O
imap	pointer
,	O
MU_IMAP_TRACE_SET	int
)	O
;	O
if	O
(	O
mu_debug_level_p	function
(	O
MU_DEBCAT_FOLDER	int
,	O
MU_DEBUG_TRACE6	int
)	O
||	O
mu_debug_level_p	function
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE6	int
)	O
)	O
mu_imap_trace_mask	function
(	O
imap	pointer
,	O
MU_IMAP_TRACE_SET	int
,	O
MU_XSCRIPT_SECURE	int
)	O
;	O
if	O
(	O
mu_debug_level_p	function
(	O
MU_DEBCAT_FOLDER	int
,	O
MU_DEBUG_TRACE7	int
)	O
||	O
mu_debug_level_p	function
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE7	int
)	O
)	O
mu_imap_trace_mask	function
(	O
imap	pointer
,	O
MU_IMAP_TRACE_SET	int
,	O
MU_XSCRIPT_PAYLOAD	int
)	O
;	O
mu_imap_register_callback_function	function
(	O
imap	pointer
,	O
MU_IMAP_CB_PREAUTH	int
,	O
_mu_folder_preauth_callback	function
,	O
folder	pointer
)	O
;	O
mu_imap_register_callback_function	function
(	O
imap	pointer
,	O
MU_IMAP_CB_BYE	int
,	O
_mu_folder_bye_callback	function
,	O
folder	pointer
)	O
;	O
mu_imap_register_callback_function	function
(	O
imap	pointer
,	O
MU_IMAP_CB_BAD	int
,	O
_mu_folder_bad_callback	function
,	O
folder	pointer
)	O
;	O
rc	int
=	O
mu_imap_connect	function
(	O
imap	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
s	pointer
=	O
mu_url_to_string	function
(	O
folder	pointer
->	O
url	pointer
)	O
;	O
mu_debug	O
(	O
MU_DEBCAT_FOLDER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"failed to connect to %s: %s"	pointer
)	O
,	O
s	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
if	O
(	O
mu_imap_strerror	function
(	O
imap	pointer
,	O
&	O
s	pointer
)	O
)	O
mu_debug	O
(	O
MU_DEBCAT_FOLDER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"server response: %s"	pointer
)	O
,	O
s	pointer
)	O
)	O
;	O
mu_imap_destroy	function
(	O
&	O
imap	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
if	O
(	O
mu_imap_session_state	enum
(	O
imap	pointer
)	O
==	O
MU_IMAP_SESSION_NONAUTH	int
)	O
{	O
rc	int
=	O
mu_authority_authenticate	function
(	O
folder	pointer
->	O
authority	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_FOLDER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"IMAP authentication: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
mu_folder_close	function
(	O
folder	pointer
)	O
;	O
}	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
_mu_imap_folder_close	function
(	O
mu_folder_t	pointer
folder	pointer
)	O
{	O
mu_imap_t	pointer
imap	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
if	O
(	O
mu_imap_session_state	enum
(	O
imap	pointer
)	O
>	O
MU_IMAP_SESSION_INIT	int
)	O
{	O
mu_imap_clearerr	function
(	O
imap	pointer
)	O
;	O
mu_imap_logout	function
(	O
imap	pointer
)	O
;	O
mu_imap_disconnect	function
(	O
imap	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
struct	O
enumerate_closure	struct
{	O
mu_folder_t	pointer
folder	pointer
;	O
mu_folder_enumerate_fp	pointer
fun	pointer
;	O
void	O
*	O
data	pointer
;	O
}	O
;	O
static	O
int	O
_enumerate_helper	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
mu_list_response	struct
*	O
rp	pointer
=	O
item	pointer
;	O
struct	O
enumerate_closure	struct
*	O
clos	pointer
=	O
data	pointer
;	O
return	O
clos	pointer
->	O
fun	pointer
(	O
clos	pointer
->	O
folder	pointer
,	O
rp	pointer
,	O
clos	pointer
->	O
data	pointer
)	O
;	O
}	O
static	O
int	O
_mu_imap_folder_list	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
struct	O
mu_folder_scanner	struct
*	O
scn	pointer
)	O
{	O
mu_imap_t	pointer
imap	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
mu_list_t	pointer
list	pointer
;	O
int	O
rc	int
=	O
mu_imap_list_new	function
(	O
imap	pointer
,	O
scn	pointer
->	O
refname	pointer
,	O
scn	pointer
->	O
pattern	pointer
,	O
&	O
list	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
scn	pointer
->	O
max_depth	long
||	O
(	O
scn	pointer
->	O
match_flags	int
&	O
MU_FOLDER_ATTRIBUTE_ALL	O
)	O
!=	O
MU_FOLDER_ATTRIBUTE_ALL	O
)	O
{	O
mu_iterator_t	pointer
itr	pointer
;	O
rc	int
=	O
mu_list_get_iterator	function
(	O
list	pointer
,	O
&	O
itr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_list_destroy	function
(	O
&	O
list	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
struct	O
mu_list_response	struct
*	O
rp	pointer
;	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
rp	pointer
)	O
;	O
if	O
(	O
!	O
(	O
rp	pointer
->	O
type	int
&	O
scn	pointer
->	O
match_flags	int
)	O
||	O
(	O
scn	pointer
->	O
max_depth	long
&&	O
rp	pointer
->	O
depth	int
>	O
scn	pointer
->	O
max_depth	long
)	O
)	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_delete	int
,	O
NULL	O
)	O
;	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
}	O
if	O
(	O
scn	pointer
->	O
enumfun	pointer
)	O
{	O
struct	O
enumerate_closure	struct
clos	pointer
;	O
clos	pointer
.	O
folder	pointer
=	O
folder	pointer
;	O
clos	pointer
.	O
fun	pointer
=	O
scn	pointer
->	O
enumfun	pointer
;	O
clos	pointer
.	O
data	pointer
=	O
scn	pointer
->	O
enumdata	pointer
;	O
rc	int
=	O
mu_list_foreach	function
(	O
list	pointer
,	O
_enumerate_helper	function
,	O
&	O
clos	pointer
)	O
;	O
}	O
if	O
(	O
scn	pointer
->	O
result	pointer
)	O
mu_list_append_list	function
(	O
scn	pointer
->	O
result	pointer
,	O
list	pointer
)	O
;	O
mu_list_destroy	function
(	O
&	O
list	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_mu_imap_folder_lsub	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
const	O
char	O
*	O
ref	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
mu_list_t	pointer
flist	pointer
)	O
{	O
mu_imap_t	pointer
imap	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
return	O
mu_imap_lsub	function
(	O
imap	pointer
,	O
ref	pointer
,	O
name	pointer
,	O
flist	pointer
)	O
;	O
}	O
static	O
int	O
_mu_imap_folder_subscribe	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
mu_imap_t	pointer
imap	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
return	O
mu_imap_subscribe	function
(	O
imap	pointer
,	O
name	pointer
)	O
;	O
}	O
static	O
int	O
_mu_imap_folder_unsubscribe	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
mu_imap_t	pointer
imap	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
return	O
mu_imap_unsubscribe	function
(	O
imap	pointer
,	O
name	pointer
)	O
;	O
}	O
static	O
int	O
_mu_imap_folder_delete	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
mu_imap_t	pointer
imap	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
return	O
mu_imap_delete	function
(	O
imap	pointer
,	O
name	pointer
)	O
;	O
}	O
static	O
int	O
_mu_imap_folder_rename	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
const	O
char	O
*	O
oldpath	pointer
,	O
const	O
char	O
*	O
newpath	pointer
)	O
{	O
mu_imap_t	pointer
imap	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
return	O
mu_imap_rename	function
(	O
imap	pointer
,	O
oldpath	pointer
,	O
newpath	pointer
)	O
;	O
}	O
typedef	O
int	O
(	O
*	O
auth_method_t	pointer
)	O
(	O
mu_authority_t	pointer
)	O
;	O
static	O
int	O
authenticate_imap_login	function
(	O
mu_authority_t	pointer
auth	pointer
)	O
{	O
mu_folder_t	pointer
folder	pointer
=	O
mu_authority_get_owner	function
(	O
auth	pointer
)	O
;	O
mu_imap_t	pointer
imap	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
mu_ticket_t	pointer
ticket	pointer
;	O
char	O
*	O
user	pointer
;	O
int	O
rc	int
;	O
mu_secret_t	pointer
secret	pointer
;	O
rc	int
=	O
mu_imap_capability_test	function
(	O
imap	pointer
,	O
"LOGINDISABLED"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_FOLDER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"IMAP LOGIN disabled"	pointer
)	O
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
else	O
if	O
(	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_FOLDER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"cannot test server capabilities (%s), continuing anyway"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
mu_authority_get_ticket	function
(	O
auth	pointer
,	O
&	O
ticket	pointer
)	O
;	O
rc	int
=	O
mu_url_aget_user	function
(	O
folder	pointer
->	O
url	pointer
,	O
&	O
user	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
MU_ERR_NOENT	O
)	O
rc	int
=	O
mu_ticket_get_cred	function
(	O
ticket	pointer
,	O
folder	pointer
->	O
url	pointer
,	O
"Imap User: "	pointer
,	O
&	O
user	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
==	O
MU_ERR_NOENT	O
||	O
user	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_NOUSERNAME	O
;	O
else	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_url_get_secret	function
(	O
folder	pointer
->	O
url	pointer
,	O
&	O
secret	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
MU_ERR_NOENT	O
)	O
rc	int
=	O
mu_ticket_get_cred	function
(	O
ticket	pointer
,	O
folder	pointer
->	O
url	pointer
,	O
"Imap Passwd: "	pointer
,	O
NULL	O
,	O
&	O
secret	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
MU_ERR_NOENT	O
||	O
!	O
secret	pointer
)	O
{	O
free	function
(	O
user	pointer
)	O
;	O
return	O
MU_ERR_NOPASSWORD	O
;	O
}	O
else	O
if	O
(	O
rc	int
)	O
{	O
free	function
(	O
user	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
rc	int
=	O
mu_imap_login_secret	function
(	O
imap	pointer
,	O
user	pointer
,	O
secret	pointer
)	O
;	O
mu_secret_unref	function
(	O
secret	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
struct	O
auth_tab	struct
{	O
char	O
*	O
name	pointer
;	O
auth_method_t	pointer
method	pointer
;	O
}	O
;	O
static	O
struct	O
auth_tab	struct
auth_tab	struct
[	O
]	O
=	O
{	O
{	O
"login"	pointer
,	O
authenticate_imap_login	function
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
auth_method_t	pointer
find_auth_method	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
auth_tab	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
auth_tab	struct
;	O
p	pointer
->	O
name	pointer
;	O
p	pointer
++	O
)	O
if	O
(	O
mu_c_strcasecmp	function
(	O
p	pointer
->	O
name	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
return	O
p	pointer
->	O
method	pointer
;	O
return	O
NULL	O
;	O
}	O
static	O
int	O
authenticate_imap_select	function
(	O
mu_authority_t	pointer
auth	pointer
)	O
{	O
struct	O
auth_tab	struct
*	O
p	pointer
;	O
int	O
rc	int
=	O
ENOSYS	int
;	O
for	O
(	O
p	pointer
=	O
auth_tab	struct
;	O
rc	int
==	O
ENOSYS	int
&&	O
p	pointer
->	O
name	pointer
;	O
p	pointer
++	O
)	O
rc	int
=	O
p	pointer
->	O
method	pointer
(	O
auth	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
folder_set_auth_method	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
auth_method_t	pointer
method	pointer
)	O
{	O
if	O
(	O
!	O
folder	pointer
->	O
authority	pointer
)	O
{	O
int	O
rc	int
=	O
mu_authority_create	function
(	O
&	O
folder	pointer
->	O
authority	pointer
,	O
NULL	O
,	O
folder	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
return	O
mu_authority_set_authenticate	function
(	O
folder	pointer
->	O
authority	pointer
,	O
method	pointer
,	O
folder	pointer
)	O
;	O
}	O
static	O
int	O
_imap_folder_setup_authority	function
(	O
mu_folder_t	pointer
folder	pointer
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
if	O
(	O
!	O
folder	pointer
->	O
authority	pointer
)	O
{	O
const	O
char	O
*	O
auth	pointer
;	O
if	O
(	O
folder	pointer
->	O
url	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mu_url_sget_auth	function
(	O
folder	pointer
->	O
url	pointer
,	O
&	O
auth	pointer
)	O
)	O
rc	int
=	O
folder_set_auth_method	function
(	O
folder	pointer
,	O
authenticate_imap_select	function
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
auth	pointer
,	O
"*"	pointer
)	O
==	O
0	int
)	O
rc	int
=	O
folder_set_auth_method	function
(	O
folder	pointer
,	O
authenticate_imap_select	function
)	O
;	O
else	O
{	O
struct	O
mu_wordsplit	struct
ws	pointer
;	O
ws	pointer
.	O
ws_delim	pointer
=	O
","	pointer
;	O
if	O
(	O
mu_wordsplit	struct
(	O
auth	pointer
,	O
&	O
ws	pointer
,	O
MU_WRDSF_NOVAR	O
|	O
MU_WRDSF_NOCMD	O
|	O
MU_WRDSF_DELIM	O
)	O
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_FOLDER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"cannot split out auth part: %s"	pointer
)	O
,	O
mu_wordsplit_strerror	function
(	O
&	O
ws	pointer
)	O
)	O
)	O
;	O
rc	int
=	O
MU_ERR_FAILURE	O
;	O
}	O
else	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ws	pointer
.	O
ws_wordc	long
;	O
i	int
++	O
)	O
{	O
auth_method_t	pointer
method	pointer
=	O
find_auth_method	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
)	O
;	O
if	O
(	O
method	pointer
)	O
rc	int
=	O
folder_set_auth_method	function
(	O
folder	pointer
,	O
method	pointer
)	O
;	O
else	O
{	O
mu_debug	O
(	O
MU_DEBCAT_FOLDER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"unrecognized AUTH scheme %s"	pointer
)	O
,	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
)	O
)	O
;	O
rc	int
=	O
MU_ERR_BAD_AUTH_SCHEME	O
;	O
}	O
}	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
}	O
}	O
}	O
return	O
rc	int
;	O
}	O
int	O
_mu_imap_folder_init	function
(	O
mu_folder_t	pointer
folder	pointer
)	O
{	O
mu_imap_t	pointer
imap	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
_imap_folder_setup_authority	function
(	O
folder	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_imap_create	function
(	O
&	O
imap	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
folder	pointer
->	O
data	pointer
=	O
imap	pointer
;	O
folder	pointer
->	O
_destroy	pointer
=	O
_mu_imap_folder_destroy	function
;	O
folder	pointer
->	O
_open	pointer
=	O
_mu_imap_folder_open	function
;	O
folder	pointer
->	O
_close	pointer
=	O
_mu_imap_folder_close	function
;	O
folder	pointer
->	O
_list	pointer
=	O
_mu_imap_folder_list	function
;	O
folder	pointer
->	O
_lsub	pointer
=	O
_mu_imap_folder_lsub	function
;	O
folder	pointer
->	O
_subscribe	pointer
=	O
_mu_imap_folder_subscribe	function
;	O
folder	pointer
->	O
_unsubscribe	pointer
=	O
_mu_imap_folder_unsubscribe	function
;	O
folder	pointer
->	O
_delete	pointer
=	O
_mu_imap_folder_delete	function
;	O
folder	pointer
->	O
_rename	pointer
=	O
_mu_imap_folder_rename	function
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
_mu_record	struct
_imap_record	struct
=	O
{	O
MU_IMAP_PRIO	int
,	O
MU_IMAP_SCHEME	pointer
,	O
MU_RECORD_DEFAULT	int
,	O
MU_URL_SCHEME	int
|	O
MU_URL_CRED	O
|	O
MU_URL_INET	O
|	O
MU_URL_PATH	int
|	O
MU_URL_PARAM	int
,	O
MU_URL_HOST	int
,	O
_mu_imap_url_init	function
,	O
_mu_imap_mailbox_init	function
,	O
NULL	O
,	O
_mu_imap_folder_init	function
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
}	O
;	O
mu_record_t	pointer
mu_imap_record	pointer
=	O
&	O
_imap_record	struct
;	O
mu_record_t	pointer
mu_imaps_record	pointer
=	O
NULL	O
;	O
