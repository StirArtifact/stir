int	O
gsl_linalg_HH_solve	function
(	O
gsl_matrix	struct
*	O
A	pointer
,	O
const	O
gsl_vector	struct
*	O
b	double
,	O
gsl_vector	struct
*	O
x	double
)	O
{	O
if	O
(	O
A	pointer
->	O
size1	long
>	O
A	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"System is underdetermined"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
else	O
if	O
(	O
A	pointer
->	O
size2	long
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix and vector sizes must be equal"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
gsl_vector_memcpy	function
(	O
x	double
,	O
b	double
)	O
;	O
status	int
=	O
gsl_linalg_HH_svx	function
(	O
A	pointer
,	O
x	double
)	O
;	O
return	O
status	int
;	O
}	O
}	O
int	O
gsl_linalg_HH_svx	function
(	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_vector	struct
*	O
x	double
)	O
{	O
if	O
(	O
A	pointer
->	O
size1	long
>	O
A	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"System is underdetermined"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
else	O
if	O
(	O
A	pointer
->	O
size2	long
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix and vector sizes must be equal"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size2	long
;	O
size_t	long
i	long
,	O
j	long
,	O
k	long
;	O
REAL	double
*	O
d	pointer
=	O
(	O
REAL	double
*	O
)	O
malloc	function
(	O
N	int
*	O
sizeof	O
(	O
REAL	double
)	O
)	O
;	O
if	O
(	O
d	pointer
==	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"could not allocate memory for workspace"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
i	long
++	O
)	O
{	O
const	O
REAL	double
aii	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
i	long
,	O
i	long
)	O
;	O
REAL	double
alpha	long double
;	O
REAL	double
f	pointer
;	O
REAL	double
ak	double
;	O
REAL	double
max_norm	double
=	O
0.0	int
;	O
REAL	double
r	pointer
=	O
0.0	int
;	O
for	O
(	O
k	long
=	O
i	long
;	O
k	long
<	O
M	int
;	O
k	long
++	O
)	O
{	O
REAL	double
aki	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
k	long
,	O
i	long
)	O
;	O
r	pointer
+=	O
aki	double
*	O
aki	double
;	O
}	O
if	O
(	O
r	pointer
==	O
0.0	int
)	O
{	O
free	function
(	O
d	pointer
)	O
;	O
GSL_ERROR	O
(	O
"matrix is rank deficient"	pointer
,	O
GSL_ESING	int
)	O
;	O
}	O
alpha	long double
=	O
sqrt	function
(	O
r	pointer
)	O
*	O
GSL_SIGN	O
(	O
aii	double
)	O
;	O
ak	double
=	O
1.0	int
/	O
(	O
r	pointer
+	O
alpha	long double
*	O
aii	double
)	O
;	O
gsl_matrix_set	function
(	O
A	pointer
,	O
i	long
,	O
i	long
,	O
aii	double
+	O
alpha	long double
)	O
;	O
d	pointer
[	O
i	long
]	O
=	O
-	O
alpha	long double
;	O
for	O
(	O
k	long
=	O
i	long
+	O
1	int
;	O
k	long
<	O
N	int
;	O
k	long
++	O
)	O
{	O
REAL	double
norm	pointer
=	O
0.0	int
;	O
f	pointer
=	O
0.0	int
;	O
for	O
(	O
j	long
=	O
i	long
;	O
j	long
<	O
M	int
;	O
j	long
++	O
)	O
{	O
REAL	double
ajk	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
j	long
,	O
k	long
)	O
;	O
REAL	double
aji	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
j	long
,	O
i	long
)	O
;	O
norm	pointer
+=	O
ajk	double
*	O
ajk	double
;	O
f	pointer
+=	O
ajk	double
*	O
aji	double
;	O
}	O
max_norm	double
=	O
GSL_MAX	O
(	O
max_norm	double
,	O
norm	pointer
)	O
;	O
f	pointer
*=	O
ak	double
;	O
for	O
(	O
j	long
=	O
i	long
;	O
j	long
<	O
M	int
;	O
j	long
++	O
)	O
{	O
REAL	double
ajk	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
j	long
,	O
k	long
)	O
;	O
REAL	double
aji	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
j	long
,	O
i	long
)	O
;	O
gsl_matrix_set	function
(	O
A	pointer
,	O
j	long
,	O
k	long
,	O
ajk	double
-	O
f	pointer
*	O
aji	double
)	O
;	O
}	O
}	O
if	O
(	O
fabs	function
(	O
alpha	long double
)	O
<	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
sqrt	function
(	O
max_norm	double
)	O
)	O
{	O
free	function
(	O
d	pointer
)	O
;	O
GSL_ERROR	O
(	O
"apparent singularity detected"	pointer
,	O
GSL_ESING	int
)	O
;	O
}	O
f	pointer
=	O
0.0	int
;	O
for	O
(	O
j	long
=	O
i	long
;	O
j	long
<	O
M	int
;	O
j	long
++	O
)	O
{	O
f	pointer
+=	O
gsl_vector_get	function
(	O
x	double
,	O
j	long
)	O
*	O
gsl_matrix_get	function
(	O
A	pointer
,	O
j	long
,	O
i	long
)	O
;	O
}	O
f	pointer
*=	O
ak	double
;	O
for	O
(	O
j	long
=	O
i	long
;	O
j	long
<	O
M	int
;	O
j	long
++	O
)	O
{	O
REAL	double
xj	double
=	O
gsl_vector_get	function
(	O
x	double
,	O
j	long
)	O
;	O
REAL	double
aji	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
j	long
,	O
i	long
)	O
;	O
gsl_vector_set	function
(	O
x	double
,	O
j	long
,	O
xj	double
-	O
f	pointer
*	O
aji	double
)	O
;	O
}	O
}	O
for	O
(	O
i	long
=	O
N	int
;	O
i	long
--	O
>	O
0	int
;	O
)	O
{	O
REAL	double
xi	double
=	O
gsl_vector_get	function
(	O
x	double
,	O
i	long
)	O
;	O
REAL	double
sum	double
=	O
0.0	int
;	O
for	O
(	O
k	long
=	O
i	long
+	O
1	int
;	O
k	long
<	O
N	int
;	O
k	long
++	O
)	O
{	O
sum	double
+=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
i	long
,	O
k	long
)	O
*	O
gsl_vector_get	function
(	O
x	double
,	O
k	long
)	O
;	O
}	O
gsl_vector_set	function
(	O
x	double
,	O
i	long
,	O
(	O
xi	double
-	O
sum	double
)	O
/	O
d	pointer
[	O
i	long
]	O
)	O
;	O
}	O
free	function
(	O
d	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
