struct	O
filter_stream	struct
{	O
dico_stream_t	pointer
transport	pointer
;	O
char	O
buf	pointer
[	O
FILTER_BSIZE	int
]	O
;	O
size_t	long
level	int
;	O
size_t	long
min_level	long
;	O
size_t	long
max_line_length	long
;	O
size_t	long
line_length	long
;	O
filter_xcode_t	pointer
xcode	pointer
;	O
char	O
*	O
inbuf	pointer
;	O
size_t	long
inlevel	long
;	O
}	O
;	O
static	O
int	O
filter_read	function
(	O
void	O
*	O
data	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
size	long
,	O
size_t	long
*	O
pret	pointer
)	O
{	O
struct	O
filter_stream	struct
*	O
fs	pointer
=	O
data	pointer
;	O
size_t	long
rdsize	long
;	O
int	O
rc	int
;	O
if	O
(	O
fs	pointer
->	O
level	int
<	O
fs	pointer
->	O
min_level	long
)	O
{	O
rc	int
=	O
dico_stream_read	function
(	O
fs	pointer
->	O
transport	pointer
,	O
fs	pointer
->	O
buf	pointer
+	O
fs	pointer
->	O
level	int
,	O
sizeof	O
(	O
fs	pointer
->	O
buf	pointer
)	O
-	O
fs	pointer
->	O
level	int
,	O
&	O
rdsize	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
fs	pointer
->	O
level	int
=	O
rdsize	long
;	O
}	O
if	O
(	O
fs	pointer
->	O
level	int
)	O
{	O
rc	int
=	O
fs	pointer
->	O
xcode	pointer
(	O
fs	pointer
->	O
buf	pointer
,	O
fs	pointer
->	O
level	int
,	O
buf	pointer
,	O
size	long
,	O
&	O
rdsize	long
)	O
;	O
memmove	function
(	O
fs	pointer
->	O
buf	pointer
,	O
fs	pointer
->	O
buf	pointer
+	O
rc	int
,	O
fs	pointer
->	O
level	int
-	O
rc	int
)	O
;	O
fs	pointer
->	O
level	int
=	O
rc	int
;	O
*	O
pret	pointer
=	O
rdsize	long
;	O
rc	int
=	O
0	int
;	O
}	O
else	O
{	O
*	O
pret	pointer
=	O
0	int
;	O
rc	int
=	O
0	int
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
filter_flush	function
(	O
struct	O
filter_stream	struct
*	O
fs	pointer
)	O
{	O
if	O
(	O
fs	pointer
->	O
level	int
==	O
0	int
)	O
return	O
0	int
;	O
else	O
if	O
(	O
fs	pointer
->	O
max_line_length	long
==	O
0	int
)	O
{	O
int	O
rc	int
=	O
dico_stream_write	function
(	O
fs	pointer
->	O
transport	pointer
,	O
fs	pointer
->	O
buf	pointer
,	O
fs	pointer
->	O
level	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
fs	pointer
->	O
level	int
=	O
0	int
;	O
return	O
rc	int
;	O
}	O
else	O
{	O
char	O
*	O
buf	pointer
=	O
fs	pointer
->	O
buf	pointer
;	O
size_t	long
level	int
=	O
fs	pointer
->	O
level	int
;	O
while	O
(	O
level	int
)	O
{	O
int	O
rc	int
;	O
size_t	long
rest	long
=	O
fs	pointer
->	O
max_line_length	long
-	O
fs	pointer
->	O
line_length	long
;	O
size_t	long
len	int
;	O
int	O
skip	int
=	O
0	int
;	O
char	O
*	O
p	pointer
=	O
memchr	function
(	O
buf	pointer
,	O
'\n'	O
,	O
level	int
)	O
;	O
if	O
(	O
rest	long
>	O
level	int
)	O
rest	long
=	O
level	int
;	O
if	O
(	O
p	pointer
)	O
{	O
len	int
=	O
p	pointer
-	O
buf	pointer
;	O
if	O
(	O
len	int
>	O
rest	long
)	O
len	int
=	O
rest	long
;	O
else	O
skip	int
=	O
1	int
;	O
}	O
else	O
len	int
=	O
rest	long
;	O
rc	int
=	O
dico_stream_write	function
(	O
fs	pointer
->	O
transport	pointer
,	O
buf	pointer
,	O
len	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
1	int
;	O
fs	pointer
->	O
line_length	long
+=	O
len	int
;	O
if	O
(	O
fs	pointer
->	O
line_length	long
==	O
fs	pointer
->	O
max_line_length	long
)	O
{	O
fs	pointer
->	O
line_length	long
=	O
0	int
;	O
rc	int
=	O
dico_stream_write	function
(	O
fs	pointer
->	O
transport	pointer
,	O
"\n"	pointer
,	O
1	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
1	int
;	O
}	O
if	O
(	O
skip	int
)	O
len	int
++	O
;	O
buf	pointer
+=	O
len	int
;	O
level	int
-=	O
len	int
;	O
}	O
fs	pointer
->	O
level	int
=	O
0	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
filter_write0	function
(	O
struct	O
filter_stream	struct
*	O
fs	pointer
,	O
const	O
char	O
*	O
buf	pointer
,	O
size_t	long
size	long
,	O
size_t	long
*	O
pret	pointer
)	O
{	O
size_t	long
wrsize	long
;	O
int	O
rc	int
;	O
if	O
(	O
fs	pointer
->	O
level	int
>=	O
sizeof	O
(	O
fs	pointer
->	O
buf	pointer
)	O
-	O
fs	pointer
->	O
min_level	long
)	O
{	O
rc	int
=	O
filter_flush	function
(	O
fs	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
fs	pointer
->	O
level	int
=	O
0	int
;	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
rc	int
=	O
fs	pointer
->	O
xcode	pointer
(	O
buf	pointer
,	O
size	long
,	O
fs	pointer
->	O
buf	pointer
+	O
fs	pointer
->	O
level	int
,	O
sizeof	O
(	O
fs	pointer
->	O
buf	pointer
)	O
-	O
fs	pointer
->	O
level	int
,	O
&	O
wrsize	long
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
rc	int
=	O
filter_flush	function
(	O
fs	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
fs	pointer
->	O
level	int
=	O
0	int
;	O
}	O
else	O
break	O
;	O
}	O
fs	pointer
->	O
level	int
+=	O
wrsize	long
;	O
*	O
pret	pointer
=	O
rc	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
filter_write	function
(	O
void	O
*	O
data	pointer
,	O
const	O
char	O
*	O
buf	pointer
,	O
size_t	long
size	long
,	O
size_t	long
*	O
pret	pointer
)	O
{	O
struct	O
filter_stream	struct
*	O
fs	pointer
=	O
data	pointer
;	O
size_t	long
ret	long
=	O
0	int
;	O
size_t	long
wrs	long
;	O
int	O
rc	int
=	O
0	int
;	O
if	O
(	O
size	long
<	O
fs	pointer
->	O
min_level	long
||	O
(	O
fs	pointer
->	O
inlevel	long
&&	O
fs	pointer
->	O
inlevel	long
<	O
fs	pointer
->	O
min_level	long
)	O
)	O
{	O
size_t	long
rest	long
=	O
fs	pointer
->	O
min_level	long
-	O
fs	pointer
->	O
inlevel	long
;	O
if	O
(	O
rest	long
>	O
size	long
)	O
rest	long
=	O
size	long
;	O
memcpy	function
(	O
fs	pointer
->	O
inbuf	pointer
+	O
fs	pointer
->	O
inlevel	long
,	O
buf	pointer
,	O
rest	long
)	O
;	O
fs	pointer
->	O
inlevel	long
+=	O
rest	long
;	O
if	O
(	O
fs	pointer
->	O
inlevel	long
<	O
fs	pointer
->	O
min_level	long
)	O
{	O
*	O
pret	pointer
=	O
rest	long
;	O
return	O
0	int
;	O
}	O
buf	pointer
+=	O
rest	long
;	O
size	long
-=	O
rest	long
;	O
rc	int
=	O
filter_write0	function
(	O
fs	pointer
,	O
fs	pointer
->	O
inbuf	pointer
,	O
fs	pointer
->	O
inlevel	long
,	O
&	O
wrs	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
wrs	long
!=	O
fs	pointer
->	O
inlevel	long
)	O
{	O
return	O
1	int
;	O
}	O
fs	pointer
->	O
inlevel	long
=	O
0	int
;	O
ret	long
=	O
rest	long
;	O
}	O
if	O
(	O
size	long
)	O
rc	int
=	O
filter_write0	function
(	O
fs	pointer
,	O
buf	pointer
,	O
size	long
,	O
&	O
wrs	long
)	O
;	O
else	O
{	O
rc	int
=	O
0	int
;	O
wrs	long
=	O
0	int
;	O
}	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
ret	long
+=	O
wrs	long
;	O
*	O
pret	pointer
=	O
ret	long
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
filter_wr_flush	function
(	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
filter_stream	struct
*	O
fs	pointer
=	O
data	pointer
;	O
int	O
rc	int
=	O
0	int
;	O
if	O
(	O
fs	pointer
->	O
level	int
)	O
{	O
int	O
nl	int
=	O
fs	pointer
->	O
buf	pointer
[	O
fs	pointer
->	O
level	int
-	O
1	int
]	O
==	O
'\n'	O
;	O
rc	int
=	O
filter_flush	function
(	O
fs	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
fs	pointer
->	O
inlevel	long
)	O
{	O
size_t	long
wrs	long
;	O
filter_write0	function
(	O
fs	pointer
,	O
fs	pointer
->	O
inbuf	pointer
,	O
fs	pointer
->	O
inlevel	long
,	O
&	O
wrs	long
)	O
;	O
nl	int
=	O
fs	pointer
->	O
buf	pointer
[	O
fs	pointer
->	O
level	int
-	O
1	int
]	O
==	O
'\n'	O
;	O
rc	int
=	O
filter_flush	function
(	O
fs	pointer
)	O
;	O
}	O
if	O
(	O
!	O
nl	int
)	O
rc	int
=	O
dico_stream_write	function
(	O
fs	pointer
->	O
transport	pointer
,	O
"\n"	pointer
,	O
1	int
)	O
;	O
}	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
filter_stream_destroy	function
(	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
filter_stream	struct
*	O
fs	pointer
=	O
data	pointer
;	O
free	function
(	O
fs	pointer
->	O
inbuf	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
filter_ioctl	function
(	O
void	O
*	O
data	pointer
,	O
int	O
code	int
,	O
void	O
*	O
call_data	pointer
)	O
{	O
struct	O
filter_stream	struct
*	O
fs	pointer
=	O
data	pointer
;	O
switch	O
(	O
code	int
)	O
{	O
case	O
DICO_IOCTL_BYTES_IN	int
:	O
*	O
(	O
off_t	long
*	O
)	O
call_data	pointer
=	O
dico_stream_bytes_in	function
(	O
fs	pointer
->	O
transport	pointer
)	O
;	O
break	O
;	O
case	O
DICO_IOCTL_BYTES_OUT	int
:	O
*	O
(	O
off_t	long
*	O
)	O
call_data	pointer
=	O
dico_stream_bytes_out	function
(	O
fs	pointer
->	O
transport	pointer
)	O
;	O
break	O
;	O
default	O
:	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
dico_stream_t	pointer
filter_stream_create	function
(	O
dico_stream_t	pointer
str	pointer
,	O
size_t	long
min_level	long
,	O
size_t	long
max_line_length	long
,	O
filter_xcode_t	pointer
xcode	pointer
,	O
int	O
mode	int
)	O
{	O
struct	O
filter_stream	struct
*	O
fs	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
fs	pointer
)	O
)	O
;	O
dico_stream_t	pointer
stream	pointer
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
fs	pointer
)	O
return	O
NULL	O
;	O
rc	int
=	O
dico_stream_create	function
(	O
&	O
stream	pointer
,	O
mode	int
==	O
FILTER_ENCODE	int
?	O
DICO_STREAM_WRITE	int
:	O
DICO_STREAM_READ	int
,	O
fs	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	function
(	O
fs	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
mode	int
==	O
FILTER_ENCODE	int
)	O
{	O
fs	pointer
->	O
inbuf	pointer
=	O
malloc	function
(	O
min_level	long
)	O
;	O
if	O
(	O
!	O
fs	pointer
->	O
inbuf	pointer
)	O
{	O
dico_stream_destroy	function
(	O
&	O
stream	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
fs	pointer
->	O
inlevel	long
=	O
0	int
;	O
dico_stream_set_write	function
(	O
stream	pointer
,	O
filter_write	function
)	O
;	O
dico_stream_set_flush	function
(	O
stream	pointer
,	O
filter_wr_flush	function
)	O
;	O
dico_stream_set_destroy	function
(	O
stream	pointer
,	O
filter_stream_destroy	function
)	O
;	O
}	O
else	O
{	O
dico_stream_set_read	function
(	O
stream	pointer
,	O
filter_read	function
)	O
;	O
}	O
dico_stream_set_ioctl	function
(	O
stream	pointer
,	O
filter_ioctl	function
)	O
;	O
fs	pointer
->	O
transport	pointer
=	O
str	pointer
;	O
fs	pointer
->	O
level	int
=	O
0	int
;	O
fs	pointer
->	O
min_level	long
=	O
min_level	long
;	O
fs	pointer
->	O
line_length	long
=	O
0	int
;	O
fs	pointer
->	O
max_line_length	long
=	O
max_line_length	long
;	O
fs	pointer
->	O
xcode	pointer
=	O
xcode	pointer
;	O
return	O
stream	pointer
;	O
}	O
dico_stream_t	pointer
dico_codec_stream_create	function
(	O
const	O
char	O
*	O
encoding	pointer
,	O
int	O
mode	int
,	O
dico_stream_t	pointer
transport	pointer
)	O
{	O
dico_stream_t	pointer
str	pointer
=	O
NULL	O
;	O
if	O
(	O
strcmp	function
(	O
encoding	pointer
,	O
"base64"	pointer
)	O
==	O
0	int
)	O
str	pointer
=	O
dico_base64_stream_create	function
(	O
transport	pointer
,	O
mode	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
encoding	pointer
,	O
"quoted-printable"	pointer
)	O
==	O
0	int
)	O
str	pointer
=	O
dico_qp_stream_create	function
(	O
transport	pointer
,	O
mode	int
)	O
;	O
return	O
str	pointer
;	O
}	O
