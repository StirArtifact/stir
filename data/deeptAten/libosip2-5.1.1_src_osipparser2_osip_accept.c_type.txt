int	O
osip_message_set_accept	function
(	O
osip_message_t	struct
*	O
sip	pointer
,	O
const	O
char	O
*	O
hvalue	pointer
)	O
{	O
osip_accept_t	struct
*	O
accept	pointer
;	O
int	O
i	int
;	O
i	int
=	O
accept_init	O
(	O
&	O
accept	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
i	int
=	O
osip_accept_parse	O
(	O
accept	pointer
,	O
hvalue	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_accept_free	O
(	O
accept	pointer
)	O
;	O
return	O
i	int
;	O
}	O
sip	pointer
->	O
message_property	int
=	O
2	int
;	O
osip_list_add	function
(	O
&	O
sip	pointer
->	O
accepts	struct
,	O
accept	pointer
,	O
-	O
1	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_message_get_accept	function
(	O
const	O
osip_message_t	struct
*	O
sip	pointer
,	O
int	O
pos	int
,	O
osip_accept_t	struct
*	O
*	O
dest	pointer
)	O
{	O
osip_accept_t	struct
*	O
accept	pointer
;	O
*	O
dest	pointer
=	O
NULL	O
;	O
if	O
(	O
osip_list_size	function
(	O
&	O
sip	pointer
->	O
accepts	struct
)	O
<=	O
pos	int
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
accept	pointer
=	O
(	O
osip_accept_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
sip	pointer
->	O
accepts	struct
,	O
pos	int
)	O
;	O
*	O
dest	pointer
=	O
accept	pointer
;	O
return	O
pos	int
;	O
}	O
int	O
osip_accept_to_str	function
(	O
const	O
osip_accept_t	struct
*	O
accept	pointer
,	O
char	O
*	O
*	O
dest	pointer
)	O
{	O
char	O
*	O
buf	pointer
;	O
char	O
*	O
tmp	pointer
;	O
size_t	long
len	long
=	O
0	int
;	O
*	O
dest	pointer
=	O
NULL	O
;	O
if	O
(	O
accept	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
accept	pointer
->	O
type	pointer
!=	O
NULL	O
)	O
len	long
+=	O
strlen	function
(	O
accept	pointer
->	O
type	pointer
)	O
;	O
if	O
(	O
accept	pointer
->	O
subtype	pointer
!=	O
NULL	O
)	O
len	long
+=	O
strlen	function
(	O
accept	pointer
->	O
subtype	pointer
)	O
;	O
if	O
(	O
len	long
==	O
0	int
)	O
{	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
2	int
)	O
;	O
if	O
(	O
buf	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
buf	pointer
[	O
0	int
]	O
=	O
' '	O
;	O
buf	pointer
[	O
1	int
]	O
=	O
'\0'	O
;	O
*	O
dest	pointer
=	O
buf	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
len	long
+=	O
4	int
+	O
10	int
*	O
osip_list_size	function
(	O
&	O
accept	pointer
->	O
gen_params	struct
)	O
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
len	long
)	O
;	O
if	O
(	O
buf	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
tmp	pointer
=	O
buf	pointer
;	O
sprintf	function
(	O
tmp	pointer
,	O
"%s/%s"	pointer
,	O
accept	pointer
->	O
type	pointer
,	O
accept	pointer
->	O
subtype	pointer
)	O
;	O
tmp	pointer
=	O
tmp	pointer
+	O
strlen	function
(	O
tmp	pointer
)	O
;	O
{	O
osip_list_iterator_t	struct
it	pointer
;	O
osip_generic_param_t	struct
*	O
u_param	pointer
=	O
(	O
osip_generic_param_t	struct
*	O
)	O
osip_list_get_first	function
(	O
&	O
accept	pointer
->	O
gen_params	struct
,	O
&	O
it	pointer
)	O
;	O
while	O
(	O
u_param	pointer
!=	O
OSIP_SUCCESS	int
)	O
{	O
size_t	long
tmp_len	long
;	O
if	O
(	O
u_param	pointer
->	O
gvalue	pointer
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
buf	pointer
)	O
;	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
tmp_len	long
=	O
strlen	function
(	O
buf	pointer
)	O
+	O
4	int
+	O
strlen	function
(	O
u_param	pointer
->	O
gname	pointer
)	O
+	O
strlen	function
(	O
u_param	pointer
->	O
gvalue	pointer
)	O
+	O
1	int
;	O
if	O
(	O
len	long
<	O
tmp_len	long
)	O
{	O
buf	pointer
=	O
osip_realloc	O
(	O
buf	pointer
,	O
tmp_len	long
)	O
;	O
len	long
=	O
tmp_len	long
;	O
tmp	pointer
=	O
buf	pointer
+	O
strlen	function
(	O
buf	pointer
)	O
;	O
}	O
snprintf	function
(	O
tmp	pointer
,	O
len	long
-	O
(	O
tmp	pointer
-	O
buf	pointer
)	O
,	O
"; %s=%s"	pointer
,	O
u_param	pointer
->	O
gname	pointer
,	O
u_param	pointer
->	O
gvalue	pointer
)	O
;	O
tmp	pointer
=	O
tmp	pointer
+	O
strlen	function
(	O
tmp	pointer
)	O
;	O
u_param	pointer
=	O
(	O
osip_generic_param_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
it	pointer
)	O
;	O
}	O
}	O
*	O
dest	pointer
=	O
buf	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
