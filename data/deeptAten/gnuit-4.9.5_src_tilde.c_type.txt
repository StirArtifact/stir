extern	O
char	O
*	O
strcpy	function
(	O
)	O
;	O
static	O
char	O
*	O
default_prefixes	array
[	O
]	O
=	O
{	O
" ~"	pointer
,	O
"\t~"	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
}	O
;	O
static	O
char	O
*	O
default_suffixes	array
[	O
]	O
=	O
{	O
" "	pointer
,	O
"\n"	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
}	O
;	O
CPFunction	function
*	O
tilde_expansion_failure_hook	pointer
=	O
(	O
CPFunction	function
*	O
)	O
NULL	O
;	O
char	O
*	O
*	O
tilde_additional_prefixes	pointer
=	O
default_prefixes	array
;	O
char	O
*	O
*	O
tilde_additional_suffixes	pointer
=	O
default_suffixes	array
;	O
static	O
int	O
tilde_find_prefix	function
(	O
string	pointer
,	O
len	pointer
)	O
char	O
*	O
string	pointer
;	O
int	O
*	O
len	pointer
;	O
{	O
register	O
int	O
i	int
,	O
j	int
,	O
string_len	int
;	O
register	O
char	O
*	O
*	O
prefixes	pointer
=	O
tilde_additional_prefixes	pointer
;	O
string_len	int
=	O
strlen	function
(	O
string	pointer
)	O
;	O
*	O
len	pointer
=	O
0	int
;	O
if	O
(	O
!	O
*	O
string	pointer
||	O
*	O
string	pointer
==	O
'~'	O
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
prefixes	pointer
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
string_len	int
;	O
i	int
++	O
)	O
{	O
for	O
(	O
j	int
=	O
0	int
;	O
prefixes	pointer
[	O
j	int
]	O
;	O
j	int
++	O
)	O
{	O
if	O
(	O
strncmp	function
(	O
string	pointer
+	O
i	int
,	O
prefixes	pointer
[	O
j	int
]	O
,	O
strlen	function
(	O
prefixes	pointer
[	O
j	int
]	O
)	O
)	O
==	O
0	int
)	O
{	O
*	O
len	pointer
=	O
strlen	function
(	O
prefixes	pointer
[	O
j	int
]	O
)	O
-	O
1	int
;	O
return	O
(	O
i	int
+	O
*	O
len	pointer
)	O
;	O
}	O
}	O
}	O
}	O
return	O
(	O
string_len	int
)	O
;	O
}	O
static	O
int	O
tilde_find_suffix	function
(	O
string	pointer
)	O
char	O
*	O
string	pointer
;	O
{	O
register	O
int	O
i	int
,	O
j	int
,	O
string_len	int
;	O
register	O
char	O
*	O
*	O
suffixes	pointer
=	O
tilde_additional_suffixes	pointer
;	O
string_len	int
=	O
strlen	function
(	O
string	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
string_len	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
string	pointer
[	O
i	int
]	O
==	O
'/'	O
||	O
!	O
string	pointer
[	O
i	int
]	O
)	O
break	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
suffixes	pointer
&&	O
suffixes	pointer
[	O
j	int
]	O
;	O
j	int
++	O
)	O
{	O
if	O
(	O
strncmp	function
(	O
string	pointer
+	O
i	int
,	O
suffixes	pointer
[	O
j	int
]	O
,	O
strlen	function
(	O
suffixes	pointer
[	O
j	int
]	O
)	O
)	O
==	O
0	int
)	O
return	O
(	O
i	int
)	O
;	O
}	O
}	O
return	O
(	O
i	int
)	O
;	O
}	O
char	O
*	O
tilde_expand	function
(	O
string	pointer
)	O
char	O
*	O
string	pointer
;	O
{	O
char	O
*	O
result	pointer
,	O
*	O
tilde_expand_word	function
(	O
)	O
;	O
int	O
result_size	int
,	O
result_index	int
;	O
result_size	int
=	O
result_index	int
=	O
0	int
;	O
result	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
while	O
(	O
1	int
)	O
{	O
register	O
int	O
start	int
,	O
end	int
;	O
char	O
*	O
tilde_word	pointer
,	O
*	O
expansion	pointer
;	O
int	O
len	pointer
;	O
start	int
=	O
tilde_find_prefix	function
(	O
string	pointer
,	O
&	O
len	pointer
)	O
;	O
if	O
(	O
(	O
result_index	int
+	O
start	int
+	O
1	int
)	O
>	O
result_size	int
)	O
result	pointer
=	O
xrealloc	function
(	O
result	pointer
,	O
1	int
+	O
(	O
result_size	int
+=	O
(	O
start	int
+	O
20	int
)	O
)	O
)	O
;	O
strncpy	function
(	O
result	pointer
+	O
result_index	int
,	O
string	pointer
,	O
start	int
)	O
;	O
result_index	int
+=	O
start	int
;	O
string	pointer
+=	O
start	int
;	O
end	int
=	O
tilde_find_suffix	function
(	O
string	pointer
)	O
;	O
if	O
(	O
!	O
start	int
&&	O
!	O
end	int
)	O
break	O
;	O
tilde_word	pointer
=	O
xmalloc	function
(	O
1	int
+	O
end	int
)	O
;	O
strncpy	function
(	O
tilde_word	pointer
,	O
string	pointer
,	O
end	int
)	O
;	O
tilde_word	pointer
[	O
end	int
]	O
=	O
'\0'	O
;	O
string	pointer
+=	O
end	int
;	O
expansion	pointer
=	O
tilde_expand_word	function
(	O
tilde_word	pointer
)	O
;	O
xfree	function
(	O
tilde_word	pointer
)	O
;	O
len	pointer
=	O
strlen	function
(	O
expansion	pointer
)	O
;	O
if	O
(	O
(	O
result_index	int
+	O
len	pointer
+	O
1	int
)	O
>	O
result_size	int
)	O
result	pointer
=	O
xrealloc	function
(	O
result	pointer
,	O
1	int
+	O
(	O
result_size	int
+=	O
(	O
len	pointer
+	O
20	int
)	O
)	O
)	O
;	O
strcpy	function
(	O
result	pointer
+	O
result_index	int
,	O
expansion	pointer
)	O
;	O
result_index	int
+=	O
len	pointer
;	O
xfree	function
(	O
expansion	pointer
)	O
;	O
}	O
result	pointer
[	O
result_index	int
]	O
=	O
'\0'	O
;	O
return	O
(	O
result	pointer
)	O
;	O
}	O
char	O
*	O
tilde_expand_word	function
(	O
filename	pointer
)	O
char	O
*	O
filename	pointer
;	O
{	O
char	O
*	O
dirname	pointer
;	O
char	O
*	O
temp_name	pointer
;	O
if	O
(	O
filename	pointer
==	O
(	O
char	O
*	O
)	O
0	int
)	O
return	O
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
dirname	pointer
=	O
savestring	O
(	O
filename	pointer
)	O
;	O
if	O
(	O
*	O
dirname	pointer
!=	O
'~'	O
)	O
return	O
(	O
dirname	pointer
)	O
;	O
if	O
(	O
!	O
dirname	pointer
[	O
1	int
]	O
||	O
dirname	pointer
[	O
1	int
]	O
==	O
'/'	O
)	O
{	O
char	O
*	O
temp_home	pointer
=	O
(	O
char	O
*	O
)	O
getenv	function
(	O
"HOME"	pointer
)	O
;	O
int	O
home_len	int
;	O
if	O
(	O
!	O
temp_home	pointer
)	O
{	O
struct	O
passwd	struct
*	O
entry	pointer
;	O
entry	pointer
=	O
getpwuid	function
(	O
getuid	function
(	O
)	O
)	O
;	O
if	O
(	O
entry	pointer
)	O
temp_home	pointer
=	O
entry	pointer
->	O
pw_dir	pointer
;	O
}	O
home_len	int
=	O
temp_home	pointer
?	O
strlen	function
(	O
temp_home	pointer
)	O
:	O
0	int
;	O
temp_name	pointer
=	O
xmalloc	function
(	O
1	int
+	O
strlen	function
(	O
dirname	pointer
+	O
1	int
)	O
+	O
home_len	int
)	O
;	O
if	O
(	O
temp_home	pointer
)	O
strcpy	function
(	O
temp_name	pointer
,	O
temp_home	pointer
)	O
;	O
strcpy	function
(	O
temp_name	pointer
+	O
home_len	int
,	O
dirname	pointer
+	O
1	int
)	O
;	O
xfree	function
(	O
dirname	pointer
)	O
;	O
dirname	pointer
=	O
temp_name	pointer
;	O
}	O
else	O
{	O
char	O
*	O
username	pointer
;	O
struct	O
passwd	struct
*	O
user_entry	pointer
;	O
int	O
i	int
,	O
len	pointer
;	O
username	pointer
=	O
xmalloc	function
(	O
strlen	function
(	O
dirname	pointer
)	O
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
dirname	pointer
[	O
i	int
]	O
&&	O
dirname	pointer
[	O
i	int
]	O
!=	O
'/'	O
;	O
i	int
++	O
)	O
username	pointer
[	O
i	int
-	O
1	int
]	O
=	O
dirname	pointer
[	O
i	int
]	O
;	O
username	pointer
[	O
i	int
-	O
1	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
(	O
user_entry	pointer
=	O
getpwnam	function
(	O
username	pointer
)	O
)	O
==	O
(	O
struct	O
passwd	struct
*	O
)	O
0	int
)	O
{	O
if	O
(	O
tilde_expansion_failure_hook	pointer
)	O
{	O
char	O
*	O
expansion	pointer
;	O
expansion	pointer
=	O
(	O
*	O
tilde_expansion_failure_hook	pointer
)	O
(	O
username	pointer
)	O
;	O
if	O
(	O
expansion	pointer
)	O
{	O
len	pointer
=	O
strlen	function
(	O
expansion	pointer
)	O
;	O
temp_name	pointer
=	O
xmalloc	function
(	O
1	int
+	O
len	pointer
+	O
strlen	function
(	O
dirname	pointer
+	O
i	int
)	O
)	O
;	O
strcpy	function
(	O
temp_name	pointer
,	O
expansion	pointer
)	O
;	O
strcpy	function
(	O
temp_name	pointer
+	O
len	pointer
,	O
dirname	pointer
+	O
i	int
)	O
;	O
xfree	function
(	O
expansion	pointer
)	O
;	O
xfree	function
(	O
dirname	pointer
)	O
;	O
dirname	pointer
=	O
temp_name	pointer
;	O
}	O
}	O
}	O
else	O
{	O
len	pointer
=	O
strlen	function
(	O
user_entry	pointer
->	O
pw_dir	pointer
)	O
;	O
temp_name	pointer
=	O
xmalloc	function
(	O
1	int
+	O
len	pointer
+	O
strlen	function
(	O
dirname	pointer
+	O
i	int
)	O
)	O
;	O
strcpy	function
(	O
temp_name	pointer
,	O
user_entry	pointer
->	O
pw_dir	pointer
)	O
;	O
strcpy	function
(	O
temp_name	pointer
+	O
len	pointer
,	O
dirname	pointer
+	O
i	int
)	O
;	O
xfree	function
(	O
dirname	pointer
)	O
;	O
dirname	pointer
=	O
temp_name	pointer
;	O
}	O
endpwent	function
(	O
)	O
;	O
xfree	function
(	O
username	pointer
)	O
;	O
}	O
return	O
(	O
dirname	pointer
)	O
;	O
}	O
