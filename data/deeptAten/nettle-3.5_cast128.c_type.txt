void	O
cast128_encrypt	O
(	O
const	O
struct	O
cast128_ctx	struct
*	O
ctx	pointer
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
dst	pointer
,	O
const	O
uint8_t	char
*	O
src	pointer
)	O
{	O
FOR_BLOCKS	O
(	O
length	long
,	O
dst	pointer
,	O
src	pointer
,	O
CAST128_BLOCK_SIZE	int
)	O
{	O
uint32_t	int
t	int
,	O
l	int
,	O
r	int
;	O
l	int
=	O
READ_UINT32	O
(	O
src	pointer
)	O
;	O
r	int
=	O
READ_UINT32	O
(	O
src	pointer
+	O
4	int
)	O
;	O
F1	O
(	O
l	int
,	O
r	int
,	O
0	int
)	O
;	O
F2	O
(	O
r	int
,	O
l	int
,	O
1	int
)	O
;	O
F3	O
(	O
l	int
,	O
r	int
,	O
2	int
)	O
;	O
F1	O
(	O
r	int
,	O
l	int
,	O
3	int
)	O
;	O
F2	O
(	O
l	int
,	O
r	int
,	O
4	int
)	O
;	O
F3	O
(	O
r	int
,	O
l	int
,	O
5	int
)	O
;	O
F1	O
(	O
l	int
,	O
r	int
,	O
6	int
)	O
;	O
F2	O
(	O
r	int
,	O
l	int
,	O
7	int
)	O
;	O
F3	O
(	O
l	int
,	O
r	int
,	O
8	int
)	O
;	O
F1	O
(	O
r	int
,	O
l	int
,	O
9	int
)	O
;	O
F2	O
(	O
l	int
,	O
r	int
,	O
10	int
)	O
;	O
F3	O
(	O
r	int
,	O
l	int
,	O
11	int
)	O
;	O
if	O
(	O
ctx	pointer
->	O
rounds	int
&	O
16	int
)	O
{	O
F1	O
(	O
l	int
,	O
r	int
,	O
12	int
)	O
;	O
F2	O
(	O
r	int
,	O
l	int
,	O
13	int
)	O
;	O
F3	O
(	O
l	int
,	O
r	int
,	O
14	int
)	O
;	O
F1	O
(	O
r	int
,	O
l	int
,	O
15	int
)	O
;	O
}	O
WRITE_UINT32	O
(	O
dst	pointer
,	O
r	int
)	O
;	O
WRITE_UINT32	O
(	O
dst	pointer
+	O
4	int
,	O
l	int
)	O
;	O
}	O
}	O
void	O
cast128_decrypt	O
(	O
const	O
struct	O
cast128_ctx	struct
*	O
ctx	pointer
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
dst	pointer
,	O
const	O
uint8_t	char
*	O
src	pointer
)	O
{	O
FOR_BLOCKS	O
(	O
length	long
,	O
dst	pointer
,	O
src	pointer
,	O
CAST128_BLOCK_SIZE	int
)	O
{	O
uint32_t	int
t	int
,	O
l	int
,	O
r	int
;	O
r	int
=	O
READ_UINT32	O
(	O
src	pointer
)	O
;	O
l	int
=	O
READ_UINT32	O
(	O
src	pointer
+	O
4	int
)	O
;	O
if	O
(	O
ctx	pointer
->	O
rounds	int
&	O
16	int
)	O
{	O
F1	O
(	O
r	int
,	O
l	int
,	O
15	int
)	O
;	O
F3	O
(	O
l	int
,	O
r	int
,	O
14	int
)	O
;	O
F2	O
(	O
r	int
,	O
l	int
,	O
13	int
)	O
;	O
F1	O
(	O
l	int
,	O
r	int
,	O
12	int
)	O
;	O
}	O
F3	O
(	O
r	int
,	O
l	int
,	O
11	int
)	O
;	O
F2	O
(	O
l	int
,	O
r	int
,	O
10	int
)	O
;	O
F1	O
(	O
r	int
,	O
l	int
,	O
9	int
)	O
;	O
F3	O
(	O
l	int
,	O
r	int
,	O
8	int
)	O
;	O
F2	O
(	O
r	int
,	O
l	int
,	O
7	int
)	O
;	O
F1	O
(	O
l	int
,	O
r	int
,	O
6	int
)	O
;	O
F3	O
(	O
r	int
,	O
l	int
,	O
5	int
)	O
;	O
F2	O
(	O
l	int
,	O
r	int
,	O
4	int
)	O
;	O
F1	O
(	O
r	int
,	O
l	int
,	O
3	int
)	O
;	O
F3	O
(	O
l	int
,	O
r	int
,	O
2	int
)	O
;	O
F2	O
(	O
r	int
,	O
l	int
,	O
1	int
)	O
;	O
F1	O
(	O
l	int
,	O
r	int
,	O
0	int
)	O
;	O
WRITE_UINT32	O
(	O
dst	pointer
,	O
l	int
)	O
;	O
WRITE_UINT32	O
(	O
dst	pointer
+	O
4	int
,	O
r	int
)	O
;	O
}	O
}	O
void	O
cast5_set_key	O
(	O
struct	O
cast128_ctx	struct
*	O
ctx	pointer
,	O
size_t	long
length	long
,	O
const	O
uint8_t	char
*	O
key	pointer
)	O
{	O
uint32_t	int
x0	int
,	O
x1	int
,	O
x2	int
,	O
x3	int
,	O
z0	int
,	O
z1	int
,	O
z2	int
,	O
z3	int
;	O
uint32_t	int
w	array
;	O
int	O
full	int
;	O
assert	O
(	O
length	long
>=	O
CAST5_MIN_KEY_SIZE	int
)	O
;	O
assert	O
(	O
length	long
<=	O
CAST5_MAX_KEY_SIZE	int
)	O
;	O
full	int
=	O
(	O
length	long
>	O
CAST_SMALL_KEY	int
)	O
;	O
x0	int
=	O
READ_UINT32	O
(	O
key	pointer
)	O
;	O
switch	O
(	O
length	long
&	O
3	int
)	O
{	O
case	O
0	int
:	O
w	array
=	O
READ_UINT32	O
(	O
key	pointer
+	O
length	long
-	O
4	int
)	O
;	O
break	O
;	O
case	O
3	int
:	O
w	array
=	O
READ_UINT24	O
(	O
key	pointer
+	O
length	long
-	O
3	int
)	O
<<	O
8	int
;	O
break	O
;	O
case	O
2	int
:	O
w	array
=	O
READ_UINT16	O
(	O
key	pointer
+	O
length	long
-	O
2	int
)	O
<<	O
16	int
;	O
break	O
;	O
case	O
1	int
:	O
w	array
=	O
(	O
uint32_t	int
)	O
key	pointer
[	O
length	long
-	O
1	int
]	O
<<	O
24	int
;	O
break	O
;	O
}	O
if	O
(	O
length	long
<=	O
8	int
)	O
{	O
x1	int
=	O
w	array
;	O
x2	int
=	O
x3	int
=	O
0	int
;	O
}	O
else	O
{	O
x1	int
=	O
READ_UINT32	O
(	O
key	pointer
+	O
4	int
)	O
;	O
if	O
(	O
length	long
<=	O
12	int
)	O
{	O
x2	int
=	O
w	array
;	O
x3	int
=	O
0	int
;	O
}	O
else	O
{	O
x2	int
=	O
READ_UINT32	O
(	O
key	pointer
+	O
8	int
)	O
;	O
x3	int
=	O
w	array
;	O
}	O
}	O
EXPAND	O
(	O
SET_KM	O
,	O
full	int
)	O
;	O
EXPAND	O
(	O
SET_KR	O
,	O
full	int
)	O
;	O
ctx	pointer
->	O
rounds	int
=	O
full	int
?	O
16	int
:	O
12	int
;	O
}	O
void	O
cast128_set_key	O
(	O
struct	O
cast128_ctx	struct
*	O
ctx	pointer
,	O
const	O
uint8_t	char
*	O
key	pointer
)	O
{	O
cast5_set_key	O
(	O
ctx	pointer
,	O
CAST128_KEY_SIZE	int
,	O
key	pointer
)	O
;	O
}	O
