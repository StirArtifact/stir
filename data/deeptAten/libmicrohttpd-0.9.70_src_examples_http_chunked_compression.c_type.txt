struct	O
Holder	struct
{	O
FILE	struct
*	O
file	pointer
;	O
z_stream	struct
stream	struct
;	O
void	O
*	O
buf	pointer
;	O
}	O
;	O
static	O
int	O
compress_buf	function
(	O
z_stream	struct
*	O
strm	pointer
,	O
const	O
void	O
*	O
src	pointer
,	O
size_t	long
src_size	long
,	O
size_t	long
*	O
offset	long
,	O
void	O
*	O
*	O
dest	pointer
,	O
size_t	long
*	O
dest_size	pointer
,	O
void	O
*	O
tmp	pointer
)	O
{	O
unsigned	O
int	O
have	int
;	O
int	O
ret	int
;	O
int	O
flush	int
;	O
void	O
*	O
tmp_dest	pointer
;	O
*	O
dest	pointer
=	O
NULL	O
;	O
*	O
dest_size	pointer
=	O
0	int
;	O
do	O
{	O
if	O
(	O
src_size	long
>	O
CHUNK	int
)	O
{	O
strm	pointer
->	O
avail_in	int
=	O
CHUNK	int
;	O
src_size	long
-=	O
CHUNK	int
;	O
flush	int
=	O
Z_NO_FLUSH	int
;	O
}	O
else	O
{	O
strm	pointer
->	O
avail_in	int
=	O
(	O
uInt	int
)	O
src_size	long
;	O
flush	int
=	O
Z_SYNC_FLUSH	int
;	O
}	O
*	O
offset	long
+=	O
strm	pointer
->	O
avail_in	int
;	O
strm	pointer
->	O
next_in	pointer
=	O
(	O
Bytef	char
*	O
)	O
src	pointer
;	O
do	O
{	O
strm	pointer
->	O
avail_out	int
=	O
CHUNK	int
;	O
strm	pointer
->	O
next_out	pointer
=	O
tmp	pointer
;	O
ret	int
=	O
deflate	function
(	O
strm	pointer
,	O
flush	int
)	O
;	O
have	int
=	O
CHUNK	int
-	O
strm	pointer
->	O
avail_out	int
;	O
*	O
dest_size	pointer
+=	O
have	int
;	O
tmp_dest	pointer
=	O
realloc	function
(	O
*	O
dest	pointer
,	O
*	O
dest_size	pointer
)	O
;	O
if	O
(	O
NULL	O
==	O
tmp_dest	pointer
)	O
{	O
free	function
(	O
*	O
dest	pointer
)	O
;	O
*	O
dest	pointer
=	O
NULL	O
;	O
return	O
MHD_NO	int
;	O
}	O
*	O
dest	pointer
=	O
tmp_dest	pointer
;	O
memcpy	function
(	O
(	O
*	O
dest	pointer
)	O
+	O
(	O
(	O
*	O
dest_size	pointer
)	O
-	O
have	int
)	O
,	O
tmp	pointer
,	O
have	int
)	O
;	O
}	O
while	O
(	O
0	int
==	O
strm	pointer
->	O
avail_out	int
)	O
;	O
}	O
while	O
(	O
flush	int
!=	O
Z_SYNC_FLUSH	int
)	O
;	O
return	O
(	O
Z_OK	int
==	O
ret	int
)	O
?	O
MHD_YES	int
:	O
MHD_NO	int
;	O
}	O
static	O
ssize_t	long
read_cb	function
(	O
void	O
*	O
cls	pointer
,	O
uint64_t	long
pos	long
,	O
char	O
*	O
mem	pointer
,	O
size_t	long
size	int
)	O
{	O
struct	O
Holder	struct
*	O
holder	pointer
=	O
cls	pointer
;	O
void	O
*	O
src	pointer
;	O
void	O
*	O
buf	pointer
;	O
ssize_t	long
ret	int
;	O
size_t	long
offset	long
;	O
if	O
(	O
pos	long
>	O
SSIZE_MAX	O
)	O
return	O
MHD_CONTENT_READER_END_WITH_ERROR	O
;	O
offset	long
=	O
(	O
size_t	long
)	O
pos	long
;	O
src	pointer
=	O
malloc	function
(	O
size	int
)	O
;	O
if	O
(	O
NULL	O
==	O
src	pointer
)	O
return	O
MHD_CONTENT_READER_END_WITH_ERROR	O
;	O
ret	int
=	O
fread	function
(	O
src	pointer
,	O
1	int
,	O
size	int
,	O
holder	pointer
->	O
file	pointer
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
ret	int
=	O
MHD_CONTENT_READER_END_WITH_ERROR	O
;	O
goto	O
done	int
;	O
}	O
if	O
(	O
0	int
==	O
size	int
)	O
{	O
ret	int
=	O
MHD_CONTENT_READER_END_OF_STREAM	O
;	O
goto	O
done	int
;	O
}	O
if	O
(	O
MHD_YES	int
!=	O
compress_buf	function
(	O
&	O
holder	pointer
->	O
stream	struct
,	O
src	pointer
,	O
ret	int
,	O
&	O
offset	long
,	O
&	O
buf	pointer
,	O
&	O
size	int
,	O
holder	pointer
->	O
buf	pointer
)	O
)	O
ret	int
=	O
MHD_CONTENT_READER_END_WITH_ERROR	O
;	O
else	O
{	O
memcpy	function
(	O
mem	pointer
,	O
buf	pointer
,	O
size	int
)	O
;	O
ret	int
=	O
size	int
;	O
}	O
free	function
(	O
buf	pointer
)	O
;	O
done	int
:	O
free	function
(	O
src	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
static	O
void	O
free_cb	function
(	O
void	O
*	O
cls	pointer
)	O
{	O
struct	O
Holder	struct
*	O
holder	pointer
=	O
cls	pointer
;	O
fclose	function
(	O
holder	pointer
->	O
file	pointer
)	O
;	O
deflateEnd	function
(	O
&	O
holder	pointer
->	O
stream	struct
)	O
;	O
free	function
(	O
holder	pointer
->	O
buf	pointer
)	O
;	O
free	function
(	O
holder	pointer
)	O
;	O
}	O
static	O
int	O
ahc_echo	function
(	O
void	O
*	O
cls	pointer
,	O
struct	O
MHD_Connection	O
*	O
con	pointer
,	O
const	O
char	O
*	O
url	pointer
,	O
const	O
char	O
*	O
method	int
,	O
const	O
char	O
*	O
version	pointer
,	O
const	O
char	O
*	O
upload_data	pointer
,	O
size_t	long
*	O
upload_size	pointer
,	O
void	O
*	O
*	O
ptr	pointer
)	O
{	O
struct	O
Holder	struct
*	O
holder	pointer
;	O
struct	O
MHD_Response	O
*	O
res	pointer
;	O
int	O
ret	int
;	O
(	O
void	O
)	O
cls	pointer
;	O
(	O
void	O
)	O
url	pointer
;	O
(	O
void	O
)	O
method	int
;	O
(	O
void	O
)	O
version	pointer
;	O
(	O
void	O
)	O
upload_data	pointer
;	O
(	O
void	O
)	O
upload_size	pointer
;	O
if	O
(	O
NULL	O
==	O
*	O
ptr	pointer
)	O
{	O
*	O
ptr	pointer
=	O
(	O
void	O
*	O
)	O
1	int
;	O
return	O
MHD_YES	int
;	O
}	O
*	O
ptr	pointer
=	O
NULL	O
;	O
holder	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
struct	O
Holder	struct
)	O
)	O
;	O
if	O
(	O
!	O
holder	pointer
)	O
return	O
MHD_NO	int
;	O
holder	pointer
->	O
file	pointer
=	O
fopen	function
(	O
__FILE__	O
,	O
"rb"	pointer
)	O
;	O
if	O
(	O
NULL	O
==	O
holder	pointer
->	O
file	pointer
)	O
goto	O
file_error	O
;	O
ret	int
=	O
deflateInit	O
(	O
&	O
holder	pointer
->	O
stream	struct
,	O
Z_BEST_COMPRESSION	int
)	O
;	O
if	O
(	O
ret	int
!=	O
Z_OK	int
)	O
goto	O
stream_error	O
;	O
holder	pointer
->	O
buf	pointer
=	O
malloc	function
(	O
CHUNK	int
)	O
;	O
if	O
(	O
NULL	O
==	O
holder	pointer
->	O
buf	pointer
)	O
goto	O
buf_error	O
;	O
res	pointer
=	O
MHD_create_response_from_callback	function
(	O
MHD_SIZE_UNKNOWN	O
,	O
1024	int
,	O
&	O
read_cb	function
,	O
holder	pointer
,	O
&	O
free_cb	function
)	O
;	O
if	O
(	O
NULL	O
==	O
res	pointer
)	O
goto	O
error	O
;	O
ret	int
=	O
MHD_add_response_header	function
(	O
res	pointer
,	O
MHD_HTTP_HEADER_CONTENT_ENCODING	pointer
,	O
"deflate"	pointer
)	O
;	O
if	O
(	O
MHD_YES	int
!=	O
ret	int
)	O
goto	O
res_error	O
;	O
ret	int
=	O
MHD_add_response_header	function
(	O
res	pointer
,	O
MHD_HTTP_HEADER_CONTENT_TYPE	pointer
,	O
"text/x-c"	pointer
)	O
;	O
if	O
(	O
MHD_YES	int
!=	O
ret	int
)	O
goto	O
res_error	O
;	O
ret	int
=	O
MHD_queue_response	function
(	O
con	pointer
,	O
MHD_HTTP_OK	int
,	O
res	pointer
)	O
;	O
res_error	O
:	O
MHD_destroy_response	function
(	O
res	pointer
)	O
;	O
return	O
ret	int
;	O
error	O
:	O
free	function
(	O
holder	pointer
->	O
buf	pointer
)	O
;	O
buf_error	O
:	O
deflateEnd	function
(	O
&	O
holder	pointer
->	O
stream	struct
)	O
;	O
stream_error	O
:	O
fclose	function
(	O
holder	pointer
->	O
file	pointer
)	O
;	O
file_error	O
:	O
free	function
(	O
holder	pointer
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	pointer
)	O
{	O
struct	O
MHD_Daemon	O
*	O
d	pointer
;	O
unsigned	O
int	O
port	short
;	O
if	O
(	O
(	O
argc	int
!=	O
2	int
)	O
||	O
(	O
1	int
!=	O
sscanf	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"%u"	pointer
,	O
&	O
port	short
)	O
)	O
||	O
(	O
UINT16_MAX	O
<	O
port	short
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s PORT\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
return	O
1	int
;	O
}	O
d	pointer
=	O
MHD_start_daemon	function
(	O
MHD_USE_AUTO	int
|	O
MHD_USE_INTERNAL_POLLING_THREAD	int
,	O
(	O
uint16_t	short
)	O
port	short
,	O
NULL	O
,	O
NULL	O
,	O
&	O
ahc_echo	function
,	O
NULL	O
,	O
MHD_OPTION_END	int
)	O
;	O
if	O
(	O
NULL	O
==	O
d	pointer
)	O
return	O
1	int
;	O
if	O
(	O
0	int
==	O
port	short
)	O
MHD_get_daemon_info	function
(	O
d	pointer
,	O
MHD_DAEMON_INFO_BIND_PORT	int
,	O
&	O
port	short
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"HTTP server running at http://localhost:%u\n\nPress ENTER to stop the server ...\n"	pointer
,	O
port	short
)	O
;	O
(	O
void	O
)	O
getc	function
(	O
stdin	pointer
)	O
;	O
MHD_stop_daemon	function
(	O
d	pointer
)	O
;	O
return	O
0	int
;	O
}	O
