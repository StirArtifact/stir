VObject	struct
*	O
VCopyObject	function
(	O
VObject	struct
*	O
obj	pointer
)	O
{	O
register	O
int	O
i	int
;	O
register	O
VObject	struct
*	O
newObj	pointer
;	O
newObj	pointer
=	O
(	O
VObject	struct
*	O
)	O
Vmalloc	function
(	O
sizeof	O
(	O
VObject	struct
)	O
)	O
;	O
newObj	pointer
->	O
name	pointer
=	O
obj	pointer
->	O
name	pointer
;	O
newObj	pointer
->	O
extent	double
=	O
obj	pointer
->	O
extent	double
;	O
newObj	pointer
->	O
center	struct
=	O
obj	pointer
->	O
center	struct
;	O
newObj	pointer
->	O
numPolys	int
=	O
obj	pointer
->	O
numPolys	int
;	O
newObj	pointer
->	O
polygon	pointer
=	O
(	O
VPolygon	struct
*	O
*	O
)	O
Vmalloc	function
(	O
sizeof	O
(	O
VPolygon	struct
*	O
)	O
*	O
newObj	pointer
->	O
numPolys	int
)	O
;	O
if	O
(	O
obj	pointer
->	O
order	pointer
)	O
{	O
newObj	pointer
->	O
order	pointer
=	O
(	O
unsigned	O
short	O
*	O
)	O
Vmalloc	function
(	O
sizeof	O
(	O
unsigned	O
short	O
)	O
*	O
NUM_ASPECTS	int
*	O
newObj	pointer
->	O
numPolys	int
)	O
;	O
memcpy	O
(	O
(	O
char	O
*	O
)	O
newObj	pointer
->	O
order	pointer
,	O
(	O
char	O
*	O
)	O
obj	pointer
->	O
order	pointer
,	O
sizeof	O
(	O
unsigned	O
short	O
)	O
*	O
NUM_ASPECTS	int
*	O
newObj	pointer
->	O
numPolys	int
)	O
;	O
}	O
else	O
{	O
newObj	pointer
->	O
order	pointer
=	O
(	O
unsigned	O
short	O
*	O
)	O
NULL	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
obj	pointer
->	O
numPolys	int
;	O
++	O
i	int
)	O
{	O
if	O
(	O
(	O
newObj	pointer
->	O
polygon	pointer
[	O
i	int
]	O
=	O
VCopyPolygon	function
(	O
obj	pointer
->	O
polygon	pointer
[	O
i	int
]	O
)	O
)	O
==	O
(	O
VPolygon	struct
*	O
)	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"VCopyObject: can't copy polygons\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
return	O
newObj	pointer
;	O
}	O
