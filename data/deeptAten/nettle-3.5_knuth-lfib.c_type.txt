void	O
knuth_lfib_init	O
(	O
struct	O
knuth_lfib_ctx	struct
*	O
ctx	pointer
,	O
uint32_t	int
seed	int
)	O
{	O
uint32_t	int
t	int
,	O
j	int
;	O
uint32_t	int
x	array
[	O
2	int
*	O
KK	O
-	O
1	int
]	O
;	O
uint32_t	int
ss	int
=	O
(	O
seed	int
+	O
2	int
)	O
&	O
(	O
MM	O
-	O
2	int
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
KK	O
;	O
j	int
++	O
)	O
{	O
x	array
[	O
j	int
]	O
=	O
ss	int
;	O
ss	int
<<=	O
1	int
;	O
if	O
(	O
ss	int
>=	O
MM	O
)	O
ss	int
-=	O
(	O
MM	O
-	O
2	int
)	O
;	O
}	O
for	O
(	O
;	O
j	int
<	O
2	int
*	O
KK	O
-	O
1	int
;	O
j	int
++	O
)	O
x	array
[	O
j	int
]	O
=	O
0	int
;	O
x	array
[	O
1	int
]	O
++	O
;	O
ss	int
=	O
seed	int
&	O
(	O
MM	O
-	O
1	int
)	O
;	O
for	O
(	O
t	int
=	O
TT	int
-	O
1	int
;	O
t	int
;	O
)	O
{	O
for	O
(	O
j	int
=	O
KK	O
-	O
1	int
;	O
j	int
>	O
0	int
;	O
j	int
--	O
)	O
x	array
[	O
j	int
+	O
j	int
]	O
=	O
x	array
[	O
j	int
]	O
;	O
for	O
(	O
j	int
=	O
2	int
*	O
KK	O
-	O
2	int
;	O
j	int
>	O
KK	O
-	O
LL	int
;	O
j	int
-=	O
2	int
)	O
x	array
[	O
2	int
*	O
KK	O
-	O
1	int
-	O
j	int
]	O
=	O
x	array
[	O
j	int
]	O
&	O
~	O
1	int
;	O
for	O
(	O
j	int
=	O
2	int
*	O
KK	O
-	O
2	int
;	O
j	int
>=	O
KK	O
;	O
j	int
--	O
)	O
if	O
(	O
x	array
[	O
j	int
]	O
&	O
1	int
)	O
{	O
x	array
[	O
j	int
-	O
(	O
KK	O
-	O
LL	int
)	O
]	O
=	O
(	O
x	array
[	O
j	int
-	O
(	O
KK	O
-	O
LL	int
)	O
]	O
-	O
x	array
[	O
j	int
]	O
)	O
&	O
(	O
MM	O
-	O
1	int
)	O
;	O
x	array
[	O
j	int
-	O
KK	O
]	O
=	O
(	O
x	array
[	O
j	int
-	O
KK	O
]	O
-	O
x	array
[	O
j	int
]	O
)	O
&	O
(	O
MM	O
-	O
1	int
)	O
;	O
}	O
if	O
(	O
ss	int
&	O
1	int
)	O
{	O
for	O
(	O
j	int
=	O
KK	O
;	O
j	int
>	O
0	int
;	O
j	int
--	O
)	O
x	array
[	O
j	int
]	O
=	O
x	array
[	O
j	int
-	O
1	int
]	O
;	O
x	array
[	O
0	int
]	O
=	O
x	array
[	O
KK	O
]	O
;	O
if	O
(	O
x	array
[	O
KK	O
]	O
&	O
1	int
)	O
x	array
[	O
LL	int
]	O
=	O
(	O
x	array
[	O
LL	int
]	O
-	O
x	array
[	O
KK	O
]	O
)	O
&	O
(	O
MM	O
-	O
1	int
)	O
;	O
}	O
if	O
(	O
ss	int
)	O
ss	int
>>=	O
1	int
;	O
else	O
t	int
--	O
;	O
}	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
LL	int
;	O
j	int
++	O
)	O
ctx	pointer
->	O
x	array
[	O
j	int
+	O
KK	O
-	O
LL	int
]	O
=	O
x	array
[	O
j	int
]	O
;	O
for	O
(	O
;	O
j	int
<	O
KK	O
;	O
j	int
++	O
)	O
ctx	pointer
->	O
x	array
[	O
j	int
-	O
LL	int
]	O
=	O
x	array
[	O
j	int
]	O
;	O
ctx	pointer
->	O
index	int
=	O
0	int
;	O
}	O
uint32_t	int
knuth_lfib_get	O
(	O
struct	O
knuth_lfib_ctx	struct
*	O
ctx	pointer
)	O
{	O
uint32_t	int
value	int
;	O
assert	O
(	O
ctx	pointer
->	O
index	int
<	O
KK	O
)	O
;	O
value	int
=	O
ctx	pointer
->	O
x	array
[	O
ctx	pointer
->	O
index	int
]	O
;	O
ctx	pointer
->	O
x	array
[	O
ctx	pointer
->	O
index	int
]	O
-=	O
ctx	pointer
->	O
x	array
[	O
(	O
ctx	pointer
->	O
index	int
+	O
KK	O
-	O
LL	int
)	O
%	O
KK	O
]	O
;	O
ctx	pointer
->	O
x	array
[	O
ctx	pointer
->	O
index	int
]	O
&=	O
(	O
MM	O
-	O
1	int
)	O
;	O
ctx	pointer
->	O
index	int
=	O
(	O
ctx	pointer
->	O
index	int
+	O
1	int
)	O
%	O
KK	O
;	O
return	O
value	int
;	O
}	O
void	O
knuth_lfib_get_array	O
(	O
struct	O
knuth_lfib_ctx	struct
*	O
ctx	pointer
,	O
size_t	long
n	long
,	O
uint32_t	int
*	O
a	pointer
)	O
{	O
unsigned	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	long
;	O
i	int
++	O
)	O
a	pointer
[	O
i	int
]	O
=	O
knuth_lfib_get	O
(	O
ctx	pointer
)	O
;	O
}	O
void	O
knuth_lfib_random	O
(	O
struct	O
knuth_lfib_ctx	struct
*	O
ctx	pointer
,	O
size_t	long
n	long
,	O
uint8_t	char
*	O
dst	pointer
)	O
{	O
for	O
(	O
;	O
n	long
>=	O
3	int
;	O
n	long
-=	O
3	int
,	O
dst	pointer
+=	O
3	int
)	O
{	O
uint32_t	int
value	int
=	O
knuth_lfib_get	O
(	O
ctx	pointer
)	O
;	O
value	int
^=	O
(	O
value	int
>>	O
24	int
)	O
;	O
WRITE_UINT24	O
(	O
dst	pointer
,	O
value	int
)	O
;	O
}	O
if	O
(	O
n	long
)	O
{	O
uint32_t	int
value	int
=	O
knuth_lfib_get	O
(	O
ctx	pointer
)	O
;	O
switch	O
(	O
n	long
)	O
{	O
case	O
1	int
:	O
*	O
dst	pointer
++	O
=	O
value	int
&	O
0xff	int
;	O
break	O
;	O
case	O
2	int
:	O
WRITE_UINT16	O
(	O
dst	pointer
,	O
value	int
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
}	O
