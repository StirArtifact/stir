static	O
char	O
alphabet	array
[	O
]	O
=	O
"1234567890"	pointer
"ABCDEFGHIJ"	pointer
"KLMNOPQRST"	pointer
"UVWXYZ-. *"	pointer
"$/+%"	pointer
;	O
static	O
char	O
checkbet	array
[	O
]	O
=	O
"0123456789"	pointer
"ABCDEFGHIJ"	pointer
"KLMNOPQRST"	pointer
"UVWXYZ-. $"	pointer
"/+%"	pointer
;	O
static	O
char	O
*	O
bars	array
[	O
]	O
=	O
{	O
"31113"	pointer
,	O
"13113"	pointer
,	O
"33111"	pointer
,	O
"11313"	pointer
,	O
"31311"	pointer
,	O
"13311"	pointer
,	O
"11133"	pointer
,	O
"31131"	pointer
,	O
"13131"	pointer
,	O
"11331"	pointer
}	O
;	O
static	O
char	O
*	O
spaces	array
[	O
]	O
=	O
{	O
"1311"	pointer
,	O
"1131"	pointer
,	O
"1113"	pointer
,	O
"3111"	pointer
}	O
;	O
static	O
char	O
*	O
specialbars	array
[	O
]	O
=	O
{	O
"11111"	pointer
,	O
"11111"	pointer
,	O
"11111"	pointer
,	O
"11111"	pointer
}	O
;	O
static	O
char	O
*	O
specialspaces	array
[	O
]	O
=	O
{	O
"3331"	pointer
,	O
"3313"	pointer
,	O
"3133"	pointer
,	O
"1333"	pointer
}	O
;	O
static	O
char	O
*	O
fillers	array
[	O
]	O
=	O
{	O
"0a3a1c1c1a"	pointer
,	O
"1a3a1c1c1a"	pointer
}	O
;	O
static	O
char	O
*	O
code39ext	array
[	O
]	O
=	O
{	O
"%U"	pointer
,	O
"$A"	pointer
,	O
"$B"	pointer
,	O
"$C"	pointer
,	O
"$D"	pointer
,	O
"$E"	pointer
,	O
"$F"	pointer
,	O
"$G"	pointer
,	O
"$H"	pointer
,	O
"$I"	pointer
,	O
"$J"	pointer
,	O
"$K"	pointer
,	O
"$L"	pointer
,	O
"$M"	pointer
,	O
"$N"	pointer
,	O
"$O"	pointer
,	O
"$P"	pointer
,	O
"$Q"	pointer
,	O
"$R"	pointer
,	O
"$S"	pointer
,	O
"$T"	pointer
,	O
"$U"	pointer
,	O
"$V"	pointer
,	O
"$W"	pointer
,	O
"$X"	pointer
,	O
"$Y"	pointer
,	O
"$Z"	pointer
,	O
"%A"	pointer
,	O
"%B"	pointer
,	O
"%C"	pointer
,	O
"%D"	pointer
,	O
"%E"	pointer
,	O
" "	pointer
,	O
"/A"	pointer
,	O
"/B"	pointer
,	O
"/C"	pointer
,	O
"/D"	pointer
,	O
"/E"	pointer
,	O
"/F"	pointer
,	O
"/G"	pointer
,	O
"/H"	pointer
,	O
"/I"	pointer
,	O
"/J"	pointer
,	O
"/K"	pointer
,	O
"/L"	pointer
,	O
"-"	pointer
,	O
"."	pointer
,	O
"/O"	pointer
,	O
"0"	pointer
,	O
"1"	pointer
,	O
"2"	pointer
,	O
"3"	pointer
,	O
"4"	pointer
,	O
"5"	pointer
,	O
"6"	pointer
,	O
"7"	pointer
,	O
"8"	pointer
,	O
"9"	pointer
,	O
"/Z"	pointer
,	O
"%F"	pointer
,	O
"%G"	pointer
,	O
"%H"	pointer
,	O
"%I"	pointer
,	O
"%J"	pointer
,	O
"%V"	pointer
,	O
"A"	pointer
,	O
"B"	pointer
,	O
"C"	pointer
,	O
"D"	pointer
,	O
"E"	pointer
,	O
"F"	pointer
,	O
"G"	pointer
,	O
"H"	pointer
,	O
"I"	pointer
,	O
"J"	pointer
,	O
"K"	pointer
,	O
"L"	pointer
,	O
"M"	pointer
,	O
"N"	pointer
,	O
"O"	pointer
,	O
"P"	pointer
,	O
"Q"	pointer
,	O
"R"	pointer
,	O
"S"	pointer
,	O
"T"	pointer
,	O
"U"	pointer
,	O
"V"	pointer
,	O
"W"	pointer
,	O
"X"	pointer
,	O
"Y"	pointer
,	O
"Z"	pointer
,	O
"%K"	pointer
,	O
"%L"	pointer
,	O
"%M"	pointer
,	O
"%N"	pointer
,	O
"%O"	pointer
,	O
"%W"	pointer
,	O
"+A"	pointer
,	O
"+B"	pointer
,	O
"+C"	pointer
,	O
"+D"	pointer
,	O
"+E"	pointer
,	O
"+F"	pointer
,	O
"+G"	pointer
,	O
"+H"	pointer
,	O
"+I"	pointer
,	O
"+J"	pointer
,	O
"+K"	pointer
,	O
"+L"	pointer
,	O
"+M"	pointer
,	O
"+N"	pointer
,	O
"+O"	pointer
,	O
"+P"	pointer
,	O
"+Q"	pointer
,	O
"+R"	pointer
,	O
"+S"	pointer
,	O
"+T"	pointer
,	O
"+U"	pointer
,	O
"+V"	pointer
,	O
"+W"	pointer
,	O
"+X"	pointer
,	O
"+Y"	pointer
,	O
"+Z"	pointer
,	O
"%P"	pointer
,	O
"%Q"	pointer
,	O
"%R"	pointer
,	O
"%S"	pointer
,	O
"%T"	pointer
}	O
;	O
int	O
Barcode_39_verify	function
(	O
unsigned	O
char	O
*	O
text	pointer
)	O
{	O
int	O
i	int
,	O
lower	int
=	O
0	int
,	O
upper	int
=	O
0	int
;	O
if	O
(	O
text	pointer
[	O
0	int
]	O
==	O
'\0'	O
)	O
return	O
-	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
text	pointer
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
isupper	function
(	O
text	pointer
[	O
i	int
]	O
)	O
)	O
upper	int
++	O
;	O
if	O
(	O
islower	function
(	O
text	pointer
[	O
i	int
]	O
)	O
)	O
lower	int
++	O
;	O
if	O
(	O
!	O
strchr	function
(	O
alphabet	array
,	O
toupper	function
(	O
text	pointer
[	O
i	int
]	O
)	O
)	O
)	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
lower	int
&&	O
upper	int
)	O
return	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
Barcode_39ext_verify	function
(	O
unsigned	O
char	O
*	O
text	pointer
)	O
{	O
int	O
i	int
;	O
if	O
(	O
text	pointer
[	O
0	int
]	O
==	O
'\0'	O
)	O
return	O
-	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
text	pointer
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
text	pointer
[	O
i	int
]	O
>	O
127	int
)	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
add_one	function
(	O
char	O
*	O
ptr	pointer
,	O
int	O
code	int
)	O
{	O
char	O
*	O
b	pointer
,	O
*	O
s	pointer
;	O
if	O
(	O
code	int
<	O
40	int
)	O
{	O
b	pointer
=	O
bars	array
[	O
code	int
%	O
10	int
]	O
;	O
s	pointer
=	O
spaces	array
[	O
code	int
/	O
10	int
]	O
;	O
}	O
else	O
{	O
b	pointer
=	O
specialbars	array
[	O
code	int
-	O
40	int
]	O
;	O
s	pointer
=	O
specialspaces	array
[	O
code	int
-	O
40	int
]	O
;	O
}	O
sprintf	function
(	O
ptr	pointer
,	O
"1%c%c%c%c%c%c%c%c%c"	pointer
,	O
b	pointer
[	O
0	int
]	O
,	O
s	pointer
[	O
0	int
]	O
,	O
b	pointer
[	O
1	int
]	O
,	O
s	pointer
[	O
1	int
]	O
,	O
b	pointer
[	O
2	int
]	O
,	O
s	pointer
[	O
2	int
]	O
,	O
b	pointer
[	O
3	int
]	O
,	O
s	pointer
[	O
3	int
]	O
,	O
b	pointer
[	O
4	int
]	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
Barcode_39_encode	function
(	O
struct	O
Barcode_Item	struct
*	O
bc	pointer
)	O
{	O
static	O
char	O
*	O
text	pointer
;	O
static	O
char	O
*	O
partial	pointer
;	O
static	O
char	O
*	O
textinfo	pointer
;	O
char	O
*	O
c	pointer
,	O
*	O
ptr	pointer
,	O
*	O
textptr	pointer
;	O
int	O
i	int
,	O
code	int
,	O
textpos	int
,	O
checksum	int
=	O
0	int
;	O
if	O
(	O
bc	pointer
->	O
partial	pointer
)	O
free	function
(	O
bc	pointer
->	O
partial	pointer
)	O
;	O
if	O
(	O
bc	pointer
->	O
textinfo	pointer
)	O
free	function
(	O
bc	pointer
->	O
textinfo	pointer
)	O
;	O
bc	pointer
->	O
partial	pointer
=	O
bc	pointer
->	O
textinfo	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
bc	pointer
->	O
encoding	pointer
)	O
bc	pointer
->	O
encoding	pointer
=	O
strdup	function
(	O
"code 39"	pointer
)	O
;	O
text	pointer
=	O
bc	pointer
->	O
ascii	pointer
;	O
if	O
(	O
!	O
text	pointer
)	O
{	O
bc	pointer
->	O
error	int
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
partial	pointer
=	O
malloc	function
(	O
(	O
strlen	function
(	O
text	pointer
)	O
+	O
3	int
)	O
*	O
10	int
+	O
2	int
)	O
;	O
if	O
(	O
!	O
partial	pointer
)	O
{	O
bc	pointer
->	O
error	int
=	O
errno	O
;	O
return	O
-	O
1	int
;	O
}	O
textinfo	pointer
=	O
malloc	function
(	O
10	int
*	O
strlen	function
(	O
text	pointer
)	O
+	O
2	int
)	O
;	O
if	O
(	O
!	O
textinfo	pointer
)	O
{	O
bc	pointer
->	O
error	int
=	O
errno	O
;	O
free	function
(	O
partial	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
strcpy	function
(	O
partial	pointer
,	O
fillers	array
[	O
0	int
]	O
)	O
;	O
ptr	pointer
=	O
partial	pointer
+	O
strlen	function
(	O
partial	pointer
)	O
;	O
textptr	pointer
=	O
textinfo	pointer
;	O
textpos	int
=	O
22	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
text	pointer
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
c	pointer
=	O
strchr	function
(	O
alphabet	array
,	O
toupper	function
(	O
text	pointer
[	O
i	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
c	pointer
)	O
{	O
bc	pointer
->	O
error	int
=	O
EINVAL	int
;	O
free	function
(	O
partial	pointer
)	O
;	O
free	function
(	O
textinfo	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
code	int
=	O
c	pointer
-	O
alphabet	array
;	O
add_one	function
(	O
ptr	pointer
,	O
code	int
)	O
;	O
c	pointer
=	O
strchr	function
(	O
checkbet	array
,	O
*	O
c	pointer
)	O
;	O
if	O
(	O
c	pointer
)	O
checksum	int
+=	O
(	O
c	pointer
-	O
checkbet	array
)	O
;	O
sprintf	function
(	O
textptr	pointer
,	O
"%i:12:%c "	pointer
,	O
textpos	int
,	O
toupper	function
(	O
text	pointer
[	O
i	int
]	O
)	O
)	O
;	O
textpos	int
+=	O
16	int
;	O
textptr	pointer
+=	O
strlen	function
(	O
textptr	pointer
)	O
;	O
ptr	pointer
+=	O
strlen	function
(	O
ptr	pointer
)	O
;	O
}	O
if	O
(	O
(	O
bc	pointer
->	O
flags	int
&	O
BARCODE_NO_CHECKSUM	int
)	O
==	O
0	int
)	O
{	O
code	int
=	O
(	O
strchr	function
(	O
alphabet	array
,	O
checkbet	array
[	O
checksum	int
%	O
43	int
]	O
)	O
-	O
alphabet	array
)	O
;	O
add_one	function
(	O
ptr	pointer
,	O
code	int
)	O
;	O
}	O
strcat	function
(	O
ptr	pointer
,	O
fillers	array
[	O
1	int
]	O
)	O
;	O
bc	pointer
->	O
partial	pointer
=	O
partial	pointer
;	O
bc	pointer
->	O
textinfo	pointer
=	O
textinfo	pointer
;	O
return	O
0	int
;	O
}	O
int	O
Barcode_39ext_encode	function
(	O
struct	O
Barcode_Item	struct
*	O
bc	pointer
)	O
{	O
static	O
char	O
*	O
eascii	pointer
;	O
static	O
char	O
*	O
text	pointer
;	O
char	O
c	pointer
,	O
*	O
ptr	pointer
;	O
int	O
i	int
;	O
text	pointer
=	O
bc	pointer
->	O
ascii	pointer
;	O
if	O
(	O
!	O
text	pointer
)	O
{	O
bc	pointer
->	O
error	int
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
eascii	pointer
=	O
malloc	function
(	O
strlen	function
(	O
text	pointer
)	O
*	O
2	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
eascii	pointer
)	O
{	O
bc	pointer
->	O
error	int
=	O
errno	O
;	O
return	O
-	O
1	int
;	O
}	O
ptr	pointer
=	O
eascii	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
text	pointer
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
c	pointer
=	O
text	pointer
[	O
i	int
]	O
;	O
if	O
(	O
c	pointer
<	O
0	int
)	O
{	O
bc	pointer
->	O
error	int
=	O
EINVAL	int
;	O
free	function
(	O
eascii	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
strcpy	function
(	O
ptr	pointer
,	O
code39ext	array
[	O
(	O
int	O
)	O
c	pointer
]	O
)	O
;	O
ptr	pointer
+=	O
strlen	function
(	O
ptr	pointer
)	O
;	O
}	O
bc	pointer
->	O
ascii	pointer
=	O
eascii	pointer
;	O
free	function
(	O
text	pointer
)	O
;	O
return	O
Barcode_39_encode	function
(	O
bc	pointer
)	O
;	O
}	O
