const	O
char	O
protz_rcsid	array
[	O
]	O
=	O
"$Id: protz.c,v 1.11 2002/02/08 10:35:52 ian Rel $"	pointer
;	O
typedef	O
unsigned	O
char	O
achdrval_t	array
[	O
4	int
]	O
;	O
typedef	O
unsigned	O
long	O
hdrval_t	long
;	O
typedef	O
unsigned	O
long	O
winpos_t	long
;	O
static	O
int	O
cZtimeout	int
=	O
CTIMEOUT	int
;	O
static	O
int	O
cZretries	int
=	O
CRETRIES	int
;	O
static	O
int	O
cZstartup_retries	int
=	O
CSTARTUP_RETRIES	int
;	O
static	O
int	O
cZmax_garbage	int
=	O
CGARBAGE	int
;	O
static	O
int	O
cZtx_window	int
=	O
CSEND_WINDOW	int
;	O
static	O
int	O
cZrx_buf_len	int
=	O
0	int
;	O
static	O
boolean	int
fZesc_ctl	int
=	O
FESCAPE_CONTROL	O
;	O
struct	O
uuconf_cmdtab	struct
asZproto_params	array
[	O
]	O
=	O
{	O
{	O
"timeout"	pointer
,	O
UUCONF_CMDTABTYPE_INT	O
,	O
(	O
pointer	pointer
)	O
&	O
cZtimeout	int
,	O
NULL	O
}	O
,	O
{	O
"retries"	pointer
,	O
UUCONF_CMDTABTYPE_INT	O
,	O
(	O
pointer	pointer
)	O
&	O
cZretries	int
,	O
NULL	O
}	O
,	O
{	O
"startup-retries"	pointer
,	O
UUCONF_CMDTABTYPE_INT	O
,	O
(	O
pointer	pointer
)	O
&	O
cZstartup_retries	int
,	O
NULL	O
}	O
,	O
{	O
"garbage"	pointer
,	O
UUCONF_CMDTABTYPE_INT	O
,	O
(	O
pointer	pointer
)	O
&	O
cZmax_garbage	int
,	O
NULL	O
}	O
,	O
{	O
"send-window"	pointer
,	O
UUCONF_CMDTABTYPE_INT	O
,	O
(	O
pointer	pointer
)	O
&	O
cZtx_window	int
,	O
NULL	O
}	O
,	O
{	O
"escape-control"	pointer
,	O
UUCONF_CMDTABTYPE_BOOLEAN	O
,	O
(	O
pointer	pointer
)	O
&	O
fZesc_ctl	int
,	O
NULL	O
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
NULL	O
}	O
}	O
;	O
static	O
unsigned	O
long	O
cZheaders_sent	long
;	O
static	O
unsigned	O
long	O
cZheaders_received	long
;	O
static	O
unsigned	O
long	O
cZbytes_resent	long
;	O
static	O
unsigned	O
long	O
cZtimeouts	long
;	O
static	O
unsigned	O
long	O
cZerrors	long
;	O
static	O
char	O
*	O
zZtx_buf	pointer
;	O
static	O
char	O
*	O
zZtx_packet_buf	pointer
;	O
static	O
char	O
*	O
zZrx_packet_buf	pointer
;	O
static	O
unsigned	O
cZblklen	int
;	O
static	O
unsigned	O
cZtxwspac	int
;	O
static	O
unsigned	O
cZtxwcnt	int
;	O
static	O
unsigned	O
cZrxwcnt	int
;	O
static	O
winpos_t	long
wpZtxstart	long
;	O
static	O
winpos_t	long
wpZtxpos	long
;	O
static	O
winpos_t	long
wpZlastsync	long
;	O
static	O
winpos_t	long
wpZlrxpos	long
;	O
static	O
winpos_t	long
wpZrxpos	long
;	O
static	O
int	O
iZlast_tx_data_packet	int
;	O
static	O
int	O
iZjunk_count	int
;	O
static	O
int	O
iZtleft	int
;	O
static	O
int	O
iZbeenhereb4	int
;	O
static	O
winpos_t	long
wpZrxbytes	long
;	O
static	O
int	O
iZlast_rx_data_packet	int
;	O
static	O
char	O
xon	char
=	O
XON	int
;	O
static	O
int	O
iZpkt_rcvd_kludge	int
;	O
static	O
hdrval_t	long
hvZpkt_hdrval_kludge	long
;	O
static	O
const	O
char	O
*	O
azZframe_types	array
[	O
]	O
=	O
{	O
"Carrier Lost"	pointer
,	O
"Timeout"	pointer
,	O
"Error"	pointer
,	O
"ZINIT"	pointer
,	O
"ZDATA"	pointer
,	O
"ZRPOS"	pointer
,	O
"ZACK"	pointer
,	O
"ZNAK"	pointer
,	O
"Zreserved"	pointer
,	O
"ZINITEND"	pointer
,	O
"ZFIN"	pointer
,	O
"UNKNOWN!!!"	pointer
}	O
;	O
static	O
boolean	int
fzsend_data	function
P	O
(	O
(	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
,	O
char	O
*	O
zdata	pointer
,	O
size_t	long
cdata	long
,	O
boolean	int
fendofmessage	int
)	O
)	O
;	O
static	O
boolean	int
fzprocess	function
P	O
(	O
(	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
)	O
)	O
;	O
static	O
boolean	int
fzstart_proto	function
P	O
(	O
(	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
)	O
)	O
;	O
static	O
int	O
izexchange_init	function
P	O
(	O
(	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
,	O
int	O
send_type	int
,	O
achdrval_t	array
send_val	array
,	O
achdrval_t	array
recv_val	array
)	O
)	O
;	O
static	O
boolean	int
fzshutdown_proto	function
P	O
(	O
(	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
)	O
)	O
;	O
static	O
boolean	int
fzstart_tx	function
P	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
boolean	int
fzfinish_tx	function
P	O
(	O
(	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
,	O
long	O
*	O
plredo	pointer
)	O
)	O
;	O
static	O
boolean	int
fzstart_rx	function
P	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
boolean	int
fzfinish_rx	function
P	O
(	O
(	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
)	O
)	O
;	O
static	O
boolean	int
fzsend_hdr	function
P	O
(	O
(	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
,	O
int	O
ipkttype	int
,	O
int	O
ihdrtype	int
,	O
hdrval_t	long
hdrval	long
,	O
boolean	int
fcheckreceive	int
)	O
)	O
;	O
static	O
boolean	int
fzsend_data_packet	function
P	O
(	O
(	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
,	O
char	O
*	O
zdata	pointer
,	O
size_t	long
cdata	long
,	O
int	O
frameend	int
,	O
boolean	int
fcheckreceive	int
)	O
)	O
;	O
static	O
int	O
czbuild_header	function
P	O
(	O
(	O
char	O
*	O
zresult	pointer
,	O
int	O
ipkttype	int
,	O
int	O
ihdrtype	int
,	O
hdrval_t	long
hdrval	long
)	O
)	O
;	O
static	O
int	O
czbuild_data_packet	function
P	O
(	O
(	O
char	O
*	O
zresult	pointer
,	O
const	O
char	O
*	O
zdata	pointer
,	O
size_t	long
cdata	long
,	O
int	O
frameend	int
)	O
)	O
;	O
static	O
int	O
izrecv_hdr	function
P	O
(	O
(	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
,	O
achdrval_t	array
hdr	array
)	O
)	O
;	O
static	O
int	O
zrbhdr32	function
P	O
(	O
(	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
,	O
achdrval_t	array
hdr	array
)	O
)	O
;	O
static	O
int	O
zrhhdr	function
P	O
(	O
(	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
,	O
achdrval_t	array
hdr	array
)	O
)	O
;	O
static	O
int	O
zrdat32	function
P	O
(	O
(	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
,	O
char	O
*	O
buf	pointer
,	O
int	O
length	int
,	O
int	O
*	O
iprxcount	pointer
)	O
)	O
;	O
static	O
int	O
getinsync	function
P	O
(	O
(	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
,	O
boolean	int
flag	int
)	O
)	O
;	O
static	O
char	O
*	O
zputhex	function
P	O
(	O
(	O
char	O
*	O
p	pointer
,	O
int	O
ch	int
)	O
)	O
;	O
static	O
char	O
*	O
zputchar	function
P	O
(	O
(	O
char	O
*	O
p	pointer
,	O
int	O
ch	int
)	O
)	O
;	O
static	O
int	O
zgethex	function
P	O
(	O
(	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
)	O
)	O
;	O
static	O
int	O
zdlread	function
P	O
(	O
(	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
)	O
)	O
;	O
static	O
int	O
noxrd7	function
P	O
(	O
(	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
)	O
)	O
;	O
static	O
int	O
realreadchar	function
P	O
(	O
(	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
,	O
int	O
timeout	int
)	O
)	O
;	O
static	O
boolean	int
fzreceive_ready	function
P	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
void	O
stohdr	function
P	O
(	O
(	O
hdrval_t	long
pos	long
,	O
achdrval_t	array
hdr	array
)	O
)	O
;	O
static	O
hdrval_t	long
rclhdr	function
P	O
(	O
(	O
achdrval_t	array
hdr	array
)	O
)	O
;	O
static	O
hdrval_t	long
hvzencode_data_hdr	function
P	O
(	O
(	O
winpos_t	long
cbytes	long
)	O
)	O
;	O
static	O
void	O
zdecode_data_hdr	function
P	O
(	O
(	O
hdrval_t	long
hdrval	long
,	O
winpos_t	long
*	O
pcbytes	pointer
)	O
)	O
;	O
static	O
winpos_t	long
lzupdate_rxpos	function
P	O
(	O
(	O
achdrval_t	array
rx_hdr	array
,	O
winpos_t	long
rxpos	long
,	O
winpos_t	long
lrxpos	long
,	O
winpos_t	long
txpos	long
)	O
)	O
;	O
boolean	int
fzstart	function
(	O
qdaemon	pointer
,	O
pzlog	pointer
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
char	O
*	O
*	O
pzlog	pointer
;	O
{	O
*	O
pzlog	pointer
=	O
zbufalc	function
(	O
sizeof	O
"protocol 'a' starting: , , , , , "	pointer
+	O
100	int
)	O
;	O
sprintf	function
(	O
*	O
pzlog	pointer
,	O
"protocol 'a' starting: %d, %d, %d, %d, %d, %d"	pointer
,	O
cZtimeout	int
,	O
cZretries	int
,	O
cZstartup_retries	int
,	O
cZmax_garbage	int
,	O
cZtx_window	int
,	O
fZesc_ctl	int
)	O
;	O
if	O
(	O
!	O
fconn_set	function
(	O
qdaemon	pointer
->	O
qconn	pointer
,	O
PARITYSETTING_NONE	int
,	O
STRIPSETTING_EIGHTBITS	int
,	O
XONXOFF_OFF	int
)	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
cZtx_window	int
%	O
1024	int
!=	O
0	int
||	O
cZtx_window	int
<	O
4096	int
||	O
cZtx_window	int
>	O
65536	int
||	O
65536	int
%	O
cZtx_window	int
!=	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"fzstart: cZtx_window not one of 4096, 8192, 16384, 32768, 65536"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
zZtx_buf	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
CPACKETSIZE	int
)	O
;	O
zZtx_packet_buf	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
CPACKBUFSIZE	O
)	O
;	O
zZrx_packet_buf	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
CPACKBUFSIZE	O
)	O
;	O
iZlast_tx_data_packet	int
=	O
-	O
1	int
;	O
iZlast_rx_data_packet	int
=	O
-	O
1	int
;	O
wpZtxpos	long
=	O
wpZlrxpos	long
=	O
wpZrxpos	long
=	O
wpZrxbytes	long
=	O
0	int
;	O
cZtxwspac	int
=	O
cZtx_window	int
/	O
4	int
;	O
cZheaders_sent	long
=	O
cZheaders_received	long
=	O
cZbytes_resent	long
=	O
0	int
;	O
cZtimeouts	long
=	O
cZerrors	long
=	O
0	int
;	O
iZpkt_rcvd_kludge	int
=	O
-	O
1	int
;	O
if	O
(	O
!	O
fzstart_proto	function
(	O
qdaemon	pointer
)	O
)	O
return	O
FALSE	O
;	O
return	O
TRUE	O
;	O
}	O
boolean	int
fzshutdown	function
(	O
qdaemon	pointer
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
{	O
(	O
void	O
)	O
fzshutdown_proto	function
(	O
qdaemon	pointer
)	O
;	O
xfree	function
(	O
(	O
pointer	pointer
)	O
zZtx_buf	pointer
)	O
;	O
xfree	function
(	O
(	O
pointer	pointer
)	O
zZtx_packet_buf	pointer
)	O
;	O
xfree	function
(	O
(	O
pointer	pointer
)	O
zZrx_packet_buf	pointer
)	O
;	O
zZtx_buf	pointer
=	O
NULL	O
;	O
zZtx_packet_buf	pointer
=	O
NULL	O
;	O
zZrx_packet_buf	pointer
=	O
NULL	O
;	O
ulog	function
(	O
LOG_NORMAL	int
,	O
"Protocol 'a' messages: sent %lu, received %lu"	pointer
,	O
cZheaders_sent	long
,	O
cZheaders_received	long
)	O
;	O
ulog	function
(	O
LOG_NORMAL	int
,	O
"Protocol 'a' packets: sent %lu, received %lu"	pointer
,	O
wpZtxpos	long
/	O
1024	int
,	O
wpZrxbytes	long
/	O
1024	int
)	O
;	O
if	O
(	O
cZbytes_resent	long
!=	O
0	int
||	O
cZtimeouts	long
!=	O
0	int
||	O
cZerrors	long
!=	O
0	int
)	O
ulog	function
(	O
LOG_NORMAL	int
,	O
"Protocol 'a' errors: bytes resent %lu, timeouts %lu, errors %lu"	pointer
,	O
cZbytes_resent	long
,	O
cZtimeouts	long
,	O
cZerrors	long
)	O
;	O
cZtimeout	int
=	O
CTIMEOUT	int
;	O
cZretries	int
=	O
CRETRIES	int
;	O
cZstartup_retries	int
=	O
CSTARTUP_RETRIES	int
;	O
cZmax_garbage	int
=	O
CGARBAGE	int
;	O
cZtx_window	int
=	O
CSEND_WINDOW	int
;	O
fZesc_ctl	int
=	O
FESCAPE_CONTROL	O
;	O
cZheaders_sent	long
=	O
cZheaders_received	long
=	O
cZbytes_resent	long
=	O
0	int
;	O
cZtimeouts	long
=	O
cZerrors	long
=	O
0	int
;	O
return	O
TRUE	O
;	O
}	O
boolean	int
fzsendcmd	function
(	O
qdaemon	pointer
,	O
z	pointer
,	O
ilocal	int
,	O
iremote	int
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
const	O
char	O
*	O
z	pointer
;	O
int	O
ilocal	int
ATTRIBUTE_UNUSED	O
;	O
int	O
iremote	int
ATTRIBUTE_UNUSED	O
;	O
{	O
size_t	long
n	long
,	O
clen	long
;	O
long	O
lredo	long
;	O
char	O
*	O
zbuf	pointer
;	O
clen	long
=	O
strlen	function
(	O
z	pointer
)	O
+	O
1	int
;	O
DEBUG_MESSAGE1	O
(	O
DEBUG_PROTO	O
,	O
"fzsendcmd: sending command %s"	pointer
,	O
z	pointer
)	O
;	O
if	O
(	O
!	O
fzstart_tx	function
(	O
)	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
(	O
zbuf	pointer
=	O
zzgetspace	function
(	O
qdaemon	pointer
,	O
&	O
n	long
)	O
)	O
==	O
NULL	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
clen	long
>	O
n	long
)	O
ulog	function
(	O
LOG_FATAL	int
,	O
"fzsendcmd: clen > n"	pointer
)	O
;	O
strcpy	function
(	O
zbuf	pointer
,	O
z	pointer
)	O
;	O
do	O
{	O
if	O
(	O
!	O
fzsend_data	function
(	O
qdaemon	pointer
,	O
zbuf	pointer
,	O
clen	long
,	O
TRUE	O
)	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
!	O
fzfinish_tx	function
(	O
qdaemon	pointer
,	O
&	O
lredo	long
)	O
)	O
return	O
FALSE	O
;	O
}	O
while	O
(	O
lredo	long
>=	O
0	int
)	O
;	O
return	O
fzprocess	function
(	O
qdaemon	pointer
)	O
;	O
}	O
char	O
*	O
zzgetspace	function
(	O
qdaemon	pointer
,	O
pclen	pointer
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
ATTRIBUTE_UNUSED	O
;	O
size_t	long
*	O
pclen	pointer
;	O
{	O
*	O
pclen	pointer
=	O
cZblklen	int
;	O
return	O
zZtx_buf	pointer
;	O
}	O
boolean	int
fzsenddata	function
(	O
qdaemon	pointer
,	O
zdata	pointer
,	O
cdata	long
,	O
ilocal	int
,	O
iremote	int
,	O
ipos	long
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
char	O
*	O
zdata	pointer
;	O
size_t	long
cdata	long
;	O
int	O
ilocal	int
ATTRIBUTE_UNUSED	O
;	O
int	O
iremote	int
ATTRIBUTE_UNUSED	O
;	O
long	O
ipos	long
ATTRIBUTE_UNUSED	O
;	O
{	O
DEBUG_MESSAGE1	O
(	O
DEBUG_PROTO	O
,	O
"fzsenddata: %d bytes"	pointer
,	O
cdata	long
)	O
;	O
if	O
(	O
!	O
fzsend_data	function
(	O
qdaemon	pointer
,	O
zdata	pointer
,	O
cdata	long
,	O
cdata	long
==	O
0	int
)	O
)	O
return	O
FALSE	O
;	O
return	O
fzprocess	function
(	O
qdaemon	pointer
)	O
;	O
}	O
extern	O
struct	O
stransfer	struct
*	O
qTsend	pointer
;	O
static	O
boolean	int
fzsend_data	function
(	O
qdaemon	pointer
,	O
zdata	pointer
,	O
cdata	long
,	O
fendofmessage	int
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
char	O
*	O
zdata	pointer
;	O
size_t	long
cdata	long
;	O
boolean	int
fendofmessage	int
;	O
{	O
size_t	long
n	long
;	O
if	O
(	O
iZlast_tx_data_packet	int
==	O
-	O
1	int
||	O
iZlast_tx_data_packet	int
==	O
ZCRCW	char
)	O
{	O
cZtxwcnt	int
=	O
cZrxwcnt	int
=	O
0	int
;	O
iZjunk_count	int
=	O
0	int
;	O
if	O
(	O
!	O
fzsend_hdr	function
(	O
qdaemon	pointer
,	O
ZBIN	char
,	O
ZDATA	int
,	O
hvzencode_data_hdr	function
(	O
wpZtxpos	long
)	O
,	O
TRUE	O
)	O
)	O
return	O
FALSE	O
;	O
}	O
n	long
=	O
cdata	long
;	O
if	O
(	O
fendofmessage	int
)	O
iZlast_tx_data_packet	int
=	O
ZCRCF	char
;	O
else	O
if	O
(	O
iZjunk_count	int
>	O
3	int
)	O
iZlast_tx_data_packet	int
=	O
ZCRCW	char
;	O
else	O
if	O
(	O
wpZtxpos	long
==	O
wpZlastsync	long
)	O
iZlast_tx_data_packet	int
=	O
ZCRCW	char
;	O
else	O
if	O
(	O
cZrx_buf_len	int
&&	O
(	O
cZrxwcnt	int
+=	O
n	long
)	O
>=	O
(	O
size_t	long
)	O
cZrx_buf_len	int
)	O
iZlast_tx_data_packet	int
=	O
ZCRCW	char
;	O
else	O
if	O
(	O
(	O
cZtxwcnt	int
+=	O
n	long
)	O
>=	O
cZtxwspac	int
)	O
{	O
iZlast_tx_data_packet	int
=	O
ZCRCQ	char
;	O
cZtxwcnt	int
=	O
0	int
;	O
}	O
else	O
iZlast_tx_data_packet	int
=	O
ZCRCG	char
;	O
if	O
(	O
++	O
iZtleft	int
>	O
3	int
)	O
{	O
iZtleft	int
=	O
0	int
;	O
if	O
(	O
cZblklen	int
<	O
1024	int
)	O
cZblklen	int
*=	O
2	int
;	O
if	O
(	O
cZblklen	int
>	O
1024	int
)	O
cZblklen	int
=	O
1024	int
;	O
if	O
(	O
cZrx_buf_len	int
&&	O
cZblklen	int
>	O
(	O
size_t	long
)	O
cZrx_buf_len	int
)	O
cZblklen	int
=	O
cZrx_buf_len	int
;	O
}	O
if	O
(	O
FDEBUGGING	O
(	O
DEBUG_PROTO	O
)	O
)	O
{	O
const	O
char	O
*	O
type	pointer
;	O
switch	O
(	O
iZlast_tx_data_packet	int
)	O
{	O
case	O
ZCRCW	char
:	O
type	pointer
=	O
"ZCRCW"	pointer
;	O
break	O
;	O
case	O
ZCRCG	char
:	O
type	pointer
=	O
"ZCRCG"	pointer
;	O
break	O
;	O
case	O
ZCRCQ	char
:	O
type	pointer
=	O
"ZCRCQ"	pointer
;	O
break	O
;	O
case	O
ZCRCE	char
:	O
type	pointer
=	O
"ZCRCE"	pointer
;	O
break	O
;	O
case	O
ZCRCF	char
:	O
type	pointer
=	O
"ZCRCF"	pointer
;	O
break	O
;	O
default	O
:	O
type	pointer
=	O
"UNKNOWN!!!"	pointer
;	O
break	O
;	O
}	O
DEBUG_MESSAGE3	O
(	O
DEBUG_PROTO	O
,	O
"fzsend_data: %s, pos 0x%lx, %d bytes"	pointer
,	O
type	pointer
,	O
wpZtxpos	long
,	O
n	long
)	O
;	O
}	O
if	O
(	O
!	O
fzsend_data_packet	function
(	O
qdaemon	pointer
,	O
zdata	pointer
,	O
n	long
,	O
iZlast_tx_data_packet	int
,	O
TRUE	O
)	O
)	O
return	O
FALSE	O
;	O
wpZtxpos	long
+=	O
n	long
;	O
if	O
(	O
iZlast_tx_data_packet	int
==	O
ZCRCW	char
)	O
{	O
switch	O
(	O
getinsync	function
(	O
qdaemon	pointer
,	O
FALSE	O
)	O
)	O
{	O
case	O
ZACK	int
:	O
break	O
;	O
case	O
ZRPOS	int
:	O
if	O
(	O
qTsend	pointer
==	O
NULL	O
||	O
!	O
ffileisopen	O
(	O
qTsend	pointer
->	O
e	pointer
)	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Can't reset non-file"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
iZlast_tx_data_packet	int
=	O
-	O
1	int
;	O
DEBUG_MESSAGE1	O
(	O
DEBUG_PROTO	O
,	O
"fzsend_data: Seeking to %ld"	pointer
,	O
(	O
long	O
)	O
(	O
wpZrxpos	long
-	O
wpZtxstart	long
)	O
)	O
;	O
if	O
(	O
!	O
ffileseek	O
(	O
qTsend	pointer
->	O
e	pointer
,	O
wpZrxpos	long
-	O
wpZtxstart	long
)	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"seek: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
break	O
;	O
default	O
:	O
return	O
FALSE	O
;	O
}	O
return	O
TRUE	O
;	O
}	O
while	O
(	O
wpZtxpos	long
-	O
wpZlrxpos	long
>=	O
(	O
size_t	long
)	O
cZtx_window	int
-	O
2048	int
)	O
{	O
if	O
(	O
iZlast_tx_data_packet	int
!=	O
ZCRCQ	char
)	O
{	O
if	O
(	O
!	O
fzsend_data_packet	function
(	O
qdaemon	pointer
,	O
zdata	pointer
,	O
(	O
size_t	long
)	O
0	int
,	O
iZlast_tx_data_packet	int
=	O
ZCRCQ	char
,	O
TRUE	O
)	O
)	O
return	O
FALSE	O
;	O
}	O
switch	O
(	O
getinsync	function
(	O
qdaemon	pointer
,	O
TRUE	O
)	O
)	O
{	O
case	O
ZACK	int
:	O
break	O
;	O
case	O
ZRPOS	int
:	O
if	O
(	O
qTsend	pointer
==	O
NULL	O
||	O
!	O
ffileisopen	O
(	O
qTsend	pointer
->	O
e	pointer
)	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Can't reset non-file"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
iZlast_tx_data_packet	int
=	O
-	O
1	int
;	O
DEBUG_MESSAGE1	O
(	O
DEBUG_PROTO	O
,	O
"fzsend_data: Seeking to %ld"	pointer
,	O
(	O
long	O
)	O
(	O
wpZrxpos	long
-	O
wpZtxstart	long
)	O
)	O
;	O
if	O
(	O
!	O
ffileseek	O
(	O
qTsend	pointer
->	O
e	pointer
,	O
wpZrxpos	long
-	O
wpZtxstart	long
)	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"seek: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
break	O
;	O
default	O
:	O
return	O
FALSE	O
;	O
}	O
}	O
return	O
TRUE	O
;	O
}	O
static	O
boolean	int
fzprocess	function
(	O
qdaemon	pointer
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
{	O
int	O
c	long
,	O
ch	int
;	O
while	O
(	O
fzreceive_ready	function
(	O
)	O
)	O
{	O
READCHAR	O
(	O
qdaemon	pointer
,	O
ch	int
,	O
1	int
)	O
;	O
switch	O
(	O
ch	int
)	O
{	O
case	O
ZPAD	char
:	O
DEBUG_MESSAGE0	O
(	O
DEBUG_PROTO	O
,	O
"fzprocess: possible ZRPOS packet"	pointer
)	O
;	O
iPrecstart	int
=	O
(	O
(	O
iPrecstart	int
+	O
CRECBUFLEN	O
-	O
1	int
)	O
%	O
CRECBUFLEN	O
)	O
;	O
c	long
=	O
getinsync	function
(	O
qdaemon	pointer
,	O
TRUE	O
)	O
;	O
if	O
(	O
c	long
==	O
ZACK	int
)	O
break	O
;	O
if	O
(	O
c	long
==	O
ZRPOS	int
)	O
{	O
if	O
(	O
qTsend	pointer
==	O
NULL	O
||	O
!	O
ffileisopen	O
(	O
qTsend	pointer
->	O
e	pointer
)	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Attempt to back up non-file"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
!	O
ffileseek	O
(	O
qTsend	pointer
->	O
e	pointer
,	O
wpZrxpos	long
-	O
wpZtxstart	long
)	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"seek: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
iZlast_tx_data_packet	int
=	O
-	O
1	int
;	O
break	O
;	O
}	O
return	O
FALSE	O
;	O
case	O
XOFF	int
:	O
case	O
XOFF	int
|	O
0200	int
:	O
READCHAR	O
(	O
qdaemon	pointer
,	O
ch	int
,	O
XON_WAIT	int
)	O
;	O
break	O
;	O
case	O
CR	int
:	O
break	O
;	O
default	O
:	O
iZjunk_count	int
++	O
;	O
break	O
;	O
}	O
}	O
return	O
TRUE	O
;	O
}	O
boolean	int
fzwait	function
(	O
qdaemon	pointer
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
{	O
int	O
c	long
,	O
cerr	int
,	O
rxcount	int
;	O
boolean	int
fexit	int
;	O
achdrval_t	array
rx_hdr	array
;	O
if	O
(	O
!	O
fzstart_rx	function
(	O
)	O
)	O
return	O
FALSE	O
;	O
cerr	int
=	O
cZretries	int
;	O
goto	O
nxthdr	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
!	O
fzsend_hdr	function
(	O
qdaemon	pointer
,	O
ZHEX	char
,	O
ZRPOS	int
,	O
hvzencode_data_hdr	function
(	O
wpZrxbytes	long
)	O
,	O
FALSE	O
)	O
)	O
return	O
FALSE	O
;	O
nxthdr	O
:	O
c	long
=	O
izrecv_hdr	function
(	O
qdaemon	pointer
,	O
rx_hdr	array
)	O
;	O
switch	O
(	O
c	long
)	O
{	O
case	O
ZM_TIMEOUT	O
:	O
case	O
ZNAK	int
:	O
if	O
(	O
--	O
cerr	int
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"fzwait: retries exhausted"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
continue	O
;	O
case	O
ZM_ERROR	O
:	O
if	O
(	O
--	O
cerr	int
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"fzwait: retries exhausted"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
continue	O
;	O
case	O
ZM_RCDO	O
:	O
case	O
ZFIN	int
:	O
return	O
FALSE	O
;	O
case	O
ZRPOS	int
:	O
case	O
ZACK	int
:	O
goto	O
nxthdr	O
;	O
case	O
ZDATA	int
:	O
{	O
winpos_t	long
rx_bytes	long
;	O
zdecode_data_hdr	function
(	O
rclhdr	function
(	O
rx_hdr	array
)	O
,	O
&	O
rx_bytes	long
)	O
;	O
DEBUG_MESSAGE2	O
(	O
DEBUG_PROTO	O
,	O
"fzwait: bytes(us,them) 0x%lx,0x%lx"	pointer
,	O
wpZrxbytes	long
,	O
rx_bytes	long
)	O
;	O
if	O
(	O
rx_bytes	long
!=	O
wpZrxbytes	long
)	O
{	O
if	O
(	O
--	O
cerr	int
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"fzwait: retries exhausted"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
(	O
void	O
)	O
zrdat32	function
(	O
qdaemon	pointer
,	O
zZrx_packet_buf	pointer
,	O
1024	int
,	O
&	O
rxcount	int
)	O
;	O
continue	O
;	O
}	O
moredata	O
:	O
c	long
=	O
zrdat32	function
(	O
qdaemon	pointer
,	O
zZrx_packet_buf	pointer
,	O
1024	int
,	O
&	O
rxcount	int
)	O
;	O
if	O
(	O
FDEBUGGING	O
(	O
DEBUG_PROTO	O
)	O
)	O
{	O
const	O
char	O
*	O
msg	pointer
;	O
if	O
(	O
c	long
<	O
0	int
)	O
{	O
msg	pointer
=	O
ZZHEADER_NAME	O
(	O
c	long
)	O
;	O
}	O
else	O
{	O
switch	O
(	O
c	long
)	O
{	O
case	O
GOTCRCW	O
:	O
msg	pointer
=	O
"ZCRCW"	pointer
;	O
break	O
;	O
case	O
GOTCRCG	O
:	O
msg	pointer
=	O
"ZCRCG"	pointer
;	O
break	O
;	O
case	O
GOTCRCQ	O
:	O
msg	pointer
=	O
"ZCRCQ"	pointer
;	O
break	O
;	O
case	O
GOTCRCE	O
:	O
msg	pointer
=	O
"ZCRCE"	pointer
;	O
break	O
;	O
case	O
GOTCRCF	O
:	O
msg	pointer
=	O
"ZCRCF"	pointer
;	O
break	O
;	O
default	O
:	O
msg	pointer
=	O
NULL	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
msg	pointer
!=	O
NULL	O
)	O
DEBUG_MESSAGE2	O
(	O
DEBUG_PROTO	O
,	O
"fzwait: zrdat32: %s, %d bytes"	pointer
,	O
msg	pointer
,	O
rxcount	int
)	O
;	O
else	O
DEBUG_MESSAGE2	O
(	O
DEBUG_PROTO	O
,	O
"fzwait: zrdat32: %d, %d bytes"	pointer
,	O
c	long
,	O
rxcount	int
)	O
;	O
}	O
switch	O
(	O
c	long
)	O
{	O
case	O
ZM_ERROR	O
:	O
cZerrors	long
++	O
;	O
if	O
(	O
--	O
cerr	int
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"fzwait: retries exhausted"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
continue	O
;	O
case	O
ZM_TIMEOUT	O
:	O
cZtimeouts	long
++	O
;	O
if	O
(	O
--	O
cerr	int
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"fzwait: retries exhausted"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
continue	O
;	O
case	O
ZM_RCDO	O
:	O
return	O
FALSE	O
;	O
case	O
GOTCRCW	O
:	O
iZlast_rx_data_packet	int
=	O
ZCRCW	char
;	O
cerr	int
=	O
cZretries	int
;	O
if	O
(	O
rxcount	int
!=	O
0	int
&&	O
!	O
fgot_data	function
(	O
qdaemon	pointer
,	O
zZrx_packet_buf	pointer
,	O
(	O
size_t	long
)	O
rxcount	int
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
,	O
(	O
size_t	long
)	O
0	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
(	O
long	O
)	O
-	O
1	int
,	O
TRUE	O
,	O
&	O
fexit	int
)	O
)	O
return	O
FALSE	O
;	O
wpZrxbytes	long
+=	O
rxcount	int
;	O
if	O
(	O
!	O
fzsend_hdr	function
(	O
qdaemon	pointer
,	O
ZHEX	char
,	O
ZACK	int
,	O
hvzencode_data_hdr	function
(	O
wpZrxbytes	long
)	O
,	O
FALSE	O
)	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
!	O
fsend_data	function
(	O
qdaemon	pointer
->	O
qconn	pointer
,	O
&	O
xon	char
,	O
(	O
size_t	long
)	O
1	int
,	O
FALSE	O
)	O
)	O
return	O
FALSE	O
;	O
goto	O
nxthdr	O
;	O
case	O
GOTCRCQ	O
:	O
iZlast_rx_data_packet	int
=	O
ZCRCQ	char
;	O
cerr	int
=	O
cZretries	int
;	O
if	O
(	O
rxcount	int
!=	O
0	int
&&	O
!	O
fgot_data	function
(	O
qdaemon	pointer
,	O
zZrx_packet_buf	pointer
,	O
(	O
size_t	long
)	O
rxcount	int
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
,	O
(	O
size_t	long
)	O
0	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
(	O
long	O
)	O
-	O
1	int
,	O
TRUE	O
,	O
&	O
fexit	int
)	O
)	O
return	O
FALSE	O
;	O
wpZrxbytes	long
+=	O
rxcount	int
;	O
if	O
(	O
!	O
fzsend_hdr	function
(	O
qdaemon	pointer
,	O
ZHEX	char
,	O
ZACK	int
,	O
hvzencode_data_hdr	function
(	O
wpZrxbytes	long
)	O
,	O
FALSE	O
)	O
)	O
return	O
FALSE	O
;	O
goto	O
moredata	O
;	O
case	O
GOTCRCG	O
:	O
iZlast_rx_data_packet	int
=	O
ZCRCG	char
;	O
cerr	int
=	O
cZretries	int
;	O
if	O
(	O
rxcount	int
!=	O
0	int
&&	O
!	O
fgot_data	function
(	O
qdaemon	pointer
,	O
zZrx_packet_buf	pointer
,	O
(	O
size_t	long
)	O
rxcount	int
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
,	O
(	O
size_t	long
)	O
0	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
(	O
long	O
)	O
-	O
1	int
,	O
TRUE	O
,	O
&	O
fexit	int
)	O
)	O
return	O
FALSE	O
;	O
wpZrxbytes	long
+=	O
rxcount	int
;	O
goto	O
moredata	O
;	O
case	O
GOTCRCE	O
:	O
iZlast_rx_data_packet	int
=	O
ZCRCE	char
;	O
cerr	int
=	O
cZretries	int
;	O
if	O
(	O
rxcount	int
!=	O
0	int
&&	O
!	O
fgot_data	function
(	O
qdaemon	pointer
,	O
zZrx_packet_buf	pointer
,	O
(	O
size_t	long
)	O
rxcount	int
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
,	O
(	O
size_t	long
)	O
0	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
(	O
long	O
)	O
-	O
1	int
,	O
TRUE	O
,	O
&	O
fexit	int
)	O
)	O
return	O
FALSE	O
;	O
wpZrxbytes	long
+=	O
rxcount	int
;	O
goto	O
nxthdr	O
;	O
case	O
GOTCRCF	O
:	O
iZlast_rx_data_packet	int
=	O
ZCRCF	char
;	O
cerr	int
=	O
cZretries	int
;	O
wpZrxbytes	long
+=	O
rxcount	int
;	O
if	O
(	O
!	O
fzfinish_rx	function
(	O
qdaemon	pointer
)	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
!	O
fgot_data	function
(	O
qdaemon	pointer
,	O
zZrx_packet_buf	pointer
,	O
(	O
size_t	long
)	O
rxcount	int
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
,	O
(	O
size_t	long
)	O
0	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
(	O
long	O
)	O
-	O
1	int
,	O
TRUE	O
,	O
&	O
fexit	int
)	O
)	O
return	O
FALSE	O
;	O
return	O
TRUE	O
;	O
}	O
return	O
FALSE	O
;	O
}	O
default	O
:	O
ulog	function
(	O
LOG_FATAL	int
,	O
"fzwait: received header %s"	pointer
,	O
ZZHEADER_NAME	O
(	O
c	long
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
}	O
boolean	int
fzfile	function
(	O
qdaemon	pointer
,	O
qtrans	pointer
,	O
fstart	int
,	O
fsend	int
,	O
cbytes	long
,	O
pfhandled	pointer
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
struct	O
stransfer	struct
*	O
qtrans	pointer
;	O
boolean	int
fstart	int
;	O
boolean	int
fsend	int
;	O
long	O
cbytes	long
ATTRIBUTE_UNUSED	O
;	O
boolean	int
*	O
pfhandled	pointer
;	O
{	O
long	O
iredo	long
;	O
*	O
pfhandled	pointer
=	O
FALSE	O
;	O
DEBUG_MESSAGE2	O
(	O
DEBUG_PROTO	O
,	O
"fzfile: fstart=%d, fsend=%d"	pointer
,	O
fstart	int
,	O
fsend	int
)	O
;	O
if	O
(	O
fsend	int
)	O
{	O
if	O
(	O
fstart	int
)	O
return	O
fzstart_tx	function
(	O
)	O
;	O
if	O
(	O
!	O
fzfinish_tx	function
(	O
qdaemon	pointer
,	O
&	O
iredo	long
)	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
iredo	long
>=	O
0	int
)	O
{	O
if	O
(	O
!	O
ffileisopen	O
(	O
qtrans	pointer
->	O
e	pointer
)	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Attempt to back up non-file"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
!	O
ffileseek	O
(	O
qtrans	pointer
->	O
e	pointer
,	O
iredo	long
)	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"seek: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
*	O
pfhandled	pointer
=	O
TRUE	O
;	O
qtrans	pointer
->	O
fsendfile	int
=	O
TRUE	O
;	O
return	O
fqueue_send	function
(	O
qdaemon	pointer
,	O
qtrans	pointer
)	O
;	O
}	O
}	O
return	O
TRUE	O
;	O
}	O
static	O
unsigned	O
long	O
crc_32_tab	array
[	O
]	O
=	O
{	O
0x00000000L	int
,	O
0x77073096L	int
,	O
0xee0e612cL	int
,	O
0x990951baL	int
,	O
0x076dc419L	int
,	O
0x706af48fL	int
,	O
0xe963a535L	int
,	O
0x9e6495a3L	int
,	O
0x0edb8832L	int
,	O
0x79dcb8a4L	int
,	O
0xe0d5e91eL	int
,	O
0x97d2d988L	int
,	O
0x09b64c2bL	int
,	O
0x7eb17cbdL	int
,	O
0xe7b82d07L	int
,	O
0x90bf1d91L	int
,	O
0x1db71064L	int
,	O
0x6ab020f2L	int
,	O
0xf3b97148L	int
,	O
0x84be41deL	int
,	O
0x1adad47dL	int
,	O
0x6ddde4ebL	int
,	O
0xf4d4b551L	int
,	O
0x83d385c7L	int
,	O
0x136c9856L	int
,	O
0x646ba8c0L	int
,	O
0xfd62f97aL	int
,	O
0x8a65c9ecL	int
,	O
0x14015c4fL	int
,	O
0x63066cd9L	int
,	O
0xfa0f3d63L	int
,	O
0x8d080df5L	int
,	O
0x3b6e20c8L	int
,	O
0x4c69105eL	int
,	O
0xd56041e4L	int
,	O
0xa2677172L	int
,	O
0x3c03e4d1L	int
,	O
0x4b04d447L	int
,	O
0xd20d85fdL	int
,	O
0xa50ab56bL	int
,	O
0x35b5a8faL	int
,	O
0x42b2986cL	int
,	O
0xdbbbc9d6L	int
,	O
0xacbcf940L	int
,	O
0x32d86ce3L	int
,	O
0x45df5c75L	int
,	O
0xdcd60dcfL	int
,	O
0xabd13d59L	int
,	O
0x26d930acL	int
,	O
0x51de003aL	int
,	O
0xc8d75180L	int
,	O
0xbfd06116L	int
,	O
0x21b4f4b5L	int
,	O
0x56b3c423L	int
,	O
0xcfba9599L	int
,	O
0xb8bda50fL	int
,	O
0x2802b89eL	int
,	O
0x5f058808L	int
,	O
0xc60cd9b2L	int
,	O
0xb10be924L	int
,	O
0x2f6f7c87L	int
,	O
0x58684c11L	int
,	O
0xc1611dabL	int
,	O
0xb6662d3dL	int
,	O
0x76dc4190L	int
,	O
0x01db7106L	int
,	O
0x98d220bcL	int
,	O
0xefd5102aL	int
,	O
0x71b18589L	int
,	O
0x06b6b51fL	int
,	O
0x9fbfe4a5L	int
,	O
0xe8b8d433L	int
,	O
0x7807c9a2L	int
,	O
0x0f00f934L	int
,	O
0x9609a88eL	int
,	O
0xe10e9818L	int
,	O
0x7f6a0dbbL	int
,	O
0x086d3d2dL	int
,	O
0x91646c97L	int
,	O
0xe6635c01L	int
,	O
0x6b6b51f4L	int
,	O
0x1c6c6162L	int
,	O
0x856530d8L	int
,	O
0xf262004eL	int
,	O
0x6c0695edL	int
,	O
0x1b01a57bL	int
,	O
0x8208f4c1L	int
,	O
0xf50fc457L	int
,	O
0x65b0d9c6L	int
,	O
0x12b7e950L	int
,	O
0x8bbeb8eaL	int
,	O
0xfcb9887cL	int
,	O
0x62dd1ddfL	int
,	O
0x15da2d49L	int
,	O
0x8cd37cf3L	int
,	O
0xfbd44c65L	int
,	O
0x4db26158L	int
,	O
0x3ab551ceL	int
,	O
0xa3bc0074L	int
,	O
0xd4bb30e2L	int
,	O
0x4adfa541L	int
,	O
0x3dd895d7L	int
,	O
0xa4d1c46dL	int
,	O
0xd3d6f4fbL	int
,	O
0x4369e96aL	int
,	O
0x346ed9fcL	int
,	O
0xad678846L	int
,	O
0xda60b8d0L	int
,	O
0x44042d73L	int
,	O
0x33031de5L	int
,	O
0xaa0a4c5fL	int
,	O
0xdd0d7cc9L	int
,	O
0x5005713cL	int
,	O
0x270241aaL	int
,	O
0xbe0b1010L	int
,	O
0xc90c2086L	int
,	O
0x5768b525L	int
,	O
0x206f85b3L	int
,	O
0xb966d409L	int
,	O
0xce61e49fL	int
,	O
0x5edef90eL	int
,	O
0x29d9c998L	int
,	O
0xb0d09822L	int
,	O
0xc7d7a8b4L	int
,	O
0x59b33d17L	int
,	O
0x2eb40d81L	int
,	O
0xb7bd5c3bL	int
,	O
0xc0ba6cadL	int
,	O
0xedb88320L	int
,	O
0x9abfb3b6L	int
,	O
0x03b6e20cL	int
,	O
0x74b1d29aL	int
,	O
0xead54739L	int
,	O
0x9dd277afL	int
,	O
0x04db2615L	int
,	O
0x73dc1683L	int
,	O
0xe3630b12L	int
,	O
0x94643b84L	int
,	O
0x0d6d6a3eL	int
,	O
0x7a6a5aa8L	int
,	O
0xe40ecf0bL	int
,	O
0x9309ff9dL	int
,	O
0x0a00ae27L	int
,	O
0x7d079eb1L	int
,	O
0xf00f9344L	int
,	O
0x8708a3d2L	int
,	O
0x1e01f268L	int
,	O
0x6906c2feL	int
,	O
0xf762575dL	int
,	O
0x806567cbL	int
,	O
0x196c3671L	int
,	O
0x6e6b06e7L	int
,	O
0xfed41b76L	int
,	O
0x89d32be0L	int
,	O
0x10da7a5aL	int
,	O
0x67dd4accL	int
,	O
0xf9b9df6fL	int
,	O
0x8ebeeff9L	int
,	O
0x17b7be43L	int
,	O
0x60b08ed5L	int
,	O
0xd6d6a3e8L	int
,	O
0xa1d1937eL	int
,	O
0x38d8c2c4L	int
,	O
0x4fdff252L	int
,	O
0xd1bb67f1L	int
,	O
0xa6bc5767L	int
,	O
0x3fb506ddL	int
,	O
0x48b2364bL	int
,	O
0xd80d2bdaL	int
,	O
0xaf0a1b4cL	int
,	O
0x36034af6L	int
,	O
0x41047a60L	int
,	O
0xdf60efc3L	int
,	O
0xa867df55L	int
,	O
0x316e8eefL	int
,	O
0x4669be79L	int
,	O
0xcb61b38cL	int
,	O
0xbc66831aL	int
,	O
0x256fd2a0L	int
,	O
0x5268e236L	int
,	O
0xcc0c7795L	int
,	O
0xbb0b4703L	int
,	O
0x220216b9L	int
,	O
0x5505262fL	int
,	O
0xc5ba3bbeL	int
,	O
0xb2bd0b28L	int
,	O
0x2bb45a92L	int
,	O
0x5cb36a04L	int
,	O
0xc2d7ffa7L	int
,	O
0xb5d0cf31L	int
,	O
0x2cd99e8bL	int
,	O
0x5bdeae1dL	int
,	O
0x9b64c2b0L	int
,	O
0xec63f226L	int
,	O
0x756aa39cL	int
,	O
0x026d930aL	int
,	O
0x9c0906a9L	int
,	O
0xeb0e363fL	int
,	O
0x72076785L	int
,	O
0x05005713L	int
,	O
0x95bf4a82L	int
,	O
0xe2b87a14L	int
,	O
0x7bb12baeL	int
,	O
0x0cb61b38L	int
,	O
0x92d28e9bL	int
,	O
0xe5d5be0dL	int
,	O
0x7cdcefb7L	int
,	O
0x0bdbdf21L	int
,	O
0x86d3d2d4L	int
,	O
0xf1d4e242L	int
,	O
0x68ddb3f8L	int
,	O
0x1fda836eL	int
,	O
0x81be16cdL	int
,	O
0xf6b9265bL	int
,	O
0x6fb077e1L	int
,	O
0x18b74777L	int
,	O
0x88085ae6L	int
,	O
0xff0f6a70L	int
,	O
0x66063bcaL	int
,	O
0x11010b5cL	int
,	O
0x8f659effL	int
,	O
0xf862ae69L	int
,	O
0x616bffd3L	int
,	O
0x166ccf45L	int
,	O
0xa00ae278L	int
,	O
0xd70dd2eeL	int
,	O
0x4e048354L	int
,	O
0x3903b3c2L	int
,	O
0xa7672661L	int
,	O
0xd06016f7L	int
,	O
0x4969474dL	int
,	O
0x3e6e77dbL	int
,	O
0xaed16a4aL	int
,	O
0xd9d65adcL	int
,	O
0x40df0b66L	int
,	O
0x37d83bf0L	int
,	O
0xa9bcae53L	int
,	O
0xdebb9ec5L	int
,	O
0x47b2cf7fL	int
,	O
0x30b5ffe9L	int
,	O
0xbdbdf21cL	int
,	O
0xcabac28aL	int
,	O
0x53b39330L	int
,	O
0x24b4a3a6L	int
,	O
0xbad03605L	int
,	O
0xcdd70693L	int
,	O
0x54de5729L	int
,	O
0x23d967bfL	int
,	O
0xb3667a2eL	int
,	O
0xc4614ab8L	int
,	O
0x5d681b02L	int
,	O
0x2a6f2b94L	int
,	O
0xb40bbe37L	int
,	O
0xc30c8ea1L	int
,	O
0x5a05df1bL	int
,	O
0x2d02ef8dL	int
}	O
;	O
static	O
boolean	int
fzstart_proto	function
(	O
qdaemon	pointer
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
{	O
int	O
i	int
;	O
achdrval_t	array
tx_hdr	array
,	O
rx_hdr	array
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
cZstartup_retries	int
;	O
i	int
++	O
)	O
{	O
stohdr	function
(	O
0L	int
,	O
tx_hdr	array
)	O
;	O
tx_hdr	array
[	O
ZF0	int
]	O
=	O
ZPROTOCOL_VERSION	int
;	O
if	O
(	O
fZesc_ctl	int
)	O
tx_hdr	array
[	O
ZF1	int
]	O
|=	O
TX_ESCCTL	int
;	O
switch	O
(	O
izexchange_init	function
(	O
qdaemon	pointer
,	O
ZINIT	int
,	O
tx_hdr	array
,	O
rx_hdr	array
)	O
)	O
{	O
case	O
-	O
1	int
:	O
return	O
FALSE	O
;	O
case	O
0	int
:	O
continue	O
;	O
case	O
1	int
:	O
break	O
;	O
}	O
fZesc_ctl	int
=	O
fZesc_ctl	int
||	O
(	O
rx_hdr	array
[	O
ZF1	int
]	O
&	O
TX_ESCCTL	int
)	O
!=	O
0	int
;	O
stohdr	function
(	O
0L	int
,	O
tx_hdr	array
)	O
;	O
switch	O
(	O
izexchange_init	function
(	O
qdaemon	pointer
,	O
ZDATA	int
,	O
tx_hdr	array
,	O
rx_hdr	array
)	O
)	O
{	O
case	O
-	O
1	int
:	O
return	O
FALSE	O
;	O
case	O
0	int
:	O
continue	O
;	O
case	O
1	int
:	O
break	O
;	O
}	O
stohdr	function
(	O
0L	int
,	O
tx_hdr	array
)	O
;	O
switch	O
(	O
izexchange_init	function
(	O
qdaemon	pointer
,	O
ZACK	int
,	O
tx_hdr	array
,	O
rx_hdr	array
)	O
)	O
{	O
case	O
-	O
1	int
:	O
return	O
FALSE	O
;	O
case	O
0	int
:	O
continue	O
;	O
case	O
1	int
:	O
break	O
;	O
}	O
stohdr	function
(	O
0L	int
,	O
tx_hdr	array
)	O
;	O
switch	O
(	O
izexchange_init	function
(	O
qdaemon	pointer
,	O
ZINITEND	int
,	O
tx_hdr	array
,	O
rx_hdr	array
)	O
)	O
{	O
case	O
-	O
1	int
:	O
return	O
FALSE	O
;	O
case	O
0	int
:	O
continue	O
;	O
case	O
1	int
:	O
break	O
;	O
}	O
DEBUG_MESSAGE0	O
(	O
DEBUG_PROTO	O
,	O
"fzstart_proto: Protocol started"	pointer
)	O
;	O
return	O
TRUE	O
;	O
}	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Protocol init failed"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
static	O
int	O
izexchange_init	function
(	O
qdaemon	pointer
,	O
send_type	int
,	O
send_val	array
,	O
recv_val	array
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
int	O
send_type	int
;	O
achdrval_t	array
send_val	array
;	O
achdrval_t	array
recv_val	array
;	O
{	O
int	O
i	int
,	O
recv_type	int
,	O
count	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
CEXCHANGE_INIT_RETRIES	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
!	O
fzsend_hdr	function
(	O
qdaemon	pointer
,	O
send_type	int
==	O
ZDATA	int
?	O
ZBIN	char
:	O
ZHEX	char
,	O
send_type	int
,	O
rclhdr	function
(	O
send_val	array
)	O
,	O
FALSE	O
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
send_type	int
==	O
ZDATA	int
)	O
{	O
count	int
=	O
czbuild_data_packet	function
(	O
zZtx_packet_buf	pointer
,	O
""	pointer
,	O
(	O
size_t	long
)	O
1	int
,	O
ZCRCF	char
)	O
;	O
if	O
(	O
!	O
fsend_data	function
(	O
qdaemon	pointer
->	O
qconn	pointer
,	O
zZtx_packet_buf	pointer
,	O
(	O
size_t	long
)	O
count	int
,	O
FALSE	O
)	O
)	O
return	O
-	O
1	int
;	O
}	O
recv_type	int
=	O
izrecv_hdr	function
(	O
qdaemon	pointer
,	O
recv_val	array
)	O
;	O
switch	O
(	O
recv_type	int
)	O
{	O
case	O
ZM_TIMEOUT	O
:	O
case	O
ZM_ERROR	O
:	O
continue	O
;	O
case	O
ZM_RCDO	O
:	O
case	O
ZFIN	int
:	O
return	O
-	O
1	int
;	O
case	O
ZINIT	int
:	O
case	O
ZACK	int
:	O
case	O
ZINITEND	int
:	O
break	O
;	O
case	O
ZDATA	int
:	O
if	O
(	O
zrdat32	function
(	O
qdaemon	pointer
,	O
zZrx_packet_buf	pointer
,	O
1024	int
,	O
&	O
count	int
)	O
==	O
GOTCRCF	O
)	O
break	O
;	O
continue	O
;	O
default	O
:	O
continue	O
;	O
}	O
if	O
(	O
recv_type	int
==	O
send_type	int
)	O
return	O
1	int
;	O
if	O
(	O
recv_type	int
>	O
send_type	int
&&	O
send_type	int
!=	O
ZINIT	int
)	O
return	O
0	int
;	O
if	O
(	O
recv_type	int
==	O
ZINIT	int
&&	O
send_type	int
==	O
ZINITEND	int
)	O
return	O
0	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
boolean	int
fzshutdown_proto	function
(	O
qdaemon	pointer
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
{	O
(	O
void	O
)	O
fzsend_hdr	function
(	O
qdaemon	pointer
,	O
ZHEX	char
,	O
ZFIN	int
,	O
0L	int
,	O
FALSE	O
)	O
;	O
return	O
TRUE	O
;	O
}	O
static	O
boolean	int
fzstart_tx	function
(	O
)	O
{	O
iZlast_tx_data_packet	int
=	O
-	O
1	int
;	O
cZblklen	int
=	O
1024	int
;	O
wpZlastsync	long
=	O
-	O
1L	int
;	O
iZbeenhereb4	int
=	O
0	int
;	O
iZtleft	int
=	O
0	int
;	O
iZjunk_count	int
=	O
0	int
;	O
wpZtxpos	long
=	O
(	O
wpZtxpos	long
+	O
1024L	int
)	O
&	O
~	O
1023L	int
;	O
wpZlrxpos	long
=	O
wpZrxpos	long
=	O
wpZtxpos	long
;	O
wpZtxstart	long
=	O
wpZtxpos	long
;	O
return	O
TRUE	O
;	O
}	O
static	O
boolean	int
fzfinish_tx	function
(	O
qdaemon	pointer
,	O
plredo	pointer
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
long	O
*	O
plredo	pointer
;	O
{	O
int	O
c	long
,	O
cerr	int
,	O
ctimeouts	int
;	O
achdrval_t	array
rx_hdr	array
;	O
winpos_t	long
rx_bytes	long
;	O
*	O
plredo	pointer
=	O
-	O
1	int
;	O
cerr	int
=	O
cZretries	int
;	O
ctimeouts	int
=	O
0	int
;	O
DEBUG_MESSAGE4	O
(	O
DEBUG_PROTO	O
,	O
"fzfinish_tx: txpos=0x%lx, rxpos=0x%lx, lrxpos=0x%lx, rxbytes=0x%lx"	pointer
,	O
wpZtxpos	long
,	O
wpZrxpos	long
,	O
wpZlrxpos	long
,	O
wpZrxbytes	long
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	long
=	O
izrecv_hdr	function
(	O
qdaemon	pointer
,	O
rx_hdr	array
)	O
;	O
switch	O
(	O
c	long
)	O
{	O
case	O
ZRPOS	int
:	O
wpZrxpos	long
=	O
lzupdate_rxpos	function
(	O
rx_hdr	array
,	O
wpZrxpos	long
,	O
wpZlrxpos	long
,	O
wpZtxpos	long
)	O
;	O
if	O
(	O
(	O
(	O
wpZtxpos	long
+	O
1024	int
)	O
&	O
~	O
1023	int
)	O
==	O
wpZrxpos	long
)	O
return	O
TRUE	O
;	O
cZbytes_resent	long
+=	O
wpZtxpos	long
-	O
wpZrxpos	long
;	O
wpZlrxpos	long
=	O
wpZtxpos	long
=	O
wpZrxpos	long
;	O
if	O
(	O
wpZlastsync	long
==	O
wpZrxpos	long
)	O
{	O
if	O
(	O
++	O
iZbeenhereb4	int
>	O
4	int
)	O
if	O
(	O
cZblklen	int
>	O
32	int
)	O
cZblklen	int
/=	O
2	int
;	O
}	O
wpZlastsync	long
=	O
wpZrxpos	long
;	O
iZlast_tx_data_packet	int
=	O
ZCRCW	char
;	O
*	O
plredo	pointer
=	O
wpZrxpos	long
-	O
wpZtxstart	long
;	O
return	O
TRUE	O
;	O
case	O
ZACK	int
:	O
wpZrxpos	long
=	O
lzupdate_rxpos	function
(	O
rx_hdr	array
,	O
wpZrxpos	long
,	O
wpZlrxpos	long
,	O
wpZtxpos	long
)	O
;	O
wpZlrxpos	long
=	O
wpZrxpos	long
;	O
if	O
(	O
wpZtxpos	long
==	O
wpZrxpos	long
)	O
return	O
TRUE	O
;	O
break	O
;	O
case	O
ZDATA	int
:	O
zdecode_data_hdr	function
(	O
rclhdr	function
(	O
rx_hdr	array
)	O
,	O
&	O
rx_bytes	long
)	O
;	O
if	O
(	O
(	O
(	O
wpZrxbytes	long
+	O
1024L	int
)	O
&	O
~	O
1023L	int
)	O
==	O
rx_bytes	long
)	O
{	O
iZpkt_rcvd_kludge	int
=	O
ZDATA	int
;	O
hvZpkt_hdrval_kludge	long
=	O
rclhdr	function
(	O
rx_hdr	array
)	O
;	O
return	O
TRUE	O
;	O
}	O
break	O
;	O
case	O
ZNAK	int
:	O
zdecode_data_hdr	function
(	O
rclhdr	function
(	O
rx_hdr	array
)	O
,	O
&	O
rx_bytes	long
)	O
;	O
if	O
(	O
(	O
(	O
wpZrxbytes	long
+	O
1024L	int
)	O
&	O
~	O
1023L	int
)	O
==	O
rx_bytes	long
)	O
return	O
TRUE	O
;	O
if	O
(	O
rx_bytes	long
==	O
wpZrxbytes	long
)	O
{	O
if	O
(	O
!	O
fzsend_hdr	function
(	O
qdaemon	pointer
,	O
ZHEX	char
,	O
ZACK	int
,	O
hvzencode_data_hdr	function
(	O
wpZrxbytes	long
)	O
,	O
TRUE	O
)	O
)	O
return	O
FALSE	O
;	O
}	O
break	O
;	O
case	O
ZFIN	int
:	O
case	O
ZM_RCDO	O
:	O
return	O
FALSE	O
;	O
case	O
ZM_TIMEOUT	O
:	O
if	O
(	O
--	O
cerr	int
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"fzfinish_tx: retries exhausted"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
++	O
ctimeouts	int
%	O
2	int
==	O
0	int
)	O
if	O
(	O
!	O
fzsend_hdr	function
(	O
qdaemon	pointer
,	O
ZHEX	char
,	O
ZNAK	int
,	O
hvzencode_data_hdr	function
(	O
wpZtxpos	long
)	O
,	O
TRUE	O
)	O
)	O
return	O
FALSE	O
;	O
break	O
;	O
case	O
ZM_ERROR	O
:	O
default	O
:	O
if	O
(	O
--	O
cerr	int
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"fzfinish_tx: retries exhausted"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
!	O
fzsend_hdr	function
(	O
qdaemon	pointer
,	O
ZHEX	char
,	O
ZNAK	int
,	O
hvzencode_data_hdr	function
(	O
wpZtxpos	long
)	O
,	O
TRUE	O
)	O
)	O
return	O
FALSE	O
;	O
break	O
;	O
}	O
}	O
}	O
static	O
boolean	int
fzstart_rx	function
(	O
)	O
{	O
wpZrxbytes	long
=	O
(	O
wpZrxbytes	long
+	O
1024L	int
)	O
&	O
~	O
1023L	int
;	O
return	O
TRUE	O
;	O
}	O
static	O
boolean	int
fzfinish_rx	function
(	O
qdaemon	pointer
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
{	O
DEBUG_MESSAGE0	O
(	O
DEBUG_PROTO	O
,	O
"fzfinish_rx: message/file received"	pointer
)	O
;	O
return	O
fzsend_hdr	function
(	O
qdaemon	pointer
,	O
ZHEX	char
,	O
ZACK	int
,	O
hvzencode_data_hdr	function
(	O
wpZrxbytes	long
)	O
,	O
FALSE	O
)	O
;	O
}	O
static	O
boolean	int
fzsend_hdr	function
(	O
qdaemon	pointer
,	O
ipkttype	int
,	O
ihdrtype	int
,	O
hdrval	long
,	O
fcheckreceive	int
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
int	O
ipkttype	int
;	O
int	O
ihdrtype	int
;	O
hdrval_t	long
hdrval	long
;	O
boolean	int
fcheckreceive	int
;	O
{	O
int	O
cpacketlen	int
;	O
DEBUG_MESSAGE2	O
(	O
DEBUG_PROTO	O
,	O
"fzsend_hdr: %s, data = 0x%lx"	pointer
,	O
ZZHEADER_NAME	O
(	O
ihdrtype	int
)	O
,	O
hdrval	long
)	O
;	O
cpacketlen	int
=	O
czbuild_header	function
(	O
zZtx_packet_buf	pointer
,	O
ipkttype	int
,	O
ihdrtype	int
,	O
hdrval	long
)	O
;	O
cZheaders_sent	long
++	O
;	O
return	O
fsend_data	function
(	O
qdaemon	pointer
->	O
qconn	pointer
,	O
zZtx_packet_buf	pointer
,	O
(	O
size_t	long
)	O
cpacketlen	int
,	O
fcheckreceive	int
)	O
;	O
}	O
static	O
boolean	int
fzsend_data_packet	function
(	O
qdaemon	pointer
,	O
zdata	pointer
,	O
cdata	long
,	O
frameend	int
,	O
fcheckreceive	int
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
char	O
*	O
zdata	pointer
;	O
size_t	long
cdata	long
;	O
int	O
frameend	int
;	O
boolean	int
fcheckreceive	int
;	O
{	O
int	O
cpacketlen	int
;	O
cpacketlen	int
=	O
czbuild_data_packet	function
(	O
zZtx_packet_buf	pointer
,	O
zdata	pointer
,	O
cdata	long
,	O
frameend	int
)	O
;	O
return	O
fsend_data	function
(	O
qdaemon	pointer
->	O
qconn	pointer
,	O
zZtx_packet_buf	pointer
,	O
(	O
size_t	long
)	O
cpacketlen	int
,	O
fcheckreceive	int
)	O
;	O
}	O
static	O
int	O
czbuild_header	function
(	O
zresult	pointer
,	O
ipkttype	int
,	O
ihdrtype	int
,	O
hdrval	long
)	O
char	O
*	O
zresult	pointer
;	O
int	O
ipkttype	int
;	O
int	O
ihdrtype	int
;	O
hdrval_t	long
hdrval	long
;	O
{	O
char	O
*	O
p	pointer
;	O
int	O
i	int
;	O
unsigned	O
long	O
crc	long
;	O
achdrval_t	array
achdrval	array
;	O
p	pointer
=	O
zresult	pointer
;	O
switch	O
(	O
ipkttype	int
)	O
{	O
case	O
ZBIN	char
:	O
*	O
p	pointer
++	O
=	O
ZPAD	char
;	O
*	O
p	pointer
++	O
=	O
ZDLE	int
;	O
*	O
p	pointer
++	O
=	O
ZBIN	char
;	O
p	pointer
=	O
zputchar	function
(	O
p	pointer
,	O
ihdrtype	int
)	O
;	O
crc	long
=	O
ICRCINIT	O
;	O
crc	long
=	O
UPDC32	O
(	O
ihdrtype	int
,	O
crc	long
)	O
;	O
stohdr	function
(	O
hdrval	long
,	O
achdrval	array
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
)	O
{	O
p	pointer
=	O
zputchar	function
(	O
p	pointer
,	O
achdrval	array
[	O
i	int
]	O
)	O
;	O
crc	long
=	O
UPDC32	O
(	O
achdrval	array
[	O
i	int
]	O
,	O
crc	long
)	O
;	O
}	O
crc	long
=	O
~	O
crc	long
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
)	O
{	O
p	pointer
=	O
zputchar	function
(	O
p	pointer
,	O
(	O
char	O
)	O
crc	long
)	O
;	O
crc	long
>>=	O
8	int
;	O
}	O
break	O
;	O
case	O
ZHEX	char
:	O
*	O
p	pointer
++	O
=	O
ZPAD	char
;	O
*	O
p	pointer
++	O
=	O
ZPAD	char
;	O
*	O
p	pointer
++	O
=	O
ZDLE	int
;	O
*	O
p	pointer
++	O
=	O
ZHEX	char
;	O
p	pointer
=	O
zputhex	function
(	O
p	pointer
,	O
ihdrtype	int
)	O
;	O
crc	long
=	O
ICRCINIT	O
;	O
crc	long
=	O
UPDC32	O
(	O
ihdrtype	int
,	O
crc	long
)	O
;	O
stohdr	function
(	O
hdrval	long
,	O
achdrval	array
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
)	O
{	O
p	pointer
=	O
zputhex	function
(	O
p	pointer
,	O
achdrval	array
[	O
i	int
]	O
)	O
;	O
crc	long
=	O
UPDC32	O
(	O
achdrval	array
[	O
i	int
]	O
,	O
crc	long
)	O
;	O
}	O
crc	long
=	O
~	O
crc	long
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
)	O
{	O
p	pointer
=	O
zputhex	function
(	O
p	pointer
,	O
(	O
char	O
)	O
crc	long
)	O
;	O
crc	long
>>=	O
8	int
;	O
}	O
*	O
p	pointer
++	O
=	O
CR	int
;	O
if	O
(	O
ihdrtype	int
!=	O
ZFIN	int
&&	O
ihdrtype	int
!=	O
ZACK	int
)	O
*	O
p	pointer
++	O
=	O
XON	int
;	O
break	O
;	O
default	O
:	O
ulog	function
(	O
LOG_FATAL	int
,	O
"czbuild_header: ipkttype == %d"	pointer
,	O
ipkttype	int
)	O
;	O
break	O
;	O
}	O
return	O
p	pointer
-	O
zresult	pointer
;	O
}	O
static	O
int	O
czbuild_data_packet	function
(	O
zresult	pointer
,	O
zdata	pointer
,	O
cdata	long
,	O
frameend	int
)	O
char	O
*	O
zresult	pointer
;	O
const	O
char	O
*	O
zdata	pointer
;	O
size_t	long
cdata	long
;	O
int	O
frameend	int
;	O
{	O
char	O
*	O
p	pointer
;	O
unsigned	O
long	O
crc	long
;	O
p	pointer
=	O
zresult	pointer
;	O
crc	long
=	O
ICRCINIT	O
;	O
for	O
(	O
;	O
cdata	long
--	O
!=	O
0	int
;	O
zdata	pointer
++	O
)	O
{	O
char	O
c	long
;	O
c	long
=	O
*	O
zdata	pointer
;	O
if	O
(	O
c	long
&	O
0140	int
)	O
*	O
p	pointer
++	O
=	O
c	long
;	O
else	O
p	pointer
=	O
zputchar	function
(	O
p	pointer
,	O
c	long
)	O
;	O
crc	long
=	O
UPDC32	O
(	O
(	O
unsigned	O
char	O
)	O
c	long
,	O
crc	long
)	O
;	O
}	O
*	O
p	pointer
++	O
=	O
ZDLE	int
;	O
*	O
p	pointer
++	O
=	O
frameend	int
;	O
crc	long
=	O
UPDC32	O
(	O
frameend	int
,	O
crc	long
)	O
;	O
crc	long
=	O
~	O
crc	long
;	O
for	O
(	O
cdata	long
=	O
0	int
;	O
cdata	long
<	O
4	int
;	O
cdata	long
++	O
)	O
{	O
p	pointer
=	O
zputchar	function
(	O
p	pointer
,	O
(	O
char	O
)	O
crc	long
)	O
;	O
crc	long
>>=	O
8	int
;	O
}	O
if	O
(	O
frameend	int
==	O
ZCRCW	char
||	O
frameend	int
==	O
ZCRCE	char
||	O
frameend	int
==	O
ZCRCF	char
)	O
{	O
*	O
p	pointer
++	O
=	O
CR	int
;	O
*	O
p	pointer
++	O
=	O
XON	int
;	O
}	O
return	O
p	pointer
-	O
zresult	pointer
;	O
}	O
static	O
int	O
izrecv_hdr	function
(	O
qdaemon	pointer
,	O
hdr	array
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
achdrval_t	array
hdr	array
;	O
{	O
int	O
c	long
,	O
cerr	int
;	O
if	O
(	O
iZpkt_rcvd_kludge	int
!=	O
-	O
1	int
)	O
{	O
c	long
=	O
iZpkt_rcvd_kludge	int
;	O
iZpkt_rcvd_kludge	int
=	O
-	O
1	int
;	O
stohdr	function
(	O
hvZpkt_hdrval_kludge	long
,	O
hdr	array
)	O
;	O
DEBUG_MESSAGE2	O
(	O
DEBUG_PROTO	O
,	O
"izrecv_hdr: queued %s, data = 0x%lx"	pointer
,	O
ZZHEADER_NAME	O
(	O
c	long
)	O
,	O
rclhdr	function
(	O
hdr	array
)	O
)	O
;	O
cZheaders_received	long
++	O
;	O
return	O
c	long
;	O
}	O
cerr	int
=	O
cZmax_garbage	int
;	O
again	O
:	O
switch	O
(	O
c	long
=	O
noxrd7	function
(	O
qdaemon	pointer
)	O
)	O
{	O
case	O
ZM_TIMEOUT	O
:	O
case	O
ZM_ERROR	O
:	O
case	O
ZM_RCDO	O
:	O
goto	O
fifi	O
;	O
case	O
ZPAD	char
:	O
break	O
;	O
case	O
CR	int
:	O
default	O
:	O
if	O
(	O
--	O
cerr	int
<	O
0	int
)	O
{	O
c	long
=	O
ZM_ERROR	O
;	O
goto	O
fifi	O
;	O
}	O
goto	O
again	O
;	O
}	O
splat	O
:	O
switch	O
(	O
c	long
=	O
noxrd7	function
(	O
qdaemon	pointer
)	O
)	O
{	O
case	O
ZPAD	char
:	O
if	O
(	O
--	O
cerr	int
<	O
0	int
)	O
{	O
c	long
=	O
ZM_ERROR	O
;	O
goto	O
fifi	O
;	O
}	O
goto	O
splat	O
;	O
case	O
ZM_TIMEOUT	O
:	O
case	O
ZM_RCDO	O
:	O
goto	O
fifi	O
;	O
case	O
ZDLE	int
:	O
break	O
;	O
default	O
:	O
if	O
(	O
--	O
cerr	int
<	O
0	int
)	O
{	O
c	long
=	O
ZM_ERROR	O
;	O
goto	O
fifi	O
;	O
}	O
goto	O
again	O
;	O
}	O
switch	O
(	O
c	long
=	O
noxrd7	function
(	O
qdaemon	pointer
)	O
)	O
{	O
case	O
ZM_TIMEOUT	O
:	O
case	O
ZM_RCDO	O
:	O
goto	O
fifi	O
;	O
case	O
ZBIN	char
:	O
c	long
=	O
zrbhdr32	function
(	O
qdaemon	pointer
,	O
hdr	array
)	O
;	O
break	O
;	O
case	O
ZHEX	char
:	O
c	long
=	O
zrhhdr	function
(	O
qdaemon	pointer
,	O
hdr	array
)	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
--	O
cerr	int
<	O
0	int
)	O
{	O
c	long
=	O
ZM_ERROR	O
;	O
goto	O
fifi	O
;	O
}	O
goto	O
again	O
;	O
}	O
fifi	O
:	O
switch	O
(	O
c	long
)	O
{	O
case	O
ZM_TIMEOUT	O
:	O
cZtimeouts	long
++	O
;	O
break	O
;	O
case	O
ZM_ERROR	O
:	O
cZerrors	long
++	O
;	O
break	O
;	O
case	O
ZM_RCDO	O
:	O
break	O
;	O
default	O
:	O
cZheaders_received	long
++	O
;	O
break	O
;	O
}	O
DEBUG_MESSAGE2	O
(	O
DEBUG_PROTO	O
,	O
"izrecv_hdr: %s, data = 0x%lx"	pointer
,	O
ZZHEADER_NAME	O
(	O
c	long
)	O
,	O
rclhdr	function
(	O
hdr	array
)	O
)	O
;	O
return	O
c	long
;	O
}	O
static	O
int	O
zrbhdr32	function
(	O
qdaemon	pointer
,	O
hdr	array
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
achdrval_t	array
hdr	array
;	O
{	O
int	O
c	long
,	O
i	int
,	O
type	pointer
;	O
unsigned	O
long	O
crc	long
;	O
if	O
(	O
(	O
c	long
=	O
zdlread	function
(	O
qdaemon	pointer
)	O
)	O
&	O
~	O
0377	int
)	O
return	O
c	long
;	O
type	pointer
=	O
c	long
;	O
crc	long
=	O
ICRCINIT	O
;	O
crc	long
=	O
UPDC32	O
(	O
c	long
,	O
crc	long
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
(	O
c	long
=	O
zdlread	function
(	O
qdaemon	pointer
)	O
)	O
&	O
~	O
0377	int
)	O
return	O
c	long
;	O
crc	long
=	O
UPDC32	O
(	O
c	long
,	O
crc	long
)	O
;	O
hdr	array
[	O
i	int
]	O
=	O
(	O
char	O
)	O
c	long
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
(	O
c	long
=	O
zdlread	function
(	O
qdaemon	pointer
)	O
)	O
&	O
~	O
0377	int
)	O
return	O
c	long
;	O
crc	long
=	O
UPDC32	O
(	O
c	long
,	O
crc	long
)	O
;	O
}	O
if	O
(	O
crc	long
!=	O
IHDRCRC	int
)	O
return	O
ZM_ERROR	O
;	O
return	O
type	pointer
;	O
}	O
static	O
int	O
zrhhdr	function
(	O
qdaemon	pointer
,	O
hdr	array
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
achdrval_t	array
hdr	array
;	O
{	O
int	O
c	long
,	O
i	int
,	O
type	pointer
;	O
unsigned	O
long	O
crc	long
;	O
if	O
(	O
(	O
c	long
=	O
zgethex	function
(	O
qdaemon	pointer
)	O
)	O
<	O
0	int
)	O
return	O
c	long
;	O
type	pointer
=	O
c	long
;	O
crc	long
=	O
ICRCINIT	O
;	O
crc	long
=	O
UPDC32	O
(	O
c	long
,	O
crc	long
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
(	O
c	long
=	O
zgethex	function
(	O
qdaemon	pointer
)	O
)	O
<	O
0	int
)	O
return	O
c	long
;	O
crc	long
=	O
UPDC32	O
(	O
c	long
,	O
crc	long
)	O
;	O
hdr	array
[	O
i	int
]	O
=	O
(	O
char	O
)	O
c	long
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
(	O
c	long
=	O
zgethex	function
(	O
qdaemon	pointer
)	O
)	O
<	O
0	int
)	O
return	O
c	long
;	O
crc	long
=	O
UPDC32	O
(	O
c	long
,	O
crc	long
)	O
;	O
}	O
if	O
(	O
crc	long
!=	O
IHDRCRC	int
)	O
return	O
ZM_ERROR	O
;	O
return	O
type	pointer
;	O
}	O
static	O
int	O
zrdat32	function
(	O
qdaemon	pointer
,	O
buf	pointer
,	O
length	int
,	O
iprxcount	pointer
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
char	O
*	O
buf	pointer
;	O
int	O
length	int
;	O
int	O
*	O
iprxcount	pointer
;	O
{	O
int	O
c	long
,	O
d	int
;	O
unsigned	O
long	O
crc	long
;	O
char	O
*	O
end	pointer
;	O
crc	long
=	O
ICRCINIT	O
;	O
*	O
iprxcount	pointer
=	O
0	int
;	O
end	pointer
=	O
buf	pointer
+	O
length	int
;	O
while	O
(	O
buf	pointer
<=	O
end	pointer
)	O
{	O
if	O
(	O
(	O
c	long
=	O
zdlread	function
(	O
qdaemon	pointer
)	O
)	O
&	O
~	O
0377	int
)	O
{	O
crcfoo	O
:	O
switch	O
(	O
c	long
)	O
{	O
case	O
GOTCRCE	O
:	O
case	O
GOTCRCG	O
:	O
case	O
GOTCRCQ	O
:	O
case	O
GOTCRCW	O
:	O
case	O
GOTCRCF	O
:	O
d	int
=	O
c	long
;	O
c	long
&=	O
0377	int
;	O
crc	long
=	O
UPDC32	O
(	O
c	long
,	O
crc	long
)	O
;	O
if	O
(	O
(	O
c	long
=	O
zdlread	function
(	O
qdaemon	pointer
)	O
)	O
&	O
~	O
0377	int
)	O
goto	O
crcfoo	O
;	O
crc	long
=	O
UPDC32	O
(	O
c	long
,	O
crc	long
)	O
;	O
if	O
(	O
(	O
c	long
=	O
zdlread	function
(	O
qdaemon	pointer
)	O
)	O
&	O
~	O
0377	int
)	O
goto	O
crcfoo	O
;	O
crc	long
=	O
UPDC32	O
(	O
c	long
,	O
crc	long
)	O
;	O
if	O
(	O
(	O
c	long
=	O
zdlread	function
(	O
qdaemon	pointer
)	O
)	O
&	O
~	O
0377	int
)	O
goto	O
crcfoo	O
;	O
crc	long
=	O
UPDC32	O
(	O
c	long
,	O
crc	long
)	O
;	O
if	O
(	O
(	O
c	long
=	O
zdlread	function
(	O
qdaemon	pointer
)	O
)	O
&	O
~	O
0377	int
)	O
goto	O
crcfoo	O
;	O
crc	long
=	O
UPDC32	O
(	O
c	long
,	O
crc	long
)	O
;	O
if	O
(	O
crc	long
!=	O
IHDRCRC	int
)	O
return	O
ZM_ERROR	O
;	O
*	O
iprxcount	pointer
=	O
length	int
-	O
(	O
end	pointer
-	O
buf	pointer
)	O
;	O
return	O
d	int
;	O
case	O
ZM_TIMEOUT	O
:	O
case	O
ZM_RCDO	O
:	O
return	O
c	long
;	O
default	O
:	O
return	O
ZM_ERROR	O
;	O
}	O
}	O
*	O
buf	pointer
++	O
=	O
(	O
char	O
)	O
c	long
;	O
crc	long
=	O
UPDC32	O
(	O
c	long
,	O
crc	long
)	O
;	O
}	O
return	O
ZM_ERROR	O
;	O
}	O
static	O
int	O
getinsync	function
(	O
qdaemon	pointer
,	O
flag	int
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
boolean	int
flag	int
;	O
{	O
int	O
c	long
,	O
cerr	int
;	O
achdrval_t	array
rx_hdr	array
;	O
cerr	int
=	O
cZretries	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	long
=	O
izrecv_hdr	function
(	O
qdaemon	pointer
,	O
rx_hdr	array
)	O
;	O
switch	O
(	O
c	long
)	O
{	O
case	O
ZRPOS	int
:	O
wpZrxpos	long
=	O
lzupdate_rxpos	function
(	O
rx_hdr	array
,	O
wpZrxpos	long
,	O
wpZlrxpos	long
,	O
wpZtxpos	long
)	O
;	O
cZbytes_resent	long
+=	O
wpZtxpos	long
-	O
wpZrxpos	long
;	O
wpZlrxpos	long
=	O
wpZtxpos	long
=	O
wpZrxpos	long
;	O
if	O
(	O
wpZlastsync	long
==	O
wpZrxpos	long
)	O
{	O
if	O
(	O
++	O
iZbeenhereb4	int
>	O
4	int
)	O
if	O
(	O
cZblklen	int
>	O
32	int
)	O
cZblklen	int
/=	O
2	int
;	O
}	O
wpZlastsync	long
=	O
wpZrxpos	long
;	O
return	O
ZRPOS	int
;	O
case	O
ZACK	int
:	O
wpZrxpos	long
=	O
lzupdate_rxpos	function
(	O
rx_hdr	array
,	O
wpZrxpos	long
,	O
wpZlrxpos	long
,	O
wpZtxpos	long
)	O
;	O
wpZlrxpos	long
=	O
wpZrxpos	long
;	O
if	O
(	O
flag	int
||	O
wpZtxpos	long
==	O
wpZrxpos	long
)	O
return	O
ZACK	int
;	O
break	O
;	O
case	O
ZNAK	int
:	O
{	O
winpos_t	long
rx_bytes	long
;	O
zdecode_data_hdr	function
(	O
rclhdr	function
(	O
rx_hdr	array
)	O
,	O
&	O
rx_bytes	long
)	O
;	O
if	O
(	O
rx_bytes	long
==	O
wpZrxbytes	long
)	O
{	O
if	O
(	O
!	O
fzsend_hdr	function
(	O
qdaemon	pointer
,	O
ZHEX	char
,	O
ZACK	int
,	O
hvzencode_data_hdr	function
(	O
wpZrxbytes	long
)	O
,	O
TRUE	O
)	O
)	O
return	O
FALSE	O
;	O
}	O
break	O
;	O
}	O
case	O
ZFIN	int
:	O
case	O
ZM_RCDO	O
:	O
return	O
c	long
;	O
case	O
ZM_TIMEOUT	O
:	O
if	O
(	O
--	O
cerr	int
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"getinsync: retries exhausted"	pointer
)	O
;	O
return	O
ZM_ERROR	O
;	O
}	O
break	O
;	O
case	O
ZM_ERROR	O
:	O
default	O
:	O
if	O
(	O
--	O
cerr	int
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"getinsync: retries exhausted"	pointer
)	O
;	O
return	O
ZM_ERROR	O
;	O
}	O
if	O
(	O
!	O
fzsend_hdr	function
(	O
qdaemon	pointer
,	O
ZHEX	char
,	O
ZNAK	int
,	O
hvzencode_data_hdr	function
(	O
wpZtxpos	long
)	O
,	O
TRUE	O
)	O
)	O
return	O
ZM_ERROR	O
;	O
break	O
;	O
}	O
}	O
}	O
static	O
char	O
*	O
zputhex	function
(	O
p	pointer
,	O
ch	int
)	O
char	O
*	O
p	pointer
;	O
int	O
ch	int
;	O
{	O
static	O
char	O
digits	array
[	O
]	O
=	O
"0123456789abcdef"	pointer
;	O
*	O
p	pointer
++	O
=	O
digits	array
[	O
(	O
ch	int
&	O
0xF0	int
)	O
>>	O
4	int
]	O
;	O
*	O
p	pointer
++	O
=	O
digits	array
[	O
ch	int
&	O
0xF	int
]	O
;	O
return	O
p	pointer
;	O
}	O
static	O
char	O
*	O
zputchar	function
(	O
p	pointer
,	O
ch	int
)	O
char	O
*	O
p	pointer
;	O
int	O
ch	int
;	O
{	O
char	O
c	long
=	O
ch	int
;	O
if	O
(	O
c	long
&	O
0140	int
)	O
{	O
*	O
p	pointer
++	O
=	O
c	long
;	O
}	O
else	O
{	O
switch	O
(	O
c	long
&	O
0377	int
)	O
{	O
case	O
ZDLE	int
:	O
*	O
p	pointer
++	O
=	O
ZDLE	int
;	O
*	O
p	pointer
++	O
=	O
c	long
^	O
0100	int
;	O
break	O
;	O
case	O
CR	int
:	O
case	O
020	int
:	O
case	O
XON	int
:	O
case	O
XOFF	int
:	O
*	O
p	pointer
++	O
=	O
ZDLE	int
;	O
c	long
^=	O
0100	int
;	O
*	O
p	pointer
++	O
=	O
c	long
;	O
break	O
;	O
default	O
:	O
if	O
(	O
fZesc_ctl	int
&&	O
!	O
(	O
c	long
&	O
0140	int
)	O
)	O
{	O
*	O
p	pointer
++	O
=	O
ZDLE	int
;	O
c	long
^=	O
0100	int
;	O
}	O
*	O
p	pointer
++	O
=	O
c	long
;	O
break	O
;	O
}	O
}	O
return	O
p	pointer
;	O
}	O
static	O
int	O
zgethex	function
(	O
qdaemon	pointer
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
{	O
int	O
c	long
,	O
n	long
;	O
if	O
(	O
(	O
c	long
=	O
noxrd7	function
(	O
qdaemon	pointer
)	O
)	O
<	O
0	int
)	O
return	O
c	long
;	O
n	long
=	O
c	long
-	O
'0'	O
;	O
if	O
(	O
n	long
>	O
9	int
)	O
n	long
-=	O
(	O
'a'	O
-	O
':'	O
)	O
;	O
if	O
(	O
n	long
&	O
~	O
0xF	int
)	O
return	O
ZM_ERROR	O
;	O
if	O
(	O
(	O
c	long
=	O
noxrd7	function
(	O
qdaemon	pointer
)	O
)	O
<	O
0	int
)	O
return	O
c	long
;	O
c	long
-=	O
'0'	O
;	O
if	O
(	O
c	long
>	O
9	int
)	O
c	long
-=	O
(	O
'a'	O
-	O
':'	O
)	O
;	O
if	O
(	O
c	long
&	O
~	O
0xF	int
)	O
return	O
ZM_ERROR	O
;	O
c	long
+=	O
(	O
n	long
<<	O
4	int
)	O
;	O
return	O
c	long
;	O
}	O
static	O
int	O
zdlread	function
(	O
qdaemon	pointer
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
{	O
int	O
c	long
;	O
again	O
:	O
READCHAR	O
(	O
qdaemon	pointer
,	O
c	long
,	O
cZtimeout	int
)	O
;	O
if	O
(	O
c	long
<	O
0	int
)	O
return	O
c	long
;	O
if	O
(	O
c	long
&	O
0140	int
)	O
return	O
c	long
;	O
switch	O
(	O
c	long
)	O
{	O
case	O
ZDLE	int
:	O
break	O
;	O
case	O
XON	int
:	O
goto	O
again	O
;	O
case	O
XOFF	int
:	O
READCHAR	O
(	O
qdaemon	pointer
,	O
c	long
,	O
XON_WAIT	int
)	O
;	O
goto	O
again	O
;	O
default	O
:	O
if	O
(	O
fZesc_ctl	int
&&	O
!	O
(	O
c	long
&	O
0140	int
)	O
)	O
goto	O
again	O
;	O
return	O
c	long
;	O
}	O
again2	O
:	O
READCHAR	O
(	O
qdaemon	pointer
,	O
c	long
,	O
cZtimeout	int
)	O
;	O
if	O
(	O
c	long
<	O
0	int
)	O
return	O
c	long
;	O
switch	O
(	O
c	long
)	O
{	O
case	O
ZCRCE	char
:	O
case	O
ZCRCG	char
:	O
case	O
ZCRCQ	char
:	O
case	O
ZCRCW	char
:	O
case	O
ZCRCF	char
:	O
return	O
c	long
|	O
GOTOR	int
;	O
case	O
ZRUB0	char
:	O
return	O
0177	int
;	O
case	O
ZRUB1	char
:	O
return	O
0377	int
;	O
case	O
XON	int
:	O
goto	O
again2	O
;	O
case	O
XOFF	int
:	O
READCHAR	O
(	O
qdaemon	pointer
,	O
c	long
,	O
XON_WAIT	int
)	O
;	O
goto	O
again2	O
;	O
default	O
:	O
if	O
(	O
fZesc_ctl	int
&&	O
!	O
(	O
c	long
&	O
0140	int
)	O
)	O
goto	O
again2	O
;	O
if	O
(	O
(	O
c	long
&	O
0140	int
)	O
==	O
0100	int
)	O
return	O
c	long
^	O
0100	int
;	O
break	O
;	O
}	O
return	O
ZM_ERROR	O
;	O
}	O
static	O
int	O
noxrd7	function
(	O
qdaemon	pointer
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
{	O
int	O
c	long
;	O
for	O
(	O
;	O
;	O
)	O
{	O
READCHAR	O
(	O
qdaemon	pointer
,	O
c	long
,	O
cZtimeout	int
)	O
;	O
if	O
(	O
c	long
<	O
0	int
)	O
return	O
c	long
;	O
switch	O
(	O
c	long
&=	O
0177	int
)	O
{	O
case	O
XON	int
:	O
continue	O
;	O
case	O
XOFF	int
:	O
READCHAR	O
(	O
qdaemon	pointer
,	O
c	long
,	O
XON_WAIT	int
)	O
;	O
continue	O
;	O
case	O
CR	int
:	O
case	O
ZDLE	int
:	O
return	O
c	long
;	O
default	O
:	O
if	O
(	O
fZesc_ctl	int
&&	O
!	O
(	O
c	long
&	O
0140	int
)	O
)	O
continue	O
;	O
return	O
c	long
;	O
}	O
}	O
}	O
static	O
int	O
realreadchar	function
(	O
qdaemon	pointer
,	O
timeout	int
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
int	O
timeout	int
;	O
{	O
int	O
c	long
;	O
if	O
(	O
(	O
c	long
=	O
breceive_char	function
(	O
qdaemon	pointer
->	O
qconn	pointer
,	O
timeout	int
,	O
TRUE	O
)	O
)	O
>=	O
0	int
)	O
return	O
c	long
;	O
switch	O
(	O
c	long
)	O
{	O
case	O
-	O
1	int
:	O
return	O
ZM_TIMEOUT	O
;	O
case	O
-	O
2	int
:	O
return	O
ZM_RCDO	O
;	O
}	O
ulog	function
(	O
LOG_FATAL	int
,	O
"realreadchar: breceive_char() returned %d"	pointer
,	O
c	long
)	O
;	O
return	O
ZM_ERROR	O
;	O
}	O
static	O
boolean	int
fzreceive_ready	function
(	O
)	O
{	O
return	O
iPrecstart	int
!=	O
iPrecend	int
;	O
}	O
static	O
void	O
stohdr	function
(	O
val	long
,	O
hdr	array
)	O
hdrval_t	long
val	long
;	O
achdrval_t	array
hdr	array
;	O
{	O
hdr	array
[	O
ZP0	int
]	O
=	O
(	O
char	O
)	O
val	long
;	O
hdr	array
[	O
ZP1	int
]	O
=	O
(	O
char	O
)	O
(	O
val	long
>>	O
8	int
)	O
;	O
hdr	array
[	O
ZP2	int
]	O
=	O
(	O
char	O
)	O
(	O
val	long
>>	O
16	int
)	O
;	O
hdr	array
[	O
ZP3	int
]	O
=	O
(	O
char	O
)	O
(	O
val	long
>>	O
24	int
)	O
;	O
}	O
static	O
hdrval_t	long
rclhdr	function
(	O
hdr	array
)	O
achdrval_t	array
hdr	array
;	O
{	O
hdrval_t	long
v	long
;	O
v	long
=	O
hdr	array
[	O
ZP3	int
]	O
&	O
0377	int
;	O
v	long
=	O
(	O
v	long
<<	O
8	int
)	O
|	O
(	O
hdr	array
[	O
ZP2	int
]	O
&	O
0377	int
)	O
;	O
v	long
=	O
(	O
v	long
<<	O
8	int
)	O
|	O
(	O
hdr	array
[	O
ZP1	int
]	O
&	O
0377	int
)	O
;	O
v	long
=	O
(	O
v	long
<<	O
8	int
)	O
|	O
(	O
hdr	array
[	O
ZP0	int
]	O
&	O
0377	int
)	O
;	O
return	O
v	long
;	O
}	O
static	O
hdrval_t	long
hvzencode_data_hdr	function
(	O
cbytes	long
)	O
winpos_t	long
cbytes	long
;	O
{	O
return	O
(	O
hdrval_t	long
)	O
cbytes	long
;	O
}	O
static	O
void	O
zdecode_data_hdr	function
(	O
hdrval	long
,	O
pcbytes	pointer
)	O
hdrval_t	long
hdrval	long
;	O
winpos_t	long
*	O
pcbytes	pointer
;	O
{	O
*	O
pcbytes	pointer
=	O
hdrval	long
;	O
}	O
static	O
winpos_t	long
lzupdate_rxpos	function
(	O
rx_hdr	array
,	O
rxpos	long
,	O
lrxpos	long
,	O
txpos	long
)	O
achdrval_t	array
rx_hdr	array
;	O
winpos_t	long
rxpos	long
,	O
lrxpos	long
,	O
txpos	long
;	O
{	O
winpos_t	long
rx_pktpos	long
;	O
zdecode_data_hdr	function
(	O
rclhdr	function
(	O
rx_hdr	array
)	O
,	O
&	O
rx_pktpos	long
)	O
;	O
DEBUG_MESSAGE4	O
(	O
DEBUG_PROTO	O
,	O
"lzupdate_rxpos: rx_pktpos=0x%lx, rxpos=0x%lx, lrxpos=0x%lx, txpos=0x%lx"	pointer
,	O
rx_pktpos	long
,	O
rxpos	long
,	O
lrxpos	long
,	O
txpos	long
)	O
;	O
if	O
(	O
rx_pktpos	long
<	O
wpZlrxpos	long
||	O
rx_pktpos	long
>	O
(	O
(	O
wpZtxpos	long
+	O
1024L	int
)	O
&	O
~	O
1023L	int
)	O
)	O
return	O
rxpos	long
;	O
return	O
rx_pktpos	long
;	O
}	O
