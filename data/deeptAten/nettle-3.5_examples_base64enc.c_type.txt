int	O
main	function
(	O
int	O
argc	int
UNUSED	O
,	O
char	O
*	O
*	O
argv	pointer
UNUSED	O
)	O
{	O
struct	O
base64_encode_ctx	struct
b64_ctx	struct
;	O
base64_encode_init	O
(	O
&	O
b64_ctx	struct
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
uint8_t	char
buffer	pointer
[	O
CHUNK_SIZE	int
]	O
;	O
char	O
result	array
[	O
ENCODED_SIZE	O
+	O
BASE64_ENCODE_FINAL_LENGTH	int
+	O
1	int
]	O
;	O
unsigned	O
nbytes	int
;	O
int	O
encoded_bytes	int
;	O
nbytes	int
=	O
fread	function
(	O
buffer	pointer
,	O
1	int
,	O
CHUNK_SIZE	int
,	O
stdin	pointer
)	O
;	O
encoded_bytes	int
=	O
base64_encode_update	O
(	O
&	O
b64_ctx	struct
,	O
result	array
,	O
nbytes	int
,	O
buffer	pointer
)	O
;	O
if	O
(	O
nbytes	int
<	O
CHUNK_SIZE	int
)	O
{	O
if	O
(	O
ferror	function
(	O
stdin	pointer
)	O
)	O
{	O
werror	function
(	O
"Error reading file: %s\n"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
encoded_bytes	int
+=	O
base64_encode_final	O
(	O
&	O
b64_ctx	struct
,	O
result	array
+	O
encoded_bytes	int
)	O
;	O
result	array
[	O
encoded_bytes	int
++	O
]	O
=	O
'\n'	O
;	O
if	O
(	O
!	O
write_data	function
(	O
stdout	pointer
,	O
encoded_bytes	int
,	O
result	array
)	O
||	O
fflush	function
(	O
stdout	pointer
)	O
!=	O
0	int
)	O
{	O
werror	function
(	O
"Error writing file: %s\n"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
return	O
EXIT_SUCCESS	int
;	O
}	O
result	array
[	O
encoded_bytes	int
++	O
]	O
=	O
'\n'	O
;	O
if	O
(	O
!	O
write_data	function
(	O
stdout	pointer
,	O
encoded_bytes	int
,	O
result	array
)	O
)	O
{	O
werror	function
(	O
"Error writing file: %s\n"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
}	O
}	O
