const	O
char	O
*	O
argp_program_version	pointer
=	O
STANDARD_HURD_VERSION	function
(	O
usermux	struct
)	O
;	O
char	O
*	O
netfs_server_name	pointer
=	O
"usermux"	pointer
;	O
char	O
*	O
netfs_server_version	pointer
=	O
HURD_VERSION	O
;	O
int	O
netfs_maxsymlinks	int
=	O
25	int
;	O
volatile	O
struct	O
mapped_time_value	O
*	O
usermux_mapped_time	pointer
;	O
static	O
const	O
struct	O
argp_option	struct
options	pointer
[	O
]	O
=	O
{	O
{	O
"user-pattern"	pointer
,	O
OPT_USER_PAT	int
,	O
"PAT"	pointer
,	O
0	int
,	O
"The string to replace in the translator specification with the user name"	pointer
" (default `${user}')"	pointer
}	O
,	O
{	O
"home-pattern"	pointer
,	O
OPT_HOME_PAT	int
,	O
"PAT"	pointer
,	O
0	int
,	O
"The string to replace in the translator specification with the user's"	pointer
" home directory (default `${home}')"	pointer
}	O
,	O
{	O
"uid-pattern"	pointer
,	O
OPT_UID_PAT	int
,	O
"PAT"	pointer
,	O
0	int
,	O
"The string to replace in the translator specification with the uid"	pointer
" (default `${uid}')"	pointer
}	O
,	O
{	O
"clear-patterns"	pointer
,	O
'C'	O
,	O
0	int
,	O
0	int
,	O
"Reset all patterns to empty; this option may then be followed by options"	pointer
" to set specific patterns"	pointer
}	O
,	O
{	O
0	int
}	O
}	O
;	O
static	O
const	O
char	O
args_doc	pointer
[	O
]	O
=	O
"[TRANSLATOR [ARG...]]"	pointer
;	O
static	O
const	O
char	O
doc	pointer
[	O
]	O
=	O
"A translator for invoking user-specific translators."	pointer
"\vThis translator appears like a directory in which user names can be"	pointer
" looked up, and will start TRANSLATOR to service each resulting node."	pointer
"  If no pattern occurs in the translator specification, the users's"	pointer
" home directory is appended to it instead; TRANSLATOR defaults to"	pointer
" "	pointer
_HURD_SYMLINK	O
"."	pointer
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
error_t	int
err	int
;	O
struct	O
stat	O
ul_stat	struct
;	O
mach_port_t	O
bootstrap	O
;	O
struct	O
usermux	struct
mux	pointer
=	O
{	O
user_pat	pointer
:	O
"${user}"	pointer
,	O
home_pat	pointer
:	O
"${home}"	pointer
,	O
uid_pat	pointer
:	O
"${uid}"	pointer
}	O
;	O
struct	O
netnode	struct
root_nn	struct
=	O
{	O
mux	pointer
:	O
&	O
mux	pointer
}	O
;	O
error_t	int
parse_opt	O
(	O
int	O
key	int
,	O
char	O
*	O
arg	pointer
,	O
struct	O
argp_state	struct
*	O
state	pointer
)	O
{	O
switch	O
(	O
key	int
)	O
{	O
case	O
OPT_USER_PAT	int
:	O
mux	pointer
.	O
user_pat	pointer
=	O
arg	pointer
;	O
break	O
;	O
case	O
OPT_HOME_PAT	int
:	O
mux	pointer
.	O
home_pat	pointer
=	O
arg	pointer
;	O
break	O
;	O
case	O
OPT_UID_PAT	int
:	O
mux	pointer
.	O
uid_pat	pointer
=	O
arg	pointer
;	O
break	O
;	O
case	O
'C'	O
:	O
memset	function
(	O
&	O
mux	pointer
,	O
0	int
,	O
sizeof	O
mux	pointer
)	O
;	O
break	O
;	O
case	O
ARGP_KEY_NO_ARGS	int
:	O
memset	function
(	O
&	O
mux	pointer
,	O
0	int
,	O
sizeof	O
mux	pointer
)	O
;	O
return	O
argz_create_sep	function
(	O
_HURD_SYMLINK	O
,	O
0	int
,	O
&	O
mux	pointer
.	O
trans_template	pointer
,	O
&	O
mux	pointer
.	O
trans_template_len	long
)	O
;	O
case	O
ARGP_KEY_ARGS	int
:	O
return	O
argz_create	function
(	O
state	pointer
->	O
argv	pointer
+	O
state	pointer
->	O
next	int
,	O
&	O
mux	pointer
.	O
trans_template	pointer
,	O
&	O
mux	pointer
.	O
trans_template_len	long
)	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
struct	O
argp	struct
argp	struct
=	O
{	O
options	pointer
,	O
parse_opt	O
,	O
args_doc	pointer
,	O
doc	pointer
}	O
;	O
argp_parse	function
(	O
&	O
argp	struct
,	O
argc	int
,	O
argv	pointer
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
task_get_bootstrap_port	function
(	O
mach_task_self	function
(	O
)	O
,	O
&	O
bootstrap	O
)	O
;	O
netfs_init	function
(	O
)	O
;	O
netfs_root_node	O
=	O
netfs_make_node	function
(	O
&	O
root_nn	struct
)	O
;	O
if	O
(	O
!	O
netfs_root_node	O
)	O
error	function
(	O
5	int
,	O
ENOMEM	int
,	O
"Cannot create root node"	pointer
)	O
;	O
err	int
=	O
maptime_map	function
(	O
0	int
,	O
0	int
,	O
&	O
usermux_maptime	pointer
)	O
;	O
if	O
(	O
err	int
)	O
error	function
(	O
6	int
,	O
err	int
,	O
"Cannot map time"	pointer
)	O
;	O
mux	pointer
.	O
underlying	int
=	O
netfs_startup	function
(	O
bootstrap	O
,	O
0	int
)	O
;	O
err	int
=	O
io_stat	function
(	O
mux	pointer
.	O
underlying	int
,	O
&	O
ul_stat	struct
)	O
;	O
if	O
(	O
err	int
)	O
error	function
(	O
7	int
,	O
err	int
,	O
"Cannot stat underlying node"	pointer
)	O
;	O
mux	pointer
.	O
stat_template	struct
.	O
st_uid	O
=	O
ul_stat	struct
.	O
st_uid	O
;	O
mux	pointer
.	O
stat_template	struct
.	O
st_gid	O
=	O
ul_stat	struct
.	O
st_gid	O
;	O
mux	pointer
.	O
stat_template	struct
.	O
st_author	O
=	O
ul_stat	struct
.	O
st_author	O
;	O
mux	pointer
.	O
stat_template	struct
.	O
st_fsid	O
=	O
getpid	function
(	O
)	O
;	O
mux	pointer
.	O
stat_template	struct
.	O
st_nlink	O
=	O
1	int
;	O
mux	pointer
.	O
stat_template	struct
.	O
st_fstype	O
=	O
FSTYPE_MISC	O
;	O
if	O
(	O
strcmp	function
(	O
mux	pointer
.	O
trans_template	pointer
,	O
_HURD_SYMLINK	O
)	O
==	O
0	int
)	O
mux	pointer
.	O
stat_template	struct
.	O
st_mode	O
=	O
S_IFLNK	O
|	O
0666	int
;	O
else	O
mux	pointer
.	O
stat_template	struct
.	O
st_mode	O
=	O
S_IFREG	O
|	O
S_IPTRANS	O
|	O
0666	int
;	O
netfs_root_node	O
->	O
nn_stat	O
=	O
mux	pointer
.	O
stat_template	struct
;	O
netfs_root_node	O
->	O
nn_stat	O
.	O
st_ino	O
=	O
2	int
;	O
netfs_root_node	O
->	O
nn_stat	O
.	O
st_mode	O
=	O
S_IFDIR	O
|	O
(	O
ul_stat	struct
.	O
st_mode	O
&	O
~	O
S_IFMT	O
&	O
~	O
S_ITRANS	O
)	O
;	O
netfs_root_node	O
->	O
nn_translated	O
=	O
0	int
;	O
fshelp_touch	function
(	O
&	O
netfs_root_node	O
->	O
nn_stat	O
,	O
TOUCH_ATIME	O
|	O
TOUCH_MTIME	O
|	O
TOUCH_CTIME	O
,	O
usermux_maptime	pointer
)	O
;	O
for	O
(	O
;	O
;	O
)	O
netfs_server_loop	function
(	O
)	O
;	O
}	O
