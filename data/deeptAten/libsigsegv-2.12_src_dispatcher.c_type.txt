typedef	O
struct	O
node_t	struct
{	O
struct	O
node_t	struct
*	O
left	pointer
;	O
struct	O
node_t	struct
*	O
right	pointer
;	O
unsigned	O
int	O
height	int
;	O
uintptr_t	long
address	pointer
;	O
size_t	long
len	long
;	O
sigsegv_area_handler_t	pointer
handler	pointer
;	O
void	O
*	O
handler_arg	pointer
;	O
}	O
node_t	struct
;	O
static	O
void	O
rebalance	function
(	O
node_t	struct
*	O
*	O
*	O
nodeplaces_ptr	pointer
,	O
unsigned	O
int	O
count	int
)	O
{	O
if	O
(	O
count	int
>	O
0	int
)	O
do	O
{	O
node_t	struct
*	O
*	O
nodeplace	pointer
=	O
*	O
--	O
nodeplaces_ptr	pointer
;	O
node_t	struct
*	O
node	pointer
=	O
*	O
nodeplace	pointer
;	O
node_t	struct
*	O
nodeleft	pointer
=	O
node	pointer
->	O
left	pointer
;	O
node_t	struct
*	O
noderight	pointer
=	O
node	pointer
->	O
right	pointer
;	O
unsigned	O
int	O
heightleft	int
=	O
heightof	O
(	O
nodeleft	pointer
)	O
;	O
unsigned	O
int	O
heightright	int
=	O
heightof	O
(	O
noderight	pointer
)	O
;	O
if	O
(	O
heightright	int
+	O
1	int
<	O
heightleft	int
)	O
{	O
node_t	struct
*	O
nodeleftleft	pointer
=	O
nodeleft	pointer
->	O
left	pointer
;	O
node_t	struct
*	O
nodeleftright	pointer
=	O
nodeleft	pointer
->	O
right	pointer
;	O
unsigned	O
int	O
heightleftright	int
=	O
heightof	O
(	O
nodeleftright	pointer
)	O
;	O
if	O
(	O
heightof	O
(	O
nodeleftleft	pointer
)	O
>=	O
heightleftright	int
)	O
{	O
node	pointer
->	O
left	pointer
=	O
nodeleftright	pointer
;	O
nodeleft	pointer
->	O
right	pointer
=	O
node	pointer
;	O
nodeleft	pointer
->	O
height	int
=	O
1	int
+	O
(	O
node	pointer
->	O
height	int
=	O
1	int
+	O
heightleftright	int
)	O
;	O
*	O
nodeplace	pointer
=	O
nodeleft	pointer
;	O
}	O
else	O
{	O
nodeleft	pointer
->	O
right	pointer
=	O
nodeleftright	pointer
->	O
left	pointer
;	O
node	pointer
->	O
left	pointer
=	O
nodeleftright	pointer
->	O
right	pointer
;	O
nodeleftright	pointer
->	O
left	pointer
=	O
nodeleft	pointer
;	O
nodeleftright	pointer
->	O
right	pointer
=	O
node	pointer
;	O
nodeleft	pointer
->	O
height	int
=	O
node	pointer
->	O
height	int
=	O
heightleftright	int
;	O
nodeleftright	pointer
->	O
height	int
=	O
heightleft	int
;	O
*	O
nodeplace	pointer
=	O
nodeleftright	pointer
;	O
}	O
}	O
else	O
if	O
(	O
heightleft	int
+	O
1	int
<	O
heightright	int
)	O
{	O
node_t	struct
*	O
noderightright	pointer
=	O
noderight	pointer
->	O
right	pointer
;	O
node_t	struct
*	O
noderightleft	pointer
=	O
noderight	pointer
->	O
left	pointer
;	O
unsigned	O
int	O
heightrightleft	int
=	O
heightof	O
(	O
noderightleft	pointer
)	O
;	O
if	O
(	O
heightof	O
(	O
noderightright	pointer
)	O
>=	O
heightrightleft	int
)	O
{	O
node	pointer
->	O
right	pointer
=	O
noderightleft	pointer
;	O
noderight	pointer
->	O
left	pointer
=	O
node	pointer
;	O
noderight	pointer
->	O
height	int
=	O
1	int
+	O
(	O
node	pointer
->	O
height	int
=	O
1	int
+	O
heightrightleft	int
)	O
;	O
*	O
nodeplace	pointer
=	O
noderight	pointer
;	O
}	O
else	O
{	O
noderight	pointer
->	O
left	pointer
=	O
noderightleft	pointer
->	O
right	pointer
;	O
node	pointer
->	O
right	pointer
=	O
noderightleft	pointer
->	O
left	pointer
;	O
noderightleft	pointer
->	O
right	pointer
=	O
noderight	pointer
;	O
noderightleft	pointer
->	O
left	pointer
=	O
node	pointer
;	O
noderight	pointer
->	O
height	int
=	O
node	pointer
->	O
height	int
=	O
heightrightleft	int
;	O
noderightleft	pointer
->	O
height	int
=	O
heightright	int
;	O
*	O
nodeplace	pointer
=	O
noderightleft	pointer
;	O
}	O
}	O
else	O
{	O
unsigned	O
int	O
height	int
=	O
(	O
heightleft	int
<	O
heightright	int
?	O
heightright	int
:	O
heightleft	int
)	O
+	O
1	int
;	O
if	O
(	O
height	int
==	O
node	pointer
->	O
height	int
)	O
break	O
;	O
node	pointer
->	O
height	int
=	O
height	int
;	O
}	O
}	O
while	O
(	O
--	O
count	int
>	O
0	int
)	O
;	O
}	O
static	O
node_t	struct
*	O
insert	function
(	O
node_t	struct
*	O
new_node	pointer
,	O
node_t	struct
*	O
tree	pointer
)	O
{	O
uintptr_t	long
key	long
=	O
new_node	pointer
->	O
address	pointer
;	O
node_t	struct
*	O
*	O
nodeplace	pointer
=	O
&	O
tree	pointer
;	O
node_t	struct
*	O
*	O
stack	array
[	O
MAXHEIGHT	int
]	O
;	O
unsigned	O
int	O
stack_count	int
=	O
0	int
;	O
node_t	struct
*	O
*	O
*	O
stack_ptr	pointer
=	O
&	O
stack	array
[	O
0	int
]	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
node_t	struct
*	O
node	pointer
=	O
*	O
nodeplace	pointer
;	O
if	O
(	O
node	pointer
==	O
empty	O
)	O
break	O
;	O
*	O
stack_ptr	pointer
++	O
=	O
nodeplace	pointer
;	O
stack_count	int
++	O
;	O
if	O
(	O
key	long
<	O
node	pointer
->	O
address	pointer
)	O
nodeplace	pointer
=	O
&	O
node	pointer
->	O
left	pointer
;	O
else	O
nodeplace	pointer
=	O
&	O
node	pointer
->	O
right	pointer
;	O
}	O
new_node	pointer
->	O
left	pointer
=	O
empty	O
;	O
new_node	pointer
->	O
right	pointer
=	O
empty	O
;	O
new_node	pointer
->	O
height	int
=	O
1	int
;	O
*	O
nodeplace	pointer
=	O
new_node	pointer
;	O
rebalance	function
(	O
stack_ptr	pointer
,	O
stack_count	int
)	O
;	O
return	O
tree	pointer
;	O
}	O
static	O
node_t	struct
*	O
delete	function
(	O
node_t	struct
*	O
node_to_delete	pointer
,	O
node_t	struct
*	O
tree	pointer
)	O
{	O
uintptr_t	long
key	long
=	O
node_to_delete	pointer
->	O
address	pointer
;	O
node_t	struct
*	O
*	O
nodeplace	pointer
=	O
&	O
tree	pointer
;	O
node_t	struct
*	O
*	O
stack	array
[	O
MAXHEIGHT	int
]	O
;	O
unsigned	O
int	O
stack_count	int
=	O
0	int
;	O
node_t	struct
*	O
*	O
*	O
stack_ptr	pointer
=	O
&	O
stack	array
[	O
0	int
]	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
node_t	struct
*	O
node	pointer
=	O
*	O
nodeplace	pointer
;	O
if	O
(	O
node	pointer
==	O
empty	O
)	O
return	O
tree	pointer
;	O
*	O
stack_ptr	pointer
++	O
=	O
nodeplace	pointer
;	O
stack_count	int
++	O
;	O
if	O
(	O
key	long
==	O
node	pointer
->	O
address	pointer
)	O
{	O
if	O
(	O
node	pointer
!=	O
node_to_delete	pointer
)	O
abort	function
(	O
)	O
;	O
break	O
;	O
}	O
if	O
(	O
key	long
<	O
node	pointer
->	O
address	pointer
)	O
nodeplace	pointer
=	O
&	O
node	pointer
->	O
left	pointer
;	O
else	O
nodeplace	pointer
=	O
&	O
node	pointer
->	O
right	pointer
;	O
}	O
{	O
node_t	struct
*	O
*	O
nodeplace_to_delete	pointer
=	O
nodeplace	pointer
;	O
if	O
(	O
node_to_delete	pointer
->	O
left	pointer
==	O
empty	O
)	O
{	O
*	O
nodeplace_to_delete	pointer
=	O
node_to_delete	pointer
->	O
right	pointer
;	O
stack_ptr	pointer
--	O
;	O
stack_count	int
--	O
;	O
}	O
else	O
{	O
node_t	struct
*	O
*	O
*	O
stack_ptr_to_delete	pointer
=	O
stack_ptr	pointer
;	O
node_t	struct
*	O
*	O
nodeplace	pointer
=	O
&	O
node_to_delete	pointer
->	O
left	pointer
;	O
node_t	struct
*	O
node	pointer
;	O
for	O
(	O
;	O
;	O
)	O
{	O
node	pointer
=	O
*	O
nodeplace	pointer
;	O
if	O
(	O
node	pointer
->	O
right	pointer
==	O
empty	O
)	O
break	O
;	O
*	O
stack_ptr	pointer
++	O
=	O
nodeplace	pointer
;	O
stack_count	int
++	O
;	O
nodeplace	pointer
=	O
&	O
node	pointer
->	O
right	pointer
;	O
}	O
*	O
nodeplace	pointer
=	O
node	pointer
->	O
left	pointer
;	O
node	pointer
->	O
left	pointer
=	O
node_to_delete	pointer
->	O
left	pointer
;	O
node	pointer
->	O
right	pointer
=	O
node_to_delete	pointer
->	O
right	pointer
;	O
node	pointer
->	O
height	int
=	O
node_to_delete	pointer
->	O
height	int
;	O
*	O
nodeplace_to_delete	pointer
=	O
node	pointer
;	O
*	O
stack_ptr_to_delete	pointer
=	O
&	O
node	pointer
->	O
left	pointer
;	O
}	O
}	O
rebalance	function
(	O
stack_ptr	pointer
,	O
stack_count	int
)	O
;	O
return	O
tree	pointer
;	O
}	O
void	O
sigsegv_init	function
(	O
sigsegv_dispatcher	struct
*	O
dispatcher	pointer
)	O
{	O
dispatcher	pointer
->	O
tree	pointer
=	O
empty	O
;	O
}	O
void	O
*	O
sigsegv_register	function
(	O
sigsegv_dispatcher	struct
*	O
dispatcher	pointer
,	O
void	O
*	O
address	pointer
,	O
size_t	long
len	long
,	O
sigsegv_area_handler_t	pointer
handler	pointer
,	O
void	O
*	O
handler_arg	pointer
)	O
{	O
if	O
(	O
len	long
==	O
0	int
)	O
return	O
NULL	O
;	O
else	O
{	O
node_t	struct
*	O
new_node	pointer
=	O
(	O
node_t	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
node_t	struct
)	O
)	O
;	O
new_node	pointer
->	O
address	pointer
=	O
(	O
uintptr_t	long
)	O
address	pointer
;	O
new_node	pointer
->	O
len	long
=	O
len	long
;	O
new_node	pointer
->	O
handler	pointer
=	O
handler	pointer
;	O
new_node	pointer
->	O
handler_arg	pointer
=	O
handler_arg	pointer
;	O
dispatcher	pointer
->	O
tree	pointer
=	O
insert	function
(	O
new_node	pointer
,	O
(	O
node_t	struct
*	O
)	O
dispatcher	pointer
->	O
tree	pointer
)	O
;	O
return	O
new_node	pointer
;	O
}	O
}	O
void	O
sigsegv_unregister	function
(	O
sigsegv_dispatcher	struct
*	O
dispatcher	pointer
,	O
void	O
*	O
ticket	pointer
)	O
{	O
if	O
(	O
ticket	pointer
!=	O
NULL	O
)	O
{	O
node_t	struct
*	O
node_to_delete	pointer
=	O
(	O
node_t	struct
*	O
)	O
ticket	pointer
;	O
dispatcher	pointer
->	O
tree	pointer
=	O
delete	function
(	O
node_to_delete	pointer
,	O
(	O
node_t	struct
*	O
)	O
dispatcher	pointer
->	O
tree	pointer
)	O
;	O
free	function
(	O
node_to_delete	pointer
)	O
;	O
}	O
}	O
int	O
sigsegv_dispatch	function
(	O
sigsegv_dispatcher	struct
*	O
dispatcher	pointer
,	O
void	O
*	O
fault_address	pointer
)	O
{	O
uintptr_t	long
key	long
=	O
(	O
uintptr_t	long
)	O
fault_address	pointer
;	O
node_t	struct
*	O
tree	pointer
=	O
(	O
node_t	struct
*	O
)	O
dispatcher	pointer
->	O
tree	pointer
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
tree	pointer
==	O
empty	O
)	O
return	O
0	int
;	O
if	O
(	O
key	long
<	O
tree	pointer
->	O
address	pointer
)	O
tree	pointer
=	O
tree	pointer
->	O
left	pointer
;	O
else	O
if	O
(	O
key	long
-	O
tree	pointer
->	O
address	pointer
>=	O
tree	pointer
->	O
len	long
)	O
tree	pointer
=	O
tree	pointer
->	O
right	pointer
;	O
else	O
break	O
;	O
}	O
return	O
(	O
*	O
tree	pointer
->	O
handler	pointer
)	O
(	O
fault_address	pointer
,	O
tree	pointer
->	O
handler_arg	pointer
)	O
;	O
}	O
