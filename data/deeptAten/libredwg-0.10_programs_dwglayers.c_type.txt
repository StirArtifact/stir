static	O
int	O
usage	function
(	O
void	O
)	O
{	O
printf	function
(	O
"\nUsage: dwglayers [-f|--flags] [--on] <input_file.dwg>\n"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
static	O
int	O
opt_version	function
(	O
void	O
)	O
{	O
printf	function
(	O
"dwglayers %s\n"	pointer
,	O
PACKAGE_VERSION	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
help	function
(	O
void	O
)	O
{	O
printf	function
(	O
"\nUsage: dwglayers [OPTION]... DWGFILE\n"	pointer
)	O
;	O
printf	function
(	O
"Print list of layers.\n"	pointer
"\n"	pointer
)	O
;	O
printf	function
(	O
"  -x, --extnames            prints EXTNAMES (r13-r14 only)\n"	pointer
"                i.e. space instead of _\n"	pointer
)	O
;	O
printf	function
(	O
"  -f, --flags               prints also flags:\n"	pointer
"                3 chars for: f for frozen, + or - for ON or OFF, l "	pointer
"for locked\n"	pointer
)	O
;	O
printf	function
(	O
"  -o, --on                  prints only ON layers\n"	pointer
)	O
;	O
printf	function
(	O
"  -h, --help                display this help and exit\n"	pointer
)	O
;	O
printf	function
(	O
"      --version             output version information and exit\n"	pointer
"\n"	pointer
)	O
;	O
printf	function
(	O
"GNU LibreDWG online manual: "	pointer
"<https://www.gnu.org/software/libredwg/>\n"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
int	O
error	int
;	O
long	O
i	long
=	O
1	int
;	O
int	O
flags	char
=	O
0	int
,	O
on	char
=	O
0	int
,	O
extnames	int
=	O
0	int
;	O
char	O
*	O
filename_in	pointer
;	O
Dwg_Data	struct
dwg	pointer
;	O
Dwg_Object_LAYER	struct
*	O
layer	int
;	O
int	O
c	int
;	O
int	O
option_index	int
=	O
0	int
;	O
static	O
struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
"flags"	pointer
,	O
0	int
,	O
0	int
,	O
'f'	O
}	O
,	O
{	O
"extnames"	pointer
,	O
0	int
,	O
0	int
,	O
'x'	O
}	O
,	O
{	O
"on"	pointer
,	O
0	int
,	O
0	int
,	O
'o'	O
}	O
,	O
{	O
"help"	pointer
,	O
0	int
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"version"	pointer
,	O
0	int
,	O
0	int
,	O
0	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
while	O
(	O
(	O
c	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	array
,	O
"xfoh"	pointer
,	O
long_options	array
,	O
&	O
option_index	int
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
if	O
(	O
c	int
==	O
-	O
1	int
)	O
break	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
0	int
:	O
if	O
(	O
!	O
strcmp	function
(	O
long_options	array
[	O
option_index	int
]	O
.	O
name	pointer
,	O
"version"	pointer
)	O
)	O
return	O
opt_version	function
(	O
)	O
;	O
if	O
(	O
!	O
strcmp	function
(	O
long_options	array
[	O
option_index	int
]	O
.	O
name	pointer
,	O
"help"	pointer
)	O
)	O
return	O
help	function
(	O
)	O
;	O
break	O
;	O
case	O
'x'	O
:	O
extnames	int
=	O
1	int
;	O
break	O
;	O
case	O
'f'	O
:	O
flags	char
=	O
1	int
;	O
break	O
;	O
case	O
'o'	O
:	O
on	char
=	O
1	int
;	O
break	O
;	O
case	O
'h'	O
:	O
return	O
help	function
(	O
)	O
;	O
case	O
'?'	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: invalid option '-%c' ignored\n"	pointer
,	O
argv	array
[	O
0	int
]	O
,	O
optopt	int
)	O
;	O
break	O
;	O
default	O
:	O
return	O
usage	function
(	O
)	O
;	O
}	O
}	O
i	long
=	O
optind	int
;	O
if	O
(	O
i	long
>=	O
argc	int
)	O
return	O
usage	function
(	O
)	O
;	O
filename_in	pointer
=	O
argv	array
[	O
i	long
]	O
;	O
memset	function
(	O
&	O
dwg	pointer
,	O
0	int
,	O
sizeof	O
(	O
Dwg_Data	struct
)	O
)	O
;	O
error	int
=	O
dwg_read_file	function
(	O
filename_in	pointer
,	O
&	O
dwg	pointer
)	O
;	O
if	O
(	O
error	int
>=	O
DWG_ERR_CRITICAL	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"READ ERROR %s: 0x%x\n"	pointer
,	O
filename_in	pointer
,	O
error	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dwg	pointer
.	O
layer_control	struct
.	O
num_entries	short
;	O
i	long
++	O
)	O
{	O
Dwg_Object	struct
*	O
obj	pointer
;	O
char	O
*	O
name	pointer
;	O
assert	O
(	O
dwg	pointer
.	O
layer_control	struct
.	O
entries	pointer
)	O
;	O
assert	O
(	O
dwg	pointer
.	O
layer_control	struct
.	O
entries	pointer
[	O
i	long
]	O
)	O
;	O
obj	pointer
=	O
dwg	pointer
.	O
layer_control	struct
.	O
entries	pointer
[	O
i	long
]	O
->	O
obj	pointer
;	O
if	O
(	O
!	O
obj	pointer
||	O
obj	pointer
->	O
type	short
!=	O
DWG_TYPE_LAYER	int
)	O
continue	O
;	O
assert	O
(	O
dwg	pointer
.	O
layer_control	struct
.	O
entries	pointer
[	O
i	long
]	O
->	O
obj	pointer
->	O
tio	union
.	O
object	pointer
)	O
;	O
layer	int
=	O
dwg	pointer
.	O
layer_control	struct
.	O
entries	pointer
[	O
i	long
]	O
->	O
obj	pointer
->	O
tio	union
.	O
object	pointer
->	O
tio	union
.	O
LAYER	pointer
;	O
if	O
(	O
on	char
&&	O
(	O
!	O
layer	int
->	O
on	char
||	O
layer	int
->	O
frozen	char
)	O
)	O
continue	O
;	O
if	O
(	O
flags	char
)	O
printf	function
(	O
"%s%s%s\t"	pointer
,	O
layer	int
->	O
frozen	char
?	O
"f"	pointer
:	O
" "	pointer
,	O
layer	int
->	O
on	char
?	O
"+"	pointer
:	O
"-"	pointer
,	O
layer	int
->	O
locked	char
?	O
"l"	pointer
:	O
" "	pointer
)	O
;	O
if	O
(	O
extnames	int
&&	O
dwg	pointer
.	O
header	struct
.	O
from_version	enum
>=	O
R_13	int
&&	O
dwg	pointer
.	O
header	struct
.	O
from_version	enum
<	O
R_2000	int
)	O
{	O
if	O
(	O
!	O
(	O
name	pointer
=	O
dwg_find_table_extname	function
(	O
&	O
dwg	pointer
,	O
obj	pointer
)	O
)	O
)	O
name	pointer
=	O
layer	int
->	O
name	pointer
;	O
}	O
else	O
name	pointer
=	O
layer	int
->	O
name	pointer
;	O
if	O
(	O
dwg	pointer
.	O
header	struct
.	O
from_version	enum
>=	O
R_2007	int
)	O
{	O
char	O
*	O
utf8	pointer
=	O
bit_convert_TU	function
(	O
(	O
BITCODE_TU	pointer
)	O
name	pointer
)	O
;	O
printf	function
(	O
"%s\n"	pointer
,	O
utf8	pointer
)	O
;	O
free	function
(	O
utf8	pointer
)	O
;	O
}	O
else	O
printf	function
(	O
"%s\n"	pointer
,	O
name	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
}	O
if	O
(	O
(	O
dwg	pointer
.	O
header	struct
.	O
version	short
&&	O
dwg	pointer
.	O
num_objects	int
<	O
1000	int
)	O
)	O
dwg_free	function
(	O
&	O
dwg	pointer
)	O
;	O
return	O
error	int
>=	O
DWG_ERR_CRITICAL	O
?	O
1	int
:	O
0	int
;	O
}	O
