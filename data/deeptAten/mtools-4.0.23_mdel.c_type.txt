typedef	O
struct	O
Arg_t	struct
{	O
int	O
deltype	int
;	O
int	O
verbose	int
;	O
}	O
Arg_t	struct
;	O
void	O
wipeEntry	function
(	O
direntry_t	struct
*	O
entry	int
)	O
{	O
direntry_t	struct
longNameEntry	struct
;	O
int	O
i	int
;	O
initializeDirentry	function
(	O
&	O
longNameEntry	struct
,	O
entry	int
->	O
Dir	pointer
)	O
;	O
for	O
(	O
i	int
=	O
entry	int
->	O
beginSlot	int
;	O
i	int
<	O
entry	int
->	O
endSlot	int
;	O
i	int
++	O
)	O
{	O
int	O
error	pointer
;	O
longNameEntry	struct
.	O
entry	int
=	O
i	int
;	O
dir_read	function
(	O
&	O
longNameEntry	struct
,	O
&	O
error	pointer
)	O
;	O
if	O
(	O
error	pointer
)	O
break	O
;	O
longNameEntry	struct
.	O
dir	pointer
.	O
name	pointer
[	O
0	int
]	O
=	O
(	O
char	O
)	O
DELMARK	O
;	O
dir_write	function
(	O
&	O
longNameEntry	struct
)	O
;	O
}	O
entry	int
->	O
dir	pointer
.	O
name	pointer
[	O
0	int
]	O
=	O
(	O
char	O
)	O
DELMARK	O
;	O
dir_write	function
(	O
entry	int
)	O
;	O
}	O
static	O
int	O
del_entry	function
(	O
direntry_t	struct
*	O
entry	int
,	O
MainParam_t	struct
*	O
mp	pointer
)	O
{	O
Arg_t	struct
*	O
arg	pointer
=	O
(	O
Arg_t	struct
*	O
)	O
mp	pointer
->	O
arg	pointer
;	O
if	O
(	O
got_signal	int
)	O
return	O
ERROR_ONE	int
;	O
if	O
(	O
entry	int
->	O
entry	int
==	O
-	O
3	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Cannot remove root directory\n"	pointer
)	O
;	O
return	O
ERROR_ONE	int
;	O
}	O
if	O
(	O
arg	pointer
->	O
verbose	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Removing "	pointer
)	O
;	O
fprintPwd	function
(	O
stderr	pointer
,	O
entry	int
,	O
0	int
)	O
;	O
fputc	function
(	O
'\n'	O
,	O
stderr	pointer
)	O
;	O
}	O
if	O
(	O
entry	int
->	O
dir	pointer
.	O
attr	char
&	O
(	O
ATTR_READONLY	int
|	O
ATTR_SYSTEM	int
)	O
)	O
{	O
char	O
tmp	array
[	O
4	int
*	O
MAX_VNAMELEN	O
+	O
1	int
]	O
;	O
WCHAR_TO_NATIVE	O
(	O
entry	int
->	O
name	pointer
,	O
tmp	array
,	O
MAX_VNAMELEN	O
)	O
;	O
if	O
(	O
ask_confirmation	function
(	O
"%s: \"%s\" is read only, erase anyway (y/n) ? "	pointer
,	O
progname	pointer
,	O
tmp	array
)	O
)	O
return	O
ERROR_ONE	int
;	O
}	O
if	O
(	O
fatFreeWithDirentry	function
(	O
entry	int
)	O
)	O
return	O
ERROR_ONE	int
;	O
wipeEntry	function
(	O
entry	int
)	O
;	O
return	O
GOT_ONE	int
;	O
}	O
static	O
int	O
del_file	function
(	O
direntry_t	struct
*	O
entry	int
,	O
MainParam_t	struct
*	O
mp	pointer
)	O
{	O
char	O
shortname	pointer
[	O
13	int
]	O
;	O
direntry_t	struct
subEntry	struct
;	O
Stream_t	struct
*	O
SubDir	pointer
;	O
Arg_t	struct
*	O
arg	pointer
=	O
(	O
Arg_t	struct
*	O
)	O
mp	pointer
->	O
arg	pointer
;	O
MainParam_t	struct
sonmp	struct
;	O
int	O
ret	int
;	O
int	O
r	int
;	O
sonmp	struct
=	O
*	O
mp	pointer
;	O
sonmp	struct
.	O
arg	pointer
=	O
mp	pointer
->	O
arg	pointer
;	O
r	int
=	O
0	int
;	O
if	O
(	O
IS_DIR	O
(	O
entry	int
)	O
)	O
{	O
SubDir	pointer
=	O
OpenFileByDirentry	function
(	O
entry	int
)	O
;	O
initializeDirentry	function
(	O
&	O
subEntry	struct
,	O
SubDir	pointer
)	O
;	O
ret	int
=	O
0	int
;	O
while	O
(	O
(	O
r	int
=	O
vfat_lookup	function
(	O
&	O
subEntry	struct
,	O
"*"	pointer
,	O
1	int
,	O
ACCEPT_DIR	int
|	O
ACCEPT_PLAIN	int
,	O
shortname	pointer
,	O
sizeof	O
(	O
shortname	pointer
)	O
,	O
NULL	O
,	O
0	int
)	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
shortname	pointer
[	O
0	int
]	O
!=	O
DELMARK	O
&&	O
shortname	pointer
[	O
0	int
]	O
&&	O
shortname	pointer
[	O
0	int
]	O
!=	O
'.'	O
)	O
{	O
if	O
(	O
arg	pointer
->	O
deltype	int
!=	O
2	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Directory "	pointer
)	O
;	O
fprintPwd	function
(	O
stderr	pointer
,	O
entry	int
,	O
0	int
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
" non empty\n"	pointer
)	O
;	O
ret	int
=	O
ERROR_ONE	int
;	O
break	O
;	O
}	O
if	O
(	O
got_signal	int
)	O
{	O
ret	int
=	O
ERROR_ONE	int
;	O
break	O
;	O
}	O
ret	int
=	O
del_file	function
(	O
&	O
subEntry	struct
,	O
&	O
sonmp	struct
)	O
;	O
if	O
(	O
ret	int
&	O
ERROR_ONE	int
)	O
break	O
;	O
ret	int
=	O
0	int
;	O
}	O
}	O
FREE	O
(	O
&	O
SubDir	pointer
)	O
;	O
if	O
(	O
r	int
==	O
-	O
2	int
)	O
return	O
ERROR_ONE	int
;	O
if	O
(	O
ret	int
)	O
return	O
ret	int
;	O
}	O
return	O
del_entry	function
(	O
entry	int
,	O
mp	pointer
)	O
;	O
}	O
static	O
void	O
usage	function
(	O
int	O
ret	int
)	O
NORETURN	O
;	O
static	O
void	O
usage	function
(	O
int	O
ret	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Mtools version %s, dated %s\n"	pointer
,	O
mversion	pointer
,	O
mdate	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Usage: %s [-v] msdosfile [msdosfiles...]\n"	pointer
,	O
progname	pointer
)	O
;	O
exit	function
(	O
ret	int
)	O
;	O
}	O
void	O
mdel	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
deltype	int
)	O
NORETURN	O
;	O
void	O
mdel	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
deltype	int
)	O
{	O
Arg_t	struct
arg	pointer
;	O
MainParam_t	struct
mp	pointer
;	O
int	O
c	int
,	O
i	int
;	O
arg	pointer
.	O
verbose	int
=	O
0	int
;	O
if	O
(	O
helpFlag	function
(	O
argc	int
,	O
argv	pointer
)	O
)	O
usage	function
(	O
0	int
)	O
;	O
while	O
(	O
(	O
c	int
=	O
getopt	function
(	O
argc	int
,	O
argv	pointer
,	O
"i:vh"	pointer
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
'i'	O
:	O
set_cmd_line_image	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'v'	O
:	O
arg	pointer
.	O
verbose	int
=	O
1	int
;	O
break	O
;	O
case	O
'h'	O
:	O
usage	function
(	O
0	int
)	O
;	O
default	O
:	O
usage	function
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
argc	int
==	O
optind	int
)	O
usage	function
(	O
1	int
)	O
;	O
init_mp	function
(	O
&	O
mp	pointer
)	O
;	O
mp	pointer
.	O
callback	pointer
=	O
del_file	function
;	O
mp	pointer
.	O
arg	pointer
=	O
(	O
void	O
*	O
)	O
&	O
arg	pointer
;	O
mp	pointer
.	O
openflags	int
=	O
O_RDWR	int
;	O
arg	pointer
.	O
deltype	int
=	O
deltype	int
;	O
switch	O
(	O
deltype	int
)	O
{	O
case	O
0	int
:	O
mp	pointer
.	O
lookupflags	int
=	O
ACCEPT_PLAIN	int
;	O
break	O
;	O
case	O
1	int
:	O
mp	pointer
.	O
lookupflags	int
=	O
ACCEPT_DIR	int
;	O
break	O
;	O
case	O
2	int
:	O
mp	pointer
.	O
lookupflags	int
=	O
ACCEPT_DIR	int
|	O
ACCEPT_PLAIN	int
;	O
break	O
;	O
}	O
mp	pointer
.	O
lookupflags	int
|=	O
NO_DOTS	int
;	O
for	O
(	O
i	int
=	O
optind	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
size_t	long
b	long
,	O
l	long
;	O
if	O
(	O
argv	pointer
[	O
i	int
]	O
[	O
0	int
]	O
&&	O
argv	pointer
[	O
i	int
]	O
[	O
1	int
]	O
==	O
':'	O
)	O
b	long
=	O
2	int
;	O
else	O
b	long
=	O
0	int
;	O
l	long
=	O
strlen	function
(	O
argv	pointer
[	O
i	int
]	O
+	O
b	long
)	O
;	O
if	O
(	O
l	long
>	O
1	int
&&	O
argv	pointer
[	O
i	int
]	O
[	O
b	long
+	O
l	long
-	O
1	int
]	O
==	O
'/'	O
)	O
argv	pointer
[	O
i	int
]	O
[	O
b	long
+	O
l	long
-	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
exit	function
(	O
main_loop	function
(	O
&	O
mp	pointer
,	O
argv	pointer
+	O
optind	int
,	O
argc	int
-	O
optind	int
)	O
)	O
;	O
}	O
