enum	O
_message_stream_state	enum
{	O
_mss_init	int
,	O
_mss_header	int
,	O
_mss_body	int
,	O
_mss_eof	int
}	O
;	O
struct	O
_mu_message_stream	struct
{	O
struct	O
_mu_stream	struct
stream	pointer
;	O
mu_message_t	pointer
msg	pointer
;	O
enum	O
_message_stream_state	enum
state	pointer
;	O
mu_stream_t	pointer
transport	pointer
;	O
mu_off_t	long
limit	long
;	O
}	O
;	O
static	O
int	O
_check_stream_state	function
(	O
struct	O
_mu_message_stream	struct
*	O
str	pointer
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
if	O
(	O
str	pointer
->	O
transport	pointer
&&	O
mu_stream_eof	function
(	O
str	pointer
->	O
transport	pointer
)	O
)	O
mu_stream_destroy	function
(	O
&	O
str	pointer
->	O
transport	pointer
)	O
;	O
switch	O
(	O
str	pointer
->	O
state	pointer
)	O
{	O
case	O
_mss_init	int
:	O
if	O
(	O
!	O
str	pointer
->	O
transport	pointer
)	O
{	O
rc	int
=	O
mu_header_get_streamref	function
(	O
str	pointer
->	O
msg	pointer
->	O
header	pointer
,	O
&	O
str	pointer
->	O
transport	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
str	pointer
->	O
state	pointer
=	O
_mss_header	int
;	O
rc	int
=	O
mu_stream_seek	function
(	O
str	pointer
->	O
transport	pointer
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
}	O
}	O
break	O
;	O
case	O
_mss_header	int
:	O
if	O
(	O
!	O
str	pointer
->	O
transport	pointer
)	O
{	O
rc	int
=	O
mu_body_get_streamref	function
(	O
str	pointer
->	O
msg	pointer
->	O
body	pointer
,	O
&	O
str	pointer
->	O
transport	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
str	pointer
->	O
state	pointer
=	O
_mss_body	int
;	O
rc	int
=	O
mu_stream_seek	function
(	O
str	pointer
->	O
transport	pointer
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
}	O
}	O
break	O
;	O
case	O
_mss_body	int
:	O
if	O
(	O
!	O
str	pointer
->	O
transport	pointer
)	O
str	pointer
->	O
state	pointer
=	O
_mss_eof	int
;	O
case	O
_mss_eof	int
:	O
break	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
void	O
_message_stream_done	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
)	O
{	O
struct	O
_mu_message_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_message_stream	struct
*	O
)	O
str	pointer
;	O
mu_stream_destroy	function
(	O
&	O
sp	pointer
->	O
transport	pointer
)	O
;	O
}	O
static	O
int	O
_message_stream_flush	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
)	O
{	O
struct	O
_mu_message_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_message_stream	struct
*	O
)	O
str	pointer
;	O
int	O
rc	int
=	O
_check_stream_state	function
(	O
sp	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
return	O
mu_stream_flush	function
(	O
sp	pointer
->	O
transport	pointer
)	O
;	O
}	O
static	O
int	O
_message_stream_size	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
mu_off_t	long
*	O
psize	pointer
)	O
{	O
struct	O
_mu_message_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_message_stream	struct
*	O
)	O
str	pointer
;	O
size_t	long
hsize	long
,	O
bsize	long
;	O
mu_header_size	function
(	O
sp	pointer
->	O
msg	pointer
->	O
header	pointer
,	O
&	O
hsize	long
)	O
;	O
mu_body_size	function
(	O
sp	pointer
->	O
msg	pointer
->	O
body	pointer
,	O
&	O
bsize	long
)	O
;	O
if	O
(	O
psize	pointer
)	O
*	O
psize	pointer
=	O
hsize	long
+	O
bsize	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_message_stream_seek	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
mu_off_t	long
off	long
,	O
mu_off_t	long
*	O
ppos	pointer
)	O
{	O
struct	O
_mu_message_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_message_stream	struct
*	O
)	O
str	pointer
;	O
size_t	long
hsize	long
,	O
size	long
;	O
int	O
rc	int
;	O
rc	int
=	O
_check_stream_state	function
(	O
sp	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_header_size	function
(	O
sp	pointer
->	O
msg	pointer
->	O
header	pointer
,	O
&	O
hsize	long
)	O
;	O
mu_body_size	function
(	O
sp	pointer
->	O
msg	pointer
->	O
body	pointer
,	O
&	O
size	long
)	O
;	O
if	O
(	O
off	long
<	O
0	int
||	O
off	long
>=	O
size	long
+	O
hsize	long
)	O
return	O
ESPIPE	int
;	O
switch	O
(	O
sp	pointer
->	O
state	pointer
)	O
{	O
case	O
_mss_eof	int
:	O
sp	pointer
->	O
state	pointer
=	O
_mss_init	int
;	O
rc	int
=	O
_check_stream_state	function
(	O
sp	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
case	O
_mss_header	int
:	O
if	O
(	O
off	long
<	O
hsize	long
)	O
break	O
;	O
mu_stream_destroy	function
(	O
&	O
sp	pointer
->	O
transport	pointer
)	O
;	O
rc	int
=	O
_check_stream_state	function
(	O
sp	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
case	O
_mss_body	int
:	O
if	O
(	O
off	long
>	O
hsize	long
)	O
off	long
-=	O
hsize	long
;	O
else	O
{	O
mu_stream_destroy	function
(	O
&	O
sp	pointer
->	O
transport	pointer
)	O
;	O
sp	pointer
->	O
state	pointer
=	O
_mss_init	int
;	O
rc	int
=	O
_check_stream_state	function
(	O
sp	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
rc	int
=	O
mu_stream_seek	function
(	O
sp	pointer
->	O
transport	pointer
,	O
off	long
,	O
MU_SEEK_SET	int
,	O
&	O
off	long
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
sp	pointer
->	O
state	pointer
==	O
_mss_body	int
)	O
off	long
+=	O
hsize	long
;	O
*	O
ppos	pointer
=	O
off	long
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
_message_stream_read	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
bufsize	long
,	O
size_t	long
*	O
pnread	pointer
)	O
{	O
struct	O
_mu_message_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_message_stream	struct
*	O
)	O
str	pointer
;	O
size_t	long
nread	long
=	O
0	int
;	O
int	O
rc	int
;	O
while	O
(	O
bufsize	long
)	O
{	O
size_t	long
n	int
;	O
rc	int
=	O
_check_stream_state	function
(	O
sp	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
if	O
(	O
sp	pointer
->	O
state	pointer
==	O
_mss_eof	int
)	O
break	O
;	O
rc	int
=	O
mu_stream_read	function
(	O
sp	pointer
->	O
transport	pointer
,	O
buf	pointer
,	O
bufsize	long
,	O
&	O
n	int
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
if	O
(	O
n	int
==	O
0	int
)	O
continue	O
;	O
nread	long
+=	O
n	int
;	O
buf	pointer
+=	O
n	int
;	O
bufsize	long
-=	O
n	int
;	O
}	O
*	O
pnread	pointer
=	O
nread	long
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_message_stream_readdelim	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
bufsize	long
,	O
int	O
delim	int
,	O
size_t	long
*	O
pnread	pointer
)	O
{	O
struct	O
_mu_message_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_message_stream	struct
*	O
)	O
str	pointer
;	O
size_t	long
nread	long
=	O
0	int
;	O
int	O
rc	int
;	O
while	O
(	O
bufsize	long
)	O
{	O
size_t	long
n	int
;	O
rc	int
=	O
_check_stream_state	function
(	O
sp	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
if	O
(	O
sp	pointer
->	O
state	pointer
==	O
_mss_eof	int
)	O
break	O
;	O
rc	int
=	O
mu_stream_readdelim	function
(	O
sp	pointer
->	O
transport	pointer
,	O
buf	pointer
,	O
bufsize	long
,	O
delim	int
,	O
&	O
n	int
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
if	O
(	O
n	int
==	O
0	int
)	O
continue	O
;	O
nread	long
+=	O
n	int
;	O
if	O
(	O
buf	pointer
[	O
n	int
-	O
1	int
]	O
==	O
delim	int
)	O
break	O
;	O
buf	pointer
+=	O
n	int
;	O
bufsize	long
-=	O
n	int
;	O
}	O
*	O
pnread	pointer
=	O
nread	long
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_message_stream_create	function
(	O
mu_stream_t	pointer
*	O
pmsg	pointer
,	O
mu_message_t	pointer
msg	pointer
,	O
int	O
flags	int
)	O
{	O
struct	O
_mu_message_stream	struct
*	O
sp	pointer
;	O
sp	pointer
=	O
(	O
struct	O
_mu_message_stream	struct
*	O
)	O
_mu_stream_create	function
(	O
sizeof	O
(	O
*	O
sp	pointer
)	O
,	O
flags	int
|	O
MU_STREAM_SEEK	int
|	O
_MU_STR_OPEN	int
)	O
;	O
if	O
(	O
!	O
sp	pointer
)	O
return	O
ENOMEM	int
;	O
sp	pointer
->	O
stream	pointer
.	O
read	pointer
=	O
_message_stream_read	function
;	O
sp	pointer
->	O
stream	pointer
.	O
readdelim	pointer
=	O
_message_stream_readdelim	function
;	O
sp	pointer
->	O
stream	pointer
.	O
done	pointer
=	O
_message_stream_done	function
;	O
sp	pointer
->	O
stream	pointer
.	O
flush	pointer
=	O
_message_stream_flush	function
;	O
sp	pointer
->	O
stream	pointer
.	O
seek	pointer
=	O
_message_stream_seek	function
;	O
sp	pointer
->	O
stream	pointer
.	O
size	long
=	O
_message_stream_size	function
;	O
sp	pointer
->	O
state	pointer
=	O
_mss_init	int
;	O
sp	pointer
->	O
msg	pointer
=	O
msg	pointer
;	O
*	O
pmsg	pointer
=	O
(	O
mu_stream_t	pointer
)	O
sp	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_message_set_stream	function
(	O
mu_message_t	pointer
msg	pointer
,	O
mu_stream_t	pointer
stream	pointer
,	O
void	O
*	O
owner	pointer
)	O
{	O
if	O
(	O
msg	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
msg	pointer
->	O
owner	pointer
!=	O
owner	pointer
)	O
return	O
EACCES	int
;	O
mu_stream_destroy	function
(	O
&	O
msg	pointer
->	O
rawstream	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
msg	pointer
->	O
outstream	pointer
)	O
;	O
msg	pointer
->	O
rawstream	pointer
=	O
stream	pointer
;	O
msg	pointer
->	O
flags	int
|=	O
MESSAGE_MODIFIED	int
;	O
msg	pointer
->	O
flags	int
&=	O
~	O
MESSAGE_INTERNAL_STREAM	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
mkoutstream	function
(	O
mu_message_t	pointer
msg	pointer
)	O
{	O
int	O
status	int
;	O
mu_header_t	pointer
hdr	pointer
;	O
mu_body_t	pointer
body	pointer
;	O
if	O
(	O
msg	pointer
->	O
outstream	pointer
)	O
return	O
0	int
;	O
status	int
=	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_message_get_body	function
(	O
msg	pointer
,	O
&	O
body	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
_message_stream_create	function
(	O
&	O
msg	pointer
->	O
outstream	pointer
,	O
msg	pointer
,	O
MU_STREAM_RDWR	O
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
msg	pointer
->	O
flags	int
|=	O
MESSAGE_INTERNAL_STREAM	int
;	O
return	O
status	int
;	O
}	O
int	O
mu_message_get_stream	function
(	O
mu_message_t	pointer
msg	pointer
,	O
mu_stream_t	pointer
*	O
pstream	pointer
)	O
{	O
int	O
status	int
;	O
if	O
(	O
msg	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pstream	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
msg	pointer
->	O
rawstream	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
msg	pointer
->	O
_get_stream	pointer
)	O
{	O
status	int
=	O
msg	pointer
->	O
_get_stream	pointer
(	O
msg	pointer
,	O
&	O
msg	pointer
->	O
rawstream	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
}	O
else	O
{	O
status	int
=	O
mkoutstream	function
(	O
msg	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_streamref_create	function
(	O
&	O
msg	pointer
->	O
rawstream	pointer
,	O
msg	pointer
->	O
outstream	pointer
)	O
;	O
}	O
}	O
*	O
pstream	pointer
=	O
msg	pointer
->	O
rawstream	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_message_get_streamref	function
(	O
mu_message_t	pointer
msg	pointer
,	O
mu_stream_t	pointer
*	O
pstream	pointer
)	O
{	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
msg	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pstream	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
!	O
msg	pointer
->	O
rawstream	pointer
)	O
{	O
if	O
(	O
msg	pointer
->	O
_get_stream	pointer
)	O
{	O
status	int
=	O
msg	pointer
->	O
_get_stream	pointer
(	O
msg	pointer
,	O
&	O
msg	pointer
->	O
rawstream	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_streamref_create	function
(	O
&	O
msg	pointer
->	O
outstream	pointer
,	O
msg	pointer
->	O
rawstream	pointer
)	O
;	O
}	O
else	O
{	O
status	int
=	O
mkoutstream	function
(	O
msg	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_streamref_create	function
(	O
&	O
msg	pointer
->	O
rawstream	pointer
,	O
msg	pointer
->	O
outstream	pointer
)	O
;	O
}	O
}	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
!	O
msg	pointer
->	O
outstream	pointer
||	O
(	O
!	O
(	O
msg	pointer
->	O
flags	int
&	O
MESSAGE_INTERNAL_STREAM	int
)	O
&&	O
mu_message_is_modified	function
(	O
msg	pointer
)	O
)	O
)	O
{	O
mu_stream_destroy	function
(	O
&	O
msg	pointer
->	O
outstream	pointer
)	O
;	O
status	int
=	O
mkoutstream	function
(	O
msg	pointer
)	O
;	O
}	O
return	O
mu_streamref_create	function
(	O
pstream	pointer
,	O
msg	pointer
->	O
outstream	pointer
)	O
;	O
}	O
int	O
mu_message_set_get_stream	function
(	O
mu_message_t	pointer
msg	pointer
,	O
int	O
(	O
*	O
_getstr	pointer
)	O
(	O
mu_message_t	pointer
,	O
mu_stream_t	pointer
*	O
)	O
,	O
void	O
*	O
owner	pointer
)	O
{	O
if	O
(	O
msg	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
msg	pointer
->	O
owner	pointer
!=	O
owner	pointer
)	O
return	O
EACCES	int
;	O
msg	pointer
->	O
_get_stream	pointer
=	O
_getstr	pointer
;	O
return	O
0	int
;	O
}	O
