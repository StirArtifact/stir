static	O
const	O
char	O
*	O
progname	pointer
;	O
static	O
void	O
print_usage	function
(	O
FILE	struct
*	O
out	pointer
)	O
{	O
fprintf	function
(	O
out	pointer
,	O
"Usage: %s [options] [--] COMMAND [...]\n"	pointer
,	O
progname	pointer
)	O
;	O
fprintf	function
(	O
out	pointer
,	O
"Write the full path of COMMAND(s) to standard output.\n\n"	pointer
)	O
;	O
fprintf	function
(	O
out	pointer
,	O
"  --version, -[vV] Print version and exit successfully.\n"	pointer
)	O
;	O
fprintf	function
(	O
out	pointer
,	O
"  --help,          Print this help and exit successfully.\n"	pointer
)	O
;	O
fprintf	function
(	O
out	pointer
,	O
"  --skip-dot       Skip directories in PATH that start with a dot.\n"	pointer
)	O
;	O
fprintf	function
(	O
out	pointer
,	O
"  --skip-tilde     Skip directories in PATH that start with a tilde.\n"	pointer
)	O
;	O
fprintf	function
(	O
out	pointer
,	O
"  --show-dot       Don't expand a dot to current directory in output.\n"	pointer
)	O
;	O
fprintf	function
(	O
out	pointer
,	O
"  --show-tilde     Output a tilde for HOME directory for non-root.\n"	pointer
)	O
;	O
fprintf	function
(	O
out	pointer
,	O
"  --tty-only       Stop processing options on the right if not on tty.\n"	pointer
)	O
;	O
fprintf	function
(	O
out	pointer
,	O
"  --all, -a        Print all matches in PATH, not just the first\n"	pointer
)	O
;	O
fprintf	function
(	O
out	pointer
,	O
"  --read-alias, -i Read list of aliases from stdin.\n"	pointer
)	O
;	O
fprintf	function
(	O
out	pointer
,	O
"  --skip-alias     Ignore option --read-alias; don't read stdin.\n"	pointer
)	O
;	O
fprintf	function
(	O
out	pointer
,	O
"  --read-functions Read shell functions from stdin.\n"	pointer
)	O
;	O
fprintf	function
(	O
out	pointer
,	O
"  --skip-functions Ignore option --read-functions; don't read stdin.\n\n"	pointer
)	O
;	O
fprintf	function
(	O
out	pointer
,	O
"Recommended use is to write the output of (alias; declare -f) to standard\n"	pointer
)	O
;	O
fprintf	function
(	O
out	pointer
,	O
"input, so that which can show aliases and shell functions. See which(1) for\n"	pointer
)	O
;	O
fprintf	function
(	O
out	pointer
,	O
"examples.\n\n"	pointer
)	O
;	O
fprintf	function
(	O
out	pointer
,	O
"If the options --read-alias and/or --read-functions are specified then the\n"	pointer
)	O
;	O
fprintf	function
(	O
out	pointer
,	O
"output can be a full alias or function definition, optionally followed by\n"	pointer
)	O
;	O
fprintf	function
(	O
out	pointer
,	O
"the full path of each command used inside of those.\n\n"	pointer
)	O
;	O
fprintf	function
(	O
out	pointer
,	O
"Report bugs to <which-bugs@gnu.org>.\n"	pointer
)	O
;	O
}	O
static	O
void	O
print_version	function
(	O
void	O
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"GNU which v"	pointer
VERSION	pointer
", Copyright (C) 1999 - 2015 Carlo Wood.\n"	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"GNU which comes with ABSOLUTELY NO WARRANTY;\n"	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"This program is free software; your freedom to use, change\n"	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"and distribute this program is protected by the GPL.\n"	pointer
)	O
;	O
}	O
static	O
void	O
print_fail	function
(	O
const	O
char	O
*	O
name	pointer
,	O
const	O
char	O
*	O
path_list	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: no %s in (%s)\n"	pointer
,	O
progname	pointer
,	O
name	pointer
,	O
path_list	pointer
)	O
;	O
}	O
static	O
char	O
home	array
[	O
256	int
]	O
;	O
static	O
size_t	long
homelen	long
=	O
0	int
;	O
static	O
int	O
absolute_path_given	int
;	O
static	O
int	O
found_path_starts_with_dot	int
;	O
static	O
char	O
*	O
abs_path	pointer
;	O
static	O
int	O
skip_dot	int
=	O
0	int
,	O
skip_tilde	int
=	O
0	int
,	O
skip_alias	int
=	O
0	int
,	O
read_alias	int
=	O
0	int
;	O
static	O
int	O
show_dot	int
=	O
0	int
,	O
show_tilde	int
=	O
0	int
,	O
show_all	int
=	O
0	int
,	O
tty_only	int
=	O
0	int
;	O
static	O
int	O
skip_functions	int
=	O
0	int
,	O
read_functions	int
=	O
0	int
;	O
static	O
char	O
*	O
find_command_in_path	function
(	O
const	O
char	O
*	O
name	pointer
,	O
const	O
char	O
*	O
path_list	pointer
,	O
int	O
*	O
path_index	pointer
)	O
{	O
char	O
*	O
found	pointer
=	O
NULL	O
,	O
*	O
full_path	pointer
;	O
int	O
status	int
,	O
name_len	int
;	O
name_len	int
=	O
strlen	function
(	O
name	pointer
)	O
;	O
if	O
(	O
!	O
absolute_program	function
(	O
name	pointer
)	O
)	O
absolute_path_given	int
=	O
0	int
;	O
else	O
{	O
char	O
*	O
p	pointer
;	O
absolute_path_given	int
=	O
1	int
;	O
if	O
(	O
abs_path	pointer
)	O
free	function
(	O
abs_path	pointer
)	O
;	O
if	O
(	O
*	O
name	pointer
!=	O
'.'	O
&&	O
*	O
name	pointer
!=	O
'/'	O
&&	O
*	O
name	pointer
!=	O
'~'	O
)	O
{	O
abs_path	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
3	int
+	O
name_len	int
)	O
;	O
strcpy	function
(	O
abs_path	pointer
,	O
"./"	pointer
)	O
;	O
strcat	function
(	O
abs_path	pointer
,	O
name	pointer
)	O
;	O
}	O
else	O
{	O
abs_path	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
1	int
+	O
name_len	int
)	O
;	O
strcpy	function
(	O
abs_path	pointer
,	O
name	pointer
)	O
;	O
}	O
path_list	pointer
=	O
abs_path	pointer
;	O
p	pointer
=	O
strrchr	function
(	O
abs_path	pointer
,	O
'/'	O
)	O
;	O
*	O
p	pointer
++	O
=	O
0	int
;	O
name	pointer
=	O
p	pointer
;	O
}	O
while	O
(	O
path_list	pointer
&&	O
path_list	pointer
[	O
*	O
path_index	pointer
]	O
)	O
{	O
char	O
*	O
path	pointer
;	O
if	O
(	O
absolute_path_given	int
)	O
{	O
path	pointer
=	O
savestring	O
(	O
path_list	pointer
)	O
;	O
*	O
path_index	pointer
=	O
strlen	function
(	O
path	pointer
)	O
;	O
}	O
else	O
path	pointer
=	O
get_next_path_element	function
(	O
path_list	pointer
,	O
path_index	pointer
)	O
;	O
if	O
(	O
!	O
path	pointer
)	O
break	O
;	O
if	O
(	O
*	O
path	pointer
==	O
'~'	O
)	O
{	O
char	O
*	O
t	pointer
=	O
tilde_expand	function
(	O
path	pointer
)	O
;	O
free	function
(	O
path	pointer
)	O
;	O
path	pointer
=	O
t	pointer
;	O
if	O
(	O
skip_tilde	int
)	O
{	O
free	function
(	O
path	pointer
)	O
;	O
continue	O
;	O
}	O
}	O
if	O
(	O
skip_dot	int
&&	O
*	O
path	pointer
!=	O
'/'	O
)	O
{	O
free	function
(	O
path	pointer
)	O
;	O
continue	O
;	O
}	O
found_path_starts_with_dot	int
=	O
(	O
*	O
path	pointer
==	O
'.'	O
)	O
;	O
full_path	pointer
=	O
make_full_pathname	function
(	O
path	pointer
,	O
name	pointer
,	O
name_len	int
)	O
;	O
free	function
(	O
path	pointer
)	O
;	O
status	int
=	O
file_status	function
(	O
full_path	pointer
)	O
;	O
if	O
(	O
(	O
status	int
&	O
FS_EXISTS	int
)	O
&&	O
(	O
status	int
&	O
FS_EXECABLE	int
)	O
)	O
{	O
found	pointer
=	O
full_path	pointer
;	O
break	O
;	O
}	O
free	function
(	O
full_path	pointer
)	O
;	O
}	O
return	O
(	O
found	pointer
)	O
;	O
}	O
static	O
char	O
cwd	array
[	O
256	int
]	O
;	O
static	O
size_t	long
cwdlen	long
;	O
static	O
void	O
get_current_working_directory	function
(	O
void	O
)	O
{	O
if	O
(	O
cwdlen	long
)	O
return	O
;	O
if	O
(	O
!	O
getcwd	function
(	O
cwd	array
,	O
sizeof	O
(	O
cwd	array
)	O
)	O
)	O
{	O
const	O
char	O
*	O
pwd	pointer
=	O
getenv	function
(	O
"PWD"	pointer
)	O
;	O
if	O
(	O
pwd	pointer
&&	O
strlen	function
(	O
pwd	pointer
)	O
<	O
sizeof	O
(	O
cwd	array
)	O
)	O
strcpy	function
(	O
cwd	array
,	O
pwd	pointer
)	O
;	O
}	O
if	O
(	O
*	O
cwd	array
!=	O
'/'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Can't get current working directory\n"	pointer
)	O
;	O
exit	function
(	O
-	O
1	int
)	O
;	O
}	O
cwdlen	long
=	O
strlen	function
(	O
cwd	array
)	O
;	O
if	O
(	O
cwd	array
[	O
cwdlen	long
-	O
1	int
]	O
!=	O
'/'	O
)	O
{	O
cwd	array
[	O
cwdlen	long
++	O
]	O
=	O
'/'	O
;	O
cwd	array
[	O
cwdlen	long
]	O
=	O
0	int
;	O
}	O
}	O
static	O
char	O
*	O
path_clean_up	function
(	O
const	O
char	O
*	O
path	pointer
)	O
{	O
static	O
char	O
result	array
[	O
256	int
]	O
;	O
const	O
char	O
*	O
p1	pointer
=	O
path	pointer
;	O
char	O
*	O
p2	pointer
=	O
result	array
;	O
int	O
saw_slash	int
=	O
0	int
,	O
saw_slash_dot	int
=	O
0	int
,	O
saw_slash_dot_dot	int
=	O
0	int
;	O
if	O
(	O
*	O
p1	pointer
!=	O
'/'	O
)	O
{	O
get_current_working_directory	function
(	O
)	O
;	O
strcpy	function
(	O
result	array
,	O
cwd	array
)	O
;	O
saw_slash	int
=	O
1	int
;	O
p2	pointer
=	O
&	O
result	array
[	O
cwdlen	long
]	O
;	O
}	O
do	O
{	O
if	O
(	O
!	O
saw_slash	int
||	O
*	O
p1	pointer
!=	O
'/'	O
||	O
(	O
p1	pointer
==	O
path	pointer
+	O
1	int
&&	O
p1	pointer
[	O
1	int
]	O
!=	O
'/'	O
)	O
)	O
*	O
p2	pointer
++	O
=	O
*	O
p1	pointer
;	O
if	O
(	O
saw_slash_dot	int
&&	O
(	O
*	O
p1	pointer
==	O
'/'	O
)	O
)	O
p2	pointer
-=	O
2	int
;	O
if	O
(	O
saw_slash_dot_dot	int
&&	O
(	O
*	O
p1	pointer
==	O
'/'	O
)	O
)	O
{	O
int	O
cnt	int
=	O
0	int
;	O
do	O
{	O
if	O
(	O
--	O
p2	pointer
<	O
result	array
)	O
{	O
strcpy	function
(	O
result	array
,	O
path	pointer
)	O
;	O
return	O
result	array
;	O
}	O
if	O
(	O
*	O
p2	pointer
==	O
'/'	O
)	O
++	O
cnt	int
;	O
}	O
while	O
(	O
cnt	int
!=	O
3	int
)	O
;	O
++	O
p2	pointer
;	O
}	O
saw_slash_dot_dot	int
=	O
saw_slash_dot	int
&&	O
(	O
*	O
p1	pointer
==	O
'.'	O
)	O
;	O
saw_slash_dot	int
=	O
saw_slash	int
&&	O
(	O
*	O
p1	pointer
==	O
'.'	O
)	O
;	O
saw_slash	int
=	O
(	O
*	O
p1	pointer
==	O
'/'	O
)	O
;	O
}	O
while	O
(	O
*	O
p1	pointer
++	O
)	O
;	O
return	O
result	array
;	O
}	O
struct	O
function_st	struct
{	O
char	O
*	O
name	pointer
;	O
size_t	long
len	long
;	O
char	O
*	O
*	O
lines	pointer
;	O
int	O
line_count	int
;	O
}	O
;	O
static	O
struct	O
function_st	struct
*	O
functions	pointer
;	O
static	O
int	O
func_count	int
;	O
static	O
int	O
max_func_count	int
;	O
static	O
char	O
*	O
*	O
aliases	pointer
;	O
static	O
int	O
alias_count	int
;	O
static	O
int	O
max_alias_count	int
;	O
int	O
func_search	function
(	O
int	O
indent	int
,	O
const	O
char	O
*	O
cmd	pointer
,	O
struct	O
function_st	struct
*	O
func_list	pointer
,	O
int	O
function_start_type	int
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
func_count	int
;	O
++	O
i	int
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
functions	pointer
[	O
i	int
]	O
.	O
name	pointer
,	O
cmd	pointer
)	O
)	O
{	O
int	O
j	int
;	O
if	O
(	O
indent	int
)	O
fputc	function
(	O
'\t'	O
,	O
stdout	pointer
)	O
;	O
if	O
(	O
function_start_type	int
==	O
1	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"%s () {\n"	pointer
,	O
cmd	pointer
)	O
;	O
else	O
fprintf	function
(	O
stdout	pointer
,	O
"%s ()\n"	pointer
,	O
cmd	pointer
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
functions	pointer
[	O
i	int
]	O
.	O
line_count	int
;	O
++	O
j	int
)	O
{	O
if	O
(	O
indent	int
)	O
fputc	function
(	O
'\t'	O
,	O
stdout	pointer
)	O
;	O
fputs	function
(	O
functions	pointer
[	O
i	int
]	O
.	O
lines	pointer
[	O
j	int
]	O
,	O
stdout	pointer
)	O
;	O
}	O
return	O
1	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
path_search	function
(	O
int	O
indent	int
,	O
const	O
char	O
*	O
cmd	pointer
,	O
const	O
char	O
*	O
path_list	pointer
)	O
{	O
char	O
*	O
result	array
=	O
NULL	O
;	O
int	O
found_something	int
=	O
0	int
;	O
if	O
(	O
path_list	pointer
&&	O
*	O
path_list	pointer
!=	O
'\0'	O
)	O
{	O
int	O
next	int
;	O
int	O
path_index	pointer
=	O
0	int
;	O
do	O
{	O
next	int
=	O
show_all	int
;	O
result	array
=	O
find_command_in_path	function
(	O
cmd	pointer
,	O
path_list	pointer
,	O
&	O
path_index	pointer
)	O
;	O
if	O
(	O
result	array
)	O
{	O
const	O
char	O
*	O
full_path	pointer
=	O
path_clean_up	function
(	O
result	array
)	O
;	O
int	O
in_home	int
=	O
(	O
show_tilde	int
||	O
skip_tilde	int
)	O
&&	O
!	O
strncmp	function
(	O
full_path	pointer
,	O
home	array
,	O
homelen	long
)	O
;	O
if	O
(	O
indent	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"\t"	pointer
)	O
;	O
if	O
(	O
!	O
(	O
skip_tilde	int
&&	O
in_home	int
)	O
&&	O
show_dot	int
&&	O
found_path_starts_with_dot	int
&&	O
!	O
strncmp	function
(	O
full_path	pointer
,	O
cwd	array
,	O
cwdlen	long
)	O
)	O
{	O
full_path	pointer
+=	O
cwdlen	long
;	O
fprintf	function
(	O
stdout	pointer
,	O
"./"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
in_home	int
)	O
{	O
if	O
(	O
skip_tilde	int
)	O
{	O
next	int
=	O
1	int
;	O
free	function
(	O
result	array
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
show_tilde	int
)	O
{	O
full_path	pointer
+=	O
homelen	long
;	O
fprintf	function
(	O
stdout	pointer
,	O
"~/"	pointer
)	O
;	O
}	O
}	O
fprintf	function
(	O
stdout	pointer
,	O
"%s\n"	pointer
,	O
full_path	pointer
)	O
;	O
free	function
(	O
result	array
)	O
;	O
found_something	int
=	O
1	int
;	O
}	O
else	O
break	O
;	O
}	O
while	O
(	O
next	int
)	O
;	O
}	O
return	O
found_something	int
;	O
}	O
void	O
process_alias	function
(	O
const	O
char	O
*	O
str	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	pointer
[	O
]	O
,	O
const	O
char	O
*	O
path_list	pointer
,	O
int	O
function_start_type	int
)	O
{	O
const	O
char	O
*	O
p	pointer
=	O
str	pointer
;	O
int	O
len	long
=	O
0	int
;	O
while	O
(	O
*	O
p	pointer
==	O
' '	O
||	O
*	O
p	pointer
==	O
'\t'	O
)	O
++	O
p	pointer
;	O
if	O
(	O
!	O
strncmp	function
(	O
"alias"	pointer
,	O
p	pointer
,	O
5	int
)	O
)	O
p	pointer
+=	O
5	int
;	O
while	O
(	O
*	O
p	pointer
==	O
' '	O
||	O
*	O
p	pointer
==	O
'\t'	O
)	O
++	O
p	pointer
;	O
while	O
(	O
*	O
p	pointer
&&	O
*	O
p	pointer
!=	O
' '	O
&&	O
*	O
p	pointer
!=	O
'\t'	O
&&	O
*	O
p	pointer
!=	O
'='	O
)	O
++	O
p	pointer
,	O
++	O
len	long
;	O
for	O
(	O
;	O
argc	int
>	O
0	int
;	O
--	O
argc	int
,	O
++	O
argv	pointer
)	O
{	O
char	O
q	char
=	O
0	int
;	O
char	O
*	O
cmd	pointer
;	O
if	O
(	O
!	O
*	O
argv	pointer
||	O
len	long
!=	O
strlen	function
(	O
*	O
argv	pointer
)	O
||	O
strncmp	function
(	O
*	O
argv	pointer
,	O
&	O
p	pointer
[	O
-	O
len	long
]	O
,	O
len	long
)	O
)	O
continue	O
;	O
fputs	function
(	O
str	pointer
,	O
stdout	pointer
)	O
;	O
if	O
(	O
!	O
show_all	int
)	O
*	O
argv	pointer
=	O
NULL	O
;	O
while	O
(	O
*	O
p	pointer
==	O
' '	O
||	O
*	O
p	pointer
==	O
'\t'	O
)	O
++	O
p	pointer
;	O
if	O
(	O
*	O
p	pointer
==	O
'='	O
)	O
++	O
p	pointer
;	O
while	O
(	O
*	O
p	pointer
==	O
' '	O
||	O
*	O
p	pointer
==	O
'\t'	O
)	O
++	O
p	pointer
;	O
if	O
(	O
*	O
p	pointer
==	O
'"'	O
||	O
*	O
p	pointer
==	O
'\''	O
)	O
q	char
=	O
*	O
p	pointer
,	O
++	O
p	pointer
;	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
found	pointer
=	O
0	int
;	O
while	O
(	O
*	O
p	pointer
==	O
' '	O
||	O
*	O
p	pointer
==	O
'\t'	O
)	O
++	O
p	pointer
;	O
len	long
=	O
0	int
;	O
while	O
(	O
*	O
p	pointer
&&	O
*	O
p	pointer
!=	O
' '	O
&&	O
*	O
p	pointer
!=	O
'\t'	O
&&	O
*	O
p	pointer
!=	O
q	char
&&	O
*	O
p	pointer
!=	O
'|'	O
&&	O
*	O
p	pointer
!=	O
'&'	O
)	O
++	O
p	pointer
,	O
++	O
len	long
;	O
cmd	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
len	long
+	O
1	int
)	O
;	O
strncpy	function
(	O
cmd	pointer
,	O
&	O
p	pointer
[	O
-	O
len	long
]	O
,	O
len	long
)	O
;	O
cmd	pointer
[	O
len	long
]	O
=	O
0	int
;	O
if	O
(	O
*	O
argv	pointer
&&	O
!	O
strcmp	function
(	O
cmd	pointer
,	O
*	O
argv	pointer
)	O
)	O
*	O
argv	pointer
=	O
NULL	O
;	O
if	O
(	O
read_functions	int
&&	O
!	O
strchr	function
(	O
cmd	pointer
,	O
'/'	O
)	O
)	O
found	pointer
=	O
func_search	function
(	O
1	int
,	O
cmd	pointer
,	O
functions	pointer
,	O
function_start_type	int
)	O
;	O
if	O
(	O
show_all	int
||	O
!	O
found	pointer
)	O
path_search	function
(	O
1	int
,	O
cmd	pointer
,	O
path_list	pointer
)	O
;	O
free	function
(	O
cmd	pointer
)	O
;	O
while	O
(	O
*	O
p	pointer
&&	O
(	O
*	O
p	pointer
!=	O
'|'	O
||	O
p	pointer
[	O
1	int
]	O
==	O
'|'	O
)	O
&&	O
(	O
*	O
p	pointer
!=	O
'&'	O
||	O
p	pointer
[	O
1	int
]	O
==	O
'&'	O
)	O
)	O
++	O
p	pointer
;	O
if	O
(	O
!	O
*	O
p	pointer
)	O
break	O
;	O
++	O
p	pointer
;	O
}	O
break	O
;	O
}	O
}	O
enum	O
opts	enum
{	O
opt_version	int
,	O
opt_skip_dot	int
,	O
opt_skip_tilde	int
,	O
opt_skip_alias	int
,	O
opt_read_functions	int
,	O
opt_skip_functions	int
,	O
opt_show_dot	int
,	O
opt_show_tilde	int
,	O
opt_tty_only	int
,	O
opt_help	int
}	O
;	O
static	O
uid_t	int
const	O
superuser	int
=	O
0	int
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	pointer
[	O
]	O
)	O
{	O
const	O
char	O
*	O
path_list	pointer
=	O
getenv	function
(	O
"PATH"	pointer
)	O
;	O
int	O
short_option	int
,	O
fail_count	int
=	O
0	int
;	O
static	O
int	O
long_option	int
;	O
struct	O
option	struct
longopts	pointer
[	O
]	O
=	O
{	O
{	O
"help"	pointer
,	O
0	int
,	O
&	O
long_option	int
,	O
opt_help	int
}	O
,	O
{	O
"version"	pointer
,	O
0	int
,	O
&	O
long_option	int
,	O
opt_version	int
}	O
,	O
{	O
"skip-dot"	pointer
,	O
0	int
,	O
&	O
long_option	int
,	O
opt_skip_dot	int
}	O
,	O
{	O
"skip-tilde"	pointer
,	O
0	int
,	O
&	O
long_option	int
,	O
opt_skip_tilde	int
}	O
,	O
{	O
"show-dot"	pointer
,	O
0	int
,	O
&	O
long_option	int
,	O
opt_show_dot	int
}	O
,	O
{	O
"show-tilde"	pointer
,	O
0	int
,	O
&	O
long_option	int
,	O
opt_show_tilde	int
}	O
,	O
{	O
"tty-only"	pointer
,	O
0	int
,	O
&	O
long_option	int
,	O
opt_tty_only	int
}	O
,	O
{	O
"all"	pointer
,	O
0	int
,	O
NULL	O
,	O
'a'	O
}	O
,	O
{	O
"read-alias"	pointer
,	O
0	int
,	O
NULL	O
,	O
'i'	O
}	O
,	O
{	O
"skip-alias"	pointer
,	O
0	int
,	O
&	O
long_option	int
,	O
opt_skip_alias	int
}	O
,	O
{	O
"read-functions"	pointer
,	O
0	int
,	O
&	O
long_option	int
,	O
opt_read_functions	int
}	O
,	O
{	O
"skip-functions"	pointer
,	O
0	int
,	O
&	O
long_option	int
,	O
opt_skip_functions	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
progname	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
while	O
(	O
(	O
short_option	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"aivV"	pointer
,	O
longopts	pointer
,	O
NULL	O
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
switch	O
(	O
short_option	int
)	O
{	O
case	O
0	int
:	O
switch	O
(	O
long_option	int
)	O
{	O
case	O
opt_help	int
:	O
print_usage	function
(	O
stdout	pointer
)	O
;	O
return	O
0	int
;	O
case	O
opt_version	int
:	O
print_version	function
(	O
)	O
;	O
return	O
0	int
;	O
case	O
opt_skip_dot	int
:	O
skip_dot	int
=	O
!	O
tty_only	int
;	O
break	O
;	O
case	O
opt_skip_tilde	int
:	O
skip_tilde	int
=	O
!	O
tty_only	int
;	O
break	O
;	O
case	O
opt_skip_alias	int
:	O
skip_alias	int
=	O
1	int
;	O
break	O
;	O
case	O
opt_show_dot	int
:	O
show_dot	int
=	O
!	O
tty_only	int
;	O
break	O
;	O
case	O
opt_show_tilde	int
:	O
show_tilde	int
=	O
(	O
!	O
tty_only	int
&&	O
geteuid	function
(	O
)	O
!=	O
superuser	int
)	O
;	O
break	O
;	O
case	O
opt_tty_only	int
:	O
tty_only	int
=	O
!	O
isatty	function
(	O
1	int
)	O
;	O
break	O
;	O
case	O
opt_read_functions	int
:	O
read_functions	int
=	O
1	int
;	O
break	O
;	O
case	O
opt_skip_functions	int
:	O
skip_functions	int
=	O
1	int
;	O
break	O
;	O
}	O
break	O
;	O
case	O
'a'	O
:	O
show_all	int
=	O
1	int
;	O
break	O
;	O
case	O
'i'	O
:	O
read_alias	int
=	O
1	int
;	O
break	O
;	O
case	O
'v'	O
:	O
case	O
'V'	O
:	O
print_version	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
}	O
uidget	function
(	O
)	O
;	O
if	O
(	O
show_dot	int
)	O
get_current_working_directory	function
(	O
)	O
;	O
if	O
(	O
show_tilde	int
||	O
skip_tilde	int
)	O
{	O
const	O
char	O
*	O
h	pointer
;	O
if	O
(	O
!	O
(	O
h	pointer
=	O
getenv	function
(	O
"HOME"	pointer
)	O
)	O
)	O
h	pointer
=	O
sh_get_home_dir	function
(	O
)	O
;	O
strncpy	function
(	O
home	array
,	O
h	pointer
,	O
sizeof	O
(	O
home	array
)	O
)	O
;	O
home	array
[	O
sizeof	O
(	O
home	array
)	O
-	O
1	int
]	O
=	O
0	int
;	O
homelen	long
=	O
strlen	function
(	O
home	array
)	O
;	O
if	O
(	O
home	array
[	O
homelen	long
-	O
1	int
]	O
!=	O
'/'	O
&&	O
homelen	long
<	O
sizeof	O
(	O
home	array
)	O
-	O
1	int
)	O
{	O
strcat	function
(	O
home	array
,	O
"/"	pointer
)	O
;	O
++	O
homelen	long
;	O
}	O
}	O
if	O
(	O
skip_alias	int
)	O
read_alias	int
=	O
0	int
;	O
if	O
(	O
skip_functions	int
)	O
read_functions	int
=	O
0	int
;	O
argv	pointer
+=	O
optind	int
;	O
argc	int
-=	O
optind	int
;	O
if	O
(	O
argc	int
==	O
0	int
)	O
{	O
print_usage	function
(	O
stderr	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
int	O
function_start_type	int
=	O
0	int
;	O
if	O
(	O
read_alias	int
||	O
read_functions	int
)	O
{	O
char	O
buf	array
[	O
1024	int
]	O
;	O
int	O
processing_aliases	int
=	O
read_alias	int
;	O
if	O
(	O
isatty	function
(	O
0	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s: Warning: stdin is a tty.\n"	pointer
,	O
progname	pointer
,	O
(	O
read_functions	int
?	O
read_alias	int
?	O
"--read-functions, --read-alias, -i"	pointer
:	O
"--read-functions"	pointer
:	O
"--read-alias, -i"	pointer
)	O
)	O
;	O
}	O
while	O
(	O
fgets	function
(	O
buf	array
,	O
sizeof	O
(	O
buf	array
)	O
,	O
stdin	pointer
)	O
)	O
{	O
int	O
looks_like_function_start	int
=	O
0	int
;	O
int	O
function_start_has_declare	int
;	O
if	O
(	O
read_functions	int
)	O
{	O
char	O
*	O
p	pointer
=	O
buf	array
+	O
strlen	function
(	O
buf	array
)	O
-	O
1	int
;	O
while	O
(	O
isspace	function
(	O
*	O
p	pointer
)	O
&&	O
p	pointer
>	O
buf	array
+	O
2	int
)	O
--	O
p	pointer
;	O
if	O
(	O
*	O
p	pointer
==	O
')'	O
&&	O
p	pointer
[	O
-	O
1	int
]	O
==	O
'('	O
&&	O
p	pointer
[	O
-	O
2	int
]	O
==	O
' '	O
)	O
{	O
looks_like_function_start	int
=	O
1	int
;	O
function_start_has_declare	int
=	O
(	O
strncmp	function
(	O
"declare -"	pointer
,	O
buf	array
,	O
9	int
)	O
==	O
0	int
)	O
;	O
}	O
if	O
(	O
p	pointer
>	O
buf	array
+	O
4	int
&&	O
*	O
p	pointer
==	O
'{'	O
&&	O
p	pointer
[	O
-	O
1	int
]	O
==	O
' '	O
&&	O
p	pointer
[	O
-	O
2	int
]	O
==	O
')'	O
&&	O
p	pointer
[	O
-	O
3	int
]	O
==	O
'('	O
&&	O
p	pointer
[	O
-	O
4	int
]	O
==	O
' '	O
)	O
{	O
looks_like_function_start	int
=	O
1	int
;	O
function_start_type	int
=	O
1	int
;	O
function_start_has_declare	int
=	O
0	int
;	O
}	O
}	O
if	O
(	O
processing_aliases	int
&&	O
!	O
looks_like_function_start	int
)	O
{	O
if	O
(	O
!	O
strncmp	function
(	O
"declare -"	pointer
,	O
buf	array
,	O
9	int
)	O
)	O
continue	O
;	O
if	O
(	O
alias_count	int
==	O
max_alias_count	int
)	O
{	O
max_alias_count	int
+=	O
32	int
;	O
aliases	pointer
=	O
(	O
char	O
*	O
*	O
)	O
xrealloc	function
(	O
aliases	pointer
,	O
max_alias_count	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
}	O
aliases	pointer
[	O
alias_count	int
++	O
]	O
=	O
strcpy	function
(	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
strlen	function
(	O
buf	array
)	O
+	O
1	int
)	O
,	O
buf	array
)	O
;	O
}	O
else	O
if	O
(	O
read_functions	int
&&	O
looks_like_function_start	int
)	O
{	O
struct	O
function_st	struct
*	O
function	pointer
;	O
int	O
max_line_count	int
;	O
const	O
char	O
*	O
p	pointer
=	O
buf	array
;	O
int	O
len	long
=	O
0	int
;	O
processing_aliases	int
=	O
0	int
;	O
if	O
(	O
function_start_has_declare	int
)	O
{	O
p	pointer
+=	O
9	int
;	O
while	O
(	O
*	O
p	pointer
&&	O
*	O
p	pointer
++	O
!=	O
' '	O
)	O
;	O
}	O
while	O
(	O
*	O
p	pointer
&&	O
*	O
p	pointer
!=	O
' '	O
)	O
++	O
p	pointer
,	O
++	O
len	long
;	O
if	O
(	O
func_count	int
==	O
max_func_count	int
)	O
{	O
max_func_count	int
+=	O
16	int
;	O
functions	pointer
=	O
(	O
struct	O
function_st	struct
*	O
)	O
xrealloc	function
(	O
functions	pointer
,	O
max_func_count	int
*	O
sizeof	O
(	O
struct	O
function_st	struct
)	O
)	O
;	O
}	O
function	pointer
=	O
&	O
functions	pointer
[	O
func_count	int
++	O
]	O
;	O
function	pointer
->	O
name	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
len	long
+	O
1	int
)	O
;	O
strncpy	function
(	O
function	pointer
->	O
name	pointer
,	O
&	O
p	pointer
[	O
-	O
len	long
]	O
,	O
len	long
)	O
;	O
function	pointer
->	O
name	pointer
[	O
len	long
]	O
=	O
0	int
;	O
function	pointer
->	O
len	long
=	O
len	long
;	O
max_line_count	int
=	O
32	int
;	O
function	pointer
->	O
lines	pointer
=	O
(	O
char	O
*	O
*	O
)	O
xmalloc	function
(	O
max_line_count	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
function	pointer
->	O
line_count	int
=	O
0	int
;	O
while	O
(	O
fgets	function
(	O
buf	array
,	O
sizeof	O
(	O
buf	array
)	O
,	O
stdin	pointer
)	O
)	O
{	O
size_t	long
blen	long
=	O
strlen	function
(	O
buf	array
)	O
;	O
function	pointer
->	O
lines	pointer
[	O
function	pointer
->	O
line_count	int
++	O
]	O
=	O
strcpy	function
(	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
blen	long
+	O
1	int
)	O
,	O
buf	array
)	O
;	O
if	O
(	O
!	O
strcmp	function
(	O
buf	array
,	O
"}\n"	pointer
)	O
)	O
break	O
;	O
if	O
(	O
function	pointer
->	O
line_count	int
==	O
max_line_count	int
)	O
{	O
max_line_count	int
+=	O
32	int
;	O
function	pointer
->	O
lines	pointer
=	O
(	O
char	O
*	O
*	O
)	O
xrealloc	function
(	O
function	pointer
->	O
lines	pointer
,	O
max_line_count	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
read_alias	int
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
alias_count	int
;	O
++	O
i	int
)	O
process_alias	function
(	O
aliases	pointer
[	O
i	int
]	O
,	O
argc	int
,	O
argv	pointer
,	O
path_list	pointer
,	O
function_start_type	int
)	O
;	O
}	O
}	O
for	O
(	O
;	O
argc	int
>	O
0	int
;	O
--	O
argc	int
,	O
++	O
argv	pointer
)	O
{	O
int	O
found_something	int
=	O
0	int
;	O
if	O
(	O
!	O
*	O
argv	pointer
)	O
continue	O
;	O
if	O
(	O
read_functions	int
&&	O
!	O
strchr	function
(	O
*	O
argv	pointer
,	O
'/'	O
)	O
)	O
found_something	int
=	O
func_search	function
(	O
0	int
,	O
*	O
argv	pointer
,	O
functions	pointer
,	O
function_start_type	int
)	O
;	O
if	O
(	O
(	O
show_all	int
||	O
!	O
found_something	int
)	O
&&	O
!	O
path_search	function
(	O
0	int
,	O
*	O
argv	pointer
,	O
path_list	pointer
)	O
&&	O
!	O
found_something	int
)	O
{	O
print_fail	function
(	O
absolute_path_given	int
?	O
strrchr	function
(	O
*	O
argv	pointer
,	O
'/'	O
)	O
+	O
1	int
:	O
*	O
argv	pointer
,	O
absolute_path_given	int
?	O
abs_path	pointer
:	O
path_list	pointer
)	O
;	O
++	O
fail_count	int
;	O
}	O
}	O
return	O
fail_count	int
;	O
}	O
void	O
*	O
xmalloc	function
(	O
size_t	long
size	long
)	O
{	O
void	O
*	O
ptr	pointer
=	O
malloc	function
(	O
size	long
)	O
;	O
if	O
(	O
ptr	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: Out of memory"	pointer
,	O
progname	pointer
)	O
;	O
exit	function
(	O
-	O
1	int
)	O
;	O
}	O
return	O
ptr	pointer
;	O
}	O
void	O
*	O
xrealloc	function
(	O
void	O
*	O
ptr	pointer
,	O
size_t	long
size	long
)	O
{	O
if	O
(	O
!	O
ptr	pointer
)	O
return	O
xmalloc	function
(	O
size	long
)	O
;	O
ptr	pointer
=	O
realloc	function
(	O
ptr	pointer
,	O
size	long
)	O
;	O
if	O
(	O
size	long
>	O
0	int
&&	O
ptr	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: Out of memory\n"	pointer
,	O
progname	pointer
)	O
;	O
exit	function
(	O
-	O
1	int
)	O
;	O
}	O
return	O
ptr	pointer
;	O
}	O
