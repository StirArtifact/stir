static	O
volatile	O
int	O
_interrupted	int
;	O
static	O
int	O
_interactive	int
;	O
static	O
void	O
grad_clear_interrupt	function
(	O
)	O
{	O
_interrupted	int
=	O
0	int
;	O
}	O
static	O
int	O
grad_got_interrupt	function
(	O
)	O
{	O
int	O
rc	int
=	O
_interrupted	int
;	O
_interrupted	int
=	O
0	int
;	O
return	O
rc	int
;	O
}	O
static	O
char	O
*	O
grad_readline_internal	function
(	O
FILE	struct
*	O
input	pointer
)	O
{	O
char	O
*	O
line	long
;	O
char	O
*	O
p	pointer
;	O
size_t	long
alloclen	long
,	O
linelen	long
;	O
if	O
(	O
!	O
input	pointer
)	O
input	pointer
=	O
stdin	pointer
;	O
p	pointer
=	O
line	long
=	O
calloc	function
(	O
1	int
,	O
255	int
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"Not enough memory\n"	pointer
)	O
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
alloclen	long
=	O
255	int
;	O
linelen	long
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
size_t	long
n	long
;	O
p	pointer
=	O
fgets	function
(	O
p	pointer
,	O
alloclen	long
-	O
linelen	long
,	O
input	pointer
)	O
;	O
if	O
(	O
p	pointer
)	O
n	long
=	O
strlen	function
(	O
p	pointer
)	O
;	O
else	O
if	O
(	O
_interrupted	int
)	O
{	O
free	function
(	O
line	long
)	O
;	O
return	O
NULL	O
;	O
}	O
else	O
n	long
=	O
0	int
;	O
linelen	long
+=	O
n	long
;	O
if	O
(	O
linelen	long
==	O
0	int
)	O
{	O
free	function
(	O
line	long
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
line	long
[	O
linelen	long
-	O
1	int
]	O
==	O
'\n'	O
)	O
{	O
line	long
[	O
linelen	long
-	O
1	int
]	O
=	O
'\0'	O
;	O
return	O
line	long
;	O
}	O
else	O
{	O
char	O
*	O
tmp	pointer
;	O
alloclen	long
*=	O
2	int
;	O
tmp	pointer
=	O
realloc	function
(	O
line	long
,	O
alloclen	long
)	O
;	O
if	O
(	O
tmp	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
line	long
)	O
;	O
return	O
NULL	O
;	O
}	O
line	long
=	O
tmp	pointer
;	O
p	pointer
=	O
line	long
+	O
linelen	long
;	O
}	O
}	O
}	O
static	O
FILE	struct
*	O
rl_instream	pointer
;	O
static	O
char	O
*	O
readline	function
(	O
char	O
*	O
prompt	pointer
)	O
{	O
if	O
(	O
prompt	pointer
)	O
{	O
printf	function
(	O
"%s"	pointer
,	O
prompt	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
}	O
return	O
grad_readline_internal	function
(	O
rl_instream	pointer
)	O
;	O
}	O
static	O
int	O
grad_getc	function
(	O
FILE	struct
*	O
stream	pointer
)	O
{	O
unsigned	O
char	O
c	pointer
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
read	pointer
(	O
fileno	function
(	O
stream	pointer
)	O
,	O
&	O
c	pointer
,	O
1	int
)	O
==	O
1	int
)	O
return	O
c	pointer
;	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
{	O
if	O
(	O
_interrupted	int
)	O
break	O
;	O
}	O
else	O
break	O
;	O
}	O
return	O
EOF	O
;	O
}	O
void	O
grad_readline_init	function
(	O
char	O
*	O
name	pointer
,	O
int	O
interactive	int
,	O
char	O
*	O
*	O
(	O
*	O
completion_fp	pointer
)	O
(	O
char	O
*	O
cmd	pointer
,	O
int	O
start	pointer
,	O
int	O
end	pointer
)	O
)	O
{	O
_interactive	int
=	O
interactive	int
;	O
if	O
(	O
!	O
interactive	int
)	O
return	O
;	O
}	O
void	O
grad_readline_set_input	function
(	O
FILE	struct
*	O
fp	pointer
)	O
{	O
rl_instream	pointer
=	O
fp	pointer
;	O
}	O
char	O
*	O
grad_readline	function
(	O
char	O
*	O
prompt	pointer
)	O
{	O
if	O
(	O
_interactive	int
)	O
return	O
readline	function
(	O
prompt	pointer
)	O
;	O
return	O
grad_readline_internal	function
(	O
rl_instream	pointer
)	O
;	O
}	O
void	O
grad_add_history	function
(	O
char	O
*	O
line	long
)	O
{	O
}	O
int	O
grad_read_history_file	function
(	O
)	O
{	O
}	O
int	O
grad_write_history_file	function
(	O
)	O
{	O
}	O
