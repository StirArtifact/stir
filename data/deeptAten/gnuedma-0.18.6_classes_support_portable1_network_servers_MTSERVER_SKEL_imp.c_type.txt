typedef	O
struct	O
{	O
EUint32	long
Port	long
;	O
EUint32	long
BackLog	long
;	O
OBJID	int
Channel	int
;	O
ESint32	int
MaxClients	int
;	O
EDMAT_BUFFER	struct
Data	struct
;	O
ESint32	int
n	int
;	O
pthread_mutex_t	union
*	O
smutex	pointer
;	O
}	O
DtMTSERVER_SKEL	struct
;	O
typedef	O
struct	O
{	O
pthread_t	long
tid	long
;	O
OBJID	int
server	int
;	O
OBJID	int
id	int
;	O
time_t	long
tstart	long
;	O
time_t	long
tend	long
;	O
}	O
CLIENT	struct
;	O
void	O
*	O
service	function
(	O
void	O
*	O
)	O
;	O
ESint32	int
EDMAPROC	O
MTSERVER_SKELinitZS32rS32	function
(	O
OBJID	int
IdObj	int
,	O
EPChar	pointer
res	pointer
,	O
ESint32	int
n	int
)	O
{	O
DtMTSERVER_SKEL	struct
*	O
m	pointer
;	O
ESint32	int
i	int
,	O
r	int
;	O
CLIENT	struct
*	O
ci	pointer
;	O
m	pointer
=	O
(	O
DtMTSERVER_SKEL	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
if	O
(	O
(	O
m	pointer
->	O
Channel	int
=	O
edma_new_obj	function
(	O
"CHANNEL"	pointer
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"%s"	pointer
,	O
"[ERROR] Can't create 'CHANNEL' object"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
r	int
=	O
(	O
ESint32	int
)	O
edma_met3	function
(	O
m	pointer
->	O
Channel	int
,	O
"open"	pointer
,	O
res	pointer
)	O
;	O
if	O
(	O
r	int
==	O
-	O
1	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"%s"	pointer
,	O
"[ERROR] Can't open '%s'"	pointer
,	O
res	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"[INFO] Initializing %d client data structs"	pointer
,	O
n	int
)	O
;	O
m	pointer
->	O
MaxClients	int
=	O
n	int
;	O
if	O
(	O
(	O
edma_buffer_alloc	function
(	O
&	O
m	pointer
->	O
Data	struct
,	O
sizeof	O
(	O
CLIENT	struct
)	O
*	O
n	int
)	O
)	O
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"%s"	pointer
,	O
"[ERROR] Can't allocate mt client table"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
ci	pointer
=	O
(	O
CLIENT	struct
*	O
)	O
m	pointer
->	O
Data	struct
.	O
dat	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
ci	pointer
[	O
i	int
]	O
.	O
id	int
=	O
-	O
1	int
;	O
m	pointer
->	O
n	int
=	O
0	int
;	O
m	pointer
->	O
smutex	pointer
=	O
(	O
pthread_mutex_t	union
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
pthread_mutex_t	union
)	O
)	O
;	O
if	O
(	O
m	pointer
->	O
smutex	pointer
==	O
NULL	O
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"%s"	pointer
,	O
"[ERROR] Can't allocate mutex"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
pthread_mutex_init	function
(	O
m	pointer
->	O
smutex	pointer
,	O
NULL	O
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
MTSERVER_SKELrunrS32	function
(	O
OBJID	int
IdObj	int
)	O
{	O
DtMTSERVER_SKEL	struct
*	O
m	pointer
;	O
OBJID	int
id	int
;	O
CLIENT	struct
*	O
ci	pointer
;	O
ESint32	int
i	int
;	O
m	pointer
=	O
(	O
DtMTSERVER_SKEL	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
ci	pointer
=	O
m	pointer
->	O
Data	struct
.	O
dat	pointer
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
(	O
edma_met3	function
(	O
m	pointer
->	O
Channel	int
,	O
"wait"	pointer
,	O
&	O
id	int
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"%s"	pointer
,	O
"wait error..."	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
id	int
==	O
-	O
1	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"%s"	pointer
,	O
"wait error...."	pointer
)	O
;	O
continue	O
;	O
}	O
pthread_mutex_lock	function
(	O
m	pointer
->	O
smutex	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
m	pointer
->	O
MaxClients	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
ci	pointer
[	O
i	int
]	O
.	O
id	int
==	O
-	O
1	int
)	O
break	O
;	O
}	O
if	O
(	O
i	int
==	O
m	pointer
->	O
MaxClients	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"%s"	pointer
,	O
"[ERROR] Can't accept more connections"	pointer
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Clossing connection with object %d"	pointer
,	O
id	int
)	O
;	O
edma_met3	function
(	O
id	int
,	O
"Close"	pointer
)	O
;	O
edma_free_obj	function
(	O
id	int
)	O
;	O
pthread_mutex_unlock	function
(	O
m	pointer
->	O
smutex	pointer
)	O
;	O
continue	O
;	O
}	O
ci	pointer
[	O
i	int
]	O
.	O
id	int
=	O
id	int
;	O
ci	pointer
[	O
i	int
]	O
.	O
server	int
=	O
IdObj	int
;	O
m	pointer
->	O
n	int
++	O
;	O
pthread_mutex_unlock	function
(	O
m	pointer
->	O
smutex	pointer
)	O
;	O
time	function
(	O
&	O
ci	pointer
[	O
i	int
]	O
.	O
tstart	long
)	O
;	O
pthread_create	function
(	O
&	O
ci	pointer
[	O
i	int
]	O
.	O
tid	long
,	O
NULL	O
,	O
service	function
,	O
&	O
ci	pointer
[	O
i	int
]	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
MTSERVER_SKELonRequestOrS32	function
(	O
OBJID	int
IdObj	int
,	O
OBJID	int
id	int
)	O
{	O
DtMTSERVER_SKEL	struct
*	O
m	pointer
;	O
EChar	char
remote	array
[	O
1024	int
]	O
;	O
m	pointer
=	O
(	O
DtMTSERVER_SKEL	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"%s"	pointer
,	O
"[Warnning] You haven't override this method for managing requests"	pointer
)	O
;	O
edma_rprop3	function
(	O
id	int
,	O
"Resource"	pointer
,	O
remote	array
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"[Warnning] Request arrived from: %s"	pointer
,	O
remote	array
)	O
;	O
return	O
0	int
;	O
}	O
void	O
*	O
service	function
(	O
void	O
*	O
data	pointer
)	O
{	O
CLIENT	struct
*	O
ci	pointer
;	O
ESint32	int
n	int
;	O
pthread_mutex_t	union
*	O
the_mutex	pointer
;	O
edma_thread_register	function
(	O
)	O
;	O
ci	pointer
=	O
(	O
CLIENT	struct
*	O
)	O
data	pointer
;	O
edma_met3	function
(	O
ci	pointer
->	O
server	int
,	O
"onRequest"	pointer
,	O
ci	pointer
->	O
id	int
)	O
;	O
time	function
(	O
&	O
ci	pointer
->	O
tend	long
)	O
;	O
edma_met3	function
(	O
ci	pointer
->	O
id	int
,	O
"Close"	pointer
)	O
;	O
edma_rprop3	function
(	O
ci	pointer
->	O
server	int
,	O
"smutex"	pointer
,	O
&	O
the_mutex	pointer
)	O
;	O
pthread_mutex_lock	function
(	O
the_mutex	pointer
)	O
;	O
edma_free_obj	function
(	O
ci	pointer
->	O
id	int
)	O
;	O
edma_rprop3	function
(	O
ci	pointer
->	O
server	int
,	O
"n"	pointer
,	O
&	O
n	int
)	O
;	O
n	int
--	O
;	O
edma_wprop3	function
(	O
ci	pointer
->	O
server	int
,	O
"n"	pointer
,	O
n	int
)	O
;	O
ci	pointer
->	O
id	int
=	O
-	O
1	int
;	O
pthread_mutex_unlock	function
(	O
the_mutex	pointer
)	O
;	O
edma_thread_unregister	function
(	O
)	O
;	O
return	O
NULL	O
;	O
}	O
