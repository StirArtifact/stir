typedef	O
struct	O
{	O
gsl_matrix	struct
*	O
x1	double
;	O
gsl_vector	struct
*	O
y1	function
;	O
gsl_vector	struct
*	O
ws1	pointer
;	O
gsl_vector	struct
*	O
ws2	pointer
;	O
}	O
nmsimplex_state_t	struct
;	O
static	O
double	O
nmsimplex_move_corner	function
(	O
const	O
double	O
coeff	double
,	O
const	O
nmsimplex_state_t	struct
*	O
state	pointer
,	O
size_t	long
corner	long
,	O
gsl_vector	struct
*	O
xc	pointer
,	O
const	O
gsl_multimin_function	struct
*	O
f	pointer
)	O
{	O
gsl_matrix	struct
*	O
x1	double
=	O
state	pointer
->	O
x1	double
;	O
size_t	long
i	long
,	O
j	long
;	O
double	O
newval	double
,	O
mp	double
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
x1	double
->	O
size2	long
;	O
j	long
++	O
)	O
{	O
mp	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
x1	double
->	O
size1	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
i	long
!=	O
corner	long
)	O
{	O
mp	double
+=	O
(	O
gsl_matrix_get	function
(	O
x1	double
,	O
i	long
,	O
j	long
)	O
)	O
;	O
}	O
}	O
mp	double
/=	O
(	O
double	O
)	O
(	O
x1	double
->	O
size1	long
-	O
1	int
)	O
;	O
newval	double
=	O
mp	double
-	O
coeff	double
*	O
(	O
mp	double
-	O
gsl_matrix_get	function
(	O
x1	double
,	O
corner	long
,	O
j	long
)	O
)	O
;	O
gsl_vector_set	function
(	O
xc	pointer
,	O
j	long
,	O
newval	double
)	O
;	O
}	O
newval	double
=	O
GSL_MULTIMIN_FN_EVAL	O
(	O
f	pointer
,	O
xc	pointer
)	O
;	O
return	O
newval	double
;	O
}	O
static	O
int	O
nmsimplex_contract_by_best	function
(	O
nmsimplex_state_t	struct
*	O
state	pointer
,	O
size_t	long
best	long
,	O
gsl_vector	struct
*	O
xc	pointer
,	O
gsl_multimin_function	struct
*	O
f	pointer
)	O
{	O
gsl_matrix	struct
*	O
x1	double
=	O
state	pointer
->	O
x1	double
;	O
gsl_vector	struct
*	O
y1	function
=	O
state	pointer
->	O
y1	function
;	O
size_t	long
i	long
,	O
j	long
;	O
double	O
newval	double
;	O
int	O
status	int
=	O
GSL_SUCCESS	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
x1	double
->	O
size1	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
i	long
!=	O
best	long
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
x1	double
->	O
size2	long
;	O
j	long
++	O
)	O
{	O
newval	double
=	O
0.5	int
*	O
(	O
gsl_matrix_get	function
(	O
x1	double
,	O
i	long
,	O
j	long
)	O
+	O
gsl_matrix_get	function
(	O
x1	double
,	O
best	long
,	O
j	long
)	O
)	O
;	O
gsl_matrix_set	function
(	O
x1	double
,	O
i	long
,	O
j	long
,	O
newval	double
)	O
;	O
}	O
gsl_matrix_get_row	function
(	O
xc	pointer
,	O
x1	double
,	O
i	long
)	O
;	O
newval	double
=	O
GSL_MULTIMIN_FN_EVAL	O
(	O
f	pointer
,	O
xc	pointer
)	O
;	O
gsl_vector_set	function
(	O
y1	function
,	O
i	long
,	O
newval	double
)	O
;	O
if	O
(	O
!	O
gsl_finite	function
(	O
newval	double
)	O
)	O
{	O
status	int
=	O
GSL_EBADFUNC	int
;	O
}	O
}	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
nmsimplex_calc_center	function
(	O
const	O
nmsimplex_state_t	struct
*	O
state	pointer
,	O
gsl_vector	struct
*	O
mp	double
)	O
{	O
gsl_matrix	struct
*	O
x1	double
=	O
state	pointer
->	O
x1	double
;	O
size_t	long
i	long
,	O
j	long
;	O
double	O
val	double
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
x1	double
->	O
size2	long
;	O
j	long
++	O
)	O
{	O
val	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
x1	double
->	O
size1	long
;	O
i	long
++	O
)	O
{	O
val	double
+=	O
gsl_matrix_get	function
(	O
x1	double
,	O
i	long
,	O
j	long
)	O
;	O
}	O
val	double
/=	O
x1	double
->	O
size1	long
;	O
gsl_vector_set	function
(	O
mp	double
,	O
j	long
,	O
val	double
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
double	O
nmsimplex_size	function
(	O
nmsimplex_state_t	struct
*	O
state	pointer
)	O
{	O
gsl_vector	struct
*	O
s	pointer
=	O
state	pointer
->	O
ws1	pointer
;	O
gsl_vector	struct
*	O
mp	double
=	O
state	pointer
->	O
ws2	pointer
;	O
gsl_matrix	struct
*	O
x1	double
=	O
state	pointer
->	O
x1	double
;	O
size_t	long
i	long
;	O
double	O
ss	double
=	O
0.0	int
;	O
nmsimplex_calc_center	function
(	O
state	pointer
,	O
mp	double
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
x1	double
->	O
size1	long
;	O
i	long
++	O
)	O
{	O
gsl_matrix_get_row	function
(	O
s	pointer
,	O
x1	double
,	O
i	long
)	O
;	O
gsl_blas_daxpy	function
(	O
-	O
1.0	int
,	O
mp	double
,	O
s	pointer
)	O
;	O
ss	double
+=	O
gsl_blas_dnrm2	function
(	O
s	pointer
)	O
;	O
}	O
return	O
ss	double
/	O
(	O
double	O
)	O
(	O
x1	double
->	O
size1	long
)	O
;	O
}	O
static	O
int	O
nmsimplex_alloc	function
(	O
void	O
*	O
vstate	pointer
,	O
size_t	long
n	long
)	O
{	O
nmsimplex_state_t	struct
*	O
state	pointer
=	O
(	O
nmsimplex_state_t	struct
*	O
)	O
vstate	pointer
;	O
if	O
(	O
n	long
==	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"invalid number of parameters specified"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
state	pointer
->	O
x1	double
=	O
gsl_matrix_alloc	function
(	O
n	long
+	O
1	int
,	O
n	long
)	O
;	O
if	O
(	O
state	pointer
->	O
x1	double
==	O
NULL	O
)	O
{	O
GSL_ERROR	O
(	O
"failed to allocate space for x1"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
y1	function
=	O
gsl_vector_alloc	function
(	O
n	long
+	O
1	int
)	O
;	O
if	O
(	O
state	pointer
->	O
y1	function
==	O
NULL	O
)	O
{	O
gsl_matrix_free	function
(	O
state	pointer
->	O
x1	double
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for y"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
ws1	pointer
=	O
gsl_vector_alloc	function
(	O
n	long
)	O
;	O
if	O
(	O
state	pointer
->	O
ws1	pointer
==	O
NULL	O
)	O
{	O
gsl_matrix_free	function
(	O
state	pointer
->	O
x1	double
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
y1	function
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for ws1"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
ws2	pointer
=	O
gsl_vector_alloc	function
(	O
n	long
)	O
;	O
if	O
(	O
state	pointer
->	O
ws2	pointer
==	O
NULL	O
)	O
{	O
gsl_matrix_free	function
(	O
state	pointer
->	O
x1	double
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
y1	function
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
ws1	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for ws2"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
nmsimplex_set	function
(	O
void	O
*	O
vstate	pointer
,	O
gsl_multimin_function	struct
*	O
f	pointer
,	O
const	O
gsl_vector	struct
*	O
x	long double
,	O
double	O
*	O
size	long
,	O
const	O
gsl_vector	struct
*	O
step_size	pointer
)	O
{	O
int	O
status	int
;	O
size_t	long
i	long
;	O
double	O
val	double
;	O
nmsimplex_state_t	struct
*	O
state	pointer
=	O
(	O
nmsimplex_state_t	struct
*	O
)	O
vstate	pointer
;	O
gsl_vector	struct
*	O
xtemp	pointer
=	O
state	pointer
->	O
ws1	pointer
;	O
if	O
(	O
xtemp	pointer
->	O
size	long
!=	O
x	long double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"incompatible size of x"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
xtemp	pointer
->	O
size	long
!=	O
step_size	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"incompatible size of step_size"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
val	double
=	O
GSL_MULTIMIN_FN_EVAL	O
(	O
f	pointer
,	O
x	long double
)	O
;	O
if	O
(	O
!	O
gsl_finite	function
(	O
val	double
)	O
)	O
{	O
GSL_ERROR	O
(	O
"non-finite function value encountered"	pointer
,	O
GSL_EBADFUNC	int
)	O
;	O
}	O
gsl_matrix_set_row	function
(	O
state	pointer
->	O
x1	double
,	O
0	int
,	O
x	long double
)	O
;	O
gsl_vector_set	function
(	O
state	pointer
->	O
y1	function
,	O
0	int
,	O
val	double
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
x	long double
->	O
size	long
;	O
i	long
++	O
)	O
{	O
status	int
=	O
gsl_vector_memcpy	function
(	O
xtemp	pointer
,	O
x	long double
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"vector memcopy failed"	pointer
,	O
GSL_EFAILED	int
)	O
;	O
}	O
val	double
=	O
gsl_vector_get	function
(	O
xtemp	pointer
,	O
i	long
)	O
+	O
gsl_vector_get	function
(	O
step_size	pointer
,	O
i	long
)	O
;	O
gsl_vector_set	function
(	O
xtemp	pointer
,	O
i	long
,	O
val	double
)	O
;	O
val	double
=	O
GSL_MULTIMIN_FN_EVAL	O
(	O
f	pointer
,	O
xtemp	pointer
)	O
;	O
if	O
(	O
!	O
gsl_finite	function
(	O
val	double
)	O
)	O
{	O
GSL_ERROR	O
(	O
"non-finite function value encountered"	pointer
,	O
GSL_EBADFUNC	int
)	O
;	O
}	O
gsl_matrix_set_row	function
(	O
state	pointer
->	O
x1	double
,	O
i	long
+	O
1	int
,	O
xtemp	pointer
)	O
;	O
gsl_vector_set	function
(	O
state	pointer
->	O
y1	function
,	O
i	long
+	O
1	int
,	O
val	double
)	O
;	O
}	O
*	O
size	long
=	O
nmsimplex_size	function
(	O
state	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
void	O
nmsimplex_free	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
nmsimplex_state_t	struct
*	O
state	pointer
=	O
(	O
nmsimplex_state_t	struct
*	O
)	O
vstate	pointer
;	O
gsl_matrix_free	function
(	O
state	pointer
->	O
x1	double
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
y1	function
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
ws1	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
ws2	pointer
)	O
;	O
}	O
static	O
int	O
nmsimplex_iterate	function
(	O
void	O
*	O
vstate	pointer
,	O
gsl_multimin_function	struct
*	O
f	pointer
,	O
gsl_vector	struct
*	O
x	long double
,	O
double	O
*	O
size	long
,	O
double	O
*	O
fval	pointer
)	O
{	O
nmsimplex_state_t	struct
*	O
state	pointer
=	O
(	O
nmsimplex_state_t	struct
*	O
)	O
vstate	pointer
;	O
gsl_vector	struct
*	O
xc	pointer
=	O
state	pointer
->	O
ws1	pointer
;	O
gsl_vector	struct
*	O
xc2	pointer
=	O
state	pointer
->	O
ws2	pointer
;	O
gsl_vector	struct
*	O
y1	function
=	O
state	pointer
->	O
y1	function
;	O
gsl_matrix	struct
*	O
x1	double
=	O
state	pointer
->	O
x1	double
;	O
size_t	long
n	long
=	O
y1	function
->	O
size	long
;	O
size_t	long
i	long
;	O
size_t	long
hi	long
,	O
s_hi	long
,	O
lo	long
;	O
double	O
dhi	double
,	O
ds_hi	double
,	O
dlo	double
;	O
int	O
status	int
;	O
double	O
val	double
,	O
val2	double
;	O
if	O
(	O
xc	pointer
->	O
size	long
!=	O
x	long double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"incompatible size of x"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
dhi	double
=	O
dlo	double
=	O
gsl_vector_get	function
(	O
y1	function
,	O
0	int
)	O
;	O
hi	long
=	O
0	int
;	O
lo	long
=	O
0	int
;	O
ds_hi	double
=	O
gsl_vector_get	function
(	O
y1	function
,	O
1	int
)	O
;	O
s_hi	long
=	O
1	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
n	long
;	O
i	long
++	O
)	O
{	O
val	double
=	O
(	O
gsl_vector_get	function
(	O
y1	function
,	O
i	long
)	O
)	O
;	O
if	O
(	O
val	double
<	O
dlo	double
)	O
{	O
dlo	double
=	O
val	double
;	O
lo	long
=	O
i	long
;	O
}	O
else	O
if	O
(	O
val	double
>	O
dhi	double
)	O
{	O
ds_hi	double
=	O
dhi	double
;	O
s_hi	long
=	O
hi	long
;	O
dhi	double
=	O
val	double
;	O
hi	long
=	O
i	long
;	O
}	O
else	O
if	O
(	O
val	double
>	O
ds_hi	double
)	O
{	O
ds_hi	double
=	O
val	double
;	O
s_hi	long
=	O
i	long
;	O
}	O
}	O
val	double
=	O
nmsimplex_move_corner	function
(	O
-	O
1.0	int
,	O
state	pointer
,	O
hi	long
,	O
xc	pointer
,	O
f	pointer
)	O
;	O
if	O
(	O
gsl_finite	function
(	O
val	double
)	O
&&	O
val	double
<	O
gsl_vector_get	function
(	O
y1	function
,	O
lo	long
)	O
)	O
{	O
val2	double
=	O
nmsimplex_move_corner	function
(	O
-	O
2.0	int
,	O
state	pointer
,	O
hi	long
,	O
xc2	pointer
,	O
f	pointer
)	O
;	O
if	O
(	O
gsl_finite	function
(	O
val2	double
)	O
&&	O
val2	double
<	O
gsl_vector_get	function
(	O
y1	function
,	O
lo	long
)	O
)	O
{	O
gsl_matrix_set_row	function
(	O
x1	double
,	O
hi	long
,	O
xc2	pointer
)	O
;	O
gsl_vector_set	function
(	O
y1	function
,	O
hi	long
,	O
val2	double
)	O
;	O
}	O
else	O
{	O
gsl_matrix_set_row	function
(	O
x1	double
,	O
hi	long
,	O
xc	pointer
)	O
;	O
gsl_vector_set	function
(	O
y1	function
,	O
hi	long
,	O
val	double
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
gsl_finite	function
(	O
val	double
)	O
||	O
val	double
>	O
gsl_vector_get	function
(	O
y1	function
,	O
s_hi	long
)	O
)	O
{	O
if	O
(	O
gsl_finite	function
(	O
val	double
)	O
&&	O
val	double
<=	O
gsl_vector_get	function
(	O
y1	function
,	O
hi	long
)	O
)	O
{	O
gsl_matrix_set_row	function
(	O
x1	double
,	O
hi	long
,	O
xc	pointer
)	O
;	O
gsl_vector_set	function
(	O
y1	function
,	O
hi	long
,	O
val	double
)	O
;	O
}	O
val2	double
=	O
nmsimplex_move_corner	function
(	O
0.5	int
,	O
state	pointer
,	O
hi	long
,	O
xc2	pointer
,	O
f	pointer
)	O
;	O
if	O
(	O
gsl_finite	function
(	O
val2	double
)	O
&&	O
val2	double
<=	O
gsl_vector_get	function
(	O
y1	function
,	O
hi	long
)	O
)	O
{	O
gsl_matrix_set_row	function
(	O
state	pointer
->	O
x1	double
,	O
hi	long
,	O
xc2	pointer
)	O
;	O
gsl_vector_set	function
(	O
y1	function
,	O
hi	long
,	O
val2	double
)	O
;	O
}	O
else	O
{	O
status	int
=	O
nmsimplex_contract_by_best	function
(	O
state	pointer
,	O
lo	long
,	O
xc	pointer
,	O
f	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
GSL_ERROR	O
(	O
"nmsimplex_contract_by_best failed"	pointer
,	O
GSL_EFAILED	int
)	O
;	O
}	O
}	O
}	O
else	O
{	O
gsl_matrix_set_row	function
(	O
x1	double
,	O
hi	long
,	O
xc	pointer
)	O
;	O
gsl_vector_set	function
(	O
y1	function
,	O
hi	long
,	O
val	double
)	O
;	O
}	O
lo	long
=	O
gsl_vector_min_index	function
(	O
y1	function
)	O
;	O
gsl_matrix_get_row	function
(	O
x	long double
,	O
x1	double
,	O
lo	long
)	O
;	O
*	O
fval	pointer
=	O
gsl_vector_get	function
(	O
y1	function
,	O
lo	long
)	O
;	O
*	O
size	long
=	O
nmsimplex_size	function
(	O
state	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
const	O
gsl_multimin_fminimizer_type	struct
nmsimplex_type	struct
=	O
{	O
"nmsimplex"	pointer
,	O
sizeof	O
(	O
nmsimplex_state_t	struct
)	O
,	O
&	O
nmsimplex_alloc	function
,	O
&	O
nmsimplex_set	function
,	O
&	O
nmsimplex_iterate	function
,	O
&	O
nmsimplex_free	function
}	O
;	O
const	O
gsl_multimin_fminimizer_type	struct
*	O
gsl_multimin_fminimizer_nmsimplex	pointer
=	O
&	O
nmsimplex_type	struct
;	O
