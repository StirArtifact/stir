int	O
read_pid	function
(	O
char	O
*	O
pidfile	pointer
)	O
{	O
FILE	struct
*	O
f	pointer
;	O
int	O
pid	int
;	O
if	O
(	O
!	O
(	O
f	pointer
=	O
fopen	function
(	O
pidfile	pointer
,	O
"r"	pointer
)	O
)	O
)	O
return	O
0	int
;	O
fscanf	function
(	O
f	pointer
,	O
"%d"	pointer
,	O
&	O
pid	int
)	O
;	O
fclose	function
(	O
f	pointer
)	O
;	O
return	O
pid	int
;	O
}	O
int	O
check_pid	function
(	O
char	O
*	O
pidfile	pointer
)	O
{	O
int	O
pid	int
=	O
read_pid	function
(	O
pidfile	pointer
)	O
;	O
if	O
(	O
(	O
!	O
pid	int
)	O
||	O
(	O
pid	int
==	O
getpid	function
(	O
)	O
)	O
)	O
return	O
0	int
;	O
errno	O
=	O
0	int
;	O
if	O
(	O
kill	function
(	O
pid	int
,	O
0	int
)	O
&&	O
errno	O
==	O
ESRCH	int
)	O
return	O
(	O
0	int
)	O
;	O
return	O
pid	int
;	O
}	O
int	O
write_pid	function
(	O
char	O
*	O
pidfile	pointer
)	O
{	O
FILE	struct
*	O
f	pointer
;	O
int	O
fd	int
;	O
int	O
pid	int
;	O
if	O
(	O
(	O
(	O
fd	int
=	O
open	function
(	O
pidfile	pointer
,	O
O_RDWR	int
|	O
O_CREAT	int
,	O
0644	int
)	O
)	O
==	O
-	O
1	int
)	O
||	O
(	O
(	O
f	pointer
=	O
fdopen	function
(	O
fd	int
,	O
"r+"	pointer
)	O
)	O
==	O
NULL	O
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Can't open or create %s.\n"	pointer
,	O
pidfile	pointer
?	O
pidfile	pointer
:	O
"(null)"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
pid	int
=	O
getpid	function
(	O
)	O
;	O
if	O
(	O
!	O
fprintf	function
(	O
f	pointer
,	O
"%d\n"	pointer
,	O
pid	int
)	O
)	O
{	O
printf	function
(	O
"Can't write pid , %s.\n"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
close	function
(	O
fd	int
)	O
;	O
return	O
0	int
;	O
}	O
fflush	function
(	O
f	pointer
)	O
;	O
close	function
(	O
fd	int
)	O
;	O
return	O
pid	int
;	O
}	O
int	O
remove_pid	function
(	O
char	O
*	O
pidfile	pointer
)	O
{	O
return	O
unlink	function
(	O
pidfile	pointer
)	O
;	O
}	O
