const	O
Plotter	struct
_pl_h_default_plotter	struct
=	O
{	O
_pl_h_initialize	function
,	O
_pl_h_terminate	function
,	O
_pl_h_begin_page	function
,	O
_pl_h_erase_page	function
,	O
_pl_h_end_page	function
,	O
_pl_g_push_state	function
,	O
_pl_g_pop_state	function
,	O
_pl_h_paint_path	function
,	O
_pl_h_paint_paths	function
,	O
_pl_g_path_is_flushable	function
,	O
_pl_g_maybe_prepaint_segments	function
,	O
_pl_g_paint_marker	function
,	O
_pl_h_paint_point	function
,	O
_pl_g_paint_text_string_with_escapes	function
,	O
_pl_h_paint_text_string	function
,	O
_pl_g_get_text_width	function
,	O
_pl_g_retrieve_font	function
,	O
_pl_g_flush_output	function
,	O
_pl_g_warning	function
,	O
_pl_g_error	function
,	O
}	O
;	O
const	O
Plotter	struct
_pl_q_default_plotter	struct
=	O
{	O
_pl_q_initialize	function
,	O
_pl_q_terminate	function
,	O
_pl_h_begin_page	function
,	O
_pl_h_erase_page	function
,	O
_pl_h_end_page	function
,	O
_pl_g_push_state	function
,	O
_pl_g_pop_state	function
,	O
_pl_h_paint_path	function
,	O
_pl_h_paint_paths	function
,	O
_pl_g_path_is_flushable	function
,	O
_pl_g_maybe_prepaint_segments	function
,	O
_pl_g_paint_marker	function
,	O
_pl_h_paint_point	function
,	O
_pl_g_paint_text_string_with_escapes	function
,	O
_pl_h_paint_text_string	function
,	O
_pl_g_get_text_width	function
,	O
_pl_g_retrieve_font	function
,	O
_pl_g_flush_output	function
,	O
_pl_g_warning	function
,	O
_pl_g_error	function
,	O
}	O
;	O
void	O
_pl_h_initialize	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
int	O
i	int
;	O
_pl_g_initialize	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
data	pointer
->	O
type	enum
=	O
PL_HPGL	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
output_model	enum
=	O
PL_OUTPUT_ONE_PAGE_AT_A_TIME	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_wide_lines	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_dash_array	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_solid_fill	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_odd_winding_fill	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_nonzero_winding_fill	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_settable_bg	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_escaped_string_support	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_ps_fonts	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_pcl_fonts	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_stick_fonts	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_extra_stick_fonts	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_other_fonts	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
default_font_type	int
=	O
PL_F_HERSHEY	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
pcl_before_ps	enum
=	O
true	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_horizontal_justification	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_vertical_justification	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
kern_stick_fonts	enum
=	O
true	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
issue_font_warning	enum
=	O
true	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_mixed_paths	enum
=	O
true	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_arc_scaling	enum
=	O
AS_UNIFORM	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_ellarc_scaling	enum
=	O
AS_NONE	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_quad_scaling	enum
=	O
AS_NONE	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_cubic_scaling	enum
=	O
AS_NONE	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_box_scaling	enum
=	O
AS_AXES_PRESERVED	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_circle_scaling	enum
=	O
AS_UNIFORM	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_ellipse_scaling	enum
=	O
AS_NONE	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
display_model_type	int
=	O
(	O
int	O
)	O
DISP_MODEL_PHYSICAL	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
display_coors_type	int
=	O
(	O
int	O
)	O
DISP_DEVICE_COORS_INTEGER_NON_LIBXMI	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
flipped_y	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
imin	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
imax	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
jmin	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
jmax	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
xmin	double
=	O
HPGL_SCALED_DEVICE_LEFT	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
xmax	double
=	O
HPGL_SCALED_DEVICE_RIGHT	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
ymin	double
=	O
HPGL_SCALED_DEVICE_BOTTOM	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
ymax	double
=	O
HPGL_SCALED_DEVICE_TOP	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
page_data	pointer
=	O
(	O
plPageData	struct
*	O
)	O
NULL	O
;	O
_compute_ndc_to_device_map	function
(	O
_plotter	pointer
->	O
data	pointer
)	O
;	O
_plotter	pointer
->	O
hpgl_version	int
=	O
2	int
;	O
_plotter	pointer
->	O
hpgl_rotation	int
=	O
0	int
;	O
_plotter	pointer
->	O
hpgl_p1	struct
.	O
x	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
hpgl_p1	struct
.	O
y	double
=	O
8128.0	int
;	O
_plotter	pointer
->	O
hpgl_p2	struct
.	O
x	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
hpgl_p2	struct
.	O
y	double
=	O
8128.0	int
;	O
_plotter	pointer
->	O
hpgl_plot_length	double
=	O
10668.0	int
;	O
_plotter	pointer
->	O
hpgl_have_screened_vectors	enum
=	O
false	int
;	O
_plotter	pointer
->	O
hpgl_have_char_fill	enum
=	O
false	int
;	O
_plotter	pointer
->	O
hpgl_can_assign_colors	enum
=	O
false	int
;	O
_plotter	pointer
->	O
hpgl_use_opaque_mode	enum
=	O
true	int
;	O
_plotter	pointer
->	O
hpgl_pen	int
=	O
1	int
;	O
_plotter	pointer
->	O
hpgl_free_pen	int
=	O
2	int
;	O
_plotter	pointer
->	O
hpgl_bad_pen	enum
=	O
false	int
;	O
_plotter	pointer
->	O
hpgl_pendown	enum
=	O
false	int
;	O
_plotter	pointer
->	O
hpgl_pen_width	double
=	O
0.001	int
;	O
_plotter	pointer
->	O
hpgl_line_type	int
=	O
HPGL_L_SOLID	O
;	O
_plotter	pointer
->	O
hpgl_cap_style	int
=	O
HPGL_CAP_BUTT	int
;	O
_plotter	pointer
->	O
hpgl_join_style	int
=	O
HPGL_JOIN_MITER	int
;	O
_plotter	pointer
->	O
hpgl_miter_limit	double
=	O
5.0	int
;	O
_plotter	pointer
->	O
hpgl_pen_type	int
=	O
HPGL_PEN_SOLID	int
;	O
_plotter	pointer
->	O
hpgl_pen_option1	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
hpgl_pen_option2	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
hpgl_fill_type	int
=	O
HPGL_FILL_SOLID_BI	int
;	O
_plotter	pointer
->	O
hpgl_fill_option1	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
hpgl_fill_option2	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
hpgl_char_rendering_type	int
=	O
HPGL_CHAR_FILL_SOLID_AND_MAYBE_EDGE	int
;	O
_plotter	pointer
->	O
hpgl_symbol_set	int
=	O
PCL_ROMAN_8	int
;	O
_plotter	pointer
->	O
hpgl_spacing	int
=	O
0	int
;	O
_plotter	pointer
->	O
hpgl_posture	int
=	O
0	int
;	O
_plotter	pointer
->	O
hpgl_stroke_weight	int
=	O
0	int
;	O
_plotter	pointer
->	O
hpgl_pcl_typeface	int
=	O
PCL_STICK_TYPEFACE	int
;	O
_plotter	pointer
->	O
hpgl_charset_lower	int
=	O
HPGL_CHARSET_ASCII	int
;	O
_plotter	pointer
->	O
hpgl_charset_upper	int
=	O
HPGL_CHARSET_ASCII	int
;	O
_plotter	pointer
->	O
hpgl_rel_char_height	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
hpgl_rel_char_width	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
hpgl_rel_label_rise	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
hpgl_rel_label_run	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
hpgl_tan_char_slant	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
hpgl_position_is_unknown	enum
=	O
true	int
;	O
_plotter	pointer
->	O
hpgl_pos	struct
.	O
x	double
=	O
0	int
;	O
_plotter	pointer
->	O
hpgl_pos	struct
.	O
y	double
=	O
0	int
;	O
{	O
const	O
char	O
*	O
version_s	pointer
;	O
version_s	pointer
=	O
(	O
const	O
char	O
*	O
)	O
_get_plot_param	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
"HPGL_VERSION"	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
version_s	pointer
,	O
"1"	pointer
)	O
==	O
0	int
)	O
{	O
_plotter	pointer
->	O
hpgl_version	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_wide_lines	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_dash_array	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_solid_fill	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_odd_winding_fill	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_nonzero_winding_fill	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_ps_fonts	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_pcl_fonts	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_stick_fonts	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_extra_stick_fonts	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
kern_stick_fonts	enum
=	O
true	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_other_fonts	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
version_s	pointer
,	O
"1.5"	pointer
)	O
==	O
0	int
)	O
{	O
_plotter	pointer
->	O
hpgl_version	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_wide_lines	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_dash_array	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_solid_fill	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_odd_winding_fill	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_nonzero_winding_fill	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_ps_fonts	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_pcl_fonts	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_stick_fonts	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_extra_stick_fonts	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
kern_stick_fonts	enum
=	O
true	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_other_fonts	int
=	O
0	int
;	O
}	O
}	O
{	O
_set_page_type	function
(	O
_plotter	pointer
->	O
data	pointer
)	O
;	O
_plotter	pointer
->	O
hpgl_p1	struct
.	O
x	double
=	O
(	O
HPGL_UNITS_PER_INCH	int
*	O
(	O
0.0	int
+	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_xoffset	double
)	O
)	O
;	O
_plotter	pointer
->	O
hpgl_p2	struct
.	O
x	double
=	O
(	O
HPGL_UNITS_PER_INCH	int
*	O
(	O
0.0	int
+	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_xoffset	double
+	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_xsize	double
)	O
)	O
;	O
_plotter	pointer
->	O
hpgl_p1	struct
.	O
y	double
=	O
(	O
HPGL_UNITS_PER_INCH	int
*	O
(	O
0.0	int
+	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_yoffset	double
)	O
)	O
;	O
_plotter	pointer
->	O
hpgl_p2	struct
.	O
y	double
=	O
(	O
HPGL_UNITS_PER_INCH	int
*	O
(	O
0.0	int
+	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_yoffset	double
+	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_ysize	double
)	O
)	O
;	O
_plotter	pointer
->	O
data	pointer
->	O
xmin	double
=	O
HPGL_SCALED_DEVICE_LEFT	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
xmax	double
=	O
HPGL_SCALED_DEVICE_RIGHT	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
ymin	double
=	O
HPGL_SCALED_DEVICE_BOTTOM	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
ymax	double
=	O
HPGL_SCALED_DEVICE_TOP	int
;	O
_plotter	pointer
->	O
hpgl_plot_length	double
=	O
_plotter	pointer
->	O
data	pointer
->	O
page_data	pointer
->	O
hpgl2_plot_length	double
*	O
HPGL_UNITS_PER_INCH	int
;	O
}	O
{	O
const	O
char	O
*	O
rotate_s	pointer
;	O
rotate_s	pointer
=	O
(	O
const	O
char	O
*	O
)	O
_get_plot_param	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
"HPGL_ROTATE"	pointer
)	O
;	O
if	O
(	O
strcasecmp	function
(	O
rotate_s	pointer
,	O
"yes"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
rotate_s	pointer
,	O
"90"	pointer
)	O
==	O
0	int
)	O
_plotter	pointer
->	O
hpgl_rotation	int
=	O
90	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
rotate_s	pointer
,	O
"180"	pointer
)	O
==	O
0	int
&&	O
_plotter	pointer
->	O
hpgl_version	int
==	O
2	int
)	O
_plotter	pointer
->	O
hpgl_rotation	int
=	O
180	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
rotate_s	pointer
,	O
"270"	pointer
)	O
==	O
0	int
&&	O
_plotter	pointer
->	O
hpgl_version	int
==	O
2	int
)	O
_plotter	pointer
->	O
hpgl_rotation	int
=	O
270	int
;	O
else	O
_plotter	pointer
->	O
hpgl_rotation	int
=	O
0	int
;	O
}	O
{	O
const	O
char	O
*	O
transparent_s	pointer
;	O
transparent_s	pointer
=	O
(	O
const	O
char	O
*	O
)	O
_get_plot_param	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
"HPGL_OPAQUE_MODE"	pointer
)	O
;	O
if	O
(	O
strcasecmp	function
(	O
transparent_s	pointer
,	O
"no"	pointer
)	O
==	O
0	int
)	O
_plotter	pointer
->	O
hpgl_use_opaque_mode	enum
=	O
false	int
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
hpgl_version	int
==	O
2	int
)	O
{	O
const	O
char	O
*	O
palette_s	pointer
;	O
palette_s	pointer
=	O
(	O
const	O
char	O
*	O
)	O
_get_plot_param	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
"HPGL_ASSIGN_COLORS"	pointer
)	O
;	O
if	O
(	O
strcasecmp	function
(	O
palette_s	pointer
,	O
"yes"	pointer
)	O
==	O
0	int
)	O
_plotter	pointer
->	O
hpgl_can_assign_colors	enum
=	O
true	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
HPGL2_MAX_NUM_PENS	int
;	O
i	int
++	O
)	O
_plotter	pointer
->	O
hpgl_pen_defined	array
[	O
i	int
]	O
=	O
0	int
;	O
_plotter	pointer
->	O
hpgl_pen_color	array
[	O
0	int
]	O
.	O
red	int
=	O
255	int
;	O
_plotter	pointer
->	O
hpgl_pen_color	array
[	O
0	int
]	O
.	O
green	int
=	O
255	int
;	O
_plotter	pointer
->	O
hpgl_pen_color	array
[	O
0	int
]	O
.	O
blue	int
=	O
255	int
;	O
_plotter	pointer
->	O
hpgl_pen_defined	array
[	O
0	int
]	O
=	O
2	int
;	O
{	O
const	O
char	O
*	O
pen_s	pointer
;	O
pen_s	pointer
=	O
(	O
const	O
char	O
*	O
)	O
_get_plot_param	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
"HPGL_PENS"	pointer
)	O
;	O
if	O
(	O
pen_s	pointer
==	O
NULL	O
||	O
_pl_h_parse_pen_string	function
(	O
R___	O
(	O
_plotter	pointer
)	O
pen_s	pointer
)	O
==	O
false	int
||	O
(	O
_plotter	pointer
->	O
hpgl_can_assign_colors	enum
==	O
false	int
&&	O
_plotter	pointer
->	O
hpgl_pen_defined	array
[	O
1	int
]	O
==	O
0	int
)	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
hpgl_version	int
==	O
0	int
)	O
pen_s	pointer
=	O
HPGL_DEFAULT_PEN_STRING	pointer
;	O
else	O
pen_s	pointer
=	O
HPGL2_DEFAULT_PEN_STRING	pointer
;	O
_pl_h_parse_pen_string	function
(	O
R___	O
(	O
_plotter	pointer
)	O
pen_s	pointer
)	O
;	O
}	O
}	O
{	O
bool	enum
undefined_pen_seen	enum
=	O
false	int
;	O
for	O
(	O
i	int
=	O
2	int
;	O
i	int
<	O
HPGL2_MAX_NUM_PENS	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
hpgl_pen_defined	array
[	O
i	int
]	O
==	O
0	int
)	O
{	O
_plotter	pointer
->	O
hpgl_free_pen	int
=	O
i	int
;	O
undefined_pen_seen	enum
=	O
true	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
!	O
undefined_pen_seen	enum
)	O
_plotter	pointer
->	O
hpgl_can_assign_colors	enum
=	O
false	int
;	O
}	O
}	O
void	O
_pl_q_initialize	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
int	O
i	int
;	O
_pl_h_initialize	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
data	pointer
->	O
type	enum
=	O
PL_PCL	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
output_model	enum
=	O
PL_OUTPUT_ONE_PAGE_AT_A_TIME	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_wide_lines	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_dash_array	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_solid_fill	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_odd_winding_fill	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_nonzero_winding_fill	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_settable_bg	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_escaped_string_support	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_ps_fonts	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_pcl_fonts	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_stick_fonts	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_extra_stick_fonts	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_other_fonts	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
default_font_type	int
=	O
PL_F_PCL	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
pcl_before_ps	enum
=	O
true	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_horizontal_justification	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_vertical_justification	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
kern_stick_fonts	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
issue_font_warning	enum
=	O
true	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_mixed_paths	enum
=	O
true	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_arc_scaling	enum
=	O
AS_UNIFORM	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_ellarc_scaling	enum
=	O
AS_NONE	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_quad_scaling	enum
=	O
AS_NONE	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_cubic_scaling	enum
=	O
AS_ANY	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_box_scaling	enum
=	O
AS_AXES_PRESERVED	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_circle_scaling	enum
=	O
AS_UNIFORM	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_ellipse_scaling	enum
=	O
AS_NONE	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
display_model_type	int
=	O
(	O
int	O
)	O
DISP_MODEL_PHYSICAL	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
display_coors_type	int
=	O
(	O
int	O
)	O
DISP_DEVICE_COORS_INTEGER_NON_LIBXMI	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
flipped_y	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
imin	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
imax	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
jmin	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
jmax	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
xmin	double
=	O
HPGL_SCALED_DEVICE_LEFT	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
xmax	double
=	O
HPGL_SCALED_DEVICE_RIGHT	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
ymin	double
=	O
HPGL_SCALED_DEVICE_BOTTOM	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
ymax	double
=	O
HPGL_SCALED_DEVICE_TOP	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
page_data	pointer
=	O
(	O
plPageData	struct
*	O
)	O
NULL	O
;	O
_compute_ndc_to_device_map	function
(	O
_plotter	pointer
->	O
data	pointer
)	O
;	O
_plotter	pointer
->	O
hpgl_version	int
=	O
2	int
;	O
_plotter	pointer
->	O
hpgl_rotation	int
=	O
0	int
;	O
_plotter	pointer
->	O
hpgl_p1	struct
.	O
x	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
hpgl_p1	struct
.	O
y	double
=	O
8128.0	int
;	O
_plotter	pointer
->	O
hpgl_p2	struct
.	O
x	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
hpgl_p2	struct
.	O
y	double
=	O
8128.0	int
;	O
_plotter	pointer
->	O
hpgl_plot_length	double
=	O
10668.0	int
;	O
_plotter	pointer
->	O
hpgl_have_screened_vectors	enum
=	O
true	int
;	O
_plotter	pointer
->	O
hpgl_have_char_fill	enum
=	O
true	int
;	O
_plotter	pointer
->	O
hpgl_can_assign_colors	enum
=	O
false	int
;	O
_plotter	pointer
->	O
hpgl_use_opaque_mode	enum
=	O
true	int
;	O
_plotter	pointer
->	O
hpgl_pen	int
=	O
1	int
;	O
_plotter	pointer
->	O
hpgl_free_pen	int
=	O
2	int
;	O
_plotter	pointer
->	O
hpgl_bad_pen	enum
=	O
false	int
;	O
_plotter	pointer
->	O
hpgl_pendown	enum
=	O
false	int
;	O
_plotter	pointer
->	O
hpgl_pen_width	double
=	O
0.001	int
;	O
_plotter	pointer
->	O
hpgl_line_type	int
=	O
HPGL_L_SOLID	O
;	O
_plotter	pointer
->	O
hpgl_cap_style	int
=	O
HPGL_CAP_BUTT	int
;	O
_plotter	pointer
->	O
hpgl_join_style	int
=	O
HPGL_JOIN_MITER	int
;	O
_plotter	pointer
->	O
hpgl_miter_limit	double
=	O
5.0	int
;	O
_plotter	pointer
->	O
hpgl_pen_type	int
=	O
HPGL_PEN_SOLID	int
;	O
_plotter	pointer
->	O
hpgl_pen_option1	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
hpgl_pen_option2	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
hpgl_fill_type	int
=	O
HPGL_FILL_SOLID_BI	int
;	O
_plotter	pointer
->	O
hpgl_fill_option1	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
hpgl_fill_option2	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
hpgl_char_rendering_type	int
=	O
HPGL_CHAR_FILL_SOLID_AND_MAYBE_EDGE	int
;	O
_plotter	pointer
->	O
hpgl_symbol_set	int
=	O
PCL_ROMAN_8	int
;	O
_plotter	pointer
->	O
hpgl_spacing	int
=	O
0	int
;	O
_plotter	pointer
->	O
hpgl_posture	int
=	O
0	int
;	O
_plotter	pointer
->	O
hpgl_stroke_weight	int
=	O
0	int
;	O
_plotter	pointer
->	O
hpgl_pcl_typeface	int
=	O
PCL_STICK_TYPEFACE	int
;	O
_plotter	pointer
->	O
hpgl_charset_lower	int
=	O
HPGL_CHARSET_ASCII	int
;	O
_plotter	pointer
->	O
hpgl_charset_upper	int
=	O
HPGL_CHARSET_ASCII	int
;	O
_plotter	pointer
->	O
hpgl_rel_char_height	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
hpgl_rel_char_width	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
hpgl_rel_label_rise	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
hpgl_rel_label_run	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
hpgl_tan_char_slant	double
=	O
0.0	int
;	O
{	O
_set_page_type	function
(	O
_plotter	pointer
->	O
data	pointer
)	O
;	O
_plotter	pointer
->	O
hpgl_p1	struct
.	O
x	double
=	O
(	O
HPGL_UNITS_PER_INCH	int
*	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_xorigin	double
+	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_xoffset	double
-	O
_plotter	pointer
->	O
data	pointer
->	O
page_data	pointer
->	O
pcl_hpgl2_xorigin	double
)	O
)	O
;	O
_plotter	pointer
->	O
hpgl_p2	struct
.	O
x	double
=	O
(	O
HPGL_UNITS_PER_INCH	int
*	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_xorigin	double
+	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_xoffset	double
+	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_xsize	double
-	O
_plotter	pointer
->	O
data	pointer
->	O
page_data	pointer
->	O
pcl_hpgl2_xorigin	double
)	O
)	O
;	O
_plotter	pointer
->	O
hpgl_p1	struct
.	O
y	double
=	O
(	O
HPGL_UNITS_PER_INCH	int
*	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_yorigin	double
+	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_yoffset	double
-	O
_plotter	pointer
->	O
data	pointer
->	O
page_data	pointer
->	O
pcl_hpgl2_yorigin	double
)	O
)	O
;	O
_plotter	pointer
->	O
hpgl_p2	struct
.	O
y	double
=	O
(	O
HPGL_UNITS_PER_INCH	int
*	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_yorigin	double
+	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_yoffset	double
+	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_ysize	double
-	O
_plotter	pointer
->	O
data	pointer
->	O
page_data	pointer
->	O
pcl_hpgl2_yorigin	double
)	O
)	O
;	O
_plotter	pointer
->	O
hpgl_plot_length	double
=	O
_plotter	pointer
->	O
data	pointer
->	O
page_data	pointer
->	O
hpgl2_plot_length	double
*	O
HPGL_UNITS_PER_INCH	int
;	O
}	O
_plotter	pointer
->	O
hpgl_rotation	int
=	O
0	int
;	O
_plotter	pointer
->	O
hpgl_can_assign_colors	enum
=	O
false	int
;	O
{	O
const	O
char	O
*	O
palette_s	pointer
;	O
palette_s	pointer
=	O
(	O
const	O
char	O
*	O
)	O
_get_plot_param	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
"PCL_ASSIGN_COLORS"	pointer
)	O
;	O
if	O
(	O
strcasecmp	function
(	O
palette_s	pointer
,	O
"yes"	pointer
)	O
==	O
0	int
)	O
_plotter	pointer
->	O
hpgl_can_assign_colors	enum
=	O
true	int
;	O
}	O
{	O
const	O
char	O
*	O
bezier_s	pointer
;	O
bezier_s	pointer
=	O
(	O
const	O
char	O
*	O
)	O
_get_plot_param	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
"PCL_BEZIERS"	pointer
)	O
;	O
if	O
(	O
strcasecmp	function
(	O
bezier_s	pointer
,	O
"yes"	pointer
)	O
!=	O
0	int
)	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_cubic_scaling	enum
=	O
AS_NONE	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
HPGL2_MAX_NUM_PENS	int
;	O
i	int
++	O
)	O
_plotter	pointer
->	O
hpgl_pen_defined	array
[	O
i	int
]	O
=	O
0	int
;	O
_plotter	pointer
->	O
hpgl_pen_color	array
[	O
0	int
]	O
.	O
red	int
=	O
255	int
;	O
_plotter	pointer
->	O
hpgl_pen_color	array
[	O
0	int
]	O
.	O
green	int
=	O
255	int
;	O
_plotter	pointer
->	O
hpgl_pen_color	array
[	O
0	int
]	O
.	O
blue	int
=	O
255	int
;	O
_plotter	pointer
->	O
hpgl_pen_defined	array
[	O
0	int
]	O
=	O
2	int
;	O
{	O
const	O
char	O
*	O
pen_s	pointer
;	O
pen_s	pointer
=	O
HPGL2_DEFAULT_PEN_STRING	pointer
;	O
_pl_h_parse_pen_string	function
(	O
R___	O
(	O
_plotter	pointer
)	O
pen_s	pointer
)	O
;	O
}	O
{	O
bool	enum
undefined_pen_seen	enum
=	O
false	int
;	O
for	O
(	O
i	int
=	O
2	int
;	O
i	int
<	O
HPGL2_MAX_NUM_PENS	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
hpgl_pen_defined	array
[	O
i	int
]	O
==	O
0	int
)	O
{	O
_plotter	pointer
->	O
hpgl_free_pen	int
=	O
i	int
;	O
undefined_pen_seen	enum
=	O
true	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
!	O
undefined_pen_seen	enum
)	O
_plotter	pointer
->	O
hpgl_can_assign_colors	enum
=	O
false	int
;	O
}	O
}	O
bool	enum
_pl_h_parse_pen_string	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
const	O
char	O
*	O
pen_s	pointer
)	O
{	O
const	O
char	O
*	O
charp	pointer
;	O
char	O
name	pointer
[	O
MAX_COLOR_NAME_LEN	int
]	O
;	O
int	O
i	int
;	O
charp	pointer
=	O
pen_s	pointer
;	O
while	O
(	O
*	O
charp	pointer
)	O
{	O
int	O
pen_num	int
;	O
bool	enum
got_digit	enum
;	O
const	O
char	O
*	O
tmp	pointer
;	O
plColor	struct
color	struct
;	O
if	O
(	O
*	O
charp	pointer
==	O
':'	O
)	O
{	O
charp	pointer
++	O
;	O
continue	O
;	O
}	O
pen_num	int
=	O
0	int
;	O
got_digit	enum
=	O
false	int
;	O
while	O
(	O
*	O
charp	pointer
>=	O
'0'	O
&&	O
*	O
charp	pointer
<=	O
'9'	O
)	O
{	O
pen_num	int
=	O
10	int
*	O
pen_num	int
+	O
(	O
int	O
)	O
*	O
charp	pointer
-	O
(	O
int	O
)	O
'0'	O
;	O
got_digit	enum
=	O
true	int
;	O
charp	pointer
++	O
;	O
}	O
if	O
(	O
!	O
got_digit	enum
||	O
pen_num	int
<	O
1	int
||	O
pen_num	int
>=	O
HPGL2_MAX_NUM_PENS	int
)	O
return	O
false	int
;	O
if	O
(	O
*	O
charp	pointer
!=	O
'='	O
)	O
return	O
false	int
;	O
charp	pointer
++	O
;	O
for	O
(	O
tmp	pointer
=	O
charp	pointer
,	O
i	int
=	O
0	int
;	O
i	int
<	O
MAX_COLOR_NAME_LEN	int
;	O
tmp	pointer
++	O
,	O
i	int
++	O
)	O
{	O
if	O
(	O
*	O
tmp	pointer
==	O
':'	O
)	O
{	O
name	pointer
[	O
i	int
]	O
=	O
'\0'	O
;	O
charp	pointer
=	O
tmp	pointer
+	O
1	int
;	O
break	O
;	O
}	O
else	O
if	O
(	O
*	O
tmp	pointer
==	O
'\0'	O
)	O
{	O
name	pointer
[	O
i	int
]	O
=	O
'\0'	O
;	O
charp	pointer
=	O
tmp	pointer
;	O
break	O
;	O
}	O
else	O
name	pointer
[	O
i	int
]	O
=	O
*	O
tmp	pointer
;	O
}	O
if	O
(	O
_string_to_color	function
(	O
name	pointer
,	O
&	O
color	struct
,	O
_plotter	pointer
->	O
data	pointer
->	O
color_name_cache	pointer
)	O
)	O
{	O
_plotter	pointer
->	O
hpgl_pen_color	array
[	O
pen_num	int
]	O
=	O
color	struct
;	O
_plotter	pointer
->	O
hpgl_pen_defined	array
[	O
pen_num	int
]	O
=	O
2	int
;	O
}	O
else	O
return	O
false	int
;	O
}	O
return	O
true	int
;	O
}	O
void	O
_pl_h_terminate	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
_pl_g_terminate	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
}	O
void	O
_pl_q_terminate	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
_pl_h_terminate	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
}	O
void	O
_maybe_switch_to_hpgl	function
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
{	O
switch	O
(	O
(	O
int	O
)	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
type	enum
)	O
)	O
{	O
case	O
(	O
int	O
)	O
PL_HPGL	int
:	O
default	O
:	O
_pl_h_maybe_switch_to_hpgl	function
(	O
_plotter	pointer
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
PL_PCL	int
:	O
_pl_q_maybe_switch_to_hpgl	function
(	O
_plotter	pointer
)	O
;	O
break	O
;	O
}	O
}	O
void	O
_maybe_switch_from_hpgl	function
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
{	O
switch	O
(	O
(	O
int	O
)	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
type	enum
)	O
)	O
{	O
case	O
(	O
int	O
)	O
PL_HPGL	int
:	O
default	O
:	O
_pl_h_maybe_switch_from_hpgl	function
(	O
_plotter	pointer
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
PL_PCL	int
:	O
_pl_q_maybe_switch_from_hpgl	function
(	O
_plotter	pointer
)	O
;	O
break	O
;	O
}	O
}	O
