static	O
int	O
getnum	function
(	O
char	O
const	O
*	O
arg	pointer
,	O
unsigned	O
*	O
ret	pointer
)	O
{	O
char	O
*	O
end	struct
;	O
unsigned	O
long	O
x	long
=	O
strtoul	function
(	O
arg	pointer
,	O
&	O
end	struct
,	O
10	int
)	O
;	O
if	O
(	O
*	O
end	struct
)	O
{	O
mu_error	function
(	O
"bad number: %s"	pointer
,	O
arg	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
*	O
ret	pointer
=	O
x	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
com_retreat	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
mu_linetrack_t	pointer
trk	pointer
=	O
env	pointer
;	O
unsigned	O
x	long
;	O
if	O
(	O
getnum	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
&	O
x	long
)	O
==	O
0	int
)	O
{	O
int	O
rc	int
=	O
mu_linetrack_retreat	function
(	O
trk	pointer
,	O
x	long
)	O
;	O
if	O
(	O
rc	int
==	O
ERANGE	int
)	O
mu_error	function
(	O
"retreat count too big"	pointer
)	O
;	O
else	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_linetrack_retreat"	pointer
,	O
argv	pointer
[	O
1	int
]	O
,	O
rc	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
com_origin	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
mu_linetrack_t	pointer
trk	pointer
=	O
env	pointer
;	O
int	O
rc	int
;	O
struct	O
mu_locus_point	struct
pt	pointer
;	O
pt	pointer
.	O
mu_file	pointer
=	O
argv	pointer
[	O
1	int
]	O
;	O
if	O
(	O
getnum	function
(	O
argv	pointer
[	O
2	int
]	O
,	O
&	O
pt	pointer
.	O
mu_line	int
)	O
)	O
return	O
0	int
;	O
if	O
(	O
getnum	function
(	O
argv	pointer
[	O
3	int
]	O
,	O
&	O
pt	pointer
.	O
mu_col	int
)	O
)	O
return	O
0	int
;	O
rc	int
=	O
mu_linetrack_origin	function
(	O
trk	pointer
,	O
&	O
pt	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_linetrack_origin"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
com_line	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
mu_linetrack_t	pointer
trk	pointer
=	O
env	pointer
;	O
int	O
rc	int
;	O
struct	O
mu_locus_point	struct
pt	pointer
=	O
MU_LOCUS_POINT_INITIALIZER	O
;	O
if	O
(	O
getnum	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
&	O
pt	pointer
.	O
mu_line	int
)	O
)	O
return	O
0	int
;	O
rc	int
=	O
mu_linetrack_origin	function
(	O
trk	pointer
,	O
&	O
pt	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_linetrack_origin"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
com_rebase	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
mu_linetrack_t	pointer
trk	pointer
=	O
env	pointer
;	O
int	O
rc	int
;	O
struct	O
mu_locus_point	struct
pt	pointer
;	O
pt	pointer
.	O
mu_file	pointer
=	O
argv	pointer
[	O
1	int
]	O
;	O
if	O
(	O
getnum	function
(	O
argv	pointer
[	O
2	int
]	O
,	O
&	O
pt	pointer
.	O
mu_line	int
)	O
)	O
return	O
0	int
;	O
if	O
(	O
getnum	function
(	O
argv	pointer
[	O
3	int
]	O
,	O
&	O
pt	pointer
.	O
mu_col	int
)	O
)	O
return	O
0	int
;	O
rc	int
=	O
mu_linetrack_rebase	function
(	O
trk	pointer
,	O
&	O
pt	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_linetrack_rebase"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
com_point	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
mu_linetrack_t	pointer
trk	pointer
=	O
env	pointer
;	O
struct	O
mu_locus_range	struct
lr	pointer
=	O
MU_LOCUS_RANGE_INITIALIZER	O
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_linetrack_locus	function
(	O
trk	pointer
,	O
&	O
lr	pointer
.	O
beg	struct
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_linetrack_locus"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
else	O
{	O
mu_stream_lprintf	function
(	O
mu_strout	pointer
,	O
&	O
lr	pointer
,	O
"%s\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
mu_locus_range_deinit	function
(	O
&	O
lr	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
com_bol_p	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
mu_linetrack_t	pointer
trk	pointer
=	O
env	pointer
;	O
mu_printf	function
(	O
"%d\n"	pointer
,	O
mu_linetrack_at_bol	function
(	O
trk	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
com_stat	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
mu_linetrack_t	pointer
trk	pointer
=	O
env	pointer
;	O
int	O
rc	int
;	O
struct	O
mu_linetrack_stat	struct
st	pointer
;	O
rc	int
=	O
mu_linetrack_stat	struct
(	O
trk	pointer
,	O
&	O
st	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_linetrack_stat"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
else	O
{	O
mu_printf	function
(	O
"n_files=%zu\n"	pointer
,	O
st	pointer
.	O
n_files	long
)	O
;	O
mu_printf	function
(	O
"n_lines=%zu\n"	pointer
,	O
st	pointer
.	O
n_lines	long
)	O
;	O
mu_printf	function
(	O
"n_chars=%zu\n"	pointer
,	O
st	pointer
.	O
n_chars	long
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
lineproc	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
mu_assoc_t	pointer
options	pointer
,	O
void	O
*	O
env	pointer
)	O
{	O
char	O
*	O
buf	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
mu_linetrack_t	pointer
trk	pointer
=	O
env	pointer
;	O
struct	O
mu_locus_range	struct
lr	pointer
=	O
MU_LOCUS_RANGE_INITIALIZER	O
;	O
char	O
*	O
tok	int
;	O
if	O
(	O
buf	pointer
[	O
0	int
]	O
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
buf	pointer
[	O
0	int
]	O
==	O
'.'	O
)	O
{	O
memmove	function
(	O
buf	pointer
,	O
buf	pointer
+	O
1	int
,	O
strlen	function
(	O
buf	pointer
)	O
)	O
;	O
return	O
MU_ERR_USER0	O
;	O
}	O
mu_c_str_unescape	function
(	O
buf	pointer
,	O
"\\\n"	pointer
,	O
"\\n"	pointer
,	O
&	O
tok	int
)	O
;	O
mu_linetrack_advance	function
(	O
trk	pointer
,	O
&	O
lr	pointer
,	O
tok	int
,	O
strlen	function
(	O
tok	int
)	O
)	O
;	O
free	function
(	O
tok	int
)	O
;	O
mu_stream_lprintf	function
(	O
mu_strout	pointer
,	O
&	O
lr	pointer
,	O
"%s\n"	pointer
,	O
buf	pointer
)	O
;	O
mu_locus_range_deinit	function
(	O
&	O
lr	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
mu_tesh_command	struct
comtab	array
[	O
]	O
=	O
{	O
{	O
"__LINEPROC__"	pointer
,	O
""	pointer
,	O
lineproc	function
}	O
,	O
{	O
"retreat"	pointer
,	O
"COUNT"	pointer
,	O
com_retreat	function
}	O
,	O
{	O
"origin"	pointer
,	O
"FILE LINE COL"	pointer
,	O
com_origin	function
}	O
,	O
{	O
"line"	pointer
,	O
"NUMBER"	pointer
,	O
com_line	function
}	O
,	O
{	O
"point"	pointer
,	O
"NUMBER"	pointer
,	O
com_point	function
}	O
,	O
{	O
"rebase"	pointer
,	O
"FILE LINE COL"	pointer
,	O
com_rebase	function
}	O
,	O
{	O
"bol"	pointer
,	O
""	pointer
,	O
com_bol_p	function
}	O
,	O
{	O
"stat"	pointer
,	O
""	pointer
,	O
com_stat	function
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
int	O
main	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
unsigned	O
long	O
max_lines	long
;	O
char	O
*	O
end	struct
;	O
mu_linetrack_t	pointer
trk	pointer
;	O
mu_tesh_init	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
argc	long
!=	O
3	int
)	O
{	O
mu_error	function
(	O
"usage: %s FILE LINES"	pointer
,	O
mu_program_name	pointer
)	O
;	O
return	O
1	int
;	O
}	O
max_lines	long
=	O
strtoul	function
(	O
argv	pointer
[	O
2	int
]	O
,	O
&	O
end	struct
,	O
10	int
)	O
;	O
if	O
(	O
*	O
end	struct
||	O
max_lines	long
==	O
0	int
)	O
{	O
mu_error	function
(	O
"invalid number of lines"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
MU_ASSERT	O
(	O
mu_linetrack_create	function
(	O
&	O
trk	pointer
,	O
argv	pointer
[	O
1	int
]	O
,	O
max_lines	long
)	O
)	O
;	O
mu_tesh_read_and_eval	function
(	O
argc	long
-	O
3	int
,	O
argv	pointer
+	O
3	int
,	O
comtab	array
,	O
trk	pointer
)	O
;	O
mu_linetrack_destroy	function
(	O
&	O
trk	pointer
)	O
;	O
return	O
0	int
;	O
}	O
