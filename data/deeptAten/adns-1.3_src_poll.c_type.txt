int	O
adns_beforepoll	function
(	O
adns_state	pointer
ads	pointer
,	O
struct	O
pollfd	struct
*	O
fds	pointer
,	O
int	O
*	O
nfds_io	pointer
,	O
int	O
*	O
timeout_io	pointer
,	O
const	O
struct	O
timeval	struct
*	O
now	pointer
)	O
{	O
struct	O
timeval	struct
tv_nowbuf	struct
,	O
tv_tobuf	struct
,	O
*	O
tv_to	pointer
;	O
int	O
space	int
,	O
found	int
,	O
timeout_ms	int
,	O
r	int
;	O
struct	O
pollfd	struct
fds_tmp	array
[	O
MAX_POLLFDS	O
]	O
;	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
if	O
(	O
timeout_io	pointer
)	O
{	O
adns__must_gettimeofday	function
(	O
ads	pointer
,	O
&	O
now	pointer
,	O
&	O
tv_nowbuf	struct
)	O
;	O
if	O
(	O
!	O
now	pointer
)	O
{	O
*	O
nfds_io	pointer
=	O
0	int
;	O
r	int
=	O
0	int
;	O
goto	O
xit	O
;	O
}	O
timeout_ms	int
=	O
*	O
timeout_io	pointer
;	O
if	O
(	O
timeout_ms	int
==	O
-	O
1	int
)	O
{	O
tv_to	pointer
=	O
0	int
;	O
}	O
else	O
{	O
tv_tobuf	struct
.	O
tv_sec	long
=	O
timeout_ms	int
/	O
1000	int
;	O
tv_tobuf	struct
.	O
tv_usec	long
=	O
(	O
timeout_ms	int
%	O
1000	int
)	O
*	O
1000	int
;	O
tv_to	pointer
=	O
&	O
tv_tobuf	struct
;	O
}	O
adns__timeouts	function
(	O
ads	pointer
,	O
0	int
,	O
&	O
tv_to	pointer
,	O
&	O
tv_tobuf	struct
,	O
*	O
now	pointer
)	O
;	O
if	O
(	O
tv_to	pointer
)	O
{	O
assert	O
(	O
tv_to	pointer
==	O
&	O
tv_tobuf	struct
)	O
;	O
timeout_ms	int
=	O
(	O
tv_tobuf	struct
.	O
tv_usec	long
+	O
999	int
)	O
/	O
1000	int
;	O
assert	O
(	O
tv_tobuf	struct
.	O
tv_sec	long
<	O
(	O
INT_MAX	O
-	O
timeout_ms	int
)	O
/	O
1000	int
)	O
;	O
timeout_ms	int
+=	O
tv_tobuf	struct
.	O
tv_sec	long
*	O
1000	int
;	O
}	O
else	O
{	O
timeout_ms	int
=	O
-	O
1	int
;	O
}	O
*	O
timeout_io	pointer
=	O
timeout_ms	int
;	O
}	O
space	int
=	O
*	O
nfds_io	pointer
;	O
if	O
(	O
space	int
>=	O
MAX_POLLFDS	O
)	O
{	O
found	int
=	O
adns__pollfds	function
(	O
ads	pointer
,	O
fds	pointer
)	O
;	O
*	O
nfds_io	pointer
=	O
found	int
;	O
}	O
else	O
{	O
found	int
=	O
adns__pollfds	function
(	O
ads	pointer
,	O
fds_tmp	array
)	O
;	O
*	O
nfds_io	pointer
=	O
found	int
;	O
if	O
(	O
space	int
<	O
found	int
)	O
{	O
r	int
=	O
ERANGE	int
;	O
goto	O
xit	O
;	O
}	O
memcpy	function
(	O
fds	pointer
,	O
fds_tmp	array
,	O
sizeof	O
(	O
struct	O
pollfd	struct
)	O
*	O
found	int
)	O
;	O
}	O
r	int
=	O
0	int
;	O
xit	O
:	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
return	O
r	int
;	O
}	O
void	O
adns_afterpoll	function
(	O
adns_state	pointer
ads	pointer
,	O
const	O
struct	O
pollfd	struct
*	O
fds	pointer
,	O
int	O
nfds	int
,	O
const	O
struct	O
timeval	struct
*	O
now	pointer
)	O
{	O
struct	O
timeval	struct
tv_buf	pointer
;	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
adns__must_gettimeofday	function
(	O
ads	pointer
,	O
&	O
now	pointer
,	O
&	O
tv_buf	pointer
)	O
;	O
if	O
(	O
now	pointer
)	O
{	O
adns__timeouts	function
(	O
ads	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
*	O
now	pointer
)	O
;	O
adns__fdevents	function
(	O
ads	pointer
,	O
fds	pointer
,	O
nfds	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
*	O
now	pointer
,	O
0	int
)	O
;	O
}	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
}	O
int	O
adns_wait_poll	function
(	O
adns_state	pointer
ads	pointer
,	O
adns_query	pointer
*	O
query_io	pointer
,	O
adns_answer	struct
*	O
*	O
answer_r	pointer
,	O
void	O
*	O
*	O
context_r	pointer
)	O
{	O
int	O
r	int
,	O
nfds	int
,	O
to	pointer
;	O
struct	O
pollfd	struct
fds	pointer
[	O
MAX_POLLFDS	O
]	O
;	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
r	int
=	O
adns__internal_check	function
(	O
ads	pointer
,	O
query_io	pointer
,	O
answer_r	pointer
,	O
context_r	pointer
)	O
;	O
if	O
(	O
r	int
!=	O
EAGAIN	int
)	O
goto	O
xit	O
;	O
nfds	int
=	O
MAX_POLLFDS	O
;	O
to	pointer
=	O
-	O
1	int
;	O
adns_beforepoll	function
(	O
ads	pointer
,	O
fds	pointer
,	O
&	O
nfds	int
,	O
&	O
to	pointer
,	O
0	int
)	O
;	O
r	int
=	O
poll	function
(	O
fds	pointer
,	O
nfds	int
,	O
to	pointer
)	O
;	O
if	O
(	O
r	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
{	O
if	O
(	O
ads	pointer
->	O
iflags	enum
&	O
adns_if_eintr	int
)	O
{	O
r	int
=	O
EINTR	int
;	O
goto	O
xit	O
;	O
}	O
}	O
else	O
{	O
adns__diag	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"poll failed in wait: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
adns_globalsystemfailure	function
(	O
ads	pointer
)	O
;	O
}	O
}	O
else	O
{	O
assert	O
(	O
r	int
>=	O
0	int
)	O
;	O
adns_afterpoll	function
(	O
ads	pointer
,	O
fds	pointer
,	O
nfds	int
,	O
0	int
)	O
;	O
}	O
}	O
xit	O
:	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
return	O
r	int
;	O
}	O
