int	O
gsl_ran_wishart	function
(	O
const	O
gsl_rng	struct
*	O
r	pointer
,	O
const	O
double	O
df	pointer
,	O
const	O
gsl_matrix	struct
*	O
L	pointer
,	O
gsl_matrix	struct
*	O
result	pointer
,	O
gsl_matrix	struct
*	O
work	pointer
)	O
{	O
if	O
(	O
L	pointer
->	O
size1	long
!=	O
L	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"L should be a square matrix"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
result	pointer
->	O
size1	long
!=	O
result	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"result should be a square matrix"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
work	pointer
->	O
size1	long
!=	O
work	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"work should be a square matrix"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
result	pointer
->	O
size1	long
!=	O
L	pointer
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"incompatible dimensions of result matrix"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
work	pointer
->	O
size1	long
!=	O
L	pointer
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"incompatible dimensions of work matrix"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
df	pointer
<=	O
L	pointer
->	O
size1	long
-	O
1	int
)	O
{	O
GSL_ERROR	O
(	O
"incompatible degrees of freedom"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
{	O
size_t	long
d	long
=	O
L	pointer
->	O
size1	long
,	O
i	long
,	O
j	long
;	O
gsl_matrix_set_zero	function
(	O
work	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
d	long
;	O
++	O
i	long
)	O
{	O
gsl_matrix_set	function
(	O
work	pointer
,	O
i	long
,	O
i	long
,	O
sqrt	function
(	O
gsl_ran_chisq	function
(	O
r	pointer
,	O
df	pointer
-	O
i	long
)	O
)	O
)	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
i	long
;	O
++	O
j	long
)	O
{	O
gsl_matrix_set	function
(	O
work	pointer
,	O
i	long
,	O
j	long
,	O
gsl_ran_ugaussian	function
(	O
r	pointer
)	O
)	O
;	O
}	O
}	O
gsl_blas_dtrmm	function
(	O
CblasLeft	int
,	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
1.0	int
,	O
L	pointer
,	O
work	pointer
)	O
;	O
gsl_blas_dsyrk	function
(	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
1.0	int
,	O
work	pointer
,	O
0.0	int
,	O
result	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
d	long
;	O
++	O
i	long
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
i	long
;	O
++	O
j	long
)	O
{	O
gsl_matrix_set	function
(	O
result	pointer
,	O
i	long
,	O
j	long
,	O
gsl_matrix_get	function
(	O
result	pointer
,	O
j	long
,	O
i	long
)	O
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_ran_wishart_log_pdf	function
(	O
const	O
gsl_matrix	struct
*	O
X	pointer
,	O
const	O
gsl_matrix	struct
*	O
L_X	pointer
,	O
const	O
double	O
df	pointer
,	O
const	O
gsl_matrix	struct
*	O
L	pointer
,	O
double	O
*	O
result	pointer
,	O
gsl_matrix	struct
*	O
work	pointer
)	O
{	O
if	O
(	O
L	pointer
->	O
size1	long
!=	O
L	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"L should be a square matrix"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
X	pointer
->	O
size1	long
!=	O
X	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"X should be a square matrix"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
L_X	pointer
->	O
size1	long
!=	O
L_X	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"L_X should be a square matrix"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
X	pointer
->	O
size1	long
!=	O
L	pointer
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"incompatible dimensions of X matrix"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
L_X	pointer
->	O
size1	long
!=	O
L	pointer
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"incompatible dimensions of L_X matrix"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
df	pointer
<=	O
L	pointer
->	O
size1	long
-	O
1	int
)	O
{	O
GSL_ERROR	O
(	O
"incompatible degrees of freedom"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
{	O
size_t	long
d	long
=	O
L	pointer
->	O
size1	long
,	O
i	long
;	O
int	O
status	int
;	O
double	O
log_mv_Ga	double
,	O
log_det_V	double
,	O
log_det_X	double
,	O
tr_Vinv_X	double
;	O
log_mv_Ga	double
=	O
d	long
*	O
(	O
d	long
-	O
1	int
)	O
*	O
0.25	int
*	O
log	function
(	O
M_PI	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
d	long
;	O
++	O
i	long
)	O
{	O
log_mv_Ga	double
+=	O
gsl_sf_lngamma	function
(	O
(	O
df	pointer
-	O
i	long
+	O
1	int
)	O
*	O
0.5	int
)	O
;	O
}	O
log_det_V	double
=	O
log	function
(	O
gsl_matrix_get	function
(	O
L	pointer
,	O
0	int
,	O
0	int
)	O
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
d	long
;	O
++	O
i	long
)	O
{	O
log_det_V	double
+=	O
log	function
(	O
gsl_matrix_get	function
(	O
L	pointer
,	O
i	long
,	O
i	long
)	O
)	O
;	O
}	O
log_det_V	double
=	O
2	int
*	O
log_det_V	double
;	O
log_det_X	double
=	O
log	function
(	O
gsl_matrix_get	function
(	O
L_X	pointer
,	O
0	int
,	O
0	int
)	O
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
d	long
;	O
++	O
i	long
)	O
{	O
log_det_X	double
+=	O
log	function
(	O
gsl_matrix_get	function
(	O
L_X	pointer
,	O
i	long
,	O
i	long
)	O
)	O
;	O
}	O
log_det_X	double
=	O
2	int
*	O
log_det_X	double
;	O
status	int
=	O
gsl_linalg_cholesky_solve_mat	function
(	O
L	pointer
,	O
X	pointer
,	O
work	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
tr_Vinv_X	double
=	O
gsl_matrix_get	function
(	O
work	pointer
,	O
0	int
,	O
0	int
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
d	long
;	O
++	O
i	long
)	O
{	O
tr_Vinv_X	double
+=	O
gsl_matrix_get	function
(	O
work	pointer
,	O
i	long
,	O
i	long
)	O
;	O
}	O
*	O
result	pointer
=	O
-	O
(	O
0.5	int
*	O
df	pointer
*	O
d	long
)	O
*	O
log	function
(	O
2.0	int
)	O
-	O
(	O
0.5	int
*	O
df	pointer
)	O
*	O
log_det_V	double
-	O
log_mv_Ga	double
+	O
0.5	int
*	O
(	O
df	pointer
-	O
d	long
-	O
1	int
)	O
*	O
log_det_X	double
-	O
0.5	int
*	O
tr_Vinv_X	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_ran_wishart_pdf	function
(	O
const	O
gsl_matrix	struct
*	O
X	pointer
,	O
const	O
gsl_matrix	struct
*	O
L_X	pointer
,	O
const	O
double	O
df	pointer
,	O
const	O
gsl_matrix	struct
*	O
L	pointer
,	O
double	O
*	O
result	pointer
,	O
gsl_matrix	struct
*	O
work	pointer
)	O
{	O
double	O
logpdf	double
;	O
int	O
status	int
=	O
gsl_ran_wishart_log_pdf	function
(	O
X	pointer
,	O
L_X	pointer
,	O
df	pointer
,	O
L	pointer
,	O
&	O
logpdf	double
,	O
work	pointer
)	O
;	O
if	O
(	O
status	int
==	O
GSL_SUCCESS	int
)	O
*	O
result	pointer
=	O
exp	function
(	O
logpdf	double
)	O
;	O
return	O
status	int
;	O
}	O
