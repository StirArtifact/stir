static	O
bool	bool
seen_triple	function
(	O
Hash_table	struct
*	O
*	O
ht	pointer
,	O
char	O
const	O
*	O
filename	pointer
,	O
struct	O
stat	struct
const	O
*	O
st	pointer
)	O
{	O
if	O
(	O
*	O
ht	pointer
==	O
NULL	O
)	O
{	O
size_t	long
initial_capacity	long
=	O
7	int
;	O
*	O
ht	pointer
=	O
hash_initialize	function
(	O
initial_capacity	long
,	O
NULL	O
,	O
triple_hash	function
,	O
triple_compare_ino_str	function
,	O
triple_free	function
)	O
;	O
if	O
(	O
*	O
ht	pointer
==	O
NULL	O
)	O
xalloc_die	function
(	O
)	O
;	O
}	O
if	O
(	O
seen_file	function
(	O
*	O
ht	pointer
,	O
filename	pointer
,	O
st	pointer
)	O
)	O
return	O
true	int
;	O
record_file	function
(	O
*	O
ht	pointer
,	O
filename	pointer
,	O
st	pointer
)	O
;	O
return	O
false	int
;	O
}	O
char	O
*	O
canonicalize_filename_mode	function
(	O
const	O
char	O
*	O
name	pointer
,	O
canonicalize_mode_t	enum
can_mode	enum
)	O
{	O
char	O
*	O
rname	pointer
,	O
*	O
dest	pointer
,	O
*	O
extra_buf	pointer
=	O
NULL	O
;	O
char	O
const	O
*	O
start	pointer
;	O
char	O
const	O
*	O
end	pointer
;	O
char	O
const	O
*	O
rname_limit	pointer
;	O
size_t	long
extra_len	long
=	O
0	int
;	O
Hash_table	struct
*	O
ht	pointer
=	O
NULL	O
;	O
int	O
saved_errno	int
;	O
int	O
can_flags	int
=	O
can_mode	enum
&	O
~	O
CAN_MODE_MASK	O
;	O
bool	bool
logical	bool
=	O
can_flags	int
&	O
CAN_NOLINKS	int
;	O
size_t	long
prefix_len	long
;	O
can_mode	enum
&=	O
CAN_MODE_MASK	O
;	O
if	O
(	O
MULTIPLE_BITS_SET	O
(	O
can_mode	enum
)	O
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
name	pointer
==	O
NULL	O
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
name	pointer
[	O
0	int
]	O
==	O
'\0'	O
)	O
{	O
errno	O
=	O
ENOENT	int
;	O
return	O
NULL	O
;	O
}	O
prefix_len	long
=	O
FILE_SYSTEM_PREFIX_LEN	int
(	O
name	pointer
)	O
;	O
if	O
(	O
!	O
IS_ABSOLUTE_FILE_NAME	O
(	O
name	pointer
)	O
)	O
{	O
rname	pointer
=	O
xgetcwd	function
(	O
)	O
;	O
if	O
(	O
!	O
rname	pointer
)	O
return	O
NULL	O
;	O
dest	pointer
=	O
strchr	function
(	O
rname	pointer
,	O
'\0'	O
)	O
;	O
if	O
(	O
dest	pointer
-	O
rname	pointer
<	O
PATH_MAX	int
)	O
{	O
char	O
*	O
p	pointer
=	O
xrealloc	function
(	O
rname	pointer
,	O
PATH_MAX	int
)	O
;	O
dest	pointer
=	O
p	pointer
+	O
(	O
dest	pointer
-	O
rname	pointer
)	O
;	O
rname	pointer
=	O
p	pointer
;	O
rname_limit	pointer
=	O
rname	pointer
+	O
PATH_MAX	int
;	O
}	O
else	O
{	O
rname_limit	pointer
=	O
dest	pointer
;	O
}	O
start	pointer
=	O
name	pointer
;	O
prefix_len	long
=	O
FILE_SYSTEM_PREFIX_LEN	int
(	O
rname	pointer
)	O
;	O
}	O
else	O
{	O
rname	pointer
=	O
xmalloc	function
(	O
PATH_MAX	int
)	O
;	O
rname_limit	pointer
=	O
rname	pointer
+	O
PATH_MAX	int
;	O
dest	pointer
=	O
rname	pointer
;	O
if	O
(	O
prefix_len	long
)	O
{	O
memcpy	function
(	O
rname	pointer
,	O
name	pointer
,	O
prefix_len	long
)	O
;	O
dest	pointer
+=	O
prefix_len	long
;	O
}	O
*	O
dest	pointer
++	O
=	O
'/'	O
;	O
if	O
(	O
DOUBLE_SLASH_IS_DISTINCT_ROOT	int
)	O
{	O
if	O
(	O
ISSLASH	O
(	O
name	pointer
[	O
1	int
]	O
)	O
&&	O
!	O
ISSLASH	O
(	O
name	pointer
[	O
2	int
]	O
)	O
&&	O
!	O
prefix_len	long
)	O
*	O
dest	pointer
++	O
=	O
'/'	O
;	O
*	O
dest	pointer
=	O
'\0'	O
;	O
}	O
start	pointer
=	O
name	pointer
+	O
prefix_len	long
;	O
}	O
for	O
(	O
;	O
*	O
start	pointer
;	O
start	pointer
=	O
end	pointer
)	O
{	O
while	O
(	O
ISSLASH	O
(	O
*	O
start	pointer
)	O
)	O
++	O
start	pointer
;	O
for	O
(	O
end	pointer
=	O
start	pointer
;	O
*	O
end	pointer
&&	O
!	O
ISSLASH	O
(	O
*	O
end	pointer
)	O
;	O
++	O
end	pointer
)	O
;	O
if	O
(	O
end	pointer
-	O
start	pointer
==	O
0	int
)	O
break	O
;	O
else	O
if	O
(	O
end	pointer
-	O
start	pointer
==	O
1	int
&&	O
start	pointer
[	O
0	int
]	O
==	O
'.'	O
)	O
;	O
else	O
if	O
(	O
end	pointer
-	O
start	pointer
==	O
2	int
&&	O
start	pointer
[	O
0	int
]	O
==	O
'.'	O
&&	O
start	pointer
[	O
1	int
]	O
==	O
'.'	O
)	O
{	O
if	O
(	O
dest	pointer
>	O
rname	pointer
+	O
prefix_len	long
+	O
1	int
)	O
for	O
(	O
--	O
dest	pointer
;	O
dest	pointer
>	O
rname	pointer
&&	O
!	O
ISSLASH	O
(	O
dest	pointer
[	O
-	O
1	int
]	O
)	O
;	O
--	O
dest	pointer
)	O
continue	O
;	O
if	O
(	O
DOUBLE_SLASH_IS_DISTINCT_ROOT	int
&&	O
dest	pointer
==	O
rname	pointer
+	O
1	int
&&	O
!	O
prefix_len	long
&&	O
ISSLASH	O
(	O
*	O
dest	pointer
)	O
&&	O
!	O
ISSLASH	O
(	O
dest	pointer
[	O
1	int
]	O
)	O
)	O
dest	pointer
++	O
;	O
}	O
else	O
{	O
struct	O
stat	struct
st	pointer
;	O
if	O
(	O
!	O
ISSLASH	O
(	O
dest	pointer
[	O
-	O
1	int
]	O
)	O
)	O
*	O
dest	pointer
++	O
=	O
'/'	O
;	O
if	O
(	O
dest	pointer
+	O
(	O
end	pointer
-	O
start	pointer
)	O
>=	O
rname_limit	pointer
)	O
{	O
ptrdiff_t	long
dest_offset	long
=	O
dest	pointer
-	O
rname	pointer
;	O
size_t	long
new_size	long
=	O
rname_limit	pointer
-	O
rname	pointer
;	O
if	O
(	O
end	pointer
-	O
start	pointer
+	O
1	int
>	O
PATH_MAX	int
)	O
new_size	long
+=	O
end	pointer
-	O
start	pointer
+	O
1	int
;	O
else	O
new_size	long
+=	O
PATH_MAX	int
;	O
rname	pointer
=	O
xrealloc	function
(	O
rname	pointer
,	O
new_size	long
)	O
;	O
rname_limit	pointer
=	O
rname	pointer
+	O
new_size	long
;	O
dest	pointer
=	O
rname	pointer
+	O
dest_offset	long
;	O
}	O
dest	pointer
=	O
memcpy	function
(	O
dest	pointer
,	O
start	pointer
,	O
end	pointer
-	O
start	pointer
)	O
;	O
dest	pointer
+=	O
end	pointer
-	O
start	pointer
;	O
*	O
dest	pointer
=	O
'\0'	O
;	O
if	O
(	O
logical	bool
&&	O
(	O
can_mode	enum
==	O
CAN_MISSING	int
)	O
)	O
{	O
st	pointer
.	O
st_mode	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
(	O
logical	bool
?	O
stat	struct
(	O
rname	pointer
,	O
&	O
st	pointer
)	O
:	O
lstat	function
(	O
rname	pointer
,	O
&	O
st	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
saved_errno	int
=	O
errno	O
;	O
if	O
(	O
can_mode	enum
==	O
CAN_EXISTING	int
)	O
goto	O
error	O
;	O
if	O
(	O
can_mode	enum
==	O
CAN_ALL_BUT_LAST	int
)	O
{	O
if	O
(	O
end	pointer
[	O
strspn	function
(	O
end	pointer
,	O
SLASHES	pointer
)	O
]	O
||	O
saved_errno	int
!=	O
ENOENT	int
)	O
goto	O
error	O
;	O
continue	O
;	O
}	O
st	pointer
.	O
st_mode	int
=	O
0	int
;	O
}	O
if	O
(	O
S_ISLNK	O
(	O
st	pointer
.	O
st_mode	int
)	O
)	O
{	O
char	O
*	O
buf	pointer
;	O
size_t	long
n	long
,	O
len	long
;	O
if	O
(	O
seen_triple	function
(	O
&	O
ht	pointer
,	O
name	pointer
,	O
&	O
st	pointer
)	O
)	O
{	O
if	O
(	O
can_mode	enum
==	O
CAN_MISSING	int
)	O
continue	O
;	O
saved_errno	int
=	O
ELOOP	int
;	O
goto	O
error	O
;	O
}	O
buf	pointer
=	O
areadlink_with_size	function
(	O
rname	pointer
,	O
st	pointer
.	O
st_size	long
)	O
;	O
if	O
(	O
!	O
buf	pointer
)	O
{	O
if	O
(	O
can_mode	enum
==	O
CAN_MISSING	int
&&	O
errno	O
!=	O
ENOMEM	int
)	O
continue	O
;	O
saved_errno	int
=	O
errno	O
;	O
goto	O
error	O
;	O
}	O
n	long
=	O
strlen	function
(	O
buf	pointer
)	O
;	O
len	long
=	O
strlen	function
(	O
end	pointer
)	O
;	O
if	O
(	O
!	O
extra_len	long
)	O
{	O
extra_len	long
=	O
(	O
(	O
n	long
+	O
len	long
+	O
1	int
)	O
>	O
PATH_MAX	int
)	O
?	O
(	O
n	long
+	O
len	long
+	O
1	int
)	O
:	O
PATH_MAX	int
;	O
extra_buf	pointer
=	O
xmalloc	function
(	O
extra_len	long
)	O
;	O
}	O
else	O
if	O
(	O
(	O
n	long
+	O
len	long
+	O
1	int
)	O
>	O
extra_len	long
)	O
{	O
extra_len	long
=	O
n	long
+	O
len	long
+	O
1	int
;	O
extra_buf	pointer
=	O
xrealloc	function
(	O
extra_buf	pointer
,	O
extra_len	long
)	O
;	O
}	O
memmove	function
(	O
&	O
extra_buf	pointer
[	O
n	long
]	O
,	O
end	pointer
,	O
len	long
+	O
1	int
)	O
;	O
name	pointer
=	O
end	pointer
=	O
memcpy	function
(	O
extra_buf	pointer
,	O
buf	pointer
,	O
n	long
)	O
;	O
if	O
(	O
IS_ABSOLUTE_FILE_NAME	O
(	O
buf	pointer
)	O
)	O
{	O
size_t	long
pfxlen	long
=	O
FILE_SYSTEM_PREFIX_LEN	int
(	O
buf	pointer
)	O
;	O
if	O
(	O
pfxlen	long
)	O
memcpy	function
(	O
rname	pointer
,	O
buf	pointer
,	O
pfxlen	long
)	O
;	O
dest	pointer
=	O
rname	pointer
+	O
pfxlen	long
;	O
*	O
dest	pointer
++	O
=	O
'/'	O
;	O
if	O
(	O
DOUBLE_SLASH_IS_DISTINCT_ROOT	int
)	O
{	O
if	O
(	O
ISSLASH	O
(	O
buf	pointer
[	O
1	int
]	O
)	O
&&	O
!	O
ISSLASH	O
(	O
buf	pointer
[	O
2	int
]	O
)	O
&&	O
!	O
pfxlen	long
)	O
*	O
dest	pointer
++	O
=	O
'/'	O
;	O
*	O
dest	pointer
=	O
'\0'	O
;	O
}	O
prefix_len	long
=	O
pfxlen	long
;	O
}	O
else	O
{	O
if	O
(	O
dest	pointer
>	O
rname	pointer
+	O
prefix_len	long
+	O
1	int
)	O
for	O
(	O
--	O
dest	pointer
;	O
dest	pointer
>	O
rname	pointer
&&	O
!	O
ISSLASH	O
(	O
dest	pointer
[	O
-	O
1	int
]	O
)	O
;	O
--	O
dest	pointer
)	O
continue	O
;	O
if	O
(	O
DOUBLE_SLASH_IS_DISTINCT_ROOT	int
&&	O
dest	pointer
==	O
rname	pointer
+	O
1	int
&&	O
ISSLASH	O
(	O
*	O
dest	pointer
)	O
&&	O
!	O
ISSLASH	O
(	O
dest	pointer
[	O
1	int
]	O
)	O
&&	O
!	O
prefix_len	long
)	O
dest	pointer
++	O
;	O
}	O
free	function
(	O
buf	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
S_ISDIR	O
(	O
st	pointer
.	O
st_mode	int
)	O
&&	O
*	O
end	pointer
&&	O
(	O
can_mode	enum
!=	O
CAN_MISSING	int
)	O
)	O
{	O
saved_errno	int
=	O
ENOTDIR	int
;	O
goto	O
error	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
dest	pointer
>	O
rname	pointer
+	O
prefix_len	long
+	O
1	int
&&	O
ISSLASH	O
(	O
dest	pointer
[	O
-	O
1	int
]	O
)	O
)	O
--	O
dest	pointer
;	O
if	O
(	O
DOUBLE_SLASH_IS_DISTINCT_ROOT	int
&&	O
dest	pointer
==	O
rname	pointer
+	O
1	int
&&	O
!	O
prefix_len	long
&&	O
ISSLASH	O
(	O
*	O
dest	pointer
)	O
&&	O
!	O
ISSLASH	O
(	O
dest	pointer
[	O
1	int
]	O
)	O
)	O
dest	pointer
++	O
;	O
*	O
dest	pointer
=	O
'\0'	O
;	O
if	O
(	O
rname_limit	pointer
!=	O
dest	pointer
+	O
1	int
)	O
rname	pointer
=	O
xrealloc	function
(	O
rname	pointer
,	O
dest	pointer
-	O
rname	pointer
+	O
1	int
)	O
;	O
free	function
(	O
extra_buf	pointer
)	O
;	O
if	O
(	O
ht	pointer
)	O
hash_free	function
(	O
ht	pointer
)	O
;	O
return	O
rname	pointer
;	O
error	O
:	O
free	function
(	O
extra_buf	pointer
)	O
;	O
free	function
(	O
rname	pointer
)	O
;	O
if	O
(	O
ht	pointer
)	O
hash_free	function
(	O
ht	pointer
)	O
;	O
errno	O
=	O
saved_errno	int
;	O
return	O
NULL	O
;	O
}	O
