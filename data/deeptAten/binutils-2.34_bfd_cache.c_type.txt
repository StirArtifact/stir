enum	O
cache_flag	enum
{	O
CACHE_NORMAL	int
=	O
0	int
,	O
CACHE_NO_OPEN	int
=	O
1	int
,	O
CACHE_NO_SEEK	int
=	O
2	int
,	O
CACHE_NO_SEEK_ERROR	int
=	O
4	int
}	O
;	O
static	O
int	O
max_open_files	int
=	O
0	int
;	O
static	O
int	O
bfd_cache_max_open	function
(	O
void	O
)	O
{	O
if	O
(	O
max_open_files	int
==	O
0	int
)	O
{	O
int	O
max	int
;	O
struct	O
rlimit	struct
rlim	struct
;	O
if	O
(	O
getrlimit	function
(	O
RLIMIT_NOFILE	int
,	O
&	O
rlim	struct
)	O
==	O
0	int
&&	O
rlim	struct
.	O
rlim_cur	long
!=	O
(	O
rlim_t	long
)	O
RLIM_INFINITY	O
)	O
max	int
=	O
rlim	struct
.	O
rlim_cur	long
/	O
8	int
;	O
else	O
max	int
=	O
sysconf	function
(	O
_SC_OPEN_MAX	int
)	O
/	O
8	int
;	O
max_open_files	int
=	O
max	int
<	O
10	int
?	O
10	int
:	O
max	int
;	O
}	O
return	O
max_open_files	int
;	O
}	O
static	O
int	O
open_files	int
;	O
static	O
bfd	struct
*	O
bfd_last_cache	pointer
=	O
NULL	O
;	O
static	O
void	O
insert	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
if	O
(	O
bfd_last_cache	pointer
==	O
NULL	O
)	O
{	O
abfd	pointer
->	O
lru_next	pointer
=	O
abfd	pointer
;	O
abfd	pointer
->	O
lru_prev	pointer
=	O
abfd	pointer
;	O
}	O
else	O
{	O
abfd	pointer
->	O
lru_next	pointer
=	O
bfd_last_cache	pointer
;	O
abfd	pointer
->	O
lru_prev	pointer
=	O
bfd_last_cache	pointer
->	O
lru_prev	pointer
;	O
abfd	pointer
->	O
lru_prev	pointer
->	O
lru_next	pointer
=	O
abfd	pointer
;	O
abfd	pointer
->	O
lru_next	pointer
->	O
lru_prev	pointer
=	O
abfd	pointer
;	O
}	O
bfd_last_cache	pointer
=	O
abfd	pointer
;	O
}	O
static	O
void	O
snip	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
abfd	pointer
->	O
lru_prev	pointer
->	O
lru_next	pointer
=	O
abfd	pointer
->	O
lru_next	pointer
;	O
abfd	pointer
->	O
lru_next	pointer
->	O
lru_prev	pointer
=	O
abfd	pointer
->	O
lru_prev	pointer
;	O
if	O
(	O
abfd	pointer
==	O
bfd_last_cache	pointer
)	O
{	O
bfd_last_cache	pointer
=	O
abfd	pointer
->	O
lru_next	pointer
;	O
if	O
(	O
abfd	pointer
==	O
bfd_last_cache	pointer
)	O
bfd_last_cache	pointer
=	O
NULL	O
;	O
}	O
}	O
static	O
bfd_boolean	int
bfd_cache_delete	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
bfd_boolean	int
ret	pointer
;	O
if	O
(	O
fclose	function
(	O
(	O
FILE	struct
*	O
)	O
abfd	pointer
->	O
iostream	pointer
)	O
==	O
0	int
)	O
ret	pointer
=	O
TRUE	int
;	O
else	O
{	O
ret	pointer
=	O
FALSE	int
;	O
bfd_set_error	function
(	O
bfd_error_system_call	int
)	O
;	O
}	O
snip	function
(	O
abfd	pointer
)	O
;	O
abfd	pointer
->	O
iostream	pointer
=	O
NULL	O
;	O
--	O
open_files	int
;	O
return	O
ret	pointer
;	O
}	O
static	O
bfd_boolean	int
close_one	function
(	O
void	O
)	O
{	O
register	O
bfd	struct
*	O
to_kill	pointer
;	O
if	O
(	O
bfd_last_cache	pointer
==	O
NULL	O
)	O
to_kill	pointer
=	O
NULL	O
;	O
else	O
{	O
for	O
(	O
to_kill	pointer
=	O
bfd_last_cache	pointer
->	O
lru_prev	pointer
;	O
!	O
to_kill	pointer
->	O
cacheable	int
;	O
to_kill	pointer
=	O
to_kill	pointer
->	O
lru_prev	pointer
)	O
{	O
if	O
(	O
to_kill	pointer
==	O
bfd_last_cache	pointer
)	O
{	O
to_kill	pointer
=	O
NULL	O
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
to_kill	pointer
==	O
NULL	O
)	O
{	O
return	O
TRUE	int
;	O
}	O
to_kill	pointer
->	O
where	long
=	O
_bfd_real_ftell	function
(	O
(	O
FILE	struct
*	O
)	O
to_kill	pointer
->	O
iostream	pointer
)	O
;	O
return	O
bfd_cache_delete	function
(	O
to_kill	pointer
)	O
;	O
}	O
static	O
FILE	struct
*	O
bfd_cache_lookup_worker	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
enum	O
cache_flag	enum
flag	enum
)	O
{	O
if	O
(	O
(	O
abfd	pointer
->	O
flags	int
&	O
BFD_IN_MEMORY	int
)	O
!=	O
0	int
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
abfd	pointer
->	O
my_archive	pointer
!=	O
NULL	O
&&	O
!	O
bfd_is_thin_archive	function
(	O
abfd	pointer
->	O
my_archive	pointer
)	O
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
abfd	pointer
->	O
iostream	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
abfd	pointer
!=	O
bfd_last_cache	pointer
)	O
{	O
snip	function
(	O
abfd	pointer
)	O
;	O
insert	function
(	O
abfd	pointer
)	O
;	O
}	O
return	O
(	O
FILE	struct
*	O
)	O
abfd	pointer
->	O
iostream	pointer
;	O
}	O
if	O
(	O
flag	enum
&	O
CACHE_NO_OPEN	int
)	O
return	O
NULL	O
;	O
if	O
(	O
bfd_open_file	function
(	O
abfd	pointer
)	O
==	O
NULL	O
)	O
;	O
else	O
if	O
(	O
!	O
(	O
flag	enum
&	O
CACHE_NO_SEEK	int
)	O
&&	O
_bfd_real_fseek	function
(	O
(	O
FILE	struct
*	O
)	O
abfd	pointer
->	O
iostream	pointer
,	O
abfd	pointer
->	O
where	long
,	O
SEEK_SET	int
)	O
!=	O
0	int
&&	O
!	O
(	O
flag	enum
&	O
CACHE_NO_SEEK_ERROR	int
)	O
)	O
bfd_set_error	function
(	O
bfd_error_system_call	int
)	O
;	O
else	O
return	O
(	O
FILE	struct
*	O
)	O
abfd	pointer
->	O
iostream	pointer
;	O
_bfd_error_handler	function
(	O
_	O
(	O
"reopening %pB: %s\n"	pointer
)	O
,	O
abfd	pointer
,	O
bfd_errmsg	function
(	O
bfd_get_error	function
(	O
)	O
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
static	O
file_ptr	long
cache_btell	function
(	O
struct	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
FILE	struct
*	O
f	pointer
=	O
bfd_cache_lookup	O
(	O
abfd	pointer
,	O
CACHE_NO_OPEN	int
)	O
;	O
if	O
(	O
f	pointer
==	O
NULL	O
)	O
return	O
abfd	pointer
->	O
where	long
;	O
return	O
_bfd_real_ftell	function
(	O
f	pointer
)	O
;	O
}	O
static	O
int	O
cache_bseek	function
(	O
struct	O
bfd	struct
*	O
abfd	pointer
,	O
file_ptr	long
offset	long
,	O
int	O
whence	int
)	O
{	O
FILE	struct
*	O
f	pointer
=	O
bfd_cache_lookup	O
(	O
abfd	pointer
,	O
whence	int
!=	O
SEEK_CUR	int
?	O
CACHE_NO_SEEK	int
:	O
CACHE_NORMAL	int
)	O
;	O
if	O
(	O
f	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
return	O
_bfd_real_fseek	function
(	O
f	pointer
,	O
offset	long
,	O
whence	int
)	O
;	O
}	O
static	O
file_ptr	long
cache_bread_1	function
(	O
FILE	struct
*	O
f	pointer
,	O
void	O
*	O
buf	pointer
,	O
file_ptr	long
nbytes	long
)	O
{	O
file_ptr	long
nread	long
;	O
nread	long
=	O
fread	function
(	O
buf	pointer
,	O
1	int
,	O
nbytes	long
,	O
f	pointer
)	O
;	O
if	O
(	O
nread	long
<	O
nbytes	long
&&	O
ferror	function
(	O
f	pointer
)	O
)	O
{	O
bfd_set_error	function
(	O
bfd_error_system_call	int
)	O
;	O
return	O
nread	long
;	O
}	O
if	O
(	O
nread	long
<	O
nbytes	long
)	O
bfd_set_error	function
(	O
bfd_error_file_truncated	int
)	O
;	O
return	O
nread	long
;	O
}	O
static	O
file_ptr	long
cache_bread	function
(	O
struct	O
bfd	struct
*	O
abfd	pointer
,	O
void	O
*	O
buf	pointer
,	O
file_ptr	long
nbytes	long
)	O
{	O
file_ptr	long
nread	long
=	O
0	int
;	O
FILE	struct
*	O
f	pointer
;	O
f	pointer
=	O
bfd_cache_lookup	O
(	O
abfd	pointer
,	O
CACHE_NORMAL	int
)	O
;	O
if	O
(	O
f	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
while	O
(	O
nread	long
<	O
nbytes	long
)	O
{	O
const	O
file_ptr	long
max_chunk_size	long
=	O
0x800000	int
;	O
file_ptr	long
chunk_size	long
=	O
nbytes	long
-	O
nread	long
;	O
file_ptr	long
chunk_nread	long
;	O
if	O
(	O
chunk_size	long
>	O
max_chunk_size	long
)	O
chunk_size	long
=	O
max_chunk_size	long
;	O
chunk_nread	long
=	O
cache_bread_1	function
(	O
f	pointer
,	O
(	O
char	O
*	O
)	O
buf	pointer
+	O
nread	long
,	O
chunk_size	long
)	O
;	O
if	O
(	O
nread	long
==	O
0	int
||	O
chunk_nread	long
>	O
0	int
)	O
nread	long
+=	O
chunk_nread	long
;	O
if	O
(	O
chunk_nread	long
<	O
chunk_size	long
)	O
break	O
;	O
}	O
return	O
nread	long
;	O
}	O
static	O
file_ptr	long
cache_bwrite	function
(	O
struct	O
bfd	struct
*	O
abfd	pointer
,	O
const	O
void	O
*	O
from	pointer
,	O
file_ptr	long
nbytes	long
)	O
{	O
file_ptr	long
nwrite	long
;	O
FILE	struct
*	O
f	pointer
=	O
bfd_cache_lookup	O
(	O
abfd	pointer
,	O
CACHE_NORMAL	int
)	O
;	O
if	O
(	O
f	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
nwrite	long
=	O
fwrite	function
(	O
from	pointer
,	O
1	int
,	O
nbytes	long
,	O
f	pointer
)	O
;	O
if	O
(	O
nwrite	long
<	O
nbytes	long
&&	O
ferror	function
(	O
f	pointer
)	O
)	O
{	O
bfd_set_error	function
(	O
bfd_error_system_call	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
nwrite	long
;	O
}	O
static	O
int	O
cache_bclose	function
(	O
struct	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
return	O
bfd_cache_close	function
(	O
abfd	pointer
)	O
-	O
1	int
;	O
}	O
static	O
int	O
cache_bflush	function
(	O
struct	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
int	O
sts	int
;	O
FILE	struct
*	O
f	pointer
=	O
bfd_cache_lookup	O
(	O
abfd	pointer
,	O
CACHE_NO_OPEN	int
)	O
;	O
if	O
(	O
f	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
sts	int
=	O
fflush	function
(	O
f	pointer
)	O
;	O
if	O
(	O
sts	int
<	O
0	int
)	O
bfd_set_error	function
(	O
bfd_error_system_call	int
)	O
;	O
return	O
sts	int
;	O
}	O
static	O
int	O
cache_bstat	function
(	O
struct	O
bfd	struct
*	O
abfd	pointer
,	O
struct	O
stat	struct
*	O
sb	pointer
)	O
{	O
int	O
sts	int
;	O
FILE	struct
*	O
f	pointer
=	O
bfd_cache_lookup	O
(	O
abfd	pointer
,	O
CACHE_NO_SEEK_ERROR	int
)	O
;	O
if	O
(	O
f	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
sts	int
=	O
fstat	function
(	O
fileno	function
(	O
f	pointer
)	O
,	O
sb	pointer
)	O
;	O
if	O
(	O
sts	int
<	O
0	int
)	O
bfd_set_error	function
(	O
bfd_error_system_call	int
)	O
;	O
return	O
sts	int
;	O
}	O
static	O
void	O
*	O
cache_bmmap	function
(	O
struct	O
bfd	struct
*	O
abfd	pointer
ATTRIBUTE_UNUSED	O
,	O
void	O
*	O
addr	pointer
ATTRIBUTE_UNUSED	O
,	O
bfd_size_type	long
len	long
ATTRIBUTE_UNUSED	O
,	O
int	O
prot	int
ATTRIBUTE_UNUSED	O
,	O
int	O
flags	int
ATTRIBUTE_UNUSED	O
,	O
file_ptr	long
offset	long
ATTRIBUTE_UNUSED	O
,	O
void	O
*	O
*	O
map_addr	pointer
ATTRIBUTE_UNUSED	O
,	O
bfd_size_type	long
*	O
map_len	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
void	O
*	O
ret	pointer
=	O
(	O
void	O
*	O
)	O
-	O
1	int
;	O
if	O
(	O
(	O
abfd	pointer
->	O
flags	int
&	O
BFD_IN_MEMORY	int
)	O
!=	O
0	int
)	O
abort	function
(	O
)	O
;	O
else	O
{	O
static	O
uintptr_t	long
pagesize_m1	long
;	O
FILE	struct
*	O
f	pointer
;	O
file_ptr	long
pg_offset	long
;	O
bfd_size_type	long
pg_len	long
;	O
f	pointer
=	O
bfd_cache_lookup	O
(	O
abfd	pointer
,	O
CACHE_NO_SEEK_ERROR	int
)	O
;	O
if	O
(	O
f	pointer
==	O
NULL	O
)	O
return	O
ret	pointer
;	O
if	O
(	O
pagesize_m1	long
==	O
0	int
)	O
pagesize_m1	long
=	O
getpagesize	function
(	O
)	O
-	O
1	int
;	O
pg_offset	long
=	O
offset	long
&	O
~	O
pagesize_m1	long
;	O
pg_len	long
=	O
(	O
len	long
+	O
(	O
offset	long
-	O
pg_offset	long
)	O
+	O
pagesize_m1	long
)	O
&	O
~	O
pagesize_m1	long
;	O
ret	pointer
=	O
mmap	function
(	O
addr	pointer
,	O
pg_len	long
,	O
prot	int
,	O
flags	int
,	O
fileno	function
(	O
f	pointer
)	O
,	O
pg_offset	long
)	O
;	O
if	O
(	O
ret	pointer
==	O
(	O
void	O
*	O
)	O
-	O
1	int
)	O
bfd_set_error	function
(	O
bfd_error_system_call	int
)	O
;	O
else	O
{	O
*	O
map_addr	pointer
=	O
ret	pointer
;	O
*	O
map_len	pointer
=	O
pg_len	long
;	O
ret	pointer
=	O
(	O
char	O
*	O
)	O
ret	pointer
+	O
(	O
offset	long
&	O
pagesize_m1	long
)	O
;	O
}	O
}	O
return	O
ret	pointer
;	O
}	O
static	O
const	O
struct	O
bfd_iovec	struct
cache_iovec	struct
=	O
{	O
&	O
cache_bread	function
,	O
&	O
cache_bwrite	function
,	O
&	O
cache_btell	function
,	O
&	O
cache_bseek	function
,	O
&	O
cache_bclose	function
,	O
&	O
cache_bflush	function
,	O
&	O
cache_bstat	function
,	O
&	O
cache_bmmap	function
}	O
;	O
bfd_boolean	int
bfd_cache_init	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
BFD_ASSERT	O
(	O
abfd	pointer
->	O
iostream	pointer
!=	O
NULL	O
)	O
;	O
if	O
(	O
open_files	int
>=	O
bfd_cache_max_open	function
(	O
)	O
)	O
{	O
if	O
(	O
!	O
close_one	function
(	O
)	O
)	O
return	O
FALSE	int
;	O
}	O
abfd	pointer
->	O
iovec	struct
=	O
&	O
cache_iovec	struct
;	O
insert	function
(	O
abfd	pointer
)	O
;	O
++	O
open_files	int
;	O
return	O
TRUE	int
;	O
}	O
bfd_boolean	int
bfd_cache_close	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
if	O
(	O
abfd	pointer
->	O
iovec	struct
!=	O
&	O
cache_iovec	struct
)	O
return	O
TRUE	int
;	O
if	O
(	O
abfd	pointer
->	O
iostream	pointer
==	O
NULL	O
)	O
return	O
TRUE	int
;	O
return	O
bfd_cache_delete	function
(	O
abfd	pointer
)	O
;	O
}	O
bfd_boolean	int
bfd_cache_close_all	function
(	O
void	O
)	O
{	O
bfd_boolean	int
ret	pointer
=	O
TRUE	int
;	O
while	O
(	O
bfd_last_cache	pointer
!=	O
NULL	O
)	O
ret	pointer
&=	O
bfd_cache_close	function
(	O
bfd_last_cache	pointer
)	O
;	O
return	O
ret	pointer
;	O
}	O
FILE	struct
*	O
bfd_open_file	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
abfd	pointer
->	O
cacheable	int
=	O
TRUE	int
;	O
if	O
(	O
open_files	int
>=	O
bfd_cache_max_open	function
(	O
)	O
)	O
{	O
if	O
(	O
!	O
close_one	function
(	O
)	O
)	O
return	O
NULL	O
;	O
}	O
switch	O
(	O
abfd	pointer
->	O
direction	enum
)	O
{	O
case	O
read_direction	int
:	O
case	O
no_direction	int
:	O
abfd	pointer
->	O
iostream	pointer
=	O
_bfd_real_fopen	function
(	O
abfd	pointer
->	O
filename	pointer
,	O
FOPEN_RB	pointer
)	O
;	O
break	O
;	O
case	O
both_direction	int
:	O
case	O
write_direction	int
:	O
if	O
(	O
abfd	pointer
->	O
opened_once	int
)	O
{	O
abfd	pointer
->	O
iostream	pointer
=	O
_bfd_real_fopen	function
(	O
abfd	pointer
->	O
filename	pointer
,	O
FOPEN_RUB	pointer
)	O
;	O
if	O
(	O
abfd	pointer
->	O
iostream	pointer
==	O
NULL	O
)	O
abfd	pointer
->	O
iostream	pointer
=	O
_bfd_real_fopen	function
(	O
abfd	pointer
->	O
filename	pointer
,	O
FOPEN_WUB	pointer
)	O
;	O
}	O
else	O
{	O
struct	O
stat	struct
s	pointer
;	O
if	O
(	O
stat	struct
(	O
abfd	pointer
->	O
filename	pointer
,	O
&	O
s	pointer
)	O
==	O
0	int
&&	O
s	pointer
.	O
st_size	long
!=	O
0	int
)	O
unlink_if_ordinary	function
(	O
abfd	pointer
->	O
filename	pointer
)	O
;	O
abfd	pointer
->	O
iostream	pointer
=	O
_bfd_real_fopen	function
(	O
abfd	pointer
->	O
filename	pointer
,	O
FOPEN_WUB	pointer
)	O
;	O
abfd	pointer
->	O
opened_once	int
=	O
TRUE	int
;	O
}	O
break	O
;	O
}	O
if	O
(	O
abfd	pointer
->	O
iostream	pointer
==	O
NULL	O
)	O
bfd_set_error	function
(	O
bfd_error_system_call	int
)	O
;	O
else	O
{	O
if	O
(	O
!	O
bfd_cache_init	function
(	O
abfd	pointer
)	O
)	O
return	O
NULL	O
;	O
}	O
return	O
(	O
FILE	struct
*	O
)	O
abfd	pointer
->	O
iostream	pointer
;	O
}	O
