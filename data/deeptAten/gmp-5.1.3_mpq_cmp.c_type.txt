int	O
mpq_cmp	O
(	O
const	O
MP_RAT	struct
*	O
op1	pointer
,	O
const	O
MP_RAT	struct
*	O
op2	pointer
)	O
{	O
mp_size_t	long
num1_size	long
=	O
SIZ	O
(	O
NUM	O
(	O
op1	pointer
)	O
)	O
;	O
mp_size_t	long
den1_size	long
=	O
SIZ	O
(	O
DEN	O
(	O
op1	pointer
)	O
)	O
;	O
mp_size_t	long
num2_size	long
=	O
SIZ	O
(	O
NUM	O
(	O
op2	pointer
)	O
)	O
;	O
mp_size_t	long
den2_size	long
=	O
SIZ	O
(	O
DEN	O
(	O
op2	pointer
)	O
)	O
;	O
mp_size_t	long
tmp1_size	long
,	O
tmp2_size	long
;	O
mp_ptr	pointer
tmp1_ptr	pointer
,	O
tmp2_ptr	pointer
;	O
mp_size_t	long
num1_sign	long
;	O
int	O
cc	int
;	O
TMP_DECL	O
;	O
ASSERT	O
(	O
den1_size	long
>	O
0	int
)	O
;	O
ASSERT	O
(	O
den2_size	long
>	O
0	int
)	O
;	O
if	O
(	O
num1_size	long
==	O
0	int
)	O
return	O
-	O
num2_size	long
;	O
if	O
(	O
num2_size	long
==	O
0	int
)	O
return	O
num1_size	long
;	O
if	O
(	O
(	O
num1_size	long
^	O
num2_size	long
)	O
<	O
0	int
)	O
return	O
num1_size	long
;	O
num1_sign	long
=	O
num1_size	long
;	O
num1_size	long
=	O
ABS	O
(	O
num1_size	long
)	O
;	O
num2_size	long
=	O
ABS	O
(	O
num2_size	long
)	O
;	O
tmp1_size	long
=	O
num1_size	long
+	O
den2_size	long
;	O
tmp2_size	long
=	O
num2_size	long
+	O
den1_size	long
;	O
if	O
(	O
tmp1_size	long
>	O
tmp2_size	long
+	O
1	int
)	O
return	O
num1_sign	long
;	O
if	O
(	O
tmp2_size	long
>	O
tmp1_size	long
+	O
1	int
)	O
return	O
-	O
num1_sign	long
;	O
{	O
int	O
cnt1	int
,	O
cnt2	int
;	O
mp_bitcnt_t	long
bits1	long
,	O
bits2	long
;	O
count_leading_zeros	O
(	O
cnt1	int
,	O
PTR	O
(	O
NUM	O
(	O
op1	pointer
)	O
)	O
[	O
num1_size	long
-	O
1	int
]	O
)	O
;	O
count_leading_zeros	O
(	O
cnt2	int
,	O
PTR	O
(	O
DEN	O
(	O
op2	pointer
)	O
)	O
[	O
den2_size	long
-	O
1	int
]	O
)	O
;	O
bits1	long
=	O
tmp1_size	long
*	O
GMP_NUMB_BITS	O
-	O
cnt1	int
-	O
cnt2	int
+	O
2	int
*	O
GMP_NAIL_BITS	int
;	O
count_leading_zeros	O
(	O
cnt1	int
,	O
PTR	O
(	O
NUM	O
(	O
op2	pointer
)	O
)	O
[	O
num2_size	long
-	O
1	int
]	O
)	O
;	O
count_leading_zeros	O
(	O
cnt2	int
,	O
PTR	O
(	O
DEN	O
(	O
op1	pointer
)	O
)	O
[	O
den1_size	long
-	O
1	int
]	O
)	O
;	O
bits2	long
=	O
tmp2_size	long
*	O
GMP_NUMB_BITS	O
-	O
cnt1	int
-	O
cnt2	int
+	O
2	int
*	O
GMP_NAIL_BITS	int
;	O
if	O
(	O
bits1	long
>	O
bits2	long
+	O
1	int
)	O
return	O
num1_sign	long
;	O
if	O
(	O
bits2	long
>	O
bits1	long
+	O
1	int
)	O
return	O
-	O
num1_sign	long
;	O
}	O
TMP_MARK	O
;	O
TMP_ALLOC_LIMBS_2	O
(	O
tmp1_ptr	pointer
,	O
tmp1_size	long
,	O
tmp2_ptr	pointer
,	O
tmp2_size	long
)	O
;	O
if	O
(	O
num1_size	long
>=	O
den2_size	long
)	O
tmp1_size	long
-=	O
0	int
==	O
mpn_mul	O
(	O
tmp1_ptr	pointer
,	O
PTR	O
(	O
NUM	O
(	O
op1	pointer
)	O
)	O
,	O
num1_size	long
,	O
PTR	O
(	O
DEN	O
(	O
op2	pointer
)	O
)	O
,	O
den2_size	long
)	O
;	O
else	O
tmp1_size	long
-=	O
0	int
==	O
mpn_mul	O
(	O
tmp1_ptr	pointer
,	O
PTR	O
(	O
DEN	O
(	O
op2	pointer
)	O
)	O
,	O
den2_size	long
,	O
PTR	O
(	O
NUM	O
(	O
op1	pointer
)	O
)	O
,	O
num1_size	long
)	O
;	O
if	O
(	O
num2_size	long
>=	O
den1_size	long
)	O
tmp2_size	long
-=	O
0	int
==	O
mpn_mul	O
(	O
tmp2_ptr	pointer
,	O
PTR	O
(	O
NUM	O
(	O
op2	pointer
)	O
)	O
,	O
num2_size	long
,	O
PTR	O
(	O
DEN	O
(	O
op1	pointer
)	O
)	O
,	O
den1_size	long
)	O
;	O
else	O
tmp2_size	long
-=	O
0	int
==	O
mpn_mul	O
(	O
tmp2_ptr	pointer
,	O
PTR	O
(	O
DEN	O
(	O
op1	pointer
)	O
)	O
,	O
den1_size	long
,	O
PTR	O
(	O
NUM	O
(	O
op2	pointer
)	O
)	O
,	O
num2_size	long
)	O
;	O
cc	int
=	O
tmp1_size	long
-	O
tmp2_size	long
!=	O
0	int
?	O
tmp1_size	long
-	O
tmp2_size	long
:	O
mpn_cmp	O
(	O
tmp1_ptr	pointer
,	O
tmp2_ptr	pointer
,	O
tmp1_size	long
)	O
;	O
TMP_FREE	O
;	O
return	O
num1_sign	long
<	O
0	int
?	O
-	O
cc	int
:	O
cc	int
;	O
}	O
