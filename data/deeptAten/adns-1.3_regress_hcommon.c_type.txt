vbuf	struct
vb	pointer
;	O
FILE	struct
*	O
Toutputfile	pointer
=	O
0	int
;	O
struct	O
timeval	struct
currenttime	struct
;	O
const	O
struct	O
Terrno	struct
Terrnos	array
[	O
]	O
=	O
{	O
{	O
"EBADF"	pointer
,	O
EBADF	int
}	O
,	O
{	O
"EAGAIN"	pointer
,	O
EAGAIN	int
}	O
,	O
{	O
"EINPROGRESS"	pointer
,	O
EINPROGRESS	int
}	O
,	O
{	O
"EINTR"	pointer
,	O
EINTR	int
}	O
,	O
{	O
"EINVAL"	pointer
,	O
EINVAL	int
}	O
,	O
{	O
"EMSGSIZE"	pointer
,	O
EMSGSIZE	int
}	O
,	O
{	O
"ENOBUFS"	pointer
,	O
ENOBUFS	int
}	O
,	O
{	O
"ENOENT"	pointer
,	O
ENOENT	int
}	O
,	O
{	O
"ENOPROTOOPT"	pointer
,	O
ENOPROTOOPT	int
}	O
,	O
{	O
"ENOSPC"	pointer
,	O
ENOSPC	int
}	O
,	O
{	O
"EWOULDBLOCK"	pointer
,	O
EWOULDBLOCK	O
}	O
,	O
{	O
"EHOSTUNREACH"	pointer
,	O
EHOSTUNREACH	int
}	O
,	O
{	O
"ECONNRESET"	pointer
,	O
ECONNRESET	int
}	O
,	O
{	O
"ECONNREFUSED"	pointer
,	O
ECONNREFUSED	int
}	O
,	O
{	O
"EPIPE"	pointer
,	O
EPIPE	int
}	O
,	O
{	O
"ENOTSOCK"	pointer
,	O
ENOTSOCK	int
}	O
,	O
{	O
0	int
,	O
0	int
}	O
}	O
;	O
static	O
vbuf	struct
vbw	struct
;	O
int	O
Hgettimeofday	function
(	O
struct	O
timeval	struct
*	O
tv	pointer
,	O
struct	O
timezone	struct
*	O
tz	pointer
)	O
{	O
Tensurerecordfile	function
(	O
)	O
;	O
Tmust	function
(	O
"gettimeofday"	pointer
,	O
"tz"	pointer
,	O
!	O
tz	pointer
)	O
;	O
*	O
tv	pointer
=	O
currenttime	struct
;	O
return	O
0	int
;	O
}	O
int	O
Hwritev	function
(	O
int	O
fd	int
,	O
const	O
struct	O
iovec	struct
*	O
vector	pointer
,	O
size_t	long
count	long
)	O
{	O
size_t	long
i	int
;	O
vbw	struct
.	O
used	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
count	long
;	O
i	int
++	O
,	O
vector	pointer
++	O
)	O
{	O
if	O
(	O
!	O
adns__vbuf_append	function
(	O
&	O
vbw	struct
,	O
vector	pointer
->	O
iov_base	pointer
,	O
vector	pointer
->	O
iov_len	long
)	O
)	O
Tnomem	function
(	O
)	O
;	O
}	O
return	O
Hwrite	function
(	O
fd	int
,	O
vbw	struct
.	O
buf	pointer
,	O
vbw	struct
.	O
used	int
)	O
;	O
}	O
void	O
Qselect	function
(	O
int	O
max	int
,	O
const	O
fd_set	struct
*	O
rfds	pointer
,	O
const	O
fd_set	struct
*	O
wfds	pointer
,	O
const	O
fd_set	struct
*	O
efds	pointer
,	O
struct	O
timeval	struct
*	O
to	pointer
)	O
{	O
vb	pointer
.	O
used	int
=	O
0	int
;	O
Tvba	function
(	O
"select"	pointer
)	O
;	O
Tvbf	function
(	O
" max=%d"	pointer
,	O
max	int
)	O
;	O
Tvbf	function
(	O
" rfds="	pointer
)	O
;	O
Tvbfdset	function
(	O
max	int
,	O
rfds	pointer
)	O
;	O
Tvbf	function
(	O
" wfds="	pointer
)	O
;	O
Tvbfdset	function
(	O
max	int
,	O
wfds	pointer
)	O
;	O
Tvbf	function
(	O
" efds="	pointer
)	O
;	O
Tvbfdset	function
(	O
max	int
,	O
efds	pointer
)	O
;	O
if	O
(	O
to	pointer
)	O
Tvbf	function
(	O
" to=%ld.%06ld"	pointer
,	O
(	O
long	O
)	O
to	pointer
->	O
tv_sec	long
,	O
(	O
long	O
)	O
to	pointer
->	O
tv_usec	long
)	O
;	O
else	O
Tvba	function
(	O
" to=null"	pointer
)	O
;	O
Q_vb	function
(	O
)	O
;	O
}	O
void	O
Qpoll	function
(	O
const	O
struct	O
pollfd	struct
*	O
fds	pointer
,	O
int	O
nfds	int
,	O
int	O
timeout	struct
)	O
{	O
vb	pointer
.	O
used	int
=	O
0	int
;	O
Tvba	function
(	O
"poll"	pointer
)	O
;	O
Tvbf	function
(	O
" fds="	pointer
)	O
;	O
Tvbpollfds	function
(	O
fds	pointer
,	O
nfds	int
)	O
;	O
Tvbf	function
(	O
" timeout=%d"	pointer
,	O
timeout	struct
)	O
;	O
Q_vb	function
(	O
)	O
;	O
}	O
void	O
Qsocket	function
(	O
int	O
type	enum
)	O
{	O
vb	pointer
.	O
used	int
=	O
0	int
;	O
Tvba	function
(	O
"socket"	pointer
)	O
;	O
Tvbf	function
(	O
type	enum
==	O
SOCK_STREAM	int
?	O
" type=SOCK_STREAM"	pointer
:	O
" type=SOCK_DGRAM"	pointer
)	O
;	O
Q_vb	function
(	O
)	O
;	O
}	O
void	O
Qfcntl	function
(	O
int	O
fd	int
,	O
int	O
cmd	int
,	O
long	O
arg	long
)	O
{	O
vb	pointer
.	O
used	int
=	O
0	int
;	O
Tvba	function
(	O
"fcntl"	pointer
)	O
;	O
Tvbf	function
(	O
" fd=%d"	pointer
,	O
fd	int
)	O
;	O
if	O
(	O
cmd	int
==	O
F_SETFL	int
)	O
{	O
Tvbf	function
(	O
" cmd=F_SETFL %s"	pointer
,	O
arg	long
&	O
O_NONBLOCK	int
?	O
"O_NONBLOCK|..."	pointer
:	O
"~O_NONBLOCK&..."	pointer
)	O
;	O
}	O
else	O
if	O
(	O
cmd	int
==	O
F_GETFL	int
)	O
{	O
Tvba	function
(	O
" cmd=F_GETFL"	pointer
)	O
;	O
}	O
else	O
{	O
Tmust	function
(	O
"cmd"	pointer
,	O
"F_GETFL/F_SETFL"	pointer
,	O
0	int
)	O
;	O
}	O
Q_vb	function
(	O
)	O
;	O
}	O
void	O
Qconnect	function
(	O
int	O
fd	int
,	O
const	O
struct	O
sockaddr	struct
*	O
addr	union
,	O
int	O
addrlen	int
)	O
{	O
vb	pointer
.	O
used	int
=	O
0	int
;	O
Tvba	function
(	O
"connect"	pointer
)	O
;	O
Tvbf	function
(	O
" fd=%d"	pointer
,	O
fd	int
)	O
;	O
Tvba	function
(	O
" addr="	pointer
)	O
;	O
Tvbaddr	function
(	O
addr	union
,	O
addrlen	int
)	O
;	O
Q_vb	function
(	O
)	O
;	O
}	O
void	O
Qbind	function
(	O
int	O
fd	int
,	O
const	O
struct	O
sockaddr	struct
*	O
addr	union
,	O
int	O
addrlen	int
)	O
{	O
vb	pointer
.	O
used	int
=	O
0	int
;	O
Tvba	function
(	O
"bind"	pointer
)	O
;	O
Tvbf	function
(	O
" fd=%d"	pointer
,	O
fd	int
)	O
;	O
Tvba	function
(	O
" addr="	pointer
)	O
;	O
Tvbaddr	function
(	O
addr	union
,	O
addrlen	int
)	O
;	O
Q_vb	function
(	O
)	O
;	O
}	O
void	O
Qlisten	function
(	O
int	O
fd	int
,	O
int	O
backlog	int
)	O
{	O
vb	pointer
.	O
used	int
=	O
0	int
;	O
Tvba	function
(	O
"listen"	pointer
)	O
;	O
Tvbf	function
(	O
" fd=%d"	pointer
,	O
fd	int
)	O
;	O
Tvbf	function
(	O
" backlog=%d"	pointer
,	O
backlog	int
)	O
;	O
Q_vb	function
(	O
)	O
;	O
}	O
void	O
Qclose	function
(	O
int	O
fd	int
)	O
{	O
vb	pointer
.	O
used	int
=	O
0	int
;	O
Tvba	function
(	O
"close"	pointer
)	O
;	O
Tvbf	function
(	O
" fd=%d"	pointer
,	O
fd	int
)	O
;	O
Q_vb	function
(	O
)	O
;	O
}	O
void	O
Qsendto	function
(	O
int	O
fd	int
,	O
const	O
void	O
*	O
msg	pointer
,	O
int	O
msglen	int
,	O
const	O
struct	O
sockaddr	struct
*	O
addr	union
,	O
int	O
addrlen	int
)	O
{	O
vb	pointer
.	O
used	int
=	O
0	int
;	O
Tvba	function
(	O
"sendto"	pointer
)	O
;	O
Tvbf	function
(	O
" fd=%d"	pointer
,	O
fd	int
)	O
;	O
Tvba	function
(	O
" addr="	pointer
)	O
;	O
Tvbaddr	function
(	O
addr	union
,	O
addrlen	int
)	O
;	O
Tvbbytes	function
(	O
msg	pointer
,	O
msglen	int
)	O
;	O
Q_vb	function
(	O
)	O
;	O
}	O
void	O
Qrecvfrom	function
(	O
int	O
fd	int
,	O
int	O
buflen	int
,	O
int	O
addrlen	int
)	O
{	O
vb	pointer
.	O
used	int
=	O
0	int
;	O
Tvba	function
(	O
"recvfrom"	pointer
)	O
;	O
Tvbf	function
(	O
" fd=%d"	pointer
,	O
fd	int
)	O
;	O
Tvbf	function
(	O
" buflen=%lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
buflen	int
)	O
;	O
Tvbf	function
(	O
" *addrlen=%d"	pointer
,	O
addrlen	int
)	O
;	O
Q_vb	function
(	O
)	O
;	O
}	O
void	O
Qread	function
(	O
int	O
fd	int
,	O
size_t	long
buflen	int
)	O
{	O
vb	pointer
.	O
used	int
=	O
0	int
;	O
Tvba	function
(	O
"read"	pointer
)	O
;	O
Tvbf	function
(	O
" fd=%d"	pointer
,	O
fd	int
)	O
;	O
Tvbf	function
(	O
" buflen=%lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
buflen	int
)	O
;	O
Q_vb	function
(	O
)	O
;	O
}	O
void	O
Qwrite	function
(	O
int	O
fd	int
,	O
const	O
void	O
*	O
buf	pointer
,	O
size_t	long
len	int
)	O
{	O
vb	pointer
.	O
used	int
=	O
0	int
;	O
Tvba	function
(	O
"write"	pointer
)	O
;	O
Tvbf	function
(	O
" fd=%d"	pointer
,	O
fd	int
)	O
;	O
Tvbbytes	function
(	O
buf	pointer
,	O
len	int
)	O
;	O
Q_vb	function
(	O
)	O
;	O
}	O
void	O
Tvbaddr	function
(	O
const	O
struct	O
sockaddr	struct
*	O
addr	union
,	O
int	O
len	int
)	O
{	O
const	O
struct	O
sockaddr_in	struct
*	O
ai	pointer
=	O
(	O
const	O
struct	O
sockaddr_in	struct
*	O
)	O
addr	union
;	O
assert	O
(	O
len	int
==	O
sizeof	O
(	O
struct	O
sockaddr_in	struct
)	O
)	O
;	O
assert	O
(	O
ai	pointer
->	O
sin_family	short
==	O
AF_INET	O
)	O
;	O
Tvbf	function
(	O
"%s:%u"	pointer
,	O
inet_ntoa	function
(	O
ai	pointer
->	O
sin_addr	struct
)	O
,	O
htons	function
(	O
ai	pointer
->	O
sin_port	short
)	O
)	O
;	O
}	O
void	O
Tvbbytes	function
(	O
const	O
void	O
*	O
buf	pointer
,	O
int	O
len	int
)	O
{	O
const	O
byte	char
*	O
bp	pointer
;	O
int	O
i	int
;	O
if	O
(	O
!	O
len	int
)	O
{	O
Tvba	function
(	O
"\n     ."	pointer
)	O
;	O
return	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
,	O
bp	pointer
=	O
buf	pointer
;	O
i	int
<	O
len	int
;	O
i	int
++	O
,	O
bp	pointer
++	O
)	O
{	O
if	O
(	O
!	O
(	O
i	int
&	O
31	int
)	O
)	O
Tvba	function
(	O
"\n     "	pointer
)	O
;	O
else	O
if	O
(	O
!	O
(	O
i	int
&	O
3	int
)	O
)	O
Tvba	function
(	O
" "	pointer
)	O
;	O
Tvbf	function
(	O
"%02x"	pointer
,	O
*	O
bp	pointer
)	O
;	O
}	O
Tvba	function
(	O
"."	pointer
)	O
;	O
}	O
void	O
Tvbfdset	function
(	O
int	O
max	int
,	O
const	O
fd_set	struct
*	O
fds	pointer
)	O
{	O
int	O
i	int
;	O
const	O
char	O
*	O
comma	pointer
=	O
""	pointer
;	O
Tvba	function
(	O
"["	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
max	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
!	O
FD_ISSET	O
(	O
i	int
,	O
fds	pointer
)	O
)	O
continue	O
;	O
Tvba	function
(	O
comma	pointer
)	O
;	O
Tvbf	function
(	O
"%d"	pointer
,	O
i	int
)	O
;	O
comma	pointer
=	O
","	pointer
;	O
}	O
Tvba	function
(	O
"]"	pointer
)	O
;	O
}	O
static	O
void	O
Tvbpollevents	function
(	O
int	O
events	short
)	O
{	O
const	O
char	O
*	O
delim	pointer
=	O
""	pointer
;	O
events	short
&=	O
(	O
POLLIN	int
|	O
POLLOUT	int
|	O
POLLPRI	int
)	O
;	O
if	O
(	O
!	O
events	short
)	O
{	O
Tvba	function
(	O
"0"	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
events	short
&	O
POLLIN	int
)	O
{	O
Tvba	function
(	O
"POLLIN"	pointer
)	O
;	O
delim	pointer
=	O
"|"	pointer
;	O
}	O
if	O
(	O
events	short
&	O
POLLOUT	int
)	O
{	O
Tvba	function
(	O
delim	pointer
)	O
;	O
Tvba	function
(	O
"POLLOUT"	pointer
)	O
;	O
delim	pointer
=	O
"|"	pointer
;	O
}	O
if	O
(	O
events	short
&	O
POLLPRI	int
)	O
{	O
Tvba	function
(	O
delim	pointer
)	O
;	O
Tvba	function
(	O
"POLLPRI"	pointer
)	O
;	O
}	O
}	O
void	O
Tvbpollfds	function
(	O
const	O
struct	O
pollfd	struct
*	O
fds	pointer
,	O
int	O
nfds	int
)	O
{	O
const	O
char	O
*	O
comma	pointer
=	O
""	pointer
;	O
Tvba	function
(	O
"["	pointer
)	O
;	O
while	O
(	O
nfds	int
>	O
0	int
)	O
{	O
Tvba	function
(	O
comma	pointer
)	O
;	O
Tvbf	function
(	O
"{fd=%d, events="	pointer
,	O
fds	pointer
->	O
fd	int
)	O
;	O
Tvbpollevents	function
(	O
fds	pointer
->	O
events	short
)	O
;	O
Tvba	function
(	O
", revents="	pointer
)	O
;	O
Tvbpollevents	function
(	O
fds	pointer
->	O
revents	short
)	O
;	O
Tvba	function
(	O
"}"	pointer
)	O
;	O
comma	pointer
=	O
", "	pointer
;	O
nfds	int
--	O
;	O
fds	pointer
++	O
;	O
}	O
Tvba	function
(	O
"]"	pointer
)	O
;	O
}	O
void	O
Tvberrno	function
(	O
int	O
e	int
)	O
{	O
const	O
struct	O
Terrno	struct
*	O
te	pointer
;	O
for	O
(	O
te	pointer
=	O
Terrnos	array
;	O
te	pointer
->	O
n	pointer
&&	O
te	pointer
->	O
v	int
!=	O
e	int
;	O
te	pointer
++	O
)	O
;	O
assert	O
(	O
te	pointer
->	O
n	pointer
)	O
;	O
Tvba	function
(	O
te	pointer
->	O
n	pointer
)	O
;	O
}	O
void	O
Tvba	function
(	O
const	O
char	O
*	O
str	pointer
)	O
{	O
if	O
(	O
!	O
adns__vbuf_appendstr	function
(	O
&	O
vb	pointer
,	O
str	pointer
)	O
)	O
Tnomem	function
(	O
)	O
;	O
}	O
void	O
Tvbvf	function
(	O
const	O
char	O
*	O
fmt	pointer
,	O
va_list	array
al	array
)	O
{	O
char	O
buf	pointer
[	O
1000	int
]	O
;	O
buf	pointer
[	O
sizeof	O
(	O
buf	pointer
)	O
-	O
2	int
]	O
=	O
'\t'	O
;	O
vsnprintf	function
(	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
fmt	pointer
,	O
al	array
)	O
;	O
assert	O
(	O
buf	pointer
[	O
sizeof	O
(	O
buf	pointer
)	O
-	O
2	int
]	O
==	O
'\t'	O
)	O
;	O
Tvba	function
(	O
buf	pointer
)	O
;	O
}	O
void	O
Tvbf	function
(	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
al	array
;	O
va_start	O
(	O
al	array
,	O
fmt	pointer
)	O
;	O
Tvbvf	function
(	O
fmt	pointer
,	O
al	array
)	O
;	O
va_end	O
(	O
al	array
)	O
;	O
}	O
void	O
Tmust	function
(	O
const	O
char	O
*	O
call	pointer
,	O
const	O
char	O
*	O
arg	long
,	O
int	O
cond	int
)	O
{	O
if	O
(	O
cond	int
)	O
return	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"adns test harness: case not handled: system call %s, arg %s"	pointer
,	O
call	pointer
,	O
arg	long
)	O
;	O
exit	function
(	O
-	O
1	int
)	O
;	O
}	O
void	O
Tfailed	function
(	O
const	O
char	O
*	O
why	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"adns test harness: failure: %s: %s\n"	pointer
,	O
why	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
exit	function
(	O
-	O
1	int
)	O
;	O
}	O
void	O
Tnomem	function
(	O
void	O
)	O
{	O
Tfailed	function
(	O
"unable to malloc/realloc"	pointer
)	O
;	O
}	O
void	O
Toutputerr	function
(	O
void	O
)	O
{	O
Tfailed	function
(	O
"write error on test harness output"	pointer
)	O
;	O
}	O
struct	O
malloced	struct
{	O
struct	O
malloced	struct
*	O
next	pointer
,	O
*	O
back	pointer
;	O
size_t	long
sz	int
;	O
unsigned	O
long	O
count	long
;	O
struct	O
{	O
double	O
d	array
;	O
long	O
ul	long
;	O
void	O
*	O
p	pointer
;	O
void	O
(	O
*	O
fp	pointer
)	O
(	O
void	O
)	O
;	O
}	O
data	pointer
;	O
}	O
;	O
static	O
unsigned	O
long	O
malloccount	long
,	O
mallocfailat	long
;	O
static	O
struct	O
{	O
struct	O
malloced	struct
*	O
head	pointer
,	O
*	O
tail	pointer
;	O
}	O
mallocedlist	struct
;	O
void	O
*	O
Hmalloc	function
(	O
size_t	long
sz	int
)	O
{	O
struct	O
malloced	struct
*	O
newnode	pointer
;	O
const	O
char	O
*	O
mfavar	pointer
;	O
char	O
*	O
ep	pointer
;	O
assert	O
(	O
sz	int
)	O
;	O
newnode	pointer
=	O
malloc	function
(	O
MALLOCHSZ	O
+	O
sz	int
)	O
;	O
if	O
(	O
!	O
newnode	pointer
)	O
Tnomem	function
(	O
)	O
;	O
LIST_LINK_TAIL	O
(	O
mallocedlist	struct
,	O
newnode	pointer
)	O
;	O
newnode	pointer
->	O
sz	int
=	O
sz	int
;	O
newnode	pointer
->	O
count	long
=	O
++	O
malloccount	long
;	O
if	O
(	O
!	O
mallocfailat	long
)	O
{	O
mfavar	pointer
=	O
getenv	function
(	O
"ADNS_REGRESS_MALLOCFAILAT"	pointer
)	O
;	O
if	O
(	O
mfavar	pointer
)	O
{	O
mallocfailat	long
=	O
strtoul	function
(	O
mfavar	pointer
,	O
&	O
ep	pointer
,	O
10	int
)	O
;	O
if	O
(	O
!	O
mallocfailat	long
||	O
*	O
ep	pointer
)	O
Tfailed	function
(	O
"ADNS_REGRESS_MALLOCFAILAT bad value"	pointer
)	O
;	O
}	O
else	O
{	O
mallocfailat	long
=	O
~	O
0UL	int
;	O
}	O
}	O
assert	O
(	O
newnode	pointer
->	O
count	long
!=	O
mallocfailat	long
)	O
;	O
memset	function
(	O
&	O
newnode	pointer
->	O
data	pointer
,	O
0xc7	int
,	O
sz	int
)	O
;	O
return	O
&	O
newnode	pointer
->	O
data	pointer
;	O
}	O
void	O
Hfree	function
(	O
void	O
*	O
ptr	pointer
)	O
{	O
struct	O
malloced	struct
*	O
oldnode	pointer
;	O
if	O
(	O
!	O
ptr	pointer
)	O
return	O
;	O
oldnode	pointer
=	O
(	O
void	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
ptr	pointer
-	O
MALLOCHSZ	O
)	O
;	O
LIST_UNLINK	O
(	O
mallocedlist	struct
,	O
oldnode	pointer
)	O
;	O
memset	function
(	O
&	O
oldnode	pointer
->	O
data	pointer
,	O
0x38	int
,	O
oldnode	pointer
->	O
sz	int
)	O
;	O
free	function
(	O
oldnode	pointer
)	O
;	O
}	O
void	O
*	O
Hrealloc	function
(	O
void	O
*	O
op	pointer
,	O
size_t	long
nsz	long
)	O
{	O
struct	O
malloced	struct
*	O
oldnode	pointer
;	O
void	O
*	O
np	pointer
;	O
size_t	long
osz	long
;	O
if	O
(	O
op	pointer
)	O
{	O
oldnode	pointer
=	O
(	O
void	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
op	pointer
-	O
MALLOCHSZ	O
)	O
;	O
osz	long
=	O
oldnode	pointer
->	O
sz	int
;	O
}	O
else	O
{	O
osz	long
=	O
0	int
;	O
}	O
np	pointer
=	O
Hmalloc	function
(	O
nsz	long
)	O
;	O
memcpy	function
(	O
np	pointer
,	O
op	pointer
,	O
osz	long
>	O
nsz	long
?	O
nsz	long
:	O
osz	long
)	O
;	O
Hfree	function
(	O
op	pointer
)	O
;	O
return	O
np	pointer
;	O
}	O
void	O
Hexit	function
(	O
int	O
rv	int
)	O
{	O
struct	O
malloced	struct
*	O
loopnode	pointer
;	O
Tshutdown	function
(	O
)	O
;	O
adns__vbuf_free	function
(	O
&	O
vb	pointer
)	O
;	O
adns__vbuf_free	function
(	O
&	O
vbw	struct
)	O
;	O
if	O
(	O
mallocedlist	struct
.	O
head	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"adns test harness: memory leaked:"	pointer
)	O
;	O
for	O
(	O
loopnode	pointer
=	O
mallocedlist	struct
.	O
head	pointer
;	O
loopnode	pointer
;	O
loopnode	pointer
=	O
loopnode	pointer
->	O
next	pointer
)	O
fprintf	function
(	O
stderr	pointer
,	O
" %lu"	pointer
,	O
loopnode	pointer
->	O
count	long
)	O
;	O
putc	function
(	O
'\n'	O
,	O
stderr	pointer
)	O
;	O
if	O
(	O
ferror	function
(	O
stderr	pointer
)	O
)	O
exit	function
(	O
-	O
1	int
)	O
;	O
}	O
exit	function
(	O
rv	int
)	O
;	O
}	O
pid_t	int
Hgetpid	function
(	O
void	O
)	O
{	O
return	O
2264	int
;	O
}	O
