struct	O
search_closure	struct
{	O
mu_msgset_t	pointer
msgset	pointer
;	O
int	O
retcode	int
;	O
}	O
;	O
static	O
int	O
add_msgno	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
imap_list_element	struct
*	O
elt	pointer
=	O
item	pointer
;	O
struct	O
search_closure	struct
*	O
scp	pointer
=	O
data	pointer
;	O
char	O
*	O
p	pointer
;	O
unsigned	O
long	O
num	long
;	O
if	O
(	O
elt	pointer
->	O
type	int
!=	O
imap_eltype_string	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"unexpected list element in untagged response from SEARCH"	pointer
)	O
)	O
)	O
;	O
scp	pointer
->	O
retcode	int
=	O
MU_ERR_BADREPLY	O
;	O
return	O
MU_ERR_USER0	O
;	O
}	O
if	O
(	O
!	O
scp	pointer
->	O
msgset	pointer
)	O
{	O
rc	int
=	O
mu_msgset_create	function
(	O
&	O
scp	pointer
->	O
msgset	pointer
,	O
NULL	O
,	O
MU_MSGSET_NUM	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"cannot create msgset: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
scp	pointer
->	O
retcode	int
=	O
rc	int
;	O
return	O
rc	int
;	O
}	O
return	O
0	int
;	O
}	O
num	long
=	O
strtoul	function
(	O
elt	pointer
->	O
v	union
.	O
string	pointer
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"not a number in untagged response from SEARCH: %s"	pointer
)	O
,	O
elt	pointer
->	O
v	union
.	O
string	pointer
)	O
)	O
;	O
scp	pointer
->	O
retcode	int
=	O
MU_ERR_BADREPLY	O
;	O
return	O
MU_ERR_USER0	O
;	O
}	O
rc	int
=	O
mu_msgset_add_range	function
(	O
scp	pointer
->	O
msgset	pointer
,	O
num	long
,	O
num	long
,	O
MU_MSGSET_NUM	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"mu_msgset_add_range: %s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
scp	pointer
->	O
retcode	int
=	O
rc	int
;	O
return	O
MU_ERR_USER0	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
search_handler	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
mu_list_t	pointer
resp	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
mu_list_foreach	function
(	O
resp	pointer
,	O
add_msgno	function
,	O
data	pointer
)	O
;	O
}	O
int	O
mu_imap_search	function
(	O
mu_imap_t	pointer
imap	pointer
,	O
int	O
uid	int
,	O
const	O
char	O
*	O
expr	pointer
,	O
mu_msgset_t	pointer
*	O
msgset	pointer
)	O
{	O
char	O
const	O
*	O
argv	pointer
[	O
3	int
]	O
;	O
int	O
i	int
,	O
rc	int
;	O
static	O
struct	O
imap_command	struct
com	struct
;	O
struct	O
search_closure	struct
clos	struct
;	O
if	O
(	O
!	O
expr	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
msgset	pointer
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
i	int
=	O
0	int
;	O
if	O
(	O
uid	int
)	O
argv	pointer
[	O
i	int
++	O
]	O
=	O
"UID"	pointer
;	O
argv	pointer
[	O
i	int
++	O
]	O
=	O
"SEARCH"	pointer
;	O
clos	struct
.	O
msgset	pointer
=	O
NULL	O
;	O
clos	struct
.	O
retcode	int
=	O
0	int
;	O
com	struct
.	O
session_state	enum
=	O
MU_IMAP_SESSION_SELECTED	int
;	O
com	struct
.	O
capa	pointer
=	O
NULL	O
;	O
com	struct
.	O
rx_state	int
=	O
MU_IMAP_CLIENT_SEARCH_RX	int
;	O
com	struct
.	O
argc	int
=	O
i	int
;	O
com	struct
.	O
argv	pointer
=	O
argv	pointer
;	O
com	struct
.	O
extra	pointer
=	O
expr	pointer
;	O
com	struct
.	O
msgset	pointer
=	O
NULL	O
;	O
com	struct
.	O
tagged_handler	pointer
=	O
NULL	O
;	O
com	struct
.	O
untagged_handler	pointer
=	O
search_handler	function
;	O
com	struct
.	O
untagged_handler_data	pointer
=	O
&	O
clos	struct
;	O
rc	int
=	O
mu_imap_gencom	function
(	O
imap	pointer
,	O
&	O
com	struct
)	O
;	O
if	O
(	O
rc	int
)	O
mu_msgset_free	function
(	O
clos	struct
.	O
msgset	pointer
)	O
;	O
else	O
if	O
(	O
clos	struct
.	O
retcode	int
)	O
{	O
mu_msgset_free	function
(	O
clos	struct
.	O
msgset	pointer
)	O
;	O
rc	int
=	O
clos	struct
.	O
retcode	int
;	O
}	O
else	O
*	O
msgset	pointer
=	O
clos	struct
.	O
msgset	pointer
;	O
return	O
rc	int
;	O
}	O
