struct	O
_mu_mime_io_buffer	struct
{	O
unsigned	O
int	O
refcnt	int
;	O
char	O
*	O
charset	pointer
;	O
mu_header_t	pointer
hdr	pointer
;	O
mu_message_t	pointer
msg	pointer
;	O
mu_stream_t	pointer
stream	pointer
;	O
mu_stream_t	pointer
fstream	pointer
;	O
}	O
;	O
static	O
int	O
at_hdr	function
(	O
mu_header_t	pointer
hdr	pointer
,	O
const	O
char	O
*	O
content_type	pointer
,	O
const	O
char	O
*	O
encoding	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
val	array
,	O
*	O
str	pointer
;	O
if	O
(	O
!	O
name	pointer
)	O
{	O
if	O
(	O
filename	pointer
)	O
{	O
name	pointer
=	O
strrchr	function
(	O
filename	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
name	pointer
)	O
name	pointer
++	O
;	O
else	O
name	pointer
=	O
filename	pointer
;	O
}	O
}	O
if	O
(	O
name	pointer
)	O
{	O
rc	int
=	O
mu_c_str_escape	function
(	O
name	pointer
,	O
"\\\""	pointer
,	O
NULL	O
,	O
&	O
str	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_asprintf	function
(	O
&	O
val	array
,	O
"%s; name=\"%s\""	pointer
,	O
content_type	pointer
,	O
str	pointer
)	O
;	O
free	function
(	O
str	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_header_set_value	function
(	O
hdr	pointer
,	O
MU_HEADER_CONTENT_TYPE	pointer
,	O
val	array
,	O
1	int
)	O
;	O
free	function
(	O
val	array
)	O
;	O
}	O
else	O
rc	int
=	O
mu_header_set_value	function
(	O
hdr	pointer
,	O
MU_HEADER_CONTENT_TYPE	pointer
,	O
content_type	pointer
,	O
1	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
filename	pointer
)	O
{	O
rc	int
=	O
mu_c_str_escape	function
(	O
filename	pointer
,	O
"\\\""	pointer
,	O
NULL	O
,	O
&	O
str	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_asprintf	function
(	O
&	O
val	array
,	O
"%s; filename=\"%s\""	pointer
,	O
"attachment"	pointer
,	O
str	pointer
)	O
;	O
free	function
(	O
str	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_header_set_value	function
(	O
hdr	pointer
,	O
MU_HEADER_CONTENT_DISPOSITION	pointer
,	O
val	array
,	O
1	int
)	O
;	O
free	function
(	O
val	array
)	O
;	O
}	O
else	O
rc	int
=	O
mu_header_set_value	function
(	O
hdr	pointer
,	O
MU_HEADER_CONTENT_DISPOSITION	pointer
,	O
"attachment"	pointer
,	O
1	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
return	O
mu_header_set_value	function
(	O
hdr	pointer
,	O
MU_HEADER_CONTENT_TRANSFER_ENCODING	pointer
,	O
encoding	pointer
?	O
encoding	pointer
:	O
"8bit"	pointer
,	O
1	int
)	O
;	O
}	O
int	O
mu_attachment_create	function
(	O
mu_message_t	pointer
*	O
newmsg	pointer
,	O
const	O
char	O
*	O
content_type	pointer
,	O
const	O
char	O
*	O
encoding	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
int	O
rc	int
;	O
mu_header_t	pointer
hdr	pointer
;	O
if	O
(	O
newmsg	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
rc	int
=	O
mu_message_create	function
(	O
newmsg	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_header_create	function
(	O
&	O
hdr	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_message_destroy	function
(	O
newmsg	pointer
,	O
NULL	O
)	O
;	O
return	O
rc	int
;	O
}	O
mu_message_set_header	function
(	O
*	O
newmsg	pointer
,	O
hdr	pointer
,	O
NULL	O
)	O
;	O
rc	int
=	O
at_hdr	function
(	O
hdr	pointer
,	O
content_type	pointer
,	O
encoding	pointer
,	O
name	pointer
,	O
filename	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_message_destroy	function
(	O
newmsg	pointer
,	O
NULL	O
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_attachment_copy_from_stream	function
(	O
mu_message_t	pointer
att	pointer
,	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
mu_body_t	pointer
body	pointer
;	O
mu_stream_t	pointer
bstr	pointer
;	O
mu_stream_t	pointer
tstream	pointer
;	O
mu_header_t	pointer
hdr	pointer
;	O
int	O
rc	int
;	O
char	O
*	O
encoding	pointer
;	O
mu_message_get_header	function
(	O
att	pointer
,	O
&	O
hdr	pointer
)	O
;	O
rc	int
=	O
mu_header_aget_value_unfold	O
(	O
hdr	pointer
,	O
MU_HEADER_CONTENT_TRANSFER_ENCODING	pointer
,	O
&	O
encoding	pointer
)	O
;	O
switch	O
(	O
rc	int
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
MU_ERR_NOENT	O
:	O
return	O
EINVAL	int
;	O
default	O
:	O
return	O
rc	int
;	O
}	O
mu_message_get_body	function
(	O
att	pointer
,	O
&	O
body	pointer
)	O
;	O
rc	int
=	O
mu_body_get_streamref	function
(	O
body	pointer
,	O
&	O
bstr	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
rc	int
=	O
mu_filter_create	function
(	O
&	O
tstream	pointer
,	O
stream	pointer
,	O
encoding	pointer
,	O
MU_FILTER_ENCODE	int
,	O
MU_STREAM_READ	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
rc	int
=	O
mu_stream_copy	function
(	O
bstr	pointer
,	O
tstream	pointer
,	O
0	int
,	O
NULL	O
)	O
;	O
mu_stream_unref	function
(	O
tstream	pointer
)	O
;	O
}	O
mu_stream_unref	function
(	O
bstr	pointer
)	O
;	O
}	O
free	function
(	O
encoding	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_attachment_copy_from_file	function
(	O
mu_message_t	pointer
att	pointer
,	O
char	O
const	O
*	O
filename	pointer
)	O
{	O
mu_stream_t	pointer
stream	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_file_stream_create	function
(	O
&	O
stream	pointer
,	O
filename	pointer
,	O
MU_STREAM_READ	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
rc	int
=	O
mu_attachment_copy_from_stream	function
(	O
att	pointer
,	O
stream	pointer
)	O
;	O
mu_stream_unref	function
(	O
stream	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_message_create_attachment	function
(	O
const	O
char	O
*	O
content_type	pointer
,	O
const	O
char	O
*	O
encoding	pointer
,	O
const	O
char	O
*	O
filename	pointer
,	O
mu_message_t	pointer
*	O
newmsg	pointer
)	O
{	O
int	O
rc	int
;	O
char	O
const	O
*	O
name	pointer
;	O
mu_message_t	pointer
att	pointer
;	O
if	O
(	O
content_type	pointer
==	O
NULL	O
)	O
content_type	pointer
=	O
"text/plain"	pointer
;	O
name	pointer
=	O
strrchr	function
(	O
filename	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
name	pointer
)	O
name	pointer
++	O
;	O
else	O
name	pointer
=	O
filename	pointer
;	O
rc	int
=	O
mu_attachment_create	function
(	O
&	O
att	pointer
,	O
content_type	pointer
,	O
encoding	pointer
,	O
name	pointer
,	O
filename	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
rc	int
=	O
mu_attachment_copy_from_file	function
(	O
att	pointer
,	O
filename	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_message_destroy	function
(	O
&	O
att	pointer
,	O
NULL	O
)	O
;	O
}	O
if	O
(	O
rc	int
==	O
0	int
)	O
*	O
newmsg	pointer
=	O
att	pointer
;	O
return	O
rc	int
;	O
}	O
int	O
mu_mime_io_buffer_create	function
(	O
mu_mime_io_buffer_t	pointer
*	O
pinfo	pointer
)	O
{	O
mu_mime_io_buffer_t	pointer
info	pointer
;	O
if	O
(	O
(	O
info	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
info	pointer
)	O
)	O
)	O
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
info	pointer
->	O
refcnt	int
=	O
1	int
;	O
*	O
pinfo	pointer
=	O
info	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_mime_io_buffer_set_charset	function
(	O
mu_mime_io_buffer_t	pointer
info	pointer
,	O
const	O
char	O
*	O
charset	pointer
)	O
{	O
char	O
*	O
cp	pointer
=	O
strdup	function
(	O
charset	pointer
)	O
;	O
if	O
(	O
!	O
cp	pointer
)	O
return	O
ENOMEM	int
;	O
free	function
(	O
info	pointer
->	O
charset	pointer
)	O
;	O
info	pointer
->	O
charset	pointer
=	O
cp	pointer
;	O
return	O
0	int
;	O
}	O
void	O
mu_mime_io_buffer_sget_charset	function
(	O
mu_mime_io_buffer_t	pointer
info	pointer
,	O
const	O
char	O
*	O
*	O
charset	pointer
)	O
{	O
*	O
charset	pointer
=	O
info	pointer
->	O
charset	pointer
;	O
}	O
int	O
mu_mime_io_buffer_aget_charset	function
(	O
mu_mime_io_buffer_t	pointer
info	pointer
,	O
const	O
char	O
*	O
*	O
charset	pointer
)	O
{	O
*	O
charset	pointer
=	O
strdup	function
(	O
info	pointer
->	O
charset	pointer
)	O
;	O
if	O
(	O
!	O
charset	pointer
)	O
return	O
ENOMEM	int
;	O
return	O
0	int
;	O
}	O
void	O
mu_mime_io_buffer_destroy	function
(	O
mu_mime_io_buffer_t	pointer
*	O
pinfo	pointer
)	O
{	O
if	O
(	O
pinfo	pointer
&&	O
*	O
pinfo	pointer
)	O
{	O
mu_mime_io_buffer_t	pointer
info	pointer
=	O
*	O
pinfo	pointer
;	O
free	function
(	O
info	pointer
->	O
charset	pointer
)	O
;	O
free	function
(	O
info	pointer
)	O
;	O
*	O
pinfo	pointer
=	O
NULL	O
;	O
}	O
}	O
static	O
void	O
_attachment_free	function
(	O
struct	O
_mu_mime_io_buffer	struct
*	O
info	pointer
,	O
int	O
free_message	int
)	O
{	O
if	O
(	O
free_message	int
)	O
{	O
if	O
(	O
info	pointer
->	O
msg	pointer
)	O
mu_message_destroy	function
(	O
&	O
info	pointer
->	O
msg	pointer
,	O
NULL	O
)	O
;	O
else	O
if	O
(	O
info	pointer
->	O
hdr	pointer
)	O
mu_header_destroy	function
(	O
&	O
info	pointer
->	O
hdr	pointer
)	O
;	O
}	O
info	pointer
->	O
msg	pointer
=	O
NULL	O
;	O
info	pointer
->	O
hdr	pointer
=	O
NULL	O
;	O
info	pointer
->	O
stream	pointer
=	O
NULL	O
;	O
info	pointer
->	O
fstream	pointer
=	O
NULL	O
;	O
if	O
(	O
--	O
info	pointer
->	O
refcnt	int
==	O
0	int
)	O
{	O
free	function
(	O
info	pointer
->	O
charset	pointer
)	O
;	O
free	function
(	O
info	pointer
)	O
;	O
}	O
}	O
static	O
int	O
_attachment_setup	function
(	O
mu_mime_io_buffer_t	pointer
*	O
pinfo	pointer
,	O
mu_message_t	pointer
msg	pointer
,	O
mu_stream_t	pointer
*	O
pstream	pointer
)	O
{	O
int	O
ret	int
;	O
mu_body_t	pointer
body	pointer
;	O
mu_mime_io_buffer_t	pointer
info	pointer
;	O
mu_stream_t	pointer
stream	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
mu_message_get_body	function
(	O
msg	pointer
,	O
&	O
body	pointer
)	O
)	O
!=	O
0	int
||	O
(	O
ret	int
=	O
mu_body_get_streamref	function
(	O
body	pointer
,	O
&	O
stream	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
ret	int
;	O
*	O
pstream	pointer
=	O
stream	pointer
;	O
if	O
(	O
*	O
pinfo	pointer
)	O
{	O
info	pointer
=	O
*	O
pinfo	pointer
;	O
info	pointer
->	O
refcnt	int
++	O
;	O
}	O
else	O
{	O
ret	int
=	O
mu_mime_io_buffer_create	function
(	O
&	O
info	pointer
)	O
;	O
if	O
(	O
ret	int
)	O
return	O
ret	int
;	O
}	O
*	O
pinfo	pointer
=	O
info	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_message_save_attachment	function
(	O
mu_message_t	pointer
msg	pointer
,	O
const	O
char	O
*	O
filename	pointer
,	O
mu_mime_io_buffer_t	pointer
info	pointer
)	O
{	O
mu_stream_t	pointer
istream	pointer
;	O
int	O
ret	int
;	O
mu_header_t	pointer
hdr	pointer
;	O
const	O
char	O
*	O
fname	pointer
=	O
NULL	O
;	O
char	O
*	O
partname	pointer
=	O
NULL	O
;	O
if	O
(	O
msg	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
(	O
ret	int
=	O
_attachment_setup	function
(	O
&	O
info	pointer
,	O
msg	pointer
,	O
&	O
istream	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
ret	int
;	O
if	O
(	O
ret	int
==	O
0	int
&&	O
(	O
ret	int
=	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
filename	pointer
==	O
NULL	O
)	O
{	O
ret	int
=	O
mu_message_aget_decoded_attachment_name	function
(	O
msg	pointer
,	O
info	pointer
->	O
charset	pointer
,	O
&	O
partname	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
partname	pointer
)	O
fname	pointer
=	O
partname	pointer
;	O
}	O
else	O
fname	pointer
=	O
filename	pointer
;	O
if	O
(	O
fname	pointer
&&	O
(	O
ret	int
=	O
mu_file_stream_create	function
(	O
&	O
info	pointer
->	O
fstream	pointer
,	O
fname	pointer
,	O
MU_STREAM_WRITE	int
|	O
MU_STREAM_CREAT	int
)	O
)	O
==	O
0	int
)	O
{	O
const	O
char	O
*	O
content_encoding	pointer
;	O
if	O
(	O
mu_header_sget_value	O
(	O
hdr	pointer
,	O
MU_HEADER_CONTENT_TRANSFER_ENCODING	pointer
,	O
&	O
content_encoding	pointer
)	O
)	O
content_encoding	pointer
=	O
"7bit"	pointer
;	O
ret	int
=	O
mu_filter_create	function
(	O
&	O
info	pointer
->	O
stream	pointer
,	O
istream	pointer
,	O
content_encoding	pointer
,	O
MU_FILTER_DECODE	int
,	O
MU_STREAM_READ	int
)	O
;	O
}	O
}	O
if	O
(	O
info	pointer
->	O
stream	pointer
&&	O
istream	pointer
)	O
ret	int
=	O
mu_stream_copy	function
(	O
info	pointer
->	O
fstream	pointer
,	O
info	pointer
->	O
stream	pointer
,	O
0	int
,	O
NULL	O
)	O
;	O
if	O
(	O
ret	int
!=	O
EAGAIN	int
&&	O
info	pointer
)	O
{	O
mu_stream_close	function
(	O
info	pointer
->	O
fstream	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
info	pointer
->	O
stream	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
info	pointer
->	O
fstream	pointer
)	O
;	O
}	O
mu_stream_destroy	function
(	O
&	O
istream	pointer
)	O
;	O
_attachment_free	function
(	O
info	pointer
,	O
ret	int
)	O
;	O
if	O
(	O
partname	pointer
)	O
free	function
(	O
partname	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
mu_message_encapsulate	function
(	O
mu_message_t	pointer
msg	pointer
,	O
mu_message_t	pointer
*	O
newmsg	pointer
,	O
mu_mime_io_buffer_t	pointer
info	pointer
)	O
{	O
mu_stream_t	pointer
istream	pointer
,	O
ostream	pointer
;	O
int	O
ret	int
=	O
0	int
;	O
mu_message_t	pointer
tmsg	pointer
=	O
NULL	O
;	O
if	O
(	O
newmsg	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
msg	pointer
==	O
NULL	O
)	O
{	O
mu_header_t	pointer
hdr	pointer
;	O
ret	int
=	O
mu_message_create	function
(	O
&	O
tmsg	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
ret	int
)	O
return	O
ret	int
;	O
msg	pointer
=	O
tmsg	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
mu_header_create	function
(	O
&	O
hdr	pointer
,	O
MSG822_HEADER	O
,	O
sizeof	O
(	O
MSG822_HEADER	O
)	O
-	O
1	int
)	O
)	O
==	O
0	int
)	O
ret	int
=	O
mu_message_set_header	function
(	O
msg	pointer
,	O
hdr	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
ret	int
)	O
{	O
mu_message_destroy	function
(	O
&	O
msg	pointer
,	O
NULL	O
)	O
;	O
return	O
ret	int
;	O
}	O
}	O
if	O
(	O
(	O
ret	int
=	O
_attachment_setup	function
(	O
&	O
info	pointer
,	O
msg	pointer
,	O
&	O
ostream	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
mu_message_destroy	function
(	O
&	O
tmsg	pointer
,	O
NULL	O
)	O
;	O
return	O
ret	int
;	O
}	O
info	pointer
->	O
msg	pointer
=	O
msg	pointer
;	O
if	O
(	O
ret	int
==	O
0	int
&&	O
(	O
ret	int
=	O
mu_message_get_streamref	function
(	O
msg	pointer
,	O
&	O
istream	pointer
)	O
)	O
==	O
0	int
)	O
{	O
mu_stream_seek	function
(	O
istream	pointer
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
ret	int
=	O
mu_stream_copy	function
(	O
ostream	pointer
,	O
istream	pointer
,	O
0	int
,	O
NULL	O
)	O
;	O
mu_stream_destroy	function
(	O
&	O
istream	pointer
)	O
;	O
}	O
if	O
(	O
ret	int
==	O
0	int
)	O
*	O
newmsg	pointer
=	O
info	pointer
->	O
msg	pointer
;	O
mu_stream_destroy	function
(	O
&	O
ostream	pointer
)	O
;	O
_attachment_free	function
(	O
info	pointer
,	O
ret	int
&&	O
ret	int
!=	O
EAGAIN	int
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
mu_message_unencapsulate	function
(	O
mu_message_t	pointer
msg	pointer
,	O
mu_message_t	pointer
*	O
newmsg	pointer
,	O
mu_mime_io_buffer_t	pointer
info	pointer
)	O
{	O
int	O
ret	int
=	O
0	int
;	O
mu_header_t	pointer
hdr	pointer
;	O
mu_stream_t	pointer
istream	pointer
;	O
if	O
(	O
msg	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
newmsg	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
info	pointer
==	O
NULL	O
&&	O
(	O
ret	int
=	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
)	O
==	O
0	int
)	O
{	O
const	O
char	O
*	O
s	pointer
;	O
if	O
(	O
!	O
(	O
mu_header_sget_value	O
(	O
hdr	pointer
,	O
MU_HEADER_CONTENT_TYPE	pointer
,	O
&	O
s	pointer
)	O
==	O
0	int
&&	O
mu_c_strncasecmp	function
(	O
s	pointer
,	O
MESSAGE_RFC822_STR	pointer
,	O
sizeof	O
(	O
MESSAGE_RFC822_STR	pointer
)	O
-	O
1	int
)	O
==	O
0	int
)	O
)	O
return	O
EINVAL	int
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
_attachment_setup	function
(	O
&	O
info	pointer
,	O
msg	pointer
,	O
&	O
istream	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
ret	int
;	O
ret	int
=	O
mu_stream_to_message	function
(	O
istream	pointer
,	O
&	O
info	pointer
->	O
msg	pointer
)	O
;	O
mu_stream_unref	function
(	O
istream	pointer
)	O
;	O
if	O
(	O
ret	int
==	O
0	int
)	O
*	O
newmsg	pointer
=	O
info	pointer
->	O
msg	pointer
;	O
_attachment_free	function
(	O
info	pointer
,	O
ret	int
&&	O
ret	int
!=	O
EAGAIN	int
)	O
;	O
return	O
ret	int
;	O
}	O
