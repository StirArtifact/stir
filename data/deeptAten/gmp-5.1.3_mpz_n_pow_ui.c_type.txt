void	O
mpz_n_pow_ui	O
(	O
mpz_ptr	pointer
r	pointer
,	O
mp_srcptr	pointer
bp	pointer
,	O
mp_size_t	long
bsize	long
,	O
unsigned	O
long	O
int	O
e	long
)	O
{	O
mp_ptr	pointer
rp	pointer
;	O
mp_size_t	long
rtwos_limbs	long
,	O
ralloc	long
,	O
rsize	long
;	O
int	O
rneg	int
,	O
i	long
,	O
cnt	int
,	O
btwos	int
,	O
r_bp_overlap	int
;	O
mp_limb_t	long
blimb	long
,	O
rl	long
;	O
mp_bitcnt_t	long
rtwos_bits	long
;	O
mp_limb_t	long
blimb_low	long
,	O
rl_high	long
;	O
TMP_DECL	O
;	O
TRACE	O
(	O
printf	O
(	O
"mpz_n_pow_ui rp=0x%lX bp=0x%lX bsize=%ld e=%lu (0x%lX)\n"	pointer
,	O
PTR	O
(	O
r	pointer
)	O
,	O
bp	pointer
,	O
bsize	long
,	O
e	long
,	O
e	long
)	O
;	O
mpn_trace	O
(	O
"b"	pointer
,	O
bp	pointer
,	O
bsize	long
)	O
)	O
;	O
ASSERT	O
(	O
bsize	long
==	O
0	int
||	O
bp	pointer
[	O
ABS	O
(	O
bsize	long
)	O
-	O
1	int
]	O
!=	O
0	int
)	O
;	O
ASSERT	O
(	O
MPN_SAME_OR_SEPARATE2_P	O
(	O
PTR	O
(	O
r	pointer
)	O
,	O
ALLOC	O
(	O
r	pointer
)	O
,	O
bp	pointer
,	O
ABS	O
(	O
bsize	long
)	O
)	O
)	O
;	O
if	O
(	O
e	long
==	O
0	int
)	O
{	O
PTR	O
(	O
r	pointer
)	O
[	O
0	int
]	O
=	O
1	int
;	O
SIZ	O
(	O
r	pointer
)	O
=	O
1	int
;	O
return	O
;	O
}	O
if	O
(	O
bsize	long
==	O
0	int
)	O
{	O
SIZ	O
(	O
r	pointer
)	O
=	O
0	int
;	O
return	O
;	O
}	O
rneg	int
=	O
(	O
bsize	long
<	O
0	int
&&	O
(	O
e	long
&	O
1	int
)	O
!=	O
0	int
)	O
;	O
bsize	long
=	O
ABS	O
(	O
bsize	long
)	O
;	O
TRACE	O
(	O
printf	O
(	O
"rneg %d\n"	pointer
,	O
rneg	int
)	O
)	O
;	O
r_bp_overlap	int
=	O
(	O
PTR	O
(	O
r	pointer
)	O
==	O
bp	pointer
)	O
;	O
rtwos_limbs	long
=	O
0	int
;	O
for	O
(	O
blimb	long
=	O
*	O
bp	pointer
;	O
blimb	long
==	O
0	int
;	O
blimb	long
=	O
*	O
++	O
bp	pointer
)	O
{	O
rtwos_limbs	long
+=	O
e	long
;	O
bsize	long
--	O
;	O
ASSERT	O
(	O
bsize	long
>=	O
1	int
)	O
;	O
}	O
TRACE	O
(	O
printf	O
(	O
"trailing zero rtwos_limbs=%ld\n"	pointer
,	O
rtwos_limbs	long
)	O
)	O
;	O
count_trailing_zeros	O
(	O
btwos	int
,	O
blimb	long
)	O
;	O
blimb	long
>>=	O
btwos	int
;	O
rtwos_bits	long
=	O
e	long
*	O
btwos	int
;	O
rtwos_limbs	long
+=	O
rtwos_bits	long
/	O
GMP_NUMB_BITS	O
;	O
rtwos_bits	long
%=	O
GMP_NUMB_BITS	O
;	O
TRACE	O
(	O
printf	O
(	O
"trailing zero btwos=%d rtwos_limbs=%ld rtwos_bits=%lu\n"	pointer
,	O
btwos	int
,	O
rtwos_limbs	long
,	O
rtwos_bits	long
)	O
)	O
;	O
TMP_MARK	O
;	O
rl	long
=	O
1	int
;	O
rl_high	long
=	O
0	int
;	O
if	O
(	O
bsize	long
==	O
1	int
)	O
{	O
bsize_1	O
:	O
while	O
(	O
blimb	long
<=	O
GMP_NUMB_HALFMAX	O
)	O
{	O
TRACE	O
(	O
printf	O
(	O
"small e=0x%lX blimb=0x%lX rl=0x%lX\n"	pointer
,	O
e	long
,	O
blimb	long
,	O
rl	long
)	O
)	O
;	O
ASSERT	O
(	O
e	long
!=	O
0	int
)	O
;	O
if	O
(	O
(	O
e	long
&	O
1	int
)	O
!=	O
0	int
)	O
rl	long
*=	O
blimb	long
;	O
e	long
>>=	O
1	int
;	O
if	O
(	O
e	long
==	O
0	int
)	O
goto	O
got_rl	O
;	O
blimb	long
*=	O
blimb	long
;	O
}	O
TRACE	O
(	O
printf	O
(	O
"single power, e=0x%lX b=0x%lX rl=0x%lX\n"	pointer
,	O
e	long
,	O
blimb	long
,	O
rl	long
)	O
)	O
;	O
bsize	long
=	O
2	int
;	O
ASSERT	O
(	O
e	long
!=	O
0	int
)	O
;	O
if	O
(	O
(	O
e	long
&	O
1	int
)	O
!=	O
0	int
)	O
{	O
umul_ppmm	O
(	O
rl_high	long
,	O
rl	long
,	O
rl	long
,	O
blimb	long
<<	O
GMP_NAIL_BITS	int
)	O
;	O
rl	long
>>=	O
GMP_NAIL_BITS	int
;	O
}	O
e	long
>>=	O
1	int
;	O
umul_ppmm	O
(	O
blimb	long
,	O
blimb_low	long
,	O
blimb	long
,	O
blimb	long
<<	O
GMP_NAIL_BITS	int
)	O
;	O
blimb_low	long
>>=	O
GMP_NAIL_BITS	int
;	O
got_rl	O
:	O
TRACE	O
(	O
printf	O
(	O
"double power e=0x%lX blimb=0x%lX:0x%lX rl=0x%lX:%lX\n"	pointer
,	O
e	long
,	O
blimb	long
,	O
blimb_low	long
,	O
rl_high	long
,	O
rl	long
)	O
)	O
;	O
if	O
(	O
rtwos_bits	long
!=	O
0	int
&&	O
!	O
(	O
rl_high	long
==	O
0	int
&&	O
rl	long
==	O
1	int
)	O
&&	O
(	O
rl_high	long
>>	O
(	O
GMP_NUMB_BITS	O
-	O
rtwos_bits	long
)	O
)	O
==	O
0	int
)	O
{	O
mp_limb_t	long
new_rl_high	long
=	O
(	O
rl_high	long
<<	O
rtwos_bits	long
)	O
|	O
(	O
rl	long
>>	O
(	O
GMP_NUMB_BITS	O
-	O
rtwos_bits	long
)	O
)	O
;	O
if	O
(	O
!	O
(	O
rl_high	long
==	O
0	int
&&	O
new_rl_high	long
!=	O
0	int
)	O
)	O
{	O
rl_high	long
=	O
new_rl_high	long
;	O
rl	long
<<=	O
rtwos_bits	long
;	O
rtwos_bits	long
=	O
0	int
;	O
TRACE	O
(	O
printf	O
(	O
"merged rtwos_bits, rl=0x%lX:%lX\n"	pointer
,	O
rl_high	long
,	O
rl	long
)	O
)	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
bsize	long
==	O
2	int
)	O
{	O
mp_limb_t	long
bsecond	long
=	O
bp	pointer
[	O
1	int
]	O
;	O
if	O
(	O
btwos	int
!=	O
0	int
)	O
blimb	long
|=	O
(	O
bsecond	long
<<	O
(	O
GMP_NUMB_BITS	O
-	O
btwos	int
)	O
)	O
&	O
GMP_NUMB_MASK	O
;	O
bsecond	long
>>=	O
btwos	int
;	O
if	O
(	O
bsecond	long
==	O
0	int
)	O
{	O
bsize	long
=	O
1	int
;	O
goto	O
bsize_1	O
;	O
}	O
TRACE	O
(	O
printf	O
(	O
"bsize==2 using b=0x%lX:%lX"	pointer
,	O
bsecond	long
,	O
blimb	long
)	O
)	O
;	O
blimb_low	long
=	O
blimb	long
;	O
blimb	long
=	O
bsecond	long
;	O
}	O
else	O
{	O
if	O
(	O
r_bp_overlap	int
||	O
btwos	int
!=	O
0	int
)	O
{	O
mp_ptr	pointer
tp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
bsize	long
)	O
;	O
MPN_RSHIFT_OR_COPY	O
(	O
tp	pointer
,	O
bp	pointer
,	O
bsize	long
,	O
btwos	int
)	O
;	O
bp	pointer
=	O
tp	pointer
;	O
TRACE	O
(	O
printf	O
(	O
"rshift or copy bp,bsize, new bsize=%ld\n"	pointer
,	O
bsize	long
)	O
)	O
;	O
}	O
blimb_low	long
=	O
bp	pointer
[	O
0	int
]	O
;	O
blimb	long
=	O
bp	pointer
[	O
bsize	long
-	O
1	int
]	O
;	O
TRACE	O
(	O
printf	O
(	O
"big bsize=%ld  "	pointer
,	O
bsize	long
)	O
;	O
mpn_trace	O
(	O
"b"	pointer
,	O
bp	pointer
,	O
bsize	long
)	O
)	O
;	O
}	O
ASSERT	O
(	O
blimb	long
!=	O
0	int
)	O
;	O
count_leading_zeros	O
(	O
cnt	int
,	O
blimb	long
)	O
;	O
ralloc	long
=	O
(	O
bsize	long
*	O
GMP_NUMB_BITS	O
-	O
cnt	int
+	O
GMP_NAIL_BITS	int
)	O
*	O
e	long
/	O
GMP_NUMB_BITS	O
+	O
5	int
;	O
TRACE	O
(	O
printf	O
(	O
"ralloc %ld, from bsize=%ld blimb=0x%lX cnt=%d\n"	pointer
,	O
ralloc	long
,	O
bsize	long
,	O
blimb	long
,	O
cnt	int
)	O
)	O
;	O
rp	pointer
=	O
MPZ_REALLOC	O
(	O
r	pointer
,	O
ralloc	long
+	O
rtwos_limbs	long
)	O
;	O
MPN_ZERO	O
(	O
rp	pointer
,	O
rtwos_limbs	long
)	O
;	O
rp	pointer
+=	O
rtwos_limbs	long
;	O
if	O
(	O
e	long
==	O
0	int
)	O
{	O
rp	pointer
[	O
0	int
]	O
=	O
rl	long
;	O
rsize	long
=	O
1	int
;	O
rp	pointer
[	O
1	int
]	O
=	O
rl_high	long
;	O
rsize	long
+=	O
(	O
rl_high	long
!=	O
0	int
)	O
;	O
ASSERT	O
(	O
rp	pointer
[	O
rsize	long
-	O
1	int
]	O
!=	O
0	int
)	O
;	O
}	O
else	O
{	O
mp_ptr	pointer
tp	pointer
;	O
mp_size_t	long
talloc	long
;	O
talloc	long
=	O
ralloc	long
;	O
if	O
(	O
bsize	long
<=	O
2	int
||	O
(	O
e	long
&	O
1	int
)	O
==	O
0	int
)	O
talloc	long
/=	O
2	int
;	O
TRACE	O
(	O
printf	O
(	O
"talloc %ld\n"	pointer
,	O
talloc	long
)	O
)	O
;	O
tp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
talloc	long
)	O
;	O
count_leading_zeros	O
(	O
cnt	int
,	O
(	O
mp_limb_t	long
)	O
e	long
)	O
;	O
i	long
=	O
GMP_LIMB_BITS	int
-	O
cnt	int
-	O
2	int
;	O
if	O
(	O
bsize	long
<=	O
2	int
)	O
{	O
mp_limb_t	long
mult	array
[	O
2	int
]	O
;	O
ASSERT	O
(	O
bsize	long
==	O
2	int
)	O
;	O
ASSERT	O
(	O
blimb	long
!=	O
0	int
)	O
;	O
if	O
(	O
(	O
i	long
&	O
1	int
)	O
==	O
0	int
)	O
SWAP_RP_TP	O
;	O
rp	pointer
[	O
0	int
]	O
=	O
blimb_low	long
;	O
rp	pointer
[	O
1	int
]	O
=	O
blimb	long
;	O
rsize	long
=	O
2	int
;	O
mult	array
[	O
0	int
]	O
=	O
blimb_low	long
;	O
mult	array
[	O
1	int
]	O
=	O
blimb	long
;	O
for	O
(	O
;	O
i	long
>=	O
0	int
;	O
i	long
--	O
)	O
{	O
TRACE	O
(	O
printf	O
(	O
"mul_2 loop i=%d e=0x%lX, rsize=%ld ralloc=%ld talloc=%ld\n"	pointer
,	O
i	long
,	O
e	long
,	O
rsize	long
,	O
ralloc	long
,	O
talloc	long
)	O
;	O
mpn_trace	O
(	O
"r"	pointer
,	O
rp	pointer
,	O
rsize	long
)	O
)	O
;	O
MPN_SQR	O
(	O
tp	pointer
,	O
talloc	long
,	O
rp	pointer
,	O
rsize	long
)	O
;	O
SWAP_RP_TP	O
;	O
if	O
(	O
(	O
e	long
&	O
(	O
1L	int
<<	O
i	long
)	O
)	O
!=	O
0	int
)	O
MPN_MUL_2	O
(	O
rp	pointer
,	O
rsize	long
,	O
ralloc	long
,	O
mult	array
)	O
;	O
}	O
TRACE	O
(	O
mpn_trace	O
(	O
"mul_2 before rl, r"	pointer
,	O
rp	pointer
,	O
rsize	long
)	O
)	O
;	O
if	O
(	O
rl_high	long
!=	O
0	int
)	O
{	O
mult	array
[	O
0	int
]	O
=	O
rl	long
;	O
mult	array
[	O
1	int
]	O
=	O
rl_high	long
;	O
MPN_MUL_2	O
(	O
rp	pointer
,	O
rsize	long
,	O
ralloc	long
,	O
mult	array
)	O
;	O
}	O
else	O
if	O
(	O
rl	long
!=	O
1	int
)	O
MPN_MUL_1	O
(	O
rp	pointer
,	O
rsize	long
,	O
ralloc	long
,	O
rl	long
)	O
;	O
}	O
else	O
{	O
int	O
parity	int
;	O
ULONG_PARITY	O
(	O
parity	int
,	O
e	long
)	O
;	O
if	O
(	O
(	O
(	O
parity	int
^	O
i	long
)	O
&	O
1	int
)	O
!=	O
0	int
)	O
SWAP_RP_TP	O
;	O
MPN_COPY	O
(	O
rp	pointer
,	O
bp	pointer
,	O
bsize	long
)	O
;	O
rsize	long
=	O
bsize	long
;	O
for	O
(	O
;	O
i	long
>=	O
0	int
;	O
i	long
--	O
)	O
{	O
TRACE	O
(	O
printf	O
(	O
"mul loop i=%d e=0x%lX, rsize=%ld ralloc=%ld talloc=%ld\n"	pointer
,	O
i	long
,	O
e	long
,	O
rsize	long
,	O
ralloc	long
,	O
talloc	long
)	O
;	O
mpn_trace	O
(	O
"r"	pointer
,	O
rp	pointer
,	O
rsize	long
)	O
)	O
;	O
MPN_SQR	O
(	O
tp	pointer
,	O
talloc	long
,	O
rp	pointer
,	O
rsize	long
)	O
;	O
SWAP_RP_TP	O
;	O
if	O
(	O
(	O
e	long
&	O
(	O
1L	int
<<	O
i	long
)	O
)	O
!=	O
0	int
)	O
{	O
MPN_MUL	O
(	O
tp	pointer
,	O
talloc	long
,	O
rp	pointer
,	O
rsize	long
,	O
bp	pointer
,	O
bsize	long
)	O
;	O
SWAP_RP_TP	O
;	O
}	O
}	O
}	O
}	O
ASSERT	O
(	O
rp	pointer
==	O
PTR	O
(	O
r	pointer
)	O
+	O
rtwos_limbs	long
)	O
;	O
TRACE	O
(	O
mpn_trace	O
(	O
"end loop r"	pointer
,	O
rp	pointer
,	O
rsize	long
)	O
)	O
;	O
TMP_FREE	O
;	O
if	O
(	O
rtwos_bits	long
!=	O
0	int
)	O
{	O
MPN_LSHIFT	O
(	O
rp	pointer
,	O
rsize	long
,	O
ralloc	long
,	O
(	O
unsigned	O
)	O
rtwos_bits	long
)	O
;	O
TRACE	O
(	O
mpn_trace	O
(	O
"lshift r"	pointer
,	O
rp	pointer
,	O
rsize	long
)	O
)	O
;	O
}	O
rsize	long
+=	O
rtwos_limbs	long
;	O
SIZ	O
(	O
r	pointer
)	O
=	O
(	O
rneg	int
?	O
-	O
rsize	long
:	O
rsize	long
)	O
;	O
}	O
