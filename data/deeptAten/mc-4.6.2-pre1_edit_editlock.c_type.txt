struct	O
lock_s	struct
{	O
char	O
*	O
who	pointer
;	O
pid_t	int
pid	int
;	O
}	O
;	O
static	O
char	O
*	O
lock_build_name	function
(	O
void	O
)	O
{	O
char	O
host	array
[	O
BUF_SIZE	int
]	O
;	O
const	O
char	O
*	O
user	pointer
;	O
user	pointer
=	O
getpwuid	function
(	O
getuid	function
(	O
)	O
)	O
->	O
pw_name	pointer
;	O
if	O
(	O
!	O
user	pointer
)	O
user	pointer
=	O
getenv	function
(	O
"USER"	pointer
)	O
;	O
if	O
(	O
!	O
user	pointer
)	O
user	pointer
=	O
getenv	function
(	O
"USERNAME"	pointer
)	O
;	O
if	O
(	O
!	O
user	pointer
)	O
user	pointer
=	O
getenv	function
(	O
"LOGNAME"	pointer
)	O
;	O
if	O
(	O
!	O
user	pointer
)	O
user	pointer
=	O
""	pointer
;	O
if	O
(	O
gethostname	function
(	O
host	array
,	O
BUF_SIZE	int
-	O
1	int
)	O
==	O
-	O
1	int
)	O
*	O
host	array
=	O
'\0'	O
;	O
return	O
g_strdup_printf	function
(	O
"%s@%s.%d"	pointer
,	O
user	pointer
,	O
host	array
,	O
(	O
int	O
)	O
getpid	function
(	O
)	O
)	O
;	O
}	O
static	O
char	O
*	O
lock_build_symlink_name	function
(	O
const	O
char	O
*	O
fname	pointer
)	O
{	O
char	O
*	O
fname_copy	pointer
,	O
*	O
symlink_name	pointer
;	O
char	O
absolute_fname	array
[	O
PATH_MAX	int
]	O
;	O
if	O
(	O
mc_realpath	function
(	O
fname	pointer
,	O
absolute_fname	array
)	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
fname	pointer
=	O
x_basename	function
(	O
absolute_fname	array
)	O
;	O
fname_copy	pointer
=	O
g_strdup	function
(	O
fname	pointer
)	O
;	O
absolute_fname	array
[	O
fname	pointer
-	O
absolute_fname	array
]	O
=	O
'\0'	O
;	O
symlink_name	pointer
=	O
g_strconcat	function
(	O
absolute_fname	array
,	O
".#"	pointer
,	O
fname_copy	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
g_free	function
(	O
fname_copy	pointer
)	O
;	O
return	O
symlink_name	pointer
;	O
}	O
static	O
struct	O
lock_s	struct
*	O
lock_extract_info	function
(	O
const	O
char	O
*	O
str	pointer
)	O
{	O
int	O
i	array
;	O
const	O
char	O
*	O
p	pointer
,	O
*	O
s	pointer
;	O
static	O
char	O
pid	int
[	O
PID_BUF_SIZE	int
]	O
,	O
who	pointer
[	O
BUF_SIZE	int
]	O
;	O
static	O
struct	O
lock_s	struct
lock	pointer
;	O
for	O
(	O
p	pointer
=	O
str	pointer
+	O
strlen	function
(	O
str	pointer
)	O
-	O
1	int
;	O
p	pointer
>=	O
str	pointer
;	O
p	pointer
--	O
)	O
if	O
(	O
*	O
p	pointer
==	O
'.'	O
)	O
break	O
;	O
i	array
=	O
0	int
;	O
for	O
(	O
s	pointer
=	O
str	pointer
;	O
s	pointer
<	O
p	pointer
&&	O
i	array
<	O
BUF_SIZE	int
;	O
s	pointer
++	O
)	O
who	pointer
[	O
i	array
++	O
]	O
=	O
*	O
s	pointer
;	O
who	pointer
[	O
i	array
]	O
=	O
'\0'	O
;	O
i	array
=	O
0	int
;	O
for	O
(	O
p	pointer
=	O
p	pointer
+	O
1	int
;	O
p	pointer
<	O
str	pointer
+	O
strlen	function
(	O
str	pointer
)	O
&&	O
*	O
p	pointer
!=	O
':'	O
&&	O
i	array
<	O
PID_BUF_SIZE	int
;	O
p	pointer
++	O
)	O
pid	int
[	O
i	array
++	O
]	O
=	O
*	O
p	pointer
;	O
pid	int
[	O
i	array
]	O
=	O
'\0'	O
;	O
lock	pointer
.	O
pid	int
=	O
(	O
pid_t	int
)	O
atol	function
(	O
pid	int
)	O
;	O
lock	pointer
.	O
who	pointer
=	O
who	pointer
;	O
return	O
&	O
lock	pointer
;	O
}	O
static	O
char	O
*	O
lock_get_info	function
(	O
const	O
char	O
*	O
lockfname	pointer
)	O
{	O
int	O
cnt	int
;	O
static	O
char	O
buf	pointer
[	O
BUF_SIZE	int
]	O
;	O
if	O
(	O
(	O
cnt	int
=	O
readlink	function
(	O
lockfname	pointer
,	O
buf	pointer
,	O
BUF_SIZE	int
-	O
1	int
)	O
)	O
==	O
-	O
1	int
||	O
!	O
buf	pointer
||	O
!	O
*	O
buf	pointer
)	O
return	O
NULL	O
;	O
buf	pointer
[	O
cnt	int
]	O
=	O
'\0'	O
;	O
return	O
buf	pointer
;	O
}	O
int	O
edit_lock_file	function
(	O
const	O
char	O
*	O
fname	pointer
)	O
{	O
char	O
*	O
lockfname	pointer
,	O
*	O
newlock	pointer
,	O
*	O
msg	pointer
,	O
*	O
lock	pointer
;	O
struct	O
stat	struct
statbuf	struct
;	O
struct	O
lock_s	struct
*	O
lockinfo	pointer
;	O
if	O
(	O
!	O
fname	pointer
||	O
!	O
*	O
fname	pointer
)	O
return	O
0	int
;	O
if	O
(	O
!	O
vfs_file_is_local	function
(	O
fname	pointer
)	O
)	O
return	O
0	int
;	O
lockfname	pointer
=	O
lock_build_symlink_name	function
(	O
fname	pointer
)	O
;	O
if	O
(	O
lockfname	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
if	O
(	O
lstat	function
(	O
lockfname	pointer
,	O
&	O
statbuf	struct
)	O
==	O
0	int
)	O
{	O
lock	pointer
=	O
lock_get_info	function
(	O
lockfname	pointer
)	O
;	O
if	O
(	O
!	O
lock	pointer
)	O
{	O
g_free	function
(	O
lockfname	pointer
)	O
;	O
return	O
0	int
;	O
}	O
lockinfo	pointer
=	O
lock_extract_info	function
(	O
lock	pointer
)	O
;	O
if	O
(	O
!	O
lockinfo	pointer
->	O
pid	int
||	O
!	O
(	O
kill	function
(	O
lockinfo	pointer
->	O
pid	int
,	O
0	int
)	O
==	O
-	O
1	int
&&	O
errno	O
==	O
ESRCH	int
)	O
)	O
{	O
msg	pointer
=	O
g_strdup_printf	function
(	O
_	O
(	O
"File \"%s\" is already being edited\n"	pointer
"User: %s\nProcess ID: %d"	pointer
)	O
,	O
x_basename	function
(	O
lockfname	pointer
)	O
+	O
2	int
,	O
lockinfo	pointer
->	O
who	pointer
,	O
(	O
int	O
)	O
lockinfo	pointer
->	O
pid	int
)	O
;	O
switch	O
(	O
edit_query_dialog2	O
(	O
_	O
(	O
"File locked"	pointer
)	O
,	O
msg	pointer
,	O
_	O
(	O
"&Grab lock"	pointer
)	O
,	O
_	O
(	O
"&Ignore lock"	pointer
)	O
)	O
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
1	int
:	O
case	O
-	O
1	int
:	O
g_free	function
(	O
lockfname	pointer
)	O
;	O
g_free	function
(	O
msg	pointer
)	O
;	O
return	O
0	int
;	O
}	O
g_free	function
(	O
msg	pointer
)	O
;	O
}	O
unlink	function
(	O
lockfname	pointer
)	O
;	O
}	O
newlock	pointer
=	O
lock_build_name	function
(	O
)	O
;	O
if	O
(	O
symlink	function
(	O
newlock	pointer
,	O
lockfname	pointer
)	O
==	O
-	O
1	int
)	O
{	O
g_free	function
(	O
lockfname	pointer
)	O
;	O
g_free	function
(	O
newlock	pointer
)	O
;	O
return	O
0	int
;	O
}	O
g_free	function
(	O
lockfname	pointer
)	O
;	O
g_free	function
(	O
newlock	pointer
)	O
;	O
return	O
1	int
;	O
}	O
int	O
edit_unlock_file	function
(	O
const	O
char	O
*	O
fname	pointer
)	O
{	O
char	O
*	O
lockfname	pointer
,	O
*	O
lock	pointer
;	O
struct	O
stat	struct
statbuf	struct
;	O
if	O
(	O
!	O
fname	pointer
||	O
!	O
*	O
fname	pointer
)	O
return	O
0	int
;	O
lockfname	pointer
=	O
lock_build_symlink_name	function
(	O
fname	pointer
)	O
;	O
if	O
(	O
lockfname	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
if	O
(	O
lstat	function
(	O
lockfname	pointer
,	O
&	O
statbuf	struct
)	O
==	O
-	O
1	int
)	O
{	O
g_free	function
(	O
lockfname	pointer
)	O
;	O
return	O
0	int
;	O
}	O
lock	pointer
=	O
lock_get_info	function
(	O
lockfname	pointer
)	O
;	O
if	O
(	O
lock	pointer
)	O
{	O
if	O
(	O
lock_extract_info	function
(	O
lock	pointer
)	O
->	O
pid	int
!=	O
getpid	function
(	O
)	O
)	O
{	O
g_free	function
(	O
lockfname	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
unlink	function
(	O
lockfname	pointer
)	O
;	O
g_free	function
(	O
lockfname	pointer
)	O
;	O
return	O
0	int
;	O
}	O
