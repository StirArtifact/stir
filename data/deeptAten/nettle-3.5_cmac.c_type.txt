static	O
void	O
block_mulx	function
(	O
union	O
nettle_block16	union
*	O
dst	pointer
,	O
const	O
union	O
nettle_block16	union
*	O
src	pointer
)	O
{	O
uint64_t	long
carry	long
=	O
(	O
src	pointer
->	O
u64	array
[	O
0	int
]	O
&	O
0x80	int
)	O
>>	O
7	int
;	O
dst	pointer
->	O
u64	array
[	O
0	int
]	O
=	O
LE_SHIFT	O
(	O
src	pointer
->	O
u64	array
[	O
0	int
]	O
)	O
|	O
(	O
(	O
src	pointer
->	O
u64	array
[	O
1	int
]	O
&	O
0x80	int
)	O
<<	O
49	int
)	O
;	O
dst	pointer
->	O
u64	array
[	O
1	int
]	O
=	O
LE_SHIFT	O
(	O
src	pointer
->	O
u64	array
[	O
1	int
]	O
)	O
^	O
(	O
0x8700000000000000	int
&	O
-	O
carry	long
)	O
;	O
}	O
void	O
cmac128_set_key	O
(	O
struct	O
cmac128_key	struct
*	O
key	pointer
,	O
const	O
void	O
*	O
cipher	pointer
,	O
nettle_cipher_func	function
*	O
encrypt	pointer
)	O
{	O
static	O
const	O
union	O
nettle_block16	union
zero_block	union
;	O
union	O
nettle_block16	union
L	union
;	O
encrypt	pointer
(	O
cipher	pointer
,	O
16	int
,	O
L	union
.	O
b	array
,	O
zero_block	union
.	O
b	array
)	O
;	O
block_mulx	function
(	O
&	O
key	pointer
->	O
K1	union
,	O
&	O
L	union
)	O
;	O
block_mulx	function
(	O
&	O
key	pointer
->	O
K2	union
,	O
&	O
key	pointer
->	O
K1	union
)	O
;	O
}	O
void	O
cmac128_init	O
(	O
struct	O
cmac128_ctx	struct
*	O
ctx	pointer
)	O
{	O
memset	function
(	O
&	O
ctx	pointer
->	O
X	union
,	O
0	int
,	O
sizeof	O
(	O
ctx	pointer
->	O
X	union
)	O
)	O
;	O
ctx	pointer
->	O
index	function
=	O
0	int
;	O
}	O
void	O
cmac128_update	O
(	O
struct	O
cmac128_ctx	struct
*	O
ctx	pointer
,	O
const	O
void	O
*	O
cipher	pointer
,	O
nettle_cipher_func	function
*	O
encrypt	pointer
,	O
size_t	long
msg_len	long
,	O
const	O
uint8_t	char
*	O
msg	pointer
)	O
{	O
union	O
nettle_block16	union
Y	union
;	O
if	O
(	O
ctx	pointer
->	O
index	function
<	O
16	int
)	O
{	O
size_t	long
len	long
=	O
MIN	O
(	O
16	int
-	O
ctx	pointer
->	O
index	function
,	O
msg_len	long
)	O
;	O
memcpy	function
(	O
&	O
ctx	pointer
->	O
block	union
.	O
b	array
[	O
ctx	pointer
->	O
index	function
]	O
,	O
msg	pointer
,	O
len	long
)	O
;	O
msg	pointer
+=	O
len	long
;	O
msg_len	long
-=	O
len	long
;	O
ctx	pointer
->	O
index	function
+=	O
len	long
;	O
}	O
if	O
(	O
msg_len	long
==	O
0	int
)	O
{	O
return	O
;	O
}	O
memxor3	O
(	O
Y	union
.	O
b	array
,	O
ctx	pointer
->	O
X	union
.	O
b	array
,	O
ctx	pointer
->	O
block	union
.	O
b	array
,	O
16	int
)	O
;	O
encrypt	pointer
(	O
cipher	pointer
,	O
16	int
,	O
ctx	pointer
->	O
X	union
.	O
b	array
,	O
Y	union
.	O
b	array
)	O
;	O
while	O
(	O
msg_len	long
>	O
16	int
)	O
{	O
memxor3	O
(	O
Y	union
.	O
b	array
,	O
ctx	pointer
->	O
X	union
.	O
b	array
,	O
msg	pointer
,	O
16	int
)	O
;	O
encrypt	pointer
(	O
cipher	pointer
,	O
16	int
,	O
ctx	pointer
->	O
X	union
.	O
b	array
,	O
Y	union
.	O
b	array
)	O
;	O
msg	pointer
+=	O
16	int
;	O
msg_len	long
-=	O
16	int
;	O
}	O
memcpy	function
(	O
ctx	pointer
->	O
block	union
.	O
b	array
,	O
msg	pointer
,	O
msg_len	long
)	O
;	O
ctx	pointer
->	O
index	function
=	O
msg_len	long
;	O
}	O
void	O
cmac128_digest	O
(	O
struct	O
cmac128_ctx	struct
*	O
ctx	pointer
,	O
const	O
struct	O
cmac128_key	struct
*	O
key	pointer
,	O
const	O
void	O
*	O
cipher	pointer
,	O
nettle_cipher_func	function
*	O
encrypt	pointer
,	O
unsigned	O
length	long
,	O
uint8_t	char
*	O
dst	pointer
)	O
{	O
union	O
nettle_block16	union
Y	union
;	O
if	O
(	O
ctx	pointer
->	O
index	function
<	O
16	int
)	O
{	O
ctx	pointer
->	O
block	union
.	O
b	array
[	O
ctx	pointer
->	O
index	function
]	O
=	O
0x80	int
;	O
memset	function
(	O
ctx	pointer
->	O
block	union
.	O
b	array
+	O
ctx	pointer
->	O
index	function
+	O
1	int
,	O
0	int
,	O
16	int
-	O
1	int
-	O
ctx	pointer
->	O
index	function
)	O
;	O
memxor	O
(	O
ctx	pointer
->	O
block	union
.	O
b	array
,	O
key	pointer
->	O
K2	union
.	O
b	array
,	O
16	int
)	O
;	O
}	O
else	O
{	O
memxor	O
(	O
ctx	pointer
->	O
block	union
.	O
b	array
,	O
key	pointer
->	O
K1	union
.	O
b	array
,	O
16	int
)	O
;	O
}	O
memxor3	O
(	O
Y	union
.	O
b	array
,	O
ctx	pointer
->	O
block	union
.	O
b	array
,	O
ctx	pointer
->	O
X	union
.	O
b	array
,	O
16	int
)	O
;	O
assert	O
(	O
length	long
<=	O
16	int
)	O
;	O
if	O
(	O
length	long
==	O
16	int
)	O
{	O
encrypt	pointer
(	O
cipher	pointer
,	O
16	int
,	O
dst	pointer
,	O
Y	union
.	O
b	array
)	O
;	O
}	O
else	O
{	O
encrypt	pointer
(	O
cipher	pointer
,	O
16	int
,	O
ctx	pointer
->	O
block	union
.	O
b	array
,	O
Y	union
.	O
b	array
)	O
;	O
memcpy	function
(	O
dst	pointer
,	O
ctx	pointer
->	O
block	union
.	O
b	array
,	O
length	long
)	O
;	O
}	O
cmac128_init	O
(	O
ctx	pointer
)	O
;	O
}	O
