static	O
char	O
*	O
stash_tar_linkname	function
(	O
char	O
*	O
linkname	array
)	O
{	O
static	O
char	O
hold_tar_linkname	array
[	O
TARLINKNAMESIZE	int
+	O
1	int
]	O
;	O
strncpy	function
(	O
hold_tar_linkname	array
,	O
linkname	array
,	O
TARLINKNAMESIZE	int
)	O
;	O
hold_tar_linkname	array
[	O
TARLINKNAMESIZE	int
]	O
=	O
'\0'	O
;	O
return	O
hold_tar_linkname	array
;	O
}	O
static	O
size_t	long
split_long_name	function
(	O
const	O
char	O
*	O
name	pointer
,	O
size_t	long
length	long
)	O
{	O
size_t	long
i	int
;	O
if	O
(	O
length	long
>	O
TARPREFIXSIZE	int
)	O
length	long
=	O
TARPREFIXSIZE	int
+	O
2	int
;	O
for	O
(	O
i	int
=	O
length	long
-	O
1	int
;	O
i	int
>	O
0	int
;	O
i	int
--	O
)	O
if	O
(	O
name	pointer
[	O
i	int
]	O
==	O
'/'	O
)	O
break	O
;	O
return	O
i	int
;	O
}	O
static	O
char	O
*	O
stash_tar_filename	function
(	O
char	O
*	O
prefix	array
,	O
char	O
*	O
filename	pointer
)	O
{	O
static	O
char	O
hold_tar_filename	array
[	O
TARNAMESIZE	int
+	O
TARPREFIXSIZE	int
+	O
2	int
]	O
;	O
if	O
(	O
prefix	array
==	O
NULL	O
||	O
*	O
prefix	array
==	O
'\0'	O
)	O
{	O
strncpy	function
(	O
hold_tar_filename	array
,	O
filename	pointer
,	O
TARNAMESIZE	int
)	O
;	O
hold_tar_filename	array
[	O
TARNAMESIZE	int
]	O
=	O
'\0'	O
;	O
}	O
else	O
{	O
strncpy	function
(	O
hold_tar_filename	array
,	O
prefix	array
,	O
TARPREFIXSIZE	int
)	O
;	O
hold_tar_filename	array
[	O
TARPREFIXSIZE	int
]	O
=	O
'\0'	O
;	O
strcat	function
(	O
hold_tar_filename	array
,	O
"/"	pointer
)	O
;	O
strncat	function
(	O
hold_tar_filename	array
,	O
filename	pointer
,	O
TARNAMESIZE	int
)	O
;	O
hold_tar_filename	array
[	O
TARPREFIXSIZE	int
+	O
TARNAMESIZE	int
]	O
=	O
'\0'	O
;	O
}	O
return	O
hold_tar_filename	array
;	O
}	O
static	O
int	O
to_oct_or_error	function
(	O
uintmax_t	long
value	long
,	O
size_t	long
digits	long
,	O
char	O
*	O
where	pointer
,	O
char	O
const	O
*	O
field	pointer
,	O
char	O
const	O
*	O
file	pointer
)	O
{	O
if	O
(	O
to_ascii	function
(	O
where	pointer
,	O
value	long
,	O
digits	long
,	O
LG_8	int
,	O
true	int
)	O
)	O
{	O
field_width_error	function
(	O
file	pointer
,	O
field	pointer
,	O
value	long
,	O
digits	long
,	O
true	int
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
unsigned	O
int	O
tar_checksum	function
(	O
struct	O
tar_header	struct
*	O
tar_hdr	pointer
)	O
{	O
unsigned	O
int	O
sum	int
=	O
0	int
;	O
char	O
*	O
p	pointer
=	O
(	O
char	O
*	O
)	O
tar_hdr	pointer
;	O
char	O
*	O
q	pointer
=	O
p	pointer
+	O
TARRECORDSIZE	int
;	O
int	O
i	int
;	O
while	O
(	O
p	pointer
<	O
tar_hdr	pointer
->	O
chksum	array
)	O
sum	int
+=	O
*	O
p	pointer
++	O
&	O
0xff	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
8	int
;	O
++	O
i	int
)	O
{	O
sum	int
+=	O
' '	O
;	O
++	O
p	pointer
;	O
}	O
while	O
(	O
p	pointer
<	O
q	pointer
)	O
sum	int
+=	O
*	O
p	pointer
++	O
&	O
0xff	int
;	O
return	O
sum	int
;	O
}	O
int	O
write_out_tar_header	function
(	O
struct	O
cpio_file_stat	struct
*	O
file_hdr	pointer
,	O
int	O
out_des	int
)	O
{	O
int	O
name_len	int
;	O
union	O
tar_record	union
tar_rec	union
;	O
struct	O
tar_header	struct
*	O
tar_hdr	pointer
=	O
(	O
struct	O
tar_header	struct
*	O
)	O
&	O
tar_rec	union
;	O
memset	function
(	O
&	O
tar_rec	union
,	O
0	int
,	O
sizeof	O
tar_rec	union
)	O
;	O
name_len	int
=	O
strlen	function
(	O
file_hdr	pointer
->	O
c_name	pointer
)	O
;	O
if	O
(	O
name_len	int
<=	O
TARNAMESIZE	int
)	O
{	O
strncpy	function
(	O
tar_hdr	pointer
->	O
name	pointer
,	O
file_hdr	pointer
->	O
c_name	pointer
,	O
name_len	int
)	O
;	O
}	O
else	O
{	O
int	O
prefix_len	int
=	O
split_long_name	function
(	O
file_hdr	pointer
->	O
c_name	pointer
,	O
name_len	int
)	O
;	O
strncpy	function
(	O
tar_hdr	pointer
->	O
prefix	array
,	O
file_hdr	pointer
->	O
c_name	pointer
,	O
prefix_len	int
)	O
;	O
strncpy	function
(	O
tar_hdr	pointer
->	O
name	pointer
,	O
file_hdr	pointer
->	O
c_name	pointer
+	O
prefix_len	int
+	O
1	int
,	O
name_len	int
-	O
prefix_len	int
-	O
1	int
)	O
;	O
}	O
TO_OCT	O
(	O
file_hdr	pointer
,	O
c_mode	short
&	O
MODE_ALL	O
,	O
8	int
,	O
tar_hdr	pointer
,	O
mode	int
)	O
;	O
TO_OCT	O
(	O
file_hdr	pointer
,	O
c_uid	short
,	O
8	int
,	O
tar_hdr	pointer
,	O
uid	int
)	O
;	O
TO_OCT	O
(	O
file_hdr	pointer
,	O
c_gid	short
,	O
8	int
,	O
tar_hdr	pointer
,	O
gid	int
)	O
;	O
TO_OCT	O
(	O
file_hdr	pointer
,	O
c_filesize	array
,	O
12	int
,	O
tar_hdr	pointer
,	O
size	int
)	O
;	O
TO_OCT	O
(	O
file_hdr	pointer
,	O
c_mtime	array
,	O
12	int
,	O
tar_hdr	pointer
,	O
mtime	long
)	O
;	O
switch	O
(	O
file_hdr	pointer
->	O
c_mode	short
&	O
CP_IFMT	int
)	O
{	O
case	O
CP_IFREG	int
:	O
if	O
(	O
file_hdr	pointer
->	O
c_tar_linkname	pointer
)	O
{	O
strncpy	function
(	O
tar_hdr	pointer
->	O
linkname	array
,	O
file_hdr	pointer
->	O
c_tar_linkname	pointer
,	O
TARLINKNAMESIZE	int
)	O
;	O
tar_hdr	pointer
->	O
typeflag	char
=	O
LNKTYPE	char
;	O
to_ascii	function
(	O
tar_hdr	pointer
->	O
size	int
,	O
0	int
,	O
12	int
,	O
LG_8	int
,	O
true	int
)	O
;	O
}	O
else	O
tar_hdr	pointer
->	O
typeflag	char
=	O
REGTYPE	char
;	O
break	O
;	O
case	O
CP_IFDIR	int
:	O
tar_hdr	pointer
->	O
typeflag	char
=	O
DIRTYPE	char
;	O
break	O
;	O
case	O
CP_IFCHR	int
:	O
tar_hdr	pointer
->	O
typeflag	char
=	O
CHRTYPE	char
;	O
break	O
;	O
case	O
CP_IFBLK	int
:	O
tar_hdr	pointer
->	O
typeflag	char
=	O
BLKTYPE	char
;	O
break	O
;	O
case	O
CP_IFIFO	int
:	O
tar_hdr	pointer
->	O
typeflag	char
=	O
FIFOTYPE	char
;	O
break	O
;	O
case	O
CP_IFLNK	int
:	O
tar_hdr	pointer
->	O
typeflag	char
=	O
SYMTYPE	char
;	O
strncpy	function
(	O
tar_hdr	pointer
->	O
linkname	array
,	O
file_hdr	pointer
->	O
c_tar_linkname	pointer
,	O
TARLINKNAMESIZE	int
)	O
;	O
to_ascii	function
(	O
tar_hdr	pointer
->	O
size	int
,	O
0	int
,	O
12	int
,	O
LG_8	int
,	O
true	int
)	O
;	O
break	O
;	O
}	O
if	O
(	O
archive_format	enum
==	O
arf_ustar	int
)	O
{	O
char	O
*	O
name	pointer
;	O
strncpy	function
(	O
tar_hdr	pointer
->	O
magic	array
,	O
TMAGIC	pointer
,	O
TMAGLEN	int
)	O
;	O
strncpy	function
(	O
tar_hdr	pointer
->	O
version	array
,	O
TVERSION	pointer
,	O
TVERSLEN	int
)	O
;	O
name	pointer
=	O
getuser	function
(	O
file_hdr	pointer
->	O
c_uid	short
)	O
;	O
if	O
(	O
name	pointer
)	O
strcpy	function
(	O
tar_hdr	pointer
->	O
uname	array
,	O
name	pointer
)	O
;	O
name	pointer
=	O
getgroup	function
(	O
file_hdr	pointer
->	O
c_gid	short
)	O
;	O
if	O
(	O
name	pointer
)	O
strcpy	function
(	O
tar_hdr	pointer
->	O
gname	array
,	O
name	pointer
)	O
;	O
TO_OCT	O
(	O
file_hdr	pointer
,	O
c_rdev_maj	array
,	O
8	int
,	O
tar_hdr	pointer
,	O
devmajor	array
)	O
;	O
TO_OCT	O
(	O
file_hdr	pointer
,	O
c_rdev_min	array
,	O
8	int
,	O
tar_hdr	pointer
,	O
devminor	array
)	O
;	O
}	O
to_ascii	function
(	O
tar_hdr	pointer
->	O
chksum	array
,	O
tar_checksum	function
(	O
tar_hdr	pointer
)	O
,	O
8	int
,	O
LG_8	int
,	O
true	int
)	O
;	O
tape_buffered_write	function
(	O
(	O
char	O
*	O
)	O
&	O
tar_rec	union
,	O
out_des	int
,	O
TARRECORDSIZE	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
null_block	function
(	O
long	O
*	O
block	pointer
,	O
int	O
size	int
)	O
{	O
register	O
long	O
*	O
p	pointer
=	O
block	pointer
;	O
register	O
int	O
i	int
=	O
size	int
/	O
sizeof	O
(	O
long	O
)	O
;	O
while	O
(	O
i	int
--	O
)	O
if	O
(	O
*	O
p	pointer
++	O
)	O
return	O
0	int
;	O
return	O
1	int
;	O
}	O
void	O
read_in_tar_header	function
(	O
struct	O
cpio_file_stat	struct
*	O
file_hdr	pointer
,	O
int	O
in_des	int
)	O
{	O
long	O
bytes_skipped	long
=	O
0	int
;	O
int	O
warned	int
=	O
false	int
;	O
union	O
tar_record	union
tar_rec	union
;	O
struct	O
tar_header	struct
*	O
tar_hdr	pointer
=	O
(	O
struct	O
tar_header	struct
*	O
)	O
&	O
tar_rec	union
;	O
uid_t	int
*	O
uidp	pointer
;	O
gid_t	int
*	O
gidp	pointer
;	O
tape_buffered_read	function
(	O
(	O
char	O
*	O
)	O
&	O
tar_rec	union
,	O
in_des	int
,	O
TARRECORDSIZE	int
)	O
;	O
if	O
(	O
null_block	function
(	O
(	O
long	O
*	O
)	O
&	O
tar_rec	union
,	O
TARRECORDSIZE	int
)	O
)	O
{	O
{	O
cpio_set_c_name	function
(	O
file_hdr	pointer
,	O
CPIO_TRAILER_NAME	pointer
)	O
;	O
return	O
;	O
}	O
}	O
while	O
(	O
1	int
)	O
{	O
file_hdr	pointer
->	O
c_chksum	array
=	O
FROM_OCTAL	O
(	O
tar_hdr	pointer
->	O
chksum	array
)	O
;	O
if	O
(	O
file_hdr	pointer
->	O
c_chksum	array
!=	O
tar_checksum	function
(	O
tar_hdr	pointer
)	O
)	O
{	O
if	O
(	O
!	O
warned	int
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"invalid header: checksum error"	pointer
)	O
)	O
;	O
warned	int
=	O
true	int
;	O
}	O
memmove	function
(	O
&	O
tar_rec	union
,	O
(	O
(	O
char	O
*	O
)	O
&	O
tar_rec	union
)	O
+	O
1	int
,	O
TARRECORDSIZE	int
-	O
1	int
)	O
;	O
tape_buffered_read	function
(	O
(	O
(	O
char	O
*	O
)	O
&	O
tar_rec	union
)	O
+	O
(	O
TARRECORDSIZE	int
-	O
1	int
)	O
,	O
in_des	int
,	O
1	int
)	O
;	O
++	O
bytes_skipped	long
;	O
continue	O
;	O
}	O
if	O
(	O
archive_format	enum
!=	O
arf_ustar	int
)	O
cpio_set_c_name	function
(	O
file_hdr	pointer
,	O
stash_tar_filename	function
(	O
NULL	O
,	O
tar_hdr	pointer
->	O
name	pointer
)	O
)	O
;	O
else	O
cpio_set_c_name	function
(	O
file_hdr	pointer
,	O
stash_tar_filename	function
(	O
tar_hdr	pointer
->	O
prefix	array
,	O
tar_hdr	pointer
->	O
name	pointer
)	O
)	O
;	O
file_hdr	pointer
->	O
c_nlink	short
=	O
1	int
;	O
file_hdr	pointer
->	O
c_mode	short
=	O
FROM_OCTAL	O
(	O
tar_hdr	pointer
->	O
mode	int
)	O
;	O
file_hdr	pointer
->	O
c_mode	short
=	O
file_hdr	pointer
->	O
c_mode	short
&	O
07777	int
;	O
if	O
(	O
archive_format	enum
==	O
arf_ustar	int
&&	O
!	O
numeric_uid	int
&&	O
(	O
uidp	pointer
=	O
getuidbyname	function
(	O
tar_hdr	pointer
->	O
uname	array
)	O
)	O
)	O
file_hdr	pointer
->	O
c_uid	short
=	O
*	O
uidp	pointer
;	O
else	O
file_hdr	pointer
->	O
c_uid	short
=	O
FROM_OCTAL	O
(	O
tar_hdr	pointer
->	O
uid	int
)	O
;	O
if	O
(	O
archive_format	enum
==	O
arf_ustar	int
&&	O
!	O
numeric_uid	int
&&	O
(	O
gidp	pointer
=	O
getgidbyname	function
(	O
tar_hdr	pointer
->	O
gname	array
)	O
)	O
)	O
file_hdr	pointer
->	O
c_gid	short
=	O
*	O
gidp	pointer
;	O
else	O
file_hdr	pointer
->	O
c_gid	short
=	O
FROM_OCTAL	O
(	O
tar_hdr	pointer
->	O
gid	int
)	O
;	O
file_hdr	pointer
->	O
c_filesize	array
=	O
FROM_OCTAL	O
(	O
tar_hdr	pointer
->	O
size	int
)	O
;	O
file_hdr	pointer
->	O
c_mtime	array
=	O
FROM_OCTAL	O
(	O
tar_hdr	pointer
->	O
mtime	long
)	O
;	O
file_hdr	pointer
->	O
c_rdev_maj	array
=	O
FROM_OCTAL	O
(	O
tar_hdr	pointer
->	O
devmajor	array
)	O
;	O
file_hdr	pointer
->	O
c_rdev_min	array
=	O
FROM_OCTAL	O
(	O
tar_hdr	pointer
->	O
devminor	array
)	O
;	O
file_hdr	pointer
->	O
c_tar_linkname	pointer
=	O
NULL	O
;	O
switch	O
(	O
tar_hdr	pointer
->	O
typeflag	char
)	O
{	O
case	O
REGTYPE	char
:	O
case	O
CONTTYPE	char
:	O
default	O
:	O
file_hdr	pointer
->	O
c_mode	short
|=	O
CP_IFREG	int
;	O
break	O
;	O
case	O
DIRTYPE	char
:	O
file_hdr	pointer
->	O
c_mode	short
|=	O
CP_IFDIR	int
;	O
break	O
;	O
case	O
CHRTYPE	char
:	O
file_hdr	pointer
->	O
c_mode	short
|=	O
CP_IFCHR	int
;	O
file_hdr	pointer
->	O
c_tar_linkname	pointer
=	O
stash_tar_linkname	function
(	O
tar_hdr	pointer
->	O
linkname	array
)	O
;	O
file_hdr	pointer
->	O
c_filesize	array
=	O
0	int
;	O
break	O
;	O
case	O
BLKTYPE	char
:	O
file_hdr	pointer
->	O
c_mode	short
|=	O
CP_IFBLK	int
;	O
file_hdr	pointer
->	O
c_tar_linkname	pointer
=	O
stash_tar_linkname	function
(	O
tar_hdr	pointer
->	O
linkname	array
)	O
;	O
file_hdr	pointer
->	O
c_filesize	array
=	O
0	int
;	O
break	O
;	O
case	O
FIFOTYPE	char
:	O
file_hdr	pointer
->	O
c_mode	short
|=	O
CP_IFIFO	int
;	O
file_hdr	pointer
->	O
c_tar_linkname	pointer
=	O
stash_tar_linkname	function
(	O
tar_hdr	pointer
->	O
linkname	array
)	O
;	O
file_hdr	pointer
->	O
c_filesize	array
=	O
0	int
;	O
break	O
;	O
case	O
SYMTYPE	char
:	O
file_hdr	pointer
->	O
c_mode	short
|=	O
CP_IFLNK	int
;	O
file_hdr	pointer
->	O
c_tar_linkname	pointer
=	O
stash_tar_linkname	function
(	O
tar_hdr	pointer
->	O
linkname	array
)	O
;	O
file_hdr	pointer
->	O
c_filesize	array
=	O
0	int
;	O
break	O
;	O
case	O
LNKTYPE	char
:	O
file_hdr	pointer
->	O
c_mode	short
|=	O
CP_IFREG	int
;	O
file_hdr	pointer
->	O
c_tar_linkname	pointer
=	O
stash_tar_linkname	function
(	O
tar_hdr	pointer
->	O
linkname	array
)	O
;	O
file_hdr	pointer
->	O
c_filesize	array
=	O
0	int
;	O
break	O
;	O
case	O
AREGTYPE	char
:	O
if	O
(	O
file_hdr	pointer
->	O
c_name	pointer
[	O
file_hdr	pointer
->	O
c_namesize	short
-	O
1	int
]	O
==	O
'/'	O
)	O
file_hdr	pointer
->	O
c_mode	short
|=	O
CP_IFDIR	int
;	O
else	O
file_hdr	pointer
->	O
c_mode	short
|=	O
CP_IFREG	int
;	O
break	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
bytes_skipped	long
>	O
0	int
)	O
warn_junk_bytes	function
(	O
bytes_skipped	long
)	O
;	O
}	O
int	O
is_tar_header	function
(	O
char	O
*	O
buf	pointer
)	O
{	O
struct	O
tar_header	struct
*	O
tar_hdr	pointer
=	O
(	O
struct	O
tar_header	struct
*	O
)	O
buf	pointer
;	O
unsigned	O
long	O
chksum	array
;	O
chksum	array
=	O
FROM_OCTAL	O
(	O
tar_hdr	pointer
->	O
chksum	array
)	O
;	O
if	O
(	O
chksum	array
!=	O
tar_checksum	function
(	O
tar_hdr	pointer
)	O
)	O
return	O
0	int
;	O
if	O
(	O
!	O
strncmp	function
(	O
tar_hdr	pointer
->	O
magic	array
,	O
TMAGIC	pointer
,	O
TMAGLEN	int
-	O
1	int
)	O
)	O
return	O
2	int
;	O
return	O
1	int
;	O
}	O
int	O
is_tar_filename_too_long	function
(	O
char	O
*	O
name	pointer
)	O
{	O
int	O
whole_name_len	int
;	O
int	O
prefix_name_len	int
;	O
whole_name_len	int
=	O
strlen	function
(	O
name	pointer
)	O
;	O
if	O
(	O
whole_name_len	int
<=	O
TARNAMESIZE	int
)	O
return	O
false	int
;	O
if	O
(	O
archive_format	enum
!=	O
arf_ustar	int
)	O
return	O
true	int
;	O
if	O
(	O
whole_name_len	int
>	O
TARNAMESIZE	int
+	O
TARPREFIXSIZE	int
+	O
1	int
)	O
return	O
true	int
;	O
prefix_name_len	int
=	O
split_long_name	function
(	O
name	pointer
,	O
whole_name_len	int
)	O
;	O
if	O
(	O
prefix_name_len	int
==	O
0	int
||	O
whole_name_len	int
-	O
prefix_name_len	int
-	O
1	int
>	O
TARNAMESIZE	int
)	O
return	O
true	int
;	O
return	O
false	int
;	O
}	O
