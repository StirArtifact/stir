static	O
mu_assoc_t	pointer
aliases	pointer
;	O
static	O
void	O
alias_free	function
(	O
void	O
*	O
data	pointer
)	O
{	O
mu_list_t	pointer
al	pointer
=	O
data	pointer
;	O
util_slist_destroy	function
(	O
&	O
al	pointer
)	O
;	O
}	O
static	O
void	O
alias_print_group	function
(	O
const	O
char	O
*	O
name	pointer
,	O
mu_list_t	pointer
al	pointer
)	O
{	O
mu_printf	function
(	O
"%s    "	pointer
,	O
name	pointer
)	O
;	O
util_slist_print	function
(	O
al	pointer
,	O
0	int
)	O
;	O
mu_printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
static	O
mu_list_t	pointer
alias_lookup	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
return	O
mu_assoc_get	function
(	O
aliases	pointer
,	O
name	pointer
)	O
;	O
}	O
static	O
void	O
alias_print	function
(	O
char	O
*	O
name	pointer
)	O
{	O
if	O
(	O
!	O
name	pointer
)	O
{	O
mu_iterator_t	pointer
itr	pointer
;	O
if	O
(	O
!	O
aliases	pointer
)	O
return	O
;	O
mu_assoc_get_iterator	function
(	O
aliases	pointer
,	O
&	O
itr	pointer
)	O
;	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
const	O
char	O
*	O
name	pointer
;	O
mu_list_t	pointer
al	pointer
;	O
if	O
(	O
mu_iterator_current_kv	function
(	O
itr	pointer
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
name	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
al	pointer
)	O
)	O
continue	O
;	O
alias_print_group	function
(	O
name	pointer
,	O
al	pointer
)	O
;	O
}	O
}	O
else	O
{	O
mu_list_t	pointer
al	pointer
;	O
al	pointer
=	O
alias_lookup	function
(	O
name	pointer
)	O
;	O
if	O
(	O
!	O
al	pointer
)	O
{	O
mu_error	function
(	O
_	O
(	O
"\"%s\": not a group"	pointer
)	O
,	O
name	pointer
)	O
;	O
return	O
;	O
}	O
alias_print_group	function
(	O
name	pointer
,	O
al	pointer
)	O
;	O
}	O
}	O
static	O
int	O
alias_create	function
(	O
const	O
char	O
*	O
name	pointer
,	O
mu_list_t	pointer
*	O
al	pointer
)	O
{	O
int	O
rc	int
;	O
mu_list_t	pointer
l	pointer
;	O
if	O
(	O
!	O
aliases	pointer
)	O
{	O
mu_assoc_create	function
(	O
&	O
aliases	pointer
,	O
0	int
)	O
;	O
mu_assoc_set_destroy_item	function
(	O
aliases	pointer
,	O
alias_free	function
)	O
;	O
}	O
if	O
(	O
mu_assoc_lookup_ref	function
(	O
aliases	pointer
,	O
name	pointer
,	O
al	pointer
)	O
)	O
{	O
rc	int
=	O
mu_list_create	function
(	O
&	O
l	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_assoc_install	function
(	O
aliases	pointer
,	O
name	pointer
,	O
l	pointer
)	O
;	O
*	O
al	pointer
=	O
l	pointer
;	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
void	O
alias_destroy	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
mu_assoc_remove	function
(	O
aliases	pointer
,	O
name	pointer
)	O
;	O
}	O
static	O
void	O
recursive_alias_expand	function
(	O
const	O
char	O
*	O
name	pointer
,	O
mu_list_t	pointer
exlist	pointer
,	O
mu_list_t	pointer
origlist	pointer
)	O
{	O
mu_list_t	pointer
al	pointer
;	O
mu_iterator_t	pointer
itr	pointer
;	O
if	O
(	O
(	O
al	pointer
=	O
alias_lookup	function
(	O
name	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
if	O
(	O
mu_list_locate	function
(	O
exlist	pointer
,	O
(	O
void	O
*	O
)	O
name	pointer
,	O
NULL	O
)	O
==	O
MU_ERR_NOENT	O
)	O
mu_list_append	function
(	O
exlist	pointer
,	O
(	O
void	O
*	O
)	O
name	pointer
)	O
;	O
return	O
;	O
}	O
mu_list_get_iterator	function
(	O
al	pointer
,	O
&	O
itr	pointer
)	O
;	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
char	O
*	O
word	pointer
;	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
word	pointer
)	O
;	O
if	O
(	O
mu_list_locate	function
(	O
origlist	pointer
,	O
word	pointer
,	O
NULL	O
)	O
==	O
MU_ERR_NOENT	O
)	O
{	O
mu_list_push	function
(	O
origlist	pointer
,	O
word	pointer
)	O
;	O
recursive_alias_expand	function
(	O
word	pointer
,	O
exlist	pointer
,	O
origlist	pointer
)	O
;	O
mu_list_pop	function
(	O
origlist	pointer
,	O
NULL	O
)	O
;	O
}	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
}	O
static	O
int	O
string_comp	function
(	O
const	O
void	O
*	O
item	pointer
,	O
const	O
void	O
*	O
value	pointer
)	O
{	O
return	O
strcmp	function
(	O
item	pointer
,	O
value	pointer
)	O
;	O
}	O
char	O
*	O
alias_expand	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
mu_list_t	pointer
al	pointer
;	O
mu_list_t	pointer
list	pointer
;	O
if	O
(	O
mailvar_is_true	function
(	O
mailvar_name_recursivealiases	pointer
)	O
)	O
{	O
char	O
*	O
s	pointer
;	O
mu_list_t	pointer
origlist	pointer
;	O
int	O
status	int
=	O
mu_list_create	function
(	O
&	O
list	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_create"	pointer
,	O
NULL	O
,	O
status	int
)	O
;	O
return	O
NULL	O
;	O
}	O
status	int
=	O
mu_list_create	function
(	O
&	O
origlist	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_list_destroy	function
(	O
&	O
origlist	pointer
)	O
;	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_create"	pointer
,	O
NULL	O
,	O
status	int
)	O
;	O
return	O
NULL	O
;	O
}	O
mu_list_set_comparator	function
(	O
list	pointer
,	O
string_comp	function
)	O
;	O
mu_list_set_comparator	function
(	O
origlist	pointer
,	O
string_comp	function
)	O
;	O
recursive_alias_expand	function
(	O
name	pointer
,	O
list	pointer
,	O
origlist	pointer
)	O
;	O
s	pointer
=	O
util_slist_to_string	function
(	O
list	pointer
,	O
","	pointer
)	O
;	O
mu_list_destroy	function
(	O
&	O
origlist	pointer
)	O
;	O
mu_list_destroy	function
(	O
&	O
list	pointer
)	O
;	O
return	O
s	pointer
;	O
}	O
if	O
(	O
(	O
al	pointer
=	O
alias_lookup	function
(	O
name	pointer
)	O
)	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
util_slist_to_string	function
(	O
al	pointer
,	O
","	pointer
)	O
;	O
}	O
struct	O
alias_iterator	struct
{	O
mu_iterator_t	pointer
itr	pointer
;	O
const	O
char	O
*	O
prefix	array
;	O
int	O
prefixlen	int
;	O
int	O
pos	int
;	O
}	O
;	O
const	O
char	O
*	O
alias_iterate_next	function
(	O
alias_iterator_t	pointer
atr	pointer
)	O
{	O
while	O
(	O
!	O
mu_iterator_is_done	function
(	O
atr	pointer
->	O
itr	pointer
)	O
)	O
{	O
const	O
char	O
*	O
name	pointer
;	O
mu_list_t	pointer
al	pointer
;	O
if	O
(	O
mu_iterator_current_kv	function
(	O
atr	pointer
->	O
itr	pointer
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
name	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
al	pointer
)	O
)	O
continue	O
;	O
mu_iterator_next	function
(	O
atr	pointer
->	O
itr	pointer
)	O
;	O
if	O
(	O
strlen	function
(	O
name	pointer
)	O
>=	O
atr	pointer
->	O
prefixlen	int
&&	O
strncmp	function
(	O
name	pointer
,	O
atr	pointer
->	O
prefix	array
,	O
atr	pointer
->	O
prefixlen	int
)	O
==	O
0	int
)	O
return	O
name	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
const	O
char	O
*	O
alias_iterate_first	function
(	O
const	O
char	O
*	O
prefix	array
,	O
alias_iterator_t	pointer
*	O
pc	long
)	O
{	O
mu_iterator_t	pointer
itr	pointer
;	O
alias_iterator_t	pointer
atr	pointer
;	O
if	O
(	O
!	O
aliases	pointer
)	O
{	O
*	O
pc	long
=	O
NULL	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
mu_assoc_get_iterator	function
(	O
aliases	pointer
,	O
&	O
itr	pointer
)	O
)	O
return	O
NULL	O
;	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
atr	pointer
=	O
mu_alloc	function
(	O
sizeof	O
*	O
atr	pointer
)	O
;	O
atr	pointer
->	O
prefix	array
=	O
prefix	array
;	O
atr	pointer
->	O
prefixlen	int
=	O
strlen	function
(	O
prefix	array
)	O
;	O
atr	pointer
->	O
pos	int
=	O
0	int
;	O
atr	pointer
->	O
itr	pointer
=	O
itr	pointer
;	O
*	O
pc	long
=	O
atr	pointer
;	O
return	O
alias_iterate_next	function
(	O
atr	pointer
)	O
;	O
}	O
void	O
alias_iterate_end	function
(	O
alias_iterator_t	pointer
*	O
pc	long
)	O
{	O
mu_iterator_destroy	function
(	O
&	O
(	O
*	O
pc	long
)	O
->	O
itr	pointer
)	O
;	O
free	function
(	O
*	O
pc	long
)	O
;	O
*	O
pc	long
=	O
NULL	O
;	O
}	O
int	O
mail_alias	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
if	O
(	O
argc	int
==	O
1	int
)	O
alias_print	function
(	O
NULL	O
)	O
;	O
else	O
if	O
(	O
argc	int
==	O
2	int
)	O
alias_print	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
else	O
{	O
mu_list_t	pointer
al	pointer
;	O
if	O
(	O
alias_create	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
&	O
al	pointer
)	O
)	O
return	O
1	int
;	O
argc	int
--	O
;	O
argv	pointer
++	O
;	O
while	O
(	O
--	O
argc	int
)	O
util_slist_add	function
(	O
&	O
al	pointer
,	O
*	O
++	O
argv	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
