static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: env_method.c,v 1.5 2014/04/17 20:27:28 sebdiaz Exp $"	pointer
;	O
static	O
void	O
__dbenv_err	function
__P	O
(	O
(	O
const	O
DB_ENV	struct
*	O
,	O
int	O
,	O
const	O
char	O
*	O
,	O
...	O
)	O
)	O
;	O
static	O
void	O
__dbenv_errx	function
__P	O
(	O
(	O
const	O
DB_ENV	struct
*	O
,	O
const	O
char	O
*	O
,	O
...	O
)	O
)	O
;	O
static	O
int	O
__dbenv_set_data_dir	function
__P	O
(	O
(	O
DB_ENV	struct
*	O
,	O
const	O
char	O
*	O
)	O
)	O
;	O
static	O
void	O
__dbenv_set_errcall	function
__P	O
(	O
(	O
DB_ENV	struct
*	O
,	O
void	O
(	O
*	O
)	O
(	O
const	O
char	O
*	O
,	O
char	O
*	O
)	O
)	O
)	O
;	O
static	O
void	O
__dbenv_set_errfile	function
__P	O
(	O
(	O
DB_ENV	struct
*	O
,	O
FILE	struct
*	O
)	O
)	O
;	O
static	O
void	O
__dbenv_set_errpfx	function
__P	O
(	O
(	O
DB_ENV	struct
*	O
,	O
const	O
char	O
*	O
)	O
)	O
;	O
static	O
int	O
__dbenv_set_feedback	function
__P	O
(	O
(	O
DB_ENV	struct
*	O
,	O
void	O
(	O
*	O
)	O
(	O
DB_ENV	struct
*	O
,	O
int	O
,	O
int	O
)	O
)	O
)	O
;	O
static	O
int	O
__dbenv_set_paniccall	function
__P	O
(	O
(	O
DB_ENV	struct
*	O
,	O
void	O
(	O
*	O
)	O
(	O
DB_ENV	struct
*	O
,	O
int	O
)	O
)	O
)	O
;	O
static	O
int	O
__dbenv_set_recovery_init	function
__P	O
(	O
(	O
DB_ENV	struct
*	O
,	O
int	O
(	O
*	O
)	O
(	O
DB_ENV	struct
*	O
)	O
)	O
)	O
;	O
static	O
int	O
__dbenv_set_server_noclnt	function
__P	O
(	O
(	O
DB_ENV	struct
*	O
,	O
char	O
*	O
,	O
long	O
,	O
long	O
,	O
u_int32_t	int
)	O
)	O
;	O
static	O
int	O
__dbenv_set_shm_key	function
__P	O
(	O
(	O
DB_ENV	struct
*	O
,	O
long	O
)	O
)	O
;	O
static	O
int	O
__dbenv_set_tmp_dir	function
__P	O
(	O
(	O
DB_ENV	struct
*	O
,	O
const	O
char	O
*	O
)	O
)	O
;	O
static	O
int	O
__dbenv_set_verbose	function
__P	O
(	O
(	O
DB_ENV	struct
*	O
,	O
u_int32_t	int
,	O
int	O
)	O
)	O
;	O
int	O
CDB_db_env_create	function
(	O
dbenvpp	pointer
,	O
flags	int
)	O
DB_ENV	struct
*	O
*	O
dbenvpp	pointer
;	O
u_int32_t	int
flags	int
;	O
{	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
int	O
ret	int
;	O
if	O
(	O
flags	int
!=	O
0	int
&&	O
flags	int
!=	O
DB_CLIENT	int
)	O
return	O
(	O
EINVAL	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_calloc	function
(	O
NULL	O
,	O
1	int
,	O
sizeof	O
(	O
*	O
dbenv	pointer
)	O
,	O
&	O
dbenv	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
ret	int
=	O
CDB___dbenv_init	function
(	O
dbenv	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
{	O
CDB___os_free	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
*	O
dbenv	pointer
)	O
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
*	O
dbenvpp	pointer
=	O
dbenv	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___dbenv_init	function
(	O
dbenv	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
{	O
dbenv	pointer
->	O
err	pointer
=	O
__dbenv_err	function
;	O
dbenv	pointer
->	O
errx	pointer
=	O
__dbenv_errx	function
;	O
dbenv	pointer
->	O
set_errcall	pointer
=	O
__dbenv_set_errcall	function
;	O
dbenv	pointer
->	O
set_errfile	pointer
=	O
__dbenv_set_errfile	function
;	O
dbenv	pointer
->	O
set_errpfx	pointer
=	O
__dbenv_set_errpfx	function
;	O
dbenv	pointer
->	O
close	pointer
=	O
CDB___dbenv_close	function
;	O
dbenv	pointer
->	O
open	pointer
=	O
CDB___dbenv_open	function
;	O
dbenv	pointer
->	O
remove	function
=	O
CDB___dbenv_remove	function
;	O
dbenv	pointer
->	O
set_data_dir	pointer
=	O
__dbenv_set_data_dir	function
;	O
dbenv	pointer
->	O
set_feedback	pointer
=	O
__dbenv_set_feedback	function
;	O
dbenv	pointer
->	O
set_paniccall	pointer
=	O
__dbenv_set_paniccall	function
;	O
dbenv	pointer
->	O
set_recovery_init	pointer
=	O
__dbenv_set_recovery_init	function
;	O
dbenv	pointer
->	O
set_server	pointer
=	O
__dbenv_set_server_noclnt	function
;	O
dbenv	pointer
->	O
set_shm_key	pointer
=	O
__dbenv_set_shm_key	function
;	O
dbenv	pointer
->	O
set_tmp_dir	pointer
=	O
__dbenv_set_tmp_dir	function
;	O
dbenv	pointer
->	O
set_verbose	pointer
=	O
__dbenv_set_verbose	function
;	O
dbenv	pointer
->	O
shm_key	long
=	O
INVALID_REGION_SEGID	O
;	O
CDB___log_dbenv_create	function
(	O
dbenv	pointer
)	O
;	O
CDB___lock_dbenv_create	function
(	O
dbenv	pointer
)	O
;	O
CDB___memp_dbenv_create	function
(	O
dbenv	pointer
)	O
;	O
CDB___txn_dbenv_create	function
(	O
dbenv	pointer
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
void	O
__dbenv_err	function
(	O
const	O
DB_ENV	struct
*	O
dbenv	pointer
,	O
int	O
error	int
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
CDB___db_real_err	function
(	O
dbenv	pointer
,	O
error	int
,	O
1	int
,	O
1	int
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
static	O
void	O
__dbenv_errx	function
(	O
const	O
DB_ENV	struct
*	O
dbenv	pointer
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
CDB___db_real_err	function
(	O
dbenv	pointer
,	O
0	int
,	O
0	int
,	O
1	int
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
static	O
int	O
__dbenv_set_data_dir	function
(	O
dbenv	pointer
,	O
dir	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
const	O
char	O
*	O
dir	pointer
;	O
{	O
int	O
ret	int
;	O
if	O
(	O
dbenv	pointer
->	O
db_data_dir	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_calloc	function
(	O
dbenv	pointer
,	O
DATA_INIT_CNT	int
,	O
sizeof	O
(	O
char	O
*	O
*	O
)	O
,	O
&	O
dbenv	pointer
->	O
db_data_dir	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
dbenv	pointer
->	O
data_cnt	int
=	O
DATA_INIT_CNT	int
;	O
}	O
else	O
if	O
(	O
dbenv	pointer
->	O
data_next	int
==	O
dbenv	pointer
->	O
data_cnt	int
-	O
1	int
)	O
{	O
dbenv	pointer
->	O
data_cnt	int
*=	O
2	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_realloc	function
(	O
dbenv	pointer
,	O
dbenv	pointer
->	O
data_cnt	int
*	O
sizeof	O
(	O
char	O
*	O
*	O
)	O
,	O
NULL	O
,	O
&	O
dbenv	pointer
->	O
db_data_dir	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
}	O
return	O
(	O
CDB___os_strdup	function
(	O
dbenv	pointer
,	O
dir	pointer
,	O
&	O
dbenv	pointer
->	O
db_data_dir	pointer
[	O
dbenv	pointer
->	O
data_next	int
++	O
]	O
)	O
)	O
;	O
}	O
static	O
void	O
__dbenv_set_errcall	function
(	O
dbenv	pointer
,	O
errcall	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
(	O
*	O
errcall	pointer
)	O
__P	O
(	O
(	O
const	O
char	O
*	O
,	O
char	O
*	O
)	O
)	O
;	O
{	O
dbenv	pointer
->	O
db_errcall	pointer
=	O
errcall	pointer
;	O
}	O
static	O
void	O
__dbenv_set_errfile	function
(	O
dbenv	pointer
,	O
errfile	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
FILE	struct
*	O
errfile	pointer
;	O
{	O
dbenv	pointer
->	O
db_errfile	pointer
=	O
errfile	pointer
;	O
}	O
static	O
void	O
__dbenv_set_errpfx	function
(	O
dbenv	pointer
,	O
errpfx	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
const	O
char	O
*	O
errpfx	pointer
;	O
{	O
dbenv	pointer
->	O
db_errpfx	pointer
=	O
errpfx	pointer
;	O
}	O
static	O
int	O
__dbenv_set_feedback	function
(	O
dbenv	pointer
,	O
feedback	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
(	O
*	O
feedback	pointer
)	O
__P	O
(	O
(	O
DB_ENV	struct
*	O
,	O
int	O
,	O
int	O
)	O
)	O
;	O
{	O
dbenv	pointer
->	O
db_feedback	pointer
=	O
feedback	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
int	O
__dbenv_set_paniccall	function
(	O
dbenv	pointer
,	O
paniccall	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
(	O
*	O
paniccall	pointer
)	O
__P	O
(	O
(	O
DB_ENV	struct
*	O
,	O
int	O
)	O
)	O
;	O
{	O
dbenv	pointer
->	O
db_paniccall	pointer
=	O
paniccall	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
int	O
__dbenv_set_recovery_init	function
(	O
dbenv	pointer
,	O
recovery_init	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
int	O
(	O
*	O
recovery_init	pointer
)	O
__P	O
(	O
(	O
DB_ENV	struct
*	O
)	O
)	O
;	O
{	O
ENV_ILLEGAL_AFTER_OPEN	O
(	O
dbenv	pointer
,	O
"set_recovery_init"	pointer
)	O
;	O
dbenv	pointer
->	O
db_recovery_init	pointer
=	O
recovery_init	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
int	O
__dbenv_set_shm_key	function
(	O
dbenv	pointer
,	O
shm_key	long
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
long	O
shm_key	long
;	O
{	O
ENV_ILLEGAL_AFTER_OPEN	O
(	O
dbenv	pointer
,	O
"set_shm_key"	pointer
)	O
;	O
dbenv	pointer
->	O
shm_key	long
=	O
shm_key	long
;	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
int	O
__dbenv_set_tmp_dir	function
(	O
dbenv	pointer
,	O
dir	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
const	O
char	O
*	O
dir	pointer
;	O
{	O
if	O
(	O
dbenv	pointer
->	O
db_tmp_dir	pointer
!=	O
NULL	O
)	O
CDB___os_freestr	function
(	O
dbenv	pointer
->	O
db_tmp_dir	pointer
)	O
;	O
return	O
(	O
CDB___os_strdup	function
(	O
dbenv	pointer
,	O
dir	pointer
,	O
&	O
dbenv	pointer
->	O
db_tmp_dir	pointer
)	O
)	O
;	O
}	O
static	O
int	O
__dbenv_set_verbose	function
(	O
dbenv	pointer
,	O
which	int
,	O
onoff	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
u_int32_t	int
which	int
;	O
int	O
onoff	int
;	O
{	O
switch	O
(	O
which	int
)	O
{	O
case	O
DB_VERB_CHKPOINT	int
:	O
case	O
DB_VERB_DEADLOCK	int
:	O
case	O
DB_VERB_RECOVERY	int
:	O
case	O
DB_VERB_WAITSFOR	int
:	O
if	O
(	O
onoff	int
)	O
FLD_SET	O
(	O
dbenv	pointer
->	O
verbose	int
,	O
which	int
)	O
;	O
else	O
FLD_CLR	O
(	O
dbenv	pointer
->	O
verbose	int
,	O
which	int
)	O
;	O
break	O
;	O
default	O
:	O
return	O
(	O
EINVAL	int
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_mi_env	function
(	O
dbenv	pointer
,	O
name	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
const	O
char	O
*	O
name	pointer
;	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: method meaningless in shared environment"	pointer
,	O
name	pointer
)	O
;	O
return	O
(	O
EINVAL	int
)	O
;	O
}	O
int	O
CDB___db_mi_open	function
(	O
dbenv	pointer
,	O
name	pointer
,	O
after	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
const	O
char	O
*	O
name	pointer
;	O
int	O
after	int
;	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: method meaningless %s open"	pointer
,	O
name	pointer
,	O
after	int
?	O
"after"	pointer
:	O
"before"	pointer
)	O
;	O
return	O
(	O
EINVAL	int
)	O
;	O
}	O
int	O
CDB___db_env_config	function
(	O
dbenv	pointer
,	O
subsystem	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
int	O
subsystem	int
;	O
{	O
const	O
char	O
*	O
name	pointer
;	O
switch	O
(	O
subsystem	int
)	O
{	O
case	O
DB_INIT_LOCK	int
:	O
name	pointer
=	O
"lock"	pointer
;	O
break	O
;	O
case	O
DB_INIT_LOG	int
:	O
name	pointer
=	O
"log"	pointer
;	O
break	O
;	O
case	O
DB_INIT_MPOOL	int
:	O
name	pointer
=	O
"mpool"	pointer
;	O
break	O
;	O
case	O
DB_INIT_TXN	int
:	O
name	pointer
=	O
"txn"	pointer
;	O
break	O
;	O
default	O
:	O
name	pointer
=	O
"unknown"	pointer
;	O
break	O
;	O
}	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s interface called with environment not configured for that subsystem"	pointer
,	O
name	pointer
)	O
;	O
return	O
(	O
EINVAL	int
)	O
;	O
}	O
static	O
int	O
__dbenv_set_server_noclnt	function
(	O
dbenv	pointer
,	O
host	pointer
,	O
tsec	long
,	O
ssec	long
,	O
flags	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
char	O
*	O
host	pointer
;	O
long	O
tsec	long
,	O
ssec	long
;	O
u_int32_t	int
flags	int
;	O
{	O
if	O
(	O
host	pointer
||	O
tsec	long
||	O
ssec	long
||	O
flags	int
)	O
{	O
}	O
COMPQUIET	O
(	O
host	pointer
,	O
NULL	O
)	O
;	O
COMPQUIET	O
(	O
tsec	long
,	O
0	int
)	O
;	O
COMPQUIET	O
(	O
ssec	long
,	O
0	int
)	O
;	O
COMPQUIET	O
(	O
flags	int
,	O
0	int
)	O
;	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"set_server method meaningless in non-RPC enviroment"	pointer
)	O
;	O
return	O
(	O
CDB___db_eopnotsup	function
(	O
dbenv	pointer
)	O
)	O
;	O
}	O
