typedef	O
struct	O
{	O
gsl_matrix	struct
*	O
H	pointer
;	O
gsl_matrix	struct
*	O
lu	pointer
;	O
gsl_permutation	struct
*	O
permutation	pointer
;	O
gsl_vector	struct
*	O
v	pointer
;	O
gsl_vector	struct
*	O
w	pointer
;	O
gsl_vector	struct
*	O
y	double
;	O
gsl_vector	struct
*	O
p	int
;	O
gsl_vector	struct
*	O
fnew	pointer
;	O
gsl_vector	struct
*	O
x_trial	pointer
;	O
double	O
phi	double
;	O
}	O
broyden_state_t	struct
;	O
static	O
int	O
broyden_alloc	function
(	O
void	O
*	O
vstate	pointer
,	O
size_t	long
n	int
)	O
;	O
static	O
int	O
broyden_set	function
(	O
void	O
*	O
vstate	pointer
,	O
gsl_multiroot_function	struct
*	O
function	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
)	O
;	O
static	O
int	O
broyden_iterate	function
(	O
void	O
*	O
vstate	pointer
,	O
gsl_multiroot_function	struct
*	O
function	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
)	O
;	O
static	O
void	O
broyden_free	function
(	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
broyden_alloc	function
(	O
void	O
*	O
vstate	pointer
,	O
size_t	long
n	int
)	O
{	O
broyden_state_t	struct
*	O
state	pointer
=	O
(	O
broyden_state_t	struct
*	O
)	O
vstate	pointer
;	O
gsl_vector	struct
*	O
v	pointer
,	O
*	O
w	pointer
,	O
*	O
y	double
,	O
*	O
fnew	pointer
,	O
*	O
x_trial	pointer
,	O
*	O
p	int
;	O
gsl_permutation	struct
*	O
perm	pointer
;	O
gsl_matrix	struct
*	O
m	pointer
,	O
*	O
H	pointer
;	O
m	pointer
=	O
gsl_matrix_calloc	function
(	O
n	int
,	O
n	int
)	O
;	O
if	O
(	O
m	pointer
==	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"failed to allocate space for lu"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
lu	pointer
=	O
m	pointer
;	O
perm	pointer
=	O
gsl_permutation_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
perm	pointer
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
m	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for permutation"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
permutation	pointer
=	O
perm	pointer
;	O
H	pointer
=	O
gsl_matrix_calloc	function
(	O
n	int
,	O
n	int
)	O
;	O
if	O
(	O
H	pointer
==	O
0	int
)	O
{	O
gsl_permutation_free	function
(	O
perm	pointer
)	O
;	O
gsl_matrix_free	function
(	O
m	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for d"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
H	pointer
=	O
H	pointer
;	O
v	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
v	pointer
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
H	pointer
)	O
;	O
gsl_permutation_free	function
(	O
perm	pointer
)	O
;	O
gsl_matrix_free	function
(	O
m	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for v"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
v	pointer
=	O
v	pointer
;	O
w	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
w	pointer
==	O
0	int
)	O
{	O
gsl_vector_free	function
(	O
v	pointer
)	O
;	O
gsl_matrix_free	function
(	O
H	pointer
)	O
;	O
gsl_permutation_free	function
(	O
perm	pointer
)	O
;	O
gsl_matrix_free	function
(	O
m	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for w"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
w	pointer
=	O
w	pointer
;	O
y	double
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
y	double
==	O
0	int
)	O
{	O
gsl_vector_free	function
(	O
w	pointer
)	O
;	O
gsl_vector_free	function
(	O
v	pointer
)	O
;	O
gsl_matrix_free	function
(	O
H	pointer
)	O
;	O
gsl_permutation_free	function
(	O
perm	pointer
)	O
;	O
gsl_matrix_free	function
(	O
m	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for y"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
y	double
=	O
y	double
;	O
fnew	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
fnew	pointer
==	O
0	int
)	O
{	O
gsl_vector_free	function
(	O
y	double
)	O
;	O
gsl_vector_free	function
(	O
w	pointer
)	O
;	O
gsl_vector_free	function
(	O
v	pointer
)	O
;	O
gsl_matrix_free	function
(	O
H	pointer
)	O
;	O
gsl_permutation_free	function
(	O
perm	pointer
)	O
;	O
gsl_matrix_free	function
(	O
m	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for fnew"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
fnew	pointer
=	O
fnew	pointer
;	O
x_trial	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
x_trial	pointer
==	O
0	int
)	O
{	O
gsl_vector_free	function
(	O
fnew	pointer
)	O
;	O
gsl_vector_free	function
(	O
y	double
)	O
;	O
gsl_vector_free	function
(	O
w	pointer
)	O
;	O
gsl_vector_free	function
(	O
v	pointer
)	O
;	O
gsl_matrix_free	function
(	O
H	pointer
)	O
;	O
gsl_permutation_free	function
(	O
perm	pointer
)	O
;	O
gsl_matrix_free	function
(	O
m	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for x_trial"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
x_trial	pointer
=	O
x_trial	pointer
;	O
p	int
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
p	int
==	O
0	int
)	O
{	O
gsl_vector_free	function
(	O
x_trial	pointer
)	O
;	O
gsl_vector_free	function
(	O
fnew	pointer
)	O
;	O
gsl_vector_free	function
(	O
y	double
)	O
;	O
gsl_vector_free	function
(	O
w	pointer
)	O
;	O
gsl_vector_free	function
(	O
v	pointer
)	O
;	O
gsl_matrix_free	function
(	O
H	pointer
)	O
;	O
gsl_permutation_free	function
(	O
perm	pointer
)	O
;	O
gsl_matrix_free	function
(	O
m	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for p"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
p	int
=	O
p	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
broyden_set	function
(	O
void	O
*	O
vstate	pointer
,	O
gsl_multiroot_function	struct
*	O
function	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
)	O
{	O
broyden_state_t	struct
*	O
state	pointer
=	O
(	O
broyden_state_t	struct
*	O
)	O
vstate	pointer
;	O
size_t	long
i	long
,	O
j	long
,	O
n	int
=	O
function	pointer
->	O
n	int
;	O
int	O
signum	pointer
=	O
0	int
;	O
GSL_MULTIROOT_FN_EVAL	O
(	O
function	pointer
,	O
x	double
,	O
f	pointer
)	O
;	O
gsl_multiroot_fdjacobian	function
(	O
function	pointer
,	O
x	double
,	O
f	pointer
,	O
GSL_SQRT_DBL_EPSILON	int
,	O
state	pointer
->	O
lu	pointer
)	O
;	O
gsl_linalg_LU_decomp	function
(	O
state	pointer
->	O
lu	pointer
,	O
state	pointer
->	O
permutation	pointer
,	O
&	O
signum	pointer
)	O
;	O
gsl_linalg_LU_invert	function
(	O
state	pointer
->	O
lu	pointer
,	O
state	pointer
->	O
permutation	pointer
,	O
state	pointer
->	O
H	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
n	int
;	O
j	long
++	O
)	O
gsl_matrix_set	function
(	O
state	pointer
->	O
H	pointer
,	O
i	long
,	O
j	long
,	O
-	O
gsl_matrix_get	function
(	O
state	pointer
->	O
H	pointer
,	O
i	long
,	O
j	long
)	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
gsl_vector_set	function
(	O
dx	pointer
,	O
i	long
,	O
0.0	int
)	O
;	O
}	O
state	pointer
->	O
phi	double
=	O
enorm	function
(	O
f	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
broyden_iterate	function
(	O
void	O
*	O
vstate	pointer
,	O
gsl_multiroot_function	struct
*	O
function	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
)	O
{	O
broyden_state_t	struct
*	O
state	pointer
=	O
(	O
broyden_state_t	struct
*	O
)	O
vstate	pointer
;	O
double	O
phi0	double
,	O
phi1	double
,	O
t	double
,	O
lambda	double
;	O
gsl_matrix	struct
*	O
H	pointer
=	O
state	pointer
->	O
H	pointer
;	O
gsl_vector	struct
*	O
p	int
=	O
state	pointer
->	O
p	int
;	O
gsl_vector	struct
*	O
y	double
=	O
state	pointer
->	O
y	double
;	O
gsl_vector	struct
*	O
v	pointer
=	O
state	pointer
->	O
v	pointer
;	O
gsl_vector	struct
*	O
w	pointer
=	O
state	pointer
->	O
w	pointer
;	O
gsl_vector	struct
*	O
fnew	pointer
=	O
state	pointer
->	O
fnew	pointer
;	O
gsl_vector	struct
*	O
x_trial	pointer
=	O
state	pointer
->	O
x_trial	pointer
;	O
gsl_matrix	struct
*	O
lu	pointer
=	O
state	pointer
->	O
lu	pointer
;	O
gsl_permutation	struct
*	O
perm	pointer
=	O
state	pointer
->	O
permutation	pointer
;	O
size_t	long
i	long
,	O
j	long
,	O
iter	long
;	O
size_t	long
n	int
=	O
function	pointer
->	O
n	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
double	O
sum	double
=	O
0	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
n	int
;	O
j	long
++	O
)	O
{	O
sum	double
+=	O
gsl_matrix_get	function
(	O
H	pointer
,	O
i	long
,	O
j	long
)	O
*	O
gsl_vector_get	function
(	O
f	pointer
,	O
j	long
)	O
;	O
}	O
gsl_vector_set	function
(	O
p	int
,	O
i	long
,	O
sum	double
)	O
;	O
}	O
t	double
=	O
1	int
;	O
iter	long
=	O
0	int
;	O
phi0	double
=	O
state	pointer
->	O
phi	double
;	O
new_step	O
:	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
double	O
pi	double
=	O
gsl_vector_get	function
(	O
p	int
,	O
i	long
)	O
;	O
double	O
xi	double
=	O
gsl_vector_get	function
(	O
x	double
,	O
i	long
)	O
;	O
gsl_vector_set	function
(	O
x_trial	pointer
,	O
i	long
,	O
xi	double
+	O
t	double
*	O
pi	double
)	O
;	O
}	O
{	O
int	O
status	int
=	O
GSL_MULTIROOT_FN_EVAL	O
(	O
function	pointer
,	O
x_trial	pointer
,	O
fnew	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
GSL_EBADFUNC	int
;	O
}	O
}	O
phi1	double
=	O
enorm	function
(	O
fnew	pointer
)	O
;	O
iter	long
++	O
;	O
if	O
(	O
phi1	double
>	O
phi0	double
&&	O
iter	long
<	O
10	int
&&	O
t	double
>	O
0.1	int
)	O
{	O
double	O
theta	double
=	O
phi1	double
/	O
phi0	double
;	O
t	double
*=	O
(	O
sqrt	function
(	O
1.0	int
+	O
6.0	int
*	O
theta	double
)	O
-	O
1.0	int
)	O
/	O
(	O
3.0	int
*	O
theta	double
)	O
;	O
goto	O
new_step	O
;	O
}	O
if	O
(	O
phi1	double
>	O
phi0	double
)	O
{	O
int	O
signum	pointer
=	O
0	int
;	O
gsl_multiroot_fdjacobian	function
(	O
function	pointer
,	O
x	double
,	O
f	pointer
,	O
GSL_SQRT_DBL_EPSILON	int
,	O
lu	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
n	int
;	O
j	long
++	O
)	O
gsl_matrix_set	function
(	O
lu	pointer
,	O
i	long
,	O
j	long
,	O
-	O
gsl_matrix_get	function
(	O
lu	pointer
,	O
i	long
,	O
j	long
)	O
)	O
;	O
gsl_linalg_LU_decomp	function
(	O
lu	pointer
,	O
perm	pointer
,	O
&	O
signum	pointer
)	O
;	O
gsl_linalg_LU_invert	function
(	O
lu	pointer
,	O
perm	pointer
,	O
H	pointer
)	O
;	O
gsl_linalg_LU_solve	function
(	O
lu	pointer
,	O
perm	pointer
,	O
f	pointer
,	O
p	int
)	O
;	O
t	double
=	O
1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
double	O
pi	double
=	O
gsl_vector_get	function
(	O
p	int
,	O
i	long
)	O
;	O
double	O
xi	double
=	O
gsl_vector_get	function
(	O
x	double
,	O
i	long
)	O
;	O
gsl_vector_set	function
(	O
x_trial	pointer
,	O
i	long
,	O
xi	double
+	O
t	double
*	O
pi	double
)	O
;	O
}	O
{	O
int	O
status	int
=	O
GSL_MULTIROOT_FN_EVAL	O
(	O
function	pointer
,	O
x_trial	pointer
,	O
fnew	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
GSL_EBADFUNC	int
;	O
}	O
}	O
phi1	double
=	O
enorm	function
(	O
fnew	pointer
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
double	O
yi	double
=	O
gsl_vector_get	function
(	O
fnew	pointer
,	O
i	long
)	O
-	O
gsl_vector_get	function
(	O
f	pointer
,	O
i	long
)	O
;	O
gsl_vector_set	function
(	O
y	double
,	O
i	long
,	O
yi	double
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
double	O
sum	double
=	O
0	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
n	int
;	O
j	long
++	O
)	O
{	O
sum	double
+=	O
gsl_matrix_get	function
(	O
H	pointer
,	O
i	long
,	O
j	long
)	O
*	O
gsl_vector_get	function
(	O
y	double
,	O
j	long
)	O
;	O
}	O
gsl_vector_set	function
(	O
v	pointer
,	O
i	long
,	O
sum	double
)	O
;	O
}	O
lambda	double
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
lambda	double
+=	O
gsl_vector_get	function
(	O
p	int
,	O
i	long
)	O
*	O
gsl_vector_get	function
(	O
v	pointer
,	O
i	long
)	O
;	O
}	O
if	O
(	O
lambda	double
==	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"approximation to Jacobian has collapsed"	pointer
,	O
GSL_EZERODIV	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
double	O
vi	double
=	O
gsl_vector_get	function
(	O
v	pointer
,	O
i	long
)	O
+	O
t	double
*	O
gsl_vector_get	function
(	O
p	int
,	O
i	long
)	O
;	O
gsl_vector_set	function
(	O
v	pointer
,	O
i	long
,	O
vi	double
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
double	O
sum	double
=	O
0	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
n	int
;	O
j	long
++	O
)	O
{	O
sum	double
+=	O
gsl_matrix_get	function
(	O
H	pointer
,	O
j	long
,	O
i	long
)	O
*	O
gsl_vector_get	function
(	O
p	int
,	O
j	long
)	O
;	O
}	O
gsl_vector_set	function
(	O
w	pointer
,	O
i	long
,	O
sum	double
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
double	O
vi	double
=	O
gsl_vector_get	function
(	O
v	pointer
,	O
i	long
)	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
n	int
;	O
j	long
++	O
)	O
{	O
double	O
wj	double
=	O
gsl_vector_get	function
(	O
w	pointer
,	O
j	long
)	O
;	O
double	O
Hij	double
=	O
gsl_matrix_get	function
(	O
H	pointer
,	O
i	long
,	O
j	long
)	O
-	O
vi	double
*	O
wj	double
/	O
lambda	double
;	O
gsl_matrix_set	function
(	O
H	pointer
,	O
i	long
,	O
j	long
,	O
Hij	double
)	O
;	O
}	O
}	O
gsl_vector_memcpy	function
(	O
f	pointer
,	O
fnew	pointer
)	O
;	O
gsl_vector_memcpy	function
(	O
x	double
,	O
x_trial	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
double	O
pi	double
=	O
gsl_vector_get	function
(	O
p	int
,	O
i	long
)	O
;	O
gsl_vector_set	function
(	O
dx	pointer
,	O
i	long
,	O
t	double
*	O
pi	double
)	O
;	O
}	O
state	pointer
->	O
phi	double
=	O
phi1	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
void	O
broyden_free	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
broyden_state_t	struct
*	O
state	pointer
=	O
(	O
broyden_state_t	struct
*	O
)	O
vstate	pointer
;	O
gsl_matrix_free	function
(	O
state	pointer
->	O
H	pointer
)	O
;	O
gsl_matrix_free	function
(	O
state	pointer
->	O
lu	pointer
)	O
;	O
gsl_permutation_free	function
(	O
state	pointer
->	O
permutation	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
v	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
w	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
y	double
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
p	int
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
fnew	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
x_trial	pointer
)	O
;	O
}	O
static	O
const	O
gsl_multiroot_fsolver_type	struct
broyden_type	struct
=	O
{	O
"broyden"	pointer
,	O
sizeof	O
(	O
broyden_state_t	struct
)	O
,	O
&	O
broyden_alloc	function
,	O
&	O
broyden_set	function
,	O
&	O
broyden_iterate	function
,	O
&	O
broyden_free	function
}	O
;	O
const	O
gsl_multiroot_fsolver_type	struct
*	O
gsl_multiroot_fsolver_broyden	pointer
=	O
&	O
broyden_type	struct
;	O
