int	O
mu_is_proto	function
(	O
const	O
char	O
*	O
p	pointer
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
'|'	O
)	O
return	O
1	int
;	O
for	O
(	O
;	O
*	O
p	pointer
&&	O
*	O
p	pointer
!=	O
'/'	O
;	O
p	pointer
++	O
)	O
if	O
(	O
*	O
p	pointer
==	O
':'	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_mh_delim	function
(	O
const	O
char	O
*	O
str	pointer
)	O
{	O
if	O
(	O
str	pointer
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
for	O
(	O
;	O
*	O
str	pointer
==	O
'-'	O
;	O
str	pointer
++	O
)	O
;	O
for	O
(	O
;	O
*	O
str	pointer
==	O
' '	O
||	O
*	O
str	pointer
==	O
'\t'	O
;	O
str	pointer
++	O
)	O
;	O
}	O
return	O
str	pointer
[	O
0	int
]	O
==	O
'\n'	O
;	O
}	O
int	O
mutil_parse_field_map	function
(	O
const	O
char	O
*	O
map	pointer
,	O
mu_assoc_t	pointer
*	O
passoc_tab	pointer
,	O
int	O
*	O
perr	pointer
)	O
{	O
int	O
rc	int
;	O
int	O
i	int
;	O
struct	O
mu_wordsplit	struct
ws	pointer
;	O
mu_assoc_t	pointer
assoc_tab	pointer
=	O
NULL	O
;	O
ws	pointer
.	O
ws_delim	pointer
=	O
":"	pointer
;	O
if	O
(	O
mu_wordsplit	struct
(	O
map	pointer
,	O
&	O
ws	pointer
,	O
MU_WRDSF_DEFFLAGS	O
|	O
MU_WRDSF_DELIM	O
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot split line `%s': %s"	pointer
)	O
,	O
map	pointer
,	O
mu_wordsplit_strerror	function
(	O
&	O
ws	pointer
)	O
)	O
;	O
return	O
errno	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ws	pointer
.	O
ws_wordc	long
;	O
i	int
++	O
)	O
{	O
char	O
*	O
tok	pointer
=	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	int
]	O
;	O
char	O
*	O
p	pointer
=	O
strchr	function
(	O
tok	pointer
,	O
'='	O
)	O
;	O
char	O
*	O
pptr	pointer
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
rc	int
=	O
EINVAL	int
;	O
break	O
;	O
}	O
if	O
(	O
!	O
assoc_tab	pointer
)	O
{	O
rc	int
=	O
mu_assoc_create	function
(	O
&	O
assoc_tab	pointer
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
mu_assoc_set_destroy_item	function
(	O
assoc_tab	pointer
,	O
mu_list_free_item	function
)	O
;	O
*	O
passoc_tab	pointer
=	O
assoc_tab	pointer
;	O
}	O
*	O
p	pointer
++	O
=	O
0	int
;	O
pptr	pointer
=	O
strdup	function
(	O
p	pointer
)	O
;	O
if	O
(	O
!	O
pptr	pointer
)	O
{	O
rc	int
=	O
errno	O
;	O
break	O
;	O
}	O
rc	int
=	O
mu_assoc_install	function
(	O
assoc_tab	pointer
,	O
tok	pointer
,	O
pptr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	function
(	O
p	pointer
)	O
;	O
break	O
;	O
}	O
}	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
if	O
(	O
rc	int
&&	O
perr	pointer
)	O
*	O
perr	pointer
=	O
i	int
;	O
return	O
rc	int
;	O
}	O
int	O
mu_stream_flags_to_mode	function
(	O
int	O
flags	int
,	O
int	O
isdir	int
)	O
{	O
int	O
mode	int
=	O
0	int
;	O
if	O
(	O
flags	int
&	O
MU_STREAM_IRGRP	int
)	O
mode	int
|=	O
S_IRGRP	O
;	O
if	O
(	O
flags	int
&	O
MU_STREAM_IWGRP	int
)	O
mode	int
|=	O
S_IWGRP	O
;	O
if	O
(	O
flags	int
&	O
MU_STREAM_IROTH	int
)	O
mode	int
|=	O
S_IROTH	O
;	O
if	O
(	O
flags	int
&	O
MU_STREAM_IWOTH	int
)	O
mode	int
|=	O
S_IWOTH	O
;	O
if	O
(	O
isdir	int
)	O
{	O
if	O
(	O
mode	int
&	O
(	O
S_IRGRP	O
|	O
S_IWGRP	O
)	O
)	O
mode	int
|=	O
S_IXGRP	O
;	O
if	O
(	O
mode	int
&	O
(	O
S_IROTH	O
|	O
S_IWOTH	O
)	O
)	O
mode	int
|=	O
S_IXOTH	O
;	O
}	O
return	O
mode	int
;	O
}	O
