struct	O
_mu_fsfolder	struct
{	O
char	O
*	O
dirname	pointer
;	O
mu_property_t	pointer
subscription	pointer
;	O
}	O
;	O
static	O
int	O
open_subscription	function
(	O
struct	O
_mu_fsfolder	struct
*	O
folder	pointer
)	O
{	O
int	O
rc	int
;	O
mu_property_t	pointer
prop	pointer
;	O
mu_stream_t	pointer
str	pointer
;	O
char	O
*	O
filename	pointer
=	O
mu_make_file_name	O
(	O
folder	pointer
->	O
dirname	pointer
,	O
".mu-subscr"	pointer
)	O
;	O
rc	int
=	O
mu_file_stream_create	function
(	O
&	O
str	pointer
,	O
filename	pointer
,	O
MU_STREAM_RDWR	O
|	O
MU_STREAM_CREAT	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_property_create_init	function
(	O
&	O
prop	pointer
,	O
mu_assoc_property_init	function
,	O
str	pointer
)	O
;	O
free	function
(	O
filename	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
folder	pointer
->	O
subscription	pointer
=	O
prop	pointer
;	O
return	O
rc	int
;	O
}	O
static	O
char	O
*	O
get_pathname	function
(	O
const	O
char	O
*	O
dirname	pointer
,	O
const	O
char	O
*	O
basename	function
)	O
{	O
char	O
*	O
pathname	pointer
=	O
NULL	O
,	O
*	O
p	pointer
;	O
p	pointer
=	O
strchr	function
(	O
dirname	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
p	pointer
&&	O
p	pointer
[	O
1	int
]	O
==	O
'/'	O
&&	O
p	pointer
[	O
2	int
]	O
==	O
'/'	O
)	O
dirname	pointer
=	O
p	pointer
+	O
3	int
;	O
if	O
(	O
basename	function
==	O
NULL	O
)	O
pathname	pointer
=	O
strdup	function
(	O
dirname	pointer
?	O
dirname	pointer
:	O
"."	pointer
)	O
;	O
else	O
if	O
(	O
basename	function
[	O
0	int
]	O
==	O
'/'	O
)	O
pathname	pointer
=	O
strdup	function
(	O
basename	function
)	O
;	O
else	O
{	O
size_t	long
baselen	long
=	O
strlen	function
(	O
basename	function
)	O
;	O
size_t	long
dirlen	long
=	O
strlen	function
(	O
dirname	pointer
)	O
;	O
while	O
(	O
dirlen	long
>	O
0	int
&&	O
dirname	pointer
[	O
dirlen	long
-	O
1	int
]	O
==	O
'/'	O
)	O
dirlen	long
--	O
;	O
pathname	pointer
=	O
calloc	function
(	O
dirlen	long
+	O
baselen	long
+	O
2	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
if	O
(	O
pathname	pointer
)	O
{	O
memcpy	function
(	O
pathname	pointer
,	O
dirname	pointer
,	O
dirlen	long
)	O
;	O
pathname	pointer
[	O
dirlen	long
]	O
=	O
'/'	O
;	O
strcpy	function
(	O
pathname	pointer
+	O
dirlen	long
+	O
1	int
,	O
basename	function
)	O
;	O
}	O
}	O
return	O
pathname	pointer
;	O
}	O
static	O
void	O
_fsfolder_destroy	function
(	O
mu_folder_t	pointer
folder	pointer
)	O
{	O
if	O
(	O
folder	pointer
->	O
data	pointer
)	O
{	O
struct	O
_mu_fsfolder	struct
*	O
fsfolder	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
free	function
(	O
fsfolder	pointer
->	O
dirname	pointer
)	O
;	O
mu_property_destroy	function
(	O
&	O
fsfolder	pointer
->	O
subscription	pointer
)	O
;	O
free	function
(	O
folder	pointer
->	O
data	pointer
)	O
;	O
folder	pointer
->	O
data	pointer
=	O
NULL	O
;	O
}	O
}	O
static	O
int	O
_fsfolder_open	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
int	O
flags	int
MU_ARG_UNUSED	O
)	O
{	O
struct	O
_mu_fsfolder	struct
*	O
fsfolder	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
if	O
(	O
flags	int
&	O
MU_STREAM_CREAT	int
)	O
{	O
return	O
(	O
mkdir	function
(	O
fsfolder	pointer
->	O
dirname	pointer
,	O
S_IRWXU	O
)	O
==	O
0	int
)	O
?	O
0	int
:	O
errno	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_fsfolder_close	function
(	O
mu_folder_t	pointer
folder	pointer
MU_ARG_UNUSED	O
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
struct	O
_mu_fsfolder	struct
*	O
fsfolder	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
if	O
(	O
fsfolder	pointer
->	O
subscription	pointer
)	O
rc	int
=	O
mu_property_save	function
(	O
fsfolder	pointer
->	O
subscription	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_fsfolder_rename	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
const	O
char	O
*	O
oldpath	pointer
,	O
const	O
char	O
*	O
newpath	pointer
)	O
{	O
struct	O
_mu_fsfolder	struct
*	O
fsfolder	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
if	O
(	O
oldpath	pointer
&&	O
newpath	pointer
)	O
{	O
int	O
status	int
=	O
0	int
;	O
char	O
*	O
pathold	pointer
=	O
get_pathname	function
(	O
fsfolder	pointer
->	O
dirname	pointer
,	O
oldpath	pointer
)	O
;	O
if	O
(	O
pathold	pointer
)	O
{	O
char	O
*	O
pathnew	pointer
=	O
get_pathname	function
(	O
fsfolder	pointer
->	O
dirname	pointer
,	O
newpath	pointer
)	O
;	O
if	O
(	O
pathnew	pointer
)	O
{	O
if	O
(	O
access	function
(	O
pathnew	pointer
,	O
F_OK	int
)	O
==	O
0	int
)	O
status	int
=	O
EEXIST	int
;	O
else	O
if	O
(	O
rename	function
(	O
pathold	pointer
,	O
pathnew	pointer
)	O
!=	O
0	int
)	O
status	int
=	O
errno	O
;	O
free	function
(	O
pathnew	pointer
)	O
;	O
}	O
else	O
status	int
=	O
ENOMEM	int
;	O
free	function
(	O
pathold	pointer
)	O
;	O
}	O
else	O
status	int
=	O
ENOMEM	int
;	O
return	O
status	int
;	O
}	O
return	O
EINVAL	int
;	O
}	O
struct	O
inode_list	struct
{	O
struct	O
inode_list	struct
*	O
next	pointer
;	O
ino_t	long
inode	long
;	O
dev_t	long
dev	long
;	O
}	O
;	O
struct	O
folder_scan_data	struct
{	O
mu_folder_t	pointer
folder	pointer
;	O
char	O
*	O
dirname	pointer
;	O
size_t	long
dirlen	long
;	O
size_t	long
errcnt	long
;	O
}	O
;	O
static	O
int	O
inode_list_lookup	function
(	O
struct	O
inode_list	struct
*	O
list	pointer
,	O
struct	O
stat	struct
*	O
st	pointer
)	O
{	O
for	O
(	O
;	O
list	pointer
;	O
list	pointer
=	O
list	pointer
->	O
next	pointer
)	O
if	O
(	O
list	pointer
->	O
inode	long
==	O
st	pointer
->	O
st_ino	long
&&	O
list	pointer
->	O
dev	long
==	O
st	pointer
->	O
st_dev	long
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
fold_record_match	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
,	O
void	O
*	O
prev	pointer
,	O
void	O
*	O
*	O
ret	pointer
)	O
{	O
struct	O
mu_record_match	struct
*	O
cur_match	pointer
=	O
item	pointer
;	O
struct	O
mu_record_match	struct
*	O
prev_match	pointer
=	O
prev	pointer
;	O
if	O
(	O
prev	pointer
==	O
NULL	O
||	O
cur_match	pointer
->	O
flags	int
>=	O
prev_match	pointer
->	O
flags	int
)	O
*	O
ret	pointer
=	O
cur_match	pointer
;	O
else	O
*	O
ret	pointer
=	O
prev_match	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
mcomp	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
struct	O
_mu_record	struct
const	O
*	O
r	pointer
=	O
a	pointer
;	O
struct	O
mu_record_match	struct
const	O
*	O
m	pointer
=	O
b	pointer
;	O
return	O
!	O
(	O
m	pointer
->	O
record	pointer
==	O
r	pointer
)	O
;	O
}	O
static	O
int	O
best_match	function
(	O
mu_list_t	pointer
records	pointer
,	O
char	O
const	O
*	O
refname	pointer
,	O
mu_record_t	pointer
*	O
prec	pointer
,	O
int	O
*	O
pflags	pointer
)	O
{	O
int	O
rc	int
;	O
mu_list_t	pointer
mlist	pointer
,	O
isect	pointer
;	O
mu_list_comparator_t	pointer
prev	pointer
;	O
struct	O
mu_record_match	struct
*	O
m	pointer
;	O
rc	int
=	O
mu_registrar_match_records	function
(	O
refname	pointer
,	O
MU_FOLDER_ATTRIBUTE_ALL	O
,	O
&	O
mlist	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_FOLDER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s():%s: %s"	pointer
,	O
__func__	O
,	O
"mu_registrar_match_records"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
prev	pointer
=	O
mu_list_set_comparator	function
(	O
records	pointer
,	O
mcomp	function
)	O
;	O
rc	int
=	O
mu_list_intersect	function
(	O
&	O
isect	pointer
,	O
mlist	pointer
,	O
records	pointer
)	O
;	O
mu_list_set_comparator	function
(	O
records	pointer
,	O
prev	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_FOLDER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s():%s: %s"	pointer
,	O
__func__	O
,	O
"mu_list_intersect"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
mu_list_destroy	function
(	O
&	O
mlist	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
rc	int
=	O
mu_list_fold	function
(	O
isect	pointer
,	O
fold_record_match	function
,	O
NULL	O
,	O
NULL	O
,	O
&	O
m	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
m	pointer
==	O
NULL	O
)	O
rc	int
=	O
MU_ERR_NOENT	O
;	O
else	O
{	O
*	O
prec	pointer
=	O
m	pointer
->	O
record	pointer
;	O
*	O
pflags	pointer
=	O
m	pointer
->	O
flags	int
;	O
}	O
}	O
else	O
{	O
mu_debug	O
(	O
MU_DEBCAT_FOLDER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s():%s: %s"	pointer
,	O
__func__	O
,	O
"mu_list_fold"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
}	O
mu_list_destroy	function
(	O
&	O
mlist	pointer
)	O
;	O
mu_list_destroy	function
(	O
&	O
isect	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
list_helper	function
(	O
struct	O
mu_folder_scanner	struct
*	O
scn	pointer
,	O
struct	O
folder_scan_data	struct
*	O
data	pointer
,	O
struct	O
inode_list	struct
*	O
ilist	pointer
,	O
const	O
char	O
*	O
dirname	pointer
,	O
size_t	long
depth	int
)	O
{	O
DIR	struct
*	O
dirp	pointer
;	O
struct	O
dirent	struct
*	O
dp	pointer
;	O
int	O
stop	int
=	O
0	int
;	O
if	O
(	O
scn	pointer
->	O
max_depth	long
&&	O
depth	int
>=	O
scn	pointer
->	O
max_depth	long
)	O
return	O
0	int
;	O
dirp	pointer
=	O
opendir	function
(	O
dirname	pointer
)	O
;	O
if	O
(	O
dirp	pointer
==	O
NULL	O
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_FOLDER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s: %s(%s): %s"	pointer
,	O
__func__	O
,	O
"opendir"	pointer
,	O
dirname	pointer
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
)	O
;	O
data	pointer
->	O
errcnt	long
++	O
;	O
return	O
1	int
;	O
}	O
while	O
(	O
(	O
dp	pointer
=	O
readdir	function
(	O
dirp	pointer
)	O
)	O
)	O
{	O
char	O
const	O
*	O
ename	pointer
=	O
dp	pointer
->	O
d_name	array
;	O
char	O
*	O
fname	pointer
;	O
struct	O
stat	struct
st	pointer
;	O
if	O
(	O
ename	pointer
[	O
ename	pointer
[	O
0	int
]	O
!=	O
'.'	O
?	O
0	int
:	O
ename	pointer
[	O
1	int
]	O
!=	O
'.'	O
?	O
1	int
:	O
2	int
]	O
==	O
0	int
)	O
continue	O
;	O
if	O
(	O
strncmp	function
(	O
ename	pointer
,	O
".mu-"	pointer
,	O
4	int
)	O
==	O
0	int
)	O
continue	O
;	O
fname	pointer
=	O
get_pathname	function
(	O
dirname	pointer
,	O
ename	pointer
)	O
;	O
if	O
(	O
lstat	function
(	O
fname	pointer
,	O
&	O
st	pointer
)	O
==	O
0	int
)	O
{	O
int	O
f	int
;	O
if	O
(	O
S_ISDIR	O
(	O
st	pointer
.	O
st_mode	int
)	O
)	O
f	int
=	O
MU_FOLDER_ATTRIBUTE_DIRECTORY	int
;	O
else	O
if	O
(	O
S_ISREG	O
(	O
st	pointer
.	O
st_mode	int
)	O
)	O
f	int
=	O
MU_FOLDER_ATTRIBUTE_FILE	int
;	O
else	O
if	O
(	O
S_ISLNK	O
(	O
st	pointer
.	O
st_mode	int
)	O
)	O
f	int
=	O
MU_FOLDER_ATTRIBUTE_LINK	int
;	O
else	O
f	int
=	O
0	int
;	O
if	O
(	O
mu_registrar_list_p	function
(	O
scn	pointer
->	O
records	pointer
,	O
ename	pointer
,	O
f	int
)	O
)	O
{	O
if	O
(	O
scn	pointer
->	O
pattern	pointer
==	O
NULL	O
||	O
data	pointer
->	O
folder	pointer
->	O
_match	pointer
==	O
NULL	O
||	O
data	pointer
->	O
folder	pointer
->	O
_match	pointer
(	O
fname	pointer
+	O
data	pointer
->	O
dirlen	long
+	O
(	O
(	O
data	pointer
->	O
dirlen	long
>	O
1	int
&&	O
data	pointer
->	O
dirname	pointer
[	O
data	pointer
->	O
dirlen	long
-	O
1	int
]	O
!=	O
'/'	O
)	O
?	O
1	int
:	O
0	int
)	O
,	O
scn	pointer
->	O
pattern	pointer
,	O
scn	pointer
->	O
match_flags	int
)	O
==	O
0	int
)	O
{	O
char	O
*	O
refname	pointer
=	O
fname	pointer
;	O
int	O
type	enum
=	O
0	int
;	O
struct	O
mu_list_response	struct
*	O
resp	pointer
;	O
mu_record_t	pointer
rec	pointer
=	O
NULL	O
;	O
int	O
rc	int
;	O
resp	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
resp	pointer
)	O
)	O
;	O
if	O
(	O
resp	pointer
==	O
NULL	O
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_FOLDER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s: %s"	pointer
,	O
__func__	O
,	O
mu_strerror	function
(	O
ENOMEM	int
)	O
)	O
)	O
;	O
data	pointer
->	O
errcnt	long
++	O
;	O
free	function
(	O
fname	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
scn	pointer
->	O
records	pointer
)	O
rc	int
=	O
best_match	function
(	O
scn	pointer
->	O
records	pointer
,	O
refname	pointer
,	O
&	O
rec	pointer
,	O
&	O
type	enum
)	O
;	O
else	O
rc	int
=	O
mu_registrar_lookup	function
(	O
refname	pointer
,	O
MU_FOLDER_ATTRIBUTE_ALL	O
,	O
&	O
rec	pointer
,	O
&	O
type	enum
)	O
;	O
if	O
(	O
rc	int
||	O
type	enum
==	O
0	int
)	O
{	O
free	function
(	O
resp	pointer
)	O
;	O
if	O
(	O
f	int
==	O
MU_FOLDER_ATTRIBUTE_DIRECTORY	int
)	O
type	enum
=	O
f	int
;	O
}	O
else	O
{	O
resp	pointer
->	O
name	pointer
=	O
fname	pointer
;	O
resp	pointer
->	O
depth	int
=	O
depth	int
;	O
resp	pointer
->	O
separator	int
=	O
'/'	O
;	O
resp	pointer
->	O
type	enum
=	O
type	enum
;	O
resp	pointer
->	O
format	pointer
=	O
rec	pointer
;	O
if	O
(	O
scn	pointer
->	O
enumfun	pointer
)	O
{	O
if	O
(	O
scn	pointer
->	O
enumfun	pointer
(	O
data	pointer
->	O
folder	pointer
,	O
resp	pointer
,	O
scn	pointer
->	O
enumdata	pointer
)	O
)	O
{	O
free	function
(	O
resp	pointer
->	O
name	pointer
)	O
;	O
free	function
(	O
resp	pointer
)	O
;	O
stop	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
scn	pointer
->	O
result	pointer
)	O
{	O
int	O
rc	int
;	O
rc	int
=	O
mu_list_append	function
(	O
scn	pointer
->	O
result	pointer
,	O
resp	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_debug	O
(	O
MU_DEBCAT_FOLDER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s(%s):%s: %s"	pointer
,	O
__func__	O
,	O
dirname	pointer
,	O
"mu_list_append"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
fname	pointer
=	O
NULL	O
;	O
}	O
else	O
free	function
(	O
resp	pointer
)	O
;	O
}	O
if	O
(	O
(	O
type	enum
&	O
MU_FOLDER_ATTRIBUTE_DIRECTORY	int
)	O
&&	O
!	O
inode_list_lookup	function
(	O
ilist	pointer
,	O
&	O
st	pointer
)	O
)	O
{	O
struct	O
inode_list	struct
idata	struct
;	O
idata	struct
.	O
inode	long
=	O
st	pointer
.	O
st_ino	long
;	O
idata	struct
.	O
dev	long
=	O
st	pointer
.	O
st_dev	long
;	O
idata	struct
.	O
next	pointer
=	O
ilist	pointer
;	O
stop	int
=	O
list_helper	function
(	O
scn	pointer
,	O
data	pointer
,	O
&	O
idata	struct
,	O
refname	pointer
,	O
depth	int
+	O
1	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
S_ISDIR	O
(	O
st	pointer
.	O
st_mode	int
)	O
)	O
{	O
struct	O
inode_list	struct
idata	struct
;	O
idata	struct
.	O
inode	long
=	O
st	pointer
.	O
st_ino	long
;	O
idata	struct
.	O
dev	long
=	O
st	pointer
.	O
st_dev	long
;	O
idata	struct
.	O
next	pointer
=	O
ilist	pointer
;	O
stop	int
=	O
list_helper	function
(	O
scn	pointer
,	O
data	pointer
,	O
&	O
idata	struct
,	O
fname	pointer
,	O
depth	int
+	O
1	int
)	O
;	O
}	O
}	O
}	O
else	O
{	O
mu_debug	O
(	O
MU_DEBCAT_FOLDER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s: lstat(%s): %s"	pointer
,	O
__func__	O
,	O
fname	pointer
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
)	O
;	O
}	O
free	function
(	O
fname	pointer
)	O
;	O
}	O
closedir	function
(	O
dirp	pointer
)	O
;	O
return	O
stop	int
;	O
}	O
static	O
int	O
_fsfolder_list	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
struct	O
mu_folder_scanner	struct
*	O
scn	pointer
)	O
{	O
struct	O
_mu_fsfolder	struct
*	O
fsfolder	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
struct	O
inode_list	struct
iroot	struct
;	O
struct	O
folder_scan_data	struct
sdata	struct
;	O
memset	function
(	O
&	O
iroot	struct
,	O
0	int
,	O
sizeof	O
iroot	struct
)	O
;	O
sdata	struct
.	O
folder	pointer
=	O
folder	pointer
;	O
sdata	struct
.	O
dirname	pointer
=	O
get_pathname	function
(	O
fsfolder	pointer
->	O
dirname	pointer
,	O
scn	pointer
->	O
refname	pointer
)	O
;	O
sdata	struct
.	O
dirlen	long
=	O
strlen	function
(	O
sdata	struct
.	O
dirname	pointer
)	O
;	O
sdata	struct
.	O
errcnt	long
=	O
0	int
;	O
list_helper	function
(	O
scn	pointer
,	O
&	O
sdata	struct
,	O
&	O
iroot	struct
,	O
sdata	struct
.	O
dirname	pointer
,	O
0	int
)	O
;	O
free	function
(	O
sdata	struct
.	O
dirname	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_fsfolder_lsub	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
const	O
char	O
*	O
ref	int
,	O
const	O
char	O
*	O
name	pointer
,	O
mu_list_t	pointer
flist	pointer
)	O
{	O
struct	O
_mu_fsfolder	struct
*	O
fsfolder	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
int	O
rc	int
;	O
char	O
*	O
pattern	pointer
;	O
mu_iterator_t	pointer
itr	pointer
;	O
if	O
(	O
name	pointer
==	O
NULL	O
||	O
*	O
name	pointer
==	O
'\0'	O
)	O
name	pointer
=	O
"*"	pointer
;	O
if	O
(	O
!	O
fsfolder	pointer
->	O
subscription	pointer
&&	O
(	O
rc	int
=	O
open_subscription	function
(	O
fsfolder	pointer
)	O
)	O
)	O
return	O
rc	int
;	O
pattern	pointer
=	O
mu_make_file_name	O
(	O
ref	int
,	O
name	pointer
)	O
;	O
rc	int
=	O
mu_property_get_iterator	function
(	O
fsfolder	pointer
->	O
subscription	pointer
,	O
&	O
itr	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
const	O
char	O
*	O
key	pointer
,	O
*	O
val	array
;	O
mu_iterator_current_kv	function
(	O
itr	pointer
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
key	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
val	array
)	O
;	O
if	O
(	O
fnmatch	function
(	O
pattern	pointer
,	O
key	pointer
,	O
0	int
)	O
==	O
0	int
)	O
{	O
struct	O
mu_list_response	struct
*	O
resp	pointer
;	O
resp	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
resp	pointer
)	O
)	O
;	O
if	O
(	O
resp	pointer
==	O
NULL	O
)	O
{	O
rc	int
=	O
ENOMEM	int
;	O
break	O
;	O
}	O
else	O
if	O
(	O
(	O
resp	pointer
->	O
name	pointer
=	O
strdup	function
(	O
key	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
free	function
(	O
resp	pointer
)	O
;	O
rc	int
=	O
ENOMEM	int
;	O
break	O
;	O
}	O
resp	pointer
->	O
type	enum
=	O
MU_FOLDER_ATTRIBUTE_FILE	int
;	O
resp	pointer
->	O
depth	int
=	O
0	int
;	O
resp	pointer
->	O
separator	int
=	O
'/'	O
;	O
rc	int
=	O
mu_list_append	function
(	O
flist	pointer
,	O
resp	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	function
(	O
resp	pointer
)	O
;	O
break	O
;	O
}	O
}	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
}	O
free	function
(	O
pattern	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_fsfolder_subscribe	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
_mu_fsfolder	struct
*	O
fsfolder	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
fsfolder	pointer
->	O
subscription	pointer
&&	O
(	O
rc	int
=	O
open_subscription	function
(	O
fsfolder	pointer
)	O
)	O
)	O
return	O
rc	int
;	O
return	O
mu_property_set_value	function
(	O
fsfolder	pointer
->	O
subscription	pointer
,	O
name	pointer
,	O
""	pointer
,	O
1	int
)	O
;	O
}	O
static	O
int	O
_fsfolder_unsubscribe	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
_mu_fsfolder	struct
*	O
fsfolder	pointer
=	O
folder	pointer
->	O
data	pointer
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
fsfolder	pointer
->	O
subscription	pointer
&&	O
(	O
rc	int
=	O
open_subscription	function
(	O
fsfolder	pointer
)	O
)	O
)	O
return	O
rc	int
;	O
return	O
mu_property_unset	function
(	O
fsfolder	pointer
->	O
subscription	pointer
,	O
name	pointer
)	O
;	O
}	O
static	O
int	O
_fsfolder_get_authority	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
mu_authority_t	pointer
*	O
pauth	pointer
)	O
{	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
folder	pointer
->	O
authority	pointer
==	O
NULL	O
)	O
status	int
=	O
mu_authority_create_null	function
(	O
&	O
folder	pointer
->	O
authority	pointer
,	O
folder	pointer
)	O
;	O
if	O
(	O
!	O
status	int
&&	O
pauth	pointer
)	O
*	O
pauth	pointer
=	O
folder	pointer
->	O
authority	pointer
;	O
return	O
status	int
;	O
}	O
int	O
_mu_fsfolder_init	function
(	O
mu_folder_t	pointer
folder	pointer
)	O
{	O
struct	O
_mu_fsfolder	struct
*	O
dfolder	pointer
;	O
int	O
status	int
=	O
0	int
;	O
status	int
=	O
_fsfolder_get_authority	function
(	O
folder	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
dfolder	pointer
=	O
folder	pointer
->	O
data	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
dfolder	pointer
)	O
)	O
;	O
if	O
(	O
dfolder	pointer
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
status	int
=	O
mu_url_aget_path	function
(	O
folder	pointer
->	O
url	pointer
,	O
&	O
dfolder	pointer
->	O
dirname	pointer
)	O
;	O
if	O
(	O
status	int
==	O
MU_ERR_NOENT	O
)	O
{	O
dfolder	pointer
->	O
dirname	pointer
=	O
malloc	function
(	O
2	int
)	O
;	O
if	O
(	O
dfolder	pointer
->	O
dirname	pointer
==	O
NULL	O
)	O
status	int
=	O
ENOMEM	int
;	O
else	O
{	O
strcpy	function
(	O
dfolder	pointer
->	O
dirname	pointer
,	O
"."	pointer
)	O
;	O
status	int
=	O
0	int
;	O
}	O
}	O
if	O
(	O
status	int
)	O
{	O
free	function
(	O
dfolder	pointer
)	O
;	O
folder	pointer
->	O
data	pointer
=	O
NULL	O
;	O
return	O
status	int
;	O
}	O
folder	pointer
->	O
_destroy	pointer
=	O
_fsfolder_destroy	function
;	O
folder	pointer
->	O
_open	pointer
=	O
_fsfolder_open	function
;	O
folder	pointer
->	O
_close	pointer
=	O
_fsfolder_close	function
;	O
folder	pointer
->	O
_list	pointer
=	O
_fsfolder_list	function
;	O
folder	pointer
->	O
_lsub	pointer
=	O
_fsfolder_lsub	function
;	O
folder	pointer
->	O
_subscribe	pointer
=	O
_fsfolder_subscribe	function
;	O
folder	pointer
->	O
_unsubscribe	pointer
=	O
_fsfolder_unsubscribe	function
;	O
folder	pointer
->	O
_delete	pointer
=	O
NULL	O
;	O
folder	pointer
->	O
_rename	pointer
=	O
_fsfolder_rename	function
;	O
return	O
0	int
;	O
}	O
