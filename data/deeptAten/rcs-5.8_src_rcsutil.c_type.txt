void	O
exit_failurefully	function
(	O
void	O
)	O
{	O
_Exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
void	O
exit_diff_trouble	function
(	O
void	O
)	O
{	O
_Exit	function
(	O
DIFF_TROUBLE	int
)	O
;	O
}	O
void	O
gnurcs_init	function
(	O
struct	O
program	struct
const	O
*	O
program	struct
)	O
{	O
program_name	pointer
=	O
(	O
char	O
*	O
)	O
program	struct
->	O
name	pointer
;	O
PLEXUS	O
=	O
make_space	function
(	O
"plexus"	pointer
)	O
;	O
SINGLE	O
=	O
make_space	function
(	O
"single"	pointer
)	O
;	O
top	struct
=	O
ZLLOC	O
(	O
1	int
,	O
struct	O
top	struct
)	O
;	O
unbuffer_standard_error	function
(	O
)	O
;	O
top	struct
->	O
program	struct
=	O
program	struct
;	O
ISR_SCRATCH	O
=	O
isr_init	function
(	O
&	O
BE	O
(	O
quiet	bool
)	O
)	O
;	O
init_ephemstuff	function
(	O
)	O
;	O
BE	O
(	O
maketimestuff	pointer
)	O
=	O
ZLLOC	O
(	O
1	int
,	O
struct	O
maketimestuff	pointer
)	O
;	O
if	O
(	O
PROB	O
(	O
time	struct
(	O
&	O
BE	O
(	O
now	long
)	O
)	O
)	O
)	O
fatal_sys	function
(	O
"time"	pointer
)	O
;	O
{	O
char	O
*	O
v	pointer
;	O
long	O
lim	long
;	O
BE	O
(	O
mem_limit	long
)	O
=	O
(	O
(	O
(	O
v	pointer
=	O
getenv	function
(	O
"RCS_MEM_LIMIT"	pointer
)	O
)	O
&&	O
v	pointer
[	O
0	int
]	O
)	O
?	O
v	pointer
:	O
NULL	O
)	O
?	O
(	O
0	int
>	O
(	O
lim	long
=	O
strtol	function
(	O
v	pointer
,	O
NULL	O
,	O
10	int
)	O
)	O
?	O
0	int
:	O
lim	long
)	O
:	O
256	int
;	O
}	O
}	O
void	O
gnurcs_goodbye	function
(	O
void	O
)	O
{	O
top	struct
=	O
NULL	O
;	O
close_space	function
(	O
SINGLE	O
)	O
;	O
SINGLE	O
=	O
NULL	O
;	O
close_space	function
(	O
PLEXUS	O
)	O
;	O
PLEXUS	O
=	O
NULL	O
;	O
}	O
void	O
bad_option	function
(	O
char	O
const	O
*	O
option	pointer
)	O
{	O
PERR	O
(	O
"unknown option: %s"	pointer
,	O
option	pointer
)	O
;	O
}	O
void	O
redefined	function
(	O
int	O
c	int
)	O
{	O
PWARN	O
(	O
"redefinition of -%c option"	pointer
,	O
c	int
)	O
;	O
}	O
struct	O
cbuf	struct
minus_p	function
(	O
char	O
const	O
*	O
xrev	pointer
,	O
char	O
const	O
*	O
rev	pointer
)	O
{	O
struct	O
cbuf	struct
rv	struct
;	O
diagnose	function
(	O
"retrieving revision %s"	pointer
,	O
xrev	pointer
)	O
;	O
accf	function
(	O
SINGLE	O
,	O
"-p%s"	pointer
,	O
rev	pointer
)	O
;	O
rv	struct
.	O
string	pointer
=	O
finish_string	function
(	O
SINGLE	O
,	O
&	O
rv	struct
.	O
size	long
)	O
;	O
return	O
rv	struct
;	O
}	O
void	O
parse_revpairs	function
(	O
char	O
option	pointer
,	O
char	O
*	O
arg	pointer
,	O
void	O
(	O
*	O
put	pointer
)	O
(	O
char	O
const	O
*	O
b	pointer
,	O
char	O
const	O
*	O
e	pointer
,	O
bool	bool
sawsep	bool
)	O
)	O
{	O
register	O
char	O
c	int
;	O
int	O
separator	int
=	O
strchr	function
(	O
arg	pointer
,	O
':'	O
)	O
?	O
':'	O
:	O
'-'	O
;	O
char	O
const	O
*	O
b	pointer
=	O
NULL	O
,	O
*	O
e	pointer
=	O
NULL	O
;	O
c	int
=	O
*	O
arg	pointer
;	O
if	O
(	O
'-'	O
==	O
separator	int
&&	O
strchr	function
(	O
arg	pointer
,	O
'-'	O
)	O
&&	O
VERSION	O
(	O
5	int
)	O
<=	O
BE	O
(	O
version	int
)	O
)	O
PWARN	O
(	O
"`-' is obsolete in `-%c%s'; use `:' instead"	pointer
,	O
option	pointer
,	O
arg	pointer
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
SKIPWS	O
(	O
)	O
;	O
b	pointer
=	O
arg	pointer
;	O
TRUNDLE	O
(	O
)	O
;	O
SKIPWS	O
(	O
)	O
;	O
if	O
(	O
c	int
==	O
separator	int
)	O
{	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
arg	pointer
)	O
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
)	O
continue	O
;	O
e	pointer
=	O
arg	pointer
;	O
TRUNDLE	O
(	O
)	O
;	O
put	pointer
(	O
b	pointer
,	O
e	pointer
,	O
true	int
)	O
;	O
SKIPWS	O
(	O
)	O
;	O
}	O
else	O
put	pointer
(	O
b	pointer
,	O
e	pointer
,	O
false	int
)	O
;	O
if	O
(	O
!	O
c	int
)	O
break	O
;	O
else	O
if	O
(	O
c	int
==	O
','	O
||	O
c	int
==	O
';'	O
)	O
c	int
=	O
*	O
++	O
arg	pointer
;	O
else	O
PERR	O
(	O
"missing `,' near `%c%s'"	pointer
,	O
c	int
,	O
arg	pointer
+	O
1	int
)	O
;	O
}	O
}	O
void	O
set_empty_log_message	function
(	O
struct	O
cbuf	struct
*	O
cb	pointer
)	O
{	O
cb	pointer
->	O
string	pointer
=	O
EMPTYLOG	pointer
;	O
cb	pointer
->	O
size	long
=	O
sizeof	O
(	O
EMPTYLOG	pointer
)	O
-	O
1	int
;	O
}	O
void	O
ffree	function
(	O
void	O
)	O
{	O
forget	function
(	O
SINGLE	O
)	O
;	O
}	O
char	O
*	O
str_save	function
(	O
char	O
const	O
*	O
s	pointer
)	O
{	O
return	O
intern	function
(	O
PLEXUS	O
,	O
s	pointer
,	O
strlen	function
(	O
s	pointer
)	O
)	O
;	O
}	O
char	O
*	O
cgetenv	function
(	O
char	O
const	O
*	O
name	pointer
)	O
{	O
register	O
char	O
*	O
p	pointer
;	O
return	O
(	O
p	pointer
=	O
getenv	function
(	O
name	pointer
)	O
)	O
?	O
str_save	function
(	O
p	pointer
)	O
:	O
p	pointer
;	O
}	O
void	O
awrite	function
(	O
char	O
const	O
*	O
buf	pointer
,	O
size_t	long
chars	long
,	O
FILE	struct
*	O
f	pointer
)	O
{	O
while	O
(	O
SSIZE_MAX	O
<	O
chars	long
)	O
{	O
if	O
(	O
fwrite	function
(	O
buf	pointer
,	O
sizeof	O
(	O
*	O
buf	pointer
)	O
,	O
SSIZE_MAX	O
,	O
f	pointer
)	O
!=	O
SSIZE_MAX	O
)	O
Oerror	function
(	O
)	O
;	O
buf	pointer
+=	O
SSIZE_MAX	O
;	O
chars	long
-=	O
SSIZE_MAX	O
;	O
}	O
if	O
(	O
fwrite	function
(	O
buf	pointer
,	O
sizeof	O
(	O
*	O
buf	pointer
)	O
,	O
chars	long
,	O
f	pointer
)	O
!=	O
chars	long
)	O
Oerror	function
(	O
)	O
;	O
}	O
static	O
int	O
movefd	function
(	O
int	O
old	int
,	O
int	O
new	int
)	O
{	O
if	O
(	O
PROB	O
(	O
old	int
)	O
||	O
old	int
==	O
new	int
)	O
return	O
old	int
;	O
new	int
=	O
fcntl	function
(	O
old	int
,	O
F_DUPFD	int
,	O
new	int
)	O
;	O
return	O
!	O
PROB	O
(	O
close	pointer
(	O
old	int
)	O
)	O
?	O
new	int
:	O
-	O
1	int
;	O
}	O
static	O
int	O
fdreopen	function
(	O
int	O
fd	int
,	O
char	O
const	O
*	O
file	pointer
,	O
int	O
flags	int
)	O
{	O
int	O
newfd	int
;	O
close	pointer
(	O
fd	int
)	O
;	O
newfd	int
=	O
open	pointer
(	O
file	pointer
,	O
flags	int
,	O
S_IRUSR	O
|	O
S_IWUSR	O
)	O
;	O
return	O
movefd	function
(	O
newfd	int
,	O
fd	int
)	O
;	O
}	O
int	O
runv	function
(	O
int	O
infd	int
,	O
char	O
const	O
*	O
outname	pointer
,	O
char	O
const	O
*	O
*	O
args	pointer
)	O
{	O
int	O
wstatus	int
;	O
if	O
(	O
!	O
BE	O
(	O
fixed_SIGCHLD	bool
)	O
)	O
{	O
BE	O
(	O
fixed_SIGCHLD	bool
)	O
=	O
true	int
;	O
maybe_reset_sigchld	function
(	O
)	O
;	O
}	O
oflush	function
(	O
)	O
;	O
{	O
pid_t	int
pid	int
;	O
if	O
(	O
!	O
(	O
pid	int
=	O
vfork	function
(	O
)	O
)	O
)	O
{	O
char	O
const	O
*	O
notfound	pointer
;	O
if	O
(	O
infd	int
!=	O
-	O
1	int
&&	O
STDIN_FILENO	int
!=	O
infd	int
&&	O
STDIN_FILENO	int
!=	O
(	O
close	pointer
(	O
STDIN_FILENO	int
)	O
,	O
fcntl	function
(	O
infd	int
,	O
F_DUPFD	int
,	O
STDIN_FILENO	int
)	O
)	O
)	O
{	O
complain	function
(	O
"%s: I/O redirection failed\n"	pointer
,	O
args	pointer
[	O
1	int
]	O
)	O
;	O
exit_diff_trouble	function
(	O
)	O
;	O
}	O
if	O
(	O
outname	pointer
)	O
if	O
(	O
PROB	O
(	O
fdreopen	function
(	O
STDOUT_FILENO	int
,	O
outname	pointer
,	O
O_CREAT	int
|	O
O_TRUNC	int
|	O
O_WRONLY	int
)	O
)	O
)	O
{	O
complain	function
(	O
"%s: %s: cannot create\n"	pointer
,	O
args	pointer
[	O
1	int
]	O
,	O
outname	pointer
)	O
;	O
exit_diff_trouble	function
(	O
)	O
;	O
}	O
EXECV	O
(	O
args	pointer
[	O
1	int
]	O
,	O
(	O
char	O
*	O
*	O
)	O
(	O
args	pointer
+	O
1	int
)	O
)	O
;	O
notfound	pointer
=	O
args	pointer
[	O
1	int
]	O
;	O
if	O
(	O
errno	O
==	O
ENOEXEC	int
)	O
{	O
args	pointer
[	O
0	int
]	O
=	O
notfound	pointer
=	O
RCS_SHELL	pointer
;	O
EXECV	O
(	O
args	pointer
[	O
0	int
]	O
,	O
(	O
char	O
*	O
*	O
)	O
args	pointer
)	O
;	O
}	O
complain	function
(	O
"%s: not found\n"	pointer
,	O
notfound	pointer
)	O
;	O
exit_diff_trouble	function
(	O
)	O
;	O
}	O
if	O
(	O
PROB	O
(	O
pid	int
)	O
)	O
fatal_sys	function
(	O
"fork"	pointer
)	O
;	O
if	O
(	O
PROB	O
(	O
waitpid	function
(	O
pid	int
,	O
&	O
wstatus	int
,	O
0	int
)	O
)	O
)	O
fatal_sys	function
(	O
"waitpid"	pointer
)	O
;	O
}	O
if	O
(	O
!	O
WIFEXITED	O
(	O
wstatus	int
)	O
)	O
{	O
if	O
(	O
WIFSIGNALED	O
(	O
wstatus	int
)	O
)	O
{	O
complain_signal	function
(	O
args	pointer
[	O
1	int
]	O
,	O
WTERMSIG	O
(	O
wstatus	int
)	O
)	O
;	O
PFATAL	O
(	O
"%s got a fatal signal"	pointer
,	O
args	pointer
[	O
1	int
]	O
)	O
;	O
}	O
PFATAL	O
(	O
"%s failed for unknown reason"	pointer
,	O
args	pointer
[	O
1	int
]	O
)	O
;	O
}	O
return	O
WEXITSTATUS	O
(	O
wstatus	int
)	O
;	O
}	O
int	O
run	function
(	O
int	O
infd	int
,	O
char	O
const	O
*	O
outname	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
char	O
const	O
*	O
rgargs	array
[	O
CARGSMAX	int
]	O
;	O
register	O
int	O
i	int
;	O
va_start	O
(	O
ap	array
,	O
outname	pointer
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
(	O
rgargs	array
[	O
i	int
++	O
]	O
=	O
va_arg	O
(	O
ap	array
,	O
char	O
const	O
*	O
)	O
)	O
;	O
)	O
if	O
(	O
CARGSMAX	int
<=	O
i	int
)	O
PFATAL	O
(	O
"too many command arguments"	pointer
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
return	O
runv	function
(	O
infd	int
,	O
outname	pointer
,	O
rgargs	array
)	O
;	O
}	O
void	O
setRCSversion	function
(	O
char	O
const	O
*	O
str	pointer
)	O
{	O
register	O
char	O
const	O
*	O
s	pointer
=	O
str	pointer
+	O
2	int
;	O
if	O
(	O
*	O
s	pointer
)	O
{	O
int	O
v	pointer
=	O
VERSION_DEFAULT	O
;	O
if	O
(	O
BE	O
(	O
version_set	bool
)	O
)	O
redefined	function
(	O
'V'	O
)	O
;	O
BE	O
(	O
version_set	bool
)	O
=	O
true	int
;	O
v	pointer
=	O
0	int
;	O
while	O
(	O
isdigit	function
(	O
*	O
s	pointer
)	O
)	O
v	pointer
=	O
10	int
*	O
v	pointer
+	O
*	O
s	pointer
++	O
-	O
'0'	O
;	O
if	O
(	O
*	O
s	pointer
)	O
PERR	O
(	O
"%s isn't a number"	pointer
,	O
str	pointer
)	O
;	O
else	O
if	O
(	O
v	pointer
<	O
VERSION_min	int
||	O
VERSION_max	int
<	O
v	pointer
)	O
PERR	O
(	O
"%s out of range %d..%d"	pointer
,	O
str	pointer
,	O
VERSION_min	int
,	O
VERSION_max	int
)	O
;	O
BE	O
(	O
version	int
)	O
=	O
VERSION	O
(	O
v	pointer
)	O
;	O
}	O
else	O
{	O
display_version	function
(	O
top	struct
->	O
program	struct
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
}	O
int	O
getRCSINIT	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
char	O
*	O
*	O
*	O
newargv	pointer
)	O
{	O
register	O
char	O
*	O
p	pointer
,	O
*	O
q	pointer
,	O
*	O
*	O
pp	pointer
;	O
size_t	long
n	int
;	O
if	O
(	O
!	O
(	O
q	pointer
=	O
cgetenv	function
(	O
"RCSINIT"	pointer
)	O
)	O
)	O
*	O
newargv	pointer
=	O
argv	pointer
;	O
else	O
{	O
n	int
=	O
argc	int
+	O
2	int
;	O
for	O
(	O
p	pointer
=	O
q	pointer
;	O
;	O
)	O
{	O
switch	O
(	O
*	O
p	pointer
++	O
)	O
{	O
default	O
:	O
continue	O
;	O
case	O
' '	O
:	O
case	O
'\b'	O
:	O
case	O
'\f'	O
:	O
case	O
'\n'	O
:	O
case	O
'\r'	O
:	O
case	O
'\t'	O
:	O
case	O
'\v'	O
:	O
n	int
++	O
;	O
continue	O
;	O
case	O
'\0'	O
:	O
break	O
;	O
}	O
break	O
;	O
}	O
*	O
newargv	pointer
=	O
pp	pointer
=	O
pointer_array	function
(	O
PLEXUS	O
,	O
n	int
)	O
;	O
*	O
pp	pointer
++	O
=	O
*	O
argv	pointer
++	O
;	O
for	O
(	O
p	pointer
=	O
q	pointer
;	O
;	O
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
switch	O
(	O
*	O
q	pointer
)	O
{	O
case	O
'\0'	O
:	O
goto	O
copyrest	O
;	O
case	O
' '	O
:	O
case	O
'\b'	O
:	O
case	O
'\f'	O
:	O
case	O
'\n'	O
:	O
case	O
'\r'	O
:	O
case	O
'\t'	O
:	O
case	O
'\v'	O
:	O
q	pointer
++	O
;	O
continue	O
;	O
}	O
break	O
;	O
}	O
*	O
pp	pointer
++	O
=	O
p	pointer
;	O
++	O
argc	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
switch	O
(	O
(	O
*	O
p	pointer
++	O
=	O
*	O
q	pointer
++	O
)	O
)	O
{	O
case	O
'\0'	O
:	O
goto	O
copyrest	O
;	O
case	O
'\\'	O
:	O
if	O
(	O
!	O
*	O
q	pointer
)	O
goto	O
copyrest	O
;	O
p	pointer
[	O
-	O
1	int
]	O
=	O
*	O
q	pointer
++	O
;	O
continue	O
;	O
default	O
:	O
continue	O
;	O
case	O
' '	O
:	O
case	O
'\b'	O
:	O
case	O
'\f'	O
:	O
case	O
'\n'	O
:	O
case	O
'\r'	O
:	O
case	O
'\t'	O
:	O
case	O
'\v'	O
:	O
break	O
;	O
}	O
break	O
;	O
}	O
p	pointer
[	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
copyrest	O
:	O
while	O
(	O
(	O
*	O
pp	pointer
++	O
=	O
*	O
argv	pointer
++	O
)	O
)	O
continue	O
;	O
}	O
return	O
argc	int
;	O
}	O
