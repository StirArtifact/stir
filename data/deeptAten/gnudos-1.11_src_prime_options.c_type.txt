struct	O
passwd	struct
*	O
pass	pointer
;	O
int	O
x	int
,	O
y	int
,	O
w	int
,	O
x	int
,	O
sel	int
;	O
int	O
oldFGColors	array
[	O
6	int
]	O
;	O
int	O
oldBGColors	array
[	O
6	int
]	O
;	O
char	O
*	O
changeColorsDialogOptions	array
[	O
6	int
]	O
=	O
{	O
"Window          "	pointer
,	O
"Highlighted text"	pointer
,	O
"Menu bar        "	pointer
,	O
"Status bar      "	pointer
,	O
"Buttons         "	pointer
,	O
"Selected Button "	pointer
}	O
;	O
char	O
*	O
findColorName	function
(	O
int	O
c	int
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
(	O
30	int
)	O
:	O
case	O
(	O
40	int
)	O
:	O
return	O
"BLACK  "	pointer
;	O
break	O
;	O
case	O
(	O
31	int
)	O
:	O
case	O
(	O
41	int
)	O
:	O
return	O
"RED    "	pointer
;	O
break	O
;	O
case	O
(	O
32	int
)	O
:	O
case	O
(	O
42	int
)	O
:	O
return	O
"GREEN  "	pointer
;	O
break	O
;	O
case	O
(	O
33	int
)	O
:	O
case	O
(	O
43	int
)	O
:	O
return	O
"BROWN  "	pointer
;	O
break	O
;	O
case	O
(	O
34	int
)	O
:	O
case	O
(	O
44	int
)	O
:	O
return	O
"BLUE   "	pointer
;	O
break	O
;	O
case	O
(	O
35	int
)	O
:	O
case	O
(	O
45	int
)	O
:	O
return	O
"MAGENTA"	pointer
;	O
break	O
;	O
case	O
(	O
36	int
)	O
:	O
case	O
(	O
46	int
)	O
:	O
return	O
"CYAN   "	pointer
;	O
break	O
;	O
case	O
(	O
37	int
)	O
:	O
case	O
(	O
47	int
)	O
:	O
return	O
"WHITE  "	pointer
;	O
break	O
;	O
}	O
return	O
NULL	O
;	O
}	O
void	O
saveOldColors	function
(	O
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
6	int
;	O
i	int
++	O
)	O
{	O
oldFGColors	array
[	O
i	int
]	O
=	O
FG_COLOR	array
[	O
i	int
]	O
;	O
oldBGColors	array
[	O
i	int
]	O
=	O
BG_COLOR	array
[	O
i	int
]	O
;	O
}	O
}	O
void	O
resetColors	function
(	O
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
6	int
;	O
i	int
++	O
)	O
{	O
FG_COLOR	array
[	O
i	int
]	O
=	O
oldFGColors	array
[	O
i	int
]	O
;	O
BG_COLOR	array
[	O
i	int
]	O
=	O
oldBGColors	array
[	O
i	int
]	O
;	O
}	O
}	O
int	O
showColorChooserDialog	function
(	O
)	O
{	O
int	O
i	int
;	O
int	O
x1	int
=	O
(	O
SCREEN_H	int
/	O
2	int
)	O
-	O
5	int
;	O
int	O
y1	int
=	O
(	O
SCREEN_W	int
/	O
2	int
)	O
-	O
10	int
;	O
drawBox	function
(	O
x1	int
,	O
y1	int
,	O
x1	int
+	O
10	int
,	O
y1	int
+	O
16	int
,	O
" Choose color "	pointer
,	O
YES	int
)	O
;	O
for	O
(	O
i	int
=	O
30	int
;	O
i	int
<	O
38	int
;	O
i	int
++	O
)	O
printf	function
(	O
"\e[%d;%dH%s"	pointer
,	O
++	O
x1	int
,	O
y1	int
+	O
1	int
,	O
findColorName	function
(	O
i	int
)	O
)	O
;	O
printf	function
(	O
"\e[%d;%dHCANCEL"	pointer
,	O
++	O
x1	int
,	O
y1	int
+	O
1	int
)	O
;	O
x1	int
=	O
(	O
SCREEN_H	int
/	O
2	int
)	O
-	O
4	int
;	O
i	int
=	O
30	int
;	O
setScreenColors	function
(	O
FG_COLOR	array
[	O
COLOR_HIGHLIGHT_TEXT	int
]	O
,	O
BG_COLOR	array
[	O
COLOR_HIGHLIGHT_TEXT	int
]	O
)	O
;	O
printf	function
(	O
"\e[%d;%dH%s"	pointer
,	O
x1	int
,	O
y1	int
+	O
1	int
,	O
findColorName	function
(	O
i	int
)	O
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
int	O
endme	int
=	O
0	int
;	O
char	O
c	int
;	O
while	O
(	O
!	O
endme	int
)	O
{	O
c	int
=	O
getKey	function
(	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
(	O
'p'	O
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
<	O
2	int
)	O
break	O
;	O
if	O
(	O
!	O
CTRL	int
)	O
break	O
;	O
goto	O
do_up	O
;	O
case	O
(	O
UP_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
break	O
;	O
do_up	O
:	O
if	O
(	O
i	int
<=	O
30	int
)	O
{	O
setScreenColors	function
(	O
FG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
,	O
BG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
)	O
;	O
printf	function
(	O
"\e[%d;%dH%s"	pointer
,	O
x1	int
,	O
y1	int
+	O
1	int
,	O
findColorName	function
(	O
i	int
)	O
)	O
;	O
i	int
=	O
38	int
;	O
setScreenColors	function
(	O
FG_COLOR	array
[	O
COLOR_HIGHLIGHT_TEXT	int
]	O
,	O
BG_COLOR	array
[	O
COLOR_HIGHLIGHT_TEXT	int
]	O
)	O
;	O
printf	function
(	O
"\e[%d;%dHCANCEL"	pointer
,	O
x1	int
+	O
i	int
-	O
30	int
,	O
y1	int
+	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
i	int
==	O
38	int
)	O
{	O
setScreenColors	function
(	O
FG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
,	O
BG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
)	O
;	O
printf	function
(	O
"\e[%d;%dHCANCEL"	pointer
,	O
x1	int
+	O
i	int
-	O
30	int
,	O
y1	int
+	O
1	int
)	O
;	O
i	int
=	O
37	int
;	O
setScreenColors	function
(	O
FG_COLOR	array
[	O
COLOR_HIGHLIGHT_TEXT	int
]	O
,	O
BG_COLOR	array
[	O
COLOR_HIGHLIGHT_TEXT	int
]	O
)	O
;	O
printf	function
(	O
"\e[%d;%dH%s"	pointer
,	O
x1	int
+	O
i	int
-	O
30	int
,	O
y1	int
+	O
1	int
,	O
findColorName	function
(	O
i	int
)	O
)	O
;	O
}	O
else	O
{	O
setScreenColors	function
(	O
FG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
,	O
BG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
)	O
;	O
printf	function
(	O
"\e[%d;%dH%s"	pointer
,	O
x1	int
+	O
i	int
-	O
30	int
,	O
y1	int
+	O
1	int
,	O
findColorName	function
(	O
i	int
)	O
)	O
;	O
i	int
--	O
;	O
setScreenColors	function
(	O
FG_COLOR	array
[	O
COLOR_HIGHLIGHT_TEXT	int
]	O
,	O
BG_COLOR	array
[	O
COLOR_HIGHLIGHT_TEXT	int
]	O
)	O
;	O
printf	function
(	O
"\e[%d;%dH%s"	pointer
,	O
x1	int
+	O
i	int
-	O
30	int
,	O
y1	int
+	O
1	int
,	O
findColorName	function
(	O
i	int
)	O
)	O
;	O
}	O
fflush	function
(	O
stdout	pointer
)	O
;	O
endme	int
=	O
0	int
;	O
break	O
;	O
case	O
(	O
'n'	O
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
<	O
2	int
)	O
break	O
;	O
if	O
(	O
!	O
CTRL	int
)	O
break	O
;	O
goto	O
do_down	O
;	O
case	O
(	O
DOWN_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
break	O
;	O
do_down	O
:	O
if	O
(	O
i	int
>=	O
38	int
)	O
{	O
setScreenColors	function
(	O
FG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
,	O
BG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
)	O
;	O
printf	function
(	O
"\e[%d;%dHCANCEL"	pointer
,	O
x1	int
+	O
i	int
-	O
30	int
,	O
y1	int
+	O
1	int
)	O
;	O
i	int
=	O
30	int
;	O
setScreenColors	function
(	O
FG_COLOR	array
[	O
COLOR_HIGHLIGHT_TEXT	int
]	O
,	O
BG_COLOR	array
[	O
COLOR_HIGHLIGHT_TEXT	int
]	O
)	O
;	O
printf	function
(	O
"\e[%d;%dH%s"	pointer
,	O
x1	int
+	O
i	int
-	O
30	int
,	O
y1	int
+	O
1	int
,	O
findColorName	function
(	O
i	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
i	int
==	O
37	int
)	O
{	O
setScreenColors	function
(	O
FG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
,	O
BG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
)	O
;	O
printf	function
(	O
"\e[%d;%dH%s"	pointer
,	O
x1	int
+	O
i	int
-	O
30	int
,	O
y1	int
+	O
1	int
,	O
findColorName	function
(	O
i	int
)	O
)	O
;	O
i	int
=	O
38	int
;	O
setScreenColors	function
(	O
FG_COLOR	array
[	O
COLOR_HIGHLIGHT_TEXT	int
]	O
,	O
BG_COLOR	array
[	O
COLOR_HIGHLIGHT_TEXT	int
]	O
)	O
;	O
printf	function
(	O
"\e[%d;%dHCANCEL"	pointer
,	O
x1	int
+	O
i	int
-	O
30	int
,	O
y1	int
+	O
1	int
)	O
;	O
}	O
else	O
{	O
setScreenColors	function
(	O
FG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
,	O
BG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
)	O
;	O
printf	function
(	O
"\e[%d;%dH%s"	pointer
,	O
x1	int
+	O
i	int
-	O
30	int
,	O
y1	int
+	O
1	int
,	O
findColorName	function
(	O
i	int
)	O
)	O
;	O
i	int
++	O
;	O
setScreenColors	function
(	O
FG_COLOR	array
[	O
COLOR_HIGHLIGHT_TEXT	int
]	O
,	O
BG_COLOR	array
[	O
COLOR_HIGHLIGHT_TEXT	int
]	O
)	O
;	O
printf	function
(	O
"\e[%d;%dH%s"	pointer
,	O
x1	int
+	O
i	int
-	O
30	int
,	O
y1	int
+	O
1	int
,	O
findColorName	function
(	O
i	int
)	O
)	O
;	O
}	O
endme	int
=	O
0	int
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
break	O
;	O
case	O
(	O
ENTER_KEY	int
)	O
:	O
case	O
(	O
SPACE_KEY	int
)	O
:	O
if	O
(	O
i	int
==	O
38	int
)	O
{	O
i	int
=	O
0	int
;	O
return	O
0	int
;	O
break	O
;	O
}	O
endme	int
=	O
1	int
;	O
return	O
i	int
;	O
break	O
;	O
case	O
(	O
0	int
)	O
:	O
continue	O
;	O
break	O
;	O
case	O
(	O
'g'	O
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
<	O
3	int
)	O
break	O
;	O
if	O
(	O
!	O
CTRL	int
)	O
break	O
;	O
goto	O
do_esc	O
;	O
case	O
(	O
ESC_KEY	int
)	O
:	O
default	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
2	int
)	O
break	O
;	O
do_esc	O
:	O
endme	int
=	O
1	int
;	O
return	O
0	int
;	O
break	O
;	O
}	O
}	O
return	O
i	int
;	O
}	O
void	O
refreshChangeColorsDialog	function
(	O
)	O
{	O
int	O
i	int
;	O
drawBox	function
(	O
x	int
,	O
y	int
,	O
h	int
,	O
w	int
,	O
"Change colors"	pointer
,	O
YES	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dHForeground  Background"	pointer
,	O
x	int
+	O
1	int
,	O
y	int
+	O
16	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH  OK   RESET"	pointer
,	O
h	int
-	O
1	int
,	O
y	int
+	O
12	int
)	O
;	O
setScreenColors	function
(	O
FG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
,	O
BG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
changeColorsDialogOptionsN	int
;	O
i	int
++	O
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
i	int
+	O
2	int
,	O
y	int
+	O
1	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"%s  %s  %s"	pointer
,	O
changeColorsDialogOptions	array
[	O
i	int
]	O
,	O
findColorName	function
(	O
FG_COLOR	array
[	O
i	int
]	O
)	O
,	O
findColorName	function
(	O
BG_COLOR	array
[	O
i	int
]	O
)	O
)	O
;	O
}	O
setScreenColors	function
(	O
FG_COLOR	array
[	O
COLOR_HIGHLIGHT_TEXT	int
]	O
,	O
BG_COLOR	array
[	O
COLOR_HIGHLIGHT_TEXT	int
]	O
)	O
;	O
if	O
(	O
sel	int
==	O
12	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH  OK  "	pointer
,	O
h	int
-	O
1	int
,	O
y	int
+	O
12	int
)	O
;	O
else	O
if	O
(	O
sel	int
==	O
13	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dHRESET"	pointer
,	O
h	int
-	O
1	int
,	O
y	int
+	O
19	int
)	O
;	O
else	O
if	O
(	O
sel	int
>=	O
0	int
&&	O
sel	int
<=	O
5	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH%s"	pointer
,	O
x	int
+	O
sel	int
+	O
2	int
,	O
y	int
+	O
19	int
,	O
findColorName	function
(	O
FG_COLOR	array
[	O
sel	int
]	O
)	O
)	O
;	O
else	O
if	O
(	O
sel	int
>=	O
6	int
&&	O
sel	int
<=	O
11	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH%s"	pointer
,	O
x	int
+	O
(	O
sel	int
-	O
6	int
)	O
+	O
2	int
,	O
y	int
+	O
28	int
,	O
findColorName	function
(	O
BG_COLOR	array
[	O
sel	int
-	O
6	int
]	O
)	O
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
}	O
void	O
optionsMenu_Change_Colors	function
(	O
)	O
{	O
x	int
=	O
(	O
SCREEN_H	int
/	O
2	int
)	O
-	O
5	int
;	O
y	int
=	O
(	O
SCREEN_W	int
/	O
2	int
)	O
-	O
18	int
;	O
w	int
=	O
y	int
+	O
38	int
;	O
h	int
=	O
x	int
+	O
10	int
;	O
sel	int
=	O
0	int
;	O
saveOldColors	function
(	O
)	O
;	O
refreshChangeColorsDialog	function
(	O
)	O
;	O
int	O
endme	int
=	O
0	int
;	O
int	O
enter_error	int
=	O
0	int
;	O
while	O
(	O
!	O
endme	int
)	O
{	O
char	O
c	int
=	O
getKey	function
(	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
(	O
0	int
)	O
:	O
break	O
;	O
case	O
(	O
'p'	O
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
<	O
2	int
)	O
break	O
;	O
if	O
(	O
!	O
CTRL	int
)	O
break	O
;	O
goto	O
do_up	O
;	O
case	O
(	O
UP_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
break	O
;	O
do_up	O
:	O
if	O
(	O
sel	int
==	O
0	int
||	O
sel	int
==	O
6	int
)	O
sel	int
=	O
12	int
;	O
else	O
if	O
(	O
sel	int
==	O
12	int
)	O
sel	int
=	O
5	int
;	O
else	O
if	O
(	O
sel	int
==	O
13	int
)	O
sel	int
=	O
11	int
;	O
else	O
sel	int
--	O
;	O
refreshChangeColorsDialog	function
(	O
)	O
;	O
enter_error	int
=	O
0	int
;	O
break	O
;	O
case	O
(	O
'n'	O
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
<	O
2	int
)	O
break	O
;	O
if	O
(	O
!	O
CTRL	int
)	O
break	O
;	O
goto	O
do_down	O
;	O
case	O
(	O
DOWN_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
break	O
;	O
do_down	O
:	O
if	O
(	O
sel	int
==	O
12	int
)	O
sel	int
=	O
0	int
;	O
else	O
if	O
(	O
sel	int
==	O
13	int
)	O
sel	int
=	O
6	int
;	O
else	O
if	O
(	O
sel	int
==	O
5	int
||	O
sel	int
==	O
6	int
)	O
sel	int
=	O
12	int
;	O
else	O
sel	int
++	O
;	O
refreshChangeColorsDialog	function
(	O
)	O
;	O
enter_error	int
=	O
0	int
;	O
break	O
;	O
case	O
(	O
'b'	O
)	O
:	O
case	O
(	O
'f'	O
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
<	O
2	int
)	O
break	O
;	O
if	O
(	O
!	O
CTRL	int
)	O
break	O
;	O
goto	O
do_right_left	O
;	O
case	O
(	O
LEFT_KEY	int
)	O
:	O
case	O
(	O
RIGHT_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
break	O
;	O
do_right_left	O
:	O
if	O
(	O
sel	int
==	O
12	int
)	O
sel	int
=	O
13	int
;	O
else	O
if	O
(	O
sel	int
==	O
13	int
)	O
sel	int
=	O
12	int
;	O
else	O
if	O
(	O
sel	int
>=	O
0	int
&&	O
sel	int
<=	O
5	int
)	O
sel	int
+=	O
6	int
;	O
else	O
sel	int
-=	O
6	int
;	O
refreshChangeColorsDialog	function
(	O
)	O
;	O
enter_error	int
=	O
0	int
;	O
break	O
;	O
case	O
(	O
'g'	O
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
<	O
3	int
)	O
break	O
;	O
if	O
(	O
!	O
CTRL	int
)	O
break	O
;	O
goto	O
do_esc	O
;	O
case	O
(	O
ESC_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
2	int
)	O
break	O
;	O
do_esc	O
:	O
resetColors	function
(	O
)	O
;	O
refreshFileView	function
(	O
)	O
;	O
refreshDirView	function
(	O
)	O
;	O
refreshBottomView	function
(	O
)	O
;	O
endme	int
=	O
1	int
;	O
return	O
;	O
break	O
;	O
case	O
(	O
SPACE_KEY	int
)	O
:	O
case	O
(	O
ENTER_KEY	int
)	O
:	O
if	O
(	O
enter_error	int
)	O
continue	O
;	O
if	O
(	O
sel	int
==	O
12	int
)	O
{	O
write_config_file	function
(	O
)	O
;	O
refreshFileView	function
(	O
)	O
;	O
refreshDirView	function
(	O
)	O
;	O
refreshBottomView	function
(	O
)	O
;	O
endme	int
=	O
1	int
;	O
return	O
;	O
}	O
else	O
if	O
(	O
sel	int
==	O
13	int
)	O
{	O
resetColors	function
(	O
)	O
;	O
refreshChangeColorsDialog	function
(	O
)	O
;	O
}	O
else	O
{	O
int	O
tmp	array
;	O
enter_error	int
=	O
!	O
enter_error	int
;	O
if	O
(	O
!	O
enter_error	int
)	O
continue	O
;	O
if	O
(	O
sel	int
>=	O
0	int
&&	O
sel	int
<=	O
5	int
)	O
{	O
tmp	array
=	O
showColorChooserDialog	function
(	O
)	O
;	O
if	O
(	O
tmp	array
)	O
FG_COLOR	array
[	O
sel	int
]	O
=	O
tmp	array
;	O
refreshChangeColorsDialog	function
(	O
)	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
sel	int
>=	O
6	int
&&	O
sel	int
<=	O
11	int
)	O
{	O
tmp	array
=	O
showColorChooserDialog	function
(	O
)	O
;	O
if	O
(	O
tmp	array
)	O
BG_COLOR	array
[	O
sel	int
-	O
6	int
]	O
=	O
tmp	array
+	O
10	int
;	O
refreshChangeColorsDialog	function
(	O
)	O
;	O
break	O
;	O
}	O
}	O
break	O
;	O
}	O
}	O
}	O
void	O
optionsMenu_Reset_Config	function
(	O
)	O
{	O
if	O
(	O
!	O
(	O
pass	pointer
=	O
getpwuid	function
(	O
geteuid	function
(	O
)	O
)	O
)	O
)	O
{	O
msgBoxH	function
(	O
"Couldn't open home directory to write config file."	pointer
,	O
OK	int
,	O
ERROR	int
)	O
;	O
refreshFileView	function
(	O
)	O
;	O
refreshDirView	function
(	O
)	O
;	O
return	O
;	O
}	O
config_file_name	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
strlen	function
(	O
pass	pointer
->	O
pw_dir	pointer
)	O
+	O
12	int
)	O
;	O
if	O
(	O
!	O
config_file_name	pointer
)	O
{	O
msgBoxH	function
(	O
"Insufficient memory"	pointer
,	O
OK	int
,	O
ERROR	int
)	O
;	O
refreshFileView	function
(	O
)	O
;	O
refreshDirView	function
(	O
)	O
;	O
return	O
;	O
}	O
strcpy	function
(	O
config_file_name	pointer
,	O
pass	pointer
->	O
pw_dir	pointer
)	O
;	O
strcat	function
(	O
config_file_name	pointer
,	O
"/"	pointer
)	O
;	O
strcat	function
(	O
config_file_name	pointer
,	O
".prime.conf"	pointer
)	O
;	O
if	O
(	O
!	O
(	O
config_file	pointer
=	O
fopen	function
(	O
config_file_name	pointer
,	O
"w"	pointer
)	O
)	O
)	O
{	O
msgBoxH	function
(	O
"Couldn't write to config file in home directory."	pointer
,	O
OK	int
,	O
ERROR	int
)	O
;	O
refreshFileView	function
(	O
)	O
;	O
refreshDirView	function
(	O
)	O
;	O
return	O
;	O
}	O
fprintf	function
(	O
config_file	pointer
,	O
"#Configuration file for the prime program\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"#Please do not modify this file by hand\n\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"#Display colors\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"FG_COLOR_WIN = 37\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"FG_COLOR_HLT = 34\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"FG_COLOR_MBAR = 34\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"FG_COLOR_SBAR = 34\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"FG_COLOR_HBUT = 32\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"FG_COLOR_BUT = 37\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"BG_COLOR_WIN = 40\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"BG_COLOR_HLT = 47\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"BG_COLOR_MBAR = 47\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"BG_COLOR_SBAR = 47\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"BG_COLOR_HBUT = 41\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"BG_COLOR_BUT = 41\n\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"#GnuDOS Level\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"GNU_DOS_LEVEL = 1\n"	pointer
)	O
;	O
fclose	function
(	O
config_file	pointer
)	O
;	O
msgBoxH	function
(	O
"Finished writing default values to ~/.prime.conf"	pointer
,	O
OK	int
,	O
INFO	int
)	O
;	O
free	function
(	O
config_file_name	pointer
)	O
;	O
refreshFileView	function
(	O
)	O
;	O
refreshDirView	function
(	O
)	O
;	O
return	O
;	O
}	O
void	O
write_config_file	function
(	O
)	O
{	O
if	O
(	O
!	O
(	O
pass	pointer
=	O
getpwuid	function
(	O
geteuid	function
(	O
)	O
)	O
)	O
)	O
{	O
msgBoxH	function
(	O
"Couldn't open home directory to write config file."	pointer
,	O
OK	int
,	O
ERROR	int
)	O
;	O
refreshFileView	function
(	O
)	O
;	O
refreshDirView	function
(	O
)	O
;	O
return	O
;	O
}	O
config_file_name	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
strlen	function
(	O
pass	pointer
->	O
pw_dir	pointer
)	O
+	O
12	int
)	O
;	O
if	O
(	O
!	O
config_file_name	pointer
)	O
{	O
msgBoxH	function
(	O
"Insufficient memory"	pointer
,	O
OK	int
,	O
ERROR	int
)	O
;	O
refreshFileView	function
(	O
)	O
;	O
refreshDirView	function
(	O
)	O
;	O
return	O
;	O
}	O
strcpy	function
(	O
config_file_name	pointer
,	O
pass	pointer
->	O
pw_dir	pointer
)	O
;	O
strcat	function
(	O
config_file_name	pointer
,	O
"/"	pointer
)	O
;	O
strcat	function
(	O
config_file_name	pointer
,	O
".prime.conf"	pointer
)	O
;	O
if	O
(	O
!	O
(	O
config_file	pointer
=	O
fopen	function
(	O
config_file_name	pointer
,	O
"w"	pointer
)	O
)	O
)	O
{	O
msgBoxH	function
(	O
"Couldn't write to config file in home directory."	pointer
,	O
OK	int
,	O
ERROR	int
)	O
;	O
refreshFileView	function
(	O
)	O
;	O
refreshDirView	function
(	O
)	O
;	O
return	O
;	O
}	O
fprintf	function
(	O
config_file	pointer
,	O
"#Configuration file for the prime program\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"#Please do not modify this file by hand\n\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"#Display colors\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"FG_COLOR_WIN = %d\n"	pointer
,	O
FG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"FG_COLOR_HLT = %d\n"	pointer
,	O
FG_COLOR	array
[	O
COLOR_HIGHLIGHT_TEXT	int
]	O
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"FG_COLOR_MBAR = %d\n"	pointer
,	O
FG_COLOR	array
[	O
COLOR_MENU_BAR	int
]	O
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"FG_COLOR_SBAR = %d\n"	pointer
,	O
FG_COLOR	array
[	O
COLOR_STATUS_BAR	int
]	O
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"FG_COLOR_HBUT = %d\n"	pointer
,	O
FG_COLOR	array
[	O
COLOR_HBUTTONS	int
]	O
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"FG_COLOR_BUT = %d\n"	pointer
,	O
FG_COLOR	array
[	O
COLOR_BUTTONS	int
]	O
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"BG_COLOR_WIN = %d\n"	pointer
,	O
BG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"BG_COLOR_HLT = %d\n"	pointer
,	O
BG_COLOR	array
[	O
COLOR_HIGHLIGHT_TEXT	int
]	O
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"BG_COLOR_MBAR = %d\n"	pointer
,	O
BG_COLOR	array
[	O
COLOR_MENU_BAR	int
]	O
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"BG_COLOR_SBAR = %d\n"	pointer
,	O
BG_COLOR	array
[	O
COLOR_STATUS_BAR	int
]	O
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"BG_COLOR_HBUT = %d\n"	pointer
,	O
BG_COLOR	array
[	O
COLOR_HBUTTONS	int
]	O
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"BG_COLOR_BUT = %d\n\n"	pointer
,	O
BG_COLOR	array
[	O
COLOR_BUTTONS	int
]	O
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"#GnuDOS Level\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"GNU_DOS_LEVEL = %d\n"	pointer
,	O
GNU_DOS_LEVEL	int
)	O
;	O
fclose	function
(	O
config_file	pointer
)	O
;	O
free	function
(	O
config_file_name	pointer
)	O
;	O
refreshFileView	function
(	O
)	O
;	O
refreshDirView	function
(	O
)	O
;	O
return	O
;	O
}	O
void	O
optionsMenu_Properties	function
(	O
)	O
{	O
showPropertiesDialog	function
(	O
)	O
;	O
setScreenColors	function
(	O
FG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
,	O
BG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
)	O
;	O
scanDir	function
(	O
cwd	short
)	O
;	O
}	O
