static	O
mp_size_t	long
mpn_rootrem_internal	function
(	O
mp_ptr	pointer
,	O
mp_ptr	pointer
,	O
mp_srcptr	pointer
,	O
mp_size_t	long
,	O
mp_limb_t	long
,	O
int	O
)	O
;	O
mp_size_t	long
mpn_rootrem	O
(	O
mp_ptr	pointer
rootp	pointer
,	O
mp_ptr	pointer
remp	pointer
,	O
mp_srcptr	pointer
up	pointer
,	O
mp_size_t	long
un	long
,	O
mp_limb_t	long
k	int
)	O
{	O
mp_size_t	long
m	long
;	O
ASSERT	O
(	O
un	long
>	O
0	int
)	O
;	O
ASSERT	O
(	O
up	pointer
[	O
un	long
-	O
1	int
]	O
!=	O
0	int
)	O
;	O
ASSERT	O
(	O
k	int
>	O
1	int
)	O
;	O
m	long
=	O
(	O
un	long
-	O
1	int
)	O
/	O
k	int
;	O
if	O
(	O
remp	pointer
==	O
NULL	O
&&	O
m	long
>	O
2	int
)	O
{	O
mp_ptr	pointer
sp	pointer
,	O
wp	pointer
;	O
mp_size_t	long
rn	long
,	O
sn	long
,	O
wn	long
;	O
TMP_DECL	O
;	O
TMP_MARK	O
;	O
wn	long
=	O
un	long
+	O
k	int
;	O
wp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
wn	long
)	O
;	O
sn	long
=	O
m	long
+	O
2	int
;	O
sp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
sn	long
)	O
;	O
MPN_COPY	O
(	O
wp	pointer
+	O
k	int
,	O
up	pointer
,	O
un	long
)	O
;	O
MPN_ZERO	O
(	O
wp	pointer
,	O
k	int
)	O
;	O
rn	long
=	O
mpn_rootrem_internal	function
(	O
sp	pointer
,	O
NULL	O
,	O
wp	pointer
,	O
wn	long
,	O
k	int
,	O
1	int
)	O
;	O
MPN_COPY	O
(	O
rootp	pointer
,	O
sp	pointer
+	O
1	int
,	O
sn	long
-	O
1	int
)	O
;	O
TMP_FREE	O
;	O
return	O
rn	long
;	O
}	O
else	O
{	O
return	O
mpn_rootrem_internal	function
(	O
rootp	pointer
,	O
remp	pointer
,	O
up	pointer
,	O
un	long
,	O
k	int
,	O
0	int
)	O
;	O
}	O
}	O
static	O
mp_size_t	long
mpn_rootrem_internal	function
(	O
mp_ptr	pointer
rootp	pointer
,	O
mp_ptr	pointer
remp	pointer
,	O
mp_srcptr	pointer
up	pointer
,	O
mp_size_t	long
un	long
,	O
mp_limb_t	long
k	int
,	O
int	O
approx	int
)	O
{	O
mp_ptr	pointer
qp	pointer
,	O
rp	pointer
,	O
sp	pointer
,	O
wp	pointer
,	O
scratch	pointer
;	O
mp_size_t	long
qn	long
,	O
rn	long
,	O
sn	long
,	O
wn	long
,	O
nl	long
,	O
bn	long
;	O
mp_limb_t	long
save	long
,	O
save2	long
,	O
cy	long
;	O
unsigned	O
long	O
int	O
unb	long
;	O
unsigned	O
long	O
int	O
xnb	long
;	O
unsigned	O
long	O
b	int
,	O
kk	long
;	O
unsigned	O
long	O
sizes	array
[	O
GMP_NUMB_BITS	O
+	O
1	int
]	O
;	O
int	O
ni	int
,	O
i	long
;	O
int	O
c	int
;	O
int	O
logk	int
;	O
TMP_DECL	O
;	O
TMP_MARK	O
;	O
if	O
(	O
remp	pointer
==	O
NULL	O
)	O
{	O
rp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
un	long
+	O
1	int
)	O
;	O
scratch	pointer
=	O
rp	pointer
;	O
}	O
else	O
{	O
scratch	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
un	long
+	O
1	int
)	O
;	O
rp	pointer
=	O
remp	pointer
;	O
}	O
sp	pointer
=	O
rootp	pointer
;	O
MPN_SIZEINBASE_2EXP	O
(	O
unb	long
,	O
up	pointer
,	O
un	long
,	O
1	int
)	O
;	O
xnb	long
=	O
(	O
unb	long
-	O
1	int
)	O
/	O
k	int
+	O
1	int
;	O
if	O
(	O
xnb	long
==	O
1	int
)	O
{	O
if	O
(	O
remp	pointer
==	O
NULL	O
)	O
remp	pointer
=	O
rp	pointer
;	O
mpn_sub_1	O
(	O
remp	pointer
,	O
up	pointer
,	O
un	long
,	O
(	O
mp_limb_t	long
)	O
1	int
)	O
;	O
MPN_NORMALIZE	O
(	O
remp	pointer
,	O
un	long
)	O
;	O
rootp	pointer
[	O
0	int
]	O
=	O
1	int
;	O
TMP_FREE	O
;	O
return	O
un	long
;	O
}	O
kk	long
=	O
k	int
*	O
(	O
xnb	long
-	O
1	int
)	O
;	O
rn	long
=	O
un	long
-	O
kk	long
/	O
GMP_NUMB_BITS	O
;	O
MPN_RSHIFT	O
(	O
cy	long
,	O
rp	pointer
,	O
up	pointer
+	O
kk	long
/	O
GMP_NUMB_BITS	O
,	O
rn	long
,	O
kk	long
%	O
GMP_NUMB_BITS	O
)	O
;	O
mpn_sub_1	O
(	O
rp	pointer
,	O
rp	pointer
,	O
rn	long
,	O
1	int
)	O
;	O
sp	pointer
[	O
0	int
]	O
=	O
1	int
;	O
sn	long
=	O
1	int
;	O
for	O
(	O
logk	int
=	O
1	int
;	O
(	O
(	O
k	int
-	O
1	int
)	O
>>	O
logk	int
)	O
!=	O
0	int
;	O
logk	int
++	O
)	O
;	O
b	int
=	O
xnb	long
-	O
1	int
;	O
ni	int
=	O
0	int
;	O
while	O
(	O
b	int
!=	O
0	int
)	O
{	O
sizes	array
[	O
ni	int
]	O
=	O
b	int
;	O
b	int
=	O
(	O
b	int
+	O
logk	int
+	O
1	int
)	O
/	O
2	int
;	O
if	O
(	O
b	int
>=	O
sizes	array
[	O
ni	int
]	O
)	O
b	int
=	O
sizes	array
[	O
ni	int
]	O
-	O
1	int
;	O
ni	int
++	O
;	O
}	O
sizes	array
[	O
ni	int
]	O
=	O
0	int
;	O
ASSERT_ALWAYS	O
(	O
ni	int
<	O
GMP_NUMB_BITS	O
+	O
1	int
)	O
;	O
qp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
un	long
+	O
EXTRA	O
)	O
;	O
wp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
un	long
+	O
EXTRA	O
)	O
;	O
wp	pointer
[	O
0	int
]	O
=	O
1	int
;	O
wn	long
=	O
1	int
;	O
for	O
(	O
i	long
=	O
ni	int
;	O
i	long
!=	O
0	int
;	O
i	long
--	O
)	O
{	O
b	int
=	O
sizes	array
[	O
i	long
-	O
1	int
]	O
-	O
sizes	array
[	O
i	long
]	O
;	O
if	O
(	O
rn	long
==	O
0	int
)	O
{	O
rp	pointer
[	O
0	int
]	O
=	O
0	int
;	O
rn	long
=	O
1	int
;	O
}	O
MPN_LSHIFT	O
(	O
cy	long
,	O
rp	pointer
+	O
b	int
/	O
GMP_NUMB_BITS	O
,	O
rp	pointer
,	O
rn	long
,	O
b	int
%	O
GMP_NUMB_BITS	O
)	O
;	O
rn	long
=	O
rn	long
+	O
b	int
/	O
GMP_NUMB_BITS	O
;	O
if	O
(	O
cy	long
!=	O
0	int
)	O
{	O
rp	pointer
[	O
rn	long
]	O
=	O
cy	long
;	O
rn	long
++	O
;	O
}	O
kk	long
=	O
kk	long
-	O
b	int
;	O
bn	long
=	O
b	int
/	O
GMP_NUMB_BITS	O
;	O
save	long
=	O
rp	pointer
[	O
bn	long
]	O
;	O
nl	long
=	O
1	int
+	O
(	O
kk	long
+	O
b	int
-	O
1	int
)	O
/	O
GMP_NUMB_BITS	O
-	O
(	O
kk	long
/	O
GMP_NUMB_BITS	O
)	O
;	O
if	O
(	O
nl	long
-	O
1	int
>	O
bn	long
)	O
save2	long
=	O
rp	pointer
[	O
bn	long
+	O
1	int
]	O
;	O
MPN_RSHIFT	O
(	O
cy	long
,	O
rp	pointer
,	O
up	pointer
+	O
kk	long
/	O
GMP_NUMB_BITS	O
,	O
nl	long
,	O
kk	long
%	O
GMP_NUMB_BITS	O
)	O
;	O
rp	pointer
[	O
bn	long
]	O
&=	O
(	O
(	O
mp_limb_t	long
)	O
1	int
<<	O
(	O
b	int
%	O
GMP_NUMB_BITS	O
)	O
)	O
-	O
1	int
;	O
rp	pointer
[	O
bn	long
]	O
|=	O
save	long
;	O
if	O
(	O
nl	long
-	O
1	int
>	O
bn	long
)	O
rp	pointer
[	O
bn	long
+	O
1	int
]	O
=	O
save2	long
;	O
cy	long
=	O
mpn_mul_1	O
(	O
wp	pointer
,	O
wp	pointer
,	O
wn	long
,	O
k	int
)	O
;	O
wp	pointer
[	O
wn	long
]	O
=	O
cy	long
;	O
wn	long
+=	O
cy	long
!=	O
0	int
;	O
if	O
(	O
rn	long
<	O
wn	long
)	O
{	O
qn	long
=	O
0	int
;	O
}	O
else	O
{	O
qn	long
=	O
rn	long
-	O
wn	long
;	O
mpn_div_q	O
(	O
qp	pointer
,	O
rp	pointer
,	O
rn	long
,	O
wp	pointer
,	O
wn	long
,	O
scratch	pointer
)	O
;	O
qn	long
+=	O
qp	pointer
[	O
qn	long
]	O
!=	O
0	int
;	O
}	O
bn	long
=	O
(	O
b	int
-	O
1	int
)	O
/	O
GMP_NUMB_BITS	O
+	O
1	int
;	O
if	O
(	O
qn	long
>	O
bn	long
||	O
(	O
qn	long
==	O
bn	long
&&	O
(	O
b	int
%	O
GMP_NUMB_BITS	O
!=	O
0	int
)	O
&&	O
qp	pointer
[	O
qn	long
-	O
1	int
]	O
>=	O
(	O
(	O
mp_limb_t	long
)	O
1	int
<<	O
(	O
b	int
%	O
GMP_NUMB_BITS	O
)	O
)	O
)	O
)	O
{	O
qn	long
=	O
b	int
/	O
GMP_NUMB_BITS	O
+	O
1	int
;	O
MPN_ZERO	O
(	O
qp	pointer
,	O
qn	long
)	O
;	O
qp	pointer
[	O
qn	long
-	O
1	int
]	O
=	O
(	O
mp_limb_t	long
)	O
1	int
<<	O
(	O
b	int
%	O
GMP_NUMB_BITS	O
)	O
;	O
MPN_DECR_U	O
(	O
qp	pointer
,	O
qn	long
,	O
1	int
)	O
;	O
qn	long
-=	O
qp	pointer
[	O
qn	long
-	O
1	int
]	O
==	O
0	int
;	O
}	O
MPN_LSHIFT	O
(	O
cy	long
,	O
sp	pointer
+	O
b	int
/	O
GMP_NUMB_BITS	O
,	O
sp	pointer
,	O
sn	long
,	O
b	int
%	O
GMP_NUMB_BITS	O
)	O
;	O
sn	long
=	O
sn	long
+	O
b	int
/	O
GMP_NUMB_BITS	O
;	O
if	O
(	O
cy	long
!=	O
0	int
)	O
{	O
sp	pointer
[	O
sn	long
]	O
=	O
cy	long
;	O
sn	long
++	O
;	O
}	O
ASSERT_ALWAYS	O
(	O
bn	long
>=	O
qn	long
)	O
;	O
save	long
=	O
sp	pointer
[	O
b	int
/	O
GMP_NUMB_BITS	O
]	O
;	O
MPN_COPY	O
(	O
sp	pointer
,	O
qp	pointer
,	O
qn	long
)	O
;	O
MPN_ZERO	O
(	O
sp	pointer
+	O
qn	long
,	O
bn	long
-	O
qn	long
)	O
;	O
sp	pointer
[	O
b	int
/	O
GMP_NUMB_BITS	O
]	O
|=	O
save	long
;	O
kk	long
-=	O
(	O
k	int
-	O
1	int
)	O
*	O
b	int
;	O
MPN_RSHIFT	O
(	O
cy	long
,	O
rp	pointer
,	O
up	pointer
+	O
kk	long
/	O
GMP_NUMB_BITS	O
,	O
un	long
-	O
kk	long
/	O
GMP_NUMB_BITS	O
,	O
kk	long
%	O
GMP_NUMB_BITS	O
)	O
;	O
rn	long
=	O
un	long
-	O
kk	long
/	O
GMP_NUMB_BITS	O
;	O
rn	long
-=	O
rp	pointer
[	O
rn	long
-	O
1	int
]	O
==	O
0	int
;	O
for	O
(	O
c	int
=	O
0	int
;	O
;	O
c	int
++	O
)	O
{	O
if	O
(	O
i	long
==	O
1	int
)	O
{	O
approx	int
=	O
approx	int
&&	O
(	O
sp	pointer
[	O
0	int
]	O
>	O
1	int
)	O
;	O
qn	long
=	O
(	O
approx	int
==	O
0	int
)	O
?	O
mpn_pow_1	O
(	O
qp	pointer
,	O
sp	pointer
,	O
sn	long
,	O
k	int
,	O
wp	pointer
)	O
:	O
0	int
;	O
}	O
else	O
{	O
wn	long
=	O
mpn_pow_1	O
(	O
wp	pointer
,	O
sp	pointer
,	O
sn	long
,	O
k	int
-	O
1	int
,	O
qp	pointer
)	O
;	O
mpn_mul	O
(	O
qp	pointer
,	O
wp	pointer
,	O
wn	long
,	O
sp	pointer
,	O
sn	long
)	O
;	O
qn	long
=	O
wn	long
+	O
sn	long
;	O
qn	long
-=	O
qp	pointer
[	O
qn	long
-	O
1	int
]	O
==	O
0	int
;	O
}	O
if	O
(	O
qn	long
>	O
rn	long
||	O
(	O
qn	long
==	O
rn	long
&&	O
mpn_cmp	O
(	O
qp	pointer
,	O
rp	pointer
,	O
rn	long
)	O
>	O
0	int
)	O
)	O
MPN_DECR_U	O
(	O
sp	pointer
,	O
sn	long
,	O
1	int
)	O
;	O
else	O
break	O
;	O
}	O
ASSERT_ALWAYS	O
(	O
c	int
<=	O
1	int
)	O
;	O
ASSERT_ALWAYS	O
(	O
rn	long
>=	O
qn	long
)	O
;	O
if	O
(	O
i	long
>	O
1	int
||	O
approx	int
==	O
0	int
)	O
{	O
mpn_sub	O
(	O
rp	pointer
,	O
rp	pointer
,	O
rn	long
,	O
qp	pointer
,	O
qn	long
)	O
;	O
MPN_NORMALIZE	O
(	O
rp	pointer
,	O
rn	long
)	O
;	O
}	O
}	O
TMP_FREE	O
;	O
return	O
rn	long
;	O
}	O
