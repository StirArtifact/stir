int	O
gsl_sf_hyperg_1F1_series_e	function
(	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
double	O
an	double
=	O
a	double
;	O
double	O
bn	double
=	O
b	double
;	O
double	O
n	int
=	O
1.0	int
;	O
double	O
del	double
=	O
1.0	int
;	O
double	O
abs_del	double
=	O
1.0	int
;	O
double	O
max_abs_del	double
=	O
1.0	int
;	O
double	O
sum_val	double
=	O
1.0	int
;	O
double	O
sum_err	double
=	O
0.0	int
;	O
while	O
(	O
abs_del	double
/	O
fabs	function
(	O
sum_val	double
)	O
>	O
0.25	int
*	O
GSL_DBL_EPSILON	int
)	O
{	O
double	O
u	double
,	O
abs_u	double
;	O
if	O
(	O
bn	double
==	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
if	O
(	O
an	double
==	O
0.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
sum_val	double
;	O
result	pointer
->	O
err	double
=	O
sum_err	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
n	int
*	O
fabs	function
(	O
sum_val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
if	O
(	O
n	int
>	O
10000.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
sum_val	double
;	O
result	pointer
->	O
err	double
=	O
sum_err	double
;	O
GSL_ERROR	O
(	O
"hypergeometric series failed to converge"	pointer
,	O
GSL_EFAILED	int
)	O
;	O
}	O
u	double
=	O
x	double
*	O
(	O
an	double
/	O
(	O
bn	double
*	O
n	int
)	O
)	O
;	O
abs_u	double
=	O
fabs	function
(	O
u	double
)	O
;	O
if	O
(	O
abs_u	double
>	O
1.0	int
&&	O
max_abs_del	double
>	O
GSL_DBL_MAX	int
/	O
abs_u	double
)	O
{	O
result	pointer
->	O
val	double
=	O
sum_val	double
;	O
result	pointer
->	O
err	double
=	O
fabs	function
(	O
sum_val	double
)	O
;	O
GSL_ERROR	O
(	O
"overflow"	pointer
,	O
GSL_EOVRFLW	int
)	O
;	O
}	O
del	double
*=	O
u	double
;	O
sum_val	double
+=	O
del	double
;	O
if	O
(	O
fabs	function
(	O
sum_val	double
)	O
>	O
SUM_LARGE	O
)	O
{	O
result	pointer
->	O
val	double
=	O
sum_val	double
;	O
result	pointer
->	O
err	double
=	O
fabs	function
(	O
sum_val	double
)	O
;	O
GSL_ERROR	O
(	O
"overflow"	pointer
,	O
GSL_EOVRFLW	int
)	O
;	O
}	O
abs_del	double
=	O
fabs	function
(	O
del	double
)	O
;	O
max_abs_del	double
=	O
GSL_MAX_DBL	function
(	O
abs_del	double
,	O
max_abs_del	double
)	O
;	O
sum_err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
abs_del	double
;	O
an	double
+=	O
1.0	int
;	O
bn	double
+=	O
1.0	int
;	O
n	int
+=	O
1.0	int
;	O
}	O
result	pointer
->	O
val	double
=	O
sum_val	double
;	O
result	pointer
->	O
err	double
=	O
sum_err	double
;	O
result	pointer
->	O
err	double
+=	O
abs_del	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
n	int
*	O
fabs	function
(	O
sum_val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_sf_hyperg_1F1_large_b_e	function
(	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
fabs	function
(	O
x	double
/	O
b	double
)	O
<	O
1.0	int
)	O
{	O
const	O
double	O
u	double
=	O
x	double
/	O
b	double
;	O
const	O
double	O
v	double
=	O
1.0	int
/	O
(	O
1.0	int
-	O
u	double
)	O
;	O
const	O
double	O
pre	double
=	O
pow	function
(	O
v	double
,	O
a	double
)	O
;	O
const	O
double	O
uv	double
=	O
u	double
*	O
v	double
;	O
const	O
double	O
uv2	double
=	O
uv	double
*	O
uv	double
;	O
const	O
double	O
t1	double
=	O
a	double
*	O
(	O
a	double
+	O
1.0	int
)	O
/	O
(	O
2.0	int
*	O
b	double
)	O
*	O
uv2	double
;	O
const	O
double	O
t2a	double
=	O
a	double
*	O
(	O
a	double
+	O
1.0	int
)	O
/	O
(	O
24.0	int
*	O
b	double
*	O
b	double
)	O
*	O
uv2	double
;	O
const	O
double	O
t2b	double
=	O
12.0	int
+	O
16.0	int
*	O
(	O
a	double
+	O
2.0	int
)	O
*	O
uv	double
+	O
3.0	int
*	O
(	O
a	double
+	O
2.0	int
)	O
*	O
(	O
a	double
+	O
3.0	int
)	O
*	O
uv2	double
;	O
const	O
double	O
t2	double
=	O
t2a	double
*	O
t2b	double
;	O
result	pointer
->	O
val	double
=	O
pre	double
*	O
(	O
1.0	int
-	O
t1	double
+	O
t2	double
)	O
;	O
result	pointer
->	O
err	double
=	O
pre	double
*	O
GSL_DBL_EPSILON	int
*	O
(	O
1.0	int
+	O
fabs	function
(	O
t1	double
)	O
+	O
fabs	function
(	O
t2	double
)	O
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
}	O
int	O
gsl_sf_hyperg_U_large_b_e	function
(	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
,	O
double	O
*	O
ln_multiplier	pointer
)	O
{	O
double	O
N	double
=	O
floor	function
(	O
b	double
)	O
;	O
double	O
eps	double
=	O
b	double
-	O
N	double
;	O
if	O
(	O
fabs	function
(	O
eps	double
)	O
<	O
GSL_SQRT_DBL_EPSILON	int
)	O
{	O
double	O
lnpre_val	double
;	O
double	O
lnpre_err	double
;	O
gsl_sf_result	struct
M	struct
;	O
if	O
(	O
b	double
>	O
1.0	int
)	O
{	O
double	O
tmp	double
=	O
(	O
1.0	int
-	O
b	double
)	O
*	O
log	function
(	O
x	double
)	O
;	O
gsl_sf_result	struct
lg_bm1	struct
;	O
gsl_sf_result	struct
lg_a	struct
;	O
gsl_sf_lngamma_e	function
(	O
b	double
-	O
1.0	int
,	O
&	O
lg_bm1	struct
)	O
;	O
gsl_sf_lngamma_e	function
(	O
a	double
,	O
&	O
lg_a	struct
)	O
;	O
lnpre_val	double
=	O
tmp	double
+	O
x	double
+	O
lg_bm1	struct
.	O
val	double
-	O
lg_a	struct
.	O
val	double
;	O
lnpre_err	double
=	O
lg_bm1	struct
.	O
err	double
+	O
lg_a	struct
.	O
err	double
+	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
x	double
)	O
+	O
fabs	function
(	O
tmp	double
)	O
)	O
;	O
gsl_sf_hyperg_1F1_large_b_e	function
(	O
1.0	int
-	O
a	double
,	O
2.0	int
-	O
b	double
,	O
-	O
x	double
,	O
&	O
M	struct
)	O
;	O
}	O
else	O
{	O
gsl_sf_result	struct
lg_1mb	struct
;	O
gsl_sf_result	struct
lg_1pamb	struct
;	O
gsl_sf_lngamma_e	function
(	O
1.0	int
-	O
b	double
,	O
&	O
lg_1mb	struct
)	O
;	O
gsl_sf_lngamma_e	function
(	O
1.0	int
+	O
a	double
-	O
b	double
,	O
&	O
lg_1pamb	struct
)	O
;	O
lnpre_val	double
=	O
lg_1mb	struct
.	O
val	double
-	O
lg_1pamb	struct
.	O
val	double
;	O
lnpre_err	double
=	O
lg_1mb	struct
.	O
err	double
+	O
lg_1pamb	struct
.	O
err	double
;	O
gsl_sf_hyperg_1F1_large_b_e	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
&	O
M	struct
)	O
;	O
}	O
if	O
(	O
lnpre_val	double
>	O
GSL_LOG_DBL_MAX	int
-	O
10.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
M	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
M	struct
.	O
err	double
;	O
*	O
ln_multiplier	pointer
=	O
lnpre_val	double
;	O
GSL_ERROR	O
(	O
"overflow"	pointer
,	O
GSL_EOVRFLW	int
)	O
;	O
}	O
else	O
{	O
gsl_sf_result	struct
epre	struct
;	O
int	O
stat_e	int
=	O
gsl_sf_exp_err_e	function
(	O
lnpre_val	double
,	O
lnpre_err	double
,	O
&	O
epre	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
epre	struct
.	O
val	double
*	O
M	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
epre	struct
.	O
val	double
*	O
M	struct
.	O
err	double
+	O
epre	struct
.	O
err	double
*	O
fabs	function
(	O
M	struct
.	O
val	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
*	O
ln_multiplier	pointer
=	O
0.0	int
;	O
return	O
stat_e	int
;	O
}	O
}	O
else	O
{	O
double	O
omb_lnx	double
=	O
(	O
1.0	int
-	O
b	double
)	O
*	O
log	function
(	O
x	double
)	O
;	O
gsl_sf_result	struct
lg_1mb	struct
;	O
double	O
sgn_1mb	double
;	O
gsl_sf_result	struct
lg_1pamb	struct
;	O
double	O
sgn_1pamb	double
;	O
gsl_sf_result	struct
lg_bm1	struct
;	O
double	O
sgn_bm1	double
;	O
gsl_sf_result	struct
lg_a	struct
;	O
double	O
sgn_a	double
;	O
gsl_sf_result	struct
M1	struct
,	O
M2	struct
;	O
double	O
lnpre1_val	double
,	O
lnpre2_val	double
;	O
double	O
lnpre1_err	double
,	O
lnpre2_err	double
;	O
double	O
sgpre1	double
,	O
sgpre2	double
;	O
gsl_sf_hyperg_1F1_large_b_e	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
&	O
M1	struct
)	O
;	O
gsl_sf_hyperg_1F1_large_b_e	function
(	O
1.0	int
-	O
a	double
,	O
2.0	int
-	O
b	double
,	O
x	double
,	O
&	O
M2	struct
)	O
;	O
gsl_sf_lngamma_sgn_e	function
(	O
1.0	int
-	O
b	double
,	O
&	O
lg_1mb	struct
,	O
&	O
sgn_1mb	double
)	O
;	O
gsl_sf_lngamma_sgn_e	function
(	O
1.0	int
+	O
a	double
-	O
b	double
,	O
&	O
lg_1pamb	struct
,	O
&	O
sgn_1pamb	double
)	O
;	O
gsl_sf_lngamma_sgn_e	function
(	O
b	double
-	O
1.0	int
,	O
&	O
lg_bm1	struct
,	O
&	O
sgn_bm1	double
)	O
;	O
gsl_sf_lngamma_sgn_e	function
(	O
a	double
,	O
&	O
lg_a	struct
,	O
&	O
sgn_a	double
)	O
;	O
lnpre1_val	double
=	O
lg_1mb	struct
.	O
val	double
-	O
lg_1pamb	struct
.	O
val	double
;	O
lnpre1_err	double
=	O
lg_1mb	struct
.	O
err	double
+	O
lg_1pamb	struct
.	O
err	double
;	O
lnpre2_val	double
=	O
lg_bm1	struct
.	O
val	double
-	O
lg_a	struct
.	O
val	double
-	O
omb_lnx	double
-	O
x	double
;	O
lnpre2_err	double
=	O
lg_bm1	struct
.	O
err	double
+	O
lg_a	struct
.	O
err	double
+	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
omb_lnx	double
)	O
+	O
fabs	function
(	O
x	double
)	O
)	O
;	O
sgpre1	double
=	O
sgn_1mb	double
*	O
sgn_1pamb	double
;	O
sgpre2	double
=	O
sgn_bm1	double
*	O
sgn_a	double
;	O
if	O
(	O
lnpre1_val	double
>	O
GSL_LOG_DBL_MAX	int
-	O
10.0	int
||	O
lnpre2_val	double
>	O
GSL_LOG_DBL_MAX	int
-	O
10.0	int
)	O
{	O
double	O
max_lnpre_val	double
=	O
GSL_MAX	O
(	O
lnpre1_val	double
,	O
lnpre2_val	double
)	O
;	O
double	O
max_lnpre_err	double
=	O
GSL_MAX	O
(	O
lnpre1_err	double
,	O
lnpre2_err	double
)	O
;	O
double	O
lp1	double
=	O
lnpre1_val	double
-	O
max_lnpre_val	double
;	O
double	O
lp2	double
=	O
lnpre2_val	double
-	O
max_lnpre_val	double
;	O
double	O
t1	double
=	O
sgpre1	double
*	O
exp	function
(	O
lp1	double
)	O
;	O
double	O
t2	double
=	O
sgpre2	double
*	O
exp	function
(	O
lp2	double
)	O
;	O
result	pointer
->	O
val	double
=	O
t1	double
*	O
M1	struct
.	O
val	double
+	O
t2	double
*	O
M2	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
fabs	function
(	O
t1	double
)	O
*	O
M1	struct
.	O
err	double
+	O
fabs	function
(	O
t2	double
)	O
*	O
M2	struct
.	O
err	double
;	O
result	pointer
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
exp	function
(	O
max_lnpre_err	double
)	O
*	O
(	O
fabs	function
(	O
t1	double
*	O
M1	struct
.	O
val	double
)	O
+	O
fabs	function
(	O
t2	double
*	O
M2	struct
.	O
val	double
)	O
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
*	O
ln_multiplier	pointer
=	O
max_lnpre_val	double
;	O
GSL_ERROR	O
(	O
"overflow"	pointer
,	O
GSL_EOVRFLW	int
)	O
;	O
}	O
else	O
{	O
double	O
t1	double
=	O
sgpre1	double
*	O
exp	function
(	O
lnpre1_val	double
)	O
;	O
double	O
t2	double
=	O
sgpre2	double
*	O
exp	function
(	O
lnpre2_val	double
)	O
;	O
result	pointer
->	O
val	double
=	O
t1	double
*	O
M1	struct
.	O
val	double
+	O
t2	double
*	O
M2	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
fabs	function
(	O
t1	double
)	O
*	O
M1	struct
.	O
err	double
+	O
fabs	function
(	O
t2	double
)	O
*	O
M2	struct
.	O
err	double
;	O
result	pointer
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
(	O
exp	function
(	O
lnpre1_err	double
)	O
*	O
fabs	function
(	O
t1	double
*	O
M1	struct
.	O
val	double
)	O
+	O
exp	function
(	O
lnpre2_err	double
)	O
*	O
fabs	function
(	O
t2	double
*	O
M2	struct
.	O
val	double
)	O
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
*	O
ln_multiplier	pointer
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
}	O
int	O
gsl_sf_hyperg_2F0_series_e	function
(	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
,	O
const	O
double	O
x	double
,	O
int	O
n_trunc	int
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
int	O
maxiter	int
=	O
2000	int
;	O
double	O
an	double
=	O
a	double
;	O
double	O
bn	double
=	O
b	double
;	O
double	O
n	int
=	O
1.0	int
;	O
double	O
sum	double
=	O
1.0	int
;	O
double	O
del	double
=	O
1.0	int
;	O
double	O
abs_del	double
=	O
1.0	int
;	O
double	O
max_abs_del	double
=	O
1.0	int
;	O
double	O
last_abs_del	double
=	O
1.0	int
;	O
while	O
(	O
abs_del	double
/	O
fabs	function
(	O
sum	double
)	O
>	O
GSL_DBL_EPSILON	int
&&	O
n	int
<	O
maxiter	int
)	O
{	O
double	O
u	double
=	O
an	double
*	O
(	O
bn	double
/	O
n	int
*	O
x	double
)	O
;	O
double	O
abs_u	double
=	O
fabs	function
(	O
u	double
)	O
;	O
if	O
(	O
abs_u	double
>	O
1.0	int
&&	O
(	O
max_abs_del	double
>	O
GSL_DBL_MAX	int
/	O
abs_u	double
)	O
)	O
{	O
result	pointer
->	O
val	double
=	O
sum	double
;	O
result	pointer
->	O
err	double
=	O
fabs	function
(	O
sum	double
)	O
;	O
GSL_ERROR	O
(	O
"overflow"	pointer
,	O
GSL_EOVRFLW	int
)	O
;	O
}	O
del	double
*=	O
u	double
;	O
sum	double
+=	O
del	double
;	O
abs_del	double
=	O
fabs	function
(	O
del	double
)	O
;	O
if	O
(	O
abs_del	double
>	O
last_abs_del	double
)	O
break	O
;	O
last_abs_del	double
=	O
abs_del	double
;	O
max_abs_del	double
=	O
GSL_MAX	O
(	O
abs_del	double
,	O
max_abs_del	double
)	O
;	O
an	double
+=	O
1.0	int
;	O
bn	double
+=	O
1.0	int
;	O
n	int
+=	O
1.0	int
;	O
if	O
(	O
an	double
==	O
0.0	int
||	O
bn	double
==	O
0.0	int
)	O
break	O
;	O
if	O
(	O
n_trunc	int
>=	O
0	int
&&	O
n	int
>=	O
n_trunc	int
)	O
break	O
;	O
}	O
result	pointer
->	O
val	double
=	O
sum	double
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
n	int
+	O
abs_del	double
;	O
if	O
(	O
n	int
>=	O
maxiter	int
)	O
GSL_ERROR	O
(	O
"error"	pointer
,	O
GSL_EMAXITER	int
)	O
;	O
else	O
return	O
GSL_SUCCESS	int
;	O
}	O
