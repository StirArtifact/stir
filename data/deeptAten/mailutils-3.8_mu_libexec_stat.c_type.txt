char	O
stat_docstring	array
[	O
]	O
=	O
N_	O
(	O
"display mailbox status"	pointer
)	O
;	O
char	O
stat_args_doc	array
[	O
]	O
=	O
N_	O
(	O
"[MAILBOX]"	pointer
)	O
;	O
char	O
*	O
format_string	pointer
=	O
"%:t\n%:p\n%:U\n%:s\n%:c\n%:r\n%:u\n%:v\n%:n\n%:A\n"	pointer
;	O
static	O
struct	O
mu_option	struct
stat_options	array
[	O
]	O
=	O
{	O
{	O
"format"	pointer
,	O
'c'	O
,	O
N_	O
(	O
"STRING"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"defines output format"	pointer
)	O
,	O
mu_c_string	int
,	O
&	O
format_string	pointer
}	O
,	O
MU_OPTION_END	O
}	O
;	O
PR_C	O
(	O
c_string	pointer
,	O
"%s"	pointer
)	O
PR_C	O
(	O
c_short	short
,	O
"%hd"	pointer
)	O
PR_C	O
(	O
c_ushort	short
,	O
"%hu"	pointer
)	O
PR_C	O
(	O
c_int	int
,	O
"%d"	pointer
)	O
PR_C	O
(	O
c_uint	int
,	O
"%u"	pointer
)	O
PR_C	O
(	O
c_long	long
,	O
"%ld"	pointer
)	O
PR_C	O
(	O
c_ulong	long
,	O
"%lu"	pointer
)	O
PR_C	O
(	O
c_size	long
,	O
"%zu"	pointer
)	O
PR_C	O
(	O
c_off	long
,	O
"%"	pointer
MU_PRI_OFF_T	pointer
)	O
static	O
void	O
pr_c_time	function
(	O
mu_c_storage_t	union
*	O
stor	pointer
)	O
{	O
mu_printf	function
(	O
"%lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
stor	pointer
->	O
c_time	long
)	O
;	O
}	O
static	O
void	O
pr_c_time_h	function
(	O
mu_c_storage_t	union
*	O
stor	pointer
)	O
{	O
struct	O
tm	struct
*	O
tm	struct
=	O
localtime	function
(	O
&	O
stor	pointer
->	O
c_time	long
)	O
;	O
mu_c_streamftime	function
(	O
mu_strout	pointer
,	O
"%Y-%m-%d %H:%M:%S %Z"	pointer
,	O
tm	struct
,	O
NULL	O
)	O
;	O
}	O
static	O
void	O
(	O
*	O
c_fmt	array
[	O
]	O
)	O
(	O
mu_c_storage_t	union
*	O
stor	pointer
)	O
=	O
{	O
D	O
(	O
c_string	pointer
)	O
,	O
D	O
(	O
c_short	short
)	O
,	O
D	O
(	O
c_ushort	short
)	O
,	O
D	O
(	O
c_int	int
)	O
,	O
D	O
(	O
c_uint	int
)	O
,	O
D	O
(	O
c_long	long
)	O
,	O
D	O
(	O
c_ulong	long
)	O
,	O
D	O
(	O
c_size	long
)	O
,	O
D	O
(	O
c_off	long
)	O
,	O
D	O
(	O
c_time	long
)	O
}	O
;	O
static	O
void	O
mu_c_output	function
(	O
mu_c_type_t	enum
type	int
,	O
mu_c_storage_t	union
*	O
cstor	pointer
)	O
{	O
if	O
(	O
c_fmt	array
[	O
type	int
]	O
)	O
c_fmt	array
[	O
type	int
]	O
(	O
cstor	pointer
)	O
;	O
else	O
abort	function
(	O
)	O
;	O
}	O
struct	O
mbox_property	struct
{	O
char	O
fmt	pointer
;	O
char	O
*	O
title	pointer
;	O
mu_c_type_t	enum
type	int
;	O
int	O
(	O
*	O
fun	pointer
)	O
(	O
mu_mailbox_t	pointer
,	O
char	O
const	O
*	O
,	O
mu_c_storage_t	union
*	O
)	O
;	O
void	O
(	O
*	O
prt	pointer
)	O
(	O
mu_c_storage_t	union
*	O
stor	pointer
)	O
;	O
}	O
;	O
static	O
int	O
get_type	function
(	O
mu_mailbox_t	pointer
,	O
char	O
const	O
*	O
,	O
mu_c_storage_t	union
*	O
)	O
;	O
static	O
int	O
get_path	function
(	O
mu_mailbox_t	pointer
,	O
char	O
const	O
*	O
,	O
mu_c_storage_t	union
*	O
)	O
;	O
static	O
int	O
get_url	function
(	O
mu_mailbox_t	pointer
,	O
char	O
const	O
*	O
,	O
mu_c_storage_t	union
*	O
)	O
;	O
static	O
int	O
get_size	function
(	O
mu_mailbox_t	pointer
,	O
char	O
const	O
*	O
,	O
mu_c_storage_t	union
*	O
)	O
;	O
static	O
int	O
get_count	function
(	O
mu_mailbox_t	pointer
,	O
char	O
const	O
*	O
,	O
mu_c_storage_t	union
*	O
)	O
;	O
static	O
int	O
get_recent	function
(	O
mu_mailbox_t	pointer
,	O
char	O
const	O
*	O
,	O
mu_c_storage_t	union
*	O
)	O
;	O
static	O
int	O
get_unseen	function
(	O
mu_mailbox_t	pointer
,	O
char	O
const	O
*	O
,	O
mu_c_storage_t	union
*	O
)	O
;	O
static	O
int	O
get_uidvalidity	function
(	O
mu_mailbox_t	pointer
,	O
char	O
const	O
*	O
,	O
mu_c_storage_t	union
*	O
)	O
;	O
static	O
int	O
get_uidnext	function
(	O
mu_mailbox_t	pointer
,	O
char	O
const	O
*	O
,	O
mu_c_storage_t	union
*	O
)	O
;	O
static	O
int	O
get_atime	function
(	O
mu_mailbox_t	pointer
,	O
char	O
const	O
*	O
,	O
mu_c_storage_t	union
*	O
)	O
;	O
static	O
int	O
get_name	function
(	O
mu_mailbox_t	pointer
,	O
char	O
const	O
*	O
,	O
mu_c_storage_t	union
*	O
)	O
;	O
static	O
struct	O
mbox_property	struct
proptab	array
[	O
]	O
=	O
{	O
{	O
't'	O
,	O
N_	O
(	O
"type"	pointer
)	O
,	O
mu_c_string	int
,	O
get_type	function
}	O
,	O
{	O
'p'	O
,	O
N_	O
(	O
"path"	pointer
)	O
,	O
mu_c_string	int
,	O
get_path	function
}	O
,	O
{	O
'U'	O
,	O
N_	O
(	O
"URL"	pointer
)	O
,	O
mu_c_string	int
,	O
get_url	function
}	O
,	O
{	O
's'	O
,	O
N_	O
(	O
"size"	pointer
)	O
,	O
mu_c_off	int
,	O
get_size	function
}	O
,	O
{	O
'c'	O
,	O
N_	O
(	O
"messages"	pointer
)	O
,	O
mu_c_size	int
,	O
get_count	function
}	O
,	O
{	O
'r'	O
,	O
N_	O
(	O
"recent messages"	pointer
)	O
,	O
mu_c_size	int
,	O
get_recent	function
}	O
,	O
{	O
'u'	O
,	O
N_	O
(	O
"first unseen"	pointer
)	O
,	O
mu_c_size	int
,	O
get_unseen	function
}	O
,	O
{	O
'v'	O
,	O
N_	O
(	O
"uidvalidity"	pointer
)	O
,	O
mu_c_ulong	int
,	O
get_uidvalidity	function
}	O
,	O
{	O
'n'	O
,	O
N_	O
(	O
"next uid"	pointer
)	O
,	O
mu_c_size	int
,	O
get_uidnext	function
}	O
,	O
{	O
'a'	O
,	O
N_	O
(	O
"access"	pointer
)	O
,	O
mu_c_time	int
,	O
get_atime	function
}	O
,	O
{	O
'A'	O
,	O
N_	O
(	O
"access"	pointer
)	O
,	O
mu_c_time	int
,	O
get_atime	function
,	O
pr_c_time_h	function
}	O
,	O
{	O
'f'	O
,	O
N_	O
(	O
"name"	pointer
)	O
,	O
mu_c_string	int
,	O
get_name	function
}	O
,	O
{	O
0	int
}	O
}	O
;	O
static	O
struct	O
mbox_property	struct
*	O
propfmt	function
(	O
int	O
fmt	pointer
)	O
{	O
struct	O
mbox_property	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
proptab	array
;	O
p	pointer
->	O
fmt	pointer
;	O
p	pointer
++	O
)	O
if	O
(	O
p	pointer
->	O
fmt	pointer
==	O
fmt	pointer
)	O
return	O
p	pointer
;	O
return	O
NULL	O
;	O
}	O
static	O
char	O
const	O
*	O
fmtspec	function
(	O
char	O
const	O
*	O
fmt	pointer
,	O
mu_mailbox_t	pointer
mbx	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
int	O
c	char
;	O
int	O
title	pointer
=	O
0	int
;	O
struct	O
mbox_property	struct
*	O
prop	pointer
;	O
if	O
(	O
!	O
*	O
++	O
fmt	pointer
)	O
{	O
mu_stream_write	function
(	O
mu_strout	pointer
,	O
fmt	pointer
-	O
1	int
,	O
1	int
,	O
NULL	O
)	O
;	O
return	O
fmt	pointer
;	O
}	O
c	char
=	O
*	O
fmt	pointer
++	O
;	O
if	O
(	O
c	char
==	O
'%'	O
)	O
{	O
mu_stream_write	function
(	O
mu_strout	pointer
,	O
fmt	pointer
-	O
1	int
,	O
1	int
,	O
NULL	O
)	O
;	O
return	O
fmt	pointer
;	O
}	O
if	O
(	O
c	char
==	O
':'	O
)	O
{	O
if	O
(	O
*	O
fmt	pointer
==	O
0	int
)	O
{	O
mu_stream_write	function
(	O
mu_strout	pointer
,	O
fmt	pointer
-	O
2	int
,	O
2	int
,	O
NULL	O
)	O
;	O
return	O
fmt	pointer
;	O
}	O
c	char
=	O
*	O
fmt	pointer
++	O
;	O
title	pointer
=	O
1	int
;	O
}	O
prop	pointer
=	O
propfmt	function
(	O
c	char
)	O
;	O
if	O
(	O
prop	pointer
)	O
{	O
int	O
rc	int
;	O
mu_c_storage_t	union
cstor	pointer
;	O
if	O
(	O
title	pointer
)	O
mu_printf	function
(	O
"%s: "	pointer
,	O
gettext	function
(	O
prop	pointer
->	O
title	pointer
)	O
)	O
;	O
rc	int
=	O
prop	pointer
->	O
fun	pointer
(	O
mbx	pointer
,	O
name	pointer
,	O
&	O
cstor	pointer
)	O
;	O
switch	O
(	O
rc	int
)	O
{	O
case	O
0	int
:	O
if	O
(	O
prop	pointer
->	O
prt	pointer
)	O
prop	pointer
->	O
prt	pointer
(	O
&	O
cstor	pointer
)	O
;	O
else	O
mu_c_output	function
(	O
prop	pointer
->	O
type	int
,	O
&	O
cstor	pointer
)	O
;	O
if	O
(	O
prop	pointer
->	O
type	int
==	O
mu_c_string	int
)	O
free	function
(	O
cstor	pointer
.	O
c_string	pointer
)	O
;	O
break	O
;	O
case	O
MU_ERR_EMPTY_VFN	O
:	O
case	O
ENOSYS	int
:	O
mu_printf	function
(	O
_	O
(	O
"N/A"	pointer
)	O
)	O
;	O
break	O
;	O
default	O
:	O
mu_printf	function
(	O
"[%s]"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
}	O
}	O
else	O
mu_stream_write	function
(	O
mu_strout	pointer
,	O
"?"	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
return	O
fmt	pointer
;	O
}	O
void	O
format_stat	function
(	O
char	O
const	O
*	O
fmt	pointer
,	O
mu_mailbox_t	pointer
mbx	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
int	O
c	char
;	O
while	O
(	O
*	O
fmt	pointer
)	O
{	O
switch	O
(	O
*	O
fmt	pointer
)	O
{	O
case	O
'%'	O
:	O
fmt	pointer
=	O
fmtspec	function
(	O
fmt	pointer
,	O
mbx	pointer
,	O
name	pointer
)	O
;	O
break	O
;	O
case	O
'\\'	O
:	O
if	O
(	O
fmt	pointer
[	O
1	int
]	O
&&	O
(	O
c	char
=	O
mu_wordsplit_c_unquote_char	function
(	O
fmt	pointer
[	O
1	int
]	O
)	O
)	O
)	O
{	O
mu_printf	function
(	O
"%c"	pointer
,	O
c	char
)	O
;	O
fmt	pointer
+=	O
2	int
;	O
break	O
;	O
}	O
default	O
:	O
mu_stream_write	function
(	O
mu_strout	pointer
,	O
fmt	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
*	O
fmt	pointer
==	O
'\n'	O
&&	O
fmt	pointer
[	O
1	int
]	O
==	O
0	int
)	O
return	O
;	O
fmt	pointer
++	O
;	O
}	O
}	O
mu_printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
rc	int
;	O
mu_mailbox_t	pointer
mbox	pointer
;	O
const	O
char	O
*	O
name	pointer
;	O
mu_register_all_mbox_formats	O
(	O
)	O
;	O
mu_action_getopt	function
(	O
&	O
argc	long
,	O
&	O
argv	pointer
,	O
stat_options	array
,	O
stat_docstring	array
,	O
stat_args_doc	array
)	O
;	O
if	O
(	O
argc	long
>	O
1	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"too many arguments"	pointer
)	O
)	O
;	O
return	O
EX_USAGE	int
;	O
}	O
name	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
rc	int
=	O
mu_mailbox_create_default	function
(	O
&	O
mbox	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_mailbox_create_default"	pointer
,	O
name	pointer
,	O
rc	int
)	O
;	O
return	O
EX_UNAVAILABLE	int
;	O
}	O
rc	int
=	O
mu_mailbox_open	function
(	O
mbox	pointer
,	O
MU_STREAM_READ	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_mailbox_open"	pointer
,	O
name	pointer
,	O
rc	int
)	O
;	O
return	O
EX_UNAVAILABLE	int
;	O
}	O
if	O
(	O
!	O
name	pointer
)	O
{	O
mu_url_t	pointer
url	pointer
;	O
mu_mailbox_get_url	function
(	O
mbox	pointer
,	O
&	O
url	pointer
)	O
;	O
name	pointer
=	O
mu_url_to_string	function
(	O
url	pointer
)	O
;	O
}	O
format_stat	function
(	O
format_string	pointer
,	O
mbox	pointer
,	O
name	pointer
)	O
;	O
mu_mailbox_close	function
(	O
mbox	pointer
)	O
;	O
mu_mailbox_destroy	function
(	O
&	O
mbox	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
get_type	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
char	O
const	O
*	O
mbname	pointer
,	O
mu_c_storage_t	union
*	O
cstor	pointer
)	O
{	O
mu_url_t	pointer
url	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_mailbox_get_url	function
(	O
mbox	pointer
,	O
&	O
url	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
rc	int
=	O
mu_url_aget_scheme	function
(	O
url	pointer
,	O
&	O
cstor	pointer
->	O
c_string	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
get_path	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
char	O
const	O
*	O
mbname	pointer
,	O
mu_c_storage_t	union
*	O
cstor	pointer
)	O
{	O
int	O
rc	int
;	O
mu_url_t	pointer
url	pointer
;	O
rc	int
=	O
mu_mailbox_get_url	function
(	O
mbox	pointer
,	O
&	O
url	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
rc	int
=	O
mu_url_aget_path	function
(	O
url	pointer
,	O
&	O
cstor	pointer
->	O
c_string	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
get_url	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
char	O
const	O
*	O
mbname	pointer
,	O
mu_c_storage_t	union
*	O
cstor	pointer
)	O
{	O
mu_url_t	pointer
url	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_mailbox_get_url	function
(	O
mbox	pointer
,	O
&	O
url	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
cstor	pointer
->	O
c_string	pointer
=	O
mu_strdup	function
(	O
mu_url_to_string	function
(	O
url	pointer
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
get_size	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
char	O
const	O
*	O
mbname	pointer
,	O
mu_c_storage_t	union
*	O
cstor	pointer
)	O
{	O
return	O
mu_mailbox_get_size	function
(	O
mbox	pointer
,	O
&	O
cstor	pointer
->	O
c_off	long
)	O
;	O
}	O
static	O
int	O
get_count	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
char	O
const	O
*	O
mbname	pointer
,	O
mu_c_storage_t	union
*	O
cstor	pointer
)	O
{	O
return	O
mu_mailbox_messages_count	function
(	O
mbox	pointer
,	O
&	O
cstor	pointer
->	O
c_size	long
)	O
;	O
}	O
static	O
int	O
get_recent	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
char	O
const	O
*	O
mbname	pointer
,	O
mu_c_storage_t	union
*	O
cstor	pointer
)	O
{	O
return	O
mu_mailbox_messages_recent	function
(	O
mbox	pointer
,	O
&	O
cstor	pointer
->	O
c_size	long
)	O
;	O
}	O
static	O
int	O
get_unseen	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
char	O
const	O
*	O
mbname	pointer
,	O
mu_c_storage_t	union
*	O
cstor	pointer
)	O
{	O
return	O
mu_mailbox_message_unseen	function
(	O
mbox	pointer
,	O
&	O
cstor	pointer
->	O
c_size	long
)	O
;	O
}	O
static	O
int	O
get_uidvalidity	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
char	O
const	O
*	O
mbname	pointer
,	O
mu_c_storage_t	union
*	O
cstor	pointer
)	O
{	O
return	O
mu_mailbox_uidvalidity	function
(	O
mbox	pointer
,	O
&	O
cstor	pointer
->	O
c_ulong	long
)	O
;	O
}	O
static	O
int	O
get_uidnext	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
char	O
const	O
*	O
mbname	pointer
,	O
mu_c_storage_t	union
*	O
cstor	pointer
)	O
{	O
return	O
mu_mailbox_uidnext	function
(	O
mbox	pointer
,	O
&	O
cstor	pointer
->	O
c_size	long
)	O
;	O
}	O
static	O
int	O
get_atime	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
char	O
const	O
*	O
mbname	pointer
,	O
mu_c_storage_t	union
*	O
cstor	pointer
)	O
{	O
return	O
mu_mailbox_access_time	function
(	O
mbox	pointer
,	O
&	O
cstor	pointer
->	O
c_time	long
)	O
;	O
}	O
static	O
int	O
get_name	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
char	O
const	O
*	O
mbname	pointer
,	O
mu_c_storage_t	union
*	O
cstor	pointer
)	O
{	O
cstor	pointer
->	O
c_string	pointer
=	O
mu_strdup	function
(	O
mbname	pointer
)	O
;	O
return	O
0	int
;	O
}	O
