void	O
sbstrans	function
(	O
char	O
*	O
name	pointer
)	O
;	O
char	O
*	O
dotname	pointer
;	O
int	O
lineno	int
;	O
int	O
column	int
;	O
int	O
newline	int
;	O
int	O
pound	int
;	O
int	O
incomment	int
;	O
int	O
inquote1	int
;	O
int	O
inquote2	int
;	O
int	O
escape	int
;	O
typedef	O
struct	O
{	O
char	O
def_str	array
[	O
TOKLEN	int
+	O
1	int
]	O
;	O
int	O
def_val	int
;	O
}	O
define	struct
;	O
define	struct
def	array
[	O
MAXDEF	int
]	O
;	O
int	O
ndef	int
;	O
int	O
white	function
(	O
int	O
c	int
)	O
{	O
return	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
'\r'	O
)	O
;	O
}	O
int	O
alpha	function
(	O
int	O
c	int
)	O
{	O
return	O
(	O
'a'	O
<=	O
c	int
&&	O
c	int
<=	O
'z'	O
)	O
||	O
(	O
'A'	O
<=	O
c	int
&&	O
c	int
<=	O
'Z'	O
)	O
||	O
c	int
==	O
'_'	O
;	O
}	O
int	O
num	function
(	O
int	O
c	int
)	O
{	O
return	O
'0'	O
<=	O
c	int
&&	O
c	int
<=	O
'9'	O
;	O
}	O
int	O
alphanum	function
(	O
int	O
c	int
)	O
{	O
return	O
alpha	function
(	O
c	int
)	O
||	O
num	function
(	O
c	int
)	O
;	O
}	O
int	O
get1c	function
(	O
FILE	struct
*	O
fp	pointer
)	O
{	O
int	O
c	int
;	O
c	int
=	O
getc	function
(	O
fp	pointer
)	O
;	O
if	O
(	O
newline	int
)	O
{	O
lineno	int
++	O
;	O
column	int
=	O
0	int
;	O
}	O
else	O
column	int
++	O
;	O
newline	int
=	O
(	O
c	int
==	O
'\n'	O
)	O
;	O
if	O
(	O
newline	int
)	O
pound	int
=	O
0	int
;	O
return	O
c	int
;	O
}	O
void	O
unget1c	function
(	O
int	O
c	int
,	O
FILE	struct
*	O
dotc	pointer
,	O
FILE	struct
*	O
dapc	pointer
)	O
{	O
if	O
(	O
newline	int
)	O
newline	int
=	O
0	int
;	O
ungetc	function
(	O
c	int
,	O
dotc	pointer
)	O
;	O
if	O
(	O
dapc	pointer
)	O
fseek	function
(	O
dapc	pointer
,	O
ftell	function
(	O
dapc	pointer
)	O
-	O
1	int
,	O
SEEK_SET	int
)	O
;	O
}	O
int	O
dgetc	function
(	O
FILE	struct
*	O
dotc	pointer
,	O
FILE	struct
*	O
dapc	pointer
,	O
int	O
out	int
)	O
{	O
int	O
c	int
;	O
switch	O
(	O
c	int
=	O
get1c	function
(	O
dotc	pointer
)	O
)	O
{	O
case	O
'#'	O
:	O
if	O
(	O
!	O
incomment	int
&&	O
!	O
column	int
)	O
pound	int
=	O
1	int
;	O
escape	int
=	O
0	int
;	O
break	O
;	O
case	O
'"'	O
:	O
if	O
(	O
inquote2	int
&&	O
!	O
escape	int
)	O
inquote2	int
=	O
0	int
;	O
else	O
if	O
(	O
!	O
inquote1	int
&&	O
!	O
incomment	int
)	O
inquote2	int
=	O
1	int
;	O
escape	int
=	O
0	int
;	O
break	O
;	O
case	O
'\''	O
:	O
if	O
(	O
inquote1	int
&&	O
!	O
escape	int
)	O
inquote1	int
=	O
0	int
;	O
else	O
if	O
(	O
!	O
inquote2	int
&&	O
!	O
incomment	int
)	O
inquote1	int
=	O
1	int
;	O
escape	int
=	O
0	int
;	O
break	O
;	O
case	O
'*'	O
:	O
if	O
(	O
incomment	int
)	O
{	O
if	O
(	O
(	O
c	int
=	O
get1c	function
(	O
dotc	pointer
)	O
)	O
==	O
'/'	O
)	O
{	O
if	O
(	O
out	int
)	O
fputs	function
(	O
"*/"	pointer
,	O
dapc	pointer
)	O
;	O
c	int
=	O
get1c	function
(	O
dotc	pointer
)	O
;	O
incomment	int
=	O
0	int
;	O
}	O
else	O
{	O
unget1c	function
(	O
c	int
,	O
dotc	pointer
,	O
NULL	O
)	O
;	O
c	int
=	O
'*'	O
;	O
}	O
}	O
escape	int
=	O
0	int
;	O
break	O
;	O
case	O
'/'	O
:	O
if	O
(	O
!	O
incomment	int
&&	O
!	O
inquote1	int
&&	O
!	O
inquote2	int
)	O
{	O
if	O
(	O
(	O
c	int
=	O
get1c	function
(	O
dotc	pointer
)	O
)	O
==	O
'*'	O
)	O
{	O
if	O
(	O
out	int
)	O
fputs	function
(	O
"/*"	pointer
,	O
dapc	pointer
)	O
;	O
c	int
=	O
get1c	function
(	O
dotc	pointer
)	O
;	O
incomment	int
=	O
1	int
;	O
}	O
else	O
{	O
unget1c	function
(	O
c	int
,	O
dotc	pointer
,	O
NULL	O
)	O
;	O
c	int
=	O
'/'	O
;	O
}	O
}	O
escape	int
=	O
0	int
;	O
break	O
;	O
case	O
'\\'	O
:	O
if	O
(	O
!	O
incomment	int
&&	O
(	O
inquote1	int
||	O
inquote2	int
)	O
)	O
escape	int
=	O
1	int
;	O
break	O
;	O
case	O
EOF	O
:	O
if	O
(	O
inquote1	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"dappp:%s:%d: unmatched '\n"	pointer
,	O
dotname	pointer
,	O
lineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
inquote2	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"dappp:%s:%d: unmatched \"\n"	pointer
,	O
dotname	pointer
,	O
lineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
incomment	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"dappp:%s:%d: non-terminated comment\n"	pointer
,	O
dotname	pointer
,	O
lineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
escape	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"dappp:%s:%d: incomplete escape\n"	pointer
,	O
dotname	pointer
,	O
lineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
pound	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"dappp:%s:%d: incomplete #\n"	pointer
,	O
dotname	pointer
,	O
lineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
break	O
;	O
default	O
:	O
escape	int
=	O
0	int
;	O
break	O
;	O
}	O
if	O
(	O
out	int
&&	O
c	int
!=	O
EOF	O
)	O
putc	function
(	O
c	int
,	O
dapc	pointer
)	O
;	O
return	O
c	int
;	O
}	O
int	O
gettoken	function
(	O
char	O
token	array
[	O
]	O
,	O
FILE	struct
*	O
dotc	pointer
,	O
FILE	struct
*	O
dapc	pointer
,	O
int	O
out	int
)	O
{	O
int	O
c	int
;	O
int	O
t	int
;	O
token	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
while	O
(	O
white	function
(	O
c	int
=	O
dgetc	function
(	O
dotc	pointer
,	O
dapc	pointer
,	O
out	int
)	O
)	O
||	O
incomment	int
||	O
inquote1	int
||	O
inquote2	int
)	O
;	O
t	int
=	O
0	int
;	O
if	O
(	O
alpha	function
(	O
c	int
)	O
)	O
{	O
for	O
(	O
;	O
alphanum	function
(	O
c	int
)	O
;	O
c	int
=	O
dgetc	function
(	O
dotc	pointer
,	O
dapc	pointer
,	O
out	int
)	O
)	O
{	O
if	O
(	O
t	int
<	O
TOKLEN	int
)	O
token	array
[	O
t	int
++	O
]	O
=	O
c	int
;	O
else	O
{	O
token	array
[	O
t	int
]	O
=	O
'\0'	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"dappp:%s:%d: token too long: %s\n"	pointer
,	O
dotname	pointer
,	O
lineno	int
,	O
token	array
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
unget1c	function
(	O
c	int
,	O
dotc	pointer
,	O
(	O
out	int
?	O
dapc	pointer
:	O
NULL	O
)	O
)	O
;	O
}	O
else	O
if	O
(	O
num	function
(	O
c	int
)	O
)	O
{	O
for	O
(	O
;	O
num	function
(	O
c	int
)	O
;	O
c	int
=	O
dgetc	function
(	O
dotc	pointer
,	O
dapc	pointer
,	O
out	int
)	O
)	O
{	O
if	O
(	O
t	int
<	O
TOKLEN	int
)	O
token	array
[	O
t	int
++	O
]	O
=	O
c	int
;	O
else	O
{	O
token	array
[	O
t	int
]	O
=	O
'\0'	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"dappp:%s:%d: token too long: %s\n"	pointer
,	O
dotname	pointer
,	O
lineno	int
,	O
token	array
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
unget1c	function
(	O
c	int
,	O
dotc	pointer
,	O
(	O
out	int
?	O
dapc	pointer
:	O
NULL	O
)	O
)	O
;	O
}	O
else	O
if	O
(	O
c	int
!=	O
EOF	O
)	O
token	array
[	O
t	int
++	O
]	O
=	O
c	int
;	O
token	array
[	O
t	int
]	O
=	O
'\0'	O
;	O
return	O
(	O
t	int
>	O
0	int
)	O
;	O
}	O
void	O
newdef	function
(	O
FILE	struct
*	O
dotc	pointer
,	O
FILE	struct
*	O
dapc	pointer
)	O
{	O
static	O
char	O
defstr	array
[	O
TOKLEN	int
+	O
1	int
]	O
;	O
static	O
char	O
defval	array
[	O
TOKLEN	int
+	O
1	int
]	O
;	O
int	O
d	int
;	O
int	O
c	int
;	O
int	O
v	int
;	O
if	O
(	O
gettoken	function
(	O
defstr	array
,	O
dotc	pointer
,	O
dapc	pointer
,	O
1	int
)	O
)	O
{	O
if	O
(	O
gettoken	function
(	O
defval	array
,	O
dotc	pointer
,	O
dapc	pointer
,	O
1	int
)	O
)	O
{	O
for	O
(	O
v	int
=	O
0	int
,	O
d	int
=	O
0	int
;	O
num	function
(	O
c	int
=	O
defval	array
[	O
d	int
]	O
)	O
;	O
d	int
++	O
)	O
v	int
=	O
10	int
*	O
v	int
+	O
c	int
-	O
'0'	O
;	O
if	O
(	O
v	int
>	O
0	int
&&	O
!	O
c	int
)	O
{	O
if	O
(	O
ndef	int
<	O
MAXDEF	int
)	O
{	O
strcpy	function
(	O
def	array
[	O
ndef	int
]	O
.	O
def_str	array
,	O
defstr	array
)	O
;	O
def	array
[	O
ndef	int
]	O
.	O
def_val	int
=	O
v	int
;	O
ndef	int
++	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"dappp:%s:%d: too many #defines\n"	pointer
,	O
dotname	pointer
,	O
lineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
}	O
}	O
}	O
int	O
defval	array
(	O
char	O
str	array
[	O
]	O
)	O
{	O
int	O
d	int
;	O
for	O
(	O
d	int
=	O
0	int
;	O
d	int
<	O
ndef	int
;	O
d	int
++	O
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
def	array
[	O
d	int
]	O
.	O
def_str	array
,	O
str	array
)	O
)	O
return	O
def	array
[	O
d	int
]	O
.	O
def_val	int
;	O
}	O
return	O
0	int
;	O
}	O
void	O
declare	function
(	O
FILE	struct
*	O
dotc	pointer
,	O
FILE	struct
*	O
dapc	pointer
,	O
char	O
decl	array
[	O
]	O
)	O
{	O
static	O
char	O
token	array
[	O
TOKLEN	int
+	O
1	int
]	O
;	O
static	O
char	O
tokdel	array
[	O
TOKLEN	int
+	O
1	int
]	O
;	O
static	O
char	O
tokdim	array
[	O
TOKLEN	int
+	O
1	int
]	O
;	O
int	O
c	int
;	O
int	O
dim	int
;	O
int	O
dimd	int
;	O
int	O
d	int
;	O
long	O
delpos	long
;	O
while	O
(	O
gettoken	function
(	O
token	array
,	O
dotc	pointer
,	O
dapc	pointer
,	O
0	int
)	O
)	O
{	O
if	O
(	O
(	O
delpos	long
=	O
ftell	function
(	O
dotc	pointer
)	O
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
"dappp"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
gettoken	function
(	O
tokdel	array
,	O
dotc	pointer
,	O
dapc	pointer
,	O
0	int
)	O
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
tokdel	array
,	O
"["	pointer
)	O
)	O
{	O
if	O
(	O
!	O
gettoken	function
(	O
tokdim	array
,	O
dotc	pointer
,	O
dapc	pointer
,	O
0	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"dappp:%s:%d: missing array dimension\n"	pointer
,	O
dotname	pointer
,	O
lineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
(	O
dim	int
=	O
defval	array
(	O
tokdim	array
)	O
)	O
)	O
{	O
for	O
(	O
dimd	int
=	O
0	int
,	O
dim	int
=	O
0	int
;	O
num	function
(	O
c	int
=	O
tokdim	array
[	O
dimd	int
]	O
)	O
;	O
dimd	int
++	O
)	O
dim	int
=	O
10	int
*	O
dim	int
+	O
c	int
-	O
'0'	O
;	O
}	O
if	O
(	O
!	O
dim	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"dappp:%s:%d: zero array dimension\n"	pointer
,	O
dotname	pointer
,	O
lineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
gettoken	function
(	O
tokdel	array
,	O
dotc	pointer
,	O
dapc	pointer
,	O
0	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"dappp:%s:%d: missing ]\n"	pointer
,	O
dotname	pointer
,	O
lineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
strcmp	function
(	O
tokdel	array
,	O
"]"	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"dappp:%s:%d: expected ], got %s\n"	pointer
,	O
dotname	pointer
,	O
lineno	int
,	O
tokdel	array
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
strcmp	function
(	O
decl	array
,	O
"int"	pointer
)	O
)	O
{	O
for	O
(	O
d	int
=	O
0	int
;	O
d	int
<	O
dim	int
;	O
d	int
++	O
)	O
fprintf	function
(	O
dapc	pointer
,	O
"dap_vd(\"%s[%d] 0\", 0);"	pointer
,	O
token	array
,	O
d	int
)	O
;	O
fprintf	function
(	O
dapc	pointer
,	O
"dap_il(\"%s\", %s);"	pointer
,	O
token	array
,	O
token	array
)	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
decl	array
,	O
"double"	pointer
)	O
)	O
{	O
for	O
(	O
d	int
=	O
0	int
;	O
d	int
<	O
dim	int
;	O
d	int
++	O
)	O
fprintf	function
(	O
dapc	pointer
,	O
"dap_vd(\"%s[%d] -1\", 0);"	pointer
,	O
token	array
,	O
d	int
)	O
;	O
fprintf	function
(	O
dapc	pointer
,	O
"dap_dl(\"%s\", %s);"	pointer
,	O
token	array
,	O
token	array
)	O
;	O
}	O
else	O
{	O
if	O
(	O
dim	int
<=	O
1	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"dappp:%s:%d: dimension of character array must be at least 2\n"	pointer
,	O
dotname	pointer
,	O
lineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
fprintf	function
(	O
dapc	pointer
,	O
"dap_vd(\"%s %d\", 0);"	pointer
,	O
token	array
,	O
dim	int
-	O
1	int
)	O
;	O
fprintf	function
(	O
dapc	pointer
,	O
"dap_sl(\"%s\", %s);"	pointer
,	O
token	array
,	O
token	array
)	O
;	O
}	O
if	O
(	O
!	O
gettoken	function
(	O
tokdel	array
,	O
dotc	pointer
,	O
dapc	pointer
,	O
0	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"dappp:%s:%d: missing delimiter after string declaration\n"	pointer
,	O
dotname	pointer
,	O
lineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
tokdel	array
,	O
","	pointer
)	O
||	O
!	O
strcmp	function
(	O
tokdel	array
,	O
";"	pointer
)	O
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
decl	array
,	O
"int"	pointer
)	O
)	O
{	O
fprintf	function
(	O
dapc	pointer
,	O
"dap_vd(\"%s 0\", 0);"	pointer
,	O
token	array
)	O
;	O
fprintf	function
(	O
dapc	pointer
,	O
"dap_il(\"%s\", &%s);"	pointer
,	O
token	array
,	O
token	array
)	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
decl	array
,	O
"double"	pointer
)	O
)	O
{	O
fprintf	function
(	O
dapc	pointer
,	O
"dap_vd(\"%s -1\", 0);"	pointer
,	O
token	array
)	O
;	O
fprintf	function
(	O
dapc	pointer
,	O
"dap_dl(\"%s\", &%s);"	pointer
,	O
token	array
,	O
token	array
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"dappp:%s:%d: string variables must be arrays with explicit dimension\n"	pointer
,	O
dotname	pointer
,	O
lineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
}	O
if	O
(	O
!	O
strcmp	function
(	O
tokdel	array
,	O
","	pointer
)	O
)	O
{	O
while	O
(	O
white	function
(	O
c	int
=	O
dgetc	function
(	O
dotc	pointer
,	O
dapc	pointer
,	O
0	int
)	O
)	O
)	O
;	O
unget1c	function
(	O
c	int
,	O
dotc	pointer
,	O
NULL	O
)	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
tokdel	array
,	O
";"	pointer
)	O
)	O
break	O
;	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"dappp:%s:%d: expected `;' or `,', got %s\n"	pointer
,	O
dotname	pointer
,	O
lineno	int
,	O
tokdel	array
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
}	O
void	O
preproc	function
(	O
FILE	struct
*	O
dotc	pointer
,	O
FILE	struct
*	O
dapc	pointer
)	O
{	O
int	O
c	int
;	O
static	O
char	O
token	array
[	O
TOKLEN	int
+	O
1	int
]	O
;	O
static	O
char	O
tokdel	array
[	O
TOKLEN	int
+	O
1	int
]	O
;	O
int	O
isdecl	int
;	O
long	O
decpos	long
;	O
int	O
decline	int
;	O
long	O
inpos	long
;	O
int	O
infline	int
;	O
int	O
indecl	int
;	O
int	O
brace	int
;	O
indecl	int
=	O
0	int
;	O
if	O
(	O
(	O
inpos	long
=	O
ftell	function
(	O
dotc	pointer
)	O
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
"dappp"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
infline	int
=	O
lineno	int
;	O
do	O
{	O
if	O
(	O
(	O
decpos	long
=	O
ftell	function
(	O
dotc	pointer
)	O
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
"dappp"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
decline	int
=	O
lineno	int
;	O
if	O
(	O
gettoken	function
(	O
token	array
,	O
dotc	pointer
,	O
dapc	pointer
,	O
0	int
)	O
&&	O
(	O
!	O
strcmp	function
(	O
token	array
,	O
"double"	pointer
)	O
||	O
!	O
strcmp	function
(	O
token	array
,	O
"int"	pointer
)	O
||	O
!	O
strcmp	function
(	O
token	array
,	O
"char"	pointer
)	O
)	O
)	O
{	O
isdecl	int
=	O
1	int
;	O
if	O
(	O
fseek	function
(	O
dotc	pointer
,	O
decpos	long
,	O
SEEK_SET	int
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
"dappp"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
lineno	int
=	O
decline	int
;	O
while	O
(	O
(	O
c	int
=	O
dgetc	function
(	O
dotc	pointer
,	O
dapc	pointer
,	O
1	int
)	O
)	O
!=	O
';'	O
&&	O
c	int
!=	O
EOF	O
)	O
;	O
}	O
else	O
isdecl	int
=	O
0	int
;	O
}	O
while	O
(	O
isdecl	int
)	O
;	O
if	O
(	O
fseek	function
(	O
dotc	pointer
,	O
inpos	long
,	O
SEEK_SET	int
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
"dappp"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
lineno	int
=	O
infline	int
;	O
do	O
{	O
if	O
(	O
(	O
decpos	long
=	O
ftell	function
(	O
dotc	pointer
)	O
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
"dappp"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
decline	int
=	O
lineno	int
;	O
if	O
(	O
gettoken	function
(	O
token	array
,	O
dotc	pointer
,	O
dapc	pointer
,	O
0	int
)	O
&&	O
(	O
!	O
strcmp	function
(	O
token	array
,	O
"double"	pointer
)	O
||	O
!	O
strcmp	function
(	O
token	array
,	O
"int"	pointer
)	O
||	O
!	O
strcmp	function
(	O
token	array
,	O
"char"	pointer
)	O
)	O
)	O
{	O
isdecl	int
=	O
1	int
;	O
declare	function
(	O
dotc	pointer
,	O
dapc	pointer
,	O
token	array
)	O
;	O
}	O
else	O
isdecl	int
=	O
0	int
;	O
}	O
while	O
(	O
isdecl	int
)	O
;	O
if	O
(	O
fseek	function
(	O
dotc	pointer
,	O
decpos	long
,	O
SEEK_SET	int
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
"dappp"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
lineno	int
=	O
decline	int
;	O
for	O
(	O
brace	int
=	O
1	int
;	O
brace	int
&&	O
gettoken	function
(	O
token	array
,	O
dotc	pointer
,	O
dapc	pointer
,	O
1	int
)	O
;	O
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
token	array
,	O
"infile"	pointer
)	O
||	O
!	O
strcmp	function
(	O
token	array
,	O
"inset"	pointer
)	O
||	O
!	O
strcmp	function
(	O
token	array
,	O
"main"	pointer
)	O
)	O
{	O
if	O
(	O
gettoken	function
(	O
tokdel	array
,	O
dotc	pointer
,	O
dapc	pointer
,	O
1	int
)	O
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
tokdel	array
,	O
"("	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"dappp:%s:%d: call to %s in infile or inset body\n"	pointer
,	O
dotname	pointer
,	O
lineno	int
,	O
token	array
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
token	array
,	O
"{"	pointer
)	O
)	O
brace	int
++	O
;	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
token	array
,	O
"}"	pointer
)	O
)	O
--	O
brace	int
;	O
}	O
}	O
int	O
infile	function
(	O
FILE	struct
*	O
dotc	pointer
,	O
FILE	struct
*	O
dapc	pointer
)	O
{	O
char	O
token	array
[	O
TOKLEN	int
+	O
1	int
]	O
;	O
char	O
tokdel	array
[	O
TOKLEN	int
+	O
1	int
]	O
;	O
int	O
c	int
;	O
long	O
dotcpos	long
;	O
long	O
dapcpos	long
;	O
int	O
paren	int
;	O
while	O
(	O
gettoken	function
(	O
token	array
,	O
dotc	pointer
,	O
dapc	pointer
,	O
1	int
)	O
)	O
{	O
if	O
(	O
pound	int
)	O
{	O
if	O
(	O
column	int
>	O
1	int
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
token	array
,	O
"define"	pointer
)	O
)	O
newdef	function
(	O
dotc	pointer
,	O
dapc	pointer
)	O
;	O
pound	int
=	O
0	int
;	O
}	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
token	array
,	O
"main"	pointer
)	O
)	O
{	O
dotcpos	long
=	O
ftell	function
(	O
dotc	pointer
)	O
-	O
4	int
;	O
dapcpos	long
=	O
ftell	function
(	O
dapc	pointer
)	O
-	O
4	int
;	O
if	O
(	O
gettoken	function
(	O
tokdel	array
,	O
dotc	pointer
,	O
dapc	pointer
,	O
1	int
)	O
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
tokdel	array
,	O
"("	pointer
)	O
)	O
{	O
if	O
(	O
fseek	function
(	O
dotc	pointer
,	O
dotcpos	long
,	O
SEEK_SET	int
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
"dappp"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
fseek	function
(	O
dapc	pointer
,	O
dapcpos	long
,	O
SEEK_SET	int
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
"dappp"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
fputs	function
(	O
"dap_"	pointer
,	O
dapc	pointer
)	O
;	O
gettoken	function
(	O
token	array
,	O
dotc	pointer
,	O
dapc	pointer
,	O
1	int
)	O
;	O
gettoken	function
(	O
tokdel	array
,	O
dotc	pointer
,	O
dapc	pointer
,	O
1	int
)	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
token	array
,	O
"infile"	pointer
)	O
||	O
!	O
strcmp	function
(	O
token	array
,	O
"inset"	pointer
)	O
)	O
{	O
if	O
(	O
gettoken	function
(	O
tokdel	array
,	O
dotc	pointer
,	O
dapc	pointer
,	O
1	int
)	O
&&	O
!	O
strcmp	function
(	O
tokdel	array
,	O
"("	pointer
)	O
)	O
{	O
for	O
(	O
paren	int
=	O
1	int
;	O
paren	int
&&	O
(	O
c	int
=	O
dgetc	function
(	O
dotc	pointer
,	O
dapc	pointer
,	O
1	int
)	O
)	O
!=	O
EOF	O
;	O
)	O
{	O
if	O
(	O
!	O
incomment	int
&&	O
!	O
inquote1	int
&&	O
!	O
inquote2	int
)	O
{	O
if	O
(	O
c	int
==	O
'('	O
)	O
paren	int
++	O
;	O
else	O
if	O
(	O
c	int
==	O
')'	O
)	O
--	O
paren	int
;	O
}	O
}	O
putc	function
(	O
';'	O
,	O
dapc	pointer
)	O
;	O
while	O
(	O
white	function
(	O
c	int
=	O
dgetc	function
(	O
dotc	pointer
,	O
dapc	pointer
,	O
1	int
)	O
)	O
||	O
incomment	int
)	O
;	O
if	O
(	O
c	int
==	O
'{'	O
)	O
{	O
while	O
(	O
white	function
(	O
c	int
=	O
dgetc	function
(	O
dotc	pointer
,	O
dapc	pointer
,	O
1	int
)	O
)	O
||	O
incomment	int
)	O
;	O
unget1c	function
(	O
c	int
,	O
dotc	pointer
,	O
dapc	pointer
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"dappp:%s:%d: expected {, got %c\n"	pointer
,	O
dotname	pointer
,	O
lineno	int
,	O
c	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
return	O
1	int
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"dappp:%s:%d: expected (, got %s\n"	pointer
,	O
dotname	pointer
,	O
lineno	int
,	O
tokdel	array
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
FILE	struct
*	O
dotc	pointer
,	O
*	O
dapc	pointer
;	O
int	O
namelen	int
;	O
char	O
*	O
dapname	pointer
;	O
while	O
(	O
--	O
argc	int
>	O
0	int
)	O
{	O
argv	pointer
++	O
;	O
namelen	int
=	O
strlen	function
(	O
*	O
argv	pointer
)	O
;	O
if	O
(	O
namelen	int
>	O
4	int
&&	O
!	O
strcmp	function
(	O
*	O
argv	pointer
+	O
namelen	int
-	O
4	int
,	O
".sbs"	pointer
)	O
)	O
{	O
sbstrans	function
(	O
*	O
argv	pointer
)	O
;	O
namelen	int
-=	O
2	int
;	O
}	O
if	O
(	O
namelen	int
<=	O
2	int
||	O
strcmp	function
(	O
*	O
argv	pointer
+	O
namelen	int
-	O
2	int
,	O
".c"	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"dappp: file name does not end in .c: %s\n"	pointer
,	O
*	O
argv	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
(	O
dotname	pointer
=	O
malloc	function
(	O
namelen	int
+	O
1	int
)	O
)	O
)	O
{	O
perror	function
(	O
"dappp"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
(	O
dapname	pointer
=	O
malloc	function
(	O
namelen	int
+	O
5	int
)	O
)	O
)	O
{	O
perror	function
(	O
"dappp"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
strcpy	function
(	O
dotname	pointer
,	O
*	O
argv	pointer
)	O
;	O
strcpy	function
(	O
dapname	pointer
,	O
*	O
argv	pointer
)	O
;	O
strcpy	function
(	O
dapname	pointer
+	O
namelen	int
-	O
1	int
,	O
"dap.c"	pointer
)	O
;	O
if	O
(	O
!	O
(	O
dotc	pointer
=	O
fopen	function
(	O
dotname	pointer
,	O
"r"	pointer
)	O
)	O
)	O
{	O
fputs	function
(	O
"dappp:"	pointer
,	O
stderr	pointer
)	O
;	O
perror	function
(	O
dotname	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
(	O
dapc	pointer
=	O
fopen	function
(	O
dapname	pointer
,	O
"w"	pointer
)	O
)	O
)	O
{	O
fputs	function
(	O
"dappp:"	pointer
,	O
stderr	pointer
)	O
;	O
perror	function
(	O
dapname	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
lineno	int
=	O
0	int
;	O
column	int
=	O
0	int
;	O
newline	int
=	O
1	int
;	O
incomment	int
=	O
0	int
;	O
inquote1	int
=	O
0	int
;	O
inquote2	int
=	O
0	int
;	O
escape	int
=	O
0	int
;	O
ndef	int
=	O
0	int
;	O
while	O
(	O
infile	function
(	O
dotc	pointer
,	O
dapc	pointer
)	O
)	O
preproc	function
(	O
dotc	pointer
,	O
dapc	pointer
)	O
;	O
fclose	function
(	O
dotc	pointer
)	O
;	O
fclose	function
(	O
dapc	pointer
)	O
;	O
free	function
(	O
dotname	pointer
)	O
;	O
free	function
(	O
dapname	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
