typedef	O
struct	O
{	O
const	O
gsl_vector	struct
*	O
S	pointer
;	O
const	O
gsl_vector	struct
*	O
UTy	pointer
;	O
double	O
delta0	pointer
;	O
size_t	long
np	long
;	O
gsl_vector	struct
*	O
workp	pointer
;	O
}	O
gcv_params	struct
;	O
static	O
double	O
gcv_func	function
(	O
double	O
lambda	double
,	O
void	O
*	O
params	pointer
)	O
;	O
int	O
gsl_multifit_linear_gcv_init	function
(	O
const	O
gsl_vector	struct
*	O
y	double
,	O
gsl_vector	struct
*	O
reg_param	pointer
,	O
gsl_vector	struct
*	O
UTy	pointer
,	O
double	O
*	O
delta0	pointer
,	O
gsl_multifit_linear_workspace	struct
*	O
work	pointer
)	O
{	O
const	O
size_t	long
n	int
=	O
y	double
->	O
size	long
;	O
if	O
(	O
n	int
!=	O
work	pointer
->	O
n	int
)	O
{	O
GSL_ERROR	O
(	O
"y vector does not match workspace"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
UTy	pointer
->	O
size	long
!=	O
work	pointer
->	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"UTy vector does not match workspace"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
const	O
size_t	long
p	int
=	O
work	pointer
->	O
p	int
;	O
gsl_matrix_view	struct
U	pointer
=	O
gsl_matrix_submatrix	function
(	O
work	pointer
->	O
A	pointer
,	O
0	int
,	O
0	int
,	O
n	int
,	O
p	int
)	O
;	O
gsl_vector_view	struct
S	pointer
=	O
gsl_vector_subvector	function
(	O
work	pointer
->	O
S	pointer
,	O
0	int
,	O
p	int
)	O
;	O
const	O
double	O
smax	double
=	O
gsl_vector_get	function
(	O
&	O
S	pointer
.	O
vector	struct
,	O
0	int
)	O
;	O
const	O
double	O
smin	double
=	O
gsl_vector_get	function
(	O
&	O
S	pointer
.	O
vector	struct
,	O
p	int
-	O
1	int
)	O
;	O
double	O
dr	double
;	O
double	O
normy	double
=	O
gsl_blas_dnrm2	function
(	O
y	double
)	O
;	O
double	O
normUTy	double
;	O
gsl_blas_dgemv	function
(	O
CblasTrans	int
,	O
1.0	int
,	O
&	O
U	pointer
.	O
matrix	struct
,	O
y	double
,	O
0.0	int
,	O
UTy	pointer
)	O
;	O
normUTy	double
=	O
gsl_blas_dnrm2	function
(	O
UTy	pointer
)	O
;	O
dr	double
=	O
(	O
normy	double
+	O
normUTy	double
)	O
*	O
(	O
normy	double
-	O
normUTy	double
)	O
;	O
gsl_multifit_linear_lreg	function
(	O
smin	double
,	O
smax	double
,	O
reg_param	pointer
)	O
;	O
if	O
(	O
n	int
>	O
p	int
&&	O
dr	double
>	O
0.0	int
)	O
*	O
delta0	pointer
=	O
dr	double
;	O
else	O
*	O
delta0	pointer
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_multifit_linear_gcv_curve	function
(	O
const	O
gsl_vector	struct
*	O
reg_param	pointer
,	O
const	O
gsl_vector	struct
*	O
UTy	pointer
,	O
const	O
double	O
delta0	pointer
,	O
gsl_vector	struct
*	O
G	pointer
,	O
gsl_multifit_linear_workspace	struct
*	O
work	pointer
)	O
{	O
const	O
size_t	long
n	int
=	O
work	pointer
->	O
n	int
;	O
const	O
size_t	long
p	int
=	O
work	pointer
->	O
p	int
;	O
const	O
size_t	long
N	int
=	O
reg_param	pointer
->	O
size	long
;	O
if	O
(	O
UTy	pointer
->	O
size	long
!=	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"UTy vector does not match workspace"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
G	pointer
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"size of reg_param and G vectors do not match"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
gsl_vector_view	struct
S	pointer
=	O
gsl_vector_subvector	function
(	O
work	pointer
->	O
S	pointer
,	O
0	int
,	O
p	int
)	O
;	O
gsl_vector_view	struct
workp	pointer
=	O
gsl_matrix_subcolumn	function
(	O
work	pointer
->	O
QSI	pointer
,	O
0	int
,	O
0	int
,	O
p	int
)	O
;	O
gcv_params	struct
params	pointer
;	O
params	pointer
.	O
S	pointer
=	O
&	O
S	pointer
.	O
vector	struct
;	O
params	pointer
.	O
UTy	pointer
=	O
UTy	pointer
;	O
params	pointer
.	O
delta0	pointer
=	O
delta0	pointer
;	O
params	pointer
.	O
np	long
=	O
n	int
-	O
p	int
;	O
params	pointer
.	O
workp	pointer
=	O
&	O
workp	pointer
.	O
vector	struct
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
double	O
lambdai	double
=	O
gsl_vector_get	function
(	O
reg_param	pointer
,	O
i	long
)	O
;	O
double	O
Gi	double
=	O
gcv_func	function
(	O
lambdai	double
,	O
&	O
params	pointer
)	O
;	O
gsl_vector_set	function
(	O
G	pointer
,	O
i	long
,	O
Gi	double
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_multifit_linear_gcv_min	function
(	O
const	O
gsl_vector	struct
*	O
reg_param	pointer
,	O
const	O
gsl_vector	struct
*	O
UTy	pointer
,	O
const	O
gsl_vector	struct
*	O
G	pointer
,	O
const	O
double	O
delta0	pointer
,	O
double	O
*	O
lambda	double
,	O
gsl_multifit_linear_workspace	struct
*	O
work	pointer
)	O
{	O
const	O
size_t	long
n	int
=	O
work	pointer
->	O
n	int
;	O
const	O
size_t	long
p	int
=	O
work	pointer
->	O
p	int
;	O
const	O
size_t	long
npts	long
=	O
reg_param	pointer
->	O
size	long
;	O
if	O
(	O
UTy	pointer
->	O
size	long
!=	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"UTy vector does not match workspace"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
G	pointer
->	O
size	long
!=	O
npts	long
)	O
{	O
GSL_ERROR	O
(	O
"size of reg_param and G vectors do not match"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
const	O
size_t	long
max_iter	long
=	O
500	int
;	O
const	O
double	O
tol	double
=	O
1.0e-4	int
;	O
gsl_vector_view	struct
S	pointer
=	O
gsl_vector_subvector	function
(	O
work	pointer
->	O
S	pointer
,	O
0	int
,	O
p	int
)	O
;	O
gsl_vector_view	struct
workp	pointer
=	O
gsl_matrix_subcolumn	function
(	O
work	pointer
->	O
QSI	pointer
,	O
0	int
,	O
0	int
,	O
p	int
)	O
;	O
gcv_params	struct
params	pointer
;	O
int	O
idxG	int
=	O
(	O
int	O
)	O
gsl_vector_min_index	function
(	O
G	pointer
)	O
;	O
double	O
a	double
=	O
gsl_vector_get	function
(	O
reg_param	pointer
,	O
GSL_MIN	O
(	O
idxG	int
+	O
1	int
,	O
(	O
int	O
)	O
npts	long
-	O
1	int
)	O
)	O
;	O
double	O
b	double
=	O
gsl_vector_get	function
(	O
reg_param	pointer
,	O
GSL_MAX	O
(	O
idxG	int
-	O
1	int
,	O
0	int
)	O
)	O
;	O
double	O
m	pointer
=	O
gsl_vector_get	function
(	O
reg_param	pointer
,	O
idxG	int
)	O
;	O
size_t	long
iter	long
=	O
0	int
;	O
gsl_function	struct
F	struct
;	O
gsl_min_fminimizer	struct
*	O
min_workspace_p	pointer
;	O
if	O
(	O
idxG	int
==	O
0	int
||	O
idxG	int
==	O
(	O
(	O
int	O
)	O
npts	long
-	O
1	int
)	O
)	O
{	O
*	O
lambda	double
=	O
m	pointer
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
min_workspace_p	pointer
=	O
gsl_min_fminimizer_alloc	function
(	O
gsl_min_fminimizer_brent	pointer
)	O
;	O
params	pointer
.	O
S	pointer
=	O
&	O
S	pointer
.	O
vector	struct
;	O
params	pointer
.	O
UTy	pointer
=	O
UTy	pointer
;	O
params	pointer
.	O
delta0	pointer
=	O
delta0	pointer
;	O
params	pointer
.	O
np	long
=	O
n	int
-	O
p	int
;	O
params	pointer
.	O
workp	pointer
=	O
&	O
workp	pointer
.	O
vector	struct
;	O
F	struct
.	O
function	pointer
=	O
gcv_func	function
;	O
F	struct
.	O
params	pointer
=	O
&	O
params	pointer
;	O
gsl_min_fminimizer_set	function
(	O
min_workspace_p	pointer
,	O
&	O
F	struct
,	O
m	pointer
,	O
a	double
,	O
b	double
)	O
;	O
do	O
{	O
iter	long
++	O
;	O
status	int
=	O
gsl_min_fminimizer_iterate	function
(	O
min_workspace_p	pointer
)	O
;	O
a	double
=	O
gsl_min_fminimizer_x_lower	function
(	O
min_workspace_p	pointer
)	O
;	O
b	double
=	O
gsl_min_fminimizer_x_upper	function
(	O
min_workspace_p	pointer
)	O
;	O
status	int
=	O
gsl_min_test_interval	function
(	O
a	double
,	O
b	double
,	O
0.0	int
,	O
tol	double
)	O
;	O
}	O
while	O
(	O
status	int
==	O
GSL_CONTINUE	int
&&	O
iter	long
<	O
max_iter	long
)	O
;	O
if	O
(	O
status	int
==	O
GSL_SUCCESS	int
)	O
*	O
lambda	double
=	O
gsl_min_fminimizer_minimum	function
(	O
min_workspace_p	pointer
)	O
;	O
else	O
status	int
=	O
GSL_EMAXITER	int
;	O
gsl_min_fminimizer_free	function
(	O
min_workspace_p	pointer
)	O
;	O
return	O
status	int
;	O
}	O
}	O
double	O
gsl_multifit_linear_gcv_calc	function
(	O
const	O
double	O
lambda	double
,	O
const	O
gsl_vector	struct
*	O
UTy	pointer
,	O
const	O
double	O
delta0	pointer
,	O
gsl_multifit_linear_workspace	struct
*	O
work	pointer
)	O
{	O
const	O
size_t	long
n	int
=	O
work	pointer
->	O
n	int
;	O
const	O
size_t	long
p	int
=	O
work	pointer
->	O
p	int
;	O
if	O
(	O
UTy	pointer
->	O
size	long
!=	O
p	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"UTy vector does not match workspace"	pointer
,	O
GSL_EBADLEN	int
,	O
0.0	int
)	O
;	O
}	O
else	O
{	O
gsl_vector_view	struct
S	pointer
=	O
gsl_vector_subvector	function
(	O
work	pointer
->	O
S	pointer
,	O
0	int
,	O
p	int
)	O
;	O
gsl_vector_view	struct
workp	pointer
=	O
gsl_matrix_subcolumn	function
(	O
work	pointer
->	O
QSI	pointer
,	O
0	int
,	O
0	int
,	O
p	int
)	O
;	O
gcv_params	struct
params	pointer
;	O
double	O
G	pointer
;	O
params	pointer
.	O
S	pointer
=	O
&	O
S	pointer
.	O
vector	struct
;	O
params	pointer
.	O
UTy	pointer
=	O
UTy	pointer
;	O
params	pointer
.	O
delta0	pointer
=	O
delta0	pointer
;	O
params	pointer
.	O
np	long
=	O
n	int
-	O
p	int
;	O
params	pointer
.	O
workp	pointer
=	O
&	O
workp	pointer
.	O
vector	struct
;	O
G	pointer
=	O
gcv_func	function
(	O
lambda	double
,	O
&	O
params	pointer
)	O
;	O
return	O
G	pointer
;	O
}	O
}	O
int	O
gsl_multifit_linear_gcv	function
(	O
const	O
gsl_vector	struct
*	O
y	double
,	O
gsl_vector	struct
*	O
reg_param	pointer
,	O
gsl_vector	struct
*	O
G	pointer
,	O
double	O
*	O
lambda	double
,	O
double	O
*	O
G_lambda	pointer
,	O
gsl_multifit_linear_workspace	struct
*	O
work	pointer
)	O
{	O
const	O
size_t	long
n	int
=	O
y	double
->	O
size	long
;	O
const	O
size_t	long
N	int
=	O
G	pointer
->	O
size	long
;	O
if	O
(	O
n	int
!=	O
work	pointer
->	O
n	int
)	O
{	O
GSL_ERROR	O
(	O
"y vector does not match workspace"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
reg_param	pointer
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"size of reg_param and G vectors do not match"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
const	O
size_t	long
p	int
=	O
work	pointer
->	O
p	int
;	O
gsl_vector_view	struct
UTy	pointer
=	O
gsl_vector_subvector	function
(	O
work	pointer
->	O
xt	pointer
,	O
0	int
,	O
p	int
)	O
;	O
double	O
delta0	pointer
;	O
status	int
=	O
gsl_multifit_linear_gcv_init	function
(	O
y	double
,	O
reg_param	pointer
,	O
&	O
UTy	pointer
.	O
vector	struct
,	O
&	O
delta0	pointer
,	O
work	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
gsl_multifit_linear_gcv_curve	function
(	O
reg_param	pointer
,	O
&	O
UTy	pointer
.	O
vector	struct
,	O
delta0	pointer
,	O
G	pointer
,	O
work	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
gsl_multifit_linear_gcv_min	function
(	O
reg_param	pointer
,	O
&	O
UTy	pointer
.	O
vector	struct
,	O
G	pointer
,	O
delta0	pointer
,	O
lambda	double
,	O
work	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
*	O
G_lambda	pointer
=	O
gsl_multifit_linear_gcv_calc	function
(	O
*	O
lambda	double
,	O
&	O
UTy	pointer
.	O
vector	struct
,	O
delta0	pointer
,	O
work	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
double	O
gcv_func	function
(	O
double	O
lambda	double
,	O
void	O
*	O
params	pointer
)	O
{	O
gcv_params	struct
*	O
par	pointer
=	O
(	O
gcv_params	struct
*	O
)	O
params	pointer
;	O
const	O
gsl_vector	struct
*	O
S	pointer
=	O
par	pointer
->	O
S	pointer
;	O
const	O
gsl_vector	struct
*	O
UTy	pointer
=	O
par	pointer
->	O
UTy	pointer
;	O
double	O
delta0	pointer
=	O
par	pointer
->	O
delta0	pointer
;	O
size_t	long
np	long
=	O
par	pointer
->	O
np	long
;	O
gsl_vector	struct
*	O
workp	pointer
=	O
par	pointer
->	O
workp	pointer
;	O
const	O
size_t	long
p	int
=	O
S	pointer
->	O
size	long
;	O
size_t	long
i	long
;	O
double	O
lambda_sq	double
=	O
lambda	double
*	O
lambda	double
;	O
double	O
G	pointer
,	O
d	double
,	O
norm	pointer
;	O
double	O
sumf	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
p	int
;	O
++	O
i	long
)	O
{	O
double	O
si	double
=	O
gsl_vector_get	function
(	O
S	pointer
,	O
i	long
)	O
;	O
double	O
fi	double
=	O
lambda_sq	double
/	O
(	O
si	double
*	O
si	double
+	O
lambda_sq	double
)	O
;	O
gsl_vector_set	function
(	O
workp	pointer
,	O
i	long
,	O
fi	double
)	O
;	O
sumf	double
+=	O
fi	double
;	O
}	O
d	double
=	O
(	O
double	O
)	O
np	long
+	O
sumf	double
;	O
gsl_vector_mul	function
(	O
workp	pointer
,	O
UTy	pointer
)	O
;	O
norm	pointer
=	O
gsl_blas_dnrm2	function
(	O
workp	pointer
)	O
;	O
G	pointer
=	O
(	O
norm	pointer
*	O
norm	pointer
+	O
delta0	pointer
)	O
/	O
(	O
d	double
*	O
d	double
)	O
;	O
return	O
G	pointer
;	O
}	O
