void	O
ZLIB_INTERNAL	O
inflate_fast	function
(	O
strm	pointer
,	O
start	int
)	O
z_streamp	pointer
strm	pointer
;	O
unsigned	O
start	int
;	O
{	O
struct	O
inflate_state	struct
FAR	O
*	O
state	pointer
;	O
z_const	O
unsigned	O
char	O
FAR	O
*	O
in	pointer
;	O
z_const	O
unsigned	O
char	O
FAR	O
*	O
last	int
;	O
unsigned	O
char	O
FAR	O
*	O
out	pointer
;	O
unsigned	O
char	O
FAR	O
*	O
beg	pointer
;	O
unsigned	O
char	O
FAR	O
*	O
end	pointer
;	O
unsigned	O
wsize	int
;	O
unsigned	O
whave	int
;	O
unsigned	O
wnext	int
;	O
unsigned	O
char	O
FAR	O
*	O
window	pointer
;	O
unsigned	O
long	O
hold	long
;	O
unsigned	O
bits	pointer
;	O
code	struct
const	O
FAR	O
*	O
lcode	pointer
;	O
code	struct
const	O
FAR	O
*	O
dcode	pointer
;	O
unsigned	O
lmask	int
;	O
unsigned	O
dmask	int
;	O
code	struct
here	struct
;	O
unsigned	O
op	char
;	O
unsigned	O
len	int
;	O
unsigned	O
dist	int
;	O
unsigned	O
char	O
FAR	O
*	O
from	pointer
;	O
state	pointer
=	O
(	O
struct	O
inflate_state	struct
FAR	O
*	O
)	O
strm	pointer
->	O
state	pointer
;	O
in	pointer
=	O
strm	pointer
->	O
next_in	pointer
;	O
last	int
=	O
in	pointer
+	O
(	O
strm	pointer
->	O
avail_in	int
-	O
5	int
)	O
;	O
out	pointer
=	O
strm	pointer
->	O
next_out	pointer
;	O
beg	pointer
=	O
out	pointer
-	O
(	O
start	int
-	O
strm	pointer
->	O
avail_out	int
)	O
;	O
end	pointer
=	O
out	pointer
+	O
(	O
strm	pointer
->	O
avail_out	int
-	O
257	int
)	O
;	O
wsize	int
=	O
state	pointer
->	O
wsize	int
;	O
whave	int
=	O
state	pointer
->	O
whave	int
;	O
wnext	int
=	O
state	pointer
->	O
wnext	int
;	O
window	pointer
=	O
state	pointer
->	O
window	pointer
;	O
hold	long
=	O
state	pointer
->	O
hold	long
;	O
bits	pointer
=	O
state	pointer
->	O
bits	pointer
;	O
lcode	pointer
=	O
state	pointer
->	O
lencode	pointer
;	O
dcode	pointer
=	O
state	pointer
->	O
distcode	pointer
;	O
lmask	int
=	O
(	O
1U	int
<<	O
state	pointer
->	O
lenbits	int
)	O
-	O
1	int
;	O
dmask	int
=	O
(	O
1U	int
<<	O
state	pointer
->	O
distbits	int
)	O
-	O
1	int
;	O
do	O
{	O
if	O
(	O
bits	pointer
<	O
15	int
)	O
{	O
hold	long
+=	O
(	O
unsigned	O
long	O
)	O
(	O
*	O
in	pointer
++	O
)	O
<<	O
bits	pointer
;	O
bits	pointer
+=	O
8	int
;	O
hold	long
+=	O
(	O
unsigned	O
long	O
)	O
(	O
*	O
in	pointer
++	O
)	O
<<	O
bits	pointer
;	O
bits	pointer
+=	O
8	int
;	O
}	O
here	struct
=	O
lcode	pointer
[	O
hold	long
&	O
lmask	int
]	O
;	O
dolen	O
:	O
op	char
=	O
(	O
unsigned	O
)	O
(	O
here	struct
.	O
bits	pointer
)	O
;	O
hold	long
>>=	O
op	char
;	O
bits	pointer
-=	O
op	char
;	O
op	char
=	O
(	O
unsigned	O
)	O
(	O
here	struct
.	O
op	char
)	O
;	O
if	O
(	O
op	char
==	O
0	int
)	O
{	O
Tracevv	O
(	O
(	O
stderr	O
,	O
here	struct
.	O
val	short
>=	O
0x20	int
&&	O
here	struct
.	O
val	short
<	O
0x7f	int
?	O
"inflate:         literal '%c'\n"	pointer
:	O
"inflate:         literal 0x%02x\n"	pointer
,	O
here	struct
.	O
val	short
)	O
)	O
;	O
*	O
out	pointer
++	O
=	O
(	O
unsigned	O
char	O
)	O
(	O
here	struct
.	O
val	short
)	O
;	O
}	O
else	O
if	O
(	O
op	char
&	O
16	int
)	O
{	O
len	int
=	O
(	O
unsigned	O
)	O
(	O
here	struct
.	O
val	short
)	O
;	O
op	char
&=	O
15	int
;	O
if	O
(	O
op	char
)	O
{	O
if	O
(	O
bits	pointer
<	O
op	char
)	O
{	O
hold	long
+=	O
(	O
unsigned	O
long	O
)	O
(	O
*	O
in	pointer
++	O
)	O
<<	O
bits	pointer
;	O
bits	pointer
+=	O
8	int
;	O
}	O
len	int
+=	O
(	O
unsigned	O
)	O
hold	long
&	O
(	O
(	O
1U	int
<<	O
op	char
)	O
-	O
1	int
)	O
;	O
hold	long
>>=	O
op	char
;	O
bits	pointer
-=	O
op	char
;	O
}	O
Tracevv	O
(	O
(	O
stderr	O
,	O
"inflate:         length %u\n"	pointer
,	O
len	int
)	O
)	O
;	O
if	O
(	O
bits	pointer
<	O
15	int
)	O
{	O
hold	long
+=	O
(	O
unsigned	O
long	O
)	O
(	O
*	O
in	pointer
++	O
)	O
<<	O
bits	pointer
;	O
bits	pointer
+=	O
8	int
;	O
hold	long
+=	O
(	O
unsigned	O
long	O
)	O
(	O
*	O
in	pointer
++	O
)	O
<<	O
bits	pointer
;	O
bits	pointer
+=	O
8	int
;	O
}	O
here	struct
=	O
dcode	pointer
[	O
hold	long
&	O
dmask	int
]	O
;	O
dodist	O
:	O
op	char
=	O
(	O
unsigned	O
)	O
(	O
here	struct
.	O
bits	pointer
)	O
;	O
hold	long
>>=	O
op	char
;	O
bits	pointer
-=	O
op	char
;	O
op	char
=	O
(	O
unsigned	O
)	O
(	O
here	struct
.	O
op	char
)	O
;	O
if	O
(	O
op	char
&	O
16	int
)	O
{	O
dist	int
=	O
(	O
unsigned	O
)	O
(	O
here	struct
.	O
val	short
)	O
;	O
op	char
&=	O
15	int
;	O
if	O
(	O
bits	pointer
<	O
op	char
)	O
{	O
hold	long
+=	O
(	O
unsigned	O
long	O
)	O
(	O
*	O
in	pointer
++	O
)	O
<<	O
bits	pointer
;	O
bits	pointer
+=	O
8	int
;	O
if	O
(	O
bits	pointer
<	O
op	char
)	O
{	O
hold	long
+=	O
(	O
unsigned	O
long	O
)	O
(	O
*	O
in	pointer
++	O
)	O
<<	O
bits	pointer
;	O
bits	pointer
+=	O
8	int
;	O
}	O
}	O
dist	int
+=	O
(	O
unsigned	O
)	O
hold	long
&	O
(	O
(	O
1U	int
<<	O
op	char
)	O
-	O
1	int
)	O
;	O
hold	long
>>=	O
op	char
;	O
bits	pointer
-=	O
op	char
;	O
Tracevv	O
(	O
(	O
stderr	O
,	O
"inflate:         distance %u\n"	pointer
,	O
dist	int
)	O
)	O
;	O
op	char
=	O
(	O
unsigned	O
)	O
(	O
out	pointer
-	O
beg	pointer
)	O
;	O
if	O
(	O
dist	int
>	O
op	char
)	O
{	O
op	char
=	O
dist	int
-	O
op	char
;	O
if	O
(	O
op	char
>	O
whave	int
)	O
{	O
if	O
(	O
state	pointer
->	O
sane	int
)	O
{	O
strm	pointer
->	O
msg	pointer
=	O
(	O
char	O
*	O
)	O
"invalid distance too far back"	pointer
;	O
state	pointer
->	O
mode	pointer
=	O
BAD	int
;	O
break	O
;	O
}	O
}	O
from	pointer
=	O
window	pointer
;	O
if	O
(	O
wnext	int
==	O
0	int
)	O
{	O
from	pointer
+=	O
wsize	int
-	O
op	char
;	O
if	O
(	O
op	char
<	O
len	int
)	O
{	O
len	int
-=	O
op	char
;	O
do	O
{	O
*	O
out	pointer
++	O
=	O
*	O
from	pointer
++	O
;	O
}	O
while	O
(	O
--	O
op	char
)	O
;	O
from	pointer
=	O
out	pointer
-	O
dist	int
;	O
}	O
}	O
else	O
if	O
(	O
wnext	int
<	O
op	char
)	O
{	O
from	pointer
+=	O
wsize	int
+	O
wnext	int
-	O
op	char
;	O
op	char
-=	O
wnext	int
;	O
if	O
(	O
op	char
<	O
len	int
)	O
{	O
len	int
-=	O
op	char
;	O
do	O
{	O
*	O
out	pointer
++	O
=	O
*	O
from	pointer
++	O
;	O
}	O
while	O
(	O
--	O
op	char
)	O
;	O
from	pointer
=	O
window	pointer
;	O
if	O
(	O
wnext	int
<	O
len	int
)	O
{	O
op	char
=	O
wnext	int
;	O
len	int
-=	O
op	char
;	O
do	O
{	O
*	O
out	pointer
++	O
=	O
*	O
from	pointer
++	O
;	O
}	O
while	O
(	O
--	O
op	char
)	O
;	O
from	pointer
=	O
out	pointer
-	O
dist	int
;	O
}	O
}	O
}	O
else	O
{	O
from	pointer
+=	O
wnext	int
-	O
op	char
;	O
if	O
(	O
op	char
<	O
len	int
)	O
{	O
len	int
-=	O
op	char
;	O
do	O
{	O
*	O
out	pointer
++	O
=	O
*	O
from	pointer
++	O
;	O
}	O
while	O
(	O
--	O
op	char
)	O
;	O
from	pointer
=	O
out	pointer
-	O
dist	int
;	O
}	O
}	O
while	O
(	O
len	int
>	O
2	int
)	O
{	O
*	O
out	pointer
++	O
=	O
*	O
from	pointer
++	O
;	O
*	O
out	pointer
++	O
=	O
*	O
from	pointer
++	O
;	O
*	O
out	pointer
++	O
=	O
*	O
from	pointer
++	O
;	O
len	int
-=	O
3	int
;	O
}	O
if	O
(	O
len	int
)	O
{	O
*	O
out	pointer
++	O
=	O
*	O
from	pointer
++	O
;	O
if	O
(	O
len	int
>	O
1	int
)	O
*	O
out	pointer
++	O
=	O
*	O
from	pointer
++	O
;	O
}	O
}	O
else	O
{	O
from	pointer
=	O
out	pointer
-	O
dist	int
;	O
do	O
{	O
*	O
out	pointer
++	O
=	O
*	O
from	pointer
++	O
;	O
*	O
out	pointer
++	O
=	O
*	O
from	pointer
++	O
;	O
*	O
out	pointer
++	O
=	O
*	O
from	pointer
++	O
;	O
len	int
-=	O
3	int
;	O
}	O
while	O
(	O
len	int
>	O
2	int
)	O
;	O
if	O
(	O
len	int
)	O
{	O
*	O
out	pointer
++	O
=	O
*	O
from	pointer
++	O
;	O
if	O
(	O
len	int
>	O
1	int
)	O
*	O
out	pointer
++	O
=	O
*	O
from	pointer
++	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
(	O
op	char
&	O
64	int
)	O
==	O
0	int
)	O
{	O
here	struct
=	O
dcode	pointer
[	O
here	struct
.	O
val	short
+	O
(	O
hold	long
&	O
(	O
(	O
1U	int
<<	O
op	char
)	O
-	O
1	int
)	O
)	O
]	O
;	O
goto	O
dodist	O
;	O
}	O
else	O
{	O
strm	pointer
->	O
msg	pointer
=	O
(	O
char	O
*	O
)	O
"invalid distance code"	pointer
;	O
state	pointer
->	O
mode	pointer
=	O
BAD	int
;	O
break	O
;	O
}	O
}	O
else	O
if	O
(	O
(	O
op	char
&	O
64	int
)	O
==	O
0	int
)	O
{	O
here	struct
=	O
lcode	pointer
[	O
here	struct
.	O
val	short
+	O
(	O
hold	long
&	O
(	O
(	O
1U	int
<<	O
op	char
)	O
-	O
1	int
)	O
)	O
]	O
;	O
goto	O
dolen	O
;	O
}	O
else	O
if	O
(	O
op	char
&	O
32	int
)	O
{	O
Tracevv	O
(	O
(	O
stderr	O
,	O
"inflate:         end of block\n"	pointer
)	O
)	O
;	O
state	pointer
->	O
mode	pointer
=	O
TYPE	int
;	O
break	O
;	O
}	O
else	O
{	O
strm	pointer
->	O
msg	pointer
=	O
(	O
char	O
*	O
)	O
"invalid literal/length code"	pointer
;	O
state	pointer
->	O
mode	pointer
=	O
BAD	int
;	O
break	O
;	O
}	O
}	O
while	O
(	O
in	pointer
<	O
last	int
&&	O
out	pointer
<	O
end	pointer
)	O
;	O
len	int
=	O
bits	pointer
>>	O
3	int
;	O
in	pointer
-=	O
len	int
;	O
bits	pointer
-=	O
len	int
<<	O
3	int
;	O
hold	long
&=	O
(	O
1U	int
<<	O
bits	pointer
)	O
-	O
1	int
;	O
strm	pointer
->	O
next_in	pointer
=	O
in	pointer
;	O
strm	pointer
->	O
next_out	pointer
=	O
out	pointer
;	O
strm	pointer
->	O
avail_in	int
=	O
(	O
unsigned	O
)	O
(	O
in	pointer
<	O
last	int
?	O
5	int
+	O
(	O
last	int
-	O
in	pointer
)	O
:	O
5	int
-	O
(	O
in	pointer
-	O
last	int
)	O
)	O
;	O
strm	pointer
->	O
avail_out	int
=	O
(	O
unsigned	O
)	O
(	O
out	pointer
<	O
end	pointer
?	O
257	int
+	O
(	O
end	pointer
-	O
out	pointer
)	O
:	O
257	int
-	O
(	O
out	pointer
-	O
end	pointer
)	O
)	O
;	O
state	pointer
->	O
hold	long
=	O
hold	long
;	O
state	pointer
->	O
bits	pointer
=	O
bits	pointer
;	O
return	O
;	O
}	O
