struct	O
header_closure	struct
{	O
mu_header_t	pointer
header	pointer
;	O
int	O
index	function
;	O
char	O
*	O
delim	pointer
;	O
char	O
*	O
*	O
valv	pointer
;	O
size_t	long
valc	long
;	O
size_t	long
vali	long
;	O
}	O
;	O
static	O
void	O
cleanup	function
(	O
struct	O
header_closure	struct
*	O
hc	pointer
)	O
{	O
mu_argcv_free	function
(	O
hc	pointer
->	O
valc	long
,	O
hc	pointer
->	O
valv	pointer
)	O
;	O
hc	pointer
->	O
valv	pointer
=	O
NULL	O
;	O
hc	pointer
->	O
valc	long
=	O
hc	pointer
->	O
vali	long
=	O
0	int
;	O
}	O
static	O
int	O
retrieve_next_header	function
(	O
struct	O
header_closure	struct
*	O
hc	pointer
,	O
char	O
*	O
name	pointer
,	O
char	O
*	O
*	O
pval	pointer
)	O
{	O
const	O
char	O
*	O
buf	pointer
;	O
cleanup	function
(	O
hc	pointer
)	O
;	O
while	O
(	O
!	O
mu_header_sget_field_name	function
(	O
hc	pointer
->	O
header	pointer
,	O
hc	pointer
->	O
index	function
,	O
&	O
buf	pointer
)	O
)	O
{	O
int	O
i	long
=	O
hc	pointer
->	O
index	function
++	O
;	O
if	O
(	O
mu_c_strcasecmp	function
(	O
buf	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
{	O
const	O
char	O
*	O
value	pointer
;	O
struct	O
mu_wordsplit	struct
ws	pointer
;	O
if	O
(	O
mu_header_sget_field_value	function
(	O
hc	pointer
->	O
header	pointer
,	O
i	long
,	O
&	O
value	pointer
)	O
)	O
return	O
1	int
;	O
ws	pointer
.	O
ws_delim	pointer
=	O
hc	pointer
->	O
delim	pointer
;	O
if	O
(	O
mu_wordsplit	struct
(	O
value	pointer
,	O
&	O
ws	pointer
,	O
MU_WRDSF_DELIM	O
|	O
MU_WRDSF_SQUEEZE_DELIMS	O
|	O
MU_WRDSF_WS	O
|	O
MU_WRDSF_NOVAR	O
|	O
MU_WRDSF_NOCMD	O
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot split line `%s': %s"	pointer
)	O
,	O
value	pointer
,	O
mu_wordsplit_strerror	function
(	O
&	O
ws	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
ws	pointer
.	O
ws_wordc	long
==	O
0	int
)	O
{	O
cleanup	function
(	O
hc	pointer
)	O
;	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
return	O
1	int
;	O
}	O
mu_wordsplit_get_words	function
(	O
&	O
ws	pointer
,	O
&	O
hc	pointer
->	O
valc	long
,	O
&	O
hc	pointer
->	O
valv	pointer
)	O
;	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
hc	pointer
->	O
vali	long
=	O
0	int
;	O
*	O
pval	pointer
=	O
hc	pointer
->	O
valv	pointer
[	O
hc	pointer
->	O
vali	long
++	O
]	O
;	O
return	O
0	int
;	O
}	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
list_retrieve_header	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
,	O
size_t	long
idx	long
,	O
char	O
*	O
*	O
pval	pointer
)	O
{	O
struct	O
header_closure	struct
*	O
hc	pointer
=	O
data	pointer
;	O
char	O
*	O
p	pointer
;	O
if	O
(	O
idx	long
==	O
0	int
)	O
hc	pointer
->	O
index	function
=	O
1	int
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
!	O
hc	pointer
->	O
valv	pointer
)	O
{	O
if	O
(	O
retrieve_next_header	function
(	O
hc	pointer
,	O
(	O
char	O
*	O
)	O
item	pointer
,	O
&	O
p	pointer
)	O
)	O
return	O
MU_ERR_NOENT	O
;	O
}	O
else	O
if	O
(	O
hc	pointer
->	O
vali	long
==	O
hc	pointer
->	O
valc	long
)	O
{	O
cleanup	function
(	O
hc	pointer
)	O
;	O
continue	O
;	O
}	O
else	O
p	pointer
=	O
hc	pointer
->	O
valv	pointer
[	O
hc	pointer
->	O
vali	long
++	O
]	O
;	O
if	O
(	O
(	O
*	O
pval	pointer
=	O
strdup	function
(	O
p	pointer
)	O
)	O
==	O
NULL	O
)	O
return	O
errno	O
;	O
return	O
0	int
;	O
}	O
return	O
MU_ERR_NOENT	O
;	O
}	O
static	O
int	O
list_test	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
mu_sieve_value_t	struct
*	O
h	pointer
,	O
*	O
v	array
;	O
struct	O
header_closure	struct
clos	pointer
;	O
int	O
result	pointer
;	O
memset	function
(	O
&	O
clos	pointer
,	O
0	int
,	O
sizeof	O
clos	pointer
)	O
;	O
if	O
(	O
!	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"delim"	pointer
,	O
SVT_STRING	int
,	O
&	O
clos	pointer
.	O
delim	pointer
)	O
)	O
clos	pointer
.	O
delim	pointer
=	O
","	pointer
;	O
h	pointer
=	O
mu_sieve_get_arg_untyped	function
(	O
mach	pointer
,	O
0	int
)	O
;	O
v	array
=	O
mu_sieve_get_arg_untyped	function
(	O
mach	pointer
,	O
1	int
)	O
;	O
mu_message_get_header	function
(	O
mu_sieve_get_message	function
(	O
mach	pointer
)	O
,	O
&	O
clos	pointer
.	O
header	pointer
)	O
;	O
result	pointer
=	O
mu_sieve_vlist_compare	function
(	O
mach	pointer
,	O
h	pointer
,	O
v	array
,	O
list_retrieve_header	function
,	O
NULL	O
,	O
&	O
clos	pointer
)	O
;	O
cleanup	function
(	O
&	O
clos	pointer
)	O
;	O
return	O
result	pointer
;	O
}	O
static	O
mu_sieve_data_type	enum
list_req_args	array
[	O
]	O
=	O
{	O
SVT_STRING_LIST	int
,	O
SVT_STRING_LIST	int
,	O
SVT_VOID	int
}	O
;	O
static	O
mu_sieve_tag_def_t	struct
match_part_tags	array
[	O
]	O
=	O
{	O
{	O
"is"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
"contains"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
"matches"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
"regex"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
"count"	pointer
,	O
SVT_STRING	int
}	O
,	O
{	O
"value"	pointer
,	O
SVT_STRING	int
}	O
,	O
{	O
"comparator"	pointer
,	O
SVT_STRING	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_tag_def_t	struct
delim_part_tags	array
[	O
]	O
=	O
{	O
{	O
"delim"	pointer
,	O
SVT_STRING	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_tag_group_t	struct
list_tag_groups	array
[	O
]	O
=	O
{	O
{	O
match_part_tags	array
,	O
mu_sieve_match_part_checker	function
}	O
,	O
{	O
delim_part_tags	array
,	O
NULL	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
int	O
SIEVE_EXPORT	O
(	O
list	pointer
,	O
init	O
)	O
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
mu_sieve_register_test	function
(	O
mach	pointer
,	O
"list"	pointer
,	O
list_test	function
,	O
list_req_args	array
,	O
list_tag_groups	array
,	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
