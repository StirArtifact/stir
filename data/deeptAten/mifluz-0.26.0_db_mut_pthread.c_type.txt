static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: mut_pthread.c,v 1.3 2000/06/28 16:47:02 loic Exp $"	pointer
;	O
int	O
__db_pthread_mutex_init	function
(	O
dbenv	pointer
,	O
mutexp	pointer
,	O
flags	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
MUTEX	struct
*	O
mutexp	pointer
;	O
u_int32_t	int
flags	int
;	O
{	O
int	O
ret	int
;	O
ret	int
=	O
0	int
;	O
memset	function
(	O
mutexp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
mutexp	pointer
)	O
)	O
;	O
if	O
(	O
LF_ISSET	O
(	O
MUTEX_THREAD	int
)	O
||	O
F_ISSET	O
(	O
dbenv	pointer
,	O
DB_ENV_PRIVATE	int
)	O
)	O
{	O
if	O
(	O
!	O
F_ISSET	O
(	O
dbenv	pointer
,	O
DB_ENV_THREAD	int
)	O
)	O
{	O
F_SET	O
(	O
mutexp	pointer
,	O
MUTEX_IGNORE	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
F_SET	O
(	O
mutexp	pointer
,	O
MUTEX_THREAD	int
)	O
;	O
}	O
{	O
pthread_condattr_t	union
condattr	union
,	O
*	O
condattrp	pointer
=	O
NULL	O
;	O
pthread_mutexattr_t	union
mutexattr	union
,	O
*	O
mutexattrp	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
F_ISSET	O
(	O
mutexp	pointer
,	O
MUTEX_THREAD	int
)	O
)	O
{	O
ret	int
=	O
pthread_condattr_init	function
(	O
&	O
condattr	union
)	O
;	O
if	O
(	O
ret	int
==	O
0	int
)	O
ret	int
=	O
pthread_condattr_setpshared	function
(	O
&	O
condattr	union
,	O
PTHREAD_PROCESS_SHARED	int
)	O
;	O
condattrp	pointer
=	O
&	O
condattr	union
;	O
if	O
(	O
ret	int
==	O
0	int
)	O
ret	int
=	O
pthread_mutexattr_init	function
(	O
&	O
mutexattr	union
)	O
;	O
if	O
(	O
ret	int
==	O
0	int
)	O
ret	int
=	O
pthread_mutexattr_setpshared	function
(	O
&	O
mutexattr	union
,	O
PTHREAD_PROCESS_SHARED	int
)	O
;	O
mutexattrp	pointer
=	O
&	O
mutexattr	union
;	O
}	O
if	O
(	O
ret	int
==	O
0	int
)	O
ret	int
=	O
pthread_mutex_init	function
(	O
&	O
mutexp	pointer
->	O
mutex	union
,	O
mutexattrp	pointer
)	O
;	O
if	O
(	O
mutexattrp	pointer
!=	O
NULL	O
)	O
pthread_mutexattr_destroy	function
(	O
mutexattrp	pointer
)	O
;	O
if	O
(	O
LF_ISSET	O
(	O
MUTEX_SELF_BLOCK	int
)	O
)	O
{	O
if	O
(	O
ret	int
==	O
0	int
)	O
ret	int
=	O
pthread_cond_init	function
(	O
&	O
mutexp	pointer
->	O
cond	union
,	O
condattrp	pointer
)	O
;	O
F_SET	O
(	O
mutexp	pointer
,	O
MUTEX_SELF_BLOCK	int
)	O
;	O
if	O
(	O
condattrp	pointer
!=	O
NULL	O
)	O
pthread_condattr_destroy	function
(	O
condattrp	pointer
)	O
;	O
}	O
}	O
mutexp	pointer
->	O
spins	int
=	O
CDB___os_spin	function
(	O
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
__db_pthread_mutex_lock	function
(	O
mutexp	pointer
)	O
MUTEX	struct
*	O
mutexp	pointer
;	O
{	O
u_int32_t	int
nspins	int
;	O
int	O
ret	int
,	O
waited	int
;	O
if	O
(	O
!	O
DB_GLOBAL	O
(	O
db_mutexlocks	int
)	O
||	O
F_ISSET	O
(	O
mutexp	pointer
,	O
MUTEX_IGNORE	int
)	O
)	O
return	O
(	O
0	int
)	O
;	O
for	O
(	O
nspins	int
=	O
mutexp	pointer
->	O
spins	int
;	O
nspins	int
>	O
0	int
;	O
--	O
nspins	int
)	O
if	O
(	O
pthread_mutex_trylock	function
(	O
&	O
mutexp	pointer
->	O
mutex	union
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
nspins	int
==	O
0	int
&&	O
(	O
ret	int
=	O
pthread_mutex_lock	function
(	O
&	O
mutexp	pointer
->	O
mutex	union
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
F_ISSET	O
(	O
mutexp	pointer
,	O
MUTEX_SELF_BLOCK	int
)	O
)	O
{	O
for	O
(	O
waited	int
=	O
0	int
;	O
mutexp	pointer
->	O
locked	int
!=	O
0	int
;	O
waited	int
=	O
1	int
)	O
{	O
ret	int
=	O
pthread_cond_wait	function
(	O
&	O
mutexp	pointer
->	O
cond	union
,	O
&	O
mutexp	pointer
->	O
mutex	union
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
&&	O
ret	int
!=	O
ETIME	int
&&	O
ret	int
!=	O
ETIMEDOUT	int
)	O
return	O
(	O
ret	int
)	O
;	O
}	O
if	O
(	O
waited	int
)	O
++	O
mutexp	pointer
->	O
mutex_set_wait	int
;	O
else	O
++	O
mutexp	pointer
->	O
mutex_set_nowait	int
;	O
mutexp	pointer
->	O
locked	int
=	O
1	int
;	O
if	O
(	O
(	O
ret	int
=	O
pthread_mutex_unlock	function
(	O
&	O
mutexp	pointer
->	O
mutex	union
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
nspins	int
==	O
mutexp	pointer
->	O
spins	int
)	O
++	O
mutexp	pointer
->	O
mutex_set_nowait	int
;	O
else	O
++	O
mutexp	pointer
->	O
mutex_set_wait	int
;	O
mutexp	pointer
->	O
locked	int
=	O
1	int
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
__db_pthread_mutex_unlock	function
(	O
mutexp	pointer
)	O
MUTEX	struct
*	O
mutexp	pointer
;	O
{	O
int	O
ret	int
;	O
if	O
(	O
!	O
DB_GLOBAL	O
(	O
db_mutexlocks	int
)	O
||	O
F_ISSET	O
(	O
mutexp	pointer
,	O
MUTEX_IGNORE	int
)	O
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
F_ISSET	O
(	O
mutexp	pointer
,	O
MUTEX_SELF_BLOCK	int
)	O
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
pthread_mutex_lock	function
(	O
&	O
mutexp	pointer
->	O
mutex	union
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
mutexp	pointer
->	O
locked	int
=	O
0	int
;	O
if	O
(	O
(	O
ret	int
=	O
pthread_mutex_unlock	function
(	O
&	O
mutexp	pointer
->	O
mutex	union
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
pthread_cond_signal	function
(	O
&	O
mutexp	pointer
->	O
cond	union
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
}	O
else	O
{	O
mutexp	pointer
->	O
locked	int
=	O
0	int
;	O
if	O
(	O
(	O
ret	int
=	O
pthread_mutex_unlock	function
(	O
&	O
mutexp	pointer
->	O
mutex	union
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
