bool	enum
_pl_h_begin_page	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
HPGL2_MAX_NUM_PENS	int
;	O
i	int
++	O
)	O
if	O
(	O
_plotter	pointer
->	O
hpgl_pen_defined	array
[	O
i	int
]	O
==	O
1	int
)	O
_plotter	pointer
->	O
hpgl_pen_defined	array
[	O
i	int
]	O
=	O
0	int
;	O
_plotter	pointer
->	O
hpgl_pen	int
=	O
1	int
;	O
{	O
bool	enum
undefined_pen_seen	enum
=	O
false	int
;	O
if	O
(	O
_plotter	pointer
->	O
hpgl_can_assign_colors	enum
)	O
for	O
(	O
i	int
=	O
2	int
;	O
i	int
<	O
HPGL2_MAX_NUM_PENS	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
hpgl_pen_defined	array
[	O
i	int
]	O
==	O
0	int
)	O
{	O
_plotter	pointer
->	O
hpgl_free_pen	int
=	O
i	int
;	O
undefined_pen_seen	enum
=	O
true	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
!	O
undefined_pen_seen	enum
)	O
_plotter	pointer
->	O
hpgl_can_assign_colors	enum
=	O
false	int
;	O
}	O
_plotter	pointer
->	O
hpgl_bad_pen	enum
=	O
false	int
;	O
_plotter	pointer
->	O
hpgl_pendown	enum
=	O
false	int
;	O
_plotter	pointer
->	O
hpgl_pen_width	double
=	O
0.001	int
;	O
_plotter	pointer
->	O
hpgl_line_type	int
=	O
HPGL_L_SOLID	O
;	O
_plotter	pointer
->	O
hpgl_cap_style	int
=	O
HPGL_CAP_BUTT	int
;	O
_plotter	pointer
->	O
hpgl_join_style	int
=	O
HPGL_JOIN_MITER	int
;	O
_plotter	pointer
->	O
hpgl_miter_limit	double
=	O
5.0	int
;	O
_plotter	pointer
->	O
hpgl_fill_type	int
=	O
HPGL_FILL_SOLID_BI	int
;	O
_plotter	pointer
->	O
hpgl_fill_option1	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
hpgl_fill_option2	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
hpgl_symbol_set	int
=	O
PCL_ROMAN_8	int
;	O
_plotter	pointer
->	O
hpgl_spacing	int
=	O
0	int
;	O
_plotter	pointer
->	O
hpgl_posture	int
=	O
0	int
;	O
_plotter	pointer
->	O
hpgl_stroke_weight	int
=	O
0	int
;	O
_plotter	pointer
->	O
hpgl_pcl_typeface	int
=	O
PCL_STICK_TYPEFACE	int
;	O
_plotter	pointer
->	O
hpgl_charset_lower	int
=	O
HPGL_CHARSET_ASCII	int
;	O
_plotter	pointer
->	O
hpgl_charset_upper	int
=	O
HPGL_CHARSET_ASCII	int
;	O
_plotter	pointer
->	O
hpgl_rel_char_height	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
hpgl_rel_char_width	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
hpgl_rel_label_rise	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
hpgl_rel_label_run	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
hpgl_tan_char_slant	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
hpgl_position_is_unknown	enum
=	O
true	int
;	O
_plotter	pointer
->	O
hpgl_pos	struct
.	O
x	double
=	O
0	int
;	O
_plotter	pointer
->	O
hpgl_pos	struct
.	O
y	double
=	O
0	int
;	O
_maybe_switch_to_hpgl	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
hpgl_version	int
==	O
2	int
)	O
{	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"BP;IN;"	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"PS%d;"	pointer
,	O
IROUND	O
(	O
_plotter	pointer
->	O
hpgl_plot_length	double
)	O
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
}	O
else	O
{	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"IN;"	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
hpgl_rotation	int
!=	O
0	int
)	O
{	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"RO%d;"	pointer
,	O
_plotter	pointer
->	O
hpgl_rotation	int
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
}	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"IP%d,%d,%d,%d;"	pointer
,	O
IROUND	O
(	O
_plotter	pointer
->	O
hpgl_p1	struct
.	O
x	double
)	O
,	O
IROUND	O
(	O
_plotter	pointer
->	O
hpgl_p1	struct
.	O
y	double
)	O
,	O
IROUND	O
(	O
_plotter	pointer
->	O
hpgl_p2	struct
.	O
x	double
)	O
,	O
IROUND	O
(	O
_plotter	pointer
->	O
hpgl_p2	struct
.	O
y	double
)	O
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"SC%d,%d,%d,%d;"	pointer
,	O
IROUND	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
xmin	double
)	O
,	O
IROUND	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
xmax	double
)	O
,	O
IROUND	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
ymin	double
)	O
,	O
IROUND	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
ymax	double
)	O
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
hpgl_version	int
==	O
2	int
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
hpgl_can_assign_colors	enum
)	O
{	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"NP%d;"	pointer
,	O
HPGL2_MAX_NUM_PENS	int
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
}	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"WU1;"	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
}	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"SP1;"	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
hpgl_version	int
==	O
2	int
&&	O
_plotter	pointer
->	O
hpgl_use_opaque_mode	enum
)	O
{	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"TR0;"	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
}	O
_freeze_outbuf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
return	O
true	int
;	O
}	O
void	O
_pl_h_maybe_switch_to_hpgl	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
}	O
void	O
_pl_q_maybe_switch_to_hpgl	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
page_number	int
>	O
1	int
)	O
{	O
strcpy	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"\f"	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
}	O
strcpy	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"\033%0B\n"	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
}	O
