struct	O
linenum_info	struct
{	O
struct	O
linenum_info	struct
*	O
next	pointer
;	O
struct	O
linenum_info	struct
*	O
prev	pointer
;	O
POSITION	long
pos	long
;	O
POSITION	long
gap	long
;	O
LINENUM	long
line	pointer
;	O
}	O
;	O
static	O
struct	O
linenum_info	struct
anchor	pointer
;	O
static	O
struct	O
linenum_info	struct
*	O
freelist	pointer
;	O
static	O
struct	O
linenum_info	struct
pool	array
[	O
NPOOL	int
]	O
;	O
static	O
struct	O
linenum_info	struct
*	O
spare	pointer
;	O
extern	O
int	O
linenums	int
;	O
extern	O
int	O
sigs	int
;	O
extern	O
int	O
sc_height	int
;	O
extern	O
int	O
screen_trashed	int
;	O
public	O
void	O
clr_linenum	function
(	O
)	O
{	O
struct	O
linenum_info	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
pool	array
;	O
p	pointer
<	O
&	O
pool	array
[	O
NPOOL	int
-	O
2	int
]	O
;	O
p	pointer
++	O
)	O
p	pointer
->	O
next	pointer
=	O
p	pointer
+	O
1	int
;	O
pool	array
[	O
NPOOL	int
-	O
2	int
]	O
.	O
next	pointer
=	O
NULL	O
;	O
freelist	pointer
=	O
pool	array
;	O
spare	pointer
=	O
&	O
pool	array
[	O
NPOOL	int
-	O
1	int
]	O
;	O
anchor	pointer
.	O
next	pointer
=	O
anchor	pointer
.	O
prev	pointer
=	O
&	O
anchor	pointer
;	O
anchor	pointer
.	O
gap	long
=	O
0	int
;	O
anchor	pointer
.	O
pos	long
=	O
(	O
POSITION	long
)	O
0	int
;	O
anchor	pointer
.	O
line	pointer
=	O
1	int
;	O
}	O
static	O
void	O
calcgap	function
(	O
p	pointer
)	O
struct	O
linenum_info	struct
*	O
p	pointer
;	O
{	O
if	O
(	O
p	pointer
==	O
&	O
anchor	pointer
||	O
p	pointer
->	O
next	pointer
==	O
&	O
anchor	pointer
)	O
return	O
;	O
p	pointer
->	O
gap	long
=	O
p	pointer
->	O
next	pointer
->	O
pos	long
-	O
p	pointer
->	O
prev	pointer
->	O
pos	long
;	O
}	O
public	O
void	O
add_lnum	function
(	O
linenum	long
,	O
pos	long
)	O
LINENUM	long
linenum	long
;	O
POSITION	long
pos	long
;	O
{	O
struct	O
linenum_info	struct
*	O
p	pointer
;	O
struct	O
linenum_info	struct
*	O
new	pointer
;	O
struct	O
linenum_info	struct
*	O
nextp	pointer
;	O
struct	O
linenum_info	struct
*	O
prevp	pointer
;	O
POSITION	long
mingap	long
;	O
for	O
(	O
p	pointer
=	O
anchor	pointer
.	O
next	pointer
;	O
p	pointer
!=	O
&	O
anchor	pointer
&&	O
p	pointer
->	O
pos	long
<	O
pos	long
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
if	O
(	O
p	pointer
->	O
line	pointer
==	O
linenum	long
)	O
return	O
;	O
nextp	pointer
=	O
p	pointer
;	O
prevp	pointer
=	O
p	pointer
->	O
prev	pointer
;	O
if	O
(	O
freelist	pointer
!=	O
NULL	O
)	O
{	O
new	pointer
=	O
freelist	pointer
;	O
freelist	pointer
=	O
freelist	pointer
->	O
next	pointer
;	O
}	O
else	O
{	O
new	pointer
=	O
spare	pointer
;	O
spare	pointer
=	O
NULL	O
;	O
}	O
new	pointer
->	O
next	pointer
=	O
nextp	pointer
;	O
new	pointer
->	O
prev	pointer
=	O
prevp	pointer
;	O
new	pointer
->	O
pos	long
=	O
pos	long
;	O
new	pointer
->	O
line	pointer
=	O
linenum	long
;	O
nextp	pointer
->	O
prev	pointer
=	O
new	pointer
;	O
prevp	pointer
->	O
next	pointer
=	O
new	pointer
;	O
calcgap	function
(	O
new	pointer
)	O
;	O
calcgap	function
(	O
nextp	pointer
)	O
;	O
calcgap	function
(	O
prevp	pointer
)	O
;	O
if	O
(	O
spare	pointer
==	O
NULL	O
)	O
{	O
mingap	long
=	O
anchor	pointer
.	O
next	pointer
->	O
gap	long
;	O
for	O
(	O
p	pointer
=	O
anchor	pointer
.	O
next	pointer
;	O
p	pointer
->	O
next	pointer
!=	O
&	O
anchor	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
p	pointer
->	O
gap	long
<=	O
mingap	long
)	O
{	O
spare	pointer
=	O
p	pointer
;	O
mingap	long
=	O
p	pointer
->	O
gap	long
;	O
}	O
}	O
spare	pointer
->	O
next	pointer
->	O
prev	pointer
=	O
spare	pointer
->	O
prev	pointer
;	O
spare	pointer
->	O
prev	pointer
->	O
next	pointer
=	O
spare	pointer
->	O
next	pointer
;	O
}	O
}	O
static	O
void	O
longloopmessage	function
(	O
)	O
{	O
ierror	function
(	O
"Calculating line numbers"	pointer
,	O
NULL_PARG	O
)	O
;	O
}	O
static	O
int	O
loopcount	int
;	O
static	O
time_type	O
startime	long
;	O
static	O
void	O
longish	function
(	O
)	O
{	O
if	O
(	O
loopcount	int
>=	O
0	int
&&	O
++	O
loopcount	int
>	O
100	int
)	O
{	O
loopcount	int
=	O
0	int
;	O
if	O
(	O
get_time	function
(	O
)	O
>=	O
startime	long
+	O
LONGTIME	O
)	O
{	O
longloopmessage	function
(	O
)	O
;	O
loopcount	int
=	O
-	O
1	int
;	O
}	O
}	O
}	O
static	O
void	O
abort_long	function
(	O
)	O
{	O
if	O
(	O
linenums	int
==	O
OPT_ONPLUS	int
)	O
screen_trashed	int
=	O
1	int
;	O
linenums	int
=	O
0	int
;	O
error	function
(	O
"Line numbers turned off"	pointer
,	O
NULL_PARG	O
)	O
;	O
}	O
public	O
LINENUM	long
find_linenum	function
(	O
pos	long
)	O
POSITION	long
pos	long
;	O
{	O
struct	O
linenum_info	struct
*	O
p	pointer
;	O
LINENUM	long
linenum	long
;	O
POSITION	long
cpos	long
;	O
if	O
(	O
!	O
linenums	int
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
pos	long
==	O
NULL_POSITION	O
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
pos	long
<=	O
ch_zero	O
(	O
)	O
)	O
return	O
(	O
1	int
)	O
;	O
for	O
(	O
p	pointer
=	O
anchor	pointer
.	O
next	pointer
;	O
p	pointer
!=	O
&	O
anchor	pointer
&&	O
p	pointer
->	O
pos	long
<	O
pos	long
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
continue	O
;	O
if	O
(	O
p	pointer
->	O
pos	long
==	O
pos	long
)	O
return	O
(	O
p	pointer
->	O
line	pointer
)	O
;	O
startime	long
=	O
get_time	function
(	O
)	O
;	O
if	O
(	O
p	pointer
==	O
&	O
anchor	pointer
||	O
pos	long
-	O
p	pointer
->	O
prev	pointer
->	O
pos	long
<	O
p	pointer
->	O
pos	long
-	O
pos	long
)	O
{	O
p	pointer
=	O
p	pointer
->	O
prev	pointer
;	O
if	O
(	O
ch_seek	function
(	O
p	pointer
->	O
pos	long
)	O
)	O
return	O
(	O
0	int
)	O
;	O
loopcount	int
=	O
0	int
;	O
for	O
(	O
linenum	long
=	O
p	pointer
->	O
line	pointer
,	O
cpos	long
=	O
p	pointer
->	O
pos	long
;	O
cpos	long
<	O
pos	long
;	O
linenum	long
++	O
)	O
{	O
cpos	long
=	O
forw_raw_line	function
(	O
cpos	long
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
(	O
int	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
ABORT_SIGS	O
(	O
)	O
)	O
{	O
abort_long	function
(	O
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
if	O
(	O
cpos	long
==	O
NULL_POSITION	O
)	O
return	O
(	O
0	int
)	O
;	O
longish	function
(	O
)	O
;	O
}	O
add_lnum	function
(	O
linenum	long
,	O
cpos	long
)	O
;	O
if	O
(	O
cpos	long
>	O
pos	long
)	O
linenum	long
--	O
;	O
}	O
else	O
{	O
if	O
(	O
ch_seek	function
(	O
p	pointer
->	O
pos	long
)	O
)	O
return	O
(	O
0	int
)	O
;	O
loopcount	int
=	O
0	int
;	O
for	O
(	O
linenum	long
=	O
p	pointer
->	O
line	pointer
,	O
cpos	long
=	O
p	pointer
->	O
pos	long
;	O
cpos	long
>	O
pos	long
;	O
linenum	long
--	O
)	O
{	O
cpos	long
=	O
back_raw_line	function
(	O
cpos	long
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
(	O
int	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
ABORT_SIGS	O
(	O
)	O
)	O
{	O
abort_long	function
(	O
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
if	O
(	O
cpos	long
==	O
NULL_POSITION	O
)	O
return	O
(	O
0	int
)	O
;	O
longish	function
(	O
)	O
;	O
}	O
add_lnum	function
(	O
linenum	long
,	O
cpos	long
)	O
;	O
}	O
return	O
(	O
linenum	long
)	O
;	O
}	O
public	O
POSITION	long
find_pos	function
(	O
linenum	long
)	O
LINENUM	long
linenum	long
;	O
{	O
struct	O
linenum_info	struct
*	O
p	pointer
;	O
POSITION	long
cpos	long
;	O
LINENUM	long
clinenum	long
;	O
if	O
(	O
linenum	long
<=	O
1	int
)	O
return	O
(	O
ch_zero	O
(	O
)	O
)	O
;	O
for	O
(	O
p	pointer
=	O
anchor	pointer
.	O
next	pointer
;	O
p	pointer
!=	O
&	O
anchor	pointer
&&	O
p	pointer
->	O
line	pointer
<	O
linenum	long
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
continue	O
;	O
if	O
(	O
p	pointer
->	O
line	pointer
==	O
linenum	long
)	O
return	O
(	O
p	pointer
->	O
pos	long
)	O
;	O
if	O
(	O
p	pointer
==	O
&	O
anchor	pointer
||	O
linenum	long
-	O
p	pointer
->	O
prev	pointer
->	O
line	pointer
<	O
p	pointer
->	O
line	pointer
-	O
linenum	long
)	O
{	O
p	pointer
=	O
p	pointer
->	O
prev	pointer
;	O
if	O
(	O
ch_seek	function
(	O
p	pointer
->	O
pos	long
)	O
)	O
return	O
(	O
NULL_POSITION	O
)	O
;	O
for	O
(	O
clinenum	long
=	O
p	pointer
->	O
line	pointer
,	O
cpos	long
=	O
p	pointer
->	O
pos	long
;	O
clinenum	long
<	O
linenum	long
;	O
clinenum	long
++	O
)	O
{	O
cpos	long
=	O
forw_raw_line	function
(	O
cpos	long
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
(	O
int	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
ABORT_SIGS	O
(	O
)	O
)	O
return	O
(	O
NULL_POSITION	O
)	O
;	O
if	O
(	O
cpos	long
==	O
NULL_POSITION	O
)	O
return	O
(	O
NULL_POSITION	O
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
ch_seek	function
(	O
p	pointer
->	O
pos	long
)	O
)	O
return	O
(	O
NULL_POSITION	O
)	O
;	O
for	O
(	O
clinenum	long
=	O
p	pointer
->	O
line	pointer
,	O
cpos	long
=	O
p	pointer
->	O
pos	long
;	O
clinenum	long
>	O
linenum	long
;	O
clinenum	long
--	O
)	O
{	O
cpos	long
=	O
back_raw_line	function
(	O
cpos	long
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
(	O
int	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
ABORT_SIGS	O
(	O
)	O
)	O
return	O
(	O
NULL_POSITION	O
)	O
;	O
if	O
(	O
cpos	long
==	O
NULL_POSITION	O
)	O
return	O
(	O
NULL_POSITION	O
)	O
;	O
}	O
}	O
add_lnum	function
(	O
clinenum	long
,	O
cpos	long
)	O
;	O
return	O
(	O
cpos	long
)	O
;	O
}	O
public	O
LINENUM	long
currline	function
(	O
where	int
)	O
int	O
where	int
;	O
{	O
POSITION	long
pos	long
;	O
POSITION	long
len	int
;	O
LINENUM	long
linenum	long
;	O
pos	long
=	O
position	function
(	O
where	int
)	O
;	O
len	int
=	O
ch_length	function
(	O
)	O
;	O
while	O
(	O
pos	long
==	O
NULL_POSITION	O
&&	O
where	int
>=	O
0	int
&&	O
where	int
<	O
sc_height	int
)	O
pos	long
=	O
position	function
(	O
++	O
where	int
)	O
;	O
if	O
(	O
pos	long
==	O
NULL_POSITION	O
)	O
pos	long
=	O
len	int
;	O
linenum	long
=	O
find_linenum	function
(	O
pos	long
)	O
;	O
if	O
(	O
pos	long
==	O
len	int
)	O
linenum	long
--	O
;	O
return	O
(	O
linenum	long
)	O
;	O
}	O
