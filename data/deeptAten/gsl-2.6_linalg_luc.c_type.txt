static	O
int	O
LU_decomp_L2	function
(	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
gsl_vector_uint	struct
*	O
ipiv	pointer
)	O
;	O
static	O
int	O
LU_decomp_L3	function
(	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
gsl_vector_uint	struct
*	O
ipiv	pointer
)	O
;	O
static	O
int	O
singular	function
(	O
const	O
gsl_matrix_complex	struct
*	O
LU	pointer
)	O
;	O
static	O
int	O
apply_pivots	function
(	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
const	O
gsl_vector_uint	struct
*	O
ipiv	pointer
)	O
;	O
int	O
gsl_linalg_complex_LU_decomp	function
(	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
gsl_permutation	struct
*	O
p	int
,	O
int	O
*	O
signum	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
if	O
(	O
p	int
->	O
size	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"permutation length must match matrix size1"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
const	O
size_t	long
minMN	long
=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
;	O
gsl_vector_uint	struct
*	O
ipiv	pointer
=	O
gsl_vector_uint_alloc	function
(	O
minMN	long
)	O
;	O
gsl_matrix_complex_view	struct
AL	struct
=	O
gsl_matrix_complex_submatrix	function
(	O
A	pointer
,	O
0	int
,	O
0	int
,	O
M	int
,	O
minMN	long
)	O
;	O
size_t	long
i	long
;	O
status	int
=	O
LU_decomp_L3	function
(	O
&	O
AL	struct
.	O
matrix	struct
,	O
ipiv	pointer
)	O
;	O
if	O
(	O
M	int
<	O
N	int
)	O
{	O
gsl_matrix_complex_view	struct
AR	struct
=	O
gsl_matrix_complex_submatrix	function
(	O
A	pointer
,	O
0	int
,	O
M	int
,	O
M	int
,	O
N	int
-	O
M	int
)	O
;	O
apply_pivots	function
(	O
&	O
AR	struct
.	O
matrix	struct
,	O
ipiv	pointer
)	O
;	O
gsl_blas_ztrsm	function
(	O
CblasLeft	int
,	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasUnit	int
,	O
GSL_COMPLEX_ONE	O
,	O
&	O
AL	struct
.	O
matrix	struct
,	O
&	O
AR	struct
.	O
matrix	struct
)	O
;	O
}	O
gsl_permutation_init	function
(	O
p	int
)	O
;	O
*	O
signum	pointer
=	O
1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
minMN	long
;	O
++	O
i	long
)	O
{	O
unsigned	O
int	O
pivi	int
=	O
gsl_vector_uint_get	function
(	O
ipiv	pointer
,	O
i	long
)	O
;	O
if	O
(	O
p	int
->	O
data	pointer
[	O
pivi	int
]	O
!=	O
p	int
->	O
data	pointer
[	O
i	long
]	O
)	O
{	O
size_t	long
tmp	long
=	O
p	int
->	O
data	pointer
[	O
pivi	int
]	O
;	O
p	int
->	O
data	pointer
[	O
pivi	int
]	O
=	O
p	int
->	O
data	pointer
[	O
i	long
]	O
;	O
p	int
->	O
data	pointer
[	O
i	long
]	O
=	O
tmp	long
;	O
*	O
signum	pointer
=	O
-	O
(	O
*	O
signum	pointer
)	O
;	O
}	O
}	O
gsl_vector_uint_free	function
(	O
ipiv	pointer
)	O
;	O
return	O
status	int
;	O
}	O
}	O
static	O
int	O
LU_decomp_L2	function
(	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
gsl_vector_uint	struct
*	O
ipiv	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
const	O
size_t	long
minMN	long
=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
;	O
if	O
(	O
ipiv	pointer
->	O
size	long
!=	O
minMN	long
)	O
{	O
GSL_ERROR	O
(	O
"ipiv length must equal MIN(M,N)"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
,	O
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
minMN	long
;	O
++	O
j	long
)	O
{	O
gsl_vector_complex_view	struct
v	pointer
=	O
gsl_matrix_complex_subcolumn	function
(	O
A	pointer
,	O
j	long
,	O
j	long
,	O
M	int
-	O
j	long
)	O
;	O
size_t	long
j_pivot	long
=	O
j	long
+	O
gsl_blas_izamax	function
(	O
&	O
v	pointer
.	O
vector	struct
)	O
;	O
gsl_vector_complex_view	struct
v1	struct
,	O
v2	struct
;	O
gsl_vector_uint_set	function
(	O
ipiv	pointer
,	O
j	long
,	O
j_pivot	long
)	O
;	O
if	O
(	O
j_pivot	long
!=	O
j	long
)	O
{	O
v1	struct
=	O
gsl_matrix_complex_row	function
(	O
A	pointer
,	O
j	long
)	O
;	O
v2	struct
=	O
gsl_matrix_complex_row	function
(	O
A	pointer
,	O
j_pivot	long
)	O
;	O
gsl_blas_zswap	function
(	O
&	O
v1	struct
.	O
vector	struct
,	O
&	O
v2	struct
.	O
vector	struct
)	O
;	O
}	O
if	O
(	O
j	long
<	O
M	int
-	O
1	int
)	O
{	O
gsl_complex	struct
Ajj	struct
=	O
gsl_matrix_complex_get	function
(	O
A	pointer
,	O
j	long
,	O
j	long
)	O
;	O
gsl_complex	struct
Ajjinv	struct
=	O
gsl_complex_inverse	function
(	O
Ajj	struct
)	O
;	O
if	O
(	O
gsl_complex_abs	function
(	O
Ajj	struct
)	O
>=	O
GSL_DBL_MIN	int
)	O
{	O
v1	struct
=	O
gsl_matrix_complex_subcolumn	function
(	O
A	pointer
,	O
j	long
,	O
j	long
+	O
1	int
,	O
M	int
-	O
j	long
-	O
1	int
)	O
;	O
gsl_blas_zscal	function
(	O
Ajjinv	struct
,	O
&	O
v1	struct
.	O
vector	struct
)	O
;	O
}	O
else	O
{	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
M	int
-	O
j	long
;	O
++	O
i	long
)	O
{	O
gsl_complex	struct
*	O
ptr	pointer
=	O
gsl_matrix_complex_ptr	function
(	O
A	pointer
,	O
j	long
+	O
i	long
,	O
j	long
)	O
;	O
*	O
ptr	pointer
=	O
gsl_complex_mul	function
(	O
*	O
ptr	pointer
,	O
Ajjinv	struct
)	O
;	O
}	O
}	O
}	O
if	O
(	O
j	long
<	O
minMN	long
-	O
1	int
)	O
{	O
gsl_matrix_complex_view	struct
A22	struct
=	O
gsl_matrix_complex_submatrix	function
(	O
A	pointer
,	O
j	long
+	O
1	int
,	O
j	long
+	O
1	int
,	O
M	int
-	O
j	long
-	O
1	int
,	O
N	int
-	O
j	long
-	O
1	int
)	O
;	O
v1	struct
=	O
gsl_matrix_complex_subcolumn	function
(	O
A	pointer
,	O
j	long
,	O
j	long
+	O
1	int
,	O
M	int
-	O
j	long
-	O
1	int
)	O
;	O
v2	struct
=	O
gsl_matrix_complex_subrow	function
(	O
A	pointer
,	O
j	long
,	O
j	long
+	O
1	int
,	O
N	int
-	O
j	long
-	O
1	int
)	O
;	O
gsl_blas_zgeru	function
(	O
GSL_COMPLEX_NEGONE	O
,	O
&	O
v1	struct
.	O
vector	struct
,	O
&	O
v2	struct
.	O
vector	struct
,	O
&	O
A22	struct
.	O
matrix	struct
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
LU_decomp_L3	function
(	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
gsl_vector_uint	struct
*	O
ipiv	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
<	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must have M >= N"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
ipiv	pointer
->	O
size	long
!=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"ipiv length must equal MIN(M,N)"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
<=	O
CROSSOVER_LU	O
)	O
{	O
return	O
LU_decomp_L2	function
(	O
A	pointer
,	O
ipiv	pointer
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
const	O
size_t	long
N1	long
=	O
GSL_LINALG_SPLIT_COMPLEX	O
(	O
N	int
)	O
;	O
const	O
size_t	long
N2	long
=	O
N	int
-	O
N1	long
;	O
const	O
size_t	long
M2	long
=	O
M	int
-	O
N1	long
;	O
gsl_matrix_complex_view	struct
A11	struct
=	O
gsl_matrix_complex_submatrix	function
(	O
A	pointer
,	O
0	int
,	O
0	int
,	O
N1	long
,	O
N1	long
)	O
;	O
gsl_matrix_complex_view	struct
A12	struct
=	O
gsl_matrix_complex_submatrix	function
(	O
A	pointer
,	O
0	int
,	O
N1	long
,	O
N1	long
,	O
N2	long
)	O
;	O
gsl_matrix_complex_view	struct
A21	struct
=	O
gsl_matrix_complex_submatrix	function
(	O
A	pointer
,	O
N1	long
,	O
0	int
,	O
M2	long
,	O
N1	long
)	O
;	O
gsl_matrix_complex_view	struct
A22	struct
=	O
gsl_matrix_complex_submatrix	function
(	O
A	pointer
,	O
N1	long
,	O
N1	long
,	O
M2	long
,	O
N2	long
)	O
;	O
gsl_matrix_complex_view	struct
AL	struct
=	O
gsl_matrix_complex_submatrix	function
(	O
A	pointer
,	O
0	int
,	O
0	int
,	O
M	int
,	O
N1	long
)	O
;	O
gsl_matrix_complex_view	struct
AR	struct
=	O
gsl_matrix_complex_submatrix	function
(	O
A	pointer
,	O
0	int
,	O
N1	long
,	O
M	int
,	O
N2	long
)	O
;	O
gsl_vector_uint_view	struct
ipiv1	struct
=	O
gsl_vector_uint_subvector	function
(	O
ipiv	pointer
,	O
0	int
,	O
N1	long
)	O
;	O
gsl_vector_uint_view	struct
ipiv2	struct
=	O
gsl_vector_uint_subvector	function
(	O
ipiv	pointer
,	O
N1	long
,	O
N2	long
)	O
;	O
size_t	long
i	long
;	O
status	int
=	O
LU_decomp_L3	function
(	O
&	O
AL	struct
.	O
matrix	struct
,	O
&	O
ipiv1	struct
.	O
vector	struct
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
apply_pivots	function
(	O
&	O
AR	struct
.	O
matrix	struct
,	O
&	O
ipiv1	struct
.	O
vector	struct
)	O
;	O
gsl_blas_ztrsm	function
(	O
CblasLeft	int
,	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasUnit	int
,	O
GSL_COMPLEX_ONE	O
,	O
&	O
A11	struct
.	O
matrix	struct
,	O
&	O
A12	struct
.	O
matrix	struct
)	O
;	O
gsl_blas_zgemm	function
(	O
CblasNoTrans	int
,	O
CblasNoTrans	int
,	O
GSL_COMPLEX_NEGONE	O
,	O
&	O
A21	struct
.	O
matrix	struct
,	O
&	O
A12	struct
.	O
matrix	struct
,	O
GSL_COMPLEX_ONE	O
,	O
&	O
A22	struct
.	O
matrix	struct
)	O
;	O
status	int
=	O
LU_decomp_L3	function
(	O
&	O
A22	struct
.	O
matrix	struct
,	O
&	O
ipiv2	struct
.	O
vector	struct
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
apply_pivots	function
(	O
&	O
A21	struct
.	O
matrix	struct
,	O
&	O
ipiv2	struct
.	O
vector	struct
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N2	long
;	O
++	O
i	long
)	O
{	O
unsigned	O
int	O
*	O
ptr	pointer
=	O
gsl_vector_uint_ptr	function
(	O
&	O
ipiv2	struct
.	O
vector	struct
,	O
i	long
)	O
;	O
*	O
ptr	pointer
+=	O
N1	long
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_complex_LU_solve	function
(	O
const	O
gsl_matrix_complex	struct
*	O
LU	pointer
,	O
const	O
gsl_permutation	struct
*	O
p	int
,	O
const	O
gsl_vector_complex	struct
*	O
b	double
,	O
gsl_vector_complex	struct
*	O
x	double
)	O
{	O
if	O
(	O
LU	pointer
->	O
size1	long
!=	O
LU	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"LU matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
LU	pointer
->	O
size1	long
!=	O
p	int
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"permutation length must match matrix size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
LU	pointer
->	O
size1	long
!=	O
b	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match b size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
LU	pointer
->	O
size2	long
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
singular	function
(	O
LU	pointer
)	O
)	O
{	O
GSL_ERROR	O
(	O
"matrix is singular"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
gsl_vector_complex_memcpy	function
(	O
x	double
,	O
b	double
)	O
;	O
status	int
=	O
gsl_linalg_complex_LU_svx	function
(	O
LU	pointer
,	O
p	int
,	O
x	double
)	O
;	O
return	O
status	int
;	O
}	O
}	O
int	O
gsl_linalg_complex_LU_svx	function
(	O
const	O
gsl_matrix_complex	struct
*	O
LU	pointer
,	O
const	O
gsl_permutation	struct
*	O
p	int
,	O
gsl_vector_complex	struct
*	O
x	double
)	O
{	O
if	O
(	O
LU	pointer
->	O
size1	long
!=	O
LU	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"LU matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
LU	pointer
->	O
size1	long
!=	O
p	int
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"permutation length must match matrix size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
LU	pointer
->	O
size1	long
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution/rhs size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
singular	function
(	O
LU	pointer
)	O
)	O
{	O
GSL_ERROR	O
(	O
"matrix is singular"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
{	O
gsl_permute_vector_complex	function
(	O
p	int
,	O
x	double
)	O
;	O
gsl_blas_ztrsv	function
(	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasUnit	int
,	O
LU	pointer
,	O
x	double
)	O
;	O
gsl_blas_ztrsv	function
(	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
LU	pointer
,	O
x	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_complex_LU_refine	function
(	O
const	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
const	O
gsl_matrix_complex	struct
*	O
LU	pointer
,	O
const	O
gsl_permutation	struct
*	O
p	int
,	O
const	O
gsl_vector_complex	struct
*	O
b	double
,	O
gsl_vector_complex	struct
*	O
x	double
,	O
gsl_vector_complex	struct
*	O
work	pointer
)	O
{	O
if	O
(	O
A	pointer
->	O
size1	long
!=	O
A	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix a must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
if	O
(	O
LU	pointer
->	O
size1	long
!=	O
LU	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"LU matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
A	pointer
->	O
size1	long
!=	O
LU	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"LU matrix must be decomposition of a"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
LU	pointer
->	O
size1	long
!=	O
p	int
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"permutation length must match matrix size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
LU	pointer
->	O
size1	long
!=	O
b	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match b size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
LU	pointer
->	O
size1	long
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
LU	pointer
->	O
size1	long
!=	O
work	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match workspace size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
singular	function
(	O
LU	pointer
)	O
)	O
{	O
GSL_ERROR	O
(	O
"matrix is singular"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
gsl_vector_complex_memcpy	function
(	O
work	pointer
,	O
b	double
)	O
;	O
{	O
gsl_complex	struct
one	struct
=	O
GSL_COMPLEX_ONE	O
;	O
gsl_complex	struct
negone	struct
=	O
GSL_COMPLEX_NEGONE	O
;	O
gsl_blas_zgemv	function
(	O
CblasNoTrans	int
,	O
one	struct
,	O
A	pointer
,	O
x	double
,	O
negone	struct
,	O
work	pointer
)	O
;	O
}	O
status	int
=	O
gsl_linalg_complex_LU_svx	function
(	O
LU	pointer
,	O
p	int
,	O
work	pointer
)	O
;	O
{	O
gsl_complex	struct
negone	struct
=	O
GSL_COMPLEX_NEGONE	O
;	O
gsl_blas_zaxpy	function
(	O
negone	struct
,	O
work	pointer
,	O
x	double
)	O
;	O
}	O
return	O
status	int
;	O
}	O
}	O
int	O
gsl_linalg_complex_LU_invert	function
(	O
const	O
gsl_matrix_complex	struct
*	O
LU	pointer
,	O
const	O
gsl_permutation	struct
*	O
p	int
,	O
gsl_matrix_complex	struct
*	O
inverse	pointer
)	O
{	O
if	O
(	O
LU	pointer
->	O
size1	long
!=	O
LU	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"LU matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
LU	pointer
->	O
size1	long
!=	O
p	int
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"permutation length must match matrix size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
inverse	pointer
->	O
size1	long
!=	O
LU	pointer
->	O
size1	long
||	O
inverse	pointer
->	O
size2	long
!=	O
LU	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"inverse matrix must match LU matrix dimensions"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_matrix_complex_memcpy	function
(	O
inverse	pointer
,	O
LU	pointer
)	O
;	O
return	O
gsl_linalg_complex_LU_invx	function
(	O
inverse	pointer
,	O
p	int
)	O
;	O
}	O
}	O
int	O
gsl_linalg_complex_LU_invx	function
(	O
gsl_matrix_complex	struct
*	O
LU	pointer
,	O
const	O
gsl_permutation	struct
*	O
p	int
)	O
{	O
if	O
(	O
LU	pointer
->	O
size1	long
!=	O
LU	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"LU matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
LU	pointer
->	O
size1	long
!=	O
p	int
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"permutation length must match matrix size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
singular	function
(	O
LU	pointer
)	O
)	O
{	O
GSL_ERROR	O
(	O
"matrix is singular"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
const	O
size_t	long
N	int
=	O
LU	pointer
->	O
size1	long
;	O
size_t	long
i	long
;	O
status	int
=	O
gsl_linalg_complex_tri_invert	function
(	O
CblasUpper	int
,	O
CblasNonUnit	int
,	O
LU	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
gsl_linalg_complex_tri_invert	function
(	O
CblasLower	int
,	O
CblasUnit	int
,	O
LU	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
gsl_linalg_complex_tri_UL	function
(	O
LU	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
gsl_vector_complex_view	struct
v	pointer
=	O
gsl_matrix_complex_row	function
(	O
LU	pointer
,	O
i	long
)	O
;	O
gsl_permute_vector_complex_inverse	function
(	O
p	int
,	O
&	O
v	pointer
.	O
vector	struct
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
gsl_complex	struct
gsl_linalg_complex_LU_det	function
(	O
gsl_matrix_complex	struct
*	O
LU	pointer
,	O
int	O
signum	pointer
)	O
{	O
size_t	long
i	long
,	O
n	int
=	O
LU	pointer
->	O
size1	long
;	O
gsl_complex	struct
det	struct
=	O
gsl_complex_rect	function
(	O
(	O
double	O
)	O
signum	pointer
,	O
0.0	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
gsl_complex	struct
zi	struct
=	O
gsl_matrix_complex_get	function
(	O
LU	pointer
,	O
i	long
,	O
i	long
)	O
;	O
det	struct
=	O
gsl_complex_mul	function
(	O
det	struct
,	O
zi	struct
)	O
;	O
}	O
return	O
det	struct
;	O
}	O
double	O
gsl_linalg_complex_LU_lndet	function
(	O
gsl_matrix_complex	struct
*	O
LU	pointer
)	O
{	O
size_t	long
i	long
,	O
n	int
=	O
LU	pointer
->	O
size1	long
;	O
double	O
lndet	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
gsl_complex	struct
z	double
=	O
gsl_matrix_complex_get	function
(	O
LU	pointer
,	O
i	long
,	O
i	long
)	O
;	O
lndet	double
+=	O
log	function
(	O
gsl_complex_abs	function
(	O
z	double
)	O
)	O
;	O
}	O
return	O
lndet	double
;	O
}	O
gsl_complex	struct
gsl_linalg_complex_LU_sgndet	function
(	O
gsl_matrix_complex	struct
*	O
LU	pointer
,	O
int	O
signum	pointer
)	O
{	O
size_t	long
i	long
,	O
n	int
=	O
LU	pointer
->	O
size1	long
;	O
gsl_complex	struct
phase	struct
=	O
gsl_complex_rect	function
(	O
(	O
double	O
)	O
signum	pointer
,	O
0.0	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
gsl_complex	struct
z	double
=	O
gsl_matrix_complex_get	function
(	O
LU	pointer
,	O
i	long
,	O
i	long
)	O
;	O
double	O
r	double
=	O
gsl_complex_abs	function
(	O
z	double
)	O
;	O
if	O
(	O
r	double
==	O
0	int
)	O
{	O
phase	struct
=	O
gsl_complex_rect	function
(	O
0.0	int
,	O
0.0	int
)	O
;	O
break	O
;	O
}	O
else	O
{	O
z	double
=	O
gsl_complex_div_real	function
(	O
z	double
,	O
r	double
)	O
;	O
phase	struct
=	O
gsl_complex_mul	function
(	O
phase	struct
,	O
z	double
)	O
;	O
}	O
}	O
return	O
phase	struct
;	O
}	O
static	O
int	O
singular	function
(	O
const	O
gsl_matrix_complex	struct
*	O
LU	pointer
)	O
{	O
size_t	long
i	long
,	O
n	int
=	O
LU	pointer
->	O
size1	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
gsl_complex	struct
u	pointer
=	O
gsl_matrix_complex_get	function
(	O
LU	pointer
,	O
i	long
,	O
i	long
)	O
;	O
if	O
(	O
GSL_REAL	O
(	O
u	pointer
)	O
==	O
0	int
&&	O
GSL_IMAG	O
(	O
u	pointer
)	O
==	O
0	int
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
apply_pivots	function
(	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
const	O
gsl_vector_uint	struct
*	O
ipiv	pointer
)	O
{	O
if	O
(	O
0	int
)	O
{	O
}	O
else	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ipiv	pointer
->	O
size	long
;	O
++	O
i	long
)	O
{	O
size_t	long
pi	long
=	O
gsl_vector_uint_get	function
(	O
ipiv	pointer
,	O
i	long
)	O
;	O
if	O
(	O
i	long
!=	O
pi	long
)	O
{	O
gsl_vector_complex_view	struct
v1	struct
=	O
gsl_matrix_complex_row	function
(	O
A	pointer
,	O
i	long
)	O
;	O
gsl_vector_complex_view	struct
v2	struct
=	O
gsl_matrix_complex_row	function
(	O
A	pointer
,	O
pi	long
)	O
;	O
gsl_blas_zswap	function
(	O
&	O
v1	struct
.	O
vector	struct
,	O
&	O
v2	struct
.	O
vector	struct
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
