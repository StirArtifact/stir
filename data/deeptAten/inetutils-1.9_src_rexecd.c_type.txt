void	O
die	function
(	O
int	O
code	int
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
;	O
int	O
doit	function
(	O
int	O
f	int
,	O
struct	O
sockaddr_in	struct
*	O
fromp	pointer
)	O
;	O
const	O
char	O
doc	pointer
[	O
]	O
=	O
"remote execution daemon"	pointer
;	O
static	O
struct	O
argp	struct
argp	struct
=	O
{	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
doc	pointer
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
}	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
struct	O
sockaddr_in	struct
from	struct
;	O
socklen_t	int
fromlen	int
;	O
int	O
sockfd	int
=	O
STDIN_FILENO	int
;	O
int	O
index	function
;	O
set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
iu_argp_init	O
(	O
"rexecd"	pointer
,	O
default_program_authors	array
)	O
;	O
argp_parse	function
(	O
&	O
argp	struct
,	O
argc	int
,	O
argv	pointer
,	O
0	int
,	O
&	O
index	function
,	O
NULL	O
)	O
;	O
if	O
(	O
argc	int
>	O
index	function
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"surplus arguments"	pointer
)	O
;	O
fromlen	int
=	O
sizeof	O
(	O
from	struct
)	O
;	O
if	O
(	O
getpeername	function
(	O
sockfd	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
from	struct
,	O
&	O
fromlen	int
)	O
<	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"getpeername"	pointer
)	O
;	O
doit	function
(	O
sockfd	int
,	O
&	O
from	struct
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
char	O
username	array
[	O
20	int
]	O
=	O
"USER="	pointer
;	O
char	O
logname	array
[	O
23	int
]	O
=	O
"LOGNAME="	pointer
;	O
char	O
homedir	array
[	O
64	int
]	O
=	O
"HOME="	pointer
;	O
char	O
shell	array
[	O
64	int
]	O
=	O
"SHELL="	pointer
;	O
char	O
path	array
[	O
sizeof	O
(	O
PATH_DEFPATH	O
)	O
+	O
sizeof	O
(	O
"PATH="	pointer
)	O
]	O
=	O
"PATH="	pointer
;	O
char	O
*	O
envinit	array
[	O
]	O
=	O
{	O
homedir	array
,	O
shell	array
,	O
path	array
,	O
username	array
,	O
logname	array
,	O
0	int
}	O
;	O
extern	O
char	O
*	O
*	O
environ	pointer
;	O
struct	O
sockaddr_in	struct
a_sin	struct
=	O
{	O
AF_INET	O
}	O
;	O
char	O
*	O
getstr	function
(	O
const	O
char	O
*	O
)	O
;	O
static	O
char	O
*	O
get_user_password	function
(	O
struct	O
passwd	struct
*	O
pwd	pointer
)	O
{	O
char	O
*	O
pw_text	pointer
=	O
pwd	pointer
->	O
pw_passwd	pointer
;	O
struct	O
spwd	struct
*	O
spwd	struct
=	O
getspnam	function
(	O
pwd	pointer
->	O
pw_name	pointer
)	O
;	O
if	O
(	O
spwd	struct
)	O
pw_text	pointer
=	O
spwd	struct
->	O
sp_pwdp	pointer
;	O
return	O
pw_text	pointer
;	O
}	O
int	O
doit	function
(	O
int	O
f	int
,	O
struct	O
sockaddr_in	struct
*	O
fromp	pointer
)	O
{	O
char	O
*	O
cmdbuf	pointer
,	O
*	O
cp	pointer
,	O
*	O
namep	pointer
;	O
char	O
*	O
user	pointer
,	O
*	O
pass	pointer
,	O
*	O
pw_password	pointer
;	O
struct	O
passwd	struct
*	O
pwd	pointer
;	O
int	O
s	int
;	O
unsigned	O
short	O
port	short
;	O
int	O
pv	array
[	O
2	int
]	O
,	O
pid	int
,	O
cc	int
;	O
fd_set	struct
readfrom	struct
,	O
ready	struct
;	O
char	O
buf	array
[	O
BUFSIZ	int
]	O
,	O
sig	char
;	O
int	O
one	int
=	O
1	int
;	O
signal	function
(	O
SIGINT	int
,	O
SIG_DFL	O
)	O
;	O
signal	function
(	O
SIGQUIT	int
,	O
SIG_DFL	O
)	O
;	O
signal	function
(	O
SIGTERM	int
,	O
SIG_DFL	O
)	O
;	O
if	O
(	O
f	int
!=	O
STDIN_FILENO	int
)	O
{	O
dup2	function
(	O
f	int
,	O
STDIN_FILENO	int
)	O
;	O
dup2	function
(	O
f	int
,	O
STDOUT_FILENO	int
)	O
;	O
dup2	function
(	O
f	int
,	O
STDERR_FILENO	int
)	O
;	O
}	O
alarm	function
(	O
60	int
)	O
;	O
port	short
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
char	O
c	char
;	O
if	O
(	O
read	pointer
(	O
f	int
,	O
&	O
c	char
,	O
1	int
)	O
!=	O
1	int
)	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
if	O
(	O
c	char
==	O
0	int
)	O
break	O
;	O
port	short
=	O
port	short
*	O
10	int
+	O
c	char
-	O
'0'	O
;	O
}	O
alarm	function
(	O
0	int
)	O
;	O
if	O
(	O
port	short
!=	O
0	int
)	O
{	O
s	int
=	O
socket	function
(	O
AF_INET	O
,	O
SOCK_STREAM	int
,	O
0	int
)	O
;	O
if	O
(	O
s	int
<	O
0	int
)	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
if	O
(	O
bind	function
(	O
s	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
a_sin	struct
,	O
sizeof	O
(	O
a_sin	struct
)	O
)	O
<	O
0	int
)	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
alarm	function
(	O
60	int
)	O
;	O
fromp	pointer
->	O
sin_port	short
=	O
htons	function
(	O
port	short
)	O
;	O
if	O
(	O
connect	function
(	O
s	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
fromp	pointer
,	O
sizeof	O
(	O
*	O
fromp	pointer
)	O
)	O
<	O
0	int
)	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
alarm	function
(	O
0	int
)	O
;	O
}	O
user	pointer
=	O
getstr	function
(	O
"username"	pointer
)	O
;	O
pass	pointer
=	O
getstr	function
(	O
"password"	pointer
)	O
;	O
cmdbuf	pointer
=	O
getstr	function
(	O
"command"	pointer
)	O
;	O
setpwent	function
(	O
)	O
;	O
pwd	pointer
=	O
getpwnam	function
(	O
user	pointer
)	O
;	O
if	O
(	O
pwd	pointer
==	O
NULL	O
)	O
die	function
(	O
1	int
,	O
"Login incorrect."	pointer
)	O
;	O
endpwent	function
(	O
)	O
;	O
pw_password	pointer
=	O
get_user_password	function
(	O
pwd	pointer
)	O
;	O
if	O
(	O
*	O
pw_password	pointer
!=	O
'\0'	O
)	O
{	O
namep	pointer
=	O
crypt	function
(	O
pass	pointer
,	O
pw_password	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
namep	pointer
,	O
pw_password	pointer
)	O
)	O
die	function
(	O
1	int
,	O
"Password incorrect."	pointer
)	O
;	O
}	O
write	pointer
(	O
STDERR_FILENO	int
,	O
"\0"	pointer
,	O
1	int
)	O
;	O
if	O
(	O
port	short
)	O
{	O
pipe	function
(	O
pv	array
)	O
;	O
pid	int
=	O
fork	function
(	O
)	O
;	O
if	O
(	O
pid	int
==	O
-	O
1	int
)	O
die	function
(	O
1	int
,	O
"Try again."	pointer
)	O
;	O
if	O
(	O
pid	int
)	O
{	O
close	pointer
(	O
STDIN_FILENO	int
)	O
;	O
close	pointer
(	O
STDOUT_FILENO	int
)	O
;	O
close	pointer
(	O
STDERR_FILENO	int
)	O
;	O
close	pointer
(	O
f	int
)	O
;	O
close	pointer
(	O
pv	array
[	O
1	int
]	O
)	O
;	O
FD_ZERO	O
(	O
&	O
readfrom	struct
)	O
;	O
FD_SET	O
(	O
s	int
,	O
&	O
readfrom	struct
)	O
;	O
FD_SET	O
(	O
pv	array
[	O
0	int
]	O
,	O
&	O
readfrom	struct
)	O
;	O
ioctl	function
(	O
pv	array
[	O
1	int
]	O
,	O
FIONBIO	int
,	O
(	O
char	O
*	O
)	O
&	O
one	int
)	O
;	O
do	O
{	O
int	O
maxfd	int
=	O
s	int
;	O
ready	struct
=	O
readfrom	struct
;	O
if	O
(	O
pv	array
[	O
0	int
]	O
>	O
maxfd	int
)	O
maxfd	int
=	O
pv	array
[	O
0	int
]	O
;	O
select	function
(	O
maxfd	int
+	O
1	int
,	O
(	O
fd_set	struct
*	O
)	O
&	O
ready	struct
,	O
(	O
fd_set	struct
*	O
)	O
NULL	O
,	O
(	O
fd_set	struct
*	O
)	O
NULL	O
,	O
(	O
struct	O
timeval	struct
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
FD_ISSET	O
(	O
s	int
,	O
&	O
ready	struct
)	O
)	O
{	O
if	O
(	O
read	pointer
(	O
s	int
,	O
&	O
sig	char
,	O
1	int
)	O
<=	O
0	int
)	O
FD_CLR	O
(	O
s	int
,	O
&	O
readfrom	struct
)	O
;	O
else	O
killpg	function
(	O
pid	int
,	O
sig	char
)	O
;	O
}	O
if	O
(	O
FD_ISSET	O
(	O
pv	array
[	O
0	int
]	O
,	O
&	O
ready	struct
)	O
)	O
{	O
cc	int
=	O
read	pointer
(	O
pv	array
[	O
0	int
]	O
,	O
buf	array
,	O
sizeof	O
(	O
buf	array
)	O
)	O
;	O
if	O
(	O
cc	int
<=	O
0	int
)	O
{	O
shutdown	function
(	O
s	int
,	O
1	int
+	O
1	int
)	O
;	O
FD_CLR	O
(	O
pv	array
[	O
0	int
]	O
,	O
&	O
readfrom	struct
)	O
;	O
}	O
else	O
write	pointer
(	O
s	int
,	O
buf	array
,	O
cc	int
)	O
;	O
}	O
}	O
while	O
(	O
FD_ISSET	O
(	O
pv	array
[	O
0	int
]	O
,	O
&	O
readfrom	struct
)	O
||	O
FD_ISSET	O
(	O
s	int
,	O
&	O
readfrom	struct
)	O
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
setpgid	function
(	O
0	int
,	O
getpid	function
(	O
)	O
)	O
;	O
close	pointer
(	O
s	int
)	O
;	O
close	pointer
(	O
pv	array
[	O
0	int
]	O
)	O
;	O
dup2	function
(	O
pv	array
[	O
1	int
]	O
,	O
STDERR_FILENO	int
)	O
;	O
}	O
if	O
(	O
*	O
pwd	pointer
->	O
pw_shell	pointer
==	O
'\0'	O
)	O
pwd	pointer
->	O
pw_shell	pointer
=	O
PATH_BSHELL	O
;	O
if	O
(	O
f	int
>	O
2	int
)	O
close	pointer
(	O
f	int
)	O
;	O
if	O
(	O
setegid	function
(	O
(	O
gid_t	int
)	O
pwd	pointer
->	O
pw_gid	int
)	O
<	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"failed to set additional groups"	pointer
)	O
;	O
if	O
(	O
setgid	function
(	O
(	O
gid_t	int
)	O
pwd	pointer
->	O
pw_gid	int
)	O
<	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"failed to set group-ID"	pointer
)	O
;	O
if	O
(	O
initgroups	function
(	O
pwd	pointer
->	O
pw_name	pointer
,	O
pwd	pointer
->	O
pw_gid	int
)	O
<	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"failed to initialize the supplementary group access list"	pointer
)	O
;	O
if	O
(	O
setuid	function
(	O
(	O
uid_t	int
)	O
pwd	pointer
->	O
pw_uid	int
)	O
<	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"failed to set user-ID"	pointer
)	O
;	O
if	O
(	O
chdir	function
(	O
pwd	pointer
->	O
pw_dir	pointer
)	O
<	O
0	int
)	O
die	function
(	O
1	int
,	O
"No remote directory."	pointer
)	O
;	O
strcat	function
(	O
path	array
,	O
PATH_DEFPATH	O
)	O
;	O
environ	pointer
=	O
envinit	array
;	O
strncat	function
(	O
homedir	array
,	O
pwd	pointer
->	O
pw_dir	pointer
,	O
sizeof	O
(	O
homedir	array
)	O
-	O
6	int
)	O
;	O
strncat	function
(	O
shell	array
,	O
pwd	pointer
->	O
pw_shell	pointer
,	O
sizeof	O
(	O
shell	array
)	O
-	O
7	int
)	O
;	O
strncat	function
(	O
username	array
,	O
pwd	pointer
->	O
pw_name	pointer
,	O
sizeof	O
(	O
username	array
)	O
-	O
6	int
)	O
;	O
cp	pointer
=	O
strrchr	function
(	O
pwd	pointer
->	O
pw_shell	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
cp	pointer
)	O
cp	pointer
++	O
;	O
else	O
cp	pointer
=	O
pwd	pointer
->	O
pw_shell	pointer
;	O
execl	function
(	O
pwd	pointer
->	O
pw_shell	pointer
,	O
cp	pointer
,	O
"-c"	pointer
,	O
cmdbuf	pointer
,	O
NULL	O
)	O
;	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"executing %s"	pointer
,	O
pwd	pointer
->	O
pw_shell	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
void	O
die	function
(	O
int	O
code	int
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
char	O
buf	array
[	O
BUFSIZ	int
]	O
;	O
int	O
n	int
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
buf	array
[	O
0	int
]	O
=	O
1	int
;	O
n	int
=	O
snprintf	function
(	O
buf	array
+	O
1	int
,	O
sizeof	O
buf	array
-	O
1	int
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
if	O
(	O
n	int
>	O
sizeof	O
buf	array
-	O
1	int
)	O
n	int
=	O
sizeof	O
buf	array
-	O
1	int
;	O
buf	array
[	O
n	int
]	O
=	O
'\n'	O
;	O
write	pointer
(	O
STDERR_FILENO	int
,	O
buf	array
,	O
n	int
)	O
;	O
}	O
char	O
*	O
getstr	function
(	O
const	O
char	O
*	O
err	long
)	O
{	O
size_t	long
buf_len	long
=	O
100	int
;	O
char	O
*	O
buf	array
=	O
malloc	function
(	O
buf_len	long
)	O
,	O
*	O
end	pointer
=	O
buf	array
;	O
if	O
(	O
!	O
buf	array
)	O
die	function
(	O
1	int
,	O
"Out of space reading %s"	pointer
,	O
err	long
)	O
;	O
do	O
{	O
int	O
rd	int
=	O
read	pointer
(	O
STDIN_FILENO	int
,	O
end	pointer
,	O
1	int
)	O
;	O
if	O
(	O
rd	int
<=	O
0	int
)	O
{	O
if	O
(	O
rd	int
==	O
0	int
)	O
die	function
(	O
1	int
,	O
"EOF reading %s"	pointer
,	O
err	long
)	O
;	O
else	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"%s"	pointer
,	O
err	long
)	O
;	O
}	O
end	pointer
+=	O
rd	int
;	O
if	O
(	O
(	O
buf	array
+	O
buf_len	long
-	O
end	pointer
)	O
<	O
(	O
buf_len	long
>>	O
3	int
)	O
)	O
{	O
size_t	long
end_offs	long
=	O
end	pointer
-	O
buf	array
;	O
buf_len	long
+=	O
buf_len	long
;	O
buf	array
=	O
realloc	function
(	O
buf	array
,	O
buf_len	long
)	O
;	O
if	O
(	O
!	O
buf	array
)	O
die	function
(	O
1	int
,	O
"Out of space reading %s"	pointer
,	O
err	long
)	O
;	O
end	pointer
=	O
buf	array
+	O
end_offs	long
;	O
}	O
}	O
while	O
(	O
*	O
(	O
end	pointer
-	O
1	int
)	O
)	O
;	O
return	O
buf	array
;	O
}	O
