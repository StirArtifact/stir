extern	O
struct	O
layer	struct
*	O
flayer	pointer
;	O
extern	O
struct	O
display	struct
*	O
display	struct
,	O
*	O
displays	pointer
;	O
extern	O
struct	O
mchar	struct
mchar_blank	struct
,	O
mchar_so	struct
;	O
static	O
char	O
ListID	array
[	O
]	O
=	O
"display"	pointer
;	O
static	O
int	O
gl_Display_header	function
(	O
struct	O
ListData	struct
*	O
ldata	pointer
)	O
{	O
leftline	function
(	O
"term-type   size         user interface           window       Perms"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
leftline	function
(	O
"---------- ------- ---------- ----------------- ----------     -----"	pointer
,	O
1	int
,	O
0	int
)	O
;	O
return	O
2	int
;	O
}	O
static	O
int	O
gl_Display_footer	function
(	O
struct	O
ListData	struct
*	O
ldata	pointer
)	O
{	O
centerline	function
(	O
"[Press Space to refresh; Return to end.]"	pointer
,	O
flayer	pointer
->	O
l_height	int
-	O
1	int
)	O
;	O
return	O
1	int
;	O
}	O
static	O
int	O
gl_Display_row	function
(	O
struct	O
ListData	struct
*	O
ldata	pointer
,	O
struct	O
ListRow	struct
*	O
lrow	pointer
)	O
{	O
struct	O
display	struct
*	O
d	int
=	O
lrow	pointer
->	O
data	pointer
;	O
char	O
tbuf	array
[	O
80	int
]	O
;	O
static	O
char	O
*	O
blockstates	array
[	O
5	int
]	O
=	O
{	O
"nb"	pointer
,	O
"NB"	pointer
,	O
"Z<"	pointer
,	O
"Z>"	pointer
,	O
"BL"	pointer
}	O
;	O
struct	O
win	struct
*	O
w	pointer
=	O
d	int
->	O
d_fore	pointer
;	O
struct	O
mchar	struct
m_current	struct
=	O
mchar_blank	struct
;	O
m_current	struct
.	O
attr	char
=	O
A_BD	O
;	O
sprintf	function
(	O
tbuf	array
,	O
" %-10.10s%4dx%-4d%10.10s@%-16.16s%s"	pointer
,	O
d	int
->	O
d_termname	array
,	O
d	int
->	O
d_width	int
,	O
d	int
->	O
d_height	int
,	O
d	int
->	O
d_user	pointer
->	O
u_name	array
,	O
d	int
->	O
d_usertty	array
,	O
(	O
d	int
->	O
d_blocked	int
||	O
d	int
->	O
d_nonblock	int
>=	O
0	int
)	O
&&	O
d	int
->	O
d_blocked	int
<=	O
4	int
?	O
blockstates	array
[	O
d	int
->	O
d_blocked	int
]	O
:	O
"  "	pointer
)	O
;	O
if	O
(	O
w	pointer
)	O
{	O
int	O
l	int
=	O
10	int
-	O
strlen	function
(	O
w	pointer
->	O
w_title	pointer
)	O
;	O
if	O
(	O
l	int
<	O
0	int
)	O
l	int
=	O
0	int
;	O
sprintf	function
(	O
tbuf	array
+	O
strlen	function
(	O
tbuf	array
)	O
,	O
"%3d(%.10s)%*s%c%c%c%c"	pointer
,	O
w	pointer
->	O
w_number	int
,	O
w	pointer
->	O
w_title	pointer
,	O
l	int
,	O
""	pointer
,	O
0	int
?	O
'&'	O
:	O
' '	O
,	O
(	O
AclCheckPermWin	function
(	O
d	int
->	O
d_user	pointer
,	O
ACL_READ	int
,	O
w	pointer
)	O
?	O
'-'	O
:	O
(	O
(	O
w	pointer
->	O
w_wlock	int
==	O
WLOCK_OFF	int
||	O
d	int
->	O
d_user	pointer
==	O
w	pointer
->	O
w_wlockuser	pointer
)	O
?	O
'r'	O
:	O
'R'	O
)	O
)	O
,	O
(	O
AclCheckPermWin	function
(	O
d	int
->	O
d_user	pointer
,	O
ACL_READ	int
,	O
w	pointer
)	O
?	O
'-'	O
:	O
(	O
(	O
w	pointer
->	O
w_wlock	int
==	O
WLOCK_OFF	int
)	O
?	O
'w'	O
:	O
(	O
(	O
d	int
->	O
d_user	pointer
==	O
w	pointer
->	O
w_wlockuser	pointer
)	O
?	O
'W'	O
:	O
'v'	O
)	O
)	O
)	O
,	O
(	O
AclCheckPermWin	function
(	O
d	int
->	O
d_user	pointer
,	O
ACL_READ	int
,	O
w	pointer
)	O
?	O
'-'	O
:	O
'x'	O
)	O
)	O
;	O
}	O
leftline	function
(	O
tbuf	array
,	O
lrow	pointer
->	O
y	int
,	O
lrow	pointer
==	O
ldata	pointer
->	O
selected	pointer
?	O
&	O
mchar_so	struct
:	O
d	int
==	O
display	struct
?	O
&	O
m_current	struct
:	O
0	int
)	O
;	O
return	O
1	int
;	O
}	O
static	O
void	O
gl_Display_rebuild	function
(	O
struct	O
ListData	struct
*	O
ldata	pointer
)	O
{	O
struct	O
display	struct
*	O
d	int
;	O
struct	O
ListRow	struct
*	O
row	pointer
=	O
NULL	O
;	O
for	O
(	O
d	int
=	O
displays	pointer
;	O
d	int
;	O
d	int
=	O
d	int
->	O
d_next	pointer
)	O
{	O
row	pointer
=	O
glist_add_row	function
(	O
ldata	pointer
,	O
d	int
,	O
row	pointer
)	O
;	O
if	O
(	O
d	int
==	O
display	struct
)	O
ldata	pointer
->	O
selected	pointer
=	O
row	pointer
;	O
}	O
glist_display_all	function
(	O
ldata	pointer
)	O
;	O
}	O
static	O
int	O
gl_Display_input	function
(	O
struct	O
ListData	struct
*	O
ldata	pointer
,	O
char	O
*	O
*	O
inp	pointer
,	O
int	O
*	O
len	int
)	O
{	O
struct	O
display	struct
*	O
cd	pointer
=	O
display	struct
;	O
unsigned	O
char	O
ch	char
;	O
if	O
(	O
!	O
ldata	pointer
->	O
selected	pointer
)	O
return	O
0	int
;	O
ch	char
=	O
(	O
unsigned	O
char	O
)	O
*	O
*	O
inp	pointer
;	O
++	O
*	O
inp	pointer
;	O
--	O
*	O
len	int
;	O
switch	O
(	O
ch	char
)	O
{	O
case	O
' '	O
:	O
glist_remove_rows	function
(	O
ldata	pointer
)	O
;	O
gl_Display_rebuild	function
(	O
ldata	pointer
)	O
;	O
break	O
;	O
case	O
'\r'	O
:	O
case	O
'\n'	O
:	O
glist_abort	function
(	O
)	O
;	O
*	O
len	int
=	O
0	int
;	O
break	O
;	O
case	O
'd'	O
:	O
case	O
'D'	O
:	O
display	struct
=	O
ldata	pointer
->	O
selected	pointer
->	O
data	pointer
;	O
if	O
(	O
display	struct
==	O
cd	pointer
)	O
break	O
;	O
Detach	function
(	O
ch	char
==	O
'D'	O
?	O
D_REMOTE_POWER	int
:	O
D_REMOTE	int
)	O
;	O
display	struct
=	O
cd	pointer
;	O
glist_remove_rows	function
(	O
ldata	pointer
)	O
;	O
gl_Display_rebuild	function
(	O
ldata	pointer
)	O
;	O
break	O
;	O
default	O
:	O
--	O
*	O
inp	pointer
;	O
++	O
*	O
len	int
;	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
gl_Display_freerow	function
(	O
struct	O
ListData	struct
*	O
ldata	pointer
,	O
struct	O
ListRow	struct
*	O
row	pointer
)	O
{	O
return	O
0	int
;	O
}	O
static	O
int	O
gl_Display_free	function
(	O
struct	O
ListData	struct
*	O
ldata	pointer
)	O
{	O
return	O
0	int
;	O
}	O
static	O
struct	O
GenericList	struct
gl_Display	struct
=	O
{	O
gl_Display_header	function
,	O
gl_Display_footer	function
,	O
gl_Display_row	function
,	O
gl_Display_input	function
,	O
gl_Display_freerow	function
,	O
gl_Display_free	function
,	O
NULL	O
}	O
;	O
void	O
display_displays	function
(	O
)	O
{	O
struct	O
ListData	struct
*	O
ldata	pointer
;	O
if	O
(	O
flayer	pointer
->	O
l_width	int
<	O
10	int
||	O
flayer	pointer
->	O
l_height	int
<	O
5	int
)	O
{	O
LMsg	function
(	O
0	int
,	O
"Window size too small for displays page"	pointer
)	O
;	O
return	O
;	O
}	O
ldata	pointer
=	O
glist_display	function
(	O
&	O
gl_Display	struct
,	O
ListID	array
)	O
;	O
if	O
(	O
!	O
ldata	pointer
)	O
return	O
;	O
gl_Display_rebuild	function
(	O
ldata	pointer
)	O
;	O
}	O
