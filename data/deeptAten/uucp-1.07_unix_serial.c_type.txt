const	O
char	O
serial_rcsid	array
[	O
]	O
=	O
"$Id: serial.c,v 1.78 2002/03/05 19:10:42 ian Rel $"	pointer
;	O
enum	O
tclocal_setting	enum
{	O
SET_CLOCAL	int
,	O
CLEAR_CLOCAL	int
,	O
IGNORE_CLOCAL	int
}	O
;	O
static	O
RETSIGTYPE	void
usalarm	function
P	O
(	O
(	O
int	O
isig	int
)	O
)	O
;	O
static	O
boolean	int
fsserial_init	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
const	O
struct	O
sconncmds	struct
*	O
qcmds	pointer
,	O
const	O
char	O
*	O
zdevice	pointer
)	O
)	O
;	O
static	O
void	O
usserial_free	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
)	O
)	O
;	O
static	O
boolean	int
fsserial_lockfile	function
P	O
(	O
(	O
boolean	int
flok	int
,	O
const	O
struct	O
sconnection	struct
*	O
)	O
)	O
;	O
static	O
boolean	int
fsserial_lock	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
boolean	int
fin	int
,	O
boolean	int
fuser	int
)	O
)	O
;	O
static	O
boolean	int
fsserial_unlock	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
)	O
)	O
;	O
static	O
boolean	int
fsserial_open	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
long	O
ibaud	long
,	O
boolean	int
fwait	int
,	O
boolean	int
fuser	int
,	O
enum	O
tclocal_setting	enum
tlocal	enum
)	O
)	O
;	O
static	O
boolean	int
fsstdin_open	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
long	O
ibaud	long
,	O
boolean	int
fwait	int
,	O
boolean	int
fuser	int
)	O
)	O
;	O
static	O
boolean	int
fsmodem_open	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
long	O
ibaud	long
,	O
boolean	int
fwait	int
,	O
boolean	int
fuser	int
)	O
)	O
;	O
static	O
boolean	int
fsdirect_open	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
long	O
ibaud	long
,	O
boolean	int
fwait	int
,	O
boolean	int
fuser	int
)	O
)	O
;	O
static	O
boolean	int
fsblock	function
P	O
(	O
(	O
struct	O
ssysdep_conn	struct
*	O
q	pointer
,	O
boolean	int
fblock	int
)	O
)	O
;	O
static	O
boolean	int
fsserial_close	function
P	O
(	O
(	O
struct	O
ssysdep_conn	struct
*	O
q	pointer
)	O
)	O
;	O
static	O
boolean	int
fsstdin_close	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
pointer	pointer
puuconf	pointer
,	O
struct	O
uuconf_dialer	struct
*	O
qdialer	pointer
,	O
boolean	int
fsuccess	int
)	O
)	O
;	O
static	O
boolean	int
fsmodem_close	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
pointer	pointer
puuconf	pointer
,	O
struct	O
uuconf_dialer	struct
*	O
qdialer	pointer
,	O
boolean	int
fsuccess	int
)	O
)	O
;	O
static	O
boolean	int
fsdirect_close	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
pointer	pointer
puuconf	pointer
,	O
struct	O
uuconf_dialer	struct
*	O
qdialer	pointer
,	O
boolean	int
fsuccess	int
)	O
)	O
;	O
static	O
boolean	int
fsserial_break	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
)	O
)	O
;	O
static	O
boolean	int
fsstdin_break	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
)	O
)	O
;	O
static	O
boolean	int
fsserial_set	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
enum	O
tparitysetting	enum
tparity	enum
,	O
enum	O
tstripsetting	enum
tstrip	enum
,	O
enum	O
txonxoffsetting	enum
txonxoff	enum
)	O
)	O
;	O
static	O
boolean	int
fsstdin_set	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
enum	O
tparitysetting	enum
tparity	enum
,	O
enum	O
tstripsetting	enum
tstrip	enum
,	O
enum	O
txonxoffsetting	enum
txonxoff	enum
)	O
)	O
;	O
static	O
boolean	int
fsmodem_carrier	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
boolean	int
fcarrier	int
)	O
)	O
;	O
static	O
boolean	int
fsserial_hardflow	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
boolean	int
fhardflow	int
)	O
)	O
;	O
static	O
boolean	int
fsrun_chat	function
P	O
(	O
(	O
int	O
oread	int
,	O
int	O
owrite	int
,	O
char	O
*	O
*	O
pzprog	pointer
)	O
)	O
;	O
static	O
long	O
isserial_baud	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
)	O
)	O
;	O
static	O
const	O
struct	O
sconncmds	struct
sstdincmds	struct
=	O
{	O
usserial_free	function
,	O
NULL	O
,	O
NULL	O
,	O
fsstdin_open	function
,	O
fsstdin_close	function
,	O
NULL	O
,	O
fsdouble_read	function
,	O
fsdouble_write	function
,	O
fsysdep_conn_io	function
,	O
fsstdin_break	function
,	O
fsstdin_set	function
,	O
NULL	O
,	O
fsdouble_chat	function
,	O
isserial_baud	function
}	O
;	O
static	O
const	O
struct	O
sconncmds	struct
smodemcmds	struct
=	O
{	O
usserial_free	function
,	O
fsserial_lock	function
,	O
fsserial_unlock	function
,	O
fsmodem_open	function
,	O
fsmodem_close	function
,	O
fmodem_dial	function
,	O
fsysdep_conn_read	function
,	O
fsysdep_conn_write	function
,	O
fsysdep_conn_io	function
,	O
fsserial_break	function
,	O
fsserial_set	function
,	O
fsmodem_carrier	function
,	O
fsysdep_conn_chat	function
,	O
isserial_baud	function
}	O
;	O
static	O
const	O
struct	O
sconncmds	struct
sdirectcmds	struct
=	O
{	O
usserial_free	function
,	O
fsserial_lock	function
,	O
fsserial_unlock	function
,	O
fsdirect_open	function
,	O
fsdirect_close	function
,	O
NULL	O
,	O
fsysdep_conn_read	function
,	O
fsysdep_conn_write	function
,	O
fsysdep_conn_io	function
,	O
fsserial_break	function
,	O
fsserial_set	function
,	O
NULL	O
,	O
fsysdep_conn_chat	function
,	O
isserial_baud	function
}	O
;	O
static	O
int	O
iSunblock	int
=	O
O_NDELAY	O
|	O
O_NONBLOCK	int
;	O
volatile	O
sig_atomic_t	int
fSalarm	int
;	O
static	O
RETSIGTYPE	void
usalarm	function
(	O
isig	int
)	O
int	O
isig	int
ATTRIBUTE_UNUSED	O
;	O
{	O
fSalarm	int
=	O
TRUE	O
;	O
alarm	function
(	O
1	int
)	O
;	O
}	O
static	O
sigset_t	struct
isblocksigs	function
P	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
sigset_t	struct
isblocksigs	function
(	O
)	O
{	O
sigset_t	struct
sblock	struct
,	O
sold	struct
;	O
(	O
void	O
)	O
(	O
sigemptyset	function
(	O
&	O
sblock	struct
)	O
)	O
;	O
(	O
void	O
)	O
(	O
sigaddset	function
(	O
&	O
sblock	struct
,	O
SIGINT	int
)	O
)	O
;	O
(	O
void	O
)	O
(	O
sigaddset	function
(	O
&	O
sblock	struct
,	O
SIGQUIT	int
)	O
)	O
;	O
(	O
void	O
)	O
(	O
sigaddset	function
(	O
&	O
sblock	struct
,	O
SIGTERM	int
)	O
)	O
;	O
(	O
void	O
)	O
(	O
sigaddset	function
(	O
&	O
sblock	struct
,	O
SIGPIPE	int
)	O
)	O
;	O
(	O
void	O
)	O
sigprocmask	function
(	O
SIG_BLOCK	int
,	O
&	O
sblock	struct
,	O
&	O
sold	struct
)	O
;	O
return	O
sold	struct
;	O
}	O
static	O
boolean	int
fsserial_init	function
(	O
qconn	pointer
,	O
qcmds	pointer
,	O
zdevice	pointer
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
const	O
struct	O
sconncmds	struct
*	O
qcmds	pointer
;	O
const	O
char	O
*	O
zdevice	pointer
;	O
{	O
struct	O
ssysdep_conn	struct
*	O
q	pointer
;	O
q	pointer
=	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
struct	O
ssysdep_conn	struct
)	O
)	O
;	O
if	O
(	O
zdevice	pointer
==	O
NULL	O
&&	O
qconn	pointer
->	O
qport	pointer
!=	O
NULL	O
&&	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_ttype	enum
!=	O
UUCONF_PORTTYPE_STDIN	int
)	O
zdevice	pointer
=	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_zname	pointer
;	O
if	O
(	O
zdevice	pointer
==	O
NULL	O
)	O
q	pointer
->	O
zdevice	pointer
=	O
NULL	O
;	O
else	O
if	O
(	O
*	O
zdevice	pointer
==	O
'/'	O
)	O
q	pointer
->	O
zdevice	pointer
=	O
zbufcpy	function
(	O
zdevice	pointer
)	O
;	O
else	O
{	O
size_t	long
clen	long
;	O
clen	long
=	O
strlen	function
(	O
zdevice	pointer
)	O
;	O
q	pointer
->	O
zdevice	pointer
=	O
zbufalc	function
(	O
sizeof	O
"/dev/"	pointer
+	O
clen	long
)	O
;	O
memcpy	function
(	O
q	pointer
->	O
zdevice	pointer
,	O
"/dev/"	pointer
,	O
sizeof	O
"/dev/"	pointer
-	O
1	int
)	O
;	O
memcpy	function
(	O
q	pointer
->	O
zdevice	pointer
+	O
sizeof	O
"/dev/"	pointer
-	O
1	int
,	O
zdevice	pointer
,	O
clen	long
)	O
;	O
q	pointer
->	O
zdevice	pointer
[	O
sizeof	O
"/dev/"	pointer
+	O
clen	long
-	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
q	pointer
->	O
o	int
=	O
-	O
1	int
;	O
q	pointer
->	O
ord	int
=	O
-	O
1	int
;	O
q	pointer
->	O
owr	int
=	O
-	O
1	int
;	O
q	pointer
->	O
ftli	int
=	O
FALSE	O
;	O
qconn	pointer
->	O
psysdep	pointer
=	O
(	O
pointer	pointer
)	O
q	pointer
;	O
qconn	pointer
->	O
qcmds	pointer
=	O
qcmds	pointer
;	O
return	O
TRUE	O
;	O
}	O
boolean	int
fsysdep_stdin_init	function
(	O
qconn	pointer
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
{	O
(	O
void	O
)	O
chmod	function
(	O
"/dev/tty"	pointer
,	O
S_IRUSR	O
|	O
S_IWUSR	O
)	O
;	O
return	O
fsserial_init	function
(	O
qconn	pointer
,	O
&	O
sstdincmds	struct
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
boolean	int
fsysdep_modem_init	function
(	O
qconn	pointer
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
{	O
return	O
fsserial_init	function
(	O
qconn	pointer
,	O
&	O
smodemcmds	struct
,	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_zdevice	pointer
)	O
;	O
}	O
boolean	int
fsysdep_direct_init	function
(	O
qconn	pointer
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
{	O
return	O
fsserial_init	function
(	O
qconn	pointer
,	O
&	O
sdirectcmds	struct
,	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_sdirect	struct
.	O
uuconf_zdevice	pointer
)	O
;	O
}	O
static	O
void	O
usserial_free	function
(	O
qconn	pointer
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
{	O
struct	O
ssysdep_conn	struct
*	O
qsysdep	pointer
;	O
qsysdep	pointer
=	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
;	O
ubuffree	function
(	O
qsysdep	pointer
->	O
zdevice	pointer
)	O
;	O
xfree	function
(	O
(	O
pointer	pointer
)	O
qsysdep	pointer
)	O
;	O
qconn	pointer
->	O
psysdep	pointer
=	O
NULL	O
;	O
}	O
static	O
boolean	int
fsserial_lockfile	function
(	O
flok	int
,	O
qconn	pointer
)	O
boolean	int
flok	int
;	O
const	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
{	O
struct	O
ssysdep_conn	struct
*	O
qsysdep	pointer
;	O
const	O
char	O
*	O
z	pointer
;	O
char	O
*	O
zalc	pointer
;	O
boolean	int
fret	int
;	O
qsysdep	pointer
=	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
;	O
if	O
(	O
qconn	pointer
->	O
qport	pointer
==	O
NULL	O
)	O
z	pointer
=	O
NULL	O
;	O
else	O
z	pointer
=	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_zlockname	pointer
;	O
zalc	pointer
=	O
NULL	O
;	O
if	O
(	O
z	pointer
==	O
NULL	O
)	O
{	O
{	O
const	O
char	O
*	O
zbase	pointer
;	O
size_t	long
clen	long
;	O
zbase	pointer
=	O
strrchr	function
(	O
qsysdep	pointer
->	O
zdevice	pointer
,	O
'/'	O
)	O
+	O
1	int
;	O
clen	long
=	O
strlen	function
(	O
zbase	pointer
)	O
;	O
zalc	pointer
=	O
zbufalc	function
(	O
sizeof	O
LCK_TEMPLATE	pointer
+	O
clen	long
)	O
;	O
memcpy	function
(	O
zalc	pointer
,	O
LCK_TEMPLATE	pointer
,	O
sizeof	O
LCK_TEMPLATE	pointer
-	O
1	int
)	O
;	O
memcpy	function
(	O
zalc	pointer
+	O
sizeof	O
LCK_TEMPLATE	pointer
-	O
1	int
,	O
zbase	pointer
,	O
clen	long
+	O
1	int
)	O
;	O
z	pointer
=	O
zalc	pointer
;	O
}	O
}	O
if	O
(	O
flok	int
)	O
fret	int
=	O
fsdo_lock	function
(	O
z	pointer
,	O
FALSE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
else	O
fret	int
=	O
fsdo_unlock	function
(	O
z	pointer
,	O
FALSE	O
)	O
;	O
ubuffree	function
(	O
zalc	pointer
)	O
;	O
return	O
fret	int
;	O
}	O
static	O
boolean	int
fsserial_lock	function
(	O
qconn	pointer
,	O
fin	int
,	O
fuser	int
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
boolean	int
fin	int
;	O
boolean	int
fuser	int
;	O
{	O
if	O
(	O
!	O
fsserial_lockfile	function
(	O
TRUE	O
,	O
qconn	pointer
)	O
)	O
return	O
FALSE	O
;	O
{	O
struct	O
ssysdep_conn	struct
*	O
qsysdep	pointer
;	O
int	O
iflag	int
;	O
uid_t	int
ieuid	int
;	O
gid_t	int
iegid	int
;	O
qsysdep	pointer
=	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
;	O
if	O
(	O
fin	int
)	O
iflag	int
=	O
0	int
;	O
else	O
iflag	int
=	O
iSunblock	int
;	O
if	O
(	O
fuser	int
)	O
{	O
if	O
(	O
!	O
fsuser_perms	function
(	O
&	O
ieuid	int
,	O
&	O
iegid	int
)	O
)	O
{	O
(	O
void	O
)	O
fsserial_lockfile	function
(	O
FALSE	O
,	O
qconn	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
qsysdep	pointer
->	O
o	int
=	O
open	function
(	O
qsysdep	pointer
->	O
zdevice	pointer
,	O
O_RDWR	int
|	O
iflag	int
)	O
;	O
if	O
(	O
qsysdep	pointer
->	O
o	int
<	O
0	int
)	O
{	O
if	O
(	O
!	O
fin	int
&&	O
iSunblock	int
!=	O
O_NONBLOCK	int
&&	O
errno	O
==	O
EINVAL	int
)	O
{	O
iSunblock	int
=	O
O_NONBLOCK	int
;	O
qsysdep	pointer
->	O
o	int
=	O
open	function
(	O
qsysdep	pointer
->	O
zdevice	pointer
,	O
O_RDWR	int
|	O
O_NONBLOCK	int
)	O
;	O
}	O
if	O
(	O
qsysdep	pointer
->	O
o	int
<	O
0	int
)	O
{	O
int	O
ierr	int
;	O
ierr	int
=	O
errno	O
;	O
if	O
(	O
fuser	int
)	O
(	O
void	O
)	O
fsuucp_perms	function
(	O
(	O
long	O
)	O
ieuid	int
,	O
(	O
long	O
)	O
iegid	int
)	O
;	O
if	O
(	O
ierr	int
!=	O
EBUSY	int
)	O
ulog	function
(	O
LOG_ERROR	int
,	O
"open (%s): %s"	pointer
,	O
qsysdep	pointer
->	O
zdevice	pointer
,	O
strerror	function
(	O
ierr	int
)	O
)	O
;	O
(	O
void	O
)	O
fsserial_lockfile	function
(	O
FALSE	O
,	O
qconn	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
if	O
(	O
fuser	int
)	O
{	O
if	O
(	O
!	O
fsuucp_perms	function
(	O
(	O
long	O
)	O
ieuid	int
,	O
(	O
long	O
)	O
iegid	int
)	O
)	O
{	O
(	O
void	O
)	O
close	function
(	O
qsysdep	pointer
->	O
o	int
)	O
;	O
qsysdep	pointer
->	O
o	int
=	O
-	O
1	int
;	O
(	O
void	O
)	O
fsserial_lockfile	function
(	O
FALSE	O
,	O
qconn	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
if	O
(	O
fcntl	function
(	O
qsysdep	pointer
->	O
o	int
,	O
F_SETFD	int
,	O
fcntl	function
(	O
qsysdep	pointer
->	O
o	int
,	O
F_GETFD	int
,	O
0	int
)	O
|	O
FD_CLOEXEC	int
)	O
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"fcntl (FD_CLOEXEC): %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
(	O
void	O
)	O
ioctl	function
(	O
qsysdep	pointer
->	O
o	int
,	O
TIOCNOTTY	int
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
(	O
void	O
)	O
close	function
(	O
qsysdep	pointer
->	O
o	int
)	O
;	O
qsysdep	pointer
->	O
o	int
=	O
-	O
1	int
;	O
(	O
void	O
)	O
fsserial_lockfile	function
(	O
FALSE	O
,	O
qconn	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
return	O
TRUE	O
;	O
}	O
static	O
boolean	int
fsserial_unlock	function
(	O
qconn	pointer
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
{	O
boolean	int
fret	int
;	O
struct	O
ssysdep_conn	struct
*	O
qsysdep	pointer
;	O
fret	int
=	O
TRUE	O
;	O
qsysdep	pointer
=	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
;	O
if	O
(	O
qsysdep	pointer
->	O
o	int
>=	O
0	int
)	O
{	O
(	O
void	O
)	O
ioctl	function
(	O
qsysdep	pointer
->	O
o	int
,	O
TIOCNOTTY	int
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
close	function
(	O
qsysdep	pointer
->	O
o	int
)	O
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"close: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
fret	int
=	O
FALSE	O
;	O
}	O
qsysdep	pointer
->	O
o	int
=	O
-	O
1	int
;	O
}	O
if	O
(	O
!	O
fsserial_lockfile	function
(	O
FALSE	O
,	O
qconn	pointer
)	O
)	O
fret	int
=	O
FALSE	O
;	O
return	O
fret	int
;	O
}	O
typedef	O
speed_t	int
baud_code	int
;	O
static	O
struct	O
sbaud_table	struct
{	O
baud_code	int
icode	int
;	O
long	O
ibaud	long
;	O
}	O
asSbaud_table	array
[	O
]	O
=	O
{	O
{	O
B50	int
,	O
50	int
}	O
,	O
{	O
B75	int
,	O
75	int
}	O
,	O
{	O
B110	int
,	O
110	int
}	O
,	O
{	O
B134	int
,	O
134	int
}	O
,	O
{	O
B150	int
,	O
150	int
}	O
,	O
{	O
B200	int
,	O
200	int
}	O
,	O
{	O
B300	int
,	O
300	int
}	O
,	O
{	O
B600	int
,	O
600	int
}	O
,	O
{	O
B1200	int
,	O
1200	int
}	O
,	O
{	O
B1800	int
,	O
1800	int
}	O
,	O
{	O
B2400	int
,	O
2400	int
}	O
,	O
{	O
B4800	int
,	O
4800	int
}	O
,	O
{	O
B9600	int
,	O
9600	int
}	O
,	O
{	O
B19200	int
,	O
19200	int
}	O
,	O
{	O
B38400	int
,	O
38400	int
}	O
,	O
{	O
B57600	int
,	O
57600	int
}	O
,	O
{	O
B115200	int
,	O
115200	int
}	O
,	O
{	O
B230400	int
,	O
230400	int
}	O
,	O
{	O
B460800	int
,	O
460800	int
}	O
,	O
{	O
B500000	int
,	O
500000	int
}	O
,	O
{	O
B576000	int
,	O
576000	int
}	O
,	O
{	O
B921600	int
,	O
921600	int
}	O
,	O
{	O
B1000000	int
,	O
1000000	int
}	O
,	O
{	O
B1152000	int
,	O
1152000	int
}	O
,	O
{	O
B1500000	int
,	O
1500000	int
}	O
,	O
{	O
B2000000	int
,	O
2000000	int
}	O
,	O
{	O
B2500000	int
,	O
2500000	int
}	O
,	O
{	O
B3000000	int
,	O
3000000	int
}	O
,	O
{	O
B3500000	int
,	O
3500000	int
}	O
,	O
{	O
B4000000	int
,	O
4000000	int
}	O
,	O
{	O
B0	int
,	O
0	int
}	O
}	O
;	O
static	O
int	O
cSmin	int
;	O
static	O
boolean	int
fsserial_open	function
(	O
qconn	pointer
,	O
ibaud	long
,	O
fwait	int
,	O
fuser	int
,	O
tlocal	enum
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
long	O
ibaud	long
;	O
boolean	int
fwait	int
;	O
boolean	int
fuser	int
;	O
enum	O
tclocal_setting	enum
tlocal	enum
;	O
{	O
struct	O
ssysdep_conn	struct
*	O
q	pointer
;	O
baud_code	int
ib	int
;	O
q	pointer
=	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
;	O
if	O
(	O
q	pointer
->	O
zdevice	pointer
!=	O
NULL	O
)	O
{	O
const	O
char	O
*	O
z	pointer
;	O
if	O
(	O
strncmp	function
(	O
q	pointer
->	O
zdevice	pointer
,	O
"/dev/"	pointer
,	O
sizeof	O
"/dev/"	pointer
-	O
1	int
)	O
==	O
0	int
)	O
z	pointer
=	O
q	pointer
->	O
zdevice	pointer
+	O
sizeof	O
"/dev/"	pointer
-	O
1	int
;	O
else	O
z	pointer
=	O
q	pointer
->	O
zdevice	pointer
;	O
ulog_device	function
(	O
z	pointer
)	O
;	O
}	O
else	O
{	O
const	O
char	O
*	O
zport	pointer
;	O
boolean	int
fdummy	int
;	O
if	O
(	O
qconn	pointer
->	O
qport	pointer
!=	O
NULL	O
&&	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_ttype	enum
!=	O
UUCONF_PORTTYPE_STDIN	int
)	O
ulog	function
(	O
LOG_FATAL	int
,	O
"fsserial_open: Can't happen"	pointer
)	O
;	O
zport	pointer
=	O
zsysdep_port_name	function
(	O
&	O
fdummy	int
)	O
;	O
if	O
(	O
zport	pointer
!=	O
NULL	O
)	O
ulog_device	function
(	O
zport	pointer
)	O
;	O
}	O
ib	int
=	O
B0	int
;	O
if	O
(	O
ibaud	long
!=	O
0	int
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
CBAUD_TABLE	O
;	O
i	long
++	O
)	O
if	O
(	O
asSbaud_table	array
[	O
i	long
]	O
.	O
ibaud	long
==	O
ibaud	long
)	O
break	O
;	O
if	O
(	O
i	long
>=	O
CBAUD_TABLE	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Unsupported baud rate %ld"	pointer
,	O
ibaud	long
)	O
;	O
return	O
FALSE	O
;	O
}	O
ib	int
=	O
asSbaud_table	array
[	O
i	long
]	O
.	O
icode	int
;	O
}	O
if	O
(	O
q	pointer
->	O
o	int
<	O
0	int
)	O
{	O
int	O
iflag	int
;	O
uid_t	int
ieuid	int
;	O
gid_t	int
iegid	int
;	O
if	O
(	O
fwait	int
)	O
iflag	int
=	O
0	int
;	O
else	O
iflag	int
=	O
iSunblock	int
;	O
if	O
(	O
fuser	int
)	O
{	O
if	O
(	O
!	O
fsuser_perms	function
(	O
&	O
ieuid	int
,	O
&	O
iegid	int
)	O
)	O
return	O
FALSE	O
;	O
}	O
q	pointer
->	O
o	int
=	O
open	function
(	O
q	pointer
->	O
zdevice	pointer
,	O
O_RDWR	int
|	O
iflag	int
)	O
;	O
if	O
(	O
q	pointer
->	O
o	int
<	O
0	int
)	O
{	O
if	O
(	O
!	O
fwait	int
&&	O
iSunblock	int
!=	O
O_NONBLOCK	int
&&	O
errno	O
==	O
EINVAL	int
)	O
{	O
iSunblock	int
=	O
O_NONBLOCK	int
;	O
q	pointer
->	O
o	int
=	O
open	function
(	O
q	pointer
->	O
zdevice	pointer
,	O
O_RDWR	int
|	O
O_NONBLOCK	int
)	O
;	O
}	O
if	O
(	O
q	pointer
->	O
o	int
<	O
0	int
)	O
{	O
int	O
ierr	int
;	O
ierr	int
=	O
errno	O
;	O
if	O
(	O
fuser	int
)	O
(	O
void	O
)	O
fsuucp_perms	function
(	O
(	O
long	O
)	O
ieuid	int
,	O
(	O
long	O
)	O
iegid	int
)	O
;	O
ulog	function
(	O
LOG_ERROR	int
,	O
"open (%s): %s"	pointer
,	O
q	pointer
->	O
zdevice	pointer
,	O
strerror	function
(	O
ierr	int
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
if	O
(	O
fuser	int
)	O
{	O
if	O
(	O
!	O
fsuucp_perms	function
(	O
(	O
long	O
)	O
ieuid	int
,	O
(	O
long	O
)	O
iegid	int
)	O
)	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
fcntl	function
(	O
q	pointer
->	O
o	int
,	O
F_SETFD	int
,	O
fcntl	function
(	O
q	pointer
->	O
o	int
,	O
F_GETFD	int
,	O
0	int
)	O
|	O
FD_CLOEXEC	int
)	O
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"fcntl (FD_CLOEXEC): %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
q	pointer
->	O
iflags	int
=	O
fcntl	function
(	O
q	pointer
->	O
o	int
,	O
F_GETFL	int
,	O
0	int
)	O
;	O
if	O
(	O
q	pointer
->	O
iflags	int
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"fcntl: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
q	pointer
->	O
iwr_flags	int
=	O
-	O
1	int
;	O
if	O
(	O
!	O
fsblock	function
(	O
q	pointer
,	O
TRUE	O
)	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
!	O
fgetterminfo	O
(	O
q	pointer
->	O
o	int
,	O
&	O
q	pointer
->	O
sorig	struct
)	O
)	O
{	O
q	pointer
->	O
fterminal	int
=	O
FALSE	O
;	O
return	O
TRUE	O
;	O
}	O
q	pointer
->	O
fterminal	int
=	O
TRUE	O
;	O
q	pointer
->	O
snew	struct
=	O
q	pointer
->	O
sorig	struct
;	O
if	O
(	O
ibaud	long
==	O
0	int
)	O
ib	int
=	O
cfgetospeed	function
(	O
&	O
q	pointer
->	O
snew	struct
)	O
;	O
q	pointer
->	O
snew	struct
.	O
c_iflag	int
&=	O
~	O
ICLEAR_IFLAG	O
;	O
q	pointer
->	O
snew	struct
.	O
c_oflag	int
&=	O
~	O
ICLEAR_OFLAG	O
;	O
q	pointer
->	O
snew	struct
.	O
c_cflag	int
&=	O
~	O
ICLEAR_CFLAG	O
;	O
q	pointer
->	O
snew	struct
.	O
c_cflag	int
|=	O
ISET_CFLAG	O
;	O
q	pointer
->	O
snew	struct
.	O
c_lflag	int
&=	O
~	O
ICLEAR_LFLAG	O
;	O
cSmin	int
=	O
1	int
;	O
q	pointer
->	O
snew	struct
.	O
c_cc	array
[	O
VMIN	int
]	O
=	O
cSmin	int
;	O
q	pointer
->	O
snew	struct
.	O
c_cc	array
[	O
VTIME	int
]	O
=	O
1	int
;	O
(	O
void	O
)	O
cfsetospeed	function
(	O
&	O
q	pointer
->	O
snew	struct
,	O
ib	int
)	O
;	O
(	O
void	O
)	O
cfsetispeed	function
(	O
&	O
q	pointer
->	O
snew	struct
,	O
ib	int
)	O
;	O
(	O
void	O
)	O
tcflush	function
(	O
q	pointer
->	O
o	int
,	O
TCIFLUSH	int
)	O
;	O
switch	O
(	O
tlocal	enum
)	O
{	O
case	O
SET_CLOCAL	int
:	O
q	pointer
->	O
snew	struct
.	O
c_cflag	int
|=	O
CLOCAL	int
;	O
break	O
;	O
case	O
CLEAR_CLOCAL	int
:	O
q	pointer
->	O
snew	struct
.	O
c_cflag	int
&=	O
~	O
CLOCAL	int
;	O
break	O
;	O
case	O
IGNORE_CLOCAL	int
:	O
break	O
;	O
}	O
if	O
(	O
!	O
fsetterminfo	O
(	O
q	pointer
->	O
o	int
,	O
&	O
q	pointer
->	O
snew	struct
)	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Can't set terminal settings: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
(	O
void	O
)	O
ioctl	function
(	O
q	pointer
->	O
o	int
,	O
TIOCSCTTY	int
,	O
0	int
)	O
;	O
if	O
(	O
ibaud	long
!=	O
0	int
)	O
q	pointer
->	O
ibaud	long
=	O
ibaud	long
;	O
else	O
{	O
size_t	long
i	long
;	O
q	pointer
->	O
ibaud	long
=	O
(	O
long	O
)	O
1200	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
CBAUD_TABLE	O
;	O
i	long
++	O
)	O
{	O
if	O
(	O
asSbaud_table	array
[	O
i	long
]	O
.	O
icode	int
==	O
ib	int
&&	O
asSbaud_table	array
[	O
i	long
]	O
.	O
ibaud	long
!=	O
0	int
)	O
{	O
q	pointer
->	O
ibaud	long
=	O
asSbaud_table	array
[	O
i	long
]	O
.	O
ibaud	long
;	O
break	O
;	O
}	O
}	O
DEBUG_MESSAGE1	O
(	O
DEBUG_PORT	O
,	O
"fsserial_open: Baud rate is %ld"	pointer
,	O
q	pointer
->	O
ibaud	long
)	O
;	O
}	O
return	O
TRUE	O
;	O
}	O
static	O
boolean	int
fsstdin_open	function
(	O
qconn	pointer
,	O
ibaud	long
,	O
fwait	int
,	O
fuser	int
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
long	O
ibaud	long
;	O
boolean	int
fwait	int
;	O
boolean	int
fuser	int
;	O
{	O
struct	O
ssysdep_conn	struct
*	O
q	pointer
;	O
q	pointer
=	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
;	O
q	pointer
->	O
ord	int
=	O
0	int
;	O
q	pointer
->	O
owr	int
=	O
1	int
;	O
q	pointer
->	O
o	int
=	O
q	pointer
->	O
ord	int
;	O
if	O
(	O
!	O
fsserial_open	function
(	O
qconn	pointer
,	O
ibaud	long
,	O
fwait	int
,	O
fuser	int
,	O
IGNORE_CLOCAL	int
)	O
)	O
return	O
FALSE	O
;	O
q	pointer
->	O
iwr_flags	int
=	O
fcntl	function
(	O
q	pointer
->	O
owr	int
,	O
F_GETFL	int
,	O
0	int
)	O
;	O
if	O
(	O
q	pointer
->	O
iwr_flags	int
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"fcntl: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
return	O
TRUE	O
;	O
}	O
static	O
boolean	int
fsmodem_open	function
(	O
qconn	pointer
,	O
ibaud	long
,	O
fwait	int
,	O
fuser	int
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
long	O
ibaud	long
;	O
boolean	int
fwait	int
;	O
boolean	int
fuser	int
;	O
{	O
struct	O
uuconf_modem_port	struct
*	O
qm	pointer
;	O
qm	pointer
=	O
&	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
;	O
if	O
(	O
ibaud	long
==	O
(	O
long	O
)	O
0	int
)	O
ibaud	long
=	O
qm	pointer
->	O
uuconf_ibaud	long
;	O
if	O
(	O
!	O
fsserial_open	function
(	O
qconn	pointer
,	O
ibaud	long
,	O
fwait	int
,	O
fuser	int
,	O
fwait	int
?	O
CLEAR_CLOCAL	int
:	O
SET_CLOCAL	int
)	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
fwait	int
&&	O
!	O
fsserial_hardflow	function
(	O
qconn	pointer
,	O
qm	pointer
->	O
uuconf_fhardflow	int
)	O
)	O
return	O
FALSE	O
;	O
return	O
TRUE	O
;	O
}	O
static	O
boolean	int
fsdirect_open	function
(	O
qconn	pointer
,	O
ibaud	long
,	O
fwait	int
,	O
fuser	int
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
long	O
ibaud	long
;	O
boolean	int
fwait	int
;	O
boolean	int
fuser	int
;	O
{	O
struct	O
uuconf_direct_port	struct
*	O
qd	pointer
;	O
qd	pointer
=	O
&	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_sdirect	struct
;	O
if	O
(	O
ibaud	long
==	O
(	O
long	O
)	O
0	int
)	O
ibaud	long
=	O
qd	pointer
->	O
uuconf_ibaud	long
;	O
if	O
(	O
!	O
fsserial_open	function
(	O
qconn	pointer
,	O
ibaud	long
,	O
fwait	int
,	O
fuser	int
,	O
qd	pointer
->	O
uuconf_fcarrier	int
?	O
CLEAR_CLOCAL	int
:	O
SET_CLOCAL	int
)	O
)	O
return	O
FALSE	O
;	O
return	O
fsserial_hardflow	function
(	O
qconn	pointer
,	O
qd	pointer
->	O
uuconf_fhardflow	int
)	O
;	O
}	O
static	O
boolean	int
fsblock	function
(	O
qs	pointer
,	O
fblock	int
)	O
struct	O
ssysdep_conn	struct
*	O
qs	pointer
;	O
boolean	int
fblock	int
;	O
{	O
int	O
iwant	int
;	O
int	O
isys	int
;	O
if	O
(	O
fblock	int
)	O
iwant	int
=	O
qs	pointer
->	O
iflags	int
&	O
~	O
(	O
O_NDELAY	O
|	O
O_NONBLOCK	int
)	O
;	O
else	O
iwant	int
=	O
qs	pointer
->	O
iflags	int
|	O
iSunblock	int
;	O
if	O
(	O
iwant	int
==	O
qs	pointer
->	O
iflags	int
)	O
return	O
TRUE	O
;	O
isys	int
=	O
fcntl	function
(	O
qs	pointer
->	O
o	int
,	O
F_SETFL	int
,	O
iwant	int
)	O
;	O
if	O
(	O
isys	int
<	O
0	int
)	O
{	O
if	O
(	O
!	O
fblock	int
&&	O
iSunblock	int
!=	O
O_NONBLOCK	int
&&	O
errno	O
==	O
EINVAL	int
)	O
{	O
iSunblock	int
=	O
O_NONBLOCK	int
;	O
iwant	int
=	O
qs	pointer
->	O
iflags	int
|	O
O_NONBLOCK	int
;	O
isys	int
=	O
fcntl	function
(	O
qs	pointer
->	O
o	int
,	O
F_SETFL	int
,	O
iwant	int
)	O
;	O
}	O
if	O
(	O
isys	int
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"fcntl: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
qs	pointer
->	O
iflags	int
=	O
iwant	int
;	O
if	O
(	O
qs	pointer
->	O
iwr_flags	int
>=	O
0	int
&&	O
qs	pointer
->	O
ord	int
!=	O
qs	pointer
->	O
owr	int
)	O
{	O
if	O
(	O
fblock	int
)	O
iwant	int
=	O
qs	pointer
->	O
iwr_flags	int
&	O
~	O
(	O
O_NDELAY	O
|	O
O_NONBLOCK	int
)	O
;	O
else	O
iwant	int
=	O
qs	pointer
->	O
iwr_flags	int
|	O
iSunblock	int
;	O
isys	int
=	O
fcntl	function
(	O
qs	pointer
->	O
owr	int
,	O
F_SETFL	int
,	O
iwant	int
)	O
;	O
if	O
(	O
isys	int
<	O
0	int
)	O
{	O
if	O
(	O
!	O
fblock	int
&&	O
iSunblock	int
!=	O
O_NONBLOCK	int
&&	O
errno	O
==	O
EINVAL	int
)	O
{	O
iSunblock	int
=	O
O_NONBLOCK	int
;	O
iwant	int
=	O
qs	pointer
->	O
iwr_flags	int
|	O
O_NONBLOCK	int
;	O
isys	int
=	O
fcntl	function
(	O
qs	pointer
->	O
owr	int
,	O
F_SETFL	int
,	O
iwant	int
)	O
;	O
}	O
if	O
(	O
isys	int
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"fcntl: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
qs	pointer
->	O
iwr_flags	int
=	O
iwant	int
;	O
}	O
return	O
TRUE	O
;	O
}	O
static	O
boolean	int
fsserial_close	function
(	O
q	pointer
)	O
struct	O
ssysdep_conn	struct
*	O
q	pointer
;	O
{	O
if	O
(	O
q	pointer
->	O
o	int
>=	O
0	int
)	O
{	O
if	O
(	O
q	pointer
->	O
fterminal	int
)	O
{	O
fSalarm	int
=	O
FALSE	O
;	O
if	O
(	O
fsysdep_catch	function
(	O
)	O
)	O
{	O
usysdep_start_catch	function
(	O
)	O
;	O
usset_signal	function
(	O
SIGALRM	int
,	O
usalarm	function
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
(	O
void	O
)	O
alarm	function
(	O
30	int
)	O
;	O
(	O
void	O
)	O
fsetterminfodrain	O
(	O
q	pointer
->	O
o	int
,	O
&	O
q	pointer
->	O
sorig	struct
)	O
;	O
}	O
usset_signal	function
(	O
SIGALRM	int
,	O
SIG_IGN	O
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
(	O
void	O
)	O
alarm	function
(	O
0	int
)	O
;	O
usysdep_end_catch	function
(	O
)	O
;	O
if	O
(	O
fSalarm	int
)	O
(	O
void	O
)	O
fsetterminfo	O
(	O
q	pointer
->	O
o	int
,	O
&	O
q	pointer
->	O
sorig	struct
)	O
;	O
}	O
(	O
void	O
)	O
ioctl	function
(	O
q	pointer
->	O
o	int
,	O
TIOCNOTTY	int
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
(	O
void	O
)	O
close	function
(	O
q	pointer
->	O
o	int
)	O
;	O
q	pointer
->	O
o	int
=	O
-	O
1	int
;	O
sleep	function
(	O
2	int
)	O
;	O
}	O
return	O
TRUE	O
;	O
}	O
static	O
boolean	int
fsstdin_close	function
(	O
qconn	pointer
,	O
puuconf	pointer
,	O
qdialer	pointer
,	O
fsuccess	int
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
pointer	pointer
puuconf	pointer
ATTRIBUTE_UNUSED	O
;	O
struct	O
uuconf_dialer	struct
*	O
qdialer	pointer
ATTRIBUTE_UNUSED	O
;	O
boolean	int
fsuccess	int
ATTRIBUTE_UNUSED	O
;	O
{	O
struct	O
ssysdep_conn	struct
*	O
qsysdep	pointer
;	O
qsysdep	pointer
=	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
;	O
(	O
void	O
)	O
close	function
(	O
qsysdep	pointer
->	O
owr	int
)	O
;	O
(	O
void	O
)	O
close	function
(	O
2	int
)	O
;	O
qsysdep	pointer
->	O
o	int
=	O
qsysdep	pointer
->	O
ord	int
;	O
return	O
fsserial_close	function
(	O
qsysdep	pointer
)	O
;	O
}	O
static	O
boolean	int
fsmodem_close	function
(	O
qconn	pointer
,	O
puuconf	pointer
,	O
qdialer	pointer
,	O
fsuccess	int
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
pointer	pointer
puuconf	pointer
;	O
struct	O
uuconf_dialer	struct
*	O
qdialer	pointer
;	O
boolean	int
fsuccess	int
;	O
{	O
struct	O
ssysdep_conn	struct
*	O
qsysdep	pointer
;	O
boolean	int
fret	int
;	O
struct	O
uuconf_dialer	struct
sdialer	struct
;	O
const	O
struct	O
uuconf_chat	struct
*	O
qchat	pointer
;	O
qsysdep	pointer
=	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
;	O
fret	int
=	O
TRUE	O
;	O
if	O
(	O
qdialer	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_pzdialer	pointer
!=	O
NULL	O
)	O
{	O
const	O
char	O
*	O
zdialer	pointer
;	O
int	O
iuuconf	int
;	O
zdialer	pointer
=	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_pzdialer	pointer
[	O
0	int
]	O
;	O
iuuconf	int
=	O
uuconf_dialer_info	function
(	O
puuconf	pointer
,	O
zdialer	pointer
,	O
&	O
sdialer	struct
)	O
;	O
if	O
(	O
iuuconf	int
==	O
UUCONF_SUCCESS	O
)	O
qdialer	pointer
=	O
&	O
sdialer	struct
;	O
else	O
{	O
ulog_uuconf	function
(	O
LOG_ERROR	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
fret	int
=	O
FALSE	O
;	O
}	O
}	O
else	O
qdialer	pointer
=	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_qdialer	pointer
;	O
}	O
qchat	pointer
=	O
NULL	O
;	O
if	O
(	O
qdialer	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
fsuccess	int
)	O
qchat	pointer
=	O
&	O
qdialer	pointer
->	O
uuconf_scomplete	struct
;	O
else	O
qchat	pointer
=	O
&	O
qdialer	pointer
->	O
uuconf_sabort	struct
;	O
}	O
if	O
(	O
qchat	pointer
!=	O
NULL	O
&&	O
(	O
qchat	pointer
->	O
uuconf_pzprogram	pointer
!=	O
NULL	O
||	O
qchat	pointer
->	O
uuconf_pzchat	pointer
!=	O
NULL	O
)	O
)	O
{	O
boolean	int
fsighup_ignored	int
;	O
HELD_SIG_MASK	O
smask	struct
;	O
int	O
i	long
;	O
sig_atomic_t	int
afhold	array
[	O
INDEXSIG_COUNT	O
]	O
;	O
(	O
void	O
)	O
fsmodem_carrier	function
(	O
qconn	pointer
,	O
FALSE	O
)	O
;	O
usset_signal	function
(	O
SIGHUP	int
,	O
SIG_IGN	O
,	O
FALSE	O
,	O
&	O
fsighup_ignored	int
)	O
;	O
smask	struct
=	O
isblocksigs	function
(	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
INDEXSIG_COUNT	O
;	O
i	long
++	O
)	O
{	O
afhold	array
[	O
i	long
]	O
=	O
afSignal	array
[	O
i	long
]	O
;	O
afSignal	array
[	O
i	long
]	O
=	O
FALSE	O
;	O
}	O
usunblocksigs	O
(	O
smask	struct
)	O
;	O
if	O
(	O
!	O
fchat	function
(	O
qconn	pointer
,	O
puuconf	pointer
,	O
qchat	pointer
,	O
(	O
const	O
struct	O
uuconf_system	struct
*	O
)	O
NULL	O
,	O
(	O
const	O
struct	O
uuconf_dialer	struct
*	O
)	O
NULL	O
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
,	O
FALSE	O
,	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_zname	pointer
,	O
qsysdep	pointer
->	O
ibaud	long
)	O
)	O
fret	int
=	O
FALSE	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
INDEXSIG_COUNT	O
;	O
i	long
++	O
)	O
if	O
(	O
afhold	array
[	O
i	long
]	O
)	O
afSignal	array
[	O
i	long
]	O
=	O
TRUE	O
;	O
if	O
(	O
!	O
fsighup_ignored	int
)	O
usset_signal	function
(	O
SIGHUP	int
,	O
ussignal	function
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
}	O
if	O
(	O
qdialer	pointer
!=	O
NULL	O
&&	O
qdialer	pointer
==	O
&	O
sdialer	struct
)	O
(	O
void	O
)	O
uuconf_dialer_free	function
(	O
puuconf	pointer
,	O
&	O
sdialer	struct
)	O
;	O
if	O
(	O
qsysdep	pointer
->	O
fterminal	int
)	O
{	O
(	O
void	O
)	O
cfsetospeed	function
(	O
&	O
qsysdep	pointer
->	O
snew	struct
,	O
B0	int
)	O
;	O
fSalarm	int
=	O
FALSE	O
;	O
if	O
(	O
fsysdep_catch	function
(	O
)	O
)	O
{	O
usysdep_start_catch	function
(	O
)	O
;	O
usset_signal	function
(	O
SIGALRM	int
,	O
usalarm	function
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
(	O
void	O
)	O
alarm	function
(	O
30	int
)	O
;	O
(	O
void	O
)	O
fsetterminfodrain	O
(	O
qsysdep	pointer
->	O
o	int
,	O
&	O
qsysdep	pointer
->	O
snew	struct
)	O
;	O
}	O
usset_signal	function
(	O
SIGALRM	int
,	O
SIG_IGN	O
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
(	O
void	O
)	O
alarm	function
(	O
0	int
)	O
;	O
usysdep_end_catch	function
(	O
)	O
;	O
sleep	function
(	O
2	int
)	O
;	O
}	O
if	O
(	O
!	O
fsserial_close	function
(	O
qsysdep	pointer
)	O
)	O
fret	int
=	O
FALSE	O
;	O
return	O
fret	int
;	O
}	O
static	O
boolean	int
fsdirect_close	function
(	O
qconn	pointer
,	O
puuconf	pointer
,	O
qdialer	pointer
,	O
fsuccess	int
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
pointer	pointer
puuconf	pointer
ATTRIBUTE_UNUSED	O
;	O
struct	O
uuconf_dialer	struct
*	O
qdialer	pointer
ATTRIBUTE_UNUSED	O
;	O
boolean	int
fsuccess	int
ATTRIBUTE_UNUSED	O
;	O
{	O
return	O
fsserial_close	function
(	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
)	O
;	O
}	O
boolean	int
fsysdep_modem_begin_dial	function
(	O
qconn	pointer
,	O
qdial	pointer
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
struct	O
uuconf_dialer	struct
*	O
qdial	pointer
;	O
{	O
struct	O
ssysdep_conn	struct
*	O
qsysdep	pointer
;	O
const	O
char	O
*	O
z	pointer
;	O
qsysdep	pointer
=	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
;	O
if	O
(	O
qdial	pointer
->	O
uuconf_fdtr_toggle	int
)	O
{	O
if	O
(	O
qsysdep	pointer
->	O
fterminal	int
)	O
{	O
sterminal	struct
sbaud	struct
;	O
sbaud	struct
=	O
qsysdep	pointer
->	O
snew	struct
;	O
(	O
void	O
)	O
cfsetospeed	function
(	O
&	O
sbaud	struct
,	O
B0	int
)	O
;	O
(	O
void	O
)	O
fsetterminfodrain	O
(	O
qsysdep	pointer
->	O
o	int
,	O
&	O
sbaud	struct
)	O
;	O
sleep	function
(	O
2	int
)	O
;	O
(	O
void	O
)	O
fsetterminfo	O
(	O
qsysdep	pointer
->	O
o	int
,	O
&	O
qsysdep	pointer
->	O
snew	struct
)	O
;	O
}	O
if	O
(	O
qdial	pointer
->	O
uuconf_fdtr_toggle_wait	int
)	O
sleep	function
(	O
2	int
)	O
;	O
}	O
if	O
(	O
!	O
fsmodem_carrier	function
(	O
qconn	pointer
,	O
FALSE	O
)	O
)	O
return	O
FALSE	O
;	O
z	pointer
=	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_zdial_device	pointer
;	O
if	O
(	O
z	pointer
!=	O
NULL	O
)	O
{	O
char	O
*	O
zfree	pointer
;	O
int	O
o	int
;	O
qsysdep	pointer
->	O
ohold	int
=	O
qsysdep	pointer
->	O
o	int
;	O
zfree	pointer
=	O
NULL	O
;	O
if	O
(	O
*	O
z	pointer
!=	O
'/'	O
)	O
{	O
zfree	pointer
=	O
zbufalc	function
(	O
sizeof	O
"/dev/"	pointer
+	O
strlen	function
(	O
z	pointer
)	O
)	O
;	O
sprintf	function
(	O
zfree	pointer
,	O
"/dev/%s"	pointer
,	O
z	pointer
)	O
;	O
z	pointer
=	O
zfree	pointer
;	O
}	O
o	int
=	O
open	function
(	O
(	O
char	O
*	O
)	O
z	pointer
,	O
O_RDWR	int
|	O
O_NOCTTY	int
)	O
;	O
if	O
(	O
o	int
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"open (%s): %s"	pointer
,	O
z	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
ubuffree	function
(	O
zfree	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
ubuffree	function
(	O
zfree	pointer
)	O
;	O
if	O
(	O
fcntl	function
(	O
o	int
,	O
F_SETFD	int
,	O
fcntl	function
(	O
o	int
,	O
F_GETFD	int
,	O
0	int
)	O
|	O
FD_CLOEXEC	int
)	O
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"fcntl (FD_CLOEXEC): %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
(	O
void	O
)	O
close	function
(	O
o	int
)	O
;	O
return	O
FALSE	O
;	O
}	O
qsysdep	pointer
->	O
o	int
=	O
o	int
;	O
}	O
return	O
TRUE	O
;	O
}	O
static	O
boolean	int
fsmodem_carrier	function
(	O
qconn	pointer
,	O
fcarrier	int
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
boolean	int
fcarrier	int
;	O
{	O
register	O
struct	O
ssysdep_conn	struct
*	O
q	pointer
;	O
struct	O
uuconf_modem_port	struct
*	O
qm	pointer
;	O
q	pointer
=	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
;	O
if	O
(	O
!	O
q	pointer
->	O
fterminal	int
)	O
return	O
TRUE	O
;	O
qm	pointer
=	O
&	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
;	O
if	O
(	O
fcarrier	int
)	O
{	O
if	O
(	O
qm	pointer
->	O
uuconf_fcarrier	int
)	O
{	O
q	pointer
->	O
snew	struct
.	O
c_cflag	int
&=	O
~	O
CLOCAL	int
;	O
if	O
(	O
!	O
fsetterminfo	O
(	O
q	pointer
->	O
o	int
,	O
&	O
q	pointer
->	O
snew	struct
)	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Can't clear CLOCAL: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
if	O
(	O
!	O
fsserial_hardflow	function
(	O
qconn	pointer
,	O
qm	pointer
->	O
uuconf_fhardflow	int
)	O
)	O
return	O
FALSE	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
fsserial_hardflow	function
(	O
qconn	pointer
,	O
FALSE	O
)	O
)	O
return	O
FALSE	O
;	O
q	pointer
->	O
snew	struct
.	O
c_cflag	int
|=	O
CLOCAL	int
;	O
if	O
(	O
!	O
fsetterminfo	O
(	O
q	pointer
->	O
o	int
,	O
&	O
q	pointer
->	O
snew	struct
)	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Can't set CLOCAL: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
return	O
TRUE	O
;	O
}	O
static	O
boolean	int
fsserial_hardflow	function
(	O
qconn	pointer
,	O
fhardflow	int
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
boolean	int
fhardflow	int
;	O
{	O
register	O
struct	O
ssysdep_conn	struct
*	O
q	pointer
;	O
q	pointer
=	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
;	O
if	O
(	O
!	O
q	pointer
->	O
fterminal	int
)	O
return	O
TRUE	O
;	O
if	O
(	O
fhardflow	int
)	O
{	O
q	pointer
->	O
snew	struct
.	O
c_cflag	int
|=	O
CRTSCTS	int
;	O
if	O
(	O
!	O
fsetterminfo	O
(	O
q	pointer
->	O
o	int
,	O
&	O
q	pointer
->	O
snew	struct
)	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Can't enable hardware flow control: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
else	O
{	O
q	pointer
->	O
snew	struct
.	O
c_cflag	int
&=	O
~	O
CRTSCTS	int
;	O
if	O
(	O
!	O
fsetterminfo	O
(	O
q	pointer
->	O
o	int
,	O
&	O
q	pointer
->	O
snew	struct
)	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Can't disable hardware flow control: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
return	O
TRUE	O
;	O
}	O
boolean	int
fsysdep_modem_end_dial	function
(	O
qconn	pointer
,	O
qdial	pointer
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
struct	O
uuconf_dialer	struct
*	O
qdial	pointer
;	O
{	O
struct	O
ssysdep_conn	struct
*	O
q	pointer
;	O
q	pointer
=	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
;	O
if	O
(	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_zdial_device	pointer
!=	O
NULL	O
)	O
{	O
(	O
void	O
)	O
close	function
(	O
q	pointer
->	O
o	int
)	O
;	O
q	pointer
->	O
o	int
=	O
q	pointer
->	O
ohold	int
;	O
}	O
if	O
(	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_fcarrier	int
&&	O
qdial	pointer
->	O
uuconf_fcarrier	int
)	O
{	O
if	O
(	O
!	O
fsmodem_carrier	function
(	O
qconn	pointer
,	O
TRUE	O
)	O
)	O
return	O
FALSE	O
;	O
{	O
int	O
onew	int
;	O
onew	int
=	O
open	function
(	O
q	pointer
->	O
zdevice	pointer
,	O
O_RDWR	int
)	O
;	O
if	O
(	O
onew	int
>=	O
0	int
)	O
{	O
boolean	int
fbad	int
;	O
int	O
iflags	int
;	O
fbad	int
=	O
FALSE	O
;	O
if	O
(	O
fcntl	function
(	O
onew	int
,	O
F_SETFD	int
,	O
fcntl	function
(	O
onew	int
,	O
F_GETFD	int
,	O
0	int
)	O
|	O
FD_CLOEXEC	int
)	O
<	O
0	int
)	O
fbad	int
=	O
TRUE	O
;	O
if	O
(	O
!	O
fbad	int
)	O
{	O
iflags	int
=	O
fcntl	function
(	O
onew	int
,	O
F_GETFL	int
,	O
0	int
)	O
;	O
if	O
(	O
iflags	int
<	O
0	int
||	O
!	O
fsetterminfo	O
(	O
onew	int
,	O
&	O
q	pointer
->	O
snew	struct
)	O
)	O
fbad	int
=	O
TRUE	O
;	O
}	O
if	O
(	O
fbad	int
)	O
(	O
void	O
)	O
close	function
(	O
onew	int
)	O
;	O
else	O
{	O
(	O
void	O
)	O
close	function
(	O
q	pointer
->	O
o	int
)	O
;	O
q	pointer
->	O
o	int
=	O
onew	int
;	O
q	pointer
->	O
iflags	int
=	O
iflags	int
;	O
}	O
}	O
}	O
}	O
return	O
TRUE	O
;	O
}	O
boolean	int
fsysdep_conn_read	function
(	O
qconn	pointer
,	O
zbuf	pointer
,	O
pclen	pointer
,	O
cmin	long
,	O
ctimeout	int
,	O
freport	int
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
char	O
*	O
zbuf	pointer
;	O
size_t	long
*	O
pclen	pointer
;	O
size_t	long
cmin	long
;	O
int	O
ctimeout	int
;	O
boolean	int
freport	int
;	O
{	O
CATCH_PROTECT	O
size_t	long
cwant	long
;	O
boolean	int
fret	int
;	O
register	O
struct	O
ssysdep_conn	struct
*	O
const	O
q	pointer
=	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
;	O
int	O
cwouldblock	int
;	O
cwant	long
=	O
*	O
pclen	pointer
;	O
*	O
pclen	pointer
=	O
0	int
;	O
if	O
(	O
ctimeout	int
<=	O
0	int
)	O
return	O
TRUE	O
;	O
if	O
(	O
!	O
fsblock	function
(	O
q	pointer
,	O
TRUE	O
)	O
)	O
return	O
FALSE	O
;	O
fSalarm	int
=	O
FALSE	O
;	O
if	O
(	O
fsysdep_catch	function
(	O
)	O
)	O
{	O
usysdep_start_catch	function
(	O
)	O
;	O
usset_signal	function
(	O
SIGALRM	int
,	O
usalarm	function
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
alarm	function
(	O
ctimeout	int
)	O
;	O
}	O
else	O
{	O
}	O
fret	int
=	O
FALSE	O
;	O
cwouldblock	int
=	O
0	int
;	O
while	O
(	O
TRUE	O
)	O
{	O
int	O
cgot	int
;	O
if	O
(	O
q	pointer
->	O
fterminal	int
)	O
{	O
int	O
csetmin	int
;	O
if	O
(	O
cmin	long
<	O
127	int
)	O
csetmin	int
=	O
cmin	long
;	O
else	O
csetmin	int
=	O
127	int
;	O
if	O
(	O
csetmin	int
!=	O
cSmin	int
)	O
{	O
q	pointer
->	O
snew	struct
.	O
c_cc	array
[	O
VMIN	int
]	O
=	O
csetmin	int
;	O
while	O
(	O
!	O
fsetterminfo	O
(	O
q	pointer
->	O
o	int
,	O
&	O
q	pointer
->	O
snew	struct
)	O
)	O
{	O
if	O
(	O
errno	O
!=	O
EINTR	int
||	O
FGOT_QUIT_SIGNAL	O
(	O
)	O
)	O
{	O
int	O
ierr	int
;	O
ierr	int
=	O
errno	O
;	O
usset_signal	function
(	O
SIGALRM	int
,	O
SIG_IGN	O
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
alarm	function
(	O
0	int
)	O
;	O
usysdep_end_catch	function
(	O
)	O
;	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Can't set MIN for terminal: %s"	pointer
,	O
strerror	function
(	O
ierr	int
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
fSalarm	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Timed out when setting MIN to %d; retrying"	pointer
,	O
csetmin	int
)	O
;	O
fSalarm	int
=	O
FALSE	O
;	O
alarm	function
(	O
ctimeout	int
)	O
;	O
}	O
}	O
cSmin	int
=	O
csetmin	int
;	O
}	O
}	O
if	O
(	O
FGOT_QUIT_SIGNAL	O
(	O
)	O
)	O
break	O
;	O
if	O
(	O
fSalarm	int
)	O
{	O
fret	int
=	O
TRUE	O
;	O
break	O
;	O
}	O
cgot	int
=	O
read	function
(	O
q	pointer
->	O
o	int
,	O
zbuf	pointer
,	O
cwant	long
)	O
;	O
if	O
(	O
cgot	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
if	O
(	O
fSalarm	int
)	O
{	O
fret	int
=	O
TRUE	O
;	O
break	O
;	O
}	O
if	O
(	O
FGOT_QUIT_SIGNAL	O
(	O
)	O
)	O
break	O
;	O
}	O
if	O
(	O
cgot	int
>	O
0	int
)	O
cwouldblock	int
=	O
0	int
;	O
else	O
{	O
if	O
(	O
cgot	int
<	O
0	int
&&	O
errno	O
==	O
EINTR	int
)	O
cgot	int
=	O
0	int
;	O
else	O
if	O
(	O
cgot	int
<	O
0	int
&&	O
(	O
errno	O
==	O
EAGAIN	int
||	O
errno	O
==	O
EWOULDBLOCK	O
)	O
&&	O
cwouldblock	int
<	O
2	int
)	O
{	O
++	O
cwouldblock	int
;	O
cgot	int
=	O
0	int
;	O
}	O
else	O
{	O
int	O
ierr	int
;	O
ierr	int
=	O
errno	O
;	O
usset_signal	function
(	O
SIGALRM	int
,	O
SIG_IGN	O
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
alarm	function
(	O
0	int
)	O
;	O
usysdep_end_catch	function
(	O
)	O
;	O
if	O
(	O
freport	int
)	O
{	O
if	O
(	O
cgot	int
==	O
0	int
)	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Line disconnected"	pointer
)	O
;	O
else	O
ulog	function
(	O
LOG_ERROR	int
,	O
"read: %s"	pointer
,	O
strerror	function
(	O
ierr	int
)	O
)	O
;	O
}	O
return	O
FALSE	O
;	O
}	O
}	O
cwant	long
-=	O
cgot	int
;	O
if	O
(	O
(	O
size_t	long
)	O
cgot	int
>=	O
cmin	long
)	O
cmin	long
=	O
0	int
;	O
else	O
cmin	long
-=	O
cgot	int
;	O
zbuf	pointer
+=	O
cgot	int
;	O
*	O
pclen	pointer
+=	O
cgot	int
;	O
if	O
(	O
cmin	long
==	O
0	int
)	O
{	O
fret	int
=	O
TRUE	O
;	O
break	O
;	O
}	O
}	O
usset_signal	function
(	O
SIGALRM	int
,	O
SIG_IGN	O
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
alarm	function
(	O
0	int
)	O
;	O
usysdep_end_catch	function
(	O
)	O
;	O
return	O
fret	int
;	O
}	O
boolean	int
fsdouble_read	function
(	O
qconn	pointer
,	O
zbuf	pointer
,	O
pclen	pointer
,	O
cmin	long
,	O
ctimeout	int
,	O
freport	int
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
char	O
*	O
zbuf	pointer
;	O
size_t	long
*	O
pclen	pointer
;	O
size_t	long
cmin	long
;	O
int	O
ctimeout	int
;	O
boolean	int
freport	int
;	O
{	O
struct	O
ssysdep_conn	struct
*	O
qsysdep	pointer
;	O
qsysdep	pointer
=	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
;	O
qsysdep	pointer
->	O
o	int
=	O
qsysdep	pointer
->	O
ord	int
;	O
return	O
fsysdep_conn_read	function
(	O
qconn	pointer
,	O
zbuf	pointer
,	O
pclen	pointer
,	O
cmin	long
,	O
ctimeout	int
,	O
freport	int
)	O
;	O
}	O
boolean	int
fsysdep_conn_write	function
(	O
qconn	pointer
,	O
zwrite	pointer
,	O
cwrite	long
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
const	O
char	O
*	O
zwrite	pointer
;	O
size_t	long
cwrite	long
;	O
{	O
struct	O
ssysdep_conn	struct
*	O
q	pointer
;	O
int	O
czero	int
;	O
q	pointer
=	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
;	O
if	O
(	O
!	O
fsblock	function
(	O
q	pointer
,	O
TRUE	O
)	O
)	O
return	O
FALSE	O
;	O
czero	int
=	O
0	int
;	O
while	O
(	O
cwrite	long
>	O
0	int
)	O
{	O
int	O
cdid	int
;	O
while	O
(	O
TRUE	O
)	O
{	O
if	O
(	O
FGOT_QUIT_SIGNAL	O
(	O
)	O
)	O
return	O
FALSE	O
;	O
cdid	int
=	O
write	function
(	O
q	pointer
->	O
o	int
,	O
zwrite	pointer
,	O
cwrite	long
)	O
;	O
if	O
(	O
cdid	int
>=	O
0	int
)	O
break	O
;	O
if	O
(	O
errno	O
!=	O
EINTR	int
)	O
break	O
;	O
ulog	function
(	O
LOG_ERROR	int
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
if	O
(	O
cdid	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
!=	O
EAGAIN	int
&&	O
errno	O
!=	O
EWOULDBLOCK	O
&&	O
errno	O
!=	O
ENODATA	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"write: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
cdid	int
=	O
0	int
;	O
}	O
if	O
(	O
cdid	int
==	O
0	int
)	O
{	O
++	O
czero	int
;	O
if	O
(	O
czero	int
>=	O
10	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Line disconnected"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
else	O
{	O
czero	int
=	O
0	int
;	O
cwrite	long
-=	O
cdid	int
;	O
zwrite	pointer
+=	O
cdid	int
;	O
}	O
}	O
return	O
TRUE	O
;	O
}	O
boolean	int
fsdouble_write	function
(	O
qconn	pointer
,	O
zwrite	pointer
,	O
cwrite	long
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
const	O
char	O
*	O
zwrite	pointer
;	O
size_t	long
cwrite	long
;	O
{	O
struct	O
ssysdep_conn	struct
*	O
qsysdep	pointer
;	O
qsysdep	pointer
=	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
;	O
qsysdep	pointer
->	O
o	int
=	O
qsysdep	pointer
->	O
ord	int
;	O
if	O
(	O
!	O
fsblock	function
(	O
qsysdep	pointer
,	O
TRUE	O
)	O
)	O
return	O
FALSE	O
;	O
qsysdep	pointer
->	O
o	int
=	O
qsysdep	pointer
->	O
owr	int
;	O
return	O
fsysdep_conn_write	function
(	O
qconn	pointer
,	O
zwrite	pointer
,	O
cwrite	long
)	O
;	O
}	O
boolean	int
fsysdep_conn_io	function
(	O
qconn	pointer
,	O
zwrite	pointer
,	O
pcwrite	pointer
,	O
zread	pointer
,	O
pcread	pointer
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
const	O
char	O
*	O
zwrite	pointer
;	O
size_t	long
*	O
pcwrite	pointer
;	O
char	O
*	O
zread	pointer
;	O
size_t	long
*	O
pcread	pointer
;	O
{	O
struct	O
ssysdep_conn	struct
*	O
q	pointer
;	O
size_t	long
cwrite	long
,	O
cread	long
;	O
int	O
czero	int
;	O
q	pointer
=	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
;	O
cwrite	long
=	O
*	O
pcwrite	pointer
;	O
*	O
pcwrite	pointer
=	O
0	int
;	O
cread	long
=	O
*	O
pcread	pointer
;	O
*	O
pcread	pointer
=	O
0	int
;	O
czero	int
=	O
0	int
;	O
while	O
(	O
TRUE	O
)	O
{	O
int	O
cgot	int
,	O
cdid	int
;	O
size_t	long
cdo	long
;	O
if	O
(	O
q	pointer
->	O
ord	int
>=	O
0	int
)	O
q	pointer
->	O
o	int
=	O
q	pointer
->	O
ord	int
;	O
if	O
(	O
!	O
fsblock	function
(	O
q	pointer
,	O
FALSE	O
)	O
)	O
return	O
FALSE	O
;	O
while	O
(	O
TRUE	O
)	O
{	O
if	O
(	O
FGOT_QUIT_SIGNAL	O
(	O
)	O
)	O
return	O
FALSE	O
;	O
cgot	int
=	O
read	function
(	O
q	pointer
->	O
o	int
,	O
zread	pointer
,	O
cread	long
)	O
;	O
if	O
(	O
cgot	int
>=	O
0	int
)	O
break	O
;	O
if	O
(	O
errno	O
!=	O
EINTR	int
)	O
break	O
;	O
ulog	function
(	O
LOG_ERROR	int
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
if	O
(	O
cgot	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
!=	O
EAGAIN	int
&&	O
errno	O
!=	O
EWOULDBLOCK	O
&&	O
errno	O
!=	O
ENODATA	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"read: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
cgot	int
=	O
0	int
;	O
}	O
cread	long
-=	O
cgot	int
;	O
zread	pointer
+=	O
cgot	int
;	O
*	O
pcread	pointer
+=	O
cgot	int
;	O
if	O
(	O
cread	long
==	O
0	int
||	O
cwrite	long
==	O
0	int
)	O
return	O
TRUE	O
;	O
cdo	long
=	O
cwrite	long
;	O
if	O
(	O
q	pointer
->	O
owr	int
>=	O
0	int
)	O
q	pointer
->	O
o	int
=	O
q	pointer
->	O
owr	int
;	O
while	O
(	O
TRUE	O
)	O
{	O
if	O
(	O
FGOT_QUIT_SIGNAL	O
(	O
)	O
)	O
return	O
FALSE	O
;	O
cdid	int
=	O
write	function
(	O
q	pointer
->	O
o	int
,	O
zwrite	pointer
,	O
cdo	long
)	O
;	O
if	O
(	O
cdid	int
>=	O
0	int
)	O
break	O
;	O
if	O
(	O
errno	O
!=	O
EINTR	int
)	O
break	O
;	O
ulog	function
(	O
LOG_ERROR	int
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
if	O
(	O
cdid	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
!=	O
EAGAIN	int
&&	O
errno	O
!=	O
EWOULDBLOCK	O
&&	O
errno	O
!=	O
ENODATA	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"write: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
cdid	int
=	O
0	int
;	O
}	O
if	O
(	O
cdid	int
>	O
0	int
)	O
{	O
cwrite	long
-=	O
cdid	int
;	O
zwrite	pointer
+=	O
cdid	int
;	O
*	O
pcwrite	pointer
+=	O
cdid	int
;	O
if	O
(	O
cwrite	long
==	O
0	int
)	O
return	O
TRUE	O
;	O
czero	int
=	O
0	int
;	O
}	O
else	O
{	O
struct	O
timeval	struct
stime	struct
;	O
fd_set	struct
smask	struct
;	O
int	O
c	int
;	O
if	O
(	O
q	pointer
->	O
fterminal	int
)	O
{	O
unsigned	O
long	O
cwait	int
;	O
cwait	int
=	O
1024	int
;	O
if	O
(	O
cwait	int
>	O
cread	long
)	O
cwait	int
=	O
cread	long
;	O
stime	struct
.	O
tv_sec	long
=	O
(	O
cwait	int
*	O
10	int
)	O
/	O
q	pointer
->	O
ibaud	long
;	O
stime	struct
.	O
tv_usec	long
=	O
(	O
(	O
(	O
(	O
cwait	int
*	O
1000000	int
)	O
/	O
q	pointer
->	O
ibaud	long
)	O
*	O
10	int
)	O
%	O
1000000	int
)	O
;	O
}	O
else	O
{	O
stime	struct
.	O
tv_sec	long
=	O
1	int
;	O
stime	struct
.	O
tv_usec	long
=	O
0	int
;	O
}	O
FD_ZERO	O
(	O
&	O
smask	struct
)	O
;	O
FD_SET	O
(	O
q	pointer
->	O
o	int
,	O
&	O
smask	struct
)	O
;	O
if	O
(	O
FGOT_QUIT_SIGNAL	O
(	O
)	O
)	O
return	O
FALSE	O
;	O
DEBUG_MESSAGE0	O
(	O
DEBUG_PORT	O
,	O
"fsysdep_conn_io: Calling select"	pointer
)	O
;	O
c	int
=	O
select	function
(	O
q	pointer
->	O
o	int
+	O
1	int
,	O
(	O
pointer	pointer
)	O
NULL	O
,	O
(	O
pointer	pointer
)	O
&	O
smask	struct
,	O
(	O
pointer	pointer
)	O
NULL	O
,	O
&	O
stime	struct
)	O
;	O
if	O
(	O
c	int
<	O
0	int
&&	O
errno	O
==	O
EINTR	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
else	O
if	O
(	O
c	int
>=	O
0	int
)	O
{	O
}	O
else	O
{	O
int	O
ierr	int
;	O
if	O
(	O
q	pointer
->	O
ord	int
>=	O
0	int
)	O
q	pointer
->	O
o	int
=	O
q	pointer
->	O
ord	int
;	O
if	O
(	O
!	O
fsblock	function
(	O
q	pointer
,	O
TRUE	O
)	O
)	O
return	O
FALSE	O
;	O
DEBUG_MESSAGE0	O
(	O
DEBUG_PORT	O
,	O
"fsysdep_conn_io: Blocking write"	pointer
)	O
;	O
if	O
(	O
q	pointer
->	O
owr	int
>=	O
0	int
)	O
q	pointer
->	O
o	int
=	O
q	pointer
->	O
owr	int
;	O
if	O
(	O
FGOT_QUIT_SIGNAL	O
(	O
)	O
)	O
return	O
FALSE	O
;	O
usset_signal	function
(	O
SIGALRM	int
,	O
usalarm	function
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
q	pointer
->	O
fterminal	int
)	O
alarm	function
(	O
(	O
int	O
)	O
(	O
(	O
long	O
)	O
10240	int
/	O
q	pointer
->	O
ibaud	long
)	O
+	O
1	int
)	O
;	O
else	O
alarm	function
(	O
1	int
)	O
;	O
cdid	int
=	O
write	function
(	O
q	pointer
->	O
o	int
,	O
zwrite	pointer
,	O
1	int
)	O
;	O
ierr	int
=	O
errno	O
;	O
usset_signal	function
(	O
SIGALRM	int
,	O
SIG_IGN	O
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
alarm	function
(	O
0	int
)	O
;	O
if	O
(	O
cdid	int
<	O
0	int
)	O
{	O
if	O
(	O
ierr	int
==	O
EINTR	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
else	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"write: %s"	pointer
,	O
strerror	function
(	O
ierr	int
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
else	O
if	O
(	O
cdid	int
==	O
0	int
)	O
{	O
++	O
czero	int
;	O
if	O
(	O
czero	int
>=	O
10	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Line disconnected"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
else	O
{	O
cwrite	long
-=	O
cdid	int
;	O
zwrite	pointer
+=	O
cdid	int
;	O
*	O
pcwrite	pointer
+=	O
cdid	int
;	O
czero	int
=	O
0	int
;	O
}	O
}	O
}	O
}	O
}	O
static	O
boolean	int
fsserial_break	function
(	O
qconn	pointer
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
{	O
struct	O
ssysdep_conn	struct
*	O
q	pointer
;	O
q	pointer
=	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
;	O
return	O
tcsendbreak	function
(	O
q	pointer
->	O
o	int
,	O
0	int
)	O
==	O
0	int
;	O
}	O
static	O
boolean	int
fsstdin_break	function
(	O
qconn	pointer
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
{	O
struct	O
ssysdep_conn	struct
*	O
qsysdep	pointer
;	O
qsysdep	pointer
=	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
;	O
qsysdep	pointer
->	O
o	int
=	O
qsysdep	pointer
->	O
owr	int
;	O
return	O
fsserial_break	function
(	O
qconn	pointer
)	O
;	O
}	O
static	O
boolean	int
fsserial_set	function
(	O
qconn	pointer
,	O
tparity	enum
,	O
tstrip	enum
,	O
txonxoff	enum
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
enum	O
tparitysetting	enum
tparity	enum
;	O
enum	O
tstripsetting	enum
tstrip	enum
;	O
enum	O
txonxoffsetting	enum
txonxoff	enum
;	O
{	O
register	O
struct	O
ssysdep_conn	struct
*	O
q	pointer
;	O
boolean	int
fchanged	int
,	O
fdo	int
;	O
unsigned	O
int	O
iset	int
=	O
0	int
;	O
unsigned	O
int	O
iclear	int
=	O
0	int
;	O
q	pointer
=	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
;	O
if	O
(	O
!	O
q	pointer
->	O
fterminal	int
)	O
return	O
TRUE	O
;	O
fchanged	int
=	O
FALSE	O
;	O
fdo	int
=	O
FALSE	O
;	O
switch	O
(	O
tparity	enum
)	O
{	O
case	O
PARITYSETTING_DEFAULT	int
:	O
break	O
;	O
case	O
PARITYSETTING_NONE	int
:	O
iset	int
=	O
CS8	int
;	O
iclear	int
=	O
PARENB	int
|	O
PARODD	int
|	O
(	O
CSIZE	int
&	O
~	O
CS8	int
)	O
;	O
fdo	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
PARITYSETTING_EVEN	int
:	O
iset	int
=	O
PARENB	int
|	O
CS7	int
;	O
iclear	int
=	O
PARODD	int
|	O
(	O
CSIZE	int
&	O
~	O
CS7	int
)	O
;	O
fdo	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
PARITYSETTING_ODD	int
:	O
iset	int
=	O
PARENB	int
|	O
PARODD	int
|	O
CS7	int
;	O
iclear	int
=	O
CSIZE	int
&	O
~	O
CS7	int
;	O
fdo	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
PARITYSETTING_MARK	int
:	O
case	O
PARITYSETTING_SPACE	int
:	O
break	O
;	O
}	O
if	O
(	O
fdo	int
)	O
{	O
if	O
(	O
(	O
q	pointer
->	O
snew	struct
.	O
c_cflag	int
&	O
iset	int
)	O
!=	O
iset	int
||	O
(	O
q	pointer
->	O
snew	struct
.	O
c_cflag	int
&	O
iclear	int
)	O
!=	O
0	int
)	O
{	O
q	pointer
->	O
snew	struct
.	O
c_cflag	int
|=	O
iset	int
;	O
q	pointer
->	O
snew	struct
.	O
c_cflag	int
&=	O
~	O
iclear	int
;	O
fchanged	int
=	O
TRUE	O
;	O
}	O
}	O
fdo	int
=	O
FALSE	O
;	O
switch	O
(	O
tstrip	enum
)	O
{	O
case	O
STRIPSETTING_DEFAULT	int
:	O
break	O
;	O
case	O
STRIPSETTING_EIGHTBITS	int
:	O
iset	int
=	O
0	int
;	O
iclear	int
=	O
ISTRIP	int
;	O
fdo	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
STRIPSETTING_SEVENBITS	int
:	O
iset	int
=	O
ISTRIP	int
;	O
iclear	int
=	O
0	int
;	O
fdo	int
=	O
TRUE	O
;	O
break	O
;	O
}	O
if	O
(	O
fdo	int
)	O
{	O
if	O
(	O
(	O
q	pointer
->	O
snew	struct
.	O
c_iflag	int
&	O
iset	int
)	O
!=	O
iset	int
||	O
(	O
q	pointer
->	O
snew	struct
.	O
c_iflag	int
&	O
iclear	int
)	O
!=	O
0	int
)	O
{	O
q	pointer
->	O
snew	struct
.	O
c_iflag	int
|=	O
iset	int
;	O
q	pointer
->	O
snew	struct
.	O
c_iflag	int
&=	O
~	O
iclear	int
;	O
fchanged	int
=	O
TRUE	O
;	O
}	O
}	O
fdo	int
=	O
FALSE	O
;	O
switch	O
(	O
txonxoff	enum
)	O
{	O
case	O
XONXOFF_DEFAULT	int
:	O
break	O
;	O
case	O
XONXOFF_OFF	int
:	O
iset	int
=	O
0	int
;	O
iclear	int
=	O
IXON	int
|	O
IXOFF	int
;	O
fdo	int
=	O
TRUE	O
;	O
break	O
;	O
case	O
XONXOFF_ON	int
:	O
if	O
(	O
(	O
q	pointer
->	O
snew	struct
.	O
c_cflag	int
&	O
CRTSCTS	int
)	O
!=	O
0	int
)	O
{	O
iset	int
=	O
IXON	int
;	O
iclear	int
=	O
IXOFF	int
;	O
fdo	int
=	O
TRUE	O
;	O
break	O
;	O
}	O
iset	int
=	O
IXON	int
|	O
IXOFF	int
;	O
iclear	int
=	O
0	int
;	O
fdo	int
=	O
TRUE	O
;	O
break	O
;	O
}	O
if	O
(	O
fdo	int
)	O
{	O
if	O
(	O
(	O
q	pointer
->	O
snew	struct
.	O
c_iflag	int
&	O
iset	int
)	O
!=	O
iset	int
||	O
(	O
q	pointer
->	O
snew	struct
.	O
c_iflag	int
&	O
iclear	int
)	O
!=	O
0	int
)	O
{	O
q	pointer
->	O
snew	struct
.	O
c_iflag	int
|=	O
iset	int
;	O
q	pointer
->	O
snew	struct
.	O
c_iflag	int
&=	O
~	O
iclear	int
;	O
fchanged	int
=	O
TRUE	O
;	O
}	O
}	O
if	O
(	O
fchanged	int
)	O
{	O
if	O
(	O
!	O
fsetterminfodrain	O
(	O
q	pointer
->	O
o	int
,	O
&	O
q	pointer
->	O
snew	struct
)	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Can't change terminal settings: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
return	O
TRUE	O
;	O
}	O
static	O
boolean	int
fsstdin_set	function
(	O
qconn	pointer
,	O
tparity	enum
,	O
tstrip	enum
,	O
txonxoff	enum
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
enum	O
tparitysetting	enum
tparity	enum
;	O
enum	O
tstripsetting	enum
tstrip	enum
;	O
enum	O
txonxoffsetting	enum
txonxoff	enum
;	O
{	O
struct	O
ssysdep_conn	struct
*	O
qsysdep	pointer
;	O
qsysdep	pointer
=	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
;	O
qsysdep	pointer
->	O
o	int
=	O
qsysdep	pointer
->	O
ord	int
;	O
return	O
fsserial_set	function
(	O
qconn	pointer
,	O
tparity	enum
,	O
tstrip	enum
,	O
txonxoff	enum
)	O
;	O
}	O
static	O
boolean	int
fsrun_chat	function
(	O
oread	int
,	O
owrite	int
,	O
pzprog	pointer
)	O
int	O
oread	int
;	O
int	O
owrite	int
;	O
char	O
*	O
*	O
pzprog	pointer
;	O
{	O
int	O
aidescs	pointer
[	O
3	int
]	O
;	O
FILE	struct
*	O
e	pointer
;	O
pid_t	int
ipid	int
;	O
char	O
*	O
z	pointer
;	O
size_t	long
c	int
;	O
aidescs	pointer
[	O
0	int
]	O
=	O
oread	int
;	O
aidescs	pointer
[	O
1	int
]	O
=	O
owrite	int
;	O
aidescs	pointer
[	O
2	int
]	O
=	O
SPAWN_READ_PIPE	O
;	O
ipid	int
=	O
ixsspawn	function
(	O
(	O
const	O
char	O
*	O
*	O
)	O
pzprog	pointer
,	O
aidescs	pointer
,	O
TRUE	O
,	O
TRUE	O
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
,	O
FALSE	O
,	O
TRUE	O
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
ipid	int
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"ixsspawn (%s): %s"	pointer
,	O
pzprog	pointer
[	O
0	int
]	O
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
e	pointer
=	O
fdopen	function
(	O
aidescs	pointer
[	O
2	int
]	O
,	O
(	O
char	O
*	O
)	O
"r"	pointer
)	O
;	O
if	O
(	O
e	pointer
==	O
NULL	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"fdopen: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
(	O
void	O
)	O
close	function
(	O
aidescs	pointer
[	O
2	int
]	O
)	O
;	O
(	O
void	O
)	O
kill	function
(	O
ipid	int
,	O
SIGKILL	int
)	O
;	O
(	O
void	O
)	O
ixswait	function
(	O
(	O
unsigned	O
long	O
)	O
ipid	int
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
z	pointer
=	O
NULL	O
;	O
c	int
=	O
0	int
;	O
while	O
(	O
getline	function
(	O
&	O
z	pointer
,	O
&	O
c	int
,	O
e	pointer
)	O
>	O
0	int
)	O
{	O
size_t	long
clen	long
;	O
clen	long
=	O
strlen	function
(	O
z	pointer
)	O
;	O
if	O
(	O
z	pointer
[	O
clen	long
-	O
1	int
]	O
==	O
'\n'	O
)	O
z	pointer
[	O
clen	long
-	O
1	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
*	O
z	pointer
!=	O
'\0'	O
)	O
ulog	function
(	O
LOG_NORMAL	int
,	O
"chat: %s"	pointer
,	O
z	pointer
)	O
;	O
}	O
xfree	function
(	O
(	O
pointer	pointer
)	O
z	pointer
)	O
;	O
(	O
void	O
)	O
fclose	function
(	O
e	pointer
)	O
;	O
return	O
ixswait	function
(	O
(	O
unsigned	O
long	O
)	O
ipid	int
,	O
"Chat program"	pointer
)	O
==	O
0	int
;	O
}	O
boolean	int
fsdouble_chat	function
(	O
qconn	pointer
,	O
pzprog	pointer
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
char	O
*	O
*	O
pzprog	pointer
;	O
{	O
struct	O
ssysdep_conn	struct
*	O
qsysdep	pointer
;	O
boolean	int
fret	int
;	O
qsysdep	pointer
=	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
;	O
fret	int
=	O
fsrun_chat	function
(	O
qsysdep	pointer
->	O
ord	int
,	O
qsysdep	pointer
->	O
owr	int
,	O
pzprog	pointer
)	O
;	O
if	O
(	O
qsysdep	pointer
->	O
fterminal	int
)	O
(	O
void	O
)	O
fgetterminfo	O
(	O
qsysdep	pointer
->	O
ord	int
,	O
&	O
qsysdep	pointer
->	O
snew	struct
)	O
;	O
return	O
fret	int
;	O
}	O
boolean	int
fsysdep_conn_chat	function
(	O
qconn	pointer
,	O
pzprog	pointer
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
char	O
*	O
*	O
pzprog	pointer
;	O
{	O
struct	O
ssysdep_conn	struct
*	O
qsysdep	pointer
;	O
boolean	int
fret	int
;	O
qsysdep	pointer
=	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
;	O
fret	int
=	O
fsrun_chat	function
(	O
qsysdep	pointer
->	O
o	int
,	O
qsysdep	pointer
->	O
o	int
,	O
pzprog	pointer
)	O
;	O
if	O
(	O
qsysdep	pointer
->	O
fterminal	int
)	O
(	O
void	O
)	O
fgetterminfo	O
(	O
qsysdep	pointer
->	O
o	int
,	O
&	O
qsysdep	pointer
->	O
snew	struct
)	O
;	O
return	O
fret	int
;	O
}	O
static	O
long	O
isserial_baud	function
(	O
qconn	pointer
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
{	O
struct	O
ssysdep_conn	struct
*	O
qsysdep	pointer
;	O
qsysdep	pointer
=	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
;	O
return	O
qsysdep	pointer
->	O
ibaud	long
;	O
}	O
