verify	O
(	O
TYPE_IS_INTEGER	O
(	O
time_t	long
)	O
)	O
;	O
verify	O
(	O
!	O
TYPE_SIGNED	O
(	O
time_t	long
)	O
||	O
INTMAX_MIN	O
<=	O
TYPE_MINIMUM	O
(	O
time_t	long
)	O
)	O
;	O
verify	O
(	O
TYPE_MAXIMUM	O
(	O
time_t	long
)	O
<=	O
INTMAX_MAX	O
)	O
;	O
static	O
bool	bool
time_overflow	function
(	O
intmax_t	long
n	long
)	O
{	O
return	O
!	O
(	O
(	O
TYPE_SIGNED	O
(	O
time_t	long
)	O
?	O
TYPE_MINIMUM	O
(	O
time_t	long
)	O
<=	O
n	long
:	O
0	int
<=	O
n	long
)	O
&&	O
n	long
<=	O
TYPE_MAXIMUM	O
(	O
time_t	long
)	O
)	O
;	O
}	O
static	O
unsigned	O
char	O
to_uchar	function
(	O
char	O
ch	char
)	O
{	O
return	O
ch	char
;	O
}	O
static	O
void	O
_GL_ATTRIBUTE_FORMAT	O
(	O
(	O
__printf__	function
,	O
1	int
,	O
2	int
)	O
)	O
dbg_printf	function
(	O
char	O
const	O
*	O
msg	pointer
,	O
...	O
)	O
{	O
va_list	array
args	array
;	O
fputs	function
(	O
"date: "	pointer
,	O
stderr	pointer
)	O
;	O
va_start	O
(	O
args	array
,	O
msg	pointer
)	O
;	O
vfprintf	function
(	O
stderr	pointer
,	O
msg	pointer
,	O
args	array
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
}	O
typedef	O
struct	O
{	O
bool	bool
negative	bool
;	O
intmax_t	long
value	long
;	O
ptrdiff_t	long
digits	long
;	O
}	O
textint	struct
;	O
typedef	O
struct	O
{	O
char	O
const	O
*	O
name	pointer
;	O
int	O
type	int
;	O
int	O
value	long
;	O
}	O
table	struct
;	O
enum	O
{	O
MERam	int
,	O
MERpm	int
,	O
MER24	int
}	O
;	O
enum	O
{	O
DBGBUFSIZE	int
=	O
100	int
}	O
;	O
enum	O
{	O
BILLION	int
=	O
1000000000	int
,	O
LOG10_BILLION	int
=	O
9	int
}	O
;	O
typedef	O
struct	O
{	O
intmax_t	long
year	long
;	O
intmax_t	long
month	long
;	O
intmax_t	long
day	long
;	O
intmax_t	long
hour	long
;	O
intmax_t	long
minutes	long
;	O
intmax_t	long
seconds	long
;	O
int	O
ns	long
;	O
}	O
relative_time	struct
;	O
typedef	O
struct	O
{	O
const	O
char	O
*	O
input	pointer
;	O
intmax_t	long
day_ordinal	long
;	O
int	O
day_number	int
;	O
int	O
local_isdst	int
;	O
int	O
time_zone	int
;	O
int	O
meridian	int
;	O
textint	struct
year	long
;	O
intmax_t	long
month	long
;	O
intmax_t	long
day	long
;	O
intmax_t	long
hour	long
;	O
intmax_t	long
minutes	long
;	O
struct	O
timespec	struct
seconds	long
;	O
relative_time	struct
rel	struct
;	O
bool	bool
timespec_seen	bool
;	O
bool	bool
rels_seen	bool
;	O
ptrdiff_t	long
dates_seen	long
;	O
ptrdiff_t	long
days_seen	long
;	O
ptrdiff_t	long
local_zones_seen	long
;	O
ptrdiff_t	long
dsts_seen	long
;	O
ptrdiff_t	long
times_seen	long
;	O
ptrdiff_t	long
zones_seen	long
;	O
bool	bool
year_seen	bool
;	O
bool	bool
parse_datetime_debug	bool
;	O
bool	bool
debug_dates_seen	bool
;	O
bool	bool
debug_days_seen	bool
;	O
bool	bool
debug_local_zones_seen	bool
;	O
bool	bool
debug_times_seen	bool
;	O
bool	bool
debug_zones_seen	bool
;	O
bool	bool
debug_year_seen	bool
;	O
bool	bool
debug_ordinal_day_seen	bool
;	O
table	struct
local_time_zone_table	array
[	O
3	int
]	O
;	O
}	O
parser_control	struct
;	O
union	O
YYSTYPE	union
;	O
static	O
int	O
yylex	function
(	O
union	O
YYSTYPE	union
*	O
,	O
parser_control	struct
*	O
)	O
;	O
static	O
int	O
yyerror	function
(	O
parser_control	struct
const	O
*	O
,	O
char	O
const	O
*	O
)	O
;	O
static	O
bool	bool
time_zone_hhmm	function
(	O
parser_control	struct
*	O
,	O
textint	struct
,	O
intmax_t	long
)	O
;	O
static	O
void	O
digits_to_date_time	function
(	O
parser_control	struct
*	O
pc	pointer
,	O
textint	struct
text_int	struct
)	O
{	O
if	O
(	O
pc	pointer
->	O
dates_seen	long
&&	O
!	O
pc	pointer
->	O
year	long
.	O
digits	long
&&	O
!	O
pc	pointer
->	O
rels_seen	bool
&&	O
(	O
pc	pointer
->	O
times_seen	long
||	O
2	int
<	O
text_int	struct
.	O
digits	long
)	O
)	O
{	O
pc	pointer
->	O
year_seen	bool
=	O
true	int
;	O
pc	pointer
->	O
year	long
=	O
text_int	struct
;	O
}	O
else	O
{	O
if	O
(	O
4	int
<	O
text_int	struct
.	O
digits	long
)	O
{	O
pc	pointer
->	O
dates_seen	long
++	O
;	O
pc	pointer
->	O
day	long
=	O
text_int	struct
.	O
value	long
%	O
100	int
;	O
pc	pointer
->	O
month	long
=	O
(	O
text_int	struct
.	O
value	long
/	O
100	int
)	O
%	O
100	int
;	O
pc	pointer
->	O
year	long
.	O
value	long
=	O
text_int	struct
.	O
value	long
/	O
10000	int
;	O
pc	pointer
->	O
year	long
.	O
digits	long
=	O
text_int	struct
.	O
digits	long
-	O
4	int
;	O
}	O
else	O
{	O
pc	pointer
->	O
times_seen	long
++	O
;	O
if	O
(	O
text_int	struct
.	O
digits	long
<=	O
2	int
)	O
{	O
pc	pointer
->	O
hour	long
=	O
text_int	struct
.	O
value	long
;	O
pc	pointer
->	O
minutes	long
=	O
0	int
;	O
}	O
else	O
{	O
pc	pointer
->	O
hour	long
=	O
text_int	struct
.	O
value	long
/	O
100	int
;	O
pc	pointer
->	O
minutes	long
=	O
text_int	struct
.	O
value	long
%	O
100	int
;	O
}	O
pc	pointer
->	O
seconds	long
.	O
tv_sec	long
=	O
0	int
;	O
pc	pointer
->	O
seconds	long
.	O
tv_nsec	long
=	O
0	int
;	O
pc	pointer
->	O
meridian	int
=	O
MER24	int
;	O
}	O
}	O
}	O
static	O
bool	bool
apply_relative_time	function
(	O
parser_control	struct
*	O
pc	pointer
,	O
relative_time	struct
rel	struct
,	O
int	O
factor	int
)	O
{	O
if	O
(	O
factor	int
<	O
0	int
?	O
(	O
INT_SUBTRACT_WRAPV	O
(	O
pc	pointer
->	O
rel	struct
.	O
ns	long
,	O
rel	struct
.	O
ns	long
,	O
&	O
pc	pointer
->	O
rel	struct
.	O
ns	long
)	O
|	O
INT_SUBTRACT_WRAPV	O
(	O
pc	pointer
->	O
rel	struct
.	O
seconds	long
,	O
rel	struct
.	O
seconds	long
,	O
&	O
pc	pointer
->	O
rel	struct
.	O
seconds	long
)	O
|	O
INT_SUBTRACT_WRAPV	O
(	O
pc	pointer
->	O
rel	struct
.	O
minutes	long
,	O
rel	struct
.	O
minutes	long
,	O
&	O
pc	pointer
->	O
rel	struct
.	O
minutes	long
)	O
|	O
INT_SUBTRACT_WRAPV	O
(	O
pc	pointer
->	O
rel	struct
.	O
hour	long
,	O
rel	struct
.	O
hour	long
,	O
&	O
pc	pointer
->	O
rel	struct
.	O
hour	long
)	O
|	O
INT_SUBTRACT_WRAPV	O
(	O
pc	pointer
->	O
rel	struct
.	O
day	long
,	O
rel	struct
.	O
day	long
,	O
&	O
pc	pointer
->	O
rel	struct
.	O
day	long
)	O
|	O
INT_SUBTRACT_WRAPV	O
(	O
pc	pointer
->	O
rel	struct
.	O
month	long
,	O
rel	struct
.	O
month	long
,	O
&	O
pc	pointer
->	O
rel	struct
.	O
month	long
)	O
|	O
INT_SUBTRACT_WRAPV	O
(	O
pc	pointer
->	O
rel	struct
.	O
year	long
,	O
rel	struct
.	O
year	long
,	O
&	O
pc	pointer
->	O
rel	struct
.	O
year	long
)	O
)	O
:	O
(	O
INT_ADD_WRAPV	O
(	O
pc	pointer
->	O
rel	struct
.	O
ns	long
,	O
rel	struct
.	O
ns	long
,	O
&	O
pc	pointer
->	O
rel	struct
.	O
ns	long
)	O
|	O
INT_ADD_WRAPV	O
(	O
pc	pointer
->	O
rel	struct
.	O
seconds	long
,	O
rel	struct
.	O
seconds	long
,	O
&	O
pc	pointer
->	O
rel	struct
.	O
seconds	long
)	O
|	O
INT_ADD_WRAPV	O
(	O
pc	pointer
->	O
rel	struct
.	O
minutes	long
,	O
rel	struct
.	O
minutes	long
,	O
&	O
pc	pointer
->	O
rel	struct
.	O
minutes	long
)	O
|	O
INT_ADD_WRAPV	O
(	O
pc	pointer
->	O
rel	struct
.	O
hour	long
,	O
rel	struct
.	O
hour	long
,	O
&	O
pc	pointer
->	O
rel	struct
.	O
hour	long
)	O
|	O
INT_ADD_WRAPV	O
(	O
pc	pointer
->	O
rel	struct
.	O
day	long
,	O
rel	struct
.	O
day	long
,	O
&	O
pc	pointer
->	O
rel	struct
.	O
day	long
)	O
|	O
INT_ADD_WRAPV	O
(	O
pc	pointer
->	O
rel	struct
.	O
month	long
,	O
rel	struct
.	O
month	long
,	O
&	O
pc	pointer
->	O
rel	struct
.	O
month	long
)	O
|	O
INT_ADD_WRAPV	O
(	O
pc	pointer
->	O
rel	struct
.	O
year	long
,	O
rel	struct
.	O
year	long
,	O
&	O
pc	pointer
->	O
rel	struct
.	O
year	long
)	O
)	O
)	O
return	O
false	int
;	O
pc	pointer
->	O
rels_seen	bool
=	O
true	int
;	O
return	O
true	int
;	O
}	O
static	O
void	O
set_hhmmss	function
(	O
parser_control	struct
*	O
pc	pointer
,	O
intmax_t	long
hour	long
,	O
intmax_t	long
minutes	long
,	O
time_t	long
sec	long
,	O
int	O
nsec	int
)	O
{	O
pc	pointer
->	O
hour	long
=	O
hour	long
;	O
pc	pointer
->	O
minutes	long
=	O
minutes	long
;	O
pc	pointer
->	O
seconds	long
.	O
tv_sec	long
=	O
sec	long
;	O
pc	pointer
->	O
seconds	long
.	O
tv_nsec	long
=	O
nsec	int
;	O
}	O
static	O
const	O
char	O
*	O
str_days	function
(	O
parser_control	struct
*	O
pc	pointer
,	O
char	O
*	O
buffer	pointer
,	O
int	O
n	long
)	O
{	O
static	O
char	O
const	O
ordinal_values	array
[	O
]	O
[	O
11	int
]	O
=	O
{	O
"last"	pointer
,	O
"this"	pointer
,	O
"next/first"	pointer
,	O
"(SECOND)"	pointer
,	O
"third"	pointer
,	O
"fourth"	pointer
,	O
"fifth"	pointer
,	O
"sixth"	pointer
,	O
"seventh"	pointer
,	O
"eight"	pointer
,	O
"ninth"	pointer
,	O
"tenth"	pointer
,	O
"eleventh"	pointer
,	O
"twelfth"	pointer
}	O
;	O
static	O
char	O
const	O
days_values	array
[	O
]	O
[	O
4	int
]	O
=	O
{	O
"Sun"	pointer
,	O
"Mon"	pointer
,	O
"Tue"	pointer
,	O
"Wed"	pointer
,	O
"Thu"	pointer
,	O
"Fri"	pointer
,	O
"Sat"	pointer
}	O
;	O
int	O
len	int
;	O
if	O
(	O
pc	pointer
->	O
debug_ordinal_day_seen	bool
)	O
{	O
len	int
=	O
(	O
-	O
1	int
<=	O
pc	pointer
->	O
day_ordinal	long
&&	O
pc	pointer
->	O
day_ordinal	long
<=	O
12	int
?	O
snprintf	function
(	O
buffer	pointer
,	O
n	long
,	O
"%s"	pointer
,	O
ordinal_values	array
[	O
pc	pointer
->	O
day_ordinal	long
+	O
1	int
]	O
)	O
:	O
snprintf	function
(	O
buffer	pointer
,	O
n	long
,	O
"%"	pointer
PRIdMAX	O
,	O
pc	pointer
->	O
day_ordinal	long
)	O
)	O
;	O
}	O
else	O
{	O
buffer	pointer
[	O
0	int
]	O
=	O
'\0'	O
;	O
len	int
=	O
0	int
;	O
}	O
if	O
(	O
0	int
<=	O
pc	pointer
->	O
day_number	int
&&	O
pc	pointer
->	O
day_number	int
<=	O
6	int
&&	O
0	int
<=	O
len	int
&&	O
len	int
<	O
n	long
)	O
snprintf	function
(	O
buffer	pointer
+	O
len	int
,	O
n	long
-	O
len	int
,	O
&	O
" %s"	pointer
[	O
len	int
==	O
0	int
]	O
,	O
days_values	array
[	O
pc	pointer
->	O
day_number	int
]	O
)	O
;	O
else	O
{	O
}	O
return	O
buffer	pointer
;	O
}	O
enum	O
{	O
TIME_ZONE_BUFSIZE	int
=	O
INT_STRLEN_BOUND	O
(	O
intmax_t	long
)	O
+	O
sizeof	O
":MM:SS"	pointer
}	O
;	O
static	O
char	O
const	O
*	O
time_zone_str	function
(	O
int	O
time_zone	int
,	O
char	O
time_zone_buf	array
[	O
TIME_ZONE_BUFSIZE	int
]	O
)	O
{	O
char	O
*	O
p	pointer
=	O
time_zone_buf	array
;	O
char	O
sign	char
=	O
time_zone	int
<	O
0	int
?	O
'-'	O
:	O
'+'	O
;	O
int	O
hour	long
=	O
abs	function
(	O
time_zone	int
/	O
(	O
60	int
*	O
60	int
)	O
)	O
;	O
p	pointer
+=	O
sprintf	function
(	O
time_zone_buf	array
,	O
"%c%02d"	pointer
,	O
sign	char
,	O
hour	long
)	O
;	O
int	O
offset_from_hour	int
=	O
abs	function
(	O
time_zone	int
%	O
(	O
60	int
*	O
60	int
)	O
)	O
;	O
if	O
(	O
offset_from_hour	int
!=	O
0	int
)	O
{	O
int	O
mm	int
=	O
offset_from_hour	int
/	O
60	int
;	O
int	O
ss	int
=	O
offset_from_hour	int
%	O
60	int
;	O
*	O
p	pointer
++	O
=	O
':'	O
;	O
*	O
p	pointer
++	O
=	O
'0'	O
+	O
mm	int
/	O
10	int
;	O
*	O
p	pointer
++	O
=	O
'0'	O
+	O
mm	int
%	O
10	int
;	O
if	O
(	O
ss	int
)	O
{	O
*	O
p	pointer
++	O
=	O
':'	O
;	O
*	O
p	pointer
++	O
=	O
'0'	O
+	O
ss	int
/	O
10	int
;	O
*	O
p	pointer
++	O
=	O
'0'	O
+	O
ss	int
%	O
10	int
;	O
}	O
*	O
p	pointer
=	O
'\0'	O
;	O
}	O
return	O
time_zone_buf	array
;	O
}	O
static	O
void	O
debug_print_current_time	function
(	O
char	O
const	O
*	O
item	pointer
,	O
parser_control	struct
*	O
pc	pointer
)	O
{	O
bool	bool
space	bool
=	O
false	int
;	O
if	O
(	O
!	O
pc	pointer
->	O
parse_datetime_debug	bool
)	O
return	O
;	O
dbg_printf	function
(	O
_	O
(	O
"parsed %s part: "	pointer
)	O
,	O
item	pointer
)	O
;	O
if	O
(	O
pc	pointer
->	O
dates_seen	long
&&	O
!	O
pc	pointer
->	O
debug_dates_seen	bool
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"(Y-M-D) %04"	pointer
PRIdMAX	O
"-%02"	pointer
PRIdMAX	O
"-%02"	pointer
PRIdMAX	O
,	O
pc	pointer
->	O
year	long
.	O
value	long
,	O
pc	pointer
->	O
month	long
,	O
pc	pointer
->	O
day	long
)	O
;	O
pc	pointer
->	O
debug_dates_seen	bool
=	O
true	int
;	O
space	bool
=	O
true	int
;	O
}	O
if	O
(	O
pc	pointer
->	O
year_seen	bool
!=	O
pc	pointer
->	O
debug_year_seen	bool
)	O
{	O
if	O
(	O
space	bool
)	O
fputc	function
(	O
' '	O
,	O
stderr	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"year: %04"	pointer
PRIdMAX	O
)	O
,	O
pc	pointer
->	O
year	long
.	O
value	long
)	O
;	O
pc	pointer
->	O
debug_year_seen	bool
=	O
pc	pointer
->	O
year_seen	bool
;	O
space	bool
=	O
true	int
;	O
}	O
if	O
(	O
pc	pointer
->	O
times_seen	long
&&	O
!	O
pc	pointer
->	O
debug_times_seen	bool
)	O
{	O
intmax_t	long
sec	long
=	O
pc	pointer
->	O
seconds	long
.	O
tv_sec	long
;	O
fprintf	function
(	O
stderr	pointer
,	O
&	O
" %02"	pointer
PRIdMAX	O
":%02"	pointer
PRIdMAX	O
":%02"	pointer
PRIdMAX	O
[	O
!	O
space	bool
]	O
,	O
pc	pointer
->	O
hour	long
,	O
pc	pointer
->	O
minutes	long
,	O
sec	long
)	O
;	O
if	O
(	O
pc	pointer
->	O
seconds	long
.	O
tv_nsec	long
!=	O
0	int
)	O
{	O
int	O
nsec	int
=	O
pc	pointer
->	O
seconds	long
.	O
tv_nsec	long
;	O
fprintf	function
(	O
stderr	pointer
,	O
".%09d"	pointer
,	O
nsec	int
)	O
;	O
}	O
if	O
(	O
pc	pointer
->	O
meridian	int
==	O
MERpm	int
)	O
fputs	function
(	O
"pm"	pointer
,	O
stderr	pointer
)	O
;	O
pc	pointer
->	O
debug_times_seen	bool
=	O
true	int
;	O
space	bool
=	O
true	int
;	O
}	O
if	O
(	O
pc	pointer
->	O
days_seen	long
&&	O
!	O
pc	pointer
->	O
debug_days_seen	bool
)	O
{	O
if	O
(	O
space	bool
)	O
fputc	function
(	O
' '	O
,	O
stderr	pointer
)	O
;	O
char	O
tmp	array
[	O
DBGBUFSIZE	int
]	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s (day ordinal=%"	pointer
PRIdMAX	O
" number=%d)"	pointer
)	O
,	O
str_days	function
(	O
pc	pointer
,	O
tmp	array
,	O
sizeof	O
tmp	array
)	O
,	O
pc	pointer
->	O
day_ordinal	long
,	O
pc	pointer
->	O
day_number	int
)	O
;	O
pc	pointer
->	O
debug_days_seen	bool
=	O
true	int
;	O
space	bool
=	O
true	int
;	O
}	O
if	O
(	O
pc	pointer
->	O
local_zones_seen	long
&&	O
!	O
pc	pointer
->	O
debug_local_zones_seen	bool
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
&	O
" isdst=%d%s"	pointer
[	O
!	O
space	bool
]	O
,	O
pc	pointer
->	O
local_isdst	int
,	O
pc	pointer
->	O
dsts_seen	long
?	O
" DST"	pointer
:	O
""	pointer
)	O
;	O
pc	pointer
->	O
debug_local_zones_seen	bool
=	O
true	int
;	O
space	bool
=	O
true	int
;	O
}	O
if	O
(	O
pc	pointer
->	O
zones_seen	long
&&	O
!	O
pc	pointer
->	O
debug_zones_seen	bool
)	O
{	O
char	O
time_zone_buf	array
[	O
TIME_ZONE_BUFSIZE	int
]	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
&	O
" UTC%s"	pointer
[	O
!	O
space	bool
]	O
,	O
time_zone_str	function
(	O
pc	pointer
->	O
time_zone	int
,	O
time_zone_buf	array
)	O
)	O
;	O
pc	pointer
->	O
debug_zones_seen	bool
=	O
true	int
;	O
space	bool
=	O
true	int
;	O
}	O
if	O
(	O
pc	pointer
->	O
timespec_seen	bool
)	O
{	O
intmax_t	long
sec	long
=	O
pc	pointer
->	O
seconds	long
.	O
tv_sec	long
;	O
if	O
(	O
space	bool
)	O
fputc	function
(	O
' '	O
,	O
stderr	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"number of seconds: %"	pointer
PRIdMAX	O
)	O
,	O
sec	long
)	O
;	O
}	O
fputc	function
(	O
'\n'	O
,	O
stderr	pointer
)	O
;	O
}	O
static	O
bool	bool
print_rel_part	function
(	O
bool	bool
space	bool
,	O
intmax_t	long
val	long
,	O
char	O
const	O
*	O
name	pointer
)	O
{	O
if	O
(	O
val	long
==	O
0	int
)	O
return	O
space	bool
;	O
fprintf	function
(	O
stderr	pointer
,	O
&	O
" %+"	pointer
PRIdMAX	O
" %s"	pointer
[	O
!	O
space	bool
]	O
,	O
val	long
,	O
name	pointer
)	O
;	O
return	O
true	int
;	O
}	O
static	O
void	O
debug_print_relative_time	function
(	O
char	O
const	O
*	O
item	pointer
,	O
parser_control	struct
const	O
*	O
pc	pointer
)	O
{	O
bool	bool
space	bool
=	O
false	int
;	O
if	O
(	O
!	O
pc	pointer
->	O
parse_datetime_debug	bool
)	O
return	O
;	O
dbg_printf	function
(	O
_	O
(	O
"parsed %s part: "	pointer
)	O
,	O
item	pointer
)	O
;	O
if	O
(	O
pc	pointer
->	O
rel	struct
.	O
year	long
==	O
0	int
&&	O
pc	pointer
->	O
rel	struct
.	O
month	long
==	O
0	int
&&	O
pc	pointer
->	O
rel	struct
.	O
day	long
==	O
0	int
&&	O
pc	pointer
->	O
rel	struct
.	O
hour	long
==	O
0	int
&&	O
pc	pointer
->	O
rel	struct
.	O
minutes	long
==	O
0	int
&&	O
pc	pointer
->	O
rel	struct
.	O
seconds	long
==	O
0	int
&&	O
pc	pointer
->	O
rel	struct
.	O
ns	long
==	O
0	int
)	O
{	O
fputs	function
(	O
_	O
(	O
"today/this/now\n"	pointer
)	O
,	O
stderr	pointer
)	O
;	O
return	O
;	O
}	O
space	bool
=	O
print_rel_part	function
(	O
space	bool
,	O
pc	pointer
->	O
rel	struct
.	O
year	long
,	O
"year(s)"	pointer
)	O
;	O
space	bool
=	O
print_rel_part	function
(	O
space	bool
,	O
pc	pointer
->	O
rel	struct
.	O
month	long
,	O
"month(s)"	pointer
)	O
;	O
space	bool
=	O
print_rel_part	function
(	O
space	bool
,	O
pc	pointer
->	O
rel	struct
.	O
day	long
,	O
"day(s)"	pointer
)	O
;	O
space	bool
=	O
print_rel_part	function
(	O
space	bool
,	O
pc	pointer
->	O
rel	struct
.	O
hour	long
,	O
"hour(s)"	pointer
)	O
;	O
space	bool
=	O
print_rel_part	function
(	O
space	bool
,	O
pc	pointer
->	O
rel	struct
.	O
minutes	long
,	O
"minutes"	pointer
)	O
;	O
space	bool
=	O
print_rel_part	function
(	O
space	bool
,	O
pc	pointer
->	O
rel	struct
.	O
seconds	long
,	O
"seconds"	pointer
)	O
;	O
print_rel_part	function
(	O
space	bool
,	O
pc	pointer
->	O
rel	struct
.	O
ns	long
,	O
"nanoseconds"	pointer
)	O
;	O
fputc	function
(	O
'\n'	O
,	O
stderr	pointer
)	O
;	O
}	O
enum	O
yytokentype	enum
{	O
tAGO	int
=	O
258	int
,	O
tDST	int
=	O
259	int
,	O
tYEAR_UNIT	int
=	O
260	int
,	O
tMONTH_UNIT	int
=	O
261	int
,	O
tHOUR_UNIT	int
=	O
262	int
,	O
tMINUTE_UNIT	int
=	O
263	int
,	O
tSEC_UNIT	int
=	O
264	int
,	O
tDAY_UNIT	int
=	O
265	int
,	O
tDAY_SHIFT	int
=	O
266	int
,	O
tDAY	int
=	O
267	int
,	O
tDAYZONE	int
=	O
268	int
,	O
tLOCAL_ZONE	int
=	O
269	int
,	O
tMERIDIAN	int
=	O
270	int
,	O
tMONTH	int
=	O
271	int
,	O
tORDINAL	int
=	O
272	int
,	O
tZONE	int
=	O
273	int
,	O
tSNUMBER	int
=	O
274	int
,	O
tUNUMBER	int
=	O
275	int
,	O
tSDECIMAL_NUMBER	int
=	O
276	int
,	O
tUDECIMAL_NUMBER	int
=	O
277	int
}	O
;	O
union	O
YYSTYPE	union
{	O
intmax_t	long
intval	long
;	O
textint	struct
textintval	struct
;	O
struct	O
timespec	struct
timespec	struct
;	O
relative_time	struct
rel	struct
;	O
}	O
;	O
typedef	O
union	O
YYSTYPE	union
YYSTYPE	union
;	O
int	O
yyparse	function
(	O
parser_control	struct
*	O
pc	pointer
)	O
;	O
typedef	O
unsigned	O
char	O
yytype_uint8	char
;	O
typedef	O
signed	O
char	O
yytype_int8	char
;	O
typedef	O
unsigned	O
short	O
int	O
yytype_uint16	short
;	O
typedef	O
short	O
int	O
yytype_int16	short
;	O
union	O
yyalloc	union
{	O
yytype_int16	short
yyss_alloc	short
;	O
YYSTYPE	union
yyvs_alloc	union
;	O
}	O
;	O
static	O
const	O
yytype_uint8	char
yytranslate	array
[	O
]	O
=	O
{	O
0	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
26	int
,	O
2	int
,	O
2	int
,	O
27	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
25	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
23	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
24	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
1	int
,	O
2	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
10	int
,	O
11	int
,	O
12	int
,	O
13	int
,	O
14	int
,	O
15	int
,	O
16	int
,	O
17	int
,	O
18	int
,	O
19	int
,	O
20	int
,	O
21	int
,	O
22	int
}	O
;	O
static	O
const	O
yytype_int8	char
yypact	array
[	O
]	O
=	O
{	O
38	int
,	O
27	int
,	O
77	int
,	O
-	O
93	int
,	O
46	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
62	int
,	O
-	O
93	int
,	O
82	int
,	O
-	O
3	int
,	O
66	int
,	O
3	int
,	O
74	int
,	O
-	O
4	int
,	O
83	int
,	O
84	int
,	O
75	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
71	int
,	O
-	O
93	int
,	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
78	int
,	O
72	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
25	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
21	int
,	O
19	int
,	O
79	int
,	O
80	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
81	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
85	int
,	O
86	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
6	int
,	O
76	int
,	O
17	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
87	int
,	O
69	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
88	int
,	O
89	int
,	O
-	O
1	int
,	O
-	O
93	int
,	O
18	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
69	int
,	O
91	int
}	O
;	O
static	O
const	O
yytype_uint8	char
yydefact	array
[	O
]	O
=	O
{	O
5	int
,	O
0	int
,	O
0	int
,	O
2	int
,	O
3	int
,	O
85	int
,	O
87	int
,	O
84	int
,	O
86	int
,	O
4	int
,	O
82	int
,	O
83	int
,	O
1	int
,	O
56	int
,	O
59	int
,	O
65	int
,	O
68	int
,	O
73	int
,	O
62	int
,	O
81	int
,	O
37	int
,	O
35	int
,	O
28	int
,	O
0	int
,	O
0	int
,	O
30	int
,	O
0	int
,	O
88	int
,	O
0	int
,	O
0	int
,	O
31	int
,	O
6	int
,	O
7	int
,	O
16	int
,	O
8	int
,	O
21	int
,	O
9	int
,	O
10	int
,	O
12	int
,	O
11	int
,	O
49	int
,	O
13	int
,	O
52	int
,	O
74	int
,	O
53	int
,	O
14	int
,	O
15	int
,	O
38	int
,	O
29	int
,	O
0	int
,	O
45	int
,	O
54	int
,	O
57	int
,	O
63	int
,	O
66	int
,	O
69	int
,	O
60	int
,	O
39	int
,	O
36	int
,	O
90	int
,	O
32	int
,	O
75	int
,	O
76	int
,	O
78	int
,	O
79	int
,	O
80	int
,	O
77	int
,	O
55	int
,	O
58	int
,	O
64	int
,	O
67	int
,	O
70	int
,	O
61	int
,	O
40	int
,	O
18	int
,	O
47	int
,	O
90	int
,	O
0	int
,	O
0	int
,	O
22	int
,	O
89	int
,	O
71	int
,	O
72	int
,	O
33	int
,	O
0	int
,	O
51	int
,	O
44	int
,	O
0	int
,	O
0	int
,	O
34	int
,	O
43	int
,	O
48	int
,	O
50	int
,	O
27	int
,	O
25	int
,	O
41	int
,	O
0	int
,	O
17	int
,	O
46	int
,	O
91	int
,	O
19	int
,	O
90	int
,	O
0	int
,	O
23	int
,	O
26	int
,	O
0	int
,	O
0	int
,	O
25	int
,	O
42	int
,	O
25	int
,	O
20	int
,	O
24	int
,	O
0	int
,	O
25	int
}	O
;	O
static	O
const	O
yytype_int8	char
yypgoto	array
[	O
]	O
=	O
{	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
20	int
,	O
-	O
68	int
,	O
-	O
27	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
60	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
-	O
92	int
,	O
-	O
93	int
,	O
-	O
93	int
,	O
43	int
}	O
;	O
static	O
const	O
yytype_int8	char
yydefgoto	array
[	O
]	O
=	O
{	O
-	O
1	int
,	O
2	int
,	O
3	int
,	O
4	int
,	O
31	int
,	O
32	int
,	O
33	int
,	O
34	int
,	O
35	int
,	O
103	int
,	O
104	int
,	O
36	int
,	O
37	int
,	O
38	int
,	O
39	int
,	O
40	int
,	O
41	int
,	O
42	int
,	O
43	int
,	O
44	int
,	O
9	int
,	O
10	int
,	O
11	int
,	O
45	int
,	O
46	int
,	O
93	int
}	O
;	O
static	O
const	O
yytype_uint8	char
yytable	array
[	O
]	O
=	O
{	O
79	int
,	O
67	int
,	O
68	int
,	O
69	int
,	O
70	int
,	O
71	int
,	O
72	int
,	O
58	int
,	O
73	int
,	O
100	int
,	O
107	int
,	O
74	int
,	O
75	int
,	O
101	int
,	O
110	int
,	O
76	int
,	O
49	int
,	O
50	int
,	O
101	int
,	O
102	int
,	O
113	int
,	O
77	int
,	O
59	int
,	O
78	int
,	O
61	int
,	O
62	int
,	O
63	int
,	O
64	int
,	O
65	int
,	O
66	int
,	O
61	int
,	O
62	int
,	O
63	int
,	O
64	int
,	O
65	int
,	O
66	int
,	O
101	int
,	O
101	int
,	O
92	int
,	O
111	int
,	O
90	int
,	O
91	int
,	O
106	int
,	O
112	int
,	O
88	int
,	O
111	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
88	int
,	O
13	int
,	O
14	int
,	O
15	int
,	O
16	int
,	O
17	int
,	O
18	int
,	O
19	int
,	O
20	int
,	O
21	int
,	O
22	int
,	O
1	int
,	O
23	int
,	O
24	int
,	O
25	int
,	O
26	int
,	O
27	int
,	O
28	int
,	O
29	int
,	O
79	int
,	O
30	int
,	O
51	int
,	O
52	int
,	O
53	int
,	O
54	int
,	O
55	int
,	O
56	int
,	O
12	int
,	O
57	int
,	O
61	int
,	O
62	int
,	O
63	int
,	O
64	int
,	O
65	int
,	O
66	int
,	O
60	int
,	O
48	int
,	O
80	int
,	O
47	int
,	O
6	int
,	O
83	int
,	O
8	int
,	O
81	int
,	O
82	int
,	O
26	int
,	O
84	int
,	O
85	int
,	O
86	int
,	O
87	int
,	O
94	int
,	O
95	int
,	O
96	int
,	O
89	int
,	O
105	int
,	O
97	int
,	O
98	int
,	O
99	int
,	O
0	int
,	O
108	int
,	O
109	int
,	O
101	int
,	O
0	int
,	O
88	int
}	O
;	O
static	O
const	O
yytype_int8	char
yycheck	array
[	O
]	O
=	O
{	O
27	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
10	int
,	O
4	int
,	O
12	int
,	O
15	int
,	O
102	int
,	O
15	int
,	O
16	int
,	O
19	int
,	O
15	int
,	O
19	int
,	O
19	int
,	O
20	int
,	O
19	int
,	O
25	int
,	O
112	int
,	O
25	int
,	O
19	int
,	O
27	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
10	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
10	int
,	O
19	int
,	O
19	int
,	O
19	int
,	O
107	int
,	O
19	int
,	O
20	int
,	O
25	int
,	O
25	int
,	O
25	int
,	O
113	int
,	O
19	int
,	O
20	int
,	O
21	int
,	O
22	int
,	O
25	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
10	int
,	O
11	int
,	O
12	int
,	O
13	int
,	O
14	int
,	O
23	int
,	O
16	int
,	O
17	int
,	O
18	int
,	O
19	int
,	O
20	int
,	O
21	int
,	O
22	int
,	O
96	int
,	O
24	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
10	int
,	O
0	int
,	O
12	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
10	int
,	O
25	int
,	O
4	int
,	O
27	int
,	O
26	int
,	O
20	int
,	O
30	int
,	O
22	int
,	O
9	int
,	O
9	int
,	O
19	int
,	O
24	int
,	O
3	int
,	O
19	int
,	O
26	int
,	O
20	int
,	O
20	int
,	O
20	int
,	O
59	int
,	O
27	int
,	O
84	int
,	O
20	int
,	O
20	int
,	O
-	O
1	int
,	O
20	int
,	O
20	int
,	O
19	int
,	O
-	O
1	int
,	O
25	int
}	O
;	O
static	O
const	O
yytype_uint8	char
yystos	array
[	O
]	O
=	O
{	O
0	int
,	O
23	int
,	O
29	int
,	O
30	int
,	O
31	int
,	O
19	int
,	O
20	int
,	O
21	int
,	O
22	int
,	O
48	int
,	O
49	int
,	O
50	int
,	O
0	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
10	int
,	O
11	int
,	O
12	int
,	O
13	int
,	O
14	int
,	O
16	int
,	O
17	int
,	O
18	int
,	O
19	int
,	O
20	int
,	O
21	int
,	O
22	int
,	O
24	int
,	O
32	int
,	O
33	int
,	O
34	int
,	O
35	int
,	O
36	int
,	O
39	int
,	O
40	int
,	O
41	int
,	O
42	int
,	O
43	int
,	O
44	int
,	O
45	int
,	O
46	int
,	O
47	int
,	O
51	int
,	O
52	int
,	O
26	int
,	O
4	int
,	O
19	int
,	O
20	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
10	int
,	O
12	int
,	O
4	int
,	O
19	int
,	O
46	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
10	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
10	int
,	O
12	int
,	O
15	int
,	O
16	int
,	O
19	int
,	O
25	int
,	O
27	int
,	O
38	int
,	O
46	int
,	O
9	int
,	O
9	int
,	O
46	int
,	O
24	int
,	O
3	int
,	O
19	int
,	O
26	int
,	O
25	int
,	O
53	int
,	O
19	int
,	O
20	int
,	O
19	int
,	O
53	int
,	O
20	int
,	O
20	int
,	O
20	int
,	O
36	int
,	O
20	int
,	O
20	int
,	O
15	int
,	O
19	int
,	O
25	int
,	O
37	int
,	O
38	int
,	O
27	int
,	O
25	int
,	O
50	int
,	O
20	int
,	O
20	int
,	O
15	int
,	O
37	int
,	O
25	int
,	O
50	int
}	O
;	O
static	O
const	O
yytype_uint8	char
yyr1	array
[	O
]	O
=	O
{	O
0	int
,	O
28	int
,	O
29	int
,	O
29	int
,	O
30	int
,	O
31	int
,	O
31	int
,	O
32	int
,	O
32	int
,	O
32	int
,	O
32	int
,	O
32	int
,	O
32	int
,	O
32	int
,	O
32	int
,	O
32	int
,	O
33	int
,	O
34	int
,	O
35	int
,	O
35	int
,	O
35	int
,	O
35	int
,	O
36	int
,	O
36	int
,	O
36	int
,	O
37	int
,	O
37	int
,	O
38	int
,	O
39	int
,	O
39	int
,	O
40	int
,	O
40	int
,	O
40	int
,	O
40	int
,	O
40	int
,	O
40	int
,	O
40	int
,	O
41	int
,	O
41	int
,	O
41	int
,	O
41	int
,	O
42	int
,	O
42	int
,	O
42	int
,	O
42	int
,	O
42	int
,	O
42	int
,	O
42	int
,	O
42	int
,	O
42	int
,	O
43	int
,	O
44	int
,	O
44	int
,	O
44	int
,	O
45	int
,	O
45	int
,	O
45	int
,	O
45	int
,	O
45	int
,	O
45	int
,	O
45	int
,	O
45	int
,	O
45	int
,	O
45	int
,	O
45	int
,	O
45	int
,	O
45	int
,	O
45	int
,	O
45	int
,	O
45	int
,	O
45	int
,	O
45	int
,	O
45	int
,	O
45	int
,	O
45	int
,	O
46	int
,	O
46	int
,	O
46	int
,	O
46	int
,	O
46	int
,	O
46	int
,	O
47	int
,	O
48	int
,	O
48	int
,	O
49	int
,	O
49	int
,	O
50	int
,	O
50	int
,	O
51	int
,	O
52	int
,	O
53	int
,	O
53	int
}	O
;	O
static	O
const	O
yytype_uint8	char
yyr2	array
[	O
]	O
=	O
{	O
0	int
,	O
2	int
,	O
1	int
,	O
1	int
,	O
2	int
,	O
0	int
,	O
2	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
3	int
,	O
2	int
,	O
4	int
,	O
6	int
,	O
1	int
,	O
2	int
,	O
4	int
,	O
6	int
,	O
0	int
,	O
1	int
,	O
2	int
,	O
1	int
,	O
2	int
,	O
1	int
,	O
1	int
,	O
2	int
,	O
2	int
,	O
3	int
,	O
1	int
,	O
2	int
,	O
1	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
3	int
,	O
5	int
,	O
3	int
,	O
3	int
,	O
2	int
,	O
4	int
,	O
2	int
,	O
3	int
,	O
1	int
,	O
3	int
,	O
2	int
,	O
1	int
,	O
1	int
,	O
2	int
,	O
2	int
,	O
1	int
,	O
2	int
,	O
2	int
,	O
1	int
,	O
2	int
,	O
2	int
,	O
1	int
,	O
2	int
,	O
2	int
,	O
1	int
,	O
2	int
,	O
2	int
,	O
1	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
1	int
,	O
1	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
2	int
,	O
0	int
,	O
2	int
}	O
;	O
static	O
void	O
yydestruct	function
(	O
const	O
char	O
*	O
yymsg	pointer
,	O
int	O
yytype	int
,	O
YYSTYPE	union
*	O
yyvaluep	pointer
,	O
parser_control	struct
*	O
pc	pointer
)	O
{	O
YYUSE	O
(	O
yyvaluep	pointer
)	O
;	O
YYUSE	O
(	O
pc	pointer
)	O
;	O
if	O
(	O
!	O
yymsg	pointer
)	O
yymsg	pointer
=	O
"Deleting"	pointer
;	O
YY_SYMBOL_PRINT	O
(	O
yymsg	pointer
,	O
yytype	int
,	O
yyvaluep	pointer
,	O
yylocationp	O
)	O
;	O
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	O
YYUSE	O
(	O
yytype	int
)	O
;	O
YY_IGNORE_MAYBE_UNINITIALIZED_END	O
}	O
int	O
yyparse	function
(	O
parser_control	struct
*	O
pc	pointer
)	O
{	O
int	O
yychar	int
;	O
YY_INITIAL_VALUE	O
(	O
static	O
YYSTYPE	union
yyval_default	union
;	O
)	O
YYSTYPE	union
yylval	union
YY_INITIAL_VALUE	O
(	O
=	O
yyval_default	union
)	O
;	O
int	O
yynerrs	int
;	O
int	O
yystate	int
;	O
int	O
yyerrstatus	int
;	O
yytype_int16	short
yyssa	array
[	O
YYINITDEPTH	O
]	O
;	O
yytype_int16	short
*	O
yyss	pointer
;	O
yytype_int16	short
*	O
yyssp	pointer
;	O
YYSTYPE	union
yyvsa	array
[	O
YYINITDEPTH	O
]	O
;	O
YYSTYPE	union
*	O
yyvs	pointer
;	O
YYSTYPE	union
*	O
yyvsp	pointer
;	O
YYSIZE_T	O
yystacksize	long
;	O
int	O
yyn	int
;	O
int	O
yyresult	int
;	O
int	O
yytoken	int
=	O
0	int
;	O
YYSTYPE	union
yyval	union
;	O
int	O
yylen	int
=	O
0	int
;	O
yyssp	pointer
=	O
yyss	pointer
=	O
yyssa	array
;	O
yyvsp	pointer
=	O
yyvs	pointer
=	O
yyvsa	array
;	O
yystacksize	long
=	O
YYINITDEPTH	O
;	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Starting parse\n"	pointer
)	O
)	O
;	O
yystate	int
=	O
0	int
;	O
yyerrstatus	int
=	O
0	int
;	O
yynerrs	int
=	O
0	int
;	O
yychar	int
=	O
YYEMPTY	O
;	O
goto	O
yysetstate	O
;	O
yynewstate	O
:	O
yyssp	pointer
++	O
;	O
yysetstate	O
:	O
*	O
yyssp	pointer
=	O
yystate	int
;	O
if	O
(	O
yyss	pointer
+	O
yystacksize	long
-	O
1	int
<=	O
yyssp	pointer
)	O
{	O
YYSIZE_T	O
yysize	long
=	O
yyssp	pointer
-	O
yyss	pointer
+	O
1	int
;	O
if	O
(	O
YYMAXDEPTH	int
<=	O
yystacksize	long
)	O
goto	O
yyexhaustedlab	O
;	O
yystacksize	long
*=	O
2	int
;	O
if	O
(	O
YYMAXDEPTH	int
<	O
yystacksize	long
)	O
yystacksize	long
=	O
YYMAXDEPTH	int
;	O
{	O
yytype_int16	short
*	O
yyss1	pointer
=	O
yyss	pointer
;	O
union	O
yyalloc	union
*	O
yyptr	pointer
=	O
(	O
union	O
yyalloc	union
*	O
)	O
YYSTACK_ALLOC	O
(	O
YYSTACK_BYTES	O
(	O
yystacksize	long
)	O
)	O
;	O
if	O
(	O
!	O
yyptr	pointer
)	O
goto	O
yyexhaustedlab	O
;	O
YYSTACK_RELOCATE	O
(	O
yyss_alloc	short
,	O
yyss	pointer
)	O
;	O
YYSTACK_RELOCATE	O
(	O
yyvs_alloc	union
,	O
yyvs	pointer
)	O
;	O
if	O
(	O
yyss1	pointer
!=	O
yyssa	array
)	O
YYSTACK_FREE	O
(	O
yyss1	pointer
)	O
;	O
}	O
yyssp	pointer
=	O
yyss	pointer
+	O
yysize	long
-	O
1	int
;	O
yyvsp	pointer
=	O
yyvs	pointer
+	O
yysize	long
-	O
1	int
;	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Stack size increased to %lu\n"	pointer
,	O
(	O
unsigned	O
long	O
int	O
)	O
yystacksize	long
)	O
)	O
;	O
if	O
(	O
yyss	pointer
+	O
yystacksize	long
-	O
1	int
<=	O
yyssp	pointer
)	O
YYABORT	O
;	O
}	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Entering state %d\n"	pointer
,	O
yystate	int
)	O
)	O
;	O
if	O
(	O
yystate	int
==	O
YYFINAL	int
)	O
YYACCEPT	O
;	O
goto	O
yybackup	O
;	O
yybackup	O
:	O
yyn	int
=	O
yypact	array
[	O
yystate	int
]	O
;	O
if	O
(	O
yypact_value_is_default	O
(	O
yyn	int
)	O
)	O
goto	O
yydefault	O
;	O
if	O
(	O
yychar	int
==	O
YYEMPTY	O
)	O
{	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Reading a token: "	pointer
)	O
)	O
;	O
yychar	int
=	O
yylex	function
(	O
&	O
yylval	union
,	O
pc	pointer
)	O
;	O
}	O
if	O
(	O
yychar	int
<=	O
YYEOF	int
)	O
{	O
yychar	int
=	O
yytoken	int
=	O
YYEOF	int
;	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Now at end of input.\n"	pointer
)	O
)	O
;	O
}	O
else	O
{	O
yytoken	int
=	O
YYTRANSLATE	O
(	O
yychar	int
)	O
;	O
YY_SYMBOL_PRINT	O
(	O
"Next token is"	pointer
,	O
yytoken	int
,	O
&	O
yylval	union
,	O
&	O
yylloc	O
)	O
;	O
}	O
yyn	int
+=	O
yytoken	int
;	O
if	O
(	O
yyn	int
<	O
0	int
||	O
YYLAST	int
<	O
yyn	int
||	O
yycheck	array
[	O
yyn	int
]	O
!=	O
yytoken	int
)	O
goto	O
yydefault	O
;	O
yyn	int
=	O
yytable	array
[	O
yyn	int
]	O
;	O
if	O
(	O
yyn	int
<=	O
0	int
)	O
{	O
if	O
(	O
yytable_value_is_error	int
(	O
yyn	int
)	O
)	O
goto	O
yyerrlab	O
;	O
yyn	int
=	O
-	O
yyn	int
;	O
goto	O
yyreduce	O
;	O
}	O
if	O
(	O
yyerrstatus	int
)	O
yyerrstatus	int
--	O
;	O
YY_SYMBOL_PRINT	O
(	O
"Shifting"	pointer
,	O
yytoken	int
,	O
&	O
yylval	union
,	O
&	O
yylloc	O
)	O
;	O
yychar	int
=	O
YYEMPTY	O
;	O
yystate	int
=	O
yyn	int
;	O
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	O
*	O
++	O
yyvsp	pointer
=	O
yylval	union
;	O
YY_IGNORE_MAYBE_UNINITIALIZED_END	O
goto	O
yynewstate	O
;	O
yydefault	O
:	O
yyn	int
=	O
yydefact	array
[	O
yystate	int
]	O
;	O
if	O
(	O
yyn	int
==	O
0	int
)	O
goto	O
yyerrlab	O
;	O
goto	O
yyreduce	O
;	O
yyreduce	O
:	O
yylen	int
=	O
yyr2	array
[	O
yyn	int
]	O
;	O
yyval	union
=	O
yyvsp	pointer
[	O
1	int
-	O
yylen	int
]	O
;	O
YY_REDUCE_PRINT	O
(	O
yyn	int
)	O
;	O
switch	O
(	O
yyn	int
)	O
{	O
case	O
4	int
:	O
{	O
pc	pointer
->	O
seconds	long
=	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
timespec	struct
)	O
;	O
pc	pointer
->	O
timespec_seen	bool
=	O
true	int
;	O
debug_print_current_time	function
(	O
_	O
(	O
"number of seconds"	pointer
)	O
,	O
pc	pointer
)	O
;	O
}	O
break	O
;	O
case	O
7	int
:	O
{	O
pc	pointer
->	O
times_seen	long
++	O
;	O
pc	pointer
->	O
dates_seen	long
++	O
;	O
debug_print_current_time	function
(	O
_	O
(	O
"datetime"	pointer
)	O
,	O
pc	pointer
)	O
;	O
}	O
break	O
;	O
case	O
8	int
:	O
{	O
pc	pointer
->	O
times_seen	long
++	O
;	O
debug_print_current_time	function
(	O
_	O
(	O
"time"	pointer
)	O
,	O
pc	pointer
)	O
;	O
}	O
break	O
;	O
case	O
9	int
:	O
{	O
pc	pointer
->	O
local_zones_seen	long
++	O
;	O
debug_print_current_time	function
(	O
_	O
(	O
"local_zone"	pointer
)	O
,	O
pc	pointer
)	O
;	O
}	O
break	O
;	O
case	O
10	int
:	O
{	O
pc	pointer
->	O
zones_seen	long
++	O
;	O
debug_print_current_time	function
(	O
_	O
(	O
"zone"	pointer
)	O
,	O
pc	pointer
)	O
;	O
}	O
break	O
;	O
case	O
11	int
:	O
{	O
pc	pointer
->	O
dates_seen	long
++	O
;	O
debug_print_current_time	function
(	O
_	O
(	O
"date"	pointer
)	O
,	O
pc	pointer
)	O
;	O
}	O
break	O
;	O
case	O
12	int
:	O
{	O
pc	pointer
->	O
days_seen	long
++	O
;	O
debug_print_current_time	function
(	O
_	O
(	O
"day"	pointer
)	O
,	O
pc	pointer
)	O
;	O
}	O
break	O
;	O
case	O
13	int
:	O
{	O
debug_print_relative_time	function
(	O
_	O
(	O
"relative"	pointer
)	O
,	O
pc	pointer
)	O
;	O
}	O
break	O
;	O
case	O
14	int
:	O
{	O
debug_print_current_time	function
(	O
_	O
(	O
"number"	pointer
)	O
,	O
pc	pointer
)	O
;	O
}	O
break	O
;	O
case	O
15	int
:	O
{	O
debug_print_relative_time	function
(	O
_	O
(	O
"hybrid"	pointer
)	O
,	O
pc	pointer
)	O
;	O
}	O
break	O
;	O
case	O
18	int
:	O
{	O
set_hhmmss	function
(	O
pc	pointer
,	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
pc	pointer
->	O
meridian	int
=	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
intval	long
)	O
;	O
}	O
break	O
;	O
case	O
19	int
:	O
{	O
set_hhmmss	function
(	O
pc	pointer
,	O
(	O
yyvsp	pointer
[	O
-	O
3	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
,	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
,	O
0	int
,	O
0	int
)	O
;	O
pc	pointer
->	O
meridian	int
=	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
intval	long
)	O
;	O
}	O
break	O
;	O
case	O
20	int
:	O
{	O
set_hhmmss	function
(	O
pc	pointer
,	O
(	O
yyvsp	pointer
[	O
-	O
5	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
,	O
(	O
yyvsp	pointer
[	O
-	O
3	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
,	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
timespec	struct
)	O
.	O
tv_sec	long
,	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
timespec	struct
)	O
.	O
tv_nsec	long
)	O
;	O
pc	pointer
->	O
meridian	int
=	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
intval	long
)	O
;	O
}	O
break	O
;	O
case	O
22	int
:	O
{	O
set_hhmmss	function
(	O
pc	pointer
,	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
pc	pointer
->	O
meridian	int
=	O
MER24	int
;	O
}	O
break	O
;	O
case	O
23	int
:	O
{	O
set_hhmmss	function
(	O
pc	pointer
,	O
(	O
yyvsp	pointer
[	O
-	O
3	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
,	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
,	O
0	int
,	O
0	int
)	O
;	O
pc	pointer
->	O
meridian	int
=	O
MER24	int
;	O
}	O
break	O
;	O
case	O
24	int
:	O
{	O
set_hhmmss	function
(	O
pc	pointer
,	O
(	O
yyvsp	pointer
[	O
-	O
5	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
,	O
(	O
yyvsp	pointer
[	O
-	O
3	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
,	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
timespec	struct
)	O
.	O
tv_sec	long
,	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
timespec	struct
)	O
.	O
tv_nsec	long
)	O
;	O
pc	pointer
->	O
meridian	int
=	O
MER24	int
;	O
}	O
break	O
;	O
case	O
27	int
:	O
{	O
pc	pointer
->	O
zones_seen	long
++	O
;	O
if	O
(	O
!	O
time_zone_hhmm	function
(	O
pc	pointer
,	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
textintval	struct
)	O
,	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
intval	long
)	O
)	O
)	O
YYABORT	O
;	O
}	O
break	O
;	O
case	O
28	int
:	O
{	O
pc	pointer
->	O
local_isdst	int
=	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
intval	long
)	O
;	O
}	O
break	O
;	O
case	O
29	int
:	O
{	O
pc	pointer
->	O
local_isdst	int
=	O
1	int
;	O
pc	pointer
->	O
dsts_seen	long
++	O
;	O
}	O
break	O
;	O
case	O
30	int
:	O
{	O
pc	pointer
->	O
time_zone	int
=	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
intval	long
)	O
;	O
}	O
break	O
;	O
case	O
31	int
:	O
{	O
pc	pointer
->	O
time_zone	int
=	O
HOUR	O
(	O
7	int
)	O
;	O
}	O
break	O
;	O
case	O
32	int
:	O
{	O
pc	pointer
->	O
time_zone	int
=	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
intval	long
)	O
;	O
if	O
(	O
!	O
apply_relative_time	function
(	O
pc	pointer
,	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
rel	struct
)	O
,	O
1	int
)	O
)	O
YYABORT	O
;	O
debug_print_relative_time	function
(	O
_	O
(	O
"relative"	pointer
)	O
,	O
pc	pointer
)	O
;	O
}	O
break	O
;	O
case	O
33	int
:	O
{	O
pc	pointer
->	O
time_zone	int
=	O
HOUR	O
(	O
7	int
)	O
;	O
if	O
(	O
!	O
apply_relative_time	function
(	O
pc	pointer
,	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
rel	struct
)	O
,	O
1	int
)	O
)	O
YYABORT	O
;	O
debug_print_relative_time	function
(	O
_	O
(	O
"relative"	pointer
)	O
,	O
pc	pointer
)	O
;	O
}	O
break	O
;	O
case	O
34	int
:	O
{	O
if	O
(	O
!	O
time_zone_hhmm	function
(	O
pc	pointer
,	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
textintval	struct
)	O
,	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
intval	long
)	O
)	O
)	O
YYABORT	O
;	O
if	O
(	O
INT_ADD_WRAPV	O
(	O
pc	pointer
->	O
time_zone	int
,	O
(	O
yyvsp	pointer
[	O
-	O
2	int
]	O
.	O
intval	long
)	O
,	O
&	O
pc	pointer
->	O
time_zone	int
)	O
)	O
YYABORT	O
;	O
}	O
break	O
;	O
case	O
35	int
:	O
{	O
pc	pointer
->	O
time_zone	int
=	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
intval	long
)	O
+	O
60	int
*	O
60	int
;	O
}	O
break	O
;	O
case	O
36	int
:	O
{	O
pc	pointer
->	O
time_zone	int
=	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
intval	long
)	O
+	O
60	int
*	O
60	int
;	O
}	O
break	O
;	O
case	O
37	int
:	O
{	O
pc	pointer
->	O
day_ordinal	long
=	O
0	int
;	O
pc	pointer
->	O
day_number	int
=	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
intval	long
)	O
;	O
}	O
break	O
;	O
case	O
38	int
:	O
{	O
pc	pointer
->	O
day_ordinal	long
=	O
0	int
;	O
pc	pointer
->	O
day_number	int
=	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
intval	long
)	O
;	O
}	O
break	O
;	O
case	O
39	int
:	O
{	O
pc	pointer
->	O
day_ordinal	long
=	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
intval	long
)	O
;	O
pc	pointer
->	O
day_number	int
=	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
intval	long
)	O
;	O
pc	pointer
->	O
debug_ordinal_day_seen	bool
=	O
true	int
;	O
}	O
break	O
;	O
case	O
40	int
:	O
{	O
pc	pointer
->	O
day_ordinal	long
=	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
;	O
pc	pointer
->	O
day_number	int
=	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
intval	long
)	O
;	O
pc	pointer
->	O
debug_ordinal_day_seen	bool
=	O
true	int
;	O
}	O
break	O
;	O
case	O
41	int
:	O
{	O
pc	pointer
->	O
month	long
=	O
(	O
yyvsp	pointer
[	O
-	O
2	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
;	O
pc	pointer
->	O
day	long
=	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
;	O
}	O
break	O
;	O
case	O
42	int
:	O
{	O
if	O
(	O
4	int
<=	O
(	O
yyvsp	pointer
[	O
-	O
4	int
]	O
.	O
textintval	struct
)	O
.	O
digits	long
)	O
{	O
if	O
(	O
pc	pointer
->	O
parse_datetime_debug	bool
)	O
{	O
intmax_t	long
digits	long
=	O
(	O
yyvsp	pointer
[	O
-	O
4	int
]	O
.	O
textintval	struct
)	O
.	O
digits	long
;	O
dbg_printf	function
(	O
_	O
(	O
"warning: value %"	pointer
PRIdMAX	O
" has %"	pointer
PRIdMAX	O
" digits. "	pointer
"Assuming YYYY/MM/DD\n"	pointer
)	O
,	O
(	O
yyvsp	pointer
[	O
-	O
4	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
,	O
digits	long
)	O
;	O
}	O
pc	pointer
->	O
year	long
=	O
(	O
yyvsp	pointer
[	O
-	O
4	int
]	O
.	O
textintval	struct
)	O
;	O
pc	pointer
->	O
month	long
=	O
(	O
yyvsp	pointer
[	O
-	O
2	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
;	O
pc	pointer
->	O
day	long
=	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
;	O
}	O
else	O
{	O
if	O
(	O
pc	pointer
->	O
parse_datetime_debug	bool
)	O
dbg_printf	function
(	O
_	O
(	O
"warning: value %"	pointer
PRIdMAX	O
" has less than 4 digits. "	pointer
"Assuming MM/DD/YY[YY]\n"	pointer
)	O
,	O
(	O
yyvsp	pointer
[	O
-	O
4	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
)	O
;	O
pc	pointer
->	O
month	long
=	O
(	O
yyvsp	pointer
[	O
-	O
4	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
;	O
pc	pointer
->	O
day	long
=	O
(	O
yyvsp	pointer
[	O
-	O
2	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
;	O
pc	pointer
->	O
year	long
=	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
textintval	struct
)	O
;	O
}	O
}	O
break	O
;	O
case	O
43	int
:	O
{	O
pc	pointer
->	O
day	long
=	O
(	O
yyvsp	pointer
[	O
-	O
2	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
;	O
pc	pointer
->	O
month	long
=	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
intval	long
)	O
;	O
if	O
(	O
INT_SUBTRACT_WRAPV	O
(	O
0	int
,	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
,	O
&	O
pc	pointer
->	O
year	long
.	O
value	long
)	O
)	O
YYABORT	O
;	O
pc	pointer
->	O
year	long
.	O
digits	long
=	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
textintval	struct
)	O
.	O
digits	long
;	O
}	O
break	O
;	O
case	O
44	int
:	O
{	O
pc	pointer
->	O
month	long
=	O
(	O
yyvsp	pointer
[	O
-	O
2	int
]	O
.	O
intval	long
)	O
;	O
if	O
(	O
INT_SUBTRACT_WRAPV	O
(	O
0	int
,	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
,	O
&	O
pc	pointer
->	O
day	long
)	O
)	O
YYABORT	O
;	O
if	O
(	O
INT_SUBTRACT_WRAPV	O
(	O
0	int
,	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
,	O
&	O
pc	pointer
->	O
year	long
.	O
value	long
)	O
)	O
YYABORT	O
;	O
pc	pointer
->	O
year	long
.	O
digits	long
=	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
textintval	struct
)	O
.	O
digits	long
;	O
}	O
break	O
;	O
case	O
45	int
:	O
{	O
pc	pointer
->	O
month	long
=	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
intval	long
)	O
;	O
pc	pointer
->	O
day	long
=	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
;	O
}	O
break	O
;	O
case	O
46	int
:	O
{	O
pc	pointer
->	O
month	long
=	O
(	O
yyvsp	pointer
[	O
-	O
3	int
]	O
.	O
intval	long
)	O
;	O
pc	pointer
->	O
day	long
=	O
(	O
yyvsp	pointer
[	O
-	O
2	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
;	O
pc	pointer
->	O
year	long
=	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
textintval	struct
)	O
;	O
}	O
break	O
;	O
case	O
47	int
:	O
{	O
pc	pointer
->	O
day	long
=	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
;	O
pc	pointer
->	O
month	long
=	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
intval	long
)	O
;	O
}	O
break	O
;	O
case	O
48	int
:	O
{	O
pc	pointer
->	O
day	long
=	O
(	O
yyvsp	pointer
[	O
-	O
2	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
;	O
pc	pointer
->	O
month	long
=	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
intval	long
)	O
;	O
pc	pointer
->	O
year	long
=	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
textintval	struct
)	O
;	O
}	O
break	O
;	O
case	O
50	int
:	O
{	O
pc	pointer
->	O
year	long
=	O
(	O
yyvsp	pointer
[	O
-	O
2	int
]	O
.	O
textintval	struct
)	O
;	O
if	O
(	O
INT_SUBTRACT_WRAPV	O
(	O
0	int
,	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
,	O
&	O
pc	pointer
->	O
month	long
)	O
)	O
YYABORT	O
;	O
if	O
(	O
INT_SUBTRACT_WRAPV	O
(	O
0	int
,	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
,	O
&	O
pc	pointer
->	O
day	long
)	O
)	O
YYABORT	O
;	O
}	O
break	O
;	O
case	O
51	int
:	O
{	O
if	O
(	O
!	O
apply_relative_time	function
(	O
pc	pointer
,	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
rel	struct
)	O
,	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
intval	long
)	O
)	O
)	O
YYABORT	O
;	O
}	O
break	O
;	O
case	O
52	int
:	O
{	O
if	O
(	O
!	O
apply_relative_time	function
(	O
pc	pointer
,	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
rel	struct
)	O
,	O
1	int
)	O
)	O
YYABORT	O
;	O
}	O
break	O
;	O
case	O
53	int
:	O
{	O
if	O
(	O
!	O
apply_relative_time	function
(	O
pc	pointer
,	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
rel	struct
)	O
,	O
1	int
)	O
)	O
YYABORT	O
;	O
}	O
break	O
;	O
case	O
54	int
:	O
{	O
(	O
yyval	union
.	O
rel	struct
)	O
=	O
RELATIVE_TIME_0	O
;	O
(	O
yyval	union
.	O
rel	struct
)	O
.	O
year	long
=	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
intval	long
)	O
;	O
}	O
break	O
;	O
case	O
55	int
:	O
{	O
(	O
yyval	union
.	O
rel	struct
)	O
=	O
RELATIVE_TIME_0	O
;	O
(	O
yyval	union
.	O
rel	struct
)	O
.	O
year	long
=	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
;	O
}	O
break	O
;	O
case	O
56	int
:	O
{	O
(	O
yyval	union
.	O
rel	struct
)	O
=	O
RELATIVE_TIME_0	O
;	O
(	O
yyval	union
.	O
rel	struct
)	O
.	O
year	long
=	O
1	int
;	O
}	O
break	O
;	O
case	O
57	int
:	O
{	O
(	O
yyval	union
.	O
rel	struct
)	O
=	O
RELATIVE_TIME_0	O
;	O
(	O
yyval	union
.	O
rel	struct
)	O
.	O
month	long
=	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
intval	long
)	O
;	O
}	O
break	O
;	O
case	O
58	int
:	O
{	O
(	O
yyval	union
.	O
rel	struct
)	O
=	O
RELATIVE_TIME_0	O
;	O
(	O
yyval	union
.	O
rel	struct
)	O
.	O
month	long
=	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
;	O
}	O
break	O
;	O
case	O
59	int
:	O
{	O
(	O
yyval	union
.	O
rel	struct
)	O
=	O
RELATIVE_TIME_0	O
;	O
(	O
yyval	union
.	O
rel	struct
)	O
.	O
month	long
=	O
1	int
;	O
}	O
break	O
;	O
case	O
60	int
:	O
{	O
(	O
yyval	union
.	O
rel	struct
)	O
=	O
RELATIVE_TIME_0	O
;	O
if	O
(	O
INT_MULTIPLY_WRAPV	O
(	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
intval	long
)	O
,	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
intval	long
)	O
,	O
&	O
(	O
yyval	union
.	O
rel	struct
)	O
.	O
day	long
)	O
)	O
YYABORT	O
;	O
}	O
break	O
;	O
case	O
61	int
:	O
{	O
(	O
yyval	union
.	O
rel	struct
)	O
=	O
RELATIVE_TIME_0	O
;	O
if	O
(	O
INT_MULTIPLY_WRAPV	O
(	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
,	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
intval	long
)	O
,	O
&	O
(	O
yyval	union
.	O
rel	struct
)	O
.	O
day	long
)	O
)	O
YYABORT	O
;	O
}	O
break	O
;	O
case	O
62	int
:	O
{	O
(	O
yyval	union
.	O
rel	struct
)	O
=	O
RELATIVE_TIME_0	O
;	O
(	O
yyval	union
.	O
rel	struct
)	O
.	O
day	long
=	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
intval	long
)	O
;	O
}	O
break	O
;	O
case	O
63	int
:	O
{	O
(	O
yyval	union
.	O
rel	struct
)	O
=	O
RELATIVE_TIME_0	O
;	O
(	O
yyval	union
.	O
rel	struct
)	O
.	O
hour	long
=	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
intval	long
)	O
;	O
}	O
break	O
;	O
case	O
64	int
:	O
{	O
(	O
yyval	union
.	O
rel	struct
)	O
=	O
RELATIVE_TIME_0	O
;	O
(	O
yyval	union
.	O
rel	struct
)	O
.	O
hour	long
=	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
;	O
}	O
break	O
;	O
case	O
65	int
:	O
{	O
(	O
yyval	union
.	O
rel	struct
)	O
=	O
RELATIVE_TIME_0	O
;	O
(	O
yyval	union
.	O
rel	struct
)	O
.	O
hour	long
=	O
1	int
;	O
}	O
break	O
;	O
case	O
66	int
:	O
{	O
(	O
yyval	union
.	O
rel	struct
)	O
=	O
RELATIVE_TIME_0	O
;	O
(	O
yyval	union
.	O
rel	struct
)	O
.	O
minutes	long
=	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
intval	long
)	O
;	O
}	O
break	O
;	O
case	O
67	int
:	O
{	O
(	O
yyval	union
.	O
rel	struct
)	O
=	O
RELATIVE_TIME_0	O
;	O
(	O
yyval	union
.	O
rel	struct
)	O
.	O
minutes	long
=	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
;	O
}	O
break	O
;	O
case	O
68	int
:	O
{	O
(	O
yyval	union
.	O
rel	struct
)	O
=	O
RELATIVE_TIME_0	O
;	O
(	O
yyval	union
.	O
rel	struct
)	O
.	O
minutes	long
=	O
1	int
;	O
}	O
break	O
;	O
case	O
69	int
:	O
{	O
(	O
yyval	union
.	O
rel	struct
)	O
=	O
RELATIVE_TIME_0	O
;	O
(	O
yyval	union
.	O
rel	struct
)	O
.	O
seconds	long
=	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
intval	long
)	O
;	O
}	O
break	O
;	O
case	O
70	int
:	O
{	O
(	O
yyval	union
.	O
rel	struct
)	O
=	O
RELATIVE_TIME_0	O
;	O
(	O
yyval	union
.	O
rel	struct
)	O
.	O
seconds	long
=	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
;	O
}	O
break	O
;	O
case	O
71	int
:	O
{	O
(	O
yyval	union
.	O
rel	struct
)	O
=	O
RELATIVE_TIME_0	O
;	O
(	O
yyval	union
.	O
rel	struct
)	O
.	O
seconds	long
=	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
timespec	struct
)	O
.	O
tv_sec	long
;	O
(	O
yyval	union
.	O
rel	struct
)	O
.	O
ns	long
=	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
timespec	struct
)	O
.	O
tv_nsec	long
;	O
}	O
break	O
;	O
case	O
72	int
:	O
{	O
(	O
yyval	union
.	O
rel	struct
)	O
=	O
RELATIVE_TIME_0	O
;	O
(	O
yyval	union
.	O
rel	struct
)	O
.	O
seconds	long
=	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
timespec	struct
)	O
.	O
tv_sec	long
;	O
(	O
yyval	union
.	O
rel	struct
)	O
.	O
ns	long
=	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
timespec	struct
)	O
.	O
tv_nsec	long
;	O
}	O
break	O
;	O
case	O
73	int
:	O
{	O
(	O
yyval	union
.	O
rel	struct
)	O
=	O
RELATIVE_TIME_0	O
;	O
(	O
yyval	union
.	O
rel	struct
)	O
.	O
seconds	long
=	O
1	int
;	O
}	O
break	O
;	O
case	O
75	int
:	O
{	O
(	O
yyval	union
.	O
rel	struct
)	O
=	O
RELATIVE_TIME_0	O
;	O
(	O
yyval	union
.	O
rel	struct
)	O
.	O
year	long
=	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
;	O
}	O
break	O
;	O
case	O
76	int
:	O
{	O
(	O
yyval	union
.	O
rel	struct
)	O
=	O
RELATIVE_TIME_0	O
;	O
(	O
yyval	union
.	O
rel	struct
)	O
.	O
month	long
=	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
;	O
}	O
break	O
;	O
case	O
77	int
:	O
{	O
(	O
yyval	union
.	O
rel	struct
)	O
=	O
RELATIVE_TIME_0	O
;	O
if	O
(	O
INT_MULTIPLY_WRAPV	O
(	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
,	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
intval	long
)	O
,	O
&	O
(	O
yyval	union
.	O
rel	struct
)	O
.	O
day	long
)	O
)	O
YYABORT	O
;	O
}	O
break	O
;	O
case	O
78	int
:	O
{	O
(	O
yyval	union
.	O
rel	struct
)	O
=	O
RELATIVE_TIME_0	O
;	O
(	O
yyval	union
.	O
rel	struct
)	O
.	O
hour	long
=	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
;	O
}	O
break	O
;	O
case	O
79	int
:	O
{	O
(	O
yyval	union
.	O
rel	struct
)	O
=	O
RELATIVE_TIME_0	O
;	O
(	O
yyval	union
.	O
rel	struct
)	O
.	O
minutes	long
=	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
;	O
}	O
break	O
;	O
case	O
80	int
:	O
{	O
(	O
yyval	union
.	O
rel	struct
)	O
=	O
RELATIVE_TIME_0	O
;	O
(	O
yyval	union
.	O
rel	struct
)	O
.	O
seconds	long
=	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
;	O
}	O
break	O
;	O
case	O
81	int
:	O
{	O
(	O
yyval	union
.	O
rel	struct
)	O
=	O
RELATIVE_TIME_0	O
;	O
(	O
yyval	union
.	O
rel	struct
)	O
.	O
day	long
=	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
intval	long
)	O
;	O
}	O
break	O
;	O
case	O
85	int
:	O
{	O
if	O
(	O
time_overflow	function
(	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
)	O
)	O
YYABORT	O
;	O
(	O
yyval	union
.	O
timespec	struct
)	O
.	O
tv_sec	long
=	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
;	O
(	O
yyval	union
.	O
timespec	struct
)	O
.	O
tv_nsec	long
=	O
0	int
;	O
}	O
break	O
;	O
case	O
87	int
:	O
{	O
if	O
(	O
time_overflow	function
(	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
)	O
)	O
YYABORT	O
;	O
(	O
yyval	union
.	O
timespec	struct
)	O
.	O
tv_sec	long
=	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
;	O
(	O
yyval	union
.	O
timespec	struct
)	O
.	O
tv_nsec	long
=	O
0	int
;	O
}	O
break	O
;	O
case	O
88	int
:	O
{	O
digits_to_date_time	function
(	O
pc	pointer
,	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
textintval	struct
)	O
)	O
;	O
}	O
break	O
;	O
case	O
89	int
:	O
{	O
digits_to_date_time	function
(	O
pc	pointer
,	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
textintval	struct
)	O
)	O
;	O
if	O
(	O
!	O
apply_relative_time	function
(	O
pc	pointer
,	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
rel	struct
)	O
,	O
1	int
)	O
)	O
YYABORT	O
;	O
}	O
break	O
;	O
case	O
90	int
:	O
{	O
(	O
yyval	union
.	O
intval	long
)	O
=	O
-	O
1	int
;	O
}	O
break	O
;	O
case	O
91	int
:	O
{	O
(	O
yyval	union
.	O
intval	long
)	O
=	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
textintval	struct
)	O
.	O
value	long
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
YY_SYMBOL_PRINT	O
(	O
"-> $$ ="	pointer
,	O
yyr1	array
[	O
yyn	int
]	O
,	O
&	O
yyval	union
,	O
&	O
yyloc	O
)	O
;	O
YYPOPSTACK	O
(	O
yylen	int
)	O
;	O
yylen	int
=	O
0	int
;	O
YY_STACK_PRINT	O
(	O
yyss	pointer
,	O
yyssp	pointer
)	O
;	O
*	O
++	O
yyvsp	pointer
=	O
yyval	union
;	O
yyn	int
=	O
yyr1	array
[	O
yyn	int
]	O
;	O
yystate	int
=	O
yypgoto	array
[	O
yyn	int
-	O
YYNTOKENS	int
]	O
+	O
*	O
yyssp	pointer
;	O
if	O
(	O
0	int
<=	O
yystate	int
&&	O
yystate	int
<=	O
YYLAST	int
&&	O
yycheck	array
[	O
yystate	int
]	O
==	O
*	O
yyssp	pointer
)	O
yystate	int
=	O
yytable	array
[	O
yystate	int
]	O
;	O
else	O
yystate	int
=	O
yydefgoto	array
[	O
yyn	int
-	O
YYNTOKENS	int
]	O
;	O
goto	O
yynewstate	O
;	O
yyerrlab	O
:	O
yytoken	int
=	O
yychar	int
==	O
YYEMPTY	O
?	O
YYEMPTY	O
:	O
YYTRANSLATE	O
(	O
yychar	int
)	O
;	O
if	O
(	O
!	O
yyerrstatus	int
)	O
{	O
++	O
yynerrs	int
;	O
yyerror	function
(	O
pc	pointer
,	O
YY_	O
(	O
"syntax error"	pointer
)	O
)	O
;	O
}	O
if	O
(	O
yyerrstatus	int
==	O
3	int
)	O
{	O
if	O
(	O
yychar	int
<=	O
YYEOF	int
)	O
{	O
if	O
(	O
yychar	int
==	O
YYEOF	int
)	O
YYABORT	O
;	O
}	O
else	O
{	O
yydestruct	function
(	O
"Error: discarding"	pointer
,	O
yytoken	int
,	O
&	O
yylval	union
,	O
pc	pointer
)	O
;	O
yychar	int
=	O
YYEMPTY	O
;	O
}	O
}	O
goto	O
yyerrlab1	O
;	O
yyerrorlab	O
:	O
if	O
(	O
0	int
)	O
goto	O
yyerrorlab	O
;	O
YYPOPSTACK	O
(	O
yylen	int
)	O
;	O
yylen	int
=	O
0	int
;	O
YY_STACK_PRINT	O
(	O
yyss	pointer
,	O
yyssp	pointer
)	O
;	O
yystate	int
=	O
*	O
yyssp	pointer
;	O
goto	O
yyerrlab1	O
;	O
yyerrlab1	O
:	O
yyerrstatus	int
=	O
3	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
yyn	int
=	O
yypact	array
[	O
yystate	int
]	O
;	O
if	O
(	O
!	O
yypact_value_is_default	O
(	O
yyn	int
)	O
)	O
{	O
yyn	int
+=	O
YYTERROR	int
;	O
if	O
(	O
0	int
<=	O
yyn	int
&&	O
yyn	int
<=	O
YYLAST	int
&&	O
yycheck	array
[	O
yyn	int
]	O
==	O
YYTERROR	int
)	O
{	O
yyn	int
=	O
yytable	array
[	O
yyn	int
]	O
;	O
if	O
(	O
0	int
<	O
yyn	int
)	O
break	O
;	O
}	O
}	O
if	O
(	O
yyssp	pointer
==	O
yyss	pointer
)	O
YYABORT	O
;	O
yydestruct	function
(	O
"Error: popping"	pointer
,	O
yystos	array
[	O
yystate	int
]	O
,	O
yyvsp	pointer
,	O
pc	pointer
)	O
;	O
YYPOPSTACK	O
(	O
1	int
)	O
;	O
yystate	int
=	O
*	O
yyssp	pointer
;	O
YY_STACK_PRINT	O
(	O
yyss	pointer
,	O
yyssp	pointer
)	O
;	O
}	O
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	O
*	O
++	O
yyvsp	pointer
=	O
yylval	union
;	O
YY_IGNORE_MAYBE_UNINITIALIZED_END	O
YY_SYMBOL_PRINT	O
(	O
"Shifting"	pointer
,	O
yystos	array
[	O
yyn	int
]	O
,	O
yyvsp	pointer
,	O
yylsp	O
)	O
;	O
yystate	int
=	O
yyn	int
;	O
goto	O
yynewstate	O
;	O
yyacceptlab	O
:	O
yyresult	int
=	O
0	int
;	O
goto	O
yyreturn	O
;	O
yyabortlab	O
:	O
yyresult	int
=	O
1	int
;	O
goto	O
yyreturn	O
;	O
yyexhaustedlab	O
:	O
yyerror	function
(	O
pc	pointer
,	O
YY_	O
(	O
"memory exhausted"	pointer
)	O
)	O
;	O
yyresult	int
=	O
2	int
;	O
yyreturn	O
:	O
if	O
(	O
yychar	int
!=	O
YYEMPTY	O
)	O
{	O
yytoken	int
=	O
YYTRANSLATE	O
(	O
yychar	int
)	O
;	O
yydestruct	function
(	O
"Cleanup: discarding lookahead"	pointer
,	O
yytoken	int
,	O
&	O
yylval	union
,	O
pc	pointer
)	O
;	O
}	O
YYPOPSTACK	O
(	O
yylen	int
)	O
;	O
YY_STACK_PRINT	O
(	O
yyss	pointer
,	O
yyssp	pointer
)	O
;	O
while	O
(	O
yyssp	pointer
!=	O
yyss	pointer
)	O
{	O
yydestruct	function
(	O
"Cleanup: popping"	pointer
,	O
yystos	array
[	O
*	O
yyssp	pointer
]	O
,	O
yyvsp	pointer
,	O
pc	pointer
)	O
;	O
YYPOPSTACK	O
(	O
1	int
)	O
;	O
}	O
if	O
(	O
yyss	pointer
!=	O
yyssa	array
)	O
YYSTACK_FREE	O
(	O
yyss	pointer
)	O
;	O
return	O
yyresult	int
;	O
}	O
static	O
table	struct
const	O
meridian_table	array
[	O
]	O
=	O
{	O
{	O
"AM"	pointer
,	O
tMERIDIAN	int
,	O
MERam	int
}	O
,	O
{	O
"A.M."	pointer
,	O
tMERIDIAN	int
,	O
MERam	int
}	O
,	O
{	O
"PM"	pointer
,	O
tMERIDIAN	int
,	O
MERpm	int
}	O
,	O
{	O
"P.M."	pointer
,	O
tMERIDIAN	int
,	O
MERpm	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
0	int
}	O
}	O
;	O
static	O
table	struct
const	O
dst_table	array
[	O
]	O
=	O
{	O
{	O
"DST"	pointer
,	O
tDST	int
,	O
0	int
}	O
}	O
;	O
static	O
table	struct
const	O
month_and_day_table	array
[	O
]	O
=	O
{	O
{	O
"JANUARY"	pointer
,	O
tMONTH	int
,	O
1	int
}	O
,	O
{	O
"FEBRUARY"	pointer
,	O
tMONTH	int
,	O
2	int
}	O
,	O
{	O
"MARCH"	pointer
,	O
tMONTH	int
,	O
3	int
}	O
,	O
{	O
"APRIL"	pointer
,	O
tMONTH	int
,	O
4	int
}	O
,	O
{	O
"MAY"	pointer
,	O
tMONTH	int
,	O
5	int
}	O
,	O
{	O
"JUNE"	pointer
,	O
tMONTH	int
,	O
6	int
}	O
,	O
{	O
"JULY"	pointer
,	O
tMONTH	int
,	O
7	int
}	O
,	O
{	O
"AUGUST"	pointer
,	O
tMONTH	int
,	O
8	int
}	O
,	O
{	O
"SEPTEMBER"	pointer
,	O
tMONTH	int
,	O
9	int
}	O
,	O
{	O
"SEPT"	pointer
,	O
tMONTH	int
,	O
9	int
}	O
,	O
{	O
"OCTOBER"	pointer
,	O
tMONTH	int
,	O
10	int
}	O
,	O
{	O
"NOVEMBER"	pointer
,	O
tMONTH	int
,	O
11	int
}	O
,	O
{	O
"DECEMBER"	pointer
,	O
tMONTH	int
,	O
12	int
}	O
,	O
{	O
"SUNDAY"	pointer
,	O
tDAY	int
,	O
0	int
}	O
,	O
{	O
"MONDAY"	pointer
,	O
tDAY	int
,	O
1	int
}	O
,	O
{	O
"TUESDAY"	pointer
,	O
tDAY	int
,	O
2	int
}	O
,	O
{	O
"TUES"	pointer
,	O
tDAY	int
,	O
2	int
}	O
,	O
{	O
"WEDNESDAY"	pointer
,	O
tDAY	int
,	O
3	int
}	O
,	O
{	O
"WEDNES"	pointer
,	O
tDAY	int
,	O
3	int
}	O
,	O
{	O
"THURSDAY"	pointer
,	O
tDAY	int
,	O
4	int
}	O
,	O
{	O
"THUR"	pointer
,	O
tDAY	int
,	O
4	int
}	O
,	O
{	O
"THURS"	pointer
,	O
tDAY	int
,	O
4	int
}	O
,	O
{	O
"FRIDAY"	pointer
,	O
tDAY	int
,	O
5	int
}	O
,	O
{	O
"SATURDAY"	pointer
,	O
tDAY	int
,	O
6	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
0	int
}	O
}	O
;	O
static	O
table	struct
const	O
time_units_table	array
[	O
]	O
=	O
{	O
{	O
"YEAR"	pointer
,	O
tYEAR_UNIT	int
,	O
1	int
}	O
,	O
{	O
"MONTH"	pointer
,	O
tMONTH_UNIT	int
,	O
1	int
}	O
,	O
{	O
"FORTNIGHT"	pointer
,	O
tDAY_UNIT	int
,	O
14	int
}	O
,	O
{	O
"WEEK"	pointer
,	O
tDAY_UNIT	int
,	O
7	int
}	O
,	O
{	O
"DAY"	pointer
,	O
tDAY_UNIT	int
,	O
1	int
}	O
,	O
{	O
"HOUR"	pointer
,	O
tHOUR_UNIT	int
,	O
1	int
}	O
,	O
{	O
"MINUTE"	pointer
,	O
tMINUTE_UNIT	int
,	O
1	int
}	O
,	O
{	O
"MIN"	pointer
,	O
tMINUTE_UNIT	int
,	O
1	int
}	O
,	O
{	O
"SECOND"	pointer
,	O
tSEC_UNIT	int
,	O
1	int
}	O
,	O
{	O
"SEC"	pointer
,	O
tSEC_UNIT	int
,	O
1	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
0	int
}	O
}	O
;	O
static	O
table	struct
const	O
relative_time_table	array
[	O
]	O
=	O
{	O
{	O
"TOMORROW"	pointer
,	O
tDAY_SHIFT	int
,	O
1	int
}	O
,	O
{	O
"YESTERDAY"	pointer
,	O
tDAY_SHIFT	int
,	O
-	O
1	int
}	O
,	O
{	O
"TODAY"	pointer
,	O
tDAY_SHIFT	int
,	O
0	int
}	O
,	O
{	O
"NOW"	pointer
,	O
tDAY_SHIFT	int
,	O
0	int
}	O
,	O
{	O
"LAST"	pointer
,	O
tORDINAL	int
,	O
-	O
1	int
}	O
,	O
{	O
"THIS"	pointer
,	O
tORDINAL	int
,	O
0	int
}	O
,	O
{	O
"NEXT"	pointer
,	O
tORDINAL	int
,	O
1	int
}	O
,	O
{	O
"FIRST"	pointer
,	O
tORDINAL	int
,	O
1	int
}	O
,	O
{	O
"THIRD"	pointer
,	O
tORDINAL	int
,	O
3	int
}	O
,	O
{	O
"FOURTH"	pointer
,	O
tORDINAL	int
,	O
4	int
}	O
,	O
{	O
"FIFTH"	pointer
,	O
tORDINAL	int
,	O
5	int
}	O
,	O
{	O
"SIXTH"	pointer
,	O
tORDINAL	int
,	O
6	int
}	O
,	O
{	O
"SEVENTH"	pointer
,	O
tORDINAL	int
,	O
7	int
}	O
,	O
{	O
"EIGHTH"	pointer
,	O
tORDINAL	int
,	O
8	int
}	O
,	O
{	O
"NINTH"	pointer
,	O
tORDINAL	int
,	O
9	int
}	O
,	O
{	O
"TENTH"	pointer
,	O
tORDINAL	int
,	O
10	int
}	O
,	O
{	O
"ELEVENTH"	pointer
,	O
tORDINAL	int
,	O
11	int
}	O
,	O
{	O
"TWELFTH"	pointer
,	O
tORDINAL	int
,	O
12	int
}	O
,	O
{	O
"AGO"	pointer
,	O
tAGO	int
,	O
-	O
1	int
}	O
,	O
{	O
"HENCE"	pointer
,	O
tAGO	int
,	O
1	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
0	int
}	O
}	O
;	O
static	O
table	struct
const	O
universal_time_zone_table	array
[	O
]	O
=	O
{	O
{	O
"GMT"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
0	int
)	O
}	O
,	O
{	O
"UT"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
0	int
)	O
}	O
,	O
{	O
"UTC"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
0	int
)	O
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
0	int
}	O
}	O
;	O
static	O
table	struct
const	O
time_zone_table	array
[	O
]	O
=	O
{	O
{	O
"WET"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
0	int
)	O
}	O
,	O
{	O
"WEST"	pointer
,	O
tDAYZONE	int
,	O
HOUR	O
(	O
0	int
)	O
}	O
,	O
{	O
"BST"	pointer
,	O
tDAYZONE	int
,	O
HOUR	O
(	O
0	int
)	O
}	O
,	O
{	O
"ART"	pointer
,	O
tZONE	int
,	O
-	O
HOUR	O
(	O
3	int
)	O
}	O
,	O
{	O
"BRT"	pointer
,	O
tZONE	int
,	O
-	O
HOUR	O
(	O
3	int
)	O
}	O
,	O
{	O
"BRST"	pointer
,	O
tDAYZONE	int
,	O
-	O
HOUR	O
(	O
3	int
)	O
}	O
,	O
{	O
"NST"	pointer
,	O
tZONE	int
,	O
-	O
(	O
HOUR	O
(	O
3	int
)	O
+	O
30	int
*	O
60	int
)	O
}	O
,	O
{	O
"NDT"	pointer
,	O
tDAYZONE	int
,	O
-	O
(	O
HOUR	O
(	O
3	int
)	O
+	O
30	int
*	O
60	int
)	O
}	O
,	O
{	O
"AST"	pointer
,	O
tZONE	int
,	O
-	O
HOUR	O
(	O
4	int
)	O
}	O
,	O
{	O
"ADT"	pointer
,	O
tDAYZONE	int
,	O
-	O
HOUR	O
(	O
4	int
)	O
}	O
,	O
{	O
"CLT"	pointer
,	O
tZONE	int
,	O
-	O
HOUR	O
(	O
4	int
)	O
}	O
,	O
{	O
"CLST"	pointer
,	O
tDAYZONE	int
,	O
-	O
HOUR	O
(	O
4	int
)	O
}	O
,	O
{	O
"EST"	pointer
,	O
tZONE	int
,	O
-	O
HOUR	O
(	O
5	int
)	O
}	O
,	O
{	O
"EDT"	pointer
,	O
tDAYZONE	int
,	O
-	O
HOUR	O
(	O
5	int
)	O
}	O
,	O
{	O
"CST"	pointer
,	O
tZONE	int
,	O
-	O
HOUR	O
(	O
6	int
)	O
}	O
,	O
{	O
"CDT"	pointer
,	O
tDAYZONE	int
,	O
-	O
HOUR	O
(	O
6	int
)	O
}	O
,	O
{	O
"MST"	pointer
,	O
tZONE	int
,	O
-	O
HOUR	O
(	O
7	int
)	O
}	O
,	O
{	O
"MDT"	pointer
,	O
tDAYZONE	int
,	O
-	O
HOUR	O
(	O
7	int
)	O
}	O
,	O
{	O
"PST"	pointer
,	O
tZONE	int
,	O
-	O
HOUR	O
(	O
8	int
)	O
}	O
,	O
{	O
"PDT"	pointer
,	O
tDAYZONE	int
,	O
-	O
HOUR	O
(	O
8	int
)	O
}	O
,	O
{	O
"AKST"	pointer
,	O
tZONE	int
,	O
-	O
HOUR	O
(	O
9	int
)	O
}	O
,	O
{	O
"AKDT"	pointer
,	O
tDAYZONE	int
,	O
-	O
HOUR	O
(	O
9	int
)	O
}	O
,	O
{	O
"HST"	pointer
,	O
tZONE	int
,	O
-	O
HOUR	O
(	O
10	int
)	O
}	O
,	O
{	O
"HAST"	pointer
,	O
tZONE	int
,	O
-	O
HOUR	O
(	O
10	int
)	O
}	O
,	O
{	O
"HADT"	pointer
,	O
tDAYZONE	int
,	O
-	O
HOUR	O
(	O
10	int
)	O
}	O
,	O
{	O
"SST"	pointer
,	O
tZONE	int
,	O
-	O
HOUR	O
(	O
12	int
)	O
}	O
,	O
{	O
"WAT"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
1	int
)	O
}	O
,	O
{	O
"CET"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
1	int
)	O
}	O
,	O
{	O
"CEST"	pointer
,	O
tDAYZONE	int
,	O
HOUR	O
(	O
1	int
)	O
}	O
,	O
{	O
"MET"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
1	int
)	O
}	O
,	O
{	O
"MEZ"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
1	int
)	O
}	O
,	O
{	O
"MEST"	pointer
,	O
tDAYZONE	int
,	O
HOUR	O
(	O
1	int
)	O
}	O
,	O
{	O
"MESZ"	pointer
,	O
tDAYZONE	int
,	O
HOUR	O
(	O
1	int
)	O
}	O
,	O
{	O
"EET"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
2	int
)	O
}	O
,	O
{	O
"EEST"	pointer
,	O
tDAYZONE	int
,	O
HOUR	O
(	O
2	int
)	O
}	O
,	O
{	O
"CAT"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
2	int
)	O
}	O
,	O
{	O
"SAST"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
2	int
)	O
}	O
,	O
{	O
"EAT"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
3	int
)	O
}	O
,	O
{	O
"MSK"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
3	int
)	O
}	O
,	O
{	O
"MSD"	pointer
,	O
tDAYZONE	int
,	O
HOUR	O
(	O
3	int
)	O
}	O
,	O
{	O
"IST"	pointer
,	O
tZONE	int
,	O
(	O
HOUR	O
(	O
5	int
)	O
+	O
30	int
*	O
60	int
)	O
}	O
,	O
{	O
"SGT"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
8	int
)	O
}	O
,	O
{	O
"KST"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
9	int
)	O
}	O
,	O
{	O
"JST"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
9	int
)	O
}	O
,	O
{	O
"GST"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
10	int
)	O
}	O
,	O
{	O
"NZST"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
12	int
)	O
}	O
,	O
{	O
"NZDT"	pointer
,	O
tDAYZONE	int
,	O
HOUR	O
(	O
12	int
)	O
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
0	int
}	O
}	O
;	O
static	O
table	struct
const	O
military_table	array
[	O
]	O
=	O
{	O
{	O
"A"	pointer
,	O
tZONE	int
,	O
-	O
HOUR	O
(	O
1	int
)	O
}	O
,	O
{	O
"B"	pointer
,	O
tZONE	int
,	O
-	O
HOUR	O
(	O
2	int
)	O
}	O
,	O
{	O
"C"	pointer
,	O
tZONE	int
,	O
-	O
HOUR	O
(	O
3	int
)	O
}	O
,	O
{	O
"D"	pointer
,	O
tZONE	int
,	O
-	O
HOUR	O
(	O
4	int
)	O
}	O
,	O
{	O
"E"	pointer
,	O
tZONE	int
,	O
-	O
HOUR	O
(	O
5	int
)	O
}	O
,	O
{	O
"F"	pointer
,	O
tZONE	int
,	O
-	O
HOUR	O
(	O
6	int
)	O
}	O
,	O
{	O
"G"	pointer
,	O
tZONE	int
,	O
-	O
HOUR	O
(	O
7	int
)	O
}	O
,	O
{	O
"H"	pointer
,	O
tZONE	int
,	O
-	O
HOUR	O
(	O
8	int
)	O
}	O
,	O
{	O
"I"	pointer
,	O
tZONE	int
,	O
-	O
HOUR	O
(	O
9	int
)	O
}	O
,	O
{	O
"K"	pointer
,	O
tZONE	int
,	O
-	O
HOUR	O
(	O
10	int
)	O
}	O
,	O
{	O
"L"	pointer
,	O
tZONE	int
,	O
-	O
HOUR	O
(	O
11	int
)	O
}	O
,	O
{	O
"M"	pointer
,	O
tZONE	int
,	O
-	O
HOUR	O
(	O
12	int
)	O
}	O
,	O
{	O
"N"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
1	int
)	O
}	O
,	O
{	O
"O"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
2	int
)	O
}	O
,	O
{	O
"P"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
3	int
)	O
}	O
,	O
{	O
"Q"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
4	int
)	O
}	O
,	O
{	O
"R"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
5	int
)	O
}	O
,	O
{	O
"S"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
6	int
)	O
}	O
,	O
{	O
"T"	pointer
,	O
'T'	O
,	O
0	int
}	O
,	O
{	O
"U"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
8	int
)	O
}	O
,	O
{	O
"V"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
9	int
)	O
}	O
,	O
{	O
"W"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
10	int
)	O
}	O
,	O
{	O
"X"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
11	int
)	O
}	O
,	O
{	O
"Y"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
12	int
)	O
}	O
,	O
{	O
"Z"	pointer
,	O
tZONE	int
,	O
HOUR	O
(	O
0	int
)	O
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
0	int
}	O
}	O
;	O
static	O
bool	bool
time_zone_hhmm	function
(	O
parser_control	struct
*	O
pc	pointer
,	O
textint	struct
s	long
,	O
intmax_t	long
mm	int
)	O
{	O
intmax_t	long
n_minutes	long
;	O
bool	bool
overflow	bool
=	O
false	int
;	O
if	O
(	O
s	long
.	O
digits	long
<=	O
2	int
&&	O
mm	int
<	O
0	int
)	O
s	long
.	O
value	long
*=	O
100	int
;	O
if	O
(	O
mm	int
<	O
0	int
)	O
n_minutes	long
=	O
(	O
s	long
.	O
value	long
/	O
100	int
)	O
*	O
60	int
+	O
s	long
.	O
value	long
%	O
100	int
;	O
else	O
{	O
overflow	bool
|=	O
INT_MULTIPLY_WRAPV	O
(	O
s	long
.	O
value	long
,	O
60	int
,	O
&	O
n_minutes	long
)	O
;	O
overflow	bool
|=	O
(	O
s	long
.	O
negative	bool
?	O
INT_SUBTRACT_WRAPV	O
(	O
n_minutes	long
,	O
mm	int
,	O
&	O
n_minutes	long
)	O
:	O
INT_ADD_WRAPV	O
(	O
n_minutes	long
,	O
mm	int
,	O
&	O
n_minutes	long
)	O
)	O
;	O
}	O
if	O
(	O
overflow	bool
||	O
!	O
(	O
-	O
24	int
*	O
60	int
<=	O
n_minutes	long
&&	O
n_minutes	long
<=	O
24	int
*	O
60	int
)	O
)	O
return	O
false	int
;	O
pc	pointer
->	O
time_zone	int
=	O
n_minutes	long
*	O
60	int
;	O
return	O
true	int
;	O
}	O
static	O
int	O
to_hour	function
(	O
intmax_t	long
hours	long
,	O
int	O
meridian	int
)	O
{	O
switch	O
(	O
meridian	int
)	O
{	O
default	O
:	O
case	O
MER24	int
:	O
return	O
0	int
<=	O
hours	long
&&	O
hours	long
<	O
24	int
?	O
hours	long
:	O
-	O
1	int
;	O
case	O
MERam	int
:	O
return	O
0	int
<	O
hours	long
&&	O
hours	long
<	O
12	int
?	O
hours	long
:	O
hours	long
==	O
12	int
?	O
0	int
:	O
-	O
1	int
;	O
case	O
MERpm	int
:	O
return	O
0	int
<	O
hours	long
&&	O
hours	long
<	O
12	int
?	O
hours	long
+	O
12	int
:	O
hours	long
==	O
12	int
?	O
12	int
:	O
-	O
1	int
;	O
}	O
}	O
enum	O
{	O
TM_YEAR_BASE	int
=	O
1900	int
}	O
;	O
enum	O
{	O
TM_YEAR_BUFSIZE	int
=	O
INT_BUFSIZE_BOUND	O
(	O
int	O
)	O
+	O
1	int
}	O
;	O
static	O
char	O
const	O
*	O
tm_year_str	function
(	O
int	O
tm_year	int
,	O
char	O
buf	array
[	O
TM_YEAR_BUFSIZE	int
]	O
)	O
{	O
verify	O
(	O
TM_YEAR_BASE	int
%	O
100	int
==	O
0	int
)	O
;	O
sprintf	function
(	O
buf	array
,	O
&	O
"-%02d%02d"	pointer
[	O
-	O
TM_YEAR_BASE	int
<=	O
tm_year	int
]	O
,	O
abs	function
(	O
tm_year	int
/	O
100	int
+	O
TM_YEAR_BASE	int
/	O
100	int
)	O
,	O
abs	function
(	O
tm_year	int
%	O
100	int
)	O
)	O
;	O
return	O
buf	array
;	O
}	O
static	O
bool	bool
to_tm_year	function
(	O
textint	struct
textyear	struct
,	O
bool	bool
debug	bool
,	O
int	O
*	O
tm_year	int
)	O
{	O
intmax_t	long
year	long
=	O
textyear	struct
.	O
value	long
;	O
if	O
(	O
0	int
<=	O
year	long
&&	O
textyear	struct
.	O
digits	long
==	O
2	int
)	O
{	O
year	long
+=	O
year	long
<	O
69	int
?	O
2000	int
:	O
1900	int
;	O
if	O
(	O
debug	bool
)	O
dbg_printf	function
(	O
_	O
(	O
"warning: adjusting year value %"	pointer
PRIdMAX	O
" to %"	pointer
PRIdMAX	O
"\n"	pointer
)	O
,	O
textyear	struct
.	O
value	long
,	O
year	long
)	O
;	O
}	O
if	O
(	O
year	long
<	O
0	int
?	O
INT_SUBTRACT_WRAPV	O
(	O
-	O
TM_YEAR_BASE	int
,	O
year	long
,	O
tm_year	int
)	O
:	O
INT_SUBTRACT_WRAPV	O
(	O
year	long
,	O
TM_YEAR_BASE	int
,	O
tm_year	int
)	O
)	O
{	O
if	O
(	O
debug	bool
)	O
dbg_printf	function
(	O
_	O
(	O
"error: out-of-range year %"	pointer
PRIdMAX	O
"\n"	pointer
)	O
,	O
year	long
)	O
;	O
return	O
false	int
;	O
}	O
return	O
true	int
;	O
}	O
static	O
table	struct
const	O
*	O
_GL_ATTRIBUTE_PURE	O
lookup_zone	function
(	O
parser_control	struct
const	O
*	O
pc	pointer
,	O
char	O
const	O
*	O
name	pointer
)	O
{	O
table	struct
const	O
*	O
tp	pointer
;	O
for	O
(	O
tp	pointer
=	O
universal_time_zone_table	array
;	O
tp	pointer
->	O
name	pointer
;	O
tp	pointer
++	O
)	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
tp	pointer
->	O
name	pointer
)	O
==	O
0	int
)	O
return	O
tp	pointer
;	O
for	O
(	O
tp	pointer
=	O
pc	pointer
->	O
local_time_zone_table	array
;	O
tp	pointer
->	O
name	pointer
;	O
tp	pointer
++	O
)	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
tp	pointer
->	O
name	pointer
)	O
==	O
0	int
)	O
return	O
tp	pointer
;	O
for	O
(	O
tp	pointer
=	O
time_zone_table	array
;	O
tp	pointer
->	O
name	pointer
;	O
tp	pointer
++	O
)	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
tp	pointer
->	O
name	pointer
)	O
==	O
0	int
)	O
return	O
tp	pointer
;	O
return	O
NULL	O
;	O
}	O
static	O
table	struct
const	O
*	O
lookup_word	function
(	O
parser_control	struct
const	O
*	O
pc	pointer
,	O
char	O
*	O
word	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
char	O
*	O
q	pointer
;	O
ptrdiff_t	long
wordlen	long
;	O
table	struct
const	O
*	O
tp	pointer
;	O
bool	bool
period_found	bool
;	O
bool	bool
abbrev	bool
;	O
for	O
(	O
p	pointer
=	O
word	pointer
;	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
*	O
p	pointer
=	O
c_toupper	function
(	O
to_uchar	function
(	O
*	O
p	pointer
)	O
)	O
;	O
for	O
(	O
tp	pointer
=	O
meridian_table	array
;	O
tp	pointer
->	O
name	pointer
;	O
tp	pointer
++	O
)	O
if	O
(	O
strcmp	function
(	O
word	pointer
,	O
tp	pointer
->	O
name	pointer
)	O
==	O
0	int
)	O
return	O
tp	pointer
;	O
wordlen	long
=	O
strlen	function
(	O
word	pointer
)	O
;	O
abbrev	bool
=	O
wordlen	long
==	O
3	int
||	O
(	O
wordlen	long
==	O
4	int
&&	O
word	pointer
[	O
3	int
]	O
==	O
'.'	O
)	O
;	O
for	O
(	O
tp	pointer
=	O
month_and_day_table	array
;	O
tp	pointer
->	O
name	pointer
;	O
tp	pointer
++	O
)	O
if	O
(	O
(	O
abbrev	bool
?	O
strncmp	function
(	O
word	pointer
,	O
tp	pointer
->	O
name	pointer
,	O
3	int
)	O
:	O
strcmp	function
(	O
word	pointer
,	O
tp	pointer
->	O
name	pointer
)	O
)	O
==	O
0	int
)	O
return	O
tp	pointer
;	O
if	O
(	O
(	O
tp	pointer
=	O
lookup_zone	function
(	O
pc	pointer
,	O
word	pointer
)	O
)	O
)	O
return	O
tp	pointer
;	O
if	O
(	O
strcmp	function
(	O
word	pointer
,	O
dst_table	array
[	O
0	int
]	O
.	O
name	pointer
)	O
==	O
0	int
)	O
return	O
dst_table	array
;	O
for	O
(	O
tp	pointer
=	O
time_units_table	array
;	O
tp	pointer
->	O
name	pointer
;	O
tp	pointer
++	O
)	O
if	O
(	O
strcmp	function
(	O
word	pointer
,	O
tp	pointer
->	O
name	pointer
)	O
==	O
0	int
)	O
return	O
tp	pointer
;	O
if	O
(	O
word	pointer
[	O
wordlen	long
-	O
1	int
]	O
==	O
'S'	O
)	O
{	O
word	pointer
[	O
wordlen	long
-	O
1	int
]	O
=	O
'\0'	O
;	O
for	O
(	O
tp	pointer
=	O
time_units_table	array
;	O
tp	pointer
->	O
name	pointer
;	O
tp	pointer
++	O
)	O
if	O
(	O
strcmp	function
(	O
word	pointer
,	O
tp	pointer
->	O
name	pointer
)	O
==	O
0	int
)	O
return	O
tp	pointer
;	O
word	pointer
[	O
wordlen	long
-	O
1	int
]	O
=	O
'S'	O
;	O
}	O
for	O
(	O
tp	pointer
=	O
relative_time_table	array
;	O
tp	pointer
->	O
name	pointer
;	O
tp	pointer
++	O
)	O
if	O
(	O
strcmp	function
(	O
word	pointer
,	O
tp	pointer
->	O
name	pointer
)	O
==	O
0	int
)	O
return	O
tp	pointer
;	O
if	O
(	O
wordlen	long
==	O
1	int
)	O
for	O
(	O
tp	pointer
=	O
military_table	array
;	O
tp	pointer
->	O
name	pointer
;	O
tp	pointer
++	O
)	O
if	O
(	O
word	pointer
[	O
0	int
]	O
==	O
tp	pointer
->	O
name	pointer
[	O
0	int
]	O
)	O
return	O
tp	pointer
;	O
for	O
(	O
period_found	bool
=	O
false	int
,	O
p	pointer
=	O
q	pointer
=	O
word	pointer
;	O
(	O
*	O
p	pointer
=	O
*	O
q	pointer
)	O
;	O
q	pointer
++	O
)	O
if	O
(	O
*	O
q	pointer
==	O
'.'	O
)	O
period_found	bool
=	O
true	int
;	O
else	O
p	pointer
++	O
;	O
if	O
(	O
period_found	bool
&&	O
(	O
tp	pointer
=	O
lookup_zone	function
(	O
pc	pointer
,	O
word	pointer
)	O
)	O
)	O
return	O
tp	pointer
;	O
return	O
NULL	O
;	O
}	O
static	O
int	O
yylex	function
(	O
union	O
YYSTYPE	union
*	O
lvalp	pointer
,	O
parser_control	struct
*	O
pc	pointer
)	O
{	O
unsigned	O
char	O
c	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
while	O
(	O
c	int
=	O
*	O
pc	pointer
->	O
input	pointer
,	O
c_isspace	function
(	O
c	int
)	O
)	O
pc	pointer
->	O
input	pointer
++	O
;	O
if	O
(	O
c_isdigit	function
(	O
c	int
)	O
||	O
c	int
==	O
'-'	O
||	O
c	int
==	O
'+'	O
)	O
{	O
char	O
const	O
*	O
p	pointer
;	O
int	O
sign	char
;	O
intmax_t	long
value	long
=	O
0	int
;	O
if	O
(	O
c	int
==	O
'-'	O
||	O
c	int
==	O
'+'	O
)	O
{	O
sign	char
=	O
c	int
==	O
'-'	O
?	O
-	O
1	int
:	O
1	int
;	O
while	O
(	O
c	int
=	O
*	O
++	O
pc	pointer
->	O
input	pointer
,	O
c_isspace	function
(	O
c	int
)	O
)	O
continue	O
;	O
if	O
(	O
!	O
c_isdigit	function
(	O
c	int
)	O
)	O
continue	O
;	O
}	O
else	O
sign	char
=	O
0	int
;	O
p	pointer
=	O
pc	pointer
->	O
input	pointer
;	O
do	O
{	O
if	O
(	O
INT_MULTIPLY_WRAPV	O
(	O
value	long
,	O
10	int
,	O
&	O
value	long
)	O
)	O
return	O
'?'	O
;	O
if	O
(	O
INT_ADD_WRAPV	O
(	O
value	long
,	O
sign	char
<	O
0	int
?	O
'0'	O
-	O
c	int
:	O
c	int
-	O
'0'	O
,	O
&	O
value	long
)	O
)	O
return	O
'?'	O
;	O
c	int
=	O
*	O
++	O
p	pointer
;	O
}	O
while	O
(	O
c_isdigit	function
(	O
c	int
)	O
)	O
;	O
if	O
(	O
(	O
c	int
==	O
'.'	O
||	O
c	int
==	O
','	O
)	O
&&	O
c_isdigit	function
(	O
p	pointer
[	O
1	int
]	O
)	O
)	O
{	O
time_t	long
s	long
;	O
int	O
ns	long
;	O
int	O
digits	long
;	O
if	O
(	O
time_overflow	function
(	O
value	long
)	O
)	O
return	O
'?'	O
;	O
s	long
=	O
value	long
;	O
p	pointer
++	O
;	O
ns	long
=	O
*	O
p	pointer
++	O
-	O
'0'	O
;	O
for	O
(	O
digits	long
=	O
2	int
;	O
digits	long
<=	O
LOG10_BILLION	int
;	O
digits	long
++	O
)	O
{	O
ns	long
*=	O
10	int
;	O
if	O
(	O
c_isdigit	function
(	O
*	O
p	pointer
)	O
)	O
ns	long
+=	O
*	O
p	pointer
++	O
-	O
'0'	O
;	O
}	O
if	O
(	O
sign	char
<	O
0	int
)	O
for	O
(	O
;	O
c_isdigit	function
(	O
*	O
p	pointer
)	O
;	O
p	pointer
++	O
)	O
if	O
(	O
*	O
p	pointer
!=	O
'0'	O
)	O
{	O
ns	long
++	O
;	O
break	O
;	O
}	O
while	O
(	O
c_isdigit	function
(	O
*	O
p	pointer
)	O
)	O
p	pointer
++	O
;	O
if	O
(	O
sign	char
<	O
0	int
&&	O
ns	long
)	O
{	O
if	O
(	O
s	long
==	O
TYPE_MINIMUM	O
(	O
time_t	long
)	O
)	O
return	O
'?'	O
;	O
s	long
--	O
;	O
ns	long
=	O
BILLION	int
-	O
ns	long
;	O
}	O
lvalp	pointer
->	O
timespec	struct
.	O
tv_sec	long
=	O
s	long
;	O
lvalp	pointer
->	O
timespec	struct
.	O
tv_nsec	long
=	O
ns	long
;	O
pc	pointer
->	O
input	pointer
=	O
p	pointer
;	O
return	O
sign	char
?	O
tSDECIMAL_NUMBER	int
:	O
tUDECIMAL_NUMBER	int
;	O
}	O
else	O
{	O
lvalp	pointer
->	O
textintval	struct
.	O
negative	bool
=	O
sign	char
<	O
0	int
;	O
lvalp	pointer
->	O
textintval	struct
.	O
value	long
=	O
value	long
;	O
lvalp	pointer
->	O
textintval	struct
.	O
digits	long
=	O
p	pointer
-	O
pc	pointer
->	O
input	pointer
;	O
pc	pointer
->	O
input	pointer
=	O
p	pointer
;	O
return	O
sign	char
?	O
tSNUMBER	int
:	O
tUNUMBER	int
;	O
}	O
}	O
if	O
(	O
c_isalpha	function
(	O
c	int
)	O
)	O
{	O
char	O
buff	array
[	O
20	int
]	O
;	O
char	O
*	O
p	pointer
=	O
buff	array
;	O
table	struct
const	O
*	O
tp	pointer
;	O
do	O
{	O
if	O
(	O
p	pointer
<	O
buff	array
+	O
sizeof	O
buff	array
-	O
1	int
)	O
*	O
p	pointer
++	O
=	O
c	int
;	O
c	int
=	O
*	O
++	O
pc	pointer
->	O
input	pointer
;	O
}	O
while	O
(	O
c_isalpha	function
(	O
c	int
)	O
||	O
c	int
==	O
'.'	O
)	O
;	O
*	O
p	pointer
=	O
'\0'	O
;	O
tp	pointer
=	O
lookup_word	function
(	O
pc	pointer
,	O
buff	array
)	O
;	O
if	O
(	O
!	O
tp	pointer
)	O
{	O
if	O
(	O
pc	pointer
->	O
parse_datetime_debug	bool
)	O
dbg_printf	function
(	O
_	O
(	O
"error: unknown word '%s'\n"	pointer
)	O
,	O
buff	array
)	O
;	O
return	O
'?'	O
;	O
}	O
lvalp	pointer
->	O
intval	long
=	O
tp	pointer
->	O
value	long
;	O
return	O
tp	pointer
->	O
type	int
;	O
}	O
if	O
(	O
c	int
!=	O
'('	O
)	O
return	O
to_uchar	function
(	O
*	O
pc	pointer
->	O
input	pointer
++	O
)	O
;	O
ptrdiff_t	long
count	long
=	O
0	int
;	O
do	O
{	O
c	int
=	O
*	O
pc	pointer
->	O
input	pointer
++	O
;	O
if	O
(	O
c	int
==	O
'\0'	O
)	O
return	O
c	int
;	O
if	O
(	O
c	int
==	O
'('	O
)	O
count	long
++	O
;	O
else	O
if	O
(	O
c	int
==	O
')'	O
)	O
count	long
--	O
;	O
}	O
while	O
(	O
count	long
!=	O
0	int
)	O
;	O
}	O
}	O
static	O
int	O
yyerror	function
(	O
parser_control	struct
const	O
*	O
pc	pointer
_GL_UNUSED	O
,	O
char	O
const	O
*	O
s	long
_GL_UNUSED	O
)	O
{	O
return	O
0	int
;	O
}	O
static	O
bool	bool
mktime_ok	function
(	O
struct	O
tm	struct
const	O
*	O
tm0	pointer
,	O
struct	O
tm	struct
const	O
*	O
tm1	pointer
)	O
{	O
if	O
(	O
tm1	pointer
->	O
tm_wday	int
<	O
0	int
)	O
return	O
false	int
;	O
return	O
!	O
(	O
(	O
tm0	pointer
->	O
tm_sec	int
^	O
tm1	pointer
->	O
tm_sec	int
)	O
|	O
(	O
tm0	pointer
->	O
tm_min	int
^	O
tm1	pointer
->	O
tm_min	int
)	O
|	O
(	O
tm0	pointer
->	O
tm_hour	int
^	O
tm1	pointer
->	O
tm_hour	int
)	O
|	O
(	O
tm0	pointer
->	O
tm_mday	int
^	O
tm1	pointer
->	O
tm_mday	int
)	O
|	O
(	O
tm0	pointer
->	O
tm_mon	int
^	O
tm1	pointer
->	O
tm_mon	int
)	O
|	O
(	O
tm0	pointer
->	O
tm_year	int
^	O
tm1	pointer
->	O
tm_year	int
)	O
)	O
;	O
}	O
static	O
char	O
const	O
*	O
debug_strfdatetime	function
(	O
struct	O
tm	struct
const	O
*	O
tm	struct
,	O
parser_control	struct
const	O
*	O
pc	pointer
,	O
char	O
*	O
buf	array
,	O
int	O
n	long
)	O
{	O
int	O
m	int
=	O
nstrftime	function
(	O
buf	array
,	O
n	long
,	O
"(Y-M-D) %Y-%m-%d %H:%M:%S"	pointer
,	O
tm	struct
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
pc	pointer
&&	O
m	int
<	O
n	long
&&	O
pc	pointer
->	O
zones_seen	long
)	O
{	O
int	O
tz	int
=	O
pc	pointer
->	O
time_zone	int
;	O
if	O
(	O
pc	pointer
->	O
local_zones_seen	long
&&	O
!	O
pc	pointer
->	O
zones_seen	long
&&	O
0	int
<	O
pc	pointer
->	O
local_isdst	int
)	O
tz	int
+=	O
60	int
*	O
60	int
;	O
char	O
time_zone_buf	array
[	O
TIME_ZONE_BUFSIZE	int
]	O
;	O
snprintf	function
(	O
&	O
buf	array
[	O
m	int
]	O
,	O
n	long
-	O
m	int
,	O
" TZ=%s"	pointer
,	O
time_zone_str	function
(	O
tz	int
,	O
time_zone_buf	array
)	O
)	O
;	O
}	O
return	O
buf	array
;	O
}	O
static	O
char	O
const	O
*	O
debug_strfdate	function
(	O
struct	O
tm	struct
const	O
*	O
tm	struct
,	O
char	O
*	O
buf	array
,	O
int	O
n	long
)	O
{	O
char	O
tm_year_buf	array
[	O
TM_YEAR_BUFSIZE	int
]	O
;	O
snprintf	function
(	O
buf	array
,	O
n	long
,	O
"(Y-M-D) %s-%02d-%02d"	pointer
,	O
tm_year_str	function
(	O
tm	struct
->	O
tm_year	int
,	O
tm_year_buf	array
)	O
,	O
tm	struct
->	O
tm_mon	int
+	O
1	int
,	O
tm	struct
->	O
tm_mday	int
)	O
;	O
return	O
buf	array
;	O
}	O
static	O
char	O
const	O
*	O
debug_strftime	function
(	O
struct	O
tm	struct
const	O
*	O
tm	struct
,	O
char	O
*	O
buf	array
,	O
int	O
n	long
)	O
{	O
snprintf	function
(	O
buf	array
,	O
n	long
,	O
"%02d:%02d:%02d"	pointer
,	O
tm	struct
->	O
tm_hour	int
,	O
tm	struct
->	O
tm_min	int
,	O
tm	struct
->	O
tm_sec	int
)	O
;	O
return	O
buf	array
;	O
}	O
static	O
void	O
debug_mktime_not_ok	function
(	O
struct	O
tm	struct
const	O
*	O
tm0	pointer
,	O
struct	O
tm	struct
const	O
*	O
tm1	pointer
,	O
parser_control	struct
const	O
*	O
pc	pointer
,	O
bool	bool
time_zone_seen	bool
)	O
{	O
char	O
tmp	array
[	O
DBGBUFSIZE	int
]	O
;	O
int	O
i	int
;	O
const	O
bool	bool
eq_sec	bool
=	O
(	O
tm0	pointer
->	O
tm_sec	int
==	O
tm1	pointer
->	O
tm_sec	int
)	O
;	O
const	O
bool	bool
eq_min	bool
=	O
(	O
tm0	pointer
->	O
tm_min	int
==	O
tm1	pointer
->	O
tm_min	int
)	O
;	O
const	O
bool	bool
eq_hour	bool
=	O
(	O
tm0	pointer
->	O
tm_hour	int
==	O
tm1	pointer
->	O
tm_hour	int
)	O
;	O
const	O
bool	bool
eq_mday	bool
=	O
(	O
tm0	pointer
->	O
tm_mday	int
==	O
tm1	pointer
->	O
tm_mday	int
)	O
;	O
const	O
bool	bool
eq_month	bool
=	O
(	O
tm0	pointer
->	O
tm_mon	int
==	O
tm1	pointer
->	O
tm_mon	int
)	O
;	O
const	O
bool	bool
eq_year	bool
=	O
(	O
tm0	pointer
->	O
tm_year	int
==	O
tm1	pointer
->	O
tm_year	int
)	O
;	O
const	O
bool	bool
dst_shift	bool
=	O
eq_sec	bool
&&	O
eq_min	bool
&&	O
!	O
eq_hour	bool
&&	O
eq_mday	bool
&&	O
eq_month	bool
&&	O
eq_year	bool
;	O
if	O
(	O
!	O
pc	pointer
->	O
parse_datetime_debug	bool
)	O
return	O
;	O
dbg_printf	function
(	O
_	O
(	O
"error: invalid date/time value:\n"	pointer
)	O
)	O
;	O
dbg_printf	function
(	O
_	O
(	O
"    user provided time: '%s'\n"	pointer
)	O
,	O
debug_strfdatetime	function
(	O
tm0	pointer
,	O
pc	pointer
,	O
tmp	array
,	O
sizeof	O
tmp	array
)	O
)	O
;	O
dbg_printf	function
(	O
_	O
(	O
"       normalized time: '%s'\n"	pointer
)	O
,	O
debug_strfdatetime	function
(	O
tm1	pointer
,	O
pc	pointer
,	O
tmp	array
,	O
sizeof	O
tmp	array
)	O
)	O
;	O
i	int
=	O
snprintf	function
(	O
tmp	array
,	O
sizeof	O
tmp	array
,	O
"                                 %4s %2s %2s %2s %2s %2s"	pointer
,	O
eq_year	bool
?	O
""	pointer
:	O
"----"	pointer
,	O
eq_month	bool
?	O
""	pointer
:	O
"--"	pointer
,	O
eq_mday	bool
?	O
""	pointer
:	O
"--"	pointer
,	O
eq_hour	bool
?	O
""	pointer
:	O
"--"	pointer
,	O
eq_min	bool
?	O
""	pointer
:	O
"--"	pointer
,	O
eq_sec	bool
?	O
""	pointer
:	O
"--"	pointer
)	O
;	O
if	O
(	O
0	int
<=	O
i	int
)	O
{	O
if	O
(	O
sizeof	O
tmp	array
-	O
1	int
<	O
i	int
)	O
i	int
=	O
sizeof	O
tmp	array
-	O
1	int
;	O
while	O
(	O
0	int
<	O
i	int
&&	O
tmp	array
[	O
i	int
-	O
1	int
]	O
==	O
' '	O
)	O
--	O
i	int
;	O
tmp	array
[	O
i	int
]	O
=	O
'\0'	O
;	O
}	O
dbg_printf	function
(	O
"%s\n"	pointer
,	O
tmp	array
)	O
;	O
dbg_printf	function
(	O
_	O
(	O
"     possible reasons:\n"	pointer
)	O
)	O
;	O
if	O
(	O
dst_shift	bool
)	O
dbg_printf	function
(	O
_	O
(	O
"       non-existing due to daylight-saving time;\n"	pointer
)	O
)	O
;	O
if	O
(	O
!	O
eq_mday	bool
&&	O
!	O
eq_month	bool
)	O
dbg_printf	function
(	O
_	O
(	O
"       invalid day/month combination;\n"	pointer
)	O
)	O
;	O
dbg_printf	function
(	O
_	O
(	O
"       numeric values overflow;\n"	pointer
)	O
)	O
;	O
dbg_printf	function
(	O
"       %s\n"	pointer
,	O
(	O
time_zone_seen	bool
?	O
_	O
(	O
"incorrect timezone"	pointer
)	O
:	O
_	O
(	O
"missing timezone"	pointer
)	O
)	O
)	O
;	O
}	O
bool	bool
parse_datetime	function
(	O
struct	O
timespec	struct
*	O
result	pointer
,	O
char	O
const	O
*	O
p	pointer
,	O
struct	O
timespec	struct
const	O
*	O
now	pointer
)	O
{	O
char	O
const	O
*	O
tzstring	pointer
=	O
getenv	function
(	O
"TZ"	pointer
)	O
;	O
timezone_t	pointer
tz	int
=	O
tzalloc	function
(	O
tzstring	pointer
)	O
;	O
if	O
(	O
!	O
tz	int
)	O
return	O
false	int
;	O
bool	bool
ok	bool
=	O
parse_datetime2	function
(	O
result	pointer
,	O
p	pointer
,	O
now	pointer
,	O
0	int
,	O
tz	int
,	O
tzstring	pointer
)	O
;	O
tzfree	function
(	O
tz	int
)	O
;	O
return	O
ok	bool
;	O
}	O
bool	bool
parse_datetime2	function
(	O
struct	O
timespec	struct
*	O
result	pointer
,	O
char	O
const	O
*	O
p	pointer
,	O
struct	O
timespec	struct
const	O
*	O
now	pointer
,	O
unsigned	O
int	O
flags	int
,	O
timezone_t	pointer
tzdefault	pointer
,	O
char	O
const	O
*	O
tzstring	pointer
)	O
{	O
struct	O
tm	struct
tm	struct
;	O
struct	O
tm	struct
tm0	pointer
;	O
char	O
time_zone_buf	array
[	O
TIME_ZONE_BUFSIZE	int
]	O
;	O
char	O
dbg_tm	array
[	O
DBGBUFSIZE	int
]	O
;	O
bool	bool
ok	bool
=	O
false	int
;	O
char	O
const	O
*	O
input_sentinel	pointer
=	O
p	pointer
+	O
strlen	function
(	O
p	pointer
)	O
;	O
char	O
*	O
tz1alloc	pointer
=	O
NULL	O
;	O
enum	O
{	O
TZBUFSIZE	int
=	O
100	int
}	O
;	O
char	O
tz1buf	array
[	O
TZBUFSIZE	int
]	O
;	O
struct	O
timespec	struct
gettime_buffer	struct
;	O
if	O
(	O
!	O
now	pointer
)	O
{	O
gettime	function
(	O
&	O
gettime_buffer	struct
)	O
;	O
now	pointer
=	O
&	O
gettime_buffer	struct
;	O
}	O
time_t	long
Start	long
=	O
now	pointer
->	O
tv_sec	long
;	O
int	O
Start_ns	int
=	O
now	pointer
->	O
tv_nsec	long
;	O
unsigned	O
char	O
c	int
;	O
while	O
(	O
c	int
=	O
*	O
p	pointer
,	O
c_isspace	function
(	O
c	int
)	O
)	O
p	pointer
++	O
;	O
timezone_t	pointer
tz	int
=	O
tzdefault	pointer
;	O
const	O
relative_time	struct
rel_time_0	struct
=	O
RELATIVE_TIME_0	O
;	O
if	O
(	O
strncmp	function
(	O
p	pointer
,	O
"TZ=\""	pointer
,	O
4	int
)	O
==	O
0	int
)	O
{	O
char	O
const	O
*	O
tzbase	pointer
=	O
p	pointer
+	O
4	int
;	O
ptrdiff_t	long
tzsize	long
=	O
1	int
;	O
char	O
const	O
*	O
s	long
;	O
for	O
(	O
s	long
=	O
tzbase	pointer
;	O
*	O
s	long
;	O
s	long
++	O
,	O
tzsize	long
++	O
)	O
if	O
(	O
*	O
s	long
==	O
'\\'	O
)	O
{	O
s	long
++	O
;	O
if	O
(	O
!	O
(	O
*	O
s	long
==	O
'\\'	O
||	O
*	O
s	long
==	O
'"'	O
)	O
)	O
break	O
;	O
}	O
else	O
if	O
(	O
*	O
s	long
==	O
'"'	O
)	O
{	O
timezone_t	pointer
tz1	pointer
;	O
char	O
*	O
tz1string	pointer
=	O
tz1buf	array
;	O
char	O
*	O
z	pointer
;	O
if	O
(	O
TZBUFSIZE	int
<	O
tzsize	long
)	O
{	O
tz1alloc	pointer
=	O
malloc	function
(	O
tzsize	long
)	O
;	O
if	O
(	O
!	O
tz1alloc	pointer
)	O
goto	O
fail	O
;	O
tz1string	pointer
=	O
tz1alloc	pointer
;	O
}	O
z	pointer
=	O
tz1string	pointer
;	O
for	O
(	O
s	long
=	O
tzbase	pointer
;	O
*	O
s	long
!=	O
'"'	O
;	O
s	long
++	O
)	O
*	O
z	pointer
++	O
=	O
*	O
(	O
s	long
+=	O
*	O
s	long
==	O
'\\'	O
)	O
;	O
*	O
z	pointer
=	O
'\0'	O
;	O
tz1	pointer
=	O
tzalloc	function
(	O
tz1string	pointer
)	O
;	O
if	O
(	O
!	O
tz1	pointer
)	O
goto	O
fail	O
;	O
tz	int
=	O
tz1	pointer
;	O
tzstring	pointer
=	O
tz1string	pointer
;	O
p	pointer
=	O
s	long
+	O
1	int
;	O
while	O
(	O
c	int
=	O
*	O
p	pointer
,	O
c_isspace	function
(	O
c	int
)	O
)	O
p	pointer
++	O
;	O
break	O
;	O
}	O
}	O
struct	O
tm	struct
tmp	array
;	O
if	O
(	O
!	O
localtime_rz	function
(	O
tz	int
,	O
&	O
now	pointer
->	O
tv_sec	long
,	O
&	O
tmp	array
)	O
)	O
goto	O
fail	O
;	O
if	O
(	O
*	O
p	pointer
==	O
'\0'	O
)	O
p	pointer
=	O
"0"	pointer
;	O
parser_control	struct
pc	pointer
;	O
pc	pointer
.	O
input	pointer
=	O
p	pointer
;	O
pc	pointer
.	O
parse_datetime_debug	bool
=	O
(	O
flags	int
&	O
PARSE_DATETIME_DEBUG	int
)	O
!=	O
0	int
;	O
if	O
(	O
INT_ADD_WRAPV	O
(	O
tmp	array
.	O
tm_year	int
,	O
TM_YEAR_BASE	int
,	O
&	O
pc	pointer
.	O
year	long
.	O
value	long
)	O
)	O
{	O
if	O
(	O
pc	pointer
.	O
parse_datetime_debug	bool
)	O
dbg_printf	function
(	O
_	O
(	O
"error: initial year out of range\n"	pointer
)	O
)	O
;	O
goto	O
fail	O
;	O
}	O
pc	pointer
.	O
year	long
.	O
digits	long
=	O
0	int
;	O
pc	pointer
.	O
month	long
=	O
tmp	array
.	O
tm_mon	int
+	O
1	int
;	O
pc	pointer
.	O
day	long
=	O
tmp	array
.	O
tm_mday	int
;	O
pc	pointer
.	O
hour	long
=	O
tmp	array
.	O
tm_hour	int
;	O
pc	pointer
.	O
minutes	long
=	O
tmp	array
.	O
tm_min	int
;	O
pc	pointer
.	O
seconds	long
.	O
tv_sec	long
=	O
tmp	array
.	O
tm_sec	int
;	O
pc	pointer
.	O
seconds	long
.	O
tv_nsec	long
=	O
Start_ns	int
;	O
tm	struct
.	O
tm_isdst	int
=	O
tmp	array
.	O
tm_isdst	int
;	O
pc	pointer
.	O
meridian	int
=	O
MER24	int
;	O
pc	pointer
.	O
rel	struct
=	O
rel_time_0	struct
;	O
pc	pointer
.	O
timespec_seen	bool
=	O
false	int
;	O
pc	pointer
.	O
rels_seen	bool
=	O
false	int
;	O
pc	pointer
.	O
dates_seen	long
=	O
0	int
;	O
pc	pointer
.	O
days_seen	long
=	O
0	int
;	O
pc	pointer
.	O
times_seen	long
=	O
0	int
;	O
pc	pointer
.	O
local_zones_seen	long
=	O
0	int
;	O
pc	pointer
.	O
dsts_seen	long
=	O
0	int
;	O
pc	pointer
.	O
zones_seen	long
=	O
0	int
;	O
pc	pointer
.	O
year_seen	bool
=	O
false	int
;	O
pc	pointer
.	O
debug_dates_seen	bool
=	O
false	int
;	O
pc	pointer
.	O
debug_days_seen	bool
=	O
false	int
;	O
pc	pointer
.	O
debug_times_seen	bool
=	O
false	int
;	O
pc	pointer
.	O
debug_local_zones_seen	bool
=	O
false	int
;	O
pc	pointer
.	O
debug_zones_seen	bool
=	O
false	int
;	O
pc	pointer
.	O
debug_year_seen	bool
=	O
false	int
;	O
pc	pointer
.	O
debug_ordinal_day_seen	bool
=	O
false	int
;	O
pc	pointer
.	O
local_time_zone_table	array
[	O
0	int
]	O
.	O
name	pointer
=	O
tmp	array
.	O
tm_zone	pointer
;	O
pc	pointer
.	O
local_time_zone_table	array
[	O
0	int
]	O
.	O
type	int
=	O
tLOCAL_ZONE	int
;	O
pc	pointer
.	O
local_time_zone_table	array
[	O
0	int
]	O
.	O
value	long
=	O
tmp	array
.	O
tm_isdst	int
;	O
pc	pointer
.	O
local_time_zone_table	array
[	O
1	int
]	O
.	O
name	pointer
=	O
NULL	O
;	O
{	O
int	O
quarter	int
;	O
for	O
(	O
quarter	int
=	O
1	int
;	O
quarter	int
<=	O
3	int
;	O
quarter	int
++	O
)	O
{	O
intmax_t	long
iprobe	long
;	O
if	O
(	O
INT_ADD_WRAPV	O
(	O
Start	long
,	O
quarter	int
*	O
(	O
90	int
*	O
24	int
*	O
60	int
*	O
60	int
)	O
,	O
&	O
iprobe	long
)	O
||	O
time_overflow	function
(	O
iprobe	long
)	O
)	O
break	O
;	O
time_t	long
probe	long
=	O
iprobe	long
;	O
struct	O
tm	struct
probe_tm	struct
;	O
if	O
(	O
localtime_rz	function
(	O
tz	int
,	O
&	O
probe	long
,	O
&	O
probe_tm	struct
)	O
&&	O
probe_tm	struct
.	O
tm_zone	pointer
&&	O
probe_tm	struct
.	O
tm_isdst	int
!=	O
pc	pointer
.	O
local_time_zone_table	array
[	O
0	int
]	O
.	O
value	long
)	O
{	O
{	O
pc	pointer
.	O
local_time_zone_table	array
[	O
1	int
]	O
.	O
name	pointer
=	O
probe_tm	struct
.	O
tm_zone	pointer
;	O
pc	pointer
.	O
local_time_zone_table	array
[	O
1	int
]	O
.	O
type	int
=	O
tLOCAL_ZONE	int
;	O
pc	pointer
.	O
local_time_zone_table	array
[	O
1	int
]	O
.	O
value	long
=	O
probe_tm	struct
.	O
tm_isdst	int
;	O
pc	pointer
.	O
local_time_zone_table	array
[	O
2	int
]	O
.	O
name	pointer
=	O
NULL	O
;	O
}	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
pc	pointer
.	O
local_time_zone_table	array
[	O
0	int
]	O
.	O
name	pointer
&&	O
pc	pointer
.	O
local_time_zone_table	array
[	O
1	int
]	O
.	O
name	pointer
&&	O
!	O
strcmp	function
(	O
pc	pointer
.	O
local_time_zone_table	array
[	O
0	int
]	O
.	O
name	pointer
,	O
pc	pointer
.	O
local_time_zone_table	array
[	O
1	int
]	O
.	O
name	pointer
)	O
)	O
{	O
pc	pointer
.	O
local_time_zone_table	array
[	O
0	int
]	O
.	O
value	long
=	O
-	O
1	int
;	O
pc	pointer
.	O
local_time_zone_table	array
[	O
1	int
]	O
.	O
name	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
yyparse	function
(	O
&	O
pc	pointer
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
pc	pointer
.	O
parse_datetime_debug	bool
)	O
dbg_printf	function
(	O
(	O
input_sentinel	pointer
<=	O
pc	pointer
.	O
input	pointer
?	O
_	O
(	O
"error: parsing failed\n"	pointer
)	O
:	O
_	O
(	O
"error: parsing failed, stopped at '%s'\n"	pointer
)	O
)	O
,	O
pc	pointer
.	O
input	pointer
)	O
;	O
goto	O
fail	O
;	O
}	O
if	O
(	O
pc	pointer
.	O
parse_datetime_debug	bool
)	O
{	O
dbg_printf	function
(	O
_	O
(	O
"input timezone: "	pointer
)	O
)	O
;	O
if	O
(	O
pc	pointer
.	O
timespec_seen	bool
)	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"'@timespec' - always UTC"	pointer
)	O
)	O
;	O
else	O
if	O
(	O
pc	pointer
.	O
zones_seen	long
)	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"parsed date/time string"	pointer
)	O
)	O
;	O
else	O
if	O
(	O
tzstring	pointer
)	O
{	O
if	O
(	O
tz	int
!=	O
tzdefault	pointer
)	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"TZ=\"%s\" in date string"	pointer
)	O
,	O
tzstring	pointer
)	O
;	O
else	O
if	O
(	O
STREQ	O
(	O
tzstring	pointer
,	O
"UTC0"	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"TZ=\"UTC0\" environment value or -u"	pointer
)	O
)	O
;	O
}	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"TZ=\"%s\" environment value"	pointer
)	O
,	O
tzstring	pointer
)	O
;	O
}	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"system default"	pointer
)	O
)	O
;	O
if	O
(	O
pc	pointer
.	O
local_zones_seen	long
&&	O
!	O
pc	pointer
.	O
zones_seen	long
&&	O
0	int
<	O
pc	pointer
.	O
local_isdst	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
", dst"	pointer
)	O
;	O
if	O
(	O
pc	pointer
.	O
zones_seen	long
)	O
fprintf	function
(	O
stderr	pointer
,	O
" (%s)"	pointer
,	O
time_zone_str	function
(	O
pc	pointer
.	O
time_zone	int
,	O
time_zone_buf	array
)	O
)	O
;	O
fputc	function
(	O
'\n'	O
,	O
stderr	pointer
)	O
;	O
}	O
if	O
(	O
pc	pointer
.	O
timespec_seen	bool
)	O
*	O
result	pointer
=	O
pc	pointer
.	O
seconds	long
;	O
else	O
{	O
if	O
(	O
1	int
<	O
(	O
pc	pointer
.	O
times_seen	long
|	O
pc	pointer
.	O
dates_seen	long
|	O
pc	pointer
.	O
days_seen	long
|	O
pc	pointer
.	O
dsts_seen	long
|	O
(	O
pc	pointer
.	O
local_zones_seen	long
+	O
pc	pointer
.	O
zones_seen	long
)	O
)	O
)	O
{	O
if	O
(	O
pc	pointer
.	O
parse_datetime_debug	bool
)	O
{	O
if	O
(	O
pc	pointer
.	O
times_seen	long
>	O
1	int
)	O
dbg_printf	function
(	O
"error: seen multiple time parts\n"	pointer
)	O
;	O
if	O
(	O
pc	pointer
.	O
dates_seen	long
>	O
1	int
)	O
dbg_printf	function
(	O
"error: seen multiple date parts\n"	pointer
)	O
;	O
if	O
(	O
pc	pointer
.	O
days_seen	long
>	O
1	int
)	O
dbg_printf	function
(	O
"error: seen multiple days parts\n"	pointer
)	O
;	O
if	O
(	O
pc	pointer
.	O
dsts_seen	long
>	O
1	int
)	O
dbg_printf	function
(	O
"error: seen multiple daylight-saving parts\n"	pointer
)	O
;	O
if	O
(	O
(	O
pc	pointer
.	O
local_zones_seen	long
+	O
pc	pointer
.	O
zones_seen	long
)	O
>	O
1	int
)	O
dbg_printf	function
(	O
"error: seen multiple time-zone parts\n"	pointer
)	O
;	O
}	O
goto	O
fail	O
;	O
}	O
if	O
(	O
!	O
to_tm_year	function
(	O
pc	pointer
.	O
year	long
,	O
pc	pointer
.	O
parse_datetime_debug	bool
,	O
&	O
tm	struct
.	O
tm_year	int
)	O
||	O
INT_ADD_WRAPV	O
(	O
pc	pointer
.	O
month	long
,	O
-	O
1	int
,	O
&	O
tm	struct
.	O
tm_mon	int
)	O
||	O
INT_ADD_WRAPV	O
(	O
pc	pointer
.	O
day	long
,	O
0	int
,	O
&	O
tm	struct
.	O
tm_mday	int
)	O
)	O
{	O
if	O
(	O
pc	pointer
.	O
parse_datetime_debug	bool
)	O
dbg_printf	function
(	O
_	O
(	O
"error: year, month, or day overflow\n"	pointer
)	O
)	O
;	O
goto	O
fail	O
;	O
}	O
if	O
(	O
pc	pointer
.	O
times_seen	long
||	O
(	O
pc	pointer
.	O
rels_seen	bool
&&	O
!	O
pc	pointer
.	O
dates_seen	long
&&	O
!	O
pc	pointer
.	O
days_seen	long
)	O
)	O
{	O
tm	struct
.	O
tm_hour	int
=	O
to_hour	function
(	O
pc	pointer
.	O
hour	long
,	O
pc	pointer
.	O
meridian	int
)	O
;	O
if	O
(	O
tm	struct
.	O
tm_hour	int
<	O
0	int
)	O
{	O
char	O
const	O
*	O
mrd	pointer
=	O
(	O
pc	pointer
.	O
meridian	int
==	O
MERam	int
?	O
"am"	pointer
:	O
pc	pointer
.	O
meridian	int
==	O
MERpm	int
?	O
"pm"	pointer
:	O
""	pointer
)	O
;	O
if	O
(	O
pc	pointer
.	O
parse_datetime_debug	bool
)	O
dbg_printf	function
(	O
_	O
(	O
"error: invalid hour %"	pointer
PRIdMAX	O
"%s\n"	pointer
)	O
,	O
pc	pointer
.	O
hour	long
,	O
mrd	pointer
)	O
;	O
goto	O
fail	O
;	O
}	O
tm	struct
.	O
tm_min	int
=	O
pc	pointer
.	O
minutes	long
;	O
tm	struct
.	O
tm_sec	int
=	O
pc	pointer
.	O
seconds	long
.	O
tv_sec	long
;	O
if	O
(	O
pc	pointer
.	O
parse_datetime_debug	bool
)	O
dbg_printf	function
(	O
(	O
pc	pointer
.	O
times_seen	long
?	O
_	O
(	O
"using specified time as starting value: '%s'\n"	pointer
)	O
:	O
_	O
(	O
"using current time as starting value: '%s'\n"	pointer
)	O
)	O
,	O
debug_strftime	function
(	O
&	O
tm	struct
,	O
dbg_tm	array
,	O
sizeof	O
dbg_tm	array
)	O
)	O
;	O
}	O
else	O
{	O
tm	struct
.	O
tm_hour	int
=	O
tm	struct
.	O
tm_min	int
=	O
tm	struct
.	O
tm_sec	int
=	O
0	int
;	O
pc	pointer
.	O
seconds	long
.	O
tv_nsec	long
=	O
0	int
;	O
if	O
(	O
pc	pointer
.	O
parse_datetime_debug	bool
)	O
dbg_printf	function
(	O
"warning: using midnight as starting time: 00:00:00\n"	pointer
)	O
;	O
}	O
if	O
(	O
pc	pointer
.	O
dates_seen	long
|	O
pc	pointer
.	O
days_seen	long
|	O
pc	pointer
.	O
times_seen	long
)	O
tm	struct
.	O
tm_isdst	int
=	O
-	O
1	int
;	O
if	O
(	O
pc	pointer
.	O
local_zones_seen	long
)	O
tm	struct
.	O
tm_isdst	int
=	O
pc	pointer
.	O
local_isdst	int
;	O
tm0	pointer
.	O
tm_sec	int
=	O
tm	struct
.	O
tm_sec	int
;	O
tm0	pointer
.	O
tm_min	int
=	O
tm	struct
.	O
tm_min	int
;	O
tm0	pointer
.	O
tm_hour	int
=	O
tm	struct
.	O
tm_hour	int
;	O
tm0	pointer
.	O
tm_mday	int
=	O
tm	struct
.	O
tm_mday	int
;	O
tm0	pointer
.	O
tm_mon	int
=	O
tm	struct
.	O
tm_mon	int
;	O
tm0	pointer
.	O
tm_year	int
=	O
tm	struct
.	O
tm_year	int
;	O
tm0	pointer
.	O
tm_isdst	int
=	O
tm	struct
.	O
tm_isdst	int
;	O
tm	struct
.	O
tm_wday	int
=	O
-	O
1	int
;	O
Start	long
=	O
mktime_z	function
(	O
tz	int
,	O
&	O
tm	struct
)	O
;	O
if	O
(	O
!	O
mktime_ok	function
(	O
&	O
tm0	pointer
,	O
&	O
tm	struct
)	O
)	O
{	O
bool	bool
repaired	bool
=	O
false	int
;	O
bool	bool
time_zone_seen	bool
=	O
pc	pointer
.	O
zones_seen	long
!=	O
0	int
;	O
if	O
(	O
time_zone_seen	bool
)	O
{	O
char	O
tz2buf	array
[	O
sizeof	O
"XXX"	pointer
-	O
1	int
+	O
TIME_ZONE_BUFSIZE	int
]	O
;	O
tz2buf	array
[	O
0	int
]	O
=	O
tz2buf	array
[	O
1	int
]	O
=	O
tz2buf	array
[	O
2	int
]	O
=	O
'X'	O
;	O
time_zone_str	function
(	O
pc	pointer
.	O
time_zone	int
,	O
&	O
tz2buf	array
[	O
3	int
]	O
)	O
;	O
timezone_t	pointer
tz2	pointer
=	O
tzalloc	function
(	O
tz2buf	array
)	O
;	O
if	O
(	O
!	O
tz2	pointer
)	O
{	O
if	O
(	O
pc	pointer
.	O
parse_datetime_debug	bool
)	O
dbg_printf	function
(	O
_	O
(	O
"error: tzalloc (\"%s\") failed\n"	pointer
)	O
,	O
tz2buf	array
)	O
;	O
goto	O
fail	O
;	O
}	O
tm	struct
.	O
tm_sec	int
=	O
tm0	pointer
.	O
tm_sec	int
;	O
tm	struct
.	O
tm_min	int
=	O
tm0	pointer
.	O
tm_min	int
;	O
tm	struct
.	O
tm_hour	int
=	O
tm0	pointer
.	O
tm_hour	int
;	O
tm	struct
.	O
tm_mday	int
=	O
tm0	pointer
.	O
tm_mday	int
;	O
tm	struct
.	O
tm_mon	int
=	O
tm0	pointer
.	O
tm_mon	int
;	O
tm	struct
.	O
tm_year	int
=	O
tm0	pointer
.	O
tm_year	int
;	O
tm	struct
.	O
tm_isdst	int
=	O
tm0	pointer
.	O
tm_isdst	int
;	O
tm	struct
.	O
tm_wday	int
=	O
-	O
1	int
;	O
Start	long
=	O
mktime_z	function
(	O
tz2	pointer
,	O
&	O
tm	struct
)	O
;	O
repaired	bool
=	O
mktime_ok	function
(	O
&	O
tm0	pointer
,	O
&	O
tm	struct
)	O
;	O
tzfree	function
(	O
tz2	pointer
)	O
;	O
}	O
if	O
(	O
!	O
repaired	bool
)	O
{	O
debug_mktime_not_ok	function
(	O
&	O
tm0	pointer
,	O
&	O
tm	struct
,	O
&	O
pc	pointer
,	O
time_zone_seen	bool
)	O
;	O
goto	O
fail	O
;	O
}	O
}	O
char	O
dbg_ord	array
[	O
DBGBUFSIZE	int
]	O
;	O
if	O
(	O
pc	pointer
.	O
days_seen	long
&&	O
!	O
pc	pointer
.	O
dates_seen	long
)	O
{	O
intmax_t	long
dayincr	long
;	O
if	O
(	O
INT_MULTIPLY_WRAPV	O
(	O
(	O
pc	pointer
.	O
day_ordinal	long
-	O
(	O
0	int
<	O
pc	pointer
.	O
day_ordinal	long
&&	O
tm	struct
.	O
tm_wday	int
!=	O
pc	pointer
.	O
day_number	int
)	O
)	O
,	O
7	int
,	O
&	O
dayincr	long
)	O
||	O
INT_ADD_WRAPV	O
(	O
(	O
pc	pointer
.	O
day_number	int
-	O
tm	struct
.	O
tm_wday	int
+	O
7	int
)	O
%	O
7	int
,	O
dayincr	long
,	O
&	O
dayincr	long
)	O
||	O
INT_ADD_WRAPV	O
(	O
dayincr	long
,	O
tm	struct
.	O
tm_mday	int
,	O
&	O
tm	struct
.	O
tm_mday	int
)	O
)	O
Start	long
=	O
-	O
1	int
;	O
else	O
{	O
tm	struct
.	O
tm_isdst	int
=	O
-	O
1	int
;	O
Start	long
=	O
mktime_z	function
(	O
tz	int
,	O
&	O
tm	struct
)	O
;	O
}	O
if	O
(	O
Start	long
==	O
(	O
time_t	long
)	O
-	O
1	int
)	O
{	O
if	O
(	O
pc	pointer
.	O
parse_datetime_debug	bool
)	O
dbg_printf	function
(	O
_	O
(	O
"error: day '%s' "	pointer
"(day ordinal=%"	pointer
PRIdMAX	O
" number=%d) "	pointer
"resulted in an invalid date: '%s'\n"	pointer
)	O
,	O
str_days	function
(	O
&	O
pc	pointer
,	O
dbg_ord	array
,	O
sizeof	O
dbg_ord	array
)	O
,	O
pc	pointer
.	O
day_ordinal	long
,	O
pc	pointer
.	O
day_number	int
,	O
debug_strfdatetime	function
(	O
&	O
tm	struct
,	O
&	O
pc	pointer
,	O
dbg_tm	array
,	O
sizeof	O
dbg_tm	array
)	O
)	O
;	O
goto	O
fail	O
;	O
}	O
if	O
(	O
pc	pointer
.	O
parse_datetime_debug	bool
)	O
dbg_printf	function
(	O
_	O
(	O
"new start date: '%s' is '%s'\n"	pointer
)	O
,	O
str_days	function
(	O
&	O
pc	pointer
,	O
dbg_ord	array
,	O
sizeof	O
dbg_ord	array
)	O
,	O
debug_strfdatetime	function
(	O
&	O
tm	struct
,	O
&	O
pc	pointer
,	O
dbg_tm	array
,	O
sizeof	O
dbg_tm	array
)	O
)	O
;	O
}	O
if	O
(	O
pc	pointer
.	O
parse_datetime_debug	bool
)	O
{	O
if	O
(	O
!	O
pc	pointer
.	O
dates_seen	long
&&	O
!	O
pc	pointer
.	O
days_seen	long
)	O
dbg_printf	function
(	O
_	O
(	O
"using current date as starting value: '%s'\n"	pointer
)	O
,	O
debug_strfdate	function
(	O
&	O
tm	struct
,	O
dbg_tm	array
,	O
sizeof	O
dbg_tm	array
)	O
)	O
;	O
if	O
(	O
pc	pointer
.	O
days_seen	long
&&	O
pc	pointer
.	O
dates_seen	long
)	O
dbg_printf	function
(	O
_	O
(	O
"warning: day (%s) ignored when explicit dates "	pointer
"are given\n"	pointer
)	O
,	O
str_days	function
(	O
&	O
pc	pointer
,	O
dbg_ord	array
,	O
sizeof	O
dbg_ord	array
)	O
)	O
;	O
dbg_printf	function
(	O
_	O
(	O
"starting date/time: '%s'\n"	pointer
)	O
,	O
debug_strfdatetime	function
(	O
&	O
tm	struct
,	O
&	O
pc	pointer
,	O
dbg_tm	array
,	O
sizeof	O
dbg_tm	array
)	O
)	O
;	O
}	O
if	O
(	O
pc	pointer
.	O
rel	struct
.	O
year	long
|	O
pc	pointer
.	O
rel	struct
.	O
month	long
|	O
pc	pointer
.	O
rel	struct
.	O
day	long
)	O
{	O
if	O
(	O
pc	pointer
.	O
parse_datetime_debug	bool
)	O
{	O
if	O
(	O
(	O
pc	pointer
.	O
rel	struct
.	O
year	long
!=	O
0	int
||	O
pc	pointer
.	O
rel	struct
.	O
month	long
!=	O
0	int
)	O
&&	O
tm	struct
.	O
tm_mday	int
!=	O
15	int
)	O
dbg_printf	function
(	O
_	O
(	O
"warning: when adding relative months/years, "	pointer
"it is recommended to specify the 15th of the "	pointer
"months\n"	pointer
)	O
)	O
;	O
if	O
(	O
pc	pointer
.	O
rel	struct
.	O
day	long
!=	O
0	int
&&	O
tm	struct
.	O
tm_hour	int
!=	O
12	int
)	O
dbg_printf	function
(	O
_	O
(	O
"warning: when adding relative days, "	pointer
"it is recommended to specify noon\n"	pointer
)	O
)	O
;	O
}	O
int	O
year	long
,	O
month	long
,	O
day	long
;	O
if	O
(	O
INT_ADD_WRAPV	O
(	O
tm	struct
.	O
tm_year	int
,	O
pc	pointer
.	O
rel	struct
.	O
year	long
,	O
&	O
year	long
)	O
||	O
INT_ADD_WRAPV	O
(	O
tm	struct
.	O
tm_mon	int
,	O
pc	pointer
.	O
rel	struct
.	O
month	long
,	O
&	O
month	long
)	O
||	O
INT_ADD_WRAPV	O
(	O
tm	struct
.	O
tm_mday	int
,	O
pc	pointer
.	O
rel	struct
.	O
day	long
,	O
&	O
day	long
)	O
)	O
{	O
if	O
(	O
pc	pointer
.	O
parse_datetime_debug	bool
)	O
dbg_printf	function
(	O
_	O
(	O
"error: %s:%d\n"	pointer
)	O
,	O
__FILE__	O
,	O
__LINE__	O
)	O
;	O
goto	O
fail	O
;	O
}	O
tm	struct
.	O
tm_year	int
=	O
year	long
;	O
tm	struct
.	O
tm_mon	int
=	O
month	long
;	O
tm	struct
.	O
tm_mday	int
=	O
day	long
;	O
tm	struct
.	O
tm_hour	int
=	O
tm0	pointer
.	O
tm_hour	int
;	O
tm	struct
.	O
tm_min	int
=	O
tm0	pointer
.	O
tm_min	int
;	O
tm	struct
.	O
tm_sec	int
=	O
tm0	pointer
.	O
tm_sec	int
;	O
tm	struct
.	O
tm_isdst	int
=	O
tm0	pointer
.	O
tm_isdst	int
;	O
Start	long
=	O
mktime_z	function
(	O
tz	int
,	O
&	O
tm	struct
)	O
;	O
if	O
(	O
Start	long
==	O
(	O
time_t	long
)	O
-	O
1	int
)	O
{	O
if	O
(	O
pc	pointer
.	O
parse_datetime_debug	bool
)	O
dbg_printf	function
(	O
_	O
(	O
"error: adding relative date resulted "	pointer
"in an invalid date: '%s'\n"	pointer
)	O
,	O
debug_strfdatetime	function
(	O
&	O
tm	struct
,	O
&	O
pc	pointer
,	O
dbg_tm	array
,	O
sizeof	O
dbg_tm	array
)	O
)	O
;	O
goto	O
fail	O
;	O
}	O
if	O
(	O
pc	pointer
.	O
parse_datetime_debug	bool
)	O
{	O
dbg_printf	function
(	O
_	O
(	O
"after date adjustment "	pointer
"(%+"	pointer
PRIdMAX	O
" years, %+"	pointer
PRIdMAX	O
" months, "	pointer
"%+"	pointer
PRIdMAX	O
" days),\n"	pointer
)	O
,	O
pc	pointer
.	O
rel	struct
.	O
year	long
,	O
pc	pointer
.	O
rel	struct
.	O
month	long
,	O
pc	pointer
.	O
rel	struct
.	O
day	long
)	O
;	O
dbg_printf	function
(	O
_	O
(	O
"    new date/time = '%s'\n"	pointer
)	O
,	O
debug_strfdatetime	function
(	O
&	O
tm	struct
,	O
&	O
pc	pointer
,	O
dbg_tm	array
,	O
sizeof	O
dbg_tm	array
)	O
)	O
;	O
if	O
(	O
tm0	pointer
.	O
tm_isdst	int
!=	O
-	O
1	int
&&	O
tm	struct
.	O
tm_isdst	int
!=	O
tm0	pointer
.	O
tm_isdst	int
)	O
dbg_printf	function
(	O
_	O
(	O
"warning: daylight saving time changed after "	pointer
"date adjustment\n"	pointer
)	O
)	O
;	O
if	O
(	O
pc	pointer
.	O
rel	struct
.	O
day	long
==	O
0	int
&&	O
(	O
tm	struct
.	O
tm_mday	int
!=	O
day	long
||	O
(	O
pc	pointer
.	O
rel	struct
.	O
month	long
==	O
0	int
&&	O
tm	struct
.	O
tm_mon	int
!=	O
month	long
)	O
)	O
)	O
{	O
dbg_printf	function
(	O
_	O
(	O
"warning: month/year adjustment resulted in "	pointer
"shifted dates:\n"	pointer
)	O
)	O
;	O
char	O
tm_year_buf	array
[	O
TM_YEAR_BUFSIZE	int
]	O
;	O
dbg_printf	function
(	O
_	O
(	O
"     adjusted Y M D: %s %02d %02d\n"	pointer
)	O
,	O
tm_year_str	function
(	O
year	long
,	O
tm_year_buf	array
)	O
,	O
month	long
+	O
1	int
,	O
day	long
)	O
;	O
dbg_printf	function
(	O
_	O
(	O
"   normalized Y M D: %s %02d %02d\n"	pointer
)	O
,	O
tm_year_str	function
(	O
tm	struct
.	O
tm_year	int
,	O
tm_year_buf	array
)	O
,	O
tm	struct
.	O
tm_mon	int
+	O
1	int
,	O
tm	struct
.	O
tm_mday	int
)	O
;	O
}	O
}	O
}	O
if	O
(	O
pc	pointer
.	O
zones_seen	long
)	O
{	O
intmax_t	long
delta	long
=	O
pc	pointer
.	O
time_zone	int
,	O
t1	long
;	O
bool	bool
overflow	bool
=	O
false	int
;	O
long	O
int	O
utcoff	long
=	O
tm	struct
.	O
tm_gmtoff	long
;	O
overflow	bool
|=	O
INT_SUBTRACT_WRAPV	O
(	O
delta	long
,	O
utcoff	long
,	O
&	O
delta	long
)	O
;	O
overflow	bool
|=	O
INT_SUBTRACT_WRAPV	O
(	O
Start	long
,	O
delta	long
,	O
&	O
t1	long
)	O
;	O
if	O
(	O
overflow	bool
||	O
time_overflow	function
(	O
t1	long
)	O
)	O
{	O
if	O
(	O
pc	pointer
.	O
parse_datetime_debug	bool
)	O
dbg_printf	function
(	O
_	O
(	O
"error: timezone %d caused time_t overflow\n"	pointer
)	O
,	O
pc	pointer
.	O
time_zone	int
)	O
;	O
goto	O
fail	O
;	O
}	O
Start	long
=	O
t1	long
;	O
}	O
if	O
(	O
pc	pointer
.	O
parse_datetime_debug	bool
)	O
{	O
intmax_t	long
Starti	long
=	O
Start	long
;	O
dbg_printf	function
(	O
_	O
(	O
"'%s' = %"	pointer
PRIdMAX	O
" epoch-seconds\n"	pointer
)	O
,	O
debug_strfdatetime	function
(	O
&	O
tm	struct
,	O
&	O
pc	pointer
,	O
dbg_tm	array
,	O
sizeof	O
dbg_tm	array
)	O
,	O
Starti	long
)	O
;	O
}	O
{	O
intmax_t	long
orig_ns	long
=	O
pc	pointer
.	O
seconds	long
.	O
tv_nsec	long
;	O
intmax_t	long
sum_ns	long
=	O
orig_ns	long
+	O
pc	pointer
.	O
rel	struct
.	O
ns	long
;	O
int	O
normalized_ns	int
=	O
(	O
sum_ns	long
%	O
BILLION	int
+	O
BILLION	int
)	O
%	O
BILLION	int
;	O
int	O
d4	int
=	O
(	O
sum_ns	long
-	O
normalized_ns	int
)	O
/	O
BILLION	int
;	O
intmax_t	long
d1	long
,	O
t1	long
,	O
d2	long
,	O
t2	long
,	O
t3	long
,	O
t4	long
;	O
if	O
(	O
INT_MULTIPLY_WRAPV	O
(	O
pc	pointer
.	O
rel	struct
.	O
hour	long
,	O
60	int
*	O
60	int
,	O
&	O
d1	long
)	O
||	O
INT_ADD_WRAPV	O
(	O
Start	long
,	O
d1	long
,	O
&	O
t1	long
)	O
||	O
INT_MULTIPLY_WRAPV	O
(	O
pc	pointer
.	O
rel	struct
.	O
minutes	long
,	O
60	int
,	O
&	O
d2	long
)	O
||	O
INT_ADD_WRAPV	O
(	O
t1	long
,	O
d2	long
,	O
&	O
t2	long
)	O
||	O
INT_ADD_WRAPV	O
(	O
t2	long
,	O
pc	pointer
.	O
rel	struct
.	O
seconds	long
,	O
&	O
t3	long
)	O
||	O
INT_ADD_WRAPV	O
(	O
t3	long
,	O
d4	int
,	O
&	O
t4	long
)	O
||	O
time_overflow	function
(	O
t4	long
)	O
)	O
{	O
if	O
(	O
pc	pointer
.	O
parse_datetime_debug	bool
)	O
dbg_printf	function
(	O
_	O
(	O
"error: adding relative time caused an "	pointer
"overflow\n"	pointer
)	O
)	O
;	O
goto	O
fail	O
;	O
}	O
result	pointer
->	O
tv_sec	long
=	O
t4	long
;	O
result	pointer
->	O
tv_nsec	long
=	O
normalized_ns	int
;	O
if	O
(	O
pc	pointer
.	O
parse_datetime_debug	bool
&&	O
(	O
pc	pointer
.	O
rel	struct
.	O
hour	long
|	O
pc	pointer
.	O
rel	struct
.	O
minutes	long
|	O
pc	pointer
.	O
rel	struct
.	O
seconds	long
|	O
pc	pointer
.	O
rel	struct
.	O
ns	long
)	O
)	O
{	O
dbg_printf	function
(	O
_	O
(	O
"after time adjustment (%+"	pointer
PRIdMAX	O
" hours, "	pointer
"%+"	pointer
PRIdMAX	O
" minutes, "	pointer
"%+"	pointer
PRIdMAX	O
" seconds, %+d ns),\n"	pointer
)	O
,	O
pc	pointer
.	O
rel	struct
.	O
hour	long
,	O
pc	pointer
.	O
rel	struct
.	O
minutes	long
,	O
pc	pointer
.	O
rel	struct
.	O
seconds	long
,	O
pc	pointer
.	O
rel	struct
.	O
ns	long
)	O
;	O
dbg_printf	function
(	O
_	O
(	O
"    new time = %"	pointer
PRIdMAX	O
" epoch-seconds\n"	pointer
)	O
,	O
t4	long
)	O
;	O
struct	O
tm	struct
lmt	struct
;	O
if	O
(	O
tm	struct
.	O
tm_isdst	int
!=	O
-	O
1	int
&&	O
localtime_rz	function
(	O
tz	int
,	O
&	O
result	pointer
->	O
tv_sec	long
,	O
&	O
lmt	struct
)	O
&&	O
tm	struct
.	O
tm_isdst	int
!=	O
lmt	struct
.	O
tm_isdst	int
)	O
dbg_printf	function
(	O
_	O
(	O
"warning: daylight saving time changed after "	pointer
"time adjustment\n"	pointer
)	O
)	O
;	O
}	O
}	O
}	O
if	O
(	O
pc	pointer
.	O
parse_datetime_debug	bool
)	O
{	O
if	O
(	O
!	O
tzstring	pointer
)	O
dbg_printf	function
(	O
_	O
(	O
"timezone: system default\n"	pointer
)	O
)	O
;	O
else	O
if	O
(	O
STREQ	O
(	O
tzstring	pointer
,	O
"UTC0"	pointer
)	O
)	O
dbg_printf	function
(	O
_	O
(	O
"timezone: Universal Time\n"	pointer
)	O
)	O
;	O
else	O
dbg_printf	function
(	O
_	O
(	O
"timezone: TZ=\"%s\" environment value\n"	pointer
)	O
,	O
tzstring	pointer
)	O
;	O
intmax_t	long
sec	long
=	O
result	pointer
->	O
tv_sec	long
;	O
int	O
nsec	int
=	O
result	pointer
->	O
tv_nsec	long
;	O
dbg_printf	function
(	O
_	O
(	O
"final: %"	pointer
PRIdMAX	O
".%09d (epoch-seconds)\n"	pointer
)	O
,	O
sec	long
,	O
nsec	int
)	O
;	O
struct	O
tm	struct
gmt	struct
,	O
lmt	struct
;	O
bool	bool
got_utc	bool
=	O
!	O
!	O
gmtime_r	function
(	O
&	O
result	pointer
->	O
tv_sec	long
,	O
&	O
gmt	struct
)	O
;	O
if	O
(	O
got_utc	bool
)	O
dbg_printf	function
(	O
_	O
(	O
"final: %s (UTC)\n"	pointer
)	O
,	O
debug_strfdatetime	function
(	O
&	O
gmt	struct
,	O
NULL	O
,	O
dbg_tm	array
,	O
sizeof	O
dbg_tm	array
)	O
)	O
;	O
if	O
(	O
localtime_rz	function
(	O
tz	int
,	O
&	O
result	pointer
->	O
tv_sec	long
,	O
&	O
lmt	struct
)	O
)	O
{	O
bool	bool
got_utcoff	bool
=	O
true	int
;	O
long	O
int	O
utcoff	long
=	O
lmt	struct
.	O
tm_gmtoff	long
;	O
if	O
(	O
got_utcoff	bool
)	O
dbg_printf	function
(	O
_	O
(	O
"final: %s (UTC%s)\n"	pointer
)	O
,	O
debug_strfdatetime	function
(	O
&	O
lmt	struct
,	O
NULL	O
,	O
dbg_tm	array
,	O
sizeof	O
dbg_tm	array
)	O
,	O
time_zone_str	function
(	O
utcoff	long
,	O
time_zone_buf	array
)	O
)	O
;	O
else	O
dbg_printf	function
(	O
_	O
(	O
"final: %s (unknown time zone offset)\n"	pointer
)	O
,	O
debug_strfdatetime	function
(	O
&	O
lmt	struct
,	O
NULL	O
,	O
dbg_tm	array
,	O
sizeof	O
dbg_tm	array
)	O
)	O
;	O
}	O
}	O
ok	bool
=	O
true	int
;	O
fail	O
:	O
if	O
(	O
tz	int
!=	O
tzdefault	pointer
)	O
tzfree	function
(	O
tz	int
)	O
;	O
free	function
(	O
tz1alloc	pointer
)	O
;	O
return	O
ok	bool
;	O
}	O
