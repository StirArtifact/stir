int	O
hotlist_has_dot_dot	int
=	O
1	int
;	O
static	O
WListbox	struct
*	O
l_hotlist	pointer
;	O
static	O
WListbox	struct
*	O
l_movelist	pointer
;	O
static	O
Dlg_head	struct
*	O
hotlist_dlg	pointer
;	O
static	O
Dlg_head	struct
*	O
movelist_dlg	pointer
;	O
static	O
WLabel	struct
*	O
pname	pointer
,	O
*	O
pname_group	pointer
,	O
*	O
movelist_group	pointer
;	O
enum	O
HotListType	enum
{	O
HL_TYPE_GROUP	int
,	O
HL_TYPE_ENTRY	int
,	O
HL_TYPE_COMMENT	int
,	O
HL_TYPE_DOTDOT	int
}	O
;	O
static	O
struct	O
{	O
int	O
expanded	int
;	O
int	O
loaded	int
;	O
int	O
readonly	int
;	O
int	O
file_error	int
;	O
int	O
running	int
;	O
int	O
moving	int
;	O
int	O
modified	long
;	O
int	O
type	enum
;	O
}	O
hotlist_state	struct
;	O
static	O
struct	O
_hotlist_but	struct
{	O
int	O
ret_cmd	int
,	O
flags	enum
,	O
y	short
,	O
x	array
;	O
const	O
char	O
*	O
text	pointer
;	O
int	O
type	enum
;	O
}	O
hotlist_but	array
[	O
]	O
=	O
{	O
{	O
B_MOVE	O
,	O
NORMAL_BUTTON	int
,	O
1	int
,	O
42	int
,	O
N_	O
(	O
"&Move"	pointer
)	O
,	O
LIST_HOTLIST	int
}	O
,	O
{	O
B_REMOVE	O
,	O
NORMAL_BUTTON	int
,	O
1	int
,	O
30	int
,	O
N_	O
(	O
"&Remove"	pointer
)	O
,	O
LIST_HOTLIST	int
}	O
,	O
{	O
B_APPEND	O
,	O
NORMAL_BUTTON	int
,	O
1	int
,	O
15	int
,	O
N_	O
(	O
"&Append"	pointer
)	O
,	O
LIST_MOVELIST	int
}	O
,	O
{	O
B_INSERT	O
,	O
NORMAL_BUTTON	int
,	O
1	int
,	O
0	int
,	O
N_	O
(	O
"&Insert"	pointer
)	O
,	O
LIST_MOVELIST	int
}	O
,	O
{	O
B_NEW_ENTRY	O
,	O
NORMAL_BUTTON	int
,	O
1	int
,	O
15	int
,	O
N_	O
(	O
"New &Entry"	pointer
)	O
,	O
LIST_HOTLIST	int
}	O
,	O
{	O
B_NEW_GROUP	O
,	O
NORMAL_BUTTON	int
,	O
1	int
,	O
0	int
,	O
N_	O
(	O
"New &Group"	pointer
)	O
,	O
LIST_HOTLIST	int
}	O
,	O
{	O
B_CANCEL	int
,	O
NORMAL_BUTTON	int
,	O
0	int
,	O
53	int
,	O
N_	O
(	O
"&Cancel"	pointer
)	O
,	O
LIST_HOTLIST	int
|	O
LIST_VFSLIST	int
|	O
LIST_MOVELIST	int
}	O
,	O
{	O
B_UP_GROUP	O
,	O
NORMAL_BUTTON	int
,	O
0	int
,	O
42	int
,	O
N_	O
(	O
"&Up"	pointer
)	O
,	O
LIST_HOTLIST	int
|	O
LIST_MOVELIST	int
}	O
,	O
{	O
B_ADD_CURRENT	O
,	O
NORMAL_BUTTON	int
,	O
0	int
,	O
20	int
,	O
N_	O
(	O
"&Add current"	pointer
)	O
,	O
LIST_HOTLIST	int
}	O
,	O
{	O
B_REFRESH_VFS	O
,	O
NORMAL_BUTTON	int
,	O
0	int
,	O
43	int
,	O
N_	O
(	O
"&Refresh"	pointer
)	O
,	O
LIST_VFSLIST	int
}	O
,	O
{	O
B_FREE_ALL_VFS	O
,	O
NORMAL_BUTTON	int
,	O
0	int
,	O
20	int
,	O
N_	O
(	O
"Fr&ee VFSs now"	pointer
)	O
,	O
LIST_VFSLIST	int
}	O
,	O
{	O
B_ENTER	int
,	O
DEFPUSH_BUTTON	int
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Change &To"	pointer
)	O
,	O
LIST_HOTLIST	int
|	O
LIST_VFSLIST	int
|	O
LIST_MOVELIST	int
}	O
,	O
}	O
;	O
static	O
struct	O
hotlist	struct
{	O
enum	O
HotListType	enum
type	enum
;	O
char	O
*	O
directory	enum
;	O
char	O
*	O
label	pointer
;	O
struct	O
hotlist	struct
*	O
head	pointer
;	O
struct	O
hotlist	struct
*	O
up	pointer
;	O
struct	O
hotlist	struct
*	O
next	pointer
;	O
}	O
*	O
hotlist	struct
=	O
NULL	O
;	O
static	O
struct	O
hotlist	struct
*	O
current_group	pointer
;	O
static	O
void	O
init_movelist	function
(	O
int	O
,	O
struct	O
hotlist	struct
*	O
)	O
;	O
static	O
void	O
add_new_group_cmd	function
(	O
void	O
)	O
;	O
static	O
void	O
add_new_entry_cmd	function
(	O
void	O
)	O
;	O
static	O
void	O
remove_from_hotlist	function
(	O
struct	O
hotlist	struct
*	O
entry	pointer
)	O
;	O
static	O
void	O
load_hotlist	function
(	O
void	O
)	O
;	O
static	O
void	O
add_dotdot_to_list	function
(	O
void	O
)	O
;	O
static	O
void	O
hotlist_refresh	function
(	O
Dlg_head	struct
*	O
dlg	pointer
)	O
{	O
common_dialog_repaint	function
(	O
dlg	pointer
)	O
;	O
attrset	function
(	O
COLOR_NORMAL	O
)	O
;	O
draw_box	function
(	O
dlg	pointer
,	O
2	int
,	O
5	int
,	O
dlg	pointer
->	O
lines	pointer
-	O
(	O
hotlist_state	struct
.	O
moving	int
?	O
6	int
:	O
10	int
)	O
,	O
dlg	pointer
->	O
cols	int
-	O
(	O
UX	int
*	O
2	int
)	O
)	O
;	O
if	O
(	O
!	O
hotlist_state	struct
.	O
moving	int
)	O
draw_box	function
(	O
dlg	pointer
,	O
dlg	pointer
->	O
lines	pointer
-	O
8	int
,	O
5	int
,	O
3	int
,	O
dlg	pointer
->	O
cols	int
-	O
(	O
UX	int
*	O
2	int
)	O
)	O
;	O
}	O
static	O
inline	O
void	O
update_path_name	function
(	O
void	O
)	O
{	O
const	O
char	O
*	O
text	pointer
=	O
""	pointer
;	O
char	O
*	O
p	pointer
;	O
WListbox	struct
*	O
list	pointer
=	O
hotlist_state	struct
.	O
moving	int
?	O
l_movelist	pointer
:	O
l_hotlist	pointer
;	O
Dlg_head	struct
*	O
dlg	pointer
=	O
list	pointer
->	O
widget	pointer
.	O
parent	pointer
;	O
if	O
(	O
list	pointer
->	O
current	pointer
)	O
{	O
if	O
(	O
list	pointer
->	O
current	pointer
->	O
data	pointer
!=	O
0	int
)	O
{	O
struct	O
hotlist	struct
*	O
hlp	pointer
=	O
(	O
struct	O
hotlist	struct
*	O
)	O
list	pointer
->	O
current	pointer
->	O
data	pointer
;	O
if	O
(	O
hlp	pointer
->	O
type	enum
==	O
HL_TYPE_ENTRY	int
||	O
hlp	pointer
->	O
type	enum
==	O
HL_TYPE_DOTDOT	int
)	O
text	pointer
=	O
hlp	pointer
->	O
directory	enum
;	O
else	O
if	O
(	O
hlp	pointer
->	O
type	enum
==	O
HL_TYPE_GROUP	int
)	O
text	pointer
=	O
_	O
(	O
"Subgroup - press ENTER to see list"	pointer
)	O
;	O
}	O
else	O
{	O
text	pointer
=	O
list	pointer
->	O
current	pointer
->	O
text	pointer
;	O
}	O
}	O
if	O
(	O
!	O
hotlist_state	struct
.	O
moving	int
)	O
label_set_text	function
(	O
pname	pointer
,	O
name_trunc	function
(	O
text	pointer
,	O
dlg	pointer
->	O
cols	int
-	O
(	O
UX	int
*	O
2	int
+	O
4	int
)	O
)	O
)	O
;	O
p	pointer
=	O
g_strconcat	function
(	O
" "	pointer
,	O
current_group	pointer
->	O
label	pointer
,	O
" "	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
!	O
hotlist_state	struct
.	O
moving	int
)	O
label_set_text	function
(	O
pname_group	pointer
,	O
name_trunc	function
(	O
p	pointer
,	O
dlg	pointer
->	O
cols	int
-	O
(	O
UX	int
*	O
2	int
+	O
4	int
)	O
)	O
)	O
;	O
else	O
label_set_text	function
(	O
movelist_group	pointer
,	O
name_trunc	function
(	O
p	pointer
,	O
dlg	pointer
->	O
cols	int
-	O
(	O
UX	int
*	O
2	int
+	O
4	int
)	O
)	O
)	O
;	O
g_free	function
(	O
p	pointer
)	O
;	O
dlg_redraw	function
(	O
dlg	pointer
)	O
;	O
}	O
static	O
void	O
fill_listbox	function
(	O
void	O
)	O
{	O
struct	O
hotlist	struct
*	O
current	pointer
=	O
current_group	pointer
->	O
head	pointer
;	O
static	O
char	O
*	O
buf	pointer
;	O
static	O
int	O
buflen	int
;	O
if	O
(	O
!	O
buf	pointer
)	O
buf	pointer
=	O
g_malloc	function
(	O
buflen	int
=	O
1024	int
)	O
;	O
buf	pointer
[	O
0	int
]	O
=	O
'\0'	O
;	O
while	O
(	O
current	pointer
)	O
{	O
switch	O
(	O
current	pointer
->	O
type	enum
)	O
{	O
case	O
HL_TYPE_GROUP	int
:	O
{	O
CHECK_BUFFER	O
;	O
strcat	function
(	O
strcat	function
(	O
buf	pointer
,	O
"->"	pointer
)	O
,	O
current	pointer
->	O
label	pointer
)	O
;	O
if	O
(	O
hotlist_state	struct
.	O
moving	int
)	O
listbox_add_item	function
(	O
l_movelist	pointer
,	O
0	int
,	O
0	int
,	O
buf	pointer
,	O
current	pointer
)	O
;	O
else	O
listbox_add_item	function
(	O
l_hotlist	pointer
,	O
0	int
,	O
0	int
,	O
buf	pointer
,	O
current	pointer
)	O
;	O
}	O
break	O
;	O
case	O
HL_TYPE_DOTDOT	int
:	O
case	O
HL_TYPE_ENTRY	int
:	O
if	O
(	O
hotlist_state	struct
.	O
moving	int
)	O
listbox_add_item	function
(	O
l_movelist	pointer
,	O
0	int
,	O
0	int
,	O
current	pointer
->	O
label	pointer
,	O
current	pointer
)	O
;	O
else	O
listbox_add_item	function
(	O
l_hotlist	pointer
,	O
0	int
,	O
0	int
,	O
current	pointer
->	O
label	pointer
,	O
current	pointer
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
current	pointer
=	O
current	pointer
->	O
next	pointer
;	O
}	O
}	O
static	O
void	O
unlink_entry	function
(	O
struct	O
hotlist	struct
*	O
entry	pointer
)	O
{	O
struct	O
hotlist	struct
*	O
current	pointer
=	O
current_group	pointer
->	O
head	pointer
;	O
if	O
(	O
current	pointer
==	O
entry	pointer
)	O
current_group	pointer
->	O
head	pointer
=	O
entry	pointer
->	O
next	pointer
;	O
else	O
{	O
while	O
(	O
current	pointer
&&	O
current	pointer
->	O
next	pointer
!=	O
entry	pointer
)	O
current	pointer
=	O
current	pointer
->	O
next	pointer
;	O
if	O
(	O
current	pointer
)	O
current	pointer
->	O
next	pointer
=	O
entry	pointer
->	O
next	pointer
;	O
}	O
entry	pointer
->	O
next	pointer
=	O
entry	pointer
->	O
up	pointer
=	O
0	int
;	O
}	O
static	O
void	O
add_name_to_list	function
(	O
const	O
char	O
*	O
path	pointer
)	O
{	O
listbox_add_item	function
(	O
l_hotlist	pointer
,	O
0	int
,	O
0	int
,	O
path	pointer
,	O
0	int
)	O
;	O
}	O
static	O
int	O
hotlist_button_callback	function
(	O
int	O
action	int
)	O
{	O
switch	O
(	O
action	int
)	O
{	O
case	O
B_MOVE	O
:	O
{	O
struct	O
hotlist	struct
*	O
saved	pointer
=	O
current_group	pointer
;	O
struct	O
hotlist	struct
*	O
item	pointer
;	O
struct	O
hotlist	struct
*	O
moveto_item	pointer
=	O
0	int
;	O
struct	O
hotlist	struct
*	O
moveto_group	pointer
=	O
0	int
;	O
int	O
ret	int
;	O
if	O
(	O
!	O
l_hotlist	pointer
->	O
current	pointer
)	O
return	O
MSG_NOT_HANDLED	int
;	O
item	pointer
=	O
l_hotlist	pointer
->	O
current	pointer
->	O
data	pointer
;	O
hotlist_state	struct
.	O
moving	int
=	O
1	int
;	O
init_movelist	function
(	O
LIST_MOVELIST	int
,	O
item	pointer
)	O
;	O
run_dlg	function
(	O
movelist_dlg	pointer
)	O
;	O
ret	int
=	O
movelist_dlg	pointer
->	O
ret_value	int
;	O
hotlist_state	struct
.	O
moving	int
=	O
0	int
;	O
if	O
(	O
l_movelist	pointer
->	O
current	pointer
)	O
moveto_item	pointer
=	O
l_movelist	pointer
->	O
current	pointer
->	O
data	pointer
;	O
moveto_group	pointer
=	O
current_group	pointer
;	O
destroy_dlg	function
(	O
movelist_dlg	pointer
)	O
;	O
current_group	pointer
=	O
saved	pointer
;	O
if	O
(	O
ret	int
==	O
B_CANCEL	int
)	O
return	O
MSG_NOT_HANDLED	int
;	O
if	O
(	O
moveto_item	pointer
==	O
item	pointer
)	O
return	O
MSG_NOT_HANDLED	int
;	O
unlink_entry	function
(	O
item	pointer
)	O
;	O
listbox_remove_current	function
(	O
l_hotlist	pointer
,	O
1	int
)	O
;	O
item	pointer
->	O
up	pointer
=	O
moveto_group	pointer
;	O
if	O
(	O
!	O
moveto_group	pointer
->	O
head	pointer
)	O
moveto_group	pointer
->	O
head	pointer
=	O
item	pointer
;	O
else	O
if	O
(	O
!	O
moveto_item	pointer
)	O
{	O
struct	O
hotlist	struct
*	O
p	pointer
=	O
moveto_group	pointer
->	O
head	pointer
;	O
while	O
(	O
p	pointer
->	O
next	pointer
)	O
p	pointer
=	O
p	pointer
->	O
next	pointer
;	O
p	pointer
->	O
next	pointer
=	O
item	pointer
;	O
}	O
else	O
if	O
(	O
ret	int
==	O
B_ENTER	int
||	O
ret	int
==	O
B_APPEND	O
)	O
if	O
(	O
!	O
moveto_item	pointer
->	O
next	pointer
)	O
moveto_item	pointer
->	O
next	pointer
=	O
item	pointer
;	O
else	O
{	O
item	pointer
->	O
next	pointer
=	O
moveto_item	pointer
->	O
next	pointer
;	O
moveto_item	pointer
->	O
next	pointer
=	O
item	pointer
;	O
}	O
else	O
if	O
(	O
moveto_group	pointer
->	O
head	pointer
==	O
moveto_item	pointer
)	O
{	O
moveto_group	pointer
->	O
head	pointer
=	O
item	pointer
;	O
item	pointer
->	O
next	pointer
=	O
moveto_item	pointer
;	O
}	O
else	O
{	O
struct	O
hotlist	struct
*	O
p	pointer
=	O
moveto_group	pointer
->	O
head	pointer
;	O
while	O
(	O
p	pointer
->	O
next	pointer
!=	O
moveto_item	pointer
)	O
p	pointer
=	O
p	pointer
->	O
next	pointer
;	O
item	pointer
->	O
next	pointer
=	O
p	pointer
->	O
next	pointer
;	O
p	pointer
->	O
next	pointer
=	O
item	pointer
;	O
}	O
listbox_remove_list	function
(	O
l_hotlist	pointer
)	O
;	O
fill_listbox	function
(	O
)	O
;	O
repaint_screen	function
(	O
)	O
;	O
hotlist_state	struct
.	O
modified	long
=	O
1	int
;	O
return	O
MSG_NOT_HANDLED	int
;	O
break	O
;	O
}	O
case	O
B_REMOVE	O
:	O
if	O
(	O
l_hotlist	pointer
->	O
current	pointer
&&	O
l_hotlist	pointer
->	O
current	pointer
->	O
data	pointer
)	O
remove_from_hotlist	function
(	O
l_hotlist	pointer
->	O
current	pointer
->	O
data	pointer
)	O
;	O
return	O
MSG_NOT_HANDLED	int
;	O
break	O
;	O
case	O
B_NEW_GROUP	O
:	O
add_new_group_cmd	function
(	O
)	O
;	O
return	O
MSG_NOT_HANDLED	int
;	O
break	O
;	O
case	O
B_ADD_CURRENT	O
:	O
add2hotlist_cmd	function
(	O
)	O
;	O
return	O
MSG_NOT_HANDLED	int
;	O
break	O
;	O
case	O
B_NEW_ENTRY	O
:	O
add_new_entry_cmd	function
(	O
)	O
;	O
return	O
MSG_NOT_HANDLED	int
;	O
break	O
;	O
case	O
B_ENTER	int
:	O
{	O
WListbox	struct
*	O
list	pointer
=	O
hotlist_state	struct
.	O
moving	int
?	O
l_movelist	pointer
:	O
l_hotlist	pointer
;	O
if	O
(	O
list	pointer
->	O
current	pointer
)	O
{	O
if	O
(	O
list	pointer
->	O
current	pointer
->	O
data	pointer
)	O
{	O
struct	O
hotlist	struct
*	O
hlp	pointer
=	O
(	O
struct	O
hotlist	struct
*	O
)	O
list	pointer
->	O
current	pointer
->	O
data	pointer
;	O
if	O
(	O
hlp	pointer
->	O
type	enum
==	O
HL_TYPE_ENTRY	int
)	O
return	O
MSG_HANDLED	int
;	O
else	O
if	O
(	O
hlp	pointer
->	O
type	enum
==	O
HL_TYPE_DOTDOT	int
)	O
{	O
;	O
}	O
else	O
{	O
listbox_remove_list	function
(	O
list	pointer
)	O
;	O
current_group	pointer
=	O
hlp	pointer
;	O
fill_listbox	function
(	O
)	O
;	O
return	O
MSG_NOT_HANDLED	int
;	O
}	O
}	O
else	O
return	O
MSG_HANDLED	int
;	O
}	O
}	O
case	O
B_UP_GROUP	O
:	O
{	O
WListbox	struct
*	O
list	pointer
=	O
hotlist_state	struct
.	O
moving	int
?	O
l_movelist	pointer
:	O
l_hotlist	pointer
;	O
listbox_remove_list	function
(	O
list	pointer
)	O
;	O
current_group	pointer
=	O
current_group	pointer
->	O
up	pointer
;	O
fill_listbox	function
(	O
)	O
;	O
return	O
MSG_NOT_HANDLED	int
;	O
break	O
;	O
}	O
case	O
B_FREE_ALL_VFS	O
:	O
vfs_expire	function
(	O
1	int
)	O
;	O
case	O
B_REFRESH_VFS	O
:	O
listbox_remove_list	function
(	O
l_hotlist	pointer
)	O
;	O
listbox_add_item	function
(	O
l_hotlist	pointer
,	O
0	int
,	O
0	int
,	O
home_dir	pointer
,	O
0	int
)	O
;	O
vfs_fill_names	function
(	O
add_name_to_list	function
)	O
;	O
return	O
MSG_NOT_HANDLED	int
;	O
default	O
:	O
return	O
MSG_HANDLED	int
;	O
break	O
;	O
}	O
}	O
static	O
cb_ret_t	enum
hotlist_callback	function
(	O
Dlg_head	struct
*	O
h	pointer
,	O
dlg_msg_t	enum
msg	pointer
,	O
int	O
parm	int
)	O
{	O
switch	O
(	O
msg	pointer
)	O
{	O
case	O
DLG_DRAW	int
:	O
hotlist_refresh	function
(	O
h	pointer
)	O
;	O
return	O
MSG_HANDLED	int
;	O
case	O
DLG_UNHANDLED_KEY	int
:	O
switch	O
(	O
parm	int
)	O
{	O
case	O
KEY_M_CTRL	int
|	O
'\n'	O
:	O
goto	O
l1	O
;	O
case	O
'\n'	O
:	O
case	O
KEY_ENTER	int
:	O
case	O
KEY_RIGHT	int
:	O
if	O
(	O
hotlist_button_callback	function
(	O
B_ENTER	int
)	O
)	O
{	O
h	pointer
->	O
ret_value	int
=	O
B_ENTER	int
;	O
dlg_stop	function
(	O
h	pointer
)	O
;	O
}	O
;	O
return	O
MSG_HANDLED	int
;	O
break	O
;	O
case	O
KEY_LEFT	int
:	O
if	O
(	O
hotlist_state	struct
.	O
type	enum
!=	O
LIST_VFSLIST	int
)	O
return	O
!	O
hotlist_button_callback	function
(	O
B_UP_GROUP	O
)	O
;	O
else	O
return	O
MSG_NOT_HANDLED	int
;	O
break	O
;	O
case	O
KEY_DC	int
:	O
if	O
(	O
!	O
hotlist_state	struct
.	O
moving	int
)	O
{	O
hotlist_button_callback	function
(	O
B_REMOVE	O
)	O
;	O
return	O
MSG_HANDLED	int
;	O
}	O
break	O
;	O
l1	O
:	O
case	O
ALT	O
(	O
'\n'	O
)	O
:	O
case	O
ALT	O
(	O
'\r'	O
)	O
:	O
if	O
(	O
!	O
hotlist_state	struct
.	O
moving	int
)	O
{	O
if	O
(	O
l_hotlist	pointer
->	O
current	pointer
)	O
{	O
if	O
(	O
l_hotlist	pointer
->	O
current	pointer
->	O
data	pointer
)	O
{	O
struct	O
hotlist	struct
*	O
hlp	pointer
=	O
(	O
struct	O
hotlist	struct
*	O
)	O
l_hotlist	pointer
->	O
current	pointer
->	O
data	pointer
;	O
if	O
(	O
hlp	pointer
->	O
type	enum
==	O
HL_TYPE_ENTRY	int
)	O
{	O
char	O
*	O
tmp	pointer
=	O
g_strconcat	function
(	O
"cd "	pointer
,	O
hlp	pointer
->	O
directory	enum
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
stuff	function
(	O
cmdline	pointer
,	O
tmp	pointer
,	O
0	int
)	O
;	O
g_free	function
(	O
tmp	pointer
)	O
;	O
dlg_stop	function
(	O
h	pointer
)	O
;	O
h	pointer
->	O
ret_value	int
=	O
B_CANCEL	int
;	O
return	O
MSG_HANDLED	int
;	O
}	O
}	O
}	O
}	O
return	O
MSG_HANDLED	int
;	O
}	O
return	O
MSG_NOT_HANDLED	int
;	O
case	O
DLG_POST_KEY	int
:	O
if	O
(	O
hotlist_state	struct
.	O
moving	int
)	O
dlg_select_widget	function
(	O
l_movelist	pointer
)	O
;	O
else	O
dlg_select_widget	function
(	O
l_hotlist	pointer
)	O
;	O
case	O
DLG_INIT	int
:	O
attrset	function
(	O
MENU_ENTRY_COLOR	O
)	O
;	O
update_path_name	function
(	O
)	O
;	O
return	O
MSG_HANDLED	int
;	O
default	O
:	O
return	O
default_dlg_callback	function
(	O
h	pointer
,	O
msg	pointer
,	O
parm	int
)	O
;	O
}	O
}	O
static	O
int	O
l_call	function
(	O
WListbox	struct
*	O
list	pointer
)	O
{	O
Dlg_head	struct
*	O
dlg	pointer
=	O
list	pointer
->	O
widget	pointer
.	O
parent	pointer
;	O
if	O
(	O
list	pointer
->	O
current	pointer
)	O
{	O
if	O
(	O
list	pointer
->	O
current	pointer
->	O
data	pointer
)	O
{	O
struct	O
hotlist	struct
*	O
hlp	pointer
=	O
(	O
struct	O
hotlist	struct
*	O
)	O
list	pointer
->	O
current	pointer
->	O
data	pointer
;	O
if	O
(	O
hlp	pointer
->	O
type	enum
==	O
HL_TYPE_ENTRY	int
)	O
{	O
dlg	pointer
->	O
ret_value	int
=	O
B_ENTER	int
;	O
dlg_stop	function
(	O
dlg	pointer
)	O
;	O
return	O
LISTBOX_DONE	int
;	O
}	O
else	O
{	O
hotlist_button_callback	function
(	O
B_ENTER	int
)	O
;	O
hotlist_callback	function
(	O
dlg	pointer
,	O
DLG_POST_KEY	int
,	O
'\n'	O
)	O
;	O
return	O
LISTBOX_CONT	int
;	O
}	O
}	O
else	O
{	O
dlg	pointer
->	O
ret_value	int
=	O
B_ENTER	int
;	O
dlg_stop	function
(	O
dlg	pointer
)	O
;	O
return	O
LISTBOX_DONE	int
;	O
}	O
}	O
hotlist_button_callback	function
(	O
B_UP_GROUP	O
)	O
;	O
hotlist_callback	function
(	O
dlg	pointer
,	O
DLG_POST_KEY	int
,	O
'u'	O
)	O
;	O
return	O
LISTBOX_CONT	int
;	O
}	O
static	O
int	O
init_i18n_stuff	function
(	O
int	O
list_type	int
,	O
int	O
cols	int
)	O
{	O
register	O
int	O
i	array
;	O
static	O
const	O
char	O
*	O
cancel_but	pointer
=	O
N_	O
(	O
"&Cancel"	pointer
)	O
;	O
static	O
int	O
hotlist_i18n_flag	int
=	O
0	int
;	O
if	O
(	O
!	O
hotlist_i18n_flag	int
)	O
{	O
i	array
=	O
sizeof	O
(	O
hotlist_but	array
)	O
/	O
sizeof	O
(	O
hotlist_but	array
[	O
0	int
]	O
)	O
;	O
while	O
(	O
i	array
--	O
)	O
hotlist_but	array
[	O
i	array
]	O
.	O
text	pointer
=	O
_	O
(	O
hotlist_but	array
[	O
i	array
]	O
.	O
text	pointer
)	O
;	O
cancel_but	pointer
=	O
_	O
(	O
cancel_but	pointer
)	O
;	O
hotlist_i18n_flag	int
=	O
1	int
;	O
}	O
{	O
int	O
len	int
[	O
2	int
]	O
,	O
count	int
[	O
2	int
]	O
;	O
int	O
cur_x	array
[	O
2	int
]	O
,	O
row	int
;	O
i	array
=	O
sizeof	O
(	O
hotlist_but	array
)	O
/	O
sizeof	O
(	O
hotlist_but	array
[	O
0	int
]	O
)	O
;	O
len	int
[	O
0	int
]	O
=	O
len	int
[	O
1	int
]	O
=	O
count	int
[	O
0	int
]	O
=	O
count	int
[	O
1	int
]	O
=	O
0	int
;	O
while	O
(	O
i	array
--	O
)	O
{	O
if	O
(	O
!	O
(	O
hotlist_but	array
[	O
i	array
]	O
.	O
type	enum
&	O
list_type	int
)	O
)	O
continue	O
;	O
row	int
=	O
hotlist_but	array
[	O
i	array
]	O
.	O
y	short
;	O
++	O
count	int
[	O
row	int
]	O
;	O
len	int
[	O
row	int
]	O
+=	O
strlen	function
(	O
hotlist_but	array
[	O
i	array
]	O
.	O
text	pointer
)	O
+	O
5	int
;	O
if	O
(	O
hotlist_but	array
[	O
i	array
]	O
.	O
flags	enum
==	O
DEFPUSH_BUTTON	int
)	O
len	int
[	O
row	int
]	O
+=	O
2	int
;	O
}	O
len	int
[	O
0	int
]	O
-=	O
2	int
;	O
len	int
[	O
1	int
]	O
-=	O
2	int
;	O
cols	int
=	O
max	long
(	O
cols	int
,	O
max	long
(	O
len	int
[	O
0	int
]	O
,	O
len	int
[	O
1	int
]	O
)	O
)	O
;	O
cur_x	array
[	O
0	int
]	O
=	O
cur_x	array
[	O
1	int
]	O
=	O
0	int
;	O
i	array
=	O
sizeof	O
(	O
hotlist_but	array
)	O
/	O
sizeof	O
(	O
hotlist_but	array
[	O
0	int
]	O
)	O
;	O
while	O
(	O
i	array
--	O
)	O
{	O
if	O
(	O
!	O
(	O
hotlist_but	array
[	O
i	array
]	O
.	O
type	enum
&	O
list_type	int
)	O
)	O
continue	O
;	O
row	int
=	O
hotlist_but	array
[	O
i	array
]	O
.	O
y	short
;	O
if	O
(	O
hotlist_but	array
[	O
i	array
]	O
.	O
x	array
!=	O
0	int
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
hotlist_but	array
[	O
i	array
]	O
.	O
text	pointer
,	O
cancel_but	pointer
)	O
)	O
hotlist_but	array
[	O
i	array
]	O
.	O
x	array
=	O
cols	int
-	O
strlen	function
(	O
hotlist_but	array
[	O
i	array
]	O
.	O
text	pointer
)	O
-	O
13	int
;	O
else	O
hotlist_but	array
[	O
i	array
]	O
.	O
x	array
=	O
cur_x	array
[	O
row	int
]	O
;	O
}	O
cur_x	array
[	O
row	int
]	O
+=	O
strlen	function
(	O
hotlist_but	array
[	O
i	array
]	O
.	O
text	pointer
)	O
+	O
2	int
+	O
(	O
hotlist_but	array
[	O
i	array
]	O
.	O
flags	enum
==	O
DEFPUSH_BUTTON	int
?	O
5	int
:	O
3	int
)	O
;	O
}	O
}	O
return	O
cols	int
;	O
}	O
static	O
void	O
init_hotlist	function
(	O
int	O
list_type	int
)	O
{	O
size_t	long
i	array
;	O
const	O
char	O
*	O
title	pointer
,	O
*	O
help_node	pointer
;	O
int	O
hotlist_cols	int
;	O
hotlist_cols	int
=	O
init_i18n_stuff	function
(	O
list_type	int
,	O
COLS	O
-	O
6	int
)	O
;	O
do_refresh	function
(	O
)	O
;	O
hotlist_state	struct
.	O
expanded	int
=	O
GetPrivateProfileInt	function
(	O
"HotlistConfig"	pointer
,	O
"expanded_view_of_groups"	pointer
,	O
0	int
,	O
profile_name	pointer
)	O
;	O
if	O
(	O
list_type	int
==	O
LIST_VFSLIST	int
)	O
{	O
title	pointer
=	O
_	O
(	O
"Active VFS directories"	pointer
)	O
;	O
help_node	pointer
=	O
"[vfshot]"	pointer
;	O
}	O
else	O
{	O
title	pointer
=	O
_	O
(	O
"Directory hotlist"	pointer
)	O
;	O
help_node	pointer
=	O
"[Hotlist]"	pointer
;	O
}	O
hotlist_dlg	pointer
=	O
create_dlg	function
(	O
0	int
,	O
0	int
,	O
LINES	O
-	O
2	int
,	O
hotlist_cols	int
,	O
dialog_colors	array
,	O
hotlist_callback	function
,	O
help_node	pointer
,	O
title	pointer
,	O
DLG_CENTER	O
|	O
DLG_REVERSE	O
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
BUTTONS	O
;	O
i	array
++	O
)	O
{	O
if	O
(	O
hotlist_but	array
[	O
i	array
]	O
.	O
type	enum
&	O
list_type	int
)	O
add_widget	function
(	O
hotlist_dlg	pointer
,	O
button_new	function
(	O
BY	O
+	O
hotlist_but	array
[	O
i	array
]	O
.	O
y	short
,	O
BX	O
+	O
hotlist_but	array
[	O
i	array
]	O
.	O
x	array
,	O
hotlist_but	array
[	O
i	array
]	O
.	O
ret_cmd	int
,	O
hotlist_but	array
[	O
i	array
]	O
.	O
flags	enum
,	O
hotlist_but	array
[	O
i	array
]	O
.	O
text	pointer
,	O
hotlist_button_callback	function
)	O
)	O
;	O
}	O
pname	pointer
=	O
label_new	function
(	O
UY	int
-	O
11	int
+	O
LINES	O
,	O
UX	int
+	O
2	int
,	O
""	pointer
)	O
;	O
add_widget	function
(	O
hotlist_dlg	pointer
,	O
pname	pointer
)	O
;	O
if	O
(	O
!	O
hotlist_state	struct
.	O
moving	int
)	O
{	O
add_widget	function
(	O
hotlist_dlg	pointer
,	O
label_new	function
(	O
UY	int
-	O
12	int
+	O
LINES	O
,	O
UX	int
+	O
1	int
,	O
_	O
(	O
" Directory path "	pointer
)	O
)	O
)	O
;	O
pname_group	pointer
=	O
label_new	function
(	O
UY	int
,	O
UX	int
+	O
1	int
,	O
_	O
(	O
" Directory label "	pointer
)	O
)	O
;	O
add_widget	function
(	O
hotlist_dlg	pointer
,	O
pname_group	pointer
)	O
;	O
}	O
l_hotlist	pointer
=	O
listbox_new	function
(	O
UY	int
+	O
1	int
,	O
UX	int
+	O
1	int
,	O
COLS	O
-	O
2	int
*	O
UX	int
-	O
8	int
,	O
LINES	O
-	O
14	int
,	O
l_call	function
)	O
;	O
if	O
(	O
list_type	int
==	O
LIST_VFSLIST	int
)	O
{	O
listbox_add_item	function
(	O
l_hotlist	pointer
,	O
0	int
,	O
0	int
,	O
home_dir	pointer
,	O
0	int
)	O
;	O
vfs_fill_names	function
(	O
add_name_to_list	function
)	O
;	O
}	O
else	O
fill_listbox	function
(	O
)	O
;	O
add_widget	function
(	O
hotlist_dlg	pointer
,	O
l_hotlist	pointer
)	O
;	O
}	O
static	O
void	O
init_movelist	function
(	O
int	O
list_type	int
,	O
struct	O
hotlist	struct
*	O
item	pointer
)	O
{	O
size_t	long
i	array
;	O
char	O
*	O
hdr	pointer
=	O
g_strdup_printf	function
(	O
_	O
(	O
"Moving %s"	pointer
)	O
,	O
item	pointer
->	O
label	pointer
)	O
;	O
int	O
movelist_cols	int
=	O
init_i18n_stuff	function
(	O
list_type	int
,	O
COLS	O
-	O
6	int
)	O
;	O
do_refresh	function
(	O
)	O
;	O
movelist_dlg	pointer
=	O
create_dlg	function
(	O
0	int
,	O
0	int
,	O
LINES	O
-	O
6	int
,	O
movelist_cols	int
,	O
dialog_colors	array
,	O
hotlist_callback	function
,	O
"[Hotlist]"	pointer
,	O
hdr	pointer
,	O
DLG_CENTER	O
|	O
DLG_REVERSE	O
)	O
;	O
g_free	function
(	O
hdr	pointer
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
BUTTONS	O
;	O
i	array
++	O
)	O
{	O
if	O
(	O
hotlist_but	array
[	O
i	array
]	O
.	O
type	enum
&	O
list_type	int
)	O
add_widget	function
(	O
movelist_dlg	pointer
,	O
button_new	function
(	O
BY	O
-	O
4	int
+	O
hotlist_but	array
[	O
i	array
]	O
.	O
y	short
,	O
BX	O
+	O
hotlist_but	array
[	O
i	array
]	O
.	O
x	array
,	O
hotlist_but	array
[	O
i	array
]	O
.	O
ret_cmd	int
,	O
hotlist_but	array
[	O
i	array
]	O
.	O
flags	enum
,	O
hotlist_but	array
[	O
i	array
]	O
.	O
text	pointer
,	O
hotlist_button_callback	function
)	O
)	O
;	O
}	O
movelist_group	pointer
=	O
label_new	function
(	O
UY	int
,	O
UX	int
+	O
1	int
,	O
_	O
(	O
" Directory label "	pointer
)	O
)	O
;	O
add_widget	function
(	O
movelist_dlg	pointer
,	O
movelist_group	pointer
)	O
;	O
l_movelist	pointer
=	O
listbox_new	function
(	O
UY	int
+	O
1	int
,	O
UX	int
+	O
1	int
,	O
movelist_dlg	pointer
->	O
cols	int
-	O
2	int
*	O
UX	int
-	O
2	int
,	O
movelist_dlg	pointer
->	O
lines	pointer
-	O
8	int
,	O
l_call	function
)	O
;	O
fill_listbox	function
(	O
)	O
;	O
add_widget	function
(	O
movelist_dlg	pointer
,	O
l_movelist	pointer
)	O
;	O
}	O
static	O
void	O
hotlist_done	function
(	O
void	O
)	O
{	O
destroy_dlg	function
(	O
hotlist_dlg	pointer
)	O
;	O
l_hotlist	pointer
=	O
NULL	O
;	O
if	O
(	O
0	int
)	O
update_panels	function
(	O
UP_OPTIMIZE	int
,	O
UP_KEEPSEL	O
)	O
;	O
repaint_screen	function
(	O
)	O
;	O
}	O
static	O
inline	O
char	O
*	O
find_group_section	function
(	O
struct	O
hotlist	struct
*	O
grp	pointer
)	O
{	O
return	O
g_strconcat	function
(	O
grp	pointer
->	O
directory	enum
,	O
".Group"	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
enum	O
{	O
HL_BEFORE_CURRENT	int
=	O
1	int
,	O
HL_AFTER_CURRENT	int
=	O
2	int
}	O
;	O
static	O
struct	O
hotlist	struct
*	O
add2hotlist	function
(	O
char	O
*	O
label	pointer
,	O
char	O
*	O
directory	enum
,	O
enum	O
HotListType	enum
type	enum
,	O
int	O
pos	pointer
)	O
{	O
struct	O
hotlist	struct
*	O
new	pointer
;	O
struct	O
hotlist	struct
*	O
current	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
current_group	pointer
)	O
load_hotlist	function
(	O
)	O
;	O
if	O
(	O
l_hotlist	pointer
&&	O
l_hotlist	pointer
->	O
current	pointer
)	O
{	O
current	pointer
=	O
l_hotlist	pointer
->	O
current	pointer
->	O
data	pointer
;	O
if	O
(	O
current	pointer
->	O
type	enum
==	O
HL_TYPE_DOTDOT	int
)	O
pos	pointer
=	O
HL_AFTER_CURRENT	int
;	O
}	O
new	pointer
=	O
new_hotlist	O
(	O
)	O
;	O
new	pointer
->	O
type	enum
=	O
type	enum
;	O
new	pointer
->	O
label	pointer
=	O
label	pointer
;	O
new	pointer
->	O
directory	enum
=	O
directory	enum
;	O
new	pointer
->	O
up	pointer
=	O
current_group	pointer
;	O
if	O
(	O
type	enum
==	O
HL_TYPE_GROUP	int
)	O
{	O
current_group	pointer
=	O
new	pointer
;	O
add_dotdot_to_list	function
(	O
)	O
;	O
current_group	pointer
=	O
new	pointer
->	O
up	pointer
;	O
}	O
if	O
(	O
!	O
current_group	pointer
->	O
head	pointer
)	O
{	O
current_group	pointer
->	O
head	pointer
=	O
new	pointer
;	O
}	O
else	O
if	O
(	O
pos	pointer
==	O
HL_AFTER_CURRENT	int
)	O
{	O
new	pointer
->	O
next	pointer
=	O
current	pointer
->	O
next	pointer
;	O
current	pointer
->	O
next	pointer
=	O
new	pointer
;	O
}	O
else	O
if	O
(	O
pos	pointer
==	O
HL_BEFORE_CURRENT	int
&&	O
current	pointer
==	O
current_group	pointer
->	O
head	pointer
)	O
{	O
new	pointer
->	O
next	pointer
=	O
current	pointer
;	O
current_group	pointer
->	O
head	pointer
=	O
new	pointer
;	O
}	O
else	O
if	O
(	O
pos	pointer
==	O
HL_BEFORE_CURRENT	int
)	O
{	O
struct	O
hotlist	struct
*	O
p	pointer
=	O
current_group	pointer
->	O
head	pointer
;	O
while	O
(	O
p	pointer
->	O
next	pointer
!=	O
current	pointer
)	O
p	pointer
=	O
p	pointer
->	O
next	pointer
;	O
new	pointer
->	O
next	pointer
=	O
current	pointer
;	O
p	pointer
->	O
next	pointer
=	O
new	pointer
;	O
}	O
else	O
{	O
struct	O
hotlist	struct
*	O
p	pointer
=	O
current_group	pointer
->	O
head	pointer
;	O
while	O
(	O
p	pointer
->	O
next	pointer
)	O
p	pointer
=	O
p	pointer
->	O
next	pointer
;	O
p	pointer
->	O
next	pointer
=	O
new	pointer
;	O
}	O
if	O
(	O
hotlist_state	struct
.	O
running	int
&&	O
type	enum
!=	O
HL_TYPE_COMMENT	int
&&	O
type	enum
!=	O
HL_TYPE_DOTDOT	int
)	O
{	O
if	O
(	O
type	enum
==	O
HL_TYPE_GROUP	int
)	O
{	O
char	O
*	O
lbl	pointer
=	O
g_strconcat	function
(	O
"->"	pointer
,	O
new	pointer
->	O
label	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
listbox_add_item	function
(	O
l_hotlist	pointer
,	O
pos	pointer
,	O
0	int
,	O
lbl	pointer
,	O
new	pointer
)	O
;	O
g_free	function
(	O
lbl	pointer
)	O
;	O
}	O
else	O
listbox_add_item	function
(	O
l_hotlist	pointer
,	O
pos	pointer
,	O
0	int
,	O
new	pointer
->	O
label	pointer
,	O
new	pointer
)	O
;	O
listbox_select_entry	function
(	O
l_hotlist	pointer
,	O
l_hotlist	pointer
->	O
current	pointer
)	O
;	O
}	O
return	O
new	pointer
;	O
}	O
static	O
void	O
add_widgets_i18n	function
(	O
QuickWidget	struct
*	O
qw	pointer
,	O
int	O
len	int
)	O
{	O
int	O
i	array
,	O
l	pointer
[	O
3	int
]	O
,	O
space	int
,	O
cur_x	array
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
3	int
;	O
i	array
++	O
)	O
{	O
qw	pointer
[	O
i	array
]	O
.	O
text	pointer
=	O
_	O
(	O
qw	pointer
[	O
i	array
]	O
.	O
text	pointer
)	O
;	O
l	pointer
[	O
i	array
]	O
=	O
strlen	function
(	O
qw	pointer
[	O
i	array
]	O
.	O
text	pointer
)	O
+	O
3	int
;	O
}	O
space	int
=	O
(	O
len	int
-	O
4	int
-	O
l	pointer
[	O
0	int
]	O
-	O
l	pointer
[	O
1	int
]	O
-	O
l	pointer
[	O
2	int
]	O
)	O
/	O
4	int
;	O
for	O
(	O
cur_x	array
=	O
2	int
+	O
space	int
,	O
i	array
=	O
3	int
;	O
i	array
--	O
;	O
cur_x	array
+=	O
l	pointer
[	O
i	array
]	O
+	O
space	int
)	O
{	O
qw	pointer
[	O
i	array
]	O
.	O
relative_x	int
=	O
cur_x	array
;	O
qw	pointer
[	O
i	array
]	O
.	O
x_divisions	int
=	O
len	int
;	O
}	O
}	O
static	O
int	O
add_new_entry_input	function
(	O
const	O
char	O
*	O
header	pointer
,	O
const	O
char	O
*	O
text1	pointer
,	O
const	O
char	O
*	O
text2	pointer
,	O
const	O
char	O
*	O
help	pointer
,	O
char	O
*	O
*	O
r1	pointer
,	O
char	O
*	O
*	O
r2	pointer
)	O
{	O
QuickDialog	struct
Quick_input	struct
;	O
static	O
QuickWidget	struct
quick_widgets	array
[	O
]	O
=	O
{	O
{	O
quick_button	int
,	O
55	int
,	O
80	int
,	O
RELATIVE_Y_BUTTONS	int
,	O
0	int
,	O
N_	O
(	O
"&Cancel"	pointer
)	O
,	O
0	int
,	O
B_CANCEL	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_button	int
,	O
30	int
,	O
80	int
,	O
RELATIVE_Y_BUTTONS	int
,	O
0	int
,	O
N_	O
(	O
"&Insert"	pointer
)	O
,	O
0	int
,	O
B_INSERT	O
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_button	int
,	O
10	int
,	O
80	int
,	O
RELATIVE_Y_BUTTONS	int
,	O
0	int
,	O
N_	O
(	O
"&Append"	pointer
)	O
,	O
0	int
,	O
B_APPEND	O
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_input	int
,	O
4	int
,	O
80	int
,	O
RELATIVE_Y_INPUT_PTH	int
,	O
0	int
,	O
""	pointer
,	O
58	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
"input-pth"	pointer
}	O
,	O
{	O
quick_label	int
,	O
RELATIVE_Y_LABEL_PTH	int
,	O
80	int
,	O
3	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_input	int
,	O
4	int
,	O
80	int
,	O
3	int
,	O
0	int
,	O
""	pointer
,	O
58	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
"input-lbl"	pointer
}	O
,	O
{	O
quick_label	int
,	O
3	int
,	O
80	int
,	O
2	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
NULL_QuickWidget	O
}	O
;	O
int	O
len	int
;	O
int	O
i	array
;	O
int	O
lines1	int
,	O
lines2	int
;	O
int	O
cols1	int
,	O
cols2	int
;	O
static	O
int	O
i18n_flag	int
=	O
0	int
;	O
msglen	function
(	O
text1	pointer
,	O
&	O
lines1	int
,	O
&	O
cols1	int
)	O
;	O
msglen	function
(	O
text2	pointer
,	O
&	O
lines2	int
,	O
&	O
cols2	int
)	O
;	O
len	int
=	O
max	long
(	O
(	O
int	O
)	O
strlen	function
(	O
header	pointer
)	O
,	O
cols1	int
)	O
;	O
len	int
=	O
max	long
(	O
len	int
,	O
cols2	int
)	O
+	O
4	int
;	O
len	int
=	O
max	long
(	O
len	int
,	O
64	int
)	O
;	O
if	O
(	O
!	O
i18n_flag	int
)	O
{	O
add_widgets_i18n	function
(	O
quick_widgets	array
,	O
len	int
)	O
;	O
i18n_flag	int
=	O
1	int
;	O
}	O
Quick_input	struct
.	O
xlen	int
=	O
len	int
;	O
Quick_input	struct
.	O
xpos	int
=	O
-	O
1	int
;	O
Quick_input	struct
.	O
title	pointer
=	O
header	pointer
;	O
Quick_input	struct
.	O
help	pointer
=	O
help	pointer
;	O
Quick_input	struct
.	O
i18n	int
=	O
0	int
;	O
quick_widgets	array
[	O
6	int
]	O
.	O
text	pointer
=	O
text1	pointer
;	O
quick_widgets	array
[	O
4	int
]	O
.	O
text	pointer
=	O
text2	pointer
;	O
quick_widgets	array
[	O
5	int
]	O
.	O
text	pointer
=	O
*	O
r1	pointer
;	O
quick_widgets	array
[	O
3	int
]	O
.	O
text	pointer
=	O
*	O
r2	pointer
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
7	int
;	O
i	array
++	O
)	O
quick_widgets	array
[	O
i	array
]	O
.	O
y_divisions	int
=	O
lines1	int
+	O
lines2	int
+	O
7	int
;	O
Quick_input	struct
.	O
ylen	int
=	O
lines1	int
+	O
lines2	int
+	O
7	int
;	O
quick_widgets	array
[	O
0	int
]	O
.	O
relative_y	int
=	O
RELATIVE_Y_BUTTONS	int
+	O
(	O
lines1	int
+	O
lines2	int
)	O
;	O
quick_widgets	array
[	O
1	int
]	O
.	O
relative_y	int
=	O
RELATIVE_Y_BUTTONS	int
+	O
(	O
lines1	int
+	O
lines2	int
)	O
;	O
quick_widgets	array
[	O
2	int
]	O
.	O
relative_y	int
=	O
RELATIVE_Y_BUTTONS	int
+	O
(	O
lines1	int
+	O
lines2	int
)	O
;	O
quick_widgets	array
[	O
3	int
]	O
.	O
relative_y	int
=	O
RELATIVE_Y_INPUT_PTH	int
+	O
(	O
lines1	int
)	O
;	O
quick_widgets	array
[	O
4	int
]	O
.	O
relative_y	int
=	O
RELATIVE_Y_LABEL_PTH	int
+	O
(	O
lines1	int
)	O
;	O
quick_widgets	array
[	O
5	int
]	O
.	O
str_result	pointer
=	O
r1	pointer
;	O
quick_widgets	array
[	O
3	int
]	O
.	O
str_result	pointer
=	O
r2	pointer
;	O
Quick_input	struct
.	O
widgets	pointer
=	O
quick_widgets	array
;	O
if	O
(	O
(	O
i	array
=	O
quick_dialog	function
(	O
&	O
Quick_input	struct
)	O
)	O
!=	O
B_CANCEL	int
)	O
{	O
return	O
i	array
;	O
}	O
else	O
return	O
0	int
;	O
}	O
static	O
void	O
add_new_entry_cmd	function
(	O
void	O
)	O
{	O
char	O
*	O
title	pointer
,	O
*	O
url	pointer
,	O
*	O
to_free	pointer
;	O
int	O
ret	int
;	O
to_free	pointer
=	O
title	pointer
=	O
url	pointer
=	O
strip_password	function
(	O
g_strdup	function
(	O
current_panel	pointer
->	O
cwd	short
)	O
,	O
1	int
)	O
;	O
ret	int
=	O
add_new_entry_input	function
(	O
_	O
(	O
"New hotlist entry"	pointer
)	O
,	O
_	O
(	O
"Directory label"	pointer
)	O
,	O
_	O
(	O
"Directory path"	pointer
)	O
,	O
"[Hotlist]"	pointer
,	O
&	O
title	pointer
,	O
&	O
url	pointer
)	O
;	O
g_free	function
(	O
to_free	pointer
)	O
;	O
if	O
(	O
!	O
ret	int
)	O
return	O
;	O
if	O
(	O
!	O
title	pointer
||	O
!	O
*	O
title	pointer
||	O
!	O
url	pointer
||	O
!	O
*	O
url	pointer
)	O
{	O
g_free	function
(	O
title	pointer
)	O
;	O
g_free	function
(	O
url	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
ret	int
==	O
B_ENTER	int
||	O
ret	int
==	O
B_APPEND	O
)	O
add2hotlist	function
(	O
title	pointer
,	O
url	pointer
,	O
HL_TYPE_ENTRY	int
,	O
HL_AFTER_CURRENT	int
)	O
;	O
else	O
add2hotlist	function
(	O
title	pointer
,	O
url	pointer
,	O
HL_TYPE_ENTRY	int
,	O
HL_BEFORE_CURRENT	int
)	O
;	O
hotlist_state	struct
.	O
modified	long
=	O
1	int
;	O
}	O
static	O
int	O
add_new_group_input	function
(	O
const	O
char	O
*	O
header	pointer
,	O
const	O
char	O
*	O
label	pointer
,	O
char	O
*	O
*	O
result	long
)	O
{	O
int	O
ret	int
;	O
QuickDialog	struct
Quick_input	struct
;	O
static	O
QuickWidget	struct
quick_widgets	array
[	O
]	O
=	O
{	O
{	O
quick_button	int
,	O
55	int
,	O
80	int
,	O
1	int
,	O
0	int
,	O
N_	O
(	O
"&Cancel"	pointer
)	O
,	O
0	int
,	O
B_CANCEL	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_button	int
,	O
30	int
,	O
80	int
,	O
1	int
,	O
0	int
,	O
N_	O
(	O
"&Insert"	pointer
)	O
,	O
0	int
,	O
B_INSERT	O
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_button	int
,	O
10	int
,	O
80	int
,	O
1	int
,	O
0	int
,	O
N_	O
(	O
"&Append"	pointer
)	O
,	O
0	int
,	O
B_APPEND	O
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_input	int
,	O
4	int
,	O
80	int
,	O
0	int
,	O
0	int
,	O
""	pointer
,	O
58	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
"input"	pointer
}	O
,	O
{	O
quick_label	int
,	O
3	int
,	O
80	int
,	O
2	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
NULL_QuickWidget	O
}	O
;	O
int	O
relative_y	int
[	O
]	O
=	O
{	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
2	int
}	O
;	O
int	O
len	int
;	O
int	O
i	array
;	O
int	O
lines	pointer
,	O
cols	int
;	O
static	O
int	O
i18n_flag	int
=	O
0	int
;	O
msglen	function
(	O
label	pointer
,	O
&	O
lines	pointer
,	O
&	O
cols	int
)	O
;	O
len	int
=	O
max	long
(	O
(	O
int	O
)	O
strlen	function
(	O
header	pointer
)	O
,	O
cols	int
)	O
+	O
4	int
;	O
len	int
=	O
max	long
(	O
len	int
,	O
64	int
)	O
;	O
if	O
(	O
!	O
i18n_flag	int
)	O
{	O
add_widgets_i18n	function
(	O
quick_widgets	array
,	O
len	int
)	O
;	O
i18n_flag	int
=	O
1	int
;	O
}	O
Quick_input	struct
.	O
xlen	int
=	O
len	int
;	O
Quick_input	struct
.	O
xpos	int
=	O
-	O
1	int
;	O
Quick_input	struct
.	O
title	pointer
=	O
header	pointer
;	O
Quick_input	struct
.	O
help	pointer
=	O
"[Hotlist]"	pointer
;	O
Quick_input	struct
.	O
i18n	int
=	O
0	int
;	O
quick_widgets	array
[	O
4	int
]	O
.	O
text	pointer
=	O
label	pointer
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
5	int
;	O
i	array
++	O
)	O
quick_widgets	array
[	O
i	array
]	O
.	O
y_divisions	int
=	O
lines	pointer
+	O
6	int
;	O
Quick_input	struct
.	O
ylen	int
=	O
lines	pointer
+	O
6	int
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
4	int
;	O
i	array
++	O
)	O
quick_widgets	array
[	O
i	array
]	O
.	O
relative_y	int
=	O
relative_y	int
[	O
i	array
]	O
+	O
2	int
+	O
lines	pointer
;	O
quick_widgets	array
[	O
3	int
]	O
.	O
str_result	pointer
=	O
result	long
;	O
quick_widgets	array
[	O
3	int
]	O
.	O
text	pointer
=	O
""	pointer
;	O
Quick_input	struct
.	O
widgets	pointer
=	O
quick_widgets	array
;	O
if	O
(	O
(	O
ret	int
=	O
quick_dialog	function
(	O
&	O
Quick_input	struct
)	O
)	O
!=	O
B_CANCEL	int
)	O
{	O
return	O
ret	int
;	O
}	O
else	O
return	O
0	int
;	O
}	O
static	O
void	O
add_new_group_cmd	function
(	O
void	O
)	O
{	O
char	O
*	O
label	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
add_new_group_input	function
(	O
_	O
(	O
" New hotlist group "	pointer
)	O
,	O
_	O
(	O
"Name of new group"	pointer
)	O
,	O
&	O
label	pointer
)	O
;	O
if	O
(	O
!	O
ret	int
||	O
!	O
label	pointer
||	O
!	O
*	O
label	pointer
)	O
return	O
;	O
if	O
(	O
ret	int
==	O
B_ENTER	int
||	O
ret	int
==	O
B_APPEND	O
)	O
add2hotlist	function
(	O
label	pointer
,	O
0	int
,	O
HL_TYPE_GROUP	int
,	O
HL_AFTER_CURRENT	int
)	O
;	O
else	O
add2hotlist	function
(	O
label	pointer
,	O
0	int
,	O
HL_TYPE_GROUP	int
,	O
HL_BEFORE_CURRENT	int
)	O
;	O
hotlist_state	struct
.	O
modified	long
=	O
1	int
;	O
}	O
void	O
add2hotlist_cmd	function
(	O
void	O
)	O
{	O
char	O
*	O
prompt	pointer
,	O
*	O
label	pointer
;	O
const	O
char	O
*	O
cp	pointer
=	O
_	O
(	O
"Label for \"%s\":"	pointer
)	O
;	O
int	O
l	pointer
=	O
strlen	function
(	O
cp	pointer
)	O
;	O
char	O
*	O
label_string	pointer
=	O
g_strdup	function
(	O
current_panel	pointer
->	O
cwd	short
)	O
;	O
strip_password	function
(	O
label_string	pointer
,	O
1	int
)	O
;	O
prompt	pointer
=	O
g_strdup_printf	function
(	O
cp	pointer
,	O
path_trunc	function
(	O
current_panel	pointer
->	O
cwd	short
,	O
COLS	O
-	O
2	int
*	O
UX	int
-	O
(	O
l	pointer
+	O
8	int
)	O
)	O
)	O
;	O
label	pointer
=	O
input_dialog	function
(	O
_	O
(	O
" Add to hotlist "	pointer
)	O
,	O
prompt	pointer
,	O
label_string	pointer
)	O
;	O
g_free	function
(	O
prompt	pointer
)	O
;	O
if	O
(	O
!	O
label	pointer
||	O
!	O
*	O
label	pointer
)	O
{	O
g_free	function
(	O
label_string	pointer
)	O
;	O
g_free	function
(	O
label	pointer
)	O
;	O
return	O
;	O
}	O
add2hotlist	function
(	O
label	pointer
,	O
label_string	pointer
,	O
HL_TYPE_ENTRY	int
,	O
0	int
)	O
;	O
hotlist_state	struct
.	O
modified	long
=	O
1	int
;	O
}	O
static	O
void	O
remove_group	function
(	O
struct	O
hotlist	struct
*	O
grp	pointer
)	O
{	O
struct	O
hotlist	struct
*	O
current	pointer
=	O
grp	pointer
->	O
head	pointer
;	O
while	O
(	O
current	pointer
)	O
{	O
struct	O
hotlist	struct
*	O
next	pointer
=	O
current	pointer
->	O
next	pointer
;	O
if	O
(	O
current	pointer
->	O
type	enum
==	O
HL_TYPE_GROUP	int
)	O
remove_group	function
(	O
current	pointer
)	O
;	O
g_free	function
(	O
current	pointer
->	O
label	pointer
)	O
;	O
g_free	function
(	O
current	pointer
->	O
directory	enum
)	O
;	O
g_free	function
(	O
current	pointer
)	O
;	O
current	pointer
=	O
next	pointer
;	O
}	O
}	O
static	O
void	O
remove_from_hotlist	function
(	O
struct	O
hotlist	struct
*	O
entry	pointer
)	O
{	O
if	O
(	O
entry	pointer
->	O
type	enum
==	O
HL_TYPE_DOTDOT	int
)	O
return	O
;	O
if	O
(	O
confirm_directory_hotlist_delete	int
)	O
{	O
char	O
*	O
title	pointer
;	O
int	O
result	long
;	O
title	pointer
=	O
g_strconcat	function
(	O
_	O
(	O
" Remove: "	pointer
)	O
,	O
name_trunc	function
(	O
entry	pointer
->	O
label	pointer
,	O
30	int
)	O
,	O
" "	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
safe_delete	int
)	O
query_set_sel	function
(	O
1	int
)	O
;	O
result	long
=	O
query_dialog	function
(	O
title	pointer
,	O
_	O
(	O
"\n Are you sure you want to remove this entry?"	pointer
)	O
,	O
D_ERROR	int
,	O
2	int
,	O
_	O
(	O
"&Yes"	pointer
)	O
,	O
_	O
(	O
"&No"	pointer
)	O
)	O
;	O
g_free	function
(	O
title	pointer
)	O
;	O
if	O
(	O
result	long
!=	O
0	int
)	O
return	O
;	O
}	O
if	O
(	O
entry	pointer
->	O
type	enum
==	O
HL_TYPE_GROUP	int
)	O
{	O
if	O
(	O
entry	pointer
->	O
head	pointer
)	O
{	O
char	O
*	O
header	pointer
;	O
int	O
result	long
;	O
header	pointer
=	O
g_strconcat	function
(	O
_	O
(	O
" Remove: "	pointer
)	O
,	O
name_trunc	function
(	O
entry	pointer
->	O
label	pointer
,	O
30	int
)	O
,	O
" "	pointer
,	O
NULL	O
)	O
;	O
result	long
=	O
query_dialog	function
(	O
header	pointer
,	O
_	O
(	O
"\n Group not empty.\n Remove it?"	pointer
)	O
,	O
D_ERROR	int
,	O
2	int
,	O
_	O
(	O
"&Yes"	pointer
)	O
,	O
_	O
(	O
"&No"	pointer
)	O
)	O
;	O
g_free	function
(	O
header	pointer
)	O
;	O
if	O
(	O
result	long
!=	O
0	int
)	O
return	O
;	O
}	O
remove_group	function
(	O
entry	pointer
)	O
;	O
}	O
unlink_entry	function
(	O
entry	pointer
)	O
;	O
g_free	function
(	O
entry	pointer
->	O
label	pointer
)	O
;	O
g_free	function
(	O
entry	pointer
->	O
directory	enum
)	O
;	O
g_free	function
(	O
entry	pointer
)	O
;	O
listbox_remove_current	function
(	O
l_hotlist	pointer
,	O
1	int
)	O
;	O
hotlist_state	struct
.	O
modified	long
=	O
1	int
;	O
}	O
char	O
*	O
hotlist_cmd	function
(	O
int	O
vfs_or_hotlist	int
)	O
{	O
char	O
*	O
target	pointer
=	O
NULL	O
;	O
hotlist_state	struct
.	O
type	enum
=	O
vfs_or_hotlist	int
;	O
load_hotlist	function
(	O
)	O
;	O
init_hotlist	function
(	O
vfs_or_hotlist	int
)	O
;	O
attrset	function
(	O
SELECTED_COLOR	O
)	O
;	O
hotlist_state	struct
.	O
running	int
=	O
1	int
;	O
run_dlg	function
(	O
hotlist_dlg	pointer
)	O
;	O
hotlist_state	struct
.	O
running	int
=	O
0	int
;	O
save_hotlist	function
(	O
)	O
;	O
switch	O
(	O
hotlist_dlg	pointer
->	O
ret_value	int
)	O
{	O
case	O
B_CANCEL	int
:	O
break	O
;	O
case	O
B_ENTER	int
:	O
if	O
(	O
l_hotlist	pointer
->	O
current	pointer
->	O
data	pointer
)	O
{	O
struct	O
hotlist	struct
*	O
hlp	pointer
=	O
(	O
struct	O
hotlist	struct
*	O
)	O
l_hotlist	pointer
->	O
current	pointer
->	O
data	pointer
;	O
target	pointer
=	O
g_strdup	function
(	O
hlp	pointer
->	O
directory	enum
)	O
;	O
}	O
else	O
target	pointer
=	O
g_strdup	function
(	O
l_hotlist	pointer
->	O
current	pointer
->	O
text	pointer
)	O
;	O
break	O
;	O
}	O
hotlist_done	function
(	O
)	O
;	O
return	O
target	pointer
;	O
}	O
static	O
void	O
load_group	function
(	O
struct	O
hotlist	struct
*	O
grp	pointer
)	O
{	O
void	O
*	O
profile_keys	pointer
;	O
char	O
*	O
key	pointer
,	O
*	O
value	pointer
;	O
char	O
*	O
group_section	pointer
;	O
struct	O
hotlist	struct
*	O
current	pointer
=	O
0	int
;	O
group_section	pointer
=	O
find_group_section	function
(	O
grp	pointer
)	O
;	O
profile_keys	pointer
=	O
profile_init_iterator	function
(	O
group_section	pointer
,	O
profile_name	pointer
)	O
;	O
current_group	pointer
=	O
grp	pointer
;	O
while	O
(	O
profile_keys	pointer
)	O
{	O
profile_keys	pointer
=	O
profile_iterator_next	function
(	O
profile_keys	pointer
,	O
&	O
key	pointer
,	O
&	O
value	pointer
)	O
;	O
add2hotlist	function
(	O
g_strdup	function
(	O
value	pointer
)	O
,	O
g_strdup	function
(	O
key	pointer
)	O
,	O
HL_TYPE_GROUP	int
,	O
0	int
)	O
;	O
}	O
g_free	function
(	O
group_section	pointer
)	O
;	O
profile_keys	pointer
=	O
profile_init_iterator	function
(	O
grp	pointer
->	O
directory	enum
,	O
profile_name	pointer
)	O
;	O
while	O
(	O
profile_keys	pointer
)	O
{	O
profile_keys	pointer
=	O
profile_iterator_next	function
(	O
profile_keys	pointer
,	O
&	O
key	pointer
,	O
&	O
value	pointer
)	O
;	O
add2hotlist	function
(	O
g_strdup	function
(	O
value	pointer
)	O
,	O
g_strdup	function
(	O
key	pointer
)	O
,	O
HL_TYPE_ENTRY	int
,	O
0	int
)	O
;	O
}	O
for	O
(	O
current	pointer
=	O
grp	pointer
->	O
head	pointer
;	O
current	pointer
;	O
current	pointer
=	O
current	pointer
->	O
next	pointer
)	O
load_group	function
(	O
current	pointer
)	O
;	O
}	O
static	O
char	O
*	O
tkn_buf	pointer
;	O
static	O
int	O
tkn_buf_length	int
;	O
static	O
int	O
tkn_length	int
;	O
static	O
char	O
*	O
hotlist_file_name	pointer
;	O
static	O
FILE	struct
*	O
hotlist_file	pointer
;	O
static	O
time_t	long
hotlist_file_mtime	long
;	O
static	O
int	O
hot_skip_blanks	function
(	O
void	O
)	O
{	O
int	O
c	int
;	O
while	O
(	O
(	O
c	int
=	O
getc	function
(	O
hotlist_file	pointer
)	O
)	O
!=	O
EOF	O
&&	O
c	int
!=	O
'\n'	O
&&	O
isspace	function
(	O
c	int
)	O
)	O
;	O
return	O
c	int
;	O
}	O
static	O
int	O
hot_next_token	function
(	O
void	O
)	O
{	O
int	O
c	int
;	O
tkn_length	int
=	O
0	int
;	O
again	O
:	O
c	int
=	O
hot_skip_blanks	function
(	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
EOF	O
:	O
return	O
TKN_EOF	int
;	O
break	O
;	O
case	O
'\n'	O
:	O
return	O
TKN_EOL	int
;	O
break	O
;	O
case	O
'#'	O
:	O
while	O
(	O
(	O
c	int
=	O
getc	function
(	O
hotlist_file	pointer
)	O
)	O
!=	O
EOF	O
&&	O
c	int
!=	O
'\n'	O
)	O
{	O
if	O
(	O
c	int
==	O
EOF	O
)	O
return	O
TKN_EOF	int
;	O
if	O
(	O
c	int
!=	O
'\n'	O
)	O
{	O
CHECK_BUF	O
(	O
)	O
;	O
tkn_buf	pointer
[	O
tkn_length	int
++	O
]	O
=	O
c	int
==	O
'\n'	O
?	O
' '	O
:	O
c	int
;	O
}	O
}	O
CHECK_BUF	O
(	O
)	O
;	O
tkn_buf	pointer
[	O
tkn_length	int
]	O
=	O
'\0'	O
;	O
return	O
TKN_COMMENT	int
;	O
break	O
;	O
case	O
'"'	O
:	O
while	O
(	O
(	O
c	int
=	O
getc	function
(	O
hotlist_file	pointer
)	O
)	O
!=	O
EOF	O
&&	O
c	int
!=	O
'"'	O
)	O
{	O
if	O
(	O
c	int
==	O
'\\'	O
)	O
if	O
(	O
(	O
c	int
=	O
getc	function
(	O
hotlist_file	pointer
)	O
)	O
==	O
EOF	O
)	O
return	O
TKN_EOF	int
;	O
CHECK_BUF	O
(	O
)	O
;	O
tkn_buf	pointer
[	O
tkn_length	int
++	O
]	O
=	O
c	int
==	O
'\n'	O
?	O
' '	O
:	O
c	int
;	O
}	O
if	O
(	O
c	int
==	O
EOF	O
)	O
return	O
TKN_EOF	int
;	O
CHECK_BUF	O
(	O
)	O
;	O
tkn_buf	pointer
[	O
tkn_length	int
]	O
=	O
'\0'	O
;	O
return	O
TKN_STRING	int
;	O
break	O
;	O
case	O
'\\'	O
:	O
if	O
(	O
(	O
c	int
=	O
getc	function
(	O
hotlist_file	pointer
)	O
)	O
==	O
EOF	O
)	O
return	O
TKN_EOF	int
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
goto	O
again	O
;	O
default	O
:	O
do	O
{	O
CHECK_BUF	O
(	O
)	O
;	O
tkn_buf	pointer
[	O
tkn_length	int
++	O
]	O
=	O
toupper	function
(	O
c	int
)	O
;	O
}	O
while	O
(	O
(	O
c	int
=	O
fgetc	function
(	O
hotlist_file	pointer
)	O
)	O
!=	O
EOF	O
&&	O
isalnum	function
(	O
c	int
)	O
)	O
;	O
if	O
(	O
c	int
!=	O
EOF	O
)	O
ungetc	function
(	O
c	int
,	O
hotlist_file	pointer
)	O
;	O
CHECK_BUF	O
(	O
)	O
;	O
tkn_buf	pointer
[	O
tkn_length	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
strncmp	function
(	O
tkn_buf	pointer
,	O
"GROUP"	pointer
,	O
tkn_length	int
)	O
==	O
0	int
)	O
return	O
TKN_GROUP	int
;	O
else	O
if	O
(	O
strncmp	function
(	O
tkn_buf	pointer
,	O
"ENTRY"	pointer
,	O
tkn_length	int
)	O
==	O
0	int
)	O
return	O
TKN_ENTRY	int
;	O
else	O
if	O
(	O
strncmp	function
(	O
tkn_buf	pointer
,	O
"ENDGROUP"	pointer
,	O
tkn_length	int
)	O
==	O
0	int
)	O
return	O
TKN_ENDGROUP	int
;	O
else	O
if	O
(	O
strncmp	function
(	O
tkn_buf	pointer
,	O
"URL"	pointer
,	O
tkn_length	int
)	O
==	O
0	int
)	O
return	O
TKN_URL	int
;	O
else	O
return	O
TKN_UNKNOWN	int
;	O
break	O
;	O
}	O
}	O
static	O
void	O
hot_load_group	function
(	O
struct	O
hotlist	struct
*	O
grp	pointer
)	O
{	O
int	O
tkn	int
;	O
struct	O
hotlist	struct
*	O
new_grp	pointer
;	O
char	O
*	O
label	pointer
,	O
*	O
url	pointer
;	O
current_group	pointer
=	O
grp	pointer
;	O
while	O
(	O
(	O
tkn	int
=	O
hot_next_token	function
(	O
)	O
)	O
!=	O
TKN_ENDGROUP	int
)	O
switch	O
(	O
tkn	int
)	O
{	O
case	O
TKN_GROUP	int
:	O
CHECK_TOKEN	O
(	O
TKN_STRING	int
)	O
;	O
new_grp	pointer
=	O
add2hotlist	function
(	O
g_strdup	function
(	O
tkn_buf	pointer
)	O
,	O
0	int
,	O
HL_TYPE_GROUP	int
,	O
0	int
)	O
;	O
SKIP_TO_EOL	O
;	O
hot_load_group	function
(	O
new_grp	pointer
)	O
;	O
current_group	pointer
=	O
grp	pointer
;	O
break	O
;	O
case	O
TKN_ENTRY	int
:	O
CHECK_TOKEN	O
(	O
TKN_STRING	int
)	O
;	O
label	pointer
=	O
g_strdup	function
(	O
tkn_buf	pointer
)	O
;	O
CHECK_TOKEN	O
(	O
TKN_URL	int
)	O
;	O
CHECK_TOKEN	O
(	O
TKN_STRING	int
)	O
;	O
url	pointer
=	O
g_strdup	function
(	O
tkn_buf	pointer
)	O
;	O
add2hotlist	function
(	O
label	pointer
,	O
url	pointer
,	O
HL_TYPE_ENTRY	int
,	O
0	int
)	O
;	O
SKIP_TO_EOL	O
;	O
break	O
;	O
case	O
TKN_COMMENT	int
:	O
label	pointer
=	O
g_strdup	function
(	O
tkn_buf	pointer
)	O
;	O
add2hotlist	function
(	O
label	pointer
,	O
0	int
,	O
HL_TYPE_COMMENT	int
,	O
0	int
)	O
;	O
break	O
;	O
case	O
TKN_EOF	int
:	O
hotlist_state	struct
.	O
readonly	int
=	O
1	int
;	O
hotlist_state	struct
.	O
file_error	int
=	O
1	int
;	O
return	O
;	O
break	O
;	O
case	O
TKN_EOL	int
:	O
break	O
;	O
default	O
:	O
hotlist_state	struct
.	O
readonly	int
=	O
1	int
;	O
hotlist_state	struct
.	O
file_error	int
=	O
1	int
;	O
SKIP_TO_EOL	O
;	O
break	O
;	O
}	O
SKIP_TO_EOL	O
;	O
}	O
static	O
void	O
hot_load_file	function
(	O
struct	O
hotlist	struct
*	O
grp	pointer
)	O
{	O
int	O
tkn	int
;	O
struct	O
hotlist	struct
*	O
new_grp	pointer
;	O
char	O
*	O
label	pointer
,	O
*	O
url	pointer
;	O
current_group	pointer
=	O
grp	pointer
;	O
while	O
(	O
(	O
tkn	int
=	O
hot_next_token	function
(	O
)	O
)	O
!=	O
TKN_EOF	int
)	O
switch	O
(	O
tkn	int
)	O
{	O
case	O
TKN_GROUP	int
:	O
CHECK_TOKEN	O
(	O
TKN_STRING	int
)	O
;	O
new_grp	pointer
=	O
add2hotlist	function
(	O
g_strdup	function
(	O
tkn_buf	pointer
)	O
,	O
0	int
,	O
HL_TYPE_GROUP	int
,	O
0	int
)	O
;	O
SKIP_TO_EOL	O
;	O
hot_load_group	function
(	O
new_grp	pointer
)	O
;	O
current_group	pointer
=	O
grp	pointer
;	O
break	O
;	O
case	O
TKN_ENTRY	int
:	O
CHECK_TOKEN	O
(	O
TKN_STRING	int
)	O
;	O
label	pointer
=	O
g_strdup	function
(	O
tkn_buf	pointer
)	O
;	O
CHECK_TOKEN	O
(	O
TKN_URL	int
)	O
;	O
CHECK_TOKEN	O
(	O
TKN_STRING	int
)	O
;	O
url	pointer
=	O
g_strdup	function
(	O
tkn_buf	pointer
)	O
;	O
add2hotlist	function
(	O
label	pointer
,	O
url	pointer
,	O
HL_TYPE_ENTRY	int
,	O
0	int
)	O
;	O
SKIP_TO_EOL	O
;	O
break	O
;	O
case	O
TKN_COMMENT	int
:	O
label	pointer
=	O
g_strdup	function
(	O
tkn_buf	pointer
)	O
;	O
add2hotlist	function
(	O
label	pointer
,	O
0	int
,	O
HL_TYPE_COMMENT	int
,	O
0	int
)	O
;	O
break	O
;	O
case	O
TKN_EOL	int
:	O
break	O
;	O
default	O
:	O
hotlist_state	struct
.	O
readonly	int
=	O
1	int
;	O
hotlist_state	struct
.	O
file_error	int
=	O
1	int
;	O
SKIP_TO_EOL	O
;	O
break	O
;	O
}	O
}	O
static	O
void	O
clean_up_hotlist_groups	function
(	O
const	O
char	O
*	O
section	pointer
)	O
{	O
char	O
*	O
grp_section	pointer
;	O
void	O
*	O
profile_keys	pointer
;	O
char	O
*	O
key	pointer
,	O
*	O
value	pointer
;	O
grp_section	pointer
=	O
g_strconcat	function
(	O
section	pointer
,	O
".Group"	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
profile_has_section	function
(	O
section	pointer
,	O
profile_name	pointer
)	O
)	O
profile_clean_section	function
(	O
section	pointer
,	O
profile_name	pointer
)	O
;	O
if	O
(	O
profile_has_section	function
(	O
grp_section	pointer
,	O
profile_name	pointer
)	O
)	O
{	O
profile_keys	pointer
=	O
profile_init_iterator	function
(	O
grp_section	pointer
,	O
profile_name	pointer
)	O
;	O
while	O
(	O
profile_keys	pointer
)	O
{	O
profile_keys	pointer
=	O
profile_iterator_next	function
(	O
profile_keys	pointer
,	O
&	O
key	pointer
,	O
&	O
value	pointer
)	O
;	O
clean_up_hotlist_groups	function
(	O
key	pointer
)	O
;	O
}	O
profile_clean_section	function
(	O
grp_section	pointer
,	O
profile_name	pointer
)	O
;	O
}	O
g_free	function
(	O
grp_section	pointer
)	O
;	O
}	O
static	O
void	O
load_hotlist	function
(	O
void	O
)	O
{	O
int	O
remove_old_list	int
=	O
0	int
;	O
struct	O
stat	struct
stat_buf	struct
;	O
if	O
(	O
hotlist_state	struct
.	O
loaded	int
)	O
{	O
stat	struct
(	O
hotlist_file_name	pointer
,	O
&	O
stat_buf	struct
)	O
;	O
if	O
(	O
hotlist_file_mtime	long
<	O
stat_buf	struct
.	O
st_mtime	O
)	O
done_hotlist	function
(	O
)	O
;	O
else	O
return	O
;	O
}	O
if	O
(	O
!	O
hotlist_file_name	pointer
)	O
hotlist_file_name	pointer
=	O
concat_dir_and_file	function
(	O
home_dir	pointer
,	O
HOTLIST_FILENAME	pointer
)	O
;	O
hotlist	struct
=	O
new_hotlist	O
(	O
)	O
;	O
hotlist	struct
->	O
type	enum
=	O
HL_TYPE_GROUP	int
;	O
hotlist	struct
->	O
label	pointer
=	O
g_strdup	function
(	O
_	O
(	O
" Top level group "	pointer
)	O
)	O
;	O
hotlist	struct
->	O
up	pointer
=	O
hotlist	struct
;	O
hotlist	struct
->	O
directory	enum
=	O
g_strdup	function
(	O
"Hotlist"	pointer
)	O
;	O
if	O
(	O
(	O
hotlist_file	pointer
=	O
fopen	function
(	O
hotlist_file_name	pointer
,	O
"r"	pointer
)	O
)	O
==	O
0	int
)	O
{	O
int	O
result	long
;	O
load_group	function
(	O
hotlist	struct
)	O
;	O
hotlist_state	struct
.	O
loaded	int
=	O
1	int
;	O
hotlist_state	struct
.	O
modified	long
=	O
1	int
;	O
result	long
=	O
save_hotlist	function
(	O
)	O
;	O
hotlist_state	struct
.	O
modified	long
=	O
0	int
;	O
if	O
(	O
result	long
)	O
{	O
remove_old_list	int
=	O
1	int
;	O
}	O
else	O
{	O
char	O
*	O
msg	pointer
;	O
msg	pointer
=	O
g_strconcat	function
(	O
_	O
(	O
"MC was unable to write ~/"	pointer
)	O
,	O
HOTLIST_FILENAME	pointer
,	O
_	O
(	O
" file, your old hotlist entries were not deleted"	pointer
)	O
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
message	pointer
(	O
D_ERROR	int
,	O
_	O
(	O
" Hotlist Load "	pointer
)	O
,	O
msg	pointer
)	O
;	O
g_free	function
(	O
msg	pointer
)	O
;	O
}	O
}	O
else	O
{	O
hot_load_file	function
(	O
hotlist	struct
)	O
;	O
fclose	function
(	O
hotlist_file	pointer
)	O
;	O
hotlist_state	struct
.	O
loaded	int
=	O
1	int
;	O
}	O
if	O
(	O
remove_old_list	int
)	O
{	O
clean_up_hotlist_groups	function
(	O
"Hotlist"	pointer
)	O
;	O
sync_profiles	function
(	O
)	O
;	O
}	O
stat	struct
(	O
hotlist_file_name	pointer
,	O
&	O
stat_buf	struct
)	O
;	O
hotlist_file_mtime	long
=	O
stat_buf	struct
.	O
st_mtime	O
;	O
current_group	pointer
=	O
hotlist	struct
;	O
}	O
static	O
void	O
save_group	function
(	O
struct	O
hotlist	struct
*	O
grp	pointer
)	O
{	O
struct	O
hotlist	struct
*	O
current	pointer
=	O
grp	pointer
->	O
head	pointer
;	O
char	O
*	O
group_section	pointer
;	O
group_section	pointer
=	O
find_group_section	function
(	O
grp	pointer
)	O
;	O
profile_clean_section	function
(	O
group_section	pointer
,	O
profile_name	pointer
)	O
;	O
for	O
(	O
;	O
current	pointer
&&	O
current	pointer
->	O
type	enum
==	O
HL_TYPE_GROUP	int
;	O
current	pointer
=	O
current	pointer
->	O
next	pointer
)	O
{	O
WritePrivateProfileString	function
(	O
group_section	pointer
,	O
current	pointer
->	O
directory	enum
,	O
current	pointer
->	O
label	pointer
,	O
profile_name	pointer
)	O
;	O
}	O
g_free	function
(	O
group_section	pointer
)	O
;	O
for	O
(	O
current	pointer
=	O
grp	pointer
->	O
head	pointer
;	O
current	pointer
&&	O
current	pointer
->	O
type	enum
==	O
HL_TYPE_GROUP	int
;	O
current	pointer
=	O
current	pointer
->	O
next	pointer
)	O
save_group	function
(	O
current	pointer
)	O
;	O
profile_clean_section	function
(	O
grp	pointer
->	O
directory	enum
,	O
profile_name	pointer
)	O
;	O
for	O
(	O
;	O
current	pointer
;	O
current	pointer
=	O
current	pointer
->	O
next	pointer
)	O
{	O
WritePrivateProfileString	function
(	O
grp	pointer
->	O
directory	enum
,	O
current	pointer
->	O
directory	enum
,	O
current	pointer
->	O
label	pointer
,	O
profile_name	pointer
)	O
;	O
}	O
}	O
static	O
int	O
list_level	int
=	O
0	int
;	O
static	O
void	O
hot_save_group	function
(	O
struct	O
hotlist	struct
*	O
grp	pointer
)	O
{	O
struct	O
hotlist	struct
*	O
current	pointer
=	O
grp	pointer
->	O
head	pointer
;	O
int	O
i	array
;	O
char	O
*	O
s	pointer
;	O
for	O
(	O
;	O
current	pointer
;	O
current	pointer
=	O
current	pointer
->	O
next	pointer
)	O
switch	O
(	O
current	pointer
->	O
type	enum
)	O
{	O
case	O
HL_TYPE_GROUP	int
:	O
INDENT	O
(	O
list_level	int
)	O
;	O
fputs	function
(	O
"GROUP \""	pointer
,	O
hotlist_file	pointer
)	O
;	O
for	O
(	O
s	pointer
=	O
current	pointer
->	O
label	pointer
;	O
*	O
s	pointer
;	O
s	pointer
++	O
)	O
{	O
if	O
(	O
*	O
s	pointer
==	O
'"'	O
||	O
*	O
s	pointer
==	O
'\\'	O
)	O
putc	function
(	O
'\\'	O
,	O
hotlist_file	pointer
)	O
;	O
putc	function
(	O
*	O
s	pointer
,	O
hotlist_file	pointer
)	O
;	O
}	O
fputs	function
(	O
"\"\n"	pointer
,	O
hotlist_file	pointer
)	O
;	O
list_level	int
+=	O
2	int
;	O
hot_save_group	function
(	O
current	pointer
)	O
;	O
list_level	int
-=	O
2	int
;	O
INDENT	O
(	O
list_level	int
)	O
;	O
fputs	function
(	O
"ENDGROUP\n"	pointer
,	O
hotlist_file	pointer
)	O
;	O
break	O
;	O
case	O
HL_TYPE_ENTRY	int
:	O
INDENT	O
(	O
list_level	int
)	O
;	O
fputs	function
(	O
"ENTRY \""	pointer
,	O
hotlist_file	pointer
)	O
;	O
for	O
(	O
s	pointer
=	O
current	pointer
->	O
label	pointer
;	O
*	O
s	pointer
;	O
s	pointer
++	O
)	O
{	O
if	O
(	O
*	O
s	pointer
==	O
'"'	O
||	O
*	O
s	pointer
==	O
'\\'	O
)	O
putc	function
(	O
'\\'	O
,	O
hotlist_file	pointer
)	O
;	O
putc	function
(	O
*	O
s	pointer
,	O
hotlist_file	pointer
)	O
;	O
}	O
fputs	function
(	O
"\" URL \""	pointer
,	O
hotlist_file	pointer
)	O
;	O
for	O
(	O
s	pointer
=	O
current	pointer
->	O
directory	enum
;	O
*	O
s	pointer
;	O
s	pointer
++	O
)	O
{	O
if	O
(	O
*	O
s	pointer
==	O
'"'	O
||	O
*	O
s	pointer
==	O
'\\'	O
)	O
putc	function
(	O
'\\'	O
,	O
hotlist_file	pointer
)	O
;	O
putc	function
(	O
*	O
s	pointer
,	O
hotlist_file	pointer
)	O
;	O
}	O
fputs	function
(	O
"\"\n"	pointer
,	O
hotlist_file	pointer
)	O
;	O
break	O
;	O
case	O
HL_TYPE_COMMENT	int
:	O
fprintf	function
(	O
hotlist_file	pointer
,	O
"#%s\n"	pointer
,	O
current	pointer
->	O
label	pointer
)	O
;	O
break	O
;	O
case	O
HL_TYPE_DOTDOT	int
:	O
break	O
;	O
}	O
}	O
int	O
save_hotlist	function
(	O
void	O
)	O
{	O
int	O
saved	pointer
=	O
0	int
;	O
struct	O
stat	struct
stat_buf	struct
;	O
if	O
(	O
!	O
hotlist_state	struct
.	O
readonly	int
&&	O
hotlist_state	struct
.	O
modified	long
&&	O
hotlist_file_name	pointer
)	O
{	O
char	O
*	O
fbak	pointer
=	O
g_strconcat	function
(	O
hotlist_file_name	pointer
,	O
".bak"	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
rename	function
(	O
hotlist_file_name	pointer
,	O
fbak	pointer
)	O
;	O
if	O
(	O
(	O
hotlist_file	pointer
=	O
fopen	function
(	O
hotlist_file_name	pointer
,	O
"w"	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
stat	struct
(	O
fbak	pointer
,	O
&	O
stat_buf	struct
)	O
==	O
0	int
)	O
chmod	function
(	O
hotlist_file_name	pointer
,	O
stat_buf	struct
.	O
st_mode	int
)	O
;	O
else	O
chmod	function
(	O
hotlist_file_name	pointer
,	O
S_IRUSR	O
|	O
S_IWUSR	O
)	O
;	O
hot_save_group	function
(	O
hotlist	struct
)	O
;	O
fclose	function
(	O
hotlist_file	pointer
)	O
;	O
stat	struct
(	O
hotlist_file_name	pointer
,	O
&	O
stat_buf	struct
)	O
;	O
hotlist_file_mtime	long
=	O
stat_buf	struct
.	O
st_mtime	O
;	O
saved	pointer
=	O
1	int
;	O
hotlist_state	struct
.	O
modified	long
=	O
0	int
;	O
}	O
else	O
rename	function
(	O
fbak	pointer
,	O
hotlist_file_name	pointer
)	O
;	O
g_free	function
(	O
fbak	pointer
)	O
;	O
}	O
return	O
saved	pointer
;	O
}	O
void	O
done_hotlist	function
(	O
void	O
)	O
{	O
if	O
(	O
hotlist	struct
)	O
{	O
remove_group	function
(	O
hotlist	struct
)	O
;	O
g_free	function
(	O
hotlist	struct
->	O
label	pointer
)	O
;	O
g_free	function
(	O
hotlist	struct
->	O
directory	enum
)	O
;	O
g_free	function
(	O
hotlist	struct
)	O
;	O
hotlist	struct
=	O
0	int
;	O
}	O
hotlist_state	struct
.	O
loaded	int
=	O
0	int
;	O
g_free	function
(	O
hotlist_file_name	pointer
)	O
;	O
hotlist_file_name	pointer
=	O
0	int
;	O
l_hotlist	pointer
=	O
0	int
;	O
current_group	pointer
=	O
0	int
;	O
if	O
(	O
tkn_buf	pointer
)	O
{	O
g_free	function
(	O
tkn_buf	pointer
)	O
;	O
tkn_buf_length	int
=	O
0	int
;	O
tkn_length	int
=	O
0	int
;	O
tkn_buf	pointer
=	O
NULL	O
;	O
}	O
}	O
static	O
void	O
add_dotdot_to_list	function
(	O
void	O
)	O
{	O
if	O
(	O
current_group	pointer
!=	O
hotlist	struct
)	O
{	O
if	O
(	O
hotlist_has_dot_dot	int
!=	O
0	int
)	O
add2hotlist	function
(	O
g_strdup	function
(	O
".."	pointer
)	O
,	O
g_strdup	function
(	O
".."	pointer
)	O
,	O
HL_TYPE_DOTDOT	int
,	O
0	int
)	O
;	O
}	O
}	O
