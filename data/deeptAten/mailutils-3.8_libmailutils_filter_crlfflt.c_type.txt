enum	O
crlf_state	enum
{	O
state_init	int
,	O
state_cr	int
}	O
;	O
struct	O
crlf_encoder_state	struct
{	O
enum	O
crlf_state	enum
cur	enum
;	O
enum	O
crlf_state	enum
last	enum
;	O
}	O
;	O
static	O
enum	O
mu_filter_result	enum
_crlf_encoder	function
(	O
void	O
*	O
xd	pointer
,	O
enum	O
mu_filter_command	enum
cmd	enum
,	O
struct	O
mu_filter_io	struct
*	O
iobuf	pointer
)	O
{	O
size_t	long
i	long
,	O
j	long
;	O
const	O
unsigned	O
char	O
*	O
iptr	pointer
;	O
size_t	long
isize	long
;	O
char	O
*	O
optr	pointer
;	O
size_t	long
osize	long
;	O
struct	O
crlf_encoder_state	struct
*	O
state	pointer
=	O
xd	pointer
;	O
switch	O
(	O
cmd	enum
)	O
{	O
case	O
mu_filter_init	int
:	O
state	pointer
->	O
cur	enum
=	O
state_init	int
;	O
case	O
mu_filter_done	int
:	O
return	O
mu_filter_ok	int
;	O
default	O
:	O
break	O
;	O
}	O
iptr	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
iobuf	pointer
->	O
input	pointer
;	O
isize	long
=	O
iobuf	pointer
->	O
isize	long
;	O
optr	pointer
=	O
iobuf	pointer
->	O
output	pointer
;	O
osize	long
=	O
iobuf	pointer
->	O
osize	long
;	O
for	O
(	O
i	long
=	O
j	long
=	O
0	int
;	O
i	long
<	O
isize	long
&&	O
j	long
<	O
osize	long
;	O
i	long
++	O
)	O
{	O
unsigned	O
char	O
c	char
=	O
*	O
iptr	pointer
++	O
;	O
if	O
(	O
c	char
==	O
'\n'	O
)	O
{	O
if	O
(	O
state	pointer
->	O
cur	enum
==	O
state_cr	int
)	O
{	O
state	pointer
->	O
cur	enum
=	O
state_init	int
;	O
optr	pointer
[	O
j	long
++	O
]	O
=	O
c	char
;	O
}	O
else	O
if	O
(	O
j	long
+	O
1	int
==	O
osize	long
)	O
{	O
if	O
(	O
i	long
==	O
0	int
)	O
{	O
iobuf	pointer
->	O
osize	long
=	O
2	int
;	O
return	O
mu_filter_moreoutput	int
;	O
}	O
break	O
;	O
}	O
else	O
{	O
optr	pointer
[	O
j	long
++	O
]	O
=	O
'\r'	O
;	O
optr	pointer
[	O
j	long
++	O
]	O
=	O
'\n'	O
;	O
}	O
}	O
else	O
if	O
(	O
c	char
==	O
'\r'	O
&&	O
state	pointer
->	O
last	enum
==	O
state_cr	int
)	O
{	O
state	pointer
->	O
cur	enum
=	O
state_cr	int
;	O
optr	pointer
[	O
j	long
++	O
]	O
=	O
c	char
;	O
}	O
else	O
{	O
state	pointer
->	O
cur	enum
=	O
state_init	int
;	O
optr	pointer
[	O
j	long
++	O
]	O
=	O
c	char
;	O
}	O
}	O
iobuf	pointer
->	O
isize	long
=	O
i	long
;	O
iobuf	pointer
->	O
osize	long
=	O
j	long
;	O
return	O
mu_filter_ok	int
;	O
}	O
static	O
enum	O
mu_filter_result	enum
_crlf_decoder	function
(	O
void	O
*	O
xd	pointer
MU_ARG_UNUSED	O
,	O
enum	O
mu_filter_command	enum
cmd	enum
,	O
struct	O
mu_filter_io	struct
*	O
iobuf	pointer
)	O
{	O
size_t	long
i	long
,	O
j	long
;	O
const	O
unsigned	O
char	O
*	O
iptr	pointer
;	O
size_t	long
isize	long
;	O
char	O
*	O
optr	pointer
;	O
size_t	long
osize	long
;	O
switch	O
(	O
cmd	enum
)	O
{	O
case	O
mu_filter_init	int
:	O
case	O
mu_filter_done	int
:	O
return	O
mu_filter_ok	int
;	O
default	O
:	O
break	O
;	O
}	O
iptr	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
iobuf	pointer
->	O
input	pointer
;	O
isize	long
=	O
iobuf	pointer
->	O
isize	long
;	O
optr	pointer
=	O
iobuf	pointer
->	O
output	pointer
;	O
osize	long
=	O
iobuf	pointer
->	O
osize	long
;	O
for	O
(	O
i	long
=	O
j	long
=	O
0	int
;	O
i	long
<	O
isize	long
&&	O
j	long
<	O
osize	long
;	O
i	long
++	O
)	O
{	O
unsigned	O
char	O
c	char
=	O
*	O
iptr	pointer
++	O
;	O
if	O
(	O
c	char
==	O
'\r'	O
)	O
{	O
if	O
(	O
i	long
+	O
1	int
==	O
isize	long
)	O
break	O
;	O
if	O
(	O
*	O
iptr	pointer
==	O
'\n'	O
)	O
continue	O
;	O
}	O
optr	pointer
[	O
j	long
++	O
]	O
=	O
c	char
;	O
}	O
iobuf	pointer
->	O
isize	long
=	O
i	long
;	O
iobuf	pointer
->	O
osize	long
=	O
j	long
;	O
return	O
mu_filter_ok	int
;	O
}	O
static	O
int	O
alloc_state	function
(	O
void	O
*	O
*	O
pret	pointer
,	O
int	O
mode	int
,	O
int	O
argc	int
,	O
const	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
struct	O
crlf_encoder_state	struct
*	O
st	pointer
;	O
switch	O
(	O
mode	int
)	O
{	O
case	O
MU_FILTER_ENCODE	int
:	O
st	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
st	pointer
)	O
)	O
;	O
if	O
(	O
!	O
st	pointer
)	O
return	O
ENOMEM	int
;	O
st	pointer
->	O
cur	enum
=	O
state_init	int
;	O
if	O
(	O
argc	int
==	O
2	int
&&	O
strcmp	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"-n"	pointer
)	O
==	O
0	int
)	O
st	pointer
->	O
last	enum
=	O
state_cr	int
;	O
else	O
st	pointer
->	O
last	enum
=	O
state_init	int
;	O
*	O
pret	pointer
=	O
st	pointer
;	O
break	O
;	O
case	O
MU_FILTER_DECODE	int
:	O
*	O
pret	pointer
=	O
NULL	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
_mu_filter_record	struct
_crlf_filter	struct
=	O
{	O
"CRLF"	pointer
,	O
alloc_state	function
,	O
_crlf_encoder	function
,	O
_crlf_decoder	function
}	O
;	O
mu_filter_record_t	pointer
mu_crlf_filter	pointer
=	O
&	O
_crlf_filter	struct
;	O
static	O
struct	O
_mu_filter_record	struct
_rfc822_filter	struct
=	O
{	O
"RFC822"	pointer
,	O
alloc_state	function
,	O
_crlf_encoder	function
,	O
_crlf_decoder	function
}	O
;	O
mu_filter_record_t	pointer
mu_rfc822_filter	pointer
=	O
&	O
_rfc822_filter	struct
;	O
