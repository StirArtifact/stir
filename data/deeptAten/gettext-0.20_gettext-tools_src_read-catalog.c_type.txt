static	O
inline	O
void	O
call_set_domain	function
(	O
struct	O
default_catalog_reader_ty	struct
*	O
this	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
default_catalog_reader_class_ty	struct
*	O
methods	pointer
=	O
(	O
default_catalog_reader_class_ty	struct
*	O
)	O
this	pointer
->	O
methods	pointer
;	O
if	O
(	O
methods	pointer
->	O
set_domain	pointer
)	O
methods	pointer
->	O
set_domain	pointer
(	O
this	pointer
,	O
name	pointer
)	O
;	O
}	O
static	O
inline	O
void	O
call_add_message	function
(	O
struct	O
default_catalog_reader_ty	struct
*	O
this	pointer
,	O
char	O
*	O
msgctxt	pointer
,	O
char	O
*	O
msgid	pointer
,	O
lex_pos_ty	struct
*	O
msgid_pos	pointer
,	O
char	O
*	O
msgid_plural	pointer
,	O
char	O
*	O
msgstr	pointer
,	O
size_t	long
msgstr_len	long
,	O
lex_pos_ty	struct
*	O
msgstr_pos	pointer
,	O
char	O
*	O
prev_msgctxt	pointer
,	O
char	O
*	O
prev_msgid	pointer
,	O
char	O
*	O
prev_msgid_plural	pointer
,	O
bool	bool
force_fuzzy	bool
,	O
bool	bool
obsolete	bool
)	O
{	O
default_catalog_reader_class_ty	struct
*	O
methods	pointer
=	O
(	O
default_catalog_reader_class_ty	struct
*	O
)	O
this	pointer
->	O
methods	pointer
;	O
if	O
(	O
methods	pointer
->	O
add_message	pointer
)	O
methods	pointer
->	O
add_message	pointer
(	O
this	pointer
,	O
msgctxt	pointer
,	O
msgid	pointer
,	O
msgid_pos	pointer
,	O
msgid_plural	pointer
,	O
msgstr	pointer
,	O
msgstr_len	long
,	O
msgstr_pos	pointer
,	O
prev_msgctxt	pointer
,	O
prev_msgid	pointer
,	O
prev_msgid_plural	pointer
,	O
force_fuzzy	bool
,	O
obsolete	bool
)	O
;	O
}	O
static	O
inline	O
void	O
call_frob_new_message	function
(	O
struct	O
default_catalog_reader_ty	struct
*	O
this	pointer
,	O
message_ty	struct
*	O
mp	pointer
,	O
const	O
lex_pos_ty	struct
*	O
msgid_pos	pointer
,	O
const	O
lex_pos_ty	struct
*	O
msgstr_pos	pointer
)	O
{	O
default_catalog_reader_class_ty	struct
*	O
methods	pointer
=	O
(	O
default_catalog_reader_class_ty	struct
*	O
)	O
this	pointer
->	O
methods	pointer
;	O
if	O
(	O
methods	pointer
->	O
frob_new_message	pointer
)	O
methods	pointer
->	O
frob_new_message	pointer
(	O
this	pointer
,	O
mp	pointer
,	O
msgid_pos	pointer
,	O
msgstr_pos	pointer
)	O
;	O
}	O
void	O
default_constructor	function
(	O
abstract_catalog_reader_ty	struct
*	O
that	pointer
)	O
{	O
default_catalog_reader_ty	struct
*	O
this	pointer
=	O
(	O
default_catalog_reader_ty	struct
*	O
)	O
that	pointer
;	O
size_t	long
i	long
;	O
this	pointer
->	O
domain	pointer
=	O
MESSAGE_DOMAIN_DEFAULT	pointer
;	O
this	pointer
->	O
comment	pointer
=	O
NULL	O
;	O
this	pointer
->	O
comment_dot	pointer
=	O
NULL	O
;	O
this	pointer
->	O
filepos_count	long
=	O
0	int
;	O
this	pointer
->	O
filepos	pointer
=	O
NULL	O
;	O
this	pointer
->	O
is_fuzzy	bool
=	O
false	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NFORMATS	int
;	O
i	long
++	O
)	O
this	pointer
->	O
is_format	enum
[	O
i	long
]	O
=	O
undecided	int
;	O
this	pointer
->	O
range	struct
.	O
min	int
=	O
-	O
1	int
;	O
this	pointer
->	O
range	struct
.	O
max	int
=	O
-	O
1	int
;	O
this	pointer
->	O
do_wrap	enum
=	O
undecided	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NSYNTAXCHECKS	int
;	O
i	long
++	O
)	O
this	pointer
->	O
do_syntax_check	array
[	O
i	long
]	O
=	O
undecided	int
;	O
}	O
void	O
default_destructor	function
(	O
abstract_catalog_reader_ty	struct
*	O
that	pointer
)	O
{	O
default_catalog_reader_ty	struct
*	O
this	pointer
=	O
(	O
default_catalog_reader_ty	struct
*	O
)	O
that	pointer
;	O
size_t	long
j	long
;	O
if	O
(	O
this	pointer
->	O
handle_comments	bool
)	O
{	O
if	O
(	O
this	pointer
->	O
comment	pointer
!=	O
NULL	O
)	O
string_list_free	function
(	O
this	pointer
->	O
comment	pointer
)	O
;	O
if	O
(	O
this	pointer
->	O
comment_dot	pointer
!=	O
NULL	O
)	O
string_list_free	function
(	O
this	pointer
->	O
comment_dot	pointer
)	O
;	O
}	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
this	pointer
->	O
filepos_count	long
;	O
++	O
j	long
)	O
free	function
(	O
this	pointer
->	O
filepos	pointer
[	O
j	long
]	O
.	O
file_name	pointer
)	O
;	O
if	O
(	O
this	pointer
->	O
filepos	pointer
!=	O
NULL	O
)	O
free	function
(	O
this	pointer
->	O
filepos	pointer
)	O
;	O
}	O
void	O
default_parse_brief	function
(	O
abstract_catalog_reader_ty	struct
*	O
that	pointer
)	O
{	O
po_lex_pass_comments	function
(	O
true	int
)	O
;	O
}	O
void	O
default_parse_debrief	function
(	O
abstract_catalog_reader_ty	struct
*	O
that	pointer
)	O
{	O
}	O
static	O
void	O
default_copy_comment_state	function
(	O
default_catalog_reader_ty	struct
*	O
this	pointer
,	O
message_ty	struct
*	O
mp	pointer
)	O
{	O
size_t	long
j	long
,	O
i	long
;	O
if	O
(	O
this	pointer
->	O
handle_comments	bool
)	O
{	O
if	O
(	O
this	pointer
->	O
comment	pointer
!=	O
NULL	O
)	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
this	pointer
->	O
comment	pointer
->	O
nitems	long
;	O
++	O
j	long
)	O
message_comment_append	function
(	O
mp	pointer
,	O
this	pointer
->	O
comment	pointer
->	O
item	pointer
[	O
j	long
]	O
)	O
;	O
if	O
(	O
this	pointer
->	O
comment_dot	pointer
!=	O
NULL	O
)	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
this	pointer
->	O
comment_dot	pointer
->	O
nitems	long
;	O
++	O
j	long
)	O
message_comment_dot_append	function
(	O
mp	pointer
,	O
this	pointer
->	O
comment_dot	pointer
->	O
item	pointer
[	O
j	long
]	O
)	O
;	O
}	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
this	pointer
->	O
filepos_count	long
;	O
++	O
j	long
)	O
{	O
lex_pos_ty	struct
*	O
pp	pointer
;	O
pp	pointer
=	O
&	O
this	pointer
->	O
filepos	pointer
[	O
j	long
]	O
;	O
message_comment_filepos	function
(	O
mp	pointer
,	O
pp	pointer
->	O
file_name	pointer
,	O
pp	pointer
->	O
line_number	long
)	O
;	O
}	O
mp	pointer
->	O
is_fuzzy	bool
=	O
this	pointer
->	O
is_fuzzy	bool
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NFORMATS	int
;	O
i	long
++	O
)	O
mp	pointer
->	O
is_format	enum
[	O
i	long
]	O
=	O
this	pointer
->	O
is_format	enum
[	O
i	long
]	O
;	O
mp	pointer
->	O
range	struct
=	O
this	pointer
->	O
range	struct
;	O
mp	pointer
->	O
do_wrap	enum
=	O
this	pointer
->	O
do_wrap	enum
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NSYNTAXCHECKS	int
;	O
i	long
++	O
)	O
mp	pointer
->	O
do_syntax_check	array
[	O
i	long
]	O
=	O
this	pointer
->	O
do_syntax_check	array
[	O
i	long
]	O
;	O
}	O
static	O
void	O
default_reset_comment_state	function
(	O
default_catalog_reader_ty	struct
*	O
this	pointer
)	O
{	O
size_t	long
j	long
,	O
i	long
;	O
if	O
(	O
this	pointer
->	O
handle_comments	bool
)	O
{	O
if	O
(	O
this	pointer
->	O
comment	pointer
!=	O
NULL	O
)	O
{	O
string_list_free	function
(	O
this	pointer
->	O
comment	pointer
)	O
;	O
this	pointer
->	O
comment	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
this	pointer
->	O
comment_dot	pointer
!=	O
NULL	O
)	O
{	O
string_list_free	function
(	O
this	pointer
->	O
comment_dot	pointer
)	O
;	O
this	pointer
->	O
comment_dot	pointer
=	O
NULL	O
;	O
}	O
}	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
this	pointer
->	O
filepos_count	long
;	O
++	O
j	long
)	O
free	function
(	O
this	pointer
->	O
filepos	pointer
[	O
j	long
]	O
.	O
file_name	pointer
)	O
;	O
if	O
(	O
this	pointer
->	O
filepos	pointer
!=	O
NULL	O
)	O
free	function
(	O
this	pointer
->	O
filepos	pointer
)	O
;	O
this	pointer
->	O
filepos_count	long
=	O
0	int
;	O
this	pointer
->	O
filepos	pointer
=	O
NULL	O
;	O
this	pointer
->	O
is_fuzzy	bool
=	O
false	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NFORMATS	int
;	O
i	long
++	O
)	O
this	pointer
->	O
is_format	enum
[	O
i	long
]	O
=	O
undecided	int
;	O
this	pointer
->	O
range	struct
.	O
min	int
=	O
-	O
1	int
;	O
this	pointer
->	O
range	struct
.	O
max	int
=	O
-	O
1	int
;	O
this	pointer
->	O
do_wrap	enum
=	O
undecided	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NSYNTAXCHECKS	int
;	O
i	long
++	O
)	O
this	pointer
->	O
do_syntax_check	array
[	O
i	long
]	O
=	O
undecided	int
;	O
}	O
void	O
default_directive_domain	function
(	O
abstract_catalog_reader_ty	struct
*	O
that	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
default_catalog_reader_ty	struct
*	O
this	pointer
=	O
(	O
default_catalog_reader_ty	struct
*	O
)	O
that	pointer
;	O
call_set_domain	function
(	O
this	pointer
,	O
name	pointer
)	O
;	O
default_reset_comment_state	function
(	O
this	pointer
)	O
;	O
}	O
void	O
default_directive_message	function
(	O
abstract_catalog_reader_ty	struct
*	O
that	pointer
,	O
char	O
*	O
msgctxt	pointer
,	O
char	O
*	O
msgid	pointer
,	O
lex_pos_ty	struct
*	O
msgid_pos	pointer
,	O
char	O
*	O
msgid_plural	pointer
,	O
char	O
*	O
msgstr	pointer
,	O
size_t	long
msgstr_len	long
,	O
lex_pos_ty	struct
*	O
msgstr_pos	pointer
,	O
char	O
*	O
prev_msgctxt	pointer
,	O
char	O
*	O
prev_msgid	pointer
,	O
char	O
*	O
prev_msgid_plural	pointer
,	O
bool	bool
force_fuzzy	bool
,	O
bool	bool
obsolete	bool
)	O
{	O
default_catalog_reader_ty	struct
*	O
this	pointer
=	O
(	O
default_catalog_reader_ty	struct
*	O
)	O
that	pointer
;	O
call_add_message	function
(	O
this	pointer
,	O
msgctxt	pointer
,	O
msgid	pointer
,	O
msgid_pos	pointer
,	O
msgid_plural	pointer
,	O
msgstr	pointer
,	O
msgstr_len	long
,	O
msgstr_pos	pointer
,	O
prev_msgctxt	pointer
,	O
prev_msgid	pointer
,	O
prev_msgid_plural	pointer
,	O
force_fuzzy	bool
,	O
obsolete	bool
)	O
;	O
default_reset_comment_state	function
(	O
this	pointer
)	O
;	O
}	O
void	O
default_comment	function
(	O
abstract_catalog_reader_ty	struct
*	O
that	pointer
,	O
const	O
char	O
*	O
s	pointer
)	O
{	O
default_catalog_reader_ty	struct
*	O
this	pointer
=	O
(	O
default_catalog_reader_ty	struct
*	O
)	O
that	pointer
;	O
if	O
(	O
this	pointer
->	O
handle_comments	bool
)	O
{	O
if	O
(	O
this	pointer
->	O
comment	pointer
==	O
NULL	O
)	O
this	pointer
->	O
comment	pointer
=	O
string_list_alloc	function
(	O
)	O
;	O
string_list_append	function
(	O
this	pointer
->	O
comment	pointer
,	O
s	pointer
)	O
;	O
}	O
}	O
void	O
default_comment_dot	function
(	O
abstract_catalog_reader_ty	struct
*	O
that	pointer
,	O
const	O
char	O
*	O
s	pointer
)	O
{	O
default_catalog_reader_ty	struct
*	O
this	pointer
=	O
(	O
default_catalog_reader_ty	struct
*	O
)	O
that	pointer
;	O
if	O
(	O
this	pointer
->	O
handle_comments	bool
)	O
{	O
if	O
(	O
this	pointer
->	O
comment_dot	pointer
==	O
NULL	O
)	O
this	pointer
->	O
comment_dot	pointer
=	O
string_list_alloc	function
(	O
)	O
;	O
string_list_append	function
(	O
this	pointer
->	O
comment_dot	pointer
,	O
s	pointer
)	O
;	O
}	O
}	O
void	O
default_comment_filepos	function
(	O
abstract_catalog_reader_ty	struct
*	O
that	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
size_t	long
line	long
)	O
{	O
default_catalog_reader_ty	struct
*	O
this	pointer
=	O
(	O
default_catalog_reader_ty	struct
*	O
)	O
that	pointer
;	O
size_t	long
nbytes	long
;	O
lex_pos_ty	struct
*	O
pp	pointer
;	O
nbytes	long
=	O
(	O
this	pointer
->	O
filepos_count	long
+	O
1	int
)	O
*	O
sizeof	O
(	O
this	pointer
->	O
filepos	pointer
[	O
0	int
]	O
)	O
;	O
this	pointer
->	O
filepos	pointer
=	O
xrealloc	function
(	O
this	pointer
->	O
filepos	pointer
,	O
nbytes	long
)	O
;	O
pp	pointer
=	O
&	O
this	pointer
->	O
filepos	pointer
[	O
this	pointer
->	O
filepos_count	long
++	O
]	O
;	O
pp	pointer
->	O
file_name	pointer
=	O
xstrdup	function
(	O
name	pointer
)	O
;	O
pp	pointer
->	O
line_number	long
=	O
line	long
;	O
}	O
void	O
default_comment_special	function
(	O
abstract_catalog_reader_ty	struct
*	O
that	pointer
,	O
const	O
char	O
*	O
s	pointer
)	O
{	O
default_catalog_reader_ty	struct
*	O
this	pointer
=	O
(	O
default_catalog_reader_ty	struct
*	O
)	O
that	pointer
;	O
po_parse_comment_special	function
(	O
s	pointer
,	O
&	O
this	pointer
->	O
is_fuzzy	bool
,	O
this	pointer
->	O
is_format	enum
,	O
&	O
this	pointer
->	O
range	struct
,	O
&	O
this	pointer
->	O
do_wrap	enum
,	O
this	pointer
->	O
do_syntax_check	array
)	O
;	O
}	O
void	O
default_set_domain	function
(	O
default_catalog_reader_ty	struct
*	O
this	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
if	O
(	O
this	pointer
->	O
allow_domain_directives	bool
)	O
this	pointer
->	O
domain	pointer
=	O
name	pointer
;	O
else	O
{	O
po_gram_error_at_line	function
(	O
&	O
gram_pos	struct
,	O
_	O
(	O
"this file may not contain domain directives"	pointer
)	O
)	O
;	O
free	function
(	O
name	pointer
)	O
;	O
}	O
}	O
void	O
default_add_message	function
(	O
default_catalog_reader_ty	struct
*	O
this	pointer
,	O
char	O
*	O
msgctxt	pointer
,	O
char	O
*	O
msgid	pointer
,	O
lex_pos_ty	struct
*	O
msgid_pos	pointer
,	O
char	O
*	O
msgid_plural	pointer
,	O
char	O
*	O
msgstr	pointer
,	O
size_t	long
msgstr_len	long
,	O
lex_pos_ty	struct
*	O
msgstr_pos	pointer
,	O
char	O
*	O
prev_msgctxt	pointer
,	O
char	O
*	O
prev_msgid	pointer
,	O
char	O
*	O
prev_msgid_plural	pointer
,	O
bool	bool
force_fuzzy	bool
,	O
bool	bool
obsolete	bool
)	O
{	O
message_ty	struct
*	O
mp	pointer
;	O
if	O
(	O
this	pointer
->	O
mdlp	pointer
!=	O
NULL	O
)	O
this	pointer
->	O
mlp	pointer
=	O
msgdomain_list_sublist	function
(	O
this	pointer
->	O
mdlp	pointer
,	O
this	pointer
->	O
domain	pointer
,	O
true	int
)	O
;	O
if	O
(	O
this	pointer
->	O
allow_duplicates	bool
&&	O
msgid	pointer
[	O
0	int
]	O
!=	O
'\0'	O
)	O
mp	pointer
=	O
NULL	O
;	O
else	O
mp	pointer
=	O
message_list_search	function
(	O
this	pointer
->	O
mlp	pointer
,	O
msgctxt	pointer
,	O
msgid	pointer
)	O
;	O
if	O
(	O
mp	pointer
)	O
{	O
if	O
(	O
!	O
(	O
this	pointer
->	O
allow_duplicates_if_same_msgstr	bool
&&	O
msgstr_len	long
==	O
mp	pointer
->	O
msgstr_len	long
&&	O
memcmp	function
(	O
msgstr	pointer
,	O
mp	pointer
->	O
msgstr	pointer
,	O
msgstr_len	long
)	O
==	O
0	int
)	O
)	O
{	O
po_xerror2	pointer
(	O
PO_SEVERITY_ERROR	int
,	O
NULL	O
,	O
msgid_pos	pointer
->	O
file_name	pointer
,	O
msgid_pos	pointer
->	O
line_number	long
,	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
,	O
false	int
,	O
_	O
(	O
"duplicate message definition"	pointer
)	O
,	O
mp	pointer
,	O
NULL	O
,	O
0	int
,	O
0	int
,	O
false	int
,	O
_	O
(	O
"this is the location of the first definition"	pointer
)	O
)	O
;	O
}	O
free	function
(	O
msgid	pointer
)	O
;	O
if	O
(	O
msgid_plural	pointer
!=	O
NULL	O
)	O
free	function
(	O
msgid_plural	pointer
)	O
;	O
free	function
(	O
msgstr	pointer
)	O
;	O
if	O
(	O
msgctxt	pointer
!=	O
NULL	O
)	O
free	function
(	O
msgctxt	pointer
)	O
;	O
if	O
(	O
prev_msgctxt	pointer
!=	O
NULL	O
)	O
free	function
(	O
prev_msgctxt	pointer
)	O
;	O
if	O
(	O
prev_msgid	pointer
!=	O
NULL	O
)	O
free	function
(	O
prev_msgid	pointer
)	O
;	O
if	O
(	O
prev_msgid_plural	pointer
!=	O
NULL	O
)	O
free	function
(	O
prev_msgid_plural	pointer
)	O
;	O
default_copy_comment_state	function
(	O
this	pointer
,	O
mp	pointer
)	O
;	O
}	O
else	O
{	O
mp	pointer
=	O
message_alloc	function
(	O
msgctxt	pointer
,	O
msgid	pointer
,	O
msgid_plural	pointer
,	O
msgstr	pointer
,	O
msgstr_len	long
,	O
msgstr_pos	pointer
)	O
;	O
if	O
(	O
msgid_plural	pointer
!=	O
NULL	O
)	O
free	function
(	O
msgid_plural	pointer
)	O
;	O
mp	pointer
->	O
prev_msgctxt	pointer
=	O
prev_msgctxt	pointer
;	O
mp	pointer
->	O
prev_msgid	pointer
=	O
prev_msgid	pointer
;	O
mp	pointer
->	O
prev_msgid_plural	pointer
=	O
prev_msgid_plural	pointer
;	O
mp	pointer
->	O
obsolete	bool
=	O
obsolete	bool
;	O
default_copy_comment_state	function
(	O
this	pointer
,	O
mp	pointer
)	O
;	O
if	O
(	O
force_fuzzy	bool
)	O
mp	pointer
->	O
is_fuzzy	bool
=	O
true	int
;	O
call_frob_new_message	function
(	O
this	pointer
,	O
mp	pointer
,	O
msgid_pos	pointer
,	O
msgstr_pos	pointer
)	O
;	O
message_list_append	function
(	O
this	pointer
->	O
mlp	pointer
,	O
mp	pointer
)	O
;	O
}	O
}	O
static	O
default_catalog_reader_class_ty	struct
default_methods	struct
=	O
{	O
{	O
sizeof	O
(	O
default_catalog_reader_ty	struct
)	O
,	O
default_constructor	function
,	O
default_destructor	function
,	O
default_parse_brief	function
,	O
default_parse_debrief	function
,	O
default_directive_domain	function
,	O
default_directive_message	function
,	O
default_comment	function
,	O
default_comment_dot	function
,	O
default_comment_filepos	function
,	O
default_comment_special	function
}	O
,	O
default_set_domain	function
,	O
default_add_message	function
,	O
NULL	O
}	O
;	O
default_catalog_reader_ty	struct
*	O
default_catalog_reader_alloc	function
(	O
default_catalog_reader_class_ty	struct
*	O
method_table	pointer
)	O
{	O
return	O
(	O
default_catalog_reader_ty	struct
*	O
)	O
catalog_reader_alloc	function
(	O
&	O
method_table	pointer
->	O
super	struct
)	O
;	O
}	O
bool	bool
allow_duplicates	bool
=	O
false	int
;	O
msgdomain_list_ty	struct
*	O
read_catalog_stream	function
(	O
FILE	struct
*	O
fp	pointer
,	O
const	O
char	O
*	O
real_filename	pointer
,	O
const	O
char	O
*	O
logical_filename	pointer
,	O
catalog_input_format_ty	pointer
input_syntax	pointer
)	O
{	O
default_catalog_reader_ty	struct
*	O
pop	pointer
;	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
;	O
pop	pointer
=	O
default_catalog_reader_alloc	function
(	O
&	O
default_methods	struct
)	O
;	O
pop	pointer
->	O
handle_comments	bool
=	O
true	int
;	O
pop	pointer
->	O
allow_domain_directives	bool
=	O
true	int
;	O
pop	pointer
->	O
allow_duplicates	bool
=	O
allow_duplicates	bool
;	O
pop	pointer
->	O
allow_duplicates_if_same_msgstr	bool
=	O
false	int
;	O
pop	pointer
->	O
file_name	pointer
=	O
real_filename	pointer
;	O
pop	pointer
->	O
mdlp	pointer
=	O
msgdomain_list_alloc	function
(	O
!	O
pop	pointer
->	O
allow_duplicates	bool
)	O
;	O
pop	pointer
->	O
mlp	pointer
=	O
msgdomain_list_sublist	function
(	O
pop	pointer
->	O
mdlp	pointer
,	O
pop	pointer
->	O
domain	pointer
,	O
true	int
)	O
;	O
if	O
(	O
input_syntax	pointer
->	O
produces_utf8	bool
)	O
pop	pointer
->	O
mdlp	pointer
->	O
encoding	pointer
=	O
po_charset_utf8	pointer
;	O
po_lex_pass_obsolete_entries	function
(	O
true	int
)	O
;	O
catalog_reader_parse	function
(	O
(	O
abstract_catalog_reader_ty	struct
*	O
)	O
pop	pointer
,	O
fp	pointer
,	O
real_filename	pointer
,	O
logical_filename	pointer
,	O
input_syntax	pointer
)	O
;	O
mdlp	pointer
=	O
pop	pointer
->	O
mdlp	pointer
;	O
catalog_reader_free	function
(	O
(	O
abstract_catalog_reader_ty	struct
*	O
)	O
pop	pointer
)	O
;	O
return	O
mdlp	pointer
;	O
}	O
msgdomain_list_ty	struct
*	O
read_catalog_file	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
catalog_input_format_ty	pointer
input_syntax	pointer
)	O
{	O
char	O
*	O
real_filename	pointer
;	O
FILE	struct
*	O
fp	pointer
=	O
open_catalog_file	function
(	O
filename	pointer
,	O
&	O
real_filename	pointer
,	O
true	int
)	O
;	O
msgdomain_list_ty	struct
*	O
result	pointer
;	O
result	pointer
=	O
read_catalog_stream	function
(	O
fp	pointer
,	O
real_filename	pointer
,	O
filename	pointer
,	O
input_syntax	pointer
)	O
;	O
if	O
(	O
fp	pointer
!=	O
stdin	pointer
)	O
fclose	function
(	O
fp	pointer
)	O
;	O
return	O
result	pointer
;	O
}	O
