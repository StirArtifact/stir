char	O
*	O
sh_single_quote	function
(	O
string	pointer
)	O
char	O
*	O
string	pointer
;	O
{	O
register	O
int	O
c	int
;	O
char	O
*	O
result	pointer
,	O
*	O
r	pointer
,	O
*	O
s	pointer
;	O
result	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
3	int
+	O
(	O
4	int
*	O
strlen	function
(	O
string	pointer
)	O
)	O
)	O
;	O
r	pointer
=	O
result	pointer
;	O
*	O
r	pointer
++	O
=	O
'\''	O
;	O
for	O
(	O
s	pointer
=	O
string	pointer
;	O
s	pointer
&&	O
(	O
c	int
=	O
*	O
s	pointer
)	O
;	O
s	pointer
++	O
)	O
{	O
*	O
r	pointer
++	O
=	O
c	int
;	O
if	O
(	O
c	int
==	O
'\''	O
)	O
{	O
*	O
r	pointer
++	O
=	O
'\\'	O
;	O
*	O
r	pointer
++	O
=	O
'\''	O
;	O
*	O
r	pointer
++	O
=	O
'\''	O
;	O
}	O
}	O
*	O
r	pointer
++	O
=	O
'\''	O
;	O
*	O
r	pointer
=	O
'\0'	O
;	O
return	O
(	O
result	pointer
)	O
;	O
}	O
static	O
char	O
setenv_buf	array
[	O
INT_STRLEN_BOUND	O
(	O
int	O
)	O
+	O
1	int
]	O
;	O
static	O
char	O
putenv_buf1	array
[	O
INT_STRLEN_BOUND	O
(	O
int	O
)	O
+	O
6	int
+	O
1	int
]	O
;	O
static	O
char	O
putenv_buf2	array
[	O
INT_STRLEN_BOUND	O
(	O
int	O
)	O
+	O
8	int
+	O
1	int
]	O
;	O
void	O
sh_set_lines_and_columns	function
(	O
lines	int
,	O
cols	int
)	O
int	O
lines	int
,	O
cols	int
;	O
{	O
sprintf	function
(	O
setenv_buf	array
,	O
"%d"	pointer
,	O
lines	int
)	O
;	O
setenv	function
(	O
"LINES"	pointer
,	O
setenv_buf	array
,	O
1	int
)	O
;	O
sprintf	function
(	O
setenv_buf	array
,	O
"%d"	pointer
,	O
cols	int
)	O
;	O
setenv	function
(	O
"COLUMNS"	pointer
,	O
setenv_buf	array
,	O
1	int
)	O
;	O
}	O
char	O
*	O
sh_get_env_value	function
(	O
varname	pointer
)	O
const	O
char	O
*	O
varname	pointer
;	O
{	O
return	O
(	O
(	O
char	O
*	O
)	O
getenv	function
(	O
varname	pointer
)	O
)	O
;	O
}	O
char	O
*	O
sh_get_home_dir	function
(	O
)	O
{	O
static	O
char	O
*	O
home_dir	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
struct	O
passwd	struct
*	O
entry	pointer
;	O
if	O
(	O
home_dir	pointer
)	O
return	O
(	O
home_dir	pointer
)	O
;	O
home_dir	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
entry	pointer
=	O
getpwuid	function
(	O
getuid	function
(	O
)	O
)	O
;	O
if	O
(	O
entry	pointer
)	O
home_dir	pointer
=	O
savestring	O
(	O
entry	pointer
->	O
pw_dir	pointer
)	O
;	O
endpwent	function
(	O
)	O
;	O
return	O
(	O
home_dir	pointer
)	O
;	O
}	O
int	O
sh_unset_nodelay_mode	function
(	O
fd	int
)	O
int	O
fd	int
;	O
{	O
int	O
flags	int
,	O
bflags	int
;	O
if	O
(	O
(	O
flags	int
=	O
fcntl	function
(	O
fd	int
,	O
F_GETFL	int
,	O
0	int
)	O
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
bflags	int
=	O
0	int
;	O
bflags	int
|=	O
O_NONBLOCK	int
;	O
bflags	int
|=	O
O_NDELAY	O
;	O
if	O
(	O
flags	int
&	O
bflags	int
)	O
{	O
flags	int
&=	O
~	O
bflags	int
;	O
return	O
(	O
fcntl	function
(	O
fd	int
,	O
F_SETFL	int
,	O
flags	int
)	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
