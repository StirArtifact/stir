static	O
int	O
yylex	function
(	O
YYSTYPE	union
*	O
lval	pointer
,	O
struct	O
cldr_plural_parse_args	struct
*	O
arg	pointer
)	O
;	O
static	O
void	O
yyerror	function
(	O
struct	O
cldr_plural_parse_args	struct
*	O
arg	pointer
,	O
const	O
char	O
*	O
str	pointer
)	O
;	O
static	O
struct	O
cldr_plural_rule_ty	struct
*	O
new_rule	function
(	O
char	O
*	O
name	pointer
,	O
struct	O
cldr_plural_condition_ty	struct
*	O
condition	pointer
)	O
{	O
struct	O
cldr_plural_rule_ty	struct
*	O
result	pointer
=	O
XMALLOC	O
(	O
struct	O
cldr_plural_rule_ty	struct
)	O
;	O
result	pointer
->	O
name	pointer
=	O
name	pointer
;	O
result	pointer
->	O
condition	pointer
=	O
condition	pointer
;	O
return	O
result	pointer
;	O
}	O
static	O
struct	O
cldr_plural_condition_ty	struct
*	O
new_leaf_condition	function
(	O
struct	O
cldr_plural_relation_ty	struct
*	O
relation	pointer
)	O
{	O
struct	O
cldr_plural_condition_ty	struct
*	O
result	pointer
=	O
XMALLOC	O
(	O
struct	O
cldr_plural_condition_ty	struct
)	O
;	O
result	pointer
->	O
type	enum
=	O
CLDR_PLURAL_CONDITION_RELATION	int
;	O
result	pointer
->	O
value	union
.	O
relation	pointer
=	O
relation	pointer
;	O
return	O
result	pointer
;	O
}	O
static	O
struct	O
cldr_plural_condition_ty	struct
*	O
new_branch_condition	function
(	O
enum	O
cldr_plural_condition	enum
type	enum
,	O
struct	O
cldr_plural_condition_ty	struct
*	O
condition0	pointer
,	O
struct	O
cldr_plural_condition_ty	struct
*	O
condition1	pointer
)	O
{	O
struct	O
cldr_plural_condition_ty	struct
*	O
result	pointer
=	O
XMALLOC	O
(	O
struct	O
cldr_plural_condition_ty	struct
)	O
;	O
result	pointer
->	O
type	enum
=	O
type	enum
;	O
result	pointer
->	O
value	union
.	O
conditions	array
[	O
0	int
]	O
=	O
condition0	pointer
;	O
result	pointer
->	O
value	union
.	O
conditions	array
[	O
1	int
]	O
=	O
condition1	pointer
;	O
return	O
result	pointer
;	O
}	O
static	O
struct	O
cldr_plural_relation_ty	struct
*	O
new_relation	function
(	O
struct	O
cldr_plural_expression_ty	struct
*	O
expression	pointer
,	O
enum	O
cldr_plural_relation	enum
type	enum
,	O
struct	O
cldr_plural_range_list_ty	struct
*	O
ranges	pointer
)	O
{	O
struct	O
cldr_plural_relation_ty	struct
*	O
result	pointer
=	O
XMALLOC	O
(	O
struct	O
cldr_plural_relation_ty	struct
)	O
;	O
result	pointer
->	O
expression	pointer
=	O
expression	pointer
;	O
result	pointer
->	O
type	enum
=	O
type	enum
;	O
result	pointer
->	O
ranges	pointer
=	O
ranges	pointer
;	O
return	O
result	pointer
;	O
}	O
static	O
struct	O
cldr_plural_expression_ty	struct
*	O
new_expression	function
(	O
int	O
operand	int
,	O
int	O
mod	int
)	O
{	O
struct	O
cldr_plural_expression_ty	struct
*	O
result	pointer
=	O
XMALLOC	O
(	O
struct	O
cldr_plural_expression_ty	struct
)	O
;	O
result	pointer
->	O
operand	int
=	O
operand	int
;	O
result	pointer
->	O
mod	int
=	O
mod	int
;	O
return	O
result	pointer
;	O
}	O
static	O
struct	O
cldr_plural_range_list_ty	struct
*	O
add_range	function
(	O
struct	O
cldr_plural_range_list_ty	struct
*	O
ranges	pointer
,	O
struct	O
cldr_plural_range_ty	struct
*	O
range	pointer
)	O
{	O
if	O
(	O
ranges	pointer
->	O
nitems	long
==	O
ranges	pointer
->	O
nitems_max	long
)	O
{	O
ranges	pointer
->	O
nitems_max	long
=	O
ranges	pointer
->	O
nitems_max	long
*	O
2	int
+	O
1	int
;	O
ranges	pointer
->	O
items	pointer
=	O
xrealloc	function
(	O
ranges	pointer
->	O
items	pointer
,	O
sizeof	O
(	O
struct	O
cldr_plural_range_ty	struct
*	O
)	O
*	O
ranges	pointer
->	O
nitems_max	long
)	O
;	O
}	O
ranges	pointer
->	O
items	pointer
[	O
ranges	pointer
->	O
nitems	long
++	O
]	O
=	O
range	pointer
;	O
return	O
ranges	pointer
;	O
}	O
static	O
struct	O
cldr_plural_range_ty	struct
*	O
new_range	function
(	O
struct	O
cldr_plural_operand_ty	struct
*	O
start	pointer
,	O
struct	O
cldr_plural_operand_ty	struct
*	O
end	pointer
)	O
{	O
struct	O
cldr_plural_range_ty	struct
*	O
result	pointer
=	O
XMALLOC	O
(	O
struct	O
cldr_plural_range_ty	struct
)	O
;	O
result	pointer
->	O
start	pointer
=	O
start	pointer
;	O
result	pointer
->	O
end	pointer
=	O
end	pointer
;	O
return	O
result	pointer
;	O
}	O
typedef	O
unsigned	O
char	O
yytype_uint8	char
;	O
typedef	O
signed	O
char	O
yytype_int8	char
;	O
typedef	O
unsigned	O
short	O
yytype_uint16	short
;	O
typedef	O
short	O
yytype_int16	short
;	O
union	O
yyalloc	union
{	O
yytype_int16	short
yyss_alloc	short
;	O
YYSTYPE	union
yyvs_alloc	union
;	O
}	O
;	O
static	O
const	O
yytype_uint8	char
yytranslate	array
[	O
]	O
=	O
{	O
0	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
17	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
18	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
19	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
15	int
,	O
14	int
,	O
2	int
,	O
16	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
20	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
1	int
,	O
2	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
10	int
,	O
11	int
,	O
12	int
,	O
13	int
}	O
;	O
static	O
const	O
yytype_int8	char
yypact	array
[	O
]	O
=	O
{	O
3	int
,	O
-	O
11	int
,	O
-	O
7	int
,	O
0	int
,	O
-	O
20	int
,	O
4	int
,	O
-	O
2	int
,	O
-	O
20	int
,	O
3	int
,	O
-	O
9	int
,	O
-	O
20	int
,	O
8	int
,	O
2	int
,	O
1	int
,	O
15	int
,	O
-	O
20	int
,	O
-	O
1	int
,	O
-	O
20	int
,	O
5	int
,	O
6	int
,	O
-	O
20	int
,	O
9	int
,	O
-	O
20	int
,	O
-	O
9	int
,	O
-	O
20	int
,	O
10	int
,	O
-	O
2	int
,	O
-	O
20	int
,	O
-	O
2	int
,	O
11	int
,	O
11	int
,	O
12	int
,	O
7	int
,	O
-	O
5	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
15	int
,	O
-	O
20	int
,	O
19	int
,	O
13	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
13	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
16	int
,	O
11	int
,	O
-	O
20	int
,	O
-	O
20	int
}	O
;	O
static	O
const	O
yytype_uint8	char
yydefact	array
[	O
]	O
=	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
2	int
,	O
20	int
,	O
0	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
5	int
,	O
22	int
,	O
12	int
,	O
20	int
,	O
6	int
,	O
8	int
,	O
0	int
,	O
3	int
,	O
31	int
,	O
29	int
,	O
21	int
,	O
27	int
,	O
25	int
,	O
0	int
,	O
19	int
,	O
0	int
,	O
0	int
,	O
4	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
24	int
,	O
23	int
,	O
13	int
,	O
7	int
,	O
9	int
,	O
17	int
,	O
10	int
,	O
14	int
,	O
16	int
,	O
11	int
,	O
32	int
,	O
30	int
,	O
28	int
,	O
26	int
,	O
0	int
,	O
0	int
,	O
18	int
,	O
15	int
}	O
;	O
static	O
const	O
yytype_int8	char
yypgoto	array
[	O
]	O
=	O
{	O
-	O
20	int
,	O
-	O
20	int
,	O
21	int
,	O
-	O
20	int
,	O
14	int
,	O
17	int
,	O
-	O
20	int
,	O
18	int
,	O
-	O
19	int
,	O
-	O
20	int
,	O
20	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
23	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
22	int
}	O
;	O
static	O
const	O
yytype_int8	char
yydefgoto	array
[	O
]	O
=	O
{	O
-	O
1	int
,	O
3	int
,	O
4	int
,	O
13	int
,	O
14	int
,	O
15	int
,	O
16	int
,	O
40	int
,	O
41	int
,	O
42	int
,	O
10	int
,	O
11	int
,	O
24	int
,	O
20	int
,	O
21	int
,	O
34	int
,	O
22	int
}	O
;	O
static	O
const	O
yytype_uint8	char
yytable	array
[	O
]	O
=	O
{	O
7	int
,	O
46	int
,	O
18	int
,	O
19	int
,	O
5	int
,	O
26	int
,	O
18	int
,	O
19	int
,	O
6	int
,	O
9	int
,	O
1	int
,	O
12	int
,	O
9	int
,	O
2	int
,	O
8	int
,	O
29	int
,	O
30	int
,	O
23	int
,	O
28	int
,	O
45	int
,	O
25	int
,	O
36	int
,	O
39	int
,	O
44	int
,	O
48	int
,	O
31	int
,	O
32	int
,	O
50	int
,	O
33	int
,	O
17	int
,	O
51	int
,	O
0	int
,	O
49	int
,	O
27	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
37	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
38	int
,	O
35	int
,	O
0	int
,	O
43	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
47	int
}	O
;	O
static	O
const	O
yytype_int8	char
yycheck	array
[	O
]	O
=	O
{	O
0	int
,	O
6	int
,	O
11	int
,	O
12	int
,	O
15	int
,	O
4	int
,	O
11	int
,	O
12	int
,	O
15	int
,	O
8	int
,	O
7	int
,	O
13	int
,	O
8	int
,	O
10	int
,	O
14	int
,	O
16	int
,	O
17	int
,	O
9	int
,	O
3	int
,	O
12	int
,	O
18	int
,	O
11	int
,	O
11	int
,	O
11	int
,	O
5	int
,	O
20	int
,	O
20	int
,	O
11	int
,	O
19	int
,	O
8	int
,	O
49	int
,	O
-	O
1	int
,	O
19	int
,	O
13	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
26	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
28	int
,	O
23	int
,	O
-	O
1	int
,	O
30	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
33	int
}	O
;	O
static	O
const	O
yytype_uint8	char
yystos	array
[	O
]	O
=	O
{	O
0	int
,	O
7	int
,	O
10	int
,	O
22	int
,	O
23	int
,	O
15	int
,	O
15	int
,	O
0	int
,	O
14	int
,	O
8	int
,	O
31	int
,	O
32	int
,	O
13	int
,	O
24	int
,	O
25	int
,	O
26	int
,	O
27	int
,	O
23	int
,	O
11	int
,	O
12	int
,	O
34	int
,	O
35	int
,	O
37	int
,	O
9	int
,	O
33	int
,	O
18	int
,	O
4	int
,	O
31	int
,	O
3	int
,	O
16	int
,	O
17	int
,	O
20	int
,	O
20	int
,	O
19	int
,	O
36	int
,	O
34	int
,	O
11	int
,	O
25	int
,	O
26	int
,	O
11	int
,	O
28	int
,	O
29	int
,	O
30	int
,	O
28	int
,	O
11	int
,	O
12	int
,	O
6	int
,	O
37	int
,	O
5	int
,	O
19	int
,	O
11	int
,	O
29	int
}	O
;	O
static	O
const	O
yytype_uint8	char
yyr1	array
[	O
]	O
=	O
{	O
0	int
,	O
21	int
,	O
22	int
,	O
22	int
,	O
23	int
,	O
23	int
,	O
24	int
,	O
24	int
,	O
25	int
,	O
25	int
,	O
26	int
,	O
26	int
,	O
27	int
,	O
27	int
,	O
28	int
,	O
28	int
,	O
29	int
,	O
29	int
,	O
30	int
,	O
31	int
,	O
32	int
,	O
32	int
,	O
33	int
,	O
33	int
,	O
34	int
,	O
35	int
,	O
35	int
,	O
36	int
,	O
36	int
,	O
37	int
,	O
37	int
,	O
37	int
,	O
37	int
}	O
;	O
static	O
const	O
yytype_uint8	char
yyr2	array
[	O
]	O
=	O
{	O
0	int
,	O
2	int
,	O
1	int
,	O
3	int
,	O
4	int
,	O
3	int
,	O
1	int
,	O
3	int
,	O
1	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
1	int
,	O
3	int
,	O
1	int
,	O
3	int
,	O
1	int
,	O
1	int
,	O
3	int
,	O
2	int
,	O
0	int
,	O
2	int
,	O
0	int
,	O
2	int
,	O
2	int
,	O
1	int
,	O
3	int
,	O
0	int
,	O
2	int
,	O
1	int
,	O
3	int
,	O
1	int
,	O
3	int
}	O
;	O
static	O
void	O
yydestruct	function
(	O
const	O
char	O
*	O
yymsg	pointer
,	O
int	O
yytype	int
,	O
YYSTYPE	union
*	O
yyvaluep	pointer
,	O
struct	O
cldr_plural_parse_args	struct
*	O
arg	pointer
)	O
{	O
YYUSE	O
(	O
yyvaluep	pointer
)	O
;	O
YYUSE	O
(	O
arg	pointer
)	O
;	O
if	O
(	O
!	O
yymsg	pointer
)	O
yymsg	pointer
=	O
"Deleting"	pointer
;	O
YY_SYMBOL_PRINT	O
(	O
yymsg	pointer
,	O
yytype	int
,	O
yyvaluep	pointer
,	O
yylocationp	O
)	O
;	O
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	O
switch	O
(	O
yytype	int
)	O
{	O
case	O
10	int
:	O
{	O
free	function
(	O
(	O
(	O
*	O
yyvaluep	pointer
)	O
.	O
sval	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
11	int
:	O
{	O
free	function
(	O
(	O
(	O
*	O
yyvaluep	pointer
)	O
.	O
oval	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
12	int
:	O
{	O
free	function
(	O
(	O
(	O
*	O
yyvaluep	pointer
)	O
.	O
oval	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
13	int
:	O
{	O
}	O
break	O
;	O
case	O
24	int
:	O
{	O
cldr_plural_condition_free	function
(	O
(	O
(	O
*	O
yyvaluep	pointer
)	O
.	O
cval	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
25	int
:	O
{	O
cldr_plural_condition_free	function
(	O
(	O
(	O
*	O
yyvaluep	pointer
)	O
.	O
cval	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
26	int
:	O
{	O
cldr_plural_relation_free	function
(	O
(	O
(	O
*	O
yyvaluep	pointer
)	O
.	O
lval	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
27	int
:	O
{	O
free	function
(	O
(	O
(	O
*	O
yyvaluep	pointer
)	O
.	O
eval	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
28	int
:	O
{	O
cldr_plural_range_list_free	function
(	O
(	O
(	O
*	O
yyvaluep	pointer
)	O
.	O
rval	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
29	int
:	O
{	O
cldr_plural_range_free	function
(	O
(	O
(	O
*	O
yyvaluep	pointer
)	O
.	O
gval	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
30	int
:	O
{	O
cldr_plural_range_free	function
(	O
(	O
(	O
*	O
yyvaluep	pointer
)	O
.	O
gval	pointer
)	O
)	O
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
YY_IGNORE_MAYBE_UNINITIALIZED_END	O
}	O
int	O
yyparse	function
(	O
struct	O
cldr_plural_parse_args	struct
*	O
arg	pointer
)	O
{	O
int	O
yychar	int
;	O
YY_INITIAL_VALUE	O
(	O
static	O
YYSTYPE	union
yyval_default	union
;	O
)	O
YYSTYPE	union
yylval	union
YY_INITIAL_VALUE	O
(	O
=	O
yyval_default	union
)	O
;	O
int	O
yynerrs	int
;	O
int	O
yystate	int
;	O
int	O
yyerrstatus	int
;	O
yytype_int16	short
yyssa	array
[	O
YYINITDEPTH	int
]	O
;	O
yytype_int16	short
*	O
yyss	pointer
;	O
yytype_int16	short
*	O
yyssp	pointer
;	O
YYSTYPE	union
yyvsa	array
[	O
YYINITDEPTH	int
]	O
;	O
YYSTYPE	union
*	O
yyvs	pointer
;	O
YYSTYPE	union
*	O
yyvsp	pointer
;	O
YYSIZE_T	O
yystacksize	long
;	O
int	O
yyn	int
;	O
int	O
yyresult	int
;	O
int	O
yytoken	int
=	O
0	int
;	O
YYSTYPE	union
yyval	union
;	O
int	O
yylen	int
=	O
0	int
;	O
yyssp	pointer
=	O
yyss	pointer
=	O
yyssa	array
;	O
yyvsp	pointer
=	O
yyvs	pointer
=	O
yyvsa	array
;	O
yystacksize	long
=	O
YYINITDEPTH	int
;	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Starting parse\n"	pointer
)	O
)	O
;	O
yystate	int
=	O
0	int
;	O
yyerrstatus	int
=	O
0	int
;	O
yynerrs	int
=	O
0	int
;	O
yychar	int
=	O
YYEMPTY	O
;	O
goto	O
yysetstate	O
;	O
yynewstate	O
:	O
yyssp	pointer
++	O
;	O
yysetstate	O
:	O
*	O
yyssp	pointer
=	O
(	O
yytype_int16	short
)	O
yystate	int
;	O
if	O
(	O
yyss	pointer
+	O
yystacksize	long
-	O
1	int
<=	O
yyssp	pointer
)	O
{	O
YYSIZE_T	O
yysize	long
=	O
(	O
YYSIZE_T	O
)	O
(	O
yyssp	pointer
-	O
yyss	pointer
+	O
1	int
)	O
;	O
if	O
(	O
YYMAXDEPTH	int
<=	O
yystacksize	long
)	O
goto	O
yyexhaustedlab	O
;	O
yystacksize	long
*=	O
2	int
;	O
if	O
(	O
YYMAXDEPTH	int
<	O
yystacksize	long
)	O
yystacksize	long
=	O
YYMAXDEPTH	int
;	O
{	O
yytype_int16	short
*	O
yyss1	pointer
=	O
yyss	pointer
;	O
union	O
yyalloc	union
*	O
yyptr	pointer
=	O
(	O
union	O
yyalloc	union
*	O
)	O
YYSTACK_ALLOC	O
(	O
YYSTACK_BYTES	O
(	O
yystacksize	long
)	O
)	O
;	O
if	O
(	O
!	O
yyptr	pointer
)	O
goto	O
yyexhaustedlab	O
;	O
YYSTACK_RELOCATE	O
(	O
yyss_alloc	short
,	O
yyss	pointer
)	O
;	O
YYSTACK_RELOCATE	O
(	O
yyvs_alloc	union
,	O
yyvs	pointer
)	O
;	O
if	O
(	O
yyss1	pointer
!=	O
yyssa	array
)	O
YYSTACK_FREE	O
(	O
yyss1	pointer
)	O
;	O
}	O
yyssp	pointer
=	O
yyss	pointer
+	O
yysize	long
-	O
1	int
;	O
yyvsp	pointer
=	O
yyvs	pointer
+	O
yysize	long
-	O
1	int
;	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Stack size increased to %lu\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
yystacksize	long
)	O
)	O
;	O
if	O
(	O
yyss	pointer
+	O
yystacksize	long
-	O
1	int
<=	O
yyssp	pointer
)	O
YYABORT	O
;	O
}	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Entering state %d\n"	pointer
,	O
yystate	int
)	O
)	O
;	O
if	O
(	O
yystate	int
==	O
YYFINAL	int
)	O
YYACCEPT	O
;	O
goto	O
yybackup	O
;	O
yybackup	O
:	O
yyn	int
=	O
yypact	array
[	O
yystate	int
]	O
;	O
if	O
(	O
yypact_value_is_default	O
(	O
yyn	int
)	O
)	O
goto	O
yydefault	O
;	O
if	O
(	O
yychar	int
==	O
YYEMPTY	O
)	O
{	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Reading a token: "	pointer
)	O
)	O
;	O
yychar	int
=	O
yylex	function
(	O
&	O
yylval	union
,	O
arg	pointer
)	O
;	O
}	O
if	O
(	O
yychar	int
<=	O
YYEOF	int
)	O
{	O
yychar	int
=	O
yytoken	int
=	O
YYEOF	int
;	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Now at end of input.\n"	pointer
)	O
)	O
;	O
}	O
else	O
{	O
yytoken	int
=	O
YYTRANSLATE	O
(	O
yychar	int
)	O
;	O
YY_SYMBOL_PRINT	O
(	O
"Next token is"	pointer
,	O
yytoken	int
,	O
&	O
yylval	union
,	O
&	O
yylloc	O
)	O
;	O
}	O
yyn	int
+=	O
yytoken	int
;	O
if	O
(	O
yyn	int
<	O
0	int
||	O
YYLAST	int
<	O
yyn	int
||	O
yycheck	array
[	O
yyn	int
]	O
!=	O
yytoken	int
)	O
goto	O
yydefault	O
;	O
yyn	int
=	O
yytable	array
[	O
yyn	int
]	O
;	O
if	O
(	O
yyn	int
<=	O
0	int
)	O
{	O
if	O
(	O
yytable_value_is_error	int
(	O
yyn	int
)	O
)	O
goto	O
yyerrlab	O
;	O
yyn	int
=	O
-	O
yyn	int
;	O
goto	O
yyreduce	O
;	O
}	O
if	O
(	O
yyerrstatus	int
)	O
yyerrstatus	int
--	O
;	O
YY_SYMBOL_PRINT	O
(	O
"Shifting"	pointer
,	O
yytoken	int
,	O
&	O
yylval	union
,	O
&	O
yylloc	O
)	O
;	O
yychar	int
=	O
YYEMPTY	O
;	O
yystate	int
=	O
yyn	int
;	O
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	O
*	O
++	O
yyvsp	pointer
=	O
yylval	union
;	O
YY_IGNORE_MAYBE_UNINITIALIZED_END	O
goto	O
yynewstate	O
;	O
yydefault	O
:	O
yyn	int
=	O
yydefact	array
[	O
yystate	int
]	O
;	O
if	O
(	O
yyn	int
==	O
0	int
)	O
goto	O
yyerrlab	O
;	O
goto	O
yyreduce	O
;	O
yyreduce	O
:	O
yylen	int
=	O
yyr2	array
[	O
yyn	int
]	O
;	O
yyval	union
=	O
yyvsp	pointer
[	O
1	int
-	O
yylen	int
]	O
;	O
YY_REDUCE_PRINT	O
(	O
yyn	int
)	O
;	O
switch	O
(	O
yyn	int
)	O
{	O
case	O
4	int
:	O
{	O
struct	O
cldr_plural_rule_ty	struct
*	O
rule	pointer
=	O
new_rule	function
(	O
(	O
yyvsp	pointer
[	O
-	O
3	int
]	O
.	O
sval	pointer
)	O
,	O
(	O
yyvsp	pointer
[	O
-	O
1	int
]	O
.	O
cval	pointer
)	O
)	O
;	O
struct	O
cldr_plural_rule_list_ty	struct
*	O
result	pointer
=	O
arg	pointer
->	O
result	pointer
;	O
if	O
(	O
result	pointer
->	O
nitems	long
==	O
result	pointer
->	O
nitems_max	long
)	O
{	O
result	pointer
->	O
nitems_max	long
=	O
result	pointer
->	O
nitems_max	long
*	O
2	int
+	O
1	int
;	O
result	pointer
->	O
items	pointer
=	O
xrealloc	function
(	O
result	pointer
->	O
items	pointer
,	O
sizeof	O
(	O
struct	O
cldr_plural_rule_ty	struct
*	O
)	O
*	O
result	pointer
->	O
nitems_max	long
)	O
;	O
}	O
result	pointer
->	O
items	pointer
[	O
result	pointer
->	O
nitems	long
++	O
]	O
=	O
rule	pointer
;	O
}	O
break	O
;	O
case	O
6	int
:	O
{	O
(	O
yyval	union
.	O
cval	pointer
)	O
=	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
cval	pointer
)	O
;	O
}	O
break	O
;	O
case	O
7	int
:	O
{	O
(	O
yyval	union
.	O
cval	pointer
)	O
=	O
new_branch_condition	function
(	O
CLDR_PLURAL_CONDITION_OR	int
,	O
(	O
yyvsp	pointer
[	O
-	O
2	int
]	O
.	O
cval	pointer
)	O
,	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
cval	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
8	int
:	O
{	O
(	O
yyval	union
.	O
cval	pointer
)	O
=	O
new_leaf_condition	function
(	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
lval	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
9	int
:	O
{	O
(	O
yyval	union
.	O
cval	pointer
)	O
=	O
new_branch_condition	function
(	O
CLDR_PLURAL_CONDITION_AND	int
,	O
(	O
yyvsp	pointer
[	O
-	O
2	int
]	O
.	O
cval	pointer
)	O
,	O
new_leaf_condition	function
(	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
lval	pointer
)	O
)	O
)	O
;	O
}	O
break	O
;	O
case	O
10	int
:	O
{	O
(	O
yyval	union
.	O
lval	pointer
)	O
=	O
new_relation	function
(	O
(	O
yyvsp	pointer
[	O
-	O
2	int
]	O
.	O
eval	pointer
)	O
,	O
CLDR_PLURAL_RELATION_EQUAL	int
,	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
rval	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
11	int
:	O
{	O
(	O
yyval	union
.	O
lval	pointer
)	O
=	O
new_relation	function
(	O
(	O
yyvsp	pointer
[	O
-	O
2	int
]	O
.	O
eval	pointer
)	O
,	O
CLDR_PLURAL_RELATION_NOT_EQUAL	int
,	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
rval	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
12	int
:	O
{	O
(	O
yyval	union
.	O
eval	pointer
)	O
=	O
new_expression	function
(	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
ival	int
)	O
,	O
0	int
)	O
;	O
}	O
break	O
;	O
case	O
13	int
:	O
{	O
(	O
yyval	union
.	O
eval	pointer
)	O
=	O
new_expression	function
(	O
(	O
yyvsp	pointer
[	O
-	O
2	int
]	O
.	O
ival	int
)	O
,	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
oval	pointer
)	O
->	O
value	union
.	O
ival	int
)	O
;	O
}	O
break	O
;	O
case	O
14	int
:	O
{	O
struct	O
cldr_plural_range_list_ty	struct
*	O
ranges	pointer
=	O
XMALLOC	O
(	O
struct	O
cldr_plural_range_list_ty	struct
)	O
;	O
memset	function
(	O
ranges	pointer
,	O
0	int
,	O
sizeof	O
(	O
struct	O
cldr_plural_range_list_ty	struct
)	O
)	O
;	O
(	O
yyval	union
.	O
rval	pointer
)	O
=	O
add_range	function
(	O
ranges	pointer
,	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
gval	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
15	int
:	O
{	O
(	O
yyval	union
.	O
rval	pointer
)	O
=	O
add_range	function
(	O
(	O
yyvsp	pointer
[	O
-	O
2	int
]	O
.	O
rval	pointer
)	O
,	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
gval	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
16	int
:	O
{	O
(	O
yyval	union
.	O
gval	pointer
)	O
=	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
gval	pointer
)	O
;	O
}	O
break	O
;	O
case	O
17	int
:	O
{	O
(	O
yyval	union
.	O
gval	pointer
)	O
=	O
new_range	function
(	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
oval	pointer
)	O
,	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
oval	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
18	int
:	O
{	O
(	O
yyval	union
.	O
gval	pointer
)	O
=	O
new_range	function
(	O
(	O
yyvsp	pointer
[	O
-	O
2	int
]	O
.	O
oval	pointer
)	O
,	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
oval	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
29	int
:	O
{	O
free	function
(	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
oval	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
30	int
:	O
{	O
free	function
(	O
(	O
yyvsp	pointer
[	O
-	O
2	int
]	O
.	O
oval	pointer
)	O
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
oval	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
31	int
:	O
{	O
free	function
(	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
oval	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
32	int
:	O
{	O
free	function
(	O
(	O
yyvsp	pointer
[	O
-	O
2	int
]	O
.	O
oval	pointer
)	O
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
0	int
]	O
.	O
oval	pointer
)	O
)	O
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
YY_SYMBOL_PRINT	O
(	O
"-> $$ ="	pointer
,	O
yyr1	array
[	O
yyn	int
]	O
,	O
&	O
yyval	union
,	O
&	O
yyloc	O
)	O
;	O
YYPOPSTACK	O
(	O
yylen	int
)	O
;	O
yylen	int
=	O
0	int
;	O
YY_STACK_PRINT	O
(	O
yyss	pointer
,	O
yyssp	pointer
)	O
;	O
*	O
++	O
yyvsp	pointer
=	O
yyval	union
;	O
{	O
const	O
int	O
yylhs	int
=	O
yyr1	array
[	O
yyn	int
]	O
-	O
YYNTOKENS	int
;	O
const	O
int	O
yyi	int
=	O
yypgoto	array
[	O
yylhs	int
]	O
+	O
*	O
yyssp	pointer
;	O
yystate	int
=	O
(	O
0	int
<=	O
yyi	int
&&	O
yyi	int
<=	O
YYLAST	int
&&	O
yycheck	array
[	O
yyi	int
]	O
==	O
*	O
yyssp	pointer
?	O
yytable	array
[	O
yyi	int
]	O
:	O
yydefgoto	array
[	O
yylhs	int
]	O
)	O
;	O
}	O
goto	O
yynewstate	O
;	O
yyerrlab	O
:	O
yytoken	int
=	O
yychar	int
==	O
YYEMPTY	O
?	O
YYEMPTY	O
:	O
YYTRANSLATE	O
(	O
yychar	int
)	O
;	O
if	O
(	O
!	O
yyerrstatus	int
)	O
{	O
++	O
yynerrs	int
;	O
yyerror	function
(	O
arg	pointer
,	O
YY_	O
(	O
"syntax error"	pointer
)	O
)	O
;	O
}	O
if	O
(	O
yyerrstatus	int
==	O
3	int
)	O
{	O
if	O
(	O
yychar	int
<=	O
YYEOF	int
)	O
{	O
if	O
(	O
yychar	int
==	O
YYEOF	int
)	O
YYABORT	O
;	O
}	O
else	O
{	O
yydestruct	function
(	O
"Error: discarding"	pointer
,	O
yytoken	int
,	O
&	O
yylval	union
,	O
arg	pointer
)	O
;	O
yychar	int
=	O
YYEMPTY	O
;	O
}	O
}	O
goto	O
yyerrlab1	O
;	O
yyerrorlab	O
:	O
if	O
(	O
0	int
)	O
goto	O
yyerrorlab	O
;	O
YYPOPSTACK	O
(	O
yylen	int
)	O
;	O
yylen	int
=	O
0	int
;	O
YY_STACK_PRINT	O
(	O
yyss	pointer
,	O
yyssp	pointer
)	O
;	O
yystate	int
=	O
*	O
yyssp	pointer
;	O
goto	O
yyerrlab1	O
;	O
yyerrlab1	O
:	O
yyerrstatus	int
=	O
3	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
yyn	int
=	O
yypact	array
[	O
yystate	int
]	O
;	O
if	O
(	O
!	O
yypact_value_is_default	O
(	O
yyn	int
)	O
)	O
{	O
yyn	int
+=	O
YYTERROR	int
;	O
if	O
(	O
0	int
<=	O
yyn	int
&&	O
yyn	int
<=	O
YYLAST	int
&&	O
yycheck	array
[	O
yyn	int
]	O
==	O
YYTERROR	int
)	O
{	O
yyn	int
=	O
yytable	array
[	O
yyn	int
]	O
;	O
if	O
(	O
0	int
<	O
yyn	int
)	O
break	O
;	O
}	O
}	O
if	O
(	O
yyssp	pointer
==	O
yyss	pointer
)	O
YYABORT	O
;	O
yydestruct	function
(	O
"Error: popping"	pointer
,	O
yystos	array
[	O
yystate	int
]	O
,	O
yyvsp	pointer
,	O
arg	pointer
)	O
;	O
YYPOPSTACK	O
(	O
1	int
)	O
;	O
yystate	int
=	O
*	O
yyssp	pointer
;	O
YY_STACK_PRINT	O
(	O
yyss	pointer
,	O
yyssp	pointer
)	O
;	O
}	O
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	O
*	O
++	O
yyvsp	pointer
=	O
yylval	union
;	O
YY_IGNORE_MAYBE_UNINITIALIZED_END	O
YY_SYMBOL_PRINT	O
(	O
"Shifting"	pointer
,	O
yystos	array
[	O
yyn	int
]	O
,	O
yyvsp	pointer
,	O
yylsp	O
)	O
;	O
yystate	int
=	O
yyn	int
;	O
goto	O
yynewstate	O
;	O
yyacceptlab	O
:	O
yyresult	int
=	O
0	int
;	O
goto	O
yyreturn	O
;	O
yyabortlab	O
:	O
yyresult	int
=	O
1	int
;	O
goto	O
yyreturn	O
;	O
yyexhaustedlab	O
:	O
yyerror	function
(	O
arg	pointer
,	O
YY_	O
(	O
"memory exhausted"	pointer
)	O
)	O
;	O
yyresult	int
=	O
2	int
;	O
yyreturn	O
:	O
if	O
(	O
yychar	int
!=	O
YYEMPTY	O
)	O
{	O
yytoken	int
=	O
YYTRANSLATE	O
(	O
yychar	int
)	O
;	O
yydestruct	function
(	O
"Cleanup: discarding lookahead"	pointer
,	O
yytoken	int
,	O
&	O
yylval	union
,	O
arg	pointer
)	O
;	O
}	O
YYPOPSTACK	O
(	O
yylen	int
)	O
;	O
YY_STACK_PRINT	O
(	O
yyss	pointer
,	O
yyssp	pointer
)	O
;	O
while	O
(	O
yyssp	pointer
!=	O
yyss	pointer
)	O
{	O
yydestruct	function
(	O
"Cleanup: popping"	pointer
,	O
yystos	array
[	O
*	O
yyssp	pointer
]	O
,	O
yyvsp	pointer
,	O
arg	pointer
)	O
;	O
YYPOPSTACK	O
(	O
1	int
)	O
;	O
}	O
if	O
(	O
yyss	pointer
!=	O
yyssa	array
)	O
YYSTACK_FREE	O
(	O
yyss	pointer
)	O
;	O
return	O
yyresult	int
;	O
}	O
static	O
int	O
yylex	function
(	O
YYSTYPE	union
*	O
lval	pointer
,	O
struct	O
cldr_plural_parse_args	struct
*	O
arg	pointer
)	O
{	O
const	O
char	O
*	O
exp	pointer
=	O
arg	pointer
->	O
cp	pointer
;	O
ucs4_t	int
uc	int
;	O
int	O
length	int
;	O
int	O
result	pointer
;	O
static	O
char	O
*	O
buffer	pointer
;	O
static	O
size_t	long
bufmax	long
;	O
size_t	long
bufpos	long
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
exp	pointer
[	O
0	int
]	O
==	O
'\0'	O
)	O
{	O
arg	pointer
->	O
cp	pointer
=	O
exp	pointer
;	O
return	O
YYEOF	int
;	O
}	O
if	O
(	O
exp	pointer
[	O
0	int
]	O
!=	O
' '	O
&&	O
exp	pointer
[	O
0	int
]	O
!=	O
'\t'	O
)	O
break	O
;	O
++	O
exp	pointer
;	O
}	O
length	int
=	O
u8_mbtouc	function
(	O
&	O
uc	int
,	O
(	O
const	O
uint8_t	char
*	O
)	O
exp	pointer
,	O
arg	pointer
->	O
cp_end	pointer
-	O
exp	pointer
)	O
;	O
if	O
(	O
uc	int
==	O
0x2026	int
)	O
{	O
arg	pointer
->	O
cp	pointer
=	O
exp	pointer
+	O
length	int
;	O
return	O
ELLIPSIS	int
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
"..."	pointer
,	O
exp	pointer
,	O
3	int
)	O
==	O
0	int
)	O
{	O
arg	pointer
->	O
cp	pointer
=	O
exp	pointer
+	O
3	int
;	O
return	O
ELLIPSIS	int
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
".."	pointer
,	O
exp	pointer
,	O
2	int
)	O
==	O
0	int
)	O
{	O
arg	pointer
->	O
cp	pointer
=	O
exp	pointer
+	O
2	int
;	O
return	O
RANGE	int
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
"other"	pointer
,	O
exp	pointer
,	O
5	int
)	O
==	O
0	int
)	O
{	O
arg	pointer
->	O
cp	pointer
=	O
exp	pointer
+	O
5	int
;	O
return	O
OTHER	int
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
"@integer"	pointer
,	O
exp	pointer
,	O
8	int
)	O
==	O
0	int
)	O
{	O
arg	pointer
->	O
cp	pointer
=	O
exp	pointer
+	O
8	int
;	O
return	O
AT_INTEGER	int
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
"@decimal"	pointer
,	O
exp	pointer
,	O
8	int
)	O
==	O
0	int
)	O
{	O
arg	pointer
->	O
cp	pointer
=	O
exp	pointer
+	O
8	int
;	O
return	O
AT_DECIMAL	int
;	O
}	O
result	pointer
=	O
*	O
exp	pointer
++	O
;	O
switch	O
(	O
result	pointer
)	O
{	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
{	O
unsigned	O
long	O
int	O
ival	int
=	O
result	pointer
-	O
'0'	O
;	O
while	O
(	O
exp	pointer
[	O
0	int
]	O
>=	O
'0'	O
&&	O
exp	pointer
[	O
0	int
]	O
<=	O
'9'	O
)	O
{	O
ival	int
*=	O
10	int
;	O
ival	int
+=	O
exp	pointer
[	O
0	int
]	O
-	O
'0'	O
;	O
++	O
exp	pointer
;	O
}	O
lval	pointer
->	O
oval	pointer
=	O
XMALLOC	O
(	O
struct	O
cldr_plural_operand_ty	struct
)	O
;	O
if	O
(	O
exp	pointer
[	O
0	int
]	O
==	O
'.'	O
&&	O
exp	pointer
[	O
1	int
]	O
>=	O
'0'	O
&&	O
exp	pointer
[	O
1	int
]	O
<=	O
'9'	O
)	O
{	O
double	O
dval	struct
=	O
ival	int
;	O
int	O
denominator	int
=	O
10	int
,	O
nfractions	int
=	O
0	int
;	O
++	O
exp	pointer
;	O
while	O
(	O
exp	pointer
[	O
0	int
]	O
>=	O
'0'	O
&&	O
exp	pointer
[	O
0	int
]	O
<=	O
'9'	O
)	O
{	O
dval	struct
+=	O
(	O
exp	pointer
[	O
0	int
]	O
-	O
'0'	O
)	O
/	O
(	O
double	O
)	O
denominator	int
;	O
denominator	int
*=	O
10	int
;	O
++	O
nfractions	int
;	O
++	O
exp	pointer
;	O
}	O
lval	pointer
->	O
oval	pointer
->	O
type	enum
=	O
CLDR_PLURAL_OPERAND_DECIMAL	int
;	O
lval	pointer
->	O
oval	pointer
->	O
value	union
.	O
dval	struct
.	O
d	double
=	O
dval	struct
;	O
lval	pointer
->	O
oval	pointer
->	O
value	union
.	O
dval	struct
.	O
nfractions	int
=	O
nfractions	int
;	O
result	pointer
=	O
DECIMAL	int
;	O
}	O
else	O
{	O
lval	pointer
->	O
oval	pointer
->	O
type	enum
=	O
CLDR_PLURAL_OPERAND_INTEGER	int
;	O
lval	pointer
->	O
oval	pointer
->	O
value	union
.	O
ival	int
=	O
ival	int
;	O
result	pointer
=	O
INTEGER	int
;	O
}	O
}	O
break	O
;	O
case	O
'a'	O
:	O
case	O
'b'	O
:	O
case	O
'c'	O
:	O
case	O
'd'	O
:	O
case	O
'e'	O
:	O
case	O
'f'	O
:	O
case	O
'g'	O
:	O
case	O
'h'	O
:	O
case	O
'i'	O
:	O
case	O
'j'	O
:	O
case	O
'k'	O
:	O
case	O
'l'	O
:	O
case	O
'm'	O
:	O
case	O
'n'	O
:	O
case	O
'o'	O
:	O
case	O
'p'	O
:	O
case	O
'q'	O
:	O
case	O
'r'	O
:	O
case	O
's'	O
:	O
case	O
't'	O
:	O
case	O
'u'	O
:	O
case	O
'v'	O
:	O
case	O
'w'	O
:	O
case	O
'x'	O
:	O
case	O
'y'	O
:	O
case	O
'z'	O
:	O
bufpos	long
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
bufpos	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	pointer
=	O
xrealloc	function
(	O
buffer	pointer
,	O
bufmax	long
)	O
;	O
}	O
buffer	pointer
[	O
bufpos	long
++	O
]	O
=	O
result	pointer
;	O
result	pointer
=	O
*	O
exp	pointer
;	O
switch	O
(	O
result	pointer
)	O
{	O
case	O
'a'	O
:	O
case	O
'b'	O
:	O
case	O
'c'	O
:	O
case	O
'd'	O
:	O
case	O
'e'	O
:	O
case	O
'f'	O
:	O
case	O
'g'	O
:	O
case	O
'h'	O
:	O
case	O
'i'	O
:	O
case	O
'j'	O
:	O
case	O
'k'	O
:	O
case	O
'l'	O
:	O
case	O
'm'	O
:	O
case	O
'n'	O
:	O
case	O
'o'	O
:	O
case	O
'p'	O
:	O
case	O
'q'	O
:	O
case	O
'r'	O
:	O
case	O
's'	O
:	O
case	O
't'	O
:	O
case	O
'u'	O
:	O
case	O
'v'	O
:	O
case	O
'w'	O
:	O
case	O
'x'	O
:	O
case	O
'y'	O
:	O
case	O
'z'	O
:	O
++	O
exp	pointer
;	O
continue	O
;	O
default	O
:	O
break	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
bufpos	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	pointer
=	O
xrealloc	function
(	O
buffer	pointer
,	O
bufmax	long
)	O
;	O
}	O
buffer	pointer
[	O
bufpos	long
]	O
=	O
'\0'	O
;	O
if	O
(	O
bufpos	long
==	O
1	int
)	O
{	O
switch	O
(	O
buffer	pointer
[	O
0	int
]	O
)	O
{	O
case	O
'n'	O
:	O
case	O
'i'	O
:	O
case	O
'f'	O
:	O
case	O
't'	O
:	O
case	O
'v'	O
:	O
case	O
'w'	O
:	O
arg	pointer
->	O
cp	pointer
=	O
exp	pointer
;	O
lval	pointer
->	O
ival	int
=	O
buffer	pointer
[	O
0	int
]	O
;	O
return	O
OPERAND	int
;	O
default	O
:	O
break	O
;	O
}	O
}	O
if	O
(	O
strcmp	function
(	O
buffer	pointer
,	O
"and"	pointer
)	O
==	O
0	int
)	O
{	O
arg	pointer
->	O
cp	pointer
=	O
exp	pointer
;	O
return	O
AND	int
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
buffer	pointer
,	O
"or"	pointer
)	O
==	O
0	int
)	O
{	O
arg	pointer
->	O
cp	pointer
=	O
exp	pointer
;	O
return	O
OR	int
;	O
}	O
lval	pointer
->	O
sval	pointer
=	O
xstrdup	function
(	O
buffer	pointer
)	O
;	O
result	pointer
=	O
KEYWORD	int
;	O
break	O
;	O
case	O
'!'	O
:	O
if	O
(	O
exp	pointer
[	O
0	int
]	O
==	O
'='	O
)	O
{	O
++	O
exp	pointer
;	O
result	pointer
=	O
'!'	O
;	O
}	O
else	O
result	pointer
=	O
YYERRCODE	int
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
arg	pointer
->	O
cp	pointer
=	O
exp	pointer
;	O
return	O
result	pointer
;	O
}	O
static	O
void	O
yyerror	function
(	O
struct	O
cldr_plural_parse_args	struct
*	O
arg	pointer
,	O
char	O
const	O
*	O
s	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s\n"	pointer
,	O
s	pointer
)	O
;	O
}	O
