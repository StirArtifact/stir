int	O
gsl_sf_elljac_e	function
(	O
double	O
u	double
,	O
double	O
m	double
,	O
double	O
*	O
sn	pointer
,	O
double	O
*	O
cn	pointer
,	O
double	O
*	O
dn	pointer
)	O
{	O
if	O
(	O
fabs	function
(	O
m	double
)	O
>	O
1.0	int
)	O
{	O
*	O
sn	pointer
=	O
0.0	int
;	O
*	O
cn	pointer
=	O
0.0	int
;	O
*	O
dn	pointer
=	O
0.0	int
;	O
GSL_ERROR	O
(	O
"|m| > 1.0"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
if	O
(	O
fabs	function
(	O
m	double
)	O
<	O
2.0	int
*	O
GSL_DBL_EPSILON	int
)	O
{	O
*	O
sn	pointer
=	O
sin	function
(	O
u	double
)	O
;	O
*	O
cn	pointer
=	O
cos	function
(	O
u	double
)	O
;	O
*	O
dn	pointer
=	O
1.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
fabs	function
(	O
m	double
-	O
1.0	int
)	O
<	O
2.0	int
*	O
GSL_DBL_EPSILON	int
)	O
{	O
*	O
sn	pointer
=	O
tanh	function
(	O
u	double
)	O
;	O
*	O
cn	pointer
=	O
1.0	int
/	O
cosh	function
(	O
u	double
)	O
;	O
*	O
dn	pointer
=	O
*	O
cn	pointer
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
int	O
status	int
=	O
GSL_SUCCESS	int
;	O
const	O
int	O
N	int
=	O
16	int
;	O
double	O
mu	array
[	O
16	int
]	O
;	O
double	O
nu	array
[	O
16	int
]	O
;	O
double	O
c	array
[	O
16	int
]	O
;	O
double	O
d	array
[	O
16	int
]	O
;	O
double	O
sin_umu	double
,	O
cos_umu	double
,	O
t	double
,	O
r	pointer
;	O
int	O
n	int
=	O
0	int
;	O
mu	array
[	O
0	int
]	O
=	O
1.0	int
;	O
nu	array
[	O
0	int
]	O
=	O
sqrt	function
(	O
1.0	int
-	O
m	double
)	O
;	O
while	O
(	O
fabs	function
(	O
mu	array
[	O
n	int
]	O
-	O
nu	array
[	O
n	int
]	O
)	O
>	O
4.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
mu	array
[	O
n	int
]	O
+	O
nu	array
[	O
n	int
]	O
)	O
)	O
{	O
mu	array
[	O
n	int
+	O
1	int
]	O
=	O
0.5	int
*	O
(	O
mu	array
[	O
n	int
]	O
+	O
nu	array
[	O
n	int
]	O
)	O
;	O
nu	array
[	O
n	int
+	O
1	int
]	O
=	O
sqrt	function
(	O
mu	array
[	O
n	int
]	O
*	O
nu	array
[	O
n	int
]	O
)	O
;	O
++	O
n	int
;	O
if	O
(	O
n	int
>=	O
N	int
-	O
1	int
)	O
{	O
status	int
=	O
GSL_EMAXITER	int
;	O
break	O
;	O
}	O
}	O
sin_umu	double
=	O
sin	function
(	O
u	double
*	O
mu	array
[	O
n	int
]	O
)	O
;	O
cos_umu	double
=	O
cos	function
(	O
u	double
*	O
mu	array
[	O
n	int
]	O
)	O
;	O
if	O
(	O
fabs	function
(	O
sin_umu	double
)	O
<	O
fabs	function
(	O
cos_umu	double
)	O
)	O
{	O
t	double
=	O
sin_umu	double
/	O
cos_umu	double
;	O
c	array
[	O
n	int
]	O
=	O
mu	array
[	O
n	int
]	O
*	O
t	double
;	O
d	array
[	O
n	int
]	O
=	O
1.0	int
;	O
while	O
(	O
n	int
>	O
0	int
)	O
{	O
n	int
--	O
;	O
c	array
[	O
n	int
]	O
=	O
d	array
[	O
n	int
+	O
1	int
]	O
*	O
c	array
[	O
n	int
+	O
1	int
]	O
;	O
r	pointer
=	O
(	O
c	array
[	O
n	int
+	O
1	int
]	O
*	O
c	array
[	O
n	int
+	O
1	int
]	O
)	O
/	O
mu	array
[	O
n	int
+	O
1	int
]	O
;	O
d	array
[	O
n	int
]	O
=	O
(	O
r	pointer
+	O
nu	array
[	O
n	int
]	O
)	O
/	O
(	O
r	pointer
+	O
mu	array
[	O
n	int
]	O
)	O
;	O
}	O
*	O
dn	pointer
=	O
sqrt	function
(	O
1.0	int
-	O
m	double
)	O
/	O
d	array
[	O
n	int
]	O
;	O
*	O
cn	pointer
=	O
(	O
*	O
dn	pointer
)	O
*	O
GSL_SIGN	O
(	O
cos_umu	double
)	O
/	O
gsl_hypot	function
(	O
1.0	int
,	O
c	array
[	O
n	int
]	O
)	O
;	O
*	O
sn	pointer
=	O
(	O
*	O
cn	pointer
)	O
*	O
c	array
[	O
n	int
]	O
/	O
sqrt	function
(	O
1.0	int
-	O
m	double
)	O
;	O
}	O
else	O
{	O
t	double
=	O
cos_umu	double
/	O
sin_umu	double
;	O
c	array
[	O
n	int
]	O
=	O
mu	array
[	O
n	int
]	O
*	O
t	double
;	O
d	array
[	O
n	int
]	O
=	O
1.0	int
;	O
while	O
(	O
n	int
>	O
0	int
)	O
{	O
--	O
n	int
;	O
c	array
[	O
n	int
]	O
=	O
d	array
[	O
n	int
+	O
1	int
]	O
*	O
c	array
[	O
n	int
+	O
1	int
]	O
;	O
r	pointer
=	O
(	O
c	array
[	O
n	int
+	O
1	int
]	O
*	O
c	array
[	O
n	int
+	O
1	int
]	O
)	O
/	O
mu	array
[	O
n	int
+	O
1	int
]	O
;	O
d	array
[	O
n	int
]	O
=	O
(	O
r	pointer
+	O
nu	array
[	O
n	int
]	O
)	O
/	O
(	O
r	pointer
+	O
mu	array
[	O
n	int
]	O
)	O
;	O
}	O
*	O
dn	pointer
=	O
d	array
[	O
n	int
]	O
;	O
*	O
sn	pointer
=	O
GSL_SIGN	O
(	O
sin_umu	double
)	O
/	O
gsl_hypot	function
(	O
1.0	int
,	O
c	array
[	O
n	int
]	O
)	O
;	O
*	O
cn	pointer
=	O
c	array
[	O
n	int
]	O
*	O
(	O
*	O
sn	pointer
)	O
;	O
}	O
return	O
status	int
;	O
}	O
}	O
