void	O
cbc_encrypt	O
(	O
const	O
void	O
*	O
ctx	pointer
,	O
nettle_cipher_func	O
*	O
f	pointer
,	O
size_t	O
block_size	O
,	O
uint8_t	pointer
*	O
iv	pointer
,	O
size_t	O
length	long
,	O
uint8_t	O
*	O
dst	pointer
,	O
const	O
uint8_t	O
*	O
src	pointer
)	O
{	O
assert	O
(	O
!	O
(	int
length	O
%	O
block_size	O
)	O
)	O
;	O
for	O
(	O
;	int
length	O
;	O
length	O
-=	O
block_size	int
,	O
src	pointer
+=	O
block_size	int
,	O
dst	pointer
+=	O
block_size	int
)	O
{	O
memxor	O
(	O
iv	pointer
,	O
src	O
,	O
block_size	pointer
)	O
;	O
f	O
(	O
ctx	pointer
,	O
block_size	int
,	O
dst	pointer
,	O
iv	int
)	O
;	O
memcpy	O
(	O
iv	pointer
,	O
dst	pointer
,	O
block_size	pointer
)	O
;	O
}	O
}	O
void	O
cbc_decrypt	function
(	O
const	O
void	O
*	O
ctx	pointer
,	O
nettle_cipher_func	O
*	O
f	pointer
,	O
size_t	O
block_size	long
,	O
uint8_t	pointer
*	O
iv	pointer
,	O
size_t	O
length	long
,	O
uint8_t	O
*	O
dst	pointer
,	O
const	O
uint8_t	O
*	O
src	pointer
)	O
{	O
assert	O
(	O
!	O
(	int
length	O
%	O
block_size	O
)	O
)	O
;	O
if	O
(	O
!	O
length	O
)	O
return	O
;	O
if	O
(	O
src	O
!=	O
dst	O
)	O
{	O
f	O
(	O
ctx	pointer
,	O
length	int
,	O
dst	int
,	O
src	int
)	O
;	O
memxor	O
(	O
dst	pointer
,	O
iv	O
,	O
block_size	int
)	O
;	O
memxor	O
(	O
dst	pointer
+	O
block_size	int
,	O
src	pointer
,	O
length	pointer
-	O
block_size	int
)	O
;	O
memcpy	O
(	O
iv	pointer
,	O
src	pointer
+	O
length	int
-	O
block_size	int
,	O
block_size	int
)	O
;	O
}	O
else	O
{	O
TMP_DECL	O
(	O
buffer	pointer
,	O
uint8_t	O
,	O
CBC_BUFFER_LIMIT	int
)	O
;	O
TMP_DECL	O
(	O
initial_iv	pointer
,	O
uint8_t	int
,	O
NETTLE_MAX_CIPHER_BLOCK_SIZE	int
)	O
;	O
size_t	O
buffer_size	O
;	O
if	O
(	O
length	O
<=	O
CBC_BUFFER_LIMIT	int
)	O
buffer_size	O
=	O
length	int
;	O
else	O
buffer_size	O
=	O
CBC_BUFFER_LIMIT	int
-	O
(	int
CBC_BUFFER_LIMIT	O
%	O
block_size	O
)	O
;	O
TMP_ALLOC	O
(	O
buffer	O
,	O
buffer_size	int
)	O
;	O
TMP_ALLOC	O
(	O
initial_iv	O
,	O
block_size	int
)	O
;	O
for	O
(	O
;	int
length	O
>	O
buffer_size	int
;	O
length	int
-=	O
buffer_size	int
,	O
dst	int
+=	O
buffer_size	int
)	O
{	O
f	O
(	O
ctx	pointer
,	O
buffer_size	int
,	O
buffer	int
,	O
dst	int
)	O
;	O
memcpy	O
(	O
initial_iv	pointer
,	O
iv	pointer
,	O
block_size	int
)	O
;	O
memcpy	O
(	O
iv	pointer
,	O
dst	pointer
+	O
buffer_size	int
-	O
block_size	int
,	O
block_size	int
)	O
;	O
memxor3	O
(	O
dst	pointer
+	O
block_size	int
,	O
buffer	pointer
+	O
block_size	int
,	O
dst	int
,	O
buffer_size	pointer
-	O
block_size	int
)	O
;	O
memxor3	O
(	O
dst	pointer
,	O
buffer	O
,	O
initial_iv	O
,	O
block_size	int
)	O
;	O
}	O
f	O
(	O
ctx	O
,	O
length	int
,	O
buffer	int
,	O
dst	int
)	O
;	O
memcpy	O
(	O
initial_iv	pointer
,	O
iv	pointer
,	O
block_size	int
)	O
;	O
memcpy	O
(	O
iv	pointer
,	O
dst	pointer
+	O
length	int
-	O
block_size	int
,	O
block_size	int
)	O
;	O
memxor3	O
(	O
dst	pointer
+	O
block_size	int
,	O
buffer	pointer
+	O
block_size	int
,	O
dst	pointer
,	O
length	pointer
-	O
block_size	int
)	O
;	O
memxor3	O
(	O
dst	pointer
,	O
buffer	O
,	O
initial_iv	pointer
,	O
block_size	int
)	O
;	O
}	O
}	O