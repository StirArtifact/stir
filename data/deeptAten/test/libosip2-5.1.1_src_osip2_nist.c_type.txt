int	O
__osip_nist_init	O
(	O
osip_nist_t	O
*	O
*	pointer
nist	pointer
,	O
osip_t	O
*	O
osip	pointer
,	O
osip_message_t	O
*	O
invite	pointer
)	O
{	O
int	O
i	int
;	O
OSIP_TRACE	O
(	O
osip_trace	O
(	O
__FILE__	pointer
,	O
__LINE__	O
,	O
OSIP_INFO2	O
,	O
NULL	O
,	O
"allocating NIST context\n"	O
)	O
)	O
;	O
*	O
nist	pointer
=	O
(	O
osip_nist_t	O
*	O
)	O
osip_malloc	O
(	O
sizeof	pointer
(	O
osip_nist_t	pointer
)	O
)	O
;	O
if	O
(	O
*	O
nist	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
memset	O
(	O
*	O
nist	pointer
,	O
0	O
,	O
sizeof	O
(	O
osip_nist_t	O
)	O
)	O
;	O
{	O
osip_via_t	O
*	O
via	O
;	O
char	O
*	O
proto	O
;	O
i	O
=	O
osip_message_get_via	O
(	O
invite	pointer
,	O
0	pointer
,	O
&	pointer
via	pointer
)	O
;	O
if	O
(	O
i	O
<	O
0	int
)	O
{	O
osip_free	O
(	O
*	pointer
nist	pointer
)	O
;	O
*	O
nist	pointer
=	O
NULL	O
;	O
return	O
i	int
;	O
}	O
proto	O
=	O
via_get_protocol	O
(	O
via	pointer
)	O
;	O
if	O
(	O
proto	O
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
*	pointer
nist	pointer
)	O
;	O
*	O
nist	pointer
=	O
NULL	O
;	O
return	O
OSIP_UNDEFINED_ERROR	int
;	O
}	O
if	O
(	O
osip_strcasecmp	O
(	O
proto	pointer
,	O
"TCP"	pointer
)	O
!=	O
0	O
&&	O
osip_strcasecmp	O
(	O
proto	pointer
,	O
"TLS"	pointer
)	O
!=	O
0	O
&&	O
osip_strcasecmp	O
(	O
proto	pointer
,	O
"SCTP"	pointer
)	O
!=	O
0	O
)	O
{	O
(	O
*	O
nist	pointer
)	O
->	O
timer_j_length	pointer
=	O
64	O
*	O
DEFAULT_T1	O
;	O
(	O
*	O
nist	pointer
)	O
->	O
timer_j_start	pointer
.	O
tv_sec	pointer
=	O
-	O
1	int
;	O
}	O
else	O
{	O
(	O
*	O
nist	pointer
)	O
->	O
timer_j_length	pointer
=	O
0	O
;	O
(	O
*	O
nist	pointer
)	O
->	O
timer_j_start	pointer
.	O
tv_sec	pointer
=	O
-	O
1	int
;	O
}	O
}	O
return	O
OSIP_SUCCESS	O
;	O
}	O
int	O
__osip_nist_free	function
(	O
osip_nist_t	O
*	O
nist	pointer
)	O
{	O
if	O
(	O
nist	O
==	O
NULL	O
)	O
return	O
OSIP_SUCCESS	int
;	O
OSIP_TRACE	O
(	O
osip_trace	O
(	O
__FILE__	pointer
,	O
__LINE__	O
,	O
OSIP_INFO2	O
,	O
NULL	O
,	O
"free nist resource\n"	O
)	O
)	O
;	O
osip_free	O
(	O
nist	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
osip_event_t	O
*	O
__osip_nist_need_timer_j_event	function
(	O
osip_nist_t	O
*	O
nist	pointer
,	O
state_t	O
state	O
,	O
int	O
transactionid	int
)	O
{	O
return	O
__osip_transaction_need_timer_x_event	int
(	O
nist	pointer
,	O
&	pointer
nist	pointer
->	O
timer_j_start	pointer
,	O
state	O
==	O
NIST_COMPLETED	O
,	O
transactionid	O
,	O
TIMEOUT_J	int
)	O
;	O
}	O