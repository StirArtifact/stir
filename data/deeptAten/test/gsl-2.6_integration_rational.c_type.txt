static	O
int	O
rational_check	function
(	O
const	O
size_t	O
n	O
,	O
const	O
gsl_integration_fixed_params	O
*	O
params	pointer
)	O
{	O
if	O
(	O
fabs	O
(	O
params	pointer
->	O
b	pointer
-	O
params	int
->	O
a	pointer
)	O
<=	O
GSL_DBL_EPSILON	int
)	O
{	O
GSL_ERROR	O
(	O
"|b - a| too small"	O
,	O
GSL_EDOM	pointer
)	O
;	O
}	O
else	O
if	O
(	O
params	O
->	O
alpha	pointer
<=	O
-	O
1.0	int
)	O
{	O
GSL_ERROR	O
(	O
"alpha must be > -1"	O
,	O
GSL_EDOM	pointer
)	O
;	O
}	O
else	O
if	O
(	O
params	O
->	O
beta	pointer
>=	O
0.0	int
||	O
params	O
->	O
alpha	pointer
+	O
params	int
->	O
beta	pointer
+	O
2	int
*	O
n	int
>=	O
0.0	int
||	O
0.0	O
>=	O
params	int
->	O
alpha	pointer
+	O
2	int
*	O
n	int
)	O
{	O
GSL_ERROR	O
(	O
"beta < alpha + beta + 2n < 0 is required"	pointer
,	O
GSL_EDOM	pointer
)	O
;	O
}	O
else	O
if	O
(	O
params	O
->	O
a	pointer
+	O
params	int
->	O
b	pointer
<=	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"a + b <= 0 is not allowed"	pointer
,	O
GSL_EDOM	pointer
)	O
;	O
}	O
else	O
{	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
rational_init	function
(	O
const	O
size_t	O
n	O
,	O
double	O
*	O
diag	pointer
,	O
double	O
*	O
subdiag	pointer
,	O
gsl_integration_fixed_params	O
*	O
params	pointer
)	O
{	O
const	O
double	O
absum	double
=	O
params	O
->	O
beta	pointer
+	O
params	int
->	O
alpha	pointer
;	O
const	O
double	O
a1	double
=	O
params	O
->	O
alpha	pointer
+	O
1.0	int
;	O
const	O
double	O
aba1	double
=	O
absum	O
*	O
a1	O
;	O
double	O
ab2i	double
=	O
absum	O
+	O
2.0	int
;	O
size_t	O
i	O
;	O
diag	O
[	O
0	int
]	O
=	O
-	pointer
a1	int
/	O
(	O
absum	O
+	O
2.0	int
)	O
;	O
subdiag	O
[	O
0	int
]	O
=	O
sqrt	O
(	O
-	pointer
diag	int
[	O
0	int
]	O
*	O
(	O
params	O
->	O
beta	pointer
+	O
1.0	int
)	O
/	O
(	int
(	O
absum	O
+	O
2.0	int
)	O
*	O
(	pointer
absum	O
+	O
3.0	O
)	O
)	O
)	O
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<	O
n	int
-	O
1	int
;	O
i	O
++	O
)	O
{	O
ab2i	O
+=	O
2.0	O
;	O
diag	O
[	O
i	int
]	O
=	O
(	O
-	O
aba1	O
-	O
2.0	int
*	O
i	int
*	O
(	O
absum	O
+	O
i	int
+	O
1.0	int
)	O
)	O
/	O
(	int
ab2i	O
*	O
(	O
ab2i	O
-	O
2.0	int
)	O
)	O
;	O
subdiag	O
[	O
i	int
]	O
=	O
sqrt	O
(	O
(	pointer
i	O
+	O
1.0	int
)	O
*	O
(	pointer
params	O
->	O
alpha	pointer
+	O
i	O
+	O
1.0	int
)	O
/	O
(	int
ab2i	O
-	O
1.0	int
)	O
*	O
(	pointer
params	O
->	O
beta	pointer
+	O
i	int
+	O
1.0	int
)	O
/	O
(	int
ab2i	O
*	O
ab2i	O
)	O
*	O
(	O
absum	O
+	O
i	O
+	O
1.0	int
)	O
/	O
(	int
ab2i	O
+	O
1.0	int
)	O
)	O
;	O
}	O
diag	O
[	O
n	O
-	O
1	int
]	O
=	O
(	O
-	O
aba1	int
-	O
2.0	int
*	O
(	int
n	O
-	O
1.0	int
)	O
*	O
(	O
absum	O
+	O
n	O
)	O
)	O
/	O
(	int
(	O
absum	O
+	O
2.0	int
*	O
n	int
)	O
*	O
(	O
absum	O
+	O
2.0	O
*	O
n	int
-	O
2.0	int
)	O
)	O
;	O
subdiag	O
[	O
n	int
-	O
1	int
]	O
=	O
0.0	O
;	O
params	O
->	O
zemu	pointer
=	O
gsl_sf_gamma	O
(	O
params	pointer
->	O
alpha	pointer
+	O
1.0	int
)	O
*	O
gsl_sf_gamma	pointer
(	O
-	pointer
absum	int
-	O
1.0	int
)	O
/	O
gsl_sf_gamma	int
(	O
-	pointer
params	int
->	O
beta	pointer
)	O
;	O
params	O
->	O
shft	pointer
=	O
params	O
->	O
a	pointer
;	O
params	O
->	O
slp	pointer
=	O
params	O
->	O
b	pointer
+	O
params	int
->	O
a	pointer
;	O
params	O
->	O
al	pointer
=	O
params	int
->	O
alpha	pointer
;	O
params	O
->	O
be	pointer
=	O
params	O
->	O
beta	pointer
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
const	O
gsl_integration_fixed_type	O
rational_type	O
=	O
{	O
rational_check	O
,	O
rational_init	O
}	O
;	O
const	O
gsl_integration_fixed_type	O
*	O
gsl_integration_fixed_rational	pointer
=	O
&	O
rational_type	struct
;	O