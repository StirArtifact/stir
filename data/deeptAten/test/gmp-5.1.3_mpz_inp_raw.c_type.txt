size_t	O
mpz_inp_raw	O
(	O
mpz_ptr	O
x	O
,	O
FILE	pointer
*	O
fp	pointer
)	O
{	O
unsigned	O
char	O
csize_bytes	O
[	O
4	int
]	O
;	O
mp_size_t	O
csize	long
,	O
abs_xsize	pointer
,	O
i	pointer
;	O
size_t	O
abs_csize	long
;	O
char	O
*	O
cp	pointer
;	O
mp_ptr	O
xp	pointer
,	O
sp	pointer
,	O
ep	long
;	O
mp_limb_t	pointer
slimb	long
,	O
elimb	pointer
;	O
if	O
(	O
fp	long
==	O
0	O
)	O
fp	O
=	O
stdin	pointer
;	O
if	O
(	O
fread	long
(	O
csize_bytes	pointer
,	O
sizeof	pointer
(	O
csize_bytes	pointer
)	O
,	O
1	O
,	O
fp	O
)	O
!=	O
1	O
)	O
return	O
0	O
;	O
csize	O
=	O
(	O
(	O
mp_size_t	O
)	O
csize_bytes	O
[	O
0	int
]	O
<<	O
24	O
)	O
+	O
(	int
(	O
mp_size_t	O
)	O
csize_bytes	O
[	O
1	int
]	O
<<	O
16	O
)	O
+	O
(	int
(	O
mp_size_t	O
)	O
csize_bytes	O
[	O
2	int
]	O
<<	O
8	O
)	O
+	O
(	int
(	O
mp_size_t	O
)	O
csize_bytes	O
[	O
3	int
]	O
)	O
;	O
if	O
(	O
sizeof	O
(	O
csize	pointer
)	O
>	O
4	int
&&	O
csize	O
&	O
0x80000000L	pointer
)	O
csize	O
-=	O
0x80000000L	int
<<	O
1	int
;	O
abs_csize	O
=	O
ABS	O
(	O
csize	pointer
)	O
;	O
abs_xsize	O
=	O
(	O
abs_csize	O
*	O
8	O
+	O
GMP_NUMB_BITS	int
-	O
1	int
)	O
/	O
GMP_NUMB_BITS	int
;	O
if	O
(	O
abs_xsize	O
!=	O
0	O
)	O
{	O
xp	O
=	O
MPZ_REALLOC	O
(	O
x	pointer
,	O
abs_xsize	pointer
)	O
;	O
xp	O
[	O
0	int
]	O
=	O
0	pointer
;	O
cp	long
=	O
(	pointer
char	O
*	O
)	O
(	pointer
xp	O
+	O
abs_xsize	O
)	O
-	O
abs_csize	int
;	O
if	O
(	O
fread	O
(	O
cp	pointer
,	O
abs_csize	pointer
,	O
1	pointer
,	O
fp	O
)	O
!=	O
1	O
)	O
return	O
0	O
;	O
if	O
(	O
GMP_NAIL_BITS	O
==	O
0	O
)	O
{	O
sp	O
=	O
xp	int
;	O
ep	O
=	O
xp	pointer
+	O
abs_xsize	int
-	O
1	int
;	O
for	pointer
(	O
i	long
=	O
0	int
;	O
i	int
<	O
(	int
abs_xsize	int
+	O
1	int
)	O
/	O
2	int
;	O
i	O
++	O
)	O
{	O
NTOH_LIMB_FETCH	O
(	O
elimb	pointer
,	O
ep	pointer
)	O
;	O
NTOH_LIMB_FETCH	O
(	O
slimb	pointer
,	O
sp	O
)	O
;	O
*	O
sp	pointer
++	O
=	O
elimb	O
;	O
*	O
ep	pointer
--	O
=	O
slimb	O
;	O
}	O
}	O
else	O
{	O
mp_limb_t	O
byte	O
,	O
limb	O
;	O
int	O
bits	int
;	O
mp_size_t	O
tpos	long
;	O
mp_ptr	O
tp	pointer
;	O
TMP_DECL	O
;	O
TMP_MARK	O
;	O
tp	O
=	O
TMP_ALLOC_LIMBS	O
(	O
abs_xsize	long
)	O
;	O
limb	O
=	O
0	int
;	O
bits	O
=	O
0	O
;	O
tpos	O
=	O
0	O
;	O
for	O
(	O
i	long
=	O
abs_csize	int
-	O
1	int
;	O
i	long
>=	O
0	int
;	O
i	long
--	O
)	O
{	O
byte	O
=	O
(	int
unsigned	O
char	O
)	O
cp	O
[	O
i	int
]	O
;	O
limb	O
|=	O
(	O
byte	O
<<	O
bits	int
)	O
;	O
bits	O
+=	O
8	int
;	O
if	O
(	O
bits	O
>=	O
GMP_NUMB_BITS	int
)	O
{	O
ASSERT	O
(	O
tpos	O
<	O
abs_xsize	int
)	O
;	O
tp	O
[	O
tpos	int
++	O
]	O
=	O
limb	pointer
&	O
GMP_NUMB_MASK	long
;	O
bits	O
-=	O
GMP_NUMB_BITS	int
;	O
ASSERT	long
(	O
bits	pointer
<	O
8	int
)	O
;	O
limb	O
=	O
byte	int
>>	O
(	int
8	int
-	O
bits	int
)	O
;	O
}	O
}	O
if	O
(	O
bits	O
!=	O
0	O
)	O
{	O
ASSERT	O
(	O
tpos	O
<	O
abs_xsize	int
)	O
;	O
tp	O
[	O
tpos	int
++	O
]	O
=	O
limb	pointer
;	O
}	O
ASSERT	O
(	O
tpos	O
==	O
abs_xsize	O
)	O
;	O
MPN_COPY	O
(	O
xp	pointer
,	O
tp	pointer
,	O
abs_xsize	pointer
)	O
;	O
TMP_FREE	O
;	O
}	O
MPN_NORMALIZE	O
(	O
xp	pointer
,	O
abs_xsize	pointer
)	O
;	O
}	O
SIZ	O
(	O
x	pointer
)	O
=	O
(	int
csize	O
>=	O
0	O
?	O
abs_xsize	int
:	O
-	O
abs_xsize	int
)	O
;	O
return	O
abs_csize	int
+	O
4	int
;	O
}	O