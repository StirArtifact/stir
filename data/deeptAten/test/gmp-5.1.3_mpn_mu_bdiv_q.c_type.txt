void	O
mpn_mu_bdiv_q	function
(	O
mp_ptr	O
qp	pointer
,	O
mp_srcptr	O
np	pointer
,	O
mp_size_t	O
nn	long
,	O
mp_srcptr	long
dp	pointer
,	O
mp_size_t	long
dn	long
,	O
mp_ptr	long
scratch	pointer
)	O
{	O
mp_size_t	O
qn	long
;	O
mp_size_t	long
in	long
;	O
int	long
cy	int
,	O
c0	O
;	O
mp_size_t	O
tn	long
,	O
wn	long
;	O
qn	O
=	O
nn	int
;	O
ASSERT	O
(	O
dn	long
>=	O
2	int
)	O
;	O
ASSERT	O
(	O
qn	pointer
>=	O
2	int
)	O
;	O
if	O
(	O
qn	long
>	O
dn	int
)	O
{	O
mp_size_t	O
b	long
;	O
b	long
=	O
(	int
qn	O
-	O
1	int
)	O
/	O
dn	int
+	O
1	int
;	O
in	long
=	O
(	int
qn	O
-	O
1	int
)	O
/	O
b	int
+	O
1	int
;	O
mpn_binvert	long
(	O
ip	pointer
,	O
dp	pointer
,	O
in	long
,	O
rp	long
)	O
;	O
cy	O
=	O
0	O
;	O
MPN_COPY	O
(	O
rp	pointer
,	O
np	pointer
,	O
dn	long
)	O
;	O
np	O
+=	O
dn	int
;	O
mpn_mullo_n	O
(	O
qp	pointer
,	O
rp	long
,	O
ip	long
,	O
in	long
)	O
;	O
qn	O
-=	O
in	int
;	O
while	long
(	O
qn	long
>	O
in	int
)	O
{	O
if	O
(	O
BELOW_THRESHOLD	long
(	O
in	int
,	O
MUL_TO_MULMOD_BNM1_FOR_2NXN_THRESHOLD	int
)	O
)	O
mpn_mul	O
(	O
tp	O
,	O
dp	pointer
,	O
dn	long
,	O
qp	int
,	O
in	long
)	O
;	O
else	O
{	O
tn	O
=	O
mpn_mulmod_bnm1_next_size	pointer
(	O
dn	pointer
)	O
;	O
mpn_mulmod_bnm1	O
(	O
tp	pointer
,	O
tn	pointer
,	O
dp	pointer
,	O
dn	long
,	O
qp	int
,	O
in	long
,	O
scratch_out	long
)	O
;	O
wn	O
=	O
dn	int
+	O
in	int
-	O
tn	int
;	O
if	long
(	O
wn	long
>	O
0	int
)	O
{	O
c0	O
=	O
mpn_sub_n	int
(	O
tp	pointer
+	O
tn	int
,	O
tp	pointer
,	O
rp	pointer
,	O
wn	long
)	O
;	O
mpn_decr_u	O
(	O
tp	pointer
+	O
wn	int
,	O
c0	long
)	O
;	O
}	O
}	O
qp	O
+=	O
in	int
;	O
if	O
(	O
dn	long
!=	O
in	int
)	O
{	O
cy	O
+=	O
mpn_sub_n	int
(	O
rp	pointer
,	O
rp	long
+	O
in	int
,	O
tp	long
+	O
in	int
,	O
dn	long
-	O
in	int
)	O
;	O
if	O
(	O
cy	long
==	O
2	O
)	O
{	O
mpn_incr_u	O
(	O
tp	pointer
+	O
dn	int
,	O
1	long
)	O
;	O
cy	O
=	O
1	O
;	O
}	O
}	O
cy	O
=	O
mpn_sub_nc	O
(	O
rp	O
+	O
dn	long
-	O
in	long
,	O
np	long
,	O
tp	long
+	O
dn	long
,	O
in	long
,	O
cy	long
)	O
;	O
np	O
+=	O
in	int
;	O
mpn_mullo_n	O
(	O
qp	pointer
,	O
rp	int
,	O
ip	int
,	O
in	pointer
)	O
;	O
qn	O
-=	O
in	int
;	O
}	long
if	O
(	O
BELOW_THRESHOLD	long
(	O
in	int
,	O
MUL_TO_MULMOD_BNM1_FOR_2NXN_THRESHOLD	int
)	O
)	O
mpn_mul	O
(	O
tp	O
,	O
dp	O
,	O
dn	int
,	O
qp	int
,	O
in	int
)	O
;	O
else	O
{	O
tn	O
=	O
mpn_mulmod_bnm1_next_size	pointer
(	O
dn	pointer
)	O
;	O
mpn_mulmod_bnm1	O
(	O
tp	pointer
,	O
tn	pointer
,	O
dp	pointer
,	O
dn	int
,	O
qp	int
,	O
in	int
,	O
scratch_out	int
)	O
;	O
wn	O
=	O
dn	int
+	O
in	int
-	O
tn	int
;	O
if	long
(	O
wn	long
>	O
0	int
)	O
{	O
c0	O
=	O
mpn_sub_n	int
(	O
tp	pointer
+	O
tn	int
,	O
tp	pointer
,	O
rp	pointer
,	O
wn	int
)	O
;	O
mpn_decr_u	O
(	O
tp	pointer
+	O
wn	int
,	O
c0	pointer
)	O
;	O
}	O
}	O
qp	O
+=	O
in	int
;	O
if	O
(	O
dn	long
!=	O
in	int
)	O
{	O
cy	O
+=	O
mpn_sub_n	int
(	O
rp	pointer
,	O
rp	pointer
+	O
in	int
,	O
tp	long
+	O
in	int
,	O
dn	long
-	O
in	int
)	O
;	O
if	O
(	O
cy	long
==	O
2	O
)	O
{	O
mpn_incr_u	O
(	O
tp	pointer
+	O
dn	int
,	O
1	int
)	O
;	O
cy	O
=	O
1	O
;	O
}	O
}	O
mpn_sub_nc	O
(	O
rp	pointer
+	O
dn	int
-	O
in	int
,	O
np	long
,	O
tp	long
+	O
dn	int
,	O
qn	long
-	O
(	int
dn	O
-	O
in	int
)	O
,	O
cy	O
)	O
;	O
mpn_mullo_n	O
(	O
qp	pointer
,	O
rp	pointer
,	O
ip	int
,	O
qn	pointer
)	O
;	O
}	O
else	O
{	O
in	O
=	O
qn	int
-	O
(	int
qn	O
>>	O
1	int
)	O
;	O
mpn_binvert	O
(	O
ip	pointer
,	O
dp	pointer
,	O
in	int
,	O
tp	int
)	O
;	O
mpn_mullo_n	O
(	O
qp	pointer
,	O
np	pointer
,	O
ip	pointer
,	O
in	pointer
)	O
;	O
if	O
(	O
BELOW_THRESHOLD	pointer
(	O
in	int
,	O
MUL_TO_MULMOD_BNM1_FOR_2NXN_THRESHOLD	int
)	O
)	O
mpn_mul	O
(	O
tp	O
,	O
dp	pointer
,	O
qn	int
,	O
qp	int
,	O
in	int
)	O
;	O
else	O
{	O
tn	O
=	O
mpn_mulmod_bnm1_next_size	pointer
(	O
qn	pointer
)	O
;	O
mpn_mulmod_bnm1	O
(	O
tp	pointer
,	O
tn	pointer
,	O
dp	pointer
,	O
qn	int
,	O
qp	int
,	O
in	int
,	O
scratch_out	int
)	O
;	O
wn	O
=	O
qn	int
+	O
in	int
-	O
tn	int
;	O
if	long
(	O
wn	long
>	O
0	int
)	O
{	O
c0	O
=	O
mpn_cmp	int
(	O
tp	O
,	O
np	pointer
,	O
wn	int
)	O
<	O
0	int
;	O
mpn_decr_u	O
(	O
tp	pointer
+	O
wn	int
,	O
c0	pointer
)	O
;	O
}	O
}	O
mpn_sub_n	O
(	O
tp	pointer
,	O
np	pointer
+	O
in	int
,	O
tp	long
+	O
in	int
,	O
qn	long
-	O
in	int
)	O
;	O
mpn_mullo_n	O
(	O
qp	pointer
+	O
in	int
,	O
tp	int
,	O
ip	pointer
,	O
qn	pointer
-	O
in	int
)	O
;	O
}	O
}	O
mp_size_t	O
mpn_mu_bdiv_q_itch	long
(	O
mp_size_t	O
nn	long
,	O
mp_size_t	pointer
dn	long
)	O
{	O
mp_size_t	O
qn	long
,	O
in	long
,	O
tn	long
,	O
itch_binvert	long
,	O
itch_out	long
,	O
itches	long
;	O
mp_size_t	O
b	long
;	O
qn	O
=	O
nn	int
;	O
if	long
(	O
qn	long
>	O
dn	int
)	O
{	O
b	O
=	O
(	int
qn	O
-	O
1	int
)	O
/	O
dn	int
+	O
1	int
;	O
in	long
=	O
(	int
qn	O
-	O
1	int
)	O
/	O
b	int
+	O
1	int
;	O
if	long
(	O
BELOW_THRESHOLD	long
(	O
in	int
,	O
MUL_TO_MULMOD_BNM1_FOR_2NXN_THRESHOLD	int
)	O
)	O
{	O
tn	O
=	O
dn	pointer
+	O
in	int
;	O
itch_out	long
=	O
0	int
;	O
}	long
else	O
{	O
tn	O
=	O
mpn_mulmod_bnm1_next_size	pointer
(	O
dn	pointer
)	O
;	O
itch_out	O
=	O
mpn_mulmod_bnm1_itch	int
(	O
tn	pointer
,	O
dn	pointer
,	O
in	long
)	O
;	O
}	O
itch_binvert	O
=	O
mpn_binvert_itch	function
(	O
in	O
)	O
;	O
itches	O
=	O
dn	int
+	O
tn	int
+	O
itch_out	int
;	O
return	long
in	O
+	O
MAX	int
(	O
itches	long
,	O
itch_binvert	long
)	O
;	O
}	O
else	O
{	O
in	O
=	O
qn	int
-	O
(	int
qn	O
>>	O
1	int
)	O
;	O
if	O
(	O
BELOW_THRESHOLD	long
(	O
in	int
,	O
MUL_TO_MULMOD_BNM1_FOR_2NXN_THRESHOLD	int
)	O
)	O
{	O
tn	O
=	O
qn	pointer
+	O
in	int
;	O
itch_out	long
=	O
0	int
;	O
}	long
else	O
{	O
tn	O
=	O
mpn_mulmod_bnm1_next_size	pointer
(	O
qn	pointer
)	O
;	O
itch_out	O
=	O
mpn_mulmod_bnm1_itch	int
(	O
tn	pointer
,	O
qn	pointer
,	O
in	long
)	O
;	O
}	O
itch_binvert	O
=	O
mpn_binvert_itch	function
(	O
in	O
)	O
;	O
itches	O
=	O
tn	int
+	O
itch_out	int
;	O
return	long
in	O
+	O
MAX	int
(	O
itches	long
,	O
itch_binvert	long
)	O
;	O
}	O
}	O