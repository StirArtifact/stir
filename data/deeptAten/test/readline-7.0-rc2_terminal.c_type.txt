int	O
rl_prefer_env_winsize	int
=	O
0	int
;	O
int	O
rl_change_environment	int
=	O
1	int
;	O
static	O
char	O
*	O
term_buffer	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
static	O
char	O
*	O
term_string_buffer	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
static	O
int	O
tcap_initialized	int
;	O
char	O
*	O
_rl_term_clreol	pointer
;	O
char	O
*	O
_rl_term_clrpag	pointer
;	O
char	O
*	O
_rl_term_cr	pointer
;	O
char	O
*	O
_rl_term_backspace	pointer
;	O
char	O
*	O
_rl_term_goto	pointer
;	O
char	O
*	O
_rl_term_pc	pointer
;	O
int	O
_rl_terminal_can_insert	int
=	O
0	int
;	O
char	O
*	O
_rl_term_im	pointer
;	O
char	O
*	O
_rl_term_ei	pointer
;	O
char	O
*	O
_rl_term_ic	pointer
;	O
char	O
*	O
_rl_term_ip	pointer
;	O
char	O
*	O
_rl_term_IC	pointer
;	O
char	O
*	O
_rl_term_dc	pointer
;	O
char	O
*	O
_rl_term_DC	pointer
;	O
char	O
*	O
_rl_term_forward_char	pointer
;	O
char	O
*	O
_rl_term_up	pointer
;	O
static	O
char	O
*	O
_rl_visible_bell	pointer
;	O
int	O
_rl_term_autowrap	int
=	O
-	O
1	int
;	O
static	O
int	O
term_has_meta	int
;	O
static	O
char	O
*	O
_rl_term_mm	pointer
;	O
static	O
char	O
*	O
_rl_term_mo	pointer
;	O
static	O
char	O
*	O
_rl_term_ku	pointer
;	O
static	O
char	O
*	O
_rl_term_kd	pointer
;	O
static	O
char	O
*	O
_rl_term_kr	pointer
;	O
static	O
char	O
*	O
_rl_term_kl	pointer
;	O
static	O
char	O
*	O
_rl_term_ks	pointer
;	O
static	O
char	O
*	O
_rl_term_ke	pointer
;	O
static	O
char	O
*	O
_rl_term_kh	pointer
;	O
static	O
char	O
*	O
_rl_term_kH	pointer
;	O
static	O
char	O
*	O
_rl_term_at7	pointer
;	O
static	O
char	O
*	O
_rl_term_kD	pointer
;	O
static	O
char	O
*	O
_rl_term_kI	pointer
;	O
static	O
char	O
*	O
_rl_term_vs	pointer
;	O
static	O
char	O
*	O
_rl_term_ve	pointer
;	O
static	O
void	O
bind_termcap_arrow_keys	function
PARAMS	O
(	O
(	O
Keymap	pointer
)	O
)	O
;	O
int	O
_rl_screenwidth	int
,	O
_rl_screenheight	int
,	O
_rl_screenchars	int
;	O
int	O
_rl_enable_keypad	int
;	O
int	O
_rl_enable_meta	int
=	O
1	int
;	O
void	O
_rl_get_screen_size	function
(	O
tty	int
,	O
ignore_env	int
)	O
int	O
tty	int
,	O
ignore_env	int
;	O
{	O
char	O
*	O
ss	pointer
;	O
struct	O
winsize	struct
window_size	struct
;	O
int	O
wr	int
,	O
wc	int
;	O
wr	int
=	O
wc	int
=	O
-	O
1	int
;	O
if	O
(	O
ioctl	function
(	O
tty	int
,	O
TIOCGWINSZ	int
,	O
&	O
window_size	struct
)	O
==	O
0	int
)	O
{	O
wc	int
=	O
(	O
int	O
)	O
window_size	struct
.	O
ws_col	short
;	O
wr	int
=	O
(	O
int	O
)	O
window_size	struct
.	O
ws_row	short
;	O
}	O
if	O
(	O
ignore_env	int
||	O
rl_prefer_env_winsize	int
==	O
0	int
)	O
{	O
_rl_screenwidth	int
=	O
wc	int
;	O
_rl_screenheight	int
=	O
wr	int
;	O
}	O
else	O
_rl_screenwidth	int
=	O
_rl_screenheight	int
=	O
-	O
1	int
;	O
if	O
(	O
_rl_screenwidth	int
<=	O
0	int
)	O
{	O
if	O
(	O
ignore_env	int
==	O
0	int
&&	O
(	O
ss	pointer
=	O
sh_get_env_value	function
(	O
"COLUMNS"	pointer
)	O
)	O
)	O
_rl_screenwidth	int
=	O
atoi	function
(	O
ss	pointer
)	O
;	O
if	O
(	O
_rl_screenwidth	int
<=	O
0	int
)	O
_rl_screenwidth	int
=	O
wc	int
;	O
if	O
(	O
_rl_screenwidth	int
<=	O
0	int
&&	O
term_string_buffer	pointer
)	O
_rl_screenwidth	int
=	O
tgetnum	function
(	O
"co"	pointer
)	O
;	O
}	O
if	O
(	O
_rl_screenheight	int
<=	O
0	int
)	O
{	O
if	O
(	O
ignore_env	int
==	O
0	int
&&	O
(	O
ss	pointer
=	O
sh_get_env_value	function
(	O
"LINES"	pointer
)	O
)	O
)	O
_rl_screenheight	int
=	O
atoi	function
(	O
ss	pointer
)	O
;	O
if	O
(	O
_rl_screenheight	int
<=	O
0	int
)	O
_rl_screenheight	int
=	O
wr	int
;	O
if	O
(	O
_rl_screenheight	int
<=	O
0	int
&&	O
term_string_buffer	pointer
)	O
_rl_screenheight	int
=	O
tgetnum	function
(	O
"li"	pointer
)	O
;	O
}	O
if	O
(	O
_rl_screenwidth	int
<=	O
1	int
)	O
_rl_screenwidth	int
=	O
80	int
;	O
if	O
(	O
_rl_screenheight	int
<=	O
0	int
)	O
_rl_screenheight	int
=	O
24	int
;	O
if	O
(	O
rl_change_environment	int
)	O
sh_set_lines_and_columns	function
(	O
_rl_screenheight	int
,	O
_rl_screenwidth	int
)	O
;	O
if	O
(	O
_rl_term_autowrap	int
==	O
0	int
)	O
_rl_screenwidth	int
--	O
;	O
_rl_screenchars	int
=	O
_rl_screenwidth	int
*	O
_rl_screenheight	int
;	O
}	O
void	O
_rl_set_screen_size	function
(	O
rows	int
,	O
cols	int
)	O
int	O
rows	int
,	O
cols	int
;	O
{	O
if	O
(	O
_rl_term_autowrap	int
==	O
-	O
1	int
)	O
_rl_init_terminal_io	function
(	O
rl_terminal_name	pointer
)	O
;	O
if	O
(	O
rows	int
>	O
0	int
)	O
_rl_screenheight	int
=	O
rows	int
;	O
if	O
(	O
cols	int
>	O
0	int
)	O
{	O
_rl_screenwidth	int
=	O
cols	int
;	O
if	O
(	O
_rl_term_autowrap	int
==	O
0	int
)	O
_rl_screenwidth	int
--	O
;	O
}	O
if	O
(	O
rows	int
>	O
0	int
||	O
cols	int
>	O
0	int
)	O
_rl_screenchars	int
=	O
_rl_screenwidth	int
*	O
_rl_screenheight	int
;	O
}	O
void	O
rl_set_screen_size	function
(	O
rows	int
,	O
cols	int
)	O
int	O
rows	int
,	O
cols	int
;	O
{	O
_rl_set_screen_size	function
(	O
rows	int
,	O
cols	int
)	O
;	O
}	O
void	O
rl_get_screen_size	function
(	O
rows	int
,	O
cols	int
)	O
int	O
*	O
rows	int
,	O
*	O
cols	int
;	O
{	O
if	O
(	O
rows	int
)	O
*	O
rows	int
=	O
_rl_screenheight	int
;	O
if	O
(	O
cols	int
)	O
*	O
cols	int
=	O
_rl_screenwidth	int
;	O
}	O
void	O
rl_reset_screen_size	function
(	O
)	O
{	O
_rl_get_screen_size	function
(	O
fileno	function
(	O
rl_instream	pointer
)	O
,	O
0	int
)	O
;	O
}	O
void	O
_rl_sigwinch_resize_terminal	function
(	O
)	O
{	O
_rl_get_screen_size	function
(	O
fileno	function
(	O
rl_instream	pointer
)	O
,	O
1	int
)	O
;	O
}	O
void	O
rl_resize_terminal	function
(	O
)	O
{	O
_rl_get_screen_size	function
(	O
fileno	function
(	O
rl_instream	pointer
)	O
,	O
1	int
)	O
;	O
if	O
(	O
_rl_echoing_p	int
)	O
{	O
if	O
(	O
CUSTOM_REDISPLAY_FUNC	O
(	O
)	O
)	O
rl_forced_update_display	function
(	O
)	O
;	O
else	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_REDISPLAYING	int
)	O
==	O
0	int
)	O
_rl_redisplay_after_sigwinch	function
(	O
)	O
;	O
}	O
}	O
struct	O
_tc_string	struct
{	O
const	O
char	O
*	O
const	O
tc_var	pointer
;	O
char	O
*	O
*	O
tc_value	pointer
;	O
}	O
;	O
static	O
const	O
struct	O
_tc_string	struct
tc_strings	array
[	O
]	O
=	O
{	O
{	O
"@7"	pointer
,	O
&	O
_rl_term_at7	pointer
}	O
,	O
{	O
"DC"	pointer
,	O
&	O
_rl_term_DC	pointer
}	O
,	O
{	O
"IC"	pointer
,	O
&	O
_rl_term_IC	pointer
}	O
,	O
{	O
"ce"	pointer
,	O
&	O
_rl_term_clreol	pointer
}	O
,	O
{	O
"cl"	pointer
,	O
&	O
_rl_term_clrpag	pointer
}	O
,	O
{	O
"cr"	pointer
,	O
&	O
_rl_term_cr	pointer
}	O
,	O
{	O
"dc"	pointer
,	O
&	O
_rl_term_dc	pointer
}	O
,	O
{	O
"ei"	pointer
,	O
&	O
_rl_term_ei	pointer
}	O
,	O
{	O
"ic"	pointer
,	O
&	O
_rl_term_ic	pointer
}	O
,	O
{	O
"im"	pointer
,	O
&	O
_rl_term_im	pointer
}	O
,	O
{	O
"kD"	pointer
,	O
&	O
_rl_term_kD	pointer
}	O
,	O
{	O
"kH"	pointer
,	O
&	O
_rl_term_kH	pointer
}	O
,	O
{	O
"kI"	pointer
,	O
&	O
_rl_term_kI	pointer
}	O
,	O
{	O
"kd"	pointer
,	O
&	O
_rl_term_kd	pointer
}	O
,	O
{	O
"ke"	pointer
,	O
&	O
_rl_term_ke	pointer
}	O
,	O
{	O
"kh"	pointer
,	O
&	O
_rl_term_kh	pointer
}	O
,	O
{	O
"kl"	pointer
,	O
&	O
_rl_term_kl	pointer
}	O
,	O
{	O
"kr"	pointer
,	O
&	O
_rl_term_kr	pointer
}	O
,	O
{	O
"ks"	pointer
,	O
&	O
_rl_term_ks	pointer
}	O
,	O
{	O
"ku"	pointer
,	O
&	O
_rl_term_ku	pointer
}	O
,	O
{	O
"le"	pointer
,	O
&	O
_rl_term_backspace	pointer
}	O
,	O
{	O
"mm"	pointer
,	O
&	O
_rl_term_mm	pointer
}	O
,	O
{	O
"mo"	pointer
,	O
&	O
_rl_term_mo	pointer
}	O
,	O
{	O
"nd"	pointer
,	O
&	O
_rl_term_forward_char	pointer
}	O
,	O
{	O
"pc"	pointer
,	O
&	O
_rl_term_pc	pointer
}	O
,	O
{	O
"up"	pointer
,	O
&	O
_rl_term_up	pointer
}	O
,	O
{	O
"vb"	pointer
,	O
&	O
_rl_visible_bell	pointer
}	O
,	O
{	O
"vs"	pointer
,	O
&	O
_rl_term_vs	pointer
}	O
,	O
{	O
"ve"	pointer
,	O
&	O
_rl_term_ve	pointer
}	O
,	O
}	O
;	O
static	O
void	O
get_term_capabilities	function
(	O
bp	pointer
)	O
char	O
*	O
*	O
bp	pointer
;	O
{	O
register	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NUM_TC_STRINGS	O
;	O
i	int
++	O
)	O
*	O
(	O
tc_strings	array
[	O
i	int
]	O
.	O
tc_value	pointer
)	O
=	O
tgetstr	function
(	O
(	O
char	O
*	O
)	O
tc_strings	array
[	O
i	int
]	O
.	O
tc_var	pointer
,	O
bp	pointer
)	O
;	O
tcap_initialized	int
=	O
1	int
;	O
}	O
int	O
_rl_init_terminal_io	function
(	O
terminal_name	pointer
)	O
const	O
char	O
*	O
terminal_name	pointer
;	O
{	O
const	O
char	O
*	O
term	pointer
;	O
char	O
*	O
buffer	pointer
;	O
int	O
tty	int
,	O
tgetent_ret	int
;	O
term	pointer
=	O
terminal_name	pointer
?	O
terminal_name	pointer
:	O
sh_get_env_value	function
(	O
"TERM"	pointer
)	O
;	O
_rl_term_clrpag	pointer
=	O
_rl_term_cr	pointer
=	O
_rl_term_clreol	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
tty	int
=	O
rl_instream	pointer
?	O
fileno	function
(	O
rl_instream	pointer
)	O
:	O
0	int
;	O
if	O
(	O
term	pointer
==	O
0	int
)	O
term	pointer
=	O
"dumb"	pointer
;	O
if	O
(	O
CUSTOM_REDISPLAY_FUNC	O
(	O
)	O
)	O
{	O
tgetent_ret	int
=	O
-	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
term_string_buffer	pointer
==	O
0	int
)	O
term_string_buffer	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
2032	int
)	O
;	O
if	O
(	O
term_buffer	pointer
==	O
0	int
)	O
term_buffer	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
4080	int
)	O
;	O
buffer	pointer
=	O
term_string_buffer	pointer
;	O
tgetent_ret	int
=	O
tgetent	function
(	O
term_buffer	pointer
,	O
term	pointer
)	O
;	O
}	O
if	O
(	O
tgetent_ret	int
<=	O
0	int
)	O
{	O
FREE	O
(	O
term_string_buffer	pointer
)	O
;	O
FREE	O
(	O
term_buffer	pointer
)	O
;	O
buffer	pointer
=	O
term_buffer	pointer
=	O
term_string_buffer	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
_rl_term_autowrap	int
=	O
0	int
;	O
if	O
(	O
_rl_screenwidth	int
<=	O
0	int
||	O
_rl_screenheight	int
<=	O
0	int
)	O
{	O
_rl_get_screen_size	function
(	O
tty	int
,	O
0	int
)	O
;	O
}	O
if	O
(	O
_rl_screenwidth	int
<=	O
0	int
||	O
_rl_screenheight	int
<=	O
0	int
)	O
{	O
_rl_screenwidth	int
=	O
79	int
;	O
_rl_screenheight	int
=	O
24	int
;	O
}	O
_rl_screenchars	int
=	O
_rl_screenwidth	int
*	O
_rl_screenheight	int
;	O
_rl_term_cr	pointer
=	O
"\r"	pointer
;	O
_rl_term_im	pointer
=	O
_rl_term_ei	pointer
=	O
_rl_term_ic	pointer
=	O
_rl_term_IC	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
_rl_term_up	pointer
=	O
_rl_term_dc	pointer
=	O
_rl_term_DC	pointer
=	O
_rl_visible_bell	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
_rl_term_ku	pointer
=	O
_rl_term_kd	pointer
=	O
_rl_term_kl	pointer
=	O
_rl_term_kr	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
_rl_term_kh	pointer
=	O
_rl_term_kH	pointer
=	O
_rl_term_kI	pointer
=	O
_rl_term_kD	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
_rl_term_ks	pointer
=	O
_rl_term_ke	pointer
=	O
_rl_term_at7	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
_rl_term_mm	pointer
=	O
_rl_term_mo	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
_rl_term_ve	pointer
=	O
_rl_term_vs	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
_rl_term_forward_char	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
_rl_terminal_can_insert	int
=	O
term_has_meta	int
=	O
0	int
;	O
PC	char
=	O
'\0'	O
;	O
BC	pointer
=	O
_rl_term_backspace	pointer
=	O
"\b"	pointer
;	O
UP	pointer
=	O
_rl_term_up	pointer
;	O
return	O
0	int
;	O
}	O
get_term_capabilities	function
(	O
&	O
buffer	pointer
)	O
;	O
PC	char
=	O
_rl_term_pc	pointer
?	O
*	O
_rl_term_pc	pointer
:	O
0	int
;	O
BC	pointer
=	O
_rl_term_backspace	pointer
;	O
UP	pointer
=	O
_rl_term_up	pointer
;	O
if	O
(	O
!	O
_rl_term_cr	pointer
)	O
_rl_term_cr	pointer
=	O
"\r"	pointer
;	O
_rl_term_autowrap	int
=	O
tgetflag	function
(	O
"am"	pointer
)	O
&&	O
tgetflag	function
(	O
"xn"	pointer
)	O
;	O
if	O
(	O
_rl_screenwidth	int
<=	O
0	int
||	O
_rl_screenheight	int
<=	O
0	int
)	O
_rl_get_screen_size	function
(	O
tty	int
,	O
0	int
)	O
;	O
_rl_terminal_can_insert	int
=	O
(	O
_rl_term_IC	pointer
||	O
_rl_term_im	pointer
||	O
_rl_term_ic	pointer
)	O
;	O
term_has_meta	int
=	O
tgetflag	function
(	O
"km"	pointer
)	O
!=	O
0	int
;	O
if	O
(	O
term_has_meta	int
==	O
0	int
)	O
_rl_term_mm	pointer
=	O
_rl_term_mo	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
bind_termcap_arrow_keys	function
(	O
emacs_standard_keymap	array
)	O
;	O
bind_termcap_arrow_keys	function
(	O
vi_movement_keymap	array
)	O
;	O
bind_termcap_arrow_keys	function
(	O
vi_insertion_keymap	array
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
bind_termcap_arrow_keys	function
(	O
map	pointer
)	O
Keymap	pointer
map	pointer
;	O
{	O
Keymap	pointer
xkeymap	pointer
;	O
xkeymap	pointer
=	O
_rl_keymap	pointer
;	O
_rl_keymap	pointer
=	O
map	pointer
;	O
rl_bind_keyseq_if_unbound	function
(	O
_rl_term_ku	pointer
,	O
rl_get_previous_history	function
)	O
;	O
rl_bind_keyseq_if_unbound	function
(	O
_rl_term_kd	pointer
,	O
rl_get_next_history	function
)	O
;	O
rl_bind_keyseq_if_unbound	function
(	O
_rl_term_kr	pointer
,	O
rl_forward_char	function
)	O
;	O
rl_bind_keyseq_if_unbound	function
(	O
_rl_term_kl	pointer
,	O
rl_backward_char	function
)	O
;	O
rl_bind_keyseq_if_unbound	function
(	O
_rl_term_kh	pointer
,	O
rl_beg_of_line	function
)	O
;	O
rl_bind_keyseq_if_unbound	function
(	O
_rl_term_at7	pointer
,	O
rl_end_of_line	function
)	O
;	O
rl_bind_keyseq_if_unbound	function
(	O
_rl_term_kD	pointer
,	O
rl_delete	function
)	O
;	O
_rl_keymap	pointer
=	O
xkeymap	pointer
;	O
}	O
char	O
*	O
rl_get_termcap	function
(	O
cap	pointer
)	O
const	O
char	O
*	O
cap	pointer
;	O
{	O
register	O
int	O
i	int
;	O
if	O
(	O
tcap_initialized	int
==	O
0	int
)	O
return	O
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NUM_TC_STRINGS	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
tc_strings	array
[	O
i	int
]	O
.	O
tc_var	pointer
[	O
0	int
]	O
==	O
cap	pointer
[	O
0	int
]	O
&&	O
strcmp	function
(	O
tc_strings	array
[	O
i	int
]	O
.	O
tc_var	pointer
,	O
cap	pointer
)	O
==	O
0	int
)	O
return	O
*	O
(	O
tc_strings	array
[	O
i	int
]	O
.	O
tc_value	pointer
)	O
;	O
}	O
return	O
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
int	O
rl_reset_terminal	function
(	O
terminal_name	pointer
)	O
const	O
char	O
*	O
terminal_name	pointer
;	O
{	O
_rl_screenwidth	int
=	O
_rl_screenheight	int
=	O
0	int
;	O
_rl_init_terminal_io	function
(	O
terminal_name	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
_rl_output_character_function	function
(	O
c	int
)	O
int	O
c	int
;	O
{	O
return	O
putc	function
(	O
c	int
,	O
_rl_out_stream	pointer
)	O
;	O
}	O
void	O
_rl_output_some_chars	function
(	O
string	pointer
,	O
count	int
)	O
const	O
char	O
*	O
string	pointer
;	O
int	O
count	int
;	O
{	O
fwrite	function
(	O
string	pointer
,	O
1	int
,	O
count	int
,	O
_rl_out_stream	pointer
)	O
;	O
}	O
int	O
_rl_backspace	function
(	O
count	int
)	O
int	O
count	int
;	O
{	O
register	O
int	O
i	int
;	O
if	O
(	O
_rl_term_backspace	pointer
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
count	int
;	O
i	int
++	O
)	O
tputs	function
(	O
_rl_term_backspace	pointer
,	O
1	int
,	O
_rl_output_character_function	function
)	O
;	O
else	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
count	int
;	O
i	int
++	O
)	O
putc	function
(	O
'\b'	O
,	O
_rl_out_stream	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
rl_crlf	function
(	O
)	O
{	O
putc	function
(	O
'\n'	O
,	O
_rl_out_stream	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
rl_ding	function
(	O
)	O
{	O
if	O
(	O
_rl_echoing_p	int
)	O
{	O
switch	O
(	O
_rl_bell_preference	int
)	O
{	O
case	O
NO_BELL	int
:	O
default	O
:	O
break	O
;	O
case	O
VISIBLE_BELL	int
:	O
if	O
(	O
_rl_visible_bell	pointer
)	O
{	O
tputs	function
(	O
_rl_visible_bell	pointer
,	O
1	int
,	O
_rl_output_character_function	function
)	O
;	O
break	O
;	O
}	O
case	O
AUDIBLE_BELL	int
:	O
fprintf	function
(	O
stderr	pointer
,	O
"\007"	pointer
)	O
;	O
fflush	function
(	O
stderr	pointer
)	O
;	O
break	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
static	O
int	O
enabled_meta	int
=	O
0	int
;	O
void	O
_rl_enable_meta_key	function
(	O
)	O
{	O
if	O
(	O
term_has_meta	int
&&	O
_rl_term_mm	pointer
)	O
{	O
tputs	function
(	O
_rl_term_mm	pointer
,	O
1	int
,	O
_rl_output_character_function	function
)	O
;	O
enabled_meta	int
=	O
1	int
;	O
}	O
}	O
void	O
_rl_disable_meta_key	function
(	O
)	O
{	O
if	O
(	O
term_has_meta	int
&&	O
_rl_term_mo	pointer
&&	O
enabled_meta	int
)	O
{	O
tputs	function
(	O
_rl_term_mo	pointer
,	O
1	int
,	O
_rl_output_character_function	function
)	O
;	O
enabled_meta	int
=	O
0	int
;	O
}	O
}	O
void	O
_rl_control_keypad	function
(	O
on	int
)	O
int	O
on	int
;	O
{	O
if	O
(	O
on	int
&&	O
_rl_term_ks	pointer
)	O
tputs	function
(	O
_rl_term_ks	pointer
,	O
1	int
,	O
_rl_output_character_function	function
)	O
;	O
else	O
if	O
(	O
!	O
on	int
&&	O
_rl_term_ke	pointer
)	O
tputs	function
(	O
_rl_term_ke	pointer
,	O
1	int
,	O
_rl_output_character_function	function
)	O
;	O
}	O
void	O
_rl_set_cursor	function
(	O
im	int
,	O
force	int
)	O
int	O
im	int
,	O
force	int
;	O
{	O
if	O
(	O
_rl_term_ve	pointer
&&	O
_rl_term_vs	pointer
)	O
{	O
if	O
(	O
force	int
||	O
im	int
!=	O
rl_insert_mode	int
)	O
{	O
if	O
(	O
im	int
==	O
RL_IM_OVERWRITE	int
)	O
tputs	function
(	O
_rl_term_vs	pointer
,	O
1	int
,	O
_rl_output_character_function	function
)	O
;	O
else	O
tputs	function
(	O
_rl_term_ve	pointer
,	O
1	int
,	O
_rl_output_character_function	function
)	O
;	O
}	O
}	O
}	O
