typedef	O
struct	O
{	O
FILE	O
*	O
f	pointer
;	O
EPChar	O
p	pointer
;	O
EUint32	O
tam	int
;	O
EChar	O
Name	O
[	O
500	int
]	O
;	O
}	O
INIFILE	O
,	O
*	O
PINIFILE	pointer
;	O
PINIFILE	O
EDMAPROC	O
edma_open_ini	int
(	O
EPChar	int
Name	pointer
)	O
{	O
PINIFILE	O
pini	O
;	O
EUint32	O
tam	O
;	O
if	O
(	O
Name	O
==	O
NULL	O
)	O
{	O
edma_printf_err	O
(	O
"%s"	pointer
,	O
"[edma_open_ini] Invalid file name"	pointer
)	O
;	O
return	O
NULL	int
;	O
}	O
pini	O
=	O
(	function
PINIFILE	O
)	O
edma_palloc	O
(	O
sizeof	O
(	O
INIFILE	O
)	O
)	O
;	O
if	O
(	O
pini	int
==	O
NULL	O
)	O
{	O
printf	O
(	O
"\nCan't alloc INIFILE struct"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
strncpy	O
(	O
pini	pointer
->	O
Name	pointer
,	O
Name	pointer
,	O
500	pointer
)	O
;	O
pini	O
->	O
f	pointer
=	O
fopen	O
(	O
Name	pointer
,	O
"rb"	pointer
)	O
;	O
if	O
(	O
pini	pointer
->	O
f	int
==	O
NULL	O
)	O
{	O
printf	pointer
(	O
"\n[%s] Can't Open file %s"	pointer
,	O
__FUNCTION__	pointer
,	O
Name	pointer
)	O
;	O
return	O
0	int
;	O
}	O
fseek	O
(	O
pini	pointer
->	O
f	pointer
,	O
0	pointer
,	O
SEEK_END	int
)	O
;	O
pini	O
->	O
tam	pointer
=	O
ftell	int
(	O
pini	pointer
->	O
f	pointer
)	O
;	O
pini	O
->	O
p	pointer
=	O
(	O
EPChar	O
)	O
edma_palloc	O
(	O
pini	O
->	O
tam	pointer
)	O
;	O
if	O
(	O
pini	pointer
->	O
p	int
==	O
NULL	O
)	O
{	O
printf	pointer
(	O
"\nCan't alloc %ld bytes for file %s"	pointer
,	O
pini	pointer
->	O
tam	pointer
,	O
Name	pointer
)	O
;	O
return	O
0	int
;	O
}	O
memset	O
(	O
pini	O
->	O
p	pointer
,	O
0	O
,	O
pini	int
->	O
tam	int
)	O
;	O
fseek	O
(	O
pini	pointer
->	O
f	pointer
,	O
0	pointer
,	O
SEEK_SET	int
)	O
;	O
tam	O
=	O
fread	int
(	O
pini	pointer
->	O
p	pointer
,	O
sizeof	pointer
(	O
char	O
)	O
,	O
pini	O
->	O
tam	int
,	O
pini	O
->	O
f	int
)	O
;	O
fclose	O
(	O
pini	pointer
->	O
f	pointer
)	O
;	O
return	O
pini	int
;	O
}	O
ESint32	O
EDMAPROC	O
edma_close_ini	function
(	O
PINIFILE	int
pini	O
)	O
{	O
if	O
(	O
pini	int
==	O
NULL	int
)	O
{	O
edma_printf_err	O
(	O
"%s"	pointer
,	O
"[edma_close_ini] Invalid file handler"	pointer
)	O
;	O
return	O
-	int
1	int
;	O
}	O
edma_pfree	O
(	O
(	O
HMEM	O
)	O
pini	O
->	O
p	pointer
,	O
pini	pointer
->	O
p	int
)	O
;	O
edma_pfree	O
(	O
(	pointer
HMEM	O
)	O
pini	O
,	O
pini	int
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	O
EDMAPROC	O
edma_get_ini_int	function
(	O
PINIFILE	int
pini	O
,	O
EPChar	int
Section	pointer
,	O
EPChar	O
Val	pointer
,	O
ESint32	O
def	O
)	O
{	O
EPChar	O
pi	pointer
;	O
EPChar	O
pe	pointer
;	O
EUint32	O
i	O
;	O
if	int
(	O
pini	int
==	O
NULL	O
)	O
{	O
edma_printf_err	function
(	O
"%s"	pointer
,	O
"[edma_get_ini_int] Invalid file handler"	pointer
)	O
;	O
return	O
-	int
1	int
;	O
}	O
if	O
(	O
Section	int
==	O
NULL	O
)	O
{	O
edma_printf_err	function
(	O
"%s"	pointer
,	O
"[edma_get_ini_int] Invalid Section"	pointer
)	O
;	O
return	O
-	int
1	int
;	O
}	O
if	O
(	O
Val	int
==	O
NULL	O
)	O
{	O
edma_printf_err	function
(	O
"%s"	pointer
,	O
"[edma_get_ini_int] Invalid Field"	pointer
)	O
;	O
return	O
-	int
1	int
;	O
}	O
pi	O
=	O
strstr	int
(	O
pini	pointer
->	O
p	pointer
,	O
Section	pointer
)	O
;	O
if	O
(	O
pi	int
==	O
NULL	int
)	O
return	O
def	int
;	O
pe	O
=	O
strchr	function
(	O
pi	pointer
,	O
'['	O
)	O
;	O
if	O
(	O
pe	int
!=	O
NULL	O
)	O
*	O
pe	pointer
=	O
0	int
;	O
pi	int
=	O
strstr	int
(	O
pi	pointer
,	O
Val	int
)	O
;	O
if	O
(	O
pi	int
==	O
NULL	int
)	O
{	O
*	pointer
pe	pointer
=	O
'['	int
;	O
return	O
def	int
;	O
}	O
pi	O
=	O
strchr	int
(	O
pi	pointer
,	O
'='	int
)	O
;	O
pi	O
++	O
;	O
i	O
=	O
atoi	int
(	O
pi	pointer
)	O
;	O
*	O
pe	pointer
=	O
'['	int
;	O
return	O
i	int
;	O
}	O
EUint32	O
EDMAPROC	O
edma_get_ini_string	function
(	O
PINIFILE	int
pini	O
,	O
EPChar	O
Section	pointer
,	O
EPChar	O
Val	pointer
,	O
EPChar	O
def	pointer
,	O
EPChar	O
Buffer	pointer
,	O
EUint32	O
size	O
)	O
{	O
EPChar	O
pi	pointer
;	O
EPChar	O
pe	pointer
,	O
pe1	pointer
;	O
EChar	O
sec	O
[	O
80	int
]	O
;	O
EUint32	O
n	int
;	O
if	O
(	O
pini	int
==	O
NULL	O
)	O
{	O
edma_printf_err	O
(	O
"%s"	pointer
,	O
"[edma_get_ini_string] Invalid file handler"	pointer
)	O
;	O
return	O
-	int
1	int
;	O
}	O
if	O
(	O
Section	int
==	O
NULL	O
)	O
{	O
edma_printf_err	O
(	O
"%s"	pointer
,	O
"[edma_get_ini_string] Invalid Section"	pointer
)	O
;	O
return	O
-	int
1	int
;	O
}	O
if	O
(	O
Val	int
==	O
NULL	O
)	O
{	O
edma_printf_err	O
(	O
"%s"	pointer
,	O
"[edma_get_ini_string] Invalid Field"	pointer
)	O
;	O
return	O
-	int
1	int
;	O
}	O
if	O
(	O
Buffer	int
==	O
NULL	O
)	O
{	O
edma_printf_err	O
(	O
"%s"	pointer
,	O
"[edma_get_ini_string] Invalid Target buffer"	pointer
)	O
;	O
return	O
-	int
1	int
;	O
}	O
memset	O
(	O
Buffer	O
,	O
0	int
,	O
size	int
)	O
;	O
snprintf	O
(	O
sec	pointer
,	O
80	int
,	O
"[%s]"	int
,	O
Section	int
)	O
;	O
pi	O
=	O
strstr	int
(	O
pini	pointer
->	O
p	pointer
,	O
sec	pointer
)	O
;	O
if	O
(	O
pi	int
==	O
NULL	int
)	O
{	O
return	pointer
0	int
;	O
}	O
pi	O
++	O
;	O
pe	O
=	O
strchr	function
(	O
pi	O
,	O
'['	O
)	O
;	O
if	O
(	O
pe	int
!=	O
NULL	O
)	O
*	O
pe	pointer
=	O
0	int
;	O
pi	O
=	O
strstr	int
(	O
pi	pointer
,	O
Val	int
)	O
;	O
if	O
(	O
(	int
pi	O
==	O
NULL	O
)	O
)	O
{	O
*	O
pe	pointer
=	O
'['	int
;	O
return	O
0	int
;	O
}	O
pi	O
=	O
strchr	int
(	O
pi	pointer
,	O
'='	O
)	O
;	O
pe1	O
=	O
strchr	int
(	O
pi	pointer
,	O
13	O
)	O
;	O
if	O
(	O
pe1	int
==	O
NULL	O
)	O
{	O
pe1	O
=	O
strchr	int
(	O
pi	pointer
,	O
10	O
)	O
;	O
if	O
(	O
pe1	int
==	O
NULL	O
)	O
{	O
printf	O
(	O
"%s"	pointer
,	O
"[edma_get_ini_string] Can't locate end of line"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
n	O
=	O
pe1	function
-	O
pi	int
;	O
n	O
--	O
;	O
pi	O
++	O
;	O
strncpy	O
(	O
Buffer	pointer
,	O
pi	int
,	O
n	int
)	O
;	O
Buffer	O
[	O
n	int
]	O
=	O
0	O
;	O
*	int
pe	pointer
=	O
'['	O
;	O
n	O
=	O
strlen	int
(	O
Buffer	pointer
)	O
;	O
return	O
n	int
;	O
}	O
ESint32	O
EDMAPROC	O
edma_clean_ini_string	function
(	O
EPChar	int
Buffer	pointer
)	O
{	O
EUint32	O
i	int
;	O
if	O
(	O
Buffer	O
==	O
NULL	int
)	O
{	O
edma_printf_err	O
(	O
"%s"	pointer
,	O
"[edma_clean_ini_string] Invalid buffer"	pointer
)	O
;	O
return	O
-	int
1	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
strlen	int
(	O
Buffer	pointer
)	O
;	O
i	O
++	O
)	O
{	O
if	O
(	O
Buffer	int
[	O
i	int
]	O
==	O
'\\'	O
)	O
Buffer	O
[	O
i	int
]	O
=	O
'/'	int
;	O
}	pointer
return	O
0	int
;	O
}	O