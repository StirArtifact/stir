enum	O
{	O
ACCEPTED	int
=	O
0x1	int
,	O
CLIPPED_FIRST	int
=	O
0x2	int
,	O
CLIPPED_SECOND	int
=	O
0x4	int
}	O
;	O
enum	O
{	O
TOP	int
=	O
0x1	int
,	O
BOTTOM	int
=	O
0x2	int
,	O
RIGHT	int
=	O
0x4	int
,	O
LEFT	int
=	O
0x8	int
}	O
;	O
static	O
int	O
clip_line	function
(	O
double	O
*	O
x0_p	pointer
,	O
double	O
*	O
y0_p	pointer
,	O
double	O
*	O
x1_p	pointer
,	O
double	O
*	O
y1_p	pointer
,	O
double	O
x_min_clip	double
,	O
double	O
x_max_clip	double
,	O
double	O
y_min_clip	double
,	O
double	O
y_max_clip	double
,	O
bool	enum
spec_min_x	enum
,	O
bool	enum
spec_min_y	enum
,	O
bool	enum
spec_max_x	enum
,	O
bool	enum
spec_max_y	enum
)	O
;	O
static	O
int	O
compute_relevant_points	function
(	O
double	O
xx	double
,	O
double	O
yy	double
,	O
double	O
oldxx	double
,	O
double	O
oldyy	double
,	O
int	O
clip_mode	int
,	O
double	O
user_min_x	double
,	O
double	O
user_min_y	double
,	O
double	O
user_max_x	double
,	O
double	O
user_max_y	double
,	O
bool	enum
spec_min_x	enum
,	O
bool	enum
spec_min_y	enum
,	O
bool	enum
spec_max_x	enum
,	O
bool	enum
spec_max_y	enum
,	O
double	O
xxr	array
[	O
2	int
]	O
,	O
double	O
yyr	array
[	O
2	int
]	O
)	O
;	O
static	O
int	O
compute_outcode	function
(	O
double	O
x	double
,	O
double	O
y	double
,	O
double	O
x_min_clip	double
,	O
double	O
x_max_clip	double
,	O
double	O
y_min_clip	double
,	O
double	O
y_max_clip	double
,	O
bool	enum
spec_min_x	enum
,	O
bool	enum
spec_min_y	enum
,	O
bool	enum
spec_max_x	enum
,	O
bool	enum
spec_max_y	enum
)	O
;	O
void	O
array_bounds	function
(	O
const	O
Point	struct
*	O
p	pointer
,	O
int	O
length	int
,	O
bool	enum
transpose_axes	enum
,	O
int	O
clip_mode	int
,	O
double	O
*	O
min_x	pointer
,	O
double	O
*	O
min_y	pointer
,	O
double	O
*	O
max_x	pointer
,	O
double	O
*	O
max_y	pointer
,	O
bool	enum
spec_min_x	enum
,	O
bool	enum
spec_min_y	enum
,	O
bool	enum
spec_max_x	enum
,	O
bool	enum
spec_max_y	enum
)	O
{	O
double	O
user_min_x	double
=	O
0.0	int
,	O
user_min_y	double
=	O
0.0	int
;	O
double	O
user_max_x	double
=	O
0.0	int
,	O
user_max_y	double
=	O
0.0	int
;	O
double	O
local_min_x	double
=	O
0.0	int
,	O
local_min_y	double
=	O
0.0	int
;	O
double	O
local_max_x	double
=	O
0.0	int
,	O
local_max_y	double
=	O
0.0	int
;	O
double	O
xx	double
,	O
yy	double
,	O
oldxx	double
,	O
oldyy	double
;	O
bool	enum
point_seen	enum
=	O
false	int
;	O
int	O
i	int
;	O
if	O
(	O
length	int
==	O
0	int
)	O
{	O
if	O
(	O
!	O
spec_min_x	enum
)	O
*	O
min_x	pointer
=	O
0.0	int
;	O
if	O
(	O
!	O
spec_min_y	enum
)	O
*	O
min_y	pointer
=	O
0.0	int
;	O
if	O
(	O
!	O
spec_max_x	enum
)	O
*	O
max_x	pointer
=	O
*	O
min_x	pointer
;	O
if	O
(	O
!	O
spec_max_y	enum
)	O
*	O
max_y	pointer
=	O
*	O
min_y	pointer
;	O
return	O
;	O
}	O
if	O
(	O
spec_min_x	enum
)	O
user_min_x	double
=	O
*	O
min_x	pointer
;	O
else	O
local_min_x	double
=	O
DBL_MAX	O
;	O
if	O
(	O
spec_max_x	enum
)	O
user_max_x	double
=	O
*	O
max_x	pointer
;	O
else	O
local_max_x	double
=	O
-	O
(	O
DBL_MAX	O
)	O
;	O
if	O
(	O
spec_min_x	enum
&&	O
spec_max_x	enum
&&	O
user_min_x	double
>	O
user_max_x	double
)	O
{	O
double	O
tmp	double
;	O
tmp	double
=	O
user_min_x	double
;	O
user_min_x	double
=	O
user_max_x	double
;	O
user_max_x	double
=	O
tmp	double
;	O
}	O
if	O
(	O
spec_min_y	enum
)	O
user_min_y	double
=	O
*	O
min_y	pointer
;	O
else	O
local_min_y	double
=	O
DBL_MAX	O
;	O
if	O
(	O
spec_max_y	enum
)	O
user_max_y	double
=	O
*	O
max_y	pointer
;	O
else	O
local_max_y	double
=	O
-	O
(	O
DBL_MAX	O
)	O
;	O
if	O
(	O
spec_min_y	enum
&&	O
spec_max_y	enum
&&	O
user_min_y	double
>	O
user_max_y	double
)	O
{	O
double	O
tmp	double
;	O
tmp	double
=	O
user_min_y	double
;	O
user_min_y	double
=	O
user_max_y	double
;	O
user_max_y	double
=	O
tmp	double
;	O
}	O
oldxx	double
=	O
oldyy	double
=	O
0.0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
length	int
;	O
i	int
++	O
)	O
{	O
double	O
xxr	array
[	O
2	int
]	O
,	O
yyr	array
[	O
2	int
]	O
;	O
int	O
n	int
,	O
j	int
;	O
int	O
effective_clip_mode	int
;	O
xx	double
=	O
(	O
transpose_axes	enum
?	O
p	pointer
[	O
i	int
]	O
.	O
y	double
:	O
p	pointer
[	O
i	int
]	O
.	O
x	double
)	O
;	O
yy	double
=	O
(	O
transpose_axes	enum
?	O
p	pointer
[	O
i	int
]	O
.	O
x	double
:	O
p	pointer
[	O
i	int
]	O
.	O
y	double
)	O
;	O
if	O
(	O
i	int
==	O
0	int
||	O
p	pointer
[	O
i	int
]	O
.	O
pendown	enum
==	O
false	int
||	O
(	O
p	pointer
[	O
i	int
]	O
.	O
linemode	int
<=	O
0	int
&&	O
p	pointer
[	O
i	int
]	O
.	O
fill_fraction	double
<	O
0.0	int
)	O
)	O
effective_clip_mode	int
=	O
0	int
;	O
else	O
if	O
(	O
p	pointer
[	O
i	int
]	O
.	O
fill_fraction	double
>=	O
0.0	int
)	O
effective_clip_mode	int
=	O
2	int
;	O
else	O
effective_clip_mode	int
=	O
clip_mode	int
;	O
n	int
=	O
compute_relevant_points	function
(	O
xx	double
,	O
yy	double
,	O
oldxx	double
,	O
oldyy	double
,	O
effective_clip_mode	int
,	O
user_min_x	double
,	O
user_min_y	double
,	O
user_max_x	double
,	O
user_max_y	double
,	O
spec_min_x	enum
,	O
spec_min_y	enum
,	O
spec_max_x	enum
,	O
spec_max_y	enum
,	O
xxr	array
,	O
yyr	array
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
n	int
;	O
j	int
++	O
)	O
{	O
point_seen	enum
=	O
true	int
;	O
if	O
(	O
!	O
spec_min_x	enum
)	O
local_min_x	double
=	O
DMIN	O
(	O
local_min_x	double
,	O
xxr	array
[	O
j	int
]	O
)	O
;	O
if	O
(	O
!	O
spec_min_y	enum
)	O
local_min_y	double
=	O
DMIN	O
(	O
local_min_y	double
,	O
yyr	array
[	O
j	int
]	O
)	O
;	O
if	O
(	O
!	O
spec_max_x	enum
)	O
local_max_x	double
=	O
DMAX	O
(	O
local_max_x	double
,	O
xxr	array
[	O
j	int
]	O
)	O
;	O
if	O
(	O
!	O
spec_max_y	enum
)	O
local_max_y	double
=	O
DMAX	O
(	O
local_max_y	double
,	O
yyr	array
[	O
j	int
]	O
)	O
;	O
}	O
oldxx	double
=	O
xx	double
;	O
oldyy	double
=	O
yy	double
;	O
}	O
if	O
(	O
!	O
point_seen	enum
)	O
local_min_x	double
=	O
local_min_y	double
=	O
local_max_x	double
=	O
local_max_y	double
=	O
0.0	int
;	O
if	O
(	O
!	O
spec_min_x	enum
)	O
*	O
min_x	pointer
=	O
local_min_x	double
;	O
if	O
(	O
!	O
spec_min_y	enum
)	O
*	O
min_y	pointer
=	O
local_min_y	double
;	O
if	O
(	O
!	O
spec_max_x	enum
)	O
*	O
max_x	pointer
=	O
local_max_x	double
;	O
if	O
(	O
!	O
spec_max_y	enum
)	O
*	O
max_y	pointer
=	O
local_max_y	double
;	O
return	O
;	O
}	O
static	O
int	O
compute_relevant_points	function
(	O
double	O
xx	double
,	O
double	O
yy	double
,	O
double	O
oldxx	double
,	O
double	O
oldyy	double
,	O
int	O
clip_mode	int
,	O
double	O
user_min_x	double
,	O
double	O
user_min_y	double
,	O
double	O
user_max_x	double
,	O
double	O
user_max_y	double
,	O
bool	enum
spec_min_x	enum
,	O
bool	enum
spec_min_y	enum
,	O
bool	enum
spec_max_x	enum
,	O
bool	enum
spec_max_y	enum
,	O
double	O
xxr	array
[	O
2	int
]	O
,	O
double	O
yyr	array
[	O
2	int
]	O
)	O
{	O
int	O
clipval	int
;	O
switch	O
(	O
clip_mode	int
)	O
{	O
case	O
0	int
:	O
if	O
(	O
(	O
!	O
spec_min_x	enum
||	O
xx	double
>=	O
user_min_x	double
)	O
&&	O
(	O
!	O
spec_max_x	enum
||	O
xx	double
<=	O
user_max_x	double
)	O
&&	O
(	O
!	O
spec_min_y	enum
||	O
yy	double
>=	O
user_min_y	double
)	O
&&	O
(	O
!	O
spec_max_y	enum
||	O
yy	double
<=	O
user_max_y	double
)	O
)	O
{	O
xxr	array
[	O
0	int
]	O
=	O
xx	double
;	O
yyr	array
[	O
0	int
]	O
=	O
yy	double
;	O
return	O
1	int
;	O
}	O
else	O
return	O
0	int
;	O
break	O
;	O
case	O
1	int
:	O
default	O
:	O
clipval	int
=	O
clip_line	function
(	O
&	O
oldxx	double
,	O
&	O
oldyy	double
,	O
&	O
xx	double
,	O
&	O
yy	double
,	O
user_min_x	double
,	O
user_max_x	double
,	O
user_min_y	double
,	O
user_max_y	double
,	O
spec_min_x	enum
,	O
spec_min_y	enum
,	O
spec_max_x	enum
,	O
spec_max_y	enum
)	O
;	O
if	O
(	O
(	O
clipval	int
&	O
ACCEPTED	int
)	O
&&	O
!	O
(	O
(	O
clipval	int
&	O
CLIPPED_FIRST	int
)	O
&&	O
(	O
clipval	int
&	O
CLIPPED_SECOND	int
)	O
)	O
)	O
{	O
xxr	array
[	O
0	int
]	O
=	O
oldxx	double
;	O
yyr	array
[	O
0	int
]	O
=	O
oldyy	double
;	O
xxr	array
[	O
1	int
]	O
=	O
xx	double
;	O
yyr	array
[	O
1	int
]	O
=	O
yy	double
;	O
return	O
2	int
;	O
}	O
else	O
return	O
0	int
;	O
break	O
;	O
case	O
2	int
:	O
clipval	int
=	O
clip_line	function
(	O
&	O
oldxx	double
,	O
&	O
oldyy	double
,	O
&	O
xx	double
,	O
&	O
yy	double
,	O
user_min_x	double
,	O
user_max_x	double
,	O
user_min_y	double
,	O
user_max_y	double
,	O
spec_min_x	enum
,	O
spec_min_y	enum
,	O
spec_max_x	enum
,	O
spec_max_y	enum
)	O
;	O
if	O
(	O
clipval	int
&	O
ACCEPTED	int
)	O
{	O
xxr	array
[	O
0	int
]	O
=	O
oldxx	double
;	O
yyr	array
[	O
0	int
]	O
=	O
oldyy	double
;	O
xxr	array
[	O
1	int
]	O
=	O
xx	double
;	O
yyr	array
[	O
1	int
]	O
=	O
yy	double
;	O
return	O
2	int
;	O
}	O
else	O
return	O
0	int
;	O
break	O
;	O
}	O
}	O
static	O
int	O
clip_line	function
(	O
double	O
*	O
x0_p	pointer
,	O
double	O
*	O
y0_p	pointer
,	O
double	O
*	O
x1_p	pointer
,	O
double	O
*	O
y1_p	pointer
,	O
double	O
x_min_clip	double
,	O
double	O
x_max_clip	double
,	O
double	O
y_min_clip	double
,	O
double	O
y_max_clip	double
,	O
bool	enum
spec_min_x	enum
,	O
bool	enum
spec_min_y	enum
,	O
bool	enum
spec_max_x	enum
,	O
bool	enum
spec_max_y	enum
)	O
{	O
double	O
x0	double
=	O
*	O
x0_p	pointer
;	O
double	O
y0	function
=	O
*	O
y0_p	pointer
;	O
double	O
x1	double
=	O
*	O
x1_p	pointer
;	O
double	O
y1	function
=	O
*	O
y1_p	pointer
;	O
int	O
outcode0	int
,	O
outcode1	int
;	O
bool	enum
accepted	enum
;	O
int	O
clipval	int
=	O
0	int
;	O
outcode0	int
=	O
compute_outcode	function
(	O
x0	double
,	O
y0	function
,	O
x_min_clip	double
,	O
x_max_clip	double
,	O
y_min_clip	double
,	O
y_max_clip	double
,	O
spec_min_x	enum
,	O
spec_min_y	enum
,	O
spec_max_x	enum
,	O
spec_max_y	enum
)	O
;	O
outcode1	int
=	O
compute_outcode	function
(	O
x1	double
,	O
y1	function
,	O
x_min_clip	double
,	O
x_max_clip	double
,	O
y_min_clip	double
,	O
y_max_clip	double
,	O
spec_min_x	enum
,	O
spec_min_y	enum
,	O
spec_max_x	enum
,	O
spec_max_y	enum
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
!	O
(	O
outcode0	int
|	O
outcode1	int
)	O
)	O
{	O
accepted	enum
=	O
true	int
;	O
break	O
;	O
}	O
else	O
if	O
(	O
outcode0	int
&	O
outcode1	int
)	O
{	O
accepted	enum
=	O
false	int
;	O
break	O
;	O
}	O
else	O
{	O
int	O
outcode_out	int
=	O
(	O
outcode0	int
?	O
outcode0	int
:	O
outcode1	int
)	O
;	O
double	O
x	double
,	O
y	double
;	O
if	O
(	O
outcode_out	int
&	O
RIGHT	int
)	O
{	O
x	double
=	O
x_max_clip	double
;	O
y	double
=	O
y0	function
+	O
(	O
y1	function
-	O
y0	function
)	O
*	O
(	O
x_max_clip	double
-	O
x0	double
)	O
/	O
(	O
x1	double
-	O
x0	double
)	O
;	O
}	O
else	O
if	O
(	O
outcode_out	int
&	O
LEFT	int
)	O
{	O
x	double
=	O
x_min_clip	double
;	O
y	double
=	O
y0	function
+	O
(	O
y1	function
-	O
y0	function
)	O
*	O
(	O
x_min_clip	double
-	O
x0	double
)	O
/	O
(	O
x1	double
-	O
x0	double
)	O
;	O
}	O
else	O
if	O
(	O
outcode_out	int
&	O
TOP	int
)	O
{	O
x	double
=	O
x0	double
+	O
(	O
x1	double
-	O
x0	double
)	O
*	O
(	O
y_max_clip	double
-	O
y0	function
)	O
/	O
(	O
y1	function
-	O
y0	function
)	O
;	O
y	double
=	O
y_max_clip	double
;	O
}	O
else	O
{	O
x	double
=	O
x0	double
+	O
(	O
x1	double
-	O
x0	double
)	O
*	O
(	O
y_min_clip	double
-	O
y0	function
)	O
/	O
(	O
y1	function
-	O
y0	function
)	O
;	O
y	double
=	O
y_min_clip	double
;	O
}	O
if	O
(	O
outcode_out	int
==	O
outcode0	int
)	O
{	O
x0	double
=	O
x	double
;	O
y0	function
=	O
y	double
;	O
outcode0	int
=	O
compute_outcode	function
(	O
x0	double
,	O
y0	function
,	O
x_min_clip	double
,	O
x_max_clip	double
,	O
y_min_clip	double
,	O
y_max_clip	double
,	O
spec_min_x	enum
,	O
spec_min_y	enum
,	O
spec_max_x	enum
,	O
spec_max_y	enum
)	O
;	O
}	O
else	O
{	O
x1	double
=	O
x	double
;	O
y1	function
=	O
y	double
;	O
outcode1	int
=	O
compute_outcode	function
(	O
x1	double
,	O
y1	function
,	O
x_min_clip	double
,	O
x_max_clip	double
,	O
y_min_clip	double
,	O
y_max_clip	double
,	O
spec_min_x	enum
,	O
spec_min_y	enum
,	O
spec_max_x	enum
,	O
spec_max_y	enum
)	O
;	O
}	O
}	O
}	O
if	O
(	O
accepted	enum
)	O
{	O
clipval	int
|=	O
ACCEPTED	int
;	O
if	O
(	O
(	O
x0	double
!=	O
*	O
x0_p	pointer
)	O
||	O
(	O
y0	function
!=	O
*	O
y0_p	pointer
)	O
)	O
clipval	int
|=	O
CLIPPED_FIRST	int
;	O
if	O
(	O
(	O
x1	double
!=	O
*	O
x1_p	pointer
)	O
||	O
(	O
y1	function
!=	O
*	O
y1_p	pointer
)	O
)	O
clipval	int
|=	O
CLIPPED_SECOND	int
;	O
*	O
x0_p	pointer
=	O
x0	double
;	O
*	O
y0_p	pointer
=	O
y0	function
;	O
*	O
x1_p	pointer
=	O
x1	double
;	O
*	O
y1_p	pointer
=	O
y1	function
;	O
}	O
return	O
clipval	int
;	O
}	O
static	O
int	O
compute_outcode	function
(	O
double	O
x	double
,	O
double	O
y	double
,	O
double	O
x_min_clip	double
,	O
double	O
x_max_clip	double
,	O
double	O
y_min_clip	double
,	O
double	O
y_max_clip	double
,	O
bool	enum
spec_min_x	enum
,	O
bool	enum
spec_min_y	enum
,	O
bool	enum
spec_max_x	enum
,	O
bool	enum
spec_max_y	enum
)	O
{	O
int	O
code	int
=	O
0	int
;	O
if	O
(	O
spec_max_x	enum
&&	O
x	double
>	O
x_max_clip	double
)	O
code	int
|=	O
RIGHT	int
;	O
else	O
if	O
(	O
spec_min_x	enum
&&	O
x	double
<	O
x_min_clip	double
)	O
code	int
|=	O
LEFT	int
;	O
if	O
(	O
spec_max_y	enum
&&	O
y	double
>	O
y_max_clip	double
)	O
code	int
|=	O
TOP	int
;	O
else	O
if	O
(	O
spec_min_y	enum
&&	O
y	double
<	O
y_min_clip	double
)	O
code	int
|=	O
BOTTOM	int
;	O
return	O
code	int
;	O
}	O
