typedef	O
struct	O
{	struct
gsl_matrix	O
*	O
JTJ	pointer
;	O
gsl_matrix	O
*	O
work_JTJ	pointer
;	O
gsl_vector	O
*	O
rhs	pointer
;	O
gsl_permutation	O
*	O
perm	pointer
;	O
gsl_vector	O
*	O
work3p	pointer
;	O
double	O
mu	O
;	O
}	O
mcholesky_state_t	O
;	O
static	O
void	O
*	function
mcholesky_alloc	function
(	O
const	O
size_t	O
n	O
,	O
const	O
size_t	O
p	long
)	O
;	O
static	O
int	O
mcholesky_init	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
mcholesky_presolve	function
(	O
const	O
double	O
mu	O
,	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
mcholesky_solve	function
(	O
const	O
gsl_vector	O
*	O
f	pointer
,	O
gsl_vector	O
*	O
x	pointer
,	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
mcholesky_solve_rhs	function
(	O
const	O
gsl_vector	O
*	O
b	pointer
,	O
gsl_vector	O
*	O
x	pointer
,	O
mcholesky_state_t	O
*	O
state	pointer
)	O
;	O
static	O
int	O
mcholesky_regularize	function
(	O
const	O
double	O
mu	O
,	O
const	O
gsl_vector	O
*	O
diag	pointer
,	O
gsl_matrix	O
*	O
A	pointer
,	O
mcholesky_state_t	O
*	O
state	pointer
)	O
;	O
static	O
void	O
*	function
mcholesky_alloc	function
(	O
const	O
size_t	O
n	O
,	O
const	O
size_t	O
p	long
)	O
{	O
mcholesky_state_t	O
*	O
state	pointer
;	O
(	O
void	O
)	O
n	O
;	O
state	O
=	O
calloc	O
(	O
1	int
,	O
sizeof	O
(	O
mcholesky_state_t	O
)	O
)	O
;	O
if	O
(	O
state	O
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate mcholesky state"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	O
->	O
JTJ	pointer
=	O
gsl_matrix_alloc	O
(	O
p	int
,	O
p	int
)	O
;	O
if	O
(	O
state	O
->	O
JTJ	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for JTJ"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	O
->	O
work_JTJ	pointer
=	O
gsl_matrix_alloc	O
(	O
p	int
,	O
p	int
)	O
;	O
if	O
(	O
state	O
->	O
work_JTJ	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for JTJ workspace"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	O
->	O
rhs	pointer
=	O
gsl_vector_alloc	O
(	O
p	int
)	O
;	O
if	O
(	O
state	O
->	O
rhs	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for rhs"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	O
->	O
perm	pointer
=	O
gsl_permutation_alloc	O
(	O
p	int
)	O
;	O
if	O
(	O
state	O
->	O
perm	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for perm"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	O
->	O
work3p	pointer
=	O
gsl_vector_alloc	O
(	O
3	int
*	O
p	O
)	O
;	O
if	O
(	O
state	O
->	O
work3p	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for work3p"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	O
->	O
mu	pointer
=	O
-	int
1.0	int
;	O
return	O
state	int
;	O
}	O
static	O
void	O
mcholesky_free	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
mcholesky_state_t	O
*	O
state	pointer
=	O
(	O
mcholesky_state_t	O
*	O
)	O
vstate	pointer
;	O
if	O
(	O
state	O
->	O
JTJ	pointer
)	O
gsl_matrix_free	O
(	O
state	pointer
->	O
JTJ	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
work_JTJ	pointer
)	O
gsl_matrix_free	O
(	O
state	pointer
->	O
work_JTJ	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
rhs	pointer
)	O
gsl_vector_free	O
(	O
state	pointer
->	O
rhs	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
perm	pointer
)	O
gsl_permutation_free	O
(	O
state	pointer
->	O
perm	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
work3p	pointer
)	O
gsl_vector_free	O
(	O
state	pointer
->	O
work3p	pointer
)	O
;	O
free	O
(	O
state	pointer
)	O
;	O
}	O
static	O
int	O
mcholesky_init	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
const	O
gsl_multifit_nlinear_trust_state	O
*	O
trust_state	pointer
=	O
(	O
const	O
gsl_multifit_nlinear_trust_state	O
*	O
)	O
vtrust_state	pointer
;	O
mcholesky_state_t	O
*	O
state	pointer
=	O
(	O
mcholesky_state_t	O
*	O
)	O
vstate	pointer
;	O
gsl_blas_dsyrk	O
(	O
CblasLower	int
,	O
CblasTrans	int
,	O
1.0	int
,	O
trust_state	O
->	O
J	pointer
,	O
0.0	O
,	O
state	pointer
->	O
JTJ	pointer
)	O
;	O
return	O
GSL_SUCCESS	O
;	O
}	O
static	O
int	O
mcholesky_presolve	function
(	O
const	O
double	O
mu	O
,	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
const	O
gsl_multifit_nlinear_trust_state	O
*	O
trust_state	pointer
=	O
(	O
const	O
gsl_multifit_nlinear_trust_state	O
*	O
)	O
vtrust_state	pointer
;	O
mcholesky_state_t	O
*	O
state	pointer
=	O
(	O
mcholesky_state_t	O
*	O
)	O
vstate	pointer
;	O
gsl_matrix	O
*	O
JTJ	pointer
=	O
state	O
->	O
work_JTJ	pointer
;	O
const	O
gsl_vector	O
*	O
diag	pointer
=	O
trust_state	O
->	O
diag	pointer
;	O
int	O
status	int
;	O
gsl_matrix_tricpy	O
(	O
CblasLower	int
,	O
CblasNonUnit	int
,	O
JTJ	O
,	O
state	O
->	O
JTJ	pointer
)	O
;	O
status	O
=	O
mcholesky_regularize	function
(	O
mu	pointer
,	O
diag	int
,	O
JTJ	O
,	O
state	O
)	O
;	O
if	O
(	O
status	O
)	O
return	O
status	O
;	O
status	O
=	O
gsl_linalg_mcholesky_decomp	function
(	O
JTJ	pointer
,	O
state	O
->	O
perm	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
status	pointer
)	O
return	O
status	O
;	O
state	O
->	O
mu	pointer
=	O
mu	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
mcholesky_solve	function
(	O
const	O
gsl_vector	O
*	O
f	pointer
,	O
gsl_vector	O
*	O
x	pointer
,	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
const	O
gsl_multifit_nlinear_trust_state	O
*	O
trust_state	pointer
=	O
(	O
const	O
gsl_multifit_nlinear_trust_state	O
*	O
)	O
vtrust_state	pointer
;	O
mcholesky_state_t	O
*	O
state	pointer
=	O
(	O
mcholesky_state_t	O
*	O
)	O
vstate	pointer
;	O
int	O
status	int
;	O
gsl_blas_dgemv	O
(	O
CblasTrans	int
,	O
-	int
1.0	int
,	O
trust_state	O
->	O
J	pointer
,	O
f	O
,	O
0.0	O
,	O
state	O
->	O
rhs	pointer
)	O
;	O
status	O
=	O
mcholesky_solve_rhs	function
(	O
state	O
->	O
rhs	pointer
,	O
x	O
,	O
state	O
)	O
;	O
if	O
(	O
status	O
)	O
return	O
status	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
mcholesky_rcond	function
(	O
double	O
*	O
rcond	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
int	O
status	int
;	O
mcholesky_state_t	O
*	O
state	pointer
=	O
(	O
mcholesky_state_t	O
*	O
)	O
vstate	pointer
;	O
double	O
rcond_JTJ	O
;	O
if	O
(	O
state	O
->	O
mu	pointer
!=	O
0	int
)	O
{	O
gsl_matrix_tricpy	O
(	O
CblasLower	int
,	O
CblasNonUnit	int
,	O
state	pointer
->	O
work_JTJ	pointer
,	O
state	O
->	O
JTJ	pointer
)	O
;	O
status	O
=	O
gsl_linalg_mcholesky_decomp	function
(	O
state	O
->	O
work_JTJ	pointer
,	O
state	O
->	O
perm	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
status	pointer
)	O
return	O
status	O
;	O
}	O
status	O
=	O
gsl_linalg_mcholesky_rcond	function
(	O
state	O
->	O
work_JTJ	pointer
,	O
state	O
->	O
perm	pointer
,	O
&	O
rcond_JTJ	pointer
,	O
state	O
->	O
work3p	pointer
)	O
;	O
if	O
(	O
status	O
==	O
GSL_SUCCESS	O
)	O
*	O
rcond	pointer
=	O
sqrt	pointer
(	O
rcond_JTJ	O
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
mcholesky_solve_rhs	function
(	O
const	O
gsl_vector	O
*	O
b	pointer
,	O
gsl_vector	O
*	O
x	pointer
,	O
mcholesky_state_t	O
*	O
state	pointer
)	O
{	O
int	O
status	int
;	O
gsl_matrix	O
*	O
JTJ	pointer
=	O
state	O
->	O
work_JTJ	pointer
;	O
status	O
=	O
gsl_linalg_mcholesky_solve	function
(	O
JTJ	O
,	O
state	pointer
->	O
perm	pointer
,	O
b	O
,	O
x	int
)	O
;	O
if	O
(	O
status	pointer
)	O
return	O
status	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
mcholesky_regularize	function
(	O
const	O
double	O
mu	O
,	O
const	O
gsl_vector	O
*	O
diag	pointer
,	O
gsl_matrix	O
*	O
A	pointer
,	O
mcholesky_state_t	O
*	O
state	pointer
)	O
{	O
(	O
void	O
)	O
state	O
;	O
if	O
(	O
mu	O
!=	O
0.0	O
)	O
{	O
size_t	O
i	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
diag	int
->	O
size	pointer
;	O
++	pointer
i	O
)	O
{	O
double	O
di	O
=	O
gsl_vector_get	O
(	O
diag	O
,	O
i	O
)	O
;	O
double	O
*	O
Aii	O
=	O
gsl_matrix_ptr	O
(	O
A	O
,	O
i	int
,	O
i	int
)	O
;	O
*	O
Aii	pointer
+=	O
mu	O
*	O
di	O
*	O
di	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	O
;	O
}	O
static	O
const	O
gsl_multifit_nlinear_solver	O
mcholesky_type	O
=	O
{	O
"mcholesky"	O
,	O
mcholesky_alloc	O
,	O
mcholesky_init	O
,	O
mcholesky_presolve	O
,	O
mcholesky_solve	O
,	O
mcholesky_rcond	O
,	O
mcholesky_free	O
}	O
;	O
const	O
gsl_multifit_nlinear_solver	O
*	O
gsl_multifit_nlinear_solver_mcholesky	pointer
=	O
&	O
mcholesky_type	struct
;	O