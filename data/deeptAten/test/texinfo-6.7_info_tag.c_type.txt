struct	O
tag_handler	struct
{	O
const	O
char	O
*	O
name	pointer
;	O
size_t	O
len	long
;	O
int	O
(	int
*	O
handler	pointer
)	O
(	O
char	O
*	O
,	O
struct	O
text_buffer	struct
*	O
)	pointer
;	O
}	O
;	O
struct	O
info_tag	struct
{	O
struct	O
info_tag	struct
*	O
next	pointer
;	O
char	O
*	O
kw	pointer
;	O
char	O
*	O
val	pointer
;	O
}	O
;	O
static	O
void	O
info_tag_free	function
(	O
struct	O
info_tag	struct
*	O
tag	pointer
)	O
{	O
while	O
(	O
tag	O
)	O
{	O
struct	O
info_tag	struct
*	O
next	pointer
=	O
tag	O
->	O
next	pointer
;	O
free	O
(	O
tag	pointer
->	O
kw	pointer
)	O
;	O
free	O
(	O
tag	pointer
->	O
val	pointer
)	O
;	O
free	O
(	O
tag	pointer
)	O
;	O
tag	O
=	O
next	function
;	O
}	pointer
}	O
static	O
struct	O
info_tag	struct
*	O
info_tag_find	function
(	O
struct	O
info_tag	struct
*	O
tag	pointer
,	O
const	O
char	O
*	O
kw	pointer
)	O
{	O
for	O
(	O
;	int
tag	O
;	O
tag	O
=	O
tag	function
->	O
next	pointer
)	O
if	O
(	O
strcmp	pointer
(	O
tag	pointer
->	O
kw	pointer
,	O
kw	pointer
)	O
==	O
0	int
)	O
return	O
tag	O
;	O
return	O
NULL	O
;	O
}	O
static	O
struct	O
info_tag	struct
*	O
tag_found_keyword	function
(	O
struct	O
text_buffer	struct
*	O
tmpbuf_ptr	pointer
,	O
char	O
*	O
*	pointer
kw	pointer
)	O
{	O
struct	O
info_tag	struct
*	O
tag	pointer
=	O
xmalloc	O
(	O
sizeof	O
(	O
*	O
tag	pointer
)	O
)	O
;	O
tag	O
->	O
next	pointer
=	O
NULL	pointer
;	O
text_buffer_add_char	pointer
(	O
tmpbuf_ptr	O
,	O
0	pointer
)	O
;	O
if	O
(	O
*	pointer
kw	pointer
!=	O
tmpbuf_ptr	O
->	O
base	pointer
)	O
{	O
*	O
kw	pointer
=	O
tmpbuf_ptr	O
->	O
base	pointer
;	O
}	O
tag	O
->	O
kw	pointer
=	O
xstrdup	pointer
(	O
*	pointer
kw	pointer
)	O
;	O
tag	O
->	O
val	pointer
=	O
xstrdup	O
(	O
*	pointer
kw	pointer
+	O
strlen	O
(	O
*	pointer
kw	pointer
)	O
+	O
1	int
)	O
;	O
text_buffer_reset	O
(	O
tmpbuf_ptr	pointer
)	O
;	O
return	O
tag	O
;	O
}	O
static	O
int	O
tag_image	function
(	O
char	O
*	O
text	pointer
,	O
struct	O
text_buffer	struct
*	O
outbuf	pointer
)	O
{	O
mbi_iterator_t	O
iter	O
;	O
enum	O
{	int
state_kw	O
,	O
state_val	O
,	O
state_qstr	O
,	O
state_delim	O
}	O
state	O
=	O
state_kw	O
;	O
struct	O
text_buffer	struct
tmpbuf	O
;	O
char	O
*	O
kw	pointer
;	O
struct	O
info_tag	struct
*	O
tag_head	pointer
=	O
NULL	O
,	O
*	O
tag	pointer
;	O
int	O
escaped	int
=	O
0	O
;	O
text_buffer_init	O
(	O
&	O
tmpbuf	pointer
)	O
;	O
for	O
(	O
mbi_init	int
(	O
iter	pointer
,	O
text	int
,	O
strlen	pointer
(	O
text	pointer
)	O
)	O
;	O
mbi_avail	O
(	O
iter	O
)	O
;	O
mbi_advance	O
(	O
iter	O
)	O
)	O
{	O
const	O
char	O
*	O
cur_ptr	O
;	O
size_t	O
cur_len	O
;	O
if	O
(	O
mb_isspace	O
(	O
mbi_cur	pointer
(	O
iter	pointer
)	O
)	O
)	O
{	O
if	O
(	O
state	pointer
==	O
state_val	O
)	O
{	O
struct	O
info_tag	struct
*	O
new_kw	O
=	O
tag_found_keyword	O
(	O
&	O
tmpbuf	pointer
,	O
&	O
kw	struct
)	O
;	O
new_kw	O
->	O
next	pointer
=	O
tag_head	O
;	O
tag_head	pointer
=	O
new_kw	O
;	O
state	O
=	O
state_delim	O
;	O
continue	O
;	O
}	O
if	O
(	O
state	O
==	O
state_delim	O
)	O
continue	O
;	O
}	O
else	O
if	O
(	O
state	O
==	O
state_delim	O
)	O
state	O
=	O
state_kw	int
;	O
cur_len	O
=	O
mb_len	O
(	O
mbi_cur	O
(	O
iter	pointer
)	O
)	O
;	O
cur_ptr	O
=	O
mbi_cur_ptr	function
(	O
iter	O
)	O
;	O
if	O
(	O
state	O
==	O
state_qstr	O
&&	O
escaped	int
)	O
{	O
escaped	O
=	O
0	function
;	O
}	O
else	O
if	O
(	O
cur_len	O
==	O
1	O
)	O
{	O
switch	O
(	O
*	int
cur_ptr	pointer
)	O
{	O
case	O
'='	O
:	O
if	O
(	O
state	O
!=	O
state_kw	O
)	O
break	O
;	O
text_buffer_add_char	O
(	O
&	O
tmpbuf	pointer
,	O
0	O
)	O
;	O
kw	O
=	O
tmpbuf	function
.	O
base	pointer
;	O
if	O
(	O
!	O
mbi_avail	O
(	O
iter	pointer
)	O
)	O
break	O
;	O
mbi_advance	O
(	O
iter	O
)	O
;	O
state	O
=	O
state_val	O
;	O
cur_len	O
=	O
mb_len	O
(	O
mbi_cur	O
(	O
iter	pointer
)	O
)	O
;	O
cur_ptr	O
=	O
mbi_cur_ptr	function
(	O
iter	O
)	O
;	O
if	O
(	O
!	O
(	O
cur_len	O
==	O
1	O
&&	O
*	int
cur_ptr	pointer
==	O
'"'	O
)	O
)	O
break	O
;	O
case	O
'"'	O
:	O
if	O
(	O
state	O
==	O
state_val	O
)	O
{	O
state	O
=	O
state_qstr	int
;	O
continue	O
;	O
}	O
if	O
(	O
state	O
==	O
state_qstr	O
)	O
{	O
struct	O
info_tag	struct
*	O
new_kw	O
=	O
tag_found_keyword	O
(	O
&	O
tmpbuf	pointer
,	O
&	O
kw	struct
)	O
;	O
new_kw	O
->	O
next	pointer
=	O
tag_head	O
;	O
tag_head	pointer
=	O
new_kw	O
;	O
state	O
=	O
state_delim	O
;	O
continue	O
;	O
}	O
break	O
;	O
case	O
'\\'	O
:	O
if	O
(	O
state	O
==	O
state_qstr	O
)	O
{	O
escaped	O
=	O
1	function
;	O
continue	O
;	O
}	O
}	O
}	O
text_buffer_add_string	O
(	O
&	O
tmpbuf	pointer
,	O
cur_ptr	O
,	O
cur_len	O
)	O
;	O
}	O
tag	O
=	O
info_tag_find	function
(	O
tag_head	O
,	O
"text"	pointer
)	O
;	O
if	O
(	O
!	O
tag	O
)	O
tag	O
=	O
info_tag_find	function
(	O
tag_head	pointer
,	O
"alt"	pointer
)	O
;	O
if	O
(	O
tag	pointer
)	O
{	O
text_buffer_add_string	O
(	O
outbuf	pointer
,	O
tag	O
->	O
val	pointer
,	O
strlen	int
(	O
tag	pointer
->	O
val	pointer
)	O
)	O
;	O
}	O
text_buffer_free	O
(	O
&	O
tmpbuf	pointer
)	O
;	O
info_tag_free	O
(	O
tag_head	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
tag_handler	struct
tagtab	O
[	O
]	O
=	O
{	O
{	O
"image"	pointer
,	O
5	pointer
,	O
tag_image	int
}	O
,	O
{	O
"index"	O
,	O
5	int
,	O
NULL	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
struct	O
tag_handler	struct
*	O
find_tag_handler	function
(	O
char	O
*	O
tag	pointer
,	O
size_t	O
taglen	O
)	O
{	O
struct	O
tag_handler	struct
*	O
tp	pointer
;	O
for	O
(	O
tp	int
=	O
tagtab	pointer
;	O
tp	pointer
->	O
name	pointer
;	O
tp	pointer
++	O
)	O
if	O
(	O
taglen	pointer
>=	O
tp	int
->	O
len	pointer
&&	O
strncmp	pointer
(	O
tp	pointer
->	O
name	pointer
,	O
tag	pointer
,	O
tp	pointer
->	O
len	pointer
)	O
==	O
0	int
)	O
return	O
tp	O
;	O
return	O
NULL	O
;	O
}	O
int	O
tag_expand	function
(	O
char	O
*	O
*	pointer
input	pointer
,	O
char	O
*	O
input_end	pointer
,	O
struct	O
text_buffer	struct
*	O
outbuf	pointer
,	O
int	O
*	O
is_index	pointer
)	O
{	O
char	O
*	O
p	pointer
=	O
*	O
input	pointer
;	O
char	O
*	O
q	pointer
;	O
size_t	O
len	long
;	O
struct	O
tag_handler	struct
*	O
tp	pointer
;	O
if	O
(	O
p	O
>=	O
input_end	int
-	O
3	int
||	O
memcmp	O
(	O
p	pointer
,	O
"\0\b["	pointer
,	O
3	pointer
)	O
!=	O
0	int
)	O
return	O
0	O
;	O
p	O
+=	O
3	O
;	O
q	O
=	O
p	O
+	O
strlen	int
(	O
p	pointer
)	O
;	O
if	O
(	O
q	pointer
>=	O
input_end	O
-	O
3	int
||	O
memcmp	O
(	O
q	pointer
+	O
1	int
,	O
"\b]"	pointer
,	O
2	pointer
)	O
)	O
return	O
0	O
;	O
if	O
(	O
!	pointer
strncmp	O
(	O
"index"	pointer
,	O
p	pointer
,	O
strlen	pointer
(	O
"index"	pointer
)	O
)	O
)	O
*	O
is_index	pointer
=	O
1	O
;	O
len	O
=	O
strcspn	O
(	O
p	pointer
,	O
" \t"	pointer
)	O
;	O
tp	O
=	O
find_tag_handler	O
(	O
p	pointer
,	O
len	pointer
)	O
;	O
if	O
(	O
tp	pointer
&&	O
tp	pointer
->	O
handler	pointer
)	O
{	O
while	pointer
(	O
p	pointer
[	O
len	int
]	O
==	O
' '	O
||	O
p	O
[	O
len	int
]	O
==	O
'\t'	O
)	O
++	O
len	O
;	O
tp	O
->	O
handler	pointer
(	O
p	pointer
+	O
len	int
,	O
outbuf	pointer
)	O
;	O
}	O
*	O
input	function
=	O
q	O
+	O
3	int
;	O
return	O
1	int
;	O
}	O