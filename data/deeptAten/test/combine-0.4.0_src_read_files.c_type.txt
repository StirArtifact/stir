STRINGTYPE	O
*	O
df_get_next_record	O
(	O
stream	O
,	O
buffer	O
,	O
bufferpos	O
,	O
buffersiz	pointer
,	O
record_delimiter	O
,	O
record_length	O
)	O
FILE	O
*	O
stream	pointer
;	O
unsigned	O
char	O
*	O
*	pointer
buffer	pointer
;	O
size_t	O
*	O
bufferpos	pointer
;	O
size_t	O
*	long
buffersiz	pointer
;	O
STRINGTYPE	O
*	O
record_delimiter	pointer
;	O
size_t	O
record_length	long
;	O
{	O
STRINGTYPE	O
buffer_desc	O
;	O
int	O
need_more_data	int
;	O
int	O
next_record_pos	int
;	O
int	O
return_code	int
;	O
STRINGTYPE	O
*	O
return_string	pointer
;	O
buffer_desc	O
.	O
string	long
=	O
*	O
buffer	pointer
+	O
*	O
bufferpos	pointer
;	O
buffer_desc	O
.	O
length	long
=	O
*	O
buffersiz	pointer
-	O
*	O
bufferpos	pointer
;	O
need_more_data	O
=	O
0	O
;	O
if	O
(	O
*	O
buffersiz	pointer
==	O
0	O
)	O
need_more_data	O
=	O
1	pointer
;	O
else	O
if	O
(	O
record_length	O
!=	O
0	O
)	O
{	O
if	O
(	O
*	O
buffersiz	pointer
-	O
*	O
bufferpos	pointer
<	O
record_length	O
)	O
need_more_data	O
=	O
1	pointer
;	O
}	O
else	O
{	O
next_record_pos	O
=	O
dstrstr	O
(	O
&	pointer
buffer_desc	pointer
,	O
record_delimiter	O
)	O
;	O
if	O
(	O
next_record_pos	O
==	O
0	O
)	O
need_more_data	O
=	O
1	pointer
;	O
}	O
while	O
(	O
need_more_data	O
&&	O
!	O
feof	O
(	O
stream	pointer
)	O
)	O
{	O
if	O
(	O
*	O
bufferpos	pointer
==	O
0	O
)	O
{	O
if	O
(	O
*	O
buffer	pointer
==	O
NULL	O
)	O
*	O
buffer	pointer
=	O
malloc	O
(	O
DF_BUFFER_INCREMENT	int
)	O
;	O
else	O
*	O
buffer	pointer
=	O
realloc	O
(	O
*	pointer
buffer	pointer
,	O
*	O
buffersiz	pointer
+	O
DF_BUFFER_INCREMENT	O
)	O
;	O
if	O
(	O
*	O
buffer	pointer
==	O
NULL	O
)	O
FATAL_ERROR	O
(	O
_	O
(	O
"unable to allocate memory"	pointer
)	O
)	O
;	O
return_code	O
=	O
fread	O
(	O
*	pointer
buffer	pointer
+	O
*	O
buffersiz	pointer
,	O
1	O
,	O
DF_BUFFER_INCREMENT	O
,	O
stream	O
)	O
;	O
if	O
(	O
return_code	O
<	O
DF_BUFFER_INCREMENT	int
&&	O
ferror	O
(	O
stream	pointer
)	O
)	O
FATAL_PERROR	O
(	O
_	pointer
(	O
"File"	pointer
)	O
)	O
;	O
*	O
buffersiz	pointer
+=	O
return_code	O
;	O
}	O
else	O
{	O
memmove	O
(	O
*	pointer
buffer	pointer
,	O
*	O
buffer	pointer
+	O
*	O
bufferpos	pointer
,	O
*	O
buffersiz	pointer
-	O
*	O
bufferpos	pointer
)	O
;	O
*	O
bufferpos	pointer
=	O
*	O
buffersiz	pointer
-	O
*	O
bufferpos	pointer
;	O
return_code	O
=	O
fread	O
(	O
*	pointer
buffer	pointer
+	O
*	O
bufferpos	pointer
,	O
1	O
,	O
*	O
buffersiz	pointer
-	O
*	O
bufferpos	pointer
,	O
stream	O
)	O
;	O
if	O
(	O
return_code	O
<	O
*	int
buffersiz	pointer
-	O
*	O
bufferpos	pointer
&&	O
ferror	O
(	O
stream	pointer
)	O
)	O
FATAL_PERROR	O
(	O
_	pointer
(	O
"File"	pointer
)	O
)	O
;	O
if	O
(	O
return_code	O
<	O
*	int
buffersiz	pointer
-	O
*	O
bufferpos	pointer
)	O
*	O
buffersiz	pointer
=	O
*	O
bufferpos	pointer
+	O
return_code	O
;	O
*	O
bufferpos	pointer
=	O
0	O
;	O
}	O
buffer_desc	O
.	O
string	O
=	O
*	O
buffer	pointer
+	O
*	O
bufferpos	pointer
;	O
buffer_desc	O
.	O
length	pointer
=	O
*	O
buffersiz	pointer
-	O
*	O
bufferpos	pointer
;	O
need_more_data	O
=	O
0	O
;	O
if	O
(	O
record_length	O
!=	O
0	O
)	O
{	O
if	O
(	O
*	O
buffersiz	pointer
-	O
*	O
bufferpos	pointer
<	O
record_length	O
)	O
need_more_data	O
=	O
1	pointer
;	O
}	O
else	O
{	O
next_record_pos	O
=	O
dstrstr	O
(	O
&	pointer
buffer_desc	pointer
,	O
record_delimiter	O
)	O
;	O
if	O
(	O
next_record_pos	O
==	O
0	O
)	O
need_more_data	O
=	O
1	pointer
;	O
}	O
}	O
if	O
(	O
*	O
bufferpos	pointer
<	O
*	O
buffersiz	pointer
)	O
{	O
if	O
(	O
record_length	O
!=	O
0	O
)	O
{	O
return_string	O
=	O
dstrsubstr	O
(	O
&	pointer
buffer_desc	pointer
,	O
1	O
,	O
0	O
,	O
MIN	O
(	O
record_length	int
,	O
buffer_desc	O
.	O
length	pointer
)	O
,	O
DStr_not_own	O
)	O
;	O
*	O
bufferpos	pointer
+=	O
return_string	O
->	O
length	pointer
;	O
}	O
else	O
{	O
if	O
(	O
next_record_pos	O
==	O
0	O
)	O
next_record_pos	O
=	O
buffer_desc	pointer
.	O
length	pointer
+	O
1	int
;	O
return_string	O
=	O
dstrsubstr	O
(	O
&	pointer
buffer_desc	pointer
,	O
1	O
,	O
next_record_pos	O
-	O
1	int
,	O
0	O
,	O
DStr_not_own	O
)	O
;	O
*	O
bufferpos	pointer
=	O
*	O
bufferpos	pointer
+	O
next_record_pos	O
-	O
1	int
+	O
record_delimiter	int
->	O
length	pointer
;	O
}	O
if	O
(	O
return_string	O
==	O
NULL	O
)	O
{	O
FATAL_ERROR	O
(	O
_	pointer
(	O
"unable to allocate memory"	pointer
)	O
)	O
;	O
}	O
return	O
return_string	O
;	O
}	O
return	O
NULL	O
;	O
}	O