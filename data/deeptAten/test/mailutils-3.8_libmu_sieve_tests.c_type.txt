typedef	O
int	O
(	O
*	O
address_aget_t	pointer
)	O
(	O
mu_address_t	pointer
addr	int
,	O
size_t	long
no	long
,	O
char	O
*	O
*	O
buf	pointer
)	O
;	O
address_aget_t	pointer
sieve_get_address_part	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mach	pointer
->	O
tagcount	long
;	O
i	long
++	O
)	O
{	O
mu_sieve_value_t	struct
*	O
t	long
=	O
mu_sieve_get_tag_n	function
(	O
mach	pointer
,	O
i	long
)	O
;	O
if	O
(	O
strcmp	function
(	O
t	long
->	O
tag	pointer
,	O
"all"	pointer
)	O
==	O
0	int
)	O
return	O
mu_address_aget_email	function
;	O
else	O
if	O
(	O
strcmp	function
(	O
t	long
->	O
tag	pointer
,	O
"domain"	pointer
)	O
==	O
0	int
)	O
return	O
mu_address_aget_domain	function
;	O
else	O
if	O
(	O
strcmp	function
(	O
t	long
->	O
tag	pointer
,	O
"localpart"	pointer
)	O
==	O
0	int
)	O
return	O
mu_address_aget_local_part	function
;	O
}	O
return	O
mu_address_aget_email	function
;	O
}	O
struct	O
address_closure	struct
{	O
address_aget_t	pointer
aget	pointer
;	O
void	O
*	O
data	pointer
;	O
mu_address_t	pointer
addr	int
;	O
}	O
;	O
static	O
int	O
retrieve_address	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
,	O
size_t	long
idx	long
,	O
char	O
*	O
*	O
pval	pointer
)	O
{	O
struct	O
address_closure	struct
*	O
ap	array
=	O
data	pointer
;	O
char	O
*	O
val	pointer
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
ap	array
->	O
addr	int
)	O
{	O
rc	int
=	O
mu_header_aget_value	O
(	O
(	O
mu_header_t	pointer
)	O
ap	array
->	O
data	pointer
,	O
(	O
char	O
*	O
)	O
item	pointer
,	O
&	O
val	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
mu_str_skip_class	function
(	O
val	pointer
,	O
MU_CTYPE_BLANK	int
)	O
[	O
0	int
]	O
==	O
0	int
)	O
return	O
MU_ERR_NOENT	O
;	O
rc	int
=	O
mu_address_create	function
(	O
&	O
ap	array
->	O
addr	int
,	O
val	pointer
)	O
;	O
free	function
(	O
val	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
rc	int
==	O
MU_ERR_EMPTY_ADDRESS	O
)	O
rc	int
=	O
MU_ERR_NOENT	O
;	O
return	O
rc	int
;	O
}	O
}	O
rc	int
=	O
ap	array
->	O
aget	pointer
(	O
ap	array
->	O
addr	int
,	O
idx	long
+	O
1	int
,	O
pval	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_address_destroy	function
(	O
&	O
ap	array
->	O
addr	int
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
sieve_test_address	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
mu_sieve_value_t	struct
*	O
h	pointer
,	O
*	O
v	array
;	O
mu_header_t	pointer
header	pointer
=	O
NULL	O
;	O
struct	O
address_closure	struct
clos	pointer
;	O
int	O
rc	int
;	O
h	pointer
=	O
mu_sieve_get_arg_untyped	function
(	O
mach	pointer
,	O
0	int
)	O
;	O
v	array
=	O
mu_sieve_get_arg_untyped	function
(	O
mach	pointer
,	O
1	int
)	O
;	O
mu_message_get_header	function
(	O
mu_sieve_get_message	function
(	O
mach	pointer
)	O
,	O
&	O
header	pointer
)	O
;	O
clos	pointer
.	O
data	pointer
=	O
header	pointer
;	O
clos	pointer
.	O
aget	pointer
=	O
sieve_get_address_part	function
(	O
mach	pointer
)	O
;	O
clos	pointer
.	O
addr	int
=	O
NULL	O
;	O
rc	int
=	O
mu_sieve_vlist_compare	function
(	O
mach	pointer
,	O
h	pointer
,	O
v	array
,	O
retrieve_address	function
,	O
NULL	O
,	O
&	O
clos	pointer
)	O
;	O
mu_address_destroy	function
(	O
&	O
clos	pointer
.	O
addr	int
)	O
;	O
return	O
rc	int
;	O
}	O
struct	O
header_closure	struct
{	O
mu_message_t	pointer
message	pointer
;	O
size_t	long
nparts	pointer
;	O
size_t	long
part	long
;	O
mu_header_t	pointer
header	pointer
;	O
size_t	long
index	function
;	O
}	O
;	O
int	O
retrieve_header	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
,	O
size_t	long
idx	long
,	O
char	O
*	O
*	O
pval	pointer
)	O
{	O
struct	O
header_closure	struct
*	O
hc	pointer
=	O
data	pointer
;	O
char	O
const	O
*	O
hname	pointer
;	O
int	O
rc	int
;	O
if	O
(	O
idx	long
==	O
0	int
)	O
{	O
rc	int
=	O
mu_message_get_header	function
(	O
hc	pointer
->	O
message	pointer
,	O
&	O
hc	pointer
->	O
header	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
hc	pointer
->	O
index	function
=	O
1	int
;	O
hc	pointer
->	O
part	long
=	O
1	int
;	O
}	O
do	O
{	O
if	O
(	O
!	O
hc	pointer
->	O
header	pointer
)	O
{	O
if	O
(	O
hc	pointer
->	O
part	long
<=	O
hc	pointer
->	O
nparts	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
;	O
rc	int
=	O
mu_message_get_part	function
(	O
hc	pointer
->	O
message	pointer
,	O
hc	pointer
->	O
part	long
,	O
&	O
msg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
hc	pointer
->	O
part	long
++	O
;	O
rc	int
=	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hc	pointer
->	O
header	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
hc	pointer
->	O
index	function
=	O
1	int
;	O
}	O
else	O
return	O
1	int
;	O
}	O
while	O
(	O
!	O
mu_header_sget_field_name	function
(	O
hc	pointer
->	O
header	pointer
,	O
hc	pointer
->	O
index	function
,	O
&	O
hname	pointer
)	O
)	O
{	O
int	O
i	long
=	O
hc	pointer
->	O
index	function
++	O
;	O
if	O
(	O
mu_c_strcasecmp	function
(	O
hname	pointer
,	O
(	O
char	O
*	O
)	O
item	pointer
)	O
==	O
0	int
)	O
return	O
mu_header_aget_field_value_unfold	function
(	O
hc	pointer
->	O
header	pointer
,	O
i	long
,	O
pval	pointer
)	O
;	O
}	O
hc	pointer
->	O
header	pointer
=	O
NULL	O
;	O
}	O
while	O
(	O
hc	pointer
->	O
part	long
<=	O
hc	pointer
->	O
nparts	pointer
)	O
;	O
return	O
MU_ERR_NOENT	O
;	O
}	O
int	O
sieve_test_header	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
mu_sieve_value_t	struct
*	O
h	pointer
,	O
*	O
v	array
;	O
int	O
rc	int
;	O
struct	O
header_closure	struct
clos	pointer
;	O
h	pointer
=	O
mu_sieve_get_arg_untyped	function
(	O
mach	pointer
,	O
0	int
)	O
;	O
v	array
=	O
mu_sieve_get_arg_untyped	function
(	O
mach	pointer
,	O
1	int
)	O
;	O
clos	pointer
.	O
message	pointer
=	O
mach	pointer
->	O
msg	pointer
;	O
clos	pointer
.	O
nparts	pointer
=	O
0	int
;	O
if	O
(	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"mime"	pointer
,	O
SVT_VOID	int
,	O
NULL	O
)	O
)	O
{	O
int	O
ismime	int
=	O
0	int
;	O
rc	int
=	O
mu_message_is_multipart	function
(	O
mach	pointer
->	O
msg	pointer
,	O
&	O
ismime	int
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_ERR	O
,	O
"mu_message_is_multipart"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
if	O
(	O
ismime	int
)	O
{	O
rc	int
=	O
mu_message_get_num_parts	function
(	O
mach	pointer
->	O
msg	pointer
,	O
&	O
clos	pointer
.	O
nparts	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_ERR	O
,	O
"mu_message_get_num_parts"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
}	O
}	O
rc	int
=	O
mu_sieve_vlist_compare	function
(	O
mach	pointer
,	O
h	pointer
,	O
v	array
,	O
retrieve_header	function
,	O
NULL	O
,	O
&	O
clos	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
retrieve_envelope	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
,	O
size_t	long
idx	long
,	O
char	O
*	O
*	O
pval	pointer
)	O
{	O
struct	O
address_closure	struct
*	O
ap	array
=	O
data	pointer
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
ap	array
->	O
addr	int
)	O
{	O
const	O
char	O
*	O
buf	pointer
;	O
if	O
(	O
mu_c_strcasecmp	function
(	O
(	O
char	O
*	O
)	O
item	pointer
,	O
"from"	pointer
)	O
!=	O
0	int
)	O
return	O
MU_ERR_NOENT	O
;	O
rc	int
=	O
mu_envelope_sget_sender	function
(	O
(	O
mu_envelope_t	pointer
)	O
ap	array
->	O
data	pointer
,	O
&	O
buf	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_address_create	function
(	O
&	O
ap	array
->	O
addr	int
,	O
buf	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
rc	int
=	O
ap	array
->	O
aget	pointer
(	O
ap	array
->	O
addr	int
,	O
idx	long
+	O
1	int
,	O
pval	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_address_destroy	function
(	O
&	O
ap	array
->	O
addr	int
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
sieve_test_envelope	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
mu_sieve_value_t	struct
*	O
h	pointer
,	O
*	O
v	array
;	O
struct	O
address_closure	struct
clos	pointer
;	O
int	O
rc	int
;	O
h	pointer
=	O
mu_sieve_get_arg_untyped	function
(	O
mach	pointer
,	O
0	int
)	O
;	O
v	array
=	O
mu_sieve_get_arg_untyped	function
(	O
mach	pointer
,	O
1	int
)	O
;	O
mu_message_get_envelope	function
(	O
mu_sieve_get_message	function
(	O
mach	pointer
)	O
,	O
(	O
mu_envelope_t	pointer
*	O
)	O
&	O
clos	pointer
.	O
data	pointer
)	O
;	O
clos	pointer
.	O
aget	pointer
=	O
sieve_get_address_part	function
(	O
mach	pointer
)	O
;	O
clos	pointer
.	O
addr	int
=	O
NULL	O
;	O
rc	int
=	O
mu_sieve_vlist_compare	function
(	O
mach	pointer
,	O
h	pointer
,	O
v	array
,	O
retrieve_envelope	function
,	O
NULL	O
,	O
&	O
clos	pointer
)	O
;	O
mu_address_destroy	function
(	O
&	O
clos	pointer
.	O
addr	int
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
sieve_test_size	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
int	O
rc	int
=	O
1	int
;	O
size_t	long
size	long
;	O
size_t	long
arg	pointer
;	O
mu_sieve_get_arg	function
(	O
mach	pointer
,	O
0	int
,	O
SVT_NUMBER	int
,	O
&	O
arg	pointer
)	O
;	O
mu_message_size	function
(	O
mu_sieve_get_message	function
(	O
mach	pointer
)	O
,	O
&	O
size	long
)	O
;	O
if	O
(	O
mach	pointer
->	O
tagcount	long
)	O
{	O
mu_sieve_value_t	struct
*	O
tag	pointer
=	O
mu_sieve_get_tag_n	function
(	O
mach	pointer
,	O
0	int
)	O
;	O
if	O
(	O
strcmp	function
(	O
tag	pointer
->	O
tag	pointer
,	O
"over"	pointer
)	O
==	O
0	int
)	O
rc	int
=	O
size	long
>	O
arg	pointer
;	O
else	O
if	O
(	O
strcmp	function
(	O
tag	pointer
->	O
tag	pointer
,	O
"under"	pointer
)	O
==	O
0	int
)	O
rc	int
=	O
size	long
<	O
arg	pointer
;	O
else	O
abort	function
(	O
)	O
;	O
}	O
else	O
rc	int
=	O
size	long
==	O
arg	pointer
;	O
return	O
rc	int
;	O
}	O
int	O
_test_exists	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
mu_header_t	pointer
hdr	pointer
=	O
data	pointer
;	O
size_t	long
n	pointer
;	O
return	O
mu_header_get_value	O
(	O
hdr	pointer
,	O
(	O
char	O
*	O
)	O
item	pointer
,	O
NULL	O
,	O
0	int
,	O
&	O
n	pointer
)	O
;	O
}	O
int	O
sieve_test_exists	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
mu_header_t	pointer
header	pointer
=	O
NULL	O
;	O
mu_sieve_value_t	struct
*	O
val	pointer
;	O
mu_message_get_header	function
(	O
mu_sieve_get_message	function
(	O
mach	pointer
)	O
,	O
&	O
header	pointer
)	O
;	O
val	pointer
=	O
mu_sieve_get_arg_untyped	function
(	O
mach	pointer
,	O
0	int
)	O
;	O
return	O
mu_sieve_vlist_do	function
(	O
mach	pointer
,	O
val	pointer
,	O
_test_exists	function
,	O
header	pointer
)	O
==	O
0	int
;	O
}	O
static	O
mu_sieve_tag_def_t	struct
address_part_tags	array
[	O
]	O
=	O
{	O
{	O
"localpart"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
"domain"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
"all"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
mu_sieve_tag_def_t	struct
mu_sieve_match_part_tags	array
[	O
]	O
=	O
{	O
{	O
"is"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
"contains"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
"matches"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
"regex"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
"count"	pointer
,	O
SVT_STRING	int
}	O
,	O
{	O
"value"	pointer
,	O
SVT_STRING	int
}	O
,	O
{	O
"comparator"	pointer
,	O
SVT_STRING	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_tag_def_t	struct
size_tags	array
[	O
]	O
=	O
{	O
{	O
"over"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
"under"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_tag_def_t	struct
mime_tags	array
[	O
]	O
=	O
{	O
{	O
"mime"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
mu_sieve_tag_group_t	struct
address_tag_groups	array
[	O
]	O
=	O
{	O
ADDRESS_PART_GROUP	O
,	O
MATCH_PART_GROUP	O
,	O
{	O
NULL	O
}	O
}	O
;	O
mu_sieve_data_type	enum
address_req_args	array
[	O
]	O
=	O
{	O
SVT_STRING_LIST	int
,	O
SVT_STRING_LIST	int
,	O
SVT_VOID	int
}	O
;	O
mu_sieve_tag_group_t	struct
size_tag_groups	array
[	O
]	O
=	O
{	O
SIZE_GROUP	O
,	O
{	O
NULL	O
}	O
}	O
;	O
mu_sieve_data_type	enum
size_req_args	array
[	O
]	O
=	O
{	O
SVT_NUMBER	int
,	O
SVT_VOID	int
}	O
;	O
mu_sieve_tag_group_t	struct
envelope_tag_groups	array
[	O
]	O
=	O
{	O
ADDRESS_PART_GROUP	O
,	O
MATCH_PART_GROUP	O
,	O
{	O
NULL	O
}	O
}	O
;	O
mu_sieve_data_type	enum
exists_req_args	array
[	O
]	O
=	O
{	O
SVT_STRING_LIST	int
,	O
SVT_VOID	int
}	O
;	O
mu_sieve_tag_group_t	struct
header_tag_groups	array
[	O
]	O
=	O
{	O
MATCH_PART_GROUP	O
,	O
MIME_GROUP	O
,	O
{	O
NULL	O
}	O
}	O
;	O
void	O
mu_i_sv_register_standard_tests	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
mu_sieve_register_test	function
(	O
mach	pointer
,	O
"address"	pointer
,	O
sieve_test_address	function
,	O
address_req_args	array
,	O
address_tag_groups	array
,	O
1	int
)	O
;	O
mu_sieve_register_test	function
(	O
mach	pointer
,	O
"size"	pointer
,	O
sieve_test_size	function
,	O
size_req_args	array
,	O
size_tag_groups	array
,	O
1	int
)	O
;	O
mu_sieve_register_test	function
(	O
mach	pointer
,	O
"envelope"	pointer
,	O
sieve_test_envelope	function
,	O
address_req_args	array
,	O
envelope_tag_groups	array
,	O
1	int
)	O
;	O
mu_sieve_register_test	function
(	O
mach	pointer
,	O
"exists"	pointer
,	O
sieve_test_exists	function
,	O
exists_req_args	array
,	O
NULL	O
,	O
1	int
)	O
;	O
mu_sieve_register_test	function
(	O
mach	pointer
,	O
"header"	pointer
,	O
sieve_test_header	function
,	O
address_req_args	array
,	O
header_tag_groups	array
,	O
1	int
)	O
;	O
}	O
