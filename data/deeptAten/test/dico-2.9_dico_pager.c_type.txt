static	O
char	O
*	O
pager	O
;	O
static	O
char	O
*	O
get_pager_name	pointer
(	O
void	O
)	O
{	O
if	O
(	O
pager	O
)	O
{	O
if	O
(	O
strcmp	O
(	O
pager	pointer
,	O
"-"	pointer
)	O
==	O
0	O
)	O
return	O
NULL	O
;	O
return	O
pager	O
;	O
}	O
return	O
getenv	O
(	O
"PAGER"	pointer
)	O
;	O
}	O
void	O
ds_pager	function
(	O
int	O
argc	O
,	O
char	O
*	O
*	pointer
argv	pointer
)	O
{	O
if	O
(	O
argc	O
==	O
1	O
)	O
{	O
char	O
*	O
p	pointer
=	O
get_pager_name	O
(	O
)	pointer
;	O
if	O
(	O
p	O
)	O
{	O
printf	O
(	O
"%s\n"	pointer
,	O
p	pointer
)	O
;	O
if	O
(	O
!	O
pager	pointer
)	O
printf	O
(	O
"%s\n"	pointer
,	O
_	pointer
(	O
"(Pager set from environment)"	pointer
)	O
)	O
;	O
}	O
}	O
else	O
xdico_assign_string	O
(	O
&	O
pager	pointer
,	O
argv	O
[	O
1	int
]	O
)	O
;	O
}	O
dico_stream_t	O
create_output_stream	O
(	O
void	O
)	O
{	O
return	O
dico_fd_stream_create	int
(	O
fileno	pointer
(	O
stdout	pointer
)	O
,	O
DICO_STREAM_WRITE	O
,	O
1	pointer
)	O
;	O
}	O
static	O
int	O
get_screen_lines	function
(	O
void	O
)	O
{	O
struct	O
winsize	struct
ws	O
;	O
ws	O
.	O
ws_col	pointer
=	O
ws	pointer
.	O
ws_row	pointer
=	O
0	pointer
;	O
if	O
(	O
(	O
ioctl	O
(	O
1	pointer
,	O
TIOCGWINSZ	O
,	O
(	pointer
char	O
*	O
)	O
&	pointer
ws	pointer
)	O
<	O
0	int
)	O
||	O
ws	O
.	O
ws_row	pointer
==	O
0	O
)	O
{	O
const	O
char	O
*	O
lines	O
=	O
getenv	O
(	O
"LINES"	pointer
)	O
;	O
if	O
(	O
lines	O
)	O
ws	O
.	O
ws_row	pointer
=	O
strtol	O
(	O
lines	pointer
,	O
NULL	pointer
,	O
10	pointer
)	O
;	O
}	O
return	O
ws	O
.	O
ws_row	pointer
;	O
}	O
struct	O
pfile_stream	struct
{	O
FILE	O
*	O
fp	pointer
;	O
}	O
;	O
static	O
int	O
fp_write	function
(	O
void	O
*	O
data	pointer
,	O
const	O
char	O
*	O
buf	pointer
,	O
size_t	O
size	O
,	O
size_t	pointer
*	O
pret	pointer
)	O
{	O
struct	O
pfile_stream	struct
*	O
p	pointer
=	O
data	O
;	O
*	O
pret	pointer
=	O
fwrite	O
(	O
buf	pointer
,	O
1	pointer
,	O
size	pointer
,	O
p	pointer
->	O
fp	pointer
)	O
;	O
return	O
ferror	int
(	O
p	pointer
->	O
fp	pointer
)	O
;	O
}	O
static	O
int	O
fp_close	function
(	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
pfile_stream	struct
*	O
p	pointer
=	O
data	O
;	O
pclose	O
(	O
p	pointer
->	O
fp	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
dico_stream_t	O
create_pfile_stream	O
(	O
FILE	O
*	O
fp	pointer
)	O
{	O
dico_stream_t	O
str	pointer
;	O
struct	O
pfile_stream	struct
*	O
s	pointer
;	O
s	O
=	O
xmalloc	O
(	O
sizeof	O
(	O
*	pointer
s	pointer
)	O
)	O
;	O
s	O
->	O
fp	pointer
=	O
fp	O
;	O
if	pointer
(	O
dico_stream_create	O
(	O
&	pointer
str	pointer
,	O
DICO_STREAM_WRITE	O
,	O
s	pointer
)	O
)	O
xalloc_die	O
(	O
)	O
;	O
dico_stream_set_write	O
(	O
str	pointer
,	O
fp_write	O
)	O
;	O
dico_stream_set_close	O
(	O
str	pointer
,	O
fp_close	O
)	O
;	O
return	O
str	int
;	O
}	O
dico_stream_t	O
create_pager_stream	O
(	O
size_t	pointer
nlines	O
)	O
{	O
char	O
*	O
pager	pointer
=	O
get_pager_name	O
(	O
)	pointer
;	O
FILE	O
*	O
fp	pointer
;	O
if	O
(	O
!	O
pager	pointer
||	O
!	O
pager	O
[	O
0	int
]	O
||	O
!	O
isatty	pointer
(	O
fileno	pointer
(	O
stdout	pointer
)	O
)	O
||	O
nlines	O
<	O
get_screen_lines	O
(	O
)	pointer
)	O
return	O
create_output_stream	int
(	O
)	pointer
;	O
fp	O
=	O
popen	O
(	O
pager	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
!	O
fp	pointer
)	O
return	O
create_output_stream	O
(	O
)	pointer
;	O
return	O
create_pfile_stream	int
(	O
fp	pointer
)	O
;	O
}	O