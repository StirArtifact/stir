struct	O
locals	struct
{	O
message_list_ty	O
*	O
mlp	pointer
;	O
}	O
;	O
static	O
bool	O
execute_writing_input	function
(	O
const	O
char	O
*	O
progname	pointer
,	O
const	O
char	O
*	O
prog_path	pointer
,	O
char	O
*	O
*	pointer
prog_argv	pointer
,	O
void	O
*	O
private_data	pointer
)	O
{	O
struct	O
locals	struct
*	O
l	pointer
=	O
(	O
struct	O
locals	struct
*	O
)	O
private_data	pointer
;	O
pid_t	O
child	int
;	O
int	O
fd	int
[	O
1	int
]	O
;	O
FILE	O
*	O
fp	pointer
;	O
int	O
exitstatus	int
;	O
child	O
=	O
create_pipe_out	O
(	O
progname	pointer
,	O
prog_path	pointer
,	O
prog_argv	pointer
,	O
NULL	int
,	O
false	O
,	O
true	O
,	O
true	O
,	O
fd	O
)	O
;	O
fp	O
=	O
fdopen	O
(	O
fd	pointer
[	O
0	int
]	O
,	O
"wb"	pointer
)	O
;	O
if	O
(	O
fp	O
==	O
NULL	O
)	O
error	O
(	O
EXIT_FAILURE	int
,	O
errno	int
,	O
_	int
(	O
"fdopen() failed"	pointer
)	O
)	O
;	O
{	O
message_list_ty	O
*	O
mlp	pointer
=	O
l	O
->	O
mlp	pointer
;	O
size_t	O
j	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
mlp	int
->	O
nitems	pointer
;	O
j	O
++	O
)	O
{	O
message_ty	O
*	O
mp	pointer
=	O
mlp	O
->	O
item	pointer
[	O
j	int
]	O
;	O
fwrite	pointer
(	O
mp	pointer
->	O
msgid	pointer
,	O
1	pointer
,	O
strlen	pointer
(	O
mp	pointer
->	O
msgid	pointer
)	O
+	O
1	int
,	O
fp	pointer
)	O
;	O
fwrite	O
(	O
mp	pointer
->	O
msgstr	pointer
,	O
1	pointer
,	O
strlen	pointer
(	O
mp	pointer
->	O
msgstr	pointer
)	O
+	O
1	int
,	O
fp	pointer
)	O
;	O
}	O
}	O
if	O
(	O
fwriteerror	O
(	O
fp	pointer
)	O
)	O
error	O
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	int
(	O
"error while writing to %s subprocess"	pointer
)	O
,	O
progname	pointer
)	O
;	O
exitstatus	O
=	O
wait_subprocess	O
(	O
child	int
,	O
progname	int
,	O
true	pointer
,	O
false	O
,	O
true	int
,	O
true	O
,	O
NULL	O
)	O
;	O
if	O
(	O
exitstatus	O
!=	O
0	O
)	O
error	O
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	int
(	O
"%s subprocess failed with exit code %d"	pointer
)	O
,	O
progname	pointer
,	O
exitstatus	pointer
)	O
;	O
return	O
false	int
;	O
}	O
int	O
msgdomain_write_csharp_resources	function
(	O
message_list_ty	O
*	O
mlp	pointer
,	O
const	O
char	O
*	O
canon_encoding	pointer
,	O
const	O
char	O
*	O
domain_name	pointer
,	O
const	O
char	O
*	O
file_name	pointer
)	O
{	O
if	O
(	O
mlp	O
->	O
nitems	pointer
!=	O
0	O
)	O
{	O
{	O
bool	pointer
has_context	int
;	O
size_t	O
j	O
;	O
has_context	O
=	O
false	int
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	int
<	O
mlp	int
->	O
nitems	pointer
;	O
j	O
++	O
)	O
if	O
(	O
mlp	int
->	O
item	pointer
[	O
j	int
]	O
->	O
msgctxt	pointer
!=	O
NULL	O
)	O
has_context	O
=	O
true	int
;	O
if	O
(	O
has_context	O
)	O
{	O
multiline_error	O
(	O
xstrdup	pointer
(	O
""	pointer
)	O
,	O
xstrdup	pointer
(	O
_	pointer
(	O
"message catalog has context dependent translations\nbut the C# .resources format doesn't support contexts\n"	pointer
)	O
)	O
)	O
;	O
return	O
1	int
;	O
}	O
}	O
{	O
bool	O
has_plural	function
;	O
size_t	O
j	long
;	O
has_plural	O
=	O
false	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	int
<	O
mlp	int
->	O
nitems	pointer
;	O
j	O
++	O
)	O
if	O
(	O
mlp	int
->	O
item	pointer
[	O
j	int
]	O
->	O
msgid_plural	pointer
!=	O
NULL	O
)	O
has_plural	O
=	O
true	int
;	O
if	O
(	O
has_plural	O
)	O
{	O
multiline_error	O
(	O
xstrdup	pointer
(	O
""	pointer
)	O
,	O
xstrdup	pointer
(	O
_	pointer
(	O
"message catalog has plural form translations\nbut the C# .resources format doesn't support plural handling\n"	pointer
)	O
)	O
)	O
;	O
return	O
1	int
;	O
}	O
}	O
iconv_message_list	O
(	O
mlp	pointer
,	O
canon_encoding	pointer
,	O
po_charset_utf8	pointer
,	O
NULL	pointer
)	O
;	O
message_list_delete_header_field	O
(	O
mlp	pointer
,	O
"POT-Creation-Date:"	pointer
)	O
;	O
{	O
const	O
char	O
*	O
args	O
[	O
2	O
]	O
;	O
const	O
char	O
*	O
gettextexedir	pointer
;	O
char	O
*	O
assembly_path	pointer
;	O
struct	O
locals	struct
locals	O
;	O
args	O
[	O
0	int
]	O
=	O
file_name	O
;	O
args	O
[	O
1	int
]	O
=	O
NULL	O
;	O
gettextexedir	O
=	O
getenv	O
(	O
"GETTEXTCSHARPEXEDIR"	pointer
)	O
;	O
if	O
(	O
gettextexedir	O
==	O
NULL	O
||	O
gettextexedir	O
[	O
0	int
]	O
==	O
'\0'	O
)	O
gettextexedir	O
=	O
relocate	pointer
(	O
LIBDIR	pointer
"/gettext"	O
)	O
;	O
assembly_path	O
=	O
xconcatenated_filename	O
(	O
gettextexedir	pointer
,	O
"msgfmt.net"	pointer
,	O
".exe"	pointer
)	O
;	O
locals	O
.	O
mlp	pointer
=	O
mlp	O
;	O
if	pointer
(	O
execute_csharp_program	pointer
(	O
assembly_path	pointer
,	O
NULL	pointer
,	O
0	pointer
,	O
args	int
,	O
verbose	O
>	O
0	int
,	O
false	int
,	O
execute_writing_input	int
,	O
&	O
locals	pointer
)	O
)	O
exit	O
(	O
EXIT_FAILURE	int
)	O
;	O
free	O
(	O
assembly_path	pointer
)	O
;	O
}	O
}	O
return	O
0	O
;	O
}	O