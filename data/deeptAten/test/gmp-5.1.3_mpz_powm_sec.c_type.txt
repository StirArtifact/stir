void	O
mpz_powm_sec	O
(	O
mpz_ptr	O
r	O
,	O
mpz_srcptr	pointer
b	O
,	O
mpz_srcptr	pointer
e	O
,	O
mpz_srcptr	pointer
m	O
)	O
{	O
mp_size_t	O
n	long
;	O
mp_ptr	O
rp	pointer
,	O
tp	pointer
;	O
mp_srcptr	O
bp	pointer
,	O
ep	pointer
,	O
mp	pointer
;	O
mp_size_t	O
rn	long
,	O
bn	pointer
,	O
es	pointer
,	O
en	pointer
;	O
TMP_DECL	O
;	O
n	O
=	O
ABSIZ	O
(	O
m	pointer
)	O
;	O
mp	O
=	O
PTR	O
(	O
m	pointer
)	O
;	O
if	O
(	O
UNLIKELY	O
(	O
(	int
n	O
==	O
0	O
)	O
||	O
(	O
mp	O
[	O
0	int
]	O
%	O
2	O
==	O
0	O
)	O
)	O
)	O
DIVIDE_BY_ZERO	O
;	O
es	O
=	O
SIZ	O
(	O
e	pointer
)	O
;	O
if	O
(	O
UNLIKELY	O
(	O
es	int
<=	O
0	O
)	O
)	O
{	O
if	O
(	O
es	O
==	O
0	O
)	O
{	O
SIZ	O
(	O
r	pointer
)	O
=	O
n	int
!=	O
1	O
||	O
mp	O
[	O
0	int
]	O
!=	O
1	O
;	O
PTR	pointer
(	O
r	pointer
)	O
[	O
0	int
]	O
=	O
1	O
;	O
return	O
;	int
}	O
DIVIDE_BY_ZERO	O
;	O
}	O
en	O
=	O
es	O
;	O
bn	O
=	O
ABSIZ	O
(	O
b	pointer
)	O
;	O
TMP_MARK	O
;	O
tp	O
=	O
TMP_ALLOC_LIMBS	O
(	O
n	pointer
+	O
mpn_powm_sec_itch	int
(	O
bn	pointer
,	O
en	pointer
,	O
n	O
)	O
)	O
;	O
rp	O
=	O
tp	O
;	O
tp	O
+=	O
n	O
;	O
bp	O
=	O
PTR	O
(	O
b	pointer
)	O
;	O
ep	O
=	O
PTR	O
(	O
e	pointer
)	O
;	O
mpn_powm_sec	O
(	O
rp	pointer
,	O
bp	O
,	O
bn	pointer
,	O
ep	pointer
,	O
en	pointer
,	O
mp	O
,	O
n	int
,	O
tp	int
)	O
;	O
rn	O
=	O
n	O
;	O
MPN_NORMALIZE	O
(	O
rp	pointer
,	O
rn	pointer
)	O
;	O
if	O
(	O
(	O
ep	O
[	O
0	int
]	O
&	O
1	pointer
)	O
&&	O
SIZ	O
(	O
b	pointer
)	O
<	O
0	int
&&	O
rn	O
!=	O
0	O
)	O
{	O
mpn_sub	O
(	O
rp	pointer
,	O
PTR	O
(	O
m	pointer
)	O
,	O
n	O
,	O
rp	O
,	O
rn	int
)	O
;	O
rn	O
=	O
n	O
;	O
MPN_NORMALIZE	O
(	O
rp	pointer
,	O
rn	pointer
)	O
;	O
}	O
MPZ_REALLOC	O
(	O
r	O
,	O
rn	int
)	O
;	O
SIZ	O
(	O
r	pointer
)	O
=	O
rn	int
;	O
MPN_COPY	O
(	O
PTR	pointer
(	O
r	pointer
)	O
,	O
rp	O
,	O
rn	int
)	O
;	O
TMP_FREE	O
;	O
}	O