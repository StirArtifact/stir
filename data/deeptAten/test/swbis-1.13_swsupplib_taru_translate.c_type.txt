int	O
taru_format_translate	O
(	O
int	O
ifd	O
,	O
int	O
ofd	int
,	O
enum	O
archive_format	O
output_format	O
)	O
{	O
int	O
parent	int
;	O
int	O
fpipe	int
[	O
2	O
]	O
;	O
int	O
status	int
=	O
0	int
,	O
ret	O
=	O
0	int
;	O
DEFER	O
*	O
defer	O
=	O
NULL	int
;	O
TARU	O
*	O
taru	O
=	O
taru_create	O
(	O
)	O
;	O
pipe	O
(	O
fpipe	O
)	O
;	O
parent	O
=	O
swfork	O
(	O
(	O
sigset_t	O
*	O
)	O
(	O
NULL	O
)	O
)	O
;	O
if	O
(	O
parent	O
==	O
0	O
)	O
{	O
close	O
(	O
fpipe	O
[	O
0	int
]	O
)	O
;	O
_exit	O
(	O
taru_process_copy_in	O
(	O
NULL	pointer
,	O
ifd	O
,	O
fpipe	O
[	O
1	int
]	O
)	O
)	O
;	O
}	O
else	O
if	O
(	O
parent	O
>	O
0	O
)	O
{	O
close	O
(	O
fpipe	O
[	O
1	int
]	O
)	O
;	O
ret	O
=	O
taru_process_copy_out	int
(	O
taru	pointer
,	O
fpipe	O
[	O
0	int
]	O
,	O
ofd	O
,	O
defer	O
,	O
NULL	O
,	O
output_format	O
,	O
-	O
1	int
,	O
-	O
1	int
,	O
(	O
intmax_t	O
*	O
)	O
NULL	O
,	O
NULL	O
)	O
;	O
while	O
(	O
!	O
waitpid	O
(	O
(	int
pid_t	O
)	O
parent	O
,	O
&	O
status	struct
,	O
WNOHANG	O
)	O
)	O
{	O
;	O
}	O
if	O
(	O
!	O
status	O
&&	O
!	O
ret	O
)	O
return	O
0	int
;	O
}	O
else	O
{	O
return	O
-	int
3	int
;	O
}	O
return	O
-	O
1	int
;	O
}	O