static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: db_dispatch.c,v 1.4 2014/04/17 20:27:26 sebdiaz Exp $"	pointer
;	O
int	O
CDB___db_dispatch	function
(	O
dbenv	pointer
,	O
db	pointer
,	O
lsnp	pointer
,	O
redo	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
db	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
redo	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
u_int32_t	int
rectype	int
,	O
txnid	int
;	O
memcpy	function
(	O
&	O
rectype	int
,	O
db	pointer
->	O
data	pointer
,	O
sizeof	O
(	O
rectype	int
)	O
)	O
;	O
memcpy	function
(	O
&	O
txnid	int
,	O
(	O
u_int8_t	char
*	O
)	O
db	pointer
->	O
data	pointer
+	O
sizeof	O
(	O
rectype	int
)	O
,	O
sizeof	O
(	O
txnid	int
)	O
)	O
;	O
switch	O
(	O
redo	enum
)	O
{	O
case	O
DB_TXN_ABORT	int
:	O
return	O
(	O
(	O
dbenv	pointer
->	O
dtab	pointer
[	O
rectype	int
]	O
)	O
(	O
dbenv	pointer
,	O
db	pointer
,	O
lsnp	pointer
,	O
redo	enum
,	O
info	pointer
)	O
)	O
;	O
case	O
DB_TXN_OPENFILES	int
:	O
if	O
(	O
rectype	int
==	O
DB_log_register	int
)	O
return	O
(	O
dbenv	pointer
->	O
dtab	pointer
[	O
rectype	int
]	O
(	O
dbenv	pointer
,	O
db	pointer
,	O
lsnp	pointer
,	O
redo	enum
,	O
info	pointer
)	O
)	O
;	O
break	O
;	O
case	O
DB_TXN_BACKWARD_ROLL	int
:	O
if	O
(	O
rectype	int
==	O
DB_log_register	int
||	O
rectype	int
==	O
DB_txn_ckp	int
||	O
rectype	int
==	O
DB_db_noop	int
||	O
(	O
CDB___db_txnlist_find	function
(	O
info	pointer
,	O
txnid	int
)	O
==	O
DB_NOTFOUND	O
&&	O
txnid	int
!=	O
0	int
)	O
)	O
return	O
(	O
dbenv	pointer
->	O
dtab	pointer
[	O
rectype	int
]	O
(	O
dbenv	pointer
,	O
db	pointer
,	O
lsnp	pointer
,	O
DB_TXN_BACKWARD_ROLL	int
,	O
info	pointer
)	O
)	O
;	O
break	O
;	O
case	O
DB_TXN_FORWARD_ROLL	int
:	O
if	O
(	O
rectype	int
==	O
DB_log_register	int
||	O
rectype	int
==	O
DB_txn_ckp	int
||	O
rectype	int
==	O
DB_db_noop	int
||	O
CDB___db_txnlist_find	function
(	O
info	pointer
,	O
txnid	int
)	O
!=	O
DB_NOTFOUND	O
)	O
return	O
(	O
dbenv	pointer
->	O
dtab	pointer
[	O
rectype	int
]	O
(	O
dbenv	pointer
,	O
db	pointer
,	O
lsnp	pointer
,	O
DB_TXN_FORWARD_ROLL	int
,	O
info	pointer
)	O
)	O
;	O
break	O
;	O
default	O
:	O
return	O
(	O
CDB___db_unknown_flag	function
(	O
dbenv	pointer
,	O
"CDB___db_dispatch"	pointer
,	O
redo	enum
)	O
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_add_recovery	function
(	O
dbenv	pointer
,	O
func	pointer
,	O
ndx	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
int	O
(	O
*	O
func	pointer
)	O
__P	O
(	O
(	O
DB_ENV	struct
*	O
,	O
DBT	struct
*	O
,	O
DB_LSN	struct
*	O
,	O
db_recops	enum
,	O
void	O
*	O
)	O
)	O
;	O
u_int32_t	int
ndx	int
;	O
{	O
u_int32_t	int
i	int
,	O
nsize	int
;	O
int	O
ret	int
;	O
if	O
(	O
ndx	int
>=	O
dbenv	pointer
->	O
dtab_size	long
)	O
{	O
nsize	int
=	O
ndx	int
+	O
40	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_realloc	function
(	O
dbenv	pointer
,	O
nsize	int
*	O
sizeof	O
(	O
dbenv	pointer
->	O
dtab	pointer
[	O
0	int
]	O
)	O
,	O
NULL	O
,	O
&	O
dbenv	pointer
->	O
dtab	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
for	O
(	O
i	int
=	O
dbenv	pointer
->	O
dtab_size	long
;	O
i	int
<	O
nsize	int
;	O
++	O
i	int
)	O
dbenv	pointer
->	O
dtab	pointer
[	O
i	int
]	O
=	O
NULL	O
;	O
dbenv	pointer
->	O
dtab_size	long
=	O
nsize	int
;	O
}	O
dbenv	pointer
->	O
dtab	pointer
[	O
ndx	int
]	O
=	O
func	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___deprecated_recover	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
op	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
op	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
if	O
(	O
dbenv	pointer
||	O
dbtp	pointer
||	O
lsnp	pointer
||	O
op	enum
||	O
info	pointer
)	O
{	O
}	O
COMPQUIET	O
(	O
dbenv	pointer
,	O
NULL	O
)	O
;	O
COMPQUIET	O
(	O
dbtp	pointer
,	O
NULL	O
)	O
;	O
COMPQUIET	O
(	O
lsnp	pointer
,	O
NULL	O
)	O
;	O
COMPQUIET	O
(	O
op	enum
,	O
0	int
)	O
;	O
COMPQUIET	O
(	O
info	pointer
,	O
NULL	O
)	O
;	O
return	O
(	O
EINVAL	int
)	O
;	O
}	O
int	O
CDB___db_txnlist_init	function
(	O
dbenv	pointer
,	O
retp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
retp	pointer
;	O
{	O
DB_TXNHEAD	struct
*	O
headp	pointer
;	O
int	O
ret	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
DB_TXNHEAD	struct
)	O
,	O
NULL	O
,	O
&	O
headp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
LIST_INIT	O
(	O
&	O
headp	pointer
->	O
head	struct
)	O
;	O
headp	pointer
->	O
maxid	int
=	O
0	int
;	O
headp	pointer
->	O
generation	int
=	O
1	int
;	O
*	O
(	O
void	O
*	O
*	O
)	O
retp	pointer
=	O
headp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_txnlist_add	function
(	O
dbenv	pointer
,	O
listp	pointer
,	O
txnid	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
listp	pointer
;	O
u_int32_t	int
txnid	int
;	O
{	O
DB_TXNHEAD	struct
*	O
hp	pointer
;	O
DB_TXNLIST	struct
*	O
elp	pointer
;	O
int	O
ret	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
DB_TXNLIST	struct
)	O
,	O
NULL	O
,	O
&	O
elp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
hp	pointer
=	O
(	O
DB_TXNHEAD	struct
*	O
)	O
listp	pointer
;	O
LIST_INSERT_HEAD	O
(	O
&	O
hp	pointer
->	O
head	struct
,	O
elp	pointer
,	O
links	struct
)	O
;	O
elp	pointer
->	O
type	enum
=	O
TXNLIST_TXNID	int
;	O
elp	pointer
->	O
u	union
.	O
t	struct
.	O
txnid	int
=	O
txnid	int
;	O
if	O
(	O
txnid	int
>	O
hp	pointer
->	O
maxid	int
)	O
hp	pointer
->	O
maxid	int
=	O
txnid	int
;	O
elp	pointer
->	O
u	union
.	O
t	struct
.	O
generation	int
=	O
hp	pointer
->	O
generation	int
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_txnlist_close	function
(	O
listp	pointer
,	O
lid	int
,	O
count	int
)	O
void	O
*	O
listp	pointer
;	O
int32_t	int
lid	int
;	O
u_int32_t	int
count	int
;	O
{	O
DB_TXNHEAD	struct
*	O
hp	pointer
;	O
DB_TXNLIST	struct
*	O
p	pointer
;	O
hp	pointer
=	O
(	O
DB_TXNHEAD	struct
*	O
)	O
listp	pointer
;	O
for	O
(	O
p	pointer
=	O
LIST_FIRST	O
(	O
&	O
hp	pointer
->	O
head	struct
)	O
;	O
p	pointer
!=	O
NULL	O
;	O
p	pointer
=	O
LIST_NEXT	O
(	O
p	pointer
,	O
links	struct
)	O
)	O
{	O
if	O
(	O
p	pointer
->	O
type	enum
==	O
TXNLIST_DELETE	int
)	O
if	O
(	O
lid	int
==	O
p	pointer
->	O
u	union
.	O
d	struct
.	O
fileid	array
&&	O
!	O
F_ISSET	O
(	O
&	O
p	pointer
->	O
u	union
.	O
d	struct
,	O
TXNLIST_FLAG_CLOSED	int
)	O
)	O
{	O
p	pointer
->	O
u	union
.	O
d	struct
.	O
count	int
+=	O
count	int
;	O
return	O
(	O
0	int
)	O
;	O
}	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_txnlist_delete	function
(	O
dbenv	pointer
,	O
listp	pointer
,	O
name	pointer
,	O
lid	int
,	O
deleted	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
listp	pointer
;	O
char	O
*	O
name	pointer
;	O
u_int32_t	int
lid	int
;	O
int	O
deleted	int
;	O
{	O
DB_TXNHEAD	struct
*	O
hp	pointer
;	O
DB_TXNLIST	struct
*	O
p	pointer
;	O
int	O
ret	int
;	O
hp	pointer
=	O
(	O
DB_TXNHEAD	struct
*	O
)	O
listp	pointer
;	O
for	O
(	O
p	pointer
=	O
LIST_FIRST	O
(	O
&	O
hp	pointer
->	O
head	struct
)	O
;	O
p	pointer
!=	O
NULL	O
;	O
p	pointer
=	O
LIST_NEXT	O
(	O
p	pointer
,	O
links	struct
)	O
)	O
{	O
if	O
(	O
p	pointer
->	O
type	enum
==	O
TXNLIST_DELETE	int
)	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
p	pointer
->	O
u	union
.	O
d	struct
.	O
fname	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
deleted	int
)	O
F_SET	O
(	O
&	O
p	pointer
->	O
u	union
.	O
d	struct
,	O
TXNLIST_FLAG_DELETED	int
)	O
;	O
else	O
F_CLR	O
(	O
&	O
p	pointer
->	O
u	union
.	O
d	struct
,	O
TXNLIST_FLAG_CLOSED	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
sizeof	O
(	O
DB_TXNLIST	struct
)	O
,	O
NULL	O
,	O
&	O
p	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
LIST_INSERT_HEAD	O
(	O
&	O
hp	pointer
->	O
head	struct
,	O
p	pointer
,	O
links	struct
)	O
;	O
p	pointer
->	O
type	enum
=	O
TXNLIST_DELETE	int
;	O
p	pointer
->	O
u	union
.	O
d	struct
.	O
flags	int
=	O
0	int
;	O
if	O
(	O
deleted	int
)	O
F_SET	O
(	O
&	O
p	pointer
->	O
u	union
.	O
d	struct
,	O
TXNLIST_FLAG_DELETED	int
)	O
;	O
p	pointer
->	O
u	union
.	O
d	struct
.	O
fileid	array
=	O
lid	int
;	O
p	pointer
->	O
u	union
.	O
d	struct
.	O
count	int
=	O
0	int
;	O
ret	int
=	O
CDB___os_strdup	function
(	O
dbenv	pointer
,	O
name	pointer
,	O
&	O
p	pointer
->	O
u	union
.	O
d	struct
.	O
fname	pointer
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
void	O
CDB___db_txnlist_end	function
(	O
dbenv	pointer
,	O
listp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
void	O
*	O
listp	pointer
;	O
{	O
DB_TXNHEAD	struct
*	O
hp	pointer
;	O
DB_TXNLIST	struct
*	O
p	pointer
;	O
DB_LOG	struct
*	O
lp	pointer
;	O
hp	pointer
=	O
(	O
DB_TXNHEAD	struct
*	O
)	O
listp	pointer
;	O
lp	pointer
=	O
(	O
DB_LOG	struct
*	O
)	O
dbenv	pointer
->	O
lg_handle	pointer
;	O
while	O
(	O
hp	pointer
!=	O
NULL	O
&&	O
(	O
p	pointer
=	O
LIST_FIRST	O
(	O
&	O
hp	pointer
->	O
head	struct
)	O
)	O
!=	O
LIST_END	O
(	O
&	O
hp	pointer
->	O
head	struct
)	O
)	O
{	O
LIST_REMOVE	O
(	O
p	pointer
,	O
links	struct
)	O
;	O
if	O
(	O
p	pointer
->	O
type	enum
==	O
TXNLIST_DELETE	int
)	O
{	O
if	O
(	O
(	O
!	O
F_ISSET	O
(	O
&	O
p	pointer
->	O
u	union
.	O
d	struct
,	O
TXNLIST_FLAG_DELETED	int
)	O
&&	O
p	pointer
->	O
u	union
.	O
d	struct
.	O
count	int
!=	O
0	int
)	O
||	O
(	O
!	O
F_ISSET	O
(	O
&	O
p	pointer
->	O
u	union
.	O
d	struct
,	O
TXNLIST_FLAG_CLOSED	int
)	O
&&	O
p	pointer
->	O
u	union
.	O
d	struct
.	O
fileid	array
!=	O
(	O
int32_t	int
)	O
TXNLIST_INVALID_ID	int
&&	O
p	pointer
->	O
u	union
.	O
d	struct
.	O
fileid	array
<	O
lp	pointer
->	O
dbentry_cnt	int
&&	O
lp	pointer
->	O
dbentry	pointer
[	O
p	pointer
->	O
u	union
.	O
d	struct
.	O
fileid	array
]	O
.	O
count	int
!=	O
0	int
)	O
)	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"warning: %s: %s"	pointer
,	O
p	pointer
->	O
u	union
.	O
d	struct
.	O
fname	pointer
,	O
CDB_db_strerror	function
(	O
ENOENT	int
)	O
)	O
;	O
CDB___os_freestr	function
(	O
p	pointer
->	O
u	union
.	O
d	struct
.	O
fname	pointer
)	O
;	O
}	O
CDB___os_free	function
(	O
p	pointer
,	O
sizeof	O
(	O
DB_TXNLIST	struct
)	O
)	O
;	O
}	O
CDB___os_free	function
(	O
listp	pointer
,	O
sizeof	O
(	O
DB_TXNHEAD	struct
)	O
)	O
;	O
}	O
int	O
CDB___db_txnlist_find	function
(	O
listp	pointer
,	O
txnid	int
)	O
void	O
*	O
listp	pointer
;	O
u_int32_t	int
txnid	int
;	O
{	O
DB_TXNHEAD	struct
*	O
hp	pointer
;	O
DB_TXNLIST	struct
*	O
p	pointer
;	O
if	O
(	O
txnid	int
==	O
0	int
||	O
(	O
hp	pointer
=	O
(	O
DB_TXNHEAD	struct
*	O
)	O
listp	pointer
)	O
==	O
NULL	O
)	O
return	O
(	O
DB_NOTFOUND	O
)	O
;	O
for	O
(	O
p	pointer
=	O
LIST_FIRST	O
(	O
&	O
hp	pointer
->	O
head	struct
)	O
;	O
p	pointer
!=	O
NULL	O
;	O
p	pointer
=	O
LIST_NEXT	O
(	O
p	pointer
,	O
links	struct
)	O
)	O
{	O
if	O
(	O
p	pointer
->	O
type	enum
!=	O
TXNLIST_TXNID	int
)	O
continue	O
;	O
if	O
(	O
p	pointer
->	O
u	union
.	O
t	struct
.	O
txnid	int
==	O
txnid	int
&&	O
hp	pointer
->	O
generation	int
==	O
p	pointer
->	O
u	union
.	O
t	struct
.	O
generation	int
)	O
{	O
if	O
(	O
p	pointer
!=	O
LIST_FIRST	O
(	O
&	O
hp	pointer
->	O
head	struct
)	O
)	O
{	O
LIST_REMOVE	O
(	O
p	pointer
,	O
links	struct
)	O
;	O
LIST_INSERT_HEAD	O
(	O
&	O
hp	pointer
->	O
head	struct
,	O
p	pointer
,	O
links	struct
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
}	O
return	O
(	O
DB_NOTFOUND	O
)	O
;	O
}	O
void	O
CDB___db_txnlist_gen	function
(	O
listp	pointer
,	O
incr	int
)	O
void	O
*	O
listp	pointer
;	O
int	O
incr	int
;	O
{	O
DB_TXNHEAD	struct
*	O
hp	pointer
;	O
hp	pointer
=	O
(	O
DB_TXNHEAD	struct
*	O
)	O
listp	pointer
;	O
hp	pointer
->	O
generation	int
+=	O
incr	int
;	O
}	O
