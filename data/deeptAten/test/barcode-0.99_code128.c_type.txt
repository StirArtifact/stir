static	O
char	O
*	O
codeset	array
[	O
]	O
=	O
{	O
"212222"	pointer
,	O
"222122"	pointer
,	O
"222221"	pointer
,	O
"121223"	pointer
,	O
"121322"	pointer
,	O
"131222"	pointer
,	O
"122213"	pointer
,	O
"122312"	pointer
,	O
"132212"	pointer
,	O
"221213"	pointer
,	O
"221312"	pointer
,	O
"231212"	pointer
,	O
"112232"	pointer
,	O
"122132"	pointer
,	O
"122231"	pointer
,	O
"113222"	pointer
,	O
"123122"	pointer
,	O
"123221"	pointer
,	O
"223211"	pointer
,	O
"221132"	pointer
,	O
"221231"	pointer
,	O
"213212"	pointer
,	O
"223112"	pointer
,	O
"312131"	pointer
,	O
"311222"	pointer
,	O
"321122"	pointer
,	O
"321221"	pointer
,	O
"312212"	pointer
,	O
"322112"	pointer
,	O
"322211"	pointer
,	O
"212123"	pointer
,	O
"212321"	pointer
,	O
"232121"	pointer
,	O
"111323"	pointer
,	O
"131123"	pointer
,	O
"131321"	pointer
,	O
"112313"	pointer
,	O
"132113"	pointer
,	O
"132311"	pointer
,	O
"211313"	pointer
,	O
"231113"	pointer
,	O
"231311"	pointer
,	O
"112133"	pointer
,	O
"112331"	pointer
,	O
"132131"	pointer
,	O
"113123"	pointer
,	O
"113321"	pointer
,	O
"133121"	pointer
,	O
"313121"	pointer
,	O
"211331"	pointer
,	O
"231131"	pointer
,	O
"213113"	pointer
,	O
"213311"	pointer
,	O
"213131"	pointer
,	O
"311123"	pointer
,	O
"311321"	pointer
,	O
"331121"	pointer
,	O
"312113"	pointer
,	O
"312311"	pointer
,	O
"332111"	pointer
,	O
"314111"	pointer
,	O
"221411"	pointer
,	O
"431111"	pointer
,	O
"111224"	pointer
,	O
"111422"	pointer
,	O
"121124"	pointer
,	O
"121421"	pointer
,	O
"141122"	pointer
,	O
"141221"	pointer
,	O
"112214"	pointer
,	O
"112412"	pointer
,	O
"122114"	pointer
,	O
"122411"	pointer
,	O
"142112"	pointer
,	O
"142211"	pointer
,	O
"241211"	pointer
,	O
"221114"	pointer
,	O
"413111"	pointer
,	O
"241112"	pointer
,	O
"134111"	pointer
,	O
"111242"	pointer
,	O
"121142"	pointer
,	O
"121241"	pointer
,	O
"114212"	pointer
,	O
"124112"	pointer
,	O
"124211"	pointer
,	O
"411212"	pointer
,	O
"421112"	pointer
,	O
"421211"	pointer
,	O
"212141"	pointer
,	O
"214121"	pointer
,	O
"412121"	pointer
,	O
"111143"	pointer
,	O
"111341"	pointer
,	O
"131141"	pointer
,	O
"114113"	pointer
,	O
"114311"	pointer
,	O
"411113"	pointer
,	O
"411311"	pointer
,	O
"113141"	pointer
,	O
"114131"	pointer
,	O
"311141"	pointer
,	O
"411131"	pointer
,	O
"b1a4a2"	pointer
,	O
"b1a2a4"	pointer
,	O
"b1a2c2"	pointer
,	O
"b3c1a1b"	pointer
}	O
;	O
int	O
Barcode_128b_verify	function
(	O
char	O
*	O
text	pointer
)	O
{	O
if	O
(	O
text	pointer
[	O
0	int
]	O
==	O
'\0'	O
)	O
return	O
-	O
1	int
;	O
while	O
(	O
*	O
text	pointer
&&	O
*	O
text	pointer
>=	O
32	int
&&	O
!	O
(	O
*	O
text	pointer
&	O
0x80	int
)	O
)	O
text	pointer
++	O
;	O
if	O
(	O
*	O
text	pointer
)	O
return	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
Barcode_128b_encode	function
(	O
struct	O
Barcode_Item	struct
*	O
bc	pointer
)	O
{	O
static	O
char	O
*	O
text	pointer
;	O
static	O
char	O
*	O
partial	pointer
;	O
static	O
char	O
*	O
textinfo	pointer
;	O
char	O
*	O
textptr	pointer
;	O
int	O
i	int
,	O
code	int
,	O
textpos	int
,	O
checksum	int
=	O
0	int
;	O
if	O
(	O
bc	pointer
->	O
partial	pointer
)	O
free	function
(	O
bc	pointer
->	O
partial	pointer
)	O
;	O
if	O
(	O
bc	pointer
->	O
textinfo	pointer
)	O
free	function
(	O
bc	pointer
->	O
textinfo	pointer
)	O
;	O
bc	pointer
->	O
partial	pointer
=	O
bc	pointer
->	O
textinfo	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
bc	pointer
->	O
encoding	pointer
)	O
bc	pointer
->	O
encoding	pointer
=	O
strdup	function
(	O
"code 128-B"	pointer
)	O
;	O
text	pointer
=	O
bc	pointer
->	O
ascii	pointer
;	O
if	O
(	O
!	O
text	pointer
)	O
{	O
bc	pointer
->	O
error	int
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
partial	pointer
=	O
malloc	function
(	O
(	O
strlen	function
(	O
text	pointer
)	O
+	O
4	int
)	O
*	O
6	int
+	O
2	int
)	O
;	O
if	O
(	O
!	O
partial	pointer
)	O
{	O
bc	pointer
->	O
error	int
=	O
errno	O
;	O
return	O
-	O
1	int
;	O
}	O
textinfo	pointer
=	O
malloc	function
(	O
10	int
*	O
strlen	function
(	O
text	pointer
)	O
+	O
2	int
)	O
;	O
if	O
(	O
!	O
textinfo	pointer
)	O
{	O
bc	pointer
->	O
error	int
=	O
errno	O
;	O
free	function
(	O
partial	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
strcpy	function
(	O
partial	pointer
,	O
"0"	pointer
)	O
;	O
strcat	function
(	O
partial	pointer
,	O
codeset	array
[	O
START_B	int
]	O
)	O
;	O
checksum	int
+=	O
START_B	int
;	O
textptr	pointer
=	O
textinfo	pointer
;	O
textpos	int
=	O
SYMBOL_WID	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
strlen	function
(	O
text	pointer
)	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
text	pointer
[	O
i	int
]	O
<	O
32	int
||	O
(	O
text	pointer
[	O
i	int
]	O
&	O
0x80	int
)	O
)	O
{	O
bc	pointer
->	O
error	int
=	O
EINVAL	int
;	O
free	function
(	O
partial	pointer
)	O
;	O
free	function
(	O
textinfo	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
code	int
=	O
text	pointer
[	O
i	int
]	O
-	O
32	int
;	O
strcat	function
(	O
partial	pointer
,	O
codeset	array
[	O
code	int
]	O
)	O
;	O
checksum	int
+=	O
code	int
*	O
(	O
i	int
+	O
1	int
)	O
;	O
sprintf	function
(	O
textptr	pointer
,	O
"%i:12:%c "	pointer
,	O
textpos	int
,	O
text	pointer
[	O
i	int
]	O
)	O
;	O
textptr	pointer
+=	O
strlen	function
(	O
textptr	pointer
)	O
;	O
textpos	int
+=	O
SYMBOL_WID	int
;	O
}	O
checksum	int
%=	O
103	int
;	O
strcat	function
(	O
partial	pointer
,	O
codeset	array
[	O
checksum	int
]	O
)	O
;	O
strcat	function
(	O
partial	pointer
,	O
codeset	array
[	O
STOP	int
]	O
)	O
;	O
bc	pointer
->	O
partial	pointer
=	O
partial	pointer
;	O
bc	pointer
->	O
textinfo	pointer
=	O
textinfo	pointer
;	O
return	O
0	int
;	O
}	O
int	O
Barcode_128c_verify	function
(	O
char	O
*	O
text	pointer
)	O
{	O
if	O
(	O
text	pointer
[	O
0	int
]	O
==	O
'\0'	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
strlen	function
(	O
text	pointer
)	O
%	O
2	int
)	O
return	O
-	O
1	int
;	O
for	O
(	O
;	O
*	O
text	pointer
;	O
text	pointer
++	O
)	O
if	O
(	O
!	O
isdigit	function
(	O
*	O
text	pointer
)	O
)	O
return	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
Barcode_128c_encode	function
(	O
struct	O
Barcode_Item	struct
*	O
bc	pointer
)	O
{	O
static	O
char	O
*	O
text	pointer
;	O
static	O
char	O
*	O
partial	pointer
;	O
static	O
char	O
*	O
textinfo	pointer
;	O
char	O
*	O
textptr	pointer
;	O
int	O
i	int
,	O
code	int
,	O
textpos	int
,	O
checksum	int
=	O
0	int
;	O
if	O
(	O
bc	pointer
->	O
partial	pointer
)	O
free	function
(	O
bc	pointer
->	O
partial	pointer
)	O
;	O
if	O
(	O
bc	pointer
->	O
textinfo	pointer
)	O
free	function
(	O
bc	pointer
->	O
textinfo	pointer
)	O
;	O
bc	pointer
->	O
partial	pointer
=	O
bc	pointer
->	O
textinfo	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
bc	pointer
->	O
encoding	pointer
)	O
bc	pointer
->	O
encoding	pointer
=	O
strdup	function
(	O
"code 128-C"	pointer
)	O
;	O
text	pointer
=	O
bc	pointer
->	O
ascii	pointer
;	O
if	O
(	O
!	O
text	pointer
)	O
{	O
bc	pointer
->	O
error	int
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
partial	pointer
=	O
malloc	function
(	O
(	O
strlen	function
(	O
text	pointer
)	O
+	O
3	int
)	O
*	O
6	int
+	O
2	int
)	O
;	O
if	O
(	O
!	O
partial	pointer
)	O
{	O
bc	pointer
->	O
error	int
=	O
errno	O
;	O
return	O
-	O
1	int
;	O
}	O
textinfo	pointer
=	O
malloc	function
(	O
12	int
*	O
strlen	function
(	O
text	pointer
)	O
+	O
2	int
)	O
;	O
if	O
(	O
!	O
textinfo	pointer
)	O
{	O
bc	pointer
->	O
error	int
=	O
errno	O
;	O
free	function
(	O
partial	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
strcpy	function
(	O
partial	pointer
,	O
"0"	pointer
)	O
;	O
strcat	function
(	O
partial	pointer
,	O
codeset	array
[	O
START_C	int
]	O
)	O
;	O
checksum	int
+=	O
START_C	int
;	O
textptr	pointer
=	O
textinfo	pointer
;	O
textpos	int
=	O
SYMBOL_WID	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
text	pointer
[	O
i	int
]	O
;	O
i	int
+=	O
2	int
)	O
{	O
if	O
(	O
!	O
isdigit	function
(	O
text	pointer
[	O
i	int
]	O
)	O
||	O
!	O
isdigit	function
(	O
text	pointer
[	O
i	int
+	O
1	int
]	O
)	O
)	O
{	O
bc	pointer
->	O
error	int
=	O
EINVAL	int
;	O
free	function
(	O
partial	pointer
)	O
;	O
free	function
(	O
textinfo	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
code	int
=	O
(	O
text	pointer
[	O
i	int
]	O
-	O
'0'	O
)	O
*	O
10	int
+	O
text	pointer
[	O
i	int
+	O
1	int
]	O
-	O
'0'	O
;	O
strcat	function
(	O
partial	pointer
,	O
codeset	array
[	O
code	int
]	O
)	O
;	O
checksum	int
+=	O
code	int
*	O
(	O
i	int
/	O
2	int
+	O
1	int
)	O
;	O
sprintf	function
(	O
textptr	pointer
,	O
"%g:9:%c %g:9:%c "	pointer
,	O
(	O
double	O
)	O
textpos	int
,	O
text	pointer
[	O
i	int
]	O
,	O
textpos	int
+	O
(	O
double	O
)	O
SYMBOL_WID	int
/	O
2	int
,	O
text	pointer
[	O
i	int
+	O
1	int
]	O
)	O
;	O
textptr	pointer
+=	O
strlen	function
(	O
textptr	pointer
)	O
;	O
textpos	int
+=	O
SYMBOL_WID	int
;	O
}	O
checksum	int
%=	O
103	int
;	O
strcat	function
(	O
partial	pointer
,	O
codeset	array
[	O
checksum	int
]	O
)	O
;	O
strcat	function
(	O
partial	pointer
,	O
codeset	array
[	O
STOP	int
]	O
)	O
;	O
bc	pointer
->	O
partial	pointer
=	O
partial	pointer
;	O
bc	pointer
->	O
textinfo	pointer
=	O
textinfo	pointer
;	O
return	O
0	int
;	O
}	O
int	O
Barcode_128_verify	function
(	O
unsigned	O
char	O
*	O
text	pointer
)	O
{	O
if	O
(	O
text	pointer
[	O
0	int
]	O
==	O
'\0'	O
)	O
return	O
-	O
1	int
;	O
while	O
(	O
*	O
text	pointer
&&	O
(	O
*	O
text	pointer
<=	O
0x80	int
||	O
(	O
*	O
text	pointer
>=	O
0xc1	int
&&	O
*	O
text	pointer
<=	O
0xc4	int
)	O
)	O
)	O
text	pointer
++	O
;	O
if	O
(	O
*	O
text	pointer
)	O
return	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
Barcode_a_or_b	function
(	O
char	O
*	O
text	pointer
)	O
{	O
for	O
(	O
;	O
*	O
text	pointer
;	O
text	pointer
++	O
)	O
{	O
if	O
(	O
NEED_CODE_A	O
(	O
*	O
text	pointer
)	O
)	O
return	O
'A'	O
;	O
if	O
(	O
NEED_CODE_B	O
(	O
*	O
text	pointer
)	O
)	O
return	O
'B'	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
Barcode_encode_as	function
(	O
int	O
code	int
,	O
int	O
value	int
)	O
{	O
if	O
(	O
value	int
==	O
0xC1	int
)	O
return	O
FUNC_1	int
;	O
if	O
(	O
value	int
==	O
0xC2	int
)	O
return	O
FUNC_2	int
;	O
if	O
(	O
value	int
==	O
0xC3	int
)	O
return	O
FUNC_3	int
;	O
if	O
(	O
value	int
==	O
0xC4	int
)	O
{	O
if	O
(	O
code	int
==	O
'A'	O
)	O
return	O
CODE_A	int
;	O
return	O
CODE_B	int
;	O
}	O
if	O
(	O
value	int
>=	O
0x20	int
&&	O
value	int
<=	O
0x5F	int
)	O
return	O
value	int
-	O
0x20	int
;	O
if	O
(	O
value	int
==	O
0x80	int
)	O
return	O
64	int
;	O
if	O
(	O
value	int
<	O
0x20	int
)	O
return	O
value	int
+	O
64	int
;	O
if	O
(	O
value	int
>=	O
0x60	int
)	O
return	O
value	int
-	O
0x20	int
;	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
*	O
Barcode_128_make_array	function
(	O
struct	O
Barcode_Item	struct
*	O
bc	pointer
,	O
int	O
*	O
lptr	pointer
)	O
{	O
int	O
len	int
,	O
*	O
codes	pointer
;	O
char	O
*	O
s	pointer
;	O
int	O
i	int
=	O
0	int
,	O
j	int
,	O
code	int
,	O
checksum	int
;	O
len	int
=	O
2	int
*	O
strlen	function
(	O
bc	pointer
->	O
ascii	pointer
)	O
+	O
5	int
;	O
codes	pointer
=	O
malloc	function
(	O
len	int
*	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
s	pointer
=	O
bc	pointer
->	O
ascii	pointer
;	O
if	O
(	O
s	pointer
[	O
2	int
]	O
==	O
'\0'	O
&&	O
isdigit	function
(	O
s	pointer
[	O
0	int
]	O
)	O
&&	O
isdigit	function
(	O
s	pointer
[	O
1	int
]	O
)	O
)	O
{	O
code	int
=	O
'C'	O
;	O
}	O
else	O
if	O
(	O
isdigit	function
(	O
s	pointer
[	O
0	int
]	O
)	O
&&	O
isdigit	function
(	O
s	pointer
[	O
1	int
]	O
)	O
&&	O
isdigit	function
(	O
s	pointer
[	O
2	int
]	O
)	O
&&	O
isdigit	function
(	O
s	pointer
[	O
3	int
]	O
)	O
)	O
{	O
code	int
=	O
'C'	O
;	O
}	O
else	O
{	O
code	int
=	O
Barcode_a_or_b	function
(	O
s	pointer
)	O
;	O
if	O
(	O
!	O
code	int
)	O
code	int
=	O
'B'	O
;	O
}	O
codes	pointer
[	O
i	int
++	O
]	O
=	O
START_A	int
+	O
code	int
-	O
'A'	O
;	O
for	O
(	O
s	pointer
=	O
bc	pointer
->	O
ascii	pointer
;	O
*	O
s	pointer
;	O
)	O
{	O
switch	O
(	O
code	int
)	O
{	O
case	O
'C'	O
:	O
if	O
(	O
s	pointer
[	O
0	int
]	O
==	O
0xC1	int
)	O
{	O
codes	pointer
[	O
i	int
++	O
]	O
=	O
FUNC_1	int
;	O
s	pointer
++	O
;	O
}	O
else	O
if	O
(	O
isdigit	function
(	O
s	pointer
[	O
0	int
]	O
)	O
&&	O
isdigit	function
(	O
s	pointer
[	O
1	int
]	O
)	O
)	O
{	O
codes	pointer
[	O
i	int
++	O
]	O
=	O
(	O
s	pointer
[	O
0	int
]	O
-	O
'0'	O
)	O
*	O
10	int
+	O
s	pointer
[	O
1	int
]	O
-	O
'0'	O
;	O
s	pointer
+=	O
2	int
;	O
}	O
else	O
{	O
code	int
=	O
Barcode_a_or_b	function
(	O
s	pointer
)	O
;	O
if	O
(	O
!	O
code	int
)	O
code	int
=	O
'B'	O
;	O
codes	pointer
[	O
i	int
++	O
]	O
=	O
(	O
code	int
==	O
'A'	O
)	O
?	O
CODE_A	int
:	O
CODE_B	int
;	O
}	O
break	O
;	O
case	O
'B'	O
:	O
case	O
'A'	O
:	O
for	O
(	O
j	int
=	O
0	int
;	O
isdigit	function
(	O
s	pointer
[	O
j	int
]	O
)	O
;	O
j	int
++	O
)	O
;	O
if	O
(	O
j	int
>=	O
4	int
)	O
{	O
if	O
(	O
j	int
&	O
1	int
)	O
{	O
codes	pointer
[	O
i	int
++	O
]	O
=	O
*	O
(	O
s	pointer
++	O
)	O
-	O
' '	O
;	O
}	O
codes	pointer
[	O
i	int
++	O
]	O
=	O
CODE_C	int
;	O
code	int
=	O
'C'	O
;	O
}	O
else	O
if	O
(	O
code	int
==	O
'A'	O
&&	O
NEED_CODE_B	O
(	O
*	O
s	pointer
)	O
)	O
{	O
j	int
=	O
Barcode_a_or_b	function
(	O
s	pointer
+	O
1	int
)	O
;	O
if	O
(	O
j	int
==	O
'B'	O
)	O
{	O
codes	pointer
[	O
i	int
++	O
]	O
=	O
CODE_B	int
;	O
code	int
=	O
'B'	O
;	O
}	O
else	O
{	O
codes	pointer
[	O
i	int
++	O
]	O
=	O
SHIFT	int
;	O
codes	pointer
[	O
i	int
++	O
]	O
=	O
Barcode_encode_as	function
(	O
'B'	O
,	O
*	O
s	pointer
)	O
;	O
s	pointer
++	O
;	O
}	O
}	O
else	O
if	O
(	O
code	int
==	O
'B'	O
&&	O
NEED_CODE_A	O
(	O
*	O
s	pointer
)	O
)	O
{	O
j	int
=	O
Barcode_a_or_b	function
(	O
s	pointer
+	O
1	int
)	O
;	O
if	O
(	O
j	int
==	O
'A'	O
)	O
{	O
codes	pointer
[	O
i	int
++	O
]	O
=	O
CODE_A	int
;	O
code	int
=	O
'A'	O
;	O
}	O
else	O
{	O
codes	pointer
[	O
i	int
++	O
]	O
=	O
SHIFT	int
;	O
codes	pointer
[	O
i	int
++	O
]	O
=	O
Barcode_encode_as	function
(	O
'A'	O
,	O
*	O
s	pointer
)	O
;	O
s	pointer
++	O
;	O
}	O
}	O
else	O
{	O
codes	pointer
[	O
i	int
++	O
]	O
=	O
Barcode_encode_as	function
(	O
code	int
,	O
*	O
s	pointer
)	O
;	O
s	pointer
++	O
;	O
}	O
break	O
;	O
}	O
}	O
checksum	int
=	O
codes	pointer
[	O
0	int
]	O
;	O
for	O
(	O
j	int
=	O
1	int
;	O
j	int
<	O
i	int
;	O
j	int
++	O
)	O
checksum	int
+=	O
j	int
*	O
codes	pointer
[	O
j	int
]	O
;	O
checksum	int
%=	O
103	int
;	O
codes	pointer
[	O
i	int
++	O
]	O
=	O
checksum	int
;	O
codes	pointer
[	O
i	int
++	O
]	O
=	O
STOP	int
;	O
if	O
(	O
i	int
>	O
len	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"impossible: length is > allocated len\n"	pointer
)	O
;	O
}	O
*	O
lptr	pointer
=	O
i	int
;	O
return	O
codes	pointer
;	O
}	O
int	O
Barcode_128_encode	function
(	O
struct	O
Barcode_Item	struct
*	O
bc	pointer
)	O
{	O
static	O
char	O
*	O
text	pointer
;	O
static	O
char	O
*	O
partial	pointer
;	O
static	O
char	O
*	O
textinfo	pointer
;	O
char	O
*	O
textptr	pointer
;	O
int	O
*	O
codes	pointer
;	O
int	O
i	int
,	O
c	int
,	O
len	int
;	O
double	O
textpos	int
,	O
size	double
,	O
step	double
;	O
if	O
(	O
bc	pointer
->	O
partial	pointer
)	O
free	function
(	O
bc	pointer
->	O
partial	pointer
)	O
;	O
if	O
(	O
bc	pointer
->	O
textinfo	pointer
)	O
free	function
(	O
bc	pointer
->	O
textinfo	pointer
)	O
;	O
bc	pointer
->	O
partial	pointer
=	O
bc	pointer
->	O
textinfo	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
bc	pointer
->	O
encoding	pointer
)	O
bc	pointer
->	O
encoding	pointer
=	O
strdup	function
(	O
"code 128"	pointer
)	O
;	O
text	pointer
=	O
bc	pointer
->	O
ascii	pointer
;	O
if	O
(	O
!	O
text	pointer
)	O
{	O
bc	pointer
->	O
error	int
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
codes	pointer
=	O
Barcode_128_make_array	function
(	O
bc	pointer
,	O
&	O
len	int
)	O
;	O
if	O
(	O
!	O
codes	pointer
)	O
return	O
-	O
1	int
;	O
partial	pointer
=	O
malloc	function
(	O
6	int
*	O
len	int
+	O
4	int
)	O
;	O
if	O
(	O
!	O
partial	pointer
)	O
{	O
bc	pointer
->	O
error	int
=	O
errno	O
;	O
free	function
(	O
codes	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
textptr	pointer
=	O
textinfo	pointer
=	O
malloc	function
(	O
13	int
*	O
strlen	function
(	O
text	pointer
)	O
+	O
2	int
)	O
;	O
if	O
(	O
!	O
textinfo	pointer
)	O
{	O
bc	pointer
->	O
error	int
=	O
errno	O
;	O
free	function
(	O
partial	pointer
)	O
;	O
free	function
(	O
codes	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
strcpy	function
(	O
partial	pointer
,	O
"0"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len	int
;	O
i	int
++	O
)	O
strcat	function
(	O
partial	pointer
,	O
codeset	array
[	O
codes	pointer
[	O
i	int
]	O
]	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
partial	pointer
[	O
i	int
]	O
;	O
i	int
++	O
)	O
if	O
(	O
isalpha	function
(	O
partial	pointer
[	O
i	int
]	O
)	O
)	O
partial	pointer
[	O
i	int
]	O
+=	O
'1'	O
-	O
'a'	O
;	O
size	double
=	O
(	O
int	O
)	O
(	O
180.0	int
*	O
(	O
len	int
-	O
3	int
)	O
/	O
strlen	function
(	O
text	pointer
)	O
+	O
.5	int
)	O
/	O
10.0	int
;	O
if	O
(	O
size	double
>	O
12.0	int
)	O
size	double
=	O
12.0	int
;	O
step	double
=	O
(	O
int	O
)	O
(	O
10	int
*	O
(	O
size	double
/	O
18.0	int
*	O
SYMBOL_WID	int
)	O
+	O
.5	int
)	O
/	O
10.0	int
;	O
textpos	int
=	O
SYMBOL_WID	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
strlen	function
(	O
text	pointer
)	O
;	O
i	int
++	O
)	O
{	O
c	int
=	O
text	pointer
[	O
i	int
]	O
;	O
if	O
(	O
c	int
<	O
32	int
||	O
c	int
==	O
0x80	int
)	O
c	int
=	O
'_'	O
;	O
if	O
(	O
c	int
>	O
0xc0	int
)	O
c	int
=	O
' '	O
;	O
sprintf	function
(	O
textptr	pointer
,	O
"%g:%g:%c "	pointer
,	O
textpos	int
,	O
size	double
,	O
c	int
)	O
;	O
textptr	pointer
+=	O
strlen	function
(	O
textptr	pointer
)	O
;	O
textpos	int
+=	O
step	double
;	O
}	O
bc	pointer
->	O
partial	pointer
=	O
partial	pointer
;	O
bc	pointer
->	O
textinfo	pointer
=	O
textinfo	pointer
;	O
free	function
(	O
codes	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
Barcode_128raw_verify	function
(	O
char	O
*	O
text	pointer
)	O
{	O
int	O
n	long
;	O
unsigned	O
val	int
;	O
if	O
(	O
!	O
strlen	function
(	O
text	pointer
)	O
)	O
return	O
-	O
1	int
;	O
while	O
(	O
*	O
text	pointer
)	O
{	O
if	O
(	O
sscanf	function
(	O
text	pointer
,	O
"%u%n"	pointer
,	O
&	O
val	int
,	O
&	O
n	long
)	O
<	O
1	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
val	int
>	O
105	int
)	O
return	O
-	O
1	int
;	O
text	pointer
+=	O
n	long
;	O
}	O
return	O
0	int
;	O
}	O
int	O
Barcode_128raw_encode	function
(	O
struct	O
Barcode_Item	struct
*	O
bc	pointer
)	O
{	O
static	O
char	O
*	O
text	pointer
;	O
static	O
char	O
*	O
partial	pointer
;	O
static	O
char	O
*	O
textinfo	pointer
;	O
char	O
*	O
textptr	pointer
;	O
int	O
i	int
,	O
n	long
,	O
count	int
,	O
code	int
,	O
textpos	int
,	O
checksum	int
=	O
0	int
;	O
if	O
(	O
bc	pointer
->	O
partial	pointer
)	O
free	function
(	O
bc	pointer
->	O
partial	pointer
)	O
;	O
if	O
(	O
bc	pointer
->	O
textinfo	pointer
)	O
free	function
(	O
bc	pointer
->	O
textinfo	pointer
)	O
;	O
bc	pointer
->	O
partial	pointer
=	O
bc	pointer
->	O
textinfo	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
bc	pointer
->	O
encoding	pointer
)	O
bc	pointer
->	O
encoding	pointer
=	O
strdup	function
(	O
"128raw"	pointer
)	O
;	O
text	pointer
=	O
bc	pointer
->	O
ascii	pointer
;	O
if	O
(	O
!	O
text	pointer
)	O
{	O
bc	pointer
->	O
error	int
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
partial	pointer
=	O
malloc	function
(	O
(	O
3	int
+	O
strlen	function
(	O
text	pointer
)	O
/	O
2	int
)	O
*	O
6	int
+	O
2	int
)	O
;	O
if	O
(	O
!	O
partial	pointer
)	O
{	O
bc	pointer
->	O
error	int
=	O
errno	O
;	O
return	O
-	O
1	int
;	O
}	O
textinfo	pointer
=	O
malloc	function
(	O
12	int
*	O
(	O
1	int
+	O
strlen	function
(	O
text	pointer
)	O
/	O
2	int
)	O
+	O
2	int
)	O
;	O
if	O
(	O
!	O
textinfo	pointer
)	O
{	O
bc	pointer
->	O
error	int
=	O
errno	O
;	O
free	function
(	O
partial	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
strcpy	function
(	O
partial	pointer
,	O
"0"	pointer
)	O
;	O
textptr	pointer
=	O
textinfo	pointer
;	O
textpos	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
,	O
count	int
=	O
0	int
;	O
i	int
<	O
strlen	function
(	O
text	pointer
)	O
;	O
count	int
++	O
)	O
{	O
if	O
(	O
sscanf	function
(	O
text	pointer
+	O
i	int
,	O
"%u%n"	pointer
,	O
&	O
code	int
,	O
&	O
n	long
)	O
<	O
1	int
)	O
{	O
bc	pointer
->	O
error	int
=	O
EINVAL	int
;	O
free	function
(	O
partial	pointer
)	O
;	O
free	function
(	O
textinfo	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
strcat	function
(	O
partial	pointer
,	O
codeset	array
[	O
code	int
]	O
)	O
;	O
if	O
(	O
!	O
count	int
)	O
checksum	int
+=	O
code	int
;	O
else	O
checksum	int
+=	O
code	int
*	O
count	int
;	O
sprintf	function
(	O
textptr	pointer
,	O
"%g:9:%c %g:9:%c "	pointer
,	O
(	O
double	O
)	O
textpos	int
,	O
code	int
>=	O
100	int
?	O
'A'	O
:	O
code	int
/	O
10	int
+	O
'0'	O
,	O
textpos	int
+	O
(	O
double	O
)	O
SYMBOL_WID	int
/	O
2	int
,	O
code	int
%	O
10	int
+	O
'0'	O
)	O
;	O
textptr	pointer
+=	O
strlen	function
(	O
textptr	pointer
)	O
;	O
textpos	int
+=	O
SYMBOL_WID	int
;	O
i	int
+=	O
n	long
;	O
}	O
checksum	int
%=	O
103	int
;	O
strcat	function
(	O
partial	pointer
,	O
codeset	array
[	O
checksum	int
]	O
)	O
;	O
strcat	function
(	O
partial	pointer
,	O
codeset	array
[	O
STOP	int
]	O
)	O
;	O
bc	pointer
->	O
partial	pointer
=	O
partial	pointer
;	O
bc	pointer
->	O
textinfo	pointer
=	O
textinfo	pointer
;	O
return	O
0	int
;	O
}	O
