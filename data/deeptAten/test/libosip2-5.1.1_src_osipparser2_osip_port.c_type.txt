FILE	struct
*	O
logfile	pointer
=	O
NULL	O
;	O
int	O
tracing_table	array
[	O
END_TRACE_LEVEL	int
]	O
;	O
static	O
int	O
use_syslog	int
=	O
0	int
;	O
static	O
osip_trace_func_t	function
*	O
trace_func	pointer
=	O
0	int
;	O
static	O
unsigned	O
int	O
random_seed_set	int
=	O
0	int
;	O
osip_malloc_func_t	function
*	O
osip_malloc_func	pointer
=	O
0	int
;	O
osip_realloc_func_t	function
*	O
osip_realloc_func	pointer
=	O
0	int
;	O
osip_free_func_t	function
*	O
osip_free_func	pointer
=	O
0	int
;	O
const	O
char	O
*	O
osip_error_table	array
[	O
]	O
=	O
{	O
"success"	pointer
,	O
"undefined error"	pointer
,	O
"bad parameter"	pointer
,	O
"wrong state"	pointer
,	O
"allocation failure"	pointer
,	O
"syntax error"	pointer
,	O
"not found"	pointer
,	O
"api not initialized"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"no network"	pointer
,	O
"busy port"	pointer
,	O
"unknown host"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"disk full"	pointer
,	O
"no rights"	pointer
,	O
"file not found"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"time out"	pointer
,	O
"too much call"	pointer
,	O
"wrong format"	pointer
,	O
"no common codec"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
"undefined"	pointer
,	O
}	O
;	O
const	O
char	O
*	O
osip_strerror	function
(	O
int	O
err	int
)	O
{	O
if	O
(	O
err	int
>	O
0	int
)	O
return	O
osip_error_table	array
[	O
0	int
]	O
;	O
if	O
(	O
err	int
>	O
-	O
60	int
)	O
return	O
osip_error_table	array
[	O
-	O
err	int
]	O
;	O
return	O
osip_error_table	array
[	O
59	int
]	O
;	O
}	O
unsigned	O
int	O
osip_build_random_number	function
(	O
)	O
{	O
if	O
(	O
!	O
random_seed_set	int
)	O
{	O
unsigned	O
int	O
ticks	int
;	O
struct	O
timeval	struct
tv	struct
;	O
int	O
fd	int
;	O
gettimeofday	function
(	O
&	O
tv	struct
,	O
NULL	O
)	O
;	O
ticks	int
=	O
(	O
unsigned	O
int	O
)	O
(	O
tv	struct
.	O
tv_sec	long
+	O
tv	struct
.	O
tv_usec	long
)	O
;	O
fd	int
=	O
open	function
(	O
"/dev/urandom"	pointer
,	O
O_RDONLY	int
)	O
;	O
if	O
(	O
fd	int
>	O
0	int
)	O
{	O
unsigned	O
int	O
r	int
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
512	int
;	O
i	int
++	O
)	O
{	O
read	function
(	O
fd	int
,	O
&	O
r	int
,	O
sizeof	O
(	O
r	int
)	O
)	O
;	O
ticks	int
+=	O
r	int
;	O
}	O
close	function
(	O
fd	int
)	O
;	O
}	O
srand48	function
(	O
ticks	int
)	O
;	O
random_seed_set	int
=	O
1	int
;	O
}	O
{	O
int	O
val	int
=	O
(	O
int	O
)	O
lrand48	function
(	O
)	O
;	O
if	O
(	O
val	int
==	O
0	int
)	O
{	O
unsigned	O
int	O
ticks	int
;	O
struct	O
timeval	struct
tv	struct
;	O
gettimeofday	function
(	O
&	O
tv	struct
,	O
NULL	O
)	O
;	O
ticks	int
=	O
(	O
unsigned	O
int	O
)	O
(	O
tv	struct
.	O
tv_sec	long
+	O
tv	struct
.	O
tv_usec	long
)	O
;	O
srand48	function
(	O
ticks	int
)	O
;	O
return	O
(	O
unsigned	O
int	O
)	O
lrand48	function
(	O
)	O
;	O
}	O
return	O
val	int
;	O
}	O
}	O
char	O
*	O
osip_strncpy	function
(	O
char	O
*	O
dest	pointer
,	O
const	O
char	O
*	O
src	pointer
,	O
size_t	long
length	long
)	O
{	O
strncpy	function
(	O
dest	pointer
,	O
src	pointer
,	O
length	long
)	O
;	O
dest	pointer
[	O
length	long
]	O
=	O
'\0'	O
;	O
return	O
dest	pointer
;	O
}	O
char	O
*	O
osip_strdup	function
(	O
const	O
char	O
*	O
ch	pointer
)	O
{	O
char	O
*	O
copy	pointer
;	O
size_t	long
length	long
;	O
if	O
(	O
ch	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
length	long
=	O
strlen	function
(	O
ch	pointer
)	O
;	O
copy	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
length	long
+	O
1	int
)	O
;	O
if	O
(	O
copy	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
osip_strncpy	function
(	O
copy	pointer
,	O
ch	pointer
,	O
length	long
)	O
;	O
return	O
copy	pointer
;	O
}	O
int	O
osip_atoi	function
(	O
const	O
char	O
*	O
number	pointer
)	O
{	O
long	O
int	O
i	int
;	O
if	O
(	O
number	pointer
==	O
NULL	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
i	int
=	O
strtol	function
(	O
number	pointer
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
i	int
==	O
LONG_MIN	O
||	O
i	int
==	O
LONG_MAX	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
return	O
i	int
;	O
return	O
atoi	function
(	O
number	pointer
)	O
;	O
}	O
void	O
osip_usleep	function
(	O
int	O
useconds	int
)	O
{	O
struct	O
timeval	struct
delay	struct
;	O
int	O
sec	int
;	O
sec	int
=	O
(	O
int	O
)	O
useconds	int
/	O
1000000	int
;	O
if	O
(	O
sec	int
>	O
0	int
)	O
{	O
delay	struct
.	O
tv_sec	long
=	O
sec	int
;	O
delay	struct
.	O
tv_usec	long
=	O
0	int
;	O
}	O
else	O
{	O
delay	struct
.	O
tv_sec	long
=	O
0	int
;	O
delay	struct
.	O
tv_usec	long
=	O
useconds	int
;	O
}	O
select	function
(	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
&	O
delay	struct
)	O
;	O
}	O
char	O
*	O
osip_strdup_without_quote	function
(	O
const	O
char	O
*	O
ch	pointer
)	O
{	O
char	O
*	O
copy	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
strlen	function
(	O
ch	pointer
)	O
+	O
1	int
)	O
;	O
if	O
(	O
copy	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
(	O
*	O
ch	pointer
==	O
'\"'	O
)	O
)	O
{	O
osip_strncpy	function
(	O
copy	pointer
,	O
ch	pointer
+	O
1	int
,	O
strlen	function
(	O
ch	pointer
+	O
1	int
)	O
)	O
;	O
osip_strncpy	function
(	O
copy	pointer
+	O
strlen	function
(	O
copy	pointer
)	O
-	O
1	int
,	O
"\0"	pointer
,	O
1	int
)	O
;	O
}	O
else	O
osip_strncpy	function
(	O
copy	pointer
,	O
ch	pointer
,	O
strlen	function
(	O
ch	pointer
)	O
)	O
;	O
return	O
copy	pointer
;	O
}	O
int	O
osip_tolower	function
(	O
char	O
*	O
word	pointer
)	O
{	O
for	O
(	O
;	O
*	O
word	pointer
;	O
word	pointer
++	O
)	O
*	O
word	pointer
=	O
(	O
char	O
)	O
tolower	function
(	O
*	O
word	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_strcasecmp	function
(	O
const	O
char	O
*	O
s1	pointer
,	O
const	O
char	O
*	O
s2	pointer
)	O
{	O
return	O
strcasecmp	function
(	O
s1	pointer
,	O
s2	pointer
)	O
;	O
}	O
int	O
osip_strncasecmp	function
(	O
const	O
char	O
*	O
s1	pointer
,	O
const	O
char	O
*	O
s2	pointer
,	O
size_t	long
len	long
)	O
{	O
return	O
strncasecmp	function
(	O
s1	pointer
,	O
s2	pointer
,	O
len	long
)	O
;	O
}	O
char	O
*	O
osip_strcasestr	function
(	O
const	O
char	O
*	O
haystack	pointer
,	O
const	O
char	O
*	O
needle	pointer
)	O
{	O
char	O
c	char
,	O
sc	char
;	O
size_t	long
len	long
;	O
if	O
(	O
(	O
c	char
=	O
*	O
needle	pointer
++	O
)	O
!=	O
0	int
)	O
{	O
c	char
=	O
tolower	function
(	O
(	O
unsigned	O
char	O
)	O
c	char
)	O
;	O
len	long
=	O
strlen	function
(	O
needle	pointer
)	O
;	O
do	O
{	O
do	O
{	O
if	O
(	O
(	O
sc	char
=	O
*	O
haystack	pointer
++	O
)	O
==	O
0	int
)	O
return	O
(	O
NULL	O
)	O
;	O
}	O
while	O
(	O
(	O
char	O
)	O
tolower	function
(	O
(	O
unsigned	O
char	O
)	O
sc	char
)	O
!=	O
c	char
)	O
;	O
}	O
while	O
(	O
osip_strncasecmp	function
(	O
haystack	pointer
,	O
needle	pointer
,	O
len	long
)	O
!=	O
0	int
)	O
;	O
haystack	pointer
--	O
;	O
}	O
return	O
(	O
char	O
*	O
)	O
haystack	pointer
;	O
}	O
int	O
osip_clrspace	function
(	O
char	O
*	O
word	pointer
)	O
{	O
char	O
*	O
pbeg	pointer
;	O
char	O
*	O
pend	pointer
;	O
size_t	long
len	long
;	O
if	O
(	O
word	pointer
==	O
NULL	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
if	O
(	O
*	O
word	pointer
==	O
'\0'	O
)	O
return	O
OSIP_SUCCESS	int
;	O
len	long
=	O
strlen	function
(	O
word	pointer
)	O
;	O
pbeg	pointer
=	O
word	pointer
;	O
pbeg	pointer
+=	O
strspn	function
(	O
pbeg	pointer
,	O
" \r\n\t"	pointer
)	O
;	O
pend	pointer
=	O
word	pointer
+	O
len	long
-	O
1	int
;	O
while	O
(	O
(	O
' '	O
==	O
*	O
pend	pointer
)	O
||	O
(	O
'\r'	O
==	O
*	O
pend	pointer
)	O
||	O
(	O
'\n'	O
==	O
*	O
pend	pointer
)	O
||	O
(	O
'\t'	O
==	O
*	O
pend	pointer
)	O
)	O
{	O
pend	pointer
--	O
;	O
if	O
(	O
pend	pointer
<	O
pbeg	pointer
)	O
{	O
*	O
word	pointer
=	O
'\0'	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
}	O
if	O
(	O
pend	pointer
+	O
1	int
<=	O
word	pointer
+	O
(	O
len	long
-	O
1	int
)	O
)	O
pend	pointer
[	O
1	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
pbeg	pointer
!=	O
word	pointer
)	O
memmove	function
(	O
word	pointer
,	O
pbeg	pointer
,	O
pend	pointer
-	O
pbeg	pointer
+	O
2	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
__osip_set_next_token	function
(	O
char	O
*	O
*	O
dest	pointer
,	O
char	O
*	O
buf	pointer
,	O
int	O
end_separator	int
,	O
char	O
*	O
*	O
next	pointer
)	O
{	O
char	O
*	O
sep	pointer
;	O
*	O
next	pointer
=	O
NULL	O
;	O
sep	pointer
=	O
buf	pointer
;	O
while	O
(	O
(	O
*	O
sep	pointer
!=	O
end_separator	int
)	O
&&	O
(	O
*	O
sep	pointer
!=	O
'\0'	O
)	O
&&	O
(	O
*	O
sep	pointer
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
sep	pointer
!=	O
'\n'	O
)	O
)	O
sep	pointer
++	O
;	O
if	O
(	O
(	O
*	O
sep	pointer
==	O
'\r'	O
)	O
||	O
(	O
*	O
sep	pointer
==	O
'\n'	O
)	O
)	O
{	O
if	O
(	O
*	O
sep	pointer
!=	O
end_separator	int
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
}	O
if	O
(	O
*	O
sep	pointer
==	O
'\0'	O
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
if	O
(	O
sep	pointer
==	O
buf	pointer
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
*	O
dest	pointer
=	O
osip_malloc	O
(	O
sep	pointer
-	O
(	O
buf	pointer
)	O
+	O
1	int
)	O
;	O
if	O
(	O
*	O
dest	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	function
(	O
*	O
dest	pointer
,	O
buf	pointer
,	O
sep	pointer
-	O
buf	pointer
)	O
;	O
*	O
next	pointer
=	O
sep	pointer
+	O
1	int
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
const	O
char	O
*	O
__osip_quote_find	function
(	O
const	O
char	O
*	O
qstring	pointer
)	O
{	O
const	O
char	O
*	O
quote	pointer
;	O
quote	pointer
=	O
strchr	function
(	O
qstring	pointer
,	O
'"'	O
)	O
;	O
if	O
(	O
quote	pointer
==	O
qstring	pointer
)	O
return	O
quote	pointer
;	O
if	O
(	O
quote	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
{	O
int	O
i	int
=	O
1	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
0	int
==	O
strncmp	function
(	O
quote	pointer
-	O
i	int
,	O
"\\"	pointer
,	O
1	int
)	O
)	O
i	int
++	O
;	O
else	O
{	O
if	O
(	O
i	int
%	O
2	int
==	O
1	int
)	O
return	O
quote	pointer
;	O
quote	pointer
=	O
strchr	function
(	O
quote	pointer
+	O
1	int
,	O
'"'	O
)	O
;	O
if	O
(	O
quote	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
i	int
=	O
1	int
;	O
}	O
if	O
(	O
quote	pointer
-	O
i	int
==	O
qstring	pointer
-	O
1	int
)	O
{	O
if	O
(	O
*	O
qstring	pointer
==	O
'\\'	O
)	O
i	int
++	O
;	O
if	O
(	O
i	int
%	O
2	int
==	O
0	int
)	O
return	O
quote	pointer
;	O
else	O
{	O
qstring	pointer
=	O
quote	pointer
+	O
1	int
;	O
quote	pointer
=	O
strchr	function
(	O
quote	pointer
+	O
1	int
,	O
'"'	O
)	O
;	O
if	O
(	O
quote	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
i	int
=	O
1	int
;	O
}	O
}	O
}	O
return	O
NULL	O
;	O
}	O
}	O
char	O
*	O
osip_enquote	function
(	O
const	O
char	O
*	O
s	pointer
)	O
{	O
char	O
*	O
rtn	pointer
;	O
char	O
*	O
t	pointer
;	O
t	pointer
=	O
rtn	pointer
=	O
osip_malloc	O
(	O
strlen	function
(	O
s	pointer
)	O
*	O
2	int
+	O
3	int
)	O
;	O
if	O
(	O
rtn	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
*	O
t	pointer
++	O
=	O
'"'	O
;	O
for	O
(	O
;	O
*	O
s	pointer
!=	O
'\0'	O
;	O
s	pointer
++	O
)	O
{	O
switch	O
(	O
*	O
s	pointer
)	O
{	O
case	O
'"'	O
:	O
case	O
'\\'	O
:	O
case	O
0x7f	int
:	O
*	O
t	pointer
++	O
=	O
'\\'	O
;	O
*	O
t	pointer
++	O
=	O
*	O
s	pointer
;	O
break	O
;	O
case	O
'\n'	O
:	O
case	O
'\r'	O
:	O
*	O
t	pointer
++	O
=	O
' '	O
;	O
break	O
;	O
default	O
:	O
*	O
t	pointer
++	O
=	O
*	O
s	pointer
;	O
break	O
;	O
}	O
}	O
*	O
t	pointer
++	O
=	O
'"'	O
;	O
*	O
t	pointer
++	O
=	O
'\0'	O
;	O
return	O
rtn	pointer
;	O
}	O
void	O
osip_dequote	function
(	O
char	O
*	O
s	pointer
)	O
{	O
size_t	long
len	long
;	O
if	O
(	O
*	O
s	pointer
==	O
'\0'	O
)	O
return	O
;	O
if	O
(	O
*	O
s	pointer
!=	O
'"'	O
)	O
return	O
;	O
len	long
=	O
strlen	function
(	O
s	pointer
)	O
;	O
memmove	function
(	O
s	pointer
,	O
s	pointer
+	O
1	int
,	O
len	long
--	O
)	O
;	O
if	O
(	O
len	long
>	O
0	int
&&	O
s	pointer
[	O
len	long
-	O
1	int
]	O
==	O
'"'	O
)	O
s	pointer
[	O
--	O
len	long
]	O
=	O
'\0'	O
;	O
for	O
(	O
;	O
*	O
s	pointer
!=	O
'\0'	O
;	O
s	pointer
++	O
,	O
len	long
--	O
)	O
{	O
if	O
(	O
*	O
s	pointer
==	O
'\\'	O
)	O
memmove	function
(	O
s	pointer
,	O
s	pointer
+	O
1	int
,	O
len	long
--	O
)	O
;	O
}	O
}	O
int	O
osip_trace_initialize	function
(	O
osip_trace_level_t	enum
level	enum
,	O
FILE	struct
*	O
file	pointer
)	O
{	O
osip_trace_level_t	enum
i	int
=	O
TRACE_LEVEL0	int
;	O
logfile	pointer
=	O
NULL	O
;	O
if	O
(	O
file	pointer
!=	O
NULL	O
)	O
logfile	pointer
=	O
file	pointer
;	O
else	O
logfile	pointer
=	O
stdout	pointer
;	O
while	O
(	O
i	int
<	O
END_TRACE_LEVEL	int
)	O
{	O
if	O
(	O
i	int
<	O
level	enum
)	O
tracing_table	array
[	O
i	int
]	O
=	O
LOG_TRUE	int
;	O
else	O
tracing_table	array
[	O
i	int
]	O
=	O
LOG_FALSE	int
;	O
i	int
++	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
osip_trace_initialize_syslog	function
(	O
osip_trace_level_t	enum
level	enum
,	O
char	O
*	O
ident	pointer
)	O
{	O
osip_trace_level_t	enum
i	int
=	O
TRACE_LEVEL0	int
;	O
openlog	function
(	O
ident	pointer
,	O
LOG_CONS	int
|	O
LOG_PID	int
,	O
LOG_DAEMON	O
)	O
;	O
use_syslog	int
=	O
1	int
;	O
while	O
(	O
i	int
<	O
END_TRACE_LEVEL	int
)	O
{	O
if	O
(	O
i	int
<	O
level	enum
)	O
tracing_table	array
[	O
i	int
]	O
=	O
LOG_TRUE	int
;	O
else	O
tracing_table	array
[	O
i	int
]	O
=	O
LOG_FALSE	int
;	O
i	int
++	O
;	O
}	O
}	O
void	O
osip_trace_enable_until_level	function
(	O
osip_trace_level_t	enum
level	enum
)	O
{	O
osip_trace_level_t	enum
i	int
=	O
0	int
;	O
while	O
(	O
i	int
<	O
END_TRACE_LEVEL	int
)	O
{	O
if	O
(	O
i	int
<	O
level	enum
)	O
tracing_table	array
[	O
i	int
]	O
=	O
LOG_TRUE	int
;	O
else	O
tracing_table	array
[	O
i	int
]	O
=	O
LOG_FALSE	int
;	O
i	int
++	O
;	O
}	O
}	O
void	O
osip_trace_initialize_func	function
(	O
osip_trace_level_t	enum
level	enum
,	O
osip_trace_func_t	function
*	O
func	pointer
)	O
{	O
osip_trace_level_t	enum
i	int
=	O
0	int
;	O
trace_func	pointer
=	O
func	pointer
;	O
while	O
(	O
i	int
<	O
END_TRACE_LEVEL	int
)	O
{	O
if	O
(	O
i	int
<	O
level	enum
)	O
tracing_table	array
[	O
i	int
]	O
=	O
LOG_TRUE	int
;	O
else	O
tracing_table	array
[	O
i	int
]	O
=	O
LOG_FALSE	int
;	O
i	int
++	O
;	O
}	O
}	O
void	O
osip_trace_enable_level	function
(	O
osip_trace_level_t	enum
level	enum
)	O
{	O
tracing_table	array
[	O
level	enum
]	O
=	O
LOG_TRUE	int
;	O
}	O
void	O
osip_trace_disable_level	function
(	O
osip_trace_level_t	enum
level	enum
)	O
{	O
tracing_table	array
[	O
level	enum
]	O
=	O
LOG_FALSE	int
;	O
}	O
int	O
osip_is_trace_level_activate	function
(	O
osip_trace_level_t	enum
level	enum
)	O
{	O
return	O
tracing_table	array
[	O
level	enum
]	O
;	O
}	O
int	O
osip_trace	function
(	O
char	O
*	O
filename_long	pointer
,	O
int	O
li	pointer
,	O
osip_trace_level_t	enum
level	enum
,	O
FILE	struct
*	O
f	pointer
,	O
char	O
*	O
chfr	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
int	O
relative_time	int
=	O
0	int
;	O
char	O
*	O
fi	pointer
=	O
NULL	O
;	O
static	O
struct	O
timeval	struct
start	struct
=	O
{	O
0	int
,	O
0	int
}	O
;	O
struct	O
timeval	struct
now	struct
;	O
if	O
(	O
start	struct
.	O
tv_sec	long
==	O
0	int
&&	O
start	struct
.	O
tv_usec	long
==	O
0	int
)	O
{	O
__osip_port_gettimeofday	O
(	O
&	O
start	struct
,	O
NULL	O
)	O
;	O
}	O
__osip_port_gettimeofday	O
(	O
&	O
now	struct
,	O
NULL	O
)	O
;	O
relative_time	int
=	O
(	O
int	O
)	O
(	O
1000	int
*	O
(	O
now	struct
.	O
tv_sec	long
-	O
start	struct
.	O
tv_sec	long
)	O
)	O
;	O
if	O
(	O
now	struct
.	O
tv_usec	long
-	O
start	struct
.	O
tv_usec	long
>	O
0	int
)	O
relative_time	int
=	O
relative_time	int
+	O
(	O
(	O
now	struct
.	O
tv_usec	long
-	O
start	struct
.	O
tv_usec	long
)	O
/	O
1000	int
)	O
;	O
else	O
relative_time	int
=	O
relative_time	int
-	O
(	O
(	O
start	struct
.	O
tv_usec	long
-	O
now	struct
.	O
tv_usec	long
)	O
/	O
1000	int
)	O
;	O
if	O
(	O
filename_long	pointer
!=	O
NULL	O
)	O
{	O
fi	pointer
=	O
strrchr	function
(	O
filename_long	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
fi	pointer
==	O
NULL	O
)	O
fi	pointer
=	O
strrchr	function
(	O
filename_long	pointer
,	O
'\\'	O
)	O
;	O
if	O
(	O
fi	pointer
!=	O
NULL	O
)	O
fi	pointer
++	O
;	O
if	O
(	O
fi	pointer
==	O
NULL	O
)	O
fi	pointer
=	O
filename_long	pointer
;	O
}	O
if	O
(	O
logfile	pointer
==	O
NULL	O
&&	O
use_syslog	int
==	O
0	int
&&	O
trace_func	pointer
==	O
NULL	O
)	O
{	O
return	O
1	int
;	O
}	O
if	O
(	O
tracing_table	array
[	O
level	enum
]	O
==	O
LOG_FALSE	int
)	O
return	O
OSIP_SUCCESS	int
;	O
if	O
(	O
f	pointer
==	O
NULL	O
&&	O
trace_func	pointer
==	O
NULL	O
)	O
f	pointer
=	O
logfile	pointer
;	O
VA_START	O
(	O
ap	array
,	O
chfr	pointer
)	O
;	O
if	O
(	O
0	int
)	O
{	O
}	O
else	O
if	O
(	O
f	pointer
&&	O
use_syslog	int
==	O
0	int
)	O
{	O
if	O
(	O
level	enum
==	O
OSIP_FATAL	O
)	O
fprintf	function
(	O
f	pointer
,	O
"| FATAL | %i <%s: %i> "	pointer
,	O
relative_time	int
,	O
fi	pointer
,	O
li	pointer
)	O
;	O
else	O
if	O
(	O
level	enum
==	O
OSIP_BUG	O
)	O
fprintf	function
(	O
f	pointer
,	O
"|  BUG  | %i <%s: %i> "	pointer
,	O
relative_time	int
,	O
fi	pointer
,	O
li	pointer
)	O
;	O
else	O
if	O
(	O
level	enum
==	O
OSIP_ERROR	O
)	O
fprintf	function
(	O
f	pointer
,	O
"| ERROR | %i <%s: %i> "	pointer
,	O
relative_time	int
,	O
fi	pointer
,	O
li	pointer
)	O
;	O
else	O
if	O
(	O
level	enum
==	O
OSIP_WARNING	O
)	O
fprintf	function
(	O
f	pointer
,	O
"|WARNING| %i <%s: %i> "	pointer
,	O
relative_time	int
,	O
fi	pointer
,	O
li	pointer
)	O
;	O
else	O
if	O
(	O
level	enum
==	O
OSIP_INFO1	O
)	O
fprintf	function
(	O
f	pointer
,	O
"| INFO1 | %i <%s: %i> "	pointer
,	O
relative_time	int
,	O
fi	pointer
,	O
li	pointer
)	O
;	O
else	O
if	O
(	O
level	enum
==	O
OSIP_INFO2	O
)	O
fprintf	function
(	O
f	pointer
,	O
"| INFO2 | %i <%s: %i> "	pointer
,	O
relative_time	int
,	O
fi	pointer
,	O
li	pointer
)	O
;	O
else	O
if	O
(	O
level	enum
==	O
OSIP_INFO3	O
)	O
fprintf	function
(	O
f	pointer
,	O
"| INFO3 | %i <%s: %i> "	pointer
,	O
relative_time	int
,	O
fi	pointer
,	O
li	pointer
)	O
;	O
else	O
if	O
(	O
level	enum
==	O
OSIP_INFO4	O
)	O
fprintf	function
(	O
f	pointer
,	O
"| INFO4 | %i <%s: %i> "	pointer
,	O
relative_time	int
,	O
fi	pointer
,	O
li	pointer
)	O
;	O
vfprintf	function
(	O
f	pointer
,	O
chfr	pointer
,	O
ap	array
)	O
;	O
fflush	function
(	O
f	pointer
)	O
;	O
}	O
else	O
if	O
(	O
trace_func	pointer
)	O
{	O
trace_func	pointer
(	O
fi	pointer
,	O
li	pointer
,	O
level	enum
,	O
chfr	pointer
,	O
ap	array
)	O
;	O
}	O
else	O
if	O
(	O
use_syslog	int
==	O
1	int
)	O
{	O
char	O
buffer	array
[	O
MAX_LENGTH_TR	int
]	O
;	O
int	O
in	int
=	O
0	int
;	O
memset	function
(	O
buffer	array
,	O
0	int
,	O
sizeof	O
(	O
buffer	array
)	O
)	O
;	O
if	O
(	O
level	enum
==	O
OSIP_FATAL	O
)	O
in	int
=	O
snprintf	function
(	O
buffer	array
,	O
MAX_LENGTH_TR	int
-	O
1	int
,	O
"| FATAL | <%s: %i> "	pointer
,	O
fi	pointer
,	O
li	pointer
)	O
;	O
else	O
if	O
(	O
level	enum
==	O
OSIP_BUG	O
)	O
in	int
=	O
snprintf	function
(	O
buffer	array
,	O
MAX_LENGTH_TR	int
-	O
1	int
,	O
"|  BUG  | <%s: %i> "	pointer
,	O
fi	pointer
,	O
li	pointer
)	O
;	O
else	O
if	O
(	O
level	enum
==	O
OSIP_ERROR	O
)	O
in	int
=	O
snprintf	function
(	O
buffer	array
,	O
MAX_LENGTH_TR	int
-	O
1	int
,	O
"| ERROR | <%s: %i> "	pointer
,	O
fi	pointer
,	O
li	pointer
)	O
;	O
else	O
if	O
(	O
level	enum
==	O
OSIP_WARNING	O
)	O
in	int
=	O
snprintf	function
(	O
buffer	array
,	O
MAX_LENGTH_TR	int
-	O
1	int
,	O
"|WARNING| <%s: %i> "	pointer
,	O
fi	pointer
,	O
li	pointer
)	O
;	O
else	O
if	O
(	O
level	enum
==	O
OSIP_INFO1	O
)	O
in	int
=	O
snprintf	function
(	O
buffer	array
,	O
MAX_LENGTH_TR	int
-	O
1	int
,	O
"| INFO1 | <%s: %i> "	pointer
,	O
fi	pointer
,	O
li	pointer
)	O
;	O
else	O
if	O
(	O
level	enum
==	O
OSIP_INFO2	O
)	O
in	int
=	O
snprintf	function
(	O
buffer	array
,	O
MAX_LENGTH_TR	int
-	O
1	int
,	O
"| INFO2 | <%s: %i> "	pointer
,	O
fi	pointer
,	O
li	pointer
)	O
;	O
else	O
if	O
(	O
level	enum
==	O
OSIP_INFO3	O
)	O
in	int
=	O
snprintf	function
(	O
buffer	array
,	O
MAX_LENGTH_TR	int
-	O
1	int
,	O
"| INFO3 | <%s: %i> "	pointer
,	O
fi	pointer
,	O
li	pointer
)	O
;	O
else	O
if	O
(	O
level	enum
==	O
OSIP_INFO4	O
)	O
in	int
=	O
snprintf	function
(	O
buffer	array
,	O
MAX_LENGTH_TR	int
-	O
1	int
,	O
"| INFO4 | <%s: %i> "	pointer
,	O
fi	pointer
,	O
li	pointer
)	O
;	O
vsnprintf	function
(	O
buffer	array
+	O
in	int
,	O
MAX_LENGTH_TR	int
-	O
1	int
-	O
in	int
,	O
chfr	pointer
,	O
ap	array
)	O
;	O
if	O
(	O
level	enum
==	O
OSIP_FATAL	O
)	O
syslog	function
(	O
LOG_ERR	int
,	O
"%s"	pointer
,	O
buffer	array
)	O
;	O
else	O
if	O
(	O
level	enum
==	O
OSIP_BUG	O
)	O
syslog	function
(	O
LOG_ERR	int
,	O
"%s"	pointer
,	O
buffer	array
)	O
;	O
else	O
if	O
(	O
level	enum
==	O
OSIP_ERROR	O
)	O
syslog	function
(	O
LOG_ERR	int
,	O
"%s"	pointer
,	O
buffer	array
)	O
;	O
else	O
if	O
(	O
level	enum
==	O
OSIP_WARNING	O
)	O
syslog	function
(	O
LOG_WARNING	int
,	O
"%s"	pointer
,	O
buffer	array
)	O
;	O
else	O
if	O
(	O
level	enum
==	O
OSIP_INFO1	O
)	O
syslog	function
(	O
LOG_INFO	int
,	O
"%s"	pointer
,	O
buffer	array
)	O
;	O
else	O
if	O
(	O
level	enum
==	O
OSIP_INFO2	O
)	O
syslog	function
(	O
LOG_INFO	int
,	O
"%s"	pointer
,	O
buffer	array
)	O
;	O
else	O
if	O
(	O
level	enum
==	O
OSIP_INFO3	O
)	O
syslog	function
(	O
LOG_DEBUG	int
,	O
"%s"	pointer
,	O
buffer	array
)	O
;	O
else	O
if	O
(	O
level	enum
==	O
OSIP_INFO4	O
)	O
syslog	function
(	O
LOG_DEBUG	int
,	O
"%s"	pointer
,	O
buffer	array
)	O
;	O
}	O
va_end	O
(	O
ap	array
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
osip_set_allocators	function
(	O
osip_malloc_func_t	function
*	O
malloc_func	pointer
,	O
osip_realloc_func_t	function
*	O
realloc_func	pointer
,	O
osip_free_func_t	function
*	O
free_func	pointer
)	O
{	O
osip_malloc_func	pointer
=	O
malloc_func	pointer
;	O
osip_realloc_func	pointer
=	O
realloc_func	pointer
;	O
osip_free_func	pointer
=	O
free_func	pointer
;	O
}	O
unsigned	O
long	O
osip_hash	function
(	O
const	O
char	O
*	O
str	pointer
)	O
{	O
unsigned	O
int	O
hash	int
=	O
5381	int
;	O
int	O
c	char
;	O
while	O
(	O
(	O
c	char
=	O
*	O
str	pointer
++	O
)	O
)	O
hash	int
=	O
(	O
(	O
hash	int
<<	O
5	int
)	O
+	O
hash	int
)	O
+	O
c	char
;	O
return	O
hash	int
&	O
0xFFFFFFFFu	int
;	O
}	O
char	O
*	O
osip_str_append	function
(	O
char	O
*	O
dst	pointer
,	O
const	O
char	O
*	O
src	pointer
)	O
{	O
while	O
(	O
*	O
src	pointer
!=	O
'\0'	O
)	O
{	O
*	O
dst	pointer
=	O
*	O
src	pointer
;	O
src	pointer
++	O
;	O
dst	pointer
++	O
;	O
}	O
*	O
dst	pointer
=	O
'\0'	O
;	O
return	O
dst	pointer
;	O
}	O
char	O
*	O
osip_strn_append	function
(	O
char	O
*	O
dst	pointer
,	O
const	O
char	O
*	O
src	pointer
,	O
size_t	long
len	long
)	O
{	O
memmove	function
(	O
(	O
void	O
*	O
)	O
dst	pointer
,	O
(	O
void	O
*	O
)	O
src	pointer
,	O
len	long
)	O
;	O
dst	pointer
+=	O
len	long
;	O
*	O
dst	pointer
=	O
'\0'	O
;	O
return	O
dst	pointer
;	O
}	O
char	O
*	O
osip_clrncpy	function
(	O
char	O
*	O
dst	pointer
,	O
const	O
char	O
*	O
src	pointer
,	O
size_t	long
len	long
)	O
{	O
const	O
char	O
*	O
pbeg	pointer
;	O
const	O
char	O
*	O
pend	pointer
;	O
char	O
*	O
p	pointer
;	O
size_t	long
spaceless_length	long
;	O
if	O
(	O
src	pointer
==	O
NULL	O
||	O
len	long
==	O
0	int
)	O
{	O
*	O
dst	pointer
=	O
'\0'	O
;	O
return	O
NULL	O
;	O
}	O
pbeg	pointer
=	O
src	pointer
;	O
pbeg	pointer
+=	O
strspn	function
(	O
pbeg	pointer
,	O
" \r\n\t"	pointer
)	O
;	O
pend	pointer
=	O
src	pointer
+	O
len	long
-	O
1	int
;	O
while	O
(	O
(	O
' '	O
==	O
*	O
pend	pointer
)	O
||	O
(	O
'\r'	O
==	O
*	O
pend	pointer
)	O
||	O
(	O
'\n'	O
==	O
*	O
pend	pointer
)	O
||	O
(	O
'\t'	O
==	O
*	O
pend	pointer
)	O
)	O
{	O
pend	pointer
--	O
;	O
if	O
(	O
pend	pointer
<	O
pbeg	pointer
)	O
{	O
*	O
dst	pointer
=	O
'\0'	O
;	O
return	O
dst	pointer
;	O
}	O
}	O
spaceless_length	long
=	O
pend	pointer
-	O
pbeg	pointer
+	O
1	int
;	O
memmove	function
(	O
dst	pointer
,	O
pbeg	pointer
,	O
spaceless_length	long
)	O
;	O
p	pointer
=	O
dst	pointer
+	O
spaceless_length	long
;	O
*	O
p	pointer
=	O
'\0'	O
;	O
if	O
(	O
__builtin_expect	O
(	O
++	O
spaceless_length	long
<	O
len	long
,	O
0	int
)	O
)	O
{	O
do	O
*	O
++	O
p	pointer
=	O
'\0'	O
;	O
while	O
(	O
++	O
spaceless_length	long
<	O
len	long
)	O
;	O
}	O
return	O
dst	pointer
;	O
}	O
