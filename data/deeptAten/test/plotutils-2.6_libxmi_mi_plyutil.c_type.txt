static	O
void	O
miInsertEdgeInET	function
(	O
EdgeTable	O
*	O
ET	pointer
,	O
EdgeTableEntry	O
*	O
ETE	pointer
,	O
int	O
scanline	int
,	O
ScanLineListBlock	O
*	O
*	pointer
SLLBlock	pointer
,	O
int	O
*	O
iSLLBlock	pointer
)	O
{	O
EdgeTableEntry	O
*	O
start	pointer
,	O
*	O
prev	pointer
;	O
ScanLineList	O
*	O
pSLL	pointer
,	O
*	O
pPrevSLL	pointer
;	O
ScanLineListBlock	O
*	O
tmpSLLBlock	pointer
;	O
pPrevSLL	O
=	O
&	pointer
ET	pointer
->	O
scanlines	struct
;	O
pSLL	O
=	O
pPrevSLL	pointer
->	O
next	pointer
;	O
while	pointer
(	O
pSLL	O
&&	O
(	int
pSLL	O
->	O
scanline	pointer
<	O
scanline	int
)	O
)	O
{	O
pPrevSLL	O
=	O
pSLL	pointer
;	O
pSLL	O
=	O
pSLL	int
->	O
next	pointer
;	O
}	pointer
if	O
(	O
(	pointer
!	O
pSLL	O
)	O
||	O
(	O
pSLL	O
->	O
scanline	pointer
>	O
scanline	int
)	O
)	O
{	O
if	O
(	O
*	pointer
iSLLBlock	pointer
>	O
SLLSPERBLOCK	O
-	O
1	int
)	O
{	O
tmpSLLBlock	O
=	O
(	int
ScanLineListBlock	O
*	O
)	O
mi_xmalloc	O
(	O
sizeof	O
(	O
ScanLineListBlock	O
)	O
)	O
;	O
(	O
*	O
SLLBlock	pointer
)	O
->	O
next	pointer
=	O
tmpSLLBlock	pointer
;	O
tmpSLLBlock	pointer
->	O
next	pointer
=	O
(	pointer
ScanLineListBlock	pointer
*	O
)	O
NULL	pointer
;	O
*	O
SLLBlock	pointer
=	O
tmpSLLBlock	O
;	O
*	O
iSLLBlock	pointer
=	O
0	int
;	O
}	O
pSLL	O
=	O
&	function
(	pointer
(	O
*	O
SLLBlock	O
)	O
->	O
SLLs	pointer
[	O
(	O
*	O
iSLLBlock	pointer
)	O
++	O
]	O
)	O
;	O
pSLL	O
->	O
next	pointer
=	O
pPrevSLL	pointer
->	O
next	pointer
;	O
pSLL	pointer
->	O
edgelist	pointer
=	O
(	pointer
EdgeTableEntry	O
*	O
)	O
NULL	pointer
;	O
pPrevSLL	O
->	O
next	pointer
=	O
pSLL	pointer
;	O
}	pointer
pSLL	O
->	O
scanline	pointer
=	O
scanline	int
;	O
prev	pointer
=	O
(	pointer
EdgeTableEntry	O
*	O
)	O
NULL	pointer
;	O
start	O
=	O
pSLL	int
->	O
edgelist	pointer
;	O
while	pointer
(	O
start	pointer
&&	O
(	int
start	O
->	O
bres	int
.	O
minor_axis	int
<	O
ETE	int
->	O
bres	pointer
.	O
minor_axis	int
)	O
)	O
{	O
prev	O
=	O
start	pointer
;	O
start	O
=	O
start	int
->	O
next	int
;	O
}	pointer
ETE	O
->	O
next	pointer
=	O
start	pointer
;	O
if	O
(	O
prev	pointer
)	O
prev	O
->	O
next	pointer
=	O
ETE	pointer
;	O
else	pointer
pSLL	O
->	O
edgelist	pointer
=	O
ETE	pointer
;	O
}	pointer
void	O
miCreateETandAET	function
(	O
int	O
count	O
,	O
const	O
miPoint	O
*	O
pts	pointer
,	O
EdgeTable	O
*	O
ET	pointer
,	O
EdgeTableEntry	O
*	O
AET	pointer
,	O
EdgeTableEntry	O
*	O
pETEs	pointer
,	O
ScanLineListBlock	O
*	O
pSLLBlock	pointer
)	O
{	O
const	O
miPoint	O
*	O
top	pointer
,	O
*	O
bottom	pointer
;	O
const	O
miPoint	O
*	O
PrevPt	pointer
,	O
*	O
CurrPt	pointer
;	O
int	O
iSLLBlock	int
=	O
0	int
;	O
int	O
dy	int
;	O
if	O
(	O
count	O
<	O
2	int
)	O
return	O
;	int
AET	O
->	O
next	pointer
=	O
(	O
EdgeTableEntry	O
*	O
)	O
NULL	pointer
;	O
AET	O
->	O
back	pointer
=	O
(	O
EdgeTableEntry	O
*	O
)	O
NULL	pointer
;	O
AET	O
->	O
nextWETE	pointer
=	O
(	O
EdgeTableEntry	O
*	O
)	O
NULL	pointer
;	O
AET	O
->	O
bres	pointer
.	O
minor_axis	int
=	O
INT_MIN	pointer
;	O
ET	pointer
->	O
scanlines	pointer
.	O
next	pointer
=	O
(	pointer
ScanLineList	pointer
*	O
)	O
NULL	pointer
;	O
ET	O
->	O
ymax	pointer
=	O
INT_MIN	int
;	O
ET	pointer
->	O
ymin	pointer
=	O
INT_MAX	int
;	O
pSLLBlock	pointer
->	O
next	pointer
=	O
(	pointer
ScanLineListBlock	pointer
*	O
)	O
NULL	pointer
;	O
PrevPt	O
=	O
&	int
pts	pointer
[	O
count	int
-	O
1	int
]	O
;	O
while	O
(	O
count	int
--	O
)	int
{	O
CurrPt	O
=	O
pts	int
++	O
;	O
if	O
(	O
PrevPt	int
->	O
y	int
>	O
CurrPt	int
->	O
y	pointer
)	O
{	O
bottom	pointer
=	O
PrevPt	int
,	O
top	pointer
=	O
CurrPt	int
;	O
pETEs	pointer
->	O
ClockWise	pointer
=	O
false	int
;	O
}	pointer
else	O
{	O
bottom	O
=	O
CurrPt	int
,	O
top	pointer
=	O
PrevPt	int
;	O
pETEs	pointer
->	O
ClockWise	pointer
=	O
true	int
;	O
}	pointer
if	O
(	O
bottom	O
->	O
y	pointer
!=	O
top	O
->	O
y	pointer
)	O
{	O
pETEs	O
->	O
ymax	int
=	O
bottom	int
->	O
y	pointer
-	O
1	int
;	O
dy	pointer
=	O
bottom	int
->	O
y	pointer
-	O
top	int
->	O
y	pointer
;	O
BRESINITPGONSTRUCT	O
(	O
dy	int
,	O
top	int
->	O
x	int
,	O
bottom	pointer
->	O
x	pointer
,	O
pETEs	pointer
->	O
bres	pointer
)	O
;	O
miInsertEdgeInET	O
(	O
ET	pointer
,	O
pETEs	pointer
,	O
top	pointer
->	O
y	pointer
,	O
&	int
pSLLBlock	pointer
,	O
&	O
iSLLBlock	pointer
)	O
;	O
ET	O
->	O
ymax	pointer
=	O
IMAX	O
(	O
ET	pointer
->	O
ymax	pointer
,	O
PrevPt	pointer
->	O
y	pointer
)	O
;	O
ET	O
->	O
ymin	pointer
=	O
IMIN	int
(	O
ET	pointer
->	O
ymin	pointer
,	O
PrevPt	pointer
->	O
y	pointer
)	O
;	O
pETEs	O
++	O
;	O
}	O
PrevPt	O
=	O
CurrPt	function
;	O
}	O
}	O
void	O
miloadAET	function
(	O
EdgeTableEntry	O
*	O
AET	pointer
,	O
EdgeTableEntry	O
*	O
ETEs	pointer
)	O
{	O
EdgeTableEntry	O
*	O
pPrevAET	pointer
;	O
EdgeTableEntry	O
*	O
tmp	pointer
;	O
pPrevAET	O
=	O
AET	pointer
;	O
AET	O
=	O
AET	pointer
->	O
next	pointer
;	O
while	pointer
(	O
ETEs	pointer
)	O
{	O
while	O
(	O
AET	int
&&	O
(	pointer
AET	O
->	O
bres	pointer
.	O
minor_axis	int
<	O
ETEs	O
->	O
bres	pointer
.	O
minor_axis	int
)	O
)	O
{	O
pPrevAET	O
=	O
AET	pointer
;	O
AET	pointer
=	O
AET	pointer
->	O
next	pointer
;	O
}	pointer
tmp	O
=	O
ETEs	function
->	O
next	pointer
;	O
ETEs	pointer
->	O
next	pointer
=	O
AET	pointer
;	O
if	pointer
(	O
AET	pointer
)	O
AET	O
->	O
back	pointer
=	O
ETEs	pointer
;	O
ETEs	pointer
->	O
back	pointer
=	O
pPrevAET	pointer
;	O
pPrevAET	pointer
->	O
next	pointer
=	O
ETEs	pointer
;	O
pPrevAET	pointer
=	O
ETEs	pointer
;	O
ETEs	pointer
=	O
tmp	pointer
;	O
}	O
}	O
void	O
micomputeWAET	function
(	O
EdgeTableEntry	O
*	O
AET	pointer
)	O
{	O
EdgeTableEntry	O
*	O
pWETE	pointer
;	O
int	O
inside	int
=	O
1	int
;	O
int	O
isInside	int
=	O
0	int
;	O
AET	O
->	O
nextWETE	pointer
=	O
(	pointer
EdgeTableEntry	O
*	O
)	O
NULL	pointer
;	O
pWETE	O
=	O
AET	O
;	O
AET	pointer
=	O
AET	pointer
->	O
next	pointer
;	O
while	pointer
(	O
AET	pointer
)	O
{	O
if	O
(	O
AET	pointer
->	O
ClockWise	pointer
)	O
isInside	O
++	O
;	pointer
else	O
isInside	O
--	O
;	O
if	O
(	O
(	pointer
!	O
inside	O
&&	O
!	int
isInside	O
)	O
||	O
(	O
inside	O
&&	O
isInside	int
)	O
)	O
{	O
pWETE	O
->	O
nextWETE	pointer
=	O
AET	pointer
;	O
pWETE	pointer
=	O
AET	pointer
;	O
inside	pointer
=	O
!	int
inside	O
;	O
}	int
AET	O
=	O
AET	function
->	O
next	pointer
;	O
}	pointer
pWETE	O
->	O
nextWETE	pointer
=	O
(	pointer
EdgeTableEntry	O
*	O
)	O
NULL	pointer
;	O
}	O
bool	O
miInsertionSort	function
(	O
EdgeTableEntry	O
*	O
AET	pointer
)	O
{	O
EdgeTableEntry	O
*	O
pETEchase	pointer
;	O
EdgeTableEntry	O
*	O
pETEinsert	pointer
;	O
EdgeTableEntry	O
*	O
pETEchaseBackTMP	pointer
;	O
bool	O
changed	int
=	O
false	int
;	O
AET	O
=	O
AET	pointer
->	O
next	pointer
;	O
while	pointer
(	O
AET	O
)	O
{	O
pETEinsert	O
=	O
AET	pointer
;	O
pETEchase	pointer
=	O
AET	pointer
;	O
while	pointer
(	O
pETEchase	pointer
->	O
back	pointer
->	O
bres	pointer
.	O
minor_axis	int
>	O
AET	O
->	O
bres	pointer
.	O
minor_axis	int
)	O
pETEchase	O
=	O
pETEchase	pointer
->	O
back	pointer
;	O
AET	pointer
=	O
AET	pointer
->	O
next	pointer
;	O
if	pointer
(	O
pETEchase	pointer
!=	O
pETEinsert	O
)	O
{	O
pETEchaseBackTMP	pointer
=	O
pETEchase	pointer
->	O
back	pointer
;	O
pETEinsert	pointer
->	O
back	pointer
->	O
next	pointer
=	O
AET	pointer
;	O
if	pointer
(	O
AET	pointer
)	O
AET	O
->	O
back	pointer
=	O
pETEinsert	pointer
->	O
back	pointer
;	O
pETEinsert	pointer
->	O
next	pointer
=	O
pETEchase	pointer
;	O
pETEchase	pointer
->	O
back	pointer
->	O
next	pointer
=	O
pETEinsert	pointer
;	O
pETEchase	pointer
->	O
back	pointer
=	O
pETEinsert	pointer
;	O
pETEinsert	pointer
->	O
back	pointer
=	O
pETEchaseBackTMP	pointer
;	O
changed	pointer
=	O
true	int
;	O
}	O
}	O
return	O
changed	O
;	O
}	O
void	O
miFreeStorage	function
(	O
ScanLineListBlock	O
*	O
pSLLBlock	pointer
)	O
{	O
ScanLineListBlock	O
*	O
tmpSLLBlock	pointer
;	O
while	O
(	O
pSLLBlock	O
)	O
{	O
tmpSLLBlock	O
=	O
pSLLBlock	int
->	O
next	pointer
;	O
free	pointer
(	O
pSLLBlock	pointer
)	O
;	O
pSLLBlock	O
=	O
tmpSLLBlock	pointer
;	O
}	O
}	O