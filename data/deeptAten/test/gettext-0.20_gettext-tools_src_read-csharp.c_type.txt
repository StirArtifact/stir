struct	O
locals	struct
{	O
msgdomain_list_ty	O
*	O
mdlp	pointer
;	O
}	O
;	O
static	O
bool	O
execute_and_read_po_output	function
(	O
const	O
char	O
*	O
progname	pointer
,	O
const	O
char	O
*	O
prog_path	pointer
,	O
char	O
*	O
*	pointer
prog_argv	pointer
,	O
void	O
*	O
private_data	pointer
)	O
{	O
struct	O
locals	struct
*	O
l	pointer
=	O
(	O
struct	O
locals	struct
*	O
)	pointer
private_data	pointer
;	O
pid_t	O
child	int
;	O
int	O
fd	int
[	O
1	int
]	O
;	O
FILE	O
*	O
fp	pointer
;	O
int	O
exitstatus	int
;	O
child	O
=	O
create_pipe_in	O
(	O
progname	pointer
,	O
prog_path	pointer
,	O
prog_argv	pointer
,	O
DEV_NULL	int
,	O
false	O
,	O
true	O
,	O
true	O
,	O
fd	O
)	O
;	O
fp	O
=	O
fdopen	O
(	O
fd	pointer
[	O
0	int
]	O
,	O
"r"	pointer
)	O
;	O
if	O
(	O
fp	O
==	O
NULL	O
)	O
error	O
(	O
EXIT_FAILURE	pointer
,	O
errno	int
,	O
_	int
(	O
"fdopen() failed"	pointer
)	O
)	O
;	O
l	O
->	O
mdlp	int
=	O
read_catalog_stream	O
(	O
fp	pointer
,	O
"(pipe)"	pointer
,	O
"(pipe)"	pointer
,	O
&	pointer
input_format_po	pointer
)	O
;	O
fclose	O
(	O
fp	pointer
)	O
;	O
exitstatus	O
=	O
wait_subprocess	O
(	O
child	int
,	O
progname	int
,	O
false	pointer
,	O
false	O
,	O
true	O
,	O
true	O
,	O
NULL	O
)	O
;	O
if	O
(	O
exitstatus	O
!=	O
0	O
)	O
error	O
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	int
(	O
"%s subprocess failed with exit code %d"	pointer
)	O
,	O
progname	pointer
,	O
exitstatus	pointer
)	O
;	O
return	O
false	int
;	O
}	O
msgdomain_list_ty	O
*	O
msgdomain_read_csharp	function
(	O
const	pointer
char	O
*	O
resource_name	pointer
,	O
const	O
char	O
*	O
locale_name	pointer
,	O
const	O
char	O
*	O
directory	pointer
)	O
{	O
char	O
*	O
culture_name	pointer
;	O
const	O
char	O
*	O
args	pointer
[	O
4	O
]	O
;	O
const	O
char	O
*	O
gettextexedir	pointer
;	O
const	O
char	O
*	O
gettextlibdir	pointer
;	O
char	O
*	O
assembly_path	pointer
;	O
const	O
char	O
*	O
libdirs	pointer
[	O
1	int
]	O
;	O
struct	O
locals	struct
locals	O
;	O
if	O
(	O
resource_name	O
==	O
NULL	O
)	O
resource_name	O
=	O
"Messages"	pointer
;	O
culture_name	O
=	O
xstrdup	O
(	O
locale_name	pointer
)	O
;	O
{	O
char	O
*	O
p	pointer
;	O
for	O
(	O
p	O
=	O
culture_name	pointer
;	O
*	pointer
p	pointer
!=	O
'\0'	O
;	O
p	pointer
++	O
)	O
if	O
(	O
*	pointer
p	pointer
==	O
'_'	O
)	O
*	O
p	pointer
=	O
'-'	O
;	O
if	pointer
(	O
strncmp	O
(	O
culture_name	pointer
,	O
"sr-CS"	pointer
,	O
5	pointer
)	O
==	O
0	int
)	O
memcpy	O
(	O
culture_name	pointer
,	O
"sr-SP"	pointer
,	O
5	pointer
)	O
;	O
p	O
=	O
strchr	O
(	O
culture_name	pointer
,	O
'@'	pointer
)	O
;	O
if	O
(	O
p	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
strcmp	pointer
(	O
p	pointer
,	O
"@latin"	pointer
)	O
==	O
0	O
)	O
strcpy	O
(	O
p	pointer
,	O
"-Latn"	pointer
)	O
;	O
else	O
if	O
(	O
strcmp	pointer
(	O
p	pointer
,	O
"@cyrillic"	pointer
)	O
==	O
0	O
)	O
strcpy	O
(	O
p	pointer
,	O
"-Cyrl"	pointer
)	O
;	O
}	O
if	O
(	O
strcmp	O
(	O
culture_name	pointer
,	O
"sr-SP"	pointer
)	O
==	O
0	O
)	O
{	O
free	O
(	O
culture_name	pointer
)	O
;	O
culture_name	O
=	O
xstrdup	O
(	O
"sr-SP-Latn"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	O
(	O
culture_name	pointer
,	O
"uz-UZ"	pointer
)	O
==	O
0	int
)	O
{	O
free	O
(	O
culture_name	pointer
)	O
;	O
culture_name	O
=	O
xstrdup	O
(	O
"uz-UZ-Latn"	pointer
)	O
;	O
}	O
}	O
args	O
[	O
0	int
]	O
=	O
directory	O
;	O
args	O
[	O
1	int
]	O
=	O
resource_name	O
;	O
args	O
[	O
2	int
]	O
=	O
culture_name	O
;	O
args	O
[	O
3	int
]	O
=	O
NULL	O
;	O
gettextexedir	O
=	O
getenv	O
(	O
"GETTEXTCSHARPEXEDIR"	pointer
)	O
;	O
if	O
(	O
gettextexedir	O
==	O
NULL	O
||	O
gettextexedir	O
[	O
0	int
]	O
==	O
'\0'	O
)	O
gettextexedir	O
=	O
relocate	pointer
(	O
LIBDIR	pointer
"/gettext"	O
)	O
;	O
gettextlibdir	O
=	O
getenv	O
(	O
"GETTEXTCSHARPLIBDIR"	pointer
)	O
;	O
if	O
(	O
gettextlibdir	O
==	O
NULL	O
||	O
gettextlibdir	O
[	O
0	int
]	O
==	O
'\0'	O
)	O
gettextlibdir	O
=	O
relocate	pointer
(	O
LIBDIR	pointer
)	O
;	O
assembly_path	O
=	O
xconcatenated_filename	function
(	O
gettextexedir	pointer
,	O
"msgunfmt.net"	pointer
,	O
".exe"	pointer
)	O
;	O
libdirs	O
[	O
0	int
]	O
=	O
gettextlibdir	O
;	O
if	pointer
(	O
execute_csharp_program	O
(	O
assembly_path	pointer
,	O
libdirs	pointer
,	O
1	int
,	O
args	int
,	O
verbose	O
,	O
false	int
,	O
execute_and_read_po_output	O
,	O
&	O
locals	pointer
)	O
)	O
exit	O
(	O
EXIT_FAILURE	int
)	O
;	O
free	O
(	O
assembly_path	pointer
)	O
;	O
free	O
(	O
culture_name	pointer
)	O
;	O
return	O
locals	int
.	O
mdlp	pointer
;	O
}	O