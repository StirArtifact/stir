static	O
int	O
errors	int
;	O
int	O
re_flags	int
=	O
REG_EXTENDED	int
;	O
static	O
struct	O
rush_rule	struct
*	O
current_rule	pointer
;	O
struct	O
asgn	struct
{	O
struct	O
asgn	struct
*	O
next	pointer
;	O
char	O
*	O
name	pointer
;	O
char	O
*	O
value	pointer
;	O
}	O
;	O
static	O
void	O
add_asgn_list	function
(	O
struct	O
asgn	struct
*	O
head	pointer
,	O
enum	O
envar_type	enum
type	enum
)	O
;	O
static	O
struct	O
transform_node	struct
*	O
new_set_node	function
(	O
enum	O
transform_node_type	enum
type	enum
,	O
char	O
*	O
varname	pointer
,	O
struct	O
cfloc	struct
const	O
*	O
loc	pointer
)	O
;	O
extern	O
int	O
yydebug	int
;	O
enum	O
yytokentype	enum
{	O
STRING	int
=	O
258	int
,	O
IDENT	int
=	O
259	int
,	O
NUMBER	int
=	O
260	int
,	O
RUSH	int
=	O
261	int
,	O
T_VERSION	int
=	O
262	int
,	O
RULE	int
=	O
263	int
,	O
GLOBAL	int
=	O
264	int
,	O
EOL	int
=	O
265	int
,	O
SET	int
=	O
266	int
,	O
INSERT	int
=	O
267	int
,	O
REMOPT	int
=	O
268	int
,	O
MAP	int
=	O
269	int
,	O
UNSET	int
=	O
270	int
,	O
MATCH	int
=	O
271	int
,	O
FALLTHROUGH	int
=	O
272	int
,	O
INCLUDE	int
=	O
273	int
,	O
LIMITS	int
=	O
274	int
,	O
CLRENV	int
=	O
275	int
,	O
SETENV	int
=	O
276	int
,	O
UNSETENV	int
=	O
277	int
,	O
KEEPENV	int
=	O
278	int
,	O
EVALENV	int
=	O
279	int
,	O
DELETE	int
=	O
280	int
,	O
EXIT	int
=	O
281	int
,	O
ATTRIB	int
=	O
282	int
,	O
GLATTRIB	int
=	O
283	int
,	O
BOGUS	int
=	O
284	int
,	O
OR	int
=	O
285	int
,	O
AND	int
=	O
286	int
,	O
NOT	int
=	O
287	int
,	O
EQ	int
=	O
288	int
,	O
NE	int
=	O
289	int
,	O
LT	int
=	O
290	int
,	O
LE	int
=	O
291	int
,	O
GT	int
=	O
292	int
,	O
GE	int
=	O
293	int
,	O
XF	int
=	O
294	int
,	O
NM	int
=	O
295	int
,	O
IN	int
=	O
296	int
,	O
GROUP	int
=	O
297	int
}	O
;	O
typedef	O
union	O
YYSTYPE	union
{	O
char	O
*	O
str	pointer
;	O
struct	O
cfnumber	struct
num	long
;	O
int	O
intval	int
;	O
regex_t	struct
regex	struct
;	O
struct	O
rush_rule	struct
rule	pointer
;	O
struct	O
test_node	struct
*	O
node	pointer
;	O
struct	O
strlist	struct
{	O
char	O
*	O
*	O
argv	pointer
;	O
size_t	long
argc	int
;	O
}	O
strlist	struct
;	O
struct	O
{	O
int	O
start	pointer
;	O
int	O
end	pointer
;	O
}	O
range	struct
;	O
struct	O
asgn	struct
*	O
asgn	struct
;	O
struct	O
{	O
struct	O
asgn	struct
*	O
head	pointer
;	O
struct	O
asgn	struct
*	O
tail	pointer
;	O
}	O
asgn_list	struct
;	O
struct	O
limits_rec	O
*	O
lrec	pointer
;	O
rule_attrib_setter_t	pointer
attrib	pointer
;	O
struct	O
global_attrib	struct
*	O
global_attrib	struct
;	O
struct	O
argval	struct
*	O
arg	struct
;	O
struct	O
{	O
int	O
argc	int
;	O
struct	O
argval	struct
*	O
head	pointer
;	O
struct	O
argval	struct
*	O
tail	pointer
;	O
}	O
arglist	struct
;	O
struct	O
{	O
unsigned	O
major	int
,	O
minor	int
;	O
}	O
version	function
;	O
}	O
YYSTYPE	union
;	O
extern	O
YYSTYPE	union
yylval	union
;	O
extern	O
YYLTYPE	O
yylloc	struct
;	O
int	O
yyparse	function
(	O
void	O
)	O
;	O
typedef	O
unsigned	O
char	O
yytype_uint8	char
;	O
typedef	O
signed	O
char	O
yytype_int8	char
;	O
typedef	O
unsigned	O
short	O
int	O
yytype_uint16	short
;	O
typedef	O
short	O
int	O
yytype_int16	short
;	O
union	O
yyalloc	union
{	O
yytype_int16	short
yyss_alloc	short
;	O
YYSTYPE	union
yyvs_alloc	union
;	O
YYLTYPE	O
yyls_alloc	struct
;	O
}	O
;	O
static	O
const	O
yytype_uint8	char
yytranslate	array
[	O
]	O
=	O
{	O
0	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
44	int
,	O
45	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
46	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
47	int
,	O
2	int
,	O
48	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
43	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
1	int
,	O
2	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
10	int
,	O
11	int
,	O
12	int
,	O
13	int
,	O
14	int
,	O
15	int
,	O
16	int
,	O
17	int
,	O
18	int
,	O
19	int
,	O
20	int
,	O
21	int
,	O
22	int
,	O
23	int
,	O
24	int
,	O
25	int
,	O
26	int
,	O
27	int
,	O
28	int
,	O
29	int
,	O
30	int
,	O
31	int
,	O
32	int
,	O
33	int
,	O
34	int
,	O
35	int
,	O
36	int
,	O
37	int
,	O
38	int
,	O
39	int
,	O
40	int
,	O
41	int
,	O
42	int
}	O
;	O
static	O
const	O
yytype_uint16	short
yyprhs	array
[	O
]	O
=	O
{	O
0	int
,	O
0	int
,	O
3	int
,	O
6	int
,	O
10	int
,	O
12	int
,	O
16	int
,	O
17	int
,	O
19	int
,	O
21	int
,	O
24	int
,	O
25	int
,	O
27	int
,	O
29	int
,	O
32	int
,	O
35	int
,	O
38	int
,	O
41	int
,	O
43	int
,	O
46	int
,	O
50	int
,	O
52	int
,	O
55	int
,	O
57	int
,	O
59	int
,	O
63	int
,	O
64	int
,	O
66	int
,	O
68	int
,	O
71	int
,	O
74	int
,	O
77	int
,	O
80	int
,	O
83	int
,	O
86	int
,	O
89	int
,	O
92	int
,	O
95	int
,	O
98	int
,	O
101	int
,	O
103	int
,	O
106	int
,	O
108	int
,	O
112	int
,	O
116	int
,	O
118	int
,	O
121	int
,	O
125	int
,	O
129	int
,	O
133	int
,	O
137	int
,	O
141	int
,	O
145	int
,	O
149	int
,	O
153	int
,	O
157	int
,	O
161	int
,	O
165	int
,	O
169	int
,	O
172	int
,	O
175	int
,	O
177	int
,	O
179	int
,	O
181	int
,	O
183	int
,	O
185	int
,	O
187	int
,	O
192	int
,	O
197	int
,	O
202	int
,	O
209	int
,	O
216	int
,	O
221	int
,	O
226	int
,	O
233	int
,	O
236	int
,	O
239	int
,	O
248	int
,	O
257	int
,	O
258	int
,	O
260	int
,	O
264	int
,	O
266	int
,	O
268	int
,	O
272	int
,	O
276	int
,	O
277	int
,	O
279	int
,	O
282	int
,	O
284	int
,	O
287	int
,	O
291	int
,	O
294	int
,	O
296	int
,	O
299	int
,	O
303	int
,	O
304	int
,	O
306	int
,	O
308	int
,	O
313	int
,	O
316	int
,	O
319	int
,	O
322	int
,	O
324	int
,	O
327	int
,	O
329	int
,	O
333	int
,	O
336	int
,	O
337	int
}	O
;	O
static	O
const	O
yytype_int8	char
yyrhs	array
[	O
]	O
=	O
{	O
50	int
,	O
0	int
,	O
-	O
1	int
,	O
53	int
,	O
51	int
,	O
-	O
1	int
,	O
52	int
,	O
53	int
,	O
55	int
,	O
-	O
1	int
,	O
29	int
,	O
-	O
1	int
,	O
6	int
,	O
7	int
,	O
10	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
54	int
,	O
-	O
1	int
,	O
10	int
,	O
-	O
1	int
,	O
54	int
,	O
10	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
56	int
,	O
-	O
1	int
,	O
57	int
,	O
-	O
1	int
,	O
56	int
,	O
57	int
,	O
-	O
1	int
,	O
63	int
,	O
65	int
,	O
-	O
1	int
,	O
58	int
,	O
59	int
,	O
-	O
1	int
,	O
9	int
,	O
54	int
,	O
-	O
1	int
,	O
60	int
,	O
-	O
1	int
,	O
59	int
,	O
60	int
,	O
-	O
1	int
,	O
28	int
,	O
61	int
,	O
54	int
,	O
-	O
1	int
,	O
62	int
,	O
-	O
1	int
,	O
61	int
,	O
62	int
,	O
-	O
1	int
,	O
71	int
,	O
-	O
1	int
,	O
5	int
,	O
-	O
1	int
,	O
8	int
,	O
64	int
,	O
54	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
72	int
,	O
-	O
1	int
,	O
66	int
,	O
-	O
1	int
,	O
65	int
,	O
66	int
,	O
-	O
1	int
,	O
67	int
,	O
54	int
,	O
-	O
1	int
,	O
74	int
,	O
54	int
,	O
-	O
1	int
,	O
75	int
,	O
54	int
,	O
-	O
1	int
,	O
81	int
,	O
54	int
,	O
-	O
1	int
,	O
84	int
,	O
54	int
,	O
-	O
1	int
,	O
88	int
,	O
54	int
,	O
-	O
1	int
,	O
79	int
,	O
54	int
,	O
-	O
1	int
,	O
91	int
,	O
54	int
,	O
-	O
1	int
,	O
86	int
,	O
54	int
,	O
-	O
1	int
,	O
83	int
,	O
53	int
,	O
-	O
1	int
,	O
1	int
,	O
-	O
1	int
,	O
16	int
,	O
68	int
,	O
-	O
1	int
,	O
69	int
,	O
-	O
1	int
,	O
68	int
,	O
31	int
,	O
69	int
,	O
-	O
1	int
,	O
68	int
,	O
30	int
,	O
69	int
,	O
-	O
1	int
,	O
70	int
,	O
-	O
1	int
,	O
32	int
,	O
69	int
,	O
-	O
1	int
,	O
44	int
,	O
68	int
,	O
45	int
,	O
-	O
1	int
,	O
72	int
,	O
43	int
,	O
73	int
,	O
-	O
1	int
,	O
72	int
,	O
40	int
,	O
73	int
,	O
-	O
1	int
,	O
72	int
,	O
33	int
,	O
71	int
,	O
-	O
1	int
,	O
72	int
,	O
34	int
,	O
71	int
,	O
-	O
1	int
,	O
72	int
,	O
33	int
,	O
5	int
,	O
-	O
1	int
,	O
72	int
,	O
34	int
,	O
5	int
,	O
-	O
1	int
,	O
72	int
,	O
35	int
,	O
5	int
,	O
-	O
1	int
,	O
72	int
,	O
36	int
,	O
5	int
,	O
-	O
1	int
,	O
72	int
,	O
37	int
,	O
5	int
,	O
-	O
1	int
,	O
72	int
,	O
38	int
,	O
5	int
,	O
-	O
1	int
,	O
72	int
,	O
41	int
,	O
92	int
,	O
-	O
1	int
,	O
42	int
,	O
72	int
,	O
-	O
1	int
,	O
42	int
,	O
92	int
,	O
-	O
1	int
,	O
4	int
,	O
-	O
1	int
,	O
3	int
,	O
-	O
1	int
,	O
4	int
,	O
-	O
1	int
,	O
3	int
,	O
-	O
1	int
,	O
5	int
,	O
-	O
1	int
,	O
72	int
,	O
-	O
1	int
,	O
11	int
,	O
77	int
,	O
46	int
,	O
78	int
,	O
-	O
1	int
,	O
12	int
,	O
77	int
,	O
46	int
,	O
78	int
,	O
-	O
1	int
,	O
11	int
,	O
77	int
,	O
39	int
,	O
78	int
,	O
-	O
1	int
,	O
11	int
,	O
77	int
,	O
46	int
,	O
72	int
,	O
43	int
,	O
78	int
,	O
-	O
1	int
,	O
12	int
,	O
77	int
,	O
46	int
,	O
72	int
,	O
43	int
,	O
78	int
,	O
-	O
1	int
,	O
11	int
,	O
4	int
,	O
46	int
,	O
78	int
,	O
-	O
1	int
,	O
11	int
,	O
4	int
,	O
39	int
,	O
78	int
,	O
-	O
1	int
,	O
11	int
,	O
4	int
,	O
46	int
,	O
72	int
,	O
43	int
,	O
78	int
,	O
-	O
1	int
,	O
15	int
,	O
4	int
,	O
-	O
1	int
,	O
15	int
,	O
77	int
,	O
-	O
1	int
,	O
14	int
,	O
77	int
,	O
78	int
,	O
78	int
,	O
78	int
,	O
5	int
,	O
5	int
,	O
76	int
,	O
-	O
1	int
,	O
14	int
,	O
4	int
,	O
78	int
,	O
78	int
,	O
78	int
,	O
5	int
,	O
5	int
,	O
76	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
72	int
,	O
-	O
1	int
,	O
47	int
,	O
5	int
,	O
48	int
,	O
-	O
1	int
,	O
72	int
,	O
-	O
1	int
,	O
17	int
,	O
-	O
1	int
,	O
26	int
,	O
80	int
,	O
3	int
,	O
-	O
1	int
,	O
26	int
,	O
80	int
,	O
4	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
5	int
,	O
-	O
1	int
,	O
25	int
,	O
82	int
,	O
-	O
1	int
,	O
5	int
,	O
-	O
1	int
,	O
5	int
,	O
5	int
,	O
-	O
1	int
,	O
18	int
,	O
72	int
,	O
10	int
,	O
-	O
1	int
,	O
19	int
,	O
85	int
,	O
-	O
1	int
,	O
4	int
,	O
-	O
1	int
,	O
85	int
,	O
4	int
,	O
-	O
1	int
,	O
13	int
,	O
72	int
,	O
87	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
72	int
,	O
-	O
1	int
,	O
20	int
,	O
-	O
1	int
,	O
21	int
,	O
4	int
,	O
46	int
,	O
72	int
,	O
-	O
1	int
,	O
24	int
,	O
72	int
,	O
-	O
1	int
,	O
22	int
,	O
89	int
,	O
-	O
1	int
,	O
23	int
,	O
89	int
,	O
-	O
1	int
,	O
90	int
,	O
-	O
1	int
,	O
89	int
,	O
90	int
,	O
-	O
1	int
,	O
71	int
,	O
-	O
1	int
,	O
4	int
,	O
46	int
,	O
78	int
,	O
-	O
1	int
,	O
27	int
,	O
72	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
44	int
,	O
93	int
,	O
61	int
,	O
45	int
,	O
-	O
1	int
}	O
;	O
static	O
const	O
yytype_uint16	short
yyrline	array
[	O
]	O
=	O
{	O
0	int
,	O
130	int
,	O
130	int
,	O
133	int
,	O
138	int
,	O
145	int
,	O
156	int
,	O
157	int
,	O
160	int
,	O
161	int
,	O
164	int
,	O
165	int
,	O
168	int
,	O
169	int
,	O
172	int
,	O
173	int
,	O
176	int
,	O
179	int
,	O
180	int
,	O
183	int
,	O
193	int
,	O
198	int
,	O
206	int
,	O
214	int
,	O
225	int
,	O
235	int
,	O
238	int
,	O
241	int
,	O
242	int
,	O
245	int
,	O
246	int
,	O
247	int
,	O
248	int
,	O
249	int
,	O
250	int
,	O
251	int
,	O
252	int
,	O
253	int
,	O
254	int
,	O
255	int
,	O
268	int
,	O
280	int
,	O
281	int
,	O
287	int
,	O
295	int
,	O
296	int
,	O
301	int
,	O
307	int
,	O
314	int
,	O
324	int
,	O
331	int
,	O
338	int
,	O
345	int
,	O
352	int
,	O
359	int
,	O
366	int
,	O
373	int
,	O
380	int
,	O
387	int
,	O
394	int
,	O
401	int
,	O
402	int
,	O
405	int
,	O
406	int
,	O
407	int
,	O
413	int
,	O
428	int
,	O
439	int
,	O
450	int
,	O
462	int
,	O
474	int
,	O
486	int
,	O
495	int
,	O
506	int
,	O
517	int
,	O
525	int
,	O
542	int
,	O
560	int
,	O
579	int
,	O
582	int
,	O
585	int
,	O
592	int
,	O
598	int
,	O
602	int
,	O
607	int
,	O
620	int
,	O
623	int
,	O
633	int
,	O
650	int
,	O
655	int
,	O
670	int
,	O
681	int
,	O
687	int
,	O
707	int
,	O
732	int
,	O
770	int
,	O
773	int
,	O
779	int
,	O
783	int
,	O
792	int
,	O
800	int
,	O
804	int
,	O
810	int
,	O
814	int
,	O
821	int
,	O
828	int
,	O
840	int
,	O
847	int
,	O
847	int
}	O
;	O
static	O
const	O
char	O
*	O
const	O
yytname	array
[	O
]	O
=	O
{	O
"$end"	pointer
,	O
"error"	pointer
,	O
"$undefined"	pointer
,	O
"\"string\""	pointer
,	O
"\"identifier\""	pointer
,	O
"\"number\""	pointer
,	O
"\"rush\""	pointer
,	O
"T_VERSION"	pointer
,	O
"\"rule\""	pointer
,	O
"\"global\""	pointer
,	O
"\"end of line\""	pointer
,	O
"\"set\""	pointer
,	O
"\"insert\""	pointer
,	O
"\"remopt\""	pointer
,	O
"\"map\""	pointer
,	O
"\"unset\""	pointer
,	O
"\"match\""	pointer
,	O
"\"fallthrough\""	pointer
,	O
"\"include\""	pointer
,	O
"\"limits\""	pointer
,	O
"\"clrenv\""	pointer
,	O
"\"setenv\""	pointer
,	O
"\"unsetenv\""	pointer
,	O
"\"keepenv\""	pointer
,	O
"\"evalenv\""	pointer
,	O
"\"delete\""	pointer
,	O
"\"exit\""	pointer
,	O
"\"rule attribute\""	pointer
,	O
"\"global attribute\""	pointer
,	O
"\"erroneous token\""	pointer
,	O
"\"||\""	pointer
,	O
"\"&&\""	pointer
,	O
"\"!\""	pointer
,	O
"\"==\""	pointer
,	O
"\"!=\""	pointer
,	O
"\"<\""	pointer
,	O
"\"<=\""	pointer
,	O
"\">\""	pointer
,	O
"\">=\""	pointer
,	O
"\"=~\""	pointer
,	O
"\"!~\""	pointer
,	O
"\"in\""	pointer
,	O
"\"group\""	pointer
,	O
"'~'"	pointer
,	O
"'('"	pointer
,	O
"')'"	pointer
,	O
"'='"	pointer
,	O
"'['"	pointer
,	O
"']'"	pointer
,	O
"$accept"	pointer
,	O
"rcfile"	pointer
,	O
"select"	pointer
,	O
"preface"	pointer
,	O
"skipeol"	pointer
,	O
"eol"	pointer
,	O
"content"	pointer
,	O
"rulelist"	pointer
,	O
"rule"	pointer
,	O
"globhdr"	pointer
,	O
"globbody"	pointer
,	O
"glob_stmt"	pointer
,	O
"arglist"	pointer
,	O
"arg"	pointer
,	O
"rulehdr"	pointer
,	O
"ruleid"	pointer
,	O
"rulebody"	pointer
,	O
"stmt"	pointer
,	O
"match_stmt"	pointer
,	O
"compound_cond"	pointer
,	O
"simple_cond"	pointer
,	O
"expr"	pointer
,	O
"literal"	pointer
,	O
"string"	pointer
,	O
"regex"	pointer
,	O
"set_stmt"	pointer
,	O
"map_stmt"	pointer
,	O
"defval"	pointer
,	O
"index"	pointer
,	O
"value"	pointer
,	O
"flowctl_stmt"	pointer
,	O
"fdescr"	pointer
,	O
"delete_stmt"	pointer
,	O
"range"	pointer
,	O
"include_stmt"	pointer
,	O
"limits_stmt"	pointer
,	O
"resource_limits"	pointer
,	O
"remopt_stmt"	pointer
,	O
"optstring"	pointer
,	O
"environ_stmt"	pointer
,	O
"asgn_list"	pointer
,	O
"asgn"	pointer
,	O
"attrib_stmt"	pointer
,	O
"strlist"	pointer
,	O
"$@1"	pointer
,	O
YY_NULL	int
}	O
;	O
static	O
const	O
yytype_uint8	char
yyr1	array
[	O
]	O
=	O
{	O
0	int
,	O
49	int
,	O
50	int
,	O
51	int
,	O
51	int
,	O
52	int
,	O
53	int
,	O
53	int
,	O
54	int
,	O
54	int
,	O
55	int
,	O
55	int
,	O
56	int
,	O
56	int
,	O
57	int
,	O
57	int
,	O
58	int
,	O
59	int
,	O
59	int
,	O
60	int
,	O
61	int
,	O
61	int
,	O
62	int
,	O
62	int
,	O
63	int
,	O
64	int
,	O
64	int
,	O
65	int
,	O
65	int
,	O
66	int
,	O
66	int
,	O
66	int
,	O
66	int
,	O
66	int
,	O
66	int
,	O
66	int
,	O
66	int
,	O
66	int
,	O
66	int
,	O
66	int
,	O
67	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
69	int
,	O
69	int
,	O
69	int
,	O
70	int
,	O
70	int
,	O
70	int
,	O
70	int
,	O
70	int
,	O
70	int
,	O
70	int
,	O
70	int
,	O
70	int
,	O
70	int
,	O
70	int
,	O
70	int
,	O
70	int
,	O
71	int
,	O
71	int
,	O
72	int
,	O
72	int
,	O
72	int
,	O
73	int
,	O
74	int
,	O
74	int
,	O
74	int
,	O
74	int
,	O
74	int
,	O
74	int
,	O
74	int
,	O
74	int
,	O
74	int
,	O
74	int
,	O
75	int
,	O
75	int
,	O
76	int
,	O
76	int
,	O
77	int
,	O
78	int
,	O
79	int
,	O
79	int
,	O
79	int
,	O
80	int
,	O
80	int
,	O
81	int
,	O
82	int
,	O
82	int
,	O
83	int
,	O
84	int
,	O
85	int
,	O
85	int
,	O
86	int
,	O
87	int
,	O
87	int
,	O
88	int
,	O
88	int
,	O
88	int
,	O
88	int
,	O
88	int
,	O
89	int
,	O
89	int
,	O
90	int
,	O
90	int
,	O
91	int
,	O
93	int
,	O
92	int
}	O
;	O
static	O
const	O
yytype_uint8	char
yyr2	array
[	O
]	O
=	O
{	O
0	int
,	O
2	int
,	O
2	int
,	O
3	int
,	O
1	int
,	O
3	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
2	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
1	int
,	O
2	int
,	O
3	int
,	O
1	int
,	O
2	int
,	O
1	int
,	O
1	int
,	O
3	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
1	int
,	O
2	int
,	O
1	int
,	O
3	int
,	O
3	int
,	O
1	int
,	O
2	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
2	int
,	O
2	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
4	int
,	O
4	int
,	O
4	int
,	O
6	int
,	O
6	int
,	O
4	int
,	O
4	int
,	O
6	int
,	O
2	int
,	O
2	int
,	O
8	int
,	O
8	int
,	O
0	int
,	O
1	int
,	O
3	int
,	O
1	int
,	O
1	int
,	O
3	int
,	O
3	int
,	O
0	int
,	O
1	int
,	O
2	int
,	O
1	int
,	O
2	int
,	O
3	int
,	O
2	int
,	O
1	int
,	O
2	int
,	O
3	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
4	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
1	int
,	O
2	int
,	O
1	int
,	O
3	int
,	O
2	int
,	O
0	int
,	O
4	int
}	O
;	O
static	O
const	O
yytype_uint8	char
yydefact	array
[	O
]	O
=	O
{	O
6	int
,	O
8	int
,	O
0	int
,	O
0	int
,	O
7	int
,	O
1	int
,	O
0	int
,	O
4	int
,	O
2	int
,	O
6	int
,	O
9	int
,	O
0	int
,	O
10	int
,	O
5	int
,	O
25	int
,	O
0	int
,	O
3	int
,	O
11	int
,	O
12	int
,	O
0	int
,	O
0	int
,	O
63	int
,	O
62	int
,	O
64	int
,	O
0	int
,	O
26	int
,	O
16	int
,	O
13	int
,	O
0	int
,	O
15	int
,	O
17	int
,	O
39	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
82	int
,	O
0	int
,	O
0	int
,	O
97	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
85	int
,	O
0	int
,	O
0	int
,	O
27	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
6	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
24	int
,	O
61	int
,	O
60	int
,	O
23	int
,	O
0	int
,	O
20	int
,	O
22	int
,	O
18	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
95	int
,	O
0	int
,	O
0	int
,	O
74	int
,	O
75	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
40	int
,	O
41	int
,	O
44	int
,	O
0	int
,	O
0	int
,	O
92	int
,	O
91	int
,	O
0	int
,	O
60	int
,	O
104	int
,	O
100	int
,	O
102	int
,	O
101	int
,	O
99	int
,	O
88	int
,	O
87	int
,	O
86	int
,	O
0	int
,	O
106	int
,	O
28	int
,	O
29	int
,	O
30	int
,	O
31	int
,	O
35	int
,	O
32	int
,	O
38	int
,	O
33	int
,	O
37	int
,	O
34	int
,	O
36	int
,	O
19	int
,	O
21	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
96	int
,	O
94	int
,	O
81	int
,	O
0	int
,	O
0	int
,	O
45	int
,	O
107	int
,	O
58	int
,	O
59	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
90	int
,	O
93	int
,	O
0	int
,	O
0	int
,	O
103	int
,	O
89	int
,	O
83	int
,	O
84	int
,	O
72	int
,	O
81	int
,	O
71	int
,	O
80	int
,	O
68	int
,	O
81	int
,	O
66	int
,	O
81	int
,	O
67	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
46	int
,	O
43	int
,	O
42	int
,	O
51	int
,	O
49	int
,	O
52	int
,	O
50	int
,	O
53	int
,	O
54	int
,	O
55	int
,	O
56	int
,	O
65	int
,	O
48	int
,	O
57	int
,	O
47	int
,	O
98	int
,	O
105	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
73	int
,	O
69	int
,	O
70	int
,	O
0	int
,	O
0	int
,	O
108	int
,	O
78	int
,	O
78	int
,	O
79	int
,	O
77	int
,	O
76	int
}	O
;	O
static	O
const	O
yytype_int16	short
yydefgoto	array
[	O
]	O
=	O
{	O
-	O
1	int
,	O
2	int
,	O
8	int
,	O
9	int
,	O
3	int
,	O
4	int
,	O
16	int
,	O
17	int
,	O
18	int
,	O
19	int
,	O
29	int
,	O
30	int
,	O
65	int
,	O
66	int
,	O
20	int
,	O
24	int
,	O
49	int
,	O
50	int
,	O
51	int
,	O
81	int
,	O
82	int
,	O
83	int
,	O
67	int
,	O
121	int
,	O
172	int
,	O
52	int
,	O
53	int
,	O
192	int
,	O
71	int
,	O
122	int
,	O
54	int
,	O
98	int
,	O
55	int
,	O
96	int
,	O
56	int
,	O
57	int
,	O
87	int
,	O
58	int
,	O
120	int
,	O
59	int
,	O
91	int
,	O
92	int
,	O
60	int
,	O
127	int
,	O
159	int
}	O
;	O
static	O
const	O
yytype_int16	short
yypact	array
[	O
]	O
=	O
{	O
1	int
,	O
-	O
73	int
,	O
27	int
,	O
10	int
,	O
22	int
,	O
-	O
73	int
,	O
17	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
1	int
,	O
-	O
73	int
,	O
30	int
,	O
64	int
,	O
-	O
73	int
,	O
105	int
,	O
1	int
,	O
-	O
73	int
,	O
64	int
,	O
-	O
73	int
,	O
15	int
,	O
166	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
1	int
,	O
-	O
73	int
,	O
22	int
,	O
-	O
73	int
,	O
108	int
,	O
15	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
6	int
,	O
21	int
,	O
105	int
,	O
8	int
,	O
9	int
,	O
25	int
,	O
-	O
73	int
,	O
105	int
,	O
58	int
,	O
-	O
73	int
,	O
75	int
,	O
11	int
,	O
11	int
,	O
105	int
,	O
79	int
,	O
82	int
,	O
105	int
,	O
121	int
,	O
-	O
73	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
22	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
86	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
13	int
,	O
89	int
,	O
24	int
,	O
53	int
,	O
105	int
,	O
105	int
,	O
105	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
25	int
,	O
14	int
,	O
25	int
,	O
71	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
116	int
,	O
104	int
,	O
-	O
73	int
,	O
113	int
,	O
73	int
,	O
74	int
,	O
-	O
73	int
,	O
11	int
,	O
-	O
73	int
,	O
11	int
,	O
-	O
73	int
,	O
119	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
123	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
22	int
,	O
22	int
,	O
22	int
,	O
22	int
,	O
22	int
,	O
-	O
73	int
,	O
22	int
,	O
22	int
,	O
22	int
,	O
22	int
,	O
22	int
,	O
-	O
73	int
,	O
105	int
,	O
105	int
,	O
83	int
,	O
105	int
,	O
105	int
,	O
105	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
105	int
,	O
105	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
9	int
,	O
25	int
,	O
25	int
,	O
157	int
,	O
160	int
,	O
150	int
,	O
153	int
,	O
161	int
,	O
163	int
,	O
105	int
,	O
125	int
,	O
105	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
105	int
,	O
105	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
127	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
128	int
,	O
-	O
73	int
,	O
129	int
,	O
-	O
73	int
,	O
105	int
,	O
105	int
,	O
108	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
105	int
,	O
105	int
,	O
105	int
,	O
168	int
,	O
169	int
,	O
3	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
189	int
,	O
190	int
,	O
-	O
73	int
,	O
105	int
,	O
105	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
}	O
;	O
static	O
const	O
yytype_int16	short
yypgoto	array
[	O
]	O
=	O
{	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
7	int
,	O
23	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
179	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
170	int
,	O
38	int
,	O
-	O
64	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
149	int
,	O
-	O
73	int
,	O
120	int
,	O
-	O
69	int
,	O
-	O
73	int
,	O
-	O
39	int
,	O
-	O
14	int
,	O
63	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
13	int
,	O
62	int
,	O
-	O
72	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
-	O
73	int
,	O
162	int
,	O
-	O
56	int
,	O
-	O
73	int
,	O
66	int
,	O
-	O
73	int
}	O
;	O
static	O
const	O
yytype_int16	short
yytable	array
[	O
]	O
=	O
{	O
25	int
,	O
112	int
,	O
12	int
,	O
123	int
,	O
90	int
,	O
90	int
,	O
62	int
,	O
63	int
,	O
64	int
,	O
124	int
,	O
69	int
,	O
1	int
,	O
74	int
,	O
76	int
,	O
62	int
,	O
89	int
,	O
6	int
,	O
21	int
,	O
22	int
,	O
23	int
,	O
73	int
,	O
129	int
,	O
130	int
,	O
84	int
,	O
11	int
,	O
85	int
,	O
113	int
,	O
5	int
,	O
21	int
,	O
22	int
,	O
23	int
,	O
94	int
,	O
10	int
,	O
114	int
,	O
99	int
,	O
144	int
,	O
160	int
,	O
144	int
,	O
26	int
,	O
7	int
,	O
13	int
,	O
148	int
,	O
150	int
,	O
28	int
,	O
152	int
,	O
154	int
,	O
156	int
,	O
61	int
,	O
188	int
,	O
106	int
,	O
157	int
,	O
158	int
,	O
90	int
,	O
70	int
,	O
90	int
,	O
70	int
,	O
70	int
,	O
78	int
,	O
125	int
,	O
119	int
,	O
161	int
,	O
162	int
,	O
86	int
,	O
116	int
,	O
84	int
,	O
126	int
,	O
84	int
,	O
79	int
,	O
70	int
,	O
80	int
,	O
117	int
,	O
176	int
,	O
14	int
,	O
15	int
,	O
101	int
,	O
102	int
,	O
103	int
,	O
104	int
,	O
105	int
,	O
88	int
,	O
107	int
,	O
108	int
,	O
109	int
,	O
110	int
,	O
95	int
,	O
180	int
,	O
181	int
,	O
97	int
,	O
111	int
,	O
62	int
,	O
63	int
,	O
64	int
,	O
164	int
,	O
166	int
,	O
115	int
,	O
72	int
,	O
1	int
,	O
75	int
,	O
77	int
,	O
118	int
,	O
149	int
,	O
129	int
,	O
130	int
,	O
153	int
,	O
155	int
,	O
183	int
,	O
184	int
,	O
185	int
,	O
21	int
,	O
22	int
,	O
23	int
,	O
62	int
,	O
63	int
,	O
64	int
,	O
140	int
,	O
84	int
,	O
84	int
,	O
141	int
,	O
112	int
,	O
142	int
,	O
143	int
,	O
-	O
14	int
,	O
31	int
,	O
171	int
,	O
145	int
,	O
171	int
,	O
146	int
,	O
147	int
,	O
175	int
,	O
-	O
14	int
,	O
-	O
14	int
,	O
151	int
,	O
32	int
,	O
33	int
,	O
34	int
,	O
35	int
,	O
36	int
,	O
37	int
,	O
38	int
,	O
39	int
,	O
40	int
,	O
41	int
,	O
42	int
,	O
43	int
,	O
44	int
,	O
45	int
,	O
46	int
,	O
47	int
,	O
48	int
,	O
131	int
,	O
132	int
,	O
133	int
,	O
134	int
,	O
135	int
,	O
136	int
,	O
167	int
,	O
137	int
,	O
138	int
,	O
168	int
,	O
139	int
,	O
62	int
,	O
63	int
,	O
163	int
,	O
62	int
,	O
63	int
,	O
165	int
,	O
169	int
,	O
31	int
,	O
170	int
,	O
125	int
,	O
177	int
,	O
178	int
,	O
179	int
,	O
186	int
,	O
187	int
,	O
191	int
,	O
191	int
,	O
32	int
,	O
33	int
,	O
34	int
,	O
35	int
,	O
36	int
,	O
37	int
,	O
38	int
,	O
39	int
,	O
40	int
,	O
41	int
,	O
42	int
,	O
43	int
,	O
44	int
,	O
45	int
,	O
46	int
,	O
47	int
,	O
48	int
,	O
189	int
,	O
190	int
,	O
27	int
,	O
182	int
,	O
100	int
,	O
68	int
,	O
128	int
,	O
0	int
,	O
174	int
,	O
193	int
,	O
173	int
,	O
0	int
,	O
93	int
}	O
;	O
static	O
const	O
yytype_int16	short
yycheck	array
[	O
]	O
=	O
{	O
14	int
,	O
65	int
,	O
9	int
,	O
75	int
,	O
43	int
,	O
44	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
78	int
,	O
4	int
,	O
10	int
,	O
4	int
,	O
4	int
,	O
3	int
,	O
4	int
,	O
6	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
34	int
,	O
30	int
,	O
31	int
,	O
37	int
,	O
7	int
,	O
39	int
,	O
39	int
,	O
0	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
45	int
,	O
10	int
,	O
46	int
,	O
48	int
,	O
91	int
,	O
45	int
,	O
93	int
,	O
15	int
,	O
29	int
,	O
10	int
,	O
113	int
,	O
114	int
,	O
28	int
,	O
116	int
,	O
117	int
,	O
118	int
,	O
24	int
,	O
45	int
,	O
56	int
,	O
122	int
,	O
123	int
,	O
91	int
,	O
47	int
,	O
93	int
,	O
47	int
,	O
47	int
,	O
32	int
,	O
44	int
,	O
73	int
,	O
129	int
,	O
130	int
,	O
4	int
,	O
39	int
,	O
78	int
,	O
79	int
,	O
80	int
,	O
42	int
,	O
47	int
,	O
44	int
,	O
46	int
,	O
143	int
,	O
8	int
,	O
9	int
,	O
51	int
,	O
52	int
,	O
53	int
,	O
54	int
,	O
55	int
,	O
4	int
,	O
57	int
,	O
58	int
,	O
59	int
,	O
60	int
,	O
5	int
,	O
157	int
,	O
158	int
,	O
5	int
,	O
65	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
131	int
,	O
132	int
,	O
5	int
,	O
33	int
,	O
10	int
,	O
35	int
,	O
36	int
,	O
46	int
,	O
114	int
,	O
30	int
,	O
31	int
,	O
117	int
,	O
118	int
,	O
177	int
,	O
178	int
,	O
179	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
10	int
,	O
129	int
,	O
130	int
,	O
4	int
,	O
182	int
,	O
46	int
,	O
46	int
,	O
0	int
,	O
1	int
,	O
137	int
,	O
5	int
,	O
139	int
,	O
3	int
,	O
4	int
,	O
142	int
,	O
8	int
,	O
9	int
,	O
48	int
,	O
11	int
,	O
12	int
,	O
13	int
,	O
14	int
,	O
15	int
,	O
16	int
,	O
17	int
,	O
18	int
,	O
19	int
,	O
20	int
,	O
21	int
,	O
22	int
,	O
23	int
,	O
24	int
,	O
25	int
,	O
26	int
,	O
27	int
,	O
33	int
,	O
34	int
,	O
35	int
,	O
36	int
,	O
37	int
,	O
38	int
,	O
5	int
,	O
40	int
,	O
41	int
,	O
5	int
,	O
43	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
5	int
,	O
1	int
,	O
5	int
,	O
44	int
,	O
43	int
,	O
43	int
,	O
43	int
,	O
5	int
,	O
5	int
,	O
189	int
,	O
190	int
,	O
11	int
,	O
12	int
,	O
13	int
,	O
14	int
,	O
15	int
,	O
16	int
,	O
17	int
,	O
18	int
,	O
19	int
,	O
20	int
,	O
21	int
,	O
22	int
,	O
23	int
,	O
24	int
,	O
25	int
,	O
26	int
,	O
27	int
,	O
5	int
,	O
5	int
,	O
17	int
,	O
159	int
,	O
49	int
,	O
29	int
,	O
80	int
,	O
-	O
1	int
,	O
139	int
,	O
190	int
,	O
138	int
,	O
-	O
1	int
,	O
44	int
}	O
;	O
static	O
const	O
yytype_uint8	char
yystos	array
[	O
]	O
=	O
{	O
0	int
,	O
10	int
,	O
50	int
,	O
53	int
,	O
54	int
,	O
0	int
,	O
6	int
,	O
29	int
,	O
51	int
,	O
52	int
,	O
10	int
,	O
7	int
,	O
53	int
,	O
10	int
,	O
8	int
,	O
9	int
,	O
55	int
,	O
56	int
,	O
57	int
,	O
58	int
,	O
63	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
64	int
,	O
72	int
,	O
54	int
,	O
57	int
,	O
28	int
,	O
59	int
,	O
60	int
,	O
1	int
,	O
11	int
,	O
12	int
,	O
13	int
,	O
14	int
,	O
15	int
,	O
16	int
,	O
17	int
,	O
18	int
,	O
19	int
,	O
20	int
,	O
21	int
,	O
22	int
,	O
23	int
,	O
24	int
,	O
25	int
,	O
26	int
,	O
27	int
,	O
65	int
,	O
66	int
,	O
67	int
,	O
74	int
,	O
75	int
,	O
79	int
,	O
81	int
,	O
83	int
,	O
84	int
,	O
86	int
,	O
88	int
,	O
91	int
,	O
54	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
61	int
,	O
62	int
,	O
71	int
,	O
60	int
,	O
4	int
,	O
47	int
,	O
77	int
,	O
77	int
,	O
72	int
,	O
4	int
,	O
77	int
,	O
4	int
,	O
77	int
,	O
32	int
,	O
42	int
,	O
44	int
,	O
68	int
,	O
69	int
,	O
70	int
,	O
72	int
,	O
72	int
,	O
4	int
,	O
85	int
,	O
4	int
,	O
4	int
,	O
71	int
,	O
89	int
,	O
90	int
,	O
89	int
,	O
72	int
,	O
5	int
,	O
82	int
,	O
5	int
,	O
80	int
,	O
72	int
,	O
66	int
,	O
54	int
,	O
54	int
,	O
54	int
,	O
54	int
,	O
54	int
,	O
53	int
,	O
54	int
,	O
54	int
,	O
54	int
,	O
54	int
,	O
54	int
,	O
62	int
,	O
39	int
,	O
46	int
,	O
5	int
,	O
39	int
,	O
46	int
,	O
46	int
,	O
72	int
,	O
87	int
,	O
72	int
,	O
78	int
,	O
78	int
,	O
69	int
,	O
44	int
,	O
72	int
,	O
92	int
,	O
68	int
,	O
30	int
,	O
31	int
,	O
33	int
,	O
34	int
,	O
35	int
,	O
36	int
,	O
37	int
,	O
38	int
,	O
40	int
,	O
41	int
,	O
43	int
,	O
10	int
,	O
4	int
,	O
46	int
,	O
46	int
,	O
90	int
,	O
5	int
,	O
3	int
,	O
4	int
,	O
78	int
,	O
72	int
,	O
78	int
,	O
48	int
,	O
78	int
,	O
72	int
,	O
78	int
,	O
72	int
,	O
78	int
,	O
78	int
,	O
78	int
,	O
93	int
,	O
45	int
,	O
69	int
,	O
69	int
,	O
5	int
,	O
71	int
,	O
5	int
,	O
71	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
72	int
,	O
73	int
,	O
92	int
,	O
73	int
,	O
72	int
,	O
78	int
,	O
43	int
,	O
43	int
,	O
43	int
,	O
78	int
,	O
78	int
,	O
61	int
,	O
78	int
,	O
78	int
,	O
78	int
,	O
5	int
,	O
5	int
,	O
45	int
,	O
5	int
,	O
5	int
,	O
72	int
,	O
76	int
,	O
76	int
}	O
;	O
static	O
void	O
yy_symbol_value_print	function
(	O
FILE	struct
*	O
yyoutput	pointer
,	O
int	O
yytype	int
,	O
YYSTYPE	union
const	O
*	O
const	O
yyvaluep	pointer
,	O
YYLTYPE	O
const	O
*	O
const	O
yylocationp	pointer
)	O
{	O
FILE	struct
*	O
yyo	pointer
=	O
yyoutput	pointer
;	O
YYUSE	O
(	O
yyo	pointer
)	O
;	O
if	O
(	O
!	O
yyvaluep	pointer
)	O
return	O
;	O
YYUSE	O
(	O
yylocationp	pointer
)	O
;	O
YYUSE	O
(	O
yyoutput	pointer
)	O
;	O
switch	O
(	O
yytype	int
)	O
{	O
default	O
:	O
break	O
;	O
}	O
}	O
static	O
void	O
yy_symbol_print	function
(	O
FILE	struct
*	O
yyoutput	pointer
,	O
int	O
yytype	int
,	O
YYSTYPE	union
const	O
*	O
const	O
yyvaluep	pointer
,	O
YYLTYPE	O
const	O
*	O
const	O
yylocationp	pointer
)	O
{	O
if	O
(	O
yytype	int
<	O
YYNTOKENS	int
)	O
YYFPRINTF	O
(	O
yyoutput	pointer
,	O
"token %s ("	pointer
,	O
yytname	array
[	O
yytype	int
]	O
)	O
;	O
else	O
YYFPRINTF	O
(	O
yyoutput	pointer
,	O
"nterm %s ("	pointer
,	O
yytname	array
[	O
yytype	int
]	O
)	O
;	O
YY_LOCATION_PRINT	O
(	O
yyoutput	pointer
,	O
*	O
yylocationp	pointer
)	O
;	O
YYFPRINTF	O
(	O
yyoutput	pointer
,	O
": "	pointer
)	O
;	O
yy_symbol_value_print	function
(	O
yyoutput	pointer
,	O
yytype	int
,	O
yyvaluep	pointer
,	O
yylocationp	pointer
)	O
;	O
YYFPRINTF	O
(	O
yyoutput	pointer
,	O
")"	pointer
)	O
;	O
}	O
static	O
void	O
yy_stack_print	function
(	O
yytype_int16	short
*	O
yybottom	pointer
,	O
yytype_int16	short
*	O
yytop	pointer
)	O
{	O
YYFPRINTF	O
(	O
stderr	pointer
,	O
"Stack now"	pointer
)	O
;	O
for	O
(	O
;	O
yybottom	pointer
<=	O
yytop	pointer
;	O
yybottom	pointer
++	O
)	O
{	O
int	O
yybot	int
=	O
*	O
yybottom	pointer
;	O
YYFPRINTF	O
(	O
stderr	pointer
,	O
" %d"	pointer
,	O
yybot	int
)	O
;	O
}	O
YYFPRINTF	O
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
static	O
void	O
yy_reduce_print	function
(	O
YYSTYPE	union
*	O
yyvsp	pointer
,	O
YYLTYPE	O
*	O
yylsp	pointer
,	O
int	O
yyrule	int
)	O
{	O
int	O
yynrhs	int
=	O
yyr2	array
[	O
yyrule	int
]	O
;	O
int	O
yyi	int
;	O
unsigned	O
long	O
int	O
yylno	long
=	O
yyrline	array
[	O
yyrule	int
]	O
;	O
YYFPRINTF	O
(	O
stderr	pointer
,	O
"Reducing stack by rule %d (line %lu):\n"	pointer
,	O
yyrule	int
-	O
1	int
,	O
yylno	long
)	O
;	O
for	O
(	O
yyi	int
=	O
0	int
;	O
yyi	int
<	O
yynrhs	int
;	O
yyi	int
++	O
)	O
{	O
YYFPRINTF	O
(	O
stderr	pointer
,	O
"   $%d = "	pointer
,	O
yyi	int
+	O
1	int
)	O
;	O
yy_symbol_print	function
(	O
stderr	pointer
,	O
yyrhs	array
[	O
yyprhs	array
[	O
yyrule	int
]	O
+	O
yyi	int
]	O
,	O
&	O
(	O
yyvsp	pointer
[	O
(	O
yyi	int
+	O
1	int
)	O
-	O
(	O
yynrhs	int
)	O
]	O
)	O
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
yyi	int
+	O
1	int
)	O
-	O
(	O
yynrhs	int
)	O
]	O
)	O
)	O
;	O
YYFPRINTF	O
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
}	O
int	O
yydebug	int
;	O
static	O
YYSIZE_T	O
yytnamerr	function
(	O
char	O
*	O
yyres	pointer
,	O
const	O
char	O
*	O
yystr	pointer
)	O
{	O
if	O
(	O
*	O
yystr	pointer
==	O
'"'	O
)	O
{	O
YYSIZE_T	O
yyn	long
=	O
0	int
;	O
char	O
const	O
*	O
yyp	pointer
=	O
yystr	pointer
;	O
for	O
(	O
;	O
;	O
)	O
switch	O
(	O
*	O
++	O
yyp	pointer
)	O
{	O
case	O
'\''	O
:	O
case	O
','	O
:	O
goto	O
do_not_strip_quotes	O
;	O
case	O
'\\'	O
:	O
if	O
(	O
*	O
++	O
yyp	pointer
!=	O
'\\'	O
)	O
goto	O
do_not_strip_quotes	O
;	O
default	O
:	O
if	O
(	O
yyres	pointer
)	O
yyres	pointer
[	O
yyn	long
]	O
=	O
*	O
yyp	pointer
;	O
yyn	long
++	O
;	O
break	O
;	O
case	O
'"'	O
:	O
if	O
(	O
yyres	pointer
)	O
yyres	pointer
[	O
yyn	long
]	O
=	O
'\0'	O
;	O
return	O
yyn	long
;	O
}	O
do_not_strip_quotes	O
:	O
;	O
}	O
if	O
(	O
!	O
yyres	pointer
)	O
return	O
yystrlen	O
(	O
yystr	pointer
)	O
;	O
return	O
yystpcpy	O
(	O
yyres	pointer
,	O
yystr	pointer
)	O
-	O
yyres	pointer
;	O
}	O
static	O
int	O
yysyntax_error	function
(	O
YYSIZE_T	O
*	O
yymsg_alloc	pointer
,	O
char	O
*	O
*	O
yymsg	pointer
,	O
yytype_int16	short
*	O
yyssp	pointer
,	O
int	O
yytoken	int
)	O
{	O
YYSIZE_T	O
yysize0	long
=	O
yytnamerr	function
(	O
YY_NULL	int
,	O
yytname	array
[	O
yytoken	int
]	O
)	O
;	O
YYSIZE_T	O
yysize	long
=	O
yysize0	long
;	O
enum	O
{	O
YYERROR_VERBOSE_ARGS_MAXIMUM	int
=	O
5	int
}	O
;	O
const	O
char	O
*	O
yyformat	pointer
=	O
YY_NULL	int
;	O
char	O
const	O
*	O
yyarg	array
[	O
YYERROR_VERBOSE_ARGS_MAXIMUM	int
]	O
;	O
int	O
yycount	int
=	O
0	int
;	O
if	O
(	O
yytoken	int
!=	O
YYEMPTY	O
)	O
{	O
int	O
yyn	long
=	O
yypact	array
[	O
*	O
yyssp	pointer
]	O
;	O
yyarg	array
[	O
yycount	int
++	O
]	O
=	O
yytname	array
[	O
yytoken	int
]	O
;	O
if	O
(	O
!	O
yypact_value_is_default	O
(	O
yyn	long
)	O
)	O
{	O
int	O
yyxbegin	int
=	O
yyn	long
<	O
0	int
?	O
-	O
yyn	long
:	O
0	int
;	O
int	O
yychecklim	int
=	O
YYLAST	int
-	O
yyn	long
+	O
1	int
;	O
int	O
yyxend	int
=	O
yychecklim	int
<	O
YYNTOKENS	int
?	O
yychecklim	int
:	O
YYNTOKENS	int
;	O
int	O
yyx	int
;	O
for	O
(	O
yyx	int
=	O
yyxbegin	int
;	O
yyx	int
<	O
yyxend	int
;	O
++	O
yyx	int
)	O
if	O
(	O
yycheck	array
[	O
yyx	int
+	O
yyn	long
]	O
==	O
yyx	int
&&	O
yyx	int
!=	O
YYTERROR	int
&&	O
!	O
yytable_value_is_error	O
(	O
yytable	array
[	O
yyx	int
+	O
yyn	long
]	O
)	O
)	O
{	O
if	O
(	O
yycount	int
==	O
YYERROR_VERBOSE_ARGS_MAXIMUM	int
)	O
{	O
yycount	int
=	O
1	int
;	O
yysize	long
=	O
yysize0	long
;	O
break	O
;	O
}	O
yyarg	array
[	O
yycount	int
++	O
]	O
=	O
yytname	array
[	O
yyx	int
]	O
;	O
{	O
YYSIZE_T	O
yysize1	long
=	O
yysize	long
+	O
yytnamerr	function
(	O
YY_NULL	int
,	O
yytname	array
[	O
yyx	int
]	O
)	O
;	O
if	O
(	O
!	O
(	O
yysize	long
<=	O
yysize1	long
&&	O
yysize1	long
<=	O
YYSTACK_ALLOC_MAXIMUM	O
)	O
)	O
return	O
2	int
;	O
yysize	long
=	O
yysize1	long
;	O
}	O
}	O
}	O
}	O
switch	O
(	O
yycount	int
)	O
{	O
YYCASE_	O
(	O
0	int
,	O
YY_	O
(	O
"syntax error"	pointer
)	O
)	O
;	O
YYCASE_	O
(	O
1	int
,	O
YY_	O
(	O
"syntax error, unexpected %s"	pointer
)	O
)	O
;	O
YYCASE_	O
(	O
2	int
,	O
YY_	O
(	O
"syntax error, unexpected %s, expecting %s"	pointer
)	O
)	O
;	O
YYCASE_	O
(	O
3	int
,	O
YY_	O
(	O
"syntax error, unexpected %s, expecting %s or %s"	pointer
)	O
)	O
;	O
YYCASE_	O
(	O
4	int
,	O
YY_	O
(	O
"syntax error, unexpected %s, expecting %s or %s or %s"	pointer
)	O
)	O
;	O
YYCASE_	O
(	O
5	int
,	O
YY_	O
(	O
"syntax error, unexpected %s, expecting %s or %s or %s or %s"	pointer
)	O
)	O
;	O
}	O
{	O
YYSIZE_T	O
yysize1	long
=	O
yysize	long
+	O
yystrlen	O
(	O
yyformat	pointer
)	O
;	O
if	O
(	O
!	O
(	O
yysize	long
<=	O
yysize1	long
&&	O
yysize1	long
<=	O
YYSTACK_ALLOC_MAXIMUM	O
)	O
)	O
return	O
2	int
;	O
yysize	long
=	O
yysize1	long
;	O
}	O
if	O
(	O
*	O
yymsg_alloc	pointer
<	O
yysize	long
)	O
{	O
*	O
yymsg_alloc	pointer
=	O
2	int
*	O
yysize	long
;	O
if	O
(	O
!	O
(	O
yysize	long
<=	O
*	O
yymsg_alloc	pointer
&&	O
*	O
yymsg_alloc	pointer
<=	O
YYSTACK_ALLOC_MAXIMUM	O
)	O
)	O
*	O
yymsg_alloc	pointer
=	O
YYSTACK_ALLOC_MAXIMUM	O
;	O
return	O
1	int
;	O
}	O
{	O
char	O
*	O
yyp	pointer
=	O
*	O
yymsg	pointer
;	O
int	O
yyi	int
=	O
0	int
;	O
while	O
(	O
(	O
*	O
yyp	pointer
=	O
*	O
yyformat	pointer
)	O
!=	O
'\0'	O
)	O
if	O
(	O
*	O
yyp	pointer
==	O
'%'	O
&&	O
yyformat	pointer
[	O
1	int
]	O
==	O
's'	O
&&	O
yyi	int
<	O
yycount	int
)	O
{	O
yyp	pointer
+=	O
yytnamerr	function
(	O
yyp	pointer
,	O
yyarg	array
[	O
yyi	int
++	O
]	O
)	O
;	O
yyformat	pointer
+=	O
2	int
;	O
}	O
else	O
{	O
yyp	pointer
++	O
;	O
yyformat	pointer
++	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
yydestruct	function
(	O
const	O
char	O
*	O
yymsg	pointer
,	O
int	O
yytype	int
,	O
YYSTYPE	union
*	O
yyvaluep	pointer
,	O
YYLTYPE	O
*	O
yylocationp	pointer
)	O
{	O
YYUSE	O
(	O
yyvaluep	pointer
)	O
;	O
YYUSE	O
(	O
yylocationp	pointer
)	O
;	O
if	O
(	O
!	O
yymsg	pointer
)	O
yymsg	pointer
=	O
"Deleting"	pointer
;	O
YY_SYMBOL_PRINT	O
(	O
yymsg	pointer
,	O
yytype	int
,	O
yyvaluep	pointer
,	O
yylocationp	pointer
)	O
;	O
switch	O
(	O
yytype	int
)	O
{	O
default	O
:	O
break	O
;	O
}	O
}	O
int	O
yychar	int
;	O
YYSTYPE	union
yylval	union
YY_INITIAL_VALUE	O
(	O
yyval_default	O
)	O
;	O
YYLTYPE	O
yylloc	struct
;	O
int	O
yynerrs	int
;	O
int	O
yyparse	function
(	O
void	O
)	O
{	O
int	O
yystate	int
;	O
int	O
yyerrstatus	int
;	O
yytype_int16	short
yyssa	array
[	O
YYINITDEPTH	int
]	O
;	O
yytype_int16	short
*	O
yyss	pointer
;	O
yytype_int16	short
*	O
yyssp	pointer
;	O
YYSTYPE	union
yyvsa	array
[	O
YYINITDEPTH	int
]	O
;	O
YYSTYPE	union
*	O
yyvs	pointer
;	O
YYSTYPE	union
*	O
yyvsp	pointer
;	O
YYLTYPE	O
yylsa	array
[	O
YYINITDEPTH	int
]	O
;	O
YYLTYPE	O
*	O
yyls	pointer
;	O
YYLTYPE	O
*	O
yylsp	pointer
;	O
YYLTYPE	O
yyerror_range	array
[	O
3	int
]	O
;	O
YYSIZE_T	O
yystacksize	long
;	O
int	O
yyn	long
;	O
int	O
yyresult	int
;	O
int	O
yytoken	int
=	O
0	int
;	O
YYSTYPE	union
yyval	union
;	O
YYLTYPE	O
yyloc	struct
;	O
char	O
yymsgbuf	array
[	O
128	int
]	O
;	O
char	O
*	O
yymsg	pointer
=	O
yymsgbuf	array
;	O
YYSIZE_T	O
yymsg_alloc	pointer
=	O
sizeof	O
yymsgbuf	array
;	O
int	O
yylen	int
=	O
0	int
;	O
yyssp	pointer
=	O
yyss	pointer
=	O
yyssa	array
;	O
yyvsp	pointer
=	O
yyvs	pointer
=	O
yyvsa	array
;	O
yylsp	pointer
=	O
yyls	pointer
=	O
yylsa	array
;	O
yystacksize	long
=	O
YYINITDEPTH	int
;	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Starting parse\n"	pointer
)	O
)	O
;	O
yystate	int
=	O
0	int
;	O
yyerrstatus	int
=	O
0	int
;	O
yynerrs	int
=	O
0	int
;	O
yychar	int
=	O
YYEMPTY	O
;	O
yylsp	pointer
[	O
0	int
]	O
=	O
yylloc	struct
;	O
goto	O
yysetstate	O
;	O
yynewstate	O
:	O
yyssp	pointer
++	O
;	O
yysetstate	O
:	O
*	O
yyssp	pointer
=	O
yystate	int
;	O
if	O
(	O
yyss	pointer
+	O
yystacksize	long
-	O
1	int
<=	O
yyssp	pointer
)	O
{	O
YYSIZE_T	O
yysize	long
=	O
yyssp	pointer
-	O
yyss	pointer
+	O
1	int
;	O
if	O
(	O
YYMAXDEPTH	int
<=	O
yystacksize	long
)	O
goto	O
yyexhaustedlab	O
;	O
yystacksize	long
*=	O
2	int
;	O
if	O
(	O
YYMAXDEPTH	int
<	O
yystacksize	long
)	O
yystacksize	long
=	O
YYMAXDEPTH	int
;	O
{	O
yytype_int16	short
*	O
yyss1	pointer
=	O
yyss	pointer
;	O
union	O
yyalloc	union
*	O
yyptr	pointer
=	O
(	O
union	O
yyalloc	union
*	O
)	O
YYSTACK_ALLOC	O
(	O
YYSTACK_BYTES	O
(	O
yystacksize	long
)	O
)	O
;	O
if	O
(	O
!	O
yyptr	pointer
)	O
goto	O
yyexhaustedlab	O
;	O
YYSTACK_RELOCATE	O
(	O
yyss_alloc	short
,	O
yyss	pointer
)	O
;	O
YYSTACK_RELOCATE	O
(	O
yyvs_alloc	union
,	O
yyvs	pointer
)	O
;	O
YYSTACK_RELOCATE	O
(	O
yyls_alloc	struct
,	O
yyls	pointer
)	O
;	O
if	O
(	O
yyss1	pointer
!=	O
yyssa	array
)	O
YYSTACK_FREE	O
(	O
yyss1	pointer
)	O
;	O
}	O
yyssp	pointer
=	O
yyss	pointer
+	O
yysize	long
-	O
1	int
;	O
yyvsp	pointer
=	O
yyvs	pointer
+	O
yysize	long
-	O
1	int
;	O
yylsp	pointer
=	O
yyls	pointer
+	O
yysize	long
-	O
1	int
;	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Stack size increased to %lu\n"	pointer
,	O
(	O
unsigned	O
long	O
int	O
)	O
yystacksize	long
)	O
)	O
;	O
if	O
(	O
yyss	pointer
+	O
yystacksize	long
-	O
1	int
<=	O
yyssp	pointer
)	O
YYABORT	O
;	O
}	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Entering state %d\n"	pointer
,	O
yystate	int
)	O
)	O
;	O
if	O
(	O
yystate	int
==	O
YYFINAL	int
)	O
YYACCEPT	O
;	O
goto	O
yybackup	O
;	O
yybackup	O
:	O
yyn	long
=	O
yypact	array
[	O
yystate	int
]	O
;	O
if	O
(	O
yypact_value_is_default	O
(	O
yyn	long
)	O
)	O
goto	O
yydefault	O
;	O
if	O
(	O
yychar	int
==	O
YYEMPTY	O
)	O
{	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Reading a token: "	pointer
)	O
)	O
;	O
yychar	int
=	O
YYLEX	O
;	O
}	O
if	O
(	O
yychar	int
<=	O
YYEOF	int
)	O
{	O
yychar	int
=	O
yytoken	int
=	O
YYEOF	int
;	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Now at end of input.\n"	pointer
)	O
)	O
;	O
}	O
else	O
{	O
yytoken	int
=	O
YYTRANSLATE	O
(	O
yychar	int
)	O
;	O
YY_SYMBOL_PRINT	O
(	O
"Next token is"	pointer
,	O
yytoken	int
,	O
&	O
yylval	union
,	O
&	O
yylloc	struct
)	O
;	O
}	O
yyn	long
+=	O
yytoken	int
;	O
if	O
(	O
yyn	long
<	O
0	int
||	O
YYLAST	int
<	O
yyn	long
||	O
yycheck	array
[	O
yyn	long
]	O
!=	O
yytoken	int
)	O
goto	O
yydefault	O
;	O
yyn	long
=	O
yytable	array
[	O
yyn	long
]	O
;	O
if	O
(	O
yyn	long
<=	O
0	int
)	O
{	O
if	O
(	O
yytable_value_is_error	O
(	O
yyn	long
)	O
)	O
goto	O
yyerrlab	O
;	O
yyn	long
=	O
-	O
yyn	long
;	O
goto	O
yyreduce	O
;	O
}	O
if	O
(	O
yyerrstatus	int
)	O
yyerrstatus	int
--	O
;	O
YY_SYMBOL_PRINT	O
(	O
"Shifting"	pointer
,	O
yytoken	int
,	O
&	O
yylval	union
,	O
&	O
yylloc	struct
)	O
;	O
yychar	int
=	O
YYEMPTY	O
;	O
yystate	int
=	O
yyn	long
;	O
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	O
*	O
++	O
yyvsp	pointer
=	O
yylval	union
;	O
YY_IGNORE_MAYBE_UNINITIALIZED_END	O
*	O
++	O
yylsp	pointer
=	O
yylloc	struct
;	O
goto	O
yynewstate	O
;	O
yydefault	O
:	O
yyn	long
=	O
yydefact	array
[	O
yystate	int
]	O
;	O
if	O
(	O
yyn	long
==	O
0	int
)	O
goto	O
yyerrlab	O
;	O
goto	O
yyreduce	O
;	O
yyreduce	O
:	O
yylen	int
=	O
yyr2	array
[	O
yyn	long
]	O
;	O
yyval	union
=	O
yyvsp	pointer
[	O
1	int
-	O
yylen	int
]	O
;	O
YYLLOC_DEFAULT	O
(	O
yyloc	struct
,	O
(	O
yylsp	pointer
-	O
yylen	int
)	O
,	O
yylen	int
)	O
;	O
YY_REDUCE_PRINT	O
(	O
yyn	long
)	O
;	O
switch	O
(	O
yyn	long
)	O
{	O
case	O
3	int
:	O
{	O
if	O
(	O
errors	int
)	O
YYERROR	O
;	O
}	O
break	O
;	O
case	O
4	int
:	O
{	O
if	O
(	O
parse_old_rc	function
(	O
)	O
)	O
YYERROR	O
;	O
}	O
break	O
;	O
case	O
5	int
:	O
{	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
version	function
)	O
.	O
major	int
==	O
2	int
&&	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
version	function
)	O
.	O
minor	int
==	O
0	int
)	O
{	O
cflex_normal	function
(	O
)	O
;	O
}	O
else	O
{	O
cferror	function
(	O
&	O
(	O
yylsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
)	O
,	O
_	O
(	O
"unsupported configuration file version"	pointer
)	O
)	O
;	O
YYERROR	O
;	O
}	O
}	O
break	O
;	O
case	O
19	int
:	O
{	O
struct	O
cfloc	struct
loc	pointer
;	O
loc	pointer
.	O
beg	struct
=	O
(	O
yylsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
)	O
.	O
beg	struct
;	O
loc	pointer
.	O
end	pointer
=	O
(	O
yylsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
)	O
.	O
end	pointer
;	O
global_attrib_set	function
(	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
global_attrib	struct
)	O
,	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
arglist	struct
)	O
.	O
argc	int
,	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
arglist	struct
)	O
.	O
head	pointer
,	O
&	O
loc	pointer
)	O
;	O
arglist_free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
arglist	struct
)	O
.	O
head	pointer
)	O
;	O
}	O
break	O
;	O
case	O
20	int
:	O
{	O
(	O
yyval	union
.	O
arglist	struct
)	O
.	O
head	pointer
=	O
(	O
yyval	union
.	O
arglist	struct
)	O
.	O
tail	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
arg	struct
)	O
;	O
(	O
yyval	union
.	O
arglist	struct
)	O
.	O
argc	int
=	O
1	int
;	O
}	O
break	O
;	O
case	O
21	int
:	O
{	O
LIST_APPEND	O
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
arg	struct
)	O
,	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
arglist	struct
)	O
.	O
head	pointer
,	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
arglist	struct
)	O
.	O
tail	pointer
)	O
;	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
arglist	struct
)	O
.	O
argc	int
++	O
;	O
(	O
yyval	union
.	O
arglist	struct
)	O
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
arglist	struct
)	O
;	O
}	O
break	O
;	O
case	O
22	int
:	O
{	O
(	O
yyval	union
.	O
arg	struct
)	O
=	O
xcalloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
(	O
yyval	union
.	O
arg	struct
)	O
)	O
)	O
;	O
(	O
yyval	union
.	O
arg	struct
)	O
->	O
next	pointer
=	O
NULL	O
;	O
(	O
yyval	union
.	O
arg	struct
)	O
->	O
loc	pointer
=	O
(	O
yylsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
)	O
;	O
(	O
yyval	union
.	O
arg	struct
)	O
->	O
isnum	int
=	O
0	int
;	O
(	O
yyval	union
.	O
arg	struct
)	O
->	O
strval	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
str	pointer
)	O
;	O
}	O
break	O
;	O
case	O
23	int
:	O
{	O
(	O
yyval	union
.	O
arg	struct
)	O
=	O
xcalloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
(	O
yyval	union
.	O
arg	struct
)	O
)	O
)	O
;	O
(	O
yyval	union
.	O
arg	struct
)	O
->	O
next	pointer
=	O
NULL	O
;	O
(	O
yyval	union
.	O
arg	struct
)	O
->	O
loc	pointer
=	O
(	O
yylsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
)	O
;	O
(	O
yyval	union
.	O
arg	struct
)	O
->	O
isnum	int
=	O
1	int
;	O
(	O
yyval	union
.	O
arg	struct
)	O
->	O
strval	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
num	long
)	O
.	O
strval	pointer
;	O
(	O
yyval	union
.	O
arg	struct
)	O
->	O
intval	int
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
num	long
)	O
.	O
intval	int
;	O
}	O
break	O
;	O
case	O
24	int
:	O
{	O
current_rule	pointer
=	O
new_rush_rule	function
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
str	pointer
)	O
)	O
;	O
current_rule	pointer
->	O
file	pointer
=	O
(	O
yylsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
)	O
.	O
beg	struct
.	O
filename	pointer
;	O
current_rule	pointer
->	O
line	int
=	O
(	O
yylsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
)	O
.	O
beg	struct
.	O
line	int
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
str	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
25	int
:	O
{	O
(	O
yyval	union
.	O
str	pointer
)	O
=	O
NULL	O
;	O
}	O
break	O
;	O
case	O
39	int
:	O
{	O
skiptoeol	function
(	O
)	O
;	O
restorenormal	function
(	O
)	O
;	O
yyerrok	O
;	O
yyclearin	O
;	O
errors	int
=	O
1	int
;	O
}	O
break	O
;	O
case	O
40	int
:	O
{	O
if	O
(	O
current_rule	pointer
->	O
test_node	struct
)	O
{	O
struct	O
test_node	struct
*	O
np	pointer
=	O
new_test_node	function
(	O
test_and	int
)	O
;	O
np	pointer
->	O
v	union
.	O
arg	struct
[	O
0	int
]	O
=	O
current_rule	pointer
->	O
test_node	struct
;	O
np	pointer
->	O
v	union
.	O
arg	struct
[	O
1	int
]	O
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
node	pointer
)	O
;	O
current_rule	pointer
->	O
test_node	struct
=	O
np	pointer
;	O
}	O
else	O
current_rule	pointer
->	O
test_node	struct
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
node	pointer
)	O
;	O
}	O
break	O
;	O
case	O
42	int
:	O
{	O
(	O
yyval	union
.	O
node	pointer
)	O
=	O
new_test_node	function
(	O
test_and	int
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
arg	struct
[	O
0	int
]	O
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
node	pointer
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
arg	struct
[	O
1	int
]	O
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
node	pointer
)	O
;	O
}	O
break	O
;	O
case	O
43	int
:	O
{	O
(	O
yyval	union
.	O
node	pointer
)	O
=	O
new_test_node	function
(	O
test_or	int
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
arg	struct
[	O
0	int
]	O
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
node	pointer
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
arg	struct
[	O
1	int
]	O
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
node	pointer
)	O
;	O
}	O
break	O
;	O
case	O
45	int
:	O
{	O
(	O
yyval	union
.	O
node	pointer
)	O
=	O
new_test_node	function
(	O
test_not	int
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
arg	struct
[	O
0	int
]	O
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
node	pointer
)	O
;	O
}	O
break	O
;	O
case	O
46	int
:	O
{	O
(	O
yyval	union
.	O
node	pointer
)	O
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
node	pointer
)	O
;	O
}	O
break	O
;	O
case	O
47	int
:	O
{	O
(	O
yyval	union
.	O
node	pointer
)	O
=	O
new_test_node	function
(	O
test_cmps	int
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
op	enum
=	O
cmp_match	int
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
larg	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
str	pointer
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
rarg	union
.	O
rx	struct
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
regex	struct
)	O
;	O
}	O
break	O
;	O
case	O
48	int
:	O
{	O
struct	O
test_node	struct
*	O
np	pointer
=	O
new_test_node	function
(	O
test_cmps	int
)	O
;	O
np	pointer
->	O
v	union
.	O
cmp	struct
.	O
op	enum
=	O
cmp_match	int
;	O
np	pointer
->	O
v	union
.	O
cmp	struct
.	O
larg	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
str	pointer
)	O
;	O
np	pointer
->	O
v	union
.	O
cmp	struct
.	O
rarg	union
.	O
rx	struct
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
regex	struct
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
=	O
new_test_node	function
(	O
test_not	int
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
arg	struct
[	O
0	int
]	O
=	O
np	pointer
;	O
}	O
break	O
;	O
case	O
49	int
:	O
{	O
(	O
yyval	union
.	O
node	pointer
)	O
=	O
new_test_node	function
(	O
test_cmps	int
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
op	enum
=	O
cmp_eq	int
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
larg	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
str	pointer
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
rarg	union
.	O
str	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
str	pointer
)	O
;	O
}	O
break	O
;	O
case	O
50	int
:	O
{	O
(	O
yyval	union
.	O
node	pointer
)	O
=	O
new_test_node	function
(	O
test_cmps	int
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
op	enum
=	O
cmp_ne	int
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
larg	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
str	pointer
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
rarg	union
.	O
str	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
str	pointer
)	O
;	O
}	O
break	O
;	O
case	O
51	int
:	O
{	O
(	O
yyval	union
.	O
node	pointer
)	O
=	O
new_test_node	function
(	O
test_cmpn	int
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
op	enum
=	O
cmp_eq	int
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
larg	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
str	pointer
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
rarg	union
.	O
num	long
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
num	long
)	O
.	O
intval	int
;	O
}	O
break	O
;	O
case	O
52	int
:	O
{	O
(	O
yyval	union
.	O
node	pointer
)	O
=	O
new_test_node	function
(	O
test_cmpn	int
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
op	enum
=	O
cmp_ne	int
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
larg	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
str	pointer
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
rarg	union
.	O
num	long
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
num	long
)	O
.	O
intval	int
;	O
}	O
break	O
;	O
case	O
53	int
:	O
{	O
(	O
yyval	union
.	O
node	pointer
)	O
=	O
new_test_node	function
(	O
test_cmpn	int
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
op	enum
=	O
cmp_lt	int
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
larg	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
str	pointer
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
rarg	union
.	O
num	long
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
num	long
)	O
.	O
intval	int
;	O
}	O
break	O
;	O
case	O
54	int
:	O
{	O
(	O
yyval	union
.	O
node	pointer
)	O
=	O
new_test_node	function
(	O
test_cmpn	int
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
op	enum
=	O
cmp_le	int
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
larg	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
str	pointer
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
rarg	union
.	O
num	long
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
num	long
)	O
.	O
intval	int
;	O
}	O
break	O
;	O
case	O
55	int
:	O
{	O
(	O
yyval	union
.	O
node	pointer
)	O
=	O
new_test_node	function
(	O
test_cmpn	int
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
op	enum
=	O
cmp_gt	int
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
larg	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
str	pointer
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
rarg	union
.	O
num	long
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
num	long
)	O
.	O
intval	int
;	O
}	O
break	O
;	O
case	O
56	int
:	O
{	O
(	O
yyval	union
.	O
node	pointer
)	O
=	O
new_test_node	function
(	O
test_cmpn	int
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
op	enum
=	O
cmp_ge	int
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
larg	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
str	pointer
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
rarg	union
.	O
num	long
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
num	long
)	O
.	O
intval	int
;	O
}	O
break	O
;	O
case	O
57	int
:	O
{	O
(	O
yyval	union
.	O
node	pointer
)	O
=	O
new_test_node	function
(	O
test_in	int
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
op	enum
=	O
cmp_in	int
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
larg	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
str	pointer
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
cmp	struct
.	O
rarg	union
.	O
strv	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
strlist	struct
)	O
.	O
argv	pointer
;	O
}	O
break	O
;	O
case	O
58	int
:	O
{	O
(	O
yyval	union
.	O
node	pointer
)	O
=	O
new_test_node	function
(	O
test_group	int
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
groups	pointer
=	O
xcalloc	function
(	O
2	int
,	O
sizeof	O
(	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
groups	pointer
[	O
0	int
]	O
)	O
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
groups	pointer
[	O
0	int
]	O
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
str	pointer
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
groups	pointer
[	O
1	int
]	O
=	O
NULL	O
;	O
}	O
break	O
;	O
case	O
59	int
:	O
{	O
(	O
yyval	union
.	O
node	pointer
)	O
=	O
new_test_node	function
(	O
test_group	int
)	O
;	O
(	O
yyval	union
.	O
node	pointer
)	O
->	O
v	union
.	O
groups	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
strlist	struct
)	O
.	O
argv	pointer
;	O
}	O
break	O
;	O
case	O
64	int
:	O
{	O
(	O
yyval	union
.	O
str	pointer
)	O
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
num	long
)	O
.	O
strval	pointer
;	O
}	O
break	O
;	O
case	O
65	int
:	O
{	O
int	O
rc	int
=	O
regcomp	O
(	O
&	O
(	O
yyval	union
.	O
regex	struct
)	O
,	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
str	pointer
)	O
,	O
re_flags	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
char	O
errbuf	array
[	O
512	int
]	O
;	O
regerror	O
(	O
rc	int
,	O
&	O
(	O
yyval	union
.	O
regex	struct
)	O
,	O
errbuf	array
,	O
sizeof	O
(	O
errbuf	array
)	O
)	O
;	O
cferror	function
(	O
&	O
(	O
yylsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
)	O
,	O
_	O
(	O
"invalid regexp: %s"	pointer
)	O
,	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
str	pointer
)	O
)	O
;	O
YYERROR	O
;	O
}	O
}	O
break	O
;	O
case	O
66	int
:	O
{	O
struct	O
transform_node	struct
*	O
node	pointer
;	O
node	pointer
=	O
new_transform_node	function
(	O
current_rule	pointer
,	O
transform_set	int
)	O
;	O
node	pointer
->	O
target	struct
.	O
type	enum
=	O
target_arg	int
;	O
node	pointer
->	O
target	struct
.	O
v	union
.	O
arg	struct
.	O
ins	int
=	O
0	int
;	O
node	pointer
->	O
target	struct
.	O
v	union
.	O
arg	struct
.	O
idx	int
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
intval	int
)	O
;	O
node	pointer
->	O
v	union
.	O
xf	struct
.	O
pattern	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
str	pointer
)	O
;	O
node	pointer
->	O
v	union
.	O
xf	struct
.	O
trans	pointer
=	O
NULL	O
;	O
}	O
break	O
;	O
case	O
67	int
:	O
{	O
struct	O
transform_node	struct
*	O
node	pointer
;	O
node	pointer
=	O
new_transform_node	function
(	O
current_rule	pointer
,	O
transform_set	int
)	O
;	O
node	pointer
->	O
target	struct
.	O
type	enum
=	O
target_arg	int
;	O
node	pointer
->	O
target	struct
.	O
v	union
.	O
arg	struct
.	O
ins	int
=	O
1	int
;	O
node	pointer
->	O
target	struct
.	O
v	union
.	O
arg	struct
.	O
idx	int
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
intval	int
)	O
;	O
node	pointer
->	O
v	union
.	O
xf	struct
.	O
pattern	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
str	pointer
)	O
;	O
node	pointer
->	O
v	union
.	O
xf	struct
.	O
trans	pointer
=	O
NULL	O
;	O
}	O
break	O
;	O
case	O
68	int
:	O
{	O
struct	O
transform_node	struct
*	O
node	pointer
;	O
node	pointer
=	O
new_transform_node	function
(	O
current_rule	pointer
,	O
transform_set	int
)	O
;	O
node	pointer
->	O
target	struct
.	O
type	enum
=	O
target_arg	int
;	O
node	pointer
->	O
target	struct
.	O
v	union
.	O
arg	struct
.	O
ins	int
=	O
0	int
;	O
node	pointer
->	O
target	struct
.	O
v	union
.	O
arg	struct
.	O
idx	int
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
intval	int
)	O
;	O
node	pointer
->	O
v	union
.	O
xf	struct
.	O
pattern	pointer
=	O
NULL	O
;	O
node	pointer
->	O
v	union
.	O
xf	struct
.	O
trans	pointer
=	O
compile_transform_expr	function
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
str	pointer
)	O
,	O
re_flags	int
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
4	int
)	O
]	O
)	O
)	O
;	O
}	O
break	O
;	O
case	O
69	int
:	O
{	O
struct	O
transform_node	struct
*	O
node	pointer
;	O
node	pointer
=	O
new_transform_node	function
(	O
current_rule	pointer
,	O
transform_set	int
)	O
;	O
node	pointer
->	O
target	struct
.	O
type	enum
=	O
target_arg	int
;	O
node	pointer
->	O
target	struct
.	O
v	union
.	O
arg	struct
.	O
ins	int
=	O
0	int
;	O
node	pointer
->	O
target	struct
.	O
v	union
.	O
arg	struct
.	O
idx	int
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
6	int
)	O
]	O
.	O
intval	int
)	O
;	O
node	pointer
->	O
v	union
.	O
xf	struct
.	O
pattern	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
6	int
)	O
]	O
.	O
str	pointer
)	O
;	O
node	pointer
->	O
v	union
.	O
xf	struct
.	O
trans	pointer
=	O
compile_transform_expr	function
(	O
(	O
yyvsp	pointer
[	O
(	O
6	int
)	O
-	O
(	O
6	int
)	O
]	O
.	O
str	pointer
)	O
,	O
re_flags	int
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
6	int
)	O
-	O
(	O
6	int
)	O
]	O
)	O
)	O
;	O
}	O
break	O
;	O
case	O
70	int
:	O
{	O
struct	O
transform_node	struct
*	O
node	pointer
;	O
node	pointer
=	O
new_transform_node	function
(	O
current_rule	pointer
,	O
transform_set	int
)	O
;	O
node	pointer
->	O
target	struct
.	O
type	enum
=	O
target_arg	int
;	O
node	pointer
->	O
target	struct
.	O
v	union
.	O
arg	struct
.	O
ins	int
=	O
1	int
;	O
node	pointer
->	O
target	struct
.	O
v	union
.	O
arg	struct
.	O
idx	int
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
6	int
)	O
]	O
.	O
intval	int
)	O
;	O
node	pointer
->	O
v	union
.	O
xf	struct
.	O
pattern	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
6	int
)	O
]	O
.	O
str	pointer
)	O
;	O
node	pointer
->	O
v	union
.	O
xf	struct
.	O
trans	pointer
=	O
compile_transform_expr	function
(	O
(	O
yyvsp	pointer
[	O
(	O
6	int
)	O
-	O
(	O
6	int
)	O
]	O
.	O
str	pointer
)	O
,	O
re_flags	int
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
6	int
)	O
-	O
(	O
6	int
)	O
]	O
)	O
)	O
;	O
}	O
break	O
;	O
case	O
71	int
:	O
{	O
struct	O
transform_node	struct
*	O
node	pointer
=	O
new_set_node	function
(	O
transform_set	int
,	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
str	pointer
)	O
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
4	int
)	O
]	O
)	O
)	O
;	O
if	O
(	O
node	pointer
)	O
{	O
node	pointer
->	O
v	union
.	O
xf	struct
.	O
pattern	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
str	pointer
)	O
;	O
node	pointer
->	O
v	union
.	O
xf	struct
.	O
trans	pointer
=	O
NULL	O
;	O
}	O
}	O
break	O
;	O
case	O
72	int
:	O
{	O
struct	O
transform_node	struct
*	O
node	pointer
=	O
new_set_node	function
(	O
transform_set	int
,	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
str	pointer
)	O
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
4	int
)	O
]	O
)	O
)	O
;	O
if	O
(	O
node	pointer
)	O
{	O
node	pointer
->	O
v	union
.	O
xf	struct
.	O
pattern	pointer
=	O
NULL	O
;	O
node	pointer
->	O
v	union
.	O
xf	struct
.	O
trans	pointer
=	O
compile_transform_expr	function
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
str	pointer
)	O
,	O
re_flags	int
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
4	int
)	O
]	O
)	O
)	O
;	O
}	O
}	O
break	O
;	O
case	O
73	int
:	O
{	O
struct	O
transform_node	struct
*	O
node	pointer
=	O
new_set_node	function
(	O
transform_set	int
,	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
6	int
)	O
]	O
.	O
str	pointer
)	O
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
6	int
)	O
]	O
)	O
)	O
;	O
if	O
(	O
node	pointer
)	O
{	O
node	pointer
->	O
v	union
.	O
xf	struct
.	O
pattern	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
6	int
)	O
]	O
.	O
str	pointer
)	O
;	O
node	pointer
->	O
v	union
.	O
xf	struct
.	O
trans	pointer
=	O
compile_transform_expr	function
(	O
(	O
yyvsp	pointer
[	O
(	O
6	int
)	O
-	O
(	O
6	int
)	O
]	O
.	O
str	pointer
)	O
,	O
re_flags	int
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
6	int
)	O
-	O
(	O
6	int
)	O
]	O
)	O
)	O
;	O
}	O
}	O
break	O
;	O
case	O
74	int
:	O
{	O
struct	O
transform_node	struct
*	O
node	pointer
=	O
new_set_node	function
(	O
transform_delete	int
,	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
str	pointer
)	O
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
)	O
)	O
;	O
if	O
(	O
node	pointer
)	O
{	O
node	pointer
->	O
target	struct
.	O
v	union
.	O
name	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
str	pointer
)	O
;	O
}	O
}	O
break	O
;	O
case	O
75	int
:	O
{	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
intval	int
)	O
==	O
0	int
)	O
{	O
cferror	function
(	O
&	O
(	O
yylsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
)	O
,	O
_	O
(	O
"$0 cannot be unset"	pointer
)	O
)	O
;	O
errors	int
++	O
;	O
}	O
else	O
{	O
struct	O
transform_node	struct
*	O
node	pointer
=	O
new_transform_node	function
(	O
current_rule	pointer
,	O
transform_delete	int
)	O
;	O
node	pointer
->	O
target	struct
.	O
type	enum
=	O
target_arg	int
;	O
node	pointer
->	O
target	struct
.	O
v	union
.	O
arg	struct
.	O
ins	int
=	O
0	int
;	O
node	pointer
->	O
target	struct
.	O
v	union
.	O
arg	struct
.	O
idx	int
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
intval	int
)	O
;	O
node	pointer
->	O
v	union
.	O
arg_end	int
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
intval	int
)	O
;	O
}	O
}	O
break	O
;	O
case	O
76	int
:	O
{	O
struct	O
transform_node	struct
*	O
node	pointer
;	O
node	pointer
=	O
new_transform_node	function
(	O
current_rule	pointer
,	O
transform_map	int
)	O
;	O
node	pointer
->	O
target	struct
.	O
type	enum
=	O
target_arg	int
;	O
node	pointer
->	O
target	struct
.	O
v	union
.	O
arg	struct
.	O
ins	int
=	O
0	int
;	O
node	pointer
->	O
target	struct
.	O
v	union
.	O
arg	struct
.	O
idx	int
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
8	int
)	O
]	O
.	O
intval	int
)	O
;	O
node	pointer
->	O
v	union
.	O
map	struct
.	O
file	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
8	int
)	O
]	O
.	O
str	pointer
)	O
;	O
node	pointer
->	O
v	union
.	O
map	struct
.	O
delim	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
8	int
)	O
]	O
.	O
str	pointer
)	O
;	O
node	pointer
->	O
v	union
.	O
map	struct
.	O
key	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
5	int
)	O
-	O
(	O
8	int
)	O
]	O
.	O
str	pointer
)	O
;	O
node	pointer
->	O
v	union
.	O
map	struct
.	O
key_field	int
=	O
(	O
yyvsp	pointer
[	O
(	O
6	int
)	O
-	O
(	O
8	int
)	O
]	O
.	O
num	long
)	O
.	O
intval	int
;	O
node	pointer
->	O
v	union
.	O
map	struct
.	O
val_field	int
=	O
(	O
yyvsp	pointer
[	O
(	O
7	int
)	O
-	O
(	O
8	int
)	O
]	O
.	O
num	long
)	O
.	O
intval	int
;	O
node	pointer
->	O
v	union
.	O
map	struct
.	O
defval	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
8	int
)	O
-	O
(	O
8	int
)	O
]	O
.	O
str	pointer
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
6	int
)	O
-	O
(	O
8	int
)	O
]	O
.	O
num	long
)	O
.	O
strval	pointer
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
7	int
)	O
-	O
(	O
8	int
)	O
]	O
.	O
num	long
)	O
.	O
strval	pointer
)	O
;	O
}	O
break	O
;	O
case	O
77	int
:	O
{	O
struct	O
transform_node	struct
*	O
node	pointer
;	O
node	pointer
=	O
new_set_node	function
(	O
transform_map	int
,	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
8	int
)	O
]	O
.	O
str	pointer
)	O
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
8	int
)	O
]	O
)	O
)	O
;	O
node	pointer
->	O
target	struct
.	O
v	union
.	O
name	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
8	int
)	O
]	O
.	O
str	pointer
)	O
;	O
node	pointer
->	O
v	union
.	O
map	struct
.	O
file	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
8	int
)	O
]	O
.	O
str	pointer
)	O
;	O
node	pointer
->	O
v	union
.	O
map	struct
.	O
delim	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
8	int
)	O
]	O
.	O
str	pointer
)	O
;	O
node	pointer
->	O
v	union
.	O
map	struct
.	O
key	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
5	int
)	O
-	O
(	O
8	int
)	O
]	O
.	O
str	pointer
)	O
;	O
node	pointer
->	O
v	union
.	O
map	struct
.	O
key_field	int
=	O
(	O
yyvsp	pointer
[	O
(	O
6	int
)	O
-	O
(	O
8	int
)	O
]	O
.	O
num	long
)	O
.	O
intval	int
;	O
node	pointer
->	O
v	union
.	O
map	struct
.	O
val_field	int
=	O
(	O
yyvsp	pointer
[	O
(	O
7	int
)	O
-	O
(	O
8	int
)	O
]	O
.	O
num	long
)	O
.	O
intval	int
;	O
node	pointer
->	O
v	union
.	O
map	struct
.	O
defval	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
8	int
)	O
-	O
(	O
8	int
)	O
]	O
.	O
str	pointer
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
6	int
)	O
-	O
(	O
8	int
)	O
]	O
.	O
num	long
)	O
.	O
strval	pointer
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
7	int
)	O
-	O
(	O
8	int
)	O
]	O
.	O
num	long
)	O
.	O
strval	pointer
)	O
;	O
}	O
break	O
;	O
case	O
78	int
:	O
{	O
(	O
yyval	union
.	O
str	pointer
)	O
=	O
NULL	O
;	O
}	O
break	O
;	O
case	O
80	int
:	O
{	O
(	O
yyval	union
.	O
intval	int
)	O
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
num	long
)	O
.	O
intval	int
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
num	long
)	O
.	O
strval	pointer
)	O
;	O
}	O
break	O
;	O
case	O
82	int
:	O
{	O
current_rule	pointer
->	O
fall_through	int
=	O
1	int
;	O
}	O
break	O
;	O
case	O
83	int
:	O
{	O
current_rule	pointer
->	O
error	pointer
=	O
new_error	function
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
intval	int
)	O
,	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
str	pointer
)	O
,	O
0	int
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
str	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
84	int
:	O
{	O
int	O
n	long
=	O
string_to_error_index	function
(	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
str	pointer
)	O
)	O
;	O
if	O
(	O
n	long
==	O
-	O
1	int
)	O
{	O
cferror	function
(	O
&	O
(	O
yylsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
)	O
,	O
_	O
(	O
"Unknown message reference"	pointer
)	O
)	O
;	O
YYERROR	O
;	O
}	O
else	O
current_rule	pointer
->	O
error	pointer
=	O
new_standard_error	function
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
intval	int
)	O
,	O
n	long
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
str	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
85	int
:	O
{	O
(	O
yyval	union
.	O
intval	int
)	O
=	O
2	int
;	O
}	O
break	O
;	O
case	O
86	int
:	O
{	O
(	O
yyval	union
.	O
intval	int
)	O
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
num	long
)	O
.	O
intval	int
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
num	long
)	O
.	O
strval	pointer
)	O
;	O
}	O
break	O
;	O
case	O
87	int
:	O
{	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
range	struct
)	O
.	O
start	pointer
==	O
0	int
||	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
range	struct
)	O
.	O
end	pointer
==	O
0	int
)	O
{	O
cferror	function
(	O
&	O
(	O
yylsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
)	O
,	O
_	O
(	O
"$0 cannot be deleted"	pointer
)	O
)	O
;	O
errors	int
++	O
;	O
}	O
else	O
{	O
struct	O
transform_node	struct
*	O
node	pointer
=	O
new_transform_node	function
(	O
current_rule	pointer
,	O
transform_delete	int
)	O
;	O
node	pointer
->	O
target	struct
.	O
type	enum
=	O
target_arg	int
;	O
node	pointer
->	O
target	struct
.	O
v	union
.	O
arg	struct
.	O
ins	int
=	O
0	int
;	O
node	pointer
->	O
target	struct
.	O
v	union
.	O
arg	struct
.	O
idx	int
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
range	struct
)	O
.	O
start	pointer
;	O
node	pointer
->	O
v	union
.	O
arg_end	int
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
range	struct
)	O
.	O
end	pointer
;	O
}	O
}	O
break	O
;	O
case	O
88	int
:	O
{	O
(	O
yyval	union
.	O
range	struct
)	O
.	O
start	pointer
=	O
(	O
yyval	union
.	O
range	struct
)	O
.	O
end	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
num	long
)	O
.	O
intval	int
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
num	long
)	O
.	O
strval	pointer
)	O
;	O
}	O
break	O
;	O
case	O
89	int
:	O
{	O
(	O
yyval	union
.	O
range	struct
)	O
.	O
start	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
num	long
)	O
.	O
intval	int
;	O
(	O
yyval	union
.	O
range	struct
)	O
.	O
end	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
num	long
)	O
.	O
intval	int
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
num	long
)	O
.	O
strval	pointer
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
num	long
)	O
.	O
strval	pointer
)	O
;	O
}	O
break	O
;	O
case	O
90	int
:	O
{	O
if	O
(	O
cflex_include	function
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
str	pointer
)	O
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
)	O
)	O
)	O
YYERROR	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
str	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
91	int
:	O
{	O
current_rule	pointer
->	O
limits	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
lrec	pointer
)	O
;	O
}	O
break	O
;	O
case	O
92	int
:	O
{	O
char	O
*	O
p	pointer
;	O
(	O
yyval	union
.	O
lrec	pointer
)	O
=	O
limits_record_create	function
(	O
)	O
;	O
switch	O
(	O
limits_record_add	function
(	O
(	O
yyval	union
.	O
lrec	pointer
)	O
,	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
str	pointer
)	O
,	O
&	O
p	pointer
)	O
)	O
{	O
case	O
lrec_ok	int
:	O
break	O
;	O
case	O
lrec_error	int
:	O
cferror	function
(	O
&	O
(	O
yylsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
)	O
,	O
_	O
(	O
"unrecognized resource limit: %s"	pointer
)	O
,	O
p	pointer
)	O
;	O
break	O
;	O
case	O
lrec_badval	int
:	O
cferror	function
(	O
&	O
(	O
yylsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
)	O
,	O
_	O
(	O
"bad value: %s"	pointer
)	O
,	O
p	pointer
)	O
;	O
break	O
;	O
}	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
str	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
93	int
:	O
{	O
char	O
*	O
p	pointer
;	O
switch	O
(	O
limits_record_add	function
(	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
lrec	pointer
)	O
,	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
str	pointer
)	O
,	O
&	O
p	pointer
)	O
)	O
{	O
case	O
lrec_ok	int
:	O
break	O
;	O
case	O
lrec_error	int
:	O
cferror	function
(	O
&	O
(	O
yylsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
2	int
)	O
]	O
)	O
,	O
_	O
(	O
"unrecognized resource limit: %s"	pointer
)	O
,	O
p	pointer
)	O
;	O
break	O
;	O
case	O
lrec_badval	int
:	O
cferror	function
(	O
&	O
(	O
yylsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
2	int
)	O
]	O
)	O
,	O
_	O
(	O
"bad value: %s"	pointer
)	O
,	O
p	pointer
)	O
;	O
break	O
;	O
}	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
str	pointer
)	O
)	O
;	O
(	O
yyval	union
.	O
lrec	pointer
)	O
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
lrec	pointer
)	O
;	O
}	O
break	O
;	O
case	O
94	int
:	O
{	O
struct	O
transform_node	struct
*	O
node	pointer
;	O
size_t	long
n	long
;	O
n	long
=	O
strspn	function
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
str	pointer
)	O
+	O
1	int
,	O
":"	pointer
)	O
;	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
str	pointer
)	O
[	O
n	long
+	O
1	int
]	O
)	O
{	O
struct	O
cfloc	struct
loc	pointer
;	O
loc	pointer
.	O
beg	struct
=	O
(	O
yylsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
)	O
.	O
beg	struct
;	O
loc	pointer
.	O
beg	struct
.	O
column	int
+=	O
n	long
+	O
1	int
;	O
loc	pointer
.	O
end	pointer
=	O
loc	pointer
.	O
beg	struct
;	O
cferror	function
(	O
&	O
loc	pointer
,	O
_	O
(	O
"invalid character in short option designator"	pointer
)	O
)	O
;	O
cferror	function
(	O
&	O
loc	pointer
,	O
_	O
(	O
"short option letter can be followed only by zero to two colons"	pointer
)	O
)	O
;	O
errors	int
++	O
;	O
}	O
else	O
{	O
if	O
(	O
n	long
>	O
2	int
)	O
{	O
struct	O
cfloc	struct
loc	pointer
;	O
loc	pointer
.	O
beg	struct
=	O
(	O
yylsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
)	O
.	O
beg	struct
;	O
loc	pointer
.	O
beg	struct
.	O
column	int
+=	O
n	long
;	O
loc	pointer
.	O
end	pointer
=	O
loc	pointer
.	O
beg	struct
;	O
cferror	function
(	O
&	O
loc	pointer
,	O
_	O
(	O
"ignoring extra character in short option designator"	pointer
)	O
)	O
;	O
cferror	function
(	O
&	O
loc	pointer
,	O
_	O
(	O
"short option letter can be followed only by zero to two colons"	pointer
)	O
)	O
;	O
}	O
node	pointer
=	O
new_transform_node	function
(	O
current_rule	pointer
,	O
transform_remopt	int
)	O
;	O
node	pointer
->	O
target	struct
.	O
type	enum
=	O
target_command	int
;	O
node	pointer
->	O
v	union
.	O
remopt	struct
.	O
s_opt	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
str	pointer
)	O
;	O
node	pointer
->	O
v	union
.	O
remopt	struct
.	O
l_opt	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
str	pointer
)	O
;	O
}	O
}	O
break	O
;	O
case	O
95	int
:	O
{	O
(	O
yyval	union
.	O
str	pointer
)	O
=	O
NULL	O
;	O
}	O
break	O
;	O
case	O
97	int
:	O
{	O
current_rule	pointer
->	O
clrenv	int
=	O
1	int
;	O
}	O
break	O
;	O
case	O
98	int
:	O
{	O
new_envar	function
(	O
current_rule	pointer
,	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
str	pointer
)	O
,	O
strlen	function
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
str	pointer
)	O
)	O
,	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
str	pointer
)	O
,	O
strlen	function
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
str	pointer
)	O
)	O
,	O
envar_set	int
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
str	pointer
)	O
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
str	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
99	int
:	O
{	O
new_envar	function
(	O
current_rule	pointer
,	O
""	pointer
,	O
0	int
,	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
str	pointer
)	O
,	O
strlen	function
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
str	pointer
)	O
)	O
,	O
envar_eval	int
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
str	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
100	int
:	O
{	O
add_asgn_list	function
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
asgn_list	struct
)	O
.	O
head	pointer
,	O
envar_unset	int
)	O
;	O
}	O
break	O
;	O
case	O
101	int
:	O
{	O
add_asgn_list	function
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
asgn_list	struct
)	O
.	O
head	pointer
,	O
envar_keep	int
)	O
;	O
}	O
break	O
;	O
case	O
102	int
:	O
{	O
(	O
yyval	union
.	O
asgn_list	struct
)	O
.	O
head	pointer
=	O
(	O
yyval	union
.	O
asgn_list	struct
)	O
.	O
tail	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
asgn	struct
)	O
;	O
}	O
break	O
;	O
case	O
103	int
:	O
{	O
LIST_APPEND	O
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
asgn	struct
)	O
,	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
asgn_list	struct
)	O
.	O
head	pointer
,	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
asgn_list	struct
)	O
.	O
tail	pointer
)	O
;	O
(	O
yyval	union
.	O
asgn_list	struct
)	O
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
asgn_list	struct
)	O
;	O
}	O
break	O
;	O
case	O
104	int
:	O
{	O
(	O
yyval	union
.	O
asgn	struct
)	O
=	O
xmalloc	function
(	O
sizeof	O
(	O
*	O
(	O
yyval	union
.	O
asgn	struct
)	O
)	O
)	O
;	O
(	O
yyval	union
.	O
asgn	struct
)	O
->	O
next	pointer
=	O
NULL	O
;	O
(	O
yyval	union
.	O
asgn	struct
)	O
->	O
name	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
str	pointer
)	O
;	O
(	O
yyval	union
.	O
asgn	struct
)	O
->	O
value	pointer
=	O
NULL	O
;	O
}	O
break	O
;	O
case	O
105	int
:	O
{	O
(	O
yyval	union
.	O
asgn	struct
)	O
=	O
xmalloc	function
(	O
sizeof	O
(	O
*	O
(	O
yyval	union
.	O
asgn	struct
)	O
)	O
)	O
;	O
(	O
yyval	union
.	O
asgn	struct
)	O
->	O
next	pointer
=	O
NULL	O
;	O
(	O
yyval	union
.	O
asgn	struct
)	O
->	O
name	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
str	pointer
)	O
;	O
(	O
yyval	union
.	O
asgn	struct
)	O
->	O
value	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
str	pointer
)	O
;	O
}	O
break	O
;	O
case	O
106	int
:	O
{	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
attrib	pointer
)	O
(	O
current_rule	pointer
,	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
str	pointer
)	O
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
)	O
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
str	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
107	int
:	O
{	O
cflex_pushargs	function
(	O
)	O
;	O
}	O
break	O
;	O
case	O
108	int
:	O
{	O
int	O
i	int
;	O
struct	O
argval	struct
*	O
arg	struct
;	O
cflex_popargs	function
(	O
)	O
;	O
(	O
yyval	union
.	O
strlist	struct
)	O
.	O
argc	int
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
arglist	struct
)	O
.	O
argc	int
;	O
(	O
yyval	union
.	O
strlist	struct
)	O
.	O
argv	pointer
=	O
xcalloc	function
(	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
arglist	struct
)	O
.	O
argc	int
+	O
1	int
,	O
sizeof	O
(	O
(	O
yyval	union
.	O
strlist	struct
)	O
.	O
argv	pointer
[	O
0	int
]	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
,	O
arg	struct
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
arglist	struct
)	O
.	O
head	pointer
;	O
i	int
<	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
arglist	struct
)	O
.	O
argc	int
;	O
i	int
++	O
,	O
arg	struct
=	O
arg	struct
->	O
next	pointer
)	O
{	O
(	O
yyval	union
.	O
strlist	struct
)	O
.	O
argv	pointer
[	O
i	int
]	O
=	O
arg	struct
->	O
strval	pointer
;	O
arg	struct
->	O
strval	pointer
=	O
NULL	O
;	O
}	O
arglist_free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
arglist	struct
)	O
.	O
head	pointer
)	O
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
YY_SYMBOL_PRINT	O
(	O
"-> $$ ="	pointer
,	O
yyr1	array
[	O
yyn	long
]	O
,	O
&	O
yyval	union
,	O
&	O
yyloc	struct
)	O
;	O
YYPOPSTACK	O
(	O
yylen	int
)	O
;	O
yylen	int
=	O
0	int
;	O
YY_STACK_PRINT	O
(	O
yyss	pointer
,	O
yyssp	pointer
)	O
;	O
*	O
++	O
yyvsp	pointer
=	O
yyval	union
;	O
*	O
++	O
yylsp	pointer
=	O
yyloc	struct
;	O
yyn	long
=	O
yyr1	array
[	O
yyn	long
]	O
;	O
yystate	int
=	O
yypgoto	array
[	O
yyn	long
-	O
YYNTOKENS	int
]	O
+	O
*	O
yyssp	pointer
;	O
if	O
(	O
0	int
<=	O
yystate	int
&&	O
yystate	int
<=	O
YYLAST	int
&&	O
yycheck	array
[	O
yystate	int
]	O
==	O
*	O
yyssp	pointer
)	O
yystate	int
=	O
yytable	array
[	O
yystate	int
]	O
;	O
else	O
yystate	int
=	O
yydefgoto	array
[	O
yyn	long
-	O
YYNTOKENS	int
]	O
;	O
goto	O
yynewstate	O
;	O
yyerrlab	O
:	O
yytoken	int
=	O
yychar	int
==	O
YYEMPTY	O
?	O
YYEMPTY	O
:	O
YYTRANSLATE	O
(	O
yychar	int
)	O
;	O
if	O
(	O
!	O
yyerrstatus	int
)	O
{	O
++	O
yynerrs	int
;	O
{	O
char	O
const	O
*	O
yymsgp	pointer
=	O
YY_	O
(	O
"syntax error"	pointer
)	O
;	O
int	O
yysyntax_error_status	int
;	O
yysyntax_error_status	int
=	O
YYSYNTAX_ERROR	O
;	O
if	O
(	O
yysyntax_error_status	int
==	O
0	int
)	O
yymsgp	pointer
=	O
yymsg	pointer
;	O
else	O
if	O
(	O
yysyntax_error_status	int
==	O
1	int
)	O
{	O
if	O
(	O
yymsg	pointer
!=	O
yymsgbuf	array
)	O
YYSTACK_FREE	O
(	O
yymsg	pointer
)	O
;	O
yymsg	pointer
=	O
(	O
char	O
*	O
)	O
YYSTACK_ALLOC	O
(	O
yymsg_alloc	pointer
)	O
;	O
if	O
(	O
!	O
yymsg	pointer
)	O
{	O
yymsg	pointer
=	O
yymsgbuf	array
;	O
yymsg_alloc	pointer
=	O
sizeof	O
yymsgbuf	array
;	O
yysyntax_error_status	int
=	O
2	int
;	O
}	O
else	O
{	O
yysyntax_error_status	int
=	O
YYSYNTAX_ERROR	O
;	O
yymsgp	pointer
=	O
yymsg	pointer
;	O
}	O
}	O
yyerror	function
(	O
yymsgp	pointer
)	O
;	O
if	O
(	O
yysyntax_error_status	int
==	O
2	int
)	O
goto	O
yyexhaustedlab	O
;	O
}	O
}	O
yyerror_range	array
[	O
1	int
]	O
=	O
yylloc	struct
;	O
if	O
(	O
yyerrstatus	int
==	O
3	int
)	O
{	O
if	O
(	O
yychar	int
<=	O
YYEOF	int
)	O
{	O
if	O
(	O
yychar	int
==	O
YYEOF	int
)	O
YYABORT	O
;	O
}	O
else	O
{	O
yydestruct	function
(	O
"Error: discarding"	pointer
,	O
yytoken	int
,	O
&	O
yylval	union
,	O
&	O
yylloc	struct
)	O
;	O
yychar	int
=	O
YYEMPTY	O
;	O
}	O
}	O
goto	O
yyerrlab1	O
;	O
yyerrorlab	O
:	O
if	O
(	O
0	int
)	O
goto	O
yyerrorlab	O
;	O
yyerror_range	array
[	O
1	int
]	O
=	O
yylsp	pointer
[	O
1	int
-	O
yylen	int
]	O
;	O
YYPOPSTACK	O
(	O
yylen	int
)	O
;	O
yylen	int
=	O
0	int
;	O
YY_STACK_PRINT	O
(	O
yyss	pointer
,	O
yyssp	pointer
)	O
;	O
yystate	int
=	O
*	O
yyssp	pointer
;	O
goto	O
yyerrlab1	O
;	O
yyerrlab1	O
:	O
yyerrstatus	int
=	O
3	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
yyn	long
=	O
yypact	array
[	O
yystate	int
]	O
;	O
if	O
(	O
!	O
yypact_value_is_default	O
(	O
yyn	long
)	O
)	O
{	O
yyn	long
+=	O
YYTERROR	int
;	O
if	O
(	O
0	int
<=	O
yyn	long
&&	O
yyn	long
<=	O
YYLAST	int
&&	O
yycheck	array
[	O
yyn	long
]	O
==	O
YYTERROR	int
)	O
{	O
yyn	long
=	O
yytable	array
[	O
yyn	long
]	O
;	O
if	O
(	O
0	int
<	O
yyn	long
)	O
break	O
;	O
}	O
}	O
if	O
(	O
yyssp	pointer
==	O
yyss	pointer
)	O
YYABORT	O
;	O
yyerror_range	array
[	O
1	int
]	O
=	O
*	O
yylsp	pointer
;	O
yydestruct	function
(	O
"Error: popping"	pointer
,	O
yystos	array
[	O
yystate	int
]	O
,	O
yyvsp	pointer
,	O
yylsp	pointer
)	O
;	O
YYPOPSTACK	O
(	O
1	int
)	O
;	O
yystate	int
=	O
*	O
yyssp	pointer
;	O
YY_STACK_PRINT	O
(	O
yyss	pointer
,	O
yyssp	pointer
)	O
;	O
}	O
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	O
*	O
++	O
yyvsp	pointer
=	O
yylval	union
;	O
YY_IGNORE_MAYBE_UNINITIALIZED_END	O
yyerror_range	array
[	O
2	int
]	O
=	O
yylloc	struct
;	O
YYLLOC_DEFAULT	O
(	O
yyloc	struct
,	O
yyerror_range	array
,	O
2	int
)	O
;	O
*	O
++	O
yylsp	pointer
=	O
yyloc	struct
;	O
YY_SYMBOL_PRINT	O
(	O
"Shifting"	pointer
,	O
yystos	array
[	O
yyn	long
]	O
,	O
yyvsp	pointer
,	O
yylsp	pointer
)	O
;	O
yystate	int
=	O
yyn	long
;	O
goto	O
yynewstate	O
;	O
yyacceptlab	O
:	O
yyresult	int
=	O
0	int
;	O
goto	O
yyreturn	O
;	O
yyabortlab	O
:	O
yyresult	int
=	O
1	int
;	O
goto	O
yyreturn	O
;	O
yyexhaustedlab	O
:	O
yyerror	function
(	O
YY_	O
(	O
"memory exhausted"	pointer
)	O
)	O
;	O
yyresult	int
=	O
2	int
;	O
yyreturn	O
:	O
if	O
(	O
yychar	int
!=	O
YYEMPTY	O
)	O
{	O
yytoken	int
=	O
YYTRANSLATE	O
(	O
yychar	int
)	O
;	O
yydestruct	function
(	O
"Cleanup: discarding lookahead"	pointer
,	O
yytoken	int
,	O
&	O
yylval	union
,	O
&	O
yylloc	struct
)	O
;	O
}	O
YYPOPSTACK	O
(	O
yylen	int
)	O
;	O
YY_STACK_PRINT	O
(	O
yyss	pointer
,	O
yyssp	pointer
)	O
;	O
while	O
(	O
yyssp	pointer
!=	O
yyss	pointer
)	O
{	O
yydestruct	function
(	O
"Cleanup: popping"	pointer
,	O
yystos	array
[	O
*	O
yyssp	pointer
]	O
,	O
yyvsp	pointer
,	O
yylsp	pointer
)	O
;	O
YYPOPSTACK	O
(	O
1	int
)	O
;	O
}	O
if	O
(	O
yyss	pointer
!=	O
yyssa	array
)	O
YYSTACK_FREE	O
(	O
yyss	pointer
)	O
;	O
if	O
(	O
yymsg	pointer
!=	O
yymsgbuf	array
)	O
YYSTACK_FREE	O
(	O
yymsg	pointer
)	O
;	O
return	O
YYID	O
(	O
yyresult	int
)	O
;	O
}	O
void	O
yyerror	function
(	O
char	O
const	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
vcferror	function
(	O
&	O
curloc	struct
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
errors	int
=	O
1	int
;	O
}	O
void	O
cfgram_debug	function
(	O
int	O
v	union
)	O
{	O
yydebug	int
=	O
v	union
;	O
}	O
struct	O
rush_rule	struct
*	O
new_rush_rule	function
(	O
char	O
const	O
*	O
tag	pointer
)	O
{	O
struct	O
rush_rule	struct
*	O
p	pointer
=	O
xzalloc	function
(	O
sizeof	O
(	O
*	O
p	pointer
)	O
)	O
;	O
LIST_APPEND	O
(	O
p	pointer
,	O
rule_head	pointer
,	O
rule_tail	pointer
)	O
;	O
static	O
unsigned	O
rule_num	int
=	O
0	int
;	O
rule_num	int
++	O
;	O
if	O
(	O
tag	pointer
&&	O
tag	pointer
[	O
0	int
]	O
)	O
p	pointer
->	O
tag	pointer
=	O
xstrdup	function
(	O
tag	pointer
)	O
;	O
else	O
{	O
char	O
buf	array
[	O
INT_BUFSIZE_BOUND	O
(	O
unsigned	O
)	O
]	O
;	O
char	O
*	O
s	long
=	O
uinttostr	function
(	O
rule_num	int
,	O
buf	array
)	O
;	O
p	pointer
->	O
tag	pointer
=	O
xmalloc	function
(	O
strlen	function
(	O
s	long
)	O
+	O
2	int
)	O
;	O
p	pointer
->	O
tag	pointer
[	O
0	int
]	O
=	O
'#'	O
;	O
strcpy	function
(	O
p	pointer
->	O
tag	pointer
+	O
1	int
,	O
s	long
)	O
;	O
}	O
p	pointer
->	O
mask	int
=	O
NO_UMASK	O
;	O
p	pointer
->	O
gid	int
=	O
NO_GID	O
;	O
p	pointer
->	O
fork	function
=	O
rush_undefined	int
;	O
p	pointer
->	O
acct	function
=	O
rush_undefined	int
;	O
return	O
p	pointer
;	O
}	O
struct	O
transform_node	struct
*	O
new_transform_node	function
(	O
struct	O
rush_rule	struct
*	O
rule	pointer
,	O
enum	O
transform_node_type	enum
type	enum
)	O
{	O
struct	O
transform_node	struct
*	O
p	pointer
=	O
xzalloc	function
(	O
sizeof	O
(	O
*	O
p	pointer
)	O
)	O
;	O
LIST_APPEND	O
(	O
p	pointer
,	O
rule	pointer
->	O
transform_head	pointer
,	O
rule	pointer
->	O
transform_tail	pointer
)	O
;	O
p	pointer
->	O
type	enum
=	O
type	enum
;	O
return	O
p	pointer
;	O
}	O
struct	O
test_node	struct
*	O
new_test_node	function
(	O
enum	O
test_type	enum
type	enum
)	O
{	O
struct	O
test_node	struct
*	O
p	pointer
=	O
xzalloc	function
(	O
sizeof	O
(	O
*	O
p	pointer
)	O
)	O
;	O
p	pointer
->	O
type	enum
=	O
type	enum
;	O
return	O
p	pointer
;	O
}	O
struct	O
envar	struct
*	O
new_envar	function
(	O
struct	O
rush_rule	struct
*	O
rule	pointer
,	O
char	O
const	O
*	O
name	pointer
,	O
size_t	long
nlen	long
,	O
char	O
const	O
*	O
value	pointer
,	O
size_t	long
vlen	long
,	O
enum	O
envar_type	enum
type	enum
)	O
{	O
struct	O
envar	struct
*	O
p	pointer
=	O
xmalloc	function
(	O
sizeof	O
(	O
*	O
p	pointer
)	O
+	O
nlen	long
+	O
1	int
+	O
(	O
value	pointer
?	O
vlen	long
+	O
1	int
:	O
0	int
)	O
)	O
;	O
p	pointer
->	O
next	pointer
=	O
NULL	O
;	O
p	pointer
->	O
name	pointer
=	O
(	O
char	O
*	O
)	O
(	O
p	pointer
+	O
1	int
)	O
;	O
memcpy	function
(	O
p	pointer
->	O
name	pointer
,	O
name	pointer
,	O
nlen	long
)	O
;	O
p	pointer
->	O
name	pointer
[	O
nlen	long
]	O
=	O
0	int
;	O
if	O
(	O
value	pointer
)	O
{	O
p	pointer
->	O
value	pointer
=	O
p	pointer
->	O
name	pointer
+	O
nlen	long
+	O
1	int
;	O
memcpy	function
(	O
p	pointer
->	O
value	pointer
,	O
value	pointer
,	O
vlen	long
)	O
;	O
p	pointer
->	O
value	pointer
[	O
vlen	long
]	O
=	O
0	int
;	O
}	O
else	O
{	O
p	pointer
->	O
value	pointer
=	O
NULL	O
;	O
}	O
p	pointer
->	O
type	enum
=	O
type	enum
;	O
LIST_APPEND	O
(	O
p	pointer
,	O
rule	pointer
->	O
envar_head	pointer
,	O
rule	pointer
->	O
envar_tail	pointer
)	O
;	O
return	O
p	pointer
;	O
}	O
static	O
void	O
add_asgn_list	function
(	O
struct	O
asgn	struct
*	O
head	pointer
,	O
enum	O
envar_type	enum
type	enum
)	O
{	O
for	O
(	O
;	O
head	pointer
;	O
head	pointer
=	O
head	pointer
->	O
next	pointer
)	O
{	O
new_envar	function
(	O
current_rule	pointer
,	O
head	pointer
->	O
name	pointer
,	O
strlen	function
(	O
head	pointer
->	O
name	pointer
)	O
,	O
head	pointer
->	O
value	pointer
,	O
head	pointer
->	O
value	pointer
?	O
strlen	function
(	O
head	pointer
->	O
value	pointer
)	O
:	O
0	int
,	O
type	enum
)	O
;	O
free	function
(	O
head	pointer
->	O
name	pointer
)	O
;	O
free	function
(	O
head	pointer
->	O
value	pointer
)	O
;	O
}	O
}	O
static	O
struct	O
transform_node	struct
*	O
new_set_node	function
(	O
enum	O
transform_node_type	enum
type	enum
,	O
char	O
*	O
varname	pointer
,	O
struct	O
cfloc	struct
const	O
*	O
loc	pointer
)	O
{	O
struct	O
transform_node	struct
*	O
node	pointer
;	O
enum	O
transform_target_type	enum
tgt	enum
;	O
tgt	enum
=	O
rush_variable_target	function
(	O
varname	pointer
)	O
;	O
if	O
(	O
tgt	enum
==	O
target_readonly	int
)	O
{	O
cferror	function
(	O
loc	pointer
,	O
_	O
(	O
"attempt to modify a read-only variable"	pointer
)	O
)	O
;	O
errors	int
++	O
;	O
return	O
NULL	O
;	O
}	O
node	pointer
=	O
new_transform_node	function
(	O
current_rule	pointer
,	O
type	enum
)	O
;	O
node	pointer
->	O
target	struct
.	O
type	enum
=	O
tgt	enum
;	O
switch	O
(	O
tgt	enum
)	O
{	O
case	O
target_command	int
:	O
case	O
target_program	int
:	O
free	function
(	O
varname	pointer
)	O
;	O
if	O
(	O
type	enum
==	O
transform_delete	int
)	O
{	O
cferror	function
(	O
loc	pointer
,	O
_	O
(	O
"attempt to unset a read-only variable"	pointer
)	O
)	O
;	O
errors	int
++	O
;	O
return	O
NULL	O
;	O
}	O
break	O
;	O
case	O
target_var	int
:	O
node	pointer
->	O
target	struct
.	O
v	union
.	O
name	pointer
=	O
varname	pointer
;	O
break	O
;	O
default	O
:	O
die	function
(	O
system_error	int
,	O
NULL	O
,	O
_	O
(	O
"INTERNAL ERROR at %s:%d: invalid target type %d"	pointer
)	O
,	O
__FILE__	O
,	O
__LINE__	O
,	O
tgt	enum
)	O
;	O
}	O
return	O
node	pointer
;	O
}	O
