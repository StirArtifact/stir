static	O
int	O
pop3_itr_dup	function
(	O
void	O
*	O
*	pointer
ptr	pointer
,	O
void	O
*	O
owner	pointer
)	O
;	O
static	O
int	O
pop3_itr_destroy	function
(	O
mu_iterator_t	O
itr	O
,	O
void	O
*	O
owner	pointer
)	O
;	O
static	O
int	O
pop3_itr_first	function
(	O
void	O
*	O
owner	pointer
)	O
;	O
static	O
int	O
pop3_itr_next	function
(	O
void	O
*	O
woner	pointer
)	O
;	O
static	O
int	O
pop3_itr_getitem	function
(	O
void	O
*	O
owner	pointer
,	O
void	O
*	O
*	pointer
pret	pointer
,	O
const	O
void	O
*	O
*	pointer
pkey	pointer
)	O
;	O
static	O
int	O
pop3_itr_delitem	function
(	O
void	O
*	O
owner	pointer
,	O
void	O
*	O
data	pointer
)	O
;	O
static	O
int	O
pop3_itr_finished_p	function
(	O
void	O
*	O
owner	pointer
)	O
;	O
struct	O
pop3_iterator	struct
{	O
mu_pop3_t	O
pop3	pointer
;	O
mu_stream_t	O
stream	pointer
;	O
int	O
done	int
;	O
char	O
*	O
item	pointer
;	O
char	O
*	O
rdbuf	pointer
;	O
size_t	O
rdsize	O
;	O
}	O
;	O
int	O
mu_pop3_iterator_create	function
(	O
mu_pop3_t	O
pop3	O
,	O
mu_iterator_t	O
*	O
piterator	pointer
)	O
{	O
struct	O
pop3_iterator	struct
*	O
pop3_iterator	pointer
;	O
mu_iterator_t	O
iterator	O
;	O
int	O
status	int
;	O
pop3_iterator	O
=	O
malloc	O
(	O
sizeof	int
*	O
pop3_iterator	pointer
)	O
;	O
if	O
(	O
pop3_iterator	O
==	O
NULL	O
)	O
return	O
ENOMEM	O
;	O
status	O
=	O
mu_pop3_stream_create	function
(	O
pop3	pointer
,	O
&	pointer
pop3_iterator	pointer
->	O
stream	pointer
)	O
;	O
if	O
(	O
status	O
)	O
{	O
free	O
(	O
pop3_iterator	pointer
)	O
;	O
return	O
status	int
;	O
}	O
pop3_iterator	O
->	O
item	pointer
=	O
NULL	O
;	O
pop3_iterator	O
->	O
rdbuf	pointer
=	O
NULL	int
;	O
pop3_iterator	pointer
->	O
rdsize	pointer
=	O
0	O
;	O
pop3_iterator	pointer
->	O
done	pointer
=	O
0	O
;	O
pop3_iterator	pointer
->	O
pop3	pointer
=	O
pop3	O
;	O
status	pointer
=	O
mu_iterator_create	int
(	O
&	pointer
iterator	pointer
,	O
pop3_iterator	O
)	O
;	O
if	O
(	O
status	O
!=	O
0	O
)	O
{	O
free	O
(	O
pop3_iterator	pointer
)	O
;	O
return	O
status	int
;	O
}	O
mu_iterator_set_first	O
(	O
iterator	pointer
,	O
pop3_itr_first	O
)	O
;	O
mu_iterator_set_next	O
(	O
iterator	pointer
,	O
pop3_itr_next	O
)	O
;	O
mu_iterator_set_getitem	O
(	O
iterator	pointer
,	O
pop3_itr_getitem	O
)	O
;	O
mu_iterator_set_finished_p	O
(	O
iterator	pointer
,	O
pop3_itr_finished_p	O
)	O
;	O
mu_iterator_set_delitem	O
(	O
iterator	pointer
,	O
pop3_itr_delitem	O
)	O
;	O
mu_iterator_set_destroy	O
(	O
iterator	pointer
,	O
pop3_itr_destroy	O
)	O
;	O
mu_iterator_set_dup	O
(	O
iterator	pointer
,	O
pop3_itr_dup	O
)	O
;	O
*	O
piterator	pointer
=	O
iterator	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pop3_itr_dup	function
(	O
void	O
*	O
*	pointer
ptr	pointer
,	O
void	O
*	O
owner	pointer
)	O
{	O
struct	O
pop3_iterator	struct
*	O
pop3_iterator	pointer
=	O
(	O
struct	O
pop3_iterator	struct
*	O
)	O
owner	pointer
;	O
struct	O
pop3_iterator	struct
*	O
clone	pointer
=	O
malloc	O
(	O
sizeof	O
*	O
pop3_iterator	pointer
)	O
;	O
if	O
(	O
clone	O
==	O
NULL	O
)	O
return	O
ENOMEM	O
;	O
*	O
clone	pointer
=	O
*	O
pop3_iterator	pointer
;	O
*	O
ptr	pointer
=	O
clone	O
;	O
return	O
0	O
;	O
}	O
static	O
int	O
pop3_itr_destroy	function
(	O
mu_iterator_t	O
iterator	O
,	O
void	O
*	O
owner	pointer
)	O
{	O
struct	O
pop3_iterator	struct
*	O
pop3_iterator	pointer
=	O
(	O
struct	O
pop3_iterator	struct
*	O
)	O
owner	pointer
;	O
if	O
(	O
!	pointer
pop3_iterator	pointer
->	O
done	pointer
)	O
{	O
char	O
buf	O
[	O
128	int
]	O
;	O
size_t	O
n	O
=	O
0	pointer
;	O
mu_stream_t	O
str	pointer
=	O
pop3_iterator	pointer
->	O
pop3	pointer
->	O
carrier	pointer
;	O
while	pointer
(	O
mu_stream_readline	pointer
(	O
str	pointer
,	O
buf	pointer
,	O
sizeof	int
buf	O
,	O
&	pointer
n	pointer
)	O
>	O
0	int
&&	O
n	O
>	O
0	int
)	O
n	O
=	O
0	int
;	O
}	O
if	O
(	O
pop3_iterator	O
->	O
item	pointer
)	O
free	O
(	O
pop3_iterator	pointer
->	O
item	pointer
)	O
;	O
if	O
(	O
pop3_iterator	pointer
->	O
rdbuf	pointer
)	O
free	O
(	O
pop3_iterator	pointer
->	O
rdbuf	pointer
)	O
;	O
pop3_iterator	O
->	O
pop3	pointer
->	O
state	pointer
=	O
MU_POP3_NO_STATE	pointer
;	O
free	pointer
(	O
pop3_iterator	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pop3_itr_first	function
(	O
void	O
*	O
data	pointer
)	O
{	O
return	O
pop3_itr_next	int
(	O
data	O
)	O
;	O
}	O
static	O
int	O
pop3_itr_next	function
(	O
void	O
*	O
owner	pointer
)	O
{	O
struct	O
pop3_iterator	struct
*	O
pop3_iterator	pointer
=	O
(	O
struct	O
pop3_iterator	struct
*	O
)	O
owner	pointer
;	O
int	O
status	int
=	O
0	int
;	O
size_t	O
n	O
;	O
status	O
=	O
mu_stream_getline	int
(	O
pop3_iterator	pointer
->	O
stream	pointer
,	O
&	O
pop3_iterator	pointer
->	O
rdbuf	pointer
,	O
&	O
pop3_iterator	pointer
->	O
rdsize	pointer
,	O
&	O
n	pointer
)	O
;	O
if	O
(	O
status	O
||	O
n	O
==	O
0	O
)	O
{	O
pop3_iterator	O
->	O
done	pointer
=	O
1	O
;	O
pop3_iterator	O
->	O
pop3	pointer
->	O
state	pointer
=	O
MU_POP3_NO_STATE	pointer
;	O
return	pointer
0	O
;	O
}	O
n	O
=	O
mu_rtrim_class	function
(	O
pop3_iterator	pointer
->	O
rdbuf	pointer
,	O
MU_CTYPE_SPACE	int
)	O
;	O
if	O
(	O
n	pointer
==	O
1	O
&&	O
pop3_iterator	int
->	O
rdbuf	pointer
[	O
0	int
]	O
==	O
'.'	O
)	O
{	O
pop3_iterator	O
->	O
done	pointer
=	O
1	O
;	O
pop3_iterator	O
->	O
pop3	pointer
->	O
state	pointer
=	O
MU_POP3_NO_STATE	pointer
;	O
}	pointer
else	O
pop3_iterator	O
->	O
item	pointer
=	O
pop3_iterator	O
->	O
rdbuf	pointer
;	O
return	O
status	int
;	O
}	O
static	O
int	O
pop3_itr_getitem	function
(	O
void	O
*	O
owner	pointer
,	O
void	O
*	O
*	pointer
item	pointer
,	O
const	O
void	O
*	O
*	pointer
pkey	pointer
)	O
{	O
struct	O
pop3_iterator	struct
*	O
pop3_iterator	pointer
=	O
(	O
struct	O
pop3_iterator	struct
*	O
)	O
owner	pointer
;	O
if	O
(	O
item	pointer
)	O
{	O
*	O
(	pointer
(	pointer
char	O
*	O
*	O
)	O
item	pointer
)	O
=	O
pop3_iterator	O
->	O
item	pointer
;	O
pop3_iterator	O
->	O
item	pointer
=	O
NULL	O
;	O
}	pointer
if	O
(	O
pkey	pointer
)	O
*	O
pkey	pointer
=	O
NULL	pointer
;	O
return	O
0	O
;	O
}	O
static	O
int	O
pop3_itr_finished_p	function
(	O
void	O
*	O
owner	pointer
)	O
{	O
struct	O
pop3_iterator	struct
*	O
pop3_iterator	pointer
=	O
(	O
struct	O
pop3_iterator	struct
*	O
)	pointer
owner	pointer
;	O
return	O
pop3_iterator	O
->	O
done	pointer
;	O
}	O
static	O
int	O
pop3_itr_delitem	function
(	O
void	O
*	O
owner	pointer
,	O
void	O
*	O
item	pointer
)	O
{	O
struct	O
pop3_iterator	struct
*	O
pop3_iterator	pointer
=	O
(	O
struct	O
pop3_iterator	struct
*	O
)	O
owner	pointer
;	O
return	O
*	O
(	pointer
(	pointer
char	O
*	O
*	O
)	O
item	pointer
)	O
==	O
pop3_iterator	int
->	O
item	pointer
?	O
MU_ITR_DELITEM_NEXT	O
:	O
MU_ITR_DELITEM_NOTHING	O
;	O
}	O