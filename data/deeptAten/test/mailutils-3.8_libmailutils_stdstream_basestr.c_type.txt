static	O
void	O
stdstream_flushall_setup	function
(	O
void	O
)	O
;	O
static	O
void	O
std_bootstrap	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
int	O
code	int
,	O
unsigned	O
long	O
lval	O
,	O
void	O
*	O
pval	pointer
)	O
{	O
struct	O
_mu_file_stream	struct
*	O
fstr	pointer
=	O
(	O
struct	O
_mu_file_stream	struct
*	O
)	O
str	pointer
;	O
_mu_file_stream_setup	O
(	O
fstr	O
)	O
;	O
str	O
->	O
event_cb	pointer
=	O
NULL	pointer
;	O
str	pointer
->	O
event_mask	pointer
=	O
0	O
;	O
str	O
->	O
event_cb_data	pointer
=	O
0	int
;	O
fstr	pointer
->	O
stream	pointer
.	O
flags	pointer
|=	O
_MU_STR_OPEN	int
;	O
mu_stream_set_buffer	pointer
(	O
(	pointer
mu_stream_t	O
)	O
fstr	pointer
,	O
mu_buffer_line	O
,	O
0	int
)	O
;	O
stdstream_flushall_setup	O
(	O
)	O
;	O
}	O
static	O
void	O
std_log_bootstrap	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
int	O
code	O
,	O
unsigned	O
long	O
lval	O
,	O
void	O
*	O
pval	pointer
)	O
{	O
struct	O
_mu_log_stream	struct
*	O
logstr	pointer
=	O
(	O
struct	O
_mu_log_stream	struct
*	O
)	O
str	pointer
;	O
int	O
yes	int
=	O
1	int
;	O
mu_stream_t	O
errstr	pointer
,	O
transport	O
;	O
int	O
rc	int
;	O
rc	O
=	O
mu_stdio_stream_create	function
(	O
&	O
errstr	struct
,	O
MU_STDERR_FD	O
,	O
0	O
)	O
;	O
if	O
(	O
rc	O
)	O
{	O
fprintf	O
(	O
stderr	pointer
,	O
"%s: cannot open error stream: %s\n"	pointer
,	O
mu_program_name	pointer
?	O
mu_program_name	pointer
:	O
"<unknown>"	O
,	O
mu_strerror	int
(	O
rc	int
)	O
)	O
;	O
abort	O
(	O
)	O
;	O
}	O
mu_stream_ioctl	O
(	O
errstr	O
,	O
MU_IOCTL_FD	O
,	O
MU_IOCTL_FD_SET_BORROW	int
,	O
&	int
yes	pointer
)	O
;	O
if	O
(	O
!	O
mu_program_name	O
)	O
transport	O
=	O
errstr	int
;	O
else	O
{	O
char	O
*	O
fltargs	pointer
[	O
3	int
]	O
=	O
{	O
"INLINE-COMMENT"	pointer
,	O
}	int
;	O
mu_asprintf	O
(	O
&	pointer
fltargs	pointer
[	O
1	int
]	O
,	O
"%s: "	O
,	O
mu_program_name	O
)	O
;	O
fltargs	O
[	O
2	int
]	O
=	O
NULL	O
;	O
rc	O
=	O
mu_filter_create_args	int
(	O
&	O
transport	struct
,	O
errstr	O
,	O
"INLINE-COMMENT"	O
,	O
2	int
,	O
(	int
const	O
char	O
*	O
*	O
)	O
fltargs	O
,	O
MU_FILTER_ENCODE	int
,	O
MU_STREAM_WRITE	int
)	O
;	O
mu_stream_unref	O
(	O
errstr	pointer
)	O
;	O
free	O
(	O
fltargs	pointer
[	O
1	int
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
fprintf	O
(	O
stderr	pointer
,	O
"%s: cannot open output filter stream: %s"	pointer
,	O
mu_program_name	pointer
?	O
mu_program_name	pointer
:	O
"<unknown>"	O
,	O
mu_strerror	int
(	O
rc	int
)	O
)	O
;	O
abort	O
(	O
)	O
;	O
}	O
mu_stream_set_buffer	O
(	O
transport	O
,	O
mu_buffer_line	int
,	O
0	int
)	O
;	O
}	O
str	O
->	O
event_cb	struct
=	O
NULL	O
;	O
str	O
->	O
event_mask	pointer
=	O
0	pointer
;	O
str	int
->	O
event_cb_data	int
=	O
0	int
;	O
_mu_log_stream_setup	int
(	O
logstr	O
,	O
transport	int
)	O
;	O
stdstream_flushall_setup	O
(	O
)	O
;	O
}	O
static	O
void	O
bootstrap_destroy	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
)	O
{	O
}	O
static	O
struct	O
_mu_file_stream	struct
stdstream	O
[	O
2	O
]	O
=	O
{	O
{	pointer
.	pointer
stream	struct
=	O
{	O
.	O
ref_count	struct
=	O
1	pointer
,	O
.	O
buftype	struct
=	O
mu_buffer_none	O
,	O
.	O
flags	struct
=	O
MU_STREAM_READ	O
,	O
.	int
destroy	O
=	O
bootstrap_destroy	O
,	O
.	O
event_cb	O
=	O
std_bootstrap	O
,	O
.	O
event_mask	O
=	O
_MU_STR_EVMASK	O
(	O
_MU_STR_EVENT_BOOTSTRAP	int
)	O
}	O
,	O
.	O
fd	struct
=	O
MU_STDIN_FD	O
,	O
.	int
filename	O
=	O
"<stdin>"	O
,	O
.	O
flags	struct
=	O
_MU_FILE_STREAM_FD_BORROWED	O
|	O
_MU_FILE_STREAM_STATIC_FILENAME	O
}	O
,	O
{	O
.	O
stream	struct
=	O
{	O
.	O
ref_count	struct
=	O
1	O
,	O
.	O
buftype	struct
=	O
mu_buffer_none	O
,	O
.	O
flags	O
=	O
MU_STREAM_WRITE	O
,	O
.	O
destroy	O
=	O
bootstrap_destroy	O
,	O
.	O
event_cb	O
=	O
std_bootstrap	O
,	O
.	O
event_mask	O
=	O
_MU_STR_EVMASK	O
(	O
_MU_STR_EVENT_BOOTSTRAP	int
)	O
}	O
,	O
.	O
fd	struct
=	O
MU_STDOUT_FD	O
,	O
.	int
filename	O
=	O
"<stdout>"	O
,	O
.	O
flags	O
=	O
_MU_FILE_STREAM_FD_BORROWED	O
|	O
_MU_FILE_STREAM_STATIC_FILENAME	O
}	O
}	O
;	O
static	O
struct	O
_mu_log_stream	struct
default_strerr	O
=	O
{	O
.	O
base	struct
=	O
{	O
.	O
ref_count	struct
=	O
1	pointer
,	O
.	O
buftype	struct
=	O
mu_buffer_none	O
,	O
.	O
flags	struct
=	O
MU_STREAM_WRITE	O
,	O
.	O
destroy	O
=	O
bootstrap_destroy	O
,	O
.	O
event_cb	O
=	O
std_log_bootstrap	O
,	O
.	O
event_mask	O
=	O
_MU_STR_EVMASK	O
(	O
_MU_STR_EVENT_BOOTSTRAP	int
)	O
}	O
}	O
;	O
mu_stream_t	O
mu_strin	function
=	O
(	function
mu_stream_t	O
)	O
&	O
stdstream	pointer
[	O
MU_STDIN_FD	int
]	O
;	O
mu_stream_t	O
mu_strout	pointer
=	O
(	pointer
mu_stream_t	O
)	O
&	O
stdstream	pointer
[	O
MU_STDOUT_FD	int
]	O
;	O
mu_stream_t	O
mu_strerr	pointer
=	O
(	pointer
mu_stream_t	O
)	O
&	O
default_strerr	pointer
;	O
static	O
void	O
stdstream_flushall	function
(	O
void	O
*	O
data	pointer
MU_ARG_UNUSED	O
)	O
{	O
mu_stream_flush	O
(	O
mu_strin	O
)	O
;	O
mu_stream_flush	O
(	O
mu_strout	pointer
)	O
;	O
mu_stream_flush	O
(	O
mu_strerr	pointer
)	O
;	O
}	O
static	O
void	O
stdstream_flushall_setup	function
(	O
void	O
)	O
{	O
static	O
int	O
_setup	function
=	O
0	O
;	O
if	O
(	O
!	O
_setup	pointer
)	O
{	O
mu_onexit	O
(	O
stdstream_flushall	int
,	O
NULL	int
)	O
;	O
_setup	O
=	O
1	int
;	O
}	O
}	O
void	O
mu_stdstream_setup	function
(	O
int	O
flags	int
)	O
{	O
int	O
rc	int
;	O
int	O
fd	int
;	O
int	O
yes	int
=	O
1	int
;	O
if	O
(	O
flags	O
&	O
MU_STDSTREAM_RESET_STRIN	int
)	O
mu_stream_destroy	O
(	O
&	O
mu_strin	struct
)	O
;	O
if	O
(	O
flags	int
&	O
MU_STDSTREAM_RESET_STROUT	int
)	O
mu_stream_destroy	O
(	O
&	O
mu_strout	struct
)	O
;	O
if	O
(	O
flags	int
&	O
MU_STDSTREAM_RESET_STRERR	int
)	O
mu_stream_destroy	O
(	O
&	O
mu_strerr	struct
)	O
;	O
fd	O
=	O
open	function
(	O
"/dev/null"	O
,	O
O_RDWR	int
)	O
;	O
switch	O
(	O
fd	int
)	O
{	O
case	O
0	O
:	O
fd	O
=	O
open	O
(	O
"/dev/null"	O
,	O
O_WRONLY	int
)	O
;	O
if	O
(	O
fd	int
!=	O
1	O
)	O
{	O
if	O
(	O
fd	int
>	O
2	int
)	O
close	O
(	O
fd	int
)	O
;	O
break	O
;	O
}	O
case	O
1	O
:	O
fd	O
=	O
open	function
(	O
"/dev/null"	O
,	O
O_WRONLY	int
)	O
;	O
if	O
(	O
fd	int
!=	O
2	O
)	O
close	O
(	O
fd	int
)	O
;	O
break	O
;	O
case	O
2	int
:	O
;	int
break	O
;	O
default	O
:	O
close	O
(	O
fd	int
)	O
;	O
break	O
;	O
}	O
if	O
(	O
!	O
mu_strin	O
)	O
{	function
rc	function
=	O
mu_stdio_stream_create	int
(	O
&	O
mu_strin	struct
,	O
MU_STDIN_FD	O
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
fprintf	O
(	O
stderr	pointer
,	O
"mu_stdio_stream_create(%d): %s\n"	pointer
,	O
MU_STDIN_FD	pointer
,	O
mu_strerror	int
(	O
rc	int
)	O
)	O
;	O
abort	O
(	O
)	O
;	O
}	O
mu_stream_ioctl	O
(	O
mu_strin	O
,	O
MU_IOCTL_FD	int
,	O
MU_IOCTL_FD_SET_BORROW	int
,	O
&	int
yes	pointer
)	O
;	O
}	O
if	O
(	O
!	O
mu_strout	O
)	O
{	O
rc	function
=	O
mu_stdio_stream_create	int
(	O
&	O
mu_strout	struct
,	O
MU_STDOUT_FD	O
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
fprintf	O
(	O
stderr	pointer
,	O
"mu_stdio_stream_create(%d): %s\n"	pointer
,	O
MU_STDOUT_FD	pointer
,	O
mu_strerror	int
(	O
rc	int
)	O
)	O
;	O
abort	O
(	O
)	O
;	O
}	O
mu_stream_ioctl	O
(	O
mu_strout	O
,	O
MU_IOCTL_FD	O
,	O
MU_IOCTL_FD_SET_BORROW	int
,	O
&	int
yes	pointer
)	O
;	O
}	O
if	O
(	O
!	O
mu_strerr	O
)	O
{	O
if	function
(	O
mu_stdstream_strerr_create	int
(	O
&	int
mu_strerr	pointer
,	O
MU_STRERR_STDERR	int
,	O
0	int
,	O
0	int
,	O
mu_program_name	int
,	O
NULL	int
)	O
)	O
abort	O
(	O
)	O
;	O
}	O
stdstream_flushall_setup	O
(	O
)	O
;	O
}	O
int	O
mu_printf	function
(	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
int	O
rc	int
;	O
va_list	O
ap	pointer
;	O
va_start	O
(	O
ap	pointer
,	O
fmt	pointer
)	O
;	O
rc	O
=	O
mu_stream_vprintf	function
(	O
mu_strout	O
,	O
fmt	pointer
,	O
ap	pointer
)	O
;	O
va_end	O
(	O
ap	pointer
)	O
;	O
return	O
rc	O
;	O
}	O