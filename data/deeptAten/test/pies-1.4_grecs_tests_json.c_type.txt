static	O
void	O
printer	function
(	O
void	O
*	O
d	pointer
,	O
char	O
const	O
*	O
buf	pointer
,	O
size_t	O
size	long
)	O
{	O
FILE	O
*	O
fp	pointer
=	O
d	O
;	O
fwrite	O
(	O
buf	pointer
,	O
size	pointer
,	O
1	pointer
,	O
fp	pointer
)	O
;	O
}	O
struct	O
json_format	struct
fmt	O
=	O
{	O
0	O
,	O
-	int
1	int
,	O
printer	O
,	O
NULL	O
}	O
;	O
static	O
void	O
usage	function
(	O
const	O
char	O
*	O
arg	pointer
,	O
FILE	O
*	O
fp	pointer
,	O
int	O
code	int
)	O
{	O
fprintf	O
(	O
fp	pointer
,	O
"usage: %s [-file=FILE][-indent=N][-precision=N] [expr]\n"	pointer
,	O
arg	pointer
)	O
;	O
exit	O
(	O
code	int
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	pointer
argv	pointer
)	O
{	O
char	O
*	O
progname	pointer
=	O
argv	O
[	O
0	int
]	O
;	O
char	O
*	O
file	pointer
=	O
NULL	O
;	O
char	O
*	O
input	pointer
;	O
size_t	O
size	long
;	O
struct	O
json_value	struct
*	O
obj	pointer
;	O
char	O
*	O
key	pointer
=	O
NULL	O
;	O
while	O
(	O
--	O
argc	O
)	O
{	O
char	O
*	O
arg	pointer
=	O
*	O
++	pointer
argv	O
;	O
if	O
(	O
strncmp	O
(	O
arg	pointer
,	O
"-file="	pointer
,	O
6	pointer
)	O
==	O
0	int
)	O
file	O
=	O
arg	pointer
+	O
6	int
;	O
else	O
if	O
(	O
strncmp	pointer
(	O
arg	pointer
,	O
"-indent="	pointer
,	O
8	pointer
)	O
==	O
0	int
)	O
fmt	O
.	O
indent	pointer
=	O
atoi	O
(	O
arg	pointer
+	O
8	int
)	O
;	O
else	O
if	O
(	O
strncmp	pointer
(	O
arg	pointer
,	O
"-search="	pointer
,	O
8	pointer
)	O
==	O
0	int
)	O
key	O
=	O
arg	pointer
+	O
8	int
;	O
else	O
if	O
(	O
strncmp	pointer
(	O
arg	pointer
,	O
"-precision="	pointer
,	O
11	pointer
)	O
==	O
0	int
)	O
fmt	O
.	O
precision	pointer
=	O
atoi	O
(	O
arg	pointer
+	O
11	int
)	O
;	O
else	O
if	O
(	O
arg	pointer
[	O
0	int
]	O
==	O
'-'	O
)	O
usage	O
(	O
progname	pointer
,	O
stderr	pointer
,	O
1	pointer
)	O
;	O
else	O
break	O
;	O
}	O
if	O
(	O
file	pointer
)	O
{	O
struct	O
stat	struct
st	O
;	O
int	O
fd	int
;	O
ssize_t	O
n	O
;	O
if	O
(	O
argc	O
!=	O
0	O
)	O
usage	O
(	O
progname	pointer
,	O
stderr	pointer
,	O
1	pointer
)	O
;	O
fd	O
=	O
open	O
(	O
file	pointer
,	O
O_RDONLY	pointer
)	O
;	O
if	O
(	O
fd	O
==	O
-	O
1	int
)	O
{	O
perror	O
(	O
file	pointer
)	O
;	O
return	O
2	int
;	O
}	O
if	O
(	O
fstat	O
(	O
fd	int
,	O
&	pointer
st	pointer
)	O
)	O
{	O
perror	O
(	O
"fstat"	pointer
)	O
;	O
return	O
2	int
;	O
}	O
size	O
=	O
(	O
size_t	O
)	O
st	O
.	O
st_size	int
;	O
if	O
(	O
size	O
!=	O
st	O
.	O
st_size	int
)	O
abort	O
(	O
)	O
;	O
input	O
=	O
grecs_malloc	O
(	O
size	pointer
+	O
1	int
)	O
;	O
n	O
=	O
read	O
(	O
fd	pointer
,	O
input	pointer
,	O
size	int
)	O
;	O
if	O
(	O
n	O
==	O
-	O
1	int
)	O
{	O
perror	O
(	O
"read"	pointer
)	O
;	O
return	O
2	int
;	O
}	O
if	O
(	O
n	O
!=	O
size	O
)	O
{	O
fprintf	O
(	O
stderr	pointer
,	O
"%s: short read from %s\n"	pointer
,	O
progname	pointer
,	O
file	pointer
)	O
;	O
return	O
2	int
;	O
}	O
input	O
[	O
n	int
]	O
=	O
0	O
;	O
close	O
(	O
fd	pointer
)	O
;	O
}	O
else	O
if	O
(	O
argc	O
==	O
1	O
)	O
{	O
if	O
(	O
file	O
)	O
usage	O
(	O
progname	pointer
,	O
stderr	pointer
,	O
1	pointer
)	O
;	O
input	O
=	O
*	int
argv	pointer
;	O
size	O
=	O
strlen	O
(	O
input	pointer
)	O
;	O
}	O
else	O
usage	O
(	O
progname	pointer
,	O
stderr	pointer
,	O
1	pointer
)	O
;	O
obj	O
=	O
json_parse_string	function
(	O
input	pointer
,	O
size	int
)	O
;	O
if	O
(	O
!	O
obj	O
)	O
{	O
json_err_locus	O
.	O
beg	pointer
.	O
file	pointer
=	O
json_err_locus	pointer
.	O
end	pointer
.	O
file	pointer
=	O
file	pointer
?	O
file	pointer
:	O
"input"	O
;	O
grecs_error	O
(	O
&	pointer
json_err_locus	pointer
,	O
0	O
,	O
"%s"	int
,	O
json_err_diag	pointer
)	O
;	O
return	O
3	int
;	O
}	O
if	O
(	O
key	O
)	O
{	O
struct	O
json_value	struct
*	O
p	O
=	O
json_value_lookup	O
(	O
obj	pointer
,	O
key	pointer
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
4	O
;	O
obj	O
=	O
p	O
;	O
}	O
fmt	O
.	O
data	struct
=	O
stdout	O
;	O
json_format_value	O
(	O
obj	pointer
,	O
&	pointer
fmt	pointer
)	O
;	O
putchar	O
(	O
'\n'	O
)	O
;	O
return	O
0	int
;	O
}	O