gsl_rng	O
*	O
gsl_rng_alloc	O
(	O
const	O
gsl_rng_type	O
*	O
T	pointer
)	O
{	O
gsl_rng	O
*	O
r	pointer
=	O
(	O
gsl_rng	O
*	O
)	O
malloc	pointer
(	O
sizeof	int
(	O
gsl_rng	O
)	O
)	O
;	O
if	O
(	O
r	O
==	O
0	O
)	O
{	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for rng struct"	pointer
,	O
GSL_ENOMEM	pointer
,	O
0	int
)	O
;	O
}	O
;	O
r	O
->	O
state	pointer
=	O
calloc	O
(	O
1	int
,	O
T	O
->	O
size	int
)	O
;	O
if	O
(	O
r	O
->	O
state	int
==	O
0	O
)	O
{	O
free	O
(	O
r	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for rng state"	pointer
,	O
GSL_ENOMEM	pointer
,	O
0	int
)	O
;	O
}	O
;	O
r	O
->	O
type	pointer
=	O
T	O
;	O
gsl_rng_set	O
(	O
r	pointer
,	O
gsl_rng_default_seed	int
)	O
;	O
return	O
r	int
;	O
}	O
int	O
gsl_rng_memcpy	function
(	O
gsl_rng	O
*	O
dest	pointer
,	O
const	O
gsl_rng	O
*	O
src	pointer
)	O
{	O
if	O
(	O
dest	O
->	O
type	pointer
!=	O
src	O
->	O
type	pointer
)	O
{	O
GSL_ERROR	O
(	O
"generators must be of the same type"	pointer
,	O
GSL_EINVAL	pointer
)	O
;	O
}	O
memcpy	O
(	O
dest	pointer
->	O
state	pointer
,	O
src	pointer
->	O
state	pointer
,	O
src	pointer
->	O
type	pointer
->	O
size	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
gsl_rng	O
*	O
gsl_rng_clone	function
(	O
const	O
gsl_rng	O
*	O
q	pointer
)	O
{	O
gsl_rng	O
*	O
r	pointer
=	O
(	int
gsl_rng	O
*	O
)	O
malloc	pointer
(	O
sizeof	int
(	O
gsl_rng	O
)	O
)	O
;	O
if	O
(	O
r	O
==	O
0	O
)	O
{	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for rng struct"	pointer
,	O
GSL_ENOMEM	pointer
,	O
0	int
)	O
;	O
}	O
;	O
r	O
->	O
state	pointer
=	O
malloc	O
(	O
q	int
->	O
type	pointer
->	O
size	pointer
)	O
;	O
if	O
(	O
r	O
->	O
state	int
==	O
0	O
)	O
{	O
free	O
(	O
r	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for rng state"	pointer
,	O
GSL_ENOMEM	pointer
,	O
0	int
)	O
;	O
}	O
;	O
r	O
->	O
type	pointer
=	O
q	int
->	O
type	pointer
;	O
memcpy	O
(	O
r	pointer
->	O
state	pointer
,	O
q	pointer
->	O
state	pointer
,	O
q	pointer
->	O
type	pointer
->	O
size	pointer
)	O
;	O
return	O
r	int
;	O
}	O
void	O
gsl_rng_set	function
(	O
const	O
gsl_rng	O
*	O
r	pointer
,	O
unsigned	O
long	O
int	O
seed	int
)	O
{	O
(	O
r	O
->	O
type	int
->	O
set	pointer
)	O
(	O
r	O
->	O
state	int
,	O
seed	O
)	O
;	O
}	O
unsigned	O
long	O
int	O
gsl_rng_max	function
(	O
const	O
gsl_rng	O
*	O
r	pointer
)	O
{	O
return	O
r	int
->	O
type	int
->	O
max	pointer
;	O
}	O
unsigned	O
long	O
int	O
gsl_rng_min	function
(	O
const	O
gsl_rng	O
*	O
r	pointer
)	O
{	O
return	O
r	int
->	O
type	int
->	O
min	pointer
;	O
}	O
const	O
char	O
*	O
gsl_rng_name	O
(	O
const	O
gsl_rng	O
*	O
r	pointer
)	O
{	O
return	O
r	int
->	O
type	int
->	O
name	pointer
;	O
}	O
size_t	O
gsl_rng_size	O
(	O
const	O
gsl_rng	O
*	O
r	pointer
)	O
{	O
return	O
r	int
->	O
type	int
->	O
size	pointer
;	O
}	O
void	O
*	function
gsl_rng_state	function
(	O
const	O
gsl_rng	O
*	O
r	pointer
)	O
{	O
return	O
r	int
->	O
state	int
;	O
}	O
void	O
gsl_rng_print_state	function
(	O
const	O
gsl_rng	O
*	O
r	pointer
)	O
{	O
size_t	O
i	long
;	O
unsigned	O
char	O
*	O
p	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
(	O
r	O
->	O
state	long
)	O
;	O
const	O
size_t	O
n	long
=	O
r	O
->	O
type	long
->	O
size	pointer
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	int
++	O
)	O
{	O
printf	O
(	O
"%.2x"	pointer
,	O
*	pointer
(	pointer
p	O
+	O
i	O
)	O
)	O
;	O
}	O
}	O
void	O
gsl_rng_free	function
(	O
gsl_rng	O
*	O
r	pointer
)	O
{	O
RETURN_IF_NULL	O
(	O
r	pointer
)	O
;	O
free	O
(	O
r	pointer
->	O
state	pointer
)	O
;	O
free	O
(	O
r	pointer
)	O
;	O
}	O