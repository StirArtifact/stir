char	O
*	O
careadlinkat	O
(	O
int	O
fd	O
,	O
char	O
const	O
*	O
filename	pointer
,	O
char	O
*	O
buffer	pointer
,	O
size_t	O
buffer_size	O
,	O
struct	O
allocator	struct
const	O
*	O
alloc	pointer
,	O
ssize_t	O
(	O
*	O
preadlinkat	pointer
)	O
(	O
int	O
,	O
char	O
const	O
*	O
,	pointer
char	O
*	O
,	O
size_t	O
)	O
)	O
{	O
char	O
*	O
buf	pointer
;	O
size_t	O
buf_size	O
;	O
size_t	O
buf_size_max	long
=	O
SSIZE_MAX	pointer
<	O
SIZE_MAX	long
?	O
(	long
size_t	pointer
)	O
SSIZE_MAX	O
+	O
1	long
:	O
SIZE_MAX	O
;	O
char	O
stack_buf	O
[	O
1024	O
]	O
;	O
if	O
(	O
!	long
alloc	pointer
)	O
alloc	O
=	O
&	pointer
stdlib_allocator	pointer
;	O
if	O
(	O
!	O
buffer_size	O
)	O
{	O
buffer	O
=	O
stack_buf	O
;	O
buffer_size	O
=	O
sizeof	O
stack_buf	O
;	O
}	O
buf	O
=	O
buffer	O
;	O
buf_size	O
=	O
buffer_size	O
;	O
do	O
{	O
ssize_t	O
link_length	O
=	O
preadlinkat	pointer
(	O
fd	pointer
,	O
filename	pointer
,	O
buf	pointer
,	O
buf_size	long
)	O
;	O
size_t	O
link_size	O
;	O
if	O
(	O
link_length	long
<	O
0	long
)	O
{	O
int	O
readlinkat_errno	int
=	O
errno	O
;	O
if	O
(	O
readlinkat_errno	O
!=	O
ERANGE	O
)	O
{	O
if	O
(	O
buf	O
!=	O
buffer	O
)	O
{	O
alloc	O
->	O
free	pointer
(	O
buf	pointer
)	O
;	O
errno	O
=	O
readlinkat_errno	int
;	O
}	O
return	O
NULL	O
;	O
}	O
}	O
link_size	O
=	O
link_length	O
;	O
if	O
(	O
link_size	long
<	O
buf_size	int
)	O
{	O
buf	O
[	O
link_size	int
++	O
]	O
=	O
'\0'	pointer
;	O
if	pointer
(	O
buf	O
==	O
stack_buf	O
)	O
{	O
char	O
*	O
b	pointer
=	O
(	O
char	O
*	O
)	O
alloc	pointer
->	O
allocate	long
(	O
link_size	pointer
)	O
;	O
buf_size	O
=	O
link_size	O
;	O
if	O
(	O
!	O
b	O
)	O
break	O
;	O
memcpy	O
(	O
b	pointer
,	O
buf	pointer
,	O
link_size	pointer
)	O
;	O
buf	O
=	O
b	O
;	O
}	O
else	O
if	O
(	O
link_size	O
<	O
buf_size	int
&&	O
buf	O
!=	O
buffer	O
&&	O
alloc	pointer
->	O
reallocate	pointer
)	O
{	O
char	O
*	O
b	pointer
=	O
(	O
char	O
*	O
)	O
alloc	pointer
->	O
reallocate	pointer
(	O
buf	pointer
,	O
link_size	pointer
)	O
;	O
if	O
(	O
b	O
)	O
buf	O
=	O
b	int
;	O
}	O
return	O
buf	O
;	O
}	O
if	O
(	O
buf	O
!=	O
buffer	O
)	O
alloc	O
->	O
free	pointer
(	O
buf	pointer
)	O
;	O
if	O
(	O
buf_size	O
<=	O
buf_size_max	O
/	O
2	int
)	O
buf_size	O
*=	O
2	O
;	O
else	O
if	O
(	O
buf_size	pointer
<	O
buf_size_max	O
)	O
buf_size	O
=	O
buf_size_max	pointer
;	O
else	O
if	O
(	O
buf_size_max	pointer
<	O
SIZE_MAX	int
)	O
{	O
errno	O
=	O
ENAMETOOLONG	int
;	O
return	O
NULL	int
;	O
}	O
else	O
break	O
;	O
buf	O
=	O
(	O
char	O
*	O
)	O
alloc	pointer
->	O
allocate	pointer
(	O
buf_size	pointer
)	O
;	O
}	O
while	O
(	O
buf	O
)	O
;	O
if	O
(	O
alloc	O
->	O
die	pointer
)	O
alloc	O
->	O
die	pointer
(	O
buf_size	pointer
)	O
;	O
errno	O
=	O
ENOMEM	int
;	O
return	O
NULL	int
;	O
}	O