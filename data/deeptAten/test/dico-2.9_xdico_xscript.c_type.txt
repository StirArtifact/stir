struct	O
transcript_stream	struct
{	O
int	O
flags	int
;	O
dico_stream_t	O
transport	O
;	O
dico_stream_t	O
logstr	pointer
;	O
char	O
*	O
prefix	pointer
[	O
2	O
]	O
;	O
}	O
;	O
static	O
void	O
print_transcript	function
(	O
struct	O
transcript_stream	struct
*	O
str	pointer
,	O
int	O
flag	int
,	O
const	O
char	O
*	O
buf	pointer
,	O
size_t	O
size	O
)	O
{	O
while	O
(	O
size	int
)	O
{	O
const	O
char	O
*	O
p	pointer
;	O
size_t	O
len	long
;	O
if	O
(	O
str	O
->	O
flags	pointer
&	O
flag	int
)	O
{	O
dico_stream_write	O
(	O
str	pointer
->	O
logstr	pointer
,	O
str	pointer
->	O
prefix	pointer
[	O
FLAG_TO_PFX	int
(	O
flag	pointer
)	O
]	O
,	O
strlen	pointer
(	O
str	pointer
->	O
prefix	pointer
[	O
FLAG_TO_PFX	int
(	O
flag	pointer
)	O
]	O
)	O
)	O
;	O
str	O
->	O
flags	pointer
&=	O
~	O
flag	O
;	O
}	int
p	O
=	O
memchr	function
(	O
buf	pointer
,	O
'\n'	pointer
,	O
size	pointer
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
len	O
=	O
p	int
-	O
buf	int
;	O
if	O
(	O
p	pointer
>	O
buf	int
&&	O
p	int
[	O
-	int
1	int
]	O
==	O
'\r'	O
)	O
len	O
--	O
;	O
dico_stream_write	O
(	O
str	pointer
->	O
logstr	pointer
,	O
buf	pointer
,	O
len	pointer
)	O
;	O
dico_stream_write	O
(	O
str	pointer
->	O
logstr	pointer
,	O
"\n"	pointer
,	O
1	pointer
)	O
;	O
str	O
->	O
flags	pointer
|=	O
flag	int
;	O
len	int
=	O
p	int
-	O
buf	int
+	O
1	int
;	O
buf	int
=	O
p	int
+	O
1	int
;	O
size	int
-=	O
len	int
;	O
}	pointer
else	O
{	O
dico_stream_write	O
(	O
str	pointer
->	O
logstr	pointer
,	O
buf	pointer
,	O
size	pointer
)	O
;	O
break	O
;	O
}	O
}	O
}	O
static	O
int	O
transcript_read	function
(	O
void	O
*	O
data	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	O
size	long
,	O
size_t	O
*	long
pret	pointer
)	O
{	O
struct	O
transcript_stream	struct
*	O
p	pointer
=	O
data	O
;	O
size_t	O
nbytes	long
;	O
if	O
(	O
dico_stream_read	long
(	O
p	pointer
->	O
transport	pointer
,	O
buf	pointer
,	O
size	long
,	O
&	pointer
nbytes	pointer
)	O
==	O
0	int
)	O
{	O
print_transcript	O
(	O
p	pointer
,	O
TRANS_READ	pointer
,	O
buf	pointer
,	O
nbytes	long
)	O
;	O
if	O
(	O
pret	pointer
)	O
*	O
pret	pointer
=	O
nbytes	O
;	O
}	O
else	O
return	O
dico_stream_last_error	O
(	O
p	pointer
->	O
transport	pointer
)	O
;	O
return	O
0	O
;	O
}	O
static	O
int	O
transcript_write	function
(	O
void	O
*	O
data	pointer
,	O
const	O
char	O
*	O
buf	pointer
,	O
size_t	O
size	long
,	O
size_t	O
*	long
pret	pointer
)	O
{	O
struct	O
transcript_stream	struct
*	O
p	pointer
=	O
data	O
;	O
if	O
(	O
dico_stream_write	long
(	O
p	pointer
->	O
transport	pointer
,	O
buf	pointer
,	O
size	pointer
)	O
==	O
0	int
)	O
{	O
print_transcript	O
(	O
p	pointer
,	O
TRANS_WRITE	pointer
,	O
buf	pointer
,	O
size	pointer
)	O
;	O
if	O
(	O
pret	pointer
)	O
*	O
pret	pointer
=	O
size	O
;	O
}	O
else	O
return	O
dico_stream_last_error	O
(	O
p	pointer
->	O
transport	pointer
)	O
;	O
return	O
0	O
;	O
}	O
static	O
int	O
transcript_flush	function
(	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
transcript_stream	struct
*	O
p	pointer
=	O
data	O
;	O
if	O
(	O
!	pointer
p	pointer
->	O
transport	pointer
)	O
return	O
0	O
;	O
return	O
dico_stream_flush	int
(	O
p	pointer
->	O
transport	pointer
)	O
;	O
}	O
static	O
int	O
transcript_close	function
(	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
transcript_stream	struct
*	O
p	pointer
=	O
data	O
;	O
dico_stream_close	O
(	O
p	pointer
->	O
logstr	pointer
)	O
;	O
dico_stream_close	O
(	O
p	pointer
->	O
transport	pointer
)	O
;	O
return	O
0	O
;	O
}	O
static	O
int	O
transcript_destroy	function
(	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
transcript_stream	struct
*	O
p	pointer
=	O
data	O
;	O
free	O
(	O
p	pointer
->	O
prefix	pointer
[	O
0	int
]	O
)	O
;	O
free	O
(	O
p	pointer
->	O
prefix	pointer
[	O
1	int
]	O
)	O
;	O
dico_stream_destroy	O
(	O
&	O
p	pointer
->	O
transport	pointer
)	O
;	O
dico_stream_destroy	O
(	O
&	O
p	pointer
->	O
logstr	pointer
)	O
;	O
free	O
(	O
p	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
const	O
char	O
*	O
transcript_strerror	function
(	O
void	O
*	O
data	pointer
,	O
int	O
rc	O
)	O
{	O
struct	O
transcript_stream	struct
*	O
p	pointer
=	O
data	O
;	O
return	O
dico_stream_strerror	int
(	O
p	pointer
->	O
transport	pointer
,	O
rc	pointer
)	O
;	O
}	O
static	O
int	O
transcript_ioctl	function
(	O
void	O
*	O
data	pointer
,	O
int	O
code	O
,	O
void	O
*	O
call_data	pointer
)	O
{	O
struct	O
transcript_stream	struct
*	O
p	pointer
=	O
data	O
;	O
switch	O
(	O
code	int
)	O
{	O
case	O
DICO_IOCTL_GET_TRANSPORT	O
:	O
*	O
(	O
dico_stream_t	O
*	O
)	O
call_data	pointer
=	O
p	O
->	O
transport	pointer
;	O
break	O
;	O
case	O
DICO_IOCTL_SET_TRANSPORT	O
:	O
p	O
->	O
transport	pointer
=	O
call_data	O
;	O
break	pointer
;	O
case	O
DICO_IOCTL_BYTES_IN	O
:	O
*	O
(	O
off_t	O
*	O
)	O
call_data	pointer
=	O
dico_stream_bytes_in	O
(	O
p	pointer
->	O
transport	pointer
)	O
;	O
break	O
;	O
case	O
DICO_IOCTL_BYTES_OUT	O
:	O
*	O
(	O
off_t	O
*	O
)	O
call_data	pointer
=	O
dico_stream_bytes_out	O
(	O
p	pointer
->	O
transport	pointer
)	O
;	O
break	O
;	O
default	O
:	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	int
1	int
;	O
}	O
return	O
0	O
;	O
}	O
const	O
char	O
*	O
default_prefix	function
[	O
2	O
]	O
=	O
{	pointer
"C: "	pointer
,	O
"S: "	pointer
}	O
;	O
dico_stream_t	O
xdico_transcript_stream_create	function
(	O
dico_stream_t	O
transport	O
,	O
dico_stream_t	O
logstr	pointer
,	O
const	O
char	O
*	O
prefix	pointer
[	O
]	O
)	O
{	O
struct	O
transcript_stream	struct
*	O
p	pointer
=	O
xmalloc	O
(	O
sizeof	O
(	O
*	O
p	pointer
)	O
)	O
;	O
dico_stream_t	O
stream	O
;	O
int	O
rc	int
=	O
dico_stream_create	int
(	O
&	O
stream	pointer
,	O
DICO_STREAM_READ	O
|	O
DICO_STREAM_WRITE	int
,	O
p	O
)	O
;	O
if	O
(	O
rc	O
)	O
xalloc_die	O
(	O
)	O
;	O
p	O
->	O
flags	pointer
=	O
TRANS_READ	int
|	O
TRANS_WRITE	O
;	O
if	pointer
(	O
prefix	pointer
)	O
{	O
p	O
->	O
prefix	pointer
[	O
0	int
]	O
=	O
xstrdup	pointer
(	O
prefix	pointer
[	O
0	int
]	O
?	O
prefix	pointer
[	O
0	int
]	O
:	O
default_prefix	pointer
[	O
0	int
]	O
)	O
;	O
p	O
->	O
prefix	pointer
[	O
1	int
]	O
=	O
xstrdup	pointer
(	O
prefix	pointer
[	O
1	int
]	O
?	O
prefix	pointer
[	O
1	int
]	O
:	O
default_prefix	pointer
[	O
1	int
]	O
)	O
;	O
}	O
else	O
{	O
p	O
->	O
prefix	pointer
[	O
0	int
]	O
=	O
xstrdup	pointer
(	O
default_prefix	pointer
[	O
0	int
]	O
)	O
;	O
p	O
->	O
prefix	pointer
[	O
1	int
]	O
=	O
xstrdup	pointer
(	O
default_prefix	pointer
[	O
1	int
]	O
)	O
;	O
}	O
p	O
->	O
transport	pointer
=	O
transport	O
;	O
p	O
->	O
logstr	pointer
=	O
logstr	int
;	O
dico_stream_set_read	pointer
(	O
stream	pointer
,	O
transcript_read	O
)	O
;	O
dico_stream_set_write	O
(	O
stream	O
,	O
transcript_write	O
)	O
;	O
dico_stream_set_flush	O
(	O
stream	O
,	O
transcript_flush	O
)	O
;	O
dico_stream_set_close	O
(	O
stream	O
,	O
transcript_close	O
)	O
;	O
dico_stream_set_destroy	O
(	O
stream	O
,	O
transcript_destroy	O
)	O
;	O
dico_stream_set_ioctl	O
(	O
stream	O
,	O
transcript_ioctl	O
)	O
;	O
dico_stream_set_error_string	O
(	O
stream	O
,	O
transcript_strerror	O
)	O
;	O
dico_stream_set_buffer	O
(	O
stream	O
,	O
dico_buffer_line	O
,	O
1024	int
)	O
;	O
return	O
stream	int
;	O
}	O