int	O
user_heart_attack	function
;	O
static	O
int	O
suspend_requested	function
;	O
static	O
int	O
refresh_requested	function
;	O
static	O
int	O
alarm_requested	function
;	O
static	O
int	O
refresh_at_SIGCONT	function
;	O
static	O
int	O
signals_allowed	function
=	O
OFF	O
;	O
static	O
int	O
job_control	int
=	O
ON	O
;	O
static	O
void	O
install_handler	function
PROTO	O
(	O
(	O
int	O
)	O
)	O
;	O
extern	O
void	O
hide	function
PROTO	O
(	O
(	O
)	O
)	O
;	O
extern	O
void	O
refresh	function
PROTO	O
(	O
(	O
int	O
)	O
)	O
;	O
extern	O
void	O
clock_refresh	function
PROTO	O
(	O
(	O
int	O
)	O
)	O
;	O
void	O
service_pending_signals	function
(	O
)	O
{	O
if	O
(	O
suspend_requested	int
)	O
{	O
hide	O
(	O
)	int
;	O
kill	O
(	O
getpid	int
(	O
)	O
,	O
SIGSTOP	O
)	O
;	O
suspend_requested	O
=	O
0	O
;	O
refresh_requested	O
=	O
0	O
;	O
alarm_requested	O
=	O
0	O
;	O
return	O
;	int
}	O
if	O
(	O
refresh_requested	O
)	O
{	O
tty_defaults	O
(	O
)	O
;	O
tty_io_clear	O
(	O
)	O
;	O
refresh	O
(	O
SIGWINCH	O
)	O
;	O
refresh_requested	O
=	O
0	O
;	O
alarm_requested	O
=	O
0	O
;	O
return	O
;	int
}	O
if	O
(	O
alarm_requested	O
)	O
{	O
alarm_requested	O
=	O
0	int
;	O
return	O
;	int
}	O
}	O
void	O
signals	function
(	O
mode	O
)	O
int	O
mode	int
;	O
{	O
signals_allowed	O
=	O
mode	int
;	O
if	O
(	O
signals_allowed	int
)	O
service_pending_signals	O
(	O
)	pointer
;	O
}	O
static	O
RETSIGTYPE	O
suspend	function
(	O
signum	O
)	O
int	O
signum	int
;	O
{	O
if	O
(	O
signals_allowed	int
)	O
{	O
refresh_at_SIGCONT	O
=	O
(	int
tty_get_mode	O
(	O
)	pointer
==	O
TTY_NONCANONIC	O
)	O
;	O
hide	O
(	O
)	O
;	O
kill	O
(	O
getpid	int
(	O
)	O
,	O
SIGSTOP	O
)	O
;	O
suspend_requested	O
=	O
0	O
;	O
}	O
else	O
suspend_requested	O
=	O
1	function
;	O
install_handler	O
(	O
signum	O
)	O
;	O
}	O
static	O
RETSIGTYPE	O
window_change	function
(	O
signum	O
)	O
int	O
signum	int
;	O
{	O
if	O
(	O
signals_allowed	int
)	O
{	O
tty_defaults	O
(	O
)	O
;	O
tty_io_clear	O
(	O
)	O
;	O
refresh	O
(	O
signum	O
)	O
;	O
refresh_requested	O
=	O
0	O
;	O
}	O
else	O
refresh_requested	O
=	O
1	function
;	O
install_handler	O
(	O
signum	O
)	O
;	O
}	O
static	O
RETSIGTYPE	O
resume	function
(	O
signum	O
)	O
int	O
signum	int
;	O
{	O
if	O
(	O
refresh_at_SIGCONT	int
)	O
{	O
refresh	O
(	O
signum	pointer
)	O
;	O
refresh_requested	O
=	O
0	O
;	O
}	O
install_handler	O
(	O
signum	O
)	O
;	O
}	O
static	O
RETSIGTYPE	O
time_change	function
(	O
signum	O
)	O
int	O
signum	int
;	O
{	O
if	O
(	O
signals_allowed	int
)	O
{	O
if	O
(	O
get_local_time	int
(	O
)	pointer
->	O
tm_sec	pointer
==	O
0	O
)	O
clock_refresh	O
(	O
signum	pointer
)	O
;	O
tty_key_print_async	O
(	O
)	pointer
;	O
alarm_requested	O
=	O
0	O
;	O
}	O
else	O
alarm_requested	O
=	O
1	function
;	O
install_handler	O
(	O
signum	pointer
)	O
;	O
alarm	O
(	O
60	int
-	O
get_local_time	int
(	O
)	O
->	O
tm_sec	pointer
)	O
;	O
}	O
static	O
RETSIGTYPE	O
panic	function
(	O
signum	O
)	O
int	O
signum	int
;	O
{	O
signal	O
(	O
signum	int
,	O
panic	O
)	O
;	O
user_heart_attack	O
=	O
1	O
;	O
}	O
static	O
void	O
install_handler	function
(	O
signum	O
)	O
int	O
signum	int
;	O
{	O
switch	O
(	O
signum	int
)	O
{	O
case	O
SIGTSTP	O
:	O
signal	O
(	O
SIGTSTP	int
,	O
suspend	O
)	O
;	O
break	O
;	O
case	O
SIGCONT	O
:	O
signal	O
(	O
SIGCONT	int
,	O
resume	O
)	O
;	O
break	O
;	O
case	O
SIGWINCH	O
:	O
signal	O
(	O
SIGWINCH	int
,	O
window_change	O
)	O
;	O
break	O
;	O
case	O
SIGALRM	O
:	O
signal	O
(	O
SIGALRM	int
,	O
time_change	O
)	O
;	O
break	O
;	O
default	O
:	O
assert	O
(	O
0	O
)	O
;	O
}	O
}	O
void	O
signal_handlers	function
(	O
status	O
)	O
int	O
status	int
;	O
{	O
if	O
(	O
status	int
==	O
ON	int
)	O
{	O
if	O
(	O
job_control	int
)	O
{	O
install_handler	O
(	O
SIGTSTP	pointer
)	O
;	O
install_handler	O
(	O
SIGCONT	pointer
)	O
;	O
}	O
install_handler	O
(	O
SIGWINCH	O
)	O
;	O
install_handler	O
(	O
SIGALRM	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
job_control	int
)	O
{	O
signal	O
(	O
SIGTSTP	int
,	O
SIG_IGN	pointer
)	O
;	O
signal	O
(	O
SIGCONT	int
,	O
SIG_IGN	O
)	O
;	O
}	O
signal	O
(	O
SIGWINCH	int
,	O
SIG_IGN	O
)	O
;	O
signal	O
(	O
SIGALRM	int
,	O
SIG_IGN	O
)	O
;	O
}	O
}	O
void	O
signals_init	function
(	O
)	O
{	O
job_control	O
=	O
(	int
signal	O
(	O
SIGTSTP	int
,	O
SIG_IGN	O
)	O
!=	O
SIG_IGN	O
)	O
;	O
signal	O
(	O
SIGCONT	int
,	O
SIG_IGN	O
)	O
;	O
signal	O
(	O
SIGWINCH	int
,	O
SIG_IGN	O
)	O
;	O
signal	O
(	O
SIGSEGV	int
,	O
fatal_signal	O
)	O
;	O
signal	O
(	O
SIGHUP	int
,	O
fatal_signal	int
)	O
;	O
signal	O
(	O
SIGTERM	int
,	O
fatal_signal	int
)	O
;	O
signal	O
(	O
SIGQUIT	int
,	O
SIG_IGN	O
)	O
;	O
signal	O
(	O
SIGINT	int
,	O
panic	int
)	O
;	O
}	O