static	O
int	O
ahc_echo	function
(	O
void	O
*	O
cls	pointer
,	O
struct	O
MHD_Connection	struct
*	O
connection	pointer
,	O
const	O
char	O
*	O
url	pointer
,	O
const	O
char	O
*	O
method	pointer
,	O
const	O
char	O
*	O
version	pointer
,	O
const	O
char	O
*	O
upload_data	pointer
,	O
size_t	O
*	O
upload_data_size	pointer
,	O
void	O
*	O
*	pointer
ptr	pointer
)	O
{	O
static	O
int	O
aptr	function
;	O
struct	O
MHD_Response	struct
*	O
response	pointer
;	O
int	O
ret	int
;	O
int	O
fd	int
;	O
struct	O
stat	struct
buf	O
;	O
(	O
void	O
)	O
cls	O
;	O
(	O
void	O
)	O
version	function
;	O
(	O
void	O
)	O
upload_data	O
;	O
(	O
void	O
)	O
upload_data_size	O
;	O
if	O
(	O
(	O
0	O
!=	O
strcmp	O
(	O
method	pointer
,	O
MHD_HTTP_METHOD_GET	pointer
)	O
)	O
&&	O
(	O
0	O
!=	O
strcmp	O
(	O
method	pointer
,	O
MHD_HTTP_METHOD_HEAD	pointer
)	O
)	O
)	O
return	O
MHD_NO	int
;	O
if	O
(	O
&	O
aptr	pointer
!=	O
*	O
ptr	O
)	O
{	O
*	O
ptr	pointer
=	O
&	O
aptr	pointer
;	O
return	O
MHD_YES	O
;	O
}	O
*	O
ptr	function
=	O
NULL	O
;	O
if	O
(	O
NULL	O
!=	O
strstr	O
(	O
url	pointer
,	O
"../"	pointer
)	O
)	O
fd	O
=	O
-	O
1	int
;	O
else	O
fd	O
=	O
open	O
(	O
url	pointer
+	O
1	int
,	O
O_RDONLY	O
)	O
;	O
if	O
(	O
-	O
1	int
!=	O
fd	O
)	O
{	O
if	O
(	O
(	O
0	O
!=	O
fstat	O
(	O
fd	int
,	O
&	O
buf	pointer
)	O
)	O
||	O
(	O
!	O
S_ISREG	O
(	O
buf	pointer
.	O
st_mode	pointer
)	O
)	O
)	O
{	O
if	O
(	O
0	O
!=	O
close	O
(	O
fd	pointer
)	O
)	O
abort	O
(	O
)	O
;	O
fd	O
=	O
-	O
1	int
;	O
}	O
}	O
if	O
(	O
-	O
1	int
==	O
fd	O
)	O
{	O
response	O
=	O
MHD_create_response_from_buffer	int
(	O
strlen	pointer
(	O
PAGE	pointer
)	O
,	O
(	O
void	O
*	O
)	O
PAGE	pointer
,	O
MHD_RESPMEM_PERSISTENT	O
)	O
;	O
ret	O
=	O
MHD_queue_response	O
(	O
connection	pointer
,	O
MHD_HTTP_NOT_FOUND	pointer
,	O
response	pointer
)	O
;	O
MHD_destroy_response	O
(	O
response	pointer
)	O
;	O
}	O
else	O
{	O
response	O
=	O
MHD_create_response_from_fd64	function
(	O
buf	pointer
.	O
st_size	pointer
,	O
fd	pointer
)	O
;	O
if	O
(	O
NULL	O
==	O
response	O
)	O
{	O
if	O
(	O
0	O
!=	O
close	O
(	O
fd	pointer
)	O
)	O
abort	O
(	O
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
ret	O
=	O
MHD_queue_response	O
(	O
connection	pointer
,	O
MHD_HTTP_OK	pointer
,	O
response	pointer
)	O
;	O
MHD_destroy_response	O
(	O
response	pointer
)	O
;	O
}	O
return	O
ret	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
const	pointer
*	O
argv	pointer
)	O
{	O
struct	O
MHD_Daemon	struct
*	O
d	pointer
;	O
if	O
(	O
argc	O
!=	O
2	O
)	O
{	O
printf	O
(	O
"%s PORT\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
return	O
1	int
;	O
}	O
d	O
=	O
MHD_start_daemon	function
(	O
MHD_USE_THREAD_PER_CONNECTION	int
|	O
MHD_USE_INTERNAL_POLLING_THREAD	O
|	O
MHD_USE_ERROR_LOG	O
,	O
atoi	pointer
(	O
argv	pointer
[	O
1	int
]	O
)	O
,	O
NULL	O
,	O
NULL	pointer
,	O
&	O
ahc_echo	pointer
,	O
PAGE	O
,	O
MHD_OPTION_END	O
)	O
;	O
if	O
(	O
d	O
==	O
NULL	O
)	O
return	O
1	O
;	O
(	O
void	O
)	O
getc	function
(	O
stdin	pointer
)	O
;	O
MHD_stop_daemon	O
(	O
d	pointer
)	O
;	O
return	O
0	int
;	O
}	O