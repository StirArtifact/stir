static	O
char	O
*	O
file_system_type_uncached	function
(	O
const	O
struct	O
stat	struct
*	O
statp	pointer
,	O
const	O
char	O
*	O
path	pointer
)	O
;	O
static	O
void	O
free_file_system_list	function
(	O
struct	O
mount_entry	struct
*	O
p	pointer
)	O
{	O
while	O
(	O
p	O
)	O
{	O
struct	O
mount_entry	struct
*	O
pnext	pointer
=	O
p	O
->	O
me_next	pointer
;	O
free	O
(	O
p	pointer
->	O
me_devname	pointer
)	O
;	O
free	O
(	O
p	pointer
->	O
me_mountdir	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
me_type_malloced	pointer
)	O
free	O
(	O
p	pointer
->	O
me_type	pointer
)	O
;	O
p	O
->	O
me_next	pointer
=	O
NULL	O
;	O
free	pointer
(	O
p	pointer
)	O
;	O
p	O
=	O
pnext	O
;	O
}	O
}	O
static	O
int	O
fstype_known	function
=	O
0	O
;	O
char	O
*	O
filesystem_type	pointer
(	O
const	O
struct	O
stat	struct
*	O
statp	pointer
,	O
const	O
char	O
*	O
path	pointer
)	O
{	O
static	O
char	O
*	O
current_fstype	pointer
=	O
NULL	O
;	O
static	O
dev_t	O
current_dev	O
;	O
if	O
(	O
current_fstype	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
fstype_known	pointer
&&	O
statp	pointer
->	O
st_dev	pointer
==	O
current_dev	O
)	O
return	O
current_fstype	O
;	O
free	O
(	O
current_fstype	pointer
)	O
;	O
}	O
current_dev	O
=	O
statp	function
->	O
st_dev	pointer
;	O
current_fstype	O
=	O
file_system_type_uncached	pointer
(	O
statp	pointer
,	O
path	pointer
)	O
;	O
return	O
current_fstype	int
;	O
}	O
static	O
int	O
set_fstype_devno	function
(	O
struct	O
mount_entry	struct
*	O
p	pointer
)	O
{	O
struct	O
stat	struct
stbuf	O
;	O
if	O
(	O
p	O
->	O
me_dev	pointer
==	O
(	O
dev_t	pointer
)	O
-	O
1	int
)	O
{	O
set_stat_placeholders	O
(	O
&	pointer
stbuf	pointer
)	O
;	O
if	O
(	O
0	O
==	O
(	O
options	int
.	O
xstat	pointer
)	O
(	O
p	O
->	O
me_mountdir	pointer
,	O
&	pointer
stbuf	pointer
)	O
)	O
{	O
p	O
->	O
me_dev	pointer
=	O
stbuf	O
.	O
st_dev	pointer
;	O
return	pointer
0	O
;	O
}	O
else	O
{	O
return	O
-	int
1	int
;	O
}	O
}	O
return	O
0	O
;	O
}	O
static	O
struct	O
mount_entry	struct
*	O
must_read_fs_list	function
(	O
bool	O
need_fs_type	int
)	O
{	O
struct	O
mount_entry	struct
*	O
entries	pointer
=	O
read_file_system_list	O
(	O
need_fs_type	O
)	O
;	O
if	O
(	O
NULL	pointer
==	O
entries	O
)	O
{	O
error	O
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	int
(	O
"Cannot read mounted file system list"	pointer
)	O
)	O
;	O
}	O
return	O
entries	O
;	O
}	O
static	O
char	O
*	O
file_system_type_uncached	function
(	O
const	O
struct	O
stat	struct
*	O
statp	pointer
,	O
const	O
char	O
*	O
path	pointer
)	O
{	O
struct	O
mount_entry	struct
*	O
entries	pointer
,	O
*	O
entry	pointer
,	O
*	O
best	pointer
;	O
char	O
*	O
type	pointer
;	O
(	O
void	O
)	O
path	O
;	O
best	O
=	O
NULL	O
;	O
entries	O
=	O
must_read_fs_list	O
(	O
true	pointer
)	O
;	O
for	O
(	O
type	O
=	O
NULL	int
,	O
entry	pointer
=	O
entries	O
;	O
entry	pointer
;	O
entry	O
=	O
entry	O
->	O
me_next	pointer
)	O
{	O
if	O
(	O
!	pointer
strcmp	pointer
(	O
entry	pointer
->	O
me_type	pointer
,	O
MNTTYPE_IGNORE	pointer
)	O
)	O
continue	O
;	O
if	O
(	O
0	pointer
==	O
set_fstype_devno	O
(	O
entry	pointer
)	O
)	O
{	O
if	O
(	O
entry	pointer
->	O
me_dev	pointer
==	O
statp	O
->	O
st_dev	pointer
)	O
{	O
best	O
=	O
entry	int
;	O
}	O
}	O
}	O
if	O
(	O
best	O
)	O
{	O
type	O
=	O
xstrdup	int
(	O
best	pointer
->	O
me_type	pointer
)	O
;	O
}	O
free_file_system_list	O
(	O
entries	pointer
)	O
;	O
fstype_known	O
=	O
(	O
type	O
!=	O
NULL	O
)	O
;	O
return	O
type	int
?	O
type	O
:	O
xstrdup	O
(	O
_	pointer
(	O
"unknown"	pointer
)	O
)	O
;	O
}	O
char	O
*	O
get_mounted_filesystems	function
(	O
void	O
)	O
{	O
char	O
*	O
result	pointer
=	O
NULL	O
;	O
size_t	O
alloc_size	O
=	O
0u	pointer
;	O
size_t	O
used	long
=	O
0u	int
;	O
struct	O
mount_entry	struct
*	O
entries	pointer
,	O
*	O
entry	pointer
;	O
void	O
*	O
p	pointer
;	O
entries	O
=	O
must_read_fs_list	O
(	O
false	pointer
)	O
;	O
for	O
(	O
entry	long
=	O
entries	int
;	O
entry	pointer
;	O
entry	O
=	O
entry	O
->	O
me_next	pointer
)	O
{	O
size_t	O
len	long
;	O
if	O
(	O
!	long
strcmp	pointer
(	O
entry	pointer
->	O
me_type	pointer
,	O
MNTTYPE_IGNORE	pointer
)	O
)	O
continue	O
;	O
len	O
=	O
strlen	O
(	O
entry	pointer
->	O
me_mountdir	pointer
)	O
+	O
1	int
;	O
p	O
=	O
extendbuf	O
(	O
result	pointer
,	O
used	pointer
+	O
len	int
,	O
&	long
alloc_size	pointer
)	O
;	O
if	O
(	O
p	O
)	O
{	O
result	O
=	O
p	function
;	O
strcpy	O
(	O
&	pointer
result	pointer
[	O
used	int
]	O
,	O
entry	pointer
->	O
me_mountdir	pointer
)	O
;	O
used	O
+=	O
len	int
;	O
}	O
else	O
{	O
break	O
;	O
}	O
}	O
free_file_system_list	O
(	O
entries	O
)	O
;	O
return	O
result	int
;	O
}	O
dev_t	O
*	O
get_mounted_devices	function
(	O
size_t	O
*	long
n	pointer
)	O
{	O
size_t	O
alloc_size	long
=	O
0u	pointer
;	O
size_t	long
used	long
=	O
0u	int
;	O
struct	long
mount_entry	struct
*	O
entries	pointer
,	O
*	O
entry	pointer
;	O
dev_t	O
*	long
result	pointer
=	O
NULL	O
;	O
for	O
(	O
entry	long
=	O
entries	long
=	O
read_file_system_list	pointer
(	O
false	pointer
)	O
;	O
entry	O
;	O
entry	O
=	O
entry	O
->	O
me_next	pointer
)	O
{	O
void	O
*	O
p	pointer
=	O
extendbuf	O
(	O
result	pointer
,	O
sizeof	long
(	O
dev_t	O
)	O
*	O
(	pointer
used	O
+	O
1	int
)	O
,	O
&	O
alloc_size	pointer
)	O
;	O
if	O
(	O
p	O
)	O
{	O
result	O
=	O
p	O
;	O
if	O
(	O
0	long
==	O
set_fstype_devno	O
(	O
entry	pointer
)	O
)	O
{	O
result	O
[	O
used	int
]	O
=	O
entry	O
->	O
me_dev	pointer
;	O
++	O
used	O
;	O
}	O
}	O
else	O
{	O
free	O
(	O
result	pointer
)	O
;	O
result	O
=	O
NULL	function
;	O
}	O
}	O
free_file_system_list	O
(	O
entries	O
)	O
;	O
if	O
(	O
result	long
)	O
{	O
*	O
n	pointer
=	O
used	O
;	O
}	O
return	O
result	O
;	O
}	O