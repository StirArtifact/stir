static	O
char	O
alphabet	O
[	O
]	O
=	O
"0123456789-"	O
;	O
static	O
char	O
*	O
codeset	pointer
[	O
]	O
=	O
{	O
"111121"	O
,	O
"211121"	pointer
,	O
"121121"	pointer
,	O
"221111"	pointer
,	O
"112121"	pointer
,	O
"212111"	pointer
,	O
"122111"	pointer
,	O
"111221"	pointer
,	O
"211211"	int
,	O
"211111"	int
,	O
"112111"	int
,	O
"112211"	int
}	O
;	O
int	O
Barcode_11_verify	function
(	O
unsigned	O
char	O
*	O
text	pointer
)	O
{	O
int	O
i	int
;	O
char	O
*	O
chr	pointer
=	O
NULL	O
;	O
if	O
(	O
text	O
[	O
0	int
]	O
==	O
'\0'	O
)	O
return	O
-	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
text	int
[	O
i	int
]	O
;	O
i	O
++	O
)	O
if	O
(	O
(	int
chr	O
=	O
strchr	O
(	O
alphabet	pointer
,	O
text	pointer
[	O
i	int
]	O
)	O
)	O
==	O
NULL	int
)	O
return	O
-	O
1	int
;	O
return	O
0	O
;	O
}	O
int	O
Barcode_11_encode	function
(	O
struct	O
Barcode_Item	struct
*	O
bc	pointer
)	O
{	O
static	O
char	O
*	O
text	pointer
;	O
static	O
char	O
*	O
partial	pointer
;	O
static	O
char	O
*	O
textinfo	pointer
;	O
char	O
*	O
c	pointer
=	O
NULL	O
,	O
*	O
textptr	pointer
=	O
NULL	O
;	O
int	O
i	int
,	O
code	O
,	O
textpos	int
,	O
len	int
=	O
0	int
;	O
int	O
weight	int
=	O
0	int
;	O
int	O
c_checksum	int
=	O
0	int
,	O
k_checksum	int
=	O
0	int
;	O
if	O
(	O
bc	O
->	O
partial	int
)	O
free	O
(	O
bc	pointer
->	O
partial	pointer
)	O
;	O
if	O
(	O
bc	O
->	O
textinfo	pointer
)	O
free	O
(	O
bc	pointer
->	O
textinfo	pointer
)	O
;	O
bc	O
->	O
partial	pointer
=	O
bc	pointer
->	O
textinfo	pointer
=	O
NULL	pointer
;	O
if	pointer
(	O
(	pointer
bc	O
->	O
encoding	pointer
==	O
NULL	O
)	O
)	O
bc	O
->	O
encoding	pointer
=	O
strdup	pointer
(	O
"code 11"	pointer
)	O
;	O
if	O
(	O
(	pointer
text	O
=	O
bc	O
->	O
ascii	pointer
)	O
==	O
NULL	int
)	O
{	O
bc	O
->	O
error	pointer
=	O
EINVAL	int
;	O
return	pointer
-	int
1	int
;	O
}	O
if	O
(	O
(	O
len	O
=	O
strlen	int
(	O
text	pointer
)	O
)	O
==	O
0	int
)	O
{	O
bc	O
->	O
error	pointer
=	O
EINVAL	int
;	O
return	pointer
-	int
1	int
;	O
}	O
if	O
(	O
(	O
partial	O
=	O
(	O
char	O
*	O
)	O
calloc	pointer
(	O
1	int
,	O
(	O
len	O
>=	O
10	int
)	O
?	O
(	O
(	O
len	O
+	O
4	int
)	O
*	O
7	O
)	O
+	O
1	int
:	O
(	O
(	O
len	O
+	O
3	int
)	O
*	O
7	O
)	O
+	O
1	int
)	O
)	O
==	O
NULL	int
)	O
{	O
bc	O
->	O
error	int
=	O
errno	int
;	O
return	O
-	int
1	int
;	O
}	O
if	O
(	O
(	O
textinfo	O
=	O
(	function
char	O
*	O
)	O
calloc	pointer
(	O
1	int
,	O
10	O
*	O
(	O
len	O
+	O
2	int
)	O
)	O
)	O
==	O
NULL	int
)	O
{	O
bc	O
->	O
error	int
=	O
errno	int
;	O
free	O
(	O
partial	pointer
)	O
;	O
return	O
-	int
1	int
;	O
}	O
strcpy	O
(	O
partial	pointer
,	O
"0"	pointer
)	O
;	O
strcat	O
(	O
partial	pointer
,	O
codeset	pointer
[	O
START_STOP	int
]	O
)	O
;	O
textptr	O
=	O
textinfo	function
;	O
textpos	O
=	O
7	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
text	int
[	O
i	int
]	O
;	O
i	O
++	O
)	O
{	O
if	O
(	O
(	int
c	O
=	O
strchr	function
(	O
alphabet	pointer
,	O
text	O
[	O
i	int
]	O
)	O
)	O
==	O
NULL	int
)	O
{	O
bc	O
->	O
error	int
=	O
EINVAL	int
;	O
free	O
(	O
partial	pointer
)	O
;	O
free	O
(	O
textinfo	pointer
)	O
;	O
return	O
-	int
1	int
;	O
}	O
code	O
=	O
c	function
-	O
alphabet	int
;	O
strcat	O
(	O
partial	pointer
,	O
codeset	pointer
[	O
code	int
]	O
)	O
;	O
sprintf	O
(	O
textptr	pointer
,	O
"%i:7:%c "	pointer
,	O
textpos	pointer
,	O
text	int
[	O
i	int
]	O
)	O
;	O
textpos	O
+=	O
7	int
;	O
textptr	O
+=	O
strlen	int
(	O
textptr	pointer
)	O
;	O
}	O
if	O
(	O
(	int
bc	O
->	O
flags	pointer
&	O
BARCODE_NO_CHECKSUM	int
)	O
==	O
0	int
)	O
{	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
len	int
;	O
i	int
++	O
)	O
{	O
weight	O
=	O
(	int
(	O
i	O
-	O
1	int
)	O
%	O
10	int
)	O
+	O
1	int
;	O
if	O
(	O
text	O
[	O
len	int
-	O
i	int
]	O
==	O
HYPHEN	O
)	O
c_checksum	O
+=	O
(	int
10	O
*	O
weight	O
)	O
;	O
else	O
c_checksum	O
+=	O
(	int
(	O
text	O
[	O
len	int
-	O
i	int
]	O
-	O
48	int
)	O
*	O
weight	O
)	O
;	O
}	O
strcat	O
(	O
partial	pointer
,	O
codeset	pointer
[	O
c_checksum	int
%	O
11	int
]	O
)	O
;	O
if	O
(	O
len	int
>=	O
10	int
)	O
{	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
len	int
;	O
i	int
++	O
)	O
{	O
weight	O
=	O
(	int
(	O
i	O
-	O
1	int
)	O
%	O
9	int
)	O
+	O
(	int
i	int
<	O
9	int
?	O
2	int
:	O
1	int
)	O
;	O
if	O
(	O
text	int
[	O
len	int
-	O
i	int
]	O
==	O
HYPHEN	O
)	O
k_checksum	O
+=	O
(	int
10	O
*	O
weight	O
)	O
;	O
else	O
k_checksum	O
+=	O
(	int
(	O
text	O
[	O
len	int
-	O
i	int
]	O
-	O
48	int
)	O
*	O
weight	O
)	O
;	O
}	O
k_checksum	O
+=	O
(	int
c_checksum	O
%	O
11	int
)	O
;	O
strcat	O
(	O
partial	pointer
,	O
codeset	pointer
[	O
k_checksum	int
%	O
9	int
]	O
)	O
;	O
}	O
}	O
strcat	O
(	O
partial	pointer
,	O
codeset	pointer
[	O
START_STOP	int
]	O
)	O
;	O
bc	O
->	O
partial	pointer
=	O
partial	pointer
;	O
bc	pointer
->	O
textinfo	pointer
=	O
textinfo	int
;	O
return	O
0	int
;	O
}	O