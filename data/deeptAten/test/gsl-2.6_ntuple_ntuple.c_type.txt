gsl_ntuple	O
*	O
gsl_ntuple_create	O
(	O
char	O
*	O
filename	pointer
,	O
void	O
*	O
ntuple_data	pointer
,	O
size_t	O
size	O
)	O
{	O
gsl_ntuple	O
*	O
ntuple	pointer
=	O
(	O
gsl_ntuple	O
*	O
)	O
malloc	pointer
(	O
sizeof	int
(	O
gsl_ntuple	O
)	O
)	O
;	O
if	O
(	O
ntuple	O
==	O
0	O
)	O
{	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for ntuple struct"	pointer
,	O
GSL_ENOMEM	pointer
,	O
0	int
)	O
;	O
}	O
ntuple	O
->	O
ntuple_data	pointer
=	O
ntuple_data	O
;	O
ntuple	O
->	O
size	pointer
=	O
size	O
;	O
ntuple	pointer
->	O
file	pointer
=	O
fopen	O
(	O
filename	pointer
,	O
"wb"	pointer
)	O
;	O
if	O
(	O
ntuple	O
->	O
file	pointer
==	O
0	O
)	O
{	O
free	O
(	O
ntuple	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"unable to create ntuple file"	pointer
,	O
GSL_EFAILED	pointer
,	O
0	O
)	O
;	O
}	O
return	O
ntuple	O
;	O
}	O
gsl_ntuple	O
*	O
gsl_ntuple_open	function
(	O
char	O
*	O
filename	pointer
,	O
void	O
*	O
ntuple_data	pointer
,	O
size_t	O
size	O
)	O
{	O
gsl_ntuple	O
*	O
ntuple	pointer
=	O
(	O
gsl_ntuple	O
*	O
)	O
malloc	pointer
(	O
sizeof	int
(	O
gsl_ntuple	O
)	O
)	O
;	O
if	O
(	O
ntuple	O
==	O
0	O
)	O
{	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for ntuple struct"	pointer
,	O
GSL_ENOMEM	pointer
,	O
0	int
)	O
;	O
}	O
ntuple	O
->	O
ntuple_data	pointer
=	O
ntuple_data	O
;	O
ntuple	O
->	O
size	pointer
=	O
size	O
;	O
ntuple	pointer
->	O
file	pointer
=	O
fopen	O
(	O
filename	pointer
,	O
"rb"	pointer
)	O
;	O
if	O
(	O
ntuple	O
->	O
file	pointer
==	O
0	O
)	O
{	O
free	O
(	O
ntuple	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"unable to open ntuple file for reading"	pointer
,	O
GSL_EFAILED	pointer
,	O
0	O
)	O
;	O
}	O
return	O
ntuple	O
;	O
}	O
int	O
gsl_ntuple_write	function
(	O
gsl_ntuple	O
*	O
ntuple	pointer
)	O
{	O
size_t	O
nwrite	long
;	O
nwrite	O
=	O
fwrite	O
(	O
ntuple	pointer
->	O
ntuple_data	pointer
,	O
ntuple	pointer
->	O
size	pointer
,	O
1	pointer
,	O
ntuple	pointer
->	O
file	pointer
)	O
;	O
if	O
(	O
nwrite	O
!=	O
1	O
)	O
{	O
GSL_ERROR	O
(	O
"failed to write ntuple entry to file"	pointer
,	O
GSL_EFAILED	pointer
)	O
;	O
}	O
return	O
GSL_SUCCESS	O
;	O
}	O
int	O
gsl_ntuple_bookdata	function
(	O
gsl_ntuple	O
*	O
ntuple	pointer
)	O
{	O
return	O
gsl_ntuple_write	int
(	O
ntuple	O
)	O
;	O
}	O
int	O
gsl_ntuple_read	function
(	O
gsl_ntuple	O
*	O
ntuple	pointer
)	O
{	O
size_t	O
nread	long
;	O
nread	O
=	O
fread	int
(	O
ntuple	pointer
->	O
ntuple_data	pointer
,	O
ntuple	pointer
->	O
size	pointer
,	O
1	O
,	O
ntuple	O
->	O
file	pointer
)	O
;	O
if	O
(	O
nread	long
==	O
0	int
&&	O
feof	int
(	O
ntuple	pointer
->	O
file	pointer
)	O
)	O
{	O
return	O
GSL_EOF	int
;	O
}	O
if	O
(	O
nread	O
!=	O
1	O
)	O
{	O
GSL_ERROR	O
(	O
"failed to read ntuple entry from file"	pointer
,	O
GSL_EFAILED	pointer
)	O
;	O
}	O
return	O
GSL_SUCCESS	O
;	O
}	O
int	O
gsl_ntuple_project	function
(	O
gsl_histogram	O
*	O
h	pointer
,	O
gsl_ntuple	O
*	O
ntuple	pointer
,	O
gsl_ntuple_value_fn	O
*	O
value_func	pointer
,	O
gsl_ntuple_select_fn	O
*	O
select_func	pointer
)	O
{	O
size_t	O
nread	long
;	O
do	O
{	O
nread	O
=	O
fread	O
(	O
ntuple	pointer
->	O
ntuple_data	pointer
,	O
ntuple	O
->	O
size	pointer
,	O
1	O
,	O
ntuple	O
->	O
file	pointer
)	O
;	O
if	O
(	O
nread	long
==	O
0	int
&&	O
feof	int
(	O
ntuple	pointer
->	O
file	pointer
)	O
)	O
{	O
break	O
;	O
}	O
if	O
(	O
nread	long
!=	O
1	O
)	O
{	O
GSL_ERROR	O
(	O
"failed to read ntuple for projection"	pointer
,	O
GSL_EFAILED	pointer
)	O
;	O
}	O
if	O
(	O
EVAL	O
(	O
select_func	pointer
,	O
ntuple	pointer
->	O
ntuple_data	pointer
)	O
)	O
{	O
gsl_histogram_increment	O
(	O
h	pointer
,	O
EVAL	O
(	O
value_func	pointer
,	O
ntuple	pointer
->	O
ntuple_data	pointer
)	O
)	O
;	O
}	O
}	O
while	O
(	O
1	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_ntuple_close	function
(	O
gsl_ntuple	O
*	O
ntuple	pointer
)	O
{	O
int	O
status	int
=	O
fclose	int
(	O
ntuple	pointer
->	O
file	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
GSL_ERROR	O
(	O
"failed to close ntuple file"	pointer
,	O
GSL_EFAILED	pointer
)	O
;	O
}	O
free	O
(	O
ntuple	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O