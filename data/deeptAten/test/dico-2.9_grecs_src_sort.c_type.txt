struct	O
node_list	struct
{	O
struct	O
grecs_node	struct
*	O
head	pointer
,	O
*	O
tail	pointer
;	O
}	O
;	O
static	O
void	O
node_list_init	function
(	O
struct	O
node_list	struct
*	O
list	pointer
,	O
struct	O
grecs_node	struct
*	O
node	pointer
)	O
{	O
if	O
(	O
node	O
)	O
{	O
list	O
->	O
head	pointer
=	O
node	pointer
;	O
while	pointer
(	O
node	O
->	O
next	pointer
)	O
node	O
=	O
node	pointer
->	O
next	pointer
;	O
list	O
->	O
tail	pointer
=	O
node	pointer
;	O
}	pointer
else	O
list	O
->	O
head	pointer
=	O
list	pointer
->	O
tail	pointer
=	O
NULL	pointer
;	O
}	O
static	O
void	O
node_list_add	function
(	O
struct	O
node_list	struct
*	O
list	pointer
,	O
struct	O
grecs_node	struct
*	O
node	pointer
)	O
{	O
node	O
->	O
next	pointer
=	O
NULL	pointer
;	O
node	pointer
->	O
prev	pointer
=	O
list	pointer
->	O
tail	pointer
;	O
if	pointer
(	O
list	pointer
->	O
tail	pointer
)	O
list	O
->	O
tail	pointer
->	O
next	pointer
=	O
node	O
;	O
else	pointer
list	O
->	O
head	pointer
=	O
node	pointer
;	O
list	pointer
->	O
tail	pointer
=	O
node	pointer
;	O
}	pointer
static	O
void	O
node_list_join	function
(	O
struct	O
node_list	struct
*	O
a	pointer
,	O
struct	O
node_list	struct
*	O
b	pointer
)	O
{	O
if	O
(	O
!	O
b	pointer
->	O
head	pointer
)	O
return	O
;	O
b	O
->	O
head	pointer
->	O
prev	pointer
=	O
a	pointer
->	O
tail	pointer
;	O
if	pointer
(	O
a	pointer
->	O
tail	pointer
)	O
a	O
->	O
tail	pointer
->	O
next	pointer
=	O
b	O
->	O
head	pointer
;	O
else	pointer
a	O
->	O
head	pointer
=	O
b	pointer
->	O
head	pointer
;	O
a	pointer
->	O
tail	pointer
=	O
b	pointer
->	O
tail	pointer
;	O
}	pointer
static	O
void	O
_qsort_nodelist	function
(	O
struct	O
node_list	struct
*	O
list	pointer
,	O
int	O
(	int
*	O
compare	pointer
)	O
(	O
struct	O
grecs_node	struct
const	O
*	O
,	pointer
struct	O
grecs_node	struct
const	O
*	O
)	pointer
)	O
{	O
struct	O
grecs_node	struct
*	O
cur	pointer
,	O
*	O
middle	pointer
;	O
struct	O
node_list	struct
high_list	O
,	O
low_list	O
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
list	pointer
->	O
head	pointer
)	O
return	O
;	O
cur	O
=	O
list	O
->	O
head	pointer
;	O
do	O
{	O
cur	O
=	O
cur	O
->	O
next	pointer
;	O
if	O
(	O
!	pointer
cur	pointer
)	O
return	O
;	O
}	O
while	O
(	O
(	O
rc	O
=	O
compare	int
(	O
list	pointer
->	O
head	pointer
,	O
cur	pointer
)	O
)	O
==	O
0	O
)	O
;	O
middle	O
=	O
(	O
rc	O
>	O
0	int
)	O
?	O
cur	O
:	O
list	O
->	O
head	pointer
;	O
node_list_init	O
(	O
&	pointer
low_list	pointer
,	O
NULL	O
)	O
;	O
node_list_init	O
(	O
&	pointer
high_list	pointer
,	O
NULL	O
)	O
;	O
for	O
(	O
cur	O
=	O
list	int
->	O
head	pointer
;	O
cur	O
;	O
)	O
{	O
struct	O
grecs_node	struct
*	O
next	O
=	O
cur	O
->	O
next	pointer
;	O
cur	O
->	O
next	pointer
=	O
NULL	pointer
;	O
if	pointer
(	O
compare	pointer
(	O
middle	pointer
,	O
cur	pointer
)	O
<	O
0	int
)	O
node_list_add	O
(	O
&	pointer
high_list	pointer
,	O
cur	O
)	O
;	O
else	O
node_list_add	O
(	O
&	pointer
low_list	pointer
,	O
cur	O
)	O
;	O
cur	O
=	O
next	O
;	O
}	O
if	O
(	O
!	O
low_list	pointer
.	O
head	pointer
)	O
low_list	O
=	O
high_list	pointer
;	O
else	O
if	O
(	O
high_list	O
.	O
head	pointer
)	O
{	O
_qsort_nodelist	O
(	O
&	pointer
low_list	pointer
,	O
compare	O
)	O
;	O
_qsort_nodelist	O
(	O
&	pointer
high_list	pointer
,	O
compare	O
)	O
;	O
node_list_join	O
(	O
&	pointer
low_list	pointer
,	O
&	O
high_list	struct
)	O
;	O
}	O
list	O
->	O
head	struct
=	O
low_list	O
.	O
head	pointer
;	O
list	O
->	O
tail	pointer
=	O
low_list	pointer
.	O
tail	pointer
;	O
}	O
struct	O
grecs_node	struct
*	O
grecs_nodelist_sort	function
(	O
struct	O
grecs_node	struct
*	O
node	pointer
,	O
int	O
(	O
*	O
compare	pointer
)	O
(	O
struct	O
grecs_node	struct
const	O
*	O
,	pointer
struct	O
grecs_node	struct
const	O
*	O
)	pointer
)	O
{	O
struct	O
node_list	struct
list	O
;	O
node_list_init	O
(	O
&	O
list	pointer
,	O
node	O
)	O
;	O
_qsort_nodelist	O
(	O
&	pointer
list	pointer
,	O
compare	O
)	O
;	O
return	O
list	int
.	O
head	pointer
;	O
}	O
void	O
grecs_tree_sort	function
(	O
struct	O
grecs_node	struct
*	O
node	pointer
,	O
int	O
(	int
*	O
compare	pointer
)	O
(	O
struct	O
grecs_node	struct
const	O
*	O
,	pointer
struct	O
grecs_node	struct
const	O
*	O
)	pointer
)	O
{	O
if	O
(	O
node	O
&&	O
node	pointer
->	O
down	pointer
)	O
{	O
node	pointer
->	O
down	pointer
=	O
grecs_nodelist_sort	pointer
(	O
node	pointer
->	O
down	pointer
,	O
compare	pointer
)	O
;	O
for	O
(	O
node	O
=	O
node	pointer
->	O
down	pointer
;	O
node	pointer
;	O
node	O
=	O
node	pointer
->	O
next	pointer
)	O
grecs_tree_sort	O
(	O
node	pointer
,	O
compare	pointer
)	O
;	O
}	O
}	O