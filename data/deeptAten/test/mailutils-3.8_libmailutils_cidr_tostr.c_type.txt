static	O
int	O
to_xdig	function
(	O
unsigned	O
char	O
b	O
)	O
{	O
if	O
(	O
b	O
>=	O
0xa	int
)	O
return	O
'A'	int
+	O
b	int
-	O
0xa	int
;	O
else	O
return	O
'0'	int
+	O
b	int
;	O
}	O
static	O
size_t	O
format_ipv6_bytes	array
(	O
const	O
unsigned	O
char	O
*	O
bytes	pointer
,	O
int	O
len	int
,	O
char	O
*	O
buf	pointer
,	O
size_t	O
size	long
,	O
int	O
simplify	int
)	O
{	O
size_t	O
total	long
=	O
0	int
;	O
int	O
i	int
;	O
int	O
run_count	int
=	O
0	int
;	O
char	O
*	O
p	pointer
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
len	int
;	O
i	int
+=	O
2	int
)	O
{	O
if	O
(	O
bytes	pointer
[	O
0	int
]	O
==	O
0	O
&&	O
bytes	int
[	O
1	int
]	O
==	O
0	O
)	O
{	O
if	O
(	O
simplify	O
)	O
run_count	O
++	O
;	O
else	O
{	O
if	O
(	O
i	O
&&	O
total	int
++	O
<	O
size	O
)	O
*	O
buf	O
++	O
=	O
':'	int
;	O
if	O
(	O
total	O
++	O
<	O
size	O
)	O
*	O
buf	O
++	O
=	O
'0'	O
;	O
}	O
bytes	O
+=	O
2	int
;	O
}	O
else	O
{	O
if	O
(	O
run_count	O
)	O
{	O
if	O
(	O
run_count	O
==	O
1	O
)	O
{	O
if	O
(	O
i	O
&&	O
total	int
++	O
<	O
size	O
)	O
*	O
buf	O
++	O
=	O
':'	int
;	O
if	O
(	O
total	O
++	O
<	O
size	O
)	O
*	O
buf	O
++	O
=	O
'0'	O
;	O
}	O
else	O
{	O
if	O
(	O
total	O
++	O
<	O
size	O
)	O
*	O
buf	O
++	O
=	O
':'	O
;	O
simplify	O
=	O
0	int
;	O
}	O
run_count	O
=	O
0	function
;	O
}	O
if	O
(	O
i	O
&&	O
total	int
++	O
<	O
size	int
)	O
*	O
buf	O
++	O
=	O
':'	O
;	O
p	O
=	O
buf	O
;	O
if	O
(	O
(	O
*	O
bytes	O
&	O
0xf0	pointer
)	O
&&	O
total	O
++	O
<	O
size	int
)	O
*	O
buf	O
++	O
=	O
to_xdig	O
(	O
*	O
bytes	pointer
>>	O
4	int
)	O
;	O
if	O
(	O
(	O
buf	O
>	O
p	O
||	O
(	int
*	O
bytes	O
&	O
0xf	int
)	O
)	O
&&	O
total	O
++	O
<	O
size	int
)	O
*	O
buf	O
++	O
=	O
to_xdig	O
(	O
*	O
bytes	pointer
&	O
0xf	int
)	O
;	O
bytes	O
++	O
;	O
if	O
(	O
(	O
buf	O
>	O
p	O
||	O
(	int
*	O
bytes	O
&	O
0xf0	int
)	O
)	O
&&	O
total	O
++	O
<	O
size	int
)	O
*	O
buf	O
++	O
=	O
to_xdig	O
(	O
*	O
bytes	pointer
>>	O
4	O
)	O
;	O
if	O
(	O
(	O
buf	O
>	O
p	O
||	O
(	int
*	O
bytes	O
&	O
0xf	int
)	O
)	O
&&	O
total	O
++	O
<	O
size	int
)	O
*	O
buf	O
++	O
=	O
to_xdig	O
(	O
*	O
bytes	pointer
&	O
0xf	pointer
)	O
;	O
bytes	O
++	O
;	O
}	O
}	O
if	O
(	O
run_count	O
)	O
{	O
if	O
(	O
run_count	O
==	O
1	O
)	O
{	O
if	O
(	O
i	pointer
&&	O
total	int
++	O
<	O
size	O
)	O
*	O
buf	O
++	O
=	O
':'	O
;	O
if	O
(	O
total	O
++	O
<	O
size	O
)	O
*	O
buf	O
++	O
=	O
'0'	O
;	O
}	O
else	O
{	O
if	O
(	O
total	O
++	O
<	O
size	O
)	O
*	O
buf	O
++	O
=	O
':'	O
;	O
if	O
(	O
total	O
++	O
<	O
size	O
)	O
*	O
buf	O
++	O
=	O
':'	O
;	O
}	O
}	O
return	O
total	O
;	O
}	O
static	O
size_t	O
format_ipv6_bytes_normal	O
(	O
const	O
unsigned	O
char	O
*	O
bytes	pointer
,	O
int	O
len	O
,	O
char	O
*	O
buf	pointer
,	O
size_t	O
size	long
)	O
{	O
return	O
format_ipv6_bytes	int
(	O
bytes	int
,	O
len	int
,	O
buf	int
,	O
size	int
,	O
0	int
)	O
;	O
}	O
static	O
size_t	O
format_ipv6_bytes_simplified	long
(	O
const	O
unsigned	O
char	O
*	O
bytes	pointer
,	O
int	O
len	O
,	O
char	O
*	O
buf	pointer
,	O
size_t	O
size	long
)	O
{	O
return	O
format_ipv6_bytes	O
(	O
bytes	int
,	O
len	int
,	O
buf	int
,	O
size	int
,	O
1	int
)	O
;	O
}	O
static	O
size_t	O
format_ipv4_bytes	long
(	O
const	O
unsigned	O
char	O
*	O
bytes	pointer
,	O
int	O
len	O
,	O
char	O
*	O
buf	pointer
,	O
size_t	O
size	long
)	O
{	O
int	O
i	int
;	O
size_t	O
total	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
len	int
;	O
i	long
++	O
)	O
{	O
unsigned	O
char	O
b	O
=	O
*	O
bytes	pointer
++	O
;	O
char	O
nbuf	O
[	O
3	O
]	O
;	O
int	O
j	int
;	O
if	O
(	O
i	O
)	O
{	O
if	O
(	O
total	int
++	O
<	O
size	O
)	O
*	O
buf	O
++	O
=	O
'.'	int
;	O
}	O
j	O
=	O
0	int
;	O
do	int
{	O
nbuf	O
[	O
j	int
++	O
]	O
=	O
b	O
%	O
10	int
+	O
'0'	int
;	O
b	long
/=	O
10	int
;	O
}	long
while	O
(	O
b	O
)	O
;	O
for	O
(	O
;	int
j	O
;	O
j	int
--	O
)	O
{	O
if	O
(	O
total	int
++	O
<	O
size	O
)	O
*	O
buf	O
++	O
=	O
nbuf	int
[	O
j	int
-	O
1	int
]	O
;	O
}	O
}	O
return	O
total	O
;	O
}	O
int	O
mu_cidr_to_string	function
(	O
struct	O
mu_cidr	struct
*	O
cidr	pointer
,	O
int	O
flags	O
,	O
char	O
*	O
buf	pointer
,	O
size_t	O
size	long
,	O
size_t	O
*	long
pret	pointer
)	O
{	O
size_t	O
(	long
*	long
fmt	pointer
)	O
(	O
const	O
unsigned	O
char	O
*	O
bytes	O
,	O
int	O
len	O
,	O
char	O
*	O
buf	pointer
,	O
size_t	O
size	long
)	O
;	O
size_t	O
n	long
,	O
total	O
=	O
0	int
;	O
if	long
(	O
size	long
==	O
0	O
)	O
return	O
MU_ERR_BUFSPACE	O
;	O
size	O
--	O
;	O
switch	O
(	O
cidr	O
->	O
family	int
)	O
{	O
case	O
AF_INET	O
:	O
fmt	O
=	O
format_ipv4_bytes	O
;	O
break	O
;	O
case	O
AF_INET6	O
:	O
fmt	O
=	O
(	O
flags	O
&	O
MU_CIDR_FMT_SIMPLIFY	int
)	O
?	O
format_ipv6_bytes_simplified	O
:	O
format_ipv6_bytes_normal	O
;	O
break	O
;	O
default	O
:	O
return	O
MU_ERR_FAMILY	O
;	O
}	O
n	O
=	O
fmt	function
(	O
cidr	pointer
->	O
address	long
,	O
cidr	pointer
->	O
len	long
,	O
buf	pointer
,	O
size	long
)	O
;	O
if	O
(	O
buf	pointer
)	O
buf	O
+=	O
n	int
;	O
total	long
+=	O
n	int
;	O
if	long
(	O
!	pointer
(	O
flags	O
&	O
MU_CIDR_FMT_ADDRONLY	int
)	O
)	O
{	O
if	O
(	O
total	pointer
++	O
<	O
size	O
)	O
*	O
buf	pointer
++	O
=	O
'/'	O
;	O
n	O
=	O
fmt	int
(	O
cidr	pointer
->	O
netmask	pointer
,	O
cidr	pointer
->	O
len	pointer
,	O
buf	pointer
,	O
size	pointer
-	O
total	int
)	O
;	O
if	O
(	O
buf	pointer
)	O
buf	O
+=	O
n	int
;	O
total	long
+=	O
n	int
;	O
}	long
if	O
(	O
buf	O
)	O
*	O
buf	pointer
++	O
=	O
0	O
;	O
if	O
(	O
pret	pointer
)	O
*	O
pret	pointer
=	O
total	O
;	O
return	O
0	O
;	O
}	O
int	O
mu_cidr_format	function
(	O
struct	O
mu_cidr	struct
*	O
cidr	pointer
,	O
int	O
flags	O
,	O
char	O
*	O
*	pointer
pbuf	pointer
)	O
{	O
char	O
buf	O
[	O
MU_CIDR_MAXBUFSIZE	int
]	O
;	O
int	O
rc	int
=	O
mu_cidr_to_string	int
(	O
cidr	O
,	O
flags	int
,	O
buf	int
,	O
sizeof	int
(	O
buf	O
)	O
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	O
)	O
return	O
rc	O
;	O
*	O
pbuf	pointer
=	O
strdup	O
(	O
buf	O
)	O
;	O
if	O
(	O
!	O
*	O
buf	O
)	O
return	O
ENOMEM	O
;	O
return	O
0	int
;	O
}	O