enum	O
echo_mode	O
{	O
ECHO_ECHO	O
,	O
ECHO_NULL	int
}	O
;	O
struct	O
dico_handle_struct	struct
{	O
enum	O
echo_mode	O
mode	O
;	O
char	O
*	O
prefix	pointer
;	O
size_t	O
prefix_len	long
;	O
}	O
;	O
static	O
int	O
echo_init	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	pointer
argv	pointer
)	O
{	O
return	O
0	int
;	O
}	O
static	O
dico_handle_t	O
echo_init_db	O
(	O
const	O
char	O
*	O
dbname	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
*	pointer
argv	pointer
)	O
{	O
int	O
null_mode	int
=	O
0	int
;	O
dico_handle_t	O
hp	O
;	O
char	O
*	O
prefix	pointer
=	O
NULL	O
;	O
struct	O
dico_option	struct
init_db_option	O
[	O
]	int
=	O
{	pointer
{	pointer
DICO_OPTSTR	pointer
(	O
null	pointer
)	O
,	O
dico_opt_bool	O
,	O
&	int
null_mode	pointer
}	O
,	O
{	O
DICO_OPTSTR	O
(	O
prefix	pointer
)	O
,	O
dico_opt_string	O
,	O
&	int
prefix	pointer
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
if	O
(	O
dico_parseopt	O
(	O
init_db_option	pointer
,	O
argc	pointer
,	O
argv	pointer
,	O
0	pointer
,	O
NULL	int
)	O
)	O
return	O
NULL	int
;	O
hp	O
=	O
malloc	O
(	O
sizeof	int
(	O
*	O
hp	pointer
)	O
)	O
;	O
if	O
(	O
hp	O
)	O
{	O
hp	O
->	O
mode	pointer
=	O
null_mode	int
?	O
ECHO_NULL	int
:	O
ECHO_ECHO	O
;	O
if	pointer
(	O
prefix	O
)	O
{	O
hp	O
->	O
prefix	pointer
=	O
strdup	O
(	O
prefix	pointer
)	O
;	O
if	O
(	O
!	pointer
hp	O
->	O
prefix	pointer
)	O
{	O
dico_log	O
(	O
L_ERR	int
,	O
0	int
,	O
"not enough memory"	int
)	O
;	O
free	O
(	O
hp	pointer
)	O
;	O
return	O
NULL	int
;	O
}	O
hp	O
->	O
prefix_len	pointer
=	O
strlen	O
(	O
prefix	pointer
)	O
;	O
}	O
else	O
{	O
hp	O
->	O
prefix	pointer
=	O
NULL	O
;	O
hp	pointer
->	O
prefix_len	pointer
=	O
0	int
;	O
}	pointer
}	O
else	O
dico_log	O
(	O
L_ERR	int
,	O
0	pointer
,	O
"not enough memory"	int
)	O
;	O
return	O
hp	int
;	O
}	O
static	O
int	O
echo_free_db	function
(	O
dico_handle_t	O
hp	O
)	O
{	O
free	O
(	O
hp	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
echo_open	function
(	O
dico_handle_t	O
dp	O
)	O
{	O
return	O
0	int
;	O
}	O
static	O
int	O
echo_close	function
(	O
dico_handle_t	O
hp	O
)	O
{	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
echo_info	function
(	O
dico_handle_t	O
ep	O
)	O
{	O
static	O
char	O
*	O
echo_info_str	pointer
[	O
2	O
]	O
=	O
{	O
"ECHO database.\n\nThis database echoes each query.\n"	pointer
,	O
"NULL database.\n\nThis database returns NULL (no result) to any match and define\nrequests.\n"	pointer
}	O
;	O
return	O
strdup	int
(	O
echo_info_str	pointer
[	O
ep	int
->	O
mode	pointer
]	O
)	O
;	O
}	O
static	O
char	O
*	O
echo_descr	function
(	O
dico_handle_t	O
ep	O
)	O
{	O
static	O
char	O
*	O
echo_descr_str	pointer
[	O
2	O
]	O
=	O
{	O
"GNU Dico ECHO database"	pointer
,	O
"GNU Dico NULL database"	pointer
}	O
;	O
char	O
*	O
res	function
;	O
if	O
(	O
ep	O
->	O
mode	pointer
==	O
ECHO_ECHO	int
&&	O
ep	pointer
->	O
prefix	pointer
)	O
{	O
size_t	O
len	O
=	O
strlen	pointer
(	O
echo_descr_str	pointer
[	O
ep	int
->	O
mode	pointer
]	O
)	O
+	O
ep	int
->	O
prefix_len	pointer
+	O
11	int
;	O
res	pointer
=	O
malloc	O
(	O
len	int
)	O
;	O
if	O
(	O
res	pointer
)	O
snprintf	O
(	O
res	pointer
,	O
len	pointer
,	O
"%s (prefix %s)"	int
,	O
echo_descr_str	int
[	O
ep	int
->	O
mode	pointer
]	O
,	O
ep	pointer
->	O
prefix	pointer
)	O
;	O
}	O
else	O
res	O
=	O
strdup	function
(	O
echo_descr_str	pointer
[	O
ep	int
->	O
mode	pointer
]	O
)	O
;	O
return	O
res	int
;	O
}	O
static	O
dico_result_t	O
new_result	O
(	O
dico_handle_t	O
ep	O
,	O
char	pointer
const	O
*	O
word	pointer
)	O
{	O
char	O
*	O
res	pointer
=	O
malloc	O
(	O
strlen	O
(	O
word	pointer
)	O
+	O
ep	int
->	O
prefix_len	pointer
+	O
1	int
)	O
;	O
if	O
(	O
!	pointer
res	pointer
)	O
dico_log	O
(	O
L_ERR	int
,	O
0	int
,	O
"not enough memory"	int
)	O
;	O
else	O
{	O
if	O
(	O
ep	O
->	O
prefix	pointer
)	O
memcpy	O
(	O
res	pointer
,	O
ep	pointer
->	O
prefix	pointer
,	O
ep	pointer
->	O
prefix_len	pointer
)	O
;	O
strcpy	O
(	O
res	pointer
+	O
ep	pointer
->	O
prefix_len	pointer
,	O
word	pointer
)	O
;	O
}	O
return	O
(	O
dico_result_t	O
)	O
res	O
;	O
}	O
static	O
dico_result_t	O
echo_match	O
(	O
dico_handle_t	O
ep	O
,	O
const	pointer
dico_strategy_t	O
strat	pointer
,	O
const	O
char	O
*	O
word	pointer
)	O
{	O
if	O
(	O
ep	O
->	O
mode	pointer
==	O
ECHO_NULL	int
)	O
return	O
NULL	O
;	O
return	O
new_result	int
(	O
ep	pointer
,	O
word	pointer
)	O
;	O
}	O
static	O
dico_result_t	O
echo_define	O
(	O
dico_handle_t	O
ep	O
,	O
const	pointer
char	O
*	O
word	pointer
)	O
{	O
if	O
(	O
ep	O
->	O
mode	pointer
==	O
ECHO_NULL	int
)	O
return	O
NULL	O
;	O
return	O
new_result	int
(	O
ep	pointer
,	O
word	pointer
)	O
;	O
}	O
static	O
int	O
echo_output_result	function
(	O
dico_result_t	O
rp	O
,	O
size_t	O
n	int
,	O
dico_stream_t	O
str	pointer
)	O
{	O
char	O
*	O
word	pointer
=	O
(	O
char	O
*	O
)	O
rp	pointer
;	O
dico_stream_write	O
(	O
str	pointer
,	O
word	pointer
,	O
strlen	int
(	O
word	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
size_t	O
echo_result_count	function
(	O
dico_result_t	O
rp	O
)	O
{	O
return	O
1	int
;	O
}	O
static	O
size_t	O
echo_compare_count	function
(	O
dico_result_t	O
rp	O
)	O
{	O
return	O
1	int
;	O
}	O
static	O
void	O
echo_free_result	function
(	O
dico_result_t	O
rp	O
)	O
{	O
free	O
(	O
rp	pointer
)	O
;	O
}	O
static	O
char	O
*	O
echo_mime_header	function
(	O
dico_handle_t	O
ep	O
)	O
{	O
return	O
strdup	int
(	O
"Content-Type: text/plain; charset=utf-8\nContent-Transfer-Encoding: 8bit\n"	pointer
)	O
;	O
}	O
struct	O
dico_database_module	struct
DICO_EXPORT	O
(	O
echo	O
,	O
module	pointer
)	O
=	O
{	int
.	pointer
dico_version	struct
=	O
DICO_MODULE_VERSION	O
,	O
.	O
dico_capabilities	struct
=	O
DICO_CAPA_NONE	O
,	O
.	O
dico_init	struct
=	O
echo_init	O
,	O
.	O
dico_init_db	struct
=	O
echo_init_db	O
,	O
.	O
dico_free_db	struct
=	O
echo_free_db	O
,	O
.	O
dico_open	struct
=	O
echo_open	O
,	O
.	O
dico_close	struct
=	O
echo_close	O
,	O
.	O
dico_db_info	struct
=	O
echo_info	O
,	O
.	O
dico_db_descr	struct
=	O
echo_descr	O
,	O
.	O
dico_match	struct
=	O
echo_match	O
,	O
.	O
dico_define	struct
=	O
echo_define	O
,	O
.	O
dico_output_result	struct
=	O
echo_output_result	O
,	O
.	O
dico_result_count	struct
=	O
echo_result_count	O
,	O
.	O
dico_compare_count	struct
=	O
echo_compare_count	O
,	O
.	O
dico_free_result	struct
=	O
echo_free_result	O
,	O
.	O
dico_db_mime_header	struct
=	O
echo_mime_header	O
}	O
;	O