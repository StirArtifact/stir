void	O
printOom	function
(	O
void	O
)	O
{	O
fprintf	O
(	O
stderr	pointer
,	O
"Out of memory error"	pointer
)	O
;	O
}	O
char	O
*	O
get_homedir	function
(	O
void	O
)	O
{	O
struct	O
passwd	struct
*	O
pw	pointer
;	O
uid_t	O
uid	int
;	O
char	O
*	O
homedir	pointer
;	O
char	O
*	O
username	pointer
;	O
homedir	O
=	O
getenv	pointer
(	O
"HOME"	pointer
)	O
;	O
if	O
(	O
homedir	pointer
)	O
return	O
homedir	O
;	O
pw	O
=	O
0	O
;	O
username	O
=	O
getenv	O
(	O
"LOGNAME"	pointer
)	O
;	O
if	O
(	O
!	pointer
username	O
)	O
username	O
=	O
getlogin	pointer
(	O
)	pointer
;	O
if	O
(	O
username	pointer
)	O
pw	O
=	O
getpwnam	function
(	O
username	pointer
)	O
;	O
if	O
(	O
pw	pointer
==	O
0	O
)	O
{	O
uid	O
=	O
geteuid	int
(	O
)	O
;	O
pw	O
=	O
getpwuid	O
(	O
uid	int
)	O
;	O
}	O
if	O
(	O
pw	O
)	O
return	O
pw	O
->	O
pw_dir	pointer
;	O
return	O
0	O
;	O
}	O
static	O
void	O
get_mcwd_file_name	function
(	O
char	O
*	O
file	pointer
)	O
{	O
char	O
*	O
mcwd_path	pointer
;	O
const	O
char	O
*	O
homedir	pointer
;	O
mcwd_path	O
=	O
getenv	O
(	O
"MCWD"	pointer
)	O
;	O
if	O
(	O
mcwd_path	pointer
==	O
NULL	O
||	O
*	O
mcwd_path	pointer
==	O
'\0'	O
)	O
{	O
homedir	O
=	O
get_homedir	pointer
(	O
)	pointer
;	O
if	O
(	O
!	pointer
homedir	O
)	O
homedir	O
=	O
"/tmp"	pointer
;	O
strncpy	O
(	O
file	pointer
,	O
homedir	pointer
,	O
MAXPATHLEN	pointer
-	O
6	int
)	O
;	O
file	O
[	O
MAXPATHLEN	int
-	O
6	int
]	O
=	O
'\0'	O
;	O
strcat	pointer
(	O
file	pointer
,	O
"/.mcwd"	pointer
)	O
;	O
}	O
else	O
{	O
strncpy	O
(	O
file	pointer
,	O
mcwd_path	pointer
,	O
MAXPATHLEN	pointer
)	O
;	O
file	O
[	O
MAXPATHLEN	int
]	O
=	O
'\0'	O
;	O
}	pointer
}	O
void	O
unlink_mcwd	function
(	O
void	O
)	O
{	O
char	O
file	O
[	O
MAXPATHLEN	O
+	O
1	int
]	O
;	O
get_mcwd_file_name	O
(	O
file	O
)	O
;	O
unlink	O
(	O
file	pointer
)	O
;	O
}	O
FILE	O
*	O
open_mcwd	function
(	O
const	O
char	O
*	O
mode	pointer
)	O
{	O
struct	O
MT_STAT	struct
sbuf	O
;	O
char	O
file	O
[	O
MAXPATHLEN	O
+	O
1	int
]	O
;	O
time_t	O
now	pointer
;	O
get_mcwd_file_name	O
(	O
file	O
)	O
;	O
if	O
(	O
*	pointer
mode	pointer
==	O
'r'	O
)	O
{	O
if	O
(	O
MT_STAT	int
(	O
file	pointer
,	O
&	pointer
sbuf	pointer
)	O
<	O
0	int
)	O
return	O
NULL	O
;	O
getTimeNow	O
(	O
&	pointer
now	pointer
)	O
;	O
if	O
(	O
now	O
-	O
sbuf	int
.	O
st_mtime	int
>	O
6	int
*	O
60	O
*	O
60	int
)	O
{	O
fprintf	O
(	O
stderr	pointer
,	O
"Warning: \"%s\" is out of date, removing it\n"	pointer
,	O
file	pointer
)	O
;	O
unlink	O
(	O
file	pointer
)	O
;	O
return	O
NULL	int
;	O
}	O
}	O
return	O
fopen	O
(	O
file	pointer
,	O
mode	pointer
)	O
;	O
}	O
void	O
*	function
safe_malloc	function
(	O
size_t	O
size	long
)	O
{	O
void	O
*	O
p	pointer
;	O
p	O
=	O
malloc	O
(	O
size	int
)	O
;	O
if	O
(	O
!	O
p	O
)	O
{	O
printOom	O
(	O
)	pointer
;	O
exit	O
(	O
1	int
)	O
;	O
}	O
return	O
p	O
;	O
}	O
void	O
print_sector	function
(	O
const	O
char	O
*	O
message	pointer
,	O
unsigned	O
char	O
*	O
data	pointer
,	O
int	O
size	int
)	O
{	O
int	O
col	int
;	O
int	O
row	int
;	O
printf	O
(	O
"%s:\n"	pointer
,	O
message	pointer
)	O
;	O
for	O
(	O
row	int
=	O
0	int
;	O
row	int
*	O
16	O
<	O
size	int
;	O
row	pointer
++	O
)	O
{	O
printf	O
(	O
"%03x  "	pointer
,	O
row	pointer
*	O
16	pointer
)	O
;	O
for	O
(	O
col	int
=	O
0	int
;	O
col	int
<	O
16	int
;	O
col	int
++	O
)	O
printf	O
(	O
"%02x "	pointer
,	O
data	pointer
[	O
row	int
*	O
16	int
+	O
col	int
]	O
)	O
;	O
for	O
(	O
col	int
=	O
0	int
;	O
col	int
<	O
16	int
;	O
col	int
++	O
)	O
{	O
if	O
(	O
isprint	int
(	O
data	int
[	O
row	int
*	O
16	O
+	O
col	int
]	O
)	O
)	O
printf	O
(	O
"%c"	pointer
,	O
data	pointer
[	O
row	int
*	O
16	int
+	O
col	int
]	O
)	O
;	O
else	O
printf	O
(	O
"."	pointer
)	O
;	O
}	O
printf	O
(	O
"\n"	pointer
)	O
;	O
}	O
}	O
time_t	O
getTimeNow	function
(	O
time_t	O
*	O
now	pointer
)	O
{	O
static	O
int	O
haveTime	function
=	O
0	O
;	O
static	O
time_t	O
sharedNow	array
;	O
if	O
(	O
!	O
haveTime	pointer
)	O
{	O
const	O
char	O
*	O
source_date_epoch	O
=	O
getenv	O
(	O
"SOURCE_DATE_EPOCH"	pointer
)	O
;	O
if	O
(	O
source_date_epoch	pointer
)	O
{	O
char	O
*	O
endptr	pointer
;	O
errno	O
=	O
0	int
;	O
time_t	O
epoch	O
=	O
STRTOTIME	O
(	O
source_date_epoch	pointer
,	O
&	pointer
endptr	pointer
,	O
10	O
)	O
;	O
if	O
(	O
endptr	O
==	O
source_date_epoch	O
)	O
fprintf	O
(	O
stderr	pointer
,	O
"SOURCE_DATE_EPOCH \"%s\" invalid\n"	pointer
,	O
source_date_epoch	pointer
)	O
;	O
else	O
if	O
(	O
errno	pointer
!=	O
0	O
)	O
fprintf	O
(	O
stderr	pointer
,	O
"SOURCE_DATE_EPOCH: strtoll: %s: %s\n"	pointer
,	O
strerror	pointer
(	O
errno	O
)	O
,	O
source_date_epoch	O
)	O
;	O
else	O
if	O
(	O
*	pointer
endptr	pointer
!=	O
'\0'	O
)	O
fprintf	O
(	O
stderr	pointer
,	O
"SOURCE_DATE_EPOCH has trailing garbage \"%s\"\n"	pointer
,	O
endptr	pointer
)	O
;	O
else	O
{	O
sharedNow	O
=	O
epoch	function
;	O
haveTime	O
=	O
1	O
;	O
}	O
}	O
}	O
if	O
(	O
!	O
haveTime	pointer
)	O
{	O
time	O
(	O
&	O
sharedNow	pointer
)	O
;	O
haveTime	O
=	O
1	O
;	O
}	O
if	O
(	O
now	O
)	O
*	O
now	pointer
=	O
sharedNow	int
;	O
return	O
sharedNow	int
;	O
}	O
off_t	O
str_to_offset	O
(	O
char	O
*	O
str	pointer
)	O
{	O
char	O
s	O
,	O
*	O
endp	pointer
=	O
NULL	O
;	O
off_t	O
ofs	O
;	O
ofs	O
=	O
strtol	O
(	O
str	pointer
,	O
&	O
endp	pointer
,	O
0	O
)	O
;	O
if	O
(	O
ofs	O
<=	O
0	O
)	O
return	O
0	O
;	O
s	O
=	O
*	O
endp	O
++	O
;	O
if	O
(	O
s	O
)	O
{	O
if	O
(	O
s	O
==	O
's'	O
||	O
s	O
==	O
'S'	O
)	O
ofs	O
<<=	O
9	int
;	O
else	O
if	O
(	O
s	pointer
==	O
'k'	O
||	O
s	O
==	O
'K'	O
)	O
ofs	O
<<=	O
10	int
;	O
else	O
if	O
(	O
s	pointer
==	O
'm'	O
||	O
s	O
==	O
'M'	O
)	O
ofs	O
<<=	O
20	int
;	O
else	O
if	O
(	O
s	pointer
==	O
'g'	O
||	O
s	O
==	O
'G'	O
)	O
ofs	O
<<=	O
30	int
;	O
else	long
return	O
0	int
;	O
if	O
(	O
*	O
endp	pointer
)	O
return	O
0	O
;	O
}	O
return	O
ofs	O
;	O
}	O