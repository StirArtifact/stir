jmp_buf	O
mainloop	O
;	O
sigset_t	O
mainsigset	O
;	O
volatile	O
int	O
pass	function
=	O
0	O
;	O
uintptr_t	O
page	O
;	O
static	O
void	O
stackoverflow_handler_continuation	function
(	O
void	O
*	O
arg1	pointer
,	O
void	O
*	O
arg2	pointer
,	O
void	O
*	O
arg3	pointer
)	O
{	O
int	O
arg	int
=	O
(	O
int	O
)	O
(	O
long	O
)	O
arg1	O
;	O
longjmp	O
(	O
mainloop	O
,	O
arg	O
)	O
;	O
}	O
void	O
stackoverflow_handler	function
(	O
int	O
emergency	int
,	O
stackoverflow_context_t	O
scp	O
)	O
{	O
pass	O
++	O
;	O
if	O
(	O
pass	O
<=	O
2	int
)	O
printf	O
(	O
"Stack overflow %d caught.\n"	pointer
,	O
pass	pointer
)	O
;	O
else	O
{	O
printf	O
(	O
"Segmentation violation misdetected as stack overflow.\n"	pointer
)	O
;	O
exit	O
(	O
1	int
)	O
;	O
}	O
sigprocmask	O
(	O
SIG_SETMASK	O
,	O
&	O
mainsigset	struct
,	O
NULL	O
)	O
;	O
sigsegv_leave_handler	O
(	O
stackoverflow_handler_continuation	O
,	O
(	O
void	O
*	O
)	O
(	pointer
long	O
)	O
(	O
emergency	O
?	O
-	O
1	int
:	O
pass	O
)	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
int	O
sigsegv_handler	function
(	O
void	O
*	O
address	pointer
,	O
int	O
emergency	int
)	O
{	O
if	O
(	O
!	O
emergency	int
)	O
return	O
0	O
;	O
pass	O
++	O
;	O
if	O
(	O
pass	O
<=	O
2	int
)	O
{	O
printf	O
(	O
"Stack overflow %d missed.\n"	pointer
,	O
pass	pointer
)	O
;	O
exit	O
(	O
1	int
)	O
;	O
}	O
else	O
printf	O
(	O
"Segmentation violation correctly detected.\n"	pointer
)	O
;	O
sigprocmask	O
(	O
SIG_SETMASK	int
,	O
&	O
mainsigset	struct
,	O
NULL	O
)	O
;	O
return	O
sigsegv_leave_handler	int
(	O
stackoverflow_handler_continuation	pointer
,	O
(	O
void	O
*	O
)	O
(	O
long	O
)	O
pass	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
volatile	O
int	O
*	function
recurse_1	function
(	O
int	O
n	O
,	O
volatile	O
int	O
*	O
p	pointer
)	O
{	O
if	O
(	O
n	O
<	O
INT_MAX	int
)	O
*	O
recurse_1	pointer
(	O
n	pointer
+	O
1	int
,	O
p	O
)	O
+=	O
n	int
;	O
return	O
p	int
;	O
}	O
int	O
recurse	function
(	O
volatile	O
int	O
n	O
)	O
{	O
return	O
*	int
recurse_1	pointer
(	O
n	O
,	O
&	O
n	pointer
)	O
;	O
}	O
int	O
main	function
(	O
)	O
{	O
int	O
prot_unwritable	int
;	O
void	O
*	O
p	pointer
;	O
sigset_t	O
emptyset	O
;	O
struct	O
rlimit	struct
rl	O
;	O
rl	O
.	O
rlim_cur	pointer
=	O
rl	pointer
.	O
rlim_max	pointer
=	O
0x100000	pointer
;	O
setrlimit	O
(	O
RLIMIT_STACK	pointer
,	O
&	pointer
rl	pointer
)	O
;	O
prepare_alternate_stack	O
(	O
)	pointer
;	O
if	O
(	O
stackoverflow_install_handler	O
(	O
&	pointer
stackoverflow_handler	pointer
,	O
mystack	O
,	O
SIGSTKSZ	O
)	O
<	O
0	int
)	O
exit	O
(	O
2	int
)	O
;	O
prot_unwritable	O
=	O
PROT_READ	O
;	O
p	O
=	O
mmap_zeromap	O
(	O
(	O
void	O
*	O
)	O
0x12340000	pointer
,	O
0x4000	int
)	O
;	O
if	O
(	O
p	O
==	O
(	O
void	int
*	O
)	O
(	function
-	O
1	int
)	O
)	O
{	O
fprintf	O
(	O
stderr	pointer
,	O
"mmap_zeromap failed.\n"	pointer
)	O
;	O
exit	O
(	O
2	int
)	O
;	O
}	O
page	O
=	O
(	O
uintptr_t	O
)	O
p	O
;	O
if	O
(	O
mprotect	O
(	O
(	pointer
void	O
*	O
)	O
page	pointer
,	O
0x4000	O
,	O
prot_unwritable	O
)	O
<	O
0	int
)	O
{	O
fprintf	O
(	O
stderr	pointer
,	O
"mprotect failed.\n"	pointer
)	O
;	O
exit	O
(	O
2	int
)	O
;	O
}	O
if	O
(	O
sigsegv_install_handler	O
(	O
&	pointer
sigsegv_handler	pointer
)	O
<	O
0	int
)	O
exit	O
(	O
2	int
)	O
;	O
sigemptyset	O
(	O
&	O
emptyset	struct
)	O
;	O
sigprocmask	O
(	O
SIG_BLOCK	int
,	O
&	O
emptyset	struct
,	O
&	O
mainsigset	struct
)	O
;	O
switch	O
(	O
setjmp	O
(	O
mainloop	pointer
)	O
)	O
{	O
case	O
-	O
1	int
:	O
printf	O
(	O
"emergency exit\n"	pointer
)	O
;	O
exit	O
(	O
1	int
)	O
;	O
case	O
0	O
:	O
case	O
1	O
:	O
printf	O
(	O
"Starting recursion pass %d.\n"	pointer
,	O
pass	pointer
+	O
1	int
)	O
;	O
recurse	O
(	O
0	pointer
)	O
;	O
printf	O
(	O
"no endless recursion?!\n"	pointer
)	O
;	O
exit	O
(	O
1	int
)	O
;	O
case	O
2	O
:	O
*	O
(	O
volatile	O
int	O
*	O
)	O
(	O
page	O
+	O
0x678	O
)	O
=	O
42	O
;	O
break	O
;	O
case	O
3	O
:	O
*	O
(	O
volatile	O
int	O
*	O
)	O
0	O
=	O
42	int
;	O
break	O
;	O
case	O
4	O
:	O
break	O
;	O
default	O
:	O
abort	O
(	O
)	O
;	O
}	O
check_alternate_stack_no_overflow	O
(	O
)	O
;	O
printf	O
(	O
"Test passed.\n"	pointer
)	O
;	O
exit	O
(	O
0	int
)	O
;	O
}	O