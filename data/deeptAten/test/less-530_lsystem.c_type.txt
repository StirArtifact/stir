extern	O
int	O
screen_trashed	function
;	O
extern	O
IFILE	O
curr_ifile	O
;	O
public	O
void	O
lsystem	function
(	O
cmd	O
,	O
donemsg	O
)	O
char	O
*	O
cmd	pointer
;	O
char	O
*	O
donemsg	pointer
;	O
{	O
int	O
inp	int
;	O
char	O
*	O
shell	pointer
;	O
char	O
*	O
p	pointer
;	O
IFILE	O
save_ifile	O
;	O
if	O
(	O
cmd	O
[	O
0	int
]	O
==	O
'-'	O
)	O
cmd	O
++	O
;	O
else	O
{	O
clear_bot	O
(	O
)	pointer
;	O
putstr	O
(	O
"!"	pointer
)	O
;	O
putstr	O
(	O
cmd	pointer
)	O
;	O
putstr	O
(	O
"\n"	pointer
)	O
;	O
}	O
save_ifile	O
=	O
save_curr_ifile	function
(	O
)	pointer
;	O
(	O
void	O
)	O
edit_ifile	function
(	O
NULL_IFILE	pointer
)	O
;	O
deinit	O
(	O
)	pointer
;	O
flush	O
(	O
)	int
;	O
raw_mode	O
(	O
0	O
)	O
;	O
init_signals	O
(	O
0	pointer
)	O
;	O
inp	O
=	O
dup	O
(	O
0	int
)	O
;	O
close	O
(	O
0	pointer
)	O
;	O
if	O
(	O
open	O
(	O
"/dev/tty"	pointer
,	O
OPEN_READ	pointer
)	O
<	O
0	int
)	O
dup	O
(	O
inp	int
)	O
;	O
p	O
=	O
NULL	O
;	O
if	O
(	O
(	O
shell	O
=	O
lgetenv	function
(	O
"SHELL"	pointer
)	O
)	O
!=	O
NULL	O
&&	O
*	O
shell	pointer
!=	O
'\0'	O
)	O
{	O
if	O
(	O
*	O
cmd	pointer
==	O
'\0'	O
)	O
p	O
=	O
save	O
(	O
shell	int
)	O
;	O
else	O
{	O
char	O
*	O
esccmd	pointer
=	O
shell_quote	O
(	O
cmd	O
)	O
;	O
if	O
(	O
esccmd	pointer
!=	O
NULL	O
)	O
{	O
int	O
len	int
=	O
(	int
int	O
)	O
(	function
strlen	O
(	O
shell	pointer
)	O
+	O
strlen	int
(	O
esccmd	pointer
)	O
+	O
5	int
)	O
;	O
p	O
=	O
(	function
char	O
*	O
)	O
ecalloc	pointer
(	O
len	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
SNPRINTF3	O
(	O
p	pointer
,	O
len	O
,	O
"%s %s %s"	int
,	O
shell	int
,	O
shell_coption	O
(	O
)	pointer
,	O
esccmd	O
)	O
;	O
free	O
(	O
esccmd	pointer
)	O
;	O
}	O
}	O
}	O
if	O
(	O
p	O
==	O
NULL	O
)	O
{	O
if	O
(	O
*	pointer
cmd	pointer
==	O
'\0'	O
)	O
p	O
=	O
save	function
(	O
"sh"	int
)	O
;	O
else	O
p	O
=	O
save	function
(	O
cmd	pointer
)	O
;	O
}	O
system	O
(	O
p	O
)	O
;	O
free	O
(	O
p	pointer
)	O
;	O
close	O
(	O
0	pointer
)	O
;	O
dup	O
(	O
inp	int
)	O
;	O
close	O
(	O
inp	pointer
)	O
;	O
init_signals	O
(	O
1	O
)	O
;	O
raw_mode	O
(	O
1	O
)	O
;	O
if	O
(	O
donemsg	O
!=	O
NULL	O
)	O
{	O
putstr	O
(	O
donemsg	pointer
)	O
;	O
putstr	O
(	O
"  (press RETURN)"	pointer
)	O
;	O
get_return	O
(	O
)	pointer
;	O
putchr	O
(	O
'\n'	pointer
)	O
;	O
flush	O
(	O
)	int
;	O
}	O
init	O
(	O
)	pointer
;	O
screen_trashed	O
=	O
1	int
;	O
reedit_ifile	O
(	O
save_ifile	pointer
)	O
;	O
winch	O
(	O
0	pointer
)	O
;	O
}	O
public	O
int	O
pipe_mark	function
(	O
c	O
,	O
cmd	O
)	O
int	O
c	int
;	O
char	O
*	O
cmd	pointer
;	O
{	O
POSITION	O
mpos	O
,	O
tpos	O
,	O
bpos	O
;	O
mpos	O
=	O
markpos	function
(	O
c	O
)	O
;	O
if	O
(	O
mpos	O
==	O
NULL_POSITION	O
)	O
return	O
(	O
-	O
1	int
)	O
;	O
tpos	O
=	O
position	function
(	O
TOP	O
)	O
;	O
if	O
(	O
tpos	O
==	O
NULL_POSITION	O
)	O
tpos	O
=	O
ch_zero	O
(	O
)	O
;	O
bpos	O
=	O
position	function
(	O
BOTTOM	O
)	O
;	O
if	O
(	O
c	O
==	O
'.'	O
)	O
return	O
(	O
pipe_data	O
(	O
cmd	pointer
,	O
tpos	O
,	O
bpos	O
)	O
)	O
;	O
else	O
if	O
(	O
mpos	O
<=	O
tpos	O
)	O
return	O
(	O
pipe_data	O
(	O
cmd	pointer
,	O
mpos	O
,	O
bpos	O
)	O
)	O
;	O
else	O
if	O
(	O
bpos	O
==	O
NULL_POSITION	O
)	O
return	O
(	O
pipe_data	O
(	O
cmd	pointer
,	O
tpos	O
,	O
bpos	O
)	O
)	O
;	O
else	O
return	O
(	int
pipe_data	O
(	O
cmd	pointer
,	O
tpos	O
,	O
mpos	O
)	O
)	O
;	O
}	O
public	O
int	O
pipe_data	function
(	O
cmd	O
,	O
spos	O
,	O
epos	O
)	O
char	O
*	O
cmd	pointer
;	O
POSITION	O
spos	long
;	O
POSITION	O
epos	long
;	O
{	O
FILE	O
*	O
f	pointer
;	O
int	O
c	int
;	O
extern	O
FILE	O
*	O
popen	pointer
(	O
)	O
;	O
if	O
(	O
ch_seek	O
(	O
spos	int
)	O
!=	O
0	O
)	O
{	O
error	O
(	O
"Cannot seek to start position"	int
,	O
NULL_PARG	O
)	O
;	O
return	O
(	int
-	O
1	int
)	O
;	O
}	O
if	O
(	O
(	O
f	O
=	O
popen	function
(	O
cmd	pointer
,	O
"w"	pointer
)	O
)	O
==	O
NULL	int
)	O
{	O
error	O
(	O
"Cannot create pipe"	int
,	O
NULL_PARG	O
)	O
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
clear_bot	O
(	O
)	O
;	O
putstr	O
(	O
"!"	O
)	O
;	O
putstr	O
(	O
cmd	O
)	O
;	O
putstr	O
(	O
"\n"	O
)	O
;	O
deinit	O
(	O
)	O
;	O
flush	O
(	O
)	int
;	O
raw_mode	O
(	O
0	O
)	O
;	O
init_signals	O
(	O
0	O
)	O
;	O
LSIGNAL	O
(	O
SIGPIPE	O
,	O
SIG_IGN	O
)	O
;	O
c	O
=	O
EOI	function
;	O
while	O
(	O
epos	O
==	O
NULL_POSITION	O
||	O
spos	O
++	O
<=	O
epos	O
)	O
{	O
c	O
=	O
ch_forw_get	function
(	O
)	O
;	O
if	O
(	O
c	O
==	O
EOI	O
)	O
break	O
;	O
if	O
(	O
putc	O
(	O
c	pointer
,	O
f	O
)	O
==	O
EOF	int
)	O
break	O
;	O
}	O
while	O
(	O
c	O
!=	O
'\n'	O
&&	O
c	O
!=	O
EOI	O
)	O
{	O
c	O
=	O
ch_forw_get	function
(	O
)	O
;	O
if	O
(	O
c	O
==	O
EOI	O
)	O
break	O
;	O
if	O
(	O
putc	O
(	O
c	pointer
,	O
f	O
)	O
==	O
EOF	int
)	O
break	O
;	O
}	O
pclose	O
(	O
f	O
)	O
;	O
LSIGNAL	O
(	O
SIGPIPE	O
,	O
SIG_DFL	O
)	O
;	O
init_signals	O
(	O
1	O
)	O
;	O
raw_mode	O
(	O
1	O
)	O
;	O
init	O
(	O
)	pointer
;	O
screen_trashed	O
=	O
1	int
;	O
winch	O
(	O
0	pointer
)	O
;	O
return	O
(	int
0	O
)	O
;	O
}	O