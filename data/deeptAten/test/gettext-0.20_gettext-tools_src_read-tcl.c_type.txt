msgdomain_list_ty	O
*	O
msgdomain_read_tcl	O
(	O
const	O
char	O
*	O
locale_name	pointer
,	O
const	O
char	O
*	O
directory	pointer
)	O
{	O
const	O
char	O
*	O
gettextdatadir	pointer
;	O
char	O
*	O
tclscript	pointer
;	O
size_t	O
len	O
;	O
char	O
*	O
frobbed_locale_name	pointer
;	O
char	O
*	O
p	pointer
;	O
char	O
*	O
file_name	pointer
;	O
char	O
*	O
argv	pointer
[	O
4	O
]	O
;	O
pid_t	O
child	int
;	O
int	O
fd	int
[	O
1	int
]	O
;	O
FILE	O
*	O
fp	pointer
;	O
msgdomain_list_ty	O
*	O
mdlp	pointer
;	O
int	O
exitstatus	int
;	O
size_t	O
k	long
;	O
gettextdatadir	O
=	O
getenv	O
(	O
"GETTEXTTCLDIR"	pointer
)	O
;	O
if	O
(	O
gettextdatadir	O
==	O
NULL	O
||	O
gettextdatadir	O
[	O
0	int
]	O
==	O
'\0'	O
)	O
gettextdatadir	O
=	O
relocate	pointer
(	O
GETTEXTDATADIR	pointer
)	O
;	O
tclscript	O
=	O
xconcatenated_filename	O
(	O
gettextdatadir	pointer
,	O
"msgunfmt.tcl"	pointer
,	O
NULL	pointer
)	O
;	O
len	O
=	O
strlen	O
(	O
locale_name	pointer
)	O
;	O
frobbed_locale_name	O
=	O
(	O
char	O
*	O
)	O
xmalloca	pointer
(	O
len	int
+	O
1	int
)	O
;	O
memcpy	O
(	O
frobbed_locale_name	pointer
,	O
locale_name	pointer
,	O
len	pointer
+	O
1	int
)	O
;	O
for	O
(	O
p	int
=	O
frobbed_locale_name	int
;	O
*	pointer
p	pointer
!=	O
'\0'	O
;	O
p	pointer
++	O
)	O
if	O
(	O
*	int
p	pointer
>=	O
'A'	O
&&	O
*	pointer
p	pointer
<=	O
'Z'	O
)	O
*	O
p	pointer
=	O
*	O
p	pointer
-	O
'A'	int
+	O
'a'	int
;	O
else	O
if	O
(	O
*	O
p	pointer
==	O
'.'	O
)	O
{	O
*	O
p	pointer
=	O
'\0'	O
;	O
break	O
;	O
}	O
file_name	O
=	O
xconcatenated_filename	O
(	O
directory	pointer
,	O
frobbed_locale_name	pointer
,	O
".msg"	pointer
)	O
;	O
freea	O
(	O
frobbed_locale_name	pointer
)	O
;	O
argv	O
[	O
0	int
]	O
=	O
"tclsh"	pointer
;	O
argv	pointer
[	O
1	int
]	O
=	O
tclscript	pointer
;	O
argv	pointer
[	O
2	int
]	O
=	O
file_name	pointer
;	O
argv	pointer
[	O
3	int
]	O
=	O
NULL	pointer
;	O
if	pointer
(	O
verbose	O
)	O
{	O
char	O
*	O
command	pointer
=	O
shell_quote_argv	O
(	O
argv	pointer
)	O
;	O
printf	O
(	O
"%s\n"	pointer
,	O
command	pointer
)	O
;	O
free	O
(	O
command	pointer
)	O
;	O
}	O
child	O
=	O
create_pipe_in	function
(	O
"tclsh"	pointer
,	O
"tclsh"	pointer
,	O
argv	pointer
,	O
DEV_NULL	O
,	O
false	pointer
,	O
true	pointer
,	O
true	O
,	O
fd	O
)	O
;	O
fp	O
=	O
fdopen	O
(	O
fd	pointer
[	O
0	int
]	O
,	O
"r"	pointer
)	O
;	O
if	O
(	O
fp	O
==	O
NULL	O
)	O
error	O
(	O
EXIT_FAILURE	int
,	O
errno	int
,	O
_	int
(	O
"fdopen() failed"	pointer
)	O
)	O
;	O
mdlp	O
=	O
read_catalog_stream	O
(	O
fp	pointer
,	O
"(pipe)"	pointer
,	O
"(pipe)"	pointer
,	O
&	pointer
input_format_po	pointer
)	O
;	O
fclose	O
(	O
fp	pointer
)	O
;	O
exitstatus	O
=	O
wait_subprocess	O
(	O
child	int
,	O
"tclsh"	int
,	O
false	int
,	O
false	O
,	O
true	int
,	O
true	O
,	O
NULL	O
)	O
;	O
if	O
(	O
exitstatus	O
!=	O
0	O
)	O
{	O
if	O
(	O
exitstatus	O
==	O
2	O
)	O
error	O
(	O
EXIT_FAILURE	int
,	O
ENOENT	int
,	O
_	O
(	O
"error while opening \"%s\" for reading"	pointer
)	O
,	O
file_name	pointer
)	O
;	O
else	O
error	O
(	O
EXIT_FAILURE	O
,	O
0	int
,	O
_	int
(	O
"%s subprocess failed with exit code %d"	pointer
)	O
,	O
"tclsh"	pointer
,	O
exitstatus	pointer
)	O
;	O
}	O
free	O
(	O
tclscript	pointer
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
mdlp	int
->	O
nitems	int
;	O
k	O
++	O
)	O
{	O
message_list_ty	O
*	O
mlp	pointer
=	O
mdlp	O
->	O
item	pointer
[	O
k	int
]	O
->	O
messages	pointer
;	O
size_t	pointer
j	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	int
<	O
mlp	int
->	O
nitems	pointer
;	O
j	O
++	O
)	O
if	O
(	O
is_header	int
(	O
mlp	pointer
->	O
item	pointer
[	O
j	int
]	O
)	O
)	O
{	O
if	O
(	O
j	O
>	O
0	int
)	O
{	O
message_ty	O
*	O
header	pointer
=	O
mlp	pointer
->	O
item	pointer
[	O
j	int
]	O
;	O
size_t	pointer
i	long
;	O
for	O
(	O
i	long
=	O
j	int
;	O
i	int
>	O
0	int
;	O
i	int
--	O
)	O
mlp	O
->	O
item	pointer
[	O
i	int
]	O
=	O
mlp	pointer
->	O
item	pointer
[	O
i	int
-	O
1	int
]	O
;	O
mlp	pointer
->	O
item	pointer
[	O
0	int
]	O
=	O
header	pointer
;	O
}	pointer
break	O
;	O
}	O
}	O
return	O
mdlp	O
;	O
}	O