static	O
unsigned	O
char	O
to_uchar	function
(	O
char	O
ch	char
)	O
{	O
return	O
ch	char
;	O
}	O
static	O
const	O
char	O
b64c	array
[	O
64	int
]	O
=	O
"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"	pointer
;	O
static	O
void	O
base64_encode_fast	function
(	O
const	O
char	O
*	O
restrict	O
in	pointer
,	O
size_t	long
inlen	long
,	O
char	O
*	O
restrict	O
out	pointer
)	O
{	O
while	O
(	O
inlen	long
)	O
{	O
*	O
out	pointer
++	O
=	O
b64c	array
[	O
to_uchar	function
(	O
in	pointer
[	O
0	int
]	O
)	O
>>	O
2	int
]	O
;	O
*	O
out	pointer
++	O
=	O
b64c	array
[	O
(	O
(	O
to_uchar	function
(	O
in	pointer
[	O
0	int
]	O
)	O
<<	O
4	int
)	O
+	O
(	O
to_uchar	function
(	O
in	pointer
[	O
1	int
]	O
)	O
>>	O
4	int
)	O
)	O
&	O
0x3f	int
]	O
;	O
*	O
out	pointer
++	O
=	O
b64c	array
[	O
(	O
(	O
to_uchar	function
(	O
in	pointer
[	O
1	int
]	O
)	O
<<	O
2	int
)	O
+	O
(	O
to_uchar	function
(	O
in	pointer
[	O
2	int
]	O
)	O
>>	O
6	int
)	O
)	O
&	O
0x3f	int
]	O
;	O
*	O
out	pointer
++	O
=	O
b64c	array
[	O
to_uchar	function
(	O
in	pointer
[	O
2	int
]	O
)	O
&	O
0x3f	int
]	O
;	O
inlen	long
-=	O
3	int
;	O
in	pointer
+=	O
3	int
;	O
}	O
}	O
void	O
base64_encode	function
(	O
const	O
char	O
*	O
restrict	O
in	pointer
,	O
size_t	long
inlen	long
,	O
char	O
*	O
restrict	O
out	pointer
,	O
size_t	long
outlen	long
)	O
{	O
if	O
(	O
outlen	long
%	O
4	int
==	O
0	int
&&	O
inlen	long
==	O
outlen	long
/	O
4	int
*	O
3	int
)	O
{	O
base64_encode_fast	function
(	O
in	pointer
,	O
inlen	long
,	O
out	pointer
)	O
;	O
return	O
;	O
}	O
while	O
(	O
inlen	long
&&	O
outlen	long
)	O
{	O
*	O
out	pointer
++	O
=	O
b64c	array
[	O
to_uchar	function
(	O
in	pointer
[	O
0	int
]	O
)	O
>>	O
2	int
]	O
;	O
if	O
(	O
!	O
--	O
outlen	long
)	O
break	O
;	O
*	O
out	pointer
++	O
=	O
b64c	array
[	O
(	O
(	O
to_uchar	function
(	O
in	pointer
[	O
0	int
]	O
)	O
<<	O
4	int
)	O
+	O
(	O
--	O
inlen	long
?	O
to_uchar	function
(	O
in	pointer
[	O
1	int
]	O
)	O
>>	O
4	int
:	O
0	int
)	O
)	O
&	O
0x3f	int
]	O
;	O
if	O
(	O
!	O
--	O
outlen	long
)	O
break	O
;	O
*	O
out	pointer
++	O
=	O
(	O
inlen	long
?	O
b64c	array
[	O
(	O
(	O
to_uchar	function
(	O
in	pointer
[	O
1	int
]	O
)	O
<<	O
2	int
)	O
+	O
(	O
--	O
inlen	long
?	O
to_uchar	function
(	O
in	pointer
[	O
2	int
]	O
)	O
>>	O
6	int
:	O
0	int
)	O
)	O
&	O
0x3f	int
]	O
:	O
'='	O
)	O
;	O
if	O
(	O
!	O
--	O
outlen	long
)	O
break	O
;	O
*	O
out	pointer
++	O
=	O
inlen	long
?	O
b64c	array
[	O
to_uchar	function
(	O
in	pointer
[	O
2	int
]	O
)	O
&	O
0x3f	int
]	O
:	O
'='	O
;	O
if	O
(	O
!	O
--	O
outlen	long
)	O
break	O
;	O
if	O
(	O
inlen	long
)	O
inlen	long
--	O
;	O
if	O
(	O
inlen	long
)	O
in	pointer
+=	O
3	int
;	O
}	O
if	O
(	O
outlen	long
)	O
*	O
out	pointer
=	O
'\0'	O
;	O
}	O
size_t	long
base64_encode_alloc	function
(	O
const	O
char	O
*	O
in	pointer
,	O
size_t	long
inlen	long
,	O
char	O
*	O
*	O
out	pointer
)	O
{	O
size_t	long
outlen	long
=	O
1	int
+	O
BASE64_LENGTH	O
(	O
inlen	long
)	O
;	O
if	O
(	O
inlen	long
>	O
outlen	long
)	O
{	O
*	O
out	pointer
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
*	O
out	pointer
=	O
malloc	function
(	O
outlen	long
)	O
;	O
if	O
(	O
!	O
*	O
out	pointer
)	O
return	O
outlen	long
;	O
base64_encode	function
(	O
in	pointer
,	O
inlen	long
,	O
*	O
out	pointer
,	O
outlen	long
)	O
;	O
return	O
outlen	long
-	O
1	int
;	O
}	O
static	O
const	O
signed	O
char	O
b64	array
[	O
0x100	int
]	O
=	O
{	O
B64	O
(	O
0	int
)	O
,	O
B64	O
(	O
1	int
)	O
,	O
B64	O
(	O
2	int
)	O
,	O
B64	O
(	O
3	int
)	O
,	O
B64	O
(	O
4	int
)	O
,	O
B64	O
(	O
5	int
)	O
,	O
B64	O
(	O
6	int
)	O
,	O
B64	O
(	O
7	int
)	O
,	O
B64	O
(	O
8	int
)	O
,	O
B64	O
(	O
9	int
)	O
,	O
B64	O
(	O
10	int
)	O
,	O
B64	O
(	O
11	int
)	O
,	O
B64	O
(	O
12	int
)	O
,	O
B64	O
(	O
13	int
)	O
,	O
B64	O
(	O
14	int
)	O
,	O
B64	O
(	O
15	int
)	O
,	O
B64	O
(	O
16	int
)	O
,	O
B64	O
(	O
17	int
)	O
,	O
B64	O
(	O
18	int
)	O
,	O
B64	O
(	O
19	int
)	O
,	O
B64	O
(	O
20	int
)	O
,	O
B64	O
(	O
21	int
)	O
,	O
B64	O
(	O
22	int
)	O
,	O
B64	O
(	O
23	int
)	O
,	O
B64	O
(	O
24	int
)	O
,	O
B64	O
(	O
25	int
)	O
,	O
B64	O
(	O
26	int
)	O
,	O
B64	O
(	O
27	int
)	O
,	O
B64	O
(	O
28	int
)	O
,	O
B64	O
(	O
29	int
)	O
,	O
B64	O
(	O
30	int
)	O
,	O
B64	O
(	O
31	int
)	O
,	O
B64	O
(	O
32	int
)	O
,	O
B64	O
(	O
33	int
)	O
,	O
B64	O
(	O
34	int
)	O
,	O
B64	O
(	O
35	int
)	O
,	O
B64	O
(	O
36	int
)	O
,	O
B64	O
(	O
37	int
)	O
,	O
B64	O
(	O
38	int
)	O
,	O
B64	O
(	O
39	int
)	O
,	O
B64	O
(	O
40	int
)	O
,	O
B64	O
(	O
41	int
)	O
,	O
B64	O
(	O
42	int
)	O
,	O
B64	O
(	O
43	int
)	O
,	O
B64	O
(	O
44	int
)	O
,	O
B64	O
(	O
45	int
)	O
,	O
B64	O
(	O
46	int
)	O
,	O
B64	O
(	O
47	int
)	O
,	O
B64	O
(	O
48	int
)	O
,	O
B64	O
(	O
49	int
)	O
,	O
B64	O
(	O
50	int
)	O
,	O
B64	O
(	O
51	int
)	O
,	O
B64	O
(	O
52	int
)	O
,	O
B64	O
(	O
53	int
)	O
,	O
B64	O
(	O
54	int
)	O
,	O
B64	O
(	O
55	int
)	O
,	O
B64	O
(	O
56	int
)	O
,	O
B64	O
(	O
57	int
)	O
,	O
B64	O
(	O
58	int
)	O
,	O
B64	O
(	O
59	int
)	O
,	O
B64	O
(	O
60	int
)	O
,	O
B64	O
(	O
61	int
)	O
,	O
B64	O
(	O
62	int
)	O
,	O
B64	O
(	O
63	int
)	O
,	O
B64	O
(	O
64	int
)	O
,	O
B64	O
(	O
65	int
)	O
,	O
B64	O
(	O
66	int
)	O
,	O
B64	O
(	O
67	int
)	O
,	O
B64	O
(	O
68	int
)	O
,	O
B64	O
(	O
69	int
)	O
,	O
B64	O
(	O
70	int
)	O
,	O
B64	O
(	O
71	int
)	O
,	O
B64	O
(	O
72	int
)	O
,	O
B64	O
(	O
73	int
)	O
,	O
B64	O
(	O
74	int
)	O
,	O
B64	O
(	O
75	int
)	O
,	O
B64	O
(	O
76	int
)	O
,	O
B64	O
(	O
77	int
)	O
,	O
B64	O
(	O
78	int
)	O
,	O
B64	O
(	O
79	int
)	O
,	O
B64	O
(	O
80	int
)	O
,	O
B64	O
(	O
81	int
)	O
,	O
B64	O
(	O
82	int
)	O
,	O
B64	O
(	O
83	int
)	O
,	O
B64	O
(	O
84	int
)	O
,	O
B64	O
(	O
85	int
)	O
,	O
B64	O
(	O
86	int
)	O
,	O
B64	O
(	O
87	int
)	O
,	O
B64	O
(	O
88	int
)	O
,	O
B64	O
(	O
89	int
)	O
,	O
B64	O
(	O
90	int
)	O
,	O
B64	O
(	O
91	int
)	O
,	O
B64	O
(	O
92	int
)	O
,	O
B64	O
(	O
93	int
)	O
,	O
B64	O
(	O
94	int
)	O
,	O
B64	O
(	O
95	int
)	O
,	O
B64	O
(	O
96	int
)	O
,	O
B64	O
(	O
97	int
)	O
,	O
B64	O
(	O
98	int
)	O
,	O
B64	O
(	O
99	int
)	O
,	O
B64	O
(	O
100	int
)	O
,	O
B64	O
(	O
101	int
)	O
,	O
B64	O
(	O
102	int
)	O
,	O
B64	O
(	O
103	int
)	O
,	O
B64	O
(	O
104	int
)	O
,	O
B64	O
(	O
105	int
)	O
,	O
B64	O
(	O
106	int
)	O
,	O
B64	O
(	O
107	int
)	O
,	O
B64	O
(	O
108	int
)	O
,	O
B64	O
(	O
109	int
)	O
,	O
B64	O
(	O
110	int
)	O
,	O
B64	O
(	O
111	int
)	O
,	O
B64	O
(	O
112	int
)	O
,	O
B64	O
(	O
113	int
)	O
,	O
B64	O
(	O
114	int
)	O
,	O
B64	O
(	O
115	int
)	O
,	O
B64	O
(	O
116	int
)	O
,	O
B64	O
(	O
117	int
)	O
,	O
B64	O
(	O
118	int
)	O
,	O
B64	O
(	O
119	int
)	O
,	O
B64	O
(	O
120	int
)	O
,	O
B64	O
(	O
121	int
)	O
,	O
B64	O
(	O
122	int
)	O
,	O
B64	O
(	O
123	int
)	O
,	O
B64	O
(	O
124	int
)	O
,	O
B64	O
(	O
125	int
)	O
,	O
B64	O
(	O
126	int
)	O
,	O
B64	O
(	O
127	int
)	O
,	O
B64	O
(	O
128	int
)	O
,	O
B64	O
(	O
129	int
)	O
,	O
B64	O
(	O
130	int
)	O
,	O
B64	O
(	O
131	int
)	O
,	O
B64	O
(	O
132	int
)	O
,	O
B64	O
(	O
133	int
)	O
,	O
B64	O
(	O
134	int
)	O
,	O
B64	O
(	O
135	int
)	O
,	O
B64	O
(	O
136	int
)	O
,	O
B64	O
(	O
137	int
)	O
,	O
B64	O
(	O
138	int
)	O
,	O
B64	O
(	O
139	int
)	O
,	O
B64	O
(	O
140	int
)	O
,	O
B64	O
(	O
141	int
)	O
,	O
B64	O
(	O
142	int
)	O
,	O
B64	O
(	O
143	int
)	O
,	O
B64	O
(	O
144	int
)	O
,	O
B64	O
(	O
145	int
)	O
,	O
B64	O
(	O
146	int
)	O
,	O
B64	O
(	O
147	int
)	O
,	O
B64	O
(	O
148	int
)	O
,	O
B64	O
(	O
149	int
)	O
,	O
B64	O
(	O
150	int
)	O
,	O
B64	O
(	O
151	int
)	O
,	O
B64	O
(	O
152	int
)	O
,	O
B64	O
(	O
153	int
)	O
,	O
B64	O
(	O
154	int
)	O
,	O
B64	O
(	O
155	int
)	O
,	O
B64	O
(	O
156	int
)	O
,	O
B64	O
(	O
157	int
)	O
,	O
B64	O
(	O
158	int
)	O
,	O
B64	O
(	O
159	int
)	O
,	O
B64	O
(	O
160	int
)	O
,	O
B64	O
(	O
161	int
)	O
,	O
B64	O
(	O
162	int
)	O
,	O
B64	O
(	O
163	int
)	O
,	O
B64	O
(	O
164	int
)	O
,	O
B64	O
(	O
165	int
)	O
,	O
B64	O
(	O
166	int
)	O
,	O
B64	O
(	O
167	int
)	O
,	O
B64	O
(	O
168	int
)	O
,	O
B64	O
(	O
169	int
)	O
,	O
B64	O
(	O
170	int
)	O
,	O
B64	O
(	O
171	int
)	O
,	O
B64	O
(	O
172	int
)	O
,	O
B64	O
(	O
173	int
)	O
,	O
B64	O
(	O
174	int
)	O
,	O
B64	O
(	O
175	int
)	O
,	O
B64	O
(	O
176	int
)	O
,	O
B64	O
(	O
177	int
)	O
,	O
B64	O
(	O
178	int
)	O
,	O
B64	O
(	O
179	int
)	O
,	O
B64	O
(	O
180	int
)	O
,	O
B64	O
(	O
181	int
)	O
,	O
B64	O
(	O
182	int
)	O
,	O
B64	O
(	O
183	int
)	O
,	O
B64	O
(	O
184	int
)	O
,	O
B64	O
(	O
185	int
)	O
,	O
B64	O
(	O
186	int
)	O
,	O
B64	O
(	O
187	int
)	O
,	O
B64	O
(	O
188	int
)	O
,	O
B64	O
(	O
189	int
)	O
,	O
B64	O
(	O
190	int
)	O
,	O
B64	O
(	O
191	int
)	O
,	O
B64	O
(	O
192	int
)	O
,	O
B64	O
(	O
193	int
)	O
,	O
B64	O
(	O
194	int
)	O
,	O
B64	O
(	O
195	int
)	O
,	O
B64	O
(	O
196	int
)	O
,	O
B64	O
(	O
197	int
)	O
,	O
B64	O
(	O
198	int
)	O
,	O
B64	O
(	O
199	int
)	O
,	O
B64	O
(	O
200	int
)	O
,	O
B64	O
(	O
201	int
)	O
,	O
B64	O
(	O
202	int
)	O
,	O
B64	O
(	O
203	int
)	O
,	O
B64	O
(	O
204	int
)	O
,	O
B64	O
(	O
205	int
)	O
,	O
B64	O
(	O
206	int
)	O
,	O
B64	O
(	O
207	int
)	O
,	O
B64	O
(	O
208	int
)	O
,	O
B64	O
(	O
209	int
)	O
,	O
B64	O
(	O
210	int
)	O
,	O
B64	O
(	O
211	int
)	O
,	O
B64	O
(	O
212	int
)	O
,	O
B64	O
(	O
213	int
)	O
,	O
B64	O
(	O
214	int
)	O
,	O
B64	O
(	O
215	int
)	O
,	O
B64	O
(	O
216	int
)	O
,	O
B64	O
(	O
217	int
)	O
,	O
B64	O
(	O
218	int
)	O
,	O
B64	O
(	O
219	int
)	O
,	O
B64	O
(	O
220	int
)	O
,	O
B64	O
(	O
221	int
)	O
,	O
B64	O
(	O
222	int
)	O
,	O
B64	O
(	O
223	int
)	O
,	O
B64	O
(	O
224	int
)	O
,	O
B64	O
(	O
225	int
)	O
,	O
B64	O
(	O
226	int
)	O
,	O
B64	O
(	O
227	int
)	O
,	O
B64	O
(	O
228	int
)	O
,	O
B64	O
(	O
229	int
)	O
,	O
B64	O
(	O
230	int
)	O
,	O
B64	O
(	O
231	int
)	O
,	O
B64	O
(	O
232	int
)	O
,	O
B64	O
(	O
233	int
)	O
,	O
B64	O
(	O
234	int
)	O
,	O
B64	O
(	O
235	int
)	O
,	O
B64	O
(	O
236	int
)	O
,	O
B64	O
(	O
237	int
)	O
,	O
B64	O
(	O
238	int
)	O
,	O
B64	O
(	O
239	int
)	O
,	O
B64	O
(	O
240	int
)	O
,	O
B64	O
(	O
241	int
)	O
,	O
B64	O
(	O
242	int
)	O
,	O
B64	O
(	O
243	int
)	O
,	O
B64	O
(	O
244	int
)	O
,	O
B64	O
(	O
245	int
)	O
,	O
B64	O
(	O
246	int
)	O
,	O
B64	O
(	O
247	int
)	O
,	O
B64	O
(	O
248	int
)	O
,	O
B64	O
(	O
249	int
)	O
,	O
B64	O
(	O
250	int
)	O
,	O
B64	O
(	O
251	int
)	O
,	O
B64	O
(	O
252	int
)	O
,	O
B64	O
(	O
253	int
)	O
,	O
B64	O
(	O
254	int
)	O
,	O
B64	O
(	O
255	int
)	O
}	O
;	O
bool	bool
isbase64	function
(	O
char	O
ch	char
)	O
{	O
return	O
uchar_in_range	O
(	O
to_uchar	function
(	O
ch	char
)	O
)	O
&&	O
0	int
<=	O
b64	array
[	O
to_uchar	function
(	O
ch	char
)	O
]	O
;	O
}	O
void	O
base64_decode_ctx_init	function
(	O
struct	O
base64_decode_context	struct
*	O
ctx	pointer
)	O
{	O
ctx	pointer
->	O
i	int
=	O
0	int
;	O
}	O
static	O
char	O
*	O
get_4	function
(	O
struct	O
base64_decode_context	struct
*	O
ctx	pointer
,	O
char	O
const	O
*	O
restrict	O
*	O
in	pointer
,	O
char	O
const	O
*	O
restrict	O
in_end	pointer
,	O
size_t	long
*	O
n_non_newline	pointer
)	O
{	O
if	O
(	O
ctx	pointer
->	O
i	int
==	O
4	int
)	O
ctx	pointer
->	O
i	int
=	O
0	int
;	O
if	O
(	O
ctx	pointer
->	O
i	int
==	O
0	int
)	O
{	O
char	O
const	O
*	O
t	pointer
=	O
*	O
in	pointer
;	O
if	O
(	O
4	int
<=	O
in_end	pointer
-	O
*	O
in	pointer
&&	O
memchr	function
(	O
t	pointer
,	O
'\n'	O
,	O
4	int
)	O
==	O
NULL	O
)	O
{	O
*	O
in	pointer
+=	O
4	int
;	O
*	O
n_non_newline	pointer
=	O
4	int
;	O
return	O
(	O
char	O
*	O
)	O
t	pointer
;	O
}	O
}	O
{	O
char	O
const	O
*	O
p	pointer
=	O
*	O
in	pointer
;	O
while	O
(	O
p	pointer
<	O
in_end	pointer
)	O
{	O
char	O
c	char
=	O
*	O
p	pointer
++	O
;	O
if	O
(	O
c	char
!=	O
'\n'	O
)	O
{	O
ctx	pointer
->	O
buf	array
[	O
ctx	pointer
->	O
i	int
++	O
]	O
=	O
c	char
;	O
if	O
(	O
ctx	pointer
->	O
i	int
==	O
4	int
)	O
break	O
;	O
}	O
}	O
*	O
in	pointer
=	O
p	pointer
;	O
*	O
n_non_newline	pointer
=	O
ctx	pointer
->	O
i	int
;	O
return	O
ctx	pointer
->	O
buf	array
;	O
}	O
}	O
static	O
bool	bool
decode_4	function
(	O
char	O
const	O
*	O
restrict	O
in	pointer
,	O
size_t	long
inlen	long
,	O
char	O
*	O
restrict	O
*	O
outp	pointer
,	O
size_t	long
*	O
outleft	pointer
)	O
{	O
char	O
*	O
out	pointer
=	O
*	O
outp	pointer
;	O
if	O
(	O
inlen	long
<	O
2	int
)	O
return	O
false	int
;	O
if	O
(	O
!	O
isbase64	function
(	O
in	pointer
[	O
0	int
]	O
)	O
||	O
!	O
isbase64	function
(	O
in	pointer
[	O
1	int
]	O
)	O
)	O
return	O
false	int
;	O
if	O
(	O
*	O
outleft	pointer
)	O
{	O
*	O
out	pointer
++	O
=	O
(	O
(	O
b64	array
[	O
to_uchar	function
(	O
in	pointer
[	O
0	int
]	O
)	O
]	O
<<	O
2	int
)	O
|	O
(	O
b64	array
[	O
to_uchar	function
(	O
in	pointer
[	O
1	int
]	O
)	O
]	O
>>	O
4	int
)	O
)	O
;	O
--	O
*	O
outleft	pointer
;	O
}	O
if	O
(	O
inlen	long
==	O
2	int
)	O
return_false	O
;	O
if	O
(	O
in	pointer
[	O
2	int
]	O
==	O
'='	O
)	O
{	O
if	O
(	O
inlen	long
!=	O
4	int
)	O
return_false	O
;	O
if	O
(	O
in	pointer
[	O
3	int
]	O
!=	O
'='	O
)	O
return_false	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
isbase64	function
(	O
in	pointer
[	O
2	int
]	O
)	O
)	O
return_false	O
;	O
if	O
(	O
*	O
outleft	pointer
)	O
{	O
*	O
out	pointer
++	O
=	O
(	O
(	O
(	O
b64	array
[	O
to_uchar	function
(	O
in	pointer
[	O
1	int
]	O
)	O
]	O
<<	O
4	int
)	O
&	O
0xf0	int
)	O
|	O
(	O
b64	array
[	O
to_uchar	function
(	O
in	pointer
[	O
2	int
]	O
)	O
]	O
>>	O
2	int
)	O
)	O
;	O
--	O
*	O
outleft	pointer
;	O
}	O
if	O
(	O
inlen	long
==	O
3	int
)	O
return_false	O
;	O
if	O
(	O
in	pointer
[	O
3	int
]	O
==	O
'='	O
)	O
{	O
if	O
(	O
inlen	long
!=	O
4	int
)	O
return_false	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
isbase64	function
(	O
in	pointer
[	O
3	int
]	O
)	O
)	O
return_false	O
;	O
if	O
(	O
*	O
outleft	pointer
)	O
{	O
*	O
out	pointer
++	O
=	O
(	O
(	O
(	O
b64	array
[	O
to_uchar	function
(	O
in	pointer
[	O
2	int
]	O
)	O
]	O
<<	O
6	int
)	O
&	O
0xc0	int
)	O
|	O
b64	array
[	O
to_uchar	function
(	O
in	pointer
[	O
3	int
]	O
)	O
]	O
)	O
;	O
--	O
*	O
outleft	pointer
;	O
}	O
}	O
}	O
*	O
outp	pointer
=	O
out	pointer
;	O
return	O
true	int
;	O
}	O
bool	bool
base64_decode_ctx	function
(	O
struct	O
base64_decode_context	struct
*	O
ctx	pointer
,	O
const	O
char	O
*	O
restrict	O
in	pointer
,	O
size_t	long
inlen	long
,	O
char	O
*	O
restrict	O
out	pointer
,	O
size_t	long
*	O
outlen	long
)	O
{	O
size_t	long
outleft	pointer
=	O
*	O
outlen	long
;	O
bool	bool
ignore_newlines	bool
=	O
ctx	pointer
!=	O
NULL	O
;	O
bool	bool
flush_ctx	bool
=	O
false	int
;	O
unsigned	O
int	O
ctx_i	int
=	O
0	int
;	O
if	O
(	O
ignore_newlines	bool
)	O
{	O
ctx_i	int
=	O
ctx	pointer
->	O
i	int
;	O
flush_ctx	bool
=	O
inlen	long
==	O
0	int
;	O
}	O
while	O
(	O
true	int
)	O
{	O
size_t	long
outleft_save	long
=	O
outleft	pointer
;	O
if	O
(	O
ctx_i	int
==	O
0	int
&&	O
!	O
flush_ctx	bool
)	O
{	O
while	O
(	O
true	int
)	O
{	O
outleft_save	long
=	O
outleft	pointer
;	O
if	O
(	O
!	O
decode_4	function
(	O
in	pointer
,	O
inlen	long
,	O
&	O
out	pointer
,	O
&	O
outleft	pointer
)	O
)	O
break	O
;	O
in	pointer
+=	O
4	int
;	O
inlen	long
-=	O
4	int
;	O
}	O
}	O
if	O
(	O
inlen	long
==	O
0	int
&&	O
!	O
flush_ctx	bool
)	O
break	O
;	O
if	O
(	O
inlen	long
&&	O
*	O
in	pointer
==	O
'\n'	O
&&	O
ignore_newlines	bool
)	O
{	O
++	O
in	pointer
;	O
--	O
inlen	long
;	O
continue	O
;	O
}	O
out	pointer
-=	O
outleft_save	long
-	O
outleft	pointer
;	O
outleft	pointer
=	O
outleft_save	long
;	O
{	O
char	O
const	O
*	O
in_end	pointer
=	O
in	pointer
+	O
inlen	long
;	O
char	O
const	O
*	O
non_nl	pointer
;	O
if	O
(	O
ignore_newlines	bool
)	O
non_nl	pointer
=	O
get_4	function
(	O
ctx	pointer
,	O
&	O
in	pointer
,	O
in_end	pointer
,	O
&	O
inlen	long
)	O
;	O
else	O
non_nl	pointer
=	O
in	pointer
;	O
if	O
(	O
inlen	long
==	O
0	int
||	O
(	O
inlen	long
<	O
4	int
&&	O
!	O
flush_ctx	bool
&&	O
ignore_newlines	bool
)	O
)	O
{	O
inlen	long
=	O
0	int
;	O
break	O
;	O
}	O
if	O
(	O
!	O
decode_4	function
(	O
non_nl	pointer
,	O
inlen	long
,	O
&	O
out	pointer
,	O
&	O
outleft	pointer
)	O
)	O
break	O
;	O
inlen	long
=	O
in_end	pointer
-	O
in	pointer
;	O
}	O
}	O
*	O
outlen	long
-=	O
outleft	pointer
;	O
return	O
inlen	long
==	O
0	int
;	O
}	O
bool	bool
base64_decode_alloc_ctx	function
(	O
struct	O
base64_decode_context	struct
*	O
ctx	pointer
,	O
const	O
char	O
*	O
in	pointer
,	O
size_t	long
inlen	long
,	O
char	O
*	O
*	O
out	pointer
,	O
size_t	long
*	O
outlen	long
)	O
{	O
size_t	long
needlen	long
=	O
3	int
*	O
(	O
inlen	long
/	O
4	int
)	O
+	O
3	int
;	O
*	O
out	pointer
=	O
malloc	function
(	O
needlen	long
)	O
;	O
if	O
(	O
!	O
*	O
out	pointer
)	O
return	O
true	int
;	O
if	O
(	O
!	O
base64_decode_ctx	function
(	O
ctx	pointer
,	O
in	pointer
,	O
inlen	long
,	O
*	O
out	pointer
,	O
&	O
needlen	long
)	O
)	O
{	O
free	function
(	O
*	O
out	pointer
)	O
;	O
*	O
out	pointer
=	O
NULL	O
;	O
return	O
false	int
;	O
}	O
if	O
(	O
outlen	long
)	O
*	O
outlen	long
=	O
needlen	long
;	O
return	O
true	int
;	O
}	O
