gsl_multifit_fdfsolver	struct
*	O
gsl_multifit_fdfsolver_alloc	function
(	O
const	O
gsl_multifit_fdfsolver_type	struct
*	O
T	pointer
,	O
size_t	long
n	int
,	O
size_t	long
p	int
)	O
{	O
int	O
status	int
;	O
gsl_multifit_fdfsolver	struct
*	O
s	pointer
;	O
if	O
(	O
n	int
<	O
p	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"insufficient data points, n < p"	pointer
,	O
GSL_EINVAL	int
,	O
0	int
)	O
;	O
}	O
s	pointer
=	O
(	O
gsl_multifit_fdfsolver	struct
*	O
)	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
gsl_multifit_fdfsolver	struct
)	O
)	O
;	O
if	O
(	O
s	pointer
==	O
0	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for multifit solver struct"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
s	pointer
->	O
x	double
=	O
gsl_vector_calloc	function
(	O
p	int
)	O
;	O
if	O
(	O
s	pointer
->	O
x	double
==	O
0	int
)	O
{	O
gsl_multifit_fdfsolver_free	function
(	O
s	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for x"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
s	pointer
->	O
f	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
s	pointer
->	O
f	pointer
==	O
0	int
)	O
{	O
gsl_multifit_fdfsolver_free	function
(	O
s	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for f"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
s	pointer
->	O
dx	pointer
=	O
gsl_vector_calloc	function
(	O
p	int
)	O
;	O
if	O
(	O
s	pointer
->	O
dx	pointer
==	O
0	int
)	O
{	O
gsl_multifit_fdfsolver_free	function
(	O
s	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for dx"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
s	pointer
->	O
g	pointer
=	O
gsl_vector_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
s	pointer
->	O
g	pointer
==	O
0	int
)	O
{	O
gsl_multifit_fdfsolver_free	function
(	O
s	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for g"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
s	pointer
->	O
sqrt_wts	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
s	pointer
->	O
sqrt_wts	pointer
==	O
0	int
)	O
{	O
gsl_multifit_fdfsolver_free	function
(	O
s	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for sqrt_wts"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
s	pointer
->	O
state	pointer
=	O
calloc	function
(	O
1	int
,	O
T	pointer
->	O
size	long
)	O
;	O
if	O
(	O
s	pointer
->	O
state	pointer
==	O
0	int
)	O
{	O
gsl_multifit_fdfsolver_free	function
(	O
s	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for multifit solver state"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
s	pointer
->	O
type	pointer
=	O
T	pointer
;	O
status	int
=	O
(	O
s	pointer
->	O
type	pointer
->	O
alloc	pointer
)	O
(	O
s	pointer
->	O
state	pointer
,	O
n	int
,	O
p	int
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
gsl_multifit_fdfsolver_free	function
(	O
s	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to set solver"	pointer
,	O
status	int
,	O
0	int
)	O
;	O
}	O
s	pointer
->	O
fdf	pointer
=	O
NULL	O
;	O
s	pointer
->	O
niter	long
=	O
0	int
;	O
return	O
s	pointer
;	O
}	O
int	O
gsl_multifit_fdfsolver_set	function
(	O
gsl_multifit_fdfsolver	struct
*	O
s	pointer
,	O
gsl_multifit_function_fdf	struct
*	O
f	pointer
,	O
const	O
gsl_vector	struct
*	O
x	double
)	O
{	O
return	O
gsl_multifit_fdfsolver_wset	function
(	O
s	pointer
,	O
f	pointer
,	O
x	double
,	O
NULL	O
)	O
;	O
}	O
int	O
gsl_multifit_fdfsolver_wset	function
(	O
gsl_multifit_fdfsolver	struct
*	O
s	pointer
,	O
gsl_multifit_function_fdf	struct
*	O
f	pointer
,	O
const	O
gsl_vector	struct
*	O
x	double
,	O
const	O
gsl_vector	struct
*	O
wts	pointer
)	O
{	O
const	O
size_t	long
n	int
=	O
s	pointer
->	O
f	pointer
->	O
size	long
;	O
if	O
(	O
n	int
!=	O
f	pointer
->	O
n	int
)	O
{	O
GSL_ERROR	O
(	O
"function size does not match solver"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
s	pointer
->	O
x	double
->	O
size	long
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"vector length does not match solver"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
wts	pointer
!=	O
NULL	O
&&	O
n	int
!=	O
wts	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"weight vector length does not match solver"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
s	pointer
->	O
fdf	pointer
=	O
f	pointer
;	O
gsl_vector_memcpy	function
(	O
s	pointer
->	O
x	double
,	O
x	double
)	O
;	O
s	pointer
->	O
niter	long
=	O
0	int
;	O
if	O
(	O
wts	pointer
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
double	O
wi	double
=	O
gsl_vector_get	function
(	O
wts	pointer
,	O
i	long
)	O
;	O
gsl_vector_set	function
(	O
s	pointer
->	O
sqrt_wts	pointer
,	O
i	long
,	O
sqrt	function
(	O
wi	double
)	O
)	O
;	O
}	O
}	O
else	O
gsl_vector_set_all	function
(	O
s	pointer
->	O
sqrt_wts	pointer
,	O
1.0	int
)	O
;	O
return	O
(	O
s	pointer
->	O
type	pointer
->	O
set	pointer
)	O
(	O
s	pointer
->	O
state	pointer
,	O
s	pointer
->	O
sqrt_wts	pointer
,	O
s	pointer
->	O
fdf	pointer
,	O
s	pointer
->	O
x	double
,	O
s	pointer
->	O
f	pointer
,	O
s	pointer
->	O
dx	pointer
)	O
;	O
}	O
}	O
int	O
gsl_multifit_fdfsolver_iterate	function
(	O
gsl_multifit_fdfsolver	struct
*	O
s	pointer
)	O
{	O
int	O
status	int
=	O
(	O
s	pointer
->	O
type	pointer
->	O
iterate	pointer
)	O
(	O
s	pointer
->	O
state	pointer
,	O
s	pointer
->	O
sqrt_wts	pointer
,	O
s	pointer
->	O
fdf	pointer
,	O
s	pointer
->	O
x	double
,	O
s	pointer
->	O
f	pointer
,	O
s	pointer
->	O
dx	pointer
)	O
;	O
s	pointer
->	O
niter	long
++	O
;	O
return	O
status	int
;	O
}	O
int	O
gsl_multifit_fdfsolver_driver	function
(	O
gsl_multifit_fdfsolver	struct
*	O
s	pointer
,	O
const	O
size_t	long
maxiter	long
,	O
const	O
double	O
xtol	double
,	O
const	O
double	O
gtol	double
,	O
const	O
double	O
ftol	double
,	O
int	O
*	O
info	pointer
)	O
{	O
int	O
status	int
;	O
size_t	long
iter	long
=	O
0	int
;	O
do	O
{	O
status	int
=	O
gsl_multifit_fdfsolver_iterate	function
(	O
s	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
&&	O
status	int
!=	O
GSL_ENOPROG	int
)	O
break	O
;	O
status	int
=	O
gsl_multifit_fdfsolver_test	function
(	O
s	pointer
,	O
xtol	double
,	O
gtol	double
,	O
ftol	double
,	O
info	pointer
)	O
;	O
}	O
while	O
(	O
status	int
==	O
GSL_CONTINUE	int
&&	O
++	O
iter	long
<	O
maxiter	long
)	O
;	O
if	O
(	O
status	int
==	O
GSL_ETOLF	int
||	O
status	int
==	O
GSL_ETOLX	int
||	O
status	int
==	O
GSL_ETOLG	int
)	O
{	O
*	O
info	pointer
=	O
status	int
;	O
status	int
=	O
GSL_SUCCESS	int
;	O
}	O
if	O
(	O
iter	long
>=	O
maxiter	long
&&	O
status	int
!=	O
GSL_SUCCESS	int
)	O
status	int
=	O
GSL_EMAXITER	int
;	O
return	O
status	int
;	O
}	O
int	O
gsl_multifit_fdfsolver_jac	function
(	O
gsl_multifit_fdfsolver	struct
*	O
s	pointer
,	O
gsl_matrix	struct
*	O
J	pointer
)	O
{	O
const	O
size_t	long
n	int
=	O
s	pointer
->	O
f	pointer
->	O
size	long
;	O
const	O
size_t	long
p	int
=	O
s	pointer
->	O
x	double
->	O
size	long
;	O
if	O
(	O
n	int
!=	O
J	pointer
->	O
size1	long
||	O
p	int
!=	O
J	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"Jacobian dimensions do not match solver"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
return	O
(	O
s	pointer
->	O
type	pointer
->	O
jac	pointer
)	O
(	O
s	pointer
->	O
state	pointer
,	O
J	pointer
)	O
;	O
}	O
}	O
void	O
gsl_multifit_fdfsolver_free	function
(	O
gsl_multifit_fdfsolver	struct
*	O
s	pointer
)	O
{	O
RETURN_IF_NULL	O
(	O
s	pointer
)	O
;	O
if	O
(	O
s	pointer
->	O
state	pointer
)	O
{	O
(	O
s	pointer
->	O
type	pointer
->	O
free	function
)	O
(	O
s	pointer
->	O
state	pointer
)	O
;	O
free	function
(	O
s	pointer
->	O
state	pointer
)	O
;	O
}	O
if	O
(	O
s	pointer
->	O
dx	pointer
)	O
gsl_vector_free	function
(	O
s	pointer
->	O
dx	pointer
)	O
;	O
if	O
(	O
s	pointer
->	O
x	double
)	O
gsl_vector_free	function
(	O
s	pointer
->	O
x	double
)	O
;	O
if	O
(	O
s	pointer
->	O
f	pointer
)	O
gsl_vector_free	function
(	O
s	pointer
->	O
f	pointer
)	O
;	O
if	O
(	O
s	pointer
->	O
sqrt_wts	pointer
)	O
gsl_vector_free	function
(	O
s	pointer
->	O
sqrt_wts	pointer
)	O
;	O
if	O
(	O
s	pointer
->	O
g	pointer
)	O
gsl_vector_free	function
(	O
s	pointer
->	O
g	pointer
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
}	O
const	O
char	O
*	O
gsl_multifit_fdfsolver_name	function
(	O
const	O
gsl_multifit_fdfsolver	struct
*	O
s	pointer
)	O
{	O
return	O
s	pointer
->	O
type	pointer
->	O
name	pointer
;	O
}	O
gsl_vector	struct
*	O
gsl_multifit_fdfsolver_position	function
(	O
const	O
gsl_multifit_fdfsolver	struct
*	O
s	pointer
)	O
{	O
return	O
s	pointer
->	O
x	double
;	O
}	O
gsl_vector	struct
*	O
gsl_multifit_fdfsolver_residual	function
(	O
const	O
gsl_multifit_fdfsolver	struct
*	O
s	pointer
)	O
{	O
return	O
s	pointer
->	O
f	pointer
;	O
}	O
size_t	long
gsl_multifit_fdfsolver_niter	function
(	O
const	O
gsl_multifit_fdfsolver	struct
*	O
s	pointer
)	O
{	O
return	O
s	pointer
->	O
niter	long
;	O
}	O
int	O
gsl_multifit_eval_wf	function
(	O
gsl_multifit_function_fdf	struct
*	O
fdf	pointer
,	O
const	O
gsl_vector	struct
*	O
x	double
,	O
const	O
gsl_vector	struct
*	O
swts	pointer
,	O
gsl_vector	struct
*	O
y	double
)	O
{	O
int	O
s	pointer
=	O
(	O
(	O
*	O
(	O
(	O
fdf	pointer
)	O
->	O
f	pointer
)	O
)	O
(	O
x	double
,	O
fdf	pointer
->	O
params	pointer
,	O
y	double
)	O
)	O
;	O
++	O
(	O
fdf	pointer
->	O
nevalf	long
)	O
;	O
if	O
(	O
swts	pointer
)	O
gsl_vector_mul	function
(	O
y	double
,	O
swts	pointer
)	O
;	O
return	O
s	pointer
;	O
}	O
int	O
gsl_multifit_eval_wdf	function
(	O
gsl_multifit_function_fdf	struct
*	O
fdf	pointer
,	O
const	O
gsl_vector	struct
*	O
x	double
,	O
const	O
gsl_vector	struct
*	O
swts	pointer
,	O
gsl_matrix	struct
*	O
dy	pointer
)	O
{	O
int	O
status	int
=	O
(	O
(	O
*	O
(	O
(	O
fdf	pointer
)	O
->	O
df	pointer
)	O
)	O
(	O
x	double
,	O
fdf	pointer
->	O
params	pointer
,	O
dy	pointer
)	O
)	O
;	O
++	O
(	O
fdf	pointer
->	O
nevaldf	long
)	O
;	O
if	O
(	O
swts	pointer
)	O
{	O
const	O
size_t	long
n	int
=	O
swts	pointer
->	O
size	long
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
double	O
swi	double
=	O
gsl_vector_get	function
(	O
swts	pointer
,	O
i	long
)	O
;	O
gsl_vector_view	struct
v	pointer
=	O
gsl_matrix_row	function
(	O
dy	pointer
,	O
i	long
)	O
;	O
gsl_vector_scale	function
(	O
&	O
v	pointer
.	O
vector	struct
,	O
swi	double
)	O
;	O
}	O
}	O
return	O
status	int
;	O
}	O
