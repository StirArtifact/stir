local	O
ulg	O
orig_len	O
;	O
local	O
int	O
max_len	int
;	O
local	O
uch	O
literal	O
[	O
LITERALS	int
]	O
;	O
local	O
int	O
lit_base	int
[	O
MAX_BITLEN	int
+	O
1	int
]	O
;	O
local	O
int	O
leaves	int
[	O
MAX_BITLEN	int
+	O
1	int
]	O
;	O
local	O
int	O
parents	int
[	O
MAX_BITLEN	int
+	O
1	int
]	O
;	O
local	O
int	O
peek_bits	int
;	O
local	O
ulg	O
bitbuf	O
;	O
local	O
int	O
valid	int
;	O
static	O
unsigned	O
char	O
read_byte	O
(	O
void	O
)	O
{	O
int	O
b	int
=	O
get_byte	int
(	O
)	O
;	O
if	O
(	O
b	O
<	O
0	int
)	O
gzip_error	O
(	O
"invalid compressed data -- unexpected end of file"	pointer
)	O
;	O
return	O
b	int
;	O
}	O
local	O
void	O
read_tree	function
(	O
void	O
)	O
;	O
local	O
void	O
build_tree	O
(	O
void	O
)	O
;	O
local	O
void	O
read_tree	O
(	O
)	O
{	O
int	O
len	int
;	O
int	O
base	int
;	O
int	O
n	int
;	O
int	O
max_leaves	int
=	O
1	int
;	O
orig_len	O
=	O
0	O
;	O
for	int
(	O
n	int
=	O
1	int
;	O
n	int
<=	O
4	int
;	O
n	int
++	O
)	O
orig_len	O
=	O
(	O
orig_len	O
<<	O
8	O
)	O
|	O
read_byte	int
(	O
)	int
;	O
max_len	O
=	O
read_byte	int
(	O
)	int
;	O
if	O
(	O
!	int
(	O
0	O
<	O
max_len	int
&&	O
max_len	int
<=	O
MAX_BITLEN	int
)	O
)	O
gzip_error	O
(	O
"invalid compressed data -- "	pointer
"Huffman code bit length out of range"	O
)	O
;	O
n	O
=	O
0	int
;	O
for	int
(	O
len	int
=	O
1	int
;	O
len	int
<=	O
max_len	int
;	O
len	int
++	O
)	O
{	O
leaves	O
[	O
len	int
]	O
=	O
read_byte	O
(	O
)	pointer
;	O
if	O
(	O
max_leaves	int
-	O
(	int
len	int
==	O
max_len	O
)	O
<	O
leaves	int
[	O
len	int
]	O
)	O
gzip_error	O
(	O
"too many leaves in Huffman tree"	pointer
)	O
;	O
max_leaves	O
=	O
(	int
max_leaves	O
-	O
leaves	int
[	O
len	int
]	O
+	O
1	int
)	O
*	O
2	pointer
-	O
1	int
;	O
n	O
+=	O
leaves	int
[	O
len	int
]	O
;	O
}	O
if	O
(	O
LITERALS	int
<=	O
n	int
)	O
{	O
gzip_error	O
(	O
"too many leaves in Huffman tree"	pointer
)	O
;	O
}	O
Trace	O
(	O
(	O
stderr	O
,	O
"orig_len %lu, max_len %d, leaves %d\n"	pointer
,	O
orig_len	int
,	O
max_len	pointer
,	O
n	int
)	O
)	O
;	O
leaves	O
[	O
max_len	int
]	O
++	O
;	O
base	O
=	O
0	int
;	O
for	int
(	O
len	int
=	O
1	int
;	O
len	int
<=	O
max_len	int
;	O
len	int
++	O
)	O
{	O
lit_base	O
[	O
len	int
]	O
=	O
base	O
;	O
for	int
(	O
n	int
=	O
leaves	int
[	O
len	int
]	O
;	O
n	pointer
>	O
0	int
;	O
n	int
--	O
)	O
{	O
literal	O
[	O
base	int
++	O
]	O
=	O
read_byte	O
(	O
)	pointer
;	O
}	O
}	O
leaves	O
[	O
max_len	int
]	O
++	O
;	O
}	O
local	O
void	O
build_tree	function
(	O
)	O
{	O
int	O
nodes	int
=	O
0	int
;	O
int	O
len	int
;	O
uch	O
*	O
prefixp	pointer
;	O
for	O
(	O
len	int
=	O
max_len	int
;	O
len	int
>=	O
1	int
;	O
len	int
--	O
)	O
{	O
nodes	O
>>=	O
1	int
;	O
parents	O
[	O
len	int
]	O
=	O
nodes	pointer
;	O
lit_base	pointer
[	O
len	int
]	O
-=	O
nodes	O
;	O
nodes	pointer
+=	O
leaves	int
[	O
len	int
]	O
;	O
}	pointer
if	O
(	O
(	O
nodes	O
>>	O
1	int
)	O
!=	O
1	O
)	O
gzip_error	O
(	O
"too few leaves in Huffman tree"	pointer
)	O
;	O
peek_bits	O
=	O
MIN	int
(	O
max_len	int
,	O
MAX_PEEK	int
)	O
;	O
prefixp	O
=	O
&	int
prefix_len	pointer
[	O
1	int
<<	O
peek_bits	int
]	O
;	O
for	O
(	O
len	int
=	O
1	int
;	O
len	int
<=	O
peek_bits	int
;	O
len	int
++	O
)	O
{	O
int	O
prefixes	int
=	O
leaves	int
[	O
len	int
]	O
<<	O
(	int
peek_bits	int
-	O
len	int
)	O
;	O
while	O
(	O
prefixes	int
--	O
)	O
*	O
--	pointer
prefixp	O
=	O
(	O
uch	O
)	O
len	O
;	O
}	O
while	O
(	O
prefixp	O
>	O
prefix_len	int
)	O
*	O
--	pointer
prefixp	O
=	O
0	int
;	O
}	O
int	O
unpack	function
(	O
in	O
,	O
out	int
)	O
int	O
in	int
,	O
out	O
;	O
{	O
int	O
len	int
;	O
unsigned	O
eob	O
;	O
register	O
unsigned	O
peek	O
;	O
unsigned	O
peek_mask	O
;	O
ifd	O
=	O
in	int
;	O
ofd	O
=	O
out	int
;	O
read_tree	O
(	O
)	int
;	O
build_tree	O
(	O
)	int
;	O
clear_bitbuf	O
(	O
)	int
;	O
peek_mask	O
=	O
(	int
1	O
<<	O
peek_bits	int
)	O
-	O
1	int
;	O
eob	O
=	O
leaves	int
[	O
max_len	int
]	O
-	O
1	int
;	O
Trace	O
(	O
(	int
stderr	O
,	O
"eob %d %x\n"	pointer
,	O
max_len	int
,	O
eob	int
)	O
)	O
;	O
for	O
(	O
;	int
;	O
)	O
{	O
look_bits	O
(	O
peek	int
,	O
peek_bits	int
,	O
peek_mask	int
)	O
;	O
len	O
=	O
prefix_len	int
[	O
peek	int
]	O
;	O
if	O
(	O
len	O
>	O
0	int
)	O
{	O
peek	O
>>=	O
peek_bits	int
-	O
len	int
;	O
}	int
else	O
{	O
ulg	O
mask	O
=	O
peek_mask	int
;	O
len	O
=	O
peek_bits	int
;	O
while	O
(	O
peek	int
<	O
parents	int
[	O
len	int
]	O
)	O
{	O
len	O
++	O
,	O
mask	O
=	O
(	int
mask	O
<<	O
1	int
)	O
+	O
1	int
;	O
look_bits	O
(	O
peek	int
,	O
len	int
,	O
mask	int
)	O
;	O
}	O
}	O
if	O
(	O
peek	O
==	O
eob	int
&&	O
len	int
==	O
max_len	int
)	O
break	O
;	O
put_ubyte	O
(	O
literal	int
[	O
peek	int
+	O
lit_base	int
[	O
len	int
]	O
]	O
)	O
;	O
Tracev	O
(	O
(	int
stderr	O
,	O
"%02d %04x %c\n"	pointer
,	O
len	int
,	O
peek	int
,	O
literal	int
[	O
peek	int
+	O
lit_base	int
[	O
len	int
]	O
]	O
)	O
)	O
;	O
skip_bits	O
(	O
len	int
)	O
;	O
}	O
flush_window	O
(	O
)	O
;	O
if	O
(	O
orig_len	O
!=	O
(	O
ulg	pointer
)	O
(	O
bytes_out	O
&	O
0xffffffff	int
)	O
)	O
{	O
gzip_error	O
(	O
"invalid compressed data--length error"	pointer
)	O
;	O
}	O
return	O
OK	int
;	O
}	O