static	O
int	O
init_diag_levenberg	function
(	O
const	O
gsl_matrix	O
*	O
J	pointer
,	O
gsl_vector	O
*	O
diag	pointer
)	O
;	O
static	O
int	O
update_diag_levenberg	function
(	O
const	O
gsl_matrix	O
*	O
J	pointer
,	O
gsl_vector	O
*	O
diag	pointer
)	O
;	O
static	O
int	O
init_diag_marquardt	int
(	O
const	O
gsl_matrix	O
*	O
J	pointer
,	O
gsl_vector	O
*	O
diag	pointer
)	O
;	O
static	O
int	O
update_diag_marquardt	int
(	O
const	O
gsl_matrix	O
*	O
J	pointer
,	O
gsl_vector	O
*	O
diag	pointer
)	O
;	O
static	O
int	O
init_diag_more	int
(	O
const	O
gsl_matrix	O
*	O
J	pointer
,	O
gsl_vector	O
*	O
diag	pointer
)	O
;	O
static	O
int	O
update_diag_more	int
(	O
const	O
gsl_matrix	O
*	O
J	pointer
,	O
gsl_vector	O
*	O
diag	pointer
)	O
;	O
static	O
int	O
init_diag_levenberg	int
(	O
const	O
gsl_matrix	O
*	O
J	pointer
,	O
gsl_vector	O
*	O
diag	pointer
)	O
{	O
(	O
void	O
)	O
J	O
;	O
gsl_vector_set_all	O
(	O
diag	O
,	O
1.0	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
update_diag_levenberg	function
(	O
const	O
gsl_matrix	O
*	O
J	pointer
,	O
gsl_vector	O
*	O
diag	pointer
)	O
{	O
(	O
void	O
)	O
J	O
;	O
(	O
void	O
)	O
diag	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
init_diag_marquardt	function
(	O
const	O
gsl_matrix	O
*	O
J	pointer
,	O
gsl_vector	O
*	O
diag	pointer
)	O
{	O
return	O
update_diag_marquardt	int
(	O
J	O
,	O
diag	O
)	O
;	O
}	O
static	O
int	O
update_diag_marquardt	function
(	O
const	O
gsl_matrix	O
*	O
J	pointer
,	O
gsl_vector	O
*	O
diag	pointer
)	O
{	O
const	O
size_t	O
p	O
=	O
J	pointer
->	O
size2	pointer
;	O
size_t	O
j	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
p	int
;	O
j	int
++	O
)	O
{	O
gsl_vector_const_view	O
v	O
=	O
gsl_matrix_const_column	O
(	O
J	pointer
,	O
j	pointer
)	O
;	O
double	O
norm	array
=	O
gsl_blas_dnrm2	O
(	O
&	O
v	pointer
.	O
vector	struct
)	O
;	O
if	O
(	O
norm	O
==	O
0.0	O
)	O
norm	O
=	O
1.0	int
;	O
gsl_vector_set	O
(	O
diag	O
,	O
j	pointer
,	O
norm	O
)	O
;	O
}	O
return	O
GSL_SUCCESS	O
;	O
}	O
static	O
int	O
init_diag_more	function
(	O
const	O
gsl_matrix	O
*	O
J	pointer
,	O
gsl_vector	O
*	O
diag	pointer
)	O
{	O
int	O
status	int
;	O
gsl_vector_set_zero	O
(	O
diag	O
)	O
;	O
status	O
=	O
update_diag_more	int
(	O
J	pointer
,	O
diag	O
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
update_diag_more	function
(	O
const	O
gsl_matrix	O
*	O
J	pointer
,	O
gsl_vector	O
*	O
diag	pointer
)	O
{	O
const	O
size_t	O
p	O
=	O
J	pointer
->	O
size2	pointer
;	O
size_t	O
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	int
<	O
p	int
;	O
j	int
++	O
)	O
{	O
gsl_vector_const_view	O
v	O
=	O
gsl_matrix_const_column	O
(	O
J	pointer
,	O
j	pointer
)	O
;	O
double	O
norm	array
=	O
gsl_blas_dnrm2	O
(	O
&	O
v	pointer
.	O
vector	struct
)	O
;	O
double	O
*	array
diagj	pointer
=	O
gsl_vector_ptr	O
(	O
diag	O
,	O
j	pointer
)	O
;	O
if	O
(	O
norm	O
==	O
0.0	O
)	O
norm	O
=	O
1.0	int
;	O
*	O
diagj	pointer
=	O
GSL_MAX	O
(	O
*	O
diagj	pointer
,	O
norm	O
)	O
;	O
}	O
return	O
GSL_SUCCESS	O
;	O
}	O
static	O
const	O
gsl_multifit_nlinear_scale	O
levenberg_type	O
=	O
{	O
"levenberg"	O
,	O
init_diag_levenberg	O
,	O
update_diag_levenberg	O
}	O
;	O
static	O
const	O
gsl_multifit_nlinear_scale	O
marquardt_type	O
=	O
{	O
"marquardt"	O
,	O
init_diag_marquardt	O
,	O
update_diag_marquardt	O
}	O
;	O
static	O
const	O
gsl_multifit_nlinear_scale	O
more_type	O
=	O
{	O
"more"	O
,	O
init_diag_more	O
,	O
update_diag_more	O
}	O
;	O
const	O
gsl_multifit_nlinear_scale	O
*	O
gsl_multifit_nlinear_scale_levenberg	O
=	O
&	O
levenberg_type	struct
;	O
const	O
gsl_multifit_nlinear_scale	O
*	O
gsl_multifit_nlinear_scale_marquardt	pointer
=	O
&	O
marquardt_type	struct
;	O
const	O
gsl_multifit_nlinear_scale	O
*	O
gsl_multifit_nlinear_scale_more	pointer
=	O
&	O
more_type	struct
;	O