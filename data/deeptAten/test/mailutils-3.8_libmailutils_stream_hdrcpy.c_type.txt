static	O
int	O
excmp	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
return	O
strcmp	int
(	O
*	pointer
(	pointer
const	pointer
char	O
*	O
*	O
)	O
a	pointer
,	O
*	O
(	pointer
const	O
char	O
*	O
*	O
)	O
b	pointer
)	O
;	O
}	O
static	O
char	O
*	O
*	function
make_exclusion_list	pointer
(	O
char	O
*	O
*	pointer
names	pointer
,	O
size_t	O
*	O
pcount	pointer
,	O
size_t	O
*	long
pmax	pointer
)	O
{	O
size_t	O
i	long
,	O
j	long
;	O
size_t	O
count	long
=	O
0	long
;	O
size_t	long
max_len	long
=	O
0	pointer
;	O
char	long
*	O
*	pointer
exlist	pointer
;	O
char	O
*	O
p	pointer
;	O
for	O
(	O
i	long
=	O
0	int
;	O
names	long
[	O
i	long
]	O
;	O
i	O
++	O
)	O
{	O
size_t	O
len	long
=	O
strlen	pointer
(	O
names	pointer
[	O
i	long
]	O
)	O
+	O
1	int
;	O
if	long
(	O
len	long
>	O
max_len	int
)	O
max_len	O
=	O
len	pointer
;	O
}	long
count	O
=	O
i	int
;	O
exlist	O
=	O
calloc	pointer
(	O
count	int
,	O
sizeof	int
(	O
exlist	pointer
[	O
0	int
]	O
)	O
+	O
max_len	int
+	O
1	int
)	O
;	O
if	O
(	O
!	long
exlist	O
)	O
return	O
NULL	O
;	O
p	O
=	O
(	O
char	O
*	O
)	O
(	pointer
exlist	O
+	O
count	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
names	long
[	O
i	int
]	O
;	O
i	O
++	O
,	O
p	O
+=	O
max_len	int
+	O
1	int
)	O
{	O
exlist	O
[	O
i	int
]	O
=	O
p	O
;	O
for	long
(	O
j	long
=	O
0	int
;	O
names	long
[	O
i	int
]	O
[	O
j	int
]	O
;	O
j	pointer
++	O
)	O
p	O
[	O
j	int
]	O
=	O
mu_tolower	O
(	O
names	pointer
[	O
i	int
]	O
[	O
j	int
]	O
)	O
;	O
p	O
[	O
j	int
++	O
]	O
=	O
':'	pointer
;	O
memset	pointer
(	O
p	pointer
+	O
j	int
,	O
0	int
,	O
max_len	int
-	O
j	int
+	O
1	int
)	O
;	O
}	O
qsort	O
(	O
exlist	pointer
,	O
count	pointer
,	O
sizeof	int
(	O
exlist	O
[	O
0	int
]	O
)	O
,	O
excmp	O
)	O
;	O
*	O
pcount	pointer
=	O
count	O
;	O
*	O
pmax	pointer
=	O
max_len	O
;	O
return	O
exlist	O
;	O
}	O
int	O
mu_stream_header_copy	function
(	O
mu_stream_t	O
dst	O
,	O
mu_stream_t	O
src	pointer
,	O
char	O
*	O
*	pointer
exclude_names	pointer
)	O
{	O
int	O
rc	int
;	O
size_t	O
la_max	long
;	O
char	O
*	O
lookahead	pointer
;	O
size_t	O
la_idx	long
=	O
0	pointer
;	O
enum	O
{	long
save_state_init	int
,	O
save_state_expect	O
,	O
save_state_skip	int
,	O
save_state_copy	int
,	O
save_state_stop	int
}	O
state	O
=	O
save_state_init	O
;	O
int	O
i	int
=	O
0	int
;	O
int	long
j	int
=	O
0	int
;	O
char	O
*	O
*	pointer
exclude	pointer
;	O
size_t	O
excount	long
;	O
exclude	O
=	O
make_exclusion_list	O
(	O
exclude_names	pointer
,	O
&	long
excount	pointer
,	O
&	O
la_max	pointer
)	O
;	O
if	O
(	O
!	O
exclude	O
)	O
return	O
ENOMEM	O
;	O
lookahead	O
=	O
malloc	function
(	O
la_max	int
)	O
;	O
if	O
(	O
!	O
lookahead	O
)	O
{	O
free	O
(	O
exclude	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
while	O
(	O
state	O
!=	O
save_state_stop	O
)	O
{	O
char	O
c	O
;	O
size_t	O
n	long
;	O
rc	O
=	O
mu_stream_read	int
(	O
src	pointer
,	O
&	long
c	pointer
,	O
1	O
,	O
&	O
n	pointer
)	O
;	O
if	O
(	O
rc	long
||	O
n	O
==	O
0	O
)	O
break	O
;	O
if	O
(	O
state	long
==	O
save_state_init	O
||	O
state	int
==	O
save_state_expect	int
)	O
{	O
if	O
(	O
la_idx	long
==	O
la_max	O
)	O
state	O
=	O
save_state_copy	int
;	O
else	long
{	O
lookahead	O
[	O
la_idx	int
++	O
]	O
=	O
c	O
;	O
c	O
=	O
mu_tolower	int
(	O
c	O
)	O
;	O
}	O
}	O
switch	O
(	O
state	O
)	O
{	O
case	O
save_state_init	O
:	O
if	O
(	O
c	O
==	O
'\n'	O
)	O
{	O
state	O
=	O
save_state_stop	int
;	O
break	O
;	O
}	O
j	O
=	O
0	int
;	O
state	int
=	O
save_state_copy	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	int
<	O
excount	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
exclude	O
[	O
i	int
]	O
[	O
j	int
]	O
==	O
c	O
)	O
{	O
j	O
++	O
;	O
state	O
=	O
save_state_expect	int
;	O
break	O
;	O
}	O
}	O
break	O
;	O
case	O
save_state_expect	int
:	O
if	O
(	O
exclude	O
[	O
i	int
]	O
[	O
j	int
]	O
!=	O
c	O
)	O
{	O
while	O
(	O
++	int
i	O
<	O
excount	int
)	O
{	O
if	O
(	O
memcmp	int
(	O
exclude	pointer
[	O
i	int
-	O
1	int
]	O
,	O
exclude	pointer
[	O
i	int
]	O
,	O
j	pointer
)	O
)	O
{	O
state	O
=	O
save_state_copy	int
;	O
break	O
;	O
}	O
if	O
(	O
exclude	O
[	O
i	int
]	O
[	O
j	int
]	O
==	O
c	O
)	O
break	O
;	O
}	O
if	O
(	O
i	O
==	O
excount	int
)	O
state	O
=	O
save_state_copy	int
;	O
if	O
(	O
state	O
==	O
save_state_copy	int
)	O
break	O
;	O
}	O
if	O
(	O
c	O
==	O
':'	O
)	O
{	O
la_idx	O
=	O
0	int
;	O
state	O
=	O
save_state_skip	int
;	O
}	O
else	O
{	O
j	O
++	O
;	O
if	O
(	O
exclude	O
[	O
i	int
]	O
[	O
j	int
]	O
==	O
0	O
)	O
state	O
=	O
save_state_copy	int
;	O
}	O
break	O
;	O
case	O
save_state_copy	int
:	O
if	O
(	O
la_idx	O
>	O
0	int
)	O
{	O
rc	O
=	O
mu_stream_write	int
(	O
dst	pointer
,	O
lookahead	int
,	O
la_idx	int
,	O
NULL	int
)	O
;	O
if	O
(	O
rc	O
)	O
break	O
;	O
la_idx	O
=	O
0	int
;	O
}	int
rc	O
=	O
mu_stream_write	function
(	O
dst	pointer
,	O
&	int
c	pointer
,	O
1	O
,	O
NULL	int
)	O
;	O
if	O
(	O
c	O
==	O
'\n'	O
)	O
state	O
=	O
save_state_init	int
;	O
break	O
;	O
case	O
save_state_skip	int
:	O
if	O
(	O
c	O
==	O
'\n'	int
)	O
state	O
=	O
save_state_init	int
;	O
break	O
;	O
default	O
:	O
abort	O
(	O
)	O
;	O
}	O
}	O
if	O
(	O
rc	O
==	O
0	int
)	O
{	O
if	O
(	O
la_idx	int
>	O
1	int
)	O
rc	O
=	O
mu_stream_write	int
(	O
dst	pointer
,	O
lookahead	int
,	O
la_idx	int
-	O
1	int
,	O
NULL	int
)	O
;	O
}	O
free	O
(	O
lookahead	pointer
)	O
;	O
free	O
(	O
exclude	pointer
)	O
;	O
return	O
rc	int
;	O
}	O