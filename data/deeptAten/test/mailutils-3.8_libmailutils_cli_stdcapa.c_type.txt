static	O
void	O
cli_log_facility	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
if	O
(	O
mu_string_to_syslog_facility	function
(	O
arg	pointer
,	O
&	O
mu_log_facility	int
)	O
)	O
mu_parseopt_error	function
(	O
po	pointer
,	O
_	O
(	O
"unknown syslog facility `%s'"	pointer
)	O
,	O
arg	pointer
)	O
;	O
}	O
static	O
int	O
cb_facility	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	array
)	O
{	O
if	O
(	O
mu_cfg_assert_value_type	function
(	O
val	array
,	O
MU_CFG_STRING	int
)	O
)	O
return	O
1	int
;	O
if	O
(	O
mu_string_to_syslog_facility	function
(	O
val	array
->	O
v	pointer
.	O
string	pointer
,	O
&	O
mu_log_facility	int
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"unknown syslog facility `%s'"	pointer
)	O
,	O
val	array
->	O
v	pointer
.	O
string	pointer
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
cb_severity	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	array
)	O
{	O
unsigned	O
n	long
;	O
if	O
(	O
mu_cfg_assert_value_type	function
(	O
val	array
,	O
MU_CFG_STRING	int
)	O
)	O
return	O
1	int
;	O
if	O
(	O
mu_severity_from_string	function
(	O
val	array
->	O
v	pointer
.	O
string	pointer
,	O
&	O
n	long
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"unknown severity `%s'"	pointer
)	O
,	O
val	array
->	O
v	pointer
.	O
string	pointer
)	O
;	O
return	O
1	int
;	O
}	O
mu_log_severity_threshold	int
=	O
n	long
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
mu_cfg_param	struct
logging_cfg	array
[	O
]	O
=	O
{	O
{	O
"syslog"	pointer
,	O
mu_c_bool	int
,	O
&	O
mu_log_syslog	int
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Send diagnostics to syslog."	pointer
)	O
}	O
,	O
{	O
"print-severity"	pointer
,	O
mu_c_bool	int
,	O
&	O
mu_log_print_severity	int
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Print message severity levels."	pointer
)	O
}	O
,	O
{	O
"severity"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_severity	function
,	O
N_	O
(	O
"Output only messages with a severity equal to or greater than "	pointer
"this one."	pointer
)	O
,	O
N_	O
(	O
"arg: debug|info|notice|warning|error|crit|alert|emerg"	pointer
)	O
}	O
,	O
{	O
"facility"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_facility	function
,	O
N_	O
(	O
"Set syslog facility. Arg is one of the following: user, daemon, "	pointer
"auth, authpriv, mail, cron, local0 through local7 (case-insensitive), "	pointer
"or a facility number."	pointer
)	O
,	O
N_	O
(	O
"arg: auth|authpriv|mail|local0-local7|<number>"	pointer
)	O
}	O
,	O
{	O
"session-id"	pointer
,	O
mu_c_bool	int
,	O
&	O
mu_log_session_id	int
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Log session ID"	pointer
)	O
}	O
,	O
{	O
"tag"	pointer
,	O
mu_c_string	int
,	O
&	O
mu_log_tag	pointer
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Tag syslog messages with this string."	pointer
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
struct	O
mu_option	struct
logging_option	array
[	O
]	O
=	O
{	O
{	O
"log-facility"	pointer
,	O
0	int
,	O
N_	O
(	O
"FACILITY"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"output logs to syslog FACILITY"	pointer
)	O
,	O
mu_c_int	int
,	O
&	O
mu_log_facility	int
,	O
cli_log_facility	function
}	O
,	O
MU_OPTION_END	O
}	O
;	O
static	O
void	O
logging_commit	function
(	O
void	O
*	O
unused	pointer
)	O
{	O
if	O
(	O
mu_log_syslog	int
>=	O
0	int
)	O
mu_stdstream_strerr_setup	function
(	O
mu_log_syslog	int
?	O
MU_STRERR_SYSLOG	int
:	O
MU_STRERR_STDERR	int
)	O
;	O
}	O
static	O
void	O
cli_mailer	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
int	O
rc	int
=	O
mu_mailer_set_url_default	function
(	O
arg	pointer
)	O
;	O
if	O
(	O
rc	int
!=	O
0	int
)	O
mu_parseopt_error	function
(	O
po	pointer
,	O
_	O
(	O
"invalid mailer URL `%s': %s"	pointer
)	O
,	O
arg	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
}	O
static	O
struct	O
mu_option	struct
mailer_option	array
[	O
]	O
=	O
{	O
{	O
"mailer"	pointer
,	O
'M'	O
,	O
N_	O
(	O
"MAILER"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"use specified URL as the default mailer"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
cli_mailer	function
}	O
,	O
MU_OPTION_END	O
}	O
;	O
static	O
int	O
cb_mailer	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	array
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
mu_cfg_assert_value_type	function
(	O
val	array
,	O
MU_CFG_STRING	int
)	O
)	O
return	O
1	int
;	O
rc	int
=	O
mu_mailer_set_url_default	function
(	O
val	array
->	O
v	pointer
.	O
string	pointer
)	O
;	O
if	O
(	O
rc	int
!=	O
0	int
)	O
mu_error	function
(	O
_	O
(	O
"%s: invalid mailer URL: %s"	pointer
)	O
,	O
val	array
->	O
v	pointer
.	O
string	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
struct	O
mu_cfg_param	struct
mailer_cfg	array
[	O
]	O
=	O
{	O
{	O
"url"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_mailer	function
,	O
N_	O
(	O
"Use this URL as the default mailer"	pointer
)	O
,	O
N_	O
(	O
"url: string"	pointer
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
void	O
cli_debug_level	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
mu_debug_clear_all	function
(	O
)	O
;	O
mu_debug_parse_spec	function
(	O
arg	pointer
)	O
;	O
}	O
static	O
struct	O
mu_option	struct
debug_option	array
[	O
]	O
=	O
{	O
MU_OPTION_GROUP	O
(	O
N_	O
(	O
"Global debugging settings"	pointer
)	O
)	O
,	O
{	O
"debug-level"	pointer
,	O
0	int
,	O
N_	O
(	O
"LEVEL"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"set Mailutils debugging level"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
cli_debug_level	function
}	O
,	O
{	O
"debug-line-info"	pointer
,	O
0	int
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"show source info with debugging messages"	pointer
)	O
,	O
mu_c_bool	int
,	O
&	O
mu_debug_line_info	int
}	O
,	O
MU_OPTION_END	O
}	O
;	O
static	O
int	O
cb_debug_level	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	array
)	O
{	O
if	O
(	O
mu_cfg_assert_value_type	function
(	O
val	array
,	O
MU_CFG_STRING	int
)	O
)	O
return	O
1	int
;	O
mu_debug_parse_spec	function
(	O
val	array
->	O
v	pointer
.	O
string	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
mu_cfg_param	struct
debug_cfg	array
[	O
]	O
=	O
{	O
{	O
"level"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
&	O
cb_debug_level	function
,	O
N_	O
(	O
"Set Mailutils debugging level. Argument is a semicolon-separated list "	pointer
"of debugging specifications. A simplified specification syntax is:\n"	pointer
"   [!]<category: string>[.<level: string>,<level: string>...]\n"	pointer
"For details, please see the section 3.3 \"Debugging\" of the GNU Mailutils\n"	pointer
"manual, or visit <http://mailutils.org/wiki/Debug_level>."	pointer
)	O
,	O
N_	O
(	O
"arg: string"	pointer
)	O
}	O
,	O
{	O
"line-info"	pointer
,	O
mu_c_bool	int
,	O
&	O
mu_debug_line_info	int
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Prefix debug messages with Mailutils source locations."	pointer
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
int	O
cb_mail_spool	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	array
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
mu_cfg_assert_value_type	function
(	O
val	array
,	O
MU_CFG_STRING	int
)	O
)	O
return	O
1	int
;	O
rc	int
=	O
mu_set_mail_directory	function
(	O
val	array
->	O
v	pointer
.	O
string	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	function
(	O
_	O
(	O
"cannot set mail directory name to `%s': %s"	pointer
)	O
,	O
val	array
->	O
v	pointer
.	O
string	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
cb_mailbox_pattern	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	array
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
mu_cfg_assert_value_type	function
(	O
val	array
,	O
MU_CFG_STRING	int
)	O
)	O
return	O
1	int
;	O
rc	int
=	O
mu_set_mailbox_pattern	function
(	O
val	array
->	O
v	pointer
.	O
string	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	function
(	O
_	O
(	O
"cannot set mailbox pattern to `%s': %s"	pointer
)	O
,	O
val	array
->	O
v	pointer
.	O
string	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
cb_mailbox_type	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	array
)	O
{	O
if	O
(	O
mu_cfg_assert_value_type	function
(	O
val	array
,	O
MU_CFG_STRING	int
)	O
)	O
return	O
1	int
;	O
if	O
(	O
mu_registrar_set_default_scheme	function
(	O
val	array
->	O
v	pointer
.	O
string	pointer
)	O
)	O
mu_error	function
(	O
_	O
(	O
"invalid mailbox type: %s"	pointer
)	O
,	O
val	array
->	O
v	pointer
.	O
string	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
cb_folder	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	array
)	O
{	O
if	O
(	O
mu_cfg_assert_value_type	function
(	O
val	array
,	O
MU_CFG_STRING	int
)	O
)	O
return	O
1	int
;	O
mu_set_folder_directory	function
(	O
val	array
->	O
v	pointer
.	O
string	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
cb_autodetect_accuracy	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	array
)	O
{	O
int	O
v	pointer
;	O
char	O
*	O
errmsg	pointer
;	O
if	O
(	O
mu_cfg_assert_value_type	function
(	O
val	array
,	O
MU_CFG_STRING	int
)	O
)	O
return	O
1	int
;	O
if	O
(	O
strcmp	function
(	O
val	array
->	O
v	pointer
.	O
string	pointer
,	O
"auto"	pointer
)	O
==	O
0	int
)	O
v	pointer
=	O
MU_AUTODETECT_ACCURACY_AUTO	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
val	array
->	O
v	pointer
.	O
string	pointer
,	O
"fast"	pointer
)	O
==	O
0	int
)	O
v	pointer
=	O
MU_AUTODETECT_ACCURACY_FAST	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
val	array
->	O
v	pointer
.	O
string	pointer
,	O
"minimal"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
val	array
->	O
v	pointer
.	O
string	pointer
,	O
"default"	pointer
)	O
==	O
0	int
)	O
v	pointer
=	O
MU_AUTODETECT_ACCURACY_DEFAULT	int
;	O
else	O
{	O
int	O
rc	int
=	O
mu_str_to_c	function
(	O
val	array
->	O
v	pointer
.	O
string	pointer
,	O
mu_c_int	int
,	O
&	O
v	pointer
,	O
&	O
errmsg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"conversion failed: %s"	pointer
)	O
,	O
errmsg	pointer
?	O
errmsg	pointer
:	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
free	function
(	O
errmsg	pointer
)	O
;	O
}	O
else	O
mu_set_autodetect_accuracy	function
(	O
v	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
mu_cfg_param	struct
mailbox_cfg	array
[	O
]	O
=	O
{	O
{	O
"mail-spool"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_mail_spool	function
,	O
N_	O
(	O
"Use specified URL as a mailspool directory."	pointer
)	O
,	O
N_	O
(	O
"url: string"	pointer
)	O
}	O
,	O
{	O
"mailbox-pattern"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_mailbox_pattern	function
,	O
N_	O
(	O
"Create mailbox URL using <pattern>."	pointer
)	O
,	O
N_	O
(	O
"pattern: string"	pointer
)	O
}	O
,	O
{	O
"mailbox-type"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_mailbox_type	function
,	O
N_	O
(	O
"Default mailbox type."	pointer
)	O
,	O
N_	O
(	O
"protocol: string"	pointer
)	O
}	O
,	O
{	O
"folder"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_folder	function
,	O
N_	O
(	O
"Default user mail folder"	pointer
)	O
,	O
N_	O
(	O
"dir: string"	pointer
)	O
}	O
,	O
{	O
"autodetect-accuracy"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_autodetect_accuracy	function
,	O
N_	O
(	O
"Accuracy level of mailbox format autodetection. Argument is either a"	pointer
" decimal number or any of the following constants:\n"	pointer
"  auto    - set accuracy level from the environment variable\n"	pointer
"            MU_AUTODETECT_ACCURACY (default)\n"	pointer
"  fast    - do only a rough estimation of the mailbox format: fastest,\n"	pointer
"            but possibly inaccurate\n"	pointer
"  minimal - good balance between speed and accuracy"	pointer
)	O
,	O
N_	O
(	O
"n: number"	pointer
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
int	O
cb_locker_flags	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	array
)	O
{	O
int	O
flags	int
=	O
0	int
;	O
char	O
const	O
*	O
s	pointer
;	O
if	O
(	O
mu_cfg_assert_value_type	function
(	O
val	array
,	O
MU_CFG_STRING	int
)	O
)	O
return	O
1	int
;	O
for	O
(	O
s	pointer
=	O
val	array
->	O
v	pointer
.	O
string	pointer
;	O
*	O
s	pointer
;	O
s	pointer
++	O
)	O
{	O
switch	O
(	O
*	O
s	pointer
)	O
{	O
case	O
'E'	O
:	O
flags	int
|=	O
MU_LOCKER_EXTERNAL	O
;	O
break	O
;	O
case	O
'R'	O
:	O
flags	int
|=	O
MU_LOCKER_RETRY	int
;	O
break	O
;	O
case	O
'T'	O
:	O
flags	int
|=	O
MU_LOCKER_TIME	int
;	O
break	O
;	O
case	O
'P'	O
:	O
flags	int
|=	O
MU_LOCKER_PID	int
;	O
break	O
;	O
default	O
:	O
mu_error	function
(	O
_	O
(	O
"invalid lock flag `%c'"	pointer
)	O
,	O
*	O
s	pointer
)	O
;	O
}	O
}	O
mu_locker_set_default_flags	function
(	O
flags	int
,	O
mu_locker_assign	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
cb_locker_retry_timeout	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	array
)	O
{	O
int	O
rc	int
;	O
time_t	long
t	long
;	O
char	O
*	O
errmsg	pointer
;	O
if	O
(	O
mu_cfg_assert_value_type	function
(	O
val	array
,	O
MU_CFG_STRING	int
)	O
)	O
return	O
1	int
;	O
rc	int
=	O
mu_str_to_c	function
(	O
val	array
->	O
v	pointer
.	O
string	pointer
,	O
mu_c_time	int
,	O
&	O
t	long
,	O
&	O
errmsg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"conversion failed: %s"	pointer
)	O
,	O
errmsg	pointer
?	O
errmsg	pointer
:	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
free	function
(	O
errmsg	pointer
)	O
;	O
}	O
else	O
{	O
mu_locker_set_default_retry_timeout	function
(	O
t	long
)	O
;	O
mu_locker_set_default_flags	function
(	O
MU_LOCKER_RETRY	int
,	O
mu_locker_set_bit	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
cb_locker_retry_count	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	array
)	O
{	O
int	O
rc	int
;	O
size_t	long
n	long
;	O
char	O
*	O
errmsg	pointer
;	O
if	O
(	O
mu_cfg_assert_value_type	function
(	O
val	array
,	O
MU_CFG_STRING	int
)	O
)	O
return	O
1	int
;	O
rc	int
=	O
mu_str_to_c	function
(	O
val	array
->	O
v	pointer
.	O
string	pointer
,	O
mu_c_size	int
,	O
&	O
n	long
,	O
&	O
errmsg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"conversion failed: %s"	pointer
)	O
,	O
errmsg	pointer
?	O
errmsg	pointer
:	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
free	function
(	O
errmsg	pointer
)	O
;	O
}	O
else	O
{	O
mu_locker_set_default_retry_count	function
(	O
n	long
)	O
;	O
mu_locker_set_default_flags	function
(	O
MU_LOCKER_RETRY	int
,	O
mu_locker_set_bit	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
cb_locker_expire_timeout	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	array
)	O
{	O
int	O
rc	int
;	O
time_t	long
t	long
;	O
char	O
*	O
errmsg	pointer
;	O
if	O
(	O
mu_cfg_assert_value_type	function
(	O
val	array
,	O
MU_CFG_STRING	int
)	O
)	O
return	O
1	int
;	O
rc	int
=	O
mu_str_to_c	function
(	O
val	array
->	O
v	pointer
.	O
string	pointer
,	O
mu_c_time	int
,	O
&	O
t	long
,	O
&	O
errmsg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"conversion failed: %s"	pointer
)	O
,	O
errmsg	pointer
?	O
errmsg	pointer
:	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
free	function
(	O
errmsg	pointer
)	O
;	O
}	O
else	O
{	O
mu_locker_set_default_expire_timeout	function
(	O
t	long
)	O
;	O
mu_locker_set_default_flags	function
(	O
MU_LOCKER_EXTERNAL	O
,	O
mu_locker_set_bit	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
cb_locker_external	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	array
)	O
{	O
if	O
(	O
mu_cfg_assert_value_type	function
(	O
val	array
,	O
MU_CFG_STRING	int
)	O
)	O
return	O
1	int
;	O
mu_locker_set_default_external_program	function
(	O
val	array
->	O
v	pointer
.	O
string	pointer
)	O
;	O
mu_locker_set_default_flags	function
(	O
MU_LOCKER_TIME	int
,	O
mu_locker_set_bit	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
mu_cfg_param	struct
locking_cfg	array
[	O
]	O
=	O
{	O
{	O
"flags"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_locker_flags	function
,	O
N_	O
(	O
"Default locker flags (E=external, R=retry, T=time, P=pid)."	pointer
)	O
,	O
N_	O
(	O
"arg: string"	pointer
)	O
}	O
,	O
{	O
"retry-timeout"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_locker_retry_timeout	function
,	O
N_	O
(	O
"Set timeout for acquiring the lock."	pointer
)	O
,	O
N_	O
(	O
"arg: interval"	pointer
)	O
}	O
,	O
{	O
"retry-count"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_locker_retry_count	function
,	O
N_	O
(	O
"Set the maximum number of times to retry acquiring the lock."	pointer
)	O
,	O
N_	O
(	O
"arg: integer"	pointer
)	O
}	O
,	O
{	O
"expire-timeout"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_locker_expire_timeout	function
,	O
N_	O
(	O
"Expire locks older than this amount of time."	pointer
)	O
,	O
N_	O
(	O
"arg: interval"	pointer
)	O
}	O
,	O
{	O
"external-locker"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_locker_external	function
,	O
N_	O
(	O
"Use external locker program."	pointer
)	O
,	O
N_	O
(	O
"prog: string"	pointer
)	O
}	O
,	O
{	O
NULL	O
,	O
}	O
}	O
;	O
static	O
int	O
cb_email_addr	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	array
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
mu_cfg_assert_value_type	function
(	O
val	array
,	O
MU_CFG_STRING	int
)	O
)	O
return	O
1	int
;	O
rc	int
=	O
mu_set_user_email	function
(	O
val	array
->	O
v	pointer
.	O
string	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	function
(	O
_	O
(	O
"invalid email address `%s': %s"	pointer
)	O
,	O
val	array
->	O
v	pointer
.	O
string	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
cb_email_domain	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	array
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
mu_cfg_assert_value_type	function
(	O
val	array
,	O
MU_CFG_STRING	int
)	O
)	O
return	O
1	int
;	O
rc	int
=	O
mu_set_user_email_domain	function
(	O
val	array
->	O
v	pointer
.	O
string	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	function
(	O
_	O
(	O
"invalid email domain `%s': %s"	pointer
)	O
,	O
val	array
->	O
v	pointer
.	O
string	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
mu_cfg_param	struct
address_cfg	array
[	O
]	O
=	O
{	O
{	O
"email-addr"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_email_addr	function
,	O
N_	O
(	O
"Set the current user email address (default is "	pointer
"loginname@defaultdomain)."	pointer
)	O
,	O
N_	O
(	O
"email: address"	pointer
)	O
}	O
,	O
{	O
"email-domain"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_email_domain	function
,	O
N_	O
(	O
"Set e-mail domain for unqualified user names (default is this host)"	pointer
)	O
,	O
N_	O
(	O
"domain: string"	pointer
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
int	O
cb_authentication	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	array
)	O
{	O
if	O
(	O
val	array
->	O
type	pointer
==	O
MU_CFG_STRING	int
)	O
{	O
if	O
(	O
strcmp	function
(	O
val	array
->	O
v	pointer
.	O
string	pointer
,	O
"clear"	pointer
)	O
==	O
0	int
)	O
mu_authentication_clear_list	function
(	O
)	O
;	O
else	O
mu_authentication_add_module_list	function
(	O
val	array
->	O
v	pointer
.	O
string	pointer
)	O
;	O
}	O
else	O
if	O
(	O
val	array
->	O
type	pointer
==	O
MU_CFG_LIST	int
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
val	array
->	O
v	pointer
.	O
arg	pointer
.	O
c	char
;	O
i	int
++	O
)	O
{	O
if	O
(	O
mu_cfg_assert_value_type	function
(	O
&	O
val	array
->	O
v	pointer
.	O
arg	pointer
.	O
v	pointer
[	O
i	int
]	O
,	O
MU_CFG_STRING	int
)	O
)	O
return	O
1	int
;	O
if	O
(	O
strcmp	function
(	O
val	array
->	O
v	pointer
.	O
arg	pointer
.	O
v	pointer
[	O
i	int
]	O
.	O
v	pointer
.	O
string	pointer
,	O
"clear"	pointer
)	O
==	O
0	int
)	O
mu_authentication_clear_list	function
(	O
)	O
;	O
else	O
mu_authentication_add_module	function
(	O
val	array
->	O
v	pointer
.	O
arg	pointer
.	O
v	pointer
[	O
i	int
]	O
.	O
v	pointer
.	O
string	pointer
)	O
;	O
}	O
}	O
else	O
{	O
mu_error	function
(	O
_	O
(	O
"expected string value"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
cb_authorization	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	array
)	O
{	O
if	O
(	O
val	array
->	O
type	pointer
==	O
MU_CFG_STRING	int
)	O
{	O
if	O
(	O
strcmp	function
(	O
val	array
->	O
v	pointer
.	O
string	pointer
,	O
"clear"	pointer
)	O
==	O
0	int
)	O
mu_authorization_clear_list	function
(	O
)	O
;	O
else	O
mu_authorization_add_module_list	function
(	O
val	array
->	O
v	pointer
.	O
string	pointer
)	O
;	O
}	O
else	O
if	O
(	O
val	array
->	O
type	pointer
==	O
MU_CFG_LIST	int
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
val	array
->	O
v	pointer
.	O
arg	pointer
.	O
c	char
;	O
i	int
++	O
)	O
{	O
if	O
(	O
mu_cfg_assert_value_type	function
(	O
&	O
val	array
->	O
v	pointer
.	O
arg	pointer
.	O
v	pointer
[	O
i	int
]	O
,	O
MU_CFG_STRING	int
)	O
)	O
return	O
1	int
;	O
if	O
(	O
strcmp	function
(	O
val	array
->	O
v	pointer
.	O
arg	pointer
.	O
v	pointer
[	O
i	int
]	O
.	O
v	pointer
.	O
string	pointer
,	O
"clear"	pointer
)	O
==	O
0	int
)	O
mu_authorization_clear_list	function
(	O
)	O
;	O
else	O
mu_authorization_add_module	function
(	O
val	array
->	O
v	pointer
.	O
arg	pointer
.	O
v	pointer
[	O
i	int
]	O
.	O
v	pointer
.	O
string	pointer
)	O
;	O
}	O
}	O
else	O
{	O
mu_error	function
(	O
_	O
(	O
"expected string value"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
mu_cfg_param	struct
mu_auth_param	array
[	O
]	O
=	O
{	O
{	O
"authentication"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_authentication	function
,	O
N_	O
(	O
"Set a list of modules for authentication. Modlist is a "	pointer
"colon-separated list of module names or a word `clear' to "	pointer
"clear the previously set up values."	pointer
)	O
,	O
N_	O
(	O
"modlist"	pointer
)	O
}	O
,	O
{	O
"authorization"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_authorization	function
,	O
N_	O
(	O
"Set a list of modules for authorization. Modlist is a "	pointer
"colon-separated list of module names or a word `clear' to "	pointer
"clear the previously set up values."	pointer
)	O
,	O
N_	O
(	O
"modlist"	pointer
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
int	O
mu_auth_section_parser	function
(	O
enum	O
mu_cfg_section_stage	enum
stage	enum
,	O
const	O
mu_cfg_node_t	struct
*	O
node	pointer
,	O
const	O
char	O
*	O
section_label	pointer
,	O
void	O
*	O
*	O
section_data	pointer
,	O
void	O
*	O
call_data	pointer
,	O
mu_cfg_tree_t	struct
*	O
tree	pointer
)	O
{	O
switch	O
(	O
stage	enum
)	O
{	O
case	O
mu_cfg_section_start	int
:	O
break	O
;	O
case	O
mu_cfg_section_end	int
:	O
mu_auth_finish_setup	function
(	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
struct	O
mu_cli_capa	struct
mu_cli_std_capa	array
[	O
]	O
=	O
{	O
{	O
"mailutils"	pointer
}	O
,	O
{	O
"logging"	pointer
,	O
logging_option	array
,	O
logging_cfg	array
,	O
NULL	O
,	O
logging_commit	function
}	O
,	O
{	O
"mailer"	pointer
,	O
mailer_option	array
,	O
mailer_cfg	array
,	O
NULL	O
,	O
NULL	O
}	O
,	O
{	O
"debug"	pointer
,	O
debug_option	array
,	O
debug_cfg	array
,	O
NULL	O
,	O
NULL	O
}	O
,	O
{	O
"mailbox"	pointer
,	O
NULL	O
,	O
mailbox_cfg	array
,	O
NULL	O
,	O
NULL	O
}	O
,	O
{	O
"locking"	pointer
,	O
NULL	O
,	O
locking_cfg	array
,	O
NULL	O
,	O
NULL	O
}	O
,	O
{	O
"address"	pointer
,	O
NULL	O
,	O
address_cfg	array
,	O
NULL	O
,	O
NULL	O
}	O
,	O
{	O
"auth"	pointer
,	O
NULL	O
,	O
mu_auth_param	array
,	O
mu_auth_section_parser	function
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
void	O
mu_cli_capa_init	function
(	O
void	O
)	O
{	O
size_t	long
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
mu_cli_std_capa	array
[	O
i	int
]	O
.	O
name	pointer
;	O
i	int
++	O
)	O
mu_cli_capa_register	function
(	O
&	O
mu_cli_std_capa	array
[	O
i	int
]	O
)	O
;	O
}	O
