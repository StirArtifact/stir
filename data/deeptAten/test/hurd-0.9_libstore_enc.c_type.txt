void	O
store_enc_init	O
(	O
struct	O
store_enc	struct
*	O
enc	pointer
,	O
mach_port_t	O
*	O
ports	pointer
,	O
mach_msg_type_number_t	O
num_ports	O
,	O
int	O
*	int
ints	pointer
,	O
mach_msg_type_number_t	O
num_ints	O
,	O
off_t	O
*	O
offsets	pointer
,	O
mach_msg_type_number_t	O
num_offsets	O
,	O
char	O
*	O
data	pointer
,	O
mach_msg_type_number_t	O
data_len	O
)	O
{	O
memset	O
(	O
enc	O
,	O
0	pointer
,	O
sizeof	O
(	O
*	O
enc	pointer
)	O
)	O
;	O
enc	O
->	O
ports	pointer
=	O
enc	O
->	O
init_ports	pointer
=	O
ports	O
;	O
enc	pointer
->	O
num_ports	pointer
=	O
num_ports	pointer
;	O
enc	pointer
->	O
ints	pointer
=	O
enc	pointer
->	O
init_ints	pointer
=	O
ints	pointer
;	O
enc	pointer
->	O
num_ints	pointer
=	O
num_ints	pointer
;	O
enc	pointer
->	O
offsets	pointer
=	O
enc	pointer
->	O
init_offsets	pointer
=	O
offsets	pointer
;	O
enc	pointer
->	O
num_offsets	pointer
=	O
num_offsets	pointer
;	O
enc	pointer
->	O
data	pointer
=	O
enc	O
->	O
init_data	pointer
=	O
data	pointer
;	O
enc	pointer
->	O
data_len	pointer
=	O
data_len	pointer
;	O
}	pointer
void	O
store_enc_dealloc	function
(	O
struct	O
store_enc	struct
*	O
enc	pointer
)	O
{	O
if	O
(	O
enc	O
->	O
ports	pointer
&&	O
enc	O
->	O
num_ports	pointer
>	O
0	O
)	O
{	O
while	O
(	O
enc	O
->	O
cur_port	pointer
<	O
enc	O
->	O
num_ports	pointer
)	O
{	O
mach_port_t	O
port	O
=	O
enc	O
->	O
ports	pointer
[	O
enc	int
->	O
cur_port	pointer
++	O
]	O
;	O
if	pointer
(	O
port	O
!=	O
MACH_PORT_NULL	O
)	O
mach_port_deallocate	O
(	O
mach_task_self	pointer
(	O
)	pointer
,	O
port	O
)	O
;	O
}	O
if	O
(	O
enc	O
->	O
ports	pointer
!=	O
enc	O
->	O
init_ports	pointer
)	O
munmap	O
(	O
(	pointer
caddr_t	O
)	O
enc	O
->	O
ports	pointer
,	O
enc	O
->	O
num_ports	pointer
*	O
sizeof	pointer
(	O
*	pointer
enc	pointer
->	O
ports	pointer
)	O
)	O
;	O
}	O
if	O
(	O
enc	O
->	O
ints	pointer
&&	O
enc	O
->	O
num_ints	pointer
>	O
0	O
&&	O
enc	pointer
->	O
ints	pointer
!=	O
enc	O
->	O
init_ints	pointer
)	O
munmap	O
(	O
(	pointer
caddr_t	O
)	O
enc	O
->	O
ints	pointer
,	O
enc	pointer
->	O
num_ints	pointer
*	O
sizeof	pointer
(	O
*	pointer
enc	pointer
->	O
ints	pointer
)	O
)	O
;	O
if	O
(	O
enc	O
->	O
offsets	pointer
&&	O
enc	O
->	O
num_offsets	pointer
>	O
0	O
&&	O
enc	pointer
->	O
offsets	pointer
!=	O
enc	O
->	O
init_offsets	pointer
)	O
munmap	O
(	O
(	pointer
caddr_t	O
)	O
enc	O
->	O
offsets	pointer
,	O
enc	pointer
->	O
num_offsets	pointer
*	O
sizeof	pointer
(	O
*	pointer
enc	pointer
->	O
offsets	pointer
)	O
)	O
;	O
if	O
(	O
enc	O
->	O
data	pointer
&&	O
enc	O
->	O
data_len	pointer
>	O
0	O
&&	O
enc	pointer
->	O
data	pointer
!=	O
enc	O
->	O
init_data	pointer
)	O
munmap	O
(	O
enc	pointer
->	O
data	pointer
,	O
enc	pointer
->	O
data_len	pointer
)	O
;	O
memset	O
(	O
enc	O
,	O
0	pointer
,	O
sizeof	O
(	O
*	pointer
enc	pointer
)	O
)	O
;	O
}	O
void	O
store_enc_return	function
(	O
struct	O
store_enc	struct
*	O
enc	pointer
,	O
mach_port_t	O
*	O
*	pointer
ports	pointer
,	O
mach_msg_type_number_t	O
*	O
num_ports	pointer
,	O
int	O
*	int
*	pointer
ints	pointer
,	O
mach_msg_type_number_t	O
*	O
num_ints	pointer
,	O
off_t	O
*	O
*	pointer
offsets	pointer
,	O
mach_msg_type_number_t	O
*	O
num_offsets	pointer
,	O
char	O
*	O
*	pointer
data	pointer
,	O
mach_msg_type_number_t	O
*	O
data_len	pointer
)	O
{	O
*	O
ports	pointer
=	O
enc	O
->	O
ports	pointer
;	O
*	O
num_ports	pointer
=	O
enc	O
->	O
num_ports	pointer
;	O
*	O
ints	pointer
=	O
enc	O
->	O
ints	pointer
;	O
*	O
num_ints	pointer
=	O
enc	O
->	O
num_ints	pointer
;	O
*	O
offsets	pointer
=	O
enc	O
->	O
offsets	pointer
;	O
*	O
num_offsets	pointer
=	O
enc	O
->	O
num_offsets	pointer
;	O
*	O
data	pointer
=	O
enc	O
->	O
data	pointer
;	O
*	O
data_len	pointer
=	O
enc	O
->	O
data_len	pointer
;	O
}	O