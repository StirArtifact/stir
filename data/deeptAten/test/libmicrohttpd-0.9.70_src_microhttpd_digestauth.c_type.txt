struct	O
DigestAlgorithm	struct
{	O
unsigned	O
int	O
digest_size	long
;	O
void	O
*	O
ctx	pointer
;	O
const	O
char	O
*	O
alg	pointer
;	O
char	O
*	O
sessionkey	pointer
;	O
void	O
(	O
*	O
init	pointer
)	O
(	O
void	O
*	O
ctx	pointer
)	O
;	O
void	O
(	O
*	O
update	pointer
)	O
(	O
void	O
*	O
ctx	pointer
,	O
const	O
uint8_t	char
*	O
data	pointer
,	O
size_t	long
length	int
)	O
;	O
void	O
(	O
*	O
digest	pointer
)	O
(	O
void	O
*	O
ctx	pointer
,	O
uint8_t	char
*	O
digest	pointer
)	O
;	O
}	O
;	O
static	O
void	O
cvthex	function
(	O
const	O
unsigned	O
char	O
*	O
bin	pointer
,	O
size_t	long
len	long
,	O
char	O
*	O
hex	pointer
)	O
{	O
size_t	long
i	long
;	O
unsigned	O
int	O
j	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
len	long
;	O
++	O
i	long
)	O
{	O
j	int
=	O
(	O
bin	pointer
[	O
i	long
]	O
>>	O
4	int
)	O
&	O
0x0f	int
;	O
hex	pointer
[	O
i	long
*	O
2	int
]	O
=	O
(	O
char	O
)	O
(	O
(	O
j	int
<=	O
9	int
)	O
?	O
(	O
j	int
+	O
'0'	O
)	O
:	O
(	O
j	int
-	O
10	int
+	O
'a'	O
)	O
)	O
;	O
j	int
=	O
bin	pointer
[	O
i	long
]	O
&	O
0x0f	int
;	O
hex	pointer
[	O
i	long
*	O
2	int
+	O
1	int
]	O
=	O
(	O
char	O
)	O
(	O
(	O
j	int
<=	O
9	int
)	O
?	O
(	O
j	int
+	O
'0'	O
)	O
:	O
(	O
j	int
-	O
10	int
+	O
'a'	O
)	O
)	O
;	O
}	O
hex	pointer
[	O
len	long
*	O
2	int
]	O
=	O
'\0'	O
;	O
}	O
static	O
void	O
digest_calc_ha1_from_digest	function
(	O
const	O
char	O
*	O
alg	pointer
,	O
struct	O
DigestAlgorithm	struct
*	O
da	pointer
,	O
const	O
uint8_t	char
*	O
digest	pointer
,	O
const	O
char	O
*	O
nonce	array
,	O
const	O
char	O
*	O
cnonce	pointer
)	O
{	O
if	O
(	O
(	O
MHD_str_equal_caseless_	function
(	O
alg	pointer
,	O
"md5-sess"	pointer
)	O
)	O
||	O
(	O
MHD_str_equal_caseless_	function
(	O
alg	pointer
,	O
"sha-256-sess"	pointer
)	O
)	O
)	O
{	O
uint8_t	char
dig	O
[	O
VLA_ARRAY_LEN_DIGEST	O
(	O
da	pointer
->	O
digest_size	long
)	O
]	O
;	O
VLA_CHECK_LEN_DIGEST	O
(	O
da	pointer
->	O
digest_size	long
)	O
;	O
da	pointer
->	O
init	pointer
(	O
da	pointer
->	O
ctx	pointer
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
digest	pointer
,	O
MHD_MD5_DIGEST_SIZE	int
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
":"	pointer
,	O
1	int
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
nonce	array
,	O
strlen	function
(	O
nonce	array
)	O
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
":"	pointer
,	O
1	int
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
cnonce	pointer
,	O
strlen	function
(	O
cnonce	pointer
)	O
)	O
;	O
da	pointer
->	O
digest	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
dig	O
)	O
;	O
cvthex	function
(	O
dig	O
,	O
sizeof	O
(	O
dig	O
)	O
,	O
da	pointer
->	O
sessionkey	pointer
)	O
;	O
}	O
else	O
{	O
cvthex	function
(	O
digest	pointer
,	O
da	pointer
->	O
digest_size	long
,	O
da	pointer
->	O
sessionkey	pointer
)	O
;	O
}	O
}	O
static	O
void	O
digest_calc_ha1_from_user	function
(	O
const	O
char	O
*	O
alg	pointer
,	O
const	O
char	O
*	O
username	pointer
,	O
const	O
char	O
*	O
realm	pointer
,	O
const	O
char	O
*	O
password	pointer
,	O
const	O
char	O
*	O
nonce	array
,	O
const	O
char	O
*	O
cnonce	pointer
,	O
struct	O
DigestAlgorithm	struct
*	O
da	pointer
)	O
{	O
unsigned	O
char	O
ha1	O
[	O
VLA_ARRAY_LEN_DIGEST	O
(	O
da	pointer
->	O
digest_size	long
)	O
]	O
;	O
VLA_CHECK_LEN_DIGEST	O
(	O
da	pointer
->	O
digest_size	long
)	O
;	O
da	pointer
->	O
init	pointer
(	O
da	pointer
->	O
ctx	pointer
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
username	pointer
,	O
strlen	function
(	O
username	pointer
)	O
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
":"	pointer
,	O
1	int
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
realm	pointer
,	O
strlen	function
(	O
realm	pointer
)	O
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
":"	pointer
,	O
1	int
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
password	pointer
,	O
strlen	function
(	O
password	pointer
)	O
)	O
;	O
da	pointer
->	O
digest	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
ha1	O
)	O
;	O
digest_calc_ha1_from_digest	function
(	O
alg	pointer
,	O
da	pointer
,	O
ha1	O
,	O
nonce	array
,	O
cnonce	pointer
)	O
;	O
}	O
static	O
void	O
digest_calc_response	function
(	O
const	O
char	O
*	O
ha1	O
,	O
const	O
char	O
*	O
nonce	array
,	O
const	O
char	O
*	O
noncecount	pointer
,	O
const	O
char	O
*	O
cnonce	pointer
,	O
const	O
char	O
*	O
qop	pointer
,	O
const	O
char	O
*	O
method	pointer
,	O
const	O
char	O
*	O
uri	pointer
,	O
const	O
char	O
*	O
hentity	pointer
,	O
struct	O
DigestAlgorithm	struct
*	O
da	pointer
)	O
{	O
unsigned	O
char	O
ha2	O
[	O
VLA_ARRAY_LEN_DIGEST	O
(	O
da	pointer
->	O
digest_size	long
)	O
]	O
;	O
unsigned	O
char	O
resphash	O
[	O
VLA_ARRAY_LEN_DIGEST	O
(	O
da	pointer
->	O
digest_size	long
)	O
]	O
;	O
(	O
void	O
)	O
hentity	pointer
;	O
VLA_CHECK_LEN_DIGEST	O
(	O
da	pointer
->	O
digest_size	long
)	O
;	O
da	pointer
->	O
init	pointer
(	O
da	pointer
->	O
ctx	pointer
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
method	pointer
,	O
strlen	function
(	O
method	pointer
)	O
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
":"	pointer
,	O
1	int
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
uri	pointer
,	O
strlen	function
(	O
uri	pointer
)	O
)	O
;	O
da	pointer
->	O
digest	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
ha2	O
)	O
;	O
cvthex	function
(	O
ha2	O
,	O
da	pointer
->	O
digest_size	long
,	O
da	pointer
->	O
sessionkey	pointer
)	O
;	O
da	pointer
->	O
init	pointer
(	O
da	pointer
->	O
ctx	pointer
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
ha1	O
,	O
da	pointer
->	O
digest_size	long
*	O
2	int
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
":"	pointer
,	O
1	int
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
nonce	array
,	O
strlen	function
(	O
nonce	array
)	O
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
":"	pointer
,	O
1	int
)	O
;	O
if	O
(	O
'\0'	O
!=	O
*	O
qop	pointer
)	O
{	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
noncecount	pointer
,	O
strlen	function
(	O
noncecount	pointer
)	O
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
":"	pointer
,	O
1	int
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
cnonce	pointer
,	O
strlen	function
(	O
cnonce	pointer
)	O
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
":"	pointer
,	O
1	int
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
qop	pointer
,	O
strlen	function
(	O
qop	pointer
)	O
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
":"	pointer
,	O
1	int
)	O
;	O
}	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
da	pointer
->	O
sessionkey	pointer
,	O
da	pointer
->	O
digest_size	long
*	O
2	int
)	O
;	O
da	pointer
->	O
digest	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
resphash	O
)	O
;	O
cvthex	function
(	O
resphash	O
,	O
sizeof	O
(	O
resphash	O
)	O
,	O
da	pointer
->	O
sessionkey	pointer
)	O
;	O
}	O
static	O
size_t	long
lookup_sub_value	function
(	O
char	O
*	O
dest	short
,	O
size_t	long
size	long
,	O
const	O
char	O
*	O
data	pointer
,	O
const	O
char	O
*	O
key	pointer
)	O
{	O
size_t	long
keylen	long
;	O
size_t	long
len	long
;	O
const	O
char	O
*	O
ptr	pointer
;	O
const	O
char	O
*	O
eq	pointer
;	O
const	O
char	O
*	O
q1	pointer
;	O
const	O
char	O
*	O
q2	pointer
;	O
const	O
char	O
*	O
qn	pointer
;	O
if	O
(	O
0	int
==	O
size	long
)	O
return	O
0	int
;	O
keylen	long
=	O
strlen	function
(	O
key	pointer
)	O
;	O
ptr	pointer
=	O
data	pointer
;	O
while	O
(	O
'\0'	O
!=	O
*	O
ptr	pointer
)	O
{	O
if	O
(	O
NULL	O
==	O
(	O
eq	pointer
=	O
strchr	function
(	O
ptr	pointer
,	O
'='	O
)	O
)	O
)	O
return	O
0	int
;	O
q1	pointer
=	O
eq	pointer
+	O
1	int
;	O
while	O
(	O
' '	O
==	O
*	O
q1	pointer
)	O
q1	pointer
++	O
;	O
if	O
(	O
'\"'	O
!=	O
*	O
q1	pointer
)	O
{	O
q2	pointer
=	O
strchr	function
(	O
q1	pointer
,	O
','	O
)	O
;	O
qn	pointer
=	O
q2	pointer
;	O
}	O
else	O
{	O
q1	pointer
++	O
;	O
q2	pointer
=	O
strchr	function
(	O
q1	pointer
,	O
'\"'	O
)	O
;	O
if	O
(	O
NULL	O
==	O
q2	pointer
)	O
return	O
0	int
;	O
qn	pointer
=	O
q2	pointer
+	O
1	int
;	O
}	O
if	O
(	O
(	O
MHD_str_equal_caseless_n_	function
(	O
ptr	pointer
,	O
key	pointer
,	O
keylen	long
)	O
)	O
&&	O
(	O
eq	pointer
==	O
&	O
ptr	pointer
[	O
keylen	long
]	O
)	O
)	O
{	O
if	O
(	O
NULL	O
==	O
q2	pointer
)	O
{	O
len	long
=	O
strlen	function
(	O
q1	pointer
)	O
+	O
1	int
;	O
if	O
(	O
size	long
>	O
len	long
)	O
size	long
=	O
len	long
;	O
size	long
--	O
;	O
memcpy	function
(	O
dest	short
,	O
q1	pointer
,	O
size	long
)	O
;	O
dest	short
[	O
size	long
]	O
=	O
'\0'	O
;	O
return	O
size	long
;	O
}	O
else	O
{	O
if	O
(	O
size	long
>	O
(	O
size_t	long
)	O
(	O
(	O
q2	pointer
-	O
q1	pointer
)	O
+	O
1	int
)	O
)	O
size	long
=	O
(	O
q2	pointer
-	O
q1	pointer
)	O
+	O
1	int
;	O
size	long
--	O
;	O
memcpy	function
(	O
dest	short
,	O
q1	pointer
,	O
size	long
)	O
;	O
dest	short
[	O
size	long
]	O
=	O
'\0'	O
;	O
return	O
size	long
;	O
}	O
}	O
if	O
(	O
NULL	O
==	O
qn	pointer
)	O
return	O
0	int
;	O
ptr	pointer
=	O
strchr	function
(	O
qn	pointer
,	O
','	O
)	O
;	O
if	O
(	O
NULL	O
==	O
ptr	pointer
)	O
return	O
0	int
;	O
ptr	pointer
++	O
;	O
while	O
(	O
' '	O
==	O
*	O
ptr	pointer
)	O
ptr	pointer
++	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
check_nonce_nc	function
(	O
struct	O
MHD_Connection	struct
*	O
connection	pointer
,	O
const	O
char	O
*	O
nonce	array
,	O
uint64_t	long
nc	long
)	O
{	O
struct	O
MHD_Daemon	struct
*	O
daemon	function
=	O
connection	pointer
->	O
daemon	function
;	O
struct	O
MHD_NonceNc	struct
*	O
nn	pointer
;	O
uint32_t	int
off	long
;	O
uint32_t	int
mod	int
;	O
const	O
char	O
*	O
np	pointer
;	O
size_t	long
noncelen	long
;	O
noncelen	long
=	O
strlen	function
(	O
nonce	array
)	O
+	O
1	int
;	O
if	O
(	O
MAX_NONCE_LENGTH	int
<	O
noncelen	long
)	O
return	O
MHD_NO	int
;	O
mod	int
=	O
daemon	function
->	O
nonce_nc_size	int
;	O
if	O
(	O
0	int
==	O
mod	int
)	O
return	O
MHD_NO	int
;	O
off	long
=	O
0	int
;	O
np	pointer
=	O
nonce	array
;	O
while	O
(	O
'\0'	O
!=	O
*	O
np	pointer
)	O
{	O
off	long
=	O
(	O
off	long
<<	O
8	int
)	O
|	O
(	O
*	O
np	pointer
^	O
(	O
off	long
>>	O
24	int
)	O
)	O
;	O
np	pointer
++	O
;	O
}	O
off	long
=	O
off	long
%	O
mod	int
;	O
nn	pointer
=	O
&	O
daemon	function
->	O
nnc	pointer
[	O
off	long
]	O
;	O
MHD_mutex_lock_chk_	O
(	O
&	O
daemon	function
->	O
nnc_lock	union
)	O
;	O
if	O
(	O
0	int
==	O
nc	long
)	O
{	O
memcpy	function
(	O
nn	pointer
->	O
nonce	array
,	O
nonce	array
,	O
noncelen	long
)	O
;	O
nn	pointer
->	O
nc	long
=	O
0	int
;	O
nn	pointer
->	O
nmask	long
=	O
0	int
;	O
MHD_mutex_unlock_chk_	O
(	O
&	O
daemon	function
->	O
nnc_lock	union
)	O
;	O
return	O
MHD_YES	int
;	O
}	O
if	O
(	O
(	O
nc	long
<	O
nn	pointer
->	O
nc	long
)	O
&&	O
(	O
nc	long
+	O
64	int
>	O
nc	long
)	O
&&	O
(	O
nc	long
+	O
64	int
>=	O
nn	pointer
->	O
nc	long
)	O
&&	O
(	O
0	int
==	O
(	O
(	O
1LLU	int
<<	O
(	O
nn	pointer
->	O
nc	long
-	O
nc	long
-	O
1	int
)	O
)	O
&	O
nn	pointer
->	O
nmask	long
)	O
)	O
)	O
{	O
nn	pointer
->	O
nmask	long
|=	O
(	O
1LLU	int
<<	O
(	O
nn	pointer
->	O
nc	long
-	O
nc	long
-	O
1	int
)	O
)	O
;	O
MHD_mutex_unlock_chk_	O
(	O
&	O
daemon	function
->	O
nnc_lock	union
)	O
;	O
return	O
MHD_YES	int
;	O
}	O
if	O
(	O
(	O
nc	long
<=	O
nn	pointer
->	O
nc	long
)	O
||	O
(	O
0	int
!=	O
strcmp	function
(	O
nn	pointer
->	O
nonce	array
,	O
nonce	array
)	O
)	O
)	O
{	O
MHD_mutex_unlock_chk_	O
(	O
&	O
daemon	function
->	O
nnc_lock	union
)	O
;	O
MHD_DLOG	function
(	O
daemon	function
,	O
_	O
(	O
"Stale nonce received.  If this happens a lot, you should probably increase the size of the nonce array.\n"	pointer
)	O
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
if	O
(	O
64	int
>	O
nc	long
-	O
nn	pointer
->	O
nc	long
)	O
nn	pointer
->	O
nmask	long
<<=	O
(	O
nc	long
-	O
nn	pointer
->	O
nc	long
)	O
;	O
else	O
nn	pointer
->	O
nmask	long
=	O
0	int
;	O
nn	pointer
->	O
nc	long
=	O
nc	long
;	O
MHD_mutex_unlock_chk_	O
(	O
&	O
daemon	function
->	O
nnc_lock	union
)	O
;	O
return	O
MHD_YES	int
;	O
}	O
char	O
*	O
MHD_digest_auth_get_username	function
(	O
struct	O
MHD_Connection	struct
*	O
connection	pointer
)	O
{	O
size_t	long
len	long
;	O
char	O
user	array
[	O
MAX_USERNAME_LENGTH	int
]	O
;	O
const	O
char	O
*	O
header	pointer
;	O
if	O
(	O
MHD_NO	int
==	O
MHD_lookup_connection_value_n	function
(	O
connection	pointer
,	O
MHD_HEADER_KIND	int
,	O
MHD_HTTP_HEADER_AUTHORIZATION	pointer
,	O
MHD_STATICSTR_LEN_	O
(	O
MHD_HTTP_HEADER_AUTHORIZATION	pointer
)	O
,	O
&	O
header	pointer
,	O
NULL	O
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
0	int
!=	O
strncmp	function
(	O
header	pointer
,	O
_BASE	pointer
,	O
MHD_STATICSTR_LEN_	O
(	O
_BASE	pointer
)	O
)	O
)	O
return	O
NULL	O
;	O
header	pointer
+=	O
MHD_STATICSTR_LEN_	O
(	O
_BASE	pointer
)	O
;	O
if	O
(	O
0	int
==	O
(	O
len	long
=	O
lookup_sub_value	function
(	O
user	array
,	O
sizeof	O
(	O
user	array
)	O
,	O
header	pointer
,	O
"username"	pointer
)	O
)	O
)	O
return	O
NULL	O
;	O
return	O
strdup	function
(	O
user	array
)	O
;	O
}	O
static	O
void	O
calculate_nonce	function
(	O
uint32_t	int
nonce_time	int
,	O
const	O
char	O
*	O
method	pointer
,	O
const	O
char	O
*	O
rnd	pointer
,	O
size_t	long
rnd_size	long
,	O
const	O
char	O
*	O
uri	pointer
,	O
const	O
char	O
*	O
realm	pointer
,	O
struct	O
DigestAlgorithm	struct
*	O
da	pointer
,	O
char	O
*	O
nonce	array
)	O
{	O
unsigned	O
char	O
timestamp	array
[	O
TIMESTAMP_BIN_SIZE	int
]	O
;	O
unsigned	O
char	O
tmpnonce	O
[	O
VLA_ARRAY_LEN_DIGEST	O
(	O
da	pointer
->	O
digest_size	long
)	O
]	O
;	O
char	O
timestamphex	array
[	O
TIMESTAMP_BIN_SIZE	int
*	O
2	int
+	O
1	int
]	O
;	O
VLA_CHECK_LEN_DIGEST	O
(	O
da	pointer
->	O
digest_size	long
)	O
;	O
da	pointer
->	O
init	pointer
(	O
da	pointer
->	O
ctx	pointer
)	O
;	O
timestamp	array
[	O
0	int
]	O
=	O
(	O
unsigned	O
char	O
)	O
(	O
(	O
nonce_time	int
&	O
0xff000000	int
)	O
>>	O
0x18	int
)	O
;	O
timestamp	array
[	O
1	int
]	O
=	O
(	O
unsigned	O
char	O
)	O
(	O
(	O
nonce_time	int
&	O
0x00ff0000	int
)	O
>>	O
0x10	int
)	O
;	O
timestamp	array
[	O
2	int
]	O
=	O
(	O
unsigned	O
char	O
)	O
(	O
(	O
nonce_time	int
&	O
0x0000ff00	int
)	O
>>	O
0x08	int
)	O
;	O
timestamp	array
[	O
3	int
]	O
=	O
(	O
unsigned	O
char	O
)	O
(	O
(	O
nonce_time	int
&	O
0x000000ff	int
)	O
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
timestamp	array
,	O
sizeof	O
(	O
timestamp	array
)	O
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
":"	pointer
,	O
1	int
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
method	pointer
,	O
strlen	function
(	O
method	pointer
)	O
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
":"	pointer
,	O
1	int
)	O
;	O
if	O
(	O
rnd_size	long
>	O
0	int
)	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
rnd	pointer
,	O
rnd_size	long
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
":"	pointer
,	O
1	int
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
uri	pointer
,	O
strlen	function
(	O
uri	pointer
)	O
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
":"	pointer
,	O
1	int
)	O
;	O
da	pointer
->	O
update	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
realm	pointer
,	O
strlen	function
(	O
realm	pointer
)	O
)	O
;	O
da	pointer
->	O
digest	pointer
(	O
da	pointer
->	O
ctx	pointer
,	O
tmpnonce	O
)	O
;	O
cvthex	function
(	O
tmpnonce	O
,	O
sizeof	O
(	O
tmpnonce	O
)	O
,	O
nonce	array
)	O
;	O
cvthex	function
(	O
timestamp	array
,	O
sizeof	O
(	O
timestamp	array
)	O
,	O
timestamphex	array
)	O
;	O
strncat	function
(	O
nonce	array
,	O
timestamphex	array
,	O
8	int
)	O
;	O
}	O
static	O
int	O
test_header	function
(	O
struct	O
MHD_Connection	struct
*	O
connection	pointer
,	O
const	O
char	O
*	O
key	pointer
,	O
size_t	long
key_size	long
,	O
const	O
char	O
*	O
value	long
,	O
size_t	long
value_size	long
,	O
enum	O
MHD_ValueKind	enum
kind	enum
)	O
{	O
struct	O
MHD_HTTP_Header	struct
*	O
pos	long
;	O
for	O
(	O
pos	long
=	O
connection	pointer
->	O
headers_received	pointer
;	O
NULL	O
!=	O
pos	long
;	O
pos	long
=	O
pos	long
->	O
next	pointer
)	O
{	O
if	O
(	O
kind	enum
!=	O
pos	long
->	O
kind	enum
)	O
continue	O
;	O
if	O
(	O
key_size	long
!=	O
pos	long
->	O
header_size	long
)	O
continue	O
;	O
if	O
(	O
value_size	long
!=	O
pos	long
->	O
value_size	long
)	O
continue	O
;	O
if	O
(	O
0	int
!=	O
memcmp	function
(	O
key	pointer
,	O
pos	long
->	O
header	pointer
,	O
key_size	long
)	O
)	O
continue	O
;	O
if	O
(	O
(	O
NULL	O
==	O
value	long
)	O
&&	O
(	O
NULL	O
==	O
pos	long
->	O
value	long
)	O
)	O
return	O
MHD_YES	int
;	O
if	O
(	O
(	O
NULL	O
==	O
value	long
)	O
||	O
(	O
NULL	O
==	O
pos	long
->	O
value	long
)	O
||	O
(	O
0	int
!=	O
memcmp	function
(	O
value	long
,	O
pos	long
->	O
value	long
,	O
value_size	long
)	O
)	O
)	O
continue	O
;	O
return	O
MHD_YES	int
;	O
}	O
return	O
MHD_NO	int
;	O
}	O
static	O
int	O
check_argument_match	function
(	O
struct	O
MHD_Connection	struct
*	O
connection	pointer
,	O
const	O
char	O
*	O
args	pointer
)	O
{	O
struct	O
MHD_HTTP_Header	struct
*	O
pos	long
;	O
char	O
*	O
argb	pointer
;	O
unsigned	O
int	O
num_headers	pointer
;	O
int	O
ret	int
;	O
argb	pointer
=	O
strdup	function
(	O
args	pointer
)	O
;	O
if	O
(	O
NULL	O
==	O
argb	pointer
)	O
{	O
MHD_DLOG	function
(	O
connection	pointer
->	O
daemon	function
,	O
_	O
(	O
"Failed to allocate memory for copy of URI arguments\n"	pointer
)	O
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
ret	int
=	O
MHD_parse_arguments_	function
(	O
connection	pointer
,	O
MHD_GET_ARGUMENT_KIND	int
,	O
argb	pointer
,	O
&	O
test_header	function
,	O
&	O
num_headers	pointer
)	O
;	O
free	function
(	O
argb	pointer
)	O
;	O
if	O
(	O
MHD_YES	int
!=	O
ret	int
)	O
{	O
return	O
MHD_NO	int
;	O
}	O
for	O
(	O
pos	long
=	O
connection	pointer
->	O
headers_received	pointer
;	O
NULL	O
!=	O
pos	long
;	O
pos	long
=	O
pos	long
->	O
next	pointer
)	O
{	O
if	O
(	O
MHD_GET_ARGUMENT_KIND	int
!=	O
pos	long
->	O
kind	enum
)	O
continue	O
;	O
num_headers	pointer
--	O
;	O
}	O
if	O
(	O
0	int
!=	O
num_headers	pointer
)	O
{	O
return	O
MHD_NO	int
;	O
}	O
return	O
MHD_YES	int
;	O
}	O
static	O
int	O
digest_auth_check_all	function
(	O
struct	O
MHD_Connection	struct
*	O
connection	pointer
,	O
struct	O
DigestAlgorithm	struct
*	O
da	pointer
,	O
const	O
char	O
*	O
realm	pointer
,	O
const	O
char	O
*	O
username	pointer
,	O
const	O
char	O
*	O
password	pointer
,	O
const	O
uint8_t	char
*	O
digest	pointer
,	O
unsigned	O
int	O
nonce_timeout	int
)	O
{	O
struct	O
MHD_Daemon	struct
*	O
daemon	function
=	O
connection	pointer
->	O
daemon	function
;	O
size_t	long
len	long
;	O
const	O
char	O
*	O
header	pointer
;	O
char	O
nonce	array
[	O
MAX_NONCE_LENGTH	int
]	O
;	O
char	O
cnonce	pointer
[	O
MAX_NONCE_LENGTH	int
]	O
;	O
char	O
ha1	O
[	O
VLA_ARRAY_LEN_DIGEST	O
(	O
da	pointer
->	O
digest_size	long
)	O
*	O
2	int
+	O
1	int
]	O
;	O
char	O
qop	pointer
[	O
15	int
]	O
;	O
char	O
nc	long
[	O
20	int
]	O
;	O
char	O
response	pointer
[	O
MAX_AUTH_RESPONSE_LENGTH	int
]	O
;	O
const	O
char	O
*	O
hentity	pointer
=	O
NULL	O
;	O
char	O
noncehashexp	O
[	O
NONCE_STD_LEN	O
(	O
VLA_ARRAY_LEN_DIGEST	O
(	O
da	pointer
->	O
digest_size	long
)	O
)	O
+	O
1	int
]	O
;	O
uint32_t	int
nonce_time	int
;	O
uint32_t	int
t	int
;	O
size_t	long
left	long
;	O
uint64_t	long
nci	long
;	O
char	O
*	O
qmark	pointer
;	O
VLA_CHECK_LEN_DIGEST	O
(	O
da	pointer
->	O
digest_size	long
)	O
;	O
if	O
(	O
MHD_NO	int
==	O
MHD_lookup_connection_value_n	function
(	O
connection	pointer
,	O
MHD_HEADER_KIND	int
,	O
MHD_HTTP_HEADER_AUTHORIZATION	pointer
,	O
MHD_STATICSTR_LEN_	O
(	O
MHD_HTTP_HEADER_AUTHORIZATION	pointer
)	O
,	O
&	O
header	pointer
,	O
NULL	O
)	O
)	O
return	O
MHD_NO	int
;	O
if	O
(	O
0	int
!=	O
strncmp	function
(	O
header	pointer
,	O
_BASE	pointer
,	O
MHD_STATICSTR_LEN_	O
(	O
_BASE	pointer
)	O
)	O
)	O
return	O
MHD_NO	int
;	O
header	pointer
+=	O
MHD_STATICSTR_LEN_	O
(	O
_BASE	pointer
)	O
;	O
left	long
=	O
strlen	function
(	O
header	pointer
)	O
;	O
{	O
char	O
un	array
[	O
MAX_USERNAME_LENGTH	int
]	O
;	O
len	long
=	O
lookup_sub_value	function
(	O
un	array
,	O
sizeof	O
(	O
un	array
)	O
,	O
header	pointer
,	O
"username"	pointer
)	O
;	O
if	O
(	O
(	O
0	int
==	O
len	long
)	O
||	O
(	O
0	int
!=	O
strcmp	function
(	O
username	pointer
,	O
un	array
)	O
)	O
)	O
return	O
MHD_NO	int
;	O
left	long
-=	O
strlen	function
(	O
"username"	pointer
)	O
+	O
len	long
;	O
}	O
{	O
char	O
r	array
[	O
MAX_REALM_LENGTH	int
]	O
;	O
len	long
=	O
lookup_sub_value	function
(	O
r	array
,	O
sizeof	O
(	O
r	array
)	O
,	O
header	pointer
,	O
"realm"	pointer
)	O
;	O
if	O
(	O
(	O
0	int
==	O
len	long
)	O
||	O
(	O
0	int
!=	O
strcmp	function
(	O
realm	pointer
,	O
r	array
)	O
)	O
)	O
return	O
MHD_NO	int
;	O
left	long
-=	O
strlen	function
(	O
"realm"	pointer
)	O
+	O
len	long
;	O
}	O
if	O
(	O
0	int
==	O
(	O
len	long
=	O
lookup_sub_value	function
(	O
nonce	array
,	O
sizeof	O
(	O
nonce	array
)	O
,	O
header	pointer
,	O
"nonce"	pointer
)	O
)	O
)	O
return	O
MHD_NO	int
;	O
left	long
-=	O
strlen	function
(	O
"nonce"	pointer
)	O
+	O
len	long
;	O
if	O
(	O
left	long
>	O
32	int
*	O
1024	int
)	O
{	O
return	O
MHD_NO	int
;	O
}	O
if	O
(	O
TIMESTAMP_BIN_SIZE	int
*	O
2	int
!=	O
MHD_strx_to_uint32_n_	function
(	O
nonce	array
+	O
len	long
-	O
TIMESTAMP_BIN_SIZE	int
*	O
2	int
,	O
TIMESTAMP_BIN_SIZE	int
*	O
2	int
,	O
&	O
nonce_time	int
)	O
)	O
{	O
MHD_DLOG	function
(	O
daemon	function
,	O
_	O
(	O
"Authentication failed, invalid timestamp format.\n"	pointer
)	O
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
t	int
=	O
(	O
uint32_t	int
)	O
MHD_monotonic_sec_counter	function
(	O
)	O
;	O
if	O
(	O
(	O
t	int
>	O
nonce_time	int
+	O
nonce_timeout	int
)	O
||	O
(	O
nonce_time	int
+	O
nonce_timeout	int
<	O
nonce_time	int
)	O
)	O
{	O
return	O
MHD_INVALID_NONCE	O
;	O
}	O
calculate_nonce	function
(	O
nonce_time	int
,	O
connection	pointer
->	O
method	pointer
,	O
daemon	function
->	O
digest_auth_random	pointer
,	O
daemon	function
->	O
digest_auth_rand_size	long
,	O
connection	pointer
->	O
url	pointer
,	O
realm	pointer
,	O
da	pointer
,	O
noncehashexp	O
)	O
;	O
if	O
(	O
0	int
!=	O
strcmp	function
(	O
nonce	array
,	O
noncehashexp	O
)	O
)	O
{	O
return	O
MHD_INVALID_NONCE	O
;	O
}	O
if	O
(	O
(	O
0	int
==	O
lookup_sub_value	function
(	O
cnonce	pointer
,	O
sizeof	O
(	O
cnonce	pointer
)	O
,	O
header	pointer
,	O
"cnonce"	pointer
)	O
)	O
||	O
(	O
0	int
==	O
lookup_sub_value	function
(	O
qop	pointer
,	O
sizeof	O
(	O
qop	pointer
)	O
,	O
header	pointer
,	O
"qop"	pointer
)	O
)	O
||	O
(	O
(	O
0	int
!=	O
strcmp	function
(	O
qop	pointer
,	O
"auth"	pointer
)	O
)	O
&&	O
(	O
0	int
!=	O
strcmp	function
(	O
qop	pointer
,	O
""	pointer
)	O
)	O
)	O
||	O
(	O
0	int
==	O
(	O
len	long
=	O
lookup_sub_value	function
(	O
nc	long
,	O
sizeof	O
(	O
nc	long
)	O
,	O
header	pointer
,	O
"nc"	pointer
)	O
)	O
)	O
||	O
(	O
0	int
==	O
lookup_sub_value	function
(	O
response	pointer
,	O
sizeof	O
(	O
response	pointer
)	O
,	O
header	pointer
,	O
"response"	pointer
)	O
)	O
)	O
{	O
MHD_DLOG	function
(	O
daemon	function
,	O
_	O
(	O
"Authentication failed, invalid format.\n"	pointer
)	O
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
if	O
(	O
len	long
!=	O
MHD_strx_to_uint64_n_	function
(	O
nc	long
,	O
len	long
,	O
&	O
nci	long
)	O
)	O
{	O
MHD_DLOG	function
(	O
daemon	function
,	O
_	O
(	O
"Authentication failed, invalid nc format.\n"	pointer
)	O
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
if	O
(	O
MHD_YES	int
!=	O
check_nonce_nc	function
(	O
connection	pointer
,	O
nonce	array
,	O
nci	long
)	O
)	O
{	O
return	O
MHD_NO	int
;	O
}	O
{	O
char	O
*	O
uri	pointer
;	O
uri	pointer
=	O
malloc	function
(	O
left	long
+	O
1	int
)	O
;	O
if	O
(	O
NULL	O
==	O
uri	pointer
)	O
{	O
MHD_DLOG	function
(	O
daemon	function
,	O
_	O
(	O
"Failed to allocate memory for auth header processing\n"	pointer
)	O
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
if	O
(	O
0	int
==	O
lookup_sub_value	function
(	O
uri	pointer
,	O
left	long
+	O
1	int
,	O
header	pointer
,	O
"uri"	pointer
)	O
)	O
{	O
free	function
(	O
uri	pointer
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
if	O
(	O
NULL	O
!=	O
digest	pointer
)	O
{	O
digest_calc_ha1_from_digest	function
(	O
da	pointer
->	O
alg	pointer
,	O
da	pointer
,	O
digest	pointer
,	O
nonce	array
,	O
cnonce	pointer
)	O
;	O
}	O
else	O
{	O
mhd_assert	O
(	O
NULL	O
!=	O
password	pointer
)	O
;	O
digest_calc_ha1_from_user	function
(	O
da	pointer
->	O
alg	pointer
,	O
username	pointer
,	O
realm	pointer
,	O
password	pointer
,	O
nonce	array
,	O
cnonce	pointer
,	O
da	pointer
)	O
;	O
}	O
memcpy	function
(	O
ha1	O
,	O
da	pointer
->	O
sessionkey	pointer
,	O
sizeof	O
(	O
ha1	O
)	O
)	O
;	O
digest_calc_response	function
(	O
ha1	O
,	O
nonce	array
,	O
nc	long
,	O
cnonce	pointer
,	O
qop	pointer
,	O
connection	pointer
->	O
method	pointer
,	O
uri	pointer
,	O
hentity	pointer
,	O
da	pointer
)	O
;	O
qmark	pointer
=	O
strchr	function
(	O
uri	pointer
,	O
'?'	O
)	O
;	O
if	O
(	O
NULL	O
!=	O
qmark	pointer
)	O
*	O
qmark	pointer
=	O
'\0'	O
;	O
daemon	function
->	O
unescape_callback	pointer
(	O
daemon	function
->	O
unescape_callback_cls	pointer
,	O
connection	pointer
,	O
uri	pointer
)	O
;	O
if	O
(	O
0	int
!=	O
strcmp	function
(	O
uri	pointer
,	O
connection	pointer
->	O
url	pointer
)	O
)	O
{	O
MHD_DLOG	function
(	O
daemon	function
,	O
_	O
(	O
"Authentication failed, URI does not match.\n"	pointer
)	O
)	O
;	O
free	function
(	O
uri	pointer
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
{	O
const	O
char	O
*	O
args	pointer
=	O
qmark	pointer
;	O
if	O
(	O
NULL	O
==	O
args	pointer
)	O
args	pointer
=	O
""	pointer
;	O
else	O
args	pointer
++	O
;	O
if	O
(	O
MHD_YES	int
!=	O
check_argument_match	function
(	O
connection	pointer
,	O
args	pointer
)	O
)	O
{	O
MHD_DLOG	function
(	O
daemon	function
,	O
_	O
(	O
"Authentication failed, arguments do not match.\n"	pointer
)	O
)	O
;	O
free	function
(	O
uri	pointer
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
}	O
free	function
(	O
uri	pointer
)	O
;	O
return	O
(	O
0	int
==	O
strcmp	function
(	O
response	pointer
,	O
da	pointer
->	O
sessionkey	pointer
)	O
)	O
?	O
MHD_YES	int
:	O
MHD_NO	int
;	O
}	O
}	O
_MHD_EXTERN	O
int	O
MHD_digest_auth_check	function
(	O
struct	O
MHD_Connection	struct
*	O
connection	pointer
,	O
const	O
char	O
*	O
realm	pointer
,	O
const	O
char	O
*	O
username	pointer
,	O
const	O
char	O
*	O
password	pointer
,	O
unsigned	O
int	O
nonce_timeout	int
)	O
{	O
return	O
MHD_digest_auth_check2	function
(	O
connection	pointer
,	O
realm	pointer
,	O
username	pointer
,	O
password	pointer
,	O
nonce_timeout	int
,	O
MHD_DIGEST_ALG_MD5	int
)	O
;	O
}	O
_MHD_EXTERN	O
int	O
MHD_digest_auth_check2	function
(	O
struct	O
MHD_Connection	struct
*	O
connection	pointer
,	O
const	O
char	O
*	O
realm	pointer
,	O
const	O
char	O
*	O
username	pointer
,	O
const	O
char	O
*	O
password	pointer
,	O
unsigned	O
int	O
nonce_timeout	int
,	O
enum	O
MHD_DigestAuthAlgorithm	enum
algo	enum
)	O
{	O
SETUP_DA	O
(	O
algo	enum
,	O
da	pointer
)	O
;	O
mhd_assert	O
(	O
NULL	O
!=	O
password	pointer
)	O
;	O
return	O
digest_auth_check_all	function
(	O
connection	pointer
,	O
&	O
da	pointer
,	O
realm	pointer
,	O
username	pointer
,	O
password	pointer
,	O
NULL	O
,	O
nonce_timeout	int
)	O
;	O
}	O
_MHD_EXTERN	O
int	O
MHD_digest_auth_check_digest2	function
(	O
struct	O
MHD_Connection	struct
*	O
connection	pointer
,	O
const	O
char	O
*	O
realm	pointer
,	O
const	O
char	O
*	O
username	pointer
,	O
const	O
uint8_t	char
*	O
digest	pointer
,	O
size_t	long
digest_size	long
,	O
unsigned	O
int	O
nonce_timeout	int
,	O
enum	O
MHD_DigestAuthAlgorithm	enum
algo	enum
)	O
{	O
SETUP_DA	O
(	O
algo	enum
,	O
da	pointer
)	O
;	O
mhd_assert	O
(	O
NULL	O
!=	O
digest	pointer
)	O
;	O
if	O
(	O
da	pointer
.	O
digest_size	long
!=	O
digest_size	long
)	O
MHD_PANIC	O
(	O
_	O
(	O
"digest size missmatch"	pointer
)	O
)	O
;	O
return	O
digest_auth_check_all	function
(	O
connection	pointer
,	O
&	O
da	pointer
,	O
realm	pointer
,	O
username	pointer
,	O
NULL	O
,	O
digest	pointer
,	O
nonce_timeout	int
)	O
;	O
}	O
_MHD_EXTERN	O
int	O
MHD_digest_auth_check_digest	function
(	O
struct	O
MHD_Connection	struct
*	O
connection	pointer
,	O
const	O
char	O
*	O
realm	pointer
,	O
const	O
char	O
*	O
username	pointer
,	O
const	O
uint8_t	char
digest	pointer
[	O
MHD_MD5_DIGEST_SIZE	int
]	O
,	O
unsigned	O
int	O
nonce_timeout	int
)	O
{	O
return	O
MHD_digest_auth_check_digest2	function
(	O
connection	pointer
,	O
realm	pointer
,	O
username	pointer
,	O
digest	pointer
,	O
MHD_MD5_DIGEST_SIZE	int
,	O
nonce_timeout	int
,	O
MHD_DIGEST_ALG_MD5	int
)	O
;	O
}	O
int	O
MHD_queue_auth_fail_response2	function
(	O
struct	O
MHD_Connection	struct
*	O
connection	pointer
,	O
const	O
char	O
*	O
realm	pointer
,	O
const	O
char	O
*	O
opaque	pointer
,	O
struct	O
MHD_Response	struct
*	O
response	pointer
,	O
int	O
signal_stale	int
,	O
enum	O
MHD_DigestAuthAlgorithm	enum
algo	enum
)	O
{	O
int	O
ret	int
;	O
int	O
hlen	int
;	O
SETUP_DA	O
(	O
algo	enum
,	O
da	pointer
)	O
;	O
{	O
char	O
nonce	array
[	O
NONCE_STD_LEN	O
(	O
VLA_ARRAY_LEN_DIGEST	O
(	O
da	pointer
.	O
digest_size	long
)	O
)	O
+	O
1	int
]	O
;	O
VLA_CHECK_LEN_DIGEST	O
(	O
da	pointer
.	O
digest_size	long
)	O
;	O
calculate_nonce	function
(	O
(	O
uint32_t	int
)	O
MHD_monotonic_sec_counter	function
(	O
)	O
,	O
connection	pointer
->	O
method	pointer
,	O
connection	pointer
->	O
daemon	function
->	O
digest_auth_random	pointer
,	O
connection	pointer
->	O
daemon	function
->	O
digest_auth_rand_size	long
,	O
connection	pointer
->	O
url	pointer
,	O
realm	pointer
,	O
&	O
da	pointer
,	O
nonce	array
)	O
;	O
if	O
(	O
MHD_YES	int
!=	O
check_nonce_nc	function
(	O
connection	pointer
,	O
nonce	array
,	O
0	int
)	O
)	O
{	O
MHD_DLOG	function
(	O
connection	pointer
->	O
daemon	function
,	O
_	O
(	O
"Could not register nonce (is the nonce array size zero?).\n"	pointer
)	O
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
hlen	int
=	O
MHD_snprintf_	O
(	O
NULL	O
,	O
0	int
,	O
"Digest realm=\"%s\",qop=\"auth\",nonce=\"%s\",opaque=\"%s\",algorithm=%s%s"	pointer
,	O
realm	pointer
,	O
nonce	array
,	O
opaque	pointer
,	O
da	pointer
.	O
alg	pointer
,	O
signal_stale	int
?	O
",stale=\"true\""	pointer
:	O
""	pointer
)	O
;	O
if	O
(	O
hlen	int
>	O
0	int
)	O
{	O
char	O
*	O
header	pointer
;	O
header	pointer
=	O
MHD_calloc_	O
(	O
1	int
,	O
hlen	int
+	O
1	int
)	O
;	O
if	O
(	O
NULL	O
==	O
header	pointer
)	O
{	O
MHD_DLOG	function
(	O
connection	pointer
->	O
daemon	function
,	O
_	O
(	O
"Failed to allocate memory for auth response header\n"	pointer
)	O
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
if	O
(	O
MHD_snprintf_	O
(	O
header	pointer
,	O
hlen	int
+	O
1	int
,	O
"Digest realm=\"%s\",qop=\"auth\",nonce=\"%s\",opaque=\"%s\",algorithm=%s%s"	pointer
,	O
realm	pointer
,	O
nonce	array
,	O
opaque	pointer
,	O
da	pointer
.	O
alg	pointer
,	O
signal_stale	int
?	O
",stale=\"true\""	pointer
:	O
""	pointer
)	O
==	O
hlen	int
)	O
ret	int
=	O
MHD_add_response_header	function
(	O
response	pointer
,	O
MHD_HTTP_HEADER_WWW_AUTHENTICATE	pointer
,	O
header	pointer
)	O
;	O
else	O
ret	int
=	O
MHD_NO	int
;	O
free	function
(	O
header	pointer
)	O
;	O
}	O
else	O
ret	int
=	O
MHD_NO	int
;	O
}	O
if	O
(	O
MHD_YES	int
==	O
ret	int
)	O
{	O
ret	int
=	O
MHD_queue_response	function
(	O
connection	pointer
,	O
MHD_HTTP_UNAUTHORIZED	int
,	O
response	pointer
)	O
;	O
}	O
else	O
{	O
MHD_DLOG	function
(	O
connection	pointer
->	O
daemon	function
,	O
_	O
(	O
"Failed to add Digest auth header\n"	pointer
)	O
)	O
;	O
}	O
return	O
ret	int
;	O
}	O
int	O
MHD_queue_auth_fail_response	function
(	O
struct	O
MHD_Connection	struct
*	O
connection	pointer
,	O
const	O
char	O
*	O
realm	pointer
,	O
const	O
char	O
*	O
opaque	pointer
,	O
struct	O
MHD_Response	struct
*	O
response	pointer
,	O
int	O
signal_stale	int
)	O
{	O
return	O
MHD_queue_auth_fail_response2	function
(	O
connection	pointer
,	O
realm	pointer
,	O
opaque	pointer
,	O
response	pointer
,	O
signal_stale	int
,	O
MHD_DIGEST_ALG_MD5	int
)	O
;	O
}	O
