struct	O
list_iterator	struct
{	O
mu_list_t	O
list	pointer
;	O
struct	O
list_data	struct
*	O
cur	pointer
;	O
int	O
backwards	int
;	O
}	O
;	O
static	O
int	O
first	function
(	O
void	O
*	O
owner	pointer
)	O
{	O
struct	O
list_iterator	struct
*	O
itr	pointer
=	O
owner	O
;	O
if	O
(	O
itr	O
->	O
backwards	int
)	O
itr	O
->	O
cur	int
=	O
itr	O
->	O
list	int
->	O
head	pointer
.	O
prev	pointer
;	O
else	pointer
itr	O
->	O
cur	int
=	O
itr	O
->	O
list	int
->	O
head	pointer
.	O
next	pointer
;	O
return	pointer
0	O
;	O
}	O
static	O
int	O
next	function
(	O
void	O
*	O
owner	pointer
)	O
{	O
struct	O
list_iterator	struct
*	O
itr	pointer
=	O
owner	O
;	O
if	O
(	O
itr	O
->	O
backwards	int
)	O
itr	O
->	O
cur	int
=	O
itr	O
->	O
cur	int
->	O
prev	pointer
;	O
else	pointer
itr	O
->	O
cur	int
=	O
itr	O
->	O
cur	int
->	O
next	pointer
;	O
return	pointer
0	O
;	O
}	O
static	O
int	O
getitem	function
(	O
void	O
*	O
owner	pointer
,	O
void	O
*	O
*	pointer
pret	pointer
,	O
const	O
void	O
*	O
*	pointer
pkey	pointer
)	O
{	O
struct	O
list_iterator	struct
*	O
itr	pointer
=	O
owner	O
;	O
*	O
pret	pointer
=	O
itr	O
->	O
cur	int
->	O
item	pointer
;	O
if	O
(	O
pkey	pointer
)	O
*	O
pkey	pointer
=	O
NULL	int
;	O
return	O
0	O
;	O
}	O
static	O
int	O
finished_p	function
(	O
void	O
*	O
owner	pointer
)	O
{	O
struct	O
list_iterator	struct
*	O
itr	pointer
=	O
owner	O
;	O
return	O
itr	O
->	O
cur	int
==	O
&	O
itr	pointer
->	O
list	int
->	O
head	pointer
;	O
}	O
static	O
int	O
destroy	function
(	O
mu_iterator_t	O
iterator	O
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
list_iterator	struct
*	O
itr	pointer
=	O
data	O
;	O
mu_iterator_detach	O
(	O
&	O
itr	pointer
->	O
list	pointer
->	O
itr	struct
,	O
iterator	O
)	O
;	O
free	O
(	O
data	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
delitem	function
(	O
void	O
*	O
owner	pointer
,	O
void	O
*	O
item	pointer
)	O
{	O
struct	O
list_iterator	struct
*	O
itr	pointer
=	O
owner	O
;	O
return	O
itr	O
->	O
cur	int
==	O
item	O
?	O
MU_ITR_DELITEM_NEXT	int
:	O
MU_ITR_DELITEM_NOTHING	O
;	O
}	O
static	O
int	O
list_data_dup	function
(	O
void	O
*	O
*	pointer
ptr	pointer
,	O
void	O
*	O
owner	pointer
)	O
{	O
*	O
ptr	pointer
=	O
malloc	O
(	O
sizeof	O
(	O
struct	O
list_iterator	struct
)	O
)	O
;	O
if	O
(	O
*	pointer
ptr	pointer
==	O
NULL	O
)	O
return	O
ENOMEM	O
;	O
memcpy	O
(	O
*	pointer
ptr	pointer
,	O
owner	O
,	O
sizeof	pointer
(	O
struct	O
list_iterator	struct
)	O
)	O
;	O
return	O
0	O
;	O
}	O
static	O
int	O
list_itrctl	function
(	O
void	O
*	O
owner	pointer
,	O
enum	O
mu_itrctl_req	O
req	O
,	O
void	O
*	O
arg	pointer
)	O
{	O
struct	O
list_iterator	struct
*	O
itr	pointer
=	O
owner	O
;	O
mu_list_t	O
list	pointer
=	O
itr	O
->	O
list	int
;	O
struct	O
list_data	struct
*	O
ptr	pointer
;	O
switch	O
(	O
req	O
)	O
{	O
case	O
mu_itrctl_tell	O
:	O
if	O
(	O
itr	O
->	O
cur	int
==	O
NULL	O
)	O
return	O
MU_ERR_NOENT	O
;	O
else	O
{	O
size_t	O
count	O
;	O
for	O
(	O
count	int
=	O
0	int
,	O
ptr	int
=	O
list	int
->	O
head	pointer
.	O
next	pointer
;	O
ptr	pointer
!=	O
&	O
list	pointer
->	O
head	struct
;	O
ptr	O
=	O
ptr	O
->	O
next	pointer
,	O
count	pointer
++	O
)	O
{	O
if	O
(	O
ptr	pointer
==	O
itr	O
->	O
cur	int
)	O
{	O
*	O
(	pointer
size_t	O
*	O
)	O
arg	pointer
=	O
count	O
;	O
return	int
0	int
;	O
}	O
}	O
return	O
MU_ERR_NOENT	O
;	O
}	O
break	O
;	O
case	O
mu_itrctl_delete	O
:	O
case	O
mu_itrctl_delete_nd	O
:	O
if	O
(	O
itr	O
->	O
cur	int
==	O
NULL	O
)	O
return	O
MU_ERR_NOENT	O
;	O
else	O
{	O
struct	O
list_data	struct
*	O
prev	O
;	O
ptr	O
=	O
itr	int
->	O
cur	int
;	O
prev	O
=	O
ptr	pointer
->	O
prev	pointer
;	O
mu_iterator_delitem	O
(	O
list	pointer
->	O
itr	pointer
,	O
ptr	int
)	O
;	O
prev	O
->	O
next	pointer
=	O
ptr	O
->	O
next	pointer
;	O
ptr	pointer
->	O
next	pointer
->	O
prev	pointer
=	O
prev	pointer
;	O
if	pointer
(	O
req	pointer
==	O
mu_itrctl_delete	O
)	O
DESTROY_ITEM	O
(	O
list	pointer
,	O
ptr	pointer
)	O
;	O
free	O
(	O
ptr	pointer
)	O
;	O
list	O
->	O
count	struct
--	O
;	O
}	O
break	O
;	O
case	O
mu_itrctl_replace	int
:	O
case	O
mu_itrctl_replace_nd	O
:	O
if	O
(	O
itr	O
->	O
cur	int
==	O
NULL	O
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
!	O
arg	O
)	O
return	O
EINVAL	O
;	O
ptr	O
=	O
itr	O
->	O
cur	int
;	O
if	O
(	O
req	O
==	O
mu_itrctl_replace	O
)	O
DESTROY_ITEM	O
(	O
list	pointer
,	O
ptr	pointer
)	O
;	O
ptr	O
=	O
itr	O
->	O
cur	int
;	O
ptr	O
->	O
item	pointer
=	O
arg	O
;	O
break	O
;	O
case	O
mu_itrctl_insert	O
:	O
if	O
(	O
itr	O
->	O
cur	int
==	O
NULL	O
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
!	O
arg	O
)	O
return	O
EINVAL	O
;	O
return	O
_mu_list_insert_item	int
(	O
list	pointer
,	O
itr	O
->	O
cur	int
,	O
arg	int
,	O
0	int
)	O
;	O
case	O
mu_itrctl_insert_list	O
:	O
if	O
(	O
itr	O
->	O
cur	int
==	O
NULL	O
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
!	O
arg	O
)	O
return	O
EINVAL	O
;	O
else	O
{	O
mu_list_t	O
new_list	pointer
=	O
arg	pointer
;	O
_mu_list_insert_sublist	O
(	O
list	pointer
,	O
itr	pointer
->	O
cur	int
,	O
new_list	int
->	O
head	pointer
.	O
next	pointer
,	O
new_list	pointer
->	O
head	pointer
.	O
prev	pointer
,	O
new_list	pointer
->	O
count	pointer
,	O
0	int
)	O
;	O
_mu_list_clear	O
(	O
new_list	pointer
)	O
;	O
}	O
break	O
;	O
case	O
mu_itrctl_qry_direction	int
:	O
if	O
(	O
!	O
arg	O
)	O
return	O
EINVAL	O
;	O
else	O
*	O
(	pointer
int	O
*	O
)	O
arg	pointer
=	O
itr	int
->	O
backwards	int
;	O
break	O
;	O
case	O
mu_itrctl_set_direction	O
:	O
if	O
(	O
!	O
arg	O
)	O
return	O
EINVAL	O
;	O
else	O
itr	O
->	O
backwards	int
=	O
!	int
!	O
*	O
(	O
int	O
*	O
)	O
arg	O
;	O
break	O
;	O
case	O
mu_itrctl_count	O
:	O
if	O
(	O
!	O
arg	O
)	O
return	O
EINVAL	O
;	O
return	O
mu_list_count	int
(	O
itr	pointer
->	O
list	int
,	O
arg	O
)	O
;	O
default	O
:	O
return	O
ENOSYS	O
;	O
}	O
return	O
0	O
;	O
}	O
int	O
mu_list_get_iterator	function
(	O
mu_list_t	O
list	O
,	O
mu_iterator_t	O
*	O
piterator	pointer
)	O
{	O
mu_iterator_t	O
iterator	pointer
;	O
int	O
status	int
;	O
struct	O
list_iterator	struct
*	O
itr	pointer
;	O
if	O
(	O
!	O
list	pointer
)	O
return	O
EINVAL	int
;	O
itr	O
=	O
calloc	function
(	O
1	int
,	O
sizeof	int
*	O
itr	O
)	O
;	O
if	O
(	O
!	O
itr	O
)	O
return	O
ENOMEM	int
;	O
itr	O
->	O
list	int
=	O
list	O
;	O
itr	O
->	O
cur	int
=	O
NULL	O
;	O
status	O
=	O
mu_iterator_create	int
(	O
&	int
iterator	pointer
,	O
itr	O
)	O
;	O
if	O
(	O
status	O
)	O
{	O
free	O
(	O
itr	pointer
)	O
;	O
return	O
status	O
;	O
}	O
mu_iterator_set_first	O
(	O
iterator	pointer
,	O
first	O
)	O
;	O
mu_iterator_set_next	O
(	O
iterator	pointer
,	O
next	int
)	O
;	O
mu_iterator_set_getitem	O
(	O
iterator	pointer
,	O
getitem	int
)	O
;	O
mu_iterator_set_finished_p	O
(	O
iterator	pointer
,	O
finished_p	int
)	O
;	O
mu_iterator_set_delitem	O
(	O
iterator	pointer
,	O
delitem	int
)	O
;	O
mu_iterator_set_destroy	O
(	O
iterator	pointer
,	O
destroy	int
)	O
;	O
mu_iterator_set_dup	O
(	O
iterator	pointer
,	O
list_data_dup	int
)	O
;	O
mu_iterator_set_itrctl	O
(	O
iterator	pointer
,	O
list_itrctl	int
)	O
;	O
mu_iterator_attach	O
(	O
&	O
list	struct
->	O
itr	struct
,	O
iterator	O
)	O
;	O
*	O
piterator	pointer
=	O
iterator	O
;	O
return	O
0	int
;	O
}	O