static	O
int	O
*	function
_cond_stack	function
;	O
static	O
int	O
_cond_stack_size	function
;	O
static	O
int	O
_cond_level	function
;	O
static	O
void	O
_cond_push	function
(	O
int	O
val	int
)	O
;	O
static	O
int	O
_cond_pop	function
(	O
void	O
)	O
;	O
int	O
if_cond	int
(	O
)	O
{	O
if	O
(	O
_cond_level	O
==	O
0	O
)	O
return	O
1	int
;	O
return	O
_cond_stack	int
[	O
_cond_level	int
-	O
1	int
]	O
;	O
}	O
void	O
_cond_push	function
(	O
int	O
val	int
)	O
{	O
if	O
(	O
!	O
_cond_stack	int
)	O
{	O
_cond_stack	O
=	O
calloc	O
(	O
COND_STK_SIZE	int
,	O
sizeof	O
(	O
_cond_stack	O
[	O
0	int
]	O
)	O
)	O
;	O
_cond_stack_size	O
=	O
COND_STK_SIZE	O
;	O
_cond_level	O
=	O
0	O
;	O
}	O
else	O
if	O
(	O
_cond_level	O
>=	O
_cond_stack_size	int
)	O
{	O
_cond_stack_size	O
+=	O
COND_STK_INCR	int
;	O
_cond_stack	O
=	O
realloc	O
(	O
_cond_stack	pointer
,	O
sizeof	pointer
(	O
_cond_stack	O
[	O
0	int
]	O
)	O
*	O
_cond_stack_size	pointer
)	O
;	O
}	O
if	O
(	O
!	O
_cond_stack	int
)	O
{	O
mu_error	O
(	O
_	pointer
(	O
"Not enough memory"	pointer
)	O
)	O
;	O
exit	O
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
_cond_stack	O
[	O
_cond_level	int
++	O
]	O
=	O
val	O
;	O
}	O
int	O
_cond_pop	function
(	O
)	O
{	O
if	O
(	O
_cond_level	O
==	O
0	O
)	O
{	O
mu_error	O
(	O
_	pointer
(	O
"Internal error: condition stack underflow"	pointer
)	O
)	O
;	O
abort	O
(	O
)	O
;	O
}	O
return	O
_cond_stack	int
[	O
--	O
_cond_level	O
]	O
;	O
}	O
int	O
mail_if	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	pointer
argv	pointer
)	O
{	O
char	O
*	O
mode	pointer
;	O
int	O
cond	int
;	O
if	O
(	O
argc	O
!=	O
2	O
)	O
{	O
mu_error	O
(	O
_	pointer
(	O
"if requires an argument: s | r | t"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
argv	O
[	O
1	int
]	O
[	O
1	int
]	O
!=	O
0	O
)	O
{	O
mu_error	O
(	O
_	pointer
(	O
"Valid if arguments are: s | r | t"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
mailvar_get	O
(	O
&	pointer
mode	pointer
,	O
mailvar_name_mode	O
,	O
mailvar_type_string	O
,	O
1	O
)	O
)	O
exit	O
(	O
EXIT_FAILURE	int
)	O
;	O
if	O
(	O
if_cond	O
(	O
)	pointer
==	O
0	O
)	O
cond	O
=	O
0	O
;	O
else	O
{	O
switch	O
(	O
argv	O
[	O
1	int
]	O
[	O
0	int
]	O
)	O
{	O
case	O
's'	O
:	O
cond	O
=	O
strcmp	O
(	O
mode	pointer
,	O
"send"	pointer
)	O
==	O
0	int
;	O
break	O
;	O
case	O
'r'	O
:	O
cond	O
=	O
strcmp	O
(	O
mode	pointer
,	O
"read"	pointer
)	O
==	O
0	int
;	O
break	O
;	O
case	O
't'	O
:	O
cond	O
=	O
isatty	O
(	O
fileno	pointer
(	O
stdout	pointer
)	O
)	O
;	O
break	O
;	O
default	O
:	O
mu_error	O
(	O
_	pointer
(	O
"Valid if arguments are: s | r | t"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
}	O
_cond_push	O
(	O
cond	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mail_else	function
(	O
int	O
argc	int
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	pointer
argv	pointer
MU_ARG_UNUSED	O
)	O
{	O
int	O
cond	int
;	O
if	O
(	O
_cond_level	O
==	O
0	O
)	O
{	O
mu_error	O
(	O
_	pointer
(	O
"else without matching if"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
cond	O
=	O
_cond_pop	O
(	O
)	pointer
;	O
if	O
(	O
if_cond	O
(	O
)	pointer
)	O
cond	O
=	O
!	O
cond	O
;	O
_cond_push	O
(	O
cond	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mail_endif	function
(	O
int	O
argc	int
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	pointer
argv	pointer
MU_ARG_UNUSED	O
)	O
{	O
if	O
(	O
_cond_level	O
==	O
0	O
)	O
{	O
mu_error	O
(	O
_	pointer
(	O
"endif without matching if"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
_cond_pop	O
(	O
)	pointer
;	O
return	O
1	int
;	O
}	O