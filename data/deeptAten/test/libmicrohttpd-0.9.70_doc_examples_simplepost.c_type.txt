struct	O
connection_info_struct	struct
{	O
int	O
connectiontype	int
;	O
char	O
*	O
answerstring	pointer
;	O
struct	O
MHD_PostProcessor	struct
*	O
postprocessor	pointer
;	O
}	O
;	O
const	O
char	O
*	O
askpage	function
=	O
"<html><body>                       What's your name, Sir?<br>                       <form action=\"/namepost\" method=\"post\">                       <input name=\"name\" type=\"text\">                       <input type=\"submit\" value=\" Send \"></form>                       </body></html>"	O
;	O
const	O
char	O
*	O
greetingpage	pointer
=	O
"<html><body><h1>Welcome, %s!</center></h1></body></html>"	O
;	O
const	O
char	O
*	O
errorpage	pointer
=	O
"<html><body>This doesn't seem to be right.</body></html>"	O
;	O
static	O
int	O
send_page	function
(	O
struct	O
MHD_Connection	struct
*	O
connection	pointer
,	O
const	O
char	O
*	O
page	pointer
)	O
{	O
int	O
ret	int
;	O
struct	O
MHD_Response	struct
*	O
response	pointer
;	O
response	O
=	O
MHD_create_response_from_buffer	int
(	O
strlen	O
(	O
page	pointer
)	O
,	O
(	pointer
void	O
*	O
)	O
page	pointer
,	O
MHD_RESPMEM_PERSISTENT	pointer
)	O
;	O
if	O
(	O
!	pointer
response	pointer
)	O
return	O
MHD_NO	O
;	O
ret	O
=	O
MHD_queue_response	O
(	O
connection	pointer
,	O
MHD_HTTP_OK	pointer
,	O
response	pointer
)	O
;	O
MHD_destroy_response	O
(	O
response	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
static	O
int	O
iterate_post	function
(	O
void	O
*	O
coninfo_cls	pointer
,	O
enum	O
MHD_ValueKind	O
kind	O
,	O
const	O
char	O
*	O
key	pointer
,	O
const	O
char	O
*	O
filename	pointer
,	O
const	O
char	O
*	O
content_type	pointer
,	O
const	O
char	O
*	O
transfer_encoding	pointer
,	O
const	O
char	O
*	O
data	pointer
,	O
uint64_t	O
off	O
,	O
size_t	O
size	long
)	O
{	O
struct	O
connection_info_struct	struct
*	O
con_info	pointer
=	O
coninfo_cls	O
;	O
(	O
void	O
)	O
kind	O
;	O
(	O
void	O
)	O
filename	function
;	O
(	O
void	O
)	O
content_type	function
;	O
(	O
void	O
)	O
transfer_encoding	O
;	O
(	O
void	O
)	O
off	O
;	O
if	O
(	O
0	O
==	O
strcmp	O
(	O
key	pointer
,	O
"name"	pointer
)	O
)	O
{	O
if	O
(	O
(	O
size	O
>	O
0	O
)	O
&&	O
(	O
size	O
<=	O
MAXNAMESIZE	O
)	O
)	O
{	O
char	O
*	O
answerstring	pointer
;	O
answerstring	O
=	O
malloc	O
(	O
MAXANSWERSIZE	O
)	O
;	O
if	O
(	O
!	O
answerstring	O
)	O
return	O
MHD_NO	O
;	O
snprintf	O
(	O
answerstring	pointer
,	O
MAXANSWERSIZE	pointer
,	O
greetingpage	pointer
,	O
data	pointer
)	O
;	O
con_info	O
->	O
answerstring	pointer
=	O
answerstring	O
;	O
}	pointer
else	O
con_info	O
->	O
answerstring	pointer
=	O
NULL	O
;	O
return	O
MHD_NO	int
;	O
}	O
return	O
MHD_YES	O
;	O
}	O
static	O
void	O
request_completed	function
(	O
void	O
*	O
cls	pointer
,	O
struct	O
MHD_Connection	struct
*	O
connection	pointer
,	O
void	O
*	O
*	pointer
con_cls	pointer
,	O
enum	O
MHD_RequestTerminationCode	O
toe	O
)	O
{	O
struct	O
connection_info_struct	struct
*	O
con_info	pointer
=	O
*	O
con_cls	pointer
;	O
(	O
void	O
)	O
cls	O
;	O
(	O
void	O
)	O
connection	function
;	O
(	O
void	O
)	O
toe	O
;	O
if	O
(	O
NULL	O
==	O
con_info	O
)	O
return	O
;	O
if	O
(	O
con_info	O
->	O
connectiontype	pointer
==	O
POST	O
)	O
{	O
MHD_destroy_post_processor	O
(	O
con_info	pointer
->	O
postprocessor	pointer
)	O
;	O
if	O
(	O
con_info	pointer
->	O
answerstring	pointer
)	O
free	O
(	O
con_info	pointer
->	O
answerstring	pointer
)	O
;	O
}	O
free	O
(	O
con_info	pointer
)	O
;	O
*	O
con_cls	pointer
=	O
NULL	O
;	O
}	O
static	O
int	O
answer_to_connection	function
(	O
void	O
*	O
cls	pointer
,	O
struct	O
MHD_Connection	struct
*	O
connection	pointer
,	O
const	O
char	O
*	O
url	pointer
,	O
const	O
char	O
*	O
method	pointer
,	O
const	O
char	O
*	O
version	pointer
,	O
const	O
char	O
*	O
upload_data	pointer
,	O
size_t	O
*	O
upload_data_size	pointer
,	O
void	O
*	O
*	pointer
con_cls	pointer
)	O
{	O
(	O
void	O
)	O
cls	O
;	O
(	O
void	O
)	O
url	O
;	O
(	O
void	O
)	O
version	O
;	O
if	O
(	O
NULL	O
==	O
*	O
con_cls	O
)	O
{	O
struct	O
connection_info_struct	struct
*	O
con_info	pointer
;	O
con_info	O
=	O
malloc	O
(	O
sizeof	O
(	O
struct	O
connection_info_struct	struct
)	O
)	O
;	O
if	O
(	O
NULL	O
==	O
con_info	O
)	O
return	O
MHD_NO	O
;	O
con_info	O
->	O
answerstring	pointer
=	O
NULL	O
;	O
if	pointer
(	O
0	pointer
==	O
strcmp	O
(	O
method	pointer
,	O
"POST"	pointer
)	O
)	O
{	O
con_info	O
->	O
postprocessor	pointer
=	O
MHD_create_post_processor	O
(	O
connection	pointer
,	O
POSTBUFFERSIZE	pointer
,	O
iterate_post	pointer
,	O
(	pointer
void	O
*	O
)	O
con_info	pointer
)	O
;	O
if	O
(	O
NULL	pointer
==	O
con_info	O
->	O
postprocessor	pointer
)	O
{	O
free	O
(	O
con_info	pointer
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
con_info	O
->	O
connectiontype	pointer
=	O
POST	O
;	O
}	O
else	O
con_info	O
->	O
connectiontype	pointer
=	O
GET	pointer
;	O
*	O
con_cls	pointer
=	O
(	O
void	O
*	O
)	O
con_info	pointer
;	O
return	O
MHD_YES	O
;	O
}	O
if	O
(	O
0	O
==	O
strcmp	O
(	O
method	pointer
,	O
"GET"	pointer
)	O
)	O
{	O
return	O
send_page	int
(	O
connection	pointer
,	O
askpage	pointer
)	O
;	O
}	O
if	O
(	O
0	O
==	O
strcmp	O
(	O
method	pointer
,	O
"POST"	pointer
)	O
)	O
{	O
struct	O
connection_info_struct	struct
*	O
con_info	pointer
=	O
*	O
con_cls	pointer
;	O
if	O
(	O
*	O
upload_data_size	pointer
!=	O
0	O
)	O
{	O
MHD_post_process	O
(	O
con_info	pointer
->	O
postprocessor	pointer
,	O
upload_data	pointer
,	O
*	pointer
upload_data_size	pointer
)	O
;	O
*	O
upload_data_size	pointer
=	O
0	O
;	O
return	O
MHD_YES	int
;	O
}	O
else	O
if	O
(	O
NULL	O
!=	O
con_info	O
->	O
answerstring	pointer
)	O
return	O
send_page	O
(	O
connection	pointer
,	O
con_info	pointer
->	O
answerstring	pointer
)	O
;	O
}	O
return	O
send_page	O
(	O
connection	pointer
,	O
errorpage	pointer
)	O
;	O
}	O
int	O
main	function
(	O
)	O
{	O
struct	O
MHD_Daemon	struct
*	O
daemon	pointer
;	O
daemon	O
=	O
MHD_start_daemon	pointer
(	O
MHD_USE_AUTO	int
|	O
MHD_USE_INTERNAL_POLLING_THREAD	O
,	O
PORT	O
,	O
NULL	pointer
,	O
NULL	O
,	O
&	O
answer_to_connection	pointer
,	O
NULL	O
,	O
MHD_OPTION_NOTIFY_COMPLETED	O
,	O
request_completed	O
,	O
NULL	O
,	O
MHD_OPTION_END	O
)	O
;	O
if	O
(	O
NULL	O
==	O
daemon	O
)	O
return	O
1	O
;	O
(	O
void	O
)	O
getchar	function
(	O
)	O
;	O
MHD_stop_daemon	O
(	O
daemon	pointer
)	O
;	O
return	O
0	int
;	O
}	O