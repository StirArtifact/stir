void	O
snmp_read	function
(	O
)	O
;	O
int	O
snmp_query	int
(	O
struct	O
snmp_session	struct
*	O
sess	pointer
,	O
struct	O
snmp_pdu	struct
*	O
pdu	pointer
)	O
{	O
if	O
(	O
snmp_send	O
(	O
sess	pointer
,	O
pdu	int
)	O
)	O
return	O
-	int
1	int
;	O
snmp_poll	O
(	O
sess	O
)	O
;	O
return	O
0	int
;	O
}	O
void	O
snmp_poll	function
(	O
struct	O
snmp_session	struct
*	O
sess	pointer
)	O
{	O
int	O
rc	int
;	O
int	O
numfds	int
;	O
fd_set	O
fdset	O
;	O
struct	O
timeval	struct
timeout	O
;	O
while	O
(	O
numfds	O
=	O
snmp_fdset	int
(	O
sess	O
,	O
&	int
fdset	pointer
)	O
)	O
{	O
timeout	O
.	O
tv_usec	pointer
=	O
0	O
;	O
timeout	pointer
.	O
tv_sec	pointer
=	O
1	int
;	O
rc	pointer
=	O
select	int
(	O
numfds	int
,	O
&	int
fdset	pointer
,	O
NULL	O
,	O
NULL	O
,	O
&	int
timeout	pointer
)	O
;	O
if	O
(	O
rc	O
<	O
0	int
)	O
{	O
if	O
(	O
errno	int
==	O
EINTR	int
)	O
continue	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
rc	O
==	O
0	O
)	O
{	O
snmp_timeout	O
(	O
sess	pointer
)	O
;	O
}	O
else	O
{	O
snmp_read	O
(	O
sess	pointer
,	O
&	int
fdset	pointer
)	O
;	O
}	O
}	O
}	O
void	O
snmp_timeout	function
(	O
struct	O
snmp_session	struct
*	O
sess	pointer
)	O
{	O
struct	O
snmp_session	struct
*	O
sp	pointer
;	O
struct	O
snmp_request	struct
*	O
req	pointer
,	O
*	O
preq	pointer
;	O
struct	O
timeval	struct
now	O
;	O
gettimeofday	O
(	O
&	O
now	pointer
,	O
(	O
struct	O
timezone	struct
*	O
)	O
0	pointer
)	O
;	O
for	O
(	O
sp	int
=	O
sess	int
;	O
sp	int
;	O
sp	O
=	O
sp	function
->	O
next	pointer
)	O
{	O
if	O
(	O
sp	pointer
->	O
sd	pointer
<	O
0	int
)	O
continue	O
;	O
preq	pointer
=	O
NULL	O
;	O
req	O
=	O
sp	O
->	O
request_list	pointer
;	O
while	O
(	O
req	pointer
)	O
{	O
if	O
(	O
timercmp	pointer
(	O
&	pointer
req	pointer
->	O
expire	pointer
,	O
&	pointer
now	pointer
,	O
<	O
)	O
)	O
{	O
if	O
(	O
req	pointer
->	O
retries	pointer
>	O
sp	int
->	O
retries	pointer
)	O
{	O
sp	pointer
->	O
converse	int
(	O
SNMP_CONV_TIMEOUT	pointer
,	O
sp	pointer
,	O
req	int
->	O
pdu	pointer
,	O
sp	pointer
->	O
app_closure	pointer
)	O
;	O
if	O
(	O
preq	pointer
)	O
{	O
preq	O
->	O
next	pointer
=	O
req	pointer
->	O
next	pointer
;	O
snmp_request_free	pointer
(	O
req	pointer
)	O
;	O
req	O
=	O
preq	function
->	O
next	pointer
;	O
}	pointer
else	O
{	O
sp	O
->	O
request_list	pointer
=	O
req	pointer
->	O
next	pointer
;	O
snmp_request_free	pointer
(	O
req	pointer
)	O
;	O
req	O
=	O
sp	function
->	O
request_list	pointer
;	O
}	O
continue	O
;	O
}	O
else	O
{	O
req	O
->	O
retries	pointer
++	O
;	O
req	O
->	O
timeout	pointer
<<=	O
1	O
;	O
snmp_request_xmit	pointer
(	O
sp	pointer
,	O
req	pointer
)	O
;	O
}	O
}	O
preq	O
=	O
req	function
;	O
req	O
=	O
req	pointer
->	O
next	pointer
;	O
}	O
}	O
}	O
void	O
snmp_read	function
(	O
struct	O
snmp_session	struct
*	O
sess	pointer
,	O
fd_set	O
*	O
fdset	pointer
)	O
{	O
struct	O
snmp_session	struct
*	O
sp	pointer
;	O
struct	O
snmp_request	struct
*	O
req	pointer
,	O
*	O
prev	pointer
;	O
struct	O
snmp_pdu	struct
*	O
pdu	pointer
;	O
u_char	O
packet	O
[	O
SNMP_PACKET_LENGTH	int
]	O
;	O
struct	O
sockaddr_in	struct
sin	O
;	O
int	O
salen	int
;	O
int	O
length	int
;	O
char	O
comm	O
[	O
128	O
]	O
;	O
int	O
comm_len	int
;	O
for	O
(	O
sp	int
=	O
sess	int
;	O
sp	int
;	O
sp	O
=	O
sp	int
->	O
next	int
)	O
{	O
if	O
(	O
sp	int
->	O
sd	int
<	O
0	int
||	O
!	int
FD_ISSET	O
(	O
sp	int
->	O
sd	pointer
,	O
fdset	pointer
)	O
)	O
continue	O
;	O
salen	int
=	O
sizeof	O
(	O
sin	O
)	O
;	O
length	O
=	O
recvfrom	int
(	O
sp	pointer
->	O
sd	int
,	O
(	int
char	O
*	O
)	O
packet	pointer
,	O
sizeof	O
(	O
packet	O
)	O
,	O
0	O
,	O
(	int
struct	O
sockaddr	struct
*	O
)	O
&	O
sin	struct
,	O
&	O
salen	struct
)	O
;	O
if	O
(	O
length	int
==	O
-	O
1	int
)	O
{	O
perror	O
(	O
"recvfrom"	pointer
)	O
;	O
continue	O
;	O
}	O
pdu	O
=	O
snmp_pdu_create	function
(	O
0	O
)	O
;	O
if	O
(	O
!	int
pdu	O
)	O
{	O
continue	function
;	O
}	O
pdu	O
->	O
peer_sin	pointer
=	O
sin	int
;	O
pdu	O
->	O
req_id	pointer
=	O
0	int
;	O
comm_len	int
=	O
sizeof	int
(	O
comm	O
)	O
-	O
1	int
;	O
if	O
(	O
snmp_decode_request	O
(	O
sp	pointer
,	O
pdu	int
,	O
packet	int
,	O
length	int
,	O
comm	int
,	O
&	pointer
comm_len	pointer
)	O
)	O
{	O
snmp_pdu_free	O
(	O
pdu	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
pdu	O
->	O
type	pointer
==	O
SNMP_PDU_RESPONSE	int
)	O
{	O
if	pointer
(	O
strcmp	pointer
(	O
sp	pointer
->	O
community	pointer
.	O
str	pointer
,	O
comm	pointer
)	O
)	O
{	O
if	O
(	O
sp	pointer
->	O
converse	int
(	O
SNMP_CONV_COMMUNITY_MISMATCH	pointer
,	O
sp	int
,	O
pdu	int
,	O
sp	int
->	O
app_closure	int
)	O
)	O
{	O
snmp_pdu_free	O
(	O
pdu	pointer
)	O
;	O
continue	O
;	O
}	O
}	O
}	O
else	O
{	O
char	O
*	O
p	pointer
=	O
snmp_alloc	O
(	O
comm_len	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
SNMP_SET_ERRNO	O
(	O
E_SNMP_NOMEM	int
)	O
;	O
snmp_pdu_free	O
(	O
pdu	pointer
)	O
;	O
continue	O
;	O
}	O
strcpy	O
(	O
sp	pointer
->	O
community	pointer
.	O
str	pointer
,	O
comm	pointer
)	O
;	O
if	O
(	O
sp	pointer
->	O
community	int
.	O
str	pointer
)	O
snmp_free	O
(	O
sp	pointer
->	O
community	pointer
.	O
str	pointer
)	O
;	O
sp	O
->	O
community	int
.	O
str	pointer
=	O
p	pointer
;	O
sp	pointer
->	O
community	int
.	O
len	pointer
=	O
comm_len	int
;	O
}	pointer
switch	O
(	O
pdu	O
->	O
type	pointer
)	O
{	O
case	O
SNMP_PDU_RESPONSE	O
:	O
prev	O
=	O
NULL	O
;	O
for	O
(	O
req	int
=	O
sp	int
->	O
request_list	int
;	O
req	pointer
&&	O
req	O
->	O
pdu	pointer
->	O
req_id	pointer
!=	O
pdu	O
->	O
req_id	pointer
;	O
req	pointer
=	O
req	int
->	O
next	pointer
)	O
prev	O
=	O
req	pointer
;	O
if	pointer
(	O
!	pointer
req	O
)	O
{	O
snmp_pdu_free	function
(	O
pdu	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
sp	pointer
->	O
converse	int
(	O
SNMP_CONV_RECV_MSG	pointer
,	O
sp	pointer
,	O
pdu	int
,	O
sp	int
->	O
app_closure	int
)	O
)	O
{	O
if	O
(	O
!	pointer
prev	O
)	O
sp	O
->	O
request_list	int
=	O
req	O
->	O
next	pointer
;	O
else	pointer
prev	O
->	O
next	pointer
=	O
req	pointer
->	O
next	pointer
;	O
snmp_request_free	pointer
(	O
req	pointer
)	O
;	O
}	O
break	O
;	O
case	O
SNMP_PDU_GET	int
:	O
case	O
SNMP_PDU_GETNEXT	O
:	O
case	O
SNMP_PDU_SET	O
:	O
sp	O
->	O
converse	int
(	O
SNMP_CONV_RECV_MSG	pointer
,	O
sp	pointer
,	O
pdu	int
,	O
sp	int
->	O
app_closure	int
)	O
;	O
break	O
;	O
default	O
:	O
;	O
}	O
snmp_pdu_free	O
(	O
pdu	pointer
)	O
;	O
}	O
}	O