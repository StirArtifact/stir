gsl_histogram	O
*	O
gsl_histogram_alloc	O
(	O
size_t	O
n	long
)	O
{	O
gsl_histogram	O
*	O
h	pointer
;	O
if	O
(	O
n	O
==	O
0	O
)	O
{	O
GSL_ERROR_VAL	O
(	O
"histogram length n must be positive integer"	pointer
,	O
GSL_EDOM	pointer
,	O
0	int
)	O
;	O
}	O
h	O
=	O
(	function
gsl_histogram	O
*	O
)	O
malloc	pointer
(	O
sizeof	int
(	O
gsl_histogram	O
)	O
)	O
;	O
if	O
(	O
h	O
==	O
0	O
)	O
{	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for histogram struct"	pointer
,	O
GSL_ENOMEM	pointer
,	O
0	int
)	O
;	O
}	O
h	O
->	O
range	pointer
=	O
(	O
double	O
*	O
)	O
malloc	pointer
(	O
(	O
n	O
+	O
1	O
)	O
*	O
sizeof	pointer
(	O
double	O
)	O
)	O
;	O
if	O
(	O
h	O
->	O
range	pointer
==	O
0	O
)	O
{	O
free	O
(	O
h	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for histogram ranges"	pointer
,	O
GSL_ENOMEM	pointer
,	O
0	int
)	O
;	O
}	O
h	O
->	O
bin	pointer
=	O
(	pointer
double	pointer
*	O
)	O
malloc	pointer
(	O
n	O
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
h	O
->	O
bin	pointer
==	O
0	O
)	O
{	O
free	O
(	O
h	pointer
->	O
range	pointer
)	O
;	O
free	O
(	O
h	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for histogram bins"	pointer
,	O
GSL_ENOMEM	pointer
,	O
0	int
)	O
;	O
}	O
h	O
->	O
n	pointer
=	O
n	O
;	O
return	O
h	int
;	O
}	O
static	O
void	O
make_uniform	function
(	O
double	O
range	O
[	O
]	O
,	O
size_t	O
n	O
,	O
double	O
xmin	O
,	O
double	O
xmax	O
)	O
{	O
size_t	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<=	O
n	int
;	O
i	long
++	O
)	O
{	O
double	O
f1	array
=	O
(	O
(	O
double	O
)	O
(	O
n	O
-	O
i	int
)	O
/	O
(	int
double	O
)	O
n	O
)	O
;	O
double	O
f2	O
=	O
(	O
(	O
double	O
)	O
i	O
/	O
(	int
double	O
)	O
n	O
)	O
;	O
range	O
[	O
i	int
]	O
=	O
f1	O
*	O
xmin	O
+	O
f2	int
*	O
xmax	O
;	O
}	O
}	O
gsl_histogram	O
*	O
gsl_histogram_calloc_uniform	function
(	O
const	O
size_t	O
n	long
,	O
const	O
double	O
xmin	O
,	O
const	O
double	O
xmax	O
)	O
{	O
gsl_histogram	O
*	O
h	pointer
;	O
if	O
(	O
xmin	long
>=	O
xmax	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"xmin must be less than xmax"	pointer
,	O
GSL_EINVAL	pointer
,	O
0	int
)	O
;	O
}	O
h	O
=	O
gsl_histogram_calloc	O
(	O
n	pointer
)	O
;	O
if	O
(	O
h	O
==	O
0	O
)	O
{	O
return	O
h	int
;	O
}	O
make_uniform	O
(	O
h	O
->	O
range	pointer
,	O
n	O
,	O
xmin	pointer
,	O
xmax	int
)	O
;	O
return	O
h	int
;	O
}	O
gsl_histogram	O
*	O
gsl_histogram_calloc	function
(	O
size_t	O
n	long
)	O
{	O
gsl_histogram	O
*	O
h	pointer
=	O
gsl_histogram_alloc	O
(	O
n	pointer
)	O
;	O
if	O
(	O
h	O
==	O
0	O
)	O
{	O
return	O
h	int
;	O
}	O
{	O
size_t	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
+	O
1	int
;	O
i	long
++	O
)	O
{	O
h	O
->	O
range	pointer
[	O
i	int
]	O
=	O
i	pointer
;	O
}	long
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
h	O
->	O
bin	pointer
[	O
i	pointer
]	O
=	O
0	pointer
;	O
}	long
}	O
h	O
->	O
n	pointer
=	O
n	O
;	O
return	O
h	int
;	O
}	O
void	O
gsl_histogram_free	function
(	O
gsl_histogram	O
*	O
h	pointer
)	O
{	O
RETURN_IF_NULL	O
(	O
h	pointer
)	O
;	O
free	O
(	O
h	pointer
->	O
range	pointer
)	O
;	O
free	O
(	O
h	pointer
->	O
bin	pointer
)	O
;	O
free	O
(	O
h	pointer
)	O
;	O
}	O
int	O
gsl_histogram_set_ranges_uniform	function
(	O
gsl_histogram	O
*	O
h	pointer
,	O
double	O
xmin	O
,	O
double	O
xmax	O
)	O
{	O
size_t	O
i	long
;	O
const	O
size_t	O
n	long
=	O
h	pointer
->	O
n	long
;	O
if	O
(	O
xmin	long
>=	O
xmax	int
)	O
{	O
GSL_ERROR	O
(	O
"xmin must be less than xmax"	pointer
,	O
GSL_EINVAL	long
)	O
;	O
}	O
make_uniform	O
(	O
h	O
->	O
range	pointer
,	O
n	long
,	O
xmin	long
,	O
xmax	long
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
h	O
->	O
bin	pointer
[	O
i	pointer
]	O
=	O
0	pointer
;	O
}	long
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_histogram_set_ranges	function
(	O
gsl_histogram	O
*	O
h	pointer
,	O
const	O
double	O
range	O
[	O
]	O
,	O
size_t	O
size	long
)	O
{	O
size_t	O
i	long
;	O
const	O
size_t	O
n	long
=	O
h	int
->	O
n	long
;	O
if	O
(	O
size	long
!=	O
(	O
n	pointer
+	O
1	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"size of range must match size of histogram"	pointer
,	O
GSL_EINVAL	long
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<=	O
n	int
;	O
i	long
++	O
)	O
{	O
h	O
->	O
range	pointer
[	O
i	int
]	O
=	O
range	pointer
[	O
i	int
]	O
;	O
}	pointer
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
h	O
->	O
bin	pointer
[	O
i	pointer
]	O
=	O
0	pointer
;	O
}	long
return	O
GSL_SUCCESS	int
;	O
}	O