struct	O
translator	struct
{	O
struct	O
port_info	struct
*	O
pi	pointer
;	O
char	O
*	O
name	pointer
;	O
mach_port_t	O
active	O
;	O
}	O
;	O
static	O
struct	O
hurd_ihash	struct
translator_ihash	O
=	O
HURD_IHASH_INITIALIZER	O
(	O
HURD_IHASH_NO_LOCP	O
)	O
;	O
static	O
pthread_mutex_t	O
translator_ihash_lock	function
=	O
PTHREAD_MUTEX_INITIALIZER	O
;	O
static	O
void	O
translator_ihash_cleanup	function
(	O
void	O
*	O
element	pointer
,	O
void	O
*	O
arg	pointer
)	O
{	O
struct	O
translator	struct
*	O
translator	pointer
=	O
element	O
;	O
if	O
(	O
translator	O
->	O
pi	pointer
)	O
ports_port_deref	O
(	O
translator	pointer
->	O
pi	pointer
)	O
;	O
mach_port_deallocate	O
(	O
mach_task_self	pointer
(	O
)	pointer
,	O
translator	O
->	O
active	pointer
)	O
;	O
free	O
(	O
translator	pointer
->	O
name	pointer
)	O
;	O
free	O
(	O
translator	pointer
)	O
;	O
}	O
error_t	O
fshelp_set_active_translator	function
(	O
struct	O
port_info	struct
*	O
pi	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
mach_port_t	O
active	O
)	O
{	O
error_t	O
err	int
=	O
0	int
;	O
pthread_mutex_lock	O
(	O
&	O
translator_ihash_lock	pointer
)	O
;	O
if	O
(	O
!	O
translator_ihash	O
.	O
cleanup	pointer
)	O
hurd_ihash_set_cleanup	O
(	O
&	O
translator_ihash	pointer
,	O
translator_ihash_cleanup	O
,	O
NULL	O
)	O
;	O
struct	O
translator	struct
*	O
t	pointer
=	O
NULL	O
;	O
HURD_IHASH_ITERATE	O
(	O
&	O
translator_ihash	pointer
,	O
value	O
)	O
{	O
t	O
=	O
value	O
;	O
if	O
(	O
strcmp	O
(	O
name	pointer
,	O
t	pointer
->	O
name	pointer
)	O
==	O
0	int
)	O
goto	O
update	O
;	O
}	pointer
t	O
=	O
malloc	function
(	O
sizeof	int
(	O
struct	O
translator	struct
)	O
)	O
;	O
if	O
(	O
!	O
t	pointer
)	O
{	O
err	O
=	O
errno	function
;	O
goto	O
out	O
;	O
}	O
t	O
->	O
active	pointer
=	O
MACH_PORT_NULL	O
;	O
t	pointer
->	O
pi	pointer
=	O
NULL	int
;	O
t	pointer
->	O
name	pointer
=	O
strdup	O
(	O
name	pointer
)	O
;	O
if	O
(	O
!	pointer
t	pointer
->	O
name	pointer
)	O
{	O
err	O
=	O
errno	function
;	O
free	O
(	O
t	pointer
)	O
;	O
goto	O
out	O
;	O
}	O
err	O
=	O
hurd_ihash_add	function
(	O
&	O
translator_ihash	struct
,	O
(	O
hurd_ihash_key_t	O
)	O
t	O
,	O
t	O
)	O
;	O
if	O
(	O
err	O
)	O
goto	O
out	O
;	O
update	O
:	O
if	O
(	O
active	pointer
)	O
{	O
if	O
(	O
t	O
->	O
pi	pointer
!=	O
pi	O
)	O
{	O
mach_port_t	pointer
old	O
;	O
err	O
=	O
mach_port_request_notification	function
(	O
mach_task_self	pointer
(	O
)	pointer
,	O
active	O
,	O
MACH_NOTIFY_DEAD_NAME	O
,	O
0	O
,	O
pi	int
->	O
port_right	int
,	O
MACH_MSG_TYPE_MAKE_SEND_ONCE	pointer
,	O
&	pointer
old	pointer
)	O
;	O
if	O
(	O
err	O
)	O
goto	O
out	O
;	O
if	O
(	O
old	O
!=	O
MACH_PORT_NULL	O
)	O
mach_port_deallocate	O
(	O
mach_task_self	O
(	O
)	pointer
,	O
old	O
)	O
;	O
if	O
(	O
t	O
->	O
pi	pointer
)	O
ports_port_deref	O
(	O
t	pointer
->	O
pi	pointer
)	O
;	O
ports_port_ref	O
(	O
pi	pointer
)	O
;	O
t	O
->	O
pi	pointer
=	O
pi	int
;	O
}	pointer
if	O
(	O
MACH_PORT_VALID	pointer
(	O
t	pointer
->	O
active	pointer
)	O
)	O
mach_port_deallocate	O
(	O
mach_task_self	O
(	O
)	O
,	O
t	O
->	O
active	pointer
)	O
;	O
mach_port_mod_refs	O
(	O
mach_task_self	pointer
(	O
)	pointer
,	O
active	O
,	O
MACH_PORT_RIGHT_SEND	O
,	O
+	O
1	int
)	O
;	O
t	O
->	O
active	pointer
=	O
active	O
;	O
}	pointer
else	O
hurd_ihash_remove	O
(	O
&	pointer
translator_ihash	pointer
,	O
(	O
hurd_ihash_key_t	O
)	O
t	O
)	O
;	O
out	O
:	O
pthread_mutex_unlock	O
(	O
&	O
translator_ihash_lock	pointer
)	O
;	O
return	O
err	int
;	O
}	O
error_t	O
fshelp_remove_active_translator	function
(	O
mach_port_t	O
active	O
)	O
{	O
error_t	O
err	int
=	O
0	int
;	O
pthread_mutex_lock	O
(	O
&	O
translator_ihash_lock	pointer
)	O
;	O
struct	O
translator	struct
*	O
t	pointer
=	O
NULL	O
;	O
HURD_IHASH_ITERATE	O
(	O
&	O
translator_ihash	pointer
,	O
value	O
)	O
{	O
struct	O
translator	struct
*	O
v	pointer
=	O
value	O
;	O
if	O
(	O
active	O
==	O
v	O
->	O
active	pointer
)	O
{	O
t	O
=	O
v	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
t	O
)	O
hurd_ihash_remove	O
(	O
&	pointer
translator_ihash	pointer
,	O
(	O
hurd_ihash_key_t	O
)	O
t	O
)	O
;	O
pthread_mutex_unlock	O
(	O
&	O
translator_ihash_lock	pointer
)	O
;	O
return	O
err	int
;	O
}	O
error_t	O
fshelp_get_active_translators	function
(	O
char	O
*	O
*	pointer
translators	pointer
,	O
size_t	O
*	O
translators_len	pointer
,	O
fshelp_filter	O
filter	O
,	O
const	O
char	O
*	O
prefix	pointer
)	O
{	O
error_t	O
err	int
=	O
0	int
;	O
pthread_mutex_lock	O
(	O
&	O
translator_ihash_lock	pointer
)	O
;	O
if	O
(	O
prefix	O
&&	O
strlen	O
(	O
prefix	pointer
)	O
==	O
0	int
)	O
prefix	O
=	O
NULL	O
;	O
HURD_IHASH_ITERATE	O
(	O
&	pointer
translator_ihash	pointer
,	O
value	O
)	O
{	O
struct	O
translator	struct
*	O
t	pointer
=	O
value	O
;	O
if	O
(	O
prefix	O
!=	O
NULL	O
&&	O
(	pointer
strncmp	O
(	O
t	pointer
->	O
name	pointer
,	O
prefix	pointer
,	O
strlen	pointer
(	O
prefix	pointer
)	O
)	O
!=	O
0	O
||	O
t	O
->	O
name	pointer
[	O
strlen	int
(	O
prefix	pointer
)	O
]	O
!=	O
'/'	O
)	O
)	O
continue	O
;	O
if	O
(	O
filter	pointer
)	O
{	O
char	O
*	O
dir	pointer
=	O
strdup	O
(	O
t	pointer
->	O
name	pointer
)	O
;	O
if	O
(	O
!	pointer
dir	pointer
)	O
{	O
err	O
=	O
ENOMEM	function
;	O
break	O
;	O
}	O
err	O
=	O
filter	function
(	O
dirname	pointer
(	O
dir	pointer
)	O
)	O
;	O
free	O
(	O
dir	pointer
)	O
;	O
if	O
(	O
err	pointer
)	O
{	O
err	O
=	O
0	function
;	O
continue	O
;	O
}	O
}	O
err	O
=	O
argz_add	function
(	O
translators	pointer
,	O
translators_len	pointer
,	O
&	pointer
t	pointer
->	O
name	pointer
[	O
prefix	int
?	O
strlen	int
(	O
prefix	pointer
)	O
+	O
1	int
:	O
0	O
]	O
)	O
;	O
if	O
(	O
err	pointer
)	O
break	O
;	O
}	O
pthread_mutex_unlock	O
(	O
&	O
translator_ihash_lock	pointer
)	O
;	O
return	O
err	int
;	O
}	O