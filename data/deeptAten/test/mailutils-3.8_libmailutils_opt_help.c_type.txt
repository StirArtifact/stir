unsigned	O
short_opt_col	int
=	O
2	int
;	O
unsigned	O
long_opt_col	int
;	O
unsigned	O
header_col	int
=	O
1	int
;	O
unsigned	O
opt_doc_col	int
=	O
29	int
;	O
unsigned	O
usage_indent	int
=	O
12	int
;	O
unsigned	O
rmargin	int
=	O
79	int
;	O
unsigned	O
dup_args	int
=	O
0	int
;	O
unsigned	O
dup_args_note	int
=	O
1	int
;	O
enum	O
usage_var_type	enum
{	O
usage_var_column	int
,	O
usage_var_bool	int
}	O
;	O
static	O
struct	O
usage_var	struct
{	O
char	O
*	O
name	pointer
;	O
unsigned	O
*	O
valptr	pointer
;	O
enum	O
usage_var_type	enum
type	pointer
;	O
}	O
usage_var	struct
[	O
]	O
=	O
{	O
{	O
"short-opt-col"	pointer
,	O
&	O
short_opt_col	int
,	O
usage_var_column	int
}	O
,	O
{	O
"header-col"	pointer
,	O
&	O
header_col	int
,	O
usage_var_column	int
}	O
,	O
{	O
"opt-doc-col"	pointer
,	O
&	O
opt_doc_col	int
,	O
usage_var_column	int
}	O
,	O
{	O
"usage-indent"	pointer
,	O
&	O
usage_indent	int
,	O
usage_var_column	int
}	O
,	O
{	O
"rmargin"	pointer
,	O
&	O
rmargin	int
,	O
usage_var_column	int
}	O
,	O
{	O
"dup-args"	pointer
,	O
&	O
dup_args	int
,	O
usage_var_bool	int
}	O
,	O
{	O
"dup-args-note"	pointer
,	O
&	O
dup_args_note	int
,	O
usage_var_bool	int
}	O
,	O
{	O
"long-opt-col"	pointer
,	O
&	O
long_opt_col	int
,	O
usage_var_column	int
}	O
,	O
{	O
"doc_opt_col"	pointer
,	O
NULL	O
,	O
usage_var_column	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
unsigned	O
mu_parseopt_getcolumn	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
usage_var	struct
*	O
p	pointer
;	O
unsigned	O
retval	int
=	O
0	int
;	O
for	O
(	O
p	pointer
=	O
usage_var	struct
;	O
p	pointer
->	O
name	pointer
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
p	pointer
->	O
name	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
p	pointer
->	O
valptr	pointer
)	O
retval	int
=	O
*	O
p	pointer
->	O
valptr	pointer
;	O
break	O
;	O
}	O
}	O
return	O
retval	int
;	O
}	O
static	O
void	O
set_usage_var	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
char	O
const	O
*	O
id	pointer
)	O
{	O
struct	O
usage_var	struct
*	O
p	pointer
;	O
size_t	long
len	int
;	O
int	O
boolval	int
=	O
1	int
;	O
if	O
(	O
strlen	function
(	O
id	pointer
)	O
>	O
3	int
&&	O
memcmp	function
(	O
id	pointer
,	O
"no-"	pointer
,	O
3	int
)	O
==	O
0	int
)	O
{	O
id	pointer
+=	O
3	int
;	O
boolval	int
=	O
0	int
;	O
}	O
len	int
=	O
strcspn	function
(	O
id	pointer
,	O
"="	pointer
)	O
;	O
for	O
(	O
p	pointer
=	O
usage_var	struct
;	O
p	pointer
->	O
name	pointer
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
strlen	function
(	O
p	pointer
->	O
name	pointer
)	O
==	O
len	int
&&	O
memcmp	function
(	O
p	pointer
->	O
name	pointer
,	O
id	pointer
,	O
len	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
!	O
p	pointer
->	O
valptr	pointer
)	O
return	O
;	O
if	O
(	O
p	pointer
->	O
type	pointer
==	O
usage_var_bool	int
)	O
{	O
if	O
(	O
id	pointer
[	O
len	int
]	O
)	O
{	O
if	O
(	O
po	pointer
->	O
po_prog_name	pointer
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: "	pointer
,	O
po	pointer
->	O
po_prog_name	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"error in ARGP_HELP_FMT: improper usage of [no-]%s\n"	pointer
,	O
id	pointer
)	O
;	O
return	O
;	O
}	O
*	O
p	pointer
->	O
valptr	pointer
=	O
boolval	int
;	O
return	O
;	O
}	O
if	O
(	O
id	pointer
[	O
len	int
]	O
)	O
{	O
char	O
*	O
endp	pointer
;	O
unsigned	O
long	O
val	array
;	O
errno	O
=	O
0	int
;	O
val	array
=	O
strtoul	function
(	O
id	pointer
+	O
len	int
+	O
1	int
,	O
&	O
endp	pointer
,	O
10	int
)	O
;	O
if	O
(	O
errno	O
||	O
*	O
endp	pointer
)	O
{	O
if	O
(	O
po	pointer
->	O
po_prog_name	pointer
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: "	pointer
,	O
po	pointer
->	O
po_prog_name	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"error in ARGP_HELP_FMT: bad value for %s\n"	pointer
,	O
id	pointer
)	O
;	O
}	O
else	O
if	O
(	O
val	array
>	O
UINT_MAX	O
)	O
{	O
if	O
(	O
po	pointer
->	O
po_prog_name	pointer
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: "	pointer
,	O
po	pointer
->	O
po_prog_name	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"error in ARGP_HELP_FMT: %s value is out of range\n"	pointer
,	O
id	pointer
)	O
;	O
}	O
else	O
*	O
p	pointer
->	O
valptr	pointer
=	O
val	array
;	O
}	O
else	O
{	O
if	O
(	O
po	pointer
->	O
po_prog_name	pointer
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: "	pointer
,	O
po	pointer
->	O
po_prog_name	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: ARGP_HELP_FMT parameter requires a value\n"	pointer
,	O
id	pointer
)	O
;	O
return	O
;	O
}	O
return	O
;	O
}	O
}	O
if	O
(	O
po	pointer
->	O
po_prog_name	pointer
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: "	pointer
,	O
po	pointer
->	O
po_prog_name	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: Unknown ARGP_HELP_FMT parameter\n"	pointer
,	O
id	pointer
)	O
;	O
}	O
static	O
void	O
init_usage_vars	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
)	O
{	O
char	O
*	O
fmt	pointer
;	O
struct	O
mu_wordsplit	struct
ws	pointer
;	O
size_t	long
i	long
;	O
if	O
(	O
po	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_SINGLE_DASH	int
)	O
long_opt_col	int
=	O
2	int
;	O
else	O
long_opt_col	int
=	O
6	int
;	O
fmt	pointer
=	O
getenv	function
(	O
"ARGP_HELP_FMT"	pointer
)	O
;	O
if	O
(	O
!	O
fmt	pointer
)	O
return	O
;	O
ws	pointer
.	O
ws_delim	pointer
=	O
","	pointer
;	O
if	O
(	O
mu_wordsplit	struct
(	O
fmt	pointer
,	O
&	O
ws	pointer
,	O
MU_WRDSF_DELIM	O
|	O
MU_WRDSF_NOVAR	O
|	O
MU_WRDSF_NOCMD	O
|	O
MU_WRDSF_WS	O
|	O
MU_WRDSF_SHOWERR	O
)	O
)	O
return	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ws	pointer
.	O
ws_wordc	long
;	O
i	long
++	O
)	O
{	O
set_usage_var	function
(	O
po	pointer
,	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	long
]	O
)	O
;	O
}	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
}	O
static	O
void	O
set_margin	function
(	O
mu_stream_t	pointer
str	pointer
,	O
unsigned	O
margin	int
)	O
{	O
mu_stream_ioctl	function
(	O
str	pointer
,	O
MU_IOCTL_WORDWRAPSTREAM	int
,	O
MU_IOCTL_WORDWRAP_SET_MARGIN	int
,	O
&	O
margin	int
)	O
;	O
}	O
static	O
void	O
set_next_margin	function
(	O
mu_stream_t	pointer
str	pointer
,	O
unsigned	O
margin	int
)	O
{	O
mu_stream_ioctl	function
(	O
str	pointer
,	O
MU_IOCTL_WORDWRAPSTREAM	int
,	O
MU_IOCTL_WORDWRAP_SET_NEXT_MARGIN	int
,	O
&	O
margin	int
)	O
;	O
}	O
static	O
void	O
get_offset	function
(	O
mu_stream_t	pointer
str	pointer
,	O
unsigned	O
*	O
offset	long
)	O
{	O
mu_stream_ioctl	function
(	O
str	pointer
,	O
MU_IOCTL_WORDWRAPSTREAM	int
,	O
MU_IOCTL_WORDWRAP_GET_COLUMN	int
,	O
offset	long
)	O
;	O
}	O
static	O
void	O
print_opt_arg	function
(	O
mu_stream_t	pointer
str	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
int	O
delim	int
)	O
{	O
if	O
(	O
opt	pointer
->	O
opt_flags	int
&	O
MU_OPTION_ARG_OPTIONAL	int
)	O
{	O
if	O
(	O
delim	int
==	O
'='	O
)	O
mu_stream_printf	function
(	O
str	pointer
,	O
"[=%s]"	pointer
,	O
gettext	function
(	O
opt	pointer
->	O
opt_arg	pointer
)	O
)	O
;	O
else	O
mu_stream_printf	function
(	O
str	pointer
,	O
"[%s]"	pointer
,	O
gettext	function
(	O
opt	pointer
->	O
opt_arg	pointer
)	O
)	O
;	O
}	O
else	O
mu_stream_printf	function
(	O
str	pointer
,	O
"%c%s"	pointer
,	O
delim	int
,	O
gettext	function
(	O
opt	pointer
->	O
opt_arg	pointer
)	O
)	O
;	O
}	O
static	O
size_t	long
print_option	function
(	O
mu_stream_t	pointer
str	pointer
,	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
size_t	long
num	long
,	O
int	O
*	O
argsused	pointer
)	O
{	O
struct	O
mu_option	struct
*	O
opt	pointer
=	O
po	pointer
->	O
po_optv	pointer
[	O
num	long
]	O
;	O
size_t	long
next	long
,	O
i	long
;	O
int	O
delim	int
;	O
int	O
first_option	int
=	O
1	int
;	O
int	O
first_long_option	int
=	O
1	int
;	O
if	O
(	O
MU_OPTION_IS_GROUP_HEADER	O
(	O
opt	pointer
)	O
)	O
{	O
if	O
(	O
num	long
)	O
mu_stream_printf	function
(	O
str	pointer
,	O
"\n"	pointer
)	O
;	O
if	O
(	O
opt	pointer
->	O
opt_doc	pointer
[	O
0	int
]	O
)	O
{	O
set_margin	function
(	O
str	pointer
,	O
header_col	int
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"%s\n"	pointer
,	O
gettext	function
(	O
opt	pointer
->	O
opt_doc	pointer
)	O
)	O
;	O
}	O
return	O
num	long
+	O
1	int
;	O
}	O
for	O
(	O
next	long
=	O
num	long
+	O
1	int
;	O
next	long
<	O
po	pointer
->	O
po_optc	long
&&	O
po	pointer
->	O
po_optv	pointer
[	O
next	long
]	O
->	O
opt_flags	int
&	O
MU_OPTION_ALIAS	int
;	O
next	long
++	O
)	O
;	O
if	O
(	O
opt	pointer
->	O
opt_flags	int
&	O
MU_OPTION_HIDDEN	int
)	O
return	O
next	long
;	O
if	O
(	O
po	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_SINGLE_DASH	int
)	O
{	O
if	O
(	O
!	O
opt	pointer
->	O
opt_long	pointer
)	O
return	O
num	long
+	O
1	int
;	O
set_margin	function
(	O
str	pointer
,	O
long_opt_col	int
)	O
;	O
}	O
else	O
{	O
set_margin	function
(	O
str	pointer
,	O
short_opt_col	int
)	O
;	O
for	O
(	O
i	long
=	O
num	long
;	O
i	long
<	O
next	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
MU_OPTION_IS_VALID_SHORT_OPTION	O
(	O
po	pointer
->	O
po_optv	pointer
[	O
i	long
]	O
)	O
)	O
{	O
if	O
(	O
first_option	int
)	O
first_option	int
=	O
0	int
;	O
else	O
mu_stream_printf	function
(	O
str	pointer
,	O
", "	pointer
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"-%c"	pointer
,	O
po	pointer
->	O
po_optv	pointer
[	O
i	long
]	O
->	O
opt_short	int
)	O
;	O
delim	int
=	O
' '	O
;	O
if	O
(	O
opt	pointer
->	O
opt_arg	pointer
&&	O
dup_args	int
)	O
print_opt_arg	function
(	O
str	pointer
,	O
opt	pointer
,	O
delim	int
)	O
;	O
}	O
}	O
}	O
for	O
(	O
i	long
=	O
num	long
;	O
i	long
<	O
next	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
MU_OPTION_IS_VALID_LONG_OPTION	O
(	O
po	pointer
->	O
po_optv	pointer
[	O
i	long
]	O
)	O
)	O
{	O
if	O
(	O
first_option	int
)	O
first_option	int
=	O
0	int
;	O
else	O
mu_stream_printf	function
(	O
str	pointer
,	O
", "	pointer
)	O
;	O
if	O
(	O
first_long_option	int
)	O
{	O
unsigned	O
off	int
;	O
get_offset	function
(	O
str	pointer
,	O
&	O
off	int
)	O
;	O
if	O
(	O
off	int
<	O
long_opt_col	int
)	O
set_margin	function
(	O
str	pointer
,	O
long_opt_col	int
)	O
;	O
first_long_option	int
=	O
0	int
;	O
}	O
mu_stream_printf	function
(	O
str	pointer
,	O
"%s"	pointer
,	O
po	pointer
->	O
po_long_opt_start	pointer
)	O
;	O
if	O
(	O
mu_option_possible_negation	function
(	O
po	pointer
,	O
po	pointer
->	O
po_optv	pointer
[	O
i	long
]	O
)	O
)	O
mu_stream_printf	function
(	O
str	pointer
,	O
"[%s]"	pointer
,	O
po	pointer
->	O
po_negation	pointer
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"%s"	pointer
,	O
po	pointer
->	O
po_optv	pointer
[	O
i	long
]	O
->	O
opt_long	pointer
)	O
;	O
delim	int
=	O
(	O
(	O
po	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_SINGLE_DASH	int
)	O
&&	O
!	O
(	O
opt	pointer
->	O
opt_flags	int
&	O
MU_OPTION_ARG_OPTIONAL	int
)	O
)	O
?	O
' '	O
:	O
'='	O
;	O
if	O
(	O
opt	pointer
->	O
opt_arg	pointer
&&	O
dup_args	int
)	O
print_opt_arg	function
(	O
str	pointer
,	O
opt	pointer
,	O
delim	int
)	O
;	O
}	O
}	O
if	O
(	O
opt	pointer
->	O
opt_arg	pointer
)	O
{	O
*	O
argsused	pointer
=	O
1	int
;	O
if	O
(	O
!	O
dup_args	int
)	O
print_opt_arg	function
(	O
str	pointer
,	O
opt	pointer
,	O
delim	int
)	O
;	O
}	O
set_margin	function
(	O
str	pointer
,	O
opt_doc_col	int
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"%s\n"	pointer
,	O
gettext	function
(	O
opt	pointer
->	O
opt_doc	pointer
)	O
)	O
;	O
return	O
next	long
;	O
}	O
void	O
mu_option_describe_options	function
(	O
mu_stream_t	pointer
str	pointer
,	O
struct	O
mu_parseopt	struct
*	O
po	pointer
)	O
{	O
unsigned	O
i	long
;	O
int	O
argsused	pointer
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
po	pointer
->	O
po_optc	long
;	O
)	O
i	long
=	O
print_option	function
(	O
str	pointer
,	O
po	pointer
,	O
i	long
,	O
&	O
argsused	pointer
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"\n"	pointer
)	O
;	O
if	O
(	O
argsused	pointer
&&	O
!	O
(	O
po	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_SINGLE_DASH	int
)	O
&&	O
dup_args_note	int
)	O
{	O
set_margin	function
(	O
str	pointer
,	O
0	int
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"%s\n\n"	pointer
,	O
_	O
(	O
"Mandatory or optional arguments to long options are also mandatory or optional for any corresponding short options."	pointer
)	O
)	O
;	O
}	O
}	O
static	O
void	O
print_program_usage	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
int	O
optsum	int
,	O
mu_stream_t	pointer
str	pointer
)	O
;	O
int	O
mu_parseopt_help_stream_create	function
(	O
mu_stream_t	pointer
*	O
retstr	pointer
,	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
mu_stream_t	pointer
outstr	pointer
)	O
{	O
init_usage_vars	function
(	O
po	pointer
)	O
;	O
return	O
mu_wordwrap_stream_create	function
(	O
retstr	pointer
,	O
outstr	pointer
,	O
0	int
,	O
rmargin	int
)	O
;	O
}	O
void	O
mu_program_help	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
mu_stream_t	pointer
outstr	pointer
)	O
{	O
mu_stream_t	pointer
str	pointer
;	O
if	O
(	O
mu_parseopt_help_stream_create	function
(	O
&	O
str	pointer
,	O
po	pointer
,	O
outstr	pointer
)	O
)	O
abort	function
(	O
)	O
;	O
print_program_usage	function
(	O
po	pointer
,	O
0	int
,	O
str	pointer
)	O
;	O
if	O
(	O
po	pointer
->	O
po_prog_doc	pointer
)	O
{	O
set_margin	function
(	O
str	pointer
,	O
0	int
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"%s\n"	pointer
,	O
gettext	function
(	O
po	pointer
->	O
po_prog_doc	pointer
)	O
)	O
;	O
}	O
mu_stream_printf	function
(	O
str	pointer
,	O
"\n"	pointer
)	O
;	O
if	O
(	O
po	pointer
->	O
po_prog_doc_hook	pointer
)	O
{	O
po	pointer
->	O
po_prog_doc_hook	pointer
(	O
po	pointer
,	O
str	pointer
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
mu_option_describe_options	function
(	O
str	pointer
,	O
po	pointer
)	O
;	O
if	O
(	O
po	pointer
->	O
po_help_hook	pointer
)	O
{	O
po	pointer
->	O
po_help_hook	pointer
(	O
po	pointer
,	O
str	pointer
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
set_margin	function
(	O
str	pointer
,	O
0	int
)	O
;	O
if	O
(	O
po	pointer
->	O
po_bug_address	pointer
)	O
mu_stream_printf	function
(	O
str	pointer
,	O
_	O
(	O
"Report bugs to <%s>.\n"	pointer
)	O
,	O
po	pointer
->	O
po_bug_address	pointer
)	O
;	O
if	O
(	O
po	pointer
->	O
po_package_name	pointer
&&	O
po	pointer
->	O
po_package_url	pointer
)	O
mu_stream_printf	function
(	O
str	pointer
,	O
_	O
(	O
"%s home page: <%s>\n"	pointer
)	O
,	O
po	pointer
->	O
po_package_name	pointer
,	O
po	pointer
->	O
po_package_url	pointer
)	O
;	O
if	O
(	O
po	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_EXTRA_INFO	int
)	O
mu_stream_printf	function
(	O
str	pointer
,	O
"%s\n"	pointer
,	O
_	O
(	O
po	pointer
->	O
po_extra_info	pointer
)	O
)	O
;	O
mu_stream_destroy	function
(	O
&	O
str	pointer
)	O
;	O
}	O
static	O
struct	O
mu_option	struct
*	O
*	O
option_tab	pointer
;	O
static	O
int	O
cmpidx_short	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
unsigned	O
const	O
*	O
ai	pointer
=	O
(	O
unsigned	O
const	O
*	O
)	O
a	pointer
;	O
unsigned	O
const	O
*	O
bi	pointer
=	O
(	O
unsigned	O
const	O
*	O
)	O
b	pointer
;	O
int	O
ac	int
=	O
option_tab	pointer
[	O
*	O
ai	pointer
]	O
->	O
opt_short	int
;	O
int	O
bc	int
=	O
option_tab	pointer
[	O
*	O
bi	pointer
]	O
->	O
opt_short	int
;	O
int	O
d	int
;	O
if	O
(	O
mu_isalpha	O
(	O
ac	int
)	O
)	O
{	O
if	O
(	O
!	O
mu_isalpha	O
(	O
bc	int
)	O
)	O
return	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
mu_isalpha	O
(	O
bc	int
)	O
)	O
return	O
1	int
;	O
d	int
=	O
mu_tolower	O
(	O
ac	int
)	O
-	O
mu_tolower	O
(	O
bc	int
)	O
;	O
if	O
(	O
d	int
==	O
0	int
)	O
d	int
=	O
mu_isupper	O
(	O
ac	int
)	O
?	O
1	int
:	O
-	O
1	int
;	O
return	O
d	int
;	O
}	O
static	O
int	O
cmpidx_long	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
unsigned	O
const	O
*	O
ai	pointer
=	O
(	O
unsigned	O
const	O
*	O
)	O
a	pointer
;	O
unsigned	O
const	O
*	O
bi	pointer
=	O
(	O
unsigned	O
const	O
*	O
)	O
b	pointer
;	O
struct	O
mu_option	struct
const	O
*	O
ap	array
=	O
option_tab	pointer
[	O
*	O
ai	pointer
]	O
;	O
struct	O
mu_option	struct
const	O
*	O
bp	pointer
=	O
option_tab	pointer
[	O
*	O
bi	pointer
]	O
;	O
return	O
strcmp	function
(	O
ap	array
->	O
opt_long	pointer
,	O
bp	pointer
->	O
opt_long	pointer
)	O
;	O
}	O
static	O
void	O
option_summary	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
mu_stream_t	pointer
str	pointer
)	O
{	O
unsigned	O
i	long
;	O
unsigned	O
*	O
idxbuf	pointer
;	O
unsigned	O
nidx	int
;	O
struct	O
mu_option	struct
*	O
*	O
optbuf	pointer
=	O
po	pointer
->	O
po_optv	pointer
;	O
size_t	long
optcnt	long
=	O
po	pointer
->	O
po_optc	long
;	O
option_tab	pointer
=	O
optbuf	pointer
;	O
idxbuf	pointer
=	O
mu_calloc	function
(	O
optcnt	long
,	O
sizeof	O
(	O
idxbuf	pointer
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
(	O
po	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_SINGLE_DASH	int
)	O
)	O
{	O
for	O
(	O
i	long
=	O
nidx	int
=	O
0	int
;	O
i	long
<	O
optcnt	long
;	O
i	long
++	O
)	O
if	O
(	O
MU_OPTION_IS_VALID_SHORT_OPTION	O
(	O
optbuf	pointer
[	O
i	long
]	O
)	O
&&	O
!	O
optbuf	pointer
[	O
i	long
]	O
->	O
opt_arg	pointer
)	O
idxbuf	pointer
[	O
nidx	int
++	O
]	O
=	O
i	long
;	O
if	O
(	O
nidx	int
)	O
{	O
qsort	function
(	O
idxbuf	pointer
,	O
nidx	int
,	O
sizeof	O
(	O
idxbuf	pointer
[	O
0	int
]	O
)	O
,	O
cmpidx_short	function
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"[-"	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nidx	int
;	O
i	long
++	O
)	O
{	O
mu_stream_printf	function
(	O
str	pointer
,	O
"%c"	pointer
,	O
optbuf	pointer
[	O
idxbuf	pointer
[	O
i	long
]	O
]	O
->	O
opt_short	int
)	O
;	O
}	O
mu_stream_printf	function
(	O
str	pointer
,	O
"%c"	pointer
,	O
']'	O
)	O
;	O
}	O
for	O
(	O
i	long
=	O
nidx	int
=	O
0	int
;	O
i	long
<	O
optcnt	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
MU_OPTION_IS_VALID_SHORT_OPTION	O
(	O
optbuf	pointer
[	O
i	long
]	O
)	O
&&	O
optbuf	pointer
[	O
i	long
]	O
->	O
opt_arg	pointer
)	O
idxbuf	pointer
[	O
nidx	int
++	O
]	O
=	O
i	long
;	O
}	O
if	O
(	O
nidx	int
)	O
{	O
qsort	function
(	O
idxbuf	pointer
,	O
nidx	int
,	O
sizeof	O
(	O
idxbuf	pointer
[	O
0	int
]	O
)	O
,	O
cmpidx_short	function
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nidx	int
;	O
i	long
++	O
)	O
{	O
struct	O
mu_option	struct
*	O
opt	pointer
=	O
optbuf	pointer
[	O
idxbuf	pointer
[	O
i	long
]	O
]	O
;	O
const	O
char	O
*	O
arg	pointer
=	O
gettext	function
(	O
opt	pointer
->	O
opt_arg	pointer
)	O
;	O
if	O
(	O
opt	pointer
->	O
opt_flags	int
&	O
MU_OPTION_ARG_OPTIONAL	int
)	O
mu_stream_printf	function
(	O
str	pointer
,	O
" [-%c[%s]]"	pointer
,	O
opt	pointer
->	O
opt_short	int
,	O
arg	pointer
)	O
;	O
else	O
mu_stream_printf	function
(	O
str	pointer
,	O
" [-%c %s]"	pointer
,	O
opt	pointer
->	O
opt_short	int
,	O
arg	pointer
)	O
;	O
}	O
}	O
}	O
for	O
(	O
i	long
=	O
nidx	int
=	O
0	int
;	O
i	long
<	O
optcnt	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
MU_OPTION_IS_VALID_LONG_OPTION	O
(	O
optbuf	pointer
[	O
i	long
]	O
)	O
)	O
idxbuf	pointer
[	O
nidx	int
++	O
]	O
=	O
i	long
;	O
}	O
if	O
(	O
nidx	int
)	O
{	O
qsort	function
(	O
idxbuf	pointer
,	O
nidx	int
,	O
sizeof	O
(	O
idxbuf	pointer
[	O
0	int
]	O
)	O
,	O
cmpidx_long	function
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nidx	int
;	O
i	long
++	O
)	O
{	O
struct	O
mu_option	struct
*	O
opt	pointer
=	O
optbuf	pointer
[	O
idxbuf	pointer
[	O
i	long
]	O
]	O
;	O
const	O
char	O
*	O
arg	pointer
=	O
opt	pointer
->	O
opt_arg	pointer
?	O
gettext	function
(	O
opt	pointer
->	O
opt_arg	pointer
)	O
:	O
NULL	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
" [%s"	pointer
,	O
po	pointer
->	O
po_long_opt_start	pointer
)	O
;	O
if	O
(	O
mu_option_possible_negation	function
(	O
po	pointer
,	O
opt	pointer
)	O
)	O
mu_stream_printf	function
(	O
str	pointer
,	O
"[%s]"	pointer
,	O
po	pointer
->	O
po_negation	pointer
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"%s"	pointer
,	O
opt	pointer
->	O
opt_long	pointer
)	O
;	O
if	O
(	O
opt	pointer
->	O
opt_arg	pointer
)	O
{	O
if	O
(	O
opt	pointer
->	O
opt_flags	int
&	O
MU_OPTION_ARG_OPTIONAL	int
)	O
mu_stream_printf	function
(	O
str	pointer
,	O
"[=%s]"	pointer
,	O
arg	pointer
)	O
;	O
else	O
if	O
(	O
po	pointer
->	O
po_flags	int
&	O
MU_PARSEOPT_SINGLE_DASH	int
)	O
mu_stream_printf	function
(	O
str	pointer
,	O
" %s"	pointer
,	O
arg	pointer
)	O
;	O
else	O
mu_stream_printf	function
(	O
str	pointer
,	O
"=%s"	pointer
,	O
arg	pointer
)	O
;	O
}	O
mu_stream_printf	function
(	O
str	pointer
,	O
"%c"	pointer
,	O
']'	O
)	O
;	O
}	O
}	O
if	O
(	O
po	pointer
->	O
po_special_args	pointer
)	O
mu_stream_printf	function
(	O
str	pointer
,	O
" %s"	pointer
,	O
gettext	function
(	O
po	pointer
->	O
po_special_args	pointer
)	O
)	O
;	O
free	function
(	O
idxbuf	pointer
)	O
;	O
}	O
static	O
void	O
print_program_usage	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
int	O
optsum	int
,	O
mu_stream_t	pointer
str	pointer
)	O
{	O
char	O
const	O
*	O
usage_text	pointer
;	O
char	O
const	O
*	O
*	O
arg_text	pointer
;	O
size_t	long
i	long
;	O
usage_text	pointer
=	O
_	O
(	O
"Usage:"	pointer
)	O
;	O
arg_text	pointer
=	O
po	pointer
->	O
po_prog_args	pointer
;	O
i	long
=	O
0	int
;	O
do	O
{	O
mu_stream_printf	function
(	O
str	pointer
,	O
"%s %s "	pointer
,	O
usage_text	pointer
,	O
po	pointer
->	O
po_prog_name	pointer
)	O
;	O
set_next_margin	function
(	O
str	pointer
,	O
usage_indent	int
)	O
;	O
if	O
(	O
optsum	int
)	O
{	O
option_summary	function
(	O
po	pointer
,	O
str	pointer
)	O
;	O
optsum	int
=	O
0	int
;	O
}	O
else	O
{	O
mu_stream_printf	function
(	O
str	pointer
,	O
"[%s...]"	pointer
,	O
_	O
(	O
"OPTION"	pointer
)	O
)	O
;	O
if	O
(	O
po	pointer
->	O
po_special_args	pointer
)	O
mu_stream_printf	function
(	O
str	pointer
,	O
" %s"	pointer
,	O
gettext	function
(	O
po	pointer
->	O
po_special_args	pointer
)	O
)	O
;	O
}	O
if	O
(	O
arg_text	pointer
)	O
{	O
mu_stream_printf	function
(	O
str	pointer
,	O
" %s\n"	pointer
,	O
gettext	function
(	O
arg_text	pointer
[	O
i	long
]	O
)	O
)	O
;	O
if	O
(	O
i	long
==	O
0	int
)	O
usage_text	pointer
=	O
_	O
(	O
"or: "	pointer
)	O
;	O
set_margin	function
(	O
str	pointer
,	O
2	int
)	O
;	O
i	long
++	O
;	O
}	O
else	O
mu_stream_flush	function
(	O
str	pointer
)	O
;	O
}	O
while	O
(	O
arg_text	pointer
&&	O
arg_text	pointer
[	O
i	long
]	O
)	O
;	O
}	O
void	O
mu_program_usage	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
int	O
optsum	int
,	O
mu_stream_t	pointer
outstr	pointer
)	O
{	O
mu_stream_t	pointer
str	pointer
;	O
if	O
(	O
mu_parseopt_help_stream_create	function
(	O
&	O
str	pointer
,	O
po	pointer
,	O
outstr	pointer
)	O
)	O
abort	function
(	O
)	O
;	O
print_program_usage	function
(	O
po	pointer
,	O
optsum	int
,	O
str	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
str	pointer
)	O
;	O
}	O
void	O
mu_program_version	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
mu_stream_t	pointer
outstr	pointer
)	O
{	O
mu_stream_t	pointer
str	pointer
;	O
if	O
(	O
mu_parseopt_help_stream_create	function
(	O
&	O
str	pointer
,	O
po	pointer
,	O
outstr	pointer
)	O
)	O
abort	function
(	O
)	O
;	O
po	pointer
->	O
po_version_hook	pointer
(	O
po	pointer
,	O
str	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
str	pointer
)	O
;	O
}	O
