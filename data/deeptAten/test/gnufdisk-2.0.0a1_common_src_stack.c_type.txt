struct	O
gnufdisk_stack	struct
{	O
void	O
*	O
data	pointer
;	O
int	O
size	int
;	O
int	O
index	int
;	O
}	O
;	O
struct	O
gnufdisk_stack	struct
*	O
gnufdisk_stack_new	pointer
(	O
void	O
)	O
{	O
struct	O
gnufdisk_stack	struct
*	O
ret	pointer
;	O
int	O
err	int
;	O
if	O
(	O
(	O
ret	O
=	O
malloc	int
(	O
sizeof	int
(	O
struct	pointer
gnufdisk_stack	struct
)	O
)	O
)	O
==	O
NULL	O
)	O
{	O
err	O
=	O
ENOMEM	int
;	O
goto	O
lb_out	O
;	O
}	O
memset	O
(	O
ret	O
,	O
0	int
,	O
sizeof	int
(	O
struct	O
gnufdisk_stack	struct
)	O
)	O
;	O
lb_out	O
:	O
errno	O
=	O
err	int
;	O
return	O
ret	int
;	O
}	O
int	O
gnufdisk_stack_delete	function
(	O
struct	O
gnufdisk_stack	struct
*	O
_s	pointer
)	O
{	O
int	O
ret	int
;	O
int	O
err	int
;	O
if	O
(	O
gnufdisk_check_memory	O
(	O
_s	pointer
,	O
sizeof	int
(	O
struct	pointer
gnufdisk_stack	struct
)	O
,	O
0	O
)	O
!=	O
0	O
)	O
{	O
err	O
=	O
errno	int
;	O
ret	O
=	O
-	int
1	int
;	O
goto	O
lb_out	O
;	O
}	O
if	O
(	O
_s	O
->	O
data	pointer
)	O
{	O
if	O
(	O
gnufdisk_check_memory	O
(	O
_s	pointer
->	O
data	pointer
,	O
_s	int
->	O
size	pointer
,	O
0	int
)	O
!=	O
0	O
)	O
{	O
err	O
=	O
errno	int
;	O
ret	O
=	O
-	int
1	int
;	O
goto	O
lb_out	O
;	O
}	O
free	O
(	O
_s	pointer
->	O
data	pointer
)	O
;	O
_s	O
->	O
data	pointer
=	O
NULL	int
;	O
}	pointer
free	O
(	O
_s	pointer
)	O
;	O
err	O
=	O
0	int
;	O
ret	O
=	O
0	int
;	O
lb_out	int
:	O
errno	O
=	O
err	int
;	O
return	O
ret	int
;	O
}	O
int	O
gnufdisk_stack_push	function
(	O
struct	O
gnufdisk_stack	struct
*	O
_s	pointer
,	O
void	O
*	O
_data	pointer
,	O
size_t	O
_size	O
)	O
{	O
int	O
ret	int
;	O
int	O
err	int
;	O
if	O
(	O
gnufdisk_check_memory	O
(	O
_s	pointer
,	O
sizeof	int
(	O
struct	pointer
gnufdisk_stack	struct
)	O
,	O
0	O
)	O
!=	O
0	O
)	O
{	O
err	O
=	O
errno	int
;	O
ret	O
=	O
-	int
1	int
;	O
goto	O
lb_out	O
;	O
}	O
else	O
if	O
(	O
gnufdisk_check_memory	O
(	O
_data	pointer
,	O
_size	pointer
,	O
1	int
)	O
!=	O
0	int
)	O
{	O
err	O
=	O
EFAULT	int
;	O
ret	O
=	O
-	int
1	int
;	O
goto	O
lb_out	O
;	O
}	O
if	O
(	O
_size	O
>	O
_s	int
->	O
size	int
-	O
_s	int
->	O
index	pointer
)	O
{	O
void	O
*	O
data	pointer
;	O
int	O
size	int
;	O
size	O
=	O
_s	O
->	O
size	pointer
+	O
32	int
;	O
if	O
(	O
(	O
data	O
=	O
malloc	int
(	O
size	int
)	O
)	O
==	O
NULL	O
)	O
{	O
err	O
=	O
ENOMEM	int
;	O
ret	O
=	O
-	int
1	int
;	O
goto	O
lb_out	O
;	O
}	O
if	O
(	O
_s	O
->	O
data	pointer
)	O
{	O
memcpy	O
(	O
data	pointer
,	O
_s	pointer
->	O
data	pointer
,	O
_s	pointer
->	O
index	pointer
)	O
;	O
free	O
(	O
_s	pointer
->	O
data	pointer
)	O
;	O
}	O
_s	O
->	O
data	pointer
=	O
data	O
;	O
_s	O
->	O
size	pointer
=	O
size	int
;	O
return	pointer
gnufdisk_stack_push	int
(	O
_s	pointer
,	O
_data	pointer
,	O
_size	int
)	O
;	O
}	O
memcpy	O
(	O
_s	pointer
->	O
data	pointer
+	O
_s	int
->	O
index	pointer
,	O
_data	pointer
,	O
_size	pointer
)	O
;	O
_s	O
->	O
index	pointer
+=	O
_size	int
;	O
err	pointer
=	O
0	int
;	O
ret	O
=	O
0	int
;	O
lb_out	int
:	O
errno	O
=	O
err	int
;	O
return	O
ret	int
;	O
}	O
int	O
gnufdisk_stack_pop	function
(	O
struct	O
gnufdisk_stack	struct
*	O
_s	pointer
,	O
void	O
*	O
_dest	pointer
,	O
size_t	O
_size	O
)	O
{	O
int	O
ret	int
;	O
int	O
err	int
;	O
if	O
(	O
gnufdisk_check_memory	O
(	O
_s	pointer
,	O
sizeof	int
(	O
struct	pointer
gnufdisk_stack	struct
)	O
,	O
0	O
)	O
!=	O
0	O
||	O
(	O
_s	O
->	O
data	pointer
&&	O
gnufdisk_check_memory	O
(	O
_s	pointer
->	O
data	pointer
,	O
_s	int
->	O
size	pointer
,	O
0	int
)	O
!=	O
0	O
)	O
||	O
gnufdisk_check_memory	O
(	O
_dest	pointer
,	O
_size	pointer
,	O
0	int
)	O
!=	O
0	O
)	O
{	O
err	O
=	O
errno	int
;	O
ret	O
=	O
-	int
1	int
;	O
goto	O
lb_out	O
;	O
}	O
else	O
if	O
(	O
_size	O
>	O
_s	int
->	O
index	int
)	O
{	O
err	O
=	O
ENOBUFS	int
;	O
ret	O
=	O
-	int
1	int
;	O
goto	O
lb_out	O
;	O
}	O
memcpy	O
(	O
_dest	pointer
,	O
_s	pointer
->	O
data	pointer
+	O
(	int
_s	O
->	O
index	pointer
-	O
_size	int
)	O
,	O
_size	O
)	O
;	O
_s	O
->	O
index	pointer
-=	O
_size	int
;	O
ret	pointer
=	O
0	int
;	O
err	int
=	O
0	int
;	O
lb_out	int
:	O
errno	O
=	O
err	int
;	O
return	O
ret	int
;	O
}	O