static	O
char	O
*	O
patterns	O
[	O
]	O
=	O
{	O
"13"	O
,	O
"31"	O
}	O
;	O
static	O
char	O
*	O
fillers	function
[	O
]	O
=	O
{	O
"031"	pointer
,	O
"131"	O
}	O
;	O
static	O
int	O
width	function
=	O
16	O
,	O
startpos	O
=	O
6	int
;	O
int	O
Barcode_msi_verify	int
(	O
char	O
*	O
text	pointer
)	O
{	O
int	O
i	int
;	O
if	O
(	O
!	O
strlen	pointer
(	O
text	pointer
)	O
)	O
return	O
-	int
1	int
;	O
for	O
(	O
i	O
=	O
0	int
;	O
text	int
[	O
i	int
]	O
;	O
i	O
++	O
)	O
{	O
if	O
(	O
!	O
isdigit	O
(	O
text	pointer
[	O
i	int
]	O
)	O
)	O
return	O
-	int
1	int
;	O
}	O
return	O
0	O
;	O
}	O
static	O
int	O
add_one	function
(	O
char	O
*	O
ptr	pointer
,	O
int	O
code	int
)	O
{	O
sprintf	O
(	O
ptr	pointer
,	O
"%s%s%s%s"	pointer
,	O
patterns	pointer
[	O
(	int
code	int
>>	O
3	int
)	O
&	O
1	pointer
]	O
,	O
patterns	O
[	O
(	int
code	O
>>	O
2	int
)	O
&	O
1	pointer
]	O
,	O
patterns	O
[	O
(	int
code	O
>>	O
1	int
)	O
&	O
1	pointer
]	O
,	O
patterns	O
[	O
code	int
&	O
1	int
]	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
Barcode_msi_encode	function
(	O
struct	O
Barcode_Item	struct
*	O
bc	pointer
)	O
{	O
static	O
char	O
*	O
text	pointer
;	O
static	O
char	O
*	O
partial	pointer
;	O
static	O
char	O
*	O
textinfo	pointer
;	O
char	O
*	O
ptr	pointer
,	O
*	O
textptr	pointer
;	O
int	O
i	int
,	O
code	O
,	O
textpos	int
,	O
usesum	int
,	O
checksum	int
=	O
0	int
;	O
if	O
(	O
bc	O
->	O
partial	pointer
)	O
free	O
(	O
bc	pointer
->	O
partial	pointer
)	O
;	O
if	O
(	O
bc	O
->	O
textinfo	pointer
)	O
free	O
(	O
bc	pointer
->	O
textinfo	pointer
)	O
;	O
bc	O
->	O
partial	pointer
=	O
bc	pointer
->	O
textinfo	pointer
=	O
NULL	pointer
;	O
if	pointer
(	O
!	O
bc	O
->	O
encoding	pointer
)	O
bc	O
->	O
encoding	pointer
=	O
strdup	pointer
(	O
"msi"	pointer
)	O
;	O
if	O
(	O
(	O
bc	O
->	O
flags	pointer
&	O
BARCODE_NO_CHECKSUM	int
)	O
)	O
usesum	O
=	O
0	int
;	O
else	O
usesum	O
=	O
1	int
;	O
text	O
=	O
bc	O
->	O
ascii	pointer
;	O
partial	O
=	O
malloc	pointer
(	O
3	int
+	O
8	int
*	O
(	O
strlen	O
(	O
text	pointer
)	O
+	O
1	int
)	O
+	O
3	int
+	O
2	int
)	O
;	O
if	O
(	O
!	O
partial	O
)	O
{	O
bc	function
->	O
error	pointer
=	O
errno	int
;	O
return	O
-	int
1	int
;	O
}	O
textinfo	O
=	O
malloc	function
(	O
10	int
*	O
strlen	O
(	O
text	pointer
)	O
+	O
2	int
)	O
;	O
if	O
(	O
!	O
textinfo	pointer
)	O
{	O
bc	function
->	O
error	pointer
=	O
errno	int
;	O
free	O
(	O
partial	pointer
)	O
;	O
return	O
-	int
1	int
;	O
}	O
strcpy	O
(	O
partial	pointer
,	O
fillers	pointer
[	O
0	int
]	O
)	O
;	O
ptr	O
=	O
partial	O
+	O
strlen	O
(	O
partial	pointer
)	O
;	O
textptr	O
=	O
textinfo	O
;	O
textpos	O
=	O
startpos	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
strlen	int
(	O
text	pointer
)	O
;	O
i	O
++	O
)	O
{	O
code	O
=	O
text	int
[	O
i	int
]	O
-	O
'0'	int
;	O
add_one	pointer
(	O
ptr	pointer
,	O
code	pointer
)	O
;	O
sprintf	O
(	O
textptr	pointer
,	O
"%i:12:%c "	pointer
,	O
textpos	int
,	O
text	int
[	O
i	int
]	O
)	O
;	O
textpos	O
+=	O
width	int
;	O
textptr	O
+=	O
strlen	O
(	O
textptr	pointer
)	O
;	O
ptr	O
+=	O
strlen	int
(	O
ptr	pointer
)	O
;	O
if	O
(	O
usesum	O
)	O
{	O
if	O
(	O
(	O
i	O
^	O
strlen	O
(	O
text	pointer
)	O
)	O
&	O
1	pointer
)	O
{	O
checksum	O
+=	O
2	int
*	O
code	O
+	O
(	int
2	O
*	O
code	O
)	O
/	O
10	int
;	O
}	O
else	O
{	O
checksum	O
+=	O
code	int
;	O
}	O
}	O
}	O
if	O
(	O
usesum	O
)	O
{	O
checksum	O
=	O
(	int
checksum	O
+	O
9	int
)	O
/	O
10	int
*	O
10	O
-	O
checksum	int
;	O
add_one	int
(	O
ptr	pointer
,	O
checksum	int
)	O
;	O
ptr	O
+=	O
strlen	int
(	O
ptr	pointer
)	O
;	O
}	O
strcpy	O
(	O
ptr	pointer
,	O
fillers	pointer
[	O
1	int
]	O
)	O
;	O
bc	O
->	O
partial	pointer
=	O
partial	pointer
;	O
bc	pointer
->	O
textinfo	pointer
=	O
textinfo	int
;	O
return	O
0	int
;	O
}	O