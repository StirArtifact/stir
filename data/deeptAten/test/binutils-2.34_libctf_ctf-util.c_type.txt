void	O
ctf_list_append	O
(	O
ctf_list_t	O
*	O
lp	pointer
,	O
void	O
*	O
newp	pointer
)	O
{	O
ctf_list_t	O
*	O
p	pointer
=	O
lp	O
->	O
l_prev	pointer
;	O
ctf_list_t	O
*	O
q	pointer
=	O
newp	O
;	O
lp	O
->	O
l_prev	pointer
=	O
q	pointer
;	O
q	pointer
->	O
l_prev	pointer
=	O
p	int
;	O
q	pointer
->	O
l_next	pointer
=	O
NULL	int
;	O
if	pointer
(	O
p	O
!=	O
NULL	O
)	O
p	O
->	O
l_next	pointer
=	O
q	int
;	O
else	pointer
lp	O
->	O
l_next	pointer
=	O
q	int
;	O
}	pointer
void	O
ctf_list_prepend	function
(	O
ctf_list_t	O
*	O
lp	pointer
,	O
void	O
*	O
newp	pointer
)	O
{	O
ctf_list_t	O
*	O
p	pointer
=	O
newp	O
;	O
ctf_list_t	O
*	O
q	pointer
=	O
lp	O
->	O
l_next	pointer
;	O
lp	O
->	O
l_next	pointer
=	O
p	pointer
;	O
p	O
->	O
l_prev	pointer
=	O
NULL	int
;	O
p	pointer
->	O
l_next	pointer
=	O
q	int
;	O
if	pointer
(	O
q	O
!=	O
NULL	O
)	O
q	O
->	O
l_prev	pointer
=	O
p	int
;	O
else	pointer
lp	O
->	O
l_prev	pointer
=	O
p	int
;	O
}	pointer
void	O
ctf_list_delete	function
(	O
ctf_list_t	O
*	O
lp	pointer
,	O
void	O
*	O
existing	pointer
)	O
{	O
ctf_list_t	O
*	O
p	pointer
=	O
existing	O
;	O
if	O
(	O
p	O
->	O
l_prev	pointer
!=	O
NULL	O
)	O
p	O
->	O
l_prev	pointer
->	O
l_next	pointer
=	O
p	int
->	O
l_next	pointer
;	O
else	O
lp	O
->	O
l_next	pointer
=	O
p	O
->	O
l_next	pointer
;	O
if	O
(	O
p	O
->	O
l_next	pointer
!=	O
NULL	O
)	O
p	O
->	O
l_next	pointer
->	O
l_prev	pointer
=	O
p	int
->	O
l_prev	pointer
;	O
else	O
lp	O
->	O
l_prev	pointer
=	O
p	int
->	O
l_prev	pointer
;	O
}	O
int	O
ctf_list_empty_p	function
(	O
ctf_list_t	O
*	O
lp	pointer
)	O
{	O
return	O
(	int
lp	O
->	O
l_next	pointer
==	O
NULL	O
&&	O
lp	O
->	O
l_prev	pointer
==	O
NULL	O
)	O
;	O
}	O
Elf64_Sym	O
*	O
ctf_sym_to_elf64	function
(	O
const	O
Elf32_Sym	O
*	O
src	pointer
,	O
Elf64_Sym	O
*	O
dst	pointer
)	O
{	O
dst	O
->	O
st_name	pointer
=	O
src	O
->	O
st_name	pointer
;	O
dst	O
->	O
st_value	pointer
=	O
src	int
->	O
st_value	pointer
;	O
dst	O
->	O
st_size	pointer
=	O
src	int
->	O
st_size	pointer
;	O
dst	O
->	O
st_info	pointer
=	O
src	int
->	O
st_info	pointer
;	O
dst	O
->	O
st_other	pointer
=	O
src	int
->	O
st_other	pointer
;	O
dst	O
->	O
st_shndx	pointer
=	O
src	int
->	O
st_shndx	pointer
;	O
return	O
dst	int
;	O
}	O
char	O
*	O
ctf_str_append	function
(	O
char	O
*	O
s	pointer
,	O
const	O
char	O
*	O
append	pointer
)	O
{	O
size_t	O
s_len	O
=	O
0	pointer
;	O
if	O
(	O
append	long
==	O
NULL	O
)	O
return	O
s	O
;	O
if	O
(	O
s	O
!=	O
NULL	O
)	O
s_len	O
=	O
strlen	pointer
(	O
s	pointer
)	O
;	O
size_t	O
append_len	O
=	O
strlen	O
(	O
append	pointer
)	O
;	O
if	O
(	O
(	long
s	long
=	O
realloc	O
(	O
s	pointer
,	O
s_len	O
+	O
append_len	int
+	O
1	int
)	O
)	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
memcpy	O
(	O
s	pointer
+	O
s_len	long
,	O
append	long
,	O
append_len	pointer
)	O
;	O
s	O
[	O
s_len	int
+	O
append_len	int
]	O
=	O
'\0'	pointer
;	O
return	pointer
s	int
;	O
}	O
char	O
*	O
ctf_str_append_noerr	function
(	O
char	O
*	O
s	pointer
,	O
const	O
char	O
*	O
append	pointer
)	O
{	O
char	O
*	O
new_s	pointer
;	O
new_s	O
=	O
ctf_str_append	O
(	O
s	pointer
,	O
append	O
)	O
;	O
if	O
(	O
!	O
new_s	pointer
)	O
return	O
s	O
;	O
return	O
new_s	int
;	O
}	O
void	O
*	function
ctf_realloc	function
(	O
ctf_file_t	O
*	O
fp	pointer
,	O
void	O
*	O
ptr	pointer
,	O
size_t	O
size	O
)	O
{	O
if	O
(	O
fp	long
->	O
ctf_str_num_refs	pointer
>	O
0	int
)	O
{	O
ctf_dprintf	O
(	O
"%p: attempt to realloc() string table with %lu active refs\n"	pointer
,	O
(	pointer
void	O
*	O
)	O
fp	pointer
,	O
(	O
unsigned	O
long	O
)	O
fp	O
->	O
ctf_str_num_refs	pointer
)	O
;	O
return	O
NULL	int
;	O
}	O
return	O
realloc	O
(	O
ptr	pointer
,	O
size	O
)	O
;	O
}	O
void	O
*	function
ctf_set_open_errno	function
(	O
int	O
*	O
errp	pointer
,	O
int	O
error	O
)	O
{	O
if	O
(	O
errp	O
!=	O
NULL	O
)	O
*	O
errp	pointer
=	O
error	O
;	O
return	O
NULL	int
;	O
}	O
unsigned	O
long	O
ctf_set_errno	O
(	O
ctf_file_t	O
*	O
fp	pointer
,	O
int	O
err	int
)	O
{	O
fp	O
->	O
ctf_errno	pointer
=	O
err	pointer
;	O
return	O
CTF_ERR	int
;	O
}	O