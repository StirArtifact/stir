char	O
acl_docstring	O
[	O
]	O
=	O
N_	O
(	O
"test access control lists"	pointer
)	O
;	O
static	O
char	O
acl_args_doc	O
[	O
]	O
=	O
N_	O
(	O
"ADDRESS [ADDRESS...]"	pointer
)	O
;	O
static	O
char	O
*	O
input_file_name	pointer
;	O
static	O
struct	O
mu_sockaddr	struct
*	O
target_sa	pointer
;	O
static	O
mu_acl_t	O
acl	O
;	O
static	O
const	O
char	O
*	O
path	pointer
=	O
"acl"	O
;	O
static	O
struct	O
mu_option	struct
acl_options	O
[	O
]	O
=	O
{	O
{	pointer
"file"	pointer
,	O
'f'	pointer
,	O
N_	pointer
(	O
"FILE"	pointer
)	O
,	O
MU_OPTION_DEFAULT	O
,	O
N_	O
(	O
"read ACLs from FILE"	pointer
)	O
,	O
mu_c_string	O
,	O
&	O
input_file_name	pointer
}	O
,	O
{	O
"path"	pointer
,	O
'p'	O
,	O
N_	pointer
(	O
"PATH"	pointer
)	O
,	O
MU_OPTION_DEFAULT	O
,	O
N_	O
(	O
"path to the ACL in the configuration tree"	pointer
)	O
,	O
mu_c_string	O
,	O
&	O
path	pointer
}	O
,	O
{	O
NULL	pointer
}	O
}	O
;	O
static	O
struct	O
mu_cfg_param	struct
acl_cfg_param	O
[	O
]	O
=	O
{	O
{	pointer
"acl"	pointer
,	O
mu_cfg_section	pointer
,	O
&	pointer
acl	pointer
,	O
0	O
,	O
NULL	int
,	O
"access control list"	O
}	O
,	O
{	O
NULL	pointer
}	O
}	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	pointer
argv	pointer
)	O
{	O
int	O
rc	int
;	O
mu_acl_result_t	O
result	O
;	O
mu_cfg_tree_t	O
*	O
tree	pointer
=	O
NULL	O
,	O
*	O
temp_tree	pointer
=	O
NULL	O
;	O
mu_cfg_node_t	O
*	O
node	pointer
;	O
struct	O
mu_cfg_parse_hints	struct
hints	O
;	O
mu_action_getopt	O
(	O
&	O
argc	pointer
,	O
&	O
argv	pointer
,	O
acl_options	O
,	O
acl_docstring	pointer
,	O
acl_args_doc	pointer
)	O
;	O
if	O
(	O
argc	O
==	O
0	O
)	O
{	O
mu_error	O
(	O
_	pointer
(	O
"not enough arguments"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
memset	O
(	O
&	O
hints	pointer
,	O
0	O
,	O
sizeof	int
(	O
hints	O
)	O
)	O
;	O
hints	O
.	O
flags	pointer
=	O
MU_CFHINT_CUSTOM_FILE	int
;	O
hints	O
.	O
custom_file	pointer
=	O
input_file_name	O
;	O
mu_acl_cfg_init	pointer
(	O
)	pointer
;	O
if	O
(	O
mu_cfg_parse_config	O
(	O
&	pointer
tree	pointer
,	O
&	O
hints	pointer
)	O
)	O
exit	O
(	O
EX_CONFIG	int
)	O
;	O
if	O
(	O
!	O
tree	O
)	O
return	O
0	O
;	O
if	O
(	O
mu_cfg_find_node	O
(	O
tree	pointer
,	O
path	pointer
,	O
&	pointer
node	pointer
)	O
)	O
{	O
mu_error	O
(	O
_	pointer
(	O
"cannot find node: %s"	pointer
)	O
,	O
path	pointer
)	O
;	O
return	O
1	int
;	O
}	O
mu_cfg_tree_create	O
(	O
&	pointer
temp_tree	pointer
)	O
;	O
mu_cfg_tree_add_node	O
(	O
temp_tree	pointer
,	O
node	pointer
)	O
;	O
rc	O
=	O
mu_cfg_tree_reduce	function
(	O
temp_tree	pointer
,	O
NULL	pointer
,	O
acl_cfg_param	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	O
)	O
return	O
1	O
;	O
if	O
(	O
!	O
acl	O
)	O
{	O
mu_error	O
(	O
_	pointer
(	O
"No ACL found in config"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
while	O
(	O
argc	O
--	O
)	O
{	O
const	O
char	O
*	O
ap	O
=	O
*	O
argv	pointer
++	O
;	O
rc	O
=	O
mu_sockaddr_from_node	int
(	O
&	pointer
target_sa	pointer
,	O
ap	O
,	O
NULL	O
,	O
NULL	pointer
)	O
;	O
if	O
(	O
rc	O
)	O
{	O
mu_error	O
(	O
"mu_sockaddr_from_node: %s"	pointer
,	O
mu_strerror	pointer
(	O
rc	int
)	O
)	O
;	O
exit	O
(	O
1	int
)	O
;	O
}	O
mu_printf	O
(	O
"Testing %s:\n"	pointer
,	O
ap	pointer
)	O
;	O
rc	O
=	O
mu_acl_check_sockaddr	function
(	O
acl	pointer
,	O
target_sa	pointer
->	O
addr	pointer
,	O
target_sa	pointer
->	O
addrlen	pointer
,	O
&	pointer
result	pointer
)	O
;	O
mu_sockaddr_free_list	O
(	O
target_sa	pointer
)	O
;	O
if	O
(	O
rc	O
)	O
{	O
mu_error	O
(	O
"mu_acl_check_sockaddr failed: %s"	pointer
,	O
mu_strerror	pointer
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
switch	O
(	O
result	O
)	O
{	O
case	O
mu_acl_result_undefined	O
:	O
mu_printf	O
(	O
"%s: undefined\n"	pointer
,	O
ap	pointer
)	O
;	O
break	O
;	O
case	O
mu_acl_result_accept	O
:	O
mu_printf	O
(	O
"%s: accept\n"	pointer
,	O
ap	pointer
)	O
;	O
break	O
;	O
case	O
mu_acl_result_deny	O
:	O
mu_printf	O
(	O
"%s: deny\n"	pointer
,	O
ap	pointer
)	O
;	O
break	O
;	O
}	O
}	O
mu_cfg_destroy_tree	O
(	O
&	O
tree	pointer
)	O
;	O
mu_cfg_destroy_tree	O
(	O
&	pointer
temp_tree	pointer
)	O
;	O
return	O
0	int
;	O
}	O