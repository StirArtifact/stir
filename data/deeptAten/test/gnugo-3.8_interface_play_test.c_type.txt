static	O
void	O
replay_node	function
(	O
SGFNode	O
*	O
node	pointer
,	O
int	O
color_to_test	int
,	O
float	O
*	O
replay_score	pointer
,	O
float	O
*	O
total_score	pointer
)	O
;	O
void	O
play_replay	function
(	O
SGFTree	O
*	O
tree	pointer
,	O
int	O
color_to_replay	int
)	O
{	O
char	O
*	O
tmpc	pointer
=	O
NULL	O
;	O
float	O
replay_score	O
=	O
0.0	O
;	O
float	O
total_score	O
=	O
0.0	O
;	O
SGFNode	O
*	O
node	pointer
=	O
tree	O
->	O
root	pointer
;	O
clear_board	O
(	O
)	O
;	O
if	O
(	O
!	pointer
quiet	pointer
)	O
{	O
printf	function
(	O
"Board Size:   %d\n"	pointer
,	O
board_size	pointer
)	O
;	O
if	O
(	O
sgfGetCharProperty	pointer
(	O
node	pointer
,	O
"HA"	pointer
,	O
&	pointer
tmpc	pointer
)	O
)	O
printf	O
(	O
"Handicap:     %s\n"	pointer
,	O
tmpc	pointer
)	O
;	O
printf	O
(	O
"Komi:         %.1f\n"	pointer
,	O
komi	pointer
)	O
;	O
if	O
(	O
sgfGetCharProperty	pointer
(	O
node	pointer
,	O
"RU"	pointer
,	O
&	pointer
tmpc	pointer
)	O
)	O
printf	O
(	O
"Ruleset:      %s\n"	pointer
,	O
tmpc	pointer
)	O
;	O
if	O
(	O
sgfGetCharProperty	pointer
(	O
node	pointer
,	O
"GN"	pointer
,	O
&	int
tmpc	pointer
)	O
)	O
printf	O
(	O
"Game Name:    %s\n"	pointer
,	O
tmpc	pointer
)	O
;	O
if	O
(	O
sgfGetCharProperty	pointer
(	O
node	pointer
,	O
"DT"	pointer
,	O
&	pointer
tmpc	pointer
)	O
)	O
printf	O
(	O
"Game Date:    %s\n"	pointer
,	O
tmpc	pointer
)	O
;	O
if	O
(	O
sgfGetCharProperty	pointer
(	O
node	pointer
,	O
"GC"	pointer
,	O
&	pointer
tmpc	pointer
)	O
)	O
printf	O
(	O
"Game Comment: %s\n"	pointer
,	O
tmpc	pointer
)	O
;	O
if	O
(	O
sgfGetCharProperty	pointer
(	O
node	pointer
,	O
"US"	pointer
,	O
&	pointer
tmpc	pointer
)	O
)	O
printf	O
(	O
"Game User:    %s\n"	pointer
,	O
tmpc	pointer
)	O
;	O
if	O
(	O
sgfGetCharProperty	pointer
(	O
node	pointer
,	O
"PB"	pointer
,	O
&	pointer
tmpc	pointer
)	O
)	O
printf	O
(	O
"Black Player: %s\n"	pointer
,	O
tmpc	pointer
)	O
;	O
if	O
(	O
sgfGetCharProperty	pointer
(	O
node	pointer
,	O
"PW"	pointer
,	O
&	pointer
tmpc	pointer
)	O
)	O
printf	O
(	O
"White Player: %s\n"	pointer
,	O
tmpc	pointer
)	O
;	O
if	O
(	O
sgfGetCharProperty	pointer
(	O
node	pointer
,	O
"RE"	pointer
,	O
&	pointer
tmpc	pointer
)	O
)	O
printf	O
(	O
"Result:       %s\n"	pointer
,	O
tmpc	pointer
)	O
;	O
}	O
while	O
(	O
node	O
)	O
{	O
replay_node	O
(	O
node	pointer
,	O
color_to_replay	pointer
,	O
&	pointer
replay_score	pointer
,	O
&	O
total_score	struct
)	O
;	O
sgffile_output	O
(	O
tree	O
)	O
;	O
node	O
=	O
node	O
->	O
child	pointer
;	O
}	O
if	O
(	O
!	O
quiet	pointer
)	O
printf	O
(	O
"Global score: %.2f / %.2f\n"	pointer
,	O
replay_score	pointer
,	O
total_score	pointer
)	O
;	O
if	O
(	O
showtime	pointer
)	O
{	O
gprintf	O
(	O
"SLOWEST MOVE: %d at %1m "	pointer
,	O
slowest_movenum	pointer
,	O
slowest_move	int
)	O
;	O
fprintf	O
(	O
stderr	pointer
,	O
"(%.2f seconds)\n"	pointer
,	O
slowest_time	pointer
)	O
;	O
fprintf	O
(	O
stderr	pointer
,	O
"AVERAGE TIME: %.2f seconds per move\n"	pointer
,	O
total_time	pointer
/	O
movenum	int
)	O
;	O
fprintf	O
(	O
stderr	pointer
,	O
"TOTAL TIME: %.2f seconds\n"	pointer
,	O
total_time	pointer
)	O
;	O
}	O
}	O
static	O
void	O
replay_node	function
(	O
SGFNode	O
*	O
node	pointer
,	O
int	O
color_to_replay	int
,	O
float	O
*	O
replay_score	pointer
,	O
float	O
*	O
total_score	pointer
)	O
{	O
SGFProperty	O
*	O
sgf_prop	pointer
;	O
SGFProperty	O
*	O
move_prop	pointer
=	O
NULL	O
;	O
int	O
color	int
;	O
int	O
old_move	int
;	O
int	O
new_move	int
;	O
char	O
buf	O
[	O
BUFSIZE	int
]	O
;	O
for	O
(	O
sgf_prop	int
=	O
node	pointer
->	O
props	pointer
;	O
sgf_prop	O
;	O
sgf_prop	O
=	O
sgf_prop	pointer
->	O
next	pointer
)	O
{	O
switch	O
(	O
sgf_prop	int
->	O
name	pointer
)	O
{	O
case	O
SGFAB	O
:	O
add_stone	O
(	O
get_sgfmove	O
(	O
sgf_prop	pointer
)	O
,	O
BLACK	O
)	O
;	O
break	O
;	O
case	O
SGFAW	O
:	O
add_stone	O
(	O
get_sgfmove	O
(	O
sgf_prop	pointer
)	O
,	O
WHITE	O
)	O
;	O
break	O
;	O
case	O
SGFB	O
:	O
case	O
SGFW	O
:	O
move_prop	O
=	O
sgf_prop	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
!	O
move_prop	pointer
)	O
return	O
;	O
old_move	O
=	O
get_sgfmove	function
(	O
move_prop	pointer
)	O
;	O
color	O
=	O
(	O
move_prop	O
->	O
name	pointer
==	O
SGFW	O
)	O
?	O
WHITE	O
:	O
BLACK	O
;	O
if	O
(	O
color	O
==	O
color_to_replay	O
||	O
color_to_replay	int
==	O
GRAY	int
)	O
{	O
float	O
new_move_value	O
=	O
0.0	function
;	O
float	O
old_move_value	O
=	O
0.0	O
;	O
int	O
resign	int
;	O
new_move	O
=	O
genmove	int
(	O
color	O
,	O
NULL	pointer
,	O
&	int
resign	pointer
)	O
;	O
if	O
(	O
new_move	int
!=	O
PASS_MOVE	O
)	O
new_move_value	O
=	O
potential_moves	int
[	O
new_move	int
]	O
;	O
if	O
(	O
old_move	O
!=	O
PASS_MOVE	O
)	O
old_move_value	O
=	O
potential_moves	int
[	O
old_move	int
]	O
;	O
if	O
(	O
new_move	O
!=	O
old_move	O
||	O
!	int
quiet	O
)	O
{	O
mprintf	O
(	O
"Move %d (%C): "	pointer
,	O
movenum	pointer
+	O
1	int
,	O
color	int
)	O
;	O
if	O
(	O
resign	int
)	O
printf	O
(	O
"GNU Go resigns "	pointer
)	O
;	O
else	O
{	O
mprintf	O
(	O
"GNU Go plays %1m "	pointer
,	O
new_move	pointer
)	O
;	O
if	O
(	O
new_move	int
!=	O
PASS_MOVE	O
)	O
printf	O
(	O
"(%.2f) "	pointer
,	O
new_move_value	pointer
)	O
;	O
}	O
mprintf	O
(	O
"- Game move %1m "	O
,	O
old_move	O
)	O
;	O
if	O
(	O
new_move	int
!=	O
PASS_MOVE	O
&&	O
old_move_value	pointer
>	O
0.0	int
)	O
printf	O
(	O
"(%.2f) "	pointer
,	O
old_move_value	pointer
)	O
;	O
printf	O
(	O
"\n"	pointer
)	O
;	O
*	O
replay_score	pointer
+=	O
new_move_value	int
-	O
old_move_value	int
;	O
*	O
total_score	pointer
+=	O
new_move_value	O
;	O
}	O
if	O
(	O
new_move	O
!=	O
old_move	O
)	O
{	O
if	O
(	O
resign	int
)	O
gg_snprintf	O
(	O
buf	int
,	O
BUFSIZE	int
,	O
"GNU Go resigns - Game move %s (%.2f)"	int
,	O
location_to_string	int
(	O
old_move	pointer
)	O
,	O
old_move_value	O
)	O
;	O
else	O
{	O
gg_snprintf	O
(	O
buf	int
,	O
BUFSIZE	int
,	O
"GNU Go plays %s (%.2f) - Game move %s (%.2f)"	int
,	O
location_to_string	int
(	O
new_move	pointer
)	O
,	O
new_move_value	O
,	O
location_to_string	int
(	O
old_move	pointer
)	O
,	O
old_move_value	O
)	O
;	O
if	O
(	O
new_move	int
!=	O
PASS_MOVE	O
)	O
sgfCircle	O
(	O
node	O
,	O
I	pointer
(	O
new_move	pointer
)	O
,	O
J	O
(	O
new_move	pointer
)	O
)	O
;	O
}	O
}	O
else	O
gg_snprintf	O
(	O
buf	O
,	O
BUFSIZE	int
,	O
"GNU Go plays the same move %s (%.2f)"	int
,	O
location_to_string	int
(	O
new_move	O
)	O
,	O
new_move_value	O
)	O
;	O
sgfAddComment	O
(	O
node	pointer
,	O
buf	pointer
)	O
;	O
sgffile_add_debuginfo	O
(	O
node	O
,	O
0.0	pointer
)	O
;	O
}	O
play_move	O
(	O
old_move	O
,	O
color	O
)	O
;	O
}	O