int	O
osip_list_init	function
(	O
osip_list_t	struct
*	O
li	pointer
)	O
{	O
if	O
(	O
li	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
memset	function
(	O
li	pointer
,	O
0	int
,	O
sizeof	O
(	O
osip_list_t	struct
)	O
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_list_clone	function
(	O
const	O
osip_list_t	struct
*	O
src	pointer
,	O
osip_list_t	struct
*	O
dst	pointer
,	O
int	O
(	O
*	O
clone_func	pointer
)	O
(	O
void	O
*	O
,	O
void	O
*	O
*	O
)	O
)	O
{	O
void	O
*	O
data	pointer
;	O
void	O
*	O
data2	pointer
;	O
int	O
i	int
;	O
osip_list_iterator_t	struct
iterator	struct
;	O
for	O
(	O
data	pointer
=	O
osip_list_get_first	function
(	O
(	O
osip_list_t	struct
*	O
)	O
src	pointer
,	O
&	O
iterator	struct
)	O
;	O
osip_list_iterator_has_elem	O
(	O
iterator	struct
)	O
;	O
data	pointer
=	O
osip_list_get_next	function
(	O
&	O
iterator	struct
)	O
)	O
{	O
i	int
=	O
clone_func	pointer
(	O
data	pointer
,	O
&	O
data2	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
osip_list_add	function
(	O
dst	pointer
,	O
data2	pointer
,	O
-	O
1	int
)	O
;	O
}	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
osip_list_special_free	function
(	O
osip_list_t	struct
*	O
li	pointer
,	O
void	O
(	O
*	O
free_func	pointer
)	O
(	O
void	O
*	O
)	O
)	O
{	O
void	O
*	O
element	pointer
;	O
if	O
(	O
li	pointer
==	O
NULL	O
)	O
return	O
;	O
while	O
(	O
!	O
osip_list_eol	function
(	O
li	pointer
,	O
0	int
)	O
)	O
{	O
element	pointer
=	O
(	O
void	O
*	O
)	O
osip_list_get	function
(	O
li	pointer
,	O
0	int
)	O
;	O
osip_list_remove	function
(	O
li	pointer
,	O
0	int
)	O
;	O
if	O
(	O
free_func	pointer
!=	O
NULL	O
)	O
free_func	pointer
(	O
element	pointer
)	O
;	O
}	O
}	O
void	O
osip_list_ofchar_free	function
(	O
osip_list_t	struct
*	O
li	pointer
)	O
{	O
char	O
*	O
chain	pointer
;	O
if	O
(	O
li	pointer
==	O
NULL	O
)	O
return	O
;	O
while	O
(	O
!	O
osip_list_eol	function
(	O
li	pointer
,	O
0	int
)	O
)	O
{	O
chain	pointer
=	O
(	O
char	O
*	O
)	O
osip_list_get	function
(	O
li	pointer
,	O
0	int
)	O
;	O
osip_list_remove	function
(	O
li	pointer
,	O
0	int
)	O
;	O
osip_free	O
(	O
chain	pointer
)	O
;	O
}	O
}	O
int	O
osip_list_size	function
(	O
const	O
osip_list_t	struct
*	O
li	pointer
)	O
{	O
if	O
(	O
li	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
return	O
li	pointer
->	O
nb_elt	int
;	O
}	O
int	O
osip_list_eol	function
(	O
const	O
osip_list_t	struct
*	O
li	pointer
,	O
int	O
i	int
)	O
{	O
if	O
(	O
li	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
i	int
<	O
li	pointer
->	O
nb_elt	int
)	O
return	O
OSIP_SUCCESS	int
;	O
return	O
1	int
;	O
}	O
int	O
osip_list_add	function
(	O
osip_list_t	struct
*	O
li	pointer
,	O
void	O
*	O
el	pointer
,	O
int	O
pos	int
)	O
{	O
__node_t	struct
*	O
ntmp	pointer
;	O
int	O
i	int
=	O
0	int
;	O
if	O
(	O
li	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
li	pointer
->	O
nb_elt	int
==	O
0	int
)	O
{	O
li	pointer
->	O
node	pointer
=	O
(	O
__node_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
__node_t	struct
)	O
)	O
;	O
if	O
(	O
li	pointer
->	O
node	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
li	pointer
->	O
node	pointer
->	O
element	pointer
=	O
el	pointer
;	O
li	pointer
->	O
node	pointer
->	O
next	pointer
=	O
NULL	O
;	O
li	pointer
->	O
nb_elt	int
++	O
;	O
return	O
li	pointer
->	O
nb_elt	int
;	O
}	O
if	O
(	O
pos	int
==	O
-	O
1	int
||	O
pos	int
>=	O
li	pointer
->	O
nb_elt	int
)	O
{	O
pos	int
=	O
li	pointer
->	O
nb_elt	int
;	O
}	O
ntmp	pointer
=	O
li	pointer
->	O
node	pointer
;	O
if	O
(	O
pos	int
==	O
0	int
)	O
{	O
li	pointer
->	O
node	pointer
=	O
(	O
__node_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
__node_t	struct
)	O
)	O
;	O
if	O
(	O
li	pointer
->	O
node	pointer
==	O
NULL	O
)	O
{	O
li	pointer
->	O
node	pointer
=	O
ntmp	pointer
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
li	pointer
->	O
node	pointer
->	O
element	pointer
=	O
el	pointer
;	O
li	pointer
->	O
node	pointer
->	O
next	pointer
=	O
ntmp	pointer
;	O
li	pointer
->	O
nb_elt	int
++	O
;	O
return	O
li	pointer
->	O
nb_elt	int
;	O
}	O
while	O
(	O
pos	int
>	O
i	int
+	O
1	int
)	O
{	O
i	int
++	O
;	O
ntmp	pointer
=	O
ntmp	pointer
->	O
next	pointer
;	O
}	O
if	O
(	O
pos	int
==	O
li	pointer
->	O
nb_elt	int
)	O
{	O
ntmp	pointer
->	O
next	pointer
=	O
osip_malloc	O
(	O
sizeof	O
(	O
__node_t	struct
)	O
)	O
;	O
if	O
(	O
ntmp	pointer
->	O
next	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
ntmp	pointer
=	O
ntmp	pointer
->	O
next	pointer
;	O
ntmp	pointer
->	O
element	pointer
=	O
el	pointer
;	O
ntmp	pointer
->	O
next	pointer
=	O
NULL	O
;	O
li	pointer
->	O
nb_elt	int
++	O
;	O
return	O
li	pointer
->	O
nb_elt	int
;	O
}	O
{	O
__node_t	struct
*	O
nextnode	pointer
=	O
ntmp	pointer
->	O
next	pointer
;	O
ntmp	pointer
->	O
next	pointer
=	O
osip_malloc	O
(	O
sizeof	O
(	O
__node_t	struct
)	O
)	O
;	O
if	O
(	O
ntmp	pointer
->	O
next	pointer
==	O
NULL	O
)	O
{	O
ntmp	pointer
->	O
next	pointer
=	O
nextnode	pointer
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
ntmp	pointer
=	O
ntmp	pointer
->	O
next	pointer
;	O
ntmp	pointer
->	O
element	pointer
=	O
el	pointer
;	O
ntmp	pointer
->	O
next	pointer
=	O
nextnode	pointer
;	O
li	pointer
->	O
nb_elt	int
++	O
;	O
}	O
return	O
li	pointer
->	O
nb_elt	int
;	O
}	O
void	O
*	O
osip_list_get	function
(	O
const	O
osip_list_t	struct
*	O
li	pointer
,	O
int	O
pos	int
)	O
{	O
__node_t	struct
*	O
ntmp	pointer
;	O
int	O
i	int
=	O
0	int
;	O
if	O
(	O
li	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
pos	int
<	O
0	int
||	O
pos	int
>=	O
li	pointer
->	O
nb_elt	int
)	O
return	O
NULL	O
;	O
ntmp	pointer
=	O
li	pointer
->	O
node	pointer
;	O
while	O
(	O
pos	int
>	O
i	int
)	O
{	O
i	int
++	O
;	O
ntmp	pointer
=	O
ntmp	pointer
->	O
next	pointer
;	O
}	O
return	O
ntmp	pointer
->	O
element	pointer
;	O
}	O
void	O
*	O
osip_list_get_first	function
(	O
const	O
osip_list_t	struct
*	O
li	pointer
,	O
osip_list_iterator_t	struct
*	O
iterator	struct
)	O
{	O
if	O
(	O
li	pointer
==	O
NULL	O
||	O
0	int
>=	O
li	pointer
->	O
nb_elt	int
)	O
{	O
iterator	struct
->	O
actual	pointer
=	O
0	int
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
iterator	struct
->	O
actual	pointer
=	O
li	pointer
->	O
node	pointer
;	O
iterator	struct
->	O
prev	pointer
=	O
(	O
__node_t	struct
*	O
*	O
)	O
&	O
li	pointer
->	O
node	pointer
;	O
iterator	struct
->	O
li	pointer
=	O
(	O
osip_list_t	struct
*	O
)	O
li	pointer
;	O
iterator	struct
->	O
pos	int
=	O
0	int
;	O
return	O
li	pointer
->	O
node	pointer
->	O
element	pointer
;	O
}	O
void	O
*	O
osip_list_get_next	function
(	O
osip_list_iterator_t	struct
*	O
iterator	struct
)	O
{	O
if	O
(	O
iterator	struct
->	O
actual	pointer
==	O
NULL	O
)	O
{	O
return	O
OSIP_SUCCESS	int
;	O
}	O
iterator	struct
->	O
prev	pointer
=	O
&	O
(	O
iterator	struct
->	O
actual	pointer
->	O
next	pointer
)	O
;	O
iterator	struct
->	O
actual	pointer
=	O
iterator	struct
->	O
actual	pointer
->	O
next	pointer
;	O
++	O
(	O
iterator	struct
->	O
pos	int
)	O
;	O
if	O
(	O
osip_list_iterator_has_elem	O
(	O
*	O
iterator	struct
)	O
)	O
{	O
return	O
iterator	struct
->	O
actual	pointer
->	O
element	pointer
;	O
}	O
iterator	struct
->	O
actual	pointer
=	O
0	int
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
*	O
osip_list_iterator_remove	function
(	O
osip_list_iterator_t	struct
*	O
iterator	struct
)	O
{	O
if	O
(	O
osip_list_iterator_has_elem	O
(	O
*	O
iterator	struct
)	O
)	O
{	O
--	O
(	O
iterator	struct
->	O
li	pointer
->	O
nb_elt	int
)	O
;	O
*	O
(	O
iterator	struct
->	O
prev	pointer
)	O
=	O
iterator	struct
->	O
actual	pointer
->	O
next	pointer
;	O
osip_free	O
(	O
iterator	struct
->	O
actual	pointer
)	O
;	O
iterator	struct
->	O
actual	pointer
=	O
*	O
(	O
iterator	struct
->	O
prev	pointer
)	O
;	O
}	O
if	O
(	O
osip_list_iterator_has_elem	O
(	O
*	O
iterator	struct
)	O
)	O
{	O
return	O
iterator	struct
->	O
actual	pointer
->	O
element	pointer
;	O
}	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_list_remove	function
(	O
osip_list_t	struct
*	O
li	pointer
,	O
int	O
pos	int
)	O
{	O
__node_t	struct
*	O
ntmp	pointer
;	O
int	O
i	int
=	O
0	int
;	O
if	O
(	O
li	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
pos	int
<	O
0	int
||	O
pos	int
>=	O
li	pointer
->	O
nb_elt	int
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
ntmp	pointer
=	O
li	pointer
->	O
node	pointer
;	O
if	O
(	O
pos	int
==	O
0	int
)	O
{	O
li	pointer
->	O
node	pointer
=	O
ntmp	pointer
->	O
next	pointer
;	O
li	pointer
->	O
nb_elt	int
--	O
;	O
osip_free	O
(	O
ntmp	pointer
)	O
;	O
return	O
li	pointer
->	O
nb_elt	int
;	O
}	O
while	O
(	O
pos	int
>	O
i	int
+	O
1	int
)	O
{	O
i	int
++	O
;	O
ntmp	pointer
=	O
ntmp	pointer
->	O
next	pointer
;	O
}	O
{	O
__node_t	struct
*	O
remnode	pointer
;	O
remnode	pointer
=	O
ntmp	pointer
->	O
next	pointer
;	O
ntmp	pointer
->	O
next	pointer
=	O
(	O
ntmp	pointer
->	O
next	pointer
)	O
->	O
next	pointer
;	O
osip_free	O
(	O
remnode	pointer
)	O
;	O
li	pointer
->	O
nb_elt	int
--	O
;	O
}	O
return	O
li	pointer
->	O
nb_elt	int
;	O
}	O
