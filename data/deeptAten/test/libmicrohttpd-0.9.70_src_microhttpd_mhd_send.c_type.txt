static	O
void	O
pre_cork_setsockopt	function
(	O
struct	O
MHD_Connection	struct
*	O
connection	pointer
,	O
bool	O
want_cork	O
)	O
{	O
}	O
static	O
void	O
post_cork_setsockopt	function
(	O
struct	O
MHD_Connection	struct
*	O
connection	pointer
,	O
bool	O
want_cork	int
)	O
{	O
}	O
ssize_t	O
MHD_send_on_connection_	O
(	O
struct	O
MHD_Connection	struct
*	O
connection	pointer
,	O
const	O
char	O
*	O
buffer	pointer
,	O
size_t	O
buffer_size	long
,	O
enum	O
MHD_SendSocketOptions	O
options	O
)	O
{	O
bool	O
want_cork	int
;	O
MHD_socket	O
s	O
=	O
connection	O
->	O
socket_fd	pointer
;	O
ssize_t	O
ret	long
;	O
if	O
(	O
(	long
MHD_INVALID_SOCKET	O
==	O
s	O
)	O
||	O
(	O
MHD_CONNECTION_CLOSED	O
==	O
connection	O
->	O
state	int
)	O
)	O
{	O
return	O
MHD_ERR_NOTCONN_	int
;	O
}	O
if	O
(	O
buffer_size	O
>	O
MHD_SCKT_SEND_MAX_SIZE_	int
)	O
buffer_size	O
=	O
MHD_SCKT_SEND_MAX_SIZE_	int
;	O
switch	O
(	O
options	O
)	O
{	O
case	O
MHD_SSO_NO_CORK	O
:	O
want_cork	O
=	O
false	O
;	O
break	O
;	O
case	O
MHD_SSO_MAY_CORK	O
:	O
want_cork	O
=	O
true	O
;	O
break	O
;	O
case	O
MHD_SSO_HDR_CORK	O
:	O
want_cork	O
=	O
(	O
buffer_size	O
<=	O
1024	int
)	O
;	O
break	O
;	O
}	O
{	O
pre_cork_setsockopt	O
(	O
connection	pointer
,	O
want_cork	pointer
)	O
;	O
ret	O
=	O
send	int
(	O
s	int
,	O
buffer	int
,	O
buffer_size	int
,	O
MAYBE_MSG_NOSIGNAL	int
|	O
(	int
want_cork	O
?	O
MSG_MORE	O
:	O
0	O
)	O
)	O
;	O
if	O
(	O
0	O
>	O
ret	int
)	O
{	O
const	O
int	O
err	O
=	O
MHD_socket_get_error_	int
(	O
)	O
;	O
if	O
(	O
MHD_SCKT_ERR_IS_EAGAIN_	O
(	O
err	pointer
)	O
)	O
{	O
connection	O
->	O
epoll_state	pointer
&=	O
~	O
MHD_EPOLL_STATE_WRITE_READY	O
;	O
return	pointer
MHD_ERR_AGAIN_	int
;	O
}	O
if	O
(	O
MHD_SCKT_ERR_IS_EINTR_	O
(	O
err	pointer
)	O
)	O
return	O
MHD_ERR_AGAIN_	int
;	O
if	O
(	O
MHD_SCKT_ERR_IS_	O
(	O
err	pointer
,	O
MHD_SCKT_ECONNRESET_	int
)	O
)	O
return	O
MHD_ERR_CONNRESET_	int
;	O
return	O
MHD_ERR_NOTCONN_	O
;	O
}	O
else	O
if	O
(	O
buffer_size	O
>	O
(	int
size_t	int
)	O
ret	O
)	O
connection	O
->	O
epoll_state	pointer
&=	O
~	O
MHD_EPOLL_STATE_WRITE_READY	O
;	O
if	pointer
(	O
ret	O
==	O
buffer_size	int
)	O
post_cork_setsockopt	O
(	O
connection	pointer
,	O
want_cork	int
)	O
;	O
}	O
return	O
ret	O
;	O
}	O
ssize_t	O
MHD_send_on_connection2_	O
(	O
struct	O
MHD_Connection	struct
*	O
connection	pointer
,	O
const	O
char	O
*	O
header	pointer
,	O
size_t	O
header_size	long
,	O
const	O
char	O
*	O
buffer	pointer
,	O
size_t	O
buffer_size	long
)	O
{	O
MHD_socket	O
s	long
=	O
connection	O
->	O
socket_fd	long
;	O
ssize_t	O
ret	long
;	O
struct	long
iovec	struct
vector	O
[	O
2	int
]	O
;	O
pre_cork_setsockopt	O
(	O
connection	pointer
,	O
false	pointer
)	O
;	O
vector	O
[	O
0	int
]	O
.	O
iov_base	pointer
=	O
(	pointer
void	O
*	O
)	O
header	pointer
;	O
vector	O
[	O
0	int
]	O
.	O
iov_len	pointer
=	O
header_size	pointer
;	O
vector	O
[	O
1	int
]	O
.	O
iov_base	pointer
=	O
(	pointer
void	O
*	O
)	O
buffer	pointer
;	O
vector	O
[	O
1	int
]	O
.	O
iov_len	pointer
=	O
buffer_size	pointer
;	O
{	O
struct	O
msghdr	struct
msg	O
;	O
memset	O
(	O
&	O
msg	pointer
,	O
0	O
,	O
sizeof	int
(	O
struct	O
msghdr	struct
)	O
)	O
;	O
msg	O
.	O
msg_iov	int
=	O
vector	O
;	O
msg	O
.	O
msg_iovlen	int
=	O
2	int
;	O
ret	O
=	O
sendmsg	int
(	O
s	pointer
,	O
&	pointer
msg	pointer
,	O
MAYBE_MSG_NOSIGNAL	O
)	O
;	O
}	O
if	O
(	O
ret	O
==	O
header_size	int
+	O
buffer_size	int
)	O
post_cork_setsockopt	O
(	O
connection	pointer
,	O
false	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
ssize_t	O
MHD_send_sendfile_	O
(	O
struct	pointer
MHD_Connection	struct
*	O
connection	pointer
)	O
{	O
ssize_t	O
ret	long
;	O
const	O
int	O
file_fd	int
=	O
connection	O
->	O
response	long
->	O
fd	pointer
;	O
uint64_t	O
left	O
;	O
uint64_t	O
offsetu64	O
;	O
const	O
uint64_t	O
max_off_t	O
=	O
(	int
uint64_t	O
)	O
OFF64_T_MAX	O
;	O
off64_t	O
offset	O
;	O
const	O
bool	O
used_thr_p_c	long
=	O
(	O
0	O
!=	O
(	O
connection	O
->	O
daemon	pointer
->	O
options	pointer
&	O
MHD_USE_THREAD_PER_CONNECTION	pointer
)	O
)	O
;	O
const	O
size_t	O
chunk_size	long
=	O
used_thr_p_c	O
?	O
MHD_SENFILE_CHUNK_THR_P_C_	long
:	O
MHD_SENFILE_CHUNK_	O
;	O
size_t	O
send_size	long
=	O
0	int
;	O
mhd_assert	long
(	O
MHD_resp_sender_sendfile	pointer
==	O
connection	O
->	O
resp_sender	long
)	O
;	O
pre_cork_setsockopt	O
(	O
connection	pointer
,	O
false	pointer
)	O
;	O
offsetu64	O
=	O
connection	O
->	O
response_write_position	pointer
+	O
connection	int
->	O
response	pointer
->	O
fd_off	pointer
;	O
left	pointer
=	O
connection	int
->	O
response	pointer
->	O
total_size	pointer
-	O
connection	int
->	O
response_write_position	pointer
;	O
send_size	pointer
=	O
(	pointer
left	O
>	O
chunk_size	int
)	O
?	O
chunk_size	O
:	O
(	O
size_t	O
)	O
left	O
;	O
if	O
(	O
max_off_t	O
<	O
offsetu64	int
)	O
{	O
connection	O
->	O
resp_sender	pointer
=	O
MHD_resp_sender_std	O
;	O
return	pointer
MHD_ERR_AGAIN_	int
;	O
}	O
offset	O
=	O
(	function
off64_t	O
)	O
offsetu64	O
;	O
ret	O
=	O
sendfile64	int
(	O
connection	pointer
->	O
socket_fd	pointer
,	O
file_fd	pointer
,	O
&	pointer
offset	pointer
,	O
send_size	O
)	O
;	O
if	O
(	O
0	O
>	O
ret	int
)	O
{	O
const	O
int	O
err	O
=	O
MHD_socket_get_error_	int
(	O
)	pointer
;	O
if	O
(	O
MHD_SCKT_ERR_IS_EAGAIN_	O
(	O
err	pointer
)	O
)	O
{	O
connection	O
->	O
epoll_state	pointer
&=	O
~	O
MHD_EPOLL_STATE_WRITE_READY	O
;	O
return	pointer
MHD_ERR_AGAIN_	int
;	O
}	O
if	O
(	O
MHD_SCKT_ERR_IS_EINTR_	O
(	O
err	pointer
)	O
)	O
return	O
MHD_ERR_AGAIN_	int
;	O
if	O
(	O
MHD_SCKT_ERR_IS_	O
(	O
err	pointer
,	O
MHD_SCKT_EBADF_	int
)	O
)	O
return	O
MHD_ERR_BADF_	int
;	O
connection	O
->	O
resp_sender	pointer
=	O
MHD_resp_sender_std	O
;	O
return	pointer
MHD_ERR_AGAIN_	int
;	O
}	O
else	O
if	O
(	O
send_size	O
>	O
(	int
size_t	int
)	O
ret	O
)	O
connection	O
->	O
epoll_state	pointer
&=	O
~	O
MHD_EPOLL_STATE_WRITE_READY	O
;	O
if	pointer
(	O
ret	O
==	O
left	int
)	O
post_cork_setsockopt	O
(	O
connection	pointer
,	O
false	pointer
)	O
;	O
return	O
ret	int
;	O
}	O