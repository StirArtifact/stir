static	O
void	O
mangle_seed	O
(	O
mpz_ptr	O
r	O
,	O
mpz_srcptr	O
b_orig	O
)	O
{	O
mpz_t	O
t	O
,	O
b	O
;	O
unsigned	O
long	O
e	O
=	O
0x40118124	int
;	O
unsigned	O
long	O
bit	O
=	O
0x20000000	int
;	O
mpz_init	O
(	O
t	pointer
)	O
;	O
mpz_init_set	O
(	O
b	pointer
,	O
b_orig	O
)	O
;	O
mpz_set	O
(	O
r	pointer
,	O
b	int
)	O
;	O
do	O
{	O
mpz_mul	O
(	O
r	pointer
,	O
r	int
,	O
r	int
)	O
;	O
reduce	O
:	O
for	O
(	O
;	int
;	O
)	O
{	O
mpz_tdiv_q_2exp	O
(	O
t	pointer
,	O
r	O
,	O
19937L	int
)	O
;	O
if	O
(	O
mpz_sgn	O
(	O
t	pointer
)	O
==	O
0	int
)	O
break	O
;	O
mpz_tdiv_r_2exp	O
(	O
r	pointer
,	O
r	int
,	O
19937L	int
)	O
;	O
mpz_addmul_ui	O
(	O
r	pointer
,	O
t	int
,	O
20023L	int
)	O
;	O
}	O
if	O
(	O
(	O
e	int
&	O
bit	int
)	O
!=	O
0	O
)	O
{	O
e	O
&=	O
~	O
bit	int
;	O
mpz_mul	int
(	O
r	pointer
,	O
r	int
,	O
b	int
)	O
;	O
goto	O
reduce	O
;	O
}	O
bit	O
>>=	O
1	int
;	O
}	O
while	O
(	O
bit	O
!=	O
0	O
)	O
;	O
mpz_clear	O
(	O
t	O
)	O
;	O
mpz_clear	O
(	O
b	pointer
)	O
;	O
}	O
static	O
void	O
randseed_mt	function
(	O
gmp_randstate_t	O
rstate	O
,	O
mpz_srcptr	O
seed	O
)	O
{	O
int	O
i	int
;	O
size_t	O
cnt	long
;	O
gmp_rand_mt_struct	O
*	O
p	pointer
;	O
mpz_t	O
mod	O
;	O
mpz_t	O
seed1	O
;	O
p	O
=	O
(	int
gmp_rand_mt_struct	O
*	O
)	O
RNG_STATE	function
(	O
rstate	pointer
)	O
;	O
mpz_init	O
(	O
mod	pointer
)	O
;	O
mpz_init	O
(	O
seed1	pointer
)	O
;	O
mpz_set_ui	O
(	O
mod	pointer
,	O
0L	int
)	O
;	O
mpz_setbit	O
(	O
mod	pointer
,	O
19937L	int
)	O
;	O
mpz_sub_ui	O
(	O
mod	pointer
,	O
mod	int
,	O
20027L	int
)	O
;	O
mpz_mod	O
(	O
seed1	pointer
,	O
seed	O
,	O
mod	int
)	O
;	O
mpz_add_ui	O
(	O
seed1	pointer
,	O
seed1	pointer
,	O
2L	pointer
)	O
;	O
mangle_seed	O
(	O
seed1	pointer
,	O
seed1	O
)	O
;	O
p	O
->	O
mt	pointer
[	O
0	int
]	O
=	O
(	pointer
mpz_tstbit	O
(	O
seed1	pointer
,	O
19936L	O
)	O
!=	O
0	O
)	O
?	O
0x80000000	int
:	O
0	O
;	O
mpz_clrbit	O
(	O
seed1	pointer
,	O
19936L	pointer
)	O
;	O
mpz_export	O
(	O
&	pointer
p	pointer
->	O
mt	pointer
[	O
1	int
]	O
,	O
&	pointer
cnt	pointer
,	O
-	O
1	int
,	O
sizeof	O
(	O
p	O
->	O
mt	pointer
[	O
1	int
]	O
)	O
,	O
0	O
,	O
8	int
*	O
sizeof	O
(	O
p	O
->	O
mt	pointer
[	O
1	int
]	O
)	O
-	O
32	int
,	O
seed1	int
)	O
;	O
cnt	O
++	O
;	O
ASSERT	O
(	O
cnt	O
<=	O
N	int
)	O
;	O
while	O
(	O
cnt	int
<	O
N	int
)	O
p	O
->	O
mt	pointer
[	O
cnt	int
++	O
]	O
=	O
0	pointer
;	O
mpz_clear	O
(	O
mod	pointer
)	O
;	O
mpz_clear	O
(	O
seed1	pointer
)	O
;	O
if	O
(	O
WARM_UP	int
!=	O
0	O
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
WARM_UP	int
/	O
N	int
;	O
i	O
++	O
)	O
__gmp_mt_recalc_buffer	O
(	O
p	pointer
->	O
mt	pointer
)	O
;	O
p	O
->	O
mti	pointer
=	O
WARM_UP	int
%	O
N	int
;	O
}	O
static	O
const	O
gmp_randfnptr_t	O
Mersenne_Twister_Generator	O
=	O
{	O
randseed_mt	O
,	O
__gmp_randget_mt	O
,	O
__gmp_randclear_mt	O
,	O
__gmp_randiset_mt	int
}	O
;	O
void	O
gmp_randinit_mt	function
(	O
gmp_randstate_t	O
rstate	O
)	O
{	O
__gmp_randinit_mt_noseed	O
(	O
rstate	O
)	O
;	O
RNG_FNPTR	O
(	O
rstate	O
)	O
=	O
(	int
void	O
*	O
)	O
&	function
Mersenne_Twister_Generator	struct
;	O
}	O