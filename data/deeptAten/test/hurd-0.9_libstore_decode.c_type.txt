error_t	O
store_std_leaf_decode	O
(	O
struct	O
store_enc	struct
*	O
enc	pointer
,	O
store_std_leaf_create_t	O
create	O
,	O
struct	O
store	struct
*	O
*	pointer
store	pointer
)	O
{	O
char	O
*	O
misc	pointer
,	O
*	O
name	pointer
;	O
error_t	O
err	O
;	O
int	O
flags	int
;	O
mach_port_t	O
port	int
;	O
size_t	O
block_size	int
,	O
num_runs	O
,	O
name_len	int
,	O
misc_len	pointer
;	O
error_t	O
call_create	int
(	O
const	O
struct	O
store_run	struct
*	O
runs	pointer
,	O
size_t	O
num_runs	long
)	O
{	O
return	O
(	int
*	O
create	pointer
)	O
(	O
port	O
,	O
flags	O
,	O
block_size	int
,	O
runs	int
,	O
num_runs	int
,	O
store	int
)	O
;	O
}	O
if	O
(	O
enc	O
->	O
cur_int	pointer
+	O
6	int
>	O
enc	int
->	O
num_ints	pointer
||	O
enc	O
->	O
cur_port	pointer
+	O
1	int
>	O
enc	int
->	O
num_ports	pointer
)	O
return	O
EINVAL	O
;	O
enc	O
->	O
cur_int	pointer
++	O
;	O
flags	O
=	O
enc	int
->	O
ints	pointer
[	O
enc	int
->	O
cur_int	pointer
++	O
]	O
;	O
block_size	pointer
=	O
enc	pointer
->	O
ints	pointer
[	O
enc	int
->	O
cur_int	pointer
++	O
]	O
;	O
num_runs	pointer
=	O
enc	pointer
->	O
ints	pointer
[	O
enc	int
->	O
cur_int	pointer
++	O
]	O
;	O
name_len	pointer
=	O
enc	pointer
->	O
ints	pointer
[	O
enc	int
->	O
cur_int	pointer
++	O
]	O
;	O
misc_len	pointer
=	O
enc	pointer
->	O
ints	pointer
[	O
enc	int
->	O
cur_int	pointer
++	O
]	O
;	O
if	pointer
(	O
enc	pointer
->	O
cur_offset	pointer
+	O
num_runs	int
*	O
2	O
>	O
enc	int
->	O
num_offsets	pointer
||	O
enc	pointer
->	O
cur_data	pointer
+	O
name_len	int
+	O
misc_len	int
>	O
enc	int
->	O
data_len	pointer
)	O
return	O
EINVAL	O
;	O
if	O
(	O
name_len	pointer
>	O
0	O
&&	O
enc	pointer
->	O
data	pointer
[	O
enc	int
->	O
cur_data	pointer
+	O
name_len	int
-	O
1	int
]	O
!=	O
'\0'	O
)	O
return	O
EINVAL	O
;	O
if	O
(	O
name_len	pointer
>	O
0	O
)	O
{	O
name	O
=	O
strdup	function
(	O
enc	pointer
->	O
data	pointer
+	O
enc	int
->	O
cur_data	pointer
)	O
;	O
if	O
(	O
!	pointer
name	O
)	O
return	O
ENOMEM	O
;	O
enc	O
->	O
cur_data	pointer
+=	O
name_len	int
;	O
}	pointer
else	O
name	O
=	O
0	function
;	O
if	O
(	O
misc_len	O
>	O
0	int
)	O
{	O
misc	O
=	O
malloc	pointer
(	O
misc_len	O
)	O
;	O
if	O
(	O
!	O
misc	O
)	O
{	O
if	O
(	O
name	O
)	O
free	O
(	O
name	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
memcpy	O
(	O
misc	pointer
,	O
enc	pointer
->	O
data	pointer
+	O
enc	int
->	O
cur_data	pointer
+	O
name_len	int
,	O
misc_len	pointer
)	O
;	O
enc	O
->	O
cur_data	pointer
+=	O
misc_len	int
;	O
}	pointer
else	O
misc	O
=	O
0	function
;	O
port	O
=	O
enc	O
->	O
ports	pointer
[	O
enc	int
->	O
cur_port	pointer
++	O
]	O
;	O
err	pointer
=	O
store_with_decoded_runs	function
(	O
enc	pointer
,	O
num_runs	pointer
,	O
call_create	int
)	O
;	O
if	O
(	O
err	pointer
)	O
{	O
mach_port_deallocate	O
(	O
mach_task_self	O
(	O
)	O
,	O
port	O
)	O
;	O
if	O
(	O
misc	O
)	O
free	O
(	O
misc	pointer
)	O
;	O
if	O
(	O
name	pointer
)	O
free	O
(	O
name	pointer
)	O
;	O
}	O
else	O
{	O
(	O
*	O
store	pointer
)	O
->	O
flags	pointer
=	O
flags	int
;	O
(	O
*	O
store	pointer
)	O
->	O
name	pointer
=	O
name	O
;	O
(	O
*	O
store	pointer
)	O
->	O
misc	pointer
=	O
misc	pointer
;	O
(	pointer
*	O
store	pointer
)	O
->	O
misc_len	pointer
=	O
misc_len	pointer
;	O
}	O
return	O
err	O
;	O
}	O
error_t	O
store_with_decoded_runs	function
(	O
struct	O
store_enc	struct
*	O
enc	pointer
,	O
size_t	O
num_runs	O
,	O
error_t	O
(	O
*	O
fun	pointer
)	O
(	O
const	O
struct	O
store_run	struct
*	O
runs	pointer
,	O
size_t	O
num_runs	long
)	O
)	O
{	O
int	O
i	int
;	O
error_t	O
err	int
;	O
if	O
(	O
num_runs	O
<=	O
MAX_STACK_RUNS	int
)	O
{	O
struct	O
store_run	struct
runs	O
[	O
num_runs	int
]	O
;	O
off_t	O
*	O
e	pointer
=	O
enc	O
->	O
offsets	pointer
+	O
enc	int
->	O
cur_offset	pointer
;	O
for	pointer
(	O
i	long
=	O
0	int
;	O
i	int
<	O
num_runs	int
;	O
i	int
++	O
)	O
{	O
runs	O
[	O
i	int
]	O
.	O
start	pointer
=	O
*	int
e	pointer
++	O
;	O
runs	O
[	O
i	int
]	O
.	O
length	pointer
=	O
*	int
e	pointer
++	O
;	O
}	O
enc	O
->	O
cur_offset	pointer
=	O
e	pointer
-	O
enc	int
->	O
offsets	pointer
;	O
err	O
=	O
(	int
*	O
fun	O
)	O
(	O
runs	O
,	O
num_runs	int
)	O
;	O
}	O
else	O
{	O
struct	O
store_run	struct
*	O
runs	pointer
=	O
malloc	O
(	O
num_runs	O
*	O
sizeof	pointer
(	O
struct	O
store_run	struct
)	O
)	O
;	O
if	O
(	O
runs	pointer
)	O
{	O
off_t	O
*	O
e	pointer
=	O
enc	O
->	O
offsets	pointer
+	O
enc	int
->	O
cur_offset	pointer
;	O
for	pointer
(	O
i	pointer
=	O
0	int
;	O
i	int
<	O
num_runs	int
;	O
i	int
++	O
)	O
{	O
runs	O
[	O
i	int
]	O
.	O
start	pointer
=	O
*	int
e	pointer
++	O
;	O
runs	O
[	O
i	int
]	O
.	O
length	pointer
=	O
*	int
e	pointer
++	O
;	O
}	O
enc	O
->	O
cur_offset	pointer
=	O
e	pointer
-	O
enc	int
->	O
offsets	pointer
;	O
err	O
=	O
(	int
*	O
fun	O
)	O
(	O
runs	O
,	O
num_runs	int
)	O
;	O
free	O
(	O
runs	pointer
)	O
;	O
}	O
else	O
err	O
=	O
ENOMEM	function
;	O
}	O
return	O
err	O
;	O
}	O
error_t	O
store_decode	function
(	O
struct	O
store_enc	struct
*	O
enc	pointer
,	O
const	O
struct	O
store_class	struct
*	O
const	pointer
*	O
classes	pointer
,	O
struct	O
store	struct
*	O
*	pointer
store	pointer
)	O
{	O
const	O
struct	O
store_class	struct
*	O
const	pointer
*	O
cl	pointer
;	O
if	O
(	O
enc	O
->	O
cur_int	pointer
>=	O
enc	pointer
->	O
num_ints	pointer
)	O
return	O
EINVAL	O
;	O
if	O
(	O
enc	pointer
->	O
ints	pointer
[	O
enc	int
->	O
cur_int	pointer
]	O
==	O
STORAGE_NETWORK	O
)	O
return	O
store_url_decode	O
(	O
enc	pointer
,	O
classes	pointer
,	O
store	pointer
)	O
;	O
for	O
(	O
cl	int
=	O
classes	int
?	O
:	pointer
__start_store_std_classes	pointer
;	O
classes	pointer
?	O
*	O
cl	pointer
!=	O
0	O
:	O
cl	pointer
<	O
__stop_store_std_classes	int
;	O
++	O
cl	O
)	O
if	O
(	O
(	pointer
*	O
cl	pointer
)	O
->	O
id	pointer
==	O
enc	O
->	O
ints	pointer
[	O
enc	int
->	O
cur_int	pointer
]	O
)	O
{	O
if	pointer
(	O
(	pointer
*	O
cl	pointer
)	O
->	O
decode	pointer
)	O
return	O
(	O
*	O
(	pointer
*	O
cl	O
)	O
->	O
decode	pointer
)	O
(	O
enc	pointer
,	O
classes	pointer
,	O
store	pointer
)	O
;	O
else	O
return	O
EOPNOTSUPP	int
;	O
}	O
if	O
(	O
!	pointer
classes	pointer
&&	O
store_module_decode	pointer
)	O
{	O
error_t	O
err	O
=	O
store_module_decode	int
(	O
enc	pointer
,	O
classes	pointer
,	O
store	pointer
)	O
;	O
if	O
(	O
err	pointer
!=	O
ENOENT	O
)	O
return	O
err	O
;	O
}	O
return	O
EINVAL	O
;	O
}	O