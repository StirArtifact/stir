struct	O
transcode_map	struct
{	O
const	O
char	O
*	O
ent	pointer
;	O
size_t	O
len	long
;	O
int	O
ch	int
;	O
}	O
;	O
static	O
struct	O
transcode_map	struct
transcode_map	O
[	O
]	O
=	O
{	O
{	O
S	O
(	O
"&amp;"	O
)	O
,	O
'&'	O
}	O
,	O
{	O
S	O
(	O
"&gt;"	O
)	O
,	O
'>'	O
}	O
,	O
{	O
S	O
(	O
"&lt;"	O
)	O
,	O
'<'	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
struct	O
transcode_map	struct
*	O
ch2ent	function
(	O
int	O
c	O
)	O
{	O
struct	O
transcode_map	struct
*	O
p	pointer
;	O
for	O
(	O
p	int
=	O
transcode_map	int
;	O
p	int
->	O
ent	pointer
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
p	pointer
->	O
ch	int
==	O
c	int
)	O
return	O
p	int
;	O
}	int
return	O
NULL	O
;	O
}	O
struct	O
htmlent_encode_state	struct
{	O
char	O
buf	O
[	O
6	int
]	O
;	O
int	O
idx	int
;	O
}	O
;	O
static	O
enum	bool
mu_filter_result	O
_htmlent_encoder	int
(	O
void	O
*	O
xd	pointer
,	O
enum	O
mu_filter_command	O
cmd	O
,	O
struct	O
mu_filter_io	struct
*	O
iobuf	pointer
)	O
{	O
struct	O
htmlent_encode_state	struct
*	O
cp	pointer
=	O
xd	O
;	O
const	O
char	O
*	O
iptr	pointer
;	O
size_t	O
isize	long
;	O
char	O
*	O
optr	pointer
;	O
size_t	O
osize	long
;	O
switch	O
(	O
cmd	long
)	O
{	O
case	O
mu_filter_init	O
:	O
cp	O
->	O
idx	pointer
=	O
-	O
1	O
;	O
return	O
mu_filter_ok	O
;	O
case	O
mu_filter_done	O
:	O
return	O
mu_filter_ok	O
;	O
default	O
:	O
break	O
;	O
}	O
iptr	O
=	O
iobuf	int
->	O
input	long
;	O
isize	long
=	O
iobuf	pointer
->	O
isize	long
;	O
optr	long
=	O
iobuf	pointer
->	O
output	long
;	O
osize	pointer
=	O
iobuf	int
->	O
osize	long
;	O
while	long
(	O
isize	pointer
&&	O
osize	int
)	O
{	O
if	O
(	O
cp	pointer
->	O
idx	pointer
>	O
0	int
)	O
{	O
*	pointer
optr	pointer
++	O
=	O
cp	O
->	O
buf	pointer
[	O
--	int
cp	O
->	O
idx	pointer
]	O
;	O
--	pointer
osize	O
;	O
}	O
else	O
{	O
struct	O
transcode_map	struct
*	O
p	pointer
;	O
int	O
c	int
=	O
*	int
iptr	pointer
++	O
;	O
--	O
isize	O
;	O
p	O
=	O
ch2ent	int
(	O
c	pointer
)	O
;	O
if	O
(	O
p	O
)	O
{	O
char	O
const	O
*	O
q	pointer
=	O
p	O
->	O
ent	long
+	O
p	int
->	O
len	long
;	O
cp	pointer
->	O
idx	pointer
=	O
0	int
;	O
while	pointer
(	O
q	int
>	O
p	int
->	O
ent	long
)	O
cp	O
->	O
buf	pointer
[	O
cp	int
->	O
idx	pointer
++	O
]	O
=	O
*	pointer
--	pointer
q	O
;	O
}	pointer
else	O
{	O
*	O
optr	pointer
++	O
=	O
c	O
;	O
--	O
osize	O
;	O
}	O
}	O
}	O
iobuf	O
->	O
isize	long
-=	O
isize	long
;	O
iobuf	pointer
->	O
osize	long
-=	O
osize	long
;	O
return	long
mu_filter_ok	int
;	O
}	O
enum	O
htmlent_decode_phase	O
{	O
enc_init	O
,	O
enc_map	int
,	O
enc_rollback	int
,	O
enc_finish	int
}	O
;	O
struct	O
htmlent_decode_state	struct
{	O
enum	O
htmlent_decode_phase	O
phase	O
;	O
struct	O
transcode_map	struct
*	O
map	pointer
;	O
int	O
idx	int
;	O
int	O
pos	int
;	O
}	O
;	O
static	O
enum	bool
htmlent_decode_phase	O
nextchar	O
(	O
struct	O
htmlent_decode_state	struct
*	O
s	pointer
,	O
int	O
c	O
)	O
{	O
if	O
(	O
c	O
==	O
s	O
->	O
map	int
->	O
ent	int
[	O
s	int
->	O
idx	int
]	O
)	O
{	O
if	pointer
(	O
++	O
s	O
->	O
idx	int
==	O
s	int
->	O
map	int
->	O
len	int
)	O
s	O
->	O
phase	pointer
=	O
enc_finish	int
;	O
else	pointer
s	O
->	O
phase	int
=	O
enc_map	int
;	O
}	pointer
else	O
{	O
struct	O
transcode_map	struct
*	O
map	pointer
;	O
for	O
(	O
map	int
=	O
s	int
->	O
map	int
;	O
map	int
->	O
ent	int
&&	O
c	int
>	O
map	int
->	O
ent	int
[	O
s	int
->	O
idx	int
]	O
;	O
map	pointer
++	O
)	O
;	O
if	O
(	O
map	O
->	O
ent	int
==	O
NULL	O
||	O
c	int
!=	O
map	O
->	O
ent	int
[	O
s	int
->	O
idx	int
]	O
)	O
{	O
if	pointer
(	O
s	pointer
->	O
idx	int
!=	O
0	int
)	O
{	O
s	pointer
->	O
phase	int
=	O
enc_rollback	int
;	O
s	pointer
->	O
pos	int
=	O
0	int
;	O
}	int
else	O
DECODE_INIT	O
(	O
s	pointer
)	O
;	O
}	O
else	O
{	O
s	O
->	O
map	pointer
=	O
map	int
;	O
if	int
(	O
++	pointer
s	O
->	O
idx	int
==	O
s	int
->	O
map	int
->	O
len	int
)	O
s	O
->	O
phase	pointer
=	O
enc_finish	int
;	O
else	pointer
s	O
->	O
phase	pointer
=	O
enc_map	int
;	O
}	pointer
}	O
return	O
s	O
->	O
phase	pointer
;	O
}	O
static	O
enum	O
mu_filter_result	O
_htmlent_decoder	function
(	O
void	O
*	O
xd	pointer
,	O
enum	O
mu_filter_command	O
cmd	O
,	O
struct	O
mu_filter_io	struct
*	O
iobuf	pointer
)	O
{	O
struct	O
htmlent_decode_state	struct
*	O
cp	pointer
=	O
xd	O
;	O
const	O
char	O
*	O
iptr	pointer
;	O
size_t	O
isize	long
;	O
char	O
*	O
optr	pointer
;	O
size_t	O
osize	long
;	O
switch	O
(	O
cmd	long
)	O
{	O
case	O
mu_filter_init	O
:	O
DECODE_INIT	O
(	O
cp	O
)	O
;	O
return	O
mu_filter_ok	O
;	O
case	O
mu_filter_done	O
:	O
return	O
mu_filter_ok	O
;	O
default	O
:	O
break	O
;	O
}	O
iptr	O
=	O
iobuf	int
->	O
input	long
;	O
isize	long
=	O
iobuf	pointer
->	O
isize	long
;	O
optr	long
=	O
iobuf	pointer
->	O
output	long
;	O
osize	pointer
=	O
iobuf	int
->	O
osize	long
;	O
while	long
(	O
isize	pointer
&&	O
osize	int
)	O
{	O
switch	O
(	O
cp	int
->	O
phase	pointer
)	O
{	O
case	O
enc_init	O
:	O
nextchar	O
(	O
cp	O
,	O
*	pointer
iptr	pointer
)	O
;	O
if	O
(	O
cp	O
->	O
phase	pointer
==	O
enc_init	O
)	O
{	O
*	pointer
optr	pointer
++	O
=	O
*	O
iptr	pointer
;	O
--	O
osize	O
;	O
}	O
++	O
iptr	O
;	O
--	O
isize	O
;	O
break	O
;	O
case	O
enc_map	int
:	O
nextchar	O
(	O
cp	O
,	O
*	pointer
iptr	pointer
)	O
;	O
if	O
(	O
cp	O
->	O
phase	pointer
==	O
enc_map	O
||	O
cp	O
->	O
phase	pointer
==	O
enc_finish	O
)	O
{	O
++	pointer
iptr	O
;	O
--	O
isize	O
;	O
}	O
else	O
if	O
(	O
cp	O
->	O
phase	pointer
==	O
enc_init	O
)	O
{	O
*	pointer
optr	pointer
++	O
=	O
*	O
iptr	pointer
++	O
;	O
--	O
osize	O
;	O
--	O
isize	O
;	O
}	O
break	O
;	O
case	O
enc_finish	int
:	O
*	O
optr	pointer
++	O
=	O
cp	O
->	O
map	long
->	O
ch	long
;	O
--	O
osize	O
;	O
DECODE_INIT	O
(	O
cp	O
)	O
;	O
break	O
;	O
case	O
enc_rollback	O
:	O
*	O
optr	O
++	O
=	O
cp	O
->	O
map	pointer
->	O
ent	pointer
[	O
cp	int
->	O
pos	pointer
]	O
;	O
--	pointer
osize	O
;	O
if	O
(	O
++	O
cp	O
->	O
pos	pointer
==	O
cp	O
->	O
idx	long
)	O
DECODE_INIT	O
(	O
cp	pointer
)	O
;	O
break	O
;	O
}	O
}	O
iobuf	O
->	O
isize	long
-=	O
isize	int
;	O
iobuf	pointer
->	O
osize	long
-=	O
osize	int
;	O
return	pointer
mu_filter_ok	int
;	O
}	O
static	O
int	O
alloc_state	function
(	O
void	O
*	O
*	pointer
pret	pointer
,	O
int	O
mode	O
,	O
int	O
argc	O
MU_ARG_UNUSED	O
,	O
const	O
char	O
*	O
*	pointer
argv	pointer
MU_ARG_UNUSED	O
)	O
{	O
union	O
{	long
struct	O
htmlent_decode_state	struct
decode	O
;	O
struct	O
htmlent_encode_state	struct
encode	O
;	O
}	O
*	O
cp	pointer
;	O
switch	O
(	O
mode	O
)	O
{	O
case	O
MU_FILTER_ENCODE	int
:	O
cp	O
=	O
malloc	O
(	O
sizeof	int
(	O
cp	O
->	O
encode	pointer
)	O
)	O
;	O
if	O
(	O
!	O
cp	O
)	O
return	O
ENOMEM	O
;	O
cp	O
->	O
encode	pointer
.	O
idx	pointer
=	O
-	int
1	O
;	O
break	O
;	O
case	O
MU_FILTER_DECODE	O
:	O
cp	O
=	O
malloc	O
(	O
sizeof	int
(	O
cp	O
->	O
decode	pointer
)	O
)	O
;	O
if	O
(	O
!	O
cp	O
)	O
return	O
ENOMEM	O
;	O
cp	O
->	O
decode	pointer
.	O
idx	pointer
=	O
0	int
;	O
cp	pointer
->	O
decode	pointer
.	O
map	pointer
=	O
transcode_map	int
;	O
break	pointer
;	O
default	O
:	O
abort	O
(	O
)	O
;	O
}	O
*	O
pret	function
=	O
cp	O
;	O
return	O
0	O
;	O
}	O
static	O
struct	O
_mu_filter_record	struct
_htmlent_filter	struct
=	O
{	O
"htmlent"	O
,	O
alloc_state	int
,	O
_htmlent_encoder	O
,	O
_htmlent_decoder	int
,	O
}	O
;	O
mu_filter_record_t	O
mu_htmlent_filter	function
=	O
&	O
_htmlent_filter	pointer
;	O