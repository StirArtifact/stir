int	O
mu_argcv_join	O
(	O
int	O
argc	int
,	O
char	O
*	O
*	pointer
argv	pointer
,	O
char	O
*	O
delim	pointer
,	O
enum	O
mu_argcv_escape	O
esc	O
,	O
char	O
*	O
*	pointer
pstring	pointer
)	O
{	O
size_t	O
i	O
,	O
j	O
,	O
len	long
;	O
char	O
*	O
buffer	pointer
;	O
size_t	O
delimlen	long
=	O
strlen	pointer
(	O
delim	pointer
)	O
;	O
int	O
quote_hex	int
=	O
0	O
;	O
if	O
(	O
pstring	O
==	O
NULL	O
)	O
return	O
EINVAL	O
;	O
buffer	O
=	O
malloc	O
(	O
1	int
)	O
;	O
if	O
(	O
buffer	O
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
*	O
buffer	pointer
=	O
'\0'	O
;	O
for	O
(	O
len	long
=	O
i	int
=	O
j	int
=	O
0	int
;	O
i	long
<	O
argc	int
;	O
i	O
++	O
)	O
{	O
int	O
quote	int
;	O
int	O
toklen	int
;	O
switch	O
(	O
esc	O
)	O
{	O
case	O
mu_argcv_escape_no	O
:	O
toklen	O
=	O
strlen	O
(	O
argv	pointer
[	O
i	int
]	O
)	O
;	O
quote	O
=	O
0	O
;	O
break	O
;	O
case	O
mu_argcv_escape_c	O
:	O
toklen	O
=	O
mu_wordsplit_c_quoted_length	O
(	O
argv	pointer
[	O
i	int
]	O
,	O
quote_hex	pointer
,	O
&	pointer
quote	pointer
)	O
;	O
break	O
;	O
default	O
:	O
return	O
EINVAL	int
;	O
}	O
len	O
+=	O
toklen	O
+	O
delimlen	int
;	O
if	O
(	O
quote	O
)	O
len	O
+=	O
2	int
;	O
buffer	O
=	O
realloc	int
(	O
buffer	pointer
,	O
len	pointer
+	O
1	int
)	O
;	O
if	O
(	O
buffer	O
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
i	O
!=	O
0	O
)	O
{	O
memcpy	O
(	O
buffer	pointer
+	O
j	int
,	O
delim	int
,	O
delimlen	pointer
)	O
;	O
j	O
+=	O
delimlen	int
;	O
}	O
if	O
(	O
quote	O
)	O
buffer	O
[	O
j	int
++	O
]	O
=	O
'"'	pointer
;	O
switch	pointer
(	O
esc	O
)	O
{	O
case	O
mu_argcv_escape_no	O
:	O
memcpy	O
(	O
buffer	pointer
+	O
j	int
,	O
argv	int
[	O
i	int
]	O
,	O
toklen	pointer
)	O
;	O
break	O
;	O
case	O
mu_argcv_escape_c	O
:	O
mu_wordsplit_c_quote_copy	O
(	O
buffer	pointer
+	O
j	int
,	O
argv	int
[	O
i	int
]	O
,	O
quote_hex	pointer
)	O
;	O
break	O
;	O
}	O
j	O
+=	O
toklen	O
;	O
if	O
(	O
quote	O
)	O
buffer	O
[	O
j	int
++	O
]	O
=	O
'"'	pointer
;	O
}	pointer
buffer	O
[	O
j	int
]	O
=	O
0	O
;	O
*	O
pstring	pointer
=	O
buffer	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_argcv_string	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	pointer
argv	pointer
,	O
char	O
*	O
*	pointer
pstring	pointer
)	O
{	O
return	O
mu_argcv_join	int
(	O
argc	O
,	O
argv	O
,	O
" "	O
,	O
mu_argcv_escape_c	O
,	O
pstring	O
)	O
;	O
}	O