static	O
unsigned	O
char	O
pdu_family	O
[	O
256	O
]	O
=	O
{	O
0	O
,	O
1	int
,	O
2	int
,	O
2	int
,	O
1	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
6	int
,	O
6	int
,	O
4	int
,	O
4	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
}	int
;	O
static	O
int	O
protocol_version	function
=	O
DISProtocolVersionIEEE1278_95	int
;	O
int	O
DISxSetProtocolVersion	int
(	O
int	O
version	int
)	O
{	O
int	O
result	int
=	O
protocol_version	int
;	O
protocol_version	int
=	O
version	int
;	O
return	int
result	int
;	O
}	int
int	O
DISxSetPDUProtocolFamily	function
(	O
int	O
pdu_type	int
,	O
int	O
protocol_family	int
)	O
{	O
int	O
result	int
;	O
if	int
(	O
pdu_type	int
<	O
0	int
||	O
pdu_type	int
>	O
255	int
)	O
{	O
return	O
-	int
1	int
;	O
}	int
result	O
=	O
pdu_family	function
[	O
pdu_type	int
]	O
;	O
pdu_family	O
[	O
pdu_type	int
]	O
=	O
protocol_family	int
;	O
return	int
result	int
;	O
}	int
int	O
DISxPortNumber	function
=	O
-	int
1	int
;	O
DISxApplicationInfo	O
*	O
DISxInitializeApplication	pointer
(	O
unsigned	O
int	O
exercise_id	int
,	O
unsigned	O
int	int
site_id	int
,	O
unsigned	O
int	int
application_id	int
)	O
{	O
char	O
name	array
[	O
64	int
]	O
;	O
int	O
result	int
;	O
DISxApplicationInfo	O
*	O
p	pointer
=	O
(	int
DISxApplicationInfo	O
*	O
)	O
malloc	pointer
(	O
sizeof	int
(	O
DISxApplicationInfo	O
)	O
)	O
;	O
if	O
(	O
!	int
p	O
)	O
{	O
return	O
p	int
;	O
}	int
p	O
->	O
hdr	int
.	O
protocol_version	int
=	O
protocol_version	int
;	O
p	int
->	O
hdr	int
.	O
exercise_id	int
=	O
exercise_id	int
;	O
p	pointer
->	O
hdr	int
.	O
padding	int
=	O
0	int
;	O
p	int
->	O
last_event	int
=	O
0	int
;	O
p	int
->	O
last_entity	int
=	O
0	int
;	O
p	int
->	O
last_request	int
=	O
0	int
;	O
p	int
->	O
xcvr	int
=	O
DISOpenTransceiver	int
(	O
DISxPortNumber	pointer
)	O
;	O
if	O
(	O
!	int
p	O
->	O
xcvr	int
)	O
{	O
free	pointer
(	O
p	pointer
)	O
;	O
return	O
NULL	int
;	O
}	int
if	O
(	O
DISSetNBIOState	int
(	O
p	int
->	O
xcvr	int
,	O
1	int
)	O
!=	O
0	int
)	O
{	O
free	O
(	O
p	pointer
)	O
;	O
return	O
NULL	int
;	O
}	int
if	O
(	O
site_id	int
!=	O
0	int
&&	O
application_id	int
!=	O
0	int
)	O
{	O
p	O
->	O
id	int
.	O
site_id	int
=	O
site_id	int
;	O
p	pointer
->	O
id	int
.	O
application_id	int
=	O
application_id	int
;	O
result	pointer
=	O
SIMx_SUCCESS	int
;	O
}	int
else	O
{	O
if	O
(	O
site_id	int
==	O
0	O
)	O
{	O
SIMxGetSiteName	O
(	O
name	int
,	O
sizeof	int
(	O
name	O
)	O
)	O
;	O
}	O
else	O
{	O
sprintf	O
(	O
name	pointer
,	O
"0x%x"	pointer
,	O
site_id	int
)	O
;	O
}	O
result	O
=	O
SIMxRegisterApplication	function
(	O
(	O
char	O
*	O
)	O
NULL	pointer
,	O
name	int
,	O
application_id	int
,	O
&	int
p	pointer
->	O
id	pointer
)	O
;	O
}	O
return	O
(	O
result	O
==	O
SIMx_SUCCESS	O
)	O
?	O
p	int
:	O
NULL	int
;	O
}	int
void	O
DISxGetSimulationAddress	function
(	O
DISxApplicationInfo	O
*	O
info	pointer
,	O
dis_simulation_addr	O
*	O
p	pointer
)	O
{	O
*	O
p	pointer
=	O
info	int
->	O
id	int
;	O
}	O
void	O
DISxSetExerciseID	function
(	O
DISxApplicationInfo	O
*	O
info	pointer
,	O
int	O
id	int
)	O
{	O
info	O
->	O
hdr	pointer
.	O
exercise_id	pointer
=	O
id	pointer
;	O
}	pointer
int	O
DISxWritePDU	function
(	O
DISxApplicationInfo	O
*	O
info	pointer
,	O
dis_pdu	O
*	O
p	pointer
)	O
{	O
p	O
->	O
hdr	pointer
.	O
protocol_version	pointer
=	O
info	int
->	O
hdr	pointer
.	O
protocol_version	pointer
;	O
p	pointer
->	O
hdr	pointer
.	O
exercise_id	pointer
=	O
info	int
->	O
hdr	pointer
.	O
exercise_id	pointer
;	O
p	pointer
->	O
hdr	pointer
.	O
protocol_family	pointer
=	O
pdu_family	int
[	O
p	int
->	O
hdr	int
.	O
pdu_type	int
]	O
;	O
return	pointer
DISWritePDU	O
(	O
info	pointer
->	O
xcvr	pointer
,	O
p	pointer
)	O
;	O
}	O
int	O
DISxReadPDU	function
(	O
DISxApplicationInfo	O
*	O
info	pointer
,	O
dis_pdu	O
*	O
p	pointer
)	O
{	O
return	O
DISReadPDU	int
(	O
info	int
->	O
xcvr	pointer
,	O
p	pointer
)	O
;	O
}	O
void	O
DISxCloseApplication	function
(	O
DISxApplicationInfo	O
*	O
info	pointer
)	O
{	O
DISCloseTransceiver	O
(	O
info	O
->	O
xcvr	pointer
)	O
;	O
free	O
(	O
info	pointer
)	O
;	O
}	O
dis_request_id	O
DISxIssueRequestID	O
(	O
DISxApplicationInfo	O
*	O
info	pointer
)	O
{	O
dis_request_id	O
result	O
;	O
result	O
=	O
++	int
info	O
->	O
last_request	pointer
;	O
if	pointer
(	O
info	pointer
->	O
last_request	int
==	O
0xfffffff	int
)	O
{	O
info	pointer
->	O
last_request	pointer
=	O
0	int
;	O
}	pointer
return	O
result	O
;	O
}	O