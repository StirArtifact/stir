static	O
double	O
inv_cornish_fisher	function
(	O
double	O
z	O
,	O
double	O
nu	O
)	O
{	O
double	O
a	double
=	O
1	O
/	O
(	int
nu	O
-	O
0.5	int
)	O
;	O
double	O
b	double
=	O
48.0	O
/	O
(	int
a	O
*	O
a	O
)	O
;	O
double	O
cf1	double
=	O
z	O
*	O
(	double
3	O
+	O
z	int
*	O
z	double
)	O
;	O
double	O
cf2	double
=	O
z	O
*	O
(	double
945	O
+	O
z	int
*	O
z	double
*	O
(	O
360	O
+	O
z	int
*	O
z	double
*	O
(	O
63	O
+	O
z	int
*	O
z	double
*	O
4	O
)	O
)	O
)	O
;	O
double	O
y	double
=	O
z	O
-	O
cf1	int
/	O
b	int
+	O
cf2	int
/	O
(	int
10	O
*	O
b	O
*	O
b	double
)	O
;	O
double	O
t	double
=	O
GSL_SIGN	O
(	O
z	double
)	O
*	O
sqrt	pointer
(	O
nu	O
*	O
expm1	double
(	O
a	O
*	O
y	double
*	O
y	O
)	O
)	O
;	O
return	O
t	int
;	O
}	O
double	O
gsl_cdf_tdist_Pinv	function
(	O
const	O
double	O
P	double
,	O
const	O
double	O
nu	double
)	O
{	O
double	O
x	double
,	O
ptail	O
;	O
if	O
(	O
P	O
==	O
1.0	O
)	O
{	O
return	O
GSL_POSINF	int
;	O
}	O
else	O
if	O
(	O
P	O
==	O
0.0	O
)	O
{	O
return	O
GSL_NEGINF	int
;	O
}	O
if	O
(	O
nu	O
==	O
1.0	O
)	O
{	O
x	O
=	O
tan	function
(	O
M_PI	O
*	O
(	O
P	O
-	O
0.5	int
)	O
)	O
;	O
return	O
x	int
;	O
}	O
else	O
if	O
(	O
nu	O
==	O
2.0	O
)	O
{	O
x	O
=	O
(	O
2	O
*	O
P	O
-	O
1	int
)	O
/	O
sqrt	int
(	O
2	double
*	O
P	double
*	O
(	O
1	O
-	O
P	int
)	O
)	O
;	O
return	O
x	int
;	O
}	O
ptail	O
=	O
(	function
P	O
<	O
0.5	O
)	O
?	O
P	O
:	O
1	O
-	O
P	int
;	O
if	O
(	O
sqrt	O
(	O
M_PI	int
*	O
nu	O
/	O
2	int
)	O
*	O
ptail	pointer
>	O
pow	int
(	O
0.05	int
,	O
nu	int
/	O
2	int
)	O
)	O
{	O
double	O
xg	double
=	O
gsl_cdf_ugaussian_Pinv	O
(	O
P	O
)	O
;	O
x	O
=	O
inv_cornish_fisher	O
(	O
xg	O
,	O
nu	O
)	O
;	O
}	O
else	O
{	O
double	O
beta	double
=	O
gsl_sf_beta	O
(	O
0.5	O
,	O
nu	O
/	O
2	int
)	O
;	O
if	O
(	O
P	O
<	O
0.5	int
)	O
{	O
x	O
=	O
-	function
sqrt	O
(	O
nu	O
)	O
*	O
pow	O
(	O
beta	O
*	O
nu	O
*	O
P	O
,	O
-	O
1.0	int
/	O
nu	O
)	O
;	O
}	O
else	O
{	O
x	O
=	O
sqrt	function
(	O
nu	O
)	O
*	O
pow	pointer
(	O
beta	O
*	O
nu	O
*	O
(	O
1	O
-	O
P	int
)	O
,	O
-	O
1.0	int
/	O
nu	O
)	O
;	O
}	O
x	O
/=	O
sqrt	O
(	O
1	O
+	O
nu	int
/	O
(	int
x	O
*	O
x	pointer
)	O
)	O
;	O
}	O
{	O
double	O
dP	function
,	O
phi	O
;	O
unsigned	O
int	O
n	int
=	O
0	int
;	O
start	O
:	O
dP	O
=	O
P	int
-	O
gsl_cdf_tdist_P	int
(	O
x	int
,	O
nu	O
)	O
;	O
phi	O
=	O
gsl_ran_tdist_pdf	int
(	O
x	O
,	O
nu	O
)	O
;	O
if	O
(	O
dP	int
==	O
0.0	O
||	O
n	int
++	O
>	O
32	int
)	O
goto	O
end	O
;	O
{	O
double	O
lambda	double
=	O
dP	int
/	O
phi	int
;	O
double	O
step0	double
=	O
lambda	int
;	O
double	O
step1	double
=	O
(	O
(	O
nu	O
+	O
1	int
)	O
*	O
x	O
/	O
(	O
x	O
*	O
x	O
+	O
nu	O
)	O
)	O
*	O
(	pointer
lambda	O
*	O
lambda	O
/	O
4.0	int
)	O
;	O
double	O
step	double
=	O
step0	O
;	O
if	O
(	O
fabs	O
(	O
step1	pointer
)	O
<	O
fabs	int
(	O
step0	pointer
)	O
)	O
{	O
step	O
+=	O
step1	int
;	O
}	O
if	O
(	O
P	O
>	O
0.5	int
&&	O
x	int
+	O
step	int
<	O
0	int
)	O
x	O
/=	O
2	O
;	O
else	O
if	O
(	O
P	int
<	O
0.5	int
&&	O
x	int
+	O
step	int
>	O
0	int
)	O
x	O
/=	O
2	O
;	O
else	O
x	O
+=	O
step	int
;	O
if	O
(	O
fabs	O
(	O
step	pointer
)	O
>	O
1e-10	int
*	O
fabs	O
(	O
x	double
)	O
)	O
goto	O
start	O
;	O
}	O
end	O
:	O
if	O
(	O
fabs	O
(	O
dP	pointer
)	O
>	O
GSL_SQRT_DBL_EPSILON	int
*	O
P	O
)	O
{	O
GSL_ERROR_VAL	O
(	O
"inverse failed to converge"	pointer
,	O
GSL_EFAILED	int
,	O
GSL_NAN	int
)	O
;	O
}	O
return	O
x	int
;	O
}	O
}	O
double	O
gsl_cdf_tdist_Qinv	function
(	O
const	O
double	O
Q	double
,	O
const	O
double	O
nu	double
)	O
{	O
double	O
x	double
,	O
qtail	O
;	O
if	O
(	O
Q	O
==	O
0.0	O
)	O
{	O
return	O
GSL_POSINF	int
;	O
}	O
else	O
if	O
(	O
Q	O
==	O
1.0	O
)	O
{	O
return	O
GSL_NEGINF	int
;	O
}	O
if	O
(	O
nu	O
==	O
1.0	O
)	O
{	O
x	O
=	O
tan	function
(	O
M_PI	O
*	O
(	O
0.5	O
-	O
Q	int
)	O
)	O
;	O
return	O
x	int
;	O
}	O
else	O
if	O
(	O
nu	O
==	O
2.0	O
)	O
{	O
x	O
=	O
(	function
1	O
-	O
2	int
*	O
Q	int
)	O
/	O
sqrt	int
(	O
2	int
*	O
Q	O
*	O
(	O
1	O
-	O
Q	int
)	O
)	O
;	O
return	O
x	int
;	O
}	O
qtail	O
=	O
(	function
Q	O
<	O
0.5	O
)	O
?	O
Q	O
:	O
1	O
-	O
Q	int
;	O
if	O
(	O
sqrt	int
(	O
M_PI	int
*	O
nu	O
/	O
2	int
)	O
*	O
qtail	pointer
>	O
pow	int
(	O
0.05	int
,	O
nu	int
/	O
2	int
)	O
)	O
{	O
double	O
xg	double
=	O
gsl_cdf_ugaussian_Qinv	O
(	O
Q	O
)	O
;	O
x	O
=	O
inv_cornish_fisher	O
(	O
xg	O
,	O
nu	O
)	O
;	O
}	O
else	O
{	O
double	O
beta	double
=	O
gsl_sf_beta	O
(	O
0.5	O
,	O
nu	O
/	O
2	int
)	O
;	O
if	O
(	O
Q	O
<	O
0.5	int
)	O
{	O
x	O
=	O
sqrt	function
(	O
nu	double
)	O
*	O
pow	pointer
(	O
beta	O
*	O
nu	O
*	O
Q	O
,	O
-	O
1.0	int
/	O
nu	O
)	O
;	O
}	O
else	O
{	O
x	O
=	O
-	function
sqrt	O
(	O
nu	O
)	O
*	O
pow	O
(	O
beta	O
*	O
nu	O
*	O
(	O
1	O
-	O
Q	int
)	O
,	O
-	O
1.0	int
/	O
nu	O
)	O
;	O
}	O
x	O
/=	O
sqrt	O
(	O
1	O
+	O
nu	int
/	O
(	int
x	O
*	O
x	pointer
)	O
)	O
;	O
}	O
{	O
double	O
dQ	function
,	O
phi	O
;	O
unsigned	O
int	O
n	int
=	O
0	int
;	O
start	O
:	O
dQ	O
=	O
Q	int
-	O
gsl_cdf_tdist_Q	int
(	O
x	int
,	O
nu	O
)	O
;	O
phi	O
=	O
gsl_ran_tdist_pdf	int
(	O
x	O
,	O
nu	O
)	O
;	O
if	O
(	O
dQ	int
==	O
0.0	O
||	O
n	int
++	O
>	O
32	int
)	O
goto	O
end	O
;	O
{	O
double	O
lambda	double
=	O
-	int
dQ	int
/	O
phi	int
;	O
double	O
step0	double
=	O
lambda	O
;	O
double	O
step1	double
=	O
(	O
(	O
nu	O
+	O
1	int
)	O
*	O
x	O
/	O
(	O
x	O
*	O
x	O
+	O
nu	O
)	O
)	O
*	O
(	pointer
lambda	O
*	O
lambda	O
/	O
4.0	int
)	O
;	O
double	O
step	double
=	O
step0	O
;	O
if	O
(	O
fabs	O
(	O
step1	pointer
)	O
<	O
fabs	int
(	O
step0	pointer
)	O
)	O
{	O
step	O
+=	O
step1	int
;	O
}	O
if	O
(	O
Q	O
<	O
0.5	int
&&	O
x	int
+	O
step	int
<	O
0	int
)	O
x	O
/=	O
2	O
;	O
else	O
if	O
(	O
Q	int
>	O
0.5	int
&&	O
x	int
+	O
step	int
>	O
0	int
)	O
x	O
/=	O
2	O
;	O
else	O
x	O
+=	O
step	int
;	O
if	O
(	O
fabs	O
(	O
step	pointer
)	O
>	O
1e-10	int
*	O
fabs	O
(	O
x	double
)	O
)	O
goto	O
start	O
;	O
}	O
}	O
end	O
:	O
return	O
x	O
;	O
}	O