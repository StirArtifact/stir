static	O
double	O
bisect	function
(	O
double	O
x	O
,	O
double	O
P	O
,	O
double	O
a	O
,	O
double	O
b	O
,	O
double	O
xtol	O
,	O
double	O
Ptol	double
)	O
{	O
double	O
x0	double
=	O
0	O
,	O
x1	int
=	O
1	O
,	O
Px	int
;	O
while	O
(	O
fabs	O
(	O
x1	pointer
-	O
x0	double
)	O
>	O
xtol	int
)	O
{	O
Px	O
=	O
gsl_cdf_beta_P	int
(	O
x	pointer
,	O
a	O
,	O
b	int
)	O
;	O
if	O
(	O
fabs	O
(	O
Px	pointer
-	O
P	double
)	O
<	O
Ptol	int
)	O
{	O
return	O
x	int
;	O
}	O
else	O
if	O
(	O
Px	O
<	O
P	int
)	O
{	O
x0	O
=	O
x	double
;	O
}	O
else	O
if	O
(	O
Px	O
>	O
P	int
)	O
{	O
x1	O
=	O
x	O
;	O
}	O
x	O
=	O
0.5	function
*	O
(	O
x0	O
+	O
x1	int
)	O
;	O
}	O
return	O
x	int
;	O
}	O
double	O
gsl_cdf_beta_Pinv	function
(	O
const	O
double	O
P	double
,	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
)	O
{	O
double	O
x	double
,	O
mean	O
;	O
if	O
(	O
P	O
<	O
0.0	int
||	O
P	O
>	O
1.0	int
)	O
{	O
CDF_ERROR	O
(	O
"P must be in range 0 < P < 1"	pointer
,	O
GSL_EDOM	double
)	O
;	O
}	O
if	O
(	O
a	O
<	O
0.0	int
)	O
{	O
CDF_ERROR	O
(	O
"a < 0"	pointer
,	O
GSL_EDOM	double
)	O
;	O
}	O
if	O
(	O
b	O
<	O
0.0	int
)	O
{	O
CDF_ERROR	O
(	O
"b < 0"	pointer
,	O
GSL_EDOM	double
)	O
;	O
}	O
if	O
(	O
P	O
==	O
0.0	O
)	O
{	O
return	O
0.0	int
;	O
}	O
if	O
(	O
P	O
==	O
1.0	O
)	O
{	O
return	O
1.0	int
;	O
}	O
if	O
(	O
P	O
>	O
0.5	int
)	O
{	O
return	O
gsl_cdf_beta_Qinv	int
(	O
1	pointer
-	O
P	int
,	O
a	int
,	O
b	int
)	O
;	O
}	O
mean	O
=	O
a	O
/	O
(	int
a	O
+	O
b	int
)	O
;	O
if	O
(	O
P	O
<	O
0.1	int
)	O
{	O
double	O
lg_ab	double
=	O
gsl_sf_lngamma	int
(	O
a	O
+	O
b	int
)	O
;	O
double	O
lg_a	double
=	O
gsl_sf_lngamma	O
(	O
a	O
)	O
;	O
double	O
lg_b	double
=	O
gsl_sf_lngamma	O
(	O
b	O
)	O
;	O
double	O
lx	double
=	O
(	int
log	O
(	O
a	double
)	O
+	O
lg_a	int
+	O
lg_b	int
-	O
lg_ab	int
+	O
log	int
(	O
P	double
)	O
)	O
/	O
a	int
;	O
if	O
(	O
lx	O
<=	O
0	int
)	O
{	O
x	O
=	O
exp	O
(	O
lx	double
)	O
;	O
x	O
*=	O
pow	O
(	O
1	int
-	O
x	int
,	O
-	O
(	int
b	O
-	O
1	int
)	O
/	O
a	int
)	O
;	O
}	O
else	O
{	O
x	O
=	O
mean	O
;	O
}	O
if	O
(	O
x	O
>	O
mean	int
)	O
x	O
=	O
mean	pointer
;	O
}	O
else	O
{	O
x	O
=	O
mean	O
;	O
}	O
x	O
=	O
bisect	function
(	O
x	O
,	O
P	O
,	O
a	O
,	O
b	int
,	O
0.01	int
,	O
0.01	int
)	O
;	O
{	O
double	O
lambda	double
,	O
dP	O
,	O
phi	O
;	O
unsigned	O
int	O
n	int
=	O
0	int
;	O
start	O
:	O
dP	O
=	O
P	int
-	O
gsl_cdf_beta_P	int
(	O
x	double
,	O
a	O
,	O
b	int
)	O
;	O
phi	O
=	O
gsl_ran_beta_pdf	int
(	O
x	pointer
,	O
a	O
,	O
b	int
)	O
;	O
if	O
(	O
dP	O
==	O
0.0	int
||	O
n	int
++	O
>	O
64	int
)	O
goto	O
end	O
;	O
lambda	O
=	O
dP	int
/	O
GSL_MAX	int
(	O
2	int
*	O
fabs	O
(	O
dP	double
/	O
x	int
)	O
,	O
phi	O
)	O
;	O
{	O
double	O
step0	double
=	O
lambda	O
;	O
double	O
step1	double
=	O
-	O
(	int
(	O
a	O
-	O
1	int
)	O
/	O
x	int
-	O
(	int
b	O
-	O
1	int
)	O
/	O
(	int
1	O
-	O
x	int
)	O
)	O
*	O
lambda	pointer
*	O
lambda	O
/	O
2	int
;	O
double	O
step	double
=	O
step0	O
;	O
if	O
(	O
fabs	O
(	O
step1	pointer
)	O
<	O
fabs	int
(	O
step0	pointer
)	O
)	O
{	O
step	O
+=	O
step1	int
;	O
}	O
else	O
{	O
step	O
*=	O
2	O
*	O
fabs	double
(	O
step0	pointer
/	O
step1	double
)	O
;	O
}	O
;	O
if	O
(	O
x	O
+	O
step	int
>	O
0	int
&&	O
x	int
+	O
step	int
<	O
1	int
)	O
{	O
x	O
+=	O
step	int
;	O
}	O
else	O
{	O
x	O
=	O
sqrt	O
(	O
x	double
)	O
*	O
sqrt	pointer
(	O
mean	O
)	O
;	O
}	O
if	O
(	O
fabs	O
(	O
step0	pointer
)	O
>	O
1e-10	int
*	O
x	double
)	O
goto	O
start	O
;	O
}	O
end	O
:	O
if	O
(	O
fabs	O
(	O
dP	pointer
)	O
>	O
GSL_SQRT_DBL_EPSILON	int
*	O
P	O
)	O
{	O
GSL_ERROR_VAL	O
(	O
"inverse failed to converge"	pointer
,	O
GSL_EFAILED	int
,	O
GSL_NAN	int
)	O
;	O
}	O
return	O
x	int
;	O
}	O
}	O
double	O
gsl_cdf_beta_Qinv	function
(	O
const	O
double	O
Q	double
,	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
)	O
{	O
if	O
(	O
Q	O
<	O
0.0	int
||	O
Q	O
>	O
1.0	int
)	O
{	O
CDF_ERROR	O
(	O
"Q must be inside range 0 < Q < 1"	pointer
,	O
GSL_EDOM	double
)	O
;	O
}	O
if	O
(	O
a	O
<	O
0.0	int
)	O
{	O
CDF_ERROR	O
(	O
"a < 0"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
if	O
(	O
b	O
<	O
0.0	int
)	O
{	O
CDF_ERROR	O
(	O
"b < 0"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
if	O
(	O
Q	O
==	O
0.0	int
)	O
{	O
return	O
1.0	int
;	O
}	O
if	O
(	O
Q	O
==	O
1.0	int
)	O
{	O
return	O
0.0	int
;	O
}	O
if	O
(	O
Q	O
>	O
0.5	int
)	O
{	O
return	O
gsl_cdf_beta_Pinv	int
(	O
1	pointer
-	O
Q	int
,	O
a	int
,	O
b	int
)	O
;	O
}	O
else	O
{	O
return	O
1	int
-	O
gsl_cdf_beta_Pinv	int
(	O
Q	O
,	O
b	int
,	O
a	int
)	O
;	O
}	O
;	O
}	O