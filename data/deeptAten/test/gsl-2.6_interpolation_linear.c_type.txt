static	O
int	O
linear_init	function
(	O
void	O
*	O
vstate	pointer
,	O
const	O
double	O
x_array	O
[	O
]	O
,	O
const	O
double	O
y_array	array
[	O
]	O
,	O
size_t	O
size	O
)	O
{	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
linear_eval	function
(	O
const	O
void	O
*	O
vstate	pointer
,	O
const	O
double	O
x_array	O
[	O
]	O
,	O
const	O
double	O
y_array	array
[	O
]	O
,	O
size_t	O
size	O
,	O
double	O
x	array
,	O
gsl_interp_accel	O
*	O
a	pointer
,	O
double	O
*	O
y	pointer
)	O
{	O
double	O
x_lo	double
,	O
x_hi	O
;	O
double	O
y_lo	double
,	O
y_hi	O
;	O
double	O
dx	double
;	O
size_t	O
index	long
;	O
if	O
(	O
a	O
!=	O
0	int
)	O
{	O
index	O
=	O
gsl_interp_accel_find	int
(	O
a	pointer
,	O
x_array	int
,	O
size	int
,	O
x	int
)	O
;	O
}	O
else	O
{	O
index	O
=	O
gsl_interp_bsearch	int
(	O
x_array	pointer
,	O
x	int
,	O
0	O
,	O
size	int
-	O
1	int
)	O
;	O
}	O
x_lo	O
=	O
x_array	function
[	O
index	int
]	O
;	O
x_hi	O
=	O
x_array	int
[	O
index	int
+	O
1	int
]	O
;	O
y_lo	O
=	O
y_array	int
[	O
index	int
]	O
;	O
y_hi	O
=	O
y_array	int
[	O
index	int
+	O
1	int
]	O
;	O
dx	O
=	O
x_hi	O
-	O
x_lo	int
;	O
if	O
(	O
dx	O
>	O
0.0	int
)	O
{	O
*	O
y	pointer
=	O
y_lo	O
+	O
(	int
x	O
-	O
x_lo	int
)	O
/	O
dx	int
*	O
(	O
y_hi	O
-	O
y_lo	int
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
*	O
y	pointer
=	O
0.0	O
;	O
return	O
GSL_EINVAL	int
;	O
}	O
}	O
static	O
int	O
linear_eval_deriv	function
(	O
const	O
void	O
*	O
vstate	pointer
,	O
const	O
double	O
x_array	O
[	O
]	O
,	O
const	O
double	O
y_array	array
[	O
]	O
,	O
size_t	O
size	O
,	O
double	O
x	array
,	O
gsl_interp_accel	O
*	O
a	pointer
,	O
double	O
*	O
dydx	pointer
)	O
{	O
double	O
x_lo	double
,	O
x_hi	O
;	O
double	O
y_lo	double
,	O
y_hi	O
;	O
double	O
dx	double
;	O
double	O
dy	double
;	O
size_t	O
index	long
;	O
if	O
(	O
a	O
!=	O
0	int
)	O
{	O
index	O
=	O
gsl_interp_accel_find	int
(	O
a	pointer
,	O
x_array	int
,	O
size	int
,	O
x	int
)	O
;	O
}	O
else	O
{	O
index	O
=	O
gsl_interp_bsearch	int
(	O
x_array	pointer
,	O
x	int
,	O
0	O
,	O
size	int
-	O
1	int
)	O
;	O
}	O
x_lo	O
=	O
x_array	function
[	O
index	int
]	O
;	O
x_hi	O
=	O
x_array	int
[	O
index	int
+	O
1	int
]	O
;	O
y_lo	O
=	O
y_array	int
[	O
index	int
]	O
;	O
y_hi	O
=	O
y_array	int
[	O
index	int
+	O
1	int
]	O
;	O
dx	O
=	O
x_hi	O
-	O
x_lo	int
;	O
dy	O
=	O
y_hi	int
-	O
y_lo	int
;	O
if	O
(	O
dx	O
>	O
0.0	int
)	O
{	O
*	O
dydx	pointer
=	O
dy	int
/	O
dx	int
;	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
*	O
dydx	pointer
=	O
0.0	O
;	O
return	O
GSL_EINVAL	int
;	O
}	O
}	O
static	O
int	O
linear_eval_deriv2	function
(	O
const	O
void	O
*	O
vstate	pointer
,	O
const	O
double	O
x_array	O
[	O
]	O
,	O
const	O
double	O
y_array	array
[	O
]	O
,	O
size_t	O
size	O
,	O
double	O
x	array
,	O
gsl_interp_accel	O
*	O
a	pointer
,	O
double	O
*	O
y_pp	pointer
)	O
{	O
*	O
y_pp	pointer
=	O
0.0	O
;	O
return	O
GSL_SUCCESS	O
;	O
}	O
static	O
int	O
linear_eval_integ	function
(	O
const	O
void	O
*	O
vstate	pointer
,	O
const	O
double	O
x_array	O
[	O
]	O
,	O
const	O
double	O
y_array	double
[	O
]	O
,	O
size_t	O
size	O
,	O
gsl_interp_accel	O
*	O
acc	pointer
,	O
double	O
a	O
,	O
double	O
b	O
,	O
double	O
*	O
result	pointer
)	O
{	O
size_t	O
i	long
,	O
index_a	O
,	O
index_b	long
;	O
if	O
(	O
acc	long
!=	O
0	O
)	O
{	O
index_a	O
=	O
gsl_interp_accel_find	int
(	O
acc	pointer
,	O
x_array	pointer
,	O
size	long
,	O
a	O
)	O
;	O
index_b	O
=	O
gsl_interp_accel_find	int
(	O
acc	pointer
,	O
x_array	pointer
,	O
size	long
,	O
b	O
)	O
;	O
}	O
else	O
{	O
index_a	O
=	O
gsl_interp_bsearch	int
(	O
x_array	pointer
,	O
a	long
,	O
0	int
,	O
size	int
-	O
1	int
)	O
;	O
index_b	O
=	O
gsl_interp_bsearch	int
(	O
x_array	pointer
,	O
b	int
,	O
0	long
,	O
size	int
-	O
1	int
)	O
;	O
}	O
*	O
result	function
=	O
0.0	O
;	O
for	O
(	O
i	long
=	O
index_a	int
;	O
i	long
<=	O
index_b	int
;	O
i	long
++	O
)	O
{	O
const	O
double	O
x_hi	O
=	O
x_array	O
[	O
i	int
+	O
1	int
]	O
;	O
const	O
double	O
x_lo	O
=	O
x_array	O
[	O
i	int
]	O
;	O
const	O
double	O
y_lo	O
=	O
y_array	O
[	O
i	int
]	O
;	O
const	O
double	O
y_hi	O
=	O
y_array	int
[	O
i	int
+	O
1	int
]	O
;	O
const	O
double	O
dx	O
=	O
x_hi	O
-	O
x_lo	int
;	O
if	O
(	O
dx	O
!=	O
0.0	O
)	O
{	O
if	O
(	O
i	O
==	O
index_a	int
||	O
i	int
==	O
index_b	int
)	O
{	O
double	O
x1	double
=	O
(	O
i	O
==	O
index_a	int
)	O
?	O
a	int
:	O
x_lo	O
;	O
double	O
x2	O
=	O
(	int
i	O
==	O
index_b	O
)	O
?	O
b	int
:	O
x_hi	O
;	O
const	O
double	O
D	O
=	O
(	int
y_hi	O
-	O
y_lo	int
)	O
/	O
dx	int
;	O
*	O
result	pointer
+=	O
(	int
x2	O
-	O
x1	int
)	O
*	O
(	pointer
y_lo	O
+	O
0.5	int
*	O
D	O
*	O
(	double
(	O
x2	O
-	O
x_lo	int
)	O
+	O
(	int
x1	O
-	O
x_lo	int
)	O
)	O
)	O
;	O
}	O
else	O
{	O
*	O
result	pointer
+=	O
0.5	int
*	O
dx	O
*	O
(	O
y_lo	O
+	O
y_hi	int
)	O
;	O
}	O
}	O
}	O
return	O
GSL_SUCCESS	O
;	O
}	O
static	O
const	O
gsl_interp_type	O
linear_type	O
=	O
{	O
"linear"	O
,	O
2	O
,	O
NULL	int
,	O
&	int
linear_init	pointer
,	O
&	O
linear_eval	struct
,	O
&	O
linear_eval_deriv	struct
,	O
&	O
linear_eval_deriv2	struct
,	O
&	O
linear_eval_integ	struct
,	O
NULL	O
,	O
}	O
;	O
const	O
gsl_interp_type	O
*	O
gsl_interp_linear	pointer
=	O
&	O
linear_type	pointer
;	O