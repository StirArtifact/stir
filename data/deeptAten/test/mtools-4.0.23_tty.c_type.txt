static	O
FILE	O
*	O
tty	function
=	O
NULL	O
;	O
static	O
int	O
notty	int
=	O
0	O
;	O
static	O
int	O
ttyfd	function
=	O
-	O
1	int
;	O
int	O
mtools_raw_tty	int
=	O
1	O
;	O
typedef	O
struct	O
termios	O
Terminal	O
;	O
static	O
int	O
tty_mode	int
=	O
-	O
1	int
;	O
static	O
int	O
need_tty_reset	int
=	O
0	O
;	O
static	O
int	O
handlerIsSet	int
=	O
0	O
;	O
static	O
Terminal	O
in_orig	O
;	O
static	O
void	O
tty_time_out	function
(	O
int	O
dummy	int
UNUSEDP	O
)	O
NORETURN	O
;	O
static	O
void	O
tty_time_out	function
(	O
int	O
dummy	int
UNUSEDP	O
)	O
{	O
int	O
exit_code	int
;	O
signal	O
(	O
SIGALRM	int
,	O
SIG_IGN	O
)	O
;	O
if	O
(	O
tty	int
&&	O
need_tty_reset	O
)	O
restore_tty	O
(	O
&	pointer
in_orig	struct
)	O
;	O
exit_code	O
=	O
DONE	int
;	O
exit	O
(	O
exit_code	int
)	O
;	O
}	O
static	O
void	O
cleanup_tty	function
(	O
void	O
)	O
{	O
if	O
(	O
tty	int
&&	O
need_tty_reset	int
)	O
{	O
restore_tty	O
(	O
&	pointer
in_orig	pointer
)	O
;	O
setup_signal	O
(	O
)	O
;	O
}	O
}	O
static	O
void	O
set_raw_tty	function
(	O
int	O
mode	int
)	O
{	O
Terminal	O
in_raw	O
;	O
if	O
(	O
mode	O
!=	O
tty_mode	int
&&	O
mode	int
!=	O
-	int
1	int
)	O
{	O
if	O
(	O
!	int
handlerIsSet	O
)	O
{	O
gtty	O
(	O
STDIN	pointer
,	O
&	int
in_orig	pointer
)	O
;	O
need_tty_reset	O
=	O
1	O
;	O
atexit	O
(	O
cleanup_tty	O
)	O
;	O
handlerIsSet	O
=	O
1	O
;	O
}	O
setup_signal	O
(	O
)	O
;	O
signal	O
(	O
SIGALRM	int
,	O
tty_time_out	O
)	O
;	O
gtty	O
(	O
STDIN	O
,	O
&	int
in_raw	pointer
)	O
;	O
if	O
(	O
mode	int
)	O
{	O
in_raw	O
.	O
c_lflag	int
&=	O
~	O
ICANON	O
;	O
in_raw	O
.	O
c_cc	int
[	O
VMIN	int
]	O
=	O
1	pointer
;	O
in_raw	O
.	O
c_cc	int
[	O
VTIME	int
]	O
=	O
0	pointer
;	O
stty	int
(	O
STDIN	pointer
,	O
&	int
in_raw	pointer
)	O
;	O
}	O
else	O
{	O
in_raw	O
.	O
c_lflag	int
|=	O
ICANON	O
;	O
stty	O
(	O
STDIN	pointer
,	O
&	int
in_raw	pointer
)	O
;	O
}	O
tty_mode	O
=	O
mode	function
;	O
discard_input	O
(	O
STDIN	O
)	O
;	O
}	O
}	O
FILE	O
*	O
opentty	function
(	O
int	O
mode	int
)	O
{	O
if	O
(	O
notty	O
)	O
return	O
NULL	int
;	O
if	O
(	O
tty	O
==	O
NULL	O
)	O
{	O
ttyfd	O
=	O
open	O
(	O
"/dev/tty"	pointer
,	O
O_RDONLY	pointer
)	O
;	O
if	O
(	O
ttyfd	O
>=	O
0	int
)	O
{	O
tty	O
=	O
fdopen	function
(	O
ttyfd	pointer
,	O
"r"	pointer
)	O
;	O
}	O
}	O
if	O
(	O
tty	O
==	O
NULL	O
)	O
{	O
if	O
(	O
!	int
isatty	pointer
(	O
0	pointer
)	O
)	O
{	O
notty	O
=	O
1	int
;	O
return	O
NULL	int
;	O
}	O
ttyfd	O
=	O
0	function
;	O
tty	O
=	O
stdin	O
;	O
}	O
if	O
(	O
mtools_raw_tty	O
)	O
set_raw_tty	O
(	O
mode	pointer
)	O
;	O
return	O
tty	int
;	O
}	O
int	O
ask_confirmation	function
(	O
const	O
char	O
*	O
format	pointer
,	O
...	O
)	O
{	O
char	O
ans	O
[	O
10	O
]	O
;	O
va_list	O
ap	pointer
;	O
if	O
(	O
!	O
opentty	pointer
(	O
-	pointer
1	int
)	O
)	O
return	O
0	int
;	O
while	O
(	O
1	O
)	O
{	O
va_start	O
(	O
ap	pointer
,	O
format	pointer
)	O
;	O
vfprintf	O
(	O
stderr	pointer
,	O
format	pointer
,	O
ap	int
)	O
;	O
va_end	O
(	O
ap	pointer
)	O
;	O
fflush	O
(	O
stderr	pointer
)	O
;	O
fflush	O
(	O
opentty	pointer
(	O
-	pointer
1	int
)	O
)	O
;	O
if	O
(	O
mtools_raw_tty	O
)	O
{	O
ans	O
[	O
0	int
]	O
=	O
fgetc	O
(	O
opentty	pointer
(	O
1	pointer
)	O
)	O
;	O
fputs	O
(	O
"\n"	pointer
,	O
stderr	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
fgets	O
(	O
ans	pointer
,	O
9	pointer
,	O
opentty	int
(	O
0	pointer
)	O
)	O
==	O
NULL	O
)	O
ans	O
[	O
0	int
]	O
=	O
'n'	O
;	O
}	O
if	O
(	O
ans	O
[	O
0	int
]	O
==	O
'y'	O
||	O
ans	O
[	O
0	int
]	O
==	O
'Y'	O
)	O
return	O
0	int
;	O
if	O
(	O
ans	O
[	O
0	int
]	O
==	O
'n'	O
||	O
ans	O
[	O
0	int
]	O
==	O
'N'	O
)	O
return	O
-	int
1	int
;	O
}	O
}	O