static	O
void	O
null_list	function
(	O
CPLOB	struct
*	O
lob	pointer
,	O
int	O
start	int
,	O
int	O
stop	int
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
start	int
;	O
i	int
<	O
stop	int
;	O
i	int
++	O
)	O
{	O
*	O
(	O
lob	pointer
->	O
list	pointer
+	O
i	int
)	O
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
}	O
CPLOB	struct
*	O
cplob_open	function
(	O
int	O
nobj	int
)	O
{	O
CPLOB	struct
*	O
lob	pointer
;	O
lob	pointer
=	O
(	O
CPLOB	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
CPLOB	struct
)	O
)	O
;	O
if	O
(	O
lob	pointer
==	O
(	O
CPLOB	struct
*	O
)	O
(	O
NULL	O
)	O
)	O
{	O
return	O
(	O
CPLOB	struct
*	O
)	O
(	O
NULL	O
)	O
;	O
}	O
if	O
(	O
nobj	int
<=	O
0	int
)	O
{	O
nobj	int
=	O
CPLOB_NINITLENGTH	int
;	O
}	O
lob	pointer
->	O
nlen	int
=	O
nobj	int
;	O
if	O
(	O
(	O
lob	pointer
->	O
list	pointer
=	O
(	O
char	O
*	O
*	O
)	O
malloc	function
(	O
nobj	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
)	O
==	O
NULL	O
)	O
{	O
return	O
(	O
CPLOB	struct
*	O
)	O
(	O
NULL	O
)	O
;	O
}	O
null_list	function
(	O
lob	pointer
,	O
0	int
,	O
nobj	int
)	O
;	O
lob	pointer
->	O
width	long
=	O
sizeof	O
(	O
char	O
*	O
)	O
;	O
lob	pointer
->	O
refcountM	int
=	O
0	int
;	O
cplob_shallow_reset	function
(	O
lob	pointer
)	O
;	O
return	O
lob	pointer
;	O
}	O
o__inline__	O
char	O
*	O
*	O
cplob_release	function
(	O
CPLOB	struct
*	O
lob	pointer
)	O
{	O
char	O
*	O
*	O
p	pointer
=	O
lob	pointer
->	O
list	pointer
;	O
swbis_free	O
(	O
lob	pointer
)	O
;	O
return	O
p	pointer
;	O
}	O
void	O
cplob_close	function
(	O
CPLOB	struct
*	O
lob	pointer
)	O
{	O
cplob_freeall	function
(	O
lob	pointer
)	O
;	O
free	function
(	O
lob	pointer
->	O
list	pointer
)	O
;	O
free	function
(	O
lob	pointer
)	O
;	O
}	O
int	O
cplob_shallow_close	function
(	O
CPLOB	struct
*	O
lob	pointer
)	O
{	O
swbis_free	O
(	O
lob	pointer
)	O
;	O
return	O
0	int
;	O
}	O
void	O
cplob_shallow_reset	function
(	O
CPLOB	struct
*	O
lob	pointer
)	O
{	O
int	O
i	int
;	O
lob	pointer
->	O
nused	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
lob	pointer
->	O
nlen	int
;	O
i	int
++	O
)	O
{	O
*	O
(	O
lob	pointer
->	O
list	pointer
+	O
(	O
i	int
)	O
)	O
=	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
;	O
}	O
}	O
char	O
*	O
*	O
cplob_get_list	function
(	O
CPLOB	struct
*	O
cplob	pointer
)	O
{	O
return	O
cplob	pointer
->	O
list	pointer
;	O
}	O
CPLOB	struct
*	O
cplob_reopen	function
(	O
int	O
new_length	int
,	O
CPLOB	struct
*	O
lob	pointer
)	O
{	O
if	O
(	O
new_length	int
<=	O
1	int
)	O
{	O
new_length	int
=	O
2	int
;	O
}	O
if	O
(	O
new_length	int
>	O
lob	pointer
->	O
nlen	int
)	O
{	O
lob	pointer
->	O
list	pointer
=	O
(	O
char	O
*	O
*	O
)	O
SWBIS_REALLOC	O
(	O
(	O
void	O
*	O
)	O
lob	pointer
->	O
list	pointer
,	O
(	O
size_t	long
)	O
(	O
(	O
new_length	int
)	O
*	O
lob	pointer
->	O
width	long
)	O
,	O
lob	pointer
->	O
nlen	int
)	O
;	O
if	O
(	O
!	O
lob	pointer
->	O
list	pointer
)	O
return	O
(	O
CPLOB	struct
*	O
)	O
(	O
NULL	O
)	O
;	O
null_list	function
(	O
lob	pointer
,	O
lob	pointer
->	O
nlen	int
,	O
new_length	int
)	O
;	O
lob	pointer
->	O
nlen	int
=	O
new_length	int
;	O
}	O
return	O
lob	pointer
;	O
}	O
void	O
cplob_freeall	function
(	O
CPLOB	struct
*	O
lob	pointer
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
lob	pointer
->	O
nused	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
*	O
(	O
lob	pointer
->	O
list	pointer
+	O
(	O
i	int
)	O
)	O
!=	O
NULL	O
)	O
{	O
swbis_free	O
(	O
*	O
(	O
lob	pointer
->	O
list	pointer
+	O
(	O
i	int
)	O
)	O
)	O
;	O
(	O
*	O
(	O
lob	pointer
->	O
list	pointer
+	O
(	O
i	int
)	O
)	O
)	O
=	O
NULL	O
;	O
}	O
}	O
}	O
void	O
cplob_add_nta	function
(	O
CPLOB	struct
*	O
lob	pointer
,	O
char	O
*	O
addr	pointer
)	O
{	O
if	O
(	O
!	O
lob	pointer
->	O
nused	int
)	O
{	O
lob	pointer
->	O
nused	int
++	O
;	O
cplob_reopen	function
(	O
lob	pointer
->	O
nused	int
+	O
CPLOB_NLENGTHINCR	int
,	O
lob	pointer
)	O
;	O
*	O
(	O
lob	pointer
->	O
list	pointer
+	O
(	O
lob	pointer
->	O
nused	int
-	O
1	int
)	O
)	O
=	O
addr	pointer
;	O
if	O
(	O
!	O
addr	pointer
)	O
{	O
return	O
;	O
}	O
}	O
else	O
{	O
cplob_reopen	function
(	O
lob	pointer
->	O
nused	int
+	O
CPLOB_NLENGTHINCR	int
,	O
lob	pointer
)	O
;	O
}	O
*	O
(	O
lob	pointer
->	O
list	pointer
+	O
(	O
lob	pointer
->	O
nused	int
-	O
1	int
)	O
)	O
=	O
addr	pointer
;	O
cplob_additem	function
(	O
lob	pointer
,	O
lob	pointer
->	O
nused	int
,	O
NULL	O
)	O
;	O
}	O
void	O
cplob_add	function
(	O
CPLOB	struct
*	O
lob	pointer
,	O
char	O
*	O
addr	pointer
)	O
{	O
cplob_additem	function
(	O
lob	pointer
,	O
lob	pointer
->	O
nused	int
,	O
addr	pointer
)	O
;	O
}	O
void	O
cplob_additem	function
(	O
CPLOB	struct
*	O
lob	pointer
,	O
int	O
index	function
,	O
char	O
*	O
addr	pointer
)	O
{	O
if	O
(	O
index	function
+	O
1	int
>	O
lob	pointer
->	O
nlen	int
)	O
{	O
cplob_reopen	function
(	O
index	function
+	O
1	int
+	O
CPLOB_NLENGTHINCR	int
,	O
lob	pointer
)	O
;	O
}	O
*	O
(	O
lob	pointer
->	O
list	pointer
+	O
index	function
)	O
=	O
addr	pointer
;	O
if	O
(	O
index	function
+	O
1	int
>	O
lob	pointer
->	O
nused	int
)	O
{	O
lob	pointer
->	O
nused	int
=	O
index	function
+	O
1	int
;	O
}	O
return	O
;	O
}	O
void	O
cplob_set_nused	function
(	O
CPLOB	struct
*	O
lob	pointer
,	O
int	O
n	int
)	O
{	O
lob	pointer
->	O
nused	int
=	O
n	int
;	O
}	O
int	O
cplob_get_nused	function
(	O
CPLOB	struct
*	O
lob	pointer
)	O
{	O
return	O
lob	pointer
->	O
nused	int
;	O
}	O
char	O
*	O
cplob_val	function
(	O
CPLOB	struct
*	O
lob	pointer
,	O
int	O
index	function
)	O
{	O
if	O
(	O
index	function
<	O
0	int
)	O
{	O
return	O
NULL	O
;	O
}	O
if	O
(	O
index	function
>	O
lob	pointer
->	O
nused	int
)	O
return	O
NULL	O
;	O
return	O
*	O
(	O
lob	pointer
->	O
list	pointer
+	O
(	O
index	function
)	O
)	O
;	O
}	O
int	O
cplob_backfill_and_nullterminate	function
(	O
CPLOB	struct
*	O
lob	pointer
)	O
{	O
int	O
i	int
=	O
0	int
;	O
while	O
(	O
i	int
<	O
lob	pointer
->	O
nused	int
)	O
{	O
while	O
(	O
i	int
<	O
lob	pointer
->	O
nused	int
&&	O
*	O
(	O
lob	pointer
->	O
list	pointer
+	O
i	int
)	O
==	O
NULL	O
)	O
{	O
if	O
(	O
i	int
+	O
1	int
==	O
lob	pointer
->	O
nused	int
)	O
break	O
;	O
memmove	function
(	O
lob	pointer
->	O
list	pointer
+	O
i	int
,	O
lob	pointer
->	O
list	pointer
+	O
i	int
+	O
1	int
,	O
lob	pointer
->	O
width	long
*	O
(	O
lob	pointer
->	O
nused	int
-	O
i	int
-	O
1	int
)	O
)	O
;	O
lob	pointer
->	O
nused	int
--	O
;	O
}	O
i	int
++	O
;	O
}	O
if	O
(	O
*	O
(	O
lob	pointer
->	O
list	pointer
+	O
lob	pointer
->	O
nused	int
)	O
!=	O
NULL	O
)	O
{	O
cplob_add	function
(	O
lob	pointer
,	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
cplob_remove_index	function
(	O
CPLOB	struct
*	O
lob	pointer
,	O
int	O
i	int
)	O
{	O
if	O
(	O
i	int
<	O
0	int
||	O
i	int
>=	O
lob	pointer
->	O
nused	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
lob	pointer
->	O
nused	int
==	O
0	int
||	O
lob	pointer
->	O
nlen	int
==	O
0	int
)	O
return	O
0	int
;	O
memmove	function
(	O
lob	pointer
->	O
list	pointer
+	O
i	int
,	O
lob	pointer
->	O
list	pointer
+	O
i	int
+	O
1	int
,	O
lob	pointer
->	O
width	long
*	O
(	O
lob	pointer
->	O
nused	int
-	O
i	int
-	O
1	int
)	O
)	O
;	O
lob	pointer
->	O
nused	int
--	O
;	O
lob	pointer
->	O
nlen	int
--	O
;	O
return	O
0	int
;	O
}	O
