struct	O
css_context	struct
{	O
wget_iri	O
*	O
base	pointer
;	O
const	O
char	O
*	O
encoding	pointer
;	O
wget_buffer	O
uri_buf	O
;	O
char	O
encoding_allocated	O
;	O
}	O
;	O
static	O
void	O
WGET_GCC_NORETURN	function
usage	O
(	O
const	O
char	O
*	O
myname	pointer
)	O
{	O
error_printf_exit	O
(	O
"\nUsage: %s [options] file...\n"	O
"  --base <URI>          Default base for relative URIs, default: http://www.example.com\n"	O
"  --encoding <Encoding> Default file character encoding, default: iso-8859-1\n"	O
"\n"	O
"  Examples:\n"	O
"    %s --base http://www.mydomain.com x.css\n"	O
"    cat x.css | %s --base http://www.mydomain.com -\n"	O
"\n"	O
"  Print URIs as found (without a base):\n"	O
"    %s --base \"\" x.css\n\n"	O
,	O
myname	pointer
,	O
myname	pointer
,	O
myname	pointer
,	O
myname	pointer
)	O
;	O
}	O
static	O
void	O
css_parse_encoding	function
(	O
void	O
*	O
context	pointer
,	O
const	O
char	O
*	O
encoding	pointer
,	O
size_t	O
len	O
)	O
{	O
struct	O
css_context	struct
*	O
ctx	pointer
=	O
context	O
;	O
if	O
(	O
!	O
ctx	pointer
->	O
encoding_allocated	pointer
&&	O
wget_strncasecmp_ascii	O
(	O
ctx	pointer
->	O
encoding	pointer
,	O
encoding	pointer
,	O
len	pointer
)	O
)	O
{	O
if	O
(	O
ctx	O
->	O
encoding	pointer
)	O
info_printf	O
(	O
"Encoding changed from '%s' to '%.*s'\n"	pointer
,	O
ctx	pointer
->	O
encoding	pointer
,	O
(	pointer
int	O
)	O
len	O
,	O
encoding	O
)	O
;	O
else	O
info_printf	O
(	O
"Encoding set to '%.*s'\n"	pointer
,	O
(	pointer
int	O
)	O
len	O
,	O
encoding	int
)	O
;	O
ctx	O
->	O
encoding	pointer
=	O
wget_strmemdup	O
(	O
encoding	pointer
,	O
len	pointer
)	O
;	O
ctx	O
->	O
encoding_allocated	pointer
=	O
1	O
;	O
}	pointer
}	O
static	O
void	O
css_parse_uri	function
(	O
void	O
*	O
context	pointer
,	O
const	O
char	O
*	O
url	pointer
,	O
size_t	O
len	O
,	O
size_t	O
pos	long
WGET_GCC_UNUSED	O
)	O
{	O
struct	O
css_context	struct
*	O
ctx	pointer
=	O
context	O
;	O
if	O
(	O
!	O
ctx	pointer
->	O
base	pointer
)	O
{	O
wget_info_printf	O
(	O
"  %.*s\n"	pointer
,	O
(	pointer
int	O
)	O
len	O
,	O
url	O
)	O
;	O
}	O
else	O
if	O
(	O
wget_iri_relative_to_abs	O
(	O
ctx	pointer
->	O
base	pointer
,	O
url	int
,	O
len	pointer
,	O
&	int
ctx	pointer
->	O
uri_buf	pointer
)	O
)	O
{	O
wget_info_printf	O
(	O
"  %.*s -> %s\n"	pointer
,	O
(	pointer
int	O
)	O
len	O
,	O
url	O
,	O
ctx	O
->	O
uri_buf	pointer
.	O
data	pointer
)	O
;	O
}	O
else	O
{	O
error_printf	O
(	O
"Cannot resolve relative URI %.*s\n"	O
,	O
(	O
int	O
)	O
len	O
,	O
url	O
)	O
;	O
}	O
}	O
static	O
void	O
css_parse_localfile	function
(	O
const	O
char	O
*	O
fname	pointer
,	O
wget_iri	O
*	O
base	pointer
,	O
const	O
char	O
*	O
encoding	pointer
)	O
{	O
struct	O
css_context	struct
context	O
=	O
{	O
.	O
base	struct
=	O
base	O
,	O
.	O
encoding	pointer
=	O
encoding	pointer
}	O
;	O
wget_buffer_init	O
(	O
&	O
context	pointer
.	O
uri_buf	pointer
,	O
NULL	O
,	O
128	O
)	O
;	O
wget_css_parse_file	O
(	O
fname	pointer
,	O
css_parse_uri	pointer
,	O
css_parse_encoding	pointer
,	O
&	pointer
context	pointer
)	O
;	O
if	O
(	O
context	O
.	O
encoding_allocated	pointer
)	O
wget_xfree	O
(	O
context	pointer
.	O
encoding	pointer
)	O
;	O
wget_buffer_deinit	O
(	O
&	O
context	pointer
.	O
uri_buf	pointer
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
const	O
char	O
*	O
const	pointer
*	O
argv	pointer
)	O
{	O
const	O
char	O
*	O
base	pointer
=	O
"http://www.example.com"	O
;	O
const	O
char	O
*	O
local_encoding	pointer
=	O
wget_local_charset_encoding	O
(	O
)	O
;	O
wget_iri	O
*	O
base_uri	pointer
;	O
const	O
char	O
*	O
css_encoding	pointer
=	O
NULL	O
;	O
int	O
argpos	int
;	O
wget_logger_set_stream	O
(	O
wget_get_logger	pointer
(	O
WGET_LOGGER_ERROR	int
)	O
,	O
stderr	O
)	O
;	O
wget_logger_set_stream	O
(	O
wget_get_logger	pointer
(	O
WGET_LOGGER_INFO	pointer
)	O
,	O
stdout	O
)	O
;	O
for	O
(	O
argpos	O
=	O
1	int
;	O
argpos	pointer
<	O
argc	int
;	O
argpos	pointer
++	O
)	O
{	O
if	O
(	O
!	O
strcmp	pointer
(	O
argv	pointer
[	O
argpos	int
]	O
,	O
"--base"	pointer
)	O
&&	O
argc	pointer
-	O
argpos	pointer
>	O
1	int
)	O
{	O
base	O
=	O
argv	O
[	O
++	int
argpos	O
]	O
;	O
info_printf	pointer
(	O
"Base URL encoding = '%s'\n"	pointer
,	O
local_encoding	pointer
)	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	pointer
(	O
argv	pointer
[	O
argpos	int
]	O
,	O
"--encoding"	pointer
)	O
&&	O
argc	pointer
-	O
argpos	pointer
>	O
1	int
)	O
{	O
css_encoding	O
=	O
argv	O
[	O
++	int
argpos	O
]	O
;	O
}	pointer
else	O
if	O
(	O
!	O
strcmp	pointer
(	O
argv	pointer
[	O
argpos	int
]	O
,	O
"--"	pointer
)	O
)	O
{	O
argpos	O
++	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
argv	pointer
[	O
argpos	int
]	O
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
usage	pointer
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
}	O
else	O
break	O
;	O
}	O
base_uri	O
=	O
wget_iri_parse	function
(	O
base	pointer
,	O
local_encoding	int
)	O
;	O
for	O
(	O
;	int
argpos	O
<	O
argc	int
;	O
argpos	pointer
++	O
)	O
{	O
css_parse_localfile	O
(	O
argv	pointer
[	O
argpos	int
]	O
,	O
base_uri	pointer
,	O
css_encoding	pointer
)	O
;	O
}	O
wget_iri_free	O
(	O
&	O
base_uri	pointer
)	O
;	O
return	O
0	int
;	O
}	O