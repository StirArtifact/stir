ESint32	O
EDMAPROC	O
EDMA_CIDFParseU32	int
(	O
OBJID	int
obj	int
,	O
CLASSID	int
idc	int
)	O
{	O
CIF_CLASS	O
*	O
the_class	pointer
;	O
EChar	O
fn	O
[	O
2048	int
]	O
;	O
EChar	O
namespace	O
[	O
1024	int
]	O
;	O
EPChar	O
path	pointer
;	O
EChar	O
aux	O
[	O
1024	int
]	O
,	O
sig	pointer
[	O
1024	int
]	O
,	O
*	pointer
asig	pointer
;	O
ESint32	O
i	O
,	O
j	int
,	O
repo_type	int
;	O
path	int
=	O
edma_get_class_repo_dir	O
(	O
idc	pointer
)	O
;	O
edma_get_class_name	O
(	O
idc	int
,	O
aux	int
)	O
;	O
if	O
(	O
(	int
repo_type	int
=	O
edma_get_class_repo_type	int
(	O
idc	int
)	O
)	O
==	O
0	int
)	O
{	O
edma_get_class_namespace	O
(	O
idc	pointer
,	O
namespace	int
)	O
;	O
sprintf	O
(	O
fn	pointer
,	O
"%s/share/edma/idf/%s/%s.cidf"	pointer
,	O
path	pointer
,	O
namespace	pointer
,	O
aux	int
)	O
;	O
}	O
else	O
{	O
char	O
*	O
rn	pointer
=	O
edma_get_class_repo_name	O
(	O
idc	O
)	O
;	O
edma_get_class_namespace	O
(	O
idc	pointer
,	O
namespace	pointer
)	O
;	O
sprintf	O
(	O
fn	pointer
,	O
"%s/%s/idf/%s/%s.cidf"	pointer
,	O
path	pointer
,	O
rn	pointer
,	O
namespace	pointer
,	O
aux	pointer
)	O
;	O
}	O
edma_printf_obj	O
(	O
obj	int
,	O
"Parsing Class %d:'%s': Repo: %d. Parser Object: %d"	int
,	O
idc	int
,	O
aux	int
,	O
repo_type	pointer
,	O
obj	int
)	O
;	O
edma_printf_obj	O
(	O
obj	int
,	O
"Using IDF file : %s"	int
,	O
fn	int
)	O
;	O
the_class	O
=	O
cidf_parse	O
(	O
fn	pointer
)	O
;	O
edma_idf_set_def	O
(	O
idc	pointer
,	O
the_class	int
->	O
n_prop	pointer
,	O
the_class	pointer
->	O
n_met	pointer
,	O
0	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
the_class	int
->	O
n_prop	int
;	O
i	int
++	O
)	O
{	O
edma_idf_set_prop	O
(	O
idc	pointer
,	O
i	int
,	O
the_class	int
->	O
prop	pointer
[	O
i	int
]	O
->	O
name	pointer
,	O
the_class	pointer
->	O
prop	pointer
[	O
i	int
]	O
->	O
type	pointer
,	O
the_class	int
->	O
prop	pointer
[	O
i	int
]	O
->	O
access	pointer
,	O
0	pointer
,	O
NULL	int
)	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
the_class	int
->	O
n_met	int
;	O
i	int
++	O
)	O
{	O
memset	O
(	O
sig	pointer
,	O
0	pointer
,	O
1024	int
)	O
;	O
asig	O
=	O
sig	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
the_class	int
->	O
met	int
[	O
i	int
]	O
->	O
n_param	pointer
;	O
j	pointer
++	O
)	O
{	O
EUint32	O
type_id	O
;	O
EChar	O
type_sig	O
[	O
256	int
]	O
;	O
type_id	O
=	O
edma_get_type_id	pointer
(	O
the_class	pointer
->	O
met	pointer
[	O
i	int
]	O
->	O
param	pointer
[	O
j	int
]	O
->	O
type	pointer
)	O
;	O
memset	O
(	O
type_sig	pointer
,	O
0	int
,	O
256	int
)	O
;	O
edma_get_type_sig	O
(	O
type_id	pointer
,	O
type_sig	int
)	O
;	O
asig	O
+=	O
sprintf	int
(	O
asig	pointer
,	O
"%s"	pointer
,	O
type_sig	pointer
)	O
;	O
}	O
{	O
EUint32	O
type_id	O
;	O
EChar	O
type_sig	O
[	O
256	int
]	O
;	O
type_id	O
=	O
edma_get_type_id	pointer
(	O
the_class	pointer
->	O
met	pointer
[	O
i	int
]	O
->	O
rtype	pointer
)	O
;	O
memset	O
(	O
type_sig	pointer
,	O
0	int
,	O
256	int
)	O
;	O
edma_get_type_sig	O
(	O
type_id	pointer
,	O
type_sig	int
)	O
;	O
asig	O
+=	O
sprintf	int
(	O
asig	pointer
,	O
"r%s"	pointer
,	O
type_sig	pointer
)	O
;	O
}	O
printf	O
(	O
"Generated signature is: '%s'\n"	pointer
,	O
sig	pointer
)	O
;	O
if	O
(	O
!	int
repo_type	pointer
)	O
edma_idf_set_met	O
(	O
idc	pointer
,	O
i	int
,	O
the_class	int
->	O
met	int
[	O
i	int
]	O
->	O
name	pointer
,	O
sig	pointer
,	O
the_class	pointer
->	O
met	pointer
[	O
i	int
]	O
->	O
flags	pointer
[	O
1	int
]	O
,	O
the_class	pointer
->	O
met	pointer
[	O
i	int
]	O
->	O
flags	pointer
[	O
0	int
]	O
,	O
the_class	pointer
->	O
met	pointer
[	O
i	int
]	O
->	O
flags	pointer
[	O
2	int
]	O
)	O
;	O
else	O
edma_idf_set_met	O
(	O
idc	pointer
,	O
i	int
,	O
the_class	int
->	O
met	int
[	O
i	int
]	O
->	O
name	pointer
,	O
""	pointer
,	O
the_class	pointer
->	O
met	pointer
[	O
i	int
]	O
->	O
flags	pointer
[	O
1	int
]	O
,	O
the_class	pointer
->	O
met	pointer
[	O
i	int
]	O
->	O
flags	pointer
[	O
0	int
]	O
,	O
the_class	pointer
->	O
met	pointer
[	O
i	int
]	O
->	O
flags	pointer
[	O
2	int
]	O
)	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
the_class	int
->	O
n_sc	int
;	O
i	int
++	O
)	O
{	O
edma_add_local_class_superclass_by_name	O
(	O
idc	pointer
,	O
the_class	int
->	O
sc	pointer
[	O
i	int
]	O
->	O
name	pointer
,	O
the_class	pointer
->	O
sc	pointer
[	O
i	int
]	O
->	O
ap	pointer
,	O
the_class	pointer
->	O
sc	pointer
[	O
i	int
]	O
->	O
ap1	pointer
)	O
;	O
}	O
edma_printf_obj	O
(	O
obj	int
,	O
"Registering class %d:%s:%s"	int
,	O
idc	int
,	O
the_class	int
->	O
name	pointer
,	O
aux	pointer
)	O
;	O
if	O
(	O
repo_type	int
)	O
edma_idf_set_class_id1	O
(	O
idc	pointer
)	O
;	O
else	O
edma_idf_set_class_id	O
(	O
idc	pointer
)	O
;	O
cidf_free_data	O
(	O
the_class	pointer
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	O
EDMA_CIDF_class_factory	O
(	O
)	O
{	O
CLASSID	O
cid	O
;	O
cid	O
=	O
edma_idf_get_free_class_id	pointer
(	O
EDMA_LOCAL_CLASS	pointer
)	O
;	O
edma_idf_set_class_name	O
(	O
cid	int
,	O
"EDMA_CIDF"	pointer
)	O
;	O
edma_idf_set_class_namespace	O
(	O
cid	int
,	O
""	pointer
)	O
;	O
edma_idf_set_class_version	O
(	O
cid	int
,	O
0	pointer
,	O
0	int
)	O
;	O
edma_add_local_class_method	O
(	O
cid	int
,	O
"Parse"	pointer
,	O
"U32"	pointer
,	O
(	int
PPROC	O
)	O
EDMA_CIDFParseU32	O
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
edma_idf_set_class_id	O
(	O
cid	int
)	O
;	O
return	O
0	int
;	O
}	O