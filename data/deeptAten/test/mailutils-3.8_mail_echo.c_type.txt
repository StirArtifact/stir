static	O
int	O
echo_runcmd	function
(	O
char	O
*	O
*	pointer
ret	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
size_t	O
len	long
,	O
char	O
*	O
*	pointer
argv	pointer
,	O
void	O
*	O
closure	pointer
)	O
{	O
int	O
rc	int
;	O
mu_stream_t	O
ps	pointer
;	O
mu_stream_t	O
outs	pointer
;	O
size_t	O
i	long
;	O
int	O
status	int
=	O
MU_WRDSE_OK	int
;	O
char	O
buf	O
[	O
128	int
]	O
;	O
size_t	O
n	long
;	O
*	O
ret	pointer
=	O
NULL	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
argv	long
[	O
i	int
]	O
;	O
i	O
++	O
)	O
;	O
rc	O
=	O
mu_prog_stream_create	function
(	O
&	pointer
ps	pointer
,	O
argv	O
[	O
0	int
]	O
,	O
i	pointer
,	O
argv	int
,	O
0	int
,	O
NULL	int
,	O
MU_STREAM_READ	int
)	O
;	O
if	O
(	O
rc	O
)	O
{	O
mu_error	O
(	O
_	pointer
(	O
"Can't run %s: %s"	pointer
)	O
,	O
argv	pointer
[	O
0	int
]	O
,	O
mu_strerror	pointer
(	O
rc	int
)	O
)	O
;	O
return	O
MU_WRDSE_USERERR	int
;	O
}	O
rc	O
=	O
mu_memory_stream_create	function
(	O
&	pointer
outs	pointer
,	O
MU_STREAM_RDWR	O
)	O
;	O
if	O
(	O
rc	O
)	O
{	O
mu_diag_funcall	O
(	O
MU_DIAG_ERROR	O
,	O
"mu_memory_stream_create"	pointer
,	O
NULL	O
,	O
rc	O
)	O
;	O
mu_stream_destroy	O
(	O
&	O
ps	struct
)	O
;	O
return	O
MU_WRDSE_USERERR	int
;	O
}	O
while	O
(	O
(	O
rc	O
=	O
mu_stream_read	O
(	O
ps	pointer
,	O
buf	O
,	O
sizeof	pointer
(	O
buf	pointer
)	O
,	O
&	O
n	pointer
)	O
)	O
==	O
0	O
&&	O
n	int
>	O
0	int
)	O
{	O
int	O
wn	int
=	O
mu_stream_write	int
(	O
outs	pointer
,	O
buf	pointer
,	O
n	int
,	O
NULL	int
)	O
;	O
if	O
(	O
wn	O
)	O
{	O
mu_error	O
(	O
_	pointer
(	O
"error writing to temporary stream: %s"	pointer
)	O
,	O
mu_strerror	pointer
(	O
wn	int
)	O
)	O
;	O
status	O
=	O
MU_WRDSE_USERERR	function
;	O
break	O
;	O
}	O
}	O
if	O
(	O
status	O
==	O
MU_WRDSE_OK	int
&&	O
rc	int
)	O
{	O
mu_error	O
(	O
_	pointer
(	O
"error reading %s output: %s"	pointer
)	O
,	O
argv	pointer
[	O
0	int
]	O
,	O
mu_strerror	pointer
(	O
rc	int
)	O
)	O
;	O
status	O
=	O
MU_WRDSE_USERERR	function
;	O
}	O
mu_stream_destroy	O
(	O
&	O
ps	struct
)	O
;	O
if	O
(	O
status	O
==	O
MU_WRDSE_OK	int
)	O
{	O
mu_off_t	O
size	O
;	O
char	O
*	O
p	O
;	O
mu_stream_size	O
(	O
outs	O
,	O
&	pointer
size	pointer
)	O
;	O
p	O
=	O
malloc	O
(	O
size	int
+	O
1	int
)	O
;	O
if	O
(	O
p	O
)	O
{	O
mu_stream_seek	O
(	O
outs	pointer
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	int
)	O
;	O
rc	O
=	O
mu_stream_read	function
(	O
outs	pointer
,	O
p	pointer
,	O
size	pointer
,	O
NULL	int
)	O
;	O
if	O
(	O
rc	O
==	O
0	int
)	O
{	O
p	O
[	O
size	int
]	O
=	O
0	O
;	O
*	pointer
ret	pointer
=	O
p	int
;	O
}	O
else	O
{	O
free	O
(	O
p	pointer
)	O
;	O
mu_error	O
(	O
_	pointer
(	O
"error reading from temporary stream: %s"	pointer
)	O
,	O
mu_strerror	pointer
(	O
rc	int
)	O
)	O
;	O
status	O
=	O
MU_WRDSE_USERERR	function
;	O
}	O
}	O
else	O
status	O
=	O
MU_WRDSE_NOSPACE	function
;	O
}	O
mu_stream_destroy	O
(	O
&	O
outs	pointer
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
echo	function
(	O
char	O
*	O
s	pointer
,	O
int	O
*	int
nl	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_wordsplit	struct
ws	O
;	O
int	O
wsflags	int
=	O
MU_WRDSF_NOSPLIT	O
|	O
MU_WRDSF_QUOTE	O
|	O
MU_WRDSF_ENV	O
;	O
size_t	O
len	long
;	O
ws	O
.	O
ws_env	pointer
=	O
(	pointer
const	O
char	O
*	O
*	O
)	O
environ	pointer
;	O
ws	O
.	O
ws_command	pointer
=	O
echo_runcmd	int
;	O
rc	O
=	O
mu_wordsplit	int
(	O
s	O
,	O
&	O
ws	pointer
,	O
wsflags	O
)	O
;	O
switch	O
(	O
rc	int
)	O
{	O
case	O
MU_WRDSE_OK	O
:	O
break	O
;	O
case	O
MU_WRDSE_USERERR	O
:	O
mu_wordsplit_free	O
(	O
&	O
ws	pointer
)	O
;	O
return	O
1	int
;	O
default	O
:	O
mu_error	O
(	O
"%s"	pointer
,	O
mu_wordsplit_strerror	pointer
(	O
&	O
ws	pointer
)	O
)	O
;	O
mu_wordsplit_free	O
(	O
&	O
ws	struct
)	O
;	O
return	O
1	int
;	O
}	O
len	O
=	O
strlen	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
)	O
;	O
mu_stream_write	O
(	O
mu_strout	pointer
,	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
,	O
len	pointer
,	O
NULL	pointer
)	O
;	O
*	O
nl	pointer
=	O
len	O
>	O
0	int
&&	O
ws	int
.	O
ws_wordv	pointer
[	O
0	int
]	O
[	O
len	int
-	O
1	int
]	O
==	O
'\n'	O
;	O
mu_wordsplit_free	pointer
(	O
&	O
ws	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mail_echo	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	pointer
argv	pointer
)	O
{	O
if	O
(	O
argc	O
>	O
1	pointer
)	O
{	O
int	O
i	int
;	O
int	O
nl	int
=	O
0	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
argc	int
;	O
i	pointer
++	O
)	O
{	O
if	O
(	O
i	O
>	O
1	int
)	O
mu_printf	O
(	O
" "	pointer
)	O
;	O
if	O
(	O
echo	O
(	O
argv	pointer
[	O
i	int
]	O
,	O
&	pointer
nl	pointer
)	O
)	O
break	O
;	O
}	O
if	O
(	O
!	O
nl	pointer
)	O
mu_printf	O
(	O
"\n"	pointer
)	O
;	O
}	O
return	O
0	O
;	O
}	O