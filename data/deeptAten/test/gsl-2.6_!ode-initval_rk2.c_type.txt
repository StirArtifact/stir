typedef	O
struct	O
{	O
double	O
*	array
k1	pointer
;	O
double	O
*	O
k2	pointer
;	O
double	O
*	O
k3	pointer
;	O
double	O
*	O
ytmp	pointer
;	O
}	O
rk2_state_t	O
;	O
static	O
void	O
*	function
rk2_alloc	function
(	O
size_t	O
dim	O
)	O
{	O
rk2_state_t	O
*	O
state	pointer
=	O
(	O
rk2_state_t	O
*	O
)	O
malloc	pointer
(	O
sizeof	O
(	O
rk2_state_t	O
)	O
)	O
;	O
if	O
(	O
state	pointer
==	O
0	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for rk2_state"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	O
->	O
k1	pointer
=	O
(	O
double	O
*	O
)	O
malloc	pointer
(	O
dim	O
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
k1	pointer
==	O
0	int
)	O
{	O
free	O
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for k1"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	O
->	O
k2	pointer
=	O
(	O
double	O
*	O
)	O
malloc	pointer
(	O
dim	O
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
k2	pointer
==	O
0	O
)	O
{	O
free	O
(	O
state	pointer
->	O
k1	pointer
)	O
;	O
free	O
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for k2"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	O
->	O
k3	pointer
=	O
(	O
double	O
*	O
)	O
malloc	pointer
(	O
dim	O
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
k3	pointer
==	O
0	int
)	O
{	O
free	O
(	O
state	pointer
->	O
k2	pointer
)	O
;	O
free	O
(	O
state	pointer
->	O
k1	pointer
)	O
;	O
free	O
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for k3"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	O
->	O
ytmp	pointer
=	O
(	O
double	O
*	O
)	O
malloc	pointer
(	O
dim	O
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
ytmp	pointer
==	O
0	O
)	O
{	O
free	O
(	O
state	pointer
->	O
k3	pointer
)	O
;	O
free	O
(	O
state	pointer
->	O
k2	pointer
)	O
;	O
free	O
(	O
state	pointer
->	O
k1	pointer
)	O
;	O
free	O
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for ytmp"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
return	O
state	O
;	O
}	O
static	O
int	O
rk2_apply	function
(	O
void	O
*	O
vstate	pointer
,	O
size_t	O
dim	O
,	O
double	O
t	O
,	O
double	O
h	O
,	O
double	O
y	O
[	O
]	O
,	O
double	O
yerr	O
[	O
]	O
,	O
const	O
double	O
dydt_in	double
[	O
]	O
,	O
double	O
dydt_out	O
[	O
]	O
,	O
const	O
gsl_odeiv_system	O
*	O
sys	pointer
)	O
{	O
rk2_state_t	O
*	O
state	pointer
=	O
(	O
rk2_state_t	O
*	O
)	O
vstate	pointer
;	O
size_t	O
i	O
;	O
double	O
*	O
const	pointer
k1	O
=	O
state	O
->	O
k1	long
;	O
double	O
*	O
const	pointer
k2	O
=	O
state	O
->	O
k2	long
;	O
double	O
*	O
const	pointer
k3	O
=	O
state	O
->	O
k3	long
;	O
double	O
*	O
const	pointer
ytmp	O
=	O
state	O
->	O
ytmp	pointer
;	O
if	O
(	O
dydt_in	pointer
!=	O
NULL	int
)	O
{	O
DBL_MEMCPY	O
(	O
k1	pointer
,	O
dydt_in	pointer
,	O
dim	int
)	O
;	O
}	O
else	O
{	O
int	O
s	int
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	pointer
,	O
y	O
,	O
k1	int
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	O
)	O
{	O
return	O
s	int
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
dim	int
;	O
i	int
++	O
)	O
{	O
ytmp	O
[	O
i	int
]	O
=	O
y	O
[	O
i	int
]	O
+	O
0.5	int
*	O
h	int
*	O
k1	O
[	O
i	int
]	O
;	O
}	pointer
{	O
int	O
s	int
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	pointer
+	O
0.5	int
*	O
h	O
,	O
ytmp	pointer
,	O
k2	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	O
)	O
{	O
return	O
s	int
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
dim	int
;	O
i	int
++	O
)	O
{	O
ytmp	O
[	O
i	int
]	O
=	O
y	O
[	O
i	int
]	O
+	O
h	int
*	O
(	pointer
-	O
k1	O
[	O
i	int
]	O
+	O
2.0	int
*	O
k2	int
[	O
i	int
]	O
)	O
;	O
}	O
{	O
int	O
s	int
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	pointer
+	O
h	int
,	O
ytmp	int
,	O
k3	pointer
)	O
;	O
if	O
(	O
s	int
!=	O
GSL_SUCCESS	O
)	O
{	O
return	O
s	int
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
dim	int
;	O
i	int
++	O
)	O
{	O
ytmp	O
[	O
i	int
]	O
=	O
y	O
[	O
i	int
]	O
;	O
{	O
const	O
double	O
ksum3	array
=	O
(	O
k1	O
[	O
i	int
]	O
+	O
4.0	int
*	O
k2	pointer
[	O
i	int
]	O
+	O
k3	int
[	O
i	int
]	O
)	O
/	O
6.0	int
;	O
y	O
[	O
i	int
]	O
+=	O
h	int
*	O
ksum3	O
;	O
}	O
}	O
if	O
(	O
dydt_out	O
!=	O
NULL	O
)	O
{	O
int	O
s	int
=	O
GSL_ODEIV_FN_EVAL	int
(	O
sys	pointer
,	O
t	pointer
+	O
h	int
,	O
y	int
,	O
dydt_out	int
)	O
;	O
if	O
(	O
s	int
!=	O
GSL_SUCCESS	O
)	O
{	O
DBL_MEMCPY	O
(	O
y	int
,	O
ytmp	O
,	O
dim	int
)	O
;	O
return	O
s	int
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
dim	int
;	O
i	int
++	O
)	O
{	O
const	O
double	O
ksum3	function
=	O
(	O
k1	O
[	O
i	int
]	O
+	O
4.0	int
*	O
k2	pointer
[	O
i	int
]	O
+	O
k3	int
[	O
i	int
]	O
)	O
/	O
6.0	int
;	O
yerr	int
[	O
i	int
]	O
=	O
h	int
*	O
(	O
k2	O
[	O
i	int
]	O
-	O
ksum3	int
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
rk2_reset	function
(	O
void	O
*	O
vstate	pointer
,	O
size_t	O
dim	long
)	O
{	O
rk2_state_t	O
*	O
state	pointer
=	O
(	O
rk2_state_t	O
*	O
)	O
vstate	pointer
;	O
DBL_ZERO_MEMSET	O
(	O
state	pointer
->	O
k1	pointer
,	O
dim	pointer
)	O
;	O
DBL_ZERO_MEMSET	O
(	O
state	pointer
->	O
k2	pointer
,	O
dim	pointer
)	O
;	O
DBL_ZERO_MEMSET	O
(	O
state	pointer
->	O
k3	pointer
,	O
dim	pointer
)	O
;	O
DBL_ZERO_MEMSET	O
(	O
state	pointer
->	O
ytmp	pointer
,	O
dim	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
unsigned	O
int	O
rk2_order	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
rk2_state_t	O
*	O
state	pointer
=	O
(	O
rk2_state_t	O
*	O
)	O
vstate	pointer
;	O
state	O
=	O
0	O
;	O
return	O
2	int
;	O
}	O
static	O
void	O
rk2_free	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
rk2_state_t	O
*	O
state	pointer
=	O
(	O
rk2_state_t	O
*	O
)	O
vstate	pointer
;	O
free	O
(	O
state	pointer
->	O
k1	pointer
)	O
;	O
free	O
(	O
state	pointer
->	O
k2	pointer
)	O
;	O
free	O
(	O
state	pointer
->	O
k3	pointer
)	O
;	O
free	O
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	O
(	O
state	pointer
)	O
;	O
}	O
static	O
const	O
gsl_odeiv_step_type	O
rk2_type	O
=	O
{	O
"rk2"	O
,	O
1	int
,	O
1	O
,	O
&	int
rk2_alloc	pointer
,	O
&	O
rk2_apply	struct
,	O
&	O
rk2_reset	struct
,	O
&	O
rk2_order	struct
,	O
&	O
rk2_free	struct
}	O
;	O
const	O
gsl_odeiv_step_type	O
*	O
gsl_odeiv_step_rk2	pointer
=	O
&	O
rk2_type	pointer
;	O