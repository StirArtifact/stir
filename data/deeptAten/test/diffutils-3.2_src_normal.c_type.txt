static	O
void	O
print_normal_hunk	O
(	O
struct	O
change	struct
*	O
)	pointer
;	O
void	O
print_normal_script	O
(	O
struct	O
change	struct
*	O
script	pointer
)	O
{	O
print_script	O
(	O
script	O
,	O
find_change	O
,	O
print_normal_hunk	O
)	O
;	O
}	O
static	O
void	O
print_normal_hunk	function
(	O
struct	O
change	struct
*	O
hunk	pointer
)	O
{	O
lin	O
first0	O
,	O
last0	O
,	O
first1	O
,	O
last1	pointer
;	O
register	O
lin	O
i	O
;	O
enum	O
changes	O
changes	O
=	O
analyze_hunk	int
(	O
hunk	pointer
,	O
&	pointer
first0	pointer
,	O
&	O
last0	pointer
,	O
&	O
first1	struct
,	O
&	O
last1	struct
)	O
;	O
if	O
(	O
!	O
changes	O
)	O
return	O
;	O
begin_output	O
(	O
)	O
;	O
print_number_range	O
(	O
','	O
,	O
&	O
files	pointer
[	O
0	O
]	O
,	O
first0	O
,	O
last0	O
)	O
;	O
fputc	O
(	O
change_letter	O
[	O
changes	int
]	O
,	O
outfile	pointer
)	O
;	O
print_number_range	O
(	O
','	O
,	O
&	O
files	pointer
[	O
1	O
]	O
,	O
first1	O
,	O
last1	O
)	O
;	O
fputc	O
(	O
'\n'	O
,	O
outfile	O
)	O
;	O
if	O
(	O
changes	O
&	O
OLD	pointer
)	O
for	O
(	O
i	int
=	O
first0	int
;	O
i	O
<=	O
last0	O
;	O
i	O
++	O
)	O
print_1_line	O
(	O
"<"	pointer
,	O
&	pointer
files	pointer
[	O
0	O
]	O
.	O
linbuf	pointer
[	O
i	int
]	O
)	O
;	O
if	O
(	O
changes	O
==	O
CHANGED	O
)	O
fputs	O
(	O
"---\n"	pointer
,	O
outfile	pointer
)	O
;	O
if	O
(	O
changes	O
&	O
NEW	pointer
)	O
for	O
(	O
i	int
=	O
first1	int
;	O
i	O
<=	O
last1	O
;	O
i	O
++	O
)	O
print_1_line	O
(	O
">"	pointer
,	O
&	O
files	pointer
[	O
1	O
]	O
.	O
linbuf	pointer
[	O
i	int
]	O
)	O
;	O
}	O