int	O
_rl_allow_pathname_alphabetic_chars	function
=	O
0	O
;	O
static	O
const	O
char	O
*	O
const	function
pathname_alphabetic_chars	O
=	O
"/-_=~.#$"	O
;	O
int	O
rl_alphabetic	int
(	O
c	O
)	O
int	O
c	int
;	O
{	O
if	O
(	O
ALPHABETIC	O
(	O
c	pointer
)	O
)	O
return	O
(	int
1	O
)	O
;	O
return	O
(	int
_rl_allow_pathname_alphabetic_chars	O
&&	O
strchr	O
(	O
pathname_alphabetic_chars	O
,	O
c	O
)	O
!=	O
NULL	O
)	O
;	O
}	O
int	O
_rl_walphabetic	function
(	O
wchar_t	O
wc	O
)	O
{	O
int	O
c	int
;	O
if	O
(	O
iswalnum	O
(	O
wc	pointer
)	O
)	O
return	O
(	int
1	O
)	O
;	O
c	O
=	O
wc	function
&	O
0177	pointer
;	O
return	O
(	O
_rl_allow_pathname_alphabetic_chars	O
&&	O
strchr	O
(	O
pathname_alphabetic_chars	O
,	O
c	O
)	O
!=	O
NULL	int
)	O
;	O
}	O
int	O
_rl_abort_internal	function
(	O
)	O
{	O
rl_ding	O
(	O
)	O
;	O
rl_clear_message	O
(	O
)	O
;	O
_rl_reset_argument	O
(	O
)	O
;	O
rl_clear_pending_input	O
(	O
)	O
;	O
RL_UNSETSTATE	O
(	O
RL_STATE_MACRODEF	int
)	O
;	O
while	O
(	O
rl_executing_macro	int
)	O
_rl_pop_executing_macro	O
(	O
)	O
;	O
RL_UNSETSTATE	O
(	O
RL_STATE_MULTIKEY	int
)	O
;	O
rl_last_func	O
=	O
(	function
rl_command_func_t	O
*	O
)	O
NULL	function
;	O
_rl_longjmp	O
(	O
_rl_top_level	O
,	O
1	int
)	O
;	O
return	O
(	int
0	O
)	O
;	O
}	O
int	O
rl_abort	function
(	O
count	O
,	O
key	int
)	O
int	O
count	int
,	O
key	O
;	O
{	O
return	O
(	int
_rl_abort_internal	O
(	O
)	O
)	O
;	O
}	O
int	O
_rl_null_function	function
(	O
count	O
,	O
key	int
)	O
int	O
count	int
,	O
key	O
;	O
{	O
return	O
0	int
;	O
}	O
int	O
rl_tty_status	function
(	O
count	O
,	O
key	int
)	O
int	O
count	int
,	O
key	int
;	O
{	O
rl_ding	O
(	O
)	O
;	O
return	O
0	int
;	O
}	O
char	O
*	function
rl_copy_text	function
(	O
from	O
,	O
to	pointer
)	O
int	O
from	int
,	O
to	O
;	O
{	O
register	O
int	O
length	int
;	O
char	O
*	O
copy	pointer
;	O
if	O
(	O
from	O
>	O
to	int
)	O
SWAP	O
(	O
from	pointer
,	O
to	pointer
)	O
;	O
length	O
=	O
to	function
-	O
from	int
;	O
copy	O
=	O
(	O
char	O
*	O
)	O
xmalloc	pointer
(	O
1	O
+	O
length	int
)	O
;	O
strncpy	O
(	O
copy	pointer
,	O
rl_line_buffer	pointer
+	O
from	int
,	O
length	int
)	O
;	O
copy	O
[	O
length	int
]	O
=	O
'\0'	O
;	O
return	pointer
(	int
copy	O
)	O
;	O
}	O
void	O
rl_extend_line_buffer	function
(	O
len	O
)	O
int	O
len	int
;	O
{	O
while	O
(	O
len	int
>=	O
rl_line_buffer_len	int
)	O
{	O
rl_line_buffer_len	O
+=	O
DEFAULT_BUFFER_SIZE	int
;	O
rl_line_buffer	O
=	O
(	O
char	O
*	O
)	O
xrealloc	pointer
(	O
rl_line_buffer	O
,	O
rl_line_buffer_len	O
)	O
;	O
}	O
_rl_set_the_line	O
(	O
)	O
;	O
}	O
int	O
rl_tilde_expand	function
(	O
ignore	O
,	O
key	O
)	O
int	O
ignore	int
,	O
key	O
;	O
{	O
register	O
int	O
start	function
,	O
end	O
;	O
char	O
*	O
homedir	pointer
,	O
*	O
temp	pointer
;	O
int	O
len	int
;	O
end	O
=	O
rl_point	function
;	O
start	O
=	O
end	int
-	O
1	int
;	O
if	O
(	O
rl_point	O
==	O
rl_end	O
&&	O
rl_line_buffer	int
[	O
rl_point	int
]	O
==	O
'~'	O
)	O
{	O
homedir	O
=	O
tilde_expand	function
(	O
"~"	O
)	O
;	O
_rl_replace_text	O
(	O
homedir	O
,	O
start	O
,	O
end	int
)	O
;	O
xfree	O
(	O
homedir	pointer
)	O
;	O
return	O
(	int
0	O
)	O
;	O
}	O
else	O
if	O
(	O
start	O
>=	O
0	int
&&	O
rl_line_buffer	int
[	O
start	int
]	O
!=	O
'~'	O
)	O
{	O
for	O
(	O
;	int
!	O
whitespace	O
(	O
rl_line_buffer	pointer
[	O
start	int
]	O
)	O
&&	O
start	O
>=	O
0	int
;	O
start	O
--	O
)	O
;	O
start	O
++	O
;	O
}	O
else	O
if	O
(	O
start	O
<	O
0	int
)	O
start	O
=	O
0	int
;	O
end	O
=	O
start	O
;	O
do	O
end	O
++	O
;	O
while	O
(	O
whitespace	O
(	O
rl_line_buffer	O
[	O
end	int
]	O
)	O
==	O
0	int
&&	O
end	int
<	O
rl_end	int
)	O
;	O
if	O
(	O
whitespace	int
(	O
rl_line_buffer	pointer
[	O
end	int
]	O
)	O
||	O
end	O
>=	O
rl_end	int
)	O
end	O
--	O
;	O
if	O
(	O
rl_line_buffer	int
[	O
start	int
]	O
==	O
'~'	O
)	O
{	O
len	O
=	O
end	function
-	O
start	int
+	O
1	int
;	O
temp	O
=	O
(	O
char	O
*	O
)	O
xmalloc	pointer
(	O
len	O
+	O
1	int
)	O
;	O
strncpy	O
(	O
temp	pointer
,	O
rl_line_buffer	pointer
+	O
start	int
,	O
len	int
)	O
;	O
temp	O
[	O
len	int
]	O
=	O
'\0'	O
;	O
homedir	pointer
=	O
tilde_expand	O
(	O
temp	O
)	O
;	O
xfree	O
(	O
temp	pointer
)	O
;	O
_rl_replace_text	O
(	O
homedir	O
,	O
start	O
,	O
end	int
)	O
;	O
xfree	O
(	O
homedir	pointer
)	O
;	O
}	O
return	O
(	O
0	O
)	O
;	O
}	O
void	O
_rl_ttymsg	function
(	O
const	O
char	O
*	O
format	pointer
,	O
...	O
)	O
{	O
va_list	O
args	pointer
;	O
va_start	O
(	O
args	pointer
,	O
format	O
)	O
;	O
fprintf	O
(	O
stderr	pointer
,	O
"readline: "	pointer
)	O
;	O
vfprintf	O
(	O
stderr	pointer
,	O
format	pointer
,	O
args	int
)	O
;	O
fprintf	O
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
fflush	O
(	O
stderr	pointer
)	O
;	O
va_end	O
(	O
args	pointer
)	O
;	O
rl_forced_update_display	O
(	O
)	O
;	O
}	O
void	O
_rl_errmsg	function
(	O
const	O
char	O
*	O
format	pointer
,	O
...	O
)	O
{	O
va_list	O
args	pointer
;	O
va_start	O
(	O
args	pointer
,	O
format	O
)	O
;	O
fprintf	O
(	O
stderr	pointer
,	O
"readline: "	pointer
)	O
;	O
vfprintf	O
(	O
stderr	pointer
,	O
format	pointer
,	O
args	int
)	O
;	O
fprintf	O
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
fflush	O
(	O
stderr	pointer
)	O
;	O
va_end	O
(	O
args	pointer
)	O
;	O
}	O
char	O
*	O
_rl_strindex	function
(	O
s1	O
,	O
s2	pointer
)	O
register	O
const	O
char	O
*	O
s1	pointer
,	O
*	O
s2	pointer
;	O
{	O
register	O
int	O
i	int
,	O
l	O
,	O
len	int
;	O
for	O
(	O
i	int
=	O
0	int
,	O
l	int
=	O
strlen	int
(	O
s2	pointer
)	O
,	O
len	O
=	O
strlen	int
(	O
s1	pointer
)	O
;	O
(	O
len	O
-	O
i	int
)	O
>=	O
l	int
;	O
i	int
++	O
)	O
if	O
(	O
_rl_strnicmp	int
(	O
s1	pointer
+	O
i	O
,	O
s2	int
,	O
l	pointer
)	O
==	O
0	int
)	O
return	O
(	int
(	O
char	O
*	O
)	O
(	pointer
s1	O
+	O
i	O
)	O
)	O
;	O
return	O
(	int
(	O
char	O
*	O
)	O
NULL	pointer
)	O
;	O
}	O
int	O
_rl_qsort_string_compare	function
(	O
s1	O
,	O
s2	pointer
)	O
char	O
*	O
*	pointer
s1	pointer
,	O
*	O
*	pointer
s2	pointer
;	O
{	O
return	O
(	int
strcoll	O
(	O
*	O
s1	pointer
,	O
*	O
s2	pointer
)	O
)	O
;	O
}	O
FUNCTION_FOR_MACRO	O
(	O
_rl_digit_p	O
)	O
FUNCTION_FOR_MACRO	O
(	O
_rl_digit_value	O
)	O
FUNCTION_FOR_MACRO	O
(	O
_rl_lowercase_p	O
)	O
FUNCTION_FOR_MACRO	O
(	O
_rl_pure_alphabetic	O
)	O
FUNCTION_FOR_MACRO	O
(	O
_rl_to_lower	O
)	O
FUNCTION_FOR_MACRO	O
(	O
_rl_to_upper	O
)	O
FUNCTION_FOR_MACRO	O
(	O
_rl_uppercase_p	O
)	O
void	O
rl_free	O
(	O
mem	O
)	O
void	O
*	O
mem	O
;	O
{	O
if	O
(	O
mem	O
)	O
free	O
(	O
mem	pointer
)	O
;	O
}	O
char	O
*	O
_rl_savestring	function
(	O
s	O
)	O
const	O
char	O
*	O
s	pointer
;	O
{	O
return	O
(	int
strcpy	O
(	O
(	pointer
char	O
*	O
)	O
xmalloc	pointer
(	O
1	O
+	O
(	O
int	O
)	O
strlen	O
(	O
s	pointer
)	O
)	O
,	O
(	O
s	O
)	O
)	O
)	O
;	O
}	O