EChar	O
Buffer	O
[	O
1024	int
]	O
;	O
EUint32	O
n_palloc	int
=	O
0	int
;	O
EUint32	O
n_pget	int
=	O
0	int
;	O
EUint32	O
n_pfree	int
=	O
0	int
;	O
EUint32	int
n_prealloc	O
=	O
0	int
;	O
static	int
int	O
_sally	function
=	O
-	O
1	int
;	O
static	O
int	O
initialised	function
=	O
0	O
;	O
int	O
sally_offset	int
=	O
0	int
;	O
int	O
sally_len	int
=	O
0	int
;	O
int	O
_edma_sally_init	int
(	O
)	O
{	O
int	O
len	int
;	O
struct	O
sockaddr_un	struct
remote	O
;	O
initialised	O
=	O
1	int
;	O
if	O
(	O
_sally	O
>=	O
0	int
)	O
return	O
_sally	int
;	O
if	O
(	O
(	int
_sally	O
=	O
socket	int
(	O
AF_UNIX	int
,	O
SOCK_STREAM	int
,	O
0	int
)	O
)	O
==	O
-	int
1	int
)	O
{	O
perror	O
(	O
"socket"	pointer
)	O
;	O
return	O
-	int
1	int
;	O
}	O
printf	O
(	O
"Trying to connect to EDMA Shared Allocator Agent ..."	pointer
)	O
;	O
remote	O
.	O
sun_family	int
=	O
AF_UNIX	O
;	O
strcpy	pointer
(	O
remote	pointer
.	O
sun_path	pointer
,	O
SOCK_PATH	pointer
)	O
;	O
len	O
=	O
strlen	int
(	O
remote	pointer
.	O
sun_path	pointer
)	O
+	O
sizeof	int
(	O
remote	O
.	O
sun_family	pointer
)	O
;	O
if	O
(	O
connect	int
(	O
_sally	int
,	O
(	int
struct	O
sockaddr	struct
*	O
)	O
&	O
remote	struct
,	O
len	O
)	O
==	O
-	int
1	int
)	O
{	O
perror	O
(	O
"connect"	pointer
)	O
;	O
close	O
(	O
_sally	int
)	O
;	O
_sally	O
=	O
-	int
1	O
;	O
printf	O
(	O
"\n-- Connection failed. Falling back to local shared memory "	pointer
"allocator...\n"	O
)	O
;	O
return	O
-	int
1	int
;	O
}	O
printf	O
(	O
" CONNECTED\n"	pointer
)	O
;	O
printf	O
(	O
"++ Using Sally Shared Allocator\n"	pointer
)	O
;	O
return	O
_sally	int
;	O
}	O
key_t	O
_sally_shm_alloc	O
(	O
char	O
*	O
n	pointer
,	O
int	O
size	int
)	O
{	O
char	O
buffer	O
[	O
1024	int
]	O
;	O
key_t	O
_the_key	O
;	O
int	O
len	int
;	O
len	O
=	O
snprintf	int
(	O
buffer	pointer
,	O
1024	pointer
,	O
"SALLOC %d %s\n"	int
,	O
size	int
,	O
n	int
)	O
;	O
write	O
(	O
_sally	O
,	O
buffer	int
,	O
len	int
)	O
;	O
memset	O
(	O
buffer	O
,	O
0	int
,	O
1024	int
)	O
;	O
len	O
=	O
read	int
(	O
_sally	int
,	O
buffer	int
,	O
1024	int
)	O
;	O
sscanf	O
(	O
buffer	pointer
,	O
"+SALLOC %d\n"	pointer
,	O
&	int
_the_key	pointer
)	O
;	O
return	O
_the_key	int
;	O
}	O
HMEM	O
EDMAPROC	function
edma_salloc	function
(	O
EUint32	O
size	O
,	O
EPChar	O
n	pointer
)	O
{	O
EUint32	O
a	int
,	O
shmflg	int
,	O
f	int
;	O
EChar	O
name	O
[	O
EDMA_PATH_LEN	int
]	O
;	O
key_t	O
k	O
;	O
if	O
(	O
!	int
initialised	pointer
&&	O
_sally	int
<	O
0	int
)	O
{	O
_edma_sally_init	O
(	O
)	int
;	O
}	O
if	O
(	O
_sally	int
>	O
0	int
)	O
{	O
k	O
=	O
_sally_shm_alloc	int
(	O
n	pointer
,	O
size	int
)	O
;	O
}	O
else	O
{	O
snprintf	O
(	O
name	pointer
,	O
EDMA_PATH_LEN	pointer
,	O
"%s/%s"	int
,	O
TMPDIR	pointer
,	O
n	int
)	O
;	O
f	O
=	O
open	int
(	O
name	pointer
,	O
O_WRONLY	int
|	O
O_CREAT	int
|	O
O_TRUNC	int
)	O
;	O
if	O
(	O
f	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
errno	int
!=	O
EEXIST	int
)	O
{	O
perror	O
(	O
"Create File"	pointer
)	O
;	O
return	O
-	int
1	int
;	O
}	O
}	O
chmod	O
(	O
name	O
,	O
S_IRWXU	O
|	O
S_IRWXG	int
|	O
S_IRWXO	int
)	O
;	O
if	O
(	O
(	int
k	O
=	O
ftok	int
(	O
name	int
,	O
0	pointer
)	O
)	O
==	O
-	int
1	int
)	O
{	O
perror	O
(	O
"[edma_salloc] (ftok)"	pointer
)	O
;	O
return	O
-	int
1	int
;	O
}	O
}	O
shmflg	O
=	O
0	function
;	O
a	O
=	O
shmget	int
(	O
k	int
,	O
size	int
,	O
IPC_CREAT	int
|	O
0777	int
)	O
;	O
if	O
(	O
(	int
a	O
==	O
-	int
1	int
)	O
&&	O
(	O
errno	O
!=	O
EEXIST	O
)	O
)	O
{	O
printf	O
(	O
"\n[edma_salloc] ERROR in shared block : %s (key:%d|size:%ld)"	pointer
,	O
name	pointer
,	O
k	pointer
,	O
size	int
)	O
;	O
printf	O
(	O
"\n "	pointer
)	O
;	O
perror	O
(	O
"[edma_salloc] (shmget):"	pointer
)	O
;	O
return	O
-	int
1	int
;	O
}	O
if	O
(	O
_sally	int
<=	O
0	int
)	O
close	O
(	O
f	int
)	O
;	O
return	O
(	int
(	O
HMEM	O
)	O
a	O
)	O
;	O
}	O
EPVoid	O
EDMAPROC	O
edma_sget	O
(	O
HMEM	int
a	int
)	O
{	O
EPVoid	O
p	pointer
;	O
p	O
=	O
shmat	int
(	O
(	int
EUint32	O
)	O
a	O
,	O
0	int
,	O
SHM_RND	int
)	O
;	O
if	O
(	O
(	int
int	O
)	O
p	function
==	O
-	int
1	int
)	O
{	O
perror	O
(	O
"[edma_sget] :"	pointer
)	O
;	O
return	O
(	int
EPVoid	O
)	O
-	O
1	int
;	O
}	O
return	O
p	int
;	O
}	O
EPVoid	O
EDMAPROC	O
edma_sunget	O
(	O
EPVoid	O
p	O
)	O
{	O
EUint32	O
i	int
;	O
i	O
=	O
shmdt	int
(	O
p	int
)	O
;	O
if	O
(	O
i	int
==	O
-	int
1	int
)	O
{	O
perror	O
(	O
"[edma_sunget] :"	pointer
)	O
;	O
return	O
(	int
EPVoid	O
)	O
-	O
1	int
;	O
}	O
return	O
p	int
;	O
}	O
void	O
EDMAPROC	function
edma_sfree	O
(	O
HMEM	int
i	int
,	O
EPVoid	O
p	O
)	O
{	O
ESint32	O
a	int
;	O
struct	O
shmid_ds	struct
buf	O
;	O
if	O
(	O
_sally	O
<	O
0	int
)	O
{	O
a	function
=	O
shmctl	int
(	O
i	int
,	O
IPC_RMID	int
,	O
&	int
buf	pointer
)	O
;	O
if	O
(	O
a	int
==	O
-	int
1	int
)	O
{	O
perror	O
(	O
"[edma_sfree] (IPC_RMID):"	pointer
)	O
;	O
return	O
;	int
}	O
}	O
}	O
HMEM	O
EDMAPROC	function
edma_palloc	function
(	O
EUint32	O
size	int
)	O
{	O
EPVoid	O
p	pointer
;	O
EPChar	O
t	pointer
;	O
EUint32	O
i	int
;	O
p	O
=	O
malloc	int
(	O
size	int
)	O
;	O
t	O
=	O
(	int
EPChar	O
)	O
p	function
;	O
if	O
(	O
p	int
!=	O
NULL	O
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
size	int
;	O
i	int
++	O
)	O
*	O
(	pointer
t	O
+	O
i	int
)	O
=	O
0	int
;	O
n_palloc	int
++	O
;	O
return	O
(	int
(	O
HMEM	O
)	O
p	O
)	O
;	O
}	O
HMEM	O
EDMAPROC	O
edma_prealloc	O
(	O
HMEM	int
a	O
,	O
EUint32	O
new_size	O
)	O
{	O
if	O
(	O
a	O
==	O
0	int
)	O
n_palloc	O
++	O
;	O
else	O
n_prealloc	O
++	O
;	O
a	O
=	O
(	int
HMEM	O
)	O
realloc	O
(	O
(	pointer
EPVoid	O
)	O
a	O
,	O
new_size	int
)	O
;	O
return	O
a	int
;	O
}	O
EPVoid	O
EDMAPROC	O
edma_pget	O
(	O
HMEM	int
a	O
)	O
{	O
n_pget	O
++	O
;	O
return	O
(	int
EPVoid	O
)	O
a	O
;	O
}	O
void	O
EDMAPROC	function
edma_pfree	O
(	O
HMEM	int
a	int
,	O
EPVoid	O
p	O
)	O
{	O
n_pfree	O
++	O
;	O
if	O
(	O
p	int
==	O
NULL	O
)	O
return	O
;	int
free	O
(	O
p	pointer
)	O
;	O
}	O
void	O
EDMAPROC	function
edma_show_pmem	O
(	O
)	int
{	O
printf	O
(	O
"palloc   : %ld times\n"	pointer
,	O
n_palloc	pointer
)	O
;	O
printf	O
(	O
"pget     : %ld times\n"	pointer
,	O
n_pget	pointer
)	O
;	O
printf	O
(	O
"prealloc : %ld times\n"	pointer
,	O
n_prealloc	pointer
)	O
;	O
printf	O
(	O
"pfree    : %ld times\n"	pointer
,	O
n_pfree	pointer
)	O
;	O
}	O