int	O
gsl_poly_complex_solve_quadratic	O
(	O
double	O
a	O
,	O
double	O
b	O
,	O
double	O
c	O
,	O
gsl_complex	O
*	O
z0	pointer
,	O
gsl_complex	O
*	O
z1	pointer
)	O
{	O
double	O
disc	double
=	O
b	O
*	O
b	O
-	O
4	int
*	O
a	O
*	O
c	O
;	O
if	O
(	O
a	O
==	O
0	O
)	O
{	O
if	O
(	O
b	O
==	O
0	O
)	O
{	O
return	O
0	int
;	O
}	O
else	O
{	O
GSL_REAL	O
(	O
*	O
z0	pointer
)	O
=	O
-	O
c	int
/	O
b	O
;	O
GSL_IMAG	O
(	O
*	O
z0	pointer
)	O
=	O
0	O
;	O
return	O
1	int
;	O
}	O
;	O
}	O
if	O
(	O
disc	O
>	O
0	O
)	O
{	O
if	O
(	O
b	O
==	O
0	O
)	O
{	O
double	O
s	double
=	O
fabs	O
(	O
0.5	pointer
*	O
sqrt	O
(	O
disc	pointer
)	O
/	O
a	O
)	O
;	O
GSL_REAL	O
(	O
*	O
z0	pointer
)	O
=	O
-	O
s	int
;	O
GSL_IMAG	O
(	O
*	O
z0	pointer
)	O
=	O
0	O
;	O
GSL_REAL	O
(	O
*	O
z1	pointer
)	O
=	O
s	O
;	O
GSL_IMAG	O
(	O
*	O
z1	pointer
)	O
=	O
0	O
;	O
}	O
else	O
{	O
double	O
sgnb	double
=	O
(	O
b	O
>	O
0	O
?	O
1	O
:	O
-	O
1	int
)	O
;	O
double	O
temp	double
=	O
-	O
0.5	int
*	O
(	O
b	O
+	O
sgnb	O
*	O
sqrt	O
(	O
disc	pointer
)	O
)	O
;	O
double	O
r1	double
=	O
temp	O
/	O
a	O
;	O
double	O
r2	double
=	O
c	O
/	O
temp	O
;	O
if	O
(	O
r1	O
<	O
r2	O
)	O
{	O
GSL_REAL	O
(	O
*	O
z0	pointer
)	O
=	O
r1	O
;	O
GSL_IMAG	O
(	O
*	O
z0	pointer
)	O
=	O
0	O
;	O
GSL_REAL	O
(	O
*	O
z1	pointer
)	O
=	O
r2	O
;	O
GSL_IMAG	O
(	O
*	O
z1	pointer
)	O
=	O
0	O
;	O
}	O
else	O
{	O
GSL_REAL	O
(	O
*	O
z0	pointer
)	O
=	O
r2	O
;	O
GSL_IMAG	O
(	O
*	O
z0	pointer
)	O
=	O
0	O
;	O
GSL_REAL	O
(	O
*	O
z1	pointer
)	O
=	O
r1	O
;	O
GSL_IMAG	O
(	O
*	O
z1	pointer
)	O
=	O
0	O
;	O
}	O
}	O
return	O
2	O
;	O
}	O
else	O
if	O
(	O
disc	O
==	O
0	O
)	O
{	O
GSL_REAL	O
(	O
*	O
z0	pointer
)	O
=	O
-	O
0.5	int
*	O
b	O
/	O
a	O
;	O
GSL_IMAG	O
(	O
*	O
z0	pointer
)	O
=	O
0	O
;	O
GSL_REAL	O
(	O
*	O
z1	pointer
)	O
=	O
-	O
0.5	int
*	O
b	O
/	O
a	O
;	O
GSL_IMAG	O
(	O
*	O
z1	pointer
)	O
=	O
0	O
;	O
return	O
2	int
;	O
}	O
else	O
{	O
double	O
s	double
=	O
fabs	O
(	O
0.5	pointer
*	O
sqrt	pointer
(	O
-	pointer
disc	int
)	O
/	O
a	O
)	O
;	O
GSL_REAL	O
(	O
*	O
z0	pointer
)	O
=	O
-	O
0.5	int
*	O
b	O
/	O
a	O
;	O
GSL_IMAG	O
(	O
*	O
z0	pointer
)	O
=	O
-	O
s	int
;	O
GSL_REAL	O
(	O
*	O
z1	pointer
)	O
=	O
-	O
0.5	int
*	O
b	O
/	O
a	O
;	O
GSL_IMAG	O
(	O
*	O
z1	pointer
)	O
=	O
s	O
;	O
return	O
2	int
;	O
}	O
}	O