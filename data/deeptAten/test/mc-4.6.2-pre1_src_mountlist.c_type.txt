struct	O
mount_entry	struct
{	O
char	O
*	O
me_devname	pointer
;	O
char	O
*	O
me_mountdir	pointer
;	O
char	O
*	O
me_type	pointer
;	O
dev_t	O
me_dev	O
;	O
struct	O
mount_entry	struct
*	O
me_next	pointer
;	O
}	O
;	O
struct	O
fs_usage	struct
{	O
long	O
fsu_blocks	O
;	O
long	O
fsu_bfree	long
;	O
long	O
fsu_bavail	long
;	O
long	O
fsu_files	long
;	O
long	O
fsu_ffree	long
;	O
}	O
;	O
static	O
int	O
get_fs_usage	function
(	O
char	O
*	O
path	pointer
,	O
struct	O
fs_usage	struct
*	O
fsp	pointer
)	O
;	O
static	O
struct	O
mount_entry	struct
*	O
mount_list	pointer
=	O
NULL	O
;	O
static	O
int	O
xatoi	function
(	O
const	O
char	O
*	O
cp	pointer
)	O
{	O
int	O
val	int
;	O
val	O
=	O
0	int
;	O
while	O
(	O
*	O
cp	pointer
)	O
{	O
if	O
(	O
*	O
cp	pointer
>=	O
'a'	O
&&	O
*	O
cp	pointer
<=	O
'f'	O
)	O
val	O
=	O
val	int
*	O
16	O
+	O
*	int
cp	pointer
-	O
'a'	O
+	O
10	int
;	O
else	O
if	O
(	O
*	O
cp	pointer
>=	O
'A'	O
&&	O
*	O
cp	pointer
<=	O
'F'	O
)	O
val	O
=	O
val	int
*	O
16	O
+	O
*	int
cp	pointer
-	O
'A'	O
+	O
10	int
;	O
else	O
if	O
(	O
*	O
cp	pointer
>=	O
'0'	O
&&	O
*	O
cp	pointer
<=	O
'9'	O
)	O
val	O
=	O
val	int
*	O
16	O
+	O
*	int
cp	pointer
-	O
'0'	O
;	O
else	O
break	O
;	O
cp	O
++	O
;	O
}	O
return	O
val	O
;	O
}	O
static	O
struct	O
mount_entry	struct
*	O
read_filesystem_list	function
(	O
int	O
need_fs_type	O
,	O
int	O
all_fs	int
)	O
{	O
struct	O
mount_entry	struct
*	O
mlist	pointer
;	O
struct	O
mount_entry	struct
*	O
me	pointer
;	O
struct	O
mount_entry	struct
*	O
mtail	pointer
;	O
(	O
void	O
)	O
need_fs_type	O
;	O
(	O
void	O
)	O
all_fs	function
;	O
me	O
=	O
(	O
struct	O
mount_entry	struct
*	O
)	O
malloc	pointer
(	O
sizeof	O
(	O
struct	O
mount_entry	struct
)	O
)	O
;	O
me	O
->	O
me_next	pointer
=	O
NULL	O
;	O
mlist	pointer
=	O
mtail	int
=	O
me	O
;	O
{	pointer
struct	O
mntent	struct
*	O
mnt	pointer
;	O
FILE	O
*	O
fp	pointer
;	O
const	O
char	O
*	O
devopt	pointer
;	O
fp	O
=	O
setmntent	pointer
(	O
MOUNTED	O
,	O
"r"	pointer
)	O
;	O
if	O
(	O
fp	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
while	O
(	O
(	O
mnt	O
=	O
getmntent	O
(	O
fp	pointer
)	O
)	O
)	O
{	O
if	O
(	O
!	pointer
all_fs	O
&&	O
(	pointer
!	O
strcmp	O
(	O
mnt	pointer
->	O
mnt_type	pointer
,	O
"ignore"	pointer
)	O
||	O
!	O
strcmp	O
(	O
mnt	pointer
->	O
mnt_type	pointer
,	O
"auto"	pointer
)	O
)	O
)	O
continue	O
;	O
me	O
=	O
(	O
struct	O
mount_entry	struct
*	O
)	O
malloc	pointer
(	O
sizeof	O
(	O
struct	O
mount_entry	struct
)	O
)	O
;	O
me	O
->	O
me_devname	pointer
=	O
strdup	pointer
(	O
mnt	pointer
->	O
mnt_fsname	pointer
)	O
;	O
me	O
->	O
me_mountdir	pointer
=	O
strdup	pointer
(	O
mnt	pointer
->	O
mnt_dir	pointer
)	O
;	O
me	O
->	O
me_type	pointer
=	O
strdup	int
(	O
mnt	pointer
->	O
mnt_type	pointer
)	O
;	O
devopt	O
=	O
strstr	function
(	O
mnt	pointer
->	O
mnt_opts	pointer
,	O
"dev="	pointer
)	O
;	O
if	O
(	O
devopt	pointer
)	O
{	O
if	O
(	O
devopt	pointer
[	O
4	int
]	O
==	O
'0'	O
&&	O
(	pointer
devopt	O
[	O
5	int
]	O
==	O
'x'	O
||	O
devopt	O
[	O
5	int
]	O
==	O
'X'	O
)	O
)	O
me	O
->	O
me_dev	pointer
=	O
xatoi	O
(	O
devopt	pointer
+	O
6	int
)	O
;	O
else	O
me	O
->	O
me_dev	pointer
=	O
xatoi	pointer
(	O
devopt	pointer
+	O
4	int
)	O
;	O
}	O
else	O
me	O
->	O
me_dev	pointer
=	O
-	pointer
1	O
;	O
me	O
->	O
me_next	pointer
=	O
NULL	int
;	O
mtail	pointer
->	O
me_next	pointer
=	O
me	int
;	O
mtail	pointer
=	O
me	pointer
;	O
}	pointer
if	O
(	O
endmntent	pointer
(	O
fp	pointer
)	O
==	O
0	O
)	O
return	O
NULL	O
;	O
}	O
me	O
=	O
mlist	function
;	O
mlist	O
=	O
mlist	int
->	O
me_next	pointer
;	O
free	O
(	O
me	pointer
)	O
;	O
return	O
mlist	int
;	O
}	O
void	O
init_my_statfs	function
(	O
void	O
)	O
{	O
mount_list	O
=	O
read_filesystem_list	pointer
(	O
1	O
,	O
1	int
)	O
;	O
}	O
void	O
my_statfs	function
(	O
struct	O
my_statfs	struct
*	O
myfs_stats	pointer
,	O
const	O
char	O
*	O
path	pointer
)	O
{	O
int	O
i	int
,	O
len	int
=	O
0	int
;	O
struct	O
mount_entry	struct
*	O
entry	pointer
=	O
NULL	O
;	O
struct	O
mount_entry	struct
*	O
temp	pointer
=	O
mount_list	O
;	O
struct	O
fs_usage	struct
fs_use	O
;	O
while	O
(	O
temp	O
)	O
{	O
i	O
=	O
strlen	int
(	O
temp	pointer
->	O
me_mountdir	pointer
)	O
;	O
if	O
(	O
i	pointer
>	O
len	int
&&	O
(	int
strncmp	O
(	O
path	pointer
,	O
temp	pointer
->	O
me_mountdir	pointer
,	O
i	pointer
)	O
==	O
0	int
)	O
)	O
if	O
(	O
!	pointer
entry	O
||	O
(	O
path	O
[	O
i	int
]	O
==	O
PATH_SEP	O
||	O
path	int
[	O
i	int
]	O
==	O
0	O
)	O
)	O
{	O
len	O
=	O
i	int
;	O
entry	int
=	O
temp	O
;	O
}	O
temp	O
=	O
temp	function
->	O
me_next	pointer
;	O
}	pointer
if	O
(	O
entry	pointer
)	O
{	O
memset	O
(	O
&	pointer
fs_use	pointer
,	O
0	O
,	O
sizeof	O
(	O
struct	O
fs_usage	struct
)	O
)	O
;	O
get_fs_usage	O
(	O
entry	O
->	O
me_mountdir	pointer
,	O
&	pointer
fs_use	pointer
)	O
;	O
myfs_stats	O
->	O
type	pointer
=	O
entry	int
->	O
me_dev	pointer
;	O
myfs_stats	O
->	O
typename	pointer
=	O
entry	int
->	O
me_type	pointer
;	O
myfs_stats	O
->	O
mpoint	pointer
=	O
entry	int
->	O
me_mountdir	pointer
;	O
myfs_stats	pointer
->	O
device	pointer
=	O
entry	pointer
->	O
me_devname	pointer
;	O
myfs_stats	pointer
->	O
avail	pointer
=	O
getuid	int
(	O
)	O
?	O
fs_use	O
.	O
fsu_bavail	int
/	O
2	O
:	O
fs_use	pointer
.	O
fsu_bfree	pointer
/	O
2	O
;	O
myfs_stats	pointer
->	O
total	pointer
=	O
fs_use	int
.	O
fsu_blocks	pointer
/	O
2	O
;	O
myfs_stats	pointer
->	O
nfree	pointer
=	O
fs_use	int
.	O
fsu_ffree	pointer
;	O
myfs_stats	pointer
->	O
nodes	pointer
=	O
fs_use	int
.	O
fsu_files	pointer
;	O
}	pointer
else	O
{	O
myfs_stats	O
->	O
type	pointer
=	O
0	int
;	O
myfs_stats	pointer
->	O
mpoint	pointer
=	O
"unknown"	int
;	O
myfs_stats	pointer
->	O
device	pointer
=	O
"unknown"	pointer
;	O
myfs_stats	pointer
->	O
avail	pointer
=	O
0	int
;	O
myfs_stats	pointer
->	O
total	pointer
=	O
0	int
;	O
myfs_stats	pointer
->	O
nfree	pointer
=	O
0	int
;	O
myfs_stats	pointer
->	O
nodes	pointer
=	O
0	int
;	O
}	pointer
}	O
static	O
long	O
fs_adjust_blocks	function
(	O
long	O
blocks	O
,	O
int	O
fromsize	int
,	O
int	O
tosize	int
)	O
{	O
if	O
(	O
tosize	O
<=	O
0	int
)	O
abort	O
(	O
)	O
;	O
if	O
(	O
fromsize	O
<=	O
0	int
)	O
return	O
-	int
1	int
;	O
if	O
(	O
fromsize	O
==	O
tosize	O
)	O
return	O
blocks	int
;	O
else	O
if	O
(	O
fromsize	int
>	O
tosize	int
)	O
return	O
blocks	int
*	O
(	O
fromsize	O
/	O
tosize	O
)	O
;	O
else	O
return	O
(	int
blocks	O
+	O
(	O
blocks	O
<	O
0	O
?	O
-	int
1	int
:	O
1	O
)	O
)	O
/	O
(	int
tosize	O
/	O
fromsize	O
)	O
;	O
}	O
static	O
int	O
get_fs_usage	function
(	O
char	O
*	O
path	pointer
,	O
struct	O
fs_usage	struct
*	O
fsp	pointer
)	O
{	O
struct	O
statfs	struct
fsd	O
;	O
if	O
(	O
statfs	O
(	O
path	pointer
,	O
&	pointer
fsd	pointer
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
fsp	O
->	O
fsu_blocks	pointer
=	O
CONVERT_BLOCKS	O
(	O
fsd	pointer
.	O
f_blocks	pointer
)	O
;	O
fsp	O
->	O
fsu_bfree	pointer
=	O
CONVERT_BLOCKS	pointer
(	O
fsd	pointer
.	O
f_bfree	pointer
)	O
;	O
fsp	O
->	O
fsu_bavail	pointer
=	O
CONVERT_BLOCKS	pointer
(	O
fsd	pointer
.	O
f_bavail	pointer
)	O
;	O
fsp	O
->	O
fsu_files	pointer
=	O
fsd	pointer
.	O
f_files	pointer
;	O
fsp	pointer
->	O
fsu_ffree	pointer
=	O
fsd	pointer
.	O
f_ffree	pointer
;	O
return	pointer
0	O
;	O
}	O