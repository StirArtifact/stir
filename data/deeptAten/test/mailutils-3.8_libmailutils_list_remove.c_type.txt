int	O
mu_list_remove	O
(	O
mu_list_t	O
list	O
,	O
const	O
void	O
*	O
item	pointer
)	O
{	O
struct	O
list_data	struct
*	O
current	pointer
;	O
mu_list_comparator_t	O
comp	O
;	O
int	O
status	int
=	O
MU_ERR_NOENT	int
;	O
if	O
(	O
list	O
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
comp	O
=	O
list	O
->	O
comp	pointer
?	O
list	O
->	O
comp	pointer
:	O
_mu_list_ptr_comparator	O
;	O
mu_monitor_wrlock	pointer
(	O
list	pointer
->	O
monitor	pointer
)	O
;	O
for	O
(	O
current	O
=	O
list	pointer
->	O
head	pointer
.	O
next	pointer
;	O
current	O
!=	O
&	O
list	pointer
->	O
head	pointer
;	O
current	O
=	O
current	pointer
->	O
next	pointer
)	O
{	O
if	pointer
(	O
comp	O
(	O
current	pointer
->	O
item	pointer
,	O
item	pointer
)	O
==	O
0	O
)	O
{	O
struct	O
list_data	struct
*	O
previous	pointer
=	O
current	O
->	O
prev	pointer
;	O
mu_iterator_delitem	O
(	O
list	pointer
->	O
itr	pointer
,	O
current	O
)	O
;	O
previous	O
->	O
next	pointer
=	O
current	pointer
->	O
next	pointer
;	O
current	O
->	O
next	pointer
->	O
prev	pointer
=	O
previous	pointer
;	O
DESTROY_ITEM	O
(	O
list	pointer
,	O
current	pointer
)	O
;	O
free	O
(	O
current	pointer
)	O
;	O
list	O
->	O
count	pointer
--	O
;	O
status	O
=	O
0	int
;	O
break	O
;	O
}	O
}	O
mu_monitor_unlock	O
(	O
list	O
->	O
monitor	pointer
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_list_remove_nd	function
(	O
mu_list_t	O
list	O
,	O
const	O
void	O
*	O
item	pointer
)	O
{	O
mu_list_destroy_item_t	O
dptr	O
=	O
mu_list_set_destroy_item	O
(	O
list	pointer
,	O
NULL	pointer
)	O
;	O
int	O
rc	int
=	O
mu_list_remove	int
(	O
list	O
,	O
item	O
)	O
;	O
mu_list_set_destroy_item	O
(	O
list	O
,	O
dptr	O
)	O
;	O
return	O
rc	int
;	O
}	O