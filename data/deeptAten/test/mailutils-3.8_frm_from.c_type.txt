int	O
count_only	O
;	O
char	O
*	O
sender_option	pointer
;	O
char	O
*	O
mailbox_name	pointer
;	O
static	O
struct	O
mu_option	struct
from_options	O
[	O
]	O
=	O
{	O
{	pointer
"count"	pointer
,	O
'c'	O
,	O
NULL	pointer
,	O
MU_OPTION_DEFAULT	pointer
,	O
N_	O
(	O
"just print a count of messages and exit"	pointer
)	O
,	O
mu_c_bool	O
,	O
&	O
count_only	pointer
}	O
,	O
{	O
"sender"	pointer
,	O
's'	O
,	O
N_	pointer
(	O
"ADDRESS"	pointer
)	O
,	O
MU_OPTION_DEFAULT	O
,	O
N_	O
(	O
"print only mail from addresses containing the supplied string"	pointer
)	O
,	O
mu_c_string	O
,	O
&	O
sender_option	pointer
}	O
,	O
{	O
"file"	O
,	O
'f'	O
,	O
N_	pointer
(	O
"FILE"	pointer
)	O
,	O
MU_OPTION_DEFAULT	O
,	O
N_	O
(	O
"read mail from FILE"	pointer
)	O
,	O
mu_c_string	O
,	O
&	O
mailbox_name	pointer
}	O
,	O
{	O
"debug"	pointer
,	O
'd'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	O
,	O
N_	O
(	O
"enable debugging output"	pointer
)	O
,	O
mu_c_incr	O
,	O
&	O
frm_debug	pointer
}	O
,	O
MU_OPTION_END	O
}	O
,	O
*	O
options	pointer
[	O
]	O
=	O
{	O
from_options	pointer
,	O
NULL	O
}	O
;	O
static	O
struct	O
mu_cli_setup	struct
cli	O
=	O
{	O
options	O
,	O
NULL	O
,	O
N_	O
(	O
"GNU from -- display from and subject."	pointer
)	O
,	O
N_	O
(	O
"[OPTIONS] [USER]"	pointer
)	O
,	O
}	O
;	O
static	O
char	O
*	O
capa	function
[	O
]	O
=	O
{	O
"debug"	pointer
,	O
"mailbox"	O
,	O
"locking"	O
,	O
NULL	pointer
}	O
;	O
static	O
int	O
from_select	function
(	O
size_t	O
index	O
,	O
mu_message_t	O
msg	O
)	O
{	O
if	O
(	O
count_only	O
)	O
return	O
0	O
;	O
if	O
(	O
sender_option	O
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
mu_header_t	O
hdr	O
=	O
NULL	O
;	O
char	O
*	O
sender	pointer
;	O
mu_message_get_header	O
(	O
msg	pointer
,	O
&	pointer
hdr	pointer
)	O
;	O
if	O
(	O
mu_header_aget_value_unfold	O
(	O
hdr	pointer
,	O
MU_HEADER_FROM	pointer
,	O
&	pointer
sender	pointer
)	O
==	O
0	O
)	O
{	O
if	O
(	O
strstr	O
(	O
sender	pointer
,	O
sender_option	pointer
)	O
)	O
rc	O
=	O
1	int
;	O
free	O
(	O
sender	pointer
)	O
;	O
}	O
return	O
rc	O
;	O
}	O
return	O
1	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	pointer
argv	pointer
)	O
{	O
size_t	O
total	long
;	O
MU_APP_INIT_NLS	O
(	O
)	pointer
;	O
mu_register_all_mbox_formats	O
(	O
)	pointer
;	O
mu_auth_register_module	O
(	O
&	pointer
mu_auth_tls_module	pointer
)	O
;	O
mu_cli	O
(	O
argc	pointer
,	O
argv	O
,	O
&	pointer
cli	pointer
,	O
capa	O
,	O
NULL	O
,	O
&	O
argc	pointer
,	O
&	O
argv	pointer
)	O
;	O
if	O
(	O
argc	O
>	O
1	O
)	O
{	O
mu_error	O
(	O
_	pointer
(	O
"too many arguments"	pointer
)	O
)	O
;	O
exit	O
(	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
argc	O
>	O
0	pointer
)	O
{	O
if	O
(	O
mailbox_name	O
)	O
{	O
mu_error	O
(	O
_	pointer
(	O
"both --from option and user name are specified"	pointer
)	O
)	O
;	O
exit	O
(	O
1	int
)	O
;	O
}	O
mailbox_name	O
=	O
mu_alloc	O
(	O
strlen	O
(	O
argv	pointer
[	O
0	int
]	O
)	O
+	O
2	int
)	O
;	O
mailbox_name	O
[	O
0	int
]	O
=	O
'%'	O
;	O
strcpy	pointer
(	O
mailbox_name	pointer
+	O
1	int
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
}	O
init_output	O
(	O
0	pointer
)	O
;	O
frm_scan	O
(	O
mailbox_name	pointer
,	O
from_select	O
,	O
&	pointer
total	pointer
)	O
;	O
if	O
(	O
count_only	O
)	O
{	O
mu_printf	O
(	O
ngettext	pointer
(	O
"There is %lu message in your incoming mailbox.\n"	pointer
,	O
"There are %lu messages in your incoming mailbox.\n"	pointer
,	O
total	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
total	O
)	O
;	O
}	O
return	O
0	O
;	O
}	O