public	O
int	O
errmsgs	function
;	O
public	O
int	O
need_clr	function
;	O
public	O
int	O
final_attr	int
;	O
public	O
int	O
at_prompt	int
;	O
extern	O
int	O
sigs	int
;	O
extern	O
int	O
sc_width	int
;	O
extern	O
int	O
so_s_width	int
,	O
so_e_width	O
;	O
extern	O
int	O
screen_trashed	int
;	O
extern	O
int	O
any_display	int
;	O
extern	O
int	O
is_tty	int
;	O
extern	O
int	O
oldbot	int
;	O
public	O
void	O
put_line	function
(	O
)	O
{	O
int	O
c	int
;	O
int	O
i	int
;	O
int	O
a	int
;	O
if	O
(	O
ABORT_SIGS	int
(	O
)	int
)	O
{	O
screen_trashed	O
=	O
1	int
;	O
return	O
;	int
}	O
final_attr	O
=	O
AT_NORMAL	function
;	O
for	O
(	O
i	int
=	O
0	int
;	O
(	int
c	O
=	O
gline	function
(	O
i	int
,	O
&	int
a	int
)	O
)	O
!=	O
'\0'	int
;	O
i	int
++	O
)	O
{	O
at_switch	O
(	O
a	int
)	O
;	O
final_attr	O
=	O
a	int
;	O
if	O
(	O
c	int
==	O
'\b'	O
)	O
putbs	O
(	O
)	int
;	O
else	O
putchr	O
(	O
c	int
)	O
;	O
}	O
at_exit	O
(	O
)	O
;	O
}	O
static	O
char	O
obuf	function
[	O
OUTBUF_SIZE	O
]	O
;	O
static	O
char	O
*	array
ob	pointer
=	O
obuf	O
;	O
public	O
void	O
flush	function
(	O
)	O
{	O
int	O
n	int
;	O
int	O
fd	int
;	O
n	O
=	O
(	int
int	O
)	O
(	O
ob	O
-	O
obuf	int
)	O
;	O
if	O
(	O
n	int
==	O
0	O
)	O
return	O
;	int
fd	O
=	O
(	function
any_display	O
)	O
?	O
1	O
:	O
2	O
;	O
if	O
(	O
write	O
(	O
fd	pointer
,	O
obuf	int
,	O
n	int
)	O
!=	O
n	int
)	O
screen_trashed	O
=	O
1	int
;	O
ob	O
=	O
obuf	O
;	O
}	O
public	O
int	O
putchr	function
(	O
c	O
)	O
int	O
c	int
;	O
{	O
if	O
(	O
need_clr	int
)	O
{	O
need_clr	O
=	O
0	int
;	O
clear_bot	O
(	O
)	O
;	O
}	O
if	O
(	O
ob	O
>=	O
&	int
obuf	pointer
[	O
sizeof	int
(	O
obuf	O
)	O
-	O
1	int
]	O
)	O
flush	O
(	O
)	int
;	O
*	O
ob	pointer
++	O
=	O
c	O
;	O
at_prompt	O
=	O
0	int
;	O
return	O
(	int
c	O
)	O
;	O
}	O
public	O
void	O
putstr	function
(	O
s	O
)	O
constant	O
char	O
*	O
s	pointer
;	O
{	O
while	O
(	O
*	int
s	pointer
!=	O
'\0'	O
)	O
putchr	O
(	O
*	O
s	pointer
++	O
)	O
;	O
}	O
TYPE_TO_A_FUNC	O
(	O
postoa	O
,	O
POSITION	O
)	O
TYPE_TO_A_FUNC	O
(	O
linenumtoa	O
,	O
LINENUM	pointer
)	O
TYPE_TO_A_FUNC	O
(	O
inttoa	O
,	O
int	int
)	O
static	O
int	O
iprint_int	O
(	O
num	O
)	O
int	O
num	int
;	O
{	O
char	O
buf	O
[	O
INT_STRLEN_BOUND	int
(	O
num	int
)	O
]	O
;	O
inttoa	O
(	O
num	O
,	O
buf	int
)	O
;	O
putstr	O
(	O
buf	O
)	O
;	O
return	O
(	int
(	O
int	O
)	O
strlen	function
(	O
buf	pointer
)	O
)	O
;	O
}	O
static	O
int	O
iprint_linenum	function
(	O
num	O
)	O
LINENUM	O
num	O
;	O
{	O
char	O
buf	O
[	O
INT_STRLEN_BOUND	int
(	O
num	int
)	O
]	O
;	O
linenumtoa	O
(	O
num	O
,	O
buf	int
)	O
;	O
putstr	O
(	O
buf	O
)	O
;	O
return	O
(	int
(	O
int	O
)	O
strlen	function
(	O
buf	pointer
)	O
)	O
;	O
}	O
static	O
int	O
less_printf	function
(	O
fmt	O
,	O
parg	O
)	O
char	O
*	O
fmt	pointer
;	O
PARG	O
*	O
parg	pointer
;	O
{	O
char	O
*	O
s	pointer
;	O
int	O
col	int
;	O
col	O
=	O
0	int
;	O
while	O
(	O
*	O
fmt	pointer
!=	O
'\0'	O
)	O
{	O
if	O
(	O
*	O
fmt	pointer
!=	O
'%'	O
)	O
{	O
putchr	O
(	O
*	pointer
fmt	pointer
++	O
)	O
;	O
col	O
++	O
;	O
}	O
else	O
{	O
++	O
fmt	O
;	O
switch	O
(	O
*	O
fmt	pointer
++	O
)	O
{	O
case	O
's'	O
:	O
s	O
=	O
parg	O
->	O
p_string	int
;	O
parg	O
++	O
;	O
while	O
(	O
*	O
s	pointer
!=	O
'\0'	O
)	O
{	O
putchr	O
(	O
*	O
s	pointer
++	O
)	O
;	O
col	O
++	O
;	O
}	O
break	O
;	O
case	O
'd'	O
:	O
col	O
+=	O
iprint_int	int
(	O
parg	O
->	O
p_int	int
)	O
;	O
parg	O
++	O
;	O
break	O
;	O
case	O
'n'	O
:	O
col	O
+=	O
iprint_linenum	int
(	O
parg	int
->	O
p_linenum	int
)	O
;	O
parg	O
++	O
;	O
break	O
;	O
case	O
'%'	O
:	O
putchr	O
(	O
'%'	O
)	O
;	O
break	O
;	O
}	O
}	O
}	O
return	O
(	O
col	O
)	O
;	O
}	O
public	O
void	O
get_return	function
(	O
)	O
{	O
int	O
c	int
;	O
c	O
=	O
getchr	function
(	O
)	O
;	O
if	O
(	O
c	O
!=	O
'\n'	O
&&	O
c	int
!=	O
'\r'	O
&&	O
c	pointer
!=	O
' '	O
&&	O
c	int
!=	O
READ_INTR	O
)	O
ungetcc	O
(	O
c	O
)	O
;	O
}	O
public	O
void	O
error	function
(	O
fmt	O
,	O
parg	pointer
)	O
char	O
*	O
fmt	pointer
;	O
PARG	O
*	O
parg	pointer
;	O
{	O
int	O
col	int
=	O
0	int
;	O
static	O
char	O
return_to_continue	O
[	O
]	O
=	O
"  (press RETURN)"	O
;	O
errmsgs	O
++	O
;	O
if	O
(	O
any_display	O
&&	O
is_tty	int
)	O
{	O
if	O
(	O
!	int
oldbot	O
)	O
squish_check	O
(	O
)	pointer
;	O
at_exit	O
(	O
)	O
;	O
clear_bot	O
(	O
)	O
;	O
at_enter	O
(	O
AT_STANDOUT	O
)	O
;	O
col	O
+=	O
so_s_width	int
;	O
}	O
col	O
+=	O
less_printf	int
(	O
fmt	O
,	O
parg	pointer
)	O
;	O
if	O
(	O
!	int
(	O
any_display	O
&&	O
is_tty	O
)	O
)	O
{	O
putchr	O
(	O
'\n'	int
)	O
;	O
return	O
;	int
}	O
putstr	O
(	O
return_to_continue	O
)	O
;	O
at_exit	O
(	O
)	O
;	O
col	O
+=	O
sizeof	int
(	O
return_to_continue	O
)	O
+	O
so_e_width	int
;	O
get_return	O
(	O
)	O
;	O
lower_left	O
(	O
)	O
;	O
clear_eol	O
(	O
)	O
;	O
if	O
(	O
col	int
>=	O
sc_width	int
)	O
screen_trashed	O
=	O
1	int
;	O
flush	O
(	O
)	int
;	O
}	O
static	O
char	O
intr_to_abort	function
[	O
]	O
=	O
"... (interrupt to abort)"	O
;	O
public	O
void	O
ierror	function
(	O
fmt	O
,	O
parg	pointer
)	O
char	O
*	O
fmt	pointer
;	O
PARG	O
*	O
parg	pointer
;	O
{	O
at_exit	O
(	O
)	O
;	O
clear_bot	O
(	O
)	O
;	O
at_enter	O
(	O
AT_STANDOUT	O
)	O
;	O
(	O
void	O
)	O
less_printf	function
(	O
fmt	O
,	O
parg	pointer
)	O
;	O
putstr	O
(	O
intr_to_abort	O
)	O
;	O
at_exit	O
(	O
)	pointer
;	O
flush	O
(	O
)	int
;	O
need_clr	O
=	O
1	O
;	O
}	O
public	O
int	O
query	function
(	O
fmt	O
,	O
parg	pointer
)	O
char	O
*	O
fmt	pointer
;	O
PARG	O
*	O
parg	pointer
;	O
{	O
int	O
c	int
;	O
int	O
col	int
=	O
0	int
;	O
if	O
(	O
any_display	O
&&	O
is_tty	int
)	O
clear_bot	O
(	O
)	O
;	O
(	O
void	O
)	O
less_printf	function
(	O
fmt	O
,	O
parg	O
)	O
;	O
c	O
=	O
getchr	function
(	O
)	O
;	O
if	O
(	O
!	int
(	O
any_display	O
&&	O
is_tty	O
)	O
)	O
{	O
putchr	O
(	O
'\n'	int
)	O
;	O
return	O
(	int
c	O
)	O
;	O
}	O
lower_left	O
(	O
)	O
;	O
if	O
(	O
col	int
>=	O
sc_width	int
)	O
screen_trashed	O
=	O
1	int
;	O
flush	O
(	O
)	int
;	O
return	O
(	int
c	O
)	O
;	O
}	O