typedef	O
struct	O
{	O
volatile	O
sig_atomic_t	pointer
used	O
;	O
volatile	O
pid_t	int
child	O
;	O
}	O
slaves_entry_t	O
;	O
static	O
slaves_entry_t	O
static_slaves	O
[	O
32	int
]	O
;	O
static	O
slaves_entry_t	O
*	O
volatile	pointer
slaves	pointer
=	O
static_slaves	O
;	O
static	O
sig_atomic_t	O
volatile	O
slaves_count	int
=	O
0	int
;	O
static	O
size_t	O
slaves_allocated	long
=	O
SIZEOF	O
(	O
static_slaves	pointer
)	O
;	O
static	O
void	O
cleanup_slaves	function
(	O
void	O
)	O
{	O
for	O
(	O
;	int
;	O
)	O
{	O
size_t	O
n	O
=	O
slaves_count	int
;	O
if	O
(	O
n	long
==	O
0	O
)	O
break	O
;	O
n	O
--	O
;	O
slaves_count	O
=	O
n	int
;	O
if	O
(	O
slaves	long
[	O
n	int
]	O
.	O
used	pointer
)	O
{	O
pid_t	O
slave	int
=	O
slaves	O
[	O
n	int
]	O
.	O
child	pointer
;	O
kill	O
(	O
slave	int
,	O
TERMINATOR	pointer
)	O
;	O
}	O
}	O
}	O
void	O
register_slave_subprocess	function
(	O
pid_t	O
child	int
)	O
{	O
static	O
bool	O
cleanup_slaves_registered	int
=	O
false	int
;	O
if	O
(	O
!	O
cleanup_slaves_registered	int
)	O
{	O
atexit	O
(	O
cleanup_slaves	O
)	O
;	O
at_fatal_signal	O
(	O
cleanup_slaves	pointer
)	O
;	O
cleanup_slaves_registered	O
=	O
true	int
;	O
}	O
{	O
slaves_entry_t	O
*	O
s	pointer
=	O
slaves	pointer
;	O
slaves_entry_t	O
*	O
s_end	pointer
=	O
s	int
+	O
slaves_count	int
;	O
for	O
(	O
;	long
s	O
<	O
s_end	int
;	O
s	int
++	O
)	O
if	O
(	O
!	int
s	O
->	O
used	pointer
)	O
{	O
s	O
->	O
child	pointer
=	O
child	int
;	O
s	pointer
->	O
used	pointer
=	O
1	int
;	O
return	pointer
;	int
}	O
}	O
if	O
(	O
slaves_count	O
==	O
slaves_allocated	int
)	O
{	O
slaves_entry_t	O
*	O
old_slaves	pointer
=	O
slaves	pointer
;	O
size_t	pointer
new_slaves_allocated	long
=	O
2	pointer
*	O
slaves_allocated	O
;	O
slaves_entry_t	O
*	O
new_slaves	pointer
=	O
(	pointer
slaves_entry_t	O
*	O
)	O
malloc	pointer
(	O
new_slaves_allocated	O
*	O
sizeof	O
(	O
slaves_entry_t	O
)	O
)	O
;	O
if	O
(	O
new_slaves	O
==	O
NULL	O
)	O
{	O
kill	O
(	O
child	int
,	O
TERMINATOR	O
)	O
;	O
xalloc_die	O
(	O
)	O
;	O
}	O
memcpy	O
(	O
new_slaves	pointer
,	O
old_slaves	pointer
,	O
slaves_allocated	pointer
*	O
sizeof	pointer
(	O
slaves_entry_t	O
)	O
)	O
;	O
slaves	O
=	O
new_slaves	O
;	O
slaves_allocated	O
=	O
new_slaves_allocated	O
;	O
if	O
(	O
old_slaves	long
!=	O
static_slaves	O
)	O
free	O
(	O
old_slaves	pointer
)	O
;	O
}	O
slaves	O
[	O
slaves_count	int
]	O
.	O
child	long
=	O
child	pointer
;	O
slaves	O
[	O
slaves_count	int
]	O
.	O
used	pointer
=	O
1	int
;	O
slaves_count	O
++	O
;	O
}	O
static	O
void	O
unregister_slave_subprocess	function
(	O
pid_t	O
child	int
)	O
{	O
slaves_entry_t	O
*	O
s	pointer
=	O
slaves	O
;	O
slaves_entry_t	O
*	O
s_end	pointer
=	O
s	int
+	O
slaves_count	int
;	O
for	O
(	O
;	long
s	O
<	O
s_end	int
;	O
s	int
++	O
)	O
if	O
(	O
s	pointer
->	O
used	pointer
&&	O
s	int
->	O
child	pointer
==	O
child	O
)	O
s	O
->	O
used	pointer
=	O
0	int
;	O
}	pointer
int	O
wait_subprocess	function
(	O
pid_t	O
child	int
,	O
const	O
char	O
*	O
progname	pointer
,	O
bool	O
ignore_sigpipe	long
,	O
bool	O
null_stderr	bool
,	O
bool	O
slave_process	bool
,	O
bool	O
exit_on_error	bool
,	O
int	O
*	int
termsigp	pointer
)	O
{	O
int	O
status	int
;	O
if	O
(	O
termsigp	O
!=	O
NULL	O
)	O
*	O
termsigp	pointer
=	O
0	O
;	O
status	O
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
result	int
=	O
waitpid	int
(	O
child	int
,	O
&	O
status	pointer
,	O
0	O
)	O
;	O
if	O
(	O
result	O
!=	O
child	O
)	O
{	O
if	O
(	O
errno	O
==	O
EINTR	O
)	O
continue	O
;	O
if	O
(	O
exit_on_error	O
||	O
!	O
null_stderr	O
)	O
error	O
(	O
exit_on_error	int
?	O
EXIT_FAILURE	O
:	O
0	O
,	O
errno	int
,	O
_	int
(	O
"%s subprocess"	pointer
)	O
,	O
progname	pointer
)	O
;	O
return	O
127	int
;	O
}	O
if	O
(	O
!	O
WIFSTOPPED	pointer
(	O
status	int
)	O
)	O
break	O
;	O
}	O
if	O
(	O
slave_process	O
)	O
unregister_slave_subprocess	O
(	O
child	int
)	O
;	O
if	O
(	O
WIFSIGNALED	O
(	O
status	int
)	O
)	O
{	O
if	O
(	O
termsigp	O
!=	O
NULL	O
)	O
*	O
termsigp	pointer
=	O
WTERMSIG	O
(	O
status	int
)	O
;	O
if	O
(	O
WTERMSIG	O
(	O
status	int
)	O
==	O
SIGPIPE	O
&&	O
ignore_sigpipe	int
)	O
return	O
0	int
;	O
if	O
(	O
exit_on_error	O
||	O
(	O
!	O
null_stderr	O
&&	O
termsigp	O
==	O
NULL	O
)	O
)	O
error	O
(	O
exit_on_error	int
?	O
EXIT_FAILURE	O
:	O
0	O
,	O
0	int
,	O
_	int
(	O
"%s subprocess got fatal signal %d"	pointer
)	O
,	O
progname	pointer
,	O
(	pointer
int	O
)	O
WTERMSIG	O
(	O
status	int
)	O
)	O
;	O
return	O
127	int
;	O
}	O
if	O
(	O
!	O
WIFEXITED	O
(	O
status	int
)	O
)	O
abort	O
(	O
)	O
;	O
if	O
(	O
WEXITSTATUS	O
(	O
status	int
)	O
==	O
127	O
)	O
{	O
if	O
(	O
exit_on_error	O
||	O
!	O
null_stderr	O
)	O
error	O
(	O
exit_on_error	int
?	O
EXIT_FAILURE	O
:	O
0	O
,	O
0	int
,	O
_	int
(	O
"%s subprocess failed"	pointer
)	O
,	O
progname	pointer
)	O
;	O
return	O
127	int
;	O
}	O
return	O
WEXITSTATUS	O
(	O
status	int
)	O
;	O
}	O