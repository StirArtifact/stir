static	O
void	O
mpn_bdiv_qr_wrap	O
(	O
mp_ptr	O
qp	pointer
,	O
mp_ptr	O
rp	pointer
,	O
mp_srcptr	pointer
np	pointer
,	O
mp_size_t	pointer
nn	O
,	O
mp_srcptr	pointer
dp	pointer
,	O
mp_size_t	pointer
dn	long
)	O
{	O
mp_ptr	O
scratch_out	pointer
;	O
TMP_DECL	O
;	O
TMP_MARK	O
;	O
scratch_out	O
=	O
TMP_ALLOC_LIMBS	O
(	O
mpn_bdiv_qr_itch	int
(	O
nn	pointer
,	O
dn	pointer
)	O
)	O
;	O
mpn_bdiv_qr	O
(	O
qp	pointer
,	O
rp	int
,	O
np	int
,	O
nn	int
,	O
dp	pointer
,	O
dn	int
,	O
scratch_out	int
)	O
;	O
TMP_FREE	O
;	O
}	O
mp_bitcnt_t	O
mpn_remove	O
(	O
mp_ptr	O
wp	pointer
,	O
mp_size_t	pointer
*	long
wn	pointer
,	O
mp_ptr	O
up	pointer
,	O
mp_size_t	pointer
un	long
,	O
mp_ptr	long
vp	pointer
,	O
mp_size_t	pointer
vn	long
,	O
mp_bitcnt_t	pointer
cap	O
)	O
{	O
mp_ptr	O
pwpsp	pointer
[	O
LOG	long
]	O
;	O
mp_size_t	pointer
pwpsn	long
[	O
LOG	long
]	O
;	O
mp_size_t	pointer
npowers	long
;	O
mp_ptr	long
tp	pointer
,	O
qp	pointer
,	O
np	long
,	O
pp	long
,	O
qp2	long
;	O
mp_size_t	long
pn	long
,	O
nn	long
,	O
qn	long
,	O
i	long
;	O
mp_bitcnt_t	long
pwr	long
;	O
TMP_DECL	long
;	O
ASSERT	O
(	O
un	pointer
>	O
0	int
)	O
;	O
ASSERT	O
(	O
vn	pointer
>	O
0	int
)	O
;	O
ASSERT	O
(	O
vp	pointer
[	O
0	int
]	O
%	O
2	O
!=	O
0	int
)	O
;	O
ASSERT	O
(	O
vn	pointer
>	O
1	int
||	O
vp	O
[	O
0	int
]	O
>	O
1	int
)	O
;	O
TMP_MARK	O
;	O
tp	O
=	O
TMP_ALLOC_LIMBS	O
(	O
(	long
un	O
+	O
1	int
+	O
vn	int
)	O
/	O
2	int
)	O
;	O
qp	O
=	O
TMP_ALLOC_LIMBS	O
(	O
un	int
+	O
1	int
)	O
;	O
qp2	O
=	O
TMP_ALLOC_LIMBS	O
(	O
un	int
+	O
1	int
)	O
;	O
np	O
=	O
TMP_ALLOC_LIMBS	O
(	O
un	int
+	O
LOG	int
)	O
;	O
pp	O
=	O
vp	O
;	O
pn	O
=	O
vn	int
;	O
MPN_COPY	O
(	O
qp	pointer
,	O
up	pointer
,	O
un	pointer
)	O
;	O
qn	O
=	O
un	int
;	O
npowers	O
=	O
0	int
;	O
while	long
(	O
qn	O
>=	O
pn	int
)	O
{	O
qp	O
[	O
qn	int
]	O
=	O
0	pointer
;	O
mpn_bdiv_qr_wrap	long
(	O
qp2	pointer
,	O
tp	int
,	O
qp	pointer
,	O
qn	long
+	O
1	int
,	O
pp	int
,	O
pn	int
)	O
;	O
if	O
(	O
!	long
mpn_zero_p	O
(	O
tp	pointer
,	O
pn	pointer
)	O
)	O
break	O
;	O
MP_PTR_SWAP	O
(	O
qp	pointer
,	O
qp2	pointer
)	O
;	O
qn	O
=	O
qn	int
-	O
pn	int
;	O
qn	long
+=	O
qp	int
[	O
qn	int
]	O
!=	O
0	O
;	O
pwpsp	pointer
[	O
npowers	int
]	O
=	O
pp	pointer
;	O
pwpsn	pointer
[	O
npowers	int
]	O
=	O
pn	pointer
;	O
npowers	long
++	O
;	O
if	O
(	O
(	long
(	long
mp_bitcnt_t	O
)	O
2	O
<<	O
npowers	int
)	O
-	O
1	int
>	O
cap	int
)	O
break	O
;	O
nn	O
=	O
2	O
*	O
pn	int
-	O
1	int
;	O
if	long
(	O
nn	long
>	O
qn	int
)	O
break	O
;	O
mpn_sqr	O
(	O
np	pointer
,	O
pp	pointer
,	O
pn	int
)	O
;	O
nn	O
+=	O
np	int
[	O
nn	int
]	O
!=	O
0	O
;	O
pp	pointer
=	O
np	int
;	O
pn	long
=	O
nn	int
;	O
np	O
+=	O
nn	int
;	O
}	O
pwr	O
=	O
(	O
(	O
mp_bitcnt_t	O
)	O
1	O
<<	O
npowers	int
)	O
-	O
1	int
;	O
for	O
(	O
i	int
=	O
npowers	int
-	O
1	int
;	O
i	int
>=	O
0	int
;	O
i	int
--	O
)	O
{	O
pp	O
=	O
pwpsp	int
[	O
i	int
]	O
;	O
pn	O
=	O
pwpsn	int
[	O
i	int
]	O
;	O
if	O
(	O
qn	long
<	O
pn	int
)	O
continue	O
;	O
if	O
(	O
pwr	long
+	O
(	int
(	int
mp_bitcnt_t	O
)	O
1	O
<<	O
i	int
)	O
>	O
cap	int
)	O
continue	O
;	O
qp	O
[	O
qn	int
]	O
=	O
0	int
;	O
mpn_bdiv_qr_wrap	int
(	O
qp2	pointer
,	O
tp	int
,	O
qp	pointer
,	O
qn	int
+	O
1	int
,	O
pp	int
,	O
pn	int
)	O
;	O
if	O
(	O
!	int
mpn_zero_p	O
(	O
tp	pointer
,	O
pn	pointer
)	O
)	O
continue	O
;	O
MP_PTR_SWAP	O
(	O
qp	pointer
,	O
qp2	pointer
)	O
;	O
qn	O
=	O
qn	int
-	O
pn	int
;	O
qn	O
+=	O
qp	int
[	O
qn	int
]	O
!=	O
0	O
;	O
pwr	pointer
+=	O
(	int
mp_bitcnt_t	O
)	O
1	O
<<	O
i	int
;	O
}	int
MPN_COPY	O
(	O
wp	pointer
,	O
qp	pointer
,	O
qn	pointer
)	O
;	O
*	O
wn	pointer
=	O
qn	O
;	O
TMP_FREE	O
;	O
return	O
pwr	int
;	O
}	O