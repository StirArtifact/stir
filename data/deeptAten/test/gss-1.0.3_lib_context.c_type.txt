OM_uint32	O
gss_init_sec_context	O
(	O
OM_uint32	O
*	O
minor_status	pointer
,	O
const	O
gss_cred_id_t	O
initiator_cred_handle	O
,	O
gss_ctx_id_t	O
*	O
context_handle	pointer
,	O
const	O
gss_name_t	O
target_name	O
,	O
const	O
gss_OID	O
mech_type	pointer
,	O
OM_uint32	O
req_flags	O
,	O
OM_uint32	int
time_req	O
,	O
const	pointer
gss_channel_bindings_t	O
input_chan_bindings	O
,	O
const	O
gss_buffer_t	O
input_token	O
,	O
gss_OID	O
*	pointer
actual_mech_type	pointer
,	O
gss_buffer_t	O
output_token	O
,	O
OM_uint32	O
*	O
ret_flags	pointer
,	O
OM_uint32	O
*	O
time_rec	pointer
)	O
{	O
OM_uint32	O
maj_stat	int
;	O
_gss_mech_api_t	O
mech	O
;	O
int	O
freecontext	int
=	O
0	int
;	O
if	O
(	O
output_token	O
)	O
{	O
output_token	O
->	O
length	pointer
=	O
0	O
;	O
output_token	pointer
->	O
value	pointer
=	O
NULL	O
;	O
}	pointer
if	O
(	O
ret_flags	pointer
)	O
*	O
ret_flags	pointer
=	O
0	int
;	O
if	O
(	O
!	pointer
context_handle	O
)	O
{	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
0	pointer
;	O
return	pointer
GSS_S_NO_CONTEXT	int
|	O
GSS_S_CALL_INACCESSIBLE_READ	O
;	O
}	O
if	O
(	O
output_token	O
==	O
GSS_C_NO_BUFFER	O
)	O
{	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
0	pointer
;	O
return	pointer
GSS_S_FAILURE	int
|	O
GSS_S_CALL_BAD_STRUCTURE	O
;	O
}	pointer
if	O
(	O
*	O
context_handle	pointer
==	O
GSS_C_NO_CONTEXT	O
)	O
mech	O
=	O
_gss_find_mech	pointer
(	O
mech_type	pointer
)	O
;	O
else	O
mech	O
=	O
_gss_find_mech	function
(	O
(	pointer
*	O
context_handle	pointer
)	O
->	O
mech	pointer
)	O
;	O
if	O
(	O
mech	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
0	pointer
;	O
return	pointer
GSS_S_BAD_MECH	int
;	O
}	O
if	O
(	O
actual_mech_type	O
)	O
*	O
actual_mech_type	pointer
=	O
mech	int
->	O
mech	pointer
;	O
if	O
(	O
*	pointer
context_handle	pointer
==	O
GSS_C_NO_CONTEXT	O
)	O
{	O
*	O
context_handle	pointer
=	O
calloc	O
(	O
sizeof	int
(	O
*	O
*	pointer
context_handle	pointer
)	O
,	O
1	O
)	O
;	O
if	O
(	O
!	O
*	O
context_handle	pointer
)	O
{	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
ENOMEM	pointer
;	O
return	pointer
GSS_S_FAILURE	O
;	O
}	O
(	O
*	O
context_handle	pointer
)	O
->	O
mech	pointer
=	O
mech	pointer
->	O
mech	pointer
;	O
freecontext	pointer
=	O
1	pointer
;	O
}	O
maj_stat	O
=	O
mech	function
->	O
init_sec_context	pointer
(	O
minor_status	pointer
,	O
initiator_cred_handle	pointer
,	O
context_handle	pointer
,	O
target_name	pointer
,	O
mech_type	pointer
,	O
req_flags	pointer
,	O
time_req	int
,	O
input_chan_bindings	pointer
,	O
input_token	O
,	O
actual_mech_type	pointer
,	O
output_token	pointer
,	O
ret_flags	pointer
,	O
time_rec	pointer
)	O
;	O
if	O
(	O
GSS_ERROR	pointer
(	O
maj_stat	int
)	O
&&	O
freecontext	O
)	O
{	O
free	O
(	O
*	pointer
context_handle	pointer
)	O
;	O
*	O
context_handle	pointer
=	O
GSS_C_NO_CONTEXT	O
;	O
}	O
return	O
maj_stat	O
;	O
}	O
OM_uint32	O
gss_accept_sec_context	function
(	O
OM_uint32	O
*	O
minor_status	pointer
,	O
gss_ctx_id_t	O
*	O
context_handle	pointer
,	O
const	O
gss_cred_id_t	O
acceptor_cred_handle	O
,	O
const	O
gss_buffer_t	O
input_token_buffer	pointer
,	O
const	O
gss_channel_bindings_t	O
input_chan_bindings	O
,	O
gss_name_t	O
*	O
src_name	pointer
,	O
gss_OID	O
*	O
mech_type	pointer
,	O
gss_buffer_t	O
output_token	O
,	O
OM_uint32	O
*	O
ret_flags	pointer
,	O
OM_uint32	O
*	O
time_rec	pointer
,	O
gss_cred_id_t	O
*	O
delegated_cred_handle	pointer
)	O
{	O
_gss_mech_api_t	O
mech	pointer
;	O
if	O
(	O
!	pointer
context_handle	pointer
)	O
{	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
0	pointer
;	O
return	pointer
GSS_S_NO_CONTEXT	int
|	O
GSS_S_CALL_INACCESSIBLE_READ	O
;	O
}	pointer
if	O
(	O
*	pointer
context_handle	pointer
==	O
GSS_C_NO_CONTEXT	O
)	O
{	O
char	O
*	O
oid	pointer
;	O
size_t	O
oidlen	O
;	O
gss_OID_desc	O
oidbuf	O
;	O
int	O
rc	int
;	O
rc	O
=	O
_gss_decapsulate_token	function
(	O
input_token_buffer	O
->	O
value	pointer
,	O
input_token_buffer	O
->	O
length	pointer
,	O
&	pointer
oid	pointer
,	O
&	O
oidlen	pointer
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	O
!=	O
0	O
)	O
{	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
0	pointer
;	O
return	pointer
GSS_S_DEFECTIVE_TOKEN	int
;	O
}	O
oidbuf	O
.	O
elements	struct
=	O
oid	O
;	O
oidbuf	O
.	O
length	pointer
=	O
oidlen	O
;	O
mech	O
=	O
_gss_find_mech_no_default	pointer
(	O
&	pointer
oidbuf	pointer
)	O
;	O
}	O
else	O
mech	O
=	O
_gss_find_mech_no_default	function
(	O
(	pointer
*	O
context_handle	pointer
)	O
->	O
mech	pointer
)	O
;	O
if	O
(	O
mech	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
0	pointer
;	O
return	pointer
GSS_S_BAD_MECH	int
;	O
}	O
if	O
(	O
mech_type	O
)	O
*	O
mech_type	pointer
=	O
mech	pointer
->	O
mech	pointer
;	O
return	pointer
mech	O
->	O
accept_sec_context	pointer
(	O
minor_status	pointer
,	O
context_handle	pointer
,	O
acceptor_cred_handle	pointer
,	O
input_token_buffer	pointer
,	O
input_chan_bindings	pointer
,	O
src_name	O
,	O
mech_type	O
,	O
output_token	pointer
,	O
ret_flags	pointer
,	O
time_rec	pointer
,	O
delegated_cred_handle	int
)	O
;	O
}	O
OM_uint32	O
gss_delete_sec_context	O
(	O
OM_uint32	O
*	O
minor_status	pointer
,	O
gss_ctx_id_t	O
*	O
context_handle	pointer
,	O
gss_buffer_t	O
output_token	pointer
)	O
{	O
_gss_mech_api_t	O
mech	pointer
;	O
OM_uint32	O
ret	O
;	O
if	O
(	O
!	pointer
context_handle	pointer
)	O
{	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
0	pointer
;	O
return	pointer
GSS_S_NO_CONTEXT	int
|	O
GSS_S_CALL_INACCESSIBLE_READ	O
;	O
}	pointer
if	O
(	O
*	O
context_handle	pointer
==	O
GSS_C_NO_CONTEXT	O
)	O
{	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
0	pointer
;	O
return	pointer
GSS_S_NO_CONTEXT	int
|	O
GSS_S_CALL_BAD_STRUCTURE	O
;	O
}	pointer
if	O
(	O
output_token	O
!=	O
GSS_C_NO_BUFFER	O
)	O
{	O
output_token	O
->	O
length	pointer
=	O
0	O
;	O
output_token	pointer
->	O
value	pointer
=	O
NULL	O
;	O
}	pointer
mech	O
=	O
_gss_find_mech	function
(	O
(	pointer
*	O
context_handle	pointer
)	O
->	O
mech	pointer
)	O
;	O
if	O
(	O
mech	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
0	pointer
;	O
return	pointer
GSS_S_BAD_MECH	int
;	O
}	O
ret	O
=	O
mech	function
->	O
delete_sec_context	pointer
(	O
NULL	pointer
,	O
context_handle	pointer
,	O
output_token	pointer
)	O
;	O
free	O
(	O
*	pointer
context_handle	pointer
)	O
;	O
*	O
context_handle	pointer
=	O
GSS_C_NO_CONTEXT	O
;	O
return	O
ret	int
;	O
}	O
OM_uint32	O
gss_process_context_token	O
(	O
OM_uint32	pointer
*	O
minor_status	pointer
,	O
const	O
gss_ctx_id_t	O
context_handle	O
,	O
const	pointer
gss_buffer_t	O
token_buffer	pointer
)	O
{	O
return	O
GSS_S_FAILURE	int
;	O
}	O
OM_uint32	O
gss_context_time	function
(	O
OM_uint32	O
*	O
minor_status	pointer
,	O
const	O
gss_ctx_id_t	O
context_handle	O
,	O
OM_uint32	pointer
*	pointer
time_rec	pointer
)	O
{	O
_gss_mech_api_t	O
mech	pointer
;	O
if	O
(	O
context_handle	O
==	O
GSS_C_NO_CONTEXT	O
)	O
{	O
if	pointer
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
0	pointer
;	O
return	pointer
GSS_S_NO_CONTEXT	int
|	O
GSS_S_CALL_BAD_STRUCTURE	O
;	O
}	pointer
mech	O
=	O
_gss_find_mech	function
(	O
context_handle	pointer
->	O
mech	pointer
)	O
;	O
if	O
(	O
mech	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
0	pointer
;	O
return	pointer
GSS_S_BAD_MECH	int
;	O
}	O
return	O
mech	O
->	O
context_time	pointer
(	O
minor_status	pointer
,	O
context_handle	pointer
,	O
time_rec	pointer
)	O
;	O
}	O
OM_uint32	O
gss_inquire_context	function
(	O
OM_uint32	O
*	O
minor_status	pointer
,	O
const	O
gss_ctx_id_t	O
context_handle	O
,	O
gss_name_t	pointer
*	pointer
src_name	pointer
,	O
gss_name_t	O
*	O
targ_name	pointer
,	O
OM_uint32	O
*	O
lifetime_rec	pointer
,	O
gss_OID	O
*	O
mech_type	pointer
,	O
OM_uint32	O
*	O
ctx_flags	pointer
,	O
int	O
*	O
locally_initiated	pointer
,	O
int	O
*	O
open	pointer
)	O
{	O
return	O
GSS_S_FAILURE	O
;	O
}	O
OM_uint32	O
gss_wrap_size_limit	O
(	O
OM_uint32	O
*	O
minor_status	pointer
,	O
const	O
gss_ctx_id_t	O
context_handle	O
,	O
int	pointer
conf_req_flag	int
,	O
gss_qop_t	O
qop_req	O
,	O
OM_uint32	O
req_output_size	O
,	O
OM_uint32	O
*	O
max_input_size	pointer
)	O
{	O
return	O
GSS_S_FAILURE	int
;	O
}	O
OM_uint32	O
gss_export_sec_context	function
(	O
OM_uint32	O
*	O
minor_status	pointer
,	O
gss_ctx_id_t	O
*	O
context_handle	pointer
,	O
gss_buffer_t	O
interprocess_token	pointer
)	O
{	O
return	O
GSS_S_UNAVAILABLE	int
;	O
}	O
OM_uint32	O
gss_import_sec_context	function
(	O
OM_uint32	O
*	O
minor_status	pointer
,	O
const	O
gss_buffer_t	O
interprocess_token	pointer
,	O
gss_ctx_id_t	O
*	O
context_handle	pointer
)	O
{	O
return	O
GSS_S_UNAVAILABLE	int
;	O
}	O