void	O
umac64_set_key	O
(	O
struct	O
umac64_ctx	struct
*	O
ctx	pointer
,	O
const	O
uint8_t	O
*	O
key	pointer
)	O
{	O
_umac_set_key	O
(	O
ctx	pointer
->	O
l1_key	pointer
,	O
ctx	pointer
->	O
l2_key	pointer
,	O
ctx	pointer
->	O
l3_key1	pointer
,	O
ctx	pointer
->	O
l3_key2	pointer
,	O
&	pointer
ctx	pointer
->	O
pdf_key	pointer
,	O
key	O
,	O
2	pointer
)	O
;	O
memset	O
(	O
ctx	O
->	O
nonce	pointer
,	O
0	int
,	O
sizeof	int
(	O
ctx	O
->	O
nonce	pointer
)	O
)	O
;	O
ctx	O
->	O
nonce_low	pointer
=	O
0	int
;	O
ctx	pointer
->	O
nonce_length	int
=	O
sizeof	int
(	O
ctx	pointer
->	O
nonce	pointer
)	O
;	O
ctx	O
->	O
count	pointer
=	O
ctx	int
->	O
index	pointer
=	O
0	int
;	O
}	pointer
void	O
umac64_set_nonce	function
(	O
struct	O
umac64_ctx	struct
*	O
ctx	pointer
,	O
size_t	O
nonce_length	O
,	O
const	O
uint8_t	O
*	O
nonce	pointer
)	O
{	O
assert	O
(	O
nonce_length	O
>	O
0	int
)	O
;	O
assert	O
(	O
nonce_length	pointer
<=	O
AES_BLOCK_SIZE	int
)	O
;	O
memcpy	O
(	O
ctx	pointer
->	O
nonce	pointer
,	O
nonce	pointer
,	O
nonce_length	int
)	O
;	O
memset	O
(	O
ctx	pointer
->	O
nonce	int
+	O
nonce_length	int
,	O
0	int
,	O
AES_BLOCK_SIZE	int
-	O
nonce_length	int
)	O
;	O
ctx	O
->	O
nonce_low	int
=	O
ctx	int
->	O
nonce	pointer
[	O
nonce_length	int
-	O
1	int
]	O
&	O
1	pointer
;	O
ctx	O
->	O
nonce	int
[	O
nonce_length	int
-	O
1	int
]	O
&=	O
~	O
1	int
;	O
ctx	O
->	O
nonce_length	int
=	O
nonce_length	int
;	O
}	O
void	O
umac64_update	function
(	O
struct	O
umac64_ctx	struct
*	O
ctx	pointer
,	O
size_t	O
length	long
,	O
const	O
uint8_t	O
*	O
data	pointer
)	O
{	O
MD_UPDATE	O
(	O
ctx	pointer
,	O
length	pointer
,	O
data	int
,	O
UMAC64_BLOCK	int
,	O
(	int
void	O
)	O
0	O
)	O
;	O
}	O
void	O
umac64_digest	function
(	O
struct	O
umac64_ctx	struct
*	O
ctx	pointer
,	O
size_t	O
length	long
,	O
uint8_t	O
*	O
digest	pointer
)	O
{	O
uint32_t	O
tag	int
[	O
2	int
]	O
;	O
uint32_t	O
*	int
pad	pointer
;	O
assert	O
(	O
length	O
>	O
0	int
)	O
;	O
assert	O
(	O
length	O
<=	O
8	int
)	O
;	O
if	O
(	O
ctx	O
->	O
index	int
>	O
0	int
||	O
ctx	int
->	O
count	int
==	O
0	int
)	O
{	O
uint64_t	O
y	O
[	O
2	int
]	O
;	O
unsigned	O
pad	O
=	O
(	int
ctx	O
->	O
index	int
>	O
0	int
)	O
?	O
31	int
&	O
-	int
ctx	int
->	O
index	int
:	O
32	O
;	O
memset	O
(	O
ctx	O
->	O
block	int
+	O
ctx	int
->	O
index	int
,	O
0	int
,	O
pad	int
)	O
;	O
_umac_nh_n	O
(	O
y	O
,	O
2	O
,	O
ctx	int
->	O
l1_key	int
,	O
ctx	pointer
->	O
index	pointer
+	O
pad	int
,	O
ctx	int
->	O
block	int
)	O
;	O
y	O
[	O
0	int
]	O
+=	O
8	int
*	O
ctx	O
->	O
index	long
;	O
y	O
[	O
1	int
]	O
+=	O
8	int
*	O
ctx	int
->	O
index	int
;	O
_umac_l2	O
(	O
ctx	pointer
->	O
l2_key	pointer
,	O
ctx	pointer
->	O
l2_state	pointer
,	O
2	int
,	O
ctx	int
->	O
count	int
++	O
,	O
y	O
)	O
;	O
}	O
assert	O
(	O
ctx	O
->	O
count	int
>	O
0	int
)	O
;	O
if	O
(	O
!	O
(	O
ctx	O
->	O
nonce_low	int
&	O
_UMAC_NONCE_CACHED	int
)	O
)	O
{	O
aes128_encrypt	O
(	O
&	pointer
ctx	pointer
->	O
pdf_key	pointer
,	O
AES_BLOCK_SIZE	O
,	O
(	pointer
uint8_t	O
*	O
)	O
ctx	O
->	O
pad_cache	int
,	O
ctx	O
->	O
nonce	pointer
)	O
;	O
ctx	O
->	O
nonce_low	int
|=	O
_UMAC_NONCE_CACHED	int
;	O
}	pointer
pad	O
=	O
ctx	O
->	O
pad_cache	int
+	O
2	int
*	O
(	int
ctx	O
->	O
nonce_low	pointer
&	O
1	int
)	O
;	O
ctx	O
->	O
nonce_low	int
++	O
;	O
if	O
(	O
!	O
(	O
ctx	O
->	O
nonce_low	int
&	O
1	int
)	O
)	O
{	O
unsigned	O
i	O
=	O
ctx	int
->	O
nonce_length	int
-	O
1	int
;	O
ctx	int
->	O
nonce_low	int
=	O
0	int
;	O
ctx	int
->	O
nonce	int
[	O
i	int
]	O
+=	O
2	int
;	O
if	int
(	O
ctx	O
->	O
nonce	int
[	O
i	int
]	O
==	O
0	O
&&	O
i	pointer
>	O
0	int
)	O
INCREMENT	O
(	O
i	pointer
,	O
ctx	int
->	O
nonce	int
)	O
;	O
}	O
_umac_l2_final	O
(	O
ctx	pointer
->	O
l2_key	pointer
,	O
ctx	pointer
->	O
l2_state	pointer
,	O
2	int
,	O
ctx	int
->	O
count	int
)	O
;	O
tag	O
[	O
0	int
]	O
=	O
pad	O
[	O
0	int
]	O
^	O
ctx	pointer
->	O
l3_key2	pointer
[	O
0	int
]	O
^	O
_umac_l3	pointer
(	O
ctx	pointer
->	O
l3_key1	pointer
,	O
ctx	pointer
->	O
l2_state	pointer
)	O
;	O
tag	O
[	O
1	int
]	O
=	O
pad	O
[	O
1	int
]	O
^	O
ctx	pointer
->	O
l3_key2	pointer
[	O
1	int
]	O
^	O
_umac_l3	pointer
(	O
ctx	pointer
->	O
l3_key1	pointer
+	O
8	int
,	O
ctx	int
->	O
l2_state	int
+	O
2	int
)	O
;	O
memcpy	O
(	O
digest	pointer
,	O
tag	pointer
,	O
length	pointer
)	O
;	O
ctx	O
->	O
count	int
=	O
ctx	int
->	O
index	int
=	O
0	int
;	O
}	int