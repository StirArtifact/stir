extern	O
int	O
utf_mode	O
;	O
public	O
int	O
cvt_length	int
(	O
len	O
,	O
ops	O
)	O
int	O
len	int
;	O
int	O
ops	int
;	O
{	O
if	O
(	O
utf_mode	O
)	O
len	O
*=	O
4	int
;	O
return	int
(	int
len	O
+	O
1	int
)	O
;	O
}	O
public	O
int	O
*	function
cvt_alloc_chpos	function
(	O
len	O
)	O
int	O
len	int
;	O
{	O
int	O
i	int
;	O
int	O
*	int
chpos	pointer
=	O
(	O
int	O
*	O
)	O
ecalloc	O
(	O
sizeof	int
(	O
int	O
)	O
,	O
len	O
)	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	int
<	O
len	int
;	O
i	int
++	O
)	O
chpos	O
[	O
i	int
]	O
=	O
-	O
1	int
;	O
return	O
(	int
chpos	O
)	O
;	O
}	O
public	O
void	O
cvt_text	function
(	O
odst	O
,	O
osrc	pointer
,	O
chpos	pointer
,	O
lenp	O
,	O
ops	O
)	O
char	O
*	O
odst	pointer
;	O
char	O
*	O
osrc	pointer
;	O
int	O
*	int
chpos	pointer
;	O
int	O
*	int
lenp	pointer
;	O
int	O
ops	int
;	O
{	O
char	O
*	O
dst	pointer
;	O
char	O
*	O
edst	pointer
=	O
odst	O
;	O
char	O
*	O
src	pointer
;	O
char	O
*	O
src_end	pointer
;	O
LWCHAR	O
ch	O
;	O
if	O
(	O
lenp	O
!=	O
NULL	O
)	O
src_end	O
=	O
osrc	pointer
+	O
*	int
lenp	pointer
;	O
else	pointer
src_end	O
=	O
osrc	pointer
+	O
strlen	O
(	O
osrc	pointer
)	O
;	O
for	O
(	O
src	O
=	O
osrc	int
,	O
dst	pointer
=	O
odst	int
;	O
src	O
<	O
src_end	O
;	O
)	O
{	O
int	O
src_pos	int
=	O
(	O
int	O
)	O
(	O
src	O
-	O
osrc	int
)	O
;	O
int	O
dst_pos	int
=	O
(	O
int	O
)	O
(	O
dst	O
-	O
odst	int
)	O
;	O
ch	O
=	O
step_char	O
(	O
&	pointer
src	pointer
,	O
+	O
1	int
,	O
src_end	O
)	O
;	O
if	O
(	O
(	O
ops	O
&	O
CVT_BS	pointer
)	O
&&	O
ch	O
==	O
'\b'	O
&&	O
dst	O
>	O
odst	int
)	O
{	O
do	O
{	O
dst	O
--	O
;	O
}	O
while	O
(	O
dst	O
>	O
odst	int
&&	O
utf_mode	O
&&	O
!	O
IS_ASCII_OCTET	pointer
(	O
*	pointer
dst	pointer
)	O
&&	O
!	O
IS_UTF8_LEAD	O
(	O
*	pointer
dst	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
(	O
ops	O
&	O
CVT_ANSI	pointer
)	O
&&	O
IS_CSI_START	O
(	O
ch	pointer
)	O
)	O
{	O
src	O
++	O
;	O
while	O
(	O
src	O
<	O
src_end	int
)	O
if	O
(	O
!	O
is_ansi_middle	O
(	O
*	pointer
src	pointer
++	O
)	O
)	O
break	O
;	O
}	O
else	O
{	O
if	O
(	O
(	O
ops	O
&	O
CVT_TO_LC	pointer
)	O
&&	O
IS_UPPER	O
(	O
ch	pointer
)	O
)	O
ch	O
=	O
TO_LOWER	O
(	O
ch	pointer
)	O
;	O
put_wchar	O
(	O
&	pointer
dst	pointer
,	O
ch	O
)	O
;	O
if	O
(	O
chpos	O
!=	O
NULL	O
)	O
chpos	O
[	O
dst_pos	int
]	O
=	O
src_pos	pointer
;	O
}	pointer
if	O
(	O
dst	O
>	O
edst	int
)	O
edst	O
=	O
dst	pointer
;	O
}	O
if	O
(	O
(	O
ops	O
&	O
CVT_CRLF	pointer
)	O
&&	O
edst	O
>	O
odst	O
&&	O
edst	O
[	O
-	int
1	int
]	O
==	O
'\r'	O
)	O
edst	O
--	O
;	O
*	O
edst	pointer
=	O
'\0'	O
;	O
if	O
(	O
lenp	O
!=	O
NULL	O
)	O
*	O
lenp	pointer
=	O
(	O
int	O
)	O
(	O
edst	O
-	O
odst	int
)	O
;	O
}	O