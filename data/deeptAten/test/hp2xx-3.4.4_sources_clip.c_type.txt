static	O
short	O
ClipAreaCode	O
(	O
double	O
x1	O
,	O
double	O
y1	O
,	O
double	O
x2	O
,	O
double	O
y2	O
,	O
double	O
px	O
,	O
double	O
py	O
)	O
{	O
short	O
code	O
=	O
CLIP_INSIDE	O
;	O
if	O
(	O
px	O
<	O
x1	int
-	O
1.e-3	int
)	O
code	O
|=	O
CLIP_LEFT	int
;	O
else	O
if	O
(	O
px	O
>	O
x2	int
+	O
1.e-3	int
)	O
code	O
|=	O
CLIP_RIGHT	int
;	O
if	O
(	O
py	O
<	O
y1	int
-	O
1.e-3	int
)	O
code	O
|=	O
CLIP_BELOW	int
;	O
else	O
if	O
(	O
py	O
>	O
y2	int
+	O
1.e-3	int
)	O
code	O
|=	O
CLIP_ABOVE	int
;	O
return	O
code	int
;	O
}	O
static	O
int	O
ClipWithBorder	function
(	O
double	O
delta	O
,	O
double	O
diff	O
,	O
double	O
*	O
tEnter	pointer
,	O
double	O
*	O
tLeave	pointer
)	O
{	O
double	O
t	double
;	O
t	O
=	O
diff	O
/	O
delta	O
;	O
if	O
(	O
fabs	O
(	O
t	pointer
)	O
<	O
1.e-5	int
)	O
return	O
0	O
;	O
if	O
(	O
delta	O
<	O
0.0	int
)	O
{	O
if	O
(	O
t	O
>	O
*	int
tLeave	pointer
)	O
return	O
0	O
;	O
else	O
if	O
(	O
t	O
>	O
*	int
tEnter	pointer
)	O
*	O
tEnter	pointer
=	O
t	O
;	O
}	O
else	O
{	O
if	O
(	O
t	O
<	O
*	int
tEnter	pointer
)	O
return	O
0	O
;	O
else	O
if	O
(	O
t	O
<	O
*	int
tLeave	pointer
)	O
*	O
tLeave	pointer
=	O
t	O
;	O
}	O
return	O
1	int
;	O
}	O
short	O
DtClipLine	O
(	O
double	O
xmin	O
,	O
double	O
ymin	O
,	O
double	O
xmax	O
,	O
double	O
ymax	O
,	O
double	O
*	O
x1	pointer
,	O
double	O
*	O
y1	pointer
,	O
double	O
*	O
x2	pointer
,	O
double	O
*	O
y2	pointer
)	O
{	O
short	O
area_code1	O
,	O
area_code2	O
;	O
double	O
eps	double
;	O
eps	O
=	O
1.e-10	O
;	O
area_code1	O
=	O
ClipAreaCode	O
(	O
xmin	pointer
,	O
ymin	O
,	O
xmax	O
,	O
ymax	O
,	O
*	O
x1	pointer
,	O
*	O
y1	pointer
)	O
;	O
area_code2	O
=	O
ClipAreaCode	O
(	O
xmin	pointer
,	O
ymin	O
,	O
xmax	O
,	O
ymax	O
,	O
*	O
x2	pointer
,	O
*	O
y2	pointer
)	O
;	O
if	O
(	O
ClipFullyInside	O
(	O
area_code1	pointer
,	O
area_code2	pointer
)	O
)	O
return	O
CLIP_DRAW	int
;	O
if	O
(	O
ClipSurelyOutside	O
(	O
area_code1	pointer
,	O
area_code2	pointer
)	O
)	O
{	O
return	O
CLIP_NODRAW	int
;	O
}	O
else	O
{	O
double	O
dx	double
,	O
dy	O
;	O
int	O
dx0	int
,	O
dy0	O
;	O
double	O
tEnter	double
,	O
tLeave	O
;	O
double	O
*	double
tE	pointer
=	O
&	O
tEnter	struct
;	O
double	O
*	double
tL	pointer
=	O
&	O
tLeave	struct
;	O
dx	O
=	O
*	O
x2	pointer
-	O
*	O
x1	pointer
;	O
dy	O
=	O
*	O
y2	pointer
-	O
*	O
y1	pointer
;	O
tEnter	O
=	O
0.0	O
;	O
tLeave	O
=	O
1.	O
;	O
dx0	O
=	O
(	O
-	O
eps	int
<	O
dx	O
&&	O
dx	O
<	O
eps	O
)	O
;	O
dy0	O
=	O
(	O
-	O
eps	int
<	O
dy	O
&&	O
dy	O
<	O
eps	int
)	O
;	O
if	O
(	O
dx0	O
||	O
ClipWithBorder	O
(	O
-	pointer
dx	int
,	O
-	O
(	int
xmin	O
-	O
*	int
x1	O
)	O
,	O
tE	O
,	O
tL	O
)	O
)	O
if	O
(	O
dy0	O
||	O
ClipWithBorder	O
(	O
dy	pointer
,	O
(	pointer
ymax	O
-	O
*	int
y1	pointer
)	O
,	O
tE	O
,	O
tL	O
)	O
)	O
if	O
(	O
dx0	O
||	O
ClipWithBorder	O
(	O
dx	pointer
,	O
(	O
xmax	O
-	O
*	int
x1	pointer
)	O
,	O
tE	O
,	O
tL	O
)	O
)	O
if	O
(	O
dy0	O
||	O
ClipWithBorder	O
(	O
-	pointer
dy	int
,	O
-	O
(	int
ymin	O
-	O
*	int
y1	O
)	O
,	O
tE	O
,	O
tL	O
)	O
)	O
{	O
*	O
x2	pointer
=	O
*	O
x1	pointer
+	O
(	O
tLeave	O
*	O
dx	O
)	O
;	O
*	O
y2	pointer
=	O
*	O
y1	pointer
+	O
(	O
tLeave	O
*	O
dy	O
)	O
;	O
*	O
x1	pointer
=	O
*	O
x1	pointer
+	O
(	O
tEnter	O
*	O
dx	O
)	O
;	O
*	O
y1	pointer
=	O
*	O
y1	pointer
+	O
(	O
tEnter	O
*	O
dy	O
)	O
;	O
return	O
CLIP_DRAW	int
;	O
}	O
}	O
return	O
CLIP_NODRAW	O
;	O
}	O