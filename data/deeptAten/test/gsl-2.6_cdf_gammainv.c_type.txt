double	O
gsl_cdf_gamma_Pinv	function
(	O
const	O
double	O
P	double
,	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
)	O
{	O
double	O
x	double
;	O
if	O
(	O
P	O
==	O
1.0	O
)	O
{	O
return	O
GSL_POSINF	int
;	O
}	O
else	O
if	O
(	O
P	O
==	O
0.0	O
)	O
{	O
return	O
0.0	int
;	O
}	O
if	O
(	O
P	O
<	O
0.05	int
)	O
{	O
double	O
x0	double
=	O
exp	O
(	O
(	double
gsl_sf_lngamma	O
(	O
a	pointer
)	O
+	O
log	int
(	O
P	double
)	O
)	O
/	O
a	int
)	O
;	O
x	O
=	O
x0	O
;	O
}	O
else	O
if	O
(	O
P	O
>	O
0.95	int
)	O
{	O
double	O
x0	double
=	O
-	O
log1p	int
(	O
-	O
P	int
)	O
+	O
gsl_sf_lngamma	int
(	O
a	O
)	O
;	O
x	O
=	O
x0	O
;	O
}	O
else	O
{	O
double	O
xg	double
=	O
gsl_cdf_ugaussian_Pinv	O
(	O
P	O
)	O
;	O
double	O
x0	double
=	O
(	O
xg	O
<	O
-	O
0.5	int
*	O
sqrt	O
(	O
a	double
)	O
)	O
?	O
a	int
:	O
sqrt	O
(	O
a	double
)	O
*	O
xg	pointer
+	O
a	int
;	O
x	O
=	O
x0	O
;	O
}	O
{	O
double	O
lambda	double
,	O
dP	O
,	O
phi	O
;	O
unsigned	O
int	O
n	int
=	O
0	O
;	O
start	O
:	O
dP	O
=	O
P	int
-	O
gsl_cdf_gamma_P	int
(	O
x	pointer
,	O
a	O
,	O
1.0	O
)	O
;	O
phi	O
=	O
gsl_ran_gamma_pdf	O
(	O
x	pointer
,	O
a	O
,	O
1.0	O
)	O
;	O
if	O
(	O
dP	O
==	O
0.0	O
||	O
n	O
++	O
>	O
32	int
)	O
goto	O
end	O
;	O
lambda	O
=	O
dP	int
/	O
GSL_MAX	int
(	O
2	pointer
*	O
fabs	double
(	O
dP	pointer
/	O
x	O
)	O
,	O
phi	O
)	O
;	O
{	O
double	O
step0	double
=	O
lambda	O
;	O
double	O
step1	double
=	O
-	O
(	int
(	O
a	O
-	O
1	int
)	O
/	O
x	int
-	O
1	int
)	O
*	O
lambda	O
*	O
lambda	O
/	O
4.0	int
;	O
double	O
step	double
=	O
step0	O
;	O
if	O
(	O
fabs	O
(	O
step1	pointer
)	O
<	O
0.5	int
*	O
fabs	double
(	O
step0	pointer
)	O
)	O
step	O
+=	O
step1	int
;	O
if	O
(	O
x	O
+	O
step	int
>	O
0	int
)	O
x	O
+=	O
step	int
;	O
else	O
{	O
x	O
/=	O
2.0	O
;	O
}	O
if	O
(	O
fabs	O
(	O
step0	pointer
)	O
>	O
1e-10	int
*	O
x	double
||	O
fabs	O
(	O
step0	pointer
*	O
phi	double
)	O
>	O
1e-10	int
*	O
P	double
)	O
goto	O
start	O
;	O
}	O
end	O
:	O
if	O
(	O
fabs	O
(	O
dP	pointer
)	O
>	O
GSL_SQRT_DBL_EPSILON	int
*	O
P	double
)	O
{	O
GSL_ERROR_VAL	O
(	O
"inverse failed to converge"	pointer
,	O
GSL_EFAILED	int
,	O
GSL_NAN	int
)	O
;	O
}	O
return	O
b	int
*	O
x	O
;	O
}	O
}	O
double	O
gsl_cdf_gamma_Qinv	function
(	O
const	O
double	O
Q	double
,	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
)	O
{	O
double	O
x	double
;	O
if	O
(	O
Q	O
==	O
1.0	int
)	O
{	O
return	O
0.0	int
;	O
}	O
else	O
if	O
(	O
Q	O
==	O
0.0	O
)	O
{	O
return	O
GSL_POSINF	int
;	O
}	O
if	O
(	O
Q	O
<	O
0.05	int
)	O
{	O
double	O
x0	double
=	O
-	O
log	int
(	O
Q	O
)	O
+	O
gsl_sf_lngamma	int
(	O
a	O
)	O
;	O
x	O
=	O
x0	O
;	O
}	O
else	O
if	O
(	O
Q	O
>	O
0.95	int
)	O
{	O
double	O
x0	double
=	O
exp	O
(	O
(	double
gsl_sf_lngamma	O
(	O
a	pointer
)	O
+	O
log1p	int
(	O
-	int
Q	int
)	O
)	O
/	O
a	int
)	O
;	O
x	O
=	O
x0	O
;	O
}	O
else	O
{	O
double	O
xg	double
=	O
gsl_cdf_ugaussian_Qinv	O
(	O
Q	O
)	O
;	O
double	O
x0	double
=	O
(	O
xg	O
<	O
-	O
0.5	int
*	O
sqrt	O
(	O
a	double
)	O
)	O
?	O
a	int
:	O
sqrt	O
(	O
a	double
)	O
*	O
xg	pointer
+	O
a	int
;	O
x	O
=	O
x0	O
;	O
}	O
{	O
double	O
lambda	double
,	O
dQ	O
,	O
phi	O
;	O
unsigned	O
int	O
n	int
=	O
0	int
;	O
start	O
:	O
dQ	O
=	O
Q	int
-	O
gsl_cdf_gamma_Q	int
(	O
x	double
,	O
a	O
,	O
1.0	O
)	O
;	O
phi	O
=	O
gsl_ran_gamma_pdf	O
(	O
x	pointer
,	O
a	O
,	O
1.0	O
)	O
;	O
if	O
(	O
dQ	O
==	O
0.0	O
||	O
n	O
++	O
>	O
32	int
)	O
goto	O
end	O
;	O
lambda	O
=	O
-	int
dQ	int
/	O
GSL_MAX	int
(	O
2	int
*	O
fabs	O
(	O
dQ	pointer
/	O
x	O
)	O
,	O
phi	O
)	O
;	O
{	O
double	O
step0	double
=	O
lambda	O
;	O
double	O
step1	double
=	O
-	O
(	int
(	O
a	O
-	O
1	int
)	O
/	O
x	int
-	O
1	int
)	O
*	O
lambda	O
*	O
lambda	O
/	O
4.0	int
;	O
double	O
step	double
=	O
step0	O
;	O
if	O
(	O
fabs	O
(	O
step1	pointer
)	O
<	O
0.5	int
*	O
fabs	double
(	O
step0	pointer
)	O
)	O
step	O
+=	O
step1	int
;	O
if	O
(	O
x	O
+	O
step	int
>	O
0	int
)	O
x	O
+=	O
step	int
;	O
else	O
{	O
x	O
/=	O
2.0	O
;	O
}	O
if	O
(	O
fabs	O
(	O
step0	pointer
)	O
>	O
1e-10	int
*	O
x	double
)	O
goto	O
start	O
;	O
}	O
}	O
end	O
:	O
return	O
b	O
*	O
x	O
;	O
}	O