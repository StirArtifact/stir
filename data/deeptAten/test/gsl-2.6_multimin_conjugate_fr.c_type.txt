typedef	O
struct	O
{	struct
int	O
iter	int
;	O
double	O
step	array
;	O
double	O
max_step	array
;	O
double	O
tol	double
;	O
gsl_vector	O
*	O
x1	pointer
;	O
gsl_vector	O
*	O
dx1	pointer
;	O
gsl_vector	O
*	O
x2	pointer
;	O
double	O
pnorm	double
;	O
gsl_vector	O
*	O
p	pointer
;	O
double	O
g0norm	double
;	O
gsl_vector	O
*	O
g0	double
;	O
}	O
conjugate_fr_state_t	O
;	O
static	O
int	O
conjugate_fr_alloc	function
(	O
void	O
*	O
vstate	pointer
,	O
size_t	O
n	O
)	O
{	O
conjugate_fr_state_t	O
*	O
state	pointer
=	O
(	O
conjugate_fr_state_t	O
*	O
)	O
vstate	pointer
;	O
state	O
->	O
x1	pointer
=	O
gsl_vector_calloc	O
(	O
n	int
)	O
;	O
if	O
(	O
state	pointer
->	O
x1	pointer
==	O
0	O
)	O
{	O
GSL_ERROR	O
(	O
"failed to allocate space for x1"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	O
->	O
dx1	pointer
=	O
gsl_vector_calloc	O
(	O
n	int
)	O
;	O
if	O
(	O
state	pointer
->	O
dx1	pointer
==	O
0	O
)	O
{	O
gsl_vector_free	O
(	O
state	pointer
->	O
x1	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for dx1"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	O
->	O
x2	pointer
=	O
gsl_vector_calloc	O
(	O
n	int
)	O
;	O
if	O
(	O
state	pointer
->	O
x2	pointer
==	O
0	int
)	O
{	O
gsl_vector_free	O
(	O
state	pointer
->	O
dx1	pointer
)	O
;	O
gsl_vector_free	O
(	O
state	pointer
->	O
x1	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for x2"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	O
->	O
p	pointer
=	O
gsl_vector_calloc	O
(	O
n	int
)	O
;	O
if	O
(	O
state	pointer
->	O
p	pointer
==	O
0	O
)	O
{	O
gsl_vector_free	O
(	O
state	pointer
->	O
x2	pointer
)	O
;	O
gsl_vector_free	O
(	O
state	pointer
->	O
dx1	pointer
)	O
;	O
gsl_vector_free	O
(	O
state	pointer
->	O
x1	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for p"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	O
->	O
g0	pointer
=	O
gsl_vector_calloc	O
(	O
n	int
)	O
;	O
if	O
(	O
state	pointer
->	O
g0	pointer
==	O
0	O
)	O
{	O
gsl_vector_free	O
(	O
state	pointer
->	O
p	pointer
)	O
;	O
gsl_vector_free	O
(	O
state	pointer
->	O
x2	pointer
)	O
;	O
gsl_vector_free	O
(	O
state	pointer
->	O
dx1	pointer
)	O
;	O
gsl_vector_free	O
(	O
state	pointer
->	O
x1	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for g0"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
return	O
GSL_SUCCESS	O
;	O
}	O
static	O
int	O
conjugate_fr_set	function
(	O
void	O
*	O
vstate	pointer
,	O
gsl_multimin_function_fdf	O
*	O
fdf	pointer
,	O
const	O
gsl_vector	O
*	O
x	pointer
,	O
double	O
*	O
f	pointer
,	O
gsl_vector	O
*	O
gradient	pointer
,	O
double	O
step_size	O
,	O
double	O
tol	O
)	O
{	O
conjugate_fr_state_t	O
*	O
state	pointer
=	O
(	O
conjugate_fr_state_t	O
*	O
)	O
vstate	pointer
;	O
state	O
->	O
iter	pointer
=	O
0	int
;	O
state	O
->	O
step	pointer
=	O
step_size	int
;	O
state	pointer
->	O
max_step	pointer
=	O
step_size	O
;	O
state	pointer
->	O
tol	pointer
=	O
tol	int
;	O
GSL_MULTIMIN_FN_EVAL_F_DF	pointer
(	O
fdf	pointer
,	O
x	pointer
,	O
f	pointer
,	O
gradient	int
)	O
;	O
gsl_vector_memcpy	O
(	O
state	pointer
->	O
p	pointer
,	O
gradient	pointer
)	O
;	O
gsl_vector_memcpy	O
(	O
state	pointer
->	O
g0	pointer
,	O
gradient	pointer
)	O
;	O
{	O
double	O
gnorm	double
=	O
gsl_blas_dnrm2	pointer
(	O
gradient	O
)	O
;	O
state	O
->	O
pnorm	pointer
=	O
gnorm	O
;	O
state	pointer
->	O
g0norm	pointer
=	O
gnorm	O
;	O
}	pointer
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
void	O
conjugate_fr_free	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
conjugate_fr_state_t	O
*	O
state	pointer
=	O
(	O
conjugate_fr_state_t	O
*	O
)	O
vstate	pointer
;	O
gsl_vector_free	O
(	O
state	pointer
->	O
g0	pointer
)	O
;	O
gsl_vector_free	O
(	O
state	pointer
->	O
p	pointer
)	O
;	O
gsl_vector_free	O
(	O
state	pointer
->	O
x2	pointer
)	O
;	O
gsl_vector_free	O
(	O
state	pointer
->	O
dx1	pointer
)	O
;	O
gsl_vector_free	O
(	O
state	pointer
->	O
x1	pointer
)	O
;	O
}	O
static	O
int	O
conjugate_fr_restart	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
conjugate_fr_state_t	O
*	O
state	pointer
=	O
(	O
conjugate_fr_state_t	O
*	O
)	O
vstate	pointer
;	O
state	O
->	O
iter	pointer
=	O
0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
conjugate_fr_iterate	function
(	O
void	O
*	O
vstate	pointer
,	O
gsl_multimin_function_fdf	O
*	O
fdf	pointer
,	O
gsl_vector	O
*	O
x	pointer
,	O
double	O
*	O
f	pointer
,	O
gsl_vector	O
*	O
gradient	pointer
,	O
gsl_vector	O
*	O
dx	pointer
)	O
{	O
conjugate_fr_state_t	O
*	O
state	pointer
=	O
(	O
conjugate_fr_state_t	O
*	O
)	O
vstate	pointer
;	O
gsl_vector	O
*	O
x1	pointer
=	O
state	O
->	O
x1	pointer
;	O
gsl_vector	O
*	O
dx1	pointer
=	O
state	O
->	O
dx1	pointer
;	O
gsl_vector	O
*	O
x2	pointer
=	O
state	int
->	O
x2	pointer
;	O
gsl_vector	O
*	O
p	pointer
=	O
state	int
->	O
p	pointer
;	O
gsl_vector	O
*	O
g0	pointer
=	O
state	O
->	O
g0	pointer
;	O
double	pointer
pnorm	O
=	O
state	pointer
->	O
pnorm	pointer
;	O
double	O
g0norm	O
=	O
state	O
->	O
g0norm	pointer
;	O
double	O
fa	O
=	O
*	O
f	pointer
,	O
fb	O
,	O
fc	O
;	O
double	O
dir	O
;	O
double	O
stepa	double
=	O
0.0	int
,	O
stepb	O
,	O
stepc	int
=	O
state	int
->	O
step	double
,	O
tol	int
=	O
state	int
->	O
tol	double
;	O
double	O
g1norm	O
;	O
double	O
pg	O
;	O
if	O
(	O
pnorm	O
==	O
0.0	O
||	O
g0norm	int
==	O
0.0	int
)	O
{	O
gsl_vector_set_zero	O
(	O
dx	pointer
)	O
;	O
return	O
GSL_ENOPROG	int
;	O
}	O
gsl_blas_ddot	O
(	O
p	O
,	O
gradient	int
,	O
&	int
pg	pointer
)	O
;	O
dir	O
=	O
(	function
pg	O
>=	O
0.0	int
)	O
?	O
+	O
1.0	O
:	O
-	O
1.0	int
;	O
take_step	O
(	O
x	int
,	O
p	O
,	O
stepc	int
,	O
dir	int
/	O
pnorm	int
,	O
x1	int
,	O
dx	O
)	O
;	O
fc	O
=	O
GSL_MULTIMIN_FN_EVAL_F	int
(	O
fdf	pointer
,	O
x1	pointer
)	O
;	O
if	O
(	O
fc	int
<	O
fa	int
)	O
{	O
state	O
->	O
step	double
=	O
stepc	int
*	O
2.0	O
;	O
*	int
f	pointer
=	O
fc	O
;	O
gsl_vector_memcpy	O
(	O
x	pointer
,	O
x1	O
)	O
;	O
GSL_MULTIMIN_FN_EVAL_DF	O
(	O
fdf	O
,	O
x1	pointer
,	O
gradient	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
intermediate_point	O
(	O
fdf	O
,	O
x	pointer
,	O
p	O
,	O
dir	int
/	O
pnorm	int
,	O
pg	int
,	O
stepa	int
,	O
stepc	int
,	O
fa	int
,	O
fc	int
,	O
x1	int
,	O
dx1	int
,	O
gradient	O
,	O
&	O
stepb	struct
,	O
&	O
fb	struct
)	O
;	O
if	O
(	O
stepb	int
==	O
0.0	int
)	O
{	O
return	O
GSL_ENOPROG	int
;	O
}	O
minimize	O
(	O
fdf	O
,	O
x	pointer
,	O
p	O
,	O
dir	int
/	O
pnorm	int
,	O
stepa	int
,	O
stepb	int
,	O
stepc	int
,	O
fa	int
,	O
fb	int
,	O
fc	int
,	O
tol	int
,	O
x1	int
,	O
dx1	int
,	O
x2	O
,	O
dx	int
,	O
gradient	int
,	O
&	int
(	struct
state	O
->	O
step	O
)	O
,	O
f	O
,	O
&	int
g1norm	struct
)	O
;	O
gsl_vector_memcpy	O
(	O
x	O
,	O
x2	O
)	O
;	O
state	O
->	O
iter	int
=	O
(	int
state	O
->	O
iter	pointer
+	O
1	int
)	O
%	O
x	int
->	O
size	pointer
;	O
if	O
(	O
state	pointer
->	O
iter	int
==	O
0	int
)	O
{	O
gsl_vector_memcpy	O
(	O
p	pointer
,	O
gradient	O
)	O
;	O
state	O
->	O
pnorm	int
=	O
g1norm	O
;	O
}	O
else	O
{	O
double	O
beta	double
=	O
-	O
pow	int
(	O
g1norm	O
/	O
g0norm	O
,	O
2.0	O
)	O
;	O
gsl_blas_dscal	O
(	O
-	int
beta	int
,	O
p	int
)	O
;	O
gsl_blas_daxpy	O
(	O
1.0	int
,	O
gradient	int
,	O
p	int
)	O
;	O
state	O
->	O
pnorm	int
=	O
gsl_blas_dnrm2	O
(	O
p	pointer
)	O
;	O
}	O
state	O
->	O
g0norm	pointer
=	O
g1norm	O
;	O
gsl_vector_memcpy	O
(	O
g0	O
,	O
gradient	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
const	O
gsl_multimin_fdfminimizer_type	O
conjugate_fr_type	O
=	O
{	O
"conjugate_fr"	O
,	O
sizeof	O
(	O
conjugate_fr_state_t	O
)	O
,	O
&	O
conjugate_fr_alloc	pointer
,	O
&	O
conjugate_fr_set	struct
,	O
&	O
conjugate_fr_iterate	struct
,	O
&	O
conjugate_fr_restart	struct
,	O
&	O
conjugate_fr_free	struct
}	O
;	O
const	O
gsl_multimin_fdfminimizer_type	O
*	O
gsl_multimin_fdfminimizer_conjugate_fr	pointer
=	O
&	O
conjugate_fr_type	pointer
;	O