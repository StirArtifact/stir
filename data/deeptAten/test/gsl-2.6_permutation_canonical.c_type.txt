int	O
gsl_permutation_linear_to_canonical	O
(	O
gsl_permutation	O
*	O
q	pointer
,	O
const	O
gsl_permutation	O
*	O
p	pointer
)	O
{	O
const	O
size_t	O
n	long
=	O
p	int
->	O
size	long
;	O
size_t	O
i	long
,	O
k	long
,	O
s	long
;	O
size_t	long
t	long
=	O
n	int
;	O
const	long
size_t	O
*	long
const	pointer
pp	O
=	O
p	int
->	O
data	long
;	O
size_t	long
*	long
const	pointer
qq	O
=	O
q	pointer
->	O
data	long
;	O
if	long
(	O
q	long
->	O
size	long
!=	O
p	O
->	O
size	long
)	O
{	O
GSL_ERROR	pointer
(	O
"size of q does not match size of p"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	int
++	O
)	O
{	O
k	O
=	O
pp	int
[	O
i	int
]	O
;	O
s	pointer
=	O
1	int
;	O
while	long
(	O
k	long
>	O
i	int
)	O
{	O
k	O
=	O
pp	int
[	O
k	int
]	O
;	O
s	pointer
++	O
;	O
}	O
if	O
(	O
k	O
<	O
i	int
)	O
continue	O
;	O
t	long
-=	O
s	int
;	O
qq	long
[	O
t	int
]	O
=	O
i	pointer
;	O
k	long
=	O
pp	int
[	O
i	int
]	O
;	O
s	pointer
=	O
1	int
;	O
while	long
(	O
k	long
>	O
i	int
)	O
{	O
qq	O
[	O
t	int
+	O
s	int
]	O
=	O
k	pointer
;	O
k	long
=	O
pp	int
[	O
k	int
]	O
;	O
s	pointer
++	O
;	O
}	O
if	O
(	O
t	O
==	O
0	int
)	O
break	O
;	O
}	O
return	O
GSL_SUCCESS	O
;	O
}	O
int	O
gsl_permutation_canonical_to_linear	function
(	O
gsl_permutation	O
*	O
p	int
,	O
const	O
gsl_permutation	O
*	O
q	pointer
)	O
{	O
size_t	O
i	long
,	O
k	long
,	O
kk	long
,	O
first	long
;	O
const	long
size_t	O
n	long
=	O
p	int
->	O
size	long
;	O
size_t	long
*	long
const	pointer
pp	O
=	O
p	int
->	O
data	long
;	O
const	long
size_t	O
*	long
const	pointer
qq	O
=	O
q	pointer
->	O
data	long
;	O
if	long
(	O
q	long
->	O
size	long
!=	O
p	O
->	O
size	long
)	O
{	O
GSL_ERROR	pointer
(	O
"size of q does not match size of p"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
pp	O
[	O
i	int
]	O
=	O
i	int
;	O
}	long
k	O
=	O
qq	int
[	O
0	int
]	O
;	O
first	O
=	O
pp	int
[	O
k	int
]	O
;	O
for	pointer
(	O
i	long
=	O
1	int
;	O
i	long
<	O
n	int
;	O
i	int
++	O
)	O
{	O
kk	O
=	O
qq	int
[	O
i	int
]	O
;	O
if	O
(	O
kk	long
>	O
first	int
)	O
{	O
pp	O
[	O
k	int
]	O
=	O
pp	pointer
[	O
kk	int
]	O
;	O
k	pointer
=	O
kk	int
;	O
}	long
else	O
{	O
pp	O
[	O
k	int
]	O
=	O
first	int
;	O
k	long
=	O
kk	int
;	O
first	long
=	O
pp	int
[	O
kk	int
]	O
;	O
}	pointer
}	O
pp	O
[	O
k	int
]	O
=	O
first	int
;	O
return	long
GSL_SUCCESS	int
;	O
}	O
size_t	O
gsl_permutation_inversions	long
(	O
const	O
gsl_permutation	O
*	O
p	pointer
)	O
{	O
size_t	O
count	long
=	O
0	int
;	O
size_t	long
i	long
,	O
j	long
;	O
const	long
size_t	O
size	long
=	O
p	int
->	O
size	long
;	O
for	long
(	O
i	long
=	O
0	int
;	O
i	long
<	O
size	int
-	O
1	int
;	O
i	long
++	O
)	O
{	O
for	O
(	O
j	long
=	O
i	int
+	O
1	int
;	O
j	long
<	O
size	int
;	O
j	long
++	O
)	O
{	O
if	O
(	O
p	long
->	O
data	long
[	O
i	int
]	O
>	O
p	O
->	O
data	long
[	O
j	int
]	O
)	O
{	O
count	pointer
++	O
;	O
}	O
}	O
}	O
return	O
count	O
;	O
}	O
size_t	O
gsl_permutation_linear_cycles	long
(	O
const	O
gsl_permutation	O
*	O
p	pointer
)	O
{	O
size_t	O
i	long
,	O
k	long
;	O
size_t	long
count	long
=	O
0	int
;	O
const	long
size_t	O
size	long
=	O
p	int
->	O
size	long
;	O
for	long
(	O
i	long
=	O
0	int
;	O
i	long
<	O
size	int
;	O
i	long
++	O
)	O
{	O
k	O
=	O
p	int
->	O
data	long
[	O
i	int
]	O
;	O
while	pointer
(	O
k	long
>	O
i	int
)	O
{	O
k	O
=	O
p	int
->	O
data	long
[	O
k	int
]	O
;	O
}	pointer
if	O
(	O
k	long
<	O
i	int
)	O
continue	O
;	O
count	long
++	O
;	O
}	O
return	O
count	O
;	O
}	O
size_t	O
gsl_permutation_canonical_cycles	long
(	O
const	O
gsl_permutation	O
*	O
p	pointer
)	O
{	O
size_t	O
i	long
;	O
size_t	O
count	long
=	O
1	int
;	O
size_t	long
min	long
=	O
p	int
->	O
data	long
[	O
0	long
]	O
;	O
for	pointer
(	O
i	long
=	O
0	int
;	O
i	long
<	O
p	int
->	O
size	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
p	long
->	O
data	long
[	O
i	int
]	O
<	O
min	O
)	O
{	O
min	pointer
=	O
p	pointer
->	O
data	long
[	O
i	int
]	O
;	O
count	pointer
++	O
;	O
}	O
}	O
return	O
count	O
;	O
}	O