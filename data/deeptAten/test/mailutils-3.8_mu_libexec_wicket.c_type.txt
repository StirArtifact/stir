char	O
wicket_docstring	O
[	O
]	O
=	O
N_	O
(	O
"scan wickets for matching URLs"	pointer
)	O
;	O
static	O
char	O
wicket_args_doc	O
[	O
]	O
=	O
N_	O
(	O
"URL"	pointer
)	O
;	O
static	O
char	O
*	O
wicket_file	pointer
=	O
"~/.mu-tickets"	O
;	O
static	O
int	O
wicket_verbose	int
=	O
1	O
;	O
static	O
void	O
clear_wicket_verbose	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
wicket_verbose	O
=	O
0	pointer
;	O
}	O
static	O
struct	O
mu_option	struct
wicket_options	O
[	O
]	O
=	O
{	O
{	pointer
"file"	pointer
,	O
'f'	pointer
,	O
N_	pointer
(	O
"FILE"	pointer
)	O
,	O
MU_OPTION_DEFAULT	O
,	O
N_	O
(	O
"use FILE instead of ~/.mu-tickets"	pointer
)	O
,	O
mu_c_string	O
,	O
&	O
wicket_file	pointer
}	O
,	O
{	O
"verbose"	O
,	O
'v'	int
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"increase output verbosity"	pointer
)	O
,	O
mu_c_string	O
,	O
&	O
wicket_verbose	pointer
}	O
,	O
{	O
"quiet"	O
,	O
'q'	O
,	O
NULL	pointer
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"suppress any output"	pointer
)	O
,	O
mu_c_string	O
,	O
NULL	O
,	O
clear_wicket_verbose	int
}	O
,	O
{	O
NULL	pointer
}	O
}	O
;	O
static	O
int	O
wicket_match	function
(	O
mu_stream_t	O
stream	O
,	O
const	O
char	O
*	O
str	pointer
)	O
{	O
int	O
rc	int
,	O
ret	O
;	O
mu_url_t	O
u	pointer
,	O
url	pointer
;	O
struct	O
mu_locus_point	struct
loc	O
;	O
int	O
flags	int
=	O
MU_URL_PARSE_ALL	int
;	O
if	O
(	O
wicket_verbose	O
>	O
2	int
)	O
flags	O
&=	O
~	O
MU_URL_PARSE_HIDEPASS	int
;	O
rc	O
=	O
mu_url_create	int
(	O
&	pointer
u	pointer
,	O
str	O
)	O
;	O
if	O
(	O
rc	O
)	O
{	O
mu_diag_funcall	O
(	O
MU_DIAG_ERROR	O
,	O
"mu_url_create"	pointer
,	O
str	pointer
,	O
rc	int
)	O
;	O
return	O
2	int
;	O
}	O
rc	O
=	O
mu_stream_seek	function
(	O
stream	pointer
,	O
0	O
,	O
MU_SEEK_SET	int
,	O
NULL	int
)	O
;	O
if	O
(	O
rc	O
)	O
{	O
mu_diag_funcall	O
(	O
MU_DIAG_ERROR	O
,	O
"mu_stream_seek"	pointer
,	O
"0"	pointer
,	O
rc	int
)	O
;	O
return	O
2	int
;	O
}	O
loc	O
.	O
mu_file	int
=	O
wicket_file	O
;	O
loc	O
.	O
mu_line	int
=	O
0	int
;	O
rc	int
=	O
mu_wicket_stream_match_url	int
(	O
stream	pointer
,	O
&	O
loc	pointer
,	O
u	O
,	O
flags	pointer
,	O
&	int
url	pointer
)	O
;	O
switch	O
(	O
rc	O
)	O
{	O
case	O
0	O
:	O
ret	O
=	O
0	int
;	O
if	int
(	O
wicket_verbose	O
)	O
{	O
mu_printf	O
(	O
"%s: %s:%d"	pointer
,	O
str	pointer
,	O
loc	int
.	O
mu_file	int
,	O
loc	pointer
.	O
mu_line	int
)	O
;	O
if	O
(	O
wicket_verbose	int
>	O
1	int
)	O
mu_printf	O
(	O
": %s"	pointer
,	O
mu_url_to_string	pointer
(	O
url	pointer
)	O
)	O
;	O
mu_printf	O
(	O
"\n"	pointer
)	O
;	O
}	O
break	O
;	O
case	O
MU_ERR_NOENT	O
:	O
if	O
(	O
wicket_verbose	O
)	O
mu_printf	O
(	O
"%s: %s\n"	pointer
,	O
str	pointer
,	O
_	pointer
(	O
"not found"	pointer
)	O
)	O
;	O
ret	O
=	O
1	O
;	O
break	O
;	O
default	O
:	O
mu_diag_funcall	O
(	O
MU_DIAG_ERROR	O
,	O
"mu_wicket_stream_match_url"	pointer
,	O
str	pointer
,	O
rc	int
)	O
;	O
ret	O
=	O
2	int
;	O
}	O
return	O
ret	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	pointer
argv	pointer
)	O
{	O
mu_stream_t	O
stream	pointer
;	O
int	O
rc	int
,	O
i	int
,	O
exit_code	int
;	O
mu_action_getopt	O
(	O
&	O
argc	pointer
,	O
&	O
argv	pointer
,	O
wicket_options	O
,	O
wicket_docstring	int
,	O
wicket_args_doc	int
)	O
;	O
if	O
(	O
argc	O
==	O
0	O
)	O
{	O
mu_error	O
(	O
_	pointer
(	O
"not enough arguments"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
wicket_file	O
=	O
mu_tilde_expansion	function
(	O
wicket_file	pointer
,	O
MU_HIERARCHY_DELIMITER	pointer
,	O
NULL	pointer
)	O
;	O
if	O
(	O
!	int
wicket_file	pointer
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_tilde_expansion"	pointer
,	O
wicket_file	pointer
,	O
ENOMEM	pointer
)	O
;	O
return	O
2	int
;	O
}	O
rc	O
=	O
mu_file_stream_create	function
(	O
&	pointer
stream	pointer
,	O
wicket_file	O
,	O
MU_STREAM_READ	int
)	O
;	O
if	O
(	O
rc	O
)	O
{	O
mu_error	O
(	O
_	pointer
(	O
"cannot open input file %s: %s"	pointer
)	O
,	O
wicket_file	pointer
,	O
mu_strerror	pointer
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
exit_code	O
=	O
0	function
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
rc	O
=	O
wicket_match	int
(	O
stream	pointer
,	O
argv	O
[	O
i	int
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
exit_code	int
<	O
rc	int
)	O
exit_code	O
=	O
rc	int
;	O
if	O
(	O
!	O
wicket_verbose	O
)	O
break	O
;	O
}	O
}	O
mu_stream_destroy	O
(	O
&	O
stream	struct
)	O
;	O
return	O
exit_code	int
;	O
}	O