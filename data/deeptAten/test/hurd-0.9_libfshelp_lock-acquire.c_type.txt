error_t	O
fshelp_acquire_lock	O
(	O
struct	O
lock_box	struct
*	O
box	pointer
,	O
int	O
*	int
user	pointer
,	O
pthread_mutex_t	O
*	O
mut	pointer
,	O
int	O
flags	O
)	O
{	O
int	O
atomic	int
=	O
0	int
;	O
if	O
(	O
!	O
(	pointer
flags	O
&	O
(	int
LOCK_UN	O
|	O
LOCK_EX	O
|	O
LOCK_SH	O
)	O
)	O
)	O
return	O
0	int
;	O
if	O
(	O
(	O
flags	O
&	O
LOCK_UN	int
)	O
&&	O
(	O
flags	O
&	O
(	int
LOCK_SH	O
|	O
LOCK_EX	O
)	O
)	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
flags	O
&	O
__LOCK_ATOMIC	int
)	O
{	O
atomic	O
=	O
1	int
;	O
flags	O
&=	O
~	O
__LOCK_ATOMIC	O
;	O
}	O
if	O
(	O
flags	O
&	O
LOCK_EX	int
)	O
flags	O
&=	O
~	O
LOCK_SH	int
;	O
if	O
(	O
flags	O
&	O
LOCK_UN	int
)	O
{	O
if	O
(	O
*	O
user	pointer
&	O
LOCK_UN	pointer
)	O
return	O
0	O
;	O
assert	O
(	O
*	O
user	pointer
==	O
box	O
->	O
type	int
||	O
(	O
*	O
user	pointer
==	O
LOCK_SH	O
&&	O
box	O
->	O
type	pointer
==	O
(	int
LOCK_SH	int
|	O
LOCK_EX	O
)	O
)	O
)	O
;	O
assert	O
(	O
*	O
user	pointer
==	O
LOCK_SH	O
||	O
*	O
user	pointer
==	O
LOCK_EX	O
||	O
*	O
user	pointer
==	O
(	O
LOCK_SH	O
|	O
LOCK_EX	O
)	O
)	O
;	O
if	O
(	O
*	O
user	pointer
==	O
LOCK_SH	O
)	O
{	O
if	O
(	O
!	int
--	O
box	O
->	O
shcount	pointer
)	O
box	O
->	O
type	pointer
=	O
LOCK_UN	int
;	O
}	pointer
else	O
if	O
(	O
*	O
user	pointer
==	O
LOCK_EX	O
)	O
box	O
->	O
type	pointer
=	O
LOCK_UN	int
;	O
if	pointer
(	O
box	O
->	O
type	pointer
==	O
LOCK_UN	int
&&	O
box	pointer
->	O
waiting	pointer
)	O
{	O
box	O
->	O
waiting	pointer
=	O
0	int
;	O
pthread_cond_broadcast	pointer
(	O
&	pointer
box	pointer
->	O
wait	pointer
)	O
;	O
}	O
if	O
(	O
box	O
->	O
type	pointer
==	O
(	int
LOCK_SH	pointer
|	O
LOCK_EX	O
)	O
&&	O
box	O
->	O
shcount	pointer
==	O
1	O
&&	O
box	pointer
->	O
waiting	pointer
)	O
{	O
box	O
->	O
waiting	pointer
=	O
0	int
;	O
pthread_cond_broadcast	pointer
(	O
&	pointer
box	pointer
->	O
wait	pointer
)	O
;	O
}	O
*	O
user	function
=	O
LOCK_UN	O
;	O
}	O
else	O
{	O
if	O
(	O
atomic	O
&&	O
*	pointer
user	pointer
==	O
(	O
flags	O
&	O
(	int
LOCK_SH	O
|	O
LOCK_EX	O
)	O
)	O
)	O
return	O
0	int
;	O
if	O
(	O
atomic	O
&&	O
*	O
user	pointer
==	O
LOCK_EX	O
&&	O
flags	O
&	O
LOCK_SH	int
)	O
{	O
*	O
user	pointer
=	O
LOCK_SH	O
;	O
box	O
->	O
type	pointer
=	O
LOCK_SH	int
;	O
box	pointer
->	O
shcount	pointer
=	O
1	int
;	O
if	pointer
(	O
box	O
->	O
waiting	pointer
)	O
{	O
box	O
->	O
waiting	pointer
=	O
0	int
;	O
pthread_cond_broadcast	pointer
(	O
&	pointer
box	pointer
->	O
wait	pointer
)	O
;	O
}	O
return	O
0	O
;	O
}	O
if	O
(	O
*	O
user	pointer
==	O
LOCK_SH	O
&&	O
atomic	O
&&	O
box	O
->	O
type	pointer
==	O
(	int
LOCK_SH	pointer
|	O
LOCK_EX	O
)	O
)	O
return	O
EDEADLK	int
;	O
if	O
(	O
*	O
user	pointer
==	O
LOCK_EX	O
&&	O
!	pointer
atomic	O
)	O
{	O
*	O
user	pointer
=	O
LOCK_UN	O
;	O
box	O
->	O
type	pointer
=	O
LOCK_UN	int
;	O
if	pointer
(	O
box	O
->	O
waiting	pointer
)	O
{	O
box	O
->	O
waiting	pointer
=	O
0	int
;	O
pthread_cond_broadcast	pointer
(	O
&	pointer
box	pointer
->	O
wait	pointer
)	O
;	O
}	O
}	O
if	O
(	O
*	O
user	pointer
==	O
LOCK_SH	O
&&	O
!	O
atomic	pointer
)	O
{	O
*	O
user	pointer
=	O
LOCK_UN	O
;	O
if	O
(	O
!	O
--	O
box	O
->	O
shcount	pointer
)	O
{	O
box	O
->	O
type	pointer
=	O
LOCK_UN	int
;	O
if	pointer
(	O
box	pointer
->	O
waiting	pointer
)	O
{	O
box	O
->	O
waiting	pointer
=	O
0	int
;	O
pthread_cond_broadcast	pointer
(	O
&	pointer
box	pointer
->	O
wait	pointer
)	O
;	O
}	O
}	O
if	O
(	O
box	O
->	O
type	pointer
==	O
(	int
LOCK_SH	pointer
|	O
LOCK_EX	O
)	O
&&	O
box	O
->	O
shcount	pointer
==	O
1	O
&&	O
box	pointer
->	O
waiting	pointer
)	O
{	O
box	O
->	O
waiting	pointer
=	O
0	int
;	O
pthread_cond_broadcast	pointer
(	O
&	pointer
box	pointer
->	O
wait	pointer
)	O
;	O
}	O
}	O
while	O
(	O
box	O
->	O
type	pointer
&	O
LOCK_EX	int
)	O
{	O
if	O
(	O
flags	int
&	O
LOCK_NB	int
)	O
return	O
EWOULDBLOCK	O
;	O
box	O
->	O
waiting	pointer
=	O
1	int
;	O
if	pointer
(	O
pthread_hurd_cond_wait_np	O
(	O
&	pointer
box	pointer
->	O
wait	pointer
,	O
mut	pointer
)	O
)	O
return	O
EINTR	int
;	O
}	O
assert	O
(	O
(	O
flags	O
&	O
LOCK_SH	int
)	O
||	O
(	O
flags	O
&	O
LOCK_EX	int
)	O
)	O
;	O
if	O
(	O
flags	O
&	O
LOCK_SH	int
)	O
{	O
assert	O
(	O
!	int
(	O
box	O
->	O
type	pointer
&	O
LOCK_EX	int
)	O
)	O
;	O
*	O
user	pointer
=	O
LOCK_SH	O
;	O
box	O
->	O
type	pointer
=	O
LOCK_SH	int
;	O
box	pointer
->	O
shcount	pointer
++	O
;	O
}	O
else	O
if	O
(	O
flags	O
&	O
LOCK_EX	int
)	O
{	O
while	O
(	O
(	int
*	O
user	pointer
==	O
LOCK_SH	O
&&	O
box	O
->	O
shcount	pointer
>	O
1	int
)	O
||	O
(	O
*	O
user	pointer
==	O
LOCK_UN	O
&&	O
box	O
->	O
type	pointer
!=	O
LOCK_UN	int
)	O
)	O
{	O
if	O
(	O
flags	int
&	O
LOCK_NB	int
)	O
return	O
EWOULDBLOCK	O
;	O
else	O
{	O
if	O
(	O
*	O
user	pointer
==	O
LOCK_SH	O
&&	O
atomic	pointer
)	O
box	O
->	O
type	pointer
=	O
LOCK_SH	int
|	O
LOCK_EX	int
;	O
box	pointer
->	O
waiting	pointer
=	O
1	int
;	O
if	pointer
(	O
pthread_hurd_cond_wait_np	O
(	O
&	pointer
box	pointer
->	O
wait	pointer
,	O
mut	pointer
)	O
)	O
return	O
EINTR	int
;	O
}	O
}	O
if	O
(	O
*	O
user	pointer
==	O
LOCK_SH	O
)	O
{	O
assert	O
(	O
box	int
->	O
shcount	pointer
==	O
1	int
)	O
;	O
box	O
->	O
shcount	pointer
=	O
0	int
;	O
}	pointer
box	O
->	O
type	pointer
=	O
LOCK_EX	int
;	O
*	O
user	pointer
=	O
LOCK_EX	O
;	O
}	O
}	O
return	O
0	O
;	O
}	O