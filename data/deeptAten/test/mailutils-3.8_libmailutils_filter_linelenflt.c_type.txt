struct	O
_mu_linelen_filter	O
{	O
size_t	O
max_len	long
;	O
size_t	O
cur_len	long
;	O
}	O
;	O
static	O
enum	O
mu_filter_result	O
_ll_encoder	O
(	O
void	O
*	O
xd	pointer
,	O
enum	O
mu_filter_command	O
cmd	O
,	O
struct	O
mu_filter_io	struct
*	O
iobuf	pointer
)	O
{	O
struct	O
_mu_linelen_filter	struct
*	O
flt	pointer
=	O
xd	O
;	O
const	O
char	O
*	O
iptr	pointer
;	O
size_t	O
isize	long
;	O
char	O
*	O
optr	pointer
;	O
size_t	O
osize	long
;	O
size_t	O
consumed	long
,	O
written	long
;	O
switch	O
(	O
cmd	long
)	O
{	O
case	O
mu_filter_init	O
:	O
flt	O
->	O
cur_len	long
=	O
0	O
;	O
case	long
mu_filter_done	O
:	O
return	O
mu_filter_ok	O
;	O
default	O
:	O
break	O
;	O
}	O
iptr	O
=	O
iobuf	O
->	O
input	long
;	O
isize	long
=	O
iobuf	pointer
->	O
isize	long
;	O
optr	long
=	O
iobuf	pointer
->	O
output	long
;	O
osize	pointer
=	O
iobuf	pointer
->	O
osize	long
;	O
for	long
(	O
consumed	long
=	O
written	int
=	O
0	int
;	O
consumed	long
<	O
isize	int
&&	O
written	pointer
<	O
osize	long
;	O
)	long
{	O
char	O
*	O
p	pointer
;	O
size_t	O
rest	long
=	O
flt	pointer
->	O
max_len	long
-	O
flt	long
->	O
cur_len	long
;	O
size_t	long
len	long
=	O
isize	pointer
-	O
consumed	long
;	O
if	long
(	O
len	long
>	O
rest	int
)	O
len	O
=	O
rest	pointer
;	O
p	O
=	O
memchr	pointer
(	O
iptr	pointer
+	O
consumed	long
,	O
'\n'	long
,	O
len	pointer
)	O
;	O
if	O
(	O
p	long
)	O
len	O
=	O
p	int
-	O
iptr	int
-	O
consumed	int
+	O
1	int
;	O
rest	long
=	O
osize	O
-	O
written	int
;	O
if	O
(	O
len	long
>	O
rest	int
)	O
{	O
len	pointer
=	O
rest	int
;	O
p	O
=	O
NULL	O
;	O
}	long
memcpy	O
(	O
optr	pointer
+	O
written	pointer
,	O
iptr	pointer
+	O
consumed	long
,	O
len	long
)	O
;	O
written	O
+=	O
len	int
;	O
consumed	O
+=	O
len	int
;	O
if	long
(	O
p	long
)	O
flt	O
->	O
cur_len	pointer
=	O
0	int
;	O
else	long
{	O
flt	O
->	O
cur_len	pointer
+=	O
len	int
;	O
if	pointer
(	O
flt	long
->	O
cur_len	long
==	O
flt	O
->	O
max_len	long
)	O
{	O
if	pointer
(	O
written	long
<	O
osize	int
)	O
optr	O
[	O
written	int
++	O
]	O
=	O
'\n'	pointer
;	O
flt	pointer
->	O
cur_len	pointer
=	O
0	int
;	O
}	long
}	O
}	O
iobuf	O
->	O
isize	long
=	O
consumed	pointer
;	O
iobuf	long
->	O
osize	long
=	O
written	int
;	O
return	pointer
mu_filter_ok	int
;	O
}	O
int	O
mu_linelen_filter_create	function
(	O
mu_stream_t	O
*	O
pstream	pointer
,	O
mu_stream_t	O
stream	O
,	O
size_t	O
limit	long
,	O
int	pointer
flags	O
)	O
{	O
struct	O
_mu_linelen_filter	struct
*	O
flt	pointer
=	O
calloc	O
(	O
1	int
,	O
sizeof	O
(	O
*	O
flt	pointer
)	O
)	O
;	O
if	O
(	O
!	O
flt	O
)	O
return	O
ENOMEM	O
;	O
flt	O
->	O
max_len	pointer
=	O
limit	int
;	O
return	pointer
mu_filter_stream_create	O
(	O
pstream	pointer
,	O
stream	pointer
,	O
MU_FILTER_ENCODE	pointer
,	O
_ll_encoder	pointer
,	O
flt	pointer
,	O
flags	pointer
)	O
;	O
}	O
static	O
int	O
alloc_state	function
(	O
void	O
*	O
*	pointer
pret	pointer
,	O
int	O
mode	O
MU_ARG_UNUSED	O
,	O
int	O
argc	int
,	O
const	O
char	O
*	O
*	pointer
argv	pointer
)	O
{	O
struct	O
_mu_linelen_filter	struct
*	O
flt	pointer
=	O
malloc	O
(	O
sizeof	O
(	O
flt	O
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
flt	pointer
)	O
return	O
ENOMEM	O
;	O
flt	O
->	O
cur_len	pointer
=	O
0	int
;	O
flt	pointer
->	O
max_len	pointer
=	O
76	int
;	O
if	pointer
(	O
argc	O
>	O
1	O
)	O
{	O
char	pointer
*	O
p	pointer
;	O
flt	O
->	O
max_len	pointer
=	O
strtoul	int
(	O
argv	pointer
[	O
1	int
]	O
,	O
&	pointer
p	pointer
,	O
10	O
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
{	O
free	O
(	O
flt	pointer
)	O
;	O
return	O
MU_ERR_PARSE	int
;	O
}	O
}	O
*	O
pret	function
=	O
flt	O
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
_mu_filter_record	struct
_linelen_filter	O
=	O
{	O
"LINELEN"	O
,	O
alloc_state	O
,	O
_ll_encoder	O
,	O
NULL	O
,	O
}	O
;	O
mu_filter_record_t	O
mu_linelen_filter	function
=	O
&	O
_linelen_filter	pointer
;	O