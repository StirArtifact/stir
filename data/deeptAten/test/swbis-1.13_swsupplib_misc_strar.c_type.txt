static	O
int	O
f_strcmp	function
(	O
int	O
sense	int
,	O
const	O
void	O
*	O
vf1	pointer
,	O
const	O
void	O
*	O
vf2	pointer
)	O
{	O
char	O
*	O
f1	pointer
;	O
char	O
*	O
f2	pointer
;	O
f1	O
=	O
*	O
(	pointer
(	O
char	O
*	O
*	O
)	O
(	O
vf1	O
)	O
)	O
;	O
f2	O
=	O
*	O
(	pointer
(	O
char	O
*	O
*	O
)	O
(	O
vf2	O
)	O
)	O
;	O
if	O
(	O
sense	O
<	O
0	O
)	O
return	O
-	O
strcmp	int
(	O
f1	pointer
,	O
f2	pointer
)	O
;	O
return	O
strcmp	int
(	O
f1	pointer
,	O
f2	pointer
)	O
;	O
}	O
STRAR	O
*	O
strar_copy_construct	function
(	O
STRAR	O
*	O
src	pointer
)	O
{	O
int	O
i	int
;	O
char	O
*	O
s	pointer
;	O
STRAR	O
*	O
ret	pointer
;	O
if	O
(	O
!	O
src	pointer
)	O
return	O
NULL	O
;	O
ret	O
=	O
strar_open	O
(	O
)	O
;	O
if	O
(	O
!	O
ret	O
)	O
return	O
NULL	O
;	O
i	O
=	O
0	O
;	O
while	O
(	O
(	O
s	O
=	O
strar_get	O
(	O
src	pointer
,	O
i	int
++	O
)	O
)	O
)	O
{	O
strar_add	O
(	O
ret	pointer
,	O
s	int
)	O
;	O
}	O
return	O
ret	O
;	O
}	O
STRAR	O
*	O
strar_open	function
(	O
void	O
)	O
{	O
STRAR	O
*	O
strb	pointer
;	O
strb	O
=	O
(	function
STRAR	O
*	O
)	O
malloc	pointer
(	O
sizeof	O
(	O
STRAR	O
)	O
)	O
;	O
if	O
(	O
strb	O
==	O
(	O
STRAR	O
*	O
)	O
(	O
NULL	O
)	O
)	O
return	O
(	int
STRAR	O
*	O
)	O
(	function
NULL	O
)	O
;	O
strb	O
->	O
lenM	pointer
=	O
0	O
;	O
strb	O
->	O
nsM	pointer
=	O
0	O
;	O
strb	O
->	O
storageM	pointer
=	O
strob_open	O
(	O
132	int
)	O
;	O
strb	O
->	O
listM	pointer
=	O
cplob_open	O
(	O
10	int
)	O
;	O
cplob_add_nta	O
(	O
strb	pointer
->	O
listM	pointer
,	O
NULL	pointer
)	O
;	O
return	O
strb	int
;	O
}	O
void	O
strar_reset	function
(	O
STRAR	O
*	O
strar	pointer
)	O
{	O
strar	O
->	O
lenM	pointer
=	O
0	pointer
;	O
strar	O
->	O
nsM	pointer
=	O
0	O
;	O
strob_strcpy	O
(	O
strar	pointer
->	O
storageM	pointer
,	O
""	pointer
)	O
;	O
cplob_shallow_reset	O
(	O
strar	pointer
->	O
listM	pointer
)	O
;	O
}	O
void	O
strar_close	function
(	O
STRAR	O
*	O
strar	pointer
)	O
{	O
strob_close	O
(	O
strar	pointer
->	O
storageM	pointer
)	O
;	O
swbis_free	O
(	O
cplob_release	pointer
(	O
strar	pointer
->	O
listM	pointer
)	O
)	O
;	O
swbis_free	O
(	O
strar	pointer
)	O
;	O
return	O
;	int
}	O
int	O
strar_num_elements	function
(	O
STRAR	O
*	O
strar	pointer
)	O
{	O
return	O
strar	int
->	O
nsM	pointer
;	O
}	O
char	O
*	O
strar_get	function
(	O
STRAR	O
*	O
strar	pointer
,	O
int	O
index	int
)	O
{	O
char	O
*	O
s	pointer
;	O
if	O
(	O
index	O
>=	O
strar	int
->	O
nsM	pointer
||	O
index	O
<	O
0	int
)	O
return	O
NULL	O
;	O
s	O
=	O
cplob_val	O
(	O
strar	pointer
->	O
listM	pointer
,	O
index	pointer
)	O
;	O
return	O
s	int
;	O
}	O
char	O
*	O
strar_return_store	function
(	O
STRAR	O
*	O
strar	pointer
,	O
int	O
len	int
)	O
{	O
char	O
*	O
oldbase	pointer
;	O
char	O
*	O
base	pointer
;	O
char	O
*	O
last	pointer
;	O
int	O
nused	int
;	O
strar	O
->	O
lenM	pointer
=	O
strar	pointer
->	O
lenM	pointer
+	O
len	int
+	O
1	int
;	O
oldbase	O
=	O
strob_str	O
(	O
strar	pointer
->	O
storageM	pointer
)	O
;	O
strob_set_memlength	O
(	O
strar	pointer
->	O
storageM	pointer
,	O
strar	pointer
->	O
lenM	pointer
)	O
;	O
base	O
=	O
strob_str	O
(	O
strar	pointer
->	O
storageM	pointer
)	O
;	O
strar	O
->	O
nsM	pointer
++	O
;	O
if	O
(	O
base	pointer
!=	O
oldbase	O
)	O
{	O
int	O
index	int
=	O
0	int
;	O
char	O
*	O
p	pointer
;	O
while	O
(	O
(	O
p	O
=	O
cplob_val	O
(	O
strar	pointer
->	O
listM	pointer
,	O
index	pointer
)	O
)	O
)	O
{	O
cplob_additem	O
(	O
strar	pointer
->	O
listM	pointer
,	O
index	pointer
,	O
base	int
+	O
(	int
(	O
int	O
)	O
(	function
p	O
-	O
oldbase	O
)	O
)	O
)	O
;	O
index	O
++	O
;	O
}	O
}	O
nused	O
=	O
cplob_get_nused	function
(	O
strar	pointer
->	O
listM	pointer
)	O
-	O
1	int
;	O
if	O
(	O
nused	O
>	O
0	int
)	O
{	O
last	O
=	O
cplob_val	int
(	O
strar	pointer
->	O
listM	pointer
,	O
nused	pointer
-	O
1	int
)	O
;	O
}	O
else	O
{	O
last	O
=	O
NULL	function
;	O
}	O
if	O
(	O
last	pointer
)	O
{	O
last	O
=	O
last	int
+	O
strlen	int
(	O
last	pointer
)	O
+	O
1	int
;	O
}	O
else	O
{	O
last	O
=	O
base	int
;	O
}	O
cplob_add_nta	O
(	O
strar	O
->	O
listM	pointer
,	O
last	pointer
)	O
;	O
memset	O
(	O
last	pointer
,	O
(	int
int	O
)	O
'_'	function
,	O
len	O
)	O
;	O
*	O
(	pointer
last	O
+	O
len	int
)	O
=	O
'\0'	O
;	O
return	O
last	O
;	O
}	O
int	O
strar_add	function
(	O
STRAR	O
*	O
strar	pointer
,	O
char	O
*	O
src	pointer
)	O
{	O
char	O
*	O
last	pointer
;	O
last	O
=	O
strar_return_store	int
(	O
strar	pointer
,	O
strlen	pointer
(	O
src	pointer
)	O
)	O
;	O
strcpy	O
(	O
last	pointer
,	O
src	pointer
)	O
;	O
return	O
0	int
;	O
}	O
void	O
strar_qsort	function
(	O
STRAR	O
*	O
strar	pointer
,	O
int	O
(	int
*	O
f_comp	pointer
)	O
(	O
const	O
void	O
*	O
,	pointer
const	O
void	O
*	O
)	O
)	O
{	O
size_t	O
nused	O
;	O
nused	O
=	O
(	O
size_t	O
)	O
cplob_get_nused	O
(	O
strar	pointer
->	O
listM	pointer
)	O
-	O
1	int
;	O
std_quicksort	O
(	O
strar	O
->	O
listM	pointer
->	O
list	pointer
,	O
(	pointer
size_t	O
)	O
nused	O
,	O
sizeof	pointer
(	O
char	O
*	O
)	O
,	pointer
f_comp	O
)	O
;	O
}	O
int	O
strar_qsort_neg_strcmp	function
(	O
const	O
void	O
*	O
vf1	pointer
,	O
const	O
void	O
*	O
vf2	pointer
)	O
{	O
return	O
f_strcmp	O
(	O
-	O
1	int
,	O
vf1	O
,	O
vf2	O
)	O
;	O
}	O
int	O
strar_qsort_strcmp	function
(	O
const	O
void	O
*	O
vf1	pointer
,	O
const	O
void	O
*	O
vf2	pointer
)	O
{	O
return	O
f_strcmp	O
(	O
1	O
,	O
vf1	O
,	O
vf2	O
)	O
;	O
}	O
void	O
strar_remove_index	function
(	O
STRAR	O
*	O
strar	pointer
,	O
int	O
index	int
)	O
{	O
cplob_remove_index	O
(	O
strar	O
->	O
listM	pointer
,	O
index	pointer
)	O
;	O
strar	O
->	O
nsM	pointer
--	O
;	O
}	O