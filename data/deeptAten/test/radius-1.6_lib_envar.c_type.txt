typedef	O
struct	O
envar	O
{	O
char	O
*	O
name	pointer
;	O
char	O
*	O
value	pointer
;	O
}	O
ENVAR	O
;	O
static	O
void	O
grad_envar_assign_internal	function
(	O
char	O
*	O
name	pointer
,	O
int	O
namelen	int
,	O
char	O
*	O
value	pointer
,	O
int	O
valuelen	int
,	O
grad_list_t	O
*	O
*	pointer
plist	pointer
)	O
{	O
ENVAR	O
*	O
env	pointer
;	O
char	O
*	O
p	pointer
;	O
if	O
(	O
!	O
value	pointer
)	O
{	O
if	O
(	O
namelen	pointer
>	O
2	O
&&	O
memcmp	pointer
(	O
name	pointer
,	O
"no"	pointer
,	O
2	int
)	O
==	O
0	int
)	O
{	O
name	O
+=	O
2	int
;	O
namelen	O
-=	O
2	O
;	O
value	O
=	O
"0"	function
;	O
valuelen	O
=	O
1	O
;	O
}	O
else	O
{	O
value	O
=	O
"1"	function
;	O
valuelen	O
=	O
1	O
;	O
}	O
}	O
env	O
=	O
grad_emalloc	function
(	O
sizeof	O
(	O
*	O
env	pointer
)	O
)	O
;	O
env	O
->	O
name	pointer
=	O
grad_emalloc	O
(	O
namelen	O
+	O
1	int
)	O
;	O
memcpy	O
(	O
env	pointer
->	O
name	pointer
,	O
name	pointer
,	O
namelen	pointer
)	O
;	O
env	O
->	O
name	pointer
[	O
namelen	int
]	O
=	O
0	pointer
;	O
env	O
->	O
value	pointer
=	O
grad_emalloc	O
(	O
valuelen	O
+	O
1	int
)	O
;	O
memcpy	O
(	O
env	pointer
->	O
value	pointer
,	O
value	pointer
,	O
valuelen	O
)	O
;	O
env	O
->	O
value	pointer
[	O
valuelen	int
]	O
=	O
0	O
;	O
if	O
(	O
!	pointer
*	O
plist	pointer
)	O
*	O
plist	pointer
=	O
grad_list_create	pointer
(	O
)	O
;	O
grad_list_append	O
(	O
*	pointer
plist	pointer
,	O
env	O
)	O
;	O
}	O
void	O
grad_envar_assign	function
(	O
char	O
*	O
name	pointer
,	O
char	O
*	O
value	pointer
,	O
grad_list_t	O
*	O
*	pointer
plist	pointer
)	O
{	O
grad_envar_assign_internal	O
(	O
name	O
,	O
strlen	pointer
(	O
name	pointer
)	O
,	O
value	O
,	O
value	O
?	O
strlen	O
(	O
value	pointer
)	O
:	O
0	O
,	O
plist	O
)	O
;	O
}	O
static	O
void	O
grad_envar_parse_grad_argcv_internal	function
(	O
int	O
argc	O
,	O
char	O
*	O
*	pointer
argv	pointer
,	O
grad_list_t	O
*	O
*	pointer
plist	pointer
)	O
{	O
int	O
i	int
;	O
char	O
*	O
p	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argc	int
;	O
i	pointer
++	O
)	O
{	O
if	O
(	O
argv	pointer
[	O
i	int
]	O
[	O
0	int
]	O
==	O
','	O
)	O
continue	O
;	O
p	O
=	O
strchr	function
(	O
argv	pointer
[	O
i	int
]	O
,	O
'='	pointer
)	O
;	O
if	O
(	O
p	pointer
)	O
grad_envar_assign_internal	O
(	O
argv	O
[	O
i	int
]	O
,	O
p	pointer
-	O
argv	int
[	O
i	int
]	O
,	O
p	pointer
+	O
1	int
,	O
strlen	int
(	O
p	pointer
+	O
1	int
)	O
,	O
plist	O
)	O
;	O
else	O
grad_envar_assign_internal	O
(	O
argv	pointer
[	O
i	int
]	O
,	O
strlen	pointer
(	O
argv	pointer
[	O
i	int
]	O
)	O
,	O
NULL	O
,	O
0	int
,	O
plist	int
)	O
;	O
}	O
}	O
static	O
void	O
grad_envar_parse_internal	function
(	O
char	O
*	O
str	pointer
,	O
grad_list_t	O
*	O
*	pointer
plist	pointer
)	O
{	O
int	O
argc	int
;	O
char	O
*	O
*	pointer
argv	pointer
;	O
if	O
(	O
grad_argcv_get	O
(	O
str	pointer
,	O
","	pointer
,	O
NULL	pointer
,	O
&	O
argc	pointer
,	O
&	O
argv	pointer
)	O
)	O
{	O
if	O
(	O
argv	pointer
)	O
grad_argcv_free	O
(	O
argc	int
,	O
argv	pointer
)	O
;	O
return	O
;	int
}	O
grad_envar_parse_grad_argcv_internal	O
(	O
argc	O
,	O
argv	pointer
,	O
plist	O
)	O
;	O
grad_argcv_free	O
(	O
argc	int
,	O
argv	pointer
)	O
;	O
}	O
grad_envar_t	O
*	O
grad_envar_parse	function
(	O
char	O
*	O
str	pointer
)	O
{	O
grad_list_t	O
*	O
list	pointer
=	O
NULL	O
;	O
grad_envar_parse_internal	O
(	O
str	O
,	O
&	O
list	pointer
)	O
;	O
return	O
list	int
;	O
}	O
grad_envar_t	O
*	O
grad_envar_parse_argcv	function
(	O
int	O
argc	O
,	O
char	O
*	O
*	pointer
argv	pointer
)	O
{	O
grad_list_t	O
*	O
list	pointer
=	O
NULL	O
;	O
while	O
(	O
argc	O
--	O
)	O
{	O
grad_envar_parse_internal	O
(	O
*	pointer
argv	pointer
++	O
,	O
&	O
list	pointer
)	O
;	O
}	O
return	O
list	O
;	O
}	O
static	O
int	O
grad_envar_free	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
ENVAR	O
*	O
env	pointer
=	O
item	O
;	O
grad_free	O
(	O
env	pointer
->	O
name	pointer
)	O
;	O
grad_free	O
(	O
env	pointer
->	O
value	pointer
)	O
;	O
grad_free	O
(	O
env	pointer
)	O
;	O
return	O
0	int
;	O
}	O
void	O
grad_envar_free_list	function
(	O
grad_envar_t	O
*	O
*	pointer
evp	pointer
)	O
{	O
grad_list_destroy	O
(	O
evp	O
,	O
grad_envar_free	pointer
,	O
NULL	O
)	O
;	O
}	O
char	O
*	O
grad_envar_lookup	function
(	O
grad_envar_t	O
*	O
env	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
ENVAR	O
*	O
p	pointer
;	O
grad_iterator_t	O
*	O
itr	pointer
=	O
grad_iterator_create	O
(	O
env	pointer
)	O
;	O
if	O
(	O
!	pointer
itr	pointer
)	O
return	O
NULL	O
;	O
for	O
(	O
p	pointer
=	O
grad_iterator_first	int
(	O
itr	pointer
)	O
;	O
p	O
;	O
p	O
=	O
grad_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
if	O
(	O
strcmp	pointer
(	O
p	pointer
->	O
name	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
break	O
;	O
}	O
grad_iterator_destroy	O
(	O
&	O
itr	pointer
)	O
;	O
return	O
p	int
?	O
p	O
->	O
value	pointer
:	O
NULL	O
;	O
}	O
char	O
*	O
grad_envar_lookup_str	function
(	O
grad_envar_t	O
*	O
env	pointer
,	O
char	O
*	O
name	pointer
,	O
char	O
*	O
defval	pointer
)	O
{	O
char	O
*	O
s	pointer
;	O
if	O
(	O
s	O
=	O
grad_envar_lookup	function
(	O
env	pointer
,	O
name	pointer
)	O
)	O
return	O
s	O
;	O
return	O
defval	O
;	O
}	O
int	O
grad_envar_lookup_int	function
(	O
grad_envar_t	O
*	O
env	pointer
,	O
char	O
*	O
name	pointer
,	O
int	O
defval	int
)	O
{	O
char	O
*	O
s	pointer
;	O
if	O
(	O
s	O
=	O
grad_envar_lookup	function
(	O
env	pointer
,	O
name	pointer
)	O
)	O
return	O
atoi	int
(	O
s	pointer
)	O
;	O
return	O
defval	int
;	O
}	O
ENVAR	O
*	O
grad_envar_dup	function
(	O
ENVAR	O
*	O
env	pointer
)	O
{	O
ENVAR	O
*	O
ep	pointer
;	O
ep	O
=	O
grad_emalloc	pointer
(	O
sizeof	O
(	O
*	O
ep	pointer
)	O
)	O
;	O
ep	O
->	O
name	pointer
=	O
grad_estrdup	O
(	O
env	pointer
->	O
name	pointer
)	O
;	O
ep	O
->	O
value	pointer
=	O
grad_estrdup	O
(	O
env	pointer
->	O
value	pointer
)	O
;	O
return	O
ep	int
;	O
}	O
grad_envar_t	O
*	O
grad_envar_merge_lists	function
(	O
grad_envar_t	O
*	O
prim	pointer
,	O
grad_envar_t	O
*	O
sec	pointer
)	O
{	O
grad_envar_t	O
*	O
list	pointer
;	O
ENVAR	O
*	O
p	pointer
;	O
grad_iterator_t	O
*	O
itr	pointer
;	O
list	O
=	O
grad_list_create	function
(	O
)	O
;	O
itr	O
=	O
grad_iterator_create	function
(	O
sec	pointer
)	O
;	O
if	O
(	O
itr	pointer
)	O
{	O
for	O
(	O
p	int
=	O
grad_iterator_first	int
(	O
itr	pointer
)	O
;	O
p	O
;	O
p	O
=	O
grad_iterator_next	function
(	O
itr	pointer
)	O
)	O
if	O
(	O
!	pointer
grad_envar_lookup	O
(	O
prim	pointer
,	O
p	pointer
->	O
name	pointer
)	O
)	O
{	O
grad_list_append	O
(	O
list	pointer
,	O
grad_envar_dup	pointer
(	O
p	pointer
)	O
)	O
;	O
}	O
grad_iterator_destroy	O
(	O
&	O
itr	pointer
)	O
;	O
}	O
itr	O
=	O
grad_iterator_create	function
(	O
prim	pointer
)	O
;	O
if	O
(	O
itr	pointer
)	O
{	O
for	O
(	O
p	int
=	O
grad_iterator_first	int
(	O
itr	pointer
)	O
;	O
p	O
;	O
p	O
=	O
grad_iterator_next	function
(	O
itr	pointer
)	O
)	O
grad_list_append	O
(	O
list	pointer
,	O
grad_envar_dup	O
(	O
p	pointer
)	O
)	O
;	O
grad_iterator_destroy	O
(	O
&	O
itr	pointer
)	O
;	O
}	O
return	O
list	O
;	O
}	O