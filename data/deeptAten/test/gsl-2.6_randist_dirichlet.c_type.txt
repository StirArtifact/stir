static	O
void	O
ran_dirichlet_small	O
(	O
const	O
gsl_rng	O
*	O
r	pointer
,	O
const	O
size_t	O
K	long
,	O
const	O
double	O
alpha	O
[	O
]	O
,	O
double	O
theta	O
[	O
]	int
)	O
;	O
void	O
gsl_ran_dirichlet	O
(	O
const	O
gsl_rng	O
*	O
r	pointer
,	O
const	O
size_t	O
K	int
,	O
const	O
double	O
alpha	O
[	O
]	int
,	O
double	O
theta	O
[	O
]	int
)	O
{	O
size_t	O
i	long
;	O
double	O
norm	array
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
)	O
{	O
theta	O
[	O
i	int
]	O
=	O
gsl_ran_gamma	int
(	O
r	pointer
,	O
alpha	int
[	O
i	int
]	O
,	O
1.0	pointer
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	int
<	O
K	int
;	O
i	int
++	O
)	O
{	O
norm	O
+=	O
theta	int
[	O
i	int
]	O
;	O
}	O
if	O
(	O
norm	O
<	O
GSL_SQRT_DBL_MIN	int
)	O
{	O
ran_dirichlet_small	O
(	O
r	pointer
,	O
K	int
,	O
alpha	int
,	O
theta	int
)	O
;	O
return	O
;	int
}	O
for	O
(	O
i	O
=	O
0	int
;	O
i	int
<	O
K	int
;	O
i	int
++	O
)	O
{	O
theta	O
[	O
i	int
]	O
/=	O
norm	O
;	O
}	long
}	O
static	O
void	O
ran_dirichlet_small	function
(	O
const	O
gsl_rng	O
*	O
r	pointer
,	O
const	O
size_t	O
K	long
,	O
const	O
double	O
alpha	array
[	O
]	O
,	O
double	O
theta	O
[	O
]	int
)	O
{	O
size_t	O
i	long
;	O
double	O
norm	array
=	O
0.0	int
,	O
umax	O
=	O
0	int
;	O
for	long
(	O
i	long
=	O
0	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
)	O
{	O
double	O
u	double
=	O
log	O
(	O
gsl_rng_uniform_pos	O
(	O
r	pointer
)	O
)	O
/	O
alpha	int
[	O
i	int
]	O
;	O
theta	O
[	O
i	int
]	O
=	O
u	int
;	O
if	pointer
(	O
u	long
>	O
umax	int
||	O
i	O
==	O
0	int
)	O
{	O
umax	O
=	O
u	int
;	O
}	O
}	O
for	O
(	O
i	O
=	O
0	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
)	O
{	O
theta	O
[	O
i	int
]	O
=	O
exp	int
(	O
theta	pointer
[	O
i	int
]	O
-	O
umax	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	int
<	O
K	int
;	O
i	long
++	O
)	O
{	O
theta	O
[	O
i	int
]	O
=	O
theta	int
[	O
i	int
]	O
*	O
gsl_ran_gamma	O
(	O
r	pointer
,	O
alpha	int
[	O
i	int
]	O
+	O
1.0	int
,	O
1.0	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	int
<	O
K	int
;	O
i	int
++	O
)	O
{	O
norm	O
+=	O
theta	int
[	O
i	int
]	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	int
<	O
K	int
;	O
i	int
++	O
)	O
{	O
theta	O
[	O
i	int
]	O
/=	O
norm	O
;	O
}	long
}	O
double	O
gsl_ran_dirichlet_pdf	function
(	O
const	O
size_t	O
K	long
,	O
const	O
double	O
alpha	O
[	O
]	O
,	O
const	O
double	O
theta	array
[	O
]	int
)	O
{	O
return	O
exp	int
(	O
gsl_ran_dirichlet_lnpdf	int
(	O
K	pointer
,	O
alpha	O
,	O
theta	int
)	O
)	O
;	O
}	O
double	O
gsl_ran_dirichlet_lnpdf	function
(	O
const	O
size_t	O
K	long
,	O
const	O
double	O
alpha	O
[	O
]	O
,	O
const	O
double	O
theta	array
[	O
]	int
)	O
{	O
size_t	O
i	long
;	O
double	O
log_p	array
=	O
0.0	O
;	O
double	O
sum_alpha	double
=	O
0.0	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
)	O
{	O
log_p	O
+=	O
(	int
alpha	O
[	O
i	int
]	O
-	O
1.0	int
)	O
*	O
log	pointer
(	O
theta	O
[	O
i	int
]	O
)	O
;	O
}	O
for	O
(	O
i	O
=	O
0	int
;	O
i	long
<	O
K	int
;	O
i	long
++	O
)	O
{	O
sum_alpha	O
+=	O
alpha	int
[	O
i	int
]	O
;	O
}	O
log_p	O
+=	O
gsl_sf_lngamma	O
(	O
sum_alpha	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	int
<	O
K	int
;	O
i	long
++	O
)	O
{	O
log_p	O
-=	O
gsl_sf_lngamma	O
(	O
alpha	pointer
[	O
i	int
]	O
)	O
;	O
}	O
return	O
log_p	int
;	O
}	O