static	O
struct	O
vfs_class	struct
*	O
current_vfs	pointer
;	O
static	O
char	O
*	O
current_dir	pointer
;	O
struct	O
vfs_openfile	struct
{	O
int	O
handle	int
;	O
struct	O
vfs_class	struct
*	O
vclass	pointer
;	O
void	O
*	O
fsinfo	pointer
;	O
}	O
;	O
static	O
GSList	struct
*	O
vfs_openfiles	pointer
;	O
static	O
struct	O
vfs_class	struct
*	O
localfs_class	pointer
;	O
static	O
int	O
vfs_new_handle	function
(	O
struct	O
vfs_class	struct
*	O
vclass	pointer
,	O
void	O
*	O
fsinfo	pointer
)	O
{	O
static	O
int	O
vfs_handle_counter	int
=	O
VFS_FIRST_HANDLE	int
;	O
struct	O
vfs_openfile	struct
*	O
h	pointer
;	O
h	pointer
=	O
g_new	O
(	O
struct	O
vfs_openfile	struct
,	O
1	int
)	O
;	O
h	pointer
->	O
handle	int
=	O
vfs_handle_counter	int
++	O
;	O
h	pointer
->	O
fsinfo	pointer
=	O
fsinfo	pointer
;	O
h	pointer
->	O
vclass	pointer
=	O
vclass	pointer
;	O
vfs_openfiles	pointer
=	O
g_slist_prepend	function
(	O
vfs_openfiles	pointer
,	O
h	pointer
)	O
;	O
return	O
h	pointer
->	O
handle	int
;	O
}	O
static	O
gint	int
vfs_cmp_handle	function
(	O
gconstpointer	pointer
a	pointer
,	O
gconstpointer	pointer
b	pointer
)	O
{	O
if	O
(	O
!	O
a	pointer
)	O
return	O
1	int
;	O
return	O
(	O
(	O
struct	O
vfs_openfile	struct
*	O
)	O
a	pointer
)	O
->	O
handle	int
!=	O
(	O
long	O
)	O
b	pointer
;	O
}	O
static	O
inline	O
struct	O
vfs_class	struct
*	O
vfs_op	function
(	O
int	O
handle	int
)	O
{	O
GSList	struct
*	O
l	pointer
;	O
struct	O
vfs_openfile	struct
*	O
h	pointer
;	O
l	pointer
=	O
g_slist_find_custom	function
(	O
vfs_openfiles	pointer
,	O
(	O
void	O
*	O
)	O
(	O
long	O
)	O
handle	int
,	O
vfs_cmp_handle	function
)	O
;	O
if	O
(	O
!	O
l	pointer
)	O
return	O
NULL	O
;	O
h	pointer
=	O
(	O
struct	O
vfs_openfile	struct
*	O
)	O
l	pointer
->	O
data	pointer
;	O
if	O
(	O
!	O
h	pointer
)	O
return	O
NULL	O
;	O
return	O
h	pointer
->	O
vclass	pointer
;	O
}	O
static	O
inline	O
void	O
*	O
vfs_info	pointer
(	O
int	O
handle	int
)	O
{	O
GSList	struct
*	O
l	pointer
;	O
struct	O
vfs_openfile	struct
*	O
h	pointer
;	O
l	pointer
=	O
g_slist_find_custom	function
(	O
vfs_openfiles	pointer
,	O
(	O
void	O
*	O
)	O
(	O
long	O
)	O
handle	int
,	O
vfs_cmp_handle	function
)	O
;	O
if	O
(	O
!	O
l	pointer
)	O
return	O
NULL	O
;	O
h	pointer
=	O
(	O
struct	O
vfs_openfile	struct
*	O
)	O
l	pointer
->	O
data	pointer
;	O
if	O
(	O
!	O
h	pointer
)	O
return	O
NULL	O
;	O
return	O
h	pointer
->	O
fsinfo	pointer
;	O
}	O
static	O
inline	O
void	O
vfs_free_handle	function
(	O
int	O
handle	int
)	O
{	O
GSList	struct
*	O
l	pointer
;	O
l	pointer
=	O
g_slist_find_custom	function
(	O
vfs_openfiles	pointer
,	O
(	O
void	O
*	O
)	O
(	O
long	O
)	O
handle	int
,	O
vfs_cmp_handle	function
)	O
;	O
vfs_openfiles	pointer
=	O
g_slist_delete_link	function
(	O
vfs_openfiles	pointer
,	O
l	pointer
)	O
;	O
}	O
static	O
struct	O
vfs_class	struct
*	O
vfs_list	pointer
;	O
int	O
vfs_register_class	function
(	O
struct	O
vfs_class	struct
*	O
vfs	pointer
)	O
{	O
if	O
(	O
vfs	pointer
->	O
init	pointer
)	O
if	O
(	O
!	O
(	O
*	O
vfs	pointer
->	O
init	pointer
)	O
(	O
vfs	pointer
)	O
)	O
return	O
0	int
;	O
vfs	pointer
->	O
next	pointer
=	O
vfs_list	pointer
;	O
vfs_list	pointer
=	O
vfs	pointer
;	O
return	O
1	int
;	O
}	O
static	O
struct	O
vfs_class	struct
*	O
vfs_prefix_to_class	function
(	O
char	O
*	O
prefix	pointer
)	O
{	O
struct	O
vfs_class	struct
*	O
vfs	pointer
;	O
for	O
(	O
vfs	pointer
=	O
vfs_list	pointer
;	O
vfs	pointer
->	O
next	pointer
;	O
vfs	pointer
=	O
vfs	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
vfs	pointer
->	O
which	pointer
)	O
{	O
if	O
(	O
(	O
*	O
vfs	pointer
->	O
which	pointer
)	O
(	O
vfs	pointer
,	O
prefix	pointer
)	O
==	O
-	O
1	int
)	O
continue	O
;	O
return	O
vfs	pointer
;	O
}	O
if	O
(	O
vfs	pointer
->	O
prefix	pointer
&&	O
!	O
strncmp	function
(	O
prefix	pointer
,	O
vfs	pointer
->	O
prefix	pointer
,	O
strlen	function
(	O
vfs	pointer
->	O
prefix	pointer
)	O
)	O
)	O
return	O
vfs	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
char	O
*	O
vfs_strip_suffix_from_filename	function
(	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
struct	O
vfs_class	struct
*	O
vfs	pointer
;	O
char	O
*	O
semi	pointer
;	O
char	O
*	O
p	pointer
;	O
if	O
(	O
!	O
filename	pointer
)	O
vfs_die	function
(	O
"vfs_strip_suffix_from_path got NULL: impossible"	pointer
)	O
;	O
p	pointer
=	O
g_strdup	function
(	O
filename	pointer
)	O
;	O
if	O
(	O
!	O
(	O
semi	pointer
=	O
strrchr	function
(	O
p	pointer
,	O
'#'	O
)	O
)	O
)	O
return	O
p	pointer
;	O
for	O
(	O
vfs	pointer
=	O
vfs_list	pointer
;	O
vfs	pointer
->	O
next	pointer
;	O
vfs	pointer
=	O
vfs	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
vfs	pointer
->	O
which	pointer
)	O
{	O
if	O
(	O
(	O
*	O
vfs	pointer
->	O
which	pointer
)	O
(	O
vfs	pointer
,	O
semi	pointer
+	O
1	int
)	O
==	O
-	O
1	int
)	O
continue	O
;	O
*	O
semi	pointer
=	O
'\0'	O
;	O
return	O
p	pointer
;	O
}	O
if	O
(	O
vfs	pointer
->	O
prefix	pointer
&&	O
!	O
strncmp	function
(	O
semi	pointer
+	O
1	int
,	O
vfs	pointer
->	O
prefix	pointer
,	O
strlen	function
(	O
vfs	pointer
->	O
prefix	pointer
)	O
)	O
)	O
{	O
*	O
semi	pointer
=	O
'\0'	O
;	O
return	O
p	pointer
;	O
}	O
}	O
return	O
p	pointer
;	O
}	O
static	O
inline	O
int	O
path_magic	function
(	O
const	O
char	O
*	O
path	pointer
)	O
{	O
struct	O
stat	struct
buf	pointer
;	O
if	O
(	O
!	O
stat	struct
(	O
path	pointer
,	O
&	O
buf	pointer
)	O
)	O
return	O
0	int
;	O
return	O
1	int
;	O
}	O
struct	O
vfs_class	struct
*	O
vfs_split	function
(	O
char	O
*	O
path	pointer
,	O
char	O
*	O
*	O
inpath	pointer
,	O
char	O
*	O
*	O
op	pointer
)	O
{	O
char	O
*	O
semi	pointer
;	O
char	O
*	O
slash	pointer
;	O
struct	O
vfs_class	struct
*	O
ret	pointer
;	O
if	O
(	O
!	O
path	pointer
)	O
vfs_die	function
(	O
"Cannot split NULL"	pointer
)	O
;	O
semi	pointer
=	O
strrchr	function
(	O
path	pointer
,	O
'#'	O
)	O
;	O
if	O
(	O
!	O
semi	pointer
||	O
!	O
path_magic	function
(	O
path	pointer
)	O
)	O
return	O
NULL	O
;	O
slash	pointer
=	O
strchr	function
(	O
semi	pointer
,	O
PATH_SEP	char
)	O
;	O
*	O
semi	pointer
=	O
0	int
;	O
if	O
(	O
op	pointer
)	O
*	O
op	pointer
=	O
NULL	O
;	O
if	O
(	O
inpath	pointer
)	O
*	O
inpath	pointer
=	O
NULL	O
;	O
if	O
(	O
slash	pointer
)	O
*	O
slash	pointer
=	O
0	int
;	O
if	O
(	O
(	O
ret	pointer
=	O
vfs_prefix_to_class	function
(	O
semi	pointer
+	O
1	int
)	O
)	O
)	O
{	O
if	O
(	O
op	pointer
)	O
*	O
op	pointer
=	O
semi	pointer
+	O
1	int
;	O
if	O
(	O
inpath	pointer
)	O
*	O
inpath	pointer
=	O
slash	pointer
?	O
slash	pointer
+	O
1	int
:	O
NULL	O
;	O
return	O
ret	pointer
;	O
}	O
if	O
(	O
slash	pointer
)	O
*	O
slash	pointer
=	O
PATH_SEP	char
;	O
ret	pointer
=	O
vfs_split	function
(	O
path	pointer
,	O
inpath	pointer
,	O
op	pointer
)	O
;	O
*	O
semi	pointer
=	O
'#'	O
;	O
return	O
ret	pointer
;	O
}	O
static	O
struct	O
vfs_class	struct
*	O
_vfs_get_class	function
(	O
char	O
*	O
path	pointer
)	O
{	O
char	O
*	O
semi	pointer
;	O
char	O
*	O
slash	pointer
;	O
struct	O
vfs_class	struct
*	O
ret	pointer
;	O
g_return_val_if_fail	O
(	O
path	pointer
,	O
NULL	O
)	O
;	O
semi	pointer
=	O
strrchr	function
(	O
path	pointer
,	O
'#'	O
)	O
;	O
if	O
(	O
!	O
semi	pointer
||	O
!	O
path_magic	function
(	O
path	pointer
)	O
)	O
return	O
NULL	O
;	O
slash	pointer
=	O
strchr	function
(	O
semi	pointer
,	O
PATH_SEP	char
)	O
;	O
*	O
semi	pointer
=	O
0	int
;	O
if	O
(	O
slash	pointer
)	O
*	O
slash	pointer
=	O
0	int
;	O
ret	pointer
=	O
vfs_prefix_to_class	function
(	O
semi	pointer
+	O
1	int
)	O
;	O
if	O
(	O
slash	pointer
)	O
*	O
slash	pointer
=	O
PATH_SEP	char
;	O
if	O
(	O
!	O
ret	pointer
)	O
ret	pointer
=	O
_vfs_get_class	function
(	O
path	pointer
)	O
;	O
*	O
semi	pointer
=	O
'#'	O
;	O
return	O
ret	pointer
;	O
}	O
struct	O
vfs_class	struct
*	O
vfs_get_class	function
(	O
const	O
char	O
*	O
pathname	pointer
)	O
{	O
struct	O
vfs_class	struct
*	O
vfs	pointer
;	O
char	O
*	O
path	pointer
=	O
g_strdup	function
(	O
pathname	pointer
)	O
;	O
vfs	pointer
=	O
_vfs_get_class	function
(	O
path	pointer
)	O
;	O
g_free	function
(	O
path	pointer
)	O
;	O
if	O
(	O
!	O
vfs	pointer
)	O
vfs	pointer
=	O
localfs_class	pointer
;	O
return	O
vfs	pointer
;	O
}	O
static	O
int	O
ferrno	pointer
(	O
struct	O
vfs_class	struct
*	O
vfs	pointer
)	O
{	O
return	O
vfs	pointer
->	O
ferrno	pointer
?	O
(	O
*	O
vfs	pointer
->	O
ferrno	pointer
)	O
(	O
vfs	pointer
)	O
:	O
E_UNKNOWN	O
;	O
}	O
int	O
mc_open	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
int	O
flags	enum
,	O
...	O
)	O
{	O
int	O
mode	int
;	O
void	O
*	O
info	pointer
;	O
va_list	array
ap	array
;	O
char	O
*	O
file	pointer
=	O
vfs_canon	function
(	O
filename	pointer
)	O
;	O
struct	O
vfs_class	struct
*	O
vfs	pointer
=	O
vfs_get_class	function
(	O
file	pointer
)	O
;	O
if	O
(	O
flags	enum
&	O
O_CREAT	int
)	O
{	O
va_start	O
(	O
ap	array
,	O
flags	enum
)	O
;	O
mode	int
=	O
va_arg	O
(	O
ap	array
,	O
int	O
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
else	O
mode	int
=	O
0	int
;	O
if	O
(	O
!	O
vfs	pointer
->	O
open	function
)	O
{	O
g_free	function
(	O
file	pointer
)	O
;	O
errno	O
=	O
-	O
EOPNOTSUPP	int
;	O
return	O
-	O
1	int
;	O
}	O
info	pointer
=	O
(	O
*	O
vfs	pointer
->	O
open	function
)	O
(	O
vfs	pointer
,	O
file	pointer
,	O
flags	enum
,	O
mode	int
)	O
;	O
g_free	function
(	O
file	pointer
)	O
;	O
if	O
(	O
!	O
info	pointer
)	O
{	O
errno	O
=	O
ferrno	pointer
(	O
vfs	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
vfs_new_handle	function
(	O
vfs	pointer
,	O
info	pointer
)	O
;	O
}	O
MC_NAMEOP	O
(	O
chmod	function
,	O
(	O
const	O
char	O
*	O
path	pointer
,	O
mode_t	int
mode	int
)	O
,	O
(	O
vfs	pointer
,	O
mpath	pointer
,	O
mode	int
)	O
)	O
MC_NAMEOP	O
(	O
chown	function
,	O
(	O
const	O
char	O
*	O
path	pointer
,	O
uid_t	int
owner	long
,	O
gid_t	int
group	struct
)	O
,	O
(	O
vfs	pointer
,	O
mpath	pointer
,	O
owner	long
,	O
group	struct
)	O
)	O
MC_NAMEOP	O
(	O
utime	function
,	O
(	O
const	O
char	O
*	O
path	pointer
,	O
struct	O
utimbuf	struct
*	O
times	pointer
)	O
,	O
(	O
vfs	pointer
,	O
mpath	pointer
,	O
times	pointer
)	O
)	O
MC_NAMEOP	O
(	O
readlink	function
,	O
(	O
const	O
char	O
*	O
path	pointer
,	O
char	O
*	O
buf	pointer
,	O
int	O
bufsiz	int
)	O
,	O
(	O
vfs	pointer
,	O
mpath	pointer
,	O
buf	pointer
,	O
bufsiz	int
)	O
)	O
MC_NAMEOP	O
(	O
unlink	function
,	O
(	O
const	O
char	O
*	O
path	pointer
)	O
,	O
(	O
vfs	pointer
,	O
mpath	pointer
)	O
)	O
MC_NAMEOP	O
(	O
symlink	function
,	O
(	O
const	O
char	O
*	O
name1	pointer
,	O
const	O
char	O
*	O
path	pointer
)	O
,	O
(	O
vfs	pointer
,	O
name1	pointer
,	O
mpath	pointer
)	O
)	O
MC_NAMEOP	O
(	O
mkdir	function
,	O
(	O
const	O
char	O
*	O
path	pointer
,	O
mode_t	int
mode	int
)	O
,	O
(	O
vfs	pointer
,	O
mpath	pointer
,	O
mode	int
)	O
)	O
MC_NAMEOP	O
(	O
rmdir	function
,	O
(	O
const	O
char	O
*	O
path	pointer
)	O
,	O
(	O
vfs	pointer
,	O
mpath	pointer
)	O
)	O
MC_NAMEOP	O
(	O
mknod	function
,	O
(	O
const	O
char	O
*	O
path	pointer
,	O
mode_t	int
mode	int
,	O
dev_t	long
dev	int
)	O
,	O
(	O
vfs	pointer
,	O
mpath	pointer
,	O
mode	int
,	O
dev	int
)	O
)	O
MC_HANDLEOP	O
(	O
read	pointer
,	O
(	O
int	O
handle	int
,	O
void	O
*	O
buffer	pointer
,	O
int	O
count	int
)	O
,	O
(	O
vfs_info	pointer
(	O
handle	int
)	O
,	O
buffer	pointer
,	O
count	int
)	O
)	O
MC_HANDLEOP	O
(	O
write	pointer
,	O
(	O
int	O
handle	int
,	O
const	O
void	O
*	O
buf	pointer
,	O
int	O
nbyte	int
)	O
,	O
(	O
vfs_info	pointer
(	O
handle	int
)	O
,	O
buf	pointer
,	O
nbyte	int
)	O
)	O
MC_RENAMEOP	O
(	O
link	function
)	O
MC_RENAMEOP	O
(	O
rename	function
)	O
int	O
mc_ctl	function
(	O
int	O
handle	int
,	O
int	O
ctlop	int
,	O
void	O
*	O
arg	pointer
)	O
{	O
struct	O
vfs_class	struct
*	O
vfs	pointer
=	O
vfs_op	function
(	O
handle	int
)	O
;	O
return	O
vfs	pointer
->	O
ctl	pointer
?	O
(	O
*	O
vfs	pointer
->	O
ctl	pointer
)	O
(	O
vfs_info	pointer
(	O
handle	int
)	O
,	O
ctlop	int
,	O
arg	pointer
)	O
:	O
0	int
;	O
}	O
int	O
mc_setctl	function
(	O
const	O
char	O
*	O
path	pointer
,	O
int	O
ctlop	int
,	O
void	O
*	O
arg	pointer
)	O
{	O
struct	O
vfs_class	struct
*	O
vfs	pointer
;	O
int	O
result	long
;	O
char	O
*	O
mpath	pointer
;	O
if	O
(	O
!	O
path	pointer
)	O
vfs_die	function
(	O
"You don't want to pass NULL to mc_setctl."	pointer
)	O
;	O
mpath	pointer
=	O
vfs_canon	function
(	O
path	pointer
)	O
;	O
vfs	pointer
=	O
vfs_get_class	function
(	O
mpath	pointer
)	O
;	O
result	long
=	O
vfs	pointer
->	O
setctl	pointer
?	O
(	O
*	O
vfs	pointer
->	O
setctl	pointer
)	O
(	O
vfs	pointer
,	O
mpath	pointer
,	O
ctlop	int
,	O
arg	pointer
)	O
:	O
0	int
;	O
g_free	function
(	O
mpath	pointer
)	O
;	O
return	O
result	long
;	O
}	O
int	O
mc_close	function
(	O
int	O
handle	int
)	O
{	O
struct	O
vfs_class	struct
*	O
vfs	pointer
;	O
int	O
result	long
;	O
if	O
(	O
handle	int
==	O
-	O
1	int
||	O
!	O
vfs_info	pointer
(	O
handle	int
)	O
)	O
return	O
-	O
1	int
;	O
vfs	pointer
=	O
vfs_op	function
(	O
handle	int
)	O
;	O
if	O
(	O
handle	int
<	O
3	int
)	O
return	O
close	pointer
(	O
handle	int
)	O
;	O
if	O
(	O
!	O
vfs	pointer
->	O
close	pointer
)	O
vfs_die	function
(	O
"VFS must support close.\n"	pointer
)	O
;	O
result	long
=	O
(	O
*	O
vfs	pointer
->	O
close	pointer
)	O
(	O
vfs_info	pointer
(	O
handle	int
)	O
)	O
;	O
vfs_free_handle	function
(	O
handle	int
)	O
;	O
if	O
(	O
result	long
==	O
-	O
1	int
)	O
errno	O
=	O
ferrno	pointer
(	O
vfs	pointer
)	O
;	O
return	O
result	long
;	O
}	O
DIR	struct
*	O
mc_opendir	function
(	O
const	O
char	O
*	O
dirname	pointer
)	O
{	O
int	O
handle	int
,	O
*	O
handlep	pointer
;	O
void	O
*	O
info	pointer
;	O
struct	O
vfs_class	struct
*	O
vfs	pointer
;	O
char	O
*	O
dname	pointer
;	O
dname	pointer
=	O
vfs_canon	function
(	O
dirname	pointer
)	O
;	O
vfs	pointer
=	O
vfs_get_class	function
(	O
dname	pointer
)	O
;	O
info	pointer
=	O
vfs	pointer
->	O
opendir	function
?	O
(	O
*	O
vfs	pointer
->	O
opendir	function
)	O
(	O
vfs	pointer
,	O
dname	pointer
)	O
:	O
NULL	O
;	O
g_free	function
(	O
dname	pointer
)	O
;	O
if	O
(	O
!	O
info	pointer
)	O
{	O
errno	O
=	O
vfs	pointer
->	O
opendir	function
?	O
ferrno	pointer
(	O
vfs	pointer
)	O
:	O
E_NOTSUPP	O
;	O
return	O
NULL	O
;	O
}	O
handle	int
=	O
vfs_new_handle	function
(	O
vfs	pointer
,	O
info	pointer
)	O
;	O
handlep	pointer
=	O
g_new	O
(	O
int	O
,	O
1	int
)	O
;	O
*	O
handlep	pointer
=	O
handle	int
;	O
return	O
(	O
DIR	struct
*	O
)	O
handlep	pointer
;	O
}	O
struct	O
dirent	struct
*	O
mc_readdir	function
(	O
DIR	struct
*	O
dirp	pointer
)	O
{	O
int	O
handle	int
;	O
struct	O
vfs_class	struct
*	O
vfs	pointer
;	O
struct	O
dirent	struct
*	O
result	long
=	O
NULL	O
;	O
if	O
(	O
!	O
dirp	pointer
)	O
{	O
errno	O
=	O
EFAULT	int
;	O
return	O
NULL	O
;	O
}	O
handle	int
=	O
*	O
(	O
int	O
*	O
)	O
dirp	pointer
;	O
vfs	pointer
=	O
vfs_op	function
(	O
handle	int
)	O
;	O
if	O
(	O
vfs	pointer
->	O
readdir	function
)	O
result	long
=	O
(	O
*	O
vfs	pointer
->	O
readdir	function
)	O
(	O
vfs_info	pointer
(	O
handle	int
)	O
)	O
;	O
if	O
(	O
!	O
result	long
)	O
errno	O
=	O
vfs	pointer
->	O
readdir	function
?	O
ferrno	pointer
(	O
vfs	pointer
)	O
:	O
E_NOTSUPP	O
;	O
return	O
result	long
;	O
}	O
int	O
mc_closedir	function
(	O
DIR	struct
*	O
dirp	pointer
)	O
{	O
int	O
handle	int
=	O
*	O
(	O
int	O
*	O
)	O
dirp	pointer
;	O
struct	O
vfs_class	struct
*	O
vfs	pointer
=	O
vfs_op	function
(	O
handle	int
)	O
;	O
int	O
result	long
;	O
result	long
=	O
vfs	pointer
->	O
closedir	function
?	O
(	O
*	O
vfs	pointer
->	O
closedir	function
)	O
(	O
vfs_info	pointer
(	O
handle	int
)	O
)	O
:	O
-	O
1	int
;	O
vfs_free_handle	function
(	O
handle	int
)	O
;	O
g_free	function
(	O
dirp	pointer
)	O
;	O
return	O
result	long
;	O
}	O
int	O
mc_stat	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
struct	O
stat	struct
*	O
buf	pointer
)	O
{	O
struct	O
vfs_class	struct
*	O
vfs	pointer
;	O
int	O
result	long
;	O
char	O
*	O
path	pointer
;	O
path	pointer
=	O
vfs_canon	function
(	O
filename	pointer
)	O
;	O
vfs	pointer
=	O
vfs_get_class	function
(	O
path	pointer
)	O
;	O
result	long
=	O
vfs	pointer
->	O
stat	struct
?	O
(	O
*	O
vfs	pointer
->	O
stat	struct
)	O
(	O
vfs	pointer
,	O
path	pointer
,	O
buf	pointer
)	O
:	O
-	O
1	int
;	O
g_free	function
(	O
path	pointer
)	O
;	O
if	O
(	O
result	long
==	O
-	O
1	int
)	O
errno	O
=	O
vfs	pointer
->	O
name	pointer
?	O
ferrno	pointer
(	O
vfs	pointer
)	O
:	O
E_NOTSUPP	O
;	O
return	O
result	long
;	O
}	O
int	O
mc_lstat	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
struct	O
stat	struct
*	O
buf	pointer
)	O
{	O
struct	O
vfs_class	struct
*	O
vfs	pointer
;	O
int	O
result	long
;	O
char	O
*	O
path	pointer
;	O
path	pointer
=	O
vfs_canon	function
(	O
filename	pointer
)	O
;	O
vfs	pointer
=	O
vfs_get_class	function
(	O
path	pointer
)	O
;	O
result	long
=	O
vfs	pointer
->	O
lstat	function
?	O
(	O
*	O
vfs	pointer
->	O
lstat	function
)	O
(	O
vfs	pointer
,	O
path	pointer
,	O
buf	pointer
)	O
:	O
-	O
1	int
;	O
g_free	function
(	O
path	pointer
)	O
;	O
if	O
(	O
result	long
==	O
-	O
1	int
)	O
errno	O
=	O
vfs	pointer
->	O
name	pointer
?	O
ferrno	pointer
(	O
vfs	pointer
)	O
:	O
E_NOTSUPP	O
;	O
return	O
result	long
;	O
}	O
int	O
mc_fstat	function
(	O
int	O
handle	int
,	O
struct	O
stat	struct
*	O
buf	pointer
)	O
{	O
struct	O
vfs_class	struct
*	O
vfs	pointer
;	O
int	O
result	long
;	O
if	O
(	O
handle	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
vfs	pointer
=	O
vfs_op	function
(	O
handle	int
)	O
;	O
result	long
=	O
vfs	pointer
->	O
fstat	function
?	O
(	O
*	O
vfs	pointer
->	O
fstat	function
)	O
(	O
vfs_info	pointer
(	O
handle	int
)	O
,	O
buf	pointer
)	O
:	O
-	O
1	int
;	O
if	O
(	O
result	long
==	O
-	O
1	int
)	O
errno	O
=	O
vfs	pointer
->	O
name	pointer
?	O
ferrno	pointer
(	O
vfs	pointer
)	O
:	O
E_NOTSUPP	O
;	O
return	O
result	long
;	O
}	O
static	O
const	O
char	O
*	O
_vfs_get_cwd	function
(	O
void	O
)	O
{	O
char	O
*	O
p	pointer
;	O
struct	O
stat	struct
my_stat	struct
,	O
my_stat2	struct
;	O
if	O
(	O
!	O
_vfs_get_class	function
(	O
current_dir	pointer
)	O
)	O
{	O
p	pointer
=	O
g_get_current_dir	function
(	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
current_dir	pointer
;	O
if	O
(	O
!	O
cd_symlinks	int
||	O
mc_stat	function
(	O
p	pointer
,	O
&	O
my_stat	struct
)	O
||	O
mc_stat	function
(	O
current_dir	pointer
,	O
&	O
my_stat2	struct
)	O
||	O
my_stat	struct
.	O
st_ino	long
!=	O
my_stat2	struct
.	O
st_ino	long
||	O
my_stat	struct
.	O
st_dev	long
!=	O
my_stat2	struct
.	O
st_dev	long
)	O
{	O
g_free	function
(	O
current_dir	pointer
)	O
;	O
current_dir	pointer
=	O
p	pointer
;	O
return	O
p	pointer
;	O
}	O
g_free	function
(	O
p	pointer
)	O
;	O
}	O
return	O
current_dir	pointer
;	O
}	O
static	O
void	O
vfs_setup_wd	function
(	O
void	O
)	O
{	O
current_dir	pointer
=	O
g_strdup	function
(	O
PATH_SEP_STR	pointer
)	O
;	O
_vfs_get_cwd	function
(	O
)	O
;	O
if	O
(	O
strlen	function
(	O
current_dir	pointer
)	O
>	O
MC_MAXPATHLEN	O
-	O
2	int
)	O
vfs_die	function
(	O
"Current dir too long.\n"	pointer
)	O
;	O
current_vfs	pointer
=	O
vfs_get_class	function
(	O
current_dir	pointer
)	O
;	O
}	O
char	O
*	O
mc_get_current_wd	function
(	O
char	O
*	O
buffer	pointer
,	O
int	O
size	long
)	O
{	O
const	O
char	O
*	O
cwd	short
=	O
_vfs_get_cwd	function
(	O
)	O
;	O
g_strlcpy	function
(	O
buffer	pointer
,	O
cwd	short
,	O
size	long
)	O
;	O
return	O
buffer	pointer
;	O
}	O
char	O
*	O
vfs_get_current_dir	function
(	O
void	O
)	O
{	O
return	O
current_dir	pointer
;	O
}	O
off_t	long
mc_lseek	function
(	O
int	O
fd	int
,	O
off_t	long
offset	long
,	O
int	O
whence	int
)	O
{	O
struct	O
vfs_class	struct
*	O
vfs	pointer
;	O
int	O
result	long
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
vfs	pointer
=	O
vfs_op	function
(	O
fd	int
)	O
;	O
result	long
=	O
vfs	pointer
->	O
lseek	function
?	O
(	O
*	O
vfs	pointer
->	O
lseek	function
)	O
(	O
vfs_info	pointer
(	O
fd	int
)	O
,	O
offset	long
,	O
whence	int
)	O
:	O
-	O
1	int
;	O
if	O
(	O
result	long
==	O
-	O
1	int
)	O
errno	O
=	O
vfs	pointer
->	O
lseek	function
?	O
ferrno	pointer
(	O
vfs	pointer
)	O
:	O
E_NOTSUPP	O
;	O
return	O
result	long
;	O
}	O
char	O
*	O
vfs_canon	function
(	O
const	O
char	O
*	O
path	pointer
)	O
{	O
if	O
(	O
!	O
path	pointer
)	O
vfs_die	function
(	O
"Cannot canonicalize NULL"	pointer
)	O
;	O
if	O
(	O
*	O
path	pointer
!=	O
PATH_SEP	char
)	O
{	O
char	O
*	O
local	pointer
,	O
*	O
result	long
;	O
local	pointer
=	O
concat_dir_and_file	function
(	O
current_dir	pointer
,	O
path	pointer
)	O
;	O
result	long
=	O
vfs_canon	function
(	O
local	pointer
)	O
;	O
g_free	function
(	O
local	pointer
)	O
;	O
return	O
result	long
;	O
}	O
{	O
char	O
*	O
result	long
=	O
g_strdup	function
(	O
path	pointer
)	O
;	O
canonicalize_pathname	function
(	O
result	long
)	O
;	O
return	O
result	long
;	O
}	O
}	O
int	O
mc_chdir	function
(	O
const	O
char	O
*	O
path	pointer
)	O
{	O
char	O
*	O
new_dir	pointer
;	O
struct	O
vfs_class	struct
*	O
old_vfs	pointer
,	O
*	O
new_vfs	pointer
;	O
vfsid	pointer
old_vfsid	pointer
;	O
int	O
result	long
;	O
new_dir	pointer
=	O
vfs_canon	function
(	O
path	pointer
)	O
;	O
new_vfs	pointer
=	O
vfs_get_class	function
(	O
new_dir	pointer
)	O
;	O
if	O
(	O
!	O
new_vfs	pointer
->	O
chdir	function
)	O
{	O
g_free	function
(	O
new_dir	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
result	long
=	O
(	O
*	O
new_vfs	pointer
->	O
chdir	function
)	O
(	O
new_vfs	pointer
,	O
new_dir	pointer
)	O
;	O
if	O
(	O
result	long
==	O
-	O
1	int
)	O
{	O
errno	O
=	O
ferrno	pointer
(	O
new_vfs	pointer
)	O
;	O
g_free	function
(	O
new_dir	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
old_vfsid	pointer
=	O
vfs_getid	function
(	O
current_vfs	pointer
,	O
current_dir	pointer
)	O
;	O
old_vfs	pointer
=	O
current_vfs	pointer
;	O
g_free	function
(	O
current_dir	pointer
)	O
;	O
current_dir	pointer
=	O
new_dir	pointer
;	O
current_vfs	pointer
=	O
new_vfs	pointer
;	O
vfs_stamp_create	function
(	O
old_vfs	pointer
,	O
old_vfsid	pointer
)	O
;	O
if	O
(	O
*	O
current_dir	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
p	pointer
=	O
strchr	function
(	O
current_dir	pointer
,	O
0	int
)	O
-	O
1	int
;	O
if	O
(	O
*	O
p	pointer
==	O
PATH_SEP	char
&&	O
p	pointer
>	O
current_dir	pointer
)	O
*	O
p	pointer
=	O
0	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
vfs_current_is_local	function
(	O
void	O
)	O
{	O
return	O
(	O
current_vfs	pointer
->	O
flags	enum
&	O
VFSF_LOCAL	int
)	O
!=	O
0	int
;	O
}	O
int	O
vfs_file_class_flags	function
(	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
struct	O
vfs_class	struct
*	O
vfs	pointer
;	O
char	O
*	O
fname	pointer
;	O
fname	pointer
=	O
vfs_canon	function
(	O
filename	pointer
)	O
;	O
vfs	pointer
=	O
vfs_get_class	function
(	O
fname	pointer
)	O
;	O
g_free	function
(	O
fname	pointer
)	O
;	O
return	O
vfs	pointer
->	O
flags	enum
;	O
}	O
static	O
char	O
*	O
mc_def_getlocalcopy	function
(	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
char	O
*	O
tmp	pointer
;	O
int	O
fdin	int
,	O
fdout	int
,	O
i	array
;	O
char	O
buffer	pointer
[	O
8192	int
]	O
;	O
struct	O
stat	struct
mystat	struct
;	O
fdin	int
=	O
mc_open	function
(	O
filename	pointer
,	O
O_RDONLY	int
|	O
O_LINEAR	O
)	O
;	O
if	O
(	O
fdin	int
==	O
-	O
1	int
)	O
return	O
NULL	O
;	O
fdout	int
=	O
vfs_mkstemps	function
(	O
&	O
tmp	pointer
,	O
"vfs"	pointer
,	O
filename	pointer
)	O
;	O
if	O
(	O
fdout	int
==	O
-	O
1	int
)	O
goto	O
fail	O
;	O
while	O
(	O
(	O
i	array
=	O
mc_read	function
(	O
fdin	int
,	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
)	O
)	O
>	O
0	int
)	O
{	O
if	O
(	O
write	pointer
(	O
fdout	int
,	O
buffer	pointer
,	O
i	array
)	O
!=	O
i	array
)	O
goto	O
fail	O
;	O
}	O
if	O
(	O
i	array
==	O
-	O
1	int
)	O
goto	O
fail	O
;	O
i	array
=	O
mc_close	function
(	O
fdin	int
)	O
;	O
fdin	int
=	O
-	O
1	int
;	O
if	O
(	O
i	array
==	O
-	O
1	int
)	O
goto	O
fail	O
;	O
if	O
(	O
close	pointer
(	O
fdout	int
)	O
==	O
-	O
1	int
)	O
{	O
fdout	int
=	O
-	O
1	int
;	O
goto	O
fail	O
;	O
}	O
if	O
(	O
mc_stat	function
(	O
filename	pointer
,	O
&	O
mystat	struct
)	O
!=	O
-	O
1	int
)	O
{	O
chmod	function
(	O
tmp	pointer
,	O
mystat	struct
.	O
st_mode	int
)	O
;	O
}	O
return	O
tmp	pointer
;	O
fail	O
:	O
if	O
(	O
fdout	int
!=	O
-	O
1	int
)	O
close	pointer
(	O
fdout	int
)	O
;	O
if	O
(	O
fdin	int
!=	O
-	O
1	int
)	O
mc_close	function
(	O
fdin	int
)	O
;	O
g_free	function
(	O
tmp	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
char	O
*	O
mc_getlocalcopy	function
(	O
const	O
char	O
*	O
pathname	pointer
)	O
{	O
char	O
*	O
result	long
;	O
char	O
*	O
path	pointer
=	O
vfs_canon	function
(	O
pathname	pointer
)	O
;	O
struct	O
vfs_class	struct
*	O
vfs	pointer
=	O
vfs_get_class	function
(	O
path	pointer
)	O
;	O
result	long
=	O
vfs	pointer
->	O
getlocalcopy	pointer
?	O
(	O
*	O
vfs	pointer
->	O
getlocalcopy	pointer
)	O
(	O
vfs	pointer
,	O
path	pointer
)	O
:	O
mc_def_getlocalcopy	function
(	O
path	pointer
)	O
;	O
g_free	function
(	O
path	pointer
)	O
;	O
if	O
(	O
!	O
result	long
)	O
errno	O
=	O
ferrno	pointer
(	O
vfs	pointer
)	O
;	O
return	O
result	long
;	O
}	O
static	O
int	O
mc_def_ungetlocalcopy	function
(	O
struct	O
vfs_class	struct
*	O
vfs	pointer
,	O
const	O
char	O
*	O
filename	pointer
,	O
const	O
char	O
*	O
local	pointer
,	O
int	O
has_changed	int
)	O
{	O
int	O
fdin	int
=	O
-	O
1	int
,	O
fdout	int
=	O
-	O
1	int
,	O
i	array
;	O
if	O
(	O
has_changed	int
)	O
{	O
char	O
buffer	pointer
[	O
8192	int
]	O
;	O
if	O
(	O
!	O
vfs	pointer
->	O
write	pointer
)	O
goto	O
failed	O
;	O
fdin	int
=	O
open	function
(	O
local	pointer
,	O
O_RDONLY	int
)	O
;	O
if	O
(	O
fdin	int
==	O
-	O
1	int
)	O
goto	O
failed	O
;	O
fdout	int
=	O
mc_open	function
(	O
filename	pointer
,	O
O_WRONLY	int
|	O
O_TRUNC	int
)	O
;	O
if	O
(	O
fdout	int
==	O
-	O
1	int
)	O
goto	O
failed	O
;	O
while	O
(	O
(	O
i	array
=	O
read	pointer
(	O
fdin	int
,	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
)	O
)	O
>	O
0	int
)	O
{	O
if	O
(	O
mc_write	function
(	O
fdout	int
,	O
buffer	pointer
,	O
i	array
)	O
!=	O
i	array
)	O
goto	O
failed	O
;	O
}	O
if	O
(	O
i	array
==	O
-	O
1	int
)	O
goto	O
failed	O
;	O
if	O
(	O
close	pointer
(	O
fdin	int
)	O
==	O
-	O
1	int
)	O
{	O
fdin	int
=	O
-	O
1	int
;	O
goto	O
failed	O
;	O
}	O
fdin	int
=	O
-	O
1	int
;	O
if	O
(	O
mc_close	function
(	O
fdout	int
)	O
==	O
-	O
1	int
)	O
{	O
fdout	int
=	O
-	O
1	int
;	O
goto	O
failed	O
;	O
}	O
}	O
unlink	function
(	O
local	pointer
)	O
;	O
return	O
0	int
;	O
failed	O
:	O
message	pointer
(	O
1	int
,	O
_	O
(	O
"Changes to file lost"	pointer
)	O
,	O
"%s"	pointer
,	O
filename	pointer
)	O
;	O
if	O
(	O
fdout	int
!=	O
-	O
1	int
)	O
mc_close	function
(	O
fdout	int
)	O
;	O
if	O
(	O
fdin	int
!=	O
-	O
1	int
)	O
close	pointer
(	O
fdin	int
)	O
;	O
unlink	function
(	O
local	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
int	O
mc_ungetlocalcopy	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
const	O
char	O
*	O
local	pointer
,	O
int	O
has_changed	int
)	O
{	O
int	O
return_value	int
=	O
0	int
;	O
char	O
*	O
path	pointer
=	O
vfs_canon	function
(	O
pathname	pointer
)	O
;	O
struct	O
vfs_class	struct
*	O
vfs	pointer
=	O
vfs_get_class	function
(	O
path	pointer
)	O
;	O
return_value	int
=	O
vfs	pointer
->	O
ungetlocalcopy	pointer
?	O
(	O
*	O
vfs	pointer
->	O
ungetlocalcopy	pointer
)	O
(	O
vfs	pointer
,	O
path	pointer
,	O
local	pointer
,	O
has_changed	int
)	O
:	O
mc_def_ungetlocalcopy	function
(	O
vfs	pointer
,	O
path	pointer
,	O
local	pointer
,	O
has_changed	int
)	O
;	O
g_free	function
(	O
path	pointer
)	O
;	O
return	O
return_value	int
;	O
}	O
void	O
vfs_init	function
(	O
void	O
)	O
{	O
init_localfs	function
(	O
)	O
;	O
localfs_class	pointer
=	O
vfs_list	pointer
;	O
init_extfs	function
(	O
)	O
;	O
init_sfs	function
(	O
)	O
;	O
init_tarfs	function
(	O
)	O
;	O
init_cpiofs	function
(	O
)	O
;	O
tcp_init	function
(	O
)	O
;	O
init_ftpfs	function
(	O
)	O
;	O
init_fish	function
(	O
)	O
;	O
vfs_setup_wd	function
(	O
)	O
;	O
}	O
void	O
vfs_shut	function
(	O
void	O
)	O
{	O
struct	O
vfs_class	struct
*	O
vfs	pointer
;	O
vfs_gc_done	function
(	O
)	O
;	O
g_free	function
(	O
current_dir	pointer
)	O
;	O
for	O
(	O
vfs	pointer
=	O
vfs_list	pointer
;	O
vfs	pointer
;	O
vfs	pointer
=	O
vfs	pointer
->	O
next	pointer
)	O
if	O
(	O
vfs	pointer
->	O
done	pointer
)	O
(	O
*	O
vfs	pointer
->	O
done	pointer
)	O
(	O
vfs	pointer
)	O
;	O
g_slist_free	function
(	O
vfs_openfiles	pointer
)	O
;	O
}	O
void	O
vfs_fill_names	function
(	O
fill_names_f	pointer
func	pointer
)	O
{	O
struct	O
vfs_class	struct
*	O
vfs	pointer
;	O
for	O
(	O
vfs	pointer
=	O
vfs_list	pointer
;	O
vfs	pointer
;	O
vfs	pointer
=	O
vfs	pointer
->	O
next	pointer
)	O
if	O
(	O
vfs	pointer
->	O
fill_names	pointer
)	O
(	O
*	O
vfs	pointer
->	O
fill_names	pointer
)	O
(	O
vfs	pointer
,	O
func	pointer
)	O
;	O
}	O
static	O
const	O
struct	O
{	O
const	O
char	O
*	O
name	pointer
;	O
size_t	long
name_len	long
;	O
const	O
char	O
*	O
substitute	pointer
;	O
}	O
url_table	array
[	O
]	O
=	O
{	O
{	O
"ftp://"	pointer
,	O
6	int
,	O
"/#ftp:"	pointer
}	O
,	O
{	O
"mc://"	pointer
,	O
5	int
,	O
"/#mc:"	pointer
}	O
,	O
{	O
"smb://"	pointer
,	O
6	int
,	O
"/#smb:"	pointer
}	O
,	O
{	O
"sh://"	pointer
,	O
5	int
,	O
"/#sh:"	pointer
}	O
,	O
{	O
"ssh://"	pointer
,	O
6	int
,	O
"/#sh:"	pointer
}	O
,	O
{	O
"a:"	pointer
,	O
2	int
,	O
"/#a"	pointer
}	O
}	O
;	O
char	O
*	O
vfs_translate_url	function
(	O
const	O
char	O
*	O
url	pointer
)	O
{	O
size_t	long
i	array
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
sizeof	O
(	O
url_table	array
)	O
/	O
sizeof	O
(	O
url_table	array
[	O
0	int
]	O
)	O
;	O
i	array
++	O
)	O
if	O
(	O
strncmp	function
(	O
url	pointer
,	O
url_table	array
[	O
i	array
]	O
.	O
name	pointer
,	O
url_table	array
[	O
i	array
]	O
.	O
name_len	long
)	O
==	O
0	int
)	O
return	O
g_strconcat	function
(	O
url_table	array
[	O
i	array
]	O
.	O
substitute	pointer
,	O
url	pointer
+	O
url_table	array
[	O
i	array
]	O
.	O
name_len	long
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
return	O
g_strdup	function
(	O
url	pointer
)	O
;	O
}	O
int	O
vfs_file_is_local	function
(	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
return	O
vfs_file_class_flags	function
(	O
filename	pointer
)	O
&	O
VFSF_LOCAL	int
;	O
}	O
