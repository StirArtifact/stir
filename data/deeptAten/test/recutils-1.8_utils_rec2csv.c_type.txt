static	O
void	O
rec2csv_parse_args	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
;	O
static	O
bool	bool
rec2csv_process_data	function
(	O
rec_db_t	pointer
db	pointer
)	O
;	O
static	O
rec_fex_t	pointer
rec2csv_determine_fields	function
(	O
rec_rset_t	pointer
rset	pointer
)	O
;	O
static	O
void	O
rec2csv_generate_csv	function
(	O
rec_rset_t	pointer
rset	pointer
,	O
rec_fex_t	pointer
fex	pointer
)	O
;	O
char	O
*	O
rec2csv_record_type	pointer
=	O
NULL	O
;	O
rec_fex_t	pointer
rec2csv_sort_by_fields	pointer
=	O
NULL	O
;	O
char	O
rec2csv_delim	char
=	O
','	O
;	O
enum	O
{	O
COMMON_ARGS	O
,	O
RECORD_TYPE_ARG	int
,	O
SORT_ARG	int
}	O
;	O
static	O
const	O
struct	O
option	struct
GNU_longOptions	array
[	O
]	O
=	O
{	O
COMMON_LONG_ARGS	O
,	O
{	O
"type"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
RECORD_TYPE_ARG	int
}	O
,	O
{	O
"sort"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
SORT_ARG	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
void	O
recutl_print_help	function
(	O
void	O
)	O
{	O
printf	function
(	O
_	O
(	O
"Usage: rec2csv [OPTIONS]... [REC_FILE]\n"	pointer
)	O
)	O
;	O
fputs	function
(	O
_	O
(	O
"Convert rec data into csv data.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
puts	function
(	O
""	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"  -d, --delim=char                    sets the deliminator (default ',')\n  -t, --type=TYPE                     record set to convert to csv; if this parameter\n                                        is omitted then the default record set is used\n  -S, --sort=FIELDS                   sort the output by the specified fields.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
recutl_print_help_common	function
(	O
)	O
;	O
puts	function
(	O
""	pointer
)	O
;	O
recutl_print_help_footer	function
(	O
)	O
;	O
}	O
static	O
void	O
rec2csv_parse_args	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
ret	int
;	O
char	O
c	char
;	O
while	O
(	O
(	O
ret	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"t:S:d:"	pointer
,	O
GNU_longOptions	array
,	O
NULL	O
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
c	char
=	O
ret	int
;	O
switch	O
(	O
c	char
)	O
{	O
COMMON_ARGS_CASES	O
case	O
RECORD_TYPE_ARG	int
:	O
case	O
'd'	O
:	O
{	O
rec2csv_delim	char
=	O
optarg	pointer
[	O
0	int
]	O
;	O
break	O
;	O
}	O
case	O
't'	O
:	O
{	O
rec2csv_record_type	pointer
=	O
xstrdup	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
}	O
case	O
SORT_ARG	int
:	O
case	O
'S'	O
:	O
{	O
if	O
(	O
rec2csv_sort_by_fields	pointer
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"only one list of fields can be specified as a sorting criteria.\n"	pointer
)	O
)	O
;	O
}	O
if	O
(	O
!	O
rec_fex_check	function
(	O
optarg	pointer
,	O
REC_FEX_CSV	int
)	O
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"invalid field name list in -S.\n"	pointer
)	O
)	O
;	O
}	O
rec2csv_sort_by_fields	pointer
=	O
rec_fex_new	function
(	O
optarg	pointer
,	O
REC_FEX_CSV	int
)	O
;	O
if	O
(	O
!	O
rec2csv_sort_by_fields	pointer
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"internal error creating fex.\n"	pointer
)	O
)	O
;	O
}	O
break	O
;	O
}	O
default	O
:	O
{	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
}	O
}	O
static	O
void	O
rec2csv_generate_csv	function
(	O
rec_rset_t	pointer
rset	pointer
,	O
rec_fex_t	pointer
fex	pointer
)	O
{	O
rec_mset_iterator_t	struct
iter	struct
;	O
rec_fex_elem_t	pointer
fex_elem	pointer
;	O
rec_record_t	pointer
record	pointer
;	O
rec_field_t	pointer
field	pointer
;	O
char	O
*	O
field_name	pointer
;	O
char	O
*	O
tmp	pointer
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rec_fex_size	function
(	O
fex	pointer
)	O
;	O
i	long
++	O
)	O
{	O
if	O
(	O
i	long
!=	O
0	int
)	O
{	O
putc	function
(	O
rec2csv_delim	char
,	O
stdout	pointer
)	O
;	O
}	O
fex_elem	pointer
=	O
rec_fex_get	function
(	O
fex	pointer
,	O
i	long
)	O
;	O
field_name	pointer
=	O
xstrdup	function
(	O
rec_fex_elem_field_name	function
(	O
fex_elem	pointer
)	O
)	O
;	O
if	O
(	O
field_name	pointer
[	O
strlen	function
(	O
field_name	pointer
)	O
-	O
1	int
]	O
==	O
':'	O
)	O
{	O
field_name	pointer
[	O
strlen	function
(	O
field_name	pointer
)	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
if	O
(	O
rec_fex_elem_min	function
(	O
fex_elem	pointer
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
asprintf	function
(	O
&	O
tmp	pointer
,	O
"%s_%d"	pointer
,	O
field_name	pointer
,	O
rec_fex_elem_min	function
(	O
fex_elem	pointer
)	O
+	O
1	int
)	O
==	O
-	O
1	int
)	O
recutl_out_of_memory	function
(	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
asprintf	function
(	O
&	O
tmp	pointer
,	O
"%s"	pointer
,	O
field_name	pointer
)	O
==	O
-	O
1	int
)	O
recutl_out_of_memory	function
(	O
)	O
;	O
}	O
csv_fwrite	function
(	O
stdout	pointer
,	O
tmp	pointer
,	O
strlen	function
(	O
tmp	pointer
)	O
)	O
;	O
free	function
(	O
field_name	pointer
)	O
;	O
free	function
(	O
tmp	pointer
)	O
;	O
}	O
putc	function
(	O
'\n'	O
,	O
stdout	pointer
)	O
;	O
iter	struct
=	O
rec_mset_iterator	function
(	O
rec_rset_mset	function
(	O
rset	pointer
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter	struct
,	O
MSET_RECORD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
record	pointer
,	O
NULL	O
)	O
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rec_fex_size	function
(	O
fex	pointer
)	O
;	O
i	long
++	O
)	O
{	O
if	O
(	O
i	long
!=	O
0	int
)	O
{	O
putc	function
(	O
rec2csv_delim	char
,	O
stdout	pointer
)	O
;	O
}	O
fex_elem	pointer
=	O
rec_fex_get	function
(	O
fex	pointer
,	O
i	long
)	O
;	O
field	pointer
=	O
rec_record_get_field_by_name	function
(	O
record	pointer
,	O
rec_fex_elem_field_name	function
(	O
fex_elem	pointer
)	O
,	O
rec_fex_elem_min	function
(	O
fex_elem	pointer
)	O
)	O
;	O
if	O
(	O
field	pointer
)	O
{	O
csv_fwrite	function
(	O
stdout	pointer
,	O
rec_field_value	function
(	O
field	pointer
)	O
,	O
strlen	function
(	O
rec_field_value	function
(	O
field	pointer
)	O
)	O
)	O
;	O
}	O
}	O
putc	function
(	O
'\n'	O
,	O
stdout	pointer
)	O
;	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter	struct
)	O
;	O
}	O
static	O
rec_fex_t	pointer
rec2csv_determine_fields	function
(	O
rec_rset_t	pointer
rset	pointer
)	O
{	O
rec_fex_t	pointer
fields	pointer
;	O
rec_mset_iterator_t	struct
iter_rset	struct
;	O
rec_mset_iterator_t	struct
iter_record	struct
;	O
rec_record_t	pointer
record	pointer
;	O
rec_field_t	pointer
field	pointer
;	O
int	O
field_index	int
;	O
fields	pointer
=	O
rec_fex_new	function
(	O
NULL	O
,	O
REC_FEX_SIMPLE	int
)	O
;	O
iter_rset	struct
=	O
rec_mset_iterator	function
(	O
rec_rset_mset	function
(	O
rset	pointer
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter_rset	struct
,	O
MSET_RECORD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
record	pointer
,	O
NULL	O
)	O
)	O
{	O
iter_record	struct
=	O
rec_mset_iterator	function
(	O
rec_record_mset	function
(	O
record	pointer
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter_record	struct
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field	pointer
,	O
NULL	O
)	O
)	O
{	O
field_index	int
=	O
rec_record_get_field_index_by_name	function
(	O
record	pointer
,	O
field	pointer
)	O
;	O
if	O
(	O
!	O
rec_fex_member_p	function
(	O
fields	pointer
,	O
rec_field_name	function
(	O
field	pointer
)	O
,	O
field_index	int
,	O
field_index	int
)	O
)	O
{	O
rec_fex_append	function
(	O
fields	pointer
,	O
rec_field_name	function
(	O
field	pointer
)	O
,	O
field_index	int
,	O
field_index	int
)	O
;	O
}	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter_record	struct
)	O
;	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter_rset	struct
)	O
;	O
return	O
fields	pointer
;	O
}	O
static	O
bool	bool
rec2csv_process_data	function
(	O
rec_db_t	pointer
db	pointer
)	O
{	O
bool	bool
ret	int
;	O
rec_fex_t	pointer
row_fields	pointer
;	O
size_t	long
i	long
;	O
rec_rset_t	pointer
rset	pointer
;	O
ret	int
=	O
true	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rec_db_size	function
(	O
db	pointer
)	O
;	O
i	long
++	O
)	O
{	O
rset	pointer
=	O
rec_db_get_rset	function
(	O
db	pointer
,	O
i	long
)	O
;	O
if	O
(	O
(	O
(	O
rec2csv_record_type	pointer
)	O
&&	O
rec_rset_type	function
(	O
rset	pointer
)	O
&&	O
(	O
strcmp	function
(	O
rec_rset_type	function
(	O
rset	pointer
)	O
,	O
rec2csv_record_type	pointer
)	O
==	O
0	int
)	O
)	O
||	O
(	O
!	O
rec2csv_record_type	pointer
&&	O
(	O
!	O
rec_rset_type	function
(	O
rset	pointer
)	O
||	O
(	O
rec_db_size	function
(	O
db	pointer
)	O
==	O
1	int
)	O
)	O
)	O
)	O
{	O
if	O
(	O
!	O
rec_rset_sort	function
(	O
rset	pointer
,	O
rec2csv_sort_by_fields	pointer
)	O
)	O
recutl_out_of_memory	function
(	O
)	O
;	O
row_fields	pointer
=	O
rec2csv_determine_fields	function
(	O
rset	pointer
)	O
;	O
rec2csv_generate_csv	function
(	O
rset	pointer
,	O
row_fields	pointer
)	O
;	O
rec_fex_destroy	function
(	O
row_fields	pointer
)	O
;	O
}	O
}	O
return	O
ret	int
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	pointer
[	O
]	O
)	O
{	O
int	O
res	int
;	O
rec_db_t	pointer
db	pointer
;	O
res	int
=	O
0	int
;	O
recutl_init	function
(	O
"rec2csv"	pointer
)	O
;	O
rec2csv_parse_args	function
(	O
argc	int
,	O
argv	pointer
)	O
;	O
db	pointer
=	O
recutl_build_db	function
(	O
argc	int
,	O
argv	pointer
)	O
;	O
if	O
(	O
!	O
db	pointer
)	O
{	O
res	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
!	O
rec2csv_process_data	function
(	O
db	pointer
)	O
)	O
{	O
res	int
=	O
1	int
;	O
}	O
rec_db_destroy	function
(	O
db	pointer
)	O
;	O
return	O
res	int
;	O
}	O
