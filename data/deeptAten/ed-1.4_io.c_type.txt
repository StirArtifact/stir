static	O
char	O
put_tty_line	function
(	O
const	O
char	O
*	O
s	pointer
,	O
int	O
len	int
,	O
const	O
int	O
gflags	int
)	O
{	O
const	O
char	O
escapes	array
[	O
]	O
=	O
"\a\b\f\n\r\t\v\\"	pointer
;	O
const	O
char	O
escchars	array
[	O
]	O
=	O
"abfnrtv\\"	pointer
;	O
int	O
col	int
=	O
0	int
;	O
if	O
(	O
gflags	int
&	O
GNP	int
)	O
{	O
printf	function
(	O
"%d\t"	pointer
,	O
current_addr	function
(	O
)	O
)	O
;	O
col	int
=	O
8	int
;	O
}	O
while	O
(	O
--	O
len	int
>=	O
0	int
)	O
{	O
const	O
unsigned	O
char	O
ch	char
=	O
*	O
s	pointer
++	O
;	O
if	O
(	O
!	O
(	O
gflags	int
&	O
GLS	int
)	O
)	O
putchar	function
(	O
ch	char
)	O
;	O
else	O
{	O
if	O
(	O
++	O
col	int
>	O
window_columns	function
(	O
)	O
)	O
{	O
col	int
=	O
1	int
;	O
fputs	function
(	O
"\\\n"	pointer
,	O
stdout	pointer
)	O
;	O
}	O
if	O
(	O
ch	char
>=	O
32	int
&&	O
ch	char
<=	O
126	int
&&	O
ch	char
!=	O
'\\'	O
)	O
putchar	function
(	O
ch	char
)	O
;	O
else	O
{	O
char	O
*	O
cp	pointer
=	O
strchr	function
(	O
escapes	array
,	O
ch	char
)	O
;	O
++	O
col	int
;	O
putchar	function
(	O
'\\'	O
)	O
;	O
if	O
(	O
cp	pointer
)	O
putchar	function
(	O
escchars	array
[	O
cp	pointer
-	O
escapes	array
]	O
)	O
;	O
else	O
{	O
col	int
+=	O
2	int
;	O
putchar	function
(	O
(	O
(	O
ch	char
>>	O
6	int
)	O
&	O
7	int
)	O
+	O
'0'	O
)	O
;	O
putchar	function
(	O
(	O
(	O
ch	char
>>	O
3	int
)	O
&	O
7	int
)	O
+	O
'0'	O
)	O
;	O
putchar	function
(	O
(	O
ch	char
&	O
7	int
)	O
+	O
'0'	O
)	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
!	O
traditional	function
(	O
)	O
&&	O
(	O
gflags	int
&	O
GLS	int
)	O
)	O
putchar	function
(	O
'$'	O
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
return	O
1	int
;	O
}	O
char	O
display_lines	function
(	O
int	O
from	int
,	O
const	O
int	O
to	int
,	O
const	O
int	O
gflags	int
)	O
{	O
line_t	struct
*	O
ep	pointer
=	O
search_line_node	function
(	O
inc_addr	function
(	O
to	int
)	O
)	O
;	O
line_t	struct
*	O
bp	pointer
=	O
search_line_node	function
(	O
from	int
)	O
;	O
if	O
(	O
!	O
from	int
)	O
{	O
set_error_msg	function
(	O
"Invalid address"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
while	O
(	O
bp	pointer
!=	O
ep	pointer
)	O
{	O
char	O
*	O
s	pointer
=	O
get_sbuf_line	function
(	O
bp	pointer
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
return	O
0	int
;	O
set_current_addr	function
(	O
from	int
++	O
)	O
;	O
if	O
(	O
!	O
put_tty_line	function
(	O
s	pointer
,	O
bp	pointer
->	O
len	int
,	O
gflags	int
)	O
)	O
return	O
0	int
;	O
bp	pointer
=	O
bp	pointer
->	O
q_forw	pointer
;	O
}	O
return	O
1	int
;	O
}	O
static	O
char	O
trailing_escape	function
(	O
const	O
char	O
*	O
const	O
s	pointer
,	O
int	O
len	int
)	O
{	O
char	O
parity	char
=	O
0	int
;	O
while	O
(	O
--	O
len	int
>=	O
0	int
&&	O
s	pointer
[	O
len	int
]	O
==	O
'\\'	O
)	O
parity	char
=	O
!	O
parity	char
;	O
return	O
parity	char
;	O
}	O
const	O
char	O
*	O
get_extended_line	function
(	O
const	O
char	O
*	O
ibufp	pointer
,	O
int	O
*	O
lenp	pointer
,	O
const	O
char	O
nonl	char
)	O
{	O
static	O
char	O
*	O
buf	pointer
=	O
0	int
;	O
static	O
int	O
bufsz	int
=	O
0	int
;	O
int	O
len	int
;	O
for	O
(	O
len	int
=	O
0	int
;	O
ibufp	pointer
[	O
len	int
++	O
]	O
!=	O
'\n'	O
;	O
)	O
;	O
if	O
(	O
len	int
<	O
2	int
||	O
!	O
trailing_escape	function
(	O
ibufp	pointer
,	O
len	int
-	O
1	int
)	O
)	O
{	O
if	O
(	O
lenp	pointer
)	O
*	O
lenp	pointer
=	O
len	int
;	O
return	O
ibufp	pointer
;	O
}	O
if	O
(	O
!	O
resize_buffer	function
(	O
&	O
buf	pointer
,	O
&	O
bufsz	int
,	O
len	int
)	O
)	O
return	O
0	int
;	O
memcpy	function
(	O
buf	pointer
,	O
ibufp	pointer
,	O
len	int
)	O
;	O
--	O
len	int
;	O
buf	pointer
[	O
len	int
-	O
1	int
]	O
=	O
'\n'	O
;	O
if	O
(	O
nonl	char
)	O
--	O
len	int
;	O
while	O
(	O
1	int
)	O
{	O
int	O
len2	int
;	O
if	O
(	O
!	O
(	O
ibufp	pointer
=	O
get_tty_line	function
(	O
&	O
len2	int
)	O
)	O
)	O
return	O
0	int
;	O
if	O
(	O
len2	int
==	O
0	int
||	O
ibufp	pointer
[	O
len2	int
-	O
1	int
]	O
!=	O
'\n'	O
)	O
{	O
set_error_msg	function
(	O
"Unexpected end-of-file"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
!	O
resize_buffer	function
(	O
&	O
buf	pointer
,	O
&	O
bufsz	int
,	O
len	int
+	O
len2	int
)	O
)	O
return	O
0	int
;	O
memcpy	function
(	O
buf	pointer
+	O
len	int
,	O
ibufp	pointer
,	O
len2	int
)	O
;	O
len	int
+=	O
len2	int
;	O
if	O
(	O
len2	int
<	O
2	int
||	O
!	O
trailing_escape	function
(	O
buf	pointer
,	O
len	int
-	O
1	int
)	O
)	O
break	O
;	O
--	O
len	int
;	O
buf	pointer
[	O
len	int
-	O
1	int
]	O
=	O
'\n'	O
;	O
if	O
(	O
nonl	char
)	O
--	O
len	int
;	O
}	O
if	O
(	O
!	O
resize_buffer	function
(	O
&	O
buf	pointer
,	O
&	O
bufsz	int
,	O
len	int
+	O
1	int
)	O
)	O
return	O
0	int
;	O
buf	pointer
[	O
len	int
]	O
=	O
0	int
;	O
if	O
(	O
lenp	pointer
)	O
*	O
lenp	pointer
=	O
len	int
;	O
return	O
buf	pointer
;	O
}	O
const	O
char	O
*	O
get_tty_line	function
(	O
int	O
*	O
lenp	pointer
)	O
{	O
static	O
char	O
*	O
buf	pointer
=	O
0	int
;	O
static	O
int	O
bufsz	int
=	O
0	int
;	O
int	O
i	pointer
=	O
0	int
,	O
oi	int
=	O
-	O
1	int
;	O
while	O
(	O
1	int
)	O
{	O
const	O
int	O
c	int
=	O
getchar	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
if	O
(	O
ferror	function
(	O
stdin	pointer
)	O
)	O
{	O
show_strerror	function
(	O
"stdin"	pointer
,	O
errno	O
)	O
;	O
set_error_msg	function
(	O
"Cannot read stdin"	pointer
)	O
;	O
clearerr	function
(	O
stdin	pointer
)	O
;	O
if	O
(	O
lenp	pointer
)	O
*	O
lenp	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
else	O
{	O
clearerr	function
(	O
stdin	pointer
)	O
;	O
if	O
(	O
i	pointer
!=	O
oi	int
)	O
{	O
oi	int
=	O
i	pointer
;	O
continue	O
;	O
}	O
if	O
(	O
i	pointer
)	O
buf	pointer
[	O
i	pointer
]	O
=	O
0	int
;	O
if	O
(	O
lenp	pointer
)	O
*	O
lenp	pointer
=	O
i	pointer
;	O
return	O
buf	pointer
;	O
}	O
}	O
else	O
{	O
if	O
(	O
!	O
resize_buffer	function
(	O
&	O
buf	pointer
,	O
&	O
bufsz	int
,	O
i	pointer
+	O
2	int
)	O
)	O
{	O
if	O
(	O
lenp	pointer
)	O
*	O
lenp	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
buf	pointer
[	O
i	pointer
++	O
]	O
=	O
c	int
;	O
if	O
(	O
!	O
c	int
)	O
set_binary	function
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
'\n'	O
)	O
continue	O
;	O
buf	pointer
[	O
i	pointer
]	O
=	O
0	int
;	O
if	O
(	O
lenp	pointer
)	O
*	O
lenp	pointer
=	O
i	pointer
;	O
return	O
buf	pointer
;	O
}	O
}	O
}	O
static	O
const	O
char	O
*	O
read_stream_line	function
(	O
FILE	struct
*	O
fp	pointer
,	O
int	O
*	O
lenp	pointer
,	O
char	O
*	O
newline_added_now	pointer
)	O
{	O
static	O
char	O
*	O
buf	pointer
=	O
0	int
;	O
static	O
int	O
bufsz	int
=	O
0	int
;	O
int	O
c	int
,	O
i	pointer
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
!	O
resize_buffer	function
(	O
&	O
buf	pointer
,	O
&	O
bufsz	int
,	O
i	pointer
+	O
2	int
)	O
)	O
return	O
0	int
;	O
c	int
=	O
getc	function
(	O
fp	pointer
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
buf	pointer
[	O
i	pointer
++	O
]	O
=	O
c	int
;	O
if	O
(	O
!	O
c	int
)	O
set_binary	function
(	O
)	O
;	O
else	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
break	O
;	O
}	O
buf	pointer
[	O
i	pointer
]	O
=	O
0	int
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
if	O
(	O
ferror	function
(	O
fp	pointer
)	O
)	O
{	O
show_strerror	function
(	O
0	int
,	O
errno	O
)	O
;	O
set_error_msg	function
(	O
"Cannot read input file"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
i	pointer
)	O
{	O
buf	pointer
[	O
i	pointer
]	O
=	O
'\n'	O
;	O
buf	pointer
[	O
i	pointer
+	O
1	int
]	O
=	O
0	int
;	O
*	O
newline_added_now	pointer
=	O
1	int
;	O
if	O
(	O
!	O
isbinary	function
(	O
)	O
)	O
++	O
i	pointer
;	O
}	O
}	O
*	O
lenp	pointer
=	O
i	pointer
;	O
return	O
buf	pointer
;	O
}	O
static	O
long	O
read_stream	function
(	O
FILE	struct
*	O
fp	pointer
,	O
const	O
int	O
addr	int
)	O
{	O
line_t	struct
*	O
lp	pointer
=	O
search_line_node	function
(	O
addr	int
)	O
;	O
undo_t	struct
*	O
up	pointer
=	O
0	int
;	O
long	O
size	pointer
=	O
0	int
;	O
const	O
char	O
o_isbinary	char
=	O
isbinary	function
(	O
)	O
;	O
const	O
char	O
appended	char
=	O
(	O
addr	int
==	O
last_addr	function
(	O
)	O
)	O
;	O
char	O
newline_added_now	pointer
=	O
0	int
;	O
set_current_addr	function
(	O
addr	int
)	O
;	O
while	O
(	O
1	int
)	O
{	O
int	O
len	int
=	O
0	int
;	O
const	O
char	O
*	O
buf	pointer
=	O
read_stream_line	function
(	O
fp	pointer
,	O
&	O
len	int
,	O
&	O
newline_added_now	pointer
)	O
;	O
if	O
(	O
!	O
buf	pointer
)	O
return	O
-	O
1	int
;	O
if	O
(	O
len	int
>	O
0	int
)	O
size	pointer
+=	O
len	int
;	O
else	O
break	O
;	O
disable_interrupts	function
(	O
)	O
;	O
if	O
(	O
!	O
put_sbuf_line	function
(	O
buf	pointer
,	O
current_addr	function
(	O
)	O
)	O
)	O
{	O
enable_interrupts	function
(	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
lp	pointer
=	O
lp	pointer
->	O
q_forw	pointer
;	O
if	O
(	O
up	pointer
)	O
up	pointer
->	O
tail	pointer
=	O
lp	pointer
;	O
else	O
if	O
(	O
!	O
(	O
up	pointer
=	O
push_undo_atom	function
(	O
UADD	int
,	O
-	O
1	int
,	O
-	O
1	int
)	O
)	O
)	O
{	O
enable_interrupts	function
(	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
enable_interrupts	function
(	O
)	O
;	O
}	O
if	O
(	O
addr	int
&&	O
appended	char
&&	O
size	pointer
&&	O
o_isbinary	char
&&	O
newline_added	function
(	O
)	O
)	O
fputs	function
(	O
"Newline inserted\n"	pointer
,	O
stderr	pointer
)	O
;	O
else	O
if	O
(	O
newline_added_now	pointer
&&	O
appended	char
)	O
fputs	function
(	O
"Newline appended\n"	pointer
,	O
stderr	pointer
)	O
;	O
if	O
(	O
isbinary	function
(	O
)	O
&&	O
!	O
o_isbinary	char
&&	O
newline_added_now	pointer
&&	O
!	O
appended	char
)	O
++	O
size	pointer
;	O
if	O
(	O
!	O
size	pointer
)	O
newline_added_now	pointer
=	O
1	int
;	O
if	O
(	O
appended	char
&&	O
newline_added_now	pointer
)	O
set_newline_added	function
(	O
)	O
;	O
return	O
size	pointer
;	O
}	O
int	O
read_file	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
const	O
int	O
addr	int
)	O
{	O
FILE	struct
*	O
fp	pointer
;	O
long	O
size	pointer
;	O
if	O
(	O
*	O
filename	pointer
==	O
'!'	O
)	O
fp	pointer
=	O
popen	function
(	O
filename	pointer
+	O
1	int
,	O
"r"	pointer
)	O
;	O
else	O
fp	pointer
=	O
fopen	function
(	O
strip_escapes	function
(	O
filename	pointer
)	O
,	O
"r"	pointer
)	O
;	O
if	O
(	O
!	O
fp	pointer
)	O
{	O
show_strerror	function
(	O
filename	pointer
,	O
errno	O
)	O
;	O
set_error_msg	function
(	O
"Cannot open input file"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
size	pointer
=	O
read_stream	function
(	O
fp	pointer
,	O
addr	int
)	O
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
(	O
*	O
filename	pointer
==	O
'!'	O
)	O
?	O
pclose	function
(	O
fp	pointer
)	O
:	O
fclose	function
(	O
fp	pointer
)	O
)	O
<	O
0	int
)	O
{	O
show_strerror	function
(	O
filename	pointer
,	O
errno	O
)	O
;	O
set_error_msg	function
(	O
"Cannot close input file"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
!	O
scripted	function
(	O
)	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%lu\n"	pointer
,	O
size	pointer
)	O
;	O
return	O
current_addr	function
(	O
)	O
-	O
addr	int
;	O
}	O
static	O
long	O
write_stream	function
(	O
FILE	struct
*	O
fp	pointer
,	O
int	O
from	int
,	O
const	O
int	O
to	int
)	O
{	O
line_t	struct
*	O
lp	pointer
=	O
search_line_node	function
(	O
from	int
)	O
;	O
long	O
size	pointer
=	O
0	int
;	O
while	O
(	O
from	int
&&	O
from	int
<=	O
to	int
)	O
{	O
int	O
len	int
;	O
char	O
*	O
s	pointer
=	O
get_sbuf_line	function
(	O
lp	pointer
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
return	O
-	O
1	int
;	O
len	int
=	O
lp	pointer
->	O
len	int
;	O
if	O
(	O
from	int
!=	O
last_addr	function
(	O
)	O
||	O
!	O
isbinary	function
(	O
)	O
||	O
!	O
newline_added	function
(	O
)	O
)	O
s	pointer
[	O
len	int
++	O
]	O
=	O
'\n'	O
;	O
size	pointer
+=	O
len	int
;	O
while	O
(	O
--	O
len	int
>=	O
0	int
)	O
if	O
(	O
fputc	function
(	O
*	O
s	pointer
++	O
,	O
fp	pointer
)	O
<	O
0	int
)	O
{	O
show_strerror	function
(	O
0	int
,	O
errno	O
)	O
;	O
set_error_msg	function
(	O
"Cannot write file"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
++	O
from	int
;	O
lp	pointer
=	O
lp	pointer
->	O
q_forw	pointer
;	O
}	O
return	O
size	pointer
;	O
}	O
int	O
write_file	function
(	O
const	O
char	O
*	O
const	O
filename	pointer
,	O
const	O
char	O
*	O
const	O
mode	pointer
,	O
const	O
int	O
from	int
,	O
const	O
int	O
to	int
)	O
{	O
FILE	struct
*	O
fp	pointer
;	O
long	O
size	pointer
;	O
if	O
(	O
*	O
filename	pointer
==	O
'!'	O
)	O
fp	pointer
=	O
popen	function
(	O
filename	pointer
+	O
1	int
,	O
"w"	pointer
)	O
;	O
else	O
fp	pointer
=	O
fopen	function
(	O
strip_escapes	function
(	O
filename	pointer
)	O
,	O
mode	pointer
)	O
;	O
if	O
(	O
!	O
fp	pointer
)	O
{	O
show_strerror	function
(	O
filename	pointer
,	O
errno	O
)	O
;	O
set_error_msg	function
(	O
"Cannot open output file"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
size	pointer
=	O
write_stream	function
(	O
fp	pointer
,	O
from	int
,	O
to	int
)	O
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
(	O
*	O
filename	pointer
==	O
'!'	O
)	O
?	O
pclose	function
(	O
fp	pointer
)	O
:	O
fclose	function
(	O
fp	pointer
)	O
)	O
<	O
0	int
)	O
{	O
show_strerror	function
(	O
filename	pointer
,	O
errno	O
)	O
;	O
set_error_msg	function
(	O
"Cannot close output file"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
!	O
scripted	function
(	O
)	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%lu\n"	pointer
,	O
size	pointer
)	O
;	O
return	O
(	O
from	int
&&	O
from	int
<=	O
to	int
)	O
?	O
to	int
-	O
from	int
+	O
1	int
:	O
0	int
;	O
}	O
