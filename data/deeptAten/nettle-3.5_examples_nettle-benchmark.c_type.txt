static	O
double	O
frequency	double
=	O
0.0	int
;	O
static	O
void	O
NORETURN	O
PRINTF_STYLE	O
(	O
1	int
,	O
2	int
)	O
die	function
(	O
const	O
char	O
*	O
format	pointer
,	O
...	O
)	O
{	O
va_list	array
args	array
;	O
va_start	O
(	O
args	array
,	O
format	pointer
)	O
;	O
vfprintf	function
(	O
stderr	pointer
,	O
format	pointer
,	O
args	array
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
static	O
double	O
overhead	double
=	O
0.0	int
;	O
static	O
double	O
time_function	function
(	O
void	O
(	O
*	O
f	pointer
)	O
(	O
void	O
*	O
arg	pointer
)	O
,	O
void	O
*	O
arg	pointer
)	O
{	O
unsigned	O
ncalls	int
;	O
double	O
elapsed	double
;	O
for	O
(	O
ncalls	int
=	O
10	int
;	O
;	O
)	O
{	O
unsigned	O
i	char
;	O
time_start	pointer
(	O
)	O
;	O
for	O
(	O
i	char
=	O
0	int
;	O
i	char
<	O
ncalls	int
;	O
i	char
++	O
)	O
f	pointer
(	O
arg	pointer
)	O
;	O
elapsed	double
=	O
time_end	pointer
(	O
)	O
;	O
if	O
(	O
elapsed	double
>	O
BENCH_INTERVAL	int
)	O
break	O
;	O
else	O
if	O
(	O
elapsed	double
<	O
BENCH_INTERVAL	int
/	O
10	int
)	O
ncalls	int
*=	O
10	int
;	O
else	O
ncalls	int
*=	O
2	int
;	O
}	O
return	O
elapsed	double
/	O
ncalls	int
-	O
overhead	double
;	O
}	O
static	O
void	O
bench_nothing	function
(	O
void	O
*	O
arg	pointer
UNUSED	O
)	O
{	O
return	O
;	O
}	O
struct	O
bench_memxor_info	struct
{	O
void	O
*	O
dst	pointer
;	O
const	O
void	O
*	O
src	pointer
;	O
const	O
void	O
*	O
other	pointer
;	O
}	O
;	O
static	O
void	O
bench_memxor	function
(	O
void	O
*	O
arg	pointer
)	O
{	O
struct	O
bench_memxor_info	struct
*	O
info	pointer
=	O
arg	pointer
;	O
memxor	O
(	O
info	pointer
->	O
dst	pointer
,	O
info	pointer
->	O
src	pointer
,	O
BENCH_BLOCK	int
)	O
;	O
}	O
static	O
void	O
bench_memxor3	function
(	O
void	O
*	O
arg	pointer
)	O
{	O
struct	O
bench_memxor_info	struct
*	O
info	pointer
=	O
arg	pointer
;	O
memxor3	O
(	O
info	pointer
->	O
dst	pointer
,	O
info	pointer
->	O
src	pointer
,	O
info	pointer
->	O
other	pointer
,	O
BENCH_BLOCK	int
)	O
;	O
}	O
struct	O
bench_hash_info	struct
{	O
void	O
*	O
ctx	pointer
;	O
nettle_hash_update_func	function
*	O
update	pointer
;	O
const	O
uint8_t	char
*	O
data	pointer
;	O
}	O
;	O
static	O
void	O
bench_hash	function
(	O
void	O
*	O
arg	pointer
)	O
{	O
struct	O
bench_hash_info	struct
*	O
info	pointer
=	O
arg	pointer
;	O
info	pointer
->	O
update	pointer
(	O
info	pointer
->	O
ctx	pointer
,	O
BENCH_BLOCK	int
,	O
info	pointer
->	O
data	pointer
)	O
;	O
}	O
struct	O
bench_cipher_info	struct
{	O
void	O
*	O
ctx	pointer
;	O
nettle_cipher_func	function
*	O
crypt	pointer
;	O
uint8_t	char
*	O
data	pointer
;	O
}	O
;	O
static	O
void	O
bench_cipher	function
(	O
void	O
*	O
arg	pointer
)	O
{	O
struct	O
bench_cipher_info	struct
*	O
info	pointer
=	O
arg	pointer
;	O
info	pointer
->	O
crypt	pointer
(	O
info	pointer
->	O
ctx	pointer
,	O
BENCH_BLOCK	int
,	O
info	pointer
->	O
data	pointer
,	O
info	pointer
->	O
data	pointer
)	O
;	O
}	O
struct	O
bench_cbc_info	struct
{	O
void	O
*	O
ctx	pointer
;	O
nettle_cipher_func	function
*	O
crypt	pointer
;	O
const	O
uint8_t	char
*	O
src	pointer
;	O
uint8_t	char
*	O
dst	pointer
;	O
unsigned	O
block_size	long
;	O
uint8_t	char
*	O
iv	pointer
;	O
}	O
;	O
static	O
void	O
bench_cbc_encrypt	function
(	O
void	O
*	O
arg	pointer
)	O
{	O
struct	O
bench_cbc_info	struct
*	O
info	pointer
=	O
arg	pointer
;	O
cbc_encrypt	O
(	O
info	pointer
->	O
ctx	pointer
,	O
info	pointer
->	O
crypt	pointer
,	O
info	pointer
->	O
block_size	long
,	O
info	pointer
->	O
iv	pointer
,	O
BENCH_BLOCK	int
,	O
info	pointer
->	O
dst	pointer
,	O
info	pointer
->	O
src	pointer
)	O
;	O
}	O
static	O
void	O
bench_cbc_decrypt	function
(	O
void	O
*	O
arg	pointer
)	O
{	O
struct	O
bench_cbc_info	struct
*	O
info	pointer
=	O
arg	pointer
;	O
cbc_decrypt	O
(	O
info	pointer
->	O
ctx	pointer
,	O
info	pointer
->	O
crypt	pointer
,	O
info	pointer
->	O
block_size	long
,	O
info	pointer
->	O
iv	pointer
,	O
BENCH_BLOCK	int
,	O
info	pointer
->	O
dst	pointer
,	O
info	pointer
->	O
src	pointer
)	O
;	O
}	O
static	O
void	O
bench_ctr	function
(	O
void	O
*	O
arg	pointer
)	O
{	O
struct	O
bench_cbc_info	struct
*	O
info	pointer
=	O
arg	pointer
;	O
ctr_crypt	O
(	O
info	pointer
->	O
ctx	pointer
,	O
info	pointer
->	O
crypt	pointer
,	O
info	pointer
->	O
block_size	long
,	O
info	pointer
->	O
iv	pointer
,	O
BENCH_BLOCK	int
,	O
info	pointer
->	O
dst	pointer
,	O
info	pointer
->	O
src	pointer
)	O
;	O
}	O
struct	O
bench_aead_info	struct
{	O
void	O
*	O
ctx	pointer
;	O
nettle_crypt_func	function
*	O
crypt	pointer
;	O
nettle_hash_update_func	function
*	O
update	pointer
;	O
uint8_t	char
*	O
data	pointer
;	O
}	O
;	O
static	O
void	O
bench_aead_crypt	function
(	O
void	O
*	O
arg	pointer
)	O
{	O
const	O
struct	O
bench_aead_info	struct
*	O
info	pointer
=	O
arg	pointer
;	O
info	pointer
->	O
crypt	pointer
(	O
info	pointer
->	O
ctx	pointer
,	O
BENCH_BLOCK	int
,	O
info	pointer
->	O
data	pointer
,	O
info	pointer
->	O
data	pointer
)	O
;	O
}	O
static	O
void	O
bench_aead_update	function
(	O
void	O
*	O
arg	pointer
)	O
{	O
const	O
struct	O
bench_aead_info	struct
*	O
info	pointer
=	O
arg	pointer
;	O
info	pointer
->	O
update	pointer
(	O
info	pointer
->	O
ctx	pointer
,	O
BENCH_BLOCK	int
,	O
info	pointer
->	O
data	pointer
)	O
;	O
}	O
static	O
void	O
init_data	function
(	O
uint8_t	char
*	O
data	pointer
)	O
{	O
unsigned	O
i	char
,	O
j	char
;	O
for	O
(	O
i	char
=	O
j	char
=	O
0	int
;	O
i	char
<	O
BENCH_BLOCK	int
;	O
i	char
++	O
)	O
{	O
if	O
(	O
j	char
*	O
j	char
<	O
i	char
)	O
j	char
++	O
;	O
data	pointer
[	O
i	char
]	O
=	O
j	char
;	O
}	O
}	O
static	O
void	O
init_key	function
(	O
unsigned	O
length	long
,	O
uint8_t	char
*	O
key	pointer
)	O
{	O
unsigned	O
i	char
;	O
for	O
(	O
i	char
=	O
0	int
;	O
i	char
<	O
length	long
;	O
i	char
++	O
)	O
key	pointer
[	O
i	char
]	O
=	O
i	char
;	O
}	O
static	O
void	O
init_nonce	function
(	O
unsigned	O
length	long
,	O
uint8_t	char
*	O
nonce	pointer
)	O
{	O
unsigned	O
i	char
;	O
for	O
(	O
i	char
=	O
0	int
;	O
i	char
<	O
length	long
;	O
i	char
++	O
)	O
nonce	pointer
[	O
i	char
]	O
=	O
3	int
*	O
i	char
;	O
}	O
static	O
void	O
header	function
(	O
void	O
)	O
{	O
printf	function
(	O
"%18s %12s Mbyte/s%s\n"	pointer
,	O
"Algorithm"	pointer
,	O
"mode"	pointer
,	O
frequency	double
>	O
0.0	int
?	O
" cycles/byte cycles/block"	pointer
:	O
""	pointer
)	O
;	O
}	O
static	O
void	O
display	function
(	O
const	O
char	O
*	O
name	pointer
,	O
const	O
char	O
*	O
mode	pointer
,	O
unsigned	O
block_size	long
,	O
double	O
time	function
)	O
{	O
printf	function
(	O
"%18s %12s %7.2f"	pointer
,	O
name	pointer
,	O
mode	pointer
,	O
BENCH_BLOCK	int
/	O
(	O
time	function
*	O
1048576.0	int
)	O
)	O
;	O
if	O
(	O
frequency	double
>	O
0.0	int
)	O
{	O
printf	function
(	O
" %11.2f"	pointer
,	O
time	function
*	O
frequency	double
/	O
BENCH_BLOCK	int
)	O
;	O
if	O
(	O
block_size	long
>	O
0	int
)	O
printf	function
(	O
" %12.2f"	pointer
,	O
time	function
*	O
frequency	double
*	O
block_size	long
/	O
BENCH_BLOCK	int
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
static	O
void	O
*	O
xalloc	function
(	O
size_t	long
size	long
)	O
{	O
void	O
*	O
p	pointer
=	O
malloc	function
(	O
size	long
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
die	function
(	O
"Virtual memory exhausted.\n"	pointer
)	O
;	O
return	O
p	pointer
;	O
}	O
static	O
void	O
time_overhead	function
(	O
void	O
)	O
{	O
overhead	double
=	O
time_function	function
(	O
bench_nothing	function
,	O
NULL	O
)	O
;	O
printf	function
(	O
"benchmark call overhead: %7f us"	pointer
,	O
overhead	double
*	O
1e6	int
)	O
;	O
if	O
(	O
frequency	double
>	O
0.0	int
)	O
printf	function
(	O
"%7.2f cycles\n"	pointer
,	O
overhead	double
*	O
frequency	double
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
static	O
void	O
time_memxor	function
(	O
void	O
)	O
{	O
struct	O
bench_memxor_info	struct
info	pointer
;	O
unsigned	O
long	O
src	pointer
[	O
BENCH_BLOCK	int
/	O
sizeof	O
(	O
long	O
)	O
+	O
2	int
]	O
;	O
unsigned	O
long	O
other	pointer
[	O
BENCH_BLOCK	int
/	O
sizeof	O
(	O
long	O
)	O
+	O
2	int
]	O
;	O
unsigned	O
long	O
dst	pointer
[	O
BENCH_BLOCK	int
/	O
sizeof	O
(	O
long	O
)	O
+	O
1	int
]	O
;	O
info	pointer
.	O
src	pointer
=	O
src	pointer
;	O
info	pointer
.	O
dst	pointer
=	O
dst	pointer
;	O
display	function
(	O
"memxor"	pointer
,	O
"aligned"	pointer
,	O
sizeof	O
(	O
unsigned	O
long	O
)	O
,	O
time_function	function
(	O
bench_memxor	function
,	O
&	O
info	pointer
)	O
)	O
;	O
info	pointer
.	O
src	pointer
=	O
(	O
const	O
char	O
*	O
)	O
src	pointer
+	O
1	int
;	O
display	function
(	O
"memxor"	pointer
,	O
"unaligned"	pointer
,	O
sizeof	O
(	O
unsigned	O
long	O
)	O
,	O
time_function	function
(	O
bench_memxor	function
,	O
&	O
info	pointer
)	O
)	O
;	O
info	pointer
.	O
src	pointer
=	O
src	pointer
;	O
info	pointer
.	O
other	pointer
=	O
other	pointer
;	O
display	function
(	O
"memxor3"	pointer
,	O
"aligned"	pointer
,	O
sizeof	O
(	O
unsigned	O
long	O
)	O
,	O
time_function	function
(	O
bench_memxor3	function
,	O
&	O
info	pointer
)	O
)	O
;	O
info	pointer
.	O
other	pointer
=	O
(	O
const	O
char	O
*	O
)	O
other	pointer
+	O
1	int
;	O
display	function
(	O
"memxor3"	pointer
,	O
"unaligned01"	pointer
,	O
sizeof	O
(	O
unsigned	O
long	O
)	O
,	O
time_function	function
(	O
bench_memxor3	function
,	O
&	O
info	pointer
)	O
)	O
;	O
info	pointer
.	O
src	pointer
=	O
(	O
const	O
char	O
*	O
)	O
src	pointer
+	O
1	int
;	O
display	function
(	O
"memxor3"	pointer
,	O
"unaligned11"	pointer
,	O
sizeof	O
(	O
unsigned	O
long	O
)	O
,	O
time_function	function
(	O
bench_memxor3	function
,	O
&	O
info	pointer
)	O
)	O
;	O
info	pointer
.	O
other	pointer
=	O
(	O
const	O
char	O
*	O
)	O
other	pointer
+	O
2	int
;	O
display	function
(	O
"memxor3"	pointer
,	O
"unaligned12"	pointer
,	O
sizeof	O
(	O
unsigned	O
long	O
)	O
,	O
time_function	function
(	O
bench_memxor3	function
,	O
&	O
info	pointer
)	O
)	O
;	O
}	O
static	O
void	O
time_hash	function
(	O
const	O
struct	O
nettle_hash	struct
*	O
hash	pointer
)	O
{	O
static	O
uint8_t	char
data	pointer
[	O
BENCH_BLOCK	int
]	O
;	O
struct	O
bench_hash_info	struct
info	pointer
;	O
info	pointer
.	O
ctx	pointer
=	O
xalloc	function
(	O
hash	pointer
->	O
context_size	int
)	O
;	O
info	pointer
.	O
update	pointer
=	O
hash	pointer
->	O
update	pointer
;	O
info	pointer
.	O
data	pointer
=	O
data	pointer
;	O
init_data	function
(	O
data	pointer
)	O
;	O
hash	pointer
->	O
init	pointer
(	O
info	pointer
.	O
ctx	pointer
)	O
;	O
display	function
(	O
hash	pointer
->	O
name	pointer
,	O
"update"	pointer
,	O
hash	pointer
->	O
block_size	long
,	O
time_function	function
(	O
bench_hash	function
,	O
&	O
info	pointer
)	O
)	O
;	O
free	function
(	O
info	pointer
.	O
ctx	pointer
)	O
;	O
}	O
static	O
void	O
time_umac	function
(	O
void	O
)	O
{	O
static	O
uint8_t	char
data	pointer
[	O
BENCH_BLOCK	int
]	O
;	O
struct	O
bench_hash_info	struct
info	pointer
;	O
struct	O
umac32_ctx	struct
ctx32	struct
;	O
struct	O
umac64_ctx	struct
ctx64	struct
;	O
struct	O
umac96_ctx	struct
ctx96	struct
;	O
struct	O
umac128_ctx	struct
ctx128	struct
;	O
uint8_t	char
key	pointer
[	O
16	int
]	O
;	O
umac32_set_key	O
(	O
&	O
ctx32	struct
,	O
key	pointer
)	O
;	O
info	pointer
.	O
ctx	pointer
=	O
&	O
ctx32	struct
;	O
info	pointer
.	O
update	pointer
=	O
(	O
nettle_hash_update_func	function
*	O
)	O
umac32_update	O
;	O
info	pointer
.	O
data	pointer
=	O
data	pointer
;	O
display	function
(	O
"umac32"	pointer
,	O
"update"	pointer
,	O
UMAC_BLOCK_SIZE	int
,	O
time_function	function
(	O
bench_hash	function
,	O
&	O
info	pointer
)	O
)	O
;	O
umac64_set_key	O
(	O
&	O
ctx64	struct
,	O
key	pointer
)	O
;	O
info	pointer
.	O
ctx	pointer
=	O
&	O
ctx64	struct
;	O
info	pointer
.	O
update	pointer
=	O
(	O
nettle_hash_update_func	function
*	O
)	O
umac64_update	O
;	O
info	pointer
.	O
data	pointer
=	O
data	pointer
;	O
display	function
(	O
"umac64"	pointer
,	O
"update"	pointer
,	O
UMAC_BLOCK_SIZE	int
,	O
time_function	function
(	O
bench_hash	function
,	O
&	O
info	pointer
)	O
)	O
;	O
umac96_set_key	O
(	O
&	O
ctx96	struct
,	O
key	pointer
)	O
;	O
info	pointer
.	O
ctx	pointer
=	O
&	O
ctx96	struct
;	O
info	pointer
.	O
update	pointer
=	O
(	O
nettle_hash_update_func	function
*	O
)	O
umac96_update	O
;	O
info	pointer
.	O
data	pointer
=	O
data	pointer
;	O
display	function
(	O
"umac96"	pointer
,	O
"update"	pointer
,	O
UMAC_BLOCK_SIZE	int
,	O
time_function	function
(	O
bench_hash	function
,	O
&	O
info	pointer
)	O
)	O
;	O
umac128_set_key	O
(	O
&	O
ctx128	struct
,	O
key	pointer
)	O
;	O
info	pointer
.	O
ctx	pointer
=	O
&	O
ctx128	struct
;	O
info	pointer
.	O
update	pointer
=	O
(	O
nettle_hash_update_func	function
*	O
)	O
umac128_update	O
;	O
info	pointer
.	O
data	pointer
=	O
data	pointer
;	O
display	function
(	O
"umac128"	pointer
,	O
"update"	pointer
,	O
UMAC_BLOCK_SIZE	int
,	O
time_function	function
(	O
bench_hash	function
,	O
&	O
info	pointer
)	O
)	O
;	O
}	O
static	O
void	O
time_cmac	function
(	O
void	O
)	O
{	O
static	O
uint8_t	char
data	pointer
[	O
BENCH_BLOCK	int
]	O
;	O
struct	O
bench_hash_info	struct
info	pointer
;	O
struct	O
cmac_aes128_ctx	struct
ctx	pointer
;	O
uint8_t	char
key	pointer
[	O
16	int
]	O
;	O
cmac_aes128_set_key	O
(	O
&	O
ctx	pointer
,	O
key	pointer
)	O
;	O
info	pointer
.	O
ctx	pointer
=	O
&	O
ctx	pointer
;	O
info	pointer
.	O
update	pointer
=	O
(	O
nettle_hash_update_func	function
*	O
)	O
cmac_aes128_update	O
;	O
info	pointer
.	O
data	pointer
=	O
data	pointer
;	O
display	function
(	O
"cmac-aes128"	pointer
,	O
"update"	pointer
,	O
AES_BLOCK_SIZE	int
,	O
time_function	function
(	O
bench_hash	function
,	O
&	O
info	pointer
)	O
)	O
;	O
}	O
static	O
void	O
time_poly1305_aes	function
(	O
void	O
)	O
{	O
static	O
uint8_t	char
data	pointer
[	O
BENCH_BLOCK	int
]	O
;	O
struct	O
bench_hash_info	struct
info	pointer
;	O
struct	O
poly1305_aes_ctx	struct
ctx	pointer
;	O
uint8_t	char
key	pointer
[	O
32	int
]	O
;	O
poly1305_aes_set_key	O
(	O
&	O
ctx	pointer
,	O
key	pointer
)	O
;	O
info	pointer
.	O
ctx	pointer
=	O
&	O
ctx	pointer
;	O
info	pointer
.	O
update	pointer
=	O
(	O
nettle_hash_update_func	function
*	O
)	O
poly1305_aes_update	O
;	O
info	pointer
.	O
data	pointer
=	O
data	pointer
;	O
display	function
(	O
"poly1305-aes"	pointer
,	O
"update"	pointer
,	O
1024	int
,	O
time_function	function
(	O
bench_hash	function
,	O
&	O
info	pointer
)	O
)	O
;	O
}	O
struct	O
bench_hmac_info	struct
{	O
void	O
*	O
ctx	pointer
;	O
nettle_hash_update_func	function
*	O
update	pointer
;	O
nettle_hash_digest_func	function
*	O
digest	pointer
;	O
size_t	long
length	long
;	O
size_t	long
digest_length	long
;	O
const	O
uint8_t	char
*	O
data	pointer
;	O
}	O
;	O
static	O
void	O
bench_hmac	function
(	O
void	O
*	O
arg	pointer
)	O
{	O
struct	O
bench_hmac_info	struct
*	O
info	pointer
=	O
arg	pointer
;	O
uint8_t	char
digest	pointer
[	O
NETTLE_MAX_HASH_DIGEST_SIZE	int
]	O
;	O
size_t	long
pos	long
,	O
length	long
;	O
length	long
=	O
info	pointer
->	O
length	long
;	O
for	O
(	O
pos	long
=	O
0	int
;	O
pos	long
<	O
BENCH_BLOCK	int
;	O
pos	long
+=	O
length	long
)	O
{	O
size_t	long
single	long
=	O
pos	long
+	O
length	long
<	O
BENCH_BLOCK	int
?	O
length	long
:	O
BENCH_BLOCK	int
-	O
pos	long
;	O
info	pointer
->	O
update	pointer
(	O
info	pointer
->	O
ctx	pointer
,	O
single	long
,	O
info	pointer
->	O
data	pointer
+	O
pos	long
)	O
;	O
info	pointer
->	O
digest	pointer
(	O
info	pointer
->	O
ctx	pointer
,	O
info	pointer
->	O
digest_length	long
,	O
digest	pointer
)	O
;	O
}	O
}	O
static	O
const	O
struct	O
{	O
size_t	long
length	long
;	O
const	O
char	O
*	O
msg	pointer
;	O
}	O
hmac_tests	array
[	O
]	O
=	O
{	O
{	O
64	int
,	O
"64 bytes"	pointer
}	O
,	O
{	O
256	int
,	O
"256 bytes"	pointer
}	O
,	O
{	O
1024	int
,	O
"1024 bytes"	pointer
}	O
,	O
{	O
4096	int
,	O
"4096 bytes"	pointer
}	O
,	O
{	O
BENCH_BLOCK	int
,	O
"single msg"	pointer
}	O
,	O
{	O
0	int
,	O
NULL	O
}	O
,	O
}	O
;	O
static	O
void	O
time_hmac_md5	function
(	O
void	O
)	O
{	O
static	O
uint8_t	char
data	pointer
[	O
BENCH_BLOCK	int
]	O
;	O
struct	O
bench_hmac_info	struct
info	pointer
;	O
struct	O
hmac_md5_ctx	struct
md5_ctx	struct
;	O
unsigned	O
int	O
pos	long
;	O
init_data	function
(	O
data	pointer
)	O
;	O
info	pointer
.	O
data	pointer
=	O
data	pointer
;	O
hmac_md5_set_key	O
(	O
&	O
md5_ctx	struct
,	O
MD5_BLOCK_SIZE	int
,	O
data	pointer
)	O
;	O
info	pointer
.	O
ctx	pointer
=	O
&	O
md5_ctx	struct
;	O
info	pointer
.	O
update	pointer
=	O
(	O
nettle_hash_update_func	function
*	O
)	O
hmac_md5_update	O
;	O
info	pointer
.	O
digest	pointer
=	O
(	O
nettle_hash_digest_func	function
*	O
)	O
hmac_md5_digest	O
;	O
info	pointer
.	O
digest_length	long
=	O
MD5_DIGEST_SIZE	int
;	O
for	O
(	O
pos	long
=	O
0	int
;	O
hmac_tests	array
[	O
pos	long
]	O
.	O
length	long
!=	O
0	int
;	O
pos	long
++	O
)	O
{	O
info	pointer
.	O
length	long
=	O
hmac_tests	array
[	O
pos	long
]	O
.	O
length	long
;	O
display	function
(	O
"hmac-md5"	pointer
,	O
hmac_tests	array
[	O
pos	long
]	O
.	O
msg	pointer
,	O
MD5_BLOCK_SIZE	int
,	O
time_function	function
(	O
bench_hmac	function
,	O
&	O
info	pointer
)	O
)	O
;	O
}	O
}	O
static	O
void	O
time_hmac_sha1	function
(	O
void	O
)	O
{	O
static	O
uint8_t	char
data	pointer
[	O
BENCH_BLOCK	int
]	O
;	O
struct	O
bench_hmac_info	struct
info	pointer
;	O
struct	O
hmac_sha1_ctx	struct
sha1_ctx	struct
;	O
unsigned	O
int	O
pos	long
;	O
init_data	function
(	O
data	pointer
)	O
;	O
info	pointer
.	O
data	pointer
=	O
data	pointer
;	O
hmac_sha1_set_key	O
(	O
&	O
sha1_ctx	struct
,	O
SHA1_BLOCK_SIZE	int
,	O
data	pointer
)	O
;	O
info	pointer
.	O
ctx	pointer
=	O
&	O
sha1_ctx	struct
;	O
info	pointer
.	O
update	pointer
=	O
(	O
nettle_hash_update_func	function
*	O
)	O
hmac_sha1_update	O
;	O
info	pointer
.	O
digest	pointer
=	O
(	O
nettle_hash_digest_func	function
*	O
)	O
hmac_sha1_digest	O
;	O
info	pointer
.	O
digest_length	long
=	O
SHA1_DIGEST_SIZE	int
;	O
for	O
(	O
pos	long
=	O
0	int
;	O
hmac_tests	array
[	O
pos	long
]	O
.	O
length	long
!=	O
0	int
;	O
pos	long
++	O
)	O
{	O
info	pointer
.	O
length	long
=	O
hmac_tests	array
[	O
pos	long
]	O
.	O
length	long
;	O
display	function
(	O
"hmac-sha1"	pointer
,	O
hmac_tests	array
[	O
pos	long
]	O
.	O
msg	pointer
,	O
SHA1_BLOCK_SIZE	int
,	O
time_function	function
(	O
bench_hmac	function
,	O
&	O
info	pointer
)	O
)	O
;	O
}	O
}	O
static	O
void	O
time_hmac_sha256	function
(	O
void	O
)	O
{	O
static	O
uint8_t	char
data	pointer
[	O
BENCH_BLOCK	int
]	O
;	O
struct	O
bench_hmac_info	struct
info	pointer
;	O
struct	O
hmac_sha256_ctx	struct
sha256_ctx	struct
;	O
unsigned	O
int	O
pos	long
;	O
init_data	function
(	O
data	pointer
)	O
;	O
info	pointer
.	O
data	pointer
=	O
data	pointer
;	O
hmac_sha256_set_key	O
(	O
&	O
sha256_ctx	struct
,	O
SHA256_BLOCK_SIZE	int
,	O
data	pointer
)	O
;	O
info	pointer
.	O
ctx	pointer
=	O
&	O
sha256_ctx	struct
;	O
info	pointer
.	O
update	pointer
=	O
(	O
nettle_hash_update_func	function
*	O
)	O
hmac_sha256_update	O
;	O
info	pointer
.	O
digest	pointer
=	O
(	O
nettle_hash_digest_func	function
*	O
)	O
hmac_sha256_digest	O
;	O
info	pointer
.	O
digest_length	long
=	O
SHA256_DIGEST_SIZE	int
;	O
for	O
(	O
pos	long
=	O
0	int
;	O
hmac_tests	array
[	O
pos	long
]	O
.	O
length	long
!=	O
0	int
;	O
pos	long
++	O
)	O
{	O
info	pointer
.	O
length	long
=	O
hmac_tests	array
[	O
pos	long
]	O
.	O
length	long
;	O
display	function
(	O
"hmac-sha256"	pointer
,	O
hmac_tests	array
[	O
pos	long
]	O
.	O
msg	pointer
,	O
SHA256_BLOCK_SIZE	int
,	O
time_function	function
(	O
bench_hmac	function
,	O
&	O
info	pointer
)	O
)	O
;	O
}	O
}	O
static	O
void	O
time_hmac_sha512	function
(	O
void	O
)	O
{	O
static	O
uint8_t	char
data	pointer
[	O
BENCH_BLOCK	int
]	O
;	O
struct	O
bench_hmac_info	struct
info	pointer
;	O
struct	O
hmac_sha512_ctx	struct
sha512_ctx	struct
;	O
unsigned	O
int	O
pos	long
;	O
init_data	function
(	O
data	pointer
)	O
;	O
info	pointer
.	O
data	pointer
=	O
data	pointer
;	O
hmac_sha512_set_key	O
(	O
&	O
sha512_ctx	struct
,	O
SHA512_BLOCK_SIZE	int
,	O
data	pointer
)	O
;	O
info	pointer
.	O
ctx	pointer
=	O
&	O
sha512_ctx	struct
;	O
info	pointer
.	O
update	pointer
=	O
(	O
nettle_hash_update_func	function
*	O
)	O
hmac_sha512_update	O
;	O
info	pointer
.	O
digest	pointer
=	O
(	O
nettle_hash_digest_func	function
*	O
)	O
hmac_sha512_digest	O
;	O
info	pointer
.	O
digest_length	long
=	O
SHA512_DIGEST_SIZE	int
;	O
for	O
(	O
pos	long
=	O
0	int
;	O
hmac_tests	array
[	O
pos	long
]	O
.	O
length	long
!=	O
0	int
;	O
pos	long
++	O
)	O
{	O
info	pointer
.	O
length	long
=	O
hmac_tests	array
[	O
pos	long
]	O
.	O
length	long
;	O
display	function
(	O
"hmac-sha512"	pointer
,	O
hmac_tests	array
[	O
pos	long
]	O
.	O
msg	pointer
,	O
SHA512_BLOCK_SIZE	int
,	O
time_function	function
(	O
bench_hmac	function
,	O
&	O
info	pointer
)	O
)	O
;	O
}	O
}	O
static	O
int	O
prefix_p	function
(	O
const	O
char	O
*	O
prefix	pointer
,	O
const	O
char	O
*	O
s	array
)	O
{	O
size_t	long
i	char
;	O
for	O
(	O
i	char
=	O
0	int
;	O
prefix	pointer
[	O
i	char
]	O
;	O
i	char
++	O
)	O
if	O
(	O
prefix	pointer
[	O
i	char
]	O
!=	O
s	array
[	O
i	char
]	O
)	O
return	O
0	int
;	O
return	O
1	int
;	O
}	O
static	O
int	O
block_cipher_p	function
(	O
const	O
struct	O
nettle_cipher	struct
*	O
cipher	pointer
)	O
{	O
return	O
cipher	pointer
->	O
block_size	long
>	O
0	int
&&	O
!	O
prefix_p	function
(	O
"openssl"	pointer
,	O
cipher	pointer
->	O
name	pointer
)	O
;	O
}	O
static	O
void	O
time_cipher	function
(	O
const	O
struct	O
nettle_cipher	struct
*	O
cipher	pointer
)	O
{	O
void	O
*	O
ctx	pointer
=	O
xalloc	function
(	O
cipher	pointer
->	O
context_size	int
)	O
;	O
uint8_t	char
*	O
key	pointer
=	O
xalloc	function
(	O
cipher	pointer
->	O
key_size	int
)	O
;	O
static	O
uint8_t	char
src_data	array
[	O
BENCH_BLOCK	int
]	O
;	O
static	O
uint8_t	char
data	pointer
[	O
BENCH_BLOCK	int
]	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
init_data	function
(	O
data	pointer
)	O
;	O
init_data	function
(	O
src_data	array
)	O
;	O
{	O
struct	O
bench_cipher_info	struct
info	pointer
;	O
info	pointer
.	O
ctx	pointer
=	O
ctx	pointer
;	O
info	pointer
.	O
crypt	pointer
=	O
cipher	pointer
->	O
encrypt	pointer
;	O
info	pointer
.	O
data	pointer
=	O
data	pointer
;	O
init_key	function
(	O
cipher	pointer
->	O
key_size	int
,	O
key	pointer
)	O
;	O
cipher	pointer
->	O
set_encrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
)	O
;	O
display	function
(	O
cipher	pointer
->	O
name	pointer
,	O
"ECB encrypt"	pointer
,	O
cipher	pointer
->	O
block_size	long
,	O
time_function	function
(	O
bench_cipher	function
,	O
&	O
info	pointer
)	O
)	O
;	O
}	O
{	O
struct	O
bench_cipher_info	struct
info	pointer
;	O
info	pointer
.	O
ctx	pointer
=	O
ctx	pointer
;	O
info	pointer
.	O
crypt	pointer
=	O
cipher	pointer
->	O
decrypt	pointer
;	O
info	pointer
.	O
data	pointer
=	O
data	pointer
;	O
init_key	function
(	O
cipher	pointer
->	O
key_size	int
,	O
key	pointer
)	O
;	O
cipher	pointer
->	O
set_decrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
)	O
;	O
display	function
(	O
cipher	pointer
->	O
name	pointer
,	O
"ECB decrypt"	pointer
,	O
cipher	pointer
->	O
block_size	long
,	O
time_function	function
(	O
bench_cipher	function
,	O
&	O
info	pointer
)	O
)	O
;	O
}	O
if	O
(	O
block_cipher_p	function
(	O
cipher	pointer
)	O
)	O
{	O
uint8_t	char
*	O
iv	pointer
=	O
xalloc	function
(	O
cipher	pointer
->	O
block_size	long
)	O
;	O
{	O
struct	O
bench_cbc_info	struct
info	pointer
;	O
info	pointer
.	O
ctx	pointer
=	O
ctx	pointer
;	O
info	pointer
.	O
crypt	pointer
=	O
cipher	pointer
->	O
encrypt	pointer
;	O
info	pointer
.	O
src	pointer
=	O
src_data	array
;	O
info	pointer
.	O
dst	pointer
=	O
data	pointer
;	O
info	pointer
.	O
block_size	long
=	O
cipher	pointer
->	O
block_size	long
;	O
info	pointer
.	O
iv	pointer
=	O
iv	pointer
;	O
memset	function
(	O
iv	pointer
,	O
0	int
,	O
cipher	pointer
->	O
block_size	long
)	O
;	O
cipher	pointer
->	O
set_encrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
)	O
;	O
display	function
(	O
cipher	pointer
->	O
name	pointer
,	O
"CBC encrypt"	pointer
,	O
cipher	pointer
->	O
block_size	long
,	O
time_function	function
(	O
bench_cbc_encrypt	function
,	O
&	O
info	pointer
)	O
)	O
;	O
}	O
{	O
struct	O
bench_cbc_info	struct
info	pointer
;	O
info	pointer
.	O
ctx	pointer
=	O
ctx	pointer
;	O
info	pointer
.	O
crypt	pointer
=	O
cipher	pointer
->	O
decrypt	pointer
;	O
info	pointer
.	O
src	pointer
=	O
src_data	array
;	O
info	pointer
.	O
dst	pointer
=	O
data	pointer
;	O
info	pointer
.	O
block_size	long
=	O
cipher	pointer
->	O
block_size	long
;	O
info	pointer
.	O
iv	pointer
=	O
iv	pointer
;	O
memset	function
(	O
iv	pointer
,	O
0	int
,	O
cipher	pointer
->	O
block_size	long
)	O
;	O
cipher	pointer
->	O
set_decrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
)	O
;	O
display	function
(	O
cipher	pointer
->	O
name	pointer
,	O
"CBC decrypt"	pointer
,	O
cipher	pointer
->	O
block_size	long
,	O
time_function	function
(	O
bench_cbc_decrypt	function
,	O
&	O
info	pointer
)	O
)	O
;	O
memset	function
(	O
iv	pointer
,	O
0	int
,	O
cipher	pointer
->	O
block_size	long
)	O
;	O
info	pointer
.	O
src	pointer
=	O
data	pointer
;	O
display	function
(	O
cipher	pointer
->	O
name	pointer
,	O
"  (in-place)"	pointer
,	O
cipher	pointer
->	O
block_size	long
,	O
time_function	function
(	O
bench_cbc_decrypt	function
,	O
&	O
info	pointer
)	O
)	O
;	O
}	O
{	O
struct	O
bench_cbc_info	struct
info	pointer
;	O
info	pointer
.	O
ctx	pointer
=	O
ctx	pointer
;	O
info	pointer
.	O
crypt	pointer
=	O
cipher	pointer
->	O
encrypt	pointer
;	O
info	pointer
.	O
src	pointer
=	O
src_data	array
;	O
info	pointer
.	O
dst	pointer
=	O
data	pointer
;	O
info	pointer
.	O
block_size	long
=	O
cipher	pointer
->	O
block_size	long
;	O
info	pointer
.	O
iv	pointer
=	O
iv	pointer
;	O
memset	function
(	O
iv	pointer
,	O
0	int
,	O
cipher	pointer
->	O
block_size	long
)	O
;	O
cipher	pointer
->	O
set_encrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
)	O
;	O
display	function
(	O
cipher	pointer
->	O
name	pointer
,	O
"CTR"	pointer
,	O
cipher	pointer
->	O
block_size	long
,	O
time_function	function
(	O
bench_ctr	function
,	O
&	O
info	pointer
)	O
)	O
;	O
memset	function
(	O
iv	pointer
,	O
0	int
,	O
cipher	pointer
->	O
block_size	long
)	O
;	O
info	pointer
.	O
src	pointer
=	O
data	pointer
;	O
display	function
(	O
cipher	pointer
->	O
name	pointer
,	O
"  (in-place)"	pointer
,	O
cipher	pointer
->	O
block_size	long
,	O
time_function	function
(	O
bench_ctr	function
,	O
&	O
info	pointer
)	O
)	O
;	O
}	O
free	function
(	O
iv	pointer
)	O
;	O
}	O
free	function
(	O
ctx	pointer
)	O
;	O
free	function
(	O
key	pointer
)	O
;	O
}	O
static	O
void	O
time_aead	function
(	O
const	O
struct	O
nettle_aead	struct
*	O
aead	pointer
)	O
{	O
void	O
*	O
ctx	pointer
=	O
xalloc	function
(	O
aead	pointer
->	O
context_size	int
)	O
;	O
uint8_t	char
*	O
key	pointer
=	O
xalloc	function
(	O
aead	pointer
->	O
key_size	int
)	O
;	O
uint8_t	char
*	O
nonce	pointer
=	O
xalloc	function
(	O
aead	pointer
->	O
nonce_size	int
)	O
;	O
static	O
uint8_t	char
data	pointer
[	O
BENCH_BLOCK	int
]	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
init_data	function
(	O
data	pointer
)	O
;	O
if	O
(	O
aead	pointer
->	O
set_nonce	pointer
)	O
init_nonce	function
(	O
aead	pointer
->	O
nonce_size	int
,	O
nonce	pointer
)	O
;	O
{	O
struct	O
bench_aead_info	struct
info	pointer
;	O
info	pointer
.	O
ctx	pointer
=	O
ctx	pointer
;	O
info	pointer
.	O
crypt	pointer
=	O
aead	pointer
->	O
encrypt	pointer
;	O
info	pointer
.	O
data	pointer
=	O
data	pointer
;	O
init_key	function
(	O
aead	pointer
->	O
key_size	int
,	O
key	pointer
)	O
;	O
aead	pointer
->	O
set_encrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
)	O
;	O
if	O
(	O
aead	pointer
->	O
set_nonce	pointer
)	O
aead	pointer
->	O
set_nonce	pointer
(	O
ctx	pointer
,	O
nonce	pointer
)	O
;	O
display	function
(	O
aead	pointer
->	O
name	pointer
,	O
"encrypt"	pointer
,	O
aead	pointer
->	O
block_size	long
,	O
time_function	function
(	O
bench_aead_crypt	function
,	O
&	O
info	pointer
)	O
)	O
;	O
}	O
{	O
struct	O
bench_aead_info	struct
info	pointer
;	O
info	pointer
.	O
ctx	pointer
=	O
ctx	pointer
;	O
info	pointer
.	O
crypt	pointer
=	O
aead	pointer
->	O
decrypt	pointer
;	O
info	pointer
.	O
data	pointer
=	O
data	pointer
;	O
init_key	function
(	O
aead	pointer
->	O
key_size	int
,	O
key	pointer
)	O
;	O
aead	pointer
->	O
set_decrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
)	O
;	O
if	O
(	O
aead	pointer
->	O
set_nonce	pointer
)	O
aead	pointer
->	O
set_nonce	pointer
(	O
ctx	pointer
,	O
nonce	pointer
)	O
;	O
display	function
(	O
aead	pointer
->	O
name	pointer
,	O
"decrypt"	pointer
,	O
aead	pointer
->	O
block_size	long
,	O
time_function	function
(	O
bench_aead_crypt	function
,	O
&	O
info	pointer
)	O
)	O
;	O
}	O
if	O
(	O
aead	pointer
->	O
update	pointer
)	O
{	O
struct	O
bench_aead_info	struct
info	pointer
;	O
info	pointer
.	O
ctx	pointer
=	O
ctx	pointer
;	O
info	pointer
.	O
update	pointer
=	O
aead	pointer
->	O
update	pointer
;	O
info	pointer
.	O
data	pointer
=	O
data	pointer
;	O
aead	pointer
->	O
set_encrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
)	O
;	O
if	O
(	O
aead	pointer
->	O
set_nonce	pointer
)	O
aead	pointer
->	O
set_nonce	pointer
(	O
ctx	pointer
,	O
nonce	pointer
)	O
;	O
display	function
(	O
aead	pointer
->	O
name	pointer
,	O
"update"	pointer
,	O
aead	pointer
->	O
block_size	long
,	O
time_function	function
(	O
bench_aead_update	function
,	O
&	O
info	pointer
)	O
)	O
;	O
}	O
free	function
(	O
ctx	pointer
)	O
;	O
free	function
(	O
key	pointer
)	O
;	O
free	function
(	O
nonce	pointer
)	O
;	O
}	O
static	O
int	O
compare_double	function
(	O
const	O
void	O
*	O
ap	pointer
,	O
const	O
void	O
*	O
bp	pointer
)	O
{	O
double	O
a	pointer
=	O
*	O
(	O
const	O
double	O
*	O
)	O
ap	pointer
;	O
double	O
b	array
=	O
*	O
(	O
const	O
double	O
*	O
)	O
bp	pointer
;	O
if	O
(	O
a	pointer
<	O
b	array
)	O
return	O
-	O
1	int
;	O
else	O
if	O
(	O
a	pointer
>	O
b	array
)	O
return	O
1	int
;	O
else	O
return	O
0	int
;	O
}	O
static	O
void	O
bench_sha1_compress	function
(	O
void	O
)	O
{	O
uint32_t	int
state	pointer
[	O
_SHA1_DIGEST_LENGTH	int
]	O
;	O
uint8_t	char
data	pointer
[	O
SHA1_BLOCK_SIZE	int
]	O
;	O
double	O
t	double
;	O
TIME_CYCLES	O
(	O
t	double
,	O
nettle_sha1_compress	function
(	O
state	pointer
,	O
data	pointer
)	O
)	O
;	O
printf	function
(	O
"sha1_compress: %.2f cycles\n"	pointer
,	O
t	double
)	O
;	O
}	O
static	O
void	O
bench_salsa20_core	function
(	O
void	O
)	O
{	O
uint32_t	int
state	pointer
[	O
_SALSA20_INPUT_LENGTH	int
]	O
;	O
double	O
t	double
;	O
TIME_CYCLES	O
(	O
t	double
,	O
_nettle_salsa20_core	function
(	O
state	pointer
,	O
state	pointer
,	O
20	int
)	O
)	O
;	O
printf	function
(	O
"salsa20_core: %.2f cycles\n"	pointer
,	O
t	double
)	O
;	O
}	O
static	O
void	O
bench_sha3_permute	function
(	O
void	O
)	O
{	O
struct	O
sha3_state	struct
state	pointer
;	O
double	O
t	double
;	O
TIME_CYCLES	O
(	O
t	double
,	O
sha3_permute	O
(	O
&	O
state	pointer
)	O
)	O
;	O
printf	function
(	O
"sha3_permute: %.2f cycles (%.2f / round)\n"	pointer
,	O
t	double
,	O
t	double
/	O
24.0	int
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
unsigned	O
i	char
;	O
int	O
c	int
;	O
const	O
char	O
*	O
alg	pointer
;	O
const	O
struct	O
nettle_hash	struct
*	O
hashes	array
[	O
]	O
=	O
{	O
&	O
nettle_md2	struct
,	O
&	O
nettle_md4	struct
,	O
&	O
nettle_md5	struct
,	O
OPENSSL	O
(	O
&	O
nettle_openssl_md5	struct
)	O
&	O
nettle_sha1	struct
,	O
OPENSSL	O
(	O
&	O
nettle_openssl_sha1	struct
)	O
&	O
nettle_sha224	struct
,	O
&	O
nettle_sha256	struct
,	O
&	O
nettle_sha384	struct
,	O
&	O
nettle_sha512	struct
,	O
&	O
nettle_sha512_224	struct
,	O
&	O
nettle_sha512_256	struct
,	O
&	O
nettle_sha3_224	struct
,	O
&	O
nettle_sha3_256	struct
,	O
&	O
nettle_sha3_384	struct
,	O
&	O
nettle_sha3_512	struct
,	O
&	O
nettle_ripemd160	struct
,	O
&	O
nettle_gosthash94	struct
,	O
NULL	O
}	O
;	O
const	O
struct	O
nettle_cipher	struct
*	O
ciphers	array
[	O
]	O
=	O
{	O
&	O
nettle_aes128	struct
,	O
&	O
nettle_aes192	struct
,	O
&	O
nettle_aes256	struct
,	O
OPENSSL	O
(	O
&	O
nettle_openssl_aes128	struct
)	O
OPENSSL	O
(	O
&	O
nettle_openssl_aes192	struct
)	O
OPENSSL	O
(	O
&	O
nettle_openssl_aes256	struct
)	O
&	O
nettle_blowfish128	struct
,	O
OPENSSL	O
(	O
&	O
nettle_openssl_blowfish128	struct
)	O
&	O
nettle_camellia128	struct
,	O
&	O
nettle_camellia192	struct
,	O
&	O
nettle_camellia256	struct
,	O
&	O
nettle_cast128	struct
,	O
OPENSSL	O
(	O
&	O
nettle_openssl_cast128	struct
)	O
&	O
nettle_des	struct
,	O
OPENSSL	O
(	O
&	O
nettle_openssl_des	struct
)	O
&	O
nettle_des3	struct
,	O
&	O
nettle_serpent256	struct
,	O
&	O
nettle_twofish128	struct
,	O
&	O
nettle_twofish192	struct
,	O
&	O
nettle_twofish256	struct
,	O
NULL	O
}	O
;	O
const	O
struct	O
nettle_aead	struct
*	O
aeads	array
[	O
]	O
=	O
{	O
&	O
nettle_arcfour128	struct
,	O
OPENSSL	O
(	O
&	O
nettle_openssl_arcfour128	struct
)	O
&	O
nettle_salsa20	struct
,	O
&	O
nettle_salsa20r12	struct
,	O
&	O
nettle_chacha	struct
,	O
&	O
nettle_gcm_aes128	struct
,	O
&	O
nettle_gcm_aes192	struct
,	O
&	O
nettle_gcm_aes256	struct
,	O
OPENSSL	O
(	O
&	O
nettle_openssl_gcm_aes128	struct
)	O
OPENSSL	O
(	O
&	O
nettle_openssl_gcm_aes192	struct
)	O
OPENSSL	O
(	O
&	O
nettle_openssl_gcm_aes256	struct
)	O
&	O
nettle_gcm_camellia128	struct
,	O
&	O
nettle_gcm_camellia256	struct
,	O
&	O
nettle_eax_aes128	struct
,	O
&	O
nettle_chacha_poly1305	struct
,	O
NULL	O
}	O
;	O
enum	O
{	O
OPT_HELP	int
=	O
300	int
}	O
;	O
static	O
const	O
struct	O
option	struct
options	array
[	O
]	O
=	O
{	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
OPT_HELP	int
}	O
,	O
{	O
"clock-frequency"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'f'	O
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
while	O
(	O
(	O
c	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"f:"	pointer
,	O
options	array
,	O
NULL	O
)	O
)	O
!=	O
-	O
1	int
)	O
switch	O
(	O
c	int
)	O
{	O
case	O
'f'	O
:	O
frequency	double
=	O
atof	function
(	O
optarg	pointer
)	O
;	O
if	O
(	O
frequency	double
>	O
0.0	int
)	O
break	O
;	O
case	O
OPT_HELP	int
:	O
printf	function
(	O
"Usage: nettle-benchmark [-f clock frequency] [alg...]\n"	pointer
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
case	O
'?'	O
:	O
return	O
EXIT_FAILURE	int
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
time_init	function
(	O
)	O
;	O
bench_sha1_compress	function
(	O
)	O
;	O
bench_salsa20_core	function
(	O
)	O
;	O
bench_sha3_permute	function
(	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
time_overhead	function
(	O
)	O
;	O
header	function
(	O
)	O
;	O
do	O
{	O
alg	pointer
=	O
argv	pointer
[	O
optind	int
]	O
;	O
if	O
(	O
!	O
alg	pointer
||	O
strstr	function
(	O
"memxor"	pointer
,	O
alg	pointer
)	O
)	O
{	O
time_memxor	function
(	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
for	O
(	O
i	char
=	O
0	int
;	O
hashes	array
[	O
i	char
]	O
;	O
i	char
++	O
)	O
if	O
(	O
!	O
alg	pointer
||	O
strstr	function
(	O
hashes	array
[	O
i	char
]	O
->	O
name	pointer
,	O
alg	pointer
)	O
)	O
time_hash	function
(	O
hashes	array
[	O
i	char
]	O
)	O
;	O
if	O
(	O
!	O
alg	pointer
||	O
strstr	function
(	O
"umac"	pointer
,	O
alg	pointer
)	O
)	O
time_umac	function
(	O
)	O
;	O
if	O
(	O
!	O
alg	pointer
||	O
strstr	function
(	O
"cmac"	pointer
,	O
alg	pointer
)	O
)	O
time_cmac	function
(	O
)	O
;	O
if	O
(	O
!	O
alg	pointer
||	O
strstr	function
(	O
"poly1305-aes"	pointer
,	O
alg	pointer
)	O
)	O
time_poly1305_aes	function
(	O
)	O
;	O
for	O
(	O
i	char
=	O
0	int
;	O
ciphers	array
[	O
i	char
]	O
;	O
i	char
++	O
)	O
if	O
(	O
!	O
alg	pointer
||	O
strstr	function
(	O
ciphers	array
[	O
i	char
]	O
->	O
name	pointer
,	O
alg	pointer
)	O
)	O
time_cipher	function
(	O
ciphers	array
[	O
i	char
]	O
)	O
;	O
for	O
(	O
i	char
=	O
0	int
;	O
aeads	array
[	O
i	char
]	O
;	O
i	char
++	O
)	O
if	O
(	O
!	O
alg	pointer
||	O
strstr	function
(	O
aeads	array
[	O
i	char
]	O
->	O
name	pointer
,	O
alg	pointer
)	O
)	O
time_aead	function
(	O
aeads	array
[	O
i	char
]	O
)	O
;	O
if	O
(	O
!	O
alg	pointer
||	O
strstr	function
(	O
"hmac-md5"	pointer
,	O
alg	pointer
)	O
)	O
time_hmac_md5	function
(	O
)	O
;	O
if	O
(	O
!	O
alg	pointer
||	O
strstr	function
(	O
"hmac-sha1"	pointer
,	O
alg	pointer
)	O
)	O
time_hmac_sha1	function
(	O
)	O
;	O
if	O
(	O
!	O
alg	pointer
||	O
strstr	function
(	O
"hmac-sha256"	pointer
,	O
alg	pointer
)	O
)	O
time_hmac_sha256	function
(	O
)	O
;	O
if	O
(	O
!	O
alg	pointer
||	O
strstr	function
(	O
"hmac-sha512"	pointer
,	O
alg	pointer
)	O
)	O
time_hmac_sha512	function
(	O
)	O
;	O
optind	int
++	O
;	O
}	O
while	O
(	O
alg	pointer
&&	O
argv	pointer
[	O
optind	int
]	O
)	O
;	O
return	O
0	int
;	O
}	O
