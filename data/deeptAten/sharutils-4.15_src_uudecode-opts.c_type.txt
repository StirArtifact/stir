extern	O
FILE	struct
*	O
option_usage_fp	pointer
;	O
char	O
const	O
*	O
const	O
program_name	pointer
=	O
"uudecode"	pointer
;	O
static	O
char	O
const	O
uudecode_opt_strs	array
[	O
4756	int
]	O
=	O
"uudecode (GNU sharutils) 4.15\n"	pointer
"Copyright (C) 1994-2015 Free Software Foundation, Inc., all rights reserved.\n"	pointer
"This is free software. It is licensed for use, modification and\n"	pointer
"redistribution under the terms of the GNU General Public License,\n"	pointer
"version 3 or later <http://gnu.org/licenses/gpl.html>\n\0"	pointer
"uudecode is free software: you can redistribute it and/or modify it under\n"	pointer
"the terms of the GNU General Public License as published by the Free\n"	pointer
"Software Foundation, either version 3 of the License, or (at your option)\n"	pointer
"any later version.\n\n"	pointer
"uudecode is distributed in the hope that it will be useful, but WITHOUT ANY\n"	pointer
"WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n"	pointer
"FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n"	pointer
"details.\n\n"	pointer
"You should have received a copy of the GNU General Public License along\n"	pointer
"with this program.  If not, see <http://www.gnu.org/licenses/>.\n\0"	pointer
"direct output to file\0"	pointer
"OUTPUT_FILE\0"	pointer
"output-file\0"	pointer
"ignore fchmod(3P) errors\0"	pointer
"IGNORE_CHMOD\0"	pointer
"ignore-chmod\0"	pointer
"display extended usage information and exit\0"	pointer
"help\0"	pointer
"extended usage information passed thru pager\0"	pointer
"more-help\0"	pointer
"output version information and exit\0"	pointer
"version\0"	pointer
"save the option state to a config file\0"	pointer
"save-opts\0"	pointer
"load options from a config file\0"	pointer
"LOAD_OPTS\0"	pointer
"no-load-opts\0"	pointer
"no\0"	pointer
"UUDECODE\0"	pointer
"uudecode (GNU sharutils) - decode an encoded file\n"	pointer
"Usage:  %s [ -<flag> [<val>] | --<name>[{=| }<val>] ]... [<file>...]\n\0"	pointer
"$HOME\0"	pointer
".sharrc\0"	pointer
"bug-gnu-utils@gnu.org\0"	pointer
"If no 'file'(s) are provided, then standard input is decoded.\n\0"	pointer
"'uudecode' transforms uuencoded files into their original form.\n\n"	pointer
"The encoded file(s) may be specified on the command line, or one may be\n"	pointer
"read from standard input.  The output file name is specified in the encoded\n"	pointer
"file, but may be overridden with the '-o' option.  It will have the mode of\n"	pointer
"the original file, except that setuid and execute bits are not retained.  If\n"	pointer
"the output file is specified to be '/dev/stdout' or '-', the result will be\n"	pointer
"written to standard output.  If there are multiple input files and the\n"	pointer
"second or subsquent file specifies standard output, the decoded data will\n"	pointer
"be written to the same file as the previous output.  Don't do that.\n\n"	pointer
"'uudecode' ignores any leading and trailing lines.  It looks for a line\n"	pointer
"that starts with \"'begin'\" and proceeds until the end-of-encoding marker is\n"	pointer
"found.  The program determines from the header line of the encoded file\n"	pointer
"which of the two supported encoding schemes was used and whether or not the\n"	pointer
"output file name has been encoded with base64 encoding.  See 'uuencode(5)'.\n\0"	pointer
"uudecode (GNU sharutils) 4.15\0"	pointer
"uudecode (GNU sharutils) - decode an encoded file\n"	pointer
"Usage:  uudecode [ -<flag> [<val>] | --<name>[{=| }<val>] ]... [<file>...]\n\n"	pointer
"   -o, --output-file=str      direct output to file\n"	pointer
"   -c, --ignore-chmod         ignore fchmod(3P) errors\n"	pointer
"   -v, --version[=MODE]       output version information and exit\n"	pointer
"   -h, --help                 display extended usage information and exit\n"	pointer
"   -!, --more-help            extended usage information passed thru pager\n"	pointer
"   -R, --save-opts[=FILE]     save the option state to a config file FILE\n"	pointer
"   -r, --load-opts=FILE       load options from the config file FILE\n"	pointer
"                                - disabled with '--no-load-opts'\n"	pointer
"                                - may appear multiple times\n\n"	pointer
"Options are specified by doubled hyphens and their name or by a single\n"	pointer
"hyphen and the flag character.\n"	pointer
"If no 'file'(s) are provided, then standard input is decoded.\n\n"	pointer
"The following option preset mechanisms are supported:\n"	pointer
" - reading file $HOME/.sharrc\n\n"	pointer
"'uudecode' transforms uuencoded files into their original form.\n\n"	pointer
"The encoded file(s) may be specified on the command line, or one may be\n"	pointer
"read from standard input.  The output file name is specified in the encoded\n"	pointer
"file, but may be overridden with the '-o' option.  It will have the mode of\n"	pointer
"the original file, except that setuid and execute bits are not retained.  If\n"	pointer
"the output file is specified to be '/dev/stdout' or '-', the result will be\n"	pointer
"written to standard output.  If there are multiple input files and the\n"	pointer
"second or subsquent file specifies standard output, the decoded data will\n"	pointer
"be written to the same file as the previous output.  Don't do that.\n\n"	pointer
"'uudecode' ignores any leading and trailing lines.  It looks for a line\n"	pointer
"that starts with \"'begin'\" and proceeds until the end-of-encoding marker is\n"	pointer
"found.  The program determines from the header line of the encoded file\n"	pointer
"which of the two supported encoding schemes was used and whether or not the\n"	pointer
"output file name has been encoded with base64 encoding.  See 'uuencode(5)'.\n\n"	pointer
"Please send bug reports to:  <bug-gnu-utils@gnu.org>\n\0"	pointer
"uudecode (GNU sharutils) - decode an encoded file\n"	pointer
"Usage:  uudecode [ -<flag> [<val>] | --<name>[{=| }<val>] ]... [<file>...]\n"	pointer
"Try 'uudecode --help' for more information.\n"	pointer
;	O
extern	O
tOptProc	function
optionBooleanVal	function
,	O
optionNestedVal	function
,	O
optionNumericVal	function
,	O
optionPagedUsage	function
,	O
optionPrintVersion	function
,	O
optionResetOpt	function
,	O
optionStackArg	function
,	O
optionTimeDate	function
,	O
optionTimeVal	function
,	O
optionUnstackArg	function
,	O
optionVendorOption	function
;	O
static	O
tOptProc	function
doOptOutput_File	function
,	O
doUsageOpt	function
;	O
static	O
tOptDesc	struct
optDesc	array
[	O
OPTION_CT	int
]	O
=	O
{	O
{	O
0	int
,	O
VALUE_OPT_OUTPUT_FILE	char
,	O
0	int
,	O
VALUE_OPT_OUTPUT_FILE	char
,	O
NO_EQUIVALENT	O
,	O
0	int
,	O
1	int
,	O
0	int
,	O
OUTPUT_FILE_FLAGS	O
,	O
0	int
,	O
{	O
NULL	O
}	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
doOptOutput_File	function
,	O
OUTPUT_FILE_DESC	O
,	O
OUTPUT_FILE_NAME	O
,	O
OUTPUT_FILE_name	O
,	O
NULL	O
,	O
NULL	O
}	O
,	O
{	O
1	int
,	O
VALUE_OPT_IGNORE_CHMOD	char
,	O
1	int
,	O
VALUE_OPT_IGNORE_CHMOD	char
,	O
NO_EQUIVALENT	O
,	O
0	int
,	O
1	int
,	O
0	int
,	O
IGNORE_CHMOD_FLAGS	O
,	O
0	int
,	O
{	O
NULL	O
}	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
IGNORE_CHMOD_DESC	O
,	O
IGNORE_CHMOD_NAME	O
,	O
IGNORE_CHMOD_name	O
,	O
NULL	O
,	O
NULL	O
}	O
,	O
{	O
INDEX_OPT_VERSION	int
,	O
VALUE_OPT_VERSION	char
,	O
NO_EQUIVALENT	O
,	O
VALUE_OPT_VERSION	char
,	O
NO_EQUIVALENT	O
,	O
0	int
,	O
1	int
,	O
0	int
,	O
VER_FLAGS	O
,	O
AOUSE_VERSION	int
,	O
{	O
NULL	O
}	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
VER_PROC	O
,	O
VER_DESC	O
,	O
NULL	O
,	O
VER_name	O
,	O
NULL	O
,	O
NULL	O
}	O
,	O
{	O
INDEX_OPT_HELP	int
,	O
VALUE_OPT_HELP	char
,	O
NO_EQUIVALENT	O
,	O
VALUE_OPT_HELP	char
,	O
NO_EQUIVALENT	O
,	O
0	int
,	O
1	int
,	O
0	int
,	O
OPTST_IMM	int
|	O
OPTST_NO_INIT	int
,	O
AOUSE_HELP	int
,	O
{	O
NULL	O
}	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
doUsageOpt	function
,	O
HELP_DESC	O
,	O
NULL	O
,	O
HELP_name	O
,	O
NULL	O
,	O
NULL	O
}	O
,	O
{	O
INDEX_OPT_MORE_HELP	int
,	O
VALUE_OPT_MORE_HELP	char
,	O
NO_EQUIVALENT	O
,	O
VALUE_OPT_MORE_HELP	char
,	O
NO_EQUIVALENT	O
,	O
0	int
,	O
1	int
,	O
0	int
,	O
MORE_HELP_FLAGS	O
,	O
AOUSE_MORE_HELP	int
,	O
{	O
NULL	O
}	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
optionPagedUsage	function
,	O
MORE_HELP_DESC	O
,	O
NULL	O
,	O
MORE_HELP_name	O
,	O
NULL	O
,	O
NULL	O
}	O
,	O
{	O
INDEX_OPT_SAVE_OPTS	int
,	O
VALUE_OPT_SAVE_OPTS	char
,	O
NO_EQUIVALENT	O
,	O
VALUE_OPT_SAVE_OPTS	char
,	O
NO_EQUIVALENT	O
,	O
0	int
,	O
1	int
,	O
0	int
,	O
OPTST_SET_ARGTYPE	O
(	O
OPARG_TYPE_STRING	int
)	O
|	O
OPTST_ARG_OPTIONAL	int
|	O
OPTST_NO_INIT	int
,	O
AOUSE_SAVE_OPTS	int
,	O
{	O
NULL	O
}	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
SAVE_OPTS_DESC	O
,	O
NULL	O
,	O
SAVE_OPTS_name	O
,	O
NULL	O
,	O
NULL	O
}	O
,	O
{	O
INDEX_OPT_LOAD_OPTS	int
,	O
VALUE_OPT_LOAD_OPTS	char
,	O
NO_EQUIVALENT	O
,	O
VALUE_OPT_LOAD_OPTS	char
,	O
NO_EQUIVALENT	O
,	O
0	int
,	O
NOLIMIT	O
,	O
0	int
,	O
OPTST_SET_ARGTYPE	O
(	O
OPARG_TYPE_STRING	int
)	O
|	O
OPTST_DISABLE_IMM	int
,	O
AOUSE_LOAD_OPTS	int
,	O
{	O
NULL	O
}	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
optionLoadOpt	function
,	O
LOAD_OPTS_DESC	O
,	O
LOAD_OPTS_NAME	O
,	O
LOAD_OPTS_name	O
,	O
NO_LOAD_OPTS_name	O
,	O
LOAD_OPTS_pfx	O
}	O
}	O
;	O
static	O
char	O
const	O
*	O
const	O
apzHomeList	array
[	O
2	int
]	O
=	O
{	O
uudecode_opt_strs	array
+	O
1378	int
,	O
NULL	O
}	O
;	O
static	O
tOptionXlateProc	function
translate_option_strings	function
;	O
static	O
void	O
doUsageOpt	function
(	O
tOptions	struct
*	O
opts	pointer
,	O
tOptDesc	struct
*	O
od	pointer
)	O
{	O
int	O
ex_code	int
;	O
ex_code	int
=	O
UUDECODE_EXIT_SUCCESS	int
;	O
optionUsage	function
(	O
&	O
uudecodeOptions	struct
,	O
ex_code	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
(	O
void	O
)	O
opts	pointer
;	O
(	O
void	O
)	O
od	pointer
;	O
}	O
static	O
void	O
doOptOutput_File	function
(	O
tOptions	struct
*	O
pOptions	pointer
,	O
tOptDesc	struct
*	O
pOptDesc	pointer
)	O
{	O
FILE	struct
*	O
fp	pointer
;	O
switch	O
(	O
*	O
pOptDesc	pointer
->	O
optArg	union
.	O
argString	pointer
)	O
{	O
case	O
'-'	O
:	O
if	O
(	O
pOptDesc	pointer
->	O
optArg	union
.	O
argString	pointer
[	O
1	int
]	O
==	O
'\0'	O
)	O
return	O
;	O
break	O
;	O
case	O
'/'	O
:	O
if	O
(	O
strcmp	function
(	O
pOptDesc	pointer
->	O
optArg	union
.	O
argString	pointer
+	O
1	int
,	O
"dev/stdout"	pointer
)	O
==	O
0	int
)	O
return	O
;	O
default	O
:	O
break	O
;	O
}	O
fp	pointer
=	O
freopen	function
(	O
pOptDesc	pointer
->	O
optArg	union
.	O
argString	pointer
,	O
"w"	pointer
,	O
stdout	pointer
)	O
;	O
if	O
(	O
fp	pointer
!=	O
stdout	pointer
)	O
fserr	function
(	O
UUDECODE_EXIT_NO_OUTPUT	int
,	O
"freopen-ing for stdout"	pointer
,	O
pOptDesc	pointer
->	O
optArg	union
.	O
argString	pointer
)	O
;	O
(	O
void	O
)	O
pOptions	pointer
;	O
}	O
void	O
vusage_message	function
(	O
char	O
const	O
*	O
fmt	pointer
,	O
va_list	array
ap	array
)	O
{	O
char	O
const	O
*	O
er_leader	pointer
=	O
_	O
(	O
"uudecode usage error:\n"	pointer
)	O
;	O
fputs	function
(	O
er_leader	pointer
,	O
stderr	pointer
)	O
;	O
vfprintf	function
(	O
stderr	pointer
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
optionUsage	function
(	O
&	O
uudecodeOptions	struct
,	O
UUDECODE_EXIT_USAGE_ERROR	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
void	O
usage_message	function
(	O
char	O
const	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
vusage_message	function
(	O
fmt	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
void	O
vdie	function
(	O
int	O
exit_code	int
,	O
char	O
const	O
*	O
fmt	pointer
,	O
va_list	array
ap	array
)	O
{	O
char	O
const	O
*	O
die_leader	pointer
=	O
_	O
(	O
"uudecode fatal error:\n"	pointer
)	O
;	O
fputs	function
(	O
die_leader	pointer
,	O
stderr	pointer
)	O
;	O
vfprintf	function
(	O
stderr	pointer
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
fflush	function
(	O
stderr	pointer
)	O
;	O
exit	function
(	O
exit_code	int
)	O
;	O
}	O
void	O
die	function
(	O
int	O
exit_code	int
,	O
char	O
const	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
vdie	function
(	O
exit_code	int
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
void	O
fserr	function
(	O
int	O
exit_code	int
,	O
char	O
const	O
*	O
op	pointer
,	O
char	O
const	O
*	O
fname	pointer
)	O
{	O
char	O
const	O
*	O
fserr_fmt	pointer
=	O
_	O
(	O
"fserr %d (%s) performing '%s' on %s\n"	pointer
)	O
;	O
die	function
(	O
exit_code	int
,	O
fserr_fmt	pointer
,	O
errno	O
,	O
strerror	function
(	O
errno	O
)	O
,	O
op	pointer
,	O
fname	pointer
)	O
;	O
}	O
tOptions	struct
uudecodeOptions	struct
=	O
{	O
OPTIONS_STRUCT_VERSION	int
,	O
0	int
,	O
NULL	O
,	O
(	O
OPTPROC_BASE	O
+	O
OPTPROC_ERRSTOP	int
+	O
OPTPROC_SHORTOPT	int
+	O
OPTPROC_LONGOPT	int
+	O
OPTPROC_NO_REQ_OPT	int
+	O
OPTPROC_GNUUSAGE	int
+	O
OPTPROC_MISUSE	int
)	O
,	O
0	int
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
zPROGNAME	O
,	O
zRcName	O
,	O
zCopyright	O
,	O
zLicenseDescrip	O
,	O
zFullVersion	O
,	O
apzHomeList	array
,	O
zUsageTitle	O
,	O
zExplain	O
,	O
zDetail	O
,	O
optDesc	array
,	O
zBugsAddr	O
,	O
NULL	O
,	O
NULL	O
,	O
optionUsage	function
,	O
translate_option_strings	function
,	O
{	O
INDEX_OPT_MORE_HELP	int
,	O
INDEX_OPT_SAVE_OPTS	int
,	O
NO_EQUIVALENT	O
,	O
NO_EQUIVALENT	O
}	O
,	O
7	int
,	O
2	int
,	O
uudecode_full_usage	O
,	O
uudecode_short_usage	O
,	O
NULL	O
,	O
NULL	O
,	O
PKGDATADIR	pointer
,	O
uudecode_packager_info	O
}	O
;	O
static	O
char	O
*	O
AO_gettext	function
(	O
char	O
const	O
*	O
pz	pointer
)	O
;	O
static	O
void	O
coerce_it	function
(	O
void	O
*	O
*	O
s	enum
)	O
;	O
static	O
char	O
*	O
AO_gettext	function
(	O
char	O
const	O
*	O
pz	pointer
)	O
{	O
char	O
*	O
res	pointer
;	O
if	O
(	O
pz	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
option_xlateable_txt	struct
.	O
field_ct	int
!=	O
0	int
)	O
{	O
res	pointer
=	O
dgettext	function
(	O
"libopts"	pointer
,	O
pz	pointer
)	O
;	O
if	O
(	O
res	pointer
==	O
pz	pointer
)	O
res	pointer
=	O
(	O
char	O
*	O
)	O
VOIDP	O
(	O
_	O
(	O
pz	pointer
)	O
)	O
;	O
}	O
else	O
res	pointer
=	O
(	O
char	O
*	O
)	O
VOIDP	O
(	O
_	O
(	O
pz	pointer
)	O
)	O
;	O
if	O
(	O
res	pointer
==	O
pz	pointer
)	O
return	O
res	pointer
;	O
res	pointer
=	O
strdup	function
(	O
res	pointer
)	O
;	O
if	O
(	O
res	pointer
==	O
NULL	O
)	O
{	O
fputs	function
(	O
_	O
(	O
"No memory for duping translated strings\n"	pointer
)	O
,	O
stderr	pointer
)	O
;	O
exit	function
(	O
UUDECODE_EXIT_NO_MEM	int
)	O
;	O
}	O
return	O
res	pointer
;	O
}	O
static	O
void	O
coerce_it	function
(	O
void	O
*	O
*	O
s	enum
)	O
{	O
*	O
s	enum
=	O
AO_gettext	function
(	O
*	O
s	enum
)	O
;	O
}	O
static	O
void	O
translate_option_strings	function
(	O
void	O
)	O
{	O
tOptions	struct
*	O
const	O
opts	pointer
=	O
&	O
uudecodeOptions	struct
;	O
if	O
(	O
option_xlateable_txt	struct
.	O
field_ct	int
!=	O
0	int
)	O
{	O
char	O
*	O
*	O
ppz	pointer
=	O
(	O
char	O
*	O
*	O
)	O
VOIDP	O
(	O
&	O
(	O
option_xlateable_txt	struct
)	O
)	O
;	O
int	O
ix	int
=	O
option_xlateable_txt	struct
.	O
field_ct	int
;	O
do	O
{	O
ppz	pointer
++	O
;	O
*	O
ppz	pointer
=	O
AO_gettext	function
(	O
*	O
ppz	pointer
)	O
;	O
}	O
while	O
(	O
--	O
ix	int
>	O
0	int
)	O
;	O
option_xlateable_txt	struct
.	O
field_ct	int
=	O
0	int
;	O
coerce_it	function
(	O
VOIDP	O
(	O
&	O
(	O
opts	pointer
->	O
pzCopyright	pointer
)	O
)	O
)	O
;	O
coerce_it	function
(	O
VOIDP	O
(	O
&	O
(	O
opts	pointer
->	O
pzCopyNotice	pointer
)	O
)	O
)	O
;	O
coerce_it	function
(	O
VOIDP	O
(	O
&	O
(	O
opts	pointer
->	O
pzFullVersion	pointer
)	O
)	O
)	O
;	O
}	O
}	O
