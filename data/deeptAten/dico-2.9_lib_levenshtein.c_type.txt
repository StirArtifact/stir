int	O
dico_levenshtein_distance	function
(	O
const	O
char	O
*	O
astr	pointer
,	O
const	O
char	O
*	O
bstr	pointer
,	O
int	O
flags	int
)	O
{	O
unsigned	O
*	O
a	pointer
,	O
*	O
b	pointer
;	O
int	O
alen	int
;	O
int	O
blen	int
;	O
unsigned	O
*	O
rowptr	pointer
;	O
unsigned	O
*	O
row	array
[	O
3	int
]	O
;	O
int	O
i	int
,	O
j	int
,	O
idx	int
,	O
prev	int
,	O
nrows	int
;	O
int	O
dist	int
;	O
int	O
(	O
*	O
conv	pointer
)	O
(	O
const	O
char	O
*	O
,	O
unsigned	O
*	O
*	O
,	O
size_t	long
*	O
)	O
=	O
(	O
flags	int
&	O
DICO_LEV_NORM	int
)	O
?	O
utf8_mbstr_to_norm_wc	function
:	O
utf8_mbstr_to_wc	function
;	O
if	O
(	O
conv	pointer
(	O
astr	pointer
,	O
&	O
a	pointer
,	O
NULL	O
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
conv	pointer
(	O
bstr	pointer
,	O
&	O
b	pointer
,	O
NULL	O
)	O
)	O
{	O
free	function
(	O
a	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
alen	int
=	O
utf8_wc_strlen	function
(	O
a	pointer
)	O
;	O
blen	int
=	O
utf8_wc_strlen	function
(	O
b	pointer
)	O
;	O
rowptr	pointer
=	O
calloc	function
(	O
sizeof	O
(	O
rowptr	pointer
[	O
0	int
]	O
)	O
,	O
(	O
2	int
+	O
!	O
!	O
(	O
flags	int
&	O
DICO_LEV_DAMERAU	int
)	O
)	O
*	O
(	O
blen	int
+	O
1	int
)	O
)	O
;	O
row	array
[	O
0	int
]	O
=	O
rowptr	pointer
;	O
row	array
[	O
1	int
]	O
=	O
rowptr	pointer
+	O
blen	int
+	O
1	int
;	O
if	O
(	O
flags	int
&	O
DICO_LEV_DAMERAU	int
)	O
{	O
nrows	int
=	O
3	int
;	O
row	array
[	O
2	int
]	O
=	O
row	array
[	O
1	int
]	O
+	O
blen	int
+	O
1	int
;	O
}	O
else	O
nrows	int
=	O
2	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
blen	int
+	O
1	int
;	O
i	int
++	O
)	O
{	O
row	array
[	O
0	int
]	O
[	O
i	int
]	O
=	O
i	int
;	O
DEBUG	O
(	O
row	array
[	O
0	int
]	O
[	O
i	int
]	O
)	O
;	O
}	O
DEBUGNL	O
(	O
)	O
;	O
idx	int
=	O
1	int
;	O
prev	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
alen	int
;	O
i	int
++	O
,	O
prev	int
=	O
idx	int
,	O
idx	int
=	O
(	O
idx	int
+	O
1	int
)	O
%	O
nrows	int
)	O
{	O
row	array
[	O
idx	int
]	O
[	O
0	int
]	O
=	O
i	int
+	O
1	int
;	O
DEBUG	O
(	O
row	array
[	O
idx	int
]	O
[	O
0	int
]	O
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
blen	int
;	O
j	int
++	O
)	O
{	O
unsigned	O
n	long
,	O
cost	int
;	O
cost	int
=	O
!	O
(	O
utf8_wc_toupper	function
(	O
a	pointer
[	O
i	int
]	O
)	O
==	O
utf8_wc_toupper	function
(	O
b	pointer
[	O
j	int
]	O
)	O
)	O
;	O
n	long
=	O
MIN	O
(	O
row	array
[	O
prev	int
]	O
[	O
j	int
+	O
1	int
]	O
+	O
1	int
,	O
row	array
[	O
idx	int
]	O
[	O
j	int
]	O
+	O
1	int
)	O
;	O
n	long
=	O
MIN	O
(	O
n	long
,	O
row	array
[	O
prev	int
]	O
[	O
j	int
]	O
+	O
cost	int
)	O
;	O
if	O
(	O
flags	int
&	O
DICO_LEV_DAMERAU	int
)	O
{	O
if	O
(	O
i	int
>	O
0	int
&&	O
j	int
>	O
0	int
&&	O
utf8_wc_toupper	function
(	O
a	pointer
[	O
i	int
]	O
)	O
==	O
utf8_wc_toupper	function
(	O
b	pointer
[	O
j	int
-	O
1	int
]	O
)	O
&&	O
utf8_wc_toupper	function
(	O
a	pointer
[	O
i	int
-	O
1	int
]	O
)	O
==	O
utf8_wc_toupper	function
(	O
b	pointer
[	O
j	int
]	O
)	O
)	O
n	long
=	O
MIN	O
(	O
n	long
,	O
row	array
[	O
(	O
idx	int
+	O
1	int
)	O
%	O
nrows	int
]	O
[	O
j	int
-	O
1	int
]	O
+	O
cost	int
)	O
;	O
}	O
row	array
[	O
idx	int
]	O
[	O
j	int
+	O
1	int
]	O
=	O
n	long
;	O
DEBUG	O
(	O
row	array
[	O
idx	int
]	O
[	O
j	int
+	O
1	int
]	O
)	O
;	O
}	O
DEBUGNL	O
(	O
)	O
;	O
}	O
dist	int
=	O
row	array
[	O
prev	int
]	O
[	O
blen	int
]	O
;	O
free	function
(	O
rowptr	pointer
)	O
;	O
free	function
(	O
a	pointer
)	O
;	O
free	function
(	O
b	pointer
)	O
;	O
return	O
dist	int
;	O
}	O
