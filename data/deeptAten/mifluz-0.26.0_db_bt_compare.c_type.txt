static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: bt_compare.c,v 1.7 2000/10/25 12:32:19 loic Exp $"	pointer
;	O
int	O
CDB___bam_cmp	function
(	O
dbp	pointer
,	O
dbt	struct
,	O
h	pointer
,	O
indx	short
,	O
func	pointer
,	O
cmpp	pointer
)	O
DB	struct
*	O
dbp	pointer
;	O
const	O
DBT	struct
*	O
dbt	struct
;	O
PAGE	struct
*	O
h	pointer
;	O
u_int32_t	int
indx	short
;	O
int	O
(	O
*	O
func	pointer
)	O
__P	O
(	O
(	O
const	O
DBT	struct
*	O
,	O
const	O
DBT	struct
*	O
)	O
)	O
;	O
int	O
*	O
cmpp	pointer
;	O
{	O
BINTERNAL	struct
*	O
bi	pointer
;	O
BKEYDATA	struct
*	O
bk	pointer
;	O
BOVERFLOW	struct
*	O
bo	pointer
;	O
DBT	struct
pg_dbt	struct
;	O
pg_dbt	struct
.	O
app_private	pointer
=	O
dbp	pointer
->	O
dbenv	pointer
->	O
app_private	pointer
;	O
switch	O
(	O
TYPE	O
(	O
h	pointer
)	O
)	O
{	O
case	O
P_LBTREE	int
:	O
case	O
P_LDUP	int
:	O
case	O
P_LRECNO	int
:	O
bk	pointer
=	O
GET_BKEYDATA	O
(	O
h	pointer
,	O
indx	short
)	O
;	O
if	O
(	O
B_TYPE	O
(	O
bk	pointer
->	O
type	enum
)	O
==	O
B_OVERFLOW	int
)	O
bo	pointer
=	O
(	O
BOVERFLOW	struct
*	O
)	O
bk	pointer
;	O
else	O
{	O
pg_dbt	struct
.	O
data	pointer
=	O
bk	pointer
->	O
data	pointer
;	O
pg_dbt	struct
.	O
size	int
=	O
bk	pointer
->	O
len	short
;	O
*	O
cmpp	pointer
=	O
func	pointer
(	O
dbt	struct
,	O
&	O
pg_dbt	struct
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
break	O
;	O
case	O
P_IBTREE	int
:	O
if	O
(	O
indx	short
==	O
0	int
)	O
{	O
*	O
cmpp	pointer
=	O
1	int
;	O
return	O
(	O
0	int
)	O
;	O
}	O
bi	pointer
=	O
GET_BINTERNAL	O
(	O
h	pointer
,	O
indx	short
)	O
;	O
if	O
(	O
B_TYPE	O
(	O
bi	pointer
->	O
type	enum
)	O
==	O
B_OVERFLOW	int
)	O
bo	pointer
=	O
(	O
BOVERFLOW	struct
*	O
)	O
(	O
bi	pointer
->	O
data	pointer
)	O
;	O
else	O
{	O
pg_dbt	struct
.	O
data	pointer
=	O
bi	pointer
->	O
data	pointer
;	O
pg_dbt	struct
.	O
size	int
=	O
bi	pointer
->	O
len	short
;	O
*	O
cmpp	pointer
=	O
func	pointer
(	O
dbt	struct
,	O
&	O
pg_dbt	struct
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
break	O
;	O
default	O
:	O
return	O
(	O
CDB___db_pgfmt	function
(	O
dbp	pointer
,	O
PGNO	O
(	O
h	pointer
)	O
)	O
)	O
;	O
}	O
return	O
(	O
CDB___db_moff	function
(	O
dbp	pointer
,	O
dbt	struct
,	O
bo	pointer
->	O
pgno	int
,	O
bo	pointer
->	O
tlen	int
,	O
func	pointer
==	O
CDB___bam_defcmp	function
?	O
NULL	O
:	O
func	pointer
,	O
cmpp	pointer
)	O
)	O
;	O
}	O
int	O
CDB___bam_defcmp	function
(	O
a	pointer
,	O
b	pointer
)	O
const	O
DBT	struct
*	O
a	pointer
,	O
*	O
b	pointer
;	O
{	O
size_t	long
len	short
;	O
u_int8_t	char
*	O
p1	pointer
,	O
*	O
p2	pointer
;	O
len	short
=	O
a	pointer
->	O
size	int
>	O
b	pointer
->	O
size	int
?	O
b	pointer
->	O
size	int
:	O
a	pointer
->	O
size	int
;	O
for	O
(	O
p1	pointer
=	O
a	pointer
->	O
data	pointer
,	O
p2	pointer
=	O
b	pointer
->	O
data	pointer
;	O
len	short
--	O
;	O
++	O
p1	pointer
,	O
++	O
p2	pointer
)	O
if	O
(	O
*	O
p1	pointer
!=	O
*	O
p2	pointer
)	O
return	O
(	O
(	O
long	O
)	O
*	O
p1	pointer
-	O
(	O
long	O
)	O
*	O
p2	pointer
)	O
;	O
return	O
(	O
(	O
long	O
)	O
a	pointer
->	O
size	int
-	O
(	O
long	O
)	O
b	pointer
->	O
size	int
)	O
;	O
}	O
size_t	long
CDB___bam_defpfx	function
(	O
a	pointer
,	O
b	pointer
)	O
const	O
DBT	struct
*	O
a	pointer
,	O
*	O
b	pointer
;	O
{	O
size_t	long
cnt	long
,	O
len	short
;	O
u_int8_t	char
*	O
p1	pointer
,	O
*	O
p2	pointer
;	O
cnt	long
=	O
1	int
;	O
len	short
=	O
a	pointer
->	O
size	int
>	O
b	pointer
->	O
size	int
?	O
b	pointer
->	O
size	int
:	O
a	pointer
->	O
size	int
;	O
for	O
(	O
p1	pointer
=	O
a	pointer
->	O
data	pointer
,	O
p2	pointer
=	O
b	pointer
->	O
data	pointer
;	O
len	short
--	O
;	O
++	O
p1	pointer
,	O
++	O
p2	pointer
,	O
++	O
cnt	long
)	O
if	O
(	O
*	O
p1	pointer
!=	O
*	O
p2	pointer
)	O
return	O
(	O
cnt	long
)	O
;	O
return	O
(	O
a	pointer
->	O
size	int
<	O
b	pointer
->	O
size	int
?	O
a	pointer
->	O
size	int
+	O
1	int
:	O
a	pointer
->	O
size	int
)	O
;	O
}	O
