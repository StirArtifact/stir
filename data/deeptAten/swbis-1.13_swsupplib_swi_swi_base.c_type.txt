void	O
swi_vbase_init	function
(	O
void	O
*	O
derived	pointer
,	O
int	O
type	enum
,	O
SWHEADER	struct
*	O
index	function
,	O
SWPATH_EX	struct
*	O
current	pointer
)	O
{	O
SWI_BASE	struct
*	O
base	int
=	O
&	O
(	O
(	O
(	O
SWI_BASE_Derived_	struct
*	O
)	O
derived	pointer
)	O
->	O
baseM	struct
)	O
;	O
int	O
current_file_offset	int
;	O
char	O
*	O
tag	pointer
;	O
char	O
*	O
number	pointer
;	O
int	O
ret	int
;	O
base	int
->	O
id_startM	char
=	O
SWI_BASE_ID_BEGIN	int
;	O
base	int
->	O
type_idM	char
=	O
type	enum
;	O
base	int
->	O
is_activeM	int
=	O
0	int
;	O
base	int
->	O
b_tagM	pointer
=	O
NULL	O
;	O
base	int
->	O
create_timeM	long
=	O
0	int
;	O
base	int
->	O
mod_timeM	long
=	O
0	int
;	O
base	int
->	O
global_headerM	pointer
=	O
index	function
;	O
base	int
->	O
verboseM	int
=	O
1	int
;	O
base	int
->	O
swveridM	pointer
=	O
swverid_open	function
(	O
NULL	O
,	O
NULL	O
)	O
;	O
base	int
->	O
id_endM	char
=	O
SWI_BASE_ID_END	int
;	O
base	int
->	O
numberM	pointer
=	O
NULL	O
;	O
if	O
(	O
index	function
&&	O
current	pointer
)	O
{	O
if	O
(	O
type	enum
==	O
SWI_I_TYPE_PROD	char
)	O
swverid_set_namespace	function
(	O
base	int
->	O
swveridM	pointer
,	O
SW_A_product	pointer
)	O
;	O
else	O
swverid_set_namespace	function
(	O
base	int
->	O
swveridM	pointer
,	O
SW_A_fileset	pointer
)	O
;	O
ret	int
=	O
swi_com_set_header_index	function
(	O
index	function
,	O
current	pointer
,	O
&	O
(	O
base	int
->	O
header_indexM	int
)	O
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"swinstall:  Fatal: the section of the Global INDEX file belonging\n"	pointer
"swinstall:  Fatal: to a package file could not be determined.\n"	pointer
)	O
;	O
}	O
SWLIB_ASSERT	O
(	O
ret	int
==	O
0	int
)	O
;	O
current_file_offset	int
=	O
swheader_get_current_offset	function
(	O
index	function
)	O
;	O
swheader_set_current_offset	function
(	O
index	function
,	O
base	int
->	O
header_indexM	int
)	O
;	O
tag	pointer
=	O
swheader_get_single_attribute_value	function
(	O
index	function
,	O
SW_A_tag	pointer
)	O
;	O
swheader_set_current_offset	function
(	O
index	function
,	O
current_file_offset	int
)	O
;	O
if	O
(	O
!	O
tag	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"swinstall: Fatal: tag attribute not found\n"	pointer
)	O
;	O
}	O
SWLIB_ASSERT	O
(	O
tag	pointer
!=	O
NULL	O
)	O
;	O
base	int
->	O
b_tagM	pointer
=	O
strdup	function
(	O
tag	pointer
)	O
;	O
number	pointer
=	O
swheader_get_single_attribute_value	function
(	O
index	function
,	O
SW_A_number	pointer
)	O
;	O
if	O
(	O
number	pointer
)	O
{	O
base	int
->	O
numberM	pointer
=	O
strdup	function
(	O
number	pointer
)	O
;	O
}	O
else	O
{	O
base	int
->	O
numberM	pointer
=	O
NULL	O
;	O
}	O
}	O
else	O
{	O
base	int
->	O
header_indexM	int
=	O
0	int
;	O
base	int
->	O
b_tagM	pointer
=	O
strdup	function
(	O
""	pointer
)	O
;	O
}	O
}	O
void	O
swi_base_assert	function
(	O
SWI_BASE	struct
*	O
base	int
)	O
{	O
SWLIB_ASSERT	O
(	O
base	int
->	O
id_startM	char
==	O
SWI_BASE_ID_BEGIN	int
)	O
;	O
SWLIB_ASSERT	O
(	O
base	int
->	O
id_endM	char
==	O
SWI_BASE_ID_END	int
)	O
;	O
}	O
void	O
swi_base_set_is_active	function
(	O
SWI_BASE	struct
*	O
base	int
,	O
int	O
n	long
)	O
{	O
base	int
->	O
is_activeM	int
=	O
n	long
;	O
}	O
int	O
swi_vbase_update	function
(	O
void	O
*	O
vbase	pointer
,	O
void	O
*	O
user_defined_parameter	pointer
)	O
{	O
SWI_BASE	struct
*	O
base	int
=	O
&	O
(	O
(	O
(	O
SWI_BASE_Derived_	struct
*	O
)	O
vbase	pointer
)	O
->	O
baseM	struct
)	O
;	O
swi_base_assert	function
(	O
base	int
)	O
;	O
base	int
->	O
is_activeM	int
=	O
1	int
;	O
if	O
(	O
base	int
->	O
create_timeM	long
==	O
0	int
)	O
{	O
time	struct
(	O
&	O
(	O
base	int
->	O
create_timeM	long
)	O
)	O
;	O
}	O
time	struct
(	O
&	O
(	O
base	int
->	O
mod_timeM	long
)	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
swi_vbase_generate_swverid	function
(	O
void	O
*	O
derived	pointer
,	O
void	O
*	O
user_defined_parameter	pointer
)	O
{	O
SWI_BASE	struct
*	O
base	int
=	O
&	O
(	O
(	O
(	O
SWI_BASE_Derived_	struct
*	O
)	O
derived	pointer
)	O
->	O
baseM	struct
)	O
;	O
int	O
current_file_offset	int
;	O
char	O
*	O
obj	pointer
;	O
char	O
*	O
tag	pointer
;	O
char	O
*	O
next_attr	pointer
;	O
int	O
ret	int
;	O
swi_base_assert	function
(	O
base	int
)	O
;	O
ret	int
=	O
0	int
;	O
current_file_offset	int
=	O
swheader_get_current_offset	function
(	O
base	int
->	O
global_headerM	pointer
)	O
;	O
swheader_set_current_offset	function
(	O
base	int
->	O
global_headerM	pointer
,	O
base	int
->	O
header_indexM	int
)	O
;	O
if	O
(	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"<<< New Object \n"	pointer
)	O
;	O
obj	pointer
=	O
swheader_get_current_line	function
(	O
base	int
->	O
global_headerM	pointer
)	O
;	O
swheaderline_write_debug	function
(	O
obj	pointer
,	O
STDERR_FILENO	int
)	O
;	O
while	O
(	O
(	O
next_attr	pointer
=	O
swheader_get_next_attribute	function
(	O
base	int
->	O
global_headerM	pointer
)	O
)	O
)	O
swheaderline_write_debug	function
(	O
next_attr	pointer
,	O
STDERR_FILENO	int
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"<<<\n"	pointer
)	O
;	O
}	O
obj	pointer
=	O
swheader_get_current_line	function
(	O
base	int
->	O
global_headerM	pointer
)	O
;	O
tag	pointer
=	O
swheader_get_single_attribute_value	function
(	O
base	int
->	O
global_headerM	pointer
,	O
SW_A_tag	pointer
)	O
;	O
if	O
(	O
swheaderline_get_type	function
(	O
obj	pointer
)	O
!=	O
SWPARSE_MD_TYPE_OBJ	char
)	O
{	O
SWBIS_IMPL_ERROR_DIE	O
(	O
1	int
)	O
;	O
}	O
ret	int
=	O
swheader_generate_swverid	function
(	O
base	int
->	O
global_headerM	pointer
,	O
base	int
->	O
swveridM	pointer
,	O
obj	pointer
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
swlib_doif_writef	O
(	O
base	int
->	O
verboseM	int
,	O
SWC_VERBOSE_1	int
,	O
(	O
NULL	O
)	O
,	O
STDERR_FILENO	int
,	O
"error generating version id for %s [tag=%s]\n"	pointer
,	O
swheaderline_get_keyword	function
(	O
obj	pointer
)	O
,	O
tag	pointer
)	O
;	O
if	O
(	O
base	int
->	O
verboseM	int
>=	O
SWC_VERBOSE_8	int
)	O
{	O
obj	pointer
=	O
swheader_get_current_line	function
(	O
base	int
->	O
global_headerM	pointer
)	O
;	O
swheaderline_write_debug	function
(	O
obj	pointer
,	O
STDERR_FILENO	int
)	O
;	O
while	O
(	O
(	O
next_attr	pointer
=	O
swheader_get_next_attribute	function
(	O
base	int
->	O
global_headerM	pointer
)	O
)	O
)	O
swheaderline_write_debug	function
(	O
next_attr	pointer
,	O
STDERR_FILENO	int
)	O
;	O
}	O
}	O
swheader_set_current_offset	function
(	O
base	int
->	O
global_headerM	pointer
,	O
current_file_offset	int
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
swi_vbase_set_verbose_level	function
(	O
void	O
*	O
derived	pointer
,	O
void	O
*	O
verbose_level	int
)	O
{	O
SWI_BASE	struct
*	O
base	int
=	O
&	O
(	O
(	O
(	O
SWI_BASE_Derived_	struct
*	O
)	O
derived	pointer
)	O
->	O
baseM	struct
)	O
;	O
base	int
->	O
verboseM	int
=	O
*	O
(	O
(	O
int	O
*	O
)	O
verbose_level	int
)	O
;	O
return	O
0	int
;	O
}	O
