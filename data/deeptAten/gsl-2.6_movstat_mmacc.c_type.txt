typedef	O
double	O
mmacc_type_t	double
;	O
typedef	O
mmacc_type_t	double
ringbuf_type_t	double
;	O
typedef	O
struct	O
{	O
size_t	long
n	int
;	O
size_t	long
k	long
;	O
mmacc_type_t	double
xprev	double
;	O
ringbuf	struct
*	O
rbuf	pointer
;	O
deque	struct
*	O
minque	pointer
;	O
deque	struct
*	O
maxque	pointer
;	O
}	O
mmacc_state_t	struct
;	O
static	O
size_t	long
mmacc_size	function
(	O
const	O
size_t	long
n	int
)	O
;	O
static	O
int	O
mmacc_init	function
(	O
const	O
size_t	long
n	int
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
mmacc_insert	function
(	O
const	O
mmacc_type_t	double
x	double
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
mmacc_delete	function
(	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
mmacc_min	function
(	O
void	O
*	O
params	pointer
,	O
mmacc_type_t	double
*	O
result	pointer
,	O
const	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
mmacc_max	function
(	O
void	O
*	O
params	pointer
,	O
mmacc_type_t	double
*	O
result	pointer
,	O
const	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
mmacc_minmax	function
(	O
void	O
*	O
params	pointer
,	O
mmacc_type_t	double
*	O
result	pointer
,	O
const	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
size_t	long
mmacc_size	function
(	O
const	O
size_t	long
n	int
)	O
{	O
size_t	long
size	long
=	O
0	int
;	O
size	long
+=	O
sizeof	O
(	O
mmacc_state_t	struct
)	O
;	O
size	long
+=	O
ringbuf_size	function
(	O
n	int
)	O
;	O
size	long
+=	O
2	int
*	O
deque_size	function
(	O
n	int
+	O
1	int
)	O
;	O
return	O
size	long
;	O
}	O
static	O
int	O
mmacc_init	function
(	O
const	O
size_t	long
n	int
,	O
void	O
*	O
vstate	pointer
)	O
{	O
mmacc_state_t	struct
*	O
state	pointer
=	O
(	O
mmacc_state_t	struct
*	O
)	O
vstate	pointer
;	O
state	pointer
->	O
n	int
=	O
n	int
;	O
state	pointer
->	O
k	long
=	O
0	int
;	O
state	pointer
->	O
xprev	double
=	O
0.0	int
;	O
state	pointer
->	O
rbuf	pointer
=	O
(	O
ringbuf	struct
*	O
)	O
(	O
(	O
unsigned	O
char	O
*	O
)	O
vstate	pointer
+	O
sizeof	O
(	O
mmacc_state_t	struct
)	O
)	O
;	O
state	pointer
->	O
minque	pointer
=	O
(	O
deque	struct
*	O
)	O
(	O
(	O
unsigned	O
char	O
*	O
)	O
state	pointer
->	O
rbuf	pointer
+	O
ringbuf_size	function
(	O
n	int
)	O
)	O
;	O
state	pointer
->	O
maxque	pointer
=	O
(	O
deque	struct
*	O
)	O
(	O
(	O
unsigned	O
char	O
*	O
)	O
state	pointer
->	O
minque	pointer
+	O
deque_size	function
(	O
n	int
+	O
1	int
)	O
)	O
;	O
ringbuf_init	function
(	O
n	int
,	O
state	pointer
->	O
rbuf	pointer
)	O
;	O
deque_init	function
(	O
n	int
+	O
1	int
,	O
state	pointer
->	O
minque	pointer
)	O
;	O
deque_init	function
(	O
n	int
+	O
1	int
,	O
state	pointer
->	O
maxque	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
mmacc_insert	function
(	O
const	O
mmacc_type_t	double
x	double
,	O
void	O
*	O
vstate	pointer
)	O
{	O
mmacc_state_t	struct
*	O
state	pointer
=	O
(	O
mmacc_state_t	struct
*	O
)	O
vstate	pointer
;	O
int	O
head	int
,	O
tail	int
;	O
if	O
(	O
state	pointer
->	O
k	long
==	O
0	int
)	O
{	O
ringbuf_insert	function
(	O
x	double
,	O
state	pointer
->	O
rbuf	pointer
)	O
;	O
head	int
=	O
state	pointer
->	O
rbuf	pointer
->	O
head	int
;	O
deque_push_back	function
(	O
head	int
,	O
state	pointer
->	O
maxque	pointer
)	O
;	O
deque_push_back	function
(	O
head	int
,	O
state	pointer
->	O
minque	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
x	double
>	O
state	pointer
->	O
xprev	double
)	O
{	O
deque_pop_back	function
(	O
state	pointer
->	O
maxque	pointer
)	O
;	O
while	O
(	O
!	O
deque_is_empty	function
(	O
state	pointer
->	O
maxque	pointer
)	O
)	O
{	O
if	O
(	O
x	double
<=	O
state	pointer
->	O
rbuf	pointer
->	O
array	pointer
[	O
deque_peek_back	function
(	O
state	pointer
->	O
maxque	pointer
)	O
]	O
)	O
break	O
;	O
deque_pop_back	function
(	O
state	pointer
->	O
maxque	pointer
)	O
;	O
}	O
}	O
else	O
{	O
deque_pop_back	function
(	O
state	pointer
->	O
minque	pointer
)	O
;	O
while	O
(	O
!	O
deque_is_empty	function
(	O
state	pointer
->	O
minque	pointer
)	O
)	O
{	O
if	O
(	O
x	double
>=	O
state	pointer
->	O
rbuf	pointer
->	O
array	pointer
[	O
deque_peek_back	function
(	O
state	pointer
->	O
minque	pointer
)	O
]	O
)	O
break	O
;	O
deque_pop_back	function
(	O
state	pointer
->	O
minque	pointer
)	O
;	O
}	O
}	O
tail	int
=	O
state	pointer
->	O
rbuf	pointer
->	O
tail	int
;	O
ringbuf_insert	function
(	O
x	double
,	O
state	pointer
->	O
rbuf	pointer
)	O
;	O
head	int
=	O
state	pointer
->	O
rbuf	pointer
->	O
head	int
;	O
deque_push_back	function
(	O
head	int
,	O
state	pointer
->	O
maxque	pointer
)	O
;	O
deque_push_back	function
(	O
head	int
,	O
state	pointer
->	O
minque	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
k	long
==	O
state	pointer
->	O
n	int
)	O
{	O
if	O
(	O
state	pointer
->	O
maxque	pointer
->	O
head	int
!=	O
state	pointer
->	O
maxque	pointer
->	O
tail	int
&&	O
tail	int
==	O
deque_peek_front	function
(	O
state	pointer
->	O
maxque	pointer
)	O
)	O
deque_pop_front	function
(	O
state	pointer
->	O
maxque	pointer
)	O
;	O
else	O
if	O
(	O
state	pointer
->	O
minque	pointer
->	O
head	int
!=	O
state	pointer
->	O
minque	pointer
->	O
tail	int
&&	O
tail	int
==	O
deque_peek_front	function
(	O
state	pointer
->	O
minque	pointer
)	O
)	O
deque_pop_front	function
(	O
state	pointer
->	O
minque	pointer
)	O
;	O
}	O
}	O
if	O
(	O
state	pointer
->	O
k	long
<	O
state	pointer
->	O
n	int
)	O
++	O
(	O
state	pointer
->	O
k	long
)	O
;	O
state	pointer
->	O
xprev	double
=	O
x	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
mmacc_delete	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
mmacc_state_t	struct
*	O
state	pointer
=	O
(	O
mmacc_state_t	struct
*	O
)	O
vstate	pointer
;	O
if	O
(	O
state	pointer
->	O
k	long
>	O
0	int
)	O
{	O
if	O
(	O
state	pointer
->	O
rbuf	pointer
->	O
tail	int
==	O
deque_peek_front	function
(	O
state	pointer
->	O
maxque	pointer
)	O
)	O
deque_pop_front	function
(	O
state	pointer
->	O
maxque	pointer
)	O
;	O
else	O
if	O
(	O
state	pointer
->	O
rbuf	pointer
->	O
tail	int
==	O
deque_peek_front	function
(	O
state	pointer
->	O
minque	pointer
)	O
)	O
deque_pop_front	function
(	O
state	pointer
->	O
minque	pointer
)	O
;	O
ringbuf_pop_back	function
(	O
state	pointer
->	O
rbuf	pointer
)	O
;	O
--	O
(	O
state	pointer
->	O
k	long
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
mmacc_min	function
(	O
void	O
*	O
params	pointer
,	O
mmacc_type_t	double
*	O
result	pointer
,	O
const	O
void	O
*	O
vstate	pointer
)	O
{	O
const	O
mmacc_state_t	struct
*	O
state	pointer
=	O
(	O
const	O
mmacc_state_t	struct
*	O
)	O
vstate	pointer
;	O
(	O
void	O
)	O
params	pointer
;	O
if	O
(	O
state	pointer
->	O
k	long
==	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"no samples yet added to workspace"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
else	O
{	O
*	O
result	pointer
=	O
state	pointer
->	O
rbuf	pointer
->	O
array	pointer
[	O
deque_peek_front	function
(	O
state	pointer
->	O
minque	pointer
)	O
]	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
mmacc_max	function
(	O
void	O
*	O
params	pointer
,	O
mmacc_type_t	double
*	O
result	pointer
,	O
const	O
void	O
*	O
vstate	pointer
)	O
{	O
const	O
mmacc_state_t	struct
*	O
state	pointer
=	O
(	O
const	O
mmacc_state_t	struct
*	O
)	O
vstate	pointer
;	O
(	O
void	O
)	O
params	pointer
;	O
if	O
(	O
state	pointer
->	O
k	long
==	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"no samples yet added to workspace"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
else	O
{	O
*	O
result	pointer
=	O
state	pointer
->	O
rbuf	pointer
->	O
array	pointer
[	O
deque_peek_front	function
(	O
state	pointer
->	O
maxque	pointer
)	O
]	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
mmacc_minmax	function
(	O
void	O
*	O
params	pointer
,	O
mmacc_type_t	double
*	O
result	pointer
,	O
const	O
void	O
*	O
vstate	pointer
)	O
{	O
const	O
mmacc_state_t	struct
*	O
state	pointer
=	O
(	O
const	O
mmacc_state_t	struct
*	O
)	O
vstate	pointer
;	O
(	O
void	O
)	O
params	pointer
;	O
if	O
(	O
state	pointer
->	O
k	long
==	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"no samples yet added to workspace"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
else	O
{	O
result	pointer
[	O
0	int
]	O
=	O
state	pointer
->	O
rbuf	pointer
->	O
array	pointer
[	O
deque_peek_front	function
(	O
state	pointer
->	O
minque	pointer
)	O
]	O
;	O
result	pointer
[	O
1	int
]	O
=	O
state	pointer
->	O
rbuf	pointer
->	O
array	pointer
[	O
deque_peek_front	function
(	O
state	pointer
->	O
maxque	pointer
)	O
]	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
const	O
gsl_movstat_accum	struct
min_accum_type	struct
=	O
{	O
mmacc_size	function
,	O
mmacc_init	function
,	O
mmacc_insert	function
,	O
mmacc_delete	function
,	O
mmacc_min	function
}	O
;	O
const	O
gsl_movstat_accum	struct
*	O
gsl_movstat_accum_min	pointer
=	O
&	O
min_accum_type	struct
;	O
static	O
const	O
gsl_movstat_accum	struct
max_accum_type	struct
=	O
{	O
mmacc_size	function
,	O
mmacc_init	function
,	O
mmacc_insert	function
,	O
mmacc_delete	function
,	O
mmacc_max	function
}	O
;	O
const	O
gsl_movstat_accum	struct
*	O
gsl_movstat_accum_max	pointer
=	O
&	O
max_accum_type	struct
;	O
static	O
const	O
gsl_movstat_accum	struct
minmax_accum_type	struct
=	O
{	O
mmacc_size	function
,	O
mmacc_init	function
,	O
mmacc_insert	function
,	O
mmacc_delete	function
,	O
mmacc_minmax	function
}	O
;	O
const	O
gsl_movstat_accum	struct
*	O
gsl_movstat_accum_minmax	pointer
=	O
&	O
minmax_accum_type	struct
;	O
