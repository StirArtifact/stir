int	O
get_file_index	function
(	O
char	O
*	O
file_name	pointer
)	O
;	O
int	O
is_hit	function
(	O
unsigned	O
char	O
const	O
*	O
hits	pointer
,	O
int	O
file_number	int
)	O
;	O
int	O
is_hit_1	function
(	O
unsigned	O
char	O
const	O
*	O
*	O
hits	pointer
,	O
int	O
level	int
,	O
int	O
file_number	int
)	O
;	O
void	O
skip_hits	function
(	O
unsigned	O
char	O
const	O
*	O
*	O
hits	pointer
,	O
int	O
level	int
)	O
;	O
void	O
usage	function
(	O
void	O
)	O
;	O
struct	O
idhead	struct
idh	struct
;	O
int	O
tree8_levels	int
;	O
char	O
const	O
*	O
program_name	pointer
;	O
static	O
int	O
show_help	int
;	O
static	O
int	O
show_version	int
;	O
struct	O
file_link	struct
*	O
cw_dlink	pointer
;	O
struct	O
file_link	struct
*	O
*	O
members_0	pointer
;	O
unsigned	O
int	O
bits_vec_size	int
;	O
char	O
*	O
hits_buf	pointer
;	O
static	O
struct	O
option	struct
const	O
long_options	array
[	O
]	O
=	O
{	O
{	O
"file"	pointer
,	O
required_argument	int
,	O
0	int
,	O
'f'	O
}	O
,	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
&	O
show_help	int
,	O
1	int
}	O
,	O
{	O
"version"	pointer
,	O
no_argument	int
,	O
&	O
show_version	int
,	O
1	int
}	O
,	O
{	O
0	int
}	O
}	O
;	O
void	O
usage	function
(	O
void	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"Try `%s --help' for more information.\n"	pointer
)	O
,	O
program_name	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
static	O
void	O
help_me	function
(	O
void	O
)	O
{	O
printf	function
(	O
_	O
(	O
"Usage: %s [OPTION] FILENAME [FILENAME2]\n"	pointer
)	O
,	O
program_name	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"List identifiers that occur in FILENAME, or if FILENAME2 is\nalso given list the identifiers that occur in both files.\n\n  -f, --file=FILE  file name of ID database\n      --help       display this help and exit\n      --version    output version information and exit\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"\nReport bugs to "	pointer
PACKAGE_BUGREPORT	pointer
"\n\n"	pointer
)	O
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
index_1	int
=	O
-	O
1	int
;	O
int	O
index_2	int
=	O
-	O
1	int
;	O
program_name	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
idh	struct
.	O
idh_file_name	pointer
=	O
0	int
;	O
setlocale	function
(	O
LC_ALL	O
,	O
""	pointer
)	O
;	O
bindtextdomain	function
(	O
PACKAGE	pointer
,	O
LOCALEDIR	O
)	O
;	O
textdomain	function
(	O
PACKAGE	pointer
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
optc	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"f:"	pointer
,	O
long_options	array
,	O
(	O
int	O
*	O
)	O
0	int
)	O
;	O
if	O
(	O
optc	int
<	O
0	int
)	O
break	O
;	O
switch	O
(	O
optc	int
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
'f'	O
:	O
idh	struct
.	O
idh_file_name	pointer
=	O
optarg	pointer
;	O
break	O
;	O
default	O
:	O
usage	function
(	O
)	O
;	O
}	O
}	O
if	O
(	O
show_version	int
)	O
{	O
printf	function
(	O
"%s - %s\n"	pointer
,	O
program_name	pointer
,	O
PACKAGE_VERSION	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
if	O
(	O
show_help	int
)	O
help_me	function
(	O
)	O
;	O
argc	int
-=	O
optind	int
;	O
argv	pointer
+=	O
optind	int
;	O
if	O
(	O
argc	int
<	O
1	int
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"no file name arguments"	pointer
)	O
)	O
;	O
usage	function
(	O
)	O
;	O
}	O
if	O
(	O
argc	int
>	O
2	int
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"too many file name arguments"	pointer
)	O
)	O
;	O
usage	function
(	O
)	O
;	O
}	O
idh	struct
.	O
idh_file_name	pointer
=	O
locate_id_file_name	function
(	O
idh	struct
.	O
idh_file_name	pointer
)	O
;	O
if	O
(	O
idh	struct
.	O
idh_file_name	pointer
==	O
0	int
)	O
error	function
(	O
1	int
,	O
errno	O
,	O
_	O
(	O
"can't locate `ID'"	pointer
)	O
)	O
;	O
init_idh_obstacks	function
(	O
&	O
idh	struct
)	O
;	O
init_idh_tables	function
(	O
&	O
idh	struct
)	O
;	O
cw_dlink	pointer
=	O
get_current_dir_link	function
(	O
)	O
;	O
members_0	pointer
=	O
read_id_file	function
(	O
idh	struct
.	O
idh_file_name	pointer
,	O
&	O
idh	struct
)	O
;	O
bits_vec_size	int
=	O
(	O
idh	struct
.	O
idh_files	long
+	O
7	int
)	O
/	O
4	int
;	O
tree8_levels	int
=	O
tree8_count_levels	function
(	O
idh	struct
.	O
idh_files	long
)	O
;	O
index_1	int
=	O
get_file_index	function
(	O
(	O
argc	int
--	O
,	O
*	O
argv	pointer
++	O
)	O
)	O
;	O
if	O
(	O
argc	int
)	O
index_2	int
=	O
get_file_index	function
(	O
(	O
argc	int
--	O
,	O
*	O
argv	pointer
++	O
)	O
)	O
;	O
if	O
(	O
index_1	int
<	O
0	int
)	O
return	O
1	int
;	O
hits_buf	pointer
=	O
xmalloc	function
(	O
idh	struct
.	O
idh_buf_size	long
)	O
;	O
fseek	function
(	O
idh	struct
.	O
idh_FILE	pointer
,	O
idh	struct
.	O
idh_tokens_offset	long
,	O
SEEK_SET	int
)	O
;	O
{	O
int	O
count	int
=	O
0	int
;	O
int	O
i	int
;	O
int	O
separator	int
=	O
(	O
isatty	function
(	O
STDOUT_FILENO	int
)	O
?	O
' '	O
:	O
'\n'	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
idh	struct
.	O
idh_tokens	long
;	O
i	int
++	O
)	O
{	O
unsigned	O
char	O
const	O
*	O
hits	pointer
;	O
gets_past_00	function
(	O
hits_buf	pointer
,	O
idh	struct
.	O
idh_FILE	pointer
)	O
;	O
hits	pointer
=	O
token_hits_addr	function
(	O
hits_buf	pointer
)	O
;	O
if	O
(	O
is_hit	function
(	O
hits	pointer
,	O
index_1	int
)	O
&&	O
(	O
index_2	int
<	O
0	int
||	O
is_hit	function
(	O
hits	pointer
,	O
index_2	int
)	O
)	O
)	O
{	O
fputs	function
(	O
token_string	O
(	O
hits_buf	pointer
)	O
,	O
stdout	pointer
)	O
;	O
putchar	function
(	O
separator	int
)	O
;	O
count	int
++	O
;	O
}	O
}	O
if	O
(	O
count	int
&&	O
separator	int
==	O
' '	O
)	O
putchar	function
(	O
'\n'	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
get_file_index	function
(	O
char	O
*	O
file_name	pointer
)	O
{	O
struct	O
file_link	struct
*	O
*	O
members	pointer
;	O
struct	O
file_link	struct
*	O
*	O
end	pointer
=	O
&	O
members_0	pointer
[	O
idh	struct
.	O
idh_files	long
]	O
;	O
struct	O
file_link	struct
*	O
fn_flink	pointer
=	O
0	int
;	O
char	O
*	O
file_name_buf	pointer
=	O
alloca	O
(	O
PATH_MAX	int
)	O
;	O
int	O
has_slash	int
=	O
(	O
strchr	function
(	O
file_name	pointer
,	O
'/'	O
)	O
!=	O
0	int
)	O
;	O
int	O
file_name_length	int
=	O
strlen	function
(	O
file_name	pointer
)	O
;	O
int	O
idx	int
=	O
-	O
1	int
;	O
if	O
(	O
strstr	function
(	O
file_name	pointer
,	O
"./"	pointer
)	O
)	O
fn_flink	pointer
=	O
parse_file_name	function
(	O
file_name	pointer
,	O
cw_dlink	pointer
)	O
;	O
for	O
(	O
members	pointer
=	O
members_0	pointer
;	O
members	pointer
<	O
end	pointer
;	O
members	pointer
++	O
)	O
{	O
struct	O
file_link	struct
*	O
flink	pointer
=	O
*	O
members	pointer
;	O
if	O
(	O
fn_flink	pointer
)	O
{	O
if	O
(	O
fn_flink	pointer
!=	O
flink	pointer
)	O
continue	O
;	O
}	O
else	O
if	O
(	O
has_slash	int
)	O
{	O
int	O
member_length	int
;	O
maybe_relative_file_name	function
(	O
file_name_buf	pointer
,	O
flink	pointer
,	O
cw_dlink	pointer
)	O
;	O
member_length	int
=	O
strlen	function
(	O
file_name_buf	pointer
)	O
;	O
if	O
(	O
file_name_length	int
>	O
member_length	int
||	O
!	O
strequ	O
(	O
&	O
file_name_buf	pointer
[	O
member_length	int
-	O
file_name_length	int
]	O
,	O
file_name	pointer
)	O
)	O
continue	O
;	O
}	O
else	O
if	O
(	O
!	O
strequ	O
(	O
flink	pointer
->	O
fl_name	array
,	O
file_name	pointer
)	O
)	O
continue	O
;	O
if	O
(	O
idx	int
>=	O
0	int
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"`%s' is ambiguous"	pointer
)	O
,	O
file_name	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
idx	int
=	O
members	pointer
-	O
members_0	pointer
;	O
}	O
if	O
(	O
idx	int
<	O
0	int
)	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"`%s' not found"	pointer
)	O
,	O
file_name	pointer
)	O
;	O
return	O
idx	int
;	O
}	O
int	O
is_hit	function
(	O
unsigned	O
char	O
const	O
*	O
hits	pointer
,	O
int	O
file_number	int
)	O
{	O
return	O
is_hit_1	function
(	O
&	O
hits	pointer
,	O
tree8_levels	int
,	O
file_number	int
)	O
;	O
}	O
int	O
is_hit_1	function
(	O
unsigned	O
char	O
const	O
*	O
*	O
hits	pointer
,	O
int	O
level	int
,	O
int	O
file_number	int
)	O
{	O
int	O
file_hit	int
=	O
1	int
<<	O
(	O
(	O
file_number	int
>>	O
(	O
3	int
*	O
--	O
level	int
)	O
)	O
&	O
7	int
)	O
;	O
int	O
hit	int
=	O
*	O
(	O
*	O
hits	pointer
)	O
++	O
;	O
int	O
bit	int
;	O
if	O
(	O
!	O
(	O
file_hit	int
&	O
hit	int
)	O
)	O
return	O
0	int
;	O
if	O
(	O
level	int
==	O
0	int
)	O
return	O
1	int
;	O
for	O
(	O
bit	int
=	O
1	int
;	O
(	O
bit	int
<	O
file_hit	int
)	O
&&	O
(	O
bit	int
&	O
0xff	int
)	O
;	O
bit	int
<<=	O
1	int
)	O
{	O
if	O
(	O
hit	int
&	O
bit	int
)	O
skip_hits	function
(	O
hits	pointer
,	O
level	int
)	O
;	O
}	O
return	O
is_hit_1	function
(	O
hits	pointer
,	O
level	int
,	O
file_number	int
)	O
;	O
}	O
void	O
skip_hits	function
(	O
unsigned	O
char	O
const	O
*	O
*	O
hits	pointer
,	O
int	O
level	int
)	O
{	O
int	O
hit	int
=	O
*	O
(	O
*	O
hits	pointer
)	O
++	O
;	O
int	O
bit	int
;	O
if	O
(	O
--	O
level	int
==	O
0	int
)	O
return	O
;	O
for	O
(	O
bit	int
=	O
1	int
;	O
bit	int
&	O
0xff	int
;	O
bit	int
<<=	O
1	int
)	O
{	O
if	O
(	O
hit	int
&	O
bit	int
)	O
skip_hits	function
(	O
hits	pointer
,	O
level	int
)	O
;	O
}	O
}	O
