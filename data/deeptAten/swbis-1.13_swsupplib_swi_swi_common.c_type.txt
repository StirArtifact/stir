static	O
int	O
is_clean_relative_path	function
(	O
char	O
*	O
name	pointer
)	O
{	O
if	O
(	O
swlib_is_sh_tainted_string	function
(	O
name	pointer
)	O
||	O
strstr	function
(	O
name	pointer
,	O
"../"	pointer
)	O
||	O
strstr	function
(	O
name	pointer
,	O
"/.."	pointer
)	O
||	O
*	O
name	pointer
==	O
'/'	O
)	O
{	O
return	O
0	int
;	O
}	O
else	O
{	O
return	O
1	int
;	O
}	O
}	O
static	O
void	O
fatal_error	function
(	O
char	O
*	O
msg0	pointer
,	O
char	O
*	O
msg	pointer
,	O
int	O
msg2	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s : %s : %s line=[%d]\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
msg0	pointer
,	O
msg	pointer
,	O
msg2	int
)	O
;	O
exit	function
(	O
99	int
)	O
;	O
}	O
int	O
swi_com_set_header_index	function
(	O
SWHEADER	struct
*	O
header	struct
,	O
SWPATH_EX	struct
*	O
swpath_ex	pointer
,	O
int	O
*	O
ai	pointer
)	O
{	O
int	O
index_offset	int
;	O
int	O
retval	int
;	O
index_offset	int
=	O
glbindex_find_by_swpath_ex	function
(	O
header	struct
,	O
swpath_ex	pointer
)	O
;	O
if	O
(	O
index_offset	int
>=	O
0	int
)	O
{	O
*	O
ai	pointer
=	O
index_offset	int
;	O
retval	int
=	O
0	int
;	O
}	O
else	O
{	O
swi_com_internal_error	function
(	O
__FILE__	O
,	O
__LINE__	O
)	O
;	O
*	O
ai	pointer
=	O
0	int
;	O
retval	int
=	O
-	O
1	int
;	O
}	O
return	O
retval	int
;	O
}	O
void	O
swi_com_internal_error	function
(	O
char	O
*	O
file	pointer
,	O
int	O
line	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: internal error : %s:%d\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
file	pointer
,	O
line	pointer
)	O
;	O
}	O
void	O
swi_com_internal_fatal_error	function
(	O
char	O
*	O
file	pointer
,	O
int	O
line	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: internal fatal error : %s:%d\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
file	pointer
,	O
line	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
void	O
swi_com_assert_pointer	function
(	O
void	O
*	O
p	pointer
,	O
char	O
*	O
file	pointer
,	O
int	O
lineno	int
)	O
{	O
if	O
(	O
!	O
p	pointer
)	O
fatal_error	function
(	O
"fatal null pointer error"	pointer
,	O
file	pointer
,	O
lineno	int
)	O
;	O
}	O
void	O
swi_com_assert_value	function
(	O
int	O
p	pointer
,	O
char	O
*	O
file	pointer
,	O
int	O
lineno	int
)	O
{	O
if	O
(	O
!	O
p	pointer
)	O
fatal_error	function
(	O
"fatal zero value error"	pointer
,	O
file	pointer
,	O
lineno	int
)	O
;	O
}	O
void	O
swi_com_fatal_error	function
(	O
char	O
*	O
msg	pointer
,	O
int	O
msg2	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: fatal error : %s [%d]\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
msg	pointer
,	O
msg2	int
)	O
;	O
close	pointer
(	O
STDERR_FILENO	int
)	O
;	O
close	pointer
(	O
STDIN_FILENO	int
)	O
;	O
close	pointer
(	O
STDOUT_FILENO	int
)	O
;	O
exit	function
(	O
10	int
)	O
;	O
}	O
int	O
swi_com_close_memfd	function
(	O
int	O
fd	int
)	O
{	O
return	O
uxfio_close	function
(	O
fd	int
)	O
;	O
}	O
char	O
*	O
swi_com_new_fd_mem	function
(	O
int	O
fd	int
,	O
int	O
*	O
datalen	pointer
)	O
{	O
char	O
*	O
s	pointer
;	O
char	O
*	O
ret	pointer
;	O
int	O
len	int
;	O
s	pointer
=	O
swi_com_get_fd_mem	function
(	O
fd	int
,	O
&	O
len	int
)	O
;	O
ret	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
len	int
+	O
1	int
)	O
;	O
memcpy	function
(	O
ret	pointer
,	O
s	pointer
,	O
len	int
)	O
;	O
memcpy	function
(	O
ret	pointer
+	O
len	int
,	O
"\x00"	pointer
,	O
1	int
)	O
;	O
if	O
(	O
datalen	pointer
)	O
*	O
datalen	pointer
=	O
len	int
;	O
return	O
ret	pointer
;	O
}	O
char	O
*	O
swi_com_get_fd_mem	function
(	O
int	O
fd	int
,	O
int	O
*	O
datalen	pointer
)	O
{	O
unsigned	O
char	O
nullchar	char
=	O
'\0'	O
;	O
char	O
*	O
s	pointer
;	O
int	O
ret	pointer
;	O
if	O
(	O
uxfio_get_dynamic_buffer	function
(	O
fd	int
,	O
&	O
s	pointer
,	O
(	O
int	O
*	O
)	O
NULL	O
,	O
datalen	pointer
)	O
<	O
0	int
)	O
return	O
NULL	O
;	O
ret	pointer
=	O
uxfio_lseek	function
(	O
fd	int
,	O
0	int
,	O
SEEK_END	int
)	O
;	O
swi_com_assert_value	function
(	O
ret	pointer
>=	O
0	int
,	O
__FILE__	O
,	O
__LINE__	O
)	O
;	O
ret	pointer
=	O
uxfio_write	function
(	O
fd	int
,	O
(	O
void	O
*	O
)	O
(	O
&	O
nullchar	char
)	O
,	O
1	int
)	O
;	O
swi_com_assert_value	function
(	O
ret	pointer
==	O
1	int
,	O
__FILE__	O
,	O
__LINE__	O
)	O
;	O
if	O
(	O
uxfio_get_dynamic_buffer	function
(	O
fd	int
,	O
&	O
s	pointer
,	O
(	O
int	O
*	O
)	O
NULL	O
,	O
(	O
int	O
*	O
)	O
NULL	O
)	O
<	O
0	int
)	O
return	O
NULL	O
;	O
return	O
s	pointer
;	O
}	O
void	O
swi_com_do_preview	function
(	O
TARU	struct
*	O
taru	pointer
,	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
,	O
char	O
*	O
tar_header_p	pointer
,	O
int	O
header_len	int
,	O
time_t	long
now	long
)	O
{	O
char	O
ftype	char
;	O
int	O
ret	pointer
;	O
int	O
eoa	pointer
;	O
struct	O
stat	struct
sb	pointer
;	O
char	O
uname	array
[	O
64	int
]	O
;	O
char	O
gname	array
[	O
64	int
]	O
;	O
ret	pointer
=	O
taru_read_in_tar_header2	function
(	O
taru	pointer
,	O
file_hdr	pointer
,	O
-	O
1	int
,	O
tar_header_p	pointer
,	O
&	O
eoa	pointer
,	O
0	int
,	O
TARRECORDSIZE	int
)	O
;	O
if	O
(	O
ret	pointer
<=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"error from taru_read_in_tar_header2 in do_swi_preview\n"	pointer
)	O
;	O
}	O
taru_filehdr2statbuf	function
(	O
&	O
sb	pointer
,	O
file_hdr	pointer
)	O
;	O
strncpy	function
(	O
uname	array
,	O
tar_header_p	pointer
+	O
THB_BO_uname	int
,	O
31	int
)	O
;	O
uname	array
[	O
31	int
]	O
=	O
'\0'	O
;	O
strncpy	function
(	O
gname	array
,	O
tar_header_p	pointer
+	O
THB_BO_gname	int
,	O
31	int
)	O
;	O
gname	array
[	O
31	int
]	O
=	O
'\0'	O
;	O
ftype	char
=	O
taru_get_tar_filetype	function
(	O
sb	pointer
.	O
st_mode	int
)	O
;	O
if	O
(	O
ftype	char
>=	O
0	int
)	O
ls_list	function
(	O
ahsStaticGetTarFilename	function
(	O
file_hdr	pointer
)	O
,	O
ahsStaticGetTarLinkname	function
(	O
file_hdr	pointer
)	O
,	O
file_hdr	pointer
,	O
now	long
,	O
stdout	pointer
,	O
uname	array
,	O
gname	array
,	O
ftype	char
,	O
LS_LIST_VERBOSE_L1	O
)	O
;	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: unrecognized file type in mode [%d] for file: %s\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
(	O
int	O
)	O
(	O
sb	pointer
.	O
st_mode	int
)	O
,	O
ahsStaticGetTarFilename	function
(	O
file_hdr	pointer
)	O
)	O
;	O
}	O
void	O
swi_com_check_clean_relative_path	function
(	O
char	O
*	O
name	pointer
)	O
{	O
if	O
(	O
is_clean_relative_path	function
(	O
name	pointer
)	O
)	O
{	O
return	O
;	O
}	O
else	O
{	O
swi_com_assert_value	function
(	O
0	int
,	O
__FILE__	O
,	O
__LINE__	O
)	O
;	O
_exit	function
(	O
44	int
)	O
;	O
}	O
}	O
void	O
swiInitListOfObjects	function
(	O
void	O
*	O
*	O
pp	pointer
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
SWI_MAX_OBJ	int
;	O
i	int
++	O
)	O
*	O
(	O
pp	pointer
+	O
i	int
)	O
=	O
(	O
void	O
*	O
)	O
NULL	O
;	O
}	O
int	O
swiGetNumberOfObjects	function
(	O
void	O
*	O
*	O
pp	pointer
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
SWI_MAX_OBJ	int
-	O
1	int
)	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
*	O
(	O
pp	pointer
+	O
i	int
)	O
==	O
(	O
void	O
*	O
)	O
NULL	O
)	O
{	O
return	O
i	int
;	O
}	O
}	O
fprintf	function
(	O
stderr	pointer
,	O
"too many contained objects, fatal error\n"	pointer
)	O
;	O
exit	function
(	O
88	int
)	O
;	O
}	O
int	O
swiAddObjectToList	function
(	O
void	O
*	O
*	O
pp	pointer
,	O
void	O
*	O
p	pointer
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
SWI_MAX_OBJ	int
-	O
1	int
)	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
*	O
(	O
pp	pointer
+	O
i	int
)	O
==	O
(	O
void	O
*	O
)	O
NULL	O
)	O
{	O
*	O
(	O
pp	pointer
+	O
i	int
)	O
=	O
p	pointer
;	O
return	O
0	int
;	O
}	O
}	O
fprintf	function
(	O
stderr	pointer
,	O
"too many contained objects, fatal error\n"	pointer
)	O
;	O
exit	function
(	O
88	int
)	O
;	O
}	O
void	O
swi_com_header_manifold_reset	function
(	O
SWHEADER	struct
*	O
swheader	pointer
)	O
{	O
swheader_reset	function
(	O
swheader	pointer
)	O
;	O
swheader_set_current_offset_p_value	function
(	O
swheader	pointer
,	O
0	int
)	O
;	O
swheader_goto_next_line	function
(	O
swheader	pointer
,	O
swheader_get_current_offset_p	function
(	O
swheader	pointer
)	O
,	O
SWHEADER_GET_NEXT	int
)	O
;	O
}	O
int	O
swi_com_field_edge_detect	function
(	O
char	O
*	O
current	pointer
,	O
char	O
*	O
previous	pointer
)	O
{	O
char	O
*	O
c	int
=	O
current	pointer
;	O
char	O
*	O
p	pointer
=	O
previous	pointer
;	O
if	O
(	O
!	O
p	pointer
||	O
!	O
c	int
)	O
{	O
swi_com_assert_pointer	function
(	O
(	O
void	O
*	O
)	O
NULL	O
,	O
__FILE__	O
,	O
__LINE__	O
)	O
;	O
}	O
if	O
(	O
strlen	function
(	O
p	pointer
)	O
==	O
0	int
&&	O
strlen	function
(	O
c	int
)	O
)	O
return	O
1	int
;	O
if	O
(	O
strcmp	function
(	O
p	pointer
,	O
c	int
)	O
&&	O
strlen	function
(	O
c	int
)	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
swi_com_field_edge_detect_fileset	function
(	O
SWPATH_EX	struct
*	O
current	pointer
,	O
SWPATH_EX	struct
*	O
previous	pointer
)	O
{	O
int	O
ret	pointer
;	O
ret	pointer
=	O
swi_com_field_edge_detect	function
(	O
current	pointer
->	O
fileset_control_dir	pointer
,	O
previous	pointer
->	O
fileset_control_dir	pointer
)	O
;	O
if	O
(	O
ret	pointer
==	O
0	int
)	O
{	O
if	O
(	O
strlen	function
(	O
current	pointer
->	O
pfiles	pointer
)	O
==	O
0	int
&&	O
strlen	function
(	O
previous	pointer
->	O
pfiles	pointer
)	O
)	O
{	O
ret	pointer
=	O
1	int
;	O
}	O
}	O
return	O
ret	pointer
;	O
}	O
void	O
print_header	function
(	O
SWHEADER	struct
*	O
swheader	pointer
)	O
{	O
char	O
*	O
next_attr	pointer
;	O
char	O
*	O
next_line	pointer
;	O
swheader_reset	function
(	O
swheader	pointer
)	O
;	O
swheader_set_current_offset_p_value	function
(	O
swheader	pointer
,	O
0	int
)	O
;	O
next_line	pointer
=	O
swheader_get_next_object	function
(	O
swheader	pointer
,	O
(	O
int	O
)	O
UCHAR_MAX	O
,	O
(	O
int	O
)	O
UCHAR_MAX	O
)	O
;	O
while	O
(	O
next_line	pointer
)	O
{	O
swheaderline_write_debug	function
(	O
next_line	pointer
,	O
STDERR_FILENO	int
)	O
;	O
swheader_goto_next_line	function
(	O
(	O
void	O
*	O
)	O
swheader	pointer
,	O
swheader_get_current_offset_p	function
(	O
swheader	pointer
)	O
,	O
SWHEADER_PEEK_NEXT	int
)	O
;	O
while	O
(	O
(	O
next_attr	pointer
=	O
swheader_get_next_attribute	function
(	O
swheader	pointer
)	O
)	O
)	O
swheaderline_write_debug	function
(	O
next_attr	pointer
,	O
STDERR_FILENO	int
)	O
;	O
next_line	pointer
=	O
swheader_get_next_object	function
(	O
swheader	pointer
,	O
(	O
int	O
)	O
UCHAR_MAX	O
,	O
(	O
int	O
)	O
UCHAR_MAX	O
)	O
;	O
}	O
}	O
void	O
swi_check_clean_relative_path	function
(	O
char	O
*	O
name	pointer
)	O
{	O
if	O
(	O
is_clean_relative_path	function
(	O
name	pointer
)	O
)	O
{	O
return	O
;	O
}	O
else	O
{	O
swi_com_assert_value	function
(	O
0	int
,	O
__FILE__	O
,	O
__LINE__	O
)	O
;	O
_exit	function
(	O
44	int
)	O
;	O
}	O
}	O
int	O
swi_is_global_index	function
(	O
SWPATH	struct
*	O
swpath	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
char	O
*	O
s	pointer
;	O
if	O
(	O
(	O
s	pointer
=	O
strstr	function
(	O
name	pointer
,	O
"/INDEX"	pointer
)	O
)	O
&&	O
*	O
(	O
s	pointer
+	O
6	int
)	O
==	O
'\0'	O
&&	O
strlen	function
(	O
swpath_get_dfiles	function
(	O
swpath	pointer
)	O
)	O
==	O
0	int
&&	O
strlen	function
(	O
swpath_get_pfiles	function
(	O
swpath	pointer
)	O
)	O
==	O
0	int
&&	O
strlen	function
(	O
swpath_get_product_control_dir	function
(	O
swpath	pointer
)	O
)	O
==	O
0	int
)	O
{	O
return	O
1	int
;	O
}	O
else	O
{	O
return	O
0	int
;	O
}	O
}	O
