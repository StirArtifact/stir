static	O
const	O
char	O
*	O
AuthErrors	array
[	O
]	O
=	O
{	O
"Auth success"	pointer
,	O
"Auth failed: Packet oversized"	pointer
,	O
"Auth failed: X-Cookie doesn't match"	pointer
,	O
"Auth failed: Wrong transmission protocol version"	pointer
,	O
"Auth failed: Device locked"	pointer
"Auth failed: Bad packet"	pointer
,	O
"Auth failed: I/O Error"	pointer
}	O
;	O
typedef	O
struct	O
RemoteFile_t	struct
{	O
Class_t	struct
*	O
Class	pointer
;	O
int	O
refs	int
;	O
Stream_t	struct
*	O
Next	pointer
;	O
Stream_t	struct
*	O
Buffer	pointer
;	O
int	O
fd	int
;	O
mt_off_t	long
offset	long
;	O
mt_off_t	long
lastwhere	long
;	O
mt_off_t	long
size	array
;	O
unsigned	O
int	O
version	int
;	O
unsigned	O
int	O
capabilities	int
;	O
int	O
drive	char
;	O
}	O
RemoteFile_t	struct
;	O
static	O
unsigned	O
int	O
authenticate_to_floppyd	function
(	O
RemoteFile_t	struct
*	O
floppyd	pointer
,	O
int	O
sock	int
,	O
char	O
*	O
display	pointer
)	O
{	O
size_t	long
filelen	long
;	O
ssize_t	long
newlen	long
;	O
Byte	char
buf	pointer
[	O
16	int
]	O
;	O
const	O
char	O
*	O
command	pointer
[	O
]	O
=	O
{	O
"xauth"	pointer
,	O
"xauth"	pointer
,	O
"extract"	pointer
,	O
"-"	pointer
,	O
0	int
,	O
0	int
}	O
;	O
char	O
*	O
xcookie	pointer
;	O
Dword	int
errcode	int
;	O
int	O
l	int
;	O
command	pointer
[	O
4	int
]	O
=	O
display	pointer
;	O
filelen	long
=	O
strlen	function
(	O
display	pointer
)	O
;	O
filelen	long
+=	O
100	int
;	O
xcookie	pointer
=	O
(	O
char	O
*	O
)	O
safe_malloc	function
(	O
filelen	long
+	O
4	int
)	O
;	O
newlen	long
=	O
safePopenOut	function
(	O
command	pointer
,	O
xcookie	pointer
+	O
4	int
,	O
filelen	long
)	O
;	O
if	O
(	O
newlen	long
<	O
1	int
)	O
return	O
AUTH_AUTHFAILED	int
;	O
filelen	long
=	O
(	O
size_t	long
)	O
newlen	long
;	O
dword2byte	function
(	O
4	int
,	O
buf	pointer
)	O
;	O
dword2byte	function
(	O
floppyd	pointer
->	O
version	int
,	O
buf	pointer
+	O
4	int
)	O
;	O
if	O
(	O
write	pointer
(	O
sock	int
,	O
buf	pointer
,	O
8	int
)	O
<	O
8	int
)	O
return	O
AUTH_IO_ERROR	int
;	O
if	O
(	O
(	O
l	int
=	O
(	O
int	O
)	O
read_dword	function
(	O
sock	int
)	O
)	O
<	O
4	int
)	O
{	O
return	O
AUTH_WRONGVERSION	int
;	O
}	O
errcode	int
=	O
read_dword	function
(	O
sock	int
)	O
;	O
if	O
(	O
errcode	int
!=	O
AUTH_SUCCESS	int
)	O
{	O
return	O
errcode	int
;	O
}	O
if	O
(	O
l	int
>=	O
8	int
)	O
floppyd	pointer
->	O
version	int
=	O
read_dword	function
(	O
sock	int
)	O
;	O
if	O
(	O
l	int
>=	O
12	int
)	O
floppyd	pointer
->	O
capabilities	int
=	O
read_dword	function
(	O
sock	int
)	O
;	O
dword2byte	function
(	O
filelen	long
,	O
(	O
Byte	char
*	O
)	O
xcookie	pointer
)	O
;	O
if	O
(	O
write	pointer
(	O
sock	int
,	O
xcookie	pointer
,	O
filelen	long
+	O
4	int
)	O
<	O
(	O
(	O
ssize_t	long
)	O
(	O
filelen	long
+	O
4	int
)	O
)	O
)	O
return	O
AUTH_IO_ERROR	int
;	O
if	O
(	O
read_dword	function
(	O
sock	int
)	O
!=	O
4	int
)	O
{	O
return	O
AUTH_PACKETOVERSIZE	int
;	O
}	O
errcode	int
=	O
read_dword	function
(	O
sock	int
)	O
;	O
return	O
errcode	int
;	O
}	O
static	O
int	O
floppyd_reader	function
(	O
int	O
fd	int
,	O
char	O
*	O
buffer	pointer
,	O
size_t	long
len	long
)	O
{	O
Dword	int
errcode	int
;	O
Dword	int
gotlen	int
;	O
Byte	char
buf	pointer
[	O
16	int
]	O
;	O
dword2byte	function
(	O
1	int
,	O
buf	pointer
)	O
;	O
buf	pointer
[	O
4	int
]	O
=	O
OP_READ	int
;	O
dword2byte	function
(	O
4	int
,	O
buf	pointer
+	O
5	int
)	O
;	O
dword2byte	function
(	O
len	long
,	O
buf	pointer
+	O
9	int
)	O
;	O
if	O
(	O
write	pointer
(	O
fd	int
,	O
buf	pointer
,	O
13	int
)	O
<	O
13	int
)	O
return	O
AUTH_IO_ERROR	int
;	O
if	O
(	O
read_dword	function
(	O
fd	int
)	O
!=	O
8	int
)	O
{	O
errno	O
=	O
EIO	int
;	O
return	O
-	O
1	int
;	O
}	O
gotlen	int
=	O
read_dword	function
(	O
fd	int
)	O
;	O
errcode	int
=	O
read_dword	function
(	O
fd	int
)	O
;	O
if	O
(	O
gotlen	int
!=	O
(	O
Dword	int
)	O
-	O
1	int
)	O
{	O
size_t	long
l	int
;	O
unsigned	O
int	O
start	array
;	O
if	O
(	O
read_dword	function
(	O
fd	int
)	O
!=	O
gotlen	int
)	O
{	O
errno	O
=	O
EIO	int
;	O
return	O
-	O
1	int
;	O
}	O
for	O
(	O
start	array
=	O
0	int
,	O
l	int
=	O
0	int
;	O
start	array
<	O
gotlen	int
;	O
start	array
+=	O
l	int
)	O
{	O
ssize_t	long
ret	long
=	O
read	pointer
(	O
fd	int
,	O
buffer	pointer
+	O
start	array
,	O
gotlen	int
-	O
start	array
)	O
;	O
if	O
(	O
ret	long
<	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
ret	long
==	O
0	int
)	O
{	O
errno	O
=	O
EIO	int
;	O
return	O
-	O
1	int
;	O
}	O
l	int
=	O
(	O
size_t	long
)	O
ret	long
;	O
}	O
}	O
else	O
{	O
errno	O
=	O
errcode	int
;	O
}	O
return	O
gotlen	int
;	O
}	O
static	O
int	O
floppyd_writer	function
(	O
int	O
fd	int
,	O
char	O
*	O
buffer	pointer
,	O
size_t	long
len	long
)	O
{	O
Dword	int
errcode	int
;	O
Dword	int
gotlen	int
;	O
Byte	char
buf	pointer
[	O
16	int
]	O
;	O
dword2byte	function
(	O
1	int
,	O
buf	pointer
)	O
;	O
buf	pointer
[	O
4	int
]	O
=	O
OP_WRITE	int
;	O
dword2byte	function
(	O
len	long
,	O
buf	pointer
+	O
5	int
)	O
;	O
cork	function
(	O
fd	int
,	O
1	int
)	O
;	O
if	O
(	O
write	pointer
(	O
fd	int
,	O
buf	pointer
,	O
9	int
)	O
<	O
9	int
)	O
return	O
AUTH_IO_ERROR	int
;	O
if	O
(	O
write	pointer
(	O
fd	int
,	O
buffer	pointer
,	O
len	long
)	O
<	O
len	long
)	O
return	O
AUTH_IO_ERROR	int
;	O
cork	function
(	O
fd	int
,	O
0	int
)	O
;	O
if	O
(	O
read_dword	function
(	O
fd	int
)	O
!=	O
8	int
)	O
{	O
errno	O
=	O
EIO	int
;	O
return	O
-	O
1	int
;	O
}	O
gotlen	int
=	O
read_dword	function
(	O
fd	int
)	O
;	O
errcode	int
=	O
read_dword	function
(	O
fd	int
)	O
;	O
errno	O
=	O
errcode	int
;	O
if	O
(	O
errno	O
!=	O
0	int
&&	O
gotlen	int
==	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
EBADF	int
)	O
errno	O
=	O
EROFS	int
;	O
gotlen	int
=	O
-	O
1	int
;	O
}	O
return	O
gotlen	int
;	O
}	O
static	O
int	O
floppyd_lseek	function
(	O
int	O
fd	int
,	O
mt_off_t	long
offset	long
,	O
int	O
whence	int
)	O
{	O
Dword	int
errcode	int
;	O
Dword	int
gotlen	int
;	O
Byte	char
buf	pointer
[	O
32	int
]	O
;	O
dword2byte	function
(	O
1	int
,	O
buf	pointer
)	O
;	O
buf	pointer
[	O
4	int
]	O
=	O
OP_SEEK	int
;	O
dword2byte	function
(	O
8	int
,	O
buf	pointer
+	O
5	int
)	O
;	O
dword2byte	function
(	O
truncBytes32	function
(	O
offset	long
)	O
,	O
buf	pointer
+	O
9	int
)	O
;	O
dword2byte	function
(	O
whence	int
,	O
buf	pointer
+	O
13	int
)	O
;	O
if	O
(	O
write	pointer
(	O
fd	int
,	O
buf	pointer
,	O
17	int
)	O
<	O
17	int
)	O
return	O
AUTH_IO_ERROR	int
;	O
if	O
(	O
read_dword	function
(	O
fd	int
)	O
!=	O
8	int
)	O
{	O
errno	O
=	O
EIO	int
;	O
return	O
-	O
1	int
;	O
}	O
gotlen	int
=	O
read_dword	function
(	O
fd	int
)	O
;	O
errcode	int
=	O
read_dword	function
(	O
fd	int
)	O
;	O
errno	O
=	O
errcode	int
;	O
return	O
gotlen	int
;	O
}	O
static	O
mt_off_t	long
floppyd_lseek64	function
(	O
int	O
fd	int
,	O
mt_off_t	long
offset	long
,	O
int	O
whence	int
)	O
{	O
Dword	int
errcode	int
;	O
Qword	long
gotlen	int
;	O
Byte	char
buf	pointer
[	O
32	int
]	O
;	O
dword2byte	function
(	O
1	int
,	O
buf	pointer
)	O
;	O
buf	pointer
[	O
4	int
]	O
=	O
OP_SEEK64	int
;	O
dword2byte	function
(	O
12	int
,	O
buf	pointer
+	O
5	int
)	O
;	O
qword2byte	function
(	O
offset	long
,	O
buf	pointer
+	O
9	int
)	O
;	O
dword2byte	function
(	O
whence	int
,	O
buf	pointer
+	O
17	int
)	O
;	O
if	O
(	O
write	pointer
(	O
fd	int
,	O
buf	pointer
,	O
21	int
)	O
<	O
21	int
)	O
return	O
AUTH_IO_ERROR	int
;	O
if	O
(	O
read_dword	function
(	O
fd	int
)	O
!=	O
12	int
)	O
{	O
errno	O
=	O
EIO	int
;	O
return	O
-	O
1	int
;	O
}	O
gotlen	int
=	O
read_qword	function
(	O
fd	int
)	O
;	O
errcode	int
=	O
read_dword	function
(	O
fd	int
)	O
;	O
errno	O
=	O
errcode	int
;	O
return	O
gotlen	int
;	O
}	O
static	O
int	O
floppyd_open	function
(	O
RemoteFile_t	struct
*	O
This	pointer
,	O
int	O
mode	int
)	O
{	O
Dword	int
errcode	int
;	O
Dword	int
gotlen	int
;	O
Byte	char
buf	pointer
[	O
16	int
]	O
;	O
if	O
(	O
!	O
(	O
This	pointer
->	O
capabilities	int
&	O
FLOPPYD_CAP_EXPLICIT_OPEN	int
)	O
)	O
{	O
return	O
0	int
;	O
}	O
dword2byte	function
(	O
1	int
,	O
buf	pointer
)	O
;	O
if	O
(	O
(	O
mode	int
&	O
O_ACCMODE	int
)	O
==	O
O_RDONLY	int
)	O
buf	pointer
[	O
4	int
]	O
=	O
OP_OPRO	int
;	O
else	O
buf	pointer
[	O
4	int
]	O
=	O
OP_OPRW	int
;	O
dword2byte	function
(	O
4	int
,	O
buf	pointer
+	O
5	int
)	O
;	O
dword2byte	function
(	O
This	pointer
->	O
drive	char
,	O
buf	pointer
+	O
9	int
)	O
;	O
if	O
(	O
write	pointer
(	O
This	pointer
->	O
fd	int
,	O
buf	pointer
,	O
13	int
)	O
<	O
13	int
)	O
return	O
AUTH_IO_ERROR	int
;	O
if	O
(	O
read_dword	function
(	O
This	pointer
->	O
fd	int
)	O
!=	O
8	int
)	O
{	O
errno	O
=	O
EIO	int
;	O
return	O
-	O
1	int
;	O
}	O
gotlen	int
=	O
read_dword	function
(	O
This	pointer
->	O
fd	int
)	O
;	O
errcode	int
=	O
read_dword	function
(	O
This	pointer
->	O
fd	int
)	O
;	O
errno	O
=	O
errcode	int
;	O
return	O
gotlen	int
;	O
}	O
typedef	O
int	O
(	O
*	O
iofn	pointer
)	O
(	O
int	O
,	O
char	O
*	O
,	O
size_t	long
)	O
;	O
static	O
int	O
floppyd_io	function
(	O
Stream_t	struct
*	O
Stream	pointer
,	O
char	O
*	O
buf	pointer
,	O
mt_off_t	long
where	long
,	O
size_t	long
len	long
,	O
iofn	pointer
io	pointer
)	O
{	O
DeclareThis	O
(	O
RemoteFile_t	struct
)	O
;	O
int	O
ret	long
;	O
where	long
+=	O
This	pointer
->	O
offset	long
;	O
if	O
(	O
where	long
!=	O
This	pointer
->	O
lastwhere	long
)	O
{	O
if	O
(	O
This	pointer
->	O
capabilities	int
&	O
FLOPPYD_CAP_LARGE_SEEK	int
)	O
{	O
if	O
(	O
floppyd_lseek64	function
(	O
This	pointer
->	O
fd	int
,	O
where	long
,	O
SEEK_SET	int
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
"floppyd_lseek64"	pointer
)	O
;	O
This	pointer
->	O
lastwhere	long
=	O
(	O
mt_off_t	long
)	O
-	O
1	int
;	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
floppyd_lseek	function
(	O
This	pointer
->	O
fd	int
,	O
where	long
,	O
SEEK_SET	int
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
"floppyd_lseek"	pointer
)	O
;	O
This	pointer
->	O
lastwhere	long
=	O
(	O
mt_off_t	long
)	O
-	O
1	int
;	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
ret	long
=	O
io	pointer
(	O
This	pointer
->	O
fd	int
,	O
buf	pointer
,	O
len	long
)	O
;	O
if	O
(	O
ret	long
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"floppyd_io"	pointer
)	O
;	O
This	pointer
->	O
lastwhere	long
=	O
(	O
mt_off_t	long
)	O
-	O
1	int
;	O
return	O
-	O
1	int
;	O
}	O
This	pointer
->	O
lastwhere	long
=	O
where	long
+	O
ret	long
;	O
return	O
ret	long
;	O
}	O
static	O
int	O
floppyd_read	function
(	O
Stream_t	struct
*	O
Stream	pointer
,	O
char	O
*	O
buf	pointer
,	O
mt_off_t	long
where	long
,	O
size_t	long
len	long
)	O
{	O
return	O
floppyd_io	function
(	O
Stream	pointer
,	O
buf	pointer
,	O
where	long
,	O
len	long
,	O
floppyd_reader	function
)	O
;	O
}	O
static	O
int	O
floppyd_write	function
(	O
Stream_t	struct
*	O
Stream	pointer
,	O
char	O
*	O
buf	pointer
,	O
mt_off_t	long
where	long
,	O
size_t	long
len	long
)	O
{	O
return	O
floppyd_io	function
(	O
Stream	pointer
,	O
buf	pointer
,	O
where	long
,	O
len	long
,	O
floppyd_writer	function
)	O
;	O
}	O
static	O
int	O
floppyd_flush	function
(	O
Stream_t	struct
*	O
Stream	pointer
)	O
{	O
Byte	char
buf	pointer
[	O
16	int
]	O
;	O
DeclareThis	O
(	O
RemoteFile_t	struct
)	O
;	O
dword2byte	function
(	O
1	int
,	O
buf	pointer
)	O
;	O
buf	pointer
[	O
4	int
]	O
=	O
OP_FLUSH	int
;	O
dword2byte	function
(	O
1	int
,	O
buf	pointer
+	O
5	int
)	O
;	O
buf	pointer
[	O
9	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
write	pointer
(	O
This	pointer
->	O
fd	int
,	O
buf	pointer
,	O
10	int
)	O
<	O
10	int
)	O
return	O
AUTH_IO_ERROR	int
;	O
if	O
(	O
read_dword	function
(	O
This	pointer
->	O
fd	int
)	O
!=	O
8	int
)	O
{	O
errno	O
=	O
EIO	int
;	O
return	O
-	O
1	int
;	O
}	O
read_dword	function
(	O
This	pointer
->	O
fd	int
)	O
;	O
read_dword	function
(	O
This	pointer
->	O
fd	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
floppyd_free	function
(	O
Stream_t	struct
*	O
Stream	pointer
)	O
{	O
Byte	char
buf	pointer
[	O
16	int
]	O
;	O
unsigned	O
int	O
gotlen	int
;	O
unsigned	O
int	O
errcode	int
;	O
DeclareThis	O
(	O
RemoteFile_t	struct
)	O
;	O
if	O
(	O
This	pointer
->	O
fd	int
>	O
2	int
)	O
{	O
dword2byte	function
(	O
1	int
,	O
buf	pointer
)	O
;	O
buf	pointer
[	O
4	int
]	O
=	O
OP_CLOSE	int
;	O
if	O
(	O
write	pointer
(	O
This	pointer
->	O
fd	int
,	O
buf	pointer
,	O
5	int
)	O
<	O
5	int
)	O
return	O
AUTH_IO_ERROR	int
;	O
shutdown	function
(	O
This	pointer
->	O
fd	int
,	O
1	int
)	O
;	O
if	O
(	O
read_dword	function
(	O
This	pointer
->	O
fd	int
)	O
!=	O
8	int
)	O
{	O
errno	O
=	O
EIO	int
;	O
return	O
-	O
1	int
;	O
}	O
gotlen	int
=	O
read_dword	function
(	O
This	pointer
->	O
fd	int
)	O
;	O
errcode	int
=	O
read_dword	function
(	O
This	pointer
->	O
fd	int
)	O
;	O
errno	O
=	O
errcode	int
;	O
close	pointer
(	O
This	pointer
->	O
fd	int
)	O
;	O
return	O
gotlen	int
;	O
}	O
else	O
{	O
return	O
0	int
;	O
}	O
}	O
static	O
int	O
floppyd_geom	function
(	O
Stream_t	struct
*	O
Stream	pointer
,	O
struct	O
device	struct
*	O
dev	pointer
,	O
struct	O
device	struct
*	O
orig_dev	pointer
UNUSEDP	O
,	O
int	O
media	char
,	O
union	O
bootsector	union
*	O
boot	struct
)	O
{	O
size_t	long
tot_sectors	long
;	O
unsigned	O
int	O
sect_per_track	int
;	O
DeclareThis	O
(	O
RemoteFile_t	struct
)	O
;	O
dev	pointer
->	O
ssize	char
=	O
2	int
;	O
dev	pointer
->	O
use_2m	int
=	O
0x80	int
;	O
if	O
(	O
media	char
==	O
0xf0	int
||	O
media	char
>=	O
0x100	int
)	O
{	O
dev	pointer
->	O
heads	short
=	O
WORD	O
(	O
nheads	array
)	O
;	O
dev	pointer
->	O
sectors	short
=	O
WORD	O
(	O
nsect	array
)	O
;	O
tot_sectors	long
=	O
DWORD	O
(	O
bigsect	array
)	O
;	O
SET_INT	O
(	O
tot_sectors	long
,	O
WORD	O
(	O
psect	array
)	O
)	O
;	O
sect_per_track	int
=	O
dev	pointer
->	O
heads	short
*	O
dev	pointer
->	O
sectors	short
;	O
tot_sectors	long
+=	O
sect_per_track	int
-	O
1	int
;	O
dev	pointer
->	O
tracks	int
=	O
tot_sectors	long
/	O
sect_per_track	int
;	O
}	O
else	O
if	O
(	O
setDeviceFromOldDos	function
(	O
media	char
,	O
dev	pointer
)	O
<	O
0	int
)	O
exit	function
(	O
1	int
)	O
;	O
This	pointer
->	O
size	array
=	O
(	O
mt_off_t	long
)	O
512	int
*	O
dev	pointer
->	O
sectors	short
*	O
dev	pointer
->	O
tracks	int
*	O
dev	pointer
->	O
heads	short
;	O
return	O
0	int
;	O
}	O
static	O
int	O
floppyd_data	function
(	O
Stream_t	struct
*	O
Stream	pointer
,	O
time_t	long
*	O
date	array
,	O
mt_size_t	long
*	O
size	array
,	O
int	O
*	O
type	enum
,	O
int	O
*	O
address	long
)	O
{	O
DeclareThis	O
(	O
RemoteFile_t	struct
)	O
;	O
if	O
(	O
date	array
)	O
*	O
date	array
=	O
0	int
;	O
if	O
(	O
size	array
)	O
*	O
size	array
=	O
(	O
mt_size_t	long
)	O
This	pointer
->	O
size	array
;	O
if	O
(	O
type	enum
)	O
*	O
type	enum
=	O
0	int
;	O
if	O
(	O
address	long
)	O
*	O
address	long
=	O
0	int
;	O
return	O
0	int
;	O
}	O
static	O
Class_t	struct
FloppydFileClass	struct
=	O
{	O
floppyd_read	function
,	O
floppyd_write	function
,	O
floppyd_flush	function
,	O
floppyd_free	function
,	O
floppyd_geom	function
,	O
floppyd_data	function
,	O
0	int
,	O
0	int
,	O
0	int
}	O
;	O
static	O
int	O
get_host_and_port_and_drive	function
(	O
const	O
char	O
*	O
name	pointer
,	O
char	O
*	O
*	O
hostname	pointer
,	O
char	O
*	O
*	O
display	pointer
,	O
uint16_t	short
*	O
port	pointer
,	O
int	O
*	O
drive	char
)	O
{	O
char	O
*	O
newname	pointer
=	O
strdup	function
(	O
name	pointer
)	O
;	O
char	O
*	O
p	pointer
;	O
char	O
*	O
p2	pointer
;	O
p	pointer
=	O
newname	pointer
;	O
while	O
(	O
*	O
p	pointer
!=	O
'/'	O
&&	O
*	O
p	pointer
)	O
p	pointer
++	O
;	O
p2	pointer
=	O
p	pointer
;	O
if	O
(	O
*	O
p	pointer
)	O
p	pointer
++	O
;	O
*	O
p2	pointer
=	O
0	int
;	O
*	O
port	pointer
=	O
FLOPPYD_DEFAULT_PORT	int
;	O
if	O
(	O
*	O
p	pointer
>=	O
'0'	O
&&	O
*	O
p	pointer
<=	O
'9'	O
)	O
*	O
port	pointer
=	O
strtou16	function
(	O
p	pointer
,	O
&	O
p	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
p	pointer
==	O
'/'	O
)	O
p	pointer
++	O
;	O
*	O
drive	char
=	O
0	int
;	O
if	O
(	O
*	O
p	pointer
>=	O
'0'	O
&&	O
*	O
p	pointer
<=	O
'9'	O
)	O
*	O
drive	char
=	O
strtoi	function
(	O
p	pointer
,	O
&	O
p	pointer
,	O
0	int
)	O
;	O
*	O
display	pointer
=	O
strdup	function
(	O
newname	pointer
)	O
;	O
p	pointer
=	O
newname	pointer
;	O
while	O
(	O
*	O
p	pointer
!=	O
':'	O
&&	O
*	O
p	pointer
)	O
p	pointer
++	O
;	O
p2	pointer
=	O
p	pointer
;	O
if	O
(	O
*	O
p	pointer
)	O
p	pointer
++	O
;	O
*	O
p2	pointer
=	O
0	int
;	O
*	O
port	pointer
+=	O
atoi	function
(	O
p	pointer
)	O
;	O
if	O
(	O
!	O
*	O
newname	pointer
||	O
strcmp	function
(	O
newname	pointer
,	O
"unix"	pointer
)	O
==	O
0	int
)	O
{	O
free	function
(	O
newname	pointer
)	O
;	O
newname	pointer
=	O
strdup	function
(	O
"localhost"	pointer
)	O
;	O
}	O
*	O
hostname	pointer
=	O
newname	pointer
;	O
return	O
1	int
;	O
}	O
static	O
in_addr_t	int
getipaddress	function
(	O
char	O
*	O
ipaddr	pointer
)	O
{	O
struct	O
hostent	struct
*	O
host	pointer
;	O
in_addr_t	int
ip	int
;	O
if	O
(	O
(	O
(	O
ip	int
=	O
inet_addr	function
(	O
ipaddr	pointer
)	O
)	O
==	O
INADDR_NONE	O
)	O
&&	O
(	O
strcmp	function
(	O
ipaddr	pointer
,	O
"255.255.255.255"	pointer
)	O
!=	O
0	int
)	O
)	O
{	O
if	O
(	O
(	O
host	pointer
=	O
gethostbyname	function
(	O
ipaddr	pointer
)	O
)	O
!=	O
NULL	O
)	O
{	O
memcpy	function
(	O
&	O
ip	int
,	O
host	pointer
->	O
h_addr	O
,	O
sizeof	O
(	O
ip	int
)	O
)	O
;	O
}	O
endhostent	function
(	O
)	O
;	O
}	O
return	O
(	O
ip	int
)	O
;	O
}	O
static	O
int	O
connect_to_server	function
(	O
in_addr_t	int
ip	int
,	O
uint16_t	short
port	pointer
)	O
{	O
struct	O
sockaddr_in	struct
addr	struct
;	O
int	O
sock	int
;	O
if	O
(	O
(	O
sock	int
=	O
socket	function
(	O
AF_INET	O
,	O
SOCK_STREAM	int
,	O
0	int
)	O
)	O
<	O
0	int
)	O
{	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
addr	struct
.	O
sin_family	short
=	O
AF_INET	O
;	O
addr	struct
.	O
sin_port	short
=	O
htons	function
(	O
port	pointer
)	O
;	O
addr	struct
.	O
sin_addr	struct
.	O
s_addr	int
=	O
ip	int
;	O
if	O
(	O
connect	function
(	O
sock	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
addr	struct
,	O
sizeof	O
(	O
addr	struct
)	O
)	O
<	O
0	int
)	O
{	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
{	O
int	O
on	int
=	O
1	int
;	O
setsockopt	function
(	O
sock	int
,	O
SOL_SOCKET	int
,	O
SO_KEEPALIVE	int
,	O
(	O
char	O
*	O
)	O
&	O
on	int
,	O
sizeof	O
(	O
on	int
)	O
)	O
;	O
}	O
return	O
(	O
sock	int
)	O
;	O
}	O
static	O
int	O
ConnectToFloppyd	function
(	O
RemoteFile_t	struct
*	O
floppyd	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
char	O
*	O
errmsg	pointer
)	O
;	O
Stream_t	struct
*	O
FloppydOpen	function
(	O
struct	O
device	struct
*	O
dev	pointer
,	O
char	O
*	O
name	pointer
,	O
int	O
mode	int
,	O
char	O
*	O
errmsg	pointer
,	O
mt_size_t	long
*	O
maxSize	pointer
)	O
{	O
RemoteFile_t	struct
*	O
This	pointer
;	O
if	O
(	O
!	O
dev	pointer
||	O
!	O
(	O
dev	pointer
->	O
misc_flags	int
&	O
FLOPPYD_FLAG	int
)	O
)	O
return	O
NULL	O
;	O
This	pointer
=	O
New	O
(	O
RemoteFile_t	struct
)	O
;	O
if	O
(	O
!	O
This	pointer
)	O
{	O
printOom	function
(	O
)	O
;	O
return	O
NULL	O
;	O
}	O
This	pointer
->	O
Class	pointer
=	O
&	O
FloppydFileClass	struct
;	O
This	pointer
->	O
Next	pointer
=	O
0	int
;	O
This	pointer
->	O
offset	long
=	O
0	int
;	O
This	pointer
->	O
lastwhere	long
=	O
0	int
;	O
This	pointer
->	O
refs	int
=	O
1	int
;	O
This	pointer
->	O
Buffer	pointer
=	O
0	int
;	O
This	pointer
->	O
fd	int
=	O
ConnectToFloppyd	function
(	O
This	pointer
,	O
name	pointer
,	O
errmsg	pointer
)	O
;	O
if	O
(	O
This	pointer
->	O
fd	int
==	O
-	O
1	int
)	O
{	O
Free	O
(	O
This	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
floppyd_open	function
(	O
This	pointer
,	O
mode	int
)	O
<	O
0	int
)	O
{	O
sprintf	function
(	O
errmsg	pointer
,	O
"Can't open remote drive: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
close	pointer
(	O
This	pointer
->	O
fd	int
)	O
;	O
Free	O
(	O
This	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
maxSize	pointer
)	O
{	O
*	O
maxSize	pointer
=	O
(	O
This	pointer
->	O
capabilities	int
&	O
FLOPPYD_CAP_LARGE_SEEK	int
)	O
?	O
max_off_t_seek	long
:	O
max_off_t_31	long
;	O
}	O
return	O
(	O
Stream_t	struct
*	O
)	O
This	pointer
;	O
}	O
static	O
int	O
ConnectToFloppyd	function
(	O
RemoteFile_t	struct
*	O
floppyd	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
char	O
*	O
errmsg	pointer
)	O
{	O
char	O
*	O
hostname	pointer
;	O
char	O
*	O
display	pointer
;	O
uint16_t	short
port	pointer
;	O
int	O
rval	pointer
=	O
get_host_and_port_and_drive	function
(	O
name	pointer
,	O
&	O
hostname	pointer
,	O
&	O
display	pointer
,	O
&	O
port	pointer
,	O
&	O
floppyd	pointer
->	O
drive	char
)	O
;	O
int	O
sock	int
;	O
unsigned	O
int	O
reply	int
;	O
if	O
(	O
!	O
rval	pointer
)	O
return	O
-	O
1	int
;	O
floppyd	pointer
->	O
version	int
=	O
FLOPPYD_PROTOCOL_VERSION	int
;	O
floppyd	pointer
->	O
capabilities	int
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
sock	int
=	O
connect_to_server	function
(	O
getipaddress	function
(	O
hostname	pointer
)	O
,	O
port	pointer
)	O
;	O
if	O
(	O
sock	int
==	O
-	O
1	int
)	O
{	O
snprintf	function
(	O
errmsg	pointer
,	O
200	int
,	O
"Can't connect to floppyd server on %s, port %i (%s)!"	pointer
,	O
hostname	pointer
,	O
port	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
reply	int
=	O
authenticate_to_floppyd	function
(	O
floppyd	pointer
,	O
sock	int
,	O
display	pointer
)	O
;	O
if	O
(	O
floppyd	pointer
->	O
version	int
==	O
FLOPPYD_PROTOCOL_VERSION_OLD	int
)	O
break	O
;	O
if	O
(	O
reply	int
==	O
AUTH_WRONGVERSION	int
)	O
{	O
floppyd	pointer
->	O
version	int
=	O
FLOPPYD_PROTOCOL_VERSION_OLD	int
;	O
continue	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
reply	int
!=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Permission denied, authentication failed!\n"	pointer
"%s\n"	pointer
,	O
AuthErrors	array
[	O
reply	int
]	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
free	function
(	O
hostname	pointer
)	O
;	O
free	function
(	O
display	pointer
)	O
;	O
return	O
sock	int
;	O
}	O
