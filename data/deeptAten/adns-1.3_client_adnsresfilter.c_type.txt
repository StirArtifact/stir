struct	O
outqueuenode	struct
{	O
struct	O
outqueuenode	struct
*	O
next	pointer
,	O
*	O
back	pointer
;	O
void	O
*	O
buffer	pointer
;	O
char	O
*	O
textp	pointer
;	O
int	O
textlen	int
;	O
struct	O
timeval	struct
printbefore	struct
;	O
struct	O
treething	struct
*	O
addr	union
;	O
}	O
;	O
static	O
int	O
bracket	int
,	O
forever	int
,	O
address	int
;	O
static	O
unsigned	O
long	O
timeout	long
=	O
1000	int
;	O
static	O
adns_rrtype	enum
rrt	enum
=	O
adns_r_ptr	int
;	O
static	O
adns_initflags	enum
initflags	enum
=	O
0	int
;	O
static	O
const	O
char	O
*	O
config_text	pointer
;	O
static	O
int	O
outblocked	int
,	O
inputeof	int
;	O
static	O
struct	O
{	O
struct	O
outqueuenode	struct
*	O
head	pointer
,	O
*	O
tail	pointer
;	O
}	O
outqueue	struct
;	O
static	O
int	O
peroutqueuenode	int
,	O
outqueuelen	int
;	O
static	O
struct	O
sockaddr_in	struct
sa	struct
;	O
static	O
adns_state	pointer
ads	pointer
;	O
static	O
char	O
addrtextbuf	array
[	O
14	int
]	O
;	O
static	O
int	O
cbyte	int
,	O
inbyte	int
,	O
inbuf	int
;	O
static	O
unsigned	O
char	O
bytes	pointer
[	O
4	int
]	O
;	O
static	O
struct	O
timeval	struct
printbefore	struct
;	O
struct	O
treething	struct
{	O
unsigned	O
char	O
bytes	pointer
[	O
4	int
]	O
;	O
adns_query	pointer
qu	pointer
;	O
adns_answer	struct
*	O
ans	pointer
;	O
}	O
;	O
static	O
struct	O
treething	struct
*	O
newthing	pointer
;	O
static	O
void	O
*	O
treeroot	pointer
;	O
static	O
int	O
nonblock	function
(	O
int	O
fd	int
,	O
int	O
isnonblock	int
)	O
{	O
int	O
r	int
;	O
r	int
=	O
fcntl	function
(	O
fd	int
,	O
F_GETFL	int
)	O
;	O
if	O
(	O
r	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
r	int
=	O
fcntl	function
(	O
fd	int
,	O
F_SETFL	int
,	O
isnonblock	int
?	O
r	int
|	O
O_NONBLOCK	int
:	O
r	int
&	O
~	O
O_NONBLOCK	int
)	O
;	O
if	O
(	O
r	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
void	O
quitnow	function
(	O
int	O
exitstatus	int
)	O
{	O
nonblock	function
(	O
0	int
,	O
0	int
)	O
;	O
nonblock	function
(	O
1	int
,	O
0	int
)	O
;	O
exit	function
(	O
exitstatus	int
)	O
;	O
}	O
static	O
void	O
sysfail	function
(	O
const	O
char	O
*	O
what	pointer
)	O
NONRETURNING	O
;	O
static	O
void	O
sysfail	function
(	O
const	O
char	O
*	O
what	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"adnsresfilter: system call failed: %s: %s\n"	pointer
,	O
what	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
quitnow	function
(	O
2	int
)	O
;	O
}	O
static	O
void	O
*	O
xmalloc	function
(	O
size_t	long
sz	long
)	O
{	O
void	O
*	O
r	int
;	O
r	int
=	O
malloc	function
(	O
sz	long
)	O
;	O
if	O
(	O
r	int
)	O
return	O
r	int
;	O
sysfail	function
(	O
"malloc"	pointer
)	O
;	O
}	O
static	O
void	O
outputerr	function
(	O
void	O
)	O
NONRETURNING	O
;	O
static	O
void	O
outputerr	function
(	O
void	O
)	O
{	O
sysfail	function
(	O
"write to stdout"	pointer
)	O
;	O
}	O
static	O
void	O
usage	function
(	O
void	O
)	O
{	O
if	O
(	O
printf	function
(	O
"usage: adnsresfilter [<options ...>]\n"	pointer
"       adnsresfilter  -h|--help | --version\n"	pointer
"options: -t<milliseconds>|--timeout <milliseconds>\n"	pointer
"         -w|--wait        (always wait for queries to time out or fail)\n"	pointer
"         -b|--brackets    (require [...] around IP addresses)\n"	pointer
"         -a|--address     (always include [address] in output)\n"	pointer
"         -u|--unchecked   (do not forward map for checking)\n"	pointer
"         --config <text>  (use this instead of resolv.conf)\n"	pointer
"         --debug          (turn on adns resolver debugging)\n"	pointer
"Timeout is the maximum amount to delay any particular bit of output for.\n"	pointer
"Lookups will go on in the background.  Default timeout = 1000 (ms).\n"	pointer
)	O
==	O
EOF	O
)	O
outputerr	function
(	O
)	O
;	O
if	O
(	O
fflush	function
(	O
stdout	pointer
)	O
)	O
sysfail	function
(	O
"flush stdout"	pointer
)	O
;	O
}	O
static	O
void	O
usageerr	function
(	O
const	O
char	O
*	O
why	pointer
)	O
NONRETURNING	O
;	O
static	O
void	O
usageerr	function
(	O
const	O
char	O
*	O
why	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"adnsresfilter: bad usage: %s\n"	pointer
,	O
why	pointer
)	O
;	O
usage	function
(	O
)	O
;	O
quitnow	function
(	O
1	int
)	O
;	O
}	O
static	O
void	O
adnsfail	function
(	O
const	O
char	O
*	O
what	pointer
,	O
int	O
e	int
)	O
NONRETURNING	O
;	O
static	O
void	O
adnsfail	function
(	O
const	O
char	O
*	O
what	pointer
,	O
int	O
e	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"adnsresfilter: adns call failed: %s: %s\n"	pointer
,	O
what	pointer
,	O
strerror	function
(	O
e	int
)	O
)	O
;	O
quitnow	function
(	O
2	int
)	O
;	O
}	O
static	O
void	O
settimeout	function
(	O
const	O
char	O
*	O
arg	pointer
)	O
{	O
char	O
*	O
ep	pointer
;	O
timeout	long
=	O
strtoul	function
(	O
arg	pointer
,	O
&	O
ep	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
ep	pointer
)	O
usageerr	function
(	O
"invalid timeout"	pointer
)	O
;	O
}	O
static	O
void	O
parseargs	function
(	O
const	O
char	O
*	O
const	O
*	O
argv	pointer
)	O
{	O
const	O
char	O
*	O
arg	pointer
;	O
int	O
c	int
;	O
while	O
(	O
(	O
arg	pointer
=	O
*	O
++	O
argv	pointer
)	O
)	O
{	O
if	O
(	O
arg	pointer
[	O
0	int
]	O
!=	O
'-'	O
)	O
usageerr	function
(	O
"no non-option arguments are allowed"	pointer
)	O
;	O
if	O
(	O
arg	pointer
[	O
1	int
]	O
==	O
'-'	O
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
arg	pointer
,	O
"--timeout"	pointer
)	O
)	O
{	O
if	O
(	O
!	O
(	O
arg	pointer
=	O
*	O
++	O
argv	pointer
)	O
)	O
usageerr	function
(	O
"--timeout needs a value"	pointer
)	O
;	O
settimeout	function
(	O
arg	pointer
)	O
;	O
forever	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
arg	pointer
,	O
"--wait"	pointer
)	O
)	O
{	O
forever	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
arg	pointer
,	O
"--brackets"	pointer
)	O
)	O
{	O
bracket	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
arg	pointer
,	O
"--address"	pointer
)	O
)	O
{	O
address	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
arg	pointer
,	O
"--unchecked"	pointer
)	O
)	O
{	O
rrt	enum
=	O
adns_r_ptr_raw	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
arg	pointer
,	O
"--config"	pointer
)	O
)	O
{	O
if	O
(	O
!	O
(	O
arg	pointer
=	O
*	O
++	O
argv	pointer
)	O
)	O
usageerr	function
(	O
"--config needs a value"	pointer
)	O
;	O
config_text	pointer
=	O
arg	pointer
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
arg	pointer
,	O
"--debug"	pointer
)	O
)	O
{	O
initflags	enum
|=	O
adns_if_debug	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
arg	pointer
,	O
"--help"	pointer
)	O
)	O
{	O
usage	function
(	O
)	O
;	O
quitnow	function
(	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
arg	pointer
,	O
"--version"	pointer
)	O
)	O
{	O
VERSION_PRINT_QUIT	O
(	O
"adnsresfilter"	pointer
)	O
;	O
quitnow	function
(	O
0	int
)	O
;	O
}	O
else	O
{	O
usageerr	function
(	O
"unknown long option"	pointer
)	O
;	O
}	O
}	O
else	O
{	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
arg	pointer
)	O
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
't'	O
:	O
if	O
(	O
*	O
++	O
arg	pointer
)	O
settimeout	function
(	O
arg	pointer
)	O
;	O
else	O
if	O
(	O
(	O
arg	pointer
=	O
*	O
++	O
argv	pointer
)	O
)	O
settimeout	function
(	O
arg	pointer
)	O
;	O
else	O
usageerr	function
(	O
"-t needs a value"	pointer
)	O
;	O
forever	int
=	O
0	int
;	O
arg	pointer
=	O
"\0"	pointer
;	O
break	O
;	O
case	O
'w'	O
:	O
forever	int
=	O
1	int
;	O
break	O
;	O
case	O
'b'	O
:	O
bracket	int
=	O
1	int
;	O
break	O
;	O
case	O
'a'	O
:	O
address	int
=	O
1	int
;	O
break	O
;	O
case	O
'u'	O
:	O
rrt	enum
=	O
adns_r_ptr_raw	int
;	O
break	O
;	O
case	O
'h'	O
:	O
usage	function
(	O
)	O
;	O
quitnow	function
(	O
0	int
)	O
;	O
default	O
:	O
usageerr	function
(	O
"unknown short option"	pointer
)	O
;	O
}	O
}	O
}	O
}	O
}	O
static	O
void	O
queueoutchar	function
(	O
int	O
c	int
)	O
{	O
struct	O
outqueuenode	struct
*	O
entry	struct
;	O
entry	struct
=	O
outqueue	struct
.	O
tail	pointer
;	O
if	O
(	O
!	O
entry	struct
||	O
entry	struct
->	O
addr	union
||	O
entry	struct
->	O
textlen	int
>=	O
peroutqueuenode	int
)	O
{	O
peroutqueuenode	int
=	O
!	O
peroutqueuenode	int
||	O
!	O
entry	struct
||	O
entry	struct
->	O
addr	union
?	O
128	int
:	O
peroutqueuenode	int
>=	O
1024	int
?	O
4096	int
:	O
peroutqueuenode	int
<<	O
2	int
;	O
entry	struct
=	O
xmalloc	function
(	O
sizeof	O
(	O
*	O
entry	struct
)	O
)	O
;	O
entry	struct
->	O
buffer	pointer
=	O
xmalloc	function
(	O
peroutqueuenode	int
)	O
;	O
entry	struct
->	O
textp	pointer
=	O
entry	struct
->	O
buffer	pointer
;	O
entry	struct
->	O
textlen	int
=	O
0	int
;	O
entry	struct
->	O
addr	union
=	O
0	int
;	O
LIST_LINK_TAIL	O
(	O
outqueue	struct
,	O
entry	struct
)	O
;	O
outqueuelen	int
++	O
;	O
}	O
entry	struct
->	O
textp	pointer
[	O
entry	struct
->	O
textlen	int
++	O
]	O
=	O
c	int
;	O
}	O
static	O
void	O
queueoutstr	function
(	O
const	O
char	O
*	O
str	pointer
,	O
int	O
len	int
)	O
{	O
while	O
(	O
len	int
--	O
>	O
0	int
)	O
queueoutchar	function
(	O
*	O
str	pointer
++	O
)	O
;	O
}	O
static	O
void	O
writestdout	function
(	O
struct	O
outqueuenode	struct
*	O
entry	struct
)	O
{	O
int	O
r	int
;	O
while	O
(	O
entry	struct
->	O
textlen	int
)	O
{	O
r	int
=	O
write	function
(	O
1	int
,	O
entry	struct
->	O
textp	pointer
,	O
entry	struct
->	O
textlen	int
)	O
;	O
if	O
(	O
r	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
continue	O
;	O
if	O
(	O
errno	O
==	O
EAGAIN	int
)	O
{	O
outblocked	int
=	O
1	int
;	O
break	O
;	O
}	O
sysfail	function
(	O
"write stdout"	pointer
)	O
;	O
}	O
assert	O
(	O
r	int
<=	O
entry	struct
->	O
textlen	int
)	O
;	O
entry	struct
->	O
textp	pointer
+=	O
r	int
;	O
entry	struct
->	O
textlen	int
-=	O
r	int
;	O
}	O
if	O
(	O
!	O
entry	struct
->	O
textlen	int
)	O
{	O
LIST_UNLINK	O
(	O
outqueue	struct
,	O
entry	struct
)	O
;	O
free	function
(	O
entry	struct
->	O
buffer	pointer
)	O
;	O
free	function
(	O
entry	struct
)	O
;	O
outqueuelen	int
--	O
;	O
}	O
}	O
static	O
void	O
replacetextwithname	function
(	O
struct	O
outqueuenode	struct
*	O
entry	struct
)	O
{	O
char	O
*	O
name	pointer
,	O
*	O
newbuf	pointer
;	O
int	O
namelen	int
,	O
newlen	int
;	O
name	pointer
=	O
entry	struct
->	O
addr	union
->	O
ans	pointer
->	O
rrs	union
.	O
str	pointer
[	O
0	int
]	O
;	O
namelen	int
=	O
strlen	function
(	O
name	pointer
)	O
;	O
if	O
(	O
!	O
address	int
)	O
{	O
free	function
(	O
entry	struct
->	O
buffer	pointer
)	O
;	O
entry	struct
->	O
buffer	pointer
=	O
0	int
;	O
entry	struct
->	O
textp	pointer
=	O
name	pointer
;	O
entry	struct
->	O
textlen	int
=	O
namelen	int
;	O
}	O
else	O
{	O
newlen	int
=	O
entry	struct
->	O
textlen	int
+	O
namelen	int
+	O
(	O
bracket	int
?	O
0	int
:	O
2	int
)	O
;	O
newbuf	pointer
=	O
xmalloc	function
(	O
newlen	int
+	O
1	int
)	O
;	O
sprintf	function
(	O
newbuf	pointer
,	O
bracket	int
?	O
"%s%.*s"	pointer
:	O
"%s[%.*s]"	pointer
,	O
name	pointer
,	O
entry	struct
->	O
textlen	int
,	O
entry	struct
->	O
textp	pointer
)	O
;	O
free	function
(	O
entry	struct
->	O
buffer	pointer
)	O
;	O
entry	struct
->	O
buffer	pointer
=	O
entry	struct
->	O
textp	pointer
=	O
newbuf	pointer
;	O
entry	struct
->	O
textlen	int
=	O
newlen	int
;	O
}	O
}	O
static	O
void	O
checkadnsqueries	function
(	O
void	O
)	O
{	O
adns_query	pointer
qu	pointer
;	O
adns_answer	struct
*	O
ans	pointer
;	O
void	O
*	O
context	pointer
;	O
struct	O
treething	struct
*	O
foundthing	pointer
;	O
int	O
r	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
qu	pointer
=	O
0	int
;	O
context	pointer
=	O
0	int
;	O
ans	pointer
=	O
0	int
;	O
r	int
=	O
adns_check	function
(	O
ads	pointer
,	O
&	O
qu	pointer
,	O
&	O
ans	pointer
,	O
&	O
context	pointer
)	O
;	O
if	O
(	O
r	int
==	O
ESRCH	int
||	O
r	int
==	O
EAGAIN	int
)	O
break	O
;	O
assert	O
(	O
!	O
r	int
)	O
;	O
foundthing	pointer
=	O
context	pointer
;	O
foundthing	pointer
->	O
ans	pointer
=	O
ans	pointer
;	O
foundthing	pointer
->	O
qu	pointer
=	O
0	int
;	O
}	O
}	O
static	O
void	O
restartbuf	function
(	O
void	O
)	O
{	O
if	O
(	O
inbuf	int
>	O
0	int
)	O
queueoutstr	function
(	O
addrtextbuf	array
,	O
inbuf	int
)	O
;	O
inbuf	int
=	O
0	int
;	O
}	O
static	O
int	O
comparer	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
return	O
memcmp	function
(	O
a	pointer
,	O
b	pointer
,	O
4	int
)	O
;	O
}	O
static	O
void	O
procaddr	function
(	O
void	O
)	O
{	O
struct	O
treething	struct
*	O
foundthing	pointer
;	O
void	O
*	O
*	O
searchfound	pointer
;	O
struct	O
outqueuenode	struct
*	O
entry	struct
;	O
int	O
r	int
;	O
if	O
(	O
!	O
newthing	pointer
)	O
{	O
newthing	pointer
=	O
xmalloc	function
(	O
sizeof	O
(	O
struct	O
treething	struct
)	O
)	O
;	O
newthing	pointer
->	O
qu	pointer
=	O
0	int
;	O
newthing	pointer
->	O
ans	pointer
=	O
0	int
;	O
}	O
memcpy	function
(	O
newthing	pointer
->	O
bytes	pointer
,	O
bytes	pointer
,	O
4	int
)	O
;	O
searchfound	pointer
=	O
tsearch	function
(	O
newthing	pointer
,	O
&	O
treeroot	pointer
,	O
comparer	function
)	O
;	O
if	O
(	O
!	O
searchfound	pointer
)	O
sysfail	function
(	O
"tsearch"	pointer
)	O
;	O
foundthing	pointer
=	O
*	O
searchfound	pointer
;	O
if	O
(	O
foundthing	pointer
==	O
newthing	pointer
)	O
{	O
newthing	pointer
=	O
0	int
;	O
memcpy	function
(	O
&	O
sa	struct
.	O
sin_addr	struct
,	O
bytes	pointer
,	O
4	int
)	O
;	O
r	int
=	O
adns_submit_reverse	function
(	O
ads	pointer
,	O
(	O
const	O
struct	O
sockaddr	struct
*	O
)	O
&	O
sa	struct
,	O
rrt	enum
,	O
0	int
,	O
foundthing	pointer
,	O
&	O
foundthing	pointer
->	O
qu	pointer
)	O
;	O
if	O
(	O
r	int
)	O
adnsfail	function
(	O
"submit"	pointer
,	O
r	int
)	O
;	O
}	O
entry	struct
=	O
xmalloc	function
(	O
sizeof	O
(	O
*	O
entry	struct
)	O
)	O
;	O
entry	struct
->	O
buffer	pointer
=	O
xmalloc	function
(	O
inbuf	int
)	O
;	O
entry	struct
->	O
textp	pointer
=	O
entry	struct
->	O
buffer	pointer
;	O
memcpy	function
(	O
entry	struct
->	O
textp	pointer
,	O
addrtextbuf	array
,	O
inbuf	int
)	O
;	O
entry	struct
->	O
textlen	int
=	O
inbuf	int
;	O
entry	struct
->	O
addr	union
=	O
foundthing	pointer
;	O
entry	struct
->	O
printbefore	struct
=	O
printbefore	struct
;	O
LIST_LINK_TAIL	O
(	O
outqueue	struct
,	O
entry	struct
)	O
;	O
outqueuelen	int
++	O
;	O
inbuf	int
=	O
0	int
;	O
cbyte	int
=	O
-	O
1	int
;	O
}	O
static	O
void	O
startaddr	function
(	O
void	O
)	O
{	O
bytes	pointer
[	O
cbyte	int
=	O
0	int
]	O
=	O
0	int
;	O
inbyte	int
=	O
0	int
;	O
}	O
static	O
void	O
readstdin	function
(	O
void	O
)	O
{	O
char	O
readbuf	array
[	O
512	int
]	O
,	O
*	O
p	pointer
;	O
int	O
r	int
,	O
c	int
,	O
nbyte	int
;	O
while	O
(	O
(	O
r	int
=	O
read	function
(	O
0	int
,	O
readbuf	array
,	O
sizeof	O
(	O
readbuf	array
)	O
)	O
)	O
<=	O
0	int
)	O
{	O
if	O
(	O
r	int
==	O
0	int
)	O
{	O
inputeof	int
=	O
1	int
;	O
return	O
;	O
}	O
if	O
(	O
r	int
==	O
EAGAIN	int
)	O
return	O
;	O
if	O
(	O
r	int
!=	O
EINTR	int
)	O
sysfail	function
(	O
"read stdin"	pointer
)	O
;	O
}	O
for	O
(	O
p	pointer
=	O
readbuf	array
;	O
r	int
>	O
0	int
;	O
r	int
--	O
,	O
p	pointer
++	O
)	O
{	O
c	int
=	O
*	O
p	pointer
;	O
if	O
(	O
cbyte	int
==	O
-	O
1	int
&&	O
bracket	int
&&	O
c	int
==	O
'['	O
)	O
{	O
addrtextbuf	array
[	O
inbuf	int
++	O
]	O
=	O
c	int
;	O
startaddr	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
cbyte	int
==	O
-	O
1	int
&&	O
!	O
bracket	int
&&	O
!	O
isalnum	function
(	O
c	int
)	O
)	O
{	O
queueoutchar	function
(	O
c	int
)	O
;	O
startaddr	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
cbyte	int
>=	O
0	int
&&	O
inbyte	int
<	O
3	int
&&	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
&&	O
(	O
nbyte	int
=	O
bytes	pointer
[	O
cbyte	int
]	O
*	O
10	int
+	O
(	O
c	int
-	O
'0'	O
)	O
)	O
<=	O
255	int
)	O
{	O
bytes	pointer
[	O
cbyte	int
]	O
=	O
nbyte	int
;	O
addrtextbuf	array
[	O
inbuf	int
++	O
]	O
=	O
c	int
;	O
inbyte	int
++	O
;	O
}	O
else	O
if	O
(	O
cbyte	int
>=	O
0	int
&&	O
cbyte	int
<	O
3	int
&&	O
inbyte	int
>	O
0	int
&&	O
c	int
==	O
'.'	O
)	O
{	O
bytes	pointer
[	O
++	O
cbyte	int
]	O
=	O
0	int
;	O
addrtextbuf	array
[	O
inbuf	int
++	O
]	O
=	O
c	int
;	O
inbyte	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
cbyte	int
==	O
3	int
&&	O
inbyte	int
>	O
0	int
&&	O
bracket	int
&&	O
c	int
==	O
']'	O
)	O
{	O
addrtextbuf	array
[	O
inbuf	int
++	O
]	O
=	O
c	int
;	O
procaddr	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
cbyte	int
==	O
3	int
&&	O
inbyte	int
>	O
0	int
&&	O
!	O
bracket	int
&&	O
!	O
isalnum	function
(	O
c	int
)	O
)	O
{	O
procaddr	function
(	O
)	O
;	O
queueoutchar	function
(	O
c	int
)	O
;	O
startaddr	function
(	O
)	O
;	O
}	O
else	O
{	O
restartbuf	function
(	O
)	O
;	O
queueoutchar	function
(	O
c	int
)	O
;	O
cbyte	int
=	O
-	O
1	int
;	O
if	O
(	O
!	O
bracket	int
&&	O
!	O
isalnum	function
(	O
c	int
)	O
)	O
startaddr	function
(	O
)	O
;	O
}	O
}	O
}	O
static	O
void	O
startup	function
(	O
void	O
)	O
{	O
int	O
r	int
;	O
if	O
(	O
nonblock	function
(	O
0	int
,	O
1	int
)	O
)	O
sysfail	function
(	O
"set stdin to nonblocking mode"	pointer
)	O
;	O
if	O
(	O
nonblock	function
(	O
1	int
,	O
1	int
)	O
)	O
sysfail	function
(	O
"set stdout to nonblocking mode"	pointer
)	O
;	O
memset	function
(	O
&	O
sa	struct
,	O
0	int
,	O
sizeof	O
(	O
sa	struct
)	O
)	O
;	O
sa	struct
.	O
sin_family	short
=	O
AF_INET	O
;	O
if	O
(	O
config_text	pointer
)	O
{	O
r	int
=	O
adns_init_strcfg	function
(	O
&	O
ads	pointer
,	O
initflags	enum
,	O
stderr	pointer
,	O
config_text	pointer
)	O
;	O
}	O
else	O
{	O
r	int
=	O
adns_init	function
(	O
&	O
ads	pointer
,	O
initflags	enum
,	O
0	int
)	O
;	O
}	O
if	O
(	O
r	int
)	O
adnsfail	function
(	O
"init"	pointer
,	O
r	int
)	O
;	O
cbyte	int
=	O
-	O
1	int
;	O
inbyte	int
=	O
-	O
1	int
;	O
inbuf	int
=	O
0	int
;	O
if	O
(	O
!	O
bracket	int
)	O
startaddr	function
(	O
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
const	O
char	O
*	O
const	O
*	O
argv	pointer
)	O
{	O
int	O
r	int
,	O
maxfd	pointer
;	O
fd_set	struct
readfds	pointer
,	O
writefds	pointer
,	O
exceptfds	pointer
;	O
struct	O
outqueuenode	struct
*	O
entry	struct
;	O
struct	O
timeval	struct
*	O
tv	pointer
,	O
tvbuf	struct
,	O
now	pointer
;	O
parseargs	function
(	O
argv	pointer
)	O
;	O
startup	function
(	O
)	O
;	O
while	O
(	O
!	O
inputeof	int
||	O
outqueue	struct
.	O
head	pointer
)	O
{	O
maxfd	pointer
=	O
2	int
;	O
tv	pointer
=	O
0	int
;	O
FD_ZERO	O
(	O
&	O
readfds	pointer
)	O
;	O
FD_ZERO	O
(	O
&	O
writefds	pointer
)	O
;	O
FD_ZERO	O
(	O
&	O
exceptfds	pointer
)	O
;	O
if	O
(	O
(	O
entry	struct
=	O
outqueue	struct
.	O
head	pointer
)	O
&&	O
!	O
outblocked	int
)	O
{	O
if	O
(	O
!	O
entry	struct
->	O
addr	union
)	O
{	O
writestdout	function
(	O
entry	struct
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
entry	struct
->	O
addr	union
->	O
ans	pointer
)	O
{	O
if	O
(	O
entry	struct
->	O
addr	union
->	O
ans	pointer
->	O
nrrs	int
)	O
replacetextwithname	function
(	O
entry	struct
)	O
;	O
entry	struct
->	O
addr	union
=	O
0	int
;	O
continue	O
;	O
}	O
r	int
=	O
gettimeofday	function
(	O
&	O
now	pointer
,	O
0	int
)	O
;	O
if	O
(	O
r	int
)	O
sysfail	function
(	O
"gettimeofday"	pointer
)	O
;	O
if	O
(	O
forever	int
)	O
{	O
tv	pointer
=	O
0	int
;	O
}	O
else	O
if	O
(	O
!	O
timercmp	O
(	O
&	O
now	pointer
,	O
&	O
entry	struct
->	O
printbefore	struct
,	O
<	O
)	O
)	O
{	O
entry	struct
->	O
addr	union
=	O
0	int
;	O
continue	O
;	O
}	O
else	O
{	O
tvbuf	struct
.	O
tv_sec	long
=	O
entry	struct
->	O
printbefore	struct
.	O
tv_sec	long
-	O
now	pointer
.	O
tv_sec	long
-	O
1	int
;	O
tvbuf	struct
.	O
tv_usec	long
=	O
entry	struct
->	O
printbefore	struct
.	O
tv_usec	long
-	O
now	pointer
.	O
tv_usec	long
+	O
1000000	int
;	O
tvbuf	struct
.	O
tv_sec	long
+=	O
tvbuf	struct
.	O
tv_usec	long
/	O
1000000	int
;	O
tvbuf	struct
.	O
tv_usec	long
%=	O
1000000	int
;	O
tv	pointer
=	O
&	O
tvbuf	struct
;	O
}	O
adns_beforeselect	function
(	O
ads	pointer
,	O
&	O
maxfd	pointer
,	O
&	O
readfds	pointer
,	O
&	O
writefds	pointer
,	O
&	O
exceptfds	pointer
,	O
&	O
tv	pointer
,	O
&	O
tvbuf	struct
,	O
&	O
now	pointer
)	O
;	O
}	O
if	O
(	O
outblocked	int
)	O
FD_SET	O
(	O
1	int
,	O
&	O
writefds	pointer
)	O
;	O
if	O
(	O
!	O
inputeof	int
&&	O
outqueuelen	int
<	O
1024	int
)	O
FD_SET	O
(	O
0	int
,	O
&	O
readfds	pointer
)	O
;	O
r	int
=	O
select	function
(	O
maxfd	pointer
,	O
&	O
readfds	pointer
,	O
&	O
writefds	pointer
,	O
&	O
exceptfds	pointer
,	O
tv	pointer
)	O
;	O
if	O
(	O
r	int
<	O
0	int
)	O
{	O
if	O
(	O
r	int
==	O
EINTR	int
)	O
continue	O
;	O
else	O
sysfail	function
(	O
"select"	pointer
)	O
;	O
}	O
r	int
=	O
gettimeofday	function
(	O
&	O
now	pointer
,	O
0	int
)	O
;	O
if	O
(	O
r	int
)	O
sysfail	function
(	O
"gettimeofday"	pointer
)	O
;	O
adns_afterselect	function
(	O
ads	pointer
,	O
maxfd	pointer
,	O
&	O
readfds	pointer
,	O
&	O
writefds	pointer
,	O
&	O
exceptfds	pointer
,	O
&	O
now	pointer
)	O
;	O
checkadnsqueries	function
(	O
)	O
;	O
if	O
(	O
FD_ISSET	O
(	O
0	int
,	O
&	O
readfds	pointer
)	O
)	O
{	O
if	O
(	O
!	O
forever	int
)	O
{	O
printbefore	struct
=	O
now	pointer
;	O
timevaladd	function
(	O
&	O
printbefore	struct
,	O
timeout	long
)	O
;	O
}	O
readstdin	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
FD_ISSET	O
(	O
1	int
,	O
&	O
writefds	pointer
)	O
)	O
{	O
outblocked	int
=	O
0	int
;	O
}	O
}	O
if	O
(	O
nonblock	function
(	O
0	int
,	O
0	int
)	O
)	O
sysfail	function
(	O
"un-nonblock stdin"	pointer
)	O
;	O
if	O
(	O
nonblock	function
(	O
1	int
,	O
0	int
)	O
)	O
sysfail	function
(	O
"un-nonblock stdout"	pointer
)	O
;	O
adns_finish	function
(	O
ads	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
