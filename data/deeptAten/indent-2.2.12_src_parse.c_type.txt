RCSTAG_CC	O
(	O
"$Id$"	pointer
)	O
;	O
parser_state_ty	struct
*	O
parser_state_tos	pointer
=	O
NULL	O
;	O
extern	O
void	O
init_parser	function
(	O
void	O
)	O
{	O
parser_state_tos	pointer
=	O
xmalloc	function
(	O
sizeof	O
(	O
parser_state_ty	struct
)	O
)	O
;	O
parser_state_tos	pointer
->	O
p_stack_size	int
=	O
INITIAL_STACK_SIZE	int
;	O
parser_state_tos	pointer
->	O
p_stack	pointer
=	O
xmalloc	function
(	O
INITIAL_STACK_SIZE	int
*	O
sizeof	O
(	O
codes_ty	enum
)	O
)	O
;	O
parser_state_tos	pointer
->	O
il	pointer
=	O
xmalloc	function
(	O
INITIAL_STACK_SIZE	int
*	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
parser_state_tos	pointer
->	O
cstk	pointer
=	O
xmalloc	function
(	O
INITIAL_STACK_SIZE	int
*	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
parser_state_tos	pointer
->	O
paren_indents_size	int
=	O
8	int
;	O
parser_state_tos	pointer
->	O
paren_indents	pointer
=	O
xmalloc	function
(	O
parser_state_tos	pointer
->	O
paren_indents_size	int
*	O
sizeof	O
(	O
short	O
)	O
)	O
;	O
combuf	pointer
=	O
xmalloc	function
(	O
INITIAL_BUFFER_SIZE	int
)	O
;	O
labbuf	pointer
=	O
xmalloc	function
(	O
INITIAL_BUFFER_SIZE	int
)	O
;	O
codebuf	pointer
=	O
xmalloc	function
(	O
INITIAL_BUFFER_SIZE	int
)	O
;	O
save_com	struct
.	O
size	long
=	O
INITIAL_BUFFER_SIZE	int
;	O
save_com	struct
.	O
end	pointer
=	O
save_com	struct
.	O
ptr	pointer
=	O
xmalloc	function
(	O
save_com	struct
.	O
size	long
)	O
;	O
save_com	struct
.	O
len	int
=	O
save_com	struct
.	O
column	int
=	O
0	int
;	O
di_stack_alloc	int
=	O
2	int
;	O
di_stack	pointer
=	O
xmalloc	function
(	O
di_stack_alloc	int
*	O
sizeof	O
(	O
*	O
di_stack	pointer
)	O
)	O
;	O
}	O
extern	O
void	O
uninit_parser	function
(	O
void	O
)	O
{	O
if	O
(	O
!	O
parser_state_tos	pointer
)	O
{	O
return	O
;	O
}	O
xfree	function
(	O
parser_state_tos	pointer
->	O
p_stack	pointer
)	O
;	O
xfree	function
(	O
parser_state_tos	pointer
->	O
il	pointer
)	O
;	O
xfree	function
(	O
parser_state_tos	pointer
->	O
cstk	pointer
)	O
;	O
xfree	function
(	O
parser_state_tos	pointer
->	O
paren_indents	pointer
)	O
;	O
xfree	function
(	O
parser_state_tos	pointer
)	O
;	O
xfree	function
(	O
save_com	struct
.	O
ptr	pointer
)	O
;	O
xfree	function
(	O
combuf	pointer
)	O
;	O
xfree	function
(	O
labbuf	pointer
)	O
;	O
xfree	function
(	O
codebuf	pointer
)	O
;	O
xfree	function
(	O
di_stack	pointer
)	O
;	O
parser_state_tos	pointer
=	O
NULL	O
;	O
}	O
extern	O
void	O
reset_parser	function
(	O
void	O
)	O
{	O
parser_state_tos	pointer
->	O
next	pointer
=	O
0	int
;	O
parser_state_tos	pointer
->	O
tos	int
=	O
0	int
;	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
0	int
]	O
=	O
stmt	int
;	O
parser_state_tos	pointer
->	O
last_nl	int
=	O
true	int
;	O
parser_state_tos	pointer
->	O
last_token	enum
=	O
start_token	int
;	O
parser_state_tos	pointer
->	O
last_saw_nl	int
=	O
false	int
;	O
parser_state_tos	pointer
->	O
broken_at_non_nl	int
=	O
false	int
;	O
parser_state_tos	pointer
->	O
box_com	int
=	O
false	int
;	O
parser_state_tos	pointer
->	O
cast_mask	int
=	O
0	int
;	O
parser_state_tos	pointer
->	O
noncast_mask	int
=	O
0	int
;	O
parser_state_tos	pointer
->	O
sizeof_mask	int
=	O
0	int
;	O
parser_state_tos	pointer
->	O
block_init	int
=	O
0	int
;	O
parser_state_tos	pointer
->	O
block_init_level	int
=	O
0	int
;	O
parser_state_tos	pointer
->	O
col_1	int
=	O
false	int
;	O
parser_state_tos	pointer
->	O
com_col	int
=	O
0	int
;	O
parser_state_tos	pointer
->	O
dec_nest	int
=	O
0	int
;	O
parser_state_tos	pointer
->	O
i_l_follow	int
=	O
0	int
;	O
parser_state_tos	pointer
->	O
ind_level	int
=	O
0	int
;	O
parser_state_tos	pointer
->	O
last_u_d	int
=	O
false	int
;	O
parser_state_tos	pointer
->	O
p_l_follow	int
=	O
0	int
;	O
parser_state_tos	pointer
->	O
paren_level	int
=	O
0	int
;	O
parser_state_tos	pointer
->	O
paren_depth	int
=	O
0	int
;	O
parser_state_tos	pointer
->	O
search_brace	int
=	O
false	int
;	O
parser_state_tos	pointer
->	O
use_ff	int
=	O
false	int
;	O
parser_state_tos	pointer
->	O
its_a_keyword	int
=	O
false	int
;	O
parser_state_tos	pointer
->	O
sizeof_keyword	int
=	O
false	int
;	O
parser_state_tos	pointer
->	O
in_parameter_declaration	int
=	O
false	int
;	O
parser_state_tos	pointer
->	O
just_saw_decl	int
=	O
0	int
;	O
parser_state_tos	pointer
->	O
in_decl	char
=	O
false	int
;	O
parser_state_tos	pointer
->	O
decl_on_line	int
=	O
false	int
;	O
parser_state_tos	pointer
->	O
in_or_st	int
=	O
0	int
;	O
parser_state_tos	pointer
->	O
want_blank	int
=	O
false	int
;	O
parser_state_tos	pointer
->	O
in_stmt	int
=	O
false	int
;	O
parser_state_tos	pointer
->	O
ind_stmt	int
=	O
false	int
;	O
parser_state_tos	pointer
->	O
procname	pointer
=	O
"\0"	pointer
;	O
parser_state_tos	pointer
->	O
procname_end	pointer
=	O
"\0"	pointer
;	O
parser_state_tos	pointer
->	O
classname	pointer
=	O
"\0"	pointer
;	O
parser_state_tos	pointer
->	O
classname_end	pointer
=	O
"\0"	pointer
;	O
parser_state_tos	pointer
->	O
pcase	int
=	O
false	int
;	O
parser_state_tos	pointer
->	O
dec_nest	int
=	O
0	int
;	O
parser_state_tos	pointer
->	O
can_break	enum
=	O
bb_none	int
;	O
parser_state_tos	pointer
->	O
saw_double_colon	int
=	O
false	int
;	O
parser_state_tos	pointer
->	O
is_func_ptr_decl	int
=	O
false	int
;	O
parser_state_tos	pointer
->	O
il	pointer
[	O
0	int
]	O
=	O
0	int
;	O
parser_state_tos	pointer
->	O
cstk	pointer
[	O
0	int
]	O
=	O
0	int
;	O
save_com	struct
.	O
len	int
=	O
save_com	struct
.	O
column	int
=	O
0	int
;	O
di_stack	pointer
[	O
parser_state_tos	pointer
->	O
dec_nest	int
]	O
=	O
0	int
;	O
l_com	pointer
=	O
combuf	pointer
+	O
INITIAL_BUFFER_SIZE	int
-	O
5	int
;	O
l_lab	pointer
=	O
labbuf	pointer
+	O
INITIAL_BUFFER_SIZE	int
-	O
5	int
;	O
l_code	pointer
=	O
codebuf	pointer
+	O
INITIAL_BUFFER_SIZE	int
-	O
5	int
;	O
combuf	pointer
[	O
0	int
]	O
=	O
codebuf	pointer
[	O
0	int
]	O
=	O
labbuf	pointer
[	O
0	int
]	O
=	O
' '	O
;	O
combuf	pointer
[	O
1	int
]	O
=	O
codebuf	pointer
[	O
1	int
]	O
=	O
labbuf	pointer
[	O
1	int
]	O
=	O
'\0'	O
;	O
else_or_endif	int
=	O
false	int
;	O
s_lab	pointer
=	O
e_lab	pointer
=	O
labbuf	pointer
+	O
1	int
;	O
s_code	pointer
=	O
e_code	pointer
=	O
codebuf	pointer
+	O
1	int
;	O
s_com	pointer
=	O
e_com	pointer
=	O
combuf	pointer
+	O
1	int
;	O
line_no	int
=	O
1	int
;	O
had_eof	char
=	O
false	int
;	O
break_comma	int
=	O
false	int
;	O
bp_save	pointer
=	O
0	int
;	O
be_save	pointer
=	O
0	int
;	O
if	O
(	O
settings	struct
.	O
tabsize	int
<=	O
0	int
)	O
{	O
settings	struct
.	O
tabsize	int
=	O
1	int
;	O
}	O
prefix_blankline_requested	int
=	O
0	int
;	O
}	O
extern	O
int	O
inc_pstack	function
(	O
void	O
)	O
{	O
if	O
(	O
++	O
parser_state_tos	pointer
->	O
tos	int
>=	O
parser_state_tos	pointer
->	O
p_stack_size	int
)	O
{	O
parser_state_tos	pointer
->	O
p_stack_size	int
*=	O
2	int
;	O
parser_state_tos	pointer
->	O
p_stack	pointer
=	O
xrealloc	function
(	O
parser_state_tos	pointer
->	O
p_stack	pointer
,	O
parser_state_tos	pointer
->	O
p_stack_size	int
*	O
sizeof	O
(	O
codes_ty	enum
)	O
)	O
;	O
parser_state_tos	pointer
->	O
il	pointer
=	O
xrealloc	function
(	O
parser_state_tos	pointer
->	O
il	pointer
,	O
parser_state_tos	pointer
->	O
p_stack_size	int
*	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
parser_state_tos	pointer
->	O
cstk	pointer
=	O
xrealloc	function
(	O
parser_state_tos	pointer
->	O
cstk	pointer
,	O
parser_state_tos	pointer
->	O
p_stack_size	int
*	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
}	O
parser_state_tos	pointer
->	O
cstk	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
=	O
parser_state_tos	pointer
->	O
cstk	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
-	O
1	int
]	O
;	O
return	O
parser_state_tos	pointer
->	O
tos	int
;	O
}	O
extern	O
exit_values_ty	enum
parse	function
(	O
codes_ty	enum
tk	enum
)	O
{	O
int	O
i	int
;	O
while	O
(	O
(	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
==	O
ifhead	int
)	O
&&	O
(	O
tk	enum
!=	O
elselit	int
)	O
)	O
{	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
=	O
stmt	int
;	O
reduce	function
(	O
)	O
;	O
}	O
switch	O
(	O
tk	enum
)	O
{	O
case	O
decl	int
:	O
parser_state_tos	pointer
->	O
search_brace	int
=	O
settings	struct
.	O
braces_on_struct_decl_line	int
;	O
if	O
(	O
(	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
!=	O
decl	int
)	O
&&	O
(	O
parser_state_tos	pointer
->	O
block_init	int
==	O
0	int
)	O
)	O
{	O
break_comma	int
=	O
true	int
;	O
inc_pstack	function
(	O
)	O
;	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
=	O
decl	int
;	O
parser_state_tos	pointer
->	O
il	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
=	O
parser_state_tos	pointer
->	O
i_l_follow	int
;	O
if	O
(	O
settings	struct
.	O
ljust_decl	int
)	O
{	O
parser_state_tos	pointer
->	O
ind_level	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
parser_state_tos	pointer
->	O
tos	int
-	O
1	int
;	O
i	int
>	O
0	int
;	O
--	O
i	int
)	O
{	O
if	O
(	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
i	int
]	O
==	O
decl	int
)	O
{	O
parser_state_tos	pointer
->	O
ind_level	int
+=	O
settings	struct
.	O
ind_size	int
;	O
}	O
}	O
parser_state_tos	pointer
->	O
i_l_follow	int
=	O
parser_state_tos	pointer
->	O
ind_level	int
;	O
}	O
}	O
break	O
;	O
case	O
ifstmt	int
:	O
if	O
(	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
==	O
elsehead	int
)	O
{	O
parser_state_tos	pointer
->	O
i_l_follow	int
=	O
parser_state_tos	pointer
->	O
il	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
;	O
}	O
case	O
dolit	int
:	O
case	O
forstmt	int
:	O
case	O
casestmt	int
:	O
inc_pstack	function
(	O
)	O
;	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
=	O
tk	enum
;	O
parser_state_tos	pointer
->	O
ind_level	int
=	O
parser_state_tos	pointer
->	O
i_l_follow	int
;	O
parser_state_tos	pointer
->	O
il	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
=	O
parser_state_tos	pointer
->	O
ind_level	int
;	O
if	O
(	O
tk	enum
!=	O
casestmt	int
)	O
{	O
parser_state_tos	pointer
->	O
i_l_follow	int
+=	O
settings	struct
.	O
ind_size	int
;	O
}	O
parser_state_tos	pointer
->	O
search_brace	int
=	O
settings	struct
.	O
btype_2	int
;	O
break	O
;	O
case	O
lbrace	int
:	O
break_comma	int
=	O
false	int
;	O
if	O
(	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
==	O
stmt	int
||	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
==	O
stmtl	int
)	O
{	O
parser_state_tos	pointer
->	O
i_l_follow	int
+=	O
settings	struct
.	O
ind_size	int
;	O
}	O
else	O
if	O
(	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
==	O
decl	int
)	O
{	O
parser_state_tos	pointer
->	O
i_l_follow	int
+=	O
settings	struct
.	O
ind_size	int
;	O
if	O
(	O
(	O
(	O
parser_state_tos	pointer
->	O
last_rw	enum
==	O
rw_struct_like	int
)	O
||	O
(	O
parser_state_tos	pointer
->	O
last_rw	enum
==	O
rw_enum	int
)	O
)	O
&&	O
(	O
(	O
parser_state_tos	pointer
->	O
block_init	int
!=	O
1	int
)	O
||	O
(	O
parser_state_tos	pointer
->	O
block_init_level	int
==	O
0	int
)	O
)	O
&&	O
(	O
parser_state_tos	pointer
->	O
last_token	enum
!=	O
rparen	int
)	O
&&	O
(	O
!	O
settings	struct
.	O
braces_on_struct_decl_line	int
)	O
)	O
{	O
parser_state_tos	pointer
->	O
ind_level	int
+=	O
settings	struct
.	O
struct_brace_indent	int
;	O
parser_state_tos	pointer
->	O
i_l_follow	int
+=	O
settings	struct
.	O
struct_brace_indent	int
;	O
}	O
}	O
else	O
if	O
(	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
==	O
casestmt	int
)	O
{	O
parser_state_tos	pointer
->	O
ind_level	int
+=	O
settings	struct
.	O
case_brace_indent	int
-	O
settings	struct
.	O
ind_size	int
;	O
parser_state_tos	pointer
->	O
i_l_follow	int
+=	O
settings	struct
.	O
case_brace_indent	int
;	O
}	O
else	O
{	O
if	O
(	O
s_code	pointer
==	O
e_code	pointer
)	O
{	O
parser_state_tos	pointer
->	O
ind_level	int
-=	O
settings	struct
.	O
ind_size	int
;	O
}	O
if	O
(	O
!	O
settings	struct
.	O
btype_2	int
)	O
{	O
parser_state_tos	pointer
->	O
ind_level	int
+=	O
settings	struct
.	O
brace_indent	int
;	O
parser_state_tos	pointer
->	O
i_l_follow	int
+=	O
settings	struct
.	O
brace_indent	int
;	O
}	O
if	O
(	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
==	O
swstmt	int
)	O
{	O
parser_state_tos	pointer
->	O
i_l_follow	int
+=	O
settings	struct
.	O
case_indent	int
;	O
}	O
}	O
inc_pstack	function
(	O
)	O
;	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
=	O
lbrace	int
;	O
parser_state_tos	pointer
->	O
il	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
=	O
parser_state_tos	pointer
->	O
ind_level	int
;	O
inc_pstack	function
(	O
)	O
;	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
=	O
stmt	int
;	O
parser_state_tos	pointer
->	O
il	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
=	O
parser_state_tos	pointer
->	O
i_l_follow	int
;	O
break	O
;	O
case	O
whilestmt	int
:	O
if	O
(	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
==	O
dohead	int
)	O
{	O
parser_state_tos	pointer
->	O
i_l_follow	int
=	O
parser_state_tos	pointer
->	O
il	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
;	O
parser_state_tos	pointer
->	O
ind_level	int
=	O
parser_state_tos	pointer
->	O
il	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
;	O
inc_pstack	function
(	O
)	O
;	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
=	O
whilestmt	int
;	O
parser_state_tos	pointer
->	O
ind_level	int
=	O
parser_state_tos	pointer
->	O
i_l_follow	int
;	O
parser_state_tos	pointer
->	O
il	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
=	O
parser_state_tos	pointer
->	O
i_l_follow	int
;	O
}	O
else	O
{	O
inc_pstack	function
(	O
)	O
;	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
=	O
whilestmt	int
;	O
parser_state_tos	pointer
->	O
il	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
=	O
parser_state_tos	pointer
->	O
i_l_follow	int
;	O
parser_state_tos	pointer
->	O
i_l_follow	int
+=	O
settings	struct
.	O
ind_size	int
;	O
parser_state_tos	pointer
->	O
search_brace	int
=	O
settings	struct
.	O
btype_2	int
;	O
}	O
break	O
;	O
case	O
elselit	int
:	O
if	O
(	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
!=	O
ifhead	int
)	O
{	O
ERROR	O
(	O
_	O
(	O
"Unmatched 'else'"	pointer
)	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
else	O
{	O
parser_state_tos	pointer
->	O
ind_level	int
=	O
parser_state_tos	pointer
->	O
il	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
;	O
parser_state_tos	pointer
->	O
i_l_follow	int
=	O
(	O
parser_state_tos	pointer
->	O
ind_level	int
+	O
settings	struct
.	O
ind_size	int
)	O
;	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
=	O
elsehead	int
;	O
parser_state_tos	pointer
->	O
search_brace	int
=	O
true	int
;	O
}	O
break	O
;	O
case	O
rbrace	int
:	O
if	O
(	O
(	O
parser_state_tos	pointer
->	O
tos	int
>	O
0	int
)	O
&&	O
(	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
-	O
1	int
]	O
==	O
lbrace	int
)	O
)	O
{	O
parser_state_tos	pointer
->	O
i_l_follow	int
=	O
parser_state_tos	pointer
->	O
il	pointer
[	O
--	O
parser_state_tos	pointer
->	O
tos	int
]	O
;	O
parser_state_tos	pointer
->	O
ind_level	int
=	O
parser_state_tos	pointer
->	O
i_l_follow	int
;	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
=	O
stmt	int
;	O
}	O
else	O
{	O
ERROR	O
(	O
_	O
(	O
"Stmt nesting error."	pointer
)	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
break	O
;	O
case	O
swstmt	int
:	O
inc_pstack	function
(	O
)	O
;	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
=	O
swstmt	int
;	O
parser_state_tos	pointer
->	O
cstk	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
=	O
settings	struct
.	O
case_indent	int
+	O
parser_state_tos	pointer
->	O
i_l_follow	int
;	O
if	O
(	O
!	O
settings	struct
.	O
btype_2	int
)	O
{	O
parser_state_tos	pointer
->	O
cstk	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
+=	O
settings	struct
.	O
brace_indent	int
;	O
}	O
parser_state_tos	pointer
->	O
il	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
=	O
parser_state_tos	pointer
->	O
i_l_follow	int
;	O
parser_state_tos	pointer
->	O
i_l_follow	int
+=	O
settings	struct
.	O
ind_size	int
;	O
parser_state_tos	pointer
->	O
search_brace	int
=	O
settings	struct
.	O
btype_2	int
;	O
break	O
;	O
case	O
semicolon	int
:	O
break_comma	int
=	O
false	int
;	O
if	O
(	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
==	O
dostmt	int
)	O
{	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
=	O
stmt	int
;	O
}	O
else	O
{	O
inc_pstack	function
(	O
)	O
;	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
=	O
stmt	int
;	O
parser_state_tos	pointer
->	O
il	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
=	O
parser_state_tos	pointer
->	O
ind_level	int
;	O
}	O
break	O
;	O
default	O
:	O
fatal	function
(	O
_	O
(	O
"Unknown code to parser"	pointer
)	O
,	O
0	int
)	O
;	O
}	O
reduce	function
(	O
)	O
;	O
return	O
total_success	int
;	O
}	O
extern	O
void	O
reduce	function
(	O
void	O
)	O
{	O
int	O
i	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
switch	O
(	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
)	O
{	O
case	O
stmt	int
:	O
if	O
(	O
parser_state_tos	pointer
->	O
tos	int
==	O
0	int
)	O
return	O
;	O
switch	O
(	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
-	O
1	int
]	O
)	O
{	O
case	O
stmt	int
:	O
case	O
stmtl	int
:	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
--	O
parser_state_tos	pointer
->	O
tos	int
]	O
=	O
stmtl	int
;	O
break	O
;	O
case	O
dolit	int
:	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
--	O
parser_state_tos	pointer
->	O
tos	int
]	O
=	O
dohead	int
;	O
parser_state_tos	pointer
->	O
i_l_follow	int
=	O
parser_state_tos	pointer
->	O
il	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
;	O
break	O
;	O
case	O
ifstmt	int
:	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
--	O
parser_state_tos	pointer
->	O
tos	int
]	O
=	O
ifhead	int
;	O
for	O
(	O
i	int
=	O
parser_state_tos	pointer
->	O
tos	int
-	O
1	int
;	O
(	O
(	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
i	int
]	O
!=	O
stmt	int
)	O
&&	O
(	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
i	int
]	O
!=	O
stmtl	int
)	O
&&	O
(	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
i	int
]	O
!=	O
lbrace	int
)	O
)	O
;	O
--	O
i	int
)	O
{	O
}	O
parser_state_tos	pointer
->	O
i_l_follow	int
=	O
parser_state_tos	pointer
->	O
il	pointer
[	O
i	int
]	O
;	O
break	O
;	O
case	O
swstmt	int
:	O
case	O
decl	int
:	O
case	O
elsehead	int
:	O
case	O
forstmt	int
:	O
case	O
casestmt	int
:	O
case	O
whilestmt	int
:	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
--	O
parser_state_tos	pointer
->	O
tos	int
]	O
=	O
stmt	int
;	O
parser_state_tos	pointer
->	O
i_l_follow	int
=	O
parser_state_tos	pointer
->	O
il	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
;	O
break	O
;	O
default	O
:	O
return	O
;	O
}	O
break	O
;	O
case	O
whilestmt	int
:	O
if	O
(	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
-	O
1	int
]	O
==	O
dohead	int
)	O
{	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
--	O
parser_state_tos	pointer
->	O
tos	int
]	O
=	O
dostmt	int
;	O
break	O
;	O
}	O
else	O
return	O
;	O
default	O
:	O
return	O
;	O
}	O
}	O
}	O
extern	O
void	O
parse_lparen_in_decl	function
(	O
void	O
)	O
{	O
inc_pstack	function
(	O
)	O
;	O
parser_state_tos	pointer
->	O
p_stack	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
=	O
stmt	int
;	O
parser_state_tos	pointer
->	O
il	pointer
[	O
parser_state_tos	pointer
->	O
tos	int
]	O
=	O
parser_state_tos	pointer
->	O
ind_level	int
;	O
reduce	function
(	O
)	O
;	O
}	O
