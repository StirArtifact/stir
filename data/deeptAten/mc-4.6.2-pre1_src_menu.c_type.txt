int	O
menubar_visible	int
=	O
1	int
;	O
static	O
void	O
menu_scan_hotkey	function
(	O
Menu	struct
*	O
menu	pointer
)	O
{	O
char	O
*	O
cp	pointer
=	O
strchr	function
(	O
menu	pointer
->	O
name	pointer
,	O
'&'	O
)	O
;	O
if	O
(	O
cp	pointer
!=	O
NULL	O
&&	O
cp	pointer
[	O
1	int
]	O
!=	O
'\0'	O
)	O
{	O
g_strlcpy	function
(	O
cp	pointer
,	O
cp	pointer
+	O
1	int
,	O
strlen	function
(	O
cp	pointer
)	O
)	O
;	O
menu	pointer
->	O
hotkey	int
=	O
tolower	function
(	O
(	O
unsigned	O
char	O
)	O
*	O
cp	pointer
)	O
;	O
}	O
else	O
menu	pointer
->	O
hotkey	int
=	O
0	int
;	O
}	O
Menu	struct
*	O
create_menu	function
(	O
const	O
char	O
*	O
name	pointer
,	O
menu_entry	struct
*	O
entries	pointer
,	O
int	O
count	int
,	O
const	O
char	O
*	O
help_node	pointer
)	O
{	O
Menu	struct
*	O
menu	pointer
;	O
const	O
char	O
*	O
cp	pointer
;	O
menu	pointer
=	O
(	O
Menu	struct
*	O
)	O
g_malloc	function
(	O
sizeof	O
(	O
*	O
menu	pointer
)	O
)	O
;	O
menu	pointer
->	O
count	int
=	O
count	int
;	O
menu	pointer
->	O
max_entry_len	int
=	O
20	int
;	O
menu	pointer
->	O
entries	pointer
=	O
entries	pointer
;	O
if	O
(	O
entries	pointer
!=	O
(	O
menu_entry	struct
*	O
)	O
NULL	O
)	O
{	O
register	O
menu_entry	struct
*	O
mp	pointer
;	O
for	O
(	O
mp	pointer
=	O
entries	pointer
;	O
count	int
--	O
;	O
mp	pointer
++	O
)	O
{	O
if	O
(	O
mp	pointer
->	O
text	pointer
[	O
0	int
]	O
!=	O
'\0'	O
)	O
{	O
mp	pointer
->	O
text	pointer
=	O
_	O
(	O
mp	pointer
->	O
text	pointer
)	O
;	O
cp	pointer
=	O
strchr	function
(	O
mp	pointer
->	O
text	pointer
,	O
'&'	O
)	O
;	O
if	O
(	O
cp	pointer
!=	O
NULL	O
&&	O
*	O
(	O
cp	pointer
+	O
1	int
)	O
!=	O
'\0'	O
)	O
{	O
mp	pointer
->	O
hot_key	int
=	O
tolower	function
(	O
(	O
unsigned	O
char	O
)	O
*	O
(	O
cp	pointer
+	O
1	int
)	O
)	O
;	O
menu	pointer
->	O
max_entry_len	int
=	O
max	long
(	O
(	O
int	O
)	O
(	O
strlen	function
(	O
mp	pointer
->	O
text	pointer
)	O
-	O
1	int
)	O
,	O
menu	pointer
->	O
max_entry_len	int
)	O
;	O
}	O
else	O
{	O
menu	pointer
->	O
max_entry_len	int
=	O
max	long
(	O
(	O
int	O
)	O
strlen	function
(	O
mp	pointer
->	O
text	pointer
)	O
,	O
menu	pointer
->	O
max_entry_len	int
)	O
;	O
}	O
}	O
}	O
}	O
menu	pointer
->	O
name	pointer
=	O
g_strdup	function
(	O
name	pointer
)	O
;	O
menu_scan_hotkey	function
(	O
menu	pointer
)	O
;	O
menu	pointer
->	O
start_x	int
=	O
0	int
;	O
menu	pointer
->	O
help_node	pointer
=	O
g_strdup	function
(	O
help_node	pointer
)	O
;	O
return	O
menu	pointer
;	O
}	O
static	O
void	O
menubar_drop_compute	function
(	O
WMenu	struct
*	O
menubar	pointer
)	O
{	O
menubar	pointer
->	O
max_entry_len	int
=	O
menubar	pointer
->	O
menu	pointer
[	O
menubar	pointer
->	O
selected	int
]	O
->	O
max_entry_len	int
;	O
}	O
static	O
void	O
menubar_paint_idx	function
(	O
WMenu	struct
*	O
menubar	pointer
,	O
int	O
idx	int
,	O
int	O
color	short
)	O
{	O
const	O
Menu	struct
*	O
menu	pointer
=	O
menubar	pointer
->	O
menu	pointer
[	O
menubar	pointer
->	O
selected	int
]	O
;	O
const	O
int	O
y	short
=	O
2	int
+	O
idx	int
;	O
int	O
x	array
=	O
menubar	pointer
->	O
menu	pointer
[	O
menubar	pointer
->	O
selected	int
]	O
->	O
start_x	int
;	O
if	O
(	O
x	array
+	O
menubar	pointer
->	O
max_entry_len	int
+	O
3	int
>	O
menubar	pointer
->	O
widget	pointer
.	O
cols	int
)	O
x	array
=	O
menubar	pointer
->	O
widget	pointer
.	O
cols	int
-	O
menubar	pointer
->	O
max_entry_len	int
-	O
3	int
;	O
widget_move	O
(	O
&	O
menubar	pointer
->	O
widget	pointer
,	O
y	short
,	O
x	array
)	O
;	O
attrset	function
(	O
color	short
)	O
;	O
hline	function
(	O
' '	O
,	O
menubar	pointer
->	O
max_entry_len	int
+	O
2	int
)	O
;	O
if	O
(	O
!	O
*	O
menu	pointer
->	O
entries	pointer
[	O
idx	int
]	O
.	O
text	pointer
)	O
{	O
attrset	function
(	O
SELECTED_COLOR	O
)	O
;	O
widget_move	O
(	O
&	O
menubar	pointer
->	O
widget	pointer
,	O
y	short
,	O
x	array
+	O
1	int
)	O
;	O
hline	function
(	O
slow_terminal	int
?	O
' '	O
:	O
ACS_HLINE	O
,	O
menubar	pointer
->	O
max_entry_len	int
)	O
;	O
}	O
else	O
{	O
const	O
char	O
*	O
text	pointer
;	O
addch	O
(	O
(	O
unsigned	O
char	O
)	O
menu	pointer
->	O
entries	pointer
[	O
idx	int
]	O
.	O
first_letter	char
)	O
;	O
for	O
(	O
text	pointer
=	O
menu	pointer
->	O
entries	pointer
[	O
idx	int
]	O
.	O
text	pointer
;	O
*	O
text	pointer
;	O
text	pointer
++	O
)	O
{	O
if	O
(	O
*	O
text	pointer
!=	O
'&'	O
)	O
addch	O
(	O
*	O
text	pointer
)	O
;	O
else	O
{	O
attrset	function
(	O
color	short
==	O
MENU_SELECTED_COLOR	O
?	O
MENU_HOTSEL_COLOR	O
:	O
MENU_HOT_COLOR	O
)	O
;	O
addch	O
(	O
*	O
(	O
++	O
text	pointer
)	O
)	O
;	O
attrset	function
(	O
color	short
)	O
;	O
}	O
}	O
}	O
widget_move	O
(	O
&	O
menubar	pointer
->	O
widget	pointer
,	O
y	short
,	O
x	array
+	O
1	int
)	O
;	O
}	O
static	O
inline	O
void	O
menubar_draw_drop	function
(	O
WMenu	struct
*	O
menubar	pointer
)	O
{	O
const	O
int	O
count	int
=	O
(	O
menubar	pointer
->	O
menu	pointer
[	O
menubar	pointer
->	O
selected	int
]	O
)	O
->	O
count	int
;	O
int	O
i	array
;	O
int	O
sel	int
=	O
menubar	pointer
->	O
subsel	int
;	O
int	O
column	pointer
=	O
menubar	pointer
->	O
menu	pointer
[	O
menubar	pointer
->	O
selected	int
]	O
->	O
start_x	int
-	O
1	int
;	O
if	O
(	O
column	pointer
+	O
menubar	pointer
->	O
max_entry_len	int
+	O
4	int
>	O
menubar	pointer
->	O
widget	pointer
.	O
cols	int
)	O
column	pointer
=	O
menubar	pointer
->	O
widget	pointer
.	O
cols	int
-	O
menubar	pointer
->	O
max_entry_len	int
-	O
4	int
;	O
attrset	function
(	O
SELECTED_COLOR	O
)	O
;	O
draw_box	function
(	O
menubar	pointer
->	O
widget	pointer
.	O
parent	pointer
,	O
menubar	pointer
->	O
widget	pointer
.	O
y	short
+	O
1	int
,	O
menubar	pointer
->	O
widget	pointer
.	O
x	array
+	O
column	pointer
,	O
count	int
+	O
2	int
,	O
menubar	pointer
->	O
max_entry_len	int
+	O
4	int
)	O
;	O
column	pointer
++	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
count	int
;	O
i	array
++	O
)	O
{	O
if	O
(	O
i	array
==	O
sel	int
)	O
continue	O
;	O
menubar_paint_idx	function
(	O
menubar	pointer
,	O
i	array
,	O
MENU_ENTRY_COLOR	O
)	O
;	O
}	O
menubar_paint_idx	function
(	O
menubar	pointer
,	O
sel	int
,	O
MENU_SELECTED_COLOR	O
)	O
;	O
}	O
static	O
void	O
menubar_draw	function
(	O
WMenu	struct
*	O
menubar	pointer
)	O
{	O
const	O
int	O
items	pointer
=	O
menubar	pointer
->	O
items	pointer
;	O
int	O
i	array
;	O
attrset	function
(	O
SELECTED_COLOR	O
)	O
;	O
widget_move	O
(	O
&	O
menubar	pointer
->	O
widget	pointer
,	O
0	int
,	O
0	int
)	O
;	O
hline	function
(	O
' '	O
,	O
menubar	pointer
->	O
widget	pointer
.	O
cols	int
)	O
;	O
attrset	function
(	O
SELECTED_COLOR	O
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
items	pointer
;	O
i	array
++	O
)	O
{	O
if	O
(	O
menubar	pointer
->	O
active	int
)	O
attrset	function
(	O
i	array
==	O
menubar	pointer
->	O
selected	int
?	O
MENU_SELECTED_COLOR	O
:	O
SELECTED_COLOR	O
)	O
;	O
widget_move	O
(	O
&	O
menubar	pointer
->	O
widget	pointer
,	O
0	int
,	O
menubar	pointer
->	O
menu	pointer
[	O
i	array
]	O
->	O
start_x	int
)	O
;	O
tty_printf	function
(	O
"%s"	pointer
,	O
menubar	pointer
->	O
menu	pointer
[	O
i	array
]	O
->	O
name	pointer
)	O
;	O
}	O
if	O
(	O
menubar	pointer
->	O
dropped	int
)	O
menubar_draw_drop	function
(	O
menubar	pointer
)	O
;	O
else	O
widget_move	O
(	O
&	O
menubar	pointer
->	O
widget	pointer
,	O
0	int
,	O
menubar	pointer
->	O
menu	pointer
[	O
menubar	pointer
->	O
selected	int
]	O
->	O
start_x	int
)	O
;	O
}	O
static	O
inline	O
void	O
menubar_remove	function
(	O
WMenu	struct
*	O
menubar	pointer
)	O
{	O
menubar	pointer
->	O
subsel	int
=	O
0	int
;	O
if	O
(	O
menubar	pointer
->	O
dropped	int
)	O
{	O
menubar	pointer
->	O
dropped	int
=	O
0	int
;	O
do_refresh	function
(	O
)	O
;	O
menubar	pointer
->	O
dropped	int
=	O
1	int
;	O
}	O
}	O
static	O
void	O
menubar_left	function
(	O
WMenu	struct
*	O
menu	pointer
)	O
{	O
menubar_remove	function
(	O
menu	pointer
)	O
;	O
menu	pointer
->	O
selected	int
=	O
(	O
menu	pointer
->	O
selected	int
-	O
1	int
)	O
%	O
menu	pointer
->	O
items	pointer
;	O
if	O
(	O
menu	pointer
->	O
selected	int
<	O
0	int
)	O
menu	pointer
->	O
selected	int
=	O
menu	pointer
->	O
items	pointer
-	O
1	int
;	O
menubar_drop_compute	function
(	O
menu	pointer
)	O
;	O
menubar_draw	function
(	O
menu	pointer
)	O
;	O
}	O
static	O
void	O
menubar_right	function
(	O
WMenu	struct
*	O
menu	pointer
)	O
{	O
menubar_remove	function
(	O
menu	pointer
)	O
;	O
menu	pointer
->	O
selected	int
=	O
(	O
menu	pointer
->	O
selected	int
+	O
1	int
)	O
%	O
menu	pointer
->	O
items	pointer
;	O
menubar_drop_compute	function
(	O
menu	pointer
)	O
;	O
menubar_draw	function
(	O
menu	pointer
)	O
;	O
}	O
static	O
void	O
menubar_finish	function
(	O
WMenu	struct
*	O
menubar	pointer
)	O
{	O
menubar	pointer
->	O
dropped	int
=	O
0	int
;	O
menubar	pointer
->	O
active	int
=	O
0	int
;	O
menubar	pointer
->	O
widget	pointer
.	O
lines	pointer
=	O
1	int
;	O
widget_want_hotkey	O
(	O
menubar	pointer
->	O
widget	pointer
,	O
0	int
)	O
;	O
dlg_select_by_id	function
(	O
menubar	pointer
->	O
widget	pointer
.	O
parent	pointer
,	O
menubar	pointer
->	O
previous_widget	int
)	O
;	O
do_refresh	function
(	O
)	O
;	O
}	O
static	O
void	O
menubar_drop	function
(	O
WMenu	struct
*	O
menubar	pointer
,	O
int	O
selected	int
)	O
{	O
menubar	pointer
->	O
dropped	int
=	O
1	int
;	O
menubar	pointer
->	O
selected	int
=	O
selected	int
;	O
menubar	pointer
->	O
subsel	int
=	O
0	int
;	O
menubar_drop_compute	function
(	O
menubar	pointer
)	O
;	O
menubar_draw	function
(	O
menubar	pointer
)	O
;	O
}	O
static	O
void	O
menubar_execute	function
(	O
WMenu	struct
*	O
menubar	pointer
,	O
int	O
entry	int
)	O
{	O
const	O
Menu	struct
*	O
menu	pointer
=	O
menubar	pointer
->	O
menu	pointer
[	O
menubar	pointer
->	O
selected	int
]	O
;	O
const	O
callfn	pointer
call_back	pointer
=	O
menu	pointer
->	O
entries	pointer
[	O
entry	int
]	O
.	O
call_back	pointer
;	O
is_right	int
=	O
menubar	pointer
->	O
selected	int
!=	O
0	int
;	O
menubar_finish	function
(	O
menubar	pointer
)	O
;	O
(	O
*	O
call_back	pointer
)	O
(	O
)	O
;	O
do_refresh	function
(	O
)	O
;	O
}	O
static	O
void	O
menubar_move	function
(	O
WMenu	struct
*	O
menubar	pointer
,	O
int	O
step	int
)	O
{	O
const	O
Menu	struct
*	O
menu	pointer
=	O
menubar	pointer
->	O
menu	pointer
[	O
menubar	pointer
->	O
selected	int
]	O
;	O
menubar_paint_idx	function
(	O
menubar	pointer
,	O
menubar	pointer
->	O
subsel	int
,	O
MENU_ENTRY_COLOR	O
)	O
;	O
do	O
{	O
menubar	pointer
->	O
subsel	int
+=	O
step	int
;	O
if	O
(	O
menubar	pointer
->	O
subsel	int
<	O
0	int
)	O
menubar	pointer
->	O
subsel	int
=	O
menu	pointer
->	O
count	int
-	O
1	int
;	O
menubar	pointer
->	O
subsel	int
%=	O
menu	pointer
->	O
count	int
;	O
}	O
while	O
(	O
!	O
menu	pointer
->	O
entries	pointer
[	O
menubar	pointer
->	O
subsel	int
]	O
.	O
call_back	pointer
)	O
;	O
menubar_paint_idx	function
(	O
menubar	pointer
,	O
menubar	pointer
->	O
subsel	int
,	O
MENU_SELECTED_COLOR	O
)	O
;	O
}	O
static	O
int	O
menubar_handle_key	function
(	O
WMenu	struct
*	O
menubar	pointer
,	O
int	O
key	pointer
)	O
{	O
int	O
i	array
;	O
if	O
(	O
key	pointer
<	O
256	int
&&	O
isalpha	function
(	O
key	pointer
)	O
)	O
key	pointer
=	O
tolower	function
(	O
key	pointer
)	O
;	O
if	O
(	O
is_abort_char	function
(	O
key	pointer
)	O
)	O
{	O
menubar_finish	function
(	O
menubar	pointer
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
key	pointer
==	O
KEY_F	O
(	O
1	int
)	O
)	O
{	O
if	O
(	O
menubar	pointer
->	O
dropped	int
)	O
{	O
interactive_display	function
(	O
NULL	O
,	O
(	O
menubar	pointer
->	O
menu	pointer
[	O
menubar	pointer
->	O
selected	int
]	O
)	O
->	O
help_node	pointer
)	O
;	O
}	O
else	O
{	O
interactive_display	function
(	O
NULL	O
,	O
"[Menu Bar]"	pointer
)	O
;	O
}	O
menubar_draw	function
(	O
menubar	pointer
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
key	pointer
==	O
KEY_LEFT	int
||	O
key	pointer
==	O
XCTRL	O
(	O
'b'	O
)	O
)	O
{	O
menubar_left	function
(	O
menubar	pointer
)	O
;	O
return	O
1	int
;	O
}	O
else	O
if	O
(	O
key	pointer
==	O
KEY_RIGHT	int
||	O
key	pointer
==	O
XCTRL	O
(	O
'f'	O
)	O
)	O
{	O
menubar_right	function
(	O
menubar	pointer
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
!	O
menubar	pointer
->	O
dropped	int
)	O
{	O
const	O
int	O
items	pointer
=	O
menubar	pointer
->	O
items	pointer
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
items	pointer
;	O
i	array
++	O
)	O
{	O
const	O
Menu	struct
*	O
menu	pointer
=	O
menubar	pointer
->	O
menu	pointer
[	O
i	array
]	O
;	O
if	O
(	O
menu	pointer
->	O
hotkey	int
==	O
key	pointer
)	O
{	O
menubar_drop	function
(	O
menubar	pointer
,	O
i	array
)	O
;	O
return	O
1	int
;	O
}	O
}	O
if	O
(	O
key	pointer
==	O
KEY_ENTER	int
||	O
key	pointer
==	O
XCTRL	O
(	O
'n'	O
)	O
||	O
key	pointer
==	O
KEY_DOWN	int
||	O
key	pointer
==	O
'\n'	O
)	O
{	O
menubar_drop	function
(	O
menubar	pointer
,	O
menubar	pointer
->	O
selected	int
)	O
;	O
return	O
1	int
;	O
}	O
return	O
1	int
;	O
}	O
else	O
{	O
const	O
int	O
selected	int
=	O
menubar	pointer
->	O
selected	int
;	O
const	O
Menu	struct
*	O
menu	pointer
=	O
menubar	pointer
->	O
menu	pointer
[	O
selected	int
]	O
;	O
const	O
int	O
items	pointer
=	O
menu	pointer
->	O
count	int
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
items	pointer
;	O
i	array
++	O
)	O
{	O
if	O
(	O
!	O
menu	pointer
->	O
entries	pointer
[	O
i	array
]	O
.	O
call_back	pointer
)	O
continue	O
;	O
if	O
(	O
key	pointer
!=	O
menu	pointer
->	O
entries	pointer
[	O
i	array
]	O
.	O
hot_key	int
)	O
continue	O
;	O
menubar_execute	function
(	O
menubar	pointer
,	O
i	array
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
key	pointer
==	O
KEY_ENTER	int
||	O
key	pointer
==	O
'\n'	O
)	O
{	O
menubar_execute	function
(	O
menubar	pointer
,	O
menubar	pointer
->	O
subsel	int
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
key	pointer
==	O
KEY_DOWN	int
||	O
key	pointer
==	O
XCTRL	O
(	O
'n'	O
)	O
)	O
menubar_move	function
(	O
menubar	pointer
,	O
1	int
)	O
;	O
if	O
(	O
key	pointer
==	O
KEY_UP	int
||	O
key	pointer
==	O
XCTRL	O
(	O
'p'	O
)	O
)	O
menubar_move	function
(	O
menubar	pointer
,	O
-	O
1	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
cb_ret_t	enum
menubar_callback	function
(	O
Widget	struct
*	O
w	pointer
,	O
widget_msg_t	enum
msg	pointer
,	O
int	O
parm	int
)	O
{	O
WMenu	struct
*	O
menubar	pointer
=	O
(	O
WMenu	struct
*	O
)	O
w	pointer
;	O
switch	O
(	O
msg	pointer
)	O
{	O
case	O
WIDGET_FOCUS	int
:	O
if	O
(	O
!	O
menubar	pointer
->	O
active	int
)	O
return	O
MSG_NOT_HANDLED	int
;	O
widget_want_cursor	O
(	O
menubar	pointer
->	O
widget	pointer
,	O
1	int
)	O
;	O
menubar	pointer
->	O
widget	pointer
.	O
lines	pointer
=	O
LINES	O
;	O
widget_want_hotkey	O
(	O
menubar	pointer
->	O
widget	pointer
,	O
1	int
)	O
;	O
menubar	pointer
->	O
subsel	int
=	O
0	int
;	O
menubar_drop_compute	function
(	O
menubar	pointer
)	O
;	O
menubar_draw	function
(	O
menubar	pointer
)	O
;	O
return	O
MSG_HANDLED	int
;	O
case	O
WIDGET_HOTKEY	int
:	O
case	O
WIDGET_KEY	int
:	O
if	O
(	O
menubar	pointer
->	O
active	int
)	O
{	O
menubar_handle_key	function
(	O
menubar	pointer
,	O
parm	int
)	O
;	O
return	O
MSG_HANDLED	int
;	O
}	O
else	O
return	O
MSG_NOT_HANDLED	int
;	O
case	O
WIDGET_CURSOR	int
:	O
return	O
MSG_NOT_HANDLED	int
;	O
case	O
WIDGET_UNFOCUS	int
:	O
if	O
(	O
menubar	pointer
->	O
active	int
)	O
return	O
MSG_NOT_HANDLED	int
;	O
else	O
{	O
widget_want_cursor	O
(	O
menubar	pointer
->	O
widget	pointer
,	O
0	int
)	O
;	O
return	O
MSG_HANDLED	int
;	O
}	O
case	O
WIDGET_DRAW	int
:	O
if	O
(	O
menubar_visible	int
)	O
menubar_draw	function
(	O
menubar	pointer
)	O
;	O
return	O
MSG_HANDLED	int
;	O
default	O
:	O
return	O
default_proc	function
(	O
msg	pointer
,	O
parm	int
)	O
;	O
}	O
}	O
static	O
int	O
menubar_event	function
(	O
Gpm_Event	struct
*	O
event	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
WMenu	struct
*	O
menubar	pointer
=	O
data	pointer
;	O
int	O
was_active	int
;	O
int	O
new_selection	int
;	O
int	O
left_x	int
,	O
right_x	int
,	O
bottom_y	int
;	O
if	O
(	O
!	O
(	O
event	pointer
->	O
type	enum
&	O
(	O
GPM_UP	int
|	O
GPM_DOWN	int
|	O
GPM_DRAG	int
)	O
)	O
)	O
return	O
MOU_NORMAL	int
;	O
if	O
(	O
!	O
menubar	pointer
->	O
dropped	int
)	O
{	O
menubar	pointer
->	O
previous_widget	int
=	O
menubar	pointer
->	O
widget	pointer
.	O
parent	pointer
->	O
current	pointer
->	O
dlg_id	int
;	O
menubar	pointer
->	O
active	int
=	O
1	int
;	O
menubar	pointer
->	O
dropped	int
=	O
1	int
;	O
was_active	int
=	O
0	int
;	O
}	O
else	O
was_active	int
=	O
1	int
;	O
if	O
(	O
event	pointer
->	O
y	short
==	O
1	int
||	O
!	O
was_active	int
)	O
{	O
if	O
(	O
event	pointer
->	O
type	enum
&	O
GPM_UP	int
)	O
return	O
MOU_NORMAL	int
;	O
new_selection	int
=	O
0	int
;	O
while	O
(	O
new_selection	int
<	O
menubar	pointer
->	O
items	pointer
&&	O
event	pointer
->	O
x	array
>	O
menubar	pointer
->	O
menu	pointer
[	O
new_selection	int
]	O
->	O
start_x	int
)	O
new_selection	int
++	O
;	O
if	O
(	O
new_selection	int
)	O
--	O
new_selection	int
;	O
if	O
(	O
!	O
was_active	int
)	O
{	O
menubar	pointer
->	O
selected	int
=	O
new_selection	int
;	O
dlg_select_widget	function
(	O
menubar	pointer
)	O
;	O
menubar_drop_compute	function
(	O
menubar	pointer
)	O
;	O
menubar_draw	function
(	O
menubar	pointer
)	O
;	O
return	O
MOU_NORMAL	int
;	O
}	O
menubar_remove	function
(	O
menubar	pointer
)	O
;	O
menubar	pointer
->	O
selected	int
=	O
new_selection	int
;	O
menubar_drop_compute	function
(	O
menubar	pointer
)	O
;	O
menubar_draw	function
(	O
menubar	pointer
)	O
;	O
return	O
MOU_NORMAL	int
;	O
}	O
if	O
(	O
!	O
menubar	pointer
->	O
dropped	int
)	O
return	O
MOU_NORMAL	int
;	O
if	O
(	O
event	pointer
->	O
y	short
<=	O
2	int
)	O
return	O
MOU_NORMAL	int
;	O
left_x	int
=	O
menubar	pointer
->	O
menu	pointer
[	O
menubar	pointer
->	O
selected	int
]	O
->	O
start_x	int
;	O
right_x	int
=	O
left_x	int
+	O
menubar	pointer
->	O
max_entry_len	int
+	O
4	int
;	O
if	O
(	O
right_x	int
>	O
menubar	pointer
->	O
widget	pointer
.	O
cols	int
)	O
{	O
left_x	int
=	O
menubar	pointer
->	O
widget	pointer
.	O
cols	int
-	O
menubar	pointer
->	O
max_entry_len	int
-	O
3	int
;	O
right_x	int
=	O
menubar	pointer
->	O
widget	pointer
.	O
cols	int
-	O
1	int
;	O
}	O
bottom_y	int
=	O
(	O
menubar	pointer
->	O
menu	pointer
[	O
menubar	pointer
->	O
selected	int
]	O
)	O
->	O
count	int
+	O
3	int
;	O
if	O
(	O
(	O
event	pointer
->	O
x	array
>	O
left_x	int
)	O
&&	O
(	O
event	pointer
->	O
x	array
<	O
right_x	int
)	O
&&	O
(	O
event	pointer
->	O
y	short
<	O
bottom_y	int
)	O
)	O
{	O
int	O
pos	pointer
=	O
event	pointer
->	O
y	short
-	O
3	int
;	O
if	O
(	O
!	O
menubar	pointer
->	O
menu	pointer
[	O
menubar	pointer
->	O
selected	int
]	O
->	O
entries	pointer
[	O
pos	pointer
]	O
.	O
call_back	pointer
)	O
return	O
MOU_NORMAL	int
;	O
menubar_paint_idx	function
(	O
menubar	pointer
,	O
menubar	pointer
->	O
subsel	int
,	O
MENU_ENTRY_COLOR	O
)	O
;	O
menubar	pointer
->	O
subsel	int
=	O
pos	pointer
;	O
menubar_paint_idx	function
(	O
menubar	pointer
,	O
menubar	pointer
->	O
subsel	int
,	O
MENU_SELECTED_COLOR	O
)	O
;	O
if	O
(	O
event	pointer
->	O
type	enum
&	O
GPM_UP	int
)	O
menubar_execute	function
(	O
menubar	pointer
,	O
pos	pointer
)	O
;	O
}	O
else	O
if	O
(	O
event	pointer
->	O
type	enum
&	O
GPM_DOWN	int
)	O
menubar_finish	function
(	O
menubar	pointer
)	O
;	O
return	O
MOU_NORMAL	int
;	O
}	O
void	O
menubar_arrange	function
(	O
WMenu	struct
*	O
menubar	pointer
)	O
{	O
register	O
int	O
i	array
,	O
start_x	int
=	O
1	int
;	O
int	O
items	pointer
=	O
menubar	pointer
->	O
items	pointer
;	O
int	O
gap	int
=	O
3	int
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
items	pointer
;	O
i	array
++	O
)	O
{	O
int	O
len	int
=	O
strlen	function
(	O
menubar	pointer
->	O
menu	pointer
[	O
i	array
]	O
->	O
name	pointer
)	O
;	O
menubar	pointer
->	O
menu	pointer
[	O
i	array
]	O
->	O
start_x	int
=	O
start_x	int
;	O
start_x	int
+=	O
len	int
+	O
gap	int
;	O
}	O
}	O
void	O
destroy_menu	function
(	O
Menu	struct
*	O
menu	pointer
)	O
{	O
g_free	function
(	O
menu	pointer
->	O
name	pointer
)	O
;	O
g_free	function
(	O
menu	pointer
->	O
help_node	pointer
)	O
;	O
g_free	function
(	O
menu	pointer
)	O
;	O
}	O
WMenu	struct
*	O
menubar_new	function
(	O
int	O
y	short
,	O
int	O
x	array
,	O
int	O
cols	int
,	O
Menu	struct
*	O
menu	pointer
[	O
]	O
,	O
int	O
items	pointer
)	O
{	O
WMenu	struct
*	O
menubar	pointer
=	O
g_new0	O
(	O
WMenu	struct
,	O
1	int
)	O
;	O
init_widget	function
(	O
&	O
menubar	pointer
->	O
widget	pointer
,	O
y	short
,	O
x	array
,	O
1	int
,	O
cols	int
,	O
menubar_callback	function
,	O
menubar_event	function
)	O
;	O
menubar	pointer
->	O
menu	pointer
=	O
menu	pointer
;	O
menubar	pointer
->	O
active	int
=	O
0	int
;	O
menubar	pointer
->	O
dropped	int
=	O
0	int
;	O
menubar	pointer
->	O
items	pointer
=	O
items	pointer
;	O
menubar	pointer
->	O
selected	int
=	O
0	int
;	O
widget_want_cursor	O
(	O
menubar	pointer
->	O
widget	pointer
,	O
0	int
)	O
;	O
menubar_arrange	function
(	O
menubar	pointer
)	O
;	O
return	O
menubar	pointer
;	O
}	O
