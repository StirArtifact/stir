struct	O
ihex_data_list	struct
{	O
struct	O
ihex_data_list	struct
*	O
next	pointer
;	O
bfd_byte	char
*	O
data	pointer
;	O
bfd_vma	long
where	long
;	O
bfd_size_type	long
size	long
;	O
}	O
;	O
struct	O
ihex_data_struct	struct
{	O
struct	O
ihex_data_list	struct
*	O
head	pointer
;	O
struct	O
ihex_data_list	struct
*	O
tail	pointer
;	O
}	O
;	O
static	O
void	O
ihex_init	function
(	O
void	O
)	O
{	O
static	O
bfd_boolean	int
inited	int
;	O
if	O
(	O
!	O
inited	int
)	O
{	O
inited	int
=	O
TRUE	int
;	O
hex_init	function
(	O
)	O
;	O
}	O
}	O
static	O
bfd_boolean	int
ihex_mkobject	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
struct	O
ihex_data_struct	struct
*	O
tdata	union
;	O
tdata	union
=	O
(	O
struct	O
ihex_data_struct	struct
*	O
)	O
bfd_alloc	function
(	O
abfd	pointer
,	O
sizeof	O
(	O
*	O
tdata	union
)	O
)	O
;	O
if	O
(	O
tdata	union
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
abfd	pointer
->	O
tdata	union
.	O
ihex_data	pointer
=	O
tdata	union
;	O
tdata	union
->	O
head	pointer
=	O
NULL	O
;	O
tdata	union
->	O
tail	pointer
=	O
NULL	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
INLINE	O
int	O
ihex_get_byte	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
bfd_boolean	int
*	O
errorptr	pointer
)	O
{	O
bfd_byte	char
c	char
;	O
if	O
(	O
bfd_bread	function
(	O
&	O
c	char
,	O
(	O
bfd_size_type	long
)	O
1	int
,	O
abfd	pointer
)	O
!=	O
1	int
)	O
{	O
if	O
(	O
bfd_get_error	function
(	O
)	O
!=	O
bfd_error_file_truncated	int
)	O
*	O
errorptr	pointer
=	O
TRUE	int
;	O
return	O
EOF	O
;	O
}	O
return	O
(	O
int	O
)	O
(	O
c	char
&	O
0xff	int
)	O
;	O
}	O
static	O
void	O
ihex_bad_byte	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
unsigned	O
int	O
lineno	pointer
,	O
int	O
c	char
,	O
bfd_boolean	int
error	int
)	O
{	O
if	O
(	O
c	char
==	O
EOF	O
)	O
{	O
if	O
(	O
!	O
error	int
)	O
bfd_set_error	function
(	O
bfd_error_file_truncated	int
)	O
;	O
}	O
else	O
{	O
char	O
buf	pointer
[	O
10	int
]	O
;	O
if	O
(	O
!	O
ISPRINT	O
(	O
c	char
)	O
)	O
sprintf	function
(	O
buf	pointer
,	O
"\\%03o"	pointer
,	O
(	O
unsigned	O
int	O
)	O
c	char
&	O
0xff	int
)	O
;	O
else	O
{	O
buf	pointer
[	O
0	int
]	O
=	O
c	char
;	O
buf	pointer
[	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
_bfd_error_handler	function
(	O
_	O
(	O
"%pB:%d: unexpected character `%s' in Intel Hex file"	pointer
)	O
,	O
abfd	pointer
,	O
lineno	pointer
,	O
buf	pointer
)	O
;	O
bfd_set_error	function
(	O
bfd_error_bad_value	int
)	O
;	O
}	O
}	O
static	O
bfd_boolean	int
ihex_scan	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
bfd_vma	long
segbase	long
;	O
bfd_vma	long
extbase	long
;	O
asection	struct
*	O
sec	pointer
;	O
unsigned	O
int	O
lineno	pointer
;	O
bfd_boolean	int
error	int
;	O
bfd_byte	char
*	O
buf	pointer
=	O
NULL	O
;	O
size_t	long
bufsize	long
;	O
int	O
c	char
;	O
if	O
(	O
bfd_seek	function
(	O
abfd	pointer
,	O
(	O
file_ptr	long
)	O
0	int
,	O
SEEK_SET	int
)	O
!=	O
0	int
)	O
goto	O
error_return	O
;	O
abfd	pointer
->	O
start_address	long
=	O
0	int
;	O
segbase	long
=	O
0	int
;	O
extbase	long
=	O
0	int
;	O
sec	pointer
=	O
NULL	O
;	O
lineno	pointer
=	O
1	int
;	O
error	int
=	O
FALSE	int
;	O
bufsize	long
=	O
0	int
;	O
while	O
(	O
(	O
c	char
=	O
ihex_get_byte	function
(	O
abfd	pointer
,	O
&	O
error	int
)	O
)	O
!=	O
EOF	O
)	O
{	O
if	O
(	O
c	char
==	O
'\r'	O
)	O
continue	O
;	O
else	O
if	O
(	O
c	char
==	O
'\n'	O
)	O
{	O
++	O
lineno	pointer
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
c	char
!=	O
':'	O
)	O
{	O
ihex_bad_byte	function
(	O
abfd	pointer
,	O
lineno	pointer
,	O
c	char
,	O
error	int
)	O
;	O
goto	O
error_return	O
;	O
}	O
else	O
{	O
file_ptr	long
pos	long
;	O
unsigned	O
char	O
hdr	array
[	O
8	int
]	O
;	O
unsigned	O
int	O
i	pointer
;	O
unsigned	O
int	O
len	long
;	O
bfd_vma	long
addr	pointer
;	O
unsigned	O
int	O
type	enum
;	O
unsigned	O
int	O
chars	int
;	O
unsigned	O
int	O
chksum	int
;	O
pos	long
=	O
bfd_tell	function
(	O
abfd	pointer
)	O
-	O
1	int
;	O
if	O
(	O
bfd_bread	function
(	O
hdr	array
,	O
(	O
bfd_size_type	long
)	O
8	int
,	O
abfd	pointer
)	O
!=	O
8	int
)	O
goto	O
error_return	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
8	int
;	O
i	pointer
++	O
)	O
{	O
if	O
(	O
!	O
ISHEX	O
(	O
hdr	array
[	O
i	pointer
]	O
)	O
)	O
{	O
ihex_bad_byte	function
(	O
abfd	pointer
,	O
lineno	pointer
,	O
hdr	array
[	O
i	pointer
]	O
,	O
error	int
)	O
;	O
goto	O
error_return	O
;	O
}	O
}	O
len	long
=	O
HEX2	O
(	O
hdr	array
)	O
;	O
addr	pointer
=	O
HEX4	O
(	O
hdr	array
+	O
2	int
)	O
;	O
type	enum
=	O
HEX2	O
(	O
hdr	array
+	O
6	int
)	O
;	O
chars	int
=	O
len	long
*	O
2	int
+	O
2	int
;	O
if	O
(	O
chars	int
>=	O
bufsize	long
)	O
{	O
buf	pointer
=	O
(	O
bfd_byte	char
*	O
)	O
bfd_realloc	function
(	O
buf	pointer
,	O
(	O
bfd_size_type	long
)	O
chars	int
)	O
;	O
if	O
(	O
buf	pointer
==	O
NULL	O
)	O
goto	O
error_return	O
;	O
bufsize	long
=	O
chars	int
;	O
}	O
if	O
(	O
bfd_bread	function
(	O
buf	pointer
,	O
(	O
bfd_size_type	long
)	O
chars	int
,	O
abfd	pointer
)	O
!=	O
chars	int
)	O
goto	O
error_return	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
chars	int
;	O
i	pointer
++	O
)	O
{	O
if	O
(	O
!	O
ISHEX	O
(	O
buf	pointer
[	O
i	pointer
]	O
)	O
)	O
{	O
ihex_bad_byte	function
(	O
abfd	pointer
,	O
lineno	pointer
,	O
buf	pointer
[	O
i	pointer
]	O
,	O
error	int
)	O
;	O
goto	O
error_return	O
;	O
}	O
}	O
chksum	int
=	O
len	long
+	O
addr	pointer
+	O
(	O
addr	pointer
>>	O
8	int
)	O
+	O
type	enum
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
len	long
;	O
i	pointer
++	O
)	O
chksum	int
+=	O
HEX2	O
(	O
buf	pointer
+	O
2	int
*	O
i	pointer
)	O
;	O
if	O
(	O
(	O
(	O
-	O
chksum	int
)	O
&	O
0xff	int
)	O
!=	O
(	O
unsigned	O
int	O
)	O
HEX2	O
(	O
buf	pointer
+	O
2	int
*	O
i	pointer
)	O
)	O
{	O
_bfd_error_handler	function
(	O
_	O
(	O
"%pB:%u: bad checksum in Intel Hex file (expected %u, found %u)"	pointer
)	O
,	O
abfd	pointer
,	O
lineno	pointer
,	O
(	O
-	O
chksum	int
)	O
&	O
0xff	int
,	O
(	O
unsigned	O
int	O
)	O
HEX2	O
(	O
buf	pointer
+	O
2	int
*	O
i	pointer
)	O
)	O
;	O
bfd_set_error	function
(	O
bfd_error_bad_value	int
)	O
;	O
goto	O
error_return	O
;	O
}	O
switch	O
(	O
type	enum
)	O
{	O
case	O
0	int
:	O
if	O
(	O
sec	pointer
!=	O
NULL	O
&&	O
sec	pointer
->	O
vma	long
+	O
sec	pointer
->	O
size	long
==	O
extbase	long
+	O
segbase	long
+	O
addr	pointer
)	O
{	O
sec	pointer
->	O
size	long
+=	O
len	long
;	O
}	O
else	O
if	O
(	O
len	long
>	O
0	int
)	O
{	O
char	O
secbuf	array
[	O
20	int
]	O
;	O
char	O
*	O
secname	pointer
;	O
bfd_size_type	long
amt	long
;	O
flagword	int
flags	int
;	O
sprintf	function
(	O
secbuf	array
,	O
".sec%d"	pointer
,	O
bfd_count_sections	function
(	O
abfd	pointer
)	O
+	O
1	int
)	O
;	O
amt	long
=	O
strlen	function
(	O
secbuf	array
)	O
+	O
1	int
;	O
secname	pointer
=	O
(	O
char	O
*	O
)	O
bfd_alloc	function
(	O
abfd	pointer
,	O
amt	long
)	O
;	O
if	O
(	O
secname	pointer
==	O
NULL	O
)	O
goto	O
error_return	O
;	O
strcpy	function
(	O
secname	pointer
,	O
secbuf	array
)	O
;	O
flags	int
=	O
SEC_HAS_CONTENTS	int
|	O
SEC_LOAD	int
|	O
SEC_ALLOC	int
;	O
sec	pointer
=	O
bfd_make_section_with_flags	function
(	O
abfd	pointer
,	O
secname	pointer
,	O
flags	int
)	O
;	O
if	O
(	O
sec	pointer
==	O
NULL	O
)	O
goto	O
error_return	O
;	O
sec	pointer
->	O
vma	long
=	O
extbase	long
+	O
segbase	long
+	O
addr	pointer
;	O
sec	pointer
->	O
lma	long
=	O
extbase	long
+	O
segbase	long
+	O
addr	pointer
;	O
sec	pointer
->	O
size	long
=	O
len	long
;	O
sec	pointer
->	O
filepos	long
=	O
pos	long
;	O
}	O
break	O
;	O
case	O
1	int
:	O
if	O
(	O
abfd	pointer
->	O
start_address	long
==	O
0	int
)	O
abfd	pointer
->	O
start_address	long
=	O
addr	pointer
;	O
if	O
(	O
buf	pointer
!=	O
NULL	O
)	O
free	function
(	O
buf	pointer
)	O
;	O
return	O
TRUE	int
;	O
case	O
2	int
:	O
if	O
(	O
len	long
!=	O
2	int
)	O
{	O
_bfd_error_handler	function
(	O
_	O
(	O
"%pB:%u: bad extended address record length in Intel Hex file"	pointer
)	O
,	O
abfd	pointer
,	O
lineno	pointer
)	O
;	O
bfd_set_error	function
(	O
bfd_error_bad_value	int
)	O
;	O
goto	O
error_return	O
;	O
}	O
segbase	long
=	O
HEX4	O
(	O
buf	pointer
)	O
<<	O
4	int
;	O
sec	pointer
=	O
NULL	O
;	O
break	O
;	O
case	O
3	int
:	O
if	O
(	O
len	long
!=	O
4	int
)	O
{	O
_bfd_error_handler	function
(	O
_	O
(	O
"%pB:%u: bad extended start address length in Intel Hex file"	pointer
)	O
,	O
abfd	pointer
,	O
lineno	pointer
)	O
;	O
bfd_set_error	function
(	O
bfd_error_bad_value	int
)	O
;	O
goto	O
error_return	O
;	O
}	O
abfd	pointer
->	O
start_address	long
+=	O
(	O
HEX4	O
(	O
buf	pointer
)	O
<<	O
4	int
)	O
+	O
HEX4	O
(	O
buf	pointer
+	O
4	int
)	O
;	O
sec	pointer
=	O
NULL	O
;	O
break	O
;	O
case	O
4	int
:	O
if	O
(	O
len	long
!=	O
2	int
)	O
{	O
_bfd_error_handler	function
(	O
_	O
(	O
"%pB:%u: bad extended linear address record length in Intel Hex file"	pointer
)	O
,	O
abfd	pointer
,	O
lineno	pointer
)	O
;	O
bfd_set_error	function
(	O
bfd_error_bad_value	int
)	O
;	O
goto	O
error_return	O
;	O
}	O
extbase	long
=	O
HEX4	O
(	O
buf	pointer
)	O
<<	O
16	int
;	O
sec	pointer
=	O
NULL	O
;	O
break	O
;	O
case	O
5	int
:	O
if	O
(	O
len	long
!=	O
2	int
&&	O
len	long
!=	O
4	int
)	O
{	O
_bfd_error_handler	function
(	O
_	O
(	O
"%pB:%u: bad extended linear start address length in Intel Hex file"	pointer
)	O
,	O
abfd	pointer
,	O
lineno	pointer
)	O
;	O
bfd_set_error	function
(	O
bfd_error_bad_value	int
)	O
;	O
goto	O
error_return	O
;	O
}	O
if	O
(	O
len	long
==	O
2	int
)	O
abfd	pointer
->	O
start_address	long
+=	O
HEX4	O
(	O
buf	pointer
)	O
<<	O
16	int
;	O
else	O
abfd	pointer
->	O
start_address	long
=	O
(	O
HEX4	O
(	O
buf	pointer
)	O
<<	O
16	int
)	O
+	O
HEX4	O
(	O
buf	pointer
+	O
4	int
)	O
;	O
sec	pointer
=	O
NULL	O
;	O
break	O
;	O
default	O
:	O
_bfd_error_handler	function
(	O
_	O
(	O
"%pB:%u: unrecognized ihex type %u in Intel Hex file"	pointer
)	O
,	O
abfd	pointer
,	O
lineno	pointer
,	O
type	enum
)	O
;	O
bfd_set_error	function
(	O
bfd_error_bad_value	int
)	O
;	O
goto	O
error_return	O
;	O
}	O
}	O
}	O
if	O
(	O
error	int
)	O
goto	O
error_return	O
;	O
if	O
(	O
buf	pointer
!=	O
NULL	O
)	O
free	function
(	O
buf	pointer
)	O
;	O
return	O
TRUE	int
;	O
error_return	O
:	O
if	O
(	O
buf	pointer
!=	O
NULL	O
)	O
free	function
(	O
buf	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
static	O
const	O
bfd_target	struct
*	O
ihex_object_p	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
void	O
*	O
tdata_save	pointer
;	O
bfd_byte	char
b	pointer
[	O
9	int
]	O
;	O
unsigned	O
int	O
i	pointer
;	O
unsigned	O
int	O
type	enum
;	O
ihex_init	function
(	O
)	O
;	O
if	O
(	O
bfd_seek	function
(	O
abfd	pointer
,	O
(	O
file_ptr	long
)	O
0	int
,	O
SEEK_SET	int
)	O
!=	O
0	int
)	O
return	O
NULL	O
;	O
if	O
(	O
bfd_bread	function
(	O
b	pointer
,	O
(	O
bfd_size_type	long
)	O
9	int
,	O
abfd	pointer
)	O
!=	O
9	int
)	O
{	O
if	O
(	O
bfd_get_error	function
(	O
)	O
==	O
bfd_error_file_truncated	int
)	O
bfd_set_error	function
(	O
bfd_error_wrong_format	int
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
b	pointer
[	O
0	int
]	O
!=	O
':'	O
)	O
{	O
bfd_set_error	function
(	O
bfd_error_wrong_format	int
)	O
;	O
return	O
NULL	O
;	O
}	O
for	O
(	O
i	pointer
=	O
1	int
;	O
i	pointer
<	O
9	int
;	O
i	pointer
++	O
)	O
{	O
if	O
(	O
!	O
ISHEX	O
(	O
b	pointer
[	O
i	pointer
]	O
)	O
)	O
{	O
bfd_set_error	function
(	O
bfd_error_wrong_format	int
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
type	enum
=	O
HEX2	O
(	O
b	pointer
+	O
7	int
)	O
;	O
if	O
(	O
type	enum
>	O
5	int
)	O
{	O
bfd_set_error	function
(	O
bfd_error_wrong_format	int
)	O
;	O
return	O
NULL	O
;	O
}	O
tdata_save	pointer
=	O
abfd	pointer
->	O
tdata	union
.	O
any	pointer
;	O
if	O
(	O
!	O
ihex_mkobject	function
(	O
abfd	pointer
)	O
||	O
!	O
ihex_scan	function
(	O
abfd	pointer
)	O
)	O
{	O
if	O
(	O
abfd	pointer
->	O
tdata	union
.	O
any	pointer
!=	O
tdata_save	pointer
&&	O
abfd	pointer
->	O
tdata	union
.	O
any	pointer
!=	O
NULL	O
)	O
bfd_release	function
(	O
abfd	pointer
,	O
abfd	pointer
->	O
tdata	union
.	O
any	pointer
)	O
;	O
abfd	pointer
->	O
tdata	union
.	O
any	pointer
=	O
tdata_save	pointer
;	O
return	O
NULL	O
;	O
}	O
return	O
abfd	pointer
->	O
xvec	pointer
;	O
}	O
static	O
bfd_boolean	int
ihex_read_section	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
asection	struct
*	O
section	pointer
,	O
bfd_byte	char
*	O
contents	pointer
)	O
{	O
int	O
c	char
;	O
bfd_byte	char
*	O
p	pointer
;	O
bfd_byte	char
*	O
buf	pointer
=	O
NULL	O
;	O
size_t	long
bufsize	long
;	O
bfd_boolean	int
error	int
;	O
if	O
(	O
bfd_seek	function
(	O
abfd	pointer
,	O
section	pointer
->	O
filepos	long
,	O
SEEK_SET	int
)	O
!=	O
0	int
)	O
goto	O
error_return	O
;	O
p	pointer
=	O
contents	pointer
;	O
bufsize	long
=	O
0	int
;	O
error	int
=	O
FALSE	int
;	O
while	O
(	O
(	O
c	char
=	O
ihex_get_byte	function
(	O
abfd	pointer
,	O
&	O
error	int
)	O
)	O
!=	O
EOF	O
)	O
{	O
unsigned	O
char	O
hdr	array
[	O
8	int
]	O
;	O
unsigned	O
int	O
len	long
;	O
unsigned	O
int	O
type	enum
;	O
unsigned	O
int	O
i	pointer
;	O
if	O
(	O
c	char
==	O
'\r'	O
||	O
c	char
==	O
'\n'	O
)	O
continue	O
;	O
BFD_ASSERT	O
(	O
c	char
==	O
':'	O
)	O
;	O
if	O
(	O
bfd_bread	function
(	O
hdr	array
,	O
(	O
bfd_size_type	long
)	O
8	int
,	O
abfd	pointer
)	O
!=	O
8	int
)	O
goto	O
error_return	O
;	O
len	long
=	O
HEX2	O
(	O
hdr	array
)	O
;	O
type	enum
=	O
HEX2	O
(	O
hdr	array
+	O
6	int
)	O
;	O
if	O
(	O
type	enum
!=	O
0	int
)	O
{	O
_bfd_error_handler	function
(	O
_	O
(	O
"%pB: internal error in ihex_read_section"	pointer
)	O
,	O
abfd	pointer
)	O
;	O
bfd_set_error	function
(	O
bfd_error_bad_value	int
)	O
;	O
goto	O
error_return	O
;	O
}	O
if	O
(	O
len	long
*	O
2	int
>	O
bufsize	long
)	O
{	O
buf	pointer
=	O
(	O
bfd_byte	char
*	O
)	O
bfd_realloc	function
(	O
buf	pointer
,	O
(	O
bfd_size_type	long
)	O
len	long
*	O
2	int
)	O
;	O
if	O
(	O
buf	pointer
==	O
NULL	O
)	O
goto	O
error_return	O
;	O
bufsize	long
=	O
len	long
*	O
2	int
;	O
}	O
if	O
(	O
bfd_bread	function
(	O
buf	pointer
,	O
(	O
bfd_size_type	long
)	O
len	long
*	O
2	int
,	O
abfd	pointer
)	O
!=	O
len	long
*	O
2	int
)	O
goto	O
error_return	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
len	long
;	O
i	pointer
++	O
)	O
*	O
p	pointer
++	O
=	O
HEX2	O
(	O
buf	pointer
+	O
2	int
*	O
i	pointer
)	O
;	O
if	O
(	O
(	O
bfd_size_type	long
)	O
(	O
p	pointer
-	O
contents	pointer
)	O
>=	O
section	pointer
->	O
size	long
)	O
{	O
if	O
(	O
buf	pointer
!=	O
NULL	O
)	O
free	function
(	O
buf	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
if	O
(	O
bfd_bread	function
(	O
buf	pointer
,	O
(	O
bfd_size_type	long
)	O
2	int
,	O
abfd	pointer
)	O
!=	O
2	int
)	O
goto	O
error_return	O
;	O
}	O
if	O
(	O
(	O
bfd_size_type	long
)	O
(	O
p	pointer
-	O
contents	pointer
)	O
<	O
section	pointer
->	O
size	long
)	O
{	O
_bfd_error_handler	function
(	O
_	O
(	O
"%pB: bad section length in ihex_read_section"	pointer
)	O
,	O
abfd	pointer
)	O
;	O
bfd_set_error	function
(	O
bfd_error_bad_value	int
)	O
;	O
goto	O
error_return	O
;	O
}	O
if	O
(	O
buf	pointer
!=	O
NULL	O
)	O
free	function
(	O
buf	pointer
)	O
;	O
return	O
TRUE	int
;	O
error_return	O
:	O
if	O
(	O
buf	pointer
!=	O
NULL	O
)	O
free	function
(	O
buf	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
static	O
bfd_boolean	int
ihex_get_section_contents	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
asection	struct
*	O
section	pointer
,	O
void	O
*	O
location	pointer
,	O
file_ptr	long
offset	long
,	O
bfd_size_type	long
count	int
)	O
{	O
if	O
(	O
section	pointer
->	O
used_by_bfd	pointer
==	O
NULL	O
)	O
{	O
section	pointer
->	O
used_by_bfd	pointer
=	O
bfd_alloc	function
(	O
abfd	pointer
,	O
section	pointer
->	O
size	long
)	O
;	O
if	O
(	O
section	pointer
->	O
used_by_bfd	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
!	O
ihex_read_section	function
(	O
abfd	pointer
,	O
section	pointer
,	O
(	O
bfd_byte	char
*	O
)	O
section	pointer
->	O
used_by_bfd	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
memcpy	function
(	O
location	pointer
,	O
(	O
bfd_byte	char
*	O
)	O
section	pointer
->	O
used_by_bfd	pointer
+	O
offset	long
,	O
(	O
size_t	long
)	O
count	int
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
ihex_set_section_contents	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
asection	struct
*	O
section	pointer
,	O
const	O
void	O
*	O
location	pointer
,	O
file_ptr	long
offset	long
,	O
bfd_size_type	long
count	int
)	O
{	O
struct	O
ihex_data_list	struct
*	O
n	long
;	O
bfd_byte	char
*	O
data	pointer
;	O
struct	O
ihex_data_struct	struct
*	O
tdata	union
;	O
if	O
(	O
count	int
==	O
0	int
||	O
(	O
section	pointer
->	O
flags	int
&	O
SEC_ALLOC	int
)	O
==	O
0	int
||	O
(	O
section	pointer
->	O
flags	int
&	O
SEC_LOAD	int
)	O
==	O
0	int
)	O
return	O
TRUE	int
;	O
n	long
=	O
(	O
struct	O
ihex_data_list	struct
*	O
)	O
bfd_alloc	function
(	O
abfd	pointer
,	O
sizeof	O
(	O
*	O
n	long
)	O
)	O
;	O
if	O
(	O
n	long
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
data	pointer
=	O
(	O
bfd_byte	char
*	O
)	O
bfd_alloc	function
(	O
abfd	pointer
,	O
count	int
)	O
;	O
if	O
(	O
data	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
memcpy	function
(	O
data	pointer
,	O
location	pointer
,	O
(	O
size_t	long
)	O
count	int
)	O
;	O
n	long
->	O
data	pointer
=	O
data	pointer
;	O
n	long
->	O
where	long
=	O
section	pointer
->	O
lma	long
+	O
offset	long
;	O
n	long
->	O
size	long
=	O
count	int
;	O
tdata	union
=	O
abfd	pointer
->	O
tdata	union
.	O
ihex_data	pointer
;	O
if	O
(	O
tdata	union
->	O
tail	pointer
!=	O
NULL	O
&&	O
n	long
->	O
where	long
>=	O
tdata	union
->	O
tail	pointer
->	O
where	long
)	O
{	O
tdata	union
->	O
tail	pointer
->	O
next	pointer
=	O
n	long
;	O
n	long
->	O
next	pointer
=	O
NULL	O
;	O
tdata	union
->	O
tail	pointer
=	O
n	long
;	O
}	O
else	O
{	O
struct	O
ihex_data_list	struct
*	O
*	O
pp	pointer
;	O
for	O
(	O
pp	pointer
=	O
&	O
tdata	union
->	O
head	pointer
;	O
*	O
pp	pointer
!=	O
NULL	O
&&	O
(	O
*	O
pp	pointer
)	O
->	O
where	long
<	O
n	long
->	O
where	long
;	O
pp	pointer
=	O
&	O
(	O
*	O
pp	pointer
)	O
->	O
next	pointer
)	O
;	O
n	long
->	O
next	pointer
=	O
*	O
pp	pointer
;	O
*	O
pp	pointer
=	O
n	long
;	O
if	O
(	O
n	long
->	O
next	pointer
==	O
NULL	O
)	O
tdata	union
->	O
tail	pointer
=	O
n	long
;	O
}	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
ihex_write_record	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
size_t	long
count	int
,	O
unsigned	O
int	O
addr	pointer
,	O
unsigned	O
int	O
type	enum
,	O
bfd_byte	char
*	O
data	pointer
)	O
{	O
static	O
const	O
char	O
digs	array
[	O
]	O
=	O
"0123456789ABCDEF"	pointer
;	O
char	O
buf	pointer
[	O
9	int
+	O
CHUNK	int
*	O
2	int
+	O
4	int
]	O
;	O
char	O
*	O
p	pointer
;	O
unsigned	O
int	O
chksum	int
;	O
unsigned	O
int	O
i	pointer
;	O
size_t	long
total	long
;	O
buf	pointer
[	O
0	int
]	O
=	O
':'	O
;	O
TOHEX	O
(	O
buf	pointer
+	O
1	int
,	O
count	int
)	O
;	O
TOHEX	O
(	O
buf	pointer
+	O
3	int
,	O
(	O
addr	pointer
>>	O
8	int
)	O
&	O
0xff	int
)	O
;	O
TOHEX	O
(	O
buf	pointer
+	O
5	int
,	O
addr	pointer
&	O
0xff	int
)	O
;	O
TOHEX	O
(	O
buf	pointer
+	O
7	int
,	O
type	enum
)	O
;	O
chksum	int
=	O
count	int
+	O
addr	pointer
+	O
(	O
addr	pointer
>>	O
8	int
)	O
+	O
type	enum
;	O
for	O
(	O
i	pointer
=	O
0	int
,	O
p	pointer
=	O
buf	pointer
+	O
9	int
;	O
i	pointer
<	O
count	int
;	O
i	pointer
++	O
,	O
p	pointer
+=	O
2	int
,	O
data	pointer
++	O
)	O
{	O
TOHEX	O
(	O
p	pointer
,	O
*	O
data	pointer
)	O
;	O
chksum	int
+=	O
*	O
data	pointer
;	O
}	O
TOHEX	O
(	O
p	pointer
,	O
(	O
-	O
chksum	int
)	O
&	O
0xff	int
)	O
;	O
p	pointer
[	O
2	int
]	O
=	O
'\r'	O
;	O
p	pointer
[	O
3	int
]	O
=	O
'\n'	O
;	O
total	long
=	O
9	int
+	O
count	int
*	O
2	int
+	O
4	int
;	O
if	O
(	O
bfd_bwrite	function
(	O
buf	pointer
,	O
(	O
bfd_size_type	long
)	O
total	long
,	O
abfd	pointer
)	O
!=	O
total	long
)	O
return	O
FALSE	int
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
ihex_write_object_contents	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
bfd_vma	long
segbase	long
;	O
bfd_vma	long
extbase	long
;	O
struct	O
ihex_data_list	struct
*	O
l	pointer
;	O
segbase	long
=	O
0	int
;	O
extbase	long
=	O
0	int
;	O
for	O
(	O
l	pointer
=	O
abfd	pointer
->	O
tdata	union
.	O
ihex_data	pointer
->	O
head	pointer
;	O
l	pointer
!=	O
NULL	O
;	O
l	pointer
=	O
l	pointer
->	O
next	pointer
)	O
{	O
bfd_vma	long
where	long
;	O
bfd_byte	char
*	O
p	pointer
;	O
bfd_size_type	long
count	int
;	O
where	long
=	O
l	pointer
->	O
where	long
;	O
if	O
(	O
where	long
>	O
0xffffffff	int
&&	O
where	long
+	O
0x80000000	int
>	O
0xffffffff	int
)	O
{	O
_bfd_error_handler	function
(	O
_	O
(	O
"%pB 64-bit address %#"	pointer
PRIx64	O
" out of range for Intel Hex file"	pointer
)	O
,	O
abfd	pointer
,	O
(	O
uint64_t	long
)	O
where	long
)	O
;	O
bfd_set_error	function
(	O
bfd_error_bad_value	int
)	O
;	O
return	O
FALSE	int
;	O
}	O
where	long
&=	O
0xffffffff	int
;	O
p	pointer
=	O
l	pointer
->	O
data	pointer
;	O
count	int
=	O
l	pointer
->	O
size	long
;	O
while	O
(	O
count	int
>	O
0	int
)	O
{	O
size_t	long
now	long
;	O
unsigned	O
int	O
rec_addr	int
;	O
now	long
=	O
count	int
;	O
if	O
(	O
count	int
>	O
CHUNK	int
)	O
now	long
=	O
CHUNK	int
;	O
if	O
(	O
where	long
>	O
segbase	long
+	O
extbase	long
+	O
0xffff	int
)	O
{	O
bfd_byte	char
addr	pointer
[	O
2	int
]	O
;	O
if	O
(	O
where	long
<=	O
0xfffff	int
)	O
{	O
BFD_ASSERT	O
(	O
extbase	long
==	O
0	int
)	O
;	O
segbase	long
=	O
where	long
&	O
0xf0000	int
;	O
addr	pointer
[	O
0	int
]	O
=	O
(	O
bfd_byte	char
)	O
(	O
segbase	long
>>	O
12	int
)	O
&	O
0xff	int
;	O
addr	pointer
[	O
1	int
]	O
=	O
(	O
bfd_byte	char
)	O
(	O
segbase	long
>>	O
4	int
)	O
&	O
0xff	int
;	O
if	O
(	O
!	O
ihex_write_record	function
(	O
abfd	pointer
,	O
2	int
,	O
0	int
,	O
2	int
,	O
addr	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
else	O
{	O
if	O
(	O
segbase	long
!=	O
0	int
)	O
{	O
addr	pointer
[	O
0	int
]	O
=	O
0	int
;	O
addr	pointer
[	O
1	int
]	O
=	O
0	int
;	O
if	O
(	O
!	O
ihex_write_record	function
(	O
abfd	pointer
,	O
2	int
,	O
0	int
,	O
2	int
,	O
addr	pointer
)	O
)	O
return	O
FALSE	int
;	O
segbase	long
=	O
0	int
;	O
}	O
extbase	long
=	O
where	long
&	O
0xffff0000	int
;	O
if	O
(	O
where	long
>	O
extbase	long
+	O
0xffff	int
)	O
{	O
_bfd_error_handler	function
(	O
_	O
(	O
"%pB: address %#"	pointer
PRIx64	O
" out of range for Intel Hex file"	pointer
)	O
,	O
abfd	pointer
,	O
(	O
uint64_t	long
)	O
where	long
)	O
;	O
bfd_set_error	function
(	O
bfd_error_bad_value	int
)	O
;	O
return	O
FALSE	int
;	O
}	O
addr	pointer
[	O
0	int
]	O
=	O
(	O
bfd_byte	char
)	O
(	O
extbase	long
>>	O
24	int
)	O
&	O
0xff	int
;	O
addr	pointer
[	O
1	int
]	O
=	O
(	O
bfd_byte	char
)	O
(	O
extbase	long
>>	O
16	int
)	O
&	O
0xff	int
;	O
if	O
(	O
!	O
ihex_write_record	function
(	O
abfd	pointer
,	O
2	int
,	O
0	int
,	O
4	int
,	O
addr	pointer
)	O
)	O
return	O
FALSE	int
;	O
}	O
}	O
rec_addr	int
=	O
where	long
-	O
(	O
extbase	long
+	O
segbase	long
)	O
;	O
if	O
(	O
rec_addr	int
+	O
now	long
>	O
0xffff	int
)	O
now	long
=	O
0x10000	int
-	O
rec_addr	int
;	O
if	O
(	O
!	O
ihex_write_record	function
(	O
abfd	pointer
,	O
now	long
,	O
rec_addr	int
,	O
0	int
,	O
p	pointer
)	O
)	O
return	O
FALSE	int
;	O
where	long
+=	O
now	long
;	O
p	pointer
+=	O
now	long
;	O
count	int
-=	O
now	long
;	O
}	O
}	O
if	O
(	O
abfd	pointer
->	O
start_address	long
!=	O
0	int
)	O
{	O
bfd_vma	long
start	long
;	O
bfd_byte	char
startbuf	array
[	O
4	int
]	O
;	O
start	long
=	O
abfd	pointer
->	O
start_address	long
;	O
if	O
(	O
start	long
<=	O
0xfffff	int
)	O
{	O
startbuf	array
[	O
0	int
]	O
=	O
(	O
bfd_byte	char
)	O
(	O
(	O
start	long
&	O
0xf0000	int
)	O
>>	O
12	int
)	O
&	O
0xff	int
;	O
startbuf	array
[	O
1	int
]	O
=	O
0	int
;	O
startbuf	array
[	O
2	int
]	O
=	O
(	O
bfd_byte	char
)	O
(	O
start	long
>>	O
8	int
)	O
&	O
0xff	int
;	O
startbuf	array
[	O
3	int
]	O
=	O
(	O
bfd_byte	char
)	O
start	long
&	O
0xff	int
;	O
if	O
(	O
!	O
ihex_write_record	function
(	O
abfd	pointer
,	O
4	int
,	O
0	int
,	O
3	int
,	O
startbuf	array
)	O
)	O
return	O
FALSE	int
;	O
}	O
else	O
{	O
startbuf	array
[	O
0	int
]	O
=	O
(	O
bfd_byte	char
)	O
(	O
start	long
>>	O
24	int
)	O
&	O
0xff	int
;	O
startbuf	array
[	O
1	int
]	O
=	O
(	O
bfd_byte	char
)	O
(	O
start	long
>>	O
16	int
)	O
&	O
0xff	int
;	O
startbuf	array
[	O
2	int
]	O
=	O
(	O
bfd_byte	char
)	O
(	O
start	long
>>	O
8	int
)	O
&	O
0xff	int
;	O
startbuf	array
[	O
3	int
]	O
=	O
(	O
bfd_byte	char
)	O
start	long
&	O
0xff	int
;	O
if	O
(	O
!	O
ihex_write_record	function
(	O
abfd	pointer
,	O
4	int
,	O
0	int
,	O
5	int
,	O
startbuf	array
)	O
)	O
return	O
FALSE	int
;	O
}	O
}	O
if	O
(	O
!	O
ihex_write_record	function
(	O
abfd	pointer
,	O
0	int
,	O
0	int
,	O
1	int
,	O
NULL	O
)	O
)	O
return	O
FALSE	int
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
ihex_set_arch_mach	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
enum	O
bfd_architecture	enum
arch	enum
,	O
unsigned	O
long	O
mach	long
)	O
{	O
if	O
(	O
!	O
bfd_default_set_arch_mach	function
(	O
abfd	pointer
,	O
arch	enum
,	O
mach	long
)	O
)	O
{	O
if	O
(	O
arch	enum
!=	O
bfd_arch_unknown	int
)	O
return	O
FALSE	int
;	O
}	O
return	O
TRUE	int
;	O
}	O
static	O
int	O
ihex_sizeof_headers	function
(	O
bfd	struct
*	O
abfd	pointer
ATTRIBUTE_UNUSED	O
,	O
struct	O
bfd_link_info	O
*	O
info	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
0	int
;	O
}	O
const	O
bfd_target	struct
ihex_vec	struct
=	O
{	O
"ihex"	pointer
,	O
bfd_target_ihex_flavour	int
,	O
BFD_ENDIAN_UNKNOWN	int
,	O
BFD_ENDIAN_UNKNOWN	int
,	O
0	int
,	O
(	O
SEC_HAS_CONTENTS	int
|	O
SEC_ALLOC	int
|	O
SEC_LOAD	int
)	O
,	O
0	int
,	O
' '	O
,	O
16	int
,	O
0	int
,	O
bfd_getb64	function
,	O
bfd_getb_signed_64	function
,	O
bfd_putb64	function
,	O
bfd_getb32	function
,	O
bfd_getb_signed_32	function
,	O
bfd_putb32	function
,	O
bfd_getb16	function
,	O
bfd_getb_signed_16	function
,	O
bfd_putb16	function
,	O
bfd_getb64	function
,	O
bfd_getb_signed_64	function
,	O
bfd_putb64	function
,	O
bfd_getb32	function
,	O
bfd_getb_signed_32	function
,	O
bfd_putb32	function
,	O
bfd_getb16	function
,	O
bfd_getb_signed_16	function
,	O
bfd_putb16	function
,	O
{	O
_bfd_dummy_target	function
,	O
ihex_object_p	function
,	O
_bfd_dummy_target	function
,	O
_bfd_dummy_target	function
,	O
}	O
,	O
{	O
_bfd_bool_bfd_false_error	function
,	O
ihex_mkobject	function
,	O
_bfd_generic_mkarchive	function
,	O
_bfd_bool_bfd_false_error	function
,	O
}	O
,	O
{	O
_bfd_bool_bfd_false_error	function
,	O
ihex_write_object_contents	function
,	O
_bfd_write_archive_contents	function
,	O
_bfd_bool_bfd_false_error	function
,	O
}	O
,	O
BFD_JUMP_TABLE_GENERIC	O
(	O
ihex	O
)	O
,	O
BFD_JUMP_TABLE_COPY	O
(	O
_bfd_generic	O
)	O
,	O
BFD_JUMP_TABLE_CORE	O
(	O
_bfd_nocore	O
)	O
,	O
BFD_JUMP_TABLE_ARCHIVE	O
(	O
_bfd_noarchive	O
)	O
,	O
BFD_JUMP_TABLE_SYMBOLS	O
(	O
ihex	O
)	O
,	O
BFD_JUMP_TABLE_RELOCS	O
(	O
_bfd_norelocs	O
)	O
,	O
BFD_JUMP_TABLE_WRITE	O
(	O
ihex	O
)	O
,	O
BFD_JUMP_TABLE_LINK	O
(	O
ihex	O
)	O
,	O
BFD_JUMP_TABLE_DYNAMIC	O
(	O
_bfd_nodynamic	O
)	O
,	O
NULL	O
,	O
NULL	O
}	O
;	O
