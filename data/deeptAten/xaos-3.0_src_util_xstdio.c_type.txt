xio_path	pointer
xio_getdirectory	function
(	O
xio_path	pointer
filename	pointer
)	O
{	O
int	O
i	pointer
;	O
xio_pathdata	array
directory	pointer
;	O
for	O
(	O
i	pointer
=	O
strlen	function
(	O
filename	pointer
)	O
;	O
i	pointer
&&	O
filename	pointer
[	O
i	pointer
]	O
!=	O
'/'	O
&&	O
filename	pointer
[	O
i	pointer
]	O
!=	O
'\\'	O
;	O
i	pointer
--	O
)	O
;	O
if	O
(	O
filename	pointer
[	O
i	pointer
]	O
==	O
'/'	O
||	O
filename	pointer
[	O
i	pointer
]	O
==	O
'\\'	O
)	O
i	pointer
++	O
;	O
directory	pointer
[	O
i	pointer
]	O
=	O
0	int
;	O
i	pointer
--	O
;	O
for	O
(	O
;	O
i	pointer
>=	O
0	int
;	O
i	pointer
--	O
)	O
directory	pointer
[	O
i	pointer
]	O
=	O
filename	pointer
[	O
i	pointer
]	O
;	O
return	O
(	O
strdup	function
(	O
directory	pointer
)	O
)	O
;	O
}	O
xio_path	pointer
xio_getfilename	function
(	O
char	O
*	O
basename	pointer
,	O
char	O
*	O
extension	pointer
)	O
{	O
static	O
char	O
name	pointer
[	O
40	int
]	O
;	O
int	O
nimage	int
=	O
0	int
;	O
struct	O
stat	struct
sb	struct
;	O
do	O
{	O
sprintf	function
(	O
name	pointer
,	O
"%s%i%s"	pointer
,	O
basename	pointer
,	O
nimage	int
++	O
,	O
extension	pointer
)	O
;	O
}	O
while	O
(	O
stat	struct
(	O
name	pointer
,	O
&	O
sb	struct
)	O
!=	O
-	O
1	int
)	O
;	O
return	O
(	O
name	pointer
)	O
;	O
}	O
xio_file	pointer
xio_getrandomexample	function
(	O
xio_path	pointer
name	pointer
)	O
{	O
static	O
char	O
*	O
paths	array
[	O
]	O
=	O
{	O
EXAMPLESPATH	O
,	O
"./examples/"	pointer
,	O
"../examples/"	pointer
,	O
"./"	pointer
,	O
}	O
;	O
int	O
i	pointer
,	O
p	int
;	O
DIR	struct
*	O
d	pointer
=	O
NULL	O
;	O
xio_file	pointer
f	pointer
;	O
struct	O
dirent	struct
*	O
dir	pointer
;	O
int	O
n	int
;	O
int	O
max	int
;	O
for	O
(	O
p	int
=	O
0	int
;	O
p	int
<	O
(	O
int	O
)	O
(	O
sizeof	O
(	O
paths	array
)	O
/	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
&&	O
d	pointer
==	O
NULL	O
;	O
p	int
++	O
)	O
{	O
d	pointer
=	O
opendir	function
(	O
paths	array
[	O
p	int
]	O
)	O
;	O
if	O
(	O
d	pointer
!=	O
NULL	O
)	O
break	O
;	O
}	O
if	O
(	O
d	pointer
==	O
NULL	O
)	O
{	O
return	O
NULL	O
;	O
}	O
max	int
=	O
800	int
-	O
strlen	function
(	O
paths	array
[	O
p	int
]	O
)	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
(	O
dir	pointer
=	O
readdir	function
(	O
d	pointer
)	O
)	O
!=	O
NULL	O
;	O
i	pointer
++	O
)	O
{	O
int	O
s	struct
=	O
strlen	function
(	O
dir	pointer
->	O
d_name	array
)	O
;	O
if	O
(	O
s	struct
>	O
max	int
||	O
s	struct
<	O
4	int
||	O
strcmp	function
(	O
".xpf"	pointer
,	O
dir	pointer
->	O
d_name	array
+	O
s	struct
-	O
4	int
)	O
)	O
i	pointer
--	O
;	O
}	O
if	O
(	O
!	O
i	pointer
)	O
{	O
closedir	function
(	O
d	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
rewinddir	function
(	O
d	pointer
)	O
;	O
dir	pointer
=	O
NULL	O
;	O
n	int
=	O
(	O
(	O
number_t	double
)	O
i	pointer
*	O
rand	function
(	O
)	O
/	O
(	O
RAND_MAX	int
+	O
1.0	int
)	O
)	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<=	O
n	int
;	O
i	pointer
++	O
)	O
{	O
int	O
s	struct
;	O
do	O
{	O
dir	pointer
=	O
readdir	function
(	O
d	pointer
)	O
;	O
if	O
(	O
dir	pointer
==	O
NULL	O
)	O
{	O
closedir	function
(	O
d	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
s	struct
=	O
strlen	function
(	O
dir	pointer
->	O
d_name	array
)	O
;	O
}	O
while	O
(	O
s	struct
>	O
max	int
||	O
s	struct
<	O
4	int
||	O
strcmp	function
(	O
".xpf"	pointer
,	O
dir	pointer
->	O
d_name	array
+	O
s	struct
-	O
4	int
)	O
)	O
;	O
}	O
if	O
(	O
dir	pointer
==	O
NULL	O
)	O
{	O
closedir	function
(	O
d	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
strcpy	function
(	O
name	pointer
,	O
paths	array
[	O
p	int
]	O
)	O
;	O
strcat	function
(	O
name	pointer
,	O
dir	pointer
->	O
d_name	array
)	O
;	O
closedir	function
(	O
d	pointer
)	O
;	O
f	pointer
=	O
fopen	function
(	O
name	pointer
,	O
"r"	pointer
)	O
;	O
return	O
(	O
f	pointer
)	O
;	O
}	O
xio_file	pointer
xio_getcatalog	function
(	O
char	O
*	O
name	pointer
)	O
{	O
static	O
xio_path	pointer
paths	array
[	O
]	O
=	O
{	O
CATALOGSPATH	O
,	O
"./catalogs/"	pointer
,	O
"../catalogs/"	pointer
,	O
"./"	pointer
,	O
}	O
;	O
int	O
i	pointer
;	O
xio_file	pointer
f	pointer
=	O
XIO_FAILED	O
;	O
xio_pathdata	array
tmp	array
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
(	O
int	O
)	O
(	O
sizeof	O
(	O
paths	array
)	O
/	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
&&	O
f	pointer
==	O
XIO_FAILED	O
;	O
i	pointer
++	O
)	O
{	O
xio_addfname	O
(	O
tmp	array
,	O
paths	array
[	O
i	pointer
]	O
,	O
name	pointer
)	O
;	O
f	pointer
=	O
xio_ropen	O
(	O
tmp	array
)	O
;	O
if	O
(	O
f	pointer
==	O
XIO_FAILED	O
)	O
{	O
xio_addextension	O
(	O
tmp	array
,	O
".cat"	pointer
)	O
;	O
f	pointer
=	O
xio_ropen	O
(	O
tmp	array
)	O
;	O
}	O
}	O
return	O
(	O
f	pointer
)	O
;	O
}	O
xio_file	pointer
xio_gettutorial	function
(	O
char	O
*	O
name	pointer
,	O
xio_path	pointer
tmp	array
)	O
{	O
int	O
i	pointer
;	O
xio_file	pointer
f	pointer
=	O
XIO_FAILED	O
;	O
static	O
xio_path	pointer
paths	array
[	O
]	O
=	O
{	O
TUTORIALPATH	O
,	O
"./"	pointer
,	O
"./tutorial/"	pointer
,	O
"../tutorial/"	pointer
,	O
}	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
(	O
int	O
)	O
(	O
sizeof	O
(	O
paths	array
)	O
/	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
&&	O
f	pointer
==	O
XIO_FAILED	O
;	O
i	pointer
++	O
)	O
{	O
xio_addfname	O
(	O
tmp	array
,	O
paths	array
[	O
i	pointer
]	O
,	O
name	pointer
)	O
;	O
f	pointer
=	O
xio_ropen	O
(	O
tmp	array
)	O
;	O
}	O
return	O
(	O
f	pointer
)	O
;	O
}	O
