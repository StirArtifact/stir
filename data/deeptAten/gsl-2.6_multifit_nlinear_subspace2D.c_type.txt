typedef	O
struct	O
{	O
size_t	long
n	int
;	O
size_t	long
p	int
;	O
gsl_vector	struct
*	O
dx_gn	pointer
;	O
gsl_vector	struct
*	O
dx_sd	pointer
;	O
double	O
norm_Dgn	double
;	O
double	O
norm_Dsd	double
;	O
gsl_vector	struct
*	O
workp	pointer
;	O
gsl_vector	struct
*	O
workn	pointer
;	O
gsl_matrix	struct
*	O
W	pointer
;	O
gsl_matrix	struct
*	O
JQ	pointer
;	O
gsl_vector	struct
*	O
tau	double
;	O
gsl_vector	struct
*	O
subg	pointer
;	O
gsl_matrix	struct
*	O
subB	pointer
;	O
gsl_permutation	struct
*	O
perm	pointer
;	O
double	O
trB	double
;	O
double	O
detB	double
;	O
double	O
normg	double
;	O
double	O
term0	double
;	O
double	O
term1	double
;	O
size_t	long
rank	long
;	O
gsl_poly_complex_workspace	struct
*	O
poly_p	pointer
;	O
gsl_multifit_nlinear_parameters	struct
params	pointer
;	O
}	O
subspace2D_state_t	struct
;	O
static	O
void	O
*	O
subspace2D_alloc	function
(	O
const	O
void	O
*	O
params	pointer
,	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
p	int
)	O
;	O
static	O
void	O
subspace2D_free	function
(	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
subspace2D_init	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
subspace2D_preloop	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
subspace2D_step	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
const	O
double	O
delta	double
,	O
gsl_vector	struct
*	O
dx	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
subspace2D_preduction	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
const	O
gsl_vector	struct
*	O
dx	pointer
,	O
double	O
*	O
pred	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
subspace2D_solution	function
(	O
const	O
double	O
lambda	double
,	O
gsl_vector	struct
*	O
x	double
,	O
subspace2D_state_t	struct
*	O
state	pointer
)	O
;	O
static	O
double	O
subspace2D_objective	function
(	O
const	O
gsl_vector	struct
*	O
x	double
,	O
subspace2D_state_t	struct
*	O
state	pointer
)	O
;	O
static	O
int	O
subspace2D_calc_gn	function
(	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
trust_state	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
)	O
;	O
static	O
int	O
subspace2D_calc_sd	function
(	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
trust_state	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
,	O
subspace2D_state_t	struct
*	O
state	pointer
)	O
;	O
static	O
void	O
*	O
subspace2D_alloc	function
(	O
const	O
void	O
*	O
params	pointer
,	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
p	int
)	O
{	O
const	O
gsl_multifit_nlinear_parameters	struct
*	O
par	pointer
=	O
(	O
const	O
gsl_multifit_nlinear_parameters	struct
*	O
)	O
params	pointer
;	O
subspace2D_state_t	struct
*	O
state	pointer
;	O
state	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
subspace2D_state_t	struct
)	O
)	O
;	O
if	O
(	O
state	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate subspace2D state"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
dx_gn	pointer
=	O
gsl_vector_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
dx_gn	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for dx_gn"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
dx_sd	pointer
=	O
gsl_vector_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
dx_sd	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for dx_sd"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
workp	pointer
=	O
gsl_vector_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
workp	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workp"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
workn	pointer
=	O
gsl_vector_alloc	function
(	O
n	int
)	O
;	O
if	O
(	O
state	pointer
->	O
workn	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workn"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
W	pointer
=	O
gsl_matrix_alloc	function
(	O
p	int
,	O
2	int
)	O
;	O
if	O
(	O
state	pointer
->	O
W	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for W"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
JQ	pointer
=	O
gsl_matrix_alloc	function
(	O
n	int
,	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
JQ	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for JQ"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
tau	double
=	O
gsl_vector_alloc	function
(	O
2	int
)	O
;	O
if	O
(	O
state	pointer
->	O
tau	double
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for tau"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
subg	pointer
=	O
gsl_vector_alloc	function
(	O
2	int
)	O
;	O
if	O
(	O
state	pointer
->	O
subg	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for subg"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
subB	pointer
=	O
gsl_matrix_alloc	function
(	O
2	int
,	O
2	int
)	O
;	O
if	O
(	O
state	pointer
->	O
subB	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for subB"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
perm	pointer
=	O
gsl_permutation_alloc	function
(	O
2	int
)	O
;	O
if	O
(	O
state	pointer
->	O
perm	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for perm"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
poly_p	pointer
=	O
gsl_poly_complex_workspace_alloc	function
(	O
5	int
)	O
;	O
if	O
(	O
state	pointer
->	O
poly_p	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for poly workspace"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
n	int
=	O
n	int
;	O
state	pointer
->	O
p	int
=	O
p	int
;	O
state	pointer
->	O
rank	long
=	O
0	int
;	O
state	pointer
->	O
params	pointer
=	O
*	O
par	pointer
;	O
return	O
state	pointer
;	O
}	O
static	O
void	O
subspace2D_free	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
subspace2D_state_t	struct
*	O
state	pointer
=	O
(	O
subspace2D_state_t	struct
*	O
)	O
vstate	pointer
;	O
if	O
(	O
state	pointer
->	O
dx_gn	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
dx_gn	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
dx_sd	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
dx_sd	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
workp	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
workp	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
workn	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
workn	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
W	pointer
)	O
gsl_matrix_free	function
(	O
state	pointer
->	O
W	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
JQ	pointer
)	O
gsl_matrix_free	function
(	O
state	pointer
->	O
JQ	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
tau	double
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
tau	double
)	O
;	O
if	O
(	O
state	pointer
->	O
subg	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
subg	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
subB	pointer
)	O
gsl_matrix_free	function
(	O
state	pointer
->	O
subB	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
perm	pointer
)	O
gsl_permutation_free	function
(	O
state	pointer
->	O
perm	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
poly_p	pointer
)	O
gsl_poly_complex_workspace_free	function
(	O
state	pointer
->	O
poly_p	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
}	O
static	O
int	O
subspace2D_init	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
(	O
void	O
)	O
vtrust_state	pointer
;	O
(	O
void	O
)	O
vstate	pointer
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
subspace2D_preloop	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
int	O
status	int
;	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
trust_state	pointer
=	O
(	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
)	O
vtrust_state	pointer
;	O
subspace2D_state_t	struct
*	O
state	pointer
=	O
(	O
subspace2D_state_t	struct
*	O
)	O
vstate	pointer
;	O
gsl_vector_view	struct
v	pointer
;	O
double	O
work_data	array
[	O
2	int
]	O
;	O
gsl_vector_view	struct
work	pointer
=	O
gsl_vector_view_array	function
(	O
work_data	array
,	O
2	int
)	O
;	O
int	O
signum	pointer
;	O
status	int
=	O
subspace2D_calc_gn	function
(	O
trust_state	pointer
,	O
state	pointer
->	O
dx_gn	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
subspace2D_calc_sd	function
(	O
trust_state	pointer
,	O
state	pointer
->	O
dx_sd	pointer
,	O
state	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
state	pointer
->	O
norm_Dgn	double
=	O
scaled_enorm	function
(	O
trust_state	pointer
->	O
diag	pointer
,	O
state	pointer
->	O
dx_gn	pointer
)	O
;	O
state	pointer
->	O
norm_Dsd	double
=	O
scaled_enorm	function
(	O
trust_state	pointer
->	O
diag	pointer
,	O
state	pointer
->	O
dx_sd	pointer
)	O
;	O
v	pointer
=	O
gsl_matrix_column	function
(	O
state	pointer
->	O
W	pointer
,	O
0	int
)	O
;	O
gsl_vector_memcpy	function
(	O
&	O
v	pointer
.	O
vector	struct
,	O
state	pointer
->	O
dx_sd	pointer
)	O
;	O
gsl_vector_mul	function
(	O
&	O
v	pointer
.	O
vector	struct
,	O
trust_state	pointer
->	O
diag	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
norm_Dsd	double
!=	O
0	int
)	O
gsl_vector_scale	function
(	O
&	O
v	pointer
.	O
vector	struct
,	O
1.0	int
/	O
state	pointer
->	O
norm_Dsd	double
)	O
;	O
v	pointer
=	O
gsl_matrix_column	function
(	O
state	pointer
->	O
W	pointer
,	O
1	int
)	O
;	O
gsl_vector_memcpy	function
(	O
&	O
v	pointer
.	O
vector	struct
,	O
state	pointer
->	O
dx_gn	pointer
)	O
;	O
gsl_vector_mul	function
(	O
&	O
v	pointer
.	O
vector	struct
,	O
trust_state	pointer
->	O
diag	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
norm_Dgn	double
!=	O
0	int
)	O
gsl_vector_scale	function
(	O
&	O
v	pointer
.	O
vector	struct
,	O
1.0	int
/	O
state	pointer
->	O
norm_Dgn	double
)	O
;	O
gsl_linalg_QRPT_decomp	function
(	O
state	pointer
->	O
W	pointer
,	O
state	pointer
->	O
tau	double
,	O
state	pointer
->	O
perm	pointer
,	O
&	O
signum	pointer
,	O
&	O
work	pointer
.	O
vector	struct
)	O
;	O
state	pointer
->	O
rank	long
=	O
gsl_linalg_QRPT_rank	function
(	O
state	pointer
->	O
W	pointer
,	O
-	O
1.0	int
)	O
;	O
if	O
(	O
state	pointer
->	O
rank	long
==	O
2	int
)	O
{	O
const	O
size_t	long
p	int
=	O
state	pointer
->	O
p	int
;	O
size_t	long
i	long
;	O
gsl_matrix_view	struct
JQ	pointer
=	O
gsl_matrix_submatrix	function
(	O
state	pointer
->	O
JQ	pointer
,	O
0	int
,	O
0	int
,	O
state	pointer
->	O
n	int
,	O
GSL_MIN	O
(	O
2	int
,	O
p	int
)	O
)	O
;	O
double	O
B00	double
,	O
B10	double
,	O
B11	double
,	O
g0	double
,	O
g1	double
;	O
gsl_vector_memcpy	function
(	O
state	pointer
->	O
workp	pointer
,	O
trust_state	pointer
->	O
g	pointer
)	O
;	O
gsl_vector_div	function
(	O
state	pointer
->	O
workp	pointer
,	O
trust_state	pointer
->	O
diag	pointer
)	O
;	O
gsl_linalg_QR_QTvec	function
(	O
state	pointer
->	O
W	pointer
,	O
state	pointer
->	O
tau	double
,	O
state	pointer
->	O
workp	pointer
)	O
;	O
g0	double
=	O
gsl_vector_get	function
(	O
state	pointer
->	O
workp	pointer
,	O
0	int
)	O
;	O
g1	double
=	O
gsl_vector_get	function
(	O
state	pointer
->	O
workp	pointer
,	O
1	int
)	O
;	O
gsl_vector_set	function
(	O
state	pointer
->	O
subg	pointer
,	O
0	int
,	O
g0	double
)	O
;	O
gsl_vector_set	function
(	O
state	pointer
->	O
subg	pointer
,	O
1	int
,	O
g1	double
)	O
;	O
gsl_matrix_memcpy	function
(	O
state	pointer
->	O
JQ	pointer
,	O
trust_state	pointer
->	O
J	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
p	int
;	O
++	O
i	long
)	O
{	O
gsl_vector_view	struct
c	pointer
=	O
gsl_matrix_column	function
(	O
state	pointer
->	O
JQ	pointer
,	O
i	long
)	O
;	O
double	O
di	double
=	O
gsl_vector_get	function
(	O
trust_state	pointer
->	O
diag	pointer
,	O
i	long
)	O
;	O
gsl_vector_scale	function
(	O
&	O
c	pointer
.	O
vector	struct
,	O
1.0	int
/	O
di	double
)	O
;	O
}	O
gsl_linalg_QR_matQ	function
(	O
state	pointer
->	O
W	pointer
,	O
state	pointer
->	O
tau	double
,	O
state	pointer
->	O
JQ	pointer
)	O
;	O
gsl_blas_dsyrk	function
(	O
CblasLower	int
,	O
CblasTrans	int
,	O
1.0	int
,	O
&	O
JQ	pointer
.	O
matrix	struct
,	O
0.0	int
,	O
state	pointer
->	O
subB	pointer
)	O
;	O
B00	double
=	O
gsl_matrix_get	function
(	O
state	pointer
->	O
subB	pointer
,	O
0	int
,	O
0	int
)	O
;	O
B10	double
=	O
gsl_matrix_get	function
(	O
state	pointer
->	O
subB	pointer
,	O
1	int
,	O
0	int
)	O
;	O
B11	double
=	O
gsl_matrix_get	function
(	O
state	pointer
->	O
subB	pointer
,	O
1	int
,	O
1	int
)	O
;	O
state	pointer
->	O
trB	double
=	O
B00	double
+	O
B11	double
;	O
state	pointer
->	O
detB	double
=	O
B00	double
*	O
B11	double
-	O
B10	double
*	O
B10	double
;	O
state	pointer
->	O
normg	double
=	O
gsl_blas_dnrm2	function
(	O
state	pointer
->	O
subg	pointer
)	O
;	O
state	pointer
->	O
term0	double
=	O
(	O
B10	double
*	O
B10	double
+	O
B11	double
*	O
B11	double
)	O
*	O
g0	double
*	O
g0	double
-	O
2	int
*	O
B10	double
*	O
(	O
B00	double
+	O
B11	double
)	O
*	O
g0	double
*	O
g1	double
+	O
(	O
B00	double
*	O
B00	double
+	O
B10	double
*	O
B10	double
)	O
*	O
g1	double
*	O
g1	double
;	O
state	pointer
->	O
term1	double
=	O
B11	double
*	O
g0	double
*	O
g0	double
+	O
g1	double
*	O
(	O
B00	double
*	O
g1	double
-	O
2	int
*	O
B10	double
*	O
g0	double
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
subspace2D_step	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
const	O
double	O
delta	double
,	O
gsl_vector	struct
*	O
dx	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
trust_state	pointer
=	O
(	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
)	O
vtrust_state	pointer
;	O
subspace2D_state_t	struct
*	O
state	pointer
=	O
(	O
subspace2D_state_t	struct
*	O
)	O
vstate	pointer
;	O
if	O
(	O
state	pointer
->	O
norm_Dgn	double
<=	O
delta	double
)	O
{	O
gsl_vector_memcpy	function
(	O
dx	pointer
,	O
state	pointer
->	O
dx_gn	pointer
)	O
;	O
}	O
else	O
if	O
(	O
state	pointer
->	O
rank	long
<	O
2	int
)	O
{	O
gsl_vector_memcpy	function
(	O
dx	pointer
,	O
state	pointer
->	O
dx_sd	pointer
)	O
;	O
gsl_vector_scale	function
(	O
dx	pointer
,	O
delta	double
/	O
state	pointer
->	O
norm_Dsd	double
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
const	O
double	O
delta_sq	double
=	O
delta	double
*	O
delta	double
;	O
double	O
u	pointer
=	O
state	pointer
->	O
normg	double
/	O
delta	double
;	O
double	O
a	double
[	O
5	int
]	O
;	O
double	O
z	double
[	O
8	int
]	O
;	O
a	double
[	O
0	int
]	O
=	O
state	pointer
->	O
detB	double
*	O
state	pointer
->	O
detB	double
-	O
state	pointer
->	O
term0	double
/	O
delta_sq	double
;	O
a	double
[	O
1	int
]	O
=	O
2	int
*	O
state	pointer
->	O
detB	double
*	O
state	pointer
->	O
trB	double
-	O
2	int
*	O
state	pointer
->	O
term1	double
/	O
delta_sq	double
;	O
a	double
[	O
2	int
]	O
=	O
state	pointer
->	O
trB	double
*	O
state	pointer
->	O
trB	double
+	O
2	int
*	O
state	pointer
->	O
detB	double
-	O
u	pointer
*	O
u	pointer
;	O
a	double
[	O
3	int
]	O
=	O
2	int
*	O
state	pointer
->	O
trB	double
;	O
a	double
[	O
4	int
]	O
=	O
1.0	int
;	O
status	int
=	O
gsl_poly_complex_solve	function
(	O
a	double
,	O
5	int
,	O
state	pointer
->	O
poly_p	pointer
,	O
z	double
)	O
;	O
if	O
(	O
status	int
==	O
GSL_SUCCESS	int
)	O
{	O
size_t	long
i	long
;	O
double	O
min	double
=	O
0.0	int
;	O
int	O
mini	int
=	O
-	O
1	int
;	O
double	O
x_data	array
[	O
2	int
]	O
;	O
gsl_vector_view	struct
x	double
=	O
gsl_vector_view_array	function
(	O
x_data	array
,	O
2	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
4	int
;	O
++	O
i	long
)	O
{	O
double	O
cost	double
,	O
normx	double
;	O
status	int
=	O
subspace2D_solution	function
(	O
z	double
[	O
2	int
*	O
i	long
]	O
,	O
&	O
x	double
.	O
vector	struct
,	O
state	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
continue	O
;	O
normx	double
=	O
gsl_blas_dnrm2	function
(	O
&	O
x	double
.	O
vector	struct
)	O
;	O
if	O
(	O
normx	double
==	O
0.0	int
)	O
continue	O
;	O
gsl_vector_scale	function
(	O
&	O
x	double
.	O
vector	struct
,	O
delta	double
/	O
normx	double
)	O
;	O
cost	double
=	O
subspace2D_objective	function
(	O
&	O
x	double
.	O
vector	struct
,	O
state	pointer
)	O
;	O
if	O
(	O
mini	int
<	O
0	int
||	O
cost	double
<	O
min	double
)	O
{	O
mini	int
=	O
(	O
int	O
)	O
i	long
;	O
min	double
=	O
cost	double
;	O
}	O
}	O
if	O
(	O
mini	int
<	O
0	int
)	O
{	O
return	O
GSL_FAILURE	int
;	O
}	O
else	O
{	O
subspace2D_solution	function
(	O
z	double
[	O
2	int
*	O
mini	int
]	O
,	O
&	O
x	double
.	O
vector	struct
,	O
state	pointer
)	O
;	O
gsl_vector_set_zero	function
(	O
dx	pointer
)	O
;	O
gsl_vector_set	function
(	O
dx	pointer
,	O
0	int
,	O
gsl_vector_get	function
(	O
&	O
x	double
.	O
vector	struct
,	O
0	int
)	O
)	O
;	O
gsl_vector_set	function
(	O
dx	pointer
,	O
1	int
,	O
gsl_vector_get	function
(	O
&	O
x	double
.	O
vector	struct
,	O
1	int
)	O
)	O
;	O
gsl_linalg_QR_Qvec	function
(	O
state	pointer
->	O
W	pointer
,	O
state	pointer
->	O
tau	double
,	O
dx	pointer
)	O
;	O
gsl_vector_div	function
(	O
dx	pointer
,	O
trust_state	pointer
->	O
diag	pointer
)	O
;	O
}	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"gsl_poly_complex_solve failed"	pointer
,	O
status	int
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
subspace2D_preduction	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
const	O
gsl_vector	struct
*	O
dx	pointer
,	O
double	O
*	O
pred	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
trust_state	pointer
=	O
(	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
)	O
vtrust_state	pointer
;	O
subspace2D_state_t	struct
*	O
state	pointer
=	O
(	O
subspace2D_state_t	struct
*	O
)	O
vstate	pointer
;	O
*	O
pred	pointer
=	O
quadratic_preduction	function
(	O
trust_state	pointer
->	O
f	pointer
,	O
trust_state	pointer
->	O
J	pointer
,	O
dx	pointer
,	O
state	pointer
->	O
workn	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
subspace2D_solution	function
(	O
const	O
double	O
lambda	double
,	O
gsl_vector	struct
*	O
x	double
,	O
subspace2D_state_t	struct
*	O
state	pointer
)	O
{	O
int	O
status	int
=	O
GSL_SUCCESS	int
;	O
double	O
C_data	array
[	O
4	int
]	O
;	O
gsl_matrix_view	struct
C	pointer
=	O
gsl_matrix_view_array	function
(	O
C_data	array
,	O
2	int
,	O
2	int
)	O
;	O
double	O
B00	double
=	O
gsl_matrix_get	function
(	O
state	pointer
->	O
subB	pointer
,	O
0	int
,	O
0	int
)	O
;	O
double	O
B10	double
=	O
gsl_matrix_get	function
(	O
state	pointer
->	O
subB	pointer
,	O
1	int
,	O
0	int
)	O
;	O
double	O
B11	double
=	O
gsl_matrix_get	function
(	O
state	pointer
->	O
subB	pointer
,	O
1	int
,	O
1	int
)	O
;	O
gsl_matrix_set	function
(	O
&	O
C	pointer
.	O
matrix	struct
,	O
0	int
,	O
0	int
,	O
B00	double
+	O
lambda	double
)	O
;	O
gsl_matrix_set	function
(	O
&	O
C	pointer
.	O
matrix	struct
,	O
1	int
,	O
0	int
,	O
B10	double
)	O
;	O
gsl_matrix_set	function
(	O
&	O
C	pointer
.	O
matrix	struct
,	O
0	int
,	O
1	int
,	O
B10	double
)	O
;	O
gsl_matrix_set	function
(	O
&	O
C	pointer
.	O
matrix	struct
,	O
1	int
,	O
1	int
,	O
B11	double
+	O
lambda	double
)	O
;	O
gsl_linalg_mcholesky_decomp	function
(	O
&	O
C	pointer
.	O
matrix	struct
,	O
state	pointer
->	O
perm	pointer
,	O
NULL	O
)	O
;	O
gsl_linalg_mcholesky_solve	function
(	O
&	O
C	pointer
.	O
matrix	struct
,	O
state	pointer
->	O
perm	pointer
,	O
state	pointer
->	O
subg	pointer
,	O
x	double
)	O
;	O
gsl_vector_scale	function
(	O
x	double
,	O
-	O
1.0	int
)	O
;	O
return	O
status	int
;	O
}	O
static	O
double	O
subspace2D_objective	function
(	O
const	O
gsl_vector	struct
*	O
x	double
,	O
subspace2D_state_t	struct
*	O
state	pointer
)	O
{	O
double	O
f	pointer
;	O
double	O
y_data	array
[	O
2	int
]	O
;	O
gsl_vector_view	struct
y	double
=	O
gsl_vector_view_array	function
(	O
y_data	array
,	O
2	int
)	O
;	O
gsl_vector_memcpy	function
(	O
&	O
y	double
.	O
vector	struct
,	O
state	pointer
->	O
subg	pointer
)	O
;	O
gsl_blas_dsymv	function
(	O
CblasLower	int
,	O
0.5	int
,	O
state	pointer
->	O
subB	pointer
,	O
x	double
,	O
1.0	int
,	O
&	O
y	double
.	O
vector	struct
)	O
;	O
gsl_blas_ddot	function
(	O
x	double
,	O
&	O
y	double
.	O
vector	struct
,	O
&	O
f	pointer
)	O
;	O
return	O
f	pointer
;	O
}	O
static	O
int	O
subspace2D_calc_gn	function
(	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
trust_state	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
)	O
{	O
int	O
status	int
;	O
const	O
gsl_multifit_nlinear_parameters	struct
*	O
params	pointer
=	O
trust_state	pointer
->	O
params	pointer
;	O
status	int
=	O
(	O
params	pointer
->	O
solver	pointer
->	O
init	pointer
)	O
(	O
trust_state	pointer
,	O
trust_state	pointer
->	O
solver_state	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
(	O
params	pointer
->	O
solver	pointer
->	O
presolve	pointer
)	O
(	O
0.0	int
,	O
trust_state	pointer
,	O
trust_state	pointer
->	O
solver_state	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
(	O
params	pointer
->	O
solver	pointer
->	O
solve	pointer
)	O
(	O
trust_state	pointer
->	O
f	pointer
,	O
dx	pointer
,	O
trust_state	pointer
,	O
trust_state	pointer
->	O
solver_state	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
subspace2D_calc_sd	function
(	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
trust_state	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
,	O
subspace2D_state_t	struct
*	O
state	pointer
)	O
{	O
double	O
norm_Dinvg	double
;	O
double	O
norm_JDinv2g	double
;	O
double	O
alpha	long double
;	O
double	O
u	pointer
;	O
gsl_vector_memcpy	function
(	O
state	pointer
->	O
workp	pointer
,	O
trust_state	pointer
->	O
g	pointer
)	O
;	O
gsl_vector_div	function
(	O
state	pointer
->	O
workp	pointer
,	O
trust_state	pointer
->	O
diag	pointer
)	O
;	O
norm_Dinvg	double
=	O
gsl_blas_dnrm2	function
(	O
state	pointer
->	O
workp	pointer
)	O
;	O
gsl_vector_div	function
(	O
state	pointer
->	O
workp	pointer
,	O
trust_state	pointer
->	O
diag	pointer
)	O
;	O
gsl_blas_dgemv	function
(	O
CblasNoTrans	int
,	O
1.0	int
,	O
trust_state	pointer
->	O
J	pointer
,	O
state	pointer
->	O
workp	pointer
,	O
0.0	int
,	O
state	pointer
->	O
workn	pointer
)	O
;	O
norm_JDinv2g	double
=	O
gsl_blas_dnrm2	function
(	O
state	pointer
->	O
workn	pointer
)	O
;	O
u	pointer
=	O
norm_Dinvg	double
/	O
norm_JDinv2g	double
;	O
alpha	long double
=	O
u	pointer
*	O
u	pointer
;	O
gsl_vector_memcpy	function
(	O
dx	pointer
,	O
state	pointer
->	O
workp	pointer
)	O
;	O
gsl_vector_scale	function
(	O
dx	pointer
,	O
-	O
alpha	long double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
const	O
gsl_multifit_nlinear_trs	struct
subspace2D_type	struct
=	O
{	O
"2D-subspace"	pointer
,	O
subspace2D_alloc	function
,	O
subspace2D_init	function
,	O
subspace2D_preloop	function
,	O
subspace2D_step	function
,	O
subspace2D_preduction	function
,	O
subspace2D_free	function
}	O
;	O
const	O
gsl_multifit_nlinear_trs	struct
*	O
gsl_multifit_nlinear_trs_subspace2D	pointer
=	O
&	O
subspace2D_type	struct
;	O
