static	O
void	O
usage	function
(	O
)	O
;	O
static	O
char	O
*	O
fname	pointer
=	O
"font.map"	pointer
;	O
static	O
char	O
*	O
program	pointer
;	O
static	O
struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
"output-file"	pointer
,	O
required_argument	int
,	O
0	int
,	O
'p'	O
}	O
,	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'h'	O
}	O
,	O
{	O
"version"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'V'	O
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
0	int
,	O
0	int
}	O
,	O
}	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	pointer
[	O
]	O
)	O
{	O
AFMError	int
error	int
;	O
AFMHandle	pointer
afm	pointer
;	O
AFMFont	pointer
font	pointer
;	O
int	O
i	int
;	O
FILE	struct
*	O
ofp	pointer
;	O
FILE	struct
*	O
mfp	pointer
;	O
program	pointer
=	O
strrchr	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
'/'	O
)	O
;	O
if	O
(	O
program	pointer
==	O
NULL	O
)	O
program	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
else	O
program	pointer
++	O
;	O
argv	pointer
[	O
0	int
]	O
=	O
program	pointer
;	O
setlocale	function
(	O
LC_MESSAGES	O
,	O
""	pointer
)	O
;	O
bindtextdomain	function
(	O
PACKAGE	pointer
,	O
LOCALEDIR	O
)	O
;	O
textdomain	function
(	O
PACKAGE	pointer
)	O
;	O
while	O
(	O
1	int
)	O
{	O
int	O
option_index	int
=	O
0	int
;	O
int	O
c	int
;	O
c	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"p:h"	pointer
,	O
long_options	array
,	O
&	O
option_index	int
)	O
;	O
if	O
(	O
c	int
==	O
-	O
1	int
)	O
break	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
'h'	O
:	O
usage	function
(	O
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
case	O
'p'	O
:	O
if	O
(	O
strcmp	function
(	O
optarg	pointer
,	O
"-"	pointer
)	O
==	O
0	int
)	O
fname	pointer
=	O
NULL	O
;	O
else	O
fname	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
'V'	O
:	O
printf	function
(	O
"%s for GNU %s %s\n"	pointer
,	O
program	pointer
,	O
PACKAGE	pointer
,	O
VERSION	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
break	O
;	O
case	O
'?'	O
:	O
usage	function
(	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
break	O
;	O
}	O
}	O
printf	function
(	O
_	O
(	O
"file=%s\n"	pointer
)	O
,	O
fname	pointer
?	O
fname	pointer
:	O
_	O
(	O
"stdout"	pointer
)	O
)	O
;	O
if	O
(	O
fname	pointer
)	O
{	O
ofp	pointer
=	O
fopen	function
(	O
fname	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
ofp	pointer
==	O
NULL	O
)	O
{	O
char	O
buf	pointer
[	O
256	int
]	O
;	O
sprintf	function
(	O
buf	pointer
,	O
_	O
(	O
"%s: couldn't open output file \"%s\""	pointer
)	O
,	O
program	pointer
,	O
fname	pointer
)	O
;	O
perror	function
(	O
buf	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
mfp	pointer
=	O
stdout	pointer
;	O
}	O
else	O
{	O
ofp	pointer
=	O
stdout	pointer
;	O
mfp	pointer
=	O
stderr	pointer
;	O
}	O
error	int
=	O
afm_create	function
(	O
NULL	O
,	O
0	int
,	O
&	O
afm	pointer
)	O
;	O
HANDLE_ERROR	O
(	O
_	O
(	O
"couldn't create AFM library"	pointer
)	O
)	O
;	O
for	O
(	O
i	int
=	O
optind	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
fprintf	function
(	O
mfp	pointer
,	O
"%s...\n"	pointer
,	O
argv	pointer
[	O
i	int
]	O
)	O
;	O
error	int
=	O
afm_open_file	function
(	O
afm	pointer
,	O
AFM_I_MINIMUM	int
,	O
argv	pointer
[	O
i	int
]	O
,	O
&	O
font	pointer
)	O
;	O
if	O
(	O
error	int
==	O
AFM_SUCCESS	int
)	O
{	O
char	O
*	O
cp	pointer
;	O
char	O
*	O
sf	pointer
;	O
int	O
len	int
;	O
cp	pointer
=	O
strrchr	function
(	O
argv	pointer
[	O
i	int
]	O
,	O
'/'	O
)	O
;	O
if	O
(	O
cp	pointer
==	O
NULL	O
)	O
cp	pointer
=	O
argv	pointer
[	O
i	int
]	O
;	O
else	O
cp	pointer
++	O
;	O
sf	pointer
=	O
strrchr	function
(	O
argv	pointer
[	O
i	int
]	O
,	O
'.'	O
)	O
;	O
if	O
(	O
sf	pointer
)	O
len	int
=	O
sf	pointer
-	O
cp	pointer
;	O
else	O
len	int
=	O
strlen	function
(	O
cp	pointer
)	O
;	O
fprintf	function
(	O
ofp	pointer
,	O
"%-30s\t%.*s\n"	pointer
,	O
font	pointer
->	O
global_info	struct
.	O
FontName	pointer
,	O
len	int
,	O
cp	pointer
)	O
;	O
(	O
void	O
)	O
afm_close_font	function
(	O
font	pointer
)	O
;	O
}	O
else	O
{	O
char	O
buf	pointer
[	O
256	int
]	O
;	O
afm_error_to_string	function
(	O
error	int
,	O
buf	pointer
)	O
;	O
fprintf	function
(	O
mfp	pointer
,	O
"%s: %s\n"	pointer
,	O
program	pointer
,	O
buf	pointer
)	O
;	O
}	O
}	O
if	O
(	O
fname	pointer
)	O
fclose	function
(	O
ofp	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
usage	function
(	O
)	O
{	O
printf	function
(	O
_	O
(	O
"Usage: %s [OPTION]... FILE...\nMandatory arguments to long options are mandatory for short options too.\n  -h, --help              print this help and exit\n  -p, --output-file=NAME  print output to file NAME (default file is\n                          font.map).  If FILE is `-', leavy output to\n                          stdout.\n  -V, --version           print version number\n"	pointer
)	O
,	O
program	pointer
)	O
;	O
}	O
