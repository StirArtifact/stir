void	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
mu_list_t	*(struct)
*	O
plist	*(*(struct(struct(*(void),*(struct`),*(struct`)),long,*(struct(*`,*`,int,int)),*((*`,*`)->(int)),*((*`)->(void)),*(struct))))
)	O
{	O
if	O
(	O
plist	*(*(struct(struct(*(void),*(struct`),*(struct`)),long,*(struct(*`,*`,int,int)),*((*`,*`)->(int)),*((*`)->(void)),*(struct))))
&&	O
*	O
plist	*(*(struct(struct(*(void),*(struct`),*(struct`)),long,*(struct(*`,*`,int,int)),*((*`,*`)->(int)),*((*`)->(void)),*(struct))))
)	O
{	O
mu_list_t	*(struct)
list	*(struct)
=	O
*	O
plist	*(*(struct(struct(*(void),*(struct`),*(struct`)),long,*(struct(*`,*`,int,int)),*((*`,*`)->(int)),*((*`)->(void)),*(struct))))
;	O
mu_list_clear	(*(struct))->(void)
(	O
list	*(struct)
)	O
;	O
mu_monitor_destroy	(*(*(struct(*(void),*(void),int,int))),*(void))->(void)
(	O
&	O
list	*(struct)
->	O
monitor	*(struct(*(void),*(void),int,int))
,	O
list	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
list	*(struct)
)	O
;	O
*	O
plist	*(*(struct(struct(*(void),*(struct`),*(struct`)),long,*(struct(*`,*`,int,int)),*((*`,*`)->(int)),*((*`)->(void)),*(struct))))
=	O
NULL	O
;	O
}	O
}	O
