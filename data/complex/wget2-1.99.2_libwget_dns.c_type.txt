struct	O
wget_dns_st	struct(*(struct),*(struct),*((*(struct(*(struct`),*(struct`),*((*`,*`,*`)->(void)),*(void),struct(*`,*`,short,long long),int)),*(struct(*(char),*(char),short,long long)),*(void))->(void)),*(void),struct(*(char),*(char),short,long long),int)
{	O
wget_dns_cache	struct
*	O
cache	*(*(struct))
;	O
wget_thread_mutex	*(struct)
mutex	*(*(struct))
;	O
wget_dns_stats_callback	(*(struct),*(struct(*(char),*(char),short,long long)),*(void))->(void)
*	O
stats_callback	*((*(struct(*(struct`),*(struct`),*((*`,*`,*`)->(void)),*(void),struct(*`,*`,short,long long),int)),*(struct(*(char),*(char),short,long long)),*(void))->(void))
;	O
void	O
*	O
stats_ctx	*(void)
;	O
wget_dns_stats_data	struct(*(char),*(char),short,long long)
stats	*(struct(*(char),*(char),short,long long))
;	O
int	O
timeout	int
;	O
}	O
;	O
static	O
wget_dns	struct
default_dns	struct(*(struct),*(struct),*((*(struct(*`,*`,*`,*`,struct`,int)),*(struct(*`,*`,short,long long)),*(void))->(void)),*(void),struct(*(char),*(char),short,long long),int)
=	O
{	O
.	O
timeout	int
=	O
-	O
1	int
,	O
}	O
;	O
int	O
wget_dns_init	(*(*(struct)))->(int)
(	O
wget_dns	struct
*	O
*	O
dns	*(*(struct))
)	O
{	O
wget_dns	struct
*	O
_dns	*(struct(*(struct),*(struct),*((*(struct`),*(struct`),*(void))->(void)),*(void),struct(*(char),*(char),short,long long),int))
=	O
wget_calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
wget_dns	struct
)	O
)	O
;	O
if	O
(	O
!	O
_dns	*(struct(*(struct),*(struct),*((*(struct`),*(struct`),*(void))->(void)),*(void),struct(*(char),*(char),short,long long),int))
)	O
return	O
WGET_E_MEMORY	int
;	O
if	O
(	O
wget_thread_mutex_init	(*(*(struct)))->(int)
(	O
&	O
_dns	*(struct(*(struct),*(struct),*((*(struct`),*(struct`),*(void))->(void)),*(void),struct(*(char),*(char),short,long long),int))
->	O
mutex	*(*(struct))
)	O
)	O
{	O
xfree	O
(	O
_dns	*(struct(*(struct),*(struct),*((*(struct`),*(struct`),*(void))->(void)),*(void),struct(*(char),*(char),short,long long),int))
)	O
;	O
return	O
WGET_E_INVALID	int
;	O
}	O
_dns	*(struct(*(struct),*(struct),*((*(struct`),*(struct`),*(void))->(void)),*(void),struct(*(char),*(char),short,long long),int))
->	O
timeout	int
=	O
-	O
1	int
;	O
*	O
dns	*(*(struct))
=	O
_dns	*(struct(*(struct),*(struct),*((*(struct`),*(struct`),*(void))->(void)),*(void),struct(*(char),*(char),short,long long),int))
;	O
return	O
WGET_E_SUCCESS	int
;	O
}	O
void	O
wget_dns_free	(*(*(struct)))->(void)
(	O
wget_dns	struct
*	O
*	O
dns	*(*(struct))
)	O
{	O
if	O
(	O
dns	*(*(struct))
&&	O
*	O
dns	*(*(struct))
)	O
{	O
wget_thread_mutex_destroy	(*(*(struct)))->(int)
(	O
&	O
(	O
*	O
dns	*(*(struct))
)	O
->	O
mutex	*(*(struct))
)	O
;	O
xfree	O
(	O
*	O
dns	*(*(struct))
)	O
;	O
}	O
}	O
void	O
wget_dns_set_timeout	(*(struct),int)->(void)
(	O
wget_dns	struct
*	O
dns	*(*(struct))
,	O
int	O
timeout	int
)	O
{	O
(	O
dns	*(*(struct))
?	O
dns	*(*(struct))
:	O
&	O
default_dns	struct(*(struct),*(struct),*((*(struct(*`,*`,*`,*`,struct`,int)),*(struct(*`,*`,short,long long)),*(void))->(void)),*(void),struct(*(char),*(char),short,long long),int)
)	O
->	O
timeout	int
=	O
timeout	int
;	O
}	O
void	O
wget_dns_set_cache	(*(struct),*(struct))->(void)
(	O
wget_dns	struct
*	O
dns	*(*(struct))
,	O
wget_dns_cache	struct
*	O
cache	*(*(struct))
)	O
{	O
(	O
dns	*(*(struct))
?	O
dns	*(*(struct))
:	O
&	O
default_dns	struct(*(struct),*(struct),*((*(struct(*`,*`,*`,*`,struct`,int)),*(struct(*`,*`,short,long long)),*(void))->(void)),*(void),struct(*(char),*(char),short,long long),int)
)	O
->	O
cache	*(*(struct))
=	O
cache	*(*(struct))
;	O
}	O
wget_dns_cache	struct
*	O
wget_dns_get_cache	(*(struct))->(*(struct))
(	O
wget_dns	struct
*	O
dns	*(*(struct))
)	O
{	O
return	O
(	O
dns	*(*(struct))
?	O
dns	*(*(struct))
:	O
&	O
default_dns	struct(*(struct),*(struct),*((*(struct(*`,*`,*`,*`,struct`,int)),*(struct(*`,*`,short,long long)),*(void))->(void)),*(void),struct(*(char),*(char),short,long long),int)
)	O
->	O
cache	*(*(struct))
;	O
}	O
static	O
struct	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
*	O
_wget_sort_preferred	(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),int)->(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
(	O
struct	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
*	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
,	O
int	O
preferred_family	int
)	O
{	O
struct	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
*	O
preferred	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
=	O
NULL	O
,	O
*	O
preferred_tail	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
=	O
NULL	O
;	O
struct	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
*	O
unpreferred	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
=	O
NULL	O
,	O
*	O
unpreferred_tail	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
=	O
NULL	O
;	O
for	O
(	O
struct	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
*	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
=	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
;	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
;	O
)	O
{	O
if	O
(	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_family	int
==	O
preferred_family	int
)	O
{	O
if	O
(	O
preferred_tail	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
)	O
preferred_tail	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_next	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
=	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
;	O
else	O
preferred	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
=	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
;	O
preferred_tail	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
=	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
;	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
=	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_next	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
;	O
preferred_tail	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_next	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
=	O
NULL	O
;	O
}	O
else	O
{	O
if	O
(	O
unpreferred_tail	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
)	O
unpreferred_tail	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_next	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
=	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
;	O
else	O
unpreferred	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
=	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
;	O
unpreferred_tail	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
=	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
;	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
=	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_next	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
;	O
unpreferred_tail	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_next	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
=	O
NULL	O
;	O
}	O
}	O
if	O
(	O
preferred	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
)	O
{	O
preferred_tail	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_next	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
=	O
unpreferred	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
;	O
return	O
preferred	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
;	O
}	O
else	O
{	O
return	O
unpreferred	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
;	O
}	O
}	O
static	O
int	O
_resolve	(int,int,*(char),short,*(*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))->(int)
(	O
int	O
family	int
,	O
int	O
flags	int
,	O
const	O
char	O
*	O
host	*(char)
,	O
uint16_t	short
port	short
,	O
struct	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
*	O
*	O
out_addr	*(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
)	O
{	O
struct	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
hints	int
=	O
{	O
.	O
ai_family	int
=	O
family	int
,	O
.	O
ai_socktype	int
=	O
SOCK_STREAM	int
,	O
.	O
ai_flags	int
=	O
AI_ADDRCONFIG	int
|	O
flags	int
}	O
;	O
if	O
(	O
port	short
)	O
{	O
char	O
s_port	int
[	O
NI_MAXSERV	int
]	O
;	O
hints	int
.	O
ai_flags	int
|=	O
AI_NUMERICSERV	int
;	O
wget_snprintf	(*(char),long,*(char))->(long)
(	O
s_port	int
,	O
sizeof	O
(	O
s_port	int
)	O
,	O
"%hu"	*(char)
,	O
port	short
)	O
;	O
debug_printf	O
(	O
"resolving %s:%s...\n"	*(char)
,	O
host	*(char)
?	O
host	*(char)
:	O
""	*(char)
,	O
s_port	int
)	O
;	O
return	O
getaddrinfo	(*(char),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))->(int)
(	O
host	*(char)
,	O
s_port	int
,	O
&	O
hints	int
,	O
out_addr	*(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
)	O
;	O
}	O
else	O
{	O
debug_printf	O
(	O
"resolving %s...\n"	*(char)
,	O
host	*(char)
)	O
;	O
return	O
getaddrinfo	(*(char),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))->(int)
(	O
host	*(char)
,	O
NULL	O
,	O
&	O
hints	int
,	O
out_addr	*(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
)	O
;	O
}	O
}	O
int	O
wget_dns_cache_ip	(*(struct),*(char),*(char),short)->(int)
(	O
wget_dns	struct
*	O
dns	*(*(struct))
,	O
const	O
char	O
*	O
ip	*(char)
,	O
const	O
char	O
*	O
name	*(char)
,	O
uint16_t	short
port	short
)	O
{	O
int	O
rc	int
,	O
family	int
;	O
struct	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
*	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
;	O
if	O
(	O
!	O
dns	*(*(struct))
||	O
!	O
dns	*(*(struct))
->	O
cache	*(*(struct))
||	O
!	O
name	*(char)
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
wget_ip_is_family	(*(char),int)->(bool)
(	O
ip	*(char)
,	O
WGET_NET_FAMILY_IPV4	int
)	O
)	O
{	O
family	int
=	O
AF_INET	O
;	O
}	O
else	O
if	O
(	O
wget_ip_is_family	(*(char),int)->(bool)
(	O
ip	*(char)
,	O
WGET_NET_FAMILY_IPV6	int
)	O
)	O
{	O
family	int
=	O
AF_INET6	O
;	O
}	O
else	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
(	O
rc	int
=	O
_resolve	(int,int,*(char),short,*(*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))->(int)
(	O
family	int
,	O
AI_NUMERICHOST	int
,	O
ip	*(char)
,	O
port	short
,	O
&	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
)	O
)	O
!=	O
0	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to resolve %s:%d: %s\n"	*(char)
)	O
,	O
ip	*(char)
,	O
port	short
,	O
gai_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
return	O
WGET_E_UNKNOWN	int
;	O
}	O
if	O
(	O
(	O
rc	int
=	O
wget_dns_cache_add	(*(struct),*(char),short,*(*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))->(int)
(	O
dns	*(*(struct))
->	O
cache	*(*(struct))
,	O
name	*(char)
,	O
port	short
,	O
&	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
)	O
)	O
<	O
0	int
)	O
{	O
freeaddrinfo	(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
)	O
;	O
return	O
rc	int
;	O
}	O
return	O
WGET_E_SUCCESS	int
;	O
}	O
struct	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
*	O
wget_dns_resolve	(*(struct),*(char),short,int,int)->(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
(	O
wget_dns	struct
*	O
dns	*(*(struct))
,	O
const	O
char	O
*	O
host	*(char)
,	O
uint16_t	short
port	short
,	O
int	O
family	int
,	O
int	O
preferred_family	int
)	O
{	O
struct	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
*	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
=	O
NULL	O
;	O
int	O
rc	int
=	O
0	int
;	O
char	O
adr	array(char)
[	O
NI_MAXHOST	int
]	O
,	O
sport	array(char)
[	O
NI_MAXSERV	int
]	O
;	O
long	O
long	O
before_millisecs	long long
=	O
0	int
;	O
wget_dns_stats_data	struct(*(char),*(char),short,long long)
stats	*(struct(*(char),*(char),short,long long))
;	O
if	O
(	O
!	O
dns	*(*(struct))
)	O
dns	*(*(struct))
=	O
&	O
default_dns	struct(*(struct),*(struct),*((*(struct(*`,*`,*`,*`,struct`,int)),*(struct(*`,*`,short,long long)),*(void))->(void)),*(void),struct(*(char),*(char),short,long long),int)
;	O
if	O
(	O
dns	*(*(struct))
->	O
stats_callback	*((*(struct(*(struct`),*(struct`),*((*`,*`,*`)->(void)),*(void),struct(*`,*`,short,long long),int)),*(struct(*(char),*(char),short,long long)),*(void))->(void))
)	O
before_millisecs	long long
=	O
wget_get_timemillis	()->(long long)
(	O
)	O
;	O
for	O
(	O
int	O
tries	int
=	O
0	int
,	O
max	int
=	O
3	int
;	O
tries	int
<	O
max	int
;	O
tries	int
++	O
)	O
{	O
if	O
(	O
dns	*(*(struct))
->	O
cache	*(*(struct))
)	O
{	O
if	O
(	O
(	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
=	O
wget_dns_cache_get	(*(struct),*(char),short)->(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
(	O
dns	*(*(struct))
->	O
cache	*(*(struct))
,	O
host	*(char)
,	O
port	short
)	O
)	O
)	O
return	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
;	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
dns	*(*(struct))
->	O
mutex	*(*(struct))
)	O
;	O
if	O
(	O
(	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
=	O
wget_dns_cache_get	(*(struct),*(char),short)->(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
(	O
dns	*(*(struct))
->	O
cache	*(*(struct))
,	O
host	*(char)
,	O
port	short
)	O
)	O
)	O
{	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
dns	*(*(struct))
->	O
mutex	*(*(struct))
)	O
;	O
return	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
;	O
}	O
}	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
=	O
NULL	O
;	O
rc	int
=	O
_resolve	(int,int,*(char),short,*(*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))->(int)
(	O
family	int
,	O
0	int
,	O
host	*(char)
,	O
port	short
,	O
&	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
||	O
rc	int
!=	O
EAI_AGAIN	O
)	O
break	O
;	O
if	O
(	O
tries	int
<	O
max	int
-	O
1	int
)	O
{	O
if	O
(	O
dns	*(*(struct))
->	O
cache	*(*(struct))
)	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
dns	*(*(struct))
->	O
mutex	*(*(struct))
)	O
;	O
wget_millisleep	(int)->(void)
(	O
100	int
)	O
;	O
}	O
}	O
if	O
(	O
dns	*(*(struct))
->	O
stats_callback	*((*(struct(*(struct`),*(struct`),*((*`,*`,*`)->(void)),*(void),struct(*`,*`,short,long long),int)),*(struct(*(char),*(char),short,long long)),*(void))->(void))
)	O
{	O
long	O
long	O
after_millisecs	long long
=	O
wget_get_timemillis	()->(long long)
(	O
)	O
;	O
stats	*(struct(*(char),*(char),short,long long))
.	O
dns_secs	long long
=	O
after_millisecs	long long
-	O
before_millisecs	long long
;	O
stats	*(struct(*(char),*(char),short,long long))
.	O
hostname	*(char)
=	O
host	*(char)
;	O
stats	*(struct(*(char),*(char),short,long long))
.	O
port	short
=	O
port	short
;	O
}	O
if	O
(	O
rc	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to resolve %s (%s)\n"	*(char)
)	O
,	O
(	O
host	*(char)
?	O
host	*(char)
:	O
""	*(char)
)	O
,	O
gai_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
if	O
(	O
dns	*(*(struct))
->	O
cache	*(*(struct))
)	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
dns	*(*(struct))
->	O
mutex	*(*(struct))
)	O
;	O
if	O
(	O
dns	*(*(struct))
->	O
stats_callback	*((*(struct(*(struct`),*(struct`),*((*`,*`,*`)->(void)),*(void),struct(*`,*`,short,long long),int)),*(struct(*(char),*(char),short,long long)),*(void))->(void))
)	O
{	O
stats	*(struct(*(char),*(char),short,long long))
.	O
ip	*(char)
=	O
NULL	O
;	O
dns	*(*(struct))
->	O
stats_callback	*((*(struct(*(struct`),*(struct`),*((*`,*`,*`)->(void)),*(void),struct(*`,*`,short,long long),int)),*(struct(*(char),*(char),short,long long)),*(void))->(void))
(	O
dns	*(*(struct))
,	O
&	O
stats	*(struct(*(char),*(char),short,long long))
,	O
dns	*(*(struct))
->	O
stats_ctx	*(void)
)	O
;	O
}	O
return	O
NULL	O
;	O
}	O
if	O
(	O
family	int
==	O
AF_UNSPEC	O
&&	O
preferred_family	int
!=	O
AF_UNSPEC	O
)	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
=	O
_wget_sort_preferred	(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),int)->(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
(	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
,	O
preferred_family	int
)	O
;	O
if	O
(	O
dns	*(*(struct))
->	O
stats_callback	*((*(struct(*(struct`),*(struct`),*((*`,*`,*`)->(void)),*(void),struct(*`,*`,short,long long),int)),*(struct(*(char),*(char),short,long long)),*(void))->(void))
)	O
{	O
if	O
(	O
(	O
rc	int
=	O
getnameinfo	(*(struct(short,array(char))),int,*(char),int,*(char),int,int)->(int)
(	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
->	O
ai_addr	*(struct(short,array(char)))
,	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
->	O
ai_addrlen	int
,	O
adr	array(char)
,	O
sizeof	O
(	O
adr	array(char)
)	O
,	O
sport	array(char)
,	O
sizeof	O
(	O
sport	array(char)
)	O
,	O
NI_NUMERICHOST	int
|	O
NI_NUMERICSERV	int
)	O
)	O
==	O
0	int
)	O
stats	*(struct(*(char),*(char),short,long long))
.	O
ip	*(char)
=	O
adr	array(char)
;	O
else	O
stats	*(struct(*(char),*(char),short,long long))
.	O
ip	*(char)
=	O
"???"	*(char)
;	O
dns	*(*(struct))
->	O
stats_callback	*((*(struct(*(struct`),*(struct`),*((*`,*`,*`)->(void)),*(void),struct(*`,*`,short,long long),int)),*(struct(*(char),*(char),short,long long)),*(void))->(void))
(	O
dns	*(*(struct))
,	O
&	O
stats	*(struct(*(char),*(char),short,long long))
,	O
dns	*(*(struct))
->	O
stats_ctx	*(void)
)	O
;	O
}	O
if	O
(	O
wget_logger_is_active	(*(struct))->(bool)
(	O
wget_get_logger	(int)->(*(struct))
(	O
WGET_LOGGER_DEBUG	int
)	O
)	O
)	O
{	O
for	O
(	O
struct	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
*	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
=	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
;	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
;	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
=	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_next	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
)	O
{	O
if	O
(	O
(	O
rc	int
=	O
getnameinfo	(*(struct(short,array(char))),int,*(char),int,*(char),int,int)->(int)
(	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_addr	*(struct(short,array(char)))
,	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_addrlen	int
,	O
adr	array(char)
,	O
sizeof	O
(	O
adr	array(char)
)	O
,	O
sport	array(char)
,	O
sizeof	O
(	O
sport	array(char)
)	O
,	O
NI_NUMERICHOST	int
|	O
NI_NUMERICSERV	int
)	O
)	O
==	O
0	int
)	O
debug_printf	O
(	O
"has %s:%s\n"	*(char)
,	O
adr	array(char)
,	O
sport	array(char)
)	O
;	O
else	O
debug_printf	O
(	O
"has ??? (%s)\n"	*(char)
,	O
gai_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
}	O
}	O
if	O
(	O
dns	*(*(struct))
->	O
cache	*(*(struct))
)	O
{	O
rc	int
=	O
wget_dns_cache_add	(*(struct),*(char),short,*(*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))->(int)
(	O
dns	*(*(struct))
->	O
cache	*(*(struct))
,	O
host	*(char)
,	O
port	short
,	O
&	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
)	O
;	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
dns	*(*(struct))
->	O
mutex	*(*(struct))
)	O
;	O
if	O
(	O
rc	int
<	O
0	int
)	O
{	O
freeaddrinfo	(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
return	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
;	O
}	O
void	O
wget_dns_freeaddrinfo	(*(struct),*(*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))->(void)
(	O
wget_dns	struct
*	O
dns	*(*(struct))
,	O
struct	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
*	O
*	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
)	O
{	O
if	O
(	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
&&	O
*	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
)	O
{	O
if	O
(	O
!	O
dns	*(*(struct))
)	O
dns	*(*(struct))
=	O
&	O
default_dns	struct(*(struct),*(struct),*((*(struct(*`,*`,*`,*`,struct`,int)),*(struct(*`,*`,short,long long)),*(void))->(void)),*(void),struct(*(char),*(char),short,long long),int)
;	O
if	O
(	O
!	O
dns	*(*(struct))
->	O
cache	*(*(struct))
)	O
{	O
freeaddrinfo	(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
*	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
)	O
;	O
*	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
=	O
NULL	O
;	O
}	O
else	O
{	O
*	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
=	O
NULL	O
;	O
}	O
}	O
}	O
void	O
wget_dns_set_stats_callback	(*(struct),*((*(struct),*(struct(*`,*`,short,long long)),*(void))->(void)),*(void))->(void)
(	O
wget_dns	struct
*	O
dns	*(*(struct))
,	O
wget_dns_stats_callback	(*(struct),*(struct(*(char),*(char),short,long long)),*(void))->(void)
*	O
fn	*((*(struct(*(void),*(struct`))),int)->(void))
,	O
void	O
*	O
ctx	*(void)
)	O
{	O
if	O
(	O
!	O
dns	*(*(struct))
)	O
dns	*(*(struct))
=	O
&	O
default_dns	struct(*(struct),*(struct),*((*(struct(*`,*`,*`,*`,struct`,int)),*(struct(*`,*`,short,long long)),*(void))->(void)),*(void),struct(*(char),*(char),short,long long),int)
;	O
dns	*(*(struct))
->	O
stats_callback	*((*(struct(*(struct`),*(struct`),*((*`,*`,*`)->(void)),*(void),struct(*`,*`,short,long long),int)),*(struct(*(char),*(char),short,long long)),*(void))->(void))
=	O
fn	*((*(struct(*(void),*(struct`))),int)->(void))
;	O
dns	*(*(struct))
->	O
stats_ctx	*(void)
=	O
ctx	*(void)
;	O
}	O
