struct	O
top	struct(*(struct(*(char),*(char),*(char),*(()->(void)))),struct(*(char),bool,bool,bool,bool,bool,bool,bool,int,bool,int,int,bool,bool,bool,int,*(char),struct(bool,long),*(char),long,bool,bool,*(char),long,*(struct(*(char),enum(int,int,int))),*(struct),*(struct),*(struct)),struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),struct(bool,*(char),*(char),*(char),*(char),*(char))),struct(*(char),int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct))),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),struct(*(char),long)),struct(*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),bool))
*	O
top	struct(*(struct(*(char),*(char),*(char),*(()->(void)))),struct(*(char),bool,bool,bool,bool,bool,bool,bool,int,bool,int,int,bool,bool,bool,int,*(char),struct(bool,long),*(char),long,bool,bool,*(char),long,*(struct(*(char),enum(int,int,int))),*(struct),*(struct),*(struct)),struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),struct(bool,*(char),*(char),*(char),*(char),*(char))),struct(*(char),int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct))),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),struct(*(char),long)),struct(*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),bool))
;	O
struct	O
unique	struct(bool,long,array(char))
{	O
bool	bool
eqval_p	bool
;	O
size_t	long
minlen	long
;	O
char	O
const	O
full	array(char)
[	O
]	O
;	O
}	O
;	O
typedef	O
struct	O
unique	struct(bool,long,array(char))
s_unique	struct(bool,long,array(char))
;	O
static	O
const	O
s_unique	struct(bool,long,array(char))
const	O
minus_y	struct(bool,long,array(char))
=	O
{	O
.	O
eqval_p	bool
=	O
false	int
,	O
.	O
minlen	long
=	O
4	int
,	O
.	O
full	array(char)
=	O
"--side-by-side"	*(char)
}	O
;	O
static	O
const	O
s_unique	struct(bool,long,array(char))
const	O
minus_D	struct(bool,long,array(char))
=	O
{	O
.	O
eqval_p	bool
=	O
true	int
,	O
.	O
minlen	long
=	O
4	int
,	O
.	O
full	array(char)
=	O
"--ifdef"	*(char)
}	O
;	O
static	O
int	O
exitstatus	int
;	O
static	O
struct	O
fro	struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long)))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),long)
*	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
;	O
static	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
workstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
static	O
inline	O
bool	bool
longopt_maybe_p	(*(char),*(struct(bool,long,array(char))))->(bool)
(	O
const	O
char	O
*	O
arg	*(char)
,	O
const	O
s_unique	struct(bool,long,array(char))
const	O
*	O
u	struct(*(char),*(char))
)	O
{	O
const	O
char	O
*	O
equal	*(char)
=	O
u	struct(*(char),*(char))
->	O
eqval_p	bool
?	O
strchr	(*(char),int)->(*(char))
(	O
arg	*(char)
,	O
'='	O
)	O
:	O
NULL	O
;	O
size_t	long
len	char
=	O
equal	*(char)
?	O
(	O
size_t	long
)	O
(	O
equal	*(char)
-	O
arg	*(char)
)	O
:	O
strlen	(*(char))->(long)
(	O
arg	*(char)
)	O
;	O
return	O
!	O
(	O
u	struct(*(char),*(char))
->	O
minlen	long
>	O
len	char
)	O
&&	O
(	O
0	int
==	O
strncmp	(*(char),*(char),long)->(int)
(	O
arg	*(char)
,	O
u	struct(*(char),*(char))
->	O
full	array(char)
,	O
len	char
)	O
)	O
;	O
}	O
static	O
void	O
cleanup	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
FLOW	O
(	O
erroneousp	bool
)	O
)	O
exitstatus	int
=	O
DIFF_TROUBLE	int
;	O
fro_zclose	(*(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long))))->(void)
(	O
&	O
FLOW	O
(	O
from	*(struct)
)	O
)	O
;	O
fro_zclose	(*(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long))))->(void)
(	O
&	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
)	O
;	O
}	O
static	O
exiting	O
void	O
exiterr	*(()->(void))
(	O
void	O
)	O
{	O
tempunlink	()->(void)
(	O
)	O
;	O
exit_diff_trouble	()->(void)
(	O
)	O
;	O
}	O
static	O
char	O
const	O
*	O
setup_label	(*(char),array(char))->(*(char))
(	O
char	O
const	O
*	O
num	*(char)
,	O
char	O
const	O
date	*(char)
[	O
datesize	O
]	O
)	O
{	O
size_t	long
len	char
;	O
char	O
datestr	array(char)
[	O
datesize	O
+	O
zonelenmax	int
]	O
;	O
date2str	(array(char),array(char))->(*(char))
(	O
date	*(char)
,	O
datestr	array(char)
)	O
;	O
accf	(*(struct(*(char),*(struct),*(void),long)),*(char))->(void)
(	O
PLEXUS	O
,	O
"-L%s\t%s"	*(char)
,	O
MANI	O
(	O
filename	*(char)
)	O
,	O
datestr	array(char)
)	O
;	O
if	O
(	O
num	*(char)
)	O
accf	(*(struct(*(char),*(struct),*(void),long)),*(char))->(void)
(	O
PLEXUS	O
,	O
"\t%s"	*(char)
,	O
num	*(char)
)	O
;	O
return	O
finish_string	(*(struct(*(char),*(struct),*(void),long)),*(long))->(*(char))
(	O
PLEXUS	O
,	O
&	O
len	char
)	O
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
revnums	int
;	O
char	O
const	O
*	O
rev1	*(char)
,	O
*	O
rev2	*(char)
;	O
char	O
const	O
*	O
xrev1	*(char)
,	O
*	O
xrev2	*(char)
;	O
char	O
const	O
*	O
expandarg	*(char)
,	O
*	O
lexpandarg	*(char)
,	O
*	O
suffixarg	*(char)
,	O
*	O
versionarg	*(char)
,	O
*	O
zonearg	*(char)
;	O
int	O
file_labels	int
;	O
char	O
const	O
*	O
*	O
diff_label1	*(*(char))
,	O
*	O
*	O
diff_label2	*(*(char))
;	O
char	O
date2	array(char)
[	O
datesize	O
]	O
;	O
char	O
const	O
*	O
cov	array(*(char))
[	O
10	int
+	O
!	O
DIFF_L	int
]	O
;	O
char	O
const	O
*	O
*	O
diffv	*(*(char))
,	O
*	O
*	O
diffp	*(*(char))
,	O
*	O
*	O
diffpend	*(*(char))
;	O
char	O
const	O
*	O
*	O
pp	*(*(char))
,	O
*	O
diffvstr	*(char)
=	O
NULL	O
;	O
struct	O
cbuf	struct(*(char),long)
commarg	struct(*(char),long)
;	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
;	O
char	O
*	O
a	*(char)
,	O
*	O
dcp	*(char)
,	O
*	O
*	O
newargv	*(*(*(char)))
;	O
bool	bool
no_diff_means_no_output	bool
;	O
register	O
int	O
c	int
;	O
const	O
struct	O
program	struct(*(char),*(char),*(char),*(()->(void)))
program	struct(*(char),*(char),*(char),*(()->(void)))
=	O
{	O
.	O
invoke	*(char)
=	O
argv	*(*(char))
[	O
0	int
]	O
,	O
.	O
name	*(char)
=	O
"rcsdiff"	*(char)
,	O
.	O
help	*(char)
=	O
help	*(char)
,	O
.	O
exiterr	*(()->(void))
=	O
exiterr	*(()->(void))
}	O
;	O
CHECK_HV	O
(	O
)	O
;	O
gnurcs_init	(*(struct(*(char),*(char),*(char),*(()->(void)))))->(void)
(	O
&	O
program	struct(*(char),*(char),*(char),*(()->(void)))
)	O
;	O
exitstatus	int
=	O
DIFF_SUCCESS	int
;	O
revnums	int
=	O
0	int
;	O
rev1	*(char)
=	O
rev2	*(char)
=	O
xrev2	*(char)
=	O
NULL	O
;	O
file_labels	int
=	O
0	int
;	O
expandarg	*(char)
=	O
suffixarg	*(char)
=	O
versionarg	*(char)
=	O
zonearg	*(char)
=	O
NULL	O
;	O
no_diff_means_no_output	bool
=	O
true	int
;	O
BE	O
(	O
pe	*(char)
)	O
=	O
X_DEFAULT	*(char)
;	O
diffv	*(*(char))
=	O
pointer_array	(*(struct(*(char),*(struct),*(void),long)),long)->(*(void))
(	O
PLEXUS	O
,	O
(	O
1	int
+	O
argc	int
+	O
!	O
!	O
OPEN_O_BINARY	int
+	O
2	int
*	O
DIFF_L	int
+	O
2	int
)	O
)	O
;	O
diffp	*(*(char))
=	O
diffv	*(*(char))
+	O
1	int
;	O
*	O
diffp	*(*(char))
++	O
=	O
prog_diff	array(char)
;	O
argc	int
=	O
getRCSINIT	(int,*(*(char)),*(*(*(char))))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
&	O
newargv	*(*(*(char)))
)	O
;	O
argv	*(*(char))
=	O
newargv	*(*(*(char)))
;	O
while	O
(	O
a	*(char)
=	O
*	O
++	O
argv	*(*(char))
,	O
0	int
<	O
--	O
argc	int
&&	O
*	O
a	*(char)
++	O
==	O
'-'	O
)	O
{	O
dcp	*(char)
=	O
a	*(char)
;	O
while	O
(	O
(	O
c	int
=	O
*	O
a	*(char)
++	O
)	O
)	O
switch	O
(	O
c	int
)	O
{	O
case	O
'r'	O
:	O
switch	O
(	O
++	O
revnums	int
)	O
{	O
case	O
1	int
:	O
rev1	*(char)
=	O
a	*(char)
;	O
break	O
;	O
case	O
2	int
:	O
rev2	*(char)
=	O
a	*(char)
;	O
break	O
;	O
default	O
:	O
PERR	O
(	O
"too many %ss"	*(char)
,	O
ks_revno	array(char)
)	O
;	O
}	O
goto	O
option_handled	O
;	O
case	O
'-'	O
:	O
case	O
'D'	O
:	O
if	O
(	O
'D'	O
==	O
c	int
||	O
longopt_maybe_p	(*(char),*(struct(bool,long,array(char))))->(bool)
(	O
*	O
argv	*(*(char))
,	O
&	O
minus_D	struct(bool,long,array(char))
)	O
||	O
longopt_maybe_p	(*(char),*(struct(bool,long,array(char))))->(bool)
(	O
*	O
argv	*(*(char))
,	O
&	O
minus_y	struct(bool,long,array(char))
)	O
)	O
no_diff_means_no_output	bool
=	O
false	int
;	O
case	O
'C'	O
:	O
case	O
'F'	O
:	O
case	O
'I'	O
:	O
case	O
'L'	O
:	O
case	O
'U'	O
:	O
case	O
'W'	O
:	O
if	O
(	O
c	int
==	O
'L'	O
&&	O
++	O
file_labels	int
==	O
2	int
)	O
PFATAL	O
(	O
"too many -L options"	*(char)
)	O
;	O
*	O
dcp	*(char)
++	O
=	O
c	int
;	O
if	O
(	O
*	O
a	*(char)
)	O
do	O
*	O
dcp	*(char)
++	O
=	O
*	O
a	*(char)
++	O
;	O
while	O
(	O
*	O
a	*(char)
)	O
;	O
else	O
{	O
if	O
(	O
!	O
--	O
argc	int
)	O
PFATAL	O
(	O
"-%c needs following argument"	*(char)
,	O
c	int
)	O
;	O
*	O
diffp	*(*(char))
++	O
=	O
*	O
argv	*(*(char))
++	O
;	O
}	O
break	O
;	O
case	O
'y'	O
:	O
no_diff_means_no_output	bool
=	O
false	int
;	O
case	O
'B'	O
:	O
case	O
'H'	O
:	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
case	O
'a'	O
:	O
case	O
'b'	O
:	O
case	O
'c'	O
:	O
case	O
'd'	O
:	O
case	O
'e'	O
:	O
case	O
'f'	O
:	O
case	O
'h'	O
:	O
case	O
'i'	O
:	O
case	O
'n'	O
:	O
case	O
'p'	O
:	O
case	O
't'	O
:	O
case	O
'u'	O
:	O
case	O
'w'	O
:	O
*	O
dcp	*(char)
++	O
=	O
c	int
;	O
break	O
;	O
case	O
'q'	O
:	O
BE	O
(	O
quiet	bool
)	O
=	O
true	int
;	O
break	O
;	O
case	O
'x'	O
:	O
suffixarg	*(char)
=	O
*	O
argv	*(*(char))
;	O
BE	O
(	O
pe	*(char)
)	O
=	O
*	O
argv	*(*(char))
+	O
2	int
;	O
goto	O
option_handled	O
;	O
case	O
'z'	O
:	O
zonearg	*(char)
=	O
*	O
argv	*(*(char))
;	O
zone_set	(*(char))->(void)
(	O
*	O
argv	*(*(char))
+	O
2	int
)	O
;	O
goto	O
option_handled	O
;	O
case	O
'T'	O
:	O
if	O
(	O
*	O
a	*(char)
)	O
goto	O
unknown	O
;	O
break	O
;	O
case	O
'V'	O
:	O
versionarg	*(char)
=	O
*	O
argv	*(*(char))
;	O
setRCSversion	(*(char))->(void)
(	O
versionarg	*(char)
)	O
;	O
goto	O
option_handled	O
;	O
case	O
'k'	O
:	O
expandarg	*(char)
=	O
*	O
argv	*(*(char))
;	O
if	O
(	O
0	int
<=	O
str2expmode	(*(char))->(int)
(	O
expandarg	*(char)
+	O
2	int
)	O
)	O
goto	O
option_handled	O
;	O
default	O
:	O
unknown	O
:	O
bad_option	(*(char))->(void)
(	O
*	O
argv	*(*(char))
)	O
;	O
}	O
;	O
option_handled	O
:	O
if	O
(	O
dcp	*(char)
!=	O
*	O
argv	*(*(char))
+	O
1	int
)	O
{	O
*	O
dcp	*(char)
=	O
'\0'	O
;	O
*	O
diffp	*(*(char))
++	O
=	O
*	O
argv	*(*(char))
;	O
}	O
}	O
if	O
(	O
!	O
BE	O
(	O
quiet	bool
)	O
)	O
{	O
size_t	long
len	char
;	O
for	O
(	O
pp	*(*(char))
=	O
diffv	*(*(char))
+	O
2	int
;	O
pp	*(*(char))
<	O
diffp	*(*(char))
;	O
)	O
accf	(*(struct(*(char),*(struct),*(void),long)),*(char))->(void)
(	O
PLEXUS	O
,	O
" %s"	*(char)
,	O
*	O
pp	*(*(char))
++	O
)	O
;	O
diffvstr	*(char)
=	O
finish_string	(*(struct(*(char),*(struct),*(void),long)),*(long))->(*(char))
(	O
PLEXUS	O
,	O
&	O
len	char
)	O
;	O
}	O
diff_label1	*(*(char))
=	O
diff_label2	*(*(char))
=	O
NULL	O
;	O
if	O
(	O
file_labels	int
<	O
2	int
)	O
{	O
if	O
(	O
!	O
file_labels	int
)	O
diff_label1	*(*(char))
=	O
diffp	*(*(char))
++	O
;	O
diff_label2	*(*(char))
=	O
diffp	*(*(char))
++	O
;	O
}	O
diffpend	*(*(char))
=	O
diffp	*(*(char))
;	O
cov	array(*(char))
[	O
1	int
]	O
=	O
PEER_CO	O
(	O
)	O
;	O
cov	array(*(char))
[	O
2	int
]	O
=	O
"-q"	*(char)
;	O
if	O
(	O
FLOW	O
(	O
erroneousp	bool
)	O
)	O
cleanup	()->(void)
(	O
)	O
;	O
else	O
if	O
(	O
argc	int
<	O
1	int
)	O
PFATAL	O
(	O
"no input file"	*(char)
)	O
;	O
else	O
for	O
(	O
;	O
0	int
<	O
argc	int
;	O
cleanup	()->(void)
(	O
)	O
,	O
++	O
argv	*(*(char))
,	O
--	O
argc	int
)	O
{	O
struct	O
cbuf	struct(*(char),long)
numericrev	struct(*(char),long)
;	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
char	O
const	O
*	O
mani_filename	*(char)
,	O
*	O
defbr	*(char)
;	O
int	O
kws	int
;	O
ffree	()->(void)
(	O
)	O
;	O
if	O
(	O
pairnames	(int,*(*(char)),*((*(struct(*`,bool,struct`,*`,struct`,*`,int)))->(*(struct))),bool,bool)->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
rcsreadopen	(*(struct(*((*`)->(*`)),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long))),int)))->(*(struct))
,	O
true	int
,	O
false	int
)	O
<=	O
0	int
)	O
continue	O
;	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
REPO	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
mani_filename	*(char)
=	O
MANI	O
(	O
filename	*(char)
)	O
;	O
kws	int
=	O
BE	O
(	O
kws	int
)	O
;	O
defbr	*(char)
=	O
GROK	O
(	O
branch	*(char)
)	O
;	O
diagnose	(*(char))->(void)
(	O
"%sRCS file: %s"	*(char)
,	O
equal_line	array(char)
+	O
10	int
,	O
REPO	O
(	O
filename	*(char)
)	O
)	O
;	O
if	O
(	O
!	O
rev2	*(char)
)	O
{	O
if	O
(	O
!	O
(	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
=	O
fro_open	(*(char),*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)))
(	O
mani_filename	*(char)
,	O
FOPEN_R_WORK	*(char)
,	O
&	O
workstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
)	O
)	O
{	O
syserror_errno	O
(	O
mani_filename	*(char)
)	O
;	O
continue	O
;	O
}	O
}	O
if	O
(	O
!	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
{	O
RERR	O
(	O
"no revisions present"	*(char)
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
revnums	int
==	O
0	int
||	O
!	O
*	O
rev1	*(char)
)	O
rev1	*(char)
=	O
defbr	*(char)
?	O
defbr	*(char)
:	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
;	O
if	O
(	O
!	O
fully_numeric	(*(struct(*(char),long)),*(char),*(struct))->(bool)
(	O
&	O
numericrev	struct(*(char),long)
,	O
rev1	*(char)
,	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
)	O
)	O
continue	O
;	O
if	O
(	O
!	O
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
=	O
delta_from_ref	(*(char))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
(	O
numericrev	struct(*(char),long)
.	O
string	*(char)
)	O
)	O
)	O
continue	O
;	O
xrev1	*(char)
=	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
num	*(char)
;	O
if	O
(	O
diff_label1	*(*(char))
)	O
*	O
diff_label1	*(*(char))
=	O
setup_label	(*(char),array(char))->(*(char))
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
num	*(char)
,	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
date	*(char)
)	O
;	O
lexpandarg	*(char)
=	O
expandarg	*(char)
;	O
if	O
(	O
revnums	int
==	O
2	int
)	O
{	O
if	O
(	O
!	O
fully_numeric	(*(struct(*(char),long)),*(char),*(struct))->(bool)
(	O
&	O
numericrev	struct(*(char),long)
,	O
*	O
rev2	*(char)
?	O
rev2	*(char)
:	O
(	O
defbr	*(char)
?	O
defbr	*(char)
:	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
,	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
)	O
)	O
continue	O
;	O
if	O
(	O
!	O
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
=	O
delta_from_ref	(*(char))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
(	O
numericrev	struct(*(char),long)
.	O
string	*(char)
)	O
)	O
)	O
continue	O
;	O
xrev2	*(char)
=	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
num	*(char)
;	O
if	O
(	O
no_diff_means_no_output	bool
&&	O
xrev1	*(char)
==	O
xrev2	*(char)
)	O
continue	O
;	O
}	O
else	O
if	O
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
lockedby	*(char)
&&	O
!	O
lexpandarg	*(char)
&&	O
kws	int
==	O
kwsub_kv	int
&&	O
WORKMODE	O
(	O
REPO	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
.	O
st_mode	int
,	O
true	int
)	O
==	O
workstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
lexpandarg	*(char)
=	O
"-kkvl"	*(char)
;	O
fro_zclose	(*(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long))))->(void)
(	O
&	O
workptr	*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct`))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),long))
)	O
;	O
if	O
(	O
diff_label2	*(*(char))
)	O
{	O
if	O
(	O
revnums	int
==	O
2	int
)	O
*	O
diff_label2	*(*(char))
=	O
setup_label	(*(char),array(char))->(*(char))
(	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
num	*(char)
,	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
->	O
date	*(char)
)	O
;	O
else	O
{	O
time2date	(long,array(char))->(void)
(	O
workstat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mtime	O
,	O
date2	array(char)
)	O
;	O
*	O
diff_label2	*(*(char))
=	O
setup_label	(*(char),array(char))->(*(char))
(	O
NULL	O
,	O
date2	array(char)
)	O
;	O
}	O
}	O
commarg	struct(*(char),long)
=	O
minus_p	(*(char),*(char))->(struct(*(char),long))
(	O
xrev1	*(char)
,	O
rev1	*(char)
)	O
;	O
pp	*(*(char))
=	O
&	O
cov	array(*(char))
[	O
3	int
+	O
!	O
DIFF_L	int
]	O
;	O
*	O
pp	*(*(char))
++	O
=	O
commarg	struct(*(char),long)
.	O
string	*(char)
;	O
if	O
(	O
lexpandarg	*(char)
)	O
*	O
pp	*(*(char))
++	O
=	O
lexpandarg	*(char)
;	O
if	O
(	O
suffixarg	*(char)
)	O
*	O
pp	*(*(char))
++	O
=	O
suffixarg	*(char)
;	O
if	O
(	O
versionarg	*(char)
)	O
*	O
pp	*(*(char))
++	O
=	O
versionarg	*(char)
;	O
if	O
(	O
zonearg	*(char)
)	O
*	O
pp	*(*(char))
++	O
=	O
zonearg	*(char)
;	O
*	O
pp	*(*(char))
++	O
=	O
REPO	O
(	O
filename	*(char)
)	O
;	O
*	O
pp	*(*(char))
=	O
'\0'	O
;	O
diffp	*(*(char))
=	O
diffpend	*(*(char))
;	O
diffp	*(*(char))
[	O
0	int
]	O
=	O
maketemp	(int)->(*(char))
(	O
0	int
)	O
;	O
if	O
(	O
runv	(int,*(char),*(*(char)))->(int)
(	O
-	O
1	int
,	O
diffp	*(*(char))
[	O
0	int
]	O
,	O
cov	array(*(char))
)	O
)	O
{	O
RERR	O
(	O
"co failed"	*(char)
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
!	O
rev2	*(char)
)	O
{	O
diffp	*(*(char))
[	O
1	int
]	O
=	O
mani_filename	*(char)
;	O
if	O
(	O
*	O
mani_filename	*(char)
==	O
'-'	O
)	O
{	O
accf	(*(struct(*(char),*(struct),*(void),long)),*(char))->(void)
(	O
PLEXUS	O
,	O
".%c"	*(char)
,	O
SLASH	char
)	O
;	O
diffp	*(*(char))
[	O
1	int
]	O
=	O
str_save	(*(char))->(*(char))
(	O
mani_filename	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
commarg	struct(*(char),long)
=	O
minus_p	(*(char),*(char))->(struct(*(char),long))
(	O
xrev2	*(char)
,	O
rev2	*(char)
)	O
;	O
cov	array(*(char))
[	O
3	int
+	O
!	O
DIFF_L	int
]	O
=	O
commarg	struct(*(char),long)
.	O
string	*(char)
;	O
diffp	*(*(char))
[	O
1	int
]	O
=	O
maketemp	(int)->(*(char))
(	O
1	int
)	O
;	O
if	O
(	O
runv	(int,*(char),*(*(char)))->(int)
(	O
-	O
1	int
,	O
diffp	*(*(char))
[	O
1	int
]	O
,	O
cov	array(*(char))
)	O
)	O
{	O
RERR	O
(	O
"co failed"	*(char)
)	O
;	O
continue	O
;	O
}	O
}	O
if	O
(	O
!	O
rev2	*(char)
)	O
diagnose	(*(char))->(void)
(	O
"diff%s -r%s %s"	*(char)
,	O
diffvstr	*(char)
,	O
xrev1	*(char)
,	O
mani_filename	*(char)
)	O
;	O
else	O
diagnose	(*(char))->(void)
(	O
"diff%s -r%s -r%s"	*(char)
,	O
diffvstr	*(char)
,	O
xrev1	*(char)
,	O
xrev2	*(char)
)	O
;	O
diffp	*(*(char))
[	O
2	int
]	O
=	O
0	int
;	O
{	O
int	O
s	*(char)
=	O
runv	(int,*(char),*(*(char)))->(int)
(	O
-	O
1	int
,	O
NULL	O
,	O
diffv	*(*(char))
)	O
;	O
if	O
(	O
DIFF_TROUBLE	int
==	O
s	*(char)
)	O
MERR	O
(	O
"diff failed"	*(char)
)	O
;	O
if	O
(	O
DIFF_FAILURE	int
==	O
s	*(char)
&&	O
DIFF_SUCCESS	int
==	O
exitstatus	int
)	O
exitstatus	int
=	O
s	*(char)
;	O
}	O
}	O
tempunlink	()->(void)
(	O
)	O
;	O
gnurcs_goodbye	()->(void)
(	O
)	O
;	O
return	O
exitstatus	int
;	O
}	O
