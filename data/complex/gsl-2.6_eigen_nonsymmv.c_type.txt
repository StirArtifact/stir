static	O
void	O
nonsymmv_get_right_eigenvectors	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`,*`,*`,int,long,*`)))))->(void)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_eigen_nonsymmv_workspace	struct(long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),int,long,*(struct(long,long,long,long,int,*`,*`)))))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
static	O
void	O
nonsymmv_normalize_eigenvectors	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_eigen_nonsymmv_workspace	struct(long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),int,long,*(struct(long,long,long,long,int,*`,*`)))))
*	O
gsl_eigen_nonsymmv_alloc	(long)->(*(struct(long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`,*`,*`,int,long,*`)))))
(	O
const	O
size_t	long
n	long
)	O
{	O
gsl_eigen_nonsymmv_workspace	struct(long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),int,long,*(struct(long,long,long,long,int,*`,*`)))))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
if	O
(	O
n	long
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"matrix dimension must be positive integer"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
(	O
gsl_eigen_nonsymmv_workspace	struct(long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),int,long,*(struct(long,long,long,long,int,*`,*`)))))
*	O
)	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
gsl_eigen_nonsymmv_workspace	struct(long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),int,long,*(struct(long,long,long,long,int,*`,*`)))))
)	O
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workspace"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
size	long
=	O
n	long
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
NULL	O
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
nonsymm_workspace_p	*(struct(long,*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),int,long,*(struct(long,long,long,long,int,*(struct`),*(struct`)))))
=	O
gsl_eigen_nonsymm_alloc	(long)->(*(struct(long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),int,long,*(struct(long,long,long,long,int,*`,*`)))))
(	O
n	long
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
nonsymm_workspace_p	*(struct(long,*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),int,long,*(struct(long,long,long,long,int,*(struct`),*(struct`)))))
==	O
0	int
)	O
{	O
gsl_eigen_nonsymmv_free	(*(struct(long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`,*`,*`,int,long,*`)))))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for nonsymm workspace"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
gsl_eigen_nonsymm_params	(int,int,*(struct(long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),int,long,*(struct(long,long,long,long,int,*`,*`)))))->(void)
(	O
1	int
,	O
0	int
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
nonsymm_workspace_p	*(struct(long,*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),int,long,*(struct(long,long,long,long,int,*(struct`),*(struct`)))))
)	O
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	long
)	O
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	long
)	O
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work3	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	long
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
||	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
||	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work3	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_eigen_nonsymmv_free	(*(struct(long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`,*`,*`,int,long,*`)))))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for nonsymmv additional workspace"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
return	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
}	O
void	O
gsl_eigen_nonsymmv_free	(*(struct(long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`,*`,*`,int,long,*`)))))->(void)
(	O
gsl_eigen_nonsymmv_workspace	struct(long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),int,long,*(struct(long,long,long,long,int,*`,*`)))))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
RETURN_IF_NULL	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
nonsymm_workspace_p	*(struct(long,*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),int,long,*(struct(long,long,long,long,int,*(struct`),*(struct`)))))
)	O
gsl_eigen_nonsymm_free	(*(struct(long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),int,long,*(struct(long,long,long,long,int,*`,*`)))))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
nonsymm_workspace_p	*(struct(long,*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),int,long,*(struct(long,long,long,long,int,*(struct`),*(struct`)))))
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work3	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work3	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
}	O
void	O
gsl_eigen_nonsymmv_params	(int,*(struct(long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`,*`,*`,int,long,*`)))))->(void)
(	O
const	O
int	O
balance	int
,	O
gsl_eigen_nonsymmv_workspace	struct(long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),int,long,*(struct(long,long,long,long,int,*`,*`)))))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
gsl_eigen_nonsymm_params	(int,int,*(struct(long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),int,long,*(struct(long,long,long,long,int,*`,*`)))))->(void)
(	O
1	int
,	O
balance	int
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
nonsymm_workspace_p	*(struct(long,*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),int,long,*(struct(long,long,long,long,int,*(struct`),*(struct`)))))
)	O
;	O
}	O
int	O
gsl_eigen_nonsymmv	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`,*`,*`,int,long,*`)))))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_eigen_nonsymmv_workspace	struct(long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),int,long,*(struct(long,long,long,long,int,*`,*`)))))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
A	*(float)
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square to compute eigenvalues"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"eigenvalue vector must match matrix size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"eigenvector matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"eigenvector matrix has wrong size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
s	*(float)
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
size1	long
=	O
N	int
;	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
size2	long
=	O
N	int
;	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
tda	long
=	O
2	int
*	O
N	int
;	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
data	*(long double)
=	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
data	*(long double)
;	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
block	*(struct(long,*(long double)))
=	O
0	int
;	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
owner	int
=	O
0	int
;	O
s	*(float)
=	O
gsl_eigen_nonsymm_Z	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),int,long,*(struct(long,long,long,long,int,*`,*`)))))->(int)
(	O
A	*(float)
,	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
nonsymm_workspace_p	*(struct(long,*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),int,long,*(struct(long,long,long,long,int,*(struct`),*(struct`)))))
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
gsl_matrix_memcpy	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
if	O
(	O
s	*(float)
==	O
GSL_SUCCESS	int
)	O
{	O
nonsymmv_get_right_eigenvectors	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`,*`,*`,int,long,*`)))))->(void)
(	O
A	*(float)
,	O
&	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
nonsymmv_normalize_eigenvectors	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
return	O
s	*(float)
;	O
}	O
}	O
int	O
gsl_eigen_nonsymmv_Z	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`,*`,*`,int,long,*`)))))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_eigen_nonsymmv_workspace	struct(long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),int,long,*(struct(long,long,long,long,int,*`,*`)))))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
if	O
(	O
A	*(float)
->	O
size1	long
!=	O
A	*(float)
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square to compute eigenvalues/eigenvectors"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
A	*(float)
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"eigenvalue vector must match matrix size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"eigenvector matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
A	*(float)
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"eigenvector matrix has wrong size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
(	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
||	O
(	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
A	*(float)
->	O
size1	long
)	O
)	O
{	O
GSL_ERROR	O
(	O
"Z matrix has wrong dimensions"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
s	*(float)
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
s	*(float)
=	O
gsl_eigen_nonsymmv	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`,*`,*`,int,long,*`)))))->(int)
(	O
A	*(float)
,	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
NULL	O
;	O
return	O
s	*(float)
;	O
}	O
}	O
static	O
void	O
nonsymmv_get_right_eigenvectors	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`,*`,*`,int,long,*`)))))->(void)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_eigen_nonsymmv_workspace	struct(long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),int,long,*(struct(long,long,long,long,int,*`,*`)))))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
const	O
size_t	long
N	int
=	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
const	O
double	O
smlnum	double
=	O
GSL_DBL_MIN	int
*	O
N	int
/	O
GSL_DBL_EPSILON	int
;	O
const	O
double	O
bignum	double
=	O
(	O
1.0	int
-	O
GSL_DBL_EPSILON	int
)	O
/	O
smlnum	double
;	O
int	O
i	long
;	O
size_t	long
iu	long
,	O
ju	long
,	O
ii	long
;	O
gsl_complex	struct(array(double))
lambda	double
;	O
double	O
lambda_re	double
,	O
lambda_im	double
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
Tv	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
Zv	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
y	double
,	O
y2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
ev	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
ev2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
double	O
dat	array(long double)
[	O
4	int
]	O
,	O
dat_X	array(double)
[	O
4	int
]	O
;	O
double	O
scale	double
;	O
double	O
xnorm	*(double)
;	O
gsl_vector_complex_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
ecol	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
ecol2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
int	O
complex_pair	int
;	O
double	O
smin	double
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work3	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0.0	int
)	O
;	O
for	O
(	O
ju	long
=	O
1	int
;	O
ju	long
<	O
N	int
;	O
++	O
ju	long
)	O
{	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work3	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
ju	long
,	O
0.0	int
)	O
;	O
for	O
(	O
iu	long
=	O
0	int
;	O
iu	long
<	O
ju	long
;	O
++	O
iu	long
)	O
{	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work3	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
ju	long
,	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work3	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
ju	long
)	O
+	O
fabs	(double)->(double)
(	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
,	O
ju	long
)	O
)	O
)	O
;	O
}	O
}	O
for	O
(	O
i	long
=	O
(	O
int	O
)	O
N	int
-	O
1	int
;	O
i	long
>=	O
0	int
;	O
--	O
i	long
)	O
{	O
iu	long
=	O
(	O
size_t	long
)	O
i	long
;	O
lambda_re	double
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
,	O
iu	long
)	O
;	O
if	O
(	O
iu	long
!=	O
0	int
&&	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
,	O
iu	long
-	O
1	int
)	O
!=	O
0.0	int
)	O
{	O
lambda_im	double
=	O
sqrt	(double)->(double)
(	O
fabs	(double)->(double)
(	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
,	O
iu	long
-	O
1	int
)	O
)	O
)	O
*	O
sqrt	(double)->(double)
(	O
fabs	(double)->(double)
(	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
-	O
1	int
,	O
iu	long
)	O
)	O
)	O
;	O
}	O
else	O
{	O
lambda_im	double
=	O
0.0	int
;	O
}	O
GSL_SET_COMPLEX	O
(	O
&	O
lambda	double
,	O
lambda_re	double
,	O
lambda_im	double
)	O
;	O
smin	double
=	O
GSL_MAX	O
(	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	(double)->(double)
(	O
lambda_re	double
)	O
+	O
fabs	(double)->(double)
(	O
lambda_im	double
)	O
)	O
,	O
smlnum	double
)	O
;	O
smin	double
=	O
GSL_MAX	O
(	O
smin	double
,	O
GSL_NONSYMMV_SMLNUM	O
)	O
;	O
if	O
(	O
lambda_im	double
==	O
0.0	int
)	O
{	O
int	O
k	long
,	O
l	int
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
bv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
xv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector_complex_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,struct(array(double)))->(void)
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
,	O
lambda	double
)	O
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
i	long
;	O
++	O
k	long
)	O
{	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
(	O
size_t	long
)	O
k	long
,	O
-	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
(	O
size_t	long
)	O
k	long
,	O
iu	long
)	O
)	O
;	O
}	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
,	O
1.0	int
)	O
;	O
for	O
(	O
l	int
=	O
i	long
-	O
1	int
;	O
l	int
>=	O
0	int
;	O
--	O
l	int
)	O
{	O
size_t	long
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
(	O
size_t	long
)	O
l	int
;	O
if	O
(	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
complex_pair	int
=	O
0	int
;	O
else	O
complex_pair	int
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
-	O
1	int
)	O
!=	O
0.0	int
;	O
if	O
(	O
!	O
complex_pair	int
)	O
{	O
double	O
x	double
;	O
Tv	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
1	int
,	O
1	int
)	O
;	O
bv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
dat	array(long double)
,	O
1	int
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
&	O
bv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
,	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
)	O
;	O
xv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
dat_X	array(double)
,	O
1	int
)	O
;	O
gsl_schur_solve_equation	(double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),double)->(int)
(	O
1.0	int
,	O
&	O
Tv	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
lambda_re	double
,	O
1.0	int
,	O
1.0	int
,	O
&	O
bv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
xv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
scale	double
,	O
&	O
xnorm	*(double)
,	O
smin	double
)	O
;	O
x	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
&	O
xv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
)	O
;	O
if	O
(	O
xnorm	*(double)
>	O
1.0	int
)	O
{	O
if	O
(	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work3	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
>	O
bignum	double
/	O
xnorm	*(double)
)	O
{	O
x	double
/=	O
xnorm	*(double)
;	O
scale	double
/=	O
xnorm	*(double)
;	O
}	O
}	O
if	O
(	O
scale	double
!=	O
1.0	int
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
wv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
wv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
iu	long
+	O
1	int
)	O
;	O
gsl_blas_dscal	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
scale	double
,	O
&	O
wv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
x	double
)	O
;	O
if	O
(	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
>	O
0	int
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_blas_daxpy	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
-	O
x	double
,	O
&	O
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
}	O
else	O
{	O
double	O
x11	double
,	O
x21	double
;	O
Tv	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
-	O
1	int
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
-	O
1	int
,	O
2	int
,	O
2	int
)	O
;	O
bv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
dat	array(long double)
,	O
2	int
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
&	O
bv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
,	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
-	O
1	int
)	O
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
&	O
bv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1	int
,	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
)	O
;	O
xv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
dat_X	array(double)
,	O
2	int
)	O
;	O
gsl_schur_solve_equation	(double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),double)->(int)
(	O
1.0	int
,	O
&	O
Tv	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
lambda_re	double
,	O
1.0	int
,	O
1.0	int
,	O
&	O
bv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
xv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
scale	double
,	O
&	O
xnorm	*(double)
,	O
smin	double
)	O
;	O
x11	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
&	O
xv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
)	O
;	O
x21	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
&	O
xv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1	int
)	O
;	O
if	O
(	O
xnorm	*(double)
>	O
1.0	int
)	O
{	O
double	O
beta	long double
;	O
beta	long double
=	O
GSL_MAX	O
(	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work3	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
-	O
1	int
)	O
,	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work3	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
)	O
;	O
if	O
(	O
beta	long double
>	O
bignum	double
/	O
xnorm	*(double)
)	O
{	O
x11	double
/=	O
xnorm	*(double)
;	O
x21	double
/=	O
xnorm	*(double)
;	O
scale	double
/=	O
xnorm	*(double)
;	O
}	O
}	O
if	O
(	O
scale	double
!=	O
1.0	int
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
wv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
wv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
iu	long
+	O
1	int
)	O
;	O
gsl_blas_dscal	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
scale	double
,	O
&	O
wv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
-	O
1	int
,	O
x11	double
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
x21	double
)	O
;	O
if	O
(	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
>	O
1	int
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
-	O
1	int
,	O
0	int
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
-	O
1	int
)	O
;	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
-	O
1	int
)	O
;	O
gsl_blas_daxpy	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
-	O
x11	double
,	O
&	O
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
-	O
1	int
)	O
;	O
gsl_blas_daxpy	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
-	O
x21	double
,	O
&	O
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
--	O
l	int
;	O
}	O
}	O
ecol	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
)	O
;	O
y	double
=	O
gsl_matrix_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
)	O
;	O
if	O
(	O
iu	long
>	O
0	int
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
x	double
;	O
Zv	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
N	int
,	O
iu	long
)	O
;	O
x	double
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
iu	long
)	O
;	O
gsl_blas_dgemv	(enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasNoTrans	int
,	O
1.0	int
,	O
&	O
Zv	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
)	O
,	O
&	O
y	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
ev	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_complex_real	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
ecol	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
ev2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_complex_imag	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
ecol	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
scale	double
=	O
0.0	int
;	O
for	O
(	O
ii	long
=	O
0	int
;	O
ii	long
<	O
N	int
;	O
++	O
ii	long
)	O
{	O
double	O
a	struct(array(double))
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
&	O
y	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
ii	long
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
&	O
ev	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
ii	long
,	O
a	struct(array(double))
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
&	O
ev2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
ii	long
,	O
0.0	int
)	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
a	struct(array(double))
)	O
>	O
scale	double
)	O
scale	double
=	O
fabs	(double)->(double)
(	O
a	struct(array(double))
)	O
;	O
}	O
if	O
(	O
scale	double
!=	O
0.0	int
)	O
scale	double
=	O
1.0	int
/	O
scale	double
;	O
gsl_blas_dscal	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
scale	double
,	O
&	O
ev	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
else	O
{	O
gsl_vector_complex_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
bv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
xv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
size_t	long
k	long
;	O
int	O
l	int
;	O
gsl_complex	struct(array(double))
lambda2	struct(array(double))
;	O
GSL_SET_REAL	O
(	O
&	O
lambda2	struct(array(double))
,	O
GSL_REAL	O
(	O
lambda	double
)	O
)	O
;	O
GSL_SET_IMAG	O
(	O
&	O
lambda2	struct(array(double))
,	O
-	O
GSL_IMAG	O
(	O
lambda	double
)	O
)	O
;	O
gsl_vector_complex_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,struct(array(double)))->(void)
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
-	O
1	int
,	O
lambda	double
)	O
;	O
gsl_vector_complex_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,struct(array(double)))->(void)
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
,	O
lambda2	struct(array(double))
)	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
-	O
1	int
,	O
iu	long
)	O
)	O
>=	O
fabs	(double)->(double)
(	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
,	O
iu	long
-	O
1	int
)	O
)	O
)	O
{	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
-	O
1	int
,	O
1.0	int
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
,	O
lambda_im	double
/	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
-	O
1	int
,	O
iu	long
)	O
)	O
;	O
}	O
else	O
{	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
-	O
1	int
,	O
-	O
lambda_im	double
/	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
,	O
iu	long
-	O
1	int
)	O
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
,	O
1.0	int
)	O
;	O
}	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
,	O
0.0	int
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
-	O
1	int
,	O
0.0	int
)	O
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
iu	long
-	O
1	int
;	O
++	O
k	long
)	O
{	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
k	long
,	O
-	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
-	O
1	int
)	O
*	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
k	long
,	O
iu	long
-	O
1	int
)	O
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
k	long
,	O
-	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
)	O
*	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
k	long
,	O
iu	long
)	O
)	O
;	O
}	O
for	O
(	O
l	int
=	O
i	long
-	O
2	int
;	O
l	int
>=	O
0	int
;	O
--	O
l	int
)	O
{	O
size_t	long
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
(	O
size_t	long
)	O
l	int
;	O
if	O
(	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
complex_pair	int
=	O
0	int
;	O
else	O
complex_pair	int
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
-	O
1	int
)	O
!=	O
0.0	int
;	O
if	O
(	O
!	O
complex_pair	int
)	O
{	O
gsl_complex	struct(array(double))
bval	struct(array(double))
;	O
gsl_complex	struct(array(double))
x	double
;	O
Tv	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
1	int
,	O
1	int
)	O
;	O
bv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_complex_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
dat	array(long double)
,	O
1	int
)	O
;	O
xv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_complex_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
dat_X	array(double)
,	O
1	int
)	O
;	O
GSL_SET_COMPLEX	O
(	O
&	O
bval	struct(array(double))
,	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
,	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
)	O
;	O
gsl_vector_complex_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,struct(array(double)))->(void)
(	O
&	O
bv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
,	O
bval	struct(array(double))
)	O
;	O
gsl_schur_solve_equation_z	(double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(array(double))),double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),double)->(int)
(	O
1.0	int
,	O
&	O
Tv	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
lambda	double
,	O
1.0	int
,	O
1.0	int
,	O
&	O
bv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
xv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
scale	double
,	O
&	O
xnorm	*(double)
,	O
smin	double
)	O
;	O
if	O
(	O
xnorm	*(double)
>	O
1.0	int
)	O
{	O
if	O
(	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work3	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
>	O
bignum	double
/	O
xnorm	*(double)
)	O
{	O
gsl_blas_zdscal	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
1.0	int
/	O
xnorm	*(double)
,	O
&	O
xv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
scale	double
/=	O
xnorm	*(double)
;	O
}	O
}	O
if	O
(	O
scale	double
!=	O
1.0	int
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
wv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
wv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
iu	long
+	O
1	int
)	O
;	O
gsl_blas_dscal	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
scale	double
,	O
&	O
wv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
wv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
iu	long
+	O
1	int
)	O
;	O
gsl_blas_dscal	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
scale	double
,	O
&	O
wv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
x	double
=	O
gsl_vector_complex_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(struct(array(double)))
(	O
&	O
xv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
GSL_REAL	O
(	O
x	double
)	O
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
GSL_IMAG	O
(	O
x	double
)	O
)	O
;	O
if	O
(	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
>	O
0	int
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_blas_daxpy	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
-	O
GSL_REAL	O
(	O
x	double
)	O
,	O
&	O
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_blas_daxpy	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
-	O
GSL_IMAG	O
(	O
x	double
)	O
,	O
&	O
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
}	O
else	O
{	O
gsl_complex	struct(array(double))
b1	*(float)
,	O
b2	float
,	O
x1	double
,	O
x2	double
;	O
Tv	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
-	O
1	int
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
-	O
1	int
,	O
2	int
,	O
2	int
)	O
;	O
bv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_complex_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
dat	array(long double)
,	O
2	int
)	O
;	O
xv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_complex_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
dat_X	array(double)
,	O
2	int
)	O
;	O
GSL_SET_COMPLEX	O
(	O
&	O
b1	*(float)
,	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
-	O
1	int
)	O
,	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
-	O
1	int
)	O
)	O
;	O
GSL_SET_COMPLEX	O
(	O
&	O
b2	float
,	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
,	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
)	O
;	O
gsl_vector_complex_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,struct(array(double)))->(void)
(	O
&	O
bv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
,	O
b1	*(float)
)	O
;	O
gsl_vector_complex_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,struct(array(double)))->(void)
(	O
&	O
bv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1	int
,	O
b2	float
)	O
;	O
gsl_schur_solve_equation_z	(double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(array(double))),double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),double)->(int)
(	O
1.0	int
,	O
&	O
Tv	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
lambda	double
,	O
1.0	int
,	O
1.0	int
,	O
&	O
bv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
xv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
scale	double
,	O
&	O
xnorm	*(double)
,	O
smin	double
)	O
;	O
x1	double
=	O
gsl_vector_complex_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(struct(array(double)))
(	O
&	O
xv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
)	O
;	O
x2	double
=	O
gsl_vector_complex_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(struct(array(double)))
(	O
&	O
xv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1	int
)	O
;	O
if	O
(	O
xnorm	*(double)
>	O
1.0	int
)	O
{	O
double	O
beta	long double
;	O
beta	long double
=	O
GSL_MAX	O
(	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work3	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
-	O
1	int
)	O
,	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work3	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
)	O
;	O
if	O
(	O
beta	long double
>	O
bignum	double
/	O
xnorm	*(double)
)	O
{	O
gsl_blas_zdscal	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
1.0	int
/	O
xnorm	*(double)
,	O
&	O
xv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
scale	double
/=	O
xnorm	*(double)
;	O
}	O
}	O
if	O
(	O
scale	double
!=	O
1.0	int
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
wv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
wv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
iu	long
+	O
1	int
)	O
;	O
gsl_blas_dscal	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
scale	double
,	O
&	O
wv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
wv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
iu	long
+	O
1	int
)	O
;	O
gsl_blas_dscal	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
scale	double
,	O
&	O
wv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
-	O
1	int
,	O
GSL_REAL	O
(	O
x1	double
)	O
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
GSL_REAL	O
(	O
x2	double
)	O
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
-	O
1	int
,	O
GSL_IMAG	O
(	O
x1	double
)	O
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
GSL_IMAG	O
(	O
x2	double
)	O
)	O
;	O
if	O
(	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
>	O
1	int
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
v3	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
v4	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
-	O
1	int
,	O
0	int
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
-	O
1	int
)	O
;	O
v4	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
-	O
1	int
)	O
;	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
-	O
1	int
)	O
;	O
v3	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
lu	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
-	O
1	int
)	O
;	O
gsl_blas_daxpy	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
-	O
GSL_REAL	O
(	O
x1	double
)	O
,	O
&	O
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_daxpy	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
-	O
GSL_REAL	O
(	O
x2	double
)	O
,	O
&	O
v4	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_daxpy	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
-	O
GSL_IMAG	O
(	O
x1	double
)	O
,	O
&	O
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
v3	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_daxpy	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
-	O
GSL_IMAG	O
(	O
x2	double
)	O
,	O
&	O
v4	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
v3	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
--	O
l	int
;	O
}	O
}	O
y	double
=	O
gsl_matrix_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
-	O
1	int
)	O
;	O
y2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
)	O
;	O
if	O
(	O
iu	long
>	O
1	int
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
x	double
;	O
Zv	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
N	int
,	O
iu	long
-	O
1	int
)	O
;	O
x	double
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
iu	long
-	O
1	int
)	O
;	O
gsl_blas_dgemv	(enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasNoTrans	int
,	O
1.0	int
,	O
&	O
Zv	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
-	O
1	int
)	O
,	O
&	O
y	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
x	double
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
iu	long
-	O
1	int
)	O
;	O
gsl_blas_dgemv	(enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasNoTrans	int
,	O
1.0	int
,	O
&	O
Zv	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
)	O
,	O
&	O
y2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
else	O
{	O
gsl_blas_dscal	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
-	O
1	int
)	O
,	O
&	O
y	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_dscal	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
work2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
)	O
,	O
&	O
y2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
ecol	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
-	O
1	int
)	O
;	O
ecol2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
iu	long
)	O
;	O
ev	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_complex_imag	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
ecol	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
ev2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_complex_imag	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
ecol2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
scale	double
=	O
0.0	int
;	O
for	O
(	O
ii	long
=	O
0	int
;	O
ii	long
<	O
N	int
;	O
++	O
ii	long
)	O
{	O
double	O
a	struct(array(double))
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
&	O
y2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
ii	long
)	O
;	O
scale	double
=	O
GSL_MAX	O
(	O
scale	double
,	O
fabs	(double)->(double)
(	O
a	struct(array(double))
)	O
+	O
fabs	(double)->(double)
(	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
&	O
y	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
ii	long
)	O
)	O
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
&	O
ev	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
ii	long
,	O
a	struct(array(double))
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
&	O
ev2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
ii	long
,	O
-	O
a	struct(array(double))
)	O
;	O
}	O
ev	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_complex_real	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
ecol	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
ev2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_complex_real	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
ecol2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
for	O
(	O
ii	long
=	O
0	int
;	O
ii	long
<	O
N	int
;	O
++	O
ii	long
)	O
{	O
double	O
a	struct(array(double))
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
&	O
y	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
ii	long
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
&	O
ev	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
ii	long
,	O
a	struct(array(double))
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
&	O
ev2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
ii	long
,	O
a	struct(array(double))
)	O
;	O
}	O
if	O
(	O
scale	double
!=	O
0.0	int
)	O
scale	double
=	O
1.0	int
/	O
scale	double
;	O
gsl_blas_zdscal	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
scale	double
,	O
&	O
ecol	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_zdscal	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
scale	double
,	O
&	O
ecol2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
--	O
i	long
;	O
}	O
}	O
}	O
static	O
void	O
nonsymmv_normalize_eigenvectors	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
N	int
=	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
size_t	long
i	long
;	O
gsl_complex	struct(array(double))
ei	struct(array(double))
;	O
gsl_vector_complex_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
vi	double
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
re	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
im	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
double	O
scale	double
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
ei	struct(array(double))
=	O
gsl_vector_complex_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(struct(array(double)))
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
vi	double
=	O
gsl_matrix_complex_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
re	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_complex_real	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
vi	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
GSL_IMAG	O
(	O
ei	struct(array(double))
)	O
==	O
0.0	int
)	O
{	O
scale	double
=	O
1.0	int
/	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
&	O
re	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_dscal	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
scale	double
,	O
&	O
re	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
else	O
if	O
(	O
GSL_IMAG	O
(	O
ei	struct(array(double))
)	O
>	O
0.0	int
)	O
{	O
im	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_complex_imag	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
vi	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
scale	double
=	O
1.0	int
/	O
gsl_hypot	(double,double)->(double)
(	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
&	O
re	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
,	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
&	O
im	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
)	O
;	O
gsl_blas_zdscal	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
scale	double
,	O
&	O
vi	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
vi	double
=	O
gsl_matrix_complex_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
+	O
1	int
)	O
;	O
gsl_blas_zdscal	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
scale	double
,	O
&	O
vi	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
}	O
}	O
