extern	O
fragS	O
zero_address_frag	O
;	O
extern	O
fragS	O
predefined_address_frag	O
;	O
static	O
int	O
totalfrags	O
;	O
int	O
get_frag_count	O
(	O
void	O
)	O
{	O
return	O
totalfrags	O
;	O
}	O
void	O
clear_frag_count	O
(	O
void	O
)	O
{	O
totalfrags	O
=	O
0	int
;	O
}	O
void	O
frag_init	O
(	O
void	O
)	O
{	O
zero_address_frag	O
.	O
fr_type	O
=	O
rs_fill	O
;	O
predefined_address_frag	O
.	O
fr_type	O
=	O
rs_fill	O
;	O
}	O
static	O
void	O
frag_alloc_check	O
(	O
const	O
struct	O
obstack	O
*	O
ob	O
)	O
{	O
if	O
(	O
ob	O
->	O
chunk_size	O
==	O
0	int
)	O
{	O
as_bad	O
(	O
_	O
(	O
"attempt to allocate data in absolute section"	*(char)
)	O
)	O
;	O
subseg_set	O
(	O
text_section	O
,	O
0	int
)	O
;	O
}	O
if	O
(	O
mri_common_symbol	O
!=	O
NULL	O
)	O
{	O
as_bad	O
(	O
_	O
(	O
"attempt to allocate data in common section"	*(char)
)	O
)	O
;	O
mri_common_symbol	O
=	O
NULL	O
;	O
}	O
}	O
fragS	O
*	O
frag_alloc	O
(	O
struct	O
obstack	O
*	O
ob	O
)	O
{	O
fragS	O
*	O
ptr	*(*(char))
;	O
int	O
oalign	O
;	O
(	O
void	O
)	O
obstack_alloc	O
(	O
ob	O
,	O
0	int
)	O
;	O
oalign	O
=	O
obstack_alignment_mask	O
(	O
ob	O
)	O
;	O
obstack_alignment_mask	O
(	O
ob	O
)	O
=	O
0	int
;	O
ptr	*(*(char))
=	O
(	O
fragS	O
*	O
)	O
obstack_alloc	O
(	O
ob	O
,	O
SIZEOF_STRUCT_FRAG	O
)	O
;	O
obstack_alignment_mask	O
(	O
ob	O
)	O
=	O
oalign	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
ptr	*(*(char))
,	O
0	int
,	O
SIZEOF_STRUCT_FRAG	O
)	O
;	O
totalfrags	O
++	O
;	O
return	O
ptr	*(*(char))
;	O
}	O
void	O
frag_grow	O
(	O
size_t	long
nchars	O
)	O
{	O
if	O
(	O
obstack_room	O
(	O
&	O
frchain_now	O
->	O
frch_obstack	O
)	O
<	O
nchars	O
)	O
{	O
size_t	long
oldc	O
;	O
size_t	long
newc	O
;	O
if	O
(	O
nchars	O
<	O
0x10000	int
)	O
newc	O
=	O
2	int
*	O
nchars	O
;	O
else	O
newc	O
=	O
nchars	O
+	O
0x10000	int
;	O
newc	O
+=	O
SIZEOF_STRUCT_FRAG	O
;	O
if	O
(	O
newc	O
<	O
nchars	O
)	O
as_fatal	O
(	O
ngettext	O
(	O
"can't extend frag %lu char"	*(char)
,	O
"can't extend frag %lu chars"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
nchars	O
)	O
,	O
(	O
unsigned	O
long	O
)	O
nchars	O
)	O
;	O
oldc	O
=	O
obstack_chunk_size	O
(	O
&	O
frchain_now	O
->	O
frch_obstack	O
)	O
;	O
if	O
(	O
newc	O
>	O
oldc	O
)	O
obstack_chunk_size	O
(	O
&	O
frchain_now	O
->	O
frch_obstack	O
)	O
=	O
newc	O
;	O
while	O
(	O
obstack_room	O
(	O
&	O
frchain_now	O
->	O
frch_obstack	O
)	O
<	O
nchars	O
)	O
{	O
frag_wane	O
(	O
frag_now	O
)	O
;	O
frag_new	O
(	O
0	int
)	O
;	O
}	O
obstack_chunk_size	O
(	O
&	O
frchain_now	O
->	O
frch_obstack	O
)	O
=	O
oldc	O
;	O
}	O
}	O
void	O
frag_new	O
(	O
size_t	long
old_frags_var_max_size	O
)	O
{	O
fragS	O
*	O
former_last_fragP	O
;	O
frchainS	O
*	O
frchP	O
;	O
gas_assert	O
(	O
frchain_now	O
->	O
frch_last	O
==	O
frag_now	O
)	O
;	O
frag_now	O
->	O
fr_fix	O
=	O
frag_now_fix_octets	O
(	O
)	O
;	O
gas_assert	O
(	O
frag_now	O
->	O
fr_fix	O
>=	O
old_frags_var_max_size	O
)	O
;	O
frag_now	O
->	O
fr_fix	O
-=	O
old_frags_var_max_size	O
;	O
gas_assert	O
(	O
frag_now	O
->	O
fr_type	O
!=	O
0	int
)	O
;	O
obstack_finish	O
(	O
&	O
frchain_now	O
->	O
frch_obstack	O
)	O
;	O
frchP	O
=	O
frchain_now	O
;	O
know	O
(	O
frchP	O
)	O
;	O
former_last_fragP	O
=	O
frchP	O
->	O
frch_last	O
;	O
gas_assert	O
(	O
former_last_fragP	O
!=	O
0	int
)	O
;	O
gas_assert	O
(	O
former_last_fragP	O
==	O
frag_now	O
)	O
;	O
frag_now	O
=	O
frag_alloc	O
(	O
&	O
frchP	O
->	O
frch_obstack	O
)	O
;	O
frag_now	O
->	O
fr_file	O
=	O
as_where	O
(	O
&	O
frag_now	O
->	O
fr_line	O
)	O
;	O
former_last_fragP	O
->	O
fr_next	O
=	O
frag_now	O
;	O
frchP	O
->	O
frch_last	O
=	O
frag_now	O
;	O
{	O
extern	O
struct	O
list_info_struct	O
*	O
listing_tail	O
;	O
frag_now	O
->	O
line	O
=	O
listing_tail	O
;	O
}	O
gas_assert	O
(	O
frchain_now	O
->	O
frch_last	O
==	O
frag_now	O
)	O
;	O
frag_now	O
->	O
fr_next	O
=	O
NULL	O
;	O
}	O
char	O
*	O
frag_more	O
(	O
size_t	long
nchars	O
)	O
{	O
char	O
*	O
retval	O
;	O
frag_alloc_check	O
(	O
&	O
frchain_now	O
->	O
frch_obstack	O
)	O
;	O
frag_grow	O
(	O
nchars	O
)	O
;	O
retval	O
=	O
obstack_next_free	O
(	O
&	O
frchain_now	O
->	O
frch_obstack	O
)	O
;	O
obstack_blank_fast	O
(	O
&	O
frchain_now	O
->	O
frch_obstack	O
,	O
nchars	O
)	O
;	O
return	O
retval	O
;	O
}	O
static	O
void	O
frag_var_init	O
(	O
relax_stateT	O
type	char
,	O
size_t	long
max_chars	O
,	O
size_t	long
var	O
,	O
relax_substateT	O
subtype	O
,	O
symbolS	O
*	O
symbol	*(struct)
,	O
offsetT	O
offset	long
,	O
char	O
*	O
opcode	O
)	O
{	O
frag_now	O
->	O
fr_var	O
=	O
var	O
;	O
frag_now	O
->	O
fr_type	O
=	O
type	char
;	O
frag_now	O
->	O
fr_subtype	O
=	O
subtype	O
;	O
frag_now	O
->	O
fr_symbol	O
=	O
symbol	*(struct)
;	O
frag_now	O
->	O
fr_offset	O
=	O
offset	long
;	O
frag_now	O
->	O
fr_opcode	O
=	O
opcode	O
;	O
TC_FRAG_INIT	O
(	O
frag_now	O
,	O
max_chars	O
)	O
;	O
frag_now	O
->	O
fr_file	O
=	O
as_where	O
(	O
&	O
frag_now	O
->	O
fr_line	O
)	O
;	O
frag_new	O
(	O
max_chars	O
)	O
;	O
}	O
char	O
*	O
frag_var	O
(	O
relax_stateT	O
type	char
,	O
size_t	long
max_chars	O
,	O
size_t	long
var	O
,	O
relax_substateT	O
subtype	O
,	O
symbolS	O
*	O
symbol	*(struct)
,	O
offsetT	O
offset	long
,	O
char	O
*	O
opcode	O
)	O
{	O
char	O
*	O
retval	O
;	O
frag_grow	O
(	O
max_chars	O
)	O
;	O
retval	O
=	O
obstack_next_free	O
(	O
&	O
frchain_now	O
->	O
frch_obstack	O
)	O
;	O
obstack_blank_fast	O
(	O
&	O
frchain_now	O
->	O
frch_obstack	O
,	O
max_chars	O
)	O
;	O
frag_var_init	O
(	O
type	char
,	O
max_chars	O
,	O
var	O
,	O
subtype	O
,	O
symbol	*(struct)
,	O
offset	long
,	O
opcode	O
)	O
;	O
return	O
retval	O
;	O
}	O
char	O
*	O
frag_variant	O
(	O
relax_stateT	O
type	char
,	O
size_t	long
max_chars	O
,	O
size_t	long
var	O
,	O
relax_substateT	O
subtype	O
,	O
symbolS	O
*	O
symbol	*(struct)
,	O
offsetT	O
offset	long
,	O
char	O
*	O
opcode	O
)	O
{	O
char	O
*	O
retval	O
;	O
retval	O
=	O
obstack_next_free	O
(	O
&	O
frchain_now	O
->	O
frch_obstack	O
)	O
;	O
frag_var_init	O
(	O
type	char
,	O
max_chars	O
,	O
var	O
,	O
subtype	O
,	O
symbol	*(struct)
,	O
offset	long
,	O
opcode	O
)	O
;	O
return	O
retval	O
;	O
}	O
void	O
frag_wane	O
(	O
fragS	O
*	O
fragP	O
)	O
{	O
fragP	O
->	O
fr_type	O
=	O
rs_fill	O
;	O
fragP	O
->	O
fr_offset	O
=	O
0	int
;	O
fragP	O
->	O
fr_var	O
=	O
0	int
;	O
}	O
size_t	long
frag_room	O
(	O
void	O
)	O
{	O
return	O
obstack_room	O
(	O
&	O
frchain_now	O
->	O
frch_obstack	O
)	O
;	O
}	O
void	O
frag_align	O
(	O
int	O
alignment	O
,	O
int	O
fill_character	O
,	O
int	O
max	O
)	O
{	O
if	O
(	O
now_seg	O
==	O
absolute_section	O
)	O
{	O
addressT	O
new_off	O
;	O
addressT	O
mask	O
;	O
mask	O
=	O
(	O
~	O
(	O
addressT	O
)	O
0	int
)	O
<<	O
alignment	O
;	O
new_off	O
=	O
(	O
abs_section_offset	O
+	O
~	O
mask	O
)	O
&	O
mask	O
;	O
if	O
(	O
max	O
==	O
0	int
||	O
new_off	O
-	O
abs_section_offset	O
<=	O
(	O
addressT	O
)	O
max	O
)	O
abs_section_offset	O
=	O
new_off	O
;	O
}	O
else	O
{	O
char	O
*	O
p	*(void)
;	O
p	*(void)
=	O
frag_var	O
(	O
rs_align	O
,	O
1	int
,	O
1	int
,	O
(	O
relax_substateT	O
)	O
max	O
,	O
(	O
symbolS	O
*	O
)	O
0	int
,	O
(	O
offsetT	O
)	O
alignment	O
,	O
(	O
char	O
*	O
)	O
0	int
)	O
;	O
*	O
p	*(void)
=	O
fill_character	O
;	O
}	O
}	O
void	O
frag_align_pattern	O
(	O
int	O
alignment	O
,	O
const	O
char	O
*	O
fill_pattern	O
,	O
size_t	long
n_fill	O
,	O
int	O
max	O
)	O
{	O
char	O
*	O
p	*(void)
;	O
p	*(void)
=	O
frag_var	O
(	O
rs_align	O
,	O
n_fill	O
,	O
n_fill	O
,	O
(	O
relax_substateT	O
)	O
max	O
,	O
(	O
symbolS	O
*	O
)	O
0	int
,	O
(	O
offsetT	O
)	O
alignment	O
,	O
(	O
char	O
*	O
)	O
0	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
p	*(void)
,	O
fill_pattern	O
,	O
n_fill	O
)	O
;	O
}	O
void	O
frag_align_code	O
(	O
int	O
alignment	O
,	O
int	O
max	O
)	O
{	O
char	O
*	O
p	*(void)
;	O
p	*(void)
=	O
frag_var	O
(	O
rs_align_code	O
,	O
MAX_MEM_FOR_RS_ALIGN_CODE	O
,	O
1	int
,	O
(	O
relax_substateT	O
)	O
max	O
,	O
(	O
symbolS	O
*	O
)	O
0	int
,	O
(	O
offsetT	O
)	O
alignment	O
,	O
(	O
char	O
*	O
)	O
0	int
)	O
;	O
*	O
p	*(void)
=	O
NOP_OPCODE	O
;	O
}	O
addressT	O
frag_now_fix_octets	O
(	O
void	O
)	O
{	O
if	O
(	O
now_seg	O
==	O
absolute_section	O
)	O
return	O
abs_section_offset	O
;	O
return	O
(	O
(	O
char	O
*	O
)	O
obstack_next_free	O
(	O
&	O
frchain_now	O
->	O
frch_obstack	O
)	O
-	O
frag_now	O
->	O
fr_literal	O
)	O
;	O
}	O
addressT	O
frag_now_fix	O
(	O
void	O
)	O
{	O
if	O
(	O
now_seg	O
->	O
flags	int
&	O
SEC_OCTETS	O
)	O
return	O
frag_now_fix_octets	O
(	O
)	O
;	O
else	O
return	O
frag_now_fix_octets	O
(	O
)	O
/	O
OCTETS_PER_BYTE	O
;	O
}	O
void	O
frag_append_1_char	O
(	O
int	O
datum	O
)	O
{	O
frag_alloc_check	O
(	O
&	O
frchain_now	O
->	O
frch_obstack	O
)	O
;	O
if	O
(	O
obstack_room	O
(	O
&	O
frchain_now	O
->	O
frch_obstack	O
)	O
<=	O
1	int
)	O
{	O
frag_wane	O
(	O
frag_now	O
)	O
;	O
frag_new	O
(	O
0	int
)	O
;	O
}	O
obstack_1grow	O
(	O
&	O
frchain_now	O
->	O
frch_obstack	O
,	O
datum	O
)	O
;	O
}	O
bfd_boolean	int
frag_offset_fixed_p	O
(	O
const	O
fragS	O
*	O
frag1	O
,	O
const	O
fragS	O
*	O
frag2	O
,	O
offsetT	O
*	O
offset	long
)	O
{	O
const	O
fragS	O
*	O
frag	O
;	O
offsetT	O
off	O
;	O
off	O
=	O
frag1	O
->	O
fr_address	O
-	O
frag2	O
->	O
fr_address	O
;	O
if	O
(	O
frag1	O
==	O
frag2	O
)	O
{	O
*	O
offset	long
=	O
off	O
;	O
return	O
TRUE	int
;	O
}	O
frag	O
=	O
frag1	O
;	O
while	O
(	O
frag	O
->	O
fr_type	O
==	O
rs_fill	O
)	O
{	O
off	O
+=	O
frag	O
->	O
fr_fix	O
+	O
frag	O
->	O
fr_offset	O
*	O
frag	O
->	O
fr_var	O
;	O
frag	O
=	O
frag	O
->	O
fr_next	O
;	O
if	O
(	O
frag	O
==	O
NULL	O
)	O
break	O
;	O
if	O
(	O
frag	O
==	O
frag2	O
)	O
{	O
*	O
offset	long
=	O
off	O
;	O
return	O
TRUE	int
;	O
}	O
}	O
off	O
=	O
frag1	O
->	O
fr_address	O
-	O
frag2	O
->	O
fr_address	O
;	O
frag	O
=	O
frag2	O
;	O
while	O
(	O
frag	O
->	O
fr_type	O
==	O
rs_fill	O
)	O
{	O
off	O
-=	O
frag	O
->	O
fr_fix	O
+	O
frag	O
->	O
fr_offset	O
*	O
frag	O
->	O
fr_var	O
;	O
frag	O
=	O
frag	O
->	O
fr_next	O
;	O
if	O
(	O
frag	O
==	O
NULL	O
)	O
break	O
;	O
if	O
(	O
frag	O
==	O
frag1	O
)	O
{	O
*	O
offset	long
=	O
off	O
;	O
return	O
TRUE	int
;	O
}	O
}	O
return	O
FALSE	O
;	O
}	O
bfd_boolean	int
frag_gtoffset_p	O
(	O
valueT	O
off2	O
,	O
const	O
fragS	O
*	O
frag2	O
,	O
valueT	O
off1	O
,	O
const	O
fragS	O
*	O
frag1	O
,	O
offsetT	O
*	O
offset	long
)	O
{	O
if	O
(	O
frag2	O
==	O
frag1	O
||	O
off1	O
>	O
frag1	O
->	O
fr_fix	O
)	O
return	O
FALSE	O
;	O
const	O
fragS	O
*	O
frag	O
=	O
frag1	O
;	O
offsetT	O
delta	O
=	O
off2	O
-	O
off1	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
delta	O
+=	O
frag	O
->	O
fr_fix	O
;	O
frag	O
=	O
frag	O
->	O
fr_next	O
;	O
if	O
(	O
frag	O
==	O
frag2	O
)	O
{	O
if	O
(	O
delta	O
==	O
0	int
)	O
return	O
FALSE	O
;	O
break	O
;	O
}	O
if	O
(	O
frag	O
==	O
NULL	O
)	O
return	O
FALSE	O
;	O
}	O
*	O
offset	long
=	O
(	O
off2	O
-	O
off1	O
-	O
delta	O
)	O
*	O
OCTETS_PER_BYTE	O
;	O
return	O
TRUE	int
;	O
}	O
