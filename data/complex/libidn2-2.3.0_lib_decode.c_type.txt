int	O
idn2_to_unicode_8z4z	(*(char),*(*(int)),int)->(int)
(	O
const	O
char	O
*	O
input	*(int)
,	O
uint32_t	int
*	O
*	O
output	*(char)
,	O
G_GNUC_UNUSED	O
int	O
flags	int
)	O
{	O
uint32_t	int
*	O
domain_u32	*(int)
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
input	*(int)
)	O
{	O
if	O
(	O
output	*(char)
)	O
*	O
output	*(char)
=	O
NULL	O
;	O
return	O
IDN2_OK	int
;	O
}	O
uint32_t	int
out_u32	array(int)
[	O
IDN2_DOMAIN_MAX_LENGTH	int
+	O
1	int
]	O
;	O
size_t	long
out_len	long
=	O
0	int
;	O
const	O
char	O
*	O
e	*(char)
,	O
*	O
s	*(char)
;	O
for	O
(	O
e	*(char)
=	O
s	*(char)
=	O
input	*(int)
;	O
*	O
e	*(char)
;	O
s	*(char)
=	O
e	*(char)
)	O
{	O
uint32_t	int
label_u32	array(int)
[	O
IDN2_LABEL_MAX_LENGTH	int
]	O
;	O
size_t	long
label_len	long
=	O
IDN2_LABEL_MAX_LENGTH	int
;	O
while	O
(	O
*	O
e	*(char)
&&	O
*	O
e	*(char)
!=	O
'.'	O
)	O
e	*(char)
++	O
;	O
if	O
(	O
e	*(char)
-	O
s	*(char)
>=	O
4	int
&&	O
(	O
s	*(char)
[	O
0	int
]	O
==	O
'x'	O
||	O
s	*(char)
[	O
0	int
]	O
==	O
'X'	O
)	O
&&	O
(	O
s	*(char)
[	O
1	int
]	O
==	O
'n'	O
||	O
s	*(char)
[	O
1	int
]	O
==	O
'N'	O
)	O
&&	O
s	*(char)
[	O
2	int
]	O
==	O
'-'	O
&&	O
s	*(char)
[	O
3	int
]	O
==	O
'-'	O
)	O
{	O
s	*(char)
+=	O
4	int
;	O
rc	int
=	O
_idn2_punycode_decode_internal	(long,array(char),*(long),array(int))->(int)
(	O
e	*(char)
-	O
s	*(char)
,	O
(	O
char	O
*	O
)	O
s	*(char)
,	O
&	O
label_len	long
,	O
label_u32	array(int)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
out_len	long
+	O
label_len	long
+	O
(	O
*	O
e	*(char)
==	O
'.'	O
)	O
>	O
IDN2_DOMAIN_MAX_LENGTH	int
)	O
return	O
IDN2_TOO_BIG_DOMAIN	int
;	O
u32_cpy	(*(int),*(int),long)->(*(int))
(	O
out_u32	array(int)
+	O
out_len	long
,	O
label_u32	array(int)
,	O
label_len	long
)	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
(	O
domain_u32	*(int)
=	O
u8_to_u32	(*(char),long,*(int),*(long))->(*(int))
(	O
(	O
uint8_t	char
*	O
)	O
s	*(char)
,	O
e	*(char)
-	O
s	*(char)
,	O
NULL	O
,	O
&	O
label_len	long
)	O
)	O
)	O
{	O
if	O
(	O
errno	O
==	O
ENOMEM	int
)	O
return	O
IDN2_MALLOC	int
;	O
return	O
IDN2_ENCODING_ERROR	int
;	O
}	O
if	O
(	O
label_len	long
>	O
IDN2_LABEL_MAX_LENGTH	int
)	O
{	O
free	(*(void))->(void)
(	O
domain_u32	*(int)
)	O
;	O
return	O
IDN2_TOO_BIG_LABEL	int
;	O
}	O
if	O
(	O
out_len	long
+	O
label_len	long
+	O
(	O
*	O
e	*(char)
==	O
'.'	O
)	O
>	O
IDN2_DOMAIN_MAX_LENGTH	int
)	O
{	O
free	(*(void))->(void)
(	O
domain_u32	*(int)
)	O
;	O
return	O
IDN2_TOO_BIG_DOMAIN	int
;	O
}	O
u32_cpy	(*(int),*(int),long)->(*(int))
(	O
out_u32	array(int)
+	O
out_len	long
,	O
domain_u32	*(int)
,	O
label_len	long
)	O
;	O
free	(*(void))->(void)
(	O
domain_u32	*(int)
)	O
;	O
}	O
out_len	long
+=	O
label_len	long
;	O
if	O
(	O
*	O
e	*(char)
)	O
{	O
out_u32	array(int)
[	O
out_len	long
++	O
]	O
=	O
'.'	O
;	O
e	*(char)
++	O
;	O
}	O
}	O
if	O
(	O
output	*(char)
)	O
{	O
uint32_t	int
*	O
_out	*(int)
;	O
out_u32	array(int)
[	O
out_len	long
]	O
=	O
0	int
;	O
_out	*(int)
=	O
u32_cpy_alloc	(*(int),long)->(*(int))
(	O
out_u32	array(int)
,	O
out_len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
_out	*(int)
)	O
{	O
if	O
(	O
errno	O
==	O
ENOMEM	int
)	O
return	O
IDN2_MALLOC	int
;	O
return	O
IDN2_ENCODING_ERROR	int
;	O
}	O
*	O
output	*(char)
=	O
_out	*(int)
;	O
}	O
return	O
IDN2_OK	int
;	O
}	O
int	O
idn2_to_unicode_4z4z	(*(int),*(*(int)),int)->(int)
(	O
const	O
uint32_t	int
*	O
input	*(int)
,	O
uint32_t	int
*	O
*	O
output	*(char)
,	O
int	O
flags	int
)	O
{	O
uint8_t	char
*	O
input_u8	*(char)
;	O
uint32_t	int
*	O
output_u32	*(int)
;	O
size_t	long
length	long
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
input	*(int)
)	O
{	O
if	O
(	O
output	*(char)
)	O
*	O
output	*(char)
=	O
NULL	O
;	O
return	O
IDN2_OK	int
;	O
}	O
input_u8	*(char)
=	O
u32_to_u8	(*(int),long,*(char),*(long))->(*(char))
(	O
input	*(int)
,	O
u32_strlen	(*(int))->(long)
(	O
input	*(int)
)	O
+	O
1	int
,	O
NULL	O
,	O
&	O
length	long
)	O
;	O
if	O
(	O
!	O
input_u8	*(char)
)	O
{	O
if	O
(	O
errno	O
==	O
ENOMEM	int
)	O
return	O
IDN2_MALLOC	int
;	O
return	O
IDN2_ENCODING_ERROR	int
;	O
}	O
rc	int
=	O
idn2_to_unicode_8z4z	(*(char),*(*(int)),int)->(int)
(	O
(	O
char	O
*	O
)	O
input_u8	*(char)
,	O
&	O
output_u32	*(int)
,	O
flags	int
)	O
;	O
free	(*(void))->(void)
(	O
input_u8	*(char)
)	O
;	O
if	O
(	O
rc	int
==	O
IDN2_OK	int
)	O
{	O
if	O
(	O
output	*(char)
)	O
*	O
output	*(char)
=	O
output_u32	*(int)
;	O
else	O
free	(*(void))->(void)
(	O
output_u32	*(int)
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
idn2_to_unicode_44i	(*(int),long,*(int),*(long),int)->(int)
(	O
const	O
uint32_t	int
*	O
in	*(int)
,	O
size_t	long
inlen	long
,	O
uint32_t	int
*	O
out	*(int)
,	O
size_t	long
*	O
outlen	*(long)
,	O
int	O
flags	int
)	O
{	O
uint32_t	int
*	O
input_u32	*(int)
;	O
uint32_t	int
*	O
output_u32	*(int)
;	O
size_t	long
len	long
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
in	*(int)
)	O
{	O
if	O
(	O
outlen	*(long)
)	O
*	O
outlen	*(long)
=	O
0	int
;	O
return	O
IDN2_OK	int
;	O
}	O
input_u32	*(int)
=	O
(	O
uint32_t	int
*	O
)	O
malloc	(long)->(*(void))
(	O
(	O
inlen	long
+	O
1	int
)	O
*	O
sizeof	O
(	O
uint32_t	int
)	O
)	O
;	O
if	O
(	O
!	O
input_u32	*(int)
)	O
return	O
IDN2_MALLOC	int
;	O
u32_cpy	(*(int),*(int),long)->(*(int))
(	O
input_u32	*(int)
,	O
in	*(int)
,	O
inlen	long
)	O
;	O
input_u32	*(int)
[	O
inlen	long
]	O
=	O
0	int
;	O
rc	int
=	O
idn2_to_unicode_4z4z	(*(int),*(*(int)),int)->(int)
(	O
input_u32	*(int)
,	O
&	O
output_u32	*(int)
,	O
flags	int
)	O
;	O
free	(*(void))->(void)
(	O
input_u32	*(int)
)	O
;	O
if	O
(	O
rc	int
!=	O
IDN2_OK	int
)	O
return	O
rc	int
;	O
len	long
=	O
u32_strlen	(*(int))->(long)
(	O
output_u32	*(int)
)	O
;	O
if	O
(	O
out	*(int)
&&	O
outlen	*(long)
)	O
u32_cpy	(*(int),*(int),long)->(*(int))
(	O
out	*(int)
,	O
output_u32	*(int)
,	O
len	long
<	O
*	O
outlen	*(long)
?	O
len	long
:	O
*	O
outlen	*(long)
)	O
;	O
free	(*(void))->(void)
(	O
output_u32	*(int)
)	O
;	O
if	O
(	O
outlen	*(long)
)	O
*	O
outlen	*(long)
=	O
len	long
;	O
return	O
IDN2_OK	int
;	O
}	O
int	O
idn2_to_unicode_8z8z	(*(char),*(*(char)),int)->(int)
(	O
const	O
char	O
*	O
input	*(int)
,	O
char	O
*	O
*	O
output	*(char)
,	O
int	O
flags	int
)	O
{	O
uint32_t	int
*	O
output_u32	*(int)
;	O
uint8_t	char
*	O
output_u8	*(char)
;	O
size_t	long
length	long
;	O
int	O
rc	int
;	O
rc	int
=	O
idn2_to_unicode_8z4z	(*(char),*(*(int)),int)->(int)
(	O
input	*(int)
,	O
&	O
output_u32	*(int)
,	O
flags	int
)	O
;	O
if	O
(	O
rc	int
!=	O
IDN2_OK	int
||	O
!	O
input	*(int)
)	O
return	O
rc	int
;	O
output_u8	*(char)
=	O
u32_to_u8	(*(int),long,*(char),*(long))->(*(char))
(	O
output_u32	*(int)
,	O
u32_strlen	(*(int))->(long)
(	O
output_u32	*(int)
)	O
+	O
1	int
,	O
NULL	O
,	O
&	O
length	long
)	O
;	O
free	(*(void))->(void)
(	O
output_u32	*(int)
)	O
;	O
if	O
(	O
!	O
output_u8	*(char)
)	O
{	O
if	O
(	O
errno	O
==	O
ENOMEM	int
)	O
return	O
IDN2_MALLOC	int
;	O
return	O
IDN2_ENCODING_ERROR	int
;	O
}	O
if	O
(	O
output	*(char)
)	O
*	O
output	*(char)
=	O
(	O
char	O
*	O
)	O
output_u8	*(char)
;	O
else	O
free	(*(void))->(void)
(	O
output_u8	*(char)
)	O
;	O
return	O
IDN2_OK	int
;	O
}	O
int	O
idn2_to_unicode_8zlz	(*(char),*(*(char)),int)->(int)
(	O
const	O
char	O
*	O
input	*(int)
,	O
char	O
*	O
*	O
output	*(char)
,	O
int	O
flags	int
)	O
{	O
int	O
rc	int
;	O
uint8_t	char
*	O
output_u8	*(char)
,	O
*	O
output_l8	*(char)
;	O
const	O
char	O
*	O
encoding	*(char)
;	O
rc	int
=	O
idn2_to_unicode_8z8z	(*(char),*(*(char)),int)->(int)
(	O
input	*(int)
,	O
(	O
char	O
*	O
*	O
)	O
&	O
output_u8	*(char)
,	O
flags	int
)	O
;	O
if	O
(	O
rc	int
!=	O
IDN2_OK	int
||	O
!	O
input	*(int)
)	O
return	O
rc	int
;	O
encoding	*(char)
=	O
locale_charset	()->(*(char))
(	O
)	O
;	O
output_l8	*(char)
=	O
(	O
uint8_t	char
*	O
)	O
u8_strconv_to_encoding	(*(char),*(char),enum(int,int,int))->(*(char))
(	O
output_u8	*(char)
,	O
encoding	*(char)
,	O
iconveh_error	int
)	O
;	O
if	O
(	O
!	O
output_l8	*(char)
)	O
{	O
if	O
(	O
errno	O
==	O
ENOMEM	int
)	O
rc	int
=	O
IDN2_MALLOC	int
;	O
else	O
rc	int
=	O
IDN2_ENCODING_ERROR	int
;	O
free	(*(void))->(void)
(	O
output_l8	*(char)
)	O
;	O
}	O
else	O
{	O
if	O
(	O
output	*(char)
)	O
*	O
output	*(char)
=	O
(	O
char	O
*	O
)	O
output_l8	*(char)
;	O
else	O
free	(*(void))->(void)
(	O
output_l8	*(char)
)	O
;	O
rc	int
=	O
IDN2_OK	int
;	O
}	O
free	(*(void))->(void)
(	O
output_u8	*(char)
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
idn2_to_unicode_lzlz	(*(char),*(*(char)),int)->(int)
(	O
const	O
char	O
*	O
input	*(int)
,	O
char	O
*	O
*	O
output	*(char)
,	O
int	O
flags	int
)	O
{	O
uint8_t	char
*	O
input_l8	*(char)
;	O
const	O
char	O
*	O
encoding	*(char)
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
input	*(int)
)	O
{	O
if	O
(	O
output	*(char)
)	O
*	O
output	*(char)
=	O
NULL	O
;	O
return	O
IDN2_OK	int
;	O
}	O
encoding	*(char)
=	O
locale_charset	()->(*(char))
(	O
)	O
;	O
input_l8	*(char)
=	O
u8_strconv_from_encoding	(*(char),*(char),enum(int,int,int))->(*(char))
(	O
input	*(int)
,	O
encoding	*(char)
,	O
iconveh_error	int
)	O
;	O
if	O
(	O
!	O
input_l8	*(char)
)	O
{	O
if	O
(	O
errno	O
==	O
ENOMEM	int
)	O
return	O
IDN2_MALLOC	int
;	O
return	O
IDN2_ICONV_FAIL	int
;	O
}	O
rc	int
=	O
idn2_to_unicode_8zlz	(*(char),*(*(char)),int)->(int)
(	O
(	O
char	O
*	O
)	O
input_l8	*(char)
,	O
output	*(char)
,	O
flags	int
)	O
;	O
free	(*(void))->(void)
(	O
input_l8	*(char)
)	O
;	O
return	O
rc	int
;	O
}	O
