gsl_multifit_fsolver	struct(*(struct(*(char),long,*((*`,long,long)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*((*`,*`,*`)->(int)),long,long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))
*	O
gsl_multifit_fsolver_alloc	(*(struct(*(char),long,*((*`,long,long)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`)->(void)))),long,long)->(*(struct(*(struct(*`,long,*`,*`,*`,*`)),*(struct(*`,long,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void))))
(	O
const	O
gsl_multifit_fsolver_type	struct(*(char),long,*((*(void),long,long)->(int)),*((*(void),*(struct(*`,long,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(*`,long,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void))->(void)))
*	O
T	*(struct(*(char),long,*((*(void),long,long)->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void))->(void))))
,	O
size_t	long
n	int
,	O
size_t	long
p	int
)	O
{	O
int	O
status	int
;	O
gsl_multifit_fsolver	struct(*(struct(*(char),long,*((*`,long,long)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*((*`,*`,*`)->(int)),long,long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))
*	O
s	*(float)
;	O
if	O
(	O
n	int
<	O
p	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"insufficient data points, n < p"	*(char)
,	O
GSL_EINVAL	int
,	O
0	int
)	O
;	O
}	O
s	*(float)
=	O
(	O
gsl_multifit_fsolver	struct(*(struct(*(char),long,*((*`,long,long)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*((*`,*`,*`)->(int)),long,long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
gsl_multifit_fsolver	struct(*(struct(*(char),long,*((*`,long,long)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*((*`,*`,*`)->(int)),long,long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))
)	O
)	O
;	O
if	O
(	O
s	*(float)
==	O
0	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for multifit solver struct"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
s	*(float)
->	O
x	double
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
s	*(float)
->	O
x	double
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
s	*(float)
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for x"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
s	*(float)
->	O
f	*(double)
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
s	*(float)
->	O
f	*(double)
==	O
0	int
)	O
{	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
s	*(float)
->	O
x	double
)	O
;	O
free	(*(void))->(void)
(	O
s	*(float)
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for f"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
s	*(float)
->	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_calloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
s	*(float)
->	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
s	*(float)
->	O
x	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
s	*(float)
->	O
f	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	*(float)
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for dx"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
s	*(float)
->	O
state	*(int)
=	O
malloc	(long)->(*(void))
(	O
T	*(struct(*(char),long,*((*(void),long,long)->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void))->(void))))
->	O
size	long
)	O
;	O
if	O
(	O
s	*(float)
->	O
state	*(int)
==	O
0	int
)	O
{	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
s	*(float)
->	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
s	*(float)
->	O
x	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
s	*(float)
->	O
f	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	*(float)
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for multifit solver state"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
s	*(float)
->	O
type	*(struct(*(char),long,*((*(void),long,long)->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void))->(void))))
=	O
T	*(struct(*(char),long,*((*(void),long,long)->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void))->(void))))
;	O
status	int
=	O
(	O
s	*(float)
->	O
type	*(struct(*(char),long,*((*(void),long,long)->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void))->(void))))
->	O
alloc	*((*(void),long,long)->(int))
)	O
(	O
s	*(float)
->	O
state	*(int)
,	O
n	int
,	O
p	int
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
(	O
s	*(float)
->	O
type	*(struct(*(char),long,*((*(void),long,long)->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void))->(void))))
->	O
free	(*(void))->(void)
)	O
(	O
s	*(float)
->	O
state	*(int)
)	O
;	O
free	(*(void))->(void)
(	O
s	*(float)
->	O
state	*(int)
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
s	*(float)
->	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
s	*(float)
->	O
x	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
s	*(float)
->	O
f	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	*(float)
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to set solver"	*(char)
,	O
status	int
,	O
0	int
)	O
;	O
}	O
s	*(float)
->	O
function	*((double,*(void))->(double))
=	O
NULL	O
;	O
return	O
s	*(float)
;	O
}	O
int	O
gsl_multifit_fsolver_set	(*(struct(*(struct(*`,long,*`,*`,*`,*`)),*(struct(*`,long,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void))),*(struct(*((*`,*`,*`)->(int)),long,long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_multifit_fsolver	struct(*(struct(*(char),long,*((*`,long,long)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*((*`,*`,*`)->(int)),long,long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))
*	O
s	*(float)
,	O
gsl_multifit_function	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),long,long,*(void))
*	O
f	*(double)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
)	O
{	O
if	O
(	O
s	*(float)
->	O
f	*(double)
->	O
size	long
!=	O
f	*(double)
->	O
n	int
)	O
{	O
GSL_ERROR	O
(	O
"function size does not match solver"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
if	O
(	O
s	*(float)
->	O
x	double
->	O
size	long
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"vector length does not match solver"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
s	*(float)
->	O
function	*((double,*(void))->(double))
=	O
f	*(double)
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
s	*(float)
->	O
x	double
,	O
x	double
)	O
;	O
return	O
(	O
s	*(float)
->	O
type	*(struct(*(char),long,*((*(void),long,long)->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void))->(void))))
->	O
set	*((*(void),*(struct(*((*`,*`,*`)->(int)),long,long,*(void))),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)))->(int))
)	O
(	O
s	*(float)
->	O
state	*(int)
,	O
s	*(float)
->	O
function	*((double,*(void))->(double))
,	O
s	*(float)
->	O
x	double
,	O
s	*(float)
->	O
f	*(double)
,	O
s	*(float)
->	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
int	O
gsl_multifit_fsolver_iterate	(*(struct(*(struct(*`,long,*`,*`,*`,*`)),*(struct(*`,long,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void))))->(int)
(	O
gsl_multifit_fsolver	struct(*(struct(*(char),long,*((*`,long,long)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*((*`,*`,*`)->(int)),long,long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))
*	O
s	*(float)
)	O
{	O
return	O
(	O
s	*(float)
->	O
type	*(struct(*(char),long,*((*(void),long,long)->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void))->(void))))
->	O
iterate	*((*(void),*(struct(*((*`,*`,*`)->(int)),long,long,*(void))),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)))->(int))
)	O
(	O
s	*(float)
->	O
state	*(int)
,	O
s	*(float)
->	O
function	*((double,*(void))->(double))
,	O
s	*(float)
->	O
x	double
,	O
s	*(float)
->	O
f	*(double)
,	O
s	*(float)
->	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
int	O
gsl_multifit_fsolver_driver	(*(struct(*(struct(*`,long,*`,*`,*`,*`)),*(struct(*`,long,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void))),long,double,double)->(int)
(	O
gsl_multifit_fsolver	struct(*(struct(*(char),long,*((*`,long,long)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*((*`,*`,*`)->(int)),long,long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))
*	O
s	*(float)
,	O
const	O
size_t	long
maxiter	long
,	O
const	O
double	O
epsabs	double
,	O
const	O
double	O
epsrel	double
)	O
{	O
int	O
status	int
;	O
size_t	long
iter	long
=	O
0	int
;	O
do	O
{	O
status	int
=	O
gsl_multifit_fsolver_iterate	(*(struct(*(struct(*`,long,*`,*`,*`,*`)),*(struct(*`,long,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void))))->(int)
(	O
s	*(float)
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
status	int
=	O
gsl_multifit_test_delta	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double)->(int)
(	O
s	*(float)
->	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
s	*(float)
->	O
x	double
,	O
epsabs	double
,	O
epsrel	double
)	O
;	O
}	O
while	O
(	O
status	int
==	O
GSL_CONTINUE	int
&&	O
++	O
iter	long
<	O
maxiter	long
)	O
;	O
return	O
status	int
;	O
}	O
void	O
gsl_multifit_fsolver_free	(*(struct(*(struct(*`,long,*`,*`,*`,*`)),*(struct(*`,long,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void))))->(void)
(	O
gsl_multifit_fsolver	struct(*(struct(*(char),long,*((*`,long,long)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*((*`,*`,*`)->(int)),long,long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))
*	O
s	*(float)
)	O
{	O
RETURN_IF_NULL	O
(	O
s	*(float)
)	O
;	O
(	O
s	*(float)
->	O
type	*(struct(*(char),long,*((*(void),long,long)->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void))->(void))))
->	O
free	(*(void))->(void)
)	O
(	O
s	*(float)
->	O
state	*(int)
)	O
;	O
free	(*(void))->(void)
(	O
s	*(float)
->	O
state	*(int)
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
s	*(float)
->	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
s	*(float)
->	O
x	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
s	*(float)
->	O
f	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
s	*(float)
)	O
;	O
}	O
const	O
char	O
*	O
gsl_multifit_fsolver_name	(*(struct(*(struct(*`,long,*`,*`,*`,*`)),*(struct(*`,long,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void))))->(*(char))
(	O
const	O
gsl_multifit_fsolver	struct(*(struct(*(char),long,*((*`,long,long)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*((*`,*`,*`)->(int)),long,long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))
*	O
s	*(float)
)	O
{	O
return	O
s	*(float)
->	O
type	*(struct(*(char),long,*((*(void),long,long)->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void))->(void))))
->	O
name	*(char)
;	O
}	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
gsl_multifit_fsolver_position	(*(struct(*(struct(*`,long,*`,*`,*`,*`)),*(struct(*`,long,long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void))))->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
const	O
gsl_multifit_fsolver	struct(*(struct(*(char),long,*((*`,long,long)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*((*`,*`,*`)->(int)),long,long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))
*	O
s	*(float)
)	O
{	O
return	O
s	*(float)
->	O
x	double
;	O
}	O
