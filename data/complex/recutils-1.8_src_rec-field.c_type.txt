struct	O
rec_field_s	struct(*(char),*(char),*(char),long,*(char),long,*(char),int)
{	O
char	O
*	O
name	*(char)
;	O
char	O
*	O
value	*(char)
;	O
char	O
*	O
source	*(char)
;	O
size_t	long
location	long
;	O
char	O
*	O
location_str	*(char)
;	O
size_t	long
char_location	long
;	O
char	O
*	O
char_location_str	*(char)
;	O
int	O
mark	int
;	O
}	O
;	O
static	O
void	O
rec_field_init	(*(struct(*(char),*(char),*(char),long,*(char),long,*(char),int)))->(void)
(	O
rec_field_t	*(struct)
field	*(struct)
)	O
;	O
const	O
char	O
*	O
rec_field_name	(*(struct))->(*(char))
(	O
rec_field_t	*(struct)
field	*(struct)
)	O
{	O
return	O
field	*(struct)
->	O
name	*(char)
;	O
}	O
bool	bool
rec_field_set_name	(*(struct),*(char))->(bool)
(	O
rec_field_t	*(struct)
field	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
field	*(struct)
->	O
name	*(char)
)	O
;	O
field	*(struct)
->	O
name	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
name	*(char)
)	O
;	O
return	O
(	O
field	*(struct)
->	O
name	*(char)
!=	O
NULL	O
)	O
;	O
}	O
const	O
char	O
*	O
rec_field_value	(*(struct))->(*(char))
(	O
rec_field_t	*(struct)
field	*(struct)
)	O
{	O
return	O
field	*(struct)
->	O
value	*(char)
;	O
}	O
bool	bool
rec_field_set_value	(*(struct),*(char))->(bool)
(	O
rec_field_t	*(struct)
field	*(struct)
,	O
const	O
char	O
*	O
value	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
field	*(struct)
->	O
value	*(char)
)	O
;	O
field	*(struct)
->	O
value	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
value	*(char)
)	O
;	O
return	O
(	O
field	*(struct)
->	O
value	*(char)
!=	O
NULL	O
)	O
;	O
}	O
rec_field_t	*(struct)
rec_field_new	(*(char),*(char))->(*(struct))
(	O
const	O
char	O
*	O
name	*(char)
,	O
const	O
char	O
*	O
value	*(char)
)	O
{	O
rec_field_t	*(struct)
field	*(struct)
;	O
field	*(struct)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
rec_field_s	struct(*(char),*(char),*(char),long,*(char),long,*(char),int)
)	O
)	O
;	O
if	O
(	O
field	*(struct)
!=	O
NULL	O
)	O
{	O
rec_field_init	(*(struct(*(char),*(char),*(char),long,*(char),long,*(char),int)))->(void)
(	O
field	*(struct)
)	O
;	O
if	O
(	O
!	O
rec_field_set_name	(*(struct),*(char))->(bool)
(	O
field	*(struct)
,	O
name	*(char)
)	O
)	O
{	O
rec_field_destroy	(*(struct))->(void)
(	O
field	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
!	O
rec_field_set_value	(*(struct),*(char))->(bool)
(	O
field	*(struct)
,	O
value	*(char)
)	O
)	O
{	O
rec_field_destroy	(*(struct))->(void)
(	O
field	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
return	O
field	*(struct)
;	O
}	O
rec_field_t	*(struct)
rec_field_dup	(*(struct))->(*(struct))
(	O
rec_field_t	*(struct)
field	*(struct)
)	O
{	O
rec_field_t	*(struct)
new_field	*(struct(*(char),*(char),*(char),long,*(char),long,*(char),int))
;	O
new_field	*(struct(*(char),*(char),*(char),long,*(char),long,*(char),int))
=	O
rec_field_new	(*(char),*(char))->(*(struct))
(	O
rec_field_name	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
,	O
rec_field_value	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
)	O
;	O
if	O
(	O
new_field	*(struct(*(char),*(char),*(char),long,*(char),long,*(char),int))
)	O
{	O
new_field	*(struct(*(char),*(char),*(char),long,*(char),long,*(char),int))
->	O
location	long
=	O
field	*(struct)
->	O
location	long
;	O
new_field	*(struct(*(char),*(char),*(char),long,*(char),long,*(char),int))
->	O
char_location	long
=	O
field	*(struct)
->	O
char_location	long
;	O
new_field	*(struct(*(char),*(char),*(char),long,*(char),long,*(char),int))
->	O
mark	int
=	O
field	*(struct)
->	O
mark	int
;	O
if	O
(	O
field	*(struct)
->	O
source	*(char)
)	O
{	O
new_field	*(struct(*(char),*(char),*(char),long,*(char),long,*(char),int))
->	O
source	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
field	*(struct)
->	O
source	*(char)
)	O
;	O
if	O
(	O
!	O
new_field	*(struct(*(char),*(char),*(char),long,*(char),long,*(char),int))
->	O
source	*(char)
)	O
{	O
rec_field_destroy	(*(struct))->(void)
(	O
new_field	*(struct(*(char),*(char),*(char),long,*(char),long,*(char),int))
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
if	O
(	O
field	*(struct)
->	O
location_str	*(char)
)	O
{	O
new_field	*(struct(*(char),*(char),*(char),long,*(char),long,*(char),int))
->	O
location_str	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
field	*(struct)
->	O
location_str	*(char)
)	O
;	O
if	O
(	O
!	O
new_field	*(struct(*(char),*(char),*(char),long,*(char),long,*(char),int))
->	O
location_str	*(char)
)	O
{	O
rec_field_destroy	(*(struct))->(void)
(	O
new_field	*(struct(*(char),*(char),*(char),long,*(char),long,*(char),int))
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
if	O
(	O
field	*(struct)
->	O
char_location_str	*(char)
)	O
{	O
new_field	*(struct(*(char),*(char),*(char),long,*(char),long,*(char),int))
->	O
char_location_str	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
field	*(struct)
->	O
char_location_str	*(char)
)	O
;	O
if	O
(	O
!	O
new_field	*(struct(*(char),*(char),*(char),long,*(char),long,*(char),int))
->	O
char_location_str	*(char)
)	O
{	O
rec_field_destroy	(*(struct))->(void)
(	O
new_field	*(struct(*(char),*(char),*(char),long,*(char),long,*(char),int))
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
}	O
return	O
new_field	*(struct(*(char),*(char),*(char),long,*(char),long,*(char),int))
;	O
}	O
bool	bool
rec_field_equal_p	(*(struct),*(struct))->(bool)
(	O
rec_field_t	*(struct)
field1	*(struct)
,	O
rec_field_t	*(struct)
field2	*(struct)
)	O
{	O
return	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
field1	*(struct)
->	O
name	*(char)
,	O
field2	*(struct)
->	O
name	*(char)
)	O
==	O
0	int
)	O
;	O
}	O
void	O
rec_field_destroy	(*(struct))->(void)
(	O
rec_field_t	*(struct)
field	*(struct)
)	O
{	O
if	O
(	O
field	*(struct)
)	O
{	O
free	(*(void))->(void)
(	O
field	*(struct)
->	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
field	*(struct)
->	O
value	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
field	*(struct)
->	O
source	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
field	*(struct)
->	O
location_str	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
field	*(struct)
->	O
char_location_str	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
field	*(struct)
)	O
;	O
}	O
}	O
rec_comment_t	*(char)
rec_field_to_comment	(*(struct))->(*(char))
(	O
rec_field_t	*(struct)
field	*(struct)
)	O
{	O
rec_comment_t	*(char)
res	*(char)
;	O
char	O
*	O
comment_str	*(char)
;	O
comment_str	*(char)
=	O
rec_write_field_str	(*(struct),enum(int,int,int,int))->(*(char))
(	O
field	*(struct)
,	O
REC_WRITER_NORMAL	int
)	O
;	O
if	O
(	O
!	O
comment_str	*(char)
)	O
{	O
return	O
NULL	O
;	O
}	O
if	O
(	O
comment_str	*(char)
[	O
strlen	(*(char))->(long)
(	O
comment_str	*(char)
)	O
-	O
1	int
]	O
==	O
'\n'	O
)	O
{	O
comment_str	*(char)
[	O
strlen	(*(char))->(long)
(	O
comment_str	*(char)
)	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
res	*(char)
=	O
rec_comment_new	(*(char))->(*(char))
(	O
comment_str	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
comment_str	*(char)
)	O
;	O
return	O
res	*(char)
;	O
}	O
const	O
char	O
*	O
rec_field_source	(*(struct))->(*(char))
(	O
rec_field_t	*(struct)
field	*(struct)
)	O
{	O
return	O
field	*(struct)
->	O
source	*(char)
;	O
}	O
bool	bool
rec_field_set_source	(*(struct),*(char))->(bool)
(	O
rec_field_t	*(struct)
field	*(struct)
,	O
const	O
char	O
*	O
source	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
field	*(struct)
->	O
source	*(char)
)	O
;	O
field	*(struct)
->	O
source	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
source	*(char)
)	O
;	O
return	O
(	O
field	*(struct)
->	O
source	*(char)
!=	O
NULL	O
)	O
;	O
}	O
size_t	long
rec_field_location	(*(struct))->(long)
(	O
rec_field_t	*(struct)
field	*(struct)
)	O
{	O
return	O
field	*(struct)
->	O
location	long
;	O
}	O
bool	bool
rec_field_set_location	(*(struct),long)->(bool)
(	O
rec_field_t	*(struct)
field	*(struct)
,	O
size_t	long
location	long
)	O
{	O
field	*(struct)
->	O
location	long
=	O
location	long
;	O
free	(*(void))->(void)
(	O
field	*(struct)
->	O
location_str	*(char)
)	O
;	O
return	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
(	O
field	*(struct)
->	O
location_str	*(char)
)	O
,	O
"%zu"	*(char)
,	O
field	*(struct)
->	O
location	long
)	O
!=	O
-	O
1	int
)	O
;	O
}	O
const	O
char	O
*	O
rec_field_location_str	(*(struct))->(*(char))
(	O
rec_field_t	*(struct)
field	*(struct)
)	O
{	O
char	O
*	O
res	*(char)
;	O
if	O
(	O
field	*(struct)
->	O
location_str	*(char)
)	O
{	O
res	*(char)
=	O
field	*(struct)
->	O
location_str	*(char)
;	O
}	O
else	O
{	O
res	*(char)
=	O
""	*(char)
;	O
}	O
return	O
res	*(char)
;	O
}	O
size_t	long
rec_field_char_location	(*(struct))->(long)
(	O
rec_field_t	*(struct)
field	*(struct)
)	O
{	O
return	O
field	*(struct)
->	O
char_location	long
;	O
}	O
bool	bool
rec_field_set_char_location	(*(struct),long)->(bool)
(	O
rec_field_t	*(struct)
field	*(struct)
,	O
size_t	long
location	long
)	O
{	O
field	*(struct)
->	O
char_location	long
=	O
location	long
;	O
free	(*(void))->(void)
(	O
field	*(struct)
->	O
char_location_str	*(char)
)	O
;	O
return	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
(	O
field	*(struct)
->	O
char_location_str	*(char)
)	O
,	O
"%zu"	*(char)
,	O
field	*(struct)
->	O
char_location	long
)	O
!=	O
-	O
1	int
)	O
;	O
}	O
const	O
char	O
*	O
rec_field_char_location_str	(*(struct))->(*(char))
(	O
rec_field_t	*(struct)
field	*(struct)
)	O
{	O
char	O
*	O
res	*(char)
;	O
if	O
(	O
field	*(struct)
->	O
char_location_str	*(char)
)	O
{	O
res	*(char)
=	O
field	*(struct)
->	O
char_location_str	*(char)
;	O
}	O
else	O
{	O
res	*(char)
=	O
""	*(char)
;	O
}	O
return	O
res	*(char)
;	O
}	O
void	O
rec_field_set_mark	(*(struct),int)->(void)
(	O
rec_field_t	*(struct)
field	*(struct)
,	O
int	O
mark	int
)	O
{	O
field	*(struct)
->	O
mark	int
=	O
mark	int
;	O
}	O
int	O
rec_field_mark	(*(struct))->(int)
(	O
rec_field_t	*(struct)
field	*(struct)
)	O
{	O
return	O
field	*(struct)
->	O
mark	int
;	O
}	O
static	O
void	O
rec_field_init	(*(struct(*(char),*(char),*(char),long,*(char),long,*(char),int)))->(void)
(	O
rec_field_t	*(struct)
field	*(struct)
)	O
{	O
memset	(*(void),int,long)->(*(void))
(	O
field	*(struct)
,	O
0	int
,	O
sizeof	O
(	O
struct	O
rec_field_s	struct(*(char),*(char),*(char),long,*(char),long,*(char),int)
)	O
)	O
;	O
}	O
