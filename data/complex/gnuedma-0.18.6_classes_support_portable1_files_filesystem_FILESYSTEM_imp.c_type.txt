ESint32	int
EDMAPROC	O
FILESYSTEMCopyFileZZS32rS32	(int,*(char),*(char),int)->(int)
(	O
CLASSID	int
id	int
,	O
EPChar	*(char)
source	*(char)
,	O
EPChar	*(char)
target	*(char)
,	O
ESint32	int
flags	int
)	O
{	O
edma_printf	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"Still Not Implemented"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMDeleteFileZS32rS32	(int,*(char),int)->(int)
(	O
CLASSID	int
id	int
,	O
EPChar	*(char)
name	*(char)
,	O
ESint32	int
flags	int
)	O
{	O
return	O
unlink	(*(char))->(int)
(	O
name	*(char)
)	O
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMFreeSpaceZrS32	(int,*(char))->(int)
(	O
CLASSID	int
id	int
,	O
EPChar	*(char)
name	*(char)
)	O
{	O
struct	O
statfs	struct(int,int,long,long,long,long,long,struct(array(int)),int,int,int,array(int))
buf	*(struct(long,long,*(void)))
;	O
long	O
bs	long
,	O
ba	long
;	O
if	O
(	O
statfs	struct(int,int,long,long,long,long,long,struct(array(int)),int,int,int,array(int))
(	O
name	*(char)
,	O
&	O
buf	*(struct(long,long,*(void)))
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"[FILESYSTEM::FreeSpace] Can't get filesystem info"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
bs	long
=	O
buf	*(struct(long,long,*(void)))
.	O
f_bsize	int
;	O
ba	long
=	O
buf	*(struct(long,long,*(void)))
.	O
f_bavail	long
/	O
1024L	int
;	O
ba	long
*=	O
bs	long
;	O
return	O
ba	long
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMGetDrivessArS32	(int,*(struct(long,long,*(void))))->(int)
(	O
CLASSID	int
id	int
,	O
EDMAT_BUFFER	struct(long,long,*(void))
*	O
buf	*(struct(long,long,*(void)))
)	O
{	O
FILE	struct
*	O
f	*(char)
;	O
char	O
dev	array(char)
[	O
80	int
]	O
;	O
char	O
mpoint	array(char)
[	O
80	int
]	O
;	O
char	O
fstype	array(char)
[	O
80	int
]	O
;	O
char	O
access	(*(char),int)->(int)
[	O
80	int
]	O
;	O
int	O
a	int
,	O
b	int
;	O
char	O
result	array(char)
[	O
1024	int
]	O
;	O
edma_buffer_alloc	(*(struct(long,long,*(void))),long)->(int)
(	O
buf	*(struct(long,long,*(void)))
,	O
1024	int
)	O
;	O
if	O
(	O
(	O
f	*(char)
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),*(void),int,int,array(char))))
(	O
"/proc/mounts"	*(char)
,	O
"rt"	*(char)
)	O
)	O
==	O
NULL	O
)	O
{	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
"Can't open /proc/mounts\n"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
while	O
(	O
!	O
feof	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),*(void),int,int,array(char))))->(int)
(	O
f	*(char)
)	O
)	O
{	O
fscanf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),*(void),int,int,array(char))),*(char))->(int)
(	O
f	*(char)
,	O
"%s %s %s %s %d %d"	*(char)
,	O
dev	array(char)
,	O
mpoint	array(char)
,	O
fstype	array(char)
,	O
access	(*(char),int)->(int)
,	O
&	O
a	int
,	O
&	O
b	int
)	O
;	O
if	O
(	O
strstr	(*(char),*(char))->(*(char))
(	O
"ext2vfatnfs"	*(char)
,	O
fstype	array(char)
)	O
!=	O
0	int
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
result	array(char)
,	O
"%s\n"	*(char)
,	O
mpoint	array(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
(	O
EPChar	*(char)
)	O
buf	*(struct(long,long,*(void)))
->	O
dat	*(void)
,	O
result	array(char)
)	O
;	O
}	O
}	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),*(void),int,int,array(char))))->(int)
(	O
f	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMGetFileSizeZrS32	(int,*(char))->(int)
(	O
CLASSID	int
id	int
,	O
EPChar	*(char)
name	*(char)
)	O
{	O
struct	O
stat	struct(long long,short,long,int,int,int,int,long long,short,long,long,long,struct(long,long),struct(long,long),struct(long,long),long,long)
buf	*(struct(long,long,*(void)))
;	O
if	O
(	O
(	O
stat	struct(long long,short,long,int,int,int,int,long long,short,long,long,long,struct(long,long),struct(long,long),struct(long,long),long,long)
(	O
name	*(char)
,	O
&	O
buf	*(struct(long,long,*(void)))
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"Can't get file size"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
buf	*(struct(long,long,*(void)))
.	O
st_size	long
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMGetFileOwnerZsZrS32	(int,*(char))->(int)
(	O
CLASSID	int
id	int
,	O
EPChar	*(char)
name	*(char)
)	O
{	O
struct	O
stat	struct(long long,short,long,int,int,int,int,long long,short,long,long,long,struct(long,long),struct(long,long),struct(long,long),long,long)
buf	*(struct(long,long,*(void)))
;	O
if	O
(	O
(	O
stat	struct(long long,short,long,int,int,int,int,long long,short,long,long,long,struct(long,long),struct(long,long),struct(long,long),long,long)
(	O
name	*(char)
,	O
&	O
buf	*(struct(long,long,*(void)))
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"Can't get file owner"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
buf	*(struct(long,long,*(void)))
.	O
st_uid	int
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMTestFileZZrS32	(int,*(char),*(char))->(int)
(	O
CLASSID	int
id	int
,	O
EPChar	*(char)
name	*(char)
,	O
EPChar	*(char)
flags	int
)	O
{	O
struct	O
stat	struct(long long,short,long,int,int,int,int,long long,short,long,long,long,struct(long,long),struct(long,long),struct(long,long),long,long)
buf	*(struct(long,long,*(void)))
;	O
if	O
(	O
(	O
stat	struct(long long,short,long,int,int,int,int,long long,short,long,long,long,struct(long,long),struct(long,long),struct(long,long),long,long)
(	O
name	*(char)
,	O
&	O
buf	*(struct(long,long,*(void)))
)	O
)	O
==	O
-	O
1	int
)	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	int
)	O
{	O
edma_printf	(*(char))->(long)
(	O
"File %s doesn't exist"	*(char)
,	O
name	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
edma_printf	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"Can't get file info"	*(char)
)	O
;	O
perror	(*(char))->(void)
(	O
"[FILESYSTEM](TestFile):"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
1	int
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMCreateDirectoryZrS32	(int,*(char))->(int)
(	O
CLASSID	int
id	int
,	O
EPChar	*(char)
name	*(char)
)	O
{	O
int	O
r	int
;	O
r	int
=	O
mkdir	(*(char),int)->(int)
(	O
name	*(char)
,	O
0777	int
)	O
;	O
return	O
r	int
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMDeleteDirectoryZrS32	(int,*(char))->(int)
(	O
CLASSID	int
id	int
,	O
EPChar	*(char)
name	*(char)
)	O
{	O
return	O
rmdir	(*(char))->(int)
(	O
name	*(char)
)	O
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMChangeDirectoryZrS32	(int,*(char))->(int)
(	O
CLASSID	int
id	int
,	O
EPChar	*(char)
name	*(char)
)	O
{	O
return	O
chdir	(*(char))->(int)
(	O
name	*(char)
)	O
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMReadRAWDirectoryZsArS32	(int,*(char),*(struct(long,long,*(void))))->(int)
(	O
CLASSID	int
id	int
,	O
EPChar	*(char)
dir_name	*(char)
,	O
EDMAT_BUFFER	struct(long,long,*(void))
*	O
buf	*(struct(long,long,*(void)))
)	O
{	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
*	O
namelist	*(*(struct(long,long,short,char,array(char))))
;	O
ESint32	int
i	int
,	O
n	int
;	O
EPChar	*(char)
*	O
aux	*(*(char))
;	O
n	int
=	O
scandir	(*(char),*(*(*(struct(long,long,short,char,array(char))))),*((*(struct(long,long,short,char,array(char))))->(int)),*((*(*(struct`)),*(*(struct`)))->(int)))->(int)
(	O
dir_name	*(char)
,	O
&	O
namelist	*(*(struct(long,long,short,char,array(char))))
,	O
0	int
,	O
alphasort	(*(*(struct(long,long,short,char,array(char)))),*(*(struct(long,long,short,char,array(char)))))->(int)
)	O
;	O
if	O
(	O
n	int
<	O
0	int
)	O
return	O
-	O
1	int
;	O
i	int
=	O
n	int
;	O
edma_buffer_alloc	(*(struct(long,long,*(void))),long)->(int)
(	O
buf	*(struct(long,long,*(void)))
,	O
(	O
n	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
EPChar	*(char)
)	O
)	O
;	O
aux	*(*(char))
=	O
(	O
EPChar	*(char)
*	O
)	O
buf	*(struct(long,long,*(void)))
->	O
dat	*(void)
;	O
while	O
(	O
n	int
--	O
)	O
{	O
edma_printf	(*(char))->(long)
(	O
"[FILESYSTEM] Dir entry : %s"	*(char)
,	O
namelist	*(*(struct(long,long,short,char,array(char))))
[	O
n	int
]	O
->	O
d_name	array(char)
)	O
;	O
aux	*(*(char))
[	O
n	int
]	O
=	O
strdup	(*(char))->(*(char))
(	O
namelist	*(*(struct(long,long,short,char,array(char))))
[	O
n	int
]	O
->	O
d_name	array(char)
)	O
;	O
free	(*(void))->(void)
(	O
namelist	*(*(struct(long,long,short,char,array(char))))
[	O
n	int
]	O
)	O
;	O
}	O
aux	*(*(char))
[	O
i	int
]	O
=	O
NULL	O
;	O
free	(*(void))->(void)
(	O
namelist	*(*(struct(long,long,short,char,array(char))))
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMFreeDirectoryDatasArS32	(int,*(struct(long,long,*(void))))->(int)
(	O
CLASSID	int
id	int
,	O
EDMAT_BUFFER	struct(long,long,*(void))
*	O
buf	*(struct(long,long,*(void)))
)	O
{	O
EPChar	*(char)
*	O
aux	*(*(char))
;	O
aux	*(*(char))
=	O
(	O
EPChar	*(char)
*	O
)	O
buf	*(struct(long,long,*(void)))
->	O
dat	*(void)
;	O
while	O
(	O
*	O
aux	*(*(char))
!=	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
*	O
aux	*(*(char))
)	O
;	O
aux	*(*(char))
++	O
;	O
}	O
edma_buffer_free	(*(struct(long,long,*(void))))->(int)
(	O
buf	*(struct(long,long,*(void)))
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMReadDirectoryZsOrS32	(int,*(int))->(int)
(	O
CLASSID	int
id	int
,	O
OBJID	int
*	O
IdObj	int
)	O
{	O
edma_printf	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"ReadDirectory still not implemented"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMGetFileTimeZsS32sS32sS32rS32	(int,*(char),*(int),*(int),*(int))->(int)
(	O
CLASSID	int
id	int
,	O
EPChar	*(char)
name	*(char)
,	O
ESint32	int
*	O
at	*(int)
,	O
ESint32	int
*	O
mt	*(int)
,	O
ESint32	int
*	O
ct	*(int)
)	O
{	O
struct	O
stat	struct(long long,short,long,int,int,int,int,long long,short,long,long,long,struct(long,long),struct(long,long),struct(long,long),long,long)
buf	*(struct(long,long,*(void)))
;	O
if	O
(	O
(	O
stat	struct(long long,short,long,int,int,int,int,long long,short,long,long,long,struct(long,long),struct(long,long),struct(long,long),long,long)
(	O
name	*(char)
,	O
&	O
buf	*(struct(long,long,*(void)))
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"Can't get file time info"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
*	O
at	*(int)
=	O
buf	*(struct(long,long,*(void)))
.	O
st_atime	O
;	O
*	O
mt	*(int)
=	O
buf	*(struct(long,long,*(void)))
.	O
st_mtime	O
;	O
*	O
ct	*(int)
=	O
buf	*(struct(long,long,*(void)))
.	O
st_ctime	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMIsDirectoryZrS32	(int,*(char))->(int)
(	O
CLASSID	int
id	int
,	O
EPChar	*(char)
name	*(char)
)	O
{	O
struct	O
stat	struct(long long,short,long,int,int,int,int,long long,short,long,long,long,struct(long,long),struct(long,long),struct(long,long),long,long)
buf	*(struct(long,long,*(void)))
;	O
if	O
(	O
(	O
stat	struct(long long,short,long,int,int,int,int,long long,short,long,long,long,struct(long,long),struct(long,long),struct(long,long),long,long)
(	O
name	*(char)
,	O
&	O
buf	*(struct(long,long,*(void)))
)	O
)	O
==	O
-	O
1	int
)	O
{	O
perror	(*(char))->(void)
(	O
"IsDirectort"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
S_ISDIR	O
(	O
buf	*(struct(long,long,*(void)))
.	O
st_mode	int
)	O
)	O
return	O
1	int
;	O
else	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMIsFileZrS32	(int,*(char))->(int)
(	O
CLASSID	int
id	int
,	O
EPChar	*(char)
name	*(char)
)	O
{	O
struct	O
stat	struct(long long,short,long,int,int,int,int,long long,short,long,long,long,struct(long,long),struct(long,long),struct(long,long),long,long)
buf	*(struct(long,long,*(void)))
;	O
if	O
(	O
(	O
stat	struct(long long,short,long,int,int,int,int,long long,short,long,long,long,struct(long,long),struct(long,long),struct(long,long),long,long)
(	O
name	*(char)
,	O
&	O
buf	*(struct(long,long,*(void)))
)	O
)	O
==	O
-	O
1	int
)	O
{	O
perror	(*(char))->(void)
(	O
"IsDirectort"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
S_ISREG	O
(	O
buf	*(struct(long,long,*(void)))
.	O
st_mode	int
)	O
)	O
return	O
1	int
;	O
else	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMIsLinkZrS32	(int,*(char))->(int)
(	O
CLASSID	int
id	int
,	O
EPChar	*(char)
name	*(char)
)	O
{	O
struct	O
stat	struct(long long,short,long,int,int,int,int,long long,short,long,long,long,struct(long,long),struct(long,long),struct(long,long),long,long)
buf	*(struct(long,long,*(void)))
;	O
if	O
(	O
(	O
lstat	(*(char),*(struct(long long,short,long,int,int,int,int,long long,short,long,long,long,struct(long,long),struct(long,long),struct(long,long),long,long)))->(int)
(	O
name	*(char)
,	O
&	O
buf	*(struct(long,long,*(void)))
)	O
)	O
==	O
-	O
1	int
)	O
{	O
perror	(*(char))->(void)
(	O
"IsDirectort"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
S_ISLNK	O
(	O
buf	*(struct(long,long,*(void)))
.	O
st_mode	int
)	O
)	O
return	O
1	int
;	O
else	O
return	O
0	int
;	O
}	O
