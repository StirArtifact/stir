static	O
void	O
*	O
dico_mergesort	(*(void),*(void),long,long,*((*(void),*(void),*(void))->(int)),*(void))->(*(void))
(	O
void	O
*	O
a	*(struct)
,	O
void	O
*	O
b	*(struct)
,	O
size_t	long
nmemb	long
,	O
size_t	long
size	long
,	O
int	O
(	O
*	O
comp	*((*(void),*(void),*(void))->(int))
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
closure	*(void)
)	O
;	O
static	O
void	O
merge	(*(void),*(void),long,long,long,long,*((*(void),*(void),*(void))->(int)),*(void))->(void)
(	O
void	O
*	O
source	*(void)
,	O
void	O
*	O
work	*(void)
,	O
size_t	long
size	long
,	O
size_t	long
left	long
,	O
size_t	long
right	long
,	O
size_t	long
end	int
,	O
int	O
(	O
*	O
comp	*((*(void),*(void),*(void))->(int))
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
closure	*(void)
)	O
;	O
int	O
dico_sort	(*(void),long,long,*((*(void),*(void),*(void))->(int)),*(void))->(int)
(	O
void	O
*	O
base	*(void)
,	O
size_t	long
nmemb	long
,	O
size_t	long
size	long
,	O
int	O
(	O
*	O
comp	*((*(void),*(void),*(void))->(int))
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
closure	*(void)
)	O
{	O
void	O
*	O
tmp	*(void)
,	O
*	O
res	*(void)
;	O
tmp	*(void)
=	O
calloc	(long,long)->(*(void))
(	O
nmemb	long
,	O
size	long
)	O
;	O
if	O
(	O
!	O
tmp	*(void)
)	O
return	O
-	O
1	int
;	O
res	*(void)
=	O
dico_mergesort	(*(void),*(void),long,long,*((*(void),*(void),*(void))->(int)),*(void))->(*(void))
(	O
base	*(void)
,	O
tmp	*(void)
,	O
nmemb	long
,	O
size	long
,	O
comp	*((*(void),*(void),*(void))->(int))
,	O
closure	*(void)
)	O
;	O
if	O
(	O
res	*(void)
!=	O
base	*(void)
)	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
base	*(void)
,	O
res	*(void)
,	O
nmemb	long
*	O
size	long
)	O
;	O
free	(*(void))->(void)
(	O
tmp	*(void)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
inline	O
size_t	long
min	(long,long)->(long)
(	O
size_t	long
a	*(struct)
,	O
size_t	long
b	*(struct)
)	O
{	O
return	O
a	*(struct)
<	O
b	*(struct)
?	O
a	*(struct)
:	O
b	*(struct)
;	O
}	O
static	O
void	O
*	O
dico_mergesort	(*(void),*(void),long,long,*((*(void),*(void),*(void))->(int)),*(void))->(*(void))
(	O
void	O
*	O
a	*(struct)
,	O
void	O
*	O
b	*(struct)
,	O
size_t	long
nmemb	long
,	O
size_t	long
size	long
,	O
int	O
(	O
*	O
comp	*((*(void),*(void),*(void))->(int))
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
closure	*(void)
)	O
{	O
size_t	long
width	long
;	O
for	O
(	O
width	long
=	O
1	int
;	O
width	long
<	O
nmemb	long
;	O
width	long
<<=	O
1	int
)	O
{	O
size_t	long
i	long
;	O
void	O
*	O
t	*(void)
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nmemb	long
;	O
i	long
+=	O
2	int
*	O
width	long
)	O
{	O
merge	(*(void),*(void),long,long,long,long,*((*(void),*(void),*(void))->(int)),*(void))->(void)
(	O
a	*(struct)
,	O
b	*(struct)
,	O
size	long
,	O
i	long
,	O
min	(long,long)->(long)
(	O
i	long
+	O
width	long
,	O
nmemb	long
)	O
,	O
min	(long,long)->(long)
(	O
i	long
+	O
2	int
*	O
width	long
,	O
nmemb	long
)	O
,	O
comp	*((*(void),*(void),*(void))->(int))
,	O
closure	*(void)
)	O
;	O
}	O
t	*(void)
=	O
a	*(struct)
;	O
a	*(struct)
=	O
b	*(struct)
;	O
b	*(struct)
=	O
t	*(void)
;	O
}	O
return	O
a	*(struct)
;	O
}	O
static	O
void	O
merge	(*(void),*(void),long,long,long,long,*((*(void),*(void),*(void))->(int)),*(void))->(void)
(	O
void	O
*	O
source	*(void)
,	O
void	O
*	O
work	*(void)
,	O
size_t	long
size	long
,	O
size_t	long
left	long
,	O
size_t	long
right	long
,	O
size_t	long
end	int
,	O
int	O
(	O
*	O
comp	*((*(void),*(void),*(void))->(int))
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
closure	*(void)
)	O
{	O
size_t	long
i	long
=	O
left	long
;	O
size_t	long
j	long
=	O
right	long
;	O
size_t	long
k	long
;	O
for	O
(	O
k	long
=	O
left	long
;	O
k	long
<	O
end	int
;	O
k	long
++	O
)	O
{	O
if	O
(	O
i	long
<	O
right	long
&&	O
(	O
j	long
>=	O
end	int
||	O
comp	*((*(void),*(void),*(void))->(int))
(	O
MEMB	O
(	O
source	*(void)
,	O
i	long
)	O
,	O
MEMB	O
(	O
source	*(void)
,	O
j	long
)	O
,	O
closure	*(void)
)	O
<=	O
0	int
)	O
)	O
{	O
COPY	O
(	O
work	*(void)
,	O
k	long
,	O
source	*(void)
,	O
i	long
)	O
;	O
i	long
++	O
;	O
}	O
else	O
{	O
COPY	O
(	O
work	*(void)
,	O
k	long
,	O
source	*(void)
,	O
j	long
)	O
;	O
j	long
++	O
;	O
}	O
}	O
}	O
