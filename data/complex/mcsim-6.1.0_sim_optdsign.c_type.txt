enum	O
{	O
Shannon	O
,	O
Var_Reduction	O
}	O
;	O
void	O
InitOptArrays	O
(	O
PANALYSIS	O
panal	O
,	O
int	O
*	O
*	O
piDesign_mask	O
,	O
long	O
*	O
pnDesignPts	O
,	O
double	O
*	O
*	O
*	O
pdY	O
,	O
long	O
*	O
pnPreds	O
,	O
long	O
*	O
pnStartDecisionPts	O
,	O
double	O
*	O
*	O
pdVariance	O
,	O
double	O
*	O
*	O
pdIR	O
,	O
long	O
nSims	O
)	O
{	O
BOOL	int
bFound	O
;	O
int	O
i	O
,	O
j	O
,	O
k	O
;	O
OUTSPEC	struct(int,*(struct(*(struct(*`,*`)),*(struct(*`,*`)),int)),*(*(char)),*(long),int,*(struct(*(struct(*`,*`)),*(struct(*`,*`)),int)),*(*(char)),*(long),*(int),*(int),*(*(double)),*(*(double)),int,*(double),*(int),*(*(double)))
*	O
pos	O
;	O
*	O
pnPreds	O
=	O
*	O
pnDesignPts	O
=	O
0	int
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
panal	O
->	O
expGlobal	O
.	O
iExp	O
;	O
i	O
++	O
)	O
{	O
pos	O
=	O
&	O
panal	O
->	O
rgpExps	O
[	O
i	O
]	O
->	O
os	O
;	O
bFound	O
=	O
FALSE	O
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
pos	O
->	O
nOutputs	int
;	O
j	O
++	O
)	O
{	O
for	O
(	O
k	O
=	O
0	int
;	O
k	O
<	O
pos	O
->	O
pcOutputTimes	*(int)
[	O
j	O
]	O
;	O
k	O
++	O
)	O
{	O
if	O
(	O
pos	O
->	O
prgdDataVals	*(*(double))
)	O
{	O
(	O
*	O
pnDesignPts	O
)	O
++	O
;	O
bFound	O
=	O
TRUE	O
;	O
}	O
(	O
*	O
pnPreds	O
)	O
++	O
;	O
}	O
}	O
if	O
(	O
bFound	O
)	O
*	O
pnStartDecisionPts	O
=	O
*	O
pnPreds	O
;	O
}	O
if	O
(	O
*	O
pnDesignPts	O
==	O
0	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Error: you must provide Data Statements "	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"for at least one Simulation to define design points - Exiting.\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
if	O
(	O
*	O
pnPreds	O
==	O
*	O
pnDesignPts	O
)	O
{	O
printf	(*(char))->(int)
(	O
"Error: you must provide at least one Simulation "	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"without Data Statements for utility computations - Exiting.\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
if	O
(	O
(	O
!	O
(	O
*	O
piDesign_mask	O
=	O
InitiVector	(long)->(*(int))
(	O
*	O
pnDesignPts	O
)	O
)	O
)	O
||	O
(	O
!	O
(	O
*	O
pdVariance	O
=	O
InitdVector	(long)->(*(double))
(	O
*	O
pnDesignPts	O
)	O
)	O
)	O
||	O
(	O
!	O
(	O
*	O
pdIR	O
=	O
InitdVector	(long)->(*(double))
(	O
nSims	O
)	O
)	O
)	O
||	O
(	O
!	O
(	O
*	O
pdY	O
=	O
InitdMatrix	(long,long)->(*(*(double)))
(	O
nSims	O
,	O
*	O
pnPreds	O
)	O
)	O
)	O
)	O
ReportError	O
(	O
NULL	O
,	O
RE_OUTOFMEM	O
|	O
RE_FATAL	O
,	O
"InitOptArrays"	*(char)
,	O
NULL	O
)	O
;	O
}	O
void	O
OpenOptFiles	O
(	O
PANALYSIS	O
panal	O
)	O
{	O
if	O
(	O
panal	O
->	O
bCommandLineSpec	O
)	O
panal	O
->	O
gd	O
.	O
szGout	O
=	O
panal	O
->	O
szOutfilename	O
;	O
else	O
if	O
(	O
!	O
(	O
panal	O
->	O
gd	O
.	O
szGout	O
)	O
)	O
panal	O
->	O
gd	O
.	O
szGout	O
=	O
"simopt.default.out"	*(char)
;	O
if	O
(	O
!	O
(	O
panal	O
->	O
gd	O
.	O
pfileOut	O
)	O
&&	O
!	O
(	O
panal	O
->	O
gd	O
.	O
pfileOut	O
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
panal	O
->	O
gd	O
.	O
szGout	O
,	O
"w"	*(char)
)	O
)	O
)	O
ReportError	O
(	O
NULL	O
,	O
RE_FATAL	O
|	O
RE_CANNOTOPEN	O
,	O
panal	O
->	O
gd	O
.	O
szGout	O
,	O
"[in OpenOptFiles()]"	*(char)
)	O
;	O
}	O
void	O
WriteOutHeader	O
(	O
PANALYSIS	O
panal	O
,	O
int	O
criterion	O
)	O
{	O
int	O
i	O
,	O
j	O
,	O
k	O
;	O
OUTSPEC	struct(int,*(struct(*(struct(*`,*`)),*(struct(*`,*`)),int)),*(*(char)),*(long),int,*(struct(*(struct(*`,*`)),*(struct(*`,*`)),int)),*(*(char)),*(long),*(int),*(int),*(*(double)),*(*(double)),int,*(double),*(int),*(*(double)))
*	O
pos	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
panal	O
->	O
gd	O
.	O
pfileOut	O
,	O
"iter\t"	*(char)
)	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
panal	O
->	O
expGlobal	O
.	O
iExp	O
;	O
i	O
++	O
)	O
{	O
pos	O
=	O
&	O
panal	O
->	O
rgpExps	O
[	O
i	O
]	O
->	O
os	O
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
pos	O
->	O
nOutputs	int
;	O
j	O
++	O
)	O
{	O
for	O
(	O
k	O
=	O
0	int
;	O
k	O
<	O
pos	O
->	O
pcOutputTimes	*(int)
[	O
j	O
]	O
;	O
k	O
++	O
)	O
{	O
if	O
(	O
pos	O
->	O
prgdDataVals	*(*(double))
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
panal	O
->	O
gd	O
.	O
pfileOut	O
,	O
"T%g\t"	*(char)
,	O
pos	O
->	O
prgdOutputTimes	*(*(double))
[	O
j	O
]	O
[	O
k	O
]	O
)	O
;	O
}	O
}	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
panal	O
->	O
gd	O
.	O
pfileOut	O
,	O
"Chosen\t"	*(char)
)	O
;	O
if	O
(	O
criterion	O
==	O
Var_Reduction	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
panal	O
->	O
gd	O
.	O
pfileOut	O
,	O
"Variance\tSD\tUtility\n"	*(char)
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
panal	O
->	O
gd	O
.	O
pfileOut	O
)	O
;	O
}	O
void	O
SetupLikes	O
(	O
PANALYSIS	O
panal	O
,	O
long	O
nPreds	O
,	O
PMCVAR	O
*	O
*	O
pLikes	O
)	O
{	O
BOOL	int
bFound	O
,	O
bLikeFound	O
;	O
long	O
i	O
,	O
j	O
,	O
k	O
,	O
m	O
,	O
n	int
;	O
long	O
nPts	O
=	O
0	int
;	O
OUTSPEC	struct(int,*(struct(*(struct(*`,*`)),*(struct(*`,*`)),int)),*(*(char)),*(long),int,*(struct(*(struct(*`,*`)),*(struct(*`,*`)),int)),*(*(char)),*(long),*(int),*(int),*(*(double)),*(*(double)),int,*(double),*(int),*(*(double)))
*	O
pos	O
;	O
PMCVAR	O
pMCVar	O
;	O
PMONTECARLO	O
pMC	O
=	O
&	O
panal	O
->	O
mc	O
;	O
if	O
(	O
!	O
(	O
*	O
pLikes	O
=	O
(	O
PMCVAR	O
*	O
)	O
malloc	(long)->(*(void))
(	O
nPreds	O
*	O
sizeof	O
(	O
PMCVAR	O
)	O
)	O
)	O
)	O
ReportError	O
(	O
NULL	O
,	O
RE_OUTOFMEM	O
|	O
RE_FATAL	O
,	O
"SetupLikes"	*(char)
,	O
NULL	O
)	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
panal	O
->	O
expGlobal	O
.	O
iExp	O
;	O
i	O
++	O
)	O
{	O
pos	O
=	O
&	O
panal	O
->	O
rgpExps	O
[	O
i	O
]	O
->	O
os	O
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
pos	O
->	O
nOutputs	int
;	O
j	O
++	O
)	O
{	O
for	O
(	O
k	O
=	O
0	int
;	O
k	O
<	O
pos	O
->	O
pcOutputTimes	*(int)
[	O
j	O
]	O
;	O
k	O
++	O
)	O
{	O
if	O
(	O
!	O
(	O
(	O
*	O
pLikes	O
)	O
[	O
nPts	O
]	O
=	O
(	O
PMCVAR	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
MCVAR	O
)	O
)	O
)	O
)	O
ReportError	O
(	O
NULL	O
,	O
RE_OUTOFMEM	O
|	O
RE_FATAL	O
,	O
"SetupLikes"	*(char)
,	O
NULL	O
)	O
;	O
if	O
(	O
pos	O
->	O
prgdDataVals	*(*(double))
)	O
{	O
bLikeFound	O
=	O
FALSE	O
;	O
m	O
=	O
pMC	O
->	O
nSetParms	O
;	O
while	O
(	O
!	O
bLikeFound	O
)	O
{	O
bLikeFound	O
=	O
(	O
pMC	O
->	O
rgpMCVar	O
[	O
m	O
]	O
->	O
hvar	long
==	O
pos	O
->	O
phvar_out	*(long)
[	O
j	O
]	O
)	O
;	O
if	O
(	O
!	O
bLikeFound	O
)	O
m	O
++	O
;	O
}	O
if	O
(	O
bLikeFound	O
)	O
{	O
pMCVar	O
=	O
pMC	O
->	O
rgpMCVar	O
[	O
m	O
]	O
;	O
SetParents	O
(	O
pMC	O
,	O
0	int
)	O
;	O
for	O
(	O
m	O
=	O
0	int
;	O
m	O
<	O
4	int
;	O
m	O
++	O
)	O
{	O
if	O
(	O
pMCVar	O
->	O
iParmType	O
[	O
m	O
]	O
==	O
MCVP_PRED	O
)	O
{	O
bFound	O
=	O
FALSE	O
;	O
n	int
=	O
0	int
;	O
while	O
(	O
(	O
n	int
<	O
pos	O
->	O
nOutputs	int
)	O
&&	O
(	O
!	O
bFound	O
)	O
)	O
{	O
bFound	O
=	O
(	O
pMCVar	O
->	O
hParm	O
[	O
m	O
]	O
==	O
pos	O
->	O
phvar_out	*(long)
[	O
n	int
]	O
)	O
;	O
if	O
(	O
!	O
bFound	O
)	O
n	int
++	O
;	O
}	O
if	O
(	O
bFound	O
)	O
{	O
pMCVar	O
->	O
pdParm	O
[	O
m	O
]	O
=	O
&	O
(	O
pos	O
->	O
prgdOutputVals	*(*(double))
[	O
n	int
]	O
[	O
k	O
]	O
)	O
;	O
}	O
else	O
{	O
printf	(*(char))->(int)
(	O
"Error: missing Print statement for parameter "	*(char)
"number %ld of %s distribution - Exiting.\n\n"	*(char)
,	O
j	O
,	O
pMCVar	O
->	O
pszName	O
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
pMCVar	O
->	O
iParmType	O
[	O
m	O
]	O
==	O
MCVP_DATA	O
)	O
{	O
bFound	O
=	O
FALSE	O
;	O
n	int
=	O
0	int
;	O
while	O
(	O
(	O
n	int
<	O
pos	O
->	O
nData	int
)	O
&&	O
(	O
!	O
bFound	O
)	O
)	O
{	O
bFound	O
=	O
(	O
pMCVar	O
->	O
hParm	O
[	O
m	O
]	O
==	O
pos	O
->	O
phvar_dat	*(long)
[	O
n	int
]	O
)	O
;	O
if	O
(	O
!	O
bFound	O
)	O
n	int
++	O
;	O
}	O
if	O
(	O
bFound	O
)	O
{	O
pMCVar	O
->	O
pdParm	O
[	O
m	O
]	O
=	O
&	O
(	O
pos	O
->	O
prgdDataVals	*(*(double))
[	O
n	int
]	O
[	O
k	O
]	O
)	O
;	O
}	O
else	O
{	O
printf	(*(char))->(int)
(	O
"Error: no Data for %s in Simulation %ld "	*(char)
"- Exiting.\n\n"	*(char)
,	O
pMCVar	O
->	O
pszName	O
,	O
i	O
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
}	O
}	O
}	O
else	O
{	O
printf	(*(char))->(int)
(	O
"Error: missing Likelihood for %s - Exiting.\n\n"	*(char)
,	O
pos	O
->	O
pszOutputNames	*(*(char))
[	O
j	O
]	O
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
(	O
*	O
pLikes	O
)	O
[	O
nPts	O
]	O
,	O
pMCVar	O
,	O
sizeof	O
(	O
MCVAR	O
)	O
)	O
;	O
}	O
else	O
{	O
(	O
*	O
pLikes	O
)	O
[	O
nPts	O
]	O
=	O
NULL	O
;	O
}	O
nPts	O
=	O
nPts	O
+	O
1	int
;	O
}	O
}	O
}	O
}	O
int	O
Estimate_y	O
(	O
PANALYSIS	O
panal	O
,	O
double	O
*	O
pdTheta	O
,	O
double	O
*	O
pdY	O
)	O
{	O
int	O
cNPred	O
=	O
0	int
;	O
int	O
i	O
,	O
j	O
,	O
k	O
;	O
OUTSPEC	struct(int,*(struct(*(struct(*`,*`)),*(struct(*`,*`)),int)),*(*(char)),*(long),int,*(struct(*(struct(*`,*`)),*(struct(*`,*`)),int)),*(*(char)),*(long),*(int),*(int),*(*(double)),*(*(double)),int,*(double),*(int),*(*(double)))
*	O
pos	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
panal	O
->	O
expGlobal	O
.	O
iExp	O
;	O
i	O
++	O
)	O
{	O
InitModel	()->(void)
(	O
)	O
;	O
ModifyParms	O
(	O
panal	O
->	O
expGlobal	O
.	O
plistParmMods	O
)	O
;	O
SetParms	O
(	O
panal	O
->	O
mc	O
.	O
nSetParms	O
,	O
panal	O
->	O
mc	O
.	O
rghvar	O
,	O
pdTheta	O
)	O
;	O
ModifyParms	O
(	O
panal	O
->	O
rgpExps	O
[	O
i	O
]	O
->	O
plistParmMods	O
)	O
;	O
if	O
(	O
!	O
DoOneExperiment	O
(	O
panal	O
->	O
rgpExps	O
[	O
i	O
]	O
)	O
)	O
{	O
printf	(*(char))->(int)
(	O
"Warning: Can't estimate y with parameters:\n"	*(char)
)	O
;	O
WriteArray	O
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
panal	O
->	O
mc	O
.	O
nSetParms	O
,	O
pdTheta	O
)	O
;	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\n'	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
return	O
0	int
;	O
}	O
pos	O
=	O
&	O
panal	O
->	O
rgpExps	O
[	O
i	O
]	O
->	O
os	O
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
pos	O
->	O
nOutputs	int
;	O
j	O
++	O
)	O
{	O
for	O
(	O
k	O
=	O
0	int
;	O
k	O
<	O
pos	O
->	O
pcOutputTimes	*(int)
[	O
j	O
]	O
;	O
k	O
++	O
)	O
{	O
pdY	O
[	O
cNPred	O
]	O
=	O
pos	O
->	O
prgdOutputVals	*(*(double))
[	O
j	O
]	O
[	O
k	O
]	O
;	O
cNPred	O
++	O
;	O
}	O
}	O
}	O
return	O
1	int
;	O
}	O
void	O
ReadAndSimulate	O
(	O
PANALYSIS	O
panal	O
,	O
long	O
nSetParms	O
,	O
double	O
*	O
*	O
pdY	O
,	O
long	O
nPreds	O
,	O
PMCVAR	O
*	O
pLikes	O
,	O
long	O
nSims	O
)	O
{	O
register	O
char	O
c	O
;	O
long	O
lDummy	O
,	O
iter	O
=	O
0	int
;	O
long	O
j	O
;	O
PDOUBLE	*(double)
pdTheta	O
=	O
NULL	O
;	O
PDOUBLE	*(double)
pdTheta_0	O
=	O
NULL	O
;	O
PDOUBLE	*(double)
pdData	*(double)
=	O
NULL	O
;	O
PDOUBLE	*(double)
pdData_old	O
=	O
NULL	O
;	O
FILE	struct
*	O
pfileRestart	O
=	O
panal	O
->	O
gd	O
.	O
pfileRestart	O
;	O
if	O
(	O
!	O
(	O
pdTheta	O
=	O
InitdVector	(long)->(*(double))
(	O
nSetParms	O
)	O
)	O
||	O
!	O
(	O
pdTheta_0	O
=	O
InitdVector	(long)->(*(double))
(	O
nSetParms	O
)	O
)	O
||	O
!	O
(	O
pdData_old	O
=	O
InitdVector	(long)->(*(double))
(	O
nPreds	O
)	O
)	O
||	O
!	O
(	O
pdData	*(double)
=	O
InitdVector	(long)->(*(double))
(	O
nPreds	O
)	O
)	O
)	O
ReportError	O
(	O
NULL	O
,	O
RE_OUTOFMEM	O
|	O
RE_FATAL	O
,	O
"ReadAndSimulate"	*(char)
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
(	O
pfileRestart	O
)	O
&&	O
!	O
(	O
pfileRestart	O
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
panal	O
->	O
gd	O
.	O
szGrestart	O
,	O
"r"	*(char)
)	O
)	O
)	O
ReportError	O
(	O
NULL	O
,	O
RE_FATAL	O
|	O
RE_CANNOTOPEN	O
,	O
panal	O
->	O
gd	O
.	O
szGrestart	O
,	O
"[in ReadAndSimulate()]"	*(char)
)	O
;	O
do	O
{	O
c	O
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
pfileRestart	O
)	O
;	O
}	O
while	O
(	O
c	O
!=	O
'\n'	O
)	O
;	O
while	O
(	O
(	O
iter	O
<	O
nSims	O
)	O
&&	O
(	O
!	O
(	O
feof	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
pfileRestart	O
)	O
||	O
(	O
fscanf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
pfileRestart	O
,	O
"%ld"	*(char)
,	O
&	O
lDummy	O
)	O
==	O
EOF	O
)	O
)	O
)	O
)	O
{	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
nSetParms	O
;	O
j	O
++	O
)	O
{	O
if	O
(	O
!	O
fscanf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
pfileRestart	O
,	O
"%lg"	*(char)
,	O
&	O
(	O
pdTheta	O
[	O
j	O
]	O
)	O
)	O
)	O
ReportError	O
(	O
NULL	O
,	O
RE_READERROR	O
|	O
RE_FATAL	O
,	O
panal	O
->	O
gd	O
.	O
szGrestart	O
,	O
NULL	O
)	O
;	O
else	O
panal	O
->	O
mc	O
.	O
rgpMCVar	O
[	O
j	O
]	O
->	O
dVal	double
=	O
pdTheta	O
[	O
j	O
]	O
;	O
}	O
do	O
{	O
c	O
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
pfileRestart	O
)	O
;	O
}	O
while	O
(	O
c	O
!=	O
'\n'	O
)	O
;	O
Estimate_y	O
(	O
panal	O
,	O
pdTheta	O
,	O
pdY	O
[	O
iter	O
]	O
)	O
;	O
if	O
(	O
iter	O
==	O
0	int
)	O
{	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
nSetParms	O
;	O
j	O
++	O
)	O
{	O
pdTheta_0	O
[	O
j	O
]	O
=	O
pdTheta	O
[	O
j	O
]	O
;	O
}	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
nPreds	O
;	O
j	O
++	O
)	O
{	O
if	O
(	O
pLikes	O
[	O
j	O
]	O
!=	O
NULL	O
)	O
{	O
CalculateOneMCParm	O
(	O
pLikes	O
[	O
j	O
]	O
)	O
;	O
pdData_old	O
[	O
j	O
]	O
=	O
pLikes	O
[	O
j	O
]	O
->	O
dVal	double
;	O
}	O
}	O
}	O
else	O
{	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
nPreds	O
;	O
j	O
++	O
)	O
{	O
if	O
(	O
pLikes	O
[	O
j	O
]	O
!=	O
NULL	O
)	O
{	O
CalculateOneMCParm	O
(	O
pLikes	O
[	O
j	O
]	O
)	O
;	O
pdData	*(double)
[	O
j	O
]	O
=	O
pLikes	O
[	O
j	O
]	O
->	O
dVal	double
;	O
}	O
}	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
nPreds	O
;	O
j	O
++	O
)	O
if	O
(	O
pLikes	O
[	O
j	O
]	O
!=	O
NULL	O
)	O
{	O
pLikes	O
[	O
j	O
]	O
->	O
dVal	double
=	O
pdData_old	O
[	O
j	O
]	O
;	O
pdY	O
[	O
iter	O
]	O
[	O
j	O
]	O
=	O
LnDensity	O
(	O
pLikes	O
[	O
j	O
]	O
,	O
panal	O
)	O
;	O
pdData_old	O
[	O
j	O
]	O
=	O
pdData	*(double)
[	O
j	O
]	O
;	O
}	O
if	O
(	O
iter	O
==	O
nSims	O
-	O
1	int
)	O
{	O
Estimate_y	O
(	O
panal	O
,	O
pdTheta_0	O
,	O
pdY	O
[	O
0	int
]	O
)	O
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
nPreds	O
;	O
j	O
++	O
)	O
if	O
(	O
pLikes	O
[	O
j	O
]	O
!=	O
NULL	O
)	O
{	O
pLikes	O
[	O
j	O
]	O
->	O
dVal	double
=	O
pdData_old	O
[	O
j	O
]	O
;	O
pdY	O
[	O
0	int
]	O
[	O
j	O
]	O
=	O
LnDensity	O
(	O
pLikes	O
[	O
j	O
]	O
,	O
panal	O
)	O
;	O
}	O
}	O
}	O
iter	O
++	O
;	O
}	O
if	O
(	O
iter	O
<	O
nSims	O
)	O
{	O
printf	(*(char))->(int)
(	O
"\nError: The number of lines in file %s is less than\n"	*(char)
,	O
panal	O
->	O
gd	O
.	O
szGrestart	O
)	O
;	O
printf	(*(char))->(int)
(	O
"       the number of lines to read (%ld) - Exiting\n"	*(char)
,	O
nSims	O
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
pfileRestart	O
)	O
;	O
}	O
void	O
Do_Importance_Ratios	O
(	O
double	O
*	O
*	O
pdY	O
,	O
PMCVAR	O
*	O
pLikes	O
,	O
long	O
nSims	O
,	O
long	O
nPreds	O
,	O
long	O
nDesignPts	O
,	O
int	O
*	O
piDesign_mask	O
,	O
int	O
nDesignPt_tried	O
,	O
double	O
*	O
pdIR	O
)	O
{	O
long	O
i	O
,	O
j	O
,	O
k	O
;	O
double	O
dSumL	O
=	O
0	int
;	O
BOOL	int
bOn	int
;	O
for	O
(	O
k	O
=	O
0	int
;	O
k	O
<	O
nSims	O
;	O
k	O
++	O
)	O
{	O
pdIR	O
[	O
k	O
]	O
=	O
0	int
;	O
j	O
=	O
0	int
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
nPreds	O
;	O
i	O
++	O
)	O
{	O
if	O
(	O
pLikes	O
[	O
i	O
]	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
j	O
==	O
nDesignPt_tried	O
)	O
bOn	int
=	O
!	O
piDesign_mask	O
[	O
j	O
]	O
;	O
else	O
bOn	int
=	O
piDesign_mask	O
[	O
j	O
]	O
;	O
if	O
(	O
bOn	int
)	O
pdIR	O
[	O
k	O
]	O
=	O
pdIR	O
[	O
k	O
]	O
+	O
pdY	O
[	O
k	O
]	O
[	O
i	O
]	O
;	O
j	O
++	O
;	O
}	O
}	O
pdIR	O
[	O
k	O
]	O
=	O
exp	(double)->(double)
(	O
pdIR	O
[	O
k	O
]	O
)	O
;	O
dSumL	O
=	O
dSumL	O
+	O
pdIR	O
[	O
k	O
]	O
;	O
}	O
for	O
(	O
k	O
=	O
0	int
;	O
k	O
<	O
nSims	O
;	O
k	O
++	O
)	O
pdIR	O
[	O
k	O
]	O
=	O
pdIR	O
[	O
k	O
]	O
/	O
dSumL	O
;	O
}	O
double	O
DoVariance	O
(	O
long	O
nDim	O
,	O
double	O
*	O
pdIR	O
,	O
double	O
*	O
*	O
pdX	O
,	O
long	O
istart	O
,	O
long	O
ifinish	O
)	O
{	O
long	O
i	O
,	O
j	O
;	O
register	O
double	O
ave	O
,	O
ss	O
,	O
dTmp	O
;	O
ss	O
=	O
0	int
;	O
for	O
(	O
i	O
=	O
istart	O
;	O
i	O
<	O
ifinish	O
;	O
i	O
++	O
)	O
{	O
ave	O
=	O
0	int
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
nDim	O
;	O
j	O
++	O
)	O
{	O
ave	O
=	O
ave	O
+	O
pdIR	O
[	O
j	O
]	O
*	O
log	(double)->(double)
(	O
pdX	O
[	O
j	O
]	O
[	O
i	O
]	O
)	O
;	O
}	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
nDim	O
;	O
j	O
++	O
)	O
{	O
dTmp	O
=	O
log	(double)->(double)
(	O
pdX	O
[	O
j	O
]	O
[	O
i	O
]	O
)	O
-	O
ave	O
;	O
ss	O
=	O
ss	O
+	O
pdIR	O
[	O
j	O
]	O
*	O
dTmp	O
*	O
dTmp	O
;	O
}	O
}	O
return	O
(	O
ss	O
/	O
(	O
double	O
)	O
(	O
ifinish	O
-	O
istart	O
)	O
)	O
;	O
}	O
void	O
Compute_utility	O
(	O
long	O
nDesignPts	O
,	O
int	O
*	O
piDesign_mask	O
,	O
double	O
*	O
dUtility	O
)	O
{	O
int	O
nPts	O
=	O
0	int
;	O
int	O
i	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
nDesignPts	O
;	O
i	O
++	O
)	O
if	O
(	O
piDesign_mask	O
[	O
i	O
]	O
)	O
nPts	O
++	O
;	O
*	O
dUtility	O
=	O
-	O
2	int
*	O
nPts	O
;	O
}	O
void	O
WriteOptimOut	O
(	O
PANALYSIS	O
panal	O
,	O
long	O
iter	O
,	O
long	O
nDesignPts	O
,	O
int	O
criterion	O
,	O
double	O
*	O
pdVariance	O
,	O
int	O
*	O
piDesign_mask	O
,	O
long	O
iCrit	O
,	O
double	O
dCrit	O
,	O
double	O
dUtility	O
)	O
{	O
long	O
i	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
panal	O
->	O
gd	O
.	O
pfileOut	O
,	O
"%ld\t"	*(char)
,	O
iter	O
)	O
;	O
if	O
(	O
iCrit	O
<	O
nDesignPts	O
)	O
{	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
nDesignPts	O
;	O
i	O
++	O
)	O
{	O
if	O
(	O
(	O
&	O
panal	O
->	O
mc	O
)	O
->	O
style	O
==	O
forward	O
)	O
{	O
if	O
(	O
(	O
i	O
==	O
iCrit	O
)	O
||	O
!	O
(	O
piDesign_mask	O
[	O
i	O
]	O
)	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
panal	O
->	O
gd	O
.	O
pfileOut	O
,	O
"%g\t"	*(char)
,	O
pdVariance	O
[	O
i	O
]	O
)	O
;	O
else	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
panal	O
->	O
gd	O
.	O
pfileOut	O
,	O
"0\t"	*(char)
)	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
(	O
piDesign_mask	O
[	O
i	O
]	O
)	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
panal	O
->	O
gd	O
.	O
pfileOut	O
,	O
"0\t"	*(char)
)	O
;	O
else	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
panal	O
->	O
gd	O
.	O
pfileOut	O
,	O
"%g\t"	*(char)
,	O
pdVariance	O
[	O
i	O
]	O
)	O
;	O
}	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
panal	O
->	O
gd	O
.	O
pfileOut	O
,	O
"%ld\t"	*(char)
,	O
iCrit	O
+	O
1	int
)	O
;	O
}	O
else	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<=	O
nDesignPts	O
;	O
i	O
++	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
panal	O
->	O
gd	O
.	O
pfileOut	O
,	O
"0\t"	*(char)
)	O
;	O
if	O
(	O
criterion	O
==	O
Var_Reduction	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
panal	O
->	O
gd	O
.	O
pfileOut	O
,	O
"%g\t%g\t%g\n"	*(char)
,	O
dCrit	O
,	O
sqrt	(double)->(double)
(	O
dCrit	O
)	O
,	O
dUtility	O
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
panal	O
->	O
gd	O
.	O
pfileOut	O
)	O
;	O
}	O
void	O
Importance_Resample	O
(	O
long	O
nSims	O
,	O
long	O
*	O
pIndex0	O
,	O
long	O
*	O
pIndex1	O
,	O
long	O
*	O
plDrawn	O
,	O
double	O
*	O
pdL	O
,	O
double	O
dSumL	O
)	O
{	O
long	O
i	O
,	O
j	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
nSims	O
;	O
i	O
++	O
)	O
pdL	O
[	O
i	O
]	O
=	O
pdL	O
[	O
i	O
]	O
/	O
dSumL	O
;	O
j	O
=	O
0	int
;	O
do	O
{	O
i	O
=	O
(	O
long	O
)	O
floor	(double)->(double)
(	O
Randoms	()->(double)
(	O
)	O
*	O
nSims	O
)	O
;	O
if	O
(	O
Randoms	()->(double)
(	O
)	O
<	O
pdL	O
[	O
i	O
]	O
)	O
{	O
pIndex1	O
[	O
j	O
]	O
=	O
pIndex0	O
[	O
i	O
]	O
;	O
j	O
++	O
;	O
plDrawn	O
[	O
pIndex0	O
[	O
i	O
]	O
]	O
++	O
;	O
}	O
}	O
while	O
(	O
j	O
<	O
nSims	O
)	O
;	O
}	O
void	O
CloseOptFiles	O
(	O
PANALYSIS	O
panal	O
)	O
{	O
if	O
(	O
panal	O
->	O
gd	O
.	O
pfileOut	O
)	O
{	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
panal	O
->	O
gd	O
.	O
pfileOut	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\nWrote results to \"%s\"\n"	*(char)
,	O
panal	O
->	O
gd	O
.	O
szGout	O
)	O
;	O
}	O
}	O
void	O
DoOptimalDesign	O
(	O
PANALYSIS	O
panal	O
)	O
{	O
PGIBBSDATA	O
pgd	O
=	O
&	O
panal	O
->	O
gd	O
;	O
PMONTECARLO	O
pmc	O
=	O
&	O
panal	O
->	O
mc	O
;	O
long	O
i	O
,	O
j	O
;	O
long	O
iBest	O
=	O
0	int
;	O
long	O
dim	int
;	O
long	O
nDesignPts	O
;	O
long	O
nPreds	O
;	O
long	O
nSims	O
=	O
pmc	O
->	O
nRuns	O
;	O
int	O
*	O
piDesign_mask	O
;	O
long	O
nDesignPt_tried	O
;	O
long	O
nStartDecisionPts	O
;	O
int	O
criterion	O
;	O
double	O
dBest	O
=	O
0	int
;	O
double	O
dUtility	O
=	O
0	int
;	O
double	O
*	O
pdIR	O
;	O
double	O
*	O
pdVariance	O
;	O
double	O
*	O
*	O
pdY	O
;	O
PMCVAR	O
*	O
pLikes	O
;	O
criterion	O
=	O
Var_Reduction	O
;	O
if	O
(	O
criterion	O
!=	O
Var_Reduction	O
)	O
{	O
printf	(*(char))->(int)
(	O
"Oooops, Shannon not implemented - exiting\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"\nDoing analysis - Optimal Design %s %s - %d experiment%c\n"	*(char)
,	O
(	O
pmc	O
->	O
style	O
==	O
forward	O
?	O
"forward"	*(char)
:	O
"backward"	*(char)
)	O
,	O
(	O
criterion	O
==	O
Var_Reduction	O
?	O
"variance reduction"	*(char)
:	O
"Shannon"	*(char)
)	O
,	O
panal	O
->	O
expGlobal	O
.	O
iExp	O
,	O
(	O
panal	O
->	O
expGlobal	O
.	O
iExp	O
>	O
1	int
?	O
's'	O
:	O
' '	O
)	O
)	O
;	O
OpenOptFiles	O
(	O
panal	O
)	O
;	O
InitOptArrays	O
(	O
panal	O
,	O
&	O
piDesign_mask	O
,	O
&	O
nDesignPts	O
,	O
&	O
pdY	O
,	O
&	O
nPreds	O
,	O
&	O
nStartDecisionPts	O
,	O
&	O
pdVariance	O
,	O
&	O
pdIR	O
,	O
nSims	O
)	O
;	O
SetupLikes	O
(	O
panal	O
,	O
nPreds	O
,	O
&	O
pLikes	O
)	O
;	O
if	O
(	O
!	O
(	O
pgd	O
->	O
szGrestart	O
)	O
)	O
{	O
printf	(*(char))->(int)
(	O
"Error: there must be a parameter sample file - Exiting\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
else	O
{	O
ReadAndSimulate	O
(	O
panal	O
,	O
pmc	O
->	O
nSetParms	O
,	O
pdY	O
,	O
nPreds	O
,	O
pLikes	O
,	O
nSims	O
)	O
;	O
}	O
WriteOutHeader	O
(	O
panal	O
,	O
criterion	O
)	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
nDesignPts	O
;	O
i	O
++	O
)	O
piDesign_mask	O
[	O
i	O
]	O
=	O
!	O
(	O
pmc	O
->	O
style	O
==	O
forward	O
)	O
;	O
if	O
(	O
criterion	O
==	O
Var_Reduction	O
)	O
{	O
if	O
(	O
pmc	O
->	O
style	O
==	O
backward	O
)	O
{	O
nDesignPt_tried	O
=	O
nDesignPts	O
+	O
1	int
;	O
Do_Importance_Ratios	O
(	O
pdY	O
,	O
pLikes	O
,	O
nSims	O
,	O
nPreds	O
,	O
nDesignPts	O
,	O
piDesign_mask	O
,	O
nDesignPt_tried	O
,	O
pdIR	O
)	O
;	O
dBest	O
=	O
DoVariance	O
(	O
nSims	O
,	O
pdIR	O
,	O
pdY	O
,	O
nStartDecisionPts	O
,	O
nPreds	O
)	O
;	O
}	O
else	O
{	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
nSims	O
;	O
j	O
++	O
)	O
pdIR	O
[	O
j	O
]	O
=	O
1	int
/	O
(	O
double	O
)	O
nSims	O
;	O
dBest	O
=	O
DoVariance	O
(	O
nSims	O
,	O
pdIR	O
,	O
pdY	O
,	O
nStartDecisionPts	O
,	O
nPreds	O
)	O
;	O
}	O
}	O
iBest	O
=	O
nDesignPts	O
+	O
1	int
;	O
WriteOptimOut	O
(	O
panal	O
,	O
0	int
,	O
nDesignPts	O
,	O
criterion	O
,	O
pdVariance	O
,	O
piDesign_mask	O
,	O
iBest	O
,	O
dBest	O
,	O
dUtility	O
)	O
;	O
dim	int
=	O
(	O
(	O
pmc	O
->	O
style	O
==	O
backward	O
)	O
?	O
nDesignPts	O
-	O
1	int
:	O
nDesignPts	O
)	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
dim	int
;	O
i	O
++	O
)	O
{	O
if	O
(	O
criterion	O
==	O
Var_Reduction	O
)	O
dBest	O
=	O
DBL_MAX	O
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
nDesignPts	O
;	O
j	O
++	O
)	O
{	O
if	O
(	O
piDesign_mask	O
[	O
j	O
]	O
==	O
(	O
pmc	O
->	O
style	O
==	O
backward	O
)	O
)	O
{	O
nDesignPt_tried	O
=	O
j	O
;	O
pdVariance	O
[	O
j	O
]	O
=	O
0	int
;	O
if	O
(	O
criterion	O
==	O
Var_Reduction	O
)	O
{	O
Do_Importance_Ratios	O
(	O
pdY	O
,	O
pLikes	O
,	O
nSims	O
,	O
nPreds	O
,	O
nDesignPts	O
,	O
piDesign_mask	O
,	O
nDesignPt_tried	O
,	O
pdIR	O
)	O
;	O
pdVariance	O
[	O
j	O
]	O
=	O
DoVariance	O
(	O
nSims	O
,	O
pdIR	O
,	O
pdY	O
,	O
nStartDecisionPts	O
,	O
nPreds	O
)	O
;	O
}	O
if	O
(	O
dBest	O
>	O
pdVariance	O
[	O
j	O
]	O
)	O
{	O
dBest	O
=	O
pdVariance	O
[	O
j	O
]	O
;	O
iBest	O
=	O
j	O
;	O
}	O
}	O
}	O
piDesign_mask	O
[	O
iBest	O
]	O
=	O
!	O
piDesign_mask	O
[	O
iBest	O
]	O
;	O
WriteOptimOut	O
(	O
panal	O
,	O
i	O
+	O
1	int
,	O
nDesignPts	O
,	O
criterion	O
,	O
pdVariance	O
,	O
piDesign_mask	O
,	O
iBest	O
,	O
dBest	O
,	O
dUtility	O
)	O
;	O
printf	(*(char))->(int)
(	O
"%ld points design done\n"	*(char)
,	O
i	O
+	O
1	int
)	O
;	O
}	O
if	O
(	O
pmc	O
->	O
style	O
==	O
backward	O
)	O
{	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
nSims	O
;	O
j	O
++	O
)	O
pdIR	O
[	O
j	O
]	O
=	O
1	int
/	O
(	O
double	O
)	O
nSims	O
;	O
if	O
(	O
criterion	O
==	O
Var_Reduction	O
)	O
{	O
dBest	O
=	O
DoVariance	O
(	O
nSims	O
,	O
pdIR	O
,	O
pdY	O
,	O
nStartDecisionPts	O
,	O
nPreds	O
)	O
;	O
j	O
=	O
0	int
;	O
while	O
(	O
piDesign_mask	O
[	O
j	O
]	O
==	O
0	int
)	O
j	O
++	O
;	O
iBest	O
=	O
j	O
;	O
}	O
WriteOptimOut	O
(	O
panal	O
,	O
nDesignPts	O
,	O
nDesignPts	O
,	O
criterion	O
,	O
pdVariance	O
,	O
piDesign_mask	O
,	O
iBest	O
,	O
dBest	O
,	O
0	int
)	O
;	O
printf	(*(char))->(int)
(	O
"%ld points design done\n"	*(char)
,	O
nDesignPts	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
piDesign_mask	O
)	O
;	O
CloseOptFiles	O
(	O
panal	O
)	O
;	O
}	O
