int	O
swlib_vrealpath	(*(char),*(char),*(int),*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
char	O
*	O
vpwd	*(char)
,	O
char	O
*	O
ppath	*(char)
,	O
int	O
*	O
depth	*(int)
,	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
resolved_path	*(struct(*(char),*(char),int,int,int,char,int))
)	O
{	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
;	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
bpath	*(struct(*(char),*(char),int,int,int,char,int))
;	O
int	O
count	long
=	O
0	int
;	O
int	O
numcomponents	int
=	O
0	int
;	O
char	O
*	O
path	*(char)
;	O
char	O
*	O
s	*(struct(*(char),*(char),int,int,int,char,int))
;	O
int	O
is_absolute_path	int
=	O
0	int
;	O
int	O
compcount	int
=	O
0	int
;	O
int	O
do_add	int
=	O
0	int
;	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_open	(long)->(*(struct(*(char),*(char),int,int,int,char,int)))
(	O
10	int
)	O
;	O
bpath	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_open	(long)->(*(struct(*(char),*(char),int,int,int,char,int)))
(	O
10	int
)	O
;	O
if	O
(	O
vpwd	*(char)
&&	O
strlen	(*(char))->(long)
(	O
vpwd	*(char)
)	O
)	O
{	O
strob_strcpy	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
bpath	*(struct(*(char),*(char),int,int,int,char,int))
,	O
vpwd	*(char)
)	O
;	O
if	O
(	O
vpwd	*(char)
[	O
strlen	(*(char))->(long)
(	O
vpwd	*(char)
)	O
-	O
1	int
]	O
!=	O
'/'	O
)	O
{	O
strob_strcat	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
bpath	*(struct(*(char),*(char),int,int,int,char,int))
,	O
"/"	*(char)
)	O
;	O
}	O
}	O
strob_strcat	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
bpath	*(struct(*(char),*(char),int,int,int,char,int))
,	O
ppath	*(char)
)	O
;	O
path	*(char)
=	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
bpath	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
swlib_slashclean	(*(char))->(void)
(	O
path	*(char)
)	O
;	O
if	O
(	O
resolved_path	*(struct(*(char),*(char),int,int,int,char,int))
)	O
strob_strcpy	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
resolved_path	*(struct(*(char),*(char),int,int,int,char,int))
,	O
""	*(char)
)	O
;	O
if	O
(	O
vpwd	*(char)
&&	O
strlen	(*(char))->(long)
(	O
vpwd	*(char)
)	O
)	O
{	O
is_absolute_path	int
=	O
(	O
*	O
vpwd	*(char)
==	O
'/'	O
)	O
;	O
}	O
else	O
{	O
is_absolute_path	int
=	O
(	O
*	O
ppath	*(char)
==	O
'/'	O
)	O
;	O
}	O
s	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_strtok	(*(struct(*(char),*(char),int,int,int,char,int)),*(char),*(char))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
,	O
path	*(char)
,	O
"/"	*(char)
)	O
;	O
while	O
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
{	O
do_add	int
=	O
0	int
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
,	O
".."	*(char)
)	O
==	O
0	int
)	O
{	O
do_add	int
=	O
-	O
1	int
;	O
count	long
--	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
s	*(struct(*(char),*(char),int,int,int,char,int))
,	O
"."	*(char)
)	O
==	O
0	int
)	O
{	O
}	O
else	O
{	O
do_add	int
=	O
1	int
;	O
count	long
++	O
;	O
}	O
if	O
(	O
resolved_path	*(struct(*(char),*(char),int,int,int,char,int))
)	O
{	O
if	O
(	O
do_add	int
>	O
0	int
)	O
{	O
if	O
(	O
(	O
is_absolute_path	int
&&	O
!	O
compcount	int
)	O
||	O
compcount	int
)	O
{	O
if	O
(	O
strob_strlen	(*(struct(*(char),*(char),int,int,int,char,int)))->(long)
(	O
resolved_path	*(struct(*(char),*(char),int,int,int,char,int))
)	O
&&	O
*	O
(	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
resolved_path	*(struct(*(char),*(char),int,int,int,char,int))
)	O
+	O
strob_strlen	(*(struct(*(char),*(char),int,int,int,char,int)))->(long)
(	O
resolved_path	*(struct(*(char),*(char),int,int,int,char,int))
)	O
-	O
1	int
)	O
!=	O
'/'	O
)	O
strob_strcat	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
resolved_path	*(struct(*(char),*(char),int,int,int,char,int))
,	O
"/"	*(char)
)	O
;	O
}	O
strob_strcat	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
resolved_path	*(struct(*(char),*(char),int,int,int,char,int))
,	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
compcount	int
++	O
;	O
}	O
else	O
if	O
(	O
do_add	int
<	O
0	int
)	O
{	O
char	O
*	O
ls	*(char)
;	O
ls	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
resolved_path	*(struct(*(char),*(char),int,int,int,char,int))
)	O
,	O
'/'	O
)	O
;	O
if	O
(	O
ls	*(char)
&&	O
ls	*(char)
!=	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
resolved_path	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
{	O
*	O
ls	*(char)
=	O
'\0'	O
;	O
}	O
else	O
if	O
(	O
is_absolute_path	int
&&	O
count	long
<=	O
0	int
)	O
{	O
strob_strcpy	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
resolved_path	*(struct(*(char),*(char),int,int,int,char,int))
,	O
"/"	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
is_absolute_path	int
==	O
0	int
&&	O
count	long
<=	O
0	int
)	O
{	O
strob_strcpy	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
resolved_path	*(struct(*(char),*(char),int,int,int,char,int))
,	O
""	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
;	O
}	O
if	O
(	O
is_absolute_path	int
==	O
0	int
)	O
{	O
swlib_squash_leading_slash	(*(char))->(void)
(	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
resolved_path	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
;	O
}	O
}	O
numcomponents	int
++	O
;	O
s	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_strtok	(*(struct(*(char),*(char),int,int,int,char,int)),*(char),*(char))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
,	O
NULL	O
,	O
"/"	*(char)
)	O
;	O
}	O
if	O
(	O
depth	*(int)
)	O
*	O
depth	*(int)
=	O
count	long
;	O
strob_close	(*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
strob_close	(*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
bpath	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
return	O
numcomponents	int
;	O
}	O
