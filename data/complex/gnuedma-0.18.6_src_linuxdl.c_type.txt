HMEM	long
EDMAPROC	O
LoadLib	(*(char))->(long)
(	O
EPChar	*(char)
n	*(char)
)	O
{	O
EPVoid	*(void)
a	*(void)
;	O
a	*(void)
=	O
dlopen	(*(char),int)->(*(void))
(	O
n	*(char)
,	O
RTLD_NOW	int
|	O
RTLD_GLOBAL	int
)	O
;	O
if	O
(	O
!	O
a	*(void)
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"[LoadLib]%s"	*(char)
,	O
dlerror	()->(*(char))
(	O
)	O
)	O
;	O
return	O
0	int
;	O
}	O
return	O
(	O
(	O
HMEM	long
)	O
a	*(void)
)	O
;	O
}	O
EPVoid	*(void)
EDMAPROC	O
GetAddress	(long,*(char))->(*(void))
(	O
HMEM	long
a	*(void)
,	O
EPChar	*(char)
n	*(char)
)	O
{	O
EPVoid	*(void)
p	*(void)
;	O
EPChar	*(char)
error	*(char)
;	O
p	*(void)
=	O
(	O
EPVoid	*(void)
)	O
dlsym	(*(void),*(char))->(*(void))
(	O
(	O
EPVoid	*(void)
)	O
a	*(void)
,	O
n	*(char)
)	O
;	O
error	*(char)
=	O
dlerror	()->(*(char))
(	O
)	O
;	O
if	O
(	O
error	*(char)
!=	O
NULL	O
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"[GetAddress]%s"	*(char)
,	O
error	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
return	O
p	*(void)
;	O
}	O
EUint32	long
EDMAPROC	O
UnloadLib	(long)->(long)
(	O
HMEM	long
i	long
)	O
{	O
return	O
dlclose	(*(void))->(int)
(	O
(	O
EPVoid	*(void)
)	O
i	long
)	O
;	O
}	O
