int	O
_VProcessColor	(*(struct(int,*(struct(*`,short,short,*`)),int,int,int,*(struct(*`,short,short,*`)),double,*(double))),*(struct(*(struct(*`,long,*`,int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*`,int,short,short,short,short,int,struct`,*`,*`,*`,*`,*`,*`,int,int,int,*`,int,int,*`,int,int,*`,int,int)),long,long,struct(array(array(double))),*(struct(short,short,short,struct`,*`,*`,*`,double)),array(struct(double,double,double)),double,double,double,double,int,int,struct(short,short),struct(double,double,double),*(struct),int,long,long,long,*(struct),array(long),int,int,long,long,long,*(short),*(short),array(short),struct(long,short,short,short,char,char),array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*(struct(*`,long,int,long,long,long,int,int)),*(struct(short,long,*`,*`)),long,long,*(()->(void)),*((*`,long,*`)->(int)),*((*`,int,int,int,int,short)->(void)),*((*`,*`,int,short)->(void)),*((*`,long,*`,*`)->(void)),*((*`,int,int,int,int,short)->(void)),*((*`,*`)->(void)),*((*`,int,int,int,int)->(void)),*((*`)->(void)),long)),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))))->(int)
PARAMS	O
(	O
(	O
VWorkContext	struct(int,*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),int,int,int,*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),double,*(double))
*	O
cxt	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
,	O
Viewport	struct(*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*`,*`,int)),*(struct(*`,*`,int)),*(struct(*`,*`,int)),*(struct(*`)),*(struct(*`)),*(struct(short,long,long,*`,*`,*`)),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int)),long,long,struct(array(array(double))),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)),array(struct(double,double,double)),double,double,double,double,int,int,struct(short,short),struct(double,double,double),*(struct),int,long,long,long,*(struct),array(long),int,int,long,long,long,*(short),*(short),array(short),struct(long,short,short,short,char,char),array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*(struct(*(struct(int,*`,*`,*`)),long,int,long,long,long,int,int)),*(struct(short,long,*(struct(short,long,*`,*`)),*(struct(short,long,*`,*`)))),long,long,*(()->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),long,*(struct(long,short,short,short,char,char)))->(int)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),int,int,int,int,short)->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),*(struct(short,short,short,short)),int,short)->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),long,*(struct),*(struct(short,short,short,struct`,*`,*`,*`,double)))->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),int,int,int,int,short)->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),*(struct))->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),int,int,int,int)->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)))->(void)),long)
*	O
v	struct(double,double,double)
,	O
VColor	struct(*(char),short,short,*(struct(*(char),short,short,*(struct(*`,short,short,*`)))))
*	O
vc	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
)	O
)	O
;	O
static	O
char	O
*	O
errmsg	*(char)
=	O
"Not enough pixel space for all colors\n"	*(char)
;	O
static	O
char	O
*	O
errmsg2	*(char)
=	O
"Unable to parse color \"%s\".\n"	*(char)
;	O
void	O
VSetColorTweakProc	(*(struct(*(struct(*`,long,*`,int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*`,int,short,short,short,short,int,struct`,*`,*`,*`,*`,*`,*`,int,int,int,*`,int,int,*`,int,int,*`,int,int)),long,long,struct(array(array(double))),*(struct(short,short,short,struct`,*`,*`,*`,double)),array(struct(double,double,double)),double,double,double,double,int,int,struct(short,short),struct(double,double,double),*(struct),int,long,long,long,*(struct),array(long),int,int,long,long,long,*(short),*(short),array(short),struct(long,short,short,short,char,char),array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*(struct(*`,long,int,long,long,long,int,int)),*(struct(short,long,*`,*`)),long,long,*(()->(void)),*((*`,long,*`)->(int)),*((*`,int,int,int,int,short)->(void)),*((*`,*`,int,short)->(void)),*((*`,long,*`,*`)->(void)),*((*`,int,int,int,int,short)->(void)),*((*`,*`)->(void)),*((*`,int,int,int,int)->(void)),*((*`)->(void)),long)),*(()->(void)))->(void)
(	O
Viewport	struct(*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*`,*`,int)),*(struct(*`,*`,int)),*(struct(*`,*`,int)),*(struct(*`)),*(struct(*`)),*(struct(short,long,long,*`,*`,*`)),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int)),long,long,struct(array(array(double))),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)),array(struct(double,double,double)),double,double,double,double,int,int,struct(short,short),struct(double,double,double),*(struct),int,long,long,long,*(struct),array(long),int,int,long,long,long,*(short),*(short),array(short),struct(long,short,short,short,char,char),array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*(struct(*(struct(int,*`,*`,*`)),long,int,long,long,long,int,int)),*(struct(short,long,*(struct(short,long,*`,*`)),*(struct(short,long,*`,*`)))),long,long,*(()->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),long,*(struct(long,short,short,short,char,char)))->(int)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),int,int,int,int,short)->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),*(struct(short,short,short,short)),int,short)->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),long,*(struct),*(struct(short,short,short,struct`,*`,*`,*`,double)))->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),int,int,int,int,short)->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),*(struct))->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),int,int,int,int)->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)))->(void)),long)
*	O
v	struct(double,double,double)
,	O
void	O
(	O
*	O
proc	*(()->(void))
)	O
(	O
)	O
)	O
{	O
v	struct(double,double,double)
->	O
colorTweakProc	*(()->(void))
=	O
proc	*(()->(void))
;	O
}	O
static	O
int	O
pmap	(*(long),int)->(int)
(	O
long	O
unsigned	O
int	O
*	O
vec	*(long)
,	O
int	O
n	int
)	O
{	O
static	O
int	O
itbl	array(int)
[	O
]	O
=	O
{	O
1	int
,	O
2	int
,	O
4	int
,	O
8	int
}	O
;	O
register	O
int	O
i	int
,	O
r	*(struct(double,double,double))
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
++	O
i	int
)	O
if	O
(	O
itbl	array(int)
[	O
i	int
]	O
&	O
n	int
)	O
r	*(struct(double,double,double))
+=	O
vec	*(long)
[	O
i	int
]	O
;	O
return	O
r	*(struct(double,double,double))
;	O
}	O
int	O
VBindColors	(*(struct(*(struct(*`,long,*`,int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*`,int,short,short,short,short,int,struct`,*`,*`,*`,*`,*`,*`,int,int,int,*`,int,int,*`,int,int,*`,int,int)),long,long,struct(array(array(double))),*(struct(short,short,short,struct`,*`,*`,*`,double)),array(struct(double,double,double)),double,double,double,double,int,int,struct(short,short),struct(double,double,double),*(struct),int,long,long,long,*(struct),array(long),int,int,long,long,long,*(short),*(short),array(short),struct(long,short,short,short,char,char),array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*(struct(*`,long,int,long,long,long,int,int)),*(struct(short,long,*`,*`)),long,long,*(()->(void)),*((*`,long,*`)->(int)),*((*`,int,int,int,int,short)->(void)),*((*`,*`,int,short)->(void)),*((*`,long,*`,*`)->(void)),*((*`,int,int,int,int,short)->(void)),*((*`,*`)->(void)),*((*`,int,int,int,int)->(void)),*((*`)->(void)),long)),*(char))->(int)
(	O
Viewport	struct(*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*`,*`,int)),*(struct(*`,*`,int)),*(struct(*`,*`,int)),*(struct(*`)),*(struct(*`)),*(struct(short,long,long,*`,*`,*`)),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int)),long,long,struct(array(array(double))),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)),array(struct(double,double,double)),double,double,double,double,int,int,struct(short,short),struct(double,double,double),*(struct),int,long,long,long,*(struct),array(long),int,int,long,long,long,*(short),*(short),array(short),struct(long,short,short,short,char,char),array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*(struct(*(struct(int,*`,*`,*`)),long,int,long,long,long,int,int)),*(struct(short,long,*(struct(short,long,*`,*`)),*(struct(short,long,*`,*`)))),long,long,*(()->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),long,*(struct(long,short,short,short,char,char)))->(int)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),int,int,int,int,short)->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),*(struct(short,short,short,short)),int,short)->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),long,*(struct),*(struct(short,short,short,struct`,*`,*`,*`,double)))->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),int,int,int,int,short)->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),*(struct))->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),int,int,int,int)->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)))->(void)),long)
*	O
v	struct(double,double,double)
,	O
char	O
*	O
background	long
)	O
{	O
register	O
int	O
i	int
,	O
j	int
,	O
k	int
,	O
n	int
,	O
c	*(struct(long,short,short,short,char,char))
;	O
static	O
int	O
parseComplete	int
=	O
0	int
;	O
unsigned	O
int	O
pixel	long
;	O
VColor	struct(*(char),short,short,*(struct(*(char),short,short,*(struct(*`,short,short,*`)))))
*	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
,	O
*	O
bg	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
;	O
XColor	struct(long,short,short,short,char,char)
*	O
colorSet	*(struct(long,short,short,short,char,char))
;	O
Display	struct
*	O
dpy	*(struct)
;	O
unsigned	O
long	O
planemask	array(long)
[	O
PLANECOUNT	int
*	O
2	int
]	O
;	O
unsigned	O
long	O
pixels	array(long)
[	O
1	int
]	O
;	O
int	O
maxpcolors	int
;	O
char	O
realColor	array(char)
[	O
64	int
]	O
;	O
maxpcolors	int
=	O
(	O
v	struct(double,double,double)
->	O
flags	short
&	O
VPMono	int
)	O
?	O
256	int
:	O
v	struct(double,double,double)
->	O
visual	*(struct(*(struct(int,*(struct`),*((*`)->(int)),*(char))),long,int,long,long,long,int,int))
->	O
map_entries	int
;	O
dpy	*(struct)
=	O
v	struct(double,double,double)
->	O
dpy	*(struct)
;	O
_VDefaultWorkContext	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
nextPixel	int
=	O
0	int
;	O
if	O
(	O
v	struct(double,double,double)
->	O
flags	short
&	O
(	O
VPPixmap	int
|	O
VPFastAnimation	int
|	O
VPMono	int
|	O
VPDoubleBuffer	int
)	O
)	O
{	O
bg	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
=	O
VAllocColor	(*(char))->(*(struct(*(char),short,short,*(struct(*`,short,short,*`)))))
(	O
background	long
)	O
;	O
if	O
(	O
_VProcessColor	(*(struct(int,*(struct(*`,short,short,*`)),int,int,int,*(struct(*`,short,short,*`)),double,*(double))),*(struct(*(struct(*`,long,*`,int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*`,int,short,short,short,short,int,struct`,*`,*`,*`,*`,*`,*`,int,int,int,*`,int,int,*`,int,int,*`,int,int)),long,long,struct(array(array(double))),*(struct(short,short,short,struct`,*`,*`,*`,double)),array(struct(double,double,double)),double,double,double,double,int,int,struct(short,short),struct(double,double,double),*(struct),int,long,long,long,*(struct),array(long),int,int,long,long,long,*(short),*(short),array(short),struct(long,short,short,short,char,char),array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*(struct(*`,long,int,long,long,long,int,int)),*(struct(short,long,*`,*`)),long,long,*(()->(void)),*((*`,long,*`)->(int)),*((*`,int,int,int,int,short)->(void)),*((*`,*`,int,short)->(void)),*((*`,long,*`,*`)->(void)),*((*`,int,int,int,int,short)->(void)),*((*`,*`)->(void)),*((*`,int,int,int,int)->(void)),*((*`)->(void)),long)),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))))->(int)
(	O
_VDefaultWorkContext	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
,	O
v	struct(double,double,double)
,	O
bg	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
)	O
!=	O
0	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
for	O
(	O
(	O
i	int
=	O
0	int
,	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
=	O
_VDefaultWorkContext	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
VColorList	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
)	O
;	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
;	O
i	int
++	O
)	O
{	O
if	O
(	O
i	int
>	O
maxpcolors	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Too many colors selected.\n"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
_VProcessColor	(*(struct(int,*(struct(*`,short,short,*`)),int,int,int,*(struct(*`,short,short,*`)),double,*(double))),*(struct(*(struct(*`,long,*`,int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*`,int,short,short,short,short,int,struct`,*`,*`,*`,*`,*`,*`,int,int,int,*`,int,int,*`,int,int,*`,int,int)),long,long,struct(array(array(double))),*(struct(short,short,short,struct`,*`,*`,*`,double)),array(struct(double,double,double)),double,double,double,double,int,int,struct(short,short),struct(double,double,double),*(struct),int,long,long,long,*(struct),array(long),int,int,long,long,long,*(short),*(short),array(short),struct(long,short,short,short,char,char),array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*(struct(*`,long,int,long,long,long,int,int)),*(struct(short,long,*`,*`)),long,long,*(()->(void)),*((*`,long,*`)->(int)),*((*`,int,int,int,int,short)->(void)),*((*`,*`,int,short)->(void)),*((*`,long,*`,*`)->(void)),*((*`,int,int,int,int,short)->(void)),*((*`,*`)->(void)),*((*`,int,int,int,int)->(void)),*((*`)->(void)),long)),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))))->(int)
(	O
_VDefaultWorkContext	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
,	O
v	struct(double,double,double)
,	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
)	O
!=	O
0	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
=	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
next	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
;	O
}	O
v	struct(double,double,double)
->	O
colors	int
=	O
_VDefaultWorkContext	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
nextPixel	int
;	O
v	struct(double,double,double)
->	O
set	int
=	O
0	int
;	O
v	struct(double,double,double)
->	O
pixel	long
=	O
v	struct(double,double,double)
->	O
aPixel	*(short)
;	O
v	struct(double,double,double)
->	O
mask	long
=	O
AllPlanes	O
;	O
return	O
0	int
;	O
}	O
colorSet	*(struct(long,short,short,short,char,char))
=	O
(	O
XColor	struct(long,short,short,short,char,char)
*	O
)	O
Vmalloc	(int)->(*(char))
(	O
sizeof	O
(	O
XColor	struct(long,short,short,short,char,char)
)	O
*	O
maxpcolors	int
)	O
;	O
n	int
=	O
PLANECOUNT	int
;	O
c	*(struct(long,short,short,short,char,char))
=	O
1	int
<<	O
n	int
;	O
if	O
(	O
XAllocColorCells	(*(struct),long,int,*(long),int,*(long),int)->(int)
(	O
dpy	*(struct)
,	O
v	struct(double,double,double)
->	O
cmap	long
,	O
False	int
,	O
planemask	array(long)
,	O
n	int
*	O
2	int
,	O
pixels	array(long)
,	O
1	int
)	O
==	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Cannot allocate color cells\n"	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
(	O
char	O
*	O
)	O
colorSet	*(struct(long,short,short,short,char,char))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
1	int
)	O
{	O
if	O
(	O
v	struct(double,double,double)
->	O
colorTweakProc	*(()->(void))
)	O
{	O
(	O
*	O
v	struct(double,double,double)
->	O
colorTweakProc	*(()->(void))
)	O
(	O
v	struct(double,double,double)
,	O
background	long
,	O
realColor	array(char)
)	O
;	O
}	O
else	O
{	O
strcpy	O
(	O
realColor	array(char)
,	O
background	long
)	O
;	O
}	O
if	O
(	O
XParseColor	(*(struct),long,*(char),*(struct(long,short,short,short,char,char)))->(int)
(	O
dpy	*(struct)
,	O
v	struct(double,double,double)
->	O
cmap	long
,	O
realColor	array(char)
,	O
&	O
colorSet	*(struct(long,short,short,short,char,char))
[	O
0	int
]	O
)	O
==	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
errmsg2	*(char)
,	O
background	long
)	O
;	O
free	(*(void))->(void)
(	O
colorSet	*(struct(long,short,short,short,char,char))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
for	O
(	O
(	O
i	int
=	O
0	int
,	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
=	O
_VDefaultWorkContext	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
VColorList	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
)	O
;	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
;	O
i	int
++	O
)	O
{	O
if	O
(	O
i	int
>	O
c	*(struct(long,short,short,short,char,char))
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Too many colors selected.\n"	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
colorSet	*(struct(long,short,short,short,char,char))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
v	struct(double,double,double)
->	O
colorTweakProc	*(()->(void))
)	O
{	O
(	O
*	O
v	struct(double,double,double)
->	O
colorTweakProc	*(()->(void))
)	O
(	O
v	struct(double,double,double)
,	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
color_name	*(char)
,	O
realColor	array(char)
)	O
;	O
}	O
else	O
{	O
strcpy	O
(	O
realColor	array(char)
,	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
color_name	*(char)
)	O
;	O
}	O
if	O
(	O
XParseColor	(*(struct),long,*(char),*(struct(long,short,short,short,char,char)))->(int)
(	O
dpy	*(struct)
,	O
v	struct(double,double,double)
->	O
cmap	long
,	O
realColor	array(char)
,	O
&	O
colorSet	*(struct(long,short,short,short,char,char))
[	O
i	int
+	O
1	int
]	O
)	O
==	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
errmsg2	*(char)
,	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
color_name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
colorSet	*(struct(long,short,short,short,char,char))
)	O
;	O
return	O
-	O
1	int
;	O
}	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
cIndex	short
=	O
i	int
+	O
1	int
;	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
=	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
next	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
;	O
}	O
parseComplete	int
=	O
1	int
;	O
}	O
v	struct(double,double,double)
->	O
colors	int
=	O
i	int
+	O
1	int
;	O
k	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
v	struct(double,double,double)
->	O
colors	int
;	O
++	O
i	int
)	O
{	O
pixel	long
=	O
v	struct(double,double,double)
->	O
aPixel	*(short)
[	O
i	int
]	O
=	O
(	O
Color	short
)	O
(	O
pmap	(*(long),int)->(int)
(	O
&	O
planemask	array(long)
[	O
0	int
]	O
,	O
i	int
)	O
|	O
pixels	array(long)
[	O
0	int
]	O
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
v	struct(double,double,double)
->	O
colors	int
;	O
++	O
j	int
)	O
{	O
v	struct(double,double,double)
->	O
aColor	array(struct(long,short,short,short,char,char))
[	O
k	int
]	O
=	O
colorSet	*(struct(long,short,short,short,char,char))
[	O
i	int
]	O
;	O
v	struct(double,double,double)
->	O
aColor	array(struct(long,short,short,short,char,char))
[	O
k	int
++	O
]	O
.	O
pixel	long
=	O
pixel	long
|	O
pmap	(*(long),int)->(int)
(	O
&	O
planemask	array(long)
[	O
n	int
]	O
,	O
j	int
)	O
;	O
}	O
}	O
v	struct(double,double,double)
->	O
aMask	long
=	O
pmap	(*(long),int)->(int)
(	O
&	O
planemask	array(long)
[	O
0	int
]	O
,	O
(	O
c	*(struct(long,short,short,short,char,char))
-	O
1	int
)	O
)	O
|	O
pixels	array(long)
[	O
0	int
]	O
;	O
k	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
v	struct(double,double,double)
->	O
colors	int
;	O
++	O
i	int
)	O
{	O
pixel	long
=	O
v	struct(double,double,double)
->	O
bPixel	array(short)
[	O
i	int
]	O
=	O
(	O
Color	short
)	O
(	O
pmap	(*(long),int)->(int)
(	O
&	O
planemask	array(long)
[	O
n	int
]	O
,	O
i	int
)	O
|	O
pixels	array(long)
[	O
0	int
]	O
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
v	struct(double,double,double)
->	O
colors	int
;	O
++	O
j	int
)	O
{	O
v	struct(double,double,double)
->	O
bColor	array(struct(long,short,short,short,char,char))
[	O
k	int
]	O
=	O
colorSet	*(struct(long,short,short,short,char,char))
[	O
i	int
]	O
;	O
v	struct(double,double,double)
->	O
bColor	array(struct(long,short,short,short,char,char))
[	O
k	int
++	O
]	O
.	O
pixel	long
=	O
pixel	long
|	O
pmap	(*(long),int)->(int)
(	O
&	O
planemask	array(long)
[	O
0	int
]	O
,	O
j	int
)	O
;	O
}	O
}	O
v	struct(double,double,double)
->	O
bMask	long
=	O
pmap	(*(long),int)->(int)
(	O
&	O
planemask	array(long)
[	O
n	int
]	O
,	O
(	O
c	*(struct(long,short,short,short,char,char))
-	O
1	int
)	O
)	O
|	O
pixels	array(long)
[	O
0	int
]	O
;	O
free	(*(void))->(void)
(	O
colorSet	*(struct(long,short,short,short,char,char))
)	O
;	O
return	O
0	int
;	O
}	O
int	O
_VProcessColor	(*(struct(int,*(struct(*`,short,short,*`)),int,int,int,*(struct(*`,short,short,*`)),double,*(double))),*(struct(*(struct(*`,long,*`,int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*`,int,short,short,short,short,int,struct`,*`,*`,*`,*`,*`,*`,int,int,int,*`,int,int,*`,int,int,*`,int,int)),long,long,struct(array(array(double))),*(struct(short,short,short,struct`,*`,*`,*`,double)),array(struct(double,double,double)),double,double,double,double,int,int,struct(short,short),struct(double,double,double),*(struct),int,long,long,long,*(struct),array(long),int,int,long,long,long,*(short),*(short),array(short),struct(long,short,short,short,char,char),array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*(struct(*`,long,int,long,long,long,int,int)),*(struct(short,long,*`,*`)),long,long,*(()->(void)),*((*`,long,*`)->(int)),*((*`,int,int,int,int,short)->(void)),*((*`,*`,int,short)->(void)),*((*`,long,*`,*`)->(void)),*((*`,int,int,int,int,short)->(void)),*((*`,*`)->(void)),*((*`,int,int,int,int)->(void)),*((*`)->(void)),long)),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))))->(int)
(	O
VWorkContext	struct(int,*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),int,int,int,*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),double,*(double))
*	O
cxt	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
,	O
Viewport	struct(*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*`,*`,int)),*(struct(*`,*`,int)),*(struct(*`,*`,int)),*(struct(*`)),*(struct(*`)),*(struct(short,long,long,*`,*`,*`)),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int)),long,long,struct(array(array(double))),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)),array(struct(double,double,double)),double,double,double,double,int,int,struct(short,short),struct(double,double,double),*(struct),int,long,long,long,*(struct),array(long),int,int,long,long,long,*(short),*(short),array(short),struct(long,short,short,short,char,char),array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*(struct(*(struct(int,*`,*`,*`)),long,int,long,long,long,int,int)),*(struct(short,long,*(struct(short,long,*`,*`)),*(struct(short,long,*`,*`)))),long,long,*(()->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),long,*(struct(long,short,short,short,char,char)))->(int)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),int,int,int,int,short)->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),*(struct(short,short,short,short)),int,short)->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),long,*(struct),*(struct(short,short,short,struct`,*`,*`,*`,double)))->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),int,int,int,int,short)->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),*(struct))->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),int,int,int,int)->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)))->(void)),long)
*	O
v	struct(double,double,double)
,	O
VColor	struct(*(char),short,short,*(struct(*(char),short,short,*(struct(*`,short,short,*`)))))
*	O
vc	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
)	O
{	O
char	O
realColor	array(char)
[	O
256	int
]	O
;	O
Display	struct
*	O
dpy	*(struct)
=	O
v	struct(double,double,double)
->	O
dpy	*(struct)
;	O
XColor	struct(long,short,short,short,char,char)
xcolor	struct(long,short,short,short,char,char)
,	O
xcolor2	struct(long,short,short,short,char,char)
,	O
hcolor	struct(long,short,short,short,char,char)
;	O
double	O
d	long
;	O
int	O
i	int
,	O
swap	int
=	O
0	int
;	O
unsigned	O
long	O
temp	long
;	O
if	O
(	O
cxt	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
depthCueSteps	int
>	O
1	int
&&	O
(	O
v	struct(double,double,double)
->	O
flags	short
&	O
VPDepthCueParsed	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
v	struct(double,double,double)
->	O
colorTweakProc	*(()->(void))
)	O
{	O
(	O
*	O
v	struct(double,double,double)
->	O
colorTweakProc	*(()->(void))
)	O
(	O
v	struct(double,double,double)
,	O
cxt	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
depthCueColor	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
->	O
color_name	*(char)
,	O
realColor	array(char)
)	O
;	O
}	O
else	O
{	O
strcpy	O
(	O
realColor	array(char)
,	O
cxt	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
depthCueColor	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
->	O
color_name	*(char)
)	O
;	O
}	O
if	O
(	O
XParseColor	(*(struct),long,*(char),*(struct(long,short,short,short,char,char)))->(int)
(	O
dpy	*(struct)
,	O
v	struct(double,double,double)
->	O
cmap	long
,	O
realColor	array(char)
,	O
&	O
hcolor	struct(long,short,short,short,char,char)
)	O
==	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
errmsg2	*(char)
,	O
cxt	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
depthCueColor	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
->	O
color_name	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
v	struct(double,double,double)
->	O
AllocColor	*((*(struct(*(struct`),long,long,struct(array(array(double))),*(struct`),array(struct(double,double,double)),double,double,double,double,int,int,struct(short,short),struct(double,double,double),*(struct`),int,long,long,long,*(struct`),array(long),int,int,long,long,long,*(short),*(short),array(short),struct(long,short,short,short,char,char),array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*(struct`),*(struct`),long,long,*(()->(void)),*((*`,long,*`)->(int)),*((*`,int,int,int,int,short)->(void)),*((*`,*`,int,short)->(void)),*((*`,long,*`,*`)->(void)),*((*`,int,int,int,int,short)->(void)),*((*`,*`)->(void)),*((*`,int,int,int,int)->(void)),*((*`)->(void)),long)),long,*(struct(long,short,short,short,char,char)))->(int))
(	O
v	struct(double,double,double)
,	O
v	struct(double,double,double)
->	O
cmap	long
,	O
&	O
hcolor	struct(long,short,short,short,char,char)
)	O
==	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
errmsg	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
cxt	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
depthCueColor	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
->	O
cIndex	short
=	O
cxt	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
nextPixel	int
;	O
v	struct(double,double,double)
->	O
aPixel	*(short)
[	O
cxt	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
nextPixel	int
++	O
]	O
=	O
hcolor	struct(long,short,short,short,char,char)
.	O
pixel	long
;	O
v	struct(double,double,double)
->	O
xdepthCueColor	struct(long,short,short,short,char,char)
=	O
hcolor	struct(long,short,short,short,char,char)
;	O
v	struct(double,double,double)
->	O
flags	short
|=	O
VPDepthCueParsed	int
;	O
swap	int
=	O
1	int
;	O
}	O
if	O
(	O
v	struct(double,double,double)
->	O
colorTweakProc	*(()->(void))
)	O
{	O
(	O
*	O
v	struct(double,double,double)
->	O
colorTweakProc	*(()->(void))
)	O
(	O
v	struct(double,double,double)
,	O
vc	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
->	O
color_name	*(char)
,	O
realColor	array(char)
)	O
;	O
}	O
else	O
{	O
strcpy	O
(	O
realColor	array(char)
,	O
vc	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
->	O
color_name	*(char)
)	O
;	O
}	O
if	O
(	O
XParseColor	(*(struct),long,*(char),*(struct(long,short,short,short,char,char)))->(int)
(	O
dpy	*(struct)
,	O
v	struct(double,double,double)
->	O
cmap	long
,	O
realColor	array(char)
,	O
&	O
xcolor	struct(long,short,short,short,char,char)
)	O
==	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
errmsg2	*(char)
,	O
vc	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
->	O
color_name	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
v	struct(double,double,double)
->	O
flags	short
&	O
VPMono	int
)	O
{	O
vc	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
->	O
cIndex	short
=	O
cxt	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
nextPixel	int
;	O
v	struct(double,double,double)
->	O
aPixel	*(short)
[	O
cxt	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
nextPixel	int
++	O
]	O
=	O
(	O
xcolor	struct(long,short,short,short,char,char)
.	O
red	short
*	O
299L	int
+	O
xcolor	struct(long,short,short,short,char,char)
.	O
green	short
*	O
587L	int
+	O
xcolor	struct(long,short,short,short,char,char)
.	O
blue	short
*	O
114L	int
)	O
/	O
(	O
1000	int
*	O
8192	int
)	O
;	O
}	O
else	O
if	O
(	O
v	struct(double,double,double)
->	O
flags	short
&	O
VPDepthCueing	int
&&	O
cxt	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
depthCueSteps	int
>	O
1	int
&&	O
vc	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
->	O
flags	short
&	O
ColorEnableDepthCueing	int
)	O
{	O
vc	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
->	O
cIndex	short
=	O
cxt	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
nextPixel	int
;	O
hcolor	struct(long,short,short,short,char,char)
=	O
v	struct(double,double,double)
->	O
xdepthCueColor	struct(long,short,short,short,char,char)
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
cxt	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
depthCueSteps	int
-	O
1	int
;	O
++	O
i	int
)	O
{	O
d	long
=	O
(	O
double	O
)	O
i	int
/	O
(	O
double	O
)	O
cxt	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
depthCueSteps	int
;	O
xcolor2	struct(long,short,short,short,char,char)
.	O
red	short
=	O
(	O
unsigned	O
short	O
)	O
(	O
xcolor	struct(long,short,short,short,char,char)
.	O
red	short
*	O
(	O
1.0	int
-	O
d	long
)	O
+	O
hcolor	struct(long,short,short,short,char,char)
.	O
red	short
*	O
d	long
)	O
;	O
xcolor2	struct(long,short,short,short,char,char)
.	O
green	short
=	O
(	O
unsigned	O
short	O
)	O
(	O
xcolor	struct(long,short,short,short,char,char)
.	O
green	short
*	O
(	O
1.0	int
-	O
d	long
)	O
+	O
hcolor	struct(long,short,short,short,char,char)
.	O
green	short
*	O
d	long
)	O
;	O
xcolor2	struct(long,short,short,short,char,char)
.	O
blue	short
=	O
(	O
unsigned	O
short	O
)	O
(	O
xcolor	struct(long,short,short,short,char,char)
.	O
blue	short
*	O
(	O
1.0	int
-	O
d	long
)	O
+	O
hcolor	struct(long,short,short,short,char,char)
.	O
blue	short
*	O
d	long
)	O
;	O
xcolor2	struct(long,short,short,short,char,char)
.	O
flags	short
=	O
xcolor	struct(long,short,short,short,char,char)
.	O
flags	short
;	O
if	O
(	O
v	struct(double,double,double)
->	O
AllocColor	*((*(struct(*(struct`),long,long,struct(array(array(double))),*(struct`),array(struct(double,double,double)),double,double,double,double,int,int,struct(short,short),struct(double,double,double),*(struct`),int,long,long,long,*(struct`),array(long),int,int,long,long,long,*(short),*(short),array(short),struct(long,short,short,short,char,char),array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*(struct`),*(struct`),long,long,*(()->(void)),*((*`,long,*`)->(int)),*((*`,int,int,int,int,short)->(void)),*((*`,*`,int,short)->(void)),*((*`,long,*`,*`)->(void)),*((*`,int,int,int,int,short)->(void)),*((*`,*`)->(void)),*((*`,int,int,int,int)->(void)),*((*`)->(void)),long)),long,*(struct(long,short,short,short,char,char)))->(int))
(	O
v	struct(double,double,double)
,	O
v	struct(double,double,double)
->	O
cmap	long
,	O
&	O
xcolor2	struct(long,short,short,short,char,char)
)	O
==	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
errmsg	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
v	struct(double,double,double)
->	O
aPixel	*(short)
[	O
cxt	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
nextPixel	int
++	O
]	O
=	O
xcolor2	struct(long,short,short,short,char,char)
.	O
pixel	long
;	O
}	O
}	O
else	O
{	O
if	O
(	O
v	struct(double,double,double)
->	O
AllocColor	*((*(struct(*(struct`),long,long,struct(array(array(double))),*(struct`),array(struct(double,double,double)),double,double,double,double,int,int,struct(short,short),struct(double,double,double),*(struct`),int,long,long,long,*(struct`),array(long),int,int,long,long,long,*(short),*(short),array(short),struct(long,short,short,short,char,char),array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*(struct`),*(struct`),long,long,*(()->(void)),*((*`,long,*`)->(int)),*((*`,int,int,int,int,short)->(void)),*((*`,*`,int,short)->(void)),*((*`,long,*`,*`)->(void)),*((*`,int,int,int,int,short)->(void)),*((*`,*`)->(void)),*((*`,int,int,int,int)->(void)),*((*`)->(void)),long)),long,*(struct(long,short,short,short,char,char)))->(int))
(	O
v	struct(double,double,double)
,	O
v	struct(double,double,double)
->	O
cmap	long
,	O
&	O
xcolor	struct(long,short,short,short,char,char)
)	O
==	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
errmsg	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
vc	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
->	O
cIndex	short
=	O
cxt	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
nextPixel	int
;	O
v	struct(double,double,double)
->	O
aPixel	*(short)
[	O
cxt	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
nextPixel	int
++	O
]	O
=	O
xcolor	struct(long,short,short,short,char,char)
.	O
pixel	long
;	O
}	O
if	O
(	O
swap	int
)	O
{	O
temp	long
=	O
v	struct(double,double,double)
->	O
aPixel	*(short)
[	O
0	int
]	O
;	O
v	struct(double,double,double)
->	O
aPixel	*(short)
[	O
0	int
]	O
=	O
v	struct(double,double,double)
->	O
aPixel	*(short)
[	O
1	int
]	O
;	O
v	struct(double,double,double)
->	O
aPixel	*(short)
[	O
1	int
]	O
=	O
(	O
Color	short
)	O
temp	long
;	O
temp	long
=	O
cxt	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
depthCueColor	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
->	O
cIndex	short
;	O
cxt	*(struct(int,*(struct(*(char),short,short,*(struct`))),int,int,int,*(struct(*(char),short,short,*(struct`))),double,*(double)))
->	O
depthCueColor	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
->	O
cIndex	short
=	O
vc	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
->	O
cIndex	short
;	O
vc	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
->	O
cIndex	short
=	O
(	O
Color	short
)	O
temp	long
;	O
}	O
return	O
0	int
;	O
}	O
