static	O
int	O
robust_test_convergence	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
c_prev	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
c	*(float)
,	O
const	O
double	O
tol	double
)	O
;	O
static	O
double	O
robust_madsigma	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
size_t	long
p	int
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
double	O
robust_robsigma	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,*(struct(long,long,long,long,*(struct(*`,*`,*`,double)),double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct`),*(struct`)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(double)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
double	O
s	*(float)
,	O
const	O
double	O
tune	double
,	O
gsl_multifit_robust_workspace	struct(long,long,long,long,*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)),double)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int))),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
static	O
double	O
robust_sigma	(double,double,*(struct(long,long,long,long,*(struct(*`,*`,*`,double)),double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct`),*(struct`)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(double)
(	O
const	O
double	O
s_ols	double
,	O
const	O
double	O
s_rob	double
,	O
gsl_multifit_robust_workspace	struct(long,long,long,long,*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)),double)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int))),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
static	O
int	O
robust_covariance	(double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(*`,*`,*`,double)),double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct`),*(struct`)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(int)
(	O
const	O
double	O
sigma	double
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
cov	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_multifit_robust_workspace	struct(long,long,long,long,*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)),double)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int))),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_multifit_robust_workspace	struct(long,long,long,long,*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)),double)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int))),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
gsl_multifit_robust_alloc	(*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)),double)),long,long)->(*(struct(long,long,long,long,*(struct(*`,*`,*`,double)),double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct`),*(struct`)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))
(	O
const	O
gsl_multifit_robust_type	struct(*(char),*((*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),double)
*	O
T	*(struct(*(char),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),double))
,	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
p	int
)	O
{	O
gsl_multifit_robust_workspace	struct(long,long,long,long,*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)),double)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int))),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
if	O
(	O
n	int
<	O
p	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"observations n must be >= p"	*(char)
,	O
GSL_EINVAL	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
gsl_multifit_robust_workspace	struct(long,long,long,long,*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)),double)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int))),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
)	O
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
==	O
0	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for multifit_robust struct"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n	int
=	O
n	int
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
p	int
=	O
p	int
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
type	*(struct(*(char),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),double))
=	O
T	*(struct(*(char),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),double))
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
maxiter	long
=	O
100	int
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
tune	double
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
type	*(struct(*(char),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),double))
->	O
tuning_default	double
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
multifit_p	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
=	O
gsl_multifit_linear_alloc	(long,long)->(*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
(	O
n	int
,	O
p	int
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
multifit_p	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
==	O
0	int
)	O
{	O
gsl_multifit_robust_free	(*(struct(long,long,long,long,*(struct(*`,*`,*`,double)),double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct`),*(struct`)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for multifit_linear struct"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_multifit_robust_free	(*(struct(long,long,long,long,*(struct(*`,*`,*`,double)),double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct`),*(struct`)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for residuals"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
weights	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
weights	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_multifit_robust_free	(*(struct(long,long,long,long,*(struct(*`,*`,*`,double)),double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct`),*(struct`)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for weights"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
c_prev	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
c_prev	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_multifit_robust_free	(*(struct(long,long,long,long,*(struct(*`,*`,*`,double)),double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct`),*(struct`)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for c_prev"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
resfac	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
resfac	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_multifit_robust_free	(*(struct(long,long,long,long,*(struct(*`,*`,*`,double)),double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct`),*(struct`)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for residual factors"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
psi	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
psi	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_multifit_robust_free	(*(struct(long,long,long,long,*(struct(*`,*`,*`,double)),double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct`),*(struct`)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for psi"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
dpsi	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
dpsi	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_multifit_robust_free	(*(struct(long,long,long,long,*(struct(*`,*`,*`,double)),double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct`),*(struct`)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for dpsi"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
QSI	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_alloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
,	O
p	int
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
QSI	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_multifit_robust_free	(*(struct(long,long,long,long,*(struct(*`,*`,*`,double)),double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct`),*(struct`)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for QSI"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
D	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
D	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_multifit_robust_free	(*(struct(long,long,long,long,*(struct(*`,*`,*`,double)),double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct`),*(struct`)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for D"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_multifit_robust_free	(*(struct(long,long,long,long,*(struct(*`,*`,*`,double)),double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct`),*(struct`)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for workn"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
.	O
sigma_ols	double
=	O
0.0	int
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
.	O
sigma_mad	double
=	O
0.0	int
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
.	O
sigma_rob	double
=	O
0.0	int
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
.	O
sigma	double
=	O
0.0	int
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
.	O
Rsq	double
=	O
0.0	int
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
.	O
adj_Rsq	double
=	O
0.0	int
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
.	O
rmse	double
=	O
0.0	int
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
.	O
sse	double
=	O
0.0	int
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
.	O
dof	long
=	O
n	int
-	O
p	int
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
.	O
weights	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
weights	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
.	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
return	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
}	O
void	O
gsl_multifit_robust_free	(*(struct(long,long,long,long,*(struct(*`,*`,*`,double)),double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct`),*(struct`)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(void)
(	O
gsl_multifit_robust_workspace	struct(long,long,long,long,*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)),double)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int))),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
multifit_p	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
gsl_multifit_linear_free	(*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
multifit_p	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
weights	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
weights	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
c_prev	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
c_prev	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
resfac	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
resfac	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
psi	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
psi	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
dpsi	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
dpsi	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
QSI	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
QSI	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
D	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
D	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
}	O
int	O
gsl_multifit_robust_tune	(double,*(struct(long,long,long,long,*(struct(*`,*`,*`,double)),double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct`),*(struct`)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(int)
(	O
const	O
double	O
tune	double
,	O
gsl_multifit_robust_workspace	struct(long,long,long,long,*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)),double)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int))),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
tune	double
=	O
tune	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_multifit_robust_maxiter	(long,*(struct(long,long,long,long,*(struct(*`,*`,*`,double)),double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct`),*(struct`)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(int)
(	O
const	O
size_t	long
maxiter	long
,	O
gsl_multifit_robust_workspace	struct(long,long,long,long,*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)),double)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int))),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
maxiter	long
==	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"maxiter must be greater than 0"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
else	O
{	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
maxiter	long
=	O
maxiter	long
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
const	O
char	O
*	O
gsl_multifit_robust_name	(*(struct(long,long,long,long,*(struct(*`,*`,*`,double)),double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct`),*(struct`)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(*(char))
(	O
const	O
gsl_multifit_robust_workspace	struct(long,long,long,long,*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)),double)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int))),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
return	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
type	*(struct(*(char),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),double))
->	O
name	*(char)
;	O
}	O
gsl_multifit_robust_stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
gsl_multifit_robust_statistics	(*(struct(long,long,long,long,*(struct(*`,*`,*`,double)),double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct`),*(struct`)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int))))
(	O
const	O
gsl_multifit_robust_workspace	struct(long,long,long,long,*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)),double)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int))),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
return	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
;	O
}	O
int	O
gsl_multifit_robust_weights	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(*`,*`,*`,double)),double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct`),*(struct`)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(int)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
wts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_multifit_robust_workspace	struct(long,long,long,long,*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)),double)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int))),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
if	O
(	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
wts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"residual vector does not match weight vector size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
s	*(float)
;	O
double	O
sigma	double
;	O
sigma	double
=	O
robust_madsigma	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
p	int
,	O
wts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
wts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
sigma	double
>	O
0.0	int
)	O
gsl_vector_scale	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
wts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
1.0	int
/	O
(	O
sigma	double
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
tune	double
)	O
)	O
;	O
s	*(float)
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
type	*(struct(*(char),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),double))
->	O
wfun	*((*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)))->(int))
(	O
wts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
wts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
s	*(float)
;	O
}	O
}	O
int	O
gsl_multifit_robust	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(*`,*`,*`,double)),double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct`),*(struct`)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
X	*(float)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
y	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
c	*(float)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
cov	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_multifit_robust_workspace	struct(long,long,long,long,*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)),double)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int))),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
if	O
(	O
X	*(float)
->	O
size1	long
!=	O
y	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"number of observations in y does not match rows of matrix X"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
X	*(float)
->	O
size2	long
!=	O
c	*(float)
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"number of parameters c does not match columns of matrix X"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
cov	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
cov	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"covariance matrix is not square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
c	*(float)
->	O
size	long
!=	O
cov	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"number of parameters does not match size of covariance matrix"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
X	*(float)
->	O
size1	long
!=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n	int
||	O
X	*(float)
->	O
size2	long
!=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"size of workspace does not match size of observation matrix"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
s	*(float)
;	O
double	O
chisq	*(double)
;	O
const	O
double	O
tol	double
=	O
GSL_SQRT_DBL_EPSILON	int
;	O
int	O
converged	int
=	O
0	int
;	O
size_t	long
numit	long
=	O
0	int
;	O
const	O
size_t	long
n	int
=	O
y	double
->	O
size	long
;	O
double	O
sigy	double
=	O
gsl_stats_sd	(array(double),long,long)->(double)
(	O
y	double
->	O
data	*(long double)
,	O
y	double
->	O
stride	long
,	O
n	int
)	O
;	O
double	O
sig_lower	double
;	O
size_t	long
i	long
;	O
sig_lower	double
=	O
1.0e-6	int
*	O
sigy	double
;	O
if	O
(	O
sig_lower	double
==	O
0.0	int
)	O
sig_lower	double
=	O
1.0	int
;	O
s	*(float)
=	O
gsl_multifit_linear	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))->(int)
(	O
X	*(float)
,	O
y	double
,	O
c	*(float)
,	O
cov	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
chisq	*(double)
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
multifit_p	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
;	O
if	O
(	O
s	*(float)
)	O
return	O
s	*(float)
;	O
gsl_matrix_memcpy	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
QSI	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
multifit_p	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
->	O
QSI	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
D	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
multifit_p	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
->	O
D	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
s	*(float)
=	O
gsl_linalg_SV_leverage	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
multifit_p	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
->	O
A	*(float)
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
resfac	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
s	*(float)
)	O
return	O
s	*(float)
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
double	O
h	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
resfac	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
if	O
(	O
h	*(struct(long,long,*(double),*(struct(long,*(double))),int))
>	O
0.9999	int
)	O
h	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
0.9999	int
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
resfac	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
1.0	int
/	O
sqrt	(double)->(double)
(	O
1.0	int
-	O
h	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
)	O
;	O
}	O
s	*(float)
=	O
gsl_multifit_linear_residuals	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
X	*(float)
,	O
y	double
,	O
c	*(float)
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
s	*(float)
)	O
return	O
s	*(float)
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
.	O
sigma_ols	double
=	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
/	O
sqrt	(double)->(double)
(	O
(	O
double	O
)	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
.	O
dof	long
)	O
;	O
while	O
(	O
!	O
converged	int
&&	O
++	O
numit	long
<=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
maxiter	long
)	O
{	O
double	O
sig	double
;	O
s	*(float)
=	O
gsl_vector_mul	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
resfac	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
s	*(float)
)	O
return	O
s	*(float)
;	O
sig	double
=	O
robust_madsigma	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
p	int
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_scale	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
1.0	int
/	O
(	O
GSL_MAX	O
(	O
sig	double
,	O
sig_lower	double
)	O
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
tune	double
)	O
)	O
;	O
s	*(float)
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
type	*(struct(*(char),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),double))
->	O
wfun	*((*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)))->(int))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
weights	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
s	*(float)
)	O
return	O
s	*(float)
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
c_prev	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
c	*(float)
)	O
;	O
s	*(float)
=	O
gsl_multifit_wlinear	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))->(int)
(	O
X	*(float)
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
weights	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
y	double
,	O
c	*(float)
,	O
cov	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
chisq	*(double)
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
multifit_p	*(struct(long,long,long,long,*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
;	O
if	O
(	O
s	*(float)
)	O
return	O
s	*(float)
;	O
s	*(float)
=	O
gsl_multifit_linear_residuals	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
X	*(float)
,	O
y	double
,	O
c	*(float)
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
s	*(float)
)	O
return	O
s	*(float)
;	O
converged	int
=	O
robust_test_convergence	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
c_prev	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
c	*(float)
,	O
tol	double
)	O
;	O
}	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
.	O
sigma_mad	double
=	O
robust_madsigma	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
p	int
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
.	O
sigma_rob	double
=	O
robust_robsigma	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,*(struct(long,long,long,long,*(struct(*`,*`,*`,double)),double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct`),*(struct`)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
.	O
sigma_mad	double
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
tune	double
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
.	O
sigma	double
=	O
robust_sigma	(double,double,*(struct(long,long,long,long,*(struct(*`,*`,*`,double)),double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct`),*(struct`)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
.	O
sigma_ols	double
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
.	O
sigma_rob	double
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
.	O
numit	long
=	O
numit	long
;	O
{	O
double	O
dof	long
=	O
(	O
double	O
)	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
.	O
dof	long
;	O
double	O
rnorm	*(double)
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
.	O
sigma	double
*	O
sqrt	(double)->(double)
(	O
dof	long
)	O
;	O
double	O
ss_err	double
=	O
rnorm	*(double)
*	O
rnorm	*(double)
;	O
double	O
ss_tot	double
=	O
gsl_stats_tss	(array(double),long,long)->(double)
(	O
y	double
->	O
data	*(long double)
,	O
y	double
->	O
stride	long
,	O
n	int
)	O
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
.	O
Rsq	double
=	O
1.0	int
-	O
ss_err	double
/	O
ss_tot	double
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
.	O
adj_Rsq	double
=	O
1.0	int
-	O
(	O
1.0	int
-	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
.	O
Rsq	double
)	O
*	O
(	O
(	O
double	O
)	O
n	int
-	O
1.0	int
)	O
/	O
dof	long
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
.	O
rmse	double
=	O
sqrt	(double)->(double)
(	O
ss_err	double
/	O
dof	long
)	O
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
.	O
sse	double
=	O
ss_err	double
;	O
}	O
s	*(float)
=	O
robust_covariance	(double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(*`,*`,*`,double)),double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct`),*(struct`)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(int)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
.	O
sigma	double
,	O
cov	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
if	O
(	O
s	*(float)
)	O
return	O
s	*(float)
;	O
if	O
(	O
numit	long
>	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
maxiter	long
)	O
{	O
GSL_ERROR	O
(	O
"maximum iterations exceeded"	*(char)
,	O
GSL_EMAXITER	int
)	O
;	O
}	O
return	O
s	*(float)
;	O
}	O
}	O
int	O
gsl_multifit_robust_est	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double))->(int)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
c	*(float)
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
cov	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
double	O
*	O
y	double
,	O
double	O
*	O
y_err	*(double)
)	O
{	O
int	O
s	*(float)
=	O
gsl_multifit_linear_est	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double))->(int)
(	O
x	double
,	O
c	*(float)
,	O
cov	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
y	double
,	O
y_err	*(double)
)	O
;	O
return	O
s	*(float)
;	O
}	O
int	O
gsl_multifit_robust_residuals	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(*`,*`,*`,double)),double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct`),*(struct`)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
X	*(float)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
y	double
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
c	*(float)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_multifit_robust_workspace	struct(long,long,long,long,*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)),double)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int))),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
if	O
(	O
X	*(float)
->	O
size1	long
!=	O
y	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"number of observations in y does not match rows of matrix X"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
X	*(float)
->	O
size2	long
!=	O
c	*(float)
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"number of parameters c does not match columns of matrix X"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
y	double
->	O
size	long
!=	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"number of observations in y does not match number of residuals"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
const	O
double	O
sigma	double
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
stats	struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
.	O
sigma	double
;	O
int	O
s	*(float)
;	O
size_t	long
i	long
;	O
s	*(float)
=	O
gsl_multifit_linear_residuals	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
X	*(float)
,	O
y	double
,	O
c	*(float)
,	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
s	*(float)
)	O
return	O
s	*(float)
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
;	O
++	O
i	long
)	O
{	O
double	O
hfac	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
resfac	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
double	O
*	O
ri	*(double)
=	O
gsl_vector_ptr	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(*(double))
(	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
*	O
ri	*(double)
*=	O
hfac	double
/	O
sigma	double
;	O
}	O
return	O
s	*(float)
;	O
}	O
}	O
static	O
int	O
robust_test_convergence	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
c_prev	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
c	*(float)
,	O
const	O
double	O
tol	double
)	O
{	O
size_t	long
p	int
=	O
c	*(float)
->	O
size	long
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
p	int
;	O
++	O
i	long
)	O
{	O
double	O
ai	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
c_prev	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
double	O
bi	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
c	*(float)
,	O
i	long
)	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
bi	double
-	O
ai	double
)	O
>	O
tol	double
*	O
GSL_MAX	O
(	O
fabs	(double)->(double)
(	O
ai	double
)	O
,	O
fabs	(double)->(double)
(	O
bi	double
)	O
)	O
)	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
static	O
double	O
robust_madsigma	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
size_t	long
p	int
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
size_t	long
n	int
=	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
;	O
double	O
sigma	double
;	O
size_t	long
i	long
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
v1	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
n	int
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
v2	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
&	O
v1	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
i	long
,	O
fabs	(double)->(double)
(	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
)	O
)	O
;	O
}	O
gsl_sort_vector	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
&	O
v1	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
v2	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
v1	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
p	int
-	O
1	int
,	O
n	int
-	O
p	int
+	O
1	int
)	O
;	O
sigma	double
=	O
gsl_stats_median_from_sorted_data	(array(double),long,long)->(double)
(	O
v2	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
.	O
data	*(long double)
,	O
v2	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
.	O
stride	long
,	O
v2	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
.	O
size	long
)	O
/	O
0.6745	int
;	O
return	O
sigma	double
;	O
}	O
static	O
double	O
robust_robsigma	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,*(struct(long,long,long,long,*(struct(*`,*`,*`,double)),double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct`),*(struct`)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(double)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
double	O
s	*(float)
,	O
const	O
double	O
tune	double
,	O
gsl_multifit_robust_workspace	struct(long,long,long,long,*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)),double)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int))),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
double	O
sigma	double
;	O
size_t	long
i	long
;	O
const	O
size_t	long
n	int
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n	int
;	O
const	O
size_t	long
p	int
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
p	int
;	O
const	O
double	O
st	double
=	O
s	*(float)
*	O
tune	double
;	O
double	O
a	double
,	O
b	double
,	O
lambda	double
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
r	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_mul	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
resfac	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_scale	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
1.0	int
/	O
st	double
)	O
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
type	*(struct(*(char),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),double))
->	O
wfun	*((*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)))->(int))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
psi	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
type	*(struct(*(char),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),double))
->	O
psi_deriv	*((*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)))->(int))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
dpsi	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_mul	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
psi	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
a	double
=	O
gsl_stats_mean	(array(double),long,long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
dpsi	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
data	*(long double)
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
dpsi	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
stride	long
,	O
n	int
)	O
;	O
b	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
double	O
psi_i	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
psi	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
double	O
resfac	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
resfac	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
double	O
fac	double
=	O
1.0	int
/	O
(	O
resfac	*(struct(long,long,*(double),*(struct(long,*(double))),int))
*	O
resfac	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
b	double
+=	O
fac	double
*	O
psi_i	double
*	O
psi_i	double
;	O
}	O
b	double
/=	O
(	O
double	O
)	O
(	O
n	int
-	O
p	int
)	O
;	O
lambda	double
=	O
1.0	int
+	O
(	O
(	O
double	O
)	O
p	int
)	O
/	O
(	O
(	O
double	O
)	O
n	int
)	O
*	O
(	O
1.0	int
-	O
a	double
)	O
/	O
a	double
;	O
sigma	double
=	O
lambda	double
*	O
sqrt	(double)->(double)
(	O
b	double
)	O
*	O
st	double
/	O
a	double
;	O
return	O
sigma	double
;	O
}	O
static	O
double	O
robust_sigma	(double,double,*(struct(long,long,long,long,*(struct(*`,*`,*`,double)),double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct`),*(struct`)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(double)
(	O
const	O
double	O
s_ols	double
,	O
const	O
double	O
s_rob	double
,	O
gsl_multifit_robust_workspace	struct(long,long,long,long,*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)),double)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int))),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
double	O
sigma	double
;	O
const	O
double	O
p	int
=	O
(	O
double	O
)	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
p	int
;	O
const	O
double	O
n	int
=	O
(	O
double	O
)	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n	int
;	O
sigma	double
=	O
GSL_MAX	O
(	O
s_rob	double
,	O
sqrt	(double)->(double)
(	O
(	O
s_ols	double
*	O
s_ols	double
*	O
p	int
*	O
p	int
+	O
s_rob	double
*	O
s_rob	double
*	O
n	int
)	O
/	O
(	O
p	int
*	O
p	int
+	O
n	int
)	O
)	O
)	O
;	O
return	O
sigma	double
;	O
}	O
static	O
int	O
robust_covariance	(double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,*(struct(*`,*`,*`,double)),double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct`),*(struct`)),*(struct(long,long,long,long,*`,*`,*`,*`,*`,*`,*`,double)))))->(int)
(	O
const	O
double	O
sigma	double
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
cov	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_multifit_robust_workspace	struct(long,long,long,long,*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)),double)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(double,double,double,double,double,double,double,double,long,long,*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int))),*(struct(long,long,long,long,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double)))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
int	O
status	int
=	O
0	int
;	O
const	O
size_t	long
p	int
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
p	int
;	O
const	O
double	O
s2	double
=	O
sigma	double
*	O
sigma	double
;	O
size_t	long
i	long
,	O
j	long
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
QSI	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
QSI	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
D	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
D	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
p	int
;	O
i	long
++	O
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
row_i	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_row	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
QSI	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
double	O
d_i	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
D	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
for	O
(	O
j	long
=	O
i	long
;	O
j	long
<	O
p	int
;	O
j	long
++	O
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
row_j	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_row	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
QSI	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
)	O
;	O
double	O
d_j	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
D	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
)	O
;	O
double	O
s	*(float)
;	O
gsl_blas_ddot	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double))->(int)
(	O
&	O
row_i	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
row_j	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
s	*(float)
)	O
;	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
cov	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
j	long
,	O
s	*(float)
*	O
s2	double
/	O
(	O
d_i	double
*	O
d_j	double
)	O
)	O
;	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
cov	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
,	O
i	long
,	O
s	*(float)
*	O
s2	double
/	O
(	O
d_i	double
*	O
d_j	double
)	O
)	O
;	O
}	O
}	O
return	O
status	int
;	O
}	O
